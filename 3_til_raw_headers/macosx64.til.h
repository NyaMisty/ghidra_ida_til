enum $003F63A829E52477BDB4080710A1139D {preorder = 0x0,postorder = 0x1,endorder = 0x2,leaf = 0x3,};
struct $0046B6E3F76960040C1982B0037A2659 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t previous;};
struct $01CA16396E8E0606C9A9E0F0E20FCF07 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t signature;NDR_record_t NDR;mach_msg_type_number_t port_nameOffset;mach_msg_type_number_t port_nameCnt;char port_name[80];};
enum $01E72305AF8283EAA993BE6EE5BCD1F9 {NSApplicationDirectory = 0x1,NSDemoApplicationDirectory = 0x2,NSDeveloperApplicationDirectory = 0x3,NSAdminApplicationDirectory = 0x4,NSLibraryDirectory = 0x5,NSDeveloperDirectory = 0x6,NSUserDirectory = 0x7,NSDocumentationDirectory = 0x8,NSDocumentDirectory = 0x9,NSCoreServiceDirectory = 0xA,NSAutosavedInformationDirectory = 0xB,NSDesktopDirectory = 0xC,NSCachesDirectory = 0xD,NSApplicationSupportDirectory = 0xE,NSDownloadsDirectory = 0xF,NSInputMethodsDirectory = 0x10,NSMoviesDirectory = 0x11,NSMusicDirectory = 0x12,NSPicturesDirectory = 0x13,NSPrinterDescriptionDirectory = 0x14,NSSharedPublicDirectory = 0x15,NSPreferencePanesDirectory = 0x16,NSAllApplicationsDirectory = 0x64,NSAllLibrariesDirectory = 0x65,};
enum $031587082C14B3DB98E124F1346E686B {CURLE_OK = 0x0,CURLE_UNSUPPORTED_PROTOCOL = 0x1,CURLE_FAILED_INIT = 0x2,CURLE_URL_MALFORMAT = 0x3,CURLE_OBSOLETE4 = 0x4,CURLE_COULDNT_RESOLVE_PROXY = 0x5,CURLE_COULDNT_RESOLVE_HOST = 0x6,CURLE_COULDNT_CONNECT = 0x7,CURLE_FTP_WEIRD_SERVER_REPLY = 0x8,CURLE_REMOTE_ACCESS_DENIED = 0x9,CURLE_OBSOLETE10 = 0xA,CURLE_FTP_WEIRD_PASS_REPLY = 0xB,CURLE_OBSOLETE12 = 0xC,CURLE_FTP_WEIRD_PASV_REPLY = 0xD,CURLE_FTP_WEIRD_227_FORMAT = 0xE,CURLE_FTP_CANT_GET_HOST = 0xF,CURLE_OBSOLETE16 = 0x10,CURLE_FTP_COULDNT_SET_TYPE = 0x11,CURLE_PARTIAL_FILE = 0x12,CURLE_FTP_COULDNT_RETR_FILE = 0x13,CURLE_OBSOLETE20 = 0x14,CURLE_QUOTE_ERROR = 0x15,CURLE_HTTP_RETURNED_ERROR = 0x16,CURLE_WRITE_ERROR = 0x17,CURLE_OBSOLETE24 = 0x18,CURLE_UPLOAD_FAILED = 0x19,CURLE_READ_ERROR = 0x1A,CURLE_OUT_OF_MEMORY = 0x1B,CURLE_OPERATION_TIMEDOUT = 0x1C,CURLE_OBSOLETE29 = 0x1D,CURLE_FTP_PORT_FAILED = 0x1E,CURLE_FTP_COULDNT_USE_REST = 0x1F,CURLE_OBSOLETE32 = 0x20,CURLE_RANGE_ERROR = 0x21,CURLE_HTTP_POST_ERROR = 0x22,CURLE_SSL_CONNECT_ERROR = 0x23,CURLE_BAD_DOWNLOAD_RESUME = 0x24,CURLE_FILE_COULDNT_READ_FILE = 0x25,CURLE_LDAP_CANNOT_BIND = 0x26,CURLE_LDAP_SEARCH_FAILED = 0x27,CURLE_OBSOLETE40 = 0x28,CURLE_FUNCTION_NOT_FOUND = 0x29,CURLE_ABORTED_BY_CALLBACK = 0x2A,CURLE_BAD_FUNCTION_ARGUMENT = 0x2B,CURLE_OBSOLETE44 = 0x2C,CURLE_INTERFACE_FAILED = 0x2D,CURLE_OBSOLETE46 = 0x2E,CURLE_TOO_MANY_REDIRECTS = 0x2F,CURLE_UNKNOWN_TELNET_OPTION = 0x30,CURLE_TELNET_OPTION_SYNTAX = 0x31,CURLE_OBSOLETE50 = 0x32,CURLE_PEER_FAILED_VERIFICATION = 0x33,CURLE_GOT_NOTHING = 0x34,CURLE_SSL_ENGINE_NOTFOUND = 0x35,CURLE_SSL_ENGINE_SETFAILED = 0x36,CURLE_SEND_ERROR = 0x37,CURLE_RECV_ERROR = 0x38,CURLE_OBSOLETE57 = 0x39,CURLE_SSL_CERTPROBLEM = 0x3A,CURLE_SSL_CIPHER = 0x3B,CURLE_SSL_CACERT = 0x3C,CURLE_BAD_CONTENT_ENCODING = 0x3D,CURLE_LDAP_INVALID_URL = 0x3E,CURLE_FILESIZE_EXCEEDED = 0x3F,CURLE_USE_SSL_FAILED = 0x40,CURLE_SEND_FAIL_REWIND = 0x41,CURLE_SSL_ENGINE_INITFAILED = 0x42,CURLE_LOGIN_DENIED = 0x43,CURLE_TFTP_NOTFOUND = 0x44,CURLE_TFTP_PERM = 0x45,CURLE_REMOTE_DISK_FULL = 0x46,CURLE_TFTP_ILLEGAL = 0x47,CURLE_TFTP_UNKNOWNID = 0x48,CURLE_REMOTE_FILE_EXISTS = 0x49,CURLE_TFTP_NOSUCHUSER = 0x4A,CURLE_CONV_FAILED = 0x4B,CURLE_CONV_REQD = 0x4C,CURLE_SSL_CACERT_BADFILE = 0x4D,CURLE_REMOTE_FILE_NOT_FOUND = 0x4E,CURLE_SSH = 0x4F,CURLE_SSL_SHUTDOWN_FAILED = 0x50,CURLE_AGAIN = 0x51,CURLE_SSL_CRL_BADFILE = 0x52,CURLE_SSL_ISSUER_ERROR = 0x53,CURLE_FTP_PRET_FAILED = 0x54,CURLE_RTSP_CSEQ_ERROR = 0x55,CURLE_RTSP_SESSION_ERROR = 0x56,CURLE_FTP_BAD_FILE_LIST = 0x57,CURLE_CHUNK_FAILED = 0x58,CURL_LAST = 0x59,};
struct $0362AC053C3D6D68586BA4DFD8C6F4A4 {u_int port_id;u_int alive;u_int nport_id_high;u_int nport_id_low;u_int nport_receiver;u_int nport_owner;u_int messages_sent;u_int messages_rcvd;u_int send_rights_sent;u_int send_rights_rcvd_sender;u_int send_rights_rcvd_recown;u_int rcv_rights_xferd;u_int own_rights_xferd;u_int all_rights_xferd;u_int tokens_sent;u_int tokens_requested;u_int xfer_hints_sent;u_int xfer_hints_rcvd;};
struct $03A6CE804D1D2E62AF0690634426EB08 {uint64_t offset;uint64_t length;};
struct $0452B6BEB4BFD9ACB6DF5B39ED6AAB75 {u_char status;u_int32_t ret;};
struct $048C5B8CD9C97BF8D36FBC1C859B011A {mach_msg_header_t Head;NDR_record_t NDR;exception_type_t exception;mach_msg_type_number_t codeCnt;integer_t code[2];int flavor;mach_msg_type_number_t old_stateCnt;natural_t old_state[144];};
struct $049C2F5371F68A7AF5021A13AE52665B {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;vm_size_t out_page_size;};
enum $04A110E55D5920A84871EBC8F69BB0C6 {KRB5_C_RANDSOURCE_OLDAPI = 0x0,KRB5_C_RANDSOURCE_OSRAND = 0x1,KRB5_C_RANDSOURCE_TRUSTEDPARTY = 0x2,KRB5_C_RANDSOURCE_TIMING = 0x3,KRB5_C_RANDSOURCE_EXTERNAL_PROTOCOL = 0x4,KRB5_C_RANDSOURCE_MAX = 0x5,};
struct $05C6DC85C1F1DBCA1F6881BCC9CC439D {char path[128];};
struct $05EECDE53F008AE0E4F8A84193F3FFF1 {struct opaque_auth ah_cred;struct opaque_auth ah_verf;union des_block ah_key;struct $05EECDE53F008AE0E4F8A84193F3FFF1::auth_ops *ah_ops;caddr_t ah_private;};
struct $05EECDE53F008AE0E4F8A84193F3FFF1::auth_ops {void (__cdecl *ah_nextverf)();int (__cdecl *ah_marshal)();int (__cdecl *ah_validate)();int (__cdecl *ah_refresh)();void (__cdecl *ah_destroy)();};
enum $05FFD975A3AE67166A60CC6030479BAB {UNW_REG_IP = 0xFFFFFFFF,UNW_REG_SP = 0xFFFFFFFE,};
struct $0659FB689B9ADFB6E4914AFED3DC9D4E {u_int16_t no;u_int32_t list[16];};
struct $065AA4F4B3DDB89000C8C945CAC4CC2E {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_msg_type_number_t kernel_versionOffset;mach_msg_type_number_t kernel_versionCnt;char kernel_version[512];};
struct $06E00F3ABE7F060E21CF67B7B214767C {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t src_task;NDR_record_t NDR;vm_address_t target_address;vm_size_t size;vm_address_t mask;int flags;vm_address_t src_address;boolean_t copy;vm_inherit_t inheritance;};
struct $07330457B1A8E241B31DE41A5C59B575 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t host;NDR_record_t NDR;mach_msg_type_number_t info_outCnt;integer_t info_out[5];};
enum $0783B1A147A2695A75D59C8C4539C7EA {LAUNCH_DATA_DICTIONARY = 0x1,LAUNCH_DATA_ARRAY = 0x2,LAUNCH_DATA_FD = 0x3,LAUNCH_DATA_INTEGER = 0x4,LAUNCH_DATA_REAL = 0x5,LAUNCH_DATA_BOOL = 0x6,LAUNCH_DATA_STRING = 0x7,LAUNCH_DATA_OPAQUE = 0x8,LAUNCH_DATA_ERRNO = 0x9,LAUNCH_DATA_MACHPORT = 0xA,};
struct $088788A38BBC50D48DDABC82065D5C20 {mach_msg_header_t Head;NDR_record_t NDR;vm_address_t address;vm_size_t size;vm_behavior_t new_behavior;};
struct $08EB952BF76DF7A29BEE12FBAEF31F94 {u_int32_t auid;u_int32_t euid;u_int32_t egid;u_int32_t ruid;u_int32_t rgid;u_int32_t pid;u_int32_t sid;au_tid32_t tid;};
enum $09DE316CB93062A5C173A1063676BE3E {kHFSVolumeHardwareLockBit = 0x7,kHFSVolumeUnmountedBit = 0x8,kHFSVolumeSparedBlocksBit = 0x9,kHFSVolumeNoCacheRequiredBit = 0xA,kHFSBootVolumeInconsistentBit = 0xB,kHFSCatalogNodeIDsReusedBit = 0xC,kHFSVolumeJournaledBit = 0xD,kHFSVolumeInconsistentBit = 0xE,kHFSVolumeSoftwareLockBit = 0xF,kHFSUnusedNodeFixBit = 0x1F,kHFSContentProtectionBit = 0x1E,kHFSVolumeHardwareLockMask = 0x80,kHFSVolumeUnmountedMask = 0x100,kHFSVolumeSparedBlocksMask = 0x200,kHFSVolumeNoCacheRequiredMask = 0x400,kHFSBootVolumeInconsistentMask = 0x800,kHFSCatalogNodeIDsReusedMask = 0x1000,kHFSVolumeJournaledMask = 0x2000,kHFSVolumeInconsistentMask = 0x4000,kHFSVolumeSoftwareLockMask = 0x8000,kHFSUnusedNodeFixMask = 0x80000000,kHFSContentProtectionMask = 0x40000000,kHFSMDBAttributesMask = 0x8380,};
enum $09E147D3D15D65BE8A2EAFBAEB46AC86 {kAUNoErr = 0x0,kAUBadParamErr = 0xFFFEFDFF,kAUStatErr = 0xFFFEFE00,kAUSysctlErr = 0xFFFEFE01,kAUOpenErr = 0xFFFEFE02,kAUMakeSubjectTokErr = 0xFFFEFE03,kAUWriteSubjectTokErr = 0xFFFEFE04,kAUWriteCallerTokErr = 0xFFFEFE05,kAUMakeReturnTokErr = 0xFFFEFE06,kAUWriteReturnTokErr = 0xFFFEFE07,kAUCloseErr = 0xFFFEFE08,kAUMakeTextTokErr = 0xFFFEFE09,kAULastErr = 0xFFFEFE0A,};
enum $0AA02EF7744A92D26B678F19DE8AD812 {PCAP_D_INOUT = 0x0,PCAP_D_IN = 0x1,PCAP_D_OUT = 0x2,};
struct $0B20F48E2CD2D778BD1F216BA81B71CE {unsigned int val[8];};
struct $0B988009212B8FCCED068699BCED27D9 {u_char no;u_int32_t val;u_int16_t len;char *text;};
struct $0BA82F063C392BF02AF0AA599B603A12 {unsigned int val[2];};
struct $0C23990C9A3077933200554184D19969 {u_int32_t size;u_char version;u_int16_t e_type;u_int16_t e_mod;u_int32_t s;u_int32_t ms;};
struct $0C41D669CC7829CF12B135747142967F {const char *str;unsigned __int16 length;};
struct $0C6FFD5AF206204F3817E1D72432929C {u_int32_t addr;};
struct $0CA50DA063E662D611776E2530D5C630 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t child_ledger;NDR_record_t NDR;ledger_item_t transfer;};
enum $0CDFE265BA8298D003ED8250CCBFBAAD {CURLINFO_TEXT = 0x0,CURLINFO_HEADER_IN = 0x1,CURLINFO_HEADER_OUT = 0x2,CURLINFO_DATA_IN = 0x3,CURLINFO_DATA_OUT = 0x4,CURLINFO_SSL_DATA_IN = 0x5,CURLINFO_SSL_DATA_OUT = 0x6,CURLINFO_END = 0x7,};
enum $0D3254EE5F0606DD2967BF158FADA5B5 {SASL_VRFY_PLUGIN = 0x0,SASL_VRFY_CONF = 0x1,SASL_VRFY_PASSWD = 0x2,SASL_VRFY_OTHER = 0x3,};
struct $0D364CBB4DE5622667695AC90920144B {u_int valdat_len;char *valdat_val;};
struct $0D8E21930F8347099053B71EC6295221 {char *rmailbx;char *emailbx;};
enum $0DBFB4EE40FDDB492A6C497C28C3DC12 {CURLUSESSL_NONE = 0x0,CURLUSESSL_TRY = 0x1,CURLUSESSL_CONTROL = 0x2,CURLUSESSL_ALL = 0x3,CURLUSESSL_LAST = 0x4,};
struct $0DDFFC86F34D071263AD20115100C1F0 {int length;};
struct $0E6CC5D607D299E0B4EAC6FD047D8F10 {mach_msg_header_t Head;NDR_record_t NDR;vm_address_t source_address;vm_size_t size;vm_address_t dest_address;};
struct $0E98A572E6852A6395110737D2ACDD5A {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_msg_type_number_t info_outCnt;integer_t info_out[5];};
struct $0EEAE85943931F432FD264390744A4E7 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t parent_task;mach_msg_port_descriptor_t host;mach_msg_ool_ports_descriptor_t ledgers;NDR_record_t NDR;security_token_t sec_token;audit_token_t audit_token;mach_msg_type_number_t ledgersCnt;boolean_t inherit_memory;};
enum $0F66511D35BDCD2A40906A0230E6F760 {CURL_LOCK_DATA_NONE = 0x0,CURL_LOCK_DATA_SHARE = 0x1,CURL_LOCK_DATA_COOKIE = 0x2,CURL_LOCK_DATA_DNS = 0x3,CURL_LOCK_DATA_SSL_SESSION = 0x4,CURL_LOCK_DATA_CONNECT = 0x5,CURL_LOCK_DATA_LAST = 0x6,};
enum $0FAD588DCCF26DA566A37A2D9B7AC1B1 {XPATH_UNDEFINED = 0x0,XPATH_NODESET = 0x1,XPATH_BOOLEAN = 0x2,XPATH_NUMBER = 0x3,XPATH_STRING = 0x4,XPATH_POINT = 0x5,XPATH_RANGE = 0x6,XPATH_LOCATIONSET = 0x7,XPATH_USERS = 0x8,XPATH_XSLT_TREE = 0x9,};
struct $0FCB944A5BB18021AD7F056168D15B92 {mach_msg_trailer_type_t msgh_trailer_type;mach_msg_trailer_size_t msgh_trailer_size;mach_port_seqno_t msgh_seqno;security_token_t msgh_sender;audit_token_t msgh_audit;};
struct $0FEB23DD3DAEBEB1108EF0227BA432B3 {mach_msg_header_t Head;NDR_record_t NDR;mach_vm_address_t address;mach_vm_size_t size;vm_sync_t sync_flags;};
enum $105EF7DF523ADCCD68A3E1D04A367638 {BLOCK_LAYOUT_ESCAPE = 0x0,BLOCK_LAYOUT_NON_OBJECT_BYTES = 0x1,BLOCK_LAYOUT_NON_OBJECT_WORDS = 0x2,BLOCK_LAYOUT_STRONG = 0x3,BLOCK_LAYOUT_BYREF = 0x4,BLOCK_LAYOUT_WEAK = 0x5,BLOCK_LAYOUT_UNRETAINED = 0x6,BLOCK_LAYOUT_UNKNOWN_WORDS_7 = 0x7,BLOCK_LAYOUT_UNKNOWN_WORDS_8 = 0x8,BLOCK_LAYOUT_UNKNOWN_WORDS_9 = 0x9,BLOCK_LAYOUT_UNKNOWN_WORDS_A = 0xA,BLOCK_LAYOUT_UNUSED_B = 0xB,BLOCK_LAYOUT_UNUSED_C = 0xC,BLOCK_LAYOUT_UNUSED_D = 0xD,BLOCK_LAYOUT_UNUSED_E = 0xE,BLOCK_LAYOUT_UNUSED_F = 0xF,};
struct $11759426EFCC6514E2B26D384F50B504 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t new_set;};
enum $118F56CDA9BE3A595E7F6B040CBBDA40 {XSLT_LOAD_START = 0x0,XSLT_LOAD_STYLESHEET = 0x1,XSLT_LOAD_DOCUMENT = 0x2,};
enum $120AC332EBC18F2A4396A3C657EB4314 {kDNSServiceDiscoveryWaiting = 0x1,kDNSServiceDiscoveryNoError = 0x0,kDNSServiceDiscoveryUnknownErr = 0xFFFEFFFF,kDNSServiceDiscoveryNoSuchNameErr = 0xFFFEFFFE,kDNSServiceDiscoveryNoMemoryErr = 0xFFFEFFFD,kDNSServiceDiscoveryBadParamErr = 0xFFFEFFFC,kDNSServiceDiscoveryBadReferenceErr = 0xFFFEFFFB,kDNSServiceDiscoveryBadStateErr = 0xFFFEFFFA,kDNSServiceDiscoveryBadFlagsErr = 0xFFFEFFF9,kDNSServiceDiscoveryUnsupportedErr = 0xFFFEFFF8,kDNSServiceDiscoveryNotInitializedErr = 0xFFFEFFF7,kDNSServiceDiscoveryNoCache = 0xFFFEFFF6,kDNSServiceDiscoveryAlreadyRegistered = 0xFFFEFFF5,kDNSServiceDiscoveryNameConflict = 0xFFFEFFF4,kDNSServiceDiscoveryInvalid = 0xFFFEFFF3,kDNSServiceDiscoveryMemFree = 0xFFFEFF00,};
struct $127ADBDA39FF0AF10F74B8734D022F36 {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_msg_type_number_t policy_infoCnt;integer_t policy_info[16];boolean_t get_default;};
struct $12B704064C062A29855D6F60F4B4754D {EVP_MD_CTX *mctx;void *key;};
enum $12BCB6FB1C1F7369F599F8C0386A61E5 {CURLIOE_OK = 0x0,CURLIOE_UNKNOWNCMD = 0x1,CURLIOE_FAILRESTART = 0x2,CURLIOE_LAST = 0x3,};
struct $140A3B32F7B8885BC10BF2585A8BB950 {u_int16_t size;char *data;};
union $149468D43E4B0BB405DED2721C573480 {char __mbstate8[128];__int64 _mbstateL;};
struct $14FA42BC96FAE132F19280844CA95DD9 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t info;NDR_record_t NDR;mach_msg_type_number_t infoCnt;};
struct $159FB0235BDFD67877B1788BD964EBBB {u_char no;u_int64_t val;u_int16_t len;char *text;};
enum $15BD65DF0A8CF1C1FCC2C1B4CC004B54 {kDNSServiceErr_NoError = 0x0,kDNSServiceErr_Unknown = 0xFFFEFFFF,kDNSServiceErr_NoSuchName = 0xFFFEFFFE,kDNSServiceErr_NoMemory = 0xFFFEFFFD,kDNSServiceErr_BadParam = 0xFFFEFFFC,kDNSServiceErr_BadReference = 0xFFFEFFFB,kDNSServiceErr_BadState = 0xFFFEFFFA,kDNSServiceErr_BadFlags = 0xFFFEFFF9,kDNSServiceErr_Unsupported = 0xFFFEFFF8,kDNSServiceErr_NotInitialized = 0xFFFEFFF7,kDNSServiceErr_AlreadyRegistered = 0xFFFEFFF5,kDNSServiceErr_NameConflict = 0xFFFEFFF4,kDNSServiceErr_Invalid = 0xFFFEFFF3,kDNSServiceErr_Firewall = 0xFFFEFFF2,kDNSServiceErr_Incompatible = 0xFFFEFFF1,kDNSServiceErr_BadInterfaceIndex = 0xFFFEFFF0,kDNSServiceErr_Refused = 0xFFFEFFEF,kDNSServiceErr_NoSuchRecord = 0xFFFEFFEE,kDNSServiceErr_NoAuth = 0xFFFEFFED,kDNSServiceErr_NoSuchKey = 0xFFFEFFEC,kDNSServiceErr_NATTraversal = 0xFFFEFFEB,kDNSServiceErr_DoubleNAT = 0xFFFEFFEA,kDNSServiceErr_BadTime = 0xFFFEFFE9,kDNSServiceErr_BadSig = 0xFFFEFFE8,kDNSServiceErr_BadKey = 0xFFFEFFE7,kDNSServiceErr_Transient = 0xFFFEFFE6,kDNSServiceErr_ServiceNotRunning = 0xFFFEFFE5,kDNSServiceErr_NATPortMappingUnsupported = 0xFFFEFFE4,kDNSServiceErr_NATPortMappingDisabled = 0xFFFEFFE3,kDNSServiceErr_NoRouter = 0xFFFEFFE2,kDNSServiceErr_PollingMode = 0xFFFEFFE1,kDNSServiceErr_Timeout = 0xFFFEFFE0,};
struct $15CE29027F05B8BB8B125DB29B7163BF {mach_msg_header_t header;};
struct $160180DA3C237BA935DA764154BD82EA {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_vm_address_t address;};
enum $162ABE26F671F2AD93D06A9AC8714FD1 {XSLT_FUNC_COPY = 0x1,XSLT_FUNC_SORT = 0x2,XSLT_FUNC_TEXT = 0x3,XSLT_FUNC_ELEMENT = 0x4,XSLT_FUNC_ATTRIBUTE = 0x5,XSLT_FUNC_COMMENT = 0x6,XSLT_FUNC_PI = 0x7,XSLT_FUNC_COPYOF = 0x8,XSLT_FUNC_VALUEOF = 0x9,XSLT_FUNC_NUMBER = 0xA,XSLT_FUNC_APPLYIMPORTS = 0xB,XSLT_FUNC_CALLTEMPLATE = 0xC,XSLT_FUNC_APPLYTEMPLATES = 0xD,XSLT_FUNC_CHOOSE = 0xE,XSLT_FUNC_IF = 0xF,XSLT_FUNC_FOREACH = 0x10,XSLT_FUNC_DOCUMENT = 0x11,XSLT_FUNC_WITHPARAM = 0x12,XSLT_FUNC_PARAM = 0x13,XSLT_FUNC_VARIABLE = 0x14,XSLT_FUNC_WHEN = 0x15,XSLT_FUNC_EXTENSION = 0x16,};
struct $1783B4855960E25D5065E02F55E2E263 {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_port_qos_t qos;mach_port_name_t name;};
enum $1847E82C722A14F5F43D3B5EFF380B36 {kHFSPlusExtentKeyMaximumLength = 0xA,kHFSExtentKeyMaximumLength = 0x7,kHFSPlusCatalogKeyMaximumLength = 0x204,kHFSPlusCatalogKeyMinimumLength = 0x6,kHFSCatalogKeyMaximumLength = 0x25,kHFSCatalogKeyMinimumLength = 0x6,kHFSPlusCatalogMinNodeSize = 0x1000,kHFSPlusExtentMinNodeSize = 0x200,kHFSPlusAttrMinNodeSize = 0x1000,};
struct $184DAAE67CCF1C5185605B7156C28AF9 {unsigned int buffer[4];unsigned __int8 count[8];unsigned int done;};
struct $19986235E824B34A0D641661B11CD27D {mach_msg_header_t Head;NDR_record_t NDR;mach_port_name_t name;};
struct $19DEE1C64F7EC3DDB040A3404BEC0D9F {u_int utmp_array_len;rusers_utmp *utmp_array_val;};
struct $1A15CD9E076CE95EED0CB242AD23A728 {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_port_urefs_t refs;};
struct $1A1AE55D2EE57EB13DB3E8FFAFC89EF6 {const char *name;const char *sym_prefix;lt_module_open *module_open;lt_module_close *module_close;lt_find_sym *find_sym;lt_dlloader_init *dlloader_init;lt_dlloader_exit *dlloader_exit;lt_user_data dlloader_data;lt_dlloader_priority priority;};
struct $1A5C2EFD679D7A6E9374F478B735BD08 {natural_t pad1;mach_msg_size_t pad2;unsigned __int32 pad3 : 24;unsigned __int32 type : 8;};
struct $1A9F4F084CD7F87A2A45367D7A315C43 {UINT4 state[4];UINT4 count[2];unsigned __int8 buffer[64];};
struct $1AD567D4B9681C99D01C1D9A823E24D4 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t io_master;};
union $1B35D174FFD6F02B21E6704B4C951A67 {__int64 *integer;u_char *string;oid *objid;u_char *bitstring;struct counter64 *counter64;float *floatVal;double *doubleVal;};
struct $1C2A755C38DA6DF2E4E1C52F7C8EAD2D {char *mname;char *rname;uint32_t serial;uint32_t refresh;uint32_t retry;uint32_t expire;uint32_t minimum;};
struct $1D15E1936BEC6B64847025DD7DD9970D {uint32_t string_count;char **strings;};
enum $1DB7270510D9B9271406B2E2F1D1DAC7 {XML_ATTRIBUTE_CDATA = 0x1,XML_ATTRIBUTE_ID = 0x2,XML_ATTRIBUTE_IDREF = 0x3,XML_ATTRIBUTE_IDREFS = 0x4,XML_ATTRIBUTE_ENTITY = 0x5,XML_ATTRIBUTE_ENTITIES = 0x6,XML_ATTRIBUTE_NMTOKEN = 0x7,XML_ATTRIBUTE_NMTOKENS = 0x8,XML_ATTRIBUTE_ENUMERATION = 0x9,XML_ATTRIBUTE_NOTATION = 0xA,};
enum $1E2DDA021D687B95C32B4B8734BFFE5E {XML_SAVE_FORMAT = 0x1,XML_SAVE_NO_DECL = 0x2,XML_SAVE_NO_EMPTY = 0x4,XML_SAVE_NO_XHTML = 0x8,XML_SAVE_XHTML = 0x10,XML_SAVE_AS_XML = 0x20,XML_SAVE_AS_HTML = 0x40,};
enum $1FB0C3C05C839538DC046EE3FB85DDAE {kBTLeafNode = 0xFFFFFFFF,kBTIndexNode = 0x0,kBTHeaderNode = 0x1,kBTMapNode = 0x2,};
enum $1FB9CAD4792414AA5B71A295737B2862 {kDyldSharedCacheTypeDevelopment = 0x0,kDyldSharedCacheTypeProduction = 0x1,};
struct $1FC9C4745BFE4A4C45A6D008A791D581 {unsigned __int32 id : 16;unsigned __int32 rd : 1;unsigned __int32 tc : 1;unsigned __int32 aa : 1;unsigned __int32 opcode : 4;unsigned __int32 qr : 1;unsigned __int32 rcode : 4;unsigned __int32 cd : 1;unsigned __int32 ad : 1;unsigned __int32 unused : 1;unsigned __int32 ra : 1;unsigned __int32 qdcount : 16;unsigned __int32 ancount : 16;unsigned __int32 nscount : 16;unsigned __int32 arcount : 16;};
enum $1FDFCDB6B16318BF0B312BA6FA177D60 {kBTBadCloseMask = 0x1,kBTBigKeysMask = 0x2,kBTVariableIndexKeysMask = 0x4,};
struct $1FFFE05A05E2172C218675AE0705335F {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t response_data;mach_msg_ool_descriptor_t log_data;NDR_record_t NDR;mach_msg_type_number_t response_dataCnt;mach_msg_type_number_t log_dataCnt;kern_return_t op_result;};
struct $207271BEEF35C1E72B41BFA669B8BAC6 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t data;NDR_record_t NDR;mach_msg_type_number_t dataCnt;};
struct $211858A17FC3AA3AF7FB370462C716CC {mach_msg_header_t not_header;NDR_record_t NDR;mach_port_name_t not_port;mach_msg_format_0_trailer_t trailer;};
enum $2142F4BDED004AA731F5D116DA25DAF0 {REMOVEFILE_RECURSIVE = 0x1,REMOVEFILE_KEEP_PARENT = 0x2,REMOVEFILE_SECURE_7_PASS = 0x4,REMOVEFILE_SECURE_35_PASS = 0x8,REMOVEFILE_SECURE_1_PASS = 0x10,REMOVEFILE_SECURE_3_PASS = 0x20,REMOVEFILE_SECURE_1_PASS_ZERO = 0x40,};
enum $215194CEC7B0CB0293C31B12FA375707 {TidyNode_Root = 0x0,TidyNode_DocType = 0x1,TidyNode_Comment = 0x2,TidyNode_ProcIns = 0x3,TidyNode_Text = 0x4,TidyNode_Start = 0x5,TidyNode_End = 0x6,TidyNode_StartEnd = 0x7,TidyNode_CDATA = 0x8,TidyNode_Section = 0x9,TidyNode_Asp = 0xA,TidyNode_Jste = 0xB,TidyNode_Php = 0xC,TidyNode_XmlDecl = 0xD,};
struct $2204D4BF90F99AB14C1563C90305E530 {mach_msg_header_t not_header;mach_msg_body_t not_body;mach_msg_port_descriptor_t not_port;mach_msg_format_0_trailer_t trailer;};
struct $221E4D0AC05B62FB3AF409C4572323C5 {intmax_t quot;intmax_t rem;};
struct $2267E9288D5132BEF4B5A8B0E8AC33A6 {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;int state;};
union $2345F6273F81C99369AD5C0E36D3FD0F {mach_msg_empty_send_t send;mach_msg_empty_rcv_t rcv;};
struct $23464681D0D095F096FB79A1E66062AF {mach_msg_header_t Head;NDR_record_t NDR;vm_address_t address;};
struct $23B1E26D963E4FD44AA72239E6371C7D {u_int32_t count;char *text[128];};
struct $23C7832C1B5305C0EFB6A337D90F166D {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_ports_descriptor_t out_processor_list;NDR_record_t NDR;mach_msg_type_number_t out_processor_listCnt;};
enum $24B90EFAD6F7231A0F4CA2F9C31D428B {XML_SCHEMAS_UNKNOWN = 0x0,XML_SCHEMAS_STRING = 0x1,XML_SCHEMAS_NORMSTRING = 0x2,XML_SCHEMAS_DECIMAL = 0x3,XML_SCHEMAS_TIME = 0x4,XML_SCHEMAS_GDAY = 0x5,XML_SCHEMAS_GMONTH = 0x6,XML_SCHEMAS_GMONTHDAY = 0x7,XML_SCHEMAS_GYEAR = 0x8,XML_SCHEMAS_GYEARMONTH = 0x9,XML_SCHEMAS_DATE = 0xA,XML_SCHEMAS_DATETIME = 0xB,XML_SCHEMAS_DURATION = 0xC,XML_SCHEMAS_FLOAT = 0xD,XML_SCHEMAS_DOUBLE = 0xE,XML_SCHEMAS_BOOLEAN = 0xF,XML_SCHEMAS_TOKEN = 0x10,XML_SCHEMAS_LANGUAGE = 0x11,XML_SCHEMAS_NMTOKEN = 0x12,XML_SCHEMAS_NMTOKENS = 0x13,XML_SCHEMAS_NAME = 0x14,XML_SCHEMAS_QNAME = 0x15,XML_SCHEMAS_NCNAME = 0x16,XML_SCHEMAS_ID = 0x17,XML_SCHEMAS_IDREF = 0x18,XML_SCHEMAS_IDREFS = 0x19,XML_SCHEMAS_ENTITY = 0x1A,XML_SCHEMAS_ENTITIES = 0x1B,XML_SCHEMAS_NOTATION = 0x1C,XML_SCHEMAS_ANYURI = 0x1D,XML_SCHEMAS_INTEGER = 0x1E,XML_SCHEMAS_NPINTEGER = 0x1F,XML_SCHEMAS_NINTEGER = 0x20,XML_SCHEMAS_NNINTEGER = 0x21,XML_SCHEMAS_PINTEGER = 0x22,XML_SCHEMAS_INT = 0x23,XML_SCHEMAS_UINT = 0x24,XML_SCHEMAS_LONG = 0x25,XML_SCHEMAS_ULONG = 0x26,XML_SCHEMAS_SHORT = 0x27,XML_SCHEMAS_USHORT = 0x28,XML_SCHEMAS_BYTE = 0x29,XML_SCHEMAS_UBYTE = 0x2A,XML_SCHEMAS_HEXBINARY = 0x2B,XML_SCHEMAS_BASE64BINARY = 0x2C,XML_SCHEMAS_ANYTYPE = 0x2D,XML_SCHEMAS_ANYSIMPLETYPE = 0x2E,};
struct $25B9151150FDB1BB89C80B2A8A85F680 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t lock_set;};
enum $25E79EFADC115BB1720FA9FDCC5A52F9 {PAM_SILENT = 0x80000000,PAM_DISALLOW_NULL_AUTHTOK = 0x1,PAM_ESTABLISH_CRED = 0x1,PAM_DELETE_CRED = 0x2,PAM_REINITIALIZE_CRED = 0x4,PAM_REFRESH_CRED = 0x8,PAM_PRELIM_CHECK = 0x1,PAM_UPDATE_AUTHTOK = 0x2,PAM_CHANGE_EXPIRED_AUTHTOK = 0x4,};
struct $268E73D492E0AA9543C2DAE749E4E286 {mach_msg_header_t Head;NDR_record_t NDR;mach_msg_type_number_t processor_cmdCnt;integer_t processor_cmd[12];};
struct $26DC3EB05C17544AB8AFD85FB443F277 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t pset;NDR_record_t NDR;policy_t policy;mach_msg_type_number_t baseCnt;integer_t base[5];mach_msg_type_number_t limitCnt;integer_t limit[1];};
enum $27728F6308F3E4DDCA008ED55D2293B2 {TidyString = 0x0,TidyInteger = 0x1,TidyBoolean = 0x2,};
struct $278A4467515A4F9120237B9F03BEA089 {u_int16_t len;char *text;};
enum $278B4CDAE9C99E304B0906BE5968E29D {XML_SCHEMA_WHITESPACE_UNKNOWN = 0x0,XML_SCHEMA_WHITESPACE_PRESERVE = 0x1,XML_SCHEMA_WHITESPACE_REPLACE = 0x2,XML_SCHEMA_WHITESPACE_COLLAPSE = 0x3,};
struct $279A7D6BAE671E5D078D50BF79E5C443 {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_msg_type_number_t clock_attrCnt;int clock_attr[1];};
enum $27A01D9EE3F8426B35A7597034B60846 {CURLFILETYPE_FILE = 0x0,CURLFILETYPE_DIRECTORY = 0x1,CURLFILETYPE_SYMLINK = 0x2,CURLFILETYPE_DEVICE_BLOCK = 0x3,CURLFILETYPE_DEVICE_CHAR = 0x4,CURLFILETYPE_NAMEDPIPE = 0x5,CURLFILETYPE_SOCKET = 0x6,CURLFILETYPE_DOOR = 0x7,CURLFILETYPE_UNKNOWN = 0x8,};
enum $28266B4D1FF5A8F2FF1835543AB19A29 {CURLFORM_NOTHING = 0x0,CURLFORM_COPYNAME = 0x1,CURLFORM_PTRNAME = 0x2,CURLFORM_NAMELENGTH = 0x3,CURLFORM_COPYCONTENTS = 0x4,CURLFORM_PTRCONTENTS = 0x5,CURLFORM_CONTENTSLENGTH = 0x6,CURLFORM_FILECONTENT = 0x7,CURLFORM_ARRAY = 0x8,CURLFORM_OBSOLETE = 0x9,CURLFORM_FILE = 0xA,CURLFORM_BUFFER = 0xB,CURLFORM_BUFFERPTR = 0xC,CURLFORM_BUFFERLENGTH = 0xD,CURLFORM_CONTENTTYPE = 0xE,CURLFORM_CONTENTHEADER = 0xF,CURLFORM_FILENAME = 0x10,CURLFORM_END = 0x11,CURLFORM_OBSOLETE2 = 0x12,CURLFORM_STREAM = 0x13,CURLFORM_LASTENTRY = 0x14,};
enum $283BE608AB49AEC9A9CA8DA02D1A1601 {kDNSServiceFlagsMoreComing = 0x1,kDNSServiceFlagsAdd = 0x2,kDNSServiceFlagsDefault = 0x4,kDNSServiceFlagsNoAutoRename = 0x8,kDNSServiceFlagsShared = 0x10,kDNSServiceFlagsUnique = 0x20,kDNSServiceFlagsBrowseDomains = 0x40,kDNSServiceFlagsRegistrationDomains = 0x80,kDNSServiceFlagsLongLivedQuery = 0x100,kDNSServiceFlagsAllowRemoteQuery = 0x200,kDNSServiceFlagsForceMulticast = 0x400,kDNSServiceFlagsForce = 0x800,kDNSServiceFlagsReturnIntermediates = 0x1000,kDNSServiceFlagsNonBrowsable = 0x2000,kDNSServiceFlagsShareConnection = 0x4000,kDNSServiceFlagsSuppressUnusable = 0x8000,kDNSServiceFlagsTimeout = 0x10000,kDNSServiceFlagsIncludeP2P = 0x20000,kDNSServiceFlagsWakeOnResolve = 0x40000,};
struct $28467C2BF1D87957FF78F1692EFD23EF {mach_msg_header_t Head;NDR_record_t NDR;mach_vm_offset_t offset;};
struct $2852C95088D0304BB11C1621105E366D {size_t gl_pathc;int gl_matchc;size_t gl_offs;int gl_flags;char **gl_pathv;union {int (__cdecl *gl_errfunc)(const char *, int);void *gl_errblk;};void (__cdecl *gl_closedir)(void *);struct dirent *(__cdecl *gl_readdir)(void *);void *(__cdecl *gl_opendir)(const char *);int (__cdecl *gl_lstat)(const char *, struct stat *);int (__cdecl *gl_stat)(const char *, struct stat *);};
union $2852C95088D0304BB11C1621105E366D::$EBEEFF9F825AD5996D1BE6C50F3E6AFA {int (__cdecl *gl_errfunc)(const char *, int);void *gl_errblk;};
struct $293AEC9DFB56700A4584D426C489FAA8 {mach_msg_header_t Head;NDR_record_t NDR;mach_vm_address_t address;mach_vm_size_t size;vm_inherit_t new_inheritance;};
struct $29720D4B1372A72A8E922F3C51907D2B {void *data;size_t size;};
struct $298BF45BC869BFBDF761AF6C0543DC18 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t host;NDR_record_t NDR;mach_msg_type_number_t processor_info_outCnt;integer_t processor_info_out[12];};
struct $29C8CFA96D5273DFDE9FA38B770B2076 {u_int32_t s;u_int32_t ms;u_int16_t len;char *name;};
struct $29E38C6493B75A6FA6817975AF03D4C0 {mach_msg_header_t Head;NDR_record_t NDR;policy_t policy;mach_msg_type_number_t baseCnt;integer_t base[5];boolean_t set_limit;boolean_t change;};
enum $29FC7CC788C9FFDBF53740441D4A1DD5 {DNSServiceBrowserReplyAddInstance = 0x0,DNSServiceBrowserReplyRemoveInstance = 0x1,};
struct $2A4BA455395BF41F2F254FCA2AA74280 {mach_msg_header_t Head;NDR_record_t NDR;mach_port_name_t member;mach_port_name_t after;};
struct $2AFE5EE5A4A6FE139E45DAAB082A402B {uint64_t address;unsigned __int32 deallocate : 8;unsigned __int32 copy : 8;unsigned __int32 disposition : 8;unsigned __int32 type : 8;mach_msg_size_t count;};
enum $2B1C8C2AA87A0F529B35F14375A7741D {XML_ERR_NONE = 0x0,XML_ERR_WARNING = 0x1,XML_ERR_ERROR = 0x2,XML_ERR_FATAL = 0x3,};
enum $2B249EAD8B9396505612852840E44E36 {ACL_READ_DATA = 0x2,ACL_LIST_DIRECTORY = 0x2,ACL_WRITE_DATA = 0x4,ACL_ADD_FILE = 0x4,ACL_EXECUTE = 0x8,ACL_SEARCH = 0x8,ACL_DELETE = 0x10,ACL_APPEND_DATA = 0x20,ACL_ADD_SUBDIRECTORY = 0x20,ACL_DELETE_CHILD = 0x40,ACL_READ_ATTRIBUTES = 0x80,ACL_WRITE_ATTRIBUTES = 0x100,ACL_READ_EXTATTRIBUTES = 0x200,ACL_WRITE_EXTATTRIBUTES = 0x400,ACL_READ_SECURITY = 0x800,ACL_WRITE_SECURITY = 0x1000,ACL_CHANGE_OWNER = 0x2000,};
struct $2B2E2AA3D14CF05952EA09DDB52B4A5A {char *filename;char *name;int ref_count;unsigned __int32 is_resident : 1;unsigned __int32 is_symglobal : 1;unsigned __int32 is_symlocal : 1;};
struct $2BBFCDCB7AAC56598321865C412EDD95 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t task;NDR_record_t NDR;vm_address_t address;vm_size_t size;vm_prot_t desired_access;};
struct $2C24181259AD7238BB41D98E89920B4F {mach_msg_header_t Head;NDR_record_t NDR;int flavor;mach_msg_type_number_t new_stateCnt;natural_t new_state[144];};
struct $2C6E018EEF72F12BBEAF7059A87F0DBD {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t task;NDR_record_t NDR;vm_address_t address;vm_size_t size;int flags;};
struct $2CB2463B5AF9A96AD792E2C849F46E7F {mach_msg_header_t Head;NDR_record_t NDR;mach_timespec_t new_time;};
struct $2CC85076D34FF07332855A5130D49334 {void (__cdecl *undefined)(const char *symbolName);NSModule (__cdecl *multiple)(NSSymbol s, NSModule oldModule, NSModule newModule);void (__cdecl *linkEdit)(NSLinkEditErrors errorClass, int errorNumber, const char *fileName, const char *errorString);};
struct $2D63240515AC7C828AB4C7B058DC34F3 {mach_msg_header_t Head;NDR_record_t NDR;mach_port_name_t name;mach_port_seqno_t seqno;};
enum $2DA825ED8C2895B6F3A859CF0380522A {XML_EXP_EMPTY = 0x0,XML_EXP_FORBID = 0x1,XML_EXP_ATOM = 0x2,XML_EXP_SEQ = 0x3,XML_EXP_OR = 0x4,XML_EXP_COUNT = 0x5,};
struct $2E4AEC4DAEDEFAF9740FCE81CFC978B6 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t object_handle;NDR_record_t NDR;vm_size_t size;};
enum $2E8E5FC6A771AD2BBD66B1556875C23C {CURLOPT_FILE = 0x2711,CURLOPT_URL = 0x2712,CURLOPT_PORT = 0x3,CURLOPT_PROXY = 0x2714,CURLOPT_USERPWD = 0x2715,CURLOPT_PROXYUSERPWD = 0x2716,CURLOPT_RANGE = 0x2717,CURLOPT_INFILE = 0x2719,CURLOPT_ERRORBUFFER = 0x271A,CURLOPT_WRITEFUNCTION = 0x4E2B,CURLOPT_READFUNCTION = 0x4E2C,CURLOPT_TIMEOUT = 0xD,CURLOPT_INFILESIZE = 0xE,CURLOPT_POSTFIELDS = 0x271F,CURLOPT_REFERER = 0x2720,CURLOPT_FTPPORT = 0x2721,CURLOPT_USERAGENT = 0x2722,CURLOPT_LOW_SPEED_LIMIT = 0x13,CURLOPT_LOW_SPEED_TIME = 0x14,CURLOPT_RESUME_FROM = 0x15,CURLOPT_COOKIE = 0x2726,CURLOPT_HTTPHEADER = 0x2727,CURLOPT_HTTPPOST = 0x2728,CURLOPT_SSLCERT = 0x2729,CURLOPT_KEYPASSWD = 0x272A,CURLOPT_CRLF = 0x1B,CURLOPT_QUOTE = 0x272C,CURLOPT_WRITEHEADER = 0x272D,CURLOPT_COOKIEFILE = 0x272F,CURLOPT_SSLVERSION = 0x20,CURLOPT_TIMECONDITION = 0x21,CURLOPT_TIMEVALUE = 0x22,CURLOPT_CUSTOMREQUEST = 0x2734,CURLOPT_STDERR = 0x2735,CURLOPT_POSTQUOTE = 0x2737,CURLOPT_WRITEINFO = 0x2738,CURLOPT_VERBOSE = 0x29,CURLOPT_HEADER = 0x2A,CURLOPT_NOPROGRESS = 0x2B,CURLOPT_NOBODY = 0x2C,CURLOPT_FAILONERROR = 0x2D,CURLOPT_UPLOAD = 0x2E,CURLOPT_POST = 0x2F,CURLOPT_DIRLISTONLY = 0x30,CURLOPT_APPEND = 0x32,CURLOPT_NETRC = 0x33,CURLOPT_FOLLOWLOCATION = 0x34,CURLOPT_TRANSFERTEXT = 0x35,CURLOPT_PUT = 0x36,CURLOPT_PROGRESSFUNCTION = 0x4E58,CURLOPT_PROGRESSDATA = 0x2749,CURLOPT_AUTOREFERER = 0x3A,CURLOPT_PROXYPORT = 0x3B,CURLOPT_POSTFIELDSIZE = 0x3C,CURLOPT_HTTPPROXYTUNNEL = 0x3D,CURLOPT_INTERFACE = 0x274E,CURLOPT_KRBLEVEL = 0x274F,CURLOPT_SSL_VERIFYPEER = 0x40,CURLOPT_CAINFO = 0x2751,CURLOPT_MAXREDIRS = 0x44,CURLOPT_FILETIME = 0x45,CURLOPT_TELNETOPTIONS = 0x2756,CURLOPT_MAXCONNECTS = 0x47,CURLOPT_CLOSEPOLICY = 0x48,CURLOPT_FRESH_CONNECT = 0x4A,CURLOPT_FORBID_REUSE = 0x4B,CURLOPT_RANDOM_FILE = 0x275C,CURLOPT_EGDSOCKET = 0x275D,CURLOPT_CONNECTTIMEOUT = 0x4E,CURLOPT_HEADERFUNCTION = 0x4E6F,CURLOPT_HTTPGET = 0x50,CURLOPT_SSL_VERIFYHOST = 0x51,CURLOPT_COOKIEJAR = 0x2762,CURLOPT_SSL_CIPHER_LIST = 0x2763,CURLOPT_HTTP_VERSION = 0x54,CURLOPT_FTP_USE_EPSV = 0x55,CURLOPT_SSLCERTTYPE = 0x2766,CURLOPT_SSLKEY = 0x2767,CURLOPT_SSLKEYTYPE = 0x2768,CURLOPT_SSLENGINE = 0x2769,CURLOPT_SSLENGINE_DEFAULT = 0x5A,CURLOPT_DNS_USE_GLOBAL_CACHE = 0x5B,CURLOPT_DNS_CACHE_TIMEOUT = 0x5C,CURLOPT_PREQUOTE = 0x276D,CURLOPT_DEBUGFUNCTION = 0x4E7E,CURLOPT_DEBUGDATA = 0x276F,CURLOPT_COOKIESESSION = 0x60,CURLOPT_CAPATH = 0x2771,CURLOPT_BUFFERSIZE = 0x62,CURLOPT_NOSIGNAL = 0x63,CURLOPT_SHARE = 0x2774,CURLOPT_PROXYTYPE = 0x65,CURLOPT_ENCODING = 0x2776,CURLOPT_PRIVATE = 0x2777,CURLOPT_HTTP200ALIASES = 0x2778,CURLOPT_UNRESTRICTED_AUTH = 0x69,CURLOPT_FTP_USE_EPRT = 0x6A,CURLOPT_HTTPAUTH = 0x6B,CURLOPT_SSL_CTX_FUNCTION = 0x4E8C,CURLOPT_SSL_CTX_DATA = 0x277D,CURLOPT_FTP_CREATE_MISSING_DIRS = 0x6E,CURLOPT_PROXYAUTH = 0x6F,CURLOPT_FTP_RESPONSE_TIMEOUT = 0x70,CURLOPT_IPRESOLVE = 0x71,CURLOPT_MAXFILESIZE = 0x72,CURLOPT_INFILESIZE_LARGE = 0x75A3,CURLOPT_RESUME_FROM_LARGE = 0x75A4,CURLOPT_MAXFILESIZE_LARGE = 0x75A5,CURLOPT_NETRC_FILE = 0x2786,CURLOPT_USE_SSL = 0x77,CURLOPT_POSTFIELDSIZE_LARGE = 0x75A8,CURLOPT_0x01 = 0x79,CURLOPT_FTPSSLAUTH = 0x81,CURLOPT_IOCTLFUNCTION = 0x4EA2,CURLOPT_IOCTLDATA = 0x2793,CURLOPT_FTP_ACCOUNT = 0x2796,CURLOPT_COOKIELIST = 0x2797,CURLOPT_IGNORE_CONTENT_LENGTH = 0x88,CURLOPT_FTP_SKIP_PASV_IP = 0x89,CURLOPT_FTP_FILEMETHOD = 0x8A,CURLOPT_LOCALPORT = 0x8B,CURLOPT_LOCALPORTRANGE = 0x8C,CURLOPT_CONNECT_ONLY = 0x8D,CURLOPT_CONV_FROM_NETWORK_FUNCTION = 0x4EAE,CURLOPT_CONV_TO_NETWORK_FUNCTION = 0x4EAF,CURLOPT_CONV_FROM_UTF8_FUNCTION = 0x4EB0,CURLOPT_MAX_SEND_SPEED_LARGE = 0x75C1,CURLOPT_MAX_RECV_SPEED_LARGE = 0x75C2,CURLOPT_FTP_ALTERNATIVE_TO_USER = 0x27A3,CURLOPT_SOCKOPTFUNCTION = 0x4EB4,CURLOPT_SOCKOPTDATA = 0x27A5,CURLOPT_SSL_SESSIONID_CACHE = 0x96,CURLOPT_SSH_AUTH_TYPES = 0x97,CURLOPT_SSH_PUBLIC_KEYFILE = 0x27A8,CURLOPT_SSH_PRIVATE_KEYFILE = 0x27A9,CURLOPT_FTP_SSL_CCC = 0x9A,CURLOPT_TIMEOUT_MS = 0x9B,CURLOPT_CONNECTTIMEOUT_MS = 0x9C,CURLOPT_HTTP_TRANSFER_DECODING = 0x9D,CURLOPT_HTTP_CONTENT_DECODING = 0x9E,CURLOPT_NEW_FILE_PERMS = 0x9F,CURLOPT_NEW_DIRECTORY_PERMS = 0xA0,CURLOPT_POSTREDIR = 0xA1,CURLOPT_SSH_HOST_PUBLIC_KEY_MD5 = 0x27B2,CURLOPT_OPENSOCKETFUNCTION = 0x4EC3,CURLOPT_OPENSOCKETDATA = 0x27B4,CURLOPT_COPYPOSTFIELDS = 0x27B5,CURLOPT_PROXY_TRANSFER_MODE = 0xA6,CURLOPT_SEEKFUNCTION = 0x4EC7,CURLOPT_SEEKDATA = 0x27B8,CURLOPT_CRLFILE = 0x27B9,CURLOPT_ISSUERCERT = 0x27BA,CURLOPT_ADDRESS_SCOPE = 0xAB,CURLOPT_CERTINFO = 0xAC,CURLOPT_USERNAME = 0x27BD,CURLOPT_PASSWORD = 0x27BE,CURLOPT_PROXYUSERNAME = 0x27BF,CURLOPT_PROXYPASSWORD = 0x27C0,CURLOPT_NOPROXY = 0x27C1,CURLOPT_TFTP_BLKSIZE = 0xB2,CURLOPT_SOCKS5_GSSAPI_SERVICE = 0x27C3,CURLOPT_SOCKS5_GSSAPI_NEC = 0xB4,CURLOPT_PROTOCOLS = 0xB5,CURLOPT_REDIR_PROTOCOLS = 0xB6,CURLOPT_SSH_KNOWNHOSTS = 0x27C7,CURLOPT_SSH_KEYFUNCTION = 0x4ED8,CURLOPT_SSH_KEYDATA = 0x27C9,CURLOPT_MAIL_FROM = 0x27CA,CURLOPT_MAIL_RCPT = 0x27CB,CURLOPT_FTP_USE_PRET = 0xBC,CURLOPT_RTSP_REQUEST = 0xBD,CURLOPT_RTSP_SESSION_ID = 0x27CE,CURLOPT_RTSP_STREAM_URI = 0x27CF,CURLOPT_RTSP_TRANSPORT = 0x27D0,CURLOPT_RTSP_CLIENT_CSEQ = 0xC1,CURLOPT_RTSP_SERVER_CSEQ = 0xC2,CURLOPT_INTERLEAVEDATA = 0x27D3,CURLOPT_INTERLEAVEFUNCTION = 0x4EE4,CURLOPT_WILDCARDMATCH = 0xC5,CURLOPT_CHUNK_BGN_FUNCTION = 0x4EE6,CURLOPT_CHUNK_END_FUNCTION = 0x4EE7,CURLOPT_FNMATCH_FUNCTION = 0x4EE8,CURLOPT_CHUNK_DATA = 0x27D9,CURLOPT_FNMATCH_DATA = 0x27DA,CURLOPT_RESOLVE = 0x27DB,CURLOPT_TLSAUTH_USERNAME = 0x27DC,CURLOPT_TLSAUTH_PASSWORD = 0x27DD,CURLOPT_TLSAUTH_TYPE = 0x27DE,CURLOPT_LASTENTRY = 0x27DF,};
enum $2EA0513515F7563CFBB6420CCE575C9E {dot3ChipSetAMD7990 = 0x1,dot3ChipSetAMD79900 = 0x2,dot3ChipSetAMD79C940 = 0x3,};
enum $2F04DECAC9E27824D85E198F1C682F07 {XML_SCHEMA_CONTENT_UNKNOWN = 0x0,XML_SCHEMA_CONTENT_EMPTY = 0x1,XML_SCHEMA_CONTENT_ELEMENTS = 0x2,XML_SCHEMA_CONTENT_MIXED = 0x3,XML_SCHEMA_CONTENT_SIMPLE = 0x4,XML_SCHEMA_CONTENT_MIXED_OR_ELEMENTS = 0x5,XML_SCHEMA_CONTENT_BASIC = 0x6,XML_SCHEMA_CONTENT_ANY = 0x7,};
struct $2FBFFD789A2C809930720784B8820AE2 {mach_msg_header_t Head;NDR_record_t NDR;vm_address_t address;vm_size_t size;vm_machine_attribute_t attribute;vm_machine_attribute_val_t value;};
enum $2FDA988FD3B15DF6C5C6EE839763B6D4 {TidyTag_UNKNOWN = 0x0,TidyTag_A = 0x1,TidyTag_ABBR = 0x2,TidyTag_ACRONYM = 0x3,TidyTag_ADDRESS = 0x4,TidyTag_ALIGN = 0x5,TidyTag_APPLET = 0x6,TidyTag_AREA = 0x7,TidyTag_B = 0x8,TidyTag_BASE = 0x9,TidyTag_BASEFONT = 0xA,TidyTag_BDO = 0xB,TidyTag_BGSOUND = 0xC,TidyTag_BIG = 0xD,TidyTag_BLINK = 0xE,TidyTag_BLOCKQUOTE = 0xF,TidyTag_BODY = 0x10,TidyTag_BR = 0x11,TidyTag_BUTTON = 0x12,TidyTag_CAPTION = 0x13,TidyTag_CENTER = 0x14,TidyTag_CITE = 0x15,TidyTag_CODE = 0x16,TidyTag_COL = 0x17,TidyTag_COLGROUP = 0x18,TidyTag_COMMENT = 0x19,TidyTag_DD = 0x1A,TidyTag_DEL = 0x1B,TidyTag_DFN = 0x1C,TidyTag_DIR = 0x1D,TidyTag_DIV = 0x1E,TidyTag_DL = 0x1F,TidyTag_DT = 0x20,TidyTag_EM = 0x21,TidyTag_EMBED = 0x22,TidyTag_FIELDSET = 0x23,TidyTag_FONT = 0x24,TidyTag_FORM = 0x25,TidyTag_FRAME = 0x26,TidyTag_FRAMESET = 0x27,TidyTag_H1 = 0x28,TidyTag_H2 = 0x29,TidyTag_H3 = 0x2A,TidyTag_H4 = 0x2B,TidyTag_H5 = 0x2C,TidyTag_H6 = 0x2D,TidyTag_HEAD = 0x2E,TidyTag_HR = 0x2F,TidyTag_HTML = 0x30,TidyTag_I = 0x31,TidyTag_IFRAME = 0x32,TidyTag_ILAYER = 0x33,TidyTag_IMG = 0x34,TidyTag_INPUT = 0x35,TidyTag_INS = 0x36,TidyTag_ISINDEX = 0x37,TidyTag_KBD = 0x38,TidyTag_KEYGEN = 0x39,TidyTag_LABEL = 0x3A,TidyTag_LAYER = 0x3B,TidyTag_LEGEND = 0x3C,TidyTag_LI = 0x3D,TidyTag_LINK = 0x3E,TidyTag_LISTING = 0x3F,TidyTag_MAP = 0x40,TidyTag_MARQUEE = 0x41,TidyTag_MENU = 0x42,TidyTag_META = 0x43,TidyTag_MULTICOL = 0x44,TidyTag_NOBR = 0x45,TidyTag_NOEMBED = 0x46,TidyTag_NOFRAMES = 0x47,TidyTag_NOLAYER = 0x48,TidyTag_NOSAVE = 0x49,TidyTag_NOSCRIPT = 0x4A,TidyTag_OBJECT = 0x4B,TidyTag_OL = 0x4C,TidyTag_OPTGROUP = 0x4D,TidyTag_OPTION = 0x4E,TidyTag_P = 0x4F,TidyTag_PARAM = 0x50,TidyTag_PLAINTEXT = 0x51,TidyTag_PRE = 0x52,TidyTag_Q = 0x53,TidyTag_RB = 0x54,TidyTag_RBC = 0x55,TidyTag_RP = 0x56,TidyTag_RT = 0x57,TidyTag_RTC = 0x58,TidyTag_RUBY = 0x59,TidyTag_S = 0x5A,TidyTag_SAMP = 0x5B,TidyTag_SCRIPT = 0x5C,TidyTag_SELECT = 0x5D,TidyTag_SERVER = 0x5E,TidyTag_SERVLET = 0x5F,TidyTag_SMALL = 0x60,TidyTag_SPACER = 0x61,TidyTag_SPAN = 0x62,TidyTag_STRIKE = 0x63,TidyTag_STRONG = 0x64,TidyTag_STYLE = 0x65,TidyTag_SUB = 0x66,TidyTag_SUP = 0x67,TidyTag_TABLE = 0x68,TidyTag_TBODY = 0x69,TidyTag_TD = 0x6A,TidyTag_TEXTAREA = 0x6B,TidyTag_TFOOT = 0x6C,TidyTag_TH = 0x6D,TidyTag_THEAD = 0x6E,TidyTag_TITLE = 0x6F,TidyTag_TR = 0x70,TidyTag_TT = 0x71,TidyTag_U = 0x72,TidyTag_UL = 0x73,TidyTag_VAR = 0x74,TidyTag_WBR = 0x75,TidyTag_XMP = 0x76,TidyTag_NEXTID = 0x77,N_TIDY_TAGS = 0x78,};
struct $3010519FC8E063AC13B61458A4695107 {netaddr_t np_receiver;netaddr_t np_owner;np_uid_t np_puid;np_uid_t np_sid;};
struct $30B637321B49B494EE6ED11BDEC8DE9E {ASN1_INTEGER *version;PKCS12_MAC_DATA *mac;PKCS7 *authsafes;};
struct $3199818696990377AE21FB32F85B31D8 {mach_msg_header_t Head;NDR_record_t NDR;mach_port_name_t name;mach_port_name_t pset;};
struct $32D888630742756CD8CEFEDBFEF3759B {u_int32_t ident;u_int16_t filter;u_int16_t flags;u_int32_t fflags;u_int32_t data;};
struct $333F68BA2C53B7EE0F2D13B448D38F51 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t server;};
struct $33415C5C79CC87822109F3703B9299D9 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t thread;mach_msg_port_descriptor_t task;NDR_record_t NDR;exception_type_t exception;mach_msg_type_number_t codeCnt;integer_t code[2];};
enum $3369F195F3872D92A108D01D54B2E7FC {TidyLF = 0x0,TidyCRLF = 0x1,TidyCR = 0x2,};
enum $33C9AC843D06A38A38E08EEC860A8350 {UNW_ESUCCESS = 0x0,UNW_EUNSPEC = 0xFFFFE674,UNW_ENOMEM = 0xFFFFE673,UNW_EBADREG = 0xFFFFE672,UNW_EREADONLYREG = 0xFFFFE671,UNW_ESTOPUNWIND = 0xFFFFE670,UNW_EINVALIDIP = 0xFFFFE66F,UNW_EBADFRAME = 0xFFFFE66E,UNW_EINVAL = 0xFFFFE66D,UNW_EBADVERSION = 0xFFFFE66C,UNW_ENOINFO = 0xFFFFE66B,};
enum $345160C3650206BB2C3C257B2FE36FED {NSObjectFileImageFailure = 0x0,NSObjectFileImageSuccess = 0x1,NSObjectFileImageInappropriateFile = 0x2,NSObjectFileImageArch = 0x3,NSObjectFileImageFormat = 0x4,NSObjectFileImageAccess = 0x5,};
enum $349CDD1D13F7DF0473388D33C8CD4390 {NSUserDomainMask = 0x1,NSLocalDomainMask = 0x2,NSNetworkDomainMask = 0x4,NSSystemDomainMask = 0x8,NSAllDomainsMask = 0xFFFF,};
enum $354399D6CA6DC4E39B1228DCABD316AD {PAM_SM_AUTHENTICATE = 0x0,PAM_SM_SETCRED = 0x1,PAM_SM_ACCT_MGMT = 0x2,PAM_SM_OPEN_SESSION = 0x3,PAM_SM_CLOSE_SESSION = 0x4,PAM_SM_CHAUTHTOK = 0x5,PAM_NUM_PRIMITIVES = 0x6,};
enum $35D4575BDD269CB2C114416BAA7558BD {dot3ChipSetFujitsu86950 = 0x1,};
struct $3641F756729AD97A11A3B78A6DBF7918 {u_int32_t size;u_char version;u_int16_t e_type;u_int16_t e_mod;u_int64_t s;u_int64_t ms;};
enum $36BD9AB06F2ACF31462F8B03D46184A5 : unsigned __int32 {kHFSUnusedNodesFixDate = 0xC5EF2480,};
struct $3881F9B2E64C73F20ED412E5826C4AC3 {u_int32_t auid;u_int32_t euid;u_int32_t egid;u_int32_t ruid;u_int32_t rgid;u_int32_t pid;u_int32_t sid;au_tidaddr64_t tid;};
struct $3997483AC20F7907AE665D7DB5ACE57D {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_msg_type_number_t infoCnt;int info[32];};
enum $3998B369563C3E922C9C4F0BF606DBF3 {OSUnknownByteOrder = 0x0,OSLittleEndian = 0x1,OSBigEndian = 0x2,};
struct $3AD6DCE498BEF9CAF21EEA5EB590F8B6 {mach_msg_header_t Head;NDR_record_t NDR;vm_address_t address;vm_region_flavor_t flavor;mach_msg_type_number_t infoCnt;};
enum $3BD93A796F6658F29C5207FE2468935A {CURLMOPT_SOCKETFUNCTION = 0x4E21,CURLMOPT_SOCKETDATA = 0x2712,CURLMOPT_PIPELINING = 0x3,CURLMOPT_TIMERFUNCTION = 0x4E24,CURLMOPT_TIMERDATA = 0x2715,CURLMOPT_MAXCONNECTS = 0x6,CURLMOPT_LASTENTRY = 0x7,};
enum $3C85D19FBA73C2ACEDF478D656FAB909 {XML_SCHEMA_VAL_VC_I_CREATE = 0x1,};
struct $3D758159ED3B747496F87C93B1DFC5C3 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t pager;NDR_record_t NDR;boolean_t internal;vm_size_t size;vm_prot_t permission;};
struct $3E305BF0A5D26BA3B5EE405973B9934A {u_int32_t uid;u_int32_t gid;u_int32_t puid;u_int32_t pgid;u_int32_t mode;u_int32_t seq;u_int32_t key;};
struct $3E6B1E6034954B23411B3542CA61CBC7 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t port;};
struct $3E9B5AD32E2A117D2E91D7B75FF67A5D {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t parent_handle;NDR_record_t NDR;memory_object_size_t size;memory_object_offset_t offset;vm_prot_t permission;};
struct $40D648FC67D542FF76846B4380CDA5C4 {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;unsigned int ltotal;vm_size_t space;vm_size_t resident;vm_size_t maxusage;vm_offset_t maxstack;};
struct $4191ABD3C20A2790C5D1CD3296E7F1ED {u_int32_t seqno;};
struct $41C52BC1456A2CEC857D3659807C1386 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t task;NDR_record_t NDR;mach_vm_address_t address;mach_vm_size_t size;vm_prot_t desired_access;};
struct __attribute__((aligned(16))) $41E1A7C74B3260A4835F2B305A4796BB {void *opaque1;__int64 opaque2;};
enum $41E859DAAE26B07B8598FA4D4F1DF50A {res_9_goahead = 0x0,res_9_nextns = 0x1,res_9_modified = 0x2,res_9_done = 0x3,res_9_error = 0x4,};
struct $4203C03DDEA75B12CEED795269F3A503 {mach_msg_header_t Head;NDR_record_t NDR;mach_port_name_t name;mach_msg_type_name_t msgt_name;};
struct $423B7D96C11CB2986382813780F7655D {char *name;uint16_t dnstype;uint16_t dnsclass;};
enum $423F66BA35E8428C801C88EA56951FA7 {XML_RELAXNGP_NONE = 0x0,XML_RELAXNGP_FREE_DOC = 0x1,XML_RELAXNGP_CRNG = 0x2,};
struct $42CAA206A1F917EEF51ECD514D7730BF {unsigned int bsize;unsigned int ffactor;unsigned int nelem;unsigned int cachesize;u_int32_t (__cdecl *hash)(const void *, size_t);int lorder;};
enum $43AF380ED1E5C6639BF29287A0048170 {kHFSFolderRecord = 0x100,kHFSFileRecord = 0x200,kHFSFolderThreadRecord = 0x300,kHFSFileThreadRecord = 0x400,kHFSPlusFolderRecord = 0x1,kHFSPlusFileRecord = 0x2,kHFSPlusFolderThreadRecord = 0x3,kHFSPlusFileThreadRecord = 0x4,};
struct $43EB887A7D5DDC6B5CCC173C2FB6636E {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;vm_address_t address;vm_size_t size;natural_t nesting_depth;mach_msg_type_number_t infoCnt;int info[19];};
enum $44336BB59F93F7B3E282D9E42617278E {HTML_PARSE_RECOVER = 0x1,HTML_PARSE_NOERROR = 0x20,HTML_PARSE_NOWARNING = 0x40,HTML_PARSE_PEDANTIC = 0x80,HTML_PARSE_NOBLANKS = 0x100,HTML_PARSE_NONET = 0x800,HTML_PARSE_COMPACT = 0x10000,};
struct $44347996413661E1D088B7486211F639 {u_char type;u_int32_t id;};
enum $44412BD0CE14AFC237A6D071851322F1 {kHFSPlusAttrInlineData = 0x10,kHFSPlusAttrForkData = 0x20,kHFSPlusAttrExtents = 0x30,};
enum $44CBB36E19F6FD8C2CE34633667F03E9 {SASL_INFO_LIST_START = 0x0,SASL_INFO_LIST_MECH = 0x1,SASL_INFO_LIST_END = 0x2,};
struct $456B529FC136F2DC55D26FBF7B75F342 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t data;NDR_record_t NDR;vm_address_t address;mach_msg_type_number_t dataCnt;};
struct $457976D3B172FC6C2C90056836B3956E {dk_format_capacity_t *capacities;uint32_t capacitiesCount;uint8_t reserved0096[4];};
enum $46343603E7EF6B9CA2DB5251398A8141 {CURLVERSION_FIRST = 0x0,CURLVERSION_SECOND = 0x1,CURLVERSION_THIRD = 0x2,CURLVERSION_FOURTH = 0x3,CURLVERSION_LAST = 0x4,};
struct $466E19AC50622C269D9BCEE6753F9E61 {mach_msg_header_t header;mach_msg_body_t body;};
struct $46F98A3CF815908FB81E03FBB188BF3A {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_msg_type_number_t port_info_outCnt;integer_t port_info_out[10];};
struct $478A0C5B06F3F085EB929445D74AA112 {mach_msg_header_t Head;NDR_record_t NDR;task_policy_flavor_t flavor;mach_msg_type_number_t policy_infoCnt;integer_t policy_info[16];};
struct $479E1DE8ADCB55C92744EDE61D84AC3C {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_port_type_t ptype;};
struct $47B1E0FCCF87277E593C854FB80D0521 {mach_msg_header_t Head;NDR_record_t NDR;int max_priority;boolean_t change_threads;};
struct $48128538EAAA3D95320DEC45BE60FE04 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t clock_ctrl;};
enum $488028D4BD0C051E692AC01785C90027 {SOCKINFO_GENERIC = 0x0,SOCKINFO_IN = 0x1,SOCKINFO_TCP = 0x2,SOCKINFO_UN = 0x3,SOCKINFO_NDRV = 0x4,SOCKINFO_KERN_EVENT = 0x5,SOCKINFO_KERN_CTL = 0x6,};
struct $488333C1932ECE7496D2930CA2056B6D {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t assigned_set;};
struct $492B927987B38FBFCA824A1252671E25 {mach_msg_header_t Head;NDR_record_t NDR;mach_vm_address_t address;mach_vm_size_t size;boolean_t set_maximum;vm_prot_t new_protection;};
struct $49303478B7A3DE4A3AC5102047AEEEA3 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t set;};
union $4932DC24BA09BB104202CABB17FCEE34 {struct $4932DC24BA09BB104202CABB17FCEE34::$557C3AE17C0268223A4DBA0527C77C11 ia_bytes;netaddr_t ia_netaddr;};
struct $4932DC24BA09BB104202CABB17FCEE34::$557C3AE17C0268223A4DBA0527C77C11 {unsigned __int8 ia_net_owner;unsigned __int8 ia_net_node_type;unsigned __int8 ia_host_high;unsigned __int8 ia_host_low;};
struct $4B8804F6523751A831C00C572669AA3C {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t child_act;};
struct $4BA0F1DBE33A7FC0F8851313161BDC9C {mach_msg_header_t Head;NDR_record_t NDR;mach_port_name_t old_name;mach_port_name_t new_name;};
enum $4BA6DADA216E0E59C0FFC2E2D871AEA3 {PAM_SUCCESS = 0x0,PAM_OPEN_ERR = 0x1,PAM_SYMBOL_ERR = 0x2,PAM_SERVICE_ERR = 0x3,PAM_SYSTEM_ERR = 0x4,PAM_BUF_ERR = 0x5,PAM_CONV_ERR = 0x6,PAM_PERM_DENIED = 0x7,PAM_MAXTRIES = 0x8,PAM_AUTH_ERR = 0x9,PAM_NEW_AUTHTOK_REQD = 0xA,PAM_CRED_INSUFFICIENT = 0xB,PAM_AUTHINFO_UNAVAIL = 0xC,PAM_USER_UNKNOWN = 0xD,PAM_CRED_UNAVAIL = 0xE,PAM_CRED_EXPIRED = 0xF,PAM_CRED_ERR = 0x10,PAM_ACCT_EXPIRED = 0x11,PAM_AUTHTOK_EXPIRED = 0x12,PAM_SESSION_ERR = 0x13,PAM_AUTHTOK_ERR = 0x14,PAM_AUTHTOK_RECOVERY_ERR = 0x15,PAM_AUTHTOK_LOCK_BUSY = 0x16,PAM_AUTHTOK_DISABLE_AGING = 0x17,PAM_NO_MODULE_DATA = 0x18,PAM_IGNORE = 0x19,PAM_ABORT = 0x1A,PAM_TRY_AGAIN = 0x1B,PAM_MODULE_UNKNOWN = 0x1C,PAM_DOMAIN_UNKNOWN = 0x1D,PAM_NUM_ERRORS = 0x1E,};
enum $4C21AF12A3CB4BE1E82FF113A63D6EE5 {XML_TEXTREADER_MODE_INITIAL = 0x0,XML_TEXTREADER_MODE_INTERACTIVE = 0x1,XML_TEXTREADER_MODE_ERROR = 0x2,XML_TEXTREADER_MODE_EOF = 0x3,XML_TEXTREADER_MODE_CLOSED = 0x4,XML_TEXTREADER_MODE_READING = 0x5,};
struct $4C821A4EFE1115B5FC2C4B7C575B022E {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t alarm_code;alarm_type_t alarm_type;mach_timespec_t alarm_time;};
struct $4D17AC1D92846D89C56307C20B09863A {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t set_name;};
struct $4E3803487B5F2E6858C157D0AC2FC93A {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_vm_address_t address;mach_vm_size_t size;natural_t nesting_depth;mach_msg_type_number_t infoCnt;int info[19];};
enum $4E7DAA04C1544F5CC93F7C5C5ABE1E5E {XML_RELAXNG_OK = 0x0,XML_RELAXNG_ERR_MEMORY = 0x1,XML_RELAXNG_ERR_TYPE = 0x2,XML_RELAXNG_ERR_TYPEVAL = 0x3,XML_RELAXNG_ERR_DUPID = 0x4,XML_RELAXNG_ERR_TYPECMP = 0x5,XML_RELAXNG_ERR_NOSTATE = 0x6,XML_RELAXNG_ERR_NODEFINE = 0x7,XML_RELAXNG_ERR_LISTEXTRA = 0x8,XML_RELAXNG_ERR_LISTEMPTY = 0x9,XML_RELAXNG_ERR_INTERNODATA = 0xA,XML_RELAXNG_ERR_INTERSEQ = 0xB,XML_RELAXNG_ERR_INTEREXTRA = 0xC,XML_RELAXNG_ERR_ELEMNAME = 0xD,XML_RELAXNG_ERR_ATTRNAME = 0xE,XML_RELAXNG_ERR_ELEMNONS = 0xF,XML_RELAXNG_ERR_ATTRNONS = 0x10,XML_RELAXNG_ERR_ELEMWRONGNS = 0x11,XML_RELAXNG_ERR_ATTRWRONGNS = 0x12,XML_RELAXNG_ERR_ELEMEXTRANS = 0x13,XML_RELAXNG_ERR_ATTREXTRANS = 0x14,XML_RELAXNG_ERR_ELEMNOTEMPTY = 0x15,XML_RELAXNG_ERR_NOELEM = 0x16,XML_RELAXNG_ERR_NOTELEM = 0x17,XML_RELAXNG_ERR_ATTRVALID = 0x18,XML_RELAXNG_ERR_CONTENTVALID = 0x19,XML_RELAXNG_ERR_EXTRACONTENT = 0x1A,XML_RELAXNG_ERR_INVALIDATTR = 0x1B,XML_RELAXNG_ERR_DATAELEM = 0x1C,XML_RELAXNG_ERR_VALELEM = 0x1D,XML_RELAXNG_ERR_LISTELEM = 0x1E,XML_RELAXNG_ERR_DATATYPE = 0x1F,XML_RELAXNG_ERR_VALUE = 0x20,XML_RELAXNG_ERR_LIST = 0x21,XML_RELAXNG_ERR_NOGRAMMAR = 0x22,XML_RELAXNG_ERR_EXTRADATA = 0x23,XML_RELAXNG_ERR_LACKDATA = 0x24,XML_RELAXNG_ERR_INTERNAL = 0x25,XML_RELAXNG_ERR_ELEMWRONG = 0x26,XML_RELAXNG_ERR_TEXTWRONG = 0x27,};
enum $4FD0ECE3FAAB0A3A3855B925214176D1 {XLINK_TYPE_NONE = 0x0,XLINK_TYPE_SIMPLE = 0x1,XLINK_TYPE_EXTENDED = 0x2,XLINK_TYPE_EXTENDED_SET = 0x3,};
struct $50450166C1D5B7E6B5FADC2BC93CD3BD {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_port_name_t name;};
struct $5243BF46A737224FC5E0495E8389B9A4 {mach_msg_header_t Head;NDR_record_t NDR;mach_port_right_t right;mach_port_qos_t qos;};
struct $524B7AA813964FB1B08025913F65D34C {char __opaque[68];};
enum $52D6426493297E9F8FA1631B28D1D7F5 {PAM_LOG_DEBUG = 0x0,PAM_LOG_VERBOSE = 0x1,PAM_LOG_NOTICE = 0x2,PAM_LOG_ERROR = 0x3,};
struct $531BFEDFFBC90F9591113261F4F98EF9 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t proto;NDR_record_t NDR;mach_port_right_t right;mach_port_qos_t qos;mach_port_name_t name;};
enum $539980D7AFB74DD78553342EB4BF9B66 {XML_SCHEMA_TYPE_BASIC = 0x1,XML_SCHEMA_TYPE_ANY = 0x2,XML_SCHEMA_TYPE_FACET = 0x3,XML_SCHEMA_TYPE_SIMPLE = 0x4,XML_SCHEMA_TYPE_COMPLEX = 0x5,XML_SCHEMA_TYPE_SEQUENCE = 0x6,XML_SCHEMA_TYPE_CHOICE = 0x7,XML_SCHEMA_TYPE_ALL = 0x8,XML_SCHEMA_TYPE_SIMPLE_CONTENT = 0x9,XML_SCHEMA_TYPE_COMPLEX_CONTENT = 0xA,XML_SCHEMA_TYPE_UR = 0xB,XML_SCHEMA_TYPE_RESTRICTION = 0xC,XML_SCHEMA_TYPE_EXTENSION = 0xD,XML_SCHEMA_TYPE_ELEMENT = 0xE,XML_SCHEMA_TYPE_ATTRIBUTE = 0xF,XML_SCHEMA_TYPE_ATTRIBUTEGROUP = 0x10,XML_SCHEMA_TYPE_GROUP = 0x11,XML_SCHEMA_TYPE_NOTATION = 0x12,XML_SCHEMA_TYPE_LIST = 0x13,XML_SCHEMA_TYPE_UNION = 0x14,XML_SCHEMA_TYPE_ANY_ATTRIBUTE = 0x15,XML_SCHEMA_TYPE_IDC_UNIQUE = 0x16,XML_SCHEMA_TYPE_IDC_KEY = 0x17,XML_SCHEMA_TYPE_IDC_KEYREF = 0x18,XML_SCHEMA_TYPE_PARTICLE = 0x19,XML_SCHEMA_TYPE_ATTRIBUTE_USE = 0x1A,XML_SCHEMA_FACET_MININCLUSIVE = 0x3E8,XML_SCHEMA_FACET_MINEXCLUSIVE = 0x3E9,XML_SCHEMA_FACET_MAXINCLUSIVE = 0x3EA,XML_SCHEMA_FACET_MAXEXCLUSIVE = 0x3EB,XML_SCHEMA_FACET_TOTALDIGITS = 0x3EC,XML_SCHEMA_FACET_FRACTIONDIGITS = 0x3ED,XML_SCHEMA_FACET_PATTERN = 0x3EE,XML_SCHEMA_FACET_ENUMERATION = 0x3EF,XML_SCHEMA_FACET_WHITESPACE = 0x3F0,XML_SCHEMA_FACET_LENGTH = 0x3F1,XML_SCHEMA_FACET_MAXLENGTH = 0x3F2,XML_SCHEMA_FACET_MINLENGTH = 0x3F3,XML_SCHEMA_EXTRA_QNAMEREF = 0x7D0,XML_SCHEMA_EXTRA_ATTR_USE_PROHIB = 0x7D1,};
struct $53A0FD50A74451071D4AFBA65ADAEB7D {uint16_t preference;char *name;};
struct $54BD5584F5ADC0EEBB5CC3B97CC9ABCA {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t members;NDR_record_t NDR;mach_msg_type_number_t membersCnt;};
struct $54E3C4845DCBBBAE0B28E8CAF275DF3F {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct $5567FEF96CECDEB28576E12650BB4F71 {mach_msg_header_t Head;NDR_record_t NDR;int flavor;mach_msg_type_number_t info_outCnt;};
enum $55AEE0FA07D064890E756D545251771C {CURL_FORMADD_OK = 0x0,CURL_FORMADD_MEMORY = 0x1,CURL_FORMADD_OPTION_TWICE = 0x2,CURL_FORMADD_NULL = 0x3,CURL_FORMADD_UNKNOWN_OPTION = 0x4,CURL_FORMADD_INCOMPLETE = 0x5,CURL_FORMADD_ILLEGAL_ARRAY = 0x6,CURL_FORMADD_DISABLED = 0x7,CURL_FORMADD_LAST = 0x8,};
struct $56709C31788A185985ED8F80CB75C10C {mach_msg_header_t Head;NDR_record_t NDR;processor_flavor_t flavor;};
struct $5694E020026D0F35B79D3FDB301355DE {mach_msg_trailer_type_t msgh_trailer_type;mach_msg_trailer_size_t msgh_trailer_size;mach_port_seqno_t msgh_seqno;security_token_t msgh_sender;};
enum $56960417386CC1564F639639D8B0AEF8 {NSOtherErrorRelocation = 0x0,NSOtherErrorLazyBind = 0x1,NSOtherErrorIndrLoop = 0x2,NSOtherErrorLazyInit = 0x3,NSOtherErrorInvalidArgs = 0x4,};
enum $56CFACB0BE9E4BA6F465B343389C1FC1 {CURLIOCMD_NOP = 0x0,CURLIOCMD_RESTARTREAD = 0x1,CURLIOCMD_LAST = 0x2,};
struct $575360315CF0A1A248958A58C9E14896 {ASN1_OBJECT *type;union $575360315CF0A1A248958A58C9E14896::$F155898B76A3E20E5DB971F93B5B2ECD value;STACK *attrib;};
union $575360315CF0A1A248958A58C9E14896::$F155898B76A3E20E5DB971F93B5B2ECD {struct pkcs12_bag_st *bag;struct pkcs8_priv_key_info_st *keybag;X509_SIG *shkeybag;STACK *safes;ASN1_TYPE *other;};
struct $575BADC95B9991A2B9CD2F3725868B8D {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t default_set;};
struct $587EA17CD82C334AC5A48AFEDB918C96 {mach_msg_header_t Head;NDR_record_t NDR;clock_id_t clock_id;};
struct $59AA03472FCFCA397F68DC3419B6E0CE {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t clock_serv;};
struct $59F23475065BD2E9F3FA293A04BFFD37 {mach_msg_header_t Head;NDR_record_t NDR;int which_port;};
struct $5A0A32527D91D719A95F587BC624F670 {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;natural_t object_type;mach_vm_address_t object_addr;};
struct $5A17788FF526DC41EE65ED362A8F9A06 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t control_port;};
struct $5A8FECC4C2877C4C87F3C51F77AE50CF {unsigned __int64 flags;unsigned int cachesize;unsigned int psize;int lorder;size_t reclen;unsigned __int8 bval;char *bfname;};
enum $5AD11541F8B775E98080565D845776A5 {CURL_SSLVERSION_DEFAULT = 0x0,CURL_SSLVERSION_TLSv1 = 0x1,CURL_SSLVERSION_SSLv2 = 0x2,CURL_SSLVERSION_SSLv3 = 0x3,CURL_SSLVERSION_LAST = 0x4,};
struct $5B2C4A92108463040FBECE1079B5BB63 {char *next_in;unsigned int avail_in;unsigned int total_in_lo32;unsigned int total_in_hi32;char *next_out;unsigned int avail_out;unsigned int total_out_lo32;unsigned int total_out_hi32;void *state;void *(__cdecl *bzalloc)(void *, int, int);void (__cdecl *bzfree)(void *, void *);void *opaque;};
enum $5BB59419A030D6A179F24FB1144C5140 {CURLFTPMETHOD_DEFAULT = 0x0,CURLFTPMETHOD_MULTICWD = 0x1,CURLFTPMETHOD_NOCWD = 0x2,CURLFTPMETHOD_SINGLECWD = 0x3,CURLFTPMETHOD_LAST = 0x4,};
enum $5BB96409C7C381A52DD11FDA0AE1E04F {CURLINFO_NONE = 0x0,CURLINFO_EFFECTIVE_URL = 0x100001,CURLINFO_RESPONSE_CODE = 0x200002,CURLINFO_TOTAL_TIME = 0x300003,CURLINFO_NAMELOOKUP_TIME = 0x300004,CURLINFO_CONNECT_TIME = 0x300005,CURLINFO_PRETRANSFER_TIME = 0x300006,CURLINFO_SIZE_UPLOAD = 0x300007,CURLINFO_SIZE_DOWNLOAD = 0x300008,CURLINFO_SPEED_DOWNLOAD = 0x300009,CURLINFO_SPEED_UPLOAD = 0x30000A,CURLINFO_HEADER_SIZE = 0x20000B,CURLINFO_REQUEST_SIZE = 0x20000C,CURLINFO_SSL_VERIFYRESULT = 0x20000D,CURLINFO_FILETIME = 0x20000E,CURLINFO_CONTENT_LENGTH_DOWNLOAD = 0x30000F,CURLINFO_CONTENT_LENGTH_UPLOAD = 0x300010,CURLINFO_STARTTRANSFER_TIME = 0x300011,CURLINFO_CONTENT_TYPE = 0x100012,CURLINFO_REDIRECT_TIME = 0x300013,CURLINFO_REDIRECT_COUNT = 0x200014,CURLINFO_PRIVATE = 0x100015,CURLINFO_HTTP_CONNECTCODE = 0x200016,CURLINFO_HTTPAUTH_AVAIL = 0x200017,CURLINFO_PROXYAUTH_AVAIL = 0x200018,CURLINFO_OS_ERRNO = 0x200019,CURLINFO_NUM_CONNECTS = 0x20001A,CURLINFO_SSL_ENGINES = 0x40001B,CURLINFO_COOKIELIST = 0x40001C,CURLINFO_LASTSOCKET = 0x20001D,CURLINFO_FTP_ENTRY_PATH = 0x10001E,CURLINFO_REDIRECT_URL = 0x10001F,CURLINFO_PRIMARY_IP = 0x100020,CURLINFO_APPCONNECT_TIME = 0x300021,CURLINFO_CERTINFO = 0x400022,CURLINFO_CONDITION_UNMET = 0x200023,CURLINFO_RTSP_SESSION_ID = 0x100024,CURLINFO_RTSP_CLIENT_CSEQ = 0x200025,CURLINFO_RTSP_SERVER_CSEQ = 0x200026,CURLINFO_RTSP_CSEQ_RECV = 0x200027,CURLINFO_PRIMARY_PORT = 0x200028,CURLINFO_LOCAL_IP = 0x100029,CURLINFO_LOCAL_PORT = 0x20002A,CURLINFO_LASTONE = 0x2A,};
enum $5BC5AC313FBD748556525804BA480EF5 {CURLFTPSSL_CCC_NONE = 0x0,CURLFTPSSL_CCC_PASSIVE = 0x1,CURLFTPSSL_CCC_ACTIVE = 0x2,CURLFTPSSL_CCC_LAST = 0x3,};
struct $5CF04B6421DF2D20D24DDD28F16D3C2A {const char *name;void *address;};
struct $5D67E6FC771F02F85169EAAED44CFB39 {uint16_t preference;char *intermediate;};
struct $5DB7049864680961BDFB9965C0ABC030 {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;integer_t disposition;integer_t ref_count;};
struct $5E04D424E81EA6874558831D2FFF2B4D {mach_msg_header_t Head;NDR_record_t NDR;int lock_id;};
struct $5E073AC1240433595621B506EB1DA983 {mach_msg_header_t Head;NDR_record_t NDR;int n_ulocks;int policy;};
struct $5EDD4B4F882E321F07D8AFF023DDDD7D {u_int keydat_len;char *keydat_val;};
struct $5EE71EC2B6ECEB33372096427B2859E8 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t thread;NDR_record_t NDR;boolean_t wired;};
struct $5F22111B9AD44DFDC2D7C3E3FA7C1FF6 {char *psdn_address;};
struct $5FB9FDFEF5B2E814098E656C85B458E3 {int __dd_fd;__int64 __dd_loc;__int64 __dd_size;char *__dd_buf;int __dd_len;__int64 __dd_seek;__int64 __dd_rewind;int __dd_flags;__darwin_pthread_mutex_t __dd_lock;struct _telldir *__dd_td;};
enum $5FCD074AE9B9B407C11FF612FA90423F {BLOCK_DEALLOCATING = 0x1,BLOCK_REFCOUNT_MASK = 0xFFFE,BLOCK_NEEDS_FREE = 0x1000000,BLOCK_HAS_COPY_DISPOSE = 0x2000000,BLOCK_HAS_CTOR = 0x4000000,BLOCK_IS_GC = 0x8000000,BLOCK_IS_GLOBAL = 0x10000000,BLOCK_USE_STRET = 0x20000000,BLOCK_HAS_SIGNATURE = 0x40000000,BLOCK_HAS_EXTENDED_LAYOUT = 0x80000000,};
struct $615D5DC9703294F0ED919D7F4D86FFE9 {int datagram_pkts_sent;int datagram_pkts_rcvd;int srr_requests_sent;int srr_bcasts_sent;int srr_requests_rcvd;int srr_bcasts_rcvd;int srr_replies_sent;int srr_replies_rcvd;int srr_retries_sent;int srr_retries_rcvd;int srr_cfailures_sent;int srr_cfailures_rcvd;int deltat_dpkts_sent;int deltat_acks_rcvd;int deltat_dpkts_rcvd;int deltat_acks_sent;int deltat_oldpkts_rcvd;int deltat_oospkts_rcvd;int deltat_retries_sent;int deltat_retries_rcvd;int deltat_cfailures_sent;int deltat_cfailures_rcvd;int deltat_aborts_sent;int deltat_aborts_rcvd;int vmtp_requests_sent;int vmtp_requests_rcvd;int vmtp_replies_sent;int vmtp_replies_rcvd;int ipc_in_messages;int ipc_out_messages;int ipc_unblocks_sent;int ipc_unblocks_rcvd;int pc_requests_sent;int pc_requests_rcvd;int pc_replies_rcvd;int pc_startups_rcvd;int nn_requests_sent;int nn_requests_rcvd;int nn_replies_rcvd;int po_ro_hints_sent;int po_ro_hints_rcvd;int po_token_requests_sent;int po_token_requests_rcvd;int po_token_replies_rcvd;int po_xfer_requests_sent;int po_xfer_requests_rcvd;int po_xfer_replies_rcvd;int po_deaths_sent;int po_deaths_rcvd;int ps_requests_sent;int ps_requests_rcvd;int ps_replies_rcvd;int ps_auth_requests_sent;int ps_auth_requests_rcvd;int ps_auth_replies_rcvd;int mallocs_or_vm_allocates;int mem_allocs;int mem_deallocs;int mem_allocobjs;int mem_deallocobjs;int pkts_encrypted;int pkts_decrypted;int vmtp_segs_encrypted;int vmtp_segs_decrypted;int tcp_requests_sent;int tcp_replies_sent;int tcp_requests_rcvd;int tcp_replies_rcvd;int tcp_send;int tcp_recv;int tcp_connect;int tcp_accept;int tcp_close;};
struct $618A16F1A9CB4DE56CB312A402246FE1 {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_vm_address_t context;};
enum $61FDFA1F505666F1AE44654F634BAE72 {kDNSServiceClass_IN = 0x1,};
struct $62C3C6215D74515CD10ADACC096E4B0E {unsigned __int8 vers;unsigned __int8 type;unsigned __int8 answer;unsigned __int8 pad;unsigned int id_num;struct osockaddr addr;struct osockaddr ctl_addr;int pid;char l_name[12];char r_name[12];char r_tty[16];};
struct $64173B50D5C298666AA1E07EB308B730 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_ports_descriptor_t init_port_set;NDR_record_t NDR;mach_msg_type_number_t init_port_setCnt;};
struct $6473C35DBCE3A3EC7FFE17F82535E510 {u_char howtopr;u_char bu;u_char uc;u_char *data;};
struct $648B167E5FE8430EFE8E72D1CD79C82D {__int16 pmin;__int16 pmax;__int16 smin;__int16 smax;};
enum $65EE5B278A6A516D307828565C93733B {no = 0x0,yes = 0x1,};
struct $6671520B86EDC1548DF0B281DB354573 {uint32_t address;mach_msg_size_t count;unsigned __int32 deallocate : 8;unsigned __int32 copy : 8;unsigned __int32 disposition : 8;unsigned __int32 type : 8;};
struct $669EF43B8E86E5E1B2D5831F1B9785B9 {mach_msg_header_t Head;NDR_record_t NDR;int options;};
struct $671C5A9886DEC29C4FEC63DF421615C6 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t new_set;NDR_record_t NDR;boolean_t assign_threads;};
struct $6825248A56C99A2E2B32FCEC421A9DAF {int xp_sock;unsigned __int16 xp_port;struct $6825248A56C99A2E2B32FCEC421A9DAF::xp_ops *xp_ops;int xp_addrlen;struct sockaddr_in xp_raddr;struct opaque_auth xp_verf;caddr_t xp_p1;caddr_t xp_p2;};
struct $6825248A56C99A2E2B32FCEC421A9DAF::xp_ops {int (__cdecl *xp_recv)();enum xprt_stat (__cdecl *xp_stat)();int (__cdecl *xp_getargs)();int (__cdecl *xp_reply)();int (__cdecl *xp_freeargs)();void (__cdecl *xp_destroy)();};
enum $696096D9A1236276F280ED3B7625D32B {NFNON = 0x0,NFREG = 0x1,NFDIR = 0x2,NFBLK = 0x3,NFCHR = 0x4,NFLNK = 0x5,NFSOCK = 0x6,NFFIFO = 0x7,NFATTRDIR = 0x8,NFNAMEDATTR = 0x9,};
enum $696BC85C9266121A3094CE9AE91C2C01 {FACTORY_NOERROR = 0x0,FACTORY_EXISTS = 0x1,FACTORY_NOTFOUND = 0x2,FACTORY_NOMEMORY = 0x3,FACTORY_GENERR = 0x4,FACTORY_MAXIMUM_ERROR = 0x5,};
struct $69D31FA9CDD4718FF5B7AF641C4535B7 {mach_msg_header_t Head;NDR_record_t NDR;clock_flavor_t flavor;mach_msg_type_number_t clock_attrCnt;int clock_attr[1];};
struct $6AAD439E9A60B13F59A2B34A0B1B968C {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t alarm_port;NDR_record_t NDR;alarm_type_t alarm_type;mach_timespec_t alarm_time;};
enum $6B111C5B4079F64069FB7C2797D9CE8F {vncontrol_readwrite_io_e = 0x0,};
struct $6B72EC479EB324C93363DBF0210A4E09 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t modules;NDR_record_t NDR;mach_msg_type_number_t modulesCnt;};
enum $6B91EF07066D7C63AE6C8DC2E4246264 {kDNSServiceProtocol_IPv4 = 0x1,kDNSServiceProtocol_IPv6 = 0x2,kDNSServiceProtocol_UDP = 0x10,kDNSServiceProtocol_TCP = 0x20,};
struct $6BC0D17B2B96A5F91967EA8653FF4084 {mach_msg_header_t Head;NDR_record_t NDR;int policy;int value;};
enum $6BF03EB572F80D0BDF28C7CB21479A3D {CURL_TIMECOND_NONE = 0x0,CURL_TIMECOND_IFMODSINCE = 0x1,CURL_TIMECOND_IFUNMODSINCE = 0x2,CURL_TIMECOND_LASTMOD = 0x3,CURL_TIMECOND_LAST = 0x4,};
struct $6C07615512B7E84BDE41117AEF6DE55F {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_ports_descriptor_t task_list;NDR_record_t NDR;mach_msg_type_number_t task_listCnt;};
enum $6C3D1F16C57240F500269E6CB726B57E {XML_FROM_NONE = 0x0,XML_FROM_PARSER = 0x1,XML_FROM_TREE = 0x2,XML_FROM_NAMESPACE = 0x3,XML_FROM_DTD = 0x4,XML_FROM_HTML = 0x5,XML_FROM_MEMORY = 0x6,XML_FROM_OUTPUT = 0x7,XML_FROM_IO = 0x8,XML_FROM_FTP = 0x9,XML_FROM_HTTP = 0xA,XML_FROM_XINCLUDE = 0xB,XML_FROM_XPATH = 0xC,XML_FROM_XPOINTER = 0xD,XML_FROM_REGEXP = 0xE,XML_FROM_DATATYPE = 0xF,XML_FROM_SCHEMASP = 0x10,XML_FROM_SCHEMASV = 0x11,XML_FROM_RELAXNGP = 0x12,XML_FROM_RELAXNGV = 0x13,XML_FROM_CATALOG = 0x14,XML_FROM_C14N = 0x15,XML_FROM_XSLT = 0x16,XML_FROM_VALID = 0x17,XML_FROM_CHECK = 0x18,XML_FROM_WRITER = 0x19,XML_FROM_MODULE = 0x1A,XML_FROM_I18N = 0x1B,XML_FROM_SCHEMATRONV = 0x1C,};
struct $6C5D98EAC624033C396B1DA9760D33A0 {uint64_t offset;uint64_t length;uint8_t reserved0128[16];};
struct $6C8E198051B85F433C7E9E257C72A042 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t objects;NDR_record_t NDR;vm_info_region_t region;mach_msg_type_number_t objectsCnt;};
enum $6D22B6C70995B3A898F6ED894F8956B2 {DNSServiceDiscoverReplyFlagsFinished = 0x0,DNSServiceDiscoverReplyFlagsMoreComing = 0x1,};
struct $6D6FBD65E5352D7C5B2633444A27C2EA {uint64_t blockCount;uint32_t blockSize;uint8_t reserved0096[4];};
enum $6DB4FE1C454B55753CB1CF245ADB8A73 {XLINK_ACTUATE_NONE = 0x0,XLINK_ACTUATE_AUTO = 0x1,XLINK_ACTUATE_ONREQUEST = 0x2,};
struct $6EC1A26EC289C981C6C6C260C40F87D5 {int size;hash_node **buckets;};
struct $6FABFC1284DD1437D43532E08AE85D17 {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_msg_type_number_t boot_infoOffset;mach_msg_type_number_t boot_infoCnt;char boot_info[4096];};
struct $6FAFB5BC2FBC216C364C3DE816E26A29 {mach_msg_header_t Head;NDR_record_t NDR;mach_vm_address_t address;mach_vm_size_t size;mach_vm_address_t data;};
enum $6FDCE26D5FA4D6DB475CE5F65FC8B575 {XPATH_EXPRESSION_OK = 0x0,XPATH_NUMBER_ERROR = 0x1,XPATH_UNFINISHED_LITERAL_ERROR = 0x2,XPATH_START_LITERAL_ERROR = 0x3,XPATH_VARIABLE_REF_ERROR = 0x4,XPATH_UNDEF_VARIABLE_ERROR = 0x5,XPATH_INVALID_PREDICATE_ERROR = 0x6,XPATH_EXPR_ERROR = 0x7,XPATH_UNCLOSED_ERROR = 0x8,XPATH_UNKNOWN_FUNC_ERROR = 0x9,XPATH_INVALID_OPERAND = 0xA,XPATH_INVALID_TYPE = 0xB,XPATH_INVALID_ARITY = 0xC,XPATH_INVALID_CTXT_SIZE = 0xD,XPATH_INVALID_CTXT_POSITION = 0xE,XPATH_MEMORY_ERROR = 0xF,XPTR_SYNTAX_ERROR = 0x10,XPTR_RESOURCE_ERROR = 0x11,XPTR_SUB_RESOURCE_ERROR = 0x12,XPATH_UNDEF_PREFIX_ERROR = 0x13,XPATH_ENCODING_ERROR = 0x14,XPATH_INVALID_CHAR_ERROR = 0x15,XPATH_INVALID_CTXT = 0x16,};
struct $704B6F3E1CAEFA74D31888B2D78F9F88 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t semaphore;};
struct $7076454C220BCB0A4BC98C4D7957D8C3 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t names;mach_msg_ool_descriptor_t types;NDR_record_t NDR;mach_msg_type_number_t namesCnt;mach_msg_type_number_t typesCnt;};
union $70B7A71D304E70E945AE4E370F85FC88 {u_long ul;u_int ui;u_short us;u_char uc;__int64 sl;int si;__int16 ss;char sc;char *cp;void *vp;};
struct $71210C31999B47ECFCA79A4496892A9D {mach_msg_bits_t msgh_bits;mach_msg_size_t msgh_size;mach_port_t msgh_remote_port;mach_port_t msgh_local_port;mach_msg_size_t msgh_reserved;mach_msg_id_t msgh_id;};
struct $71B18ED6CCE7F8693D0AE793EAB8102E {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t new_port;NDR_record_t NDR;exception_mask_t exception_mask;exception_behavior_t behavior;thread_state_flavor_t new_flavor;};
enum $72C7479B17D42DC9DFBAFDAD1641A379 {XML_MODULE_LAZY = 0x1,XML_MODULE_LOCAL = 0x2,};
struct $72CFD36915A4C95088F1A8826EB17983 {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_msg_type_number_t task_info_outCnt;integer_t task_info_out[32];};
struct $732EA1FD564A0C308BCD0B773E129823 {u_int16_t family;char path[104];};
struct $73352B6DCC801F1A038056696B3E491C {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t old_handlers[32];NDR_record_t NDR;mach_msg_type_number_t masksCnt;exception_mask_t masks[32];exception_behavior_t old_behaviors[32];thread_state_flavor_t old_flavors[32];};
struct $73773A746C574143C0D7803E150049F9 {u_int32_t auid;u_int32_t euid;u_int32_t egid;u_int32_t ruid;u_int32_t rgid;u_int32_t pid;u_int32_t sid;au_tidaddr32_t tid;};
struct $739921EDD5E6EE8AE9C50191702F2D06 {u_int16_t domain;u_int16_t type;u_int16_t atype;u_int16_t l_port;u_int32_t l_addr[4];u_int32_t r_port;u_int32_t r_addr[4];};
struct $73C487D09BD8877E84E65868850A4480 {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;ledger_item_t balance;ledger_item_t limit;};
struct $740196A4AE4F0F1C0D656C4EF0AFE809 {mach_msg_header_t Head;NDR_record_t NDR;thread_state_flavor_t flavor;mach_msg_type_number_t old_stateCnt;};
struct $74034741CFA65827A1EC04C7057A4BA2 {dk_extent_t *extents;uint32_t extentsCount;uint8_t reserved0096[4];};
enum $743EA981694C8951C7F0FF81288A5AAC {XML_WITH_THREAD = 0x1,XML_WITH_TREE = 0x2,XML_WITH_OUTPUT = 0x3,XML_WITH_PUSH = 0x4,XML_WITH_READER = 0x5,XML_WITH_PATTERN = 0x6,XML_WITH_WRITER = 0x7,XML_WITH_SAX1 = 0x8,XML_WITH_FTP = 0x9,XML_WITH_HTTP = 0xA,XML_WITH_VALID = 0xB,XML_WITH_HTML = 0xC,XML_WITH_LEGACY = 0xD,XML_WITH_C14N = 0xE,XML_WITH_CATALOG = 0xF,XML_WITH_XPATH = 0x10,XML_WITH_XPTR = 0x11,XML_WITH_XINCLUDE = 0x12,XML_WITH_ICONV = 0x13,XML_WITH_ISO8859X = 0x14,XML_WITH_UNICODE = 0x15,XML_WITH_REGEXP = 0x16,XML_WITH_AUTOMATA = 0x17,XML_WITH_EXPR = 0x18,XML_WITH_SCHEMAS = 0x19,XML_WITH_SCHEMATRON = 0x1A,XML_WITH_MODULES = 0x1B,XML_WITH_DEBUG = 0x1C,XML_WITH_DEBUG_MEM = 0x1D,XML_WITH_DEBUG_RUN = 0x1E,XML_WITH_ZLIB = 0x1F,XML_WITH_ICU = 0x20,XML_WITH_NONE = 0x1869F,};
struct $74E88319F6971EE204DBFD9B57B269F8 {mach_msg_header_t Head;NDR_record_t NDR;mach_vm_address_t address;mach_vm_size_t size;vm_machine_attribute_t attribute;vm_machine_attribute_val_t value;};
struct $75304CCD3C967214A8BD283A9F6A93D0 {mach_msg_header_t Head;NDR_record_t NDR;host_flavor_t flavor;mach_msg_type_number_t host_info_outCnt;};
struct $7568DFD570526C5C2FE600A63FF7542E {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t contorl_port;};
struct $75CD40B42DA3FE652B2050998764C1EA {mach_msg_header_t Head;NDR_record_t NDR;vm_address_t address;vm_size_t size;};
struct $77044CD3286DFFD089401BC1A550C0B3 {mach_msg_header_t Head;NDR_record_t NDR;mach_port_name_t name;mach_port_right_t right;mach_port_delta_t delta;};
struct $776B37716F2A203FA8D593ECE8B979C2 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_ports_descriptor_t thread_list;NDR_record_t NDR;mach_msg_type_number_t thread_listCnt;};
struct $778EB01A7E54F11D251DAE9DCCA40C02 {mach_msg_header_t Head;NDR_record_t NDR;boolean_t must_wire;};
enum $77C1F6ECCA22552EA6FDBBFC93F817BE {kHFSRootParentID = 0x1,kHFSRootFolderID = 0x2,kHFSExtentsFileID = 0x3,kHFSCatalogFileID = 0x4,kHFSBadBlockFileID = 0x5,kHFSAllocationFileID = 0x6,kHFSStartupFileID = 0x7,kHFSAttributesFileID = 0x8,kHFSAttributeDataFileID = 0xD,kHFSRepairCatalogFileID = 0xE,kHFSBogusExtentFileID = 0xF,kHFSFirstUserCatalogNodeID = 0x10,};
enum $77D6BC159AA5DA7BD67BECF2A12D0ED9 {XML_DOC_WELLFORMED = 0x1,XML_DOC_NSVALID = 0x2,XML_DOC_OLD10 = 0x4,XML_DOC_DTDVALID = 0x8,XML_DOC_XINCLUDE = 0x10,XML_DOC_USERBUILT = 0x20,XML_DOC_INTERNAL = 0x40,XML_DOC_HTML = 0x80,};
struct $78A516661F8337ED491DEA9E817B9015 {X509_SIG *dinfo;ASN1_OCTET_STRING *salt;ASN1_INTEGER *iter;};
struct $7AB3BC546F9F35ECC7BE0179CB611F91 {const char *name;cpu_type_t cputype;cpu_subtype_t cpusubtype;enum NXByteOrder byteorder;const char *description;};
enum $7AE70D482D57B64FB9C9B10583B098AB {CURLCLOSEPOLICY_NONE = 0x0,CURLCLOSEPOLICY_OLDEST = 0x1,CURLCLOSEPOLICY_LEAST_RECENTLY_USED = 0x2,CURLCLOSEPOLICY_LEAST_TRAFFIC = 0x3,CURLCLOSEPOLICY_SLOWEST = 0x4,CURLCLOSEPOLICY_CALLBACK = 0x5,CURLCLOSEPOLICY_LAST = 0x6,};
enum $7B6D6F191C45FE8067F0BF66D1F2D24A {TidyNoState = 0x0,TidyYesState = 0x1,TidyAutoState = 0x2,};
struct $7B9D4C5204CA928D4D62EAAC4140ED21 {mach_msg_header_t Head;NDR_record_t NDR;host_flavor_t flavor;mach_msg_type_number_t host_info64_outCnt;};
enum $7BC844CA13F55C9D2AEAF3513FB7769B {TidyAttr_UNKNOWN = 0x0,TidyAttr_ABBR = 0x1,TidyAttr_ACCEPT = 0x2,TidyAttr_ACCEPT_CHARSET = 0x3,TidyAttr_ACCESSKEY = 0x4,TidyAttr_ACTION = 0x5,TidyAttr_ADD_DATE = 0x6,TidyAttr_ALIGN = 0x7,TidyAttr_ALINK = 0x8,TidyAttr_ALT = 0x9,TidyAttr_ARCHIVE = 0xA,TidyAttr_AXIS = 0xB,TidyAttr_BACKGROUND = 0xC,TidyAttr_BGCOLOR = 0xD,TidyAttr_BGPROPERTIES = 0xE,TidyAttr_BORDER = 0xF,TidyAttr_BORDERCOLOR = 0x10,TidyAttr_BOTTOMMARGIN = 0x11,TidyAttr_CELLPADDING = 0x12,TidyAttr_CELLSPACING = 0x13,TidyAttr_CHAR = 0x14,TidyAttr_CHAROFF = 0x15,TidyAttr_CHARSET = 0x16,TidyAttr_CHECKED = 0x17,TidyAttr_CITE = 0x18,TidyAttr_CLASS = 0x19,TidyAttr_CLASSID = 0x1A,TidyAttr_CLEAR = 0x1B,TidyAttr_CODE = 0x1C,TidyAttr_CODEBASE = 0x1D,TidyAttr_CODETYPE = 0x1E,TidyAttr_COLOR = 0x1F,TidyAttr_COLS = 0x20,TidyAttr_COLSPAN = 0x21,TidyAttr_COMPACT = 0x22,TidyAttr_CONTENT = 0x23,TidyAttr_COORDS = 0x24,TidyAttr_DATA = 0x25,TidyAttr_DATAFLD = 0x26,TidyAttr_DATAFORMATAS = 0x27,TidyAttr_DATAPAGESIZE = 0x28,TidyAttr_DATASRC = 0x29,TidyAttr_DATETIME = 0x2A,TidyAttr_DECLARE = 0x2B,TidyAttr_DEFER = 0x2C,TidyAttr_DIR = 0x2D,TidyAttr_DISABLED = 0x2E,TidyAttr_ENCODING = 0x2F,TidyAttr_ENCTYPE = 0x30,TidyAttr_FACE = 0x31,TidyAttr_FOR = 0x32,TidyAttr_FRAME = 0x33,TidyAttr_FRAMEBORDER = 0x34,TidyAttr_FRAMESPACING = 0x35,TidyAttr_GRIDX = 0x36,TidyAttr_GRIDY = 0x37,TidyAttr_HEADERS = 0x38,TidyAttr_HEIGHT = 0x39,TidyAttr_HREF = 0x3A,TidyAttr_HREFLANG = 0x3B,TidyAttr_HSPACE = 0x3C,TidyAttr_HTTP_EQUIV = 0x3D,TidyAttr_ID = 0x3E,TidyAttr_ISMAP = 0x3F,TidyAttr_LABEL = 0x40,TidyAttr_LANG = 0x41,TidyAttr_LANGUAGE = 0x42,TidyAttr_LAST_MODIFIED = 0x43,TidyAttr_LAST_VISIT = 0x44,TidyAttr_LEFTMARGIN = 0x45,TidyAttr_LINK = 0x46,TidyAttr_LONGDESC = 0x47,TidyAttr_LOWSRC = 0x48,TidyAttr_MARGINHEIGHT = 0x49,TidyAttr_MARGINWIDTH = 0x4A,TidyAttr_MAXLENGTH = 0x4B,TidyAttr_MEDIA = 0x4C,TidyAttr_METHOD = 0x4D,TidyAttr_MULTIPLE = 0x4E,TidyAttr_NAME = 0x4F,TidyAttr_NOHREF = 0x50,TidyAttr_NORESIZE = 0x51,TidyAttr_NOSHADE = 0x52,TidyAttr_NOWRAP = 0x53,TidyAttr_OBJECT = 0x54,TidyAttr_OnAFTERUPDATE = 0x55,TidyAttr_OnBEFOREUNLOAD = 0x56,TidyAttr_OnBEFOREUPDATE = 0x57,TidyAttr_OnBLUR = 0x58,TidyAttr_OnCHANGE = 0x59,TidyAttr_OnCLICK = 0x5A,TidyAttr_OnDATAAVAILABLE = 0x5B,TidyAttr_OnDATASETCHANGED = 0x5C,TidyAttr_OnDATASETCOMPLETE = 0x5D,TidyAttr_OnDBLCLICK = 0x5E,TidyAttr_OnERRORUPDATE = 0x5F,TidyAttr_OnFOCUS = 0x60,TidyAttr_OnKEYDOWN = 0x61,TidyAttr_OnKEYPRESS = 0x62,TidyAttr_OnKEYUP = 0x63,TidyAttr_OnLOAD = 0x64,TidyAttr_OnMOUSEDOWN = 0x65,TidyAttr_OnMOUSEMOVE = 0x66,TidyAttr_OnMOUSEOUT = 0x67,TidyAttr_OnMOUSEOVER = 0x68,TidyAttr_OnMOUSEUP = 0x69,TidyAttr_OnRESET = 0x6A,TidyAttr_OnROWENTER = 0x6B,TidyAttr_OnROWEXIT = 0x6C,TidyAttr_OnSELECT = 0x6D,TidyAttr_OnSUBMIT = 0x6E,TidyAttr_OnUNLOAD = 0x6F,TidyAttr_PROFILE = 0x70,TidyAttr_PROMPT = 0x71,TidyAttr_RBSPAN = 0x72,TidyAttr_READONLY = 0x73,TidyAttr_REL = 0x74,TidyAttr_REV = 0x75,TidyAttr_RIGHTMARGIN = 0x76,TidyAttr_ROWS = 0x77,TidyAttr_ROWSPAN = 0x78,TidyAttr_RULES = 0x79,TidyAttr_SCHEME = 0x7A,TidyAttr_SCOPE = 0x7B,TidyAttr_SCROLLING = 0x7C,TidyAttr_SELECTED = 0x7D,TidyAttr_SHAPE = 0x7E,TidyAttr_SHOWGRID = 0x7F,TidyAttr_SHOWGRIDX = 0x80,TidyAttr_SHOWGRIDY = 0x81,TidyAttr_SIZE = 0x82,TidyAttr_SPAN = 0x83,TidyAttr_SRC = 0x84,TidyAttr_STANDBY = 0x85,TidyAttr_START = 0x86,TidyAttr_STYLE = 0x87,TidyAttr_SUMMARY = 0x88,TidyAttr_TABINDEX = 0x89,TidyAttr_TARGET = 0x8A,TidyAttr_TEXT = 0x8B,TidyAttr_TITLE = 0x8C,TidyAttr_TOPMARGIN = 0x8D,TidyAttr_TYPE = 0x8E,TidyAttr_USEMAP = 0x8F,TidyAttr_VALIGN = 0x90,TidyAttr_VALUE = 0x91,TidyAttr_VALUETYPE = 0x92,TidyAttr_VERSION = 0x93,TidyAttr_VLINK = 0x94,TidyAttr_VSPACE = 0x95,TidyAttr_WIDTH = 0x96,TidyAttr_WRAP = 0x97,TidyAttr_XML_LANG = 0x98,TidyAttr_XML_SPACE = 0x99,TidyAttr_XMLNS = 0x9A,TidyAttr_EVENT = 0x9B,TidyAttr_METHODS = 0x9C,TidyAttr_N = 0x9D,TidyAttr_SDAFORM = 0x9E,TidyAttr_SDAPREF = 0x9F,TidyAttr_SDASUFF = 0xA0,TidyAttr_URN = 0xA1,N_TIDY_ATTRIBS = 0xA2,};
struct $7BD86F81607C7D3E2D088DDB92740D0D {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_msg_type_number_t host_info64_outCnt;integer_t host_info64_out[256];};
enum $7C7EBFB03B6B9DB8456CC748404AF258 {CURLFTPAUTH_DEFAULT = 0x0,CURLFTPAUTH_SSL = 0x1,CURLFTPAUTH_TLS = 0x2,CURLFTPAUTH_LAST = 0x3,};
struct $7C98BE8D658361DF4FF7D8EB6353C72F {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_vm_address_t target_address;vm_prot_t cur_protection;vm_prot_t max_protection;};
struct $7CAB042C95D279B03371C67C49CFDDCE {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t new_lock_set;};
struct $7CAB3563A0B63D1E94DFFC6057C63E4C {u_int32_t mode;u_int32_t uid;u_int32_t gid;u_int32_t fsid;u_int64_t nid;u_int64_t dev;};
struct $7CC33461F71F95EBEC0407BD799E99C2 {uint16_t length;char *data;};
struct $7D6BE7882CE721D70B16F72EF4350FEA {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;vm_read_entry_t data_list;};
enum $7DDEDB93E618741445B281E5280D8762 {XSLT_OUTPUT_XML = 0x0,XSLT_OUTPUT_HTML = 0x1,XSLT_OUTPUT_TEXT = 0x2,};
struct $7E69CF2F21F2DE86821941D7ACE3ABBA {mach_msg_header_t Head;NDR_record_t NDR;processor_set_flavor_t flavor;mach_msg_type_number_t info_outCnt;};
struct $7E94C3F61C7C39FF74FA3EBDC1E527FF {u_char version;u_char tos;u_int16_t len;u_int16_t id;u_int16_t offset;u_char ttl;u_char prot;u_int16_t chksm;u_int32_t src;u_int32_t dest;};
struct $7FF86B32A3F84F15420C95DB1000946C {void *address;unsigned __int32 deallocate : 8;unsigned __int32 copy : 8;unsigned __int32 pad1 : 8;unsigned __int32 type : 8;mach_msg_size_t size;};
enum $80C78EA22186AB772B4BDEFF2BFDD204 {CURLM_CALL_MULTI_PERFORM = 0xFFFFFFFF,CURLM_OK = 0x0,CURLM_BAD_HANDLE = 0x1,CURLM_BAD_EASY_HANDLE = 0x2,CURLM_OUT_OF_MEMORY = 0x3,CURLM_INTERNAL_ERROR = 0x4,CURLM_BAD_SOCKET = 0x5,CURLM_UNKNOWN_OPTION = 0x6,CURLM_LAST = 0x7,};
struct $8109324A5E6FC6C8E3497EBF9ED344C0 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t task;mach_msg_ool_descriptor_t symtab;NDR_record_t NDR;mach_msg_type_number_t nameOffset;mach_msg_type_number_t nameCnt;char name[32];mach_msg_type_number_t symtabCnt;};
enum $817EE464AA2F5FC31C63385F8A750782 {CURLSHOPT_NONE = 0x0,CURLSHOPT_SHARE = 0x1,CURLSHOPT_UNSHARE = 0x2,CURLSHOPT_LOCKFUNC = 0x3,CURLSHOPT_UNLOCKFUNC = 0x4,CURLSHOPT_USERDATA = 0x5,CURLSHOPT_LAST = 0x6,};
struct $81AF895D5A7FC7AA97C511D95D41010E {void *dptr;size_t dsize;};
enum $81EAA969F6CC11E48BC03187F305DA8C {dbdTIC = 0x0,dbdLAST = 0x1,};
struct $8224BF751892D9429891DD778DF6A995 {unsigned __int8 vers;unsigned __int8 type;unsigned __int8 answer;unsigned __int8 pad;unsigned int id_num;struct osockaddr addr;};
struct $82604E0BCB50E4D0B690A798AE0B3CDE {struct in_addr addr;};
struct $82BD275F6039C166EF4DD9B4F2A9C114 {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_msg_type_number_t host_info_outCnt;integer_t host_info_out[15];};
struct $833420E8F4A758B58AE84F5888D3A29B {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t thread;mach_msg_port_descriptor_t task;NDR_record_t NDR;exception_type_t exception;mach_msg_type_number_t codeCnt;integer_t code[2];int flavor;mach_msg_type_number_t old_stateCnt;natural_t old_state[144];};
struct $83A491C58EE353645DD01424DEA49DDB {mach_msg_trailer_type_t msgh_trailer_type;mach_msg_trailer_size_t msgh_trailer_size;mach_port_seqno_t msgh_seqno;security_token_t msgh_sender;audit_token_t msgh_audit;mach_vm_address_t msgh_context;int msgh_ad;msg_labels_t msgh_labels;};
enum $84F121FDA2FE4096921DBCF7232175AD {XSLT_TRACE_ALL = 0xFFFFFFFF,XSLT_TRACE_NONE = 0x0,XSLT_TRACE_COPY_TEXT = 0x1,XSLT_TRACE_PROCESS_NODE = 0x2,XSLT_TRACE_APPLY_TEMPLATE = 0x4,XSLT_TRACE_COPY = 0x8,XSLT_TRACE_COMMENT = 0x10,XSLT_TRACE_PI = 0x20,XSLT_TRACE_COPY_OF = 0x40,XSLT_TRACE_VALUE_OF = 0x80,XSLT_TRACE_CALL_TEMPLATE = 0x100,XSLT_TRACE_APPLY_TEMPLATES = 0x200,XSLT_TRACE_CHOOSE = 0x400,XSLT_TRACE_IF = 0x800,XSLT_TRACE_FOR_EACH = 0x1000,XSLT_TRACE_STRIP_SPACES = 0x2000,XSLT_TRACE_TEMPLATES = 0x4000,XSLT_TRACE_KEYS = 0x8000,XSLT_TRACE_VARIABLES = 0x10000,};
struct $85D8C0A2DD9AA223810B7F7FD2DEBD15 {u_int16_t length;char *data;};
enum $86944522B7C7082BFBF7A67C11C6FF4C {XSLT_SECPREF_READ_FILE = 0x1,XSLT_SECPREF_WRITE_FILE = 0x2,XSLT_SECPREF_CREATE_DIRECTORY = 0x3,XSLT_SECPREF_READ_NETWORK = 0x4,XSLT_SECPREF_WRITE_NETWORK = 0x5,};
struct $86F29632C393BEC61052C835C8FE3129 {mach_msg_header_t Head;NDR_record_t NDR;boolean_t assign_threads;};
struct $87460818A9C42CAAD7BB4BC88EB3F9D9 {mach_msg_header_t Head;NDR_record_t NDR;mach_port_name_t name;mach_port_flavor_t flavor;mach_msg_type_number_t port_info_outCnt;};
enum $87AADCA8575A383F1076ADE10D123F6C {XML_PARSER_EOF = 0xFFFFFFFF,XML_PARSER_START = 0x0,XML_PARSER_MISC = 0x1,XML_PARSER_PI = 0x2,XML_PARSER_DTD = 0x3,XML_PARSER_PROLOG = 0x4,XML_PARSER_COMMENT = 0x5,XML_PARSER_START_TAG = 0x6,XML_PARSER_CONTENT = 0x7,XML_PARSER_CDATA_SECTION = 0x8,XML_PARSER_END_TAG = 0x9,XML_PARSER_ENTITY_DECL = 0xA,XML_PARSER_ENTITY_VALUE = 0xB,XML_PARSER_ATTRIBUTE_VALUE = 0xC,XML_PARSER_SYSTEM_LITERAL = 0xD,XML_PARSER_EPILOG = 0xE,XML_PARSER_IGNORE = 0xF,XML_PARSER_PUBLIC_LITERAL = 0x10,};
enum $891529C55A3D7F6C466AE0BA608A35EA {P_ALL = 0x0,P_PID = 0x1,P_PGID = 0x2,};
struct $892873E46F8F240B706CD4D8B4C0EE69 {mach_msg_header_t Head;NDR_record_t NDR;mach_port_name_t name;mach_vm_address_t context;};
enum $895EE9033D6821791DEBC30787A9414E {BLOCK_FIELD_IS_OBJECT = 0x3,BLOCK_FIELD_IS_BLOCK = 0x7,BLOCK_FIELD_IS_BYREF = 0x8,BLOCK_FIELD_IS_WEAK = 0x10,BLOCK_BYREF_CALLER = 0x80,};
struct $89FB7E727BDCF83A4F62DE682B7A306A {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t notify;NDR_record_t NDR;mach_port_name_t name;mach_msg_id_t msgid;mach_port_mscount_t sync;};
struct $89FEC8E87EEDD00C0CF28D288AB7DB30 {mach_msg_header_t Head;NDR_record_t NDR;task_flavor_t flavor;mach_msg_type_number_t task_info_inCnt;integer_t task_info_in[32];};
struct $8A833B3771E877D0F99F9E4D0939E663 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t pager;NDR_record_t NDR;boolean_t internal;memory_object_size_t size;vm_prot_t permission;};
enum $8AF341AFB349B0F3EC8B21B2C315FEF7 {TidyUnknownOption = 0x0,TidyIndentSpaces = 0x1,TidyWrapLen = 0x2,TidyTabSize = 0x3,TidyCharEncoding = 0x4,TidyInCharEncoding = 0x5,TidyOutCharEncoding = 0x6,TidyNewline = 0x7,TidyDoctypeMode = 0x8,TidyDoctype = 0x9,TidyDuplicateAttrs = 0xA,TidyAltText = 0xB,TidySlideStyle = 0xC,TidyErrFile = 0xD,TidyOutFile = 0xE,TidyWriteBack = 0xF,TidyShowMarkup = 0x10,TidyShowWarnings = 0x11,TidyQuiet = 0x12,TidyIndentContent = 0x13,TidyHideEndTags = 0x14,TidyXmlTags = 0x15,TidyXmlOut = 0x16,TidyXhtmlOut = 0x17,TidyHtmlOut = 0x18,TidyXmlDecl = 0x19,TidyUpperCaseTags = 0x1A,TidyUpperCaseAttrs = 0x1B,TidyMakeBare = 0x1C,TidyMakeClean = 0x1D,TidyLogicalEmphasis = 0x1E,TidyDropPropAttrs = 0x1F,TidyDropFontTags = 0x20,TidyDropEmptyParas = 0x21,TidyFixComments = 0x22,TidyBreakBeforeBR = 0x23,TidyBurstSlides = 0x24,TidyNumEntities = 0x25,TidyQuoteMarks = 0x26,TidyQuoteNbsp = 0x27,TidyQuoteAmpersand = 0x28,TidyWrapAttVals = 0x29,TidyWrapScriptlets = 0x2A,TidyWrapSection = 0x2B,TidyWrapAsp = 0x2C,TidyWrapJste = 0x2D,TidyWrapPhp = 0x2E,TidyFixBackslash = 0x2F,TidyIndentAttributes = 0x30,TidyXmlPIs = 0x31,TidyXmlSpace = 0x32,TidyEncloseBodyText = 0x33,TidyEncloseBlockText = 0x34,TidyKeepFileTimes = 0x35,TidyWord2000 = 0x36,TidyMark = 0x37,TidyEmacs = 0x38,TidyEmacsFile = 0x39,TidyLiteralAttribs = 0x3A,TidyBodyOnly = 0x3B,TidyFixUri = 0x3C,TidyLowerLiterals = 0x3D,TidyHideComments = 0x3E,TidyIndentCdata = 0x3F,TidyForceOutput = 0x40,TidyShowErrors = 0x41,TidyAsciiChars = 0x42,TidyJoinClasses = 0x43,TidyJoinStyles = 0x44,TidyEscapeCdata = 0x45,TidyLanguage = 0x46,TidyNCR = 0x47,TidyOutputBOM = 0x48,TidyReplaceColor = 0x49,TidyCSSPrefix = 0x4A,TidyInlineTags = 0x4B,TidyBlockTags = 0x4C,TidyEmptyTags = 0x4D,TidyPreTags = 0x4E,TidyAccessibilityCheckLevel = 0x4F,TidyVertSpace = 0x50,TidyPunctWrap = 0x51,TidyMergeDivs = 0x52,TidyDecorateInferredUL = 0x53,TidyRelativePathBaseUri = 0x54,TidyAbsolutePathBaseUri = 0x55,TidyDropClassesWithPrefix = 0x56,TidyDropIdsWithPrefix = 0x57,TidySanitizeAgainstXSS = 0x58,N_TIDY_OPTIONS = 0x59,};
struct $8B6FDD4F28EF84224B001DC98A6CCF9E {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;vm_address_t target_address;vm_prot_t cur_protection;vm_prot_t max_protection;};
enum $8BA7C419D374795706E7AF80CA235D6C {XML_ATTRIBUTE_NONE = 0x1,XML_ATTRIBUTE_REQUIRED = 0x2,XML_ATTRIBUTE_IMPLIED = 0x3,XML_ATTRIBUTE_FIXED = 0x4,};
struct $8BAB52A5AF78D0C10584D69C8CD7C023 {mach_msg_header_t not_header;NDR_record_t NDR;mach_msg_type_number_t not_count;mach_msg_format_0_trailer_t trailer;};
struct $8BB03BD0BEB0A35EC535A731418A02E8 {unsigned __int64 flags;unsigned int cachesize;int maxkeypage;int minkeypage;unsigned int psize;int (__cdecl *compare)(const DBT *, const DBT *);size_t (__cdecl *prefix)(const DBT *, const DBT *);int lorder;};
enum $8C351220F954B531CED471BF1232BFD8 {TidyInfo = 0x0,TidyWarning = 0x1,TidyConfig = 0x2,TidyAccess = 0x3,TidyError = 0x4,TidyBadDocument = 0x5,TidyFatal = 0x6,};
struct $8C51462DCCBA10E8B75CFFF786FC297E {mach_msg_header_t Head;NDR_record_t NDR;vm_offset_t offset;};
enum $8C79ED20FC2D021B4CE653A1AD218746 {kHFSCaseFolding = 0xCF,kHFSBinaryCompare = 0xBC,};
enum $8D0F94C86775DD2813ADC12AE093783F {XML_SCHEMAS_ERR_OK = 0x0,XML_SCHEMAS_ERR_NOROOT = 0x1,XML_SCHEMAS_ERR_UNDECLAREDELEM = 0x2,XML_SCHEMAS_ERR_NOTTOPLEVEL = 0x3,XML_SCHEMAS_ERR_MISSING = 0x4,XML_SCHEMAS_ERR_WRONGELEM = 0x5,XML_SCHEMAS_ERR_NOTYPE = 0x6,XML_SCHEMAS_ERR_NOROLLBACK = 0x7,XML_SCHEMAS_ERR_ISABSTRACT = 0x8,XML_SCHEMAS_ERR_NOTEMPTY = 0x9,XML_SCHEMAS_ERR_ELEMCONT = 0xA,XML_SCHEMAS_ERR_HAVEDEFAULT = 0xB,XML_SCHEMAS_ERR_NOTNILLABLE = 0xC,XML_SCHEMAS_ERR_EXTRACONTENT = 0xD,XML_SCHEMAS_ERR_INVALIDATTR = 0xE,XML_SCHEMAS_ERR_INVALIDELEM = 0xF,XML_SCHEMAS_ERR_NOTDETERMINIST = 0x10,XML_SCHEMAS_ERR_CONSTRUCT = 0x11,XML_SCHEMAS_ERR_INTERNAL = 0x12,XML_SCHEMAS_ERR_NOTSIMPLE = 0x13,XML_SCHEMAS_ERR_ATTRUNKNOWN = 0x14,XML_SCHEMAS_ERR_ATTRINVALID = 0x15,XML_SCHEMAS_ERR_VALUE = 0x16,XML_SCHEMAS_ERR_FACET = 0x17,XML_SCHEMAS_ERR_ = 0x18,XML_SCHEMAS_ERR_XXX = 0x19,};
enum $8D9F9A8BB1D8AD61C3ACB6F7B056472F {UNW_X86_64_RAX = 0x0,UNW_X86_64_RDX = 0x1,UNW_X86_64_RCX = 0x2,UNW_X86_64_RBX = 0x3,UNW_X86_64_RSI = 0x4,UNW_X86_64_RDI = 0x5,UNW_X86_64_RBP = 0x6,UNW_X86_64_RSP = 0x7,UNW_X86_64_R8 = 0x8,UNW_X86_64_R9 = 0x9,UNW_X86_64_R10 = 0xA,UNW_X86_64_R11 = 0xB,UNW_X86_64_R12 = 0xC,UNW_X86_64_R13 = 0xD,UNW_X86_64_R14 = 0xE,UNW_X86_64_R15 = 0xF,};
struct $8DDBBBE51D4822B2C8C3E806F70EB27A {void *address;unsigned __int32 deallocate : 8;unsigned __int32 copy : 8;unsigned __int32 disposition : 8;unsigned __int32 type : 8;mach_msg_size_t count;};
enum $8E022E9E7FCF037C3464A135AB33BF4A {UNW_PPC_R0 = 0x0,UNW_PPC_R1 = 0x1,UNW_PPC_R2 = 0x2,UNW_PPC_R3 = 0x3,UNW_PPC_R4 = 0x4,UNW_PPC_R5 = 0x5,UNW_PPC_R6 = 0x6,UNW_PPC_R7 = 0x7,UNW_PPC_R8 = 0x8,UNW_PPC_R9 = 0x9,UNW_PPC_R10 = 0xA,UNW_PPC_R11 = 0xB,UNW_PPC_R12 = 0xC,UNW_PPC_R13 = 0xD,UNW_PPC_R14 = 0xE,UNW_PPC_R15 = 0xF,UNW_PPC_R16 = 0x10,UNW_PPC_R17 = 0x11,UNW_PPC_R18 = 0x12,UNW_PPC_R19 = 0x13,UNW_PPC_R20 = 0x14,UNW_PPC_R21 = 0x15,UNW_PPC_R22 = 0x16,UNW_PPC_R23 = 0x17,UNW_PPC_R24 = 0x18,UNW_PPC_R25 = 0x19,UNW_PPC_R26 = 0x1A,UNW_PPC_R27 = 0x1B,UNW_PPC_R28 = 0x1C,UNW_PPC_R29 = 0x1D,UNW_PPC_R30 = 0x1E,UNW_PPC_R31 = 0x1F,UNW_PPC_F0 = 0x20,UNW_PPC_F1 = 0x21,UNW_PPC_F2 = 0x22,UNW_PPC_F3 = 0x23,UNW_PPC_F4 = 0x24,UNW_PPC_F5 = 0x25,UNW_PPC_F6 = 0x26,UNW_PPC_F7 = 0x27,UNW_PPC_F8 = 0x28,UNW_PPC_F9 = 0x29,UNW_PPC_F10 = 0x2A,UNW_PPC_F11 = 0x2B,UNW_PPC_F12 = 0x2C,UNW_PPC_F13 = 0x2D,UNW_PPC_F14 = 0x2E,UNW_PPC_F15 = 0x2F,UNW_PPC_F16 = 0x30,UNW_PPC_F17 = 0x31,UNW_PPC_F18 = 0x32,UNW_PPC_F19 = 0x33,UNW_PPC_F20 = 0x34,UNW_PPC_F21 = 0x35,UNW_PPC_F22 = 0x36,UNW_PPC_F23 = 0x37,UNW_PPC_F24 = 0x38,UNW_PPC_F25 = 0x39,UNW_PPC_F26 = 0x3A,UNW_PPC_F27 = 0x3B,UNW_PPC_F28 = 0x3C,UNW_PPC_F29 = 0x3D,UNW_PPC_F30 = 0x3E,UNW_PPC_F31 = 0x3F,UNW_PPC_MQ = 0x40,UNW_PPC_LR = 0x41,UNW_PPC_CTR = 0x42,UNW_PPC_AP = 0x43,UNW_PPC_CR0 = 0x44,UNW_PPC_CR1 = 0x45,UNW_PPC_CR2 = 0x46,UNW_PPC_CR3 = 0x47,UNW_PPC_CR4 = 0x48,UNW_PPC_CR5 = 0x49,UNW_PPC_CR6 = 0x4A,UNW_PPC_CR7 = 0x4B,UNW_PPC_XER = 0x4C,UNW_PPC_V0 = 0x4D,UNW_PPC_V1 = 0x4E,UNW_PPC_V2 = 0x4F,UNW_PPC_V3 = 0x50,UNW_PPC_V4 = 0x51,UNW_PPC_V5 = 0x52,UNW_PPC_V6 = 0x53,UNW_PPC_V7 = 0x54,UNW_PPC_V8 = 0x55,UNW_PPC_V9 = 0x56,UNW_PPC_V10 = 0x57,UNW_PPC_V11 = 0x58,UNW_PPC_V12 = 0x59,UNW_PPC_V13 = 0x5A,UNW_PPC_V14 = 0x5B,UNW_PPC_V15 = 0x5C,UNW_PPC_V16 = 0x5D,UNW_PPC_V17 = 0x5E,UNW_PPC_V18 = 0x5F,UNW_PPC_V19 = 0x60,UNW_PPC_V20 = 0x61,UNW_PPC_V21 = 0x62,UNW_PPC_V22 = 0x63,UNW_PPC_V23 = 0x64,UNW_PPC_V24 = 0x65,UNW_PPC_V25 = 0x66,UNW_PPC_V26 = 0x67,UNW_PPC_V27 = 0x68,UNW_PPC_V28 = 0x69,UNW_PPC_V29 = 0x6A,UNW_PPC_V30 = 0x6B,UNW_PPC_V31 = 0x6C,UNW_PPC_VRSAVE = 0x6D,UNW_PPC_VSCR = 0x6E,UNW_PPC_SPE_ACC = 0x6F,UNW_PPC_SPEFSCR = 0x70,};
enum $8E6D3DD4E935220D4F923E1EC10C4FEC {CURL_LOCK_ACCESS_NONE = 0x0,CURL_LOCK_ACCESS_SHARED = 0x1,CURL_LOCK_ACCESS_SINGLE = 0x2,CURL_LOCK_ACCESS_LAST = 0x3,};
struct $8E8217BBADE0ADE8EA72A465AE8DB052 {mach_msg_header_t Head;NDR_record_t NDR;thread_policy_flavor_t flavor;mach_msg_type_number_t policy_infoCnt;boolean_t get_default;};
struct $8EE2A07E001F320FD50590FBAE1390E6 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t data;NDR_record_t NDR;mach_vm_address_t address;mach_msg_type_number_t dataCnt;};
enum $8F171625CA50F19FB0BDE4B67F774BC9 {CURL_RTSPREQ_NONE = 0x0,CURL_RTSPREQ_OPTIONS = 0x1,CURL_RTSPREQ_DESCRIBE = 0x2,CURL_RTSPREQ_ANNOUNCE = 0x3,CURL_RTSPREQ_SETUP = 0x4,CURL_RTSPREQ_PLAY = 0x5,CURL_RTSPREQ_PAUSE = 0x6,CURL_RTSPREQ_TEARDOWN = 0x7,CURL_RTSPREQ_GET_PARAMETER = 0x8,CURL_RTSPREQ_SET_PARAMETER = 0x9,CURL_RTSPREQ_RECORD = 0xA,CURL_RTSPREQ_RECEIVE = 0xB,CURL_RTSPREQ_LAST = 0xC,};
struct $9196AF323BDCF3C1DC54CF7CF3A0084E {unsigned __int8 g_guid[16];};
struct $92C88324278AB154CB324C17F95F0A4E {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t entry_handle;};
enum $934315CA77800E2DB42B327F9601CA42 {XSLT_STATE_OK = 0x0,XSLT_STATE_ERROR = 0x1,XSLT_STATE_STOPPED = 0x2,};
struct $940BEB7FDCEBF6BD2D78705CDCB7BC00 {mach_msg_header_t Head;NDR_record_t NDR;int flavor;mach_msg_type_number_t old_stateCnt;};
struct $9487B923D69225998A44A53C15C58453 {mach_msg_header_t Head;NDR_record_t NDR;vm_address_t address;natural_t nesting_depth;mach_msg_type_number_t infoCnt;};
union $94CB200B36B7778DB0012FD0C2F25E9C {mach_msg_port_descriptor_t port;mach_msg_ool_descriptor_t out_of_line;mach_msg_ool_ports_descriptor_t ool_ports;mach_msg_type_descriptor_t type;};
struct $9542197A1301620A60E097220E793D31 {mach_msg_header_t Head;NDR_record_t NDR;vm_address_t address;vm_size_t size;vm_inherit_t new_inheritance;};
enum $955A79D8B36BA02C2AC93EA67E94FC4E {dot3ChipSetNational8390 = 0x1,dot3ChipSetNationalSonic = 0x2,};
struct $956C7F5333254C457CAB162127DEEC80 {u_int16_t len;char *zonename;};
struct $9582347D37BF76839153FB59D783D952 {mach_msg_header_t Head;NDR_record_t NDR;mach_vm_address_t address;mach_vm_size_t size;int flags;};
struct $960F984C3AE962B8F9E63C3D54374EB6 {mach_msg_header_t Head;NDR_record_t NDR;policy_t policy;mach_msg_type_number_t baseCnt;integer_t base[5];boolean_t set_limit;};
struct $966BCD5BEC08EADD7CB66B18D60473E0 {vm_address_t address;vm_size_t size;};
enum $97920DDAD3C80055B2939F984919E3D2 {ACL_FIRST_ENTRY = 0x0,ACL_NEXT_ENTRY = 0xFFFFFFFF,ACL_LAST_ENTRY = 0xFFFFFFFE,};
struct $979FA3DE6ECCF956231BFC297C4278E6 {int quot;int rem;};
enum $98923156B44D8D77A256CDD67243A530 {XML_ERR_OK = 0x0,XML_ERR_INTERNAL_ERROR = 0x1,XML_ERR_NO_MEMORY = 0x2,XML_ERR_DOCUMENT_START = 0x3,XML_ERR_DOCUMENT_EMPTY = 0x4,XML_ERR_DOCUMENT_END = 0x5,XML_ERR_INVALID_HEX_CHARREF = 0x6,XML_ERR_INVALID_DEC_CHARREF = 0x7,XML_ERR_INVALID_CHARREF = 0x8,XML_ERR_INVALID_CHAR = 0x9,XML_ERR_CHARREF_AT_EOF = 0xA,XML_ERR_CHARREF_IN_PROLOG = 0xB,XML_ERR_CHARREF_IN_EPILOG = 0xC,XML_ERR_CHARREF_IN_DTD = 0xD,XML_ERR_ENTITYREF_AT_EOF = 0xE,XML_ERR_ENTITYREF_IN_PROLOG = 0xF,XML_ERR_ENTITYREF_IN_EPILOG = 0x10,XML_ERR_ENTITYREF_IN_DTD = 0x11,XML_ERR_PEREF_AT_EOF = 0x12,XML_ERR_PEREF_IN_PROLOG = 0x13,XML_ERR_PEREF_IN_EPILOG = 0x14,XML_ERR_PEREF_IN_INT_SUBSET = 0x15,XML_ERR_ENTITYREF_NO_NAME = 0x16,XML_ERR_ENTITYREF_SEMICOL_MISSING = 0x17,XML_ERR_PEREF_NO_NAME = 0x18,XML_ERR_PEREF_SEMICOL_MISSING = 0x19,XML_ERR_UNDECLARED_ENTITY = 0x1A,XML_WAR_UNDECLARED_ENTITY = 0x1B,XML_ERR_UNPARSED_ENTITY = 0x1C,XML_ERR_ENTITY_IS_EXTERNAL = 0x1D,XML_ERR_ENTITY_IS_PARAMETER = 0x1E,XML_ERR_UNKNOWN_ENCODING = 0x1F,XML_ERR_UNSUPPORTED_ENCODING = 0x20,XML_ERR_STRING_NOT_STARTED = 0x21,XML_ERR_STRING_NOT_CLOSED = 0x22,XML_ERR_NS_DECL_ERROR = 0x23,XML_ERR_ENTITY_NOT_STARTED = 0x24,XML_ERR_ENTITY_NOT_FINISHED = 0x25,XML_ERR_LT_IN_ATTRIBUTE = 0x26,XML_ERR_ATTRIBUTE_NOT_STARTED = 0x27,XML_ERR_ATTRIBUTE_NOT_FINISHED = 0x28,XML_ERR_ATTRIBUTE_WITHOUT_VALUE = 0x29,XML_ERR_ATTRIBUTE_REDEFINED = 0x2A,XML_ERR_LITERAL_NOT_STARTED = 0x2B,XML_ERR_LITERAL_NOT_FINISHED = 0x2C,XML_ERR_COMMENT_NOT_FINISHED = 0x2D,XML_ERR_PI_NOT_STARTED = 0x2E,XML_ERR_PI_NOT_FINISHED = 0x2F,XML_ERR_NOTATION_NOT_STARTED = 0x30,XML_ERR_NOTATION_NOT_FINISHED = 0x31,XML_ERR_ATTLIST_NOT_STARTED = 0x32,XML_ERR_ATTLIST_NOT_FINISHED = 0x33,XML_ERR_MIXED_NOT_STARTED = 0x34,XML_ERR_MIXED_NOT_FINISHED = 0x35,XML_ERR_ELEMCONTENT_NOT_STARTED = 0x36,XML_ERR_ELEMCONTENT_NOT_FINISHED = 0x37,XML_ERR_XMLDECL_NOT_STARTED = 0x38,XML_ERR_XMLDECL_NOT_FINISHED = 0x39,XML_ERR_CONDSEC_NOT_STARTED = 0x3A,XML_ERR_CONDSEC_NOT_FINISHED = 0x3B,XML_ERR_EXT_SUBSET_NOT_FINISHED = 0x3C,XML_ERR_DOCTYPE_NOT_FINISHED = 0x3D,XML_ERR_MISPLACED_CDATA_END = 0x3E,XML_ERR_CDATA_NOT_FINISHED = 0x3F,XML_ERR_RESERVED_XML_NAME = 0x40,XML_ERR_SPACE_REQUIRED = 0x41,XML_ERR_SEPARATOR_REQUIRED = 0x42,XML_ERR_NMTOKEN_REQUIRED = 0x43,XML_ERR_NAME_REQUIRED = 0x44,XML_ERR_PCDATA_REQUIRED = 0x45,XML_ERR_URI_REQUIRED = 0x46,XML_ERR_PUBID_REQUIRED = 0x47,XML_ERR_LT_REQUIRED = 0x48,XML_ERR_GT_REQUIRED = 0x49,XML_ERR_LTSLASH_REQUIRED = 0x4A,XML_ERR_EQUAL_REQUIRED = 0x4B,XML_ERR_TAG_NAME_MISMATCH = 0x4C,XML_ERR_TAG_NOT_FINISHED = 0x4D,XML_ERR_STANDALONE_VALUE = 0x4E,XML_ERR_ENCODING_NAME = 0x4F,XML_ERR_HYPHEN_IN_COMMENT = 0x50,XML_ERR_INVALID_ENCODING = 0x51,XML_ERR_EXT_ENTITY_STANDALONE = 0x52,XML_ERR_CONDSEC_INVALID = 0x53,XML_ERR_VALUE_REQUIRED = 0x54,XML_ERR_NOT_WELL_BALANCED = 0x55,XML_ERR_EXTRA_CONTENT = 0x56,XML_ERR_ENTITY_CHAR_ERROR = 0x57,XML_ERR_ENTITY_PE_INTERNAL = 0x58,XML_ERR_ENTITY_LOOP = 0x59,XML_ERR_ENTITY_BOUNDARY = 0x5A,XML_ERR_INVALID_URI = 0x5B,XML_ERR_URI_FRAGMENT = 0x5C,XML_WAR_CATALOG_PI = 0x5D,XML_ERR_NO_DTD = 0x5E,XML_ERR_CONDSEC_INVALID_KEYWORD = 0x5F,XML_ERR_VERSION_MISSING = 0x60,XML_WAR_UNKNOWN_VERSION = 0x61,XML_WAR_LANG_VALUE = 0x62,XML_WAR_NS_URI = 0x63,XML_WAR_NS_URI_RELATIVE = 0x64,XML_ERR_MISSING_ENCODING = 0x65,XML_WAR_SPACE_VALUE = 0x66,XML_ERR_NOT_STANDALONE = 0x67,XML_ERR_ENTITY_PROCESSING = 0x68,XML_ERR_NOTATION_PROCESSING = 0x69,XML_WAR_NS_COLUMN = 0x6A,XML_WAR_ENTITY_REDEFINED = 0x6B,XML_ERR_UNKNOWN_VERSION = 0x6C,XML_ERR_VERSION_MISMATCH = 0x6D,XML_NS_ERR_XML_NAMESPACE = 0xC8,XML_NS_ERR_UNDEFINED_NAMESPACE = 0xC9,XML_NS_ERR_QNAME = 0xCA,XML_NS_ERR_ATTRIBUTE_REDEFINED = 0xCB,XML_NS_ERR_EMPTY = 0xCC,XML_NS_ERR_COLON = 0xCD,XML_DTD_ATTRIBUTE_DEFAULT = 0x1F4,XML_DTD_ATTRIBUTE_REDEFINED = 0x1F5,XML_DTD_ATTRIBUTE_VALUE = 0x1F6,XML_DTD_CONTENT_ERROR = 0x1F7,XML_DTD_CONTENT_MODEL = 0x1F8,XML_DTD_CONTENT_NOT_DETERMINIST = 0x1F9,XML_DTD_DIFFERENT_PREFIX = 0x1FA,XML_DTD_ELEM_DEFAULT_NAMESPACE = 0x1FB,XML_DTD_ELEM_NAMESPACE = 0x1FC,XML_DTD_ELEM_REDEFINED = 0x1FD,XML_DTD_EMPTY_NOTATION = 0x1FE,XML_DTD_ENTITY_TYPE = 0x1FF,XML_DTD_ID_FIXED = 0x200,XML_DTD_ID_REDEFINED = 0x201,XML_DTD_ID_SUBSET = 0x202,XML_DTD_INVALID_CHILD = 0x203,XML_DTD_INVALID_DEFAULT = 0x204,XML_DTD_LOAD_ERROR = 0x205,XML_DTD_MISSING_ATTRIBUTE = 0x206,XML_DTD_MIXED_CORRUPT = 0x207,XML_DTD_MULTIPLE_ID = 0x208,XML_DTD_NO_DOC = 0x209,XML_DTD_NO_DTD = 0x20A,XML_DTD_NO_ELEM_NAME = 0x20B,XML_DTD_NO_PREFIX = 0x20C,XML_DTD_NO_ROOT = 0x20D,XML_DTD_NOTATION_REDEFINED = 0x20E,XML_DTD_NOTATION_VALUE = 0x20F,XML_DTD_NOT_EMPTY = 0x210,XML_DTD_NOT_PCDATA = 0x211,XML_DTD_NOT_STANDALONE = 0x212,XML_DTD_ROOT_NAME = 0x213,XML_DTD_STANDALONE_WHITE_SPACE = 0x214,XML_DTD_UNKNOWN_ATTRIBUTE = 0x215,XML_DTD_UNKNOWN_ELEM = 0x216,XML_DTD_UNKNOWN_ENTITY = 0x217,XML_DTD_UNKNOWN_ID = 0x218,XML_DTD_UNKNOWN_NOTATION = 0x219,XML_DTD_STANDALONE_DEFAULTED = 0x21A,XML_DTD_XMLID_VALUE = 0x21B,XML_DTD_XMLID_TYPE = 0x21C,XML_DTD_DUP_TOKEN = 0x21D,XML_HTML_STRUCURE_ERROR = 0x320,XML_HTML_UNKNOWN_TAG = 0x321,XML_RNGP_ANYNAME_ATTR_ANCESTOR = 0x3E8,XML_RNGP_ATTR_CONFLICT = 0x3E9,XML_RNGP_ATTRIBUTE_CHILDREN = 0x3EA,XML_RNGP_ATTRIBUTE_CONTENT = 0x3EB,XML_RNGP_ATTRIBUTE_EMPTY = 0x3EC,XML_RNGP_ATTRIBUTE_NOOP = 0x3ED,XML_RNGP_CHOICE_CONTENT = 0x3EE,XML_RNGP_CHOICE_EMPTY = 0x3EF,XML_RNGP_CREATE_FAILURE = 0x3F0,XML_RNGP_DATA_CONTENT = 0x3F1,XML_RNGP_DEF_CHOICE_AND_INTERLEAVE = 0x3F2,XML_RNGP_DEFINE_CREATE_FAILED = 0x3F3,XML_RNGP_DEFINE_EMPTY = 0x3F4,XML_RNGP_DEFINE_MISSING = 0x3F5,XML_RNGP_DEFINE_NAME_MISSING = 0x3F6,XML_RNGP_ELEM_CONTENT_EMPTY = 0x3F7,XML_RNGP_ELEM_CONTENT_ERROR = 0x3F8,XML_RNGP_ELEMENT_EMPTY = 0x3F9,XML_RNGP_ELEMENT_CONTENT = 0x3FA,XML_RNGP_ELEMENT_NAME = 0x3FB,XML_RNGP_ELEMENT_NO_CONTENT = 0x3FC,XML_RNGP_ELEM_TEXT_CONFLICT = 0x3FD,XML_RNGP_EMPTY = 0x3FE,XML_RNGP_EMPTY_CONSTRUCT = 0x3FF,XML_RNGP_EMPTY_CONTENT = 0x400,XML_RNGP_EMPTY_NOT_EMPTY = 0x401,XML_RNGP_ERROR_TYPE_LIB = 0x402,XML_RNGP_EXCEPT_EMPTY = 0x403,XML_RNGP_EXCEPT_MISSING = 0x404,XML_RNGP_EXCEPT_MULTIPLE = 0x405,XML_RNGP_EXCEPT_NO_CONTENT = 0x406,XML_RNGP_EXTERNALREF_EMTPY = 0x407,XML_RNGP_EXTERNAL_REF_FAILURE = 0x408,XML_RNGP_EXTERNALREF_RECURSE = 0x409,XML_RNGP_FORBIDDEN_ATTRIBUTE = 0x40A,XML_RNGP_FOREIGN_ELEMENT = 0x40B,XML_RNGP_GRAMMAR_CONTENT = 0x40C,XML_RNGP_GRAMMAR_EMPTY = 0x40D,XML_RNGP_GRAMMAR_MISSING = 0x40E,XML_RNGP_GRAMMAR_NO_START = 0x40F,XML_RNGP_GROUP_ATTR_CONFLICT = 0x410,XML_RNGP_HREF_ERROR = 0x411,XML_RNGP_INCLUDE_EMPTY = 0x412,XML_RNGP_INCLUDE_FAILURE = 0x413,XML_RNGP_INCLUDE_RECURSE = 0x414,XML_RNGP_INTERLEAVE_ADD = 0x415,XML_RNGP_INTERLEAVE_CREATE_FAILED = 0x416,XML_RNGP_INTERLEAVE_EMPTY = 0x417,XML_RNGP_INTERLEAVE_NO_CONTENT = 0x418,XML_RNGP_INVALID_DEFINE_NAME = 0x419,XML_RNGP_INVALID_URI = 0x41A,XML_RNGP_INVALID_VALUE = 0x41B,XML_RNGP_MISSING_HREF = 0x41C,XML_RNGP_NAME_MISSING = 0x41D,XML_RNGP_NEED_COMBINE = 0x41E,XML_RNGP_NOTALLOWED_NOT_EMPTY = 0x41F,XML_RNGP_NSNAME_ATTR_ANCESTOR = 0x420,XML_RNGP_NSNAME_NO_NS = 0x421,XML_RNGP_PARAM_FORBIDDEN = 0x422,XML_RNGP_PARAM_NAME_MISSING = 0x423,XML_RNGP_PARENTREF_CREATE_FAILED = 0x424,XML_RNGP_PARENTREF_NAME_INVALID = 0x425,XML_RNGP_PARENTREF_NO_NAME = 0x426,XML_RNGP_PARENTREF_NO_PARENT = 0x427,XML_RNGP_PARENTREF_NOT_EMPTY = 0x428,XML_RNGP_PARSE_ERROR = 0x429,XML_RNGP_PAT_ANYNAME_EXCEPT_ANYNAME = 0x42A,XML_RNGP_PAT_ATTR_ATTR = 0x42B,XML_RNGP_PAT_ATTR_ELEM = 0x42C,XML_RNGP_PAT_DATA_EXCEPT_ATTR = 0x42D,XML_RNGP_PAT_DATA_EXCEPT_ELEM = 0x42E,XML_RNGP_PAT_DATA_EXCEPT_EMPTY = 0x42F,XML_RNGP_PAT_DATA_EXCEPT_GROUP = 0x430,XML_RNGP_PAT_DATA_EXCEPT_INTERLEAVE = 0x431,XML_RNGP_PAT_DATA_EXCEPT_LIST = 0x432,XML_RNGP_PAT_DATA_EXCEPT_ONEMORE = 0x433,XML_RNGP_PAT_DATA_EXCEPT_REF = 0x434,XML_RNGP_PAT_DATA_EXCEPT_TEXT = 0x435,XML_RNGP_PAT_LIST_ATTR = 0x436,XML_RNGP_PAT_LIST_ELEM = 0x437,XML_RNGP_PAT_LIST_INTERLEAVE = 0x438,XML_RNGP_PAT_LIST_LIST = 0x439,XML_RNGP_PAT_LIST_REF = 0x43A,XML_RNGP_PAT_LIST_TEXT = 0x43B,XML_RNGP_PAT_NSNAME_EXCEPT_ANYNAME = 0x43C,XML_RNGP_PAT_NSNAME_EXCEPT_NSNAME = 0x43D,XML_RNGP_PAT_ONEMORE_GROUP_ATTR = 0x43E,XML_RNGP_PAT_ONEMORE_INTERLEAVE_ATTR = 0x43F,XML_RNGP_PAT_START_ATTR = 0x440,XML_RNGP_PAT_START_DATA = 0x441,XML_RNGP_PAT_START_EMPTY = 0x442,XML_RNGP_PAT_START_GROUP = 0x443,XML_RNGP_PAT_START_INTERLEAVE = 0x444,XML_RNGP_PAT_START_LIST = 0x445,XML_RNGP_PAT_START_ONEMORE = 0x446,XML_RNGP_PAT_START_TEXT = 0x447,XML_RNGP_PAT_START_VALUE = 0x448,XML_RNGP_PREFIX_UNDEFINED = 0x449,XML_RNGP_REF_CREATE_FAILED = 0x44A,XML_RNGP_REF_CYCLE = 0x44B,XML_RNGP_REF_NAME_INVALID = 0x44C,XML_RNGP_REF_NO_DEF = 0x44D,XML_RNGP_REF_NO_NAME = 0x44E,XML_RNGP_REF_NOT_EMPTY = 0x44F,XML_RNGP_START_CHOICE_AND_INTERLEAVE = 0x450,XML_RNGP_START_CONTENT = 0x451,XML_RNGP_START_EMPTY = 0x452,XML_RNGP_START_MISSING = 0x453,XML_RNGP_TEXT_EXPECTED = 0x454,XML_RNGP_TEXT_HAS_CHILD = 0x455,XML_RNGP_TYPE_MISSING = 0x456,XML_RNGP_TYPE_NOT_FOUND = 0x457,XML_RNGP_TYPE_VALUE = 0x458,XML_RNGP_UNKNOWN_ATTRIBUTE = 0x459,XML_RNGP_UNKNOWN_COMBINE = 0x45A,XML_RNGP_UNKNOWN_CONSTRUCT = 0x45B,XML_RNGP_UNKNOWN_TYPE_LIB = 0x45C,XML_RNGP_URI_FRAGMENT = 0x45D,XML_RNGP_URI_NOT_ABSOLUTE = 0x45E,XML_RNGP_VALUE_EMPTY = 0x45F,XML_RNGP_VALUE_NO_CONTENT = 0x460,XML_RNGP_XMLNS_NAME = 0x461,XML_RNGP_XML_NS = 0x462,XML_XPATH_EXPRESSION_OK = 0x4B0,XML_XPATH_NUMBER_ERROR = 0x4B1,XML_XPATH_UNFINISHED_LITERAL_ERROR = 0x4B2,XML_XPATH_START_LITERAL_ERROR = 0x4B3,XML_XPATH_VARIABLE_REF_ERROR = 0x4B4,XML_XPATH_UNDEF_VARIABLE_ERROR = 0x4B5,XML_XPATH_INVALID_PREDICATE_ERROR = 0x4B6,XML_XPATH_EXPR_ERROR = 0x4B7,XML_XPATH_UNCLOSED_ERROR = 0x4B8,XML_XPATH_UNKNOWN_FUNC_ERROR = 0x4B9,XML_XPATH_INVALID_OPERAND = 0x4BA,XML_XPATH_INVALID_TYPE = 0x4BB,XML_XPATH_INVALID_ARITY = 0x4BC,XML_XPATH_INVALID_CTXT_SIZE = 0x4BD,XML_XPATH_INVALID_CTXT_POSITION = 0x4BE,XML_XPATH_MEMORY_ERROR = 0x4BF,XML_XPTR_SYNTAX_ERROR = 0x4C0,XML_XPTR_RESOURCE_ERROR = 0x4C1,XML_XPTR_SUB_RESOURCE_ERROR = 0x4C2,XML_XPATH_UNDEF_PREFIX_ERROR = 0x4C3,XML_XPATH_ENCODING_ERROR = 0x4C4,XML_XPATH_INVALID_CHAR_ERROR = 0x4C5,XML_TREE_INVALID_HEX = 0x514,XML_TREE_INVALID_DEC = 0x515,XML_TREE_UNTERMINATED_ENTITY = 0x516,XML_TREE_NOT_UTF8 = 0x517,XML_SAVE_NOT_UTF8 = 0x578,XML_SAVE_CHAR_INVALID = 0x579,XML_SAVE_NO_DOCTYPE = 0x57A,XML_SAVE_UNKNOWN_ENCODING = 0x57B,XML_REGEXP_COMPILE_ERROR = 0x5AA,XML_IO_UNKNOWN = 0x5DC,XML_IO_EACCES = 0x5DD,XML_IO_EAGAIN = 0x5DE,XML_IO_EBADF = 0x5DF,XML_IO_EBADMSG = 0x5E0,XML_IO_EBUSY = 0x5E1,XML_IO_ECANCELED = 0x5E2,XML_IO_ECHILD = 0x5E3,XML_IO_EDEADLK = 0x5E4,XML_IO_EDOM = 0x5E5,XML_IO_EEXIST = 0x5E6,XML_IO_EFAULT = 0x5E7,XML_IO_EFBIG = 0x5E8,XML_IO_EINPROGRESS = 0x5E9,XML_IO_EINTR = 0x5EA,XML_IO_EINVAL = 0x5EB,XML_IO_EIO = 0x5EC,XML_IO_EISDIR = 0x5ED,XML_IO_EMFILE = 0x5EE,XML_IO_EMLINK = 0x5EF,XML_IO_EMSGSIZE = 0x5F0,XML_IO_ENAMETOOLONG = 0x5F1,XML_IO_ENFILE = 0x5F2,XML_IO_ENODEV = 0x5F3,XML_IO_ENOENT = 0x5F4,XML_IO_ENOEXEC = 0x5F5,XML_IO_ENOLCK = 0x5F6,XML_IO_ENOMEM = 0x5F7,XML_IO_ENOSPC = 0x5F8,XML_IO_ENOSYS = 0x5F9,XML_IO_ENOTDIR = 0x5FA,XML_IO_ENOTEMPTY = 0x5FB,XML_IO_ENOTSUP = 0x5FC,XML_IO_ENOTTY = 0x5FD,XML_IO_ENXIO = 0x5FE,XML_IO_EPERM = 0x5FF,XML_IO_EPIPE = 0x600,XML_IO_ERANGE = 0x601,XML_IO_EROFS = 0x602,XML_IO_ESPIPE = 0x603,XML_IO_ESRCH = 0x604,XML_IO_ETIMEDOUT = 0x605,XML_IO_EXDEV = 0x606,XML_IO_NETWORK_ATTEMPT = 0x607,XML_IO_ENCODER = 0x608,XML_IO_FLUSH = 0x609,XML_IO_WRITE = 0x60A,XML_IO_NO_INPUT = 0x60B,XML_IO_BUFFER_FULL = 0x60C,XML_IO_LOAD_ERROR = 0x60D,XML_IO_ENOTSOCK = 0x60E,XML_IO_EISCONN = 0x60F,XML_IO_ECONNREFUSED = 0x610,XML_IO_ENETUNREACH = 0x611,XML_IO_EADDRINUSE = 0x612,XML_IO_EALREADY = 0x613,XML_IO_EAFNOSUPPORT = 0x614,XML_XINCLUDE_RECURSION = 0x640,XML_XINCLUDE_PARSE_VALUE = 0x641,XML_XINCLUDE_ENTITY_DEF_MISMATCH = 0x642,XML_XINCLUDE_NO_HREF = 0x643,XML_XINCLUDE_NO_FALLBACK = 0x644,XML_XINCLUDE_HREF_URI = 0x645,XML_XINCLUDE_TEXT_FRAGMENT = 0x646,XML_XINCLUDE_TEXT_DOCUMENT = 0x647,XML_XINCLUDE_INVALID_CHAR = 0x648,XML_XINCLUDE_BUILD_FAILED = 0x649,XML_XINCLUDE_UNKNOWN_ENCODING = 0x64A,XML_XINCLUDE_MULTIPLE_ROOT = 0x64B,XML_XINCLUDE_XPTR_FAILED = 0x64C,XML_XINCLUDE_XPTR_RESULT = 0x64D,XML_XINCLUDE_INCLUDE_IN_INCLUDE = 0x64E,XML_XINCLUDE_FALLBACKS_IN_INCLUDE = 0x64F,XML_XINCLUDE_FALLBACK_NOT_IN_INCLUDE = 0x650,XML_XINCLUDE_DEPRECATED_NS = 0x651,XML_XINCLUDE_FRAGMENT_ID = 0x652,XML_CATALOG_MISSING_ATTR = 0x672,XML_CATALOG_ENTRY_BROKEN = 0x673,XML_CATALOG_PREFER_VALUE = 0x674,XML_CATALOG_NOT_CATALOG = 0x675,XML_CATALOG_RECURSION = 0x676,XML_SCHEMAP_PREFIX_UNDEFINED = 0x6A4,XML_SCHEMAP_ATTRFORMDEFAULT_VALUE = 0x6A5,XML_SCHEMAP_ATTRGRP_NONAME_NOREF = 0x6A6,XML_SCHEMAP_ATTR_NONAME_NOREF = 0x6A7,XML_SCHEMAP_COMPLEXTYPE_NONAME_NOREF = 0x6A8,XML_SCHEMAP_ELEMFORMDEFAULT_VALUE = 0x6A9,XML_SCHEMAP_ELEM_NONAME_NOREF = 0x6AA,XML_SCHEMAP_EXTENSION_NO_BASE = 0x6AB,XML_SCHEMAP_FACET_NO_VALUE = 0x6AC,XML_SCHEMAP_FAILED_BUILD_IMPORT = 0x6AD,XML_SCHEMAP_GROUP_NONAME_NOREF = 0x6AE,XML_SCHEMAP_IMPORT_NAMESPACE_NOT_URI = 0x6AF,XML_SCHEMAP_IMPORT_REDEFINE_NSNAME = 0x6B0,XML_SCHEMAP_IMPORT_SCHEMA_NOT_URI = 0x6B1,XML_SCHEMAP_INVALID_BOOLEAN = 0x6B2,XML_SCHEMAP_INVALID_ENUM = 0x6B3,XML_SCHEMAP_INVALID_FACET = 0x6B4,XML_SCHEMAP_INVALID_FACET_VALUE = 0x6B5,XML_SCHEMAP_INVALID_MAXOCCURS = 0x6B6,XML_SCHEMAP_INVALID_MINOCCURS = 0x6B7,XML_SCHEMAP_INVALID_REF_AND_SUBTYPE = 0x6B8,XML_SCHEMAP_INVALID_WHITE_SPACE = 0x6B9,XML_SCHEMAP_NOATTR_NOREF = 0x6BA,XML_SCHEMAP_NOTATION_NO_NAME = 0x6BB,XML_SCHEMAP_NOTYPE_NOREF = 0x6BC,XML_SCHEMAP_REF_AND_SUBTYPE = 0x6BD,XML_SCHEMAP_RESTRICTION_NONAME_NOREF = 0x6BE,XML_SCHEMAP_SIMPLETYPE_NONAME = 0x6BF,XML_SCHEMAP_TYPE_AND_SUBTYPE = 0x6C0,XML_SCHEMAP_UNKNOWN_ALL_CHILD = 0x6C1,XML_SCHEMAP_UNKNOWN_ANYATTRIBUTE_CHILD = 0x6C2,XML_SCHEMAP_UNKNOWN_ATTR_CHILD = 0x6C3,XML_SCHEMAP_UNKNOWN_ATTRGRP_CHILD = 0x6C4,XML_SCHEMAP_UNKNOWN_ATTRIBUTE_GROUP = 0x6C5,XML_SCHEMAP_UNKNOWN_BASE_TYPE = 0x6C6,XML_SCHEMAP_UNKNOWN_CHOICE_CHILD = 0x6C7,XML_SCHEMAP_UNKNOWN_COMPLEXCONTENT_CHILD = 0x6C8,XML_SCHEMAP_UNKNOWN_COMPLEXTYPE_CHILD = 0x6C9,XML_SCHEMAP_UNKNOWN_ELEM_CHILD = 0x6CA,XML_SCHEMAP_UNKNOWN_EXTENSION_CHILD = 0x6CB,XML_SCHEMAP_UNKNOWN_FACET_CHILD = 0x6CC,XML_SCHEMAP_UNKNOWN_FACET_TYPE = 0x6CD,XML_SCHEMAP_UNKNOWN_GROUP_CHILD = 0x6CE,XML_SCHEMAP_UNKNOWN_IMPORT_CHILD = 0x6CF,XML_SCHEMAP_UNKNOWN_LIST_CHILD = 0x6D0,XML_SCHEMAP_UNKNOWN_NOTATION_CHILD = 0x6D1,XML_SCHEMAP_UNKNOWN_PROCESSCONTENT_CHILD = 0x6D2,XML_SCHEMAP_UNKNOWN_REF = 0x6D3,XML_SCHEMAP_UNKNOWN_RESTRICTION_CHILD = 0x6D4,XML_SCHEMAP_UNKNOWN_SCHEMAS_CHILD = 0x6D5,XML_SCHEMAP_UNKNOWN_SEQUENCE_CHILD = 0x6D6,XML_SCHEMAP_UNKNOWN_SIMPLECONTENT_CHILD = 0x6D7,XML_SCHEMAP_UNKNOWN_SIMPLETYPE_CHILD = 0x6D8,XML_SCHEMAP_UNKNOWN_TYPE = 0x6D9,XML_SCHEMAP_UNKNOWN_UNION_CHILD = 0x6DA,XML_SCHEMAP_ELEM_DEFAULT_FIXED = 0x6DB,XML_SCHEMAP_REGEXP_INVALID = 0x6DC,XML_SCHEMAP_FAILED_LOAD = 0x6DD,XML_SCHEMAP_NOTHING_TO_PARSE = 0x6DE,XML_SCHEMAP_NOROOT = 0x6DF,XML_SCHEMAP_REDEFINED_GROUP = 0x6E0,XML_SCHEMAP_REDEFINED_TYPE = 0x6E1,XML_SCHEMAP_REDEFINED_ELEMENT = 0x6E2,XML_SCHEMAP_REDEFINED_ATTRGROUP = 0x6E3,XML_SCHEMAP_REDEFINED_ATTR = 0x6E4,XML_SCHEMAP_REDEFINED_NOTATION = 0x6E5,XML_SCHEMAP_FAILED_PARSE = 0x6E6,XML_SCHEMAP_UNKNOWN_PREFIX = 0x6E7,XML_SCHEMAP_DEF_AND_PREFIX = 0x6E8,XML_SCHEMAP_UNKNOWN_INCLUDE_CHILD = 0x6E9,XML_SCHEMAP_INCLUDE_SCHEMA_NOT_URI = 0x6EA,XML_SCHEMAP_INCLUDE_SCHEMA_NO_URI = 0x6EB,XML_SCHEMAP_NOT_SCHEMA = 0x6EC,XML_SCHEMAP_UNKNOWN_MEMBER_TYPE = 0x6ED,XML_SCHEMAP_INVALID_ATTR_USE = 0x6EE,XML_SCHEMAP_RECURSIVE = 0x6EF,XML_SCHEMAP_SUPERNUMEROUS_LIST_ITEM_TYPE = 0x6F0,XML_SCHEMAP_INVALID_ATTR_COMBINATION = 0x6F1,XML_SCHEMAP_INVALID_ATTR_INLINE_COMBINATION = 0x6F2,XML_SCHEMAP_MISSING_SIMPLETYPE_CHILD = 0x6F3,XML_SCHEMAP_INVALID_ATTR_NAME = 0x6F4,XML_SCHEMAP_REF_AND_CONTENT = 0x6F5,XML_SCHEMAP_CT_PROPS_CORRECT_1 = 0x6F6,XML_SCHEMAP_CT_PROPS_CORRECT_2 = 0x6F7,XML_SCHEMAP_CT_PROPS_CORRECT_3 = 0x6F8,XML_SCHEMAP_CT_PROPS_CORRECT_4 = 0x6F9,XML_SCHEMAP_CT_PROPS_CORRECT_5 = 0x6FA,XML_SCHEMAP_DERIVATION_OK_RESTRICTION_1 = 0x6FB,XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_1_1 = 0x6FC,XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_1_2 = 0x6FD,XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_2 = 0x6FE,XML_SCHEMAP_DERIVATION_OK_RESTRICTION_3 = 0x6FF,XML_SCHEMAP_WILDCARD_INVALID_NS_MEMBER = 0x700,XML_SCHEMAP_INTERSECTION_NOT_EXPRESSIBLE = 0x701,XML_SCHEMAP_UNION_NOT_EXPRESSIBLE = 0x702,XML_SCHEMAP_SRC_IMPORT_3_1 = 0x703,XML_SCHEMAP_SRC_IMPORT_3_2 = 0x704,XML_SCHEMAP_DERIVATION_OK_RESTRICTION_4_1 = 0x705,XML_SCHEMAP_DERIVATION_OK_RESTRICTION_4_2 = 0x706,XML_SCHEMAP_DERIVATION_OK_RESTRICTION_4_3 = 0x707,XML_SCHEMAP_COS_CT_EXTENDS_1_3 = 0x708,XML_SCHEMAV_NOROOT = 0x709,XML_SCHEMAV_UNDECLAREDELEM = 0x70A,XML_SCHEMAV_NOTTOPLEVEL = 0x70B,XML_SCHEMAV_MISSING = 0x70C,XML_SCHEMAV_WRONGELEM = 0x70D,XML_SCHEMAV_NOTYPE = 0x70E,XML_SCHEMAV_NOROLLBACK = 0x70F,XML_SCHEMAV_ISABSTRACT = 0x710,XML_SCHEMAV_NOTEMPTY = 0x711,XML_SCHEMAV_ELEMCONT = 0x712,XML_SCHEMAV_HAVEDEFAULT = 0x713,XML_SCHEMAV_NOTNILLABLE = 0x714,XML_SCHEMAV_EXTRACONTENT = 0x715,XML_SCHEMAV_INVALIDATTR = 0x716,XML_SCHEMAV_INVALIDELEM = 0x717,XML_SCHEMAV_NOTDETERMINIST = 0x718,XML_SCHEMAV_CONSTRUCT = 0x719,XML_SCHEMAV_INTERNAL = 0x71A,XML_SCHEMAV_NOTSIMPLE = 0x71B,XML_SCHEMAV_ATTRUNKNOWN = 0x71C,XML_SCHEMAV_ATTRINVALID = 0x71D,XML_SCHEMAV_VALUE = 0x71E,XML_SCHEMAV_FACET = 0x71F,XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_1 = 0x720,XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_2 = 0x721,XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_3 = 0x722,XML_SCHEMAV_CVC_TYPE_3_1_1 = 0x723,XML_SCHEMAV_CVC_TYPE_3_1_2 = 0x724,XML_SCHEMAV_CVC_FACET_VALID = 0x725,XML_SCHEMAV_CVC_LENGTH_VALID = 0x726,XML_SCHEMAV_CVC_MINLENGTH_VALID = 0x727,XML_SCHEMAV_CVC_MAXLENGTH_VALID = 0x728,XML_SCHEMAV_CVC_MININCLUSIVE_VALID = 0x729,XML_SCHEMAV_CVC_MAXINCLUSIVE_VALID = 0x72A,XML_SCHEMAV_CVC_MINEXCLUSIVE_VALID = 0x72B,XML_SCHEMAV_CVC_MAXEXCLUSIVE_VALID = 0x72C,XML_SCHEMAV_CVC_TOTALDIGITS_VALID = 0x72D,XML_SCHEMAV_CVC_FRACTIONDIGITS_VALID = 0x72E,XML_SCHEMAV_CVC_PATTERN_VALID = 0x72F,XML_SCHEMAV_CVC_ENUMERATION_VALID = 0x730,XML_SCHEMAV_CVC_COMPLEX_TYPE_2_1 = 0x731,XML_SCHEMAV_CVC_COMPLEX_TYPE_2_2 = 0x732,XML_SCHEMAV_CVC_COMPLEX_TYPE_2_3 = 0x733,XML_SCHEMAV_CVC_COMPLEX_TYPE_2_4 = 0x734,XML_SCHEMAV_CVC_ELT_1 = 0x735,XML_SCHEMAV_CVC_ELT_2 = 0x736,XML_SCHEMAV_CVC_ELT_3_1 = 0x737,XML_SCHEMAV_CVC_ELT_3_2_1 = 0x738,XML_SCHEMAV_CVC_ELT_3_2_2 = 0x739,XML_SCHEMAV_CVC_ELT_4_1 = 0x73A,XML_SCHEMAV_CVC_ELT_4_2 = 0x73B,XML_SCHEMAV_CVC_ELT_4_3 = 0x73C,XML_SCHEMAV_CVC_ELT_5_1_1 = 0x73D,XML_SCHEMAV_CVC_ELT_5_1_2 = 0x73E,XML_SCHEMAV_CVC_ELT_5_2_1 = 0x73F,XML_SCHEMAV_CVC_ELT_5_2_2_1 = 0x740,XML_SCHEMAV_CVC_ELT_5_2_2_2_1 = 0x741,XML_SCHEMAV_CVC_ELT_5_2_2_2_2 = 0x742,XML_SCHEMAV_CVC_ELT_6 = 0x743,XML_SCHEMAV_CVC_ELT_7 = 0x744,XML_SCHEMAV_CVC_ATTRIBUTE_1 = 0x745,XML_SCHEMAV_CVC_ATTRIBUTE_2 = 0x746,XML_SCHEMAV_CVC_ATTRIBUTE_3 = 0x747,XML_SCHEMAV_CVC_ATTRIBUTE_4 = 0x748,XML_SCHEMAV_CVC_COMPLEX_TYPE_3_1 = 0x749,XML_SCHEMAV_CVC_COMPLEX_TYPE_3_2_1 = 0x74A,XML_SCHEMAV_CVC_COMPLEX_TYPE_3_2_2 = 0x74B,XML_SCHEMAV_CVC_COMPLEX_TYPE_4 = 0x74C,XML_SCHEMAV_CVC_COMPLEX_TYPE_5_1 = 0x74D,XML_SCHEMAV_CVC_COMPLEX_TYPE_5_2 = 0x74E,XML_SCHEMAV_ELEMENT_CONTENT = 0x74F,XML_SCHEMAV_DOCUMENT_ELEMENT_MISSING = 0x750,XML_SCHEMAV_CVC_COMPLEX_TYPE_1 = 0x751,XML_SCHEMAV_CVC_AU = 0x752,XML_SCHEMAV_CVC_TYPE_1 = 0x753,XML_SCHEMAV_CVC_TYPE_2 = 0x754,XML_SCHEMAV_CVC_IDC = 0x755,XML_SCHEMAV_CVC_WILDCARD = 0x756,XML_SCHEMAV_MISC = 0x757,XML_XPTR_UNKNOWN_SCHEME = 0x76C,XML_XPTR_CHILDSEQ_START = 0x76D,XML_XPTR_EVAL_FAILED = 0x76E,XML_XPTR_EXTRA_OBJECTS = 0x76F,XML_C14N_CREATE_CTXT = 0x79E,XML_C14N_REQUIRES_UTF8 = 0x79F,XML_C14N_CREATE_STACK = 0x7A0,XML_C14N_INVALID_NODE = 0x7A1,XML_C14N_UNKNOW_NODE = 0x7A2,XML_C14N_RELATIVE_NAMESPACE = 0x7A3,XML_FTP_PASV_ANSWER = 0x7D0,XML_FTP_EPSV_ANSWER = 0x7D1,XML_FTP_ACCNT = 0x7D2,XML_FTP_URL_SYNTAX = 0x7D3,XML_HTTP_URL_SYNTAX = 0x7E4,XML_HTTP_USE_IP = 0x7E5,XML_HTTP_UNKNOWN_HOST = 0x7E6,XML_SCHEMAP_SRC_SIMPLE_TYPE_1 = 0xBB8,XML_SCHEMAP_SRC_SIMPLE_TYPE_2 = 0xBB9,XML_SCHEMAP_SRC_SIMPLE_TYPE_3 = 0xBBA,XML_SCHEMAP_SRC_SIMPLE_TYPE_4 = 0xBBB,XML_SCHEMAP_SRC_RESOLVE = 0xBBC,XML_SCHEMAP_SRC_RESTRICTION_BASE_OR_SIMPLETYPE = 0xBBD,XML_SCHEMAP_SRC_LIST_ITEMTYPE_OR_SIMPLETYPE = 0xBBE,XML_SCHEMAP_SRC_UNION_MEMBERTYPES_OR_SIMPLETYPES = 0xBBF,XML_SCHEMAP_ST_PROPS_CORRECT_1 = 0xBC0,XML_SCHEMAP_ST_PROPS_CORRECT_2 = 0xBC1,XML_SCHEMAP_ST_PROPS_CORRECT_3 = 0xBC2,XML_SCHEMAP_COS_ST_RESTRICTS_1_1 = 0xBC3,XML_SCHEMAP_COS_ST_RESTRICTS_1_2 = 0xBC4,XML_SCHEMAP_COS_ST_RESTRICTS_1_3_1 = 0xBC5,XML_SCHEMAP_COS_ST_RESTRICTS_1_3_2 = 0xBC6,XML_SCHEMAP_COS_ST_RESTRICTS_2_1 = 0xBC7,XML_SCHEMAP_COS_ST_RESTRICTS_2_3_1_1 = 0xBC8,XML_SCHEMAP_COS_ST_RESTRICTS_2_3_1_2 = 0xBC9,XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_1 = 0xBCA,XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_2 = 0xBCB,XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_3 = 0xBCC,XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_4 = 0xBCD,XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_5 = 0xBCE,XML_SCHEMAP_COS_ST_RESTRICTS_3_1 = 0xBCF,XML_SCHEMAP_COS_ST_RESTRICTS_3_3_1 = 0xBD0,XML_SCHEMAP_COS_ST_RESTRICTS_3_3_1_2 = 0xBD1,XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_2 = 0xBD2,XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_1 = 0xBD3,XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_3 = 0xBD4,XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_4 = 0xBD5,XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_5 = 0xBD6,XML_SCHEMAP_COS_ST_DERIVED_OK_2_1 = 0xBD7,XML_SCHEMAP_COS_ST_DERIVED_OK_2_2 = 0xBD8,XML_SCHEMAP_S4S_ELEM_NOT_ALLOWED = 0xBD9,XML_SCHEMAP_S4S_ELEM_MISSING = 0xBDA,XML_SCHEMAP_S4S_ATTR_NOT_ALLOWED = 0xBDB,XML_SCHEMAP_S4S_ATTR_MISSING = 0xBDC,XML_SCHEMAP_S4S_ATTR_INVALID_VALUE = 0xBDD,XML_SCHEMAP_SRC_ELEMENT_1 = 0xBDE,XML_SCHEMAP_SRC_ELEMENT_2_1 = 0xBDF,XML_SCHEMAP_SRC_ELEMENT_2_2 = 0xBE0,XML_SCHEMAP_SRC_ELEMENT_3 = 0xBE1,XML_SCHEMAP_P_PROPS_CORRECT_1 = 0xBE2,XML_SCHEMAP_P_PROPS_CORRECT_2_1 = 0xBE3,XML_SCHEMAP_P_PROPS_CORRECT_2_2 = 0xBE4,XML_SCHEMAP_E_PROPS_CORRECT_2 = 0xBE5,XML_SCHEMAP_E_PROPS_CORRECT_3 = 0xBE6,XML_SCHEMAP_E_PROPS_CORRECT_4 = 0xBE7,XML_SCHEMAP_E_PROPS_CORRECT_5 = 0xBE8,XML_SCHEMAP_E_PROPS_CORRECT_6 = 0xBE9,XML_SCHEMAP_SRC_INCLUDE = 0xBEA,XML_SCHEMAP_SRC_ATTRIBUTE_1 = 0xBEB,XML_SCHEMAP_SRC_ATTRIBUTE_2 = 0xBEC,XML_SCHEMAP_SRC_ATTRIBUTE_3_1 = 0xBED,XML_SCHEMAP_SRC_ATTRIBUTE_3_2 = 0xBEE,XML_SCHEMAP_SRC_ATTRIBUTE_4 = 0xBEF,XML_SCHEMAP_NO_XMLNS = 0xBF0,XML_SCHEMAP_NO_XSI = 0xBF1,XML_SCHEMAP_COS_VALID_DEFAULT_1 = 0xBF2,XML_SCHEMAP_COS_VALID_DEFAULT_2_1 = 0xBF3,XML_SCHEMAP_COS_VALID_DEFAULT_2_2_1 = 0xBF4,XML_SCHEMAP_COS_VALID_DEFAULT_2_2_2 = 0xBF5,XML_SCHEMAP_CVC_SIMPLE_TYPE = 0xBF6,XML_SCHEMAP_COS_CT_EXTENDS_1_1 = 0xBF7,XML_SCHEMAP_SRC_IMPORT_1_1 = 0xBF8,XML_SCHEMAP_SRC_IMPORT_1_2 = 0xBF9,XML_SCHEMAP_SRC_IMPORT_2 = 0xBFA,XML_SCHEMAP_SRC_IMPORT_2_1 = 0xBFB,XML_SCHEMAP_SRC_IMPORT_2_2 = 0xBFC,XML_SCHEMAP_INTERNAL = 0xBFD,XML_SCHEMAP_NOT_DETERMINISTIC = 0xBFE,XML_SCHEMAP_SRC_ATTRIBUTE_GROUP_1 = 0xBFF,XML_SCHEMAP_SRC_ATTRIBUTE_GROUP_2 = 0xC00,XML_SCHEMAP_SRC_ATTRIBUTE_GROUP_3 = 0xC01,XML_SCHEMAP_MG_PROPS_CORRECT_1 = 0xC02,XML_SCHEMAP_MG_PROPS_CORRECT_2 = 0xC03,XML_SCHEMAP_SRC_CT_1 = 0xC04,XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_1_3 = 0xC05,XML_SCHEMAP_AU_PROPS_CORRECT_2 = 0xC06,XML_SCHEMAP_A_PROPS_CORRECT_2 = 0xC07,XML_SCHEMAP_C_PROPS_CORRECT = 0xC08,XML_SCHEMAP_SRC_REDEFINE = 0xC09,XML_SCHEMAP_SRC_IMPORT = 0xC0A,XML_SCHEMAP_WARN_SKIP_SCHEMA = 0xC0B,XML_SCHEMAP_WARN_UNLOCATED_SCHEMA = 0xC0C,XML_SCHEMAP_WARN_ATTR_REDECL_PROH = 0xC0D,XML_SCHEMAP_WARN_ATTR_POINTLESS_PROH = 0xC0E,XML_SCHEMAP_AG_PROPS_CORRECT = 0xC0F,XML_SCHEMAP_COS_CT_EXTENDS_1_2 = 0xC10,XML_SCHEMAP_AU_PROPS_CORRECT = 0xC11,XML_SCHEMAP_A_PROPS_CORRECT_3 = 0xC12,XML_SCHEMAP_COS_ALL_LIMITED = 0xC13,XML_SCHEMATRONV_ASSERT = 0xFA0,XML_SCHEMATRONV_REPORT = 0xFA1,XML_MODULE_OPEN = 0x1324,XML_MODULE_CLOSE = 0x1325,XML_CHECK_FOUND_ELEMENT = 0x1388,XML_CHECK_FOUND_ATTRIBUTE = 0x1389,XML_CHECK_FOUND_TEXT = 0x138A,XML_CHECK_FOUND_CDATA = 0x138B,XML_CHECK_FOUND_ENTITYREF = 0x138C,XML_CHECK_FOUND_ENTITY = 0x138D,XML_CHECK_FOUND_PI = 0x138E,XML_CHECK_FOUND_COMMENT = 0x138F,XML_CHECK_FOUND_DOCTYPE = 0x1390,XML_CHECK_FOUND_FRAGMENT = 0x1391,XML_CHECK_FOUND_NOTATION = 0x1392,XML_CHECK_UNKNOWN_NODE = 0x1393,XML_CHECK_ENTITY_TYPE = 0x1394,XML_CHECK_NO_PARENT = 0x1395,XML_CHECK_NO_DOC = 0x1396,XML_CHECK_NO_NAME = 0x1397,XML_CHECK_NO_ELEM = 0x1398,XML_CHECK_WRONG_DOC = 0x1399,XML_CHECK_NO_PREV = 0x139A,XML_CHECK_WRONG_PREV = 0x139B,XML_CHECK_NO_NEXT = 0x139C,XML_CHECK_WRONG_NEXT = 0x139D,XML_CHECK_NOT_DTD = 0x139E,XML_CHECK_NOT_ATTR = 0x139F,XML_CHECK_NOT_ATTR_DECL = 0x13A0,XML_CHECK_NOT_ELEM_DECL = 0x13A1,XML_CHECK_NOT_ENTITY_DECL = 0x13A2,XML_CHECK_NOT_NS_DECL = 0x13A3,XML_CHECK_NO_HREF = 0x13A4,XML_CHECK_WRONG_PARENT = 0x13A5,XML_CHECK_NS_SCOPE = 0x13A6,XML_CHECK_NS_ANCESTOR = 0x13A7,XML_CHECK_NOT_UTF8 = 0x13A8,XML_CHECK_NO_DICT = 0x13A9,XML_CHECK_NOT_NCNAME = 0x13AA,XML_CHECK_OUTSIDE_DICT = 0x13AB,XML_CHECK_WRONG_NAME = 0x13AC,XML_CHECK_NAME_NOT_NULL = 0x13AD,XML_I18N_NO_NAME = 0x1770,XML_I18N_NO_HANDLER = 0x1771,XML_I18N_EXCESS_HANDLER = 0x1772,XML_I18N_CONV_FAILED = 0x1773,XML_I18N_NO_OUTPUT = 0x1774,};
enum $98B98ABCC9E6F9227613F51BE97EE338 {REMOVEFILE_PROCEED = 0x0,REMOVEFILE_SKIP = 0x1,REMOVEFILE_STOP = 0x2,};
struct $99892F497716B18479AFC6F93A6376AD {mach_msg_header_t Head;NDR_record_t NDR;processor_flavor_t flavor;mach_msg_type_number_t processor_info_outCnt;};
enum $9A2661DB1D1052644D87390F84E0D91B {REMOVEFILE_STATE_CONFIRM_CALLBACK = 0x1,REMOVEFILE_STATE_CONFIRM_CONTEXT = 0x2,REMOVEFILE_STATE_ERROR_CALLBACK = 0x3,REMOVEFILE_STATE_ERROR_CONTEXT = 0x4,REMOVEFILE_STATE_ERRNO = 0x5,REMOVEFILE_STATE_STATUS_CALLBACK = 0x6,REMOVEFILE_STATE_STATUS_CONTEXT = 0x7,};
struct $9A7E6AE5055FB004EEAAEBA0AF2BBD44 {__darwin_rune_t __min;__darwin_rune_t __max;__darwin_rune_t __map;__uint32_t *__types;};
struct $9AA8814A56848052027B4042AE3CFED4 {mach_msg_header_t header;mach_msg_trailer_t trailer;};
struct $9AB293AD14E7E28F8D88B77C9D755114 {mach_msg_header_t Head;NDR_record_t NDR;mach_msg_type_number_t host_nameOffset;mach_msg_type_number_t host_nameCnt;char host_name[80];mach_msg_type_number_t port_nameOffset;mach_msg_type_number_t port_nameCnt;char port_name[80];};
enum $9AB5807BE2A73FD802AD3D897EE79005 {XML_CATA_PREFER_NONE = 0x0,XML_CATA_PREFER_PUBLIC = 0x1,XML_CATA_PREFER_SYSTEM = 0x2,};
struct $9ADB6D801CB74636DD3BB8128AE6A17C {mach_msg_header_t Head;NDR_record_t NDR;mach_port_right_t right;};
enum $9B247B4FB8AF703C9CE314B5E47E50E3 {kHardLinkFileType = 0x686C6E6B,kHFSPlusCreator = 0x6866732B,};
struct $9BD15C2DE3B549B6E5D91AD4D5FB2472 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t signature;mach_msg_port_descriptor_t port_id;NDR_record_t NDR;mach_msg_type_number_t port_nameOffset;mach_msg_type_number_t port_nameCnt;char port_name[80];};
struct $9C5E7BEBDEAC9680FE5D9ADFB2DEA0C0 {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_vm_size_t outsize;};
struct $9CD45B6D299FC36A745AB895FED2FFAE {mach_msg_header_t Head;NDR_record_t NDR;task_policy_flavor_t flavor;mach_msg_type_number_t policy_infoCnt;boolean_t get_default;};
enum $9D11CEBD141858D27EC341F596A794AC {XML_READER_TYPE_NONE = 0x0,XML_READER_TYPE_ELEMENT = 0x1,XML_READER_TYPE_ATTRIBUTE = 0x2,XML_READER_TYPE_TEXT = 0x3,XML_READER_TYPE_CDATA = 0x4,XML_READER_TYPE_ENTITY_REFERENCE = 0x5,XML_READER_TYPE_ENTITY = 0x6,XML_READER_TYPE_PROCESSING_INSTRUCTION = 0x7,XML_READER_TYPE_COMMENT = 0x8,XML_READER_TYPE_DOCUMENT = 0x9,XML_READER_TYPE_DOCUMENT_TYPE = 0xA,XML_READER_TYPE_DOCUMENT_FRAGMENT = 0xB,XML_READER_TYPE_NOTATION = 0xC,XML_READER_TYPE_WHITESPACE = 0xD,XML_READER_TYPE_SIGNIFICANT_WHITESPACE = 0xE,XML_READER_TYPE_END_ELEMENT = 0xF,XML_READER_TYPE_END_ENTITY = 0x10,XML_READER_TYPE_XML_DECLARATION = 0x11,};
enum $9D44ACAEA63D9A866E10323356541372 {ACL_FLAG_DEFER_INHERIT = 0x1,ACL_FLAG_NO_INHERIT = 0x20000,ACL_ENTRY_INHERITED = 0x10,ACL_ENTRY_FILE_INHERIT = 0x20,ACL_ENTRY_DIRECTORY_INHERIT = 0x40,ACL_ENTRY_LIMIT_INHERIT = 0x80,ACL_ENTRY_ONLY_INHERIT = 0x100,};
struct $9D47920389E792E7BC941BE34CEE9E53 {mach_msg_header_t Head;NDR_record_t NDR;vm_address_t basepc;vm_address_t boundspc;};
struct $9F41B8E90BE057B33891A8A6EE681A31 {uint32_t status;struct sockaddr *server;dns_header_t *header;dns_question_t **question;dns_resource_record_t **answer;dns_resource_record_t **authority;dns_resource_record_t **additional;};
struct $9F75FA6E4EE2D3B86C582C471EA99312 {u_int32_t size;u_char version;u_int16_t e_type;u_int16_t e_mod;u_int32_t ad_type;u_int32_t addr[4];u_int64_t s;u_int64_t ms;};
struct $9FBED4CF5043C1481558BDE489C7B3DA {mach_msg_header_t Head;NDR_record_t NDR;vm_address_t address;vm_purgable_t control;int state;};
struct $A02E0C6A2318D7F918526EFE13F50746 {u_int32_t auid;u_int32_t euid;u_int32_t egid;u_int32_t ruid;u_int32_t rgid;u_int32_t pid;u_int32_t sid;au_tid64_t tid;};
enum $A0887B53835153F1EDF9F781696CAC39 {dot3ChipSetIntel82586 = 0x1,dot3ChipSetIntel82596 = 0x2,dot3ChipSetIntel82557 = 0x3,};
enum $A0A84DEF331DB2FC39B4CD8900FCA11B {XML_ELEMENT_CONTENT_PCDATA = 0x1,XML_ELEMENT_CONTENT_ELEMENT = 0x2,XML_ELEMENT_CONTENT_SEQ = 0x3,XML_ELEMENT_CONTENT_OR = 0x4,};
struct $A1BDF64247D778F13F19FE58DA07510E {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t out_processor_info;NDR_record_t NDR;natural_t out_processor_count;mach_msg_type_number_t out_processor_infoCnt;};
struct $A1BE0EBA393D65D9C9965FE1E31C9EA5 {mach_port_name_t sender;};
struct $A1F779EC0A67B47A0153BAA39A848A18 {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;vm_size_t outsize;};
struct $A2898260CF48A71D77A1F36A2E3AC7DC {char *mailbox;char *txtdname;};
struct $A351D2C18B5CB7A2BB6D222C452FE9CB {uint32_t address;mach_msg_size_t size;unsigned __int32 deallocate : 8;unsigned __int32 copy : 8;unsigned __int32 pad1 : 8;unsigned __int32 type : 8;};
struct $A474581121662292E5F04EE46D9A30FE {mach_msg_header_t Head;NDR_record_t NDR;vm_address_t address;vm_size_t size;vm_sync_t sync_flags;};
enum $A4AB2ACB256BC3C4C6BFF469F2F5E493 {CHECKINT_NO_ERROR = 0x0,CHECKINT_OVERFLOW_ERROR = 0x1,CHECKINT_TYPE_ERROR = 0x2,};
struct $A4B2B056AC02B7A91138DA853BA9D10A {int srr_max_tries;int srr_retry_sec;int srr_retry_usec;int deltat_max_tries;int deltat_retry_sec;int deltat_retry_usec;int deltat_msg_life;int pc_checkup_interval;int crypt_algorithm;int transport_default;int conf_network;int conf_netport;int timer_quantum;int tcp_conn_steady;int tcp_conn_opening;int tcp_conn_max;int compat;int syslog;int old_nmmonitor;};
struct $A5EA39C0CE70DF2015B585156ECF8E0B {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t object_name;NDR_record_t NDR;vm_address_t address;vm_size_t size;mach_msg_type_number_t infoCnt;int info[10];};
enum $A6805870A19637E169CA9D300BA1FBE4 {PAM_SERVICE = 0x1,PAM_USER = 0x2,PAM_TTY = 0x3,PAM_RHOST = 0x4,PAM_CONV = 0x5,PAM_AUTHTOK = 0x6,PAM_OLDAUTHTOK = 0x7,PAM_RUSER = 0x8,PAM_USER_PROMPT = 0x9,PAM_REPOSITORY = 0xA,PAM_AUTHTOK_PROMPT = 0xB,PAM_OLDAUTHTOK_PROMPT = 0xC,PAM_NUM_ITEMS = 0xD,};
struct $A737AF5627966EA5E9B02401BF60C18A {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t target_task;mach_msg_port_descriptor_t host;NDR_record_t NDR;security_token_t sec_token;audit_token_t audit_token;};
struct $A76923D44FC3AA9C7AC0A016BD3320E6 {unsigned __int16 __control;unsigned __int16 __status;unsigned int __mxcsr;char __reserved[8];};
struct $A8165CB9074F0252F5387BFE013515BC {mach_msg_header_t Head;NDR_record_t NDR;task_flavor_t flavor;mach_msg_type_number_t task_info_outCnt;};
enum $A825878F958596565FEE8860DE052352 {TidyKeepFirst = 0x0,TidyKeepLast = 0x1,};
enum $A86837AB56EC532038D4CEC80449646F {XML_SCHEMATRON_OUT_QUIET = 0x1,XML_SCHEMATRON_OUT_TEXT = 0x2,XML_SCHEMATRON_OUT_XML = 0x4,XML_SCHEMATRON_OUT_ERROR = 0x8,XML_SCHEMATRON_OUT_FILE = 0x100,XML_SCHEMATRON_OUT_BUFFER = 0x200,XML_SCHEMATRON_OUT_IO = 0x400,};
enum $AA7AC226BF5649CDC6E12A1616281D14 {CURLPROXY_HTTP = 0x0,CURLPROXY_HTTP_1_0 = 0x1,CURLPROXY_SOCKS4 = 0x4,CURLPROXY_SOCKS5 = 0x5,CURLPROXY_SOCKS4A = 0x6,CURLPROXY_SOCKS5_HOSTNAME = 0x7,};
struct $AAF01D1DF014C088EF592F6E4410D618 {mach_msg_header_t not_header;mach_msg_format_0_trailer_t trailer;};
enum $AAF7D8B1D740C4801D49F07692D1E0A1 {SQL_IS_YEAR = 0x1,SQL_IS_MONTH = 0x2,SQL_IS_DAY = 0x3,SQL_IS_HOUR = 0x4,SQL_IS_MINUTE = 0x5,SQL_IS_SECOND = 0x6,SQL_IS_YEAR_TO_MONTH = 0x7,SQL_IS_DAY_TO_HOUR = 0x8,SQL_IS_DAY_TO_MINUTE = 0x9,SQL_IS_DAY_TO_SECOND = 0xA,SQL_IS_HOUR_TO_MINUTE = 0xB,SQL_IS_HOUR_TO_SECOND = 0xC,SQL_IS_MINUTE_TO_SECOND = 0xD,};
struct $AB09096FC22418DF5FF078E5EEC0B812 {mach_msg_header_t Head;NDR_record_t NDR;vm_address_t address;vm_size_t size;int flags;};
struct $AB89E1C42AC04654AD793083A62D1A9F {mach_msg_header_t Head;NDR_record_t NDR;vm_address_t info;};
struct $AC1F0727205AA235F31FA7E4FBAB6931 {__int64 quot;__int64 rem;};
struct $ACB9639845DE66FD3FA84A89BA11A6C6 {mach_msg_header_t Head;NDR_record_t NDR;thread_flavor_t flavor;mach_msg_type_number_t thread_info_outCnt;};
enum $ACDB03B0D9D598C0F761C4B16B3D1CB5 {kHFSMaxVolumeNameChars = 0x1B,kHFSMaxFileNameChars = 0x1F,kHFSPlusMaxFileNameChars = 0xFF,};
struct $AE11D0CF51A850EC87EAB95E067600DD {u_int16_t magic;u_int32_t count;};
struct $AF39247D48CF164753A445931539035C {__int16 id;int x;int y;int z;mmask_t bstate;};
struct $AF6F394DED458EEBDAD15880C92DFAA7 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t data;NDR_record_t NDR;kmod_t module;kmod_control_flavor_t flavor;mach_msg_type_number_t dataCnt;};
struct $AFE166C1B1045E0C8B7F866BEC963EDA {mach_msg_header_t Head;NDR_record_t NDR;exception_mask_t exception_mask;};
struct $B0130559E5806B7D1758D14999BC33AE {mach_msg_header_t Head;NDR_record_t NDR;vm_address_t address;vm_size_t size;vm_address_t data;};
struct $B01B4E9250F885241409748218B2C105 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t pages;NDR_record_t NDR;mach_msg_type_number_t pagesCnt;};
struct $B0A4D3FCA1AE58C86963BEC154F83A57 {int print_level;int ipc_in;int ipc_out;int tracing;int vmtp;int netname;int deltat;int tcp;int mem;};
enum $B1615B6EE754A1E9BE91669222F3B978 {XML_PARSE_RECOVER = 0x1,XML_PARSE_NOENT = 0x2,XML_PARSE_DTDLOAD = 0x4,XML_PARSE_DTDATTR = 0x8,XML_PARSE_DTDVALID = 0x10,XML_PARSE_NOERROR = 0x20,XML_PARSE_NOWARNING = 0x40,XML_PARSE_PEDANTIC = 0x80,XML_PARSE_NOBLANKS = 0x100,XML_PARSE_SAX1 = 0x200,XML_PARSE_XINCLUDE = 0x400,XML_PARSE_NONET = 0x800,XML_PARSE_NODICT = 0x1000,XML_PARSE_NSCLEAN = 0x2000,XML_PARSE_NOCDATA = 0x4000,XML_PARSE_NOXINCNODE = 0x8000,XML_PARSE_COMPACT = 0x10000,XML_PARSE_OLD10 = 0x20000,XML_PARSE_NOBASEFIX = 0x40000,XML_PARSE_HUGE = 0x80000,XML_PARSE_OLDSAX = 0x100000,};
struct $B1FA16DA0CC571429FF694D2198EB26D {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_ports_descriptor_t processor_sets;NDR_record_t NDR;mach_msg_type_number_t processor_setsCnt;};
enum $B2A44DC877B17F2021CE46A73658A10E {DB_BTREE = 0x0,DB_HASH = 0x1,DB_RECNO = 0x2,};
struct $B32155DE37EA00CA7D015F061033D0DB {uint8_t version;uint8_t size;uint8_t horizontal_precision;uint8_t vertical_precision;uint32_t latitude;uint32_t longitude;uint32_t altitude;};
struct $B3220D9486325F8BA63885498B936915 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t names;mach_msg_ool_descriptor_t info;NDR_record_t NDR;mach_msg_type_number_t namesCnt;mach_msg_type_number_t infoCnt;};
struct $B346CF55E253733CEEA9A9F57C8BD312 {mach_msg_header_t Head;NDR_record_t NDR;mach_port_name_t name;mach_port_right_t right;};
struct $B422E43E2D6C3DFAD9728BE968F369BB {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t lockgroup_info;NDR_record_t NDR;mach_msg_type_number_t lockgroup_infoCnt;};
enum $B51368E841E12F171B8C755FA056AF73 {CURL_HTTP_VERSION_NONE = 0x0,CURL_HTTP_VERSION_1_0 = 0x1,CURL_HTTP_VERSION_1_1 = 0x2,CURL_HTTP_VERSION_LAST = 0x3,};
enum $B51E1DCDB81FA1FB4EE66033B9782554 {BLOCK_ALL_COPY_DISPOSE_FLAGS = 0x9F,};
struct $B58E161BB725F9F52DF6F7C15EFA30EA {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;unsigned int dnr_total;unsigned int dnr_used;};
struct $B609C4CC44C72843B520E4D8871C3E06 {mach_msg_header_t Head;NDR_record_t NDR;int table_entries;};
struct $B6133C04D7E68696884D0F2477EC89D3 {mach_msg_header_t Head;NDR_record_t NDR;int policy;boolean_t change_threads;};
struct $B74BBF4C1467FECDB27E8CB1AA37D794 {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;vm_machine_attribute_val_t value;};
struct $B84095E180EBE617859A8545EC2805FC {mach_msg_header_t Head;NDR_record_t NDR;mach_port_name_t name;mach_port_mscount_t mscount;};
struct $B8642CD798FE16F406A454FEEE53FFC8 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t parent_entry;NDR_record_t NDR;memory_object_size_t size;memory_object_offset_t offset;vm_prot_t permission;};
struct $B8B9B85B971E3DBFC31707A9282CDA9E {unsigned __int8 mig_vers;unsigned __int8 if_vers;unsigned __int8 reserved1;unsigned __int8 mig_encoding;unsigned __int8 int_rep;unsigned __int8 char_rep;unsigned __int8 float_rep;unsigned __int8 reserved2;};
enum $B8C02EDA4356AFEB3B864A542494BAF4 {TidyDoctypeOmit = 0x0,TidyDoctypeAuto = 0x1,TidyDoctypeStrict = 0x2,TidyDoctypeLoose = 0x3,TidyDoctypeUser = 0x4,};
enum $B9B833D4AB600AEF2FFBDAC6174DED45 {BLOCK_BYREF_LAYOUT_MASK = 0xF0000000,BLOCK_BYREF_LAYOUT_EXTENDED = 0x10000000,BLOCK_BYREF_LAYOUT_NON_OBJECT = 0x20000000,BLOCK_BYREF_LAYOUT_STRONG = 0x30000000,BLOCK_BYREF_LAYOUT_WEAK = 0x40000000,BLOCK_BYREF_LAYOUT_UNRETAINED = 0x50000000,BLOCK_BYREF_IS_GC = 0x8000000,BLOCK_BYREF_HAS_COPY_DISPOSE = 0x2000000,BLOCK_BYREF_NEEDS_FREE = 0x1000000,};
struct $B9D89F8ED69AD657CF8CCF6FD4EA24D0 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t default_manager;};
struct $BA1BAA97A85BF93D870BFCA3692BE7F3 {mach_msg_trailer_type_t msgh_trailer_type;mach_msg_trailer_size_t msgh_trailer_size;mach_port_seqno_t msgh_seqno;security_token_t msgh_sender;audit_token_t msgh_audit;mach_vm_address_t msgh_context;};
struct $BAA0E1D2BF5986DFAC16C10809EF9355 {mach_port_t name;mach_msg_size_t pad1;unsigned __int32 pad2 : 16;unsigned __int32 disposition : 8;unsigned __int32 type : 8;};
struct $BAC2AEB1FCD724D135CC335E00067868 {u_int16_t len;char *path;};
enum $BB2ABB128CDE206EF4F40C2E0E9F7E66 {PAM_PROMPT_ECHO_OFF = 0x1,PAM_PROMPT_ECHO_ON = 0x2,PAM_ERROR_MSG = 0x3,PAM_TEXT_INFO = 0x4,PAM_MAX_NUM_MSG = 0x20,PAM_MAX_MSG_SIZE = 0x200,PAM_MAX_RESP_SIZE = 0x200,};
enum $BB5A96A2CE5D6B27726B421C0566B799 {kHFSFileLockedBit = 0x0,kHFSFileLockedMask = 0x1,kHFSThreadExistsBit = 0x1,kHFSThreadExistsMask = 0x2,kHFSHasAttributesBit = 0x2,kHFSHasAttributesMask = 0x4,kHFSHasSecurityBit = 0x3,kHFSHasSecurityMask = 0x8,kHFSHasFolderCountBit = 0x4,kHFSHasFolderCountMask = 0x10,kHFSHasLinkChainBit = 0x5,kHFSHasLinkChainMask = 0x20,kHFSHasChildLinkBit = 0x6,kHFSHasChildLinkMask = 0x40,kHFSHasDateAddedBit = 0x7,kHFSHasDateAddedMask = 0x80,};
struct $BBF0DF368E56DACC45223BCB3DEA73E4 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_ports_descriptor_t ledgers;NDR_record_t NDR;mach_msg_type_number_t ledgersCnt;boolean_t inherit_memory;};
struct __attribute__((aligned(16))) $BC1F9A8A398E4973C30CEFF05D86C139 {void *opaque1;void *opaque2;int opaque3;};
struct $BC7B37D8A6A0C0969EA99CA1E99D995C {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t object_name;NDR_record_t NDR;mach_vm_address_t address;mach_vm_size_t size;mach_msg_type_number_t infoCnt;int info[10];};
struct $BD234ABF5512865B2381E7712BF88565 {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_msg_type_number_t thread_info_outCnt;integer_t thread_info_out[12];};
struct $BD619B2F7AFF7BA6F06506AA27210664 {regoff_t rm_so;regoff_t rm_eo;};
struct $BF6258091C70028000D911F61A5FB5AF {struct _ftsent *fts_cur;struct _ftsent *fts_child;struct _ftsent **fts_array;dev_t fts_dev;char *fts_path;int fts_rfd;int fts_pathlen;int fts_nitems;union {int (__cdecl *fts_compar)();void *fts_compar_b;};int fts_options;};
union $BF6258091C70028000D911F61A5FB5AF::$9EC190D15BEE7EEEBABA7EFAD959CEE4 {int (__cdecl *fts_compar)();void *fts_compar_b;};
struct $C12C9BDFE67D223D1BA5D023CABB3CBD {uint16_t priority;uint16_t weight;uint16_t port;char *target;};
struct $C14D86D16E65DCD7FF19482AD8623ED6 {mach_msg_header_t Head;};
struct $C2CBDBAA53DBE4CD2BF833027FA299D5 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t default_manager;NDR_record_t NDR;memory_object_cluster_size_t cluster_size;};
enum $C2D4DC0A39BA1BADB043EDCBF23CFD90 {CURLSOCKTYPE_IPCXN = 0x0,CURLSOCKTYPE_LAST = 0x1,};
enum $C2DD888A95F2B46A37DA27F4E6CDD186 {kJIJournalInFSMask = 0x1,kJIJournalOnOtherDeviceMask = 0x2,kJIJournalNeedInitMask = 0x4,};
struct $C2E0EF1D854A0208E5318AF4389F85C9 {u_int8_t sid_kind;u_int8_t sid_authcount;u_int8_t sid_authority[6];u_int32_t sid_authorities[16];};
struct $C32751CD7C48DEB510AF18CB8191FD58 {u_int32_t mode;u_int32_t uid;u_int32_t gid;u_int32_t fsid;u_int64_t nid;u_int32_t dev;};
enum $C3D2D4EDCF7C6B2D868D1D9CA16C55C6 {dot3ChipSetWesternDigital83C690 = 0x1,dot3ChipSetWesternDigital83C790 = 0x2,};
enum $C4E230AE075788E5E60A8962A8E4C159 {LT_ERROR_UNKNOWN = 0x0,LT_ERROR_DLOPEN_NOT_SUPPORTED = 0x1,LT_ERROR_INVALID_LOADER = 0x2,LT_ERROR_INIT_LOADER = 0x3,LT_ERROR_REMOVE_LOADER = 0x4,LT_ERROR_FILE_NOT_FOUND = 0x5,LT_ERROR_DEPLIB_NOT_FOUND = 0x6,LT_ERROR_NO_SYMBOLS = 0x7,LT_ERROR_CANNOT_OPEN = 0x8,LT_ERROR_CANNOT_CLOSE = 0x9,LT_ERROR_SYMBOL_NOT_FOUND = 0xA,LT_ERROR_NO_MEMORY = 0xB,LT_ERROR_INVALID_HANDLE = 0xC,LT_ERROR_BUFFER_OVERFLOW = 0xD,LT_ERROR_INVALID_ERRORCODE = 0xE,LT_ERROR_SHUTDOWN = 0xF,LT_ERROR_CLOSE_RESIDENT_MODULE = 0x10,LT_ERROR_INVALID_MUTEX_ARGS = 0x11,LT_ERROR_INVALID_POSITION = 0x12,LT_ERROR_CONFLICTING_FLAGS = 0x13,LT_ERROR_MAX = 0x14,};
enum $C5101608B88D7C11ADC8E88E540FCD76 {XML_ELEMENT_NODE = 0x1,XML_ATTRIBUTE_NODE = 0x2,XML_TEXT_NODE = 0x3,XML_CDATA_SECTION_NODE = 0x4,XML_ENTITY_REF_NODE = 0x5,XML_ENTITY_NODE = 0x6,XML_PI_NODE = 0x7,XML_COMMENT_NODE = 0x8,XML_DOCUMENT_NODE = 0x9,XML_DOCUMENT_TYPE_NODE = 0xA,XML_DOCUMENT_FRAG_NODE = 0xB,XML_NOTATION_NODE = 0xC,XML_HTML_DOCUMENT_NODE = 0xD,XML_DTD_NODE = 0xE,XML_ELEMENT_DECL = 0xF,XML_ATTRIBUTE_DECL = 0x10,XML_ENTITY_DECL = 0x11,XML_NAMESPACE_DECL = 0x12,XML_XINCLUDE_START = 0x13,XML_XINCLUDE_END = 0x14,XML_DOCB_DOCUMENT_NODE = 0x15,};
struct $C6E5E20E9CA57385FADCC3EC88B8E8F5 {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;kmod_t module;};
struct $C73F2DA5D1FAD09FF5C310E32862AC76 {mach_msg_header_t Head;NDR_record_t NDR;mach_vm_address_t address;mach_vm_size_t size;};
struct $C9793B2A88A40550F3E6FCBE57C78800 {u_int sprayarr_len;char *sprayarr_val;};
struct $CAE54129DDC456E19A5898FF69B86D62 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t ledger_ledger;NDR_record_t NDR;ledger_item_t transfer;};
struct $CC043B3A15E15755209E3A20F84F16AB {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t new_set;mach_msg_port_descriptor_t new_name;};
struct $CC76991D9F83D1A958E6E229A0D1EA8D {mach_msg_header_t Head;NDR_record_t NDR;mach_vm_address_t address;vm_purgable_t control;int state;};
struct $CCB3EA4D4E2EB1F9AAB4C1A3C0D4C77E {__int64 np_uid_high;__int64 np_uid_low;};
struct $CD5F4FFB48357709D2974D1687603B86 {u_int32_t type;u_int32_t addr[4];};
struct $CD97E842BE97226AEDD8FA0499E21FED {mach_msg_header_t Head;NDR_record_t NDR;vm_address_t routine_entry_pt;int routine_number;};
struct $CDC8267DE048B2F631A00EEC2191AA35 {mach_msg_header_t Head;NDR_record_t NDR;vm_read_entry_t data_list;natural_t count;};
struct $CEE03D2EA6896FBF3749E2AC26AFF34E {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;unsigned int object_type;unsigned int object_addr;};
enum $CF0840319031D014E124B84294A5BA84 {UNW_X86_EAX = 0x0,UNW_X86_ECX = 0x1,UNW_X86_EDX = 0x2,UNW_X86_EBX = 0x3,UNW_X86_EBP = 0x4,UNW_X86_ESP = 0x5,UNW_X86_ESI = 0x6,UNW_X86_EDI = 0x7,};
struct $D01A4AC644F6B88C742A307AE9CB3F5A {mach_msg_header_t Head;NDR_record_t NDR;thread_state_flavor_t flavor;mach_msg_type_number_t new_stateCnt;natural_t new_state[144];};
enum $D034DF41D4B9D2189D2EB2EA4C611CD6 {dot3ChipSetDigitalDC21040 = 0x1,dot3ChipSetDigitalDC21140 = 0x2,dot3ChipSetDigitalDC21041 = 0x3,dot3ChipSetDigitalDC21140A = 0x4,dot3ChipSetDigitalDC21142 = 0x5,};
struct $D09842556D06A2DF198ED28371C9FC24 {mach_msg_header_t Head;NDR_record_t NDR;mach_port_name_t name;mach_port_flavor_t flavor;mach_msg_type_number_t port_infoCnt;integer_t port_info[10];};
struct $D0AB9F48B0077248C9C221F011C15B93 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_ports_descriptor_t act_list;NDR_record_t NDR;mach_msg_type_number_t act_listCnt;};
struct $D0C9668C16251A7C1942AA04B3C1BAAB {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t port_id;};
struct $D0D70EDABC5C86492745B3F9A6B48782 {uint16_t xid;uint16_t flags;uint16_t qdcount;uint16_t ancount;uint16_t nscount;uint16_t arcount;};
struct $D27F585C89C5E008406F3E8E8B85AF03 {u_int16_t port;};
enum $D3B97490B7B9C86B943C2E39D5FA02F9 {CURLFTP_CREATE_DIR_NONE = 0x0,CURLFTP_CREATE_DIR = 0x1,CURLFTP_CREATE_DIR_RETRY = 0x2,CURLFTP_CREATE_DIR_LAST = 0x3,};
enum $D3CAE1E2FD75A1BAED0D73857BABBB1F {XML_PARSE_UNKNOWN = 0x0,XML_PARSE_DOM = 0x1,XML_PARSE_SAX = 0x2,XML_PARSE_PUSH_DOM = 0x3,XML_PARSE_PUSH_SAX = 0x4,XML_PARSE_READER = 0x5,};
struct $D4151FDBB8529D6CBB93F4DEF633B437 {u_int16_t family;u_int16_t port;u_int32_t addr;};
enum $D46AA9DF6FBFE9D2B16063CE8CC3B5EF {XML_INTERNAL_GENERAL_ENTITY = 0x1,XML_EXTERNAL_GENERAL_PARSED_ENTITY = 0x2,XML_EXTERNAL_GENERAL_UNPARSED_ENTITY = 0x3,XML_INTERNAL_PARAMETER_ENTITY = 0x4,XML_EXTERNAL_PARAMETER_ENTITY = 0x5,XML_INTERNAL_PREDEFINED_ENTITY = 0x6,};
struct $D48A1587B9C67DDCC12D42BCFEC74299 {mach_msg_header_t Head;NDR_record_t NDR;kmod_t module;};
enum $D4934026ABEEF2822D8F739CC8F783CF {FILESEC_OWNER = 0x1,FILESEC_GROUP = 0x2,FILESEC_UUID = 0x3,FILESEC_MODE = 0x4,FILESEC_ACL = 0x5,FILESEC_GRPUUID = 0x6,FILESEC_ACL_RAW = 0x64,FILESEC_ACL_ALLOCSIZE = 0x65,};
enum $D4C59E39AC5981A3A29A91ECFFFB3F03 {XML_BUFFER_ALLOC_DOUBLEIT = 0x0,XML_BUFFER_ALLOC_EXACT = 0x1,XML_BUFFER_ALLOC_IMMUTABLE = 0x2,XML_BUFFER_ALLOC_IO = 0x3,};
struct $D58DA1E1B485B25D38C6421E4BA839DC {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t object;NDR_record_t NDR;mach_vm_address_t address;mach_vm_size_t size;mach_vm_offset_t mask;int flags;memory_object_offset_t offset;boolean_t copy;vm_prot_t cur_protection;vm_prot_t max_protection;vm_inherit_t inheritance;};
struct $D5C5C0A4FB77109A22B40E51950751DD {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t special_port;NDR_record_t NDR;int which_port;};
struct $D5D5FAADE45C3E62C0E3AA0EFAA1D8B2 {int references;struct CRYPTO_dynlock_value *data;};
struct $D6100D925DD907377B334267ECE33E6F {u_int32_t status;u_int32_t ret;};
struct $D66CE1D14E0A9D84788C1B396D687289 {u_int16_t type;u_int16_t l_port;u_int32_t l_addr;u_int16_t r_port;u_int32_t r_addr;};
struct $D6880A8626DE4DB5DA08690FFF5A7EE0 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t notify_port;NDR_record_t NDR;host_flavor_t notify_type;};
struct $D81AFE54BC1383739B7B7705B8C42C3D {mach_msg_header_t Head;NDR_record_t NDR;int policy;};
struct $D896310976FBD32B984A6ABA327F9588 {u_int16_t family;u_int16_t port;u_int32_t addr[4];};
struct $D9B0ADBD00F5F5522FB9AC300CCD391E {mach_msg_header_t Head;NDR_record_t NDR;processor_set_flavor_t flavor;mach_msg_type_number_t policy_infoCnt;integer_t policy_info[5];boolean_t change;};
struct $DA3EF9D89B837FDE93915298E895B43B {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t child_task;};
enum $DAE851F8676BA49E7F1B3A48D3E2CAFA {NSLinkEditFileAccessError = 0x0,NSLinkEditFileFormatError = 0x1,NSLinkEditMachResourceError = 0x2,NSLinkEditUnixResourceError = 0x3,NSLinkEditOtherError = 0x4,NSLinkEditWarningError = 0x5,NSLinkEditMultiplyDefinedError = 0x6,NSLinkEditUndefinedError = 0x7,};
struct $DAECF1BBBEC63DCCC1C5BA594BE2FE4F {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t objects;NDR_record_t NDR;vm_info_region_64_t region;mach_msg_type_number_t objectsCnt;};
struct $DAF19F87D18289B2FEB9E5CF85C90F9A {mach_msg_header_t Head;NDR_record_t NDR;vm_address_t address;vm_size_t size;boolean_t set_maximum;vm_prot_t new_protection;};
union $DB0CF6B582A763FBC7ADB1435806EA74 {struct dispatch_object_s *_do;struct dispatch_continuation_s *_dc;struct dispatch_queue_s *_dq;struct dispatch_queue_attr_s *_dqa;struct dispatch_group_s *_dg;struct dispatch_source_s *__ds;struct dispatch_source_attr_s *_dsa;struct dispatch_semaphore_s *_dsema;struct dispatch_data_s *_ddata;struct dispatch_io_s *_dchannel;struct dispatch_operation_s *_doperation;struct dispatch_disk_s *_ddisk;};
struct $DB68657B2CF3361C93E3D336E930DDB3 {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_msg_type_number_t versionOffset;mach_msg_type_number_t versionCnt;char version[80];};
struct $DB9FAB3DF43BC43027D23EAB111F29D9 {struct in6_addr addr;};
struct $DBA30DED97FFFF6D93797DB9E5CF4F43 {mach_msg_header_t Head;NDR_record_t NDR;int node;int which;};
struct $DC9D1599BB1638520AEEC910A299EC32 {char __name[14];__uint32_t __mask;};
struct $DCAF10FDD4D6724B522470D0830DC7B5 {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_vm_read_entry_t data_list;};
struct $DD7F30A52BF20C3BD0A18D92A677C06B {int nid;const char *comment;};
enum $DD8E034716BD0047246A4D50EFF6F7DB {XML_PARSER_LOADDTD = 0x1,XML_PARSER_DEFAULTATTRS = 0x2,XML_PARSER_VALIDATE = 0x3,XML_PARSER_SUBST_ENTITIES = 0x4,};
enum $DE06055EB230CD568A22B7F3A8A630B2 {kHFSMaxAttrNameLen = 0x7F,};
enum $DE419B5C0B7C486303E1E193CE859546 {XML_PARSER_SEVERITY_VALIDITY_WARNING = 0x1,XML_PARSER_SEVERITY_VALIDITY_ERROR = 0x2,XML_PARSER_SEVERITY_WARNING = 0x3,XML_PARSER_SEVERITY_ERROR = 0x4,};
enum $DF051F384C7337C7B173CB8C15D72E06 {kSymLinkFileType = 0x736C6E6B,kSymLinkCreator = 0x72686170,};
struct $DF1D91DCAB84234D18917BEB10ABC3BE {char *isdn_address;char *subaddress;};
enum $DF9762E172B78CD0B567A8F57D5EE1A7 {CURLSHE_OK = 0x0,CURLSHE_BAD_OPTION = 0x1,CURLSHE_IN_USE = 0x2,CURLSHE_INVALID = 0x3,CURLSHE_NOMEM = 0x4,CURLSHE_LAST = 0x5,};
struct $E0DB54FB1236B40874C7451A4BD28FF5 {mach_msg_trailer_type_t msgh_trailer_type;mach_msg_trailer_size_t msgh_trailer_size;mach_port_seqno_t msgh_seqno;};
struct $E1260AB78985DBC228459590506E4C92 {size_t we_wordc;char **we_wordv;size_t we_offs;};
enum $E1FDD4ACF09F0C0D97484FB628F6E577 {XML_ELEMENT_TYPE_UNDEFINED = 0x0,XML_ELEMENT_TYPE_EMPTY = 0x1,XML_ELEMENT_TYPE_ANY = 0x2,XML_ELEMENT_TYPE_MIXED = 0x3,XML_ELEMENT_TYPE_ELEMENT = 0x4,};
struct $E24E91FD65EFF0F160CA6C71162442DA {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t object;NDR_record_t NDR;vm_address_t address;vm_size_t size;vm_address_t mask;int flags;memory_object_offset_t offset;boolean_t copy;vm_prot_t cur_protection;vm_prot_t max_protection;vm_inherit_t inheritance;};
struct $E31153E692B38AE6ABEA73E583DCB3CE {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t src_task;NDR_record_t NDR;mach_vm_address_t target_address;mach_vm_size_t size;mach_vm_offset_t mask;int flags;mach_vm_address_t src_address;boolean_t copy;vm_inherit_t inheritance;};
struct $E3188AF9666AE21995C94F310B376FC6 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t poly;NDR_record_t NDR;mach_port_name_t name;};
enum $E50CF21A375752F45409DA036BA9C4BA {CURLMSG_NONE = 0x0,CURLMSG_DONE = 0x1,CURLMSG_LAST = 0x2,};
enum $E52E208B92D65F4D665A1F0C1924EDE5 {XML_PATTERN_DEFAULT = 0x0,XML_PATTERN_XPATH = 0x1,XML_PATTERN_XSSEL = 0x2,XML_PATTERN_XSFIELD = 0x4,};
enum $E5E7377D643AA4CAF5C6CDE0D2F168BF {XML_CHAR_ENCODING_ERROR = 0xFFFFFFFF,XML_CHAR_ENCODING_NONE = 0x0,XML_CHAR_ENCODING_UTF8 = 0x1,XML_CHAR_ENCODING_UTF16LE = 0x2,XML_CHAR_ENCODING_UTF16BE = 0x3,XML_CHAR_ENCODING_UCS4LE = 0x4,XML_CHAR_ENCODING_UCS4BE = 0x5,XML_CHAR_ENCODING_EBCDIC = 0x6,XML_CHAR_ENCODING_UCS4_2143 = 0x7,XML_CHAR_ENCODING_UCS4_3412 = 0x8,XML_CHAR_ENCODING_UCS2 = 0x9,XML_CHAR_ENCODING_8859_1 = 0xA,XML_CHAR_ENCODING_8859_2 = 0xB,XML_CHAR_ENCODING_8859_3 = 0xC,XML_CHAR_ENCODING_8859_4 = 0xD,XML_CHAR_ENCODING_8859_5 = 0xE,XML_CHAR_ENCODING_8859_6 = 0xF,XML_CHAR_ENCODING_8859_7 = 0x10,XML_CHAR_ENCODING_8859_8 = 0x11,XML_CHAR_ENCODING_8859_9 = 0x12,XML_CHAR_ENCODING_2022_JP = 0x13,XML_CHAR_ENCODING_SHIFT_JIS = 0x14,XML_CHAR_ENCODING_EUC_JP = 0x15,XML_CHAR_ENCODING_ASCII = 0x16,};
enum $E61B72B2528436688BBD75516B993DD2 {MIME_MAGIC_NOP = 0x0,MIME_MAGIC_AND = 0x1,MIME_MAGIC_OR = 0x2,MIME_MAGIC_MATCH = 0x3,MIME_MAGIC_ASCII = 0x4,MIME_MAGIC_PRINTABLE = 0x5,MIME_MAGIC_STRING = 0x6,MIME_MAGIC_CHAR = 0x7,MIME_MAGIC_SHORT = 0x8,MIME_MAGIC_INT = 0x9,MIME_MAGIC_LOCALE = 0xA,MIME_MAGIC_CONTAINS = 0xB,MIME_MAGIC_ISTRING = 0xC,};
struct $E65ABC06A11602FED23D2457B8AEAC9D {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t special_port;};
struct $E6DD5EF71C59CDBBC01C1CDDA746F1DC {mach_msg_header_t Head;NDR_record_t NDR;mach_vm_address_t address;vm_page_info_flavor_t flavor;mach_msg_type_number_t infoCnt;};
enum $E720E7619019B10D7DF6FB85013EE738 {XML_CATA_ALLOW_NONE = 0x0,XML_CATA_ALLOW_GLOBAL = 0x1,XML_CATA_ALLOW_DOCUMENT = 0x2,XML_CATA_ALLOW_ALL = 0x3,};
enum $E86A9D4BDF47B8ECB447213BB5AF724B {TidyMarkup = 0x0,TidyDiagnostics = 0x1,TidyPrettyPrint = 0x2,TidyEncoding = 0x3,TidyMiscellaneous = 0x4,};
struct $E97267E034E71568AADDE042A76192B8 {mach_msg_size_t msgh_descriptor_count;};
struct $E9BF538EED9B46D5473DA4650D70F75C {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t table_info;mach_msg_ool_descriptor_t tree_info;NDR_record_t NDR;ipc_info_space_t space_info;mach_msg_type_number_t table_infoCnt;mach_msg_type_number_t tree_infoCnt;};
enum $E9C6ABAFEE51821EC034C6B74D5B344E {kDNSServiceDiscoveryNoFlags = 0x0,kDNSServiceDiscoveryMoreRepliesImmediately = 0x1,};
enum $E9DBAC0AE96102AB36550954105F0957 {LT_DLLOADER_PREPEND = 0x0,LT_DLLOADER_APPEND = 0x1,};
struct $EA7534D780195B9F22D1174E6CA3EFC2 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t poly;};
struct $EB461EAC719110594EB746F8AD525682 {struct in_addr addr;uint8_t protocol;uint32_t maplength;uint8_t *map;};
enum $EB4F25A3AB2B34DE382859FFD4ADE17B {DNSServiceDomainEnumerationReplyAddDomain = 0x0,DNSServiceDomainEnumerationReplyAddDomainDefault = 0x1,DNSServiceDomainEnumerationReplyRemoveDomain = 0x2,};
struct $EB59F425BEB47ECBA8886A98C22ABD7D {char *cpu;char *os;};
struct $EBC9A6B10C6BC0782A5CEC3196C31D82 {mach_msg_header_t Head;NDR_record_t NDR;mach_vm_address_t address;vm_region_flavor_t flavor;mach_msg_type_number_t infoCnt;};
struct $EC3D8C1D47CD577132BD4EE7AFBF4E05 {mach_msg_header_t Head;NDR_record_t NDR;mach_vm_address_t source_address;mach_vm_size_t size;mach_vm_address_t dest_address;};
struct $EC40C8956DA7A36243DBF2EA18E7021D {u_int32_t size;u_char version;u_int16_t e_type;u_int16_t e_mod;u_int32_t ad_type;u_int32_t addr[4];u_int32_t s;u_int32_t ms;};
struct $EC7035EF31280ED06745154F47D7D805 {u_char err;u_int64_t val;};
struct $EC96C272326DB5C337E3479E74002932 {char *section;char *name;char *value;};
struct $ECBF3EDE173DC336165517660AF0126F {mach_msg_header_t Head;NDR_record_t NDR;mach_vm_address_t address;mach_vm_size_t size;vm_behavior_t new_behavior;};
enum $EDBA1914F16BC538415B0E0A3A3FD3BB {FIND = 0x0,ENTER = 0x1,};
enum $EE25B450600DB130E77B21E804467FD5 {XLINK_SHOW_NONE = 0x0,XLINK_SHOW_NEW = 0x1,XLINK_SHOW_EMBED = 0x2,XLINK_SHOW_REPLACE = 0x3,};
struct $EE99DDBDD6523B38A4B5202F2305E34F {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t object_handle;NDR_record_t NDR;memory_object_size_t size;};
struct $EF3ED49D3DFE8EEF757C9F0AD64865F5 {CURLversion age;const char *version;unsigned int version_num;const char *host;int features;const char *ssl_version;__int64 ssl_version_num;const char *libz_version;const char *const *protocols;const char *ares;int ares_num;const char *libidn;int iconv_ver_num;const char *libssh_version;};
enum $F022A16E3DDDADD4F8D0A3446DF412CC {HTML_NA = 0x0,HTML_INVALID = 0x1,HTML_DEPRECATED = 0x2,HTML_VALID = 0x4,HTML_REQUIRED = 0xC,};
struct $F105F10DE5C66ECF2E7E726999936688 {mach_msg_trailer_type_t msgh_trailer_type;mach_msg_trailer_size_t msgh_trailer_size;};
struct $F11203120C87D682B8E6D27123FE2347 {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;vm_address_t address;};
struct $F1773A35038DB66F062B2D1DBF85E45A {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_port_rights_t srights;};
struct $F1A44C946A11C4E88A7FB24B2ED8014B {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t port;NDR_record_t NDR;int which;};
enum $F1A50F71D77F5C0A44F94F2AEF75FF0E {XSLT_DEBUG_NONE = 0x0,XSLT_DEBUG_INIT = 0x1,XSLT_DEBUG_STEP = 0x2,XSLT_DEBUG_STEPOUT = 0x3,XSLT_DEBUG_NEXT = 0x4,XSLT_DEBUG_STOP = 0x5,XSLT_DEBUG_CONT = 0x6,XSLT_DEBUG_RUN = 0x7,XSLT_DEBUG_RUN_RESTART = 0x8,XSLT_DEBUG_QUIT = 0x9,};
struct $F1B3AE218D4ECD7C43A384264AB43EE3 {mach_msg_header_t Head;NDR_record_t NDR;boolean_t trace_status;};
struct $F1BB640A69E4C9C26809E32C99FD444E {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;int flavor;mach_msg_type_number_t new_stateCnt;natural_t new_state[144];};
enum $F236BFF0AA67B00384F80E74B2E93967 {POINT_CONVERSION_COMPRESSED = 0x2,POINT_CONVERSION_UNCOMPRESSED = 0x4,POINT_CONVERSION_HYBRID = 0x6,};
struct $F26177398F3106F2DD5FF971AA6CC145 {char *name;};
union $F2859707886ADAFD301FD24E7C665704 {ffi_sarg sint;ffi_arg uint;float flt;char data[8];void *ptr;};
struct $F30BA47F3A86B79CC42843AD52D50564 {int __nranges;_RuneEntry *__ranges;};
enum $F332E1DED775B0D62777DB33DD18F524 {ACL_UNDEFINED_TAG = 0x0,ACL_EXTENDED_ALLOW = 0x1,ACL_EXTENDED_DENY = 0x2,};
enum $F37E133A365EB9F6FA66643137085251 {kHFSExtentDensity = 0x3,kHFSPlusExtentDensity = 0x8,};
struct $F38A67955B73283DD9B66EE2B15E7106 {mach_msg_header_t Head;NDR_record_t NDR;mach_vm_address_t address;natural_t nesting_depth;mach_msg_type_number_t infoCnt;};
struct $F3A38383CE2E0DAC4148785558BAB876 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t object;NDR_record_t NDR;vm_address_t address;vm_size_t size;vm_address_t mask;int flags;vm_offset_t offset;boolean_t copy;vm_prot_t cur_protection;vm_prot_t max_protection;vm_inherit_t inheritance;};
struct $F406E51A63C11217A91340C33516F88C {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t request_data;NDR_record_t NDR;uint32_t user_log_flags;mach_msg_type_number_t request_dataCnt;};
struct $F465ED20B10C6481709BD63930BC6003 {mach_msg_header_t Head;NDR_record_t NDR;mach_vm_read_entry_t data_list;natural_t count;};
struct $F49B3D681D6431C8260F2C014755700B {mach_msg_header_t Head;NDR_record_t NDR;mach_port_right_t right;mach_port_name_t name;};
struct $F4F9A6DCA893D5DB6F32B9C415A8FCA2 {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_msg_type_number_t old_stateCnt;natural_t old_state[144];};
enum $F8685D9A6F07534FD5C3F02CB40ABFB2 {kDNSServiceType_A = 0x1,kDNSServiceType_NS = 0x2,kDNSServiceType_MD = 0x3,kDNSServiceType_MF = 0x4,kDNSServiceType_CNAME = 0x5,kDNSServiceType_SOA = 0x6,kDNSServiceType_MB = 0x7,kDNSServiceType_MG = 0x8,kDNSServiceType_MR = 0x9,kDNSServiceType_NULL = 0xA,kDNSServiceType_WKS = 0xB,kDNSServiceType_PTR = 0xC,kDNSServiceType_HINFO = 0xD,kDNSServiceType_MINFO = 0xE,kDNSServiceType_MX = 0xF,kDNSServiceType_TXT = 0x10,kDNSServiceType_RP = 0x11,kDNSServiceType_AFSDB = 0x12,kDNSServiceType_X25 = 0x13,kDNSServiceType_ISDN = 0x14,kDNSServiceType_RT = 0x15,kDNSServiceType_NSAP = 0x16,kDNSServiceType_NSAP_PTR = 0x17,kDNSServiceType_SIG = 0x18,kDNSServiceType_KEY = 0x19,kDNSServiceType_PX = 0x1A,kDNSServiceType_GPOS = 0x1B,kDNSServiceType_AAAA = 0x1C,kDNSServiceType_LOC = 0x1D,kDNSServiceType_NXT = 0x1E,kDNSServiceType_EID = 0x1F,kDNSServiceType_NIMLOC = 0x20,kDNSServiceType_SRV = 0x21,kDNSServiceType_ATMA = 0x22,kDNSServiceType_NAPTR = 0x23,kDNSServiceType_KX = 0x24,kDNSServiceType_CERT = 0x25,kDNSServiceType_A6 = 0x26,kDNSServiceType_DNAME = 0x27,kDNSServiceType_SINK = 0x28,kDNSServiceType_OPT = 0x29,kDNSServiceType_APL = 0x2A,kDNSServiceType_DS = 0x2B,kDNSServiceType_SSHFP = 0x2C,kDNSServiceType_IPSECKEY = 0x2D,kDNSServiceType_RRSIG = 0x2E,kDNSServiceType_NSEC = 0x2F,kDNSServiceType_DNSKEY = 0x30,kDNSServiceType_DHCID = 0x31,kDNSServiceType_NSEC3 = 0x32,kDNSServiceType_NSEC3PARAM = 0x33,kDNSServiceType_HIP = 0x37,kDNSServiceType_SPF = 0x63,kDNSServiceType_UINFO = 0x64,kDNSServiceType_UID = 0x65,kDNSServiceType_GID = 0x66,kDNSServiceType_UNSPEC = 0x67,kDNSServiceType_TKEY = 0xF9,kDNSServiceType_TSIG = 0xFA,kDNSServiceType_IXFR = 0xFB,kDNSServiceType_AXFR = 0xFC,kDNSServiceType_MAILB = 0xFD,kDNSServiceType_MAILA = 0xFE,kDNSServiceType_ANY = 0xFF,};
enum $F8A097482C6B24D8CA3C16823450667A {ACL_TYPE_EXTENDED = 0x100,ACL_TYPE_ACCESS = 0x0,ACL_TYPE_DEFAULT = 0x1,ACL_TYPE_AFS = 0x2,ACL_TYPE_CODA = 0x3,ACL_TYPE_NTFS = 0x4,ACL_TYPE_NWFS = 0x5,};
struct $F9A7ED8F42D8CCD77CCEA18A32D3B2AC {char *name;uint16_t dnstype;uint16_t dnsclass;uint32_t ttl;union $F9A7ED8F42D8CCD77CCEA18A32D3B2AC::$ACCCA089A96433C3C2E2A191C0A26330 data;};
union $F9A7ED8F42D8CCD77CCEA18A32D3B2AC::$ACCCA089A96433C3C2E2A191C0A26330 {dns_address_record_t *A;dns_domain_name_record_t *NS;dns_domain_name_record_t *MD;dns_domain_name_record_t *MF;dns_domain_name_record_t *CNAME;dns_SOA_record_t *SOA;dns_domain_name_record_t *MB;dns_domain_name_record_t *MG;dns_domain_name_record_t *MR;dns_raw_resource_record_t *DNSNULL;dns_WKS_record_t *WKS;dns_domain_name_record_t *PTR;dns_HINFO_record_t *HINFO;dns_MINFO_record_t *MINFO;dns_MX_record_t *MX;dns_TXT_record_t *TXT;dns_RP_record_t *RP;dns_AFSDB_record_t *AFSDB;dns_X25_record_t *X25;dns_ISDN_record_t *ISDN;dns_RT_record_t *RT;dns_in6_address_record_t *AAAA;dns_LOC_record_t *LOC;dns_SRV_record_t *SRV;};
struct $FA547AB27F70B847C07B2381F2BB5B39 {int re_magic;size_t re_nsub;const char *re_endp;struct re_guts *re_g;};
enum $FA84D37CEEEAC6441153FDF22E064FC6 {LDAP_SYNC_CAPI_NONE = 0xFFFFFFFF,LDAP_SYNC_CAPI_PHASE_FLAG = 0x10,LDAP_SYNC_CAPI_IDSET_FLAG = 0x20,LDAP_SYNC_CAPI_DONE_FLAG = 0x40,LDAP_SYNC_CAPI_PRESENT = 0x0,LDAP_SYNC_CAPI_ADD = 0x1,LDAP_SYNC_CAPI_MODIFY = 0x2,LDAP_SYNC_CAPI_DELETE = 0x3,LDAP_SYNC_CAPI_PRESENTS = 0x10,LDAP_SYNC_CAPI_DELETES = 0x13,LDAP_SYNC_CAPI_PRESENTS_IDSET = 0x30,LDAP_SYNC_CAPI_DELETES_IDSET = 0x33,LDAP_SYNC_CAPI_DONE = 0x50,};
struct $FB19EE544F0F316F1E6BF9A40B1BEA34 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t new_ledger;};
struct $FB4BFEF078574026C3C8614BADD24D68 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t emulation_vector;NDR_record_t NDR;int vector_start;mach_msg_type_number_t emulation_vectorCnt;};
struct $FB65CC25317C65F4D3C395D38114E663 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t pset;NDR_record_t NDR;policy_t policy;mach_msg_type_number_t baseCnt;integer_t base[5];mach_msg_type_number_t limitCnt;integer_t limit[1];boolean_t change;};
struct $FBA7D87DC326A635240EF53AE056B982 {__int64 code;__int64 thread;__int64 a1;__int64 a2;__int64 a3;__int64 a4;__int64 a5;__int64 a6;};
struct $FC28B28F509CCD1DBFC66983DF428597 {mach_msg_header_t Head;NDR_record_t NDR;thread_policy_flavor_t flavor;mach_msg_type_number_t policy_infoCnt;integer_t policy_info[16];};
struct $FCCAD8574E122F2EFADDBD13F6972B4E {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_timespec_t cur_time;};
struct $FD3C3D52399ED0C4A355988E4BC1F0A0 {char __magic[8];char __encoding[32];__darwin_rune_t (__cdecl *__sgetrune)(const char *, __darwin_size_t, const char **);int (__cdecl *__sputrune)(__darwin_rune_t, char *, __darwin_size_t, char **);__darwin_rune_t __invalid_rune;__uint32_t __runetype[256];__darwin_rune_t __maplower[256];__darwin_rune_t __mapupper[256];_RuneRange __runetype_ext;_RuneRange __maplower_ext;_RuneRange __mapupper_ext;void *__variable;int __variable_len;int __ncharclasses;_RuneCharClass *__charclasses;};
struct $FDCFA80C9015498DB49FE80C74BE4ADF {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t reply;};
struct $FE3C27134D9979D1E07496C70FEB2BBD {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t parent_entry;NDR_record_t NDR;vm_size_t size;vm_offset_t offset;vm_prot_t permission;};
struct $FEDEB051CE08D897834232829C0C3BAE {mach_msg_header_t Head;NDR_record_t NDR;clock_flavor_t flavor;mach_msg_type_number_t clock_attrCnt;};
struct $FEF862DC5C2F986098A4350401CDFBFD {uint32_t subtype;char *hostname;};
enum $FF33C0E81AF30F09B11252A739DC6DDA {kHFSSigWord = 0x4244,kHFSPlusSigWord = 0x482B,kHFSXSigWord = 0x4858,kHFSPlusVersion = 0x4,kHFSXVersion = 0x5,kHFSPlusMountVersion = 0x31302E30,kHFSJMountVersion = 0x4846534A,kFSKMountVersion = 0x46534B21,};
enum $FF6DEC2E5CE2EC2303227045BBC9CA50 {XML_ELEMENT_CONTENT_ONCE = 0x1,XML_ELEMENT_CONTENT_OPT = 0x2,XML_ELEMENT_CONTENT_MULT = 0x3,XML_ELEMENT_CONTENT_PLUS = 0x4,};
struct $FFAD9CD714E6EDB3A8033A5FCDD84734 {uint64_t address;unsigned __int32 deallocate : 8;unsigned __int32 copy : 8;unsigned __int32 pad1 : 8;unsigned __int32 type : 8;mach_msg_size_t size;};
struct $FFDCF6D4903B3C43BBF48445F1564ABC {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t old_handlerss[32];NDR_record_t NDR;mach_msg_type_number_t masksCnt;exception_mask_t masks[32];exception_behavior_t old_behaviors[32];thread_state_flavor_t old_flavors[32];};
struct $FFE74F33A8D4184B0115806877430EDD {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t new_set;NDR_record_t NDR;boolean_t wait;};
typedef struct ACCESS_DESCRIPTION_st ACCESS_DESCRIPTION;
struct ACCESS_DESCRIPTION_st {ASN1_OBJECT *method;GENERAL_NAME *location;};
typedef enum $EDBA1914F16BC538415B0E0A3A3FD3BB ACTION;
typedef struct aes_key_st AES_KEY;
typedef struct ASN1_ADB_st ASN1_ADB;
typedef struct ASN1_ADB_TABLE_st ASN1_ADB_TABLE;
struct ASN1_ADB_TABLE_st {__int64 value;const ASN1_TEMPLATE tt;};
struct ASN1_ADB_st {unsigned __int64 flags;unsigned __int64 offset;STACK **app_items;const ASN1_ADB_TABLE *tbl;__int64 tblcount;const ASN1_TEMPLATE *default_tt;const ASN1_TEMPLATE *null_tt;};
typedef struct ASN1_AUX_st ASN1_AUX;
struct ASN1_AUX_st {void *app_data;int flags;int ref_offset;int ref_lock;ASN1_aux_cb *asn1_cb;int enc_offset;};
typedef struct asn1_string_st ASN1_BIT_STRING;
typedef struct asn1_string_st ASN1_BMPSTRING;
typedef int ASN1_BOOLEAN;
typedef struct ASN1_COMPAT_FUNCS_st ASN1_COMPAT_FUNCS;
struct ASN1_COMPAT_FUNCS_st {ASN1_new_func *asn1_new;ASN1_free_func *asn1_free;ASN1_d2i_func *asn1_d2i;ASN1_i2d_func *asn1_i2d;};
typedef struct asn1_ctx_st ASN1_CTX;
typedef struct ASN1_ENCODING_st ASN1_ENCODING;
struct ASN1_ENCODING_st {unsigned __int8 *enc;__int64 len;int modified;};
typedef struct asn1_string_st ASN1_ENUMERATED;
typedef struct ASN1_EXTERN_FUNCS_st ASN1_EXTERN_FUNCS;
struct ASN1_EXTERN_FUNCS_st {void *app_data;ASN1_ex_new_func *asn1_ex_new;ASN1_ex_free_func *asn1_ex_free;ASN1_ex_free_func *asn1_ex_clear;ASN1_ex_d2i *asn1_ex_d2i;ASN1_ex_i2d *asn1_ex_i2d;};
typedef struct asn1_string_st ASN1_GENERALIZEDTIME;
typedef struct asn1_string_st ASN1_GENERALSTRING;
typedef struct asn1_header_st ASN1_HEADER;
typedef struct asn1_string_st ASN1_IA5STRING;
typedef struct asn1_string_st ASN1_INTEGER;
typedef struct ASN1_ITEM_st ASN1_ITEM;
typedef const ASN1_ITEM ASN1_ITEM_EXP;
struct ASN1_ITEM_st {char itype;__int64 utype;const ASN1_TEMPLATE *templates;__int64 tcount;const void *funcs;__int64 size;const char *sname;};
typedef struct asn1_method_st ASN1_METHOD;
typedef int ASN1_NULL;
typedef struct asn1_object_st ASN1_OBJECT;
typedef struct asn1_string_st ASN1_OCTET_STRING;
typedef struct ASN1_PRIMITIVE_FUNCS_st ASN1_PRIMITIVE_FUNCS;
struct ASN1_PRIMITIVE_FUNCS_st {void *app_data;unsigned __int64 flags;ASN1_ex_new_func *prim_new;ASN1_ex_free_func *prim_free;ASN1_ex_free_func *prim_clear;ASN1_primitive_c2i *prim_c2i;ASN1_primitive_i2c *prim_i2c;};
typedef struct asn1_string_st ASN1_PRINTABLESTRING;
typedef struct asn1_string_st ASN1_STRING;
typedef struct asn1_string_table_st ASN1_STRING_TABLE;
typedef struct asn1_string_st ASN1_T61STRING;
typedef struct ASN1_TEMPLATE_st ASN1_TEMPLATE;
struct ASN1_TEMPLATE_st {unsigned __int64 flags;__int64 tag;unsigned __int64 offset;const char *field_name;ASN1_ITEM_EXP *item;};
typedef struct asn1_string_st ASN1_TIME;
typedef struct ASN1_TLC_st ASN1_TLC;
struct ASN1_TLC_st {char valid;int ret;__int64 plen;int ptag;int pclass;int hdrlen;};
typedef struct asn1_type_st ASN1_TYPE;
typedef struct asn1_string_st ASN1_UNIVERSALSTRING;
typedef struct asn1_string_st ASN1_UTCTIME;
typedef struct asn1_string_st ASN1_UTF8STRING;
typedef struct ASN1_VALUE_st ASN1_VALUE;
struct ASN1_VALUE_st;
typedef struct asn1_string_st ASN1_VISIBLESTRING;
typedef int __cdecl ASN1_aux_cb(int operation, ASN1_VALUE **in, const ASN1_ITEM *it);
typedef struct asn1_const_ctx_st ASN1_const_CTX;
typedef ASN1_VALUE *__cdecl ASN1_d2i_func(ASN1_VALUE **a, const unsigned __int8 **in, __int64 length);
typedef int __cdecl ASN1_ex_d2i(ASN1_VALUE **pval, const unsigned __int8 **in, __int64 len, const ASN1_ITEM *it, int tag, int aclass, char opt, ASN1_TLC *ctx);
typedef void __cdecl ASN1_ex_free_func(ASN1_VALUE **pval, const ASN1_ITEM *it);
typedef int __cdecl ASN1_ex_i2d(ASN1_VALUE **pval, unsigned __int8 **out, const ASN1_ITEM *it, int tag, int aclass);
typedef int __cdecl ASN1_ex_new_func(ASN1_VALUE **pval, const ASN1_ITEM *it);
typedef void __cdecl ASN1_free_func(ASN1_VALUE *a);
typedef int __cdecl ASN1_i2d_func(ASN1_VALUE *a, unsigned __int8 **in);
typedef ASN1_VALUE *ASN1_new_func(void);
typedef int __cdecl ASN1_primitive_c2i(ASN1_VALUE **pval, const unsigned __int8 *cont, int len, int utype, char *free_cont, const ASN1_ITEM *it);
typedef int __cdecl ASN1_primitive_i2c(ASN1_VALUE **pval, unsigned __int8 *cont, int *putype, const ASN1_ITEM *it);
typedef struct $05EECDE53F008AE0E4F8A84193F3FFF1 AUTH;
typedef STACK AUTHORITY_INFO_ACCESS;
typedef struct AUTHORITY_KEYID_st AUTHORITY_KEYID;
struct AUTHORITY_KEYID_st {ASN1_OCTET_STRING *keyid;GENERAL_NAMES *issuer;ASN1_INTEGER *serial;};
typedef UnsignedWide AbsoluteTime;
typedef int __cdecl AddVarMethod(netsnmp_agent_session *asp, netsnmp_variable_list *vbp);
typedef struct BASIC_CONSTRAINTS_st BASIC_CONSTRAINTS;
struct BASIC_CONSTRAINTS_st {int ca;ASN1_INTEGER *pathlen;};
typedef int (__cdecl *BERDecodeCallback)(BerElement *ber, void *data, int mode);
typedef int (__cdecl *BEREncodeCallback)(BerElement *ber, void *data);
typedef int *(*BER_ERRNO_FN)(void);
typedef void (__cdecl *BER_LOG_PRINT_FN)(const char *buf);
typedef void *__cdecl BER_MEMALLOC_FN(ber_len_t size, void *ctx);
typedef void *__cdecl BER_MEMCALLOC_FN(ber_len_t n, ber_len_t size, void *ctx);
typedef void __cdecl BER_MEMFREE_FN(void *p, void *ctx);
typedef void *__cdecl BER_MEMREALLOC_FN(void *p, ber_len_t size, void *ctx);
typedef struct bf_key_st BF_KEY;
typedef struct bignum_st BIGNUM;
typedef struct bio_st BIO;
typedef struct bio_f_buffer_ctx_struct BIO_F_BUFFER_CTX;
typedef struct bio_method_st BIO_METHOD;
typedef struct bio_st BIO_dummy;
typedef struct BIT_STRING_BITNAME_st BIT_STRING_BITNAME;
struct BIT_STRING_BITNAME_st {int bitnum;const char *lname;const char *sname;};
typedef struct _bkt BKT;
typedef struct bn_blinding_st BN_BLINDING;
typedef struct bignum_ctx BN_CTX;
typedef struct bn_gencb_st BN_GENCB;
typedef struct bn_mont_ctx_st BN_MONT_CTX;
typedef struct bn_recp_ctx_st BN_RECP_CTX;
typedef unsigned __int64 BOOKMARK;
typedef int BOOL;
struct __attribute__((packed)) __attribute__((aligned(2))) BTHeaderRec {u_int16_t treeDepth;u_int32_t rootNode;u_int32_t leafRecords;u_int32_t firstLeafNode;u_int32_t lastLeafNode;u_int16_t nodeSize;u_int16_t maxKeyLength;u_int32_t totalNodes;u_int32_t freeNodes;u_int16_t reserved1;u_int32_t clumpSize;u_int8_t btreeType;u_int8_t keyCompareType;u_int32_t attributes;u_int32_t reserved3[16];};
struct __attribute__((packed)) __attribute__((aligned(2))) BTNodeDescriptor {u_int32_t fLink;u_int32_t bLink;int8_t kind;u_int8_t height;u_int16_t numRecords;u_int16_t reserved;};
typedef struct $8BB03BD0BEB0A35EC535A731418A02E8 BTREEINFO;
union BTreeKey {u_int8_t length8;u_int16_t length16;u_int8_t rawData[522];};
enum BTreeKeyLimits {kMaxKeyLength = 0x208,};
typedef struct buf_mem_st BUF_MEM;
typedef void BZFILE;
struct BackendDB;
typedef struct berelement BerElement;
typedef struct lber_memory_fns BerMemoryFunctions;
typedef struct berval BerValue;
typedef BerValue *BerVarray;
struct Block_byref {void *isa;struct Block_byref *forwarding;volatile int32_t flags;uint32_t size;};
struct Block_byref_2 {void (__cdecl *byref_keep)(struct Block_byref *dst, struct Block_byref *src);void (__cdecl *byref_destroy)(struct Block_byref *);};
struct Block_byref_3 {const char *layout;};
struct Block_callbacks_RR {size_t size;void (__cdecl *retain)(const void *);void (__cdecl *release)(const void *);void (__cdecl *destructInstance)(const void *);};
struct Block_descriptor_1 {uintptr_t reserved;uintptr_t size;};
struct Block_descriptor_2 {void (__cdecl *copy)(void *dst, const void *src);void (__cdecl *dispose)(const void *);};
struct Block_descriptor_3 {const char *signature;const char *layout;};
struct Block_layout {void *isa;volatile int32_t flags;int32_t reserved;void (*invoke)(void *, ...);struct Block_descriptor_1 *descriptor;};
typedef enum $65EE5B278A6A516D307828565C93733B Bool;
typedef unsigned __int8 Boolean;
typedef unsigned __int8 Byte;
typedef Byte Bytef;
typedef struct cast_key_st CAST_KEY;
typedef STACK CERTIFICATEPOLICIES;
struct CLIENT {AUTH *cl_auth;struct CLIENT::clnt_ops *cl_ops;caddr_t cl_private;};
struct CLIENT::clnt_ops {enum clnt_stat (__cdecl *cl_call)(CLIENT *, unsigned int, xdrproc_t, void *, xdrproc_t, void *, struct timeval);void (*cl_abort)(void);void (__cdecl *cl_geterr)(CLIENT *, struct rpc_err *);int (__cdecl *cl_freeres)(CLIENT *, xdrproc_t, void *);void (__cdecl *cl_destroy)(CLIENT *);int (__cdecl *cl_control)(CLIENT *, int, char *);};
typedef struct comp_ctx_st COMP_CTX;
typedef struct comp_method_st COMP_METHOD;
typedef struct conf_st CONF;
typedef struct conf_imodule_st CONF_IMODULE;
typedef struct conf_method_st CONF_METHOD;
typedef struct conf_module_st CONF_MODULE;
typedef struct $EC96C272326DB5C337E3479E74002932 CONF_VALUE;
typedef char *__cdecl CPFunction(const char *, int);
typedef char **__cdecl CPPFunction(const char *, int, int);
typedef STACK CRL_DIST_POINTS;
typedef struct crypto_ex_data_st CRYPTO_EX_DATA;
typedef struct crypto_ex_data_func_st CRYPTO_EX_DATA_FUNCS;
typedef struct st_CRYPTO_EX_DATA_IMPL CRYPTO_EX_DATA_IMPL;
typedef int __cdecl CRYPTO_EX_dup(CRYPTO_EX_DATA *to, CRYPTO_EX_DATA *from, void *from_d, int idx, __int64 argl, void *argp);
typedef void __cdecl CRYPTO_EX_free(void *parent, void *ptr, CRYPTO_EX_DATA *ad, int idx, __int64 argl, void *argp);
typedef int __cdecl CRYPTO_EX_new(void *parent, void *ptr, CRYPTO_EX_DATA *ad, int idx, __int64 argl, void *argp);
typedef void *__cdecl CRYPTO_MEM_LEAK_CB(unsigned __int64, const char *, int, int, void *);
typedef struct $D5D5FAADE45C3E62C0E3AA0EFAA1D8B2 CRYPTO_dynlock;
typedef struct $62C3C6215D74515CD10ADACC096E4B0E CTL_MSG;
typedef struct $8224BF751892D9429891DD778DF6A995 CTL_RESPONSE;
typedef void CURL;
typedef enum $55AEE0FA07D064890E756D545251771C CURLFORMcode;
typedef enum $5BB96409C7C381A52DD11FDA0AE1E04F CURLINFO;
typedef void CURLM;
typedef enum $E50CF21A375752F45409DA036BA9C4BA CURLMSG;
typedef enum $80C78EA22186AB772B4BDEFF2BFDD204 CURLMcode;
typedef enum $3BD93A796F6658F29C5207FE2468935A CURLMoption;
struct CURLMsg {CURLMSG msg;CURL *easy_handle;union CURLMsg::$925FB63D6E9926DD49F09E35066BE965 data;};
union CURLMsg::$925FB63D6E9926DD49F09E35066BE965 {void *whatever;CURLcode result;};
typedef void CURLSH;
typedef enum $DF9762E172B78CD0B567A8F57D5EE1A7 CURLSHcode;
typedef enum $817EE464AA2F5FC31C63385F8A750782 CURLSHoption;
enum CURL_NETRC_OPTION {CURL_NETRC_IGNORED = 0x0,CURL_NETRC_OPTIONAL = 0x1,CURL_NETRC_REQUIRED = 0x2,CURL_NETRC_LAST = 0x3,};
enum CURL_TLSAUTH {CURL_TLSAUTH_NONE = 0x0,CURL_TLSAUTH_SRP = 0x1,CURL_TLSAUTH_LAST = 0x2,};
typedef enum $031587082C14B3DB98E124F1346E686B CURLcode;
typedef enum $28266B4D1FF5A8F2FF1835543AB19A29 CURLformoption;
typedef enum $2E8E5FC6A771AD2BBD66B1556875C23C CURLoption;
typedef enum $46343603E7EF6B9CA2DB5251398A8141 CURLversion;
struct CompileTimeAssertionChecks_DNS_SD {char assert0[1];};
struct Connection;
typedef const HFSUniStr255 *ConstHFSUniStr255Param;
typedef struct tagDATE_STRUCT DATE_STRUCT;
typedef struct __db DB;
typedef enum $81EAA969F6CC11E48BC03187F305DA8C DBDIRS;
typedef struct $524B7AA813964FB1B08025913F65D34C DBM;
typedef struct $29720D4B1372A72A8E922F3C51907D2B DBT;
typedef enum $B2A44DC877B17F2021CE46A73658A10E DBTYPE;
typedef unsigned __int8 DES_cblock[8];
typedef struct DES_ks DES_key_schedule;
struct DES_ks {union DES_ks::$DCDADC3B951D04C242C8878BB987FED4 ks[16];};
union DES_ks::$DCDADC3B951D04C242C8878BB987FED4 {DES_cblock cblock;unsigned int deslong[2];};
typedef struct dh_st DH;
typedef struct dh_method DH_METHOD;
typedef struct $5FB9FDFEF5B2E814098E656C85B458E3 DIR;
typedef struct DIST_POINT_st DIST_POINT;
typedef struct DIST_POINT_NAME_st DIST_POINT_NAME;
struct DIST_POINT_NAME_st {int type;union DIST_POINT_NAME_st::$A95B7E1D2A8BC0A3F405D6FFBE373ACE name;};
union DIST_POINT_NAME_st::$A95B7E1D2A8BC0A3F405D6FFBE373ACE {GENERAL_NAMES *fullname;STACK *relativename;};
struct DIST_POINT_st {DIST_POINT_NAME *distpoint;ASN1_BIT_STRING *reasons;GENERAL_NAMES *CRLissuer;};
typedef struct _DNSRecordRef_t *DNSRecordRef;
typedef uint32_t DNSRecordReference;
typedef void (__cdecl *DNSServiceBrowseReply)(DNSServiceRef sdRef, DNSServiceFlags flags, uint32_t interfaceIndex, DNSServiceErrorType errorCode, const char *serviceName, const char *regtype, const char *replyDomain, void *context);
typedef void (__cdecl *DNSServiceBrowserReply)(DNSServiceBrowserReplyResultType resultType, const char *replyName, const char *replyType, const char *replyDomain, DNSServiceDiscoveryReplyFlags flags, void *context);
typedef enum $29FC7CC788C9FFDBF53740441D4A1DD5 DNSServiceBrowserReplyResultType;
typedef enum $6D22B6C70995B3A898F6ED894F8956B2 DNSServiceDiscoveryReplyFlags;
typedef void (__cdecl *DNSServiceDomainEnumReply)(DNSServiceRef sdRef, DNSServiceFlags flags, uint32_t interfaceIndex, DNSServiceErrorType errorCode, const char *replyDomain, void *context);
typedef void (__cdecl *DNSServiceDomainEnumerationReply)(DNSServiceDomainEnumerationReplyResultType resultType, const char *replyDomain, DNSServiceDiscoveryReplyFlags flags, void *context);
typedef enum $EB4F25A3AB2B34DE382859FFD4ADE17B DNSServiceDomainEnumerationReplyResultType;
typedef int32_t DNSServiceErrorType;
typedef uint32_t DNSServiceFlags;
typedef void (__cdecl *DNSServiceGetAddrInfoReply)(DNSServiceRef sdRef, DNSServiceFlags flags, uint32_t interfaceIndex, DNSServiceErrorType errorCode, const char *hostname, const struct sockaddr *address, uint32_t ttl, void *context);
typedef void (__cdecl *DNSServiceNATPortMappingReply)(DNSServiceRef sdRef, DNSServiceFlags flags, uint32_t interfaceIndex, DNSServiceErrorType errorCode, uint32_t externalAddress, DNSServiceProtocol protocol, uint16_t internalPort, uint16_t externalPort, uint32_t ttl, void *context);
typedef uint32_t DNSServiceProtocol;
typedef void (__cdecl *DNSServiceQueryRecordReply)(DNSServiceRef sdRef, DNSServiceFlags flags, uint32_t interfaceIndex, DNSServiceErrorType errorCode, const char *fullname, uint16_t rrtype, uint16_t rrclass, uint16_t rdlen, const void *rdata, uint32_t ttl, void *context);
typedef struct _DNSServiceRef_t *DNSServiceRef;
typedef void (__cdecl *DNSServiceRegisterRecordReply)(DNSServiceRef sdRef, DNSRecordRef RecordRef, DNSServiceFlags flags, DNSServiceErrorType errorCode, void *context);
typedef void (__cdecl *DNSServiceRegisterReply)(DNSServiceRef sdRef, DNSServiceFlags flags, DNSServiceErrorType errorCode, const char *name, const char *regtype, const char *domain, void *context);
typedef void (__cdecl *DNSServiceRegistrationReply)(DNSServiceRegistrationReplyErrorType errorCode, void *context);
typedef enum $120AC332EBC18F2A4396A3C657EB4314 DNSServiceRegistrationReplyErrorType;
typedef void (__cdecl *DNSServiceResolveReply)(DNSServiceRef sdRef, DNSServiceFlags flags, uint32_t interfaceIndex, DNSServiceErrorType errorCode, const char *fullname, const char *hosttarget, uint16_t port, uint16_t txtLen, const unsigned __int8 *txtRecord, void *context);
typedef void (__cdecl *DNSServiceResolverReply)(struct sockaddr *interface, struct sockaddr *address, const char *txtRecord, DNSServiceDiscoveryReplyFlags flags, void *context);
typedef struct dsa_st DSA;
typedef struct dsa_method DSA_METHOD;
typedef struct DSA_SIG_st DSA_SIG;
struct DSA_SIG_st {BIGNUM *r;BIGNUM *s;};
typedef struct dso_st DSO;
typedef void (*DSO_FUNC_TYPE)(void);
typedef char *(__cdecl *DSO_MERGER_FUNC)(DSO *, const char *, const char *);
typedef struct dso_meth_st DSO_METHOD;
typedef char *(__cdecl *DSO_NAME_CONVERTER_FUNC)(DSO *, const char *);
typedef struct dtls1_bitmap_st DTLS1_BITMAP;
typedef struct dtls1_record_data_st DTLS1_RECORD_DATA;
typedef struct dtls1_state_st DTLS1_STATE;
typedef unsigned int DWORD;
enum DYLD_BOOL {FALSE = 0x0,TRUE = 0x1,};
typedef struct dl_info Dl_info;
typedef struct ecdh_method ECDH_METHOD;
typedef struct ecdsa_method ECDSA_METHOD;
typedef struct ECDSA_SIG_st ECDSA_SIG;
struct ECDSA_SIG_st {BIGNUM *r;BIGNUM *s;};
typedef struct ecpk_parameters_st ECPKPARAMETERS;
typedef struct ec_group_st EC_GROUP;
typedef struct ec_key_st EC_KEY;
typedef struct ec_method_st EC_METHOD;
typedef struct ec_point_st EC_POINT;
typedef struct $DD7F30A52BF20C3BD0A18D92A677C06B EC_builtin_curve;
typedef struct EDIPartyName_st EDIPARTYNAME;
struct EDIPartyName_st {ASN1_STRING *nameAssigner;ASN1_STRING *partyName;};
typedef struct engine_st ENGINE;
typedef int (__cdecl *ENGINE_CIPHERS_PTR)(ENGINE *, const EVP_CIPHER **, const int **, int);
typedef struct ENGINE_CMD_DEFN_st ENGINE_CMD_DEFN;
struct ENGINE_CMD_DEFN_st {unsigned int cmd_num;const char *cmd_name;const char *cmd_desc;unsigned int cmd_flags;};
typedef int (__cdecl *ENGINE_CTRL_FUNC_PTR)(ENGINE *, int, __int64, void *, void (*f)(void));
typedef int (__cdecl *ENGINE_DIGESTS_PTR)(ENGINE *, const EVP_MD **, const int **, int);
typedef int (*ENGINE_GEN_FUNC_PTR)(void);
typedef int (__cdecl *ENGINE_GEN_INT_FUNC_PTR)(ENGINE *);
typedef EVP_PKEY *(__cdecl *ENGINE_LOAD_KEY_PTR)(ENGINE *, const char *, UI_METHOD *ui_method, void *callback_data);
typedef int (__cdecl *ENGINE_SSL_CLIENT_CERT_PTR)(ENGINE *, SSL *ssl, STACK *ca_dn, X509 **pcert, EVP_PKEY **pkey, STACK **pother, UI_METHOD *ui_method, void *callback_data);
struct ENTRY {char *key;void *data;};
typedef BIT_STRING_BITNAME ENUMERATED_NAMES;
typedef struct st_ERR_FNS ERR_FNS;
typedef struct err_state_st ERR_STATE;
typedef struct ERR_string_data_st ERR_STRING_DATA;
struct ERR_string_data_st {unsigned __int64 error;const char *string;};
typedef struct evp_cipher_st EVP_CIPHER;
typedef struct evp_cipher_ctx_st EVP_CIPHER_CTX;
typedef struct evp_cipher_info_st EVP_CIPHER_INFO;
typedef struct evp_Encode_Ctx_st EVP_ENCODE_CTX;
typedef struct env_md_st EVP_MD;
typedef struct env_md_ctx_st EVP_MD_CTX;
typedef struct $12B704064C062A29855D6F60F4B4754D EVP_MD_SVCTX;
typedef int __cdecl EVP_PBE_KEYGEN(EVP_CIPHER_CTX *ctx, const char *pass, int passlen, ASN1_TYPE *param, const EVP_CIPHER *cipher, const EVP_MD *md, int en_de);
typedef struct evp_pkey_st EVP_PKEY;
typedef STACK EXTENDED_KEY_USAGE;
typedef struct editline EditLine;
typedef struct enginetime_struct *Enginetime;
typedef unsigned int FFI_TYPE;
typedef struct fieldnode FIELD;
typedef struct typenode FIELDTYPE;
typedef void *FIELD_CELL;
typedef struct __sFILE FILE;
typedef int (__cdecl *FILTER_APPLY_FN)(Slapi_Filter *f, void *arg);
typedef struct formnode FORM;
typedef struct $BF6258091C70028000D911F61A5FB5AF FTS;
typedef struct _ftsent FTSENT;
struct FTW {int base;int level;};
typedef int Field_Options;
typedef u_char *__cdecl FindVarMethod(struct variable *vp, oid *name, size_t *length, int exact, size_t *var_len, WriteMethod **write_method);
struct __attribute__((packed)) __attribute__((aligned(2))) FndrDirInfo {struct FndrDirInfo::$6E74BEE3D2405F7C88221D37EC2C16A3 frRect;unsigned __int16 frFlags;struct FndrDirInfo::$0DCF4602959F8104318EED879205AAFA frLocation;int16_t opaque;};
struct FndrDirInfo::$0DCF4602959F8104318EED879205AAFA {u_int16_t v;u_int16_t h;};
struct FndrDirInfo::$6E74BEE3D2405F7C88221D37EC2C16A3 {int16_t top;int16_t left;int16_t bottom;int16_t right;};
struct __attribute__((packed)) __attribute__((aligned(2))) FndrExtendedDirInfo {u_int32_t point;u_int32_t date_added;u_int16_t extended_flags;u_int16_t reserved3;u_int32_t reserved4;};
struct __attribute__((packed)) __attribute__((aligned(2))) FndrExtendedFileInfo {u_int32_t reserved1;u_int32_t date_added;u_int16_t extended_flags;u_int16_t reserved2;u_int32_t reserved3;};
struct __attribute__((packed)) __attribute__((aligned(2))) FndrFileInfo {u_int32_t fdType;u_int32_t fdCreator;u_int16_t fdFlags;struct FndrFileInfo::$41A11852923CA7CF3D1788B49D991E5B fdLocation;int16_t opaque;};
struct FndrFileInfo::$41A11852923CA7CF3D1788B49D991E5B {int16_t v;int16_t h;};
struct __attribute__((packed)) __attribute__((aligned(2))) FndrOpaqueInfo {int8_t opaque[16];};
typedef void (__cdecl *Form_Hook)(FORM *);
typedef int Form_Options;
typedef int __cdecl Function(const char *, int);
typedef struct GENERAL_NAME_st GENERAL_NAME;
typedef STACK GENERAL_NAMES;
struct GENERAL_NAME_st {int type;union GENERAL_NAME_st::$0CCF65EAB3E3C79409391F9327465DF1 d;};
union GENERAL_NAME_st::$0CCF65EAB3E3C79409391F9327465DF1 {char *ptr;OTHERNAME *otherName;ASN1_IA5STRING *rfc822Name;ASN1_IA5STRING *dNSName;ASN1_TYPE *x400Address;X509_NAME *directoryName;EDIPARTYNAME *ediPartyName;ASN1_IA5STRING *uniformResourceIdentifier;ASN1_OCTET_STRING *iPAddress;ASN1_OBJECT *registeredID;ASN1_OCTET_STRING *ip;X509_NAME *dirn;ASN1_IA5STRING *ia5;ASN1_OBJECT *rid;ASN1_TYPE *other;};
typedef struct GENERAL_SUBTREE_st GENERAL_SUBTREE;
struct GENERAL_SUBTREE_st {GENERAL_NAME *base;ASN1_INTEGER *minimum;ASN1_INTEGER *maximum;};
typedef int (__cdecl *GEN_SESSION_CB)(const SSL *ssl, unsigned __int8 *id, unsigned int *id_len);
typedef struct $42CAA206A1F917EEF51ECD514D7730BF HASHINFO;
typedef void *HDBC;
typedef struct $1FC9C4745BFE4A4C45A6D008A791D581 HEADER;
typedef void *HENV;
struct __attribute__((packed)) __attribute__((aligned(2))) HFSCatalogFile {int16_t recordType;u_int8_t flags;int8_t fileType;FndrFileInfo userInfo;u_int32_t fileID;u_int16_t dataStartBlock;int32_t dataLogicalSize;int32_t dataPhysicalSize;u_int16_t rsrcStartBlock;int32_t rsrcLogicalSize;int32_t rsrcPhysicalSize;u_int32_t createDate;u_int32_t modifyDate;u_int32_t backupDate;FndrOpaqueInfo finderInfo;u_int16_t clumpSize;HFSExtentRecord dataExtents;HFSExtentRecord rsrcExtents;u_int32_t reserved;};
struct __attribute__((packed)) __attribute__((aligned(2))) HFSCatalogFolder {int16_t recordType;u_int16_t flags;u_int16_t valence;u_int32_t folderID;u_int32_t createDate;u_int32_t modifyDate;u_int32_t backupDate;FndrDirInfo userInfo;FndrOpaqueInfo finderInfo;u_int32_t reserved[4];};
struct __attribute__((packed)) __attribute__((aligned(2))) HFSCatalogKey {u_int8_t keyLength;u_int8_t reserved;u_int32_t parentID;u_int8_t nodeName[32];};
struct __attribute__((packed)) __attribute__((aligned(2))) HFSCatalogThread {int16_t recordType;int32_t reserved[2];u_int32_t parentID;u_int8_t nodeName[32];};
struct __attribute__((packed)) __attribute__((aligned(2))) HFSExtentDescriptor {u_int16_t startBlock;u_int16_t blockCount;};
struct __attribute__((packed)) __attribute__((aligned(2))) HFSExtentKey {u_int8_t keyLength;u_int8_t forkType;u_int32_t fileID;u_int16_t startBlock;};
typedef HFSExtentDescriptor HFSExtentRecord[3];
struct __attribute__((packed)) __attribute__((aligned(2))) HFSMasterDirectoryBlock {u_int16_t drSigWord;u_int32_t drCrDate;u_int32_t drLsMod;u_int16_t drAtrb;u_int16_t drNmFls;u_int16_t drVBMSt;u_int16_t drAllocPtr;u_int16_t drNmAlBlks;u_int32_t drAlBlkSiz;u_int32_t drClpSiz;u_int16_t drAlBlSt;u_int32_t drNxtCNID;u_int16_t drFreeBks;u_int8_t drVN[28];u_int32_t drVolBkUp;u_int16_t drVSeqNum;u_int32_t drWrCnt;u_int32_t drXTClpSiz;u_int32_t drCTClpSiz;u_int16_t drNmRtDirs;u_int32_t drFilCnt;u_int32_t drDirCnt;u_int32_t drFndrInfo[8];u_int16_t drEmbedSigWord;HFSExtentDescriptor drEmbedExtent;u_int32_t drXTFlSize;HFSExtentRecord drXTExtRec;u_int32_t drCTFlSize;HFSExtentRecord drCTExtRec;};
struct __attribute__((packed)) __attribute__((aligned(2))) HFSPlusAttrData {u_int32_t recordType;u_int32_t reserved[2];u_int32_t attrSize;u_int8_t attrData[2];};
struct __attribute__((packed)) __attribute__((aligned(2))) HFSPlusAttrExtents {u_int32_t recordType;u_int32_t reserved;HFSPlusExtentRecord extents;};
struct __attribute__((packed)) __attribute__((aligned(2))) HFSPlusAttrForkData {u_int32_t recordType;u_int32_t reserved;HFSPlusForkData theFork;};
struct __attribute__((packed)) __attribute__((aligned(2))) HFSPlusAttrInlineData {u_int32_t recordType;u_int32_t reserved;u_int32_t logicalSize;u_int8_t userData[2];};
struct __attribute__((packed)) __attribute__((aligned(2))) HFSPlusAttrKey {u_int16_t keyLength;u_int16_t pad;u_int32_t fileID;u_int32_t startBlock;u_int16_t attrNameLen;u_int16_t attrName[127];};
union HFSPlusAttrRecord {u_int32_t recordType;HFSPlusAttrInlineData inlineData;HFSPlusAttrData attrData;HFSPlusAttrForkData forkData;HFSPlusAttrExtents overflowExtents;};
struct __attribute__((packed)) __attribute__((aligned(2))) HFSPlusBSDInfo {u_int32_t ownerID;u_int32_t groupID;u_int8_t adminFlags;u_int8_t ownerFlags;u_int16_t fileMode;union HFSPlusBSDInfo::$27AA93549C704A2FC0D1AB4BC35019DD special;};
union HFSPlusBSDInfo::$27AA93549C704A2FC0D1AB4BC35019DD {u_int32_t iNodeNum;u_int32_t linkCount;u_int32_t rawDevice;};
struct __attribute__((packed)) __attribute__((aligned(2))) HFSPlusCatalogFile {int16_t recordType;u_int16_t flags;u_int32_t reserved1;u_int32_t fileID;u_int32_t createDate;u_int32_t contentModDate;u_int32_t attributeModDate;u_int32_t accessDate;u_int32_t backupDate;HFSPlusBSDInfo bsdInfo;FndrFileInfo userInfo;FndrOpaqueInfo finderInfo;u_int32_t textEncoding;u_int32_t reserved2;HFSPlusForkData dataFork;HFSPlusForkData resourceFork;};
struct __attribute__((packed)) __attribute__((aligned(2))) HFSPlusCatalogFolder {int16_t recordType;u_int16_t flags;u_int32_t valence;u_int32_t folderID;u_int32_t createDate;u_int32_t contentModDate;u_int32_t attributeModDate;u_int32_t accessDate;u_int32_t backupDate;HFSPlusBSDInfo bsdInfo;FndrDirInfo userInfo;FndrOpaqueInfo finderInfo;u_int32_t textEncoding;u_int32_t folderCount;};
struct __attribute__((packed)) __attribute__((aligned(2))) HFSPlusCatalogKey {u_int16_t keyLength;u_int32_t parentID;HFSUniStr255 nodeName;};
struct __attribute__((packed)) __attribute__((aligned(2))) HFSPlusCatalogThread {int16_t recordType;int16_t reserved;u_int32_t parentID;HFSUniStr255 nodeName;};
struct __attribute__((packed)) __attribute__((aligned(2))) HFSPlusExtentDescriptor {u_int32_t startBlock;u_int32_t blockCount;};
struct __attribute__((packed)) __attribute__((aligned(2))) HFSPlusExtentKey {u_int16_t keyLength;u_int8_t forkType;u_int8_t pad;u_int32_t fileID;u_int32_t startBlock;};
typedef HFSPlusExtentDescriptor HFSPlusExtentRecord[8];
struct __attribute__((packed)) __attribute__((aligned(2))) HFSPlusForkData {u_int64_t logicalSize;u_int32_t clumpSize;u_int32_t totalBlocks;HFSPlusExtentRecord extents;};
struct __attribute__((packed)) __attribute__((aligned(2))) HFSPlusVolumeHeader {u_int16_t signature;u_int16_t version;u_int32_t attributes;u_int32_t lastMountedVersion;u_int32_t journalInfoBlock;u_int32_t createDate;u_int32_t modifyDate;u_int32_t backupDate;u_int32_t checkedDate;u_int32_t fileCount;u_int32_t folderCount;u_int32_t blockSize;u_int32_t totalBlocks;u_int32_t freeBlocks;u_int32_t nextAllocation;u_int32_t rsrcClumpSize;u_int32_t dataClumpSize;u_int32_t nextCatalogID;u_int32_t writeCount;u_int64_t encodingsBitmap;u_int8_t finderInfo[32];HFSPlusForkData allocationFile;HFSPlusForkData extentsFile;HFSPlusForkData catalogFile;HFSPlusForkData attributesFile;HFSPlusForkData startupFile;};
struct __attribute__((packed)) __attribute__((aligned(2))) HFSUniStr255 {u_int16_t length;u_int16_t unicode[255];};
typedef struct $0DDFFC86F34D071263AD20115100C1F0 HISTORY_STATE;
typedef struct _hist_entry HIST_ENTRY;
typedef struct hmac_ctx_st HMAC_CTX;
typedef struct HMAC_MD5_CTX_s HMAC_MD5_CTX;
struct HMAC_MD5_CTX_s {MD5_CTX ictx;MD5_CTX octx;};
typedef struct HMAC_MD5_STATE_s HMAC_MD5_STATE;
struct HMAC_MD5_STATE_s {UINT4 istate[4];UINT4 ostate[4];};
typedef void *HSTMT;
typedef SQLPOINTER HWND;
struct HistEvent {int num;const char *str;};
typedef struct histeventW HistEventW;
typedef struct history History;
typedef struct historyW HistoryW;
typedef signed __int8 INT1;
typedef __int16 INT2;
typedef int INT4;
typedef struct tagITEM ITEM;
typedef int Item_Options;
struct __attribute__((packed)) __attribute__((aligned(2))) JournalInfoBlock {u_int32_t flags;u_int32_t device_signature[8];u_int64_t offset;u_int64_t size;uuid_string_t ext_jnl_uuid;char machine_serial_num[48];char reserved[43];};
typedef struct _keymap_entry KEYMAP_ENTRY;
typedef KEYMAP_ENTRY KEYMAP_ENTRY_ARRAY[256];
typedef STACK KRB5_APREQ;
typedef struct krb5_ap_req_st KRB5_APREQBODY;
typedef struct krb5_authorization_st KRB5_AUTHDATA;
typedef STACK KRB5_AUTHENT;
typedef struct krb5_authenticator_st KRB5_AUTHENTBODY;
typedef struct krb5_checksum_st KRB5_CHECKSUM;
typedef struct krb5_encdata_st KRB5_ENCDATA;
typedef struct krb5_encryptionkey_st KRB5_ENCKEY;
typedef struct krb5_princname_st KRB5_PRINCNAME;
typedef STACK KRB5_TICKET;
typedef struct krb5_tktbody_st KRB5_TKTBODY;
typedef KEYMAP_ENTRY *Keymap;
typedef struct ldap LDAP;
typedef struct ldap_apifeature_info LDAPAPIFeatureInfo;
typedef struct ldapapiinfo LDAPAPIInfo;
typedef struct ldap_ava LDAPAVA;
typedef struct ldap_attributetype LDAPAttributeType;
typedef struct ldap_contentrule LDAPContentRule;
typedef struct ldapcontrol LDAPControl;
typedef LDAPRDN *LDAPDN;
typedef int __cdecl LDAPDN_rewrite_func(LDAPDN dn, unsigned int flags, void *ctx);
struct LDAPDerefRes {char *derefAttr;struct berval derefVal;LDAPDerefVal *attrVals;struct LDAPDerefRes *next;};
struct LDAPDerefSpec {char *derefAttr;char **attributes;};
struct LDAPDerefVal {char *type;BerVarray vals;struct LDAPDerefVal *next;};
typedef struct ldap_matchingrule LDAPMatchingRule;
typedef struct ldap_matchingruleuse LDAPMatchingRuleUse;
typedef struct ldapmsg LDAPMessage;
typedef struct ldapmod LDAPMod;
typedef struct ldap_nameform LDAPNameForm;
typedef struct ldap_objectclass LDAPObjectClass;
typedef enum passpolicyerror_enum LDAPPasswordPolicyError;
typedef LDAPAVA **LDAPRDN;
typedef struct ldap_schema_extension_item LDAPSchemaExtensionItem;
typedef struct ldapsortkey LDAPSortKey;
typedef struct ldap_structurerule LDAPStructureRule;
typedef struct ldap_syntax LDAPSyntax;
typedef struct ldap_url_desc LDAPURLDesc;
typedef struct ldapvlvinfo LDAPVLVInfo;
typedef int __cdecl LDAP_NEXTREF_PROC(LDAP *ld, char ***refsp, int *cntp, void *params);
typedef int __cdecl LDAP_REBIND_PROC(LDAP *ld, const char *url, ber_tag_t request, ber_int_t msgid, void *params);
typedef int __cdecl LDAP_SASL_INTERACT_PROC(LDAP *ld, unsigned int flags, void *defaults, void *interact);
typedef int __cdecl LDAP_SORT_AD_CMP_PROC(const char *left, const char *right);
typedef int __cdecl LDAP_SORT_AV_CMP_PROC(const void *left, const void *right);
typedef int __cdecl LDAP_URLLIST_PROC(LDAP *ld, LDAPURLDesc **urllist, LDAPURLDesc **url, void *params);
typedef double LDOUBLE;
typedef struct lhash_st LHASH;
typedef int (__cdecl *LHASH_COMP_FN_TYPE)(const void *, const void *);
typedef void (__cdecl *LHASH_DOALL_ARG_FN_TYPE)(void *, void *);
typedef void (__cdecl *LHASH_DOALL_FN_TYPE)(void *);
typedef unsigned __int64 (__cdecl *LHASH_HASH_FN_TYPE)(const void *);
typedef struct lhash_node_st LHASH_NODE;
typedef struct nfs_lock_msg LOCKD_MSG;
typedef struct nfs_lock_msg_queue LOCKD_MSG_QUEUE;
typedef struct nfs_lock_msg_request LOCKD_MSG_REQUEST;
typedef const char *LPCSTR;
typedef const wchar_t *LPCWSTR;
typedef DWORD *LPDWORD;
typedef char *LPSTR;
typedef wchar_t *LPWSTR;
typedef struct lineinfo LineInfo;
typedef struct lineinfow LineInfoW;
enum MACRO_A {A_OLDGETPOLICY = 2,A_OLDSETPOLICY = 3,A_GETKMASK = 4,A_SETKMASK = 5,A_OLDGETQCTRL = 6,A_OLDSETQCTRL = 7,A_GETCWD = 8,A_GETCAR = 9,A_GETSTAT = 12,A_SETSTAT = 13,A_SETUMASK = 14,A_SETSMASK = 15,A_OLDGETCOND = 20,A_OLDSETCOND = 21,A_GETCLASS = 22,A_SETCLASS = 23,A_GETPINFO = 24,A_SETPMASK = 25,A_SETFSIZE = 26,A_GETFSIZE = 27,A_GETPINFO_ADDR = 28,A_GETKAUDIT = 29,A_SETKAUDIT = 30,A_SENDTRIGGER = 31,A_GETSINFO_ADDR = 32,A_GETPOLICY = 33,A_SETPOLICY = 34,A_GETQCTRL = 35,A_SETQCTRL = 36,A_GETCOND = 37,A_SETCOND = 38,A_GETSFLAGS = 39,A_SETSFLAGS = 40,};
enum MACRO_ABDAY {ABDAY_1 = 14,ABDAY_2 = 15,ABDAY_3 = 16,ABDAY_4 = 17,ABDAY_5 = 18,ABDAY_6 = 19,ABDAY_7 = 20,};
enum MACRO_ABMON {ABMON_1 = 33,ABMON_2 = 34,ABMON_3 = 35,ABMON_4 = 36,ABMON_5 = 37,ABMON_6 = 38,ABMON_7 = 39,ABMON_8 = 40,ABMON_9 = 41,ABMON_10 = 42,ABMON_11 = 43,ABMON_12 = 44,};
enum MACRO_ABORT {ABORT = 238,};
enum MACRO_ABORT_CHAR {ABORT_CHAR = 7,};
enum MACRO_ABSENT : __int64 {ABSENT_BOOLEAN = -1,ABSENT_NUMERIC = -1,ABSENT_STRING = 0,};
enum MACRO_AC : __int64 {AC_PERMIT = 1,AC_DENY = -1,AC_ERROR = -1,};
enum MACRO_ACCESS {ACCESS_READONLY = 18,ACCESS_READWRITE = 19,ACCESS_WRITEONLY = 20,ACCESS_NOACCESS = 21,ACCESS_NOTIFY = 67,ACCESS_CREATE = 48,};
enum MACRO_ACCESSLEVEL {ACCESSLEVEL = 3,ACCESSMATCH = 4,};
enum MACRO_ACCESSNOTIFY {ACCESSNOTIFY = 7,ACCESSSTORAGE = 8,};
enum MACRO_ACCESSPERMS {ACCESSPERMS = 511,};
enum MACRO_ACCESSPREFIX {ACCESSPREFIX = 1,ACCESSMODEL = 2,};
enum MACRO_ACCESSREAD {ACCESSREAD = 5,};
enum MACRO_ACCESSSTATUS {ACCESSSTATUS = 9,};
enum MACRO_ACCESSWRITE {ACCESSWRITE = 6,};
enum MACRO_ACCESSX {ACCESSX_MAX_DESCRIPTORS = 100,ACCESSX_MAX_TABLESIZE = 16384,};
enum MACRO_ACCOUNTING {ACCOUNTING = 9,};
enum MACRO_ACL {ACL_MAX_ENTRIES = 128,ACL_UNDEFINED_ID = 0,};
enum MACRO_AC_APPLE {AC_APPLE_UNIVERSAL_BUILD = 1,};
enum MACRO_AD {AD_TYPE_RESERVED = 0x8000,AD_TYPE_EXTERNAL = 0x4000,AD_TYPE_REGISTERED = 0x2000,AD_TYPE_FIELD_TYPE_MASK = 0x1FFF,};
enum MACRO_ADDRTYPE {ADDRTYPE_INET = 0x2,ADDRTYPE_CHAOS = 0x5,ADDRTYPE_XNS = 0x6,ADDRTYPE_ISO = 0x7,ADDRTYPE_DDP = 0x10,ADDRTYPE_INET6 = 0x18,ADDRTYPE_ADDRPORT = 0x100,ADDRTYPE_IPPORT = 0x101,};
enum MACRO_AD_TYPE {AD_TYPE_INTERNAL_MASK = 0x3FFF,};
enum MACRO_AES {AES_ENCRYPT = 1,AES_DECRYPT = 0,AES_MAXNR = 14,AES_BLOCK_SIZE = 16,};
enum MACRO_AF {AF_SYS_CONTROL = 2,};
enum MACRO_AFORK {AFORK = 0x1,ASU = 0x2,ACOMPAT = 0x4,ACORE = 0x8,AXSIG = 0x10,AHZ = 0x40,};
enum MACRO_AF_COIP {AF_COIP = 20,AF_CNT = 21,};
enum MACRO_AF_INET6 {AF_INET6 = 30,AF_NATM = 31,AF_SYSTEM = 32,AF_NETBIOS = 33,AF_PPP = 34,};
enum MACRO_AF_IPX {AF_IPX = 23,AF_SIP = 24,};
enum MACRO_AF_NDRV {AF_NDRV = 27,AF_ISDN = 28,AF_E164 = 28,};
enum MACRO_AF_RESERVED {AF_RESERVED_36 = 36,AF_IEEE80211 = 37,AF_MAX = 38,};
enum MACRO_AF_UNSPEC {AF_UNSPEC = 0,AF_UNIX = 1,AF_LOCAL = 1,AF_INET = 2,AF_IMPLINK = 3,AF_PUP = 4,AF_CHAOS = 5,AF_NS = 6,AF_ISO = 7,AF_OSI = 7,AF_ECMA = 8,AF_DATAKIT = 9,AF_CCITT = 10,AF_SNA = 11,AF_DECnet = 12,AF_DLI = 13,AF_LAT = 14,AF_HYLINK = 15,AF_APPLETALK = 16,AF_ROUTE = 17,AF_LINK = 18,};
enum MACRO_AI {AI_PASSIVE = 0x1,AI_CANONNAME = 0x2,AI_NUMERICHOST = 0x4,AI_NUMERICSERV = 0x1000,AI_ALL = 0x100,AI_V4MAPPED_CFG = 0x200,AI_ADDRCONFIG = 0x400,AI_V4MAPPED = 0x800,AI_DEFAULT = 0x600,};
enum MACRO_AIO {AIO_ALLDONE = 0x1,AIO_CANCELED = 0x2,AIO_NOTCANCELED = 0x4,};
enum MACRO_AIO_LISTIO {AIO_LISTIO_MAX = 16,};
enum MACRO_ALL {ALL_MOUSE_EVENTS = 134217727,};
enum MACRO_ALLDELAY : __int64 {ALLDELAY = 65280,CRTBS = 65536,PRTERA = 131072,CRTERA = 262144,TILDE = 524288,MDMBUF = 1048576,LITOUT = 2097152,TOSTOP = 4194304,FLUSHO = 8388608,NOHANG = 16777216,L001000 = 33554432,CRTKIL = 67108864,PASS8 = 134217728,CTLECH = 268435456,PENDIN = 536870912,DECCTQ = 1073741824,NOFLSH = 2147483648,};
enum MACRO_ALLOCATE {ALLOCATE_THIS_INDEX = 0x0,ALLOCATE_ANY_INDEX = 0x1,ALLOCATE_NEW_INDEX = 0x3,};
enum MACRO_ALLPERMS {ALLPERMS = 4095,};
enum MACRO_ALL_VIFS {ALL_VIFS = 65535,};
enum MACRO_ALRMTYPE {ALRMTYPE = 0xFF,};
enum MACRO_ALT {ALT_DIGITS = 49,};
enum MACRO_ANNOUNCE {ANNOUNCE = 3,};
enum MACRO_ANY : __int64 {ANY_INTEGER_INDEX = -1,ANY_STRING_INDEX = 0,ANY_OID_INDEX = 0,};
enum MACRO_ANYADDR {ANYADDR = 0,};
enum MACRO_ANYP {ANYP = 0xC0,NLDELAY = 0x300,TBDELAY = 0xC00,};
enum MACRO_AO {AO = 245,};
enum MACRO_AP : __int64 {AP_OPTS_RESERVED = 0x80000000,AP_OPTS_USE_SESSION_KEY = 0x40000000,AP_OPTS_MUTUAL_REQUIRED = 0x20000000,AP_OPTS_USE_SUBKEY = 0x1,AP_OPTS_WIRE_MASK = 0xFFFFFFF0,};
enum MACRO_APPLE {APPLE_IF_FAM_LOOPBACK = 1,APPLE_IF_FAM_ETHERNET = 2,APPLE_IF_FAM_SLIP = 3,APPLE_IF_FAM_TUN = 4,APPLE_IF_FAM_VLAN = 5,APPLE_IF_FAM_PPP = 6,APPLE_IF_FAM_PVC = 7,APPLE_IF_FAM_DISC = 8,APPLE_IF_FAM_MDECAP = 9,APPLE_IF_FAM_GIF = 10,APPLE_IF_FAM_FAITH = 11,APPLE_IF_FAM_STF = 12,APPLE_IF_FAM_FIREWIRE = 13,APPLE_IF_FAM_BOND = 14,};
enum MACRO_AQ {AQ_HIWATER = 100,AQ_MAXHIGH = 10000,AQ_LOWATER = 10,AQ_BUFSZ = 32767,AQ_MAXBUFSZ = 1048576,};
enum MACRO_ARCDENSITY {ARCDENSITY = 2,};
enum MACRO_AREGTYPE {AREGTYPE = 0,LNKTYPE = 49,};
enum MACRO_ARG {ARG_MAX = 262144,CHILD_MAX = 266,GID_MAX = 2147483647,LINK_MAX = 32767,};
enum MACRO_ARP {ARP_SCAN_FOUR_ARGUMENTS = 1,};
enum MACRO_ARPHRD {ARPHRD_ETHER = 1,ARPHRD_IEEE802 = 6,ARPHRD_FRELAY = 15,ARPHRD_IEEE1394 = 24,ARPHRD_IEEE1394_EUI64 = 27,};
enum MACRO_ARPOP {ARPOP_REQUEST = 1,ARPOP_REPLY = 2,ARPOP_REVREQUEST = 3,ARPOP_REVREPLY = 4,ARPOP_INVREQUEST = 8,ARPOP_INVREPLY = 9,};
enum MACRO_ASL {ASL_LEVEL_EMERG = 0,ASL_LEVEL_ALERT = 1,ASL_LEVEL_CRIT = 2,ASL_LEVEL_ERR = 3,ASL_LEVEL_WARNING = 4,ASL_LEVEL_NOTICE = 5,ASL_LEVEL_INFO = 6,ASL_LEVEL_DEBUG = 7,ASL_QUERY_OP_CASEFOLD = 16,ASL_QUERY_OP_PREFIX = 32,ASL_QUERY_OP_SUFFIX = 64,ASL_QUERY_OP_SUBSTRING = 96,ASL_QUERY_OP_NUMERIC = 128,ASL_QUERY_OP_REGEX = 256,ASL_QUERY_OP_EQUAL = 1,ASL_QUERY_OP_GREATER = 2,ASL_QUERY_OP_GREATER_EQUAL = 3,ASL_QUERY_OP_LESS = 4,ASL_QUERY_OP_LESS_EQUAL = 5,ASL_QUERY_OP_NOT_EQUAL = 6,ASL_QUERY_OP_TRUE = 7,ASL_TYPE_MSG = 0,ASL_TYPE_QUERY = 1,ASL_FILTER_MASK_EMERG = 1,ASL_FILTER_MASK_ALERT = 2,ASL_FILTER_MASK_CRIT = 4,ASL_FILTER_MASK_ERR = 8,ASL_FILTER_MASK_WARNING = 16,ASL_FILTER_MASK_NOTICE = 32,ASL_FILTER_MASK_INFO = 64,ASL_FILTER_MASK_DEBUG = 128,ASL_OPT_STDERR = 1,ASL_OPT_NO_DELAY = 2,ASL_OPT_NO_REMOTE = 4,};
enum MACRO_ASN {ASN_BOOLEAN = 0x1,ASN_INTEGER = 0x2,ASN_BIT_STR = 0x3,ASN_OCTET_STR = 0x4,ASN_NULL = 0x5,ASN_OBJECT_ID = 0x6,ASN_SEQUENCE = 0x10,ASN_SET = 0x11,ASN_UNIVERSAL = 0x0,ASN_APPLICATION = 0x40,ASN_CONTEXT = 0x80,ASN_PRIVATE = 0xC0,ASN_PRIMITIVE = 0x0,ASN_CONSTRUCTOR = 0x20,ASN_LONG_LEN = 0x80,ASN_EXTENSION_ID = 0x1F,ASN_BIT8 = 0x80,ASN_OPAQUE_TAG1 = 0x9F,ASN_OPAQUE_TAG2 = 0x30,ASN_OPAQUE_TAG2U = 0x2F,ASN_APP_OPAQUE = 0x44,ASN_APP_COUNTER64 = 0x46,ASN_APP_FLOAT = 0x48,ASN_APP_DOUBLE = 0x49,ASN_APP_I64 = 0x4A,ASN_APP_U64 = 0x4B,ASN_APP_UNION = 0xC1,ASN_OPAQUE_COUNTER64 = 0x76,ASN_OPAQUE_COUNTER64_MX_BER_LEN = 0xC,ASN_OPAQUE_FLOAT = 0x78,ASN_OPAQUE_FLOAT_BER_LEN = 0x7,ASN_OPAQUE_DOUBLE = 0x79,ASN_OPAQUE_DOUBLE_BER_LEN = 0xB,ASN_OPAQUE_I64 = 0x7A,ASN_OPAQUE_I64_MX_BER_LEN = 0xB,ASN_OPAQUE_U64 = 0x7B,ASN_OPAQUE_U64_MX_BER_LEN = 0xC,ASN_PRIV_INCL_RANGE = 0xC2,ASN_PRIV_EXCL_RANGE = 0xC3,ASN_PRIV_DELEGATED = 0xC5,ASN_PRIV_IMPLIED_OCTET_STR = 0xC4,ASN_PRIV_IMPLIED_OBJECT_ID = 0xC6,ASN_PRIV_RETRY = 0xC7,};
enum MACRO_ASN1 {ASN1_BAD_TIMEFORMAT = 1859794432,ASN1_MISSING_FIELD = 1859794433,ASN1_MISPLACED_FIELD = 1859794434,ASN1_TYPE_MISMATCH = 1859794435,ASN1_OVERFLOW = 1859794436,ASN1_OVERRUN = 1859794437,ASN1_BAD_ID = 1859794438,ASN1_BAD_LENGTH = 1859794439,ASN1_BAD_FORMAT = 1859794440,ASN1_PARSE_ERROR = 1859794441,ASN1_BAD_GMTIME = 1859794442,ASN1_MISMATCH_INDEF = 1859794443,ASN1_MISSING_EOC = 1859794444,};
enum MACRO_ASN1_F {ASN1_F_A2D_ASN1_OBJECT = 100,ASN1_F_A2I_ASN1_ENUMERATED = 101,ASN1_F_A2I_ASN1_INTEGER = 102,ASN1_F_A2I_ASN1_STRING = 103,ASN1_F_APPEND_EXP = 176,ASN1_F_ASN1_BIT_STRING_SET_BIT = 183,ASN1_F_ASN1_CB = 177,ASN1_F_ASN1_CHECK_TLEN = 104,ASN1_F_ASN1_COLLATE_PRIMITIVE = 105,ASN1_F_ASN1_COLLECT = 106,ASN1_F_ASN1_D2I_EX_PRIMITIVE = 108,ASN1_F_ASN1_D2I_FP = 109,ASN1_F_ASN1_D2I_READ_BIO = 107,ASN1_F_ASN1_DIGEST = 184,ASN1_F_ASN1_DO_ADB = 110,ASN1_F_ASN1_DUP = 111,ASN1_F_ASN1_ENUMERATED_SET = 112,ASN1_F_ASN1_ENUMERATED_TO_BN = 113,ASN1_F_ASN1_EX_C2I = 204,ASN1_F_ASN1_FIND_END = 190,ASN1_F_ASN1_GENERALIZEDTIME_SET = 185,ASN1_F_ASN1_GENERATE_V3 = 178,ASN1_F_ASN1_GET_OBJECT = 114,ASN1_F_ASN1_HEADER_NEW = 115,ASN1_F_ASN1_I2D_BIO = 116,ASN1_F_ASN1_I2D_FP = 117,ASN1_F_ASN1_INTEGER_SET = 118,ASN1_F_ASN1_INTEGER_TO_BN = 119,ASN1_F_ASN1_ITEM_D2I_FP = 206,ASN1_F_ASN1_ITEM_DUP = 191,ASN1_F_ASN1_ITEM_EX_COMBINE_NEW = 121,ASN1_F_ASN1_ITEM_EX_D2I = 120,ASN1_F_ASN1_ITEM_I2D_BIO = 192,ASN1_F_ASN1_ITEM_I2D_FP = 193,ASN1_F_ASN1_ITEM_PACK = 198,ASN1_F_ASN1_ITEM_SIGN = 195,ASN1_F_ASN1_ITEM_UNPACK = 199,ASN1_F_ASN1_ITEM_VERIFY = 197,ASN1_F_ASN1_MBSTRING_NCOPY = 122,ASN1_F_ASN1_OBJECT_NEW = 123,ASN1_F_ASN1_OUTPUT_DATA = 207,ASN1_F_ASN1_PACK_STRING = 124,ASN1_F_ASN1_PCTX_NEW = 205,ASN1_F_ASN1_PKCS5_PBE_SET = 125,ASN1_F_ASN1_SEQ_PACK = 126,ASN1_F_ASN1_SEQ_UNPACK = 127,ASN1_F_ASN1_SIGN = 128,ASN1_F_ASN1_STR2TYPE = 179,ASN1_F_ASN1_STRING_SET = 186,ASN1_F_ASN1_STRING_TABLE_ADD = 129,ASN1_F_ASN1_STRING_TYPE_NEW = 130,ASN1_F_ASN1_TEMPLATE_EX_D2I = 132,ASN1_F_ASN1_TEMPLATE_NEW = 133,ASN1_F_ASN1_TEMPLATE_NOEXP_D2I = 131,ASN1_F_ASN1_TIME_SET = 175,ASN1_F_ASN1_TYPE_GET_INT_OCTETSTRING = 134,ASN1_F_ASN1_TYPE_GET_OCTETSTRING = 135,ASN1_F_ASN1_UNPACK_STRING = 136,ASN1_F_ASN1_UTCTIME_SET = 187,ASN1_F_ASN1_VERIFY = 137,ASN1_F_B64_READ_ASN1 = 208,ASN1_F_B64_WRITE_ASN1 = 209,ASN1_F_BITSTR_CB = 180,ASN1_F_BN_TO_ASN1_ENUMERATED = 138,ASN1_F_BN_TO_ASN1_INTEGER = 139,ASN1_F_C2I_ASN1_BIT_STRING = 189,ASN1_F_C2I_ASN1_INTEGER = 194,ASN1_F_C2I_ASN1_OBJECT = 196,ASN1_F_COLLECT_DATA = 140,ASN1_F_D2I_ASN1_BIT_STRING = 141,ASN1_F_D2I_ASN1_BOOLEAN = 142,ASN1_F_D2I_ASN1_BYTES = 143,ASN1_F_D2I_ASN1_GENERALIZEDTIME = 144,ASN1_F_D2I_ASN1_HEADER = 145,ASN1_F_D2I_ASN1_INTEGER = 146,ASN1_F_D2I_ASN1_OBJECT = 147,ASN1_F_D2I_ASN1_SET = 148,ASN1_F_D2I_ASN1_TYPE_BYTES = 149,ASN1_F_D2I_ASN1_UINTEGER = 150,ASN1_F_D2I_ASN1_UTCTIME = 151,ASN1_F_D2I_NETSCAPE_RSA = 152,ASN1_F_D2I_NETSCAPE_RSA_2 = 153,ASN1_F_D2I_PRIVATEKEY = 154,ASN1_F_D2I_PUBLICKEY = 155,ASN1_F_D2I_RSA_NET = 200,ASN1_F_D2I_RSA_NET_2 = 201,ASN1_F_D2I_X509 = 156,ASN1_F_D2I_X509_CINF = 157,ASN1_F_D2I_X509_PKEY = 159,ASN1_F_I2D_ASN1_SET = 188,ASN1_F_I2D_ASN1_TIME = 160,ASN1_F_I2D_DSA_PUBKEY = 161,ASN1_F_I2D_EC_PUBKEY = 181,ASN1_F_I2D_PRIVATEKEY = 163,ASN1_F_I2D_PUBLICKEY = 164,ASN1_F_I2D_RSA_NET = 162,ASN1_F_I2D_RSA_PUBKEY = 165,ASN1_F_LONG_C2I = 166,ASN1_F_OID_MODULE_INIT = 174,ASN1_F_PARSE_TAGGING = 182,ASN1_F_PKCS5_PBE2_SET = 167,ASN1_F_PKCS5_PBE_SET = 202,ASN1_F_SMIME_READ_ASN1 = 210,ASN1_F_SMIME_TEXT = 211,ASN1_F_X509_CINF_NEW = 168,ASN1_F_X509_CRL_ADD0_REVOKED = 169,ASN1_F_X509_INFO_NEW = 170,ASN1_F_X509_NAME_ENCODE = 203,ASN1_F_X509_NAME_EX_D2I = 158,ASN1_F_X509_NAME_EX_NEW = 171,ASN1_F_X509_NEW = 172,ASN1_F_X509_PKEY_NEW = 173,ASN1_R_ADDING_OBJECT = 171,ASN1_R_ASN1_PARSE_ERROR = 198,ASN1_R_ASN1_SIG_PARSE_ERROR = 199,ASN1_R_AUX_ERROR = 100,ASN1_R_BAD_CLASS = 101,ASN1_R_BAD_OBJECT_HEADER = 102,ASN1_R_BAD_PASSWORD_READ = 103,ASN1_R_BAD_TAG = 104,ASN1_R_BMPSTRING_IS_WRONG_LENGTH = 210,ASN1_R_BN_LIB = 105,ASN1_R_BOOLEAN_IS_WRONG_LENGTH = 106,ASN1_R_BUFFER_TOO_SMALL = 107,ASN1_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER = 108,ASN1_R_DATA_IS_WRONG = 109,ASN1_R_DECODE_ERROR = 110,ASN1_R_DECODING_ERROR = 111,ASN1_R_DEPTH_EXCEEDED = 174,ASN1_R_ENCODE_ERROR = 112,ASN1_R_ERROR_GETTING_TIME = 173,ASN1_R_ERROR_LOADING_SECTION = 172,ASN1_R_ERROR_PARSING_SET_ELEMENT = 113,ASN1_R_ERROR_SETTING_CIPHER_PARAMS = 114,ASN1_R_EXPECTING_AN_INTEGER = 115,ASN1_R_EXPECTING_AN_OBJECT = 116,ASN1_R_EXPECTING_A_BOOLEAN = 117,ASN1_R_EXPECTING_A_TIME = 118,ASN1_R_EXPLICIT_LENGTH_MISMATCH = 119,ASN1_R_EXPLICIT_TAG_NOT_CONSTRUCTED = 120,ASN1_R_FIELD_MISSING = 121,ASN1_R_FIRST_NUM_TOO_LARGE = 122,ASN1_R_HEADER_TOO_LONG = 123,ASN1_R_ILLEGAL_BITSTRING_FORMAT = 175,ASN1_R_ILLEGAL_BOOLEAN = 176,ASN1_R_ILLEGAL_CHARACTERS = 124,ASN1_R_ILLEGAL_FORMAT = 177,ASN1_R_ILLEGAL_HEX = 178,ASN1_R_ILLEGAL_IMPLICIT_TAG = 179,ASN1_R_ILLEGAL_INTEGER = 180,ASN1_R_ILLEGAL_NESTED_TAGGING = 181,ASN1_R_ILLEGAL_NULL = 125,ASN1_R_ILLEGAL_NULL_VALUE = 182,ASN1_R_ILLEGAL_OBJECT = 183,ASN1_R_ILLEGAL_OPTIONAL_ANY = 126,ASN1_R_ILLEGAL_OPTIONS_ON_ITEM_TEMPLATE = 170,ASN1_R_ILLEGAL_TAGGED_ANY = 127,ASN1_R_ILLEGAL_TIME_VALUE = 184,ASN1_R_INTEGER_NOT_ASCII_FORMAT = 185,ASN1_R_INTEGER_TOO_LARGE_FOR_LONG = 128,ASN1_R_INVALID_BMPSTRING_LENGTH = 129,ASN1_R_INVALID_DIGIT = 130,ASN1_R_INVALID_MIME_TYPE = 200,ASN1_R_INVALID_MODIFIER = 186,ASN1_R_INVALID_NUMBER = 187,ASN1_R_INVALID_OBJECT_ENCODING = 212,ASN1_R_INVALID_SEPARATOR = 131,ASN1_R_INVALID_TIME_FORMAT = 132,ASN1_R_INVALID_UNIVERSALSTRING_LENGTH = 133,ASN1_R_INVALID_UTF8STRING = 134,ASN1_R_IV_TOO_LARGE = 135,ASN1_R_LENGTH_ERROR = 136,ASN1_R_LIST_ERROR = 188,ASN1_R_MIME_NO_CONTENT_TYPE = 201,ASN1_R_MIME_PARSE_ERROR = 202,ASN1_R_MIME_SIG_PARSE_ERROR = 203,ASN1_R_MISSING_EOC = 137,ASN1_R_MISSING_SECOND_NUMBER = 138,ASN1_R_MISSING_VALUE = 189,ASN1_R_MSTRING_NOT_UNIVERSAL = 139,ASN1_R_MSTRING_WRONG_TAG = 140,ASN1_R_NESTED_ASN1_STRING = 197,ASN1_R_NON_HEX_CHARACTERS = 141,ASN1_R_NOT_ASCII_FORMAT = 190,ASN1_R_NOT_ENOUGH_DATA = 142,ASN1_R_NO_CONTENT_TYPE = 204,ASN1_R_NO_MATCHING_CHOICE_TYPE = 143,ASN1_R_NO_MULTIPART_BODY_FAILURE = 205,ASN1_R_NO_MULTIPART_BOUNDARY = 206,ASN1_R_NO_SIG_CONTENT_TYPE = 207,ASN1_R_NULL_IS_WRONG_LENGTH = 144,ASN1_R_OBJECT_NOT_ASCII_FORMAT = 191,ASN1_R_ODD_NUMBER_OF_CHARS = 145,ASN1_R_PRIVATE_KEY_HEADER_MISSING = 146,ASN1_R_SECOND_NUMBER_TOO_LARGE = 147,ASN1_R_SEQUENCE_LENGTH_MISMATCH = 148,ASN1_R_SEQUENCE_NOT_CONSTRUCTED = 149,ASN1_R_SEQUENCE_OR_SET_NEEDS_CONFIG = 192,ASN1_R_SHORT_LINE = 150,ASN1_R_SIG_INVALID_MIME_TYPE = 208,ASN1_R_STREAMING_NOT_SUPPORTED = 209,ASN1_R_STRING_TOO_LONG = 151,ASN1_R_STRING_TOO_SHORT = 152,ASN1_R_TAG_VALUE_TOO_HIGH = 153,ASN1_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD = 154,ASN1_R_TIME_NOT_ASCII_FORMAT = 193,ASN1_R_TOO_LONG = 155,ASN1_R_TYPE_NOT_CONSTRUCTED = 156,ASN1_R_UNABLE_TO_DECODE_RSA_KEY = 157,ASN1_R_UNABLE_TO_DECODE_RSA_PRIVATE_KEY = 158,ASN1_R_UNEXPECTED_EOC = 159,ASN1_R_UNIVERSALSTRING_IS_WRONG_LENGTH = 211,ASN1_R_UNKNOWN_FORMAT = 160,ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM = 161,ASN1_R_UNKNOWN_OBJECT_TYPE = 162,ASN1_R_UNKNOWN_PUBLIC_KEY_TYPE = 163,ASN1_R_UNKNOWN_TAG = 194,ASN1_R_UNKOWN_FORMAT = 195,ASN1_R_UNSUPPORTED_ANY_DEFINED_BY_TYPE = 164,ASN1_R_UNSUPPORTED_CIPHER = 165,ASN1_R_UNSUPPORTED_ENCRYPTION_ALGORITHM = 166,ASN1_R_UNSUPPORTED_PUBLIC_KEY_TYPE = 167,ASN1_R_UNSUPPORTED_TYPE = 196,ASN1_R_WRONG_TAG = 168,ASN1_R_WRONG_TYPE = 169,ASN1_TFLG_OPTIONAL = 1,ASN1_TFLG_SET_OF = 2,ASN1_TFLG_SEQUENCE_OF = 4,ASN1_TFLG_SET_ORDER = 6,ASN1_TFLG_SK_MASK = 6,ASN1_TFLG_IMPTAG = 8,ASN1_TFLG_EXPTAG = 16,ASN1_TFLG_TAG_MASK = 24,ASN1_TFLG_UNIVERSAL = 0,ASN1_TFLG_APPLICATION = 64,ASN1_TFLG_CONTEXT = 128,ASN1_TFLG_PRIVATE = 192,ASN1_TFLG_TAG_CLASS = 192,ASN1_TFLG_ADB_MASK = 768,ASN1_TFLG_ADB_OID = 256,ASN1_TFLG_ADB_INT = 512,ASN1_TFLG_COMBINE = 1024,ASN1_TFLG_NDEF = 2048,ASN1_ITYPE_PRIMITIVE = 0,ASN1_ITYPE_SEQUENCE = 1,ASN1_ITYPE_CHOICE = 2,ASN1_ITYPE_COMPAT = 3,ASN1_ITYPE_EXTERN = 4,ASN1_ITYPE_MSTRING = 5,ASN1_ITYPE_NDEF_SEQUENCE = 6,ASN1_AFLG_REFCOUNT = 1,ASN1_AFLG_ENCODING = 2,ASN1_AFLG_BROKEN = 4,ASN1_OP_NEW_PRE = 0,ASN1_OP_NEW_POST = 1,ASN1_OP_FREE_PRE = 2,ASN1_OP_FREE_POST = 3,ASN1_OP_D2I_PRE = 4,ASN1_OP_D2I_POST = 5,ASN1_OP_I2D_PRE = 6,ASN1_OP_I2D_POST = 7,};
enum MACRO_ASN1_OBJECT {ASN1_OBJECT_FLAG_DYNAMIC = 0x1,ASN1_OBJECT_FLAG_CRITICAL = 0x2,ASN1_OBJECT_FLAG_DYNAMIC_STRINGS = 0x4,ASN1_OBJECT_FLAG_DYNAMIC_DATA = 0x8,ASN1_STRING_FLAG_BITS_LEFT = 0x8,ASN1_STRING_FLAG_NDEF = 0x10,ASN1_STRING_FLAG_CONT = 0x20,ASN1_LONG_UNDEF = 0x7FFFFFFF,};
enum MACRO_ASN1_STRFLGS {ASN1_STRFLGS_ESC_2253 = 1,ASN1_STRFLGS_ESC_CTRL = 2,ASN1_STRFLGS_ESC_MSB = 4,ASN1_STRFLGS_ESC_QUOTE = 8,};
enum MACRO_ASN1_STRFLGS_UTF8 {ASN1_STRFLGS_UTF8_CONVERT = 0x10,ASN1_STRFLGS_IGNORE_TYPE = 0x20,ASN1_STRFLGS_SHOW_TYPE = 0x40,ASN1_STRFLGS_DUMP_ALL = 0x80,ASN1_STRFLGS_DUMP_UNKNOWN = 0x100,ASN1_STRFLGS_DUMP_DER = 0x200,ASN1_STRFLGS_RFC2253 = 0x317,};
enum MACRO_ASNT {ASNT_OPAQUE = 68,};
enum MACRO_ASN_IPADDRESS {ASN_IPADDRESS = 64,ASN_COUNTER = 65,ASN_GAUGE = 66,ASN_UNSIGNED = 66,ASN_TIMETICKS = 67,ASN_OPAQUE = 68,ASN_NSAP = 69,ASN_COUNTER64 = 70,ASN_UINTEGER = 71,ASN_FLOAT = 72,ASN_DOUBLE = 73,ASN_INTEGER64 = 74,ASN_UNSIGNED64 = 75,};
enum MACRO_AT {AT_IPC_MSG = 1,AT_IPC_SEM = 2,AT_IPC_SHM = 3,};
enum MACRO_ATF {ATF_INUSE = 0x1,ATF_COM = 0x2,ATF_PERM = 0x4,ATF_PUBL = 0x8,ATF_USETRAILERS = 0x10,};
enum MACRO_ATTR {ATTR_BIT_MAP_COUNT = 5,};
enum MACRO_ATTR_CMN : __int64 {ATTR_CMN_NAME = 0x1,ATTR_CMN_DEVID = 0x2,ATTR_CMN_FSID = 0x4,ATTR_CMN_OBJTYPE = 0x8,ATTR_CMN_OBJTAG = 0x10,ATTR_CMN_OBJID = 0x20,ATTR_CMN_OBJPERMANENTID = 0x40,ATTR_CMN_PAROBJID = 0x80,ATTR_CMN_SCRIPT = 0x100,ATTR_CMN_CRTIME = 0x200,ATTR_CMN_MODTIME = 0x400,ATTR_CMN_CHGTIME = 0x800,ATTR_CMN_ACCTIME = 0x1000,ATTR_CMN_BKUPTIME = 0x2000,ATTR_CMN_FNDRINFO = 0x4000,ATTR_CMN_OWNERID = 0x8000,ATTR_CMN_GRPID = 0x10000,ATTR_CMN_ACCESSMASK = 0x20000,ATTR_CMN_FLAGS = 0x40000,ATTR_CMN_USERACCESS = 0x200000,ATTR_CMN_EXTENDED_SECURITY = 0x400000,ATTR_CMN_UUID = 0x800000,ATTR_CMN_GRPUUID = 0x1000000,ATTR_CMN_FILEID = 0x2000000,ATTR_CMN_PARENTID = 0x4000000,ATTR_CMN_FULLPATH = 0x8000000,ATTR_CMN_ADDEDTIME = 0x10000000,ATTR_CMN_RETURNED_ATTRS = 0x80000000,ATTR_CMN_VALIDMASK = 0x9FE7FFFF,ATTR_CMN_SETMASK = 0x1C7FF00,ATTR_CMN_VOLSETMASK = 0x6700,ATTR_VOL_FSTYPE = 0x1,ATTR_VOL_SIGNATURE = 0x2,ATTR_VOL_SIZE = 0x4,ATTR_VOL_SPACEFREE = 0x8,ATTR_VOL_SPACEAVAIL = 0x10,ATTR_VOL_MINALLOCATION = 0x20,ATTR_VOL_ALLOCATIONCLUMP = 0x40,ATTR_VOL_IOBLOCKSIZE = 0x80,ATTR_VOL_OBJCOUNT = 0x100,ATTR_VOL_FILECOUNT = 0x200,ATTR_VOL_DIRCOUNT = 0x400,ATTR_VOL_MAXOBJCOUNT = 0x800,ATTR_VOL_MOUNTPOINT = 0x1000,ATTR_VOL_NAME = 0x2000,ATTR_VOL_MOUNTFLAGS = 0x4000,ATTR_VOL_MOUNTEDDEVICE = 0x8000,ATTR_VOL_ENCODINGSUSED = 0x10000,ATTR_VOL_CAPABILITIES = 0x20000,ATTR_VOL_UUID = 0x40000,ATTR_VOL_ATTRIBUTES = 0x40000000,ATTR_VOL_INFO = 0x80000000,ATTR_VOL_VALIDMASK = 0xC007FFFF,ATTR_VOL_SETMASK = 0x80002000,ATTR_DIR_LINKCOUNT = 0x1,ATTR_DIR_ENTRYCOUNT = 0x2,ATTR_DIR_MOUNTSTATUS = 0x4,};
enum MACRO_ATTR_DIR {ATTR_DIR_VALIDMASK = 0x7,ATTR_DIR_SETMASK = 0x0,ATTR_FILE_LINKCOUNT = 0x1,ATTR_FILE_TOTALSIZE = 0x2,ATTR_FILE_ALLOCSIZE = 0x4,ATTR_FILE_IOBLOCKSIZE = 0x8,ATTR_FILE_DEVTYPE = 0x20,ATTR_FILE_FORKCOUNT = 0x80,ATTR_FILE_FORKLIST = 0x100,ATTR_FILE_DATALENGTH = 0x200,ATTR_FILE_DATAALLOCSIZE = 0x400,ATTR_FILE_RSRCLENGTH = 0x1000,ATTR_FILE_RSRCALLOCSIZE = 0x2000,ATTR_FILE_VALIDMASK = 0x37FF,ATTR_FILE_SETMASK = 0x20,ATTR_FORK_TOTALSIZE = 0x1,ATTR_FORK_ALLOCSIZE = 0x2,ATTR_FORK_VALIDMASK = 0x3,ATTR_FORK_SETMASK = 0x0,ATTR_CMN_NAMEDATTRCOUNT = 0x80000,ATTR_CMN_NAMEDATTRLIST = 0x100000,ATTR_FILE_CLUMPSIZE = 0x10,ATTR_FILE_FILETYPE = 0x40,ATTR_FILE_DATAEXTENTS = 0x800,ATTR_FILE_RSRCEXTENTS = 0x4000,};
enum MACRO_ATTR_MAX {ATTR_MAX_BUFFER = 8192,};
enum MACRO_AU : __int64 {AU_DEFAUDITID = 4294967295,AU_DEFAUDITSID = 0,AU_ASSIGN_ASID = -1,};
enum MACRO_AUC : __int64 {AUC_UNSET = 0,AUC_AUDITING = 1,AUC_NOAUDIT = 2,AUC_DISABLED = -1,};
enum MACRO_AUDIT : __int64 {AUDIT_RECORD_MAGIC = 0x828A0F1B,};
enum MACRO_AUDIT_CNT {AUDIT_CNT = 0x1,AUDIT_AHLT = 0x2,AUDIT_ARGV = 0x4,AUDIT_ARGE = 0x8,AUDIT_SEQ = 0x10,AUDIT_WINDATA = 0x20,AUDIT_USER = 0x40,AUDIT_GROUP = 0x80,AUDIT_TRAIL = 0x100,AUDIT_PATH = 0x200,AUDIT_SCNT = 0x400,AUDIT_PUBLIC = 0x800,AUDIT_ZONENAME = 0x1000,AUDIT_PERZONE = 0x2000,};
enum MACRO_AUDIT_HARD {AUDIT_HARD_LIMIT_FREE_BLOCKS = 4,AUDIT_TRIGGER_MIN = 1,AUDIT_TRIGGER_LOW_SPACE = 1,AUDIT_TRIGGER_ROTATE_KERNEL = 2,AUDIT_TRIGGER_READ_FILE = 3,AUDIT_TRIGGER_CLOSE_AND_DIE = 4,AUDIT_TRIGGER_NO_SPACE = 5,AUDIT_TRIGGER_ROTATE_USER = 6,AUDIT_TRIGGER_INITIALIZE = 7,AUDIT_TRIGGER_EXPIRE_TRAILS = 8,AUDIT_TRIGGER_MAX = 8,};
enum MACRO_AUDIT_MAX {AUDIT_MAX_GROUPS = 16,AUDIT_HEADER_VERSION_OLDDARWIN = 1,AUDIT_HEADER_VERSION_SOLARIS = 2,AUDIT_HEADER_VERSION_TSOL25 = 3,AUDIT_HEADER_VERSION_TSOL = 4,AUDIT_HEADER_VERSION_OPENBSM10 = 10,AUDIT_HEADER_VERSION_OPENBSM11 = 11,AUDIT_HEADER_VERSION_OPENBSM = 11,};
enum MACRO_AUDIT_MAX_ARGS {AUDIT_MAX_ARGS = 128,AUDIT_MAX_ENV = 128,};
enum MACRO_AUDIT_OFF {AUDIT_OFF = 2,AUDIT_ON = 1,};
enum MACRO_AUE {AUE_NULL = 0,AUE_EXIT = 1,AUE_FORK = 2,AUE_FORKALL = 2,AUE_OPEN = 3,AUE_CREAT = 4,AUE_LINK = 5,AUE_UNLINK = 6,AUE_DELETE = 6,AUE_EXEC = 7,AUE_CHDIR = 8,AUE_MKNOD = 9,AUE_CHMOD = 10,AUE_CHOWN = 11,AUE_UMOUNT = 12,AUE_JUNK = 13,AUE_ACCESS = 14,AUE_KILL = 15,AUE_STAT = 16,AUE_LSTAT = 17,AUE_ACCT = 18,AUE_MCTL = 19,AUE_REBOOT = 20,AUE_SYMLINK = 21,AUE_READLINK = 22,AUE_EXECVE = 23,AUE_CHROOT = 24,AUE_VFORK = 25,AUE_SETGROUPS = 26,AUE_SETPGRP = 27,AUE_SWAPON = 28,AUE_SETHOSTNAME = 29,AUE_FCNTL = 30,AUE_SETPRIORITY = 31,AUE_CONNECT = 32,AUE_ACCEPT = 33,AUE_BIND = 34,AUE_SETSOCKOPT = 35,AUE_VTRACE = 36,AUE_SETTIMEOFDAY = 37,AUE_FCHOWN = 38,AUE_FCHMOD = 39,AUE_SETREUID = 40,AUE_SETREGID = 41,AUE_RENAME = 42,AUE_TRUNCATE = 43,AUE_FTRUNCATE = 44,AUE_FLOCK = 45,AUE_SHUTDOWN = 46,AUE_MKDIR = 47,AUE_RMDIR = 48,AUE_UTIMES = 49,AUE_ADJTIME = 50,AUE_SETRLIMIT = 51,AUE_KILLPG = 52,AUE_NFS_SVC = 53,AUE_STATFS = 54,AUE_FSTATFS = 55,AUE_UNMOUNT = 56,AUE_ASYNC_DAEMON = 57,AUE_NFS_GETFH = 58,AUE_SETDOMAINNAME = 59,AUE_QUOTACTL = 60,AUE_EXPORTFS = 61,AUE_MOUNT = 62,AUE_SEMSYS = 63,AUE_MSGSYS = 64,AUE_SHMSYS = 65,AUE_BSMSYS = 66,AUE_RFSSYS = 67,AUE_FCHDIR = 68,AUE_FCHROOT = 69,AUE_VPIXSYS = 70,AUE_PATHCONF = 71,AUE_OPEN_R = 72,AUE_OPEN_RC = 73,AUE_OPEN_RT = 74,AUE_OPEN_RTC = 75,AUE_OPEN_W = 76,AUE_OPEN_WC = 77,AUE_OPEN_WT = 78,AUE_OPEN_WTC = 79,AUE_OPEN_RW = 80,AUE_OPEN_RWC = 81,AUE_OPEN_RWT = 82,AUE_OPEN_RWTC = 83,AUE_MSGCTL = 84,AUE_MSGCTL_RMID = 85,AUE_MSGCTL_SET = 86,AUE_MSGCTL_STAT = 87,AUE_MSGGET = 88,AUE_MSGRCV = 89,AUE_MSGSND = 90,AUE_SHMCTL = 91,AUE_SHMCTL_RMID = 92,AUE_SHMCTL_SET = 93,AUE_SHMCTL_STAT = 94,AUE_SHMGET = 95,AUE_SHMAT = 96,AUE_SHMDT = 97,AUE_SEMCTL = 98,AUE_SEMCTL_RMID = 99,AUE_SEMCTL_SET = 100,AUE_SEMCTL_STAT = 101,AUE_SEMCTL_GETNCNT = 102,AUE_SEMCTL_GETPID = 103,AUE_SEMCTL_GETVAL = 104,AUE_SEMCTL_GETALL = 105,AUE_SEMCTL_GETZCNT = 106,AUE_SEMCTL_SETVAL = 107,AUE_SEMCTL_SETALL = 108,AUE_SEMGET = 109,AUE_SEMOP = 110,AUE_CORE = 111,AUE_CLOSE = 112,AUE_SYSTEMBOOT = 113,AUE_ASYNC_DAEMON_EXIT = 114,AUE_NFSSVC_EXIT = 115,AUE_WRITEL = 128,AUE_WRITEVL = 129,AUE_GETAUID = 130,AUE_SETAUID = 131,AUE_GETAUDIT = 132,AUE_SETAUDIT = 133,AUE_GETUSERAUDIT = 134,AUE_SETUSERAUDIT = 135,AUE_AUDITSVC = 136,AUE_AUDITUSER = 137,AUE_AUDITON = 138,AUE_AUDITON_GTERMID = 139,AUE_AUDITON_STERMID = 140,AUE_AUDITON_GPOLICY = 141,AUE_AUDITON_SPOLICY = 142,AUE_AUDITON_GQCTRL = 145,AUE_AUDITON_SQCTRL = 146,AUE_GETKERNSTATE = 147,AUE_SETKERNSTATE = 148,AUE_GETPORTAUDIT = 149,AUE_AUDITSTAT = 150,AUE_REVOKE = 151,AUE_MAC = 152,AUE_ENTERPROM = 153,AUE_EXITPROM = 154,AUE_IFLOAT = 155,AUE_PFLOAT = 156,AUE_UPRIV = 157,AUE_IOCTL = 158,AUE_SOCKET = 183,AUE_SENDTO = 184,AUE_PIPE = 185,AUE_SOCKETPAIR = 186,AUE_SEND = 187,AUE_SENDMSG = 188,AUE_RECV = 189,AUE_RECVMSG = 190,AUE_RECVFROM = 191,AUE_READ = 192,AUE_GETDENTS = 193,AUE_LSEEK = 194,AUE_WRITE = 195,AUE_WRITEV = 196,AUE_NFS = 197,AUE_READV = 198,AUE_OSTAT = 199,AUE_SETUID = 200,AUE_STIME = 201,AUE_UTIME = 202,AUE_NICE = 203,AUE_OSETPGRP = 204,AUE_SETGID = 205,AUE_READL = 206,AUE_READVL = 207,AUE_FSTAT = 208,AUE_DUP2 = 209,AUE_MMAP = 210,AUE_AUDIT = 211,AUE_PRIOCNTLSYS = 212,AUE_MUNMAP = 213,AUE_SETEGID = 214,AUE_SETEUID = 215,AUE_PUTMSG = 216,AUE_GETMSG = 217,AUE_PUTPMSG = 218,AUE_GETPMSG = 219,AUE_AUDITSYS = 220,AUE_AUDITON_GETKMASK = 221,AUE_AUDITON_SETKMASK = 222,AUE_AUDITON_GETCWD = 223,AUE_AUDITON_GETCAR = 224,AUE_AUDITON_GETSTAT = 225,AUE_AUDITON_SETSTAT = 226,AUE_AUDITON_SETUMASK = 227,AUE_AUDITON_SETSMASK = 228,AUE_AUDITON_GETCOND = 229,AUE_AUDITON_SETCOND = 230,AUE_AUDITON_GETCLASS = 231,AUE_AUDITON_SETCLASS = 232,AUE_FUSERS = 233,AUE_STATVFS = 234,AUE_XSTAT = 235,AUE_LXSTAT = 236,AUE_LCHOWN = 237,AUE_MEMCNTL = 238,AUE_SYSINFO = 239,AUE_XMKNOD = 240,AUE_FORK1 = 241,AUE_MODCTL = 242,AUE_MODLOAD = 243,AUE_MODUNLOAD = 244,AUE_MODCONFIG = 245,AUE_MODADDMAJ = 246,AUE_SOCKACCEPT = 247,AUE_SOCKCONNECT = 248,AUE_SOCKSEND = 249,AUE_SOCKRECEIVE = 250,AUE_ACLSET = 251,AUE_FACLSET = 252,AUE_DOORFS = 253,AUE_DOORFS_DOOR_CALL = 254,AUE_DOORFS_DOOR_RETURN = 255,AUE_DOORFS_DOOR_CREATE = 256,AUE_DOORFS_DOOR_REVOKE = 257,AUE_DOORFS_DOOR_INFO = 258,AUE_DOORFS_DOOR_CRED = 259,AUE_DOORFS_DOOR_BIND = 260,AUE_DOORFS_DOOR_UNBIND = 261,AUE_P_ONLINE = 262,AUE_PROCESSOR_BIND = 263,AUE_INST_SYNC = 264,AUE_SOCKCONFIG = 265,AUE_SETAUDIT_ADDR = 266,AUE_GETAUDIT_ADDR = 267,AUE_UMOUNT2 = 268,AUE_FSAT = 269,AUE_OPENAT_R = 270,AUE_OPENAT_RC = 271,AUE_OPENAT_RT = 272,AUE_OPENAT_RTC = 273,AUE_OPENAT_W = 274,AUE_OPENAT_WC = 275,AUE_OPENAT_WT = 276,AUE_OPENAT_WTC = 277,AUE_OPENAT_RW = 278,AUE_OPENAT_RWC = 279,AUE_OPENAT_RWT = 280,AUE_OPENAT_RWTC = 281,AUE_RENAMEAT = 282,AUE_FSTATAT = 283,AUE_FCHOWNAT = 284,AUE_FUTIMESAT = 285,AUE_UNLINKAT = 286,AUE_CLOCK_SETTIME = 287,AUE_NTP_ADJTIME = 288,AUE_SETPPRIV = 289,AUE_MODDEVPLCY = 290,AUE_MODADDPRIV = 291,AUE_CRYPTOADM = 292,AUE_CONFIGKSSL = 293,AUE_BRANDSYS = 294,AUE_PF_POLICY_ADDRULE = 295,AUE_PF_POLICY_DELRULE = 296,AUE_PF_POLICY_CLONE = 297,AUE_PF_POLICY_FLIP = 298,AUE_PF_POLICY_FLUSH = 299,AUE_PF_POLICY_ALGS = 300,AUE_PORTFS = 301,AUE_DARWIN_GETFSSTAT = 301,AUE_DARWIN_PTRACE = 302,AUE_DARWIN_CHFLAGS = 303,AUE_DARWIN_FCHFLAGS = 304,AUE_DARWIN_PROFILE = 305,AUE_DARWIN_KTRACE = 306,AUE_DARWIN_SETLOGIN = 307,AUE_DARWIN_REBOOT = 308,AUE_DARWIN_REVOKE = 309,AUE_DARWIN_UMASK = 310,AUE_DARWIN_MPROTECT = 311,AUE_DARWIN_SETPRIORITY = 312,AUE_DARWIN_SETTIMEOFDAY = 313,AUE_DARWIN_FLOCK = 314,AUE_DARWIN_MKFIFO = 315,AUE_DARWIN_POLL = 316,AUE_DARWIN_SOCKETPAIR = 317,AUE_DARWIN_FUTIMES = 318,AUE_DARWIN_SETSID = 319,AUE_DARWIN_SETPRIVEXEC = 320,AUE_DARWIN_NFSSVC = 321,AUE_DARWIN_GETFH = 322,AUE_DARWIN_QUOTACTL = 323,AUE_DARWIN_ADDPROFILE = 324,AUE_DARWIN_KDEBUGTRACE = 325,AUE_DARWIN_FSTAT = 326,AUE_DARWIN_FPATHCONF = 327,AUE_DARWIN_GETDIRENTRIES = 328,AUE_DARWIN_TRUNCATE = 329,AUE_DARWIN_FTRUNCATE = 330,AUE_DARWIN_SYSCTL = 331,AUE_DARWIN_MLOCK = 332,AUE_DARWIN_MUNLOCK = 333,AUE_DARWIN_UNDELETE = 334,AUE_DARWIN_GETATTRLIST = 335,AUE_DARWIN_SETATTRLIST = 336,AUE_DARWIN_GETDIRENTRIESATTR = 337,AUE_DARWIN_EXCHANGEDATA = 338,AUE_DARWIN_SEARCHFS = 339,AUE_DARWIN_MINHERIT = 340,AUE_DARWIN_SEMCONFIG = 341,AUE_DARWIN_SEMOPEN = 342,AUE_DARWIN_SEMCLOSE = 343,AUE_DARWIN_SEMUNLINK = 344,AUE_DARWIN_SHMOPEN = 345,AUE_DARWIN_SHMUNLINK = 346,AUE_DARWIN_LOADSHFILE = 347,AUE_DARWIN_RESETSHFILE = 348,AUE_DARWIN_NEWSYSTEMSHREG = 349,AUE_DARWIN_PTHREADKILL = 350,AUE_DARWIN_PTHREADSIGMASK = 351,AUE_DARWIN_AUDITCTL = 352,AUE_DARWIN_RFORK = 353,AUE_DARWIN_LCHMOD = 354,AUE_DARWIN_SWAPOFF = 355,AUE_DARWIN_INITPROCESS = 356,AUE_DARWIN_MAPFD = 357,AUE_DARWIN_TASKFORPID = 358,AUE_DARWIN_PIDFORTASK = 359,AUE_DARWIN_SYSCTL_NONADMIN = 360,AUE_DARWIN_COPYFILE = 361,AUE_GETFSSTAT = 43001,AUE_PTRACE = 43002,AUE_CHFLAGS = 43003,AUE_FCHFLAGS = 43004,AUE_PROFILE = 43005,AUE_KTRACE = 43006,AUE_SETLOGIN = 43007,AUE_OPENBSM_REVOKE = 43008,AUE_UMASK = 43009,AUE_MPROTECT = 43010,AUE_MKFIFO = 43011,AUE_POLL = 43012,AUE_FUTIMES = 43013,AUE_SETSID = 43014,AUE_SETPRIVEXEC = 43015,AUE_ADDPROFILE = 43016,AUE_KDEBUGTRACE = 43017,AUE_KDBUGTRACE = 43017,AUE_OPENBSM_FSTAT = 43018,AUE_FPATHCONF = 43019,AUE_GETDIRENTRIES = 43020,AUE_SYSCTL = 43021,AUE_MLOCK = 43022,AUE_MUNLOCK = 43023,AUE_UNDELETE = 43024,AUE_GETATTRLIST = 43025,AUE_SETATTRLIST = 43026,AUE_GETDIRENTRIESATTR = 43027,AUE_EXCHANGEDATA = 43028,AUE_SEARCHFS = 43029,AUE_MINHERIT = 43030,AUE_SEMCONFIG = 43031,AUE_SEMOPEN = 43032,AUE_SEMCLOSE = 43033,AUE_SEMUNLINK = 43034,AUE_SHMOPEN = 43035,AUE_SHMUNLINK = 43036,AUE_LOADSHFILE = 43037,AUE_RESETSHFILE = 43038,AUE_NEWSYSTEMSHREG = 43039,AUE_PTHREADKILL = 43040,AUE_PTHREADSIGMASK = 43041,AUE_AUDITCTL = 43042,AUE_RFORK = 43043,AUE_LCHMOD = 43044,AUE_SWAPOFF = 43045,AUE_INITPROCESS = 43046,AUE_MAPFD = 43047,AUE_TASKFORPID = 43048,AUE_PIDFORTASK = 43049,AUE_SYSCTL_NONADMIN = 43050,AUE_COPYFILE = 43051,AUE_LUTIMES = 43052,AUE_LCHFLAGS = 43053,AUE_SENDFILE = 43054,AUE_USELIB = 43055,AUE_GETRESUID = 43056,AUE_SETRESUID = 43057,AUE_GETRESGID = 43058,AUE_SETRESGID = 43059,AUE_WAIT4 = 43060,AUE_LGETFH = 43061,AUE_FHSTATFS = 43062,AUE_FHOPEN = 43063,AUE_FHSTAT = 43064,AUE_JAIL = 43065,AUE_EACCESS = 43066,AUE_KQUEUE = 43067,AUE_KEVENT = 43068,AUE_FSYNC = 43069,AUE_NMOUNT = 43070,AUE_BDFLUSH = 43071,AUE_SETFSUID = 43072,AUE_SETFSGID = 43073,AUE_PERSONALITY = 43074,AUE_SCHED_GETSCHEDULER = 43075,AUE_SCHED_SETSCHEDULER = 43076,AUE_PRCTL = 43077,AUE_GETCWD = 43078,AUE_CAPGET = 43079,AUE_CAPSET = 43080,AUE_PIVOT_ROOT = 43081,AUE_RTPRIO = 43082,AUE_SCHED_GETPARAM = 43083,AUE_SCHED_SETPARAM = 43084,AUE_SCHED_GET_PRIORITY_MAX = 43085,AUE_SCHED_GET_PRIORITY_MIN = 43086,AUE_SCHED_RR_GET_INTERVAL = 43087,AUE_ACL_GET_FILE = 43088,AUE_ACL_SET_FILE = 43089,AUE_ACL_GET_FD = 43090,AUE_ACL_SET_FD = 43091,AUE_ACL_DELETE_FILE = 43092,AUE_ACL_DELETE_FD = 43093,AUE_ACL_CHECK_FILE = 43094,AUE_ACL_CHECK_FD = 43095,AUE_ACL_GET_LINK = 43096,AUE_ACL_SET_LINK = 43097,AUE_ACL_DELETE_LINK = 43098,AUE_ACL_CHECK_LINK = 43099,AUE_SYSARCH = 43100,AUE_EXTATTRCTL = 43101,AUE_EXTATTR_GET_FILE = 43102,AUE_EXTATTR_SET_FILE = 43103,AUE_EXTATTR_LIST_FILE = 43104,AUE_EXTATTR_DELETE_FILE = 43105,AUE_EXTATTR_GET_FD = 43106,AUE_EXTATTR_SET_FD = 43107,AUE_EXTATTR_LIST_FD = 43108,AUE_EXTATTR_DELETE_FD = 43109,AUE_EXTATTR_GET_LINK = 43110,AUE_EXTATTR_SET_LINK = 43111,AUE_EXTATTR_LIST_LINK = 43112,AUE_EXTATTR_DELETE_LINK = 43113,AUE_KENV = 43114,AUE_JAIL_ATTACH = 43115,AUE_SYSCTL_WRITE = 43116,AUE_IOPERM = 43117,AUE_READDIR = 43118,AUE_IOPL = 43119,AUE_VM86 = 43120,AUE_MAC_GET_PROC = 43121,AUE_MAC_SET_PROC = 43122,AUE_MAC_GET_FD = 43123,AUE_MAC_GET_FILE = 43124,AUE_MAC_SET_FD = 43125,AUE_MAC_SET_FILE = 43126,AUE_MAC_SYSCALL = 43127,AUE_MAC_GET_PID = 43128,AUE_MAC_GET_LINK = 43129,AUE_MAC_SET_LINK = 43130,AUE_MAC_EXECVE = 43131,AUE_GETPATH_FROMFD = 43132,AUE_GETPATH_FROMADDR = 43133,AUE_MQ_OPEN = 43134,AUE_MQ_SETATTR = 43135,AUE_MQ_TIMEDRECEIVE = 43136,AUE_MQ_TIMEDSEND = 43137,AUE_MQ_NOTIFY = 43138,AUE_MQ_UNLINK = 43139,AUE_LISTEN = 43140,AUE_MLOCKALL = 43141,AUE_MUNLOCKALL = 43142,AUE_CLOSEFROM = 43143,AUE_FEXECVE = 43144,AUE_FACCESSAT = 43145,AUE_FCHMODAT = 43146,AUE_LINKAT = 43147,AUE_MKDIRAT = 43148,AUE_MKFIFOAT = 43149,AUE_MKNODAT = 43150,AUE_READLINKAT = 43151,AUE_SYMLINKAT = 43152,AUE_MAC_GETFSSTAT = 43153,AUE_MAC_GET_MOUNT = 43154,AUE_MAC_GET_LCID = 43155,AUE_MAC_GET_LCTX = 43156,AUE_MAC_SET_LCTX = 43157,AUE_MAC_MOUNT = 43158,AUE_GETLCID = 43159,AUE_SETLCID = 43160,AUE_TASKNAMEFORPID = 43161,AUE_ACCESS_EXTENDED = 43162,AUE_CHMOD_EXTENDED = 43163,AUE_FCHMOD_EXTENDED = 43164,AUE_FSTAT_EXTENDED = 43165,AUE_LSTAT_EXTENDED = 43166,AUE_MKDIR_EXTENDED = 43167,AUE_MKFIFO_EXTENDED = 43168,AUE_OPEN_EXTENDED = 43169,AUE_OPEN_EXTENDED_R = 43170,AUE_OPEN_EXTENDED_RC = 43171,AUE_OPEN_EXTENDED_RT = 43172,AUE_OPEN_EXTENDED_RTC = 43173,AUE_OPEN_EXTENDED_W = 43174,AUE_OPEN_EXTENDED_WC = 43175,AUE_OPEN_EXTENDED_WT = 43176,AUE_OPEN_EXTENDED_WTC = 43177,AUE_OPEN_EXTENDED_RW = 43178,AUE_OPEN_EXTENDED_RWC = 43179,AUE_OPEN_EXTENDED_RWT = 43180,AUE_OPEN_EXTENDED_RWTC = 43181,AUE_STAT_EXTENDED = 43182,AUE_UMASK_EXTENDED = 43183,AUE_OPENAT = 43184,AUE_POSIX_OPENPT = 43185,AUE_CAP_NEW = 43186,AUE_CAP_GETRIGHTS = 43187,AUE_CAP_ENTER = 43188,AUE_CAP_GETMODE = 43189,AUE_POSIX_SPAWN = 43190,AUE_FSGETPATH = 43191,AUE_PREAD = 43192,AUE_PWRITE = 43193,AUE_FSCTL = 43194,AUE_FFSCTL = 43195,AUE_LPATHCONF = 43196,AUE_PDFORK = 43197,AUE_PDKILL = 43198,AUE_PDGETPID = 43199,AUE_PDWAIT = 43200,AUE_SESSION_START = 44901,AUE_SESSION_UPDATE = 44902,AUE_SESSION_END = 44903,AUE_SESSION_CLOSE = 44904,AUE_O_CREAT = 83,AUE_O_EXECVE = 0,AUE_O_SBREAK = 0,AUE_O_LSEEK = 0,AUE_O_MOUNT = 0,AUE_O_UMOUNT = 0,AUE_O_STAT = 16,AUE_O_LSTAT = 17,AUE_O_FSTAT = 208,AUE_O_GETPAGESIZE = 0,AUE_O_VREAD = 0,AUE_O_VWRITE = 0,AUE_O_MMAP = 210,AUE_O_VADVISE = 0,AUE_O_VHANGUP = 0,AUE_O_VLIMIT = 0,AUE_O_WAIT = 0,AUE_O_GETHOSTNAME = 0,AUE_O_SETHOSTNAME = 43021,AUE_O_GETDOPT = 0,AUE_O_SETDOPT = 0,AUE_O_ACCEPT = 0,AUE_O_SEND = 188,AUE_O_RECV = 190,AUE_O_VTIMES = 0,AUE_O_SIGVEC = 0,AUE_O_SIGBLOCK = 0,AUE_O_SIGSETMASK = 0,AUE_O_SIGSTACK = 0,AUE_O_RECVMSG = 190,AUE_O_SENDMSG = 188,AUE_O_VTRACE = 0,AUE_O_RESUBA = 0,AUE_O_RECVFROM = 191,AUE_O_SETREUID = 40,AUE_O_SETREGID = 41,AUE_O_GETDIRENTRIES = 43020,AUE_O_TRUNCATE = 43,AUE_O_FTRUNCATE = 44,AUE_O_GETPEERNAME = 0,AUE_O_GETHOSTID = 0,AUE_O_SETHOSTID = 0,AUE_O_GETRLIMIT = 0,AUE_O_SETRLIMIT = 51,AUE_O_KILLPG = 15,AUE_O_SETQUOTA = 0,AUE_O_QUOTA = 0,AUE_O_GETSOCKNAME = 0,AUE_O_ASYNCDAEMON = 0,AUE_O_GETDOMAINNAME = 0,AUE_O_SETDOMAINNAME = 43021,AUE_O_PCFS_MOUNT = 0,AUE_O_EXPORTFS = 0,AUE_O_USTATE = 0,AUE_O_WAIT3 = 0,AUE_O_RPAUSE = 0,AUE_O_GETDENTS = 0,AUE_ATGETMSG = 0,AUE_ATPUTMSG = 0,AUE_ATSOCKET = 0,AUE_ATPGETREQ = 0,AUE_ATPGETRSP = 0,AUE_ATPSNDREQ = 0,AUE_ATPSNDRSP = 0,AUE_BSDTHREADCREATE = 0,AUE_BSDTHREADTERMINATE = 0,AUE_BSDTHREADREGISTER = 0,AUE_CHUD = 0,AUE_CSOPS = 0,AUE_DUP = 0,AUE_FDATASYNC = 0,AUE_FGETATTRLIST = 0,AUE_FGETXATTR = 0,AUE_FLISTXATTR = 0,AUE_FREMOVEXATTR = 0,AUE_FSETATTRLIST = 0,AUE_FSETXATTR = 0,AUE_FSTATFS64 = 0,AUE_FSTATV = 0,AUE_FSTAT64 = 0,AUE_FSTAT64_EXTENDED = 0,AUE_GCCONTROL = 0,AUE_GETDIRENTRIES64 = 0,AUE_GETDTABLESIZE = 0,AUE_GETEGID = 0,AUE_GETEUID = 0,AUE_GETFSSTAT64 = 0,AUE_GETGID = 0,AUE_GETGROUPS = 0,AUE_GETITIMER = 0,AUE_GETLOGIN = 0,AUE_GETPEERNAME = 0,AUE_GETPGID = 0,AUE_GETPGRP = 0,AUE_GETPID = 0,AUE_GETPPID = 0,AUE_GETPRIORITY = 0,AUE_GETRLIMIT = 0,AUE_GETRUSAGE = 0,AUE_GETSGROUPS = 0,AUE_GETSID = 0,AUE_GETSOCKNAME = 0,AUE_GETTIMEOFDAY = 0,AUE_GETTID = 0,AUE_GETUID = 0,AUE_GETSOCKOPT = 0,AUE_GETWGROUPS = 0,AUE_GETXATTR = 0,AUE_IDENTITYSVC = 0,AUE_INITGROUPS = 0,AUE_IOPOLICYSYS = 0,AUE_ISSETUGID = 0,AUE_LIOLISTIO = 0,AUE_LISTXATTR = 0,AUE_LSTATV = 0,AUE_LSTAT64 = 0,AUE_LSTAT64_EXTENDED = 0,AUE_MADVISE = 0,AUE_MINCORE = 0,AUE_MKCOMPLEX = 0,AUE_MODWATCH = 0,AUE_MSGCL = 0,AUE_MSYNC = 0,AUE_PREADV = 0,AUE_PROCINFO = 0,AUE_PTHREADCANCELED = 0,AUE_PTHREADCHDIR = 0,AUE_PTHREADCONDBROADCAST = 0,AUE_PTHREADCONDDESTORY = 0,AUE_PTHREADCONDINIT = 0,AUE_PTHREADCONDSIGNAL = 0,AUE_PTHREADCONDWAIT = 0,AUE_PTHREADFCHDIR = 0,AUE_PTHREADMARK = 0,AUE_PTHREADMUTEXDESTROY = 0,AUE_PTHREADMUTEXINIT = 0,AUE_PTHREADMUTEXTRYLOCK = 0,AUE_PTHREADMUTEXUNLOCK = 0,AUE_PWRITEV = 0,AUE_REMOVEXATTR = 0,AUE_SBRK = 0,AUE_SELECT = 0,AUE_SEMDESTROY = 0,AUE_SEMGETVALUE = 0,AUE_SEMINIT = 0,AUE_SEMPOST = 0,AUE_SEMTRYWAIT = 0,AUE_SEMWAIT = 0,AUE_SEMWAITSIGNAL = 0,AUE_SETITIMER = 0,AUE_SETSGROUPS = 0,AUE_SETTID = 0,AUE_SETTIDWITHPID = 0,AUE_SETWGROUPS = 0,AUE_SETXATTR = 0,AUE_SHAREDREGIONCHECK = 0,AUE_SHAREDREGIONMAP = 0,AUE_SIGACTION = 0,AUE_SIGALTSTACK = 0,AUE_SIGPENDING = 0,AUE_SIGPROCMASK = 0,AUE_SIGRETURN = 0,AUE_SIGSUSPEND = 0,AUE_SIGWAIT = 0,AUE_SSTK = 0,AUE_STACKSNAPSHOT = 0,AUE_STATFS64 = 0,AUE_STATV = 0,AUE_STAT64 = 0,AUE_STAT64_EXTENDED = 0,AUE_SYNC = 0,AUE_SYSCALL = 0,AUE_TABLE = 0,AUE_VMPRESSUREMONITOR = 0,AUE_WAITEVENT = 0,AUE_WAITID = 0,AUE_WATCHEVENT = 0,AUE_WORKQOPEN = 0,AUE_WORKQOPS = 0,};
enum MACRO_AUE_at {AUE_at_create = 6144,AUE_at_delete = 6145,AUE_at_perm = 6146,AUE_cron_invoke = 6147,AUE_crontab_create = 6148,AUE_crontab_delete = 6149,AUE_crontab_perm = 6150,AUE_inetd_connect = 6151,AUE_login = 6152,AUE_logout = 6153,AUE_telnet = 6154,AUE_rlogin = 6155,AUE_mountd_mount = 6156,AUE_mountd_umount = 6157,AUE_rshd = 6158,AUE_su = 6159,AUE_halt = 6160,AUE_reboot = 6161,AUE_rexecd = 6162,AUE_passwd = 6163,AUE_rexd = 6164,AUE_ftpd = 6165,AUE_init = 6166,AUE_uadmin = 6167,AUE_shutdown = 6168,AUE_poweroff = 6169,AUE_crontab_mod = 6170,AUE_ftpd_logout = 6171,AUE_ssh = 6172,AUE_role_login = 6173,AUE_prof_cmd = 6180,AUE_filesystem_add = 6181,AUE_filesystem_delete = 6182,AUE_filesystem_modify = 6183,AUE_allocate_succ = 6200,AUE_allocate_fail = 6201,AUE_deallocate_succ = 6202,AUE_deallocate_fail = 6203,AUE_listdevice_succ = 6205,AUE_listdevice_fail = 6206,AUE_create_user = 6207,AUE_modify_user = 6208,AUE_delete_user = 6209,AUE_disable_user = 6210,AUE_enable_user = 6211,AUE_newgrp_login = 6212,AUE_admin_authentication = 6213,AUE_kadmind_auth = 6214,AUE_kadmind_unauth = 6215,AUE_krb5kdc_as_req = 6216,AUE_krb5kdc_tgs_req = 6217,AUE_krb5kdc_tgs_req_2ndtktmm = 6218,AUE_krb5kdc_tgs_req_alt_tgt = 6219,AUE_DARWIN_audit_startup = 6171,AUE_DARWIN_audit_shutdown = 6172,AUE_DARWIN_sudo = 6300,AUE_DARWIN_modify_password = 6501,AUE_DARWIN_create_group = 6511,AUE_DARWIN_delete_group = 6512,AUE_DARWIN_modify_group = 6513,AUE_DARWIN_add_to_group = 6514,AUE_DARWIN_remove_from_group = 6515,AUE_DARWIN_revoke_obj = 6521,AUE_DARWIN_lw_login = 6600,AUE_DARWIN_lw_logout = 6601,AUE_DARWIN_auth_user = 7000,AUE_DARWIN_ssconn = 7001,AUE_DARWIN_ssauthorize = 7002,AUE_DARWIN_ssauthint = 7003,AUE_openssh = 32800,AUE_audit_startup = 45000,AUE_audit_shutdown = 45001,AUE_modify_password = 45014,AUE_create_group = 45015,AUE_delete_group = 45016,AUE_modify_group = 45017,AUE_add_to_group = 45018,AUE_remove_from_group = 45019,AUE_revoke_obj = 45020,AUE_lw_login = 45021,AUE_lw_logout = 45022,AUE_auth_user = 45023,AUE_ssconn = 45024,AUE_ssauthorize = 45025,AUE_ssauthint = 45026,AUE_calife = 45027,AUE_sudo = 45028,AUE_audit_recovery = 45029,AUE_ssauthmech = 45030,};
enum MACRO_AUP {AUP_BINARY = 0,AUP_OCTAL = 1,AUP_DECIMAL = 2,AUP_HEX = 3,AUP_STRING = 4,};
enum MACRO_AUR {AUR_BYTE = 0,AUR_CHAR = 0,AUR_SHORT = 1,AUR_INT32 = 2,AUR_INT = 2,AUR_INT64 = 3,};
enum MACRO_AUT {AUT_INVALID = 0x0,AUT_OTHER_FILE32 = 0x11,AUT_OHEADER = 0x12,AUT_TRAILER = 0x13,AUT_HEADER32 = 0x14,AUT_HEADER32_EX = 0x15,AUT_DATA = 0x21,AUT_IPC = 0x22,AUT_PATH = 0x23,AUT_SUBJECT32 = 0x24,AUT_XATPATH = 0x25,AUT_PROCESS32 = 0x26,AUT_RETURN32 = 0x27,AUT_TEXT = 0x28,AUT_OPAQUE = 0x29,AUT_IN_ADDR = 0x2A,AUT_IP = 0x2B,AUT_IPORT = 0x2C,AUT_ARG32 = 0x2D,AUT_SOCKET = 0x2E,AUT_SEQ = 0x2F,AUT_ACL = 0x30,AUT_ATTR = 0x31,AUT_IPC_PERM = 0x32,AUT_LABEL = 0x33,AUT_GROUPS = 0x34,AUT_ACE = 0x35,AUT_PRIV = 0x38,AUT_UPRIV = 0x39,AUT_LIAISON = 0x3A,AUT_NEWGROUPS = 0x3B,AUT_EXEC_ARGS = 0x3C,AUT_EXEC_ENV = 0x3D,AUT_ATTR32 = 0x3E,AUT_UNAUTH = 0x3F,AUT_XATOM = 0x40,AUT_XOBJ = 0x41,AUT_XPROTO = 0x42,AUT_XSELECT = 0x43,AUT_XCOLORMAP = 0x44,AUT_XCURSOR = 0x45,AUT_XFONT = 0x46,AUT_XGC = 0x47,AUT_XPIXMAP = 0x48,AUT_XPROPERTY = 0x49,AUT_XWINDOW = 0x4A,AUT_XCLIENT = 0x4B,AUT_CMD = 0x51,AUT_EXIT = 0x52,AUT_ZONENAME = 0x60,AUT_HOST = 0x70,AUT_ARG64 = 0x71,AUT_RETURN64 = 0x72,AUT_ATTR64 = 0x73,AUT_HEADER64 = 0x74,AUT_SUBJECT64 = 0x75,AUT_PROCESS64 = 0x77,AUT_OTHER_FILE64 = 0x78,AUT_HEADER64_EX = 0x79,AUT_SUBJECT32_EX = 0x7A,AUT_PROCESS32_EX = 0x7B,AUT_SUBJECT64_EX = 0x7C,AUT_PROCESS64_EX = 0x7D,AUT_IN_ADDR_EX = 0x7E,AUT_SOCKET_EX = 0x7F,AUT_HEADER = 0x14,AUT_ARG = 0x2D,AUT_RETURN = 0x27,AUT_SUBJECT = 0x24,AUT_PROCESS = 0x26,AUT_OTHER_FILE = 0x11,AUT_SOCKINET32 = 0x80,AUT_SOCKINET128 = 0x81,AUT_SOCKUNIX = 0x82,};
enum MACRO_AUTH {AUTH_WHO_CLIENT = 0,AUTH_WHO_SERVER = 1,AUTH_WHO_MASK = 1,AUTH_HOW_ONE_WAY = 0,AUTH_HOW_MUTUAL = 2,AUTH_HOW_MASK = 2,};
enum MACRO_AUTHTYPE {AUTHTYPE_NULL = 0,AUTHTYPE_KERBEROS_V4 = 1,AUTHTYPE_KERBEROS_V5 = 2,AUTHTYPE_SPX = 3,AUTHTYPE_MINK = 4,AUTHTYPE_CNT = 5,AUTHTYPE_TEST = 99,};
enum MACRO_AUTH_NONE {AUTH_NONE = 0,AUTH_NULL = 0,AUTH_UNIX = 1,AUTH_SHORT = 2,AUTH_DES = 3,};
enum MACRO_AUTO {AUTO_FREE_STATEREF = 0x1,AUTO_FREE_OLDDATA = 0x2,};
enum MACRO_AUT_TRAILER {AUT_TRAILER_MAGIC = 0xB105,};
enum MACRO_AU_FS {AU_FS_MINFREE = 20,AU_IPv4 = 4,AU_IPv6 = 16,};
enum MACRO_AU_PRS {AU_PRS_USECACHE = 0,AU_PRS_REREAD = 1,AU_PRS_SUCCESS = 1,AU_PRS_FAILURE = 2,AU_PRS_BOTH = 3,AU_CLASS_NAME_MAX = 8,AU_CLASS_DESC_MAX = 72,AU_EVENT_NAME_MAX = 30,AU_EVENT_DESC_MAX = 50,AU_USER_NAME_MAX = 50,AU_LINE_MAX = 256,};
enum MACRO_AU_TO {AU_TO_NO_WRITE = 0,AU_TO_WRITE = 1,AU_OFLAG_NONE = 0,AU_OFLAG_RAW = 1,AU_OFLAG_SHORT = 2,AU_OFLAG_XML = 4,AU_OFLAG_NORESOLVE = 8,};
enum MACRO_AU_UNIMPL {AU_UNIMPL = 1000001,};
enum MACRO_AYT {AYT = 246,};
enum MACRO_A_NORMAL : __int64 {A_NORMAL = 0,A_ATTRIBUTES = -256,A_CHARTEXT = 255,A_COLOR = 65280,A_STANDOUT = 65536,A_UNDERLINE = 131072,A_REVERSE = 262144,A_BLINK = 524288,A_DIM = 1048576,A_BOLD = 2097152,A_ALTCHARSET = 4194304,A_INVIS = 8388608,A_PROTECT = 16777216,A_HORIZONTAL = 33554432,A_LEFT = 67108864,A_LOW = 134217728,A_RIGHT = 268435456,A_TOP = 536870912,A_VERTICAL = 1073741824,};
enum MACRO_B {B_WRITE = 0x0,B_READ = 0x1,B_ASYNC = 0x2,B_NOCACHE = 0x4,B_DELWRI = 0x8,B_LOCKED = 0x10,B_PHYS = 0x20,B_CLUSTER = 0x40,B_PAGEIO = 0x80,B_META = 0x100,B_RAW = 0x200,B_FUA = 0x400,B_PASSIVE = 0x800,B_IOSTREAMING = 0x1000,B_THROTTLED_IO = 0x2000,B_ENCRYPTED_IO = 0x4000,};
enum MACRO_B0 {B0 = 0,B50 = 50,};
enum MACRO_B110 {B110 = 110,};
enum MACRO_B115200 {B115200 = 115200,};
enum MACRO_B1200 {B1200 = 1200,};
enum MACRO_B134 {B134 = 134,};
enum MACRO_B14400 {B14400 = 14400,};
enum MACRO_B150 {B150 = 150,};
enum MACRO_B1800 {B1800 = 1800,};
enum MACRO_B19200 {B19200 = 19200,};
enum MACRO_B200 {B200 = 200,};
enum MACRO_B230400 {B230400 = 230400,};
enum MACRO_B2400 {B2400 = 2400,};
enum MACRO_B28800 {B28800 = 28800,};
enum MACRO_B300 {B300 = 300,};
enum MACRO_B38400 {B38400 = 38400,};
enum MACRO_B4800 {B4800 = 4800,};
enum MACRO_B57600 {B57600 = 57600,};
enum MACRO_B600 {B600 = 600,};
enum MACRO_B7200 {B7200 = 7200,};
enum MACRO_B75 {B75 = 75,};
enum MACRO_B76800 {B76800 = 76800,};
enum MACRO_B9600 {B9600 = 9600,};
enum MACRO_BABY : __int64 {BABY_STEP_NONE = 0,BABY_STEP_PRE_REQUEST = 2,BABY_STEP_OBJECT_LOOKUP = 4,BABY_STEP_CHECK_VALUE = 8,BABY_STEP_ROW_CREATE = 16,BABY_STEP_UNDO_SETUP = 32,BABY_STEP_SET_VALUE = 64,BABY_STEP_CHECK_CONSISTENCY = 128,BABY_STEP_UNDO_SET = 256,BABY_STEP_COMMIT = 512,BABY_STEP_UNDO_COMMIT = 1024,BABY_STEP_IRREVERSIBLE_COMMIT = 2048,BABY_STEP_UNDO_CLEANUP = 4096,BABY_STEP_POST_REQUEST = 8192,BABY_STEP_ALL = 4294967295,BABY_STEP_CHECK_OBJECT = 8,BABY_STEP_SET_VALUES = 64,BABY_STEP_UNDO_SETS = 256,};
enum MACRO_BADADDR {BADADDR = 7,BADCTLADDR = 8,};
enum MACRO_BADVERSION {BADVERSION = 6,};
enum MACRO_BASE {BASE_BUFFER_SIZE = 4096,};
enum MACRO_BC {BC_BASE_MAX = 99,BC_DIM_MAX = 2048,BC_SCALE_MAX = 99,BC_STRING_MAX = 1000,};
enum MACRO_BF {BF_ENCRYPT = 1,BF_DECRYPT = 0,BF_ROUNDS = 16,BF_BLOCK = 8,};
enum MACRO_BIND : __int64 {BIND_TYPE_POINTER = 1,BIND_TYPE_TEXT_ABSOLUTE32 = 2,BIND_TYPE_TEXT_PCREL32 = 3,BIND_SPECIAL_DYLIB_SELF = 0,BIND_SPECIAL_DYLIB_MAIN_EXECUTABLE = -1,BIND_SPECIAL_DYLIB_FLAT_LOOKUP = -2,BIND_SYMBOL_FLAGS_WEAK_IMPORT = 1,BIND_SYMBOL_FLAGS_NON_WEAK_DEFINITION = 8,BIND_OPCODE_MASK = 240,BIND_IMMEDIATE_MASK = 15,BIND_OPCODE_DONE = 0,BIND_OPCODE_SET_DYLIB_ORDINAL_IMM = 16,BIND_OPCODE_SET_DYLIB_ORDINAL_ULEB = 32,BIND_OPCODE_SET_DYLIB_SPECIAL_IMM = 48,BIND_OPCODE_SET_SYMBOL_TRAILING_FLAGS_IMM = 64,BIND_OPCODE_SET_TYPE_IMM = 80,BIND_OPCODE_SET_ADDEND_SLEB = 96,BIND_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB = 112,BIND_OPCODE_ADD_ADDR_ULEB = 128,BIND_OPCODE_DO_BIND = 144,BIND_OPCODE_DO_BIND_ADD_ADDR_ULEB = 160,BIND_OPCODE_DO_BIND_ADD_ADDR_IMM_SCALED = 176,BIND_OPCODE_DO_BIND_ULEB_TIMES_SKIPPING_ULEB = 192,};
enum MACRO_BIO {BIO_TYPE_NONE = 0,BIO_TYPE_MEM = 1025,BIO_TYPE_FILE = 1026,BIO_TYPE_FD = 1284,BIO_TYPE_SOCKET = 1285,BIO_TYPE_NULL = 1030,BIO_TYPE_SSL = 519,BIO_TYPE_MD = 520,BIO_TYPE_BUFFER = 521,BIO_TYPE_CIPHER = 522,BIO_TYPE_BASE64 = 523,BIO_TYPE_CONNECT = 1292,BIO_TYPE_ACCEPT = 1293,BIO_TYPE_PROXY_CLIENT = 526,BIO_TYPE_PROXY_SERVER = 527,BIO_TYPE_NBIO_TEST = 528,BIO_TYPE_NULL_FILTER = 529,BIO_TYPE_BER = 530,BIO_TYPE_BIO = 1043,BIO_TYPE_LINEBUFFER = 532,BIO_TYPE_DGRAM = 1301,BIO_TYPE_COMP = 535,BIO_TYPE_DESCRIPTOR = 256,BIO_TYPE_FILTER = 512,BIO_TYPE_SOURCE_SINK = 1024,BIO_NOCLOSE = 0,BIO_CLOSE = 1,BIO_CTRL_RESET = 1,BIO_CTRL_EOF = 2,BIO_CTRL_INFO = 3,BIO_CTRL_SET = 4,BIO_CTRL_GET = 5,BIO_CTRL_PUSH = 6,BIO_CTRL_POP = 7,BIO_CTRL_GET_CLOSE = 8,BIO_CTRL_SET_CLOSE = 9,BIO_CTRL_PENDING = 10,BIO_CTRL_FLUSH = 11,BIO_CTRL_DUP = 12,BIO_CTRL_WPENDING = 13,BIO_CTRL_SET_CALLBACK = 14,BIO_CTRL_GET_CALLBACK = 15,BIO_CTRL_SET_FILENAME = 30,BIO_CTRL_DGRAM_CONNECT = 31,BIO_CTRL_DGRAM_SET_CONNECTED = 32,BIO_CTRL_DGRAM_SET_RECV_TIMEOUT = 33,BIO_CTRL_DGRAM_GET_RECV_TIMEOUT = 34,BIO_CTRL_DGRAM_SET_SEND_TIMEOUT = 35,BIO_CTRL_DGRAM_GET_SEND_TIMEOUT = 36,BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP = 37,BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP = 38,BIO_CTRL_DGRAM_MTU_DISCOVER = 39,BIO_CTRL_DGRAM_QUERY_MTU = 40,BIO_CTRL_DGRAM_GET_MTU = 41,BIO_CTRL_DGRAM_SET_MTU = 42,BIO_CTRL_DGRAM_MTU_EXCEEDED = 43,BIO_CTRL_DGRAM_GET_PEER = 46,BIO_CTRL_DGRAM_SET_PEER = 44,BIO_CTRL_DGRAM_SET_NEXT_TIMEOUT = 45,BIO_FP_READ = 2,BIO_FP_WRITE = 4,BIO_FP_APPEND = 8,BIO_FP_TEXT = 16,BIO_FLAGS_READ = 1,BIO_FLAGS_WRITE = 2,BIO_FLAGS_IO_SPECIAL = 4,BIO_FLAGS_RWS = 7,BIO_FLAGS_SHOULD_RETRY = 8,BIO_FLAGS_UPLINK = 0,BIO_GHBN_CTRL_HITS = 1,BIO_GHBN_CTRL_MISSES = 2,BIO_GHBN_CTRL_CACHE_SIZE = 3,BIO_GHBN_CTRL_GET_ENTRY = 4,BIO_GHBN_CTRL_FLUSH = 5,BIO_FLAGS_BASE64_NO_NL = 256,BIO_FLAGS_MEM_RDONLY = 512,BIO_RR_SSL_X509_LOOKUP = 1,BIO_RR_CONNECT = 2,BIO_RR_ACCEPT = 3,BIO_CB_FREE = 1,BIO_CB_READ = 2,BIO_CB_WRITE = 3,BIO_CB_PUTS = 4,BIO_CB_GETS = 5,BIO_CB_CTRL = 6,BIO_CB_RETURN = 128,BIO_CONN_S_BEFORE = 1,BIO_CONN_S_GET_IP = 2,BIO_CONN_S_GET_PORT = 3,BIO_CONN_S_CREATE_SOCKET = 4,BIO_CONN_S_CONNECT = 5,BIO_CONN_S_OK = 6,BIO_CONN_S_BLOCKED_CONNECT = 7,BIO_CONN_S_NBIO = 8,BIO_C_SET_CONNECT = 100,BIO_C_DO_STATE_MACHINE = 101,BIO_C_SET_NBIO = 102,BIO_C_SET_PROXY_PARAM = 103,BIO_C_SET_FD = 104,BIO_C_GET_FD = 105,BIO_C_SET_FILE_PTR = 106,BIO_C_GET_FILE_PTR = 107,BIO_C_SET_FILENAME = 108,BIO_C_SET_SSL = 109,BIO_C_GET_SSL = 110,BIO_C_SET_MD = 111,BIO_C_GET_MD = 112,BIO_C_GET_CIPHER_STATUS = 113,BIO_C_SET_BUF_MEM = 114,BIO_C_GET_BUF_MEM_PTR = 115,BIO_C_GET_BUFF_NUM_LINES = 116,BIO_C_SET_BUFF_SIZE = 117,BIO_C_SET_ACCEPT = 118,BIO_C_SSL_MODE = 119,BIO_C_GET_MD_CTX = 120,BIO_C_GET_PROXY_PARAM = 121,BIO_C_SET_BUFF_READ_DATA = 122,BIO_C_GET_CONNECT = 123,BIO_C_GET_ACCEPT = 124,BIO_C_SET_SSL_RENEGOTIATE_BYTES = 125,BIO_C_GET_SSL_NUM_RENEGOTIATES = 126,BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT = 127,BIO_C_FILE_SEEK = 128,BIO_C_GET_CIPHER_CTX = 129,BIO_C_SET_BUF_MEM_EOF_RETURN = 130,BIO_C_SET_BIND_MODE = 131,BIO_C_GET_BIND_MODE = 132,BIO_C_FILE_TELL = 133,BIO_C_GET_SOCKS = 134,BIO_C_SET_SOCKS = 135,BIO_C_SET_WRITE_BUF_SIZE = 136,BIO_C_GET_WRITE_BUF_SIZE = 137,BIO_C_MAKE_BIO_PAIR = 138,BIO_C_DESTROY_BIO_PAIR = 139,BIO_C_GET_WRITE_GUARANTEE = 140,BIO_C_GET_READ_REQUEST = 141,BIO_C_SHUTDOWN_WR = 142,BIO_C_NREAD0 = 143,BIO_C_NREAD = 144,BIO_C_NWRITE0 = 145,BIO_C_NWRITE = 146,BIO_C_RESET_READ_REQUEST = 147,BIO_C_SET_MD_CTX = 148,BIO_BIND_NORMAL = 0,BIO_BIND_REUSEADDR_IF_UNUSED = 1,BIO_BIND_REUSEADDR = 2,BIO_F_ACPT_STATE = 100,BIO_F_BIO_ACCEPT = 101,BIO_F_BIO_BER_GET_HEADER = 102,BIO_F_BIO_CALLBACK_CTRL = 131,BIO_F_BIO_CTRL = 103,BIO_F_BIO_GETHOSTBYNAME = 120,BIO_F_BIO_GETS = 104,BIO_F_BIO_GET_ACCEPT_SOCKET = 105,BIO_F_BIO_GET_HOST_IP = 106,BIO_F_BIO_GET_PORT = 107,BIO_F_BIO_MAKE_PAIR = 121,BIO_F_BIO_NEW = 108,BIO_F_BIO_NEW_FILE = 109,BIO_F_BIO_NEW_MEM_BUF = 126,BIO_F_BIO_NREAD = 123,BIO_F_BIO_NREAD0 = 124,BIO_F_BIO_NWRITE = 125,BIO_F_BIO_NWRITE0 = 122,BIO_F_BIO_PUTS = 110,BIO_F_BIO_READ = 111,BIO_F_BIO_SOCK_INIT = 112,BIO_F_BIO_WRITE = 113,BIO_F_BUFFER_CTRL = 114,BIO_F_CONN_CTRL = 127,BIO_F_CONN_STATE = 115,BIO_F_FILE_CTRL = 116,BIO_F_FILE_READ = 130,BIO_F_LINEBUFFER_CTRL = 129,BIO_F_MEM_READ = 128,BIO_F_MEM_WRITE = 117,BIO_F_SSL_NEW = 118,BIO_F_WSASTARTUP = 119,BIO_R_ACCEPT_ERROR = 100,BIO_R_BAD_FOPEN_MODE = 101,BIO_R_BAD_HOSTNAME_LOOKUP = 102,BIO_R_BROKEN_PIPE = 124,BIO_R_CONNECT_ERROR = 103,BIO_R_EOF_ON_MEMORY_BIO = 127,BIO_R_ERROR_SETTING_NBIO = 104,BIO_R_ERROR_SETTING_NBIO_ON_ACCEPTED_SOCKET = 105,BIO_R_ERROR_SETTING_NBIO_ON_ACCEPT_SOCKET = 106,BIO_R_GETHOSTBYNAME_ADDR_IS_NOT_AF_INET = 107,BIO_R_INVALID_ARGUMENT = 125,BIO_R_INVALID_IP_ADDRESS = 108,BIO_R_IN_USE = 123,BIO_R_KEEPALIVE = 109,BIO_R_NBIO_CONNECT_ERROR = 110,BIO_R_NO_ACCEPT_PORT_SPECIFIED = 111,BIO_R_NO_HOSTNAME_SPECIFIED = 112,BIO_R_NO_PORT_DEFINED = 113,BIO_R_NO_PORT_SPECIFIED = 114,BIO_R_NO_SUCH_FILE = 128,BIO_R_NULL_PARAMETER = 115,BIO_R_TAG_MISMATCH = 116,BIO_R_UNABLE_TO_BIND_SOCKET = 117,BIO_R_UNABLE_TO_CREATE_SOCKET = 118,BIO_R_UNABLE_TO_LISTEN_SOCKET = 119,BIO_R_UNINITIALIZED = 120,BIO_R_UNSUPPORTED_METHOD = 121,BIO_R_WRITE_TO_READ_ONLY_BIO = 126,BIO_R_WSASTARTUP = 122,};
enum MACRO_BIOCFLUSH {BIOCFLUSH = 536887912,};
enum MACRO_BIOCPROMISC {BIOCPROMISC = 536887913,};
enum MACRO_BITSTRING {BITSTRING = 3,IPADDRESS = 64,};
enum MACRO_BLK : __int64 {BLK_READ = 0x1,BLK_WRITE = 0x2,BLK_META = 0x10,BLK_ONLYVALID = 0x80000000,};
enum MACRO_BLKDEV {BLKDEV_IOSIZE = 2048,};
enum MACRO_BLKTYPE {BLKTYPE = 52,};
enum MACRO_BLK_EOR {BLK_EOR = 0x80,BLK_EOF = 0x40,BLK_ERRORS = 0x20,BLK_RESTART = 0x10,BLK_BYTECOUNT = 0x2,};
enum MACRO_BLOCK {BLOCK_DESCRIPTOR_1 = 1,BLOCK_DESCRIPTOR_2 = 1,BLOCK_DESCRIPTOR_3 = 1,};
enum MACRO_BN : __int64 {BN_BITS = 128,BN_BYTES = 8,BN_BITS2 = 64,BN_BITS4 = 32,BN_MASK2 = -1,BN_MASK2l = 4294967295,BN_MASK2h = -4294967296,BN_MASK2h1 = -2147483648,BN_TBIT = -9223372036854775808,BN_DEC_CONV = -8446744073709551616,BN_DEC_NUM = 19,BN_DEFAULT_BITS = 1280,BN_FLG_MALLOCED = 1,BN_FLG_STATIC_DATA = 2,BN_FLG_CONSTTIME = 4,BN_FLG_EXP_CONSTTIME = 4,BN_FLG_FREE = 32768,BN_prime_checks = 0,BN_BLINDING_NO_UPDATE = 1,BN_BLINDING_NO_RECREATE = 2,BN_F_BNRAND = 127,BN_F_BN_BLINDING_CONVERT_EX = 100,BN_F_BN_BLINDING_CREATE_PARAM = 128,BN_F_BN_BLINDING_INVERT_EX = 101,BN_F_BN_BLINDING_NEW = 102,BN_F_BN_BLINDING_UPDATE = 103,BN_F_BN_BN2DEC = 104,BN_F_BN_BN2HEX = 105,BN_F_BN_CTX_GET = 116,BN_F_BN_CTX_NEW = 106,BN_F_BN_CTX_START = 129,BN_F_BN_DIV = 107,BN_F_BN_DIV_NO_BRANCH = 138,BN_F_BN_DIV_RECP = 130,BN_F_BN_EXP = 123,BN_F_BN_EXPAND2 = 108,BN_F_BN_EXPAND_INTERNAL = 120,BN_F_BN_GF2M_MOD = 131,BN_F_BN_GF2M_MOD_EXP = 132,BN_F_BN_GF2M_MOD_MUL = 133,BN_F_BN_GF2M_MOD_SOLVE_QUAD = 134,BN_F_BN_GF2M_MOD_SOLVE_QUAD_ARR = 135,BN_F_BN_GF2M_MOD_SQR = 136,BN_F_BN_GF2M_MOD_SQRT = 137,BN_F_BN_MOD_EXP2_MONT = 118,BN_F_BN_MOD_EXP_MONT = 109,BN_F_BN_MOD_EXP_MONT_CONSTTIME = 124,BN_F_BN_MOD_EXP_MONT_WORD = 117,BN_F_BN_MOD_EXP_RECP = 125,BN_F_BN_MOD_EXP_SIMPLE = 126,BN_F_BN_MOD_INVERSE = 110,BN_F_BN_MOD_INVERSE_NO_BRANCH = 139,BN_F_BN_MOD_LSHIFT_QUICK = 119,BN_F_BN_MOD_MUL_RECIPROCAL = 111,BN_F_BN_MOD_SQRT = 121,BN_F_BN_MPI2BN = 112,BN_F_BN_NEW = 113,BN_F_BN_RAND = 114,BN_F_BN_RAND_RANGE = 122,BN_F_BN_USUB = 115,BN_R_ARG2_LT_ARG3 = 100,BN_R_BAD_RECIPROCAL = 101,BN_R_BIGNUM_TOO_LONG = 114,BN_R_CALLED_WITH_EVEN_MODULUS = 102,BN_R_DIV_BY_ZERO = 103,BN_R_ENCODING_ERROR = 104,BN_R_EXPAND_ON_STATIC_BIGNUM_DATA = 105,BN_R_INPUT_NOT_REDUCED = 110,BN_R_INVALID_LENGTH = 106,BN_R_INVALID_RANGE = 115,BN_R_NOT_A_SQUARE = 111,BN_R_NOT_INITIALIZED = 107,BN_R_NO_INVERSE = 108,BN_R_NO_SOLUTION = 116,BN_R_P_IS_NOT_PRIME = 112,BN_R_TOO_MANY_ITERATIONS = 113,BN_R_TOO_MANY_TEMPORARY_VARIABLES = 109,};
enum MACRO_BOOLCOUNT {BOOLCOUNT = 44,};
enum MACRO_BOOLEAN {BOOLEAN = 0,NUMBER = 1,};
enum MACRO_BOOLWRITE {BOOLWRITE = 37,};
enum MACRO_BOOT {BOOT_TIME = 2,OLD_TIME = 3,NEW_TIME = 4,};
enum MACRO_BOOTP {BOOTP_MIN_BACKOFF = 0x7FF,BOOTP_MAX_BACKOFF = 0xFFFF,BOOTP_RETRY = 0x6,};
enum MACRO_BOOTPARAM {BOOTPARAM_PROG = 100026,BOOTPARAM_VERS = 1,BOOTPARAM_WHOAMI = 1,BOOTPARAM_GETFILE = 2,};
enum MACRO_BOOTPARAMPROC {BOOTPARAMPROC_WHOAMI = 1,BOOTPARAMPROC_GETFILE = 2,};
enum MACRO_BOOTPARAMPROG {BOOTPARAMPROG = 100026,};
enum MACRO_BOOTPARAMVERS {BOOTPARAMVERS = 1,};
enum MACRO_BOOTREQUEST {BOOTREQUEST = 1,BOOTREPLY = 2,};
enum MACRO_BOOTSTRAP {BOOTSTRAP_MAX_NAME_LEN = 128,BOOTSTRAP_MAX_CMD_LEN = 512,BOOTSTRAP_MAX_LOOKUP_COUNT = 20,BOOTSTRAP_SUCCESS = 0,BOOTSTRAP_NOT_PRIVILEGED = 1100,BOOTSTRAP_NAME_IN_USE = 1101,BOOTSTRAP_UNKNOWN_SERVICE = 1102,BOOTSTRAP_SERVICE_ACTIVE = 1103,BOOTSTRAP_BAD_COUNT = 1104,BOOTSTRAP_NO_MEMORY = 1105,BOOTSTRAP_NO_CHILDREN = 1106,BOOTSTRAP_STATUS_INACTIVE = 0,BOOTSTRAP_STATUS_ACTIVE = 1,BOOTSTRAP_STATUS_ON_DEMAND = 2,};
enum MACRO_BPF {BPF_RELEASE = 199606,BPF_MINBUFSIZE = 32,BPF_MAJOR_VERSION = 1,BPF_MINOR_VERSION = 1,};
enum MACRO_BPF_LD {BPF_LD = 0x0,BPF_LDX = 0x1,BPF_ST = 0x2,BPF_STX = 0x3,BPF_ALU = 0x4,BPF_JMP = 0x5,BPF_RET = 0x6,BPF_MISC = 0x7,BPF_W = 0x0,BPF_H = 0x8,BPF_B = 0x10,BPF_IMM = 0x0,BPF_ABS = 0x20,BPF_IND = 0x40,BPF_MEM = 0x60,BPF_LEN = 0x80,BPF_MSH = 0xA0,BPF_ADD = 0x0,BPF_SUB = 0x10,BPF_MUL = 0x20,BPF_DIV = 0x30,BPF_OR = 0x40,BPF_AND = 0x50,BPF_LSH = 0x60,BPF_RSH = 0x70,BPF_NEG = 0x80,BPF_JA = 0x0,BPF_JEQ = 0x10,BPF_JGT = 0x20,BPF_JGE = 0x30,BPF_JSET = 0x40,BPF_K = 0x0,BPF_X = 0x8,BPF_A = 0x10,BPF_TAX = 0x0,BPF_TXA = 0x80,BPF_MEMWORDS = 0x10,};
enum MACRO_BPF_MAXINSNS {BPF_MAXINSNS = 512,};
enum MACRO_BPOP {BPOP_OK = 0,BPOP_QUERY = 1,BPOP_QUERY_NE = 2,BPOP_ERROR = 3,};
enum MACRO_BREAK {BREAK = 243,};
enum MACRO_BS0 {BS0 = 0x0,BS1 = 0x8000,};
enum MACRO_BSD {BSD = 199506,};
enum MACRO_BSD4 {BSD4_3 = 1,BSD4_4 = 1,};
enum MACRO_BSD_PROC {BSD_PROC_EXIT = 1,BSD_PROC_FRCEXIT = 2,};
enum MACRO_BSM {BSM_TEXTBUFSZ = 256,};
enum MACRO_BTREEMAGIC {BTREEMAGIC = 0x53162,};
enum MACRO_BTREEVERSION {BTREEVERSION = 3,};
enum MACRO_BUF {BUF_WAIT = 0x1,BUF_WRITE_DATA = 0x1,BUF_SKIP_META = 0x2,BUF_INVALIDATE_LOCKED = 0x4,BUF_SKIP_NONLOCKED = 0x1,BUF_SKIP_LOCKED = 0x2,BUF_SCAN_CLEAN = 0x4,BUF_SCAN_DIRTY = 0x8,BUF_NOTIFY_BUSY = 0x10,BUF_RETURNED = 0x0,BUF_RETURNED_DONE = 0x1,BUF_CLAIMED = 0x2,BUF_CLAIMED_DONE = 0x3,};
enum MACRO_BUF_F {BUF_F_BUF_MEMDUP = 103,BUF_F_BUF_MEM_GROW = 100,BUF_F_BUF_MEM_GROW_CLEAN = 105,BUF_F_BUF_MEM_NEW = 101,BUF_F_BUF_STRDUP = 102,BUF_F_BUF_STRNDUP = 104,};
enum MACRO_BUS {BUS_NOOP = 0,BUS_ADRALN = 1,BUS_ADRERR = 2,BUS_OBJERR = 3,};
enum MACRO_BUTTON {BUTTON_CTRL = 16777216,BUTTON_SHIFT = 33554432,BUTTON_ALT = 67108864,};
enum MACRO_BUTTON1 {BUTTON1_RELEASED = 1,BUTTON1_PRESSED = 2,BUTTON1_CLICKED = 4,BUTTON1_DOUBLE_CLICKED = 8,BUTTON1_TRIPLE_CLICKED = 16,};
enum MACRO_BUTTON2 {BUTTON2_RELEASED = 64,BUTTON2_PRESSED = 128,BUTTON2_CLICKED = 256,BUTTON2_DOUBLE_CLICKED = 512,BUTTON2_TRIPLE_CLICKED = 1024,};
enum MACRO_BUTTON3 {BUTTON3_RELEASED = 4096,BUTTON3_PRESSED = 8192,BUTTON3_CLICKED = 16384,BUTTON3_DOUBLE_CLICKED = 32768,BUTTON3_TRIPLE_CLICKED = 65536,};
enum MACRO_BUTTON4 {BUTTON4_RELEASED = 262144,BUTTON4_PRESSED = 524288,BUTTON4_CLICKED = 1048576,BUTTON4_DOUBLE_CLICKED = 2097152,BUTTON4_TRIPLE_CLICKED = 4194304,};
enum MACRO_BYTE {BYTE_ORDER = 1234,};
enum MACRO_BYTEORDER {BYTEORDER = 1234,};
enum MACRO_BYTES {BYTES_PER_XDR_UNIT = 4,};
enum MACRO_BYTE_SIZE {BYTE_SIZE = 8,};
enum MACRO_BZ : __int64 {BZ_RUN = 0,BZ_FLUSH = 1,BZ_FINISH = 2,BZ_OK = 0,BZ_RUN_OK = 1,BZ_FLUSH_OK = 2,BZ_FINISH_OK = 3,BZ_STREAM_END = 4,BZ_SEQUENCE_ERROR = -1,BZ_PARAM_ERROR = -2,BZ_MEM_ERROR = -3,BZ_DATA_ERROR = -4,BZ_DATA_ERROR_MAGIC = -5,BZ_IO_ERROR = -6,BZ_UNEXPECTED_EOF = -7,BZ_OUTBUFF_FULL = -8,BZ_CONFIG_ERROR = -9,BZ_MAX_UNUSED = 5000,};
enum MACRO_B_ADAPTORSHIFT : __int64 {B_ADAPTORSHIFT = 24,B_ADAPTORMASK = 15,B_CONTROLLERSHIFT = 20,B_CONTROLLERMASK = 15,B_UNITSHIFT = 16,B_UNITMASK = 255,B_PARTITIONSHIFT = 8,B_PARTITIONMASK = 255,B_TYPESHIFT = 0,B_TYPEMASK = 255,B_MAGICMASK = 4026531840,B_DEVMAGIC = 2684354560,};
enum MACRO_B_ASN1 {B_ASN1_NUMERICSTRING = 0x1,B_ASN1_PRINTABLESTRING = 0x2,B_ASN1_T61STRING = 0x4,B_ASN1_TELETEXSTRING = 0x4,B_ASN1_VIDEOTEXSTRING = 0x8,B_ASN1_IA5STRING = 0x10,B_ASN1_GRAPHICSTRING = 0x20,B_ASN1_ISO64STRING = 0x40,B_ASN1_VISIBLESTRING = 0x40,B_ASN1_GENERALSTRING = 0x80,B_ASN1_UNIVERSALSTRING = 0x100,B_ASN1_OCTET_STRING = 0x200,B_ASN1_BIT_STRING = 0x400,B_ASN1_BMPSTRING = 0x800,B_ASN1_UNKNOWN = 0x1000,B_ASN1_UTF8STRING = 0x2000,B_ASN1_UTCTIME = 0x4000,B_ASN1_GENERALIZEDTIME = 0x8000,B_ASN1_SEQUENCE = 0x10000,};
enum MACRO_B_ASN1_TIME {B_ASN1_TIME = 49152,B_ASN1_PRINTABLE = 81175,B_ASN1_DIRECTORYSTRING = 10502,B_ASN1_DISPLAYTEXT = 10320,};
enum MACRO_C {C_ISSOCK = 0xC000,C_ISLNK = 0xA000,C_ISCTG = 0x9000,C_ISREG = 0x8000,C_ISBLK = 0x6000,C_ISDIR = 0x4000,C_ISCHR = 0x2000,C_ISFIFO = 0x1000,C_ISUID = 0x800,C_ISGID = 0x400,C_ISVTX = 0x200,C_IRUSR = 0x100,C_IWUSR = 0x80,C_IXUSR = 0x40,C_IRGRP = 0x20,C_IWGRP = 0x10,C_IXGRP = 0x8,C_IROTH = 0x4,C_IWOTH = 0x2,C_IXOTH = 0x1,};
enum MACRO_CACHE {CACHE_ATTRIBUTES_VERSION_1 = 1,CACHE_ATTRIBUTES_VERSION_2 = 2,};
enum MACRO_CANCEL {CANCEL = 3,NAMES = 4,};
enum MACRO_CANCELLED : __int64 {CANCELLED_BOOLEAN = -2,CANCELLED_NUMERIC = -2,CANCELLED_STRING = -1,};
enum MACRO_CAST {CAST_ENCRYPT = 1,CAST_DECRYPT = 0,CAST_BLOCK = 8,CAST_KEY_LENGTH = 16,};
enum MACRO_CBQSIZE {CBQSIZE = 8,};
enum MACRO_CBRK {CBRK = 255,};
enum MACRO_CC {CC_NORM = 0,CC_NEWLINE = 1,CC_EOF = 2,CC_ARGHACK = 3,CC_REFRESH = 4,CC_CURSOR = 5,CC_ERROR = 6,CC_FATAL = 7,CC_REDISPLAY = 8,CC_REFRESH_BEEP = 9,};
enum MACRO_CCTS {CCTS_OFLOW = 0x10000,};
enum MACRO_CDISCARD {CDISCARD = 15,};
enum MACRO_CEOF {CEOF = 4,};
enum MACRO_CEOL {CEOL = 0xFF,};
enum MACRO_CEOT {CEOT = 4,};
enum MACRO_CERASE {CERASE = 0x7F,};
enum MACRO_CFLUSH {CFLUSH = 15,};
enum MACRO_CHAR {CHAR_BIT = 8,};
enum MACRO_CHARCLASS {CHARCLASS_NAME_MAX = 14,COLL_WEIGHTS_MAX = 2,EQUIV_CLASS_MAX = 2,EXPR_NEST_MAX = 32,LINE_MAX = 2048,RE_DUP_MAX = 255,};
enum MACRO_CHARTYPE {CHARTYPE_PRINTABLESTRING = 0x10,CHARTYPE_FIRST_ESC_2253 = 0x20,CHARTYPE_LAST_ESC_2253 = 0x40,};
enum MACRO_CHAR_MIN : __int64 {CHAR_MIN = -128,};
enum MACRO_CHECK {CHECK_RT_FLAGS = 1,};
enum MACRO_CHRTYPE {CHRTYPE = 51,};
enum MACRO_CIGNORE {CIGNORE = 0x1,CSIZE = 0x300,};
enum MACRO_CINTR {CINTR = 3,CSTATUS = 20,};
enum MACRO_CKILL {CKILL = 21,};
enum MACRO_CKSUMTYPE : __int64 {CKSUMTYPE_CRC32 = 0x1,CKSUMTYPE_RSA_MD4 = 0x2,CKSUMTYPE_RSA_MD4_DES = 0x3,CKSUMTYPE_DESCBC = 0x4,CKSUMTYPE_RSA_MD5 = 0x7,CKSUMTYPE_RSA_MD5_DES = 0x8,CKSUMTYPE_NIST_SHA = 0x9,CKSUMTYPE_HMAC_SHA1_DES3 = 0xC,CKSUMTYPE_HMAC_SHA1_96_AES128 = 0xF,CKSUMTYPE_HMAC_SHA1_96_AES256 = 0x10,CKSUMTYPE_HMAC_MD5_ARCFOUR = 0xFFFFFFFFFFFFFF76,};
enum MACRO_CLBYTES {CLBYTES = 4096,};
enum MACRO_CLD {CLD_NOOP = 0,CLD_EXITED = 1,CLD_KILLED = 2,CLD_DUMPED = 3,CLD_TRAPPED = 4,CLD_STOPPED = 5,CLD_CONTINUED = 6,};
enum MACRO_CLGET {CLGET_SERVER_ADDR = 3,};
enum MACRO_CLK {CLK_TCK = 100,};
enum MACRO_CLNEXT {CLNEXT = 22,};
enum MACRO_CLOCK {SYSTEM_CLOCK = 0,CALENDAR_CLOCK = 1,REALTIME_CLOCK = 0,};
enum MACRO_CLOCKS {CLOCKS_PER_SEC = 1000000,};
enum MACRO_CLOCK_GET {CLOCK_GET_TIME_RES = 1,CLOCK_ALARM_CURRES = 3,CLOCK_ALARM_MINRES = 4,CLOCK_ALARM_MAXRES = 5,};
enum MACRO_CLOEXEC {F_DUPFD_CLOEXEC = 67,FD_CLOEXEC = 1,};
enum MACRO_CLOFF {CLOFF = 4095,};
enum MACRO_CLOFSET {CLOFSET = 4095,};
enum MACRO_CLSHIFT {CLSHIFT = 12,CBLOCK = 64,};
enum MACRO_CLSIZE {CLSIZE = 1,};
enum MACRO_CLSIZELOG2 {CLSIZELOG2 = 0,MSIZESHIFT = 8,MSIZE = 256,};
enum MACRO_CMASK {CMASK = 0x12,};
enum MACRO_CMIN {CMIN = 1,CQUIT = 28,};
enum MACRO_CODESET {CODESET = 0,};
enum MACRO_COLOR {COLOR_BLACK = 0,COLOR_RED = 1,COLOR_GREEN = 2,COLOR_YELLOW = 3,COLOR_BLUE = 4,COLOR_MAGENTA = 5,COLOR_CYAN = 6,COLOR_WHITE = 7,};
enum MACRO_COMAPT {COMAPT_MAXLOGNAME = 12,};
enum MACRO_COMMAND {MIN_FORM_COMMAND = 512,MAX_FORM_COMMAND = 568,MAX_COMMAND = 639,};
enum MACRO_COMMIT {COMMIT = 3,FREE = 4,};
enum MACRO_COMP {COMP_F_BIO_ZLIB_FLUSH = 99,COMP_F_BIO_ZLIB_NEW = 100,COMP_F_BIO_ZLIB_READ = 101,COMP_F_BIO_ZLIB_WRITE = 102,COMP_R_ZLIB_DEFLATE_ERROR = 99,COMP_R_ZLIB_INFLATE_ERROR = 100,COMP_R_ZLIB_NOT_SUPPORTED = 101,};
enum MACRO_CONF {CONF_MFLAGS_IGNORE_ERRORS = 0x1,CONF_MFLAGS_IGNORE_RETURN_CODES = 0x2,CONF_MFLAGS_SILENT = 0x4,CONF_MFLAGS_NO_DSO = 0x8,CONF_MFLAGS_IGNORE_MISSING_FILE = 0x10,CONF_MFLAGS_DEFAULT_SECTION = 0x20,CONF_F_CONF_DUMP_FP = 0x68,CONF_F_CONF_LOAD = 0x64,CONF_F_CONF_LOAD_BIO = 0x66,CONF_F_CONF_LOAD_FP = 0x67,CONF_F_CONF_MODULES_LOAD = 0x74,CONF_F_DEF_LOAD = 0x78,CONF_F_DEF_LOAD_BIO = 0x79,CONF_F_MODULE_INIT = 0x73,CONF_F_MODULE_LOAD_DSO = 0x75,CONF_F_MODULE_RUN = 0x76,CONF_F_NCONF_DUMP_BIO = 0x69,CONF_F_NCONF_DUMP_FP = 0x6A,CONF_F_NCONF_GET_NUMBER = 0x6B,CONF_F_NCONF_GET_NUMBER_E = 0x70,CONF_F_NCONF_GET_SECTION = 0x6C,CONF_F_NCONF_GET_STRING = 0x6D,CONF_F_NCONF_LOAD = 0x71,CONF_F_NCONF_LOAD_BIO = 0x6E,CONF_F_NCONF_LOAD_FP = 0x72,CONF_F_NCONF_NEW = 0x6F,CONF_F_STR_COPY = 0x65,CONF_R_ERROR_LOADING_DSO = 0x6E,CONF_R_MISSING_CLOSE_SQUARE_BRACKET = 0x64,CONF_R_MISSING_EQUAL_SIGN = 0x65,CONF_R_MISSING_FINISH_FUNCTION = 0x6F,CONF_R_MISSING_INIT_FUNCTION = 0x70,CONF_R_MODULE_INITIALIZATION_ERROR = 0x6D,CONF_R_NO_CLOSE_BRACE = 0x66,CONF_R_NO_CONF = 0x69,CONF_R_NO_CONF_OR_ENVIRONMENT_VARIABLE = 0x6A,CONF_R_NO_SECTION = 0x6B,CONF_R_NO_SUCH_FILE = 0x72,CONF_R_NO_VALUE = 0x6C,CONF_R_UNABLE_TO_CREATE_NEW_SECTION = 0x67,CONF_R_UNKNOWN_MODULE_NAME = 0x71,CONF_R_VARIABLE_HAS_NO_VALUE = 0x68,};
enum MACRO_CONFIG {CONFIG_MAXVIFS = 32,CONFIG_MFCTBLSIZ = 256,};
enum MACRO_CONTAINER {CONTAINER_KEY_ALLOW_DUPLICATES = 0x1,CONTAINER_KEY_UNSORTED = 0x2,};
enum MACRO_CONTEXT {CONTEXT_MATCH_EXACT = 1,CONTEXT_MATCH_PREFIX = 2,};
enum MACRO_CONTINUE {CONTINUE = 3,TRANSIENT = 4,};
enum MACRO_CONTTYPE {CONTTYPE = 55,TSUID = 2048,};
enum MACRO_COPYFILE {COPYFILE_STATE_SRC_FD = 1,COPYFILE_STATE_SRC_FILENAME = 2,COPYFILE_STATE_DST_FD = 3,COPYFILE_STATE_DST_FILENAME = 4,COPYFILE_STATE_QUARANTINE = 5,COPYFILE_STATE_STATUS_CB = 6,COPYFILE_STATE_STATUS_CTX = 7,COPYFILE_STATE_COPIED = 8,COPYFILE_STATE_XATTRNAME = 9,COPYFILE_ACL = 1,COPYFILE_STAT = 2,COPYFILE_XATTR = 4,COPYFILE_DATA = 8,COPYFILE_SECURITY = 3,COPYFILE_METADATA = 7,COPYFILE_ALL = 15,COPYFILE_RECURSIVE = 32768,COPYFILE_CHECK = 65536,COPYFILE_EXCL = 131072,COPYFILE_NOFOLLOW_SRC = 262144,COPYFILE_NOFOLLOW_DST = 524288,COPYFILE_MOVE = 1048576,COPYFILE_UNLINK = 2097152,COPYFILE_NOFOLLOW = 786432,COPYFILE_PACK = 4194304,COPYFILE_UNPACK = 8388608,COPYFILE_VERBOSE = 1073741824,COPYFILE_RECURSE_ERROR = 0,COPYFILE_RECURSE_FILE = 1,COPYFILE_RECURSE_DIR = 2,COPYFILE_RECURSE_DIR_CLEANUP = 3,COPYFILE_COPY_DATA = 4,COPYFILE_COPY_XATTR = 5,COPYFILE_START = 1,COPYFILE_FINISH = 2,COPYFILE_ERR = 3,COPYFILE_PROGRESS = 4,COPYFILE_CONTINUE = 0,COPYFILE_SKIP = 1,COPYFILE_QUIT = 2,};
enum MACRO_COUNT {task_MSG_COUNT = 35,thread_act_MSG_COUNT = 25,vm_map_MSG_COUNT = 31,mach_port_MSG_COUNT = 31,};
enum MACRO_COUNTER {COUNTER = 65,};
enum MACRO_COUNTER64 {COUNTER64 = 70,};
enum MACRO_CPF {CPF_OVERWRITE = 1,CPF_IGNORE_MODE = 2,CPF_MASK = 3,};
enum MACRO_CPU : __int64 {CPU_STATE_MAX = 4,CPU_STATE_USER = 0,CPU_STATE_SYSTEM = 1,CPU_STATE_IDLE = 2,CPU_STATE_NICE = 3,CPU_ARCH_MASK = 4278190080,CPU_ARCH_ABI64 = 16777216,CPU_TYPE_ANY = -1,CPU_TYPE_VAX = 1,CPU_TYPE_MC680x0 = 6,CPU_TYPE_X86 = 7,CPU_TYPE_I386 = 7,CPU_TYPE_X86_64 = 16777223,CPU_TYPE_MC98000 = 10,CPU_TYPE_HPPA = 11,CPU_TYPE_ARM = 12,CPU_TYPE_MC88000 = 13,CPU_TYPE_SPARC = 14,CPU_TYPE_I860 = 15,CPU_TYPE_POWERPC = 18,CPU_TYPE_POWERPC64 = 16777234,CPU_SUBTYPE_MASK = 4278190080,CPU_SUBTYPE_LIB64 = 2147483648,CPU_SUBTYPE_MULTIPLE = -1,CPU_SUBTYPE_LITTLE_ENDIAN = 0,CPU_SUBTYPE_BIG_ENDIAN = 1,CPU_THREADTYPE_NONE = 0,CPU_SUBTYPE_VAX_ALL = 0,CPU_SUBTYPE_VAX780 = 1,CPU_SUBTYPE_VAX785 = 2,CPU_SUBTYPE_VAX750 = 3,CPU_SUBTYPE_VAX730 = 4,CPU_SUBTYPE_UVAXI = 5,CPU_SUBTYPE_UVAXII = 6,CPU_SUBTYPE_VAX8200 = 7,CPU_SUBTYPE_VAX8500 = 8,CPU_SUBTYPE_VAX8600 = 9,CPU_SUBTYPE_VAX8650 = 10,CPU_SUBTYPE_VAX8800 = 11,CPU_SUBTYPE_UVAXIII = 12,CPU_SUBTYPE_MC680x0_ALL = 1,CPU_SUBTYPE_MC68030 = 1,CPU_SUBTYPE_MC68040 = 2,CPU_SUBTYPE_MC68030_ONLY = 3,CPU_SUBTYPE_I386_ALL = 3,CPU_SUBTYPE_386 = 3,CPU_SUBTYPE_486 = 4,CPU_SUBTYPE_486SX = 132,CPU_SUBTYPE_586 = 5,CPU_SUBTYPE_PENT = 5,CPU_SUBTYPE_PENTPRO = 22,CPU_SUBTYPE_PENTII_M3 = 54,CPU_SUBTYPE_PENTII_M5 = 86,CPU_SUBTYPE_CELERON = 103,CPU_SUBTYPE_CELERON_MOBILE = 119,CPU_SUBTYPE_PENTIUM_3 = 8,CPU_SUBTYPE_PENTIUM_3_M = 24,CPU_SUBTYPE_PENTIUM_3_XEON = 40,CPU_SUBTYPE_PENTIUM_M = 9,CPU_SUBTYPE_PENTIUM_4 = 10,CPU_SUBTYPE_PENTIUM_4_M = 26,CPU_SUBTYPE_ITANIUM = 11,CPU_SUBTYPE_ITANIUM_2 = 27,CPU_SUBTYPE_XEON = 12,CPU_SUBTYPE_XEON_MP = 28,CPU_SUBTYPE_INTEL_FAMILY_MAX = 15,CPU_SUBTYPE_INTEL_MODEL_ALL = 0,CPU_SUBTYPE_X86_ALL = 3,CPU_SUBTYPE_X86_64_ALL = 3,CPU_SUBTYPE_X86_ARCH1 = 4,CPU_THREADTYPE_INTEL_HTT = 1,CPU_SUBTYPE_MIPS_ALL = 0,CPU_SUBTYPE_MIPS_R2300 = 1,CPU_SUBTYPE_MIPS_R2600 = 2,CPU_SUBTYPE_MIPS_R2800 = 3,CPU_SUBTYPE_MIPS_R2000a = 4,CPU_SUBTYPE_MIPS_R2000 = 5,CPU_SUBTYPE_MIPS_R3000a = 6,CPU_SUBTYPE_MIPS_R3000 = 7,CPU_SUBTYPE_MC98000_ALL = 0,CPU_SUBTYPE_MC98601 = 1,CPU_SUBTYPE_HPPA_ALL = 0,CPU_SUBTYPE_HPPA_7100 = 0,CPU_SUBTYPE_HPPA_7100LC = 1,CPU_SUBTYPE_MC88000_ALL = 0,CPU_SUBTYPE_MC88100 = 1,CPU_SUBTYPE_MC88110 = 2,CPU_SUBTYPE_SPARC_ALL = 0,CPU_SUBTYPE_I860_ALL = 0,CPU_SUBTYPE_I860_860 = 1,CPU_SUBTYPE_POWERPC_ALL = 0,CPU_SUBTYPE_POWERPC_601 = 1,CPU_SUBTYPE_POWERPC_602 = 2,CPU_SUBTYPE_POWERPC_603 = 3,CPU_SUBTYPE_POWERPC_603e = 4,CPU_SUBTYPE_POWERPC_603ev = 5,CPU_SUBTYPE_POWERPC_604 = 6,CPU_SUBTYPE_POWERPC_604e = 7,CPU_SUBTYPE_POWERPC_620 = 8,CPU_SUBTYPE_POWERPC_750 = 9,CPU_SUBTYPE_POWERPC_7400 = 10,CPU_SUBTYPE_POWERPC_7450 = 11,CPU_SUBTYPE_POWERPC_970 = 100,CPU_SUBTYPE_ARM_ALL = 0,CPU_SUBTYPE_ARM_V4T = 5,CPU_SUBTYPE_ARM_V6 = 6,CPU_SUBTYPE_ARM_V5TEJ = 7,CPU_SUBTYPE_ARM_XSCALE = 8,CPU_SUBTYPE_ARM_V7 = 9,};
enum MACRO_CPUFAMILY : __int64 {CPUFAMILY_UNKNOWN = 0,CPUFAMILY_POWERPC_G3 = 3471054153,CPUFAMILY_POWERPC_G4 = 2009171118,CPUFAMILY_POWERPC_G5 = 3983988906,CPUFAMILY_INTEL_6_13 = 2855483691,CPUFAMILY_INTEL_YONAH = 1943433984,CPUFAMILY_INTEL_MEROM = 1114597871,CPUFAMILY_INTEL_PENRYN = 2028621756,CPUFAMILY_INTEL_NEHALEM = 1801080018,CPUFAMILY_INTEL_WESTMERE = 1463508716,CPUFAMILY_INTEL_SANDYBRIDGE = 1418770316,CPUFAMILY_ARM_9 = 3878847406,CPUFAMILY_ARM_11 = 2415272152,CPUFAMILY_ARM_XSCALE = 1404044789,CPUFAMILY_ARM_13 = 214503012,CPUFAMILY_ARM_14 = 2517073649,CPUFAMILY_INTEL_6_14 = 1943433984,CPUFAMILY_INTEL_6_15 = 1114597871,CPUFAMILY_INTEL_6_23 = 2028621756,CPUFAMILY_INTEL_6_26 = 1801080018,CPUFAMILY_INTEL_CORE = 1943433984,CPUFAMILY_INTEL_CORE2 = 1114597871,};
enum MACRO_CR0 {CR0 = 0x0,CR1 = 0x1000,CR2 = 0x2000,};
enum MACRO_CR3 {CR3 = 0x3000,};
enum MACRO_CREPRINT {CREPRINT = 18,};
enum MACRO_CRF {CRF_NOMEMBERD = 0x1,CRF_MAC_ENFORCE = 0x2,};
enum MACRO_CRNCYSTR {CRNCYSTR = 56,};
enum MACRO_CROUND {CROUND = 63,MAXBSIZE = 1048576,};
enum MACRO_CRPRNT {CRPRNT = 18,};
enum MACRO_CRYPTO {CRYPTO_LOCK_ERR = 1,CRYPTO_LOCK_EX_DATA = 2,CRYPTO_LOCK_X509 = 3,CRYPTO_LOCK_X509_INFO = 4,CRYPTO_LOCK_X509_PKEY = 5,CRYPTO_LOCK_X509_CRL = 6,CRYPTO_LOCK_X509_REQ = 7,CRYPTO_LOCK_DSA = 8,CRYPTO_LOCK_RSA = 9,CRYPTO_LOCK_EVP_PKEY = 10,CRYPTO_LOCK_X509_STORE = 11,CRYPTO_LOCK_SSL_CTX = 12,CRYPTO_LOCK_SSL_CERT = 13,CRYPTO_LOCK_SSL_SESSION = 14,CRYPTO_LOCK_SSL_SESS_CERT = 15,CRYPTO_LOCK_SSL = 16,CRYPTO_LOCK_SSL_METHOD = 17,CRYPTO_LOCK_RAND = 18,CRYPTO_LOCK_RAND2 = 19,CRYPTO_LOCK_MALLOC = 20,CRYPTO_LOCK_BIO = 21,CRYPTO_LOCK_GETHOSTBYNAME = 22,CRYPTO_LOCK_GETSERVBYNAME = 23,CRYPTO_LOCK_READDIR = 24,CRYPTO_LOCK_RSA_BLINDING = 25,CRYPTO_LOCK_DH = 26,CRYPTO_LOCK_MALLOC2 = 27,CRYPTO_LOCK_DSO = 28,CRYPTO_LOCK_DYNLOCK = 29,CRYPTO_LOCK_ENGINE = 30,CRYPTO_LOCK_UI = 31,CRYPTO_LOCK_ECDSA = 32,CRYPTO_LOCK_EC = 33,CRYPTO_LOCK_ECDH = 34,CRYPTO_LOCK_BN = 35,CRYPTO_LOCK_EC_PRE_COMP = 36,CRYPTO_LOCK_STORE = 37,CRYPTO_LOCK_COMP = 38,CRYPTO_NUM_LOCKS = 39,CRYPTO_LOCK = 1,CRYPTO_UNLOCK = 2,CRYPTO_READ = 4,CRYPTO_WRITE = 8,CRYPTO_MEM_CHECK_OFF = 0,CRYPTO_MEM_CHECK_ON = 1,CRYPTO_MEM_CHECK_ENABLE = 2,CRYPTO_MEM_CHECK_DISABLE = 3,};
enum MACRO_CRYPTO_EX {CRYPTO_EX_INDEX_BIO = 0,CRYPTO_EX_INDEX_SSL = 1,CRYPTO_EX_INDEX_SSL_CTX = 2,CRYPTO_EX_INDEX_SSL_SESSION = 3,CRYPTO_EX_INDEX_X509_STORE = 4,CRYPTO_EX_INDEX_X509_STORE_CTX = 5,CRYPTO_EX_INDEX_RSA = 6,CRYPTO_EX_INDEX_DSA = 7,CRYPTO_EX_INDEX_DH = 8,CRYPTO_EX_INDEX_ENGINE = 9,CRYPTO_EX_INDEX_X509 = 10,CRYPTO_EX_INDEX_UI = 11,CRYPTO_EX_INDEX_ECDSA = 12,CRYPTO_EX_INDEX_ECDH = 13,CRYPTO_EX_INDEX_COMP = 14,CRYPTO_EX_INDEX_STORE = 15,CRYPTO_EX_INDEX_USER = 100,};
enum MACRO_CRYPTO_F {CRYPTO_F_CRYPTO_GET_EX_NEW_INDEX = 100,CRYPTO_F_CRYPTO_GET_NEW_DYNLOCKID = 103,CRYPTO_F_CRYPTO_GET_NEW_LOCKID = 101,CRYPTO_F_CRYPTO_SET_EX_DATA = 102,CRYPTO_F_DEF_ADD_INDEX = 104,CRYPTO_F_DEF_GET_CLASS = 105,CRYPTO_F_INT_DUP_EX_DATA = 106,CRYPTO_F_INT_FREE_EX_DATA = 107,CRYPTO_F_INT_NEW_EX_DATA = 108,CRYPTO_R_NO_DYNLOCK_CREATE_CALLBACK = 100,};
enum MACRO_CS5 {CS5 = 0x0,CS6 = 0x100,CS7 = 0x200,};
enum MACRO_CS8 {CS8 = 0x300,CSTOPB = 0x400,CREAD = 0x800,PARENB = 0x1000,PARODD = 0x2000,HUPCL = 0x4000,CLOCAL = 0x8000,};
enum MACRO_CSTART {CSTART = 17,};
enum MACRO_CSTOP {CSTOP = 19,};
enum MACRO_CSUSP {CSUSP = 26,};
enum MACRO_CTIME {CTIME = 0,CDSUSP = 25,};
enum MACRO_CTL {CTL_MAXNAME = 12,};
enum MACRO_CTLFLAG : __int64 {CTLFLAG_RD = 0x80000000,CTLFLAG_WR = 0x40000000,CTLFLAG_RW = 0xC0000000,CTLFLAG_NOLOCK = 0x20000000,CTLFLAG_ANYBODY = 0x10000000,CTLFLAG_SECURE = 0x8000000,CTLFLAG_MASKED = 0x4000000,CTLFLAG_NOAUTO = 0x2000000,CTLFLAG_KERN = 0x1000000,CTLFLAG_LOCKED = 0x800000,CTLFLAG_OID2 = 0x400000,};
enum MACRO_CTLTYPE {CTLTYPE = 0xF,};
enum MACRO_CTLTYPE_NODE {CTLTYPE_NODE = 1,CTLTYPE_INT = 2,CTLTYPE_STRING = 3,CTLTYPE_QUAD = 4,CTLTYPE_OPAQUE = 5,CTLTYPE_STRUCT = 5,};
enum MACRO_CTL_DEBUG {CTL_DEBUG_NAME = 0,CTL_DEBUG_VALUE = 1,CTL_DEBUG_MAXID = 20,};
enum MACRO_CTL_UNSPEC {CTL_UNSPEC = 0,CTL_KERN = 1,CTL_VM = 2,CTL_VFS = 3,CTL_NET = 4,CTL_DEBUG = 5,CTL_HW = 6,CTL_MACHDEP = 7,CTL_USER = 8,CTL_MAXID = 9,};
enum MACRO_CTX {CTX_TEST = 0x1,};
enum MACRO_CUPS {CUPS_FILE_NONE = 0,CUPS_FILE_GZIP = 1,};
enum MACRO_CUPS_RASTER {CUPS_RASTER_SYNC = 0x52615333,CUPS_RASTER_REVSYNC = 0x33536152,CUPS_RASTER_SYNCv1 = 0x52615374,CUPS_RASTER_REVSYNCv1 = 0x74536152,CUPS_RASTER_SYNCv2 = 0x52615332,CUPS_RASTER_REVSYNCv2 = 0x32536152,CUPS_RASTER_SYNC_PWG = 0x52615332,CUPS_RASTER_HAVE_COLORIMETRIC = 0x1,CUPS_RASTER_HAVE_DEVICE = 0x1,CUPS_RASTER_HAVE_PWGRASTER = 0x1,CUPS_SC_FD = 0x4,CUPS_MAX_CHAN = 0xF,CUPS_MAX_LUT = 0xFFF,CUPS_MAX_RGB = 0x4,CUPS_MAX_USTRING = 0x2000,};
enum MACRO_CUPS_VERSION : __int64 {CUPS_VERSION_MAJOR = 1,CUPS_VERSION_MINOR = 5,CUPS_VERSION_PATCH = 0,CUPS_BC_FD = 3,CUPS_DATE_ANY = -1,CUPS_EXCLUDE_NONE = 0,CUPS_INCLUDE_ALL = 0,CUPS_JOBID_ALL = -1,CUPS_JOBID_CURRENT = 0,CUPS_LENGTH_VARIABLE = 0,CUPS_TIMEOUT_DEFAULT = 0,CUPS_WHICHJOBS_ALL = -1,CUPS_WHICHJOBS_ACTIVE = 0,CUPS_WHICHJOBS_COMPLETED = 1,};
enum MACRO_CURL {CURL_SIZEOF_LONG = 8,CURL_SIZEOF_CURL_SOCKLEN_T = 4,CURL_SIZEOF_CURL_OFF_T = 8,};
enum MACRO_CURLAUTH : __int64 {CURLAUTH_NONE = 0,CURLAUTH_BASIC = 1,CURLAUTH_DIGEST = 2,CURLAUTH_GSSNEGOTIATE = 4,CURLAUTH_NTLM = 8,CURLAUTH_DIGEST_IE = 16,CURLAUTH_ONLY = 2147483648,CURLAUTH_ANY = -17,CURLAUTH_ANYSAFE = -18,};
enum MACRO_CURLE {CURLE_ALREADY_COMPLETE = 99999,};
enum MACRO_CURLFINFOFLAG {CURLFINFOFLAG_KNOWN_FILENAME = 1,CURLFINFOFLAG_KNOWN_FILETYPE = 2,CURLFINFOFLAG_KNOWN_TIME = 4,CURLFINFOFLAG_KNOWN_PERM = 8,CURLFINFOFLAG_KNOWN_UID = 16,CURLFINFOFLAG_KNOWN_GID = 32,CURLFINFOFLAG_KNOWN_SIZE = 64,CURLFINFOFLAG_KNOWN_HLINKCOUNT = 128,};
enum MACRO_CURLINFO {CURLINFO_STRING = 0x100000,CURLINFO_LONG = 0x200000,CURLINFO_DOUBLE = 0x300000,CURLINFO_SLIST = 0x400000,CURLINFO_MASK = 0xFFFFF,CURLINFO_TYPEMASK = 0xF00000,};
enum MACRO_CURLOPTTYPE {CURLOPTTYPE_LONG = 0,CURLOPTTYPE_OBJECTPOINT = 10000,CURLOPTTYPE_FUNCTIONPOINT = 20000,CURLOPTTYPE_OFF_T = 30000,};
enum MACRO_CURLPAUSE {CURLPAUSE_RECV = 1,CURLPAUSE_RECV_CONT = 0,CURLPAUSE_SEND = 4,CURLPAUSE_SEND_CONT = 0,CURLPAUSE_ALL = 5,CURLPAUSE_CONT = 0,};
enum MACRO_CURLPROTO : __int64 {CURLPROTO_HTTP = 1,CURLPROTO_HTTPS = 2,CURLPROTO_FTP = 4,CURLPROTO_FTPS = 8,CURLPROTO_SCP = 16,CURLPROTO_SFTP = 32,CURLPROTO_TELNET = 64,CURLPROTO_LDAP = 128,CURLPROTO_LDAPS = 256,CURLPROTO_DICT = 512,CURLPROTO_FILE = 1024,CURLPROTO_TFTP = 2048,CURLPROTO_IMAP = 4096,CURLPROTO_IMAPS = 8192,CURLPROTO_POP3 = 16384,CURLPROTO_POP3S = 32768,CURLPROTO_SMTP = 65536,CURLPROTO_SMTPS = 131072,CURLPROTO_RTSP = 262144,CURLPROTO_RTMP = 524288,CURLPROTO_RTMPT = 1048576,CURLPROTO_RTMPE = 2097152,CURLPROTO_RTMPTE = 4194304,CURLPROTO_RTMPS = 8388608,CURLPROTO_RTMPTS = 16777216,CURLPROTO_GOPHER = 33554432,CURLPROTO_ALL = -1,};
enum MACRO_CURLSSH : __int64 {CURLSSH_AUTH_ANY = -1,CURLSSH_AUTH_NONE = 0,CURLSSH_AUTH_PUBLICKEY = 1,CURLSSH_AUTH_PASSWORD = 2,CURLSSH_AUTH_HOST = 4,CURLSSH_AUTH_KEYBOARD = 8,CURLSSH_AUTH_DEFAULT = -1,};
enum MACRO_CURL_CHUNK {CURL_CHUNK_BGN_FUNC_OK = 0,CURL_CHUNK_BGN_FUNC_FAIL = 1,CURL_CHUNK_BGN_FUNC_SKIP = 2,CURL_CHUNK_END_FUNC_OK = 0,CURL_CHUNK_END_FUNC_FAIL = 1,CURL_FNMATCHFUNC_MATCH = 0,CURL_FNMATCHFUNC_NOMATCH = 1,CURL_FNMATCHFUNC_FAIL = 2,CURL_SEEKFUNC_OK = 0,CURL_SEEKFUNC_FAIL = 1,CURL_SEEKFUNC_CANTSEEK = 2,CURL_READFUNC_ABORT = 268435456,CURL_READFUNC_PAUSE = 268435457,};
enum MACRO_CURL_ERROR {CURL_ERROR_SIZE = 256,};
enum MACRO_CURL_GLOBAL {CURL_GLOBAL_SSL = 1,CURL_GLOBAL_WIN32 = 2,CURL_GLOBAL_ALL = 3,CURL_GLOBAL_NOTHING = 0,CURL_GLOBAL_DEFAULT = 3,CURL_VERSION_IPV6 = 1,CURL_VERSION_KERBEROS4 = 2,CURL_VERSION_SSL = 4,CURL_VERSION_LIBZ = 8,CURL_VERSION_NTLM = 16,CURL_VERSION_GSSNEGOTIATE = 32,CURL_VERSION_DEBUG = 64,CURL_VERSION_ASYNCHDNS = 128,CURL_VERSION_SPNEGO = 256,CURL_VERSION_LARGEFILE = 512,CURL_VERSION_IDN = 1024,CURL_VERSION_SSPI = 2048,CURL_VERSION_CONV = 4096,CURL_VERSION_CURLDEBUG = 8192,CURL_VERSION_TLSAUTH_SRP = 16384,};
enum MACRO_CURL_IPRESOLVE {CURL_IPRESOLVE_WHATEVER = 0,CURL_IPRESOLVE_V4 = 1,CURL_IPRESOLVE_V6 = 2,CURL_REDIR_GET_ALL = 0,CURL_REDIR_POST_301 = 1,CURL_REDIR_POST_302 = 2,CURL_REDIR_POST_ALL = 3,};
enum MACRO_CURL_MAX {CURL_MAX_WRITE_SIZE = 16384,CURL_MAX_HTTP_HEADER = 102400,CURL_WRITEFUNC_PAUSE = 268435457,};
enum MACRO_CURL_POLL : __int64 {CURL_POLL_NONE = 0,CURL_POLL_IN = 1,CURL_POLL_OUT = 2,CURL_POLL_INOUT = 3,CURL_POLL_REMOVE = 4,CURL_SOCKET_TIMEOUT = -1,CURL_CSELECT_IN = 1,CURL_CSELECT_OUT = 2,CURL_CSELECT_ERR = 4,};
enum MACRO_CURL_SOCKET : __int64 {CURL_SOCKET_BAD = -1,};
enum MACRO_CURSES {CURSES = 1,};
enum MACRO_CURSES_H {CURSES_H = 1,};
enum MACRO_CWERASE {CWERASE = 23,};
enum MACRO_D {D_TAPE = 1,D_DISK = 2,D_TTY = 3,};
enum MACRO_DATA {DATA = 0x3,ACK = 0x4,};
enum MACRO_DAY {DAY_1 = 7,DAY_2 = 8,DAY_3 = 9,DAY_4 = 10,DAY_5 = 11,DAY_6 = 12,DAY_7 = 13,};
enum MACRO_DAYS {DAYS_PER_WEEK = 7,DAYS_PER_NYEAR = 365,DAYS_PER_LYEAR = 366,};
enum MACRO_DAYSPERLYEAR {DAYSPERLYEAR = 366,SECSPERHOUR = 3600,SECSPERDAY = 86400,};
enum MACRO_DAYSPERNYEAR {DAYSPERNYEAR = 365,};
enum MACRO_DAYSPERWEEK {DAYSPERWEEK = 7,};
enum MACRO_DB : __int64 {DB_LOCK = 0x20000000,DB_SHMEM = 0x40000000,DB_TXN = 0x80000000,};
enum MACRO_DBG {DBG_ZERO_FILL_FAULT = 1,DBG_PAGEIN_FAULT = 2,DBG_COW_FAULT = 3,DBG_CACHE_HIT_FAULT = 4,DBG_NZF_PAGE_FAULT = 5,DBG_GUARD_FAULT = 6,DBG_PAGEINV_FAULT = 7,DBG_PAGEIND_FAULT = 8,DBG_FUNC_START = 1,DBG_FUNC_END = 2,DBG_FUNC_NONE = 0,DBG_MACH = 1,DBG_NETWORK = 2,DBG_FSYSTEM = 3,DBG_BSD = 4,DBG_IOKIT = 5,DBG_DRIVERS = 6,DBG_TRACE = 7,DBG_DLIL = 8,DBG_SECURITY = 9,DBG_CORESTORAGE = 10,DBG_MISC = 20,DBG_DYLD = 31,DBG_QT = 32,DBG_APPS = 33,DBG_LAUNCHD = 34,DBG_MIG = 255,DBG_MACH_EXCP_KTRAP_x86 = 2,DBG_MACH_EXCP_DFLT = 3,DBG_MACH_EXCP_IFLT = 4,DBG_MACH_EXCP_INTR = 5,DBG_MACH_EXCP_ALNG = 6,DBG_MACH_EXCP_UTRAP_x86 = 7,DBG_MACH_EXCP_FP = 8,DBG_MACH_EXCP_DECI = 9,DBG_MACH_CHUD = 10,DBG_MACH_EXCP_SC = 12,DBG_MACH_EXCP_TRACE = 13,DBG_MACH_EXCP_EMUL = 14,DBG_MACH_IHDLR = 16,DBG_MACH_IPC = 32,DBG_MACH_VM = 48,DBG_MACH_LEAKS = 49,DBG_MACH_SCHED = 64,DBG_MACH_MSGID_INVALID = 80,DBG_MACH_LOCKS = 96,DBG_MACH_PMAP = 112,DBG_MACH_MP = 144,};
enum MACRO_DBG_APP {DBG_APP_SAMBA = 128,};
enum MACRO_DBG_NETIP {DBG_NETIP = 1,DBG_NETARP = 2,DBG_NETUDP = 3,DBG_NETTCP = 4,DBG_NETICMP = 5,DBG_NETIGMP = 6,DBG_NETRIP = 7,DBG_NETOSPF = 8,DBG_NETISIS = 9,DBG_NETSNMP = 10,DBG_NETSOCK = 11,DBG_NETAARP = 100,DBG_NETDDP = 101,DBG_NETNBP = 102,DBG_NETZIP = 103,DBG_NETADSP = 104,DBG_NETATP = 105,DBG_NETASP = 106,DBG_NETAFP = 107,DBG_NETRTMP = 108,DBG_NETAURP = 109,DBG_NETIPSEC = 128,DBG_IOINTC = 0,DBG_IOWORKLOOP = 1,DBG_IOINTES = 2,DBG_IOCLKES = 3,DBG_IOCMDQ = 4,DBG_IOMCURS = 5,DBG_IOMDESC = 6,DBG_IOPOWER = 7,DBG_IOSERVICE = 8,DBG_IOSTORAGE = 32,DBG_IONETWORK = 33,DBG_IOKEYBOARD = 34,DBG_IOHID = 35,DBG_IOAUDIO = 36,DBG_IOSERIAL = 37,DBG_IOTTY = 38,DBG_IOSAM = 39,DBG_IOPARALLELATA = 40,DBG_IOPARALLELSCSI = 41,DBG_IOSATA = 42,DBG_IOSAS = 43,DBG_IOFIBRECHANNEL = 44,DBG_IOUSB = 45,DBG_IOBLUETOOTH = 46,DBG_IOFIREWIRE = 47,DBG_IOINFINIBAND = 48,DBG_IOCPUPM = 49,DBG_IOGRAPHICS = 50,DBG_HIBERNATE = 51,DBG_IOPOINTING = 35,DBG_IODISK = 32,DBG_DRVSTORAGE = 1,DBG_DRVNETWORK = 2,DBG_DRVKEYBOARD = 3,DBG_DRVHID = 4,DBG_DRVAUDIO = 5,DBG_DRVSERIAL = 7,DBG_DRVSAM = 8,DBG_DRVPARALLELATA = 9,DBG_DRVPARALLELSCSI = 10,DBG_DRVSATA = 11,DBG_DRVSAS = 12,DBG_DRVFIBRECHANNEL = 13,DBG_DRVUSB = 14,DBG_DRVBLUETOOTH = 15,DBG_DRVFIREWIRE = 16,DBG_DRVINFINIBAND = 17,DBG_DRVGRAPHICS = 18,DBG_DRVSD = 19,DBG_DRVPOINTING = 4,DBG_DRVDISK = 1,DBG_DLIL_STATIC = 1,DBG_DLIL_PR_MOD = 2,DBG_DLIL_IF_MOD = 3,DBG_DLIL_PR_FLT = 4,DBG_DLIL_IF_FLT = 5,DBG_FSRW = 1,DBG_DKRW = 2,DBG_FSVN = 3,DBG_FSLOOOKUP = 4,DBG_JOURNAL = 5,DBG_IOCTL = 6,DBG_BOOTCACHE = 7,DBG_HFS = 8,DBG_BSD_PROC = 1,DBG_BSD_EXCP_SC = 12,DBG_BSD_AIO = 13,DBG_BSD_SC_EXTENDED_INFO = 14,DBG_BSD_SC_EXTENDED_INFO2 = 15,};
enum MACRO_DBG_TRACE {DBG_TRACE_DATA = 0,DBG_TRACE_STRING = 1,DBG_TRACE_INFO = 2,DBG_CS_IO = 0,DBG_EVENT = 16,DBG_BUFFER = 32,DBG_DYLD_STRING = 5,};
enum MACRO_DBM {DBM_RDONLY = 0,DBM_INSERT = 0,DBM_REPLACE = 1,};
enum MACRO_DB_ERROR {DB_ERROR_OK = 0,DB_ERROR_MALLOC = 1,DB_ERROR_INDEX_CLASH = 2,DB_ERROR_INDEX_OUT_OF_RANGE = 3,DB_ERROR_NO_INDEX = 4,DB_ERROR_INSERT_INDEX_CLASH = 5,};
enum MACRO_DEFAULT {DEFAULT_MIB_PRIORITY = 127,};
enum MACRO_DEFFILEMODE {DEFFILEMODE = 438,};
enum MACRO_DELETE {DELETE = 2,};
enum MACRO_DES {DES_ENCRYPT = 1,DES_DECRYPT = 0,DES_CBC_MODE = 0,DES_PCBC_MODE = 1,};
enum MACRO_DESC {DESC_CODE_EXEC = 0x18,DESC_CODE_READ = 0x1A,DESC_CODE_16B = 0x0,DESC_CODE_32B = 0x1,DESC_GRAN_BYTE = 0x0,DESC_GRAN_PAGE = 0x1,DESC_DATA_RONLY = 0x10,DESC_DATA_WRITE = 0x12,DESC_DATA_16B = 0x0,DESC_DATA_32B = 0x1,DESC_LDT = 0x2,};
enum MACRO_DESC_CALL {DESC_CALL_GATE = 0xC,DESC_TRAP_GATE = 0xF,DESC_INTR_GATE = 0xE,};
enum MACRO_DESC_TSS {DESC_TSS = 0x9,DESC_TASK_GATE = 0x5,DESC_TBL_MAX = 0x2000,};
enum MACRO_DEV {DEV_BSIZE = 512,DEV_BSHIFT = 9,};
enum MACRO_DEVFS {DEVFS_CHAR = 0,DEVFS_BLOCK = 1,DEVFS_CLONE_ALLOC = 1,DEVFS_CLONE_FREE = 0,};
enum MACRO_DEVICE {DEVICE_PAGER_GUARDED = 0x1,DEVICE_PAGER_COHERENT = 0x2,DEVICE_PAGER_CACHE_INHIB = 0x4,DEVICE_PAGER_WRITE_THROUGH = 0x8,DEVICE_PAGER_CONTIGUOUS = 0x100,DEVICE_PAGER_NOPHYSCACHE = 0x200,};
enum MACRO_DFLCSIZ : __int64 {DFLCSIZ = 0,MAXCSIZ = 9223372036854775807,};
enum MACRO_DFLDSIZ : __int64 {DFLDSIZ = 9223372036854775807,};
enum MACRO_DFLSSIZ {DFLSSIZ = 8388608,MAXSSIZ = 67108864,};
enum MACRO_DH {DH_FLAG_CACHE_MONT_P = 0x1,DH_FLAG_NO_EXP_CONSTTIME = 0x2,DH_GENERATOR_2 = 0x2,DH_GENERATOR_5 = 0x5,DH_CHECK_P_NOT_PRIME = 0x1,DH_CHECK_P_NOT_SAFE_PRIME = 0x2,DH_UNABLE_TO_CHECK_GENERATOR = 0x4,DH_NOT_SUITABLE_GENERATOR = 0x8,DH_CHECK_PUBKEY_TOO_SMALL = 0x1,DH_CHECK_PUBKEY_TOO_LARGE = 0x2,DH_CHECK_P_NOT_STRONG_PRIME = 0x2,DH_F_COMPUTE_KEY = 0x66,DH_F_DHPARAMS_PRINT = 0x64,DH_F_DHPARAMS_PRINT_FP = 0x65,DH_F_DH_BUILTIN_GENPARAMS = 0x6A,DH_F_DH_COMPUTE_KEY = 0x6B,DH_F_DH_GENERATE_KEY = 0x6C,DH_F_DH_GENERATE_PARAMETERS = 0x6D,DH_F_DH_NEW_METHOD = 0x69,DH_F_GENERATE_KEY = 0x67,DH_F_GENERATE_PARAMETERS = 0x68,DH_R_BAD_GENERATOR = 0x65,DH_R_INVALID_PUBKEY = 0x66,DH_R_KEY_SIZE_TOO_SMALL = 0x68,DH_R_MODULUS_TOO_LARGE = 0x67,DH_R_NO_PRIVATE_VALUE = 0x64,};
enum MACRO_DIGEST_LENGTH {SHA224_DIGEST_LENGTH = 28,SHA256_DIGEST_LENGTH = 32,SHA384_DIGEST_LENGTH = 48,SHA512_DIGEST_LENGTH = 64,};
enum MACRO_DIR {DIR_MNTSTATUS_MNTPOINT = 0x1,DIR_MNTSTATUS_TRIGGER = 0x2,};
enum MACRO_DIRBLKSIZ {DIRBLKSIZ = 1024,};
enum MACRO_DIRSTRING {DIRSTRING_TYPE = 10246,PKCS9STRING_TYPE = 10262,};
enum MACRO_DIRTYPE {DIRTYPE = 53,};
enum MACRO_DISPATCH {DISPATCH_API_VERSION = 20110201,};
enum MACRO_DISPATCH_TIME : __int64 {DISPATCH_TIME_NOW = 0,DISPATCH_TIME_FOREVER = -1,DISPATCH_QUEUE_PRIORITY_HIGH = 2,DISPATCH_QUEUE_PRIORITY_DEFAULT = 0,DISPATCH_QUEUE_PRIORITY_LOW = -2,DISPATCH_QUEUE_PRIORITY_BACKGROUND = -32768,DISPATCH_QUEUE_SERIAL = 0,DISPATCH_TARGET_QUEUE_DEFAULT = 0,DISPATCH_MACH_SEND_DEAD = 1,DISPATCH_PROC_EXIT = 2147483648,DISPATCH_PROC_FORK = 1073741824,DISPATCH_PROC_EXEC = 536870912,DISPATCH_PROC_SIGNAL = 134217728,DISPATCH_VNODE_DELETE = 1,DISPATCH_VNODE_WRITE = 2,DISPATCH_VNODE_EXTEND = 4,DISPATCH_VNODE_ATTRIB = 8,DISPATCH_VNODE_LINK = 16,DISPATCH_VNODE_RENAME = 32,DISPATCH_VNODE_REVOKE = 64,DISPATCH_DATA_DESTRUCTOR_DEFAULT = 0,DISPATCH_IO_STREAM = 0,DISPATCH_IO_RANDOM = 1,DISPATCH_IO_STOP = 1,DISPATCH_IO_STRICT_INTERVAL = 1,};
enum MACRO_DK {DK_FEATURE_UNMAP = 0x10,};
enum MACRO_DKIO {DKIO_DONE = 0x1,DKIO_READ = 0x2,DKIO_ASYNC = 0x4,DKIO_META = 0x8,DKIO_PAGING = 0x10,DKIO_THROTTLE = 0x20,DKIO_PASSIVE = 0x40,};
enum MACRO_DKIOCEJECT {DKIOCEJECT = 536896533,};
enum MACRO_DKIOCREQUESTIDLE {DKIOCREQUESTIDLE = 536896542,};
enum MACRO_DKIOCSYNCHRONIZECACHE {DKIOCSYNCHRONIZECACHE = 536896534,};
enum MACRO_DLT {DLT_NULL = 0,DLT_EN10MB = 1,DLT_EN3MB = 2,DLT_AX25 = 3,DLT_PRONET = 4,DLT_CHAOS = 5,DLT_IEEE802 = 6,DLT_ARCNET = 7,DLT_SLIP = 8,DLT_PPP = 9,DLT_FDDI = 10,DLT_ATM_RFC1483 = 11,DLT_RAW = 12,DLT_SLIP_BSDOS = 15,DLT_PPP_BSDOS = 16,DLT_ATM_CLIP = 19,DLT_REDBACK_SMARTEDGE = 32,DLT_PPP_SERIAL = 50,DLT_PPP_ETHER = 51,DLT_SYMANTEC_FIREWALL = 99,DLT_C_HDLC = 104,DLT_CHDLC = 104,DLT_IEEE802_11 = 105,DLT_FRELAY = 107,DLT_LOOP = 108,DLT_ENC = 109,DLT_LINUX_SLL = 113,DLT_LTALK = 114,DLT_ECONET = 115,DLT_IPFILTER = 116,DLT_PFLOG = 117,DLT_CISCO_IOS = 118,DLT_PRISM_HEADER = 119,DLT_AIRONET_HEADER = 120,DLT_HHDLC = 121,DLT_IP_OVER_FC = 122,DLT_SUNATM = 123,DLT_RIO = 124,DLT_PCI_EXP = 125,DLT_AURORA = 126,DLT_IEEE802_11_RADIO = 127,DLT_TZSP = 128,DLT_ARCNET_LINUX = 129,DLT_JUNIPER_MLPPP = 130,DLT_JUNIPER_MLFR = 131,DLT_JUNIPER_ES = 132,DLT_JUNIPER_GGSN = 133,DLT_JUNIPER_MFR = 134,DLT_JUNIPER_ATM2 = 135,DLT_JUNIPER_SERVICES = 136,DLT_JUNIPER_ATM1 = 137,DLT_APPLE_IP_OVER_IEEE1394 = 138,DLT_MTP2_WITH_PHDR = 139,DLT_MTP2 = 140,DLT_MTP3 = 141,DLT_SCCP = 142,DLT_DOCSIS = 143,DLT_LINUX_IRDA = 144,DLT_IBM_SP = 145,DLT_IBM_SN = 146,DLT_USER0 = 147,DLT_USER1 = 148,DLT_USER2 = 149,DLT_USER3 = 150,DLT_USER4 = 151,DLT_USER5 = 152,DLT_USER6 = 153,DLT_USER7 = 154,DLT_USER8 = 155,DLT_USER9 = 156,DLT_USER10 = 157,DLT_USER11 = 158,DLT_USER12 = 159,DLT_USER13 = 160,DLT_USER14 = 161,DLT_USER15 = 162,DLT_IEEE802_11_RADIO_AVS = 163,DLT_JUNIPER_MONITOR = 164,DLT_BACNET_MS_TP = 165,DLT_PPP_PPPD = 166,DLT_PPP_WITH_DIRECTION = 166,DLT_LINUX_PPP_WITHDIRECTION = 166,DLT_JUNIPER_PPPOE = 167,DLT_JUNIPER_PPPOE_ATM = 168,DLT_GPRS_LLC = 169,DLT_GPF_T = 170,DLT_GPF_F = 171,DLT_GCOM_T1E1 = 172,DLT_GCOM_SERIAL = 173,DLT_JUNIPER_PIC_PEER = 174,DLT_ERF_ETH = 175,DLT_ERF_POS = 176,DLT_LINUX_LAPD = 177,DLT_JUNIPER_ETHER = 178,DLT_JUNIPER_PPP = 179,DLT_JUNIPER_FRELAY = 180,DLT_JUNIPER_CHDLC = 181,DLT_MFR = 182,DLT_JUNIPER_VP = 183,DLT_A429 = 184,DLT_A653_ICM = 185,DLT_USB = 186,DLT_BLUETOOTH_HCI_H4 = 187,DLT_IEEE802_16_MAC_CPS = 188,DLT_USB_LINUX = 189,DLT_CAN20B = 190,DLT_IEEE802_15_4_LINUX = 191,DLT_PPI = 192,DLT_IEEE802_16_MAC_CPS_RADIO = 193,DLT_JUNIPER_ISM = 194,DLT_IEEE802_15_4 = 195,DLT_SITA = 196,DLT_ERF = 197,DLT_RAIF1 = 198,DLT_IPMB = 199,DLT_JUNIPER_ST = 200,DLT_BLUETOOTH_HCI_H4_WITH_PHDR = 201,DLT_AX25_KISS = 202,DLT_LAPD = 203,DLT_PPP_WITH_DIR = 204,DLT_C_HDLC_WITH_DIR = 205,DLT_FRELAY_WITH_DIR = 206,DLT_LAPB_WITH_DIR = 207,DLT_IPMB_LINUX = 209,DLT_FLEXRAY = 210,DLT_MOST = 211,DLT_LIN = 212,DLT_X2E_SERIAL = 213,DLT_X2E_XORAYA = 214,DLT_IEEE802_15_4_NONASK_PHY = 215,DLT_LINUX_EVDEV = 216,DLT_GSMTAP_UM = 217,DLT_GSMTAP_ABIS = 218,DLT_MPLS = 219,DLT_USB_LINUX_MMAPPED = 220,DLT_DECT = 221,DLT_AOS = 222,DLT_WIHART = 223,DLT_FC_2 = 224,DLT_FC_2_WITH_FRAME_DELIMS = 225,DLT_IPNET = 226,DLT_CAN_SOCKETCAN = 227,DLT_IPV4 = 228,DLT_IPV6 = 229,DLT_CLASS_NETBSD_RAWAF = 35913728,};
enum MACRO_DLT_PFSYNC {DLT_PFSYNC = 18,};
enum MACRO_DM {DM = 242,};
enum MACRO_DMGET {DMGET = 3,};
enum MACRO_DMSET {DMSET = 0,DMBIS = 1,DMBIC = 2,};
enum MACRO_DNS {DNS_STATUS_OK = 0,DNS_STATUS_BAD_HANDLE = 1,DNS_STATUS_MALFORMED_QUERY = 2,DNS_STATUS_TIMEOUT = 3,DNS_STATUS_SEND_FAILED = 4,DNS_STATUS_RECEIVE_FAILED = 5,DNS_STATUS_CONNECTION_FAILED = 6,DNS_STATUS_WRONG_SERVER = 7,DNS_STATUS_WRONG_XID = 8,DNS_STATUS_WRONG_QUESTION = 9,DNS_PRINT_XID = 1,DNS_PRINT_QR = 2,DNS_PRINT_OPCODE = 4,DNS_PRINT_AA = 8,DNS_PRINT_TC = 16,DNS_PRINT_RD = 32,DNS_PRINT_RA = 64,DNS_PRINT_PR = 128,DNS_PRINT_RCODE = 256,DNS_PRINT_QUESTION = 512,DNS_PRINT_ANSWER = 1024,DNS_PRINT_AUTHORITY = 2048,DNS_PRINT_ADDITIONAL = 4096,DNS_PRINT_SERVER = 8192,};
enum MACRO_DO {DO = 253,};
enum MACRO_DONT {DONT = 254,};
enum MACRO_DOT3COMPLIANCE {DOT3COMPLIANCE_STATS = 1,DOT3COMPLIANCE_COLLS = 2,};
enum MACRO_DOUBLE {SIZEOF_DOUBLE = 8,HAVE_LONG_DOUBLE = 1,SIZEOF_LONG_DOUBLE = 16,};
enum MACRO_DSA {DSA_FLAG_CACHE_MONT_P = 0x1,DSA_FLAG_NO_EXP_CONSTTIME = 0x2,DSA_FLAG_FIPS_METHOD = 0x400,DSA_FLAG_NON_FIPS_ALLOW = 0x400,};
enum MACRO_DSA_F {DSA_F_D2I_DSA_SIG = 110,DSA_F_DSAPARAMS_PRINT = 100,DSA_F_DSAPARAMS_PRINT_FP = 101,DSA_F_DSA_BUILTIN_KEYGEN = 119,DSA_F_DSA_BUILTIN_PARAMGEN = 118,DSA_F_DSA_DO_SIGN = 112,DSA_F_DSA_DO_VERIFY = 113,DSA_F_DSA_GENERATE_PARAMETERS = 117,DSA_F_DSA_NEW_METHOD = 103,DSA_F_DSA_PRINT = 104,DSA_F_DSA_PRINT_FP = 105,DSA_F_DSA_SET_DEFAULT_METHOD = 115,DSA_F_DSA_SET_METHOD = 116,DSA_F_DSA_SIGN = 106,DSA_F_DSA_SIGN_SETUP = 107,DSA_F_DSA_SIG_NEW = 109,DSA_F_DSA_VERIFY = 108,DSA_F_I2D_DSA_SIG = 111,DSA_F_SIG_CB = 114,DSA_R_BAD_Q_VALUE = 102,DSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE = 100,DSA_R_KEY_SIZE_TOO_SMALL = 106,DSA_R_MISSING_PARAMETERS = 101,DSA_R_MODULUS_TOO_LARGE = 103,DSA_R_NON_FIPS_METHOD = 104,DSA_R_OPERATION_NOT_ALLOWED_IN_FIPS_MODE = 105,};
enum MACRO_DSO {DSO_CTRL_GET_FLAGS = 1,DSO_CTRL_SET_FLAGS = 2,DSO_CTRL_OR_FLAGS = 3,DSO_FLAG_NO_NAME_TRANSLATION = 1,DSO_FLAG_NAME_TRANSLATION_EXT_ONLY = 2,DSO_FLAG_UPCASE_SYMBOL = 16,DSO_FLAG_GLOBAL_SYMBOLS = 32,DSO_F_DLFCN_BIND_FUNC = 100,DSO_F_DLFCN_BIND_VAR = 101,DSO_F_DLFCN_LOAD = 102,DSO_F_DLFCN_MERGER = 130,DSO_F_DLFCN_NAME_CONVERTER = 123,DSO_F_DLFCN_UNLOAD = 103,DSO_F_DL_BIND_FUNC = 104,DSO_F_DL_BIND_VAR = 105,DSO_F_DL_LOAD = 106,DSO_F_DL_MERGER = 131,DSO_F_DL_NAME_CONVERTER = 124,DSO_F_DL_UNLOAD = 107,DSO_F_DSO_BIND_FUNC = 108,DSO_F_DSO_BIND_VAR = 109,DSO_F_DSO_CONVERT_FILENAME = 126,DSO_F_DSO_CTRL = 110,DSO_F_DSO_FREE = 111,DSO_F_DSO_GET_FILENAME = 127,DSO_F_DSO_GET_LOADED_FILENAME = 128,DSO_F_DSO_LOAD = 112,DSO_F_DSO_MERGE = 132,DSO_F_DSO_NEW_METHOD = 113,DSO_F_DSO_SET_FILENAME = 129,DSO_F_DSO_SET_NAME_CONVERTER = 122,DSO_F_DSO_UP_REF = 114,DSO_F_VMS_BIND_SYM = 115,DSO_F_VMS_LOAD = 116,DSO_F_VMS_MERGER = 133,DSO_F_VMS_UNLOAD = 117,DSO_F_WIN32_BIND_FUNC = 118,DSO_F_WIN32_BIND_VAR = 119,DSO_F_WIN32_JOINER = 135,DSO_F_WIN32_LOAD = 120,DSO_F_WIN32_MERGER = 134,DSO_F_WIN32_NAME_CONVERTER = 125,DSO_F_WIN32_SPLITTER = 136,DSO_F_WIN32_UNLOAD = 121,DSO_R_CTRL_FAILED = 100,DSO_R_DSO_ALREADY_LOADED = 110,DSO_R_EMPTY_FILE_STRUCTURE = 113,DSO_R_FAILURE = 114,DSO_R_FILENAME_TOO_BIG = 101,DSO_R_FINISH_FAILED = 102,DSO_R_INCORRECT_FILE_SYNTAX = 115,DSO_R_LOAD_FAILED = 103,DSO_R_NAME_TRANSLATION_FAILED = 109,DSO_R_NO_FILENAME = 111,DSO_R_NO_FILE_SPECIFICATION = 116,DSO_R_NULL_HANDLE = 104,DSO_R_SET_FILENAME_FAILED = 112,DSO_R_STACK_ERROR = 105,DSO_R_SYM_FAILURE = 106,DSO_R_UNLOAD_FAILED = 107,DSO_R_UNSUPPORTED = 108,};
enum MACRO_DSS {DSS_prime_checks = 50,};
enum MACRO_DST {DST_NONE = 0,DST_USA = 1,DST_AUST = 2,DST_WET = 3,DST_MET = 4,DST_EET = 5,DST_CAN = 6,};
enum MACRO_DT {DT_UNKNOWN = 0,DT_FIFO = 1,DT_CHR = 2,DT_DIR = 4,DT_BLK = 6,DT_REG = 8,DT_LNK = 10,DT_SOCK = 12,DT_WHT = 14,};
enum MACRO_DTF {DTF_HIDEW = 0x1,DTF_NODUP = 0x2,DTF_REWIND = 0x4,};
enum MACRO_DTLS {DTLS_CTRL_GET_TIMEOUT = 73,DTLS_CTRL_HANDLE_TIMEOUT = 74,DTLS_CTRL_LISTEN = 75,};
enum MACRO_DTLS1 {DTLS1_MT_HELLO_VERIFY_REQUEST = 3,};
enum MACRO_DTLS1_VERSION : __int64 {DTLS1_VERSION = 0xFEFF,DTLS1_BAD_VER = 0x100,DTLS1_COOKIE_LENGTH = 0x100,DTLS1_RT_HEADER_LENGTH = 0xD,DTLS1_HM_HEADER_LENGTH = 0xC,DTLS1_HM_BAD_FRAGMENT = 0xFFFFFFFFFFFFFFFE,DTLS1_HM_FRAGMENT_RETRY = 0xFFFFFFFFFFFFFFFD,DTLS1_CCS_HEADER_LENGTH = 0x1,DTLS1_AL_HEADER_LENGTH = 0x2,DTLS1_TMO_READ_COUNT = 0x2,DTLS1_TMO_WRITE_COUNT = 0x2,DTLS1_TMO_ALERT_COUNT = 0xC,};
enum MACRO_DYLD {DYLD_CACHE_SLIDE_PAGE_ATTRS = 0xC000,DYLD_CACHE_SLIDE_PAGE_ATTR_EXTRA = 0x8000,DYLD_CACHE_SLIDE_PAGE_ATTR_NO_REBASE = 0x4000,DYLD_CACHE_SLIDE_PAGE_ATTR_END = 0x8000,DYLD_CACHE_SLIDE_V3_PAGE_ATTR_NO_REBASE = 0xFFFF,};
enum MACRO_DYN {DYN_SRC_ADDR = 0x1,DYN_SRC_PORT = 0x2,DYN_DST_ADDR = 0x4,DYN_DST_PORT = 0x8,};
enum MACRO_D_MD {D_MD_ORDER = 57,};
enum MACRO_D_T {D_T_FMT = 1,D_FMT = 2,};
enum MACRO_E : __int64 {E_OK = 0,E_SYSTEM_ERROR = -1,E_BAD_ARGUMENT = -2,E_POSTED = -3,E_CONNECTED = -4,E_BAD_STATE = -5,E_NO_ROOM = -6,E_NOT_POSTED = -7,E_UNKNOWN_COMMAND = -8,E_NO_MATCH = -9,E_NOT_SELECTABLE = -10,E_NOT_CONNECTED = -11,E_REQUEST_DENIED = -12,E_INVALID_FIELD = -13,E_CURRENT = -14,};
enum MACRO_EAI {EAI_ADDRFAMILY = 1,EAI_AGAIN = 2,EAI_BADFLAGS = 3,EAI_FAIL = 4,EAI_FAMILY = 5,EAI_MEMORY = 6,EAI_NODATA = 7,EAI_NONAME = 8,EAI_SERVICE = 9,EAI_SOCKTYPE = 10,EAI_SYSTEM = 11,EAI_BADHINTS = 12,EAI_PROTOCOL = 13,EAI_OVERFLOW = 14,EAI_MAX = 15,};
enum MACRO_EBADID {EBADID = 5,};
enum MACRO_EC {EC = 247,};
enum MACRO_ECDH {ECDH_F_ECDH_COMPUTE_KEY = 100,ECDH_F_ECDH_DATA_NEW_METHOD = 101,ECDH_R_KDF_FAILED = 102,ECDH_R_NO_PRIVATE_VALUE = 100,ECDH_R_POINT_ARITHMETIC_FAILURE = 101,};
enum MACRO_ECDSA {ECDSA_F_ECDSA_DATA_NEW_METHOD = 100,ECDSA_F_ECDSA_DO_SIGN = 101,ECDSA_F_ECDSA_DO_VERIFY = 102,ECDSA_F_ECDSA_SIGN_SETUP = 103,ECDSA_R_BAD_SIGNATURE = 100,ECDSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE = 101,ECDSA_R_ERR_EC_LIB = 102,ECDSA_R_MISSING_PARAMETERS = 103,ECDSA_R_NEED_NEW_SETUP_VALUES = 106,ECDSA_R_RANDOM_NUMBER_GENERATION_FAILED = 104,ECDSA_R_SIGNATURE_MALLOC_FAILED = 105,};
enum MACRO_ECHOKE {ECHOKE = 0x1,ECHOE = 0x2,ECHOK = 0x4,ECHONL = 0x10,ECHOPRT = 0x20,ECHOCTL = 0x40,ISIG = 0x80,ICANON = 0x100,ALTWERASE = 0x200,IEXTEN = 0x400,EXTPROC = 0x800,NOKERNINFO = 0x2000000,};
enum MACRO_EC_PKEY {EC_PKEY_NO_PARAMETERS = 0x1,EC_PKEY_NO_PUBKEY = 0x2,EC_F_COMPUTE_WNAF = 0x8F,EC_F_D2I_ECPARAMETERS = 0x90,EC_F_D2I_ECPKPARAMETERS = 0x91,EC_F_D2I_ECPRIVATEKEY = 0x92,EC_F_ECPARAMETERS_PRINT = 0x93,EC_F_ECPARAMETERS_PRINT_FP = 0x94,EC_F_ECPKPARAMETERS_PRINT = 0x95,EC_F_ECPKPARAMETERS_PRINT_FP = 0x96,EC_F_ECP_NIST_MOD_192 = 0xCB,EC_F_ECP_NIST_MOD_224 = 0xCC,EC_F_ECP_NIST_MOD_256 = 0xCD,EC_F_ECP_NIST_MOD_521 = 0xCE,EC_F_EC_ASN1_GROUP2CURVE = 0x99,EC_F_EC_ASN1_GROUP2FIELDID = 0x9A,EC_F_EC_ASN1_GROUP2PARAMETERS = 0x9B,EC_F_EC_ASN1_GROUP2PKPARAMETERS = 0x9C,EC_F_EC_ASN1_PARAMETERS2GROUP = 0x9D,EC_F_EC_ASN1_PKPARAMETERS2GROUP = 0x9E,EC_F_EC_EX_DATA_SET_DATA = 0xD3,EC_F_EC_GF2M_MONTGOMERY_POINT_MULTIPLY = 0xD0,EC_F_EC_GF2M_SIMPLE_GROUP_CHECK_DISCRIMINANT = 0x9F,EC_F_EC_GF2M_SIMPLE_GROUP_SET_CURVE = 0xC3,EC_F_EC_GF2M_SIMPLE_OCT2POINT = 0xA0,EC_F_EC_GF2M_SIMPLE_POINT2OCT = 0xA1,EC_F_EC_GF2M_SIMPLE_POINT_GET_AFFINE_COORDINATES = 0xA2,EC_F_EC_GF2M_SIMPLE_POINT_SET_AFFINE_COORDINATES = 0xA3,EC_F_EC_GF2M_SIMPLE_SET_COMPRESSED_COORDINATES = 0xA4,EC_F_EC_GFP_MONT_FIELD_DECODE = 0x85,EC_F_EC_GFP_MONT_FIELD_ENCODE = 0x86,EC_F_EC_GFP_MONT_FIELD_MUL = 0x83,EC_F_EC_GFP_MONT_FIELD_SET_TO_ONE = 0xD1,EC_F_EC_GFP_MONT_FIELD_SQR = 0x84,EC_F_EC_GFP_MONT_GROUP_SET_CURVE = 0xBD,EC_F_EC_GFP_MONT_GROUP_SET_CURVE_GFP = 0x87,EC_F_EC_GFP_NIST_FIELD_MUL = 0xC8,EC_F_EC_GFP_NIST_FIELD_SQR = 0xC9,EC_F_EC_GFP_NIST_GROUP_SET_CURVE = 0xCA,EC_F_EC_GFP_SIMPLE_GROUP_CHECK_DISCRIMINANT = 0xA5,EC_F_EC_GFP_SIMPLE_GROUP_SET_CURVE = 0xA6,EC_F_EC_GFP_SIMPLE_GROUP_SET_CURVE_GFP = 0x64,EC_F_EC_GFP_SIMPLE_GROUP_SET_GENERATOR = 0x65,EC_F_EC_GFP_SIMPLE_MAKE_AFFINE = 0x66,EC_F_EC_GFP_SIMPLE_OCT2POINT = 0x67,EC_F_EC_GFP_SIMPLE_POINT2OCT = 0x68,EC_F_EC_GFP_SIMPLE_POINTS_MAKE_AFFINE = 0x89,EC_F_EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES = 0xA7,EC_F_EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES_GFP = 0x69,EC_F_EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES = 0xA8,EC_F_EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES_GFP = 0x80,EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES = 0xA9,EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES_GFP = 0x81,EC_F_EC_GROUP_CHECK = 0xAA,EC_F_EC_GROUP_CHECK_DISCRIMINANT = 0xAB,EC_F_EC_GROUP_COPY = 0x6A,EC_F_EC_GROUP_GET0_GENERATOR = 0x8B,EC_F_EC_GROUP_GET_COFACTOR = 0x8C,EC_F_EC_GROUP_GET_CURVE_GF2M = 0xAC,EC_F_EC_GROUP_GET_CURVE_GFP = 0x82,EC_F_EC_GROUP_GET_DEGREE = 0xAD,EC_F_EC_GROUP_GET_ORDER = 0x8D,EC_F_EC_GROUP_GET_PENTANOMIAL_BASIS = 0xC1,EC_F_EC_GROUP_GET_TRINOMIAL_BASIS = 0xC2,EC_F_EC_GROUP_NEW = 0x6C,EC_F_EC_GROUP_NEW_BY_CURVE_NAME = 0xAE,EC_F_EC_GROUP_NEW_FROM_DATA = 0xAF,EC_F_EC_GROUP_PRECOMPUTE_MULT = 0x8E,EC_F_EC_GROUP_SET_CURVE_GF2M = 0xB0,EC_F_EC_GROUP_SET_CURVE_GFP = 0x6D,EC_F_EC_GROUP_SET_EXTRA_DATA = 0x6E,EC_F_EC_GROUP_SET_GENERATOR = 0x6F,EC_F_EC_KEY_CHECK_KEY = 0xB1,EC_F_EC_KEY_COPY = 0xB2,EC_F_EC_KEY_GENERATE_KEY = 0xB3,EC_F_EC_KEY_NEW = 0xB6,EC_F_EC_KEY_PRINT = 0xB4,EC_F_EC_KEY_PRINT_FP = 0xB5,EC_F_EC_POINTS_MAKE_AFFINE = 0x88,EC_F_EC_POINTS_MUL = 0x8A,EC_F_EC_POINT_ADD = 0x70,EC_F_EC_POINT_CMP = 0x71,EC_F_EC_POINT_COPY = 0x72,EC_F_EC_POINT_DBL = 0x73,EC_F_EC_POINT_GET_AFFINE_COORDINATES_GF2M = 0xB7,EC_F_EC_POINT_GET_AFFINE_COORDINATES_GFP = 0x74,EC_F_EC_POINT_GET_JPROJECTIVE_COORDINATES_GFP = 0x75,EC_F_EC_POINT_INVERT = 0xD2,EC_F_EC_POINT_IS_AT_INFINITY = 0x76,EC_F_EC_POINT_IS_ON_CURVE = 0x77,EC_F_EC_POINT_MAKE_AFFINE = 0x78,EC_F_EC_POINT_MUL = 0xB8,EC_F_EC_POINT_NEW = 0x79,EC_F_EC_POINT_OCT2POINT = 0x7A,EC_F_EC_POINT_POINT2OCT = 0x7B,EC_F_EC_POINT_SET_AFFINE_COORDINATES_GF2M = 0xB9,EC_F_EC_POINT_SET_AFFINE_COORDINATES_GFP = 0x7C,EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GF2M = 0xBA,EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GFP = 0x7D,EC_F_EC_POINT_SET_JPROJECTIVE_COORDINATES_GFP = 0x7E,EC_F_EC_POINT_SET_TO_INFINITY = 0x7F,EC_F_EC_PRE_COMP_DUP = 0xCF,EC_F_EC_PRE_COMP_NEW = 0xC4,EC_F_EC_WNAF_MUL = 0xBB,EC_F_EC_WNAF_PRECOMPUTE_MULT = 0xBC,EC_F_I2D_ECPARAMETERS = 0xBE,EC_F_I2D_ECPKPARAMETERS = 0xBF,EC_F_I2D_ECPRIVATEKEY = 0xC0,EC_F_I2O_ECPUBLICKEY = 0x97,EC_F_O2I_ECPUBLICKEY = 0x98,EC_R_ASN1_ERROR = 0x73,EC_R_ASN1_UNKNOWN_FIELD = 0x74,EC_R_BUFFER_TOO_SMALL = 0x64,EC_R_D2I_ECPKPARAMETERS_FAILURE = 0x75,EC_R_DISCRIMINANT_IS_ZERO = 0x76,EC_R_EC_GROUP_NEW_BY_NAME_FAILURE = 0x77,EC_R_FIELD_TOO_LARGE = 0x8A,EC_R_GROUP2PKPARAMETERS_FAILURE = 0x78,EC_R_I2D_ECPKPARAMETERS_FAILURE = 0x79,EC_R_INCOMPATIBLE_OBJECTS = 0x65,EC_R_INVALID_ARGUMENT = 0x70,EC_R_INVALID_COMPRESSED_POINT = 0x6E,EC_R_INVALID_COMPRESSION_BIT = 0x6D,EC_R_INVALID_ENCODING = 0x66,EC_R_INVALID_FIELD = 0x67,EC_R_INVALID_FORM = 0x68,EC_R_INVALID_GROUP_ORDER = 0x7A,EC_R_INVALID_PENTANOMIAL_BASIS = 0x84,EC_R_INVALID_PRIVATE_KEY = 0x7B,EC_R_INVALID_TRINOMIAL_BASIS = 0x89,EC_R_MISSING_PARAMETERS = 0x7C,EC_R_MISSING_PRIVATE_KEY = 0x7D,EC_R_NOT_A_NIST_PRIME = 0x87,EC_R_NOT_A_SUPPORTED_NIST_PRIME = 0x88,EC_R_NOT_IMPLEMENTED = 0x7E,EC_R_NOT_INITIALIZED = 0x6F,EC_R_NO_FIELD_MOD = 0x85,EC_R_PASSED_NULL_PARAMETER = 0x86,EC_R_PKPARAMETERS2GROUP_FAILURE = 0x7F,EC_R_POINT_AT_INFINITY = 0x6A,EC_R_POINT_IS_NOT_ON_CURVE = 0x6B,EC_R_SLOT_FULL = 0x6C,EC_R_UNDEFINED_GENERATOR = 0x71,EC_R_UNDEFINED_ORDER = 0x80,EC_R_UNKNOWN_GROUP = 0x81,EC_R_UNKNOWN_ORDER = 0x72,EC_R_UNSUPPORTED_FIELD = 0x83,EC_R_WRONG_ORDER = 0x82,};
enum MACRO_EEXISTS {EEXISTS = 6,};
enum MACRO_EFL : __int64 {EFL_CF = 0x1,EFL_PF = 0x4,EFL_AF = 0x10,EFL_ZF = 0x40,EFL_SF = 0x80,EFL_TF = 0x100,EFL_IF = 0x200,EFL_DF = 0x400,EFL_OF = 0x800,EFL_IOPL = 0x3000,EFL_IOPL_KERNEL = 0x0,EFL_IOPL_USER = 0x3000,EFL_NT = 0x4000,EFL_RF = 0x10000,EFL_VM = 0x20000,EFL_AC = 0x40000,EFL_VIF = 0x80000,EFL_VIP = 0x100000,EFL_ID = 0x200000,EFL_CLR = 0xFFF88028,EFL_SET = 0x2,EFL_USER_SET = 0x200,EFL_USER_CLEAR = 0x17000,};
enum MACRO_EL {EL_PROMPT = 0,EL_TERMINAL = 1,EL_EDITOR = 2,EL_SIGNAL = 3,EL_BIND = 4,EL_TELLTC = 5,EL_SETTC = 6,EL_ECHOTC = 7,EL_SETTY = 8,EL_ADDFN = 9,EL_HIST = 10,EL_EDITMODE = 11,EL_RPROMPT = 12,EL_GETCFN = 13,EL_CLIENTDATA = 14,EL_UNBUFFERED = 15,EL_PREP_TERM = 16,EL_GETTC = 17,EL_GETFP = 18,EL_SETFP = 19,EL_REFRESH = 20,EL_PROMPT_ESC = 21,EL_RPROMPT_ESC = 22,EL_BUILTIN_GETCFN = 0,};
enum MACRO_EL_0 {EL = 248,};
enum MACRO_EMPTY {EMPTY = 0,};
enum MACRO_ENCRYPT {ENCRYPT_IS = 0,ENCRYPT_SUPPORT = 1,ENCRYPT_REPLY = 2,ENCRYPT_START = 3,ENCRYPT_END = 4,ENCRYPT_REQSTART = 5,ENCRYPT_REQEND = 6,ENCRYPT_ENC_KEYID = 7,ENCRYPT_DEC_KEYID = 8,ENCRYPT_CNT = 9,};
enum MACRO_ENCTYPE {ENCTYPE_NULL = 0x0,ENCTYPE_DES_CBC_CRC = 0x1,ENCTYPE_DES_CBC_MD4 = 0x2,ENCTYPE_DES_CBC_MD5 = 0x3,ENCTYPE_DES_CBC_RAW = 0x4,ENCTYPE_DES3_CBC_SHA = 0x5,ENCTYPE_DES3_CBC_RAW = 0x6,ENCTYPE_DES_HMAC_SHA1 = 0x8,ENCTYPE_DSA_SHA1_CMS = 0x9,ENCTYPE_MD5_RSA_CMS = 0xA,ENCTYPE_SHA1_RSA_CMS = 0xB,ENCTYPE_RC2_CBC_ENV = 0xC,ENCTYPE_RSA_ENV = 0xD,ENCTYPE_RSA_ES_OAEP_ENV = 0xE,ENCTYPE_DES3_CBC_ENV = 0xF,ENCTYPE_DES3_CBC_SHA1 = 0x10,ENCTYPE_AES128_CTS_HMAC_SHA1_96 = 0x11,ENCTYPE_AES256_CTS_HMAC_SHA1_96 = 0x12,ENCTYPE_ARCFOUR_HMAC = 0x17,ENCTYPE_ARCFOUR_HMAC_EXP = 0x18,ENCTYPE_UNKNOWN = 0x1FF,};
enum MACRO_ENCTYPE_ANY {ENCTYPE_ANY = 0,ENCTYPE_DES_CFB64 = 1,ENCTYPE_DES_OFB64 = 2,ENCTYPE_CNT = 3,};
enum MACRO_ENDIAN {LITTLE_ENDIAN = 1234,BIG_ENDIAN = 4321,PDP_ENDIAN = 3412,};
enum MACRO_ENGINE {ENGINE_METHOD_RSA = 0x1,ENGINE_METHOD_DSA = 0x2,ENGINE_METHOD_DH = 0x4,ENGINE_METHOD_RAND = 0x8,ENGINE_METHOD_ECDH = 0x10,ENGINE_METHOD_ECDSA = 0x20,ENGINE_METHOD_CIPHERS = 0x40,ENGINE_METHOD_DIGESTS = 0x80,ENGINE_METHOD_STORE = 0x100,ENGINE_METHOD_ALL = 0xFFFF,ENGINE_METHOD_NONE = 0x0,ENGINE_TABLE_FLAG_NOINIT = 0x1,ENGINE_FLAGS_MANUAL_CMD_CTRL = 0x2,ENGINE_FLAGS_BY_ID_COPY = 0x4,ENGINE_CMD_FLAG_NUMERIC = 0x1,ENGINE_CMD_FLAG_STRING = 0x2,ENGINE_CMD_FLAG_NO_INPUT = 0x4,ENGINE_CMD_FLAG_INTERNAL = 0x8,ENGINE_CTRL_SET_LOGSTREAM = 0x1,ENGINE_CTRL_SET_PASSWORD_CALLBACK = 0x2,ENGINE_CTRL_HUP = 0x3,ENGINE_CTRL_SET_USER_INTERFACE = 0x4,ENGINE_CTRL_SET_CALLBACK_DATA = 0x5,ENGINE_CTRL_LOAD_CONFIGURATION = 0x6,ENGINE_CTRL_LOAD_SECTION = 0x7,ENGINE_CTRL_HAS_CTRL_FUNCTION = 0xA,ENGINE_CTRL_GET_FIRST_CMD_TYPE = 0xB,ENGINE_CTRL_GET_NEXT_CMD_TYPE = 0xC,ENGINE_CTRL_GET_CMD_FROM_NAME = 0xD,ENGINE_CTRL_GET_NAME_LEN_FROM_CMD = 0xE,ENGINE_CTRL_GET_NAME_FROM_CMD = 0xF,ENGINE_CTRL_GET_DESC_LEN_FROM_CMD = 0x10,ENGINE_CTRL_GET_DESC_FROM_CMD = 0x11,ENGINE_CTRL_GET_CMD_FLAGS = 0x12,ENGINE_CMD_BASE = 0xC8,ENGINE_CTRL_CHIL_SET_FORKCHECK = 0x64,ENGINE_CTRL_CHIL_NO_LOCKING = 0x65,};
enum MACRO_ENGINEID {ENGINEID_TYPE_IPV4 = 1,ENGINEID_TYPE_IPV6 = 2,ENGINEID_TYPE_MACADDR = 3,ENGINEID_TYPE_TEXT = 4,ENGINEID_TYPE_EXACT = 5,ENGINEID_TYPE_NETSNMP_RND = 128,};
enum MACRO_ENGINETIME {ENGINETIME_MAX = 2147483647,ENGINEBOOT_MAX = 2147483647,};
enum MACRO_ENGINE_F {ENGINE_F_DYNAMIC_CTRL = 180,ENGINE_F_DYNAMIC_GET_DATA_CTX = 181,ENGINE_F_DYNAMIC_LOAD = 182,ENGINE_F_DYNAMIC_SET_DATA_CTX = 183,ENGINE_F_ENGINE_ADD = 105,ENGINE_F_ENGINE_BY_ID = 106,ENGINE_F_ENGINE_CMD_IS_EXECUTABLE = 170,ENGINE_F_ENGINE_CTRL = 142,ENGINE_F_ENGINE_CTRL_CMD = 178,ENGINE_F_ENGINE_CTRL_CMD_STRING = 171,ENGINE_F_ENGINE_FINISH = 107,ENGINE_F_ENGINE_FREE_UTIL = 108,ENGINE_F_ENGINE_GET_CIPHER = 185,ENGINE_F_ENGINE_GET_DEFAULT_TYPE = 177,ENGINE_F_ENGINE_GET_DIGEST = 186,ENGINE_F_ENGINE_GET_NEXT = 115,ENGINE_F_ENGINE_GET_PREV = 116,ENGINE_F_ENGINE_INIT = 119,ENGINE_F_ENGINE_LIST_ADD = 120,ENGINE_F_ENGINE_LIST_REMOVE = 121,ENGINE_F_ENGINE_LOAD_PRIVATE_KEY = 150,ENGINE_F_ENGINE_LOAD_PUBLIC_KEY = 151,ENGINE_F_ENGINE_LOAD_SSL_CLIENT_CERT = 192,ENGINE_F_ENGINE_NEW = 122,ENGINE_F_ENGINE_REMOVE = 123,ENGINE_F_ENGINE_SET_DEFAULT_STRING = 189,ENGINE_F_ENGINE_SET_DEFAULT_TYPE = 126,ENGINE_F_ENGINE_SET_ID = 129,ENGINE_F_ENGINE_SET_NAME = 130,ENGINE_F_ENGINE_TABLE_REGISTER = 184,ENGINE_F_ENGINE_UNLOAD_KEY = 152,ENGINE_F_ENGINE_UNLOCKED_FINISH = 191,ENGINE_F_ENGINE_UP_REF = 190,ENGINE_F_INT_CTRL_HELPER = 172,ENGINE_F_INT_ENGINE_CONFIGURE = 188,ENGINE_F_INT_ENGINE_MODULE_INIT = 187,ENGINE_F_LOG_MESSAGE = 141,ENGINE_R_ALREADY_LOADED = 100,ENGINE_R_ARGUMENT_IS_NOT_A_NUMBER = 133,ENGINE_R_CMD_NOT_EXECUTABLE = 134,ENGINE_R_COMMAND_TAKES_INPUT = 135,ENGINE_R_COMMAND_TAKES_NO_INPUT = 136,ENGINE_R_CONFLICTING_ENGINE_ID = 103,ENGINE_R_CTRL_COMMAND_NOT_IMPLEMENTED = 119,ENGINE_R_DH_NOT_IMPLEMENTED = 139,ENGINE_R_DSA_NOT_IMPLEMENTED = 140,ENGINE_R_DSO_FAILURE = 104,ENGINE_R_DSO_NOT_FOUND = 132,ENGINE_R_ENGINES_SECTION_ERROR = 148,ENGINE_R_ENGINE_CONFIGURATION_ERROR = 101,ENGINE_R_ENGINE_IS_NOT_IN_LIST = 105,ENGINE_R_ENGINE_SECTION_ERROR = 149,ENGINE_R_FAILED_LOADING_PRIVATE_KEY = 128,ENGINE_R_FAILED_LOADING_PUBLIC_KEY = 129,ENGINE_R_FINISH_FAILED = 106,ENGINE_R_GET_HANDLE_FAILED = 107,ENGINE_R_ID_OR_NAME_MISSING = 108,ENGINE_R_INIT_FAILED = 109,ENGINE_R_INTERNAL_LIST_ERROR = 110,ENGINE_R_INVALID_ARGUMENT = 143,ENGINE_R_INVALID_CMD_NAME = 137,ENGINE_R_INVALID_CMD_NUMBER = 138,ENGINE_R_INVALID_INIT_VALUE = 151,ENGINE_R_INVALID_STRING = 150,ENGINE_R_NOT_INITIALISED = 117,ENGINE_R_NOT_LOADED = 112,ENGINE_R_NO_CONTROL_FUNCTION = 120,ENGINE_R_NO_INDEX = 144,ENGINE_R_NO_LOAD_FUNCTION = 125,ENGINE_R_NO_REFERENCE = 130,ENGINE_R_NO_SUCH_ENGINE = 116,ENGINE_R_NO_UNLOAD_FUNCTION = 126,ENGINE_R_PROVIDE_PARAMETERS = 113,ENGINE_R_RSA_NOT_IMPLEMENTED = 141,ENGINE_R_UNIMPLEMENTED_CIPHER = 146,ENGINE_R_UNIMPLEMENTED_DIGEST = 147,ENGINE_R_VERSION_INCOMPATIBILITY = 145,};
enum MACRO_ENOSPACE {ENOSPACE = 3,EBADOP = 4,};
enum MACRO_ENOUSER {ENOUSER = 7,EOPTNEG = 8,};
enum MACRO_ENV {ENV_ESC = 2,ENV_USERVAR = 3,};
enum MACRO_ENV_SEPARATOR {ENV_SEPARATOR_CHAR = 58,};
enum MACRO_EOF : __int64 {EOF = -1,};
enum MACRO_EOR {EOR = 239,};
enum MACRO_EPOCH {EPOCH_YEAR = 1970,EPOCH_WDAY = 4,};
enum MACRO_EPROC {EPROC_CTTY = 0x1,EPROC_SLEADER = 0x2,};
enum MACRO_ERA {ERA = 45,};
enum MACRO_ERA_D {ERA_D_FMT = 46,ERA_D_T_FMT = 47,ERA_T_FMT = 48,};
enum MACRO_ERR : __int64 {ERR = -1,};
enum MACRO_ERRNO {EPERM = 1,ENOENT = 2,ESRCH = 3,EINTR = 4,EIO = 5,ENXIO = 6,E2BIG = 7,ENOEXEC = 8,EBADF = 9,ECHILD = 10,EDEADLK = 11,ENOMEM = 12,EACCES = 13,EFAULT = 14,ENOTBLK = 15,EBUSY = 16,EEXIST = 17,EXDEV = 18,ENODEV = 19,ENOTDIR = 20,EISDIR = 21,EINVAL = 22,ENFILE = 23,EMFILE = 24,ENOTTY = 25,ETXTBSY = 26,EFBIG = 27,ENOSPC = 28,ESPIPE = 29,EROFS = 30,EMLINK = 31,EPIPE = 32,EDOM = 33,ERANGE = 34,EAGAIN = 35,EWOULDBLOCK = 35,EINPROGRESS = 36,EALREADY = 37,ENOTSOCK = 38,EDESTADDRREQ = 39,EMSGSIZE = 40,EPROTOTYPE = 41,ENOPROTOOPT = 42,EPROTONOSUPPORT = 43,ESOCKTNOSUPPORT = 44,ENOTSUP = 45,EPFNOSUPPORT = 46,EAFNOSUPPORT = 47,EADDRINUSE = 48,EADDRNOTAVAIL = 49,ENETDOWN = 50,ENETUNREACH = 51,ENETRESET = 52,ECONNABORTED = 53,ECONNRESET = 54,ENOBUFS = 55,EISCONN = 56,ENOTCONN = 57,ESHUTDOWN = 58,ETOOMANYREFS = 59,ETIMEDOUT = 60,ECONNREFUSED = 61,ELOOP = 62,ENAMETOOLONG = 63,EHOSTDOWN = 64,EHOSTUNREACH = 65,ENOTEMPTY = 66,EPROCLIM = 67,EUSERS = 68,EDQUOT = 69,ESTALE = 70,EREMOTE = 71,EBADRPC = 72,ERPCMISMATCH = 73,EPROGUNAVAIL = 74,EPROGMISMATCH = 75,EPROCUNAVAIL = 76,ENOLCK = 77,ENOSYS = 78,EFTYPE = 79,EAUTH = 80,ENEEDAUTH = 81,EPWROFF = 82,EDEVERR = 83,EOVERFLOW = 84,EBADEXEC = 85,EBADARCH = 86,ESHLIBVERS = 87,EBADMACHO = 88,ECANCELED = 89,EIDRM = 90,ENOMSG = 91,EILSEQ = 92,ENOATTR = 93,EBADMSG = 94,EMULTIHOP = 95,ENODATA = 96,ENOLINK = 97,ENOSR = 98,ENOSTR = 99,EPROTO = 100,ETIME = 101,EOPNOTSUPP = 102,ENOPOLICY = 103,ENOTRECOVERABLE = 104,EOWNERDEAD = 105,ELAST = 105,};
enum MACRO_ERROR : __int64 {ERROR_TABLE_BASE_krb5 = -1765328384,};
enum MACRO_ERROR_0 {ERROR = 5,};
enum MACRO_ERROR_TABLE : __int64 {ERROR_TABLE_BASE_kdb5 = -1780008448,};
enum MACRO_ERROR_TABLE_BASE : __int64 {ERROR_TABLE_BASE_kv5m = -1760647424,};
enum MACRO_ERROR_TABLE_BASE_asn1 {ERROR_TABLE_BASE_asn1 = 1859794432,};
enum MACRO_ERROR_TABLE_BASE_k524 : __int64 {ERROR_TABLE_BASE_k524 = -1750206208,};
enum MACRO_ERROR_TABLE_BASE_prof : __int64 {ERROR_TABLE_BASE_prof = -1429577728,};
enum MACRO_ERR_GDT {ERR_GDT = 0,ERR_IDT = 1,ERR_LDT = 2,};
enum MACRO_ERR_R {ERR_R_SYS_LIB = 2,ERR_R_BN_LIB = 3,ERR_R_RSA_LIB = 4,ERR_R_DH_LIB = 5,ERR_R_EVP_LIB = 6,ERR_R_BUF_LIB = 7,ERR_R_OBJ_LIB = 8,ERR_R_PEM_LIB = 9,ERR_R_DSA_LIB = 10,ERR_R_X509_LIB = 11,ERR_R_ASN1_LIB = 13,ERR_R_CONF_LIB = 14,ERR_R_CRYPTO_LIB = 15,ERR_R_EC_LIB = 16,ERR_R_SSL_LIB = 20,ERR_R_BIO_LIB = 32,ERR_R_PKCS7_LIB = 33,ERR_R_X509V3_LIB = 34,ERR_R_PKCS12_LIB = 35,ERR_R_RAND_LIB = 36,ERR_R_DSO_LIB = 37,ERR_R_ENGINE_LIB = 38,ERR_R_OCSP_LIB = 39,ERR_R_UI_LIB = 40,ERR_R_COMP_LIB = 41,ERR_R_ECDSA_LIB = 42,ERR_R_ECDH_LIB = 43,ERR_R_STORE_LIB = 44,ERR_R_NESTED_ASN1_ERROR = 58,ERR_R_BAD_ASN1_OBJECT_HEADER = 59,ERR_R_BAD_GET_ASN1_OBJECT_CALL = 60,ERR_R_EXPECTING_AN_ASN1_SEQUENCE = 61,ERR_R_ASN1_LENGTH_MISMATCH = 62,ERR_R_MISSING_ASN1_EOS = 63,ERR_R_FATAL = 64,ERR_R_MALLOC_FAILURE = 65,ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED = 66,ERR_R_PASSED_NULL_PARAMETER = 67,ERR_R_INTERNAL_ERROR = 68,ERR_R_DISABLED = 69,};
enum MACRO_ERR_TXT {ERR_TXT_MALLOCED = 0x1,ERR_TXT_STRING = 0x2,ERR_FLAG_MARK = 0x1,ERR_NUM_ERRORS = 0x10,ERR_LIB_NONE = 0x1,ERR_LIB_SYS = 0x2,ERR_LIB_BN = 0x3,ERR_LIB_RSA = 0x4,ERR_LIB_DH = 0x5,ERR_LIB_EVP = 0x6,ERR_LIB_BUF = 0x7,ERR_LIB_OBJ = 0x8,ERR_LIB_PEM = 0x9,ERR_LIB_DSA = 0xA,ERR_LIB_X509 = 0xB,ERR_LIB_ASN1 = 0xD,ERR_LIB_CONF = 0xE,ERR_LIB_CRYPTO = 0xF,ERR_LIB_EC = 0x10,ERR_LIB_SSL = 0x14,ERR_LIB_BIO = 0x20,ERR_LIB_PKCS7 = 0x21,ERR_LIB_X509V3 = 0x22,ERR_LIB_PKCS12 = 0x23,ERR_LIB_RAND = 0x24,ERR_LIB_DSO = 0x25,ERR_LIB_ENGINE = 0x26,ERR_LIB_OCSP = 0x27,ERR_LIB_UI = 0x28,ERR_LIB_COMP = 0x29,ERR_LIB_ECDSA = 0x2A,ERR_LIB_ECDH = 0x2B,ERR_LIB_STORE = 0x2C,ERR_LIB_FIPS = 0x2D,ERR_LIB_CMS = 0x2E,ERR_LIB_JPAKE = 0x2F,ERR_LIB_USER = 0x80,};
enum MACRO_ETHER {ETHER_ADDR_LEN = 6,ETHER_TYPE_LEN = 2,ETHER_CRC_LEN = 4,ETHER_HDR_LEN = 14,ETHER_MIN_LEN = 64,ETHER_MAX_LEN = 1518,ETHER_ALIGN = 2,};
enum MACRO_ETHERMIN {ETHERMIN = 46,};
enum MACRO_ETHERMTU {ETHERMTU = 1500,};
enum MACRO_ETHERTYPE {ETHERTYPE_PUP = 0x200,ETHERTYPE_IP = 0x800,ETHERTYPE_ARP = 0x806,ETHERTYPE_REVARP = 0x8035,ETHERTYPE_VLAN = 0x8100,ETHERTYPE_IPV6 = 0x86DD,ETHERTYPE_PAE = 0x888E,ETHERTYPE_RSN_PREAUTH = 0x88C7,ETHERTYPE_LOOPBACK = 0x9000,ETHERTYPE_TRAIL = 0x1000,ETHERTYPE_NTRAILER = 0x10,};
enum MACRO_ETIMELIST {ETIMELIST_SIZE = 23,};
enum MACRO_EUNDEF {EUNDEF = 0,ENOTFOUND = 1,EACCESS = 2,};
enum MACRO_EV : __int64 {EV_FD = 1,EV_RE = 1,EV_WR = 2,EV_EX = 4,EV_RM = 8,EV_MASK = 15,EV_RBYTES = 256,EV_WBYTES = 512,EV_RWBYTES = 768,EV_RCLOSED = 1024,EV_RCONN = 2048,EV_WCLOSED = 4096,EV_WCONN = 8192,EV_OOB = 16384,EV_FIN = 32768,EV_RESET = 65536,EV_TIMEOUT = 131072,EV_DMASK = 4294967040,};
enum MACRO_EVFILT : __int64 {EVFILT_READ = -1,EVFILT_WRITE = -2,EVFILT_AIO = -3,EVFILT_VNODE = -4,EVFILT_PROC = -5,EVFILT_SIGNAL = -6,EVFILT_TIMER = -7,EVFILT_MACHPORT = -8,EVFILT_FS = -9,EVFILT_USER = -10,EVFILT_VM = -12,EVFILT_SYSCOUNT = 12,EVFILT_THREADMARKER = 12,};
enum MACRO_EVP {EVP_MAX_MD_SIZE = 64,EVP_MAX_KEY_LENGTH = 32,EVP_MAX_IV_LENGTH = 16,EVP_MAX_BLOCK_LENGTH = 32,};
enum MACRO_EVP_PK {EVP_PK_RSA = 0x1,EVP_PK_DSA = 0x2,EVP_PK_DH = 0x4,EVP_PK_EC = 0x8,EVP_PKT_SIGN = 0x10,EVP_PKT_ENC = 0x20,EVP_PKT_EXCH = 0x40,EVP_PKS_RSA = 0x100,EVP_PKS_DSA = 0x200,EVP_PKS_EC = 0x400,EVP_PKT_EXP = 0x1000,EVP_PKEY_NONE = 0x0,EVP_PKEY_RSA = 0x6,EVP_PKEY_RSA2 = 0x13,EVP_PKEY_DSA = 0x74,EVP_PKEY_DSA1 = 0x43,EVP_PKEY_DSA2 = 0x42,EVP_PKEY_DSA3 = 0x71,EVP_PKEY_DSA4 = 0x46,EVP_PKEY_DH = 0x1C,EVP_PKEY_EC = 0x198,EVP_PKEY_MO_SIGN = 0x1,EVP_PKEY_MO_VERIFY = 0x2,EVP_PKEY_MO_ENCRYPT = 0x4,EVP_PKEY_MO_DECRYPT = 0x8,EVP_MD_FLAG_ONESHOT = 0x1,EVP_MD_FLAG_FIPS = 0x400,EVP_MD_FLAG_SVCTX = 0x800,EVP_MD_CTX_FLAG_ONESHOT = 0x1,EVP_MD_CTX_FLAG_CLEANED = 0x2,EVP_MD_CTX_FLAG_REUSE = 0x4,EVP_MD_CTX_FLAG_NON_FIPS_ALLOW = 0x8,EVP_MD_CTX_FLAG_PAD_MASK = 0xF0,EVP_MD_CTX_FLAG_PAD_PKCS1 = 0x0,EVP_MD_CTX_FLAG_PAD_X931 = 0x10,EVP_MD_CTX_FLAG_PAD_PSS = 0x20,EVP_MD_CTX_FLAG_PSS_MDLEN = 0xFFFF,EVP_MD_CTX_FLAG_PSS_MREC = 0xFFFE,EVP_CIPH_STREAM_CIPHER = 0x0,EVP_CIPH_ECB_MODE = 0x1,EVP_CIPH_CBC_MODE = 0x2,EVP_CIPH_CFB_MODE = 0x3,EVP_CIPH_OFB_MODE = 0x4,EVP_CIPH_MODE = 0x7,EVP_CIPH_VARIABLE_LENGTH = 0x8,EVP_CIPH_CUSTOM_IV = 0x10,EVP_CIPH_ALWAYS_CALL_INIT = 0x20,EVP_CIPH_CTRL_INIT = 0x40,EVP_CIPH_CUSTOM_KEY_LENGTH = 0x80,EVP_CIPH_NO_PADDING = 0x100,EVP_CIPH_RAND_KEY = 0x200,EVP_CIPH_FLAG_FIPS = 0x400,EVP_CIPH_FLAG_NON_FIPS_ALLOW = 0x800,EVP_CIPH_FLAG_DEFAULT_ASN1 = 0x1000,EVP_CIPH_FLAG_LENGTH_BITS = 0x2000,EVP_CTRL_INIT = 0x0,EVP_CTRL_SET_KEY_LENGTH = 0x1,EVP_CTRL_GET_RC2_KEY_BITS = 0x2,EVP_CTRL_SET_RC2_KEY_BITS = 0x3,EVP_CTRL_GET_RC5_ROUNDS = 0x4,EVP_CTRL_SET_RC5_ROUNDS = 0x5,EVP_CTRL_RAND_KEY = 0x6,EVP_F_AES_INIT_KEY = 0x85,EVP_F_ALG_MODULE_INIT = 0x8A,EVP_F_CAMELLIA_INIT_KEY = 0x9F,EVP_F_D2I_PKEY = 0x64,EVP_F_DO_EVP_ENC_ENGINE = 0x8C,EVP_F_DO_EVP_ENC_ENGINE_FULL = 0x8D,EVP_F_DO_EVP_MD_ENGINE = 0x8B,EVP_F_DO_EVP_MD_ENGINE_FULL = 0x8E,EVP_F_DSAPKEY2PKCS8 = 0x86,EVP_F_DSA_PKEY2PKCS8 = 0x87,EVP_F_ECDSA_PKEY2PKCS8 = 0x81,EVP_F_ECKEY_PKEY2PKCS8 = 0x84,EVP_F_EVP_CIPHERINIT = 0x89,EVP_F_EVP_CIPHERINIT_EX = 0x7B,EVP_F_EVP_CIPHER_CTX_CTRL = 0x7C,EVP_F_EVP_CIPHER_CTX_SET_KEY_LENGTH = 0x7A,EVP_F_EVP_DECRYPTFINAL_EX = 0x65,EVP_F_EVP_DIGESTINIT = 0x88,EVP_F_EVP_DIGESTINIT_EX = 0x80,EVP_F_EVP_ENCRYPTFINAL_EX = 0x7F,EVP_F_EVP_MD_CTX_COPY_EX = 0x6E,EVP_F_EVP_OPENINIT = 0x66,EVP_F_EVP_PBE_ALG_ADD = 0x73,EVP_F_EVP_PBE_CIPHERINIT = 0x74,EVP_F_EVP_PKCS82PKEY = 0x6F,EVP_F_EVP_PKEY2PKCS8_BROKEN = 0x71,EVP_F_EVP_PKEY_COPY_PARAMETERS = 0x67,EVP_F_EVP_PKEY_DECRYPT = 0x68,EVP_F_EVP_PKEY_ENCRYPT = 0x69,EVP_F_EVP_PKEY_GET1_DH = 0x77,EVP_F_EVP_PKEY_GET1_DSA = 0x78,EVP_F_EVP_PKEY_GET1_ECDSA = 0x82,EVP_F_EVP_PKEY_GET1_EC_KEY = 0x83,EVP_F_EVP_PKEY_GET1_RSA = 0x79,EVP_F_EVP_PKEY_NEW = 0x6A,EVP_F_EVP_RIJNDAEL = 0x7E,EVP_F_EVP_SIGNFINAL = 0x6B,EVP_F_EVP_VERIFYFINAL = 0x6C,EVP_F_PKCS5_PBE_KEYIVGEN = 0x75,EVP_F_PKCS5_V2_PBE_KEYIVGEN = 0x76,EVP_F_PKCS8_SET_BROKEN = 0x70,EVP_F_RC2_MAGIC_TO_METH = 0x6D,EVP_F_RC5_CTRL = 0x7D,EVP_R_AES_KEY_SETUP_FAILED = 0x8F,EVP_R_ASN1_LIB = 0x8C,EVP_R_BAD_BLOCK_LENGTH = 0x88,EVP_R_BAD_DECRYPT = 0x64,EVP_R_BAD_KEY_LENGTH = 0x89,EVP_R_BN_DECODE_ERROR = 0x70,EVP_R_BN_PUBKEY_ERROR = 0x71,EVP_R_CAMELLIA_KEY_SETUP_FAILED = 0x9D,EVP_R_CIPHER_PARAMETER_ERROR = 0x7A,EVP_R_CTRL_NOT_IMPLEMENTED = 0x84,EVP_R_CTRL_OPERATION_NOT_IMPLEMENTED = 0x85,EVP_R_DATA_NOT_MULTIPLE_OF_BLOCK_LENGTH = 0x8A,EVP_R_DECODE_ERROR = 0x72,EVP_R_DIFFERENT_KEY_TYPES = 0x65,EVP_R_DISABLED_FOR_FIPS = 0x90,EVP_R_ENCODE_ERROR = 0x73,EVP_R_ERROR_LOADING_SECTION = 0x91,EVP_R_ERROR_SETTING_FIPS_MODE = 0x92,EVP_R_EVP_PBE_CIPHERINIT_ERROR = 0x77,EVP_R_EXPECTING_AN_RSA_KEY = 0x7F,EVP_R_EXPECTING_A_DH_KEY = 0x80,EVP_R_EXPECTING_A_DSA_KEY = 0x81,EVP_R_EXPECTING_A_ECDSA_KEY = 0x8D,EVP_R_EXPECTING_A_EC_KEY = 0x8E,EVP_R_FIPS_MODE_NOT_SUPPORTED = 0x93,EVP_R_INITIALIZATION_ERROR = 0x86,EVP_R_INPUT_NOT_INITIALIZED = 0x6F,EVP_R_INVALID_FIPS_MODE = 0x94,EVP_R_INVALID_KEY_LENGTH = 0x82,EVP_R_IV_TOO_LARGE = 0x66,EVP_R_KEYGEN_FAILURE = 0x78,EVP_R_MISSING_PARAMETERS = 0x67,EVP_R_NO_CIPHER_SET = 0x83,EVP_R_NO_DIGEST_SET = 0x8B,EVP_R_NO_DSA_PARAMETERS = 0x74,EVP_R_NO_SIGN_FUNCTION_CONFIGURED = 0x68,EVP_R_NO_VERIFY_FUNCTION_CONFIGURED = 0x69,EVP_R_PKCS8_UNKNOWN_BROKEN_TYPE = 0x75,EVP_R_PUBLIC_KEY_NOT_RSA = 0x6A,EVP_R_UNKNOWN_OPTION = 0x95,EVP_R_UNKNOWN_PBE_ALGORITHM = 0x79,EVP_R_UNSUPORTED_NUMBER_OF_ROUNDS = 0x87,EVP_R_UNSUPPORTED_CIPHER = 0x6B,EVP_R_UNSUPPORTED_KEYLENGTH = 0x7B,EVP_R_UNSUPPORTED_KEY_DERIVATION_FUNCTION = 0x7C,EVP_R_UNSUPPORTED_KEY_SIZE = 0x6C,EVP_R_UNSUPPORTED_PRF = 0x7D,EVP_R_UNSUPPORTED_PRIVATE_KEY_ALGORITHM = 0x76,EVP_R_UNSUPPORTED_SALT_TYPE = 0x7E,EVP_R_WRONG_FINAL_BLOCK_LENGTH = 0x6D,EVP_R_WRONG_PUBLIC_KEY_TYPE = 0x6E,EVP_R_SEED_KEY_SETUP_FAILED = 0xA2,};
enum MACRO_EV_ADD {EV_ADD = 0x1,EV_DELETE = 0x2,EV_ENABLE = 0x4,EV_DISABLE = 0x8,EV_RECEIPT = 0x40,EV_ONESHOT = 0x10,EV_CLEAR = 0x20,EV_DISPATCH = 0x80,EV_SYSFLAGS = 0xF000,EV_FLAG0 = 0x1000,EV_FLAG1 = 0x2000,EV_EOF = 0x8000,EV_ERROR = 0x4000,EV_POLL = 0x1000,EV_OOBAND = 0x2000,};
enum MACRO_EX {EX_OK = 0,EX__BASE = 64,EX_USAGE = 64,EX_DATAERR = 65,EX_NOINPUT = 66,EX_NOUSER = 67,EX_NOHOST = 68,EX_UNAVAILABLE = 69,EX_SOFTWARE = 70,EX_OSERR = 71,EX_OSFILE = 72,EX_CANTCREAT = 73,EX_IOERR = 74,EX_TEMPFAIL = 75,EX_PROTOCOL = 76,EX_NOPERM = 77,EX_CONFIG = 78,EX__MAX = 78,};
enum MACRO_EXC {EXC_TYPES_COUNT = 11,};
enum MACRO_EXCEPTION {EXCEPTION_CODE_MAX = 2,};
enum MACRO_EXCEPTION_DEFAULT {EXCEPTION_DEFAULT = 1,EXCEPTION_STATE = 2,EXCEPTION_STATE_IDENTITY = 3,};
enum MACRO_EXC_I386 {EXC_I386_INVOP = 1,EXC_I386_DIV = 1,EXC_I386_INTO = 2,EXC_I386_NOEXT = 3,EXC_I386_EXTOVR = 4,EXC_I386_EXTERR = 5,EXC_I386_EMERR = 6,EXC_I386_BOUND = 7,EXC_I386_SSEEXTERR = 8,EXC_I386_SGL = 1,EXC_I386_BPT = 2,EXC_I386_DIVERR = 0,EXC_I386_SGLSTP = 1,EXC_I386_NMIFLT = 2,EXC_I386_BPTFLT = 3,EXC_I386_INTOFLT = 4,EXC_I386_BOUNDFLT = 5,EXC_I386_INVOPFLT = 6,EXC_I386_NOEXTFLT = 7,EXC_I386_DBLFLT = 8,EXC_I386_EXTOVRFLT = 9,EXC_I386_INVTSSFLT = 10,EXC_I386_SEGNPFLT = 11,EXC_I386_STKFLT = 12,EXC_I386_GPFLT = 13,EXC_I386_PGFLT = 14,EXC_I386_EXTERRFLT = 16,EXC_I386_ALIGNFLT = 17,EXC_I386_ENDPERR = 33,EXC_I386_ENOEXTFLT = 32,EXC_MASK_MACHINE = 0,EXC_BAD_ACCESS = 1,EXC_BAD_INSTRUCTION = 2,EXC_ARITHMETIC = 3,EXC_EMULATION = 4,EXC_SOFTWARE = 5,EXC_BREAKPOINT = 6,EXC_SYSCALL = 7,EXC_MACH_SYSCALL = 8,EXC_RPC_ALERT = 9,EXC_CRASH = 10,};
enum MACRO_EXC_MASK {EXC_MASK_BAD_ACCESS = 2,EXC_MASK_BAD_INSTRUCTION = 4,EXC_MASK_ARITHMETIC = 8,EXC_MASK_EMULATION = 16,EXC_MASK_SOFTWARE = 32,EXC_MASK_BREAKPOINT = 64,EXC_MASK_SYSCALL = 128,EXC_MASK_MACH_SYSCALL = 256,EXC_MASK_RPC_ALERT = 512,EXC_MASK_CRASH = 1024,EXC_MASK_ALL = 1022,};
enum MACRO_EXC_SOFT {EXC_SOFT_SIGNAL = 0x10003,};
enum MACRO_EXFLAG {EXFLAG_BCONS = 0x1,EXFLAG_KUSAGE = 0x2,EXFLAG_XKUSAGE = 0x4,EXFLAG_NSCERT = 0x8,EXFLAG_CA = 0x10,EXFLAG_SI = 0x20,EXFLAG_SS = 0x20,EXFLAG_V1 = 0x40,EXFLAG_INVALID = 0x80,EXFLAG_SET = 0x100,EXFLAG_CRITICAL = 0x200,EXFLAG_PROXY = 0x400,EXFLAG_INVALID_POLICY = 0x800,};
enum MACRO_EXIT {EXIT_FAILURE = 1,EXIT_SUCCESS = 0,};
enum MACRO_EXPIRE {EXPIRE_TIME = 180,GARBAGE_TIME = 240,};
enum MACRO_EXPORT {EXPORT_SYMBOL_FLAGS_KIND_MASK = 0x3,EXPORT_SYMBOL_FLAGS_KIND_REGULAR = 0x0,EXPORT_SYMBOL_FLAGS_KIND_THREAD_LOCAL = 0x1,EXPORT_SYMBOL_FLAGS_WEAK_DEFINITION = 0x4,EXPORT_SYMBOL_FLAGS_REEXPORT = 0x8,EXPORT_SYMBOL_FLAGS_STUB_AND_RESOLVER = 0x10,};
enum MACRO_EXTA {EXTA = 19200,};
enum MACRO_EXTB {EXTB = 38400,};
enum MACRO_EndOfStream : __int64 {EndOfStream = -1,};
enum MACRO_F {F_ULOCK = 0,F_LOCK = 1,F_TLOCK = 2,F_TEST = 3,};
enum MACRO_FAILED {FAILED = 2,};
enum MACRO_FAPPEND {FAPPEND = 8,FASYNC = 64,FFSYNC = 128,FFDSYNC = 4194304,};
enum MACRO_FAT : __int64 {FAT_MAGIC = 0xCAFEBABE,FAT_CIGAM = 0xBEBAFECA,};
enum MACRO_FCNTL {FCNTL_FS_SPECIFIC_BASE = 0x10000,};
enum MACRO_FD {FD_SETSIZE = 1024,};
enum MACRO_FD_REGISTERED : __int64 {FD_REGISTERED_OK = 0,FD_REGISTRATION_FAILED = -2,FD_UNREGISTERED_OK = 0,FD_NO_SUCH_REGISTRATION = -1,};
enum MACRO_FE {FE_INEXACT = 0x20,FE_UNDERFLOW = 0x10,FE_OVERFLOW = 0x8,FE_DIVBYZERO = 0x4,FE_INVALID = 0x1,FE_ALL_EXCEPT = 0x3D,FE_TONEAREST = 0x0,FE_DOWNWARD = 0x400,FE_UPWARD = 0x800,FE_TOWARDZERO = 0xC00,};
enum MACRO_FF0 {FF0 = 0x0,FF1 = 0x4000,};
enum MACRO_FFI {FFI_NO_RAW_API = 1,};
enum MACRO_FFI_CLOSURES : __int64 {FFI_CLOSURES = 1,FFI_TRAMPOLINE_SIZE = 24,FFI_NATIVE_RAW_API = 0,FFI_LONG_LONG_MAX = 9223372036854775807,FFI_SIZEOF_ARG = 8,FFI_TYPE_VOID = 0,FFI_TYPE_INT = 1,FFI_TYPE_FLOAT = 2,FFI_TYPE_DOUBLE = 3,FFI_TYPE_LONGDOUBLE = 4,FFI_TYPE_UINT8 = 5,FFI_TYPE_SINT8 = 6,FFI_TYPE_UINT16 = 7,FFI_TYPE_SINT16 = 8,FFI_TYPE_UINT32 = 9,FFI_TYPE_SINT32 = 10,FFI_TYPE_UINT64 = 11,FFI_TYPE_SINT64 = 12,FFI_TYPE_STRUCT = 13,FFI_TYPE_POINTER = 14,FFI_TYPE_LAST = 14,};
enum MACRO_FHSIZE {FHSIZE = 32,};
enum MACRO_FIFOTYPE {FIFOTYPE = 54,};
enum MACRO_FILENAMES {FILENAMES_CASE_SENSITIVE = 0,};
enum MACRO_FILENO {STDIN_FILENO = 0,STDOUT_FILENO = 1,STDERR_FILENO = 2,};
enum MACRO_FINISHED {FINISHED_SUCCESS = 9,FINISHED_FAILURE = 10,};
enum MACRO_FIOCLEX {FIOCLEX = 536897025,};
enum MACRO_FIONCLEX {FIONCLEX = 536897026,};
enum MACRO_FIRST {FIRST_EXCEPTION = 1,};
enum MACRO_FIRST_PASS {FIRST_PASS = 1,LAST_PASS = 2,};
enum MACRO_FNDELAY {FNDELAY = 4,};
enum MACRO_FNM : __int64 {FNM_NOMATCH = 1,FNM_NOESCAPE = 1,FNM_PATHNAME = 2,FNM_PERIOD = 4,FNM_NOSYS = -1,FNM_LEADING_DIR = 8,FNM_CASEFOLD = 16,FNM_IGNORECASE = 16,FNM_FILE_NAME = 2,};
enum MACRO_FNONBLOCK {FNONBLOCK = 4,};
enum MACRO_FORM {FORM_N = 1,FORM_T = 2,FORM_C = 3,};
enum MACRO_FP {FP_PREC_24B = 0,FP_PREC_53B = 2,FP_PREC_64B = 3,FP_RND_NEAR = 0,FP_RND_DOWN = 1,FP_RND_UP = 2,FP_CHOP = 3,FP_STATE_BYTES = 512,};
enum MACRO_FPARSELN {FPARSELN_UNESCESC = 0x1,FPARSELN_UNESCCONT = 0x2,FPARSELN_UNESCCOMM = 0x4,FPARSELN_UNESCREST = 0x8,FPARSELN_UNESCALL = 0xF,};
enum MACRO_FPC {FPC_IE = 0x1,FPC_IM = 0x1,FPC_DE = 0x2,FPC_DM = 0x2,FPC_ZE = 0x4,FPC_ZM = 0x4,FPC_OE = 0x8,FPC_OM = 0x8,FPC_UE = 0x10,FPC_PE = 0x20,FPC_PC = 0x300,FPC_PC_24 = 0x0,FPC_PC_53 = 0x200,FPC_PC_64 = 0x300,FPC_RC = 0xC00,FPC_RC_RN = 0x0,FPC_RC_RD = 0x400,FPC_RC_RU = 0x800,FPC_RC_CHOP = 0xC00,FPC_IC = 0x1000,FPC_IC_PROJ = 0x0,FPC_IC_AFF = 0x1000,};
enum MACRO_FPE {FPE_NOOP = 0,FPE_FLTDIV = 1,FPE_FLTOVF = 2,FPE_FLTUND = 3,FPE_FLTRES = 4,FPE_FLTINV = 5,FPE_FLTSUB = 6,FPE_INTDIV = 7,FPE_INTOVF = 8,};
enum MACRO_FPS {FPS_IE = 0x1,FPS_DE = 0x2,FPS_ZE = 0x4,FPS_OE = 0x8,FPS_UE = 0x10,FPS_PE = 0x20,FPS_SF = 0x40,FPS_ES = 0x80,FPS_C0 = 0x100,FPS_C1 = 0x200,FPS_C2 = 0x400,FPS_TOS = 0x3800,FPS_TOS_SHIFT = 0xB,FPS_C3 = 0x4000,FPS_BUSY = 0x8000,};
enum MACRO_FP_NAN : __int64 {FP_NAN = 1,FP_INFINITE = 2,FP_ZERO = 3,FP_NORMAL = 4,FP_SUBNORMAL = 5,FP_SUPERNORMAL = 6,FP_ILOGB0 = -2147483648,FP_ILOGBNAN = -2147483648,};
enum MACRO_FP_NO {FP_NO = 0,FP_SOFT = 1,FP_287 = 2,FP_387 = 3,FP_FXSR = 4,};
enum MACRO_FP_SNAN {FP_SNAN = 1,FP_QNAN = 1,};
enum MACRO_FP_TAG {FP_TAG_VALID = 0,FP_TAG_ZERO = 1,FP_TAG_SPEC = 2,FP_TAG_EMPTY = 3,};
enum MACRO_FREAD {FREAD = 0x1,FWRITE = 0x2,};
enum MACRO_FSHIFT {FSHIFT = 11,FSCALE = 2048,};
enum MACRO_FSOPT {FSOPT_NOFOLLOW = 0x1,FSOPT_NOINMEMUPDATE = 0x2,FSOPT_REPORT_FULLSIZE = 0x4,FSOPT_PACK_INVAL_ATTRS = 0x8,};
enum MACRO_FST : __int64 {FST_EOF = -1,};
enum MACRO_FSUC {FSUC_PROBE = 112,FSUC_PROBEFORINIT = 80,FSUC_MOUNT = 109,FSUC_REPAIR = 114,FSUC_INITIALIZE = 105,FSUC_UNMOUNT = 117,FSUC_MOUNT_FORCE = 77,};
enum MACRO_FSUR : __int64 {FSUR_RECOGNIZED = -1,FSUR_UNRECOGNIZED = -2,FSUR_IO_SUCCESS = -3,FSUR_IO_FAIL = -4,FSUR_IO_UNCLEAN = -5,FSUR_INVAL = -6,FSUR_LOADERR = -7,FSUR_INITRECOGNIZED = -8,};
enum MACRO_FTS : __int64 {FTS_COMFOLLOW = 0x1,FTS_LOGICAL = 0x2,FTS_NOCHDIR = 0x4,FTS_NOSTAT = 0x8,FTS_PHYSICAL = 0x10,FTS_SEEDOT = 0x20,FTS_XDEV = 0x40,FTS_WHITEOUT = 0x80,FTS_COMFOLLOWDIR = 0x400,FTS_OPTIONMASK = 0x4FF,FTS_NAMEONLY = 0x100,FTS_STOP = 0x200,FTS_BLOCK_COMPAR = 0x80000000,FTS_ROOTPARENTLEVEL = 0xFFFFFFFFFFFFFFFF,FTS_ROOTLEVEL = 0x0,FTS_D = 0x1,FTS_DC = 0x2,FTS_DEFAULT = 0x3,FTS_DNR = 0x4,FTS_DOT = 0x5,FTS_DP = 0x6,FTS_ERR = 0x7,FTS_F = 0x8,FTS_INIT = 0x9,FTS_NS = 0xA,FTS_NSOK = 0xB,FTS_SL = 0xC,FTS_SLNONE = 0xD,FTS_W = 0xE,FTS_DONTCHDIR = 0x1,FTS_SYMFOLLOW = 0x2,FTS_ISW = 0x4,FTS_AGAIN = 0x1,FTS_FOLLOW = 0x2,FTS_NOINSTR = 0x3,FTS_SKIP = 0x4,};
enum MACRO_FTW {FTW_F = 0,FTW_D = 1,FTW_DNR = 2,FTW_DP = 3,FTW_NS = 4,FTW_SL = 5,FTW_SLN = 6,FTW_PHYS = 1,FTW_MOUNT = 2,FTW_DEPTH = 4,FTW_CHDIR = 8,};
enum MACRO_FULLY {FULLY_QUALIFIED_INSTANCE = 0x1,};
enum MACRO_F_ALLOCATECONTIG {F_ALLOCATECONTIG = 0x2,F_ALLOCATEALL = 0x4,F_PEOFPOSMODE = 0x3,F_VOLPOSMODE = 0x4,};
enum MACRO_F_DUPFD {F_DUPFD = 0,F_GETFD = 1,F_SETFD = 2,F_GETFL = 3,F_SETFL = 4,F_GETOWN = 5,F_SETOWN = 6,F_GETLK = 7,F_SETLK = 8,F_SETLKW = 9,F_FLUSH_DATA = 40,F_CHKCLEAN = 41,F_PREALLOCATE = 42,F_SETSIZE = 43,F_RDADVISE = 44,F_RDAHEAD = 45,F_READBOOTSTRAP = 46,F_WRITEBOOTSTRAP = 47,F_NOCACHE = 48,F_LOG2PHYS = 49,F_GETPATH = 50,F_FULLFSYNC = 51,F_PATHPKG_CHECK = 52,F_FREEZE_FS = 53,F_THAW_FS = 54,F_GLOBAL_NOCACHE = 55,F_ADDSIGS = 59,F_MARKDEPENDENCY = 60,F_ADDFILESIGS = 61,F_NODIRECT = 62,F_GETPROTECTIONCLASS = 63,F_SETPROTECTIONCLASS = 64,F_LOG2PHYS_EXT = 65,F_GETLKPID = 66,F_SETBACKINGSTORE = 70,F_GETPATH_MTMINFO = 71,F_SETNOSIGPIPE = 73,F_GETNOSIGPIPE = 74,};
enum MACRO_F_NOT {F_NOT = 0x80,F_OR = 0x40,F_LEN_MASK = 0x3F,};
enum MACRO_F_RDLCK {F_RDLCK = 1,F_UNLCK = 2,F_WRLCK = 3,};
enum MACRO_GA {GA = 249,};
enum MACRO_GAUGE {GAUGE = 66,};
enum MACRO_GEN {GEN_OTHERNAME = 0,GEN_EMAIL = 1,GEN_DNS = 2,GEN_X400 = 3,GEN_DIRNAME = 4,GEN_EDIPARTY = 5,GEN_URI = 6,GEN_IPADD = 7,GEN_RID = 8,};
enum MACRO_GETALL {GETALL = 6,};
enum MACRO_GETNCNT {GETNCNT = 3,GETPID = 4,};
enum MACRO_GETVAL {GETVAL = 5,};
enum MACRO_GETZCNT {GETZCNT = 7,SETVAL = 8,};
enum MACRO_GID {GID_WHEEL = 0,GID_KMEM = 2,GID_TTY = 4,GID_OPERATOR = 5,GID_BIN = 7,GID_GAMES = 13,GID_DIALER = 68,};
enum MACRO_GLOB : __int64 {GLOB_APPEND = 0x1,GLOB_DOOFFS = 0x2,GLOB_ERR = 0x4,GLOB_MARK = 0x8,GLOB_NOCHECK = 0x10,GLOB_NOSORT = 0x20,GLOB_NOESCAPE = 0x2000,GLOB_NOSPACE = 0xFFFFFFFFFFFFFFFF,GLOB_ABORTED = 0xFFFFFFFFFFFFFFFE,GLOB_NOMATCH = 0xFFFFFFFFFFFFFFFD,GLOB_NOSYS = 0xFFFFFFFFFFFFFFFC,GLOB_ALTDIRFUNC = 0x40,GLOB_BRACE = 0x80,GLOB_MAGCHAR = 0x100,GLOB_NOMAGIC = 0x200,GLOB_QUOTE = 0x400,GLOB_TILDE = 0x800,GLOB_LIMIT = 0x1000,};
enum MACRO_GLOB_MAXPATH : __int64 {GLOB_MAXPATH = 4096,GLOB_ABEND = -2,};
enum MACRO_GMON {GMON_PROF_ON = 0,GMON_PROF_BUSY = 1,GMON_PROF_ERROR = 2,GMON_PROF_OFF = 3,};
enum MACRO_GMONTYPE {GMONTYPE_SAMPLES = 1,GMONTYPE_RAWARCS = 2,GMONTYPE_ARCS_ORDERS = 3,GMONTYPE_DYLD_STATE = 4,GMONTYPE_DYLD2_STATE = 5,};
enum MACRO_GMONVERSION {GMONVERSION = 0x51879,};
enum MACRO_GMON_MAGIC : __int64 {GMON_MAGIC = 0xBEEFBABE,GMON_MAGIC_64 = 0xBEEFBABF,};
enum MACRO_GPROF {GPROF_STATE = 0,GPROF_COUNT = 1,GPROF_FROMS = 2,GPROF_TOS = 3,GPROF_GMONPARAM = 4,};
enum MACRO_GSS : __int64 {GSS_C_DELEG_FLAG = 1,GSS_C_MUTUAL_FLAG = 2,GSS_C_REPLAY_FLAG = 4,GSS_C_SEQUENCE_FLAG = 8,GSS_C_CONF_FLAG = 16,GSS_C_INTEG_FLAG = 32,GSS_C_ANON_FLAG = 64,GSS_C_PROT_READY_FLAG = 128,GSS_C_TRANS_FLAG = 256,GSS_C_DELEG_POLICY_FLAG = 32768,GSS_C_NO_UI_FLAG = 2147483648,GSS_C_BOTH = 0,GSS_C_INITIATE = 1,GSS_C_ACCEPT = 2,GSS_C_OPTION_MASK = 65535,GSS_C_CRED_NO_UI = 65536,GSS_C_GSS_CODE = 1,GSS_C_MECH_CODE = 2,GSS_C_AF_UNSPEC = 0,GSS_C_AF_LOCAL = 1,GSS_C_AF_INET = 2,GSS_C_AF_IMPLINK = 3,GSS_C_AF_PUP = 4,GSS_C_AF_CHAOS = 5,GSS_C_AF_NS = 6,GSS_C_AF_NBS = 7,GSS_C_AF_ECMA = 8,GSS_C_AF_DATAKIT = 9,GSS_C_AF_CCITT = 10,GSS_C_AF_SNA = 11,GSS_C_AF_DECnet = 12,GSS_C_AF_DLI = 13,GSS_C_AF_LAT = 14,GSS_C_AF_HYLINK = 15,GSS_C_AF_APPLETALK = 16,GSS_C_AF_BSC = 17,GSS_C_AF_DSS = 18,GSS_C_AF_OSI = 19,GSS_C_AF_X25 = 21,GSS_C_AF_NULLADDR = 255,GSS_C_NO_NAME = 0,GSS_C_NO_BUFFER = 0,GSS_C_NO_OID = 0,GSS_C_NO_OID_SET = 0,GSS_C_NO_CONTEXT = 0,GSS_C_NO_CREDENTIAL = 0,GSS_C_NO_CHANNEL_BINDINGS = 0,GSS_C_NULL_OID = 0,GSS_C_NULL_OID_SET = 0,GSS_C_QOP_DEFAULT = 0,GSS_C_INDEFINITE = 4294967295,GSS_S_COMPLETE = 0,GSS_C_CALLING_ERROR_OFFSET = 24,GSS_C_ROUTINE_ERROR_OFFSET = 16,GSS_C_SUPPLEMENTARY_OFFSET = 0,GSS_C_CALLING_ERROR_MASK = 255,GSS_C_ROUTINE_ERROR_MASK = 255,GSS_C_SUPPLEMENTARY_MASK = 65535,GSS_S_CALL_INACCESSIBLE_READ = 16777216,GSS_S_CALL_INACCESSIBLE_WRITE = 33554432,GSS_S_CALL_BAD_STRUCTURE = 50331648,GSS_S_BAD_MECH = 65536,GSS_S_BAD_NAME = 131072,GSS_S_BAD_NAMETYPE = 196608,GSS_S_BAD_BINDINGS = 262144,GSS_S_BAD_STATUS = 327680,GSS_S_BAD_SIG = 393216,GSS_S_NO_CRED = 458752,GSS_S_NO_CONTEXT = 524288,GSS_S_DEFECTIVE_TOKEN = 589824,GSS_S_DEFECTIVE_CREDENTIAL = 655360,GSS_S_CREDENTIALS_EXPIRED = 720896,GSS_S_CONTEXT_EXPIRED = 786432,GSS_S_FAILURE = 851968,GSS_S_BAD_QOP = 917504,GSS_S_UNAUTHORIZED = 983040,GSS_S_UNAVAILABLE = 1048576,GSS_S_DUPLICATE_ELEMENT = 1114112,GSS_S_NAME_NOT_MN = 1179648,GSS_S_CONTINUE_NEEDED = 1,GSS_S_DUPLICATE_TOKEN = 2,GSS_S_OLD_TOKEN = 4,GSS_S_UNSEQ_TOKEN = 8,GSS_S_GAP_TOKEN = 16,GSS_S_CRED_UNAVAIL = 851968,GSS_KRB5_UI_ALLOW = 1,GSS_KRB5_UI_DENY = 2,GSS_KRB5_UI_PROBE = 3,};
enum MACRO_Gstack {Gstack = 0,};
enum MACRO_H {H_FUNC = 0,H_SETSIZE = 1,H_GETSIZE = 2,H_FIRST = 3,H_LAST = 4,H_PREV = 5,H_NEXT = 6,H_CURR = 8,H_SET = 7,H_ADD = 9,H_ENTER = 10,H_APPEND = 11,H_END = 12,H_NEXT_STR = 13,H_PREV_STR = 14,H_NEXT_EVENT = 15,H_PREV_EVENT = 16,H_LOAD = 17,H_SAVE = 18,H_CLEAR = 19,H_SETUNIQUE = 20,H_GETUNIQUE = 21,H_DEL = 22,H_NEXT_EVDATA = 23,H_DELDATA = 24,H_REPLACE = 25,};
enum MACRO_HANDLER {HANDLER_CAN_GETANDGETNEXT = 0x1,HANDLER_CAN_SET = 0x2,HANDLER_CAN_GETBULK = 0x4,HANDLER_CAN_NOT_CREATE = 0x8,HANDLER_CAN_BABY_STEP = 0x10,HANDLER_CAN_STASH = 0x20,HANDLER_CAN_RONLY = 0x1,HANDLER_CAN_RWRITE = 0x3,HANDLER_CAN_SET_ONLY = 0xA,HANDLER_CAN_DEFAULT = 0x9,};
enum MACRO_HAS {HAS_VSNPRINTF = 1,};
enum MACRO_HASH {HASH_SZ = 97,};
enum MACRO_HASHFRACTION {HASHFRACTION = 2,};
enum MACRO_HASHMAGIC {HASHMAGIC = 0x61561,};
enum MACRO_HASHSIZE {HASHSIZE = 128,};
enum MACRO_HASHVERSION {HASHVERSION = 2,};
enum MACRO_HAS_FUTIME {HAS_FUTIME = 0,};
enum MACRO_HAVE {HAVE_ALLOCA = 1,HAVE_ALLOCA_H = 1,HAVE_MEMCPY = 1,HAVE_MMAP_ANON = 1,HAVE_MMAP_FILE = 1,};
enum MACRO_HAVE_AES {HAVE_AES_CFB128_ENCRYPT = 1,HAVE_ARPA_INET_H = 1,HAVE_CGETNEXT = 1,HAVE_CHOWN = 1,HAVE_CLOSEDIR = 1,HAVE_DIRENT_H = 1,HAVE_DLFCN_H = 1,HAVE_DLOPEN = 1,HAVE_ERR_H = 1,HAVE_EXECV = 1,HAVE_FCNTL_H = 1,HAVE_FORK = 1,HAVE_GAI_STRERROR = 1,HAVE_GETADDRINFO = 1,HAVE_GETDTABLESIZE = 1,HAVE_GETFSSTAT = 1,HAVE_GETGRNAM = 1,HAVE_GETHOSTBYNAME = 1,HAVE_GETHOSTNAME = 1,HAVE_GETIPNODEBYNAME = 1,HAVE_GETLOADAVG = 1,HAVE_GETOPT = 1,HAVE_GETOPT_H = 1,HAVE_GETPAGESIZE = 1,HAVE_GETPID = 1,HAVE_GETPWNAM = 1,HAVE_GETTIMEOFDAY = 1,HAVE_GRP_H = 1,HAVE_IF_FREENAMEINDEX = 1,HAVE_IF_NAMEINDEX = 1,HAVE_IF_NAMETOINDEX = 1,HAVE_INET_NTOP = 1,HAVE_INET_PTON = 1,HAVE_INITGROUPS = 1,HAVE_INTMAX_T = 1,HAVE_INTPTR_T = 1,HAVE_INTTYPES_H = 1,HAVE_IN_ADDR_T = 1,HAVE_LIBCRYPTO = 1,HAVE_LIMITS_H = 1,HAVE_LOCALE_H = 1,HAVE_LOCALTIME_R = 1,HAVE_LONG_LONG_INT = 1,HAVE_LPSTAT = 1,HAVE_LRAND48 = 1,HAVE_MACHINE_PARAM_H = 1,HAVE_MACHINE_TYPES_H = 1,HAVE_MEMORY_H = 1,HAVE_MKSTEMP = 1,HAVE_MKTIME = 1,HAVE_NETDB_H = 1,HAVE_NETINET_ICMP6_H = 1,HAVE_NETINET_ICMP_VAR_H = 1,HAVE_NETINET_IF_ETHER_H = 1,HAVE_NETINET_IN_H = 1,HAVE_NETINET_IN_PCB_H = 1,HAVE_NETINET_IN_SYSTM_H = 1,HAVE_NETINET_IN_VAR_H = 1,HAVE_NETINET_IP6_H = 1,HAVE_NETINET_IP_H = 1,HAVE_NETINET_IP_ICMP_H = 1,HAVE_NETINET_IP_VAR_H = 1,HAVE_NETINET_TCPIP_H = 1,HAVE_NETINET_TCP_FSM_H = 1,HAVE_NETINET_TCP_H = 1,HAVE_NETINET_TCP_TIMER_H = 1,HAVE_NETINET_TCP_VAR_H = 1,HAVE_NETINET_UDP_H = 1,HAVE_NETINET_UDP_VAR_H = 1,HAVE_NET_IF_ARP_H = 1,HAVE_NET_IF_DL_H = 1,HAVE_NET_IF_H = 1,HAVE_NET_IF_MIB_H = 1,HAVE_NET_IF_TYPES_H = 1,HAVE_NET_IF_VAR_H = 1,HAVE_NET_ROUTE_H = 1,HAVE_NFDS_T = 1,HAVE_NLIST_H = 1,HAVE_OPENDIR = 1,HAVE_OPENSSL_AES_H = 1,HAVE_OPENSSL_DES_H = 1,HAVE_OPENSSL_DH_H = 1,HAVE_OPENSSL_EVP_H = 1,HAVE_OPENSSL_HMAC_H = 1,HAVE_POLL = 1,HAVE_PTHREAD_H = 1,HAVE_PWD_H = 1,HAVE_RAND = 1,HAVE_RANDOM = 1,HAVE_READDIR = 1,HAVE_REGCOMP = 1,HAVE_REGEX_H = 1,HAVE_SEARCH_H = 1,HAVE_SELECT = 1,HAVE_SETENV = 1,HAVE_SETGID = 1,HAVE_SETGROUPS = 1,HAVE_SETITIMER = 1,HAVE_SETLOCALE = 1,HAVE_SETSID = 1,HAVE_SETUID = 1,HAVE_SGTTY_H = 1,HAVE_SIGACTION = 1,HAVE_SIGBLOCK = 1,HAVE_SIGHOLD = 1,HAVE_SIGHUP = 1,HAVE_SIGNAL = 1,HAVE_SIGPROCMASK = 1,HAVE_SIGSET = 1,HAVE_SNPRINTF = 1,HAVE_SOCKET = 1,HAVE_SOCKLEN_T = 1,HAVE_SSIZE_T = 1,HAVE_STATFS = 1,HAVE_STATVFS = 1,HAVE_STDINT_H = 1,HAVE_STDLIB_H = 1,HAVE_STRCASESTR = 1,HAVE_STRDUP = 1,HAVE_STRERROR = 1,HAVE_STRINGS_H = 1,HAVE_STRING_H = 1,HAVE_STRLCPY = 1,HAVE_STRNCASECMP = 1,HAVE_STRTOK_R = 1,HAVE_STRTOL = 1,HAVE_STRTOUL = 1,HAVE_STRTOULL = 1,HAVE_STRUCT_DIRENT_D_TYPE = 1,HAVE_STRUCT_IPSTAT_IPS_CANTFORWARD = 1,HAVE_STRUCT_IPSTAT_IPS_CANTFRAG = 1,HAVE_STRUCT_IPSTAT_IPS_DELIVERED = 1,HAVE_STRUCT_IPSTAT_IPS_FRAGDROPPED = 1,HAVE_STRUCT_IPSTAT_IPS_FRAGMENTED = 1,HAVE_STRUCT_IPSTAT_IPS_FRAGTIMEOUT = 1,HAVE_STRUCT_IPSTAT_IPS_LOCALOUT = 1,HAVE_STRUCT_IPSTAT_IPS_NOPROTO = 1,HAVE_STRUCT_IPSTAT_IPS_NOROUTE = 1,HAVE_STRUCT_IPSTAT_IPS_ODROPPED = 1,HAVE_STRUCT_IPSTAT_IPS_OFRAGMENTS = 1,HAVE_STRUCT_IPSTAT_IPS_REASSEMBLED = 1,HAVE_STRUCT_MBSTAT_M_CLFREE = 1,HAVE_STRUCT_MBSTAT_M_CLUSTERS = 1,HAVE_STRUCT_MBSTAT_M_MBUFS = 1,HAVE_STRUCT_NLIST_N_VALUE = 1,HAVE_STRUCT_SIGACTION_SA_SIGACTION = 1,HAVE_STRUCT_SOCKADDR_IN6_SIN6_SCOPE_ID = 1,HAVE_STRUCT_SOCKADDR_SA_LEN = 1,HAVE_STRUCT_SOCKADDR_STORAGE_SS_FAMILY = 1,HAVE_STRUCT_STATFS_F_FFREE = 1,HAVE_STRUCT_STATFS_F_FILES = 1,HAVE_STRUCT_STATFS_F_FLAGS = 1,HAVE_STRUCT_STATVFS_F_FILES = 1,HAVE_STRUCT_STATVFS_F_FRSIZE = 1,HAVE_STRUCT_TIMEZONE_TZ_DSTTIME = 1,HAVE_STRUCT_TM_TM_GMTOFF = 1,HAVE_STRUCT_UDPSTAT_UDPS_FULLSOCK = 1,HAVE_STRUCT_UDPSTAT_UDPS_NOPORT = 1,HAVE_STRUCT_UDPSTAT_UDPS_NOPORTBCAST = 1,HAVE_STRUCT_UDPSTAT_UDPS_OPACKETS = 1,HAVE_SYSCONF = 1,HAVE_SYSLOG_H = 1,HAVE_SYSTEM = 1,HAVE_SYS_CDEFS_H = 1,HAVE_SYS_CONF_H = 1,HAVE_SYS_DKSTAT_H = 1,HAVE_SYS_FILE_H = 1,HAVE_SYS_FILIO_H = 1,HAVE_SYS_IOCTL_H = 1,HAVE_SYS_MBUF_H = 1,HAVE_SYS_MOUNT_H = 1,HAVE_SYS_PARAM_H = 1,HAVE_SYS_POLL_H = 1,HAVE_SYS_PROTOSW_H = 1,HAVE_SYS_QUEUE_H = 1,HAVE_SYS_SELECT_H = 1,HAVE_SYS_SOCKETVAR_H = 1,HAVE_SYS_SOCKET_H = 1,HAVE_SYS_SOCKIO_H = 1,HAVE_SYS_STATVFS_H = 1,HAVE_SYS_STAT_H = 1,HAVE_SYS_SYSCTL_H = 1,HAVE_SYS_TIMEB_H = 1,HAVE_SYS_TIMES_H = 1,HAVE_SYS_TIME_H = 1,HAVE_SYS_TYPES_H = 1,HAVE_SYS_UIO_H = 1,HAVE_SYS_UN_H = 1,HAVE_SYS_USER_H = 1,HAVE_SYS_UTSNAME_H = 1,HAVE_SYS_VMMETER_H = 1,HAVE_SYS_VMPARAM_H = 1,HAVE_SYS_VM_H = 1,HAVE_SYS_VNODE_H = 1,HAVE_SYS_WAIT_H = 1,HAVE_TCGETATTR = 1,HAVE_TIMES = 1,HAVE_UINTMAX_T = 1,HAVE_UINTPTR_T = 1,HAVE_UNAME = 1,HAVE_UNISTD_H = 1,HAVE_UNSIGNED_LONG_LONG_INT = 1,HAVE_USLEEP = 1,HAVE_UTMPX_H = 1,HAVE_VSNPRINTF = 1,};
enum MACRO_HAVE_AES_0 {HAVE_AES = 1,};
enum MACRO_HFIXEDSZ {HFIXEDSZ = 12,};
enum MACRO_HFS {HFS_ENCODINGBIAS = 1,HFS_EXTEND_FS = 2,HFS_ENCODINGHINT = 3,HFS_ENABLE_JOURNALING = 534889,HFS_DISABLE_JOURNALING = 201330,HFS_GET_JOURNAL_INFO = 1785621609,HFS_SET_PKG_EXTENSIONS = 1183793,HFS_REPLAY_JOURNAL = 1785621618,HFS_ENABLE_RESIZE_DEBUG = 4,};
enum MACRO_HFSFSMNT {HFSFSMNT_NOXONFILES = 0x1,HFSFSMNT_WRAPPER = 0x2,HFSFSMNT_EXTENDED_ARGS = 0x4,};
enum MACRO_HISTFRACTION {HISTFRACTION = 2,};
enum MACRO_HMAC {HMAC_MAX_MD_CBLOCK = 128,};
enum MACRO_HMAC_MD5 {HMAC_MD5_H = 1,HMAC_MD5_SIZE = 16,};
enum MACRO_HOPCNT {HOPCNT_INFINITY = 16,};
enum MACRO_HOST {HOST_INFO_MAX = 1024,KERNEL_VERSION_MAX = 512,KERNEL_BOOT_INFO_MAX = 4096,};
enum MACRO_HOST_BASIC : __int64 {HOST_BASIC_INFO = 1,HOST_SCHED_INFO = 3,HOST_RESOURCE_SIZES = 4,HOST_PRIORITY_INFO = 5,HOST_SEMAPHORE_TRAPS = 7,HOST_MACH_MSG_TRAP = 8,HOST_LOAD_INFO = 1,HOST_VM_INFO = 2,HOST_CPU_LOAD_INFO = 3,HOST_VM_INFO64 = 4,HOST_EXTMOD_INFO64 = 5,HOST_NOTIFY_CALENDAR_CHANGE = 0,HOST_NOTIFY_TYPE_MAX = 0,HOST_CALENDAR_CHANGED_REPLYID = 950,HOST_SECURITY_PORT = 0,HOST_PORT = 1,HOST_PRIV_PORT = 2,HOST_IO_MASTER_PORT = 3,HOST_MAX_SPECIAL_KERNEL_PORT = 7,HOST_DYNAMIC_PAGER_PORT = 8,HOST_AUDIT_CONTROL_PORT = 9,HOST_USER_NOTIFICATION_PORT = 10,HOST_AUTOMOUNTD_PORT = 11,HOST_LOCKD_PORT = 12,HOST_SEATBELT_PORT = 14,HOST_KEXTD_PORT = 15,HOST_CHUD_PORT = 16,HOST_UNFREED_PORT = 17,HOST_AMFID_PORT = 18,HOST_MAX_SPECIAL_PORT = 19,HOST_LOCAL_NODE = -1,};
enum MACRO_HOST_NOT {HOST_NOT_FOUND = 1,};
enum MACRO_HOST_REBOOT {HOST_REBOOT_HALT = 0x8,HOST_REBOOT_UPSDELAY = 0x100,HOST_REBOOT_DEBUGGER = 0x1000,};
enum MACRO_HOURS {HOURS_PER_DAY = 24,};
enum MACRO_HOURSPERDAY {HOURSPERDAY = 24,};
enum MACRO_HTTP {HTTP_MAX_URI = 1024,HTTP_MAX_HOST = 256,HTTP_MAX_BUFFER = 2048,HTTP_MAX_VALUE = 256,};
enum MACRO_HTTPPOST {HTTPPOST_FILENAME = 1,HTTPPOST_READFILE = 2,HTTPPOST_PTRNAME = 4,HTTPPOST_PTRCONTENTS = 8,HTTPPOST_BUFFER = 16,HTTPPOST_PTRBUFFER = 32,HTTPPOST_CALLBACK = 64,};
enum MACRO_HW {HW_MACHINE = 1,HW_MODEL = 2,HW_NCPU = 3,HW_BYTEORDER = 4,HW_PHYSMEM = 5,HW_USERMEM = 6,HW_PAGESIZE = 7,HW_DISKNAMES = 8,HW_DISKSTATS = 9,HW_EPOCH = 10,HW_FLOATINGPT = 11,HW_MACHINE_ARCH = 12,HW_VECTORUNIT = 13,HW_BUS_FREQ = 14,HW_CPU_FREQ = 15,HW_CACHELINE = 16,HW_L1ICACHESIZE = 17,HW_L1DCACHESIZE = 18,HW_L2SETTINGS = 19,HW_L2CACHESIZE = 20,HW_L3SETTINGS = 21,HW_L3CACHESIZE = 22,HW_TB_FREQ = 23,HW_MEMSIZE = 24,HW_AVAILCPU = 25,HW_MAXID = 26,};
enum MACRO_I386 {I386_PGBYTES = 4096,I386_PGSHIFT = 12,};
enum MACRO_I386_LPGBYTES {I386_LPGBYTES = 2097152,I386_LPGSHIFT = 21,I386_LPGMASK = 2097151,};
enum MACRO_I64CHARSZ {I64CHARSZ = 21,};
enum MACRO_IAC {IAC = 255,};
enum MACRO_ICMP {ICMP_MINLEN = 8,ICMP_MASKLEN = 12,ICMP_ECHOREPLY = 0,ICMP_UNREACH = 3,ICMP_UNREACH_NET = 0,ICMP_UNREACH_HOST = 1,ICMP_UNREACH_PROTOCOL = 2,ICMP_UNREACH_PORT = 3,ICMP_UNREACH_NEEDFRAG = 4,ICMP_UNREACH_SRCFAIL = 5,ICMP_UNREACH_NET_UNKNOWN = 6,ICMP_UNREACH_HOST_UNKNOWN = 7,ICMP_UNREACH_ISOLATED = 8,ICMP_UNREACH_NET_PROHIB = 9,ICMP_UNREACH_HOST_PROHIB = 10,ICMP_UNREACH_TOSNET = 11,ICMP_UNREACH_TOSHOST = 12,ICMP_UNREACH_FILTER_PROHIB = 13,ICMP_UNREACH_HOST_PRECEDENCE = 14,ICMP_UNREACH_PRECEDENCE_CUTOFF = 15,ICMP_SOURCEQUENCH = 4,ICMP_REDIRECT = 5,ICMP_REDIRECT_NET = 0,ICMP_REDIRECT_HOST = 1,ICMP_REDIRECT_TOSNET = 2,ICMP_REDIRECT_TOSHOST = 3,ICMP_ALTHOSTADDR = 6,ICMP_ECHO = 8,ICMP_ROUTERADVERT = 9,ICMP_ROUTERADVERT_NORMAL = 0,ICMP_ROUTERADVERT_NOROUTE_COMMON = 16,ICMP_ROUTERSOLICIT = 10,ICMP_TIMXCEED = 11,ICMP_TIMXCEED_INTRANS = 0,ICMP_TIMXCEED_REASS = 1,ICMP_PARAMPROB = 12,ICMP_PARAMPROB_ERRATPTR = 0,ICMP_PARAMPROB_OPTABSENT = 1,ICMP_PARAMPROB_LENGTH = 2,ICMP_TSTAMP = 13,ICMP_TSTAMPREPLY = 14,ICMP_IREQ = 15,ICMP_IREQREPLY = 16,ICMP_MASKREQ = 17,ICMP_MASKREPLY = 18,ICMP_TRACEROUTE = 30,ICMP_DATACONVERR = 31,ICMP_MOBILE_REDIRECT = 32,ICMP_IPV6_WHEREAREYOU = 33,ICMP_IPV6_IAMHERE = 34,ICMP_MOBILE_REGREQUEST = 35,ICMP_MOBILE_REGREPLY = 36,ICMP_SKIP = 39,ICMP_PHOTURIS = 40,ICMP_PHOTURIS_UNKNOWN_INDEX = 1,ICMP_PHOTURIS_AUTH_FAILED = 2,ICMP_PHOTURIS_DECRYPT_FAILED = 3,ICMP_MAXTYPE = 40,};
enum MACRO_ICMP6 {ICMP6_FILTER = 18,};
enum MACRO_ICMP6_DST {ICMP6_DST_UNREACH = 1,ICMP6_PACKET_TOO_BIG = 2,ICMP6_TIME_EXCEEDED = 3,ICMP6_PARAM_PROB = 4,ICMP6_ECHO_REQUEST = 128,ICMP6_ECHO_REPLY = 129,};
enum MACRO_ICMP6_MAXTYPE {ICMP6_MAXTYPE = 201,ICMP6_DST_UNREACH_NOROUTE = 0,ICMP6_DST_UNREACH_ADMIN = 1,ICMP6_DST_UNREACH_NOTNEIGHBOR = 2,ICMP6_DST_UNREACH_BEYONDSCOPE = 2,ICMP6_DST_UNREACH_ADDR = 3,ICMP6_DST_UNREACH_NOPORT = 4,ICMP6_TIME_EXCEED_TRANSIT = 0,ICMP6_TIME_EXCEED_REASSEMBLY = 1,ICMP6_PARAMPROB_HEADER = 0,ICMP6_PARAMPROB_NEXTHEADER = 1,ICMP6_PARAMPROB_OPTION = 2,ICMP6_INFOMSG_MASK = 128,ICMP6_NI_SUBJ_IPV6 = 0,ICMP6_NI_SUBJ_FQDN = 1,ICMP6_NI_SUBJ_IPV4 = 2,ICMP6_NI_SUCCESS = 0,ICMP6_NI_REFUSED = 1,ICMP6_NI_UNKNOWN = 2,ICMP6_ROUTER_RENUMBERING_COMMAND = 0,ICMP6_ROUTER_RENUMBERING_RESULT = 1,ICMP6_ROUTER_RENUMBERING_SEQNUM_RESET = 255,};
enum MACRO_ICMP6_MEMBERSHIP {ICMP6_MEMBERSHIP_QUERY = 130,ICMP6_MEMBERSHIP_REPORT = 131,ICMP6_MEMBERSHIP_REDUCTION = 132,};
enum MACRO_ICMP6_ROUTER {ICMP6_ROUTER_RENUMBERING = 138,ICMP6_WRUREQUEST = 139,ICMP6_WRUREPLY = 140,ICMP6_FQDN_QUERY = 139,ICMP6_FQDN_REPLY = 140,ICMP6_NI_QUERY = 139,ICMP6_NI_REPLY = 140,};
enum MACRO_ICMP6_RR {ICMP6_RR_FLAGS_TEST = 0x80,ICMP6_RR_FLAGS_REQRESULT = 0x40,ICMP6_RR_FLAGS_FORCEAPPLY = 0x20,ICMP6_RR_FLAGS_SPECSITE = 0x10,ICMP6_RR_FLAGS_PREVDONE = 0x8,};
enum MACRO_ICMP6_RR_PCOUSE {ICMP6_RR_PCOUSE_RAFLAGS_ONLINK = 0x80,ICMP6_RR_PCOUSE_RAFLAGS_AUTO = 0x40,ICMP6_RR_PCOUSE_FLAGS_DECRVLTIME = 0x80,ICMP6_RR_PCOUSE_FLAGS_DECRPLTIME = 0x40,ICMP6_RR_RESULT_FLAGS_OOB = 0x200,ICMP6_RR_RESULT_FLAGS_FORBIDDEN = 0x100,};
enum MACRO_ICMPCTL {ICMPCTL_MASKREPL = 1,ICMPCTL_STATS = 2,ICMPCTL_ICMPLIM = 3,ICMPCTL_TIMESTAMP = 4,ICMPCTL_MAXID = 5,};
enum MACRO_ICMPV6 {ICMPV6_PLD_MAXLEN = 1232,};
enum MACRO_ICMPV6CTL {ICMPV6CTL_ND6_ONLINKNSRFC4861 = 50,};
enum MACRO_ICMPV6CTL_STATS {ICMPV6CTL_STATS = 1,ICMPV6CTL_REDIRACCEPT = 2,ICMPV6CTL_REDIRTIMEOUT = 3,ICMPV6CTL_ND6_PRUNE = 6,ICMPV6CTL_ND6_DELAY = 8,ICMPV6CTL_ND6_UMAXTRIES = 9,ICMPV6CTL_ND6_MMAXTRIES = 10,ICMPV6CTL_ND6_USELOOPBACK = 11,ICMPV6CTL_NODEINFO = 13,ICMPV6CTL_ERRPPSLIMIT = 14,ICMPV6CTL_ND6_MAXNUDHINT = 15,ICMPV6CTL_MTUDISC_HIWAT = 16,ICMPV6CTL_MTUDISC_LOWAT = 17,ICMPV6CTL_ND6_DEBUG = 18,ICMPV6CTL_ND6_DRLIST = 19,ICMPV6CTL_ND6_PRLIST = 20,ICMPV6CTL_MLD_MAXSRCFILTER = 21,ICMPV6CTL_MLD_SOMAXSRC = 22,ICMPV6CTL_MLD_VERSION = 23,ICMPV6CTL_ND6_MAXQLEN = 24,ICMPV6CTL_ND6_ACCEPT_6TO4 = 25,ICMPV6CTL_MAXID = 26,};
enum MACRO_ICMP_REJECT {ICMP_REJECT_RST = 0x100,};
enum MACRO_ICONV {ICONV_TRIVIALP = 0,ICONV_GET_TRANSLITERATE = 1,ICONV_SET_TRANSLITERATE = 2,ICONV_GET_DISCARD_ILSEQ = 3,ICONV_SET_DISCARD_ILSEQ = 4,ICONV_SET_HOOKS = 5,ICONV_SET_FALLBACKS = 6,};
enum MACRO_ID {ID_TYPE_UID = 0,ID_TYPE_GID = 1,ID_TYPE_SID = 3,ID_TYPE_USERNAME = 4,ID_TYPE_GROUPNAME = 5,ID_TYPE_GSS_EXPORT_NAME = 10,ID_TYPE_X509_DN = 11,ID_TYPE_KERBEROS = 12,};
enum MACRO_IF {IF_NAMESIZE = 16,};
enum MACRO_IFCAP {IFCAP_RXCSUM = 0x1,IFCAP_TXCSUM = 0x2,IFCAP_VLAN_MTU = 0x4,IFCAP_VLAN_HWTAGGING = 0x8,IFCAP_JUMBO_MTU = 0x10,IFCAP_TSO4 = 0x20,IFCAP_TSO6 = 0x40,IFCAP_LRO = 0x80,IFCAP_AV = 0x100,IFCAP_HWCSUM = 0x3,IFCAP_TSO = 0x60,IFCAP_VALID = 0x1FF,};
enum MACRO_IFDATA {IFDATA_GENERAL = 1,IFDATA_LINKSPECIFIC = 2,IFDATA_ADDRS = 3,IFDATA_MULTIADDRS = 4,};
enum MACRO_IFF {IFF_UP = 0x1,IFF_BROADCAST = 0x2,IFF_DEBUG = 0x4,IFF_LOOPBACK = 0x8,IFF_POINTOPOINT = 0x10,IFF_NOTRAILERS = 0x20,IFF_RUNNING = 0x40,IFF_NOARP = 0x80,IFF_PROMISC = 0x100,IFF_ALLMULTI = 0x200,IFF_OACTIVE = 0x400,IFF_SIMPLEX = 0x800,IFF_LINK0 = 0x1000,IFF_LINK1 = 0x2000,IFF_LINK2 = 0x4000,IFF_ALTPHYS = 0x4000,IFF_MULTICAST = 0x8000,};
enum MACRO_IFLOW {CRTS_IFLOW = 0x20000,CDTR_IFLOW = 0x40000,};
enum MACRO_IFLR {IFLR_PREFIX = 0x8000,};
enum MACRO_IFM : __int64 {IFM_ETHER = 0x20,IFM_10_T = 0x3,IFM_10_2 = 0x4,IFM_10_5 = 0x5,IFM_100_TX = 0x6,IFM_100_FX = 0x7,IFM_100_T4 = 0x8,IFM_100_VG = 0x9,IFM_100_T2 = 0xA,IFM_1000_SX = 0xB,IFM_10_STP = 0xC,IFM_10_FL = 0xD,IFM_1000_LX = 0xE,IFM_1000_CX = 0xF,IFM_1000_T = 0x10,IFM_HPNA_1 = 0x11,IFM_10G_SR = 0x12,IFM_10G_LR = 0x13,IFM_10G_CX4 = 0x14,IFM_10G_T = 0x15,IFM_TOKEN = 0x40,IFM_TOK_STP4 = 0x3,IFM_TOK_STP16 = 0x4,IFM_TOK_UTP4 = 0x5,IFM_TOK_UTP16 = 0x6,IFM_TOK_STP100 = 0x7,IFM_TOK_UTP100 = 0x8,IFM_TOK_ETR = 0x200,IFM_TOK_SRCRT = 0x400,IFM_TOK_ALLR = 0x800,IFM_TOK_DTR = 0x2000,IFM_TOK_CLASSIC = 0x4000,IFM_TOK_AUTO = 0x8000,IFM_FDDI = 0x60,IFM_FDDI_SMF = 0x3,IFM_FDDI_MMF = 0x4,IFM_FDDI_UTP = 0x5,IFM_FDDI_DA = 0x100,IFM_IEEE80211 = 0x80,IFM_IEEE80211_FH1 = 0x3,IFM_IEEE80211_FH2 = 0x4,IFM_IEEE80211_DS2 = 0x5,IFM_IEEE80211_DS5 = 0x6,IFM_IEEE80211_DS11 = 0x7,IFM_IEEE80211_DS1 = 0x8,IFM_IEEE80211_DS22 = 0x9,IFM_IEEE80211_ADHOC = 0x100,IFM_AUTO = 0x0,IFM_MANUAL = 0x1,IFM_NONE = 0x2,IFM_FDX = 0x100000,IFM_HDX = 0x200000,IFM_FLOW = 0x400000,IFM_EEE = 0x800000,IFM_FLAG0 = 0x1000000,IFM_FLAG1 = 0x2000000,IFM_FLAG2 = 0x4000000,IFM_LOOP = 0x8000000,IFM_NMASK = 0xE0,IFM_TMASK = 0x1F,IFM_IMASK = 0xF0000000,IFM_ISHIFT = 0x1C,IFM_OMASK = 0xFF00,IFM_GMASK = 0xFF00000,IFM_AVALID = 0x1,IFM_ACTIVE = 0x2,IFM_INST_MAX = 0xF,};
enum MACRO_IFMIB {IFMIB_SYSTEM = 1,IFMIB_IFDATA = 2,IFMIB_IFALLDATA = 3,};
enum MACRO_IFMIB_IFCOUNT {IFMIB_IFCOUNT = 1,};
enum MACRO_IFNAMSIZ {IFNAMSIZ = 16,};
enum MACRO_IFNET {IFNET_SLOWHZ = 1,};
enum MACRO_IFQ {IFQ_MAXLEN = 50,};
enum MACRO_IFSTATMAX {IFSTATMAX = 800,};
enum MACRO_IFT {IFT_OTHER = 0x1,IFT_1822 = 0x2,IFT_HDH1822 = 0x3,IFT_X25DDN = 0x4,IFT_X25 = 0x5,IFT_ETHER = 0x6,IFT_ISO88023 = 0x7,IFT_ISO88024 = 0x8,IFT_ISO88025 = 0x9,IFT_ISO88026 = 0xA,IFT_STARLAN = 0xB,IFT_P10 = 0xC,IFT_P80 = 0xD,IFT_HY = 0xE,IFT_FDDI = 0xF,IFT_LAPB = 0x10,IFT_SDLC = 0x11,IFT_T1 = 0x12,IFT_CEPT = 0x13,IFT_ISDNBASIC = 0x14,IFT_ISDNPRIMARY = 0x15,IFT_PTPSERIAL = 0x16,IFT_PPP = 0x17,IFT_LOOP = 0x18,IFT_EON = 0x19,IFT_XETHER = 0x1A,IFT_NSIP = 0x1B,IFT_SLIP = 0x1C,IFT_ULTRA = 0x1D,IFT_DS3 = 0x1E,IFT_SIP = 0x1F,IFT_FRELAY = 0x20,IFT_RS232 = 0x21,IFT_PARA = 0x22,IFT_ARCNET = 0x23,IFT_ARCNETPLUS = 0x24,IFT_ATM = 0x25,IFT_MIOX25 = 0x26,IFT_SONET = 0x27,IFT_X25PLE = 0x28,IFT_ISO88022LLC = 0x29,IFT_LOCALTALK = 0x2A,IFT_SMDSDXI = 0x2B,IFT_FRELAYDCE = 0x2C,IFT_V35 = 0x2D,IFT_HSSI = 0x2E,IFT_HIPPI = 0x2F,IFT_MODEM = 0x30,IFT_AAL5 = 0x31,IFT_SONETPATH = 0x32,IFT_SONETVT = 0x33,IFT_SMDSICIP = 0x34,IFT_PROPVIRTUAL = 0x35,IFT_PROPMUX = 0x36,IFT_GIF = 0x37,IFT_FAITH = 0x38,IFT_STF = 0x39,IFT_L2VLAN = 0x87,IFT_IEEE8023ADLAG = 0x88,IFT_IEEE1394 = 0x90,IFT_BRIDGE = 0xD1,IFT_ENC = 0xF4,IFT_PFLOG = 0xF5,IFT_PFSYNC = 0xF6,IFT_CARP = 0xF8,IFT_CELLULAR = 0xFF,IFT_PDP = 0xFF,};
enum MACRO_IF_MINMTU {IF_MINMTU = 72,IF_MAXMTU = 65535,};
enum MACRO_IF_WAKE {IF_WAKE_ON_MAGIC_PACKET = 0x1,};
enum MACRO_IGMP {IGMP_MINLEN = 8,IGMP_V3_QUERY_MINLEN = 12,IGMP_GRPREC_HDRLEN = 8,IGMP_V3_REPORT_MINLEN = 8,IGMP_V3_REPORT_MAXRECS = 65535,IGMP_HOST_MEMBERSHIP_QUERY = 17,IGMP_v1_HOST_MEMBERSHIP_REPORT = 18,IGMP_DVMRP = 19,IGMP_PIM = 20,IGMP_v2_HOST_MEMBERSHIP_REPORT = 22,IGMP_HOST_LEAVE_MESSAGE = 23,IGMP_MTRACE_REPLY = 30,IGMP_MTRACE_QUERY = 31,IGMP_v3_HOST_MEMBERSHIP_REPORT = 34,IGMP_DO_NOTHING = 0,IGMP_MODE_IS_INCLUDE = 1,IGMP_MODE_IS_EXCLUDE = 2,IGMP_CHANGE_TO_INCLUDE_MODE = 3,IGMP_CHANGE_TO_EXCLUDE_MODE = 4,IGMP_ALLOW_NEW_SOURCES = 5,IGMP_BLOCK_OLD_SOURCES = 6,IGMP_V3_GENERAL_QUERY = 1,IGMP_V3_GROUP_QUERY = 2,IGMP_V3_GROUP_SOURCE_QUERY = 3,IGMP_V1V2_MAX_RI = 10,IGMP_MAX_HOST_REPORT_DELAY = 10,IGMP_TIMER_SCALE = 10,};
enum MACRO_IGMPCTL {IGMPCTL_STATS = 1,IGMPCTL_MAXID = 2,};
enum MACRO_IGMPMSG {IGMPMSG_NOCACHE = 1,IGMPMSG_WRONGVIF = 2,};
enum MACRO_IGNBRK {IGNBRK = 0x1,BRKINT = 0x2,IGNPAR = 0x4,PARMRK = 0x8,INPCK = 0x10,ISTRIP = 0x20,INLCR = 0x40,IGNCR = 0x80,ICRNL = 0x100,IXON = 0x200,IXOFF = 0x400,IXANY = 0x800,IMAXBEL = 0x2000,IUTF8 = 0x4000,};
enum MACRO_IGPS {IGPS_VERSION_3 = 3,IGPS_VERSION3_LEN = 168,};
enum MACRO_ILL {ILL_NOOP = 0,ILL_ILLOPC = 1,ILL_ILLTRP = 2,ILL_PRVOPC = 3,ILL_ILLOPN = 4,ILL_ILLADR = 5,ILL_PRVREG = 6,ILL_COPROC = 7,ILL_BADSTK = 8,};
enum MACRO_IN : __int64 {IN_CLASSA_NET = 0xFF000000,IN_CLASSA_NSHIFT = 0x18,IN_CLASSA_HOST = 0xFFFFFF,IN_CLASSA_MAX = 0x80,IN_CLASSB_NET = 0xFFFF0000,IN_CLASSB_NSHIFT = 0x10,IN_CLASSB_HOST = 0xFFFF,IN_CLASSB_MAX = 0x10000,IN_CLASSC_NET = 0xFFFFFF00,IN_CLASSC_NSHIFT = 0x8,IN_CLASSC_HOST = 0xFF,IN_CLASSD_NET = 0xF0000000,IN_CLASSD_NSHIFT = 0x1C,IN_CLASSD_HOST = 0xFFFFFFF,};
enum MACRO_IN6 {IN6_PREFIX_ND = 1,IN6_PREFIX_RR = 2,};
enum MACRO_IN6P {IN6P_IPV6_V6ONLY = 0x8000,IN6P_PKTINFO = 0x10000,IN6P_HOPLIMIT = 0x20000,IN6P_HOPOPTS = 0x40000,IN6P_DSTOPTS = 0x80000,IN6P_RTHDR = 0x100000,IN6P_RTHDRDSTOPTS = 0x200000,IN6P_TCLASS = 0x400000,IN6P_AUTOFLOWLABEL = 0x800000,IN6P_BINDV6ONLY = 0x1000000,IN6P_RFC2292 = 0x2000000,IN6P_MTU = 0x4000000,};
enum MACRO_IN6_IFF {IN6_IFF_ANYCAST = 0x1,IN6_IFF_TENTATIVE = 0x2,IN6_IFF_DUPLICATED = 0x4,IN6_IFF_DETACHED = 0x8,IN6_IFF_DEPRECATED = 0x10,IN6_IFF_NODAD = 0x20,IN6_IFF_AUTOCONF = 0x40,IN6_IFF_TEMPORARY = 0x80,IN6_IFF_NOPFX = 0x8000,IN6_IFF_NOTREADY = 0x6,};
enum MACRO_INADDR : __int64 {INADDR_ANY = 0,INADDR_BROADCAST = 4294967295,};
enum MACRO_INADDR_LOOPBACK : __int64 {INADDR_LOOPBACK = 2130706433,INADDR_NONE = 4294967295,INADDR_UNSPEC_GROUP = 3758096384,INADDR_ALLHOSTS_GROUP = 3758096385,INADDR_ALLRTRS_GROUP = 3758096386,INADDR_ALLRPTS_GROUP = 3758096406,INADDR_CARP_GROUP = 3758096402,INADDR_PFSYNC_GROUP = 3758096624,INADDR_ALLMDNS_GROUP = 3758096635,INADDR_MAX_LOCAL_GROUP = 3758096639,};
enum MACRO_INDEX : __int64 {INDEX_ERR_GENERR = -1,INDEX_ERR_WRONG_TYPE = -2,INDEX_ERR_NOT_ALLOCATED = -3,INDEX_ERR_WRONG_SESSION = -4,};
enum MACRO_INDIR {INDIR_MASK = 192,};
enum MACRO_INDIRECT : __int64 {INDIRECT_SYMBOL_LOCAL = 0x80000000,INDIRECT_SYMBOL_ABS = 0x40000000,};
enum MACRO_INET {INET_ADDRSTRLEN = 16,};
enum MACRO_INET6 {INET6_ADDRSTRLEN = 46,};
enum MACRO_INI {INI_IPV4 = 0x1,INI_IPV6 = 0x2,};
enum MACRO_INITIALIZE {DO_INITIALIZE = 1,DONT_INITIALIZE = 0,};
enum MACRO_INP {INP_IPV4 = 0x1,INP_IPV6 = 0x2,INP_RECVOPTS = 0x1,INP_RECVRETOPTS = 0x2,INP_RECVDSTADDR = 0x4,INP_HDRINCL = 0x8,INP_HIGHPORT = 0x10,INP_LOWPORT = 0x20,INP_ANONPORT = 0x40,INP_RECVIF = 0x80,INP_MTUDISC = 0x100,INP_STRIPHDR = 0x200,INP_FAITH = 0x400,INP_INADDR_ANY = 0x800,INP_RECVTTL = 0x1000,INP_UDP_NOCKSUM = 0x2000,INP_BOUND_IF = 0x4000,};
enum MACRO_INPUT {INPUT_CHUNK = 250,};
enum MACRO_INP_PKTINFO {INP_PKTINFO = 0x8000000,INP_NO_IFT_CELLULAR = 0x20000000,};
enum MACRO_INST : __int64 {INST = 0xFFFFFFFF,};
enum MACRO_INT : __int64 {INT_LEAST8_MIN = -128,INT_LEAST16_MIN = -32768,INT_LEAST32_MIN = -2147483648,INT_LEAST64_MIN = -9223372036854775808,INT_LEAST8_MAX = 127,INT_LEAST16_MAX = 32767,INT_LEAST32_MAX = 2147483647,INT_LEAST64_MAX = 9223372036854775807,};
enum MACRO_INT16SZ {INT16SZ = 2,INADDRSZ = 4,IN6ADDRSZ = 16,};
enum MACRO_INT32SZ {INT32SZ = 4,};
enum MACRO_INT8 : __int64 {INT8_MAX = 127,INT16_MAX = 32767,INT32_MAX = 2147483647,INT64_MAX = 9223372036854775807,};
enum MACRO_INTEGER {INTEGER = 2,};
enum MACRO_INTMAX : __int64 {INTMAX_MIN = -9223372036854775808,INTMAX_MAX = 9223372036854775807,};
enum MACRO_INTPTR : __int64 {INTPTR_MIN = -9223372036854775808,INTPTR_MAX = 9223372036854775807,};
enum MACRO_INT_FAST8 : __int64 {INT_FAST8_MIN = -128,INT_FAST16_MIN = -32768,INT_FAST32_MIN = -2147483648,INT_FAST64_MIN = -9223372036854775808,INT_FAST8_MAX = 127,INT_FAST16_MAX = 32767,INT_FAST32_MAX = 2147483647,INT_FAST64_MAX = 9223372036854775807,};
enum MACRO_INT_MIN : __int64 {INT_MIN = -2147483648,};
enum MACRO_IN_LINKLOCALNETNUM : __int64 {IN_LINKLOCALNETNUM = 2851995648,IN_LOOPBACKNET = 127,};
enum MACRO_IO {IO_METASYNC = 0,};
enum MACRO_IOC : __int64 {IOC_VOID = 536870912,IOC_OUT = 1073741824,IOC_IN = 2147483648,IOC_INOUT = 3221225472,IOC_DIRMASK = 3758096384,};
enum MACRO_IOCPARM {IOCPARM_MASK = 0x1FFF,IOCPARM_MAX = 0x2000,};
enum MACRO_IOPOL {IOPOL_TYPE_DISK = 0,IOPOL_SCOPE_PROCESS = 0,IOPOL_SCOPE_THREAD = 1,IOPOL_DEFAULT = 0,IOPOL_NORMAL = 1,IOPOL_PASSIVE = 2,IOPOL_THROTTLE = 3,};
enum MACRO_IP {IP_OPTIONS = 1,IP_HDRINCL = 2,IP_TOS = 3,IP_TTL = 4,IP_RECVOPTS = 5,IP_RECVRETOPTS = 6,IP_RECVDSTADDR = 7,IP_RETOPTS = 8,IP_MULTICAST_IF = 9,IP_MULTICAST_TTL = 10,IP_MULTICAST_LOOP = 11,IP_ADD_MEMBERSHIP = 12,IP_DROP_MEMBERSHIP = 13,IP_MULTICAST_VIF = 14,IP_RSVP_ON = 15,IP_RSVP_OFF = 16,IP_RSVP_VIF_ON = 17,IP_RSVP_VIF_OFF = 18,IP_PORTRANGE = 19,IP_RECVIF = 20,IP_IPSEC_POLICY = 21,IP_FAITH = 22,IP_STRIPHDR = 23,IP_RECVTTL = 24,IP_BOUND_IF = 25,IP_PKTINFO = 26,IP_RECVPKTINFO = 26,IP_FW_ADD = 40,IP_FW_DEL = 41,IP_FW_FLUSH = 42,IP_FW_ZERO = 43,IP_FW_GET = 44,IP_FW_RESETLOG = 45,IP_OLD_FW_ADD = 50,IP_OLD_FW_DEL = 51,IP_OLD_FW_FLUSH = 52,IP_OLD_FW_ZERO = 53,IP_OLD_FW_GET = 54,IP_NAT__XXX = 55,IP_OLD_FW_RESETLOG = 56,IP_DUMMYNET_CONFIGURE = 60,IP_DUMMYNET_DEL = 61,IP_DUMMYNET_FLUSH = 62,IP_DUMMYNET_GET = 64,IP_TRAFFIC_MGT_BACKGROUND = 65,IP_MULTICAST_IFINDEX = 66,IP_ADD_SOURCE_MEMBERSHIP = 70,IP_DROP_SOURCE_MEMBERSHIP = 71,IP_BLOCK_SOURCE = 72,IP_UNBLOCK_SOURCE = 73,IP_MSFILTER = 74,};
enum MACRO_IP6 {IP6_ALERT_MLD = 0x0,IP6_ALERT_RSVP = 0x100,IP6_ALERT_AN = 0x200,};
enum MACRO_IP6F {IP6F_OFF_MASK = 0xF8FF,IP6F_RESERVED_MASK = 0x600,IP6F_MORE_FRAG = 0x100,};
enum MACRO_IP6OPT {IP6OPT_PAD1 = 0x0,IP6OPT_PADN = 0x1,IP6OPT_JUMBO = 0xC2,IP6OPT_NSAP_ADDR = 0xC3,IP6OPT_TUNNEL_LIMIT = 0x4,IP6OPT_RTALERT = 0x5,IP6OPT_ROUTER_ALERT = 0x5,IP6OPT_RTALERT_LEN = 0x4,IP6OPT_RTALERT_MLD = 0x0,IP6OPT_RTALERT_RSVP = 0x1,IP6OPT_RTALERT_ACTNET = 0x2,IP6OPT_MINLEN = 0x2,IP6OPT_EID = 0x8A,IP6OPT_TYPE_SKIP = 0x0,IP6OPT_TYPE_DISCARD = 0x40,IP6OPT_TYPE_FORCEICMP = 0x80,IP6OPT_TYPE_ICMP = 0xC0,IP6OPT_MUTABLE = 0x20,IP6OPT_JUMBO_LEN = 0x6,};
enum MACRO_IP6TOS {IP6TOS_CE = 0x1,IP6TOS_ECT = 0x2,};
enum MACRO_IPC {IPC_CREAT = 0x200,IPC_EXCL = 0x400,IPC_NOWAIT = 0x800,IPC_PRIVATE = 0x0,IPC_RMID = 0x0,IPC_SET = 0x1,IPC_STAT = 0x2,IPC_R = 0x100,IPC_W = 0x80,IPC_M = 0x1000,};
enum MACRO_IPCTL {IPCTL_FORWARDING = 1,IPCTL_SENDREDIRECTS = 2,IPCTL_DEFTTL = 3,IPCTL_RTEXPIRE = 5,IPCTL_RTMINEXPIRE = 6,IPCTL_RTMAXCACHE = 7,IPCTL_SOURCEROUTE = 8,IPCTL_DIRECTEDBROADCAST = 9,IPCTL_INTRQMAXLEN = 10,IPCTL_INTRQDROPS = 11,IPCTL_STATS = 12,IPCTL_ACCEPTSOURCEROUTE = 13,IPCTL_FASTFORWARDING = 14,IPCTL_KEEPFAITH = 15,IPCTL_GIF_TTL = 16,IPCTL_MAXID = 17,};
enum MACRO_IPDEFTTL {IPDEFTTL = 64,};
enum MACRO_IPFRAGTTL {IPFRAGTTL = 60,};
enum MACRO_IPOPT {IPOPT_CONTROL = 0x0,IPOPT_RESERVED1 = 0x20,IPOPT_DEBMEAS = 0x40,IPOPT_RESERVED2 = 0x60,IPOPT_EOL = 0x0,IPOPT_NOP = 0x1,IPOPT_RR = 0x7,IPOPT_TS = 0x44,IPOPT_SECURITY = 0x82,IPOPT_LSRR = 0x83,IPOPT_SATID = 0x88,IPOPT_SSRR = 0x89,IPOPT_RA = 0x94,IPOPT_OPTVAL = 0x0,IPOPT_OLEN = 0x1,IPOPT_OFFSET = 0x2,IPOPT_MINOFF = 0x4,IPOPT_TS_TSONLY = 0x0,IPOPT_TS_TSANDADDR = 0x1,IPOPT_TS_PRESPEC = 0x3,IPOPT_SECUR_UNCLASS = 0x0,IPOPT_SECUR_CONFID = 0xF135,IPOPT_SECUR_EFTO = 0x789A,IPOPT_SECUR_MMMM = 0xBC4D,IPOPT_SECUR_RESTR = 0xAF13,IPOPT_SECUR_SECRET = 0xD788,IPOPT_SECUR_TOPSECRET = 0x6BC5,};
enum MACRO_IPP {IPP_PORT = 631,IPP_MAX_LENGTH = 32767,IPP_MAX_NAME = 256,IPP_MAX_VALUES = 8,};
enum MACRO_IPPORT {IPPORT_USERRESERVED = 5000,IPPORT_HIFIRSTAUTO = 49152,IPPORT_HILASTAUTO = 65535,IPPORT_RESERVEDSTART = 600,};
enum MACRO_IPPORT_BOOTPS {IPPORT_BOOTPS = 67,IPPORT_BOOTPC = 68,};
enum MACRO_IPPROTO {IPPROTO_IP = 0,IPPROTO_HOPOPTS = 0,IPPROTO_ICMP = 1,IPPROTO_IGMP = 2,IPPROTO_GGP = 3,IPPROTO_IPV4 = 4,IPPROTO_IPIP = 4,IPPROTO_TCP = 6,IPPROTO_ST = 7,IPPROTO_EGP = 8,IPPROTO_PIGP = 9,IPPROTO_RCCMON = 10,IPPROTO_NVPII = 11,IPPROTO_PUP = 12,IPPROTO_ARGUS = 13,IPPROTO_EMCON = 14,IPPROTO_XNET = 15,IPPROTO_CHAOS = 16,IPPROTO_UDP = 17,IPPROTO_MUX = 18,IPPROTO_MEAS = 19,IPPROTO_HMP = 20,IPPROTO_PRM = 21,IPPROTO_IDP = 22,IPPROTO_TRUNK1 = 23,IPPROTO_TRUNK2 = 24,IPPROTO_LEAF1 = 25,IPPROTO_LEAF2 = 26,IPPROTO_RDP = 27,IPPROTO_IRTP = 28,IPPROTO_TP = 29,IPPROTO_BLT = 30,IPPROTO_NSP = 31,IPPROTO_INP = 32,IPPROTO_SEP = 33,IPPROTO_3PC = 34,IPPROTO_IDPR = 35,IPPROTO_XTP = 36,IPPROTO_DDP = 37,IPPROTO_CMTP = 38,IPPROTO_TPXX = 39,IPPROTO_IL = 40,IPPROTO_IPV6 = 41,IPPROTO_SDRP = 42,IPPROTO_ROUTING = 43,IPPROTO_FRAGMENT = 44,IPPROTO_IDRP = 45,IPPROTO_RSVP = 46,IPPROTO_GRE = 47,IPPROTO_MHRP = 48,IPPROTO_BHA = 49,IPPROTO_ESP = 50,IPPROTO_AH = 51,IPPROTO_INLSP = 52,IPPROTO_SWIPE = 53,IPPROTO_NHRP = 54,IPPROTO_ICMPV6 = 58,IPPROTO_NONE = 59,IPPROTO_DSTOPTS = 60,IPPROTO_AHIP = 61,IPPROTO_CFTP = 62,IPPROTO_HELLO = 63,IPPROTO_SATEXPAK = 64,IPPROTO_KRYPTOLAN = 65,IPPROTO_RVD = 66,IPPROTO_IPPC = 67,IPPROTO_ADFS = 68,IPPROTO_SATMON = 69,IPPROTO_VISA = 70,IPPROTO_IPCV = 71,IPPROTO_CPNX = 72,IPPROTO_CPHB = 73,IPPROTO_WSN = 74,IPPROTO_PVP = 75,IPPROTO_BRSATMON = 76,IPPROTO_ND = 77,IPPROTO_WBMON = 78,IPPROTO_WBEXPAK = 79,IPPROTO_EON = 80,IPPROTO_VMTP = 81,IPPROTO_SVMTP = 82,IPPROTO_VINES = 83,IPPROTO_TTP = 84,IPPROTO_IGP = 85,IPPROTO_DGP = 86,IPPROTO_TCF = 87,IPPROTO_IGRP = 88,IPPROTO_OSPFIGP = 89,IPPROTO_SRPC = 90,IPPROTO_LARP = 91,IPPROTO_MTP = 92,IPPROTO_AX25 = 93,IPPROTO_IPEIP = 94,IPPROTO_MICP = 95,IPPROTO_SCCSP = 96,IPPROTO_ETHERIP = 97,IPPROTO_ENCAP = 98,IPPROTO_APES = 99,IPPROTO_GMTP = 100,IPPROTO_PIM = 103,IPPROTO_IPCOMP = 108,IPPROTO_PGM = 113,IPPROTO_SCTP = 132,IPPROTO_DIVERT = 254,IPPROTO_RAW = 255,IPPROTO_MAX = 256,IPPROTO_DONE = 257,};
enum MACRO_IPPROTO_MAXID {IPPROTO_MAXID = 52,};
enum MACRO_IPSEC {IPSEC_PORT_ANY = 0,IPSEC_ULPROTO_ANY = 255,IPSEC_PROTO_ANY = 255,IPSEC_MODE_ANY = 0,IPSEC_MODE_TRANSPORT = 1,IPSEC_MODE_TUNNEL = 2,IPSEC_DIR_ANY = 0,IPSEC_DIR_INBOUND = 1,IPSEC_DIR_OUTBOUND = 2,IPSEC_DIR_MAX = 3,IPSEC_DIR_INVALID = 4,IPSEC_POLICY_DISCARD = 0,IPSEC_POLICY_NONE = 1,IPSEC_POLICY_IPSEC = 2,IPSEC_POLICY_ENTRUST = 3,IPSEC_POLICY_BYPASS = 4,IPSEC_POLICY_GENERATE = 5,IPSEC_LEVEL_DEFAULT = 0,IPSEC_LEVEL_USE = 1,IPSEC_LEVEL_REQUIRE = 2,IPSEC_LEVEL_UNIQUE = 3,IPSEC_MANUAL_REQID_MAX = 16383,IPSEC_REPLAYWSIZE = 32,};
enum MACRO_IPTOS {IPTOS_LOWDELAY = 0x10,IPTOS_THROUGHPUT = 0x8,IPTOS_RELIABILITY = 0x4,IPTOS_MINCOST = 0x2,IPTOS_CE = 0x1,IPTOS_ECT = 0x2,IPTOS_ECN_NOTECT = 0x0,IPTOS_ECN_ECT1 = 0x1,IPTOS_ECN_ECT0 = 0x2,IPTOS_ECN_CE = 0x3,IPTOS_ECN_MASK = 0x3,IPTOS_PREC_NETCONTROL = 0xE0,IPTOS_PREC_INTERNETCONTROL = 0xC0,IPTOS_PREC_CRITIC_ECP = 0xA0,IPTOS_PREC_FLASHOVERRIDE = 0x80,IPTOS_PREC_FLASH = 0x60,IPTOS_PREC_IMMEDIATE = 0x40,IPTOS_PREC_PRIORITY = 0x20,IPTOS_PREC_ROUTINE = 0x0,};
enum MACRO_IPTTLDEC {IPTTLDEC = 1,};
enum MACRO_IPV6 {IPV6_SOCKOPT_RESERVED1 = 3,IPV6_UNICAST_HOPS = 4,IPV6_MULTICAST_IF = 9,IPV6_MULTICAST_HOPS = 10,IPV6_MULTICAST_LOOP = 11,IPV6_JOIN_GROUP = 12,IPV6_LEAVE_GROUP = 13,IPV6_PORTRANGE = 14,};
enum MACRO_IPV6CTL {IPV6CTL_FORWARDING = 1,IPV6CTL_SENDREDIRECTS = 2,IPV6CTL_DEFHLIM = 3,IPV6CTL_FORWSRCRT = 5,IPV6CTL_STATS = 6,IPV6CTL_MRTSTATS = 7,IPV6CTL_MRTPROTO = 8,IPV6CTL_MAXFRAGPACKETS = 9,IPV6CTL_SOURCECHECK = 10,IPV6CTL_SOURCECHECK_LOGINT = 11,IPV6CTL_ACCEPT_RTADV = 12,IPV6CTL_KEEPFAITH = 13,IPV6CTL_LOG_INTERVAL = 14,IPV6CTL_HDRNESTLIMIT = 15,IPV6CTL_DAD_COUNT = 16,IPV6CTL_AUTO_FLOWLABEL = 17,IPV6CTL_DEFMCASTHLIM = 18,IPV6CTL_GIF_HLIM = 19,IPV6CTL_KAME_VERSION = 20,IPV6CTL_USE_DEPRECATED = 21,IPV6CTL_RR_PRUNE = 22,IPV6CTL_V6ONLY = 24,IPV6CTL_RTEXPIRE = 25,IPV6CTL_RTMINEXPIRE = 26,IPV6CTL_RTMAXCACHE = 27,IPV6CTL_USETEMPADDR = 32,IPV6CTL_TEMPPLTIME = 33,IPV6CTL_TEMPVLTIME = 34,IPV6CTL_AUTO_LINKLOCAL = 35,IPV6CTL_RIP6STATS = 36,IPV6CTL_PREFER_TEMPADDR = 37,IPV6CTL_ADDRCTLPOLICY = 38,IPV6CTL_USE_DEFAULTZONE = 39,IPV6CTL_MAXFRAGS = 41,IPV6CTL_MCAST_PMTU = 44,IPV6CTL_NEIGHBORGCTHRESH = 46,IPV6CTL_MAXIFPREFIXES = 47,IPV6CTL_MAXIFDEFROUTERS = 48,IPV6CTL_MAXDYNROUTES = 49,};
enum MACRO_IPV6CTL_MAXID {IPV6CTL_MAXID = 51,};
enum MACRO_IPV6PORT {IPV6PORT_RESERVED = 1024,IPV6PORT_ANONMIN = 49152,IPV6PORT_ANONMAX = 65535,IPV6PORT_RESERVEDMIN = 600,IPV6PORT_RESERVEDMAX = 1023,};
enum MACRO_IPV6PROTO {IPV6PROTO_MAXID = 104,};
enum MACRO_IPV6_2292PKTINFO {IPV6_2292PKTINFO = 19,IPV6_2292HOPLIMIT = 20,IPV6_2292NEXTHOP = 21,IPV6_2292HOPOPTS = 22,IPV6_2292DSTOPTS = 23,IPV6_2292RTHDR = 24,IPV6_2292PKTOPTIONS = 25,IPV6_CHECKSUM = 26,IPV6_V6ONLY = 27,IPV6_BINDV6ONLY = 27,IPV6_IPSEC_POLICY = 28,IPV6_FAITH = 29,IPV6_FW_ADD = 30,IPV6_FW_DEL = 31,IPV6_FW_FLUSH = 32,IPV6_FW_ZERO = 33,IPV6_FW_GET = 34,IPV6_RECVTCLASS = 35,IPV6_TCLASS = 36,IPV6_BOUND_IF = 125,IPV6_RTHDR_LOOSE = 0,IPV6_RTHDR_STRICT = 1,IPV6_RTHDR_TYPE_0 = 0,IPV6_DEFAULT_MULTICAST_HOPS = 1,IPV6_DEFAULT_MULTICAST_LOOP = 1,IPV6_MIN_MEMBERSHIPS = 31,IPV6_MAX_MEMBERSHIPS = 4095,IPV6_MAX_GROUP_SRC_FILTER = 512,IPV6_MAX_SOCK_SRC_FILTER = 128,IPV6_PORTRANGE_DEFAULT = 0,IPV6_PORTRANGE_HIGH = 1,IPV6_PORTRANGE_LOW = 2,};
enum MACRO_IPV6_MAXHLIM {IPV6_MAXHLIM = 255,IPV6_DEFHLIM = 64,IPV6_FRAGTTL = 120,IPV6_HLIMDEC = 1,IPV6_MMTU = 1280,IPV6_MAXPACKET = 65535,IPV6_MAXOPTHDR = 2048,};
enum MACRO_IPV6_VERSION : __int64 {IPV6_VERSION = 0x60,IPV6_VERSION_MASK = 0xF0,IPV6_FLOWINFO_MASK = 0xFFFFFF0F,IPV6_FLOWLABEL_MASK = 0xFFFF0F00,};
enum MACRO_IPVERSION {IPVERSION = 4,};
enum MACRO_IP_0 {IP = 244,};
enum MACRO_IP_ADDR {IP_ADDR_TYPE = 1,};
enum MACRO_IP_DEFAULT {IP_DEFAULT_MULTICAST_TTL = 1,IP_DEFAULT_MULTICAST_LOOP = 1,IP_MIN_MEMBERSHIPS = 31,IP_MAX_MEMBERSHIPS = 4095,IP_MAX_GROUP_SRC_FILTER = 512,IP_MAX_SOCK_SRC_FILTER = 128,IP_MAX_SOCK_MUTE_FILTER = 128,};
enum MACRO_IP_FW {IP_FW_VERSION_NONE = 0,IP_FW_VERSION_0 = 10,IP_FW_VERSION_1 = 20,IP_FW_VERSION_2 = 30,IP_FW_CURRENT_API_VERSION = 30,};
enum MACRO_IP_FW_IPOPT {IP_FW_IPOPT_LSRR = 0x1,IP_FW_IPOPT_SSRR = 0x2,IP_FW_IPOPT_RR = 0x4,IP_FW_IPOPT_TS = 0x8,IP_FW_TCPOPT_MSS = 0x1,IP_FW_TCPOPT_WINDOW = 0x2,IP_FW_TCPOPT_SACK = 0x4,IP_FW_TCPOPT_TS = 0x8,IP_FW_TCPOPT_CC = 0x10,};
enum MACRO_IP_MSS {IP_MSS = 576,};
enum MACRO_IP_PORTRANGE {IP_PORTRANGE_DEFAULT = 0,IP_PORTRANGE_HIGH = 1,IP_PORTRANGE_LOW = 2,};
enum MACRO_IP_RF {IP_RF = 0x8000,IP_DF = 0x4000,IP_MF = 0x2000,IP_OFFMASK = 0x1FFF,IP_MAXPACKET = 0xFFFF,};
enum MACRO_IS {IS_SEQUENCE = 0,IS_SET = 1,};
enum MACRO_ISFUNC {ISFUNC = 0,ISKMAP = 1,ISMACR = 2,};
enum MACRO_ITEM {ITEM_THREADS = 0,ITEM_TASKS = 1,ITEM_VM = 2,};
enum MACRO_ITIMER {ITIMER_REAL = 0,ITIMER_VIRTUAL = 1,ITIMER_PROF = 2,};
enum MACRO_JUSTIFY {JUSTIFY_LEFT = 1,JUSTIFY_CENTER = 2,JUSTIFY_RIGHT = 3,};
enum MACRO_KAUTH {KAUTH_GUID_SIZE = 16,};
enum MACRO_KAUTH_UID : __int64 {KAUTH_UID_NONE = -101,KAUTH_GID_NONE = -101,KAUTH_NTSID_MAX_AUTHORITIES = 16,KAUTH_NTSID_HDRSIZE = 8,KAUTH_EXTLOOKUP_SUCCESS = 0,KAUTH_EXTLOOKUP_BADRQ = 1,KAUTH_EXTLOOKUP_FAILURE = 2,KAUTH_EXTLOOKUP_FATAL = 3,KAUTH_EXTLOOKUP_INPROG = 100,KAUTH_EXTLOOKUP_VALID_UID = 1,KAUTH_EXTLOOKUP_VALID_UGUID = 2,KAUTH_EXTLOOKUP_VALID_USID = 4,KAUTH_EXTLOOKUP_VALID_GID = 8,KAUTH_EXTLOOKUP_VALID_GGUID = 16,KAUTH_EXTLOOKUP_VALID_GSID = 32,KAUTH_EXTLOOKUP_WANT_UID = 64,KAUTH_EXTLOOKUP_WANT_UGUID = 128,KAUTH_EXTLOOKUP_WANT_USID = 256,KAUTH_EXTLOOKUP_WANT_GID = 512,KAUTH_EXTLOOKUP_WANT_GGUID = 1024,KAUTH_EXTLOOKUP_WANT_GSID = 2048,KAUTH_EXTLOOKUP_WANT_MEMBERSHIP = 4096,KAUTH_EXTLOOKUP_VALID_MEMBERSHIP = 8192,KAUTH_EXTLOOKUP_ISMEMBER = 16384,KAUTH_EXTLOOKUP_VALID_PWNAM = 32768,KAUTH_EXTLOOKUP_WANT_PWNAM = 65536,KAUTH_EXTLOOKUP_VALID_GRNAM = 131072,KAUTH_EXTLOOKUP_WANT_GRNAM = 262144,KAUTH_EXTLOOKUP_REGISTER = 0,KAUTH_EXTLOOKUP_RESULT = 1,KAUTH_EXTLOOKUP_WORKER = 2,KAUTH_EXTLOOKUP_DEREGISTER = 4,KAUTH_ACE_KINDMASK = 15,KAUTH_ACE_PERMIT = 1,KAUTH_ACE_DENY = 2,KAUTH_ACE_AUDIT = 3,KAUTH_ACE_ALARM = 4,KAUTH_ACE_INHERITED = 16,KAUTH_ACE_FILE_INHERIT = 32,KAUTH_ACE_DIRECTORY_INHERIT = 64,KAUTH_ACE_LIMIT_INHERIT = 128,KAUTH_ACE_ONLY_INHERIT = 256,KAUTH_ACE_SUCCESS = 512,KAUTH_ACE_FAILURE = 1024,KAUTH_ACE_INHERIT_CONTROL_FLAGS = 480,KAUTH_ACE_GENERIC_ALL = 2097152,KAUTH_ACE_GENERIC_EXECUTE = 4194304,KAUTH_ACE_GENERIC_WRITE = 8388608,KAUTH_ACE_GENERIC_READ = 16777216,KAUTH_ACL_MAX_ENTRIES = 128,KAUTH_ACL_FLAGS_PRIVATE = 65535,KAUTH_ACL_DEFER_INHERIT = 65536,KAUTH_ACL_NO_INHERIT = 131072,KAUTH_FILESEC_NOACL = 4294967295,KAUTH_FILESEC_MAGIC = 19710317,KAUTH_FILESEC_FLAGS_PRIVATE = 65535,KAUTH_FILESEC_DEFER_INHERIT = 65536,KAUTH_FILESEC_NO_INHERIT = 131072,KAUTH_FILESEC_NONE = 0,KAUTH_FILESEC_WANTED = 1,KAUTH_ENDIAN_HOST = 1,KAUTH_ENDIAN_DISK = 2,KAUTH_VNODE_READ_DATA = 2,KAUTH_VNODE_LIST_DIRECTORY = 2,KAUTH_VNODE_WRITE_DATA = 4,KAUTH_VNODE_ADD_FILE = 4,KAUTH_VNODE_EXECUTE = 8,KAUTH_VNODE_SEARCH = 8,KAUTH_VNODE_DELETE = 16,KAUTH_VNODE_APPEND_DATA = 32,KAUTH_VNODE_ADD_SUBDIRECTORY = 32,KAUTH_VNODE_DELETE_CHILD = 64,KAUTH_VNODE_READ_ATTRIBUTES = 128,KAUTH_VNODE_WRITE_ATTRIBUTES = 256,KAUTH_VNODE_READ_EXTATTRIBUTES = 512,KAUTH_VNODE_WRITE_EXTATTRIBUTES = 1024,KAUTH_VNODE_READ_SECURITY = 2048,KAUTH_VNODE_WRITE_SECURITY = 4096,KAUTH_VNODE_TAKE_OWNERSHIP = 8192,KAUTH_VNODE_CHANGE_OWNER = 8192,KAUTH_VNODE_SYNCHRONIZE = 1048576,KAUTH_VNODE_LINKTARGET = 33554432,KAUTH_VNODE_CHECKIMMUTABLE = 67108864,KAUTH_VNODE_ACCESS = 2147483648,KAUTH_VNODE_NOIMMUTABLE = 1073741824,KAUTH_VNODE_SEARCHBYANYONE = 536870912,KAUTH_VNODE_GENERIC_READ_BITS = 2690,KAUTH_VNODE_GENERIC_WRITE_BITS = 5492,KAUTH_VNODE_GENERIC_EXECUTE_BITS = 8,KAUTH_VNODE_GENERIC_ALL_BITS = 8190,KAUTH_VNODE_WRITE_RIGHTS = 100676980,};
enum MACRO_KDC {KDC_OPT_FORWARDABLE = 0x40000000,KDC_OPT_FORWARDED = 0x20000000,KDC_OPT_PROXIABLE = 0x10000000,KDC_OPT_PROXY = 0x8000000,KDC_OPT_ALLOW_POSTDATE = 0x4000000,KDC_OPT_POSTDATED = 0x2000000,KDC_OPT_RENEWABLE = 0x800000,KDC_OPT_REQUEST_ANONYMOUS = 0x20000,KDC_OPT_CANONICALIZE = 0x10000,KDC_OPT_DISABLE_TRANSITED_CHECK = 0x20,KDC_OPT_RENEWABLE_OK = 0x10,KDC_OPT_ENC_TKT_IN_SKEY = 0x8,KDC_OPT_RENEW = 0x2,KDC_OPT_VALIDATE = 0x1,KDC_TKT_COMMON_MASK = 0x54800000,};
enum MACRO_KDEBUG {KDEBUG_ENABLE_TRACE = 0x1,KDEBUG_ENABLE_ENTROPY = 0x2,KDEBUG_ENABLE_CHUD = 0x4,};
enum MACRO_KERN {KERN_SUCCESS = 0,KERN_INVALID_ADDRESS = 1,KERN_PROTECTION_FAILURE = 2,KERN_NO_SPACE = 3,KERN_INVALID_ARGUMENT = 4,KERN_FAILURE = 5,KERN_RESOURCE_SHORTAGE = 6,KERN_NOT_RECEIVER = 7,KERN_NO_ACCESS = 8,KERN_MEMORY_FAILURE = 9,KERN_MEMORY_ERROR = 10,KERN_ALREADY_IN_SET = 11,KERN_NOT_IN_SET = 12,KERN_NAME_EXISTS = 13,KERN_ABORTED = 14,KERN_INVALID_NAME = 15,KERN_INVALID_TASK = 16,KERN_INVALID_RIGHT = 17,KERN_INVALID_VALUE = 18,KERN_UREFS_OVERFLOW = 19,KERN_INVALID_CAPABILITY = 20,KERN_RIGHT_EXISTS = 21,KERN_INVALID_HOST = 22,KERN_MEMORY_PRESENT = 23,KERN_MEMORY_DATA_MOVED = 24,KERN_MEMORY_RESTART_COPY = 25,KERN_INVALID_PROCESSOR_SET = 26,KERN_POLICY_LIMIT = 27,KERN_INVALID_POLICY = 28,KERN_INVALID_OBJECT = 29,KERN_ALREADY_WAITING = 30,KERN_DEFAULT_SET = 31,KERN_EXCEPTION_PROTECTED = 32,KERN_INVALID_LEDGER = 33,KERN_INVALID_MEMORY_CONTROL = 34,KERN_INVALID_SECURITY = 35,KERN_NOT_DEPRESSED = 36,KERN_TERMINATED = 37,KERN_LOCK_SET_DESTROYED = 38,KERN_LOCK_UNSTABLE = 39,KERN_LOCK_OWNED = 40,KERN_LOCK_OWNED_SELF = 41,KERN_SEMAPHORE_DESTROYED = 42,KERN_RPC_SERVER_TERMINATED = 43,KERN_RPC_TERMINATE_ORPHAN = 44,KERN_RPC_CONTINUE_ORPHAN = 45,KERN_NOT_SUPPORTED = 46,KERN_NODE_DOWN = 47,KERN_NOT_WAITING = 48,KERN_OPERATION_TIMED_OUT = 49,KERN_CODESIGN_ERROR = 50,KERN_RETURN_MAX = 256,};
enum MACRO_KERN_CODE {KERN_CODE_SELECTOR = 0x8,KERN_DATA_SELECTOR = 0x10,};
enum MACRO_KERN_OSTYPE {KERN_OSTYPE = 1,KERN_OSRELEASE = 2,KERN_OSREV = 3,KERN_VERSION = 4,KERN_MAXVNODES = 5,KERN_MAXPROC = 6,KERN_MAXFILES = 7,KERN_ARGMAX = 8,KERN_SECURELVL = 9,KERN_HOSTNAME = 10,KERN_HOSTID = 11,KERN_CLOCKRATE = 12,KERN_VNODE = 13,KERN_PROC = 14,KERN_FILE = 15,KERN_PROF = 16,KERN_POSIX1 = 17,KERN_NGROUPS = 18,KERN_JOB_CONTROL = 19,KERN_SAVED_IDS = 20,KERN_BOOTTIME = 21,KERN_NISDOMAINNAME = 22,KERN_DOMAINNAME = 22,KERN_MAXPARTITIONS = 23,KERN_KDEBUG = 24,KERN_UPDATEINTERVAL = 25,KERN_OSRELDATE = 26,KERN_NTP_PLL = 27,KERN_BOOTFILE = 28,KERN_MAXFILESPERPROC = 29,KERN_MAXPROCPERUID = 30,KERN_DUMPDEV = 31,KERN_IPC = 32,KERN_DUMMY = 33,KERN_PS_STRINGS = 34,KERN_USRSTACK32 = 35,KERN_LOGSIGEXIT = 36,KERN_SYMFILE = 37,KERN_PROCARGS = 38,KERN_NETBOOT = 40,KERN_PANICINFO = 41,KERN_SYSV = 42,KERN_AFFINITY = 43,KERN_TRANSLATE = 44,KERN_CLASSIC = 44,KERN_EXEC = 45,KERN_CLASSICHANDLER = 45,KERN_AIOMAX = 46,KERN_AIOPROCMAX = 47,KERN_AIOTHREADS = 48,KERN_PROCARGS2 = 49,KERN_COREFILE = 50,KERN_COREDUMP = 51,KERN_SUGID_COREDUMP = 52,KERN_PROCDELAYTERM = 53,KERN_SHREG_PRIVATIZABLE = 54,KERN_LOW_PRI_WINDOW = 56,KERN_LOW_PRI_DELAY = 57,KERN_POSIX = 58,KERN_USRSTACK64 = 59,KERN_NX_PROTECTION = 60,KERN_TFP = 61,KERN_PROCNAME = 62,KERN_THALTSTACK = 63,KERN_SPECULATIVE_READS = 64,KERN_OSVERSION = 65,KERN_SAFEBOOT = 66,KERN_LCTX = 67,KERN_RAGEVNODE = 68,KERN_TTY = 69,KERN_CHECKOPENEVT = 70,KERN_THREADNAME = 71,KERN_MAXID = 72,KERN_USRSTACK = 59,KERN_RAGE_PROC = 1,KERN_RAGE_THREAD = 2,KERN_UNRAGE_PROC = 3,KERN_UNRAGE_THREAD = 4,KERN_OPENEVT_PROC = 1,KERN_UNOPENEVT_PROC = 2,KERN_TFP_POLICY = 1,KERN_TFP_POLICY_DENY = 0,KERN_TFP_POLICY_DEFAULT = 2,KERN_KDEFLAGS = 1,KERN_KDDFLAGS = 2,KERN_KDENABLE = 3,KERN_KDSETBUF = 4,KERN_KDGETBUF = 5,KERN_KDSETUP = 6,KERN_KDREMOVE = 7,KERN_KDSETREG = 8,KERN_KDGETREG = 9,KERN_KDREADTR = 10,KERN_KDPIDTR = 11,KERN_KDTHRMAP = 12,KERN_KDPIDEX = 14,KERN_KDSETRTCDEC = 15,KERN_KDGETENTROPY = 16,KERN_KDWRITETR = 17,KERN_KDWRITEMAP = 18,KERN_PANICINFO_MAXSIZE = 1,KERN_PANICINFO_IMAGE = 2,KERN_PROC_ALL = 0,KERN_PROC_PID = 1,KERN_PROC_PGRP = 2,KERN_PROC_SESSION = 3,KERN_PROC_TTY = 4,KERN_PROC_UID = 5,KERN_PROC_RUID = 6,KERN_PROC_LCID = 7,KERN_LCTX_ALL = 0,KERN_LCTX_LCID = 1,};
enum MACRO_KEV {KEV_CTL_SUBCLASS = 2,KEV_CTL_REGISTERED = 1,KEV_CTL_DEREGISTERED = 2,};
enum MACRO_KEVENTS {KEVENTS_ON = 1,};
enum MACRO_KEV_DL {KEV_DL_SUBCLASS = 2,KEV_DL_SIFFLAGS = 1,KEV_DL_SIFMETRICS = 2,KEV_DL_SIFMTU = 3,KEV_DL_SIFPHYS = 4,KEV_DL_SIFMEDIA = 5,KEV_DL_SIFGENERIC = 6,KEV_DL_ADDMULTI = 7,KEV_DL_DELMULTI = 8,KEV_DL_IF_ATTACHED = 9,KEV_DL_IF_DETACHING = 10,KEV_DL_IF_DETACHED = 11,KEV_DL_LINK_OFF = 12,KEV_DL_LINK_ON = 13,KEV_DL_PROTO_ATTACHED = 14,KEV_DL_PROTO_DETACHED = 15,KEV_DL_LINK_ADDRESS_CHANGED = 16,KEV_DL_WAKEFLAGS_CHANGED = 17,KEV_DL_IF_IDLE_ROUTE_REFCNT = 18,KEV_DL_IFCAP_CHANGED = 19,};
enum MACRO_KEV_INET {KEV_INET_SUBCLASS = 1,KEV_INET_NEW_ADDR = 1,KEV_INET_CHANGED_ADDR = 2,KEV_INET_ADDR_DELETED = 3,KEV_INET_SIFDSTADDR = 4,KEV_INET_SIFBRDADDR = 5,KEV_INET_SIFNETMASK = 6,KEV_INET_ARPCOLLISION = 7,KEV_INET_PORTINUSE = 8,};
enum MACRO_KEV_INET6 {KEV_INET6_SUBCLASS = 6,KEV_INET6_NEW_USER_ADDR = 1,KEV_INET6_CHANGED_ADDR = 2,KEV_INET6_ADDR_DELETED = 3,KEV_INET6_NEW_LL_ADDR = 4,KEV_INET6_NEW_RTADV_ADDR = 5,KEV_INET6_DEFROUTER = 6,};
enum MACRO_KEV_IPFW {KEV_IPFW_SUBCLASS = 1,KEV_IPFW_ADD = 1,KEV_IPFW_DEL = 2,KEV_IPFW_FLUSH = 3,KEV_IPFW_ENABLE = 4,};
enum MACRO_KEV_SNDSPACE {KEV_SNDSPACE = 4096,KEV_RECVSPACE = 32768,KEV_ANY_VENDOR = 0,KEV_ANY_CLASS = 0,KEV_ANY_SUBCLASS = 0,KEV_VENDOR_APPLE = 1,KEV_NETWORK_CLASS = 1,KEV_IOKIT_CLASS = 2,KEV_SYSTEM_CLASS = 3,KEV_APPLESHARE_CLASS = 4,KEV_FIREWALL_CLASS = 5,KEV_IEEE80211_CLASS = 6,KEV_VENDOR_CODE_MAX_STR_LEN = 200,};
enum MACRO_KEY {KEY_CODE_YES = 0x100,KEY_MIN = 0x101,KEY_BREAK = 0x101,KEY_SRESET = 0x158,KEY_RESET = 0x159,KEY_DOWN = 0x102,KEY_UP = 0x103,KEY_LEFT = 0x104,KEY_RIGHT = 0x105,KEY_HOME = 0x106,KEY_BACKSPACE = 0x107,KEY_F0 = 0x108,KEY_DL = 0x148,KEY_IL = 0x149,KEY_DC = 0x14A,KEY_IC = 0x14B,KEY_EIC = 0x14C,KEY_CLEAR = 0x14D,KEY_EOS = 0x14E,KEY_EOL = 0x14F,KEY_SF = 0x150,KEY_SR = 0x151,KEY_NPAGE = 0x152,KEY_PPAGE = 0x153,KEY_STAB = 0x154,KEY_CTAB = 0x155,KEY_CATAB = 0x156,KEY_ENTER = 0x157,KEY_PRINT = 0x15A,KEY_LL = 0x15B,KEY_A1 = 0x15C,KEY_A3 = 0x15D,KEY_B2 = 0x15E,KEY_C1 = 0x15F,KEY_C3 = 0x160,KEY_BTAB = 0x161,KEY_BEG = 0x162,KEY_CANCEL = 0x163,KEY_CLOSE = 0x164,KEY_COMMAND = 0x165,KEY_COPY = 0x166,KEY_CREATE = 0x167,KEY_END = 0x168,KEY_EXIT = 0x169,KEY_FIND = 0x16A,KEY_HELP = 0x16B,KEY_MARK = 0x16C,KEY_MESSAGE = 0x16D,KEY_MOVE = 0x16E,KEY_NEXT = 0x16F,KEY_OPEN = 0x170,KEY_OPTIONS = 0x171,KEY_PREVIOUS = 0x172,KEY_REDO = 0x173,KEY_REFERENCE = 0x174,KEY_REFRESH = 0x175,KEY_REPLACE = 0x176,KEY_RESTART = 0x177,KEY_RESUME = 0x178,KEY_SAVE = 0x179,KEY_SBEG = 0x17A,KEY_SCANCEL = 0x17B,KEY_SCOMMAND = 0x17C,KEY_SCOPY = 0x17D,KEY_SCREATE = 0x17E,KEY_SDC = 0x17F,KEY_SDL = 0x180,KEY_SELECT = 0x181,KEY_SEND = 0x182,KEY_SEOL = 0x183,KEY_SEXIT = 0x184,KEY_SFIND = 0x185,KEY_SHELP = 0x186,KEY_SHOME = 0x187,KEY_SIC = 0x188,KEY_SLEFT = 0x189,KEY_SMESSAGE = 0x18A,KEY_SMOVE = 0x18B,KEY_SNEXT = 0x18C,KEY_SOPTIONS = 0x18D,KEY_SPREVIOUS = 0x18E,KEY_SPRINT = 0x18F,KEY_SREDO = 0x190,KEY_SREPLACE = 0x191,KEY_SRIGHT = 0x192,KEY_SRSUME = 0x193,KEY_SSAVE = 0x194,KEY_SSUSPEND = 0x195,KEY_SUNDO = 0x196,KEY_SUSPEND = 0x197,KEY_UNDO = 0x198,KEY_MOUSE = 0x199,KEY_RESIZE = 0x19A,KEY_EVENT = 0x19B,KEY_MAX = 0x1FF,};
enum MACRO_KEYMAP {KEYMAP_SIZE = 256,};
enum MACRO_KEY_EX {KEY_EX = 0x10,KEY_SIG = 0x80,};
enum MACRO_KEY_SENDUP {KEY_SENDUP_ONE = 0,KEY_SENDUP_ALL = 1,KEY_SENDUP_REGISTERED = 2,};
enum MACRO_KIPC {KIPC_MAXSOCKBUF = 1,KIPC_SOCKBUF_WASTE = 2,KIPC_SOMAXCONN = 3,KIPC_MAX_LINKHDR = 4,KIPC_MAX_PROTOHDR = 5,KIPC_MAX_HDR = 6,KIPC_MAX_DATALEN = 7,KIPC_MBSTAT = 8,KIPC_NMBCLUSTERS = 9,KIPC_SOQLIMITCOMPAT = 10,};
enum MACRO_KLM {KLM_PROG = 100020,KLM_VERS = 1,KLM_TEST = 1,KLM_LOCK = 2,KLM_CANCEL = 3,KLM_UNLOCK = 4,};
enum MACRO_KMEM {KMEM_ALLOC_CODE = 19988480,KMEM_ALLOC_CODE_2 = 19988484,KMEM_FREE_CODE = 19988488,KMEM_FREE_CODE_2 = 19988492,};
enum MACRO_KMOD {KMOD_MAX_NAME = 64,KMOD_RETURN_SUCCESS = 0,KMOD_RETURN_FAILURE = 5,KMOD_INFO_VERSION = 1,};
enum MACRO_KRB5 {KRB5_DEPRECATED = 0,};
enum MACRO_KRB524 : __int64 {KRB524_BADKEY = -1750206208,KRB524_BADADDR = -1750206207,KRB524_BADPRINC = -1750206206,KRB524_BADREALM = -1750206205,KRB524_V4ERR = -1750206204,KRB524_ENCFULL = -1750206203,KRB524_DECEMPTY = -1750206202,KRB524_NOTRESP = -1750206201,KRB524_KRB4_DISABLED = -1750206200,};
enum MACRO_KRB5DES : __int64 {KRB5DES_BAD_KEYPAR = -1765328198,KRB5DES_WEAK_KEY = -1765328197,};
enum MACRO_KRB5KDC : __int64 {KRB5KDC_ERR_NONE = -1765328384,KRB5KDC_ERR_NAME_EXP = -1765328383,KRB5KDC_ERR_SERVICE_EXP = -1765328382,KRB5KDC_ERR_BAD_PVNO = -1765328381,KRB5KDC_ERR_C_OLD_MAST_KVNO = -1765328380,KRB5KDC_ERR_S_OLD_MAST_KVNO = -1765328379,KRB5KDC_ERR_C_PRINCIPAL_UNKNOWN = -1765328378,KRB5KDC_ERR_S_PRINCIPAL_UNKNOWN = -1765328377,KRB5KDC_ERR_PRINCIPAL_NOT_UNIQUE = -1765328376,KRB5KDC_ERR_NULL_KEY = -1765328375,KRB5KDC_ERR_CANNOT_POSTDATE = -1765328374,KRB5KDC_ERR_NEVER_VALID = -1765328373,KRB5KDC_ERR_POLICY = -1765328372,KRB5KDC_ERR_BADOPTION = -1765328371,KRB5KDC_ERR_ETYPE_NOSUPP = -1765328370,KRB5KDC_ERR_SUMTYPE_NOSUPP = -1765328369,KRB5KDC_ERR_PADATA_TYPE_NOSUPP = -1765328368,KRB5KDC_ERR_TRTYPE_NOSUPP = -1765328367,KRB5KDC_ERR_CLIENT_REVOKED = -1765328366,KRB5KDC_ERR_SERVICE_REVOKED = -1765328365,KRB5KDC_ERR_TGT_REVOKED = -1765328364,KRB5KDC_ERR_CLIENT_NOTYET = -1765328363,KRB5KDC_ERR_SERVICE_NOTYET = -1765328362,KRB5KDC_ERR_KEY_EXP = -1765328361,KRB5KDC_ERR_PREAUTH_FAILED = -1765328360,KRB5KDC_ERR_PREAUTH_REQUIRED = -1765328359,KRB5KDC_ERR_SERVER_NOMATCH = -1765328358,KRB5KDC_ERR_MUST_USE_USER2USER = -1765328357,KRB5KDC_ERR_PATH_NOT_ACCEPTED = -1765328356,KRB5KDC_ERR_SVC_UNAVAILABLE = -1765328355,};
enum MACRO_KRB5KDC_ERR : __int64 {KRB5KDC_ERR_CLIENT_NOT_TRUSTED = -1765328322,KRB5KDC_ERR_KDC_NOT_TRUSTED = -1765328321,KRB5KDC_ERR_INVALID_SIG = -1765328320,KRB5KDC_ERR_DH_KEY_PARAMETERS_NOT_ACCEPTED = -1765328319,KRB5KDC_ERR_CERTIFICATE_MISMATCH = -1765328318,};
enum MACRO_KRB5KDC_ERR_CANT : __int64 {KRB5KDC_ERR_CANT_VERIFY_CERTIFICATE = -1765328314,KRB5KDC_ERR_INVALID_CERTIFICATE = -1765328313,KRB5KDC_ERR_REVOKED_CERTIFICATE = -1765328312,KRB5KDC_ERR_REVOCATION_STATUS_UNKNOWN = -1765328311,KRB5KDC_ERR_REVOCATION_STATUS_UNAVAILABLE = -1765328310,KRB5KDC_ERR_CLIENT_NAME_MISMATCH = -1765328309,KRB5KDC_ERR_KDC_NAME_MISMATCH = -1765328308,KRB5KDC_ERR_INCONSISTENT_KEY_PURPOSE = -1765328307,KRB5KDC_ERR_DIGEST_IN_CERT_NOT_ACCEPTED = -1765328306,KRB5KDC_ERR_PA_CHECKSUM_MUST_BE_INCLUDED = -1765328305,KRB5KDC_ERR_DIGEST_IN_SIGNED_DATA_NOT_ACCEPTED = -1765328304,KRB5KDC_ERR_PUBLIC_KEY_ENCRYPTION_NOT_SUPPORTED = -1765328303,};
enum MACRO_KRB5KDC_ERR_WRONG : __int64 {KRB5KDC_ERR_WRONG_REALM = -1765328316,};
enum MACRO_KRB5KRB : __int64 {KRB5KRB_AP_ERR_BAD_INTEGRITY = -1765328353,KRB5KRB_AP_ERR_TKT_EXPIRED = -1765328352,KRB5KRB_AP_ERR_TKT_NYV = -1765328351,KRB5KRB_AP_ERR_REPEAT = -1765328350,KRB5KRB_AP_ERR_NOT_US = -1765328349,KRB5KRB_AP_ERR_BADMATCH = -1765328348,KRB5KRB_AP_ERR_SKEW = -1765328347,KRB5KRB_AP_ERR_BADADDR = -1765328346,KRB5KRB_AP_ERR_BADVERSION = -1765328345,KRB5KRB_AP_ERR_MSG_TYPE = -1765328344,KRB5KRB_AP_ERR_MODIFIED = -1765328343,KRB5KRB_AP_ERR_BADORDER = -1765328342,KRB5KRB_AP_ERR_ILL_CR_TKT = -1765328341,KRB5KRB_AP_ERR_BADKEYVER = -1765328340,KRB5KRB_AP_ERR_NOKEY = -1765328339,KRB5KRB_AP_ERR_MUT_FAIL = -1765328338,KRB5KRB_AP_ERR_BADDIRECTION = -1765328337,KRB5KRB_AP_ERR_METHOD = -1765328336,KRB5KRB_AP_ERR_BADSEQ = -1765328335,KRB5KRB_AP_ERR_INAPP_CKSUM = -1765328334,KRB5KRB_AP_PATH_NOT_ACCEPTED = -1765328333,KRB5KRB_ERR_RESPONSE_TOO_BIG = -1765328332,};
enum MACRO_KRB5KRB_AP : __int64 {KRB5KRB_AP_ERR_NO_TGT = -1765328317,};
enum MACRO_KRB5KRB_AP_ERR : __int64 {KRB5KRB_AP_ERR_USER_TO_USER_REQUIRED = -1765328315,};
enum MACRO_KRB5KRB_AP_ERR_V4 : __int64 {KRB5KRB_AP_ERR_V4_REPLY = -1765328165,};
enum MACRO_KRB5KRB_AP_WRONG : __int64 {KRB5KRB_AP_WRONG_PRINC = -1765328240,KRB5KRB_AP_ERR_TKT_INVALID = -1765328239,};
enum MACRO_KRB5KRB_ERR : __int64 {KRB5KRB_ERR_GENERIC = -1765328324,KRB5KRB_ERR_FIELD_TOOLONG = -1765328323,};
enum MACRO_KRB5PLACEHOLD : __int64 {KRB5PLACEHOLD_30 = -1765328354,};
enum MACRO_KRB5PLACEHOLD_53 : __int64 {KRB5PLACEHOLD_53 = -1765328331,KRB5PLACEHOLD_54 = -1765328330,KRB5PLACEHOLD_55 = -1765328329,KRB5PLACEHOLD_56 = -1765328328,KRB5PLACEHOLD_57 = -1765328327,KRB5PLACEHOLD_58 = -1765328326,KRB5PLACEHOLD_59 = -1765328325,};
enum MACRO_KRB5PLACEHOLD_82 : __int64 {KRB5PLACEHOLD_82 = -1765328302,KRB5PLACEHOLD_83 = -1765328301,KRB5PLACEHOLD_84 = -1765328300,KRB5PLACEHOLD_85 = -1765328299,KRB5PLACEHOLD_86 = -1765328298,KRB5PLACEHOLD_87 = -1765328297,KRB5PLACEHOLD_88 = -1765328296,KRB5PLACEHOLD_89 = -1765328295,KRB5PLACEHOLD_90 = -1765328294,KRB5PLACEHOLD_91 = -1765328293,KRB5PLACEHOLD_92 = -1765328292,KRB5PLACEHOLD_93 = -1765328291,KRB5PLACEHOLD_94 = -1765328290,KRB5PLACEHOLD_95 = -1765328289,KRB5PLACEHOLD_96 = -1765328288,KRB5PLACEHOLD_97 = -1765328287,KRB5PLACEHOLD_98 = -1765328286,KRB5PLACEHOLD_99 = -1765328285,KRB5PLACEHOLD_100 = -1765328284,KRB5PLACEHOLD_101 = -1765328283,KRB5PLACEHOLD_102 = -1765328282,KRB5PLACEHOLD_103 = -1765328281,KRB5PLACEHOLD_104 = -1765328280,KRB5PLACEHOLD_105 = -1765328279,KRB5PLACEHOLD_106 = -1765328278,KRB5PLACEHOLD_107 = -1765328277,KRB5PLACEHOLD_108 = -1765328276,KRB5PLACEHOLD_109 = -1765328275,KRB5PLACEHOLD_110 = -1765328274,KRB5PLACEHOLD_111 = -1765328273,KRB5PLACEHOLD_112 = -1765328272,KRB5PLACEHOLD_113 = -1765328271,KRB5PLACEHOLD_114 = -1765328270,KRB5PLACEHOLD_115 = -1765328269,KRB5PLACEHOLD_116 = -1765328268,KRB5PLACEHOLD_117 = -1765328267,KRB5PLACEHOLD_118 = -1765328266,KRB5PLACEHOLD_119 = -1765328265,KRB5PLACEHOLD_120 = -1765328264,KRB5PLACEHOLD_121 = -1765328263,KRB5PLACEHOLD_122 = -1765328262,KRB5PLACEHOLD_123 = -1765328261,KRB5PLACEHOLD_124 = -1765328260,KRB5PLACEHOLD_125 = -1765328259,KRB5PLACEHOLD_126 = -1765328258,KRB5PLACEHOLD_127 = -1765328257,};
enum MACRO_KRB5_BAD : __int64 {KRB5_BAD_ENCTYPE = -1765328196,KRB5_BAD_KEYSIZE = -1765328195,KRB5_BAD_MSIZE = -1765328194,KRB5_CC_TYPE_EXISTS = -1765328193,KRB5_KT_TYPE_EXISTS = -1765328192,KRB5_CC_IO = -1765328191,KRB5_FCC_PERM = -1765328190,KRB5_FCC_NOFILE = -1765328189,KRB5_FCC_INTERNAL = -1765328188,KRB5_CC_WRITE = -1765328187,KRB5_CC_NOMEM = -1765328186,KRB5_CC_FORMAT = -1765328185,KRB5_CC_NOT_KTYPE = -1765328184,KRB5_INVALID_FLAGS = -1765328183,KRB5_NO_2ND_TKT = -1765328182,KRB5_NOCREDS_SUPPLIED = -1765328181,KRB5_SENDAUTH_BADAUTHVERS = -1765328180,KRB5_SENDAUTH_BADAPPLVERS = -1765328179,KRB5_SENDAUTH_BADRESPONSE = -1765328178,KRB5_SENDAUTH_REJECTED = -1765328177,KRB5_PREAUTH_BAD_TYPE = -1765328176,KRB5_PREAUTH_NO_KEY = -1765328175,KRB5_PREAUTH_FAILED = -1765328174,KRB5_RCACHE_BADVNO = -1765328173,KRB5_CCACHE_BADVNO = -1765328172,KRB5_KEYTAB_BADVNO = -1765328171,KRB5_PROG_ATYPE_NOSUPP = -1765328170,KRB5_RC_REQUIRED = -1765328169,KRB5_ERR_BAD_HOSTNAME = -1765328168,KRB5_ERR_HOST_REALM_UNKNOWN = -1765328167,KRB5_SNAME_UNSUPP_NAMETYPE = -1765328166,};
enum MACRO_KRB5_ERR : __int64 {KRB5_ERR_RCSID = -1765328256,KRB5_LIBOS_BADLOCKFLAG = -1765328255,KRB5_LIBOS_CANTREADPWD = -1765328254,KRB5_LIBOS_BADPWDMATCH = -1765328253,KRB5_LIBOS_PWDINTR = -1765328252,KRB5_PARSE_ILLCHAR = -1765328251,KRB5_PARSE_MALFORMED = -1765328250,KRB5_CONFIG_CANTOPEN = -1765328249,KRB5_CONFIG_BADFORMAT = -1765328248,KRB5_CONFIG_NOTENUFSPACE = -1765328247,KRB5_BADMSGTYPE = -1765328246,KRB5_CC_BADNAME = -1765328245,KRB5_CC_UNKNOWN_TYPE = -1765328244,KRB5_CC_NOTFOUND = -1765328243,KRB5_CC_END = -1765328242,KRB5_NO_TKT_SUPPLIED = -1765328241,};
enum MACRO_KRB5_GC {KRB5_GC_USER_USER = 1,KRB5_GC_CACHED = 2,KRB5_PRINCIPAL_PARSE_NO_REALM = 1,KRB5_PRINCIPAL_PARSE_REQUIRE_REALM = 2,KRB5_PRINCIPAL_PARSE_ENTERPRISE = 4,KRB5_PRINCIPAL_UNPARSE_SHORT = 1,KRB5_PRINCIPAL_UNPARSE_NO_REALM = 2,KRB5_PRINCIPAL_UNPARSE_DISPLAY = 4,KRB5_REALM_BRANCH_CHAR = 46,KRB5_TGS_NAME_SIZE = 6,KRB5_RECVAUTH_SKIP_VERSION = 1,KRB5_RECVAUTH_BADAUTHVERS = 2,KRB5_GET_INIT_CREDS_OPT_TKT_LIFE = 1,KRB5_GET_INIT_CREDS_OPT_RENEW_LIFE = 2,KRB5_GET_INIT_CREDS_OPT_FORWARDABLE = 4,KRB5_GET_INIT_CREDS_OPT_PROXIABLE = 8,KRB5_GET_INIT_CREDS_OPT_ETYPE_LIST = 16,KRB5_GET_INIT_CREDS_OPT_ADDRESS_LIST = 32,KRB5_GET_INIT_CREDS_OPT_PREAUTH_LIST = 64,KRB5_GET_INIT_CREDS_OPT_SALT = 128,KRB5_GET_INIT_CREDS_OPT_CHG_PWD_PRMPT = 256,KRB5_GET_INIT_CREDS_OPT_CANONICALIZE = 512,KRB5_VERIFY_INIT_CREDS_OPT_AP_REQ_NOFAIL = 1,KRB5_PROMPT_TYPE_PASSWORD = 1,KRB5_PROMPT_TYPE_NEW_PASSWORD = 2,KRB5_PROMPT_TYPE_NEW_PASSWORD_AGAIN = 3,KRB5_PROMPT_TYPE_PREAUTH = 4,};
enum MACRO_KRB5_INT32 : __int64 {KRB5_INT32_MAX = 2147483647,KRB5_INT32_MIN = -2147483648,KRB5_INT16_MAX = 65535,KRB5_INT16_MIN = -65536,};
enum MACRO_KRB5_KDB : __int64 {KRB5_KDB_RCSID = -1780008448,KRB5_KDB_INUSE = -1780008447,KRB5_KDB_UK_SERROR = -1780008446,KRB5_KDB_UK_RERROR = -1780008445,KRB5_KDB_UNAUTH = -1780008444,KRB5_KDB_NOENTRY = -1780008443,KRB5_KDB_ILL_WILDCARD = -1780008442,KRB5_KDB_DB_INUSE = -1780008441,KRB5_KDB_DB_CHANGED = -1780008440,KRB5_KDB_TRUNCATED_RECORD = -1780008439,KRB5_KDB_RECURSIVELOCK = -1780008438,KRB5_KDB_NOTLOCKED = -1780008437,KRB5_KDB_BADLOCKMODE = -1780008436,KRB5_KDB_DBNOTINITED = -1780008435,KRB5_KDB_DBINITED = -1780008434,KRB5_KDB_ILLDIRECTION = -1780008433,KRB5_KDB_NOMASTERKEY = -1780008432,KRB5_KDB_BADMASTERKEY = -1780008431,KRB5_KDB_INVALIDKEYSIZE = -1780008430,KRB5_KDB_CANTREAD_STORED = -1780008429,KRB5_KDB_BADSTORED_MKEY = -1780008428,KRB5_KDB_CANTLOCK_DB = -1780008427,KRB5_KDB_DB_CORRUPT = -1780008426,KRB5_KDB_BAD_VERSION = -1780008425,KRB5_KDB_BAD_SALTTYPE = -1780008424,KRB5_KDB_BAD_ENCTYPE = -1780008423,KRB5_KDB_BAD_CREATEFLAGS = -1780008422,KRB5_KDB_NO_PERMITTED_KEY = -1780008421,KRB5_KDB_NO_MATCHING_KEY = -1780008420,KRB5_KDB_DBTYPE_NOTFOUND = -1780008419,KRB5_KDB_DBTYPE_NOSUP = -1780008418,KRB5_KDB_DBTYPE_INIT = -1780008417,KRB5_KDB_SERVER_INTERNAL_ERR = -1780008416,KRB5_KDB_ACCESS_ERROR = -1780008415,KRB5_KDB_INTERNAL_ERROR = -1780008414,KRB5_KDB_CONSTRAINT_VIOLATION = -1780008413,KRB5_LOG_CONV = -1780008412,KRB5_LOG_UNSTABLE = -1780008411,KRB5_LOG_CORRUPT = -1780008410,KRB5_LOG_ERROR = -1780008409,};
enum MACRO_KRB5_KEYUSAGE {KRB5_KEYUSAGE_AS_REQ_PA_ENC_TS = 1,KRB5_KEYUSAGE_KDC_REP_TICKET = 2,KRB5_KEYUSAGE_AS_REP_ENCPART = 3,KRB5_KEYUSAGE_TGS_REQ_AD_SESSKEY = 4,KRB5_KEYUSAGE_TGS_REQ_AD_SUBKEY = 5,KRB5_KEYUSAGE_TGS_REQ_AUTH_CKSUM = 6,KRB5_KEYUSAGE_TGS_REQ_AUTH = 7,KRB5_KEYUSAGE_TGS_REP_ENCPART_SESSKEY = 8,KRB5_KEYUSAGE_TGS_REP_ENCPART_SUBKEY = 9,KRB5_KEYUSAGE_AP_REQ_AUTH_CKSUM = 10,KRB5_KEYUSAGE_AP_REQ_AUTH = 11,KRB5_KEYUSAGE_AP_REP_ENCPART = 12,KRB5_KEYUSAGE_KRB_PRIV_ENCPART = 13,KRB5_KEYUSAGE_KRB_CRED_ENCPART = 14,KRB5_KEYUSAGE_KRB_SAFE_CKSUM = 15,KRB5_KEYUSAGE_APP_DATA_ENCRYPT = 16,KRB5_KEYUSAGE_APP_DATA_CKSUM = 17,KRB5_KEYUSAGE_KRB_ERROR_CKSUM = 18,KRB5_KEYUSAGE_AD_KDCISSUED_CKSUM = 19,KRB5_KEYUSAGE_AD_MTE = 20,KRB5_KEYUSAGE_AD_ITE = 21,KRB5_KEYUSAGE_GSS_TOK_MIC = 22,KRB5_KEYUSAGE_GSS_TOK_WRAP_INTEG = 23,KRB5_KEYUSAGE_GSS_TOK_WRAP_PRIV = 24,KRB5_KEYUSAGE_PA_SAM_CHALLENGE_CKSUM = 25,KRB5_KEYUSAGE_PA_SAM_CHALLENGE_TRACKID = 26,KRB5_KEYUSAGE_PA_SAM_RESPONSE = 27,KRB5_KEYUSAGE_PA_REFERRAL = 26,};
enum MACRO_KRB5_NT : __int64 {KRB5_NT_UNKNOWN = 0,KRB5_NT_PRINCIPAL = 1,KRB5_NT_SRV_INST = 2,KRB5_NT_SRV_HST = 3,KRB5_NT_SRV_XHST = 4,KRB5_NT_UID = 5,KRB5_NT_X500_PRINCIPAL = 6,KRB5_NT_SMTP_NAME = 7,KRB5_NT_ENTERPRISE_PRINCIPAL = 10,KRB5_NT_MS_PRINCIPAL = -128,KRB5_NT_MS_PRINCIPAL_AND_ID = -129,KRB5_NT_ENT_PRINCIPAL_AND_ID = -130,};
enum MACRO_KRB5_PRINC : __int64 {KRB5_PRINC_NOMATCH = -1765328238,KRB5_KDCREP_MODIFIED = -1765328237,KRB5_KDCREP_SKEW = -1765328236,KRB5_IN_TKT_REALM_MISMATCH = -1765328235,KRB5_PROG_ETYPE_NOSUPP = -1765328234,KRB5_PROG_KEYTYPE_NOSUPP = -1765328233,KRB5_WRONG_ETYPE = -1765328232,KRB5_PROG_SUMTYPE_NOSUPP = -1765328231,KRB5_REALM_UNKNOWN = -1765328230,KRB5_SERVICE_UNKNOWN = -1765328229,KRB5_KDC_UNREACH = -1765328228,KRB5_NO_LOCALNAME = -1765328227,KRB5_MUTUAL_FAILED = -1765328226,KRB5_RC_TYPE_EXISTS = -1765328225,KRB5_RC_MALLOC = -1765328224,KRB5_RC_TYPE_NOTFOUND = -1765328223,KRB5_RC_UNKNOWN = -1765328222,KRB5_RC_REPLAY = -1765328221,KRB5_RC_IO = -1765328220,KRB5_RC_NOIO = -1765328219,KRB5_RC_PARSE = -1765328218,KRB5_RC_IO_EOF = -1765328217,KRB5_RC_IO_MALLOC = -1765328216,KRB5_RC_IO_PERM = -1765328215,KRB5_RC_IO_IO = -1765328214,KRB5_RC_IO_UNKNOWN = -1765328213,KRB5_RC_IO_SPACE = -1765328212,KRB5_TRANS_CANTOPEN = -1765328211,KRB5_TRANS_BADFORMAT = -1765328210,KRB5_LNAME_CANTOPEN = -1765328209,KRB5_LNAME_NOTRANS = -1765328208,KRB5_LNAME_BADFORMAT = -1765328207,KRB5_CRYPTO_INTERNAL = -1765328206,KRB5_KT_BADNAME = -1765328205,KRB5_KT_UNKNOWN_TYPE = -1765328204,KRB5_KT_NOTFOUND = -1765328203,KRB5_KT_END = -1765328202,KRB5_KT_NOWRITE = -1765328201,KRB5_KT_IOERR = -1765328200,KRB5_NO_TKT_IN_RLM = -1765328199,};
enum MACRO_KRB5_PVNO : __int64 {KRB5_PVNO = 5,KRB5_AS_REQ = 10,KRB5_AS_REP = 11,KRB5_TGS_REQ = 12,KRB5_TGS_REP = 13,KRB5_AP_REQ = 14,KRB5_AP_REP = 15,KRB5_SAFE = 20,KRB5_PRIV = 21,KRB5_CRED = 22,KRB5_ERROR = 30,KRB5_LRQ_NONE = 0,KRB5_LRQ_ALL_LAST_TGT = 1,KRB5_LRQ_ONE_LAST_TGT = -1,KRB5_LRQ_ALL_LAST_INITIAL = 2,KRB5_LRQ_ONE_LAST_INITIAL = -2,KRB5_LRQ_ALL_LAST_TGT_ISSUED = 3,KRB5_LRQ_ONE_LAST_TGT_ISSUED = -3,KRB5_LRQ_ALL_LAST_RENEWAL = 4,KRB5_LRQ_ONE_LAST_RENEWAL = -4,KRB5_LRQ_ALL_LAST_REQ = 5,KRB5_LRQ_ONE_LAST_REQ = -5,KRB5_LRQ_ALL_PW_EXPTIME = 6,KRB5_LRQ_ONE_PW_EXPTIME = -6,KRB5_PADATA_NONE = 0,KRB5_PADATA_AP_REQ = 1,KRB5_PADATA_TGS_REQ = 1,KRB5_PADATA_ENC_TIMESTAMP = 2,KRB5_PADATA_PW_SALT = 3,KRB5_PADATA_ENC_UNIX_TIME = 5,KRB5_PADATA_ENC_SANDIA_SECURID = 6,KRB5_PADATA_SESAME = 7,KRB5_PADATA_OSF_DCE = 8,KRB5_CYBERSAFE_SECUREID = 9,KRB5_PADATA_AFS3_SALT = 10,KRB5_PADATA_ETYPE_INFO = 11,KRB5_PADATA_SAM_CHALLENGE = 12,KRB5_PADATA_SAM_RESPONSE = 13,KRB5_PADATA_PK_AS_REQ_OLD = 14,KRB5_PADATA_PK_AS_REP_OLD = 15,KRB5_PADATA_PK_AS_REQ = 16,KRB5_PADATA_PK_AS_REP = 17,KRB5_PADATA_ETYPE_INFO2 = 19,KRB5_PADATA_USE_SPECIFIED_KVNO = 20,KRB5_PADATA_SAM_REDIRECT = 21,KRB5_PADATA_GET_FROM_TYPED_DATA = 22,KRB5_PADATA_REFERRAL = 25,KRB5_PADATA_SAM_CHALLENGE_2 = 30,KRB5_PADATA_SAM_RESPONSE_2 = 31,KRB5_PADATA_PK_AS_09_BINDING = 132,KRB5_SAM_USE_SAD_AS_KEY = 2147483648,KRB5_SAM_SEND_ENCRYPTED_SAD = 1073741824,KRB5_SAM_MUST_PK_ENCRYPT_SAD = 536870912,KRB5_PADATA_DASS = 16,KRB5_DOMAIN_X500_COMPRESS = 1,KRB5_ALTAUTH_ATT_CHALLENGE_RESPONSE = 64,KRB5_AUTHDATA_IF_RELEVANT = 1,KRB5_AUTHDATA_KDC_ISSUED = 4,KRB5_AUTHDATA_AND_OR = 5,KRB5_AUTHDATA_MANDATORY_FOR_KDC = 8,KRB5_AUTHDATA_INITIAL_VERIFIED_CAS = 9,KRB5_AUTHDATA_OSF_DCE = 64,KRB5_AUTHDATA_SESAME = 65,KRB5_KPASSWD_SUCCESS = 0,KRB5_KPASSWD_MALFORMED = 1,KRB5_KPASSWD_HARDERROR = 2,KRB5_KPASSWD_AUTHERROR = 3,KRB5_KPASSWD_SOFTERROR = 4,KRB5_KPASSWD_ACCESSDENIED = 5,KRB5_KPASSWD_BAD_VERSION = 6,KRB5_KPASSWD_INITIAL_FLAG_NEEDED = 7,KRB5_AUTH_CONTEXT_DO_TIME = 1,KRB5_AUTH_CONTEXT_RET_TIME = 2,KRB5_AUTH_CONTEXT_DO_SEQUENCE = 4,KRB5_AUTH_CONTEXT_RET_SEQUENCE = 8,KRB5_AUTH_CONTEXT_PERMIT_ALL = 16,KRB5_AUTH_CONTEXT_USE_SUBKEY = 32,KRB5_AUTH_CONTEXT_GENERATE_LOCAL_ADDR = 1,KRB5_AUTH_CONTEXT_GENERATE_REMOTE_ADDR = 2,KRB5_AUTH_CONTEXT_GENERATE_LOCAL_FULL_ADDR = 4,KRB5_AUTH_CONTEXT_GENERATE_REMOTE_FULL_ADDR = 8,KRB5_TC_MATCH_TIMES = 1,KRB5_TC_MATCH_IS_SKEY = 2,KRB5_TC_MATCH_FLAGS = 4,KRB5_TC_MATCH_TIMES_EXACT = 8,KRB5_TC_MATCH_FLAGS_EXACT = 16,KRB5_TC_MATCH_AUTHDATA = 32,KRB5_TC_MATCH_SRV_NAMEONLY = 64,KRB5_TC_MATCH_2ND_TKT = 128,KRB5_TC_MATCH_KTYPE = 256,KRB5_TC_SUPPORTED_KTYPES = 512,KRB5_TC_OPENCLOSE = 1,KRB5_TC_NOTICKET = 2,};
enum MACRO_KRB5_REALM : __int64 {KRB5_REALM_CANT_RESOLVE = -1765328164,KRB5_TKT_NOT_FORWARDABLE = -1765328163,KRB5_FWD_BAD_PRINCIPAL = -1765328162,KRB5_GET_IN_TKT_LOOP = -1765328161,KRB5_CONFIG_NODEFREALM = -1765328160,KRB5_SAM_UNSUPPORTED = -1765328159,KRB5_SAM_INVALID_ETYPE = -1765328158,KRB5_SAM_NO_CHECKSUM = -1765328157,KRB5_SAM_BAD_CHECKSUM = -1765328156,KRB5_KT_NAME_TOOLONG = -1765328155,KRB5_KT_KVNONOTFOUND = -1765328154,KRB5_APPL_EXPIRED = -1765328153,KRB5_LIB_EXPIRED = -1765328152,KRB5_CHPW_PWDNULL = -1765328151,KRB5_CHPW_FAIL = -1765328150,KRB5_KT_FORMAT = -1765328149,KRB5_NOPERM_ETYPE = -1765328148,KRB5_CONFIG_ETYPE_NOSUPP = -1765328147,KRB5_OBSOLETE_FN = -1765328146,KRB5_EAI_FAIL = -1765328145,KRB5_EAI_NODATA = -1765328144,KRB5_EAI_NONAME = -1765328143,KRB5_EAI_SERVICE = -1765328142,KRB5_ERR_NUMERIC_REALM = -1765328141,KRB5_ERR_BAD_S2K_PARAMS = -1765328140,KRB5_ERR_NO_SERVICE = -1765328139,KRB5_CC_READONLY = -1765328138,KRB5_CC_NOSUPP = -1765328137,KRB5_DELTAT_BADFORMAT = -1765328136,KRB5_PLUGIN_NO_HANDLE = -1765328135,KRB5_PLUGIN_OP_NOTSUPP = -1765328134,};
enum MACRO_KU {KU_DIGITAL_SIGNATURE = 0x80,KU_NON_REPUDIATION = 0x40,KU_KEY_ENCIPHERMENT = 0x20,KU_DATA_ENCIPHERMENT = 0x10,KU_KEY_AGREEMENT = 0x8,KU_KEY_CERT_SIGN = 0x4,KU_CRL_SIGN = 0x2,KU_ENCIPHER_ONLY = 0x1,KU_DECIPHER_ONLY = 0x8000,};
enum MACRO_KV5M : __int64 {KV5M_NONE = -1760647424,KV5M_PRINCIPAL = -1760647423,KV5M_DATA = -1760647422,KV5M_KEYBLOCK = -1760647421,KV5M_CHECKSUM = -1760647420,KV5M_ENCRYPT_BLOCK = -1760647419,KV5M_ENC_DATA = -1760647418,KV5M_CRYPTOSYSTEM_ENTRY = -1760647417,KV5M_CS_TABLE_ENTRY = -1760647416,KV5M_CHECKSUM_ENTRY = -1760647415,KV5M_AUTHDATA = -1760647414,KV5M_TRANSITED = -1760647413,KV5M_ENC_TKT_PART = -1760647412,KV5M_TICKET = -1760647411,KV5M_AUTHENTICATOR = -1760647410,KV5M_TKT_AUTHENT = -1760647409,KV5M_CREDS = -1760647408,KV5M_LAST_REQ_ENTRY = -1760647407,KV5M_PA_DATA = -1760647406,KV5M_KDC_REQ = -1760647405,KV5M_ENC_KDC_REP_PART = -1760647404,KV5M_KDC_REP = -1760647403,KV5M_ERROR = -1760647402,KV5M_AP_REQ = -1760647401,KV5M_AP_REP = -1760647400,KV5M_AP_REP_ENC_PART = -1760647399,KV5M_RESPONSE = -1760647398,KV5M_SAFE = -1760647397,KV5M_PRIV = -1760647396,KV5M_PRIV_ENC_PART = -1760647395,KV5M_CRED = -1760647394,KV5M_CRED_INFO = -1760647393,KV5M_CRED_ENC_PART = -1760647392,KV5M_PWD_DATA = -1760647391,KV5M_ADDRESS = -1760647390,KV5M_KEYTAB_ENTRY = -1760647389,KV5M_CONTEXT = -1760647388,KV5M_OS_CONTEXT = -1760647387,KV5M_ALT_METHOD = -1760647386,KV5M_ETYPE_INFO_ENTRY = -1760647385,KV5M_DB_CONTEXT = -1760647384,KV5M_AUTH_CONTEXT = -1760647383,KV5M_KEYTAB = -1760647382,KV5M_RCACHE = -1760647381,KV5M_CCACHE = -1760647380,KV5M_PREAUTH_OPS = -1760647379,KV5M_SAM_CHALLENGE = -1760647378,KV5M_SAM_CHALLENGE_2 = -1760647377,KV5M_SAM_KEY = -1760647376,KV5M_ENC_SAM_RESPONSE_ENC = -1760647375,KV5M_ENC_SAM_RESPONSE_ENC_2 = -1760647374,KV5M_SAM_RESPONSE = -1760647373,KV5M_SAM_RESPONSE_2 = -1760647372,KV5M_PREDICTED_SAM_RESPONSE = -1760647371,KV5M_PASSWD_PHRASE_ELEMENT = -1760647370,KV5M_GSS_OID = -1760647369,KV5M_GSS_QUEUE = -1760647368,};
enum MACRO_L {L_tmpnam = 1024,};
enum MACRO_LBER : __int64 {LBER_CLASS_UNIVERSAL = 0x0,LBER_CLASS_APPLICATION = 0x40,LBER_CLASS_CONTEXT = 0x80,LBER_CLASS_PRIVATE = 0xC0,LBER_CLASS_MASK = 0xC0,LBER_PRIMITIVE = 0x0,LBER_CONSTRUCTED = 0x20,LBER_ENCODING_MASK = 0x20,LBER_BIG_TAG_MASK = 0x1F,LBER_MORE_TAG_MASK = 0x80,LBER_ERROR = 0xFFFFFFFFFFFFFFFF,LBER_DEFAULT = 0xFFFFFFFFFFFFFFFF,LBER_BOOLEAN = 0x1,LBER_INTEGER = 0x2,LBER_BITSTRING = 0x3,LBER_OCTETSTRING = 0x4,LBER_NULL = 0x5,LBER_ENUMERATED = 0xA,LBER_SEQUENCE = 0x30,LBER_SET = 0x31,LBER_USE_DER = 0x1,LBER_OPT_BER_OPTIONS = 0x1,LBER_OPT_BER_DEBUG = 0x2,LBER_OPT_BER_REMAINING_BYTES = 0x3,LBER_OPT_BER_TOTAL_BYTES = 0x4,LBER_OPT_BER_BYTES_TO_WRITE = 0x5,LBER_OPT_BER_MEMCTX = 0x6,LBER_OPT_DEBUG_LEVEL = 0x2,LBER_OPT_REMAINING_BYTES = 0x3,LBER_OPT_TOTAL_BYTES = 0x4,LBER_OPT_BYTES_TO_WRITE = 0x5,LBER_OPT_LOG_PRINT_FN = 0x8001,LBER_OPT_MEMORY_FNS = 0x8002,LBER_OPT_ERROR_FN = 0x8003,LBER_OPT_LOG_PRINT_FILE = 0x8004,LBER_OPT_MEMORY_INUSE = 0x8005,LBER_OPT_LOG_PROC = 0x8006,LBER_SB_OPT_GET_FD = 0x1,LBER_SB_OPT_SET_FD = 0x2,LBER_SB_OPT_HAS_IO = 0x3,LBER_SB_OPT_SET_NONBLOCK = 0x4,LBER_SB_OPT_GET_SSL = 0x7,LBER_SB_OPT_DATA_READY = 0x8,LBER_SB_OPT_SET_READAHEAD = 0x9,LBER_SB_OPT_DRAIN = 0xA,LBER_SB_OPT_NEEDS_READ = 0xB,LBER_SB_OPT_NEEDS_WRITE = 0xC,LBER_SB_OPT_GET_MAX_INCOMING = 0xD,LBER_SB_OPT_SET_MAX_INCOMING = 0xE,LBER_SB_OPT_UNGET_BUF = 0xF,LBER_SB_OPT_OPT_MAX = 0xF,LBER_SBIOD_LEVEL_PROVIDER = 0xA,LBER_SBIOD_LEVEL_TRANSPORT = 0x14,LBER_SBIOD_LEVEL_APPLICATION = 0x1E,LBER_OPT_SOCKBUF_DESC = 0x1000,LBER_OPT_SOCKBUF_OPTIONS = 0x1001,LBER_OPT_SOCKBUF_DEBUG = 0x1002,LBER_OPT_OFF = 0x0,LBER_OPT_SUCCESS = 0x0,LBER_OPT_ERROR = 0xFFFFFFFFFFFFFFFF,LBER_BV_ALLOC = 0x1,LBER_BV_NOTERM = 0x2,LBER_BV_STRING = 0x4,LBER_FLUSH_FREE_NEVER = 0x0,LBER_FLUSH_FREE_ON_SUCCESS = 0x1,LBER_FLUSH_FREE_ON_ERROR = 0x2,LBER_FLUSH_FREE_ALWAYS = 0x3,LBER_ERROR_NONE = 0x0,LBER_ERROR_PARAM = 0x1,LBER_ERROR_MEMORY = 0x2,};
enum MACRO_LC {LC_ALL = 0,LC_COLLATE = 1,LC_CTYPE = 2,LC_MONETARY = 3,LC_NUMERIC = 4,LC_TIME = 5,LC_MESSAGES = 6,};
enum MACRO_LCD {LCD_TIME_SYNC_OPT = 1,};
enum MACRO_LCRTBS {LCRTBS = 1,LPRTERA = 2,LCRTERA = 4,LTILDE = 8,LMDMBUF = 16,LLITOUT = 32,LTOSTOP = 64,LFLUSHO = 128,LNOHANG = 256,LCRTKIL = 1024,LPASS8 = 2048,LCTLECH = 4096,LPENDIN = 8192,LDECCTQ = 16384,LNOFLSH = 32768,OTIOCCONS = 536900706,};
enum MACRO_LC_COLLATE {LC_COLLATE_MASK = 1,LC_CTYPE_MASK = 2,LC_MESSAGES_MASK = 4,LC_MONETARY_MASK = 8,LC_NUMERIC_MASK = 16,LC_TIME_MASK = 32,};
enum MACRO_LC_GLOBAL : __int64 {LC_GLOBAL_LOCALE = -1,};
enum MACRO_LC_REQ : __int64 {LC_REQ_DYLD = 0x80000000,LC_SEGMENT = 0x1,LC_SYMTAB = 0x2,LC_SYMSEG = 0x3,LC_THREAD = 0x4,LC_UNIXTHREAD = 0x5,LC_LOADFVMLIB = 0x6,LC_IDFVMLIB = 0x7,LC_IDENT = 0x8,LC_FVMFILE = 0x9,LC_PREPAGE = 0xA,LC_DYSYMTAB = 0xB,LC_LOAD_DYLIB = 0xC,LC_ID_DYLIB = 0xD,LC_LOAD_DYLINKER = 0xE,LC_ID_DYLINKER = 0xF,LC_PREBOUND_DYLIB = 0x10,LC_ROUTINES = 0x11,LC_SUB_FRAMEWORK = 0x12,LC_SUB_UMBRELLA = 0x13,LC_SUB_CLIENT = 0x14,LC_SUB_LIBRARY = 0x15,LC_TWOLEVEL_HINTS = 0x16,LC_PREBIND_CKSUM = 0x17,LC_LOAD_WEAK_DYLIB = 0x80000018,LC_SEGMENT_64 = 0x19,LC_ROUTINES_64 = 0x1A,LC_UUID = 0x1B,LC_RPATH = 0x8000001C,LC_CODE_SIGNATURE = 0x1D,LC_SEGMENT_SPLIT_INFO = 0x1E,LC_REEXPORT_DYLIB = 0x8000001F,LC_LAZY_LOAD_DYLIB = 0x20,LC_ENCRYPTION_INFO = 0x21,LC_DYLD_INFO = 0x22,LC_DYLD_INFO_ONLY = 0x80000022,LC_LOAD_UPWARD_DYLIB = 0x80000023,LC_VERSION_MIN_MACOSX = 0x24,LC_VERSION_MIN_IPHONEOS = 0x25,LC_FUNCTION_STARTS = 0x26,LC_DYLD_ENVIRONMENT = 0x27,};
enum MACRO_LDAP {LDAP_VENDOR_VERSION = 20423,LDAP_VENDOR_VERSION_MAJOR = 2,LDAP_VENDOR_VERSION_MINOR = 4,LDAP_VENDOR_VERSION_PATCH = 23,LDAP_API_FEATURE_X_OPENLDAP_THREAD_SAFE = 1,LDAP_VERSION1 = 1,LDAP_VERSION2 = 2,LDAP_VERSION3 = 3,LDAP_VERSION_MIN = 2,LDAP_VERSION = 2,LDAP_VERSION_MAX = 3,LDAP_DEPRECATED = 1,LDAP_API_VERSION = 3001,LDAP_API_FEATURE_X_OPENLDAP = 20423,LDAP_PORT = 389,};
enum MACRO_LDAPS {LDAPS_PORT = 636,};
enum MACRO_LDAP_FILTER {LDAP_FILTER_EXT_MATCH = 0xA9,};
enum MACRO_LDAP_MAXINT : __int64 {LDAP_MAXINT = 2147483647,LDAP_OPT_API_INFO = 0,LDAP_OPT_DESC = 1,LDAP_OPT_DEREF = 2,LDAP_OPT_SIZELIMIT = 3,LDAP_OPT_TIMELIMIT = 4,LDAP_OPT_REFERRALS = 8,LDAP_OPT_RESTART = 9,LDAP_OPT_PROTOCOL_VERSION = 17,LDAP_OPT_SERVER_CONTROLS = 18,LDAP_OPT_CLIENT_CONTROLS = 19,LDAP_OPT_API_FEATURE_INFO = 21,LDAP_OPT_HOST_NAME = 48,LDAP_OPT_RESULT_CODE = 49,LDAP_OPT_ERROR_NUMBER = 49,LDAP_OPT_DIAGNOSTIC_MESSAGE = 50,LDAP_OPT_ERROR_STRING = 50,LDAP_OPT_MATCHED_DN = 51,LDAP_OPT_SSPI_FLAGS = 146,LDAP_OPT_SIGN = 149,LDAP_OPT_ENCRYPT = 150,LDAP_OPT_SASL_METHOD = 151,LDAP_OPT_SECURITY_CONTEXT = 153,LDAP_OPT_API_EXTENSION_BASE = 16384,LDAP_OPT_DEBUG_LEVEL = 20481,LDAP_OPT_TIMEOUT = 20482,LDAP_OPT_REFHOPLIMIT = 20483,LDAP_OPT_NETWORK_TIMEOUT = 20485,LDAP_OPT_URI = 20486,LDAP_OPT_REFERRAL_URLS = 20487,LDAP_OPT_SOCKBUF = 20488,LDAP_OPT_DEFBASE = 20489,LDAP_OPT_CONNECT_ASYNC = 20496,LDAP_OPT_CONNECT_CB = 20497,LDAP_OPT_X_TLS = 24576,LDAP_OPT_X_TLS_CTX = 24577,LDAP_OPT_X_TLS_CACERTFILE = 24578,LDAP_OPT_X_TLS_CACERTDIR = 24579,LDAP_OPT_X_TLS_CERTFILE = 24580,LDAP_OPT_X_TLS_KEYFILE = 24581,LDAP_OPT_X_TLS_REQUIRE_CERT = 24582,LDAP_OPT_X_TLS_PROTOCOL_MIN = 24583,LDAP_OPT_X_TLS_CIPHER_SUITE = 24584,LDAP_OPT_X_TLS_RANDOM_FILE = 24585,LDAP_OPT_X_TLS_SSL_CTX = 24586,LDAP_OPT_X_TLS_CRLCHECK = 24587,LDAP_OPT_X_TLS_CONNECT_CB = 24588,LDAP_OPT_X_TLS_CONNECT_ARG = 24589,LDAP_OPT_X_TLS_DHFILE = 24590,LDAP_OPT_X_TLS_NEWCTX = 24591,LDAP_OPT_X_TLS_CRLFILE = 24592,LDAP_OPT_X_TLS_PASSPHRASE_TOOL = 24831,LDAP_OPT_X_TLS_NEVER = 0,LDAP_OPT_X_TLS_HARD = 1,LDAP_OPT_X_TLS_DEMAND = 2,LDAP_OPT_X_TLS_ALLOW = 3,LDAP_OPT_X_TLS_TRY = 4,LDAP_OPT_X_TLS_CRL_NONE = 0,LDAP_OPT_X_TLS_CRL_PEER = 1,LDAP_OPT_X_TLS_CRL_ALL = 2,LDAP_OPT_X_TLS_PROTOCOL_SSL2 = 512,LDAP_OPT_X_TLS_PROTOCOL_SSL3 = 768,LDAP_OPT_X_TLS_PROTOCOL_TLS1_0 = 769,LDAP_OPT_X_TLS_PROTOCOL_TLS1_1 = 770,LDAP_OPT_X_TLS_PROTOCOL_TLS1_2 = 771,LDAP_OPT_X_SASL_MECH = 24832,LDAP_OPT_X_SASL_REALM = 24833,LDAP_OPT_X_SASL_AUTHCID = 24834,LDAP_OPT_X_SASL_AUTHZID = 24835,LDAP_OPT_X_SASL_SSF = 24836,LDAP_OPT_X_SASL_SSF_EXTERNAL = 24837,LDAP_OPT_X_SASL_SECPROPS = 24838,LDAP_OPT_X_SASL_SSF_MIN = 24839,LDAP_OPT_X_SASL_SSF_MAX = 24840,LDAP_OPT_X_SASL_MAXBUFSIZE = 24841,LDAP_OPT_X_SASL_MECHLIST = 24842,LDAP_OPT_X_SASL_NOCANON = 24843,LDAP_OPT_X_SASL_USERNAME = 24844,LDAP_OPT_X_SASL_GSS_CREDS = 24845,LDAP_OPT_X_GSSAPI_DO_NOT_FREE_CONTEXT = 25088,LDAP_OPT_X_GSSAPI_ALLOW_REMOTE_PRINCIPAL = 25089,LDAP_OPT_X_KEEPALIVE_IDLE = 25344,LDAP_OPT_X_KEEPALIVE_PROBES = 25345,LDAP_OPT_X_KEEPALIVE_INTERVAL = 25346,LDAP_OPT_PRIVATE_EXTENSION_BASE = 28672,LDAP_OPT_NOREVERSE_LOOKUP = 24843,LDAP_OPT_SUCCESS = 0,LDAP_OPT_ERROR = -1,LDAP_OPT_OFF = 0,LDAP_API_INFO_VERSION = 1,LDAP_FEATURE_INFO_VERSION = 1,LDAP_SYNC_NONE = 0,LDAP_SYNC_REFRESH_ONLY = 1,LDAP_SYNC_RESERVED = 2,LDAP_SYNC_REFRESH_AND_PERSIST = 3,LDAP_SYNC_REFRESH_PRESENTS = 0,LDAP_SYNC_REFRESH_DELETES = 1,LDAP_TAG_SYNC_NEW_COOKIE = 128,LDAP_TAG_SYNC_REFRESH_DELETE = 161,LDAP_TAG_SYNC_REFRESH_PRESENT = 162,LDAP_TAG_SYNC_ID_SET = 163,LDAP_TAG_SYNC_COOKIE = 4,LDAP_TAG_REFRESHDELETES = 1,LDAP_TAG_REFRESHDONE = 1,LDAP_TAG_RELOAD_HINT = 1,LDAP_SYNC_PRESENT = 0,LDAP_SYNC_ADD = 1,LDAP_SYNC_MODIFY = 2,LDAP_SYNC_DELETE = 3,LDAP_SYNC_NEW_COOKIE = 4,LDAP_CHAINING_PREFERRED = 0,LDAP_CHAINING_REQUIRED = 1,LDAP_REFERRALS_PREFERRED = 2,LDAP_REFERRALS_REQUIRED = 3,LDAP_SEARCH_FLAG_DOMAIN_SCOPE = 1,LDAP_SEARCH_FLAG_PHANTOM_ROOT = 2,LDAP_CONTROL_PERSIST_ENTRY_CHANGE_ADD = 1,LDAP_CONTROL_PERSIST_ENTRY_CHANGE_DELETE = 2,LDAP_CONTROL_PERSIST_ENTRY_CHANGE_MODIFY = 4,LDAP_CONTROL_PERSIST_ENTRY_CHANGE_RENAME = 8,LDAP_TAG_EXOP_MODIFY_PASSWD_ID = 128,LDAP_TAG_EXOP_MODIFY_PASSWD_OLD = 129,LDAP_TAG_EXOP_MODIFY_PASSWD_NEW = 130,LDAP_TAG_EXOP_MODIFY_PASSWD_GEN = 128,LDAP_TAG_EXOP_REFRESH_REQ_DN = 128,LDAP_TAG_EXOP_REFRESH_REQ_TTL = 129,LDAP_TAG_EXOP_REFRESH_RES_TTL = 128,LDAP_TAG_MESSAGE = 48,LDAP_TAG_MSGID = 2,LDAP_TAG_LDAPDN = 4,LDAP_TAG_LDAPCRED = 4,LDAP_TAG_CONTROLS = 160,LDAP_TAG_REFERRAL = 163,LDAP_TAG_NEWSUPERIOR = 128,LDAP_TAG_EXOP_REQ_OID = 128,LDAP_TAG_EXOP_REQ_VALUE = 129,LDAP_TAG_EXOP_RES_OID = 138,LDAP_TAG_EXOP_RES_VALUE = 139,LDAP_TAG_IM_RES_OID = 128,LDAP_TAG_IM_RES_VALUE = 129,LDAP_TAG_SASL_RES_CREDS = 135,LDAP_REQ_BIND = 96,LDAP_REQ_UNBIND = 66,LDAP_REQ_SEARCH = 99,LDAP_REQ_MODIFY = 102,LDAP_REQ_ADD = 104,LDAP_REQ_DELETE = 74,LDAP_REQ_MODDN = 108,LDAP_REQ_MODRDN = 108,LDAP_REQ_RENAME = 108,LDAP_REQ_COMPARE = 110,LDAP_REQ_ABANDON = 80,LDAP_REQ_EXTENDED = 119,LDAP_RES_BIND = 97,LDAP_RES_SEARCH_ENTRY = 100,LDAP_RES_SEARCH_REFERENCE = 115,LDAP_RES_SEARCH_RESULT = 101,LDAP_RES_MODIFY = 103,LDAP_RES_ADD = 105,LDAP_RES_DELETE = 107,LDAP_RES_MODDN = 109,LDAP_RES_MODRDN = 109,LDAP_RES_RENAME = 109,LDAP_RES_COMPARE = 111,LDAP_RES_EXTENDED = 120,LDAP_RES_INTERMEDIATE = 121,LDAP_RES_ANY = -1,LDAP_RES_UNSOLICITED = 0,LDAP_SASL_SIMPLE = 0,LDAP_AUTH_NONE = 0,LDAP_AUTH_SIMPLE = 128,LDAP_AUTH_SASL = 163,LDAP_AUTH_KRBV4 = 255,LDAP_AUTH_KRBV41 = 129,LDAP_AUTH_KRBV42 = 130,LDAP_AUTH_NEGOTIATE = 1279,LDAP_FILTER_AND = 160,LDAP_FILTER_OR = 161,LDAP_FILTER_NOT = 162,LDAP_FILTER_EQUALITY = 163,LDAP_FILTER_SUBSTRINGS = 164,LDAP_FILTER_GE = 165,LDAP_FILTER_LE = 166,LDAP_FILTER_PRESENT = 135,LDAP_FILTER_APPROX = 168,LDAP_FILTER_EXT = 169,LDAP_FILTER_EXT_OID = 129,LDAP_FILTER_EXT_TYPE = 130,LDAP_FILTER_EXT_VALUE = 131,LDAP_FILTER_EXT_DNATTRS = 132,LDAP_SUBSTRING_INITIAL = 128,LDAP_SUBSTRING_ANY = 129,LDAP_SUBSTRING_FINAL = 130,LDAP_SCOPE_BASE = 0,LDAP_SCOPE_BASEOBJECT = 0,LDAP_SCOPE_ONELEVEL = 1,LDAP_SCOPE_ONE = 1,LDAP_SCOPE_SUBTREE = 2,LDAP_SCOPE_SUB = 2,LDAP_SCOPE_SUBORDINATE = 3,LDAP_SCOPE_CHILDREN = 3,LDAP_SCOPE_DEFAULT = -1,LDAP_SUCCESS = 0,LDAP_OPERATIONS_ERROR = 1,LDAP_PROTOCOL_ERROR = 2,LDAP_TIMELIMIT_EXCEEDED = 3,LDAP_SIZELIMIT_EXCEEDED = 4,LDAP_COMPARE_FALSE = 5,LDAP_COMPARE_TRUE = 6,LDAP_AUTH_METHOD_NOT_SUPPORTED = 7,LDAP_STRONG_AUTH_NOT_SUPPORTED = 7,LDAP_STRONG_AUTH_REQUIRED = 8,LDAP_STRONGER_AUTH_REQUIRED = 8,LDAP_PARTIAL_RESULTS = 9,LDAP_REFERRAL = 10,LDAP_ADMINLIMIT_EXCEEDED = 11,LDAP_UNAVAILABLE_CRITICAL_EXTENSION = 12,LDAP_CONFIDENTIALITY_REQUIRED = 13,LDAP_SASL_BIND_IN_PROGRESS = 14,LDAP_NO_SUCH_ATTRIBUTE = 16,LDAP_UNDEFINED_TYPE = 17,LDAP_INAPPROPRIATE_MATCHING = 18,LDAP_CONSTRAINT_VIOLATION = 19,LDAP_TYPE_OR_VALUE_EXISTS = 20,LDAP_INVALID_SYNTAX = 21,LDAP_NO_SUCH_OBJECT = 32,LDAP_ALIAS_PROBLEM = 33,LDAP_INVALID_DN_SYNTAX = 34,LDAP_IS_LEAF = 35,LDAP_ALIAS_DEREF_PROBLEM = 36,LDAP_X_PROXY_AUTHZ_FAILURE = 47,LDAP_INAPPROPRIATE_AUTH = 48,LDAP_INVALID_CREDENTIALS = 49,LDAP_INSUFFICIENT_ACCESS = 50,LDAP_BUSY = 51,LDAP_UNAVAILABLE = 52,LDAP_UNWILLING_TO_PERFORM = 53,LDAP_LOOP_DETECT = 54,LDAP_NAMING_VIOLATION = 64,LDAP_OBJECT_CLASS_VIOLATION = 65,LDAP_NOT_ALLOWED_ON_NONLEAF = 66,LDAP_NOT_ALLOWED_ON_RDN = 67,LDAP_ALREADY_EXISTS = 68,LDAP_NO_OBJECT_CLASS_MODS = 69,LDAP_RESULTS_TOO_LARGE = 70,LDAP_AFFECTS_MULTIPLE_DSAS = 71,LDAP_VLV_ERROR = 76,LDAP_OTHER = 80,LDAP_CUP_RESOURCES_EXHAUSTED = 113,LDAP_CUP_SECURITY_VIOLATION = 114,LDAP_CUP_INVALID_DATA = 115,LDAP_CUP_UNSUPPORTED_SCHEME = 116,LDAP_CUP_RELOAD_REQUIRED = 117,LDAP_CANCELLED = 118,LDAP_NO_SUCH_OPERATION = 119,LDAP_TOO_LATE = 120,LDAP_CANNOT_CANCEL = 121,LDAP_ASSERTION_FAILED = 122,LDAP_PROXIED_AUTHORIZATION_DENIED = 123,LDAP_SYNC_REFRESH_REQUIRED = 4096,LDAP_X_SYNC_REFRESH_REQUIRED = 16640,LDAP_X_ASSERTION_FAILED = 16655,LDAP_X_NO_OPERATION = 16654,LDAP_X_NO_REFERRALS_FOUND = 16656,LDAP_X_CANNOT_CHAIN = 16657,LDAP_X_INVALIDREFERENCE = 16658,LDAP_SERVER_DOWN = -1,LDAP_LOCAL_ERROR = -2,LDAP_ENCODING_ERROR = -3,LDAP_DECODING_ERROR = -4,LDAP_TIMEOUT = -5,LDAP_AUTH_UNKNOWN = -6,LDAP_FILTER_ERROR = -7,LDAP_USER_CANCELLED = -8,LDAP_PARAM_ERROR = -9,LDAP_NO_MEMORY = -10,LDAP_CONNECT_ERROR = -11,LDAP_NOT_SUPPORTED = -12,LDAP_CONTROL_NOT_FOUND = -13,LDAP_NO_RESULTS_RETURNED = -14,LDAP_MORE_RESULTS_TO_RETURN = -15,LDAP_CLIENT_LOOP = -16,LDAP_REFERRAL_LIMIT_EXCEEDED = -17,LDAP_X_CONNECTING = -18,LDAP_MOD_OP = 7,LDAP_MOD_ADD = 0,LDAP_MOD_DELETE = 1,LDAP_MOD_REPLACE = 2,LDAP_MOD_INCREMENT = 3,LDAP_MOD_BVALUES = 128,LDAP_DEREF_NEVER = 0,LDAP_DEREF_SEARCHING = 1,LDAP_DEREF_FINDING = 2,LDAP_DEREF_ALWAYS = 3,LDAP_NO_LIMIT = 0,LDAP_MSG_ONE = 0,LDAP_MSG_ALL = 1,LDAP_MSG_RECEIVED = 2,LDAP_URL_SUCCESS = 0,LDAP_URL_ERR_MEM = 1,LDAP_URL_ERR_PARAM = 2,LDAP_URL_ERR_BADSCHEME = 3,LDAP_URL_ERR_BADENCLOSURE = 4,LDAP_URL_ERR_BADURL = 5,LDAP_URL_ERR_BADHOST = 6,LDAP_URL_ERR_BADATTRS = 7,LDAP_URL_ERR_BADSCOPE = 8,LDAP_URL_ERR_BADFILTER = 9,LDAP_URL_ERR_BADEXTS = 10,LDAP_SASL_AUTOMATIC = 0,LDAP_SASL_INTERACTIVE = 1,LDAP_SASL_QUIET = 2,LDAP_AVA_NULL = 0,LDAP_AVA_STRING = 1,LDAP_AVA_BINARY = 2,LDAP_AVA_NONPRINTABLE = 4,LDAP_AVA_FREE_ATTR = 16,LDAP_AVA_FREE_VALUE = 32,LDAP_DN_FORMAT_LDAP = 0,LDAP_DN_FORMAT_LDAPV3 = 16,LDAP_DN_FORMAT_LDAPV2 = 32,LDAP_DN_FORMAT_DCE = 48,LDAP_DN_FORMAT_UFN = 64,LDAP_DN_FORMAT_AD_CANONICAL = 80,LDAP_DN_FORMAT_LBER = 240,LDAP_DN_FORMAT_MASK = 240,LDAP_DN_PRETTY = 256,LDAP_DN_SKIP = 512,LDAP_DN_P_NOLEADTRAILSPACES = 4096,LDAP_DN_P_NOSPACEAFTERRDN = 8192,LDAP_DN_PEDANTIC = 61440,LDAP_API_FEATURE_CANCEL = 1000,LDAP_API_FEATURE_TURN = 1000,LDAP_API_FEATURE_PAGED_RESULTS = 2000,LDAP_API_FEATURE_SERVER_SIDE_SORT = 2000,LDAP_API_FEATURE_VIRTUAL_LIST_VIEW = 2000,LDAP_API_FEATURE_WHOAMI = 1000,LDAP_API_FEATURE_PASSWD_MODIFY = 1000,LDAP_API_FEATURE_PASSWORD_POLICY = 1000,LDAP_API_FEATURE_REFRESH = 1000,};
enum MACRO_LDAP_SCHERR : __int64 {LDAP_SCHERR_OUTOFMEM = 1,LDAP_SCHERR_UNEXPTOKEN = 2,LDAP_SCHERR_NOLEFTPAREN = 3,LDAP_SCHERR_NORIGHTPAREN = 4,LDAP_SCHERR_NODIGIT = 5,LDAP_SCHERR_BADNAME = 6,LDAP_SCHERR_BADDESC = 7,LDAP_SCHERR_BADSUP = 8,LDAP_SCHERR_DUPOPT = 9,LDAP_SCHERR_EMPTY = 10,LDAP_SCHERR_MISSING = 11,LDAP_SCHERR_OUT_OF_ORDER = 12,LDAP_SCHEMA_NO = 0,LDAP_SCHEMA_YES = 1,LDAP_SCHEMA_USER_APPLICATIONS = 0,LDAP_SCHEMA_DIRECTORY_OPERATION = 1,LDAP_SCHEMA_DISTRIBUTED_OPERATION = 2,LDAP_SCHEMA_DSA_OPERATION = 3,LDAP_SCHEMA_ABSTRACT = 0,LDAP_SCHEMA_STRUCTURAL = 1,LDAP_SCHEMA_AUXILIARY = 2,LDAP_SCHEMA_ALLOW_NONE = 0,LDAP_SCHEMA_ALLOW_NO_OID = 1,LDAP_SCHEMA_ALLOW_QUOTED = 2,LDAP_SCHEMA_ALLOW_DESCR = 4,LDAP_SCHEMA_ALLOW_DESCR_PREFIX = 8,LDAP_SCHEMA_ALLOW_OID_MACRO = 16,LDAP_SCHEMA_ALLOW_OUT_OF_ORDER_FIELDS = 32,LDAP_SCHEMA_ALLOW_ALL = 63,LDAP_SCHEMA_SKIP = 128,LDAP_UCS4_INVALID = 2147483648,};
enum MACRO_LDT : __int64 {LDT_AUTO_ALLOC = 0xFFFFFFFF,};
enum MACRO_LEAVE {LEAVE_INVITE = 0,};
enum MACRO_LEDGER : __int64 {LEDGER_ITEM_INFINITY = 4294967295,};
enum MACRO_LEDGER_N {LEDGER_N_ITEMS = 3,LEDGER_UNLIMITED = 0,};
enum MACRO_LEN {MIN_OID_LEN = 2,MAX_NAME_LEN = 128,};
enum MACRO_LFLOW {LFLOW_OFF = 0,LFLOW_ON = 1,LFLOW_RESTART_ANY = 2,LFLOW_RESTART_XON = 3,};
enum MACRO_LH {LH_LOAD_MULT = 256,};
enum MACRO_LIBCURL {LIBCURL_VERSION_MAJOR = 7,LIBCURL_VERSION_MINOR = 21,LIBCURL_VERSION_PATCH = 4,LIBCURL_VERSION_NUM = 464132,};
enum MACRO_LIBEDIT {LIBEDIT_MAJOR = 2,LIBEDIT_MINOR = 11,};
enum MACRO_LIBEXSLT {LIBEXSLT_VERSION = 813,};
enum MACRO_LIBXML {LIBXML_VERSION = 20703,};
enum MACRO_LIBXSLT {LIBXSLT_VERSION = 10124,};
enum MACRO_LIO {LIO_NOP = 0x0,LIO_READ = 0x1,LIO_WRITE = 0x2,LIO_NOWAIT = 0x1,LIO_WAIT = 0x2,};
enum MACRO_LLC {LLC_ISFRAMELEN = 4,LLC_UFRAMELEN = 3,LLC_FRMRLEN = 7,LLC_SNAPFRAMELEN = 8,LLC_UI = 3,LLC_UI_P = 19,LLC_DISC = 67,LLC_DISC_P = 83,LLC_UA = 99,LLC_UA_P = 115,LLC_TEST = 227,LLC_TEST_P = 243,LLC_FRMR = 135,LLC_FRMR_P = 151,LLC_DM = 15,LLC_DM_P = 31,LLC_XID = 175,LLC_XID_P = 191,LLC_SABME = 111,LLC_SABME_P = 127,LLC_RR = 1,LLC_RNR = 5,LLC_REJ = 9,LLC_INFO = 0,LLC_8021D_LSAP = 66,LLC_X25_LSAP = 126,LLC_SNAP_LSAP = 170,LLC_ISO_LSAP = 254,LLC_XID_FORMAT_BASIC = 129,LLC_XID_BASIC_MINLEN = 6,LLC_XID_CLASS_I = 1,LLC_XID_CLASS_II = 3,LLC_XID_CLASS_III = 5,LLC_XID_CLASS_IV = 7,};
enum MACRO_LLONG : __int64 {LLONG_MIN = 0x8000000000000000,};
enum MACRO_LM {LM_MODE = 1,LM_FORWARDMASK = 2,LM_SLC = 3,};
enum MACRO_LM_MAXSTRLEN {LM_MAXSTRLEN = 1024,};
enum MACRO_LOAD {LOAD_SCALE = 1000,};
enum MACRO_LOCAL {LOCAL_PEERCRED = 0x1,};
enum MACRO_LOCALDOMAINPARTS {LOCALDOMAINPARTS = 2,};
enum MACRO_LOCK {LOCK_SH = 0x1,LOCK_EX = 0x2,LOCK_NB = 0x4,LOCK_UN = 0x8,};
enum MACRO_LOCKD {LOCKD_MSG_VERSION = 3,LOCKD_MSG_BLOCK = 1,LOCKD_MSG_TEST = 2,LOCKD_MSG_NFSV3 = 4,LOCKD_MSG_CANCEL = 8,LOCKD_MSG_DENIED_GRACE = 16,LOCKD_MSG_RECLAIM = 32,LOCKD_MSG_TCP = 64,LOCKD_ANS_VERSION = 2,LOCKD_ANS_GRANTED = 1,LOCKD_ANS_LOCK_INFO = 2,LOCKD_ANS_LOCK_EXCL = 4,LOCKD_ANS_DENIED_GRACE = 8,LOCKD_NOTIFY_VERSION = 1,};
enum MACRO_LOCKGROUP {LOCKGROUP_MAX_NAME = 64,LOCKGROUP_ATTR_STAT = 1,};
enum MACRO_LOG {LOG_EMERG = 0,LOG_ALERT = 1,LOG_CRIT = 2,LOG_ERR = 3,LOG_WARNING = 4,LOG_NOTICE = 5,LOG_INFO = 6,LOG_DEBUG = 7,LOG_PRIMASK = 7,LOG_KERN = 0,LOG_USER = 8,LOG_MAIL = 16,LOG_DAEMON = 24,LOG_AUTH = 32,LOG_SYSLOG = 40,LOG_LPR = 48,LOG_NEWS = 56,LOG_UUCP = 64,LOG_CRON = 72,LOG_AUTHPRIV = 80,LOG_FTP = 88,LOG_NETINFO = 96,LOG_REMOTEAUTH = 104,LOG_INSTALL = 112,LOG_RAS = 120,LOG_LOCAL0 = 128,LOG_LOCAL1 = 136,LOG_LOCAL2 = 144,LOG_LOCAL3 = 152,LOG_LOCAL4 = 160,LOG_LOCAL5 = 168,LOG_LOCAL6 = 176,LOG_LOCAL7 = 184,LOG_LAUNCHD = 192,LOG_NFACILITIES = 25,LOG_FACMASK = 1016,LOG_PID = 1,LOG_CONS = 2,LOG_ODELAY = 4,LOG_NDELAY = 8,LOG_NOWAIT = 16,LOG_PERROR = 32,};
enum MACRO_LONG : __int64 {LONG_MIN = 0x8000000000000000,};
enum MACRO_LONG_BIT {LONG_BIT = 64,};
enum MACRO_LOOK {LOOK_UP = 1,};
enum MACRO_LR {LR_TYPE_THIS_SERVER_ONLY = 0x8000,LR_TYPE_INTERPRETATION_MASK = 0x7FFF,};
enum MACRO_LS {LS_PRINT_NEVER = 5,LS_PRINT_LOG = 3,LS_PRINT_ALWAYS = 0,};
enum MACRO_LSCALE {LSCALE = 1000,};
enum MACRO_LT {LT_FILENAME_MAX = 2048,LT_EOS_CHAR = 0,LT_PATHSEP_CHAR = 58,LT_ERROR_H = 1,LT_ERROR_LEN_MAX = 41,LT_DLLOADER_H = 1,};
enum MACRO_LTDL {LTDL_H = 1,LT_SYSTEM_H = 1,};
enum MACRO_L_SET {L_SET = 0,L_INCR = 1,L_XTND = 2,};
enum MACRO_L_ctermid {L_ctermid = 1024,};
enum MACRO_M16KCLSHIFT {M16KCLSHIFT = 14,M16KCLBYTES = 16384,};
enum MACRO_MAC {MAC_OS_X_VERSION_10_0 = 1000,MAC_OS_X_VERSION_10_1 = 1010,MAC_OS_X_VERSION_10_2 = 1020,MAC_OS_X_VERSION_10_3 = 1030,MAC_OS_X_VERSION_10_4 = 1040,MAC_OS_X_VERSION_10_5 = 1050,MAC_OS_X_VERSION_10_6 = 1060,MAC_OS_X_VERSION_10_7 = 1070,MAC_OS_X_VERSION_MIN_REQUIRED = 1040,MAC_OS_X_VERSION_MAX_ALLOWED = 1070,};
enum MACRO_MACH : __int64 {MACH_PORT_NULL = 0,MACH_PORT_DEAD = 4294967295,MACH_PORT_RIGHT_SEND = 0,MACH_PORT_RIGHT_RECEIVE = 1,MACH_PORT_RIGHT_SEND_ONCE = 2,MACH_PORT_RIGHT_PORT_SET = 3,MACH_PORT_RIGHT_DEAD_NAME = 4,MACH_PORT_RIGHT_LABELH = 5,MACH_PORT_RIGHT_NUMBER = 6,MACH_PORT_TYPE_NONE = 0,MACH_PORT_TYPE_SEND = 65536,MACH_PORT_TYPE_RECEIVE = 131072,MACH_PORT_TYPE_SEND_ONCE = 262144,MACH_PORT_TYPE_PORT_SET = 524288,MACH_PORT_TYPE_DEAD_NAME = 1048576,MACH_PORT_TYPE_LABELH = 2097152,MACH_PORT_TYPE_SEND_RECEIVE = 196608,MACH_PORT_TYPE_SEND_RIGHTS = 327680,MACH_PORT_TYPE_PORT_RIGHTS = 458752,MACH_PORT_TYPE_PORT_OR_DEAD = 1507328,MACH_PORT_TYPE_ALL_RIGHTS = 2031616,MACH_PORT_TYPE_DNREQUEST = 2147483648,MACH_PORT_TYPE_SPREQUEST = 1073741824,MACH_PORT_TYPE_SPREQUEST_DELAYED = 536870912,MACH_PORT_SRIGHTS_NONE = 0,MACH_PORT_SRIGHTS_PRESENT = 1,MACH_PORT_QLIMIT_ZERO = 0,MACH_PORT_QLIMIT_BASIC = 5,MACH_PORT_QLIMIT_SMALL = 16,MACH_PORT_QLIMIT_LARGE = 1024,MACH_PORT_QLIMIT_KERNEL = 65536,MACH_PORT_QLIMIT_MIN = 0,MACH_PORT_QLIMIT_DEFAULT = 5,MACH_PORT_QLIMIT_MAX = 1024,MACH_PORT_LIMITS_INFO = 1,MACH_PORT_RECEIVE_STATUS = 2,MACH_PORT_DNREQUESTS_SIZE = 3,MACH_PORT_DNREQUESTS_SIZE_COUNT = 1,};
enum MACRO_MACHINE {MACHINE_THREAD_STATE = 7,};
enum MACRO_MACHINE_UNKNOWN {MACHINE_UNKNOWN = 3,};
enum MACRO_MACH_EXCEPTION : __int64 {MACH_EXCEPTION_CODES = 0x80000000,};
enum MACRO_MACH_KDB {MACH_KDB = 0,};
enum MACRO_MACH_MSG : __int64 {MACH_MSG_TIMEOUT_NONE = 0,MACH_MSGH_BITS_ZERO = 0,MACH_MSGH_BITS_REMOTE_MASK = 255,MACH_MSGH_BITS_LOCAL_MASK = 65280,MACH_MSGH_BITS_COMPLEX = 2147483648,MACH_MSGH_BITS_USER = 2147549183,MACH_MSGH_BITS_CIRCULAR = 1073741824,MACH_MSGH_BITS_USED = 3221291007,MACH_MSGH_BITS_PORTS_MASK = 65535,MACH_MSG_SIZE_NULL = 0,MACH_MSG_TYPE_MOVE_RECEIVE = 16,MACH_MSG_TYPE_MOVE_SEND = 17,MACH_MSG_TYPE_MOVE_SEND_ONCE = 18,MACH_MSG_TYPE_COPY_SEND = 19,MACH_MSG_TYPE_MAKE_SEND = 20,MACH_MSG_TYPE_MAKE_SEND_ONCE = 21,MACH_MSG_TYPE_COPY_RECEIVE = 22,MACH_MSG_PHYSICAL_COPY = 0,MACH_MSG_VIRTUAL_COPY = 1,MACH_MSG_ALLOCATE = 2,MACH_MSG_OVERWRITE = 3,MACH_MSG_PORT_DESCRIPTOR = 0,MACH_MSG_OOL_DESCRIPTOR = 1,MACH_MSG_OOL_PORTS_DESCRIPTOR = 2,MACH_MSG_OOL_VOLATILE_DESCRIPTOR = 3,MACH_MSG_BODY_NULL = 0,MACH_MSG_DESCRIPTOR_NULL = 0,MACH_MSG_NULL = 0,MACH_MSG_TRAILER_FORMAT_0 = 0,MACH_MSG_SIZE_MAX = 4294967295,MACH_MSGH_KIND_NORMAL = 0,MACH_MSGH_KIND_NOTIFICATION = 1,MACH_MSG_TYPE_PORT_NONE = 0,MACH_MSG_TYPE_PORT_NAME = 15,MACH_MSG_TYPE_PORT_RECEIVE = 16,MACH_MSG_TYPE_PORT_SEND = 17,MACH_MSG_TYPE_PORT_SEND_ONCE = 18,MACH_MSG_TYPE_LAST = 22,MACH_MSG_TYPE_POLYMORPHIC = 4294967295,MACH_MSG_OPTION_NONE = 0,MACH_SEND_MSG = 1,MACH_RCV_MSG = 2,MACH_RCV_LARGE = 4,MACH_SEND_TIMEOUT = 16,MACH_SEND_INTERRUPT = 64,MACH_SEND_NOTIFY = 128,MACH_SEND_ALWAYS = 65536,MACH_SEND_TRAILER = 131072,MACH_RCV_TIMEOUT = 256,MACH_RCV_NOTIFY = 512,MACH_RCV_INTERRUPT = 1024,MACH_RCV_OVERWRITE = 4096,MACH_RCV_TRAILER_NULL = 0,MACH_RCV_TRAILER_SEQNO = 1,MACH_RCV_TRAILER_SENDER = 2,MACH_RCV_TRAILER_AUDIT = 3,MACH_RCV_TRAILER_CTX = 4,MACH_RCV_TRAILER_AV = 7,MACH_RCV_TRAILER_LABELS = 8,MACH_RCV_TRAILER_MASK = 4278190080,MACH_MSG_SUCCESS = 0,MACH_MSG_MASK = 15872,MACH_MSG_IPC_SPACE = 8192,MACH_MSG_VM_SPACE = 4096,MACH_MSG_IPC_KERNEL = 2048,MACH_MSG_VM_KERNEL = 1024,MACH_SEND_IN_PROGRESS = 268435457,MACH_SEND_INVALID_DATA = 268435458,MACH_SEND_INVALID_DEST = 268435459,MACH_SEND_TIMED_OUT = 268435460,MACH_SEND_INTERRUPTED = 268435463,MACH_SEND_MSG_TOO_SMALL = 268435464,MACH_SEND_INVALID_REPLY = 268435465,MACH_SEND_INVALID_RIGHT = 268435466,MACH_SEND_INVALID_NOTIFY = 268435467,MACH_SEND_INVALID_MEMORY = 268435468,MACH_SEND_NO_BUFFER = 268435469,MACH_SEND_TOO_LARGE = 268435470,MACH_SEND_INVALID_TYPE = 268435471,MACH_SEND_INVALID_HEADER = 268435472,MACH_SEND_INVALID_TRAILER = 268435473,MACH_SEND_INVALID_RT_OOL_SIZE = 268435477,MACH_RCV_IN_PROGRESS = 268451841,MACH_RCV_INVALID_NAME = 268451842,MACH_RCV_TIMED_OUT = 268451843,MACH_RCV_TOO_LARGE = 268451844,MACH_RCV_INTERRUPTED = 268451845,MACH_RCV_PORT_CHANGED = 268451846,MACH_RCV_INVALID_NOTIFY = 268451847,MACH_RCV_INVALID_DATA = 268451848,MACH_RCV_PORT_DIED = 268451849,MACH_RCV_IN_SET = 268451850,MACH_RCV_HEADER_ERROR = 268451851,MACH_RCV_BODY_ERROR = 268451852,MACH_RCV_INVALID_TYPE = 268451853,MACH_RCV_SCATTER_SMALL = 268451854,MACH_RCV_INVALID_TRAILER = 268451855,MACH_RCV_IN_PROGRESS_TIMED = 268451857,};
enum MACRO_MACH_NOTIFY {MACH_NOTIFY_FIRST = 0x40,MACH_NOTIFY_PORT_DELETED = 0x41,MACH_NOTIFY_SEND_POSSIBLE = 0x42,MACH_NOTIFY_PORT_DESTROYED = 0x45,MACH_NOTIFY_NO_SENDERS = 0x46,MACH_NOTIFY_SEND_ONCE = 0x47,MACH_NOTIFY_DEAD_NAME = 0x48,MACH_NOTIFY_LAST = 0x4D,};
enum MACRO_MACH_PORTS {MACH_PORTS_SLOTS_USED = 3,};
enum MACRO_MACH_SCHED {MACH_SCHED = 0x0,MACH_STACK_ATTACH = 0x1,MACH_STACK_HANDOFF = 0x2,MACH_CALL_CONT = 0x3,MACH_CALLOUT = 0x4,MACH_STACK_DETACH = 0x5,MACH_MAKE_RUNNABLE = 0x6,MACH_PROMOTE = 0x7,MACH_DEMOTE = 0x8,MACH_IDLE = 0x9,MACH_STACK_DEPTH = 0xA,MACH_MOVED = 0xB,MACH_FAIRSHARE_ENTER = 0xC,MACH_FAIRSHARE_EXIT = 0xD,MACH_FAILSAFE = 0xE,MACH_GET_URGENCY = 0x14,MACH_URGENCY = 0x15,MACH_REDISPATCH = 0x16,MACH_REMOTE_AST = 0x17,MACH_SCHED_LPA_BROKEN = 0x18,};
enum MACRO_MAC_MAX {MAC_MAX_POLICY_NAME = 32,MAC_MAX_LABEL_ELEMENT_NAME = 32,MAC_MAX_LABEL_ELEMENT_DATA = 4096,MAC_MAX_LABEL_BUF_LEN = 8192,MAC_MAX_MANAGED_NAMESPACES = 4,MAC_SYSTEM_ENFORCE = 1,MAC_PROC_ENFORCE = 2,MAC_MACH_ENFORCE = 4,MAC_VM_ENFORCE = 8,MAC_FILE_ENFORCE = 16,MAC_SOCKET_ENFORCE = 32,MAC_PIPE_ENFORCE = 64,MAC_VNODE_ENFORCE = 128,MAC_NET_ENFORCE = 256,MAC_MBUF_ENFORCE = 512,MAC_POSIXSEM_ENFORCE = 1024,MAC_POSIXSHM_ENFORCE = 2048,MAC_SYSVMSG_ENFORCE = 4096,MAC_SYSVSEM_ENFORCE = 8192,MAC_SYSVSHM_ENFORCE = 16384,MAC_ALL_ENFORCE = 32767,MAC_PROC_CHECK_SUSPEND = 0,MAC_PROC_CHECK_RESUME = 1,MAC_PROC_CHECK_HIBERNATE = 2,MAC_PROC_CHECK_SHUTDOWN_SOCKETS = 3,MAC_POLICY_OPS_VERSION = 11,MAC_AUDIT_DATA_LIMIT = 1024,MAC_AUDIT_DEFAULT = 0,MAC_AUDIT_NO = 1,MAC_AUDIT_YES = 2,};
enum MACRO_MAC_WAITOK {MAC_WAITOK = 0,MAC_NOWAIT = 1,};
enum MACRO_MADV {MADV_NORMAL = 0,MADV_RANDOM = 1,MADV_SEQUENTIAL = 2,MADV_WILLNEED = 3,MADV_DONTNEED = 4,MADV_FREE = 5,MADV_ZERO_WIRED_PAGES = 6,MADV_FREE_REUSABLE = 7,MADV_FREE_REUSE = 8,MADV_CAN_REUSE = 9,};
enum MACRO_MAGIC {MAGIC = 0x11A,};
enum MACRO_MALLOC {MALLOC_PTR_IN_USE_RANGE_TYPE = 1,MALLOC_PTR_REGION_RANGE_TYPE = 2,MALLOC_ADMIN_REGION_RANGE_TYPE = 4,MALLOC_ZONE_SPECIFIC_FLAGS = 65280,};
enum MACRO_MAP {MAP_MEM_NOOP = 0,MAP_MEM_COPYBACK = 1,MAP_MEM_IO = 2,MAP_MEM_WTHRU = 3,MAP_MEM_WCOMB = 4,MAP_MEM_ONLY = 65536,MAP_MEM_NAMED_CREATE = 131072,MAP_MEM_PURGABLE = 262144,MAP_MEM_NAMED_REUSE = 524288,};
enum MACRO_MAP_FAILED : __int64 {MAP_FAILED = -1,};
enum MACRO_MAP_FILE {MAP_FILE = 0x0,MAP_ANON = 0x1000,};
enum MACRO_MAP_SHARED {MAP_SHARED = 0x1,MAP_PRIVATE = 0x2,MAP_COPY = 0x2,MAP_FIXED = 0x10,MAP_RENAME = 0x20,MAP_NORESERVE = 0x40,MAP_RESERVED0080 = 0x80,MAP_NOEXTEND = 0x100,MAP_HASSEMAPHORE = 0x200,MAP_NOCACHE = 0x400,MAP_JIT = 0x800,};
enum MACRO_MATCH : __int64 {MATCH_FAILED = -1,MATCH_SUCCEEDED = 0,};
enum MACRO_MATH {MATH_ERRNO = 1,MATH_ERREXCEPT = 2,};
enum MACRO_MATTR {MATTR_CACHE = 1,MATTR_MIGRATE = 2,MATTR_REPLICATE = 4,MATTR_VAL_OFF = 0,MATTR_VAL_ON = 1,MATTR_VAL_GET = 2,MATTR_VAL_CACHE_FLUSH = 6,MATTR_VAL_DCACHE_FLUSH = 7,MATTR_VAL_ICACHE_FLUSH = 8,MATTR_VAL_CACHE_SYNC = 9,MATTR_VAL_GET_INFO = 10,};
enum MACRO_MAX {FOPEN_MAX = 20,FILENAME_MAX = 1024,};
enum MACRO_MAXAUDITDATA {MAXAUDITDATA = 0x7FFF,};
enum MACRO_MAXCDNAME {MAXCDNAME = 255,};
enum MACRO_MAXCOMLEN {MAXCOMLEN = 16,MAXINTERP = 64,};
enum MACRO_MAXDEPTH {MAXDEPTH = 50,};
enum MACRO_MAXDFLSRCH {MAXDFLSRCH = 3,};
enum MACRO_MAXDNSRCH {MAXDNSRCH = 6,};
enum MACRO_MAXDOMNAMELEN {MAXDOMNAMELEN = 256,};
enum MACRO_MAXDSIZ : __int64 {MAXDSIZ = 9223372036854775807,};
enum MACRO_MAXFRAG {MAXFRAG = 8,};
enum MACRO_MAXHOSTNAMELEN {MAXHOSTNAMELEN = 256,};
enum MACRO_MAXLOGNAME {MAXLOGNAME = 255,};
enum MACRO_MAXNAMELEN {MAXNAMELEN = 1025,};
enum MACRO_MAXNAMLEN {MAXNAMLEN = 255,};
enum MACRO_MAXNETNAMELEN {MAXNETNAMELEN = 255,};
enum MACRO_MAXNS {MAXNS = 3,};
enum MACRO_MAXPACKETSIZE {MAXPACKETSIZE = 512,};
enum MACRO_MAXPATHLEN {MAXPATHLEN = 1024,};
enum MACRO_MAXPHYS {MAXPHYS = 131072,};
enum MACRO_MAXPHYSIO {MAXPHYSIO = 131072,};
enum MACRO_MAXPHYSIO_WIRED {MAXPHYSIO_WIRED = 16777216,};
enum MACRO_MAXPKTSIZE {MAXPKTSIZE = 65468,};
enum MACRO_MAXPRI {MAXPRI = 127,};
enum MACRO_MAXQUOTAS {MAXQUOTAS = 2,};
enum MACRO_MAXRESOLVSORT {MAXRESOLVSORT = 10,};
enum MACRO_MAXSEGSIZE {MAXSEGSIZE = 65464,};
enum MACRO_MAXSYMLINKS {MAXSYMLINKS = 32,};
enum MACRO_MAXTHREADNAMESIZE {MAXTHREADNAMESIZE = 64,};
enum MACRO_MAXTOKEN {MAXTOKEN = 128,MAXQUOTESTR = 4096,};
enum MACRO_MAXTTL {MAXTTL = 255,};
enum MACRO_MAXUPRC {MAXUPRC = 266,NCARGS = 262144,};
enum MACRO_MAXUSERS {MAXUSERS = 100,};
enum MACRO_MAX_AUDIT {MAX_AUDIT_RECORDS = 20,};
enum MACRO_MAX_AUDITSTRING {MAX_AUDITSTRING_LEN = 256,};
enum MACRO_MAX_AUDIT_RECORD {MAX_AUDIT_RECORD_SIZE = 32767,MIN_AUDIT_FILE_SIZE = 524288,};
enum MACRO_MAX_CALLBACK {MAX_CALLBACK_IDS = 2,MAX_CALLBACK_SUBIDS = 16,};
enum MACRO_MAX_CANON {MAX_CANON = 1024,MAX_INPUT = 1024,};
enum MACRO_MAX_DEBUG {MAX_DEBUG_TOKENS = 256,MAX_DEBUG_TOKEN_LEN = 128,};
enum MACRO_MAX_ENGINEID {MAX_ENGINEID_LENGTH = 32,};
enum MACRO_MAX_FH_SIZE {NFSV4_MAX_FH_SIZE = 128,NFSV3_MAX_FH_SIZE = 64,NFSV2_MAX_FH_SIZE = 32,};
enum MACRO_MAX_IPOPTLEN {MAX_IPOPTLEN = 40,};
enum MACRO_MAX_IQ {MAX_IQ_TIME = 604800,MAX_DQ_TIME = 604800,};
enum MACRO_MAX_KCTL {MAX_KCTL_NAME = 96,};
enum MACRO_MAX_KEYTAB {MAX_KEYTAB_NAME_LEN = 1100,};
enum MACRO_MAX_LEN {COMMUNITY_MAX_LEN = 256,SPRINT_MAX_LEN = 2560,};
enum MACRO_MAX_LIFE {MAX_LIFE = 60,};
enum MACRO_MAX_MACHINE {MAX_MACHINE_NAME = 255,};
enum MACRO_MAX_MBUF {MAX_MBUF_CNAME = 15,};
enum MACRO_MAX_MEM {MAX_MEM_LEVEL = 9,MAX_WBITS = 15,};
enum MACRO_MAX_MSG {MAX_MSG_BSIZE = 1048576,};
enum MACRO_MAX_NAME {MAX_NAME_SIZE = 512,MAX_ENTRY_SIZE = 4096,MAX_ALIAS = 14,MAX_DEBUG_LEVEL = 15,};
enum MACRO_MAX_NETOBJ {MAX_NETOBJ_SZ = 1024,MAX_AUTH_BYTES = 400,};
enum MACRO_MAX_PAGE : __int64 {MAX_PAGE_NUMBER = 0xFFFFFFFF,MAX_PAGE_OFFSET = 0xFFFF,MAX_REC_NUMBER = 0xFFFFFFFF,};
enum MACRO_MAX_PATH {MAX_PATH_LEN = 1024,MAX_FILEID = 32,};
enum MACRO_MAX_SACK {MAX_SACK_BLKS = 6,};
enum MACRO_MAX_SNMP {MAX_SNMP_ERR = 18,};
enum MACRO_MAX_SOPS {MAX_SOPS = 5,};
enum MACRO_MAX_SUBID : __int64 {MAX_SUBID = 0xFFFFFFFF,MAX_OID_LEN = 0x80,};
enum MACRO_MAX_TCPOPTLEN {MAX_TCPOPTLEN = 40,};
enum MACRO_MAX_TERMCAP {MAX_TERMCAP_LENGTH = 1023,MAX_TERMINFO_LENGTH = 4096,};
enum MACRO_MAX_USES {MAX_USES = 32,MAX_CROSSLINKS = 16,MAX_LINE = 132,};
enum MACRO_MB {MB_LEN_MAX = 6,};
enum MACRO_MBIGCLSHIFT {MBIGCLSHIFT = 12,MBIGCLBYTES = 4096,};
enum MACRO_MBSTRING {MBSTRING_FLAG = 0x1000,MBSTRING_UTF8 = 0x1000,MBSTRING_ASC = 0x1001,MBSTRING_BMP = 0x1002,MBSTRING_UNIV = 0x1004,};
enum MACRO_MCAST {MCAST_JOIN_GROUP = 80,MCAST_LEAVE_GROUP = 81,MCAST_JOIN_SOURCE_GROUP = 82,MCAST_LEAVE_SOURCE_GROUP = 83,MCAST_BLOCK_SOURCE = 84,MCAST_UNBLOCK_SOURCE = 85,};
enum MACRO_MCAST_UNDEFINED {MCAST_UNDEFINED = 0,MCAST_INCLUDE = 1,MCAST_EXCLUDE = 2,};
enum MACRO_MCL {MCL_CURRENT = 0x1,MCL_FUTURE = 0x2,};
enum MACRO_MCLOFSET {MCLOFSET = 2047,};
enum MACRO_MCLSHIFT {MCLSHIFT = 11,MCLBYTES = 2048,};
enum MACRO_MCS {MCS_DISABLED = 0,MCS_ONLINE = 1,MCS_PURGING = 2,MCS_OFFLINE = 3,};
enum MACRO_MD2 {MD2_DIGEST_LENGTH = 16,MD2_BLOCK = 16,};
enum MACRO_MD4 {MD4_CBLOCK = 64,MD4_LBLOCK = 16,MD4_DIGEST_LENGTH = 16,};
enum MACRO_MD5 {MD5_CBLOCK = 64,MD5_LBLOCK = 16,MD5_DIGEST_LENGTH = 16,};
enum MACRO_MDC2 {MDC2_BLOCK = 8,MDC2_DIGEST_LENGTH = 16,};
enum MACRO_MECAB {MECAB_NOR_NODE = 0,MECAB_UNK_NODE = 1,MECAB_BOS_NODE = 2,MECAB_EOS_NODE = 3,MECAB_PRE_NODE = 4,MECAB_USR_DIC = 1,MECAB_SYS_DIC = 0,MECAB_UNK_DIC = 2,};
enum MACRO_MEMORY {MEMORY_OBJECT_COPY_NONE = 0,MEMORY_OBJECT_COPY_CALL = 1,MEMORY_OBJECT_COPY_DELAY = 2,MEMORY_OBJECT_COPY_TEMPORARY = 3,MEMORY_OBJECT_COPY_SYMMETRIC = 4,MEMORY_OBJECT_COPY_INVALID = 5,MEMORY_OBJECT_RETURN_NONE = 0,MEMORY_OBJECT_RETURN_DIRTY = 1,MEMORY_OBJECT_RETURN_ALL = 2,MEMORY_OBJECT_RETURN_ANYTHING = 3,MEMORY_OBJECT_DATA_FLUSH = 1,MEMORY_OBJECT_DATA_NO_CHANGE = 2,MEMORY_OBJECT_DATA_PURGE = 4,MEMORY_OBJECT_COPY_SYNC = 8,MEMORY_OBJECT_DATA_SYNC = 16,MEMORY_OBJECT_IO_SYNC = 32,MEMORY_OBJECT_DATA_FLUSH_ALL = 64,MEMORY_OBJECT_INFO_MAX = 1024,MEMORY_OBJECT_PERFORMANCE_INFO = 11,MEMORY_OBJECT_ATTRIBUTE_INFO = 14,MEMORY_OBJECT_BEHAVIOR_INFO = 15,MEMORY_OBJECT_TERMINATE_IDLE = 1,MEMORY_OBJECT_RESPECT_CACHE = 2,MEMORY_OBJECT_RELEASE_NO_OP = 4,};
enum MACRO_MENU_COMMAND {MIN_MENU_COMMAND = 512,MAX_MENU_COMMAND = 528,};
enum MACRO_MFCTBLSIZ {MFCTBLSIZ = 256,};
enum MACRO_MFD : __int64 {MFD_SUCCESS = 0,MFD_ERROR = 5,MFD_SKIP = 129,MFD_END_OF_DATA = 130,MFD_CANNOT_CREATE_NOW = 18,MFD_CANNOT_CREATE_EVER = 11,MFD_NOT_WRITABLE = 17,MFD_RESOURCE_UNAVAILABLE = 13,MFD_NOT_VALID_NOW = 12,MFD_NOT_VALID_EVER = 10,MFD_ROW_FLAG_USER_1 = 1,MFD_ROW_FLAG_USER_2 = 2,MFD_ROW_FLAG_USER_3 = 4,MFD_ROW_FLAG_USER_4 = 8,MFD_ROW_FLAG_USER_5 = 16,MFD_ROW_FLAG_USER_6 = 32,MFD_ROW_FLAG_USER_7 = 64,MFD_ROW_FLAG_USER_8 = 128,MFD_ROW_FLAG_USER_MASK = 255,MFD_ROW_MASK = 4294967040,MFD_ROW_CREATED = 2147483648,MFD_ROW_DATA_FROM_USER = 1073741824,MFD_ROW_DELETED = 536870912,MFD_ROW_DIRTY = 268435456,};
enum MACRO_MFSNAMELEN {MFSNAMELEN = 15,MFSTYPENAMELEN = 16,MNAMELEN = 1024,};
enum MACRO_MH : __int64 {MH_MAGIC = 0xFEEDFACE,MH_CIGAM = 0xCEFAEDFE,MH_MAGIC_64 = 0xFEEDFACF,MH_CIGAM_64 = 0xCFFAEDFE,MH_OBJECT = 0x1,MH_EXECUTE = 0x2,MH_FVMLIB = 0x3,MH_CORE = 0x4,MH_PRELOAD = 0x5,MH_DYLIB = 0x6,MH_DYLINKER = 0x7,MH_BUNDLE = 0x8,MH_DYLIB_STUB = 0x9,MH_DSYM = 0xA,MH_KEXT_BUNDLE = 0xB,MH_NOUNDEFS = 0x1,MH_INCRLINK = 0x2,MH_DYLDLINK = 0x4,MH_BINDATLOAD = 0x8,MH_PREBOUND = 0x10,MH_SPLIT_SEGS = 0x20,MH_LAZY_INIT = 0x40,MH_TWOLEVEL = 0x80,MH_FORCE_FLAT = 0x100,MH_NOMULTIDEFS = 0x200,MH_NOFIXPREBINDING = 0x400,MH_PREBINDABLE = 0x800,MH_ALLMODSBOUND = 0x1000,MH_SUBSECTIONS_VIA_SYMBOLS = 0x2000,MH_CANONICAL = 0x4000,MH_WEAK_DEFINES = 0x8000,MH_BINDS_TO_WEAK = 0x10000,MH_ALLOW_STACK_EXECUTION = 0x20000,MH_ROOT_SAFE = 0x40000,MH_SETUID_SAFE = 0x80000,MH_NO_REEXPORTED_DYLIBS = 0x100000,MH_PIE = 0x200000,MH_DEAD_STRIPPABLE_DYLIB = 0x400000,MH_HAS_TLV_DESCRIPTORS = 0x800000,MH_NO_HEAP_EXECUTION = 0x1000000,};
enum MACRO_MIB {MIB_ACCESS_READONLY = 18,MIB_ACCESS_READWRITE = 19,MIB_ACCESS_WRITEONLY = 20,MIB_ACCESS_NOACCESS = 21,MIB_ACCESS_NOTIFY = 67,MIB_ACCESS_CREATE = 48,MIB_STATUS_MANDATORY = 23,MIB_STATUS_OPTIONAL = 24,MIB_STATUS_OBSOLETE = 25,MIB_STATUS_DEPRECATED = 39,MIB_STATUS_CURRENT = 57,};
enum MACRO_MIB_HANDLER : __int64 {MIB_HANDLER_AUTO_NEXT = 0x1,MIB_HANDLER_AUTO_NEXT_OVERRIDE_ONCE = 0x2,MIB_HANDLER_INSTANCE = 0x4,MIB_HANDLER_CUSTOM4 = 0x10000000,MIB_HANDLER_CUSTOM3 = 0x20000000,MIB_HANDLER_CUSTOM2 = 0x40000000,MIB_HANDLER_CUSTOM1 = 0x80000000,};
enum MACRO_MIB_IFTYPE {MIB_IFTYPE_OTHER = 1,MIB_IFTYPE_REGULAR1822 = 2,MIB_IFTYPE_HDH1822 = 3,MIB_IFTYPE_DDNX25 = 4,MIB_IFTYPE_RFC877X25 = 5,MIB_IFTYPE_ETHERNETCSMACD = 6,MIB_IFTYPE_ISO88023CSMACD = 7,MIB_IFTYPE_ISO88024TOKENBUS = 8,MIB_IFTYPE_ISO88025TOKENRING = 9,MIB_IFTYPE_ISO88026MAN = 10,MIB_IFTYPE_STARLAN = 11,MIB_IFTYPE_PROTEON10MBIT = 12,MIB_IFTYPE_PROTEON80MBIT = 13,MIB_IFTYPE_HYPERCHANNEL = 14,MIB_IFTYPE_FDDI = 15,MIB_IFTYPE_LAPB = 16,MIB_IFTYPE_SDLC = 17,MIB_IFTYPE_T1CARRIER = 18,MIB_IFTYPE_CEPT = 19,MIB_IFTYPE_BASICISDN = 20,MIB_IFTYPE_PRIMARYISDN = 21,MIB_IFTYPE_PROPPOINTTOPOINTSERIAL = 22,MIB_IFSTATUS_UP = 1,MIB_IFSTATUS_DOWN = 2,MIB_IFSTATUS_TESTING = 3,MIB_FORWARD_GATEWAY = 1,MIB_FORWARD_HOST = 2,MIB_IPROUTETYPE_OTHER = 1,MIB_IPROUTETYPE_INVALID = 2,MIB_IPROUTETYPE_DIRECT = 3,MIB_IPROUTETYPE_REMOTE = 4,MIB_IPROUTEPROTO_OTHER = 1,MIB_IPROUTEPROTO_LOCAL = 2,MIB_IPROUTEPROTO_NETMGMT = 3,MIB_IPROUTEPROTO_ICMP = 4,MIB_IPROUTEPROTO_EGP = 5,MIB_IPROUTEPROTO_GGP = 6,MIB_IPROUTEPROTO_HELLO = 7,MIB_IPROUTEPROTO_RIP = 8,MIB_IPROUTEPROTO_ISIS = 9,MIB_IPROUTEPROTO_ESIS = 10,MIB_IPROUTEPROTO_CISCOIGRP = 11,MIB_IPROUTEPROTO_BBNSPFIGP = 12,MIB_IPROUTEPROTO_OIGP = 13,MIB_TCPRTOALG_OTHER = 1,MIB_TCPRTOALG_CONSTANT = 2,MIB_TCPRTOALG_RSRE = 3,MIB_TCPRTOALG_VANJ = 4,MIB_TCPCONNSTATE_CLOSED = 1,MIB_TCPCONNSTATE_LISTEN = 2,MIB_TCPCONNSTATE_SYNSENT = 3,MIB_TCPCONNSTATE_SYNRECEIVED = 4,MIB_TCPCONNSTATE_ESTABLISHED = 5,MIB_TCPCONNSTATE_FINWAIT1 = 6,MIB_TCPCONNSTATE_FINWAIT2 = 7,MIB_TCPCONNSTATE_CLOSEWAIT = 8,MIB_TCPCONNSTATE_LASTACK = 9,MIB_TCPCONNSTATE_CLOSING = 10,MIB_TCPCONNSTATE_TIMEWAIT = 11,MIB_EGPNEIGHSTATE_IDLE = 1,MIB_EGPNEIGHSTATE_AQUISITION = 2,MIB_EGPNEIGHSTATE_DOWN = 3,MIB_EGPNEIGHSTATE_UP = 4,MIB_EGPNEIGHSTATE_CEASE = 5,};
enum MACRO_MIB_REGISTERED : __int64 {MIB_REGISTERED_OK = 0,MIB_DUPLICATE_REGISTRATION = -1,MIB_REGISTRATION_FAILED = -2,MIB_UNREGISTERED_OK = 0,MIB_NO_SUCH_REGISTRATION = -1,MIB_UNREGISTRATION_FAILED = -2,};
enum MACRO_MIG : __int64 {MIG_ROUTINE_ARG_DESCRIPTOR_NULL = 0,MIG_ROUTINE_DESCRIPTOR_NULL = 0,MIG_SUBSYSTEM_NULL = 0,MIG_TYPE_ERROR = -300,MIG_REPLY_MISMATCH = -301,MIG_REMOTE_ERROR = -302,MIG_BAD_ID = -303,MIG_BAD_ARGUMENTS = -304,MIG_NO_REPLY = -305,MIG_EXCEPTION = -306,MIG_ARRAY_TOO_LARGE = -307,MIG_SERVER_DIED = -308,MIG_TRAILER_ERROR = -309,};
enum MACRO_MIME {MIME_MAX_SUPER = 16,MIME_MAX_TYPE = 256,MIME_MAX_FILTER = 256,MIME_MAX_BUFFER = 4096,};
enum MACRO_MIN : __int64 {INT8_MIN = -128,INT16_MIN = -32768,INT32_MIN = -2147483648,INT64_MIN = -9223372036854775808,};
enum MACRO_MINARCS {MINARCS = 50,};
enum MACRO_MINBUCKET {MINBUCKET = 4,MAXALLOCSAVE = 8192,};
enum MACRO_MINCORE {MINCORE_INCORE = 0x1,MINCORE_REFERENCED = 0x2,MINCORE_MODIFIED = 0x4,MINCORE_REFERENCED_OTHER = 0x8,MINCORE_MODIFIED_OTHER = 0x10,};
enum MACRO_MINS {MINS_PER_HOUR = 60,};
enum MACRO_MINSIGSTKSZ {MINSIGSTKSZ = 32768,SIGSTKSZ = 131072,};
enum MACRO_MINSPERHOUR {MINSPERHOUR = 60,};
enum MACRO_MLD {MLD_LISTENER_QUERY = 130,MLD_LISTENER_REPORT = 131,MLD_LISTENER_DONE = 132,MLD_LISTENER_REDUCTION = 132,};
enum MACRO_MLD6 {MLD6_LISTENER_QUERY = 130,MLD6_LISTENER_REPORT = 131,MLD6_LISTENER_DONE = 132,};
enum MACRO_MLD6_MTRACE {MLD6_MTRACE_RESP = 200,MLD6_MTRACE = 201,};
enum MACRO_MLDV2 {MLDV2_LISTENER_REPORT = 143,};
enum MACRO_MLD_MTRACE {MLD_MTRACE_RESP = 200,MLD_MTRACE = 201,};
enum MACRO_MM {MM_HARD = 0x1,MM_SOFT = 0x2,MM_FIRM = 0x4,MM_APPL = 0x10,MM_UTIL = 0x20,MM_OPSYS = 0x40,MM_PRINT = 0x100,MM_CONSOLE = 0x200,MM_RECOVER = 0x1000,MM_NRECOV = 0x2000,MM_NOSEV = 0x0,MM_HALT = 0x1,MM_ERROR = 0x2,MM_WARNING = 0x3,MM_INFO = 0x4,MM_NULLLBL = 0x0,MM_NULLSEV = 0x0,MM_NULLMC = 0x0,MM_NULLTXT = 0x0,MM_NULLACT = 0x0,MM_NULLTAG = 0x0,MM_OK = 0x0,MM_NOMSG = 0x1,MM_NOCON = 0x2,MM_NOTOK = 0x3,};
enum MACRO_MNT {MNT_RDONLY = 0x1,MNT_SYNCHRONOUS = 0x2,MNT_NOEXEC = 0x4,MNT_NOSUID = 0x8,MNT_NODEV = 0x10,MNT_UNION = 0x20,MNT_ASYNC = 0x40,MNT_CPROTECT = 0x80,MNT_EXPORTED = 0x100,MNT_QUARANTINE = 0x400,MNT_LOCAL = 0x1000,MNT_QUOTA = 0x2000,MNT_ROOTFS = 0x4000,MNT_DOVOLFS = 0x8000,MNT_DONTBROWSE = 0x100000,MNT_IGNORE_OWNERSHIP = 0x200000,MNT_AUTOMOUNTED = 0x400000,MNT_JOURNALED = 0x800000,MNT_NOUSERXATTR = 0x1000000,MNT_DEFWRITE = 0x2000000,MNT_MULTILABEL = 0x4000000,MNT_NOATIME = 0x10000000,MNT_UNKNOWNPERMISSIONS = 0x200000,MNT_VISFLAGMASK = 0x17F0F5FF,MNT_UPDATE = 0x10000,MNT_RELOAD = 0x40000,MNT_FORCE = 0x80000,MNT_CMDFLAGS = 0xD0000,};
enum MACRO_MNTNAMLEN {MNTNAMLEN = 255,};
enum MACRO_MNTPATHLEN {MNTPATHLEN = 1024,};
enum MACRO_MNT_WAIT {MNT_WAIT = 1,MNT_NOWAIT = 2,MNT_DWAIT = 4,};
enum MACRO_MODE {MODE_S = 1,MODE_B = 2,MODE_C = 3,};
enum MACRO_MODE_EDIT {MODE_EDIT = 0x1,MODE_TRAPSIG = 0x2,MODE_ACK = 0x4,MODE_SOFT_TAB = 0x8,MODE_LIT_ECHO = 0x10,MODE_MASK = 0x1F,MODE_FLOW = 0x100,MODE_ECHO = 0x200,MODE_INBIN = 0x400,MODE_OUTBIN = 0x800,MODE_FORCE = 0x1000,};
enum MACRO_MODE_GET : __int64 {MODE_GET = 160,MODE_GETNEXT = 161,MODE_GETBULK = 165,MODE_GET_STASH = 131,MODE_SET_BEGIN = -1,MODE_SET_RESERVE1 = 0,MODE_SET_RESERVE2 = 1,MODE_SET_ACTION = 2,MODE_SET_COMMIT = 3,MODE_SET_FREE = 4,MODE_SET_UNDO = 5,MODE_BSTEP_PRE_REQUEST = 128,MODE_BSTEP_POST_REQUEST = 130,MODE_BSTEP_OBJECT_LOOKUP = 129,MODE_BSTEP_CHECK_VALUE = 17,MODE_BSTEP_ROW_CREATE = 18,MODE_BSTEP_UNDO_SETUP = 19,MODE_BSTEP_SET_VALUE = 20,MODE_BSTEP_CHECK_CONSISTENCY = 21,MODE_BSTEP_UNDO_SET = 22,MODE_BSTEP_COMMIT = 23,MODE_BSTEP_UNDO_COMMIT = 24,MODE_BSTEP_IRREVERSIBLE_COMMIT = 25,MODE_BSTEP_UNDO_CLEANUP = 26,};
enum MACRO_MON {MON_1 = 21,MON_2 = 22,MON_3 = 23,MON_4 = 24,MON_5 = 25,MON_6 = 26,MON_7 = 27,MON_8 = 28,MON_9 = 29,MON_10 = 30,MON_11 = 31,MON_12 = 32,};
enum MACRO_MONS {MONS_PER_YEAR = 12,};
enum MACRO_MONSPERYEAR {MONSPERYEAR = 12,};
enum MACRO_MOUNTPROC {MOUNTPROC_NULL = 0,MOUNTPROC_MNT = 1,MOUNTPROC_DUMP = 2,MOUNTPROC_UMNT = 3,MOUNTPROC_UMNTALL = 4,MOUNTPROC_EXPORT = 5,MOUNTPROC_EXPORTALL = 6,};
enum MACRO_MOUNTPROG {MOUNTPROG = 100005,};
enum MACRO_MOUNTVERS {MOUNTVERS = 1,};
enum MACRO_MPC {MPC_LOADTIME_FLAG_NOTLATE = 0x1,MPC_LOADTIME_FLAG_UNLOADOK = 0x2,MPC_LOADTIME_FLAG_LABELMBUFS = 0x4,MPC_LOADTIME_BASE_POLICY = 0x8,MPC_RUNTIME_FLAG_REGISTERED = 0x1,};
enum MACRO_MPOOL {MPOOL_DIRTY = 0x1,MPOOL_PINNED = 0x2,};
enum MACRO_MRT {MRT_INIT = 100,MRT_DONE = 101,MRT_ADD_VIF = 102,MRT_DEL_VIF = 103,MRT_ADD_MFC = 104,MRT_DEL_MFC = 105,MRT_VERSION = 106,MRT_ASSERT = 107,};
enum MACRO_MS {MS_ASYNC = 0x1,MS_INVALIDATE = 0x2,MS_SYNC = 0x10,MS_KILLPAGES = 0x4,MS_DEACTIVATE = 0x8,};
enum MACRO_MSEC {MSEC_DIRBIT = 0x8000,MSEC_VAL_MASK = 0x7FFF,};
enum MACRO_MSG {MSG_NOERROR = 0x1000,};
enum MACRO_MSG_COUNT {host_security_MSG_COUNT = 2,ledger_MSG_COUNT = 4,lock_set_MSG_COUNT = 6,processor_MSG_COUNT = 6,processor_set_MSG_COUNT = 10,};
enum MACRO_MSG_MAGIC {MSG_MAGIC = 0x63061,};
enum MACRO_MSG_OOB {MSG_OOB = 0x1,MSG_PEEK = 0x2,MSG_DONTROUTE = 0x4,MSG_EOR = 0x8,MSG_TRUNC = 0x10,MSG_CTRUNC = 0x20,MSG_WAITALL = 0x40,MSG_DONTWAIT = 0x80,MSG_EOF = 0x100,MSG_WAITSTREAM = 0x200,MSG_FLUSH = 0x400,MSG_HOLD = 0x800,MSG_SEND = 0x1000,MSG_HAVEMORE = 0x2000,MSG_RCVMORE = 0x4000,MSG_NEEDSA = 0x10000,};
enum MACRO_MT {MT_FREE = 0,MT_DATA = 1,MT_HEADER = 2,MT_SOCKET = 3,MT_PCB = 4,MT_RTABLE = 5,MT_HTABLE = 6,MT_ATABLE = 7,MT_SONAME = 8,MT_SOOPTS = 10,MT_FTABLE = 11,MT_RIGHTS = 12,MT_IFADDR = 13,MT_CONTROL = 14,MT_OOBDATA = 15,MT_TAG = 16,MT_MAX = 32,};
enum MACRO_MT_LIBRARY {MT_LIBRARY_ID = 0,MT_APPLICATION_ID = 1,MT_TOKEN_ID = 2,MT_MAX_IDS = 3,MT_MAX_SUBIDS = 10,MT_LIB_NONE = 0,MT_LIB_SESSION = 1,MT_LIB_REQUESTID = 2,MT_LIB_MESSAGEID = 3,MT_LIB_SESSIONID = 4,MT_LIB_TRANSID = 5,MT_LIB_MAXIMUM = 6,};
enum MACRO_N {N_GSYM = 0x20,N_FNAME = 0x22,N_FUN = 0x24,N_STSYM = 0x26,N_LCSYM = 0x28,N_MAIN = 0x2A,N_PC = 0x30,N_RSYM = 0x40,N_SLINE = 0x44,N_DSLINE = 0x46,N_BSLINE = 0x48,N_SSYM = 0x60,N_SO = 0x64,N_LSYM = 0x80,N_BINCL = 0x82,N_SOL = 0x84,N_PSYM = 0xA0,N_EINCL = 0xA2,N_ENTRY = 0xA4,N_LBRAC = 0xC0,N_EXCL = 0xC2,N_RBRAC = 0xE0,N_BCOMM = 0xE2,N_ECOMM = 0xE4,N_ECOML = 0xE8,N_LENG = 0xFE,};
enum MACRO_NAME {NAME_MAX = 255,NGROUPS_MAX = 16,UID_MAX = 2147483647,OPEN_MAX = 10240,PATH_MAX = 1024,};
enum MACRO_NAMESERVER {NAMESERVER_PORT = 53,};
enum MACRO_NAME_NOT {NAME_NOT_YOURS = 1000,};
enum MACRO_NAME_SIZE {NAME_SIZE = 12,TTY_SIZE = 16,};
enum MACRO_NBBY {NBBY = 8,};
enum MACRO_NBPG {NBPG = 4096,};
enum MACRO_NCCS {NCCS = 20,};
enum MACRO_NCURSES {NCURSES_VERSION_MAJOR = 5,NCURSES_VERSION_MINOR = 7,NCURSES_VERSION_PATCH = 20081102,NCURSES_MOUSE_VERSION = 1,NCURSES_DLL_H_incl = 1,NCURSES_ENABLE_STDBOOL_H = 1,NCURSES_OPAQUE = 1,NCURSES_TPARM_VARARGS = 1,NCURSES_UNCTRL_H_incl = 1,};
enum MACRO_NCURSES_BUTTON {NCURSES_BUTTON_RELEASED = 0x1,NCURSES_BUTTON_PRESSED = 0x2,NCURSES_BUTTON_CLICKED = 0x4,NCURSES_DOUBLE_CLICKED = 0x8,NCURSES_TRIPLE_CLICKED = 0x10,NCURSES_RESERVED_EVENT = 0x20,};
enum MACRO_NCURSES_ETI {NCURSES_ETI_H_incl = 1,};
enum MACRO_NCURSES_EXT {NCURSES_EXT_FUNCS = 20081102,NCURSES_ATTR_SHIFT = 8,};
enum MACRO_NCURSES_PANEL {NCURSES_PANEL_H_incl = 1,};
enum MACRO_NCURSES_TERM {NCURSES_TERM_H_incl = 1,NCURSES_XNAMES = 1,};
enum MACRO_NCURSES_TERMCAP {NCURSES_TERMCAP_H_incl = 1,};
enum MACRO_NCURSES_TERM_ENTRY {NCURSES_TERM_ENTRY_H_incl = 1,};
enum MACRO_ND {ND_ROUTER_SOLICIT = 133,ND_ROUTER_ADVERT = 134,ND_NEIGHBOR_SOLICIT = 135,ND_NEIGHBOR_ADVERT = 136,ND_REDIRECT = 137,};
enum MACRO_NDEXTENT {NDEXTENT = 50,};
enum MACRO_NDFILE {NDFILE = 25,};
enum MACRO_NDR {NDR_PROTOCOL_2_0 = 0,NDR_INT_BIG_ENDIAN = 0,NDR_INT_LITTLE_ENDIAN = 1,NDR_FLOAT_IEEE = 0,NDR_FLOAT_VAX = 1,NDR_FLOAT_CRAY = 2,NDR_FLOAT_IBM = 3,NDR_CHAR_ASCII = 0,NDR_CHAR_EBCDIC = 1,};
enum MACRO_NDRV {NDRV_DEMUXTYPE_ETHERTYPE = 4,NDRV_DEMUXTYPE_SAP = 5,NDRV_DEMUXTYPE_SNAP = 6,};
enum MACRO_NDRVPROTO {NDRVPROTO_NDRV = 0,};
enum MACRO_NDRV_DELDMXSPEC {NDRV_DELDMXSPEC = 0x2,NDRV_SETDMXSPEC = 0x4,NDRV_ADDMULTICAST = 0x5,NDRV_DELMULTICAST = 0x6,};
enum MACRO_NDRV_PROTOCOL {NDRV_PROTOCOL_DESC_VERS = 1,};
enum MACRO_ND_REDIRECT {ND_REDIRECT_ONLINK = 0,ND_REDIRECT_ROUTER = 1,ND_RA_FLAG_MANAGED = 128,ND_RA_FLAG_OTHER = 64,ND_RA_FLAG_HA = 32,ND_RA_FLAG_RTPREF_MASK = 24,ND_RA_FLAG_RTPREF_HIGH = 8,ND_RA_FLAG_RTPREF_MEDIUM = 0,ND_RA_FLAG_RTPREF_LOW = 24,ND_RA_FLAG_RTPREF_RSV = 16,ND_NA_FLAG_ROUTER = 128,ND_NA_FLAG_SOLICITED = 64,ND_NA_FLAG_OVERRIDE = 32,ND_OPT_SOURCE_LINKADDR = 1,ND_OPT_TARGET_LINKADDR = 2,ND_OPT_PREFIX_INFORMATION = 3,ND_OPT_REDIRECTED_HEADER = 4,ND_OPT_MTU = 5,ND_OPT_RDNSS = 25,ND_OPT_ROUTE_INFO = 200,ND_OPT_PI_FLAG_ONLINK = 128,ND_OPT_PI_FLAG_AUTO = 64,};
enum MACRO_NET {NET_MAXID = 38,NET_RT_DUMP = 1,NET_RT_FLAGS = 2,NET_RT_IFLIST = 3,NET_RT_STAT = 4,NET_RT_TRASH = 5,NET_RT_IFLIST2 = 6,NET_RT_DUMP2 = 7,NET_RT_MAXID = 10,};
enum MACRO_NETDB : __int64 {NETDB_INTERNAL = -1,NETDB_SUCCESS = 0,};
enum MACRO_NETLINK {NETLINK_GENERIC = 0,};
enum MACRO_NETNAME : __int64 {NETNAME_SUCCESS = 0,NETNAME_PENDING = -1,NETNAME_NOT_YOURS = 1000,};
enum MACRO_NETNAME_NO {NETNAME_NO_SUCH_HOST = 1002,NETNAME_HOST_NOT_FOUND = 1003,NETNAME_INVALID_PORT = 1004,};
enum MACRO_NETSNMP {NETSNMP_CAN_DO_CRYPTO = 1,NETSNMP_CAN_USE_SYSCTL = 1,NETSNMP_ENABLE_IPV6 = 1,NETSNMP_ENABLE_SCAPI_AUTHPRIV = 1,NETSNMP_NO_DUMMY_VALUES = 1,NETSNMP_NO_KMEM_USAGE = 1,NETSNMP_PERSISTENT_MASK = 63,NETSNMP_WITH_OPAQUE_SPECIAL_TYPES = 1,};
enum MACRO_NETSNMP_CACHE : __int64 {NETSNMP_CACHE_DONT_INVALIDATE_ON_SET = 0x1,NETSNMP_CACHE_DONT_FREE_BEFORE_LOAD = 0x2,NETSNMP_CACHE_DONT_FREE_EXPIRED = 0x4,NETSNMP_CACHE_DONT_AUTO_RELEASE = 0x8,NETSNMP_CACHE_PRELOAD = 0x10,NETSNMP_CACHE_AUTO_RELOAD = 0x20,NETSNMP_CACHE_HINT_HANDLER_ARGS = 0x1000,NETSNMP_MODE_END_ALL_MODES = 0xFFFFFFFFFFFFFC19,};
enum MACRO_NETSNMP_CALLBACK : __int64 {NETSNMP_CALLBACK_HIGHEST_PRIORITY = -1024,NETSNMP_CALLBACK_DEFAULT_PRIORITY = 0,NETSNMP_CALLBACK_LOWEST_PRIORITY = 1024,NETSNMP_STREAM_QUEUE_LEN = 5,NETSNMP_TRANSPORT_FLAG_STREAM = 1,NETSNMP_TRANSPORT_FLAG_LISTEN = 2,NETSNMP_TRANSPORT_FLAG_TUNNELED = 4,NETSNMP_TRANSPORT_FLAG_TMSTATE = 8,NETSNMP_TRANSPORT_FLAG_EMPTY_PKT = 16,NETSNMP_TRANSPORT_FLAG_OPENED = 32,NETSNMP_TRANSPORT_FLAG_HOSTNAME = 128,NETSNMP_TM_MAX_SECNAME = 256,NETSNMP_DONTWAIT = 128,};
enum MACRO_NETSNMP_CALLBACK_OP {NETSNMP_CALLBACK_OP_RECEIVED_MESSAGE = 1,NETSNMP_CALLBACK_OP_TIMED_OUT = 2,NETSNMP_CALLBACK_OP_SEND_FAILED = 3,NETSNMP_CALLBACK_OP_CONNECT = 4,NETSNMP_CALLBACK_OP_DISCONNECT = 5,};
enum MACRO_NETSNMP_DEFAULT : __int64 {NETSNMP_DEFAULT_SNMP_VERSION = 2,NETSNMP_SNMPV1 = 43690,NETSNMP_SNMPV2ANY = 40960,NETSNMP_SNMPV2AUTH = 32768,NETSNMP_ALWAYS_DEBUG = 0,NETSNMP_USE_REVERSE_ASNENCODING = 1,NETSNMP_DEFAULT_ASNENCODING_DIRECTION = 1,NETSNMP_AGENT_DIRECTORY_MODE = 448,NETSNMP_MAX_PERSISTENT_BACKUPS = 10,NETSNMP_PROCMIBNUM = 2,NETSNMP_SHELLMIBNUM = 8,NETSNMP_MEMMIBNUM = 4,NETSNMP_DISKMIBNUM = 9,NETSNMP_LOADAVEMIBNUM = 10,NETSNMP_VERSIONMIBNUM = 100,NETSNMP_ERRORMIBNUM = 101,NETSNMP_AGENTID = 250,NETSNMP_HPUX9ID = 1,NETSNMP_SUNOS4ID = 2,NETSNMP_SOLARISID = 3,NETSNMP_OSFID = 4,NETSNMP_ULTRIXID = 5,NETSNMP_HPUX10ID = 6,NETSNMP_NETBSD1ID = 7,NETSNMP_FREEBSDID = 8,NETSNMP_IRIXID = 9,NETSNMP_LINUXID = 10,NETSNMP_BSDIID = 11,NETSNMP_OPENBSDID = 12,NETSNMP_WIN32ID = 13,NETSNMP_HPUX11ID = 14,NETSNMP_AIXID = 15,NETSNMP_MACOSXID = 16,NETSNMP_UNKNOWNID = 255,NETSNMP_OSTYPE = 255,NETSNMP_ENTERPRISE_OID = 8072,NETSNMP_ENTERPRISE_DOT_MIB_LENGTH = 7,NETSNMP_SYSTEM_DOT_MIB_LENGTH = 10,NETSNMP_NOTIFICATION_DOT_MIB_LENGTH = 8,NETSNMP_UCDAVIS_OID = 2021,NETSNMP_UCDAVIS_DOT_MIB_LENGTH = 7,NETSNMP_ERRORTIMELENGTH = 600,NETSNMP_EXCACHETIME = 30,NETSNMP_MAXCACHESIZE = 16000,NETSNMP_DEFDISKMINIMUMSPACE = 100000,NETSNMP_MAXREADCOUNT = 100,NETSNMP_SNMPBLOCK = 1,NETSNMP_RESTARTSLEEP = 5,NETSNMP_NUM_COMMUNITIES = 5,NETSNMP_LASTFIELD = -1,NETSNMP_TRANSPORT_UDP_DOMAIN = 1,NETSNMP_TRANSPORT_CALLBACK_DOMAIN = 1,NETSNMP_TRANSPORT_TCP_DOMAIN = 1,NETSNMP_TRANSPORT_UNIX_DOMAIN = 1,NETSNMP_TRANSPORT_UDPIPV6_DOMAIN = 1,NETSNMP_TRANSPORT_TCPIPV6_DOMAIN = 1,NETSNMP_TRANSPORT_ALIAS_DOMAIN = 1,NETSNMP_TRANSPORT_IPV4BASE_DOMAIN = 1,NETSNMP_SECMOD_USM = 1,NETSNMP_OID = 8072,NETSNMP_DOT_MIB_LENGTH = 7,NETSNMP_ENABLE_INLINE = 1,};
enum MACRO_NETSNMP_DS {NETSNMP_DS_MAX_IDS = 3,NETSNMP_DS_MAX_SUBIDS = 48,NETSNMP_DS_LIBRARY_ID = 0,NETSNMP_DS_APPLICATION_ID = 1,NETSNMP_DS_TOKEN_ID = 2,NETSNMP_DS_LIB_MIB_ERRORS = 0,NETSNMP_DS_LIB_SAVE_MIB_DESCRS = 1,NETSNMP_DS_LIB_MIB_COMMENT_TERM = 2,NETSNMP_DS_LIB_MIB_PARSE_LABEL = 3,NETSNMP_DS_LIB_DUMP_PACKET = 4,NETSNMP_DS_LIB_LOG_TIMESTAMP = 5,NETSNMP_DS_LIB_DONT_READ_CONFIGS = 6,NETSNMP_DS_LIB_DISABLE_CONFIG_LOAD = 6,NETSNMP_DS_LIB_MIB_REPLACE = 7,NETSNMP_DS_LIB_PRINT_NUMERIC_ENUM = 8,NETSNMP_DS_LIB_PRINT_NUMERIC_OIDS = 9,NETSNMP_DS_LIB_DONT_BREAKDOWN_OIDS = 10,NETSNMP_DS_LIB_ALARM_DONT_USE_SIG = 11,NETSNMP_DS_LIB_PRINT_FULL_OID = 12,NETSNMP_DS_LIB_QUICK_PRINT = 13,NETSNMP_DS_LIB_RANDOM_ACCESS = 14,NETSNMP_DS_LIB_REGEX_ACCESS = 15,NETSNMP_DS_LIB_DONT_CHECK_RANGE = 16,NETSNMP_DS_LIB_NO_TOKEN_WARNINGS = 17,NETSNMP_DS_LIB_NUMERIC_TIMETICKS = 18,NETSNMP_DS_LIB_ESCAPE_QUOTES = 19,NETSNMP_DS_LIB_REVERSE_ENCODE = 20,NETSNMP_DS_LIB_PRINT_BARE_VALUE = 21,NETSNMP_DS_LIB_EXTENDED_INDEX = 22,NETSNMP_DS_LIB_PRINT_HEX_TEXT = 23,NETSNMP_DS_LIB_PRINT_UCD_STYLE_OID = 24,NETSNMP_DS_LIB_READ_UCD_STYLE_OID = 25,NETSNMP_DS_LIB_HAVE_READ_PREMIB_CONFIG = 26,NETSNMP_DS_LIB_HAVE_READ_CONFIG = 27,NETSNMP_DS_LIB_QUICKE_PRINT = 28,NETSNMP_DS_LIB_DONT_PRINT_UNITS = 29,NETSNMP_DS_LIB_NO_DISPLAY_HINT = 30,NETSNMP_DS_LIB_16BIT_IDS = 31,NETSNMP_DS_LIB_DONT_PERSIST_STATE = 32,NETSNMP_DS_LIB_2DIGIT_HEX_OUTPUT = 33,NETSNMP_DS_LIB_IGNORE_NO_COMMUNITY = 34,NETSNMP_DS_LIB_DISABLE_PERSISTENT_LOAD = 35,NETSNMP_DS_LIB_DISABLE_PERSISTENT_SAVE = 36,NETSNMP_DS_LIB_APPEND_LOGFILES = 37,NETSNMP_DS_LIB_NO_DISCOVERY = 38,NETSNMP_DS_LIB_TSM_USE_PREFIX = 39,NETSNMP_DS_LIB_DONT_LOAD_HOST_FILES = 40,NETSNMP_DS_LIB_MIB_WARNINGS = 0,NETSNMP_DS_LIB_SECLEVEL = 1,NETSNMP_DS_LIB_SNMPVERSION = 2,NETSNMP_DS_LIB_DEFAULT_PORT = 3,NETSNMP_DS_LIB_OID_OUTPUT_FORMAT = 4,NETSNMP_DS_LIB_PRINT_SUFFIX_ONLY = 4,NETSNMP_DS_LIB_STRING_OUTPUT_FORMAT = 5,NETSNMP_DS_LIB_HEX_OUTPUT_LENGTH = 6,NETSNMP_DS_LIB_SERVERSENDBUF = 7,NETSNMP_DS_LIB_SERVERRECVBUF = 8,NETSNMP_DS_LIB_CLIENTSENDBUF = 9,NETSNMP_DS_LIB_CLIENTRECVBUF = 10,NETSNMP_DS_SSHDOMAIN_SOCK_PERM = 11,NETSNMP_DS_SSHDOMAIN_DIR_PERM = 12,NETSNMP_DS_SSHDOMAIN_SOCK_USER = 12,NETSNMP_DS_SSHDOMAIN_SOCK_GROUP = 13,NETSNMP_DS_SNMP_VERSION_1 = 128,NETSNMP_DS_SNMP_VERSION_2c = 1,NETSNMP_DS_SNMP_VERSION_3 = 3,NETSNMP_DS_LIB_SECNAME = 0,NETSNMP_DS_LIB_CONTEXT = 1,NETSNMP_DS_LIB_PASSPHRASE = 2,NETSNMP_DS_LIB_AUTHPASSPHRASE = 3,NETSNMP_DS_LIB_PRIVPASSPHRASE = 4,NETSNMP_DS_LIB_OPTIONALCONFIG = 5,NETSNMP_DS_LIB_APPTYPE = 6,NETSNMP_DS_LIB_COMMUNITY = 7,NETSNMP_DS_LIB_PERSISTENT_DIR = 8,NETSNMP_DS_LIB_CONFIGURATION_DIR = 9,NETSNMP_DS_LIB_SECMODEL = 10,NETSNMP_DS_LIB_MIBDIRS = 11,NETSNMP_DS_LIB_OIDSUFFIX = 12,NETSNMP_DS_LIB_OIDPREFIX = 13,NETSNMP_DS_LIB_CLIENT_ADDR = 14,NETSNMP_DS_LIB_TEMP_FILE_PATTERN = 15,NETSNMP_DS_LIB_AUTHMASTERKEY = 16,NETSNMP_DS_LIB_PRIVMASTERKEY = 17,NETSNMP_DS_LIB_AUTHLOCALIZEDKEY = 18,NETSNMP_DS_LIB_PRIVLOCALIZEDKEY = 19,NETSNMP_DS_LIB_APPTYPES = 20,NETSNMP_DS_LIB_KSM_KEYTAB = 21,NETSNMP_DS_LIB_KSM_SERVICE_NAME = 22,NETSNMP_DS_LIB_X509_CLIENT_PUB = 23,NETSNMP_DS_LIB_X509_SERVER_PUB = 24,NETSNMP_DS_LIB_SSHTOSNMP_SOCKET = 25,NETSNMP_DS_LIB_CERT_EXTRA_SUBDIR = 26,NETSNMP_DS_LIB_HOSTNAME = 27,NETSNMP_DS_LIB_X509_CRL_FILE = 28,NETSNMP_DS_LIB_TLS_ALGORITMS = 29,};
enum MACRO_NETSNMP_DS_AGENT {NETSNMP_DS_AGENT_VERBOSE = 0,NETSNMP_DS_AGENT_ROLE = 1,NETSNMP_DS_AGENT_NO_ROOT_ACCESS = 2,NETSNMP_DS_AGENT_AGENTX_MASTER = 3,NETSNMP_DS_AGENT_QUIT_IMMEDIATELY = 4,NETSNMP_DS_AGENT_DISABLE_PERL = 5,NETSNMP_DS_AGENT_NO_CONNECTION_WARNINGS = 6,NETSNMP_DS_AGENT_LEAVE_PIDFILE = 7,NETSNMP_DS_AGENT_NO_CACHING = 8,NETSNMP_DS_AGENT_STRICT_DISMAN = 9,NETSNMP_DS_AGENT_DONT_RETAIN_NOTIFICATIONS = 10,NETSNMP_DS_AGENT_DONT_LOG_TCPWRAPPERS_CONNECTS = 12,NETSNMP_DS_APP_DONT_LOG = 10,NETSNMP_DS_AGENT_SKIPNFSINHOSTRESOURCES = 13,NETSNMP_DS_AGENT_PROGNAME = 0,NETSNMP_DS_AGENT_X_SOCKET = 1,NETSNMP_DS_AGENT_PORTS = 2,NETSNMP_DS_AGENT_INTERNAL_SECNAME = 3,NETSNMP_DS_AGENT_PERL_INIT_FILE = 4,NETSNMP_DS_SMUX_SOCKET = 5,NETSNMP_DS_NOTIF_LOG_CTX = 6,NETSNMP_DS_AGENT_TRAP_ADDR = 7,NETSNMP_DS_AGENT_FLAGS = 0,NETSNMP_DS_AGENT_USERID = 1,NETSNMP_DS_AGENT_GROUPID = 2,NETSNMP_DS_AGENT_AGENTX_PING_INTERVAL = 3,NETSNMP_DS_AGENT_AGENTX_TIMEOUT = 4,NETSNMP_DS_AGENT_AGENTX_RETRIES = 5,NETSNMP_DS_AGENT_X_SOCK_PERM = 6,NETSNMP_DS_AGENT_X_DIR_PERM = 7,NETSNMP_DS_AGENT_X_SOCK_USER = 8,NETSNMP_DS_AGENT_X_SOCK_GROUP = 9,NETSNMP_DS_AGENT_CACHE_TIMEOUT = 10,NETSNMP_DS_AGENT_INTERNAL_VERSION = 11,NETSNMP_DS_AGENT_INTERNAL_SECLEVEL = 12,NETSNMP_DS_AGENT_MAX_GETBULKREPEATS = 13,NETSNMP_DS_AGENT_MAX_GETBULKRESPONSES = 14,};
enum MACRO_NETSNMP_FILE {NETSNMP_FILE_NO_AUTOCLOSE = 0x1,NETSNMP_FILE_STATS = 0x2,NETSNMP_FILE_AUTO_OPEN = 0x4,};
enum MACRO_NETSNMP_ITERATOR {NETSNMP_ITERATOR_FLAG_SORTED = 0x1,};
enum MACRO_NETSNMP_LOGHANDLER {NETSNMP_LOGHANDLER_STDOUT = 1,NETSNMP_LOGHANDLER_STDERR = 2,NETSNMP_LOGHANDLER_FILE = 3,NETSNMP_LOGHANDLER_SYSLOG = 4,NETSNMP_LOGHANDLER_CALLBACK = 5,NETSNMP_LOGHANDLER_NONE = 6,NETSNMP_SELECT_NOFLAGS = 0,NETSNMP_SELECT_NOALARMS = 1,};
enum MACRO_NETSNMP_NO {NETSNMP_NO_LEGACY_DEFINITIONS = 1,NETSNMP_CAN_GET_DISK_LABEL = 1,};
enum MACRO_NETSNMP_OLDAPI {NETSNMP_OLDAPI_RONLY = 0x1,NETSNMP_OLDAPI_RWRITE = 0x2,NETSNMP_OLDAPI_NOACCESS = 0x0,};
enum MACRO_NETSNMP_PARSE : __int64 {NETSNMP_PARSE_ARGS_NOLOGGING = 0x1,NETSNMP_PARSE_ARGS_NOZERO = 0x2,NETSNMP_PARSE_ARGS_SUCCESS = 0x0,NETSNMP_PARSE_ARGS_SUCCESS_EXIT = 0xFFFFFFFFFFFFFFFE,NETSNMP_PARSE_ARGS_ERROR_USAGE = 0xFFFFFFFFFFFFFFFF,NETSNMP_PARSE_ARGS_ERROR = 0xFFFFFFFFFFFFFFFD,};
enum MACRO_NETSNMP_SEC {NETSNMP_SEC_MODEL_KSM = 2066432,NETSNMP_KSM_SECURITY_MODEL = 2066432,NETSNMP_TSM_SECURITY_MODEL = 4,};
enum MACRO_NETSNMP_STRING {NETSNMP_STRING_OUTPUT_GUESS = 1,NETSNMP_STRING_OUTPUT_ASCII = 2,NETSNMP_STRING_OUTPUT_HEX = 3,NETSNMP_OID_OUTPUT_SUFFIX = 1,NETSNMP_OID_OUTPUT_MODULE = 2,NETSNMP_OID_OUTPUT_FULL = 3,NETSNMP_OID_OUTPUT_NUMERIC = 4,NETSNMP_OID_OUTPUT_UCD = 5,NETSNMP_OID_OUTPUT_NONE = 6,};
enum MACRO_NETSNMP_USE {NETSNMP_USE_OPENSSL = 1,};
enum MACRO_NETSNMP_USE_INLINE {NETSNMP_USE_INLINE = 1,};
enum MACRO_NETSNMP_WATCHER : __int64 {NETSNMP_WATCHER_DIRECT = 2147483648,};
enum MACRO_NEW {NEW_ENV_VAR = 0,NEW_ENV_VALUE = 1,};
enum MACRO_NEWLINE {NEWLINE = 3,TAB = 4,};
enum MACRO_NFF {NFF_BEFORE = 0x1,NFF_AFTER = 0x2,};
enum MACRO_NFS {NFS_PORT = 2049,NFS_PROG = 100003,NFS_VER2 = 2,NFS_VER3 = 3,NFS_VER4 = 4,NFS_V2MAXDATA = 8192,NFS_MAXDGRAMDATA = 16384,NFS_PREFDGRAMDATA = 8192,NFS_MAXDATA = 65536,};
enum MACRO_NFS4 {NFS4_CALLBACK_PROG = 0x4E465343,NFS4_CALLBACK_PROG_VERSION = 0x1,};
enum MACRO_NFS4_FHSIZE {NFS4_FHSIZE = 128,NFS4_VERIFIER_SIZE = 8,NFS4_OPAQUE_LIMIT = 1024,};
enum MACRO_NFS4_TIME {NFS4_TIME_SET_TO_SERVER = 0,NFS4_TIME_SET_TO_CLIENT = 1,};
enum MACRO_NFSCLNT {NFSCLNT_LOCKDANS = 0x200,NFSCLNT_LOCKDNOTIFY = 0x400,};
enum MACRO_NFSERR : __int64 {NFSERR_PERM = 1,NFSERR_NOENT = 2,NFSERR_IO = 5,NFSERR_NXIO = 6,NFSERR_ACCES = 13,NFSERR_EXIST = 17,NFSERR_XDEV = 18,NFSERR_NODEV = 19,NFSERR_NOTDIR = 20,NFSERR_ISDIR = 21,NFSERR_INVAL = 22,NFSERR_FBIG = 27,NFSERR_NOSPC = 28,NFSERR_ROFS = 30,NFSERR_MLINK = 31,NFSERR_NAMETOL = 63,NFSERR_NOTEMPTY = 66,NFSERR_DQUOT = 69,NFSERR_STALE = 70,NFSERR_REMOTE = 71,NFSERR_WFLUSH = 99,NFSERR_BADHANDLE = 10001,NFSERR_NOT_SYNC = 10002,NFSERR_BAD_COOKIE = 10003,NFSERR_NOTSUPP = 10004,NFSERR_TOOSMALL = 10005,NFSERR_SERVERFAULT = 10006,NFSERR_BADTYPE = 10007,NFSERR_JUKEBOX = 10008,NFSERR_TRYLATER = 10008,NFSERR_DELAY = 10008,NFSERR_SAME = 10009,NFSERR_DENIED = 10010,NFSERR_EXPIRED = 10011,NFSERR_LOCKED = 10012,NFSERR_GRACE = 10013,NFSERR_FHEXPIRED = 10014,NFSERR_SHARE_DENIED = 10015,NFSERR_WRONGSEC = 10016,NFSERR_CLID_INUSE = 10017,NFSERR_RESOURCE = 10018,NFSERR_MOVED = 10019,NFSERR_NOFILEHANDLE = 10020,NFSERR_MINOR_VERS_MISMATCH = 10021,NFSERR_STALE_CLIENTID = 10022,NFSERR_STALE_STATEID = 10023,NFSERR_OLD_STATEID = 10024,NFSERR_BAD_STATEID = 10025,NFSERR_BAD_SEQID = 10026,NFSERR_NOT_SAME = 10027,NFSERR_LOCK_RANGE = 10028,NFSERR_SYMLINK = 10029,NFSERR_RESTOREFH = 10030,NFSERR_LEASE_MOVED = 10031,NFSERR_ATTRNOTSUPP = 10032,NFSERR_NO_GRACE = 10033,NFSERR_RECLAIM_BAD = 10034,NFSERR_RECLAIM_CONFLICT = 10035,NFSERR_BADXDR = 10036,NFSERR_LOCKS_HELD = 10037,NFSERR_OPENMODE = 10038,NFSERR_BADOWNER = 10039,NFSERR_BADCHAR = 10040,NFSERR_BADNAME = 10041,NFSERR_BAD_RANGE = 10042,NFSERR_LOCK_NOTSUPP = 10043,NFSERR_OP_ILLEGAL = 10044,NFSERR_DEADLOCK = 10045,NFSERR_FILE_OPEN = 10046,NFSERR_ADMIN_REVOKED = 10047,NFSERR_CB_PATH_DOWN = 10048,NFSERR_STALEWRITEVERF = 30001,NFSERR_DIRBUFDROPPED = 30002,NFSERR_EAUTH = 13,NFSERR_RETVOID = 536870912,NFSERR_AUTHERR = 1073741824,NFSERR_RETERR = 2147483648,};
enum MACRO_NFSMNT {NFSMNT_SOFT = 0x1,NFSMNT_WSIZE = 0x2,NFSMNT_RSIZE = 0x4,NFSMNT_TIMEO = 0x8,NFSMNT_RETRANS = 0x10,NFSMNT_MAXGRPS = 0x20,NFSMNT_INT = 0x40,NFSMNT_NOCONN = 0x80,NFSMNT_NONEGNAMECACHE = 0x100,NFSMNT_NFSV3 = 0x200,NFSMNT_NFSV4 = 0x400,NFSMNT_DUMBTIMR = 0x800,NFSMNT_DEADTIMEOUT = 0x1000,NFSMNT_READAHEAD = 0x2000,NFSMNT_CALLUMNT = 0x4000,NFSMNT_RESVPORT = 0x8000,NFSMNT_RDIRPLUS = 0x10000,NFSMNT_READDIRSIZE = 0x20000,NFSMNT_NOLOCKS = 0x40000,NFSMNT_LOCALLOCKS = 0x80000,NFSMNT_ACREGMIN = 0x100000,NFSMNT_ACREGMAX = 0x200000,NFSMNT_ACDIRMIN = 0x400000,NFSMNT_ACDIRMAX = 0x800000,NFSMNT_SECFLAVOR = 0x1000000,NFSMNT_SECSYSOK = 0x2000000,NFSMNT_MUTEJUKEBOX = 0x4000000,NFSMNT_NOQUOTA = 0x8000000,};
enum MACRO_NFSPROC {NFSPROC_NULL = 0,NFSPROC_GETATTR = 1,NFSPROC_SETATTR = 2,NFSPROC_LOOKUP = 3,NFSPROC_ACCESS = 4,NFSPROC_READLINK = 5,NFSPROC_READ = 6,NFSPROC_WRITE = 7,NFSPROC_CREATE = 8,NFSPROC_MKDIR = 9,NFSPROC_SYMLINK = 10,NFSPROC_MKNOD = 11,NFSPROC_REMOVE = 12,NFSPROC_RMDIR = 13,NFSPROC_RENAME = 14,NFSPROC_LINK = 15,NFSPROC_READDIR = 16,NFSPROC_READDIRPLUS = 17,NFSPROC_FSSTAT = 18,NFSPROC_FSINFO = 19,NFSPROC_PATHCONF = 20,NFSPROC_COMMIT = 21,NFSPROC_NOOP = 22,};
enum MACRO_NFSPROC4 {NFSPROC4_NULL = 0,NFSPROC4_COMPOUND = 1,NFSPROC4_CB_NULL = 0,NFSPROC4_CB_COMPOUND = 1,};
enum MACRO_NFSRV {NFSRV_MAXDATA = 65536,};
enum MACRO_NFSRV_DEADSOCKDELAY {NFSRV_DEADSOCKDELAY = 5,NFSRV_MAXWGATHERDELAY = 100,NFSRV_WGATHERDELAY = 1,};
enum MACRO_NFSSVC {NFSSVC_NFSD = 0x4,NFSSVC_ADDSOCK = 0x8,NFSSVC_EXPORT = 0x200,};
enum MACRO_NFSV2PROC {NFSV2PROC_NULL = 0,NFSV2PROC_GETATTR = 1,NFSV2PROC_SETATTR = 2,NFSV2PROC_NOOP = 3,NFSV2PROC_ROOT = 3,NFSV2PROC_LOOKUP = 4,NFSV2PROC_READLINK = 5,NFSV2PROC_READ = 6,NFSV2PROC_WRITECACHE = 3,NFSV2PROC_WRITE = 8,NFSV2PROC_CREATE = 9,NFSV2PROC_REMOVE = 10,NFSV2PROC_RENAME = 11,NFSV2PROC_LINK = 12,NFSV2PROC_SYMLINK = 13,NFSV2PROC_MKDIR = 14,NFSV2PROC_RMDIR = 15,NFSV2PROC_READDIR = 16,NFSV2PROC_STATFS = 17,};
enum MACRO_NFSV3FSINFO {NFSV3FSINFO_LINK = 0x1,NFSV3FSINFO_SYMLINK = 0x2,NFSV3FSINFO_HOMOGENEOUS = 0x8,NFSV3FSINFO_CANSETTIME = 0x10,};
enum MACRO_NFSX {NFSX_UNSIGNED = 4,NFSX_V2FH = 32,NFSX_V2FATTR = 68,NFSX_V2SATTR = 32,NFSX_V2COOKIE = 4,NFSX_V2STATFS = 20,NFSX_V3FHMAX = 64,NFSX_V3FATTR = 84,NFSX_V3SATTR = 60,NFSX_V3POSTOPATTR = 88,NFSX_V3WCCDATA = 120,NFSX_V3COOKIEVERF = 8,NFSX_V3WRITEVERF = 8,NFSX_V3CREATEVERF = 8,NFSX_V3STATFS = 52,NFSX_V3FSINFO = 48,NFSX_V3PATHCONF = 24,};
enum MACRO_NFS_ACCESS {NFS_ACCESS_READ = 0x1,NFS_ACCESS_LOOKUP = 0x2,NFS_ACCESS_MODIFY = 0x4,NFS_ACCESS_EXTEND = 0x8,NFS_ACCESS_DELETE = 0x10,NFS_ACCESS_EXECUTE = 0x20,NFS_ACCESS_ALL = 0x3F,NFS_WRITE_UNSTABLE = 0x0,NFS_WRITE_DATASYNC = 0x1,NFS_WRITE_FILESYNC = 0x2,NFS_CREATE_UNCHECKED = 0x0,NFS_CREATE_GUARDED = 0x1,NFS_CREATE_EXCLUSIVE = 0x2,NFS_SMALLFH = 0x40,NFS_ATTR_BITMAP_LEN = 0x2,NFS_FATTR_SUPPORTED_ATTRS = 0x0,NFS_FATTR_TYPE = 0x1,NFS_FATTR_FH_EXPIRE_TYPE = 0x2,NFS_FATTR_CHANGE = 0x3,NFS_FATTR_SIZE = 0x4,NFS_FATTR_LINK_SUPPORT = 0x5,NFS_FATTR_SYMLINK_SUPPORT = 0x6,NFS_FATTR_NAMED_ATTR = 0x7,NFS_FATTR_FSID = 0x8,NFS_FATTR_UNIQUE_HANDLES = 0x9,NFS_FATTR_LEASE_TIME = 0xA,NFS_FATTR_RDATTR_ERROR = 0xB,NFS_FATTR_FILEHANDLE = 0x13,NFS_FATTR_ACL = 0xC,NFS_FATTR_ACLSUPPORT = 0xD,NFS_FATTR_ARCHIVE = 0xE,NFS_FATTR_CANSETTIME = 0xF,NFS_FATTR_CASE_INSENSITIVE = 0x10,NFS_FATTR_CASE_PRESERVING = 0x11,NFS_FATTR_CHOWN_RESTRICTED = 0x12,NFS_FATTR_FILEID = 0x14,NFS_FATTR_FILES_AVAIL = 0x15,NFS_FATTR_FILES_FREE = 0x16,NFS_FATTR_FILES_TOTAL = 0x17,NFS_FATTR_FS_LOCATIONS = 0x18,NFS_FATTR_HIDDEN = 0x19,NFS_FATTR_HOMOGENEOUS = 0x1A,NFS_FATTR_MAXFILESIZE = 0x1B,NFS_FATTR_MAXLINK = 0x1C,NFS_FATTR_MAXNAME = 0x1D,NFS_FATTR_MAXREAD = 0x1E,NFS_FATTR_MAXWRITE = 0x1F,NFS_FATTR_MIMETYPE = 0x20,NFS_FATTR_MODE = 0x21,NFS_FATTR_NO_TRUNC = 0x22,NFS_FATTR_NUMLINKS = 0x23,NFS_FATTR_OWNER = 0x24,NFS_FATTR_OWNER_GROUP = 0x25,NFS_FATTR_QUOTA_AVAIL_HARD = 0x26,NFS_FATTR_QUOTA_AVAIL_SOFT = 0x27,NFS_FATTR_QUOTA_USED = 0x28,NFS_FATTR_RAWDEV = 0x29,NFS_FATTR_SPACE_AVAIL = 0x2A,NFS_FATTR_SPACE_FREE = 0x2B,NFS_FATTR_SPACE_TOTAL = 0x2C,NFS_FATTR_SPACE_USED = 0x2D,NFS_FATTR_SYSTEM = 0x2E,NFS_FATTR_TIME_ACCESS = 0x2F,NFS_FATTR_TIME_ACCESS_SET = 0x30,NFS_FATTR_TIME_BACKUP = 0x31,NFS_FATTR_TIME_CREATE = 0x32,NFS_FATTR_TIME_DELTA = 0x33,NFS_FATTR_TIME_METADATA = 0x34,NFS_FATTR_TIME_MODIFY = 0x35,NFS_FATTR_TIME_MODIFY_SET = 0x36,NFS_FATTR_MOUNTED_ON_FILEID = 0x37,NFS_OPEN_NOCREATE = 0x0,NFS_OPEN_CREATE = 0x1,NFS_LIMIT_SIZE = 0x1,NFS_LIMIT_BLOCKS = 0x2,NFS_OPEN_SHARE_ACCESS_NONE = 0x0,NFS_OPEN_SHARE_ACCESS_READ = 0x1,NFS_OPEN_SHARE_ACCESS_WRITE = 0x2,NFS_OPEN_SHARE_ACCESS_BOTH = 0x3,NFS_OPEN_SHARE_DENY_NONE = 0x0,NFS_OPEN_SHARE_DENY_READ = 0x1,NFS_OPEN_SHARE_DENY_WRITE = 0x2,NFS_OPEN_SHARE_DENY_BOTH = 0x3,NFS_OPEN_DELEGATE_NONE = 0x0,NFS_OPEN_DELEGATE_READ = 0x1,NFS_OPEN_DELEGATE_WRITE = 0x2,NFS_CLAIM_NULL = 0x0,NFS_CLAIM_PREVIOUS = 0x1,NFS_CLAIM_DELEGATE_CUR = 0x2,NFS_CLAIM_DELEGATE_PREV = 0x3,NFS_OPEN_RESULT_CONFIRM = 0x2,NFS_OPEN_RESULT_LOCKTYPE_POSIX = 0x4,NFS_LOCK_TYPE_READ = 0x1,NFS_LOCK_TYPE_WRITE = 0x2,NFS_LOCK_TYPE_READW = 0x3,NFS_LOCK_TYPE_WRITEW = 0x4,};
enum MACRO_NFS_DIRBLKSIZ {NFS_DIRBLKSIZ = 4096,NFS_TPRINTF_INITIAL_DELAY = 12,NFS_TPRINTF_DELAY = 30,};
enum MACRO_NFS_EXPORT {NFS_EXPORT_STAT_REC_VERSION = 1,NFS_USER_STAT_REC_VERSION = 1,NFS_USER_STAT_USER_REC = 0,NFS_USER_STAT_PATH_REC = 1,};
enum MACRO_NFS_MAXPATHLEN {NFS_MAXPATHLEN = 1024,NFS_MAXNAMLEN = 255,NFS_MAXPACKET = 16777216,NFS_UDPSOCKBUF = 229376,NFS_FABLKSIZE = 512,};
enum MACRO_NFS_MOUNT {NFS_MOUNT_INFO_VERSION = 0,NFS_MIATTR_BITMAP_LEN = 1,NFS_MIFLAG_BITMAP_LEN = 1,NFS_MIATTR_FLAGS = 0,NFS_MIATTR_ORIG_ARGS = 1,NFS_MIATTR_CUR_ARGS = 2,NFS_MIATTR_CUR_LOC_INDEX = 3,NFS_MIFLAG_DEAD = 0,NFS_MIFLAG_NOTRESP = 1,NFS_MIFLAG_RECOVERY = 2,NFS_FH_VERSION = 1314390016,};
enum MACRO_NFS_NFSSTATS {NFS_NFSSTATS = 1,NFS_EXPORTSTATS = 3,NFS_USERSTATS = 4,NFS_USERCOUNT = 5,NFS_MOUNTINFO = 6,NFS_WDELAYHASHSIZ = 16,};
enum MACRO_NFS_NODEALLOC {NFS_NODEALLOC = 1024,NFS_MNTALLOC = 1024,NFS_SVCALLOC = 512,NFS_ARGSVERSION_XDR = 88,NFS_XDRARGS_VERSION_0 = 0,NFS_MATTR_BITMAP_LEN = 1,NFS_MFLAG_BITMAP_LEN = 1,NFS_MATTR_FLAGS = 0,NFS_MATTR_NFS_VERSION = 1,NFS_MATTR_NFS_MINOR_VERSION = 2,NFS_MATTR_READ_SIZE = 3,NFS_MATTR_WRITE_SIZE = 4,NFS_MATTR_READDIR_SIZE = 5,NFS_MATTR_READAHEAD = 6,NFS_MATTR_ATTRCACHE_REG_MIN = 7,NFS_MATTR_ATTRCACHE_REG_MAX = 8,NFS_MATTR_ATTRCACHE_DIR_MIN = 9,NFS_MATTR_ATTRCACHE_DIR_MAX = 10,NFS_MATTR_LOCK_MODE = 11,NFS_MATTR_SECURITY = 12,NFS_MATTR_MAX_GROUP_LIST = 13,NFS_MATTR_SOCKET_TYPE = 14,NFS_MATTR_NFS_PORT = 15,NFS_MATTR_MOUNT_PORT = 16,NFS_MATTR_REQUEST_TIMEOUT = 17,NFS_MATTR_SOFT_RETRY_COUNT = 18,NFS_MATTR_DEAD_TIMEOUT = 19,NFS_MATTR_FH = 20,NFS_MATTR_FS_LOCATIONS = 21,NFS_MATTR_MNTFLAGS = 22,NFS_MATTR_MNTFROM = 23,NFS_MFLAG_SOFT = 0,NFS_MFLAG_INTR = 1,NFS_MFLAG_RESVPORT = 2,NFS_MFLAG_NOCONNECT = 3,NFS_MFLAG_DUMBTIMER = 4,NFS_MFLAG_CALLUMNT = 5,NFS_MFLAG_RDIRPLUS = 6,NFS_MFLAG_NONEGNAMECACHE = 7,NFS_MFLAG_MUTEJUKEBOX = 8,NFS_MFLAG_EPHEMERAL = 9,NFS_MFLAG_NOCALLBACK = 10,NFS_MFLAG_NONAMEDATTR = 11,NFS_MFLAG_NOACL = 12,NFS_MFLAG_ACLONLY = 13,NFS_MFLAG_NFC = 14,NFS_MFLAG_NOQUOTA = 15,NFS_MFLAG_MNTUDP = 16,NFS_MFLAG_MNTQUICK = 17,NFS_LOCK_MODE_ENABLED = 0,NFS_LOCK_MODE_DISABLED = 1,NFS_LOCK_MODE_LOCAL = 2,NFS_ARGSVERSION = 6,};
enum MACRO_NFS_NPROCS {NFS_NPROCS = 23,};
enum MACRO_NFS_OK {NFS_OK = 0,};
enum MACRO_NFS_OP {NFS_OP_ACCESS = 3,NFS_OP_CLOSE = 4,NFS_OP_COMMIT = 5,NFS_OP_CREATE = 6,NFS_OP_DELEGPURGE = 7,NFS_OP_DELEGRETURN = 8,NFS_OP_GETATTR = 9,NFS_OP_GETFH = 10,NFS_OP_LINK = 11,NFS_OP_LOCK = 12,NFS_OP_LOCKT = 13,NFS_OP_LOCKU = 14,NFS_OP_LOOKUP = 15,NFS_OP_LOOKUPP = 16,NFS_OP_NVERIFY = 17,NFS_OP_OPEN = 18,NFS_OP_OPENATTR = 19,NFS_OP_OPEN_CONFIRM = 20,NFS_OP_OPEN_DOWNGRADE = 21,NFS_OP_PUTFH = 22,NFS_OP_PUTPUBFH = 23,NFS_OP_PUTROOTFH = 24,NFS_OP_READ = 25,NFS_OP_READDIR = 26,NFS_OP_READLINK = 27,NFS_OP_REMOVE = 28,NFS_OP_RENAME = 29,NFS_OP_RENEW = 30,NFS_OP_RESTOREFH = 31,NFS_OP_SAVEFH = 32,NFS_OP_SECINFO = 33,NFS_OP_SETATTR = 34,NFS_OP_SETCLIENTID = 35,NFS_OP_SETCLIENTID_CONFIRM = 36,NFS_OP_VERIFY = 37,NFS_OP_WRITE = 38,NFS_OP_RELEASE_LOCKOWNER = 39,NFS_OP_ILLEGAL = 10044,NFS_OP_CB_GETATTR = 3,NFS_OP_CB_RECALL = 4,NFS_OP_CB_ILLEGAL = 10044,NFS_FH_PERSISTENT = 0,NFS_FH_NOEXPIRE_WITH_OPEN = 1,NFS_FH_VOLATILE_ANY = 2,NFS_FH_VOL_MIGRATION = 4,NFS_FH_VOL_RENAME = 8,NFS_ACL_SUPPORT_ALLOW_ACL = 1,NFS_ACL_SUPPORT_DENY_ACL = 2,NFS_ACL_SUPPORT_AUDIT_ACL = 4,NFS_ACL_SUPPORT_ALARM_ACL = 8,NFS_ACE_ACCESS_ALLOWED_ACE_TYPE = 0,NFS_ACE_ACCESS_DENIED_ACE_TYPE = 1,NFS_ACE_SYSTEM_AUDIT_ACE_TYPE = 2,NFS_ACE_SYSTEM_ALARM_ACE_TYPE = 3,NFS_ACE_FILE_INHERIT_ACE = 1,NFS_ACE_DIRECTORY_INHERIT_ACE = 2,NFS_ACE_NO_PROPAGATE_INHERIT_ACE = 4,NFS_ACE_INHERIT_ONLY_ACE = 8,NFS_ACE_SUCCESSFUL_ACCESS_ACE_FLAG = 16,NFS_ACE_FAILED_ACCESS_ACE_FLAG = 32,NFS_ACE_IDENTIFIER_GROUP = 64,NFS_ACE_INHERITED_ACE = 128,NFS_ACE_READ_DATA = 1,NFS_ACE_LIST_DIRECTORY = 1,NFS_ACE_WRITE_DATA = 2,NFS_ACE_ADD_FILE = 2,NFS_ACE_APPEND_DATA = 4,NFS_ACE_ADD_SUBDIRECTORY = 4,NFS_ACE_READ_NAMED_ATTRS = 8,NFS_ACE_WRITE_NAMED_ATTRS = 16,NFS_ACE_EXECUTE = 32,NFS_ACE_DELETE_CHILD = 64,NFS_ACE_READ_ATTRIBUTES = 128,NFS_ACE_WRITE_ATTRIBUTES = 256,NFS_ACE_DELETE = 65536,NFS_ACE_READ_ACL = 131072,NFS_ACE_WRITE_ACL = 262144,NFS_ACE_WRITE_OWNER = 524288,NFS_ACE_SYNCHRONIZE = 1048576,NFS_ACE_GENERIC_READ = 1179777,NFS_ACE_GENERIC_WRITE = 1442054,NFS_ACE_GENERIC_EXECUTE = 1179808,};
enum MACRO_NFS_TICKINTVL {NFS_TICKINTVL = 5,NFS_MAXREXMIT = 100,NFS_RETRANS = 10,NFS_TRYLATERDEL = 4,NFS_MAXGRPS = 16,NFS_MINATTRTIMO = 5,NFS_MAXATTRTIMO = 60,NFS_MINDIRATTRTIMO = 5,NFS_MAXDIRATTRTIMO = 60,NFS_IOSIZE = 1048576,NFS_RWSIZE = 32768,NFS_WSIZE = 32768,NFS_RSIZE = 32768,NFS_DGRAM_WSIZE = 8192,NFS_DGRAM_RSIZE = 8192,NFS_READDIRSIZE = 32768,NFS_DEFRAHEAD = 16,NFS_MAXRAHEAD = 128,NFS_DEFMAXASYNCWRITES = 128,NFS_DEFASYNCTHREAD = 16,NFS_MAXASYNCTHREAD = 64,NFS_ASYNCTHREADMAXIDLE = 60,NFS_DEFSTATFSRATELIMIT = 10,NFS_REQUESTDELAY = 10,};
enum MACRO_NFS_TIME {NFS_TIME_DONT_CHANGE = 0,NFS_TIME_SET_TO_SERVER = 1,NFS_TIME_SET_TO_CLIENT = 2,};
enum MACRO_NGROUPS {NGROUPS = 16,NOFILE = 256,};
enum MACRO_NI {NI_MAXHOST = 1025,NI_MAXSERV = 32,NI_NOFQDN = 1,NI_NUMERICHOST = 2,NI_NAMEREQD = 4,NI_NUMERICSERV = 8,NI_DGRAM = 16,NI_WITHSCOPEID = 32,};
enum MACRO_NID {NID_member_body = 182,NID_identified_organization = 676,NID_hmac_md5 = 780,NID_hmac_sha1 = 781,NID_certicom_arc = 677,NID_international_organizations = 647,NID_wap = 678,NID_wap_wsg = 679,NID_selected_attribute_types = 394,NID_clearance = 395,NID_ISO_US = 183,NID_X9_57 = 184,NID_X9cm = 185,NID_dsa = 116,NID_dsaWithSHA1 = 113,NID_ansi_X9_62 = 405,NID_X9_62_prime_field = 406,NID_X9_62_characteristic_two_field = 407,NID_X9_62_id_characteristic_two_basis = 680,NID_X9_62_onBasis = 681,NID_X9_62_tpBasis = 682,NID_X9_62_ppBasis = 683,NID_X9_62_id_ecPublicKey = 408,NID_X9_62_c2pnb163v1 = 684,NID_X9_62_c2pnb163v2 = 685,NID_X9_62_c2pnb163v3 = 686,NID_X9_62_c2pnb176v1 = 687,NID_X9_62_c2tnb191v1 = 688,NID_X9_62_c2tnb191v2 = 689,NID_X9_62_c2tnb191v3 = 690,NID_X9_62_c2onb191v4 = 691,NID_X9_62_c2onb191v5 = 692,NID_X9_62_c2pnb208w1 = 693,NID_X9_62_c2tnb239v1 = 694,NID_X9_62_c2tnb239v2 = 695,NID_X9_62_c2tnb239v3 = 696,NID_X9_62_c2onb239v4 = 697,NID_X9_62_c2onb239v5 = 698,NID_X9_62_c2pnb272w1 = 699,NID_X9_62_c2pnb304w1 = 700,NID_X9_62_c2tnb359v1 = 701,NID_X9_62_c2pnb368w1 = 702,NID_X9_62_c2tnb431r1 = 703,NID_X9_62_prime192v1 = 409,NID_X9_62_prime192v2 = 410,NID_X9_62_prime192v3 = 411,NID_X9_62_prime239v1 = 412,NID_X9_62_prime239v2 = 413,NID_X9_62_prime239v3 = 414,NID_X9_62_prime256v1 = 415,NID_ecdsa_with_SHA1 = 416,NID_ecdsa_with_Recommended = 791,NID_ecdsa_with_Specified = 792,NID_ecdsa_with_SHA224 = 793,NID_ecdsa_with_SHA256 = 794,NID_ecdsa_with_SHA384 = 795,NID_ecdsa_with_SHA512 = 796,NID_secp112r1 = 704,NID_secp112r2 = 705,NID_secp128r1 = 706,NID_secp128r2 = 707,NID_secp160k1 = 708,NID_secp160r1 = 709,NID_secp160r2 = 710,NID_secp192k1 = 711,NID_secp224k1 = 712,NID_secp224r1 = 713,NID_secp256k1 = 714,NID_secp384r1 = 715,NID_secp521r1 = 716,NID_sect113r1 = 717,NID_sect113r2 = 718,NID_sect131r1 = 719,NID_sect131r2 = 720,NID_sect163k1 = 721,NID_sect163r1 = 722,NID_sect163r2 = 723,NID_sect193r1 = 724,NID_sect193r2 = 725,NID_sect233k1 = 726,NID_sect233r1 = 727,NID_sect239k1 = 728,NID_sect283k1 = 729,NID_sect283r1 = 730,NID_sect409k1 = 731,NID_sect409r1 = 732,NID_sect571k1 = 733,NID_sect571r1 = 734,NID_wap_wsg_idm_ecid_wtls1 = 735,NID_wap_wsg_idm_ecid_wtls3 = 736,NID_wap_wsg_idm_ecid_wtls4 = 737,NID_wap_wsg_idm_ecid_wtls5 = 738,NID_wap_wsg_idm_ecid_wtls6 = 739,NID_wap_wsg_idm_ecid_wtls7 = 740,NID_wap_wsg_idm_ecid_wtls8 = 741,NID_wap_wsg_idm_ecid_wtls9 = 742,NID_wap_wsg_idm_ecid_wtls10 = 743,NID_wap_wsg_idm_ecid_wtls11 = 744,NID_wap_wsg_idm_ecid_wtls12 = 745,NID_cast5_cbc = 108,NID_cast5_ecb = 109,NID_cast5_cfb64 = 110,NID_cast5_ofb64 = 111,NID_pbeWithMD5AndCast5_CBC = 112,NID_id_PasswordBasedMAC = 782,NID_id_DHBasedMac = 783,NID_rsadsi = 1,NID_pkcs = 2,NID_pkcs1 = 186,NID_rsaEncryption = 6,NID_md2WithRSAEncryption = 7,NID_md4WithRSAEncryption = 396,NID_md5WithRSAEncryption = 8,NID_sha1WithRSAEncryption = 65,NID_sha256WithRSAEncryption = 668,NID_sha384WithRSAEncryption = 669,NID_sha512WithRSAEncryption = 670,NID_sha224WithRSAEncryption = 671,NID_pkcs3 = 27,NID_dhKeyAgreement = 28,NID_pkcs5 = 187,NID_pbeWithMD2AndDES_CBC = 9,NID_pbeWithMD5AndDES_CBC = 10,NID_pbeWithMD2AndRC2_CBC = 168,NID_pbeWithMD5AndRC2_CBC = 169,NID_pbeWithSHA1AndDES_CBC = 170,NID_pbeWithSHA1AndRC2_CBC = 68,NID_id_pbkdf2 = 69,NID_pbes2 = 161,NID_pbmac1 = 162,NID_pkcs7 = 20,NID_pkcs7_data = 21,NID_pkcs7_signed = 22,NID_pkcs7_enveloped = 23,NID_pkcs7_signedAndEnveloped = 24,NID_pkcs7_digest = 25,NID_pkcs7_encrypted = 26,NID_pkcs9 = 47,NID_pkcs9_emailAddress = 48,NID_pkcs9_unstructuredName = 49,NID_pkcs9_contentType = 50,NID_pkcs9_messageDigest = 51,NID_pkcs9_signingTime = 52,NID_pkcs9_countersignature = 53,NID_pkcs9_challengePassword = 54,NID_pkcs9_unstructuredAddress = 55,NID_pkcs9_extCertAttributes = 56,NID_ext_req = 172,NID_SMIMECapabilities = 167,NID_SMIME = 188,NID_id_smime_mod = 189,NID_id_smime_ct = 190,NID_id_smime_aa = 191,NID_id_smime_alg = 192,NID_id_smime_cd = 193,NID_id_smime_spq = 194,NID_id_smime_cti = 195,NID_id_smime_mod_cms = 196,NID_id_smime_mod_ess = 197,NID_id_smime_mod_oid = 198,NID_id_smime_mod_msg_v3 = 199,NID_id_smime_mod_ets_eSignature_88 = 200,NID_id_smime_mod_ets_eSignature_97 = 201,NID_id_smime_mod_ets_eSigPolicy_88 = 202,NID_id_smime_mod_ets_eSigPolicy_97 = 203,NID_id_smime_ct_receipt = 204,NID_id_smime_ct_authData = 205,NID_id_smime_ct_publishCert = 206,NID_id_smime_ct_TSTInfo = 207,NID_id_smime_ct_TDTInfo = 208,NID_id_smime_ct_contentInfo = 209,NID_id_smime_ct_DVCSRequestData = 210,NID_id_smime_ct_DVCSResponseData = 211,NID_id_smime_ct_compressedData = 786,NID_id_ct_asciiTextWithCRLF = 787,NID_id_smime_aa_receiptRequest = 212,NID_id_smime_aa_securityLabel = 213,NID_id_smime_aa_mlExpandHistory = 214,NID_id_smime_aa_contentHint = 215,NID_id_smime_aa_msgSigDigest = 216,NID_id_smime_aa_encapContentType = 217,NID_id_smime_aa_contentIdentifier = 218,NID_id_smime_aa_macValue = 219,NID_id_smime_aa_equivalentLabels = 220,NID_id_smime_aa_contentReference = 221,NID_id_smime_aa_encrypKeyPref = 222,NID_id_smime_aa_signingCertificate = 223,NID_id_smime_aa_smimeEncryptCerts = 224,NID_id_smime_aa_timeStampToken = 225,NID_id_smime_aa_ets_sigPolicyId = 226,NID_id_smime_aa_ets_commitmentType = 227,NID_id_smime_aa_ets_signerLocation = 228,NID_id_smime_aa_ets_signerAttr = 229,NID_id_smime_aa_ets_otherSigCert = 230,NID_id_smime_aa_ets_contentTimestamp = 231,NID_id_smime_aa_ets_CertificateRefs = 232,NID_id_smime_aa_ets_RevocationRefs = 233,NID_id_smime_aa_ets_certValues = 234,NID_id_smime_aa_ets_revocationValues = 235,NID_id_smime_aa_ets_escTimeStamp = 236,NID_id_smime_aa_ets_certCRLTimestamp = 237,NID_id_smime_aa_ets_archiveTimeStamp = 238,NID_id_smime_aa_signatureType = 239,NID_id_smime_aa_dvcs_dvc = 240,NID_id_smime_alg_ESDHwith3DES = 241,NID_id_smime_alg_ESDHwithRC2 = 242,NID_id_smime_alg_3DESwrap = 243,NID_id_smime_alg_RC2wrap = 244,NID_id_smime_alg_ESDH = 245,NID_id_smime_alg_CMS3DESwrap = 246,NID_id_smime_alg_CMSRC2wrap = 247,NID_id_smime_cd_ldap = 248,NID_id_smime_spq_ets_sqt_uri = 249,NID_id_smime_spq_ets_sqt_unotice = 250,NID_id_smime_cti_ets_proofOfOrigin = 251,NID_id_smime_cti_ets_proofOfReceipt = 252,NID_id_smime_cti_ets_proofOfDelivery = 253,NID_id_smime_cti_ets_proofOfSender = 254,NID_id_smime_cti_ets_proofOfApproval = 255,NID_id_smime_cti_ets_proofOfCreation = 256,NID_friendlyName = 156,NID_localKeyID = 157,NID_ms_csp_name = 417,NID_LocalKeySet = 856,NID_x509Certificate = 158,NID_sdsiCertificate = 159,NID_x509Crl = 160,NID_pbe_WithSHA1And128BitRC4 = 144,NID_pbe_WithSHA1And40BitRC4 = 145,NID_pbe_WithSHA1And3_Key_TripleDES_CBC = 146,NID_pbe_WithSHA1And2_Key_TripleDES_CBC = 147,NID_pbe_WithSHA1And128BitRC2_CBC = 148,NID_pbe_WithSHA1And40BitRC2_CBC = 149,NID_keyBag = 150,NID_pkcs8ShroudedKeyBag = 151,NID_certBag = 152,NID_crlBag = 153,NID_secretBag = 154,NID_safeContentsBag = 155,NID_md2 = 3,NID_md4 = 257,NID_md5 = 4,NID_md5_sha1 = 114,NID_hmacWithMD5 = 797,NID_hmacWithSHA1 = 163,NID_hmacWithSHA224 = 798,NID_hmacWithSHA256 = 799,NID_hmacWithSHA384 = 800,NID_hmacWithSHA512 = 801,NID_rc2_cbc = 37,NID_rc2_ecb = 38,NID_rc2_cfb64 = 39,NID_rc2_ofb64 = 40,NID_rc2_40_cbc = 98,NID_rc2_64_cbc = 166,NID_rc4 = 5,NID_rc4_40 = 97,NID_des_ede3_cbc = 44,NID_rc5_cbc = 120,NID_rc5_ecb = 121,NID_rc5_cfb64 = 122,NID_rc5_ofb64 = 123,NID_ms_ext_req = 171,NID_ms_code_ind = 134,NID_ms_code_com = 135,NID_ms_ctl_sign = 136,NID_ms_sgc = 137,NID_ms_efs = 138,NID_ms_smartcard_login = 648,NID_ms_upn = 649,NID_idea_cbc = 34,NID_idea_ecb = 36,NID_idea_cfb64 = 35,NID_idea_ofb64 = 46,NID_bf_cbc = 91,NID_bf_ecb = 92,NID_bf_cfb64 = 93,NID_bf_ofb64 = 94,NID_id_pkix = 127,NID_id_pkix_mod = 258,NID_id_pe = 175,NID_id_qt = 259,NID_id_kp = 128,NID_id_it = 260,NID_id_pkip = 261,NID_id_alg = 262,NID_id_cmc = 263,NID_id_on = 264,NID_id_pda = 265,NID_id_aca = 266,NID_id_qcs = 267,NID_id_cct = 268,NID_id_ppl = 662,NID_id_ad = 176,NID_id_pkix1_explicit_88 = 269,NID_id_pkix1_implicit_88 = 270,NID_id_pkix1_explicit_93 = 271,NID_id_pkix1_implicit_93 = 272,NID_id_mod_crmf = 273,NID_id_mod_cmc = 274,NID_id_mod_kea_profile_88 = 275,NID_id_mod_kea_profile_93 = 276,NID_id_mod_cmp = 277,NID_id_mod_qualified_cert_88 = 278,NID_id_mod_qualified_cert_93 = 279,NID_id_mod_attribute_cert = 280,NID_id_mod_timestamp_protocol = 281,NID_id_mod_ocsp = 282,NID_id_mod_dvcs = 283,NID_id_mod_cmp2000 = 284,NID_info_access = 177,NID_biometricInfo = 285,NID_qcStatements = 286,NID_ac_auditEntity = 287,NID_ac_targeting = 288,NID_aaControls = 289,NID_sbgp_ipAddrBlock = 290,NID_sbgp_autonomousSysNum = 291,NID_sbgp_routerIdentifier = 292,NID_ac_proxying = 397,NID_sinfo_access = 398,NID_proxyCertInfo = 663,NID_id_qt_cps = 164,NID_id_qt_unotice = 165,NID_textNotice = 293,NID_server_auth = 129,NID_client_auth = 130,NID_code_sign = 131,NID_email_protect = 132,NID_ipsecEndSystem = 294,NID_ipsecTunnel = 295,NID_ipsecUser = 296,NID_time_stamp = 133,NID_OCSP_sign = 180,NID_dvcs = 297,NID_id_it_caProtEncCert = 298,NID_id_it_signKeyPairTypes = 299,NID_id_it_encKeyPairTypes = 300,NID_id_it_preferredSymmAlg = 301,NID_id_it_caKeyUpdateInfo = 302,NID_id_it_currentCRL = 303,NID_id_it_unsupportedOIDs = 304,NID_id_it_subscriptionRequest = 305,NID_id_it_subscriptionResponse = 306,NID_id_it_keyPairParamReq = 307,NID_id_it_keyPairParamRep = 308,NID_id_it_revPassphrase = 309,NID_id_it_implicitConfirm = 310,NID_id_it_confirmWaitTime = 311,NID_id_it_origPKIMessage = 312,NID_id_it_suppLangTags = 784,NID_id_regCtrl = 313,NID_id_regInfo = 314,NID_id_regCtrl_regToken = 315,NID_id_regCtrl_authenticator = 316,NID_id_regCtrl_pkiPublicationInfo = 317,NID_id_regCtrl_pkiArchiveOptions = 318,NID_id_regCtrl_oldCertID = 319,NID_id_regCtrl_protocolEncrKey = 320,NID_id_regInfo_utf8Pairs = 321,NID_id_regInfo_certReq = 322,NID_id_alg_des40 = 323,NID_id_alg_noSignature = 324,NID_id_alg_dh_sig_hmac_sha1 = 325,NID_id_alg_dh_pop = 326,NID_id_cmc_statusInfo = 327,NID_id_cmc_identification = 328,NID_id_cmc_identityProof = 329,NID_id_cmc_dataReturn = 330,NID_id_cmc_transactionId = 331,NID_id_cmc_senderNonce = 332,NID_id_cmc_recipientNonce = 333,NID_id_cmc_addExtensions = 334,NID_id_cmc_encryptedPOP = 335,NID_id_cmc_decryptedPOP = 336,NID_id_cmc_lraPOPWitness = 337,NID_id_cmc_getCert = 338,NID_id_cmc_getCRL = 339,NID_id_cmc_revokeRequest = 340,NID_id_cmc_regInfo = 341,NID_id_cmc_responseInfo = 342,NID_id_cmc_queryPending = 343,NID_id_cmc_popLinkRandom = 344,NID_id_cmc_popLinkWitness = 345,NID_id_cmc_confirmCertAcceptance = 346,NID_id_on_personalData = 347,NID_id_on_permanentIdentifier = 858,NID_id_pda_dateOfBirth = 348,NID_id_pda_placeOfBirth = 349,NID_id_pda_gender = 351,NID_id_pda_countryOfCitizenship = 352,NID_id_pda_countryOfResidence = 353,NID_id_aca_authenticationInfo = 354,NID_id_aca_accessIdentity = 355,NID_id_aca_chargingIdentity = 356,NID_id_aca_group = 357,NID_id_aca_role = 358,NID_id_aca_encAttrs = 399,NID_id_qcs_pkixQCSyntax_v1 = 359,NID_id_cct_crs = 360,NID_id_cct_PKIData = 361,NID_id_cct_PKIResponse = 362,NID_id_ppl_anyLanguage = 664,NID_id_ppl_inheritAll = 665,NID_Independent = 667,NID_ad_OCSP = 178,NID_ad_ca_issuers = 179,NID_ad_timeStamping = 363,NID_ad_dvcs = 364,NID_caRepository = 785,NID_id_pkix_OCSP_basic = 365,NID_id_pkix_OCSP_Nonce = 366,NID_id_pkix_OCSP_CrlID = 367,NID_id_pkix_OCSP_acceptableResponses = 368,NID_id_pkix_OCSP_noCheck = 369,NID_id_pkix_OCSP_archiveCutoff = 370,NID_id_pkix_OCSP_serviceLocator = 371,NID_id_pkix_OCSP_extendedStatus = 372,NID_id_pkix_OCSP_valid = 373,NID_id_pkix_OCSP_path = 374,NID_id_pkix_OCSP_trustRoot = 375,NID_algorithm = 376,NID_md5WithRSA = 104,NID_des_ecb = 29,NID_des_cbc = 31,NID_des_ofb64 = 45,NID_des_cfb64 = 30,NID_rsaSignature = 377,NID_dsa_2 = 67,NID_dsaWithSHA = 66,NID_shaWithRSAEncryption = 42,NID_des_ede_ecb = 32,NID_des_ede3_ecb = 33,NID_des_ede_cbc = 43,NID_des_ede_cfb64 = 60,NID_des_ede3_cfb64 = 61,NID_des_ede_ofb64 = 62,NID_des_ede3_ofb64 = 63,NID_desx_cbc = 80,NID_sha = 41,NID_sha1 = 64,NID_dsaWithSHA1_2 = 70,NID_sha1WithRSA = 115,NID_ripemd160 = 117,NID_ripemd160WithRSA = 119,NID_sxnet = 143,NID_X500 = 11,NID_X509 = 12,NID_commonName = 13,NID_surname = 100,NID_serialNumber = 105,NID_countryName = 14,NID_localityName = 15,NID_stateOrProvinceName = 16,NID_streetAddress = 660,NID_organizationName = 17,NID_organizationalUnitName = 18,NID_title = 106,NID_description = 107,NID_searchGuide = 859,NID_businessCategory = 860,NID_postalAddress = 861,NID_postalCode = 661,NID_postOfficeBox = 862,NID_physicalDeliveryOfficeName = 863,NID_telephoneNumber = 864,NID_telexNumber = 865,NID_teletexTerminalIdentifier = 866,NID_facsimileTelephoneNumber = 867,NID_x121Address = 868,NID_internationaliSDNNumber = 869,NID_registeredAddress = 870,NID_destinationIndicator = 871,NID_preferredDeliveryMethod = 872,NID_presentationAddress = 873,NID_supportedApplicationContext = 874,NID_member = 875,NID_owner = 876,NID_roleOccupant = 877,NID_seeAlso = 878,NID_userPassword = 879,NID_userCertificate = 880,NID_cACertificate = 881,NID_authorityRevocationList = 882,NID_certificateRevocationList = 883,NID_crossCertificatePair = 884,NID_name = 173,NID_givenName = 99,NID_initials = 101,NID_generationQualifier = 509,NID_x500UniqueIdentifier = 503,NID_dnQualifier = 174,NID_enhancedSearchGuide = 885,NID_protocolInformation = 886,NID_distinguishedName = 887,NID_uniqueMember = 888,NID_houseIdentifier = 889,NID_supportedAlgorithms = 890,NID_deltaRevocationList = 891,NID_dmdName = 892,NID_pseudonym = 510,NID_role = 400,NID_X500algorithms = 378,NID_rsa = 19,NID_mdc2WithRSA = 96,NID_mdc2 = 95,NID_id_ce = 81,NID_subject_directory_attributes = 769,NID_subject_key_identifier = 82,NID_key_usage = 83,NID_private_key_usage_period = 84,NID_subject_alt_name = 85,NID_issuer_alt_name = 86,NID_basic_constraints = 87,NID_crl_number = 88,NID_crl_reason = 141,NID_invalidity_date = 142,NID_delta_crl = 140,NID_issuing_distribution_point = 770,NID_certificate_issuer = 771,NID_name_constraints = 666,NID_crl_distribution_points = 103,NID_certificate_policies = 89,NID_any_policy = 746,NID_policy_mappings = 747,NID_authority_key_identifier = 90,NID_policy_constraints = 401,NID_ext_key_usage = 126,NID_freshest_crl = 857,NID_inhibit_any_policy = 748,NID_target_information = 402,NID_no_rev_avail = 403,NID_netscape = 57,NID_netscape_cert_extension = 58,NID_netscape_data_type = 59,NID_netscape_cert_type = 71,NID_netscape_base_url = 72,NID_netscape_revocation_url = 73,NID_netscape_ca_revocation_url = 74,NID_netscape_renewal_url = 75,NID_netscape_ca_policy_url = 76,NID_netscape_ssl_server_name = 77,NID_netscape_comment = 78,NID_netscape_cert_sequence = 79,NID_ns_sgc = 139,NID_org = 379,NID_dod = 380,NID_iana = 381,NID_Directory = 382,NID_Management = 383,NID_Experimental = 384,NID_Private = 385,NID_Security = 386,NID_SNMPv2 = 387,NID_Mail = 388,NID_Enterprises = 389,NID_dcObject = 390,NID_mime_mhs = 504,NID_mime_mhs_headings = 505,NID_mime_mhs_bodies = 506,NID_id_hex_partial_message = 507,NID_id_hex_multipart_message = 508,NID_rle_compression = 124,NID_zlib_compression = 125,NID_aes_128_ecb = 418,NID_aes_128_cbc = 419,NID_aes_128_ofb128 = 420,NID_aes_128_cfb128 = 421,NID_aes_192_ecb = 422,NID_aes_192_cbc = 423,NID_aes_192_ofb128 = 424,NID_aes_192_cfb128 = 425,NID_aes_256_ecb = 426,NID_aes_256_cbc = 427,NID_aes_256_ofb128 = 428,NID_aes_256_cfb128 = 429,NID_aes_128_cfb1 = 650,NID_aes_192_cfb1 = 651,NID_aes_256_cfb1 = 652,NID_aes_128_cfb8 = 653,NID_aes_192_cfb8 = 654,NID_aes_256_cfb8 = 655,NID_des_cfb1 = 656,NID_des_cfb8 = 657,NID_des_ede3_cfb1 = 658,NID_des_ede3_cfb8 = 659,NID_id_aes128_wrap = 788,NID_id_aes192_wrap = 789,NID_id_aes256_wrap = 790,NID_sha256 = 672,NID_sha384 = 673,NID_sha512 = 674,NID_sha224 = 675,NID_dsa_with_SHA224 = 802,NID_dsa_with_SHA256 = 803,NID_hold_instruction_code = 430,NID_hold_instruction_none = 431,NID_hold_instruction_call_issuer = 432,NID_hold_instruction_reject = 433,NID_data = 434,NID_pss = 435,NID_ucl = 436,NID_pilot = 437,NID_pilotAttributeType = 438,NID_pilotAttributeSyntax = 439,NID_pilotObjectClass = 440,NID_pilotGroups = 441,NID_iA5StringSyntax = 442,NID_caseIgnoreIA5StringSyntax = 443,NID_pilotObject = 444,NID_pilotPerson = 445,NID_account = 446,NID_document = 447,NID_room = 448,NID_documentSeries = 449,NID_Domain = 392,NID_rFC822localPart = 450,NID_dNSDomain = 451,NID_domainRelatedObject = 452,NID_friendlyCountry = 453,NID_simpleSecurityObject = 454,NID_pilotOrganization = 455,NID_pilotDSA = 456,NID_qualityLabelledData = 457,NID_userId = 458,NID_textEncodedORAddress = 459,NID_rfc822Mailbox = 460,NID_info = 461,NID_favouriteDrink = 462,NID_roomNumber = 463,NID_photo = 464,NID_userClass = 465,NID_host = 466,NID_manager = 467,NID_documentIdentifier = 468,NID_documentTitle = 469,NID_documentVersion = 470,NID_documentAuthor = 471,NID_documentLocation = 472,NID_homeTelephoneNumber = 473,NID_secretary = 474,NID_otherMailbox = 475,NID_lastModifiedTime = 476,NID_lastModifiedBy = 477,NID_domainComponent = 391,NID_aRecord = 478,NID_pilotAttributeType27 = 479,NID_mXRecord = 480,NID_nSRecord = 481,NID_sOARecord = 482,NID_cNAMERecord = 483,NID_associatedDomain = 484,NID_associatedName = 485,NID_homePostalAddress = 486,NID_personalTitle = 487,NID_mobileTelephoneNumber = 488,NID_pagerTelephoneNumber = 489,NID_friendlyCountryName = 490,NID_organizationalStatus = 491,NID_janetMailbox = 492,NID_mailPreferenceOption = 493,NID_buildingName = 494,NID_dSAQuality = 495,NID_singleLevelQuality = 496,NID_subtreeMinimumQuality = 497,NID_subtreeMaximumQuality = 498,NID_personalSignature = 499,NID_dITRedirect = 500,NID_audio = 501,NID_documentPublisher = 502,NID_id_set = 512,NID_set_ctype = 513,NID_set_msgExt = 514,NID_set_attr = 515,NID_set_policy = 516,NID_set_certExt = 517,NID_set_brand = 518,NID_setct_PANData = 519,NID_setct_PANToken = 520,NID_setct_PANOnly = 521,NID_setct_OIData = 522,NID_setct_PI = 523,NID_setct_PIData = 524,NID_setct_PIDataUnsigned = 525,NID_setct_HODInput = 526,NID_setct_AuthResBaggage = 527,NID_setct_AuthRevReqBaggage = 528,NID_setct_AuthRevResBaggage = 529,NID_setct_CapTokenSeq = 530,NID_setct_PInitResData = 531,NID_setct_PI_TBS = 532,NID_setct_PResData = 533,NID_setct_AuthReqTBS = 534,NID_setct_AuthResTBS = 535,NID_setct_AuthResTBSX = 536,NID_setct_AuthTokenTBS = 537,NID_setct_CapTokenData = 538,NID_setct_CapTokenTBS = 539,NID_setct_AcqCardCodeMsg = 540,NID_setct_AuthRevReqTBS = 541,NID_setct_AuthRevResData = 542,NID_setct_AuthRevResTBS = 543,NID_setct_CapReqTBS = 544,NID_setct_CapReqTBSX = 545,NID_setct_CapResData = 546,NID_setct_CapRevReqTBS = 547,NID_setct_CapRevReqTBSX = 548,NID_setct_CapRevResData = 549,NID_setct_CredReqTBS = 550,NID_setct_CredReqTBSX = 551,NID_setct_CredResData = 552,NID_setct_CredRevReqTBS = 553,NID_setct_CredRevReqTBSX = 554,NID_setct_CredRevResData = 555,NID_setct_PCertReqData = 556,NID_setct_PCertResTBS = 557,NID_setct_BatchAdminReqData = 558,NID_setct_BatchAdminResData = 559,NID_setct_CardCInitResTBS = 560,NID_setct_MeAqCInitResTBS = 561,NID_setct_RegFormResTBS = 562,NID_setct_CertReqData = 563,NID_setct_CertReqTBS = 564,NID_setct_CertResData = 565,NID_setct_CertInqReqTBS = 566,NID_setct_ErrorTBS = 567,NID_setct_PIDualSignedTBE = 568,NID_setct_PIUnsignedTBE = 569,NID_setct_AuthReqTBE = 570,NID_setct_AuthResTBE = 571,NID_setct_AuthResTBEX = 572,NID_setct_AuthTokenTBE = 573,NID_setct_CapTokenTBE = 574,NID_setct_CapTokenTBEX = 575,NID_setct_AcqCardCodeMsgTBE = 576,NID_setct_AuthRevReqTBE = 577,NID_setct_AuthRevResTBE = 578,NID_setct_AuthRevResTBEB = 579,NID_setct_CapReqTBE = 580,NID_setct_CapReqTBEX = 581,NID_setct_CapResTBE = 582,NID_setct_CapRevReqTBE = 583,NID_setct_CapRevReqTBEX = 584,NID_setct_CapRevResTBE = 585,NID_setct_CredReqTBE = 586,NID_setct_CredReqTBEX = 587,NID_setct_CredResTBE = 588,NID_setct_CredRevReqTBE = 589,NID_setct_CredRevReqTBEX = 590,NID_setct_CredRevResTBE = 591,NID_setct_BatchAdminReqTBE = 592,NID_setct_BatchAdminResTBE = 593,NID_setct_RegFormReqTBE = 594,NID_setct_CertReqTBE = 595,NID_setct_CertReqTBEX = 596,NID_setct_CertResTBE = 597,NID_setct_CRLNotificationTBS = 598,NID_setct_CRLNotificationResTBS = 599,NID_setct_BCIDistributionTBS = 600,NID_setext_genCrypt = 601,NID_setext_miAuth = 602,NID_setext_pinSecure = 603,NID_setext_pinAny = 604,NID_setext_track2 = 605,NID_setext_cv = 606,NID_set_policy_root = 607,NID_setCext_hashedRoot = 608,NID_setCext_certType = 609,NID_setCext_merchData = 610,NID_setCext_cCertRequired = 611,NID_setCext_tunneling = 612,NID_setCext_setExt = 613,NID_setCext_setQualf = 614,NID_setCext_PGWYcapabilities = 615,NID_setCext_TokenIdentifier = 616,NID_setCext_Track2Data = 617,NID_setCext_TokenType = 618,NID_setCext_IssuerCapabilities = 619,NID_setAttr_Cert = 620,NID_setAttr_PGWYcap = 621,NID_setAttr_TokenType = 622,NID_setAttr_IssCap = 623,NID_set_rootKeyThumb = 624,NID_set_addPolicy = 625,NID_setAttr_Token_EMV = 626,NID_setAttr_Token_B0Prime = 627,NID_setAttr_IssCap_CVM = 628,NID_setAttr_IssCap_T2 = 629,NID_setAttr_IssCap_Sig = 630,NID_setAttr_GenCryptgrm = 631,NID_setAttr_T2Enc = 632,NID_setAttr_T2cleartxt = 633,NID_setAttr_TokICCsig = 634,NID_setAttr_SecDevSig = 635,NID_set_brand_IATA_ATA = 636,NID_set_brand_Diners = 637,NID_set_brand_AmericanExpress = 638,NID_set_brand_JCB = 639,NID_set_brand_Visa = 640,NID_set_brand_MasterCard = 641,NID_set_brand_Novus = 642,NID_des_cdmf = 643,NID_rsaOAEPEncryptionSET = 644,NID_ipsec3 = 749,NID_ipsec4 = 750,NID_whirlpool = 804,NID_cryptopro = 805,NID_cryptocom = 806,NID_id_GostR3411_94_with_GostR3410_2001 = 807,NID_id_GostR3411_94_with_GostR3410_94 = 808,NID_id_GostR3411_94 = 809,NID_id_HMACGostR3411_94 = 810,NID_id_GostR3410_2001 = 811,NID_id_GostR3410_94 = 812,NID_id_Gost28147_89 = 813,NID_gost89_cnt = 814,NID_id_Gost28147_89_MAC = 815,NID_id_GostR3411_94_prf = 816,NID_id_GostR3410_2001DH = 817,NID_id_GostR3410_94DH = 818,NID_id_Gost28147_89_CryptoPro_KeyMeshing = 819,NID_id_Gost28147_89_None_KeyMeshing = 820,NID_id_GostR3411_94_TestParamSet = 821,NID_id_GostR3411_94_CryptoProParamSet = 822,NID_id_Gost28147_89_TestParamSet = 823,NID_id_Gost28147_89_CryptoPro_A_ParamSet = 824,NID_id_Gost28147_89_CryptoPro_B_ParamSet = 825,NID_id_Gost28147_89_CryptoPro_C_ParamSet = 826,NID_id_Gost28147_89_CryptoPro_D_ParamSet = 827,NID_id_Gost28147_89_CryptoPro_Oscar_1_1_ParamSet = 828,NID_id_Gost28147_89_CryptoPro_Oscar_1_0_ParamSet = 829,NID_id_Gost28147_89_CryptoPro_RIC_1_ParamSet = 830,NID_id_GostR3410_94_TestParamSet = 831,NID_id_GostR3410_94_CryptoPro_A_ParamSet = 832,NID_id_GostR3410_94_CryptoPro_B_ParamSet = 833,NID_id_GostR3410_94_CryptoPro_C_ParamSet = 834,NID_id_GostR3410_94_CryptoPro_D_ParamSet = 835,NID_id_GostR3410_94_CryptoPro_XchA_ParamSet = 836,NID_id_GostR3410_94_CryptoPro_XchB_ParamSet = 837,NID_id_GostR3410_94_CryptoPro_XchC_ParamSet = 838,NID_id_GostR3410_2001_TestParamSet = 839,NID_id_GostR3410_2001_CryptoPro_A_ParamSet = 840,NID_id_GostR3410_2001_CryptoPro_B_ParamSet = 841,NID_id_GostR3410_2001_CryptoPro_C_ParamSet = 842,NID_id_GostR3410_2001_CryptoPro_XchA_ParamSet = 843,NID_id_GostR3410_2001_CryptoPro_XchB_ParamSet = 844,NID_id_GostR3410_94_a = 845,NID_id_GostR3410_94_aBis = 846,NID_id_GostR3410_94_b = 847,NID_id_GostR3410_94_bBis = 848,NID_id_Gost28147_89_cc = 849,NID_id_GostR3410_94_cc = 850,NID_id_GostR3410_2001_cc = 851,NID_id_GostR3411_94_with_GostR3410_94_cc = 852,NID_id_GostR3411_94_with_GostR3410_2001_cc = 853,NID_id_GostR3410_2001_ParamSet_cc = 854,NID_camellia_128_cbc = 751,NID_camellia_192_cbc = 752,NID_camellia_256_cbc = 753,NID_camellia_128_ecb = 754,NID_camellia_128_ofb128 = 766,NID_camellia_128_cfb128 = 757,NID_camellia_192_ecb = 755,NID_camellia_192_ofb128 = 767,NID_camellia_192_cfb128 = 758,NID_camellia_256_ecb = 756,NID_camellia_256_ofb128 = 768,NID_camellia_256_cfb128 = 759,NID_camellia_128_cfb1 = 760,NID_camellia_192_cfb1 = 761,NID_camellia_256_cfb1 = 762,NID_camellia_128_cfb8 = 763,NID_camellia_192_cfb8 = 764,NID_camellia_256_cfb8 = 765,NID_kisa = 773,NID_seed_ecb = 776,NID_seed_cbc = 777,NID_seed_cfb128 = 779,NID_seed_ofb128 = 778,NID_hmac = 855,};
enum MACRO_NI_QTYPE {NI_QTYPE_NOOP = 0,NI_QTYPE_SUPTYPES = 1,NI_QTYPE_FQDN = 2,NI_QTYPE_DNSNAME = 2,NI_QTYPE_NODEADDR = 3,NI_QTYPE_IPV4ADDR = 4,NI_SUPTYPE_FLAG_COMPRESS = 256,NI_FQDN_FLAG_VALIDTTL = 256,NI_NODEADDR_FLAG_TRUNCATE = 256,NI_NODEADDR_FLAG_ALL = 512,NI_NODEADDR_FLAG_COMPAT = 1024,NI_NODEADDR_FLAG_LINKLOCAL = 2048,NI_NODEADDR_FLAG_SITELOCAL = 4096,NI_NODEADDR_FLAG_GLOBAL = 8192,NI_NODEADDR_FLAG_ANYCAST = 16384,};
enum MACRO_NKE : __int64 {NKE_OK = 0,NKE_REMOVE = -1,};
enum MACRO_NL {NL_ARGMAX = 9,NL_LANGMAX = 14,NL_MSGMAX = 32767,NL_NMAX = 1,NL_SETMAX = 255,NL_TEXTMAX = 2048,};
enum MACRO_NL0 {NL0 = 0x0,NL1 = 0x100,NL2 = 0x200,};
enum MACRO_NL3 {NL3 = 0x300,};
enum MACRO_NLM {NLM_PROG = 100021,NLM_SM = 0,NLM_SM_NOTIFY = 1,NLM_VERS = 1,NLM_TEST = 1,NLM_LOCK = 2,NLM_CANCEL = 3,NLM_UNLOCK = 4,NLM_GRANTED = 5,NLM_TEST_MSG = 6,NLM_LOCK_MSG = 7,NLM_CANCEL_MSG = 8,NLM_UNLOCK_MSG = 9,NLM_GRANTED_MSG = 10,NLM_TEST_RES = 11,NLM_LOCK_RES = 12,NLM_CANCEL_RES = 13,NLM_UNLOCK_RES = 14,NLM_GRANTED_RES = 15,NLM_VERSX = 3,NLM_SHARE = 20,NLM_UNSHARE = 21,NLM_NM_LOCK = 22,NLM_FREE_ALL = 23,NLM_VERS4 = 4,};
enum MACRO_NLM4 {NLM4_TEST = 1,NLM4_LOCK = 2,NLM4_CANCEL = 3,NLM4_UNLOCK = 4,NLM4_GRANTED = 5,NLM4_TEST_MSG = 6,NLM4_LOCK_MSG = 7,NLM4_CANCEL_MSG = 8,NLM4_UNLOCK_MSG = 9,NLM4_GRANTED_MSG = 10,NLM4_TEST_RES = 11,NLM4_LOCK_RES = 12,NLM4_CANCEL_RES = 13,NLM4_UNLOCK_RES = 14,NLM4_GRANTED_RES = 15,NLM4_SHARE = 20,NLM4_UNSHARE = 21,NLM4_NM_LOCK = 22,NLM4_FREE_ALL = 23,};
enum MACRO_NL_SETD {NL_SETD = 1,NL_CAT_LOCALE = 1,};
enum MACRO_NMBCLUSTERS {NMBCLUSTERS = 256,};
enum MACRO_NO {NO_JUSTIFICATION = 0,};
enum MACRO_NOCRED : __int64 {NOCRED = 0,FSCRED = -1,};
enum MACRO_NODE {NODE_IS_KEYED = 0,};
enum MACRO_NODEV : __int64 {NODEV = -1,};
enum MACRO_NOEXPR {NOEXPR = 53,};
enum MACRO_NOGROUP {NOGROUP = 65535,};
enum MACRO_NOP {NOP = 241,};
enum MACRO_NORMAL {NORMAL_CONFIG = 0,PREMIB_CONFIG = 1,EITHER_CONFIG = 2,};
enum MACRO_NOSTR {NOSTR = 55,};
enum MACRO_NOT {NOT_HERE = 1,};
enum MACRO_NOTE : __int64 {NOTE_TRIGGER = 0x1000000,NOTE_FFNOP = 0x0,NOTE_FFAND = 0x40000000,NOTE_FFOR = 0x80000000,NOTE_FFCOPY = 0xC0000000,NOTE_FFCTRLMASK = 0xC0000000,NOTE_FFLAGSMASK = 0xFFFFFF,NOTE_LOWAT = 0x1,NOTE_DELETE = 0x1,NOTE_WRITE = 0x2,NOTE_EXTEND = 0x4,NOTE_ATTRIB = 0x8,NOTE_LINK = 0x10,NOTE_RENAME = 0x20,NOTE_REVOKE = 0x40,NOTE_NONE = 0x80,NOTE_EXIT = 0x80000000,NOTE_FORK = 0x40000000,NOTE_EXEC = 0x20000000,NOTE_REAP = 0x10000000,NOTE_SIGNAL = 0x8000000,NOTE_EXITSTATUS = 0x4000000,NOTE_RESOURCEEND = 0x2000000,NOTE_PDATAMASK = 0xFFFFF,NOTE_PCTRLMASK = 0xFFFFFFFFFFF00000,NOTE_VM_PRESSURE = 0x80000000,NOTE_VM_PRESSURE_TERMINATE = 0x40000000,NOTE_VM_PRESSURE_SUDDEN_TERMINATE = 0x20000000,NOTE_VM_ERROR = 0x10000000,NOTE_SECONDS = 0x1,NOTE_USECONDS = 0x2,NOTE_NSECONDS = 0x4,NOTE_ABSOLUTE = 0x8,NOTE_TRACK = 0x1,NOTE_TRACKERR = 0x2,NOTE_CHILD = 0x4,};
enum MACRO_NOTIFY {NOTIFY_STATUS_OK = 0,NOTIFY_STATUS_INVALID_NAME = 1,NOTIFY_STATUS_INVALID_TOKEN = 2,NOTIFY_STATUS_INVALID_PORT = 3,NOTIFY_STATUS_INVALID_FILE = 4,NOTIFY_STATUS_INVALID_SIGNAL = 5,NOTIFY_STATUS_INVALID_REQUEST = 6,NOTIFY_STATUS_NOT_AUTHORIZED = 7,NOTIFY_STATUS_FAILED = 1000000,NOTIFY_REUSE = 1,};
enum MACRO_NOT_CHECKED_IN {NETNAME_NOT_CHECKED_IN = 1001,NAME_NOT_CHECKED_IN = 1001,};
enum MACRO_NO_PUSHBACK : __int64 {NO_PUSHBACK = -1,};
enum MACRO_NO_RECOVERY {NO_RECOVERY = 3,NO_DATA = 4,NO_ADDRESS = 4,};
enum MACRO_NS : __int64 {NS_PACKETSZ = 512,NS_MAXDNAME = 1025,NS_MAXCDNAME = 255,NS_MAXLABEL = 63,NS_HFIXEDSZ = 12,NS_QFIXEDSZ = 4,NS_RRFIXEDSZ = 10,NS_INT32SZ = 4,NS_INT16SZ = 2,NS_INT8SZ = 1,NS_INADDRSZ = 4,NS_IN6ADDRSZ = 16,NS_CMPRSFLGS = 192,NS_DEFAULTPORT = 53,NS_TSIG_FUDGE = 300,NS_TSIG_TCP_COUNT = 100,NS_TSIG_ERROR_NO_TSIG = -10,NS_TSIG_ERROR_NO_SPACE = -11,NS_TSIG_ERROR_FORMERR = -12,NS_KEY_TYPEMASK = 49152,NS_KEY_TYPE_AUTH_CONF = 0,NS_KEY_TYPE_CONF_ONLY = 32768,NS_KEY_TYPE_AUTH_ONLY = 16384,NS_KEY_TYPE_NO_KEY = 49152,NS_KEY_NO_AUTH = 32768,NS_KEY_NO_CONF = 16384,NS_KEY_RESERVED2 = 8192,NS_KEY_EXTENDED_FLAGS = 4096,NS_KEY_RESERVED4 = 2048,NS_KEY_RESERVED5 = 1024,NS_KEY_NAME_TYPE = 768,NS_KEY_NAME_USER = 0,NS_KEY_NAME_ENTITY = 512,NS_KEY_NAME_ZONE = 256,NS_KEY_NAME_RESERVED = 768,NS_KEY_RESERVED8 = 128,NS_KEY_RESERVED9 = 64,NS_KEY_RESERVED10 = 32,NS_KEY_RESERVED11 = 16,NS_KEY_SIGNATORYMASK = 15,NS_KEY_RESERVED_BITMASK = 11504,NS_KEY_RESERVED_BITMASK2 = 65535,NS_ALG_MD5RSA = 1,NS_ALG_DH = 2,NS_ALG_DSA = 3,NS_ALG_DSS = 3,NS_ALG_EXPIRE_ONLY = 253,NS_ALG_PRIVATE_OID = 254,NS_KEY_PROT_TLS = 1,NS_KEY_PROT_EMAIL = 2,NS_KEY_PROT_DNSSEC = 3,NS_KEY_PROT_IPSEC = 4,NS_KEY_PROT_ANY = 255,NS_MD5RSA_MIN_BITS = 512,NS_MD5RSA_MAX_BITS = 2552,NS_MD5RSA_MAX_BYTES = 5107,NS_MD5RSA_MAX_BASE64 = 6812,NS_MD5RSA_MIN_SIZE = 64,NS_MD5RSA_MAX_SIZE = 319,NS_DSA_SIG_SIZE = 41,NS_DSA_MIN_SIZE = 213,NS_DSA_MAX_BYTES = 405,NS_SIG_TYPE = 0,NS_SIG_ALG = 2,NS_SIG_LABELS = 3,NS_SIG_OTTL = 4,NS_SIG_EXPIR = 8,NS_SIG_SIGNED = 12,NS_SIG_FOOT = 16,NS_SIG_SIGNER = 18,NS_NXT_BITS = 8,NS_NXT_MAX = 127,NS_OPT_DNSSEC_OK = 32768,};
enum MACRO_NSADDIMAGE {NSADDIMAGE_OPTION_NONE = 0x0,NSADDIMAGE_OPTION_RETURN_ON_ERROR = 0x1,NSADDIMAGE_OPTION_WITH_SEARCHING = 0x2,NSADDIMAGE_OPTION_RETURN_ONLY_IF_LOADED = 0x4,NSADDIMAGE_OPTION_MATCH_FILENAME_BY_INSTALLNAME = 0x8,};
enum MACRO_NSAP {NSAP = 69,};
enum MACRO_NSEC {NSEC_PER_SEC = 1000000000,NSEC_PER_MSEC = 1000000,};
enum MACRO_NSEC_PER {NSEC_PER_USEC = 1000,};
enum MACRO_NSIG {NSIG = 32,};
enum MACRO_NSLC {NSLC = 18,};
enum MACRO_NSLINKMODULE {NSLINKMODULE_OPTION_NONE = 0x0,NSLINKMODULE_OPTION_BINDNOW = 0x1,NSLINKMODULE_OPTION_PRIVATE = 0x2,NSLINKMODULE_OPTION_RETURN_ON_ERROR = 0x4,NSLINKMODULE_OPTION_DONT_CALL_MOD_INIT_ROUTINES = 0x8,NSLINKMODULE_OPTION_TRAILING_PHYS_NAME = 0x10,};
enum MACRO_NSLOOKUPSYMBOLINIMAGE {NSLOOKUPSYMBOLINIMAGE_OPTION_BIND = 0x0,NSLOOKUPSYMBOLINIMAGE_OPTION_BIND_NOW = 0x1,NSLOOKUPSYMBOLINIMAGE_OPTION_BIND_FULLY = 0x2,NSLOOKUPSYMBOLINIMAGE_OPTION_RETURN_ON_ERROR = 0x4,};
enum MACRO_NSUNLINKMODULE {NSUNLINKMODULE_OPTION_NONE = 0x0,NSUNLINKMODULE_OPTION_KEEP_MEMORY_MAPPED = 0x1,NSUNLINKMODULE_OPTION_RESET_LAZY_REFERENCES = 0x2,};
enum MACRO_NS_SSL {NS_SSL_CLIENT = 0x80,NS_SSL_SERVER = 0x40,NS_SMIME = 0x20,NS_OBJSIGN = 0x10,NS_SSL_CA = 0x4,NS_SMIME_CA = 0x2,NS_OBJSIGN_CA = 0x1,NS_ANY_CA = 0x7,};
enum MACRO_NTELOPTS {NTELOPTS = 40,};
enum MACRO_NTSID {NTSID_MAX_AUTHORITIES = 16,};
enum MACRO_NULL {NULL = 0,};
enum MACRO_NULLOBJ {NULLOBJ = 5,};
enum MACRO_NULLPROC {NULLPROC = 0,UDPMSGSIZE = 8800,};
enum MACRO_NULL_xdrproc {NULL_xdrproc_t = 0,};
enum MACRO_NUM {NUM_PARM = 9,};
enum MACRO_NUMCOUNT {NUMCOUNT = 39,};
enum MACRO_NUMWRITE {NUMWRITE = 33,STRWRITE = 394,};
enum MACRO_NUM_EXTERNAL {NUM_EXTERNAL_FDS = 32,};
enum MACRO_NUM_EXTERNAL_SIGS {NUM_EXTERNAL_SIGS = 32,};
enum MACRO_NVMAXTEXT {NVMAXTEXT = 55,};
enum MACRO_NX {NX_MAX_SEC_FLAVORS = 5,};
enum MACRO_NXA {NXA_DELETE = 0x1,NXA_ADD = 0x2,NXA_REPLACE = 0x3,NXA_DELETE_ALL = 0x4,NXA_OFFLINE = 0x8,NXA_CHECK = 0x10,};
enum MACRO_NXHF {NXHF_INVALIDFH = 0x1,};
enum MACRO_NX_READONLY {NX_READONLY = 0x1,NX_DEFAULTEXPORT = 0x2,NX_MAPROOT = 0x4,NX_MAPALL = 0x8,NX_32BITCLIENTS = 0x20,NX_OFFLINE = 0x40,};
enum MACRO_NZERO {NZERO = 20,};
enum MACRO_N_BNSYM {N_BNSYM = 0x2E,N_OPT = 0x3C,N_ENSYM = 0x4E,N_OSO = 0x66,N_PARAMS = 0x86,N_VERSION = 0x88,N_OLEVEL = 0x8A,};
enum MACRO_N_NO {N_NO_DEAD_STRIP = 0x20,N_DESC_DISCARDED = 0x20,N_WEAK_REF = 0x40,N_WEAK_DEF = 0x80,N_REF_TO_WEAK = 0x80,N_ARM_THUMB_DEF = 0x8,N_SYMBOL_RESOLVER = 0x100,};
enum MACRO_N_STAB {N_STAB = 0xE0,N_PEXT = 0x10,N_TYPE = 0xE,N_EXT = 0x1,N_UNDF = 0x0,N_ABS = 0x2,N_SECT = 0xE,N_PBUD = 0xC,N_INDR = 0xA,};
enum MACRO_NeXTBSD {NeXTBSD = 1995064,};
enum MACRO_NeXTBSD4 {NeXTBSD4_0 = 0,};
enum MACRO_O {O_SYNC = 0x80,O_DSYNC = 0x400000,};
enum MACRO_OACK {OACK = 0x6,};
enum MACRO_OARMAG1 {OARMAG1 = 0xFF6D,};
enum MACRO_OARMAG2 {OARMAG2 = 0xFF65,};
enum MACRO_OBJ {OBJ_NAME_TYPE_UNDEF = 0x0,OBJ_NAME_TYPE_MD_METH = 0x1,OBJ_NAME_TYPE_CIPHER_METH = 0x2,OBJ_NAME_TYPE_PKEY_METH = 0x3,OBJ_NAME_TYPE_COMP_METH = 0x4,OBJ_NAME_TYPE_NUM = 0x5,OBJ_NAME_ALIAS = 0x8000,OBJ_BSEARCH_VALUE_ON_NOMATCH = 0x1,OBJ_BSEARCH_FIRST_VALUE_ON_MATCH = 0x2,OBJ_F_OBJ_ADD_OBJECT = 0x69,OBJ_F_OBJ_CREATE = 0x64,OBJ_F_OBJ_DUP = 0x65,OBJ_F_OBJ_NAME_NEW_INDEX = 0x6A,OBJ_F_OBJ_NID2LN = 0x66,OBJ_F_OBJ_NID2OBJ = 0x67,OBJ_F_OBJ_NID2SN = 0x68,OBJ_R_MALLOC_FAILURE = 0x64,OBJ_R_UNKNOWN_NID = 0x65,};
enum MACRO_OBJID {OBJID = 6,};
enum MACRO_OCSP {OCSP_DEFAULT_NONCE_LENGTH = 16,OCSP_NOCERTS = 1,OCSP_NOINTERN = 2,OCSP_NOSIGS = 4,OCSP_NOCHAIN = 8,OCSP_NOVERIFY = 16,OCSP_NOEXPLICIT = 32,OCSP_NOCASIGN = 64,OCSP_NODELEGATED = 128,OCSP_NOCHECKS = 256,OCSP_TRUSTOTHER = 512,OCSP_RESPID_KEY = 1024,OCSP_NOTIME = 2048,OCSP_RESPONSE_STATUS_SUCCESSFUL = 0,OCSP_RESPONSE_STATUS_MALFORMEDREQUEST = 1,OCSP_RESPONSE_STATUS_INTERNALERROR = 2,OCSP_RESPONSE_STATUS_TRYLATER = 3,OCSP_RESPONSE_STATUS_SIGREQUIRED = 5,OCSP_RESPONSE_STATUS_UNAUTHORIZED = 6,};
enum MACRO_OCSP_REVOKED : __int64 {OCSP_REVOKED_STATUS_NOSTATUS = -1,OCSP_REVOKED_STATUS_UNSPECIFIED = 0,OCSP_REVOKED_STATUS_KEYCOMPROMISE = 1,OCSP_REVOKED_STATUS_CACOMPROMISE = 2,OCSP_REVOKED_STATUS_AFFILIATIONCHANGED = 3,OCSP_REVOKED_STATUS_SUPERSEDED = 4,OCSP_REVOKED_STATUS_CESSATIONOFOPERATION = 5,OCSP_REVOKED_STATUS_CERTIFICATEHOLD = 6,OCSP_REVOKED_STATUS_REMOVEFROMCRL = 8,OCSP_F_ASN1_STRING_ENCODE = 100,OCSP_F_D2I_OCSP_NONCE = 102,OCSP_F_OCSP_BASIC_ADD1_STATUS = 103,OCSP_F_OCSP_BASIC_SIGN = 104,OCSP_F_OCSP_BASIC_VERIFY = 105,OCSP_F_OCSP_CERT_ID_NEW = 101,OCSP_F_OCSP_CHECK_DELEGATED = 106,OCSP_F_OCSP_CHECK_IDS = 107,OCSP_F_OCSP_CHECK_ISSUER = 108,OCSP_F_OCSP_CHECK_VALIDITY = 115,OCSP_F_OCSP_MATCH_ISSUERID = 109,OCSP_F_OCSP_PARSE_URL = 114,OCSP_F_OCSP_REQUEST_SIGN = 110,OCSP_F_OCSP_REQUEST_VERIFY = 116,OCSP_F_OCSP_RESPONSE_GET1_BASIC = 111,OCSP_F_OCSP_SENDREQ_BIO = 112,OCSP_F_PARSE_HTTP_LINE1 = 117,OCSP_F_REQUEST_VERIFY = 113,OCSP_R_BAD_DATA = 100,OCSP_R_CERTIFICATE_VERIFY_ERROR = 101,OCSP_R_DIGEST_ERR = 102,OCSP_R_ERROR_IN_NEXTUPDATE_FIELD = 122,OCSP_R_ERROR_IN_THISUPDATE_FIELD = 123,OCSP_R_ERROR_PARSING_URL = 121,OCSP_R_MISSING_OCSPSIGNING_USAGE = 103,OCSP_R_NEXTUPDATE_BEFORE_THISUPDATE = 124,OCSP_R_NOT_BASIC_RESPONSE = 104,OCSP_R_NO_CERTIFICATES_IN_CHAIN = 105,OCSP_R_NO_CONTENT = 106,OCSP_R_NO_PUBLIC_KEY = 107,OCSP_R_NO_RESPONSE_DATA = 108,OCSP_R_NO_REVOKED_TIME = 109,OCSP_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE = 110,OCSP_R_REQUEST_NOT_SIGNED = 128,OCSP_R_RESPONSE_CONTAINS_NO_REVOCATION_DATA = 111,OCSP_R_ROOT_CA_NOT_TRUSTED = 112,OCSP_R_SERVER_READ_ERROR = 113,OCSP_R_SERVER_RESPONSE_ERROR = 114,OCSP_R_SERVER_RESPONSE_PARSE_ERROR = 115,OCSP_R_SERVER_WRITE_ERROR = 116,OCSP_R_SIGNATURE_FAILURE = 117,OCSP_R_SIGNER_CERTIFICATE_NOT_FOUND = 118,OCSP_R_STATUS_EXPIRED = 125,OCSP_R_STATUS_NOT_YET_VALID = 126,OCSP_R_STATUS_TOO_OLD = 127,OCSP_R_UNKNOWN_MESSAGE_DIGEST = 119,OCSP_R_UNKNOWN_NID = 120,OCSP_R_UNSUPPORTED_REQUESTORNAME_TYPE = 129,};
enum MACRO_ODBC {ODBC_ADD_DSN = 1,ODBC_CONFIG_DSN = 2,ODBC_REMOVE_DSN = 3,ODBC_ADD_SYS_DSN = 4,ODBC_CONFIG_SYS_DSN = 5,ODBC_REMOVE_SYS_DSN = 6,ODBC_REMOVE_DEFAULT_DSN = 7,ODBC_INSTALL_INQUIRY = 1,ODBC_INSTALL_COMPLETE = 2,ODBC_INSTALL_DRIVER = 1,ODBC_REMOVE_DRIVER = 2,ODBC_CONFIG_DRIVER = 3,ODBC_CONFIG_DRIVER_MAX = 100,ODBC_BOTH_DSN = 0,ODBC_USER_DSN = 1,ODBC_SYSTEM_DSN = 2,ODBC_ERROR_GENERAL_ERR = 1,ODBC_ERROR_INVALID_BUFF_LEN = 2,ODBC_ERROR_INVALID_HWND = 3,ODBC_ERROR_INVALID_STR = 4,ODBC_ERROR_INVALID_REQUEST_TYPE = 5,ODBC_ERROR_COMPONENT_NOT_FOUND = 6,ODBC_ERROR_INVALID_NAME = 7,ODBC_ERROR_INVALID_KEYWORD_VALUE = 8,ODBC_ERROR_INVALID_DSN = 9,ODBC_ERROR_INVALID_INF = 10,ODBC_ERROR_REQUEST_FAILED = 11,ODBC_ERROR_INVALID_PATH = 12,ODBC_ERROR_LOAD_LIB_FAILED = 13,ODBC_ERROR_INVALID_PARAM_SEQUENCE = 14,ODBC_ERROR_INVALID_LOG_FILE = 15,ODBC_ERROR_USER_CANCELED = 16,ODBC_ERROR_USAGE_UPDATE_FAILED = 17,ODBC_ERROR_CREATE_DSN_FAILED = 18,ODBC_ERROR_WRITING_SYSINFO_FAILED = 19,ODBC_ERROR_REMOVE_DSN_FAILED = 20,ODBC_ERROR_OUT_OF_MEM = 21,ODBC_ERROR_OUTPUT_STRING_TRUNCATED = 22,ODBC_ERROR_DRIVER_SPECIFIC = 23,};
enum MACRO_ODBCVER {ODBCVER = 0x351,};
enum MACRO_OFF : __int64 {OFF_MIN = -9223372036854775808,OFF_MAX = 9223372036854775807,};
enum MACRO_OFLOW {CDSR_OFLOW = 0x80000,CCAR_OFLOW = 0x100000,};
enum MACRO_OID : __int64 {OID_AUTO = -1,OID_AUTO_START = 100,};
enum MACRO_OID_STASH {OID_STASH_CHILDREN_SIZE = 31,};
enum MACRO_OK {F_OK = 0,X_OK = 1,W_OK = 2,R_OK = 4,_READ_OK = 512,_WRITE_OK = 1024,_EXECUTE_OK = 2048,_DELETE_OK = 4096,_APPEND_OK = 8192,_RMFILE_OK = 16384,_RATTR_OK = 32768,_WATTR_OK = 65536,_REXT_OK = 131072,_WEXT_OK = 262144,_RPERM_OK = 524288,_WPERM_OK = 1048576,_CHOWN_OK = 2097152,};
enum MACRO_OK_0 {OK = 0,_SUBWIN = 1,_ENDLINE = 2,_FULLWIN = 4,_SCROLLWIN = 8,_ISPAD = 16,_HASMOVED = 32,_WRAPPED = 64,};
enum MACRO_OLD {OLD_ENV_VAR = 1,OLD_ENV_VALUE = 0,};
enum MACRO_ONE {ONE_SEC = 1000000,};
enum MACRO_ONLY {USERDSN_ONLY = 0,SYSTEMDSN_ONLY = 1,};
enum MACRO_OPENDEV {OPENDEV_PART = 0x1,OPENDEV_BLCK = 0x4,};
enum MACRO_OPENPAM {OPENPAM_VERSION = 20071221,};
enum MACRO_OPENSSL {OPENSSL_HAVE_INIT = 1,};
enum MACRO_OPENSSL_DH {OPENSSL_DH_MAX_MODULUS_BITS = 10000,OPENSSL_DH_FIPS_MIN_MODULUS_BITS = 1024,};
enum MACRO_OPENSSL_DSA {OPENSSL_DSA_MAX_MODULUS_BITS = 10000,OPENSSL_DSA_FIPS_MIN_MODULUS_BITS = 1024,};
enum MACRO_OPENSSL_ECC {OPENSSL_ECC_MAX_FIELD_BITS = 661,OPENSSL_EC_NAMED_CURVE = 1,};
enum MACRO_OPENSSL_NO {OPENSSL_NO_SHA256 = 1,OPENSSL_NO_SHA512 = 1,};
enum MACRO_OPENSSL_RSA {OPENSSL_RSA_MAX_MODULUS_BITS = 16384,OPENSSL_RSA_FIPS_MIN_MODULUS_BITS = 1024,OPENSSL_RSA_SMALL_MODULUS_BITS = 3072,OPENSSL_RSA_MAX_PUBEXP_BITS = 64,};
enum MACRO_OPOST {OPOST = 0x1,ONLCR = 0x2,OXTABS = 0x4,ONOEOT = 0x8,OCRNL = 0x10,ONOCR = 0x20,ONLRET = 0x40,OFILL = 0x80,NLDLY = 0x300,TABDLY = 0xC04,CRDLY = 0x3000,FFDLY = 0x4000,BSDLY = 0x8000,VTDLY = 0x10000,OFDEL = 0x20000,};
enum MACRO_ORDINAL {SELF_LIBRARY_ORDINAL = 0x0,MAX_LIBRARY_ORDINAL = 0xFD,DYNAMIC_LOOKUP_ORDINAL = 0xFE,EXECUTABLE_ORDINAL = 0xFF,};
enum MACRO_ORDINARY {ORDINARY = 0,CONTROL = 1,BACKSPACE = 2,};
enum MACRO_OS {OS_SPINLOCK_INIT = 0,};
enum MACRO_OSSL {OSSL_DYNAMIC_VERSION = 0x20000,OSSL_DYNAMIC_OLDEST = 0x20000,};
enum MACRO_OSTYPES {OSTYPES_K64_REV = 2,};
enum MACRO_OTTYDISC {OTTYDISC = 0,NETLDISC = 1,NTTYDISC = 2,};
enum MACRO_OVERRIDE {OVERRIDE_UNKNOWN_PERMISSIONS = 0,};
enum MACRO_O_NDELAY {O_NDELAY = 4,};
enum MACRO_O_NONBLOCK {O_NONBLOCK = 0x4,O_APPEND = 0x8,O_SHLOCK = 0x10,O_EXLOCK = 0x20,O_ASYNC = 0x40,O_FSYNC = 0x80,O_NOFOLLOW = 0x100,O_CREAT = 0x200,O_TRUNC = 0x400,O_EXCL = 0x800,O_EVTONLY = 0x8000,O_NOCTTY = 0x20000,O_DIRECTORY = 0x100000,O_SYMLINK = 0x200000,O_CLOEXEC = 0x1000000,};
enum MACRO_O_ONEVALUE {O_ONEVALUE = 0x1,O_SHOWDESC = 0x2,O_ROWMAJOR = 0x4,O_IGNORECASE = 0x8,O_SHOWMATCH = 0x10,O_NONCYCLIC = 0x20,O_SELECTABLE = 0x1,};
enum MACRO_O_POPUP : __int64 {O_POPUP = 0x80000000,O_ALERT = 0x20000000,};
enum MACRO_O_RDONLY {O_RDONLY = 0x0,O_WRONLY = 0x1,O_RDWR = 0x2,O_ACCMODE = 0x3,};
enum MACRO_O_VISIBLE {O_VISIBLE = 0x1,O_ACTIVE = 0x2,O_PUBLIC = 0x4,O_EDIT = 0x8,O_WRAP = 0x10,O_BLANK = 0x20,O_AUTOSKIP = 0x40,O_NULLOK = 0x80,O_PASSOK = 0x100,O_STATIC = 0x200,O_NL_OVERLOAD = 0x1,O_BS_OVERLOAD = 0x2,};
enum MACRO_P : __int64 {P_ADVLOCK = 0x1,P_CONTROLT = 0x2,P_LP64 = 0x4,P_NOCLDSTOP = 0x8,P_PPWAIT = 0x10,P_PROFIL = 0x20,P_SELECT = 0x40,P_CONTINUED = 0x80,P_SUGID = 0x100,P_SYSTEM = 0x200,P_TIMEOUT = 0x400,P_TRACED = 0x800,P_DISABLE_ASLR = 0x1000,P_WEXIT = 0x2000,P_EXEC = 0x4000,P_OWEUPC = 0x8000,P_AFFINITY = 0x10000,P_TRANSLATED = 0x20000,P_CLASSIC = 0x20000,P_RESV5 = 0x40000,P_CHECKOPENEVT = 0x80000,P_DEPENDENCY_CAPABLE = 0x100000,P_REBOOT = 0x200000,P_TBE = 0x400000,P_RESV7 = 0x800000,P_THCWD = 0x1000000,P_RESV9 = 0x2000000,P_RESV10 = 0x4000000,P_RESV11 = 0x8000000,P_NOSHLIB = 0x10000000,P_FORCEQUOTA = 0x20000000,P_NOCLDWAIT = 0x40000000,P_NOREMOTEHANG = 0x80000000,P_INMEM = 0x0,P_NOSWAP = 0x0,P_PHYSIO = 0x0,P_FSTRACE = 0x0,P_SSTEP = 0x0,};
enum MACRO_PACKET {PARSE_PACKET = 0,DUMP_PACKET = 1,};
enum MACRO_PACKETSZ {PACKETSZ = 512,MAXDNAME = 1025,};
enum MACRO_PAD {PAD_NOTATTR = 0x4000,PAD_FAILURE = 0x8000,};
enum MACRO_PAGE {PAGE_SIZE = 4096,PAGE_SHIFT = 12,PAGE_MASK = 4095,};
enum MACRO_PASS {PASS_MAX = 128,};
enum MACRO_PCAP : __int64 {PCAP_VERSION_MAJOR = 2,PCAP_VERSION_MINOR = 4,PCAP_ERRBUF_SIZE = 256,PCAP_IF_LOOPBACK = 1,PCAP_ERROR = -1,PCAP_ERROR_BREAK = -2,PCAP_ERROR_NOT_ACTIVATED = -3,PCAP_ERROR_ACTIVATED = -4,PCAP_ERROR_NO_SUCH_DEVICE = -5,PCAP_ERROR_RFMON_NOTSUP = -6,PCAP_ERROR_NOT_RFMON = -7,PCAP_ERROR_PERM_DENIED = -8,PCAP_ERROR_IFACE_NOT_UP = -9,PCAP_WARNING = 1,PCAP_WARNING_PROMISC_NOTSUP = 2,PCAP_NETMASK_UNKNOWN = 4294967295,};
enum MACRO_PEM {PEM_BUFSIZE = 1024,PEM_OBJ_UNDEF = 0,PEM_OBJ_X509 = 1,PEM_OBJ_X509_REQ = 2,PEM_OBJ_CRL = 3,PEM_OBJ_SSL_SESSION = 4,PEM_OBJ_PRIV_KEY = 10,PEM_OBJ_PRIV_RSA = 11,PEM_OBJ_PRIV_DSA = 12,PEM_OBJ_PRIV_DH = 13,PEM_OBJ_PUB_RSA = 14,PEM_OBJ_PUB_DSA = 15,PEM_OBJ_PUB_DH = 16,PEM_OBJ_DHPARAMS = 17,PEM_OBJ_DSAPARAMS = 18,PEM_OBJ_PRIV_RSA_PUBLIC = 19,PEM_OBJ_PRIV_ECDSA = 20,PEM_OBJ_PUB_ECDSA = 21,PEM_OBJ_ECPARAMETERS = 22,PEM_ERROR = 30,PEM_DEK_DES_CBC = 40,PEM_DEK_IDEA_CBC = 45,PEM_DEK_DES_EDE = 50,PEM_DEK_DES_ECB = 60,PEM_DEK_RSA = 70,PEM_DEK_RSA_MD2 = 80,PEM_DEK_RSA_MD5 = 90,PEM_MD_MD2 = 3,PEM_MD_MD5 = 4,PEM_MD_SHA = 41,PEM_MD_MD2_RSA = 7,PEM_MD_MD5_RSA = 8,PEM_MD_SHA_RSA = 65,PEM_TYPE_ENCRYPTED = 10,PEM_TYPE_MIC_ONLY = 20,PEM_TYPE_MIC_CLEAR = 30,PEM_TYPE_CLEAR = 40,PEM_F_D2I_PKCS8PRIVATEKEY_BIO = 120,PEM_F_D2I_PKCS8PRIVATEKEY_FP = 121,PEM_F_DO_PK8PKEY = 126,PEM_F_DO_PK8PKEY_FP = 125,PEM_F_LOAD_IV = 101,PEM_F_PEM_ASN1_READ = 102,PEM_F_PEM_ASN1_READ_BIO = 103,PEM_F_PEM_ASN1_WRITE = 104,PEM_F_PEM_ASN1_WRITE_BIO = 105,PEM_F_PEM_DEF_CALLBACK = 100,PEM_F_PEM_DO_HEADER = 106,PEM_F_PEM_F_PEM_WRITE_PKCS8PRIVATEKEY = 118,PEM_F_PEM_GET_EVP_CIPHER_INFO = 107,PEM_F_PEM_PK8PKEY = 119,PEM_F_PEM_READ = 108,PEM_F_PEM_READ_BIO = 109,PEM_F_PEM_READ_BIO_PRIVATEKEY = 123,PEM_F_PEM_READ_PRIVATEKEY = 124,PEM_F_PEM_SEALFINAL = 110,PEM_F_PEM_SEALINIT = 111,PEM_F_PEM_SIGNFINAL = 112,PEM_F_PEM_WRITE = 113,PEM_F_PEM_WRITE_BIO = 114,PEM_F_PEM_X509_INFO_READ = 115,PEM_F_PEM_X509_INFO_READ_BIO = 116,PEM_F_PEM_X509_INFO_WRITE_BIO = 117,PEM_R_BAD_BASE64_DECODE = 100,PEM_R_BAD_DECRYPT = 101,PEM_R_BAD_END_LINE = 102,PEM_R_BAD_IV_CHARS = 103,PEM_R_BAD_PASSWORD_READ = 104,PEM_R_ERROR_CONVERTING_PRIVATE_KEY = 115,PEM_R_NOT_DEK_INFO = 105,PEM_R_NOT_ENCRYPTED = 106,PEM_R_NOT_PROC_TYPE = 107,PEM_R_NO_START_LINE = 108,PEM_R_PROBLEMS_GETTING_PASSWORD = 109,PEM_R_PUBLIC_KEY_NO_RSA = 110,PEM_R_READ_KEY = 111,PEM_R_SHORT_HEADER = 112,PEM_R_UNSUPPORTED_CIPHER = 113,PEM_R_UNSUPPORTED_ENCRYPTION = 114,};
enum MACRO_PERMISSION {PERMISSION_DENIED = 4,};
enum MACRO_PERSIST {PERSIST_TIMEOUT = 0x40,};
enum MACRO_PF {PF_UNSPEC = 0,PF_LOCAL = 1,PF_UNIX = 1,PF_INET = 2,PF_IMPLINK = 3,PF_PUP = 4,PF_CHAOS = 5,PF_NS = 6,PF_ISO = 7,PF_OSI = 7,PF_ECMA = 8,PF_DATAKIT = 9,PF_CCITT = 10,PF_SNA = 11,PF_DECnet = 12,PF_DLI = 13,PF_LAT = 14,PF_HYLINK = 15,PF_APPLETALK = 16,PF_ROUTE = 17,PF_LINK = 18,PF_XTP = 19,PF_COIP = 20,PF_CNT = 21,PF_SIP = 24,PF_IPX = 23,PF_RTIP = 22,PF_PIP = 25,PF_NDRV = 27,PF_ISDN = 28,PF_KEY = 29,PF_INET6 = 30,PF_NATM = 31,PF_SYSTEM = 32,PF_NETBIOS = 33,PF_PPP = 34,PF_RESERVED_36 = 36,PF_MAX = 38,PF_VLAN = 1986814318,PF_BOND = 1651469924,};
enum MACRO_PFKEY {PFKEY_SOFT_LIFETIME_RATE = 80,};
enum MACRO_PFKEYV2 {PFKEYV2_REVISION = 199806,};
enum MACRO_PF_KEY {PF_KEY_V2 = 2,};
enum MACRO_PGOFSET {PGOFSET = 4095,};
enum MACRO_PGSHIFT {PGSHIFT = 12,};
enum MACRO_PIDLOCK {PIDLOCK_NONBLOCK = 1,PIDLOCK_USEHOSTNAME = 2,};
enum MACRO_PIPE {PIPE_BUF = 512,};
enum MACRO_PIPENPAGES {PIPENPAGES = 17,};
enum MACRO_PIPE_ASYNC {PIPE_ASYNC = 0x4,PIPE_WANTR = 0x8,PIPE_WANTW = 0x10,PIPE_WANT = 0x20,PIPE_SEL = 0x40,PIPE_EOF = 0x80,PIPE_LOCKFL = 0x100,PIPE_LWANT = 0x200,PIPE_DIRECTW = 0x400,PIPE_DIRECTOK = 0x800,PIPE_KNOTE = 0x1000,PIPE_DRAIN = 0x2000,PIPE_WSELECT = 0x4000,PIPE_DEAD = 0x8000,};
enum MACRO_PIPE_MINDIRECT {PIPE_MINDIRECT = 8192,};
enum MACRO_PIPE_SIZE {PIPE_SIZE = 16384,BIG_PIPE_SIZE = 65536,SMALL_PIPE_SIZE = 4096,};
enum MACRO_PKCS12 {PKCS12_KEY_ID = 1,PKCS12_IV_ID = 2,PKCS12_MAC_ID = 3,PKCS12_DEFAULT_ITER = 2048,PKCS12_MAC_KEY_LENGTH = 20,PKCS12_SALT_LEN = 8,};
enum MACRO_PKCS12_ERROR {PKCS12_ERROR = 0,PKCS12_OK = 1,PKCS12_F_PARSE_BAG = 129,PKCS12_F_PARSE_BAGS = 103,PKCS12_F_PKCS12_ADD_FRIENDLYNAME = 100,PKCS12_F_PKCS12_ADD_FRIENDLYNAME_ASC = 127,PKCS12_F_PKCS12_ADD_FRIENDLYNAME_UNI = 102,PKCS12_F_PKCS12_ADD_LOCALKEYID = 104,PKCS12_F_PKCS12_CREATE = 105,PKCS12_F_PKCS12_GEN_MAC = 107,PKCS12_F_PKCS12_INIT = 109,PKCS12_F_PKCS12_ITEM_DECRYPT_D2I = 106,PKCS12_F_PKCS12_ITEM_I2D_ENCRYPT = 108,PKCS12_F_PKCS12_ITEM_PACK_SAFEBAG = 117,PKCS12_F_PKCS12_KEY_GEN_ASC = 110,PKCS12_F_PKCS12_KEY_GEN_UNI = 111,PKCS12_F_PKCS12_MAKE_KEYBAG = 112,PKCS12_F_PKCS12_MAKE_SHKEYBAG = 113,PKCS12_F_PKCS12_NEWPASS = 128,PKCS12_F_PKCS12_PACK_P7DATA = 114,PKCS12_F_PKCS12_PACK_P7ENCDATA = 115,PKCS12_F_PKCS12_PARSE = 118,PKCS12_F_PKCS12_PBE_CRYPT = 119,PKCS12_F_PKCS12_PBE_KEYIVGEN = 120,PKCS12_F_PKCS12_SETUP_MAC = 122,PKCS12_F_PKCS12_SET_MAC = 123,PKCS12_F_PKCS12_UNPACK_AUTHSAFES = 130,PKCS12_F_PKCS12_UNPACK_P7DATA = 131,PKCS12_F_PKCS12_VERIFY_MAC = 126,PKCS12_F_PKCS8_ADD_KEYUSAGE = 124,PKCS12_F_PKCS8_ENCRYPT = 125,PKCS12_R_CANT_PACK_STRUCTURE = 100,PKCS12_R_CONTENT_TYPE_NOT_DATA = 121,PKCS12_R_DECODE_ERROR = 101,PKCS12_R_ENCODE_ERROR = 102,PKCS12_R_ENCRYPT_ERROR = 103,PKCS12_R_ERROR_SETTING_ENCRYPTED_DATA_TYPE = 120,PKCS12_R_INVALID_NULL_ARGUMENT = 104,PKCS12_R_INVALID_NULL_PKCS12_POINTER = 105,PKCS12_R_IV_GEN_ERROR = 106,PKCS12_R_KEY_GEN_ERROR = 107,PKCS12_R_MAC_ABSENT = 108,PKCS12_R_MAC_GENERATION_ERROR = 109,PKCS12_R_MAC_SETUP_ERROR = 110,PKCS12_R_MAC_STRING_SET_ERROR = 111,PKCS12_R_MAC_VERIFY_ERROR = 112,PKCS12_R_MAC_VERIFY_FAILURE = 113,PKCS12_R_PARSE_ERROR = 114,PKCS12_R_PKCS12_ALGOR_CIPHERINIT_ERROR = 115,PKCS12_R_PKCS12_CIPHERFINAL_ERROR = 116,PKCS12_R_PKCS12_PBE_CRYPT_ERROR = 117,PKCS12_R_UNKNOWN_DIGEST_ALGORITHM = 118,PKCS12_R_UNSUPPORTED_PKCS12_MODE = 119,};
enum MACRO_PKCS5 {PKCS5_SALT_LEN = 8,PKCS5_DEFAULT_ITER = 2048,};
enum MACRO_PKCS7 {PKCS7_S_HEADER = 0,PKCS7_S_BODY = 1,PKCS7_S_TAIL = 2,PKCS7_OP_SET_DETACHED_SIGNATURE = 1,PKCS7_OP_GET_DETACHED_SIGNATURE = 2,PKCS7_TEXT = 1,PKCS7_NOCERTS = 2,PKCS7_NOSIGS = 4,PKCS7_NOCHAIN = 8,PKCS7_NOINTERN = 16,PKCS7_NOVERIFY = 32,PKCS7_DETACHED = 64,PKCS7_BINARY = 128,PKCS7_NOATTR = 256,PKCS7_NOSMIMECAP = 512,PKCS7_NOOLDMIMETYPE = 1024,PKCS7_CRLFEOL = 2048,PKCS7_STREAM = 4096,PKCS7_NOCRL = 8192,};
enum MACRO_PKCS7_F {PKCS7_F_B64_READ_PKCS7 = 120,PKCS7_F_B64_WRITE_PKCS7 = 121,PKCS7_F_PKCS7_ADD_ATTRIB_SMIMECAP = 118,PKCS7_F_PKCS7_ADD_CERTIFICATE = 100,PKCS7_F_PKCS7_ADD_CRL = 101,PKCS7_F_PKCS7_ADD_RECIPIENT_INFO = 102,PKCS7_F_PKCS7_ADD_SIGNER = 103,PKCS7_F_PKCS7_BIO_ADD_DIGEST = 125,PKCS7_F_PKCS7_CTRL = 104,PKCS7_F_PKCS7_DATADECODE = 112,PKCS7_F_PKCS7_DATAFINAL = 128,PKCS7_F_PKCS7_DATAINIT = 105,PKCS7_F_PKCS7_DATASIGN = 106,PKCS7_F_PKCS7_DATAVERIFY = 107,PKCS7_F_PKCS7_DECRYPT = 114,PKCS7_F_PKCS7_ENCRYPT = 115,PKCS7_F_PKCS7_FIND_DIGEST = 127,PKCS7_F_PKCS7_GET0_SIGNERS = 124,PKCS7_F_PKCS7_SET_CIPHER = 108,PKCS7_F_PKCS7_SET_CONTENT = 109,PKCS7_F_PKCS7_SET_DIGEST = 126,PKCS7_F_PKCS7_SET_TYPE = 110,PKCS7_F_PKCS7_SIGN = 116,PKCS7_F_PKCS7_SIGNATUREVERIFY = 113,PKCS7_F_PKCS7_SIMPLE_SMIMECAP = 119,PKCS7_F_PKCS7_VERIFY = 117,PKCS7_F_SMIME_READ_PKCS7 = 122,PKCS7_F_SMIME_TEXT = 123,PKCS7_R_CERTIFICATE_VERIFY_ERROR = 117,PKCS7_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER = 144,PKCS7_R_CIPHER_NOT_INITIALIZED = 116,PKCS7_R_CONTENT_AND_DATA_PRESENT = 118,PKCS7_R_DECODE_ERROR = 130,PKCS7_R_DECRYPTED_KEY_IS_WRONG_LENGTH = 100,PKCS7_R_DECRYPT_ERROR = 119,PKCS7_R_DIGEST_FAILURE = 101,PKCS7_R_ERROR_ADDING_RECIPIENT = 120,PKCS7_R_ERROR_SETTING_CIPHER = 121,PKCS7_R_INVALID_MIME_TYPE = 131,PKCS7_R_INVALID_NULL_POINTER = 143,PKCS7_R_MIME_NO_CONTENT_TYPE = 132,PKCS7_R_MIME_PARSE_ERROR = 133,PKCS7_R_MIME_SIG_PARSE_ERROR = 134,PKCS7_R_MISSING_CERIPEND_INFO = 103,PKCS7_R_NO_CONTENT = 122,PKCS7_R_NO_CONTENT_TYPE = 135,PKCS7_R_NO_MULTIPART_BODY_FAILURE = 136,PKCS7_R_NO_MULTIPART_BOUNDARY = 137,PKCS7_R_NO_RECIPIENT_MATCHES_CERTIFICATE = 115,PKCS7_R_NO_RECIPIENT_MATCHES_KEY = 146,PKCS7_R_NO_SIGNATURES_ON_DATA = 123,PKCS7_R_NO_SIGNERS = 142,PKCS7_R_NO_SIG_CONTENT_TYPE = 138,PKCS7_R_OPERATION_NOT_SUPPORTED_ON_THIS_TYPE = 104,PKCS7_R_PKCS7_ADD_SIGNATURE_ERROR = 124,PKCS7_R_PKCS7_DATAFINAL = 126,PKCS7_R_PKCS7_DATAFINAL_ERROR = 125,PKCS7_R_PKCS7_DATASIGN = 145,PKCS7_R_PKCS7_PARSE_ERROR = 139,PKCS7_R_PKCS7_SIG_PARSE_ERROR = 140,PKCS7_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE = 127,PKCS7_R_SIGNATURE_FAILURE = 105,PKCS7_R_SIGNER_CERTIFICATE_NOT_FOUND = 128,PKCS7_R_SIG_INVALID_MIME_TYPE = 141,PKCS7_R_SMIME_TEXT_ERROR = 129,PKCS7_R_UNABLE_TO_FIND_CERTIFICATE = 106,PKCS7_R_UNABLE_TO_FIND_MEM_BIO = 107,PKCS7_R_UNABLE_TO_FIND_MESSAGE_DIGEST = 108,PKCS7_R_UNKNOWN_DIGEST_TYPE = 109,PKCS7_R_UNKNOWN_OPERATION = 110,PKCS7_R_UNSUPPORTED_CIPHER_TYPE = 111,PKCS7_R_UNSUPPORTED_CONTENT_TYPE = 112,PKCS7_R_WRONG_CONTENT_TYPE = 113,PKCS7_R_WRONG_PKCS7_TYPE = 114,};
enum MACRO_PKCS8 {PKCS8_OK = 0,PKCS8_NO_OCTET = 1,PKCS8_EMBEDDED_PARAM = 2,PKCS8_NS_DB = 3,};
enum MACRO_PKTSIZE {PKTSIZE = 516,};
enum MACRO_PLOCK {PLOCK = 36,};
enum MACRO_PMAP {PMAP__CREATE = 0x0,PMAP__DESTROY = 0x1,PMAP__PROTECT = 0x2,PMAP__PAGE_PROTECT = 0x3,PMAP__ENTER = 0x4,PMAP__REMOVE = 0x5,PMAP__NEST = 0x6,PMAP__UNNEST = 0x7,PMAP__FLUSH_TLBS = 0x8,PMAP__UPDATE_INTERRUPT = 0x9,PMAP__ATTRIBUTE_CLEAR = 0xA,};
enum MACRO_PMAPPORT {PMAPPORT = 111,};
enum MACRO_PMAPPROC {PMAPPROC_NULL = 0,PMAPPROC_SET = 1,PMAPPROC_UNSET = 2,PMAPPROC_GETPORT = 3,PMAPPROC_DUMP = 4,PMAPPROC_CALLIT = 5,};
enum MACRO_PMAPPROG {PMAPPROG = 100000,};
enum MACRO_PMAPVERS {PMAPVERS = 2,};
enum MACRO_PMAPVERS_PROTO {PMAPVERS_PROTO = 2,PMAPVERS_ORIG = 1,};
enum MACRO_POLICY {POLICY_NULL = 0,POLICY_TIMESHARE = 1,POLICY_RR = 2,POLICY_FIFO = 4,};
enum MACRO_POLICYCLASS {POLICYCLASS_FIXEDPRI = 6,};
enum MACRO_POLL {POLL_IN = 1,POLL_OUT = 2,POLL_MSG = 3,POLL_ERR = 4,POLL_PRI = 5,POLL_HUP = 6,};
enum MACRO_POLLERR {POLLERR = 0x8,POLLHUP = 0x10,POLLNVAL = 0x20,};
enum MACRO_POLLIN {POLLIN = 0x1,POLLPRI = 0x2,POLLOUT = 0x4,POLLRDNORM = 0x40,};
enum MACRO_POLLSTANDARD {POLLSTANDARD = 511,};
enum MACRO_POLLWRNORM {POLLWRNORM = 4,POLLRDBAND = 128,POLLWRBAND = 256,POLLEXTEND = 512,POLLATTRIB = 1024,POLLNLINK = 2048,POLLWRITE = 4096,};
enum MACRO_POSIX {POSIX_MADV_NORMAL = 0,POSIX_MADV_RANDOM = 1,POSIX_MADV_SEQUENTIAL = 2,POSIX_MADV_WILLNEED = 3,POSIX_MADV_DONTNEED = 4,};
enum MACRO_POSIX_SPAWN {POSIX_SPAWN_RESETIDS = 0x1,POSIX_SPAWN_SETPGROUP = 0x2,POSIX_SPAWN_SETSIGDEF = 0x4,POSIX_SPAWN_SETSIGMASK = 0x8,POSIX_SPAWN_SETEXEC = 0x40,POSIX_SPAWN_START_SUSPENDED = 0x80,POSIX_SPAWN_CLOEXEC_DEFAULT = 0x4000,POSIX_SPAWN_PCONTROL_NONE = 0x0,POSIX_SPAWN_PCONTROL_THROTTLE = 0x1,POSIX_SPAWN_PCONTROL_SUSPEND = 0x2,POSIX_SPAWN_PCONTROL_KILL = 0x3,};
enum MACRO_PPAUSE {PPAUSE = 40,};
enum MACRO_PPD {PPD_MAX_NAME = 41,PPD_MAX_TEXT = 81,PPD_MAX_LINE = 256,};
enum MACRO_PPNUM : __int64 {PPNUM_MAX = 4294967295,};
enum MACRO_PPPDISC {PPPDISC = 5,};
enum MACRO_PQ {PQ_64BIT_IS_INTEGER = 1,PQ_64BIT_IS_BIGNUM = 0,};
enum MACRO_PR {PR_SLOWHZ = 2,};
enum MACRO_PREALLOCATE {PREALLOCATE = 0x1,ALLOCATECONTIG = 0x2,ALLOCATEALL = 0x4,FREEREMAINDER = 0x8,ALLOCATEFROMPEOF = 0x10,ALLOCATEFROMVOL = 0x20,};
enum MACRO_PRELIM {PRELIM = 1,COMPLETE = 2,};
enum MACRO_PRESERVE {PRESERVE_FILE_TIMES = 1,};
enum MACRO_PRIMASK {PRIMASK = 0xFF,PCATCH = 0x100,PTTYBLOCK = 0x200,PDROP = 0x400,PSPIN = 0x800,};
enum MACRO_PRIO : __int64 {PRIO_PROCESS = 0,PRIO_PGRP = 1,PRIO_USER = 2,PRIO_DARWIN_THREAD = 3,PRIO_DARWIN_PROCESS = 4,PRIO_MIN = -20,PRIO_MAX = 20,PRIO_DARWIN_BG = 4096,PRIO_DARWIN_NONUI = 4097,};
enum MACRO_PRIV {KERN_PRIV = 0,USER_PRIV = 3,};
enum MACRO_PROC {PROC_ALL_PIDS = 1,PROC_PGRP_ONLY = 2,PROC_TTY_ONLY = 3,PROC_UID_ONLY = 4,PROC_RUID_ONLY = 5,PROC_PPID_ONLY = 6,PROC_FLAG_SYSTEM = 1,PROC_FLAG_TRACED = 2,PROC_FLAG_INEXIT = 4,PROC_FLAG_PPWAIT = 8,PROC_FLAG_LP64 = 16,PROC_FLAG_SLEADER = 32,PROC_FLAG_CTTY = 64,PROC_FLAG_CONTROLT = 128,PROC_FLAG_THCWD = 256,PROC_FLAG_PC_THROTTLE = 512,PROC_FLAG_PC_SUSP = 1024,PROC_FLAG_PC_KILL = 1536,PROC_FLAG_PC_MASK = 1536,PROC_FLAG_PA_THROTTLE = 2048,PROC_FLAG_PA_SUSP = 4096,PROC_FLAG_PSUGID = 8192,PROC_FLAG_EXEC = 16384,};
enum MACRO_PROCESS {INIT_PROCESS = 5,LOGIN_PROCESS = 6,USER_PROCESS = 7,DEAD_PROCESS = 8,};
enum MACRO_PROCESSOR {PROCESSOR_INFO_MAX = 1024,PROCESSOR_SET_INFO_MAX = 1024,PROCESSOR_BASIC_INFO = 1,PROCESSOR_CPU_LOAD_INFO = 2,PROCESSOR_PM_REGS_INFO = 268435457,PROCESSOR_TEMPERATURE = 268435458,};
enum MACRO_PROCESSOR_SET {PROCESSOR_SET_BASIC_INFO = 5,PROCESSOR_SET_LOAD_INFO = 4,};
enum MACRO_PROC_FP {PROC_FP_SHARED = 1,PROC_FP_CLEXEC = 2,};
enum MACRO_PROC_KQUEUE {PROC_KQUEUE_SELECT = 1,PROC_KQUEUE_SLEEP = 2,};
enum MACRO_PROC_PIDLISTFDS {PROC_PIDLISTFDS = 1,PROC_PIDTASKALLINFO = 2,PROC_PIDTBSDINFO = 3,PROC_PIDTASKINFO = 4,PROC_PIDTHREADINFO = 5,PROC_PIDLISTTHREADS = 6,PROC_PIDREGIONINFO = 7,PROC_PIDREGIONPATHINFO = 8,PROC_PIDVNODEPATHINFO = 9,PROC_PIDTHREADPATHINFO = 10,PROC_PIDPATHINFO = 11,PROC_PIDPATHINFO_SIZE = 1024,PROC_PIDPATHINFO_MAXSIZE = 4096,PROC_PIDWORKQUEUEINFO = 12,PROC_PIDT_SHORTBSDINFO = 13,PROC_PIDLISTFILEPORTS = 14,PROC_PIDFDVNODEINFO = 1,PROC_PIDFDVNODEPATHINFO = 2,PROC_PIDFDSOCKETINFO = 3,PROC_PIDFDPSEMINFO = 4,PROC_PIDFDPSHMINFO = 5,PROC_PIDFDPIPEINFO = 6,PROC_PIDFDKQUEUEINFO = 7,PROC_PIDFDATALKINFO = 8,PROC_PIDFILEPORTVNODEPATHINFO = 2,PROC_PIDFILEPORTSOCKETINFO = 3,PROC_PIDFILEPORTPSHMINFO = 5,PROC_PIDFILEPORTPIPEINFO = 6,PROC_SELFSET_PCONTROL = 1,PROC_SELFSET_THREADNAME = 2,PROC_SELFSET_THREADNAME_SIZE = 63,PROC_SELFSET_VMRSRCOWNER = 3,PROC_LISTPIDSPATH_PATH_IS_VOLUME = 1,PROC_LISTPIDSPATH_EXCLUDE_EVTONLY = 2,PROC_SETPC_NONE = 0,PROC_SETPC_THROTTLEMEM = 1,PROC_SETPC_SUSPEND = 2,PROC_SETPC_TERMINATE = 3,};
enum MACRO_PROC_REGION {PROC_REGION_SUBMAP = 1,PROC_REGION_SHARED = 2,};
enum MACRO_PROF : __int64 {PROF_VERSION = -1429577728,PROF_MAGIC_NODE = -1429577727,PROF_NO_SECTION = -1429577726,PROF_NO_RELATION = -1429577725,PROF_ADD_NOT_SECTION = -1429577724,PROF_SECTION_WITH_VALUE = -1429577723,PROF_BAD_LINK_LIST = -1429577722,PROF_BAD_GROUP_LVL = -1429577721,PROF_BAD_PARENT_PTR = -1429577720,PROF_MAGIC_ITERATOR = -1429577719,PROF_SET_SECTION_VALUE = -1429577718,PROF_EINVAL = -1429577717,PROF_READ_ONLY = -1429577716,PROF_SECTION_NOTOP = -1429577715,PROF_SECTION_SYNTAX = -1429577714,PROF_RELATION_SYNTAX = -1429577713,PROF_EXTRA_CBRACE = -1429577712,PROF_MISSING_OBRACE = -1429577711,PROF_MAGIC_PROFILE = -1429577710,PROF_MAGIC_SECTION = -1429577709,PROF_TOPSECTION_ITER_NOSUPP = -1429577708,PROF_INVALID_SECTION = -1429577707,PROF_END_OF_SECTIONS = -1429577706,PROF_BAD_NAMESET = -1429577705,PROF_NO_PROFILE = -1429577704,PROF_MAGIC_FILE = -1429577703,PROF_FAIL_OPEN = -1429577702,PROF_EXISTS = -1429577701,PROF_BAD_BOOLEAN = -1429577700,PROF_BAD_INTEGER = -1429577699,PROF_MAGIC_FILE_DATA = -1429577698,};
enum MACRO_PROFILE {PROFILE_ITER_LIST_SECTION = 0x1,PROFILE_ITER_SECTIONS_ONLY = 0x2,PROFILE_ITER_RELATIONS_ONLY = 0x4,};
enum MACRO_PROP {PROP_H = 1,PROP_DEFAULT = 4,};
enum MACRO_PROT {PROT_NONE = 0x0,PROT_READ = 0x1,PROT_WRITE = 0x2,PROT_EXEC = 0x4,};
enum MACRO_PROTO : __int64 {PROTO_UNDEF = -1,};
enum MACRO_PROTOTYPES {PROTOTYPES = 0,};
enum MACRO_PROX {PROX_FDTYPE_ATALK = 0,PROX_FDTYPE_VNODE = 1,PROX_FDTYPE_SOCKET = 2,PROX_FDTYPE_PSHM = 3,PROX_FDTYPE_PSEM = 4,PROX_FDTYPE_KQUEUE = 5,PROX_FDTYPE_PIPE = 6,PROX_FDTYPE_FSEVENTS = 7,};
enum MACRO_PR_ORIG {PR_ORIG_RA = 0,PR_ORIG_RR = 1,PR_ORIG_STATIC = 2,PR_ORIG_KERNEL = 3,};
enum MACRO_PSOCK {PSOCK = 24,PWAIT = 32,};
enum MACRO_PSWP {PSWP = 0,PVM = 4,PINOD = 8,PRIBIO = 16,};
enum MACRO_PT {PT_TRACE_ME = 0,PT_READ_I = 1,PT_READ_D = 2,PT_READ_U = 3,PT_WRITE_I = 4,PT_WRITE_D = 5,PT_WRITE_U = 6,PT_CONTINUE = 7,PT_KILL = 8,PT_STEP = 9,PT_ATTACH = 10,PT_DETACH = 11,PT_SIGEXC = 12,PT_THUPDATE = 13,PT_ATTACHEXC = 14,PT_FORCEQUOTA = 30,PT_DENY_ATTACH = 31,PT_FIRSTMACH = 32,};
enum MACRO_PTHREAD {PTHREAD_DESTRUCTOR_ITERATIONS = 4,PTHREAD_KEYS_MAX = 512,PTHREAD_STACK_MIN = 8192,};
enum MACRO_PTHREAD_CREATE {PTHREAD_CREATE_JOINABLE = 1,PTHREAD_CREATE_DETACHED = 2,PTHREAD_INHERIT_SCHED = 1,PTHREAD_EXPLICIT_SCHED = 2,PTHREAD_CANCEL_ENABLE = 1,PTHREAD_CANCEL_DISABLE = 0,PTHREAD_CANCEL_DEFERRED = 2,PTHREAD_CANCEL_ASYNCHRONOUS = 0,PTHREAD_CANCELED = 1,PTHREAD_SCOPE_SYSTEM = 1,PTHREAD_SCOPE_PROCESS = 2,PTHREAD_PROCESS_SHARED = 1,PTHREAD_PROCESS_PRIVATE = 2,PTHREAD_PRIO_NONE = 0,PTHREAD_PRIO_INHERIT = 1,PTHREAD_PRIO_PROTECT = 2,PTHREAD_MUTEX_NORMAL = 0,PTHREAD_MUTEX_ERRORCHECK = 1,PTHREAD_MUTEX_RECURSIVE = 2,PTHREAD_MUTEX_DEFAULT = 0,};
enum MACRO_PTRDIFF : __int64 {PTRDIFF_MIN = -9223372036854775808,PTRDIFF_MAX = 9223372036854775807,};
enum MACRO_PUSER {PUSER = 50,};
enum MACRO_PVFS {PVFS = 20,};
enum MACRO_PZERO {PZERO = 22,};
enum MACRO_Q {Q_QUOTAON = 0x100,Q_QUOTAOFF = 0x200,Q_GETQUOTA = 0x300,Q_SETQUOTA = 0x400,Q_SETUSE = 0x500,Q_SYNC = 0x600,Q_QUOTASTAT = 0x700,};
enum MACRO_QF {QF_VERSION = 1,QF_USERS_PER_GB = 256,QF_MIN_USERS = 2048,QF_MAX_USERS = 2097152,QF_GROUPS_PER_GB = 32,QF_MIN_GROUPS = 2048,QF_MAX_GROUPS = 262144,};
enum MACRO_QFIXEDSZ {QFIXEDSZ = 4,RRFIXEDSZ = 10,};
enum MACRO_R {R_CURSOR = 1,};
enum MACRO_RADIXCHAR {RADIXCHAR = 50,};
enum MACRO_RAND {RAND_MAX = 0x7FFFFFFF,};
enum MACRO_RAND_F {RAND_F_ENG_RAND_GET_RAND_METHOD = 108,RAND_F_FIPS_RAND = 103,RAND_F_FIPS_RAND_BYTES = 102,RAND_F_FIPS_RAND_GET_RAND_METHOD = 109,RAND_F_FIPS_RAND_SET_DT = 106,RAND_F_FIPS_SET_DT = 104,RAND_F_FIPS_SET_PRNG_SEED = 107,RAND_F_FIPS_SET_TEST_MODE = 105,RAND_F_RAND_GET_RAND_METHOD = 101,RAND_F_SSLEAY_RAND_BYTES = 100,RAND_R_NON_FIPS_METHOD = 105,RAND_R_NOT_IN_TEST_MODE = 106,RAND_R_NO_KEY_SET = 107,RAND_R_PRNG_ASKING_FOR_TOO_MUCH = 101,RAND_R_PRNG_ERROR = 108,RAND_R_PRNG_KEYED = 109,RAND_R_PRNG_NOT_REKEYED = 102,RAND_R_PRNG_NOT_RESEEDED = 103,RAND_R_PRNG_NOT_SEEDED = 100,RAND_R_PRNG_SEED_MUST_NOT_MATCH_KEY = 110,RAND_R_PRNG_STUCK = 104,};
enum MACRO_RANLIBSKEW {RANLIBSKEW = 3,};
enum MACRO_RB {RB_AUTOBOOT = 0,RB_ASKNAME = 1,RB_SINGLE = 2,RB_NOSYNC = 4,RB_HALT = 8,RB_INITNAME = 16,RB_DFLTROOT = 32,RB_ALTBOOT = 64,RB_UNIPROC = 128,RB_SAFEBOOT = 256,RB_UPSDELAY = 512,RB_QUICK = 1024,RB_PANIC = 0,RB_BOOT = 1,};
enum MACRO_RC2 {RC2_ENCRYPT = 1,RC2_DECRYPT = 0,RC2_BLOCK = 8,RC2_KEY_LENGTH = 16,};
enum MACRO_RC5 {RC5_ENCRYPT = 1,RC5_DECRYPT = 0,RC5_32_BLOCK = 8,RC5_32_KEY_LENGTH = 16,RC5_8_ROUNDS = 8,RC5_12_ROUNDS = 12,RC5_16_ROUNDS = 16,};
enum MACRO_READ {READ = 1,};
enum MACRO_REBASE {REBASE_TYPE_POINTER = 1,REBASE_TYPE_TEXT_ABSOLUTE32 = 2,REBASE_TYPE_TEXT_PCREL32 = 3,REBASE_OPCODE_MASK = 240,REBASE_IMMEDIATE_MASK = 15,REBASE_OPCODE_DONE = 0,REBASE_OPCODE_SET_TYPE_IMM = 16,REBASE_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB = 32,REBASE_OPCODE_ADD_ADDR_ULEB = 48,REBASE_OPCODE_ADD_ADDR_IMM_SCALED = 64,REBASE_OPCODE_DO_REBASE_IMM_TIMES = 80,REBASE_OPCODE_DO_REBASE_ULEB_TIMES = 96,REBASE_OPCODE_DO_REBASE_ADD_ADDR_ULEB = 112,REBASE_OPCODE_DO_REBASE_ULEB_TIMES_SKIPPING_ULEB = 128,};
enum MACRO_REC : __int64 {REC_ESC = -1,REC_EOR = 1,REC_EOF = 2,};
enum MACRO_REFERENCE {REFERENCE_TYPE = 0x7,REFERENCE_FLAG_UNDEFINED_NON_LAZY = 0x0,REFERENCE_FLAG_UNDEFINED_LAZY = 0x1,REFERENCE_FLAG_DEFINED = 0x2,REFERENCE_FLAG_PRIVATE_DEFINED = 0x3,REFERENCE_FLAG_PRIVATE_UNDEFINED_NON_LAZY = 0x4,REFERENCE_FLAG_PRIVATE_UNDEFINED_LAZY = 0x5,};
enum MACRO_REFERENCED {REFERENCED_DYNAMICALLY = 0x10,};
enum MACRO_REG : __int64 {REG_BASIC = 0x0,REG_EXTENDED = 0x1,REG_ICASE = 0x2,REG_NOSUB = 0x4,REG_NEWLINE = 0x8,REG_NOSPEC = 0x10,REG_PEND = 0x20,REG_DUMP = 0x80,REG_ENOSYS = 0xFFFFFFFFFFFFFFFF,REG_NOMATCH = 0x1,REG_BADPAT = 0x2,REG_ECOLLATE = 0x3,REG_ECTYPE = 0x4,REG_EESCAPE = 0x5,REG_ESUBREG = 0x6,REG_EBRACK = 0x7,REG_EPAREN = 0x8,REG_EBRACE = 0x9,REG_BADBR = 0xA,REG_ERANGE = 0xB,REG_ESPACE = 0xC,REG_BADRPT = 0xD,REG_EMPTY = 0xE,REG_ASSERT = 0xF,REG_INVARG = 0x10,REG_ILLSEQ = 0x11,REG_ATOI = 0xFF,REG_ITOA = 0x100,REG_NOTBOL = 0x1,REG_NOTEOL = 0x2,REG_STARTEND = 0x4,REG_TRACE = 0x100,REG_LARGE = 0x200,REG_BACKR = 0x400,};
enum MACRO_REPORT {REPORT_MOUSE_POSITION = 134217728,};
enum MACRO_REPORT_STATS {REPORT_STATS_LEN = 9,REPORT_snmpUnknownSecurityModels_NUM = 1,REPORT_snmpInvalidMsgs_NUM = 2,REPORT_usmStatsUnsupportedSecLevels_NUM = 1,REPORT_usmStatsNotInTimeWindows_NUM = 2,REPORT_usmStatsUnknownUserNames_NUM = 3,REPORT_usmStatsUnknownEngineIDs_NUM = 4,REPORT_usmStatsWrongDigests_NUM = 5,REPORT_usmStatsDecryptionErrors_NUM = 6,};
enum MACRO_REQ {REQ_NEXT_PAGE = 512,REQ_PREV_PAGE = 513,REQ_FIRST_PAGE = 514,REQ_LAST_PAGE = 515,REQ_NEXT_FIELD = 516,REQ_PREV_FIELD = 517,REQ_FIRST_FIELD = 518,REQ_LAST_FIELD = 519,REQ_SNEXT_FIELD = 520,REQ_SPREV_FIELD = 521,REQ_SFIRST_FIELD = 522,REQ_SLAST_FIELD = 523,REQ_LEFT_FIELD = 524,REQ_RIGHT_FIELD = 525,REQ_UP_FIELD = 526,REQ_DOWN_FIELD = 527,REQ_NEXT_CHAR = 528,REQ_PREV_CHAR = 529,REQ_NEXT_LINE = 530,REQ_PREV_LINE = 531,REQ_NEXT_WORD = 532,REQ_PREV_WORD = 533,REQ_BEG_FIELD = 534,REQ_END_FIELD = 535,REQ_BEG_LINE = 536,REQ_END_LINE = 537,REQ_LEFT_CHAR = 538,REQ_RIGHT_CHAR = 539,REQ_UP_CHAR = 540,REQ_DOWN_CHAR = 541,REQ_NEW_LINE = 542,REQ_INS_CHAR = 543,REQ_INS_LINE = 544,REQ_DEL_CHAR = 545,REQ_DEL_PREV = 546,REQ_DEL_LINE = 547,REQ_DEL_WORD = 548,REQ_CLR_EOL = 549,REQ_CLR_EOF = 550,REQ_CLR_FIELD = 551,REQ_OVL_MODE = 552,REQ_INS_MODE = 553,REQ_SCR_FLINE = 554,REQ_SCR_BLINE = 555,REQ_SCR_FPAGE = 556,REQ_SCR_BPAGE = 557,REQ_SCR_FHPAGE = 558,REQ_SCR_BHPAGE = 559,REQ_SCR_FCHAR = 560,REQ_SCR_BCHAR = 561,REQ_SCR_HFLINE = 562,REQ_SCR_HBLINE = 563,REQ_SCR_HFHALF = 564,REQ_SCR_HBHALF = 565,REQ_VALIDATION = 566,REQ_NEXT_CHOICE = 567,REQ_PREV_CHOICE = 568,};
enum MACRO_REQUEST {REQUEST_IS_DELEGATED = 1,REQUEST_IS_NOT_DELEGATED = 0,};
enum MACRO_REQ_LEFT {REQ_LEFT_ITEM = 512,REQ_RIGHT_ITEM = 513,REQ_UP_ITEM = 514,REQ_DOWN_ITEM = 515,REQ_SCR_ULINE = 516,REQ_SCR_DLINE = 517,REQ_SCR_DPAGE = 518,REQ_SCR_UPAGE = 519,REQ_FIRST_ITEM = 520,REQ_LAST_ITEM = 521,REQ_NEXT_ITEM = 522,REQ_PREV_ITEM = 523,REQ_TOGGLE_ITEM = 524,REQ_CLEAR_PATTERN = 525,REQ_BACK_PATTERN = 526,REQ_NEXT_MATCH = 527,REQ_PREV_MATCH = 528,};
enum MACRO_REQ_MSG {GET_REQ_MSG = 160,GETNEXT_REQ_MSG = 161,GET_RSP_MSG = 162,SET_REQ_MSG = 163,TRP_REQ_MSG = 164,BULK_REQ_MSG = 165,INFORM_REQ_MSG = 166,TRP2_REQ_MSG = 167,REPORT_RSP_MSG = 168,};
enum MACRO_RES {RES_TIMEOUT = 5,};
enum MACRO_RESERVE1 {RESERVE1 = 0,RESERVE2 = 1,ACTION = 2,};
enum MACRO_RESERVED {__DARWIN_IPPORT_RESERVED = 1024,IPPORT_RESERVED = 1024,};
enum MACRO_RESERVED_EVENT {BUTTON1_RESERVED_EVENT = 32,BUTTON2_RESERVED_EVENT = 2048,BUTTON3_RESERVED_EVENT = 131072,BUTTON4_RESERVED_EVENT = 8388608,};
enum MACRO_RESVD {RESVD_SET = 31,};
enum MACRO_RES_MAXNDOTS : __int64 {RES_MAXNDOTS = 15,RES_MAXRETRANS = 30,RES_MAXRETRY = 5,RES_DFLRETRY = 2,RES_MAXTIME = 65535,RES_F_VC = 1,RES_F_CONN = 2,RES_F_EDNS0ERR = 4,RES_EXHAUSTIVE = 1,RES_IPV4ONLY = 2,RES_IPV6ONLY = 4,RES_INIT = 1,RES_DEBUG = 2,RES_AAONLY = 4,RES_USEVC = 8,RES_PRIMARY = 16,RES_IGNTC = 32,RES_RECURSE = 64,RES_DEFNAMES = 128,RES_STAYOPEN = 256,RES_DNSRCH = 512,RES_INSECURE1 = 1024,RES_INSECURE2 = 2048,RES_NOALIASES = 4096,RES_USE_INET6 = 8192,RES_ROTATE = 16384,RES_NOCHECKNAME = 32768,RES_KEEPTSIG = 65536,RES_BLAST = 131072,RES_NO_NIBBLE = 262144,RES_NO_BITSTRING = 524288,RES_NOTLDQUERY = 1048576,RES_USE_DNSSEC = 2097152,RES_USE_DNAME = 268435456,RES_USE_A6 = 536870912,RES_USE_EDNS0 = 1073741824,RES_NO_NIBBLE2 = 2147483648,RES_DEFAULT = 1728,RES_PRF_STATS = 1,RES_PRF_UPDATE = 2,RES_PRF_CLASS = 4,RES_PRF_CMD = 8,RES_PRF_QUES = 16,RES_PRF_ANS = 32,RES_PRF_AUTH = 64,RES_PRF_ADD = 128,RES_PRF_HEAD1 = 256,RES_PRF_HEAD2 = 512,RES_PRF_TTLID = 1024,RES_PRF_HEADX = 2048,RES_PRF_QUERY = 4096,RES_PRF_REPLY = 8192,RES_PRF_INIT = 16384,RES_PRF_TRUNC = 32768,};
enum MACRO_RET : __int64 {RET_ERROR = -1,RET_SUCCESS = 0,RET_SPECIAL = 1,};
enum MACRO_RETRY_TIMEOUT {CLSET_RETRY_TIMEOUT = 4,CLGET_RETRY_TIMEOUT = 5,};
enum MACRO_RETURN {RETURN = 6,};
enum MACRO_RING {RING_WAIT = 30,};
enum MACRO_RIPCMD {RIPCMD_REQUEST = 1,RIPCMD_RESPONSE = 2,RIPCMD_TRACEON = 3,RIPCMD_TRACEOFF = 4,RIPCMD_MAX = 5,};
enum MACRO_RIPEMD160 {RIPEMD160_CBLOCK = 64,RIPEMD160_LBLOCK = 16,RIPEMD160_DIGEST_LENGTH = 20,};
enum MACRO_RIPVERSION {RIPVERSION = 1,};
enum MACRO_RL {RL_READLINE_VERSION = 0x402,RL_PROMPT_START_IGNORE = 0x1,RL_PROMPT_END_IGNORE = 0x2,};
enum MACRO_RLIM : __int64 {RLIM_INFINITY = 9223372036854775807,RLIM_SAVED_MAX = 9223372036854775807,RLIM_SAVED_CUR = 9223372036854775807,};
enum MACRO_RLIMIT {RLIMIT_CPU = 0,RLIMIT_FSIZE = 1,RLIMIT_DATA = 2,RLIMIT_STACK = 3,RLIMIT_CORE = 4,RLIMIT_AS = 5,RLIMIT_RSS = 5,RLIMIT_MEMLOCK = 6,RLIMIT_NPROC = 7,RLIMIT_NOFILE = 8,};
enum MACRO_RLIM_NLIMITS {RLIM_NLIMITS = 9,};
enum MACRO_RPC {RPC_SIGBUF_SIZE = 8,RPC_SUBSYSTEM_NULL = 0,};
enum MACRO_RPCAKN {RPCAKN_FULLNAME = 0,RPCAKN_NICKNAME = 1,};
enum MACRO_RPCAUTH : __int64 {RPCAUTH_NULL = 0,RPCAUTH_NONE = 0,RPCAUTH_UNIX = 1,RPCAUTH_SYS = 1,RPCAUTH_SHORT = 2,RPCAUTH_KERB4 = 4,RPCAUTH_KRB5 = 390003,RPCAUTH_KRB5I = 390004,RPCAUTH_KRB5P = 390005,RPCAUTH_INVALID = -1,RPCAUTH_UNKNOWN = -1,RPCAUTH_MAXSIZ = 400,RPCAUTH_UNIXGIDS = 16,};
enum MACRO_RPCBPROC {RPCBPROC_NULL = 0,RPCBPROC_SET = 1,RPCBPROC_UNSET = 2,RPCBPROC_GETADDR = 3,RPCBPROC_DUMP = 4,RPCBPROC_CALLIT = 5,RPCBPROC_BCAST = 5,RPCBPROC_GETTIME = 6,RPCBPROC_UADDR2TADDR = 7,RPCBPROC_TADDR2UADDR = 8,RPCBPROC_GETVERSADDR = 9,RPCBPROC_INDIRECT = 10,RPCBPROC_GETADDRLIST = 11,RPCBPROC_GETSTAT = 12,};
enum MACRO_RPCBPROG {RPCBPROG = 100000,};
enum MACRO_RPCBVERS3 {RPCBVERS3 = 3,RPCBVERS4 = 4,};
enum MACRO_RPCGEN {RPCGEN_VERSION = 199506,};
enum MACRO_RPCMNT {RPCMNT_VER1 = 1,RPCMNT_VER3 = 3,RPCMNT_MOUNT = 1,RPCMNT_DUMP = 2,RPCMNT_UMOUNT = 3,RPCMNT_UMNTALL = 4,RPCMNT_EXPORT = 5,RPCMNT_NAMELEN = 255,RPCMNT_PATHLEN = 1024,};
enum MACRO_RPCPROG {RPCPROG_MNT = 100005,};
enum MACRO_RPCPROG_NFS {RPCPROG_NFS = 100003,RPCPROG_RQUOTA = 100011,};
enum MACRO_RPCRQUOTA {RPCRQUOTA_VER = 1,RPCRQUOTA_EXT_VER = 2,RPCRQUOTA_GET = 1,};
enum MACRO_RPCSMALLMSGSIZE {RPCSMALLMSGSIZE = 400,};
enum MACRO_RPCTEST {RPCTEST_PROGRAM = 1,RPCTEST_VERSION = 1,RPCTEST_NULL_PROC = 2,RPCTEST_NULL_BATCH_PROC = 3,};
enum MACRO_RPC_CALL {RPC_CALL = 0,RPC_REPLY = 1,RPC_MSGACCEPTED = 0,RPC_MSGDENIED = 1,RPC_PROGUNAVAIL_NFS = 1,RPC_PROGMISMATCH = 2,RPC_PROCUNAVAIL_NFS = 3,RPC_GARBAGE = 4,RPC_SYSTEM_ERR = 5,RPC_MISMATCH_NFS = 0,RPC_AUTHERR = 1,RPC_SIZ = 24,RPC_REPLYSIZ = 28,};
enum MACRO_RPC_MSG : __int64 {RPC_MSG_VERSION = 2,RPC_SERVICE_PORT = 2048,RPC_ANYSOCK = -1,};
enum MACRO_RPC_VER2 {RPC_VER2 = 2,};
enum MACRO_RPM {RPM_PCO_ADD = 1,RPM_PCO_CHANGE = 2,RPM_PCO_SETGLOBAL = 3,RPM_PCO_MAX = 4,};
enum MACRO_RPP {RPP_ECHO_OFF = 0x0,RPP_ECHO_ON = 0x1,RPP_REQUIRE_TTY = 0x2,RPP_FORCELOWER = 0x4,RPP_FORCEUPPER = 0x8,RPP_SEVENBIT = 0x10,};
enum MACRO_RQ {RQ_FILE = 1,RQ_DAEMON = 2,RQ_USER = 3,RQ_CLIENT_NAME = 4,RQ_CLIENT_ADDR = 5,RQ_CLIENT_SIN = 6,RQ_SERVER_NAME = 7,RQ_SERVER_ADDR = 8,RQ_SERVER_SIN = 9,};
enum MACRO_RQUOTA {RQUOTA_STAT_OK = 1,RQUOTA_STAT_NOQUOTA = 2,RQUOTA_STAT_EPERM = 3,};
enum MACRO_RQUOTAPROC {RQUOTAPROC_GETQUOTA = 1,RQUOTAPROC_GETACTIVEQUOTA = 2,};
enum MACRO_RQUOTAPROG {RQUOTAPROG = 100011,};
enum MACRO_RQUOTAVERS {RQUOTAVERS = 1,};
enum MACRO_RQ_PATHLEN {RQ_PATHLEN = 1024,};
enum MACRO_RRQ {RRQ = 0x1,WRQ = 0x2,};
enum MACRO_RS {RS_NONEXISTENT = 0,RS_ACTIVE = 1,RS_NOTINSERVICE = 2,RS_NOTREADY = 3,RS_CREATEANDGO = 4,RS_CREATEANDWAIT = 5,RS_DESTROY = 6,};
enum MACRO_RSA {RSA_FLAG_FIPS_METHOD = 0x400,RSA_FLAG_NON_FIPS_ALLOW = 0x400,};
enum MACRO_RSA_3 {RSA_3 = 0x3,RSA_F4 = 0x10001,RSA_METHOD_FLAG_NO_CHECK = 0x1,RSA_FLAG_CACHE_PUBLIC = 0x2,RSA_FLAG_CACHE_PRIVATE = 0x4,RSA_FLAG_BLINDING = 0x8,RSA_FLAG_THREAD_SAFE = 0x10,RSA_FLAG_EXT_PKEY = 0x20,RSA_FLAG_SIGN_VER = 0x40,RSA_FLAG_NO_BLINDING = 0x80,RSA_FLAG_NO_CONSTTIME = 0x100,RSA_FLAG_NO_EXP_CONSTTIME = 0x100,RSA_PKCS1_PADDING = 0x1,RSA_SSLV23_PADDING = 0x2,RSA_NO_PADDING = 0x3,RSA_PKCS1_OAEP_PADDING = 0x4,RSA_X931_PADDING = 0x5,RSA_PKCS1_PADDING_SIZE = 0xB,RSA_F_FIPS_RSA_SIGN = 0x8C,RSA_F_FIPS_RSA_VERIFY = 0x8D,RSA_F_MEMORY_LOCK = 0x64,RSA_F_RSA_BUILTIN_KEYGEN = 0x81,RSA_F_RSA_CHECK_KEY = 0x7B,RSA_F_RSA_EAY_PRIVATE_DECRYPT = 0x65,RSA_F_RSA_EAY_PRIVATE_ENCRYPT = 0x66,RSA_F_RSA_EAY_PUBLIC_DECRYPT = 0x67,RSA_F_RSA_EAY_PUBLIC_ENCRYPT = 0x68,RSA_F_RSA_GENERATE_KEY = 0x69,RSA_F_RSA_MEMORY_LOCK = 0x82,RSA_F_RSA_NEW_METHOD = 0x6A,RSA_F_RSA_NULL = 0x7C,RSA_F_RSA_NULL_MOD_EXP = 0x83,RSA_F_RSA_NULL_PRIVATE_DECRYPT = 0x84,RSA_F_RSA_NULL_PRIVATE_ENCRYPT = 0x85,RSA_F_RSA_NULL_PUBLIC_DECRYPT = 0x86,RSA_F_RSA_NULL_PUBLIC_ENCRYPT = 0x87,RSA_F_RSA_PADDING_ADD_NONE = 0x6B,RSA_F_RSA_PADDING_ADD_PKCS1_OAEP = 0x79,RSA_F_RSA_PADDING_ADD_PKCS1_PSS = 0x7D,RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_1 = 0x6C,RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_2 = 0x6D,RSA_F_RSA_PADDING_ADD_SSLV23 = 0x6E,RSA_F_RSA_PADDING_ADD_X931 = 0x7F,RSA_F_RSA_PADDING_CHECK_NONE = 0x6F,RSA_F_RSA_PADDING_CHECK_PKCS1_OAEP = 0x7A,RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_1 = 0x70,RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_2 = 0x71,RSA_F_RSA_PADDING_CHECK_SSLV23 = 0x72,RSA_F_RSA_PADDING_CHECK_X931 = 0x80,RSA_F_RSA_PRINT = 0x73,RSA_F_RSA_PRINT_FP = 0x74,RSA_F_RSA_PRIVATE_ENCRYPT = 0x89,RSA_F_RSA_PUBLIC_DECRYPT = 0x8A,RSA_F_RSA_SETUP_BLINDING = 0x88,RSA_F_RSA_SET_DEFAULT_METHOD = 0x8B,RSA_F_RSA_SET_METHOD = 0x8E,RSA_F_RSA_SIGN = 0x75,RSA_F_RSA_SIGN_ASN1_OCTET_STRING = 0x76,RSA_F_RSA_VERIFY = 0x77,RSA_F_RSA_VERIFY_ASN1_OCTET_STRING = 0x78,RSA_F_RSA_VERIFY_PKCS1_PSS = 0x7E,RSA_R_ALGORITHM_MISMATCH = 0x64,RSA_R_BAD_E_VALUE = 0x65,RSA_R_BAD_FIXED_HEADER_DECRYPT = 0x66,RSA_R_BAD_PAD_BYTE_COUNT = 0x67,RSA_R_BAD_SIGNATURE = 0x68,RSA_R_BLOCK_TYPE_IS_NOT_01 = 0x6A,RSA_R_BLOCK_TYPE_IS_NOT_02 = 0x6B,RSA_R_DATA_GREATER_THAN_MOD_LEN = 0x6C,RSA_R_DATA_TOO_LARGE = 0x6D,RSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE = 0x6E,RSA_R_DATA_TOO_LARGE_FOR_MODULUS = 0x84,RSA_R_DATA_TOO_SMALL = 0x6F,RSA_R_DATA_TOO_SMALL_FOR_KEY_SIZE = 0x7A,RSA_R_DIGEST_TOO_BIG_FOR_RSA_KEY = 0x70,RSA_R_DMP1_NOT_CONGRUENT_TO_D = 0x7C,RSA_R_DMQ1_NOT_CONGRUENT_TO_D = 0x7D,RSA_R_D_E_NOT_CONGRUENT_TO_1 = 0x7B,RSA_R_FIRST_OCTET_INVALID = 0x85,RSA_R_INVALID_HEADER = 0x89,RSA_R_INVALID_MESSAGE_LENGTH = 0x83,RSA_R_INVALID_PADDING = 0x8A,RSA_R_INVALID_TRAILER = 0x8B,RSA_R_IQMP_NOT_INVERSE_OF_Q = 0x7E,RSA_R_KEY_SIZE_TOO_SMALL = 0x78,RSA_R_LAST_OCTET_INVALID = 0x86,RSA_R_MODULUS_TOO_LARGE = 0x69,RSA_R_NON_FIPS_METHOD = 0x8D,RSA_R_NO_PUBLIC_EXPONENT = 0x8C,RSA_R_NULL_BEFORE_BLOCK_MISSING = 0x71,RSA_R_N_DOES_NOT_EQUAL_P_Q = 0x7F,RSA_R_OAEP_DECODING_ERROR = 0x79,RSA_R_OPERATION_NOT_ALLOWED_IN_FIPS_MODE = 0x8E,RSA_R_PADDING_CHECK_FAILED = 0x72,RSA_R_P_NOT_PRIME = 0x80,RSA_R_Q_NOT_PRIME = 0x81,RSA_R_RSA_OPERATIONS_NOT_SUPPORTED = 0x82,RSA_R_SLEN_CHECK_FAILED = 0x88,RSA_R_SLEN_RECOVERY_FAILED = 0x87,RSA_R_SSLV3_ROLLBACK_ATTACK = 0x73,RSA_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD = 0x74,RSA_R_UNKNOWN_ALGORITHM_TYPE = 0x75,RSA_R_UNKNOWN_PADDING_TYPE = 0x76,RSA_R_WRONG_SIGNATURE_LENGTH = 0x77,};
enum MACRO_RSTAT {RSTAT_CPUSTATES = 4,RSTAT_DK_NDRIVE = 4,};
enum MACRO_RSTATPROC {RSTATPROC_STATS = 1,RSTATPROC_HAVEDISK = 2,};
enum MACRO_RSTATPROG {RSTATPROG = 100001,};
enum MACRO_RSTATVERS {RSTATVERS_TIME = 3,};
enum MACRO_RSTATVERS_SWTCH {RSTATVERS_SWTCH = 2,RSTATVERS_ORIG = 1,};
enum MACRO_RTA {RTA_DST = 0x1,RTA_GATEWAY = 0x2,RTA_NETMASK = 0x4,RTA_GENMASK = 0x8,RTA_IFP = 0x10,RTA_IFA = 0x20,RTA_AUTHOR = 0x40,RTA_BRD = 0x80,};
enum MACRO_RTAX {RTAX_DST = 0,RTAX_GATEWAY = 1,RTAX_NETMASK = 2,RTAX_GENMASK = 3,RTAX_IFP = 4,RTAX_IFA = 5,RTAX_AUTHOR = 6,RTAX_BRD = 7,RTAX_MAX = 8,};
enum MACRO_RTF {RTF_UP = 0x1,RTF_GATEWAY = 0x2,RTF_HOST = 0x4,RTF_REJECT = 0x8,RTF_DYNAMIC = 0x10,RTF_MODIFIED = 0x20,RTF_DONE = 0x40,RTF_DELCLONE = 0x80,RTF_CLONING = 0x100,RTF_XRESOLVE = 0x200,RTF_LLINFO = 0x400,RTF_STATIC = 0x800,RTF_BLACKHOLE = 0x1000,RTF_PROTO2 = 0x4000,RTF_PROTO1 = 0x8000,RTF_PRCLONING = 0x10000,RTF_WASCLONED = 0x20000,RTF_PROTO3 = 0x40000,RTF_PINNED = 0x100000,RTF_LOCAL = 0x200000,RTF_BROADCAST = 0x400000,RTF_MULTICAST = 0x800000,RTF_IFSCOPE = 0x1000000,RTF_CONDEMNED = 0x2000000,RTF_IFREF = 0x4000000,};
enum MACRO_RTF_USETRAILERS {RTF_USETRAILERS = 32768,RTF_ANNOUNCE = 16384,};
enum MACRO_RTLD : __int64 {RTLD_LAZY = 0x1,RTLD_NOW = 0x2,RTLD_LOCAL = 0x4,RTLD_GLOBAL = 0x8,RTLD_NOLOAD = 0x10,RTLD_NODELETE = 0x80,RTLD_FIRST = 0x100,RTLD_NEXT = 0xFFFFFFFFFFFFFFFF,RTLD_DEFAULT = 0xFFFFFFFFFFFFFFFE,RTLD_SELF = 0xFFFFFFFFFFFFFFFD,RTLD_MAIN_ONLY = 0xFFFFFFFFFFFFFFFB,};
enum MACRO_RTM {RTM_RTTUNIT = 1000000,};
enum MACRO_RTM_VERSION {RTM_VERSION = 5,RTM_ADD = 1,RTM_DELETE = 2,RTM_CHANGE = 3,RTM_GET = 4,RTM_LOSING = 5,RTM_REDIRECT = 6,RTM_MISS = 7,RTM_LOCK = 8,RTM_OLDADD = 9,RTM_OLDDEL = 10,RTM_RESOLVE = 11,RTM_NEWADDR = 12,RTM_DELADDR = 13,RTM_IFINFO = 14,RTM_NEWMADDR = 15,RTM_DELMADDR = 16,RTM_IFINFO2 = 18,RTM_NEWMADDR2 = 19,RTM_GET2 = 20,};
enum MACRO_RTV {RTV_MTU = 0x1,RTV_HOPCOUNT = 0x2,RTV_EXPIRE = 0x4,RTV_RPIPE = 0x8,RTV_SPIPE = 0x10,RTV_SSTHRESH = 0x20,RTV_RTT = 0x40,RTV_RTTVAR = 0x80,};
enum MACRO_RUBOUT {RUBOUT = 0x7F,};
enum MACRO_RUN {RUN_LVL = 1,};
enum MACRO_RUSAGE : __int64 {RUSAGE_SELF = 0,RUSAGE_CHILDREN = -1,};
enum MACRO_RUSERS {RUSERS_MAXUSERLEN = 32,RUSERS_MAXLINELEN = 32,RUSERS_MAXHOSTLEN = 257,RUSERS_EMPTY = 0,RUSERS_RUN_LVL = 1,RUSERS_BOOT_TIME = 2,RUSERS_OLD_TIME = 3,RUSERS_NEW_TIME = 4,RUSERS_INIT_PROCESS = 5,RUSERS_LOGIN_PROCESS = 6,RUSERS_USER_PROCESS = 7,RUSERS_DEAD_PROCESS = 8,RUSERS_ACCOUNTING = 9,};
enum MACRO_RUSERSPROC {RUSERSPROC_NUM = 1,RUSERSPROC_NAMES = 2,RUSERSPROC_ALLNAMES = 3,};
enum MACRO_RUSERSPROG {RUSERSPROG = 100002,};
enum MACRO_RUSERSVERS {RUSERSVERS_ORIG = 1,RUSERSVERS_IDLE = 2,};
enum MACRO_RUSERSVERS_1 {RUSERSVERS_1 = 1,RUSERSVERS_2 = 2,};
enum MACRO_RUSERSVERS_3 {RUSERSVERS_3 = 3,};
enum MACRO_R_ABS : __int64 {R_ABS = 0,R_SCATTERED = 2147483648,};
enum MACRO_R_DUP {R_DUP = 0x1,};
enum MACRO_R_FIRST {R_FIRST = 3,R_IAFTER = 4,R_IBEFORE = 5,R_LAST = 6,R_NEXT = 7,R_NOOVERWRITE = 8,R_PREV = 9,R_SETCURSOR = 10,R_RECNOSYNC = 11,};
enum MACRO_R_FIXEDLEN {R_FIXEDLEN = 0x1,R_NOKEY = 0x2,R_SNAPSHOT = 0x4,};
enum MACRO_S {S_IFMT = 0xF000,S_IFIFO = 0x1000,S_IFCHR = 0x2000,S_IFDIR = 0x4000,S_IFBLK = 0x6000,S_IFREG = 0x8000,S_IFLNK = 0xA000,S_IFSOCK = 0xC000,S_IFWHT = 0xE000,S_IRWXU = 0x1C0,S_IRUSR = 0x100,S_IWUSR = 0x80,S_IXUSR = 0x40,S_IRWXG = 0x38,S_IRGRP = 0x20,S_IWGRP = 0x10,S_IXGRP = 0x8,S_IRWXO = 0x7,S_IROTH = 0x4,S_IWOTH = 0x2,S_IXOTH = 0x1,S_ISUID = 0x800,S_ISGID = 0x400,S_ISVTX = 0x200,S_ISTXT = 0x200,S_IREAD = 0x100,S_IWRITE = 0x80,S_IEXEC = 0x40,};
enum MACRO_SA {SA_ONSTACK = 0x1,SA_RESTART = 0x2,SA_RESETHAND = 0x4,SA_NOCLDSTOP = 0x8,SA_NODEFER = 0x10,SA_NOCLDWAIT = 0x20,SA_SIGINFO = 0x40,SA_USERTRAMP = 0x100,SA_64REGSET = 0x200,SA_USERSPACE_MASK = 0x7F,};
enum MACRO_SACK {TCPOPT_SACK = 5,TCPOLEN_SACK = 8,};
enum MACRO_SACK_PERMITTED {TCPOPT_SACK_PERMITTED = 4,TCPOLEN_SACK_PERMITTED = 2,};
enum MACRO_SADB {SADB_RESERVED = 0,SADB_GETSPI = 1,SADB_UPDATE = 2,SADB_ADD = 3,SADB_DELETE = 4,SADB_GET = 5,SADB_ACQUIRE = 6,SADB_REGISTER = 7,SADB_EXPIRE = 8,SADB_FLUSH = 9,SADB_DUMP = 10,SADB_X_PROMISC = 11,SADB_X_PCHANGE = 12,SADB_X_SPDUPDATE = 13,SADB_X_SPDADD = 14,SADB_X_SPDDELETE = 15,SADB_X_SPDGET = 16,SADB_X_SPDACQUIRE = 17,SADB_X_SPDDUMP = 18,SADB_X_SPDFLUSH = 19,SADB_X_SPDSETIDX = 20,SADB_X_SPDEXPIRE = 21,SADB_X_SPDDELETE2 = 22,SADB_GETSASTAT = 23,SADB_MAX = 23,SADB_EXT_RESERVED = 0,SADB_EXT_SA = 1,SADB_EXT_LIFETIME_CURRENT = 2,SADB_EXT_LIFETIME_HARD = 3,SADB_EXT_LIFETIME_SOFT = 4,SADB_EXT_ADDRESS_SRC = 5,SADB_EXT_ADDRESS_DST = 6,SADB_EXT_ADDRESS_PROXY = 7,SADB_EXT_KEY_AUTH = 8,SADB_EXT_KEY_ENCRYPT = 9,SADB_EXT_IDENTITY_SRC = 10,SADB_EXT_IDENTITY_DST = 11,SADB_EXT_SENSITIVITY = 12,SADB_EXT_PROPOSAL = 13,SADB_EXT_SUPPORTED_AUTH = 14,SADB_EXT_SUPPORTED_ENCRYPT = 15,SADB_EXT_SPIRANGE = 16,SADB_X_EXT_KMPRIVATE = 17,SADB_X_EXT_POLICY = 18,SADB_X_EXT_SA2 = 19,SADB_EXT_SESSION_ID = 20,SADB_EXT_SASTAT = 21,SADB_EXT_MAX = 21,SADB_SATYPE_UNSPEC = 0,SADB_SATYPE_AH = 2,SADB_SATYPE_ESP = 3,SADB_SATYPE_RSVP = 5,SADB_SATYPE_OSPFV2 = 6,SADB_SATYPE_RIPV2 = 7,SADB_SATYPE_MIP = 8,SADB_X_SATYPE_IPCOMP = 9,SADB_X_SATYPE_POLICY = 10,SADB_SATYPE_MAX = 11,SADB_SASTATE_LARVAL = 0,SADB_SASTATE_MATURE = 1,SADB_SASTATE_DYING = 2,SADB_SASTATE_DEAD = 3,SADB_SASTATE_MAX = 3,SADB_SAFLAGS_PFS = 1,SADB_AALG_NONE = 0,SADB_AALG_MD5HMAC = 1,SADB_AALG_SHA1HMAC = 2,SADB_AALG_MAX = 8,SADB_X_AALG_SHA2_256 = 6,SADB_X_AALG_SHA2_384 = 7,SADB_X_AALG_SHA2_512 = 8,SADB_X_AALG_MD5 = 3,SADB_X_AALG_SHA = 4,SADB_X_AALG_NULL = 5,SADB_EALG_NONE = 0,SADB_EALG_DESCBC = 1,SADB_EALG_3DESCBC = 2,SADB_EALG_NULL = 3,SADB_EALG_MAX = 12,SADB_X_EALG_CAST128CBC = 5,SADB_X_EALG_BLOWFISHCBC = 4,SADB_X_EALG_RIJNDAELCBC = 12,SADB_X_EALG_AESCBC = 12,SADB_X_EALG_AES = 12,SADB_X_CALG_NONE = 0,SADB_X_CALG_OUI = 1,SADB_X_CALG_DEFLATE = 2,SADB_X_CALG_LZS = 3,SADB_X_CALG_MAX = 4,SADB_IDENTTYPE_RESERVED = 0,SADB_IDENTTYPE_PREFIX = 1,SADB_IDENTTYPE_FQDN = 2,SADB_IDENTTYPE_USERFQDN = 3,SADB_X_IDENTTYPE_ADDR = 4,SADB_IDENTTYPE_MAX = 4,SADB_X_EXT_NONE = 0,SADB_X_EXT_OLD = 1,SADB_X_EXT_IV4B = 16,SADB_X_EXT_DERIV = 32,SADB_X_EXT_CYCSEQ = 64,SADB_X_EXT_PSEQ = 0,SADB_X_EXT_PRAND = 256,SADB_X_EXT_PZERO = 512,SADB_X_EXT_PMASK = 768,SADB_X_EXT_RAWCPI = 128,SADB_KEY_FLAGS_MAX = 4095,SADB_X_LIFETIME_ALLOCATIONS = 0,SADB_X_LIFETIME_BYTES = 1,SADB_X_LIFETIME_ADDTIME = 2,SADB_X_LIFETIME_USETIME = 3,};
enum MACRO_SALT : __int64 {SALT_TYPE_AFS_LENGTH = 4294967295,SALT_TYPE_NO_LENGTH = 4294967295,};
enum MACRO_SARMAG {SARMAG = 8,};
enum MACRO_SASL : __int64 {SASL_H = 1,SASL_VERSION_MAJOR = 2,SASL_VERSION_MINOR = 1,SASL_VERSION_STEP = 22,SASL_VERSION_FULL = 131350,SASL_CONTINUE = 1,SASL_OK = 0,SASL_FAIL = -1,SASL_NOMEM = -2,SASL_BUFOVER = -3,SASL_NOMECH = -4,SASL_BADPROT = -5,SASL_NOTDONE = -6,SASL_BADPARAM = -7,SASL_TRYAGAIN = -8,SASL_BADMAC = -9,SASL_NOTINIT = -12,SASL_INTERACT = 2,SASL_BADSERV = -10,SASL_WRONGMECH = -11,SASL_BADAUTH = -13,SASL_NOAUTHZ = -14,SASL_TOOWEAK = -15,SASL_ENCRYPT = -16,SASL_TRANS = -17,SASL_EXPIRED = -18,SASL_DISABLED = -19,SASL_NOUSER = -20,SASL_BADVERS = -23,SASL_UNAVAIL = -24,SASL_NOVERIFY = -26,SASL_PWLOCK = -21,SASL_NOCHANGE = -22,SASL_WEAKPASS = -27,SASL_NOUSERPASS = -28,SASL_MECHNAMEMAX = 20,SASL_SUCCESS_DATA = 4,SASL_NEED_PROXY = 8,SASL_SEC_NOPLAINTEXT = 1,SASL_SEC_NOACTIVE = 2,SASL_SEC_NODICTIONARY = 4,SASL_SEC_FORWARD_SECRECY = 8,SASL_SEC_NOANONYMOUS = 16,SASL_SEC_PASS_CREDENTIALS = 32,SASL_SEC_MUTUAL_AUTH = 64,SASL_SEC_MAXIMUM = 255,SASL_CB_LIST_END = 0,SASL_CB_GETOPT = 1,SASL_LOG_NONE = 0,SASL_LOG_ERR = 1,SASL_LOG_FAIL = 2,SASL_LOG_WARN = 3,SASL_LOG_NOTE = 4,SASL_LOG_DEBUG = 5,SASL_LOG_TRACE = 6,SASL_LOG_PASS = 7,SASL_CB_LOG = 2,SASL_CB_GETPATH = 3,SASL_CB_VERIFYFILE = 4,SASL_CB_USER = 16385,SASL_CB_AUTHNAME = 16386,SASL_CB_LANGUAGE = 16387,SASL_CB_CNONCE = 16391,SASL_CB_PASS = 16388,SASL_CB_ECHOPROMPT = 16389,SASL_CB_NOECHOPROMPT = 16390,SASL_CB_GETREALM = 16392,SASL_CB_PROXY_POLICY = 32769,SASL_CB_SERVER_USERDB_CHECKPASS = 32773,SASL_CB_SERVER_USERDB_SETPASS = 32774,SASL_CU_NONE = 0,SASL_CU_AUTHID = 1,SASL_CU_AUTHZID = 2,SASL_CB_CANON_USER = 32775,SASL_NOLOG = 1,SASL_USERNAME = 0,SASL_SSF = 1,SASL_MAXOUTBUF = 2,SASL_DEFUSERREALM = 3,SASL_GETOPTCTX = 4,SASL_CALLBACK = 7,SASL_IPLOCALPORT = 8,SASL_IPREMOTEPORT = 9,SASL_PLUGERR = 10,SASL_DELEGATEDCREDS = 11,SASL_SERVICE = 12,SASL_SERVERFQDN = 13,SASL_AUTHSOURCE = 14,SASL_MECHNAME = 15,SASL_AUTHUSER = 16,SASL_APPNAME = 17,SASL_KRB5_AUTHDATA = 700,SASL_SSF_EXTERNAL = 100,SASL_SEC_PROPS = 101,SASL_AUTH_EXTERNAL = 102,SASL_SET_CREATE = 1,SASL_SET_DISABLE = 2,SASL_SET_NOPLAIN = 4,SASL_SET_CURMECH_ONLY = 8,SASL_AUX_END = 0,};
enum MACRO_SASLPLUG {SASLPLUG_H = 1,};
enum MACRO_SASLUTIL {SASLUTIL_H = 1,};
enum MACRO_SASL_UTILS {SASL_UTILS_VERSION = 4,SASL_FEAT_WANT_CLIENT_FIRST = 2,SASL_FEAT_SERVER_FIRST = 16,SASL_FEAT_ALLOWS_PROXY = 32,SASL_FEAT_NEEDSERVERFQDN = 1,SASL_CLIENT_PLUG_VERSION = 4,SASL_SET_REMOVE = 1,SASL_FEAT_SERVICE = 512,SASL_FEAT_GETSECRET = 1024,SASL_SERVER_PLUG_VERSION = 4,SASL_CANONUSER_PLUG_VERSION = 5,SASL_AUXPROP_OVERRIDE = 1,SASL_AUXPROP_AUTHZID = 2,SASL_AUXPROP_PLUG_VERSION = 4,};
enum MACRO_SA_REPEAT {SA_REPEAT = 0x1,SA_FIRED = 0x10,};
enum MACRO_SB {SB = 250,};
enum MACRO_SCHAR : __int64 {SCHAR_MAX = 127,SCHAR_MIN = -128,};
enum MACRO_SCHED {SCHED_OTHER = 1,SCHED_FIFO = 4,SCHED_RR = 2,};
enum MACRO_SCM {SCM_RIGHTS = 0x1,SCM_TIMESTAMP = 0x2,SCM_CREDS = 0x3,SCM_TIMESTAMP_MONOTONIC = 0x4,};
enum MACRO_SCOPE {SCOPE_DELIMITER = 37,};
enum MACRO_SE {SE = 240,};
enum MACRO_SEARCHFS {SEARCHFS_MAX_SEARCHPARMS = 4096,};
enum MACRO_SECS {SECS_PER_MIN = 60,};
enum MACRO_SECSPERMIN {SECSPERMIN = 60,};
enum MACRO_SECS_PER {SECS_PER_HOUR = 3600,SECS_PER_DAY = 86400,};
enum MACRO_SECT {NO_SECT = 0,MAX_SECT = 255,};
enum MACRO_SECTION : __int64 {SECTION_TYPE = 0xFF,SECTION_ATTRIBUTES = 0xFFFFFF00,};
enum MACRO_SECTION_ATTRIBUTES : __int64 {SECTION_ATTRIBUTES_USR = 0xFF000000,};
enum MACRO_SECTION_ATTRIBUTES_SYS {SECTION_ATTRIBUTES_SYS = 0xFFFF00,};
enum MACRO_SECURITYGROUP {SECURITYGROUP = 3,SECURITYSTORAGE = 4,};
enum MACRO_SECURITYMODEL {SECURITYMODEL = 1,SECURITYNAME = 2,};
enum MACRO_SECURITYSTATUS {SECURITYSTATUS = 5,};
enum MACRO_SEED {SEED_BLOCK_SIZE = 16,SEED_KEY_LENGTH = 16,};
enum MACRO_SEEK {SEEK_SET = 0,SEEK_CUR = 1,SEEK_END = 2,};
enum MACRO_SEGSIZE {SEGSIZE = 512,};
enum MACRO_SEGV {SEGV_NOOP = 0,SEGV_MAPERR = 1,SEGV_ACCERR = 2,};
enum MACRO_SEL {SEL_GDT = 0,SEL_LDT = 1,};
enum MACRO_SEM {SEM_UNDO = 0x1000,};
enum MACRO_SEM_A : __int64 {SEM_A = 0x80,SEM_R = 0x100,SEM_VALUE_MAX = 0x7FFF,SEM_FAILED = 0xFFFFFFFFFFFFFFFF,};
enum MACRO_SETALL {SETALL = 9,};
enum MACRO_SE_MAX : __int64 {SE_MAX_IDS = 5,SE_MAX_SUBIDS = 32,SE_LIBRARY_ID = 0,SE_MIB_ID = 1,SE_APPLICATION_ID = 2,SE_ASSIGNED_ID = 3,SE_OK = 0,SE_NOMEM = 1,SE_ALREADY_THERE = 2,SE_DNE = -2,};
enum MACRO_SF : __int64 {SF_SETTABLE = 0xFFFF0000,SF_ARCHIVED = 0x10000,SF_IMMUTABLE = 0x20000,SF_APPEND = 0x40000,};
enum MACRO_SG {SG_HIGHVM = 0x1,SG_FVMLIB = 0x2,SG_NORELOC = 0x4,SG_PROTECTED_VERSION_1 = 0x8,};
enum MACRO_SHA {SHA_LBLOCK = 16,SHA_CBLOCK = 64,SHA_LAST_BLOCK = 56,SHA_DIGEST_LENGTH = 20,};
enum MACRO_SHA256 {SHA256_CBLOCK = 64,};
enum MACRO_SHA512 {SHA512_CBLOCK = 128,};
enum MACRO_SHM {SHM_RDONLY = 0x1000,SHM_RND = 0x2000,};
enum MACRO_SHMLBA {SHMLBA = 4096,};
enum MACRO_SHM_R {SHM_R = 256,SHM_W = 128,};
enum MACRO_SHRT : __int64 {SHRT_MIN = -32768,};
enum MACRO_SHUT {SHUT_RD = 0,SHUT_WR = 1,SHUT_RDWR = 2,};
enum MACRO_SHUTDOWN {SHUTDOWN_TIME = 11,};
enum MACRO_SI {SI_USER = 0x10001,SI_QUEUE = 0x10002,SI_TIMER = 0x10003,SI_ASYNCIO = 0x10004,SI_MESGQ = 0x10005,};
enum MACRO_SIDL {SIDL = 1,SRUN = 2,};
enum MACRO_SIG {SIG_BLOCK = 1,SIG_UNBLOCK = 2,SIG_SETMASK = 3,};
enum MACRO_SIGEV {SIGEV_NONE = 0,SIGEV_SIGNAL = 1,SIGEV_THREAD = 3,};
enum MACRO_SIGNAL {SIGHUP = 1,SIGINT = 2,SIGQUIT = 3,SIGILL = 4,SIGTRAP = 5,SIGABRT = 6,SIGIOT = 6,SIGEMT = 7,SIGFPE = 8,SIGKILL = 9,SIGBUS = 10,SIGSEGV = 11,SIGSYS = 12,SIGPIPE = 13,SIGALRM = 14,SIGTERM = 15,SIGURG = 16,SIGSTOP = 17,SIGTSTP = 18,SIGCONT = 19,SIGCHLD = 20,SIGTTIN = 21,SIGTTOU = 22,SIGIO = 23,SIGXCPU = 24,SIGXFSZ = 25,SIGVTALRM = 26,SIGPROF = 27,SIGWINCH = 28,SIGINFO = 29,SIGUSR1 = 30,SIGUSR2 = 31,};
enum MACRO_SIGNATURE {TCPOPT_SIGNATURE = 19,TCPOLEN_SIGNATURE = 18,};
enum MACRO_SIGNATURE_0 {SIGNATURE = 10,};
enum MACRO_SIG_ATOMIC : __int64 {SIG_ATOMIC_MIN = -2147483648,SIG_ATOMIC_MAX = 2147483647,};
enum MACRO_SIG_REGISTERED : __int64 {SIG_REGISTERED_OK = 0,SIG_REGISTRATION_FAILED = -2,SIG_UNREGISTERED_OK = 0,};
enum MACRO_SIN {SIN_PROXY = 1,};
enum MACRO_SIZE : __int64 {SIZE_MAX = -1,WCHAR_MAX = 2147483647,};
enum MACRO_SIZEOF {SIZEOF_INT = 4,SIZEOF_INTMAX_T = 8,SIZEOF_LONG = 8,SIZEOF_LONG_LONG = 8,SIZEOF_SHORT = 2,SIZEOF_SOCKADDR_UN_SUN_PATH = 104,};
enum MACRO_SLAPI : __int64 {SLAPI_STR2ENTRY_REMOVEDUPVALS = 1,SLAPI_STR2ENTRY_ADDRDNVALS = 2,SLAPI_STR2ENTRY_BIGENTRY = 4,SLAPI_STR2ENTRY_TOMBSTONE_CHECK = 8,SLAPI_STR2ENTRY_IGNORE_STATE = 16,SLAPI_STR2ENTRY_INCLUDE_VERSION_STR = 32,SLAPI_STR2ENTRY_EXPAND_OBJECTCLASSES = 64,SLAPI_STR2ENTRY_NOT_WELL_FORMED_LDIF = 128,SLAPI_TYPE_CMP_EXACT = 0,SLAPI_TYPE_CMP_BASE = 1,SLAPI_TYPE_CMP_SUBTYPE = 2,SLAPI_OPERATION_BIND = 1,SLAPI_OPERATION_UNBIND = 2,SLAPI_OPERATION_SEARCH = 4,SLAPI_OPERATION_MODIFY = 8,SLAPI_OPERATION_ADD = 16,SLAPI_OPERATION_DELETE = 32,SLAPI_OPERATION_MODDN = 64,SLAPI_OPERATION_MODRDN = 64,SLAPI_OPERATION_COMPARE = 128,SLAPI_OPERATION_ABANDON = 256,SLAPI_OPERATION_EXTENDED = 512,SLAPI_OPERATION_ANY = 4294967295,SLAPI_OPERATION_NONE = 0,SLAPI_FILTER_SCAN_STOP = -1,SLAPI_FILTER_SCAN_ERROR = -2,SLAPI_FILTER_SCAN_NOMORE = 0,SLAPI_FILTER_SCAN_CONTINUE = 1,SLAPI_FILTER_UNKNOWN_FILTER_TYPE = 2,SLAPI_OP_FLAG_NEVER_CHAIN = 2048,SLAPI_ATTR_FLAG_SINGLE = 1,SLAPI_ATTR_FLAG_OPATTR = 2,SLAPI_ATTR_FLAG_READONLY = 4,SLAPI_ATTR_FLAG_STD_ATTR = 4,SLAPI_ATTR_FLAG_OBSOLETE = 64,SLAPI_ATTR_FLAG_COLLECTIVE = 128,SLAPI_ATTR_FLAG_NOUSERMOD = 256,SLAPI_BACKEND_FLAG_NOLASTMOD = 1,SLAPI_BACKEND_FLAG_NO_SCHEMA_CHECK = 2,SLAPI_BACKEND_FLAG_GLUE_INSTANCE = 16,SLAPI_BACKEND_FLAG_GLUE_SUBORDINATE = 32,SLAPI_BACKEND_FLAG_GLUE_LINKED = 64,SLAPI_BACKEND_FLAG_OVERLAY = 128,SLAPI_BACKEND_FLAG_GLOBAL_OVERLAY = 256,SLAPI_BACKEND_FLAG_SHADOW = 32768,SLAPI_BACKEND_FLAG_SYNC_SHADOW = 4096,SLAPI_BACKEND_FLAG_SLURP_SHADOW = 8192,SLAPI_ACL_COMPARE = 1,SLAPI_ACL_SEARCH = 2,SLAPI_ACL_READ = 4,SLAPI_ACL_WRITE = 8,SLAPI_ACL_DELETE = 16,SLAPI_ACL_ADD = 32,SLAPI_ACL_SELF = 64,SLAPI_ACL_PROXY = 128,SLAPI_ACL_ALL = 127,SLAPI_PLUGIN_DATABASE = 1,SLAPI_PLUGIN_EXTENDEDOP = 2,SLAPI_PLUGIN_PREOPERATION = 3,SLAPI_PLUGIN_POSTOPERATION = 4,SLAPI_PLUGIN_MATCHINGRULE = 5,SLAPI_PLUGIN_SYNTAX = 6,SLAPI_PLUGIN_AUDIT = 7,SLAPI_BACKEND = 130,SLAPI_CONNECTION = 131,SLAPI_OPERATION = 132,SLAPI_REQUESTOR_ISROOT = 133,SLAPI_BE_MONITORDN = 134,SLAPI_BE_TYPE = 135,SLAPI_BE_READONLY = 136,SLAPI_BE_LASTMOD = 137,SLAPI_CONN_ID = 139,SLAPI_OPINITIATED_TIME = 140,SLAPI_REQUESTOR_DN = 141,SLAPI_IS_REPLICATED_OPERATION = 142,SLAPI_REQUESTOR_ISUPDATEDN = 142,SLAPI_CONN_DN = 143,SLAPI_CONN_AUTHTYPE = 144,SLAPI_CONN_CLIENTIP = 145,SLAPI_CONN_SERVERIP = 146,SLAPI_X_CONN_CLIENTPATH = 1300,SLAPI_X_CONN_SERVERPATH = 1301,SLAPI_X_CONN_IS_UDP = 1302,SLAPI_X_CONN_SSF = 1303,SLAPI_X_CONN_SASL_CONTEXT = 1304,SLAPI_X_OPERATION_DELETE_GLUE_PARENT = 1305,SLAPI_X_RELAX = 1306,SLAPI_X_MANAGEDIT = 1306,SLAPI_X_OPERATION_NO_SCHEMA_CHECK = 1307,SLAPI_X_ADD_STRUCTURAL_CLASS = 1308,SLAPI_X_OPERATION_NO_SUBORDINATE_GLUE = 1309,SLAPI_PLUGIN = 3,SLAPI_PLUGIN_PRIVATE = 4,SLAPI_PLUGIN_TYPE = 5,SLAPI_PLUGIN_ARGV = 6,SLAPI_PLUGIN_ARGC = 7,SLAPI_PLUGIN_VERSION = 8,SLAPI_PLUGIN_OPRETURN = 9,SLAPI_PLUGIN_OBJECT = 10,SLAPI_PLUGIN_DESTROY_FN = 11,SLAPI_PLUGIN_DESCRIPTION = 12,SLAPI_PLUGIN_IDENTITY = 13,SLAPI_PLUGIN_INTOP_RESULT = 15,SLAPI_PLUGIN_INTOP_SEARCH_ENTRIES = 16,SLAPI_PLUGIN_INTOP_SEARCH_REFERRALS = 17,SLAPI_PARENT_TXN = 190,SLAPI_TXN = 191,SLAPI_PLUGIN_DB_BIND_FN = 200,SLAPI_PLUGIN_DB_UNBIND_FN = 201,SLAPI_PLUGIN_DB_SEARCH_FN = 202,SLAPI_PLUGIN_DB_COMPARE_FN = 203,SLAPI_PLUGIN_DB_MODIFY_FN = 204,SLAPI_PLUGIN_DB_MODRDN_FN = 205,SLAPI_PLUGIN_DB_ADD_FN = 206,SLAPI_PLUGIN_DB_DELETE_FN = 207,SLAPI_PLUGIN_DB_ABANDON_FN = 208,SLAPI_PLUGIN_DB_CONFIG_FN = 209,SLAPI_PLUGIN_CLOSE_FN = 210,SLAPI_PLUGIN_DB_FLUSH_FN = 211,SLAPI_PLUGIN_START_FN = 212,SLAPI_PLUGIN_DB_SEQ_FN = 213,SLAPI_PLUGIN_DB_ENTRY_FN = 214,SLAPI_PLUGIN_DB_REFERRAL_FN = 215,SLAPI_PLUGIN_DB_RESULT_FN = 216,SLAPI_PLUGIN_DB_LDIF2DB_FN = 217,SLAPI_PLUGIN_DB_DB2LDIF_FN = 218,SLAPI_PLUGIN_DB_BEGIN_FN = 219,SLAPI_PLUGIN_DB_COMMIT_FN = 220,SLAPI_PLUGIN_DB_ABORT_FN = 221,SLAPI_PLUGIN_DB_ARCHIVE2DB_FN = 222,SLAPI_PLUGIN_DB_DB2ARCHIVE_FN = 223,SLAPI_PLUGIN_DB_NEXT_SEARCH_ENTRY_FN = 224,SLAPI_PLUGIN_DB_FREE_RESULT_SET_FN = 225,SLAPI_PLUGIN_DB_SIZE_FN = 226,SLAPI_PLUGIN_DB_TEST_FN = 227,SLAPI_PLUGIN_EXT_OP_FN = 300,SLAPI_PLUGIN_EXT_OP_OIDLIST = 301,SLAPI_PLUGIN_PRE_BIND_FN = 401,SLAPI_PLUGIN_PRE_UNBIND_FN = 402,SLAPI_PLUGIN_PRE_SEARCH_FN = 403,SLAPI_PLUGIN_PRE_COMPARE_FN = 404,SLAPI_PLUGIN_PRE_MODIFY_FN = 405,SLAPI_PLUGIN_PRE_MODRDN_FN = 406,SLAPI_PLUGIN_PRE_ADD_FN = 407,SLAPI_PLUGIN_PRE_DELETE_FN = 408,SLAPI_PLUGIN_PRE_ABANDON_FN = 409,SLAPI_PLUGIN_PRE_ENTRY_FN = 410,SLAPI_PLUGIN_PRE_REFERRAL_FN = 411,SLAPI_PLUGIN_PRE_RESULT_FN = 412,SLAPI_PLUGIN_INTERNAL_PRE_ADD_FN = 420,SLAPI_PLUGIN_INTERNAL_PRE_MODIFY_FN = 421,SLAPI_PLUGIN_INTERNAL_PRE_MODRDN_FN = 422,SLAPI_PLUGIN_INTERNAL_PRE_DELETE_FN = 423,SLAPI_PLUGIN_BE_PRE_ADD_FN = 450,SLAPI_PLUGIN_BE_PRE_MODIFY_FN = 451,SLAPI_PLUGIN_BE_PRE_MODRDN_FN = 452,SLAPI_PLUGIN_BE_PRE_DELETE_FN = 453,SLAPI_PLUGIN_POST_BIND_FN = 501,SLAPI_PLUGIN_POST_UNBIND_FN = 502,SLAPI_PLUGIN_POST_SEARCH_FN = 503,SLAPI_PLUGIN_POST_COMPARE_FN = 504,SLAPI_PLUGIN_POST_MODIFY_FN = 505,SLAPI_PLUGIN_POST_MODRDN_FN = 506,SLAPI_PLUGIN_POST_ADD_FN = 507,SLAPI_PLUGIN_POST_DELETE_FN = 508,SLAPI_PLUGIN_POST_ABANDON_FN = 509,SLAPI_PLUGIN_POST_ENTRY_FN = 510,SLAPI_PLUGIN_POST_REFERRAL_FN = 511,SLAPI_PLUGIN_POST_RESULT_FN = 512,SLAPI_PLUGIN_INTERNAL_POST_ADD_FN = 520,SLAPI_PLUGIN_INTERNAL_POST_MODIFY_FN = 521,SLAPI_PLUGIN_INTERNAL_POST_MODRDN_FN = 522,SLAPI_PLUGIN_INTERNAL_POST_DELETE_FN = 523,SLAPI_PLUGIN_BE_POST_ADD_FN = 550,SLAPI_PLUGIN_BE_POST_MODIFY_FN = 551,SLAPI_PLUGIN_BE_POST_MODRDN_FN = 552,SLAPI_PLUGIN_BE_POST_DELETE_FN = 553,SLAPI_OPERATION_TYPE = 590,SLAPI_OPERATION_MSGID = 591,SLAPI_PLUGIN_MR_FILTER_CREATE_FN = 600,SLAPI_PLUGIN_MR_INDEXER_CREATE_FN = 601,SLAPI_PLUGIN_MR_FILTER_MATCH_FN = 602,SLAPI_PLUGIN_MR_FILTER_INDEX_FN = 603,SLAPI_PLUGIN_MR_FILTER_RESET_FN = 604,SLAPI_PLUGIN_MR_INDEX_FN = 605,SLAPI_PLUGIN_MR_OID = 610,SLAPI_PLUGIN_MR_TYPE = 611,SLAPI_PLUGIN_MR_VALUE = 612,SLAPI_PLUGIN_MR_VALUES = 613,SLAPI_PLUGIN_MR_KEYS = 614,SLAPI_PLUGIN_MR_FILTER_REUSABLE = 615,SLAPI_PLUGIN_MR_QUERY_OPERATOR = 616,SLAPI_PLUGIN_MR_USAGE = 617,SLAPI_MATCHINGRULE_NAME = 1,SLAPI_MATCHINGRULE_OID = 2,SLAPI_MATCHINGRULE_DESC = 3,SLAPI_MATCHINGRULE_SYNTAX = 4,SLAPI_MATCHINGRULE_OBSOLETE = 5,SLAPI_OP_LESS = 1,SLAPI_OP_LESS_OR_EQUAL = 2,SLAPI_OP_EQUAL = 3,SLAPI_OP_GREATER_OR_EQUAL = 4,SLAPI_OP_GREATER = 5,SLAPI_OP_SUBSTRING = 6,SLAPI_PLUGIN_MR_USAGE_INDEX = 0,SLAPI_PLUGIN_MR_USAGE_SORT = 1,SLAPI_PLUGIN_SYNTAX_FILTER_AVA = 700,SLAPI_PLUGIN_SYNTAX_FILTER_SUB = 701,SLAPI_PLUGIN_SYNTAX_VALUES2KEYS = 702,SLAPI_PLUGIN_SYNTAX_ASSERTION2KEYS_AVA = 703,SLAPI_PLUGIN_SYNTAX_ASSERTION2KEYS_SUB = 704,SLAPI_PLUGIN_SYNTAX_NAMES = 705,SLAPI_PLUGIN_SYNTAX_OID = 706,SLAPI_PLUGIN_SYNTAX_FLAGS = 707,SLAPI_PLUGIN_SYNTAX_COMPARE = 708,SLAPI_PLUGIN_SYNTAX_FLAG_ORKEYS = 1,SLAPI_PLUGIN_SYNTAX_FLAG_ORDERING = 2,SLAPI_PLUGIN_ACL_INIT = 730,SLAPI_PLUGIN_ACL_SYNTAX_CHECK = 731,SLAPI_PLUGIN_ACL_ALLOW_ACCESS = 732,SLAPI_PLUGIN_ACL_MODS_ALLOWED = 733,SLAPI_PLUGIN_ACL_MODS_UPDATE = 734,SLAPI_OPERATION_AUTHTYPE = 741,SLAPI_OPERATION_ID = 742,SLAPI_CONN_CERT = 743,SLAPI_CONN_AUTHMETHOD = 746,SLAPI_IS_INTERNAL_OPERATION = 748,SLAPI_RESULT_CODE = 881,SLAPI_RESULT_TEXT = 882,SLAPI_RESULT_MATCHED = 883,SLAPI_MANAGEDSAIT = 1000,SLAPI_PLUGIN_AUDIT_DATA = 1100,SLAPI_PLUGIN_AUDIT_FN = 1101,SLAPI_X_PLUGIN_PRE_GROUP_FN = 1202,SLAPI_X_PLUGIN_POST_GROUP_FN = 1203,SLAPI_X_GROUP_ENTRY = 1250,SLAPI_X_GROUP_ATTRIBUTE = 1251,SLAPI_X_GROUP_OPERATION_DN = 1252,SLAPI_X_GROUP_TARGET_ENTRY = 1253,SLAPI_PLUGIN_INTERNAL_PRE_BIND_FN = 1260,SLAPI_PLUGIN_INTERNAL_PRE_UNBIND_FN = 1261,SLAPI_PLUGIN_INTERNAL_PRE_SEARCH_FN = 1262,SLAPI_PLUGIN_INTERNAL_PRE_COMPARE_FN = 1263,SLAPI_PLUGIN_INTERNAL_PRE_ABANDON_FN = 1264,SLAPI_PLUGIN_INTERNAL_POST_BIND_FN = 1270,SLAPI_PLUGIN_INTERNAL_POST_UNBIND_FN = 1271,SLAPI_PLUGIN_INTERNAL_POST_SEARCH_FN = 1272,SLAPI_PLUGIN_INTERNAL_POST_COMPARE_FN = 1273,SLAPI_PLUGIN_INTERNAL_POST_ABANDON_FN = 1274,SLAPI_CONFIG_FILENAME = 40,SLAPI_CONFIG_LINENO = 41,SLAPI_CONFIG_ARGC = 42,SLAPI_CONFIG_ARGV = 43,SLAPI_TARGET_ADDRESS = 48,SLAPI_TARGET_UNIQUEID = 49,SLAPI_TARGET_DN = 50,SLAPI_REQCONTROLS = 51,SLAPI_RESCONTROLS = 55,SLAPI_ADD_RESCONTROL = 56,SLAPI_CONTROLS_ARG = 58,SLAPI_ADD_TARGET = 50,SLAPI_ADD_ENTRY = 60,SLAPI_ADD_EXISTING_DN_ENTRY = 61,SLAPI_ADD_PARENT_ENTRY = 62,SLAPI_ADD_PARENT_UNIQUEID = 63,SLAPI_ADD_EXISTING_UNIQUEID_ENTRY = 64,SLAPI_BIND_TARGET = 50,SLAPI_BIND_METHOD = 70,SLAPI_BIND_CREDENTIALS = 71,SLAPI_BIND_SASLMECHANISM = 72,SLAPI_BIND_RET_SASLCREDS = 73,SLAPI_COMPARE_TARGET = 50,SLAPI_COMPARE_TYPE = 80,SLAPI_COMPARE_VALUE = 81,SLAPI_DELETE_TARGET = 50,SLAPI_DELETE_EXISTING_ENTRY = 61,SLAPI_MODIFY_TARGET = 50,SLAPI_MODIFY_MODS = 90,SLAPI_MODIFY_EXISTING_ENTRY = 61,SLAPI_MODRDN_TARGET = 50,SLAPI_MODRDN_NEWRDN = 100,SLAPI_MODRDN_DELOLDRDN = 101,SLAPI_MODRDN_NEWSUPERIOR = 102,SLAPI_MODRDN_EXISTING_ENTRY = 61,SLAPI_MODRDN_PARENT_ENTRY = 104,SLAPI_MODRDN_NEWPARENT_ENTRY = 105,SLAPI_MODRDN_TARGET_ENTRY = 106,SLAPI_MODRDN_NEWSUPERIOR_ADDRESS = 107,SLAPI_SEARCH_TARGET = 50,SLAPI_SEARCH_SCOPE = 110,SLAPI_SEARCH_DEREF = 111,SLAPI_SEARCH_SIZELIMIT = 112,SLAPI_SEARCH_TIMELIMIT = 113,SLAPI_SEARCH_FILTER = 114,SLAPI_SEARCH_STRFILTER = 115,SLAPI_SEARCH_ATTRS = 116,SLAPI_SEARCH_ATTRSONLY = 117,SLAPI_ABANDON_MSGID = 120,SLAPI_EXT_OP_REQ_OID = 160,SLAPI_EXT_OP_REQ_VALUE = 161,SLAPI_EXT_OP_RET_OID = 162,SLAPI_EXT_OP_RET_VALUE = 163,SLAPI_PLUGIN_EXTENDED_SENT_RESULT = -1,SLAPI_FAIL_DISKFULL = -2,SLAPI_FAIL_GENERAL = -1,SLAPI_PLUGIN_EXTENDED_NOT_HANDLED = -2,SLAPI_BIND_SUCCESS = 0,SLAPI_BIND_FAIL = 2,SLAPI_BIND_ANONYMOUS = 3,SLAPI_SEARCH_RESULT_SET = 193,SLAPI_SEARCH_RESULT_ENTRY = 194,SLAPI_NENTRIES = 195,SLAPI_SEARCH_REFERRALS = 196,};
enum MACRO_SLAPI_LOG {SLAPI_LOG_FATAL = 0,SLAPI_LOG_TRACE = 1,SLAPI_LOG_PACKETS = 2,SLAPI_LOG_ARGS = 3,SLAPI_LOG_CONNS = 4,SLAPI_LOG_BER = 5,SLAPI_LOG_FILTER = 6,SLAPI_LOG_CONFIG = 7,SLAPI_LOG_ACL = 8,SLAPI_LOG_SHELL = 9,SLAPI_LOG_PARSE = 10,SLAPI_LOG_HOUSE = 11,SLAPI_LOG_REPL = 12,SLAPI_LOG_CACHE = 13,SLAPI_LOG_PLUGIN = 14,SLAPI_LOG_TIMING = 15,};
enum MACRO_SLC {SLC_SYNCH = 1,SLC_BRK = 2,SLC_IP = 3,SLC_AO = 4,SLC_AYT = 5,SLC_EOR = 6,SLC_ABORT = 7,SLC_EOF = 8,SLC_SUSP = 9,SLC_EC = 10,SLC_EL = 11,SLC_EW = 12,SLC_RP = 13,SLC_LNEXT = 14,SLC_XON = 15,SLC_XOFF = 16,SLC_FORW1 = 17,SLC_FORW2 = 18,};
enum MACRO_SLC_NOSUPPORT {SLC_NOSUPPORT = 0,SLC_CANTCHANGE = 1,SLC_VARIABLE = 2,SLC_DEFAULT = 3,SLC_LEVELBITS = 3,SLC_FUNC = 0,SLC_FLAGS = 1,SLC_VALUE = 2,SLC_ACK = 128,SLC_FLUSHIN = 64,SLC_FLUSHOUT = 32,};
enum MACRO_SLOT {NAME_SERVER_SLOT = 0,ENVIRONMENT_SLOT = 1,SERVICE_SLOT = 2,};
enum MACRO_SM {SM_COW = 1,SM_PRIVATE = 2,SM_EMPTY = 3,SM_SHARED = 4,SM_TRUESHARED = 5,SM_PRIVATE_ALIASED = 6,SM_SHARED_ALIASED = 7,SM_LARGE_PAGE = 8,};
enum MACRO_SMI {SMI_INTEGER = 2,SMI_STRING = 4,SMI_OBJID = 6,SMI_NULLOBJ = 5,SMI_IPADDRESS = 64,SMI_COUNTER32 = 65,SMI_GAUGE32 = 66,SMI_UNSIGNED32 = 66,SMI_TIMETICKS = 67,SMI_OPAQUE = 68,SMI_COUNTER64 = 70,};
enum MACRO_SMIME {SMIME_OLDMIME = 0x400,SMIME_CRLFEOL = 0x800,SMIME_STREAM = 0x1000,};
enum MACRO_SMIME_TEXT {SMIME_TEXT = 1,SMIME_NOCERTS = 2,SMIME_NOSIGS = 4,SMIME_NOCHAIN = 8,SMIME_NOINTERN = 16,SMIME_NOVERIFY = 32,SMIME_DETACHED = 64,SMIME_BINARY = 128,SMIME_NOATTR = 256,};
enum MACRO_SM_MAXSTRLEN {SM_MAXSTRLEN = 1024,SM_PROG = 100024,SM_VERS = 1,SM_STAT = 1,SM_MON = 2,SM_UNMON = 3,SM_UNMON_ALL = 4,SM_SIMU_CRASH = 5,SM_NOTIFY = 6,};
enum MACRO_SNMP {SNMP_CALLBACK_LIBRARY = 0,SNMP_CALLBACK_APPLICATION = 1,SNMP_CALLBACK_POST_READ_CONFIG = 0,SNMP_CALLBACK_STORE_DATA = 1,SNMP_CALLBACK_SHUTDOWN = 2,SNMP_CALLBACK_POST_PREMIB_READ_CONFIG = 3,SNMP_CALLBACK_LOGGING = 4,SNMP_CALLBACK_SESSION_INIT = 5,SNMP_CALLBACK_PRE_READ_CONFIG = 7,SNMP_CALLBACK_PRE_PREMIB_READ_CONFIG = 8,};
enum MACRO_SNMPADMINLENGTH {SNMPADMINLENGTH = 255,};
enum MACRO_SNMPD {SNMPD_CALLBACK_ACM_CHECK = 0,SNMPD_CALLBACK_REGISTER_OID = 1,SNMPD_CALLBACK_UNREGISTER_OID = 2,SNMPD_CALLBACK_REG_SYSOR = 3,SNMPD_CALLBACK_UNREG_SYSOR = 4,SNMPD_CALLBACK_ACM_CHECK_INITIAL = 5,SNMPD_CALLBACK_SEND_TRAP1 = 6,SNMPD_CALLBACK_SEND_TRAP2 = 7,SNMPD_CALLBACK_REGISTER_NOTIFICATIONS = 8,SNMPD_CALLBACK_PRE_UPDATE_CONFIG = 9,SNMPD_CALLBACK_INDEX_START = 10,SNMPD_CALLBACK_INDEX_STOP = 11,SNMPD_CALLBACK_ACM_CHECK_SUBTREE = 12,SNMPD_CALLBACK_REQ_REG_SYSOR = 13,SNMPD_CALLBACK_REQ_UNREG_SYSOR = 14,SNMPD_CALLBACK_REQ_UNREG_SYSOR_SESS = 15,};
enum MACRO_SNMPERR : __int64 {SNMPERR_SUCCESS = 0,SNMPERR_GENERR = -1,SNMPERR_BAD_LOCPORT = -2,SNMPERR_BAD_ADDRESS = -3,SNMPERR_BAD_SESSION = -4,SNMPERR_TOO_LONG = -5,SNMPERR_NO_SOCKET = -6,SNMPERR_V2_IN_V1 = -7,SNMPERR_V1_IN_V2 = -8,SNMPERR_BAD_REPEATERS = -9,SNMPERR_BAD_REPETITIONS = -10,SNMPERR_BAD_ASN1_BUILD = -11,SNMPERR_BAD_SENDTO = -12,SNMPERR_BAD_PARSE = -13,SNMPERR_BAD_VERSION = -14,SNMPERR_BAD_SRC_PARTY = -15,SNMPERR_BAD_DST_PARTY = -16,SNMPERR_BAD_CONTEXT = -17,SNMPERR_BAD_COMMUNITY = -18,SNMPERR_NOAUTH_DESPRIV = -19,SNMPERR_BAD_ACL = -20,SNMPERR_BAD_PARTY = -21,SNMPERR_ABORT = -22,SNMPERR_UNKNOWN_PDU = -23,SNMPERR_TIMEOUT = -24,SNMPERR_BAD_RECVFROM = -25,SNMPERR_BAD_ENG_ID = -26,SNMPERR_BAD_SEC_NAME = -27,SNMPERR_BAD_SEC_LEVEL = -28,SNMPERR_ASN_PARSE_ERR = -29,SNMPERR_UNKNOWN_SEC_MODEL = -30,SNMPERR_INVALID_MSG = -31,SNMPERR_UNKNOWN_ENG_ID = -32,SNMPERR_UNKNOWN_USER_NAME = -33,SNMPERR_UNSUPPORTED_SEC_LEVEL = -34,SNMPERR_AUTHENTICATION_FAILURE = -35,SNMPERR_NOT_IN_TIME_WINDOW = -36,SNMPERR_DECRYPTION_ERR = -37,SNMPERR_SC_GENERAL_FAILURE = -38,SNMPERR_SC_NOT_CONFIGURED = -39,SNMPERR_KT_NOT_AVAILABLE = -40,SNMPERR_UNKNOWN_REPORT = -41,SNMPERR_USM_GENERICERROR = -42,SNMPERR_USM_UNKNOWNSECURITYNAME = -43,SNMPERR_USM_UNSUPPORTEDSECURITYLEVEL = -44,SNMPERR_USM_ENCRYPTIONERROR = -45,SNMPERR_USM_AUTHENTICATIONFAILURE = -46,SNMPERR_USM_PARSEERROR = -47,SNMPERR_USM_UNKNOWNENGINEID = -48,SNMPERR_USM_NOTINTIMEWINDOW = -49,SNMPERR_USM_DECRYPTIONERROR = -50,SNMPERR_NOMIB = -51,SNMPERR_RANGE = -52,SNMPERR_MAX_SUBID = -53,SNMPERR_BAD_SUBID = -54,SNMPERR_LONG_OID = -55,SNMPERR_BAD_NAME = -56,SNMPERR_VALUE = -57,SNMPERR_UNKNOWN_OBJID = -58,SNMPERR_NULL_PDU = -59,SNMPERR_NO_VARS = -60,SNMPERR_VAR_TYPE = -61,SNMPERR_MALLOC = -62,SNMPERR_KRB5 = -63,SNMPERR_PROTOCOL = -64,SNMPERR_OID_NONINCREASING = -65,SNMPERR_JUST_A_CONTEXT_PROBE = -66,SNMPERR_TRANSPORT_NO_CONFIG = -67,SNMPERR_TRANSPORT_CONFIG_ERROR = -68,SNMPERR_TLS_NO_CERTIFICATE = -69,SNMPERR_MAX = -69,};
enum MACRO_SNMPV3 {SNMPV3_IGNORE_UNAUTH_REPORTS = 0,};
enum MACRO_SNMP_DEFAULT : __int64 {SNMP_DEFAULT_COMMUNITY_LEN = 0,SNMP_DEFAULT_RETRIES = -1,SNMP_DEFAULT_TIMEOUT = -1,SNMP_DEFAULT_REMPORT = 0,SNMP_DEFAULT_REQID = -1,SNMP_DEFAULT_MSGID = -1,SNMP_DEFAULT_ERRSTAT = -1,SNMP_DEFAULT_ERRINDEX = -1,SNMP_DEFAULT_ADDRESS = 0,SNMP_DEFAULT_PEERNAME = 0,SNMP_DEFAULT_ENTERPRISE_LENGTH = 0,SNMP_DEFAULT_TIME = 0,SNMP_DEFAULT_VERSION = -1,SNMP_DEFAULT_SECMODEL = -1,SNMP_MAX_MSG_SIZE = 1472,SNMP_MAX_MSG_V3_HDRS = 51,SNMP_MAX_ENG_SIZE = 32,SNMP_MAX_SEC_NAME_SIZE = 256,SNMP_MAX_CONTEXT_SIZE = 256,SNMP_SEC_PARAM_BUF_SIZE = 256,};
enum MACRO_SNMP_DETAIL {SNMP_DETAIL_SIZE = 512,SNMP_FLAGS_UDP_BROADCAST = 2048,SNMP_FLAGS_RESP_CALLBACK = 1024,SNMP_FLAGS_USER_CREATED = 512,SNMP_FLAGS_DONT_PROBE = 256,SNMP_FLAGS_STREAM_SOCKET = 128,SNMP_FLAGS_LISTENING = 64,SNMP_FLAGS_SUBSESSION = 32,SNMP_FLAGS_STRIKE2 = 2,SNMP_FLAGS_STRIKE1 = 1,};
enum MACRO_SNMP_MAX {SNMP_MAX_PDU_SIZE = 64000,};
enum MACRO_SNMP_MAXPATH {SNMP_MAXPATH = 1024,SNMP_MAXBUF = 4096,SNMP_MAXBUF_MEDIUM = 1024,SNMP_MAXBUF_SMALL = 512,SNMP_MAXBUF_MESSAGE = 1500,SNMP_MAXOID = 64,SNMP_MAX_CMDLINE_OIDS = 128,SNMP_FILEMODE_CLOSED = 384,SNMP_FILEMODE_OPEN = 420,};
enum MACRO_SNMP_PDU {SNMP_PDU_GET = 160,SNMP_PDU_GETNEXT = 161,SNMP_PDU_RESPONSE = 162,SNMP_PDU_SET = 163,SNMP_PDU_GETBULK = 165,SNMP_PDU_INFORM = 166,SNMP_PDU_V2TRAP = 167,SNMP_PDU_REPORT = 168,SNMP_TRAP_AUTHENTICATIONFAILURE = 4,};
enum MACRO_SNMP_PORT : __int64 {SNMP_PORT = 161,SNMP_TRAP_PORT = 162,SNMP_MAX_LEN = 1500,SNMP_MIN_MAX_LEN = 484,SNMP_VERSION_1 = 0,SNMP_VERSION_2c = 1,SNMP_VERSION_2u = 2,SNMP_VERSION_3 = 3,SNMP_VERSION_sec = 128,SNMP_VERSION_2p = 129,SNMP_VERSION_2star = 130,SNMP_MSG_GET = 160,SNMP_MSG_GETNEXT = 161,SNMP_MSG_RESPONSE = 162,SNMP_MSG_SET = 163,SNMP_MSG_TRAP = 164,SNMP_MSG_GETBULK = 165,SNMP_MSG_INFORM = 166,SNMP_MSG_TRAP2 = 167,SNMP_MSG_REPORT = 168,SNMP_MSG_INTERNAL_SET_BEGIN = -1,SNMP_MSG_INTERNAL_SET_RESERVE1 = 0,SNMP_MSG_INTERNAL_SET_RESERVE2 = 1,SNMP_MSG_INTERNAL_SET_ACTION = 2,SNMP_MSG_INTERNAL_SET_COMMIT = 3,SNMP_MSG_INTERNAL_SET_FREE = 4,SNMP_MSG_INTERNAL_SET_UNDO = 5,SNMP_MSG_INTERNAL_SET_MAX = 6,SNMP_MSG_INTERNAL_CHECK_VALUE = 17,SNMP_MSG_INTERNAL_ROW_CREATE = 18,SNMP_MSG_INTERNAL_UNDO_SETUP = 19,SNMP_MSG_INTERNAL_SET_VALUE = 20,SNMP_MSG_INTERNAL_CHECK_CONSISTENCY = 21,SNMP_MSG_INTERNAL_UNDO_SET = 22,SNMP_MSG_INTERNAL_COMMIT = 23,SNMP_MSG_INTERNAL_UNDO_COMMIT = 24,SNMP_MSG_INTERNAL_IRREVERSIBLE_COMMIT = 25,SNMP_MSG_INTERNAL_UNDO_CLEANUP = 26,SNMP_MSG_INTERNAL_PRE_REQUEST = 128,SNMP_MSG_INTERNAL_OBJECT_LOOKUP = 129,SNMP_MSG_INTERNAL_POST_REQUEST = 130,SNMP_MSG_INTERNAL_GET_STASH = 131,SNMP_NOSUCHOBJECT = 128,SNMP_NOSUCHINSTANCE = 129,SNMP_ENDOFMIBVIEW = 130,SNMP_ERR_NOERROR = 0,SNMP_ERR_TOOBIG = 1,SNMP_ERR_NOSUCHNAME = 2,SNMP_ERR_BADVALUE = 3,SNMP_ERR_READONLY = 4,SNMP_ERR_GENERR = 5,SNMP_ERR_NOACCESS = 6,SNMP_ERR_WRONGTYPE = 7,SNMP_ERR_WRONGLENGTH = 8,SNMP_ERR_WRONGENCODING = 9,SNMP_ERR_WRONGVALUE = 10,SNMP_ERR_NOCREATION = 11,SNMP_ERR_INCONSISTENTVALUE = 12,SNMP_ERR_RESOURCEUNAVAILABLE = 13,SNMP_ERR_COMMITFAILED = 14,SNMP_ERR_UNDOFAILED = 15,SNMP_ERR_AUTHORIZATIONERROR = 16,SNMP_ERR_NOTWRITABLE = 17,SNMP_ERR_INCONSISTENTNAME = 18,};
enum MACRO_SNMP_SESS {SNMP_SESS_NONAUTHORITATIVE = 0,SNMP_SESS_AUTHORITATIVE = 1,SNMP_SESS_UNKNOWNAUTH = 2,};
enum MACRO_SNMP_TRANS {SNMP_TRANS_AUTHLEN_HMACMD5 = 128,SNMP_TRANS_AUTHLEN_HMACSHA1 = 160,SNMP_TRANS_AUTHLEN_HMAC96 = 96,SNMP_TRANS_PRIVLEN_1DES = 64,SNMP_TRANS_PRIVLEN_1DES_IV = 64,SNMP_TRANS_PRIVLEN_AES = 128,SNMP_TRANS_PRIVLEN_AES_IV = 128,SNMP_TRANS_AES_PADSIZE = 128,SNMP_TRANS_PRIVLEN_AES128 = 128,SNMP_TRANS_PRIVLEN_AES128_IV = 128,SNMP_TRANS_AES_AES128_PADSIZE = 128,};
enum MACRO_SNMP_TRAP {SNMP_TRAP_COLDSTART = 0,SNMP_TRAP_WARMSTART = 1,SNMP_TRAP_LINKDOWN = 2,SNMP_TRAP_LINKUP = 3,SNMP_TRAP_AUTHFAIL = 4,SNMP_TRAP_EGPNEIGHBORLOSS = 5,SNMP_TRAP_ENTERPRISESPECIFIC = 6,SNMP_ROW_NONEXISTENT = 0,SNMP_ROW_ACTIVE = 1,SNMP_ROW_NOTINSERVICE = 2,SNMP_ROW_NOTREADY = 3,SNMP_ROW_CREATEANDGO = 4,SNMP_ROW_CREATEANDWAIT = 5,SNMP_ROW_DESTROY = 6,SNMP_STORAGE_NONE = 0,SNMP_STORAGE_OTHER = 1,SNMP_STORAGE_VOLATILE = 2,SNMP_STORAGE_NONVOLATILE = 3,SNMP_STORAGE_PERMANENT = 4,SNMP_STORAGE_READONLY = 5,SNMP_MP_MODEL_SNMPv1 = 0,SNMP_MP_MODEL_SNMPv2c = 1,SNMP_MP_MODEL_SNMPv2u = 2,SNMP_MP_MODEL_SNMPv3 = 3,SNMP_MP_MODEL_SNMPv2p = 256,SNMP_SEC_MODEL_ANY = 0,SNMP_SEC_MODEL_SNMPv1 = 1,SNMP_SEC_MODEL_SNMPv2c = 2,SNMP_SEC_MODEL_USM = 3,SNMP_SEC_MODEL_TSM = 4,SNMP_SEC_MODEL_SNMPv2p = 256,SNMP_SEC_LEVEL_NOAUTH = 1,SNMP_SEC_LEVEL_AUTHNOPRIV = 2,SNMP_SEC_LEVEL_AUTHPRIV = 3,SNMP_MSG_FLAG_AUTH_BIT = 1,SNMP_MSG_FLAG_PRIV_BIT = 2,SNMP_MSG_FLAG_RPRT_BIT = 4,};
enum MACRO_SNMP_VIEW {SNMP_VIEW_INCLUDED = 1,SNMP_VIEW_EXCLUDED = 2,};
enum MACRO_SO : __int64 {SO_DEBUG = 0x1,SO_ACCEPTCONN = 0x2,SO_REUSEADDR = 0x4,SO_KEEPALIVE = 0x8,SO_DONTROUTE = 0x10,SO_BROADCAST = 0x20,SO_USELOOPBACK = 0x40,SO_LINGER = 0x80,SO_OOBINLINE = 0x100,SO_REUSEPORT = 0x200,SO_TIMESTAMP = 0x400,SO_TIMESTAMP_MONOTONIC = 0x800,SO_DONTTRUNC = 0x2000,SO_WANTMORE = 0x4000,SO_WANTOOBFLAG = 0x8000,SO_SNDBUF = 0x1001,SO_RCVBUF = 0x1002,SO_SNDLOWAT = 0x1003,SO_RCVLOWAT = 0x1004,SO_SNDTIMEO = 0x1005,SO_RCVTIMEO = 0x1006,SO_ERROR = 0x1007,SO_TYPE = 0x1008,SO_LABEL = 0x1010,SO_PEERLABEL = 0x1011,SO_NREAD = 0x1020,SO_NKE = 0x1021,SO_NOSIGPIPE = 0x1022,SO_NOADDRERR = 0x1023,SO_NWRITE = 0x1024,SO_REUSESHAREUID = 0x1025,SO_NOTIFYCONFLICT = 0x1026,SO_UPCALLCLOSEWAIT = 0x1027,SO_LINGER_SEC = 0x1080,SO_RESTRICTIONS = 0x1081,SO_RESTRICT_DENYIN = 0x1,SO_RESTRICT_DENYOUT = 0x2,SO_RESTRICT_DENYSET = 0x80000000,SO_RANDOMPORT = 0x1082,SO_NP_EXTENSIONS = 0x1083,};
enum MACRO_SOCK {SOCK_STREAM = 1,SOCK_DGRAM = 2,SOCK_RAW = 3,SOCK_RDM = 4,SOCK_SEQPACKET = 5,};
enum MACRO_SOCK_MAXADDRLEN {SOCK_MAXADDRLEN = 255,};
enum MACRO_SOI {SOI_S_NOFDREF = 0x1,SOI_S_ISCONNECTED = 0x2,SOI_S_ISCONNECTING = 0x4,SOI_S_ISDISCONNECTING = 0x8,SOI_S_CANTSENDMORE = 0x10,SOI_S_CANTRCVMORE = 0x20,SOI_S_RCVATMARK = 0x40,SOI_S_PRIV = 0x80,SOI_S_NBIO = 0x100,SOI_S_ASYNC = 0x200,SOI_S_INCOMP = 0x800,SOI_S_COMP = 0x1000,SOI_S_ISDISCONNECTED = 0x2000,SOI_S_DRAINING = 0x4000,};
enum MACRO_SOL {SOL_SOCKET = 0xFFFF,};
enum MACRO_SOL_LOCAL {SOL_LOCAL = 0,};
enum MACRO_SOL_NDRVPROTO {SOL_NDRVPROTO = 0,};
enum MACRO_SOMAXCONN {SOMAXCONN = 128,};
enum MACRO_SONPX {SONPX_SETOPTSHUT = 0x1,};
enum MACRO_SOURCE {_ALL_SOURCE = 1,_GNU_SOURCE = 1,};
enum MACRO_SO_PEERCRED {SO_PEERCRED = 1,};
enum MACRO_SPRAYMAX {SPRAYMAX = 8845,};
enum MACRO_SPRAYOVERHEAD {SPRAYOVERHEAD = 86,};
enum MACRO_SPRAYPROC {SPRAYPROC_SPRAY = 1,SPRAYPROC_GET = 2,SPRAYPROC_CLEAR = 3,};
enum MACRO_SPRAYPROG {SPRAYPROG = 100012,};
enum MACRO_SPRAYVERS {SPRAYVERS = 1,};
enum MACRO_SQL {SQL_GETLASTROWID = 1048,SQL_GETLASTSERIAL = 1049,SQL_CONCUR_VAL_EXTENT = 1050,SQL_APPLICATION_NAME = 1051,SQL_PARSE_FWD_ONLY_REQ = 1052,SQL_DESC_KEY = 1053,SQL_APPEND_KEYS = 1054,SQL_DESC_EXPR = 1055,SQL_ATTR_WCHAR_SIZE = 1056,SQL_COLUMN_KEY = 1053,SQL_COLUMN_EXPR = 1055,SQL_ATTR_PARSE_FWD_ONLY_REQ = 1052,SQL_ATTR_APPEND_KEYS = 1054,SQL_ATTR_ENLIST_IN_DTC = 1207,SQL_ATTR_ENLIST_IN_XA = 1208,SQL_ATTR_CONNECTION_DEAD = 1209,SQL_COPT_SS_BASE = 1200,SQL_COPT_SS_REMOTE_PWD = 1201,SQL_COPT_SS_USE_PROC_FOR_PREP = 1202,SQL_COPT_SS_INTEGRATED_SECURITY = 1203,SQL_COPT_SS_PRESERVE_CURSORS = 1204,SQL_COPT_SS_USER_DATA = 1205,SQL_COPT_SS_ANSI_OEM = 1206,SQL_COPT_SS_ENLIST_IN_DTC = 1207,SQL_COPT_SS_ENLIST_IN_XA = 1208,SQL_COPT_SS_CONNECTION_DEAD = 1209,SQL_COPT_SS_FALLBACK_CONNECT = 1210,SQL_COPT_SS_PERF_DATA = 1211,SQL_COPT_SS_PERF_DATA_LOG = 1212,SQL_COPT_SS_PERF_QUERY_INTERVAL = 1213,SQL_COPT_SS_PERF_QUERY_LOG = 1214,SQL_COPT_SS_PERF_QUERY = 1215,SQL_COPT_SS_PERF_DATA_LOG_NOW = 1216,SQL_COPT_SS_QUOTED_IDENT = 1217,SQL_COPT_SS_ANSI_NPW = 1218,SQL_COPT_SS_BCP = 1219,SQL_COPT_SS_MAX_USED = 1219,SQL_SOPT_SS_BASE = 1225,SQL_SOPT_SS_TEXTPTR_LOGGING = 1225,SQL_SOPT_SS_CURRENT_COMMAND = 1226,SQL_SOPT_SS_HIDDEN_COLUMNS = 1227,SQL_SOPT_SS_NOBROWSETABLE = 1228,SQL_SOPT_SS_REGIONALIZE = 1229,SQL_SOPT_SS_MAX_USED = 1229,SQL_UP_OFF = 0,SQL_UP_ON = 1,SQL_UP_ON_DROP = 2,SQL_UP_DEFAULT = 1,SQL_IS_OFF = 0,SQL_IS_ON = 1,SQL_IS_DEFAULT = 0,SQL_PC_OFF = 0,SQL_PC_ON = 1,SQL_PC_DEFAULT = 0,SQL_UD_NOTSET = 0,SQL_AO_OFF = 0,SQL_AO_ON = 1,SQL_AO_DEFAULT = 0,SQL_FB_OFF = 0,SQL_FB_ON = 1,SQL_FB_DEFAULT = 0,SQL_BCP_OFF = 0,SQL_BCP_ON = 1,SQL_BCP_DEFAULT = 0,SQL_QI_OFF = 0,SQL_QI_ON = 1,SQL_QI_DEFAULT = 1,SQL_AD_OFF = 0,SQL_AD_ON = 1,SQL_AD_DEFAULT = 1,SQL_TL_OFF = 0,SQL_TL_ON = 1,SQL_TL_DEFAULT = 1,SQL_HC_OFF = 0,SQL_HC_ON = 1,SQL_HC_DEFAULT = 0,SQL_NB_OFF = 0,SQL_NB_ON = 1,SQL_NB_DEFAULT = 0,SQL_RE_OFF = 0,SQL_RE_ON = 1,SQL_RE_DEFAULT = 0,SQL_CURSOR_HOLD = 1250,SQL_ATTR_CURSOR_HOLD = 1250,SQL_NODESCRIBE_OUTPUT = 1251,SQL_ATTR_NODESCRIBE_OUTPUT = 1251,SQL_NODESCRIBE_INPUT = 1264,SQL_ATTR_NODESCRIBE_INPUT = 1264,SQL_NODESCRIBE = 1251,SQL_ATTR_NODESCRIBE = 1251,SQL_CLOSE_BEHAVIOR = 1257,SQL_ATTR_CLOSE_BEHAVIOR = 1257,SQL_ATTR_CLOSEOPEN = 1265,SQL_ATTR_CURRENT_PACKAGE_SET = 1276,SQL_ATTR_DEFERRED_PREPARE = 1277,SQL_ATTR_EARLYCLOSE = 1268,SQL_ATTR_PROCESSCTL = 1278,SQL_CC_NO_RELEASE = 0,SQL_CC_RELEASE = 1,SQL_CC_DEFAULT = 0,SQL_DEFERRED_PREPARE_ON = 1,SQL_DEFERRED_PREPARE_OFF = 0,SQL_DEFERRED_PREPARE_DEFAULT = 1,SQL_EARLYCLOSE_ON = 1,SQL_EARLYCLOSE_OFF = 0,SQL_EARLYCLOSE_DEFAULT = 1,SQL_PROCESSCTL_NOTHREAD = 1,SQL_PROCESSCTL_NOFORK = 2,SQL_CURSOR_HOLD_ON = 1,SQL_CURSOR_HOLD_OFF = 0,SQL_CURSOR_HOLD_DEFAULT = 1,SQL_NODESCRIBE_ON = 1,SQL_NODESCRIBE_OFF = 0,SQL_NODESCRIBE_DEFAULT = 0,SQL_WCHARTYPE = 1252,SQL_LONGDATA_COMPAT = 1253,SQL_CURRENT_SCHEMA = 1254,SQL_DB2EXPLAIN = 1258,SQL_DB2ESTIMATE = 1259,SQL_PARAMOPT_ATOMIC = 1260,SQL_STMTTXN_ISOLATION = 1261,SQL_MAXCONN = 1262,SQL_ATTR_WCHARTYPE = 1252,SQL_ATTR_LONGDATA_COMPAT = 1253,SQL_ATTR_CURRENT_SCHEMA = 1254,SQL_ATTR_DB2EXPLAIN = 1258,SQL_ATTR_DB2ESTIMATE = 1259,SQL_ATTR_PARAMOPT_ATOMIC = 1260,SQL_ATTR_STMTTXN_ISOLATION = 1261,SQL_ATTR_MAXCONN = 1262,SQL_CONNECTTYPE = 1255,SQL_SYNC_POINT = 1256,SQL_MINMEMORY_USAGE = 1263,SQL_CONN_CONTEXT = 1269,SQL_ATTR_INHERIT_NULL_CONNECT = 1270,SQL_ATTR_FORCE_CONVERSION_ON_CLIENT = 1275,SQL_ATTR_CONNECTTYPE = 1255,SQL_ATTR_SYNC_POINT = 1256,SQL_ATTR_MINMEMORY_USAGE = 1263,SQL_ATTR_CONN_CONTEXT = 1269,SQL_LD_COMPAT_YES = 1,SQL_LD_COMPAT_NO = 0,SQL_LD_COMPAT_DEFAULT = 0,SQL_ATOMIC_YES = 1,SQL_ATOMIC_NO = 0,SQL_ATOMIC_DEFAULT = 1,SQL_CONCURRENT_TRANS = 1,SQL_COORDINATED_TRANS = 2,SQL_CONNECTTYPE_DEFAULT = 1,SQL_ONEPHASE = 1,SQL_TWOPHASE = 2,SQL_SYNCPOINT_DEFAULT = 1,SQL_DB2ESTIMATE_ON = 1,SQL_DB2ESTIMATE_OFF = 0,SQL_DB2ESTIMATE_DEFAULT = 0,SQL_DB2EXPLAIN_OFF = 0,SQL_DB2EXPLAIN_SNAPSHOT_ON = 1,SQL_DB2EXPLAIN_MODE_ON = 2,SQL_DB2EXPLAIN_SNAPSHOT_MODE_ON = 3,SQL_DB2EXPLAIN_ON = 1,SQL_DB2EXPLAIN_DEFAULT = 0,SQL_WCHARTYPE_NOCONVERT = 0,SQL_WCHARTYPE_DEFAULT = 0,};
enum MACRO_SQLITE {SQLITE_VERSION_NUMBER = 3007005,SQLITE_OK = 0,SQLITE_ERROR = 1,SQLITE_INTERNAL = 2,SQLITE_PERM = 3,SQLITE_ABORT = 4,SQLITE_BUSY = 5,SQLITE_LOCKED = 6,SQLITE_NOMEM = 7,SQLITE_READONLY = 8,SQLITE_INTERRUPT = 9,SQLITE_IOERR = 10,SQLITE_CORRUPT = 11,SQLITE_NOTFOUND = 12,SQLITE_FULL = 13,SQLITE_CANTOPEN = 14,SQLITE_PROTOCOL = 15,SQLITE_EMPTY = 16,SQLITE_SCHEMA = 17,SQLITE_TOOBIG = 18,SQLITE_CONSTRAINT = 19,SQLITE_MISMATCH = 20,SQLITE_MISUSE = 21,SQLITE_NOLFS = 22,SQLITE_AUTH = 23,SQLITE_FORMAT = 24,SQLITE_RANGE = 25,SQLITE_NOTADB = 26,SQLITE_ROW = 100,SQLITE_DONE = 101,SQLITE_IOERR_READ = 266,SQLITE_IOERR_SHORT_READ = 522,SQLITE_IOERR_WRITE = 778,SQLITE_IOERR_FSYNC = 1034,SQLITE_IOERR_DIR_FSYNC = 1290,SQLITE_IOERR_TRUNCATE = 1546,SQLITE_IOERR_FSTAT = 1802,SQLITE_IOERR_UNLOCK = 2058,SQLITE_IOERR_RDLOCK = 2314,SQLITE_IOERR_DELETE = 2570,SQLITE_IOERR_BLOCKED = 2826,SQLITE_IOERR_NOMEM = 3082,SQLITE_IOERR_ACCESS = 3338,SQLITE_IOERR_CHECKRESERVEDLOCK = 3594,SQLITE_IOERR_LOCK = 3850,SQLITE_IOERR_CLOSE = 4106,SQLITE_IOERR_DIR_CLOSE = 4362,SQLITE_IOERR_SHMOPEN = 4618,SQLITE_IOERR_SHMSIZE = 4874,SQLITE_IOERR_SHMLOCK = 5130,SQLITE_LOCKED_SHAREDCACHE = 262,SQLITE_BUSY_RECOVERY = 261,SQLITE_CANTOPEN_NOTEMPDIR = 270,SQLITE_OPEN_READONLY = 1,SQLITE_OPEN_READWRITE = 2,SQLITE_OPEN_CREATE = 4,SQLITE_OPEN_DELETEONCLOSE = 8,SQLITE_OPEN_EXCLUSIVE = 16,SQLITE_OPEN_AUTOPROXY = 32,SQLITE_OPEN_MAIN_DB = 256,SQLITE_OPEN_TEMP_DB = 512,SQLITE_OPEN_TRANSIENT_DB = 1024,SQLITE_OPEN_MAIN_JOURNAL = 2048,SQLITE_OPEN_TEMP_JOURNAL = 4096,SQLITE_OPEN_SUBJOURNAL = 8192,SQLITE_OPEN_MASTER_JOURNAL = 16384,SQLITE_OPEN_NOMUTEX = 32768,SQLITE_OPEN_FULLMUTEX = 65536,SQLITE_OPEN_SHAREDCACHE = 131072,SQLITE_OPEN_PRIVATECACHE = 262144,SQLITE_OPEN_WAL = 524288,SQLITE_OPEN_FILEPROTECTION_COMPLETE = 1048576,SQLITE_OPEN_FILEPROTECTION_COMPLETEUNLESSOPEN = 2097152,SQLITE_OPEN_FILEPROTECTION_COMPLETEUNTILFIRSTUSERAUTHENTICATION = 3145728,SQLITE_OPEN_FILEPROTECTION_NONE = 0,SQLITE_OPEN_FILEPROTECTION_MASK = 3145728,SQLITE_IOCAP_ATOMIC = 1,SQLITE_IOCAP_ATOMIC512 = 2,SQLITE_IOCAP_ATOMIC1K = 4,SQLITE_IOCAP_ATOMIC2K = 8,SQLITE_IOCAP_ATOMIC4K = 16,SQLITE_IOCAP_ATOMIC8K = 32,SQLITE_IOCAP_ATOMIC16K = 64,SQLITE_IOCAP_ATOMIC32K = 128,SQLITE_IOCAP_ATOMIC64K = 256,SQLITE_IOCAP_SAFE_APPEND = 512,SQLITE_IOCAP_SEQUENTIAL = 1024,SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN = 2048,SQLITE_LOCK_NONE = 0,SQLITE_LOCK_SHARED = 1,SQLITE_LOCK_RESERVED = 2,SQLITE_LOCK_PENDING = 3,SQLITE_LOCK_EXCLUSIVE = 4,SQLITE_SYNC_NORMAL = 2,SQLITE_SYNC_FULL = 3,SQLITE_SYNC_DATAONLY = 16,SQLITE_FCNTL_LOCKSTATE = 1,SQLITE_GET_LOCKPROXYFILE = 2,SQLITE_SET_LOCKPROXYFILE = 3,SQLITE_LAST_ERRNO = 4,SQLITE_FCNTL_SIZE_HINT = 5,SQLITE_FCNTL_CHUNK_SIZE = 6,SQLITE_FCNTL_FILE_POINTER = 7,SQLITE_FCNTL_SYNC_OMITTED = 8,SQLITE_ACCESS_EXISTS = 0,SQLITE_ACCESS_READWRITE = 1,SQLITE_ACCESS_READ = 2,SQLITE_SHM_UNLOCK = 1,SQLITE_SHM_LOCK = 2,SQLITE_SHM_SHARED = 4,SQLITE_SHM_EXCLUSIVE = 8,SQLITE_SHM_NLOCK = 8,SQLITE_CONFIG_SINGLETHREAD = 1,SQLITE_CONFIG_MULTITHREAD = 2,SQLITE_CONFIG_SERIALIZED = 3,SQLITE_CONFIG_MALLOC = 4,SQLITE_CONFIG_GETMALLOC = 5,SQLITE_CONFIG_SCRATCH = 6,SQLITE_CONFIG_PAGECACHE = 7,SQLITE_CONFIG_HEAP = 8,SQLITE_CONFIG_MEMSTATUS = 9,SQLITE_CONFIG_MUTEX = 10,SQLITE_CONFIG_GETMUTEX = 11,SQLITE_CONFIG_LOOKASIDE = 13,SQLITE_CONFIG_PCACHE = 14,SQLITE_CONFIG_GETPCACHE = 15,SQLITE_CONFIG_LOG = 16,SQLITE_DBCONFIG_LOOKASIDE = 1001,SQLITE_DENY = 1,SQLITE_IGNORE = 2,SQLITE_CREATE_INDEX = 1,SQLITE_CREATE_TABLE = 2,SQLITE_CREATE_TEMP_INDEX = 3,SQLITE_CREATE_TEMP_TABLE = 4,SQLITE_CREATE_TEMP_TRIGGER = 5,SQLITE_CREATE_TEMP_VIEW = 6,SQLITE_CREATE_TRIGGER = 7,SQLITE_CREATE_VIEW = 8,SQLITE_DELETE = 9,SQLITE_DROP_INDEX = 10,SQLITE_DROP_TABLE = 11,SQLITE_DROP_TEMP_INDEX = 12,SQLITE_DROP_TEMP_TABLE = 13,SQLITE_DROP_TEMP_TRIGGER = 14,SQLITE_DROP_TEMP_VIEW = 15,SQLITE_DROP_TRIGGER = 16,SQLITE_DROP_VIEW = 17,SQLITE_INSERT = 18,SQLITE_PRAGMA = 19,SQLITE_READ = 20,SQLITE_SELECT = 21,SQLITE_TRANSACTION = 22,SQLITE_UPDATE = 23,SQLITE_ATTACH = 24,SQLITE_DETACH = 25,SQLITE_ALTER_TABLE = 26,SQLITE_REINDEX = 27,SQLITE_ANALYZE = 28,SQLITE_CREATE_VTABLE = 29,SQLITE_DROP_VTABLE = 30,SQLITE_FUNCTION = 31,SQLITE_SAVEPOINT = 32,SQLITE_COPY = 0,SQLITE_LIMIT_LENGTH = 0,SQLITE_LIMIT_SQL_LENGTH = 1,SQLITE_LIMIT_COLUMN = 2,SQLITE_LIMIT_EXPR_DEPTH = 3,SQLITE_LIMIT_COMPOUND_SELECT = 4,SQLITE_LIMIT_VDBE_OP = 5,SQLITE_LIMIT_FUNCTION_ARG = 6,SQLITE_LIMIT_ATTACHED = 7,SQLITE_LIMIT_LIKE_PATTERN_LENGTH = 8,SQLITE_LIMIT_VARIABLE_NUMBER = 9,SQLITE_LIMIT_TRIGGER_DEPTH = 10,SQLITE_INTEGER = 1,SQLITE_FLOAT = 2,SQLITE_BLOB = 4,SQLITE_NULL = 5,SQLITE_TEXT = 3,};
enum MACRO_SQLITE3 {SQLITE3_TEXT = 3,};
enum MACRO_SQLITE_UTF8 : __int64 {SQLITE_UTF8 = 1,SQLITE_UTF16LE = 2,SQLITE_UTF16BE = 3,SQLITE_UTF16 = 4,SQLITE_ANY = 5,SQLITE_UTF16_ALIGNED = 8,SQLITE_STATIC = 0,SQLITE_TRANSIENT = -1,SQLITE_INDEX_CONSTRAINT_EQ = 2,SQLITE_INDEX_CONSTRAINT_GT = 4,SQLITE_INDEX_CONSTRAINT_LE = 8,SQLITE_INDEX_CONSTRAINT_LT = 16,SQLITE_INDEX_CONSTRAINT_GE = 32,SQLITE_INDEX_CONSTRAINT_MATCH = 64,SQLITE_MUTEX_FAST = 0,SQLITE_MUTEX_RECURSIVE = 1,SQLITE_MUTEX_STATIC_MASTER = 2,SQLITE_MUTEX_STATIC_MEM = 3,SQLITE_MUTEX_STATIC_MEM2 = 4,SQLITE_MUTEX_STATIC_OPEN = 4,SQLITE_MUTEX_STATIC_PRNG = 5,SQLITE_MUTEX_STATIC_LRU = 6,SQLITE_MUTEX_STATIC_LRU2 = 7,SQLITE_MUTEX_STATIC_PMEM = 7,SQLITE_TESTCTRL_FIRST = 5,SQLITE_TESTCTRL_PRNG_SAVE = 5,SQLITE_TESTCTRL_PRNG_RESTORE = 6,SQLITE_TESTCTRL_PRNG_RESET = 7,SQLITE_TESTCTRL_BITVEC_TEST = 8,SQLITE_TESTCTRL_FAULT_INSTALL = 9,SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS = 10,SQLITE_TESTCTRL_PENDING_BYTE = 11,SQLITE_TESTCTRL_ASSERT = 12,SQLITE_TESTCTRL_ALWAYS = 13,SQLITE_TESTCTRL_RESERVE = 14,SQLITE_TESTCTRL_OPTIMIZATIONS = 15,SQLITE_TESTCTRL_ISKEYWORD = 16,SQLITE_TESTCTRL_PGHDRSZ = 17,SQLITE_TESTCTRL_SCRATCHMALLOC = 18,SQLITE_TESTCTRL_LAST = 18,SQLITE_STATUS_MEMORY_USED = 0,SQLITE_STATUS_PAGECACHE_USED = 1,SQLITE_STATUS_PAGECACHE_OVERFLOW = 2,SQLITE_STATUS_SCRATCH_USED = 3,SQLITE_STATUS_SCRATCH_OVERFLOW = 4,SQLITE_STATUS_MALLOC_SIZE = 5,SQLITE_STATUS_PARSER_STACK = 6,SQLITE_STATUS_PAGECACHE_SIZE = 7,SQLITE_STATUS_SCRATCH_SIZE = 8,SQLITE_STATUS_MALLOC_COUNT = 9,SQLITE_DBSTATUS_LOOKASIDE_USED = 0,SQLITE_DBSTATUS_CACHE_USED = 1,SQLITE_DBSTATUS_SCHEMA_USED = 2,SQLITE_DBSTATUS_STMT_USED = 3,SQLITE_DBSTATUS_LOOKASIDE_HIT = 4,SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE = 5,SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL = 6,SQLITE_DBSTATUS_MAX = 6,SQLITE_STMTSTATUS_FULLSCAN_STEP = 1,SQLITE_STMTSTATUS_SORT = 2,SQLITE_STMTSTATUS_AUTOINDEX = 3,};
enum MACRO_SQL_MAX : __int64 {SQL_MAX_NUMERIC_LEN = 16,SQL_MAX_MESSAGE_LENGTH = 512,SQL_HANDLE_ENV = 1,SQL_HANDLE_DBC = 2,SQL_HANDLE_STMT = 3,SQL_HANDLE_DESC = 4,SQL_SUCCESS = 0,SQL_SUCCESS_WITH_INFO = 1,SQL_STILL_EXECUTING = 2,SQL_ERROR = -1,SQL_INVALID_HANDLE = -2,SQL_NEED_DATA = 99,SQL_NO_DATA = 100,SQL_NULL_DATA = -1,SQL_DATA_AT_EXEC = -2,SQL_NTS = -3,SQL_NTSL = -3,SQL_UNKNOWN_TYPE = 0,SQL_CHAR = 1,SQL_NUMERIC = 2,SQL_DECIMAL = 3,SQL_INTEGER = 4,SQL_SMALLINT = 5,SQL_FLOAT = 6,SQL_REAL = 7,SQL_DOUBLE = 8,SQL_DATETIME = 9,SQL_VARCHAR = 12,SQL_ALL_TYPES = 0,SQL_TYPE_DATE = 91,SQL_TYPE_TIME = 92,SQL_TYPE_TIMESTAMP = 93,SQL_DATE_LEN = 10,SQL_TIME_LEN = 8,SQL_TIMESTAMP_LEN = 19,SQL_NO_NULLS = 0,SQL_NULLABLE = 1,SQL_NULLABLE_UNKNOWN = 2,SQL_NULL_HENV = 0,SQL_NULL_HDBC = 0,SQL_NULL_HSTMT = 0,SQL_NULL_HDESC = 0,SQL_NULL_HANDLE = 0,SQL_FALSE = 0,SQL_TRUE = 1,SQL_DEFAULT = 99,SQL_FETCH_NEXT = 1,SQL_FETCH_FIRST = 2,SQL_FETCH_LAST = 3,SQL_FETCH_PRIOR = 4,SQL_FETCH_ABSOLUTE = 5,SQL_FETCH_RELATIVE = 6,SQL_CLOSE = 0,SQL_DROP = 1,SQL_UNBIND = 2,SQL_RESET_PARAMS = 3,SQL_ATTR_AUTO_IPD = 10001,SQL_ATTR_METADATA_ID = 10014,SQL_ARD_TYPE = -99,SQL_DESC_COUNT = 1001,SQL_DESC_TYPE = 1002,SQL_DESC_LENGTH = 1003,SQL_DESC_OCTET_LENGTH_PTR = 1004,SQL_DESC_PRECISION = 1005,SQL_DESC_SCALE = 1006,SQL_DESC_DATETIME_INTERVAL_CODE = 1007,SQL_DESC_NULLABLE = 1008,SQL_DESC_INDICATOR_PTR = 1009,SQL_DESC_DATA_PTR = 1010,SQL_DESC_NAME = 1011,SQL_DESC_UNNAMED = 1012,SQL_DESC_OCTET_LENGTH = 1013,SQL_DESC_ALLOC_TYPE = 1099,SQL_DESC_ALLOC_AUTO = 1,SQL_DESC_ALLOC_USER = 2,SQL_CODE_DATE = 1,SQL_CODE_TIME = 2,SQL_CODE_TIMESTAMP = 3,SQL_NAMED = 0,SQL_UNNAMED = 1,SQL_DIAG_RETURNCODE = 1,SQL_DIAG_NUMBER = 2,SQL_DIAG_ROW_COUNT = 3,SQL_DIAG_SQLSTATE = 4,SQL_DIAG_NATIVE = 5,SQL_DIAG_MESSAGE_TEXT = 6,SQL_DIAG_DYNAMIC_FUNCTION = 7,SQL_DIAG_CLASS_ORIGIN = 8,SQL_DIAG_SUBCLASS_ORIGIN = 9,SQL_DIAG_CONNECTION_NAME = 10,SQL_DIAG_SERVER_NAME = 11,SQL_DIAG_DYNAMIC_FUNCTION_CODE = 12,SQL_DIAG_ALTER_DOMAIN = 3,SQL_DIAG_ALTER_TABLE = 4,SQL_DIAG_CALL = 7,SQL_DIAG_CREATE_ASSERTION = 6,SQL_DIAG_CREATE_CHARACTER_SET = 8,SQL_DIAG_CREATE_COLLATION = 10,SQL_DIAG_CREATE_DOMAIN = 23,SQL_DIAG_CREATE_INDEX = -1,SQL_DIAG_CREATE_SCHEMA = 64,SQL_DIAG_CREATE_TABLE = 77,SQL_DIAG_CREATE_TRANSLATION = 79,SQL_DIAG_CREATE_VIEW = 84,SQL_DIAG_DELETE_WHERE = 19,SQL_DIAG_DROP_ASSERTION = 24,SQL_DIAG_DROP_CHARACTER_SET = 25,SQL_DIAG_DROP_COLLATION = 26,SQL_DIAG_DROP_DOMAIN = 27,SQL_DIAG_DROP_INDEX = -2,SQL_DIAG_DROP_SCHEMA = 31,SQL_DIAG_DROP_TABLE = 32,SQL_DIAG_DROP_TRANSLATION = 33,SQL_DIAG_DROP_VIEW = 36,SQL_DIAG_DYNAMIC_DELETE_CURSOR = 38,SQL_DIAG_DYNAMIC_UPDATE_CURSOR = 81,SQL_DIAG_GRANT = 48,SQL_DIAG_INSERT = 50,SQL_DIAG_REVOKE = 59,SQL_DIAG_SELECT_CURSOR = 85,SQL_DIAG_UNKNOWN_STATEMENT = 0,SQL_DIAG_UPDATE_WHERE = 82,SQL_ATTR_OUTPUT_NTS = 10001,SQL_API_SQLALLOCCONNECT = 1,SQL_API_SQLALLOCENV = 2,SQL_API_SQLALLOCHANDLE = 1001,SQL_API_SQLALLOCSTMT = 3,SQL_API_SQLBINDCOL = 4,SQL_API_SQLBINDPARAM = 1002,SQL_API_SQLCANCEL = 5,SQL_API_SQLCLOSECURSOR = 1003,SQL_API_SQLCOLATTRIBUTE = 6,SQL_API_SQLCOLUMNS = 40,SQL_API_SQLCONNECT = 7,SQL_API_SQLCOPYDESC = 1004,SQL_API_SQLDATASOURCES = 57,SQL_API_SQLDESCRIBECOL = 8,SQL_API_SQLDISCONNECT = 9,SQL_API_SQLENDTRAN = 1005,SQL_API_SQLERROR = 10,SQL_API_SQLEXECDIRECT = 11,SQL_API_SQLEXECUTE = 12,SQL_API_SQLFETCH = 13,SQL_API_SQLFETCHSCROLL = 1021,SQL_API_SQLFREECONNECT = 14,SQL_API_SQLFREEENV = 15,SQL_API_SQLFREEHANDLE = 1006,SQL_API_SQLFREESTMT = 16,SQL_API_SQLGETCONNECTATTR = 1007,SQL_API_SQLGETCONNECTOPTION = 42,SQL_API_SQLGETCURSORNAME = 17,SQL_API_SQLGETDATA = 43,SQL_API_SQLGETDESCFIELD = 1008,SQL_API_SQLGETDESCREC = 1009,SQL_API_SQLGETDIAGFIELD = 1010,SQL_API_SQLGETDIAGREC = 1011,SQL_API_SQLGETENVATTR = 1012,SQL_API_SQLGETFUNCTIONS = 44,SQL_API_SQLGETINFO = 45,SQL_API_SQLGETSTMTATTR = 1014,SQL_API_SQLGETSTMTOPTION = 46,SQL_API_SQLGETTYPEINFO = 47,SQL_API_SQLNUMRESULTCOLS = 18,SQL_API_SQLPARAMDATA = 48,SQL_API_SQLPREPARE = 19,SQL_API_SQLPUTDATA = 49,SQL_API_SQLROWCOUNT = 20,SQL_API_SQLSETCONNECTATTR = 1016,SQL_API_SQLSETCONNECTOPTION = 50,SQL_API_SQLSETCURSORNAME = 21,SQL_API_SQLSETDESCFIELD = 1017,SQL_API_SQLSETDESCREC = 1018,SQL_API_SQLSETENVATTR = 1019,SQL_API_SQLSETPARAM = 22,SQL_API_SQLSETSTMTATTR = 1020,SQL_API_SQLSETSTMTOPTION = 51,SQL_API_SQLSPECIALCOLUMNS = 52,SQL_API_SQLSTATISTICS = 53,SQL_API_SQLTABLES = 54,SQL_API_SQLTRANSACT = 23,SQL_MAX_DRIVER_CONNECTIONS = 0,SQL_MAXIMUM_DRIVER_CONNECTIONS = 0,SQL_MAX_CONCURRENT_ACTIVITIES = 1,SQL_MAXIMUM_CONCURRENT_ACTIVITIES = 1,SQL_DATA_SOURCE_NAME = 2,SQL_FETCH_DIRECTION = 8,SQL_SERVER_NAME = 13,SQL_SEARCH_PATTERN_ESCAPE = 14,SQL_DBMS_NAME = 17,SQL_DBMS_VER = 18,SQL_ACCESSIBLE_TABLES = 19,SQL_ACCESSIBLE_PROCEDURES = 20,SQL_CURSOR_COMMIT_BEHAVIOR = 23,SQL_DATA_SOURCE_READ_ONLY = 25,SQL_DEFAULT_TXN_ISOLATION = 26,SQL_IDENTIFIER_CASE = 28,SQL_IDENTIFIER_QUOTE_CHAR = 29,SQL_MAX_COLUMN_NAME_LEN = 30,SQL_MAXIMUM_COLUMN_NAME_LENGTH = 30,SQL_MAX_CURSOR_NAME_LEN = 31,SQL_MAXIMUM_CURSOR_NAME_LENGTH = 31,SQL_MAX_SCHEMA_NAME_LEN = 32,SQL_MAXIMUM_SCHEMA_NAME_LENGTH = 32,SQL_MAX_CATALOG_NAME_LEN = 34,SQL_MAXIMUM_CATALOG_NAME_LENGTH = 34,SQL_MAX_TABLE_NAME_LEN = 35,SQL_SCROLL_CONCURRENCY = 43,SQL_TXN_CAPABLE = 46,SQL_TRANSACTION_CAPABLE = 46,SQL_USER_NAME = 47,SQL_TXN_ISOLATION_OPTION = 72,SQL_TRANSACTION_ISOLATION_OPTION = 72,SQL_INTEGRITY = 73,SQL_GETDATA_EXTENSIONS = 81,SQL_NULL_COLLATION = 85,SQL_ALTER_TABLE = 86,SQL_ORDER_BY_COLUMNS_IN_SELECT = 90,SQL_SPECIAL_CHARACTERS = 94,SQL_MAX_COLUMNS_IN_GROUP_BY = 97,SQL_MAXIMUM_COLUMNS_IN_GROUP_BY = 97,SQL_MAX_COLUMNS_IN_INDEX = 98,SQL_MAXIMUM_COLUMNS_IN_INDEX = 98,SQL_MAX_COLUMNS_IN_ORDER_BY = 99,SQL_MAXIMUM_COLUMNS_IN_ORDER_BY = 99,SQL_MAX_COLUMNS_IN_SELECT = 100,SQL_MAXIMUM_COLUMNS_IN_SELECT = 100,SQL_MAX_COLUMNS_IN_TABLE = 101,SQL_MAX_INDEX_SIZE = 102,SQL_MAXIMUM_INDEX_SIZE = 102,SQL_MAX_ROW_SIZE = 104,SQL_MAXIMUM_ROW_SIZE = 104,SQL_MAX_STATEMENT_LEN = 105,SQL_MAXIMUM_STATEMENT_LENGTH = 105,SQL_MAX_TABLES_IN_SELECT = 106,SQL_MAXIMUM_TABLES_IN_SELECT = 106,SQL_MAX_USER_NAME_LEN = 107,SQL_MAXIMUM_USER_NAME_LENGTH = 107,SQL_OJ_CAPABILITIES = 115,SQL_OUTER_JOIN_CAPABILITIES = 115,SQL_XOPEN_CLI_YEAR = 10000,SQL_CURSOR_SENSITIVITY = 10001,SQL_DESCRIBE_PARAMETER = 10002,SQL_CATALOG_NAME = 10003,SQL_COLLATION_SEQ = 10004,SQL_MAX_IDENTIFIER_LEN = 10005,SQL_MAXIMUM_IDENTIFIER_LENGTH = 10005,SQL_AT_ADD_COLUMN = 1,SQL_AT_DROP_COLUMN = 2,SQL_AT_ADD_CONSTRAINT = 8,SQL_AM_NONE = 0,SQL_AM_CONNECTION = 1,SQL_AM_STATEMENT = 2,SQL_CB_DELETE = 0,SQL_CB_CLOSE = 1,SQL_CB_PRESERVE = 2,SQL_FD_FETCH_NEXT = 1,SQL_FD_FETCH_FIRST = 2,SQL_FD_FETCH_LAST = 4,SQL_FD_FETCH_PRIOR = 8,SQL_FD_FETCH_ABSOLUTE = 16,SQL_FD_FETCH_RELATIVE = 32,SQL_GD_ANY_COLUMN = 1,SQL_GD_ANY_ORDER = 2,SQL_IC_UPPER = 1,SQL_IC_LOWER = 2,SQL_IC_SENSITIVE = 3,SQL_IC_MIXED = 4,SQL_NC_HIGH = 0,SQL_NC_LOW = 1,SQL_OJ_LEFT = 1,SQL_OJ_RIGHT = 2,SQL_OJ_FULL = 4,SQL_OJ_NESTED = 8,SQL_OJ_NOT_ORDERED = 16,SQL_OJ_INNER = 32,SQL_OJ_ALL_COMPARISON_OPS = 64,SQL_SCCO_READ_ONLY = 1,SQL_SCCO_LOCK = 2,SQL_SCCO_OPT_ROWVER = 4,SQL_SCCO_OPT_VALUES = 8,SQL_TC_NONE = 0,SQL_TC_DML = 1,SQL_TC_ALL = 2,SQL_TC_DDL_COMMIT = 3,SQL_TC_DDL_IGNORE = 4,SQL_TXN_READ_UNCOMMITTED = 1,SQL_TRANSACTION_READ_UNCOMMITTED = 1,SQL_TXN_READ_COMMITTED = 2,SQL_TRANSACTION_READ_COMMITTED = 2,SQL_TXN_REPEATABLE_READ = 4,SQL_TRANSACTION_REPEATABLE_READ = 4,SQL_TXN_SERIALIZABLE = 8,SQL_TRANSACTION_SERIALIZABLE = 8,SQL_ATTR_APP_ROW_DESC = 10010,SQL_ATTR_APP_PARAM_DESC = 10011,SQL_ATTR_IMP_ROW_DESC = 10012,SQL_ATTR_IMP_PARAM_DESC = 10013,SQL_ATTR_CURSOR_SCROLLABLE = -1,SQL_ATTR_CURSOR_SENSITIVITY = -2,SQL_NONSCROLLABLE = 0,SQL_SCROLLABLE = 1,SQL_UNSPECIFIED = 0,SQL_INSENSITIVE = 1,SQL_SENSITIVE = 2,SQL_PRED_NONE = 0,SQL_PRED_CHAR = 1,SQL_PRED_BASIC = 2,SQL_SCOPE_CURROW = 0,SQL_SCOPE_TRANSACTION = 1,SQL_SCOPE_SESSION = 2,SQL_PC_UNKNOWN = 0,SQL_PC_NON_PSEUDO = 1,SQL_PC_PSEUDO = 2,SQL_ROW_IDENTIFIER = 1,SQL_INDEX_UNIQUE = 0,SQL_INDEX_ALL = 1,SQL_INDEX_CLUSTERED = 1,SQL_INDEX_HASHED = 2,SQL_INDEX_OTHER = 3,SQL_COMMIT = 0,SQL_ROLLBACK = 1,SQL_SPEC_MAJOR = 3,SQL_SPEC_MINOR = 52,SQL_SQLSTATE_SIZE = 5,SQL_MAX_DSN_LENGTH = 32,SQL_MAX_OPTION_STRING_LENGTH = 256,SQL_HANDLE_SENV = 5,SQL_NO_DATA_FOUND = 100,SQL_IS_POINTER = -4,SQL_IS_UINTEGER = -5,SQL_IS_INTEGER = -6,SQL_IS_USMALLINT = -7,SQL_IS_SMALLINT = -8,SQL_DATE = 9,SQL_INTERVAL = 10,SQL_TIME = 10,SQL_TIMESTAMP = 11,SQL_LONGVARCHAR = -1,SQL_BINARY = -2,SQL_VARBINARY = -3,SQL_LONGVARBINARY = -4,SQL_BIGINT = -5,SQL_TINYINT = -6,SQL_BIT = -7,SQL_GUID = -11,SQL_CODE_YEAR = 1,SQL_CODE_MONTH = 2,SQL_CODE_DAY = 3,SQL_CODE_HOUR = 4,SQL_CODE_MINUTE = 5,SQL_CODE_SECOND = 6,SQL_CODE_YEAR_TO_MONTH = 7,SQL_CODE_DAY_TO_HOUR = 8,SQL_CODE_DAY_TO_MINUTE = 9,SQL_CODE_DAY_TO_SECOND = 10,SQL_CODE_HOUR_TO_MINUTE = 11,SQL_CODE_HOUR_TO_SECOND = 12,SQL_CODE_MINUTE_TO_SECOND = 13,SQL_INTERVAL_YEAR = 101,SQL_INTERVAL_MONTH = 102,SQL_INTERVAL_DAY = 103,SQL_INTERVAL_HOUR = 104,SQL_INTERVAL_MINUTE = 105,SQL_INTERVAL_SECOND = 106,SQL_INTERVAL_YEAR_TO_MONTH = 107,SQL_INTERVAL_DAY_TO_HOUR = 108,SQL_INTERVAL_DAY_TO_MINUTE = 109,SQL_INTERVAL_DAY_TO_SECOND = 110,SQL_INTERVAL_HOUR_TO_MINUTE = 111,SQL_INTERVAL_HOUR_TO_SECOND = 112,SQL_INTERVAL_MINUTE_TO_SECOND = 113,SQL_SIGNED_OFFSET = -20,SQL_UNSIGNED_OFFSET = -22,SQL_C_CHAR = 1,SQL_C_LONG = 4,SQL_C_SHORT = 5,SQL_C_FLOAT = 7,SQL_C_DOUBLE = 8,SQL_C_NUMERIC = 2,SQL_C_DEFAULT = 99,SQL_C_DATE = 9,SQL_C_TIME = 10,SQL_C_TIMESTAMP = 11,SQL_C_BINARY = -2,SQL_C_BIT = -7,SQL_C_TINYINT = -6,SQL_C_SLONG = -16,SQL_C_SSHORT = -15,SQL_C_STINYINT = -26,SQL_C_ULONG = -18,SQL_C_USHORT = -17,SQL_C_UTINYINT = -28,SQL_C_BOOKMARK = -18,SQL_C_TYPE_DATE = 91,SQL_C_TYPE_TIME = 92,SQL_C_TYPE_TIMESTAMP = 93,SQL_C_INTERVAL_YEAR = 101,SQL_C_INTERVAL_MONTH = 102,SQL_C_INTERVAL_DAY = 103,SQL_C_INTERVAL_HOUR = 104,SQL_C_INTERVAL_MINUTE = 105,SQL_C_INTERVAL_SECOND = 106,SQL_C_INTERVAL_YEAR_TO_MONTH = 107,SQL_C_INTERVAL_DAY_TO_HOUR = 108,SQL_C_INTERVAL_DAY_TO_MINUTE = 109,SQL_C_INTERVAL_DAY_TO_SECOND = 110,SQL_C_INTERVAL_HOUR_TO_MINUTE = 111,SQL_C_INTERVAL_HOUR_TO_SECOND = 112,SQL_C_INTERVAL_MINUTE_TO_SECOND = 113,SQL_C_SBIGINT = -25,SQL_C_UBIGINT = -27,SQL_C_VARBOOKMARK = -2,SQL_C_GUID = -11,SQL_TYPE_NULL = 0,SQL_DEFAULT_PARAM = -5,SQL_IGNORE = -6,SQL_COLUMN_IGNORE = -6,SQL_LEN_DATA_AT_EXEC_OFFSET = -100,SQL_LEN_BINARY_ATTR_OFFSET = -100,SQL_COLUMN_COUNT = 0,SQL_COLUMN_NAME = 1,SQL_COLUMN_TYPE = 2,SQL_COLUMN_LENGTH = 3,SQL_COLUMN_PRECISION = 4,SQL_COLUMN_SCALE = 5,SQL_COLUMN_DISPLAY_SIZE = 6,SQL_COLUMN_NULLABLE = 7,SQL_COLUMN_UNSIGNED = 8,SQL_COLUMN_MONEY = 9,SQL_COLUMN_UPDATABLE = 10,SQL_COLUMN_AUTO_INCREMENT = 11,SQL_COLUMN_CASE_SENSITIVE = 12,SQL_COLUMN_SEARCHABLE = 13,SQL_COLUMN_TYPE_NAME = 14,SQL_COLUMN_TABLE_NAME = 15,SQL_COLUMN_OWNER_NAME = 16,SQL_COLUMN_QUALIFIER_NAME = 17,SQL_COLUMN_LABEL = 18,SQL_COLATT_OPT_MAX = 18,SQL_COLATT_OPT_MIN = 0,SQL_ATTR_READONLY = 0,SQL_ATTR_WRITE = 1,SQL_ATTR_READWRITE_UNKNOWN = 2,SQL_UNSEARCHABLE = 0,SQL_LIKE_ONLY = 1,SQL_ALL_EXCEPT_LIKE = 2,SQL_SEARCHABLE = 3,SQL_PRED_SEARCHABLE = 3,SQL_FETCH_FIRST_USER = 31,SQL_FETCH_FIRST_SYSTEM = 32,SQL_DRIVER_NOPROMPT = 0,SQL_DRIVER_COMPLETE = 1,SQL_DRIVER_PROMPT = 2,SQL_DRIVER_COMPLETE_REQUIRED = 3,SQL_ACCESS_MODE = 101,SQL_AUTOCOMMIT = 102,SQL_LOGIN_TIMEOUT = 103,SQL_OPT_TRACE = 104,SQL_OPT_TRACEFILE = 105,SQL_TRANSLATE_DLL = 106,SQL_TRANSLATE_OPTION = 107,SQL_TXN_ISOLATION = 108,SQL_CURRENT_QUALIFIER = 109,SQL_ODBC_CURSORS = 110,SQL_QUIET_MODE = 111,SQL_PACKET_SIZE = 112,SQL_ATTR_ACCESS_MODE = 101,SQL_ATTR_AUTOCOMMIT = 102,SQL_ATTR_CONNECTION_TIMEOUT = 113,SQL_ATTR_CURRENT_CATALOG = 109,SQL_ATTR_DISCONNECT_BEHAVIOR = 114,SQL_ATTR_LOGIN_TIMEOUT = 103,SQL_ATTR_ODBC_CURSORS = 110,SQL_ATTR_PACKET_SIZE = 112,SQL_ATTR_QUIET_MODE = 111,SQL_ATTR_TRACE = 104,SQL_ATTR_TRACEFILE = 105,SQL_ATTR_TRANSLATE_LIB = 106,SQL_ATTR_TRANSLATE_OPTION = 107,SQL_ATTR_TXN_ISOLATION = 108,SQL_MODE_READ_WRITE = 0,SQL_MODE_READ_ONLY = 1,SQL_MODE_DEFAULT = 0,SQL_AUTOCOMMIT_OFF = 0,SQL_AUTOCOMMIT_ON = 1,SQL_AUTOCOMMIT_DEFAULT = 1,SQL_LOGIN_TIMEOUT_DEFAULT = 15,SQL_CUR_USE_IF_NEEDED = 0,SQL_CUR_USE_ODBC = 1,SQL_CUR_USE_DRIVER = 2,SQL_CUR_DEFAULT = 2,SQL_OPT_TRACE_OFF = 0,SQL_OPT_TRACE_ON = 1,SQL_OPT_TRACE_DEFAULT = 0,SQL_AA_TRUE = 1,SQL_AA_FALSE = 0,SQL_CD_TRUE = 1,SQL_CD_FALSE = 0,SQL_DB_RETURN_TO_POOL = 0,SQL_DB_DISCONNECT = 1,SQL_DB_DEFAULT = 0,SQL_DTC_DONE = 0,SQL_ATTR_ANSI_APP = 115,SQL_NO_TOTAL = -4,SQL_DESC_ARRAY_SIZE = 20,SQL_DESC_ARRAY_STATUS_PTR = 21,SQL_DESC_AUTO_UNIQUE_VALUE = 11,SQL_DESC_BASE_COLUMN_NAME = 22,SQL_DESC_BASE_TABLE_NAME = 23,SQL_DESC_BIND_OFFSET_PTR = 24,SQL_DESC_BIND_TYPE = 25,SQL_DESC_CASE_SENSITIVE = 12,SQL_DESC_CATALOG_NAME = 17,SQL_DESC_CONCISE_TYPE = 2,SQL_DESC_DATETIME_INTERVAL_PRECISION = 26,SQL_DESC_DISPLAY_SIZE = 6,SQL_DESC_FIXED_PREC_SCALE = 9,SQL_DESC_LABEL = 18,SQL_DESC_LITERAL_PREFIX = 27,SQL_DESC_LITERAL_SUFFIX = 28,SQL_DESC_LOCAL_TYPE_NAME = 29,SQL_DESC_MAXIMUM_SCALE = 30,SQL_DESC_MINIMUM_SCALE = 31,SQL_DESC_NUM_PREC_RADIX = 32,SQL_DESC_PARAMETER_TYPE = 33,SQL_DESC_ROWS_PROCESSED_PTR = 34,SQL_DESC_ROWVER = 35,SQL_DESC_SCHEMA_NAME = 16,SQL_DESC_SEARCHABLE = 13,SQL_DESC_TYPE_NAME = 14,SQL_DESC_TABLE_NAME = 15,SQL_DESC_UNSIGNED = 8,SQL_DESC_UPDATABLE = 10,SQL_DIAG_CURSOR_ROW_COUNT = -1249,SQL_DIAG_ROW_NUMBER = -1248,SQL_DIAG_COLUMN_NUMBER = -1247,SQL_NO_ROW_NUMBER = -1,SQL_NO_COLUMN_NUMBER = -1,SQL_ROW_NUMBER_UNKNOWN = -2,SQL_COLUMN_NUMBER_UNKNOWN = -2,SQL_ATTR_ODBC_VERSION = 200,SQL_ATTR_CONNECTION_POOLING = 201,SQL_ATTR_CP_MATCH = 202,SQL_OV_ODBC2 = 2,SQL_OV_ODBC3 = 3,SQL_CP_OFF = 0,SQL_CP_ONE_PER_DRIVER = 1,SQL_CP_ONE_PER_HENV = 2,SQL_CP_DEFAULT = 0,SQL_CP_STRICT_MATCH = 0,SQL_CP_RELAXED_MATCH = 1,SQL_CP_MATCH_DEFAULT = 0,SQL_API_SQLALLOCHANDLESTD = 73,SQL_API_SQLBULKOPERATIONS = 24,SQL_API_SQLBINDPARAMETER = 72,SQL_API_SQLBROWSECONNECT = 55,SQL_API_SQLCOLATTRIBUTES = 6,SQL_API_SQLCOLUMNPRIVILEGES = 56,SQL_API_SQLDESCRIBEPARAM = 58,SQL_API_SQLDRIVERCONNECT = 41,SQL_API_SQLDRIVERS = 71,SQL_API_SQLEXTENDEDFETCH = 59,SQL_API_SQLFOREIGNKEYS = 60,SQL_API_SQLMORERESULTS = 61,SQL_API_SQLNATIVESQL = 62,SQL_API_SQLNUMPARAMS = 63,SQL_API_SQLPARAMOPTIONS = 64,SQL_API_SQLPRIMARYKEYS = 65,SQL_API_SQLPROCEDURECOLUMNS = 66,SQL_API_SQLPROCEDURES = 67,SQL_API_SQLSETPOS = 68,SQL_API_SQLSETSCROLLOPTIONS = 69,SQL_API_SQLTABLEPRIVILEGES = 70,SQL_API_ALL_FUNCTIONS = 0,SQL_API_LOADBYORDINAL = 199,SQL_API_ODBC3_ALL_FUNCTIONS = 999,SQL_API_ODBC3_ALL_FUNCTIONS_SIZE = 250,SQL_INFO_FIRST = 0,SQL_ACTIVE_CONNECTIONS = 0,SQL_ACTIVE_STATEMENTS = 1,SQL_DRIVER_HDBC = 3,SQL_DRIVER_HENV = 4,SQL_DRIVER_HSTMT = 5,SQL_DRIVER_NAME = 6,SQL_DRIVER_VER = 7,SQL_ODBC_API_CONFORMANCE = 9,SQL_ODBC_VER = 10,SQL_ROW_UPDATES = 11,SQL_ODBC_SAG_CLI_CONFORMANCE = 12,SQL_ODBC_SQL_CONFORMANCE = 15,SQL_PROCEDURES = 21,SQL_CONCAT_NULL_BEHAVIOR = 22,SQL_CURSOR_ROLLBACK_BEHAVIOR = 24,SQL_EXPRESSIONS_IN_ORDERBY = 27,SQL_MAX_OWNER_NAME_LEN = 32,SQL_MAX_PROCEDURE_NAME_LEN = 33,SQL_MAX_QUALIFIER_NAME_LEN = 34,SQL_MULT_RESULT_SETS = 36,SQL_MULTIPLE_ACTIVE_TXN = 37,SQL_OUTER_JOINS = 38,SQL_OWNER_TERM = 39,SQL_PROCEDURE_TERM = 40,SQL_QUALIFIER_NAME_SEPARATOR = 41,SQL_QUALIFIER_TERM = 42,SQL_SCROLL_OPTIONS = 44,SQL_TABLE_TERM = 45,SQL_CONVERT_FUNCTIONS = 48,SQL_NUMERIC_FUNCTIONS = 49,SQL_STRING_FUNCTIONS = 50,SQL_SYSTEM_FUNCTIONS = 51,SQL_TIMEDATE_FUNCTIONS = 52,SQL_CONVERT_BIGINT = 53,SQL_CONVERT_BINARY = 54,SQL_CONVERT_BIT = 55,SQL_CONVERT_CHAR = 56,SQL_CONVERT_DATE = 57,SQL_CONVERT_DECIMAL = 58,SQL_CONVERT_DOUBLE = 59,SQL_CONVERT_FLOAT = 60,SQL_CONVERT_INTEGER = 61,SQL_CONVERT_LONGVARCHAR = 62,SQL_CONVERT_NUMERIC = 63,SQL_CONVERT_REAL = 64,SQL_CONVERT_SMALLINT = 65,SQL_CONVERT_TIME = 66,SQL_CONVERT_TIMESTAMP = 67,SQL_CONVERT_TINYINT = 68,SQL_CONVERT_VARBINARY = 69,SQL_CONVERT_VARCHAR = 70,SQL_CONVERT_LONGVARBINARY = 71,SQL_ODBC_SQL_OPT_IEF = 73,SQL_CORRELATION_NAME = 74,SQL_NON_NULLABLE_COLUMNS = 75,SQL_DRIVER_HLIB = 76,SQL_DRIVER_ODBC_VER = 77,SQL_LOCK_TYPES = 78,SQL_POS_OPERATIONS = 79,SQL_POSITIONED_STATEMENTS = 80,SQL_BOOKMARK_PERSISTENCE = 82,SQL_STATIC_SENSITIVITY = 83,SQL_FILE_USAGE = 84,SQL_COLUMN_ALIAS = 87,SQL_GROUP_BY = 88,SQL_KEYWORDS = 89,SQL_OWNER_USAGE = 91,SQL_QUALIFIER_USAGE = 92,SQL_QUOTED_IDENTIFIER_CASE = 93,SQL_SUBQUERIES = 95,SQL_UNION = 96,SQL_MAX_ROW_SIZE_INCLUDES_LONG = 103,SQL_MAX_CHAR_LITERAL_LEN = 108,SQL_TIMEDATE_ADD_INTERVALS = 109,SQL_TIMEDATE_DIFF_INTERVALS = 110,SQL_NEED_LONG_DATA_LEN = 111,SQL_MAX_BINARY_LITERAL_LEN = 112,SQL_LIKE_ESCAPE_CLAUSE = 113,SQL_QUALIFIER_LOCATION = 114,SQL_ACTIVE_ENVIRONMENTS = 116,SQL_ALTER_DOMAIN = 117,SQL_SQL_CONFORMANCE = 118,SQL_DATETIME_LITERALS = 119,SQL_ASYNC_MODE = 10021,SQL_BATCH_ROW_COUNT = 120,SQL_BATCH_SUPPORT = 121,SQL_CATALOG_LOCATION = 114,SQL_CATALOG_NAME_SEPARATOR = 41,SQL_CATALOG_TERM = 42,SQL_CATALOG_USAGE = 92,SQL_CONVERT_WCHAR = 122,SQL_CONVERT_INTERVAL_DAY_TIME = 123,SQL_CONVERT_INTERVAL_YEAR_MONTH = 124,SQL_CONVERT_WLONGVARCHAR = 125,SQL_CONVERT_WVARCHAR = 126,SQL_CREATE_ASSERTION = 127,SQL_CREATE_CHARACTER_SET = 128,SQL_CREATE_COLLATION = 129,SQL_CREATE_DOMAIN = 130,SQL_CREATE_SCHEMA = 131,SQL_CREATE_TABLE = 132,SQL_CREATE_TRANSLATION = 133,SQL_CREATE_VIEW = 134,SQL_DRIVER_HDESC = 135,SQL_DROP_ASSERTION = 136,SQL_DROP_CHARACTER_SET = 137,SQL_DROP_COLLATION = 138,SQL_DROP_DOMAIN = 139,SQL_DROP_SCHEMA = 140,SQL_DROP_TABLE = 141,SQL_DROP_TRANSLATION = 142,SQL_DROP_VIEW = 143,SQL_DYNAMIC_CURSOR_ATTRIBUTES1 = 144,SQL_DYNAMIC_CURSOR_ATTRIBUTES2 = 145,SQL_FORWARD_ONLY_CURSOR_ATTRIBUTES1 = 146,SQL_FORWARD_ONLY_CURSOR_ATTRIBUTES2 = 147,SQL_INDEX_KEYWORDS = 148,SQL_INFO_SCHEMA_VIEWS = 149,SQL_KEYSET_CURSOR_ATTRIBUTES1 = 150,SQL_KEYSET_CURSOR_ATTRIBUTES2 = 151,SQL_MAX_ASYNC_CONCURRENT_STATEMENTS = 10022,SQL_ODBC_INTERFACE_CONFORMANCE = 152,SQL_PARAM_ARRAY_ROW_COUNTS = 153,SQL_PARAM_ARRAY_SELECTS = 154,SQL_SCHEMA_TERM = 39,SQL_SCHEMA_USAGE = 91,SQL_SQL92_DATETIME_FUNCTIONS = 155,SQL_SQL92_FOREIGN_KEY_DELETE_RULE = 156,SQL_SQL92_FOREIGN_KEY_UPDATE_RULE = 157,SQL_SQL92_GRANT = 158,SQL_SQL92_NUMERIC_VALUE_FUNCTIONS = 159,SQL_SQL92_PREDICATES = 160,SQL_SQL92_RELATIONAL_JOIN_OPERATORS = 161,SQL_SQL92_REVOKE = 162,SQL_SQL92_ROW_VALUE_CONSTRUCTOR = 163,SQL_SQL92_STRING_FUNCTIONS = 164,SQL_SQL92_VALUE_EXPRESSIONS = 165,SQL_STANDARD_CLI_CONFORMANCE = 166,SQL_STATIC_CURSOR_ATTRIBUTES1 = 167,SQL_STATIC_CURSOR_ATTRIBUTES2 = 168,SQL_AGGREGATE_FUNCTIONS = 169,SQL_DDL_INDEX = 170,SQL_DM_VER = 171,SQL_INSERT_STATEMENT = 172,SQL_UNION_STATEMENT = 96,SQL_DTC_TRANSITION_COST = 1750,SQL_AF_AVG = 1,SQL_AF_COUNT = 2,SQL_AF_MAX = 4,SQL_AF_MIN = 8,SQL_AF_SUM = 16,SQL_AF_DISTINCT = 32,SQL_AF_ALL = 64,SQL_AD_CONSTRAINT_NAME_DEFINITION = 1,SQL_AD_ADD_DOMAIN_CONSTRAINT = 2,SQL_AD_DROP_DOMAIN_CONSTRAINT = 4,SQL_AD_ADD_DOMAIN_DEFAULT = 8,SQL_AD_DROP_DOMAIN_DEFAULT = 16,SQL_AD_ADD_CONSTRAINT_INITIALLY_DEFERRED = 32,SQL_AD_ADD_CONSTRAINT_INITIALLY_IMMEDIATE = 64,SQL_AD_ADD_CONSTRAINT_DEFERRABLE = 128,SQL_AD_ADD_CONSTRAINT_NON_DEFERRABLE = 256,SQL_AT_ADD_COLUMN_SINGLE = 32,SQL_AT_ADD_COLUMN_DEFAULT = 64,SQL_AT_ADD_COLUMN_COLLATION = 128,SQL_AT_SET_COLUMN_DEFAULT = 256,SQL_AT_DROP_COLUMN_DEFAULT = 512,SQL_AT_DROP_COLUMN_CASCADE = 1024,SQL_AT_DROP_COLUMN_RESTRICT = 2048,SQL_AT_ADD_TABLE_CONSTRAINT = 4096,SQL_AT_DROP_TABLE_CONSTRAINT_CASCADE = 8192,SQL_AT_DROP_TABLE_CONSTRAINT_RESTRICT = 16384,SQL_AT_CONSTRAINT_NAME_DEFINITION = 32768,SQL_AT_CONSTRAINT_INITIALLY_DEFERRED = 65536,SQL_AT_CONSTRAINT_INITIALLY_IMMEDIATE = 131072,SQL_AT_CONSTRAINT_DEFERRABLE = 262144,SQL_AT_CONSTRAINT_NON_DEFERRABLE = 524288,SQL_BRC_PROCEDURES = 1,SQL_BRC_EXPLICIT = 2,SQL_BRC_ROLLED_UP = 4,SQL_BS_SELECT_EXPLICIT = 1,SQL_BS_ROW_COUNT_EXPLICIT = 2,SQL_BS_SELECT_PROC = 4,SQL_BS_ROW_COUNT_PROC = 8,SQL_BP_CLOSE = 1,SQL_BP_DELETE = 2,SQL_BP_DROP = 4,SQL_BP_TRANSACTION = 8,SQL_BP_UPDATE = 16,SQL_BP_OTHER_HSTMT = 32,SQL_BP_SCROLL = 64,SQL_CB_NULL = 0,SQL_CB_NON_NULL = 1,SQL_CVT_CHAR = 1,SQL_CVT_NUMERIC = 2,SQL_CVT_DECIMAL = 4,SQL_CVT_INTEGER = 8,SQL_CVT_SMALLINT = 16,SQL_CVT_FLOAT = 32,SQL_CVT_REAL = 64,SQL_CVT_DOUBLE = 128,SQL_CVT_VARCHAR = 256,SQL_CVT_LONGVARCHAR = 512,SQL_CVT_BINARY = 1024,SQL_CVT_VARBINARY = 2048,SQL_CVT_BIT = 4096,SQL_CVT_TINYINT = 8192,SQL_CVT_BIGINT = 16384,SQL_CVT_DATE = 32768,SQL_CVT_TIME = 65536,SQL_CVT_TIMESTAMP = 131072,SQL_CVT_LONGVARBINARY = 262144,SQL_CVT_INTERVAL_YEAR_MONTH = 524288,SQL_CVT_INTERVAL_DAY_TIME = 1048576,SQL_CVT_WCHAR = 2097152,SQL_CVT_WLONGVARCHAR = 4194304,SQL_CVT_WVARCHAR = 8388608,SQL_FN_CVT_CONVERT = 1,SQL_FN_CVT_CAST = 2,SQL_CN_NONE = 0,SQL_CN_DIFFERENT = 1,SQL_CN_ANY = 2,SQL_CA_CREATE_ASSERTION = 1,SQL_CA_CONSTRAINT_INITIALLY_DEFERRED = 16,SQL_CA_CONSTRAINT_INITIALLY_IMMEDIATE = 32,SQL_CA_CONSTRAINT_DEFERRABLE = 64,SQL_CA_CONSTRAINT_NON_DEFERRABLE = 128,SQL_CCS_CREATE_CHARACTER_SET = 1,SQL_CCS_COLLATE_CLAUSE = 2,SQL_CCS_LIMITED_COLLATION = 4,SQL_CCOL_CREATE_COLLATION = 1,SQL_CDO_CREATE_DOMAIN = 1,SQL_CDO_DEFAULT = 2,SQL_CDO_CONSTRAINT = 4,SQL_CDO_COLLATION = 8,SQL_CDO_CONSTRAINT_NAME_DEFINITION = 16,SQL_CDO_CONSTRAINT_INITIALLY_DEFERRED = 32,SQL_CDO_CONSTRAINT_INITIALLY_IMMEDIATE = 64,SQL_CDO_CONSTRAINT_DEFERRABLE = 128,SQL_CDO_CONSTRAINT_NON_DEFERRABLE = 256,SQL_CS_CREATE_SCHEMA = 1,SQL_CS_AUTHORIZATION = 2,SQL_CS_DEFAULT_CHARACTER_SET = 4,SQL_CT_CREATE_TABLE = 1,SQL_CT_COMMIT_PRESERVE = 2,SQL_CT_COMMIT_DELETE = 4,SQL_CT_GLOBAL_TEMPORARY = 8,SQL_CT_LOCAL_TEMPORARY = 16,SQL_CT_CONSTRAINT_INITIALLY_DEFERRED = 32,SQL_CT_CONSTRAINT_INITIALLY_IMMEDIATE = 64,SQL_CT_CONSTRAINT_DEFERRABLE = 128,SQL_CT_CONSTRAINT_NON_DEFERRABLE = 256,SQL_CT_COLUMN_CONSTRAINT = 512,SQL_CT_COLUMN_DEFAULT = 1024,SQL_CT_COLUMN_COLLATION = 2048,SQL_CT_TABLE_CONSTRAINT = 4096,SQL_CT_CONSTRAINT_NAME_DEFINITION = 8192,SQL_CTR_CREATE_TRANSLATION = 1,SQL_CV_CREATE_VIEW = 1,SQL_CV_CHECK_OPTION = 2,SQL_CV_CASCADED = 4,SQL_CV_LOCAL = 8,SQL_DL_SQL92_DATE = 1,SQL_DL_SQL92_TIME = 2,SQL_DL_SQL92_TIMESTAMP = 4,SQL_DL_SQL92_INTERVAL_YEAR = 8,SQL_DL_SQL92_INTERVAL_MONTH = 16,SQL_DL_SQL92_INTERVAL_DAY = 32,SQL_DL_SQL92_INTERVAL_HOUR = 64,SQL_DL_SQL92_INTERVAL_MINUTE = 128,SQL_DL_SQL92_INTERVAL_SECOND = 256,SQL_DL_SQL92_INTERVAL_YEAR_TO_MONTH = 512,SQL_DL_SQL92_INTERVAL_DAY_TO_HOUR = 1024,SQL_DL_SQL92_INTERVAL_DAY_TO_MINUTE = 2048,SQL_DL_SQL92_INTERVAL_DAY_TO_SECOND = 4096,SQL_DL_SQL92_INTERVAL_HOUR_TO_MINUTE = 8192,SQL_DL_SQL92_INTERVAL_HOUR_TO_SECOND = 16384,SQL_DL_SQL92_INTERVAL_MINUTE_TO_SECOND = 32768,SQL_DI_CREATE_INDEX = 1,SQL_DI_DROP_INDEX = 2,SQL_DA_DROP_ASSERTION = 1,SQL_DCS_DROP_CHARACTER_SET = 1,SQL_DC_DROP_COLLATION = 1,SQL_DD_DROP_DOMAIN = 1,SQL_DD_RESTRICT = 2,SQL_DD_CASCADE = 4,SQL_DS_DROP_SCHEMA = 1,SQL_DS_RESTRICT = 2,SQL_DS_CASCADE = 4,SQL_DT_DROP_TABLE = 1,SQL_DT_RESTRICT = 2,SQL_DT_CASCADE = 4,SQL_DTR_DROP_TRANSLATION = 1,SQL_DV_DROP_VIEW = 1,SQL_DV_RESTRICT = 2,SQL_DV_CASCADE = 4,SQL_DTC_ENLIST_EXPENSIVE = 1,SQL_DTC_UNENLIST_EXPENSIVE = 2,SQL_CA1_NEXT = 1,SQL_CA1_ABSOLUTE = 2,SQL_CA1_RELATIVE = 4,SQL_CA1_BOOKMARK = 8,SQL_CA1_LOCK_NO_CHANGE = 64,SQL_CA1_LOCK_EXCLUSIVE = 128,SQL_CA1_LOCK_UNLOCK = 256,SQL_CA1_POS_POSITION = 512,SQL_CA1_POS_UPDATE = 1024,SQL_CA1_POS_DELETE = 2048,SQL_CA1_POS_REFRESH = 4096,SQL_CA1_POSITIONED_UPDATE = 8192,SQL_CA1_POSITIONED_DELETE = 16384,SQL_CA1_SELECT_FOR_UPDATE = 32768,SQL_CA1_BULK_ADD = 65536,SQL_CA1_BULK_UPDATE_BY_BOOKMARK = 131072,SQL_CA1_BULK_DELETE_BY_BOOKMARK = 262144,SQL_CA1_BULK_FETCH_BY_BOOKMARK = 524288,SQL_CA2_READ_ONLY_CONCURRENCY = 1,SQL_CA2_LOCK_CONCURRENCY = 2,SQL_CA2_OPT_ROWVER_CONCURRENCY = 4,SQL_CA2_OPT_VALUES_CONCURRENCY = 8,SQL_CA2_SENSITIVITY_ADDITIONS = 16,SQL_CA2_SENSITIVITY_DELETIONS = 32,SQL_CA2_SENSITIVITY_UPDATES = 64,SQL_CA2_MAX_ROWS_SELECT = 128,SQL_CA2_MAX_ROWS_INSERT = 256,SQL_CA2_MAX_ROWS_DELETE = 512,SQL_CA2_MAX_ROWS_UPDATE = 1024,SQL_CA2_MAX_ROWS_CATALOG = 2048,SQL_CA2_MAX_ROWS_AFFECTS_ALL = 3968,SQL_CA2_CRC_EXACT = 4096,SQL_CA2_CRC_APPROXIMATE = 8192,SQL_CA2_SIMULATE_NON_UNIQUE = 16384,SQL_CA2_SIMULATE_TRY_UNIQUE = 32768,SQL_CA2_SIMULATE_UNIQUE = 65536,SQL_FD_FETCH_BOOKMARK = 128,SQL_FILE_NOT_SUPPORTED = 0,SQL_FILE_TABLE = 1,SQL_FILE_QUALIFIER = 2,SQL_FILE_CATALOG = 2,SQL_GD_BLOCK = 4,SQL_GD_BOUND = 8,SQL_GB_NOT_SUPPORTED = 0,SQL_GB_GROUP_BY_EQUALS_SELECT = 1,SQL_GB_GROUP_BY_CONTAINS_SELECT = 2,SQL_GB_NO_RELATION = 3,SQL_GB_COLLATE = 4,SQL_IK_NONE = 0,SQL_IK_ASC = 1,SQL_IK_DESC = 2,SQL_IK_ALL = 3,SQL_ISV_ASSERTIONS = 1,SQL_ISV_CHARACTER_SETS = 2,SQL_ISV_CHECK_CONSTRAINTS = 4,SQL_ISV_COLLATIONS = 8,SQL_ISV_COLUMN_DOMAIN_USAGE = 16,SQL_ISV_COLUMN_PRIVILEGES = 32,SQL_ISV_COLUMNS = 64,SQL_ISV_CONSTRAINT_COLUMN_USAGE = 128,SQL_ISV_CONSTRAINT_TABLE_USAGE = 256,SQL_ISV_DOMAIN_CONSTRAINTS = 512,SQL_ISV_DOMAINS = 1024,SQL_ISV_KEY_COLUMN_USAGE = 2048,SQL_ISV_REFERENTIAL_CONSTRAINTS = 4096,SQL_ISV_SCHEMATA = 8192,SQL_ISV_SQL_LANGUAGES = 16384,SQL_ISV_TABLE_CONSTRAINTS = 32768,SQL_ISV_TABLE_PRIVILEGES = 65536,SQL_ISV_TABLES = 131072,SQL_ISV_TRANSLATIONS = 262144,SQL_ISV_USAGE_PRIVILEGES = 524288,SQL_ISV_VIEW_COLUMN_USAGE = 1048576,SQL_ISV_VIEW_TABLE_USAGE = 2097152,SQL_ISV_VIEWS = 4194304,SQL_IS_INSERT_LITERALS = 1,SQL_IS_INSERT_SEARCHED = 2,SQL_IS_SELECT_INTO = 4,SQL_LCK_NO_CHANGE = 1,SQL_LCK_EXCLUSIVE = 2,SQL_LCK_UNLOCK = 4,SQL_POS_POSITION = 1,SQL_POS_REFRESH = 2,SQL_POS_UPDATE = 4,SQL_POS_DELETE = 8,SQL_POS_ADD = 16,SQL_NNC_NULL = 0,SQL_NNC_NON_NULL = 1,SQL_NC_START = 2,SQL_NC_END = 4,SQL_FN_NUM_ABS = 1,SQL_FN_NUM_ACOS = 2,SQL_FN_NUM_ASIN = 4,SQL_FN_NUM_ATAN = 8,SQL_FN_NUM_ATAN2 = 16,SQL_FN_NUM_CEILING = 32,SQL_FN_NUM_COS = 64,SQL_FN_NUM_COT = 128,SQL_FN_NUM_EXP = 256,SQL_FN_NUM_FLOOR = 512,SQL_FN_NUM_LOG = 1024,SQL_FN_NUM_MOD = 2048,SQL_FN_NUM_SIGN = 4096,SQL_FN_NUM_SIN = 8192,SQL_FN_NUM_SQRT = 16384,SQL_FN_NUM_TAN = 32768,SQL_FN_NUM_PI = 65536,SQL_FN_NUM_RAND = 131072,SQL_FN_NUM_DEGREES = 262144,SQL_FN_NUM_LOG10 = 524288,SQL_FN_NUM_POWER = 1048576,SQL_FN_NUM_RADIANS = 2097152,SQL_FN_NUM_ROUND = 4194304,SQL_FN_NUM_TRUNCATE = 8388608,SQL_OAC_NONE = 0,SQL_OAC_LEVEL1 = 1,SQL_OAC_LEVEL2 = 2,SQL_OIC_CORE = 1,SQL_OIC_LEVEL1 = 2,SQL_OIC_LEVEL2 = 3,SQL_OSCC_NOT_COMPLIANT = 0,SQL_OSCC_COMPLIANT = 1,SQL_OSC_MINIMUM = 0,SQL_OSC_CORE = 1,SQL_OSC_EXTENDED = 2,SQL_OU_DML_STATEMENTS = 1,SQL_OU_PROCEDURE_INVOCATION = 2,SQL_OU_TABLE_DEFINITION = 4,SQL_OU_INDEX_DEFINITION = 8,SQL_OU_PRIVILEGE_DEFINITION = 16,SQL_PARC_BATCH = 1,SQL_PARC_NO_BATCH = 2,SQL_PAS_BATCH = 1,SQL_PAS_NO_BATCH = 2,SQL_PAS_NO_SELECT = 3,SQL_PS_POSITIONED_DELETE = 1,SQL_PS_POSITIONED_UPDATE = 2,SQL_PS_SELECT_FOR_UPDATE = 4,SQL_QL_START = 1,SQL_QL_END = 2,SQL_QU_DML_STATEMENTS = 1,SQL_QU_PROCEDURE_INVOCATION = 2,SQL_QU_TABLE_DEFINITION = 4,SQL_QU_INDEX_DEFINITION = 8,SQL_QU_PRIVILEGE_DEFINITION = 16,SQL_SU_DML_STATEMENTS = 1,SQL_SU_PROCEDURE_INVOCATION = 2,SQL_SU_TABLE_DEFINITION = 4,SQL_SU_INDEX_DEFINITION = 8,SQL_SU_PRIVILEGE_DEFINITION = 16,SQL_SO_FORWARD_ONLY = 1,SQL_SO_KEYSET_DRIVEN = 2,SQL_SO_DYNAMIC = 4,SQL_SO_MIXED = 8,SQL_SO_STATIC = 16,SQL_SC_SQL92_ENTRY = 1,SQL_SC_FIPS127_2_TRANSITIONAL = 2,SQL_SC_SQL92_INTERMEDIATE = 4,SQL_SC_SQL92_FULL = 8,SQL_SDF_CURRENT_DATE = 1,SQL_SDF_CURRENT_TIME = 2,SQL_SDF_CURRENT_TIMESTAMP = 4,SQL_SFKD_CASCADE = 1,SQL_SFKD_NO_ACTION = 2,SQL_SFKD_SET_DEFAULT = 4,SQL_SFKD_SET_NULL = 8,SQL_SFKU_CASCADE = 1,SQL_SFKU_NO_ACTION = 2,SQL_SFKU_SET_DEFAULT = 4,SQL_SFKU_SET_NULL = 8,SQL_SG_USAGE_ON_DOMAIN = 1,SQL_SG_USAGE_ON_CHARACTER_SET = 2,SQL_SG_USAGE_ON_COLLATION = 4,SQL_SG_USAGE_ON_TRANSLATION = 8,SQL_SG_WITH_GRANT_OPTION = 16,SQL_SG_DELETE_TABLE = 32,SQL_SG_INSERT_TABLE = 64,SQL_SG_INSERT_COLUMN = 128,SQL_SG_REFERENCES_TABLE = 256,SQL_SG_REFERENCES_COLUMN = 512,SQL_SG_SELECT_TABLE = 1024,SQL_SG_UPDATE_TABLE = 2048,SQL_SG_UPDATE_COLUMN = 4096,SQL_SNVF_BIT_LENGTH = 1,SQL_SNVF_CHAR_LENGTH = 2,SQL_SNVF_CHARACTER_LENGTH = 4,SQL_SNVF_EXTRACT = 8,SQL_SNVF_OCTET_LENGTH = 16,SQL_SNVF_POSITION = 32,SQL_SP_EXISTS = 1,SQL_SP_ISNOTNULL = 2,SQL_SP_ISNULL = 4,SQL_SP_MATCH_FULL = 8,SQL_SP_MATCH_PARTIAL = 16,SQL_SP_MATCH_UNIQUE_FULL = 32,SQL_SP_MATCH_UNIQUE_PARTIAL = 64,SQL_SP_OVERLAPS = 128,SQL_SP_UNIQUE = 256,SQL_SP_LIKE = 512,SQL_SP_IN = 1024,SQL_SP_BETWEEN = 2048,SQL_SP_COMPARISON = 4096,SQL_SP_QUANTIFIED_COMPARISON = 8192,SQL_SRJO_CORRESPONDING_CLAUSE = 1,SQL_SRJO_CROSS_JOIN = 2,SQL_SRJO_EXCEPT_JOIN = 4,SQL_SRJO_FULL_OUTER_JOIN = 8,SQL_SRJO_INNER_JOIN = 16,SQL_SRJO_INTERSECT_JOIN = 32,SQL_SRJO_LEFT_OUTER_JOIN = 64,SQL_SRJO_NATURAL_JOIN = 128,SQL_SRJO_RIGHT_OUTER_JOIN = 256,SQL_SRJO_UNION_JOIN = 512,SQL_SR_USAGE_ON_DOMAIN = 1,SQL_SR_USAGE_ON_CHARACTER_SET = 2,SQL_SR_USAGE_ON_COLLATION = 4,SQL_SR_USAGE_ON_TRANSLATION = 8,SQL_SR_GRANT_OPTION_FOR = 16,SQL_SR_CASCADE = 32,SQL_SR_RESTRICT = 64,SQL_SR_DELETE_TABLE = 128,SQL_SR_INSERT_TABLE = 256,SQL_SR_INSERT_COLUMN = 512,SQL_SR_REFERENCES_TABLE = 1024,SQL_SR_REFERENCES_COLUMN = 2048,SQL_SR_SELECT_TABLE = 4096,SQL_SR_UPDATE_TABLE = 8192,SQL_SR_UPDATE_COLUMN = 16384,SQL_SRVC_VALUE_EXPRESSION = 1,SQL_SRVC_NULL = 2,SQL_SRVC_DEFAULT = 4,SQL_SRVC_ROW_SUBQUERY = 8,SQL_SSF_CONVERT = 1,SQL_SSF_LOWER = 2,SQL_SSF_UPPER = 4,SQL_SSF_SUBSTRING = 8,SQL_SSF_TRANSLATE = 16,SQL_SSF_TRIM_BOTH = 32,SQL_SSF_TRIM_LEADING = 64,SQL_SSF_TRIM_TRAILING = 128,SQL_SVE_CASE = 1,SQL_SVE_CAST = 2,SQL_SVE_COALESCE = 4,SQL_SVE_NULLIF = 8,SQL_SCC_XOPEN_CLI_VERSION1 = 1,SQL_SCC_ISO92_CLI = 2,SQL_SS_ADDITIONS = 1,SQL_SS_DELETIONS = 2,SQL_SS_UPDATES = 4,SQL_SQ_COMPARISON = 1,SQL_SQ_EXISTS = 2,SQL_SQ_IN = 4,SQL_SQ_QUANTIFIED = 8,SQL_SQ_CORRELATED_SUBQUERIES = 16,SQL_FN_SYS_USERNAME = 1,SQL_FN_SYS_DBNAME = 2,SQL_FN_SYS_IFNULL = 4,SQL_FN_STR_CONCAT = 1,SQL_FN_STR_INSERT = 2,SQL_FN_STR_LEFT = 4,SQL_FN_STR_LTRIM = 8,SQL_FN_STR_LENGTH = 16,SQL_FN_STR_LOCATE = 32,SQL_FN_STR_LCASE = 64,SQL_FN_STR_REPEAT = 128,SQL_FN_STR_REPLACE = 256,SQL_FN_STR_RIGHT = 512,SQL_FN_STR_RTRIM = 1024,SQL_FN_STR_SUBSTRING = 2048,SQL_FN_STR_UCASE = 4096,SQL_FN_STR_ASCII = 8192,SQL_FN_STR_CHAR = 16384,SQL_FN_STR_DIFFERENCE = 32768,SQL_FN_STR_LOCATE_2 = 65536,SQL_FN_STR_SOUNDEX = 131072,SQL_FN_STR_SPACE = 262144,SQL_FN_STR_BIT_LENGTH = 524288,SQL_FN_STR_CHAR_LENGTH = 1048576,SQL_FN_STR_CHARACTER_LENGTH = 2097152,SQL_FN_STR_OCTET_LENGTH = 4194304,SQL_FN_STR_POSITION = 8388608,SQL_FN_TSI_FRAC_SECOND = 1,SQL_FN_TSI_SECOND = 2,SQL_FN_TSI_MINUTE = 4,SQL_FN_TSI_HOUR = 8,SQL_FN_TSI_DAY = 16,SQL_FN_TSI_WEEK = 32,SQL_FN_TSI_MONTH = 64,SQL_FN_TSI_QUARTER = 128,SQL_FN_TSI_YEAR = 256,SQL_FN_TD_NOW = 1,SQL_FN_TD_CURDATE = 2,SQL_FN_TD_DAYOFMONTH = 4,SQL_FN_TD_DAYOFWEEK = 8,SQL_FN_TD_DAYOFYEAR = 16,SQL_FN_TD_MONTH = 32,SQL_FN_TD_QUARTER = 64,SQL_FN_TD_WEEK = 128,SQL_FN_TD_YEAR = 256,SQL_FN_TD_CURTIME = 512,SQL_FN_TD_HOUR = 1024,SQL_FN_TD_MINUTE = 2048,SQL_FN_TD_SECOND = 4096,SQL_FN_TD_TIMESTAMPADD = 8192,SQL_FN_TD_TIMESTAMPDIFF = 16384,SQL_FN_TD_DAYNAME = 32768,SQL_FN_TD_MONTHNAME = 65536,SQL_FN_TD_CURRENT_DATE = 131072,SQL_FN_TD_CURRENT_TIME = 262144,SQL_FN_TD_CURRENT_TIMESTAMP = 524288,SQL_FN_TD_EXTRACT = 1048576,SQL_U_UNION = 1,SQL_U_UNION_ALL = 2,SQL_US_UNION = 1,SQL_US_UNION_ALL = 2,SQL_QUERY_TIMEOUT = 0,SQL_MAX_ROWS = 1,SQL_NOSCAN = 2,SQL_MAX_LENGTH = 3,SQL_ASYNC_ENABLE = 4,SQL_BIND_TYPE = 5,SQL_CURSOR_TYPE = 6,SQL_CONCURRENCY = 7,SQL_KEYSET_SIZE = 8,SQL_ROWSET_SIZE = 9,SQL_SIMULATE_CURSOR = 10,SQL_RETRIEVE_DATA = 11,SQL_USE_BOOKMARKS = 12,SQL_GET_BOOKMARK = 13,SQL_ROW_NUMBER = 14,SQL_ATTR_ASYNC_ENABLE = 4,SQL_ATTR_CONCURRENCY = 7,SQL_ATTR_CURSOR_TYPE = 6,SQL_ATTR_ENABLE_AUTO_IPD = 15,SQL_ATTR_FETCH_BOOKMARK_PTR = 16,SQL_ATTR_KEYSET_SIZE = 8,SQL_ATTR_MAX_LENGTH = 3,SQL_ATTR_MAX_ROWS = 1,SQL_ATTR_NOSCAN = 2,SQL_ATTR_PARAM_BIND_OFFSET_PTR = 17,SQL_ATTR_PARAM_BIND_TYPE = 18,SQL_ATTR_PARAM_OPERATION_PTR = 19,SQL_ATTR_PARAM_STATUS_PTR = 20,SQL_ATTR_PARAMS_PROCESSED_PTR = 21,SQL_ATTR_PARAMSET_SIZE = 22,SQL_ATTR_QUERY_TIMEOUT = 0,SQL_ATTR_RETRIEVE_DATA = 11,SQL_ATTR_ROW_BIND_OFFSET_PTR = 23,SQL_ATTR_ROW_BIND_TYPE = 5,SQL_ATTR_ROW_NUMBER = 14,SQL_ATTR_ROW_OPERATION_PTR = 24,SQL_ATTR_ROW_STATUS_PTR = 25,SQL_ATTR_ROWS_FETCHED_PTR = 26,SQL_ATTR_ROW_ARRAY_SIZE = 27,SQL_ATTR_SIMULATE_CURSOR = 10,SQL_ATTR_USE_BOOKMARKS = 12,SQL_ASYNC_ENABLE_OFF = 0,SQL_ASYNC_ENABLE_ON = 1,SQL_ASYNC_ENABLE_DEFAULT = 0,SQL_PARAM_BIND_BY_COLUMN = 0,SQL_PARAM_BIND_TYPE_DEFAULT = 0,SQL_BIND_BY_COLUMN = 0,SQL_BIND_TYPE_DEFAULT = 0,SQL_CONCUR_READ_ONLY = 1,SQL_CONCUR_LOCK = 2,SQL_CONCUR_ROWVER = 3,SQL_CONCUR_VALUES = 4,SQL_CONCUR_DEFAULT = 1,SQL_CURSOR_FORWARD_ONLY = 0,SQL_CURSOR_KEYSET_DRIVEN = 1,SQL_CURSOR_DYNAMIC = 2,SQL_CURSOR_STATIC = 3,SQL_CURSOR_TYPE_DEFAULT = 0,SQL_KEYSET_SIZE_DEFAULT = 0,SQL_MAX_LENGTH_DEFAULT = 0,SQL_MAX_ROWS_DEFAULT = 0,SQL_NOSCAN_OFF = 0,SQL_NOSCAN_ON = 1,SQL_NOSCAN_DEFAULT = 0,SQL_QUERY_TIMEOUT_DEFAULT = 0,SQL_RD_OFF = 0,SQL_RD_ON = 1,SQL_RD_DEFAULT = 1,SQL_ROWSET_SIZE_DEFAULT = 1,SQL_SC_NON_UNIQUE = 0,SQL_SC_TRY_UNIQUE = 1,SQL_SC_UNIQUE = 2,SQL_UB_OFF = 0,SQL_UB_ON = 1,SQL_UB_DEFAULT = 0,SQL_UB_FIXED = 1,SQL_UB_VARIABLE = 2,SQL_COL_PRED_CHAR = 1,SQL_COL_PRED_BASIC = 2,SQL_ENTIRE_ROWSET = 0,SQL_POSITION = 0,SQL_REFRESH = 1,SQL_UPDATE = 2,SQL_DELETE = 3,SQL_ADD = 4,SQL_SETPOS_MAX_OPTION_VALUE = 4,SQL_UPDATE_BY_BOOKMARK = 5,SQL_DELETE_BY_BOOKMARK = 6,SQL_FETCH_BY_BOOKMARK = 7,SQL_LOCK_NO_CHANGE = 0,SQL_LOCK_EXCLUSIVE = 1,SQL_LOCK_UNLOCK = 2,SQL_SETPOS_MAX_LOCK_VALUE = 2,SQL_BEST_ROWID = 1,SQL_ROWVER = 2,SQL_FETCH_BOOKMARK = 8,SQL_ROW_SUCCESS = 0,SQL_ROW_DELETED = 1,SQL_ROW_UPDATED = 2,SQL_ROW_NOROW = 3,SQL_ROW_ADDED = 4,SQL_ROW_ERROR = 5,SQL_ROW_SUCCESS_WITH_INFO = 6,SQL_ROW_PROCEED = 0,SQL_ROW_IGNORE = 1,SQL_PARAM_SUCCESS = 0,SQL_PARAM_SUCCESS_WITH_INFO = 6,SQL_PARAM_ERROR = 5,SQL_PARAM_UNUSED = 7,SQL_PARAM_DIAG_UNAVAILABLE = 1,SQL_PARAM_PROCEED = 0,SQL_PARAM_IGNORE = 1,SQL_CASCADE = 0,SQL_RESTRICT = 1,SQL_SET_NULL = 2,SQL_NO_ACTION = 3,SQL_SET_DEFAULT = 4,SQL_INITIALLY_DEFERRED = 5,SQL_INITIALLY_IMMEDIATE = 6,SQL_NOT_DEFERRABLE = 7,SQL_PARAM_TYPE_UNKNOWN = 0,SQL_PARAM_INPUT = 1,SQL_PARAM_INPUT_OUTPUT = 2,SQL_RESULT_COL = 3,SQL_PARAM_OUTPUT = 4,SQL_RETURN_VALUE = 5,SQL_PT_UNKNOWN = 0,SQL_PT_PROCEDURE = 1,SQL_PT_FUNCTION = 2,SQL_PARAM_TYPE_DEFAULT = 2,SQL_SETPARAM_VALUE_MAX = -1,SQL_QUICK = 0,SQL_ENSURE = 1,SQL_TABLE_STAT = 0,SQL_PC_NOT_PSEUDO = 1,SQL_DATABASE_NAME = 16,SQL_FD_FETCH_PREV = 8,SQL_FETCH_PREV = 4,SQL_CONCUR_TIMESTAMP = 3,SQL_SCCO_OPT_TIMESTAMP = 4,SQL_CC_DELETE = 0,SQL_CR_DELETE = 0,SQL_CC_CLOSE = 1,SQL_CR_CLOSE = 1,SQL_CC_PRESERVE = 2,SQL_CR_PRESERVE = 2,SQL_SCROLL_FORWARD_ONLY = 0,SQL_SCROLL_KEYSET_DRIVEN = -1,SQL_SCROLL_DYNAMIC = -2,SQL_SCROLL_STATIC = -3,SQL_WCHAR = -8,SQL_WVARCHAR = -9,SQL_WLONGVARCHAR = -10,SQL_C_WCHAR = -8,SQL_C_TCHAR = 1,SQL_SQLSTATE_SIZEW = 10,};
enum MACRO_SRCHFS : __int64 {SRCHFS_START = 0x1,SRCHFS_MATCHPARTIALNAMES = 0x2,SRCHFS_MATCHDIRS = 0x4,SRCHFS_MATCHFILES = 0x8,SRCHFS_SKIPLINKS = 0x10,SRCHFS_SKIPINVISIBLE = 0x20,SRCHFS_SKIPPACKAGES = 0x40,SRCHFS_SKIPINAPPROPRIATE = 0x80,SRCHFS_NEGATEPARAMS = 0x80000000,SRCHFS_VALIDOPTIONSMASK = 0x800000FF,};
enum MACRO_SS {SS_ONSTACK = 0x1,SS_DISABLE = 0x4,};
enum MACRO_SSIZE : __int64 {SSIZE_MAX = 9223372036854775807,};
enum MACRO_SSL {SSL_SESSION_ASN1_VERSION = 0x1,SSL_MAX_KRB5_PRINCIPAL_LENGTH = 0x100,SSL_MAX_SSL_SESSION_ID_LENGTH = 0x20,SSL_MAX_SID_CTX_LENGTH = 0x20,SSL_MIN_RSA_MODULUS_LENGTH_IN_BYTES = 0x40,SSL_MAX_KEY_ARG_LENGTH = 0x8,SSL_MAX_MASTER_KEY_LENGTH = 0x30,SSL_SENT_SHUTDOWN = 0x1,SSL_RECEIVED_SHUTDOWN = 0x2,SSL_FILETYPE_ASN1 = 0x2,SSL_FILETYPE_PEM = 0x1,SSL_OP_MICROSOFT_SESS_ID_BUG = 0x1,SSL_OP_NETSCAPE_CHALLENGE_BUG = 0x2,SSL_OP_LEGACY_SERVER_CONNECT = 0x4,SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG = 0x8,SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG = 0x10,SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER = 0x20,SSL_OP_MSIE_SSLV2_RSA_PADDING = 0x40,SSL_OP_SSLEAY_080_CLIENT_DH_BUG = 0x80,SSL_OP_TLS_D5_BUG = 0x100,SSL_OP_TLS_BLOCK_PADDING_BUG = 0x200,SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS = 0x800,SSL_OP_ALL = 0xFFF,SSL_OP_NO_QUERY_MTU = 0x1000,SSL_OP_COOKIE_EXCHANGE = 0x2000,SSL_OP_NO_TICKET = 0x4000,SSL_OP_CISCO_ANYCONNECT = 0x8000,SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION = 0x10000,SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION = 0x40000,SSL_OP_SINGLE_ECDH_USE = 0x80000,SSL_OP_SINGLE_DH_USE = 0x100000,SSL_OP_EPHEMERAL_RSA = 0x200000,SSL_OP_CIPHER_SERVER_PREFERENCE = 0x400000,SSL_OP_TLS_ROLLBACK_BUG = 0x800000,SSL_OP_NO_SSLv2 = 0x1000000,SSL_OP_NO_SSLv3 = 0x2000000,SSL_OP_NO_TLSv1 = 0x4000000,SSL_OP_PKCS1_CHECK_1 = 0x8000000,SSL_OP_PKCS1_CHECK_2 = 0x10000000,SSL_OP_NETSCAPE_CA_DN_BUG = 0x20000000,SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG = 0x40000000,SSL_MODE_ENABLE_PARTIAL_WRITE = 0x1,SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER = 0x2,SSL_MODE_AUTO_RETRY = 0x4,SSL_MODE_NO_AUTO_CHAIN = 0x8,SSL_MAX_CERT_LIST_DEFAULT = 0x19000,SSL_SESSION_CACHE_MAX_SIZE_DEFAULT = 0x5000,SSL_SESS_CACHE_OFF = 0x0,SSL_SESS_CACHE_CLIENT = 0x1,SSL_SESS_CACHE_SERVER = 0x2,SSL_SESS_CACHE_BOTH = 0x3,SSL_SESS_CACHE_NO_AUTO_CLEAR = 0x80,SSL_SESS_CACHE_NO_INTERNAL_LOOKUP = 0x100,SSL_SESS_CACHE_NO_INTERNAL_STORE = 0x200,SSL_SESS_CACHE_NO_INTERNAL = 0x300,SSL_NOTHING = 0x1,SSL_WRITING = 0x2,SSL_READING = 0x3,SSL_X509_LOOKUP = 0x4,};
enum MACRO_SSL2 {SSL2_VERSION = 0x2,SSL2_VERSION_MAJOR = 0x0,SSL2_VERSION_MINOR = 0x2,SSL2_MT_ERROR = 0x0,SSL2_MT_CLIENT_HELLO = 0x1,SSL2_MT_CLIENT_MASTER_KEY = 0x2,SSL2_MT_CLIENT_FINISHED = 0x3,SSL2_MT_SERVER_HELLO = 0x4,SSL2_MT_SERVER_VERIFY = 0x5,SSL2_MT_SERVER_FINISHED = 0x6,SSL2_MT_REQUEST_CERTIFICATE = 0x7,SSL2_MT_CLIENT_CERTIFICATE = 0x8,SSL2_PE_UNDEFINED_ERROR = 0x0,SSL2_PE_NO_CIPHER = 0x1,SSL2_PE_NO_CERTIFICATE = 0x2,SSL2_PE_BAD_CERTIFICATE = 0x4,SSL2_PE_UNSUPPORTED_CERTIFICATE_TYPE = 0x6,SSL2_CK_NULL_WITH_MD5 = 0x2000000,SSL2_CK_RC4_128_WITH_MD5 = 0x2010080,SSL2_CK_RC4_128_EXPORT40_WITH_MD5 = 0x2020080,SSL2_CK_RC2_128_CBC_WITH_MD5 = 0x2030080,SSL2_CK_RC2_128_CBC_EXPORT40_WITH_MD5 = 0x2040080,SSL2_CK_IDEA_128_CBC_WITH_MD5 = 0x2050080,SSL2_CK_DES_64_CBC_WITH_MD5 = 0x2060040,SSL2_CK_DES_64_CBC_WITH_SHA = 0x2060140,SSL2_CK_DES_192_EDE3_CBC_WITH_MD5 = 0x20700C0,SSL2_CK_DES_192_EDE3_CBC_WITH_SHA = 0x20701C0,SSL2_CK_RC4_64_WITH_MD5 = 0x2080080,SSL2_CK_DES_64_CFB64_WITH_MD5_1 = 0x2FF0800,SSL2_CK_NULL = 0x2FF0810,SSL2_CF_5_BYTE_ENC = 0x1,SSL2_CF_8_BYTE_ENC = 0x2,SSL2_CT_X509_CERTIFICATE = 0x1,SSL2_AT_MD5_WITH_RSA_ENCRYPTION = 0x1,SSL2_MAX_SSL_SESSION_ID_LENGTH = 0x20,SSL2_MAX_MASTER_KEY_LENGTH_IN_BITS = 0x100,SSL2_MAX_RECORD_LENGTH_2_BYTE_HEADER = 0x7FFF,SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER = 0x3FFF,SSL2_CHALLENGE_LENGTH = 0x10,SSL2_MIN_CHALLENGE_LENGTH = 0x10,SSL2_MAX_CHALLENGE_LENGTH = 0x20,SSL2_CONNECTION_ID_LENGTH = 0x10,SSL2_MAX_CONNECTION_ID_LENGTH = 0x10,SSL2_SSL_SESSION_ID_LENGTH = 0x10,SSL2_MAX_CERT_CHALLENGE_LENGTH = 0x20,SSL2_MIN_CERT_CHALLENGE_LENGTH = 0x10,SSL2_MAX_KEY_MATERIAL_LENGTH = 0x18,};
enum MACRO_SSL3 {SSL3_CK_SCSV = 0x30000FF,SSL3_CK_RSA_NULL_MD5 = 0x3000001,SSL3_CK_RSA_NULL_SHA = 0x3000002,SSL3_CK_RSA_RC4_40_MD5 = 0x3000003,SSL3_CK_RSA_RC4_128_MD5 = 0x3000004,SSL3_CK_RSA_RC4_128_SHA = 0x3000005,SSL3_CK_RSA_RC2_40_MD5 = 0x3000006,SSL3_CK_RSA_IDEA_128_SHA = 0x3000007,SSL3_CK_RSA_DES_40_CBC_SHA = 0x3000008,SSL3_CK_RSA_DES_64_CBC_SHA = 0x3000009,SSL3_CK_RSA_DES_192_CBC3_SHA = 0x300000A,SSL3_CK_DH_DSS_DES_40_CBC_SHA = 0x300000B,SSL3_CK_DH_DSS_DES_64_CBC_SHA = 0x300000C,SSL3_CK_DH_DSS_DES_192_CBC3_SHA = 0x300000D,SSL3_CK_DH_RSA_DES_40_CBC_SHA = 0x300000E,SSL3_CK_DH_RSA_DES_64_CBC_SHA = 0x300000F,SSL3_CK_DH_RSA_DES_192_CBC3_SHA = 0x3000010,SSL3_CK_EDH_DSS_DES_40_CBC_SHA = 0x3000011,SSL3_CK_EDH_DSS_DES_64_CBC_SHA = 0x3000012,SSL3_CK_EDH_DSS_DES_192_CBC3_SHA = 0x3000013,SSL3_CK_EDH_RSA_DES_40_CBC_SHA = 0x3000014,SSL3_CK_EDH_RSA_DES_64_CBC_SHA = 0x3000015,SSL3_CK_EDH_RSA_DES_192_CBC3_SHA = 0x3000016,SSL3_CK_ADH_RC4_40_MD5 = 0x3000017,SSL3_CK_ADH_RC4_128_MD5 = 0x3000018,SSL3_CK_ADH_DES_40_CBC_SHA = 0x3000019,SSL3_CK_ADH_DES_64_CBC_SHA = 0x300001A,SSL3_CK_ADH_DES_192_CBC_SHA = 0x300001B,SSL3_CK_FZA_DMS_NULL_SHA = 0x300001C,SSL3_CK_FZA_DMS_FZA_SHA = 0x300001D,SSL3_CK_KRB5_DES_64_CBC_SHA = 0x300001E,SSL3_CK_KRB5_DES_192_CBC3_SHA = 0x300001F,SSL3_CK_KRB5_RC4_128_SHA = 0x3000020,SSL3_CK_KRB5_IDEA_128_CBC_SHA = 0x3000021,SSL3_CK_KRB5_DES_64_CBC_MD5 = 0x3000022,SSL3_CK_KRB5_DES_192_CBC3_MD5 = 0x3000023,SSL3_CK_KRB5_RC4_128_MD5 = 0x3000024,SSL3_CK_KRB5_IDEA_128_CBC_MD5 = 0x3000025,SSL3_CK_KRB5_DES_40_CBC_SHA = 0x3000026,SSL3_CK_KRB5_RC2_40_CBC_SHA = 0x3000027,SSL3_CK_KRB5_RC4_40_SHA = 0x3000028,SSL3_CK_KRB5_DES_40_CBC_MD5 = 0x3000029,SSL3_CK_KRB5_RC2_40_CBC_MD5 = 0x300002A,SSL3_CK_KRB5_RC4_40_MD5 = 0x300002B,SSL3_SSL_SESSION_ID_LENGTH = 0x20,SSL3_MAX_SSL_SESSION_ID_LENGTH = 0x20,SSL3_MASTER_SECRET_SIZE = 0x30,SSL3_RANDOM_SIZE = 0x20,SSL3_SESSION_ID_SIZE = 0x20,SSL3_RT_HEADER_LENGTH = 0x5,SSL3_RT_MAX_EXTRA = 0x4000,SSL3_RT_MAX_PLAIN_LENGTH = 0x4000,SSL3_RT_MAX_COMPRESSED_LENGTH = 0x4400,SSL3_RT_MAX_ENCRYPTED_LENGTH = 0x4800,SSL3_RT_MAX_PACKET_SIZE = 0x4805,SSL3_RT_MAX_DATA_SIZE = 0x100000,SSL3_VERSION = 0x300,SSL3_VERSION_MAJOR = 0x3,SSL3_VERSION_MINOR = 0x0,SSL3_RT_CHANGE_CIPHER_SPEC = 0x14,SSL3_RT_ALERT = 0x15,SSL3_RT_HANDSHAKE = 0x16,SSL3_RT_APPLICATION_DATA = 0x17,SSL3_AL_WARNING = 0x1,SSL3_AL_FATAL = 0x2,SSL3_AD_CLOSE_NOTIFY = 0x0,SSL3_AD_UNEXPECTED_MESSAGE = 0xA,SSL3_AD_BAD_RECORD_MAC = 0x14,SSL3_AD_DECOMPRESSION_FAILURE = 0x1E,SSL3_AD_HANDSHAKE_FAILURE = 0x28,SSL3_AD_NO_CERTIFICATE = 0x29,SSL3_AD_BAD_CERTIFICATE = 0x2A,SSL3_AD_UNSUPPORTED_CERTIFICATE = 0x2B,SSL3_AD_CERTIFICATE_REVOKED = 0x2C,SSL3_AD_CERTIFICATE_EXPIRED = 0x2D,SSL3_AD_CERTIFICATE_UNKNOWN = 0x2E,SSL3_AD_ILLEGAL_PARAMETER = 0x2F,SSL3_CT_RSA_SIGN = 0x1,SSL3_CT_DSS_SIGN = 0x2,SSL3_CT_RSA_FIXED_DH = 0x3,SSL3_CT_DSS_FIXED_DH = 0x4,SSL3_CT_RSA_EPHEMERAL_DH = 0x5,SSL3_CT_DSS_EPHEMERAL_DH = 0x6,SSL3_CT_FORTEZZA_DMS = 0x14,SSL3_CT_NUMBER = 0x7,SSL3_FLAGS_NO_RENEGOTIATE_CIPHERS = 0x1,SSL3_FLAGS_DELAY_CLIENT_FINISHED = 0x2,SSL3_FLAGS_POP_BUFFER = 0x4,};
enum MACRO_SSL3_MT {SSL3_MT_HELLO_REQUEST = 0,SSL3_MT_CLIENT_HELLO = 1,SSL3_MT_SERVER_HELLO = 2,SSL3_MT_NEWSESSION_TICKET = 4,SSL3_MT_CERTIFICATE = 11,SSL3_MT_SERVER_KEY_EXCHANGE = 12,SSL3_MT_CERTIFICATE_REQUEST = 13,SSL3_MT_SERVER_DONE = 14,SSL3_MT_CERTIFICATE_VERIFY = 15,SSL3_MT_CLIENT_KEY_EXCHANGE = 16,SSL3_MT_FINISHED = 20,SSL3_MT_CERTIFICATE_STATUS = 22,};
enum MACRO_SSL3_MT_CCS {SSL3_MT_CCS = 1,SSL3_CC_READ = 1,SSL3_CC_WRITE = 2,SSL3_CC_CLIENT = 16,SSL3_CC_SERVER = 32,SSL3_CHANGE_CIPHER_CLIENT_WRITE = 18,SSL3_CHANGE_CIPHER_SERVER_READ = 33,SSL3_CHANGE_CIPHER_CLIENT_READ = 17,SSL3_CHANGE_CIPHER_SERVER_WRITE = 34,};
enum MACRO_SSLEAY {SSLEAY_VERSION = 0,SSLEAY_CFLAGS = 2,SSLEAY_BUILT_ON = 3,SSLEAY_PLATFORM = 4,SSLEAY_DIR = 5,};
enum MACRO_SSLEEP {SSLEEP = 3,SSTOP = 4,};
enum MACRO_SSL_CTRL {SSL_CTRL_GET_RI_SUPPORT = 76,SSL_CTRL_CLEAR_OPTIONS = 77,SSL_CTRL_CLEAR_MODE = 78,SSL_F_CLIENT_CERTIFICATE = 100,SSL_F_CLIENT_FINISHED = 167,SSL_F_CLIENT_HELLO = 101,SSL_F_CLIENT_MASTER_KEY = 102,SSL_F_D2I_SSL_SESSION = 103,SSL_F_DO_DTLS1_WRITE = 245,SSL_F_DO_SSL3_WRITE = 104,SSL_F_DTLS1_ACCEPT = 246,SSL_F_DTLS1_ADD_CERT_TO_BUF = 280,SSL_F_DTLS1_BUFFER_RECORD = 247,SSL_F_DTLS1_CLIENT_HELLO = 248,SSL_F_DTLS1_CONNECT = 249,SSL_F_DTLS1_ENC = 250,SSL_F_DTLS1_GET_HELLO_VERIFY = 251,SSL_F_DTLS1_GET_MESSAGE = 252,SSL_F_DTLS1_GET_MESSAGE_FRAGMENT = 253,SSL_F_DTLS1_GET_RECORD = 254,SSL_F_DTLS1_HANDLE_TIMEOUT = 282,SSL_F_DTLS1_OUTPUT_CERT_CHAIN = 255,SSL_F_DTLS1_PREPROCESS_FRAGMENT = 277,SSL_F_DTLS1_PROCESS_OUT_OF_SEQ_MESSAGE = 256,SSL_F_DTLS1_PROCESS_RECORD = 257,SSL_F_DTLS1_READ_BYTES = 258,SSL_F_DTLS1_READ_FAILED = 259,SSL_F_DTLS1_SEND_CERTIFICATE_REQUEST = 260,SSL_F_DTLS1_SEND_CLIENT_CERTIFICATE = 261,SSL_F_DTLS1_SEND_CLIENT_KEY_EXCHANGE = 262,SSL_F_DTLS1_SEND_CLIENT_VERIFY = 263,SSL_F_DTLS1_SEND_HELLO_VERIFY_REQUEST = 264,SSL_F_DTLS1_SEND_SERVER_CERTIFICATE = 265,SSL_F_DTLS1_SEND_SERVER_HELLO = 266,SSL_F_DTLS1_SEND_SERVER_KEY_EXCHANGE = 267,SSL_F_DTLS1_WRITE_APP_DATA_BYTES = 268,SSL_F_GET_CLIENT_FINISHED = 105,SSL_F_GET_CLIENT_HELLO = 106,SSL_F_GET_CLIENT_MASTER_KEY = 107,SSL_F_GET_SERVER_FINISHED = 108,SSL_F_GET_SERVER_HELLO = 109,SSL_F_GET_SERVER_VERIFY = 110,SSL_F_I2D_SSL_SESSION = 111,SSL_F_READ_N = 112,SSL_F_REQUEST_CERTIFICATE = 113,SSL_F_SERVER_FINISH = 239,SSL_F_SERVER_HELLO = 114,SSL_F_SERVER_VERIFY = 240,SSL_F_SSL23_ACCEPT = 115,SSL_F_SSL23_CLIENT_HELLO = 116,SSL_F_SSL23_CONNECT = 117,SSL_F_SSL23_GET_CLIENT_HELLO = 118,SSL_F_SSL23_GET_SERVER_HELLO = 119,SSL_F_SSL23_PEEK = 237,SSL_F_SSL23_READ = 120,SSL_F_SSL23_WRITE = 121,SSL_F_SSL2_ACCEPT = 122,SSL_F_SSL2_CONNECT = 123,SSL_F_SSL2_ENC_INIT = 124,SSL_F_SSL2_GENERATE_KEY_MATERIAL = 241,SSL_F_SSL2_PEEK = 234,SSL_F_SSL2_READ = 125,SSL_F_SSL2_READ_INTERNAL = 236,SSL_F_SSL2_SET_CERTIFICATE = 126,SSL_F_SSL2_WRITE = 127,SSL_F_SSL3_ACCEPT = 128,SSL_F_SSL3_ADD_CERT_TO_BUF = 281,SSL_F_SSL3_CALLBACK_CTRL = 233,SSL_F_SSL3_CHANGE_CIPHER_STATE = 129,SSL_F_SSL3_CHECK_CERT_AND_ALGORITHM = 130,SSL_F_SSL3_CLIENT_HELLO = 131,SSL_F_SSL3_CONNECT = 132,SSL_F_SSL3_CTRL = 213,SSL_F_SSL3_CTX_CTRL = 133,SSL_F_SSL3_DO_CHANGE_CIPHER_SPEC = 279,SSL_F_SSL3_ENC = 134,SSL_F_SSL3_GENERATE_KEY_BLOCK = 238,SSL_F_SSL3_GET_CERTIFICATE_REQUEST = 135,SSL_F_SSL3_GET_CERT_STATUS = 288,SSL_F_SSL3_GET_CERT_VERIFY = 136,SSL_F_SSL3_GET_CLIENT_CERTIFICATE = 137,SSL_F_SSL3_GET_CLIENT_HELLO = 138,SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE = 139,SSL_F_SSL3_GET_FINISHED = 140,SSL_F_SSL3_GET_KEY_EXCHANGE = 141,SSL_F_SSL3_GET_MESSAGE = 142,SSL_F_SSL3_GET_NEW_SESSION_TICKET = 283,SSL_F_SSL3_GET_RECORD = 143,SSL_F_SSL3_GET_SERVER_CERTIFICATE = 144,SSL_F_SSL3_GET_SERVER_DONE = 145,SSL_F_SSL3_GET_SERVER_HELLO = 146,SSL_F_SSL3_NEW_SESSION_TICKET = 284,SSL_F_SSL3_OUTPUT_CERT_CHAIN = 147,SSL_F_SSL3_PEEK = 235,SSL_F_SSL3_READ_BYTES = 148,SSL_F_SSL3_READ_N = 149,SSL_F_SSL3_SEND_CERTIFICATE_REQUEST = 150,SSL_F_SSL3_SEND_CLIENT_CERTIFICATE = 151,SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE = 152,SSL_F_SSL3_SEND_CLIENT_VERIFY = 153,SSL_F_SSL3_SEND_SERVER_CERTIFICATE = 154,SSL_F_SSL3_SEND_SERVER_HELLO = 242,SSL_F_SSL3_SEND_SERVER_KEY_EXCHANGE = 155,SSL_F_SSL3_SETUP_BUFFERS = 156,SSL_F_SSL3_SETUP_KEY_BLOCK = 157,SSL_F_SSL3_WRITE_BYTES = 158,SSL_F_SSL3_WRITE_PENDING = 159,SSL_F_SSL_ADD_CLIENTHELLO_RENEGOTIATE_EXT = 285,SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT = 272,SSL_F_SSL_ADD_DIR_CERT_SUBJECTS_TO_STACK = 215,SSL_F_SSL_ADD_FILE_CERT_SUBJECTS_TO_STACK = 216,SSL_F_SSL_ADD_SERVERHELLO_RENEGOTIATE_EXT = 286,SSL_F_SSL_ADD_SERVERHELLO_TLSEXT = 273,SSL_F_SSL_BAD_METHOD = 160,SSL_F_SSL_BYTES_TO_CIPHER_LIST = 161,SSL_F_SSL_CERT_DUP = 221,SSL_F_SSL_CERT_INST = 222,SSL_F_SSL_CERT_INSTANTIATE = 214,SSL_F_SSL_CERT_NEW = 162,SSL_F_SSL_CHECK_PRIVATE_KEY = 163,SSL_F_SSL_CHECK_SERVERHELLO_TLSEXT = 274,SSL_F_SSL_CIPHER_PROCESS_RULESTR = 230,SSL_F_SSL_CIPHER_STRENGTH_SORT = 231,SSL_F_SSL_CLEAR = 164,SSL_F_SSL_COMP_ADD_COMPRESSION_METHOD = 165,SSL_F_SSL_CREATE_CIPHER_LIST = 166,SSL_F_SSL_CTRL = 232,SSL_F_SSL_CTX_CHECK_PRIVATE_KEY = 168,SSL_F_SSL_CTX_NEW = 169,SSL_F_SSL_CTX_SET_CIPHER_LIST = 269,SSL_F_SSL_CTX_SET_CLIENT_CERT_ENGINE = 278,SSL_F_SSL_CTX_SET_PURPOSE = 226,SSL_F_SSL_CTX_SET_SESSION_ID_CONTEXT = 219,SSL_F_SSL_CTX_SET_SSL_VERSION = 170,SSL_F_SSL_CTX_SET_TRUST = 229,SSL_F_SSL_CTX_USE_CERTIFICATE = 171,SSL_F_SSL_CTX_USE_CERTIFICATE_ASN1 = 172,SSL_F_SSL_CTX_USE_CERTIFICATE_CHAIN_FILE = 220,SSL_F_SSL_CTX_USE_CERTIFICATE_FILE = 173,SSL_F_SSL_CTX_USE_PRIVATEKEY = 174,SSL_F_SSL_CTX_USE_PRIVATEKEY_ASN1 = 175,SSL_F_SSL_CTX_USE_PRIVATEKEY_FILE = 176,SSL_F_SSL_CTX_USE_RSAPRIVATEKEY = 177,SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_ASN1 = 178,SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_FILE = 179,SSL_F_SSL_DO_HANDSHAKE = 180,SSL_F_SSL_GET_NEW_SESSION = 181,SSL_F_SSL_GET_PREV_SESSION = 217,SSL_F_SSL_GET_SERVER_SEND_CERT = 182,SSL_F_SSL_GET_SIGN_PKEY = 183,SSL_F_SSL_INIT_WBIO_BUFFER = 184,SSL_F_SSL_LOAD_CLIENT_CA_FILE = 185,SSL_F_SSL_NEW = 186,SSL_F_SSL_PARSE_CLIENTHELLO_RENEGOTIATE_EXT = 287,SSL_F_SSL_PARSE_CLIENTHELLO_TLSEXT = 290,SSL_F_SSL_PARSE_SERVERHELLO_RENEGOTIATE_EXT = 289,SSL_F_SSL_PARSE_SERVERHELLO_TLSEXT = 291,SSL_F_SSL_PEEK = 270,SSL_F_SSL_PREPARE_CLIENTHELLO_TLSEXT = 275,SSL_F_SSL_PREPARE_SERVERHELLO_TLSEXT = 276,SSL_F_SSL_READ = 223,SSL_F_SSL_RSA_PRIVATE_DECRYPT = 187,SSL_F_SSL_RSA_PUBLIC_ENCRYPT = 188,SSL_F_SSL_SESSION_NEW = 189,SSL_F_SSL_SESSION_PRINT_FP = 190,SSL_F_SSL_SESS_CERT_NEW = 225,SSL_F_SSL_SET_CERT = 191,SSL_F_SSL_SET_CIPHER_LIST = 271,SSL_F_SSL_SET_FD = 192,SSL_F_SSL_SET_PKEY = 193,SSL_F_SSL_SET_PURPOSE = 227,SSL_F_SSL_SET_RFD = 194,SSL_F_SSL_SET_SESSION = 195,SSL_F_SSL_SET_SESSION_ID_CONTEXT = 218,SSL_F_SSL_SET_TRUST = 228,SSL_F_SSL_SET_WFD = 196,SSL_F_SSL_SHUTDOWN = 224,SSL_F_SSL_UNDEFINED_CONST_FUNCTION = 243,SSL_F_SSL_UNDEFINED_FUNCTION = 197,SSL_F_SSL_UNDEFINED_VOID_FUNCTION = 244,SSL_F_SSL_USE_CERTIFICATE = 198,SSL_F_SSL_USE_CERTIFICATE_ASN1 = 199,SSL_F_SSL_USE_CERTIFICATE_FILE = 200,SSL_F_SSL_USE_PRIVATEKEY = 201,SSL_F_SSL_USE_PRIVATEKEY_ASN1 = 202,SSL_F_SSL_USE_PRIVATEKEY_FILE = 203,SSL_F_SSL_USE_RSAPRIVATEKEY = 204,SSL_F_SSL_USE_RSAPRIVATEKEY_ASN1 = 205,SSL_F_SSL_USE_RSAPRIVATEKEY_FILE = 206,SSL_F_SSL_VERIFY_CERT_CHAIN = 207,SSL_F_SSL_WRITE = 208,SSL_F_TLS1_CHANGE_CIPHER_STATE = 209,SSL_F_TLS1_ENC = 210,SSL_F_TLS1_SETUP_KEY_BLOCK = 211,SSL_F_WRITE_PENDING = 212,SSL_R_APP_DATA_IN_HANDSHAKE = 100,SSL_R_ATTEMPT_TO_REUSE_SESSION_IN_DIFFERENT_CONTEXT = 272,SSL_R_BAD_ALERT_RECORD = 101,SSL_R_BAD_AUTHENTICATION_TYPE = 102,SSL_R_BAD_CHANGE_CIPHER_SPEC = 103,SSL_R_BAD_CHECKSUM = 104,SSL_R_BAD_DATA_RETURNED_BY_CALLBACK = 106,SSL_R_BAD_DECOMPRESSION = 107,SSL_R_BAD_DH_G_LENGTH = 108,SSL_R_BAD_DH_PUB_KEY_LENGTH = 109,SSL_R_BAD_DH_P_LENGTH = 110,SSL_R_BAD_DIGEST_LENGTH = 111,SSL_R_BAD_DSA_SIGNATURE = 112,SSL_R_BAD_ECC_CERT = 304,SSL_R_BAD_ECDSA_SIGNATURE = 305,SSL_R_BAD_ECPOINT = 306,SSL_R_BAD_HELLO_REQUEST = 105,SSL_R_BAD_LENGTH = 271,SSL_R_BAD_MAC_DECODE = 113,SSL_R_BAD_MESSAGE_TYPE = 114,SSL_R_BAD_PACKET_LENGTH = 115,SSL_R_BAD_PROTOCOL_VERSION_NUMBER = 116,SSL_R_BAD_RESPONSE_ARGUMENT = 117,SSL_R_BAD_RSA_DECRYPT = 118,SSL_R_BAD_RSA_ENCRYPT = 119,SSL_R_BAD_RSA_E_LENGTH = 120,SSL_R_BAD_RSA_MODULUS_LENGTH = 121,SSL_R_BAD_RSA_SIGNATURE = 122,SSL_R_BAD_SIGNATURE = 123,SSL_R_BAD_SSL_FILETYPE = 124,SSL_R_BAD_SSL_SESSION_ID_LENGTH = 125,SSL_R_BAD_STATE = 126,SSL_R_BAD_WRITE_RETRY = 127,SSL_R_BIO_NOT_SET = 128,SSL_R_BLOCK_CIPHER_PAD_IS_WRONG = 129,SSL_R_BN_LIB = 130,SSL_R_CA_DN_LENGTH_MISMATCH = 131,SSL_R_CA_DN_TOO_LONG = 132,SSL_R_CCS_RECEIVED_EARLY = 133,SSL_R_CERTIFICATE_VERIFY_FAILED = 134,SSL_R_CERT_LENGTH_MISMATCH = 135,SSL_R_CHALLENGE_IS_DIFFERENT = 136,SSL_R_CIPHER_CODE_WRONG_LENGTH = 137,SSL_R_CIPHER_OR_HASH_UNAVAILABLE = 138,SSL_R_CIPHER_TABLE_SRC_ERROR = 139,SSL_R_CLIENTHELLO_TLSEXT = 157,SSL_R_COMPRESSED_LENGTH_TOO_LONG = 140,SSL_R_COMPRESSION_FAILURE = 141,SSL_R_COMPRESSION_ID_NOT_WITHIN_PRIVATE_RANGE = 307,SSL_R_COMPRESSION_LIBRARY_ERROR = 142,SSL_R_CONNECTION_ID_IS_DIFFERENT = 143,SSL_R_CONNECTION_TYPE_NOT_SET = 144,SSL_R_COOKIE_MISMATCH = 308,SSL_R_DATA_BETWEEN_CCS_AND_FINISHED = 145,SSL_R_DATA_LENGTH_TOO_LONG = 146,SSL_R_DECRYPTION_FAILED = 147,SSL_R_DECRYPTION_FAILED_OR_BAD_RECORD_MAC = 281,SSL_R_DH_PUBLIC_VALUE_LENGTH_IS_WRONG = 148,SSL_R_DIGEST_CHECK_FAILED = 149,SSL_R_DTLS_MESSAGE_TOO_BIG = 318,SSL_R_DUPLICATE_COMPRESSION_ID = 309,SSL_R_ECGROUP_TOO_LARGE_FOR_CIPHER = 310,SSL_R_ENCRYPTED_LENGTH_TOO_LONG = 150,SSL_R_ERROR_GENERATING_TMP_RSA_KEY = 282,SSL_R_ERROR_IN_RECEIVED_CIPHER_LIST = 151,SSL_R_EXCESSIVE_MESSAGE_SIZE = 152,SSL_R_EXTRA_DATA_IN_MESSAGE = 153,SSL_R_GOT_A_FIN_BEFORE_A_CCS = 154,SSL_R_HTTPS_PROXY_REQUEST = 155,SSL_R_HTTP_REQUEST = 156,SSL_R_ILLEGAL_PADDING = 283,SSL_R_INVALID_CHALLENGE_LENGTH = 158,SSL_R_INVALID_COMMAND = 280,SSL_R_INVALID_PURPOSE = 278,SSL_R_INVALID_STATUS_RESPONSE = 316,SSL_R_INVALID_TICKET_KEYS_LENGTH = 275,SSL_R_INVALID_TRUST = 279,SSL_R_KEY_ARG_TOO_LONG = 284,SSL_R_KRB5 = 285,SSL_R_KRB5_C_CC_PRINC = 286,SSL_R_KRB5_C_GET_CRED = 287,SSL_R_KRB5_C_INIT = 288,SSL_R_KRB5_C_MK_REQ = 289,SSL_R_KRB5_S_BAD_TICKET = 290,SSL_R_KRB5_S_INIT = 291,SSL_R_KRB5_S_RD_REQ = 292,SSL_R_KRB5_S_TKT_EXPIRED = 293,SSL_R_KRB5_S_TKT_NYV = 294,SSL_R_KRB5_S_TKT_SKEW = 295,SSL_R_LENGTH_MISMATCH = 159,SSL_R_LENGTH_TOO_SHORT = 160,SSL_R_LIBRARY_BUG = 274,SSL_R_LIBRARY_HAS_NO_CIPHERS = 161,SSL_R_MESSAGE_TOO_LONG = 296,SSL_R_MISSING_DH_DSA_CERT = 162,SSL_R_MISSING_DH_KEY = 163,SSL_R_MISSING_DH_RSA_CERT = 164,SSL_R_MISSING_DSA_SIGNING_CERT = 165,SSL_R_MISSING_EXPORT_TMP_DH_KEY = 166,SSL_R_MISSING_EXPORT_TMP_RSA_KEY = 167,SSL_R_MISSING_RSA_CERTIFICATE = 168,SSL_R_MISSING_RSA_ENCRYPTING_CERT = 169,SSL_R_MISSING_RSA_SIGNING_CERT = 170,SSL_R_MISSING_TMP_DH_KEY = 171,SSL_R_MISSING_TMP_ECDH_KEY = 311,SSL_R_MISSING_TMP_RSA_KEY = 172,SSL_R_MISSING_TMP_RSA_PKEY = 173,SSL_R_MISSING_VERIFY_MESSAGE = 174,SSL_R_NON_SSLV2_INITIAL_PACKET = 175,SSL_R_NO_CERTIFICATES_RETURNED = 176,SSL_R_NO_CERTIFICATE_ASSIGNED = 177,SSL_R_NO_CERTIFICATE_RETURNED = 178,SSL_R_NO_CERTIFICATE_SET = 179,SSL_R_NO_CERTIFICATE_SPECIFIED = 180,SSL_R_NO_CIPHERS_AVAILABLE = 181,SSL_R_NO_CIPHERS_PASSED = 182,SSL_R_NO_CIPHERS_SPECIFIED = 183,SSL_R_NO_CIPHER_LIST = 184,SSL_R_NO_CIPHER_MATCH = 185,SSL_R_NO_CLIENT_CERT_METHOD = 317,SSL_R_NO_CLIENT_CERT_RECEIVED = 186,SSL_R_NO_COMPRESSION_SPECIFIED = 187,SSL_R_NO_METHOD_SPECIFIED = 188,SSL_R_NO_PRIVATEKEY = 189,SSL_R_NO_PRIVATE_KEY_ASSIGNED = 190,SSL_R_NO_PROTOCOLS_AVAILABLE = 191,SSL_R_NO_PUBLICKEY = 192,SSL_R_NO_RENEGOTIATION = 319,SSL_R_NO_SHARED_CIPHER = 193,SSL_R_NO_VERIFY_CALLBACK = 194,SSL_R_NULL_SSL_CTX = 195,SSL_R_NULL_SSL_METHOD_PASSED = 196,SSL_R_OLD_SESSION_CIPHER_NOT_RETURNED = 197,SSL_R_ONLY_TLS_ALLOWED_IN_FIPS_MODE = 297,SSL_R_PACKET_LENGTH_TOO_LONG = 198,SSL_R_PARSE_TLSEXT = 223,SSL_R_PATH_TOO_LONG = 270,SSL_R_PEER_DID_NOT_RETURN_A_CERTIFICATE = 199,SSL_R_PEER_ERROR = 200,SSL_R_PEER_ERROR_CERTIFICATE = 201,SSL_R_PEER_ERROR_NO_CERTIFICATE = 202,SSL_R_PEER_ERROR_NO_CIPHER = 203,SSL_R_PEER_ERROR_UNSUPPORTED_CERTIFICATE_TYPE = 204,SSL_R_PRE_MAC_LENGTH_TOO_LONG = 205,SSL_R_PROBLEMS_MAPPING_CIPHER_FUNCTIONS = 206,SSL_R_PROTOCOL_IS_SHUTDOWN = 207,SSL_R_PUBLIC_KEY_ENCRYPT_ERROR = 208,SSL_R_PUBLIC_KEY_IS_NOT_RSA = 209,SSL_R_PUBLIC_KEY_NOT_RSA = 210,SSL_R_READ_BIO_NOT_SET = 211,SSL_R_READ_TIMEOUT_EXPIRED = 312,SSL_R_READ_WRONG_PACKET_TYPE = 212,SSL_R_RECORD_LENGTH_MISMATCH = 213,SSL_R_RECORD_TOO_LARGE = 214,SSL_R_RECORD_TOO_SMALL = 298,SSL_R_RENEGOTIATE_EXT_TOO_LONG = 320,SSL_R_RENEGOTIATION_ENCODING_ERR = 321,SSL_R_RENEGOTIATION_MISMATCH = 322,SSL_R_REQUIRED_CIPHER_MISSING = 215,SSL_R_REUSE_CERT_LENGTH_NOT_ZERO = 216,SSL_R_REUSE_CERT_TYPE_NOT_ZERO = 217,SSL_R_REUSE_CIPHER_LIST_NOT_ZERO = 218,SSL_R_SCSV_RECEIVED_WHEN_RENEGOTIATING = 324,SSL_R_SERVERHELLO_TLSEXT = 224,SSL_R_SESSION_ID_CONTEXT_UNINITIALIZED = 277,SSL_R_SHORT_READ = 219,SSL_R_SIGNATURE_FOR_NON_SIGNING_CERTIFICATE = 220,SSL_R_SSL23_DOING_SESSION_ID_REUSE = 221,SSL_R_SSL2_CONNECTION_ID_TOO_LONG = 299,SSL_R_SSL3_EXT_INVALID_SERVERNAME = 225,SSL_R_SSL3_EXT_INVALID_SERVERNAME_TYPE = 226,SSL_R_SSL3_SESSION_ID_TOO_LONG = 300,SSL_R_SSL3_SESSION_ID_TOO_SHORT = 222,SSL_R_SSLV3_ALERT_BAD_CERTIFICATE = 1042,SSL_R_SSLV3_ALERT_BAD_RECORD_MAC = 1020,SSL_R_SSLV3_ALERT_CERTIFICATE_EXPIRED = 1045,SSL_R_SSLV3_ALERT_CERTIFICATE_REVOKED = 1044,SSL_R_SSLV3_ALERT_CERTIFICATE_UNKNOWN = 1046,SSL_R_SSLV3_ALERT_DECOMPRESSION_FAILURE = 1030,SSL_R_SSLV3_ALERT_HANDSHAKE_FAILURE = 1040,SSL_R_SSLV3_ALERT_ILLEGAL_PARAMETER = 1047,SSL_R_SSLV3_ALERT_NO_CERTIFICATE = 1041,SSL_R_SSLV3_ALERT_UNEXPECTED_MESSAGE = 1010,SSL_R_SSLV3_ALERT_UNSUPPORTED_CERTIFICATE = 1043,SSL_R_SSL_CTX_HAS_NO_DEFAULT_SSL_VERSION = 228,SSL_R_SSL_HANDSHAKE_FAILURE = 229,SSL_R_SSL_LIBRARY_HAS_NO_CIPHERS = 230,SSL_R_SSL_SESSION_ID_CALLBACK_FAILED = 301,SSL_R_SSL_SESSION_ID_CONFLICT = 302,SSL_R_SSL_SESSION_ID_CONTEXT_TOO_LONG = 273,SSL_R_SSL_SESSION_ID_HAS_BAD_LENGTH = 303,SSL_R_SSL_SESSION_ID_IS_DIFFERENT = 231,SSL_R_TLSV1_ALERT_ACCESS_DENIED = 1049,SSL_R_TLSV1_ALERT_DECODE_ERROR = 1050,SSL_R_TLSV1_ALERT_DECRYPTION_FAILED = 1021,SSL_R_TLSV1_ALERT_DECRYPT_ERROR = 1051,SSL_R_TLSV1_ALERT_EXPORT_RESTRICTION = 1060,SSL_R_TLSV1_ALERT_INSUFFICIENT_SECURITY = 1071,SSL_R_TLSV1_ALERT_INTERNAL_ERROR = 1080,SSL_R_TLSV1_ALERT_NO_RENEGOTIATION = 1100,SSL_R_TLSV1_ALERT_PROTOCOL_VERSION = 1070,SSL_R_TLSV1_ALERT_RECORD_OVERFLOW = 1022,SSL_R_TLSV1_ALERT_UNKNOWN_CA = 1048,SSL_R_TLSV1_ALERT_USER_CANCELLED = 1090,SSL_R_TLS_CLIENT_CERT_REQ_WITH_ANON_CIPHER = 232,SSL_R_TLS_INVALID_ECPOINTFORMAT_LIST = 227,SSL_R_TLS_PEER_DID_NOT_RESPOND_WITH_CERTIFICATE_LIST = 233,SSL_R_TLS_RSA_ENCRYPTED_VALUE_LENGTH_IS_WRONG = 234,SSL_R_TRIED_TO_USE_UNSUPPORTED_CIPHER = 235,SSL_R_UNABLE_TO_DECODE_DH_CERTS = 236,SSL_R_UNABLE_TO_DECODE_ECDH_CERTS = 313,SSL_R_UNABLE_TO_EXTRACT_PUBLIC_KEY = 237,SSL_R_UNABLE_TO_FIND_DH_PARAMETERS = 238,SSL_R_UNABLE_TO_FIND_ECDH_PARAMETERS = 314,SSL_R_UNABLE_TO_FIND_PUBLIC_KEY_PARAMETERS = 239,SSL_R_UNABLE_TO_FIND_SSL_METHOD = 240,SSL_R_UNABLE_TO_LOAD_SSL2_MD5_ROUTINES = 241,SSL_R_UNABLE_TO_LOAD_SSL3_MD5_ROUTINES = 242,SSL_R_UNABLE_TO_LOAD_SSL3_SHA1_ROUTINES = 243,SSL_R_UNEXPECTED_MESSAGE = 244,SSL_R_UNEXPECTED_RECORD = 245,SSL_R_UNINITIALIZED = 276,SSL_R_UNKNOWN_ALERT_TYPE = 246,SSL_R_UNKNOWN_CERTIFICATE_TYPE = 247,SSL_R_UNKNOWN_CIPHER_RETURNED = 248,SSL_R_UNKNOWN_CIPHER_TYPE = 249,SSL_R_UNKNOWN_KEY_EXCHANGE_TYPE = 250,SSL_R_UNKNOWN_PKEY_TYPE = 251,SSL_R_UNKNOWN_PROTOCOL = 252,SSL_R_UNKNOWN_REMOTE_ERROR_TYPE = 253,SSL_R_UNKNOWN_SSL_VERSION = 254,SSL_R_UNKNOWN_STATE = 255,SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED = 323,SSL_R_UNSUPPORTED_CIPHER = 256,SSL_R_UNSUPPORTED_COMPRESSION_ALGORITHM = 257,SSL_R_UNSUPPORTED_ELLIPTIC_CURVE = 315,SSL_R_UNSUPPORTED_PROTOCOL = 258,SSL_R_UNSUPPORTED_SSL_VERSION = 259,SSL_R_UNSUPPORTED_STATUS_TYPE = 329,SSL_R_WRITE_BIO_NOT_SET = 260,SSL_R_WRONG_CIPHER_RETURNED = 261,SSL_R_WRONG_MESSAGE_TYPE = 262,SSL_R_WRONG_NUMBER_OF_KEY_BITS = 263,SSL_R_WRONG_SIGNATURE_LENGTH = 264,SSL_R_WRONG_SIGNATURE_SIZE = 265,SSL_R_WRONG_SSL_VERSION = 266,SSL_R_WRONG_VERSION_NUMBER = 267,SSL_R_X509_LIB = 268,SSL_R_X509_VERIFICATION_SETUP_PROBLEMS = 269,};
enum MACRO_SSL_ST {SSL_ST_CONNECT = 0x1000,SSL_ST_ACCEPT = 0x2000,SSL_ST_MASK = 0xFFF,SSL_ST_INIT = 0x3000,SSL_ST_BEFORE = 0x4000,SSL_ST_OK = 0x3,SSL_ST_RENEGOTIATE = 0x3004,SSL_CB_LOOP = 0x1,SSL_CB_EXIT = 0x2,SSL_CB_READ = 0x4,SSL_CB_WRITE = 0x8,SSL_CB_ALERT = 0x4000,SSL_CB_READ_ALERT = 0x4004,SSL_CB_WRITE_ALERT = 0x4008,SSL_CB_ACCEPT_LOOP = 0x2001,SSL_CB_ACCEPT_EXIT = 0x2002,SSL_CB_CONNECT_LOOP = 0x1001,SSL_CB_CONNECT_EXIT = 0x1002,SSL_CB_HANDSHAKE_START = 0x10,SSL_CB_HANDSHAKE_DONE = 0x20,SSL_ST_READ_HEADER = 0xF0,SSL_ST_READ_BODY = 0xF1,SSL_ST_READ_DONE = 0xF2,SSL_VERIFY_NONE = 0x0,SSL_VERIFY_PEER = 0x1,SSL_VERIFY_FAIL_IF_NO_PEER_CERT = 0x2,SSL_VERIFY_CLIENT_ONCE = 0x4,SSL_AD_REASON_OFFSET = 0x3E8,SSL_AD_CLOSE_NOTIFY = 0x0,SSL_AD_UNEXPECTED_MESSAGE = 0xA,SSL_AD_BAD_RECORD_MAC = 0x14,SSL_AD_DECRYPTION_FAILED = 0x15,SSL_AD_RECORD_OVERFLOW = 0x16,SSL_AD_DECOMPRESSION_FAILURE = 0x1E,SSL_AD_HANDSHAKE_FAILURE = 0x28,SSL_AD_NO_CERTIFICATE = 0x29,SSL_AD_BAD_CERTIFICATE = 0x2A,SSL_AD_UNSUPPORTED_CERTIFICATE = 0x2B,SSL_AD_CERTIFICATE_REVOKED = 0x2C,SSL_AD_CERTIFICATE_EXPIRED = 0x2D,SSL_AD_CERTIFICATE_UNKNOWN = 0x2E,SSL_AD_ILLEGAL_PARAMETER = 0x2F,SSL_AD_UNKNOWN_CA = 0x30,SSL_AD_ACCESS_DENIED = 0x31,SSL_AD_DECODE_ERROR = 0x32,SSL_AD_DECRYPT_ERROR = 0x33,SSL_AD_EXPORT_RESTRICTION = 0x3C,SSL_AD_PROTOCOL_VERSION = 0x46,SSL_AD_INSUFFICIENT_SECURITY = 0x47,SSL_AD_INTERNAL_ERROR = 0x50,SSL_AD_USER_CANCELLED = 0x5A,SSL_AD_NO_RENEGOTIATION = 0x64,SSL_AD_UNSUPPORTED_EXTENSION = 0x6E,SSL_AD_CERTIFICATE_UNOBTAINABLE = 0x6F,SSL_AD_UNRECOGNIZED_NAME = 0x70,SSL_AD_BAD_CERTIFICATE_STATUS_RESPONSE = 0x71,SSL_ERROR_NONE = 0x0,SSL_ERROR_SSL = 0x1,SSL_ERROR_WANT_READ = 0x2,SSL_ERROR_WANT_WRITE = 0x3,SSL_ERROR_WANT_X509_LOOKUP = 0x4,SSL_ERROR_SYSCALL = 0x5,SSL_ERROR_ZERO_RETURN = 0x6,SSL_ERROR_WANT_CONNECT = 0x7,SSL_ERROR_WANT_ACCEPT = 0x8,SSL_CTRL_NEED_TMP_RSA = 0x1,SSL_CTRL_SET_TMP_RSA = 0x2,SSL_CTRL_SET_TMP_DH = 0x3,SSL_CTRL_SET_TMP_ECDH = 0x4,SSL_CTRL_SET_TMP_RSA_CB = 0x5,SSL_CTRL_SET_TMP_DH_CB = 0x6,SSL_CTRL_SET_TMP_ECDH_CB = 0x7,SSL_CTRL_GET_SESSION_REUSED = 0x8,SSL_CTRL_GET_CLIENT_CERT_REQUEST = 0x9,SSL_CTRL_GET_NUM_RENEGOTIATIONS = 0xA,SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS = 0xB,SSL_CTRL_GET_TOTAL_RENEGOTIATIONS = 0xC,SSL_CTRL_GET_FLAGS = 0xD,SSL_CTRL_EXTRA_CHAIN_CERT = 0xE,SSL_CTRL_SET_MSG_CALLBACK = 0xF,SSL_CTRL_SET_MSG_CALLBACK_ARG = 0x10,SSL_CTRL_SET_MTU = 0x11,SSL_CTRL_SESS_NUMBER = 0x14,SSL_CTRL_SESS_CONNECT = 0x15,SSL_CTRL_SESS_CONNECT_GOOD = 0x16,SSL_CTRL_SESS_CONNECT_RENEGOTIATE = 0x17,SSL_CTRL_SESS_ACCEPT = 0x18,SSL_CTRL_SESS_ACCEPT_GOOD = 0x19,SSL_CTRL_SESS_ACCEPT_RENEGOTIATE = 0x1A,SSL_CTRL_SESS_HIT = 0x1B,SSL_CTRL_SESS_CB_HIT = 0x1C,SSL_CTRL_SESS_MISSES = 0x1D,SSL_CTRL_SESS_TIMEOUTS = 0x1E,SSL_CTRL_SESS_CACHE_FULL = 0x1F,SSL_CTRL_OPTIONS = 0x20,SSL_CTRL_MODE = 0x21,SSL_CTRL_GET_READ_AHEAD = 0x28,SSL_CTRL_SET_READ_AHEAD = 0x29,SSL_CTRL_SET_SESS_CACHE_SIZE = 0x2A,SSL_CTRL_GET_SESS_CACHE_SIZE = 0x2B,SSL_CTRL_SET_SESS_CACHE_MODE = 0x2C,SSL_CTRL_GET_SESS_CACHE_MODE = 0x2D,SSL_CTRL_GET_MAX_CERT_LIST = 0x32,SSL_CTRL_SET_MAX_CERT_LIST = 0x33,SSL_CTRL_SET_TLSEXT_SERVERNAME_CB = 0x35,SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG = 0x36,SSL_CTRL_SET_TLSEXT_HOSTNAME = 0x37,SSL_CTRL_SET_TLSEXT_DEBUG_CB = 0x38,SSL_CTRL_SET_TLSEXT_DEBUG_ARG = 0x39,SSL_CTRL_GET_TLSEXT_TICKET_KEYS = 0x3A,SSL_CTRL_SET_TLSEXT_TICKET_KEYS = 0x3B,SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB = 0x3F,SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG = 0x40,SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE = 0x41,SSL_CTRL_GET_TLSEXT_STATUS_REQ_EXTS = 0x42,SSL_CTRL_SET_TLSEXT_STATUS_REQ_EXTS = 0x43,SSL_CTRL_GET_TLSEXT_STATUS_REQ_IDS = 0x44,SSL_CTRL_SET_TLSEXT_STATUS_REQ_IDS = 0x45,SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP = 0x46,SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP = 0x47,SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB = 0x48,};
enum MACRO_SSL_TLSEXT {SSL_TLSEXT_ERR_OK = 0,SSL_TLSEXT_ERR_ALERT_WARNING = 1,SSL_TLSEXT_ERR_ALERT_FATAL = 2,SSL_TLSEXT_ERR_NOACK = 3,};
enum MACRO_SS_NOFDREF {SS_NOFDREF = 0x1,SS_ISCONNECTED = 0x2,SS_ISCONNECTING = 0x4,SS_ISDISCONNECTING = 0x8,SS_CANTSENDMORE = 0x10,SS_CANTRCVMORE = 0x20,SS_RCVATMARK = 0x40,SS_PRIV = 0x80,SS_NBIO = 0x100,SS_ASYNC = 0x200,SS_ISCONFIRMING = 0x400,SS_INCOMP = 0x800,SS_COMP = 0x1000,SS_ISDISCONNECTED = 0x2000,SS_DRAINING = 0x4000,SS_DEFUNCT = 0x8000,};
enum MACRO_ST {ST_RDONLY = 0x1,ST_NOSUID = 0x2,};
enum MACRO_STABLE {STABLE_FLAGS_MALLOC = 0x1,STABLE_NO_MASK = 0x2,};
enum MACRO_STACK {STACK_INCR = 4,};
enum MACRO_STAT {STAT_SUCCESS = 0,STAT_ERROR = 1,STAT_TIMEOUT = 2,};
enum MACRO_STATE_MAX {I386_THREAD_STATE_MAX = 144,THREAD_STATE_MAX = 144,};
enum MACRO_STATS {NETSNMP_STAT_MAX_STATS = 57,MAX_STATS = 57,};
enum MACRO_STATUS {STATUS_MANDATORY = 23,STATUS_OPTIONAL = 24,STATUS_OBSOLETE = 25,STATUS_DEPRECATED = 39,STATUS_CURRENT = 57,};
enum MACRO_STAT_SNMPUNKNOWNSECURITYMODELS {STAT_SNMPUNKNOWNSECURITYMODELS = 0,STAT_SNMPINVALIDMSGS = 1,STAT_SNMPUNKNOWNPDUHANDLERS = 2,STAT_MPD_STATS_START = 0,STAT_MPD_STATS_END = 2,STAT_USMSTATSUNSUPPORTEDSECLEVELS = 3,STAT_USMSTATSNOTINTIMEWINDOWS = 4,STAT_USMSTATSUNKNOWNUSERNAMES = 5,STAT_USMSTATSUNKNOWNENGINEIDS = 6,STAT_USMSTATSWRONGDIGESTS = 7,STAT_USMSTATSDECRYPTIONERRORS = 8,STAT_USM_STATS_START = 3,STAT_USM_STATS_END = 8,STAT_SNMPINPKTS = 9,STAT_SNMPOUTPKTS = 10,STAT_SNMPINBADVERSIONS = 11,STAT_SNMPINBADCOMMUNITYNAMES = 12,STAT_SNMPINBADCOMMUNITYUSES = 13,STAT_SNMPINASNPARSEERRS = 14,STAT_SNMPINTOOBIGS = 16,STAT_SNMPINNOSUCHNAMES = 17,STAT_SNMPINBADVALUES = 18,STAT_SNMPINREADONLYS = 19,STAT_SNMPINGENERRS = 20,STAT_SNMPINTOTALREQVARS = 21,STAT_SNMPINTOTALSETVARS = 22,STAT_SNMPINGETREQUESTS = 23,STAT_SNMPINGETNEXTS = 24,STAT_SNMPINSETREQUESTS = 25,STAT_SNMPINGETRESPONSES = 26,STAT_SNMPINTRAPS = 27,STAT_SNMPOUTTOOBIGS = 28,STAT_SNMPOUTNOSUCHNAMES = 29,STAT_SNMPOUTBADVALUES = 30,STAT_SNMPOUTGENERRS = 32,STAT_SNMPOUTGETREQUESTS = 33,STAT_SNMPOUTGETNEXTS = 34,STAT_SNMPOUTSETREQUESTS = 35,STAT_SNMPOUTGETRESPONSES = 36,STAT_SNMPOUTTRAPS = 37,STAT_SNMPSILENTDROPS = 39,STAT_SNMPPROXYDROPS = 40,STAT_SNMP_STATS_START = 9,STAT_SNMP_STATS_END = 40,STAT_SNMPUNAVAILABLECONTEXTS = 41,STAT_SNMPUNKNOWNCONTEXTS = 42,STAT_TARGET_STATS_START = 41,STAT_TARGET_STATS_END = 42,STAT_TSM_SNMPTSMINVALIDCACHES = 43,STAT_TSM_SNMPTSMINADEQUATESECURITYLEVELS = 44,STAT_TSM_SNMPTSMUNKNOWNPREFIXES = 45,STAT_TSM_SNMPTSMINVALIDPREFIXES = 46,STAT_TSM_STATS_START = 43,STAT_TSM_STATS_END = 46,STAT_TLSTM_SNMPTLSTMSESSIONOPENS = 47,STAT_TLSTM_SNMPTLSTMSESSIONCLIENTCLOSES = 48,STAT_TLSTM_SNMPTLSTMSESSIONOPENERRORS = 49,STAT_TLSTM_SNMPTLSTMSESSIONACCEPTS = 50,STAT_TLSTM_SNMPTLSTMSESSIONSERVERCLOSES = 51,STAT_TLSTM_SNMPTLSTMSESSIONNOSESSIONS = 52,STAT_TLSTM_SNMPTLSTMSESSIONINVALIDCLIENTCERTIFICATES = 53,STAT_TLSTM_SNMPTLSTMSESSIONUNKNOWNSERVERCERTIFICATE = 54,STAT_TLSTM_SNMPTLSTMSESSIONINVALIDSERVERCERTIFICATES = 55,STAT_TLSTM_SNMPTLSTMSESSIONINVALIDCACHES = 56,STAT_TLSTM_STATS_START = 47,STAT_TLSTM_STATS_END = 56,};
enum MACRO_STDC {STDC_HEADERS = 1,};
enum MACRO_STORE {STORE_CTRL_SET_DIRECTORY = 0x1,STORE_CTRL_SET_FILE = 0x2,STORE_CTRL_SET_CONF_FILE = 0x3,STORE_CTRL_SET_CONF_SECTION = 0x4,STORE_F_MEM_DELETE = 0x86,STORE_F_MEM_GENERATE = 0x87,STORE_F_MEM_LIST_END = 0xA8,STORE_F_MEM_LIST_NEXT = 0x88,STORE_F_MEM_LIST_START = 0x89,STORE_F_MEM_MODIFY = 0xA9,STORE_F_MEM_STORE = 0x8A,STORE_F_STORE_ATTR_INFO_GET0_CSTR = 0x8B,STORE_F_STORE_ATTR_INFO_GET0_DN = 0x8C,STORE_F_STORE_ATTR_INFO_GET0_NUMBER = 0x8D,STORE_F_STORE_ATTR_INFO_GET0_SHA1STR = 0x8E,STORE_F_STORE_ATTR_INFO_MODIFY_CSTR = 0x8F,STORE_F_STORE_ATTR_INFO_MODIFY_DN = 0x90,STORE_F_STORE_ATTR_INFO_MODIFY_NUMBER = 0x91,STORE_F_STORE_ATTR_INFO_MODIFY_SHA1STR = 0x92,STORE_F_STORE_ATTR_INFO_SET_CSTR = 0x93,STORE_F_STORE_ATTR_INFO_SET_DN = 0x94,STORE_F_STORE_ATTR_INFO_SET_NUMBER = 0x95,STORE_F_STORE_ATTR_INFO_SET_SHA1STR = 0x96,STORE_F_STORE_CERTIFICATE = 0xAA,STORE_F_STORE_CTRL = 0xA1,STORE_F_STORE_DELETE_ARBITRARY = 0x9E,STORE_F_STORE_DELETE_CERTIFICATE = 0x66,STORE_F_STORE_DELETE_CRL = 0x67,STORE_F_STORE_DELETE_NUMBER = 0x68,STORE_F_STORE_DELETE_PRIVATE_KEY = 0x69,STORE_F_STORE_DELETE_PUBLIC_KEY = 0x6A,STORE_F_STORE_GENERATE_CRL = 0x6B,STORE_F_STORE_GENERATE_KEY = 0x6C,STORE_F_STORE_GET_ARBITRARY = 0x9F,STORE_F_STORE_GET_CERTIFICATE = 0x6D,STORE_F_STORE_GET_CRL = 0x6E,STORE_F_STORE_GET_NUMBER = 0x6F,STORE_F_STORE_GET_PRIVATE_KEY = 0x70,STORE_F_STORE_GET_PUBLIC_KEY = 0x71,STORE_F_STORE_LIST_CERTIFICATE_END = 0x72,STORE_F_STORE_LIST_CERTIFICATE_ENDP = 0x99,STORE_F_STORE_LIST_CERTIFICATE_NEXT = 0x73,STORE_F_STORE_LIST_CERTIFICATE_START = 0x74,STORE_F_STORE_LIST_CRL_END = 0x75,STORE_F_STORE_LIST_CRL_ENDP = 0x9A,STORE_F_STORE_LIST_CRL_NEXT = 0x76,STORE_F_STORE_LIST_CRL_START = 0x77,STORE_F_STORE_LIST_PRIVATE_KEY_END = 0x78,STORE_F_STORE_LIST_PRIVATE_KEY_ENDP = 0x9B,STORE_F_STORE_LIST_PRIVATE_KEY_NEXT = 0x79,STORE_F_STORE_LIST_PRIVATE_KEY_START = 0x7A,STORE_F_STORE_LIST_PUBLIC_KEY_END = 0x7B,STORE_F_STORE_LIST_PUBLIC_KEY_ENDP = 0x9C,STORE_F_STORE_LIST_PUBLIC_KEY_NEXT = 0x7C,STORE_F_STORE_LIST_PUBLIC_KEY_START = 0x7D,STORE_F_STORE_MODIFY_ARBITRARY = 0xA2,STORE_F_STORE_MODIFY_CERTIFICATE = 0xA3,STORE_F_STORE_MODIFY_CRL = 0xA4,STORE_F_STORE_MODIFY_NUMBER = 0xA5,STORE_F_STORE_MODIFY_PRIVATE_KEY = 0xA6,STORE_F_STORE_MODIFY_PUBLIC_KEY = 0xA7,STORE_F_STORE_NEW_ENGINE = 0x85,STORE_F_STORE_NEW_METHOD = 0x84,STORE_F_STORE_PARSE_ATTRS_END = 0x97,STORE_F_STORE_PARSE_ATTRS_ENDP = 0xAC,STORE_F_STORE_PARSE_ATTRS_NEXT = 0x98,STORE_F_STORE_PARSE_ATTRS_START = 0xAB,STORE_F_STORE_REVOKE_CERTIFICATE = 0x81,STORE_F_STORE_REVOKE_PRIVATE_KEY = 0x82,STORE_F_STORE_REVOKE_PUBLIC_KEY = 0x83,STORE_F_STORE_STORE_ARBITRARY = 0x9D,STORE_F_STORE_STORE_CERTIFICATE = 0x64,STORE_F_STORE_STORE_CRL = 0x65,STORE_F_STORE_STORE_NUMBER = 0x7E,STORE_F_STORE_STORE_PRIVATE_KEY = 0x7F,STORE_F_STORE_STORE_PUBLIC_KEY = 0x80,STORE_R_ALREADY_HAS_A_VALUE = 0x7F,STORE_R_FAILED_DELETING_ARBITRARY = 0x84,STORE_R_FAILED_DELETING_CERTIFICATE = 0x64,STORE_R_FAILED_DELETING_KEY = 0x65,STORE_R_FAILED_DELETING_NUMBER = 0x66,STORE_R_FAILED_GENERATING_CRL = 0x67,STORE_R_FAILED_GENERATING_KEY = 0x68,STORE_R_FAILED_GETTING_ARBITRARY = 0x85,STORE_R_FAILED_GETTING_CERTIFICATE = 0x69,STORE_R_FAILED_GETTING_KEY = 0x6A,STORE_R_FAILED_GETTING_NUMBER = 0x6B,STORE_R_FAILED_LISTING_CERTIFICATES = 0x6C,STORE_R_FAILED_LISTING_KEYS = 0x6D,STORE_R_FAILED_MODIFYING_ARBITRARY = 0x8A,STORE_R_FAILED_MODIFYING_CERTIFICATE = 0x8B,STORE_R_FAILED_MODIFYING_CRL = 0x8C,STORE_R_FAILED_MODIFYING_NUMBER = 0x8D,STORE_R_FAILED_MODIFYING_PRIVATE_KEY = 0x8E,STORE_R_FAILED_MODIFYING_PUBLIC_KEY = 0x8F,STORE_R_FAILED_REVOKING_CERTIFICATE = 0x6E,STORE_R_FAILED_REVOKING_KEY = 0x6F,STORE_R_FAILED_STORING_ARBITRARY = 0x86,STORE_R_FAILED_STORING_CERTIFICATE = 0x70,STORE_R_FAILED_STORING_KEY = 0x71,STORE_R_FAILED_STORING_NUMBER = 0x72,STORE_R_NOT_IMPLEMENTED = 0x80,STORE_R_NO_CONTROL_FUNCTION = 0x90,STORE_R_NO_DELETE_ARBITRARY_FUNCTION = 0x87,STORE_R_NO_DELETE_NUMBER_FUNCTION = 0x73,STORE_R_NO_DELETE_OBJECT_FUNCTION = 0x74,STORE_R_NO_GENERATE_CRL_FUNCTION = 0x75,STORE_R_NO_GENERATE_OBJECT_FUNCTION = 0x76,STORE_R_NO_GET_OBJECT_ARBITRARY_FUNCTION = 0x88,STORE_R_NO_GET_OBJECT_FUNCTION = 0x77,STORE_R_NO_GET_OBJECT_NUMBER_FUNCTION = 0x78,STORE_R_NO_LIST_OBJECT_ENDP_FUNCTION = 0x83,STORE_R_NO_LIST_OBJECT_END_FUNCTION = 0x79,STORE_R_NO_LIST_OBJECT_NEXT_FUNCTION = 0x7A,STORE_R_NO_LIST_OBJECT_START_FUNCTION = 0x7B,STORE_R_NO_MODIFY_OBJECT_FUNCTION = 0x91,STORE_R_NO_REVOKE_OBJECT_FUNCTION = 0x7C,STORE_R_NO_STORE = 0x81,STORE_R_NO_STORE_OBJECT_ARBITRARY_FUNCTION = 0x89,STORE_R_NO_STORE_OBJECT_FUNCTION = 0x7D,STORE_R_NO_STORE_OBJECT_NUMBER_FUNCTION = 0x7E,STORE_R_NO_VALUE = 0x82,};
enum MACRO_STR {AM_STR = 5,PM_STR = 6,};
enum MACRO_STRCOUNT {STRCOUNT = 414,};
enum MACRO_STRING {STRING_LENGTH = 128,};
enum MACRO_STRINGMAX {STRINGMAX = 1024,};
enum MACRO_STRU {STRU_F = 1,STRU_R = 2,STRU_P = 3,};
enum MACRO_ST_NONE {ST_NONE = 0,ST_OTHER = 1,ST_VOLATILE = 2,ST_NONVOLATILE = 3,ST_PERMANENT = 4,ST_READONLY = 5,};
enum MACRO_SUBCMDMASK {SUBCMDMASK = 0xFF,};
enum MACRO_SUBCMDSHIFT {SUBCMDSHIFT = 8,};
enum MACRO_SUBTREE {SUBTREE_ATTACHED = 0x2,};
enum MACRO_SUPERPAGE {SUPERPAGE_NONE = 0,SUPERPAGE_SIZE_ANY = 1,};
enum MACRO_SUPERPAGE_SIZE {SUPERPAGE_SIZE_2MB = 2,};
enum MACRO_SUPPLY {SUPPLY_INTERVAL = 30,};
enum MACRO_SUPPORT {SUPPORT_ASIAN_ENCODINGS = 1,SUPPORT_UTF16_ENCODINGS = 1,SUPPORT_ACCESSIBILITY_CHECKS = 1,};
enum MACRO_SUSP {SUSP = 237,};
enum MACRO_SV {SV_ONSTACK = 1,SV_INTERRUPT = 2,SV_RESETHAND = 4,SV_NODEFER = 16,SV_NOCLDSTOP = 8,SV_SIGINFO = 64,};
enum MACRO_SWITCH {SWITCH_OPTION_NONE = 0,SWITCH_OPTION_DEPRESS = 1,SWITCH_OPTION_WAIT = 2,};
enum MACRO_SYMTYPE {SYMTYPE = 50,};
enum MACRO_SYN {SYN_TERMINFO = 0,SYN_TERMCAP = 1,};
enum MACRO_SYNC {SYNC_POLICY_FIFO = 0x0,SYNC_POLICY_FIXED_PRIORITY = 0x1,SYNC_POLICY_REVERSED = 0x2,SYNC_POLICY_ORDER_MASK = 0x3,SYNC_POLICY_LIFO = 0x2,SYNC_POLICY_MAX = 0x7,};
enum MACRO_SYNCH {SYNCH = 242,};
enum MACRO_SYS {SYS_syscall = 0,SYS_exit = 1,SYS_fork = 2,SYS_read = 3,SYS_write = 4,SYS_open = 5,SYS_close = 6,SYS_wait4 = 7,SYS_link = 9,SYS_unlink = 10,SYS_chdir = 12,SYS_fchdir = 13,SYS_mknod = 14,SYS_chmod = 15,SYS_chown = 16,SYS_getfsstat = 18,SYS_getpid = 20,SYS_setuid = 23,SYS_getuid = 24,SYS_geteuid = 25,SYS_ptrace = 26,SYS_recvmsg = 27,SYS_sendmsg = 28,SYS_recvfrom = 29,SYS_accept = 30,SYS_getpeername = 31,SYS_getsockname = 32,SYS_access = 33,SYS_chflags = 34,SYS_fchflags = 35,SYS_sync = 36,SYS_kill = 37,SYS_getppid = 39,SYS_dup = 41,SYS_pipe = 42,SYS_getegid = 43,SYS_profil = 44,SYS_sigaction = 46,SYS_getgid = 47,SYS_sigprocmask = 48,SYS_getlogin = 49,SYS_setlogin = 50,SYS_acct = 51,SYS_sigpending = 52,SYS_sigaltstack = 53,SYS_ioctl = 54,SYS_reboot = 55,SYS_revoke = 56,SYS_symlink = 57,SYS_readlink = 58,SYS_execve = 59,SYS_umask = 60,SYS_chroot = 61,SYS_msync = 65,SYS_vfork = 66,SYS_munmap = 73,SYS_mprotect = 74,SYS_madvise = 75,SYS_mincore = 78,SYS_getgroups = 79,SYS_setgroups = 80,SYS_getpgrp = 81,SYS_setpgid = 82,SYS_setitimer = 83,SYS_swapon = 85,SYS_getitimer = 86,SYS_getdtablesize = 89,SYS_dup2 = 90,SYS_fcntl = 92,SYS_select = 93,SYS_fsync = 95,SYS_setpriority = 96,SYS_socket = 97,SYS_connect = 98,SYS_getpriority = 100,SYS_bind = 104,SYS_setsockopt = 105,SYS_listen = 106,SYS_sigsuspend = 111,SYS_gettimeofday = 116,SYS_getrusage = 117,SYS_getsockopt = 118,SYS_readv = 120,SYS_writev = 121,SYS_settimeofday = 122,SYS_fchown = 123,SYS_fchmod = 124,SYS_setreuid = 126,SYS_setregid = 127,SYS_rename = 128,SYS_flock = 131,SYS_mkfifo = 132,SYS_sendto = 133,SYS_shutdown = 134,SYS_socketpair = 135,SYS_mkdir = 136,SYS_rmdir = 137,SYS_utimes = 138,SYS_futimes = 139,SYS_adjtime = 140,SYS_gethostuuid = 142,SYS_setsid = 147,SYS_getpgid = 151,SYS_setprivexec = 152,SYS_pread = 153,SYS_pwrite = 154,SYS_nfssvc = 155,SYS_statfs = 157,SYS_fstatfs = 158,SYS_unmount = 159,SYS_getfh = 161,SYS_quotactl = 165,SYS_mount = 167,SYS_csops = 169,SYS_waitid = 173,SYS_add_profil = 176,SYS_kdebug_trace = 180,SYS_setgid = 181,SYS_setegid = 182,SYS_seteuid = 183,SYS_sigreturn = 184,SYS_chud = 185,SYS_fdatasync = 187,SYS_stat = 188,SYS_fstat = 189,SYS_lstat = 190,SYS_pathconf = 191,SYS_fpathconf = 192,SYS_getrlimit = 194,SYS_setrlimit = 195,SYS_getdirentries = 196,SYS_mmap = 197,SYS_lseek = 199,SYS_truncate = 200,SYS_ftruncate = 201,SYS___sysctl = 202,SYS_mlock = 203,SYS_munlock = 204,SYS_undelete = 205,SYS_ATsocket = 206,SYS_ATgetmsg = 207,SYS_ATputmsg = 208,SYS_ATPsndreq = 209,SYS_ATPsndrsp = 210,SYS_ATPgetreq = 211,SYS_ATPgetrsp = 212,SYS_mkcomplex = 216,SYS_statv = 217,SYS_lstatv = 218,SYS_fstatv = 219,SYS_getattrlist = 220,SYS_setattrlist = 221,SYS_getdirentriesattr = 222,SYS_exchangedata = 223,SYS_searchfs = 225,SYS_delete = 226,SYS_copyfile = 227,SYS_fgetattrlist = 228,SYS_fsetattrlist = 229,SYS_poll = 230,SYS_watchevent = 231,SYS_waitevent = 232,SYS_modwatch = 233,SYS_getxattr = 234,SYS_fgetxattr = 235,SYS_setxattr = 236,SYS_fsetxattr = 237,SYS_removexattr = 238,SYS_fremovexattr = 239,SYS_listxattr = 240,SYS_flistxattr = 241,SYS_fsctl = 242,SYS_initgroups = 243,SYS_posix_spawn = 244,SYS_ffsctl = 245,SYS_nfsclnt = 247,SYS_fhopen = 248,SYS_minherit = 250,SYS_semsys = 251,SYS_msgsys = 252,SYS_shmsys = 253,SYS_semctl = 254,SYS_semget = 255,SYS_semop = 256,SYS_msgctl = 258,SYS_msgget = 259,SYS_msgsnd = 260,SYS_msgrcv = 261,SYS_shmat = 262,SYS_shmctl = 263,SYS_shmdt = 264,SYS_shmget = 265,SYS_shm_open = 266,SYS_shm_unlink = 267,SYS_sem_open = 268,SYS_sem_close = 269,SYS_sem_unlink = 270,SYS_sem_wait = 271,SYS_sem_trywait = 272,SYS_sem_post = 273,SYS_sem_getvalue = 274,SYS_sem_init = 275,SYS_sem_destroy = 276,SYS_open_extended = 277,SYS_umask_extended = 278,SYS_stat_extended = 279,SYS_lstat_extended = 280,SYS_fstat_extended = 281,SYS_chmod_extended = 282,SYS_fchmod_extended = 283,SYS_access_extended = 284,SYS_settid = 285,SYS_gettid = 286,SYS_setsgroups = 287,SYS_getsgroups = 288,SYS_setwgroups = 289,SYS_getwgroups = 290,SYS_mkfifo_extended = 291,SYS_mkdir_extended = 292,SYS_identitysvc = 293,SYS_shared_region_check_np = 294,SYS_vm_pressure_monitor = 296,SYS_psynch_rw_longrdlock = 297,SYS_psynch_rw_yieldwrlock = 298,SYS_psynch_rw_downgrade = 299,SYS_psynch_rw_upgrade = 300,SYS_psynch_mutexwait = 301,SYS_psynch_mutexdrop = 302,SYS_psynch_cvbroad = 303,SYS_psynch_cvsignal = 304,SYS_psynch_cvwait = 305,SYS_psynch_rw_rdlock = 306,SYS_psynch_rw_wrlock = 307,SYS_psynch_rw_unlock = 308,SYS_psynch_rw_unlock2 = 309,SYS_getsid = 310,SYS_settid_with_pid = 311,SYS_psynch_cvclrprepost = 312,SYS_aio_fsync = 313,SYS_aio_return = 314,SYS_aio_suspend = 315,SYS_aio_cancel = 316,SYS_aio_error = 317,SYS_aio_read = 318,SYS_aio_write = 319,SYS_lio_listio = 320,SYS_iopolicysys = 322,SYS_process_policy = 323,SYS_mlockall = 324,SYS_munlockall = 325,SYS_issetugid = 327,SYS___pthread_kill = 328,SYS___pthread_sigmask = 329,SYS___sigwait = 330,SYS___disable_threadsignal = 331,SYS___pthread_markcancel = 332,SYS___pthread_canceled = 333,SYS___semwait_signal = 334,SYS_proc_info = 336,SYS_sendfile = 337,SYS_stat64 = 338,SYS_fstat64 = 339,SYS_lstat64 = 340,SYS_stat64_extended = 341,SYS_lstat64_extended = 342,SYS_fstat64_extended = 343,SYS_getdirentries64 = 344,SYS_statfs64 = 345,SYS_fstatfs64 = 346,SYS_getfsstat64 = 347,SYS___pthread_chdir = 348,SYS___pthread_fchdir = 349,SYS_audit = 350,SYS_auditon = 351,SYS_getauid = 353,SYS_setauid = 354,SYS_getaudit = 355,SYS_setaudit = 356,SYS_getaudit_addr = 357,SYS_setaudit_addr = 358,SYS_auditctl = 359,SYS_bsdthread_create = 360,SYS_bsdthread_terminate = 361,SYS_kqueue = 362,SYS_kevent = 363,SYS_lchown = 364,SYS_stack_snapshot = 365,SYS_bsdthread_register = 366,SYS_workq_open = 367,SYS_workq_kernreturn = 368,SYS_kevent64 = 369,SYS___old_semwait_signal = 370,SYS___old_semwait_signal_nocancel = 371,SYS_thread_selfid = 372,SYS___mac_execve = 380,SYS___mac_syscall = 381,SYS___mac_get_file = 382,SYS___mac_set_file = 383,SYS___mac_get_link = 384,SYS___mac_set_link = 385,SYS___mac_get_proc = 386,SYS___mac_set_proc = 387,SYS___mac_get_fd = 388,SYS___mac_set_fd = 389,SYS___mac_get_pid = 390,SYS___mac_get_lcid = 391,SYS___mac_get_lctx = 392,SYS___mac_set_lctx = 393,SYS_setlcid = 394,SYS_getlcid = 395,SYS_read_nocancel = 396,SYS_write_nocancel = 397,SYS_open_nocancel = 398,SYS_close_nocancel = 399,SYS_wait4_nocancel = 400,SYS_recvmsg_nocancel = 401,SYS_sendmsg_nocancel = 402,SYS_recvfrom_nocancel = 403,SYS_accept_nocancel = 404,SYS_msync_nocancel = 405,SYS_fcntl_nocancel = 406,SYS_select_nocancel = 407,SYS_fsync_nocancel = 408,SYS_connect_nocancel = 409,SYS_sigsuspend_nocancel = 410,SYS_readv_nocancel = 411,SYS_writev_nocancel = 412,SYS_sendto_nocancel = 413,SYS_pread_nocancel = 414,SYS_pwrite_nocancel = 415,SYS_waitid_nocancel = 416,SYS_poll_nocancel = 417,SYS_msgsnd_nocancel = 418,SYS_msgrcv_nocancel = 419,SYS_sem_wait_nocancel = 420,SYS_aio_suspend_nocancel = 421,SYS___sigwait_nocancel = 422,SYS___semwait_signal_nocancel = 423,SYS___mac_mount = 424,SYS___mac_get_mount = 425,SYS___mac_getfsstat = 426,SYS_fsgetpath = 427,SYS_audit_session_self = 428,SYS_audit_session_join = 429,SYS_fileport_makeport = 430,SYS_fileport_makefd = 431,SYS_audit_session_port = 432,SYS_pid_suspend = 433,SYS_pid_resume = 434,SYS_pid_hibernate = 435,SYS_pid_shutdown_sockets = 436,SYS_shared_region_map_and_slide_np = 438,SYS_MAXSYSCALL = 439,};
enum MACRO_SYSPROTO {SYSPROTO_EVENT = 1,SYSPROTO_CONTROL = 2,};
enum MACRO_SYS_F {SYS_F_FOPEN = 1,SYS_F_CONNECT = 2,SYS_F_GETSERVBYNAME = 3,SYS_F_SOCKET = 4,SYS_F_IOCTLSOCKET = 5,SYS_F_BIND = 6,SYS_F_LISTEN = 7,SYS_F_ACCEPT = 8,SYS_F_WSASTARTUP = 9,SYS_F_OPENDIR = 10,SYS_F_FREAD = 11,};
enum MACRO_SYS_IOCTL {SYS_IOCTL_H_HAS_SIOCGIFADDR = 1,};
enum MACRO_SYS_ORTABLE : __int64 {SYS_ORTABLE_REGISTERED_OK = 0,SYS_ORTABLE_REGISTRATION_FAILED = -1,SYS_ORTABLE_UNREGISTERED_OK = 0,SYS_ORTABLE_NO_SUCH_REGISTRATION = -1,};
enum MACRO_SZOMB {SZOMB = 5,};
enum MACRO_S_ATTR : __int64 {S_ATTR_PURE_INSTRUCTIONS = 0x80000000,S_ATTR_NO_TOC = 0x40000000,S_ATTR_STRIP_STATIC_SYMS = 0x20000000,S_ATTR_NO_DEAD_STRIP = 0x10000000,S_ATTR_LIVE_SUPPORT = 0x8000000,S_ATTR_SELF_MODIFYING_CODE = 0x4000000,S_ATTR_DEBUG = 0x2000000,};
enum MACRO_S_ATTR_SOME {S_ATTR_SOME_INSTRUCTIONS = 0x400,S_ATTR_EXT_RELOC = 0x200,S_ATTR_LOC_RELOC = 0x100,};
enum MACRO_S_BLKSIZE {S_BLKSIZE = 512,};
enum MACRO_S_REGULAR {S_REGULAR = 0x0,S_ZEROFILL = 0x1,S_CSTRING_LITERALS = 0x2,S_4BYTE_LITERALS = 0x3,S_8BYTE_LITERALS = 0x4,S_LITERAL_POINTERS = 0x5,S_NON_LAZY_SYMBOL_POINTERS = 0x6,S_LAZY_SYMBOL_POINTERS = 0x7,S_SYMBOL_STUBS = 0x8,S_MOD_INIT_FUNC_POINTERS = 0x9,S_MOD_TERM_FUNC_POINTERS = 0xA,S_COALESCED = 0xB,S_GB_ZEROFILL = 0xC,S_INTERPOSING = 0xD,S_16BYTE_LITERALS = 0xE,S_DTRACE_DOF = 0xF,S_LAZY_DYLIB_SYMBOL_POINTERS = 0x10,S_THREAD_LOCAL_REGULAR = 0x11,S_THREAD_LOCAL_ZEROFILL = 0x12,S_THREAD_LOCAL_VARIABLES = 0x13,S_THREAD_LOCAL_VARIABLE_POINTERS = 0x14,S_THREAD_LOCAL_INIT_FUNCTION_POINTERS = 0x15,};
enum MACRO_T {T_FMT = 3,T_FMT_AMPM = 4,};
enum MACRO_TAB0 {TAB0 = 0x0,TAB1 = 0x400,TAB2 = 0x800,};
enum MACRO_TAB3 {TAB3 = 0x4,};
enum MACRO_TABLE {TABLE_CONTAINER_KEY_NETSNMP_INDEX = 1,TABLE_CONTAINER_KEY_VARBIND_INDEX = 2,TABLE_CONTAINER_KEY_VARBIND_RAW = 3,};
enum MACRO_TALK {TALK_VERSION = 1,};
enum MACRO_TANDEM {TANDEM = 0x1,CBREAK = 0x2,LCASE = 0x4,ECHO = 0x8,CRMOD = 0x10,RAW = 0x20,ODDP = 0x40,EVENP = 0x80,};
enum MACRO_TARGET {TARGET_OS_MAC = 1,TARGET_OS_WIN32 = 0,TARGET_OS_UNIX = 0,TARGET_OS_EMBEDDED = 0,TARGET_OS_IPHONE = 0,TARGET_IPHONE_SIMULATOR = 0,TARGET_CPU_PPC = 0,TARGET_CPU_PPC64 = 0,TARGET_CPU_68K = 0,TARGET_CPU_X86 = 0,TARGET_CPU_X86_64 = 1,TARGET_CPU_ARM = 0,TARGET_CPU_MIPS = 0,TARGET_CPU_SPARC = 0,TARGET_CPU_ALPHA = 0,TARGET_RT_MAC_CFM = 0,TARGET_RT_MAC_MACHO = 1,TARGET_RT_LITTLE_ENDIAN = 1,TARGET_RT_BIG_ENDIAN = 0,TARGET_RT_64_BIT = 1,};
enum MACRO_TASK {TASK_INFO_MAX = 1024,TASK_BASIC_INFO_32 = 4,TASK_BASIC2_INFO_32 = 6,TASK_BASIC_INFO_64 = 5,TASK_BASIC_INFO = 5,TASK_EVENTS_INFO = 2,TASK_THREAD_TIMES_INFO = 3,TASK_ABSOLUTETIME_INFO = 1,TASK_KERNELMEMORY_INFO = 7,TASK_SECURITY_TOKEN = 13,TASK_AUDIT_TOKEN = 15,TASK_AFFINITY_TAG_INFO = 16,TASK_DYLD_INFO = 17,TASK_DYLD_ALL_IMAGE_INFO_32 = 0,TASK_DYLD_ALL_IMAGE_INFO_64 = 1,TASK_EXTMOD_INFO = 18,TASK_SCHED_TIMESHARE_INFO = 10,TASK_SCHED_RR_INFO = 11,TASK_SCHED_FIFO_INFO = 12,TASK_SCHED_INFO = 14,TASK_CATEGORY_POLICY = 1,TASK_KERNEL_PORT = 1,TASK_HOST_PORT = 2,TASK_NAME_PORT = 3,TASK_BOOTSTRAP_PORT = 4,TASK_WIRED_LEDGER_PORT = 5,TASK_PAGED_LEDGER_PORT = 6,TASK_SEATBELT_PORT = 7,TASK_GSSD_PORT = 8,TASK_ACCESS_PORT = 9,};
enum MACRO_TASK_NULL {TASK_NULL = 0,TASK_NAME_NULL = 0,};
enum MACRO_TASK_PORT {TASK_PORT_REGISTER_MAX = 3,};
enum MACRO_TCIFLUSH {TCIFLUSH = 1,TCOFLUSH = 2,};
enum MACRO_TCIOFF {TCIOFF = 3,TCION = 4,};
enum MACRO_TCIOFLUSH {TCIOFLUSH = 3,};
enum MACRO_TCOOFF {TCOOFF = 1,TCOON = 2,};
enum MACRO_TCP {TCP_MAX_SACK = 3,TCP_MSS = 512,TCP_MINMSS = 216,TCP_MINMSSOVERLOAD = 1000,};
enum MACRO_TCP6 {TCP6_MSS = 1024,};
enum MACRO_TCP6S {TCP6S_CLOSED = 0,TCP6S_LISTEN = 1,TCP6S_SYN_SENT = 2,TCP6S_SYN_RECEIVED = 3,TCP6S_ESTABLISHED = 4,TCP6S_CLOSE_WAIT = 5,TCP6S_FIN_WAIT_1 = 6,TCP6S_CLOSING = 7,TCP6S_LAST_ACK = 8,TCP6S_FIN_WAIT_2 = 9,TCP6S_TIME_WAIT = 10,};
enum MACRO_TCP6_NSTATES {TCP6_NSTATES = 11,};
enum MACRO_TCPCTL {TCPCTL_DO_RFC1323 = 1,TCPCTL_DO_RFC1644 = 2,TCPCTL_MSSDFLT = 3,TCPCTL_STATS = 4,TCPCTL_RTTDFLT = 5,TCPCTL_KEEPIDLE = 6,TCPCTL_KEEPINTVL = 7,TCPCTL_SENDSPACE = 8,TCPCTL_RECVSPACE = 9,TCPCTL_KEEPINIT = 10,TCPCTL_PCBLIST = 11,TCPCTL_DELACKTIME = 12,TCPCTL_V6MSSDFLT = 13,TCPCTL_MAXID = 14,};
enum MACRO_TCPOLEN {TCPOLEN_MAXSEG = 4,};
enum MACRO_TCPOLEN_CC {TCPOLEN_CC = 6,TCPOLEN_CC_APPA = 8,};
enum MACRO_TCPOLEN_TSTAMP {TCPOLEN_TSTAMP_APPA = 12,};
enum MACRO_TCPOOB {TCPOOB_HAVEDATA = 0x1,TCPOOB_HADDATA = 0x2,};
enum MACRO_TCPOPT {TCPOPT_EOL = 0,TCPOPT_NOP = 1,TCPOPT_MAXSEG = 2,};
enum MACRO_TCPOPT_CC {TCPOPT_CC = 11,TCPOPT_CCNEW = 12,TCPOPT_CCECHO = 13,};
enum MACRO_TCPOPT_SACK {TCPOPT_SACK_PERMIT_HDR = 16843778,TCPOPT_SACK_HDR = 16844032,};
enum MACRO_TCPOPT_TSTAMP {TCPOPT_TSTAMP_HDR = 16844810,};
enum MACRO_TCPS {TCPS_CLOSED = 0,TCPS_LISTEN = 1,TCPS_SYN_SENT = 2,TCPS_SYN_RECEIVED = 3,TCPS_ESTABLISHED = 4,TCPS_CLOSE_WAIT = 5,TCPS_FIN_WAIT_1 = 6,TCPS_CLOSING = 7,TCPS_LAST_ACK = 8,TCPS_FIN_WAIT_2 = 9,TCPS_TIME_WAIT = 10,};
enum MACRO_TCPT {TCPT_NTIMERS = 5,TCPT_NTIMERS_EXT = 4,TCPT_REXMT = 0,TCPT_PERSIST = 1,TCPT_KEEP = 2,TCPT_2MSL = 3,TCPT_DELACK = 4,TCPT_MAX = 4,TCPT_NONE = 5,};
enum MACRO_TCPTV {TCPTV_MIN = 2,TCPTV_REXMTMAX = 128,};
enum MACRO_TCP_MAX {TCP_MAX_WINSHIFT = 14,TCP_MAXHLEN = 60,TCP_NODELAY = 1,TCP_MAXSEG = 2,TCP_NOPUSH = 4,TCP_NOOPT = 8,TCP_KEEPALIVE = 16,TCP_CONNECTIONTIMEOUT = 32,};
enum MACRO_TCP_MAXWIN {TCP_MAXWIN = 65535,};
enum MACRO_TCP_NSTATES {TCP_NSTATES = 11,};
enum MACRO_TCP_RETRANSHZ {TCP_RETRANSHZ = 1000,TCP_TIMERHZ = 100,TCP_FASTTIMER_QUANTUM = 100,TCP_SLOWTIMER_QUANTUM = 500,TCP_RETRANSHZ_TO_USEC = 1000,};
enum MACRO_TCP_RXT {TCP_RXT_CONNDROPTIME = 0x80,TCP_RXT_FINDROP = 0x100,};
enum MACRO_TCSANOW {TCSANOW = 0,TCSADRAIN = 1,TCSAFLUSH = 2,TCSASOFT = 16,};
enum MACRO_TDATA {TDATA_FLAG_NO_STORE_INDEXES = 0x1,TDATA_FLAG_NO_CONTAINER = 0x2,};
enum MACRO_TELCMD {TELCMD_FIRST = 236,TELCMD_LAST = 255,};
enum MACRO_TELOPT {TELOPT_BINARY = 0,TELOPT_ECHO = 1,TELOPT_RCP = 2,TELOPT_SGA = 3,TELOPT_NAMS = 4,TELOPT_STATUS = 5,TELOPT_TM = 6,TELOPT_RCTE = 7,TELOPT_NAOL = 8,TELOPT_NAOP = 9,TELOPT_NAOCRD = 10,TELOPT_NAOHTS = 11,TELOPT_NAOHTD = 12,TELOPT_NAOFFD = 13,TELOPT_NAOVTS = 14,TELOPT_NAOVTD = 15,TELOPT_NAOLFD = 16,TELOPT_XASCII = 17,TELOPT_LOGOUT = 18,TELOPT_BM = 19,TELOPT_DET = 20,TELOPT_SUPDUP = 21,TELOPT_SUPDUPOUTPUT = 22,TELOPT_SNDLOC = 23,TELOPT_TTYPE = 24,TELOPT_EOR = 25,TELOPT_TUID = 26,TELOPT_OUTMRK = 27,TELOPT_TTYLOC = 28,TELOPT_3270REGIME = 29,TELOPT_X3PAD = 30,TELOPT_NAWS = 31,TELOPT_TSPEED = 32,TELOPT_LFLOW = 33,TELOPT_LINEMODE = 34,TELOPT_XDISPLOC = 35,TELOPT_OLD_ENVIRON = 36,TELOPT_AUTHENTICATION = 37,TELOPT_ENCRYPT = 38,TELOPT_NEW_ENVIRON = 39,TELOPT_EXOPL = 255,};
enum MACRO_TELQUAL {TELQUAL_IS = 0,TELQUAL_SEND = 1,TELQUAL_INFO = 2,TELQUAL_REPLY = 2,TELQUAL_NAME = 3,};
enum MACRO_TERMIOS {TERMIOS = 1,NAMESIZE = 256,};
enum MACRO_TF {TF_ACKNOW = 0x1,TF_DELACK = 0x2,TF_NODELAY = 0x4,TF_NOOPT = 0x8,TF_SENTFIN = 0x10,TF_REQ_SCALE = 0x20,TF_RCVD_SCALE = 0x40,TF_REQ_TSTMP = 0x80,TF_RCVD_TSTMP = 0x100,TF_SACK_PERMIT = 0x200,TF_NEEDSYN = 0x400,TF_NEEDFIN = 0x800,TF_NOPUSH = 0x1000,TF_REQ_CC = 0x2000,TF_RCVD_CC = 0x4000,TF_SENDCCNEW = 0x8000,TF_MORETOCOME = 0x10000,TF_LQ_OVERFLOW = 0x20000,TF_RXWIN0SENT = 0x40000,TF_SLOWLINK = 0x80000,};
enum MACRO_TGEXEC {TGEXEC = 0x8,};
enum MACRO_TGREAD {TGREAD = 0x20,};
enum MACRO_TGWRITE {TGWRITE = 0x10,};
enum MACRO_TH {TH_USAGE_SCALE = 1000,TH_STATE_RUNNING = 1,TH_STATE_STOPPED = 2,TH_STATE_WAITING = 3,TH_STATE_UNINTERRUPTIBLE = 4,TH_STATE_HALTED = 5,TH_FLAGS_SWAPPED = 1,TH_FLAGS_IDLE = 2,};
enum MACRO_THOUSEP {THOUSEP = 51,};
enum MACRO_THREAD {THREAD_STATE_NONE = 13,};
enum MACRO_THREAD_INFO {THREAD_INFO_MAX = 1024,THREAD_BASIC_INFO = 3,THREAD_IDENTIFIER_INFO = 4,};
enum MACRO_THREAD_MACHINE {THREAD_MACHINE_STATE_MAX = 144,};
enum MACRO_THREAD_NULL {THREAD_NULL = 0,TID_NULL = 0,THR_ACT_NULL = 0,IPC_SPACE_NULL = 0,HOST_NULL = 0,HOST_PRIV_NULL = 0,HOST_SECURITY_NULL = 0,PROCESSOR_SET_NULL = 0,PROCESSOR_NULL = 0,SEMAPHORE_NULL = 0,LOCK_SET_NULL = 0,LEDGER_NULL = 0,ALARM_NULL = 0,CLOCK_NULL = 0,UND_SERVER_NULL = 0,};
enum MACRO_THREAD_SCHED {THREAD_SCHED_TIMESHARE_INFO = 10,THREAD_SCHED_RR_INFO = 11,THREAD_SCHED_FIFO_INFO = 12,THREAD_STANDARD_POLICY = 1,THREAD_STANDARD_POLICY_COUNT = 0,THREAD_EXTENDED_POLICY = 1,THREAD_TIME_CONSTRAINT_POLICY = 2,THREAD_PRECEDENCE_POLICY = 3,THREAD_AFFINITY_POLICY = 4,THREAD_AFFINITY_TAG_NULL = 0,THREAD_BACKGROUND_POLICY = 5,THREAD_KERNEL_PORT = 1,};
enum MACRO_THREAD_STATE {THREAD_STATE_FLAVOR_LIST = 0,THREAD_STATE_FLAVOR_LIST_NEW = 128,};
enum MACRO_TH_FIN {TH_FIN = 0x1,TH_SYN = 0x2,TH_RST = 0x4,TH_PUSH = 0x8,TH_ACK = 0x10,TH_URG = 0x20,TH_ECE = 0x40,TH_CWR = 0x80,TH_FLAGS = 0xF7,};
enum MACRO_TIDY {TIDY_APPLE_CHANGES = 1,};
enum MACRO_TIME {TIME_MICROS_MAX = 1000000,};
enum MACRO_TIMEOUT {CLSET_TIMEOUT = 1,CLGET_TIMEOUT = 2,};
enum MACRO_TIMER {TIMER_RATE = 30,};
enum MACRO_TIMESTAMP {TCPOPT_TIMESTAMP = 8,TCPOLEN_TIMESTAMP = 10,};
enum MACRO_TIMETICKS {TIMETICKS = 67,};
enum MACRO_TIME_ABSOLUTE {TIME_ABSOLUTE = 0x0,TIME_RELATIVE = 0x1,};
enum MACRO_TIME_WITH {TIME_WITH_SYS_TIME = 1,};
enum MACRO_TIOCCBRK {TIOCCBRK = 536900730,};
enum MACRO_TIOCCDTR {TIOCCDTR = 536900728,};
enum MACRO_TIOCDRAIN {TIOCDRAIN = 536900702,};
enum MACRO_TIOCDSIMICROCODE {TIOCDSIMICROCODE = 536900693,};
enum MACRO_TIOCEXCL {TIOCEXCL = 536900621,};
enum MACRO_TIOCHPCL {TIOCHPCL = 536900610,};
enum MACRO_TIOCIXOFF {TIOCIXOFF = 536900736,};
enum MACRO_TIOCIXON {TIOCIXON = 536900737,};
enum MACRO_TIOCM {TIOCM_LE = 0x1,TIOCM_DTR = 0x2,TIOCM_RTS = 0x4,TIOCM_ST = 0x8,TIOCM_SR = 0x10,TIOCM_CTS = 0x20,TIOCM_CAR = 0x40,TIOCM_CD = 0x40,TIOCM_RNG = 0x80,TIOCM_RI = 0x80,TIOCM_DSR = 0x100,};
enum MACRO_TIOCNOTTY {TIOCNOTTY = 536900721,};
enum MACRO_TIOCNXCL {TIOCNXCL = 536900622,};
enum MACRO_TIOCPKT {TIOCPKT_DATA = 0x0,TIOCPKT_FLUSHREAD = 0x1,TIOCPKT_FLUSHWRITE = 0x2,TIOCPKT_STOP = 0x4,TIOCPKT_START = 0x8,TIOCPKT_NOSTOP = 0x10,TIOCPKT_DOSTOP = 0x20,TIOCPKT_IOCTL = 0x40,};
enum MACRO_TIOCPTYGNAME {TIOCPTYGNAME = 1082160211,};
enum MACRO_TIOCPTYGRANT {TIOCPTYGRANT = 536900692,};
enum MACRO_TIOCPTYUNLK {TIOCPTYUNLK = 536900690,};
enum MACRO_TIOCSBRK {TIOCSBRK = 536900731,};
enum MACRO_TIOCSCONS {TIOCSCONS = 536900707,};
enum MACRO_TIOCSCTTY {TIOCSCTTY = 536900705,};
enum MACRO_TIOCSDTR {TIOCSDTR = 536900729,};
enum MACRO_TIOCSIG {TIOCSIG = 536900703,};
enum MACRO_TIOCSTART {TIOCSTART = 536900718,};
enum MACRO_TIOCSTAT {TIOCSTAT = 536900709,};
enum MACRO_TIOCSTOP {TIOCSTOP = 536900719,};
enum MACRO_TKT {TKT_FLG_FORWARDABLE = 0x40000000,TKT_FLG_FORWARDED = 0x20000000,TKT_FLG_PROXIABLE = 0x10000000,TKT_FLG_PROXY = 0x8000000,TKT_FLG_MAY_POSTDATE = 0x4000000,TKT_FLG_POSTDATED = 0x2000000,TKT_FLG_INVALID = 0x1000000,TKT_FLG_RENEWABLE = 0x800000,TKT_FLG_INITIAL = 0x400000,TKT_FLG_PRE_AUTH = 0x200000,TKT_FLG_HW_AUTH = 0x100000,TKT_FLG_TRANSIT_POLICY_CHECKED = 0x80000,TKT_FLG_OK_AS_DELEGATE = 0x40000,TKT_FLG_ANONYMOUS = 0x20000,};
enum MACRO_TLS {TLS_CT_RSA_SIGN = 1,TLS_CT_DSS_SIGN = 2,TLS_CT_RSA_FIXED_DH = 3,TLS_CT_DSS_FIXED_DH = 4,TLS_CT_ECDSA_SIGN = 64,TLS_CT_RSA_FIXED_ECDH = 65,TLS_CT_ECDSA_FIXED_ECDH = 66,TLS_CT_NUMBER = 7,};
enum MACRO_TLS1 {TLS1_FLAGS_TLS_PADDING_BUG = 0x8,};
enum MACRO_TLS1_ALLOW {TLS1_ALLOW_EXPERIMENTAL_CIPHERSUITES = 0,TLS1_VERSION = 769,TLS1_VERSION_MAJOR = 3,TLS1_VERSION_MINOR = 1,TLS1_AD_DECRYPTION_FAILED = 21,TLS1_AD_RECORD_OVERFLOW = 22,TLS1_AD_UNKNOWN_CA = 48,TLS1_AD_ACCESS_DENIED = 49,TLS1_AD_DECODE_ERROR = 50,TLS1_AD_DECRYPT_ERROR = 51,TLS1_AD_EXPORT_RESTRICTION = 60,TLS1_AD_PROTOCOL_VERSION = 70,TLS1_AD_INSUFFICIENT_SECURITY = 71,TLS1_AD_INTERNAL_ERROR = 80,TLS1_AD_USER_CANCELLED = 90,TLS1_AD_NO_RENEGOTIATION = 100,TLS1_AD_UNSUPPORTED_EXTENSION = 110,TLS1_AD_CERTIFICATE_UNOBTAINABLE = 111,TLS1_AD_UNRECOGNIZED_NAME = 112,TLS1_AD_BAD_CERTIFICATE_STATUS_RESPONSE = 113,TLS1_AD_BAD_CERTIFICATE_HASH_VALUE = 114,TLS1_AD_UNKNOWN_PSK_IDENTITY = 115,};
enum MACRO_TLS1_CK {TLS1_CK_RSA_EXPORT1024_WITH_RC4_56_MD5 = 0x3000060,TLS1_CK_RSA_EXPORT1024_WITH_RC2_CBC_56_MD5 = 0x3000061,TLS1_CK_RSA_EXPORT1024_WITH_DES_CBC_SHA = 0x3000062,TLS1_CK_DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA = 0x3000063,TLS1_CK_RSA_EXPORT1024_WITH_RC4_56_SHA = 0x3000064,TLS1_CK_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA = 0x3000065,TLS1_CK_DHE_DSS_WITH_RC4_128_SHA = 0x3000066,TLS1_CK_RSA_WITH_AES_128_SHA = 0x300002F,TLS1_CK_DH_DSS_WITH_AES_128_SHA = 0x3000030,TLS1_CK_DH_RSA_WITH_AES_128_SHA = 0x3000031,TLS1_CK_DHE_DSS_WITH_AES_128_SHA = 0x3000032,TLS1_CK_DHE_RSA_WITH_AES_128_SHA = 0x3000033,TLS1_CK_ADH_WITH_AES_128_SHA = 0x3000034,TLS1_CK_RSA_WITH_AES_256_SHA = 0x3000035,TLS1_CK_DH_DSS_WITH_AES_256_SHA = 0x3000036,TLS1_CK_DH_RSA_WITH_AES_256_SHA = 0x3000037,TLS1_CK_DHE_DSS_WITH_AES_256_SHA = 0x3000038,TLS1_CK_DHE_RSA_WITH_AES_256_SHA = 0x3000039,TLS1_CK_ADH_WITH_AES_256_SHA = 0x300003A,TLS1_CK_RSA_WITH_CAMELLIA_128_CBC_SHA = 0x3000041,TLS1_CK_DH_DSS_WITH_CAMELLIA_128_CBC_SHA = 0x3000042,TLS1_CK_DH_RSA_WITH_CAMELLIA_128_CBC_SHA = 0x3000043,TLS1_CK_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA = 0x3000044,TLS1_CK_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA = 0x3000045,TLS1_CK_ADH_WITH_CAMELLIA_128_CBC_SHA = 0x3000046,TLS1_CK_RSA_WITH_CAMELLIA_256_CBC_SHA = 0x3000084,TLS1_CK_DH_DSS_WITH_CAMELLIA_256_CBC_SHA = 0x3000085,TLS1_CK_DH_RSA_WITH_CAMELLIA_256_CBC_SHA = 0x3000086,TLS1_CK_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA = 0x3000087,TLS1_CK_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA = 0x3000088,TLS1_CK_ADH_WITH_CAMELLIA_256_CBC_SHA = 0x3000089,TLS1_CK_RSA_WITH_SEED_SHA = 0x3000096,TLS1_CK_DH_DSS_WITH_SEED_SHA = 0x3000097,TLS1_CK_DH_RSA_WITH_SEED_SHA = 0x3000098,TLS1_CK_DHE_DSS_WITH_SEED_SHA = 0x3000099,TLS1_CK_DHE_RSA_WITH_SEED_SHA = 0x300009A,TLS1_CK_ADH_WITH_SEED_SHA = 0x300009B,TLS1_CK_ECDH_ECDSA_WITH_NULL_SHA = 0x300C001,TLS1_CK_ECDH_ECDSA_WITH_RC4_128_SHA = 0x300C002,TLS1_CK_ECDH_ECDSA_WITH_DES_192_CBC3_SHA = 0x300C003,TLS1_CK_ECDH_ECDSA_WITH_AES_128_CBC_SHA = 0x300C004,TLS1_CK_ECDH_ECDSA_WITH_AES_256_CBC_SHA = 0x300C005,TLS1_CK_ECDHE_ECDSA_WITH_NULL_SHA = 0x300C006,TLS1_CK_ECDHE_ECDSA_WITH_RC4_128_SHA = 0x300C007,TLS1_CK_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA = 0x300C008,TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CBC_SHA = 0x300C009,TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CBC_SHA = 0x300C00A,TLS1_CK_ECDH_RSA_WITH_NULL_SHA = 0x300C00B,TLS1_CK_ECDH_RSA_WITH_RC4_128_SHA = 0x300C00C,TLS1_CK_ECDH_RSA_WITH_DES_192_CBC3_SHA = 0x300C00D,TLS1_CK_ECDH_RSA_WITH_AES_128_CBC_SHA = 0x300C00E,TLS1_CK_ECDH_RSA_WITH_AES_256_CBC_SHA = 0x300C00F,TLS1_CK_ECDHE_RSA_WITH_NULL_SHA = 0x300C010,TLS1_CK_ECDHE_RSA_WITH_RC4_128_SHA = 0x300C011,TLS1_CK_ECDHE_RSA_WITH_DES_192_CBC3_SHA = 0x300C012,TLS1_CK_ECDHE_RSA_WITH_AES_128_CBC_SHA = 0x300C013,TLS1_CK_ECDHE_RSA_WITH_AES_256_CBC_SHA = 0x300C014,TLS1_CK_ECDH_anon_WITH_NULL_SHA = 0x300C015,TLS1_CK_ECDH_anon_WITH_RC4_128_SHA = 0x300C016,TLS1_CK_ECDH_anon_WITH_DES_192_CBC3_SHA = 0x300C017,TLS1_CK_ECDH_anon_WITH_AES_128_CBC_SHA = 0x300C018,TLS1_CK_ECDH_anon_WITH_AES_256_CBC_SHA = 0x300C019,};
enum MACRO_TLS1_FINISH {TLS1_FINISH_MAC_LENGTH = 12,};
enum MACRO_TLSEXT {TLSEXT_TYPE_server_name = 0,TLSEXT_TYPE_max_fragment_length = 1,TLSEXT_TYPE_client_certificate_url = 2,TLSEXT_TYPE_trusted_ca_keys = 3,TLSEXT_TYPE_truncated_hmac = 4,TLSEXT_TYPE_status_request = 5,TLSEXT_TYPE_elliptic_curves = 10,TLSEXT_TYPE_ec_point_formats = 11,TLSEXT_TYPE_session_ticket = 35,TLSEXT_TYPE_renegotiate = 65281,TLSEXT_NAMETYPE_host_name = 0,TLSEXT_STATUSTYPE_ocsp = 1,TLSEXT_MAXLEN_host_name = 255,};
enum MACRO_TLS_MD {TLS_MD_MAX_CONST_SIZE = 20,TLS_MD_CLIENT_FINISH_CONST_SIZE = 15,TLS_MD_SERVER_FINISH_CONST_SIZE = 15,TLS_MD_SERVER_WRITE_KEY_CONST_SIZE = 16,TLS_MD_KEY_EXPANSION_CONST_SIZE = 13,TLS_MD_CLIENT_WRITE_KEY_CONST_SIZE = 16,TLS_MD_IV_BLOCK_CONST_SIZE = 8,TLS_MD_MASTER_SECRET_CONST_SIZE = 13,};
enum MACRO_TM {TM_SUNDAY = 0,TM_MONDAY = 1,TM_TUESDAY = 2,TM_WEDNESDAY = 3,TM_THURSDAY = 4,TM_FRIDAY = 5,TM_SATURDAY = 6,TM_JANUARY = 0,TM_FEBRUARY = 1,TM_MARCH = 2,TM_APRIL = 3,TM_MAY = 4,TM_JUNE = 5,TM_JULY = 6,TM_AUGUST = 7,TM_SEPTEMBER = 8,TM_OCTOBER = 9,TM_NOVEMBER = 10,TM_DECEMBER = 11,TM_YEAR_BASE = 1900,};
enum MACRO_TMAGLEN {TMAGLEN = 6,};
enum MACRO_TMP {TMP_MAX = 308915776,};
enum MACRO_TOEXEC {TOEXEC = 0x1,};
enum MACRO_TOREAD {TOREAD = 0x4,};
enum MACRO_TOWRITE {TOWRITE = 0x2,};
enum MACRO_TR {TR_BREADHIT = 0,TR_BREADMISS = 1,TR_BWRITE = 2,TR_BREADHITRA = 3,TR_BREADMISSRA = 4,TR_XFODMISS = 5,TR_XFODHIT = 6,TR_BRELSE = 7,TR_BREALLOC = 8,TR_MALL = 10,TR_INTRANS = 20,TR_EINTRANS = 21,TR_FRECLAIM = 22,TR_RECLAIM = 23,TR_XSFREC = 24,TR_XIFREC = 25,TR_WAITMEM = 26,TR_EWAITMEM = 27,TR_ZFOD = 28,TR_EXFOD = 29,TR_VRFOD = 30,TR_CACHEFOD = 31,TR_SWAPIN = 32,TR_PGINDONE = 33,TR_SWAPIO = 34,TR_VADVISE = 40,TR_STAMP = 45,TR_NFLAGS = 100,};
enum MACRO_TRACE {TRACE_DISABLE = 0x0,TRACE_TIMES = 0x1,TRACE_TPUTS = 0x2,TRACE_UPDATE = 0x4,TRACE_MOVE = 0x8,TRACE_CHARPUT = 0x10,TRACE_ORDINARY = 0x1F,TRACE_CALLS = 0x20,TRACE_VIRTPUT = 0x40,TRACE_IEVENT = 0x80,TRACE_BITS = 0x100,TRACE_ICALLS = 0x200,TRACE_CCALLS = 0x400,TRACE_DATABASE = 0x800,TRACE_ATTRS = 0x1000,TRACE_SHIFT = 0xD,TRACE_MAXIMUM = 0x1FFF,};
enum MACRO_TRAP {TRAP_BRKPT = 1,TRAP_TRACE = 2,};
enum MACRO_TRCSIZ {TRCSIZ = 4096,};
enum MACRO_TRY {TRY_AGAIN = 2,};
enum MACRO_TS {TS_SO_OLOWAT = 0x1,TS_ASYNC = 0x2,TS_BUSY = 0x4,TS_CARR_ON = 0x8,TS_FLUSH = 0x10,TS_ISOPEN = 0x20,TS_TBLOCK = 0x40,TS_TIMEOUT = 0x80,TS_TTSTOP = 0x100,TS_XCLUDE = 0x400,TS_BKSL = 0x800,TS_CNTTB = 0x1000,TS_ERASE = 0x2000,TS_LNCH = 0x4000,TS_TYPEN = 0x8000,TS_LOCAL = 0xF800,TS_CAN_BYPASS_L_RINT = 0x10000,TS_CONNECTED = 0x20000,TS_SNOOP = 0x40000,TS_SO_OCOMPLETE = 0x80000,TS_ZOMBIE = 0x100000,TS_CAR_OFLOW = 0x200000,TS_IOCTL_NOT_OK = 0x1000000,};
enum MACRO_TSGID {TSGID = 0x400,};
enum MACRO_TSI {TSI_T_REXMT = 0,TSI_T_PERSIST = 1,TSI_T_KEEP = 2,TSI_T_2MSL = 3,TSI_T_NTIMERS = 4,TSI_S_CLOSED = 0,TSI_S_LISTEN = 1,TSI_S_SYN_SENT = 2,TSI_S_SYN_RECEIVED = 3,TSI_S_ESTABLISHED = 4,TSI_S__CLOSE_WAIT = 5,TSI_S_FIN_WAIT_1 = 6,TSI_S_CLOSING = 7,TSI_S_LAST_ACK = 8,TSI_S_FIN_WAIT_2 = 9,TSI_S_TIME_WAIT = 10,TSI_S_RESERVED = 11,};
enum MACRO_TSP {TSP_ANY = 0,TSP_ADJTIME = 1,TSP_ACK = 2,TSP_MASTERREQ = 3,TSP_MASTERACK = 4,TSP_SETTIME = 5,TSP_MASTERUP = 6,TSP_SLAVEUP = 7,TSP_ELECTION = 8,TSP_ACCEPT = 9,TSP_REFUSE = 10,TSP_CONFLICT = 11,TSP_RESOLVE = 12,TSP_QUIT = 13,TSP_DATE = 14,TSP_DATEREQ = 15,TSP_DATEACK = 16,TSP_TRACEON = 17,TSP_TRACEOFF = 18,TSP_MSITE = 19,TSP_MSITEREQ = 20,TSP_TEST = 21,TSP_SETDATE = 22,TSP_SETDATEREQ = 23,TSP_LOOP = 24,};
enum MACRO_TSPTYPENUMBER {TSPTYPENUMBER = 25,};
enum MACRO_TSPVERSION {TSPVERSION = 1,};
enum MACRO_TSVTX {TSVTX = 0x200,};
enum MACRO_TTCP {TTCP_CLIENT_SND_WND = 4096,};
enum MACRO_TTY : __int64 {TTY_CHARMASK = 0xFF,TTY_QUOTE = 0x100,TTY_ERRORMASK = 0xFF000000,TTY_FE = 0x1000000,TTY_PE = 0x2000000,TTY_OE = 0x4000000,TTY_BI = 0x8000000,};
enum MACRO_TTYDEF {TTYDEF_IFLAG = 11010,TTYDEF_OFLAG = 3,TTYDEF_LFLAG = 1483,TTYDEF_CFLAG = 19200,TTYDEF_SPEED = 9600,};
enum MACRO_TTYDISC {TTYDISC = 0,TABLDISC = 3,SLIPDISC = 4,};
enum MACRO_TTY_ON {TTY_ON = 0x1,TTY_SECURE = 0x2,};
enum MACRO_TUEXEC {TUEXEC = 0x40,};
enum MACRO_TUREAD {TUREAD = 0x100,};
enum MACRO_TUWRITE {TUWRITE = 0x80,};
enum MACRO_TV {TV_TRUE = 1,TV_FALSE = 2,};
enum MACRO_TVERSLEN {TVERSLEN = 2,REGTYPE = 48,};
enum MACRO_TYPE {TYPE_A = 1,TYPE_E = 2,TYPE_I = 3,TYPE_L = 4,};
enum MACRO_TYPE_OTHER {TYPE_OTHER = 0,TYPE_OBJID = 1,TYPE_OCTETSTR = 2,TYPE_INTEGER = 3,TYPE_NETADDR = 4,TYPE_IPADDR = 5,TYPE_COUNTER = 6,TYPE_GAUGE = 7,TYPE_TIMETICKS = 8,TYPE_OPAQUE = 9,TYPE_NULL = 10,TYPE_COUNTER64 = 11,TYPE_BITSTRING = 12,TYPE_NSAPADDRESS = 13,TYPE_UINTEGER = 14,TYPE_UNSIGNED32 = 15,TYPE_INTEGER32 = 16,TYPE_SIMPLE_LAST = 16,TYPE_TRAPTYPE = 20,TYPE_NOTIFTYPE = 21,TYPE_OBJGROUP = 22,TYPE_NOTIFGROUP = 23,TYPE_MODID = 24,TYPE_AGENTCAP = 25,TYPE_MODCOMP = 26,TYPE_OBJIDENTITY = 27,};
enum MACRO_TZ {TZ_MAX_TIMES = 370,TZ_MAX_TYPES = 256,TZ_MAX_CHARS = 50,TZ_MAX_LEAPS = 50,};
enum MACRO_UCD {UCD_SNMP_LIBRARY = 1,};
enum MACRO_UCD_MSG {UCD_MSG_FLAG_RESPONSE_PDU = 0x100,UCD_MSG_FLAG_EXPECT_RESPONSE = 0x200,UCD_MSG_FLAG_FORCE_PDU_COPY = 0x400,UCD_MSG_FLAG_ALWAYS_IN_VIEW = 0x800,UCD_MSG_FLAG_PDU_TIMEOUT = 0x1000,UCD_MSG_FLAG_ONE_PASS_ONLY = 0x2000,UCD_MSG_FLAG_TUNNELED = 0x4000,};
enum MACRO_UCD_REGISTRY {UCD_REGISTRY_OID_MAX_LEN = 128,};
enum MACRO_UCHAR {UCHAR_MAX = 255,CHAR_MAX = 127,};
enum MACRO_UDP {UDP_NOCKSUM = 0x1,};
enum MACRO_UDPCTL {UDPCTL_CHECKSUM = 1,UDPCTL_STATS = 2,UDPCTL_MAXDGRAM = 3,UDPCTL_RECVSPACE = 4,UDPCTL_PCBLIST = 5,UDPCTL_MAXID = 6,};
enum MACRO_UDP_ADDRESSES {UDP_ADDRESSES_IN_HOST_ORDER = 1,};
enum MACRO_UF {UF_SETTABLE = 0xFFFF,UF_NODUMP = 0x1,UF_IMMUTABLE = 0x2,UF_APPEND = 0x4,UF_OPAQUE = 0x8,UF_COMPRESSED = 0x20,UF_TRACKED = 0x40,UF_HIDDEN = 0x8000,};
enum MACRO_UI {UI_INPUT_FLAG_ECHO = 0x1,UI_INPUT_FLAG_DEFAULT_PWD = 0x2,UI_INPUT_FLAG_USER_BASE = 0x10,UI_CTRL_PRINT_ERRORS = 0x1,UI_CTRL_IS_REDOABLE = 0x2,UI_F_GENERAL_ALLOCATE_BOOLEAN = 0x6C,UI_F_GENERAL_ALLOCATE_PROMPT = 0x6D,UI_F_GENERAL_ALLOCATE_STRING = 0x64,UI_F_UI_CTRL = 0x6F,UI_F_UI_DUP_ERROR_STRING = 0x65,UI_F_UI_DUP_INFO_STRING = 0x66,UI_F_UI_DUP_INPUT_BOOLEAN = 0x6E,UI_F_UI_DUP_INPUT_STRING = 0x67,UI_F_UI_DUP_VERIFY_STRING = 0x6A,UI_F_UI_GET0_RESULT = 0x6B,UI_F_UI_NEW_METHOD = 0x68,UI_F_UI_SET_RESULT = 0x69,UI_R_COMMON_OK_AND_CANCEL_CHARACTERS = 0x68,UI_R_INDEX_TOO_LARGE = 0x66,UI_R_INDEX_TOO_SMALL = 0x67,UI_R_NO_RESULT_BUFFER = 0x69,UI_R_RESULT_TOO_LARGE = 0x64,UI_R_RESULT_TOO_SMALL = 0x65,UI_R_UNKNOWN_CONTROL_COMMAND = 0x6A,};
enum MACRO_UID {UID_ROOT = 0,UID_BIN = 3,UID_UUCP = 66,};
enum MACRO_UINT : __int64 {UINT_LEAST8_MAX = 255,UINT_LEAST16_MAX = 65535,UINT_LEAST32_MAX = 4294967295,UINT_LEAST64_MAX = -1,};
enum MACRO_UINT8 : __int64 {UINT8_MAX = 255,UINT16_MAX = 65535,UINT32_MAX = 4294967295,UINT64_MAX = -1,};
enum MACRO_UINTEGER {UINTEGER = 71,};
enum MACRO_UINTMAX : __int64 {UINTMAX_MAX = -1,};
enum MACRO_UINTPTR : __int64 {UINTPTR_MAX = -1,};
enum MACRO_UINT_FAST8 : __int64 {UINT_FAST8_MAX = 255,UINT_FAST16_MAX = 65535,UINT_FAST32_MAX = 4294967295,UINT_FAST64_MAX = -1,};
enum MACRO_UINT_MAX : __int64 {UINT_MAX = 0xFFFFFFFF,INT_MAX = 0x7FFFFFFF,};
enum MACRO_UL {UL_GETFSIZE = 1,UL_SETFSIZE = 2,};
enum MACRO_ULLONG : __int64 {ULLONG_MAX = 0xFFFFFFFFFFFFFFFF,LLONG_MAX = 0x7FFFFFFFFFFFFFFF,};
enum MACRO_ULONG : __int64 {ULONG_MAX = 0xFFFFFFFFFFFFFFFF,LONG_MAX = 0x7FFFFFFFFFFFFFFF,};
enum MACRO_UNDEF {UNDEF = 5,};
enum MACRO_UNDEFINED : __int64 {UNDEFINED_DEFAULT_NS = -1,};
enum MACRO_UNDO {UNDO = 5,};
enum MACRO_UNKNOWN {UNKNOWN_REQUEST = 5,};
enum MACRO_UNKNOWNGID {UNKNOWNGID = 99,};
enum MACRO_UNKNOWNPERMISSIONS {UNKNOWNPERMISSIONS = 453,};
enum MACRO_UNKNOWNUID {UNKNOWNUID = 99,};
enum MACRO_UNSIGNED {UNSIGNED = 66,};
enum MACRO_UNVIS : __int64 {UNVIS_VALID = 1,UNVIS_VALIDPUSH = 2,UNVIS_NOCHAR = 3,UNVIS_SYNBAD = -1,UNVIS_ERROR = -2,UNVIS_END = 1,};
enum MACRO_USE {USE_MACH_HOST_STATISTICS = 1,};
enum MACRO_USEC {USEC_PER_SEC = 1000000,};
enum MACRO_USER {USER_ADDR_NULL = 0,};
enum MACRO_USER_CODE {USER_CODE_SELECTOR = 0x17,USER_DATA_SELECTOR = 0x1F,};
enum MACRO_USER_CS {USER_CS_PATH = 1,USER_BC_BASE_MAX = 2,USER_BC_DIM_MAX = 3,USER_BC_SCALE_MAX = 4,USER_BC_STRING_MAX = 5,USER_COLL_WEIGHTS_MAX = 6,USER_EXPR_NEST_MAX = 7,USER_LINE_MAX = 8,USER_RE_DUP_MAX = 9,USER_POSIX2_VERSION = 10,USER_POSIX2_C_BIND = 11,USER_POSIX2_C_DEV = 12,USER_POSIX2_CHAR_TERM = 13,USER_POSIX2_FORT_DEV = 14,USER_POSIX2_FORT_RUN = 15,USER_POSIX2_LOCALEDEF = 16,USER_POSIX2_SW_DEV = 17,USER_POSIX2_UPE = 18,USER_STREAM_MAX = 19,USER_TZNAME_MAX = 20,USER_MAXID = 21,};
enum MACRO_USHRT {USHRT_MAX = 65535,SHRT_MAX = 32767,};
enum MACRO_USING {USING_SNMPV3_USMCONF_MODULE = 1,USING_AGENTX_MASTER_MODULE = 1,USING_AGENTX_SUBAGENT_MODULE = 1,USING_UTILITIES_EXECUTE_MODULE = 1,USING_UTILITIES_IQUERY_MODULE = 1,USING_MIBII_VACM_CONF_MODULE = 1,USING_AGENTX_PROTOCOL_MODULE = 1,USING_AGENTX_CLIENT_MODULE = 1,USING_AGENTX_MASTER_ADMIN_MODULE = 1,USING_AGENTX_AGENTX_CONFIG_MODULE = 1,};
enum MACRO_USING_HOST {USING_HOST_MODULE = 1,USING_UCD_SNMP_DISKIO_MODULE = 1,USING_UCD_SNMP_LOADAVE_MODULE = 1,USING_DEFAULT_MODULES_MODULE = 1,USING_HOST_HR_STORAGE_MODULE = 1,USING_HOST_HR_FILESYS_MODULE = 1,USING_HOST_HRSWINSTALLEDTABLE_MODULE = 1,USING_HOST_HRSWRUNTABLE_MODULE = 1,USING_HOST_HR_SYSTEM_MODULE = 1,USING_HOST_HR_DEVICE_MODULE = 1,USING_HOST_HR_OTHER_MODULE = 1,USING_HOST_HR_PROC_MODULE = 1,USING_HOST_HR_NETWORK_MODULE = 1,USING_HOST_HR_PRINT_MODULE = 1,USING_HOST_HR_DISK_MODULE = 1,USING_HOST_HR_PARTITION_MODULE = 1,USING_UTIL_FUNCS_HEADER_SIMPLE_TABLE_MODULE = 1,USING_SNMPV3MIBS_MODULE = 1,USING_MIBII_MODULE = 1,USING_UCD_SNMP_MODULE = 1,USING_NOTIFICATION_MODULE = 1,USING_NOTIFICATION_LOG_MIB_MODULE = 1,USING_TARGET_MODULE = 1,USING_AGENT_MIBS_MODULE = 1,USING_AGENTX_MODULE = 1,USING_DISMAN_EVENT_MODULE = 1,USING_DISMAN_SCHEDULE_MODULE = 1,USING_UTILITIES_MODULE = 1,USING_HARDWARE_MEMORY_MODULE = 1,USING_HOST_DATA_ACCESS_SWINST_MODULE = 1,USING_HOST_DATA_ACCESS_SWRUN_MODULE = 1,USING_HOST_HRSWRUNPERFTABLE_MODULE = 1,USING_HARDWARE_CPU_MODULE = 1,USING_MIBII_IFTABLE_MODULE = 1,USING_UTIL_FUNCS_MODULE = 1,USING_SNMPV3_SNMPMPDSTATS_5_5_MODULE = 1,USING_SNMPV3_USMSTATS_5_5_MODULE = 1,USING_SNMPV3_SNMPENGINE_MODULE = 1,USING_SNMPV3_USMUSER_MODULE = 1,USING_MIBII_SNMP_MIB_5_5_MODULE = 1,USING_MIBII_SYSTEM_MIB_MODULE = 1,USING_MIBII_SYSORTABLE_MODULE = 1,USING_MIBII_AT_MODULE = 1,USING_MIBII_IP_MODULE = 1,USING_MIBII_TCP_MODULE = 1,USING_MIBII_ICMP_MODULE = 1,USING_MIBII_UDP_MODULE = 1,USING_MIBII_VACM_VARS_MODULE = 1,USING_MIBII_SETSERIALNO_MODULE = 1,USING_IF_MIB_MODULE = 1,USING_UCD_SNMP_DISK_MODULE = 1,USING_UCD_SNMP_PROC_MODULE = 1,USING_UCD_SNMP_VERSIONINFO_MODULE = 1,USING_UCD_SNMP_PASS_MODULE = 1,USING_UCD_SNMP_PASS_PERSIST_MODULE = 1,USING_AGENT_EXTEND_MODULE = 1,USING_UCD_SNMP_ERRORMIB_MODULE = 1,USING_UCD_SNMP_FILE_MODULE = 1,USING_UCD_SNMP_DLMOD_MODULE = 1,USING_UCD_SNMP_PROXY_MODULE = 1,USING_UCD_SNMP_LOGMATCH_MODULE = 1,USING_UCD_SNMP_MEMORY_MODULE = 1,USING_UCD_SNMP_VMSTAT_MODULE = 1,USING_NOTIFICATION_SNMPNOTIFYTABLE_MODULE = 1,USING_SNMP_NOTIFICATION_MIB_SNMPNOTIFYFILTERTABLE_MODULE = 1,USING_NOTIFICATION_SNMPNOTIFYFILTERPROFILETABLE_MODULE = 1,USING_NOTIFICATION_LOG_MIB_NOTIFICATION_LOG_MODULE = 1,USING_TARGET_TARGET_COUNTERS_5_5_MODULE = 1,USING_TARGET_SNMPTARGETADDRENTRY_MODULE = 1,USING_TARGET_SNMPTARGETPARAMSENTRY_MODULE = 1,USING_TARGET_TARGET_MODULE = 1,USING_AGENT_NSTRANSACTIONTABLE_MODULE = 1,USING_AGENT_NSMODULETABLE_MODULE = 1,USING_AGENT_NSDEBUG_MODULE = 1,USING_AGENT_NSCACHE_MODULE = 1,USING_AGENT_NSLOGGING_MODULE = 1,USING_AGENT_NSVACMACCESSTABLE_MODULE = 1,USING_DISMAN_EVENT_MTESCALARS_MODULE = 1,USING_DISMAN_EVENT_MTETRIGGER_MODULE = 1,USING_DISMAN_EVENT_MTETRIGGERTABLE_MODULE = 1,USING_DISMAN_EVENT_MTETRIGGERDELTATABLE_MODULE = 1,USING_DISMAN_EVENT_MTETRIGGEREXISTENCETABLE_MODULE = 1,USING_DISMAN_EVENT_MTETRIGGERBOOLEANTABLE_MODULE = 1,USING_DISMAN_EVENT_MTETRIGGERTHRESHOLDTABLE_MODULE = 1,USING_DISMAN_EVENT_MTETRIGGERCONF_MODULE = 1,USING_DISMAN_EVENT_MTEEVENT_MODULE = 1,USING_DISMAN_EVENT_MTEEVENTTABLE_MODULE = 1,USING_DISMAN_EVENT_MTEEVENTSETTABLE_MODULE = 1,USING_DISMAN_EVENT_MTEEVENTNOTIFICATIONTABLE_MODULE = 1,USING_DISMAN_EVENT_MTEEVENTCONF_MODULE = 1,USING_DISMAN_EVENT_MTEOBJECTS_MODULE = 1,USING_DISMAN_EVENT_MTEOBJECTSTABLE_MODULE = 1,USING_DISMAN_EVENT_MTEOBJECTSCONF_MODULE = 1,USING_DISMAN_SCHEDULE_SCHEDCORE_MODULE = 1,USING_DISMAN_SCHEDULE_SCHEDCONF_MODULE = 1,USING_DISMAN_SCHEDULE_SCHEDTABLE_MODULE = 1,USING_UTILITIES_OVERRIDE_MODULE = 1,USING_HARDWARE_MEMORY_HW_MEM_MODULE = 1,USING_HARDWARE_MEMORY_MEMORY_NULL_MODULE = 1,USING_HOST_DATA_ACCESS_SWINST_DARWIN_MODULE = 1,USING_HOST_DATA_ACCESS_SWRUN_DARWIN_MODULE = 1,USING_HARDWARE_CPU_CPU_MODULE = 1,USING_HARDWARE_CPU_CPU_MACH_MODULE = 1,USING_IF_MIB_IFTABLE_MODULE = 1,USING_UTIL_FUNCS_EXIT_MODULE = 1,USING_UTIL_FUNCS_HEADER_GENERIC_MODULE = 1,USING_UTIL_FUNCS_RESTART_MODULE = 1,USING_MIBII_UPDATES_MODULE = 1,USING_MIBII_IPADDR_MODULE = 1,USING_MIBII_VAR_ROUTE_MODULE = 1,USING_MIBII_ROUTE_WRITE_MODULE = 1,USING_MIBII_TCPTABLE_MODULE = 1,USING_MIBII_UDPTABLE_MODULE = 1,USING_MIBII_VACM_CONTEXT_MODULE = 1,USING_IF_MIB_IFXTABLE_MODULE = 1,USING_HEADER_COMPLEX_MODULE = 1,USING_SNMP_NOTIFICATION_MIB_SNMPNOTIFYFILTERTABLE_SNMPNOTIFYFILTERTABLE_MODULE = 1,USING_IF_MIB_IFTABLE_IFTABLE_MODULE = 1,USING_IF_MIB_IFXTABLE_IFXTABLE_MODULE = 1,USING_SNMP_NOTIFICATION_MIB_SNMPNOTIFYFILTERTABLE_SNMPNOTIFYFILTERTABLE_INTERFACE_MODULE = 1,USING_SNMP_NOTIFICATION_MIB_SNMPNOTIFYFILTERTABLE_SNMPNOTIFYFILTERTABLE_DATA_ACCESS_MODULE = 1,USING_IF_MIB_DATA_ACCESS_INTERFACE_MODULE = 1,USING_IF_MIB_IFTABLE_IFTABLE_INTERFACE_MODULE = 1,USING_IF_MIB_IFTABLE_IFTABLE_DATA_ACCESS_MODULE = 1,USING_IF_MIB_IFXTABLE_IFXTABLE_INTERFACE_MODULE = 1,USING_IF_MIB_IFXTABLE_IFXTABLE_DATA_ACCESS_MODULE = 1,USING_IF_MIB_DATA_ACCESS_INTERFACE_SYSCTL_MODULE = 1,};
enum MACRO_USM {USM_AUTH_KU_LEN = 32,USM_PRIV_KU_LEN = 32,};
enum MACRO_USM_LENGTH {USM_LENGTH_OID_TRANSFORM = 10,};
enum MACRO_USM_LENGTH_EXPANDED {USM_LENGTH_EXPANDED_PASSPHRASE = 1048576,USM_LENGTH_KU_HASHBLOCK = 64,USM_LENGTH_P_MIN = 8,};
enum MACRO_USM_MAX {USM_MAX_ID_LENGTH = 1024,USM_MAX_SALT_LENGTH = 128,USM_DES_SALT_LENGTH = 64,USM_AES_SALT_LENGTH = 128,USM_MAX_KEYEDHASH_LENGTH = 128,USM_TIME_WINDOW = 150,USM_MD5_AND_SHA_AUTH_LEN = 12,USM_MAX_AUTHSIZE = 12,USM_SEC_MODEL_NUMBER = 3,USM_AUTH_PROTO_NOAUTH_LEN = 10,USM_AUTH_PROTO_MD5_LEN = 10,USM_AUTH_PROTO_SHA_LEN = 10,USM_PRIV_PROTO_NOPRIV_LEN = 10,USM_PRIV_PROTO_DES_LEN = 10,USM_PRIV_PROTO_AES_LEN = 10,USM_PRIV_PROTO_AES128_LEN = 10,};
enum MACRO_USRQUOTA {USRQUOTA = 0,GRPQUOTA = 1,};
enum MACRO_USRSTACK : __int64 {USRSTACK = 3221225472,};
enum MACRO_USRSTACK64 : __int64 {USRSTACK64 = 140734799806464,};
enum MACRO_UT {UT_NAMESIZE = 8,UT_LINESIZE = 8,UT_HOSTSIZE = 16,};
enum MACRO_UTIME {UTIME_NEEDS_CLOSED_FILE = 1,};
enum MACRO_UTMPX {UTMPX_AUTOFILL_MASK = 0x8000,UTMPX_DEAD_IF_CORRESPONDING_MASK = 0x4000,};
enum MACRO_V {V_CRYPTO_MDEBUG_TIME = 0x1,V_CRYPTO_MDEBUG_THREAD = 0x2,V_CRYPTO_MDEBUG_ALL = 0x3,};
enum MACRO_VA {VA_NORM = 0,VA_ANOM = 1,VA_SEQL = 2,VA_FLUSH = 3,};
enum MACRO_VACM {VACM_SUCCESS = 0,VACM_NOSECNAME = 1,VACM_NOGROUP = 2,VACM_NOACCESS = 3,VACM_NOVIEW = 4,VACM_NOTINVIEW = 5,VACM_NOSUCHCONTEXT = 6,VACM_SUBTREE_UNKNOWN = 7,};
enum MACRO_VACMSTRINGLEN {VACMSTRINGLEN = 34,};
enum MACRO_VACMVIEWSPINLOCK {VACMVIEWSPINLOCK = 1,VIEWNAME = 2,};
enum MACRO_VACM_MAX {VACM_MAX_STRING = 32,};
enum MACRO_VACM_VIEW {VACM_VIEW_READ = 0,VACM_VIEW_WRITE = 1,VACM_VIEW_NOTIFY = 2,VACM_VIEW_LOG = 3,VACM_VIEW_EXECUTE = 4,VACM_VIEW_NET = 5,VACM_VIEW_READ_BIT = 1,VACM_VIEW_WRITE_BIT = 2,VACM_VIEW_NOTIFY_BIT = 4,VACM_VIEW_LOG_BIT = 8,VACM_VIEW_EXECUTE_BIT = 16,VACM_VIEW_NET_BIT = 32,VACM_VIEW_NO_BITS = 0,VACM_MAX_VIEWS = 8,VACM_MODE_FIND = 0,VACM_MODE_IGNORE_MASK = 1,VACM_MODE_CHECK_SUBTREE = 2,};
enum MACRO_VALID : __int64 {VALID_INT_BITS = 2147483647,VALID_UINT_BITS = 4294967295,};
enum MACRO_VDISCARD {VDISCARD = 15,VMIN = 16,};
enum MACRO_VDSUSP {VDSUSP = 11,};
enum MACRO_VEOF {VEOF = 0,VEOL = 1,VEOL2 = 2,};
enum MACRO_VERASE {VERASE = 3,VWERASE = 4,};
enum MACRO_VERSION {_POSIX_VERSION = 200112,_POSIX2_VERSION = 200112,};
enum MACRO_VERSION_NUMBER {OPENSSL_VERSION_NUMBER = 0x90812F,SSLEAY_VERSION_NUMBER = 0x90812F,};
enum MACRO_VF {VF_PCBOOT = 1,VF_HELP = 2,};
enum MACRO_VFS {VFS_GENERIC = 0,VFS_NUMMNTOPS = 1,VFS_MAXTYPENUM = 1,VFS_CONF = 2,VFS_SET_PACKAGE_EXTS = 3,};
enum MACRO_VFS_CTL {VFS_CTL_VERS1 = 0x1,VFS_CTL_STATFS = 0x10001,VFS_CTL_UMOUNT = 0x10002,VFS_CTL_QUERY = 0x10003,VFS_CTL_NEWADDR = 0x10004,VFS_CTL_TIMEO = 0x10005,VFS_CTL_NOLOCKS = 0x10006,VFS_CTL_SADDR = 0x10007,};
enum MACRO_VIEWSTATUS {VIEWSTATUS = 7,};
enum MACRO_VIEWSTORAGE {VIEWSTORAGE = 6,};
enum MACRO_VIEWSUBTREE {VIEWSUBTREE = 3,VIEWMASK = 4,};
enum MACRO_VIEWTYPE {VIEWTYPE = 5,};
enum MACRO_VIFF {VIFF_TUNNEL = 0x1,VIFF_SRCRT = 0x2,};
enum MACRO_VIS {VIS_OCTAL = 0x1,VIS_CSTYLE = 0x2,VIS_SP = 0x4,VIS_TAB = 0x8,VIS_NL = 0x10,VIS_WHITE = 0x1C,VIS_SAFE = 0x20,VIS_NOSLASH = 0x40,VIS_HTTPSTYLE = 0x80,VIS_GLOB = 0x100,};
enum MACRO_VKILL {VKILL = 5,};
enum MACRO_VLNEXT {VLNEXT = 14,};
enum MACRO_VM : __int64 {VM_MIN_ADDRESS64 = 0x0,VM_USRSTACK64 = 0x7FFF5FC00000,VM_DYLD64 = 0x7FFF5FC00000,VM_LIB64_SHR_DATA = 0x7FFF60000000,VM_LIB64_SHR_TEXT = 0x7FFF80000000,VM_MAX_PAGE_ADDRESS = 0x7FFFFFE00000,VM_MAX_USER_PAGE_ADDRESS = 0x7FFFFFFFF000,};
enum MACRO_VM_FLAGS {VM_FLAGS_SUPERPAGE_NONE = 0,VM_FLAGS_SUPERPAGE_SIZE_ANY = 65536,};
enum MACRO_VM_FLAGS_SUPERPAGE : __int64 {VM_FLAGS_SUPERPAGE_SIZE_2MB = 131072,VM_FLAGS_ALIAS_MASK = 4278190080,VM_FLAGS_USER_ALLOCATE = 4278665235,VM_FLAGS_USER_MAP = 4278665235,VM_FLAGS_USER_REMAP = 16385,VM_MEMORY_MALLOC = 1,VM_MEMORY_MALLOC_SMALL = 2,VM_MEMORY_MALLOC_LARGE = 3,VM_MEMORY_MALLOC_HUGE = 4,VM_MEMORY_SBRK = 5,VM_MEMORY_REALLOC = 6,VM_MEMORY_MALLOC_TINY = 7,VM_MEMORY_MALLOC_LARGE_REUSABLE = 8,VM_MEMORY_MALLOC_LARGE_REUSED = 9,VM_MEMORY_ANALYSIS_TOOL = 10,VM_MEMORY_MACH_MSG = 20,VM_MEMORY_IOKIT = 21,VM_MEMORY_STACK = 30,VM_MEMORY_GUARD = 31,VM_MEMORY_SHARED_PMAP = 32,VM_MEMORY_DYLIB = 33,VM_MEMORY_OBJC_DISPATCHERS = 34,VM_MEMORY_APPKIT = 40,VM_MEMORY_FOUNDATION = 41,VM_MEMORY_COREGRAPHICS = 42,VM_MEMORY_CARBON = 43,VM_MEMORY_JAVA = 44,VM_MEMORY_ATS = 50,VM_MEMORY_LAYERKIT = 51,VM_MEMORY_CGIMAGE = 52,VM_MEMORY_TCMALLOC = 53,VM_MEMORY_COREGRAPHICS_DATA = 54,VM_MEMORY_COREGRAPHICS_SHARED = 55,VM_MEMORY_COREGRAPHICS_FRAMEBUFFERS = 56,VM_MEMORY_COREGRAPHICS_BACKINGSTORES = 57,VM_MEMORY_COREGRAPHICS_MISC = 42,VM_MEMORY_DYLD = 60,VM_MEMORY_DYLD_MALLOC = 61,VM_MEMORY_SQLITE = 62,VM_MEMORY_JAVASCRIPT_CORE = 63,VM_MEMORY_JAVASCRIPT_JIT_EXECUTABLE_ALLOCATOR = 64,VM_MEMORY_JAVASCRIPT_JIT_REGISTER_FILE = 65,VM_MEMORY_GLSL = 66,VM_MEMORY_OPENCL = 67,VM_MEMORY_COREIMAGE = 68,VM_MEMORY_WEBCORE_PURGEABLE_BUFFERS = 69,VM_MEMORY_IMAGEIO = 70,VM_MEMORY_COREPROFILE = 71,VM_MEMORY_ASSETSD = 72,VM_MEMORY_APPLICATION_SPECIFIC_1 = 240,VM_MEMORY_APPLICATION_SPECIFIC_16 = 255,};
enum MACRO_VM_INHERIT {VM_INHERIT_SHARE = 0,VM_INHERIT_COPY = 1,VM_INHERIT_NONE = 2,VM_INHERIT_DONATE_COPY = 3,VM_INHERIT_DEFAULT = 1,VM_INHERIT_LAST_VALID = 2,VM_PURGABLE_SET_STATE = 0,VM_PURGABLE_GET_STATE = 1,VM_PURGABLE_PURGE_ALL = 2,VM_PURGABLE_DEBUG_SHIFT = 12,VM_PURGABLE_DEBUG_MASK = 12288,VM_PURGABLE_DEBUG_EMPTY = 4096,VM_PURGABLE_DEBUG_FAULT = 8192,VM_VOLATILE_GROUP_SHIFT = 8,VM_VOLATILE_GROUP_MASK = 1792,VM_VOLATILE_GROUP_0 = 0,VM_VOLATILE_GROUP_1 = 256,VM_VOLATILE_GROUP_2 = 512,VM_VOLATILE_GROUP_3 = 768,VM_VOLATILE_GROUP_4 = 1024,VM_VOLATILE_GROUP_5 = 1280,VM_VOLATILE_GROUP_6 = 1536,VM_VOLATILE_GROUP_7 = 1792,VM_PURGABLE_BEHAVIOR_SHIFT = 6,VM_PURGABLE_BEHAVIOR_MASK = 64,VM_PURGABLE_BEHAVIOR_FIFO = 0,VM_PURGABLE_BEHAVIOR_LIFO = 64,VM_PURGABLE_ORDERING_SHIFT = 5,VM_PURGABLE_ORDERING_MASK = 32,VM_PURGABLE_ORDERING_OBSOLETE = 32,VM_PURGABLE_ORDERING_NORMAL = 0,VM_VOLATILE_ORDER_SHIFT = 4,VM_VOLATILE_ORDER_MASK = 16,VM_VOLATILE_MAKE_FIRST_IN_GROUP = 16,VM_VOLATILE_MAKE_LAST_IN_GROUP = 0,VM_PURGABLE_STATE_MIN = 0,VM_PURGABLE_STATE_MAX = 3,VM_PURGABLE_STATE_MASK = 3,VM_PURGABLE_NONVOLATILE = 0,VM_PURGABLE_VOLATILE = 1,VM_PURGABLE_EMPTY = 2,VM_PURGABLE_DENY = 3,VM_PURGABLE_ALL_MASKS = 14195,VM_BEHAVIOR_DEFAULT = 0,VM_BEHAVIOR_RANDOM = 1,VM_BEHAVIOR_SEQUENTIAL = 2,VM_BEHAVIOR_RSEQNTL = 3,VM_BEHAVIOR_WILLNEED = 4,VM_BEHAVIOR_DONTNEED = 5,VM_BEHAVIOR_FREE = 6,VM_BEHAVIOR_ZERO_WIRED_PAGES = 7,VM_BEHAVIOR_REUSABLE = 8,VM_BEHAVIOR_REUSE = 9,VM_BEHAVIOR_CAN_REUSE = 10,VM_REGION_INFO_MAX = 1024,VM_REGION_BASIC_INFO_64 = 9,VM_REGION_BASIC_INFO = 10,VM_REGION_EXTENDED_INFO = 11,};
enum MACRO_VM_MAP {VM_MAP_NULL = 0,UPL_NULL = 0,VM_NAMED_ENTRY_NULL = 0,MEMORY_OBJECT_NULL = 0,MEMORY_OBJECT_CONTROL_NULL = 0,MEMORY_OBJECT_NAME_NULL = 0,MEMORY_OBJECT_DEFAULT_NULL = 0,};
enum MACRO_VM_METER {VM_METER = 1,VM_LOADAVG = 2,VM_MACHFACTOR = 4,VM_SWAPUSAGE = 5,VM_MAXID = 6,};
enum MACRO_VM_PAGE {VM_PAGE_QUERY_PAGE_PRESENT = 0x1,VM_PAGE_QUERY_PAGE_FICTITIOUS = 0x2,VM_PAGE_QUERY_PAGE_REF = 0x4,VM_PAGE_QUERY_PAGE_DIRTY = 0x8,VM_PAGE_QUERY_PAGE_PAGED_OUT = 0x10,VM_PAGE_QUERY_PAGE_COPIED = 0x20,VM_PAGE_QUERY_PAGE_SPECULATIVE = 0x40,VM_PAGE_QUERY_PAGE_EXTERNAL = 0x80,VM_PAGE_QUERY_PAGE_CS_VALIDATED = 0x100,VM_PAGE_QUERY_PAGE_CS_TAINTED = 0x200,VM_FLAGS_FIXED = 0x0,VM_FLAGS_ANYWHERE = 0x1,VM_FLAGS_PURGABLE = 0x2,VM_FLAGS_NO_CACHE = 0x10,VM_FLAGS_OVERWRITE = 0x4000,VM_FLAGS_SUPERPAGE_MASK = 0x70000,VM_FLAGS_SUPERPAGE_SHIFT = 0x10,};
enum MACRO_VM_PROT {VM_PROT_NONE = 0x0,VM_PROT_READ = 0x1,VM_PROT_WRITE = 0x2,VM_PROT_EXECUTE = 0x4,VM_PROT_DEFAULT = 0x3,VM_PROT_ALL = 0x7,VM_PROT_NO_CHANGE = 0x8,VM_PROT_COPY = 0x10,VM_PROT_WANTS_COPY = 0x10,VM_PROT_IS_MASK = 0x40,VM_SYNC_ASYNCHRONOUS = 0x1,VM_SYNC_SYNCHRONOUS = 0x2,VM_SYNC_INVALIDATE = 0x4,VM_SYNC_KILLPAGES = 0x8,VM_SYNC_DEACTIVATE = 0x10,VM_SYNC_CONTIGUOUS = 0x20,VM_SYNC_REUSABLEPAGES = 0x40,};
enum MACRO_VM_REGION {VM_REGION_TOP_INFO = 12,VM_MAP_ENTRY_MAX = 256,VM_PAGE_INFO_BASIC = 1,};
enum MACRO_VN {VN_LABELS = 0x1,VN_FOLLOW = 0x2,VN_DEBUG = 0x4,VN_IO = 0x8,VN_DONTCLUSTER = 0x10,VN_RESERVE = 0x20,};
enum MACRO_VNODE {VNODE_READ = 0x1,VNODE_WRITE = 0x2,};
enum MACRO_VNOVAL : __int64 {VNOVAL = -1,};
enum MACRO_VOL {VOL_CAPABILITIES_FORMAT = 0,VOL_CAPABILITIES_INTERFACES = 1,VOL_CAPABILITIES_RESERVED1 = 2,VOL_CAPABILITIES_RESERVED2 = 3,};
enum MACRO_VOL_CAP {VOL_CAP_FMT_PERSISTENTOBJECTIDS = 0x1,VOL_CAP_FMT_SYMBOLICLINKS = 0x2,VOL_CAP_FMT_HARDLINKS = 0x4,VOL_CAP_FMT_JOURNAL = 0x8,VOL_CAP_FMT_JOURNAL_ACTIVE = 0x10,VOL_CAP_FMT_NO_ROOT_TIMES = 0x20,VOL_CAP_FMT_SPARSE_FILES = 0x40,VOL_CAP_FMT_ZERO_RUNS = 0x80,VOL_CAP_FMT_CASE_SENSITIVE = 0x100,VOL_CAP_FMT_CASE_PRESERVING = 0x200,VOL_CAP_FMT_FAST_STATFS = 0x400,VOL_CAP_FMT_2TB_FILESIZE = 0x800,VOL_CAP_FMT_OPENDENYMODES = 0x1000,VOL_CAP_FMT_HIDDEN_FILES = 0x2000,VOL_CAP_FMT_PATH_FROM_ID = 0x4000,VOL_CAP_FMT_NO_VOLUME_SIZES = 0x8000,VOL_CAP_FMT_DECMPFS_COMPRESSION = 0x10000,VOL_CAP_FMT_64BIT_OBJECT_IDS = 0x20000,VOL_CAP_INT_SEARCHFS = 0x1,VOL_CAP_INT_ATTRLIST = 0x2,VOL_CAP_INT_NFSEXPORT = 0x4,VOL_CAP_INT_READDIRATTR = 0x8,VOL_CAP_INT_EXCHANGEDATA = 0x10,VOL_CAP_INT_COPYFILE = 0x20,VOL_CAP_INT_ALLOCATE = 0x40,VOL_CAP_INT_VOL_RENAME = 0x80,VOL_CAP_INT_ADVLOCK = 0x100,VOL_CAP_INT_FLOCK = 0x200,VOL_CAP_INT_EXTENDED_SECURITY = 0x400,VOL_CAP_INT_USERACCESS = 0x800,VOL_CAP_INT_MANLOCK = 0x1000,VOL_CAP_INT_NAMEDSTREAMS = 0x2000,VOL_CAP_INT_EXTENDED_ATTR = 0x4000,};
enum MACRO_VPRINT {VPRINT = 0x40,VPLOT = 0x80,VPRINTPLOT = 0x100,};
enum MACRO_VQ {VQ_NOTRESP = 0x1,VQ_NEEDAUTH = 0x2,VQ_LOWDISK = 0x4,VQ_MOUNT = 0x8,VQ_UNMOUNT = 0x10,VQ_DEAD = 0x20,VQ_ASSIST = 0x40,VQ_NOTRESPLOCK = 0x80,VQ_UPDATE = 0x100,VQ_VERYLOWDISK = 0x200,VQ_SYNCEVENT = 0x400,VQ_FLAG0800 = 0x800,VQ_FLAG1000 = 0x1000,VQ_FLAG2000 = 0x2000,VQ_FLAG4000 = 0x4000,VQ_FLAG8000 = 0x8000,};
enum MACRO_VQUIT {VQUIT = 9,};
enum MACRO_VREPRINT {VREPRINT = 6,VINTR = 8,};
enum MACRO_VSTART {VSTART = 12,};
enum MACRO_VSTATUS {VSTATUS = 18,};
enum MACRO_VSTOP {VSTOP = 13,};
enum MACRO_VSUSP {VSUSP = 10,};
enum MACRO_VT0 {VT0 = 0x0,VT1 = 0x10000,};
enum MACRO_VTAB {VTAB = 5,};
enum MACRO_VTIME {VTIME = 17,};
enum MACRO_VTR {VTR_DISABLE = 0,VTR_ENABLE = 1,VTR_VALUE = 2,VTR_UALARM = 3,VTR_STAMP = 4,};
enum MACRO_VTRACE {VTRACE = 115,};
enum MACRO_V_ASN1 : __int64 {V_ASN1_UNIVERSAL = 0x0,V_ASN1_APPLICATION = 0x40,V_ASN1_CONTEXT_SPECIFIC = 0x80,V_ASN1_PRIVATE = 0xC0,V_ASN1_CONSTRUCTED = 0x20,V_ASN1_PRIMITIVE_TAG = 0x1F,V_ASN1_PRIMATIVE_TAG = 0x1F,V_ASN1_APP_CHOOSE = 0xFFFFFFFFFFFFFFFE,V_ASN1_OTHER = 0xFFFFFFFFFFFFFFFD,V_ASN1_ANY = 0xFFFFFFFFFFFFFFFC,V_ASN1_NEG = 0x100,V_ASN1_UNDEF = 0xFFFFFFFFFFFFFFFF,V_ASN1_EOC = 0x0,V_ASN1_BOOLEAN = 0x1,V_ASN1_INTEGER = 0x2,V_ASN1_NEG_INTEGER = 0x102,V_ASN1_BIT_STRING = 0x3,V_ASN1_OCTET_STRING = 0x4,V_ASN1_NULL = 0x5,V_ASN1_OBJECT = 0x6,V_ASN1_OBJECT_DESCRIPTOR = 0x7,V_ASN1_EXTERNAL = 0x8,V_ASN1_REAL = 0x9,V_ASN1_ENUMERATED = 0xA,V_ASN1_NEG_ENUMERATED = 0x10A,V_ASN1_UTF8STRING = 0xC,V_ASN1_SEQUENCE = 0x10,V_ASN1_SET = 0x11,V_ASN1_NUMERICSTRING = 0x12,V_ASN1_PRINTABLESTRING = 0x13,V_ASN1_T61STRING = 0x14,V_ASN1_TELETEXSTRING = 0x14,V_ASN1_VIDEOTEXSTRING = 0x15,V_ASN1_IA5STRING = 0x16,V_ASN1_UTCTIME = 0x17,V_ASN1_GENERALIZEDTIME = 0x18,V_ASN1_GRAPHICSTRING = 0x19,V_ASN1_ISO64STRING = 0x1A,V_ASN1_VISIBLESTRING = 0x1A,V_ASN1_GENERALSTRING = 0x1B,V_ASN1_UNIVERSALSTRING = 0x1C,V_ASN1_BMPSTRING = 0x1E,};
enum MACRO_V_OCSP {V_OCSP_RESPID_NAME = 0,V_OCSP_RESPID_KEY = 1,V_OCSP_CERTSTATUS_GOOD = 0,V_OCSP_CERTSTATUS_REVOKED = 1,V_OCSP_CERTSTATUS_UNKNOWN = 2,};
enum MACRO_WAIT : __int64 {WAIT_ANY = -1,WAIT_MYPGRP = 0,};
enum MACRO_WAITTIME {MIN_WAITTIME = 2,MAX_WAITTIME = 5,};
enum MACRO_WALLPROC {WALLPROC_WALL = 2,};
enum MACRO_WALLPROG {WALLPROG = 100008,};
enum MACRO_WALLVERS {WALLVERS = 1,};
enum MACRO_WATCHER {WATCHER_FIXED_SIZE = 0x1,WATCHER_MAX_SIZE = 0x2,WATCHER_SIZE_IS_PTR = 0x4,WATCHER_SIZE_STRLEN = 0x8,WATCHER_SIZE_UNIT_OIDS = 0x10,};
enum MACRO_WCHAR : __int64 {WCHAR_MIN = -2147483648,WINT_MIN = -2147483648,};
enum MACRO_WEOF : __int64 {WEOF = -1,};
enum MACRO_WEXITED {WEXITED = 0x4,WSTOPPED = 0x8,WCONTINUED = 0x10,WNOWAIT = 0x20,};
enum MACRO_WHODTYPE {WHODTYPE_STATUS = 1,};
enum MACRO_WHODVERSION {WHODVERSION = 1,};
enum MACRO_WILL {WILL = 251,};
enum MACRO_WINDOW {TCPOPT_WINDOW = 3,TCPOLEN_WINDOW = 3,};
enum MACRO_WINT {WINT_MAX = 2147483647,};
enum MACRO_WMESGLEN {WMESGLEN = 7,};
enum MACRO_WNOHANG {WNOHANG = 0x1,WUNTRACED = 0x2,WCOREFLAG = 0x80,};
enum MACRO_WONT {WONT = 252,};
enum MACRO_WORD {WORD_BIT = 32,};
enum MACRO_WQ {WQ_EXCEEDED_CONSTRAINED_THREAD_LIMIT = 0x1,WQ_EXCEEDED_TOTAL_THREAD_LIMIT = 0x2,};
enum MACRO_WRDE {WRDE_APPEND = 0x1,WRDE_DOOFFS = 0x2,WRDE_NOCMD = 0x4,WRDE_REUSE = 0x8,WRDE_SHOWERR = 0x10,WRDE_UNDEF = 0x20,WRDE_BADCHAR = 0x1,WRDE_BADVAL = 0x2,WRDE_CMDSUB = 0x3,WRDE_NOSPACE = 0x4,WRDE_NOSYS = 0x5,WRDE_SYNTAX = 0x6,};
enum MACRO_WRITE {WRITE = 0,};
enum MACRO_X509 {X509_FILETYPE_PEM = 1,X509_FILETYPE_ASN1 = 2,X509_FILETYPE_DEFAULT = 3,};
enum MACRO_X509V3 {X509V3_EXT_DYNAMIC = 0x1,X509V3_EXT_CTX_DEP = 0x2,X509V3_EXT_MULTILINE = 0x4,};
enum MACRO_X509V3_EXT {X509V3_EXT_UNKNOWN_MASK = 0xF0000,X509V3_EXT_DEFAULT = 0x0,X509V3_EXT_ERROR_UNKNOWN = 0x10000,X509V3_EXT_PARSE_UNKNOWN = 0x20000,X509V3_EXT_DUMP_UNKNOWN = 0x30000,X509V3_ADD_OP_MASK = 0xF,X509V3_ADD_DEFAULT = 0x0,X509V3_ADD_APPEND = 0x1,X509V3_ADD_REPLACE = 0x2,X509V3_ADD_REPLACE_EXISTING = 0x3,X509V3_ADD_KEEP_EXISTING = 0x4,X509V3_ADD_DELETE = 0x5,X509V3_ADD_SILENT = 0x10,X509V3_F_ASIDENTIFIERCHOICE_CANONIZE = 0x9C,X509V3_F_ASIDENTIFIERCHOICE_IS_CANONICAL = 0x9D,X509V3_F_COPY_EMAIL = 0x7A,X509V3_F_COPY_ISSUER = 0x7B,X509V3_F_DO_DIRNAME = 0x90,X509V3_F_DO_EXT_CONF = 0x7C,X509V3_F_DO_EXT_I2D = 0x87,X509V3_F_DO_EXT_NCONF = 0x97,X509V3_F_DO_I2V_NAME_CONSTRAINTS = 0x94,X509V3_F_HEX_TO_STRING = 0x6F,X509V3_F_I2S_ASN1_ENUMERATED = 0x79,X509V3_F_I2S_ASN1_IA5STRING = 0x95,X509V3_F_I2S_ASN1_INTEGER = 0x78,X509V3_F_I2V_AUTHORITY_INFO_ACCESS = 0x8A,X509V3_F_NOTICE_SECTION = 0x84,X509V3_F_NREF_NOS = 0x85,X509V3_F_POLICY_SECTION = 0x83,X509V3_F_PROCESS_PCI_VALUE = 0x96,X509V3_F_R2I_CERTPOL = 0x82,X509V3_F_R2I_PCI = 0x9B,X509V3_F_S2I_ASN1_IA5STRING = 0x64,X509V3_F_S2I_ASN1_INTEGER = 0x6C,X509V3_F_S2I_ASN1_OCTET_STRING = 0x70,X509V3_F_S2I_ASN1_SKEY_ID = 0x72,X509V3_F_S2I_SKEY_ID = 0x73,X509V3_F_STRING_TO_HEX = 0x71,X509V3_F_SXNET_ADD_ID_ASC = 0x7D,X509V3_F_SXNET_ADD_ID_INTEGER = 0x7E,X509V3_F_SXNET_ADD_ID_ULONG = 0x7F,X509V3_F_SXNET_GET_ID_ASC = 0x80,X509V3_F_SXNET_GET_ID_ULONG = 0x81,X509V3_F_V2I_ASIDENTIFIERS = 0x9E,X509V3_F_V2I_ASN1_BIT_STRING = 0x65,X509V3_F_V2I_AUTHORITY_INFO_ACCESS = 0x8B,X509V3_F_V2I_AUTHORITY_KEYID = 0x77,X509V3_F_V2I_BASIC_CONSTRAINTS = 0x66,X509V3_F_V2I_CRLD = 0x86,X509V3_F_V2I_EXTENDED_KEY_USAGE = 0x67,X509V3_F_V2I_GENERAL_NAMES = 0x76,X509V3_F_V2I_GENERAL_NAME_EX = 0x75,X509V3_F_V2I_IPADDRBLOCKS = 0x9F,X509V3_F_V2I_ISSUER_ALT = 0x99,X509V3_F_V2I_NAME_CONSTRAINTS = 0x93,X509V3_F_V2I_POLICY_CONSTRAINTS = 0x92,X509V3_F_V2I_POLICY_MAPPINGS = 0x91,X509V3_F_V2I_SUBJECT_ALT = 0x9A,X509V3_F_V3_ADDR_VALIDATE_PATH_INTERNAL = 0xA0,X509V3_F_V3_GENERIC_EXTENSION = 0x74,X509V3_F_X509V3_ADD1_I2D = 0x8C,X509V3_F_X509V3_ADD_VALUE = 0x69,X509V3_F_X509V3_EXT_ADD = 0x68,X509V3_F_X509V3_EXT_ADD_ALIAS = 0x6A,X509V3_F_X509V3_EXT_CONF = 0x6B,X509V3_F_X509V3_EXT_I2D = 0x88,X509V3_F_X509V3_EXT_NCONF = 0x98,X509V3_F_X509V3_GET_SECTION = 0x8E,X509V3_F_X509V3_GET_STRING = 0x8F,X509V3_F_X509V3_GET_VALUE_BOOL = 0x6E,X509V3_F_X509V3_PARSE_LIST = 0x6D,X509V3_F_X509_PURPOSE_ADD = 0x89,X509V3_F_X509_PURPOSE_SET = 0x8D,X509V3_R_BAD_IP_ADDRESS = 0x76,X509V3_R_BAD_OBJECT = 0x77,X509V3_R_BN_DEC2BN_ERROR = 0x64,X509V3_R_BN_TO_ASN1_INTEGER_ERROR = 0x65,X509V3_R_DIRNAME_ERROR = 0x95,X509V3_R_DUPLICATE_ZONE_ID = 0x85,X509V3_R_ERROR_CONVERTING_ZONE = 0x83,X509V3_R_ERROR_CREATING_EXTENSION = 0x90,X509V3_R_ERROR_IN_EXTENSION = 0x80,X509V3_R_EXPECTED_A_SECTION_NAME = 0x89,X509V3_R_EXTENSION_EXISTS = 0x91,X509V3_R_EXTENSION_NAME_ERROR = 0x73,X509V3_R_EXTENSION_NOT_FOUND = 0x66,X509V3_R_EXTENSION_SETTING_NOT_SUPPORTED = 0x67,X509V3_R_EXTENSION_VALUE_ERROR = 0x74,X509V3_R_ILLEGAL_EMPTY_EXTENSION = 0x97,X509V3_R_ILLEGAL_HEX_DIGIT = 0x71,X509V3_R_INCORRECT_POLICY_SYNTAX_TAG = 0x98,X509V3_R_INVALID_ASNUMBER = 0xA0,X509V3_R_INVALID_ASRANGE = 0xA1,X509V3_R_INVALID_BOOLEAN_STRING = 0x68,X509V3_R_INVALID_EXTENSION_STRING = 0x69,X509V3_R_INVALID_INHERITANCE = 0xA2,X509V3_R_INVALID_IPADDRESS = 0xA3,X509V3_R_INVALID_NAME = 0x6A,X509V3_R_INVALID_NULL_ARGUMENT = 0x6B,X509V3_R_INVALID_NULL_NAME = 0x6C,X509V3_R_INVALID_NULL_VALUE = 0x6D,X509V3_R_INVALID_NUMBER = 0x8C,X509V3_R_INVALID_NUMBERS = 0x8D,X509V3_R_INVALID_OBJECT_IDENTIFIER = 0x6E,X509V3_R_INVALID_OPTION = 0x8A,X509V3_R_INVALID_POLICY_IDENTIFIER = 0x86,X509V3_R_INVALID_PROXY_POLICY_SETTING = 0x99,X509V3_R_INVALID_PURPOSE = 0x92,X509V3_R_INVALID_SAFI = 0xA4,X509V3_R_INVALID_SECTION = 0x87,X509V3_R_INVALID_SYNTAX = 0x8F,X509V3_R_ISSUER_DECODE_ERROR = 0x7E,X509V3_R_MISSING_VALUE = 0x7C,X509V3_R_NEED_ORGANIZATION_AND_NUMBERS = 0x8E,X509V3_R_NO_CONFIG_DATABASE = 0x88,X509V3_R_NO_ISSUER_CERTIFICATE = 0x79,X509V3_R_NO_ISSUER_DETAILS = 0x7F,X509V3_R_NO_POLICY_IDENTIFIER = 0x8B,X509V3_R_NO_PROXY_CERT_POLICY_LANGUAGE_DEFINED = 0x9A,X509V3_R_NO_PUBLIC_KEY = 0x72,X509V3_R_NO_SUBJECT_DETAILS = 0x7D,X509V3_R_ODD_NUMBER_OF_DIGITS = 0x70,X509V3_R_OPERATION_NOT_DEFINED = 0x94,X509V3_R_OTHERNAME_ERROR = 0x93,X509V3_R_POLICY_LANGUAGE_ALREADTY_DEFINED = 0x9B,X509V3_R_POLICY_PATH_LENGTH = 0x9C,X509V3_R_POLICY_PATH_LENGTH_ALREADTY_DEFINED = 0x9D,X509V3_R_POLICY_SYNTAX_NOT_CURRENTLY_SUPPORTED = 0x9E,X509V3_R_POLICY_WHEN_PROXY_LANGUAGE_REQUIRES_NO_POLICY = 0x9F,X509V3_R_SECTION_NOT_FOUND = 0x96,X509V3_R_UNABLE_TO_GET_ISSUER_DETAILS = 0x7A,X509V3_R_UNABLE_TO_GET_ISSUER_KEYID = 0x7B,X509V3_R_UNKNOWN_BIT_STRING_ARGUMENT = 0x6F,X509V3_R_UNKNOWN_EXTENSION = 0x81,X509V3_R_UNKNOWN_EXTENSION_NAME = 0x82,X509V3_R_UNKNOWN_OPTION = 0x78,X509V3_R_UNSUPPORTED_OPTION = 0x75,X509V3_R_USER_TOO_LONG = 0x84,};
enum MACRO_X509_EX : __int64 {X509_EX_V_NETSCAPE_HACK = 0x8000,X509_EX_V_INIT = 0x1,X509_TRUST_DEFAULT = 0xFFFFFFFFFFFFFFFF,X509_TRUST_COMPAT = 0x1,X509_TRUST_SSL_CLIENT = 0x2,X509_TRUST_SSL_SERVER = 0x3,X509_TRUST_EMAIL = 0x4,X509_TRUST_OBJECT_SIGN = 0x5,X509_TRUST_OCSP_SIGN = 0x6,X509_TRUST_OCSP_REQUEST = 0x7,X509_TRUST_MIN = 0x1,X509_TRUST_MAX = 0x7,X509_TRUST_DYNAMIC = 0x1,X509_TRUST_DYNAMIC_NAME = 0x2,X509_TRUST_TRUSTED = 0x1,X509_TRUST_REJECTED = 0x2,X509_TRUST_UNTRUSTED = 0x3,X509_FLAG_COMPAT = 0x0,X509_FLAG_NO_HEADER = 0x1,X509_FLAG_NO_VERSION = 0x2,X509_FLAG_NO_SERIAL = 0x4,X509_FLAG_NO_SIGNAME = 0x8,X509_FLAG_NO_ISSUER = 0x10,X509_FLAG_NO_VALIDITY = 0x20,X509_FLAG_NO_SUBJECT = 0x40,X509_FLAG_NO_PUBKEY = 0x80,X509_FLAG_NO_EXTENSIONS = 0x100,X509_FLAG_NO_SIGDUMP = 0x200,X509_FLAG_NO_AUX = 0x400,X509_FLAG_NO_ATTRIBUTES = 0x800,};
enum MACRO_X509_EXT {X509_EXT_PACK_UNKNOWN = 1,X509_EXT_PACK_STRING = 2,X509_F_ADD_CERT_DIR = 100,X509_F_BY_FILE_CTRL = 101,X509_F_CHECK_POLICY = 145,X509_F_DIR_CTRL = 102,X509_F_GET_CERT_BY_SUBJECT = 103,X509_F_NETSCAPE_SPKI_B64_DECODE = 129,X509_F_NETSCAPE_SPKI_B64_ENCODE = 130,X509_F_X509AT_ADD1_ATTR = 135,X509_F_X509V3_ADD_EXT = 104,X509_F_X509_ATTRIBUTE_CREATE_BY_NID = 136,X509_F_X509_ATTRIBUTE_CREATE_BY_OBJ = 137,X509_F_X509_ATTRIBUTE_CREATE_BY_TXT = 140,X509_F_X509_ATTRIBUTE_GET0_DATA = 139,X509_F_X509_ATTRIBUTE_SET1_DATA = 138,X509_F_X509_CHECK_PRIVATE_KEY = 128,X509_F_X509_CRL_PRINT_FP = 147,X509_F_X509_EXTENSION_CREATE_BY_NID = 108,X509_F_X509_EXTENSION_CREATE_BY_OBJ = 109,X509_F_X509_GET_PUBKEY_PARAMETERS = 110,X509_F_X509_LOAD_CERT_CRL_FILE = 132,X509_F_X509_LOAD_CERT_FILE = 111,X509_F_X509_LOAD_CRL_FILE = 112,X509_F_X509_NAME_ADD_ENTRY = 113,X509_F_X509_NAME_ENTRY_CREATE_BY_NID = 114,X509_F_X509_NAME_ENTRY_CREATE_BY_TXT = 131,X509_F_X509_NAME_ENTRY_SET_OBJECT = 115,X509_F_X509_NAME_ONELINE = 116,X509_F_X509_NAME_PRINT = 117,X509_F_X509_PRINT_EX_FP = 118,X509_F_X509_PUBKEY_GET = 119,X509_F_X509_PUBKEY_SET = 120,X509_F_X509_REQ_CHECK_PRIVATE_KEY = 144,X509_F_X509_REQ_PRINT_EX = 121,X509_F_X509_REQ_PRINT_FP = 122,X509_F_X509_REQ_TO_X509 = 123,X509_F_X509_STORE_ADD_CERT = 124,X509_F_X509_STORE_ADD_CRL = 125,X509_F_X509_STORE_CTX_GET1_ISSUER = 146,X509_F_X509_STORE_CTX_INIT = 143,X509_F_X509_STORE_CTX_NEW = 142,X509_F_X509_STORE_CTX_PURPOSE_INHERIT = 134,X509_F_X509_TO_X509_REQ = 126,X509_F_X509_TRUST_ADD = 133,X509_F_X509_TRUST_SET = 141,X509_F_X509_VERIFY_CERT = 127,X509_R_BAD_X509_FILETYPE = 100,X509_R_BASE64_DECODE_ERROR = 118,X509_R_CANT_CHECK_DH_KEY = 114,X509_R_CERT_ALREADY_IN_HASH_TABLE = 101,X509_R_ERR_ASN1_LIB = 102,X509_R_INVALID_DIRECTORY = 113,X509_R_INVALID_FIELD_NAME = 119,X509_R_INVALID_TRUST = 123,X509_R_KEY_TYPE_MISMATCH = 115,X509_R_KEY_VALUES_MISMATCH = 116,X509_R_LOADING_CERT_DIR = 103,X509_R_LOADING_DEFAULTS = 104,X509_R_NO_CERT_SET_FOR_US_TO_VERIFY = 105,X509_R_SHOULD_RETRY = 106,X509_R_UNABLE_TO_FIND_PARAMETERS_IN_CHAIN = 107,X509_R_UNABLE_TO_GET_CERTS_PUBLIC_KEY = 108,X509_R_UNKNOWN_KEY_TYPE = 117,X509_R_UNKNOWN_NID = 109,X509_R_UNKNOWN_PURPOSE_ID = 121,X509_R_UNKNOWN_TRUST_ID = 120,X509_R_UNSUPPORTED_ALGORITHM = 111,X509_R_WRONG_LOOKUP_TYPE = 112,X509_R_WRONG_TYPE = 122,};
enum MACRO_X509_LU : __int64 {X509_LU_RETRY = -1,X509_LU_FAIL = 0,X509_LU_X509 = 1,X509_LU_CRL = 2,X509_LU_PKEY = 3,X509_L_FILE_LOAD = 1,X509_L_ADD_DIR = 2,X509_V_OK = 0,X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT = 2,X509_V_ERR_UNABLE_TO_GET_CRL = 3,X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE = 4,X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE = 5,X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY = 6,X509_V_ERR_CERT_SIGNATURE_FAILURE = 7,X509_V_ERR_CRL_SIGNATURE_FAILURE = 8,X509_V_ERR_CERT_NOT_YET_VALID = 9,X509_V_ERR_CERT_HAS_EXPIRED = 10,X509_V_ERR_CRL_NOT_YET_VALID = 11,X509_V_ERR_CRL_HAS_EXPIRED = 12,X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD = 13,X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD = 14,X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD = 15,X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD = 16,X509_V_ERR_OUT_OF_MEM = 17,X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT = 18,X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN = 19,X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY = 20,X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE = 21,X509_V_ERR_CERT_CHAIN_TOO_LONG = 22,X509_V_ERR_CERT_REVOKED = 23,X509_V_ERR_INVALID_CA = 24,X509_V_ERR_PATH_LENGTH_EXCEEDED = 25,X509_V_ERR_INVALID_PURPOSE = 26,X509_V_ERR_CERT_UNTRUSTED = 27,X509_V_ERR_CERT_REJECTED = 28,X509_V_ERR_SUBJECT_ISSUER_MISMATCH = 29,X509_V_ERR_AKID_SKID_MISMATCH = 30,X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH = 31,X509_V_ERR_KEYUSAGE_NO_CERTSIGN = 32,X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER = 33,X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION = 34,X509_V_ERR_KEYUSAGE_NO_CRL_SIGN = 35,X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION = 36,X509_V_ERR_INVALID_NON_CA = 37,X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED = 38,X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE = 39,X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED = 40,X509_V_ERR_INVALID_EXTENSION = 41,X509_V_ERR_INVALID_POLICY_EXTENSION = 42,X509_V_ERR_NO_EXPLICIT_POLICY = 43,X509_V_ERR_UNNESTED_RESOURCE = 44,X509_V_ERR_APPLICATION_VERIFICATION = 50,X509_V_FLAG_CB_ISSUER_CHECK = 1,X509_V_FLAG_USE_CHECK_TIME = 2,X509_V_FLAG_CRL_CHECK = 4,X509_V_FLAG_CRL_CHECK_ALL = 8,X509_V_FLAG_IGNORE_CRITICAL = 16,X509_V_FLAG_X509_STRICT = 32,X509_V_FLAG_ALLOW_PROXY_CERTS = 64,X509_V_FLAG_POLICY_CHECK = 128,X509_V_FLAG_EXPLICIT_POLICY = 256,X509_V_FLAG_INHIBIT_ANY = 512,X509_V_FLAG_INHIBIT_MAP = 1024,X509_V_FLAG_NOTIFY_POLICY = 2048,X509_V_FLAG_CHECK_SS_SIGNATURE = 16384,X509_VP_FLAG_DEFAULT = 1,X509_VP_FLAG_OVERWRITE = 2,X509_VP_FLAG_RESET_FLAGS = 4,X509_VP_FLAG_LOCKED = 8,X509_VP_FLAG_ONCE = 16,X509_V_FLAG_POLICY_MASK = 1920,};
enum MACRO_X509_PURPOSE {X509_PURPOSE_DYNAMIC = 0x1,X509_PURPOSE_DYNAMIC_NAME = 0x2,X509_PURPOSE_SSL_CLIENT = 0x1,X509_PURPOSE_SSL_SERVER = 0x2,X509_PURPOSE_NS_SSL_SERVER = 0x3,X509_PURPOSE_SMIME_SIGN = 0x4,X509_PURPOSE_SMIME_ENCRYPT = 0x5,X509_PURPOSE_CRL_SIGN = 0x6,X509_PURPOSE_ANY = 0x7,X509_PURPOSE_OCSP_HELPER = 0x8,X509_PURPOSE_MIN = 0x1,X509_PURPOSE_MAX = 0x8,};
enum MACRO_X509v3 {X509v3_KU_DIGITAL_SIGNATURE = 0x80,X509v3_KU_NON_REPUDIATION = 0x40,X509v3_KU_KEY_ENCIPHERMENT = 0x20,X509v3_KU_DATA_ENCIPHERMENT = 0x10,X509v3_KU_KEY_AGREEMENT = 0x8,X509v3_KU_KEY_CERT_SIGN = 0x4,X509v3_KU_CRL_SIGN = 0x2,X509v3_KU_ENCIPHER_ONLY = 0x1,X509v3_KU_DECIPHER_ONLY = 0x8000,X509v3_KU_UNDEF = 0xFFFF,};
enum MACRO_XATTR {XATTR_NOFOLLOW = 0x1,XATTR_CREATE = 0x2,XATTR_REPLACE = 0x4,XATTR_NOSECURITY = 0x8,XATTR_NODEFAULT = 0x10,XATTR_SHOWCOMPRESSION = 0x20,XATTR_MAXNAMELEN = 0x7F,};
enum MACRO_XB {XB_CLEANUP = 0x1,};
enum MACRO_XDRWORD {XDRWORD = 4,};
enum MACRO_XKU {XKU_SSL_SERVER = 0x1,XKU_SSL_CLIENT = 0x2,XKU_SMIME = 0x4,XKU_CODE_SIGN = 0x8,XKU_SGC = 0x10,XKU_OCSP_SIGN = 0x20,XKU_TIMESTAMP = 0x40,XKU_DVCS = 0x80,};
enum MACRO_XML : __int64 {XML_DETECT_IDS = 2,XML_COMPLETE_ATTRS = 4,XML_SKIP_IDS = 8,XML_SAX2_MAGIC = 3740122799,};
enum MACRO_XML_MAX {XML_MAX_TEXT_LENGTH = 10000000,XML_MAX_NAMELEN = 100,};
enum MACRO_XML_SUBSTITUTE {XML_SUBSTITUTE_NONE = 0,XML_SUBSTITUTE_REF = 1,XML_SUBSTITUTE_PEREF = 2,XML_SUBSTITUTE_BOTH = 3,XML_SCHEMAS_ANYATTR_SKIP = 1,XML_SCHEMAS_ANYATTR_LAX = 2,XML_SCHEMAS_ANYATTR_STRICT = 3,XML_SCHEMAS_ANY_SKIP = 1,XML_SCHEMAS_ANY_LAX = 2,XML_SCHEMAS_ANY_STRICT = 3,XML_SCHEMAS_ATTR_USE_PROHIBITED = 0,XML_SCHEMAS_ATTR_USE_REQUIRED = 1,XML_SCHEMAS_ATTR_USE_OPTIONAL = 2,XML_SCHEMAS_ATTR_GLOBAL = 1,XML_SCHEMAS_ATTR_NSDEFAULT = 128,XML_SCHEMAS_ATTR_INTERNAL_RESOLVED = 256,XML_SCHEMAS_ATTR_FIXED = 512,XML_SCHEMAS_WILDCARD_COMPLETE = 1,XML_SCHEMAS_ATTRGROUP_WILDCARD_BUILDED = 1,XML_SCHEMAS_ATTRGROUP_GLOBAL = 2,XML_SCHEMAS_ATTRGROUP_MARKED = 4,XML_SCHEMAS_ATTRGROUP_REDEFINED = 8,XML_SCHEMAS_ATTRGROUP_HAS_REFS = 16,XML_SCHEMAS_TYPE_MIXED = 1,XML_SCHEMAS_TYPE_DERIVATION_METHOD_EXTENSION = 2,XML_SCHEMAS_TYPE_DERIVATION_METHOD_RESTRICTION = 4,XML_SCHEMAS_TYPE_GLOBAL = 8,XML_SCHEMAS_TYPE_OWNED_ATTR_WILDCARD = 16,XML_SCHEMAS_TYPE_VARIETY_ABSENT = 32,XML_SCHEMAS_TYPE_VARIETY_LIST = 64,XML_SCHEMAS_TYPE_VARIETY_UNION = 128,XML_SCHEMAS_TYPE_VARIETY_ATOMIC = 256,XML_SCHEMAS_TYPE_FINAL_EXTENSION = 512,XML_SCHEMAS_TYPE_FINAL_RESTRICTION = 1024,XML_SCHEMAS_TYPE_FINAL_LIST = 2048,XML_SCHEMAS_TYPE_FINAL_UNION = 4096,XML_SCHEMAS_TYPE_FINAL_DEFAULT = 8192,XML_SCHEMAS_TYPE_BUILTIN_PRIMITIVE = 16384,XML_SCHEMAS_TYPE_MARKED = 65536,XML_SCHEMAS_TYPE_BLOCK_DEFAULT = 131072,XML_SCHEMAS_TYPE_BLOCK_EXTENSION = 262144,XML_SCHEMAS_TYPE_BLOCK_RESTRICTION = 524288,XML_SCHEMAS_TYPE_ABSTRACT = 1048576,XML_SCHEMAS_TYPE_FACETSNEEDVALUE = 2097152,XML_SCHEMAS_TYPE_INTERNAL_RESOLVED = 4194304,XML_SCHEMAS_TYPE_INTERNAL_INVALID = 8388608,XML_SCHEMAS_TYPE_WHITESPACE_PRESERVE = 16777216,XML_SCHEMAS_TYPE_WHITESPACE_REPLACE = 33554432,XML_SCHEMAS_TYPE_WHITESPACE_COLLAPSE = 67108864,XML_SCHEMAS_TYPE_HAS_FACETS = 134217728,XML_SCHEMAS_TYPE_NORMVALUENEEDED = 268435456,XML_SCHEMAS_TYPE_FIXUP_1 = 536870912,XML_SCHEMAS_TYPE_REDEFINED = 1073741824,XML_SCHEMAS_ELEM_NILLABLE = 1,XML_SCHEMAS_ELEM_GLOBAL = 2,XML_SCHEMAS_ELEM_DEFAULT = 4,XML_SCHEMAS_ELEM_FIXED = 8,XML_SCHEMAS_ELEM_ABSTRACT = 16,XML_SCHEMAS_ELEM_TOPLEVEL = 32,XML_SCHEMAS_ELEM_REF = 64,XML_SCHEMAS_ELEM_NSDEFAULT = 128,XML_SCHEMAS_ELEM_INTERNAL_RESOLVED = 256,XML_SCHEMAS_ELEM_CIRCULAR = 512,XML_SCHEMAS_ELEM_BLOCK_ABSENT = 1024,XML_SCHEMAS_ELEM_BLOCK_EXTENSION = 2048,XML_SCHEMAS_ELEM_BLOCK_RESTRICTION = 4096,XML_SCHEMAS_ELEM_BLOCK_SUBSTITUTION = 8192,XML_SCHEMAS_ELEM_FINAL_ABSENT = 16384,XML_SCHEMAS_ELEM_FINAL_EXTENSION = 32768,XML_SCHEMAS_ELEM_FINAL_RESTRICTION = 65536,XML_SCHEMAS_ELEM_SUBST_GROUP_HEAD = 131072,XML_SCHEMAS_ELEM_INTERNAL_CHECKED = 262144,XML_SCHEMAS_FACET_UNKNOWN = 0,XML_SCHEMAS_FACET_PRESERVE = 1,XML_SCHEMAS_FACET_REPLACE = 2,XML_SCHEMAS_FACET_COLLAPSE = 3,XML_SCHEMAS_QUALIF_ELEM = 1,XML_SCHEMAS_QUALIF_ATTR = 2,XML_SCHEMAS_FINAL_DEFAULT_EXTENSION = 4,XML_SCHEMAS_FINAL_DEFAULT_RESTRICTION = 8,XML_SCHEMAS_FINAL_DEFAULT_LIST = 16,XML_SCHEMAS_FINAL_DEFAULT_UNION = 32,XML_SCHEMAS_BLOCK_DEFAULT_EXTENSION = 64,XML_SCHEMAS_BLOCK_DEFAULT_RESTRICTION = 128,XML_SCHEMAS_BLOCK_DEFAULT_SUBSTITUTION = 256,XML_SCHEMAS_INCLUDING_CONVERT_NS = 512,};
enum MACRO_XML_XPATH {XML_XPATH_CHECKNS = 1,XML_XPATH_NOVAR = 2,};
enum MACRO_XN {XN_FLAG_SEP_MASK = 0xF0000,XN_FLAG_COMPAT = 0x0,XN_FLAG_SEP_COMMA_PLUS = 0x10000,XN_FLAG_SEP_CPLUS_SPC = 0x20000,XN_FLAG_SEP_SPLUS_SPC = 0x30000,XN_FLAG_SEP_MULTILINE = 0x40000,XN_FLAG_DN_REV = 0x100000,XN_FLAG_FN_MASK = 0x600000,XN_FLAG_FN_SN = 0x0,XN_FLAG_FN_LN = 0x200000,XN_FLAG_FN_OID = 0x400000,XN_FLAG_FN_NONE = 0x600000,XN_FLAG_SPC_EQ = 0x800000,XN_FLAG_DUMP_UNKNOWN_FIELDS = 0x1000000,XN_FLAG_FN_ALIGN = 0x2000000,XN_FLAG_RFC2253 = 0x1110317,XN_FLAG_ONELINE = 0x82031F,XN_FLAG_MULTILINE = 0x2A40006,};
enum MACRO_XPLUGIN {XPLUGIN_H = 1,XPLUGIN_VERSION = 4,};
enum MACRO_XSLT : __int64 {XSLT_MAX_SORT = 15,XSLT_PAT_NO_PRIORITY = -12345789,XSLT_VAR_GLOBAL = 1,XSLT_VAR_IN_SELECT = 2,};
enum MACRO_XSLT_TIMESTAMP {XSLT_TIMESTAMP_TICS_PER_SEC = 100000,};
enum MACRO_XTABS {XTABS = 0xC00,CRDELAY = 0x3000,VTDELAY = 0x4000,BSDELAY = 0x8000,};
enum MACRO_XUCRED {XUCRED_VERSION = 0,};
enum MACRO_YESEXPR {YESEXPR = 52,};
enum MACRO_YESSTR {YESSTR = 54,};
enum MACRO_YPBIND {YPBIND_ERR_ERR = 1,YPBIND_ERR_NOSERV = 2,YPBIND_ERR_RESC = 3,};
enum MACRO_YPBINDPROC {YPBINDPROC_NULL = 0,YPBINDPROC_DOMAIN = 1,YPBINDPROC_SETDOM = 2,};
enum MACRO_YPBINDPROG {YPBINDPROG = 100007,};
enum MACRO_YPBINDVERS {YPBINDVERS = 2,};
enum MACRO_YPERR {YPERR_BADARGS = 1,YPERR_RPC = 2,YPERR_DOMAIN = 3,YPERR_MAP = 4,YPERR_KEY = 5,YPERR_YPERR = 6,YPERR_RESRC = 7,YPERR_NOMORE = 8,YPERR_PMAP = 9,YPERR_YPBIND = 10,YPERR_YPSERV = 11,YPERR_NODOM = 12,YPERR_BADDB = 13,YPERR_VERS = 14,YPERR_ACCESS = 15,YPERR_BUSY = 16,};
enum MACRO_YPMAXDOMAIN {YPMAXDOMAIN = 64,};
enum MACRO_YPMAXMAP {YPMAXMAP = 64,};
enum MACRO_YPMAXPEER {YPMAXPEER = 64,};
enum MACRO_YPMAXRECORD {YPMAXRECORD = 1024,};
enum MACRO_YPOLDPROC {YPOLDPROC_NULL = 0,YPOLDPROC_DOMAIN = 1,YPOLDPROC_DOMAIN_NONACK = 2,YPOLDPROC_MATCH = 3,YPOLDPROC_FIRST = 4,YPOLDPROC_NEXT = 5,YPOLDPROC_POLL = 6,YPOLDPROC_PUSH = 7,YPOLDPROC_PULL = 8,YPOLDPROC_GET = 9,};
enum MACRO_YPOLDVERS {YPOLDVERS = 1,};
enum MACRO_YPOP {YPOP_CHANGE = 1,YPOP_INSERT = 2,YPOP_DELETE = 3,YPOP_STORE = 4,};
enum MACRO_YPPASSWDPROC {YPPASSWDPROC_UPDATE = 1,};
enum MACRO_YPPASSWDPROG {YPPASSWDPROG = 100009,};
enum MACRO_YPPASSWDVERS {YPPASSWDVERS = 1,};
enum MACRO_YPPROC {YPPROC_NULL = 0,YPPROC_DOMAIN = 1,YPPROC_DOMAIN_NONACK = 2,YPPROC_MATCH = 3,YPPROC_FIRST = 4,YPPROC_NEXT = 5,YPPROC_XFR = 6,YPPROC_CLEAR = 7,YPPROC_ALL = 8,YPPROC_MASTER = 9,YPPROC_ORDER = 10,YPPROC_MAPLIST = 11,};
enum MACRO_YPPROG {YPPROG = 100004,};
enum MACRO_YPPUSH {YPPUSH_XFRRESPPROG = 0x40000000,YPPUSH_XFRRESPVERS = 0x1,};
enum MACRO_YPPUSHPROC {YPPUSHPROC_NULL = 0,YPPUSHPROC_XFRRESP = 1,};
enum MACRO_YPVERS {YPVERS = 2,};
enum MACRO_Z : __int64 {Z_NO_FLUSH = 0,Z_PARTIAL_FLUSH = 1,Z_SYNC_FLUSH = 2,Z_FULL_FLUSH = 3,Z_FINISH = 4,Z_BLOCK = 5,Z_TREES = 6,Z_OK = 0,Z_STREAM_END = 1,Z_NEED_DICT = 2,Z_ERRNO = -1,Z_STREAM_ERROR = -2,Z_DATA_ERROR = -3,Z_MEM_ERROR = -4,Z_BUF_ERROR = -5,Z_VERSION_ERROR = -6,Z_NO_COMPRESSION = 0,Z_BEST_SPEED = 1,Z_BEST_COMPRESSION = 9,Z_DEFAULT_COMPRESSION = -1,Z_FILTERED = 1,Z_HUFFMAN_ONLY = 2,Z_RLE = 3,Z_FIXED = 4,Z_DEFAULT_STRATEGY = 0,Z_BINARY = 0,Z_TEXT = 1,Z_ASCII = 1,Z_UNKNOWN = 2,Z_DEFLATED = 8,Z_NULL = 0,};
enum MACRO_ZALLOC {ZALLOC_CODE = 19988496,ZALLOC_CODE_2 = 19988500,};
enum MACRO_ZFREE {ZFREE_CODE = 19988504,ZFREE_CODE_2 = 19988508,};
enum MACRO_ZLIB {ZLIB_VERNUM = 0x1250,ZLIB_VER_MAJOR = 0x1,ZLIB_VER_MINOR = 0x2,ZLIB_VER_REVISION = 0x5,ZLIB_VER_SUBREVISION = 0x0,};
enum MACRO_ZONE_NAME_MAX_LEN {ZONE_NAME_MAX_LEN = 80,MACH_ZONE_NAME_MAX_LEN = 80,};
enum MACRO__ACCESS {_ACCESS_EXTENDED_MASK = 4193792,};
enum MACRO__BSD {_BSD_I386_VMPARAM_H_ = 1,};
enum MACRO__CACHED {_CACHED_RUNES = 256,};
enum MACRO__CRMASK : __int64 {_CRMASK = -256,};
enum MACRO__CS {_CS_PATH = 1,};
enum MACRO__CS_POSIX {_CS_POSIX_V6_ILP32_OFF32_CFLAGS = 2,_CS_POSIX_V6_ILP32_OFF32_LDFLAGS = 3,_CS_POSIX_V6_ILP32_OFF32_LIBS = 4,_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS = 5,_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS = 6,_CS_POSIX_V6_ILP32_OFFBIG_LIBS = 7,_CS_POSIX_V6_LP64_OFF64_CFLAGS = 8,_CS_POSIX_V6_LP64_OFF64_LDFLAGS = 9,_CS_POSIX_V6_LP64_OFF64_LIBS = 10,_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS = 11,_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS = 12,_CS_POSIX_V6_LPBIG_OFFBIG_LIBS = 13,_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS = 14,_CS_XBS5_ILP32_OFF32_CFLAGS = 20,_CS_XBS5_ILP32_OFF32_LDFLAGS = 21,_CS_XBS5_ILP32_OFF32_LIBS = 22,_CS_XBS5_ILP32_OFF32_LINTFLAGS = 23,_CS_XBS5_ILP32_OFFBIG_CFLAGS = 24,_CS_XBS5_ILP32_OFFBIG_LDFLAGS = 25,_CS_XBS5_ILP32_OFFBIG_LIBS = 26,_CS_XBS5_ILP32_OFFBIG_LINTFLAGS = 27,_CS_XBS5_LP64_OFF64_CFLAGS = 28,_CS_XBS5_LP64_OFF64_LDFLAGS = 29,_CS_XBS5_LP64_OFF64_LIBS = 30,_CS_XBS5_LP64_OFF64_LINTFLAGS = 31,_CS_XBS5_LPBIG_OFFBIG_CFLAGS = 32,_CS_XBS5_LPBIG_OFFBIG_LDFLAGS = 33,_CS_XBS5_LPBIG_OFFBIG_LIBS = 34,_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS = 35,_CS_DARWIN_USER_DIR = 65536,_CS_DARWIN_USER_TEMP_DIR = 65537,_CS_DARWIN_USER_CACHE_DIR = 65538,};
enum MACRO__CTYPE : __int64 {_CTYPE_A = 0x100,_CTYPE_C = 0x200,_CTYPE_D = 0x400,_CTYPE_G = 0x800,_CTYPE_L = 0x1000,_CTYPE_P = 0x2000,_CTYPE_S = 0x4000,_CTYPE_U = 0x8000,_CTYPE_X = 0x10000,_CTYPE_B = 0x20000,_CTYPE_R = 0x40000,_CTYPE_I = 0x80000,_CTYPE_T = 0x100000,_CTYPE_Q = 0x200000,_CTYPE_SW0 = 0x20000000,_CTYPE_SW1 = 0x40000000,_CTYPE_SW2 = 0x80000000,_CTYPE_SW3 = 0xC0000000,_CTYPE_SWM = 0xE0000000,_CTYPE_SWS = 0x1E,};
enum MACRO__DARWIN {_DARWIN_FEATURE_64_BIT_INODE = 1,_DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1,_DARWIN_FEATURE_UNIX_CONFORMANCE = 3,};
enum MACRO__DNS {_DNS_SD_H = 3201000,_DNS_SD_LIBDISPATCH = 1,};
enum MACRO__FILESEC {_FILESEC_UNSET_PROPERTY = 0,_FILESEC_REMOVE_ACL = 1,};
enum MACRO__FORTIFY {_FORTIFY_SOURCE = 2,};
enum MACRO__GLOB : __int64 {_GLOB_ERR_BLOCK = 0x80000000,};
enum MACRO__I386 {_I386_SIGNAL_H_ = 1,};
enum MACRO__IOFBF {_IOFBF = 0,_IOLBF = 1,_IONBF = 2,BUFSIZ = 1024,};
enum MACRO__JBLEN {_JBLEN = 37,};
enum MACRO__LC {_LC_LAST = 7,};
enum MACRO__LC_NUM {_LC_NUM_MASK = 6,_LC_LAST_MASK = 32,};
enum MACRO__LDAP {_LDAP_FEATURES_H = 1,};
enum MACRO__LDAP_SCHEMA {_LDAP_SCHEMA_H = 1,};
enum MACRO__LIBICONV {_LIBICONV_VERSION = 0x10B,};
enum MACRO__MACH {_MACH_INIT_ = 1,};
enum MACRO__MACH_ERROR {_MACH_ERROR_ = 1,};
enum MACRO__NET {_NET_IF_MIB_H = 1,};
enum MACRO__NEWINDEX : __int64 {_NEWINDEX = -1,};
enum MACRO__NOCHANGE : __int64 {_NOCHANGE = -1,};
enum MACRO__PASSWORD : __int64 {_PASSWORD_EFMT1 = 95,_PASSWORD_LEN = 128,_PASSWORD_NOUID = 1,_PASSWORD_NOGID = 2,_PASSWORD_NOCHG = 4,_PASSWORD_NOEXP = 8,_PASSWORD_WARNDAYS = 14,_PASSWORD_CHGNOW = -1,};
enum MACRO__PC {_PC_LINK_MAX = 1,_PC_MAX_CANON = 2,_PC_MAX_INPUT = 3,_PC_NAME_MAX = 4,_PC_PATH_MAX = 5,_PC_PIPE_BUF = 6,_PC_CHOWN_RESTRICTED = 7,_PC_NO_TRUNC = 8,_PC_VDISABLE = 9,_PC_NAME_CHARS_MAX = 10,_PC_CASE_SENSITIVE = 11,_PC_CASE_PRESERVING = 12,_PC_EXTENDED_SECURITY_NP = 13,_PC_AUTH_OPAQUE_NP = 14,_PC_2_SYMLINKS = 15,_PC_ALLOC_SIZE_MIN = 16,_PC_ASYNC_IO = 17,_PC_FILESIZEBITS = 18,_PC_PRIO_IO = 19,_PC_REC_INCR_XFER_SIZE = 20,_PC_REC_MAX_XFER_SIZE = 21,_PC_REC_MIN_XFER_SIZE = 22,_PC_REC_XFER_ALIGN = 23,_PC_SYMLINK_MAX = 24,_PC_SYNC_IO = 25,_PC_XATTR_SIZE_BITS = 26,};
enum MACRO__POSIX {_POSIX_VDISABLE = 255,_POSIX_THREAD_KEYS_MAX = 128,};
enum MACRO__POSIX2 : __int64 {_POSIX2_C_BIND = 200112,_POSIX2_C_DEV = 200112,_POSIX2_CHAR_TERM = 200112,_POSIX2_FORT_DEV = -1,_POSIX2_FORT_RUN = 200112,_POSIX2_LOCALEDEF = 200112,_POSIX2_PBS = -1,_POSIX2_PBS_ACCOUNTING = -1,_POSIX2_PBS_CHECKPOINT = -1,_POSIX2_PBS_LOCATE = -1,_POSIX2_PBS_MESSAGE = -1,_POSIX2_PBS_TRACK = -1,_POSIX2_SW_DEV = 200112,_POSIX2_UPE = 200112,};
enum MACRO__POSIX2_BC {_POSIX2_BC_BASE_MAX = 99,_POSIX2_BC_DIM_MAX = 2048,_POSIX2_BC_SCALE_MAX = 99,_POSIX2_BC_STRING_MAX = 1000,_POSIX2_EQUIV_CLASS_MAX = 2,_POSIX2_EXPR_NEST_MAX = 32,_POSIX2_LINE_MAX = 2048,_POSIX2_RE_DUP_MAX = 255,};
enum MACRO__POSIX2_CHARCLASS {_POSIX2_CHARCLASS_NAME_MAX = 14,_POSIX2_COLL_WEIGHTS_MAX = 2,};
enum MACRO__POSIX_ADVISORY : __int64 {_POSIX_ADVISORY_INFO = -1,_POSIX_ASYNCHRONOUS_IO = -1,_POSIX_BARRIERS = -1,_POSIX_CHOWN_RESTRICTED = 200112,_POSIX_CLOCK_SELECTION = -1,_POSIX_CPUTIME = -1,_POSIX_FSYNC = 200112,_POSIX_IPV6 = 200112,_POSIX_JOB_CONTROL = 200112,_POSIX_MAPPED_FILES = 200112,_POSIX_MEMLOCK = -1,_POSIX_MEMLOCK_RANGE = -1,_POSIX_MEMORY_PROTECTION = 200112,_POSIX_MESSAGE_PASSING = -1,_POSIX_MONOTONIC_CLOCK = -1,_POSIX_NO_TRUNC = 200112,_POSIX_PRIORITIZED_IO = -1,_POSIX_PRIORITY_SCHEDULING = -1,_POSIX_RAW_SOCKETS = -1,_POSIX_READER_WRITER_LOCKS = 200112,_POSIX_REALTIME_SIGNALS = -1,_POSIX_REGEXP = 200112,_POSIX_SAVED_IDS = 200112,_POSIX_SEMAPHORES = -1,_POSIX_SHARED_MEMORY_OBJECTS = -1,_POSIX_SHELL = 200112,_POSIX_SPAWN = -1,_POSIX_SPIN_LOCKS = -1,_POSIX_SPORADIC_SERVER = -1,_POSIX_SYNCHRONIZED_IO = -1,_POSIX_THREAD_ATTR_STACKADDR = 200112,_POSIX_THREAD_ATTR_STACKSIZE = 200112,_POSIX_THREAD_CPUTIME = -1,_POSIX_THREAD_PRIO_INHERIT = -1,_POSIX_THREAD_PRIO_PROTECT = -1,_POSIX_THREAD_PRIORITY_SCHEDULING = -1,_POSIX_THREAD_PROCESS_SHARED = 200112,_POSIX_THREAD_SAFE_FUNCTIONS = 200112,_POSIX_THREAD_SPORADIC_SERVER = -1,_POSIX_THREADS = 200112,_POSIX_TIMEOUTS = -1,_POSIX_TIMERS = -1,_POSIX_TRACE = -1,_POSIX_TRACE_EVENT_FILTER = -1,_POSIX_TRACE_INHERIT = -1,_POSIX_TRACE_LOG = -1,_POSIX_TYPED_MEMORY_OBJECTS = -1,};
enum MACRO__POSIX_AIO {_POSIX_AIO_LISTIO_MAX = 2,_POSIX_AIO_MAX = 1,_POSIX_DELAYTIMER_MAX = 32,_POSIX_MQ_OPEN_MAX = 8,_POSIX_MQ_PRIO_MAX = 32,_POSIX_RTSIG_MAX = 8,_POSIX_SEM_NSEMS_MAX = 256,_POSIX_SEM_VALUE_MAX = 32767,_POSIX_SIGQUEUE_MAX = 32,_POSIX_TIMER_MAX = 32,_POSIX_THREAD_DESTRUCTOR_ITERATIONS = 4,_POSIX_THREAD_THREADS_MAX = 64,_POSIX_HOST_NAME_MAX = 255,_POSIX_LOGIN_NAME_MAX = 9,_POSIX_SS_REPL_MAX = 4,_POSIX_SYMLINK_MAX = 255,_POSIX_SYMLOOP_MAX = 8,_POSIX_TRACE_EVENT_NAME_MAX = 30,_POSIX_TRACE_NAME_MAX = 8,_POSIX_TRACE_SYS_MAX = 8,_POSIX_TRACE_USER_EVENT_MAX = 32,_POSIX_TTY_NAME_MAX = 9,};
enum MACRO__POSIX_ARG {_POSIX_ARG_MAX = 4096,_POSIX_CHILD_MAX = 25,_POSIX_LINK_MAX = 8,_POSIX_MAX_CANON = 255,_POSIX_MAX_INPUT = 255,_POSIX_NAME_MAX = 14,_POSIX_NGROUPS_MAX = 8,_POSIX_OPEN_MAX = 20,_POSIX_PATH_MAX = 256,_POSIX_PIPE_BUF = 512,_POSIX_SSIZE_MAX = 32767,_POSIX_STREAM_MAX = 8,_POSIX_TZNAME_MAX = 6,};
enum MACRO__POSIX_PTHREAD {_POSIX_PTHREAD_SEMANTICS = 1,};
enum MACRO__POSIX_RE {_POSIX_RE_DUP_MAX = 255,};
enum MACRO__POSIX_V6 : __int64 {_POSIX_V6_ILP32_OFF32 = -1,_POSIX_V6_ILP32_OFFBIG = -1,_POSIX_V6_LP64_OFF64 = 1,_POSIX_V6_LPBIG_OFFBIG = 1,_POSIX_V7_ILP32_OFF32 = -1,_POSIX_V7_ILP32_OFFBIG = -1,_POSIX_V7_LP64_OFF64 = 1,_POSIX_V7_LPBIG_OFFBIG = 1,};
enum MACRO__PTHREAD {_PTHREAD_MUTEX_SIG_init = 0x32AAABA7,_PTHREAD_ERRORCHECK_MUTEX_SIG_init = 0x32AAABA1,_PTHREAD_RECURSIVE_MUTEX_SIG_init = 0x32AAABA2,_PTHREAD_FIRSTFIT_MUTEX_SIG_init = 0x32AAABA3,_PTHREAD_COND_SIG_init = 0x3CB0B1BB,_PTHREAD_ONCE_SIG_init = 0x30B1BCBA,_PTHREAD_RWLOCK_SIG_init = 0x2DA8B3B4,};
enum MACRO__PW {_PW_KEYBYNAME = 49,_PW_KEYBYNUM = 50,_PW_KEYBYUID = 51,};
enum MACRO__QUAD {_QUAD_HIGHWORD = 1,_QUAD_LOWWORD = 0,};
enum MACRO__RLIMIT {_RLIMIT_POSIX_FLAG = 0x1000,};
enum MACRO__SC {_SC_ARG_MAX = 1,_SC_CHILD_MAX = 2,_SC_CLK_TCK = 3,_SC_NGROUPS_MAX = 4,_SC_OPEN_MAX = 5,_SC_JOB_CONTROL = 6,_SC_SAVED_IDS = 7,_SC_VERSION = 8,_SC_BC_BASE_MAX = 9,_SC_BC_DIM_MAX = 10,_SC_BC_SCALE_MAX = 11,_SC_BC_STRING_MAX = 12,_SC_COLL_WEIGHTS_MAX = 13,_SC_EXPR_NEST_MAX = 14,_SC_LINE_MAX = 15,_SC_RE_DUP_MAX = 16,_SC_2_VERSION = 17,_SC_2_C_BIND = 18,_SC_2_C_DEV = 19,_SC_2_CHAR_TERM = 20,_SC_2_FORT_DEV = 21,_SC_2_FORT_RUN = 22,_SC_2_LOCALEDEF = 23,_SC_2_SW_DEV = 24,_SC_2_UPE = 25,_SC_STREAM_MAX = 26,_SC_TZNAME_MAX = 27,_SC_ASYNCHRONOUS_IO = 28,_SC_PAGESIZE = 29,_SC_MEMLOCK = 30,_SC_MEMLOCK_RANGE = 31,_SC_MEMORY_PROTECTION = 32,_SC_MESSAGE_PASSING = 33,_SC_PRIORITIZED_IO = 34,_SC_PRIORITY_SCHEDULING = 35,_SC_REALTIME_SIGNALS = 36,_SC_SEMAPHORES = 37,_SC_FSYNC = 38,_SC_SHARED_MEMORY_OBJECTS = 39,_SC_SYNCHRONIZED_IO = 40,_SC_TIMERS = 41,_SC_AIO_LISTIO_MAX = 42,_SC_AIO_MAX = 43,_SC_AIO_PRIO_DELTA_MAX = 44,_SC_DELAYTIMER_MAX = 45,_SC_MQ_OPEN_MAX = 46,_SC_MAPPED_FILES = 47,_SC_RTSIG_MAX = 48,_SC_SEM_NSEMS_MAX = 49,_SC_SEM_VALUE_MAX = 50,_SC_SIGQUEUE_MAX = 51,_SC_TIMER_MAX = 52,_SC_NPROCESSORS_CONF = 57,_SC_NPROCESSORS_ONLN = 58,_SC_2_PBS = 59,_SC_2_PBS_ACCOUNTING = 60,_SC_2_PBS_CHECKPOINT = 61,_SC_2_PBS_LOCATE = 62,_SC_2_PBS_MESSAGE = 63,_SC_2_PBS_TRACK = 64,_SC_ADVISORY_INFO = 65,_SC_BARRIERS = 66,_SC_CLOCK_SELECTION = 67,_SC_CPUTIME = 68,_SC_FILE_LOCKING = 69,_SC_GETGR_R_SIZE_MAX = 70,_SC_GETPW_R_SIZE_MAX = 71,_SC_HOST_NAME_MAX = 72,_SC_LOGIN_NAME_MAX = 73,_SC_MONOTONIC_CLOCK = 74,_SC_MQ_PRIO_MAX = 75,_SC_READER_WRITER_LOCKS = 76,_SC_REGEXP = 77,_SC_SHELL = 78,_SC_SPAWN = 79,_SC_SPIN_LOCKS = 80,_SC_SPORADIC_SERVER = 81,_SC_THREAD_ATTR_STACKADDR = 82,_SC_THREAD_ATTR_STACKSIZE = 83,_SC_THREAD_CPUTIME = 84,_SC_THREAD_DESTRUCTOR_ITERATIONS = 85,_SC_THREAD_KEYS_MAX = 86,_SC_THREAD_PRIO_INHERIT = 87,_SC_THREAD_PRIO_PROTECT = 88,_SC_THREAD_PRIORITY_SCHEDULING = 89,_SC_THREAD_PROCESS_SHARED = 90,_SC_THREAD_SAFE_FUNCTIONS = 91,_SC_THREAD_SPORADIC_SERVER = 92,_SC_THREAD_STACK_MIN = 93,_SC_THREAD_THREADS_MAX = 94,_SC_TIMEOUTS = 95,_SC_THREADS = 96,_SC_TRACE = 97,_SC_TRACE_EVENT_FILTER = 98,_SC_TRACE_INHERIT = 99,_SC_TRACE_LOG = 100,_SC_TTY_NAME_MAX = 101,_SC_TYPED_MEMORY_OBJECTS = 102,_SC_V6_ILP32_OFF32 = 103,_SC_V6_ILP32_OFFBIG = 104,_SC_V6_LP64_OFF64 = 105,_SC_V6_LPBIG_OFFBIG = 106,_SC_IPV6 = 118,_SC_RAW_SOCKETS = 119,_SC_SYMLOOP_MAX = 120,_SC_ATEXIT_MAX = 107,_SC_IOV_MAX = 56,_SC_PAGE_SIZE = 29,_SC_XOPEN_CRYPT = 108,_SC_XOPEN_ENH_I18N = 109,_SC_XOPEN_LEGACY = 110,_SC_XOPEN_REALTIME = 111,_SC_XOPEN_REALTIME_THREADS = 112,_SC_XOPEN_SHM = 113,_SC_XOPEN_STREAMS = 114,_SC_XOPEN_UNIX = 115,_SC_XOPEN_VERSION = 116,_SC_XOPEN_XCU_VERSION = 121,_SC_XBS5_ILP32_OFF32 = 122,_SC_XBS5_ILP32_OFFBIG = 123,_SC_XBS5_LP64_OFF64 = 124,_SC_XBS5_LPBIG_OFFBIG = 125,_SC_SS_REPL_MAX = 126,_SC_TRACE_EVENT_NAME_MAX = 127,_SC_TRACE_NAME_MAX = 128,_SC_TRACE_SYS_MAX = 129,_SC_TRACE_USER_EVENT_MAX = 130,_SC_PASS_MAX = 131,};
enum MACRO__SS {_SS_MAXSIZE = 128,};
enum MACRO__SYS {_SYS_CONF_H_ = 1,};
enum MACRO__SYS_NAMELEN {_SYS_NAMELEN = 256,};
enum MACRO__TANDEM {_TANDEM_SOURCE = 1,};
enum MACRO__USE {_USE_FORTIFY_LEVEL = 2,};
enum MACRO__UTX {_UTX_USERSIZE = 256,_UTX_LINESIZE = 32,_UTX_IDSIZE = 4,_UTX_HOSTSIZE = 256,};
enum MACRO__V6 : __int64 {_V6_ILP32_OFF32 = -1,_V6_ILP32_OFFBIG = -1,_V6_LP64_OFF64 = 1,_V6_LPBIG_OFFBIG = 1,};
enum MACRO__WSTOPPED {_WSTOPPED = 0x7F,};
enum MACRO__XBS5 : __int64 {_XBS5_ILP32_OFF32 = -1,_XBS5_ILP32_OFFBIG = -1,_XBS5_LP64_OFF64 = 1,_XBS5_LPBIG_OFFBIG = 1,};
enum MACRO__XOPEN {_XOPEN_VERSION = 600,_XOPEN_XCU_VERSION = 4,};
enum MACRO__XOPEN_CRYPT : __int64 {_XOPEN_CRYPT = 1,_XOPEN_ENH_I18N = 1,_XOPEN_LEGACY = -1,_XOPEN_REALTIME = -1,_XOPEN_REALTIME_THREADS = -1,_XOPEN_SHM = 1,_XOPEN_STREAMS = -1,_XOPEN_UNIX = 1,};
enum MACRO__XOPEN_IOV {_XOPEN_IOV_MAX = 16,IOV_MAX = 1024,_XOPEN_NAME_MAX = 255,_XOPEN_PATH_MAX = 1024,};
enum MACRO___APPLE {__APPLE_API_STRICT_CONFORMANCE = 1,};
enum MACRO___ASSERT {__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES = 1,};
enum MACRO___BIND {__BIND = 19950621,};
enum MACRO___CTERMID {__CTERMID_DEFINED = 1,};
enum MACRO___DARWIN {__DARWIN_ONLY_64_BIT_INO_T = 0,__DARWIN_ONLY_VERS_1050 = 0,__DARWIN_ONLY_UNIX_CONFORMANCE = 1,__DARWIN_UNIX03 = 1,__DARWIN_64_BIT_INO_T = 1,__DARWIN_VERS_1050 = 1,__DARWIN_NON_CANCELABLE = 0,__DARWIN_C_ANSI = 4096,__DARWIN_C_FULL = 900000,__DARWIN_C_LEVEL = 900000,__DARWIN_LONG_DOUBLE_IS_DOUBLE = 0,};
enum MACRO___DARWIN_ACL {__DARWIN_ACL_READ_DATA = 2,__DARWIN_ACL_LIST_DIRECTORY = 2,__DARWIN_ACL_WRITE_DATA = 4,__DARWIN_ACL_ADD_FILE = 4,__DARWIN_ACL_EXECUTE = 8,__DARWIN_ACL_SEARCH = 8,__DARWIN_ACL_DELETE = 16,__DARWIN_ACL_APPEND_DATA = 32,__DARWIN_ACL_ADD_SUBDIRECTORY = 32,__DARWIN_ACL_DELETE_CHILD = 64,__DARWIN_ACL_READ_ATTRIBUTES = 128,__DARWIN_ACL_WRITE_ATTRIBUTES = 256,__DARWIN_ACL_READ_EXTATTRIBUTES = 512,__DARWIN_ACL_WRITE_EXTATTRIBUTES = 1024,__DARWIN_ACL_READ_SECURITY = 2048,__DARWIN_ACL_WRITE_SECURITY = 4096,__DARWIN_ACL_CHANGE_OWNER = 8192,__DARWIN_ACL_EXTENDED_ALLOW = 1,__DARWIN_ACL_EXTENDED_DENY = 2,__DARWIN_ACL_ENTRY_INHERITED = 16,__DARWIN_ACL_ENTRY_FILE_INHERIT = 32,__DARWIN_ACL_ENTRY_DIRECTORY_INHERIT = 64,__DARWIN_ACL_ENTRY_LIMIT_INHERIT = 128,__DARWIN_ACL_ENTRY_ONLY_INHERIT = 256,__DARWIN_ACL_FLAG_NO_INHERIT = 131072,};
enum MACRO___DARWIN_CLK {__DARWIN_CLK_TCK = 100,};
enum MACRO___DARWIN_FD {__DARWIN_FD_SETSIZE = 1024,__DARWIN_NBBY = 8,};
enum MACRO___DARWIN_LITTLE {__DARWIN_LITTLE_ENDIAN = 1234,__DARWIN_BIG_ENDIAN = 4321,__DARWIN_PDP_ENDIAN = 3412,__DARWIN_BYTE_ORDER = 1234,};
enum MACRO___DARWIN_MAXNAMLEN {__DARWIN_MAXNAMLEN = 255,__DARWIN_MAXPATHLEN = 1024,};
enum MACRO___DARWIN_NSIG {__DARWIN_NSIG = 32,};
enum MACRO___DARWIN_NULL : __int64 {__DARWIN_NULL = 0,__DARWIN_WCHAR_MAX = 2147483647,__DARWIN_WCHAR_MIN = -2147483648,__DARWIN_WEOF = -1,};
enum MACRO___DTF {__DTF_READALL = 0x8,};
enum MACRO___EXTENSIONS {__EXTENSIONS__ = 1,};
enum MACRO___ILP32 : __int64 {__ILP32_OFF32 = -1,__ILP32_OFFBIG = -1,};
enum MACRO___IPHONE {__IPHONE_2_0 = 20000,__IPHONE_2_1 = 20100,__IPHONE_2_2 = 20200,__IPHONE_3_0 = 30000,__IPHONE_3_1 = 30100,__IPHONE_3_2 = 30200,__IPHONE_4_0 = 40000,__IPHONE_4_1 = 40100,__IPHONE_4_2 = 40200,__IPHONE_4_3 = 40300,__IPHONE_NA = 99999,};
enum MACRO___IPV6 {__IPV6_ADDR_SCOPE_NODELOCAL = 0x1,__IPV6_ADDR_SCOPE_INTFACELOCAL = 0x1,__IPV6_ADDR_SCOPE_LINKLOCAL = 0x2,__IPV6_ADDR_SCOPE_SITELOCAL = 0x5,__IPV6_ADDR_SCOPE_ORGLOCAL = 0x8,__IPV6_ADDR_SCOPE_GLOBAL = 0xE,};
enum MACRO___LP64 {__LP64_OFF64 = 1,};
enum MACRO___LPBIG {__LPBIG_OFFBIG = 1,};
enum MACRO___MAC {__MAC_10_0 = 1000,__MAC_10_1 = 1010,__MAC_10_2 = 1020,__MAC_10_3 = 1030,__MAC_10_4 = 1040,__MAC_10_5 = 1050,__MAC_10_6 = 1060,__MAC_10_7 = 1070,__MAC_NA = 9999,};
enum MACRO___MigPackStructs {__MigPackStructs = 1,};
enum MACRO___MigTypeCheck {__MigTypeCheck = 1,};
enum MACRO___NAMESER {__NAMESER = 19991006,};
enum MACRO___NDR {__NDR_convert__ = 1,__NDR_convert__int_rep__ = 1,__NDR_convert__char_rep__ = 0,__NDR_convert__float_rep__ = 0,};
enum MACRO___PFKEY {__PFKEY_V2_H = 1,};
enum MACRO___PTHREAD {__PTHREAD_SIZE__ = 1168,__PTHREAD_ATTR_SIZE__ = 56,__PTHREAD_MUTEXATTR_SIZE__ = 8,__PTHREAD_MUTEX_SIZE__ = 56,__PTHREAD_CONDATTR_SIZE__ = 8,__PTHREAD_COND_SIZE__ = 40,__PTHREAD_ONCE_SIZE__ = 8,__PTHREAD_RWLOCK_SIZE__ = 192,__PTHREAD_RWLOCKATTR_SIZE__ = 16,};
enum MACRO___R {__R_UNUSED = 2,};
enum MACRO___RES {__RES = 19991006,};
enum MACRO___SCHED {__SCHED_PARAM_SIZE__ = 4,};
enum MACRO___SLBF {__SLBF = 0x1,__SNBF = 0x2,__SRD = 0x4,__SWR = 0x8,__SRW = 0x10,__SEOF = 0x20,__SERR = 0x40,__SMBF = 0x80,__SAPP = 0x100,__SSTR = 0x200,__SOPT = 0x400,__SNPT = 0x800,__SOFF = 0x1000,__SMOD = 0x2000,__SALC = 0x4000,__SIGN = 0x8000,};
enum MACRO___WORDSIZE {__WORDSIZE = 64,};
enum MACRO___bool {__bool_true_false_are_defined = 1,};
enum MACRO___dontcare : __int64 {__dontcare__ = -1,};
enum MACRO_acs {acs_chars_index = 146,};
enum MACRO_argument {no_argument = 0,required_argument = 1,optional_argument = 2,};
enum MACRO_asn1 {asn1_err_base = 1859794432,};
enum MACRO_bool {false = 0,true = 1,};
enum MACRO_ccitt {NID_ccitt = 404,OBJ_ccitt = 0,};
enum MACRO_clock {clock_MSG_COUNT = 3,clock_reply_MSG_COUNT = 1,};
enum MACRO_control {control_character_threshold = 0x20,control_character_bit = 0x40,};
enum MACRO_darwin {darwin = 10,};
enum MACRO_darwin10 {darwin10 = 10,};
enum MACRO_darwin11 {darwin11 = 10,};
enum MACRO_emask : __int64 {system_emask = 0xFC000000,sub_emask = 0x3FFC000,code_emask = 0x3FFF,};
enum MACRO_err : __int64 {err_kern = 0x0,err_us = 0x4000000,err_server = 0x8000000,err_ipc = 0xC000000,err_mach_ipc = 0x10000000,err_dipc = 0x1C000000,err_local = 0xF8000000,err_ipc_compat = 0xFC000000,err_max_system = 0x3F,};
enum MACRO_exc {exc_MSG_COUNT = 3,};
enum MACRO_i386 {i386_THREAD_STATE = 1,i386_FLOAT_STATE = 2,i386_EXCEPTION_STATE = 3,};
enum MACRO_iso {NID_iso = 181,OBJ_iso = 1,};
enum MACRO_itu_t {NID_itu_t = 645,OBJ_itu_t = 0,};
enum MACRO_joint_iso_ccitt {NID_joint_iso_ccitt = 393,OBJ_joint_iso_ccitt = 2,};
enum MACRO_joint_iso_itu_t {NID_joint_iso_itu_t = 646,OBJ_joint_iso_itu_t = 2,};
enum MACRO_k524 : __int64 {k524_err_base = -1750206208,};
enum MACRO_kDNSServiceInterfaceIndexAny : __int64 {kDNSServiceInterfaceIndexAny = 0,kDNSServiceInterfaceIndexLocalOnly = 4294967295,};
enum MACRO_kDNSServiceInterfaceIndexP2P : __int64 {kDNSServiceInterfaceIndexP2P = 4294967293,};
enum MACRO_kDNSServiceInterfaceIndexUnicast : __int64 {kDNSServiceInterfaceIndexUnicast = 4294967294,};
enum MACRO_kDNSServiceMaxDomainName {kDNSServiceMaxDomainName = 1009,};
enum MACRO_kDNSServiceMaxServiceName {kDNSServiceMaxServiceName = 64,};
enum MACRO_kOSMetaClassDuplicateClass : __int64 {kOSMetaClassDuplicateClass = 3691003914,};
enum MACRO_kOSMetaClassHasInstances : __int64 {kOSMetaClassHasInstances = 3691003906,};
enum MACRO_kOSMetaClassInstNoSuper : __int64 {kOSMetaClassInstNoSuper = 3691003913,};
enum MACRO_kOSMetaClassInternal : __int64 {kOSMetaClassInternal = 3691003905,};
enum MACRO_kOSMetaClassNoDicts : __int64 {kOSMetaClassNoDicts = 3691003909,};
enum MACRO_kOSMetaClassNoInit : __int64 {kOSMetaClassNoInit = 3691003907,};
enum MACRO_kOSMetaClassNoInsKModSet : __int64 {kOSMetaClassNoInsKModSet = 3691003911,};
enum MACRO_kOSMetaClassNoKModSet : __int64 {kOSMetaClassNoKModSet = 3691003910,};
enum MACRO_kOSMetaClassNoKext : __int64 {kOSMetaClassNoKext = 3691003915,};
enum MACRO_kOSMetaClassNoSuper : __int64 {kOSMetaClassNoSuper = 3691003912,};
enum MACRO_kOSMetaClassNoTempData : __int64 {kOSMetaClassNoTempData = 3691003908,};
enum MACRO_kOSReturnSuccess : __int64 {kOSReturnSuccess = 0,kOSReturnError = 3690987521,};
enum MACRO_kdb5 : __int64 {kdb5_err_base = -1780008448,};
enum MACRO_krb5 : __int64 {krb5_err_base = -1765328384,};
enum MACRO_kv5m : __int64 {kv5m_err_base = -1760647424,};
enum MACRO_mach {mach_host_MSG_COUNT = 21,};
enum MACRO_mach_vm {mach_vm_MSG_COUNT = 20,};
enum MACRO_netname {netname_MSG_COUNT = 4,};
enum MACRO_priv_MSG_COUNT {clock_priv_MSG_COUNT = 2,host_priv_MSG_COUNT = 26,};
enum MACRO_prof : __int64 {prof_err_base = -1429577728,};
enum MACRO_pseudo {pseudo_AF_XTP = 19,};
enum MACRO_pseudo_AF {pseudo_AF_RTIP = 22,};
enum MACRO_pseudo_AF_HDRCMPLT {pseudo_AF_HDRCMPLT = 35,};
enum MACRO_pseudo_AF_KEY {pseudo_AF_KEY = 29,};
enum MACRO_pseudo_AF_PIP {pseudo_AF_PIP = 25,};
enum MACRO_sub {sub_libkern_common = 0,sub_libkern_metaclass = 16384,sub_libkern_reserved = 67092480,};
enum MACRO_sys : __int64 {sys_libkern = 0xDC000000,};
enum MACRO_ub {ub_name = 32768,ub_common_name = 64,ub_locality_name = 128,ub_state_name = 128,ub_organization_name = 64,ub_organization_unit_name = 64,ub_title = 64,ub_email_address = 128,};
enum MACRO_undef {NID_undef = 0,OBJ_undef = 0,};
enum MACRO_x86 {x86_THREAD_STATE32 = 1,x86_FLOAT_STATE32 = 2,x86_EXCEPTION_STATE32 = 3,x86_THREAD_STATE64 = 4,x86_FLOAT_STATE64 = 5,x86_EXCEPTION_STATE64 = 6,x86_THREAD_STATE = 7,x86_FLOAT_STATE = 8,x86_EXCEPTION_STATE = 9,x86_DEBUG_STATE32 = 10,x86_DEBUG_STATE64 = 11,x86_DEBUG_STATE = 12,};
enum MACRO_x86_AVX {x86_AVX_STATE32 = 16,x86_AVX_STATE64 = 17,};
enum MACRO_xEOF {xEOF = 236,};
typedef struct MD2state_st MD2_CTX;
struct MD2state_st {unsigned int num;unsigned __int8 data[16];unsigned int cksm[16];unsigned int state[16];};
typedef struct MD4state_st MD4_CTX;
struct MD4state_st {unsigned int A;unsigned int B;unsigned int C;unsigned int D;unsigned int Nl;unsigned int Nh;unsigned int data[16];unsigned int num;};
typedef struct $1A9F4F084CD7F87A2A45367D7A315C43 MD5_CTX;
struct MD5state_st {unsigned int A;unsigned int B;unsigned int C;unsigned int D;unsigned int Nl;unsigned int Nh;unsigned int data[16];unsigned int num;};
typedef struct mdc2_ctx_st MDC2_CTX;
typedef struct $184DAAE67CCF1C5185605B7156C28AF9 *MDptr;
typedef struct $184DAAE67CCF1C5185605B7156C28AF9 MDstruct;
typedef struct tagMENU MENU;
typedef struct $AF39247D48CF164753A445931539035C MEVENT;
struct MPOOL {struct MPOOL::_lqh lqh;struct MPOOL::_hqh hqh[128];pgno_t curcache;pgno_t maxcache;pgno_t npages;unsigned __int64 pagesize;int fd;void (__cdecl *pgin)(void *, pgno_t, void *);void (__cdecl *pgout)(void *, pgno_t, void *);void *pgcookie;};
struct MPOOL::_hqh {struct _bkt *tqh_first;struct _bkt **tqh_last;};
struct MPOOL::_lqh {struct _bkt *tqh_first;struct _bkt **tqh_last;};
typedef struct ms_tm MS_TM;
struct Mem;
typedef void (__cdecl *Menu_Hook)(struct tagMENU *);
typedef int Menu_Options;
typedef struct NAME_CONSTRAINTS_st NAME_CONSTRAINTS;
struct NAME_CONSTRAINTS_st {STACK *permittedSubtrees;STACK *excludedSubtrees;};
typedef unsigned __int8 NCURSES_BOOL;
typedef int (__cdecl *NCURSES_SCREEN_CB)(SCREEN *, void *);
typedef int (__cdecl *NCURSES_WINDOW_CB)(WINDOW *, void *);
typedef struct $B8B9B85B971E3DBFC31707A9282CDA9E NDR_record_t;
typedef struct Netscape_certificate_sequence NETSCAPE_CERT_SEQUENCE;
typedef struct Netscape_spkac_st NETSCAPE_SPKAC;
typedef struct Netscape_spki_st NETSCAPE_SPKI;
typedef struct NOTICEREF_st NOTICEREF;
struct NOTICEREF_st {ASN1_STRING *organization;STACK *noticenos;};
typedef struct $2CC85076D34FF07332855A5130D49334 NSLinkEditErrorHandlers;
typedef enum $DAE851F8676BA49E7F1B3A48D3E2CAFA NSLinkEditErrors;
typedef struct __NSModule *NSModule;
typedef struct __NSObjectFileImage *NSObjectFileImage;
typedef enum $345160C3650206BB2C3C257B2FE36FED NSObjectFileImageReturnCode;
typedef enum $56960417386CC1564F639639D8B0AEF8 NSOtherErrorNumbers;
typedef enum $01E72305AF8283EAA993BE6EE5BCD1F9 NSSearchPathDirectory;
typedef enum $349CDD1D13F7DF0473388D33C8CD4390 NSSearchPathDomainMask;
typedef unsigned int NSSearchPathEnumerationState;
typedef struct __NSSymbol *NSSymbol;
typedef struct $7AB3BC546F9F35ECC7BE0179CB611F91 NXArchInfo;
enum NXByteOrder {NX_UnknownByteOrder = 0x0,NX_LittleEndian = 0x1,NX_BigEndian = 0x2,};
typedef unsigned __int64 NXSwappedDouble;
typedef unsigned __int64 NXSwappedFloat;
typedef int __cdecl NetSNMPStashDump(char *, size_t, void *, struct netsnmp_oid_stash_node_s *);
typedef void __cdecl NetSNMPStashFreeNode(void *);
struct Netscape_certificate_sequence {ASN1_OBJECT *type;STACK *certs;};
struct Netscape_spkac_st {X509_PUBKEY *pubkey;ASN1_IA5STRING *challenge;};
struct Netscape_spki_st {NETSCAPE_SPKAC *spkac;X509_ALGOR *sig_algor;ASN1_BIT_STRING *signature;};
typedef void __cdecl NetsnmpCacheFree(netsnmp_cache *, void *);
typedef int __cdecl NetsnmpCacheLoad(netsnmp_cache *, void *);
typedef int __cdecl NetsnmpLogHandler(netsnmp_log_handler *, int, const char *);
typedef netsnmp_variable_list *__cdecl Netsnmp_First_Data_Point(void **loop_context, void **data_context, netsnmp_variable_list *, struct netsnmp_iterator_info_s *);
typedef void __cdecl Netsnmp_Free_Data_Context(void *, struct netsnmp_iterator_info_s *);
typedef void __cdecl Netsnmp_Free_List_Data(void *);
typedef void __cdecl Netsnmp_Free_Loop_Context(void *, struct netsnmp_iterator_info_s *);
typedef int __cdecl Netsnmp_Iterator_Ctx(void *iterator_ctx, netsnmp_ref_void *loop_ctx);
typedef int __cdecl Netsnmp_Iterator_Ctx_Dup(void *iterator_ctx, netsnmp_ref_void *loop_ctx, netsnmp_ref_void *dup_ctx, int reuse);
typedef int __cdecl Netsnmp_Iterator_Data(void *iterator_ctx, const void *data);
typedef int __cdecl Netsnmp_Iterator_Loop_Data(void *iterator_ctx, netsnmp_ref_void *loop_ctx, netsnmp_ref_void *data);
typedef int __cdecl Netsnmp_Iterator_Loop_Key(void *iterator_ctx, netsnmp_ref_void *loop_ctx, netsnmp_ref_void *key);
typedef int __cdecl Netsnmp_Iterator_Op(void *iterator_ctx);
typedef void *__cdecl Netsnmp_Make_Data_Context(void *loop_context, struct netsnmp_iterator_info_s *);
typedef netsnmp_variable_list *__cdecl Netsnmp_Next_Data_Point(void **loop_context, void **data_context, netsnmp_variable_list *, struct netsnmp_iterator_info_s *);
typedef int __cdecl Netsnmp_Node_Handler(netsnmp_mib_handler *handler, netsnmp_handler_registration *reginfo, netsnmp_agent_request_info *reqinfo, netsnmp_request_info *requests);
typedef void *__cdecl Netsnmp_Read_List_Data(char *buf, size_t buf_len);
typedef int __cdecl Netsnmp_Save_List_Data(char *buf, size_t buf_len, void *);
typedef int __cdecl Netsnmp_User_Get_Processor(netsnmp_request_info *, netsnmp_index *, netsnmp_table_request_info *);
typedef void __cdecl Netsnmp_User_Group_Method(netsnmp_request_group *);
typedef int __cdecl Netsnmp_User_Row_Action(netsnmp_index *, netsnmp_index *, netsnmp_request_group *);
typedef int __cdecl Netsnmp_User_Row_Operation(void *lhs, void *rhs);
typedef int __cdecl Netsnmp_User_Row_Operation_c(const void *lhs, const void *rhs);
typedef int __cdecl Netsnmp_Value_Change_Ok(char *old_value, size_t old_value_len, char *new_value, size_t new_value_len, void *mydata);
typedef struct obj_name_st OBJ_NAME;
typedef struct ocsp_basic_response_st OCSP_BASICRESP;
typedef struct ocsp_cert_id_st OCSP_CERTID;
typedef struct ocsp_cert_status_st OCSP_CERTSTATUS;
typedef struct ocsp_crl_id_st OCSP_CRLID;
typedef struct ocsp_one_request_st OCSP_ONEREQ;
typedef struct ocsp_req_info_st OCSP_REQINFO;
typedef struct ocsp_request_st OCSP_REQUEST;
typedef struct ocsp_req_ctx_st OCSP_REQ_CTX;
typedef struct ocsp_resp_bytes_st OCSP_RESPBYTES;
typedef struct ocsp_response_data_st OCSP_RESPDATA;
typedef struct ocsp_responder_id_st OCSP_RESPID;
typedef struct ocsp_response_st OCSP_RESPONSE;
typedef struct ocsp_revoked_info_st OCSP_REVOKEDINFO;
typedef struct ocsp_service_locator_st OCSP_SERVICELOC;
typedef struct ocsp_signature_st OCSP_SIGNATURE;
typedef struct ocsp_single_response_st OCSP_SINGLERESP;
typedef gss_uint32 OM_uint32;
typedef struct openssl_item_st OPENSSL_ITEM;
typedef volatile struct $BC1F9A8A398E4973C30CEFF05D86C139 OSFifoQueueHead;
struct OSObject;
typedef volatile struct $41E1A7C74B3260A4835F2B305A4796BB OSQueueHead;
typedef kern_return_t OSReturn;
typedef int32_t OSSpinLock;
typedef SInt32 OSStatus;
typedef struct otherName_st OTHERNAME;
struct Operation;
typedef UInt32 OptionBits;
typedef struct panel PANEL;
typedef struct PBE2PARAM_st PBE2PARAM;
struct PBE2PARAM_st {X509_ALGOR *keyfunc;X509_ALGOR *encryption;};
typedef struct PBEPARAM_st PBEPARAM;
struct PBEPARAM_st {ASN1_OCTET_STRING *salt;ASN1_INTEGER *iter;};
typedef struct PBKDF2PARAM_st PBKDF2PARAM;
struct PBKDF2PARAM_st {ASN1_TYPE *salt;ASN1_INTEGER *iter;ASN1_INTEGER *keylength;X509_ALGOR *prf;};
typedef struct pem_ctx_st PEM_CTX;
typedef struct PEM_Encode_Seal_st PEM_ENCODE_SEAL_CTX;
struct PEM_Encode_Seal_st {EVP_ENCODE_CTX encode;EVP_MD_CTX md;EVP_CIPHER_CTX cipher;};
typedef struct pem_recip_st PEM_USER;
typedef struct $30B637321B49B494EE6ED11BDEC8DE9E PKCS12;
typedef struct pkcs12_bag_st PKCS12_BAGS;
typedef struct $78A516661F8337ED491DEA9E817B9015 PKCS12_MAC_DATA;
typedef struct $575360315CF0A1A248958A58C9E14896 PKCS12_SAFEBAG;
typedef struct pkcs7_st PKCS7;
typedef struct pkcs7_digest_st PKCS7_DIGEST;
typedef struct pkcs7_encrypted_st PKCS7_ENCRYPT;
typedef struct pkcs7_enc_content_st PKCS7_ENC_CONTENT;
typedef struct pkcs7_enveloped_st PKCS7_ENVELOPE;
typedef struct pkcs7_issuer_and_serial_st PKCS7_ISSUER_AND_SERIAL;
typedef struct pkcs7_recip_info_st PKCS7_RECIP_INFO;
typedef struct pkcs7_signed_st PKCS7_SIGNED;
typedef struct pkcs7_signer_info_st PKCS7_SIGNER_INFO;
typedef struct pkcs7_signedandenveloped_st PKCS7_SIGN_ENVELOPE;
typedef struct pkcs8_priv_key_info_st PKCS8_PRIV_KEY_INFO;
typedef struct PKEY_USAGE_PERIOD_st PKEY_USAGE_PERIOD;
struct PKEY_USAGE_PERIOD_st {ASN1_GENERALIZEDTIME *notBefore;ASN1_GENERALIZEDTIME *notAfter;};
typedef unsigned __int8 *POINTER;
typedef struct POLICYINFO_st POLICYINFO;
struct POLICYINFO_st {ASN1_OBJECT *policyid;STACK *qualifiers;};
typedef struct POLICYQUALINFO_st POLICYQUALINFO;
struct POLICYQUALINFO_st {ASN1_OBJECT *pqualid;union POLICYQUALINFO_st::$E7597F3F5DDB1DDEEAC7773A1D67D4FA d;};
union POLICYQUALINFO_st::$E7597F3F5DDB1DDEEAC7773A1D67D4FA {ASN1_IA5STRING *cpsuri;USERNOTICE *usernotice;ASN1_TYPE *other;};
typedef struct POLICY_CONSTRAINTS_st POLICY_CONSTRAINTS;
struct POLICY_CONSTRAINTS_st {ASN1_INTEGER *requireExplicitPolicy;ASN1_INTEGER *inhibitPolicyMapping;};
typedef struct POLICY_MAPPING_st POLICY_MAPPING;
typedef STACK POLICY_MAPPINGS;
struct POLICY_MAPPING_st {ASN1_OBJECT *issuerDomainPolicy;ASN1_OBJECT *subjectDomainPolicy;};
typedef struct PROXY_CERT_INFO_EXTENSION_st PROXY_CERT_INFO_EXTENSION;
struct PROXY_CERT_INFO_EXTENSION_st {ASN1_INTEGER *pcPathLengthConstraint;PROXY_POLICY *proxyPolicy;};
typedef struct PROXY_POLICY_st PROXY_POLICY;
struct PROXY_POLICY_st {ASN1_OBJECT *policyLanguage;ASN1_OCTET_STRING *policy;};
typedef void *PTR;
typedef struct rand_meth_st RAND_METHOD;
typedef struct rc2_key_st RC2_KEY;
typedef struct rc4_key_st RC4_KEY;
typedef struct rc5_key_st RC5_32_KEY;
typedef struct $5A8FECC4C2877C4C87F3C51F77AE50CF RECNOINFO;
typedef signed __int16 RETCODE;
typedef struct RIPEMD160state_st RIPEMD160_CTX;
struct RIPEMD160state_st {unsigned int A;unsigned int B;unsigned int C;unsigned int D;unsigned int E;unsigned int Nl;unsigned int Nh;unsigned int data[16];unsigned int num;};
typedef struct rsa_st RSA;
typedef struct rsa_meth_st RSA_METHOD;
typedef signed __int8 SCHAR;
typedef struct screen SCREEN;
typedef double SDOUBLE;
typedef __int64 SDWORD;
typedef struct seed_key_st SEED_KEY_SCHEDULE;
typedef float SFLOAT;
typedef struct SHA256state_st SHA256_CTX;
struct SHA256state_st {unsigned int h[8];unsigned int Nl;unsigned int Nh;unsigned int data[16];unsigned int num;unsigned int md_len;};
typedef struct SHA512state_st SHA512_CTX;
struct SHA512state_st {unsigned __int64 h[8];unsigned __int64 Nl;unsigned __int64 Nh;union SHA512state_st::$61765161EF95A25BF6D9F15268D2C4E6 u;unsigned int num;unsigned int md_len;};
union SHA512state_st::$61765161EF95A25BF6D9F15268D2C4E6 {unsigned __int64 d[16];unsigned __int8 p[128];};
typedef struct SHAstate_st SHA_CTX;
struct SHAstate_st {unsigned int h0;unsigned int h1;unsigned int h2;unsigned int h3;unsigned int h4;unsigned int Nl;unsigned int Nh;unsigned int data[16];unsigned int num;};
typedef signed int SInt;
typedef signed __int16 SInt16;
typedef signed int SInt32;
typedef signed __int64 SInt64;
typedef signed __int8 SInt8;
typedef signed __int64 SLONG;
typedef void __cdecl SNMPAlarmCallback(unsigned int clientreg, void *clientarg);
typedef int __cdecl SNMPCallback(int majorID, int minorID, void *serverarg, void *clientarg);
typedef signed __int64 SQLBIGINT;
typedef unsigned __int8 SQLCHAR;
typedef unsigned __int8 SQLDATE;
typedef unsigned __int8 SQLDECIMAL;
typedef double SQLDOUBLE;
typedef double SQLFLOAT;
typedef struct tagSQLGUID SQLGUID;
typedef void *SQLHANDLE;
typedef SQLHANDLE SQLHDBC;
typedef SQLHANDLE SQLHDESC;
typedef SQLHANDLE SQLHENV;
typedef SQLHANDLE SQLHSTMT;
typedef SQLPOINTER SQLHWND;
typedef signed int SQLINTEGER;
typedef enum $AAF7D8B1D740C4801D49F07692D1E0A1 SQLINTERVAL;
typedef unsigned __int8 SQLNUMERIC;
typedef void *SQLPOINTER;
typedef float SQLREAL;
typedef SQLSMALLINT SQLRETURN;
typedef unsigned __int64 SQLROWCOUNT;
typedef __int64 SQLROWOFFSET;
typedef unsigned __int64 SQLROWSETSIZE;
typedef signed __int8 SQLSCHAR;
typedef signed __int16 SQLSMALLINT;
typedef SQLCHAR SQLTCHAR;
typedef unsigned __int8 SQLTIME;
typedef unsigned __int8 SQLTIMESTAMP;
typedef unsigned __int64 SQLTRANSID;
typedef unsigned __int64 SQLUBIGINT;
typedef unsigned int SQLUINTEGER;
typedef unsigned __int16 SQLUSMALLINT;
typedef unsigned __int8 SQLVARCHAR;
typedef wchar_t SQLWCHAR;
typedef DATE_STRUCT SQL_DATE_STRUCT;
typedef struct tagSQL_DAY_SECOND SQL_DAY_SECOND_STRUCT;
typedef struct tagSQL_INTERVAL_STRUCT SQL_INTERVAL_STRUCT;
typedef struct tagSQL_NUMERIC_STRUCT SQL_NUMERIC_STRUCT;
typedef TIMESTAMP_STRUCT SQL_TIMESTAMP_STRUCT;
typedef TIME_STRUCT SQL_TIME_STRUCT;
typedef struct tagSQL_YEAR_MONTH SQL_YEAR_MONTH_STRUCT;
typedef signed __int16 SSHORT;
typedef struct ssl_st SSL;
typedef struct ssl2_state_st SSL2_STATE;
typedef struct ssl3_buffer_st SSL3_BUFFER;
typedef struct ssl3_record_st SSL3_RECORD;
typedef struct ssl3_state_st SSL3_STATE;
typedef struct ssl_cipher_st SSL_CIPHER;
typedef struct ssl_comp_st SSL_COMP;
typedef struct ssl_ctx_st SSL_CTX;
typedef struct ssl_method_st SSL_METHOD;
typedef struct ssl_session_st SSL_SESSION;
typedef struct stack_st STACK;
typedef struct store_st STORE;
typedef struct STORE_attr_info_st STORE_ATTR_INFO;
typedef enum STORE_attribs STORE_ATTR_TYPES;
typedef enum STORE_certificate_status STORE_CERTIFICATE_STATUS;
typedef void (__cdecl *STORE_CLEANUP_FUNC_PTR)(STORE *);
typedef int (__cdecl *STORE_CTRL_FUNC_PTR)(STORE *, int cmd, __int64 l, void *p, void (*f)(void));
typedef int (__cdecl *STORE_END_OBJECT_FUNC_PTR)(STORE *, void *handle);
typedef STORE_OBJECT *(__cdecl *STORE_GENERATE_OBJECT_FUNC_PTR)(STORE *, STORE_OBJECT_TYPES type, OPENSSL_ITEM attributes[], OPENSSL_ITEM parameters[]);
typedef int (__cdecl *STORE_GENERIC_FUNC_PTR)(STORE *, OPENSSL_ITEM attributes[], OPENSSL_ITEM parameters[]);
typedef STORE_OBJECT *(__cdecl *STORE_GET_OBJECT_FUNC_PTR)(STORE *, STORE_OBJECT_TYPES type, OPENSSL_ITEM attributes[], OPENSSL_ITEM parameters[]);
typedef int (__cdecl *STORE_HANDLE_OBJECT_FUNC_PTR)(STORE *, STORE_OBJECT_TYPES type, OPENSSL_ITEM attributes[], OPENSSL_ITEM parameters[]);
typedef int (__cdecl *STORE_INITIALISE_FUNC_PTR)(STORE *);
typedef struct store_method_st STORE_METHOD;
typedef int (__cdecl *STORE_MODIFY_OBJECT_FUNC_PTR)(STORE *, STORE_OBJECT_TYPES type, OPENSSL_ITEM search_attributes[], OPENSSL_ITEM add_attributes[], OPENSSL_ITEM modify_attributes[], OPENSSL_ITEM delete_attributes[], OPENSSL_ITEM parameters[]);
typedef STORE_OBJECT *(__cdecl *STORE_NEXT_OBJECT_FUNC_PTR)(STORE *, void *handle);
typedef struct STORE_OBJECT_st STORE_OBJECT;
typedef enum STORE_object_types STORE_OBJECT_TYPES;
struct STORE_OBJECT_st {STORE_OBJECT_TYPES type;union STORE_OBJECT_st::$78662AA53663BCB8AAE8916B78AF8CFA data;};
union STORE_OBJECT_st::$78662AA53663BCB8AAE8916B78AF8CFA {struct STORE_OBJECT_st::$78662AA53663BCB8AAE8916B78AF8CFA::$FA360D2E41DCB3363DB7C6EE711F8FB0 x509;X509_CRL *crl;EVP_PKEY *key;BIGNUM *number;BUF_MEM *arbitrary;};
struct STORE_OBJECT_st::$78662AA53663BCB8AAE8916B78AF8CFA::$FA360D2E41DCB3363DB7C6EE711F8FB0 {STORE_CERTIFICATE_STATUS status;X509 *certificate;};
typedef enum STORE_params STORE_PARAM_TYPES;
typedef void *(__cdecl *STORE_START_OBJECT_FUNC_PTR)(STORE *, STORE_OBJECT_TYPES type, OPENSSL_ITEM attributes[], OPENSSL_ITEM parameters[]);
typedef int (__cdecl *STORE_STORE_OBJECT_FUNC_PTR)(STORE *, STORE_OBJECT_TYPES type, STORE_OBJECT *data, OPENSSL_ITEM attributes[], OPENSSL_ITEM parameters[]);
struct STORE_attr_info_st;
enum STORE_attribs {STORE_ATTR_END = 0x0,STORE_ATTR_FRIENDLYNAME = 0x1,STORE_ATTR_KEYID = 0x2,STORE_ATTR_ISSUERKEYID = 0x3,STORE_ATTR_SUBJECTKEYID = 0x4,STORE_ATTR_ISSUERSERIALHASH = 0x5,STORE_ATTR_ISSUER = 0x6,STORE_ATTR_SERIAL = 0x7,STORE_ATTR_SUBJECT = 0x8,STORE_ATTR_CERTHASH = 0x9,STORE_ATTR_EMAIL = 0xA,STORE_ATTR_FILENAME = 0xB,STORE_ATTR_TYPE_NUM = 0xB,STORE_ATTR_OR = 0xFF,};
enum STORE_certificate_status {STORE_X509_VALID = 0x0,STORE_X509_EXPIRED = 0x1,STORE_X509_SUSPENDED = 0x2,STORE_X509_REVOKED = 0x3,};
enum STORE_object_types {STORE_OBJECT_TYPE_X509_CERTIFICATE = 0x1,STORE_OBJECT_TYPE_X509_CRL = 0x2,STORE_OBJECT_TYPE_PRIVATE_KEY = 0x3,STORE_OBJECT_TYPE_PUBLIC_KEY = 0x4,STORE_OBJECT_TYPE_NUMBER = 0x5,STORE_OBJECT_TYPE_ARBITRARY = 0x6,STORE_OBJECT_TYPE_NUM = 0x6,};
enum STORE_params {STORE_PARAM_EVP_TYPE = 0x1,STORE_PARAM_BITS = 0x2,STORE_PARAM_KEY_PARAMETERS = 0x3,STORE_PARAM_KEY_NO_PARAMETERS = 0x4,STORE_PARAM_AUTH_PASSPHRASE = 0x5,STORE_PARAM_AUTH_KRB5_TICKET = 0x6,STORE_PARAM_TYPE_NUM = 0x6,};
typedef struct $6825248A56C99A2E2B32FCEC421A9DAF SVCXPRT;
typedef __int16 SWORD;
typedef struct SXNET_st SXNET;
typedef struct SXNET_ID_st SXNETID;
struct SXNET_ID_st {ASN1_INTEGER *zone;ASN1_OCTET_STRING *user;};
struct SXNET_st {ASN1_INTEGER *version;STACK *ids;};
typedef int __cdecl Secmod2PduCallback(netsnmp_pdu *, netsnmp_pdu *);
typedef int __cdecl SecmodDiscoveryMethod(void *slp, netsnmp_session *session);
typedef void __cdecl SecmodFreeState(void *);
typedef void __cdecl SecmodHandleReport(void *sessp, netsnmp_transport *transport, netsnmp_session *, int result, netsnmp_pdu *origpdu);
typedef int __cdecl SecmodInMsg(struct snmp_secmod_incoming_params *);
typedef int __cdecl SecmodOutMsg(struct snmp_secmod_outgoing_params *);
typedef int __cdecl SecmodPduCallback(netsnmp_pdu *);
typedef int __cdecl SecmodSessionCallback(netsnmp_session *);
typedef int __cdecl SecmodSessionSetup(netsnmp_session *in_session, netsnmp_session *out_session);
typedef struct slapi_attr Slapi_Attr;
typedef struct BackendDB Slapi_Backend;
typedef struct slapi_componentid Slapi_ComponentId;
typedef struct slapi_condvar Slapi_CondVar;
typedef struct Connection Slapi_Connection;
typedef struct slapi_dn Slapi_DN;
typedef struct slapi_entry Slapi_Entry;
typedef struct slapi_filter Slapi_Filter;
typedef struct slapi_mod Slapi_Mod;
typedef struct slapi_mods Slapi_Mods;
typedef struct slapi_mutex Slapi_Mutex;
typedef struct Operation Slapi_Operation;
typedef struct slapi_pblock Slapi_PBlock;
typedef struct slapi_plugindesc Slapi_PluginDesc;
typedef struct slapi_rdn Slapi_RDN;
typedef struct slapi_value Slapi_Value;
typedef struct slapi_valueset Slapi_ValueSet;
typedef struct sockbuf Sockbuf;
typedef struct sockbuf_io Sockbuf_IO;
typedef struct sockbuf_io_desc Sockbuf_IO_Desc;
typedef struct _stringlist StringList;
typedef struct term TERMINAL;
typedef struct termtype TERMTYPE;
typedef struct $0C41D669CC7829CF12B135747142967F TEXT;
typedef struct tagTIMESTAMP_STRUCT TIMESTAMP_STRUCT;
typedef struct tagTIME_STRUCT TIME_STRUCT;
typedef union _TXTRecordRef_t TXTRecordRef;
typedef struct txt_db_st TXT_DB;
typedef struct _TidyAttr *TidyAttr;
typedef enum $7BC844CA13F55C9D2AEAF3513FB7769B TidyAttrId;
typedef struct _TidyBuffer TidyBuffer;
typedef enum $E86A9D4BDF47B8ECB447213BB5AF724B TidyConfigCategory;
typedef struct _TidyDoc *TidyDoc;
typedef enum $B8C02EDA4356AFEB3B864A542494BAF4 TidyDoctypeModes;
typedef enum $A825878F958596565FEE8860DE052352 TidyDupAttrModes;
typedef Bool (__cdecl *TidyEOFFunc)(void *sourceData);
typedef void (__cdecl *TidyFree)(void *buf);
typedef int (__cdecl *TidyGetByteFunc)(void *sourceData);
typedef struct _TidyInputSource TidyInputSource;
typedef struct _TidyIterator *TidyIterator;
typedef enum $3369F195F3872D92A108D01D54B2E7FC TidyLineEnding;
typedef void *(__cdecl *TidyMalloc)(size_t len);
typedef struct _TidyNode *TidyNode;
typedef enum $215194CEC7B0CB0293C31B12FA375707 TidyNodeType;
typedef Bool (__cdecl *TidyOptCallback)(ctmbstr option, ctmbstr value);
typedef struct _TidyOption *TidyOption;
typedef enum $8AF341AFB349B0F3EC8B21B2C315FEF7 TidyOptionId;
typedef enum $27728F6308F3E4DDCA008ED55D2293B2 TidyOptionType;
typedef struct _TidyOutputSink TidyOutputSink;
typedef void (__cdecl *TidyPanic)(ctmbstr mssg);
typedef void (__cdecl *TidyPutByteFunc)(void *sinkData, byte bt);
typedef void *(__cdecl *TidyRealloc)(void *buf, size_t len);
typedef Bool (__cdecl *TidyReportFilter)(TidyDoc tdoc, TidyReportLevel lvl, uint line, uint col, ctmbstr mssg);
typedef enum $8C351220F954B531CED471BF1232BFD8 TidyReportLevel;
typedef enum $2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTagId;
typedef enum $7B6D6F191C45FE8067F0BF66D1F2D24A TidyTriState;
typedef void (__cdecl *TidyUngetByteFunc)(void *sourceData, byte bt);
typedef struct tokenizer Tokenizer;
typedef struct tokenizerW TokenizerW;
typedef struct counter64 U64;
typedef unsigned __int8 UCHAR;
typedef uint16_t UChar;
struct UConverter;
typedef unsigned __int64 UDWORD;
typedef struct ui_st UI;
typedef unsigned __int8 UINT1;
typedef unsigned __int16 UINT2;
typedef unsigned int UINT4;
typedef struct ui_method_st UI_METHOD;
typedef struct ui_string_st UI_STRING;
enum UI_string_types {UIT_NONE = 0x0,UIT_PROMPT = 0x1,UIT_VERIFY = 0x2,UIT_BOOLEAN = 0x3,UIT_INFO = 0x4,UIT_ERROR = 0x5,};
typedef unsigned int UInt;
typedef unsigned __int16 UInt16;
typedef unsigned int UInt32;
typedef unsigned __int64 UInt64;
typedef unsigned __int8 UInt8;
typedef unsigned __int64 ULONG;
typedef mach_port_t UNDServerRef;
typedef struct USERNOTICE_st USERNOTICE;
struct USERNOTICE_st {NOTICEREF *noticeref;ASN1_STRING *exptext;};
typedef unsigned __int16 USHORT;
typedef unsigned __int16 UWORD;
struct UnsignedWide {UInt32 lo;UInt32 hi;};
typedef netsnmp_index *__cdecl UserRowMethod(netsnmp_index *);
typedef void __cdecl VCPFunction(char *);
typedef void VFunction(void);
typedef enum $003F63A829E52477BDB4080710A1139D VISIT;
typedef struct _win_st WINDOW;
typedef unsigned __int16 WORD;
typedef int __cdecl WriteMethod(int action, u_char *var_val, u_char var_val_type, size_t var_val_len, u_char *statP, oid *name, size_t length);
typedef struct x509_st X509;
typedef struct X509V3_CONF_METHOD_st X509V3_CONF_METHOD;
struct X509V3_CONF_METHOD_st {char *(__cdecl *get_string)(void *db, char *section, char *value);STACK *(__cdecl *get_section)(void *db, char *section);void (__cdecl *free_string)(void *db, char *string);void (__cdecl *free_section)(void *db, STACK *section);};
typedef struct v3_ext_ctx X509V3_CTX;
typedef void *(__cdecl *X509V3_EXT_D2I)(void *, const unsigned __int8 **, __int64);
typedef void (__cdecl *X509V3_EXT_FREE)(void *);
typedef int (__cdecl *X509V3_EXT_I2D)(void *, unsigned __int8 **);
typedef int (__cdecl *X509V3_EXT_I2R)(struct v3_ext_method *method, void *ext, BIO *out, int indent);
typedef char *(__cdecl *X509V3_EXT_I2S)(struct v3_ext_method *method, void *ext);
typedef STACK *(__cdecl *X509V3_EXT_I2V)(struct v3_ext_method *method, void *ext, STACK *extlist);
typedef struct v3_ext_method X509V3_EXT_METHOD;
typedef void *(*X509V3_EXT_NEW)(void);
typedef void *(__cdecl *X509V3_EXT_R2I)(struct v3_ext_method *method, struct v3_ext_ctx *ctx, const char *str);
typedef void *(__cdecl *X509V3_EXT_S2I)(struct v3_ext_method *method, struct v3_ext_ctx *ctx, const char *str);
typedef void *(__cdecl *X509V3_EXT_V2I)(struct v3_ext_method *method, struct v3_ext_ctx *ctx, STACK *values);
typedef struct X509_algor_st X509_ALGOR;
typedef STACK X509_ALGORS;
typedef struct x509_attributes_st X509_ATTRIBUTE;
typedef struct x509_cert_aux_st X509_CERT_AUX;
typedef struct x509_file_st X509_CERT_FILE_CTX;
typedef struct x509_cert_pair_st X509_CERT_PAIR;
typedef struct x509_cinf_st X509_CINF;
typedef struct X509_crl_st X509_CRL;
typedef struct X509_crl_info_st X509_CRL_INFO;
typedef struct X509_extension_st X509_EXTENSION;
typedef STACK X509_EXTENSIONS;
typedef struct x509_hash_dir_st X509_HASH_DIR_CTX;
typedef struct X509_info_st X509_INFO;
typedef struct x509_lookup_st X509_LOOKUP;
typedef struct x509_lookup_method_st X509_LOOKUP_METHOD;
typedef struct X509_name_st X509_NAME;
typedef struct X509_name_entry_st X509_NAME_ENTRY;
typedef struct x509_object_st X509_OBJECT;
typedef struct X509_objects_st X509_OBJECTS;
typedef struct private_key_st X509_PKEY;
typedef struct X509_POLICY_CACHE_st X509_POLICY_CACHE;
struct X509_POLICY_CACHE_st;
typedef struct X509_POLICY_LEVEL_st X509_POLICY_LEVEL;
struct X509_POLICY_LEVEL_st;
typedef struct X509_POLICY_NODE_st X509_POLICY_NODE;
struct X509_POLICY_NODE_st;
typedef struct X509_POLICY_TREE_st X509_POLICY_TREE;
struct X509_POLICY_TREE_st;
typedef struct X509_pubkey_st X509_PUBKEY;
typedef struct x509_purpose_st X509_PURPOSE;
typedef struct X509_req_st X509_REQ;
typedef struct X509_req_info_st X509_REQ_INFO;
typedef struct X509_revoked_st X509_REVOKED;
typedef struct X509_sig_st X509_SIG;
typedef struct x509_store_st X509_STORE;
typedef struct x509_store_ctx_st X509_STORE_CTX;
typedef struct x509_trust_st X509_TRUST;
typedef struct X509_val_st X509_VAL;
typedef struct X509_VERIFY_PARAM_st X509_VERIFY_PARAM;
struct X509_VERIFY_PARAM_st {char *name;time_t check_time;unsigned __int64 inh_flags;unsigned __int64 flags;int purpose;int trust;int depth;STACK *policies;};
struct X509_algor_st {ASN1_OBJECT *algorithm;ASN1_TYPE *parameter;};
struct X509_crl_info_st {ASN1_INTEGER *version;X509_ALGOR *sig_alg;X509_NAME *issuer;ASN1_TIME *lastUpdate;ASN1_TIME *nextUpdate;STACK *revoked;STACK *extensions;ASN1_ENCODING enc;};
struct X509_crl_st {X509_CRL_INFO *crl;X509_ALGOR *sig_alg;ASN1_BIT_STRING *signature;int references;};
struct X509_extension_st {ASN1_OBJECT *object;ASN1_BOOLEAN critical;ASN1_OCTET_STRING *value;};
struct X509_info_st {X509 *x509;X509_CRL *crl;X509_PKEY *x_pkey;EVP_CIPHER_INFO enc_cipher;int enc_len;char *enc_data;int references;};
struct X509_name_entry_st {ASN1_OBJECT *object;ASN1_STRING *value;int set;int size;};
struct X509_name_st {STACK *entries;int modified;BUF_MEM *bytes;unsigned __int64 hash;};
struct X509_objects_st {int nid;int (*a2i)(void);int (*i2a)(void);};
struct X509_pubkey_st {X509_ALGOR *algor;ASN1_BIT_STRING *public_key;EVP_PKEY *pkey;};
struct X509_req_info_st {ASN1_ENCODING enc;ASN1_INTEGER *version;X509_NAME *subject;X509_PUBKEY *pubkey;STACK *attributes;};
struct X509_req_st {X509_REQ_INFO *req_info;X509_ALGOR *sig_alg;ASN1_BIT_STRING *signature;int references;};
struct X509_revoked_st {ASN1_INTEGER *serialNumber;ASN1_TIME *revocationDate;STACK *extensions;int sequence;};
struct X509_sig_st {X509_ALGOR *algor;ASN1_OCTET_STRING *digest;};
struct X509_val_st {ASN1_TIME *notBefore;ASN1_TIME *notAfter;};
typedef struct __rpc_xdr XDR;
typedef struct $648B167E5FE8430EFE8E72D1CD79C82D _PAGE;
typedef struct $DC9D1599BB1638520AEEC910A299EC32 _RuneCharClass;
typedef struct $9A7E6AE5055FB004EEAAEBA0AF2BBD44 _RuneEntry;
typedef struct $FD3C3D52399ED0C4A355988E4BC1F0A0 _RuneLocale;
typedef struct $F30BA47F3A86B79CC42843AD52D50564 _RuneRange;
union _TXTRecordRef_t {char PrivateData[16];char *ForceNaturalAlignment;};
struct _TidyAttr {int _opaque;};
struct _TidyBuffer {byte *bp;uint size;uint allocated;uint next;};
struct _TidyDoc {int _opaque;};
struct _TidyInputSource {void *sourceData;TidyGetByteFunc getByte;TidyUngetByteFunc ungetByte;TidyEOFFunc eof;};
struct _TidyIterator {int _opaque;};
struct _TidyNode {int _opaque;};
struct _TidyOption {int _opaque;};
struct _TidyOutputSink {void *sinkData;TidyPutByteFunc putByte;};
union __ReplyUnion__clock_priv_subsystem {__Reply__clock_set_time_t Reply_clock_set_time;__Reply__clock_set_attributes_t Reply_clock_set_attributes;};
union __ReplyUnion__clock_reply_subsystem {__Reply__clock_alarm_reply_t Reply_clock_alarm_reply;};
union __ReplyUnion__clock_subsystem {__Reply__clock_get_time_t Reply_clock_get_time;__Reply__clock_get_attributes_t Reply_clock_get_attributes;__Reply__clock_alarm_t Reply_clock_alarm;};
union __ReplyUnion__exc_subsystem {__Reply__exception_raise_t Reply_exception_raise;__Reply__exception_raise_state_t Reply_exception_raise_state;__Reply__exception_raise_state_identity_t Reply_exception_raise_state_identity;};
union __ReplyUnion__host_priv_subsystem {__Reply__host_get_boot_info_t Reply_host_get_boot_info;__Reply__host_reboot_t Reply_host_reboot;__Reply__host_priv_statistics_t Reply_host_priv_statistics;__Reply__host_default_memory_manager_t Reply_host_default_memory_manager;__Reply__vm_wire_t Reply_vm_wire;__Reply__thread_wire_t Reply_thread_wire;__Reply__vm_allocate_cpm_t Reply_vm_allocate_cpm;__Reply__host_processors_t Reply_host_processors;__Reply__host_get_clock_control_t Reply_host_get_clock_control;__Reply__kmod_create_t Reply_kmod_create;__Reply__kmod_destroy_t Reply_kmod_destroy;__Reply__kmod_control_t Reply_kmod_control;__Reply__host_get_special_port_t Reply_host_get_special_port;__Reply__host_set_special_port_t Reply_host_set_special_port;__Reply__host_set_exception_ports_t Reply_host_set_exception_ports;__Reply__host_get_exception_ports_t Reply_host_get_exception_ports;__Reply__host_swap_exception_ports_t Reply_host_swap_exception_ports;__Reply__host_load_symbol_table_t Reply_host_load_symbol_table;__Reply__mach_vm_wire_t Reply_mach_vm_wire;__Reply__host_processor_sets_t Reply_host_processor_sets;__Reply__host_processor_set_priv_t Reply_host_processor_set_priv;__Reply__set_dp_control_port_t Reply_set_dp_control_port;__Reply__get_dp_control_port_t Reply_get_dp_control_port;__Reply__host_set_UNDServer_t Reply_host_set_UNDServer;__Reply__host_get_UNDServer_t Reply_host_get_UNDServer;__Reply__kext_request_t Reply_kext_request;};
union __ReplyUnion__host_security_subsystem {__Reply__host_security_create_task_token_t Reply_host_security_create_task_token;__Reply__host_security_set_task_token_t Reply_host_security_set_task_token;};
union __ReplyUnion__ledger_subsystem {__Reply__ledger_create_t Reply_ledger_create;__Reply__ledger_terminate_t Reply_ledger_terminate;__Reply__ledger_transfer_t Reply_ledger_transfer;__Reply__ledger_read_t Reply_ledger_read;};
union __ReplyUnion__lock_set_subsystem {__Reply__lock_acquire_t Reply_lock_acquire;__Reply__lock_release_t Reply_lock_release;__Reply__lock_try_t Reply_lock_try;__Reply__lock_make_stable_t Reply_lock_make_stable;__Reply__lock_handoff_t Reply_lock_handoff;__Reply__lock_handoff_accept_t Reply_lock_handoff_accept;};
union __ReplyUnion__mach_host_subsystem {__Reply__host_info_t Reply_host_info;__Reply__host_kernel_version_t Reply_host_kernel_version;__Reply___host_page_size_t Reply__host_page_size;__Reply__mach_memory_object_memory_entry_t Reply_mach_memory_object_memory_entry;__Reply__host_processor_info_t Reply_host_processor_info;__Reply__host_get_io_master_t Reply_host_get_io_master;__Reply__host_get_clock_service_t Reply_host_get_clock_service;__Reply__kmod_get_info_t Reply_kmod_get_info;__Reply__host_zone_info_t Reply_host_zone_info;__Reply__host_virtual_physical_table_info_t Reply_host_virtual_physical_table_info;__Reply__host_ipc_hash_info_t Reply_host_ipc_hash_info;__Reply__processor_set_default_t Reply_processor_set_default;__Reply__processor_set_create_t Reply_processor_set_create;__Reply__mach_memory_object_memory_entry_64_t Reply_mach_memory_object_memory_entry_64;__Reply__host_statistics_t Reply_host_statistics;__Reply__host_request_notification_t Reply_host_request_notification;__Reply__host_lockgroup_info_t Reply_host_lockgroup_info;__Reply__host_statistics64_t Reply_host_statistics64;__Reply__mach_zone_info_t Reply_mach_zone_info;};
union __ReplyUnion__mach_port_subsystem {__Reply__mach_port_names_t Reply_mach_port_names;__Reply__mach_port_type_t Reply_mach_port_type;__Reply__mach_port_rename_t Reply_mach_port_rename;__Reply__mach_port_allocate_name_t Reply_mach_port_allocate_name;__Reply__mach_port_allocate_t Reply_mach_port_allocate;__Reply__mach_port_destroy_t Reply_mach_port_destroy;__Reply__mach_port_deallocate_t Reply_mach_port_deallocate;__Reply__mach_port_get_refs_t Reply_mach_port_get_refs;__Reply__mach_port_mod_refs_t Reply_mach_port_mod_refs;__Reply__mach_port_set_mscount_t Reply_mach_port_set_mscount;__Reply__mach_port_get_set_status_t Reply_mach_port_get_set_status;__Reply__mach_port_move_member_t Reply_mach_port_move_member;__Reply__mach_port_request_notification_t Reply_mach_port_request_notification;__Reply__mach_port_insert_right_t Reply_mach_port_insert_right;__Reply__mach_port_extract_right_t Reply_mach_port_extract_right;__Reply__mach_port_set_seqno_t Reply_mach_port_set_seqno;__Reply__mach_port_get_attributes_t Reply_mach_port_get_attributes;__Reply__mach_port_set_attributes_t Reply_mach_port_set_attributes;__Reply__mach_port_allocate_qos_t Reply_mach_port_allocate_qos;__Reply__mach_port_allocate_full_t Reply_mach_port_allocate_full;__Reply__task_set_port_space_t Reply_task_set_port_space;__Reply__mach_port_get_srights_t Reply_mach_port_get_srights;__Reply__mach_port_space_info_t Reply_mach_port_space_info;__Reply__mach_port_dnrequest_info_t Reply_mach_port_dnrequest_info;__Reply__mach_port_kernel_object_t Reply_mach_port_kernel_object;__Reply__mach_port_insert_member_t Reply_mach_port_insert_member;__Reply__mach_port_extract_member_t Reply_mach_port_extract_member;__Reply__mach_port_get_context_t Reply_mach_port_get_context;__Reply__mach_port_set_context_t Reply_mach_port_set_context;__Reply__mach_port_kobject_t Reply_mach_port_kobject;};
union __ReplyUnion__mach_vm_subsystem {__Reply__mach_vm_allocate_t Reply_mach_vm_allocate;__Reply__mach_vm_deallocate_t Reply_mach_vm_deallocate;__Reply__mach_vm_protect_t Reply_mach_vm_protect;__Reply__mach_vm_inherit_t Reply_mach_vm_inherit;__Reply__mach_vm_read_t Reply_mach_vm_read;__Reply__mach_vm_read_list_t Reply_mach_vm_read_list;__Reply__mach_vm_write_t Reply_mach_vm_write;__Reply__mach_vm_copy_t Reply_mach_vm_copy;__Reply__mach_vm_read_overwrite_t Reply_mach_vm_read_overwrite;__Reply__mach_vm_msync_t Reply_mach_vm_msync;__Reply__mach_vm_behavior_set_t Reply_mach_vm_behavior_set;__Reply__mach_vm_map_t Reply_mach_vm_map;__Reply__mach_vm_machine_attribute_t Reply_mach_vm_machine_attribute;__Reply__mach_vm_remap_t Reply_mach_vm_remap;__Reply__mach_vm_page_query_t Reply_mach_vm_page_query;__Reply__mach_vm_region_recurse_t Reply_mach_vm_region_recurse;__Reply__mach_vm_region_t Reply_mach_vm_region;__Reply___mach_make_memory_entry_t Reply__mach_make_memory_entry;__Reply__mach_vm_purgable_control_t Reply_mach_vm_purgable_control;__Reply__mach_vm_page_info_t Reply_mach_vm_page_info;};
union __ReplyUnion__netname_subsystem {__Reply__netname_check_in_t Reply_netname_check_in;__Reply__netname_look_up_t Reply_netname_look_up;__Reply__netname_check_out_t Reply_netname_check_out;__Reply__netname_version_t Reply_netname_version;};
union __ReplyUnion__processor_set_subsystem {__Reply__processor_set_statistics_t Reply_processor_set_statistics;__Reply__processor_set_destroy_t Reply_processor_set_destroy;__Reply__processor_set_max_priority_t Reply_processor_set_max_priority;__Reply__processor_set_policy_enable_t Reply_processor_set_policy_enable;__Reply__processor_set_policy_disable_t Reply_processor_set_policy_disable;__Reply__processor_set_tasks_t Reply_processor_set_tasks;__Reply__processor_set_threads_t Reply_processor_set_threads;__Reply__processor_set_policy_control_t Reply_processor_set_policy_control;__Reply__processor_set_stack_usage_t Reply_processor_set_stack_usage;__Reply__processor_set_info_t Reply_processor_set_info;};
union __ReplyUnion__processor_subsystem {__Reply__processor_start_t Reply_processor_start;__Reply__processor_exit_t Reply_processor_exit;__Reply__processor_info_t Reply_processor_info;__Reply__processor_control_t Reply_processor_control;__Reply__processor_assign_t Reply_processor_assign;__Reply__processor_get_assignment_t Reply_processor_get_assignment;};
union __ReplyUnion__task_subsystem {__Reply__task_create_t Reply_task_create;__Reply__task_terminate_t Reply_task_terminate;__Reply__task_threads_t Reply_task_threads;__Reply__mach_ports_register_t Reply_mach_ports_register;__Reply__mach_ports_lookup_t Reply_mach_ports_lookup;__Reply__task_info_t Reply_task_info;__Reply__task_set_info_t Reply_task_set_info;__Reply__task_suspend_t Reply_task_suspend;__Reply__task_resume_t Reply_task_resume;__Reply__task_get_special_port_t Reply_task_get_special_port;__Reply__task_set_special_port_t Reply_task_set_special_port;__Reply__thread_create_t Reply_thread_create;__Reply__thread_create_running_t Reply_thread_create_running;__Reply__task_set_exception_ports_t Reply_task_set_exception_ports;__Reply__task_get_exception_ports_t Reply_task_get_exception_ports;__Reply__task_swap_exception_ports_t Reply_task_swap_exception_ports;__Reply__lock_set_create_t Reply_lock_set_create;__Reply__lock_set_destroy_t Reply_lock_set_destroy;__Reply__semaphore_create_t Reply_semaphore_create;__Reply__semaphore_destroy_t Reply_semaphore_destroy;__Reply__task_policy_set_t Reply_task_policy_set;__Reply__task_policy_get_t Reply_task_policy_get;__Reply__task_sample_t Reply_task_sample;__Reply__task_policy_t Reply_task_policy;__Reply__task_set_emulation_t Reply_task_set_emulation;__Reply__task_get_emulation_vector_t Reply_task_get_emulation_vector;__Reply__task_set_emulation_vector_t Reply_task_set_emulation_vector;__Reply__task_set_ras_pc_t Reply_task_set_ras_pc;__Reply__task_zone_info_t Reply_task_zone_info;__Reply__task_assign_t Reply_task_assign;__Reply__task_assign_default_t Reply_task_assign_default;__Reply__task_get_assignment_t Reply_task_get_assignment;__Reply__task_set_policy_t Reply_task_set_policy;__Reply__task_get_state_t Reply_task_get_state;__Reply__task_set_state_t Reply_task_set_state;};
union __ReplyUnion__thread_act_subsystem {__Reply__thread_terminate_t Reply_thread_terminate;__Reply__act_get_state_t Reply_act_get_state;__Reply__act_set_state_t Reply_act_set_state;__Reply__thread_get_state_t Reply_thread_get_state;__Reply__thread_set_state_t Reply_thread_set_state;__Reply__thread_suspend_t Reply_thread_suspend;__Reply__thread_resume_t Reply_thread_resume;__Reply__thread_abort_t Reply_thread_abort;__Reply__thread_abort_safely_t Reply_thread_abort_safely;__Reply__thread_depress_abort_t Reply_thread_depress_abort;__Reply__thread_get_special_port_t Reply_thread_get_special_port;__Reply__thread_set_special_port_t Reply_thread_set_special_port;__Reply__thread_info_t Reply_thread_info;__Reply__thread_set_exception_ports_t Reply_thread_set_exception_ports;__Reply__thread_get_exception_ports_t Reply_thread_get_exception_ports;__Reply__thread_swap_exception_ports_t Reply_thread_swap_exception_ports;__Reply__thread_policy_t Reply_thread_policy;__Reply__thread_policy_set_t Reply_thread_policy_set;__Reply__thread_policy_get_t Reply_thread_policy_get;__Reply__thread_sample_t Reply_thread_sample;__Reply__etap_trace_thread_t Reply_etap_trace_thread;__Reply__thread_assign_t Reply_thread_assign;__Reply__thread_assign_default_t Reply_thread_assign_default;__Reply__thread_get_assignment_t Reply_thread_get_assignment;__Reply__thread_set_policy_t Reply_thread_set_policy;};
union __ReplyUnion__vm_map_subsystem {__Reply__vm_region_t Reply_vm_region;__Reply__vm_allocate_t Reply_vm_allocate;__Reply__vm_deallocate_t Reply_vm_deallocate;__Reply__vm_protect_t Reply_vm_protect;__Reply__vm_inherit_t Reply_vm_inherit;__Reply__vm_read_t Reply_vm_read;__Reply__vm_read_list_t Reply_vm_read_list;__Reply__vm_write_t Reply_vm_write;__Reply__vm_copy_t Reply_vm_copy;__Reply__vm_read_overwrite_t Reply_vm_read_overwrite;__Reply__vm_msync_t Reply_vm_msync;__Reply__vm_behavior_set_t Reply_vm_behavior_set;__Reply__vm_map_t Reply_vm_map;__Reply__vm_machine_attribute_t Reply_vm_machine_attribute;__Reply__vm_remap_t Reply_vm_remap;__Reply__task_wire_t Reply_task_wire;__Reply__mach_make_memory_entry_t Reply_mach_make_memory_entry;__Reply__vm_map_page_query_t Reply_vm_map_page_query;__Reply__mach_vm_region_info_t Reply_mach_vm_region_info;__Reply__vm_mapped_pages_info_t Reply_vm_mapped_pages_info;__Reply__vm_region_recurse_t Reply_vm_region_recurse;__Reply__vm_region_recurse_64_t Reply_vm_region_recurse_64;__Reply__mach_vm_region_info_64_t Reply_mach_vm_region_info_64;__Reply__vm_region_64_t Reply_vm_region_64;__Reply__mach_make_memory_entry_64_t Reply_mach_make_memory_entry_64;__Reply__vm_map_64_t Reply_vm_map_64;__Reply__vm_purgable_control_t Reply_vm_purgable_control;};
typedef struct $049C2F5371F68A7AF5021A13AE52665B __Reply___host_page_size_t;
typedef struct $EE99DDBDD6523B38A4B5202F2305E34F __Reply___mach_make_memory_entry_t;
typedef struct $F4F9A6DCA893D5DB6F32B9C415A8FCA2 __Reply__act_get_state_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__act_set_state_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__clock_alarm_reply_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__clock_alarm_t;
typedef struct $279A7D6BAE671E5D078D50BF79E5C443 __Reply__clock_get_attributes_t;
typedef struct $FCCAD8574E122F2EFADDBD13F6972B4E __Reply__clock_get_time_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__clock_set_attributes_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__clock_set_time_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__etap_trace_thread_t;
typedef struct $F1BB640A69E4C9C26809E32C99FD444E __Reply__exception_raise_state_identity_t;
typedef struct $F1BB640A69E4C9C26809E32C99FD444E __Reply__exception_raise_state_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__exception_raise_t;
typedef struct $7568DFD570526C5C2FE600A63FF7542E __Reply__get_dp_control_port_t;
typedef struct $B9D89F8ED69AD657CF8CCF6FD4EA24D0 __Reply__host_default_memory_manager_t;
typedef struct $333F68BA2C53B7EE0F2D13B448D38F51 __Reply__host_get_UNDServer_t;
typedef struct $6FABFC1284DD1437D43532E08AE85D17 __Reply__host_get_boot_info_t;
typedef struct $48128538EAAA3D95320DEC45BE60FE04 __Reply__host_get_clock_control_t;
typedef struct $59AA03472FCFCA397F68DC3419B6E0CE __Reply__host_get_clock_service_t;
typedef struct $73352B6DCC801F1A038056696B3E491C __Reply__host_get_exception_ports_t;
typedef struct $1AD567D4B9681C99D01C1D9A823E24D4 __Reply__host_get_io_master_t;
typedef struct $3E6B1E6034954B23411B3542CA61CBC7 __Reply__host_get_special_port_t;
typedef struct $82BD275F6039C166EF4DD9B4F2A9C114 __Reply__host_info_t;
typedef struct $14FA42BC96FAE132F19280844CA95DD9 __Reply__host_ipc_hash_info_t;
typedef struct $065AA4F4B3DDB89000C8C945CAC4CC2E __Reply__host_kernel_version_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__host_load_symbol_table_t;
typedef struct $B422E43E2D6C3DFAD9728BE968F369BB __Reply__host_lockgroup_info_t;
typedef struct $82BD275F6039C166EF4DD9B4F2A9C114 __Reply__host_priv_statistics_t;
typedef struct $A1BDF64247D778F13F19FE58DA07510E __Reply__host_processor_info_t;
typedef struct $49303478B7A3DE4A3AC5102047AEEEA3 __Reply__host_processor_set_priv_t;
typedef struct $B1FA16DA0CC571429FF694D2198EB26D __Reply__host_processor_sets_t;
typedef struct $23C7832C1B5305C0EFB6A337D90F166D __Reply__host_processors_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__host_reboot_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__host_request_notification_t;
typedef struct $DA3EF9D89B837FDE93915298E895B43B __Reply__host_security_create_task_token_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__host_security_set_task_token_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__host_set_UNDServer_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__host_set_exception_ports_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__host_set_special_port_t;
typedef struct $7BD86F81607C7D3E2D088DDB92740D0D __Reply__host_statistics64_t;
typedef struct $82BD275F6039C166EF4DD9B4F2A9C114 __Reply__host_statistics_t;
typedef struct $FFDCF6D4903B3C43BBF48445F1564ABC __Reply__host_swap_exception_ports_t;
typedef struct $14FA42BC96FAE132F19280844CA95DD9 __Reply__host_virtual_physical_table_info_t;
typedef struct $B3220D9486325F8BA63885498B936915 __Reply__host_zone_info_t;
typedef struct $1FFFE05A05E2172C218675AE0705335F __Reply__kext_request_t;
typedef struct $207271BEEF35C1E72B41BFA669B8BAC6 __Reply__kmod_control_t;
typedef struct $C6E5E20E9CA57385FADCC3EC88B8E8F5 __Reply__kmod_create_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__kmod_destroy_t;
typedef struct $6B72EC479EB324C93363DBF0210A4E09 __Reply__kmod_get_info_t;
typedef struct $FB19EE544F0F316F1E6BF9A40B1BEA34 __Reply__ledger_create_t;
typedef struct $73C487D09BD8877E84E65868850A4480 __Reply__ledger_read_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__ledger_terminate_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__ledger_transfer_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__lock_acquire_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__lock_handoff_accept_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__lock_handoff_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__lock_make_stable_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__lock_release_t;
typedef struct $7CAB042C95D279B03371C67C49CFDDCE __Reply__lock_set_create_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__lock_set_destroy_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__lock_try_t;
typedef struct $EE99DDBDD6523B38A4B5202F2305E34F __Reply__mach_make_memory_entry_64_t;
typedef struct $2E4AEC4DAEDEFAF9740FCE81CFC978B6 __Reply__mach_make_memory_entry_t;
typedef struct $92C88324278AB154CB324C17F95F0A4E __Reply__mach_memory_object_memory_entry_64_t;
typedef struct $92C88324278AB154CB324C17F95F0A4E __Reply__mach_memory_object_memory_entry_t;
typedef struct $1783B4855960E25D5065E02F55E2E263 __Reply__mach_port_allocate_full_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__mach_port_allocate_name_t;
typedef struct $1783B4855960E25D5065E02F55E2E263 __Reply__mach_port_allocate_qos_t;
typedef struct $50450166C1D5B7E6B5FADC2BC93CD3BD __Reply__mach_port_allocate_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__mach_port_deallocate_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__mach_port_destroy_t;
typedef struct $B58E161BB725F9F52DF6F7C15EFA30EA __Reply__mach_port_dnrequest_info_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__mach_port_extract_member_t;
typedef struct $EA7534D780195B9F22D1174E6CA3EFC2 __Reply__mach_port_extract_right_t;
typedef struct $46F98A3CF815908FB81E03FBB188BF3A __Reply__mach_port_get_attributes_t;
typedef struct $618A16F1A9CB4DE56CB312A402246FE1 __Reply__mach_port_get_context_t;
typedef struct $1A15CD9E076CE95EED0CB242AD23A728 __Reply__mach_port_get_refs_t;
typedef struct $54BD5584F5ADC0EEBB5CC3B97CC9ABCA __Reply__mach_port_get_set_status_t;
typedef struct $F1773A35038DB66F062B2D1DBF85E45A __Reply__mach_port_get_srights_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__mach_port_insert_member_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__mach_port_insert_right_t;
typedef struct $CEE03D2EA6896FBF3749E2AC26AFF34E __Reply__mach_port_kernel_object_t;
typedef struct $5A0A32527D91D719A95F587BC624F670 __Reply__mach_port_kobject_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__mach_port_mod_refs_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__mach_port_move_member_t;
typedef struct $7076454C220BCB0A4BC98C4D7957D8C3 __Reply__mach_port_names_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__mach_port_rename_t;
typedef struct $0046B6E3F76960040C1982B0037A2659 __Reply__mach_port_request_notification_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__mach_port_set_attributes_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__mach_port_set_context_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__mach_port_set_mscount_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__mach_port_set_seqno_t;
typedef struct $E9BF538EED9B46D5473DA4650D70F75C __Reply__mach_port_space_info_t;
typedef struct $479E1DE8ADCB55C92744EDE61D84AC3C __Reply__mach_port_type_t;
typedef struct $64173B50D5C298666AA1E07EB308B730 __Reply__mach_ports_lookup_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__mach_ports_register_t;
typedef struct $160180DA3C237BA935DA764154BD82EA __Reply__mach_vm_allocate_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__mach_vm_behavior_set_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__mach_vm_copy_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__mach_vm_deallocate_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__mach_vm_inherit_t;
typedef struct $B74BBF4C1467FECDB27E8CB1AA37D794 __Reply__mach_vm_machine_attribute_t;
typedef struct $160180DA3C237BA935DA764154BD82EA __Reply__mach_vm_map_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__mach_vm_msync_t;
typedef struct $3997483AC20F7907AE665D7DB5ACE57D __Reply__mach_vm_page_info_t;
typedef struct $5DB7049864680961BDFB9965C0ABC030 __Reply__mach_vm_page_query_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__mach_vm_protect_t;
typedef struct $2267E9288D5132BEF4B5A8B0E8AC33A6 __Reply__mach_vm_purgable_control_t;
typedef struct $DCAF10FDD4D6724B522470D0830DC7B5 __Reply__mach_vm_read_list_t;
typedef struct $9C5E7BEBDEAC9680FE5D9ADFB2DEA0C0 __Reply__mach_vm_read_overwrite_t;
typedef struct $207271BEEF35C1E72B41BFA669B8BAC6 __Reply__mach_vm_read_t;
typedef struct $DAECF1BBBEC63DCCC1C5BA594BE2FE4F __Reply__mach_vm_region_info_64_t;
typedef struct $6C8E198051B85F433C7E9E257C72A042 __Reply__mach_vm_region_info_t;
typedef struct $4E3803487B5F2E6858C157D0AC2FC93A __Reply__mach_vm_region_recurse_t;
typedef struct $BC7B37D8A6A0C0969EA99CA1E99D995C __Reply__mach_vm_region_t;
typedef struct $7C98BE8D658361DF4FF7D8EB6353C72F __Reply__mach_vm_remap_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__mach_vm_wire_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__mach_vm_write_t;
typedef struct $B3220D9486325F8BA63885498B936915 __Reply__mach_zone_info_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__netname_check_in_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__netname_check_out_t;
typedef struct $D0C9668C16251A7C1942AA04B3C1BAAB __Reply__netname_look_up_t;
typedef struct $DB68657B2CF3361C93E3D336E930DDB3 __Reply__netname_version_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__processor_assign_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__processor_control_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__processor_exit_t;
typedef struct $488333C1932ECE7496D2930CA2056B6D __Reply__processor_get_assignment_t;
typedef struct $298BF45BC869BFBDF761AF6C0543DC18 __Reply__processor_info_t;
typedef struct $CC043B3A15E15755209E3A20F84F16AB __Reply__processor_set_create_t;
typedef struct $575BADC95B9991A2B9CD2F3725868B8D __Reply__processor_set_default_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__processor_set_destroy_t;
typedef struct $07330457B1A8E241B31DE41A5C59B575 __Reply__processor_set_info_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__processor_set_max_priority_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__processor_set_policy_control_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__processor_set_policy_disable_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__processor_set_policy_enable_t;
typedef struct $40D648FC67D542FF76846B4380CDA5C4 __Reply__processor_set_stack_usage_t;
typedef struct $0E98A572E6852A6395110737D2ACDD5A __Reply__processor_set_statistics_t;
typedef struct $6C07615512B7E84BDE41117AEF6DE55F __Reply__processor_set_tasks_t;
typedef struct $776B37716F2A203FA8D593ECE8B979C2 __Reply__processor_set_threads_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__processor_start_t;
typedef struct $704B6F3E1CAEFA74D31888B2D78F9F88 __Reply__semaphore_create_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__semaphore_destroy_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__set_dp_control_port_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__task_assign_default_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__task_assign_t;
typedef struct $DA3EF9D89B837FDE93915298E895B43B __Reply__task_create_t;
typedef struct $488333C1932ECE7496D2930CA2056B6D __Reply__task_get_assignment_t;
typedef struct $FB4BFEF078574026C3C8614BADD24D68 __Reply__task_get_emulation_vector_t;
typedef struct $73352B6DCC801F1A038056696B3E491C __Reply__task_get_exception_ports_t;
typedef struct $E65ABC06A11602FED23D2457B8AEAC9D __Reply__task_get_special_port_t;
typedef struct $F4F9A6DCA893D5DB6F32B9C415A8FCA2 __Reply__task_get_state_t;
typedef struct $72CFD36915A4C95088F1A8826EB17983 __Reply__task_info_t;
typedef struct $127ADBDA39FF0AF10F74B8734D022F36 __Reply__task_policy_get_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__task_policy_set_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__task_policy_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__task_resume_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__task_sample_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__task_set_emulation_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__task_set_emulation_vector_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__task_set_exception_ports_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__task_set_info_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__task_set_policy_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__task_set_port_space_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__task_set_ras_pc_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__task_set_special_port_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__task_set_state_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__task_suspend_t;
typedef struct $FFDCF6D4903B3C43BBF48445F1564ABC __Reply__task_swap_exception_ports_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__task_terminate_t;
typedef struct $D0AB9F48B0077248C9C221F011C15B93 __Reply__task_threads_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__task_wire_t;
typedef struct $B3220D9486325F8BA63885498B936915 __Reply__task_zone_info_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__thread_abort_safely_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__thread_abort_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__thread_assign_default_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__thread_assign_t;
typedef struct $4B8804F6523751A831C00C572669AA3C __Reply__thread_create_running_t;
typedef struct $4B8804F6523751A831C00C572669AA3C __Reply__thread_create_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__thread_depress_abort_t;
typedef struct $488333C1932ECE7496D2930CA2056B6D __Reply__thread_get_assignment_t;
typedef struct $73352B6DCC801F1A038056696B3E491C __Reply__thread_get_exception_ports_t;
typedef struct $E65ABC06A11602FED23D2457B8AEAC9D __Reply__thread_get_special_port_t;
typedef struct $F4F9A6DCA893D5DB6F32B9C415A8FCA2 __Reply__thread_get_state_t;
typedef struct $BD234ABF5512865B2381E7712BF88565 __Reply__thread_info_t;
typedef struct $127ADBDA39FF0AF10F74B8734D022F36 __Reply__thread_policy_get_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__thread_policy_set_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__thread_policy_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__thread_resume_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__thread_sample_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__thread_set_exception_ports_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__thread_set_policy_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__thread_set_special_port_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__thread_set_state_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__thread_suspend_t;
typedef struct $73352B6DCC801F1A038056696B3E491C __Reply__thread_swap_exception_ports_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__thread_terminate_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__thread_wire_t;
typedef struct $F11203120C87D682B8E6D27123FE2347 __Reply__vm_allocate_cpm_t;
typedef struct $F11203120C87D682B8E6D27123FE2347 __Reply__vm_allocate_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__vm_behavior_set_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__vm_copy_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__vm_deallocate_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__vm_inherit_t;
typedef struct $B74BBF4C1467FECDB27E8CB1AA37D794 __Reply__vm_machine_attribute_t;
typedef struct $F11203120C87D682B8E6D27123FE2347 __Reply__vm_map_64_t;
typedef struct $5DB7049864680961BDFB9965C0ABC030 __Reply__vm_map_page_query_t;
typedef struct $F11203120C87D682B8E6D27123FE2347 __Reply__vm_map_t;
typedef struct $B01B4E9250F885241409748218B2C105 __Reply__vm_mapped_pages_info_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__vm_msync_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__vm_protect_t;
typedef struct $2267E9288D5132BEF4B5A8B0E8AC33A6 __Reply__vm_purgable_control_t;
typedef struct $7D6BE7882CE721D70B16F72EF4350FEA __Reply__vm_read_list_t;
typedef struct $A1F779EC0A67B47A0153BAA39A848A18 __Reply__vm_read_overwrite_t;
typedef struct $207271BEEF35C1E72B41BFA669B8BAC6 __Reply__vm_read_t;
typedef struct $A5EA39C0CE70DF2015B585156ECF8E0B __Reply__vm_region_64_t;
typedef struct $43EB887A7D5DDC6B5CCC173C2FB6636E __Reply__vm_region_recurse_64_t;
typedef struct $43EB887A7D5DDC6B5CCC173C2FB6636E __Reply__vm_region_recurse_t;
typedef struct $A5EA39C0CE70DF2015B585156ECF8E0B __Reply__vm_region_t;
typedef struct $8B6FDD4F28EF84224B001DC98A6CCF9E __Reply__vm_remap_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__vm_wire_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__vm_write_t;
union __RequestUnion__clock_priv_subsystem {__Request__clock_set_time_t Request_clock_set_time;__Request__clock_set_attributes_t Request_clock_set_attributes;};
union __RequestUnion__clock_reply_subsystem {__Request__clock_alarm_reply_t Request_clock_alarm_reply;};
union __RequestUnion__clock_subsystem {__Request__clock_get_time_t Request_clock_get_time;__Request__clock_get_attributes_t Request_clock_get_attributes;__Request__clock_alarm_t Request_clock_alarm;};
union __RequestUnion__exc_subsystem {__Request__exception_raise_t Request_exception_raise;__Request__exception_raise_state_t Request_exception_raise_state;__Request__exception_raise_state_identity_t Request_exception_raise_state_identity;};
union __RequestUnion__host_priv_subsystem {__Request__host_get_boot_info_t Request_host_get_boot_info;__Request__host_reboot_t Request_host_reboot;__Request__host_priv_statistics_t Request_host_priv_statistics;__Request__host_default_memory_manager_t Request_host_default_memory_manager;__Request__vm_wire_t Request_vm_wire;__Request__thread_wire_t Request_thread_wire;__Request__vm_allocate_cpm_t Request_vm_allocate_cpm;__Request__host_processors_t Request_host_processors;__Request__host_get_clock_control_t Request_host_get_clock_control;__Request__kmod_create_t Request_kmod_create;__Request__kmod_destroy_t Request_kmod_destroy;__Request__kmod_control_t Request_kmod_control;__Request__host_get_special_port_t Request_host_get_special_port;__Request__host_set_special_port_t Request_host_set_special_port;__Request__host_set_exception_ports_t Request_host_set_exception_ports;__Request__host_get_exception_ports_t Request_host_get_exception_ports;__Request__host_swap_exception_ports_t Request_host_swap_exception_ports;__Request__host_load_symbol_table_t Request_host_load_symbol_table;__Request__mach_vm_wire_t Request_mach_vm_wire;__Request__host_processor_sets_t Request_host_processor_sets;__Request__host_processor_set_priv_t Request_host_processor_set_priv;__Request__set_dp_control_port_t Request_set_dp_control_port;__Request__get_dp_control_port_t Request_get_dp_control_port;__Request__host_set_UNDServer_t Request_host_set_UNDServer;__Request__host_get_UNDServer_t Request_host_get_UNDServer;__Request__kext_request_t Request_kext_request;};
union __RequestUnion__host_security_subsystem {__Request__host_security_create_task_token_t Request_host_security_create_task_token;__Request__host_security_set_task_token_t Request_host_security_set_task_token;};
union __RequestUnion__ledger_subsystem {__Request__ledger_create_t Request_ledger_create;__Request__ledger_terminate_t Request_ledger_terminate;__Request__ledger_transfer_t Request_ledger_transfer;__Request__ledger_read_t Request_ledger_read;};
union __RequestUnion__lock_set_subsystem {__Request__lock_acquire_t Request_lock_acquire;__Request__lock_release_t Request_lock_release;__Request__lock_try_t Request_lock_try;__Request__lock_make_stable_t Request_lock_make_stable;__Request__lock_handoff_t Request_lock_handoff;__Request__lock_handoff_accept_t Request_lock_handoff_accept;};
union __RequestUnion__mach_host_subsystem {__Request__host_info_t Request_host_info;__Request__host_kernel_version_t Request_host_kernel_version;__Request___host_page_size_t Request__host_page_size;__Request__mach_memory_object_memory_entry_t Request_mach_memory_object_memory_entry;__Request__host_processor_info_t Request_host_processor_info;__Request__host_get_io_master_t Request_host_get_io_master;__Request__host_get_clock_service_t Request_host_get_clock_service;__Request__kmod_get_info_t Request_kmod_get_info;__Request__host_zone_info_t Request_host_zone_info;__Request__host_virtual_physical_table_info_t Request_host_virtual_physical_table_info;__Request__host_ipc_hash_info_t Request_host_ipc_hash_info;__Request__processor_set_default_t Request_processor_set_default;__Request__processor_set_create_t Request_processor_set_create;__Request__mach_memory_object_memory_entry_64_t Request_mach_memory_object_memory_entry_64;__Request__host_statistics_t Request_host_statistics;__Request__host_request_notification_t Request_host_request_notification;__Request__host_lockgroup_info_t Request_host_lockgroup_info;__Request__host_statistics64_t Request_host_statistics64;__Request__mach_zone_info_t Request_mach_zone_info;};
union __RequestUnion__mach_port_subsystem {__Request__mach_port_names_t Request_mach_port_names;__Request__mach_port_type_t Request_mach_port_type;__Request__mach_port_rename_t Request_mach_port_rename;__Request__mach_port_allocate_name_t Request_mach_port_allocate_name;__Request__mach_port_allocate_t Request_mach_port_allocate;__Request__mach_port_destroy_t Request_mach_port_destroy;__Request__mach_port_deallocate_t Request_mach_port_deallocate;__Request__mach_port_get_refs_t Request_mach_port_get_refs;__Request__mach_port_mod_refs_t Request_mach_port_mod_refs;__Request__mach_port_set_mscount_t Request_mach_port_set_mscount;__Request__mach_port_get_set_status_t Request_mach_port_get_set_status;__Request__mach_port_move_member_t Request_mach_port_move_member;__Request__mach_port_request_notification_t Request_mach_port_request_notification;__Request__mach_port_insert_right_t Request_mach_port_insert_right;__Request__mach_port_extract_right_t Request_mach_port_extract_right;__Request__mach_port_set_seqno_t Request_mach_port_set_seqno;__Request__mach_port_get_attributes_t Request_mach_port_get_attributes;__Request__mach_port_set_attributes_t Request_mach_port_set_attributes;__Request__mach_port_allocate_qos_t Request_mach_port_allocate_qos;__Request__mach_port_allocate_full_t Request_mach_port_allocate_full;__Request__task_set_port_space_t Request_task_set_port_space;__Request__mach_port_get_srights_t Request_mach_port_get_srights;__Request__mach_port_space_info_t Request_mach_port_space_info;__Request__mach_port_dnrequest_info_t Request_mach_port_dnrequest_info;__Request__mach_port_kernel_object_t Request_mach_port_kernel_object;__Request__mach_port_insert_member_t Request_mach_port_insert_member;__Request__mach_port_extract_member_t Request_mach_port_extract_member;__Request__mach_port_get_context_t Request_mach_port_get_context;__Request__mach_port_set_context_t Request_mach_port_set_context;__Request__mach_port_kobject_t Request_mach_port_kobject;};
union __RequestUnion__mach_vm_subsystem {__Request__mach_vm_allocate_t Request_mach_vm_allocate;__Request__mach_vm_deallocate_t Request_mach_vm_deallocate;__Request__mach_vm_protect_t Request_mach_vm_protect;__Request__mach_vm_inherit_t Request_mach_vm_inherit;__Request__mach_vm_read_t Request_mach_vm_read;__Request__mach_vm_read_list_t Request_mach_vm_read_list;__Request__mach_vm_write_t Request_mach_vm_write;__Request__mach_vm_copy_t Request_mach_vm_copy;__Request__mach_vm_read_overwrite_t Request_mach_vm_read_overwrite;__Request__mach_vm_msync_t Request_mach_vm_msync;__Request__mach_vm_behavior_set_t Request_mach_vm_behavior_set;__Request__mach_vm_map_t Request_mach_vm_map;__Request__mach_vm_machine_attribute_t Request_mach_vm_machine_attribute;__Request__mach_vm_remap_t Request_mach_vm_remap;__Request__mach_vm_page_query_t Request_mach_vm_page_query;__Request__mach_vm_region_recurse_t Request_mach_vm_region_recurse;__Request__mach_vm_region_t Request_mach_vm_region;__Request___mach_make_memory_entry_t Request__mach_make_memory_entry;__Request__mach_vm_purgable_control_t Request_mach_vm_purgable_control;__Request__mach_vm_page_info_t Request_mach_vm_page_info;};
union __RequestUnion__netname_subsystem {__Request__netname_check_in_t Request_netname_check_in;__Request__netname_look_up_t Request_netname_look_up;__Request__netname_check_out_t Request_netname_check_out;__Request__netname_version_t Request_netname_version;};
union __RequestUnion__processor_set_subsystem {__Request__processor_set_statistics_t Request_processor_set_statistics;__Request__processor_set_destroy_t Request_processor_set_destroy;__Request__processor_set_max_priority_t Request_processor_set_max_priority;__Request__processor_set_policy_enable_t Request_processor_set_policy_enable;__Request__processor_set_policy_disable_t Request_processor_set_policy_disable;__Request__processor_set_tasks_t Request_processor_set_tasks;__Request__processor_set_threads_t Request_processor_set_threads;__Request__processor_set_policy_control_t Request_processor_set_policy_control;__Request__processor_set_stack_usage_t Request_processor_set_stack_usage;__Request__processor_set_info_t Request_processor_set_info;};
union __RequestUnion__processor_subsystem {__Request__processor_start_t Request_processor_start;__Request__processor_exit_t Request_processor_exit;__Request__processor_info_t Request_processor_info;__Request__processor_control_t Request_processor_control;__Request__processor_assign_t Request_processor_assign;__Request__processor_get_assignment_t Request_processor_get_assignment;};
union __RequestUnion__task_subsystem {__Request__task_create_t Request_task_create;__Request__task_terminate_t Request_task_terminate;__Request__task_threads_t Request_task_threads;__Request__mach_ports_register_t Request_mach_ports_register;__Request__mach_ports_lookup_t Request_mach_ports_lookup;__Request__task_info_t Request_task_info;__Request__task_set_info_t Request_task_set_info;__Request__task_suspend_t Request_task_suspend;__Request__task_resume_t Request_task_resume;__Request__task_get_special_port_t Request_task_get_special_port;__Request__task_set_special_port_t Request_task_set_special_port;__Request__thread_create_t Request_thread_create;__Request__thread_create_running_t Request_thread_create_running;__Request__task_set_exception_ports_t Request_task_set_exception_ports;__Request__task_get_exception_ports_t Request_task_get_exception_ports;__Request__task_swap_exception_ports_t Request_task_swap_exception_ports;__Request__lock_set_create_t Request_lock_set_create;__Request__lock_set_destroy_t Request_lock_set_destroy;__Request__semaphore_create_t Request_semaphore_create;__Request__semaphore_destroy_t Request_semaphore_destroy;__Request__task_policy_set_t Request_task_policy_set;__Request__task_policy_get_t Request_task_policy_get;__Request__task_sample_t Request_task_sample;__Request__task_policy_t Request_task_policy;__Request__task_set_emulation_t Request_task_set_emulation;__Request__task_get_emulation_vector_t Request_task_get_emulation_vector;__Request__task_set_emulation_vector_t Request_task_set_emulation_vector;__Request__task_set_ras_pc_t Request_task_set_ras_pc;__Request__task_zone_info_t Request_task_zone_info;__Request__task_assign_t Request_task_assign;__Request__task_assign_default_t Request_task_assign_default;__Request__task_get_assignment_t Request_task_get_assignment;__Request__task_set_policy_t Request_task_set_policy;__Request__task_get_state_t Request_task_get_state;__Request__task_set_state_t Request_task_set_state;};
union __RequestUnion__thread_act_subsystem {__Request__thread_terminate_t Request_thread_terminate;__Request__act_get_state_t Request_act_get_state;__Request__act_set_state_t Request_act_set_state;__Request__thread_get_state_t Request_thread_get_state;__Request__thread_set_state_t Request_thread_set_state;__Request__thread_suspend_t Request_thread_suspend;__Request__thread_resume_t Request_thread_resume;__Request__thread_abort_t Request_thread_abort;__Request__thread_abort_safely_t Request_thread_abort_safely;__Request__thread_depress_abort_t Request_thread_depress_abort;__Request__thread_get_special_port_t Request_thread_get_special_port;__Request__thread_set_special_port_t Request_thread_set_special_port;__Request__thread_info_t Request_thread_info;__Request__thread_set_exception_ports_t Request_thread_set_exception_ports;__Request__thread_get_exception_ports_t Request_thread_get_exception_ports;__Request__thread_swap_exception_ports_t Request_thread_swap_exception_ports;__Request__thread_policy_t Request_thread_policy;__Request__thread_policy_set_t Request_thread_policy_set;__Request__thread_policy_get_t Request_thread_policy_get;__Request__thread_sample_t Request_thread_sample;__Request__etap_trace_thread_t Request_etap_trace_thread;__Request__thread_assign_t Request_thread_assign;__Request__thread_assign_default_t Request_thread_assign_default;__Request__thread_get_assignment_t Request_thread_get_assignment;__Request__thread_set_policy_t Request_thread_set_policy;};
union __RequestUnion__vm_map_subsystem {__Request__vm_region_t Request_vm_region;__Request__vm_allocate_t Request_vm_allocate;__Request__vm_deallocate_t Request_vm_deallocate;__Request__vm_protect_t Request_vm_protect;__Request__vm_inherit_t Request_vm_inherit;__Request__vm_read_t Request_vm_read;__Request__vm_read_list_t Request_vm_read_list;__Request__vm_write_t Request_vm_write;__Request__vm_copy_t Request_vm_copy;__Request__vm_read_overwrite_t Request_vm_read_overwrite;__Request__vm_msync_t Request_vm_msync;__Request__vm_behavior_set_t Request_vm_behavior_set;__Request__vm_map_t Request_vm_map;__Request__vm_machine_attribute_t Request_vm_machine_attribute;__Request__vm_remap_t Request_vm_remap;__Request__task_wire_t Request_task_wire;__Request__mach_make_memory_entry_t Request_mach_make_memory_entry;__Request__vm_map_page_query_t Request_vm_map_page_query;__Request__mach_vm_region_info_t Request_mach_vm_region_info;__Request__vm_mapped_pages_info_t Request_vm_mapped_pages_info;__Request__vm_region_recurse_t Request_vm_region_recurse;__Request__vm_region_recurse_64_t Request_vm_region_recurse_64;__Request__mach_vm_region_info_64_t Request_mach_vm_region_info_64;__Request__vm_region_64_t Request_vm_region_64;__Request__mach_make_memory_entry_64_t Request_mach_make_memory_entry_64;__Request__vm_map_64_t Request_vm_map_64;__Request__vm_purgable_control_t Request_vm_purgable_control;};
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request___host_page_size_t;
typedef struct $3E9B5AD32E2A117D2E91D7B75FF67A5D __Request___mach_make_memory_entry_t;
typedef struct $940BEB7FDCEBF6BD2D78705CDCB7BC00 __Request__act_get_state_t;
typedef struct $2C24181259AD7238BB41D98E89920B4F __Request__act_set_state_t;
typedef struct $4C821A4EFE1115B5FC2C4B7C575B022E __Request__clock_alarm_reply_t;
typedef struct $6AAD439E9A60B13F59A2B34A0B1B968C __Request__clock_alarm_t;
typedef struct $FEDEB051CE08D897834232829C0C3BAE __Request__clock_get_attributes_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__clock_get_time_t;
typedef struct $69D31FA9CDD4718FF5B7AF641C4535B7 __Request__clock_set_attributes_t;
typedef struct $2CB2463B5AF9A96AD792E2C849F46E7F __Request__clock_set_time_t;
typedef struct $F1B3AE218D4ECD7C43A384264AB43EE3 __Request__etap_trace_thread_t;
typedef struct $833420E8F4A758B58AE84F5888D3A29B __Request__exception_raise_state_identity_t;
typedef struct $048C5B8CD9C97BF8D36FBC1C859B011A __Request__exception_raise_state_t;
typedef struct $33415C5C79CC87822109F3703B9299D9 __Request__exception_raise_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__get_dp_control_port_t;
typedef struct $C2CBDBAA53DBE4CD2BF833027FA299D5 __Request__host_default_memory_manager_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__host_get_UNDServer_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__host_get_boot_info_t;
typedef struct $587EA17CD82C334AC5A48AFEDB918C96 __Request__host_get_clock_control_t;
typedef struct $587EA17CD82C334AC5A48AFEDB918C96 __Request__host_get_clock_service_t;
typedef struct $AFE166C1B1045E0C8B7F866BEC963EDA __Request__host_get_exception_ports_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__host_get_io_master_t;
typedef struct $DBA30DED97FFFF6D93797DB9E5CF4F43 __Request__host_get_special_port_t;
typedef struct $75304CCD3C967214A8BD283A9F6A93D0 __Request__host_info_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__host_ipc_hash_info_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__host_kernel_version_t;
typedef struct $8109324A5E6FC6C8E3497EBF9ED344C0 __Request__host_load_symbol_table_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__host_lockgroup_info_t;
typedef struct $75304CCD3C967214A8BD283A9F6A93D0 __Request__host_priv_statistics_t;
typedef struct $56709C31788A185985ED8F80CB75C10C __Request__host_processor_info_t;
typedef struct $4D17AC1D92846D89C56307C20B09863A __Request__host_processor_set_priv_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__host_processor_sets_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__host_processors_t;
typedef struct $669EF43B8E86E5E1B2D5831F1B9785B9 __Request__host_reboot_t;
typedef struct $D6880A8626DE4DB5DA08690FFF5A7EE0 __Request__host_request_notification_t;
typedef struct $0EEAE85943931F432FD264390744A4E7 __Request__host_security_create_task_token_t;
typedef struct $A737AF5627966EA5E9B02401BF60C18A __Request__host_security_set_task_token_t;
typedef struct $333F68BA2C53B7EE0F2D13B448D38F51 __Request__host_set_UNDServer_t;
typedef struct $71B18ED6CCE7F8693D0AE793EAB8102E __Request__host_set_exception_ports_t;
typedef struct $F1A44C946A11C4E88A7FB24B2ED8014B __Request__host_set_special_port_t;
typedef struct $7B9D4C5204CA928D4D62EAAC4140ED21 __Request__host_statistics64_t;
typedef struct $75304CCD3C967214A8BD283A9F6A93D0 __Request__host_statistics_t;
typedef struct $71B18ED6CCE7F8693D0AE793EAB8102E __Request__host_swap_exception_ports_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__host_virtual_physical_table_info_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__host_zone_info_t;
typedef struct $F406E51A63C11217A91340C33516F88C __Request__kext_request_t;
typedef struct $AF6F394DED458EEBDAD15880C92DFAA7 __Request__kmod_control_t;
typedef struct $AB89E1C42AC04654AD793083A62D1A9F __Request__kmod_create_t;
typedef struct $D48A1587B9C67DDCC12D42BCFEC74299 __Request__kmod_destroy_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__kmod_get_info_t;
typedef struct $CAE54129DDC456E19A5898FF69B86D62 __Request__ledger_create_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__ledger_read_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__ledger_terminate_t;
typedef struct $0CA50DA063E662D611776E2530D5C630 __Request__ledger_transfer_t;
typedef struct $5E04D424E81EA6874558831D2FFF2B4D __Request__lock_acquire_t;
typedef struct $5E04D424E81EA6874558831D2FFF2B4D __Request__lock_handoff_accept_t;
typedef struct $5E04D424E81EA6874558831D2FFF2B4D __Request__lock_handoff_t;
typedef struct $5E04D424E81EA6874558831D2FFF2B4D __Request__lock_make_stable_t;
typedef struct $5E04D424E81EA6874558831D2FFF2B4D __Request__lock_release_t;
typedef struct $5E073AC1240433595621B506EB1DA983 __Request__lock_set_create_t;
typedef struct $25B9151150FDB1BB89C80B2A8A85F680 __Request__lock_set_destroy_t;
typedef struct $5E04D424E81EA6874558831D2FFF2B4D __Request__lock_try_t;
typedef struct $B8642CD798FE16F406A454FEEE53FFC8 __Request__mach_make_memory_entry_64_t;
typedef struct $FE3C27134D9979D1E07496C70FEB2BBD __Request__mach_make_memory_entry_t;
typedef struct $8A833B3771E877D0F99F9E4D0939E663 __Request__mach_memory_object_memory_entry_64_t;
typedef struct $3D758159ED3B747496F87C93B1DFC5C3 __Request__mach_memory_object_memory_entry_t;
typedef struct $531BFEDFFBC90F9591113261F4F98EF9 __Request__mach_port_allocate_full_t;
typedef struct $F49B3D681D6431C8260F2C014755700B __Request__mach_port_allocate_name_t;
typedef struct $5243BF46A737224FC5E0495E8389B9A4 __Request__mach_port_allocate_qos_t;
typedef struct $9ADB6D801CB74636DD3BB8128AE6A17C __Request__mach_port_allocate_t;
typedef struct $19986235E824B34A0D641661B11CD27D __Request__mach_port_deallocate_t;
typedef struct $19986235E824B34A0D641661B11CD27D __Request__mach_port_destroy_t;
typedef struct $19986235E824B34A0D641661B11CD27D __Request__mach_port_dnrequest_info_t;
typedef struct $3199818696990377AE21FB32F85B31D8 __Request__mach_port_extract_member_t;
typedef struct $4203C03DDEA75B12CEED795269F3A503 __Request__mach_port_extract_right_t;
typedef struct $87460818A9C42CAAD7BB4BC88EB3F9D9 __Request__mach_port_get_attributes_t;
typedef struct $19986235E824B34A0D641661B11CD27D __Request__mach_port_get_context_t;
typedef struct $B346CF55E253733CEEA9A9F57C8BD312 __Request__mach_port_get_refs_t;
typedef struct $19986235E824B34A0D641661B11CD27D __Request__mach_port_get_set_status_t;
typedef struct $19986235E824B34A0D641661B11CD27D __Request__mach_port_get_srights_t;
typedef struct $3199818696990377AE21FB32F85B31D8 __Request__mach_port_insert_member_t;
typedef struct $E3188AF9666AE21995C94F310B376FC6 __Request__mach_port_insert_right_t;
typedef struct $19986235E824B34A0D641661B11CD27D __Request__mach_port_kernel_object_t;
typedef struct $19986235E824B34A0D641661B11CD27D __Request__mach_port_kobject_t;
typedef struct $77044CD3286DFFD089401BC1A550C0B3 __Request__mach_port_mod_refs_t;
typedef struct $2A4BA455395BF41F2F254FCA2AA74280 __Request__mach_port_move_member_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__mach_port_names_t;
typedef struct $4BA0F1DBE33A7FC0F8851313161BDC9C __Request__mach_port_rename_t;
typedef struct $89FB7E727BDCF83A4F62DE682B7A306A __Request__mach_port_request_notification_t;
typedef struct $D09842556D06A2DF198ED28371C9FC24 __Request__mach_port_set_attributes_t;
typedef struct $892873E46F8F240B706CD4D8B4C0EE69 __Request__mach_port_set_context_t;
typedef struct $B84095E180EBE617859A8545EC2805FC __Request__mach_port_set_mscount_t;
typedef struct $2D63240515AC7C828AB4C7B058DC34F3 __Request__mach_port_set_seqno_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__mach_port_space_info_t;
typedef struct $19986235E824B34A0D641661B11CD27D __Request__mach_port_type_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__mach_ports_lookup_t;
typedef struct $64173B50D5C298666AA1E07EB308B730 __Request__mach_ports_register_t;
typedef struct $9582347D37BF76839153FB59D783D952 __Request__mach_vm_allocate_t;
typedef struct $ECBF3EDE173DC336165517660AF0126F __Request__mach_vm_behavior_set_t;
typedef struct $EC3D8C1D47CD577132BD4EE7AFBF4E05 __Request__mach_vm_copy_t;
typedef struct $C73F2DA5D1FAD09FF5C310E32862AC76 __Request__mach_vm_deallocate_t;
typedef struct $293AEC9DFB56700A4584D426C489FAA8 __Request__mach_vm_inherit_t;
typedef struct $74E88319F6971EE204DBFD9B57B269F8 __Request__mach_vm_machine_attribute_t;
typedef struct $D58DA1E1B485B25D38C6421E4BA839DC __Request__mach_vm_map_t;
typedef struct $0FEB23DD3DAEBEB1108EF0227BA432B3 __Request__mach_vm_msync_t;
typedef struct $E6DD5EF71C59CDBBC01C1CDDA746F1DC __Request__mach_vm_page_info_t;
typedef struct $28467C2BF1D87957FF78F1692EFD23EF __Request__mach_vm_page_query_t;
typedef struct $492B927987B38FBFCA824A1252671E25 __Request__mach_vm_protect_t;
typedef struct $CC76991D9F83D1A958E6E229A0D1EA8D __Request__mach_vm_purgable_control_t;
typedef struct $F465ED20B10C6481709BD63930BC6003 __Request__mach_vm_read_list_t;
typedef struct $6FAFB5BC2FBC216C364C3DE816E26A29 __Request__mach_vm_read_overwrite_t;
typedef struct $C73F2DA5D1FAD09FF5C310E32862AC76 __Request__mach_vm_read_t;
typedef struct $23464681D0D095F096FB79A1E66062AF __Request__mach_vm_region_info_64_t;
typedef struct $23464681D0D095F096FB79A1E66062AF __Request__mach_vm_region_info_t;
typedef struct $F38A67955B73283DD9B66EE2B15E7106 __Request__mach_vm_region_recurse_t;
typedef struct $EBC9A6B10C6BC0782A5CEC3196C31D82 __Request__mach_vm_region_t;
typedef struct $E31153E692B38AE6ABEA73E583DCB3CE __Request__mach_vm_remap_t;
typedef struct $41C52BC1456A2CEC857D3659807C1386 __Request__mach_vm_wire_t;
typedef struct $8EE2A07E001F320FD50590FBAE1390E6 __Request__mach_vm_write_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__mach_zone_info_t;
typedef struct $9BD15C2DE3B549B6E5D91AD4D5FB2472 __Request__netname_check_in_t;
typedef struct $01CA16396E8E0606C9A9E0F0E20FCF07 __Request__netname_check_out_t;
typedef struct $9AB293AD14E7E28F8D88B77C9D755114 __Request__netname_look_up_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__netname_version_t;
typedef struct $FFE74F33A8D4184B0115806877430EDD __Request__processor_assign_t;
typedef struct $268E73D492E0AA9543C2DAE749E4E286 __Request__processor_control_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__processor_exit_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__processor_get_assignment_t;
typedef struct $99892F497716B18479AFC6F93A6376AD __Request__processor_info_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__processor_set_create_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__processor_set_default_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__processor_set_destroy_t;
typedef struct $5567FEF96CECDEB28576E12650BB4F71 __Request__processor_set_info_t;
typedef struct $47B1E0FCCF87277E593C854FB80D0521 __Request__processor_set_max_priority_t;
typedef struct $D9B0ADBD00F5F5522FB9AC300CCD391E __Request__processor_set_policy_control_t;
typedef struct $B6133C04D7E68696884D0F2477EC89D3 __Request__processor_set_policy_disable_t;
typedef struct $D81AFE54BC1383739B7B7705B8C42C3D __Request__processor_set_policy_enable_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__processor_set_stack_usage_t;
typedef struct $7E69CF2F21F2DE86821941D7ACE3ABBA __Request__processor_set_statistics_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__processor_set_tasks_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__processor_set_threads_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__processor_start_t;
typedef struct $6BC0D17B2B96A5F91967EA8653FF4084 __Request__semaphore_create_t;
typedef struct $704B6F3E1CAEFA74D31888B2D78F9F88 __Request__semaphore_destroy_t;
typedef struct $5A17788FF526DC41EE65ED362A8F9A06 __Request__set_dp_control_port_t;
typedef struct $86F29632C393BEC61052C835C8FE3129 __Request__task_assign_default_t;
typedef struct $671C5A9886DEC29C4FEC63DF421615C6 __Request__task_assign_t;
typedef struct $BBF0DF368E56DACC45223BCB3DEA73E4 __Request__task_create_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__task_get_assignment_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__task_get_emulation_vector_t;
typedef struct $AFE166C1B1045E0C8B7F866BEC963EDA __Request__task_get_exception_ports_t;
typedef struct $59F23475065BD2E9F3FA293A04BFFD37 __Request__task_get_special_port_t;
typedef struct $740196A4AE4F0F1C0D656C4EF0AFE809 __Request__task_get_state_t;
typedef struct $A8165CB9074F0252F5387BFE013515BC __Request__task_info_t;
typedef struct $9CD45B6D299FC36A745AB895FED2FFAE __Request__task_policy_get_t;
typedef struct $478A0C5B06F3F085EB929445D74AA112 __Request__task_policy_set_t;
typedef struct $29E38C6493B75A6FA6817975AF03D4C0 __Request__task_policy_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__task_resume_t;
typedef struct $FDCFA80C9015498DB49FE80C74BE4ADF __Request__task_sample_t;
typedef struct $CD97E842BE97226AEDD8FA0499E21FED __Request__task_set_emulation_t;
typedef struct $FB4BFEF078574026C3C8614BADD24D68 __Request__task_set_emulation_vector_t;
typedef struct $71B18ED6CCE7F8693D0AE793EAB8102E __Request__task_set_exception_ports_t;
typedef struct $89FEC8E87EEDD00C0CF28D288AB7DB30 __Request__task_set_info_t;
typedef struct $FB65CC25317C65F4D3C395D38114E663 __Request__task_set_policy_t;
typedef struct $B609C4CC44C72843B520E4D8871C3E06 __Request__task_set_port_space_t;
typedef struct $9D47920389E792E7BC941BE34CEE9E53 __Request__task_set_ras_pc_t;
typedef struct $D5C5C0A4FB77109A22B40E51950751DD __Request__task_set_special_port_t;
typedef struct $D01A4AC644F6B88C742A307AE9CB3F5A __Request__task_set_state_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__task_suspend_t;
typedef struct $71B18ED6CCE7F8693D0AE793EAB8102E __Request__task_swap_exception_ports_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__task_terminate_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__task_threads_t;
typedef struct $778EB01A7E54F11D251DAE9DCCA40C02 __Request__task_wire_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__task_zone_info_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__thread_abort_safely_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__thread_abort_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__thread_assign_default_t;
typedef struct $11759426EFCC6514E2B26D384F50B504 __Request__thread_assign_t;
typedef struct $D01A4AC644F6B88C742A307AE9CB3F5A __Request__thread_create_running_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__thread_create_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__thread_depress_abort_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__thread_get_assignment_t;
typedef struct $AFE166C1B1045E0C8B7F866BEC963EDA __Request__thread_get_exception_ports_t;
typedef struct $59F23475065BD2E9F3FA293A04BFFD37 __Request__thread_get_special_port_t;
typedef struct $740196A4AE4F0F1C0D656C4EF0AFE809 __Request__thread_get_state_t;
typedef struct $ACB9639845DE66FD3FA84A89BA11A6C6 __Request__thread_info_t;
typedef struct $8E8217BBADE0ADE8EA72A465AE8DB052 __Request__thread_policy_get_t;
typedef struct $FC28B28F509CCD1DBFC66983DF428597 __Request__thread_policy_set_t;
typedef struct $960F984C3AE962B8F9E63C3D54374EB6 __Request__thread_policy_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__thread_resume_t;
typedef struct $FDCFA80C9015498DB49FE80C74BE4ADF __Request__thread_sample_t;
typedef struct $71B18ED6CCE7F8693D0AE793EAB8102E __Request__thread_set_exception_ports_t;
typedef struct $26DC3EB05C17544AB8AFD85FB443F277 __Request__thread_set_policy_t;
typedef struct $D5C5C0A4FB77109A22B40E51950751DD __Request__thread_set_special_port_t;
typedef struct $D01A4AC644F6B88C742A307AE9CB3F5A __Request__thread_set_state_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__thread_suspend_t;
typedef struct $71B18ED6CCE7F8693D0AE793EAB8102E __Request__thread_swap_exception_ports_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__thread_terminate_t;
typedef struct $5EE71EC2B6ECEB33372096427B2859E8 __Request__thread_wire_t;
typedef struct $2C6E018EEF72F12BBEAF7059A87F0DBD __Request__vm_allocate_cpm_t;
typedef struct $AB09096FC22418DF5FF078E5EEC0B812 __Request__vm_allocate_t;
typedef struct $088788A38BBC50D48DDABC82065D5C20 __Request__vm_behavior_set_t;
typedef struct $0E6CC5D607D299E0B4EAC6FD047D8F10 __Request__vm_copy_t;
typedef struct $75CD40B42DA3FE652B2050998764C1EA __Request__vm_deallocate_t;
typedef struct $9542197A1301620A60E097220E793D31 __Request__vm_inherit_t;
typedef struct $2FBFFD789A2C809930720784B8820AE2 __Request__vm_machine_attribute_t;
typedef struct $E24E91FD65EFF0F160CA6C71162442DA __Request__vm_map_64_t;
typedef struct $8C51462DCCBA10E8B75CFFF786FC297E __Request__vm_map_page_query_t;
typedef struct $F3A38383CE2E0DAC4148785558BAB876 __Request__vm_map_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__vm_mapped_pages_info_t;
typedef struct $A474581121662292E5F04EE46D9A30FE __Request__vm_msync_t;
typedef struct $DAF19F87D18289B2FEB9E5CF85C90F9A __Request__vm_protect_t;
typedef struct $9FBED4CF5043C1481558BDE489C7B3DA __Request__vm_purgable_control_t;
typedef struct $CDC8267DE048B2F631A00EEC2191AA35 __Request__vm_read_list_t;
typedef struct $B0130559E5806B7D1758D14999BC33AE __Request__vm_read_overwrite_t;
typedef struct $75CD40B42DA3FE652B2050998764C1EA __Request__vm_read_t;
typedef struct $3AD6DCE498BEF9CAF21EEA5EB590F8B6 __Request__vm_region_64_t;
typedef struct $9487B923D69225998A44A53C15C58453 __Request__vm_region_recurse_64_t;
typedef struct $9487B923D69225998A44A53C15C58453 __Request__vm_region_recurse_t;
typedef struct $3AD6DCE498BEF9CAF21EEA5EB590F8B6 __Request__vm_region_t;
typedef struct $06E00F3ABE7F060E21CF67B7B214767C __Request__vm_remap_t;
typedef struct $2BBFCDCB7AAC56598321865C412EDD95 __Request__vm_wire_t;
typedef struct $456B529FC136F2DC55D26FBF7B75F342 __Request__vm_write_t;
typedef void *__builtin_va_list;
typedef char __curl_rule_01__[1];
typedef char __curl_rule_02__[1];
typedef char __curl_rule_03__[1];
typedef char __curl_rule_04__[1];
typedef char __curl_rule_05__[1];
typedef __int64_t __darwin_blkcnt_t;
typedef __int32_t __darwin_blksize_t;
typedef unsigned __int64 __darwin_clock_t;
typedef int __darwin_ct_rune_t;
typedef __int32_t __darwin_dev_t;
struct __darwin_fp_control {unsigned __int16 __invalid : 1;unsigned __int16 __denorm : 1;unsigned __int16 __zdiv : 1;unsigned __int16 __ovrfl : 1;unsigned __int16 __undfl : 1;unsigned __int16 __precis : 1;unsigned __int16 : 2;unsigned __int16 __pc : 2;unsigned __int16 __rc : 2;unsigned __int16 : 1;unsigned __int16 : 3;};
typedef struct __darwin_fp_control __darwin_fp_control_t;
struct __darwin_fp_status {unsigned __int16 __invalid : 1;unsigned __int16 __denorm : 1;unsigned __int16 __zdiv : 1;unsigned __int16 __ovrfl : 1;unsigned __int16 __undfl : 1;unsigned __int16 __precis : 1;unsigned __int16 __stkflt : 1;unsigned __int16 __errsumm : 1;unsigned __int16 __c0 : 1;unsigned __int16 __c1 : 1;unsigned __int16 __c2 : 1;unsigned __int16 __tos : 3;unsigned __int16 __c3 : 1;unsigned __int16 __busy : 1;};
typedef struct __darwin_fp_status __darwin_fp_status_t;
typedef unsigned int __darwin_fsblkcnt_t;
typedef unsigned int __darwin_fsfilcnt_t;
typedef __uint32_t __darwin_gid_t;
struct __darwin_i386_avx_state {int __fpu_reserved[2];struct __darwin_fp_control __fpu_fcw;struct __darwin_fp_status __fpu_fsw;__uint8_t __fpu_ftw;__uint8_t __fpu_rsrv1;__uint16_t __fpu_fop;__uint32_t __fpu_ip;__uint16_t __fpu_cs;__uint16_t __fpu_rsrv2;__uint32_t __fpu_dp;__uint16_t __fpu_ds;__uint16_t __fpu_rsrv3;__uint32_t __fpu_mxcsr;__uint32_t __fpu_mxcsrmask;struct __darwin_mmst_reg __fpu_stmm0;struct __darwin_mmst_reg __fpu_stmm1;struct __darwin_mmst_reg __fpu_stmm2;struct __darwin_mmst_reg __fpu_stmm3;struct __darwin_mmst_reg __fpu_stmm4;struct __darwin_mmst_reg __fpu_stmm5;struct __darwin_mmst_reg __fpu_stmm6;struct __darwin_mmst_reg __fpu_stmm7;struct __darwin_xmm_reg __fpu_xmm0;struct __darwin_xmm_reg __fpu_xmm1;struct __darwin_xmm_reg __fpu_xmm2;struct __darwin_xmm_reg __fpu_xmm3;struct __darwin_xmm_reg __fpu_xmm4;struct __darwin_xmm_reg __fpu_xmm5;struct __darwin_xmm_reg __fpu_xmm6;struct __darwin_xmm_reg __fpu_xmm7;char __fpu_rsrv4[224];int __fpu_reserved1;char __avx_reserved1[64];struct __darwin_xmm_reg __fpu_ymmh0;struct __darwin_xmm_reg __fpu_ymmh1;struct __darwin_xmm_reg __fpu_ymmh2;struct __darwin_xmm_reg __fpu_ymmh3;struct __darwin_xmm_reg __fpu_ymmh4;struct __darwin_xmm_reg __fpu_ymmh5;struct __darwin_xmm_reg __fpu_ymmh6;struct __darwin_xmm_reg __fpu_ymmh7;};
struct __darwin_i386_exception_state {__uint16_t __trapno;__uint16_t __cpu;__uint32_t __err;__uint32_t __faultvaddr;};
struct __darwin_i386_float_state {int __fpu_reserved[2];struct __darwin_fp_control __fpu_fcw;struct __darwin_fp_status __fpu_fsw;__uint8_t __fpu_ftw;__uint8_t __fpu_rsrv1;__uint16_t __fpu_fop;__uint32_t __fpu_ip;__uint16_t __fpu_cs;__uint16_t __fpu_rsrv2;__uint32_t __fpu_dp;__uint16_t __fpu_ds;__uint16_t __fpu_rsrv3;__uint32_t __fpu_mxcsr;__uint32_t __fpu_mxcsrmask;struct __darwin_mmst_reg __fpu_stmm0;struct __darwin_mmst_reg __fpu_stmm1;struct __darwin_mmst_reg __fpu_stmm2;struct __darwin_mmst_reg __fpu_stmm3;struct __darwin_mmst_reg __fpu_stmm4;struct __darwin_mmst_reg __fpu_stmm5;struct __darwin_mmst_reg __fpu_stmm6;struct __darwin_mmst_reg __fpu_stmm7;struct __darwin_xmm_reg __fpu_xmm0;struct __darwin_xmm_reg __fpu_xmm1;struct __darwin_xmm_reg __fpu_xmm2;struct __darwin_xmm_reg __fpu_xmm3;struct __darwin_xmm_reg __fpu_xmm4;struct __darwin_xmm_reg __fpu_xmm5;struct __darwin_xmm_reg __fpu_xmm6;struct __darwin_xmm_reg __fpu_xmm7;char __fpu_rsrv4[224];int __fpu_reserved1;};
struct __darwin_i386_thread_state {unsigned int __eax;unsigned int __ebx;unsigned int __ecx;unsigned int __edx;unsigned int __edi;unsigned int __esi;unsigned int __ebp;unsigned int __esp;unsigned int __ss;unsigned int __eflags;unsigned int __eip;unsigned int __cs;unsigned int __ds;unsigned int __es;unsigned int __fs;unsigned int __gs;};
typedef __uint32_t __darwin_id_t;
typedef __uint64_t __darwin_ino64_t;
typedef __darwin_ino64_t __darwin_ino_t;
typedef __int64 __darwin_intptr_t;
typedef __darwin_natural_t __darwin_mach_port_name_t;
typedef __darwin_mach_port_name_t __darwin_mach_port_t;
typedef __mbstate_t __darwin_mbstate_t;
struct __darwin_mcontext32 {struct __darwin_i386_exception_state __es;struct __darwin_i386_thread_state __ss;struct __darwin_i386_float_state __fs;};
struct __darwin_mcontext64 {struct __darwin_x86_exception_state64 __es;struct __darwin_x86_thread_state64 __ss;struct __darwin_x86_float_state64 __fs;};
struct __darwin_mcontext_avx32 {struct __darwin_i386_exception_state __es;struct __darwin_i386_thread_state __ss;struct __darwin_i386_avx_state __fs;};
struct __darwin_mcontext_avx64 {struct __darwin_x86_exception_state64 __es;struct __darwin_x86_thread_state64 __ss;struct __darwin_x86_avx_state64 __fs;};
struct __darwin_mmst_reg {char __mmst_reg[10];char __mmst_rsrv[6];};
typedef __uint16_t __darwin_mode_t;
typedef unsigned int __darwin_natural_t;
typedef int __darwin_nl_item;
typedef __int64_t __darwin_off_t;
typedef __int32_t __darwin_pid_t;
typedef struct _opaque_pthread_attr_t __darwin_pthread_attr_t;
typedef struct _opaque_pthread_cond_t __darwin_pthread_cond_t;
typedef struct _opaque_pthread_condattr_t __darwin_pthread_condattr_t;
struct __darwin_pthread_handler_rec {void (__cdecl *__routine)(void *);void *__arg;struct __darwin_pthread_handler_rec *__next;};
typedef unsigned __int64 __darwin_pthread_key_t;
typedef struct _opaque_pthread_mutex_t __darwin_pthread_mutex_t;
typedef struct _opaque_pthread_mutexattr_t __darwin_pthread_mutexattr_t;
typedef struct _opaque_pthread_once_t __darwin_pthread_once_t;
typedef struct _opaque_pthread_rwlock_t __darwin_pthread_rwlock_t;
typedef struct _opaque_pthread_rwlockattr_t __darwin_pthread_rwlockattr_t;
typedef struct _opaque_pthread_t *__darwin_pthread_t;
typedef int __darwin_ptrdiff_t;
typedef __darwin_wchar_t __darwin_rune_t;
struct __darwin_sigaltstack {void *ss_sp;__darwin_size_t ss_size;int ss_flags;};
typedef __uint32_t __darwin_sigset_t;
typedef unsigned __int64 __darwin_size_t;
typedef __uint32_t __darwin_socklen_t;
typedef __int64 __darwin_ssize_t;
typedef __int32_t __darwin_suseconds_t;
typedef __int64 __darwin_time_t;
struct __darwin_ucontext {int uc_onstack;__darwin_sigset_t uc_sigmask;struct __darwin_sigaltstack uc_stack;struct __darwin_ucontext *uc_link;__darwin_size_t uc_mcsize;struct __darwin_mcontext64 *uc_mcontext;struct __darwin_mcontext64 __mcontext_data;};
typedef __uint32_t __darwin_uid_t;
typedef __uint32_t __darwin_useconds_t;
typedef char __darwin_uuid_string_t[37];
typedef unsigned __int8 __darwin_uuid_t[16];
typedef __builtin_va_list __darwin_va_list;
typedef __darwin_ct_rune_t __darwin_wchar_t;
typedef int __darwin_wctrans_t;
typedef __uint32_t __darwin_wctype_t;
typedef __darwin_ct_rune_t __darwin_wint_t;
struct __darwin_x86_avx_state64 {int __fpu_reserved[2];struct __darwin_fp_control __fpu_fcw;struct __darwin_fp_status __fpu_fsw;__uint8_t __fpu_ftw;__uint8_t __fpu_rsrv1;__uint16_t __fpu_fop;__uint32_t __fpu_ip;__uint16_t __fpu_cs;__uint16_t __fpu_rsrv2;__uint32_t __fpu_dp;__uint16_t __fpu_ds;__uint16_t __fpu_rsrv3;__uint32_t __fpu_mxcsr;__uint32_t __fpu_mxcsrmask;struct __darwin_mmst_reg __fpu_stmm0;struct __darwin_mmst_reg __fpu_stmm1;struct __darwin_mmst_reg __fpu_stmm2;struct __darwin_mmst_reg __fpu_stmm3;struct __darwin_mmst_reg __fpu_stmm4;struct __darwin_mmst_reg __fpu_stmm5;struct __darwin_mmst_reg __fpu_stmm6;struct __darwin_mmst_reg __fpu_stmm7;struct __darwin_xmm_reg __fpu_xmm0;struct __darwin_xmm_reg __fpu_xmm1;struct __darwin_xmm_reg __fpu_xmm2;struct __darwin_xmm_reg __fpu_xmm3;struct __darwin_xmm_reg __fpu_xmm4;struct __darwin_xmm_reg __fpu_xmm5;struct __darwin_xmm_reg __fpu_xmm6;struct __darwin_xmm_reg __fpu_xmm7;struct __darwin_xmm_reg __fpu_xmm8;struct __darwin_xmm_reg __fpu_xmm9;struct __darwin_xmm_reg __fpu_xmm10;struct __darwin_xmm_reg __fpu_xmm11;struct __darwin_xmm_reg __fpu_xmm12;struct __darwin_xmm_reg __fpu_xmm13;struct __darwin_xmm_reg __fpu_xmm14;struct __darwin_xmm_reg __fpu_xmm15;char __fpu_rsrv4[96];int __fpu_reserved1;char __avx_reserved1[64];struct __darwin_xmm_reg __fpu_ymmh0;struct __darwin_xmm_reg __fpu_ymmh1;struct __darwin_xmm_reg __fpu_ymmh2;struct __darwin_xmm_reg __fpu_ymmh3;struct __darwin_xmm_reg __fpu_ymmh4;struct __darwin_xmm_reg __fpu_ymmh5;struct __darwin_xmm_reg __fpu_ymmh6;struct __darwin_xmm_reg __fpu_ymmh7;struct __darwin_xmm_reg __fpu_ymmh8;struct __darwin_xmm_reg __fpu_ymmh9;struct __darwin_xmm_reg __fpu_ymmh10;struct __darwin_xmm_reg __fpu_ymmh11;struct __darwin_xmm_reg __fpu_ymmh12;struct __darwin_xmm_reg __fpu_ymmh13;struct __darwin_xmm_reg __fpu_ymmh14;struct __darwin_xmm_reg __fpu_ymmh15;};
struct __darwin_x86_debug_state32 {unsigned int __dr0;unsigned int __dr1;unsigned int __dr2;unsigned int __dr3;unsigned int __dr4;unsigned int __dr5;unsigned int __dr6;unsigned int __dr7;};
struct __darwin_x86_debug_state64 {__uint64_t __dr0;__uint64_t __dr1;__uint64_t __dr2;__uint64_t __dr3;__uint64_t __dr4;__uint64_t __dr5;__uint64_t __dr6;__uint64_t __dr7;};
struct __darwin_x86_exception_state64 {__uint16_t __trapno;__uint16_t __cpu;__uint32_t __err;__uint64_t __faultvaddr;};
struct __darwin_x86_float_state64 {int __fpu_reserved[2];struct __darwin_fp_control __fpu_fcw;struct __darwin_fp_status __fpu_fsw;__uint8_t __fpu_ftw;__uint8_t __fpu_rsrv1;__uint16_t __fpu_fop;__uint32_t __fpu_ip;__uint16_t __fpu_cs;__uint16_t __fpu_rsrv2;__uint32_t __fpu_dp;__uint16_t __fpu_ds;__uint16_t __fpu_rsrv3;__uint32_t __fpu_mxcsr;__uint32_t __fpu_mxcsrmask;struct __darwin_mmst_reg __fpu_stmm0;struct __darwin_mmst_reg __fpu_stmm1;struct __darwin_mmst_reg __fpu_stmm2;struct __darwin_mmst_reg __fpu_stmm3;struct __darwin_mmst_reg __fpu_stmm4;struct __darwin_mmst_reg __fpu_stmm5;struct __darwin_mmst_reg __fpu_stmm6;struct __darwin_mmst_reg __fpu_stmm7;struct __darwin_xmm_reg __fpu_xmm0;struct __darwin_xmm_reg __fpu_xmm1;struct __darwin_xmm_reg __fpu_xmm2;struct __darwin_xmm_reg __fpu_xmm3;struct __darwin_xmm_reg __fpu_xmm4;struct __darwin_xmm_reg __fpu_xmm5;struct __darwin_xmm_reg __fpu_xmm6;struct __darwin_xmm_reg __fpu_xmm7;struct __darwin_xmm_reg __fpu_xmm8;struct __darwin_xmm_reg __fpu_xmm9;struct __darwin_xmm_reg __fpu_xmm10;struct __darwin_xmm_reg __fpu_xmm11;struct __darwin_xmm_reg __fpu_xmm12;struct __darwin_xmm_reg __fpu_xmm13;struct __darwin_xmm_reg __fpu_xmm14;struct __darwin_xmm_reg __fpu_xmm15;char __fpu_rsrv4[96];int __fpu_reserved1;};
struct __darwin_x86_thread_state64 {__uint64_t __rax;__uint64_t __rbx;__uint64_t __rcx;__uint64_t __rdx;__uint64_t __rdi;__uint64_t __rsi;__uint64_t __rbp;__uint64_t __rsp;__uint64_t __r8;__uint64_t __r9;__uint64_t __r10;__uint64_t __r11;__uint64_t __r12;__uint64_t __r13;__uint64_t __r14;__uint64_t __r15;__uint64_t __rip;__uint64_t __rflags;__uint64_t __cs;__uint64_t __fs;__uint64_t __gs;};
struct __darwin_xmm_reg {char __xmm_reg[16];};
struct __db {DBTYPE type;int (__cdecl *close)(struct __db *);int (__cdecl *del)(const struct __db *, const DBT *, unsigned int);int (__cdecl *get)(const struct __db *, const DBT *, DBT *, unsigned int);int (__cdecl *put)(const struct __db *, DBT *, const DBT *, unsigned int);int (__cdecl *seq)(const struct __db *, DBT *, DBT *, unsigned int);int (__cdecl *sync)(const struct __db *, unsigned int);void *internal;int (__cdecl *fd)(const struct __db *);};
typedef __builtin_va_list __gnuc_va_list;
struct __if_clone;
struct __ifaddr;
struct __ifmultiaddr;
struct __ifnet;
struct __ifnet_filter;
typedef __int16 __int16_t;
typedef int __int32_t;
typedef __int64 __int64_t;
typedef signed __int8 __int8_t;
typedef union $149468D43E4B0BB405DED2721C573480 __mbstate_t;
struct __mbuf;
struct __msfilterreq {uint32_t msfr_ifindex;uint32_t msfr_fmode;uint32_t msfr_nsrcs;uint32_t __msfr_align;struct sockaddr_storage msfr_group;struct sockaddr_storage *msfr_srcs;};
struct __msqid_ds_new {struct ipc_perm msg_perm;__int32_t msg_first;__int32_t msg_last;msglen_t msg_cbytes;msgqnum_t msg_qnum;msglen_t msg_qbytes;pid_t msg_lspid;pid_t msg_lrpid;time_t msg_stime;__int32_t msg_pad1;time_t msg_rtime;__int32_t msg_pad2;time_t msg_ctime;__int32_t msg_pad3;__int32_t msg_pad4[4];};
struct __nl_cat_d {void *__data;int __size;};
enum __ns_cert_types {cert_t_pkix = 0x1,cert_t_spki = 0x2,cert_t_pgp = 0x3,cert_t_url = 0xFD,cert_t_oid = 0xFE,};
enum __ns_class {ns_c_invalid = 0x0,ns_c_in = 0x1,ns_c_2 = 0x2,ns_c_chaos = 0x3,ns_c_hs = 0x4,ns_c_none = 0xFE,ns_c_any = 0xFF,ns_c_max = 0x10000,};
enum __ns_flag {ns_f_qr = 0x0,ns_f_opcode = 0x1,ns_f_aa = 0x2,ns_f_tc = 0x3,ns_f_rd = 0x4,ns_f_ra = 0x5,ns_f_z = 0x6,ns_f_ad = 0x7,ns_f_cd = 0x8,ns_f_rcode = 0x9,ns_f_max = 0xA,};
enum __ns_key_types {ns_kt_rsa = 0x1,ns_kt_dh = 0x2,ns_kt_dsa = 0x3,ns_kt_private = 0xFE,};
struct __ns_msg {const u_char *_msg;const u_char *_eom;u_int16_t _id;u_int16_t _flags;u_int16_t _counts[4];const u_char *_sections[4];res_9_ns_sect _sect;int _rrnum;const u_char *_msg_ptr;};
enum __ns_opcode {ns_o_query = 0x0,ns_o_iquery = 0x1,ns_o_status = 0x2,ns_o_notify = 0x4,ns_o_update = 0x5,ns_o_max = 0x6,};
enum __ns_rcode {ns_r_noerror = 0x0,ns_r_formerr = 0x1,ns_r_servfail = 0x2,ns_r_nxdomain = 0x3,ns_r_notimpl = 0x4,ns_r_refused = 0x5,ns_r_yxdomain = 0x6,ns_r_yxrrset = 0x7,ns_r_nxrrset = 0x8,ns_r_notauth = 0x9,ns_r_notzone = 0xA,ns_r_max = 0xB,ns_r_badvers = 0x10,ns_r_badsig = 0x10,ns_r_badkey = 0x11,ns_r_badtime = 0x12,};
struct __ns_rr {char name[1025];u_int16_t type;u_int16_t rr_class;u_int32_t ttl;u_int16_t rdlength;const u_char *rdata;};
enum __ns_sect {ns_s_qd = 0x0,ns_s_zn = 0x0,ns_s_an = 0x1,ns_s_pr = 0x1,ns_s_ns = 0x2,ns_s_ud = 0x2,ns_s_ar = 0x3,ns_s_max = 0x4,};
enum __ns_type {ns_t_invalid = 0x0,ns_t_a = 0x1,ns_t_ns = 0x2,ns_t_md = 0x3,ns_t_mf = 0x4,ns_t_cname = 0x5,ns_t_soa = 0x6,ns_t_mb = 0x7,ns_t_mg = 0x8,ns_t_mr = 0x9,ns_t_null = 0xA,ns_t_wks = 0xB,ns_t_ptr = 0xC,ns_t_hinfo = 0xD,ns_t_minfo = 0xE,ns_t_mx = 0xF,ns_t_txt = 0x10,ns_t_rp = 0x11,ns_t_afsdb = 0x12,ns_t_x25 = 0x13,ns_t_isdn = 0x14,ns_t_rt = 0x15,ns_t_nsap = 0x16,ns_t_nsap_ptr = 0x17,ns_t_sig = 0x18,ns_t_key = 0x19,ns_t_px = 0x1A,ns_t_gpos = 0x1B,ns_t_aaaa = 0x1C,ns_t_loc = 0x1D,ns_t_nxt = 0x1E,ns_t_eid = 0x1F,ns_t_nimloc = 0x20,ns_t_srv = 0x21,ns_t_atma = 0x22,ns_t_naptr = 0x23,ns_t_kx = 0x24,ns_t_cert = 0x25,ns_t_a6 = 0x26,ns_t_dname = 0x27,ns_t_sink = 0x28,ns_t_opt = 0x29,ns_t_tkey = 0xF9,ns_t_tsig = 0xFA,ns_t_ixfr = 0xFB,ns_t_axfr = 0xFC,ns_t_mailb = 0xFD,ns_t_maila = 0xFE,ns_t_any = 0xFF,ns_t_zxfr = 0x100,ns_t_max = 0x10000,};
enum __ns_update_operation {ns_uop_delete = 0x0,ns_uop_add = 0x1,ns_uop_max = 0x2,};
struct __pkthdr;
struct __res_9_state {int retrans;int retry;u_long options;int nscount;struct sockaddr_in nsaddr_list[3];u_short id;char *dnsrch[7];char defdname[256];u_long pfcode;unsigned __int32 ndots : 4;unsigned __int32 nsort : 4;char unused[3];struct __res_9_state::$A41D3F045172AF5618492D381489FAF0 sort_list[10];res_send_qhook qhook;res_send_rhook rhook;int res_h_errno;int _vcsock;u_int _flags;u_int _pad;union __res_9_state::$C43196706AFD8D9F503704607DF2086B _u;};
struct __res_9_state::$A41D3F045172AF5618492D381489FAF0 {struct in_addr addr;u_int32_t mask;};
union __res_9_state::$C43196706AFD8D9F503704607DF2086B {char pad[40];struct __res_9_state::$C43196706AFD8D9F503704607DF2086B::$F5760817D575CBD8D5B39FC59A54FB95 _ext;};
struct __res_9_state::$C43196706AFD8D9F503704607DF2086B::$F5760817D575CBD8D5B39FC59A54FB95 {u_int16_t nscount;u_int16_t nstimes[3];int nssocks[3];struct __res_9_state_ext *ext;};
struct __res_9_state_ext;
struct __rpc_xdr {enum xdr_op x_op;const struct __rpc_xdr::xdr_ops *x_ops;char *x_public;void *x_private;char *x_base;unsigned int x_handy;};
struct __rpc_xdr::xdr_ops {int (__cdecl *x_getlong)(struct __rpc_xdr *, int *);int (__cdecl *x_putlong)(struct __rpc_xdr *, const int *);int (__cdecl *x_getbytes)(struct __rpc_xdr *, char *, unsigned int);int (__cdecl *x_putbytes)(struct __rpc_xdr *, const char *, unsigned int);unsigned int (__cdecl *x_getpostn)(struct __rpc_xdr *);int (__cdecl *x_setpostn)(struct __rpc_xdr *, unsigned int);int32_t *(__cdecl *x_inline)(struct __rpc_xdr *, unsigned int);void (__cdecl *x_destroy)(struct __rpc_xdr *);int (__cdecl *x_control)(struct __rpc_xdr *, int, void *);};
struct __rtentry;
struct __sFILE {unsigned __int8 *_p;int _r;int _w;__int16 _flags;__int16 _file;struct __sbuf _bf;int _lbfsize;void *_cookie;int (__cdecl *_close)(void *);int (__cdecl *_read)(void *, char *, int);fpos_t (__cdecl *_seek)(void *, fpos_t, int);int (__cdecl *_write)(void *, const char *, int);struct __sbuf _ub;struct __sFILEX *_extra;int _ur;unsigned __int8 _ubuf[3];unsigned __int8 _nbuf[1];struct __sbuf _lb;int _blksize;fpos_t _offset;};
struct __sFILEX;
struct __sbuf {unsigned __int8 *_base;int _size;};
struct __semid_ds_new {struct ipc_perm sem_perm;__int32_t sem_base;unsigned __int16 sem_nsems;time_t sem_otime;__int32_t sem_pad1;time_t sem_ctime;__int32_t sem_pad2;__int32_t sem_pad3[4];};
struct __shmid_ds_new {struct ipc_perm shm_perm;size_t shm_segsz;pid_t shm_lpid;pid_t shm_cpid;shmatt_t shm_nattch;time_t shm_atime;time_t shm_dtime;time_t shm_ctime;void *shm_internal;};
struct __sigaction {union __sigaction_u __sigaction_u;void (__cdecl *sa_tramp)(void *, int, int, siginfo_t *, void *);sigset_t sa_mask;int sa_flags;};
union __sigaction_u {void (__cdecl *__sa_handler)(int);void (__cdecl *__sa_sigaction)(int, struct __siginfo *, void *);};
struct __siginfo {int si_signo;int si_errno;int si_code;pid_t si_pid;uid_t si_uid;int si_status;void *si_addr;union sigval si_value;__int64 si_band;unsigned __int64 __pad[7];};
struct __socket;
struct __sockopt;
typedef unsigned __int16 __uint16_t;
typedef unsigned int __uint32_t;
typedef unsigned __int64 __uint64_t;
typedef unsigned __int8 __uint8_t;
struct _acl;
struct _acl_entry;
struct _acl_flagset;
struct _acl_permset;
struct _bkt {struct _bkt::$335ECEA3C7A0F876D51082F14580D87B hq;struct _bkt::$335ECEA3C7A0F876D51082F14580D87B q;void *page;pgno_t pgno;u_int8_t flags;};
struct _bkt::$335ECEA3C7A0F876D51082F14580D87B {struct _bkt *tqe_next;struct _bkt **tqe_prev;};
struct _computed_attr_context;
struct _copyfile_state;
struct _cr0 {unsigned __int32 pe : 1;unsigned __int32 mp : 1;unsigned __int32 em : 1;unsigned __int32 ts : 1;unsigned __int32 : 1;unsigned __int32 ne : 1;unsigned __int32 : 10;unsigned __int32 wp : 1;unsigned __int32 : 1;unsigned __int32 am : 1;unsigned __int32 : 10;unsigned __int32 nw : 1;unsigned __int32 cd : 1;unsigned __int32 pg : 1;};
struct _cups_array_s;
struct _cups_dir_s;
struct _cups_file_s;
struct _cups_raster_s;
typedef CURLcode (__cdecl *_curl_conv_callback1)(char *, size_t length);
typedef CURLcode (__cdecl *_curl_conv_callback2)(const char *, size_t length);
typedef CURLcode (__cdecl *_curl_conv_callback3)(void *, size_t length);
typedef CURLcode (__cdecl *_curl_conv_callback4)(const void *, size_t length);
typedef int __cdecl _curl_debug_callback1(CURL *, curl_infotype, char *, size_t, void *);
typedef int __cdecl _curl_debug_callback2(CURL *, curl_infotype, char *, size_t, const void *);
typedef int __cdecl _curl_debug_callback3(CURL *, curl_infotype, const char *, size_t, void *);
typedef int __cdecl _curl_debug_callback4(CURL *, curl_infotype, const char *, size_t, const void *);
typedef curlioerr __cdecl _curl_ioctl_callback1(CURL *, int, void *);
typedef curlioerr __cdecl _curl_ioctl_callback2(CURL *, int, const void *);
typedef curlioerr __cdecl _curl_ioctl_callback3(CURL *, curliocmd, void *);
typedef curlioerr __cdecl _curl_ioctl_callback4(CURL *, curliocmd, const void *);
typedef curl_socket_t __cdecl _curl_opensocket_callback1(void *, curlsocktype, struct curl_sockaddr *);
typedef curl_socket_t __cdecl _curl_opensocket_callback2(void *, curlsocktype, const struct curl_sockaddr *);
typedef curl_socket_t __cdecl _curl_opensocket_callback3(const void *, curlsocktype, struct curl_sockaddr *);
typedef curl_socket_t __cdecl _curl_opensocket_callback4(const void *, curlsocktype, const struct curl_sockaddr *);
typedef int __cdecl _curl_progress_callback1(void *, double, double, double, double);
typedef int __cdecl _curl_progress_callback2(const void *, double, double, double, double);
typedef size_t __cdecl _curl_read_callback1(char *, size_t, size_t, void *);
typedef size_t __cdecl _curl_read_callback2(char *, size_t, size_t, const void *);
typedef size_t __cdecl _curl_read_callback3(char *, size_t, size_t, FILE *);
typedef size_t __cdecl _curl_read_callback4(void *, size_t, size_t, void *);
typedef size_t __cdecl _curl_read_callback5(void *, size_t, size_t, const void *);
typedef size_t __cdecl _curl_read_callback6(void *, size_t, size_t, FILE *);
typedef CURLcode (__cdecl *_curl_seek_callback1)(void *, curl_off_t, int);
typedef CURLcode (__cdecl *_curl_seek_callback2)(const void *, curl_off_t, int);
typedef int __cdecl _curl_sockopt_callback1(void *, curl_socket_t, curlsocktype);
typedef int __cdecl _curl_sockopt_callback2(const void *, curl_socket_t, curlsocktype);
typedef CURLcode __cdecl _curl_ssl_ctx_callback1(CURL *, void *, void *);
typedef CURLcode __cdecl _curl_ssl_ctx_callback2(CURL *, void *, const void *);
typedef CURLcode __cdecl _curl_ssl_ctx_callback3(CURL *, const void *, void *);
typedef CURLcode __cdecl _curl_ssl_ctx_callback4(CURL *, const void *, const void *);
typedef _curl_ssl_ctx_callback1 _curl_ssl_ctx_callback5;
typedef _curl_ssl_ctx_callback1 _curl_ssl_ctx_callback6;
typedef _curl_ssl_ctx_callback1 _curl_ssl_ctx_callback7;
typedef _curl_ssl_ctx_callback1 _curl_ssl_ctx_callback8;
typedef size_t __cdecl _curl_write_callback1(const char *, size_t, size_t, void *);
typedef size_t __cdecl _curl_write_callback2(const char *, size_t, size_t, const void *);
typedef size_t __cdecl _curl_write_callback3(const char *, size_t, size_t, FILE *);
typedef size_t __cdecl _curl_write_callback4(const void *, size_t, size_t, void *);
typedef size_t __cdecl _curl_write_callback5(const void *, size_t, size_t, const void *);
typedef size_t __cdecl _curl_write_callback6(const void *, size_t, size_t, FILE *);
struct _dr6 {unsigned __int32 b0 : 1;unsigned __int32 b1 : 1;unsigned __int32 b2 : 1;unsigned __int32 b3 : 1;unsigned __int32 : 9;unsigned __int32 bd : 1;unsigned __int32 bs : 1;unsigned __int32 bt : 1;unsigned __int32 : 16;};
struct _ffi_type {size_t size;unsigned __int16 alignment;unsigned __int16 type;struct _ffi_type **elements;};
struct _filesec;
struct _ftsent {struct _ftsent *fts_cycle;struct _ftsent *fts_parent;struct _ftsent *fts_link;__int64 fts_number;void *fts_pointer;char *fts_accpath;char *fts_path;int fts_errno;int fts_symfd;unsigned __int16 fts_pathlen;unsigned __int16 fts_namelen;ino_t fts_ino;dev_t fts_dev;nlink_t fts_nlink;__int16 fts_level;unsigned __int16 fts_info;unsigned __int16 fts_flags;unsigned __int16 fts_instr;struct stat *fts_statp;char fts_name[1];};
struct _hist_entry {const char *line;histdata_t data;};
struct _htmlElemDesc {const char *name;char startTag;char endTag;char saveEndTag;char empty;char depr;char dtd;char isinline;const char *desc;const char **subelts;const char *defaultsubelt;const char **attrs_opt;const char **attrs_depr;const char **attrs_req;};
struct _htmlEntityDesc {unsigned int value;const char *name;const char *desc;};
union _http_addr_u {struct sockaddr addr;struct sockaddr_in ipv4;struct sockaddr_in6 ipv6;struct sockaddr_un un;char pad[256];};
struct _http_s;
struct _inpcb_list_entry {u_int32_t le_next;u_int32_t le_prev;};
struct _ipfw_dyn_rule {ipfw_dyn_rule *next;struct ip_fw *rule;ipfw_dyn_rule *parent;u_int64_t pcnt;u_int64_t bcnt;struct ipfw_flow_id id;u_int32_t expire;u_int32_t bucket;u_int32_t state;u_int32_t ack_fwd;u_int32_t ack_rev;u_int16_t dyn_type;u_int16_t count;};
struct _ipfw_insn {__int32 opcode : 8;u_int8_t len;u_int16_t arg1;};
struct _ipfw_insn_if {ipfw_insn o;union _ipfw_insn_if::$EC942E50B238476A039FC141726BDF36 p;char name[16];};
union _ipfw_insn_if::$EC942E50B238476A039FC141726BDF36 {struct in_addr ip;int32_t unit;};
struct _ipfw_insn_ip {ipfw_insn o;struct in_addr addr;struct in_addr mask;};
struct _ipfw_insn_limit {ipfw_insn o;u_int8_t _pad;u_int8_t limit_mask;u_int16_t conn_limit;};
struct _ipfw_insn_log {ipfw_insn o;u_int32_t max_log;u_int32_t log_left;};
struct _ipfw_insn_mac {ipfw_insn o;u_char addr[12];u_char mask[12];};
struct _ipfw_insn_pipe {ipfw_insn o;void *pipe_ptr;};
struct _ipfw_insn_sa {ipfw_insn o;struct sockaddr_in sa;};
struct _ipfw_insn_u16 {ipfw_insn o;u_int16_t ports[2];};
struct _ipfw_insn_u32 {ipfw_insn o;u_int32_t d[1];};
struct _keymap_entry {char type;Function *function;};
struct _krb5_address {krb5_magic magic;krb5_addrtype addrtype;unsigned int length;krb5_octet *contents;};
struct _krb5_ap_rep {krb5_magic magic;krb5_enc_data enc_part;};
struct _krb5_ap_rep_enc_part {krb5_magic magic;krb5_timestamp ctime;krb5_int32 cusec;krb5_keyblock *subkey;krb5_ui_4 seq_number;};
struct _krb5_ap_req {krb5_magic magic;krb5_flags ap_options;krb5_ticket *ticket;krb5_enc_data authenticator;};
struct _krb5_auth_context;
struct _krb5_authdata {krb5_magic magic;krb5_authdatatype ad_type;unsigned int length;krb5_octet *contents;};
struct _krb5_authenticator {krb5_magic magic;krb5_principal client;krb5_checksum *checksum;krb5_int32 cusec;krb5_timestamp ctime;krb5_keyblock *subkey;krb5_ui_4 seq_number;krb5_authdata **authorization_data;};
struct _krb5_cc_ops;
struct _krb5_ccache;
struct _krb5_cccol_cursor;
struct _krb5_checksum {krb5_magic magic;krb5_cksumtype checksum_type;unsigned int length;krb5_octet *contents;};
struct _krb5_context;
struct _krb5_cred {krb5_magic magic;krb5_ticket **tickets;krb5_enc_data enc_part;krb5_cred_enc_part *enc_part2;};
struct _krb5_cred_enc_part {krb5_magic magic;krb5_int32 nonce;krb5_timestamp timestamp;krb5_int32 usec;krb5_address *s_address;krb5_address *r_address;krb5_cred_info **ticket_info;};
struct _krb5_cred_info {krb5_magic magic;krb5_keyblock *session;krb5_principal client;krb5_principal server;krb5_flags flags;krb5_ticket_times times;krb5_address **caddrs;};
struct _krb5_creds {krb5_magic magic;krb5_principal client;krb5_principal server;krb5_keyblock keyblock;krb5_ticket_times times;krb5_boolean is_skey;krb5_flags ticket_flags;krb5_address **addresses;krb5_data ticket;krb5_data second_ticket;krb5_authdata **authdata;};
struct _krb5_cryptosystem_entry;
struct _krb5_data {krb5_magic magic;unsigned int length;char *data;};
struct _krb5_enc_data {krb5_magic magic;krb5_enctype enctype;krb5_kvno kvno;krb5_data ciphertext;};
struct _krb5_enc_kdc_rep_part {krb5_magic magic;krb5_msgtype msg_type;krb5_keyblock *session;krb5_last_req_entry **last_req;krb5_int32 nonce;krb5_timestamp key_exp;krb5_flags flags;krb5_ticket_times times;krb5_principal server;krb5_address **caddrs;};
struct _krb5_enc_tkt_part {krb5_magic magic;krb5_flags flags;krb5_keyblock *session;krb5_principal client;krb5_transited transited;krb5_ticket_times times;krb5_address **caddrs;krb5_authdata **authorization_data;};
struct _krb5_encrypt_block {krb5_magic magic;krb5_enctype crypto_entry;krb5_keyblock *key;};
struct _krb5_error {krb5_magic magic;krb5_timestamp ctime;krb5_int32 cusec;krb5_int32 susec;krb5_timestamp stime;krb5_ui_4 error;krb5_principal client;krb5_principal server;krb5_data text;krb5_data e_data;};
struct _krb5_get_init_creds_opt {krb5_flags flags;krb5_deltat tkt_life;krb5_deltat renew_life;int forwardable;int proxiable;krb5_enctype *etype_list;int etype_list_length;krb5_address **address_list;krb5_preauthtype *preauth_list;int preauth_list_length;krb5_data *salt;};
struct _krb5_gic_opt_pa_data {char *attr;char *value;};
struct _krb5_kdc_rep {krb5_magic magic;krb5_msgtype msg_type;krb5_pa_data **padata;krb5_principal client;krb5_ticket *ticket;krb5_enc_data enc_part;krb5_enc_kdc_rep_part *enc_part2;};
struct _krb5_kdc_req {krb5_magic magic;krb5_msgtype msg_type;krb5_pa_data **padata;krb5_flags kdc_options;krb5_principal client;krb5_principal server;krb5_timestamp from;krb5_timestamp till;krb5_timestamp rtime;krb5_int32 nonce;int nktypes;krb5_enctype *ktype;krb5_address **addresses;krb5_enc_data authorization_data;krb5_authdata **unenc_authdata;krb5_ticket **second_ticket;};
struct _krb5_keyblock {krb5_magic magic;krb5_enctype enctype;unsigned int length;krb5_octet *contents;};
struct _krb5_kt;
struct _krb5_last_req_entry {krb5_magic magic;krb5_int32 lr_type;krb5_timestamp value;};
struct _krb5_octet_data {krb5_magic magic;unsigned int length;krb5_octet *data;};
struct _krb5_pa_data {krb5_magic magic;krb5_preauthtype pa_type;unsigned int length;krb5_octet *contents;};
struct _krb5_prompt {char *prompt;int hidden;krb5_data *reply;};
struct _krb5_pwd_data {krb5_magic magic;int sequence_count;passwd_phrase_element **element;};
struct _krb5_response {krb5_magic magic;krb5_octet message_type;krb5_data response;krb5_int32 expected_nonce;krb5_timestamp request_time;};
struct _krb5_ticket {krb5_magic magic;krb5_principal server;krb5_enc_data enc_part;krb5_enc_tkt_part *enc_part2;};
struct _krb5_ticket_times {krb5_timestamp authtime;krb5_timestamp starttime;krb5_timestamp endtime;krb5_timestamp renew_till;};
struct _krb5_tkt_authent {krb5_magic magic;krb5_ticket *ticket;krb5_authenticator *authenticator;krb5_flags ap_options;};
struct _krb5_transited {krb5_magic magic;krb5_octet tr_type;krb5_data tr_contents;};
struct _krb5_verify_init_creds_opt {krb5_flags flags;int ap_req_nofail;};
struct _malloc_zone_t {void *reserved1;void *reserved2;size_t (__cdecl *size)(struct _malloc_zone_t *zone, const void *ptr);void *(__cdecl *malloc)(struct _malloc_zone_t *zone, size_t size);void *(__cdecl *calloc)(struct _malloc_zone_t *zone, size_t num_items, size_t size);void *(__cdecl *valloc)(struct _malloc_zone_t *zone, size_t size);void (__cdecl *free)(struct _malloc_zone_t *zone, void *ptr);void *(__cdecl *realloc)(struct _malloc_zone_t *zone, void *ptr, size_t size);void (__cdecl *destroy)(struct _malloc_zone_t *zone);const char *zone_name;unsigned int (__cdecl *batch_malloc)(struct _malloc_zone_t *zone, size_t size, void **results, unsigned int num_requested);void (__cdecl *batch_free)(struct _malloc_zone_t *zone, void **to_be_freed, unsigned int num_to_be_freed);struct malloc_introspection_t *introspect;unsigned int version;void *(__cdecl *memalign)(struct _malloc_zone_t *zone, size_t alignment, size_t size);void (__cdecl *free_definite_size)(struct _malloc_zone_t *zone, void *ptr, size_t size);size_t (__cdecl *pressure_relief)(struct _malloc_zone_t *zone, size_t goal);};
struct _mime_filter_s {mime_type_t *src;mime_type_t *dst;int cost;char filter[256];size_t maxsize;};
struct _mime_magic_s {struct _mime_magic_s *prev;struct _mime_magic_s *next;struct _mime_magic_s *parent;struct _mime_magic_s *child;__int16 op;__int16 invert;int offset;int region;int length;union _mime_magic_s::$44C44110DFFEF8B71A54B915355ECCBB value;};
union _mime_magic_s::$44C44110DFFEF8B71A54B915355ECCBB {char matchv[64];char localev[64];char stringv[64];unsigned __int8 charv;unsigned __int16 shortv;unsigned int intv;};
struct _mime_s {cups_array_t *types;cups_array_t *filters;cups_array_t *srcs;mime_error_cb_t error_cb;void *error_ctx;};
struct _mime_type_s {mime_magic_t *rules;int priority;char super[16];char type[256];};
struct _node {char *key;void *data;struct _node *next;};
struct _opaque_pthread_attr_t {__int64 __sig;char __opaque[56];};
struct _opaque_pthread_cond_t {__int64 __sig;char __opaque[40];};
struct _opaque_pthread_condattr_t {__int64 __sig;char __opaque[8];};
struct _opaque_pthread_mutex_t {__int64 __sig;char __opaque[56];};
struct _opaque_pthread_mutexattr_t {__int64 __sig;char __opaque[8];};
struct _opaque_pthread_once_t {__int64 __sig;char __opaque[8];};
struct _opaque_pthread_rwlock_t {__int64 __sig;char __opaque[192];};
struct _opaque_pthread_rwlockattr_t {__int64 __sig;char __opaque[16];};
struct _opaque_pthread_t {__int64 __sig;struct __darwin_pthread_handler_rec *__cleanup_stack;char __opaque[1168];};
typedef unsigned __int8 _ossl_old_des_cblock[8];
typedef struct _ossl_old_des_ks_struct _ossl_old_des_key_schedule[16];
struct _ossl_old_des_ks_struct {union _ossl_old_des_ks_struct::$EA044D063B047D6148CE114A0782A100 ks;};
union _ossl_old_des_ks_struct::$EA044D063B047D6148CE114A0782A100 {_ossl_old_des_cblock _;unsigned int pad[2];};
struct _passwd_phrase_element {krb5_magic magic;krb5_data *passwd;krb5_data *phrase;};
struct _pcred {char pc_lock[72];struct ucred *pc_ucred;uid_t p_ruid;uid_t p_svuid;gid_t p_rgid;gid_t p_svgid;int p_refcnt;};
struct _pitem {unsigned __int64 priority;void *data;struct _pitem *next;};
struct _ppd_cache_s;
typedef struct _ppd_cache_s _ppd_cache_t;
struct _profile_t;
struct _res_9_ns_flagdata {int mask;int shift;};
struct _stringlist {char **sl_str;size_t sl_max;size_t sl_cur;};
struct _telldir;
struct _ucred {int32_t cr_ref;uid_t cr_uid;__int16 cr_ngroups;gid_t cr_groups[16];};
struct _unpcb_list_entry {u_int32_t le_next;u_int32_t le_prev;};
struct _win_st;
struct _xlinkHandler {xlinkSimpleLinkFunk simple;xlinkExtendedLinkFunk extended;xlinkExtendedLinkSetFunk set;};
struct _xlocale;
struct _xmlAttr {void *_private;xmlElementType type;const xmlChar *name;struct _xmlNode *children;struct _xmlNode *last;struct _xmlNode *parent;struct _xmlAttr *next;struct _xmlAttr *prev;struct _xmlDoc *doc;xmlNs *ns;xmlAttributeType atype;void *psvi;};
struct _xmlAttribute {void *_private;xmlElementType type;const xmlChar *name;struct _xmlNode *children;struct _xmlNode *last;struct _xmlDtd *parent;struct _xmlNode *next;struct _xmlNode *prev;struct _xmlDoc *doc;struct _xmlAttribute *nexth;xmlAttributeType atype;xmlAttributeDefault def;const xmlChar *defaultValue;xmlEnumerationPtr tree;const xmlChar *prefix;const xmlChar *elem;};
struct _xmlAutomata;
struct _xmlAutomataState;
struct _xmlBuffer {xmlChar *content;unsigned int use;unsigned int size;xmlBufferAllocationScheme alloc;xmlChar *contentIO;};
struct _xmlCatalog;
struct _xmlChLRange {unsigned int low;unsigned int high;};
struct _xmlChRangeGroup {int nbShortRange;int nbLongRange;const xmlChSRange *shortRange;const xmlChLRange *longRange;};
struct _xmlChSRange {unsigned __int16 low;unsigned __int16 high;};
struct _xmlCharEncodingHandler {char *name;xmlCharEncodingInputFunc input;xmlCharEncodingOutputFunc output;UConverter *utf8Converter;UConverter *encodingConverter;UChar *pivotBuffer;UChar *pivotSource;UChar *pivotTarget;int pivotLength;};
struct _xmlDOMWrapCtxt {void *_private;int type;void *namespaceMap;xmlDOMWrapAcquireNsFunction getNsForNodeFunc;};
struct _xmlDict;
struct _xmlDoc {void *_private;xmlElementType type;char *name;struct _xmlNode *children;struct _xmlNode *last;struct _xmlNode *parent;struct _xmlNode *next;struct _xmlNode *prev;struct _xmlDoc *doc;int compression;int standalone;struct _xmlDtd *intSubset;struct _xmlDtd *extSubset;struct _xmlNs *oldNs;const xmlChar *version;const xmlChar *encoding;void *ids;void *refs;const xmlChar *URL;int charset;struct _xmlDict *dict;void *psvi;int parseFlags;int properties;};
struct _xmlDtd {void *_private;xmlElementType type;const xmlChar *name;struct _xmlNode *children;struct _xmlNode *last;struct _xmlDoc *parent;struct _xmlNode *next;struct _xmlNode *prev;struct _xmlDoc *doc;void *notations;void *elements;void *attributes;void *entities;const xmlChar *ExternalID;const xmlChar *SystemID;void *pentities;};
struct _xmlElement {void *_private;xmlElementType type;const xmlChar *name;struct _xmlNode *children;struct _xmlNode *last;struct _xmlDtd *parent;struct _xmlNode *next;struct _xmlNode *prev;struct _xmlDoc *doc;xmlElementTypeVal etype;xmlElementContentPtr content;xmlAttributePtr attributes;const xmlChar *prefix;xmlRegexpPtr contModel;};
struct _xmlElementContent {xmlElementContentType type;xmlElementContentOccur ocur;const xmlChar *name;struct _xmlElementContent *c1;struct _xmlElementContent *c2;struct _xmlElementContent *parent;const xmlChar *prefix;};
struct _xmlEntity {void *_private;xmlElementType type;const xmlChar *name;struct _xmlNode *children;struct _xmlNode *last;struct _xmlDtd *parent;struct _xmlNode *next;struct _xmlNode *prev;struct _xmlDoc *doc;xmlChar *orig;xmlChar *content;int length;xmlEntityType etype;const xmlChar *ExternalID;const xmlChar *SystemID;struct _xmlEntity *nexte;const xmlChar *URI;int owner;int checked;};
struct _xmlEnumeration {struct _xmlEnumeration *next;const xmlChar *name;};
struct _xmlError {int domain;int code;char *message;xmlErrorLevel level;char *file;int line;char *str1;char *str2;char *str3;int int1;int int2;void *ctxt;void *node;};
struct _xmlExpCtxt;
struct _xmlExpNode;
struct _xmlGlobalState {const char *xmlParserVersion;xmlSAXLocator xmlDefaultSAXLocator;xmlSAXHandlerV1 xmlDefaultSAXHandler;xmlSAXHandlerV1 docbDefaultSAXHandler;xmlSAXHandlerV1 htmlDefaultSAXHandler;xmlFreeFunc xmlFree;xmlMallocFunc xmlMalloc;xmlStrdupFunc xmlMemStrdup;xmlReallocFunc xmlRealloc;xmlGenericErrorFunc xmlGenericError;xmlStructuredErrorFunc xmlStructuredError;void *xmlGenericErrorContext;int oldXMLWDcompatibility;xmlBufferAllocationScheme xmlBufferAllocScheme;int xmlDefaultBufferSize;int xmlSubstituteEntitiesDefaultValue;int xmlDoValidityCheckingDefaultValue;int xmlGetWarningsDefaultValue;int xmlKeepBlanksDefaultValue;int xmlLineNumbersDefaultValue;int xmlLoadExtDtdDefaultValue;int xmlParserDebugEntities;int xmlPedanticParserDefaultValue;int xmlSaveNoEmptyTags;int xmlIndentTreeOutput;const char *xmlTreeIndentString;xmlRegisterNodeFunc xmlRegisterNodeDefaultValue;xmlDeregisterNodeFunc xmlDeregisterNodeDefaultValue;xmlMallocFunc xmlMallocAtomic;xmlError xmlLastError;xmlParserInputBufferCreateFilenameFunc xmlParserInputBufferCreateFilenameValue;xmlOutputBufferCreateFilenameFunc xmlOutputBufferCreateFilenameValue;};
struct _xmlHashTable;
struct _xmlID {struct _xmlID *next;const xmlChar *value;xmlAttrPtr attr;const xmlChar *name;int lineno;struct _xmlDoc *doc;};
struct _xmlLink;
struct _xmlList;
struct _xmlLocationSet {int locNr;int locMax;xmlXPathObjectPtr *locTab;};
struct _xmlModule;
struct _xmlMutex;
struct _xmlNode {void *_private;xmlElementType type;const xmlChar *name;struct _xmlNode *children;struct _xmlNode *last;struct _xmlNode *parent;struct _xmlNode *next;struct _xmlNode *prev;struct _xmlDoc *doc;xmlNs *ns;xmlChar *content;struct _xmlAttr *properties;xmlNs *nsDef;void *psvi;unsigned __int16 line;unsigned __int16 extra;};
struct _xmlNodeSet {int nodeNr;int nodeMax;xmlNodePtr *nodeTab;};
struct _xmlNotation {const xmlChar *name;const xmlChar *PublicID;const xmlChar *SystemID;};
struct _xmlNs {struct _xmlNs *next;xmlNsType type;const xmlChar *href;const xmlChar *prefix;void *_private;struct _xmlDoc *context;};
struct _xmlOutputBuffer {void *context;xmlOutputWriteCallback writecallback;xmlOutputCloseCallback closecallback;xmlCharEncodingHandlerPtr encoder;xmlBufferPtr buffer;xmlBufferPtr conv;int written;int error;};
struct _xmlParserCtxt {struct _xmlSAXHandler *sax;void *userData;xmlDocPtr myDoc;int wellFormed;int replaceEntities;const xmlChar *version;const xmlChar *encoding;int standalone;int html;xmlParserInputPtr input;int inputNr;int inputMax;xmlParserInputPtr *inputTab;xmlNodePtr node;int nodeNr;int nodeMax;xmlNodePtr *nodeTab;int record_info;xmlParserNodeInfoSeq node_seq;int errNo;int hasExternalSubset;int hasPErefs;int external;int valid;int validate;xmlValidCtxt vctxt;xmlParserInputState instate;int token;char *directory;const xmlChar *name;int nameNr;int nameMax;const xmlChar **nameTab;__int64 nbChars;__int64 checkIndex;int keepBlanks;int disableSAX;int inSubset;const xmlChar *intSubName;xmlChar *extSubURI;xmlChar *extSubSystem;int *space;int spaceNr;int spaceMax;int *spaceTab;int depth;xmlParserInputPtr entity;int charset;int nodelen;int nodemem;int pedantic;void *_private;int loadsubset;int linenumbers;void *catalogs;int recovery;int progressive;xmlDictPtr dict;const xmlChar **atts;int maxatts;int docdict;const xmlChar *str_xml;const xmlChar *str_xmlns;const xmlChar *str_xml_ns;int sax2;int nsNr;int nsMax;const xmlChar **nsTab;int *attallocs;void **pushTab;xmlHashTablePtr attsDefault;xmlHashTablePtr attsSpecial;int nsWellFormed;int options;int dictNames;int freeElemsNr;xmlNodePtr freeElems;int freeAttrsNr;xmlAttrPtr freeAttrs;xmlError lastError;xmlParserMode parseMode;unsigned __int64 nbentities;unsigned __int64 sizeentities;};
struct _xmlParserInput {xmlParserInputBufferPtr buf;const char *filename;const char *directory;const xmlChar *base;const xmlChar *cur;const xmlChar *end;int length;int line;int col;unsigned __int64 consumed;xmlParserInputDeallocate free;const xmlChar *encoding;const xmlChar *version;int standalone;int id;};
struct _xmlParserInputBuffer {void *context;xmlInputReadCallback readcallback;xmlInputCloseCallback closecallback;xmlCharEncodingHandlerPtr encoder;xmlBufferPtr buffer;xmlBufferPtr raw;int compressed;int error;unsigned __int64 rawconsumed;};
struct _xmlParserNodeInfo {const struct _xmlNode *node;unsigned __int64 begin_pos;unsigned __int64 begin_line;unsigned __int64 end_pos;unsigned __int64 end_line;};
struct _xmlParserNodeInfoSeq {unsigned __int64 maximum;unsigned __int64 length;xmlParserNodeInfo *buffer;};
struct _xmlPattern;
struct _xmlRMutex;
struct _xmlRef {struct _xmlRef *next;const xmlChar *value;xmlAttrPtr attr;const xmlChar *name;int lineno;};
struct _xmlRegExecCtxt;
struct _xmlRegexp;
struct _xmlRelaxNG;
struct _xmlRelaxNGParserCtxt;
struct _xmlRelaxNGValidCtxt;
struct _xmlSAXHandler {internalSubsetSAXFunc internalSubset;isStandaloneSAXFunc isStandalone;hasInternalSubsetSAXFunc hasInternalSubset;hasExternalSubsetSAXFunc hasExternalSubset;resolveEntitySAXFunc resolveEntity;getEntitySAXFunc getEntity;entityDeclSAXFunc entityDecl;notationDeclSAXFunc notationDecl;attributeDeclSAXFunc attributeDecl;elementDeclSAXFunc elementDecl;unparsedEntityDeclSAXFunc unparsedEntityDecl;setDocumentLocatorSAXFunc setDocumentLocator;startDocumentSAXFunc startDocument;endDocumentSAXFunc endDocument;startElementSAXFunc startElement;endElementSAXFunc endElement;referenceSAXFunc reference;charactersSAXFunc characters;ignorableWhitespaceSAXFunc ignorableWhitespace;processingInstructionSAXFunc processingInstruction;commentSAXFunc comment;warningSAXFunc warning;errorSAXFunc error;fatalErrorSAXFunc fatalError;getParameterEntitySAXFunc getParameterEntity;cdataBlockSAXFunc cdataBlock;externalSubsetSAXFunc externalSubset;unsigned int initialized;void *_private;startElementNsSAX2Func startElementNs;endElementNsSAX2Func endElementNs;xmlStructuredErrorFunc serror;};
struct _xmlSAXHandlerV1 {internalSubsetSAXFunc internalSubset;isStandaloneSAXFunc isStandalone;hasInternalSubsetSAXFunc hasInternalSubset;hasExternalSubsetSAXFunc hasExternalSubset;resolveEntitySAXFunc resolveEntity;getEntitySAXFunc getEntity;entityDeclSAXFunc entityDecl;notationDeclSAXFunc notationDecl;attributeDeclSAXFunc attributeDecl;elementDeclSAXFunc elementDecl;unparsedEntityDeclSAXFunc unparsedEntityDecl;setDocumentLocatorSAXFunc setDocumentLocator;startDocumentSAXFunc startDocument;endDocumentSAXFunc endDocument;startElementSAXFunc startElement;endElementSAXFunc endElement;referenceSAXFunc reference;charactersSAXFunc characters;ignorableWhitespaceSAXFunc ignorableWhitespace;processingInstructionSAXFunc processingInstruction;commentSAXFunc comment;warningSAXFunc warning;errorSAXFunc error;fatalErrorSAXFunc fatalError;getParameterEntitySAXFunc getParameterEntity;cdataBlockSAXFunc cdataBlock;externalSubsetSAXFunc externalSubset;unsigned int initialized;};
struct _xmlSAXLocator {const xmlChar *(__cdecl *getPublicId)(void *ctx);const xmlChar *(__cdecl *getSystemId)(void *ctx);int (__cdecl *getLineNumber)(void *ctx);int (__cdecl *getColumnNumber)(void *ctx);};
struct _xmlSaveCtxt;
struct _xmlSchema {const xmlChar *name;const xmlChar *targetNamespace;const xmlChar *version;const xmlChar *id;xmlDocPtr doc;xmlSchemaAnnotPtr annot;int flags;xmlHashTablePtr typeDecl;xmlHashTablePtr attrDecl;xmlHashTablePtr attrgrpDecl;xmlHashTablePtr elemDecl;xmlHashTablePtr notaDecl;xmlHashTablePtr schemasImports;void *_private;xmlHashTablePtr groupDecl;xmlDictPtr dict;void *includes;int preserve;int counter;xmlHashTablePtr idcDef;void *volatiles;};
struct _xmlSchemaAnnot {struct _xmlSchemaAnnot *next;xmlNodePtr content;};
struct _xmlSchemaAttribute {xmlSchemaTypeType type;struct _xmlSchemaAttribute *next;const xmlChar *name;const xmlChar *id;const xmlChar *ref;const xmlChar *refNs;const xmlChar *typeName;const xmlChar *typeNs;xmlSchemaAnnotPtr annot;xmlSchemaTypePtr base;int occurs;const xmlChar *defValue;xmlSchemaTypePtr subtypes;xmlNodePtr node;const xmlChar *targetNamespace;int flags;const xmlChar *refPrefix;xmlSchemaValPtr defVal;xmlSchemaAttributePtr refDecl;};
struct _xmlSchemaAttributeGroup {xmlSchemaTypeType type;struct _xmlSchemaAttribute *next;const xmlChar *name;const xmlChar *id;const xmlChar *ref;const xmlChar *refNs;xmlSchemaAnnotPtr annot;xmlSchemaAttributePtr attributes;xmlNodePtr node;int flags;xmlSchemaWildcardPtr attributeWildcard;const xmlChar *refPrefix;xmlSchemaAttributeGroupPtr refItem;const xmlChar *targetNamespace;void *attrUses;};
struct _xmlSchemaAttributeLink {struct _xmlSchemaAttributeLink *next;struct _xmlSchemaAttribute *attr;};
struct _xmlSchemaElement {xmlSchemaTypeType type;struct _xmlSchemaType *next;const xmlChar *name;const xmlChar *id;const xmlChar *ref;const xmlChar *refNs;xmlSchemaAnnotPtr annot;xmlSchemaTypePtr subtypes;xmlSchemaAttributePtr attributes;xmlNodePtr node;int minOccurs;int maxOccurs;int flags;const xmlChar *targetNamespace;const xmlChar *namedType;const xmlChar *namedTypeNs;const xmlChar *substGroup;const xmlChar *substGroupNs;const xmlChar *scope;const xmlChar *value;struct _xmlSchemaElement *refDecl;xmlRegexpPtr contModel;xmlSchemaContentType contentType;const xmlChar *refPrefix;xmlSchemaValPtr defVal;void *idcs;};
struct _xmlSchemaFacet {xmlSchemaTypeType type;struct _xmlSchemaFacet *next;const xmlChar *value;const xmlChar *id;xmlSchemaAnnotPtr annot;xmlNodePtr node;int fixed;int whitespace;xmlSchemaValPtr val;xmlRegexpPtr regexp;};
struct _xmlSchemaFacetLink {struct _xmlSchemaFacetLink *next;xmlSchemaFacetPtr facet;};
struct _xmlSchemaNotation {xmlSchemaTypeType type;const xmlChar *name;xmlSchemaAnnotPtr annot;const xmlChar *identifier;const xmlChar *targetNamespace;};
struct _xmlSchemaParserCtxt;
struct _xmlSchemaSAXPlug;
struct _xmlSchemaType {xmlSchemaTypeType type;struct _xmlSchemaType *next;const xmlChar *name;const xmlChar *id;const xmlChar *ref;const xmlChar *refNs;xmlSchemaAnnotPtr annot;xmlSchemaTypePtr subtypes;xmlSchemaAttributePtr attributes;xmlNodePtr node;int minOccurs;int maxOccurs;int flags;xmlSchemaContentType contentType;const xmlChar *base;const xmlChar *baseNs;xmlSchemaTypePtr baseType;xmlSchemaFacetPtr facets;struct _xmlSchemaType *redef;int recurse;xmlSchemaAttributeLinkPtr *attributeUses;xmlSchemaWildcardPtr attributeWildcard;int builtInType;xmlSchemaTypeLinkPtr memberTypes;xmlSchemaFacetLinkPtr facetSet;const xmlChar *refPrefix;xmlSchemaTypePtr contentTypeDef;xmlRegexpPtr contModel;const xmlChar *targetNamespace;void *attrUses;};
struct _xmlSchemaTypeLink {struct _xmlSchemaTypeLink *next;xmlSchemaTypePtr type;};
struct _xmlSchemaVal;
struct _xmlSchemaValidCtxt;
struct _xmlSchemaWildcard {xmlSchemaTypeType type;const xmlChar *id;xmlSchemaAnnotPtr annot;xmlNodePtr node;int minOccurs;int maxOccurs;int processContents;int any;xmlSchemaWildcardNsPtr nsSet;xmlSchemaWildcardNsPtr negNsSet;int flags;};
struct _xmlSchemaWildcardNs {struct _xmlSchemaWildcardNs *next;const xmlChar *value;};
struct _xmlSchematron;
struct _xmlSchematronParserCtxt;
struct _xmlSchematronValidCtxt;
struct _xmlShellCtxt {char *filename;xmlDocPtr doc;xmlNodePtr node;xmlXPathContextPtr pctxt;int loaded;FILE *output;xmlShellReadlineFunc input;};
struct _xmlStreamCtxt;
struct _xmlTextReader;
struct _xmlTextWriter;
struct _xmlURI {char *scheme;char *opaque;char *authority;char *server;char *user;int port;char *path;char *query;char *fragment;int cleanup;char *query_raw;};
struct _xmlValidCtxt {void *userData;xmlValidityErrorFunc error;xmlValidityWarningFunc warning;xmlNodePtr node;int nodeNr;int nodeMax;xmlNodePtr *nodeTab;unsigned int finishDtd;xmlDocPtr doc;int valid;xmlValidState *vstate;int vstateNr;int vstateMax;xmlValidState *vstateTab;xmlAutomataPtr am;xmlAutomataStatePtr state;};
struct _xmlValidState;
struct _xmlXIncludeCtxt;
struct _xmlXPathAxis {const xmlChar *name;xmlXPathAxisFunc func;};
struct _xmlXPathCompExpr;
struct _xmlXPathContext {xmlDocPtr doc;xmlNodePtr node;int nb_variables_unused;int max_variables_unused;xmlHashTablePtr varHash;int nb_types;int max_types;xmlXPathTypePtr types;int nb_funcs_unused;int max_funcs_unused;xmlHashTablePtr funcHash;int nb_axis;int max_axis;xmlXPathAxisPtr axis;xmlNsPtr *namespaces;int nsNr;void *user;int contextSize;int proximityPosition;int xptr;xmlNodePtr here;xmlNodePtr origin;xmlHashTablePtr nsHash;xmlXPathVariableLookupFunc varLookupFunc;void *varLookupData;void *extra;const xmlChar *function;const xmlChar *functionURI;xmlXPathFuncLookupFunc funcLookupFunc;void *funcLookupData;xmlNsPtr *tmpNsList;int tmpNsNr;void *userData;xmlStructuredErrorFunc error;xmlError lastError;xmlNodePtr debugNode;xmlDictPtr dict;int flags;void *cache;};
struct _xmlXPathFunct {const xmlChar *name;xmlXPathEvalFunc func;};
struct _xmlXPathObject {xmlXPathObjectType type;xmlNodeSetPtr nodesetval;int boolval;double floatval;xmlChar *stringval;void *user;int index;void *user2;int index2;};
struct _xmlXPathParserContext {const xmlChar *cur;const xmlChar *base;int error;xmlXPathContextPtr context;xmlXPathObjectPtr value;int valueNr;int valueMax;xmlXPathObjectPtr *valueTab;xmlXPathCompExprPtr comp;int xptr;xmlNodePtr ancestor;};
struct _xmlXPathType {const xmlChar *name;xmlXPathConvertFunc func;};
struct _xmlXPathVariable {const xmlChar *name;xmlXPathObjectPtr value;};
struct _xsltCompMatch;
struct _xsltDecimalFormat {struct _xsltDecimalFormat *next;xmlChar *name;xmlChar *digit;xmlChar *patternSeparator;xmlChar *minusSign;xmlChar *infinity;xmlChar *noNumber;xmlChar *decimalPoint;xmlChar *grouping;xmlChar *percent;xmlChar *permille;xmlChar *zeroDigit;};
struct _xsltDocument {struct _xsltDocument *next;int main;xmlDocPtr doc;void *keys;struct _xsltDocument *includes;int preproc;int nbKeysComputed;};
struct _xsltElemPreComp {xsltElemPreCompPtr next;xsltStyleType type;xsltTransformFunction func;xmlNodePtr inst;xsltElemPreCompDeallocator free;};
struct _xsltFormatNumberInfo {int integer_hash;int integer_digits;int frac_digits;int frac_hash;int group;int multiplier;char add_decimal;char is_multiplier_set;char is_negative_pattern;};
struct _xsltKeyDef {struct _xsltKeyDef *next;xmlNodePtr inst;xmlChar *name;xmlChar *nameURI;xmlChar *match;xmlChar *use;xmlXPathCompExprPtr comp;xmlXPathCompExprPtr usecomp;xmlNsPtr *nsList;int nsNr;};
struct _xsltKeyTable {struct _xsltKeyTable *next;xmlChar *name;xmlChar *nameURI;xmlHashTablePtr keys;};
struct _xsltNumberData {const xmlChar *level;const xmlChar *count;const xmlChar *from;const xmlChar *value;const xmlChar *format;int has_format;int digitsPerGroup;int groupingCharacter;int groupingCharacterLen;xmlDocPtr doc;xmlNodePtr node;};
struct _xsltRuntimeExtra {void *info;xmlFreeFunc deallocate;union _xsltRuntimeExtra::$2329BC7224F5366634B0083FE3D0502D val;};
union _xsltRuntimeExtra::$2329BC7224F5366634B0083FE3D0502D {void *ptr;int ival;};
struct _xsltSecurityPrefs;
struct _xsltStackElem {struct _xsltStackElem *next;xsltStylePreCompPtr comp;int computed;const xmlChar *name;const xmlChar *nameURI;const xmlChar *select;xmlNodePtr tree;xmlXPathObjectPtr value;xmlDocPtr fragment;int level;xsltTransformContextPtr context;int flags;};
struct _xsltStylePreComp {xsltElemPreCompPtr next;xsltStyleType type;xsltTransformFunction func;xmlNodePtr inst;const xmlChar *stype;int has_stype;int number;const xmlChar *order;int has_order;int descending;const xmlChar *lang;int has_lang;const xmlChar *case_order;int lower_first;const xmlChar *use;int has_use;int noescape;const xmlChar *name;int has_name;const xmlChar *ns;int has_ns;const xmlChar *mode;const xmlChar *modeURI;const xmlChar *test;xsltTemplatePtr templ;const xmlChar *select;int ver11;const xmlChar *filename;int has_filename;xsltNumberData numdata;xmlXPathCompExprPtr comp;xmlNsPtr *nsList;int nsNr;};
struct _xsltStylesheet {struct _xsltStylesheet *parent;struct _xsltStylesheet *next;struct _xsltStylesheet *imports;xsltDocumentPtr docList;xmlDocPtr doc;xmlHashTablePtr stripSpaces;int stripAll;xmlHashTablePtr cdataSection;xsltStackElemPtr variables;xsltTemplatePtr templates;void *templatesHash;void *rootMatch;void *keyMatch;void *elemMatch;void *attrMatch;void *parentMatch;void *textMatch;void *piMatch;void *commentMatch;xmlHashTablePtr nsAliases;xmlHashTablePtr attributeSets;xmlHashTablePtr nsHash;void *nsDefs;void *keys;xmlChar *method;xmlChar *methodURI;xmlChar *version;xmlChar *encoding;int omitXmlDeclaration;xsltDecimalFormatPtr decimalFormat;int standalone;xmlChar *doctypePublic;xmlChar *doctypeSystem;int indent;xmlChar *mediaType;xsltElemPreCompPtr preComps;int warnings;int errors;xmlChar *exclPrefix;xmlChar **exclPrefixTab;int exclPrefixNr;int exclPrefixMax;void *_private;xmlHashTablePtr extInfos;int extrasNr;xsltDocumentPtr includes;xmlDictPtr dict;void *attVTs;const xmlChar *defaultAlias;int nopreproc;int internalized;int literal_result;xsltStylesheetPtr principal;};
struct _xsltTemplate {struct _xsltTemplate *next;struct _xsltStylesheet *style;xmlChar *match;float priority;const xmlChar *name;const xmlChar *nameURI;const xmlChar *mode;const xmlChar *modeURI;xmlNodePtr content;xmlNodePtr elem;int inheritedNsNr;xmlNsPtr *inheritedNs;int nbCalls;unsigned __int64 time;void *params;};
struct _xsltTransformCache {xmlDocPtr RVT;int nbRVT;xsltStackElemPtr stackItems;int nbStackItems;};
struct _xsltTransformContext {xsltStylesheetPtr style;xsltOutputType type;xsltTemplatePtr templ;int templNr;int templMax;xsltTemplatePtr *templTab;xsltStackElemPtr vars;int varsNr;int varsMax;xsltStackElemPtr *varsTab;int varsBase;xmlHashTablePtr extFunctions;xmlHashTablePtr extElements;xmlHashTablePtr extInfos;const xmlChar *mode;const xmlChar *modeURI;xsltDocumentPtr docList;xsltDocumentPtr document;xmlNodePtr node;xmlNodeSetPtr nodeList;xmlDocPtr output;xmlNodePtr insert;xmlXPathContextPtr xpathCtxt;xsltTransformState state;xmlHashTablePtr globalVars;xmlNodePtr inst;int xinclude;const char *outputFile;int profile;__int64 prof;int profNr;int profMax;__int64 *profTab;void *_private;int extrasNr;int extrasMax;xsltRuntimeExtraPtr extras;xsltDocumentPtr styleList;void *sec;xmlGenericErrorFunc error;void *errctx;xsltSortFunc sortfunc;xmlDocPtr tmpRVT;xmlDocPtr persistRVT;int ctxtflags;const xmlChar *lasttext;unsigned int lasttsize;unsigned int lasttuse;int debugStatus;unsigned __int64 *traceCode;int parserOptions;xmlDictPtr dict;xmlDocPtr tmpDoc;int internalized;int nbKeys;int hasTemplKeyPatterns;xsltTemplatePtr currentTemplateRule;xmlNodePtr initialContextNode;xmlDocPtr initialContextDoc;xsltTransformCachePtr cache;void *contextVariable;xmlDocPtr localRVT;xmlDocPtr localRVTBase;int keyInitLevel;};
enum accept_stat {SUCCESS = 0x0,PROG_UNAVAIL = 0x1,PROG_MISMATCH = 0x2,PROC_UNAVAIL = 0x3,GARBAGE_ARGS = 0x4,SYSTEM_ERR = 0x5,};
struct accepted_reply {struct opaque_auth ar_verf;enum accept_stat ar_stat;union accepted_reply::$FFE4C706D5AA6B063845F1E90CB09F44 ru;};
union accepted_reply::$FFE4C706D5AA6B063845F1E90CB09F44 {struct accepted_reply::$FFE4C706D5AA6B063845F1E90CB09F44::$AC186CABF9007C2DA87CD3BECABD7D45 AR_versions;struct accepted_reply::$FFE4C706D5AA6B063845F1E90CB09F44::$BFD7413E14FC21CAB05150D69A0647C0 AR_results;};
struct accepted_reply::$FFE4C706D5AA6B063845F1E90CB09F44::$AC186CABF9007C2DA87CD3BECABD7D45 {unsigned int low;unsigned int high;};
struct accepted_reply::$FFE4C706D5AA6B063845F1E90CB09F44::$BFD7413E14FC21CAB05150D69A0647C0 {caddr_t where;xdrproc_t proc;};
struct accessx_descriptor {unsigned int ad_name_offset;int ad_flags;int ad_pad[2];};
struct acct {char ac_comm[10];comp_t ac_utime;comp_t ac_stime;comp_t ac_etime;u_int32_t ac_btime;uid_t ac_uid;gid_t ac_gid;u_int16_t ac_mem;comp_t ac_io;dev_t ac_tty;u_int8_t ac_flag;};
typedef enum $97920DDAD3C80055B2939F984919E3D2 acl_entry_id_t;
typedef struct _acl_entry *acl_entry_t;
typedef enum $9D44ACAEA63D9A866E10323356541372 acl_flag_t;
typedef struct _acl_flagset *acl_flagset_t;
typedef enum $2B249EAD8B9396505612852840E44E36 acl_perm_t;
typedef u_int64_t acl_permset_mask_t;
typedef struct _acl_permset *acl_permset_t;
typedef struct _acl *acl_t;
typedef enum $F332E1DED775B0D62777DB33DD18F524 acl_tag_t;
typedef enum $F8A097482C6B24D8CA3C16823450667A acl_type_t;
typedef uint64_t addr64_t;
struct addrinfo {int ai_flags;int ai_family;int ai_socktype;int ai_protocol;socklen_t ai_addrlen;char *ai_canonname;struct sockaddr *ai_addr;struct addrinfo *ai_next;};
struct aes_key_st {unsigned int rd_key[60];int rounds;};
struct agent_add_trap_args {netsnmp_session *ss;int confirm;};
struct ah {u_int8_t ah_nxt;u_int8_t ah_len;u_int16_t ah_reserve;u_int32_t ah_spi;};
struct aiocb {int aio_fildes;off_t aio_offset;volatile void *aio_buf;size_t aio_nbytes;int aio_reqprio;struct sigevent aio_sigevent;int aio_lio_opcode;};
typedef alarm_t alarm_port_t;
typedef mach_port_t alarm_t;
typedef int alarm_type_t;
struct alias {const char *from;const char *to;const char *source;};
typedef voidpf (__cdecl *alloc_func)(voidpf opaque, uInt items, uInt size);
typedef struct apple_gss_krb5_authdata_if_relevant_key apple_gss_krb5_authdata_if_relevant;
struct apple_gss_krb5_authdata_if_relevant_key {OM_uint32 type;OM_uint32 length;void *data;};
struct appletalk_fdinfo {struct proc_fileinfo pfi;struct appletalk_info appletalkinfo;};
struct appletalk_info {struct vinfo_stat atalk_stat;};
struct ar_hdr {char ar_name[16];char ar_date[12];char ar_uid[6];char ar_gid[6];char ar_mode[8];char ar_size[10];char ar_fmag[2];};
struct arphdr {u_short ar_hrd;u_short ar_pro;u_char ar_hln;u_char ar_pln;u_short ar_op;};
struct arpreq {struct sockaddr arp_pa;struct sockaddr arp_ha;int arp_flags;};
typedef struct __aslclient *aslclient;
typedef struct __aslmsg *aslmsg;
typedef struct __aslresponse *aslresponse;
struct asn1_const_ctx_st {const unsigned __int8 *p;int eos;int error;int inf;int tag;int xclass;__int64 slen;const unsigned __int8 *max;const unsigned __int8 *q;const unsigned __int8 **pp;int line;};
struct asn1_ctx_st {unsigned __int8 *p;int eos;int error;int inf;int tag;int xclass;__int64 slen;unsigned __int8 *max;unsigned __int8 *q;unsigned __int8 **pp;int line;};
struct asn1_header_st {ASN1_OCTET_STRING *header;void *data;ASN1_METHOD *meth;};
struct asn1_method_st {i2d_of_void *i2d;d2i_of_void *d2i;void *(*create)(void);void (__cdecl *destroy)(void *);};
struct asn1_object_st {const char *sn;const char *ln;int nid;int length;unsigned __int8 *data;int flags;};
typedef int __cdecl asn1_output_data_fn(BIO *out, BIO *data, ASN1_VALUE *val, int flags, const ASN1_ITEM *it);
struct asn1_string_st {int length;int type;unsigned __int8 *data;__int64 flags;};
struct asn1_string_table_st {int nid;__int64 minsize;__int64 maxsize;unsigned __int64 mask;unsigned __int64 flags;};
struct asn1_type_st {int type;union asn1_type_st::$2DD2868AF9E8E8462C9810218891F7E4 value;};
union asn1_type_st::$2DD2868AF9E8E8462C9810218891F7E4 {char *ptr;ASN1_BOOLEAN boolean;ASN1_STRING *asn1_string;ASN1_OBJECT *object;ASN1_INTEGER *integer;ASN1_ENUMERATED *enumerated;ASN1_BIT_STRING *bit_string;ASN1_OCTET_STRING *octet_string;ASN1_PRINTABLESTRING *printablestring;ASN1_T61STRING *t61string;ASN1_IA5STRING *ia5string;ASN1_GENERALSTRING *generalstring;ASN1_BMPSTRING *bmpstring;ASN1_UNIVERSALSTRING *universalstring;ASN1_UTCTIME *utctime;ASN1_GENERALIZEDTIME *generalizedtime;ASN1_VISIBLESTRING *visiblestring;ASN1_UTF8STRING *utf8string;ASN1_STRING *set;ASN1_STRING *sequence;ASN1_VALUE *asn1_value;};
typedef chtype attr_t;
typedef u_int32_t attrgroup_t;
typedef void (__cdecl *attributeDeclSAXFunc)(void *ctx, const xmlChar *elem, const xmlChar *fullname, int type, int def, const xmlChar *defaultValue, xmlEnumerationPtr tree);
typedef void (__cdecl *attributeSAXFunc)(void *ctx, const xmlChar *name, const xmlChar *value);
struct attribute_set {attrgroup_t commonattr;attrgroup_t volattr;attrgroup_t dirattr;attrgroup_t fileattr;attrgroup_t forkattr;};
typedef struct attribute_set attribute_set_t;
struct attrlist {u_short bitmapcount;u_int16_t reserved;attrgroup_t commonattr;attrgroup_t volattr;attrgroup_t dirattr;attrgroup_t fileattr;attrgroup_t forkattr;};
struct attrreference {int32_t attr_dataoffset;u_int32_t attr_length;};
typedef struct attrreference attrreference_t;
typedef struct $6473C35DBCE3A3EC7FFE17F82535E510 au_arb_t;
typedef struct $0B988009212B8FCCED068699BCED27D9 au_arg32_t;
typedef struct $159FB0235BDFD67877B1788BD964EBBB au_arg64_t;
typedef __attribute__((aligned(8))) u_int64_t au_asflgs_t;
typedef pid_t au_asid_t;
typedef struct $C32751CD7C48DEB510AF18CB8191FD58 au_attr32_t;
typedef struct $7CAB3563A0B63D1E94DFFC6057C63E4C au_attr64_t;
struct au_class_ent {char *ac_name;au_class_t ac_class;char *ac_desc;};
typedef struct au_class_ent au_class_ent_t;
typedef u_int32_t au_class_t;
typedef u_int16_t au_emod_t;
struct au_evclass_map {au_event_t ec_number;au_class_t ec_class;};
typedef struct au_evclass_map au_evclass_map_t;
struct au_event_ent {au_event_t ae_number;char *ae_name;char *ae_desc;au_class_t ae_class;};
typedef struct au_event_ent au_event_ent_t;
typedef u_int16_t au_event_t;
typedef struct $23B1E26D963E4FD44AA72239E6371C7D au_execarg_t;
typedef struct $23B1E26D963E4FD44AA72239E6371C7D au_execenv_t;
typedef struct $D6100D925DD907377B334267ECE33E6F au_exit_t;
typedef struct $29C8CFA96D5273DFDE9FA38B770B2076 au_file_t;
typedef struct audit_fstat au_fstat_t;
typedef struct $0659FB689B9ADFB6E4914AFED3DC9D4E au_groups_t;
typedef struct $EC40C8956DA7A36243DBF2EA18E7021D au_header32_ex_t;
typedef struct $0C23990C9A3077933200554184D19969 au_header32_t;
typedef struct $9F75FA6E4EE2D3B86C582C471EA99312 au_header64_ex_t;
typedef struct $3641F756729AD97A11A3B78A6DBF7918 au_header64_t;
typedef uid_t au_id_t;
typedef struct $CD5F4FFB48357709D2974D1687603B86 au_inaddr_ex_t;
typedef struct $0C6FFD5AF206204F3817E1D72432929C au_inaddr_t;
typedef struct $85D8C0A2DD9AA223810B7F7FD2DEBD15 au_invalid_t;
typedef struct $7E94C3F61C7C39FF74FA3EBDC1E527FF au_ip_t;
typedef struct $44347996413661E1D088B7486211F639 au_ipc_t;
typedef struct $3E305BF0A5D26BA3B5EE405973B9934A au_ipcperm_t;
typedef struct $D27F585C89C5E008406F3E8E8B85AF03 au_iport_t;
typedef struct $32D888630742756CD8CEFEDBFEF3759B au_kevent_t;
struct au_mask {unsigned int am_success;unsigned int am_failure;};
typedef struct au_mask au_mask_t;
typedef struct $140A3B32F7B8885BC10BF2585A8BB950 au_opaque_t;
typedef struct $BAC2AEB1FCD724D135CC335E00067868 au_path_t;
typedef struct $08EB952BF76DF7A29BEE12FBAEF31F94 au_proc32_t;
typedef struct $73773A746C574143C0D7803E150049F9 au_proc32ex_t;
typedef struct $A02E0C6A2318D7F918526EFE13F50746 au_proc64_t;
typedef struct $3881F9B2E64C73F20ED412E5826C4AC3 au_proc64ex_t;
struct au_qctrl {int aq_hiwater;int aq_lowater;int aq_bufsz;int aq_delay;int aq_minfree;};
typedef struct au_qctrl au_qctrl_t;
typedef struct $0452B6BEB4BFD9ACB6DF5B39ED6AAB75 au_ret32_t;
typedef struct $EC7035EF31280ED06745154F47D7D805 au_ret64_t;
typedef struct $4191ABD3C20A2790C5D1CD3296E7F1ED au_seq_t;
struct au_session {auditinfo_addr_t *as_aia_p;au_mask_t as_mask;};
typedef struct au_session au_session_t;
typedef struct $739921EDD5E6EE8AE9C50191702F2D06 au_socket_ex32_t;
typedef struct $D66CE1D14E0A9D84788C1B396D687289 au_socket_t;
typedef struct $D4151FDBB8529D6CBB93F4DEF633B437 au_socketinet32_t;
typedef struct $D896310976FBD32B984A6ABA327F9588 au_socketinet_ex32_t;
typedef struct $732EA1FD564A0C308BCD0B773E129823 au_socketunix_t;
typedef struct audit_stat au_stat_t;
typedef struct $08EB952BF76DF7A29BEE12FBAEF31F94 au_subject32_t;
typedef struct $73773A746C574143C0D7803E150049F9 au_subject32ex_t;
typedef struct $A02E0C6A2318D7F918526EFE13F50746 au_subject64_t;
typedef struct $3881F9B2E64C73F20ED412E5826C4AC3 au_subject64ex_t;
typedef struct $278A4467515A4F9120237B9F03BEA089 au_text_t;
struct au_tid {dev_t port;u_int32_t machine;};
struct au_tid32 {u_int32_t port;u_int32_t addr;};
typedef struct au_tid32 au_tid32_t;
struct au_tid64 {u_int64_t port;u_int32_t addr;};
typedef struct au_tid64 au_tid64_t;
struct au_tid_addr {dev_t at_port;u_int32_t at_type;u_int32_t at_addr[4];};
typedef struct au_tid_addr au_tid_addr_t;
typedef struct au_tid au_tid_t;
struct au_tidaddr32 {u_int32_t port;u_int32_t type;u_int32_t addr[4];};
typedef struct au_tidaddr32 au_tidaddr32_t;
struct au_tidaddr64 {u_int64_t port;u_int32_t type;u_int32_t addr[4];};
typedef struct au_tidaddr64 au_tidaddr64_t;
struct au_token;
typedef struct $AE11D0CF51A850EC87EAB95E067600DD au_trailer_t;
struct au_user_ent {char *au_name;au_mask_t au_always;au_mask_t au_never;};
typedef struct au_user_ent au_user_ent_t;
typedef struct $956C7F5333254C457CAB162127DEEC80 au_zonename_t;
struct audit_fstat {u_int64_t af_filesz;u_int64_t af_currsz;};
struct audit_stat {unsigned int as_version;unsigned int as_numevent;int as_generated;int as_nonattrib;int as_kernel;int as_audit;int as_auditctl;int as_enqueue;int as_written;int as_wblocked;int as_rblocked;int as_dropped;int as_totalsize;unsigned int as_memused;};
typedef struct $0B20F48E2CD2D778BD1F216BA81B71CE audit_token_t;
struct auditinfo {au_id_t ai_auid;au_mask_t ai_mask;au_tid_t ai_termid;au_asid_t ai_asid;};
struct auditinfo_addr {au_id_t ai_auid;au_mask_t ai_mask;au_tid_addr_t ai_termid;au_asid_t ai_asid;au_asflgs_t ai_flags;};
typedef struct auditinfo_addr auditinfo_addr_t;
typedef struct auditinfo auditinfo_t;
struct auditpinfo {pid_t ap_pid;au_id_t ap_auid;au_mask_t ap_mask;au_tid_t ap_termid;au_asid_t ap_asid;};
struct auditpinfo_addr {pid_t ap_pid;au_id_t ap_auid;au_mask_t ap_mask;au_tid_addr_t ap_termid;au_asid_t ap_asid;au_asflgs_t ap_flags;};
typedef struct auditpinfo_addr auditpinfo_addr_t;
typedef struct auditpinfo auditpinfo_t;
enum auth_stat {AUTH_OK = 0x0,AUTH_BADCRED = 0x1,AUTH_REJECTEDCRED = 0x2,AUTH_BADVERF = 0x3,AUTH_REJECTEDVERF = 0x4,AUTH_TOOWEAK = 0x5,AUTH_INVALIDRESP = 0x6,AUTH_FAILED = 0x7,AUTH_KERB_GENERIC = 0x8,AUTH_TIMEEXPIRE = 0x9,AUTH_TKT_FILE = 0xA,AUTH_DECODE = 0xB,AUTH_NET_ADDR = 0xC,RPCSEC_GSS_CREDPROBLEM = 0xD,RPCSEC_GSS_CTXPROBLEM = 0xE,};
struct authunix_parms {unsigned int aup_time;char *aup_machname;int aup_uid;int aup_gid;unsigned int aup_len;int *aup_gids;};
typedef int ber_int_t;
typedef unsigned __int64 ber_len_t;
typedef signed int ber_sint_t;
typedef signed __int64 ber_slen_t;
typedef int ber_socket_t;
typedef unsigned __int64 ber_tag_t;
typedef unsigned int ber_uint_t;
struct berelement;
struct berval {ber_len_t bv_len;char *bv_val;};
struct bf_key_st {unsigned int P[18];unsigned int S[1024];};
struct bignum_ctx;
struct bignum_st {unsigned __int64 *d;int top;int dmax;int neg;int flags;};
struct bio_f_buffer_ctx_struct {int ibuf_size;int obuf_size;char *ibuf;int ibuf_len;int ibuf_off;char *obuf;int obuf_len;int obuf_off;};
typedef void __cdecl bio_info_cb(struct bio_st *, int, const char *, int, __int64, __int64);
struct bio_method_st {int type;const char *name;int (__cdecl *bwrite)(BIO *, const char *, int);int (__cdecl *bread)(BIO *, char *, int);int (__cdecl *bputs)(BIO *, const char *);int (__cdecl *bgets)(BIO *, char *, int);__int64 (__cdecl *ctrl)(BIO *, int, __int64, void *);int (__cdecl *create)(BIO *);int (__cdecl *destroy)(BIO *);__int64 (__cdecl *callback_ctrl)(BIO *, int, bio_info_cb *);};
struct bio_st {BIO_METHOD *method;__int64 (__cdecl *callback)(struct bio_st *, int, const char *, int, __int64, __int64);char *cb_arg;int init;int shutdown;int flags;int retry_reason;int num;void *ptr;struct bio_st *next_bio;struct bio_st *prev_bio;int references;unsigned __int64 num_read;unsigned __int64 num_write;CRYPTO_EX_DATA ex_data;};
typedef unsigned __int8 bitstr_t;
typedef __darwin_blkcnt_t blkcnt_t;
typedef __darwin_blksize_t blksize_t;
struct bn_blinding_st;
struct bn_gencb_st {unsigned int ver;void *arg;union bn_gencb_st::$F77A54889CF8101E886FCF9AA7EBB627 cb;};
union bn_gencb_st::$F77A54889CF8101E886FCF9AA7EBB627 {void (__cdecl *cb_1)(int, int, void *);int (__cdecl *cb_2)(int, int, BN_GENCB *);};
struct bn_mont_ctx_st {int ri;BIGNUM RR;BIGNUM N;BIGNUM Ni;unsigned __int64 n0;int flags;};
struct bn_recp_ctx_st {BIGNUM N;BIGNUM Nr;int num_bits;int shift;int flags;};
typedef boolean_t *bool_array_t;
typedef unsigned int boolean_t;
struct bootp {u_char bp_op;u_char bp_htype;u_char bp_hlen;u_char bp_hops;u_int32_t bp_xid;u_short bp_secs;u_short bp_unused;struct in_addr bp_ciaddr;struct in_addr bp_yiaddr;struct in_addr bp_siaddr;struct in_addr bp_giaddr;u_char bp_chaddr[16];u_char bp_sname[64];u_char bp_file[128];u_char bp_vend[64];};
struct bootp_packet {struct ip bp_ip;struct udphdr bp_udp;struct bootp bp_bootp;};
typedef bootstrap_property_t *bootstrap_property_array_t;
typedef unsigned int bootstrap_property_t;
typedef bootstrap_status_t *bootstrap_status_array_t;
typedef int bootstrap_status_t;
typedef mach_port_t bootstrap_t;
struct bp_address {int address_type;union bp_address::$3B940BBAFE206A608BBBF7EC1987BA49 bp_address_u;};
union bp_address::$3B940BBAFE206A608BBBF7EC1987BA49 {ip_addr_t ip_addr;};
typedef char *bp_fileid_t;
struct bp_getfile_arg {bp_machine_name_t client_name;bp_fileid_t file_id;};
struct bp_getfile_res {bp_machine_name_t server_name;bp_address server_address;bp_path_t server_path;};
typedef char *bp_machine_name_t;
typedef char *bp_path_t;
struct bp_whoami_arg {bp_address client_address;};
struct bp_whoami_res {bp_machine_name_t client_name;bp_machine_name_t domain_name;bp_address router_address;};
struct bpf_d;
struct bpf_dltlist {u_int32_t bfl_len;union bpf_dltlist::$DD4EE95841EE2FCCF4EE9A868D20E5D0 bfl_u;};
union bpf_dltlist::$DD4EE95841EE2FCCF4EE9A868D20E5D0 {u_int32_t *bflu_list;u_int64_t bflu_pad;};
struct bpf_hdr {struct timeval32 bh_tstamp;bpf_u_int32 bh_caplen;bpf_u_int32 bh_datalen;u_short bh_hdrlen;};
struct bpf_insn {u_short code;u_char jt;u_char jf;bpf_u_int32 k;};
typedef int bpf_int32;
struct bpf_program {u_int bf_len;struct bpf_insn *bf_insns;};
struct bpf_stat {u_int bs_recv;u_int bs_drop;};
typedef u_int bpf_u_int32;
struct bpf_version {u_short bv_major;u_short bv_minor;};
struct buf;
struct buf_mem_st {int length;char *data;int max;};
typedef struct buf *buf_t;
typedef unsigned __int8 byte;
typedef struct $5B2C4A92108463040FBECE1079B5BB63 bz_stream;
struct cache_attributes_s {uint32_t version;cache_key_hash_cb_t key_hash_cb;cache_key_is_equal_cb_t key_is_equal_cb;cache_key_retain_cb_t key_retain_cb;cache_release_cb_t key_release_cb;cache_release_cb_t value_release_cb;cache_value_make_nonpurgeable_cb_t value_make_nonpurgeable_cb;cache_value_make_purgeable_cb_t value_make_purgeable_cb;void *user_data;cache_value_retain_cb_t value_retain_cb;};
typedef struct cache_attributes_s cache_attributes_t;
typedef size_t cache_cost_t;
typedef uintptr_t (__cdecl *cache_key_hash_cb_t)(void *key, void *user_data);
typedef bool (__cdecl *cache_key_is_equal_cb_t)(void *key1, void *key2, void *user_data);
typedef void (__cdecl *cache_key_retain_cb_t)(void *key_in, void **key_out, void *user_data);
typedef void (__cdecl *cache_release_cb_t)(void *key_or_value, void *user_data);
struct cache_s;
typedef struct cache_s cache_t;
typedef bool (__cdecl *cache_value_make_nonpurgeable_cb_t)(void *value, void *user_data);
typedef void (__cdecl *cache_value_make_purgeable_cb_t)(void *value, void *user_data);
typedef void (__cdecl *cache_value_retain_cb_t)(void *value_in, void *user_data);
typedef char *caddr_t;
struct call_body {unsigned int cb_rpcvers;unsigned int cb_prog;unsigned int cb_vers;unsigned int cb_proc;struct opaque_auth cb_cred;struct opaque_auth cb_verf;};
struct call_gate {unsigned __int16 offset00;sel_t seg;unsigned __int32 argcnt : 5;unsigned __int32 : 3;unsigned __int32 type : 5;unsigned __int32 dpl : 2;unsigned __int32 present : 1;unsigned __int32 offset16 : 16;};
typedef struct call_gate call_gate_t;
struct cast_key_st {unsigned __int64 data[32];int short_key;};
typedef unsigned __int8 cc_t;
struct ccs_header_st {unsigned __int8 type;unsigned __int16 seq;};
typedef void (__cdecl *cdataBlockSAXFunc)(void *ctx, const xmlChar *value, int len);
struct cgi_file_s {char tempfile[1024];char *name;char *filename;char *mimetype;size_t filesize;};
typedef struct cgi_file_s cgi_file_t;
typedef void (__cdecl *charactersSAXFunc)(void *ctx, const xmlChar *ch, int len);
typedef char charf;
typedef unsigned int chtype;
struct client_sasl_mechanism {int version;char *plugname;const sasl_client_plug_t *plug;};
typedef struct client_sasl_mechanism client_sasl_mechanism_t;
struct clist;
enum clnt_stat {RPC_SUCCESS = 0x0,RPC_CANTENCODEARGS = 0x1,RPC_CANTDECODERES = 0x2,RPC_CANTSEND = 0x3,RPC_CANTRECV = 0x4,RPC_TIMEDOUT = 0x5,RPC_VERSMISMATCH = 0x6,RPC_AUTHERROR = 0x7,RPC_PROGUNAVAIL = 0x8,RPC_PROGVERSMISMATCH = 0x9,RPC_PROCUNAVAIL = 0xA,RPC_CANTDECODEARGS = 0xB,RPC_SYSTEMERROR = 0xC,RPC_UNKNOWNHOST = 0xD,RPC_UNKNOWNPROTO = 0x11,RPC_PMAPFAILURE = 0xE,RPC_PROGNOTREGISTERED = 0xF,RPC_FAILED = 0x10,};
typedef int *clock_attr_t;
typedef clock_ctrl_t clock_ctrl_port_t;
typedef mach_port_t clock_ctrl_t;
typedef int clock_flavor_t;
typedef int clock_id_t;
typedef mach_port_t clock_reply_t;
typedef int clock_res_t;
typedef clock_serv_t clock_serv_port_t;
typedef mach_port_t clock_serv_t;
typedef __darwin_clock_t clock_t;
struct clockinfo {int hz;int tick;int tickadj;int stathz;int profhz;};
typedef char cmd_t[512];
struct cmsghdr {socklen_t cmsg_len;int cmsg_level;int cmsg_type;};
struct code_desc {unsigned __int16 limit00;unsigned __int16 base00;unsigned __int8 base16;unsigned __int8 type : 5;unsigned __int8 dpl : 2;unsigned __int8 present : 1;unsigned __int8 limit16 : 4;unsigned __int8 : 2;unsigned __int8 opsz : 1;unsigned __int8 granular : 1;unsigned __int8 base24;};
typedef struct code_desc code_desc_t;
typedef void (__cdecl *com_err_handler_t)(const char *whoami, errcode_t code, const char *format, va_list args);
typedef void (__cdecl *commentSAXFunc)(void *ctx, const xmlChar *value);
struct comp_ctx_st {COMP_METHOD *meth;unsigned __int64 compress_in;unsigned __int64 compress_out;unsigned __int64 expand_in;unsigned __int64 expand_out;CRYPTO_EX_DATA ex_data;};
struct comp_method_st {int type;const char *name;int (__cdecl *init)(COMP_CTX *ctx);void (__cdecl *finish)(COMP_CTX *ctx);int (__cdecl *compress)(COMP_CTX *ctx, unsigned __int8 *out, unsigned int olen, unsigned __int8 *in, unsigned int ilen);int (__cdecl *expand)(COMP_CTX *ctx, unsigned __int8 *out, unsigned int olen, unsigned __int8 *in, unsigned int ilen);__int64 (*ctrl)(void);__int64 (*callback_ctrl)(void);};
typedef u_int16_t comp_t;
typedef struct _computed_attr_context computed_attr_context;
typedef void __cdecl conf_finish_func(CONF_IMODULE *md);
struct conf_imodule_st;
typedef int __cdecl conf_init_func(CONF_IMODULE *md, const CONF *cnf);
struct conf_method_st {const char *name;CONF *(__cdecl *create)(CONF_METHOD *meth);int (__cdecl *init)(CONF *conf);int (__cdecl *destroy)(CONF *conf);int (__cdecl *destroy_data)(CONF *conf);int (__cdecl *load_bio)(CONF *conf, BIO *bp, __int64 *eline);int (__cdecl *dump)(const CONF *conf, BIO *bp);int (__cdecl *is_number)(const CONF *conf, char c);int (__cdecl *to_int)(const CONF *conf, char c);int (__cdecl *load)(CONF *conf, const char *name, __int64 *eline);};
struct conf_module_st;
struct conf_st {CONF_METHOD *meth;void *meth_data;LHASH *data;};
struct config_files {char *fileHeader;struct config_line *start;struct config_files *next;};
struct config_line {char *config_token;void (__cdecl *parse_line)(const char *, char *);void (*free_func)(void);struct config_line *next;char config_time;char *help;};
typedef unsigned __int8 const_DES_cblock[8];
typedef const void *const_marker_t;
typedef const char *const_profile_filespec_list_t;
typedef const char *const_profile_filespec_t;
typedef int (__cdecl *copyfile_callback_t)(int, int, copyfile_state_t, const char *, const char *, void *);
typedef uint32_t copyfile_flags_t;
typedef struct _copyfile_state *copyfile_state_t;
struct counter64 {u_long high;u_long low;};
typedef integer_t cpu_subtype_t;
typedef integer_t cpu_threadtype_t;
typedef integer_t cpu_type_t;
typedef struct _cr0 cr0_t;
struct credentials;
struct crypto_ex_data_func_st {__int64 argl;void *argp;CRYPTO_EX_new *new_func;CRYPTO_EX_free *free_func;CRYPTO_EX_dup *dup_func;};
struct crypto_ex_data_st {STACK *sk;int dummy;};
typedef __darwin_ct_rune_t ct_rune_t;
struct ctl_event_data {u_int32_t ctl_id;u_int32_t ctl_unit;};
struct ctl_info {u_int32_t ctl_id;char ctl_name[96];};
struct ctlname {char *ctl_name;int ctl_type;};
typedef const tmbchar *ctmbstr;
typedef void *(__cdecl *cups_acopy_func_t)(void *element, void *data);
enum cups_adv_e {CUPS_ADVANCE_NONE = 0x0,CUPS_ADVANCE_FILE = 0x1,CUPS_ADVANCE_JOB = 0x2,CUPS_ADVANCE_SET = 0x3,CUPS_ADVANCE_PAGE = 0x4,};
typedef enum cups_adv_e cups_adv_t;
typedef void (__cdecl *cups_afree_func_t)(void *element, void *data);
typedef int (__cdecl *cups_ahash_func_t)(void *element, void *data);
typedef int (__cdecl *cups_array_func_t)(void *first, void *second, void *data);
typedef struct _cups_array_s cups_array_t;
enum cups_backend_e {CUPS_BACKEND_OK = 0x0,CUPS_BACKEND_FAILED = 0x1,CUPS_BACKEND_AUTH_REQUIRED = 0x2,CUPS_BACKEND_HOLD = 0x3,CUPS_BACKEND_STOP = 0x4,CUPS_BACKEND_CANCEL = 0x5,CUPS_BACKEND_RETRY = 0x6,CUPS_BACKEND_RETRY_CURRENT = 0x7,};
typedef enum cups_backend_e cups_backend_t;
enum cups_bool_e {CUPS_FALSE = 0x0,CUPS_TRUE = 0x1,};
typedef enum cups_bool_e cups_bool_t;
typedef int (__cdecl *cups_client_cert_cb_t)(http_t *http, void *tls, cups_array_t *distinguished_names, void *user_data);
struct cups_cmyk_s {unsigned __int8 black_lut[256];unsigned __int8 color_lut[256];int ink_limit;int num_channels;__int16 *channels[15];};
typedef struct cups_cmyk_s cups_cmyk_t;
enum cups_cspace_e {CUPS_CSPACE_W = 0x0,CUPS_CSPACE_RGB = 0x1,CUPS_CSPACE_RGBA = 0x2,CUPS_CSPACE_K = 0x3,CUPS_CSPACE_CMY = 0x4,CUPS_CSPACE_YMC = 0x5,CUPS_CSPACE_CMYK = 0x6,CUPS_CSPACE_YMCK = 0x7,CUPS_CSPACE_KCMY = 0x8,CUPS_CSPACE_KCMYcm = 0x9,CUPS_CSPACE_GMCK = 0xA,CUPS_CSPACE_GMCS = 0xB,CUPS_CSPACE_WHITE = 0xC,CUPS_CSPACE_GOLD = 0xD,CUPS_CSPACE_SILVER = 0xE,CUPS_CSPACE_CIEXYZ = 0xF,CUPS_CSPACE_CIELab = 0x10,CUPS_CSPACE_RGBW = 0x11,CUPS_CSPACE_SW = 0x12,CUPS_CSPACE_SRGB = 0x13,CUPS_CSPACE_ADOBERGB = 0x14,CUPS_CSPACE_ICC1 = 0x20,CUPS_CSPACE_ICC2 = 0x21,CUPS_CSPACE_ICC3 = 0x22,CUPS_CSPACE_ICC4 = 0x23,CUPS_CSPACE_ICC5 = 0x24,CUPS_CSPACE_ICC6 = 0x25,CUPS_CSPACE_ICC7 = 0x26,CUPS_CSPACE_ICC8 = 0x27,CUPS_CSPACE_ICC9 = 0x28,CUPS_CSPACE_ICCA = 0x29,CUPS_CSPACE_ICCB = 0x2A,CUPS_CSPACE_ICCC = 0x2B,CUPS_CSPACE_ICCD = 0x2C,CUPS_CSPACE_ICCE = 0x2D,CUPS_CSPACE_ICCF = 0x2E,CUPS_CSPACE_DEVICE1 = 0x30,CUPS_CSPACE_DEVICE2 = 0x31,CUPS_CSPACE_DEVICE3 = 0x32,CUPS_CSPACE_DEVICE4 = 0x33,CUPS_CSPACE_DEVICE5 = 0x34,CUPS_CSPACE_DEVICE6 = 0x35,CUPS_CSPACE_DEVICE7 = 0x36,CUPS_CSPACE_DEVICE8 = 0x37,CUPS_CSPACE_DEVICE9 = 0x38,CUPS_CSPACE_DEVICEA = 0x39,CUPS_CSPACE_DEVICEB = 0x3A,CUPS_CSPACE_DEVICEC = 0x3B,CUPS_CSPACE_DEVICED = 0x3C,CUPS_CSPACE_DEVICEE = 0x3D,CUPS_CSPACE_DEVICEF = 0x3E,};
typedef enum cups_cspace_e cups_cspace_t;
enum cups_cut_e {CUPS_CUT_NONE = 0x0,CUPS_CUT_FILE = 0x1,CUPS_CUT_JOB = 0x2,CUPS_CUT_SET = 0x3,CUPS_CUT_PAGE = 0x4,};
typedef enum cups_cut_e cups_cut_t;
typedef unsigned __int16 cups_dbcs_t;
struct cups_dentry_s {char filename[260];struct stat fileinfo;};
typedef struct cups_dentry_s cups_dentry_t;
struct cups_dest_s {char *name;char *instance;int is_default;int num_options;cups_option_t *options;};
typedef struct cups_dest_s cups_dest_t;
typedef void (__cdecl *cups_device_cb_t)(const char *device_class, const char *device_id, const char *device_info, const char *device_make_and_model, const char *device_uri, const char *device_location, void *user_data);
typedef struct _cups_dir_s cups_dir_t;
struct cups_dither_s {int width;int row;int errors[96];};
typedef struct cups_dither_s cups_dither_t;
enum cups_edge_e {CUPS_EDGE_TOP = 0x0,CUPS_EDGE_RIGHT = 0x1,CUPS_EDGE_BOTTOM = 0x2,CUPS_EDGE_LEFT = 0x3,};
typedef enum cups_edge_e cups_edge_t;
enum cups_encoding_e {CUPS_AUTO_ENCODING = 0xFFFFFFFF,CUPS_US_ASCII = 0x0,CUPS_ISO8859_1 = 0x1,CUPS_ISO8859_2 = 0x2,CUPS_ISO8859_3 = 0x3,CUPS_ISO8859_4 = 0x4,CUPS_ISO8859_5 = 0x5,CUPS_ISO8859_6 = 0x6,CUPS_ISO8859_7 = 0x7,CUPS_ISO8859_8 = 0x8,CUPS_ISO8859_9 = 0x9,CUPS_ISO8859_10 = 0xA,CUPS_UTF8 = 0xB,CUPS_ISO8859_13 = 0xC,CUPS_ISO8859_14 = 0xD,CUPS_ISO8859_15 = 0xE,CUPS_WINDOWS_874 = 0xF,CUPS_WINDOWS_1250 = 0x10,CUPS_WINDOWS_1251 = 0x11,CUPS_WINDOWS_1252 = 0x12,CUPS_WINDOWS_1253 = 0x13,CUPS_WINDOWS_1254 = 0x14,CUPS_WINDOWS_1255 = 0x15,CUPS_WINDOWS_1256 = 0x16,CUPS_WINDOWS_1257 = 0x17,CUPS_WINDOWS_1258 = 0x18,CUPS_KOI8_R = 0x19,CUPS_KOI8_U = 0x1A,CUPS_ISO8859_11 = 0x1B,CUPS_ISO8859_16 = 0x1C,CUPS_MAC_ROMAN = 0x1D,CUPS_ENCODING_SBCS_END = 0x3F,CUPS_WINDOWS_932 = 0x40,CUPS_WINDOWS_936 = 0x41,CUPS_WINDOWS_949 = 0x42,CUPS_WINDOWS_950 = 0x43,CUPS_WINDOWS_1361 = 0x44,CUPS_ENCODING_DBCS_END = 0x7F,CUPS_EUC_CN = 0x80,CUPS_EUC_JP = 0x81,CUPS_EUC_KR = 0x82,CUPS_EUC_TW = 0x83,CUPS_JIS_X0213 = 0x84,CUPS_ENCODING_VBCS_END = 0xBF,};
typedef enum cups_encoding_e cups_encoding_t;
typedef struct _cups_file_s cups_file_t;
typedef unsigned __int8 cups_ib_t;
enum cups_icspace_e {CUPS_IMAGE_CMYK = 0xFFFFFFFC,CUPS_IMAGE_CMY = 0xFFFFFFFD,CUPS_IMAGE_BLACK = 0xFFFFFFFF,CUPS_IMAGE_WHITE = 0x1,CUPS_IMAGE_RGB = 0x3,CUPS_IMAGE_RGB_CMYK = 0x4,};
typedef enum cups_icspace_e cups_icspace_t;
struct cups_image_s;
typedef struct cups_image_s cups_image_t;
typedef int (__cdecl *cups_interpret_cb_t)(cups_page_header2_t *header, int preferred_bits);
struct cups_izoom_s;
typedef struct cups_izoom_s cups_izoom_t;
struct cups_job_s {int id;char *dest;char *title;char *user;char *format;ipp_jstate_t state;int size;int priority;time_t completed_time;time_t creation_time;time_t processing_time;};
typedef struct cups_job_s cups_job_t;
enum cups_jog_e {CUPS_JOG_NONE = 0x0,CUPS_JOG_FILE = 0x1,CUPS_JOG_JOB = 0x2,CUPS_JOG_SET = 0x3,};
typedef enum cups_jog_e cups_jog_t;
struct cups_lang_s {struct cups_lang_s *next;int used;cups_encoding_t encoding;char language[16];cups_array_t *strings;};
typedef struct cups_lang_s cups_lang_t;
struct cups_lut_s {__int16 intensity;__int16 pixel;int error;};
typedef struct cups_lut_s cups_lut_t;
enum cups_mode_e {CUPS_RASTER_READ = 0x0,CUPS_RASTER_WRITE = 0x1,CUPS_RASTER_WRITE_COMPRESSED = 0x2,CUPS_RASTER_WRITE_PWG = 0x3,};
typedef enum cups_mode_e cups_mode_t;
struct cups_option_s {char *name;char *value;};
typedef struct cups_option_s cups_option_t;
enum cups_order_e {CUPS_ORDER_CHUNKED = 0x0,CUPS_ORDER_BANDED = 0x1,CUPS_ORDER_PLANAR = 0x2,};
typedef enum cups_order_e cups_order_t;
enum cups_orient_e {CUPS_ORIENT_0 = 0x0,CUPS_ORIENT_90 = 0x1,CUPS_ORIENT_180 = 0x2,CUPS_ORIENT_270 = 0x3,};
typedef enum cups_orient_e cups_orient_t;
struct cups_page_header2_s {char MediaClass[64];char MediaColor[64];char MediaType[64];char OutputType[64];unsigned int AdvanceDistance;cups_adv_t AdvanceMedia;cups_bool_t Collate;cups_cut_t CutMedia;cups_bool_t Duplex;unsigned int HWResolution[2];unsigned int ImagingBoundingBox[4];cups_bool_t InsertSheet;cups_jog_t Jog;cups_edge_t LeadingEdge;unsigned int Margins[2];cups_bool_t ManualFeed;unsigned int MediaPosition;unsigned int MediaWeight;cups_bool_t MirrorPrint;cups_bool_t NegativePrint;unsigned int NumCopies;cups_orient_t Orientation;cups_bool_t OutputFaceUp;unsigned int PageSize[2];cups_bool_t Separations;cups_bool_t TraySwitch;cups_bool_t Tumble;unsigned int cupsWidth;unsigned int cupsHeight;unsigned int cupsMediaType;unsigned int cupsBitsPerColor;unsigned int cupsBitsPerPixel;unsigned int cupsBytesPerLine;cups_order_t cupsColorOrder;cups_cspace_t cupsColorSpace;unsigned int cupsCompression;unsigned int cupsRowCount;unsigned int cupsRowFeed;unsigned int cupsRowStep;unsigned int cupsNumColors;float cupsBorderlessScalingFactor;float cupsPageSize[2];float cupsImagingBBox[4];unsigned int cupsInteger[16];float cupsReal[16];char cupsString[16][64];char cupsMarkerType[64];char cupsRenderingIntent[64];char cupsPageSizeName[64];};
typedef struct cups_page_header2_s cups_page_header2_t;
struct cups_page_header_s {char MediaClass[64];char MediaColor[64];char MediaType[64];char OutputType[64];unsigned int AdvanceDistance;cups_adv_t AdvanceMedia;cups_bool_t Collate;cups_cut_t CutMedia;cups_bool_t Duplex;unsigned int HWResolution[2];unsigned int ImagingBoundingBox[4];cups_bool_t InsertSheet;cups_jog_t Jog;cups_edge_t LeadingEdge;unsigned int Margins[2];cups_bool_t ManualFeed;unsigned int MediaPosition;unsigned int MediaWeight;cups_bool_t MirrorPrint;cups_bool_t NegativePrint;unsigned int NumCopies;cups_orient_t Orientation;cups_bool_t OutputFaceUp;unsigned int PageSize[2];cups_bool_t Separations;cups_bool_t TraySwitch;cups_bool_t Tumble;unsigned int cupsWidth;unsigned int cupsHeight;unsigned int cupsMediaType;unsigned int cupsBitsPerColor;unsigned int cupsBitsPerPixel;unsigned int cupsBytesPerLine;cups_order_t cupsColorOrder;cups_cspace_t cupsColorSpace;unsigned int cupsCompression;unsigned int cupsRowCount;unsigned int cupsRowFeed;unsigned int cupsRowStep;};
typedef struct cups_page_header_s cups_page_header_t;
typedef const char *(__cdecl *cups_password_cb2_t)(const char *prompt, http_t *http, const char *method, const char *resource, void *user_data);
typedef const char *(__cdecl *cups_password_cb_t)(const char *prompt);
enum cups_ptype_e {CUPS_PRINTER_LOCAL = 0x0,CUPS_PRINTER_CLASS = 0x1,CUPS_PRINTER_REMOTE = 0x2,CUPS_PRINTER_BW = 0x4,CUPS_PRINTER_COLOR = 0x8,CUPS_PRINTER_DUPLEX = 0x10,CUPS_PRINTER_STAPLE = 0x20,CUPS_PRINTER_COPIES = 0x40,CUPS_PRINTER_COLLATE = 0x80,CUPS_PRINTER_PUNCH = 0x100,CUPS_PRINTER_COVER = 0x200,CUPS_PRINTER_BIND = 0x400,CUPS_PRINTER_SORT = 0x800,CUPS_PRINTER_SMALL = 0x1000,CUPS_PRINTER_MEDIUM = 0x2000,CUPS_PRINTER_LARGE = 0x4000,CUPS_PRINTER_VARIABLE = 0x8000,CUPS_PRINTER_IMPLICIT = 0x10000,CUPS_PRINTER_DEFAULT = 0x20000,CUPS_PRINTER_FAX = 0x40000,CUPS_PRINTER_REJECTING = 0x80000,CUPS_PRINTER_DELETE = 0x100000,CUPS_PRINTER_NOT_SHARED = 0x200000,CUPS_PRINTER_AUTHENTICATED = 0x400000,CUPS_PRINTER_COMMANDS = 0x800000,CUPS_PRINTER_DISCOVERED = 0x1000000,CUPS_PRINTER_SCANNER = 0x2000000,CUPS_PRINTER_MFP = 0x4000000,CUPS_PRINTER_OPTIONS = 0x6FFFC,};
typedef unsigned int cups_ptype_t;
typedef ssize_t (__cdecl *cups_raster_iocb_t)(void *ctx, unsigned __int8 *buffer, size_t length);
typedef struct _cups_raster_s cups_raster_t;
struct cups_rgb_s {int cube_size;int num_channels;unsigned __int8 ****colors;int cube_index[256];int cube_mult[256];int cache_init;unsigned __int8 black[4];unsigned __int8 white[4];};
typedef struct cups_rgb_s cups_rgb_t;
struct cups_sample_s {unsigned __int8 rgb[3];unsigned __int8 colors[4];};
typedef struct cups_sample_s cups_sample_t;
typedef unsigned __int8 cups_sbcs_t;
enum cups_sc_bidi_e {CUPS_SC_BIDI_NOT_SUPPORTED = 0x0,CUPS_SC_BIDI_SUPPORTED = 0x1,};
typedef enum cups_sc_bidi_e cups_sc_bidi_t;
enum cups_sc_command_e {CUPS_SC_CMD_NONE = 0x0,CUPS_SC_CMD_SOFT_RESET = 0x1,CUPS_SC_CMD_DRAIN_OUTPUT = 0x2,CUPS_SC_CMD_GET_BIDI = 0x3,CUPS_SC_CMD_GET_DEVICE_ID = 0x4,CUPS_SC_CMD_GET_STATE = 0x5,CUPS_SC_CMD_SNMP_GET = 0x6,CUPS_SC_CMD_SNMP_GET_NEXT = 0x7,CUPS_SC_CMD_GET_CONNECTED = 0x8,CUPS_SC_CMD_MAX = 0x9,};
typedef enum cups_sc_command_e cups_sc_command_t;
enum cups_sc_connected_e {CUPS_SC_NOT_CONNECTED = 0x0,CUPS_SC_CONNECTED = 0x1,};
typedef enum cups_sc_connected_e cups_sc_connected_t;
enum cups_sc_state_e {CUPS_SC_STATE_OFFLINE = 0x0,CUPS_SC_STATE_ONLINE = 0x1,CUPS_SC_STATE_BUSY = 0x2,CUPS_SC_STATE_ERROR = 0x4,CUPS_SC_STATE_MEDIA_LOW = 0x10,CUPS_SC_STATE_MEDIA_EMPTY = 0x20,CUPS_SC_STATE_MARKER_LOW = 0x40,CUPS_SC_STATE_MARKER_EMPTY = 0x80,};
typedef enum cups_sc_state_e cups_sc_state_t;
enum cups_sc_status_e {CUPS_SC_STATUS_NONE = 0x0,CUPS_SC_STATUS_OK = 0x1,CUPS_SC_STATUS_IO_ERROR = 0x2,CUPS_SC_STATUS_TIMEOUT = 0x3,CUPS_SC_STATUS_NO_RESPONSE = 0x4,CUPS_SC_STATUS_BAD_MESSAGE = 0x5,CUPS_SC_STATUS_TOO_BIG = 0x6,CUPS_SC_STATUS_NOT_IMPLEMENTED = 0x7,};
typedef enum cups_sc_status_e cups_sc_status_t;
typedef void (__cdecl *cups_sc_walk_func_t)(const char *oid, const char *data, int datalen, void *context);
typedef int (__cdecl *cups_server_cert_cb_t)(http_t *http, void *tls, cups_array_t *certs, void *user_data);
typedef unsigned __int16 cups_ucs2_t;
typedef unsigned __int64 cups_ucs4_t;
typedef unsigned __int64 cups_utf32_t;
typedef unsigned __int8 cups_utf8_t;
typedef unsigned __int64 cups_vbcs_t;
typedef enum $6BF03EB572F80D0BDF28C7CB21479A3D curl_TimeCond;
typedef void *(__cdecl *curl_calloc_callback)(size_t nmemb, size_t size);
struct curl_certinfo {int num_of_certs;struct curl_slist **certinfo;};
typedef __int64 (__cdecl *curl_chunk_bgn_callback)(const void *transfer_info, void *ptr, int remains);
typedef __int64 (__cdecl *curl_chunk_end_callback)(void *ptr);
typedef enum $7AE70D482D57B64FB9C9B10583B098AB curl_closepolicy;
typedef CURLcode (__cdecl *curl_conv_callback)(char *buffer, size_t length);
typedef int (__cdecl *curl_debug_callback)(CURL *handle, curl_infotype type, char *data, size_t size, void *userptr);
struct curl_fileinfo {char *filename;curlfiletype filetype;time_t time;unsigned int perm;int uid;int gid;curl_off_t size;__int64 hardlinks;struct curl_fileinfo::$077514F63D1BEBBC677B95BCFA7479A7 strings;unsigned int flags;char *b_data;size_t b_size;size_t b_used;};
struct curl_fileinfo::$077514F63D1BEBBC677B95BCFA7479A7 {char *time;char *perm;char *user;char *group;char *target;};
typedef int (__cdecl *curl_fnmatch_callback)(void *ptr, const char *pattern, const char *string);
typedef size_t (__cdecl *curl_formget_callback)(void *arg, const char *buf, size_t len);
struct curl_forms {CURLformoption option;const char *value;};
typedef void (__cdecl *curl_free_callback)(void *ptr);
typedef enum $7C7EBFB03B6B9DB8456CC748404AF258 curl_ftpauth;
typedef enum $5BC5AC313FBD748556525804BA480EF5 curl_ftpccc;
typedef enum $D3B97490B7B9C86B943C2E39D5FA02F9 curl_ftpcreatedir;
typedef enum $5BB59419A030D6A179F24FB1144C5140 curl_ftpmethod;
struct curl_httppost {struct curl_httppost *next;char *name;__int64 namelength;char *contents;__int64 contentslength;char *buffer;__int64 bufferlength;char *contenttype;struct curl_slist *contentheader;struct curl_httppost *more;__int64 flags;char *showfilename;void *userp;};
typedef enum $0CDFE265BA8298D003ED8250CCBFBAAD curl_infotype;
typedef curlioerr (__cdecl *curl_ioctl_callback)(CURL *handle, int cmd, void *clientp);
struct curl_khkey {const char *key;size_t len;enum curl_khkey::type keytype;};
enum curl_khkey::type {CURLKHTYPE_UNKNOWN = 0x0,CURLKHTYPE_RSA1 = 0x1,CURLKHTYPE_RSA = 0x2,CURLKHTYPE_DSS = 0x3,};
enum curl_khmatch {CURLKHMATCH_OK = 0x0,CURLKHMATCH_MISMATCH = 0x1,CURLKHMATCH_MISSING = 0x2,CURLKHMATCH_LAST = 0x3,};
enum curl_khstat {CURLKHSTAT_FINE_ADD_TO_FILE = 0x0,CURLKHSTAT_FINE = 0x1,CURLKHSTAT_REJECT = 0x2,CURLKHSTAT_DEFER = 0x3,CURLKHSTAT_LAST = 0x4,};
typedef enum $8E6D3DD4E935220D4F923E1EC10C4FEC curl_lock_access;
typedef enum $0F66511D35BDCD2A40906A0230E6F760 curl_lock_data;
typedef void (__cdecl *curl_lock_function)(CURL *handle, curl_lock_data data, curl_lock_access locktype, void *userptr);
typedef void *(__cdecl *curl_malloc_callback)(size_t size);
typedef int (__cdecl *curl_multi_timer_callback)(CURLM *multi, __int64 timeout_ms, void *userp);
typedef int64_t curl_off_t;
typedef curl_socket_t (__cdecl *curl_opensocket_callback)(void *clientp, curlsocktype purpose, struct curl_sockaddr *address);
typedef int (__cdecl *curl_progress_callback)(void *clientp, double dltotal, double dlnow, double ultotal, double ulnow);
typedef enum $AA7AC226BF5649CDC6E12A1616281D14 curl_proxytype;
typedef size_t (__cdecl *curl_read_callback)(char *buffer, size_t size, size_t nitems, void *instream);
typedef void *(__cdecl *curl_realloc_callback)(void *ptr, size_t size);
typedef int (__cdecl *curl_seek_callback)(void *instream, curl_off_t offset, int origin);
struct curl_slist {char *data;struct curl_slist *next;};
struct curl_sockaddr {int family;int socktype;int protocol;unsigned int addrlen;struct sockaddr addr;};
typedef int (__cdecl *curl_socket_callback)(CURL *easy, curl_socket_t s, int what, void *userp, void *socketp);
typedef int curl_socket_t;
typedef socklen_t curl_socklen_t;
typedef int (__cdecl *curl_sockopt_callback)(void *clientp, curl_socket_t curlfd, curlsocktype purpose);
typedef int (__cdecl *curl_sshkeycallback)(CURL *easy, const struct curl_khkey *knownkey, const struct curl_khkey *foundkey, enum curl_khmatch, void *clientp);
typedef CURLcode (__cdecl *curl_ssl_ctx_callback)(CURL *curl, void *ssl_ctx, void *userptr);
typedef char *(__cdecl *curl_strdup_callback)(const char *str);
typedef void (__cdecl *curl_unlock_function)(CURL *handle, curl_lock_data data, void *userptr);
typedef enum $0DBFB4EE40FDDB492A6C497C28C3DC12 curl_usessl;
typedef struct $EF3ED49D3DFE8EEF757C9F0AD64865F5 curl_version_info_data;
typedef size_t (__cdecl *curl_write_callback)(char *buffer, size_t size, size_t nitems, void *outstream);
typedef enum $27A01D9EE3F8426B35A7597034B60846 curlfiletype;
typedef enum $56CFACB0BE9E4BA6F465B343389C1FC1 curliocmd;
typedef enum $12BCB6FB1C1F7369F599F8C0386A61E5 curlioerr;
typedef enum $C2D4DC0A39BA1BADB043EDCBF23CFD90 curlsocktype;
typedef void *__cdecl d2i_of_void(void **, const unsigned __int8 **, __int64);
typedef int64_t daddr64_t;
typedef int32_t daddr_t;
struct data_desc {unsigned __int16 limit00;unsigned __int16 base00;unsigned __int8 base16;unsigned __int8 type : 5;unsigned __int8 dpl : 2;unsigned __int8 present : 1;unsigned __int8 limit16 : 4;unsigned __int8 : 2;unsigned __int8 stksz : 1;unsigned __int8 granular : 1;unsigned __int8 base24;};
typedef struct data_desc data_desc_t;
typedef struct $81AF895D5A7FC7AA97C511D95D41010E datum;
typedef debug_t *debug_ptr_t;
typedef struct $B0A4D3FCA1AE58C86963BEC154F83A57 debug_t;
union des_block {struct des_block::$E577A72923D02C4B0C353C58593774EC key;char c[8];};
struct des_block::$E577A72923D02C4B0C353C58593774EC {u_int32 high;u_int32 low;};
typedef __darwin_dev_t dev_t;
struct devnode;
struct dh_method {const char *name;int (__cdecl *generate_key)(DH *dh);int (__cdecl *compute_key)(unsigned __int8 *key, const BIGNUM *pub_key, DH *dh);int (__cdecl *bn_mod_exp)(const DH *dh, BIGNUM *r, const BIGNUM *a, const BIGNUM *p, const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx);int (__cdecl *init)(DH *dh);int (__cdecl *finish)(DH *dh);int flags;char *app_data;int (__cdecl *generate_params)(DH *dh, int prime_len, int generator, BN_GENCB *cb);};
struct dh_st {int pad;int version;BIGNUM *p;BIGNUM *g;__int64 length;BIGNUM *pub_key;BIGNUM *priv_key;int flags;BN_MONT_CTX *method_mont_p;BIGNUM *q;BIGNUM *j;unsigned __int8 *seed;int seedlen;BIGNUM *counter;int references;CRYPTO_EX_DATA ex_data;const DH_METHOD *meth;ENGINE *engine;};
struct dirent {__uint64_t d_ino;__uint64_t d_seekoff;__uint16_t d_reclen;__uint16_t d_namlen;__uint8_t d_type;char d_name[1024];};
typedef char *dirpath;
struct diskextent {u_int32_t startblock;u_int32_t blockcount;};
struct disktab {char *d_name;char *d_type;int d_secsize;int d_ntracks;int d_nsectors;int d_ncylinders;int d_rpm;int d_badsectforw;int d_sectoffset;struct disktab::partition d_partitions[8];};
struct disktab::partition {int p_size;__int16 p_bsize;__int16 p_fsize;};
typedef void *dispatch_block_t;
typedef void *dispatch_data_applier_t;
struct dispatch_data_s;
typedef struct dispatch_data_s *dispatch_data_t;
typedef int dispatch_fd_t;
typedef void (__cdecl *dispatch_function_t)(void *);
typedef struct dispatch_group_s *dispatch_group_t;
typedef unsigned __int64 dispatch_io_close_flags_t;
typedef void *dispatch_io_handler_t;
typedef unsigned __int64 dispatch_io_interval_flags_t;
typedef struct dispatch_io_s *dispatch_io_t;
typedef unsigned __int64 dispatch_io_type_t;
typedef union $DB0CF6B582A763FBC7ADB1435806EA74 dispatch_object_t;
typedef __int64 dispatch_once_t;
struct dispatch_queue_attr_s;
typedef struct dispatch_queue_attr_s *dispatch_queue_attr_t;
typedef __int64 dispatch_queue_priority_t;
struct dispatch_queue_s;
typedef struct dispatch_queue_s *dispatch_queue_t;
typedef struct dispatch_semaphore_s *dispatch_semaphore_t;
typedef unsigned __int64 dispatch_source_mach_send_flags_t;
typedef unsigned __int64 dispatch_source_proc_flags_t;
typedef struct dispatch_source_s *dispatch_source_t;
struct dispatch_source_type_s;
typedef const struct dispatch_source_type_s *dispatch_source_type_t;
typedef unsigned __int64 dispatch_source_vnode_flags_t;
typedef uint64_t dispatch_time_t;
typedef struct $979FA3DE6ECCF956231BFC297C4278E6 div_t;
typedef struct $6C5D98EAC624033C396B1DA9760D33A0 dk_discard_t;
typedef struct $03A6CE804D1D2E62AF0690634426EB08 dk_extent_t;
typedef struct $05C6DC85C1F1DBCA1F6881BCC9CC439D dk_firmware_path_t;
typedef struct $457976D3B172FC6C2C90056836B3956E dk_format_capacities_t;
typedef struct $6D6FBD65E5352D7C5B2633444A27C2EA dk_format_capacity_t;
typedef struct $74034741CFA65827A1EC04C7057A4BA2 dk_unmap_t;
struct dl_info {const char *dli_fname;void *dli_fbase;const char *dli_sname;void *dli_saddr;};
typedef struct $FEF862DC5C2F986098A4350401CDFBFD dns_AFSDB_record_t;
typedef struct $EB59F425BEB47ECBA8886A98C22ABD7D dns_HINFO_record_t;
typedef struct $DF1D91DCAB84234D18917BEB10ABC3BE dns_ISDN_record_t;
typedef struct $B32155DE37EA00CA7D015F061033D0DB dns_LOC_record_t;
typedef struct $0D8E21930F8347099053B71EC6295221 dns_MINFO_record_t;
typedef struct $53A0FD50A74451071D4AFBA65ADAEB7D dns_MX_record_t;
typedef struct $A2898260CF48A71D77A1F36A2E3AC7DC dns_RP_record_t;
typedef struct $5D67E6FC771F02F85169EAAED44CFB39 dns_RT_record_t;
typedef struct $1C2A755C38DA6DF2E4E1C52F7C8EAD2D dns_SOA_record_t;
typedef struct $C12C9BDFE67D223D1BA5D023CABB3CBD dns_SRV_record_t;
typedef struct $1D15E1936BEC6B64847025DD7DD9970D dns_TXT_record_t;
typedef struct $EB461EAC719110594EB746F8AD525682 dns_WKS_record_t;
typedef struct $5F22111B9AD44DFDC2D7C3E3FA7C1FF6 dns_X25_record_t;
typedef struct $82604E0BCB50E4D0B690A798AE0B3CDE dns_address_record_t;
typedef struct $F26177398F3106F2DD5FF971AA6CC145 dns_domain_name_record_t;
typedef const struct __dns_handle_private_struct *dns_handle_t;
typedef struct $D0D70EDABC5C86492745B3F9A6B48782 dns_header_t;
typedef struct $DB9FAB3DF43BC43027D23EAB111F29D9 dns_in6_address_record_t;
typedef struct $423B7D96C11CB2986382813780F7655D dns_question_t;
typedef struct $7CC33461F71F95EBEC0407BD799E99C2 dns_raw_resource_record_t;
typedef struct $9F41B8E90BE057B33891A8A6EE681A31 dns_reply_t;
typedef struct $F9A7ED8F42D8CCD77CCEA18A32D3B2AC dns_resource_record_t;
typedef struct _dns_service_discovery_t *dns_service_discovery_ref;
struct dom_binding;
typedef char *domainname;
enum dot3Vendors {dot3VendorAMD = 0x1,dot3VendorIntel = 0x2,dot3VendorNational = 0x4,dot3VendorFujitsu = 0x5,dot3VendorDigital = 0x6,dot3VendorWesternDigital = 0x7,};
typedef double double_t;
struct dqblk {u_int64_t dqb_bhardlimit;u_int64_t dqb_bsoftlimit;u_int64_t dqb_curbytes;u_int32_t dqb_ihardlimit;u_int32_t dqb_isoftlimit;u_int32_t dqb_curinodes;u_int32_t dqb_btime;u_int32_t dqb_itime;u_int32_t dqb_id;u_int32_t dqb_spare[4];};
struct dqfilehdr {u_int32_t dqh_magic;u_int32_t dqh_version;u_int32_t dqh_maxentries;u_int32_t dqh_entrycnt;u_int32_t dqh_flags;u_int32_t dqh_chktime;u_int32_t dqh_btime;u_int32_t dqh_itime;char dqh_string[16];u_int32_t dqh_spare[4];};
typedef struct _dr6 dr6_t;
struct dsa_method {const char *name;DSA_SIG *(__cdecl *dsa_do_sign)(const unsigned __int8 *dgst, int dlen, DSA *dsa);int (__cdecl *dsa_sign_setup)(DSA *dsa, BN_CTX *ctx_in, BIGNUM **kinvp, BIGNUM **rp);int (__cdecl *dsa_do_verify)(const unsigned __int8 *dgst, int dgst_len, DSA_SIG *sig, DSA *dsa);int (__cdecl *dsa_mod_exp)(DSA *dsa, BIGNUM *rr, BIGNUM *a1, BIGNUM *p1, BIGNUM *a2, BIGNUM *p2, BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *in_mont);int (__cdecl *bn_mod_exp)(DSA *dsa, BIGNUM *r, BIGNUM *a, const BIGNUM *p, const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx);int (__cdecl *init)(DSA *dsa);int (__cdecl *finish)(DSA *dsa);int flags;char *app_data;int (__cdecl *dsa_paramgen)(DSA *dsa, int bits, unsigned __int8 *seed, int seed_len, int *counter_ret, unsigned __int64 *h_ret, BN_GENCB *cb);int (__cdecl *dsa_keygen)(DSA *dsa);};
struct dsa_st {int pad;__int64 version;int write_params;BIGNUM *p;BIGNUM *q;BIGNUM *g;BIGNUM *pub_key;BIGNUM *priv_key;BIGNUM *kinv;BIGNUM *r;int flags;BN_MONT_CTX *method_mont_p;int references;CRYPTO_EX_DATA ex_data;const DSA_METHOD *meth;ENGINE *engine;};
struct dso_meth_st {const char *name;int (__cdecl *dso_load)(DSO *dso);int (__cdecl *dso_unload)(DSO *dso);void *(__cdecl *dso_bind_var)(DSO *dso, const char *symname);DSO_FUNC_TYPE (__cdecl *dso_bind_func)(DSO *dso, const char *symname);__int64 (__cdecl *dso_ctrl)(DSO *dso, int cmd, __int64 larg, void *parg);DSO_NAME_CONVERTER_FUNC dso_name_converter;DSO_MERGER_FUNC dso_merger;int (__cdecl *init)(DSO *dso);int (__cdecl *finish)(DSO *dso);};
struct dso_st {DSO_METHOD *meth;STACK *meth_data;int references;int flags;CRYPTO_EX_DATA ex_data;DSO_NAME_CONVERTER_FUNC name_converter;DSO_MERGER_FUNC merger;char *filename;char *loaded_filename;};
union dt_entry {code_desc_t code;data_desc_t data;ldt_desc_t ldt;tss_desc_t task_state;call_gate_t call_gate;trap_gate_t trap_gate;intr_gate_t intr_gate;task_gate_t task_gate;};
typedef union dt_entry dt_entry_t;
struct dtls1_bitmap_st {unsigned __int64 map;unsigned __int64 length;unsigned __int64 max_seq_num;};
struct dtls1_record_data_st {unsigned __int8 *packet;unsigned int packet_length;SSL3_BUFFER rbuf;SSL3_RECORD rrec;};
struct dtls1_retransmit_state {EVP_CIPHER_CTX *enc_write_ctx;const EVP_MD *write_hash;COMP_CTX *compress;SSL_SESSION *session;unsigned __int16 epoch;};
struct dtls1_state_st {unsigned int send_cookie;unsigned __int8 cookie[256];unsigned __int8 rcvd_cookie[256];unsigned int cookie_len;unsigned __int16 r_epoch;unsigned __int16 w_epoch;DTLS1_BITMAP bitmap;DTLS1_BITMAP next_bitmap;unsigned __int16 handshake_write_seq;unsigned __int16 next_handshake_write_seq;unsigned __int16 handshake_read_seq;unsigned __int8 last_write_sequence[8];record_pqueue unprocessed_rcds;record_pqueue processed_rcds;pqueue buffered_messages;pqueue sent_messages;record_pqueue buffered_app_data;unsigned int listen;unsigned int mtu;struct hm_header_st w_msg_hdr;struct hm_header_st r_msg_hdr;struct dtls1_timeout_st timeout;struct timeval next_timeout;unsigned __int16 timeout_duration;unsigned __int8 alert_fragment[2];unsigned int alert_fragment_len;unsigned __int8 handshake_fragment[12];unsigned int handshake_fragment_len;unsigned int retransmitting;unsigned int change_cipher_spec_ok;};
struct dtls1_timeout_st {unsigned int read_timeouts;unsigned int write_timeouts;unsigned int num_alerts;};
struct dyld_cache_accelerator_dof {uint64_t sectionAddress;uint32_t sectionSize;uint32_t imageIndex;};
struct dyld_cache_accelerator_info {uint32_t version;uint32_t imageExtrasCount;uint32_t imagesExtrasOffset;uint32_t bottomUpListOffset;uint32_t dylibTrieOffset;uint32_t dylibTrieSize;uint32_t initializersOffset;uint32_t initializersCount;uint32_t dofSectionsOffset;uint32_t dofSectionsCount;uint32_t reExportListOffset;uint32_t reExportCount;uint32_t depListOffset;uint32_t depListCount;uint32_t rangeTableOffset;uint32_t rangeTableCount;uint64_t dyldSectionAddr;};
struct dyld_cache_accelerator_initializer {uint32_t functionOffset;uint32_t imageIndex;};
struct dyld_cache_image_info {uint64_t address;uint64_t modTime;uint64_t inode;uint32_t pathFileOffset;uint32_t pad;};
struct dyld_cache_image_info_extra {uint64_t exportsTrieAddr;uint64_t weakBindingsAddr;uint32_t exportsTrieSize;uint32_t weakBindingsSize;uint32_t dependentsStartArrayIndex;uint32_t reExportsStartArrayIndex;};
struct dyld_cache_image_text_info {uuid_t uuid;uint64_t loadAddress;uint32_t textSegmentSize;uint32_t pathOffset;};
struct dyld_cache_local_symbols_entry {uint32_t dylibOffset;uint32_t nlistStartIndex;uint32_t nlistCount;};
struct dyld_cache_local_symbols_info {uint32_t nlistOffset;uint32_t nlistCount;uint32_t stringsOffset;uint32_t stringsSize;uint32_t entriesOffset;uint32_t entriesCount;};
struct dyld_cache_mapping_info {uint64_t address;uint64_t size;uint64_t fileOffset;uint32_t maxProt;uint32_t initProt;};
struct dyld_cache_range_entry {uint64_t startAddress;uint32_t size;uint32_t imageIndex;};
struct dyld_cache_slide_info {uint32_t version;uint32_t toc_offset;uint32_t toc_count;uint32_t entries_offset;uint32_t entries_count;uint32_t entries_size;};
struct dyld_cache_slide_info2 {uint32_t version;uint32_t page_size;uint32_t page_starts_offset;uint32_t page_starts_count;uint32_t page_extras_offset;uint32_t page_extras_count;uint64_t delta_mask;uint64_t value_add;};
struct dyld_cache_slide_info3 {uint32_t version;uint32_t page_size;uint32_t page_starts_count;uint32_t padding;uint64_t auth_value_add;};
struct dyld_info_command {uint32_t cmd;uint32_t cmdsize;uint32_t rebase_off;uint32_t rebase_size;uint32_t bind_off;uint32_t bind_size;uint32_t weak_bind_off;uint32_t weak_bind_size;uint32_t lazy_bind_off;uint32_t lazy_bind_size;uint32_t export_off;uint32_t export_size;};
struct dylib {union lc_str name;uint32_t timestamp;uint32_t current_version;uint32_t compatibility_version;};
struct dylib_command {uint32_t cmd;uint32_t cmdsize;struct dylib dylib;};
struct dylib_module {uint32_t module_name;uint32_t iextdefsym;uint32_t nextdefsym;uint32_t irefsym;uint32_t nrefsym;uint32_t ilocalsym;uint32_t nlocalsym;uint32_t iextrel;uint32_t nextrel;uint32_t iinit_iterm;uint32_t ninit_nterm;uint32_t objc_module_info_addr;uint32_t objc_module_info_size;};
struct dylib_module_64 {uint32_t module_name;uint32_t iextdefsym;uint32_t nextdefsym;uint32_t irefsym;uint32_t nrefsym;uint32_t ilocalsym;uint32_t nlocalsym;uint32_t iextrel;uint32_t nextrel;uint32_t iinit_iterm;uint32_t ninit_nterm;uint32_t objc_module_info_size;uint64_t objc_module_info_addr;};
struct dylib_reference {unsigned __int32 isym : 24;unsigned __int32 flags : 8;};
struct dylib_table_of_contents {uint32_t symbol_index;uint32_t module_index;};
struct dylinker_command {uint32_t cmd;uint32_t cmdsize;union lc_str name;};
typedef void (__cdecl *dyn_MEM_free_cb)(void *);
typedef void *(__cdecl *dyn_MEM_malloc_cb)(size_t);
typedef void *(__cdecl *dyn_MEM_realloc_cb)(void *, size_t);
typedef struct CRYPTO_dynlock_value *(__cdecl *dyn_dynlock_create_cb)(const char *, int);
typedef void (__cdecl *dyn_dynlock_destroy_cb)(struct CRYPTO_dynlock_value *, const char *, int);
typedef void (__cdecl *dyn_dynlock_lock_cb)(int, struct CRYPTO_dynlock_value *, const char *, int);
typedef int (__cdecl *dyn_lock_add_lock_cb)(int *, int, int, const char *, int);
typedef void (__cdecl *dyn_lock_locking_cb)(int, int, const char *, int);
typedef struct st_dynamic_LOCK_fns dynamic_LOCK_fns;
typedef struct st_dynamic_MEM_fns dynamic_MEM_fns;
typedef int (__cdecl *dynamic_bind_engine)(ENGINE *e, const char *id, const dynamic_fns *fns);
typedef struct st_dynamic_fns dynamic_fns;
typedef unsigned __int64 (__cdecl *dynamic_v_check_fn)(unsigned __int64 ossl_version);
struct dysymtab_command {uint32_t cmd;uint32_t cmdsize;uint32_t ilocalsym;uint32_t nlocalsym;uint32_t iextdefsym;uint32_t nextdefsym;uint32_t iundefsym;uint32_t nundefsym;uint32_t tocoff;uint32_t ntoc;uint32_t modtaboff;uint32_t nmodtab;uint32_t extrefsymoff;uint32_t nextrefsyms;uint32_t indirectsymoff;uint32_t nindirectsyms;uint32_t extreloff;uint32_t nextrel;uint32_t locreloff;uint32_t nlocrel;};
struct ec_group_st;
struct ec_key_st;
struct ec_method_st;
struct ec_point_st;
struct ecdh_method;
struct ecdsa_method;
struct ecpk_parameters_st;
struct editline;
typedef void (__cdecl *elementDeclSAXFunc)(void *ctx, const xmlChar *name, int type, xmlElementContentPtr content);
typedef mach_vm_offset_t *emulation_vector_t;
struct encryption_info_command {uint32_t cmd;uint32_t cmdsize;uint32_t cryptoff;uint32_t cryptsize;uint32_t cryptid;};
typedef void (__cdecl *endDocumentSAXFunc)(void *ctx);
typedef void (__cdecl *endElementNsSAX2Func)(void *ctx, const xmlChar *localname, const xmlChar *prefix, const xmlChar *URI);
typedef void (__cdecl *endElementSAXFunc)(void *ctx, const xmlChar *name);
struct engine_st;
typedef struct enginetime_struct enginetime;
struct enginetime_struct {u_char *engineID;u_int engineID_len;u_int engineTime;u_int engineBoot;time_t lastReceivedEngineTime;u_int authenticatedFlag;struct enginetime_struct *next;};
typedef void (__cdecl *entityDeclSAXFunc)(void *ctx, const xmlChar *name, int type, const xmlChar *publicId, const xmlChar *systemId, xmlChar *content);
struct entry {TERMTYPE tterm;unsigned int nuses;struct entry::$2AA5CCCB9D787A2137C075D7F71DDB10 uses[32];int ncrosslinks;struct entry *crosslinks[16];__int64 cstart;__int64 cend;__int64 startline;struct entry *next;struct entry *last;};
struct entry::$2AA5CCCB9D787A2137C075D7F71DDB10 {char *name;struct entry *link;__int64 line;};
struct enum_list {struct enum_list *next;int value;char *label;};
struct env_md_ctx_st {const EVP_MD *digest;ENGINE *engine;unsigned __int64 flags;void *md_data;};
struct env_md_st {int type;int pkey_type;int md_size;unsigned __int64 flags;int (__cdecl *init)(EVP_MD_CTX *ctx);int (__cdecl *update)(EVP_MD_CTX *ctx, const void *data, size_t count);int (__cdecl *final)(EVP_MD_CTX *ctx, unsigned __int8 *md);int (__cdecl *copy)(EVP_MD_CTX *to, const EVP_MD_CTX *from);int (__cdecl *cleanup)(EVP_MD_CTX *ctx);int (__cdecl *sign)(int type, const unsigned __int8 *m, unsigned int m_length, unsigned __int8 *sigret, unsigned int *siglen, void *key);int (__cdecl *verify)(int type, const unsigned __int8 *m, unsigned int m_length, const unsigned __int8 *sigbuf, unsigned int siglen, void *key);int required_pkey_type[5];int block_size;int ctx_size;};
typedef struct eventreq *er_t;
union err_code {struct err_code::err_code_normal normal;struct err_code::err_code_pgfault pgfault;};
struct err_code::err_code_normal {unsigned __int32 ext : 1;unsigned __int32 tbl : 2;unsigned __int32 index : 13;unsigned __int32 : 16;};
struct err_code::err_code_pgfault {unsigned __int32 prot : 1;unsigned __int32 wrtflt : 1;unsigned __int32 user : 1;unsigned __int32 : 29;};
typedef union err_code err_code_t;
struct err_state_st {unsigned __int64 pid;int err_flags[16];unsigned __int64 err_buffer[16];char *err_data[16];int err_data_flags[16];const char *err_file[16];int err_line[16];int top;int bottom;};
typedef __int64 errcode_t;
typedef int errno_t;
typedef void (*errorSAXFunc)(void *ctx, const char *msg, ...);
struct error_table {const char *const *const messages;int32_t base;int32_t count;};
struct esp {u_int32_t esp_spi;};
struct esptail {u_int8_t esp_padlen;u_int8_t esp_nxt;};
struct ether_addr {u_char octet[6];};
struct ether_arp {struct arphdr ea_hdr;u_char arp_sha[6];u_char arp_spa[4];u_char arp_tha[6];u_char arp_tpa[4];};
struct ether_header {u_char ether_dhost[6];u_char ether_shost[6];u_short ether_type;};
struct eventreq {int er_type;int er_handle;void *er_data;int er_rcnt;int er_wcnt;int er_ecnt;int er_eventbits;};
struct evp_Encode_Ctx_st {int num;int length;unsigned __int8 enc_data[80];int line_num;int expect_nl;};
struct evp_cipher_ctx_st {const EVP_CIPHER *cipher;ENGINE *engine;int encrypt;int buf_len;unsigned __int8 oiv[16];unsigned __int8 iv[16];unsigned __int8 buf[32];int num;void *app_data;int key_len;unsigned __int64 flags;void *cipher_data;int final_used;int block_mask;unsigned __int8 final[32];};
struct evp_cipher_info_st {const EVP_CIPHER *cipher;unsigned __int8 iv[16];};
struct evp_cipher_st {int nid;int block_size;int key_len;int iv_len;unsigned __int64 flags;int (__cdecl *init)(EVP_CIPHER_CTX *ctx, const unsigned __int8 *key, const unsigned __int8 *iv, int enc);int (__cdecl *do_cipher)(EVP_CIPHER_CTX *ctx, unsigned __int8 *out, const unsigned __int8 *in, unsigned int inl);int (__cdecl *cleanup)(EVP_CIPHER_CTX *);int ctx_size;int (__cdecl *set_asn1_parameters)(EVP_CIPHER_CTX *, ASN1_TYPE *);int (__cdecl *get_asn1_parameters)(EVP_CIPHER_CTX *, ASN1_TYPE *);int (__cdecl *ctrl)(EVP_CIPHER_CTX *, int type, int arg, void *ptr);void *app_data;};
struct evp_pkey_st {int type;int save_type;int references;union evp_pkey_st::$0C617F08CD1CBFCEA8637CF9C21CDE81 pkey;int save_parameters;STACK *attributes;};
union evp_pkey_st::$0C617F08CD1CBFCEA8637CF9C21CDE81 {char *ptr;struct rsa_st *rsa;struct dsa_st *dsa;struct dh_st *dh;struct ec_key_st *ec;};
typedef int __cdecl evp_sign_method(int type, const unsigned __int8 *m, unsigned int m_length, unsigned __int8 *sigret, unsigned int *siglen, void *key);
typedef int __cdecl evp_verify_method(int type, const unsigned __int8 *m, unsigned int m_length, const unsigned __int8 *sigbuf, unsigned int siglen, void *key);
struct except_frame {err_code_t err;unsigned int eip;sel_t cs;unsigned __int32 : 0;unsigned int eflags;unsigned int esp;struct {unsigned __int16 rpl : 2;unsigned __int16 ti : 1;unsigned __int16 index : 13;} ss;unsigned __int32 : 0;unsigned __int16 v_es;unsigned __int32 : 0;unsigned __int16 v_ds;unsigned __int32 : 0;unsigned __int16 v_fs;unsigned __int32 : 0;unsigned __int16 v_gs;unsigned __int32 : 0;};
typedef struct except_frame except_frame_t;
typedef exception_behavior_t *exception_behavior_array_t;
typedef int exception_behavior_t;
typedef exception_data_type_t *exception_data_t;
typedef integer_t exception_data_type_t;
typedef thread_state_flavor_t *exception_flavor_array_t;
typedef exception_handler_t *exception_handler_array_t;
typedef mach_port_t exception_handler_t;
typedef exception_mask_t *exception_mask_array_t;
typedef unsigned int exception_mask_t;
typedef exception_handler_array_t exception_port_arrary_t;
typedef mach_port_t *exception_port_array_t;
typedef exception_handler_t exception_port_t;
typedef int exception_type_t;
struct exportnode {dirpath ex_dir;groups ex_groups;exports ex_next;};
typedef struct exportnode *exports;
typedef struct diskextent extentrecord[8];
struct extern_file {struct extern_file::$94A32CBB0D158E1A8624A2DC03EBA897 f_list;__int16 f_flag;__int16 f_type;__int16 f_count;__int16 f_msgcount;kauth_cred_t f_cred;void *f_ops;off_t f_offset;caddr_t f_data;};
struct extern_file::$94A32CBB0D158E1A8624A2DC03EBA897 {struct extern_file *le_next;struct extern_file **le_prev;};
struct extern_proc {union extern_proc::$27B38CA2FABD237895D38B0302C8FC9B p_un;struct vmspace *p_vmspace;struct sigacts *p_sigacts;int p_flag;char p_stat;pid_t p_pid;pid_t p_oppid;int p_dupfd;caddr_t user_stack;void *exit_thread;int p_debugger;boolean_t sigwait;u_int p_estcpu;int p_cpticks;fixpt_t p_pctcpu;void *p_wchan;char *p_wmesg;u_int p_swtime;u_int p_slptime;struct itimerval p_realtimer;struct timeval p_rtime;u_quad_t p_uticks;u_quad_t p_sticks;u_quad_t p_iticks;int p_traceflag;struct vnode *p_tracep;int p_siglist;struct vnode *p_textvp;int p_holdcnt;sigset_t p_sigmask;sigset_t p_sigignore;sigset_t p_sigcatch;u_char p_priority;u_char p_usrpri;char p_nice;char p_comm[17];struct pgrp *p_pgrp;struct user *p_addr;u_short p_xstat;u_short p_acflag;struct rusage *p_ru;};
union extern_proc::$27B38CA2FABD237895D38B0302C8FC9B {struct extern_proc::$27B38CA2FABD237895D38B0302C8FC9B::$A845D8EFA010EC0E04B626533D96DFA0 p_st1;struct timeval __p_starttime;};
struct extern_proc::$27B38CA2FABD237895D38B0302C8FC9B::$A845D8EFA010EC0E04B626533D96DFA0 {struct proc *__p_forw;struct proc *__p_back;};
typedef void (__cdecl *externalSubsetSAXFunc)(void *ctx, const xmlChar *name, const xmlChar *ExternalID, const xmlChar *SystemID);
struct fat_arch {cpu_type_t cputype;cpu_subtype_t cpusubtype;uint32_t offset;uint32_t size;uint32_t align;};
struct fat_header {uint32_t magic;uint32_t nfat_arch;};
typedef void (*fatalErrorSAXFunc)(void *ctx, const char *msg, ...);
struct fbootstraptransfer {off_t fbt_offset;size_t fbt_length;void *fbt_buffer;};
typedef struct fbootstraptransfer fbootstraptransfer_t;
typedef __int32_t fd_mask;
struct fd_set {__int32_t fds_bits[32];};
typedef struct $A76923D44FC3AA9C7AC0A016BD3320E6 fenv_t;
typedef unsigned __int16 fexcept_t;
enum ffi_abi {FFI_FIRST_ABI = 0x0,FFI_SYSV = 0x1,FFI_UNIX64 = 0x2,FFI_DEFAULT_ABI = 0x2,FFI_LAST_ABI = 0x3,};
typedef unsigned __int64 ffi_arg;
struct ffi_cif {ffi_abi abi;unsigned int nargs;ffi_type **arg_types;ffi_type *rtype;unsigned int bytes;unsigned int flags;};
struct ffi_closure {char tramp[24];ffi_cif *cif;void (__cdecl *fun)(ffi_cif *, void *, void **, void *);void *user_data;};
typedef union $F2859707886ADAFD301FD24E7C665704 ffi_raw;
struct ffi_raw_closure {char tramp[24];ffi_cif *cif;void (__cdecl *translate_args)(ffi_cif *, void *, void **, void *);void *this_closure;void (__cdecl *fun)(ffi_cif *, void *, ffi_raw *, void *);void *user_data;};
typedef signed __int64 ffi_sarg;
enum ffi_status {FFI_OK = 0x0,FFI_BAD_TYPEDEF = 0x1,FFI_BAD_ABI = 0x2,};
typedef struct _ffi_type ffi_type;
struct fhandle {int fh_len;unsigned __int8 fh_data[128];};
typedef struct fhandle fhandle_t;
struct fhstatus {u_int fhs_status;union fhstatus::$5A86E21E7BD06EF982D138486E7C27D0 fhstatus_u;};
union fhstatus::$5A86E21E7BD06EF982D138486E7C27D0 {fhandle fhs_fhandle;};
struct fieldnode {unsigned __int16 status;__int16 rows;__int16 cols;__int16 frow;__int16 fcol;int drows;int dcols;int maxgrow;int nrow;__int16 nbuf;__int16 just;__int16 page;__int16 index;int pad;chtype fore;chtype back;Field_Options opts;struct fieldnode *snext;struct fieldnode *sprev;struct fieldnode *link;struct formnode *form;struct typenode *type;void *arg;FIELD_CELL *buf;void *usrptr;};
struct file;
typedef struct file *file_t;
struct fileglob;
typedef enum $D4934026ABEEF2822D8F739CC8F783CF filesec_property_t;
typedef struct _filesec *filesec_t;
typedef u_int32_t fixpt_t;
typedef float float_t;
struct flock {off_t l_start;off_t l_len;pid_t l_pid;__int16 l_type;__int16 l_whence;};
struct formnode {unsigned __int16 status;__int16 rows;__int16 cols;int currow;int curcol;int toprow;int begincol;__int16 maxfield;__int16 maxpage;__int16 curpage;Form_Options opts;WINDOW *win;WINDOW *sub;WINDOW *w;FIELD **field;FIELD *current;_PAGE *page;void *usrptr;void (__cdecl *forminit)(struct formnode *);void (__cdecl *formterm)(struct formnode *);void (__cdecl *fieldinit)(struct formnode *);void (__cdecl *fieldterm)(struct formnode *);};
struct fp_control {unsigned __int16 invalid : 1;unsigned __int16 denorm : 1;unsigned __int16 zdiv : 1;unsigned __int16 ovrfl : 1;unsigned __int16 undfl : 1;unsigned __int16 precis : 1;unsigned __int16 : 2;unsigned __int16 pc : 2;unsigned __int16 rc : 2;unsigned __int16 : 1;unsigned __int16 : 3;};
typedef struct fp_control fp_control_t;
struct fp_data_reg {unsigned __int16 mant;unsigned __int16 mant1 : 16;unsigned __int16 mant2 : 16;unsigned __int16 mant3 : 16;unsigned __int16 exp : 15;unsigned __int16 sign : 1;};
typedef struct fp_data_reg fp_data_reg_t;
struct fp_env {fp_control_t control;unsigned __int16 : 16;struct {unsigned __int16 invalid : 1;unsigned __int16 denorm : 1;unsigned __int16 zdiv : 1;unsigned __int16 ovrfl : 1;unsigned __int16 undfl : 1;unsigned __int16 precis : 1;unsigned __int16 stkflt : 1;unsigned __int16 errsumm : 1;unsigned __int16 c0 : 1;unsigned __int16 c1 : 1;unsigned __int16 c2 : 1;unsigned __int16 tos : 3;unsigned __int16 c3 : 1;unsigned __int16 busy : 1;} status;unsigned __int16 : 16;struct {unsigned __int16 tag0 : 2;unsigned __int16 tag1 : 2;unsigned __int16 tag2 : 2;unsigned __int16 tag3 : 2;unsigned __int16 tag4 : 2;unsigned __int16 tag5 : 2;unsigned __int16 tag6 : 2;unsigned __int16 tag7 : 2;} tag;unsigned __int16 : 16;unsigned int ip;struct {unsigned __int16 rpl : 2;unsigned __int16 ti : 1;unsigned __int16 index : 13;} cs;unsigned __int16 opcode;unsigned int dp;sel_t ds;unsigned __int16 : 16;};
typedef struct fp_env fp_env_t;
struct fp_stack {fp_data_reg_t ST[8];};
typedef struct fp_stack fp_stack_t;
struct fp_state {fp_env_t fp_environ;fp_stack_t fp_stack;};
typedef struct fp_state fp_state_t;
struct fp_status {unsigned __int16 invalid : 1;unsigned __int16 denorm : 1;unsigned __int16 zdiv : 1;unsigned __int16 ovrfl : 1;unsigned __int16 undfl : 1;unsigned __int16 precis : 1;unsigned __int16 stkflt : 1;unsigned __int16 errsumm : 1;unsigned __int16 c0 : 1;unsigned __int16 c1 : 1;unsigned __int16 c2 : 1;unsigned __int16 tos : 3;unsigned __int16 c3 : 1;unsigned __int16 busy : 1;};
typedef struct fp_status fp_status_t;
struct fp_tag {unsigned __int16 tag0 : 2;unsigned __int16 tag1 : 2;unsigned __int16 tag2 : 2;unsigned __int16 tag3 : 2;unsigned __int16 tag4 : 2;unsigned __int16 tag5 : 2;unsigned __int16 tag6 : 2;unsigned __int16 tag7 : 2;};
typedef struct fp_tag fp_tag_t;
typedef __darwin_off_t fpos_t;
typedef void (__cdecl *free_func)(voidpf opaque, voidpf address);
struct __attribute__((packed)) frmrinfo {u_int8_t frmr_rej_pdu0;u_int8_t frmr_rej_pdu1;u_int8_t frmr_control;u_int8_t frmr_control_ext;u_int8_t frmr_cause;};
typedef __darwin_fsblkcnt_t fsblkcnt_t;
typedef __darwin_fsfilcnt_t fsfilcnt_t;
typedef u_int32_t fsfile_type_t;
enum fsh_access {fsa_NONE = 0x0,fsa_R = 0x1,fsa_W = 0x2,fsa_RW = 0x3,};
enum fsh_mode {fsm_DN = 0x0,fsm_DR = 0x1,fsm_DW = 0x2,fsm_DRW = 0x3,};
struct fsid {int32_t val[2];};
typedef struct fsid fsid_t;
struct fsignatures {off_t fs_file_start;void *fs_blob_start;size_t fs_blob_size;};
typedef struct fsignatures fsignatures_t;
struct fsobj_id {u_int32_t fid_objno;u_int32_t fid_generation;};
typedef struct fsobj_id fsobj_id_t;
typedef u_int32_t fsobj_tag_t;
typedef u_int32_t fsobj_type_t;
struct fssearchblock {struct attrlist *returnattrs;void *returnbuffer;size_t returnbuffersize;u_long maxmatches;struct timeval timelimit;void *searchparams1;size_t sizeofsearchparams1;void *searchparams2;size_t sizeofsearchparams2;struct attrlist searchattrs;};
struct fstab {char *fs_spec;char *fs_file;char *fs_vfstype;char *fs_mntops;char *fs_type;int fs_freq;int fs_passno;};
struct fstore {unsigned int fst_flags;int fst_posmode;off_t fst_offset;off_t fst_length;off_t fst_bytesalloc;};
typedef struct fstore fstore_t;
typedef u_int32_t fsvolid_t;
typedef void (__cdecl *ftpDataCallback)(void *userData, const char *data, int len);
typedef void (__cdecl *ftpListCallback)(void *userData, const char *filename, const char *attrib, const char *owner, const char *group, unsigned __int64 size, int links, int year, const char *month, int day, int hour, int minute);
struct fvmfile_command {uint32_t cmd;uint32_t cmdsize;union lc_str name;uint32_t header_addr;};
struct fvmlib {union lc_str name;uint32_t minor_version;uint32_t header_addr;};
struct fvmlib_command {uint32_t cmd;uint32_t cmdsize;struct fvmlib fvmlib;};
union gdt_entry {code_desc_t code;data_desc_t data;ldt_desc_t ldt;call_gate_t call_gate;task_gate_t task_gate;tss_desc_t task_state;};
typedef union gdt_entry gdt_entry_t;
typedef gdt_entry_t gdt_t;
union gen_addr {struct in_addr ga_in;};
typedef xmlEntityPtr (__cdecl *getEntitySAXFunc)(void *ctx, const xmlChar *name);
typedef xmlEntityPtr (__cdecl *getParameterEntitySAXFunc)(void *ctx, const xmlChar *name);
struct getquota_args {char *gqa_pathp;int gqa_uid;};
struct getquota_rslt {gqr_status status;union getquota_rslt::$93D720EECC4BDA120269F9F7BB40A95B getquota_rslt_u;};
union getquota_rslt::$93D720EECC4BDA120269F9F7BB40A95B {rquota gqr_rquota;};
typedef __darwin_gid_t gid_t;
typedef struct $2852C95088D0304BB11C1621105E366D glob_t;
struct gmon_data {uint32_t type;uint32_t size;};
typedef struct gmon_data gmon_data_t;
struct gmonhdr {uint32_t lpc;uint32_t hpc;uint32_t ncnt;int32_t version;int32_t profrate;int32_t spare[3];};
struct gmonhdr_64 {uint64_t lpc;uint64_t hpc;uint32_t ncnt;int32_t version;int32_t profrate;int32_t spare[3];};
typedef struct gmonhdr_64 gmonhdr_t;
struct gmonparam {int state;u_short *kcount;u_long kcountsize;u_short *froms;u_long fromssize;tostruct_t *tos;u_long tossize;__int64 tolimit;u_long lowpc;u_long highpc;u_long textsize;u_long hashfraction;};
enum gqr_status {Q_OK = 0x1,Q_NOQUOTA = 0x2,Q_EPERM = 0x3,};
struct group {char *gr_name;char *gr_passwd;gid_t gr_gid;char **gr_mem;};
struct group_req {uint32_t gr_interface;struct sockaddr_storage gr_group;};
struct group_source_req {uint32_t gsr_interface;struct sockaddr_storage gsr_group;struct sockaddr_storage gsr_source;};
struct groupnode {name gr_name;groups gr_next;};
typedef struct groupnode *groups;
typedef struct gss_OID_desc_struct *gss_OID;
typedef struct gss_OID_desc_struct gss_OID_desc;
struct gss_OID_desc_struct {OM_uint32 length;void *elements;};
typedef struct gss_OID_set_desc_struct *gss_OID_set;
typedef struct gss_OID_set_desc_struct gss_OID_set_desc;
struct gss_OID_set_desc_struct {size_t count;gss_OID elements;};
typedef struct gss_buffer_desc_struct gss_buffer_desc;
struct gss_buffer_desc_struct {size_t length;void *value;};
typedef struct gss_buffer_desc_struct *gss_buffer_t;
struct gss_channel_bindings_struct {OM_uint32 initiator_addrtype;gss_buffer_desc initiator_address;OM_uint32 acceptor_addrtype;gss_buffer_desc acceptor_address;gss_buffer_desc application_data;};
typedef struct gss_channel_bindings_struct *gss_channel_bindings_t;
struct gss_cred_id_struct;
typedef struct gss_cred_id_struct *gss_cred_id_t;
typedef int gss_cred_usage_t;
struct gss_ctx_id_struct;
typedef struct gss_ctx_id_struct *gss_ctx_id_t;
typedef int32_t gss_int32;
struct gss_krb5_cfx_keydata {OM_uint32 have_acceptor_subkey;gss_krb5_lucid_key_t ctx_key;gss_krb5_lucid_key_t acceptor_subkey;};
typedef struct gss_krb5_cfx_keydata gss_krb5_cfx_keydata_t;
struct gss_krb5_lucid_context_v1 {OM_uint32 version;OM_uint32 initiate;OM_uint32 endtime;gss_uint64 send_seq;gss_uint64 recv_seq;OM_uint32 protocol;gss_krb5_rfc1964_keydata_t rfc1964_kd;gss_krb5_cfx_keydata_t cfx_kd;};
typedef struct gss_krb5_lucid_context_v1 gss_krb5_lucid_context_v1_t;
struct gss_krb5_lucid_context_version {OM_uint32 version;};
typedef struct gss_krb5_lucid_context_version gss_krb5_lucid_context_version_t;
struct gss_krb5_lucid_key {OM_uint32 type;OM_uint32 length;void *data;};
typedef struct gss_krb5_lucid_key gss_krb5_lucid_key_t;
struct gss_krb5_rfc1964_keydata {OM_uint32 sign_alg;OM_uint32 seal_alg;gss_krb5_lucid_key_t ctx_key;};
typedef struct gss_krb5_rfc1964_keydata gss_krb5_rfc1964_keydata_t;
struct gss_name_struct;
typedef struct gss_name_struct *gss_name_t;
typedef OM_uint32 gss_qop_t;
typedef uint32_t gss_uint32;
typedef uint64_t gss_uint64;
typedef struct $9196AF323BDCF3C1DC54CF7CF3A0084E guid_t;
typedef voidp gzFile;
typedef struct gz_header_s gz_header;
struct gz_header_s {int text;uLong time;int xflags;int os;Bytef *extra;uInt extra_len;uInt extra_max;Bytef *name;uInt name_max;Bytef *comment;uInt comm_max;int hcrc;int done;};
typedef gz_header *gz_headerp;
typedef int (__cdecl *hasExternalSubsetSAXFunc)(void *ctx);
typedef int (__cdecl *hasInternalSubsetSAXFunc)(void *ctx);
struct hash_info_bucket {natural_t hib_count;};
typedef hash_info_bucket_t *hash_info_bucket_array_t;
typedef struct hash_info_bucket hash_info_bucket_t;
typedef struct _node hash_node;
typedef struct $6EC1A26EC289C981C6C6C260C40F87D5 hash_table;
struct help_index_s {int search;cups_array_t *nodes;cups_array_t *sorted;};
typedef struct help_index_s help_index_t;
struct help_node_s {char *filename;char *section;char *anchor;char *text;cups_array_t *words;time_t mtime;off_t offset;size_t length;int score;};
typedef struct help_node_s help_node_t;
struct help_word_s {int count;char *text;};
typedef struct help_word_s help_word_t;
struct hfs_mount_args {char *fspec;uid_t hfs_uid;gid_t hfs_gid;mode_t hfs_mask;u_int32_t hfs_encoding;struct timezone hfs_timezone;int flags;int journal_tbuffer_size;int journal_flags;int journal_disable;};
typedef void *histdata_t;
struct histeventW {int num;const wchar_t *str;};
struct history;
struct historyW;
typedef struct hm_fragment_st hm_fragment;
struct hm_fragment_st {struct hm_header_st msg_header;unsigned __int8 *fragment;unsigned __int8 *reassembly;};
struct hm_header_st {unsigned __int8 type;unsigned __int64 msg_len;unsigned __int16 seq;unsigned __int64 frag_off;unsigned __int64 frag_len;unsigned int is_ccs;struct dtls1_retransmit_state saved_retransmit_state;};
struct hmac_ctx_st {const EVP_MD *md;EVP_MD_CTX md_ctx;EVP_MD_CTX i_ctx;EVP_MD_CTX o_ctx;unsigned int key_length;unsigned __int8 key[128];};
struct host_basic_info {integer_t max_cpus;integer_t avail_cpus;natural_t memory_size;cpu_type_t cpu_type;cpu_subtype_t cpu_subtype;cpu_threadtype_t cpu_threadtype;integer_t physical_cpu;integer_t physical_cpu_max;integer_t logical_cpu;integer_t logical_cpu_max;uint64_t max_mem;};
typedef struct host_basic_info host_basic_info_data_t;
typedef struct host_basic_info *host_basic_info_t;
struct host_cpu_load_info {natural_t cpu_ticks[4];};
typedef struct host_cpu_load_info host_cpu_load_info_data_t;
typedef struct host_cpu_load_info *host_cpu_load_info_t;
typedef integer_t host_flavor_t;
struct host_info {char name[128];char addr[128];struct sockaddr_gen *sin;struct t_unitdata *unit;struct request_info *request;};
typedef integer_t *host_info64_t;
typedef integer_t host_info_data_t[1024];
typedef integer_t *host_info_t;
struct host_load_info {integer_t avenrun[3];integer_t mach_factor[3];};
typedef struct host_load_info host_load_info_data_t;
typedef struct host_load_info *host_load_info_t;
typedef host_t host_name_port_t;
typedef host_t host_name_t;
struct host_priority_info {integer_t kernel_priority;integer_t system_priority;integer_t server_priority;integer_t user_priority;integer_t depress_priority;integer_t idle_priority;integer_t minimum_priority;integer_t maximum_priority;};
typedef struct host_priority_info host_priority_info_data_t;
typedef struct host_priority_info *host_priority_info_t;
typedef mach_port_t host_priv_t;
struct host_sched_info {integer_t min_timeout;integer_t min_quantum;};
typedef struct host_sched_info host_sched_info_data_t;
typedef struct host_sched_info *host_sched_info_t;
typedef mach_port_t host_security_t;
typedef mach_port_t host_t;
struct hostent {char *h_name;char **h_aliases;int h_addrtype;int h_length;char **h_addr_list;};
typedef xmlDocPtr htmlDocPtr;
typedef struct _htmlElemDesc htmlElemDesc;
typedef htmlElemDesc *htmlElemDescPtr;
typedef struct _htmlEntityDesc htmlEntityDesc;
typedef htmlEntityDesc *htmlEntityDescPtr;
typedef xmlNodePtr htmlNodePtr;
typedef xmlParserCtxt htmlParserCtxt;
typedef xmlParserCtxtPtr htmlParserCtxtPtr;
typedef xmlParserInput htmlParserInput;
typedef xmlParserInputPtr htmlParserInputPtr;
typedef xmlParserNodeInfo htmlParserNodeInfo;
typedef enum $44336BB59F93F7B3E282D9E42617278E htmlParserOption;
typedef xmlSAXHandler htmlSAXHandler;
typedef xmlSAXHandlerPtr htmlSAXHandlerPtr;
typedef enum $F022A16E3DDDADD4F8D0A3446DF412CC htmlStatus;
typedef union _http_addr_u http_addr_t;
struct http_addrlist_s {struct http_addrlist_s *next;http_addr_t addr;};
typedef struct http_addrlist_s http_addrlist_t;
enum http_auth_e {HTTP_AUTH_NONE = 0x0,HTTP_AUTH_BASIC = 0x1,HTTP_AUTH_MD5 = 0x2,HTTP_AUTH_MD5_SESS = 0x3,HTTP_AUTH_MD5_INT = 0x4,HTTP_AUTH_MD5_SESS_INT = 0x5,HTTP_AUTH_NEGOTIATE = 0x6,};
typedef enum http_auth_e http_auth_t;
struct http_credential_s {void *data;size_t datalen;};
typedef struct http_credential_s http_credential_t;
enum http_encoding_e {HTTP_ENCODE_LENGTH = 0x0,HTTP_ENCODE_CHUNKED = 0x1,HTTP_ENCODE_FIELDS = 0x2,};
typedef enum http_encoding_e http_encoding_t;
enum http_encryption_e {HTTP_ENCRYPT_IF_REQUESTED = 0x0,HTTP_ENCRYPT_NEVER = 0x1,HTTP_ENCRYPT_REQUIRED = 0x2,HTTP_ENCRYPT_ALWAYS = 0x3,};
typedef enum http_encryption_e http_encryption_t;
enum http_field_e {HTTP_FIELD_UNKNOWN = 0xFFFFFFFF,HTTP_FIELD_ACCEPT_LANGUAGE = 0x0,HTTP_FIELD_ACCEPT_RANGES = 0x1,HTTP_FIELD_AUTHORIZATION = 0x2,HTTP_FIELD_CONNECTION = 0x3,HTTP_FIELD_CONTENT_ENCODING = 0x4,HTTP_FIELD_CONTENT_LANGUAGE = 0x5,HTTP_FIELD_CONTENT_LENGTH = 0x6,HTTP_FIELD_CONTENT_LOCATION = 0x7,HTTP_FIELD_CONTENT_MD5 = 0x8,HTTP_FIELD_CONTENT_RANGE = 0x9,HTTP_FIELD_CONTENT_TYPE = 0xA,HTTP_FIELD_CONTENT_VERSION = 0xB,HTTP_FIELD_DATE = 0xC,HTTP_FIELD_HOST = 0xD,HTTP_FIELD_IF_MODIFIED_SINCE = 0xE,HTTP_FIELD_IF_UNMODIFIED_SINCE = 0xF,HTTP_FIELD_KEEP_ALIVE = 0x10,HTTP_FIELD_LAST_MODIFIED = 0x11,HTTP_FIELD_LINK = 0x12,HTTP_FIELD_LOCATION = 0x13,HTTP_FIELD_RANGE = 0x14,HTTP_FIELD_REFERER = 0x15,HTTP_FIELD_RETRY_AFTER = 0x16,HTTP_FIELD_TRANSFER_ENCODING = 0x17,HTTP_FIELD_UPGRADE = 0x18,HTTP_FIELD_USER_AGENT = 0x19,HTTP_FIELD_WWW_AUTHENTICATE = 0x1A,HTTP_FIELD_MAX = 0x1B,};
typedef enum http_field_e http_field_t;
enum http_keepalive_e {HTTP_KEEPALIVE_OFF = 0x0,HTTP_KEEPALIVE_ON = 0x1,};
typedef enum http_keepalive_e http_keepalive_t;
enum http_state_e {HTTP_WAITING = 0x0,HTTP_OPTIONS = 0x1,HTTP_GET = 0x2,HTTP_GET_SEND = 0x3,HTTP_HEAD = 0x4,HTTP_POST = 0x5,HTTP_POST_RECV = 0x6,HTTP_POST_SEND = 0x7,HTTP_PUT = 0x8,HTTP_PUT_RECV = 0x9,HTTP_DELETE = 0xA,HTTP_TRACE = 0xB,HTTP_CLOSE = 0xC,HTTP_STATUS = 0xD,};
typedef enum http_state_e http_state_t;
enum http_status_e {HTTP_ERROR = 0xFFFFFFFF,HTTP_CONTINUE = 0x64,HTTP_SWITCHING_PROTOCOLS = 0x65,HTTP_OK = 0xC8,HTTP_CREATED = 0xC9,HTTP_ACCEPTED = 0xCA,HTTP_NOT_AUTHORITATIVE = 0xCB,HTTP_NO_CONTENT = 0xCC,HTTP_RESET_CONTENT = 0xCD,HTTP_PARTIAL_CONTENT = 0xCE,HTTP_MULTIPLE_CHOICES = 0x12C,HTTP_MOVED_PERMANENTLY = 0x12D,HTTP_MOVED_TEMPORARILY = 0x12E,HTTP_SEE_OTHER = 0x12F,HTTP_NOT_MODIFIED = 0x130,HTTP_USE_PROXY = 0x131,HTTP_BAD_REQUEST = 0x190,HTTP_UNAUTHORIZED = 0x191,HTTP_PAYMENT_REQUIRED = 0x192,HTTP_FORBIDDEN = 0x193,HTTP_NOT_FOUND = 0x194,HTTP_METHOD_NOT_ALLOWED = 0x195,HTTP_NOT_ACCEPTABLE = 0x196,HTTP_PROXY_AUTHENTICATION = 0x197,HTTP_REQUEST_TIMEOUT = 0x198,HTTP_CONFLICT = 0x199,HTTP_GONE = 0x19A,HTTP_LENGTH_REQUIRED = 0x19B,HTTP_PRECONDITION = 0x19C,HTTP_REQUEST_TOO_LARGE = 0x19D,HTTP_URI_TOO_LONG = 0x19E,HTTP_UNSUPPORTED_MEDIATYPE = 0x19F,HTTP_REQUESTED_RANGE = 0x1A0,HTTP_EXPECTATION_FAILED = 0x1A1,HTTP_UPGRADE_REQUIRED = 0x1AA,HTTP_SERVER_ERROR = 0x1F4,HTTP_NOT_IMPLEMENTED = 0x1F5,HTTP_BAD_GATEWAY = 0x1F6,HTTP_SERVICE_UNAVAILABLE = 0x1F7,HTTP_GATEWAY_TIMEOUT = 0x1F8,HTTP_NOT_SUPPORTED = 0x1F9,HTTP_AUTHORIZATION_CANCELED = 0x3E8,HTTP_PKI_ERROR = 0x3E9,HTTP_WEBIF_DISABLED = 0x3EA,};
typedef enum http_status_e http_status_t;
typedef struct _http_s http_t;
typedef int (__cdecl *http_timeout_cb_t)(http_t *http, void *user_data);
enum http_uri_coding_e {HTTP_URI_CODING_NONE = 0x0,HTTP_URI_CODING_USERNAME = 0x1,HTTP_URI_CODING_HOSTNAME = 0x2,HTTP_URI_CODING_RESOURCE = 0x4,HTTP_URI_CODING_MOST = 0x7,HTTP_URI_CODING_QUERY = 0x8,HTTP_URI_CODING_ALL = 0xF,};
typedef enum http_uri_coding_e http_uri_coding_t;
enum http_uri_status_e {HTTP_URI_OVERFLOW = 0xFFFFFFF8,HTTP_URI_BAD_ARGUMENTS = 0xFFFFFFF9,HTTP_URI_BAD_RESOURCE = 0xFFFFFFFA,HTTP_URI_BAD_PORT = 0xFFFFFFFB,HTTP_URI_BAD_HOSTNAME = 0xFFFFFFFC,HTTP_URI_BAD_USERNAME = 0xFFFFFFFD,HTTP_URI_BAD_SCHEME = 0xFFFFFFFE,HTTP_URI_BAD_URI = 0xFFFFFFFF,HTTP_URI_OK = 0x0,HTTP_URI_MISSING_SCHEME = 0x1,HTTP_URI_UNKNOWN_SCHEME = 0x2,HTTP_URI_MISSING_RESOURCE = 0x3,};
typedef enum http_uri_status_e http_uri_status_t;
enum http_version_e {HTTP_0_9 = 0x9,HTTP_1_0 = 0x64,HTTP_1_1 = 0x65,};
typedef enum http_version_e http_version_t;
typedef int __cdecl i2d_of_void(void *, unsigned __int8 **);
typedef struct __darwin_i386_exception_state i386_exception_state_t;
typedef struct __darwin_i386_float_state i386_float_state_t;
typedef unsigned __int16 i386_ioport_t;
typedef struct __darwin_i386_thread_state i386_thread_state_t;
struct icmp {u_char icmp_type;u_char icmp_code;u_short icmp_cksum;union icmp::$115915189B36D486427C31680FC3CC99 icmp_hun;union icmp::$B8975A790A59AA025FBB0015D5EF41D8 icmp_dun;};
struct icmp6_filter {u_int32_t icmp6_filt[8];};
struct __attribute__((packed)) icmp6_hdr {u_int8_t icmp6_type;u_int8_t icmp6_code;u_int16_t icmp6_cksum;union icmp6_hdr::$D19D92B5F4F43A148CE7ABC3DA9CAAC9 icmp6_dataun;};
union icmp6_hdr::$D19D92B5F4F43A148CE7ABC3DA9CAAC9 {u_int32_t icmp6_un_data32[1];u_int16_t icmp6_un_data16[2];u_int8_t icmp6_un_data8[4];};
struct icmp6_ifstat {u_quad_t ifs6_in_msg;u_quad_t ifs6_in_error;u_quad_t ifs6_in_dstunreach;u_quad_t ifs6_in_adminprohib;u_quad_t ifs6_in_timeexceed;u_quad_t ifs6_in_paramprob;u_quad_t ifs6_in_pkttoobig;u_quad_t ifs6_in_echo;u_quad_t ifs6_in_echoreply;u_quad_t ifs6_in_routersolicit;u_quad_t ifs6_in_routeradvert;u_quad_t ifs6_in_neighborsolicit;u_quad_t ifs6_in_neighboradvert;u_quad_t ifs6_in_redirect;u_quad_t ifs6_in_mldquery;u_quad_t ifs6_in_mldreport;u_quad_t ifs6_in_mlddone;u_quad_t ifs6_out_msg;u_quad_t ifs6_out_error;u_quad_t ifs6_out_dstunreach;u_quad_t ifs6_out_adminprohib;u_quad_t ifs6_out_timeexceed;u_quad_t ifs6_out_paramprob;u_quad_t ifs6_out_pkttoobig;u_quad_t ifs6_out_echo;u_quad_t ifs6_out_echoreply;u_quad_t ifs6_out_routersolicit;u_quad_t ifs6_out_routeradvert;u_quad_t ifs6_out_neighborsolicit;u_quad_t ifs6_out_neighboradvert;u_quad_t ifs6_out_redirect;u_quad_t ifs6_out_mldquery;u_quad_t ifs6_out_mldreport;u_quad_t ifs6_out_mlddone;};
struct __attribute__((packed)) icmp6_namelookup {struct icmp6_hdr icmp6_nl_hdr;u_int8_t icmp6_nl_nonce[8];int32_t icmp6_nl_ttl;};
struct __attribute__((packed)) icmp6_nodeinfo {struct icmp6_hdr icmp6_ni_hdr;u_int8_t icmp6_ni_nonce[8];};
struct __attribute__((packed)) icmp6_router_renum {struct icmp6_hdr rr_hdr;u_int8_t rr_segnum;u_int8_t rr_flags;u_int16_t rr_maxdelay;u_int32_t rr_reserved;};
struct icmp6errstat {u_quad_t icp6errs_dst_unreach_noroute;u_quad_t icp6errs_dst_unreach_admin;u_quad_t icp6errs_dst_unreach_beyondscope;u_quad_t icp6errs_dst_unreach_addr;u_quad_t icp6errs_dst_unreach_noport;u_quad_t icp6errs_packet_too_big;u_quad_t icp6errs_time_exceed_transit;u_quad_t icp6errs_time_exceed_reassembly;u_quad_t icp6errs_paramprob_header;u_quad_t icp6errs_paramprob_nextheader;u_quad_t icp6errs_paramprob_option;u_quad_t icp6errs_redirect;u_quad_t icp6errs_unknown;};
struct icmp6stat {u_quad_t icp6s_error;u_quad_t icp6s_canterror;u_quad_t icp6s_toofreq;u_quad_t icp6s_outhist[256];u_quad_t icp6s_badcode;u_quad_t icp6s_tooshort;u_quad_t icp6s_checksum;u_quad_t icp6s_badlen;u_quad_t icp6s_reflect;u_quad_t icp6s_inhist[256];u_quad_t icp6s_nd_toomanyopt;struct icmp6errstat icp6s_outerrhist;u_quad_t icp6s_pmtuchg;u_quad_t icp6s_nd_badopt;u_quad_t icp6s_badns;u_quad_t icp6s_badna;u_quad_t icp6s_badrs;u_quad_t icp6s_badra;u_quad_t icp6s_badredirect;};
union icmp::$115915189B36D486427C31680FC3CC99 {u_char ih_pptr;struct in_addr ih_gwaddr;struct icmp::$115915189B36D486427C31680FC3CC99::ih_idseq ih_idseq;int ih_void;struct icmp::$115915189B36D486427C31680FC3CC99::ih_pmtu ih_pmtu;struct icmp::$115915189B36D486427C31680FC3CC99::ih_rtradv ih_rtradv;};
struct icmp::$115915189B36D486427C31680FC3CC99::ih_idseq {n_short icd_id;n_short icd_seq;};
struct icmp::$115915189B36D486427C31680FC3CC99::ih_pmtu {n_short ipm_void;n_short ipm_nextmtu;};
struct icmp::$115915189B36D486427C31680FC3CC99::ih_rtradv {u_char irt_num_addrs;u_char irt_wpa;u_int16_t irt_lifetime;};
union icmp::$B8975A790A59AA025FBB0015D5EF41D8 {struct icmp::$B8975A790A59AA025FBB0015D5EF41D8::id_ts id_ts;struct icmp::$B8975A790A59AA025FBB0015D5EF41D8::id_ip id_ip;struct icmp_ra_addr id_radv;u_int32_t id_mask;char id_data[1];};
struct icmp::$B8975A790A59AA025FBB0015D5EF41D8::id_ip {struct ip idi_ip;};
struct icmp::$B8975A790A59AA025FBB0015D5EF41D8::id_ts {n_time its_otime;n_time its_rtime;n_time its_ttime;};
struct icmp_ra_addr {u_int32_t ira_addr;u_int32_t ira_preference;};
struct icmpstat {u_int32_t icps_error;u_int32_t icps_oldshort;u_int32_t icps_oldicmp;u_int32_t icps_outhist[41];u_int32_t icps_badcode;u_int32_t icps_tooshort;u_int32_t icps_checksum;u_int32_t icps_badlen;u_int32_t icps_reflect;u_int32_t icps_inhist[41];u_int32_t icps_bmcastecho;u_int32_t icps_bmcasttstamp;};
struct iconv_fallbacks {iconv_unicode_mb_to_uc_fallback mb_to_uc_fallback;iconv_unicode_uc_to_mb_fallback uc_to_mb_fallback;iconv_wchar_mb_to_wc_fallback mb_to_wc_fallback;iconv_wchar_wc_to_mb_fallback wc_to_mb_fallback;void *data;};
struct iconv_hooks {iconv_unicode_char_hook uc_hook;iconv_wide_char_hook wc_hook;void *data;};
typedef void *iconv_t;
typedef void (__cdecl *iconv_unicode_char_hook)(unsigned int uc, void *data);
typedef void (__cdecl *iconv_unicode_mb_to_uc_fallback)(const char *inbuf, size_t inbufsize, void (__cdecl *write_replacement)(const unsigned int *buf, size_t buflen, void *callback_arg), void *callback_arg, void *data);
typedef void (__cdecl *iconv_unicode_uc_to_mb_fallback)(unsigned int code, void (__cdecl *write_replacement)(const char *buf, size_t buflen, void *callback_arg), void *callback_arg, void *data);
typedef void (__cdecl *iconv_wchar_mb_to_wc_fallback)(const char *inbuf, size_t inbufsize, void (__cdecl *write_replacement)(const wchar_t *buf, size_t buflen, void *callback_arg), void *callback_arg, void *data);
typedef void (__cdecl *iconv_wchar_wc_to_mb_fallback)(wchar_t code, void (__cdecl *write_replacement)(const char *buf, size_t buflen, void *callback_arg), void *callback_arg, void *data);
typedef void (__cdecl *iconv_wide_char_hook)(wchar_t wc, void *data);
typedef __darwin_id_t id_t;
struct ident_command {uint32_t cmd;uint32_t cmdsize;};
union idt_entry {trap_gate_t trap_gate;intr_gate_t intr_gate;task_gate_t task_gate;};
typedef union idt_entry idt_entry_t;
typedef idt_entry_t idt_t;
typedef enum $891529C55A3D7F6C466AE0BA608A35EA idtype_t;
typedef struct __if_clone *if_clone_t;
struct if_data {u_char ifi_type;u_char ifi_typelen;u_char ifi_physical;u_char ifi_addrlen;u_char ifi_hdrlen;u_char ifi_recvquota;u_char ifi_xmitquota;u_char ifi_unused1;u_int32_t ifi_mtu;u_int32_t ifi_metric;u_int32_t ifi_baudrate;u_int32_t ifi_ipackets;u_int32_t ifi_ierrors;u_int32_t ifi_opackets;u_int32_t ifi_oerrors;u_int32_t ifi_collisions;u_int32_t ifi_ibytes;u_int32_t ifi_obytes;u_int32_t ifi_imcasts;u_int32_t ifi_omcasts;u_int32_t ifi_iqdrops;u_int32_t ifi_noproto;u_int32_t ifi_recvtiming;u_int32_t ifi_xmittiming;struct timeval32 ifi_lastchange;u_int32_t ifi_unused2;u_int32_t ifi_hwassist;u_int32_t ifi_reserved1;u_int32_t ifi_reserved2;};
struct if_data64 {u_char ifi_type;u_char ifi_typelen;u_char ifi_physical;u_char ifi_addrlen;u_char ifi_hdrlen;u_char ifi_recvquota;u_char ifi_xmitquota;u_char ifi_unused1;u_int32_t ifi_mtu;u_int32_t ifi_metric;u_int64_t ifi_baudrate;u_int64_t ifi_ipackets;u_int64_t ifi_ierrors;u_int64_t ifi_opackets;u_int64_t ifi_oerrors;u_int64_t ifi_collisions;u_int64_t ifi_ibytes;u_int64_t ifi_obytes;u_int64_t ifi_imcasts;u_int64_t ifi_omcasts;u_int64_t ifi_iqdrops;u_int64_t ifi_noproto;u_int32_t ifi_recvtiming;u_int32_t ifi_xmittiming;struct timeval32 ifi_lastchange;};
struct if_family_id {u_int32_t iffmid_len;u_int32_t iffmid_id;char iffmid_str[1];};
struct if_laddrreq {char iflr_name[16];unsigned int flags;unsigned int prefixlen;struct sockaddr_storage addr;struct sockaddr_storage dstaddr;};
struct if_msghdr {unsigned __int16 ifm_msglen;unsigned __int8 ifm_version;unsigned __int8 ifm_type;int ifm_addrs;int ifm_flags;unsigned __int16 ifm_index;struct if_data ifm_data;};
struct if_msghdr2 {u_short ifm_msglen;u_char ifm_version;u_char ifm_type;int ifm_addrs;int ifm_flags;u_short ifm_index;int ifm_snd_len;int ifm_snd_maxlen;int ifm_snd_drops;int ifm_timer;struct if_data64 ifm_data;};
struct if_nameindex {unsigned int if_index;char *if_name;};
struct ifa_msghdr {unsigned __int16 ifam_msglen;unsigned __int8 ifam_version;unsigned __int8 ifam_type;int ifam_addrs;int ifam_flags;unsigned __int16 ifam_index;int ifam_metric;};
typedef struct __ifaddr *ifaddr_t;
struct ifaddrs {struct ifaddrs *ifa_next;char *ifa_name;unsigned int ifa_flags;struct sockaddr *ifa_addr;struct sockaddr *ifa_netmask;struct sockaddr *ifa_dstaddr;void *ifa_data;};
struct ifaliasreq {char ifra_name[16];struct sockaddr ifra_addr;struct sockaddr ifra_broadaddr;struct sockaddr ifra_mask;};
struct ifconf {int ifc_len;union ifconf::$28C87C5ACD364976D94B96E40062B553 ifc_ifcu;};
union ifconf::$28C87C5ACD364976D94B96E40062B553 {caddr_t ifcu_buf;struct ifreq *ifcu_req;};
struct ifdevmtu {int ifdm_current;int ifdm_min;int ifdm_max;};
struct ifdrv {char ifd_name[16];unsigned __int64 ifd_cmd;size_t ifd_len;void *ifd_data;};
struct ifkpi {unsigned int ifk_module_id;unsigned int ifk_type;union ifkpi::$9B10D65E4AB145405EA162F315DE5FAB ifk_data;};
union ifkpi::$9B10D65E4AB145405EA162F315DE5FAB {void *ifk_ptr;int ifk_value;};
struct ifma_msghdr {unsigned __int16 ifmam_msglen;unsigned __int8 ifmam_version;unsigned __int8 ifmam_type;int ifmam_addrs;int ifmam_flags;unsigned __int16 ifmam_index;};
struct ifma_msghdr2 {u_short ifmam_msglen;u_char ifmam_version;u_char ifmam_type;int ifmam_addrs;int ifmam_flags;u_short ifmam_index;int32_t ifmam_refcount;};
struct ifmaddrs {struct ifmaddrs *ifma_next;struct sockaddr *ifma_name;struct sockaddr *ifma_addr;struct sockaddr *ifma_lladdr;};
struct ifmedia_description {int ifmt_word;const char *ifmt_string;};
struct ifmediareq {char ifm_name[16];int ifm_current;int ifm_mask;int ifm_status;int ifm_active;int ifm_count;int *ifm_ulist;};
struct ifmibdata {char ifmd_name[16];unsigned int ifmd_pcount;unsigned int ifmd_flags;unsigned int ifmd_snd_len;unsigned int ifmd_snd_maxlen;unsigned int ifmd_snd_drops;unsigned int ifmd_filler[4];struct if_data64 ifmd_data;};
typedef struct __ifmultiaddr *ifmultiaddr_t;
struct ifnet;
typedef struct __ifnet *ifnet_t;
struct ifqueue {void *ifq_head;void *ifq_tail;int ifq_len;int ifq_maxlen;int ifq_drops;};
struct ifreq {char ifr_name[16];union ifreq::$C815701E280F15262E20FD07168CD215 ifr_ifru;};
union ifreq::$C815701E280F15262E20FD07168CD215 {struct sockaddr ifru_addr;struct sockaddr ifru_dstaddr;struct sockaddr ifru_broadaddr;__int16 ifru_flags;int ifru_metric;int ifru_mtu;int ifru_phys;int ifru_media;int ifru_intval;caddr_t ifru_data;struct ifdevmtu ifru_devmtu;struct ifkpi ifru_kpi;u_int32_t ifru_wake_flags;u_int32_t ifru_route_refcnt;int ifru_cap[2];};
struct ifs_iso_8802_3 {u_int32_t dot3StatsAlignmentErrors;u_int32_t dot3StatsFCSErrors;u_int32_t dot3StatsSingleCollisionFrames;u_int32_t dot3StatsMultipleCollisionFrames;u_int32_t dot3StatsSQETestErrors;u_int32_t dot3StatsDeferredTransmissions;u_int32_t dot3StatsLateCollisions;u_int32_t dot3StatsExcessiveCollisions;u_int32_t dot3StatsInternalMacTransmitErrors;u_int32_t dot3StatsCarrierSenseErrors;u_int32_t dot3StatsFrameTooLongs;u_int32_t dot3StatsInternalMacReceiveErrors;u_int32_t dot3StatsEtherChipSet;u_int32_t dot3StatsMissedFrames;u_int32_t dot3StatsCollFrequencies[16];u_int32_t dot3Compliance;};
struct ifstat {char ifs_name[16];char ascii[801];};
struct igmp {u_char igmp_type;u_char igmp_code;u_short igmp_cksum;struct in_addr igmp_group;};
struct igmp_grouprec {u_char ig_type;u_char ig_datalen;u_short ig_numsrc;struct in_addr ig_group;};
struct igmp_report {u_char ir_type;u_char ir_rsv1;u_short ir_cksum;u_short ir_rsv2;u_short ir_numgrps;};
struct igmpmsg {u_int32_t unused1;u_int32_t unused2;u_char im_msgtype;u_char im_mbz;u_char im_vif;u_char unused3;struct in_addr im_src;struct in_addr im_dst;};
struct igmpstat {u_int igps_rcv_total;u_int igps_rcv_tooshort;u_int igps_rcv_badsum;u_int igps_rcv_queries;u_int igps_rcv_badqueries;u_int igps_rcv_reports;u_int igps_rcv_badreports;u_int igps_rcv_ourreports;u_int igps_snd_reports;};
struct __attribute__((aligned(8))) igmpstat_v3 {uint32_t igps_version;uint32_t igps_len;uint64_t igps_rcv_total;uint64_t igps_rcv_tooshort;uint64_t igps_rcv_badttl;uint64_t igps_rcv_badsum;uint64_t igps_rcv_v1v2_queries;uint64_t igps_rcv_v3_queries;uint64_t igps_rcv_badqueries;uint64_t igps_rcv_gen_queries;uint64_t igps_rcv_group_queries;uint64_t igps_rcv_gsr_queries;uint64_t igps_drop_gsr_queries;uint64_t igps_rcv_reports;uint64_t igps_rcv_badreports;uint64_t igps_rcv_ourreports;uint64_t igps_rcv_nora;uint64_t igps_snd_reports;uint64_t __igps_pad[4];};
struct igmpv3 {u_char igmp_type;u_char igmp_code;u_short igmp_cksum;struct in_addr igmp_group;u_char igmp_misc;u_char igmp_qqi;u_short igmp_numsrc;};
typedef void (__cdecl *ignorableWhitespaceSAXFunc)(void *ctx, const xmlChar *ch, int len);
typedef struct $221E4D0AC05B62FB3AF409C4572323C5 imaxdiv_t;
struct in4in6_addr {u_int32_t i46a_pad32[3];struct in_addr i46a_addr4;};
struct in6_addr {union in6_addr::$330434928707C706902F20BE7BA89EB4 __u6_addr;};
union in6_addr::$330434928707C706902F20BE7BA89EB4 {__uint8_t __u6_addr8[16];__uint16_t __u6_addr16[8];__uint32_t __u6_addr32[4];};
struct in6_addrlifetime {time_t ia6t_expire;time_t ia6t_preferred;u_int32_t ia6t_vltime;u_int32_t ia6t_pltime;};
struct in6_addrpolicy {struct sockaddr_in6 addr;struct sockaddr_in6 addrmask;int preced;int label;u_quad_t use;};
struct in6_aliasreq {char ifra_name[16];struct sockaddr_in6 ifra_addr;struct sockaddr_in6 ifra_broadaddr;struct sockaddr_in6 ifra_prefixmask;int ifra_flags;struct in6_addrlifetime ifra_lifetime;};
struct in6_ifreq {char ifr_name[16];union in6_ifreq::$7D64D84BD828AED8BD33AAA6A53121E7 ifr_ifru;};
union in6_ifreq::$7D64D84BD828AED8BD33AAA6A53121E7 {struct sockaddr_in6 ifru_addr;struct sockaddr_in6 ifru_dstaddr;int ifru_flags;int ifru_flags6;int ifru_metric;caddr_t ifru_data;struct in6_addrlifetime ifru_lifetime;struct in6_ifstat ifru_stat;struct icmp6_ifstat ifru_icmp6stat;u_int32_t ifru_scope_id[16];};
struct in6_ifstat {u_quad_t ifs6_in_receive;u_quad_t ifs6_in_hdrerr;u_quad_t ifs6_in_toobig;u_quad_t ifs6_in_noroute;u_quad_t ifs6_in_addrerr;u_quad_t ifs6_in_protounknown;u_quad_t ifs6_in_truncated;u_quad_t ifs6_in_discard;u_quad_t ifs6_in_deliver;u_quad_t ifs6_out_forward;u_quad_t ifs6_out_request;u_quad_t ifs6_out_discard;u_quad_t ifs6_out_fragok;u_quad_t ifs6_out_fragfail;u_quad_t ifs6_out_fragcreat;u_quad_t ifs6_reass_reqd;u_quad_t ifs6_reass_ok;u_quad_t ifs6_reass_fail;u_quad_t ifs6_in_mcast;u_quad_t ifs6_out_mcast;};
struct in6_pktinfo {struct in6_addr ipi6_addr;unsigned int ipi6_ifindex;};
struct in6_prefixreq {char ipr_name[16];u_char ipr_origin;u_char ipr_plen;u_int32_t ipr_vltime;u_int32_t ipr_pltime;struct in6_prflags ipr_flags;struct sockaddr_in6 ipr_prefix;};
struct in6_prflags {struct in6_prflags::prf_ra prf_ra;u_char prf_reserved1;u_short prf_reserved2;struct in6_prflags::prf_rr prf_rr;u_char prf_reserved3;u_short prf_reserved4;};
struct in6_prflags::prf_ra {unsigned __int8 onlink : 1;unsigned __int8 autonomous : 1;unsigned __int8 reserved : 6;};
struct in6_prflags::prf_rr {unsigned __int8 decrvalid : 1;unsigned __int8 decrprefd : 1;unsigned __int8 reserved : 6;};
struct in6_rrenumreq {char irr_name[16];u_char irr_origin;u_char irr_m_len;u_char irr_m_minlen;u_char irr_m_maxlen;u_char irr_u_uselen;u_char irr_u_keeplen;struct in6_rrenumreq::irr_raflagmask irr_raflagmask;u_int32_t irr_vltime;u_int32_t irr_pltime;struct in6_prflags irr_flags;struct sockaddr_in6 irr_matchprefix;struct sockaddr_in6 irr_useprefix;};
struct in6_rrenumreq::irr_raflagmask {unsigned __int8 onlink : 1;unsigned __int8 autonomous : 1;unsigned __int8 reserved : 6;};
struct in_addr {in_addr_t s_addr;};
struct in_addr_4in6 {u_int32_t ia46_pad32[3];struct in_addr ia46_addr4;};
typedef __uint32_t in_addr_t;
struct in_aliasreq {char ifra_name[16];struct sockaddr_in ifra_addr;struct sockaddr_in ifra_broadaddr;struct sockaddr_in ifra_mask;u_int32_t ifra_unused;};
typedef unsigned int (__cdecl *in_func)(void *, unsigned __int8 **);
struct in_pktinfo {unsigned int ipi_ifindex;struct in_addr ipi_spec_dst;struct in_addr ipi_addr;};
typedef __uint16_t in_port_t;
struct in_sockinfo {int insi_fport;int insi_lport;uint64_t insi_gencnt;uint32_t insi_flags;uint32_t insi_flow;uint8_t insi_vflag;uint8_t insi_ip_ttl;uint32_t rfu_1;union in_sockinfo::$881D04D8390B0CDBA797F709C012DF83 insi_faddr;union in_sockinfo::$881D04D8390B0CDBA797F709C012DF83 insi_laddr;struct in_sockinfo::$51C6D8A4577F1D056D30CFC3A0948BCF insi_v4;struct in_sockinfo::$8F8B1830DF140CEE3517CFE046A1DD9A insi_v6;};
struct in_sockinfo::$51C6D8A4577F1D056D30CFC3A0948BCF {u_char in4_tos;};
union in_sockinfo::$881D04D8390B0CDBA797F709C012DF83 {struct in4in6_addr ina_46;struct in6_addr ina_6;};
struct in_sockinfo::$8F8B1830DF140CEE3517CFE046A1DD9A {uint8_t in6_hlim;int in6_cksum;u_short in6_ifindex;__int16 in6_hops;};
struct index_list {struct index_list *next;char *ilabel;char isimplied;};
typedef u_int16_t indx_t;
typedef __darwin_ino64_t ino64_t;
typedef __darwin_ino_t ino_t;
typedef u_quad_t inp_gen_t;
struct inpcb {struct _inpcb_list_entry inp_hash;struct in_addr reserved1;struct in_addr reserved2;u_short inp_fport;u_short inp_lport;struct _inpcb_list_entry inp_list;u_int32_t inp_ppcb;u_int32_t inp_pcbinfo;u_int32_t inp_socket;u_char nat_owner;u_int32_t nat_cookie;struct _inpcb_list_entry inp_portlist;u_int32_t inp_phd;inp_gen_t inp_gencnt;int inp_flags;u_int32_t inp_flow;u_char inp_vflag;u_char inp_ip_ttl;u_char inp_ip_p;union inpcb::$BD75B87EE766833A3DF9644C7FCC1E00 inp_dependfaddr;union inpcb::$61B649B2802E895728C8AA130C15F594 inp_dependladdr;union inpcb::$1F3C467F2673A40775B3C04457DCB635 inp_dependroute;struct inpcb::$6F13D882517E6D5CBD1B080626F65DC4 inp_depend4;struct inpcb::$F2E854D5640579B71C918C53FCA5BF60 inp_depend6;int hash_element;u_int32_t inp_saved_ppcb;u_int32_t inp_sp;u_int32_t reserved[3];};
struct inpcb64_list_entry {u_int64_t le_next;u_int64_t le_prev;};
union inpcb::$1F3C467F2673A40775B3C04457DCB635 {u_char inp4_route[20];u_char inp6_route[32];};
union inpcb::$61B649B2802E895728C8AA130C15F594 {struct in_addr_4in6 inp46_local;struct in6_addr inp6_local;};
struct inpcb::$6F13D882517E6D5CBD1B080626F65DC4 {u_char inp4_ip_tos;u_int32_t inp4_options;u_int32_t inp4_moptions;};
union inpcb::$BD75B87EE766833A3DF9644C7FCC1E00 {struct in_addr_4in6 inp46_foreign;struct in6_addr inp6_foreign;};
struct inpcb::$F2E854D5640579B71C918C53FCA5BF60 {u_int32_t inp6_options;u_int8_t inp6_hlim;u_int8_t unused_uint8_1;ushort unused_uint16_1;u_int32_t inp6_outputopts;u_int32_t inp6_moptions;u_int32_t inp6_icmp6filt;int inp6_cksum;u_short inp6_ifindex;__int16 inp6_hops;};
struct inpcbinfo;
struct inpcbpolicy;
struct inpcbport;
typedef __int16 int16_t;
typedef int int32_t;
typedef __int64 int64_t;
typedef signed __int8 int8_t;
typedef int16_t int_fast16_t;
typedef int32_t int_fast32_t;
typedef int64_t int_fast64_t;
typedef int8_t int_fast8_t;
typedef int16_t int_least16_t;
typedef int32_t int_least32_t;
typedef int64_t int_least64_t;
typedef int8_t int_least8_t;
typedef struct counter64 integer64;
typedef int integer_t;
typedef struct __ifnet_filter *interface_filter_t;
typedef void (__cdecl *internalSubsetSAXFunc)(void *ctx, const xmlChar *name, const xmlChar *ExternalID, const xmlChar *SystemID);
struct internal_state {int dummy;};
typedef int intf;
typedef __int64 intmax_t;
typedef __darwin_intptr_t intptr_t;
struct intr_gate {unsigned __int16 offset00;sel_t seg;unsigned __int32 : 8;unsigned __int32 type : 5;unsigned __int32 dpl : 2;unsigned __int32 present : 1;unsigned __int32 offset16 : 16;};
typedef struct intr_gate intr_gate_t;
typedef unsigned __int16 io_addr_t;
typedef char *io_buf_ptr_t;
typedef unsigned __int16 io_len_t;
typedef mach_port_t io_master_t;
typedef struct OSObject *io_object_t;
struct iovec {void *iov_base;size_t iov_len;};
struct ip {unsigned __int32 ip_hl : 4;unsigned __int32 ip_v : 4;u_char ip_tos;u_short ip_len;u_short ip_id;u_short ip_off;u_char ip_ttl;u_char ip_p;u_short ip_sum;struct in_addr ip_src;struct in_addr ip_dst;};
struct __attribute__((packed)) ip6_dest {u_int8_t ip6d_nxt;u_int8_t ip6d_len;};
struct __attribute__((packed)) ip6_ext {u_int8_t ip6e_nxt;u_int8_t ip6e_len;};
struct __attribute__((packed)) ip6_frag {u_int8_t ip6f_nxt;u_int8_t ip6f_reserved;u_int16_t ip6f_offlg;u_int32_t ip6f_ident;};
struct __attribute__((packed)) ip6_hbh {u_int8_t ip6h_nxt;u_int8_t ip6h_len;};
struct __attribute__((packed)) ip6_hdr {union ip6_hdr::$55051B7F048FF6C7BE508169AD51FCBE ip6_ctlun;struct in6_addr ip6_src;struct in6_addr ip6_dst;};
union ip6_hdr::$55051B7F048FF6C7BE508169AD51FCBE {struct ip6_hdr::$55051B7F048FF6C7BE508169AD51FCBE::ip6_hdrctl ip6_un1;u_int8_t ip6_un2_vfc;};
struct ip6_hdr::$55051B7F048FF6C7BE508169AD51FCBE::ip6_hdrctl {u_int32_t ip6_un1_flow;u_int16_t ip6_un1_plen;u_int8_t ip6_un1_nxt;u_int8_t ip6_un1_hlim;};
struct ip6_moptions;
struct ip6_mtuinfo {struct sockaddr_in6 ip6m_addr;uint32_t ip6m_mtu;};
struct __attribute__((packed)) ip6_opt {u_int8_t ip6o_type;u_int8_t ip6o_len;};
struct __attribute__((packed)) ip6_opt_jumbo {u_int8_t ip6oj_type;u_int8_t ip6oj_len;u_int8_t ip6oj_jumbo_len[4];};
struct __attribute__((packed)) ip6_opt_nsap {u_int8_t ip6on_type;u_int8_t ip6on_len;u_int8_t ip6on_src_nsap_len;u_int8_t ip6on_dst_nsap_len;};
struct __attribute__((packed)) ip6_opt_router {u_int8_t ip6or_type;u_int8_t ip6or_len;u_int8_t ip6or_value[2];};
struct __attribute__((packed)) ip6_opt_tunnel {u_int8_t ip6ot_type;u_int8_t ip6ot_len;u_int8_t ip6ot_encap_limit;};
struct ip6_pktopts;
struct __attribute__((packed)) ip6_rthdr {u_int8_t ip6r_nxt;u_int8_t ip6r_len;u_int8_t ip6r_type;u_int8_t ip6r_segleft;};
struct __attribute__((packed)) ip6_rthdr0 {u_int8_t ip6r0_nxt;u_int8_t ip6r0_len;u_int8_t ip6r0_type;u_int8_t ip6r0_segleft;u_int8_t ip6r0_reserved;u_int8_t ip6r0_slmap[3];struct in6_addr ip6r0_addr[1];};
struct ip_addr_t {char net;char host;char lh;char impno;};
struct ip_fw {u_int32_t version;void *context;struct ip_fw *next;struct ip_fw *next_rule;u_int16_t act_ofs;u_int16_t cmd_len;u_int16_t rulenum;u_int8_t set;u_int32_t set_masks[2];u_int8_t _pad;u_int64_t pcnt;u_int64_t bcnt;u_int32_t timestamp;u_int32_t reserved_1;u_int32_t reserved_2;ipfw_insn cmd[1];};
struct ip_linklocal_stat {u_int32_t iplls_in_total;u_int32_t iplls_in_badttl;u_int32_t iplls_out_total;u_int32_t iplls_out_badttl;};
struct ip_mreq {struct in_addr imr_multiaddr;struct in_addr imr_interface;};
struct ip_mreq_source {struct in_addr imr_multiaddr;struct in_addr imr_sourceaddr;struct in_addr imr_interface;};
struct ip_mreqn {struct in_addr imr_multiaddr;struct in_addr imr_address;int imr_ifindex;};
struct ip_opts {struct in_addr ip_dst;char ip_opts[40];};
struct ip_timestamp {u_char ipt_code;u_char ipt_len;u_char ipt_ptr;unsigned __int32 ipt_flg : 4;unsigned __int32 ipt_oflw : 4;union ip_timestamp::ipt_timestamp ipt_timestamp;};
union ip_timestamp::ipt_timestamp {n_long ipt_time[1];struct ip_timestamp::ipt_timestamp::ipt_ta ipt_ta[1];};
struct ip_timestamp::ipt_timestamp::ipt_ta {struct in_addr ipt_addr;n_long ipt_time;};
struct ipc_info_name {mach_port_name_t iin_name;integer_t iin_collision;mach_port_type_t iin_type;mach_port_urefs_t iin_urefs;natural_t iin_object;natural_t iin_next;natural_t iin_hash;};
typedef ipc_info_name_t *ipc_info_name_array_t;
typedef struct ipc_info_name ipc_info_name_t;
struct ipc_info_space {natural_t iis_genno_mask;natural_t iis_table_size;natural_t iis_table_next;natural_t iis_tree_size;natural_t iis_tree_small;natural_t iis_tree_hash;};
typedef struct ipc_info_space ipc_info_space_t;
struct ipc_info_tree_name {ipc_info_name_t iitn_name;mach_port_name_t iitn_lchild;mach_port_name_t iitn_rchild;};
typedef ipc_info_tree_name_t *ipc_info_tree_name_array_t;
typedef struct ipc_info_tree_name ipc_info_tree_name_t;
struct ipc_perm {uid_t uid;gid_t gid;uid_t cuid;gid_t cgid;mode_t mode;unsigned __int16 _seq;key_t _key;};
typedef ipc_space_t ipc_space_port_t;
typedef mach_port_t ipc_space_t;
typedef struct _ipfw_dyn_rule ipfw_dyn_rule;
struct ipfw_flow_id {u_int32_t dst_ip;u_int32_t src_ip;u_int16_t dst_port;u_int16_t src_port;u_int8_t proto;u_int8_t flags;};
typedef struct _ipfw_insn ipfw_insn;
typedef struct _ipfw_insn_if ipfw_insn_if;
typedef struct _ipfw_insn_ip ipfw_insn_ip;
typedef struct _ipfw_insn_limit ipfw_insn_limit;
typedef struct _ipfw_insn_log ipfw_insn_log;
typedef struct _ipfw_insn_mac ipfw_insn_mac;
typedef struct _ipfw_insn_pipe ipfw_insn_pipe;
typedef struct _ipfw_insn_sa ipfw_insn_sa;
typedef struct _ipfw_insn_u16 ipfw_insn_u16;
typedef struct _ipfw_insn_u32 ipfw_insn_u32;
enum ipfw_opcodes {O_NOP = 0x0,O_IP_SRC = 0x1,O_IP_SRC_MASK = 0x2,O_IP_SRC_ME = 0x3,O_IP_SRC_SET = 0x4,O_IP_DST = 0x5,O_IP_DST_MASK = 0x6,O_IP_DST_ME = 0x7,O_IP_DST_SET = 0x8,O_IP_SRCPORT = 0x9,O_IP_DSTPORT = 0xA,O_PROTO = 0xB,O_MACADDR2 = 0xC,O_MAC_TYPE = 0xD,O_LAYER2 = 0xE,O_IN = 0xF,O_FRAG = 0x10,O_RECV = 0x11,O_XMIT = 0x12,O_VIA = 0x13,O_IPOPT = 0x14,O_IPLEN = 0x15,O_IPID = 0x16,O_IPTOS = 0x17,O_IPPRECEDENCE = 0x18,O_IPTTL = 0x19,O_IPVER = 0x1A,O_UID = 0x1B,O_GID = 0x1C,O_ESTAB = 0x1D,O_TCPFLAGS = 0x1E,O_TCPWIN = 0x1F,O_TCPSEQ = 0x20,O_TCPACK = 0x21,O_ICMPTYPE = 0x22,O_TCPOPTS = 0x23,O_VERREVPATH = 0x24,O_PROBE_STATE = 0x25,O_KEEP_STATE = 0x26,O_LIMIT = 0x27,O_LIMIT_PARENT = 0x28,O_LOG = 0x29,O_PROB = 0x2A,O_CHECK_STATE = 0x2B,O_ACCEPT = 0x2C,O_DENY = 0x2D,O_REJECT = 0x2E,O_COUNT = 0x2F,O_SKIPTO = 0x30,O_PIPE = 0x31,O_QUEUE = 0x32,O_DIVERT = 0x33,O_TEE = 0x34,O_FORWARD_IP = 0x35,O_FORWARD_MAC = 0x36,O_IPSEC = 0x37,O_LAST_OPCODE = 0x38,};
struct ipovly {u_char ih_x1[9];u_char ih_pr;u_short ih_len;struct in_addr ih_src;struct in_addr ih_dst;};
struct ipp_attribute_s {struct ipp_attribute_s *next;ipp_tag_t group_tag;ipp_tag_t value_tag;char *name;int num_values;ipp_value_t values[1];};
typedef struct ipp_attribute_s ipp_attribute_t;
enum ipp_finish_e {IPP_FINISHINGS_NONE = 0x3,IPP_FINISHINGS_STAPLE = 0x4,IPP_FINISHINGS_PUNCH = 0x5,IPP_FINISHINGS_COVER = 0x6,IPP_FINISHINGS_BIND = 0x7,IPP_FINISHINGS_SADDLE_STITCH = 0x8,IPP_FINISHINGS_EDGE_STITCH = 0x9,IPP_FINISHINGS_FOLD = 0xA,IPP_FINISHINGS_TRIM = 0xB,IPP_FINISHINGS_BALE = 0xC,IPP_FINISHINGS_BOOKLET_MAKER = 0xD,IPP_FINISHINGS_JOB_OFFSET = 0xE,IPP_FINISHINGS_STAPLE_TOP_LEFT = 0x14,IPP_FINISHINGS_STAPLE_BOTTOM_LEFT = 0x15,IPP_FINISHINGS_STAPLE_TOP_RIGHT = 0x16,IPP_FINISHINGS_STAPLE_BOTTOM_RIGHT = 0x17,IPP_FINISHINGS_EDGE_STITCH_LEFT = 0x18,IPP_FINISHINGS_EDGE_STITCH_TOP = 0x19,IPP_FINISHINGS_EDGE_STITCH_RIGHT = 0x1A,IPP_FINISHINGS_EDGE_STITCH_BOTTOM = 0x1B,IPP_FINISHINGS_STAPLE_DUAL_LEFT = 0x1C,IPP_FINISHINGS_STAPLE_DUAL_TOP = 0x1D,IPP_FINISHINGS_STAPLE_DUAL_RIGHT = 0x1E,IPP_FINISHINGS_STAPLE_DUAL_BOTTOM = 0x1F,IPP_FINISHINGS_BIND_LEFT = 0x32,IPP_FINISHINGS_BIND_TOP = 0x33,IPP_FINISHINGS_BIND_RIGHT = 0x34,IPP_FINISHINGS_BIND_BOTTOM = 0x35,};
typedef enum ipp_finish_e ipp_finish_t;
typedef ssize_t (__cdecl *ipp_iocb_t)(void *, ipp_uchar_t *, size_t);
enum ipp_jstate_e {IPP_JOB_PENDING = 0x3,IPP_JOB_HELD = 0x4,IPP_JOB_PROCESSING = 0x5,IPP_JOB_STOPPED = 0x6,IPP_JOB_CANCELED = 0x7,IPP_JOB_ABORTED = 0x8,IPP_JOB_COMPLETED = 0x9,};
typedef enum ipp_jstate_e ipp_jstate_t;
enum ipp_op_e {IPP_PRINT_JOB = 0x2,IPP_PRINT_URI = 0x3,IPP_VALIDATE_JOB = 0x4,IPP_CREATE_JOB = 0x5,IPP_SEND_DOCUMENT = 0x6,IPP_SEND_URI = 0x7,IPP_CANCEL_JOB = 0x8,IPP_GET_JOB_ATTRIBUTES = 0x9,IPP_GET_JOBS = 0xA,IPP_GET_PRINTER_ATTRIBUTES = 0xB,IPP_HOLD_JOB = 0xC,IPP_RELEASE_JOB = 0xD,IPP_RESTART_JOB = 0xE,IPP_PAUSE_PRINTER = 0x10,IPP_RESUME_PRINTER = 0x11,IPP_PURGE_JOBS = 0x12,IPP_SET_PRINTER_ATTRIBUTES = 0x13,IPP_SET_JOB_ATTRIBUTES = 0x14,IPP_GET_PRINTER_SUPPORTED_VALUES = 0x15,IPP_CREATE_PRINTER_SUBSCRIPTION = 0x16,IPP_CREATE_JOB_SUBSCRIPTION = 0x17,IPP_GET_SUBSCRIPTION_ATTRIBUTES = 0x18,IPP_GET_SUBSCRIPTIONS = 0x19,IPP_RENEW_SUBSCRIPTION = 0x1A,IPP_CANCEL_SUBSCRIPTION = 0x1B,IPP_GET_NOTIFICATIONS = 0x1C,IPP_SEND_NOTIFICATIONS = 0x1D,IPP_GET_PRINT_SUPPORT_FILES = 0x21,IPP_ENABLE_PRINTER = 0x22,IPP_DISABLE_PRINTER = 0x23,IPP_PAUSE_PRINTER_AFTER_CURRENT_JOB = 0x24,IPP_HOLD_NEW_JOBS = 0x25,IPP_RELEASE_HELD_NEW_JOBS = 0x26,IPP_DEACTIVATE_PRINTER = 0x27,IPP_ACTIVATE_PRINTER = 0x28,IPP_RESTART_PRINTER = 0x29,IPP_SHUTDOWN_PRINTER = 0x2A,IPP_STARTUP_PRINTER = 0x2B,IPP_REPROCESS_JOB = 0x2C,IPP_CANCEL_CURRENT_JOB = 0x2D,IPP_SUSPEND_CURRENT_JOB = 0x2E,IPP_RESUME_JOB = 0x2F,IPP_PROMOTE_JOB = 0x30,IPP_SCHEDULE_JOB_AFTER = 0x31,IPP_CANCEL_DOCUMENT = 0x33,IPP_GET_DOCUMENT_ATTRIBUTES = 0x34,IPP_GET_DOCUMENTS = 0x35,IPP_DELETE_DOCUMENT = 0x36,IPP_SET_DOCUMENT_ATTRIBUTES = 0x37,IPP_CANCEL_JOBS = 0x38,IPP_CANCEL_MY_JOBS = 0x39,IPP_RESUBMIT_JOB = 0x3A,IPP_CLOSE_JOB = 0x3B,IPP_PRIVATE = 0x4000,CUPS_GET_DEFAULT = 0x4001,CUPS_GET_PRINTERS = 0x4002,CUPS_ADD_MODIFY_PRINTER = 0x4003,CUPS_DELETE_PRINTER = 0x4004,CUPS_GET_CLASSES = 0x4005,CUPS_ADD_MODIFY_CLASS = 0x4006,CUPS_DELETE_CLASS = 0x4007,CUPS_ACCEPT_JOBS = 0x4008,CUPS_REJECT_JOBS = 0x4009,CUPS_SET_DEFAULT = 0x400A,CUPS_GET_DEVICES = 0x400B,CUPS_GET_PPDS = 0x400C,CUPS_MOVE_JOB = 0x400D,CUPS_AUTHENTICATE_JOB = 0x400E,CUPS_GET_PPD = 0x400F,CUPS_GET_DOCUMENT = 0x4027,};
typedef enum ipp_op_e ipp_op_t;
enum ipp_orient_e {IPP_PORTRAIT = 0x3,IPP_LANDSCAPE = 0x4,IPP_REVERSE_LANDSCAPE = 0x5,IPP_REVERSE_PORTRAIT = 0x6,};
typedef enum ipp_orient_e ipp_orient_t;
enum ipp_pstate_e {IPP_PRINTER_IDLE = 0x3,IPP_PRINTER_PROCESSING = 0x4,IPP_PRINTER_STOPPED = 0x5,};
typedef enum ipp_pstate_e ipp_pstate_t;
enum ipp_quality_e {IPP_QUALITY_DRAFT = 0x3,IPP_QUALITY_NORMAL = 0x4,IPP_QUALITY_HIGH = 0x5,};
typedef enum ipp_quality_e ipp_quality_t;
typedef union ipp_request_u ipp_request_t;
union ipp_request_u {struct ipp_request_u::$C21E321BB5A964B1106B1996333560F5 any;struct ipp_request_u::$453450608DF16096B88E9D5250CA9622 op;struct ipp_request_u::$5CC10970A8D293302D52B38947334AC6 status;struct ipp_request_u::$5CC10970A8D293302D52B38947334AC6 event;};
struct ipp_request_u::$453450608DF16096B88E9D5250CA9622 {ipp_uchar_t version[2];ipp_op_t operation_id;int request_id;};
struct ipp_request_u::$5CC10970A8D293302D52B38947334AC6 {ipp_uchar_t version[2];ipp_status_t status_code;int request_id;};
struct ipp_request_u::$C21E321BB5A964B1106B1996333560F5 {ipp_uchar_t version[2];int op_status;int request_id;};
enum ipp_res_e {IPP_RES_PER_INCH = 0x3,IPP_RES_PER_CM = 0x4,};
typedef enum ipp_res_e ipp_res_t;
struct ipp_s {ipp_state_t state;ipp_request_t request;ipp_attribute_t *attrs;ipp_attribute_t *last;ipp_attribute_t *current;ipp_tag_t curtag;ipp_attribute_t *prev;int use;};
enum ipp_state_e {IPP_ERROR = 0xFFFFFFFF,IPP_IDLE = 0x0,IPP_HEADER = 0x1,IPP_ATTRIBUTE = 0x2,IPP_DATA = 0x3,};
typedef enum ipp_state_e ipp_state_t;
enum ipp_status_e {IPP_OK = 0x0,IPP_OK_SUBST = 0x1,IPP_OK_CONFLICT = 0x2,IPP_OK_IGNORED_SUBSCRIPTIONS = 0x3,IPP_OK_IGNORED_NOTIFICATIONS = 0x4,IPP_OK_TOO_MANY_EVENTS = 0x5,IPP_OK_BUT_CANCEL_SUBSCRIPTION = 0x6,IPP_OK_EVENTS_COMPLETE = 0x7,IPP_REDIRECTION_OTHER_SITE = 0x200,CUPS_SEE_OTHER = 0x280,IPP_BAD_REQUEST = 0x400,IPP_FORBIDDEN = 0x401,IPP_NOT_AUTHENTICATED = 0x402,IPP_NOT_AUTHORIZED = 0x403,IPP_NOT_POSSIBLE = 0x404,IPP_TIMEOUT = 0x405,IPP_NOT_FOUND = 0x406,IPP_GONE = 0x407,IPP_REQUEST_ENTITY = 0x408,IPP_REQUEST_VALUE = 0x409,IPP_DOCUMENT_FORMAT = 0x40A,IPP_ATTRIBUTES = 0x40B,IPP_URI_SCHEME = 0x40C,IPP_CHARSET = 0x40D,IPP_CONFLICT = 0x40E,IPP_COMPRESSION_NOT_SUPPORTED = 0x40F,IPP_COMPRESSION_ERROR = 0x410,IPP_DOCUMENT_FORMAT_ERROR = 0x411,IPP_DOCUMENT_ACCESS_ERROR = 0x412,IPP_ATTRIBUTES_NOT_SETTABLE = 0x413,IPP_IGNORED_ALL_SUBSCRIPTIONS = 0x414,IPP_TOO_MANY_SUBSCRIPTIONS = 0x415,IPP_IGNORED_ALL_NOTIFICATIONS = 0x416,IPP_PRINT_SUPPORT_FILE_NOT_FOUND = 0x417,IPP_INTERNAL_ERROR = 0x500,IPP_OPERATION_NOT_SUPPORTED = 0x501,IPP_SERVICE_UNAVAILABLE = 0x502,IPP_VERSION_NOT_SUPPORTED = 0x503,IPP_DEVICE_ERROR = 0x504,IPP_TEMPORARY_ERROR = 0x505,IPP_NOT_ACCEPTING = 0x506,IPP_PRINTER_BUSY = 0x507,IPP_ERROR_JOB_CANCELED = 0x508,IPP_MULTIPLE_JOBS_NOT_SUPPORTED = 0x509,IPP_PRINTER_IS_DEACTIVATED = 0x50A,IPP_AUTHENTICATION_CANCELED = 0x1000,IPP_PKI_ERROR = 0x1001,IPP_UPGRADE_REQUIRED = 0x1002,};
typedef enum ipp_status_e ipp_status_t;
typedef struct ipp_s ipp_t;
enum ipp_tag_e {IPP_TAG_ZERO = 0x0,IPP_TAG_OPERATION = 0x1,IPP_TAG_JOB = 0x2,IPP_TAG_END = 0x3,IPP_TAG_PRINTER = 0x4,IPP_TAG_UNSUPPORTED_GROUP = 0x5,IPP_TAG_SUBSCRIPTION = 0x6,IPP_TAG_EVENT_NOTIFICATION = 0x7,IPP_TAG_UNSUPPORTED_VALUE = 0x10,IPP_TAG_DEFAULT = 0x11,IPP_TAG_UNKNOWN = 0x12,IPP_TAG_NOVALUE = 0x13,IPP_TAG_NOTSETTABLE = 0x15,IPP_TAG_DELETEATTR = 0x16,IPP_TAG_ADMINDEFINE = 0x17,IPP_TAG_INTEGER = 0x21,IPP_TAG_BOOLEAN = 0x22,IPP_TAG_ENUM = 0x23,IPP_TAG_STRING = 0x30,IPP_TAG_DATE = 0x31,IPP_TAG_RESOLUTION = 0x32,IPP_TAG_RANGE = 0x33,IPP_TAG_BEGIN_COLLECTION = 0x34,IPP_TAG_TEXTLANG = 0x35,IPP_TAG_NAMELANG = 0x36,IPP_TAG_END_COLLECTION = 0x37,IPP_TAG_TEXT = 0x41,IPP_TAG_NAME = 0x42,IPP_TAG_RESERVED_STRING = 0x43,IPP_TAG_KEYWORD = 0x44,IPP_TAG_URI = 0x45,IPP_TAG_URISCHEME = 0x46,IPP_TAG_CHARSET = 0x47,IPP_TAG_LANGUAGE = 0x48,IPP_TAG_MIMETYPE = 0x49,IPP_TAG_MEMBERNAME = 0x4A,IPP_TAG_MASK = 0x7FFFFFFF,IPP_TAG_COPY = 0x80000000,};
typedef enum ipp_tag_e ipp_tag_t;
typedef unsigned __int8 ipp_uchar_t;
typedef union ipp_value_u ipp_value_t;
union ipp_value_u {int integer;char boolean;ipp_uchar_t date[11];struct ipp_value_u::$E1A4022D81728FCD57DFF225EC9961C7 resolution;struct ipp_value_u::$962D1BBE228906325E858AE60F230356 range;struct ipp_value_u::$2EAE0BB3D4A3175EA6C32A3B77B08580 string;struct ipp_value_u::$55ACB418F06CBD9C81C19431B78B54E0 unknown;ipp_t *collection;};
struct ipp_value_u::$2EAE0BB3D4A3175EA6C32A3B77B08580 {char *charset;char *text;};
struct ipp_value_u::$55ACB418F06CBD9C81C19431B78B54E0 {int length;void *data;};
struct ipp_value_u::$962D1BBE228906325E858AE60F230356 {int lower;int upper;};
struct ipp_value_u::$E1A4022D81728FCD57DFF225EC9961C7 {int xres;int yres;ipp_res_t units;};
struct ipq;
struct ipsecstat {u_quad_t in_success;u_quad_t in_polvio;u_quad_t in_nosa;u_quad_t in_inval;u_quad_t in_nomem;u_quad_t in_badspi;u_quad_t in_ahreplay;u_quad_t in_espreplay;u_quad_t in_ahauthsucc;u_quad_t in_ahauthfail;u_quad_t in_espauthsucc;u_quad_t in_espauthfail;u_quad_t in_esphist[256];u_quad_t in_ahhist[256];u_quad_t in_comphist[256];u_quad_t out_success;u_quad_t out_polvio;u_quad_t out_nosa;u_quad_t out_inval;u_quad_t out_nomem;u_quad_t out_noroute;u_quad_t out_esphist[256];u_quad_t out_ahhist[256];u_quad_t out_comphist[256];};
struct ipstat {u_int32_t ips_total;u_int32_t ips_badsum;u_int32_t ips_tooshort;u_int32_t ips_toosmall;u_int32_t ips_badhlen;u_int32_t ips_badlen;u_int32_t ips_fragments;u_int32_t ips_fragdropped;u_int32_t ips_fragtimeout;u_int32_t ips_forward;u_int32_t ips_fastforward;u_int32_t ips_cantforward;u_int32_t ips_redirectsent;u_int32_t ips_noproto;u_int32_t ips_delivered;u_int32_t ips_localout;u_int32_t ips_odropped;u_int32_t ips_reassembled;u_int32_t ips_fragmented;u_int32_t ips_ofragments;u_int32_t ips_cantfrag;u_int32_t ips_badoptions;u_int32_t ips_noroute;u_int32_t ips_badvers;u_int32_t ips_rawout;u_int32_t ips_toolong;u_int32_t ips_notmember;u_int32_t ips_nogif;u_int32_t ips_badaddr;};
struct ipv6_mreq {struct in6_addr ipv6mr_multiaddr;unsigned int ipv6mr_interface;};
typedef int (__cdecl *isStandaloneSAXFunc)(void *ctx);
struct itimerval {struct timeval it_interval;struct timeval it_value;};
typedef int jmp_buf[37];
struct kauth_ace {guid_t ace_applicable;u_int32_t ace_flags;kauth_ace_rights_t ace_rights;};
typedef u_int32_t kauth_ace_rights_t;
typedef struct kauth_ace *kauth_ace_t;
struct kauth_acl {u_int32_t acl_entrycount;u_int32_t acl_flags;struct kauth_ace acl_ace[1];};
typedef struct kauth_acl *kauth_acl_t;
typedef struct ucred *kauth_cred_t;
struct kauth_filesec {u_int32_t fsec_magic;guid_t fsec_owner;guid_t fsec_group;struct kauth_acl fsec_acl;};
typedef struct kauth_filesec *kauth_filesec_t;
struct kauth_identity_extlookup {u_int32_t el_seqno;u_int32_t el_result;u_int32_t el_flags;__darwin_pid_t el_info_pid;u_int64_t el_extend;u_int32_t el_info_reserved_1;uid_t el_uid;guid_t el_uguid;u_int32_t el_uguid_valid;ntsid_t el_usid;u_int32_t el_usid_valid;gid_t el_gid;guid_t el_gguid;u_int32_t el_gguid_valid;ntsid_t el_gsid;u_int32_t el_gsid_valid;u_int32_t el_member_valid;};
struct kern_ctl_info {uint32_t kcsi_id;uint32_t kcsi_reg_unit;uint32_t kcsi_flags;uint32_t kcsi_recvbufsize;uint32_t kcsi_sendbufsize;uint32_t kcsi_unit;char kcsi_name[96];};
struct kern_event_info {uint32_t kesi_vendor_code_filter;uint32_t kesi_class_filter;uint32_t kesi_subclass_filter;};
struct kern_event_msg {u_int32_t total_size;u_int32_t vendor_code;u_int32_t kev_class;u_int32_t kev_subclass;u_int32_t id;u_int32_t event_code;u_int32_t event_data[1];};
typedef int kern_return_t;
typedef char kernel_boot_info_t[4096];
struct kernel_resource_sizes {natural_t task;natural_t thread;natural_t port;natural_t memory_region;natural_t memory_object;};
typedef struct kernel_resource_sizes kernel_resource_sizes_data_t;
typedef struct kernel_resource_sizes *kernel_resource_sizes_t;
typedef char kernel_version_t[512];
struct kev_dl_proto_data {struct net_event_data link_data;u_int32_t proto_family;u_int32_t proto_remaining_count;};
struct kev_in6_addrlifetime {u_int32_t ia6t_expire;u_int32_t ia6t_preferred;u_int32_t ia6t_vltime;u_int32_t ia6t_pltime;};
struct kev_in6_data {struct net_event_data link_data;struct sockaddr_in6 ia_addr;struct sockaddr_in6 ia_net;struct sockaddr_in6 ia_dstaddr;struct sockaddr_in6 ia_prefixmask;u_int32_t ia_plen;u_int32_t ia6_flags;struct kev_in6_addrlifetime ia_lifetime;};
struct kev_in_collision {struct net_event_data link_data;struct in_addr ia_ipaddr;u_char hw_len;u_char hw_addr[];};
struct kev_in_data {struct net_event_data link_data;struct in_addr ia_addr;u_int32_t ia_net;u_int32_t ia_netmask;u_int32_t ia_subnet;u_int32_t ia_subnetmask;struct in_addr ia_netbroadcast;struct in_addr ia_dstaddr;};
struct kev_in_portinuse {u_int16_t port;u_int32_t req_pid;u_int32_t reserved[2];};
struct kev_request {u_int32_t vendor_code;u_int32_t kev_class;u_int32_t kev_subclass;};
struct kev_vendor_code {u_int32_t vendor_code;char vendor_string[200];};
struct kevent {uintptr_t ident;int16_t filter;uint16_t flags;uint32_t fflags;intptr_t data;void *udata;};
struct kevent64_s {uint64_t ident;int16_t filter;uint16_t flags;uint32_t fflags;int64_t data;uint64_t udata;uint64_t ext[2];};
typedef __int32_t key_t;
typedef struct $5EDD4B4F882E321F07D8AFF023DDDD7D keydat;
struct kinfo_lctx {pid_t id;int mc;};
struct kinfo_proc {struct extern_proc kp_proc;struct kinfo_proc::eproc kp_eproc;};
struct kinfo_proc::eproc {struct proc *e_paddr;struct session *e_sess;struct _pcred e_pcred;struct _ucred e_ucred;struct vmspace e_vm;pid_t e_ppid;pid_t e_pgid;__int16 e_jobc;dev_t e_tdev;pid_t e_tpgid;struct session *e_tsess;char e_wmesg[8];segsz_t e_xsize;__int16 e_xrssize;__int16 e_xccount;__int16 e_xswrss;int32_t e_flag;char e_login[12];int32_t e_spare[4];};
struct klist {struct knote *slh_first;};
struct klm_holder {int exclusive;int svid;u_int l_offset;u_int l_len;};
struct klm_lock {char *server_name;netobj fh;int pid;u_int l_offset;u_int l_len;};
struct klm_lockargs {int block;int exclusive;struct klm_lock alock;};
struct klm_stat {klm_stats stat;};
enum klm_stats {klm_granted = 0x0,klm_denied = 0x1,klm_denied_nolocks = 0x2,klm_working = 0x3,};
struct klm_testargs {int exclusive;struct klm_lock alock;};
struct klm_testrply {klm_stats stat;union klm_testrply::$40F9D261D31BF2147C1606393BAB8476 klm_testrply_u;};
union klm_testrply::$40F9D261D31BF2147C1606393BAB8476 {struct klm_holder holder;};
struct klm_unlockargs {struct klm_lock alock;};
typedef void *kmod_args_t;
typedef int kmod_control_flavor_t;
struct kmod_info {struct kmod_info *next;int32_t info_version;uint32_t id;char name[64];char version[64];int32_t reference_count;kmod_reference_t *reference_list;vm_address_t address;vm_size_t size;vm_size_t hdr_size;kmod_start_func_t *start;kmod_stop_func_t *stop;};
struct kmod_info_32_v1 {uint32_t next_addr;int32_t info_version;uint32_t id;uint8_t name[64];uint8_t version[64];int32_t reference_count;uint32_t reference_list_addr;uint32_t address;uint32_t size;uint32_t hdr_size;uint32_t start_addr;uint32_t stop_addr;};
typedef struct kmod_info_32_v1 kmod_info_32_v1_t;
struct kmod_info_64_v1 {uint64_t next_addr;int32_t info_version;uint32_t id;uint8_t name[64];uint8_t version[64];int32_t reference_count;uint64_t reference_list_addr;uint64_t address;uint64_t size;uint64_t hdr_size;uint64_t start_addr;uint64_t stop_addr;};
typedef struct kmod_info_64_v1 kmod_info_64_v1_t;
typedef kmod_info_t *kmod_info_array_t;
typedef struct kmod_info kmod_info_t;
struct kmod_reference {struct kmod_reference *next;struct kmod_info *info;};
typedef struct kmod_reference kmod_reference_t;
typedef kern_return_t __cdecl kmod_start_func_t(struct kmod_info *ki, void *data);
typedef kern_return_t __cdecl kmod_stop_func_t(struct kmod_info *ki, void *data);
typedef int kmod_t;
struct knote;
struct kqueue_fdinfo {struct proc_fileinfo pfi;struct kqueue_info kqueueinfo;};
struct kqueue_info {struct vinfo_stat kq_stat;uint32_t kq_state;uint32_t rfu_1;};
typedef struct _krb5_address krb5_address;
typedef krb5_int32 krb5_addrtype;
typedef struct _krb5_ap_rep krb5_ap_rep;
typedef struct _krb5_ap_rep_enc_part krb5_ap_rep_enc_part;
typedef struct _krb5_ap_req krb5_ap_req;
struct krb5_ap_req_st {ASN1_INTEGER *pvno;ASN1_INTEGER *msgtype;ASN1_BIT_STRING *apoptions;KRB5_TICKET *ticket;KRB5_ENCDATA *authenticator;};
typedef struct _krb5_auth_context *krb5_auth_context;
typedef struct _krb5_authdata krb5_authdata;
typedef krb5_int32 krb5_authdatatype;
typedef struct _krb5_authenticator krb5_authenticator;
struct krb5_authenticator_st {ASN1_INTEGER *avno;ASN1_GENERALSTRING *crealm;KRB5_PRINCNAME *cname;KRB5_CHECKSUM *cksum;ASN1_INTEGER *cusec;ASN1_GENERALIZEDTIME *ctime;KRB5_ENCKEY *subkey;ASN1_INTEGER *seqnum;KRB5_AUTHDATA *authorization;};
struct krb5_authorization_st {ASN1_INTEGER *adtype;ASN1_OCTET_STRING *addata;};
typedef unsigned int krb5_boolean;
typedef krb5_pointer krb5_cc_cursor;
typedef struct _krb5_cc_ops krb5_cc_ops;
typedef struct _krb5_ccache *krb5_ccache;
typedef struct _krb5_cccol_cursor *krb5_cccol_cursor;
typedef struct _krb5_checksum krb5_checksum;
struct krb5_checksum_st {ASN1_INTEGER *ctype;ASN1_OCTET_STRING *checksum;};
typedef krb5_int32 krb5_cksumtype;
typedef const void *krb5_const_pointer;
typedef const krb5_principal_data *krb5_const_principal;
typedef struct _krb5_context *krb5_context;
typedef struct _krb5_cred krb5_cred;
typedef struct _krb5_cred_enc_part krb5_cred_enc_part;
typedef struct _krb5_cred_info krb5_cred_info;
typedef struct _krb5_creds krb5_creds;
typedef struct _krb5_data krb5_data;
typedef krb5_int32 krb5_deltat;
typedef struct _krb5_enc_data krb5_enc_data;
typedef struct _krb5_enc_kdc_rep_part krb5_enc_kdc_rep_part;
typedef struct _krb5_enc_tkt_part krb5_enc_tkt_part;
struct krb5_encdata_st {ASN1_INTEGER *etype;ASN1_INTEGER *kvno;ASN1_OCTET_STRING *cipher;};
typedef struct _krb5_encrypt_block krb5_encrypt_block;
struct krb5_encryptionkey_st {ASN1_INTEGER *ktype;ASN1_OCTET_STRING *keyvalue;};
typedef krb5_int32 krb5_enctype;
typedef struct _krb5_error krb5_error;
typedef krb5_int32 krb5_error_code;
typedef krb5_int32 krb5_flags;
typedef struct _krb5_get_init_creds_opt krb5_get_init_creds_opt;
typedef struct _krb5_gic_opt_pa_data krb5_gic_opt_pa_data;
typedef krb5_error_code (__cdecl *krb5_gic_process_last_req)(krb5_context, krb5_last_req_entry **, void *);
typedef __int16 krb5_int16;
typedef int krb5_int32;
typedef struct _krb5_kdc_rep krb5_kdc_rep;
typedef struct _krb5_kdc_req krb5_kdc_req;
typedef struct _krb5_keyblock krb5_keyblock;
typedef struct _krb5_kt *krb5_keytab;
typedef struct krb5_keytab_entry_st krb5_keytab_entry;
struct krb5_keytab_entry_st {krb5_magic magic;krb5_principal principal;krb5_timestamp timestamp;krb5_kvno vno;krb5_keyblock key;};
typedef krb5_int32 krb5_keyusage;
typedef krb5_pointer krb5_kt_cursor;
typedef unsigned int krb5_kvno;
typedef struct _krb5_last_req_entry krb5_last_req_entry;
typedef krb5_error_code krb5_magic;
typedef krb5_error_code (__cdecl *krb5_mk_req_checksum_func)(krb5_context, krb5_auth_context, void *, krb5_data **);
typedef unsigned int krb5_msgtype;
typedef unsigned __int8 krb5_octet;
typedef struct _krb5_octet_data krb5_octet_data;
typedef struct _krb5_pa_data krb5_pa_data;
typedef void *krb5_pointer;
typedef krb5_int32 krb5_preauthtype;
typedef krb5_principal_data *krb5_principal;
struct krb5_principal_data {krb5_magic magic;krb5_data realm;krb5_data *data;krb5_int32 length;krb5_int32 type;};
struct krb5_princname_st {ASN1_INTEGER *nametype;STACK *namestring;};
typedef struct _krb5_prompt krb5_prompt;
typedef krb5_int32 krb5_prompt_type;
typedef krb5_error_code (__cdecl *krb5_prompter_fct)(krb5_context context, void *data, const char *name, const char *banner, int num_prompts, krb5_prompt prompts[]);
typedef struct _krb5_pwd_data krb5_pwd_data;
struct krb5_rc_st;
typedef struct krb5_rc_st *krb5_rcache;
struct krb5_replay_data {krb5_timestamp timestamp;krb5_int32 usec;krb5_ui_4 seq;};
typedef struct _krb5_response krb5_response;
typedef struct _krb5_ticket krb5_ticket;
typedef struct _krb5_ticket_times krb5_ticket_times;
typedef krb5_int32 krb5_timestamp;
typedef struct _krb5_tkt_authent krb5_tkt_authent;
struct krb5_tktbody_st {ASN1_INTEGER *tktvno;ASN1_GENERALSTRING *realm;KRB5_PRINCNAME *sname;KRB5_ENCDATA *encdata;};
typedef struct _krb5_transited krb5_transited;
typedef unsigned __int16 krb5_ui_2;
typedef unsigned int krb5_ui_4;
typedef struct _krb5_verify_init_creds_opt krb5_verify_init_creds_opt;
struct label;
typedef char *labelstr_t;
struct lastlog {time_t ll_time;char ll_line[8];char ll_host[16];};
struct lastlogx {struct timeval ll_tv;char ll_line[32];char ll_host[256];};
typedef struct _launch_data *launch_data_t;
typedef enum $0783B1A147A2695A75D59C8C4539C7EA launch_data_type_t;
struct lber_memory_fns {BER_MEMALLOC_FN *bmf_malloc;BER_MEMCALLOC_FN *bmf_calloc;BER_MEMREALLOC_FN *bmf_realloc;BER_MEMFREE_FN *bmf_free;};
union lc_str {uint32_t offset;};
typedef void lck_attr_t;
typedef void lck_grp_attr_t;
typedef void lck_grp_t;
typedef void *lck_mtx_t;
struct lconv {char *decimal_point;char *thousands_sep;char *grouping;char *int_curr_symbol;char *currency_symbol;char *mon_decimal_point;char *mon_thousands_sep;char *mon_grouping;char *positive_sign;char *negative_sign;char int_frac_digits;char frac_digits;char p_cs_precedes;char p_sep_by_space;char n_cs_precedes;char n_sep_by_space;char p_sign_posn;char n_sign_posn;char int_p_cs_precedes;char int_n_cs_precedes;char int_p_sep_by_space;char int_n_sep_by_space;char int_p_sign_posn;char int_n_sign_posn;};
struct lctx;
struct ldap;
struct ldap_apifeature_info {int ldapaif_info_version;char *ldapaif_name;int ldapaif_version;};
struct ldap_attributetype {char *at_oid;char **at_names;char *at_desc;int at_obsolete;char *at_sup_oid;char *at_equality_oid;char *at_ordering_oid;char *at_substr_oid;char *at_syntax_oid;int at_syntax_len;int at_single_value;int at_collective;int at_no_user_mod;int at_usage;LDAPSchemaExtensionItem **at_extensions;};
struct ldap_ava {struct berval la_attr;struct berval la_value;unsigned int la_flags;void *la_private;};
typedef int __cdecl ldap_conn_add_f(LDAP *ld, Sockbuf *sb, LDAPURLDesc *srv, struct sockaddr *addr, struct ldap_conncb *ctx);
typedef void __cdecl ldap_conn_del_f(LDAP *ld, Sockbuf *sb, struct ldap_conncb *ctx);
struct ldap_conncb {ldap_conn_add_f *lc_add;ldap_conn_del_f *lc_del;void *lc_arg;};
struct ldap_contentrule {char *cr_oid;char **cr_names;char *cr_desc;char **cr_sup_oids;int cr_obsolete;char **cr_oc_oids_aux;char **cr_at_oids_must;char **cr_at_oids_may;char **cr_at_oids_not;LDAPSchemaExtensionItem **cr_extensions;};
struct ldap_matchingrule {char *mr_oid;char **mr_names;char *mr_desc;int mr_obsolete;char *mr_syntax_oid;LDAPSchemaExtensionItem **mr_extensions;};
struct ldap_matchingruleuse {char *mru_oid;char **mru_names;char *mru_desc;int mru_obsolete;char **mru_applies_oids;LDAPSchemaExtensionItem **mru_extensions;};
struct ldap_nameform {char *nf_oid;char **nf_names;char *nf_desc;int nf_obsolete;char *nf_objectclass;char **nf_at_oids_must;char **nf_at_oids_may;LDAPSchemaExtensionItem **nf_extensions;};
struct ldap_objectclass {char *oc_oid;char **oc_names;char *oc_desc;int oc_obsolete;char **oc_sup_oids;int oc_kind;char **oc_at_oids_must;char **oc_at_oids_may;LDAPSchemaExtensionItem **oc_extensions;};
struct ldap_schema_extension_item {char *lsei_name;char **lsei_values;};
struct ldap_structurerule {int sr_ruleid;char **sr_names;char *sr_desc;int sr_obsolete;char *sr_nameform;int sr_nsup_ruleids;int *sr_sup_ruleids;LDAPSchemaExtensionItem **sr_extensions;};
typedef int (__cdecl *ldap_sync_intermediate_f)(ldap_sync_t *ls, LDAPMessage *msg, BerVarray syncUUIDs, ldap_sync_refresh_t phase);
typedef enum $FA84D37CEEEAC6441153FDF22E064FC6 ldap_sync_refresh_t;
typedef int (__cdecl *ldap_sync_search_entry_f)(ldap_sync_t *ls, LDAPMessage *msg, struct berval *entryUUID, ldap_sync_refresh_t phase);
typedef int (__cdecl *ldap_sync_search_reference_f)(ldap_sync_t *ls, LDAPMessage *msg);
typedef int (__cdecl *ldap_sync_search_result_f)(ldap_sync_t *ls, LDAPMessage *msg, int refreshDeletes);
struct ldap_sync_t {char *ls_base;int ls_scope;char *ls_filter;char **ls_attrs;int ls_timelimit;int ls_sizelimit;int ls_timeout;ldap_sync_search_entry_f ls_search_entry;ldap_sync_search_reference_f ls_search_reference;ldap_sync_intermediate_f ls_intermediate;ldap_sync_search_result_f ls_search_result;void *ls_private;LDAP *ls_ld;int ls_msgid;int ls_reloadHint;struct berval ls_cookie;ldap_sync_refresh_t ls_refreshPhase;};
struct ldap_syntax {char *syn_oid;char **syn_names;char *syn_desc;LDAPSchemaExtensionItem **syn_extensions;};
typedef ber_int_t ldap_ucs4_t;
struct ldap_url_desc {struct ldap_url_desc *lud_next;char *lud_scheme;char *lud_host;int lud_port;char *lud_dn;char **lud_attrs;int lud_scope;char *lud_filter;char **lud_exts;int lud_crit_exts;};
struct ldapapiinfo {int ldapai_info_version;int ldapai_api_version;int ldapai_protocol_version;char **ldapai_extensions;char *ldapai_vendor_name;int ldapai_vendor_version;};
struct ldapcontrol {char *ldctl_oid;struct berval ldctl_value;char ldctl_iscritical;};
struct ldapmod {int mod_op;char *mod_type;union ldapmod::mod_vals_u mod_vals;};
union ldapmod::mod_vals_u {char **modv_strvals;struct berval **modv_bvals;};
struct ldapmsg;
struct ldapsortkey {char *attributeType;char *orderingRule;int reverseOrder;};
struct ldapvlvinfo {ber_int_t ldvlv_version;ber_int_t ldvlv_before_count;ber_int_t ldvlv_after_count;ber_int_t ldvlv_offset;ber_int_t ldvlv_count;struct berval *ldvlv_attrvalue;struct berval *ldvlv_context;void *ldvlv_extradata;};
typedef struct $AC1F0727205AA235F31FA7E4FBAB6931 ldiv_t;
struct ldt_desc {unsigned __int16 limit00;unsigned __int16 base00;unsigned __int8 base16;unsigned __int8 type : 5;unsigned __int8 : 2;unsigned __int8 present : 1;unsigned __int8 limit16 : 4;unsigned __int8 : 3;unsigned __int8 granular : 1;unsigned __int8 base24;};
typedef struct ldt_desc ldt_desc_t;
union ldt_entry {code_desc_t code;data_desc_t data;call_gate_t call_gate;task_gate_t task_gate;};
typedef union ldt_entry ldt_entry_t;
typedef ldt_entry_t ldt_t;
typedef ledger_t *ledger_array_t;
typedef natural_t ledger_item_t;
typedef ledger_array_t ledger_port_array_t;
typedef ledger_t ledger_port_t;
typedef mach_port_t ledger_t;
struct lhash_node_st {void *data;struct lhash_node_st *next;unsigned __int64 hash;};
struct lhash_st {LHASH_NODE **b;LHASH_COMP_FN_TYPE comp;LHASH_HASH_FN_TYPE hash;unsigned int num_nodes;unsigned int num_alloc_nodes;unsigned int p;unsigned int pmax;unsigned __int64 up_load;unsigned __int64 down_load;unsigned __int64 num_items;unsigned __int64 num_expands;unsigned __int64 num_expand_reallocs;unsigned __int64 num_contracts;unsigned __int64 num_contract_reallocs;unsigned __int64 num_hash_calls;unsigned __int64 num_comp_calls;unsigned __int64 num_insert;unsigned __int64 num_replace;unsigned __int64 num_delete;unsigned __int64 num_no_delete;unsigned __int64 num_retrieve;unsigned __int64 num_retrieve_miss;unsigned __int64 num_hash_comps;int error;};
struct lineinfo {const char *buffer;const char *cursor;const char *lastchar;};
struct lineinfow {const wchar_t *buffer;const wchar_t *cursor;const wchar_t *lastchar;};
struct linger {int l_onoff;int l_linger;};
struct linkedit_data_command {uint32_t cmd;uint32_t cmdsize;uint32_t dataoff;uint32_t datasize;};
struct __attribute__((packed)) llc {u_int8_t llc_dsap;u_int8_t llc_ssap;union llc::$94526051AE93F16537B4BA3D9839A03C llc_un;};
union llc::$94526051AE93F16537B4BA3D9839A03C {struct llc::$94526051AE93F16537B4BA3D9839A03C::$3AFEBDF7A4FC08BFE9A431A2DA7430D4 type_u;struct llc::$94526051AE93F16537B4BA3D9839A03C::$A3920816D4629CE8D4A8F0ADB219F5F7 type_i;struct llc::$94526051AE93F16537B4BA3D9839A03C::$91B3B8FDADC1811899AE65C68A225D1C type_s;struct llc::$94526051AE93F16537B4BA3D9839A03C::$C255F273D17FD18D4EDDE30A2FF3191C type_frmr;__attribute__((packed)) struct llc::$94526051AE93F16537B4BA3D9839A03C::$7008580425A2D9D299FFCC87FFBB188D type_snap;struct llc::$94526051AE93F16537B4BA3D9839A03C::$D0AC4D4AA87A2DEF3381B9718ACFF2C3 type_raw;};
struct llc::$94526051AE93F16537B4BA3D9839A03C::$3AFEBDF7A4FC08BFE9A431A2DA7430D4 {u_int8_t control;u_int8_t format_id;u_int8_t class_id;u_int8_t window_x2;};
struct __attribute__((packed)) llc::$94526051AE93F16537B4BA3D9839A03C::$7008580425A2D9D299FFCC87FFBB188D {u_int8_t control;u_int8_t org_code[3];u_int16_t ether_type;};
struct llc::$94526051AE93F16537B4BA3D9839A03C::$91B3B8FDADC1811899AE65C68A225D1C {u_int8_t control;u_int8_t num_rcv_x2;};
struct llc::$94526051AE93F16537B4BA3D9839A03C::$A3920816D4629CE8D4A8F0ADB219F5F7 {u_int8_t num_snd_x2;u_int8_t num_rcv_x2;};
struct llc::$94526051AE93F16537B4BA3D9839A03C::$C255F273D17FD18D4EDDE30A2FF3191C {u_int8_t control;u_int8_t frmr_rej_pdu0;u_int8_t frmr_rej_pdu1;u_int8_t frmr_control;u_int8_t frmr_control_ext;u_int8_t frmr_cause;};
struct llc::$94526051AE93F16537B4BA3D9839A03C::$D0AC4D4AA87A2DEF3381B9718ACFF2C3 {u_int8_t control;u_int8_t control_ext;};
typedef struct $AC1F0727205AA235F31FA7E4FBAB6931 lldiv_t;
struct load_command {uint32_t cmd;uint32_t cmdsize;};
struct loadavg {fixpt_t ldavg[3];__int64 fscale;};
typedef struct _xlocale *locale_t;
typedef lock_set_t lock_set_port_t;
typedef mach_port_t lock_set_t;
struct lockd_ans {int la_version;int la_errno;u_int64_t la_xid;int la_flags;pid_t la_pid;off_t la_start;off_t la_len;int la_fh_len;u_int8_t la_fh[64];};
struct lockd_notify {int ln_version;int ln_flags;int ln_pad;int ln_addrcount;struct sockaddr_storage ln_addr[1];};
struct lockf {__int16 lf_flags;__int16 lf_type;off_t lf_start;off_t lf_end;caddr_t lf_id;struct lockf **lf_head;struct vnode *lf_vnode;struct lockf *lf_next;struct locklist lf_blkhd;struct lockf::$8E53988229C36DA83A3F462691E29587 lf_block;};
struct lockf::$8E53988229C36DA83A3F462691E29587 {struct lockf *tqe_next;struct lockf **tqe_prev;};
struct lockgroup_info {char lockgroup_name[64];uint64_t lockgroup_attr;uint64_t lock_spin_cnt;uint64_t lock_spin_util_cnt;uint64_t lock_spin_held_cnt;uint64_t lock_spin_miss_cnt;uint64_t lock_spin_held_max;uint64_t lock_spin_held_cum;uint64_t lock_mtx_cnt;uint64_t lock_mtx_util_cnt;uint64_t lock_mtx_held_cnt;uint64_t lock_mtx_miss_cnt;uint64_t lock_mtx_wait_cnt;uint64_t lock_mtx_held_max;uint64_t lock_mtx_held_cum;uint64_t lock_mtx_wait_max;uint64_t lock_mtx_wait_cum;uint64_t lock_rw_cnt;uint64_t lock_rw_util_cnt;uint64_t lock_rw_held_cnt;uint64_t lock_rw_miss_cnt;uint64_t lock_rw_wait_cnt;uint64_t lock_rw_held_max;uint64_t lock_rw_held_cum;uint64_t lock_rw_wait_max;uint64_t lock_rw_wait_cum;};
typedef lockgroup_info_t *lockgroup_info_array_t;
typedef struct lockgroup_info lockgroup_info_t;
struct locklist {struct lockf *tqh_first;struct lockf **tqh_last;};
struct log2phys {unsigned int l2p_flags;off_t l2p_contigbytes;off_t l2p_devoffset;};
typedef log_rec_t *log_ptr_t;
typedef struct $FBA7D87DC326A635240EF53AE056B982 log_rec_t;
typedef struct lt__advise *lt_dladvise;
typedef struct lt__handle *lt_dlhandle;
typedef int __cdecl lt_dlhandle_interface(lt_dlhandle handle, const char *id_string);
typedef struct $2B2E2AA3D14CF05952EA09DDB52B4A5A lt_dlinfo;
typedef void *lt_dlinterface_id;
typedef void *lt_dlloader;
typedef int __cdecl lt_dlloader_exit(lt_user_data data);
typedef int __cdecl lt_dlloader_init(lt_user_data data);
typedef enum $E9DBAC0AE96102AB36550954105F0957 lt_dlloader_priority;
typedef int __cdecl lt_dlpreload_callback_func(lt_dlhandle handle);
typedef struct $5CF04B6421DF2D20D24DDD28F16D3C2A lt_dlsymlist;
typedef struct $1A1AE55D2EE57EB13DB3E8FFAFC89EF6 lt_dlvtable;
typedef void *__cdecl lt_find_sym(lt_user_data data, lt_module module, const char *symbolname);
typedef const lt_dlvtable *__cdecl lt_get_vtable(lt_user_data data);
typedef void *lt_module;
typedef int __cdecl lt_module_close(lt_user_data data, lt_module module);
typedef lt_module __cdecl lt_module_open(lt_user_data data, const char *filename, lt_dladvise advise);
typedef void *lt_user_data;
struct ltchars {char t_suspc;char t_dsuspc;char t_rprntc;char t_flushc;char t_werasc;char t_lnextc;};
struct mac {size_t m_buflen;char *m_string;};
struct mac_module_data;
struct mac_policy_conf {const char *mpc_name;const char *mpc_fullname;const char **mpc_labelnames;unsigned int mpc_labelname_count;struct mac_policy_ops *mpc_ops;int mpc_loadtime_flags;int *mpc_field_off;int mpc_runtime_flags;struct mac_policy_conf *mpc_list;void *mpc_data;};
typedef unsigned int mac_policy_handle_t;
struct mac_policy_ops {mpo_audit_check_postselect_t *mpo_audit_check_postselect;mpo_audit_check_preselect_t *mpo_audit_check_preselect;mpo_bpfdesc_label_associate_t *mpo_bpfdesc_label_associate;mpo_bpfdesc_label_destroy_t *mpo_bpfdesc_label_destroy;mpo_bpfdesc_label_init_t *mpo_bpfdesc_label_init;mpo_bpfdesc_check_receive_t *mpo_bpfdesc_check_receive;mpo_cred_check_label_update_execve_t *mpo_cred_check_label_update_execve;mpo_cred_check_label_update_t *mpo_cred_check_label_update;mpo_cred_check_visible_t *mpo_cred_check_visible;mpo_cred_label_associate_fork_t *mpo_cred_label_associate_fork;mpo_cred_label_associate_kernel_t *mpo_cred_label_associate_kernel;mpo_cred_label_associate_t *mpo_cred_label_associate;mpo_cred_label_associate_user_t *mpo_cred_label_associate_user;mpo_cred_label_destroy_t *mpo_cred_label_destroy;mpo_cred_label_externalize_audit_t *mpo_cred_label_externalize_audit;mpo_cred_label_externalize_t *mpo_cred_label_externalize;mpo_cred_label_init_t *mpo_cred_label_init;mpo_cred_label_internalize_t *mpo_cred_label_internalize;mpo_cred_label_update_execve_t *mpo_cred_label_update_execve;mpo_cred_label_update_t *mpo_cred_label_update;mpo_devfs_label_associate_device_t *mpo_devfs_label_associate_device;mpo_devfs_label_associate_directory_t *mpo_devfs_label_associate_directory;mpo_devfs_label_copy_t *mpo_devfs_label_copy;mpo_devfs_label_destroy_t *mpo_devfs_label_destroy;mpo_devfs_label_init_t *mpo_devfs_label_init;mpo_devfs_label_update_t *mpo_devfs_label_update;mpo_file_check_change_offset_t *mpo_file_check_change_offset;mpo_file_check_create_t *mpo_file_check_create;mpo_file_check_dup_t *mpo_file_check_dup;mpo_file_check_fcntl_t *mpo_file_check_fcntl;mpo_file_check_get_offset_t *mpo_file_check_get_offset;mpo_file_check_get_t *mpo_file_check_get;mpo_file_check_inherit_t *mpo_file_check_inherit;mpo_file_check_ioctl_t *mpo_file_check_ioctl;mpo_file_check_lock_t *mpo_file_check_lock;mpo_file_check_mmap_downgrade_t *mpo_file_check_mmap_downgrade;mpo_file_check_mmap_t *mpo_file_check_mmap;mpo_file_check_receive_t *mpo_file_check_receive;mpo_file_check_set_t *mpo_file_check_set;mpo_file_label_init_t *mpo_file_label_init;mpo_file_label_destroy_t *mpo_file_label_destroy;mpo_file_label_associate_t *mpo_file_label_associate;mpo_ifnet_check_label_update_t *mpo_ifnet_check_label_update;mpo_ifnet_check_transmit_t *mpo_ifnet_check_transmit;mpo_ifnet_label_associate_t *mpo_ifnet_label_associate;mpo_ifnet_label_copy_t *mpo_ifnet_label_copy;mpo_ifnet_label_destroy_t *mpo_ifnet_label_destroy;mpo_ifnet_label_externalize_t *mpo_ifnet_label_externalize;mpo_ifnet_label_init_t *mpo_ifnet_label_init;mpo_ifnet_label_internalize_t *mpo_ifnet_label_internalize;mpo_ifnet_label_update_t *mpo_ifnet_label_update;mpo_ifnet_label_recycle_t *mpo_ifnet_label_recycle;mpo_inpcb_check_deliver_t *mpo_inpcb_check_deliver;mpo_inpcb_label_associate_t *mpo_inpcb_label_associate;mpo_inpcb_label_destroy_t *mpo_inpcb_label_destroy;mpo_inpcb_label_init_t *mpo_inpcb_label_init;mpo_inpcb_label_recycle_t *mpo_inpcb_label_recycle;mpo_inpcb_label_update_t *mpo_inpcb_label_update;mpo_iokit_check_device_t *mpo_iokit_check_device;mpo_ipq_label_associate_t *mpo_ipq_label_associate;mpo_ipq_label_compare_t *mpo_ipq_label_compare;mpo_ipq_label_destroy_t *mpo_ipq_label_destroy;mpo_ipq_label_init_t *mpo_ipq_label_init;mpo_ipq_label_update_t *mpo_ipq_label_update;mpo_lctx_check_label_update_t *mpo_lctx_check_label_update;mpo_lctx_label_destroy_t *mpo_lctx_label_destroy;mpo_lctx_label_externalize_t *mpo_lctx_label_externalize;mpo_lctx_label_init_t *mpo_lctx_label_init;mpo_lctx_label_internalize_t *mpo_lctx_label_internalize;mpo_lctx_label_update_t *mpo_lctx_label_update;mpo_lctx_notify_create_t *mpo_lctx_notify_create;mpo_lctx_notify_join_t *mpo_lctx_notify_join;mpo_lctx_notify_leave_t *mpo_lctx_notify_leave;mpo_mbuf_label_associate_bpfdesc_t *mpo_mbuf_label_associate_bpfdesc;mpo_mbuf_label_associate_ifnet_t *mpo_mbuf_label_associate_ifnet;mpo_mbuf_label_associate_inpcb_t *mpo_mbuf_label_associate_inpcb;mpo_mbuf_label_associate_ipq_t *mpo_mbuf_label_associate_ipq;mpo_mbuf_label_associate_linklayer_t *mpo_mbuf_label_associate_linklayer;mpo_mbuf_label_associate_multicast_encap_t *mpo_mbuf_label_associate_multicast_encap;mpo_mbuf_label_associate_netlayer_t *mpo_mbuf_label_associate_netlayer;mpo_mbuf_label_associate_socket_t *mpo_mbuf_label_associate_socket;mpo_mbuf_label_copy_t *mpo_mbuf_label_copy;mpo_mbuf_label_destroy_t *mpo_mbuf_label_destroy;mpo_mbuf_label_init_t *mpo_mbuf_label_init;mpo_mount_check_fsctl_t *mpo_mount_check_fsctl;mpo_mount_check_getattr_t *mpo_mount_check_getattr;mpo_mount_check_label_update_t *mpo_mount_check_label_update;mpo_mount_check_mount_t *mpo_mount_check_mount;mpo_mount_check_remount_t *mpo_mount_check_remount;mpo_mount_check_setattr_t *mpo_mount_check_setattr;mpo_mount_check_stat_t *mpo_mount_check_stat;mpo_mount_check_umount_t *mpo_mount_check_umount;mpo_mount_label_associate_t *mpo_mount_label_associate;mpo_mount_label_destroy_t *mpo_mount_label_destroy;mpo_mount_label_externalize_t *mpo_mount_label_externalize;mpo_mount_label_init_t *mpo_mount_label_init;mpo_mount_label_internalize_t *mpo_mount_label_internalize;mpo_netinet_fragment_t *mpo_netinet_fragment;mpo_netinet_icmp_reply_t *mpo_netinet_icmp_reply;mpo_netinet_tcp_reply_t *mpo_netinet_tcp_reply;mpo_pipe_check_ioctl_t *mpo_pipe_check_ioctl;mpo_pipe_check_kqfilter_t *mpo_pipe_check_kqfilter;mpo_pipe_check_label_update_t *mpo_pipe_check_label_update;mpo_pipe_check_read_t *mpo_pipe_check_read;mpo_pipe_check_select_t *mpo_pipe_check_select;mpo_pipe_check_stat_t *mpo_pipe_check_stat;mpo_pipe_check_write_t *mpo_pipe_check_write;mpo_pipe_label_associate_t *mpo_pipe_label_associate;mpo_pipe_label_copy_t *mpo_pipe_label_copy;mpo_pipe_label_destroy_t *mpo_pipe_label_destroy;mpo_pipe_label_externalize_t *mpo_pipe_label_externalize;mpo_pipe_label_init_t *mpo_pipe_label_init;mpo_pipe_label_internalize_t *mpo_pipe_label_internalize;mpo_pipe_label_update_t *mpo_pipe_label_update;mpo_policy_destroy_t *mpo_policy_destroy;mpo_policy_init_t *mpo_policy_init;mpo_policy_initbsd_t *mpo_policy_initbsd;mpo_policy_syscall_t *mpo_policy_syscall;mpo_port_check_copy_send_t *mpo_port_check_copy_send;mpo_port_check_hold_receive_t *mpo_port_check_hold_receive;mpo_port_check_hold_send_once_t *mpo_port_check_hold_send_once;mpo_port_check_hold_send_t *mpo_port_check_hold_send;mpo_port_check_label_update_t *mpo_port_check_label_update;mpo_port_check_make_send_once_t *mpo_port_check_make_send_once;mpo_port_check_make_send_t *mpo_port_check_make_send;mpo_port_check_method_t *mpo_port_check_method;mpo_port_check_move_receive_t *mpo_port_check_move_receive;mpo_port_check_move_send_once_t *mpo_port_check_move_send_once;mpo_port_check_move_send_t *mpo_port_check_move_send;mpo_port_check_receive_t *mpo_port_check_receive;mpo_port_check_send_t *mpo_port_check_send;mpo_port_check_service_t *mpo_port_check_service;mpo_port_label_associate_kernel_t *mpo_port_label_associate_kernel;mpo_port_label_associate_t *mpo_port_label_associate;mpo_port_label_compute_t *mpo_port_label_compute;mpo_port_label_copy_t *mpo_port_label_copy;mpo_port_label_destroy_t *mpo_port_label_destroy;mpo_port_label_init_t *mpo_port_label_init;mpo_port_label_update_cred_t *mpo_port_label_update_cred;mpo_port_label_update_kobject_t *mpo_port_label_update_kobject;mpo_posixsem_check_create_t *mpo_posixsem_check_create;mpo_posixsem_check_open_t *mpo_posixsem_check_open;mpo_posixsem_check_post_t *mpo_posixsem_check_post;mpo_posixsem_check_unlink_t *mpo_posixsem_check_unlink;mpo_posixsem_check_wait_t *mpo_posixsem_check_wait;mpo_posixsem_label_associate_t *mpo_posixsem_label_associate;mpo_posixsem_label_destroy_t *mpo_posixsem_label_destroy;mpo_posixsem_label_init_t *mpo_posixsem_label_init;mpo_posixshm_check_create_t *mpo_posixshm_check_create;mpo_posixshm_check_mmap_t *mpo_posixshm_check_mmap;mpo_posixshm_check_open_t *mpo_posixshm_check_open;mpo_posixshm_check_stat_t *mpo_posixshm_check_stat;mpo_posixshm_check_truncate_t *mpo_posixshm_check_truncate;mpo_posixshm_check_unlink_t *mpo_posixshm_check_unlink;mpo_posixshm_label_associate_t *mpo_posixshm_label_associate;mpo_posixshm_label_destroy_t *mpo_posixshm_label_destroy;mpo_posixshm_label_init_t *mpo_posixshm_label_init;mpo_proc_check_debug_t *mpo_proc_check_debug;mpo_proc_check_fork_t *mpo_proc_check_fork;mpo_proc_check_get_task_name_t *mpo_proc_check_get_task_name;mpo_proc_check_get_task_t *mpo_proc_check_get_task;mpo_proc_check_getaudit_t *mpo_proc_check_getaudit;mpo_proc_check_getauid_t *mpo_proc_check_getauid;mpo_proc_check_getlcid_t *mpo_proc_check_getlcid;mpo_proc_check_mprotect_t *mpo_proc_check_mprotect;mpo_proc_check_sched_t *mpo_proc_check_sched;mpo_proc_check_setaudit_t *mpo_proc_check_setaudit;mpo_proc_check_setauid_t *mpo_proc_check_setauid;mpo_proc_check_setlcid_t *mpo_proc_check_setlcid;mpo_proc_check_signal_t *mpo_proc_check_signal;mpo_proc_check_wait_t *mpo_proc_check_wait;mpo_proc_label_destroy_t *mpo_proc_label_destroy;mpo_proc_label_init_t *mpo_proc_label_init;mpo_socket_check_accept_t *mpo_socket_check_accept;mpo_socket_check_accepted_t *mpo_socket_check_accepted;mpo_socket_check_bind_t *mpo_socket_check_bind;mpo_socket_check_connect_t *mpo_socket_check_connect;mpo_socket_check_create_t *mpo_socket_check_create;mpo_socket_check_deliver_t *mpo_socket_check_deliver;mpo_socket_check_kqfilter_t *mpo_socket_check_kqfilter;mpo_socket_check_label_update_t *mpo_socket_check_label_update;mpo_socket_check_listen_t *mpo_socket_check_listen;mpo_socket_check_receive_t *mpo_socket_check_receive;mpo_socket_check_received_t *mpo_socket_check_received;mpo_socket_check_select_t *mpo_socket_check_select;mpo_socket_check_send_t *mpo_socket_check_send;mpo_socket_check_stat_t *mpo_socket_check_stat;mpo_socket_check_setsockopt_t *mpo_socket_check_setsockopt;mpo_socket_check_getsockopt_t *mpo_socket_check_getsockopt;mpo_socket_label_associate_accept_t *mpo_socket_label_associate_accept;mpo_socket_label_associate_t *mpo_socket_label_associate;mpo_socket_label_copy_t *mpo_socket_label_copy;mpo_socket_label_destroy_t *mpo_socket_label_destroy;mpo_socket_label_externalize_t *mpo_socket_label_externalize;mpo_socket_label_init_t *mpo_socket_label_init;mpo_socket_label_internalize_t *mpo_socket_label_internalize;mpo_socket_label_update_t *mpo_socket_label_update;mpo_socketpeer_label_associate_mbuf_t *mpo_socketpeer_label_associate_mbuf;mpo_socketpeer_label_associate_socket_t *mpo_socketpeer_label_associate_socket;mpo_socketpeer_label_destroy_t *mpo_socketpeer_label_destroy;mpo_socketpeer_label_externalize_t *mpo_socketpeer_label_externalize;mpo_socketpeer_label_init_t *mpo_socketpeer_label_init;mpo_system_check_acct_t *mpo_system_check_acct;mpo_system_check_audit_t *mpo_system_check_audit;mpo_system_check_auditctl_t *mpo_system_check_auditctl;mpo_system_check_auditon_t *mpo_system_check_auditon;mpo_system_check_host_priv_t *mpo_system_check_host_priv;mpo_system_check_nfsd_t *mpo_system_check_nfsd;mpo_system_check_reboot_t *mpo_system_check_reboot;mpo_system_check_settime_t *mpo_system_check_settime;mpo_system_check_swapoff_t *mpo_system_check_swapoff;mpo_system_check_swapon_t *mpo_system_check_swapon;mpo_system_check_sysctl_t *mpo_system_check_sysctl;mpo_sysvmsg_label_associate_t *mpo_sysvmsg_label_associate;mpo_sysvmsg_label_destroy_t *mpo_sysvmsg_label_destroy;mpo_sysvmsg_label_init_t *mpo_sysvmsg_label_init;mpo_sysvmsg_label_recycle_t *mpo_sysvmsg_label_recycle;mpo_sysvmsq_check_enqueue_t *mpo_sysvmsq_check_enqueue;mpo_sysvmsq_check_msgrcv_t *mpo_sysvmsq_check_msgrcv;mpo_sysvmsq_check_msgrmid_t *mpo_sysvmsq_check_msgrmid;mpo_sysvmsq_check_msqctl_t *mpo_sysvmsq_check_msqctl;mpo_sysvmsq_check_msqget_t *mpo_sysvmsq_check_msqget;mpo_sysvmsq_check_msqrcv_t *mpo_sysvmsq_check_msqrcv;mpo_sysvmsq_check_msqsnd_t *mpo_sysvmsq_check_msqsnd;mpo_sysvmsq_label_associate_t *mpo_sysvmsq_label_associate;mpo_sysvmsq_label_destroy_t *mpo_sysvmsq_label_destroy;mpo_sysvmsq_label_init_t *mpo_sysvmsq_label_init;mpo_sysvmsq_label_recycle_t *mpo_sysvmsq_label_recycle;mpo_sysvsem_check_semctl_t *mpo_sysvsem_check_semctl;mpo_sysvsem_check_semget_t *mpo_sysvsem_check_semget;mpo_sysvsem_check_semop_t *mpo_sysvsem_check_semop;mpo_sysvsem_label_associate_t *mpo_sysvsem_label_associate;mpo_sysvsem_label_destroy_t *mpo_sysvsem_label_destroy;mpo_sysvsem_label_init_t *mpo_sysvsem_label_init;mpo_sysvsem_label_recycle_t *mpo_sysvsem_label_recycle;mpo_sysvshm_check_shmat_t *mpo_sysvshm_check_shmat;mpo_sysvshm_check_shmctl_t *mpo_sysvshm_check_shmctl;mpo_sysvshm_check_shmdt_t *mpo_sysvshm_check_shmdt;mpo_sysvshm_check_shmget_t *mpo_sysvshm_check_shmget;mpo_sysvshm_label_associate_t *mpo_sysvshm_label_associate;mpo_sysvshm_label_destroy_t *mpo_sysvshm_label_destroy;mpo_sysvshm_label_init_t *mpo_sysvshm_label_init;mpo_sysvshm_label_recycle_t *mpo_sysvshm_label_recycle;mpo_task_label_associate_kernel_t *mpo_task_label_associate_kernel;mpo_task_label_associate_t *mpo_task_label_associate;mpo_task_label_copy_t *mpo_task_label_copy;mpo_task_label_destroy_t *mpo_task_label_destroy;mpo_task_label_externalize_t *mpo_task_label_externalize;mpo_task_label_init_t *mpo_task_label_init;mpo_task_label_internalize_t *mpo_task_label_internalize;mpo_task_label_update_t *mpo_task_label_update;mpo_iokit_check_hid_control_t *mpo_iokit_check_hid_control;mpo_vnode_check_access_t *mpo_vnode_check_access;mpo_vnode_check_chdir_t *mpo_vnode_check_chdir;mpo_vnode_check_chroot_t *mpo_vnode_check_chroot;mpo_vnode_check_create_t *mpo_vnode_check_create;mpo_vnode_check_deleteextattr_t *mpo_vnode_check_deleteextattr;mpo_vnode_check_exchangedata_t *mpo_vnode_check_exchangedata;mpo_vnode_check_exec_t *mpo_vnode_check_exec;mpo_vnode_check_getattrlist_t *mpo_vnode_check_getattrlist;mpo_vnode_check_getextattr_t *mpo_vnode_check_getextattr;mpo_vnode_check_ioctl_t *mpo_vnode_check_ioctl;mpo_vnode_check_kqfilter_t *mpo_vnode_check_kqfilter;mpo_vnode_check_label_update_t *mpo_vnode_check_label_update;mpo_vnode_check_link_t *mpo_vnode_check_link;mpo_vnode_check_listextattr_t *mpo_vnode_check_listextattr;mpo_vnode_check_lookup_t *mpo_vnode_check_lookup;mpo_vnode_check_open_t *mpo_vnode_check_open;mpo_vnode_check_read_t *mpo_vnode_check_read;mpo_vnode_check_readdir_t *mpo_vnode_check_readdir;mpo_vnode_check_readlink_t *mpo_vnode_check_readlink;mpo_vnode_check_rename_from_t *mpo_vnode_check_rename_from;mpo_vnode_check_rename_to_t *mpo_vnode_check_rename_to;mpo_vnode_check_revoke_t *mpo_vnode_check_revoke;mpo_vnode_check_select_t *mpo_vnode_check_select;mpo_vnode_check_setattrlist_t *mpo_vnode_check_setattrlist;mpo_vnode_check_setextattr_t *mpo_vnode_check_setextattr;mpo_vnode_check_setflags_t *mpo_vnode_check_setflags;mpo_vnode_check_setmode_t *mpo_vnode_check_setmode;mpo_vnode_check_setowner_t *mpo_vnode_check_setowner;mpo_vnode_check_setutimes_t *mpo_vnode_check_setutimes;mpo_vnode_check_stat_t *mpo_vnode_check_stat;mpo_vnode_check_truncate_t *mpo_vnode_check_truncate;mpo_vnode_check_unlink_t *mpo_vnode_check_unlink;mpo_vnode_check_write_t *mpo_vnode_check_write;mpo_vnode_label_associate_devfs_t *mpo_vnode_label_associate_devfs;mpo_vnode_label_associate_extattr_t *mpo_vnode_label_associate_extattr;mpo_vnode_label_associate_file_t *mpo_vnode_label_associate_file;mpo_vnode_label_associate_pipe_t *mpo_vnode_label_associate_pipe;mpo_vnode_label_associate_posixsem_t *mpo_vnode_label_associate_posixsem;mpo_vnode_label_associate_posixshm_t *mpo_vnode_label_associate_posixshm;mpo_vnode_label_associate_singlelabel_t *mpo_vnode_label_associate_singlelabel;mpo_vnode_label_associate_socket_t *mpo_vnode_label_associate_socket;mpo_vnode_label_copy_t *mpo_vnode_label_copy;mpo_vnode_label_destroy_t *mpo_vnode_label_destroy;mpo_vnode_label_externalize_audit_t *mpo_vnode_label_externalize_audit;mpo_vnode_label_externalize_t *mpo_vnode_label_externalize;mpo_vnode_label_init_t *mpo_vnode_label_init;mpo_vnode_label_internalize_t *mpo_vnode_label_internalize;mpo_vnode_label_recycle_t *mpo_vnode_label_recycle;mpo_vnode_label_store_t *mpo_vnode_label_store;mpo_vnode_label_update_extattr_t *mpo_vnode_label_update_extattr;mpo_vnode_label_update_t *mpo_vnode_label_update;mpo_vnode_notify_create_t *mpo_vnode_notify_create;mpo_vnode_check_signature_t *mpo_vnode_check_signature;mpo_vnode_check_uipc_bind_t *mpo_vnode_check_uipc_bind;mpo_vnode_check_uipc_connect_t *mpo_vnode_check_uipc_connect;mac_proc_check_run_cs_invalid_t *mpo_proc_check_run_cs_invalid;mpo_proc_check_suspend_resume_t *mpo_proc_check_suspend_resume;mpo_reserved_hook_t *mpo_reserved12;mpo_iokit_check_set_properties_t *mpo_iokit_check_set_properties;mpo_system_check_chud_t *mpo_system_check_chud;mpo_vnode_check_searchfs_t *mpo_vnode_check_searchfs;mpo_priv_check_t *mpo_priv_check;mpo_priv_grant_t *mpo_priv_grant;mpo_proc_check_map_anon_t *mpo_proc_check_map_anon;mpo_vnode_check_fsgetpath_t *mpo_vnode_check_fsgetpath;mpo_iokit_check_open_t *mpo_iokit_check_open;mpo_vnode_notify_rename_t *mpo_vnode_notify_rename;mpo_reserved_hook_t *mpo_reserved14;mpo_reserved_hook_t *mpo_reserved15;mpo_reserved_hook_t *mpo_reserved16;mpo_reserved_hook_t *mpo_reserved17;mpo_reserved_hook_t *mpo_reserved18;mpo_reserved_hook_t *mpo_reserved19;mpo_reserved_hook_t *mpo_reserved20;mpo_reserved_hook_t *mpo_reserved21;mpo_reserved_hook_t *mpo_reserved22;mpo_reserved_hook_t *mpo_reserved23;mpo_reserved_hook_t *mpo_reserved24;mpo_reserved_hook_t *mpo_reserved25;mpo_reserved_hook_t *mpo_reserved26;mpo_reserved_hook_t *mpo_reserved27;mpo_reserved_hook_t *mpo_reserved28;mpo_reserved_hook_t *mpo_reserved29;};
typedef int __cdecl mac_proc_check_run_cs_invalid_t(struct proc *p);
typedef struct mac *mac_t;
typedef struct $211858A17FC3AA3AF7FB370462C716CC mach_dead_name_notification_t;
typedef mach_error_t (*mach_error_fn_t)(void);
typedef kern_return_t mach_error_t;
typedef mach_exception_data_type_t mach_exception_code_t;
typedef mach_exception_data_type_t *mach_exception_data_t;
typedef int64_t mach_exception_data_type_t;
typedef mach_exception_data_type_t mach_exception_subcode_t;
struct mach_header {uint32_t magic;cpu_type_t cputype;cpu_subtype_t cpusubtype;uint32_t filetype;uint32_t ncmds;uint32_t sizeofcmds;uint32_t flags;};
struct mach_header_64 {uint32_t magic;cpu_type_t cputype;cpu_subtype_t cpusubtype;uint32_t filetype;uint32_t ncmds;uint32_t sizeofcmds;uint32_t flags;uint32_t reserved;};
typedef struct $0FCB944A5BB18021AD7F056168D15B92 mach_msg_audit_trailer_t;
typedef struct $466E19AC50622C269D9BCEE6753F9E61 mach_msg_base_t;
typedef unsigned int mach_msg_bits_t;
typedef struct $E97267E034E71568AADDE042A76192B8 mach_msg_body_t;
typedef struct $BA1BAA97A85BF93D870BFCA3692BE7F3 mach_msg_context_trailer_t;
typedef unsigned int mach_msg_copy_options_t;
typedef union $94CB200B36B7778DB0012FD0C2F25E9C mach_msg_descriptor_t;
typedef unsigned int mach_msg_descriptor_type_t;
typedef struct $9AA8814A56848052027B4042AE3CFED4 mach_msg_empty_rcv_t;
typedef struct $15CE29027F05B8BB8B125DB29B7163BF mach_msg_empty_send_t;
typedef union $2345F6273F81C99369AD5C0E36D3FD0F mach_msg_empty_t;
typedef mach_msg_security_trailer_t mach_msg_format_0_trailer_t;
typedef struct $71210C31999B47ECFCA79A4496892A9D mach_msg_header_t;
typedef integer_t mach_msg_id_t;
typedef struct $83A491C58EE353645DD01424DEA49DDB mach_msg_mac_trailer_t;
typedef mach_msg_mac_trailer_t mach_msg_max_trailer_t;
typedef struct $A351D2C18B5CB7A2BB6D222C452FE9CB mach_msg_ool_descriptor32_t;
typedef struct $FFAD9CD714E6EDB3A8033A5FCDD84734 mach_msg_ool_descriptor64_t;
typedef struct $7FF86B32A3F84F15420C95DB1000946C mach_msg_ool_descriptor_t;
typedef struct $6671520B86EDC1548DF0B281DB354573 mach_msg_ool_ports_descriptor32_t;
typedef struct $2AFE5EE5A4A6FE139E45DAAB082A402B mach_msg_ool_ports_descriptor64_t;
typedef struct $8DDBBBE51D4822B2C8C3E806F70EB27A mach_msg_ool_ports_descriptor_t;
typedef integer_t mach_msg_option_t;
typedef integer_t mach_msg_options_t;
typedef struct $BAA0E1D2BF5986DFAC16C10809EF9355 mach_msg_port_descriptor_t;
typedef kern_return_t mach_msg_return_t;
typedef struct $5694E020026D0F35B79D3FDB301355DE mach_msg_security_trailer_t;
typedef struct $E0DB54FB1236B40874C7451A4BD28FF5 mach_msg_seqno_trailer_t;
typedef natural_t mach_msg_size_t;
typedef natural_t mach_msg_timeout_t;
typedef unsigned int mach_msg_trailer_size_t;
typedef struct $F105F10DE5C66ECF2E7E726999936688 mach_msg_trailer_t;
typedef unsigned int mach_msg_trailer_type_t;
typedef struct $1A5C2EFD679D7A6E9374F478B735BD08 mach_msg_type_descriptor_t;
typedef unsigned int mach_msg_type_name_t;
typedef natural_t mach_msg_type_number_t;
typedef natural_t mach_msg_type_size_t;
typedef struct $8BAB52A5AF78D0C10584D69C8CD7C023 mach_no_senders_notification_t;
typedef mach_port_t *mach_port_array_t;
typedef struct $211858A17FC3AA3AF7FB370462C716CC mach_port_deleted_notification_t;
typedef integer_t mach_port_delta_t;
typedef struct $2204D4BF90F99AB14C1563C90305E530 mach_port_destroyed_notification_t;
typedef int mach_port_flavor_t;
typedef integer_t *mach_port_info_t;
struct mach_port_limits {mach_port_msgcount_t mpl_qlimit;};
typedef struct mach_port_limits mach_port_limits_t;
typedef natural_t mach_port_mscount_t;
typedef natural_t mach_port_msgcount_t;
typedef mach_port_name_t *mach_port_name_array_t;
typedef natural_t mach_port_name_t;
struct mach_port_qos {unsigned __int32 name : 1;unsigned __int32 prealloc : 1;unsigned __int32 pad1 : 30;natural_t len;};
typedef struct mach_port_qos mach_port_qos_t;
typedef natural_t mach_port_right_t;
typedef natural_t mach_port_rights_t;
typedef natural_t mach_port_seqno_t;
typedef unsigned int mach_port_srights_t;
struct mach_port_status {mach_port_rights_t mps_pset;mach_port_seqno_t mps_seqno;mach_port_mscount_t mps_mscount;mach_port_msgcount_t mps_qlimit;mach_port_msgcount_t mps_msgcount;mach_port_rights_t mps_sorights;boolean_t mps_srights;boolean_t mps_pdrequest;boolean_t mps_nsrequest;natural_t mps_flags;};
typedef struct mach_port_status mach_port_status_t;
typedef mach_port_name_t mach_port_t;
typedef mach_port_type_t *mach_port_type_array_t;
typedef natural_t mach_port_type_t;
typedef natural_t mach_port_urefs_t;
typedef struct $AAF01D1DF014C088EF592F6E4410D618 mach_send_once_notification_t;
typedef struct $211858A17FC3AA3AF7FB370462C716CC mach_send_possible_notification_t;
struct mach_timebase_info {uint32_t numer;uint32_t denom;};
typedef struct mach_timebase_info mach_timebase_info_data_t;
typedef struct mach_timebase_info *mach_timebase_info_t;
struct mach_timespec {unsigned int tv_sec;clock_res_t tv_nsec;};
typedef struct mach_timespec mach_timespec_t;
typedef uint64_t mach_vm_address_t;
struct mach_vm_info_region {mach_vm_offset_t vir_start;mach_vm_offset_t vir_end;mach_vm_offset_t vir_object;memory_object_offset_t vir_offset;boolean_t vir_needs_copy;vm_prot_t vir_protection;vm_prot_t vir_max_protection;vm_inherit_t vir_inheritance;natural_t vir_wired_count;natural_t vir_user_wired_count;};
typedef struct mach_vm_info_region mach_vm_info_region_t;
typedef uint64_t mach_vm_offset_t;
struct mach_vm_read_entry {mach_vm_address_t address;mach_vm_size_t size;};
typedef struct mach_vm_read_entry mach_vm_read_entry_t[256];
typedef uint64_t mach_vm_size_t;
typedef mach_zone_info_t *mach_zone_info_array_t;
struct mach_zone_info_data {uint64_t mzi_count;uint64_t mzi_cur_size;uint64_t mzi_max_size;uint64_t mzi_elem_size;uint64_t mzi_alloc_size;uint64_t mzi_sum_size;uint64_t mzi_exhaustible;uint64_t mzi_collectable;};
typedef struct mach_zone_info_data mach_zone_info_t;
struct mach_zone_name {char mzn_name[80];};
typedef mach_zone_name_t *mach_zone_name_array_t;
typedef struct mach_zone_name mach_zone_name_t;
struct malloc_introspection_t {kern_return_t (__cdecl *enumerator)(task_t task, void *, unsigned int type_mask, vm_address_t zone_address, memory_reader_t *reader, vm_range_recorder_t *recorder);size_t (__cdecl *good_size)(malloc_zone_t *zone, size_t size);boolean_t (__cdecl *check)(malloc_zone_t *zone);void (__cdecl *print)(malloc_zone_t *zone, boolean_t verbose);void (__cdecl *log)(malloc_zone_t *zone, void *address);void (__cdecl *force_lock)(malloc_zone_t *zone);void (__cdecl *force_unlock)(malloc_zone_t *zone);void (__cdecl *statistics)(malloc_zone_t *zone, malloc_statistics_t *stats);boolean_t (__cdecl *zone_locked)(malloc_zone_t *zone);boolean_t (__cdecl *enable_discharge_checking)(malloc_zone_t *zone);void (__cdecl *disable_discharge_checking)(malloc_zone_t *zone);void (__cdecl *discharge)(malloc_zone_t *zone, void *memory);void *enumerate_unavailable_without_blocks;};
struct malloc_statistics_t {unsigned int blocks_in_use;size_t size_in_use;size_t max_size_in_use;size_t size_allocated;};
typedef struct _malloc_zone_t malloc_zone_t;
typedef char *mapname;
typedef void *marker_t;
struct mb_class_stat {char mbcl_cname[16];u_int32_t mbcl_size;u_int32_t mbcl_total;u_int32_t mbcl_active;u_int32_t mbcl_infree;u_int32_t mbcl_slab_cnt;u_int32_t mbcl_pad;u_int64_t mbcl_alloc_cnt;u_int64_t mbcl_free_cnt;u_int64_t mbcl_notified;u_int64_t mbcl_purge_cnt;u_int64_t mbcl_fail_cnt;u_int32_t mbcl_ctotal;u_int32_t mbcl_mc_state;u_int32_t mbcl_mc_cached;u_int32_t mbcl_mc_waiter_cnt;u_int32_t mbcl_mc_wretry_cnt;u_int32_t mbcl_mc_nwretry_cnt;u_int64_t mbcl_reserved[4];};
typedef struct mb_class_stat mb_class_stat_t;
struct mb_stat {u_int32_t mbs_cnt;u_int32_t mbs_pad;mb_class_stat_t mbs_class[1];};
typedef struct mb_stat mb_stat_t;
struct mbstat {u_int32_t m_mbufs;u_int32_t m_clusters;u_int32_t m_spare;u_int32_t m_clfree;u_int32_t m_drops;u_int32_t m_wait;u_int32_t m_drain;u_short m_mtypes[256];u_int32_t m_mcfail;u_int32_t m_mpfail;u_int32_t m_msize;u_int32_t m_mclbytes;u_int32_t m_minclsize;u_int32_t m_mlen;u_int32_t m_mhlen;u_int32_t m_bigclusters;u_int32_t m_bigclfree;u_int32_t m_bigmclbytes;};
typedef __darwin_mbstate_t mbstate_t;
struct mbuf;
typedef struct __mbuf *mbuf_t;
typedef struct __darwin_mcontext64 *mcontext_t;
struct mdc2_ctx_st {unsigned int num;unsigned __int8 data[8];DES_cblock h;DES_cblock hh;int pad_type;};
struct mecab_dictionary_info_t {const char *filename;const char *charset;unsigned int size;int type;unsigned int lsize;unsigned int rsize;unsigned __int16 version;struct mecab_dictionary_info_t *next;};
struct mecab_learner_node_t {struct mecab_learner_node_t *prev;struct mecab_learner_node_t *next;struct mecab_learner_node_t *enext;struct mecab_learner_node_t *bnext;struct mecab_learner_path_t *rpath;struct mecab_learner_path_t *lpath;struct mecab_learner_node_t *anext;const char *surface;const char *feature;unsigned int id;unsigned __int16 length;unsigned __int16 rlength;unsigned __int16 rcAttr;unsigned __int16 lcAttr;unsigned __int16 posid;unsigned __int8 char_type;unsigned __int8 stat;unsigned __int8 isbest;double alpha;double beta;__int16 wcost2;double wcost;double cost;const int *fvector;struct mecab_token_t *token;};
struct mecab_learner_path_t {struct mecab_learner_node_t *rnode;struct mecab_learner_path_t *rnext;struct mecab_learner_node_t *lnode;struct mecab_learner_path_t *lnext;double cost;const int *fvector;};
struct mecab_node_t {struct mecab_node_t *prev;struct mecab_node_t *next;struct mecab_node_t *enext;struct mecab_node_t *bnext;struct mecab_path_t *rpath;struct mecab_path_t *lpath;struct mecab_node_t **begin_node_list;struct mecab_node_t **end_node_list;const char *surface;const char *feature;unsigned __int16 length;unsigned __int16 rlength;unsigned __int16 rcAttr;unsigned __int16 lcAttr;unsigned __int16 posid;unsigned __int8 char_type;unsigned __int8 stat;__int16 wcost;__int64 cost;};
struct mecab_path_t {struct mecab_node_t *rnode;struct mecab_node_t *lnode;struct mecab_path_t *lnext;int cost;};
struct mecab_t;
struct mecab_token_t {unsigned __int16 lcAttr;unsigned __int16 rcAttr;unsigned __int16 posid;__int16 wcost;unsigned int feature;unsigned int compound;};
typedef int *mem_bucket_ptr_t;
typedef char *mem_class_ptr_t;
typedef mach_port_t mem_entry_name_port_t;
typedef char *mem_nam_ptr_t;
typedef memory_object_t *memory_object_array_t;
struct memory_object_attr_info {memory_object_copy_strategy_t copy_strategy;memory_object_cluster_size_t cluster_size;boolean_t may_cache_object;boolean_t temporary;};
typedef struct memory_object_attr_info memory_object_attr_info_data_t;
typedef struct memory_object_attr_info *memory_object_attr_info_t;
struct memory_object_behave_info {memory_object_copy_strategy_t copy_strategy;boolean_t temporary;boolean_t invalidate;boolean_t silent_overwrite;boolean_t advisory_pageout;};
typedef struct memory_object_behave_info memory_object_behave_info_data_t;
typedef struct memory_object_behave_info *memory_object_behave_info_t;
typedef natural_t memory_object_cluster_size_t;
typedef mach_port_t memory_object_control_t;
typedef int memory_object_copy_strategy_t;
typedef mach_port_t memory_object_default_t;
typedef natural_t *memory_object_fault_info_t;
typedef int memory_object_flavor_t;
typedef int memory_object_info_data_t[1024];
typedef int *memory_object_info_t;
typedef mach_port_t memory_object_name_t;
typedef unsigned __int64 memory_object_offset_t;
struct memory_object_perf_info {memory_object_cluster_size_t cluster_size;boolean_t may_cache;};
typedef struct memory_object_perf_info memory_object_perf_info_data_t;
typedef struct memory_object_perf_info *memory_object_perf_info_t;
typedef int memory_object_return_t;
typedef unsigned __int64 memory_object_size_t;
typedef mach_port_t memory_object_t;
typedef kern_return_t __cdecl memory_reader_t(task_t remote_task, vm_address_t remote_address, vm_size_t size, void **local_memory);
struct mfc {struct in_addr mfc_origin;struct in_addr mfc_mcastgrp;vifi_t mfc_parent;u_char mfc_ttls[32];u_int32_t mfc_pkt_cnt;u_int32_t mfc_byte_cnt;u_int32_t mfc_wrong_if;int mfc_expire;struct timeval mfc_last_assert;struct rtdetq *mfc_stall;struct mfc *mfc_next;};
struct mfcctl {struct in_addr mfcc_origin;struct in_addr mfcc_mcastgrp;vifi_t mfcc_parent;u_char mfcc_ttls[32];};
struct mib_atEntry {int atIfIndex;u_char atPhysAddress[11];u_char PhysAddressLen;u_int atNetAddress;};
struct mib_egp {u_int egpInMsgs;u_int egpInErrors;u_int egpOutMsgs;u_int egpOutErrors;};
struct mib_egpNeighEntry {int egpNeighState;u_int egpNeighAddr;};
struct mib_icmp {u_int icmpInMsgs;u_int icmpInErrors;u_int icmpInDestUnreachs;u_int icmpInTimeExcds;u_int icmpInParmProbs;u_int icmpInSrcQuenchs;u_int icmpInRedirects;u_int icmpInEchos;u_int icmpInEchoReps;u_int icmpInTimestamps;u_int icmpInTimestampReps;u_int icmpInAddrMasks;u_int icmpInAddrMaskReps;u_int icmpOutMsgs;u_int icmpOutErrors;u_int icmpOutDestUnreachs;u_int icmpOutTimeExcds;u_int icmpOutParmProbs;u_int icmpOutSrcQuenchs;u_int icmpOutRedirects;u_int icmpOutEchos;u_int icmpOutEchoReps;u_int icmpOutTimestamps;u_int icmpOutTimestampReps;u_int icmpOutAddrMasks;u_int icmpOutAddrMaskReps;};
struct mib_ifEntry {int ifIndex;char ifDescr[32];int ifType;int ifMtu;u_int ifSpeed;u_char ifPhysAddress[11];u_char PhysAddrLen;int ifAdminStatus;int ifOperStatus;u_int ifLastChange;u_int ifInOctets;u_int ifInUcastPkts;u_int ifInNUcastPkts;u_int ifInDiscards;u_int ifInErrors;u_int ifInUnknownProtos;u_int ifOutOctets;u_int ifOutUcastPkts;u_int ifOutNUcastPkts;u_int ifOutDiscards;u_int ifOutErrors;u_int ifOutQLen;};
struct mib_interface {int ifNumber;};
struct mib_ip {int ipForwarding;int ipDefaultTTL;u_int ipInReceives;u_int ipInHdrErrors;u_int ipInAddrErrors;u_int ipForwDatagrams;u_int ipInUnknownProtos;u_int ipInDiscards;u_int ipInDelivers;u_int ipOutRequests;u_int ipOutDiscards;u_int ipOutNoRoutes;int ipReasmTimeout;u_int ipReasmReqds;u_int ipReasmOKs;u_int ipReasmFails;u_int ipFragOKs;u_int ipFragFails;u_int ipFragCreates;};
struct mib_ipAddrEntry {u_int ipAdEntAddr;int ipAdEntIfIndex;u_int ipAdEntNetMask;int ipAdEntBcastAddr;int ipAdEntReasmMaxSize;};
struct mib_ipRouteEntry {u_int ipRouteDest;int ipRouteIfIndex;int ipRouteMetric1;int ipRouteMetric2;int ipRouteMetric3;int ipRouteMetric4;u_int ipRouteNextHop;int ipRouteType;int ipRouteProto;int ipRouteAge;};
struct mib_system {char sysDescr[32];u_char sysObjectID[16];u_char ObjIDLen;u_int sysUpTime;};
struct mib_tcp {int tcpRtoAlgorithm;int tcpRtoMin;int tcpRtoMax;int tcpMaxConn;u_int tcpActiveOpens;u_int tcpPassiveOpens;u_int tcpAttemptFails;u_int tcpEstabResets;u_int tcpCurrEstab;u_int tcpInSegs;u_int tcpOutSegs;u_int tcpRetransSegs;};
struct mib_tcpConnEntry {int tcpConnState;u_int tcpConnLocalAddress;int tcpConnLocalPort;u_int tcpConnRemAddress;int tcpConnRemPort;};
struct mib_udp {u_int udpInDatagrams;u_int udpNoPorts;u_int udpInErrors;u_int udpOutDatagrams;};
typedef kern_return_t (*mig_impl_routine_t)(void);
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F mig_reply_error_t;
typedef mach_msg_type_descriptor_t *mig_routine_arg_descriptor_t;
typedef struct routine_descriptor mig_routine_descriptor;
typedef mig_routine_descriptor *mig_routine_descriptor_t;
typedef mig_stub_routine_t mig_routine_t;
typedef mig_routine_t (__cdecl *mig_server_routine_t)(mach_msg_header_t *InHeadP);
typedef void (__cdecl *mig_stub_routine_t)(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP);
struct mig_subsystem {mig_server_routine_t server;mach_msg_id_t start;mach_msg_id_t end;mach_msg_size_t maxsize;vm_address_t reserved;mig_routine_descriptor routine[1];};
typedef struct mig_subsystem *mig_subsystem_t;
struct mig_symtab {char *ms_routine_name;int ms_routine_number;void (*ms_routine)(void);};
typedef struct mig_symtab mig_symtab_t;
typedef void (__cdecl *mime_error_cb_t)(void *ctx, const char *message);
typedef struct _mime_filter_s mime_filter_t;
typedef struct _mime_magic_s mime_magic_t;
typedef enum $E61B72B2528436688BBD75516B993DD2 mime_op_t;
typedef struct _mime_s mime_t;
typedef struct _mime_type_s mime_type_t;
struct __attribute__((packed)) mld_hdr {struct icmp6_hdr mld_icmp6_hdr;struct in6_addr mld_addr;};
typedef unsigned __int64 mmask_t;
typedef __darwin_mode_t mode_t;
struct module {char *name;char *file;struct module_import *imports;int no_imports;int modid;struct module *next;};
struct module_compatability {const char *old_module;const char *new_module;const char *tag;size_t tag_len;struct module_compatability *next;};
struct module_import {char *label;int modid;};
struct module_init_list {char *module_name;struct module_init_list *next;};
struct mon {struct mon_id mon_id;char priv[16];};
struct mon_id {char *mon_name;struct my_id my_id;};
struct mount;
typedef struct mount *mount_t;
struct mountbody {name ml_hostname;dirpath ml_directory;mountlist ml_next;};
typedef struct mountbody *mountlist;
typedef int __cdecl mpo_audit_check_postselect_t(kauth_cred_t cred, unsigned __int16 syscode, void *args, int error, int retval);
typedef int __cdecl mpo_audit_check_preselect_t(kauth_cred_t cred, unsigned __int16 syscode, void *args);
typedef int __cdecl mpo_bpfdesc_check_receive_t(struct bpf_d *bpf_d, struct label *bpflabel, struct ifnet *ifp, struct label *ifnetlabel);
typedef void __cdecl mpo_bpfdesc_label_associate_t(kauth_cred_t cred, struct bpf_d *bpf_d, struct label *bpflabel);
typedef void __cdecl mpo_bpfdesc_label_destroy_t(struct label *label);
typedef void __cdecl mpo_bpfdesc_label_init_t(struct label *label);
typedef int __cdecl mpo_cred_check_label_update_execve_t(kauth_cred_t old, struct vnode *vp, struct label *vnodelabel, struct label *scriptvnodelabel, struct label *execlabel, struct proc *proc);
typedef int __cdecl mpo_cred_check_label_update_t(kauth_cred_t cred, struct label *newlabel);
typedef int __cdecl mpo_cred_check_visible_t(kauth_cred_t u1, kauth_cred_t u2);
typedef void __cdecl mpo_cred_label_associate_fork_t(kauth_cred_t cred, proc_t proc);
typedef void __cdecl mpo_cred_label_associate_kernel_t(kauth_cred_t cred);
typedef void __cdecl mpo_cred_label_associate_t(kauth_cred_t parent_cred, kauth_cred_t child_cred);
typedef void __cdecl mpo_cred_label_associate_user_t(kauth_cred_t cred);
typedef void __cdecl mpo_cred_label_destroy_t(struct label *label);
typedef int __cdecl mpo_cred_label_externalize_audit_t(struct label *label, char *element_name, struct sbuf *sb);
typedef int __cdecl mpo_cred_label_externalize_t(struct label *label, char *element_name, struct sbuf *sb);
typedef void __cdecl mpo_cred_label_init_t(struct label *label);
typedef int __cdecl mpo_cred_label_internalize_t(struct label *label, char *element_name, char *element_data);
typedef void __cdecl mpo_cred_label_update_execve_t(kauth_cred_t old_cred, kauth_cred_t new_cred, struct vnode *vp, struct label *vnodelabel, struct label *scriptvnodelabel, struct label *execlabel, int *disjointp);
typedef void __cdecl mpo_cred_label_update_t(kauth_cred_t cred, struct label *newlabel);
typedef void __cdecl mpo_devfs_label_associate_device_t(dev_t dev, struct devnode *de, struct label *label, const char *fullpath);
typedef void __cdecl mpo_devfs_label_associate_directory_t(const char *dirname, int dirnamelen, struct devnode *de, struct label *label, const char *fullpath);
typedef void __cdecl mpo_devfs_label_copy_t(struct label *src, struct label *dest);
typedef void __cdecl mpo_devfs_label_destroy_t(struct label *label);
typedef void __cdecl mpo_devfs_label_init_t(struct label *label);
typedef void __cdecl mpo_devfs_label_update_t(struct mount *mp, struct devnode *de, struct label *delabel, struct vnode *vp, struct label *vnodelabel);
typedef int __cdecl mpo_file_check_change_offset_t(kauth_cred_t cred, struct fileglob *fg, struct label *label);
typedef int __cdecl mpo_file_check_create_t(kauth_cred_t cred);
typedef int __cdecl mpo_file_check_dup_t(kauth_cred_t cred, struct fileglob *fg, struct label *label, int newfd);
typedef int __cdecl mpo_file_check_fcntl_t(kauth_cred_t cred, struct fileglob *fg, struct label *label, int cmd, user_long_t arg);
typedef int __cdecl mpo_file_check_get_offset_t(kauth_cred_t cred, struct fileglob *fg, struct label *label);
typedef int __cdecl mpo_file_check_get_t(kauth_cred_t cred, struct fileglob *fg, char *elements, int len);
typedef int __cdecl mpo_file_check_inherit_t(kauth_cred_t cred, struct fileglob *fg, struct label *label);
typedef int __cdecl mpo_file_check_ioctl_t(kauth_cred_t cred, struct fileglob *fg, struct label *label, unsigned int cmd);
typedef int __cdecl mpo_file_check_lock_t(kauth_cred_t cred, struct fileglob *fg, struct label *label, int op, struct flock *fl);
typedef void __cdecl mpo_file_check_mmap_downgrade_t(kauth_cred_t cred, struct fileglob *fg, struct label *label, int *prot);
typedef int __cdecl mpo_file_check_mmap_t(kauth_cred_t cred, struct fileglob *fg, struct label *label, int prot, int flags, int *maxprot);
typedef int __cdecl mpo_file_check_receive_t(kauth_cred_t cred, struct fileglob *fg, struct label *label);
typedef int __cdecl mpo_file_check_set_t(kauth_cred_t cred, struct fileglob *fg, char *elements, int len);
typedef void __cdecl mpo_file_label_associate_t(kauth_cred_t cred, struct fileglob *fg, struct label *label);
typedef void __cdecl mpo_file_label_destroy_t(struct label *label);
typedef void __cdecl mpo_file_label_init_t(struct label *label);
typedef int __cdecl mpo_ifnet_check_label_update_t(kauth_cred_t cred, struct ifnet *ifp, struct label *ifnetlabel, struct label *newlabel);
typedef int __cdecl mpo_ifnet_check_transmit_t(struct ifnet *ifp, struct label *ifnetlabel, struct mbuf *m, struct label *mbuflabel, int family, int type);
typedef void __cdecl mpo_ifnet_label_associate_t(struct ifnet *ifp, struct label *ifnetlabel);
typedef void __cdecl mpo_ifnet_label_copy_t(struct label *src, struct label *dest);
typedef void __cdecl mpo_ifnet_label_destroy_t(struct label *label);
typedef int __cdecl mpo_ifnet_label_externalize_t(struct label *label, char *element_name, struct sbuf *sb);
typedef void __cdecl mpo_ifnet_label_init_t(struct label *label);
typedef int __cdecl mpo_ifnet_label_internalize_t(struct label *label, char *element_name, char *element_data);
typedef void __cdecl mpo_ifnet_label_recycle_t(struct label *label);
typedef void __cdecl mpo_ifnet_label_update_t(kauth_cred_t cred, struct ifnet *ifp, struct label *ifnetlabel, struct label *newlabel);
typedef int __cdecl mpo_inpcb_check_deliver_t(struct inpcb *inp, struct label *inplabel, struct mbuf *m, struct label *mbuflabel, int family, int type);
typedef void __cdecl mpo_inpcb_label_associate_t(struct socket *so, struct label *solabel, struct inpcb *inp, struct label *inplabel);
typedef void __cdecl mpo_inpcb_label_destroy_t(struct label *label);
typedef int __cdecl mpo_inpcb_label_init_t(struct label *label, int flag);
typedef void __cdecl mpo_inpcb_label_recycle_t(struct label *label);
typedef void __cdecl mpo_inpcb_label_update_t(struct socket *so, struct label *solabel, struct inpcb *inp, struct label *inplabel);
typedef int __cdecl mpo_iokit_check_device_t(char *devtype, struct mac_module_data *mdata);
typedef int __cdecl mpo_iokit_check_hid_control_t(kauth_cred_t cred);
typedef int __cdecl mpo_iokit_check_open_t(kauth_cred_t cred, io_object_t user_client, unsigned int user_client_type);
typedef int __cdecl mpo_iokit_check_set_properties_t(kauth_cred_t cred, io_object_t entry, io_object_t properties);
typedef void __cdecl mpo_ipq_label_associate_t(struct mbuf *fragment, struct label *fragmentlabel, struct ipq *ipq, struct label *ipqlabel);
typedef int __cdecl mpo_ipq_label_compare_t(struct mbuf *fragment, struct label *fragmentlabel, struct ipq *ipq, struct label *ipqlabel);
typedef void __cdecl mpo_ipq_label_destroy_t(struct label *label);
typedef int __cdecl mpo_ipq_label_init_t(struct label *label, int flag);
typedef void __cdecl mpo_ipq_label_update_t(struct mbuf *fragment, struct label *fragmentlabel, struct ipq *ipq, struct label *ipqlabel);
typedef int __cdecl mpo_lctx_check_label_update_t(struct lctx *l, struct label *newlabel);
typedef void __cdecl mpo_lctx_label_destroy_t(struct label *label);
typedef int __cdecl mpo_lctx_label_externalize_t(struct label *label, char *element_name, struct sbuf *sb);
typedef void __cdecl mpo_lctx_label_init_t(struct label *label);
typedef int __cdecl mpo_lctx_label_internalize_t(struct label *label, char *element_name, char *element_data);
typedef void __cdecl mpo_lctx_label_update_t(struct lctx *l, struct label *newlabel);
typedef void __cdecl mpo_lctx_notify_create_t(struct proc *p, struct lctx *l);
typedef void __cdecl mpo_lctx_notify_join_t(struct proc *p, struct lctx *l);
typedef void __cdecl mpo_lctx_notify_leave_t(struct proc *p, struct lctx *l);
typedef void __cdecl mpo_mbuf_label_associate_bpfdesc_t(struct bpf_d *bpf_d, struct label *b_label, struct mbuf *m, struct label *m_label);
typedef void __cdecl mpo_mbuf_label_associate_ifnet_t(struct ifnet *ifp, struct label *i_label, struct mbuf *m, struct label *m_label);
typedef void __cdecl mpo_mbuf_label_associate_inpcb_t(struct inpcb *inp, struct label *i_label, struct mbuf *m, struct label *m_label);
typedef void __cdecl mpo_mbuf_label_associate_ipq_t(struct ipq *ipq, struct label *ipqlabel, struct mbuf *mbuf, struct label *mbuflabel);
typedef void __cdecl mpo_mbuf_label_associate_linklayer_t(struct ifnet *ifp, struct label *i_label, struct mbuf *m, struct label *m_label);
typedef void __cdecl mpo_mbuf_label_associate_multicast_encap_t(struct mbuf *oldmbuf, struct label *oldmbuflabel, struct ifnet *ifp, struct label *ifplabel, struct mbuf *newmbuf, struct label *newmbuflabel);
typedef void __cdecl mpo_mbuf_label_associate_netlayer_t(struct mbuf *oldmbuf, struct label *oldmbuflabel, struct mbuf *newmbuf, struct label *newmbuflabel);
typedef void __cdecl mpo_mbuf_label_associate_socket_t(socket_t so, struct label *so_label, struct mbuf *m, struct label *m_label);
typedef void __cdecl mpo_mbuf_label_copy_t(struct label *src, struct label *dest);
typedef void __cdecl mpo_mbuf_label_destroy_t(struct label *label);
typedef int __cdecl mpo_mbuf_label_init_t(struct label *label, int flag);
typedef int __cdecl mpo_mount_check_fsctl_t(kauth_cred_t cred, struct mount *mp, struct label *label, unsigned int cmd);
typedef int __cdecl mpo_mount_check_getattr_t(kauth_cred_t cred, struct mount *mp, struct label *mp_label, struct vfs_attr *vfa);
typedef int __cdecl mpo_mount_check_label_update_t(kauth_cred_t cred, struct mount *mp, struct label *mntlabel);
typedef int __cdecl mpo_mount_check_mount_t(kauth_cred_t cred, struct vnode *vp, struct label *vlabel, struct componentname *cnp, const char *vfc_name);
typedef int __cdecl mpo_mount_check_remount_t(kauth_cred_t cred, struct mount *mp, struct label *mlabel);
typedef int __cdecl mpo_mount_check_setattr_t(kauth_cred_t cred, struct mount *mp, struct label *mp_label, struct vfs_attr *vfa);
typedef int __cdecl mpo_mount_check_stat_t(kauth_cred_t cred, struct mount *mp, struct label *mntlabel);
typedef int __cdecl mpo_mount_check_umount_t(kauth_cred_t cred, struct mount *mp, struct label *mlabel);
typedef void __cdecl mpo_mount_label_associate_t(kauth_cred_t cred, struct mount *mp, struct label *mntlabel);
typedef void __cdecl mpo_mount_label_destroy_t(struct label *label);
typedef int __cdecl mpo_mount_label_externalize_t(struct label *label, char *element_name, struct sbuf *sb);
typedef void __cdecl mpo_mount_label_init_t(struct label *label);
typedef int __cdecl mpo_mount_label_internalize_t(struct label *label, char *element_name, char *element_data);
typedef void __cdecl mpo_netinet_fragment_t(struct mbuf *datagram, struct label *datagramlabel, struct mbuf *fragment, struct label *fragmentlabel);
typedef void __cdecl mpo_netinet_icmp_reply_t(struct mbuf *m, struct label *mlabel);
typedef void __cdecl mpo_netinet_tcp_reply_t(struct mbuf *m, struct label *mlabel);
typedef int __cdecl mpo_pipe_check_ioctl_t(kauth_cred_t cred, struct pipe *cpipe, struct label *pipelabel, unsigned int cmd);
typedef int __cdecl mpo_pipe_check_kqfilter_t(kauth_cred_t cred, struct knote *kn, struct pipe *cpipe, struct label *pipelabel);
typedef int __cdecl mpo_pipe_check_label_update_t(kauth_cred_t cred, struct pipe *cpipe, struct label *pipelabel, struct label *newlabel);
typedef int __cdecl mpo_pipe_check_read_t(kauth_cred_t cred, struct pipe *cpipe, struct label *pipelabel);
typedef int __cdecl mpo_pipe_check_select_t(kauth_cred_t cred, struct pipe *cpipe, struct label *pipelabel, int which);
typedef int __cdecl mpo_pipe_check_stat_t(kauth_cred_t cred, struct pipe *cpipe, struct label *pipelabel);
typedef int __cdecl mpo_pipe_check_write_t(kauth_cred_t cred, struct pipe *cpipe, struct label *pipelabel);
typedef void __cdecl mpo_pipe_label_associate_t(kauth_cred_t cred, struct pipe *cpipe, struct label *pipelabel);
typedef void __cdecl mpo_pipe_label_copy_t(struct label *src, struct label *dest);
typedef void __cdecl mpo_pipe_label_destroy_t(struct label *label);
typedef int __cdecl mpo_pipe_label_externalize_t(struct label *label, char *element_name, struct sbuf *sb);
typedef void __cdecl mpo_pipe_label_init_t(struct label *label);
typedef int __cdecl mpo_pipe_label_internalize_t(struct label *label, char *element_name, char *element_data);
typedef void __cdecl mpo_pipe_label_update_t(kauth_cred_t cred, struct pipe *cpipe, struct label *oldlabel, struct label *newlabel);
typedef void __cdecl mpo_policy_destroy_t(struct mac_policy_conf *mpc);
typedef void __cdecl mpo_policy_init_t(struct mac_policy_conf *mpc);
typedef void __cdecl mpo_policy_initbsd_t(struct mac_policy_conf *mpc);
typedef int __cdecl mpo_policy_syscall_t(struct proc *p, int call, user_addr_t arg);
typedef int __cdecl mpo_port_check_copy_send_t(struct label *task, struct label *port);
typedef int __cdecl mpo_port_check_hold_receive_t(struct label *task, struct label *port);
typedef int __cdecl mpo_port_check_hold_send_once_t(struct label *task, struct label *port);
typedef int __cdecl mpo_port_check_hold_send_t(struct label *task, struct label *port);
typedef int __cdecl mpo_port_check_label_update_t(struct label *task, struct label *oldlabel, struct label *newlabel);
typedef int __cdecl mpo_port_check_make_send_once_t(struct label *task, struct label *port);
typedef int __cdecl mpo_port_check_make_send_t(struct label *task, struct label *port);
typedef int __cdecl mpo_port_check_method_t(struct proc *proc, struct label *task, struct label *port, int msgid);
typedef int __cdecl mpo_port_check_move_receive_t(struct label *task, struct label *port);
typedef int __cdecl mpo_port_check_move_send_once_t(struct label *task, struct label *port);
typedef int __cdecl mpo_port_check_move_send_t(struct label *task, struct label *port);
typedef int __cdecl mpo_port_check_receive_t(struct label *task, struct label *sender);
typedef int __cdecl mpo_port_check_send_t(struct label *task, struct label *port);
typedef int __cdecl mpo_port_check_service_t(struct label *subj, struct label *obj, const char *serv, const char *perm);
typedef void __cdecl mpo_port_label_associate_kernel_t(struct label *portlabel, int isreply);
typedef void __cdecl mpo_port_label_associate_t(struct label *it, struct label *st, struct label *portlabel);
typedef int __cdecl mpo_port_label_compute_t(struct label *subj, struct label *obj, const char *serv, struct label *out);
typedef void __cdecl mpo_port_label_copy_t(struct label *src, struct label *dest);
typedef void __cdecl mpo_port_label_destroy_t(struct label *label);
typedef void __cdecl mpo_port_label_init_t(struct label *label);
typedef void __cdecl mpo_port_label_update_cred_t(struct label *cred, struct label *task);
typedef void __cdecl mpo_port_label_update_kobject_t(struct label *portlabel, int kotype);
typedef int __cdecl mpo_posixsem_check_create_t(kauth_cred_t cred, const char *name);
typedef int __cdecl mpo_posixsem_check_open_t(kauth_cred_t cred, struct pseminfo *ps, struct label *semlabel);
typedef int __cdecl mpo_posixsem_check_post_t(kauth_cred_t cred, struct pseminfo *ps, struct label *semlabel);
typedef int __cdecl mpo_posixsem_check_unlink_t(kauth_cred_t cred, struct pseminfo *ps, struct label *semlabel, const char *name);
typedef int __cdecl mpo_posixsem_check_wait_t(kauth_cred_t cred, struct pseminfo *ps, struct label *semlabel);
typedef void __cdecl mpo_posixsem_label_associate_t(kauth_cred_t cred, struct pseminfo *ps, struct label *semlabel, const char *name);
typedef void __cdecl mpo_posixsem_label_destroy_t(struct label *label);
typedef void __cdecl mpo_posixsem_label_init_t(struct label *label);
typedef int __cdecl mpo_posixshm_check_create_t(kauth_cred_t cred, const char *name);
typedef int __cdecl mpo_posixshm_check_mmap_t(kauth_cred_t cred, struct pshminfo *ps, struct label *shmlabel, int prot, int flags);
typedef int __cdecl mpo_posixshm_check_open_t(kauth_cred_t cred, struct pshminfo *ps, struct label *shmlabel);
typedef int __cdecl mpo_posixshm_check_stat_t(kauth_cred_t cred, struct pshminfo *ps, struct label *shmlabel);
typedef int __cdecl mpo_posixshm_check_truncate_t(kauth_cred_t cred, struct pshminfo *ps, struct label *shmlabel, off_t len);
typedef int __cdecl mpo_posixshm_check_unlink_t(kauth_cred_t cred, struct pshminfo *ps, struct label *shmlabel, const char *name);
typedef void __cdecl mpo_posixshm_label_associate_t(kauth_cred_t cred, struct pshminfo *ps, struct label *shmlabel, const char *name);
typedef void __cdecl mpo_posixshm_label_destroy_t(struct label *label);
typedef void __cdecl mpo_posixshm_label_init_t(struct label *label);
typedef int __cdecl mpo_priv_check_t(kauth_cred_t cred, int priv);
typedef int __cdecl mpo_priv_grant_t(kauth_cred_t cred, int priv);
typedef int __cdecl mpo_proc_check_debug_t(kauth_cred_t cred, struct proc *proc);
typedef int __cdecl mpo_proc_check_fork_t(kauth_cred_t cred, struct proc *proc);
typedef int __cdecl mpo_proc_check_get_task_name_t(kauth_cred_t cred, struct proc *p);
typedef int __cdecl mpo_proc_check_get_task_t(kauth_cred_t cred, struct proc *p);
typedef int __cdecl mpo_proc_check_getaudit_t(kauth_cred_t cred);
typedef int __cdecl mpo_proc_check_getauid_t(kauth_cred_t cred);
typedef int __cdecl mpo_proc_check_getlcid_t(struct proc *p0, struct proc *p, pid_t pid);
typedef int __cdecl mpo_proc_check_map_anon_t(struct proc *proc, kauth_cred_t cred, user_addr_t u_addr, user_size_t u_size, int prot, int flags, int *maxprot);
typedef int __cdecl mpo_proc_check_mprotect_t(kauth_cred_t cred, struct proc *proc, user_addr_t addr, user_size_t size, int prot);
typedef int __cdecl mpo_proc_check_sched_t(kauth_cred_t cred, struct proc *proc);
typedef int __cdecl mpo_proc_check_setaudit_t(kauth_cred_t cred, struct auditinfo_addr *ai);
typedef int __cdecl mpo_proc_check_setauid_t(kauth_cred_t cred, uid_t auid);
typedef int __cdecl mpo_proc_check_setlcid_t(struct proc *p0, struct proc *p, pid_t pid, pid_t lcid);
typedef int __cdecl mpo_proc_check_signal_t(kauth_cred_t cred, struct proc *proc, int signum);
typedef int __cdecl mpo_proc_check_suspend_resume_t(kauth_cred_t cred, struct proc *proc, int sr);
typedef int __cdecl mpo_proc_check_wait_t(kauth_cred_t cred, struct proc *proc);
typedef void __cdecl mpo_proc_label_destroy_t(struct label *label);
typedef void __cdecl mpo_proc_label_init_t(struct label *label);
typedef void mpo_reserved_hook_t(void);
typedef int __cdecl mpo_socket_check_accept_t(kauth_cred_t cred, socket_t so, struct label *socklabel);
typedef int __cdecl mpo_socket_check_accepted_t(kauth_cred_t cred, socket_t so, struct label *socklabel, struct sockaddr *addr);
typedef int __cdecl mpo_socket_check_bind_t(kauth_cred_t cred, socket_t so, struct label *socklabel, struct sockaddr *addr);
typedef int __cdecl mpo_socket_check_connect_t(kauth_cred_t cred, socket_t so, struct label *socklabel, struct sockaddr *addr);
typedef int __cdecl mpo_socket_check_create_t(kauth_cred_t cred, int domain, int type, int protocol);
typedef int __cdecl mpo_socket_check_deliver_t(socket_t so, struct label *so_label, struct mbuf *m, struct label *m_label);
typedef int __cdecl mpo_socket_check_getsockopt_t(kauth_cred_t cred, socket_t so, struct label *socklabel, struct sockopt *sopt);
typedef int __cdecl mpo_socket_check_kqfilter_t(kauth_cred_t cred, struct knote *kn, socket_t so, struct label *socklabel);
typedef int __cdecl mpo_socket_check_label_update_t(kauth_cred_t cred, socket_t so, struct label *so_label, struct label *newlabel);
typedef int __cdecl mpo_socket_check_listen_t(kauth_cred_t cred, socket_t so, struct label *socklabel);
typedef int __cdecl mpo_socket_check_receive_t(kauth_cred_t cred, socket_t so, struct label *socklabel);
typedef int __cdecl mpo_socket_check_received_t(kauth_cred_t cred, struct socket *sock, struct label *socklabel, struct sockaddr *saddr);
typedef int __cdecl mpo_socket_check_select_t(kauth_cred_t cred, socket_t so, struct label *socklabel, int which);
typedef int __cdecl mpo_socket_check_send_t(kauth_cred_t cred, socket_t so, struct label *socklabel, struct sockaddr *addr);
typedef int __cdecl mpo_socket_check_setsockopt_t(kauth_cred_t cred, socket_t so, struct label *socklabel, struct sockopt *sopt);
typedef int __cdecl mpo_socket_check_stat_t(kauth_cred_t cred, socket_t so, struct label *socklabel);
typedef void __cdecl mpo_socket_label_associate_accept_t(socket_t oldsock, struct label *oldlabel, socket_t newsock, struct label *newlabel);
typedef void __cdecl mpo_socket_label_associate_t(kauth_cred_t cred, socket_t so, struct label *solabel);
typedef void __cdecl mpo_socket_label_copy_t(struct label *src, struct label *dest);
typedef void __cdecl mpo_socket_label_destroy_t(struct label *label);
typedef int __cdecl mpo_socket_label_externalize_t(struct label *label, char *element_name, struct sbuf *sb);
typedef int __cdecl mpo_socket_label_init_t(struct label *label, int waitok);
typedef int __cdecl mpo_socket_label_internalize_t(struct label *label, char *element_name, char *element_data);
typedef void __cdecl mpo_socket_label_update_t(kauth_cred_t cred, socket_t so, struct label *so_label, struct label *newlabel);
typedef void __cdecl mpo_socketpeer_label_associate_mbuf_t(struct mbuf *m, struct label *m_label, socket_t so, struct label *so_label);
typedef void __cdecl mpo_socketpeer_label_associate_socket_t(socket_t source, struct label *sourcelabel, socket_t target, struct label *targetlabel);
typedef void __cdecl mpo_socketpeer_label_destroy_t(struct label *label);
typedef int __cdecl mpo_socketpeer_label_externalize_t(struct label *label, char *element_name, struct sbuf *sb);
typedef int __cdecl mpo_socketpeer_label_init_t(struct label *label, int waitok);
typedef int __cdecl mpo_system_check_acct_t(kauth_cred_t cred, struct vnode *vp, struct label *vlabel);
typedef int __cdecl mpo_system_check_audit_t(kauth_cred_t cred, void *record, int length);
typedef int __cdecl mpo_system_check_auditctl_t(kauth_cred_t cred, struct vnode *vp, struct label *vl);
typedef int __cdecl mpo_system_check_auditon_t(kauth_cred_t cred, int cmd);
typedef int __cdecl mpo_system_check_chud_t(kauth_cred_t cred);
typedef int __cdecl mpo_system_check_host_priv_t(kauth_cred_t cred);
typedef int __cdecl mpo_system_check_nfsd_t(kauth_cred_t cred);
typedef int __cdecl mpo_system_check_reboot_t(kauth_cred_t cred, int howto);
typedef int __cdecl mpo_system_check_settime_t(kauth_cred_t cred);
typedef int __cdecl mpo_system_check_swapoff_t(kauth_cred_t cred, struct vnode *vp, struct label *label);
typedef int __cdecl mpo_system_check_swapon_t(kauth_cred_t cred, struct vnode *vp, struct label *label);
typedef int __cdecl mpo_system_check_sysctl_t(kauth_cred_t cred, int *name, u_int namelen, user_addr_t old, user_addr_t oldlenp, int inkernel, user_addr_t newvalue, size_t newlen);
typedef void __cdecl mpo_sysvmsg_label_associate_t(kauth_cred_t cred, struct msqid_kernel *msqptr, struct label *msqlabel, struct msg *msgptr, struct label *msglabel);
typedef void __cdecl mpo_sysvmsg_label_destroy_t(struct label *label);
typedef void __cdecl mpo_sysvmsg_label_init_t(struct label *label);
typedef void __cdecl mpo_sysvmsg_label_recycle_t(struct label *label);
typedef int __cdecl mpo_sysvmsq_check_enqueue_t(kauth_cred_t cred, struct msg *msgptr, struct label *msglabel, struct msqid_kernel *msqptr, struct label *msqlabel);
typedef int __cdecl mpo_sysvmsq_check_msgrcv_t(kauth_cred_t cred, struct msg *msgptr, struct label *msglabel);
typedef int __cdecl mpo_sysvmsq_check_msgrmid_t(kauth_cred_t cred, struct msg *msgptr, struct label *msglabel);
typedef int __cdecl mpo_sysvmsq_check_msqctl_t(kauth_cred_t cred, struct msqid_kernel *msqptr, struct label *msqlabel, int cmd);
typedef int __cdecl mpo_sysvmsq_check_msqget_t(kauth_cred_t cred, struct msqid_kernel *msqptr, struct label *msqlabel);
typedef int __cdecl mpo_sysvmsq_check_msqrcv_t(kauth_cred_t cred, struct msqid_kernel *msqptr, struct label *msqlabel);
typedef int __cdecl mpo_sysvmsq_check_msqsnd_t(kauth_cred_t cred, struct msqid_kernel *msqptr, struct label *msqlabel);
typedef void __cdecl mpo_sysvmsq_label_associate_t(kauth_cred_t cred, struct msqid_kernel *msqptr, struct label *msqlabel);
typedef void __cdecl mpo_sysvmsq_label_destroy_t(struct label *label);
typedef void __cdecl mpo_sysvmsq_label_init_t(struct label *label);
typedef void __cdecl mpo_sysvmsq_label_recycle_t(struct label *label);
typedef int __cdecl mpo_sysvsem_check_semctl_t(kauth_cred_t cred, struct semid_kernel *semakptr, struct label *semaklabel, int cmd);
typedef int __cdecl mpo_sysvsem_check_semget_t(kauth_cred_t cred, struct semid_kernel *semakptr, struct label *semaklabel);
typedef int __cdecl mpo_sysvsem_check_semop_t(kauth_cred_t cred, struct semid_kernel *semakptr, struct label *semaklabel, size_t accesstype);
typedef void __cdecl mpo_sysvsem_label_associate_t(kauth_cred_t cred, struct semid_kernel *semakptr, struct label *semalabel);
typedef void __cdecl mpo_sysvsem_label_destroy_t(struct label *label);
typedef void __cdecl mpo_sysvsem_label_init_t(struct label *label);
typedef void __cdecl mpo_sysvsem_label_recycle_t(struct label *label);
typedef int __cdecl mpo_sysvshm_check_shmat_t(kauth_cred_t cred, struct shmid_kernel *shmsegptr, struct label *shmseglabel, int shmflg);
typedef int __cdecl mpo_sysvshm_check_shmctl_t(kauth_cred_t cred, struct shmid_kernel *shmsegptr, struct label *shmseglabel, int cmd);
typedef int __cdecl mpo_sysvshm_check_shmdt_t(kauth_cred_t cred, struct shmid_kernel *shmsegptr, struct label *shmseglabel);
typedef int __cdecl mpo_sysvshm_check_shmget_t(kauth_cred_t cred, struct shmid_kernel *shmsegptr, struct label *shmseglabel, int shmflg);
typedef void __cdecl mpo_sysvshm_label_associate_t(kauth_cred_t cred, struct shmid_kernel *shmsegptr, struct label *shmlabel);
typedef void __cdecl mpo_sysvshm_label_destroy_t(struct label *label);
typedef void __cdecl mpo_sysvshm_label_init_t(struct label *label);
typedef void __cdecl mpo_sysvshm_label_recycle_t(struct label *shmlabel);
typedef void __cdecl mpo_task_label_associate_kernel_t(struct task *kproc, struct label *tasklabel, struct label *portlabel);
typedef void __cdecl mpo_task_label_associate_t(struct task *parent, struct task *child, struct label *parentlabel, struct label *childlabel, struct label *childportlabel);
typedef void __cdecl mpo_task_label_copy_t(struct label *src, struct label *dest);
typedef void __cdecl mpo_task_label_destroy_t(struct label *label);
typedef int __cdecl mpo_task_label_externalize_t(struct label *label, char *element_name, struct sbuf *sb);
typedef void __cdecl mpo_task_label_init_t(struct label *label);
typedef int __cdecl mpo_task_label_internalize_t(struct label *label, char *element_name, char *element_data);
typedef void __cdecl mpo_task_label_update_t(struct label *cred, struct label *task);
typedef int __cdecl mpo_vnode_check_access_t(kauth_cred_t cred, struct vnode *vp, struct label *label, int acc_mode);
typedef int __cdecl mpo_vnode_check_chdir_t(kauth_cred_t cred, struct vnode *dvp, struct label *dlabel);
typedef int __cdecl mpo_vnode_check_chroot_t(kauth_cred_t cred, struct vnode *dvp, struct label *dlabel, struct componentname *cnp);
typedef int __cdecl mpo_vnode_check_create_t(kauth_cred_t cred, struct vnode *dvp, struct label *dlabel, struct componentname *cnp, struct vnode_attr *vap);
typedef int __cdecl mpo_vnode_check_deleteextattr_t(kauth_cred_t cred, struct vnode *vp, struct label *vlabel, const char *name);
typedef int __cdecl mpo_vnode_check_exchangedata_t(kauth_cred_t cred, struct vnode *v1, struct label *vl1, struct vnode *v2, struct label *vl2);
typedef int __cdecl mpo_vnode_check_exec_t(kauth_cred_t cred, struct vnode *vp, struct label *label, struct label *execlabel, struct componentname *cnp, u_int *csflags);
typedef int __cdecl mpo_vnode_check_fsgetpath_t(kauth_cred_t cred, struct vnode *vp, struct label *label);
typedef int __cdecl mpo_vnode_check_getattrlist_t(kauth_cred_t cred, struct vnode *vp, struct label *vlabel, struct attrlist *alist);
typedef int __cdecl mpo_vnode_check_getextattr_t(kauth_cred_t cred, struct vnode *vp, struct label *label, const char *name, struct uio *uio);
typedef int __cdecl mpo_vnode_check_ioctl_t(kauth_cred_t cred, struct vnode *vp, struct label *label, unsigned int cmd);
typedef int __cdecl mpo_vnode_check_kqfilter_t(kauth_cred_t active_cred, kauth_cred_t file_cred, struct knote *kn, struct vnode *vp, struct label *label);
typedef int __cdecl mpo_vnode_check_label_update_t(struct ucred *cred, struct vnode *vp, struct label *vnodelabel, struct label *newlabel);
typedef int __cdecl mpo_vnode_check_link_t(kauth_cred_t cred, struct vnode *dvp, struct label *dlabel, struct vnode *vp, struct label *label, struct componentname *cnp);
typedef int __cdecl mpo_vnode_check_listextattr_t(kauth_cred_t cred, struct vnode *vp, struct label *vlabel);
typedef int __cdecl mpo_vnode_check_lookup_t(kauth_cred_t cred, struct vnode *dvp, struct label *dlabel, struct componentname *cnp);
typedef int __cdecl mpo_vnode_check_open_t(kauth_cred_t cred, struct vnode *vp, struct label *label, int acc_mode);
typedef int __cdecl mpo_vnode_check_read_t(kauth_cred_t active_cred, kauth_cred_t file_cred, struct vnode *vp, struct label *label);
typedef int __cdecl mpo_vnode_check_readdir_t(kauth_cred_t cred, struct vnode *dvp, struct label *dlabel);
typedef int __cdecl mpo_vnode_check_readlink_t(kauth_cred_t cred, struct vnode *vp, struct label *label);
typedef int __cdecl mpo_vnode_check_rename_from_t(kauth_cred_t cred, struct vnode *dvp, struct label *dlabel, struct vnode *vp, struct label *label, struct componentname *cnp);
typedef int __cdecl mpo_vnode_check_rename_to_t(kauth_cred_t cred, struct vnode *dvp, struct label *dlabel, struct vnode *vp, struct label *label, int samedir, struct componentname *cnp);
typedef int __cdecl mpo_vnode_check_revoke_t(kauth_cred_t cred, struct vnode *vp, struct label *label);
typedef int __cdecl mpo_vnode_check_searchfs_t(kauth_cred_t cred, struct vnode *vp, struct label *vlabel, struct attrlist *alist);
typedef int __cdecl mpo_vnode_check_select_t(kauth_cred_t cred, struct vnode *vp, struct label *label, int which);
typedef int __cdecl mpo_vnode_check_setattrlist_t(kauth_cred_t cred, struct vnode *vp, struct label *vlabel, struct attrlist *alist);
typedef int __cdecl mpo_vnode_check_setextattr_t(kauth_cred_t cred, struct vnode *vp, struct label *label, const char *name, struct uio *uio);
typedef int __cdecl mpo_vnode_check_setflags_t(kauth_cred_t cred, struct vnode *vp, struct label *label, u_long flags);
typedef int __cdecl mpo_vnode_check_setmode_t(kauth_cred_t cred, struct vnode *vp, struct label *label, mode_t mode);
typedef int __cdecl mpo_vnode_check_setowner_t(kauth_cred_t cred, struct vnode *vp, struct label *label, uid_t uid, gid_t gid);
typedef int __cdecl mpo_vnode_check_setutimes_t(kauth_cred_t cred, struct vnode *vp, struct label *label, struct timespec atime, struct timespec mtime);
typedef int __cdecl mpo_vnode_check_signature_t(struct vnode *vp, struct label *label, unsigned __int8 *sha1, void *signature, int size);
typedef int __cdecl mpo_vnode_check_stat_t(struct ucred *active_cred, struct ucred *file_cred, struct vnode *vp, struct label *label);
typedef int __cdecl mpo_vnode_check_truncate_t(kauth_cred_t active_cred, kauth_cred_t file_cred, struct vnode *vp, struct label *label);
typedef int __cdecl mpo_vnode_check_uipc_bind_t(kauth_cred_t cred, struct vnode *dvp, struct label *dlabel, struct componentname *cnp, struct vnode_attr *vap);
typedef int __cdecl mpo_vnode_check_uipc_connect_t(kauth_cred_t cred, struct vnode *vp, struct label *label);
typedef int __cdecl mpo_vnode_check_unlink_t(kauth_cred_t cred, struct vnode *dvp, struct label *dlabel, struct vnode *vp, struct label *label, struct componentname *cnp);
typedef int __cdecl mpo_vnode_check_write_t(kauth_cred_t active_cred, kauth_cred_t file_cred, struct vnode *vp, struct label *label);
typedef void __cdecl mpo_vnode_label_associate_devfs_t(struct mount *mp, struct label *mntlabel, struct devnode *de, struct label *delabel, struct vnode *vp, struct label *vlabel);
typedef int __cdecl mpo_vnode_label_associate_extattr_t(struct mount *mp, struct label *mntlabel, struct vnode *vp, struct label *vlabel);
typedef void __cdecl mpo_vnode_label_associate_file_t(struct ucred *cred, struct mount *mp, struct label *mntlabel, struct fileglob *fg, struct label *label, struct vnode *vp, struct label *vlabel);
typedef void __cdecl mpo_vnode_label_associate_pipe_t(struct ucred *cred, struct pipe *cpipe, struct label *pipelabel, struct vnode *vp, struct label *vlabel);
typedef void __cdecl mpo_vnode_label_associate_posixsem_t(struct ucred *cred, struct pseminfo *psem, struct label *psemlabel, struct vnode *vp, struct label *vlabel);
typedef void __cdecl mpo_vnode_label_associate_posixshm_t(struct ucred *cred, struct pshminfo *pshm, struct label *pshmlabel, struct vnode *vp, struct label *vlabel);
typedef void __cdecl mpo_vnode_label_associate_singlelabel_t(struct mount *mp, struct label *mntlabel, struct vnode *vp, struct label *vlabel);
typedef void __cdecl mpo_vnode_label_associate_socket_t(kauth_cred_t cred, socket_t so, struct label *solabel, struct vnode *vp, struct label *vlabel);
typedef void __cdecl mpo_vnode_label_copy_t(struct label *src, struct label *dest);
typedef void __cdecl mpo_vnode_label_destroy_t(struct label *label);
typedef int __cdecl mpo_vnode_label_externalize_audit_t(struct label *label, char *element_name, struct sbuf *sb);
typedef int __cdecl mpo_vnode_label_externalize_t(struct label *label, char *element_name, struct sbuf *sb);
typedef void __cdecl mpo_vnode_label_init_t(struct label *label);
typedef int __cdecl mpo_vnode_label_internalize_t(struct label *label, char *element_name, char *element_data);
typedef void __cdecl mpo_vnode_label_recycle_t(struct label *label);
typedef int __cdecl mpo_vnode_label_store_t(kauth_cred_t cred, struct vnode *vp, struct label *vlabel, struct label *intlabel);
typedef int __cdecl mpo_vnode_label_update_extattr_t(struct mount *mp, struct label *mntlabel, struct vnode *vp, struct label *vlabel, const char *name);
typedef void __cdecl mpo_vnode_label_update_t(kauth_cred_t cred, struct vnode *vp, struct label *vnodelabel, struct label *label);
typedef int __cdecl mpo_vnode_notify_create_t(kauth_cred_t cred, struct mount *mp, struct label *mntlabel, struct vnode *dvp, struct label *dlabel, struct vnode *vp, struct label *vlabel, struct componentname *cnp);
typedef void __cdecl mpo_vnode_notify_rename_t(kauth_cred_t cred, struct vnode *vp, struct label *label, struct vnode *dvp, struct label *dlabel, struct componentname *cnp);
struct mrtstat {u_int32_t mrts_mfc_lookups;u_int32_t mrts_mfc_misses;u_int32_t mrts_upcalls;u_int32_t mrts_no_route;u_int32_t mrts_bad_tunnel;u_int32_t mrts_cant_tunnel;u_int32_t mrts_wrong_if;u_int32_t mrts_upq_ovflw;u_int32_t mrts_cache_cleanups;u_int32_t mrts_drop_sel;u_int32_t mrts_q_overflow;u_int32_t mrts_pkt2large;u_int32_t mrts_upq_sockfull;};
struct ms_tm;
struct msg {struct msg *msg_next;__int64 msg_type;unsigned __int16 msg_ts;__int16 msg_spot;struct label *label;};
typedef struct $A1BE0EBA393D65D9C9965FE1E31C9EA5 msg_labels_t;
enum msg_type {CALL = 0x0,REPLY = 0x1,};
struct msgbuf {int msg_magic;int msg_size;int msg_bufx;int msg_bufr;char *msg_bufc;};
struct msghdr {void *msg_name;socklen_t msg_namelen;struct iovec *msg_iov;int msg_iovlen;void *msg_control;socklen_t msg_controllen;int msg_flags;};
struct msginfo {int msgmax;int msgmni;int msgmnb;int msgtql;int msgssz;int msgseg;};
typedef unsigned __int64 msglen_t;
typedef unsigned __int64 msgqnum_t;
struct mstats {size_t bytes_total;size_t chunks_used;size_t bytes_used;size_t chunks_free;size_t bytes_free;};
struct mutex;
struct my_id {char *my_name;int my_prog;int my_vers;int my_proc;};
struct mymsg {__int64 mtype;char mtext[1];};
typedef __uint32_t n_long;
typedef __uint16_t n_short;
typedef __uint32_t n_time;
typedef char *name;
typedef name_t *name_array_t;
typedef char name_t[128];
struct name_table_entry {const char *nte_name;int nte_type;__int16 nte_index;__int16 nte_link;};
typedef __darwin_natural_t natural_t;
struct __attribute__((packed)) nd_neighbor_advert {struct icmp6_hdr nd_na_hdr;struct in6_addr nd_na_target;};
struct __attribute__((packed)) nd_neighbor_solicit {struct icmp6_hdr nd_ns_hdr;struct in6_addr nd_ns_target;};
struct __attribute__((packed)) nd_opt_hdr {u_int8_t nd_opt_type;u_int8_t nd_opt_len;};
struct __attribute__((packed)) nd_opt_mtu {u_int8_t nd_opt_mtu_type;u_int8_t nd_opt_mtu_len;u_int16_t nd_opt_mtu_reserved;u_int32_t nd_opt_mtu_mtu;};
struct __attribute__((packed)) nd_opt_prefix_info {u_int8_t nd_opt_pi_type;u_int8_t nd_opt_pi_len;u_int8_t nd_opt_pi_prefix_len;u_int8_t nd_opt_pi_flags_reserved;u_int32_t nd_opt_pi_valid_time;u_int32_t nd_opt_pi_preferred_time;u_int32_t nd_opt_pi_reserved2;struct in6_addr nd_opt_pi_prefix;};
struct __attribute__((packed)) nd_opt_rd_hdr {u_int8_t nd_opt_rh_type;u_int8_t nd_opt_rh_len;u_int16_t nd_opt_rh_reserved1;u_int32_t nd_opt_rh_reserved2;};
struct __attribute__((packed)) nd_opt_rdnss {u_int8_t nd_opt_rdnss_type;u_int8_t nd_opt_rdnss_len;u_int16_t nd_opt_rdnss_reserved;u_int32_t nd_opt_rdnss_lifetime;struct in6_addr nd_opt_rdnss_addr[1];};
struct __attribute__((packed)) nd_opt_route_info {u_int8_t nd_opt_rti_type;u_int8_t nd_opt_rti_len;u_int8_t nd_opt_rti_prefixlen;u_int8_t nd_opt_rti_flags;u_int32_t nd_opt_rti_lifetime;};
struct __attribute__((packed)) nd_redirect {struct icmp6_hdr nd_rd_hdr;struct in6_addr nd_rd_target;struct in6_addr nd_rd_dst;};
struct __attribute__((packed)) nd_router_advert {struct icmp6_hdr nd_ra_hdr;u_int32_t nd_ra_reachable;u_int32_t nd_ra_retransmit;};
struct __attribute__((packed)) nd_router_solicit {struct icmp6_hdr nd_rs_hdr;};
struct ndrv_demux_desc {u_int16_t type;u_int16_t length;union ndrv_demux_desc::$5E87C9BB192401A2CD612B3326A5C171 data;};
union ndrv_demux_desc::$5E87C9BB192401A2CD612B3326A5C171 {u_int16_t ether_type;u_int8_t sap[3];u_int8_t snap[5];u_int8_t other[28];};
struct ndrv_info {uint32_t ndrvsi_if_family;uint32_t ndrvsi_if_unit;char ndrvsi_if_name[16];};
struct ndrv_protocol_desc {u_int32_t version;u_int32_t protocol_family;u_int32_t demux_count;struct ndrv_demux_desc *demux_list;};
struct net_event_data {u_int32_t if_family;u_int32_t if_unit;char if_name[16];};
typedef uint32_t netaddr_t;
struct netent {char *n_name;char **n_aliases;int n_addrtype;uint32_t n_net;};
struct netinfo {struct sockaddr rip_dst;int rip_metric;};
typedef char netname_name_t[80];
struct netobj {unsigned int n_len;char *n_bytes;};
typedef struct netsnmp_addr_pair_s netsnmp_addr_pair;
struct netsnmp_addr_pair_s {struct sockaddr_in remote_addr;struct sockaddr_in local_addr;};
typedef struct netsnmp_agent_request_info_s netsnmp_agent_request_info;
struct netsnmp_agent_request_info_s {int mode;struct netsnmp_agent_session_s *asp;netsnmp_data_list *agent_data;};
typedef struct netsnmp_agent_session_s netsnmp_agent_session;
struct netsnmp_agent_session_s {int mode;netsnmp_session *session;netsnmp_pdu *pdu;netsnmp_pdu *orig_pdu;int rw;int exact;int status;int index;int oldmode;struct netsnmp_agent_session_s *next;netsnmp_agent_request_info *reqinfo;netsnmp_request_info *requests;netsnmp_tree_cache *treecache;netsnmp_variable_list **bulkcache;int treecache_len;int treecache_num;netsnmp_cachemap *cache_store;int vbcount;};
typedef struct netsnmp_baby_steps_access_methods_s netsnmp_baby_steps_access_methods;
struct netsnmp_baby_steps_access_methods_s {Netsnmp_Node_Handler *pre_request;Netsnmp_Node_Handler *object_lookup;Netsnmp_Node_Handler *get_values;Netsnmp_Node_Handler *object_syntax_checks;Netsnmp_Node_Handler *row_creation;Netsnmp_Node_Handler *undo_setup;Netsnmp_Node_Handler *set_values;Netsnmp_Node_Handler *consistency_checks;Netsnmp_Node_Handler *commit;Netsnmp_Node_Handler *undo_sets;Netsnmp_Node_Handler *undo_cleanup;Netsnmp_Node_Handler *undo_commit;Netsnmp_Node_Handler *irreversible_commit;Netsnmp_Node_Handler *post_request;void *my_access_void;};
typedef struct netsnmp_baby_steps_modes_s netsnmp_baby_steps_modes;
struct netsnmp_baby_steps_modes_s {u_int registered;u_int completed;};
typedef struct netsnmp_cache_s netsnmp_cache;
struct netsnmp_cache_s {int flags;int enabled;int valid;char expired;int timeout;marker_t timestamp;u_long timer_id;NetsnmpCacheLoad *load_cache;NetsnmpCacheFree *free_cache;void *magic;netsnmp_handler_args *cache_hint;netsnmp_cache *next;netsnmp_cache *prev;oid *rootoid;int rootoid_len;};
typedef struct netsnmp_cachemap_s netsnmp_cachemap;
struct netsnmp_cachemap_s {int globalid;int cacheid;struct netsnmp_cachemap_s *next;};
typedef int (__cdecl *netsnmp_callback)(int, netsnmp_session *, int, netsnmp_pdu *, void *);
typedef struct netsnmp_callback_info_s netsnmp_callback_info;
struct netsnmp_callback_info_s {int linkedto;void *parent_data;netsnmp_callback_pass *data;int callback_num;int pipefds[2];};
typedef struct netsnmp_callback_pass_s netsnmp_callback_pass;
struct netsnmp_callback_pass_s {int return_transport_num;netsnmp_pdu *pdu;struct netsnmp_callback_pass_s *next;};
typedef struct netsnmp_column_info_t netsnmp_column_info;
struct netsnmp_column_info_t {char isRange;char list_count;union netsnmp_column_info_t::$41E30212381E22E50C344E87F6BAC4A2 details;struct netsnmp_column_info_t *next;};
union netsnmp_column_info_t::$41E30212381E22E50C344E87F6BAC4A2 {unsigned int range[2];unsigned int *list;};
typedef struct netsnmp_container_s netsnmp_container;
typedef int __cdecl netsnmp_container_compare(const void *lhs, const void *rhs);
typedef void __cdecl netsnmp_container_func(struct netsnmp_container_s *, netsnmp_container_obj_func *, void *context);
typedef struct netsnmp_iterator_s *__cdecl netsnmp_container_it(struct netsnmp_container_s *);
typedef struct netsnmp_container_s *__cdecl netsnmp_container_mod_op(struct netsnmp_container_s *, void *context, u_int flags);
typedef void __cdecl netsnmp_container_obj_func(void *data, void *context);
typedef int __cdecl netsnmp_container_op(struct netsnmp_container_s *, const void *data);
typedef int __cdecl netsnmp_container_option(struct netsnmp_container_s *, int set, u_int flags);
typedef int __cdecl netsnmp_container_rc(struct netsnmp_container_s *);
typedef void *__cdecl netsnmp_container_rtn(struct netsnmp_container_s *, const void *data);
struct netsnmp_container_s {void *container_data;netsnmp_container_size *get_size;netsnmp_container_rc *init;netsnmp_container_rc *cfree;netsnmp_container_op *insert;netsnmp_container_op *remove;netsnmp_container_op *release;netsnmp_container_obj_func *free_item;netsnmp_container_rtn *find;netsnmp_container_rtn *find_next;netsnmp_container_set *get_subset;netsnmp_container_it *get_iterator;netsnmp_container_func *for_each;netsnmp_container_func *clear;netsnmp_container_op *insert_filter;netsnmp_container_mod_op *duplicate;netsnmp_container_compare *compare;netsnmp_container_compare *ncompare;netsnmp_container_option *options;char *container_name;u_long sync;u_int flags;struct netsnmp_container_s *next;struct netsnmp_container_s *prev;};
typedef netsnmp_void_array *__cdecl netsnmp_container_set(struct netsnmp_container_s *, void *data);
typedef size_t __cdecl netsnmp_container_size(struct netsnmp_container_s *);
typedef union $70B7A71D304E70E945AE4E370F85FC88 netsnmp_cvalue;
typedef struct netsnmp_data_list_s netsnmp_data_list;
struct netsnmp_data_list_s {struct netsnmp_data_list_s *next;char *name;void *data;Netsnmp_Free_List_Data *free_func;};
typedef struct netsnmp_data_list_saveinfo_s netsnmp_data_list_saveinfo;
struct netsnmp_data_list_saveinfo_s {netsnmp_data_list **datalist;const char *type;const char *token;Netsnmp_Save_List_Data *data_list_save_ptr;Netsnmp_Read_List_Data *data_list_read_ptr;Netsnmp_Free_List_Data *data_list_free_ptr;};
typedef struct netsnmp_delegated_cache_s netsnmp_delegated_cache;
struct netsnmp_delegated_cache_s {int transaction_id;netsnmp_mib_handler *handler;netsnmp_handler_registration *reginfo;netsnmp_agent_request_info *reqinfo;netsnmp_request_info *requests;void *localinfo;};
typedef struct netsnmp_factory_s netsnmp_factory;
typedef void *netsnmp_factory_produce_f(void);
typedef int __cdecl netsnmp_factory_produce_noalloc_f(void *);
struct netsnmp_factory_s {const char *product;netsnmp_factory_produce_f *produce;netsnmp_factory_produce_noalloc_f *produce_noalloc;};
typedef struct netsnmp_file_s netsnmp_file;
struct netsnmp_file_s {char *name;int fd;int fs_flags;mode_t mode;u_int ns_flags;struct stat *stats;netsnmp_data_list *extras;};
typedef struct netsnmp_handler_args_s netsnmp_handler_args;
struct netsnmp_handler_args_s {netsnmp_mib_handler *handler;netsnmp_handler_registration *reginfo;netsnmp_agent_request_info *reqinfo;netsnmp_request_info *requests;};
typedef struct netsnmp_handler_registration_s netsnmp_handler_registration;
struct netsnmp_handler_registration_s {char *handlerName;char *contextName;oid *rootoid;size_t rootoid_len;netsnmp_mib_handler *handler;int modes;int priority;int range_subid;oid range_ubound;int timeout;int global_cacheid;void *my_reg_void;};
typedef struct netsnmp_index_s netsnmp_index;
struct netsnmp_index_s {size_t len;oid *oids;};
typedef struct netsnmp_indexed_addr_pair_s netsnmp_indexed_addr_pair;
struct netsnmp_indexed_addr_pair_s {struct sockaddr_in remote_addr;struct sockaddr_in local_addr;int if_index;};
typedef struct netsnmp_iterator_s netsnmp_iterator;
typedef struct netsnmp_iterator_info_s netsnmp_iterator_info;
struct netsnmp_iterator_info_s {Netsnmp_First_Data_Point *get_first_data_point;Netsnmp_Next_Data_Point *get_next_data_point;Netsnmp_Make_Data_Context *make_data_context;Netsnmp_Free_Loop_Context *free_loop_context;Netsnmp_Free_Data_Context *free_data_context;Netsnmp_Free_Loop_Context *free_loop_context_at_end;void *myvoid;int flags;netsnmp_table_registration_info *table_reginfo;Netsnmp_First_Data_Point *get_row_indexes;netsnmp_variable_list *indexes;};
typedef int __cdecl netsnmp_iterator_rc(struct netsnmp_iterator_s *);
typedef void *__cdecl netsnmp_iterator_rtn(struct netsnmp_iterator_s *);
struct netsnmp_iterator_s {netsnmp_container *container;u_long sync;netsnmp_iterator_rc *reset;netsnmp_iterator_rc *release;netsnmp_iterator_rtn *first;netsnmp_iterator_rtn *curr;netsnmp_iterator_rtn *last;netsnmp_iterator_rtn *next;netsnmp_iterator_rc *remove;};
typedef struct netsnmp_large_fd_set_s netsnmp_large_fd_set;
struct netsnmp_large_fd_set_s {unsigned int lfs_setsize;fd_set *lfs_setptr;fd_set lfs_set;};
typedef struct netsnmp_log_handler_s netsnmp_log_handler;
struct netsnmp_log_handler_s {int enabled;int priority;int pri_max;int type;const char *token;NetsnmpLogHandler *handler;int imagic;void *magic;netsnmp_log_handler *next;netsnmp_log_handler *prev;};
typedef struct netsnmp_mib_handler_s netsnmp_mib_handler;
typedef struct netsnmp_mib_handler_methods_s netsnmp_mib_handler_methods;
struct netsnmp_mib_handler_methods_s {netsnmp_mib_handler *get_handler;netsnmp_mib_handler *getnext_handler;netsnmp_mib_handler *getbulk_handler;netsnmp_mib_handler *set_handler;};
struct netsnmp_mib_handler_s {char *handler_name;void *myvoid;int flags;int (__cdecl *access_method)(struct netsnmp_mib_handler_s *, struct netsnmp_handler_registration_s *, struct netsnmp_agent_request_info_s *, struct netsnmp_request_info_s *);void (__cdecl *data_free)(void *myvoid);struct netsnmp_mib_handler_s *next;struct netsnmp_mib_handler_s *prev;};
typedef struct netsnmp_mode_handler_list_s netsnmp_mode_handler_list;
struct netsnmp_mode_handler_list_s {struct netsnmp_mode_handler_list_s *next;int mode;netsnmp_mib_handler *callback_handler;};
typedef struct netsnmp_oid_stash_node_s netsnmp_oid_stash_node;
struct netsnmp_oid_stash_node_s {oid value;struct netsnmp_oid_stash_node_s **children;size_t children_size;struct netsnmp_oid_stash_node_s *next_sibling;struct netsnmp_oid_stash_node_s *prev_sibling;struct netsnmp_oid_stash_node_s *parent;void *thedata;};
typedef struct netsnmp_oid_stash_save_info_s netsnmp_oid_stash_save_info;
struct netsnmp_oid_stash_save_info_s {const char *token;netsnmp_oid_stash_node **root;NetSNMPStashDump *dumpfn;};
typedef struct old_opi_cache_s netsnmp_old_api_cache;
typedef struct netsnmp_old_api_info_s netsnmp_old_api_info;
struct netsnmp_old_api_info_s {struct variable *var;size_t varsize;size_t numvars;netsnmp_session *ss;int flags;};
typedef struct snmp_pdu netsnmp_pdu;
typedef struct netsnmp_ref_size_t_s *netsnmp_ref_size_t;
struct netsnmp_ref_size_t_s {size_t val;};
struct netsnmp_ref_void {void *val;};
typedef struct netsnmp_request_group_s netsnmp_request_group;
typedef struct netsnmp_request_group_item_s netsnmp_request_group_item;
struct netsnmp_request_group_item_s {netsnmp_request_info *ri;netsnmp_table_request_info *tri;struct netsnmp_request_group_item_s *next;};
struct netsnmp_request_group_s {netsnmp_index index;netsnmp_container *table;netsnmp_index *existing_row;netsnmp_index *undo_info;char row_created;char row_deleted;char fill1;char fill2;netsnmp_request_group_item *list;int status;void *rg_void;};
typedef struct netsnmp_request_info_s netsnmp_request_info;
struct netsnmp_request_info_s {netsnmp_variable_list *requestvb;netsnmp_data_list *parent_data;struct netsnmp_agent_request_info_s *agent_req_info;oid *range_end;size_t range_end_len;int delegated;int processed;int inclusive;int status;int index;int repeat;int orig_repeat;netsnmp_variable_list *requestvb_start;struct netsnmp_request_info_s *next;struct netsnmp_request_info_s *prev;struct netsnmp_subtree_s *subtree;};
typedef struct netsnmp_row_merge_status_x netsnmp_row_merge_status;
struct netsnmp_row_merge_status_x {char count;char rows;char current;char reserved;netsnmp_request_info **saved_requests;char *saved_status;};
typedef struct netsnmp_scalar_group_s netsnmp_scalar_group;
struct netsnmp_scalar_group_s {oid lbound;oid ubound;};
typedef struct snmp_session netsnmp_session;
typedef struct netsnmp_set_info_s netsnmp_set_info;
struct netsnmp_set_info_s {int action;void *stateRef;void **oldData;int setCleanupFlags;};
typedef struct netsnmp_stash_cache_data_s netsnmp_stash_cache_data;
struct netsnmp_stash_cache_data_s {void *data;size_t data_len;u_char data_type;};
typedef struct netsnmp_stash_cache_info_s netsnmp_stash_cache_info;
struct netsnmp_stash_cache_info_s {int cache_valid;marker_t cache_time;netsnmp_oid_stash_node *cache;int cache_length;};
typedef int __cdecl netsnmp_state_machine_func(struct netsnmp_state_machine_input_s *input, struct netsnmp_state_machine_step_s *step);
typedef struct netsnmp_state_machine_input_s netsnmp_state_machine_input;
struct netsnmp_state_machine_input_s {const char *name;int steps_so_far;netsnmp_state_machine_step *steps;netsnmp_state_machine_step *cleanup;netsnmp_state_machine_step *last_run;void *input_context;};
typedef struct netsnmp_state_machine_step_s netsnmp_state_machine_step;
struct netsnmp_state_machine_step_s {const char *name;u_int sm_flags;netsnmp_state_machine_func *run;int result;struct netsnmp_state_machine_step_s *on_success;struct netsnmp_state_machine_step_s *on_error;u_int flags;void *step_context;};
typedef struct netsnmp_subtree_s netsnmp_subtree;
struct netsnmp_subtree_s {oid *name_a;u_char namelen;oid *start_a;u_char start_len;oid *end_a;u_char end_len;struct variable *variables;int variables_len;int variables_width;char *label_a;netsnmp_session *session;u_char flags;u_char priority;int timeout;struct netsnmp_subtree_s *next;struct netsnmp_subtree_s *prev;struct netsnmp_subtree_s *children;int range_subid;oid range_ubound;netsnmp_handler_registration *reginfo;int cacheid;int global_cacheid;size_t oid_off;};
typedef struct netsnmp_table_array_callbacks_s netsnmp_table_array_callbacks;
struct netsnmp_table_array_callbacks_s {Netsnmp_User_Row_Operation *row_copy;Netsnmp_User_Row_Operation_c *row_compare;Netsnmp_User_Get_Processor *get_value;Netsnmp_User_Row_Action *can_activate;Netsnmp_User_Row_Action *activated;Netsnmp_User_Row_Action *can_deactivate;Netsnmp_User_Row_Action *deactivated;Netsnmp_User_Row_Action *can_delete;UserRowMethod *create_row;UserRowMethod *duplicate_row;UserRowMethod *delete_row;Netsnmp_User_Group_Method *set_reserve1;Netsnmp_User_Group_Method *set_reserve2;Netsnmp_User_Group_Method *set_action;Netsnmp_User_Group_Method *set_commit;Netsnmp_User_Group_Method *set_free;Netsnmp_User_Group_Method *set_undo;netsnmp_container *container;char can_set;};
typedef struct netsnmp_table_data_s netsnmp_table_data;
typedef struct netsnmp_tdata_s netsnmp_table_data2;
typedef struct netsnmp_tdata_row_s netsnmp_table_data2row;
struct netsnmp_table_data_s {netsnmp_variable_list *indexes_template;char *name;int flags;int store_indexes;netsnmp_table_row *first_row;netsnmp_table_row *last_row;};
typedef struct netsnmp_table_data_set_s netsnmp_table_data_set;
struct netsnmp_table_data_set_s {netsnmp_table_data *table;netsnmp_table_data_set_storage *default_row;int allow_creation;unsigned int rowstatus_column;};
typedef struct netsnmp_table_data_set_storage_s netsnmp_table_data_set_storage;
struct netsnmp_table_data_set_storage_s {unsigned int column;char writable;Netsnmp_Value_Change_Ok *change_ok_fn;void *my_change_data;u_char type;union netsnmp_table_data_set_storage_s::$954B107E84134B44758BAB124B2F79B4 data;u_long data_len;struct netsnmp_table_data_set_storage_s *next;};
union netsnmp_table_data_set_storage_s::$954B107E84134B44758BAB124B2F79B4 {void *voidp;__int64 *integer;u_char *string;oid *objid;u_char *bitstring;struct counter64 *counter64;float *floatVal;double *doubleVal;};
typedef struct netsnmp_table_registration_info_s netsnmp_table_registration_info;
struct netsnmp_table_registration_info_s {netsnmp_variable_list *indexes;unsigned int number_indexes;unsigned int min_column;unsigned int max_column;netsnmp_column_info *valid_columns;};
typedef struct netsnmp_table_request_info_s netsnmp_table_request_info;
struct netsnmp_table_request_info_s {unsigned int colnum;unsigned int number_indexes;netsnmp_variable_list *indexes;oid index_oid[128];size_t index_oid_len;netsnmp_table_registration_info *reg_info;};
typedef struct netsnmp_table_row_s netsnmp_table_row;
struct netsnmp_table_row_s {netsnmp_variable_list *indexes;oid *index_oid;size_t index_oid_len;void *data;struct netsnmp_table_row_s *next;struct netsnmp_table_row_s *prev;};
typedef struct netsnmp_tdata_s netsnmp_tdata;
typedef struct netsnmp_tdata_row_s netsnmp_tdata_row;
struct netsnmp_tdata_row_s {netsnmp_index oid_index;netsnmp_variable_list *indexes;void *data;};
struct netsnmp_tdata_s {netsnmp_variable_list *indexes_template;char *name;int flags;netsnmp_container *container;};
typedef struct netsnmp_tdomain_s netsnmp_tdomain;
struct netsnmp_tdomain_s {const oid *name;size_t name_length;const char **prefix;netsnmp_transport *(__cdecl *f_create_from_tstring)(const char *, int);netsnmp_transport *(__cdecl *f_create_from_ostring)(const u_char *, size_t, int);struct netsnmp_tdomain_s *next;netsnmp_transport *(__cdecl *f_create_from_tstring_new)(const char *, int, const char *);};
typedef struct netsnmp_tmStateReference_s netsnmp_tmStateReference;
struct netsnmp_tmStateReference_s {oid transportDomain[128];size_t transportDomainLen;char securityName[256];size_t securityNameLen;int requestedSecurityLevel;int transportSecurityLevel;char sameSecurity;char sessionID[8];char have_addresses;netsnmp_indexed_addr_pair addresses;void *otherTransportOpaque;};
typedef struct netsnmp_token_descr_s netsnmp_token_descr;
struct netsnmp_token_descr_s {char *token_name;char enabled;};
typedef struct netsnmp_transport_s netsnmp_transport;
typedef struct netsnmp_transport_config_s netsnmp_transport_config;
struct netsnmp_transport_config_s {char *key;char *value;};
typedef struct netsnmp_transport_list_s netsnmp_transport_list;
struct netsnmp_transport_list_s {netsnmp_transport *transport;struct netsnmp_transport_list_s *next;};
struct netsnmp_transport_s {const oid *domain;int domain_length;unsigned __int8 *local;int local_length;unsigned __int8 *remote;int remote_length;int sock;unsigned int flags;void *data;int data_length;size_t msgMaxSize;netsnmp_tmStateReference *tmStateRef;int (__cdecl *f_recv)(struct netsnmp_transport_s *, void *, int, void **, int *);int (__cdecl *f_send)(struct netsnmp_transport_s *, void *, int, void **, int *);int (__cdecl *f_close)(struct netsnmp_transport_s *);struct netsnmp_transport_s *(__cdecl *f_open)(struct netsnmp_transport_s *);int (__cdecl *f_accept)(struct netsnmp_transport_s *);char *(__cdecl *f_fmtaddr)(struct netsnmp_transport_s *, void *, int);int (__cdecl *f_config)(struct netsnmp_transport_s *, const char *, const char *);int (__cdecl *f_copy)(struct netsnmp_transport_s *, struct netsnmp_transport_s *);int (__cdecl *f_setup_session)(struct netsnmp_transport_s *, struct snmp_session *);u_char *identifier;};
typedef struct netsnmp_tree_cache_s netsnmp_tree_cache;
struct netsnmp_tree_cache_s {struct netsnmp_subtree_s *subtree;netsnmp_request_info *requests_begin;netsnmp_request_info *requests_end;};
typedef union $1B35D174FFD6F02B21E6704B4C951A67 netsnmp_vardata;
typedef struct variable_list netsnmp_variable_list;
typedef struct netsnmp_void_array_s netsnmp_void_array;
struct netsnmp_void_array_s {size_t size;void **array;};
typedef struct netsnmp_watcher_info_s netsnmp_watcher_info;
struct netsnmp_watcher_info_s {void *data;size_t data_size;size_t max_size;u_char type;int flags;size_t *data_size_p;};
typedef struct $3010519FC8E063AC13B61458A4695107 network_port_t;
struct newah {u_int8_t ah_nxt;u_int8_t ah_len;u_int16_t ah_reserve;u_int32_t ah_spi;u_int32_t ah_seq;};
struct newesp {u_int32_t esp_spi;u_int32_t esp_seq;};
struct nextvend {u_char nv_magic[4];u_char nv_version;unsigned __int16 : 0;union {u_char NV0[58];struct nextvend::$7EA091B0963CBF62F9D73E9E3451E5E2::$4C928A861DF53AA82E61C4313B0554E4 NV1;} nv_U;};
union nextvend::$7EA091B0963CBF62F9D73E9E3451E5E2 {u_char NV0[58];struct nextvend::$7EA091B0963CBF62F9D73E9E3451E5E2::$4C928A861DF53AA82E61C4313B0554E4 NV1;};
struct nextvend::$7EA091B0963CBF62F9D73E9E3451E5E2::$4C928A861DF53AA82E61C4313B0554E4 {u_char NV1_opcode;u_char NV1_xid;u_char NV1_text[55];u_char NV1_null;};
typedef unsigned int nfds_t;
struct nfs_args {int version;struct sockaddr *addr;int addrlen;int sotype;int proto;u_char *fh;int fhsize;int flags;int wsize;int rsize;int readdirsize;int timeo;int retrans;int maxgrouplist;int readahead;int leaseterm;int deadthresh;char *hostname;int acregmin;int acregmax;int acdirmin;int acdirmax;uint32_t auth;uint32_t deadtimeout;};
struct nfs_diskless {struct nfs_dlmount nd_root;struct nfs_dlmount nd_private;};
struct nfs_dlmount {struct sockaddr_in ndm_saddr;char ndm_host[256];char *ndm_path;char *ndm_mntfrom;u_int32_t ndm_nfsv3;u_int32_t ndm_sotype;u_int32_t ndm_fhlen;u_char ndm_fh[64];};
struct nfs_exphandle {uint32_t nxh_version;uint32_t nxh_fsid;uint32_t nxh_expid;uint16_t nxh_flags;uint8_t nxh_reserved;uint8_t nxh_fidlen;};
struct nfs_export_args {uint32_t nxa_fsid;uint32_t nxa_expid;char *nxa_fspath;char *nxa_exppath;uint32_t nxa_flags;uint32_t nxa_netcount;struct nfs_export_net_args *nxa_nets;};
struct nfs_export_net_args {uint32_t nxna_flags;struct xucred nxna_cred;struct sockaddr_storage nxna_addr;struct sockaddr_storage nxna_mask;struct nfs_sec nxna_sec;};
struct __attribute__((packed)) nfs_export_stat_desc {uint32_t rec_vers;uint32_t rec_count;};
struct __attribute__((packed)) nfs_export_stat_rec {char path[1025];uint64_t ops;uint64_t bytes_read;uint64_t bytes_written;};
struct nfs_filehandle {uint32_t nfh_len;struct nfs_exphandle nfh_xh;unsigned __int8 nfh_fid[112];unsigned __int8 *nfh_fhp;};
struct nfs_fsid {uint64_t major;uint64_t minor;};
struct nfs_lock_msg {int lm_version;int lm_flags;u_int64_t lm_xid;struct flock lm_fl;struct sockaddr_storage lm_addr;int lm_fh_len;struct xucred lm_cred;u_int8_t lm_fh[64];};
struct nfs_lock_msg_queue {struct nfs_lock_msg_request *tqh_first;struct nfs_lock_msg_request **tqh_last;};
struct nfs_lock_msg_request {struct nfs_lock_msg_request::$5813B4C1F7982A33B431354D3E39333E lmr_next;int lmr_answered;int lmr_errno;int lmr_saved_errno;LOCKD_MSG lmr_msg;};
struct nfs_lock_msg_request::$5813B4C1F7982A33B431354D3E39333E {struct nfs_lock_msg_request *tqe_next;struct nfs_lock_msg_request **tqe_prev;};
union nfs_quadconvert {u_int32_t lval[2];u_quad_t qval;};
struct nfs_sec {int count;uint32_t flavors[5];};
struct nfs_specdata {uint32_t specdata1;uint32_t specdata2;};
struct nfs_stateid {uint32_t seqid;uint32_t other[3];};
struct nfs_uquad {u_int32_t nfsuquad[2];};
struct __attribute__((packed)) nfs_user_stat_desc {uint32_t rec_vers;uint32_t rec_count;};
struct __attribute__((packed)) nfs_user_stat_path_rec {u_char rec_type;char path[1025];};
struct __attribute__((packed)) nfs_user_stat_user_rec {u_char rec_type;uid_t uid;struct sockaddr_storage sock;uint64_t ops;uint64_t bytes_read;uint64_t bytes_written;uint32_t tm_start;uint32_t tm_last;};
struct nfsd_args {int sock;caddr_t name;int namelen;};
typedef union nfs_quadconvert nfsquad_t;
struct nfsstats {int attrcache_hits;int attrcache_misses;int lookupcache_hits;int lookupcache_misses;int direofcache_hits;int direofcache_misses;int biocache_reads;int read_bios;int read_physios;int biocache_writes;int write_bios;int write_physios;int biocache_readlinks;int readlink_bios;int biocache_readdirs;int readdir_bios;int rpccnt[23];int rpcretries;int srvrpccnt[23];int srvrpc_errs;int srv_errs;int rpcrequests;int rpctimeouts;int rpcunexpected;int rpcinvalid;int srvcache_inproghits;int srvcache_idemdonehits;int srvcache_nonidemdonehits;int srvcache_misses;int srvvop_writes;int pageins;int pageouts;};
typedef enum $696096D9A1236276F280ED3B7625D32B nfstype;
typedef struct nfs_uquad nfsuint64;
struct __attribute__((packed)) ni_reply_fqdn {u_int32_t ni_fqdn_ttl;u_int8_t ni_fqdn_namelen;u_int8_t ni_fqdn_name[3];};
typedef struct __nl_cat_d *nl_catd;
typedef __darwin_nl_item nl_item;
typedef __uint16_t nlink_t;
struct nlist {union nlist::$26321F46A668C9EA20993925C0BB247E n_un;uint8_t n_type;uint8_t n_sect;int16_t n_desc;uint32_t n_value;};
union nlist::$26321F46A668C9EA20993925C0BB247E {int32_t n_strx;};
struct nlist_64 {union nlist_64::$4D543BF749BB09F4875D250FEC3C43C7 n_un;uint8_t n_type;uint8_t n_sect;uint16_t n_desc;uint64_t n_value;};
union nlist_64::$4D543BF749BB09F4875D250FEC3C43C7 {uint32_t n_strx;};
struct nlm4_cancargs {netobj cookie;int block;int exclusive;struct nlm4_lock alock;};
struct nlm4_holder {int exclusive;u_int32_t svid;netobj oh;u_int64_t l_offset;u_int64_t l_len;};
struct nlm4_lock {char *caller_name;netobj fh;netobj oh;u_int32_t svid;u_int64_t l_offset;u_int64_t l_len;};
struct nlm4_lockargs {netobj cookie;int block;int exclusive;struct nlm4_lock alock;int reclaim;int state;};
struct nlm4_notify {char *name;int32_t state;};
struct nlm4_res {netobj cookie;nlm4_stat stat;};
struct nlm4_share {char *caller_name;netobj fh;netobj oh;fsh_mode mode;fsh_access access;};
struct nlm4_shareargs {netobj cookie;nlm4_share share;int reclaim;};
struct nlm4_shareres {netobj cookie;nlm4_stats stat;int sequence;};
struct nlm4_stat {nlm4_stats stat;};
enum nlm4_stats {nlm4_granted = 0x0,nlm4_denied = 0x1,nlm4_denied_nolocks = 0x2,nlm4_blocked = 0x3,nlm4_denied_grace_period = 0x4,nlm4_deadlck = 0x5,nlm4_rofs = 0x6,nlm4_stale_fh = 0x7,nlm4_fbig = 0x8,nlm4_failed = 0x9,};
struct nlm4_testargs {netobj cookie;int exclusive;struct nlm4_lock alock;};
struct nlm4_testres {netobj cookie;nlm4_testrply stat;};
struct nlm4_testrply {nlm4_stats stat;union nlm4_testrply::$19F65A684EF686FCB17D800C09B39B65 nlm4_testrply_u;};
union nlm4_testrply::$19F65A684EF686FCB17D800C09B39B65 {struct nlm4_holder holder;};
struct nlm4_unlockargs {netobj cookie;struct nlm4_lock alock;};
struct nlm_cancargs {netobj cookie;int block;int exclusive;struct nlm_lock alock;};
struct nlm_holder {int exclusive;int svid;netobj oh;u_int l_offset;u_int l_len;};
struct nlm_lock {char *caller_name;netobj fh;netobj oh;int svid;u_int l_offset;u_int l_len;};
struct nlm_lockargs {netobj cookie;int block;int exclusive;struct nlm_lock alock;int reclaim;int state;};
struct nlm_notify {char *name;rpc_int state;};
struct nlm_res {netobj cookie;nlm_stat stat;};
struct nlm_share {char *caller_name;netobj fh;netobj oh;fsh_mode mode;fsh_access access;};
struct nlm_shareargs {netobj cookie;nlm_share share;int reclaim;};
struct nlm_shareres {netobj cookie;nlm_stats stat;int sequence;};
struct nlm_sm_status {char *mon_name;int state;char priv[16];};
struct nlm_stat {nlm_stats stat;};
enum nlm_stats {nlm_granted = 0x0,nlm_denied = 0x1,nlm_denied_nolocks = 0x2,nlm_blocked = 0x3,nlm_denied_grace_period = 0x4,nlm_deadlck = 0x5,};
struct nlm_testargs {netobj cookie;int exclusive;struct nlm_lock alock;};
struct nlm_testres {netobj cookie;nlm_testrply stat;};
struct nlm_testrply {nlm_stats stat;union nlm_testrply::$25E723FE95144319ADEDD57F4FF59DDE nlm_testrply_u;};
union nlm_testrply::$25E723FE95144319ADEDD57F4FF59DDE {struct nlm_holder holder;};
struct nlm_unlockargs {netobj cookie;struct nlm_lock alock;};
typedef void (__cdecl *notationDeclSAXFunc)(void *ctx, const xmlChar *name, const xmlChar *publicId, const xmlChar *systemId);
typedef void *notify_handler_t;
typedef mach_port_t notify_port_t;
typedef struct $CCB3EA4D4E2EB1F9AAB4C1A3C0D4C77E np_uid_t;
typedef enum __ns_type ns_type;
struct nt_sid_t {u_int8_t sid_kind;u_int8_t sid_authcount;u_int8_t sid_authority[6];u_int32_t sid_authorities[16];};
typedef struct $C2E0EF1D854A0208E5318AF4389F85C9 ntsid_t;
struct obj_name_st {int type;int alias;const char *name;const char *data;};
struct ocsp_basic_response_st {OCSP_RESPDATA *tbsResponseData;X509_ALGOR *signatureAlgorithm;ASN1_BIT_STRING *signature;STACK *certs;};
struct ocsp_cert_id_st {X509_ALGOR *hashAlgorithm;ASN1_OCTET_STRING *issuerNameHash;ASN1_OCTET_STRING *issuerKeyHash;ASN1_INTEGER *serialNumber;};
struct ocsp_cert_status_st {int type;union ocsp_cert_status_st::$0CEB729C6D376DBCC2995D5CF424A18E value;};
union ocsp_cert_status_st::$0CEB729C6D376DBCC2995D5CF424A18E {ASN1_NULL *good;OCSP_REVOKEDINFO *revoked;ASN1_NULL *unknown;};
struct ocsp_crl_id_st {ASN1_IA5STRING *crlUrl;ASN1_INTEGER *crlNum;ASN1_GENERALIZEDTIME *crlTime;};
struct ocsp_one_request_st {OCSP_CERTID *reqCert;STACK *singleRequestExtensions;};
struct ocsp_req_ctx_st;
struct ocsp_req_info_st {ASN1_INTEGER *version;GENERAL_NAME *requestorName;STACK *requestList;STACK *requestExtensions;};
struct ocsp_request_st {OCSP_REQINFO *tbsRequest;OCSP_SIGNATURE *optionalSignature;};
struct ocsp_resp_bytes_st {ASN1_OBJECT *responseType;ASN1_OCTET_STRING *response;};
struct ocsp_responder_id_st {int type;union ocsp_responder_id_st::$A140B48D11B7E00D603349F1A886D7E2 value;};
union ocsp_responder_id_st::$A140B48D11B7E00D603349F1A886D7E2 {X509_NAME *byName;ASN1_OCTET_STRING *byKey;};
struct ocsp_response_data_st {ASN1_INTEGER *version;OCSP_RESPID *responderId;ASN1_GENERALIZEDTIME *producedAt;STACK *responses;STACK *responseExtensions;};
struct ocsp_response_st {ASN1_ENUMERATED *responseStatus;OCSP_RESPBYTES *responseBytes;};
struct ocsp_revoked_info_st {ASN1_GENERALIZEDTIME *revocationTime;ASN1_ENUMERATED *revocationReason;};
struct ocsp_service_locator_st {X509_NAME *issuer;STACK *locator;};
struct ocsp_signature_st {X509_ALGOR *signatureAlgorithm;ASN1_BIT_STRING *signature;STACK *certs;};
struct ocsp_single_response_st {OCSP_CERTID *certId;OCSP_CERTSTATUS *certStatus;ASN1_GENERALIZEDTIME *thisUpdate;ASN1_GENERALIZEDTIME *nextUpdate;STACK *singleExtensions;};
typedef __darwin_off_t off_t;
typedef uint32_t oid;
struct old_opi_cache_s {u_char *data;WriteMethod *write_method;};
struct ombstat {u_int32_t m_mbufs;u_int32_t m_clusters;u_int32_t m_spare;u_int32_t m_clfree;u_int32_t m_drops;u_int32_t m_wait;u_int32_t m_drain;u_short m_mtypes[256];u_int32_t m_mcfail;u_int32_t m_mpfail;u_int32_t m_msize;u_int32_t m_mclbytes;u_int32_t m_minclsize;u_int32_t m_mlen;u_int32_t m_mhlen;};
struct opaque_auth {int oa_flavor;caddr_t oa_base;unsigned int oa_length;};
struct openssl_item_st {int code;void *value;size_t value_size;size_t *value_length;};
struct option {const char *name;int has_arg;int *flag;int val;};
struct osockaddr {__uint16_t sa_family;char sa_data[14];};
struct ostat {__uint16_t st_dev;ino_t st_ino;mode_t st_mode;nlink_t st_nlink;__uint16_t st_uid;__uint16_t st_gid;__uint16_t st_rdev;__int32_t st_size;struct timespec st_atimespec;struct timespec st_mtimespec;struct timespec st_ctimespec;__int32_t st_blksize;__int32_t st_blocks;__uint32_t st_flags;__uint32_t st_gen;};
struct otherName_st {ASN1_OBJECT *type_id;ASN1_TYPE *value;};
typedef int (__cdecl *out_func)(void *, unsigned __int8 *, unsigned int);
struct outmp {char out_line[8];char out_name[8];int out_time;};
typedef BOOL (__cdecl *pConfigDSNFunc)(HWND hwndParent, WORD fRequest, LPCSTR lpszDriver, LPCSTR lpszAttributes);
typedef BOOL (__cdecl *pConfigDSNWFunc)(HWND hwndParent, WORD fRequest, LPCWSTR lpszDriver, LPCWSTR lpszAttributes);
typedef BOOL (__cdecl *pConfigDriverFunc)(HWND hwndParent, WORD fRequest, LPCSTR lpszDriver, LPCSTR lpszArgs, LPSTR lpszMsg, WORD cbMsgMax, WORD *pcbMsgOut);
typedef BOOL (__cdecl *pConfigDriverWFunc)(HWND hwndParent, WORD fRequest, LPCWSTR lpszDriver, LPCWSTR lpszArgs, LPWSTR lpszMsg, WORD cbMsgMax, WORD *pcbMsgOut);
typedef BOOL (__cdecl *pConfigTranslatorFunc)(HWND hwndParent, DWORD *pvOption);
typedef vm_offset_t *page_address_array_t;
struct pam_conv {int (__cdecl *conv)(int, const struct pam_message **, struct pam_response **, void *);void *appdata_ptr;};
typedef int (__cdecl *pam_func_t)(struct pam_handle *, int, int, const char **);
struct pam_handle;
typedef struct pam_handle pam_handle_t;
struct pam_message {int msg_style;char *msg;};
struct pam_module {char *path;pam_func_t func[6];void *dlh;};
typedef struct pam_module pam_module_t;
struct pam_repository {char *type;void *scope;size_t scope_len;};
typedef struct pam_repository pam_repository_t;
struct pam_response {char *resp;int resp_retcode;};
struct panel {WINDOW *win;struct panel *below;struct panel *above;void *user;};
typedef param_t *param_ptr_t;
typedef struct $A4B2B056AC02B7A91138DA853BA9D10A param_t;
enum passpolicyerror_enum {PP_passwordExpired = 0x0,PP_accountLocked = 0x1,PP_changeAfterReset = 0x2,PP_passwordModNotAllowed = 0x3,PP_mustSupplyOldPassword = 0x4,PP_insufficientPasswordQuality = 0x5,PP_passwordTooShort = 0x6,PP_passwordTooYoung = 0x7,PP_passwordInHistory = 0x8,PP_noError = 0xFFFF,};
struct passwd {char *pw_name;char *pw_passwd;uid_t pw_uid;gid_t pw_gid;__darwin_time_t pw_change;char *pw_class;char *pw_gecos;char *pw_dir;char *pw_shell;__darwin_time_t pw_expire;};
typedef struct _passwd_phrase_element passwd_phrase_element;
struct pcap;
struct pcap_addr {struct pcap_addr *next;struct sockaddr *addr;struct sockaddr *netmask;struct sockaddr *broadaddr;struct sockaddr *dstaddr;};
typedef struct pcap_addr pcap_addr_t;
typedef enum $0AA02EF7744A92D26B678F19DE8AD812 pcap_direction_t;
struct pcap_dumper;
typedef struct pcap_dumper pcap_dumper_t;
struct pcap_etherent {u_char addr[6];char name[122];};
struct pcap_file_header {bpf_u_int32 magic;u_short version_major;u_short version_minor;bpf_int32 thiszone;bpf_u_int32 sigfigs;bpf_u_int32 snaplen;bpf_u_int32 linktype;};
typedef void (__cdecl *pcap_handler)(u_char *, const struct pcap_pkthdr *, const u_char *);
struct pcap_if {struct pcap_if *next;char *name;char *description;struct pcap_addr *addresses;bpf_u_int32 flags;};
typedef struct pcap_if pcap_if_t;
struct pcap_pkthdr {struct timeval ts;bpf_u_int32 caplen;bpf_u_int32 len;};
struct pcap_stat {u_int ps_recv;u_int ps_drop;u_int ps_ifdrop;};
typedef struct pcap pcap_t;
typedef char *peername;
struct pem_ctx_st {int type;struct pem_ctx_st::$4E7FB566ECC299FB951FDCE71730D3D0 proc_type;char *domain;struct pem_ctx_st::$1125AD01A545DD25B2B33B94AE02ED75 DEK_info;PEM_USER *originator;int num_recipient;PEM_USER **recipient;STACK *x509_chain;EVP_MD *md;int md_enc;int md_len;char *md_data;EVP_CIPHER *dec;int key_len;unsigned __int8 *key;int data_enc;int data_len;unsigned __int8 *data;};
struct pem_ctx_st::$1125AD01A545DD25B2B33B94AE02ED75 {int cipher;};
struct pem_ctx_st::$4E7FB566ECC299FB951FDCE71730D3D0 {int version;int mode;};
typedef int __cdecl pem_password_cb(char *buf, int size, int rwflag, void *userdata);
struct pem_recip_st {char *name;X509_NAME *dn;int cipher;int key_enc;};
struct pfkeystat {u_quad_t out_total;u_quad_t out_bytes;u_quad_t out_msgtype[256];u_quad_t out_invlen;u_quad_t out_invver;u_quad_t out_invmsgtype;u_quad_t out_tooshort;u_quad_t out_nomem;u_quad_t out_dupext;u_quad_t out_invexttype;u_quad_t out_invsatype;u_quad_t out_invaddr;u_quad_t in_total;u_quad_t in_bytes;u_quad_t in_msgtype[256];u_quad_t in_msgtarget[3];u_quad_t in_nomem;u_quad_t sockerr;};
typedef u_int32_t pgno_t;
struct pgrp;
typedef __darwin_pid_t pid_t;
struct pipe;
struct pipe_fdinfo {struct proc_fileinfo pfi;struct pipe_info pipeinfo;};
struct pipe_info {struct vinfo_stat pipe_stat;uint64_t pipe_handle;uint64_t pipe_peerhandle;int pipe_status;int rfu_1;};
struct pipebuf {u_int cnt;u_int in;u_int out;u_int size;caddr_t buffer;};
typedef struct _pitem pitem;
typedef struct _pitem *piterator;
struct pkcs12_bag_st {ASN1_OBJECT *type;union pkcs12_bag_st::$040857FDBC76680A083043065CFE20BF value;};
union pkcs12_bag_st::$040857FDBC76680A083043065CFE20BF {ASN1_OCTET_STRING *x509cert;ASN1_OCTET_STRING *x509crl;ASN1_OCTET_STRING *octet;ASN1_IA5STRING *sdsicert;ASN1_TYPE *other;};
struct pkcs7_digest_st {ASN1_INTEGER *version;X509_ALGOR *md;struct pkcs7_st *contents;ASN1_OCTET_STRING *digest;};
struct pkcs7_enc_content_st {ASN1_OBJECT *content_type;X509_ALGOR *algorithm;ASN1_OCTET_STRING *enc_data;const EVP_CIPHER *cipher;};
struct pkcs7_encrypted_st {ASN1_INTEGER *version;PKCS7_ENC_CONTENT *enc_data;};
struct pkcs7_enveloped_st {ASN1_INTEGER *version;STACK *recipientinfo;PKCS7_ENC_CONTENT *enc_data;};
struct pkcs7_issuer_and_serial_st {X509_NAME *issuer;ASN1_INTEGER *serial;};
struct pkcs7_recip_info_st {ASN1_INTEGER *version;PKCS7_ISSUER_AND_SERIAL *issuer_and_serial;X509_ALGOR *key_enc_algor;ASN1_OCTET_STRING *enc_key;X509 *cert;};
struct pkcs7_signed_st {ASN1_INTEGER *version;STACK *md_algs;STACK *cert;STACK *crl;STACK *signer_info;struct pkcs7_st *contents;};
struct pkcs7_signedandenveloped_st {ASN1_INTEGER *version;STACK *md_algs;STACK *cert;STACK *crl;STACK *signer_info;PKCS7_ENC_CONTENT *enc_data;STACK *recipientinfo;};
struct pkcs7_signer_info_st {ASN1_INTEGER *version;PKCS7_ISSUER_AND_SERIAL *issuer_and_serial;X509_ALGOR *digest_alg;STACK *auth_attr;X509_ALGOR *digest_enc_alg;ASN1_OCTET_STRING *enc_digest;STACK *unauth_attr;EVP_PKEY *pkey;};
struct pkcs7_st {unsigned __int8 *asn1;__int64 length;int state;int detached;ASN1_OBJECT *type;union pkcs7_st::$C4161349F87321B4281B96BCD451F4DB d;};
union pkcs7_st::$C4161349F87321B4281B96BCD451F4DB {char *ptr;ASN1_OCTET_STRING *data;PKCS7_SIGNED *sign;PKCS7_ENVELOPE *enveloped;PKCS7_SIGN_ENVELOPE *signed_and_enveloped;PKCS7_DIGEST *digest;PKCS7_ENCRYPT *encrypted;ASN1_TYPE *other;};
struct pkcs8_priv_key_info_st {int broken;ASN1_INTEGER *version;X509_ALGOR *pkeyalg;ASN1_TYPE *pkey;STACK *attributes;};
typedef struct __pkthdr *pkthdr_t;
struct plimit {struct rlimit pl_rlimit[9];int pl_refcnt;};
typedef int (__cdecl *plugin_referral_entry_callback)(char *referral, void *callback_data);
typedef void (__cdecl *plugin_result_callback)(int rc, void *callback_data);
typedef int (__cdecl *plugin_search_entry_callback)(Slapi_Entry *e, void *callback_data);
struct pmap {unsigned int pm_prog;unsigned int pm_vers;unsigned int pm_prot;unsigned int pm_port;};
struct pmaplist {struct pmap pml_map;struct pmaplist *pml_next;};
typedef enum $F236BFF0AA67B00384F80E74B2E93967 point_conversion_form_t;
typedef vm_offset_t pointer_t;
typedef struct policy_bases policy_base_data_t;
typedef integer_t *policy_base_t;
struct policy_bases {policy_timeshare_base_data_t ts;policy_rr_base_data_t rr;policy_fifo_base_data_t fifo;};
struct policy_fifo_base {integer_t base_priority;};
typedef struct policy_fifo_base policy_fifo_base_data_t;
typedef struct policy_fifo_base *policy_fifo_base_t;
struct policy_fifo_info {integer_t max_priority;integer_t base_priority;boolean_t depressed;integer_t depress_priority;};
typedef struct policy_fifo_info policy_fifo_info_data_t;
typedef struct policy_fifo_info *policy_fifo_info_t;
struct policy_fifo_limit {integer_t max_priority;};
typedef struct policy_fifo_limit policy_fifo_limit_data_t;
typedef struct policy_fifo_limit *policy_fifo_limit_t;
typedef struct policy_infos policy_info_data_t;
typedef integer_t *policy_info_t;
struct policy_infos {policy_timeshare_info_data_t ts;policy_rr_info_data_t rr;policy_fifo_info_data_t fifo;};
typedef struct policy_limits policy_limit_data_t;
typedef integer_t *policy_limit_t;
struct policy_limits {policy_timeshare_limit_data_t ts;policy_rr_limit_data_t rr;policy_fifo_limit_data_t fifo;};
struct policy_rr_base {integer_t base_priority;integer_t quantum;};
typedef struct policy_rr_base policy_rr_base_data_t;
typedef struct policy_rr_base *policy_rr_base_t;
struct policy_rr_info {integer_t max_priority;integer_t base_priority;integer_t quantum;boolean_t depressed;integer_t depress_priority;};
typedef struct policy_rr_info policy_rr_info_data_t;
typedef struct policy_rr_info *policy_rr_info_t;
struct policy_rr_limit {integer_t max_priority;};
typedef struct policy_rr_limit policy_rr_limit_data_t;
typedef struct policy_rr_limit *policy_rr_limit_t;
typedef int policy_t;
struct policy_timeshare_base {integer_t base_priority;};
typedef struct policy_timeshare_base policy_timeshare_base_data_t;
typedef struct policy_timeshare_base *policy_timeshare_base_t;
struct policy_timeshare_info {integer_t max_priority;integer_t base_priority;integer_t cur_priority;boolean_t depressed;integer_t depress_priority;};
typedef struct policy_timeshare_info policy_timeshare_info_data_t;
typedef struct policy_timeshare_info *policy_timeshare_info_t;
struct policy_timeshare_limit {integer_t max_priority;};
typedef struct policy_timeshare_limit policy_timeshare_limit_data_t;
typedef struct policy_timeshare_limit *policy_timeshare_limit_t;
struct pollfd {int fd;__int16 events;__int16 revents;};
struct port_obj_tentry {void *pos_value;int pos_type;};
typedef struct $0362AC053C3D6D68586BA4DFD8C6F4A4 *port_stat_ptr_t;
typedef struct $0362AC053C3D6D68586BA4DFD8C6F4A4 port_stat_t;
typedef struct posix_cred *posix_cred_t;
typedef void *posix_spawn_file_actions_t;
typedef void *posix_spawnattr_t;
struct ppd_attr_s {char name[41];char spec[41];char text[81];char *value;};
typedef struct ppd_attr_s ppd_attr_t;
struct ppd_choice_s {char marked;char choice[41];char text[81];char *code;ppd_option_t *option;};
typedef struct ppd_choice_s ppd_choice_t;
enum ppd_conform_e {PPD_CONFORM_RELAXED = 0x0,PPD_CONFORM_STRICT = 0x1,};
typedef enum ppd_conform_e ppd_conform_t;
struct ppd_const_s {char option1[41];char choice1[41];char option2[41];char choice2[41];};
typedef struct ppd_const_s ppd_const_t;
struct ppd_coption_s {char keyword[41];ppd_option_t *option;int marked;cups_array_t *params;};
typedef struct ppd_coption_s ppd_coption_t;
struct ppd_cparam_s {char name[41];char text[81];int order;ppd_cptype_t type;ppd_cplimit_t minimum;ppd_cplimit_t maximum;ppd_cpvalue_t current;};
typedef struct ppd_cparam_s ppd_cparam_t;
typedef union ppd_cplimit_u ppd_cplimit_t;
union ppd_cplimit_u {float custom_curve;int custom_int;float custom_invcurve;int custom_passcode;int custom_password;float custom_points;float custom_real;int custom_string;};
enum ppd_cptype_e {PPD_CUSTOM_CURVE = 0x0,PPD_CUSTOM_INT = 0x1,PPD_CUSTOM_INVCURVE = 0x2,PPD_CUSTOM_PASSCODE = 0x3,PPD_CUSTOM_PASSWORD = 0x4,PPD_CUSTOM_POINTS = 0x5,PPD_CUSTOM_REAL = 0x6,PPD_CUSTOM_STRING = 0x7,};
typedef enum ppd_cptype_e ppd_cptype_t;
typedef union ppd_cpvalue_u ppd_cpvalue_t;
union ppd_cpvalue_u {float custom_curve;int custom_int;float custom_invcurve;char *custom_passcode;char *custom_password;float custom_points;float custom_real;char *custom_string;};
enum ppd_cs_e {PPD_CS_CMYK = 0xFFFFFFFC,PPD_CS_CMY = 0xFFFFFFFD,PPD_CS_GRAY = 0x1,PPD_CS_RGB = 0x3,PPD_CS_RGBK = 0x4,PPD_CS_N = 0x5,};
typedef enum ppd_cs_e ppd_cs_t;
struct ppd_emul_s {char name[41];char *start;char *stop;};
typedef struct ppd_emul_s ppd_emul_t;
struct ppd_file_s {int language_level;int color_device;int variable_sizes;int accurate_screens;int contone_only;int landscape;int model_number;int manual_copies;int throughput;ppd_cs_t colorspace;char *patches;int num_emulations;ppd_emul_t *emulations;char *jcl_begin;char *jcl_ps;char *jcl_end;char *lang_encoding;char *lang_version;char *modelname;char *ttrasterizer;char *manufacturer;char *product;char *nickname;char *shortnickname;int num_groups;ppd_group_t *groups;int num_sizes;ppd_size_t *sizes;float custom_min[2];float custom_max[2];float custom_margins[4];int num_consts;ppd_const_t *consts;int num_fonts;char **fonts;int num_profiles;ppd_profile_t *profiles;int num_filters;char **filters;int flip_duplex;char *protocols;char *pcfilename;int num_attrs;int cur_attr;ppd_attr_t **attrs;cups_array_t *sorted_attrs;cups_array_t *options;cups_array_t *coptions;cups_array_t *marked;cups_array_t *cups_uiconstraints;_ppd_cache_t *cache;};
typedef struct ppd_file_s ppd_file_t;
struct ppd_group_s {char text[40];char name[41];int num_options;ppd_option_t *options;int num_subgroups;struct ppd_group_s *subgroups;};
typedef struct ppd_group_s ppd_group_t;
struct ppd_option_s {char conflicted;char keyword[41];char defchoice[41];char text[81];ppd_ui_t ui;ppd_section_t section;float order;int num_choices;ppd_choice_t *choices;};
typedef struct ppd_option_s ppd_option_t;
struct ppd_profile_s {char resolution[41];char media_type[41];float density;float gamma;float matrix[3][3];};
typedef struct ppd_profile_s ppd_profile_t;
enum ppd_section_e {PPD_ORDER_ANY = 0x0,PPD_ORDER_DOCUMENT = 0x1,PPD_ORDER_EXIT = 0x2,PPD_ORDER_JCL = 0x3,PPD_ORDER_PAGE = 0x4,PPD_ORDER_PROLOG = 0x5,};
typedef enum ppd_section_e ppd_section_t;
struct ppd_size_s {int marked;char name[41];float width;float length;float left;float bottom;float right;float top;};
typedef struct ppd_size_s ppd_size_t;
enum ppd_status_e {PPD_OK = 0x0,PPD_FILE_OPEN_ERROR = 0x1,PPD_NULL_FILE = 0x2,PPD_ALLOC_ERROR = 0x3,PPD_MISSING_PPDADOBE4 = 0x4,PPD_MISSING_VALUE = 0x5,PPD_INTERNAL_ERROR = 0x6,PPD_BAD_OPEN_GROUP = 0x7,PPD_NESTED_OPEN_GROUP = 0x8,PPD_BAD_OPEN_UI = 0x9,PPD_NESTED_OPEN_UI = 0xA,PPD_BAD_ORDER_DEPENDENCY = 0xB,PPD_BAD_UI_CONSTRAINTS = 0xC,PPD_MISSING_ASTERISK = 0xD,PPD_LINE_TOO_LONG = 0xE,PPD_ILLEGAL_CHARACTER = 0xF,PPD_ILLEGAL_MAIN_KEYWORD = 0x10,PPD_ILLEGAL_OPTION_KEYWORD = 0x11,PPD_ILLEGAL_TRANSLATION = 0x12,PPD_ILLEGAL_WHITESPACE = 0x13,PPD_BAD_CUSTOM_PARAM = 0x14,PPD_MISSING_OPTION_KEYWORD = 0x15,PPD_BAD_VALUE = 0x16,PPD_MISSING_CLOSE_GROUP = 0x17,PPD_MAX_STATUS = 0x18,};
typedef enum ppd_status_e ppd_status_t;
enum ppd_ui_e {PPD_UI_BOOLEAN = 0x0,PPD_UI_PICKONE = 0x1,PPD_UI_PICKMANY = 0x2,};
typedef enum ppd_ui_e ppd_ui_t;
typedef uint32_t ppnum_t;
typedef struct _pqueue *pqueue;
struct prebind_cksum_command {uint32_t cmd;uint32_t cmdsize;uint32_t cksum;};
struct prebound_dylib_command {uint32_t cmd;uint32_t cmdsize;union lc_str name;uint32_t nmodules;union lc_str linked_modules;};
struct private_key_st {int version;X509_ALGOR *enc_algor;ASN1_OCTET_STRING *enc_pkey;EVP_PKEY *dec_pkey;int key_length;char *key_data;int key_free;EVP_CIPHER_INFO cipher;int references;};
struct proc;
struct proc_bsdinfo {uint32_t pbi_flags;uint32_t pbi_status;uint32_t pbi_xstatus;uint32_t pbi_pid;uint32_t pbi_ppid;uid_t pbi_uid;gid_t pbi_gid;uid_t pbi_ruid;gid_t pbi_rgid;uid_t pbi_svuid;gid_t pbi_svgid;uint32_t rfu_1;char pbi_comm[16];char pbi_name[32];uint32_t pbi_nfiles;uint32_t pbi_pgid;uint32_t pbi_pjobc;uint32_t e_tdev;uint32_t e_tpgid;int32_t pbi_nice;uint64_t pbi_start_tvsec;uint64_t pbi_start_tvusec;};
struct proc_bsdshortinfo {uint32_t pbsi_pid;uint32_t pbsi_ppid;uint32_t pbsi_pgid;uint32_t pbsi_status;char pbsi_comm[16];uint32_t pbsi_flags;uid_t pbsi_uid;gid_t pbsi_gid;uid_t pbsi_ruid;gid_t pbsi_rgid;uid_t pbsi_svuid;gid_t pbsi_svgid;uint32_t pbsi_rfu;};
struct proc_fdinfo {int32_t proc_fd;uint32_t proc_fdtype;};
struct proc_fileinfo {uint32_t fi_openflags;uint32_t fi_status;off_t fi_offset;int32_t fi_type;int32_t rfu_1;};
struct proc_fileportinfo {uint32_t proc_fileport;uint32_t proc_fdtype;};
struct proc_regioninfo {uint32_t pri_protection;uint32_t pri_max_protection;uint32_t pri_inheritance;uint32_t pri_flags;uint64_t pri_offset;uint32_t pri_behavior;uint32_t pri_user_wired_count;uint32_t pri_user_tag;uint32_t pri_pages_resident;uint32_t pri_pages_shared_now_private;uint32_t pri_pages_swapped_out;uint32_t pri_pages_dirtied;uint32_t pri_ref_count;uint32_t pri_shadow_depth;uint32_t pri_share_mode;uint32_t pri_private_pages_resident;uint32_t pri_shared_pages_resident;uint32_t pri_obj_id;uint32_t pri_depth;uint64_t pri_address;uint64_t pri_size;};
struct proc_regionwithpathinfo {struct proc_regioninfo prp_prinfo;struct vnode_info_path prp_vip;};
typedef struct proc *proc_t;
struct proc_taskallinfo {struct proc_bsdinfo pbsd;struct proc_taskinfo ptinfo;};
struct proc_taskinfo {uint64_t pti_virtual_size;uint64_t pti_resident_size;uint64_t pti_total_user;uint64_t pti_total_system;uint64_t pti_threads_user;uint64_t pti_threads_system;int32_t pti_policy;int32_t pti_faults;int32_t pti_pageins;int32_t pti_cow_faults;int32_t pti_messages_sent;int32_t pti_messages_received;int32_t pti_syscalls_mach;int32_t pti_syscalls_unix;int32_t pti_csw;int32_t pti_threadnum;int32_t pti_numrunning;int32_t pti_priority;};
struct proc_threadinfo {uint64_t pth_user_time;uint64_t pth_system_time;int32_t pth_cpu_usage;int32_t pth_policy;int32_t pth_run_state;int32_t pth_flags;int32_t pth_sleep_time;int32_t pth_curpri;int32_t pth_priority;int32_t pth_maxpriority;char pth_name[64];};
struct proc_threadwithpathinfo {struct proc_threadinfo pt;struct vnode_info_path pvip;};
struct proc_vnodepathinfo {struct vnode_info_path pvi_cdir;struct vnode_info_path pvi_rdir;};
struct proc_workqueueinfo {uint32_t pwq_nthreads;uint32_t pwq_runthreads;uint32_t pwq_blockedthreads;uint32_t pwq_state;};
typedef void (__cdecl *processingInstructionSAXFunc)(void *ctx, const xmlChar *target, const xmlChar *data);
typedef processor_t *processor_array_t;
struct processor_basic_info {cpu_type_t cpu_type;cpu_subtype_t cpu_subtype;boolean_t running;int slot_num;boolean_t is_master;};
typedef struct processor_basic_info processor_basic_info_data_t;
typedef struct processor_basic_info *processor_basic_info_t;
struct processor_cpu_load_info {unsigned int cpu_ticks[4];};
typedef struct processor_cpu_load_info processor_cpu_load_info_data_t;
typedef struct processor_cpu_load_info *processor_cpu_load_info_t;
typedef int processor_flavor_t;
typedef integer_t *processor_info_array_t;
typedef integer_t processor_info_data_t[1024];
typedef integer_t *processor_info_t;
typedef processor_array_t processor_port_array_t;
typedef processor_t processor_port_t;
typedef processor_set_t *processor_set_array_t;
struct processor_set_basic_info {int processor_count;int default_policy;};
typedef struct processor_set_basic_info processor_set_basic_info_data_t;
typedef struct processor_set_basic_info *processor_set_basic_info_t;
typedef processor_set_t processor_set_control_port_t;
typedef mach_port_t processor_set_control_t;
typedef int processor_set_flavor_t;
typedef integer_t processor_set_info_data_t[1024];
typedef integer_t *processor_set_info_t;
struct processor_set_load_info {int task_count;int thread_count;integer_t load_average;integer_t mach_factor;};
typedef struct processor_set_load_info processor_set_load_info_data_t;
typedef struct processor_set_load_info *processor_set_load_info_t;
typedef processor_set_t *processor_set_name_array_t;
typedef processor_set_array_t processor_set_name_port_array_t;
typedef processor_set_t processor_set_name_port_t;
typedef processor_set_t processor_set_name_t;
typedef processor_set_t processor_set_port_t;
typedef mach_port_t processor_set_t;
typedef mach_port_t processor_t;
typedef char *profile_filespec_list_t;
typedef char *profile_filespec_t;
typedef struct _profile_t *profile_t;
struct propctx;
struct propval {const char *name;const char **values;unsigned int nvalues;unsigned int valsize;};
struct protoent {char *p_name;char **p_aliases;int p_proto;};
struct protosw;
struct psem_fdinfo {struct proc_fileinfo pfi;struct psem_info pseminfo;};
struct psem_info {struct vinfo_stat psem_stat;char psem_name[1024];};
struct pseminfo;
struct pshm_fdinfo {struct proc_fileinfo pfi;struct pshm_info pshminfo;};
struct pshm_info {struct vinfo_stat pshm_stat;uint64_t pshm_mappaddr;char pshm_name[1024];};
struct pshminfo;
struct pstats {struct rusage p_ru;struct rusage p_cru;struct pstats::uprof p_prof;struct timeval p_start;};
struct pstats::uprof {struct uprof *pr_next;caddr_t pr_base;u_int32_t pr_size;u_int32_t pr_off;u_int32_t pr_scale;u_int32_t pr_addr;u_int32_t pr_ticks;};
typedef __darwin_pthread_attr_t pthread_attr_t;
typedef __darwin_pthread_cond_t pthread_cond_t;
typedef __darwin_pthread_condattr_t pthread_condattr_t;
typedef __darwin_pthread_key_t pthread_key_t;
typedef __darwin_pthread_mutex_t pthread_mutex_t;
typedef __darwin_pthread_mutexattr_t pthread_mutexattr_t;
typedef __darwin_pthread_once_t pthread_once_t;
typedef __darwin_pthread_rwlock_t pthread_rwlock_t;
typedef __darwin_pthread_rwlockattr_t pthread_rwlockattr_t;
typedef __darwin_pthread_t pthread_t;
typedef __darwin_ptrdiff_t ptrdiff_t;
typedef quad_t *qaddr_t;
struct qelem {struct qelem *q_forw;struct qelem *q_back;char *q_data;};
typedef int64_t quad_t;
struct radvisory {off_t ra_offset;int ra_count;};
struct rand_meth_st {void (__cdecl *seed)(const void *buf, int num);int (__cdecl *bytes)(unsigned __int8 *buf, int num);void (*cleanup)(void);void (__cdecl *add)(const void *buf, int num, double entropy);int (__cdecl *pseudorand)(unsigned __int8 *buf, int num);int (*status)(void);};
struct range_list {struct range_list *next;int low;int high;};
struct ranlib {union ranlib::$D365164107DBB2F7587637CCBEC7897F ran_un;off_t ran_off;};
union ranlib::$D365164107DBB2F7587637CCBEC7897F {off_t ran_strx;char *ran_name;};
struct rawarc {uint32_t raw_frompc;uint32_t raw_selfpc;int32_t raw_count;};
struct rawarc_64 {uint64_t raw_frompc;uint64_t raw_selfpc;int32_t raw_count;};
struct rawarc_order {uint32_t raw_frompc;uint32_t raw_selfpc;uint32_t raw_count;uint32_t raw_order;};
struct rawarc_order_64 {uint64_t raw_frompc;uint64_t raw_selfpc;uint32_t raw_count;uint32_t raw_order;};
typedef struct rawarc_order_64 rawarc_order_t;
typedef struct rawarc_64 rawarc_t;
struct rc2_key_st {unsigned int data[64];};
struct rc4_key_st {unsigned __int8 x;unsigned __int8 y;unsigned __int8 data[256];};
struct rc5_key_st {int rounds;unsigned int data[34];};
struct read_config_memory {char *line;struct read_config_memory *next;};
typedef u_int32_t recno_t;
typedef struct record_pqueue_st record_pqueue;
struct record_pqueue_st {unsigned __int16 epoch;pqueue q;};
typedef void (__cdecl *referenceSAXFunc)(void *ctx, const xmlChar *name);
typedef uint32_t reg64_t;
typedef struct $FA547AB27F70B847C07B2381F2BB5B39 regex_t;
struct register_parameters {oid *name;size_t namelen;int priority;int range_subid;oid range_ubound;int timeout;u_char flags;const char *contextName;netsnmp_session *session;netsnmp_handler_registration *reginfo;};
struct register_sysOR_parameters {char *descr;oid *name;size_t namelen;};
typedef int64_t register_t;
typedef struct $BD619B2F7AFF7BA6F06506AA27210664 regmatch_t;
typedef __darwin_off_t regoff_t;
enum reject_stat {RPC_MISMATCH = 0x0,AUTH_ERROR = 0x1,};
struct rejected_reply {enum reject_stat rj_stat;union rejected_reply::$C3827AB85A505492A4D27FEA56330B1C ru;};
union rejected_reply::$C3827AB85A505492A4D27FEA56330B1C {struct rejected_reply::$C3827AB85A505492A4D27FEA56330B1C::$AC186CABF9007C2DA87CD3BECABD7D45 RJ_versions;enum auth_stat RJ_why;};
struct rejected_reply::$C3827AB85A505492A4D27FEA56330B1C::$AC186CABF9007C2DA87CD3BECABD7D45 {unsigned int low;unsigned int high;};
enum reloc_type_generic {GENERIC_RELOC_VANILLA = 0x0,GENERIC_RELOC_PAIR = 0x1,GENERIC_RELOC_SECTDIFF = 0x2,GENERIC_RELOC_PB_LA_PTR = 0x3,GENERIC_RELOC_LOCAL_SECTDIFF = 0x4,GENERIC_RELOC_TLV = 0x5,};
struct relocation_info {int32_t r_address;unsigned __int32 r_symbolnum : 24;unsigned __int32 r_pcrel : 1;unsigned __int32 r_length : 2;unsigned __int32 r_extern : 1;unsigned __int32 r_type : 4;};
typedef int (__cdecl *removefile_callback_t)(removefile_state_t state, const char *path, void *context);
typedef uint32_t removefile_flags_t;
typedef struct _removefile_state *removefile_state_t;
struct reply_body {enum reply_stat rp_stat;union reply_body::$3176F759A4E4A0B30BE44C0FA3C218CC ru;};
union reply_body::$3176F759A4E4A0B30BE44C0FA3C218CC {struct accepted_reply RP_ar;struct rejected_reply RP_dr;};
enum reply_stat {MSG_ACCEPTED = 0x0,MSG_DENIED = 0x1,};
struct request_info {int fd;char user[128];char daemon[128];char pid[10];struct host_info client[1];struct host_info server[1];void (__cdecl *sink)();void (__cdecl *hostname)();void (__cdecl *hostaddr)();void (__cdecl *cleanup)();struct netconfig *config;};
typedef enum __ns_cert_types res_9_ns_cert_types;
typedef enum __ns_class res_9_ns_class;
typedef enum __ns_flag res_9_ns_flag;
typedef enum __ns_key_types res_9_ns_key_types;
typedef struct __ns_msg res_9_ns_msg;
typedef enum __ns_opcode res_9_ns_opcode;
typedef enum __ns_rcode res_9_ns_rcode;
typedef struct __ns_rr res_9_ns_rr;
typedef enum __ns_sect res_9_ns_sect;
struct res_9_ns_tcp_tsig_state {int counter;struct dst_key *key;void *ctx;unsigned __int8 sig[512];int siglen;};
struct res_9_ns_tsig_key {char name[1025];char alg[1025];unsigned __int8 *data;int len;};
typedef enum __ns_update_operation res_9_ns_update_operation;
typedef enum $41E859DAAE26B07B8598FA4D4F1DF50A res_9_sendhookact;
union res_9_sockaddr_union {struct sockaddr_in sin;struct sockaddr_in6 sin6;int32_t __align32;char __space[128];};
typedef struct __res_9_state *res_9_state;
struct res_9_sym {int number;const char *name;const char *humanname;};
typedef res_9_sendhookact (__cdecl *res_send_qhook)(struct sockaddr *const *ns, const u_char **query, int *querylen, u_char *ans, int anssiz, int *resplen);
typedef res_9_sendhookact (__cdecl *res_send_rhook)(const struct sockaddr *ns, const u_char *query, int querylen, u_char *ans, int anssiz, int *resplen);
typedef xmlParserInputPtr (__cdecl *resolveEntitySAXFunc)(void *ctx, const xmlChar *publicId, const xmlChar *systemId);
struct rip {unsigned __int8 rip_cmd;unsigned __int8 rip_vers;unsigned __int8 rip_res1[2];union rip::$AFFF135AAACB9FA320A59FAF8451ECA8 ripun;};
union rip::$AFFF135AAACB9FA320A59FAF8451ECA8 {struct netinfo ru_nets[1];char ru_tracefile[1];};
typedef int __cdecl rl_command_func_t(int, int);
typedef char *__cdecl rl_compentry_func_t(const char *, int);
typedef __uint64_t rlim_t;
struct rlimit {rlim_t rlim_cur;rlim_t rlim_max;};
struct rmtcallargs {unsigned int prog;unsigned int vers;unsigned int proc;unsigned int arglen;caddr_t args_ptr;xdrproc_t xdr_args;};
struct rmtcallres {unsigned int *port_ptr;unsigned int resultslen;caddr_t results_ptr;xdrproc_t xdr_results;};
struct route;
struct route_cb {int ip_count;int ip6_count;int ipx_count;int ns_count;int iso_count;int any_count;};
typedef struct __rtentry *route_t;
typedef mach_msg_type_descriptor_t routine_arg_descriptor;
typedef mach_msg_type_descriptor_t *routine_arg_descriptor_t;
typedef unsigned int routine_arg_offset;
typedef unsigned int routine_arg_size;
typedef unsigned int routine_arg_type;
struct routine_descriptor {mig_impl_routine_t impl_routine;mig_stub_routine_t stub_routine;unsigned int argc;unsigned int descr_count;routine_arg_descriptor_t arg_descr;unsigned int max_reply_msg;};
typedef struct routine_descriptor *routine_descriptor_t;
struct routines_command {uint32_t cmd;uint32_t cmdsize;uint32_t init_address;uint32_t init_module;uint32_t reserved1;uint32_t reserved2;uint32_t reserved3;uint32_t reserved4;uint32_t reserved5;uint32_t reserved6;};
struct routines_command_64 {uint32_t cmd;uint32_t cmdsize;uint64_t init_address;uint64_t init_module;uint64_t reserved1;uint64_t reserved2;uint64_t reserved3;uint64_t reserved4;uint64_t reserved5;uint64_t reserved6;};
struct rpath_command {uint32_t cmd;uint32_t cmdsize;union lc_str path;};
struct rpc_createerr {enum clnt_stat cf_stat;struct rpc_err cf_error;};
struct rpc_err {enum clnt_stat re_status;union rpc_err::$1E28E71970EF2834FCFCF0531E4A2FC1 ru;};
union rpc_err::$1E28E71970EF2834FCFCF0531E4A2FC1 {int RE_errno;enum auth_stat RE_why;struct rpc_err::$1E28E71970EF2834FCFCF0531E4A2FC1::$AC186CABF9007C2DA87CD3BECABD7D45 RE_vers;struct rpc_err::$1E28E71970EF2834FCFCF0531E4A2FC1::$BF7AC7AAFAE2A9D4F26CD1E6B816F6B2 RE_lb;};
struct rpc_err::$1E28E71970EF2834FCFCF0531E4A2FC1::$AC186CABF9007C2DA87CD3BECABD7D45 {unsigned int low;unsigned int high;};
struct rpc_err::$1E28E71970EF2834FCFCF0531E4A2FC1::$BF7AC7AAFAE2A9D4F26CD1E6B816F6B2 {int s1;int s2;};
typedef int rpc_int;
struct rpc_msg {unsigned int rm_xid;enum msg_type rm_direction;union rpc_msg::$7D774571B4FAB0E4BBD540829030FA52 ru;};
union rpc_msg::$7D774571B4FAB0E4BBD540829030FA52 {struct call_body RM_cmb;struct reply_body RM_rmb;};
struct rpc_routine_arg_descriptor {routine_arg_type type;routine_arg_size size;routine_arg_size count;routine_arg_offset offset;};
typedef struct rpc_routine_arg_descriptor *rpc_routine_arg_descriptor_t;
struct rpc_routine_descriptor {mig_impl_routine_t impl_routine;mig_stub_routine_t stub_routine;unsigned int argc;unsigned int descr_count;rpc_routine_arg_descriptor_t arg_descr;unsigned int max_reply_msg;};
typedef struct rpc_routine_descriptor *rpc_routine_descriptor_t;
struct rpc_signature {struct rpc_routine_descriptor rd;struct rpc_routine_arg_descriptor rad[1];};
struct rpc_subsystem {void *reserved;mach_msg_id_t start;mach_msg_id_t end;unsigned int maxsize;vm_address_t base_addr;struct rpc_routine_descriptor routine[1];struct rpc_routine_arg_descriptor arg_descriptor[1];};
typedef struct rpc_subsystem *rpc_subsystem_t;
typedef unsigned int rpc_uint;
struct rpcent {char *r_name;char **r_aliases;int r_number;};
struct rquota {int rq_bsize;int rq_active;u_int rq_bhardlimit;u_int rq_bsoftlimit;u_int rq_curblocks;u_int rq_fhardlimit;u_int rq_fsoftlimit;u_int rq_curfiles;u_int rq_btimeleft;u_int rq_ftimeleft;};
struct __attribute__((packed)) rr_pco_match {u_int8_t rpm_code;u_int8_t rpm_len;u_int8_t rpm_ordinal;u_int8_t rpm_matchlen;u_int8_t rpm_minlen;u_int8_t rpm_maxlen;u_int16_t rpm_reserved;struct in6_addr rpm_prefix;};
struct __attribute__((packed)) rr_pco_use {u_int8_t rpu_uselen;u_int8_t rpu_keeplen;u_int8_t rpu_ramask;u_int8_t rpu_raflags;u_int32_t rpu_vltime;u_int32_t rpu_pltime;u_int32_t rpu_flags;struct in6_addr rpu_prefix;};
struct __attribute__((packed)) rr_result {u_int16_t rrr_flags;u_int8_t rrr_ordinal;u_int8_t rrr_matchedlen;u_int32_t rrr_ifid;struct in6_addr rrr_prefix;};
struct rsa_meth_st {const char *name;int (__cdecl *rsa_pub_enc)(int flen, const unsigned __int8 *from, unsigned __int8 *to, RSA *rsa, int padding);int (__cdecl *rsa_pub_dec)(int flen, const unsigned __int8 *from, unsigned __int8 *to, RSA *rsa, int padding);int (__cdecl *rsa_priv_enc)(int flen, const unsigned __int8 *from, unsigned __int8 *to, RSA *rsa, int padding);int (__cdecl *rsa_priv_dec)(int flen, const unsigned __int8 *from, unsigned __int8 *to, RSA *rsa, int padding);int (__cdecl *rsa_mod_exp)(BIGNUM *r0, const BIGNUM *I, RSA *rsa, BN_CTX *ctx);int (__cdecl *bn_mod_exp)(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx);int (__cdecl *init)(RSA *rsa);int (__cdecl *finish)(RSA *rsa);int flags;char *app_data;int (__cdecl *rsa_sign)(int type, const unsigned __int8 *m, unsigned int m_length, unsigned __int8 *sigret, unsigned int *siglen, const RSA *rsa);int (__cdecl *rsa_verify)(int dtype, const unsigned __int8 *m, unsigned int m_length, unsigned __int8 *sigbuf, unsigned int siglen, const RSA *rsa);int (__cdecl *rsa_keygen)(RSA *rsa, int bits, BIGNUM *e, BN_GENCB *cb);};
struct rsa_st {int pad;__int64 version;const RSA_METHOD *meth;ENGINE *engine;BIGNUM *n;BIGNUM *e;BIGNUM *d;BIGNUM *p;BIGNUM *q;BIGNUM *dmp1;BIGNUM *dmq1;BIGNUM *iqmp;CRYPTO_EX_DATA ex_data;int references;int flags;BN_MONT_CTX *_method_mod_n;BN_MONT_CTX *_method_mod_p;BN_MONT_CTX *_method_mod_q;char *bignum_data;BN_BLINDING *blinding;BN_BLINDING *mt_blinding;};
struct rslvmulti_req {struct sockaddr *sa;struct sockaddr **llsa;};
struct rstat_timeval {u_int tv_sec;u_int tv_usec;};
struct rt_addrinfo {int rti_addrs;struct sockaddr *rti_info[8];};
struct rt_metrics {u_int32_t rmx_locks;u_int32_t rmx_mtu;u_int32_t rmx_hopcount;int32_t rmx_expire;u_int32_t rmx_recvpipe;u_int32_t rmx_sendpipe;u_int32_t rmx_ssthresh;u_int32_t rmx_rtt;u_int32_t rmx_rttvar;u_int32_t rmx_pksent;u_int32_t rmx_filler[4];};
struct rt_msghdr {u_short rtm_msglen;u_char rtm_version;u_char rtm_type;u_short rtm_index;int rtm_flags;int rtm_addrs;pid_t rtm_pid;int rtm_seq;int rtm_errno;int rtm_use;u_int32_t rtm_inits;struct rt_metrics rtm_rmx;};
struct rt_msghdr2 {u_short rtm_msglen;u_char rtm_version;u_char rtm_type;u_short rtm_index;int rtm_flags;int rtm_addrs;int32_t rtm_refcnt;int rtm_parentflags;int rtm_reserved;int rtm_use;u_int32_t rtm_inits;struct rt_metrics rtm_rmx;};
struct rtstat {__int16 rts_badredirect;__int16 rts_dynamic;__int16 rts_newgateway;__int16 rts_unreach;__int16 rts_wildcard;};
struct ru_utmp {char ut_line[8];char ut_name[8];char ut_host[16];rpc_int ut_time;};
typedef __darwin_rune_t rune_t;
struct rusage {struct timeval ru_utime;struct timeval ru_stime;__int64 ru_maxrss;__int64 ru_ixrss;__int64 ru_idrss;__int64 ru_isrss;__int64 ru_minflt;__int64 ru_majflt;__int64 ru_nswap;__int64 ru_inblock;__int64 ru_oublock;__int64 ru_msgsnd;__int64 ru_msgrcv;__int64 ru_nsignals;__int64 ru_nvcsw;__int64 ru_nivcsw;};
struct rusers_utmp {char *ut_user;char *ut_line;char *ut_host;int ut_type;int ut_time;u_int ut_idle;};
typedef struct ru_utmp rutmp;
typedef __uint8_t sa_family_t;
struct sadb_address {u_int16_t sadb_address_len;u_int16_t sadb_address_exttype;u_int8_t sadb_address_proto;u_int8_t sadb_address_prefixlen;u_int16_t sadb_address_reserved;};
struct sadb_alg {u_int8_t sadb_alg_id;u_int8_t sadb_alg_ivlen;u_int16_t sadb_alg_minbits;u_int16_t sadb_alg_maxbits;u_int16_t sadb_alg_reserved;};
struct sadb_comb {u_int8_t sadb_comb_auth;u_int8_t sadb_comb_encrypt;u_int16_t sadb_comb_flags;u_int16_t sadb_comb_auth_minbits;u_int16_t sadb_comb_auth_maxbits;u_int16_t sadb_comb_encrypt_minbits;u_int16_t sadb_comb_encrypt_maxbits;u_int32_t sadb_comb_reserved;u_int32_t sadb_comb_soft_allocations;u_int32_t sadb_comb_hard_allocations;u_int64_t sadb_comb_soft_bytes;u_int64_t sadb_comb_hard_bytes;u_int64_t sadb_comb_soft_addtime;u_int64_t sadb_comb_hard_addtime;u_int64_t sadb_comb_soft_usetime;u_int64_t sadb_comb_hard_usetime;};
struct sadb_ext {u_int16_t sadb_ext_len;u_int16_t sadb_ext_type;};
struct sadb_ident {u_int16_t sadb_ident_len;u_int16_t sadb_ident_exttype;u_int16_t sadb_ident_type;u_int16_t sadb_ident_reserved;u_int64_t sadb_ident_id;};
struct sadb_key {u_int16_t sadb_key_len;u_int16_t sadb_key_exttype;u_int16_t sadb_key_bits;u_int16_t sadb_key_reserved;};
struct sadb_lifetime {u_int16_t sadb_lifetime_len;u_int16_t sadb_lifetime_exttype;u_int32_t sadb_lifetime_allocations;u_int64_t sadb_lifetime_bytes;u_int64_t sadb_lifetime_addtime;u_int64_t sadb_lifetime_usetime;};
struct sadb_msg {u_int8_t sadb_msg_version;u_int8_t sadb_msg_type;u_int8_t sadb_msg_errno;u_int8_t sadb_msg_satype;u_int16_t sadb_msg_len;u_int16_t sadb_msg_reserved;u_int32_t sadb_msg_seq;u_int32_t sadb_msg_pid;};
struct sadb_prop {u_int16_t sadb_prop_len;u_int16_t sadb_prop_exttype;u_int8_t sadb_prop_replay;u_int8_t sadb_prop_reserved[3];};
struct sadb_sa {u_int16_t sadb_sa_len;u_int16_t sadb_sa_exttype;u_int32_t sadb_sa_spi;u_int8_t sadb_sa_replay;u_int8_t sadb_sa_state;u_int8_t sadb_sa_auth;u_int8_t sadb_sa_encrypt;u_int32_t sadb_sa_flags;};
struct __attribute__((aligned(8))) sadb_sastat {u_int16_t sadb_sastat_len;u_int16_t sadb_sastat_exttype;u_int32_t sadb_sastat_dir;u_int32_t sadb_sastat_reserved;u_int32_t sadb_sastat_list_len;};
struct sadb_sens {u_int16_t sadb_sens_len;u_int16_t sadb_sens_exttype;u_int32_t sadb_sens_dpd;u_int8_t sadb_sens_sens_level;u_int8_t sadb_sens_sens_len;u_int8_t sadb_sens_integ_level;u_int8_t sadb_sens_integ_len;u_int32_t sadb_sens_reserved;};
struct __attribute__((aligned(8))) sadb_session_id {u_int16_t sadb_session_id_len;u_int16_t sadb_session_id_exttype;u_int64_t sadb_session_id_v[2];};
struct sadb_spirange {u_int16_t sadb_spirange_len;u_int16_t sadb_spirange_exttype;u_int32_t sadb_spirange_min;u_int32_t sadb_spirange_max;u_int32_t sadb_spirange_reserved;};
struct sadb_supported {u_int16_t sadb_supported_len;u_int16_t sadb_supported_exttype;u_int32_t sadb_supported_reserved;};
struct sadb_x_ipsecrequest {u_int16_t sadb_x_ipsecrequest_len;u_int16_t sadb_x_ipsecrequest_proto;u_int8_t sadb_x_ipsecrequest_mode;u_int8_t sadb_x_ipsecrequest_level;u_int16_t sadb_x_ipsecrequest_reqid;};
struct sadb_x_kmprivate {u_int16_t sadb_x_kmprivate_len;u_int16_t sadb_x_kmprivate_exttype;u_int32_t sadb_x_kmprivate_reserved;};
struct sadb_x_policy {u_int16_t sadb_x_policy_len;u_int16_t sadb_x_policy_exttype;u_int16_t sadb_x_policy_type;u_int8_t sadb_x_policy_dir;u_int8_t sadb_x_policy_reserved;u_int32_t sadb_x_policy_id;u_int32_t sadb_x_policy_reserved2;};
struct sadb_x_sa2 {u_int16_t sadb_x_sa2_len;u_int16_t sadb_x_sa2_exttype;u_int8_t sadb_x_sa2_mode;u_int8_t sadb_x_sa2_reserved1;u_int16_t sadb_x_sa2_reserved2;u_int32_t sadb_x_sa2_sequence;u_int32_t sadb_x_sa2_reqid;};
typedef int __cdecl sasl_authorize_t(sasl_conn_t *conn, void *context, const char *requested_user, unsigned int rlen, const char *auth_identity, unsigned int alen, const char *def_realm, unsigned int urlen, struct propctx *propctx);
typedef int __cdecl sasl_auxprop_init_t(const sasl_utils_t *utils, int max_version, int *out_version, sasl_auxprop_plug_t **plug, const char *plugname);
struct sasl_auxprop_plug {int features;int spare_int1;void *glob_context;void (__cdecl *auxprop_free)(void *glob_context, const sasl_utils_t *utils);void (__cdecl *auxprop_lookup)(void *glob_context, sasl_server_params_t *sparams, unsigned int flags, const char *user, unsigned int ulen);char *name;int (__cdecl *auxprop_store)(void *glob_context, sasl_server_params_t *sparams, struct propctx *ctx, const char *user, unsigned int ulen);};
typedef struct sasl_auxprop_plug sasl_auxprop_plug_t;
struct sasl_callback {unsigned __int64 id;int (__cdecl *proc)();void *context;};
typedef struct sasl_callback sasl_callback_t;
typedef void *__cdecl sasl_calloc_t(unsigned __int64, unsigned __int64);
typedef int __cdecl sasl_canon_user_t(sasl_conn_t *conn, void *context, const char *in, unsigned int inlen, unsigned int flags, const char *user_realm, char *out, unsigned int out_max, unsigned int *out_len);
struct sasl_canonuser {int features;int spare_int1;void *glob_context;char *name;void (__cdecl *canon_user_free)(void *glob_context, const sasl_utils_t *utils);int (__cdecl *canon_user_server)(void *glob_context, sasl_server_params_t *sparams, const char *user, unsigned int len, unsigned int flags, char *out, unsigned int out_umax, unsigned int *out_ulen);int (__cdecl *canon_user_client)(void *glob_context, sasl_client_params_t *cparams, const char *user, unsigned int len, unsigned int flags, char *out, unsigned int out_max, unsigned int *out_len);int (__cdecl *spare_fptr1)();int (__cdecl *spare_fptr2)();int (__cdecl *spare_fptr3)();};
typedef int __cdecl sasl_canonuser_init_t(const sasl_utils_t *utils, int max_version, int *out_version, sasl_canonuser_plug_t **plug, const char *plugname);
typedef struct sasl_canonuser sasl_canonuser_plug_t;
typedef int __cdecl sasl_chalprompt_t(void *context, int id, const char *challenge, const char *prompt, const char *defresult, const char **result, unsigned int *len);
typedef void __cdecl sasl_client_info_callback_t(client_sasl_mechanism_t *m, sasl_info_callback_stage_t stage, void *rock);
struct sasl_client_params {const char *service;const char *serverFQDN;const char *clientFQDN;const sasl_utils_t *utils;const sasl_callback_t *prompt_supp;const char *iplocalport;const char *ipremoteport;unsigned int servicelen;unsigned int slen;unsigned int clen;unsigned int iploclen;unsigned int ipremlen;sasl_security_properties_t props;sasl_ssf_t external_ssf;void *spare_ptr1;void *spare_ptr2;void *spare_ptr3;void *spare_ptr4;int (__cdecl *canon_user)(sasl_conn_t *conn, const char *in, unsigned int len, unsigned int flags, sasl_out_params_t *oparams);int (__cdecl *spare_fptr1)();int spare_int1;int spare_int2;int spare_int3;unsigned int flags;int param_version;};
typedef struct sasl_client_params sasl_client_params_t;
struct sasl_client_plug {const char *mech_name;sasl_ssf_t max_ssf;unsigned int security_flags;unsigned int features;const unsigned __int64 *required_prompts;void *glob_context;int (__cdecl *mech_new)(void *glob_context, sasl_client_params_t *cparams, void **conn_context);int (__cdecl *mech_step)(void *conn_context, sasl_client_params_t *cparams, const char *serverin, unsigned int serverinlen, sasl_interact_t **prompt_need, const char **clientout, unsigned int *clientoutlen, sasl_out_params_t *oparams);void (__cdecl *mech_dispose)(void *conn_context, const sasl_utils_t *utils);void (__cdecl *mech_free)(void *glob_context, const sasl_utils_t *utils);int (__cdecl *idle)(void *glob_context, void *conn_context, sasl_client_params_t *cparams);int (__cdecl *spare_fptr1)();int (__cdecl *spare_fptr2)();};
typedef int __cdecl sasl_client_plug_init_t(const sasl_utils_t *utils, int max_version, int *out_version, sasl_client_plug_t **pluglist, int *plugcount);
typedef struct sasl_client_plug sasl_client_plug_t;
struct sasl_conn;
typedef struct sasl_conn sasl_conn_t;
typedef void __cdecl sasl_free_t(void *);
typedef int __cdecl sasl_getcallback_t(sasl_conn_t *conn, unsigned __int64 callbackid, int (__cdecl **pproc)(), void **pcontext);
typedef int __cdecl sasl_getopt_t(void *context, const char *plugin_name, const char *option, const char **result, unsigned int *len);
typedef int __cdecl sasl_getpath_t(void *context, const char **path);
typedef int __cdecl sasl_getrealm_t(void *context, int id, const char **availrealms, const char **result);
typedef int __cdecl sasl_getsecret_t(sasl_conn_t *conn, void *context, int id, sasl_secret_t **psecret);
typedef int __cdecl sasl_getsimple_t(void *context, int id, const char **result, unsigned int *len);
typedef enum $44CBB36E19F6FD8C2CE34633667F03E9 sasl_info_callback_stage_t;
struct sasl_interact {unsigned __int64 id;const char *challenge;const char *prompt;const char *defresult;const void *result;unsigned int len;};
typedef struct sasl_interact sasl_interact_t;
typedef int __cdecl sasl_log_t(void *context, int level, const char *message);
typedef void sasl_logmsg_p(sasl_conn_t *conn, const char *fmt, ...);
typedef void *__cdecl sasl_malloc_t(unsigned __int64);
typedef void *sasl_mutex_alloc_t(void);
typedef void __cdecl sasl_mutex_free_t(void *mutex);
typedef int __cdecl sasl_mutex_lock_t(void *mutex);
typedef int __cdecl sasl_mutex_unlock_t(void *mutex);
struct sasl_out_params {unsigned int doneflag;const char *user;const char *authid;unsigned int ulen;unsigned int alen;unsigned int maxoutbuf;sasl_ssf_t mech_ssf;void *encode_context;int (__cdecl *encode)(void *context, const struct iovec *invec, unsigned int numiov, const char **output, unsigned int *outputlen);void *decode_context;int (__cdecl *decode)(void *context, const char *input, unsigned int inputlen, const char **output, unsigned int *outputlen);void *client_creds;void *spare_ptr2;void *spare_ptr3;void *spare_ptr4;int (__cdecl *spare_fptr1)();int (__cdecl *spare_fptr2)();int spare_int1;int spare_int2;int spare_int3;int spare_int4;int param_version;};
typedef struct sasl_out_params sasl_out_params_t;
struct sasl_rand_s;
typedef struct sasl_rand_s sasl_rand_t;
typedef void *__cdecl sasl_realloc_t(void *, unsigned __int64);
struct sasl_secret {unsigned __int64 len;unsigned __int8 data[1];};
typedef struct sasl_secret sasl_secret_t;
struct sasl_security_properties {sasl_ssf_t min_ssf;sasl_ssf_t max_ssf;unsigned int maxbufsize;unsigned int security_flags;const char **property_names;const char **property_values;};
typedef struct sasl_security_properties sasl_security_properties_t;
typedef void __cdecl sasl_server_info_callback_t(server_sasl_mechanism_t *m, sasl_info_callback_stage_t stage, void *rock);
struct sasl_server_params {const char *service;const char *appname;const char *serverFQDN;const char *user_realm;const char *iplocalport;const char *ipremoteport;unsigned int servicelen;unsigned int applen;unsigned int slen;unsigned int urlen;unsigned int iploclen;unsigned int ipremlen;int log_level;const sasl_utils_t *utils;const sasl_callback_t *callbacks;sasl_security_properties_t props;sasl_ssf_t external_ssf;int (__cdecl *transition)(sasl_conn_t *conn, const char *pass, unsigned int passlen);int (__cdecl *canon_user)(sasl_conn_t *conn, const char *user, unsigned int ulen, unsigned int flags, sasl_out_params_t *oparams);struct propctx *propctx;void *spare_ptr1;void *spare_ptr2;void *spare_ptr3;void *spare_ptr4;int (__cdecl *spare_fptr1)();int (__cdecl *spare_fptr2)();int spare_int1;int spare_int2;int spare_int3;unsigned int flags;int param_version;};
typedef struct sasl_server_params sasl_server_params_t;
struct sasl_server_plug {const char *mech_name;sasl_ssf_t max_ssf;unsigned int security_flags;unsigned int features;void *glob_context;int (__cdecl *mech_new)(void *glob_context, sasl_server_params_t *sparams, const char *challenge, unsigned int challen, void **conn_context);int (__cdecl *mech_step)(void *conn_context, sasl_server_params_t *sparams, const char *clientin, unsigned int clientinlen, const char **serverout, unsigned int *serveroutlen, sasl_out_params_t *oparams);void (__cdecl *mech_dispose)(void *conn_context, const sasl_utils_t *utils);void (__cdecl *mech_free)(void *glob_context, const sasl_utils_t *utils);int (__cdecl *setpass)(void *glob_context, sasl_server_params_t *sparams, const char *user, const char *pass, unsigned int passlen, const char *oldpass, unsigned int oldpasslen, unsigned int flags);int (__cdecl *user_query)(void *glob_context, sasl_server_params_t *sparams, const char *user, int maxmech, const char **mechlist);int (__cdecl *idle)(void *glob_context, void *conn_context, sasl_server_params_t *sparams);int (__cdecl *mech_avail)(void *glob_context, sasl_server_params_t *sparams, void **conn_context);int (__cdecl *spare_fptr2)();};
typedef int __cdecl sasl_server_plug_init_t(const sasl_utils_t *utils, int max_version, int *out_version, sasl_server_plug_t **pluglist, int *plugcount);
typedef struct sasl_server_plug sasl_server_plug_t;
typedef int __cdecl sasl_server_userdb_checkpass_t(sasl_conn_t *conn, void *context, const char *user, const char *pass, unsigned int passlen, struct propctx *propctx);
typedef int __cdecl sasl_server_userdb_setpass_t(sasl_conn_t *conn, void *context, const char *user, const char *pass, unsigned int passlen, struct propctx *propctx, unsigned int flags);
typedef unsigned int sasl_ssf_t;
struct sasl_utils {int version;sasl_conn_t *conn;sasl_rand_t *rpool;void *getopt_context;sasl_getopt_t *getopt;sasl_malloc_t *malloc;sasl_calloc_t *calloc;sasl_realloc_t *realloc;sasl_free_t *free;sasl_mutex_alloc_t *mutex_alloc;sasl_mutex_lock_t *mutex_lock;sasl_mutex_unlock_t *mutex_unlock;sasl_mutex_free_t *mutex_free;void (__cdecl *MD5Init)(MD5_CTX *);void (__cdecl *MD5Update)(MD5_CTX *, const unsigned __int8 *text, unsigned int len);void (__cdecl *MD5Final)(unsigned __int8[16], MD5_CTX *);void (__cdecl *hmac_md5)(const unsigned __int8 *text, int text_len, const unsigned __int8 *key, int key_len, unsigned __int8[16]);void (__cdecl *hmac_md5_init)(HMAC_MD5_CTX *, const unsigned __int8 *key, int len);void (__cdecl *hmac_md5_final)(unsigned __int8[16], HMAC_MD5_CTX *);void (__cdecl *hmac_md5_precalc)(HMAC_MD5_STATE *, const unsigned __int8 *key, int len);void (__cdecl *hmac_md5_import)(HMAC_MD5_CTX *, HMAC_MD5_STATE *);int (__cdecl *mkchal)(sasl_conn_t *conn, char *buf, unsigned int maxlen, unsigned int hostflag);int (__cdecl *utf8verify)(const char *str, unsigned int len);void (__cdecl *rand)(sasl_rand_t *rpool, char *buf, unsigned int len);void (__cdecl *churn)(sasl_rand_t *rpool, const char *data, unsigned int len);int (__cdecl *checkpass)(sasl_conn_t *conn, const char *user, unsigned int userlen, const char *pass, unsigned int passlen);int (__cdecl *decode64)(const char *in, unsigned int inlen, char *out, unsigned int outmax, unsigned int *outlen);int (__cdecl *encode64)(const char *in, unsigned int inlen, char *out, unsigned int outmax, unsigned int *outlen);void (__cdecl *erasebuffer)(char *buf, unsigned int len);int (__cdecl *getprop)(sasl_conn_t *conn, int propnum, const void **pvalue);int (__cdecl *setprop)(sasl_conn_t *conn, int propnum, const void *value);sasl_getcallback_t *getcallback;void (*log)(sasl_conn_t *conn, int level, const char *fmt, ...);void (*seterror)(sasl_conn_t *conn, unsigned int flags, const char *fmt, ...);int *(__cdecl *spare_fptr)();struct propctx *(__cdecl *prop_new)(unsigned int estimate);int (__cdecl *prop_dup)(struct propctx *src_ctx, struct propctx **dst_ctx);int (__cdecl *prop_request)(struct propctx *ctx, const char **names);const struct propval *(__cdecl *prop_get)(struct propctx *ctx);int (__cdecl *prop_getnames)(struct propctx *ctx, const char **names, struct propval *vals);void (__cdecl *prop_clear)(struct propctx *ctx, int requests);void (__cdecl *prop_dispose)(struct propctx **ctx);int (__cdecl *prop_format)(struct propctx *ctx, const char *sep, int seplen, char *outbuf, unsigned int outmax, unsigned int *outlen);int (__cdecl *prop_set)(struct propctx *ctx, const char *name, const char *value, int vallen);int (__cdecl *prop_setvals)(struct propctx *ctx, const char *name, const char **values);void (__cdecl *prop_erase)(struct propctx *ctx, const char *name);int (__cdecl *auxprop_store)(sasl_conn_t *conn, struct propctx *ctx, const char *user);int (__cdecl *spare_fptr1)();int (__cdecl *spare_fptr2)();};
typedef struct sasl_utils sasl_utils_t;
typedef enum $0D3254EE5F0606DD2967BF158FADA5B5 sasl_verify_type_t;
typedef int __cdecl sasl_verifyfile_t(void *context, const char *file, sasl_verify_type_t type);
struct sastat {u_int32_t spi;u_int32_t created;struct sadb_lifetime lft_c;};
struct sbuf;
struct scattered_relocation_info {unsigned __int32 r_address : 24;unsigned __int32 r_type : 4;unsigned __int32 r_length : 2;unsigned __int32 r_pcrel : 1;unsigned __int32 r_scattered : 1;int32_t r_value;};
struct sched_param {int sched_priority;char __opaque[4];};
struct screen;
struct searchstate {u_char reserved[556];};
struct section {char sectname[16];char segname[16];uint32_t addr;uint32_t size;uint32_t offset;uint32_t align;uint32_t reloff;uint32_t nreloc;uint32_t flags;uint32_t reserved1;uint32_t reserved2;};
struct section_64 {char sectname[16];char segname[16];uint64_t addr;uint64_t size;uint32_t offset;uint32_t align;uint32_t reloff;uint32_t nreloc;uint32_t flags;uint32_t reserved1;uint32_t reserved2;uint32_t reserved3;};
typedef struct $0BA82F063C392BF02AF0AA599B603A12 security_token_t;
struct seed_key_st {unsigned int data[32];};
struct segment_command {uint32_t cmd;uint32_t cmdsize;char segname[16];uint32_t vmaddr;uint32_t vmsize;uint32_t fileoff;uint32_t filesize;vm_prot_t maxprot;vm_prot_t initprot;uint32_t nsects;uint32_t flags;};
struct segment_command_64 {uint32_t cmd;uint32_t cmdsize;char segname[16];uint64_t vmaddr;uint64_t vmsize;uint64_t fileoff;uint64_t filesize;vm_prot_t maxprot;vm_prot_t initprot;uint32_t nsects;uint32_t flags;};
typedef int32_t segsz_t;
struct sel {unsigned __int16 rpl : 2;unsigned __int16 ti : 1;unsigned __int16 index : 13;};
typedef struct sel sel_t;
struct sem {unsigned __int16 semval;pid_t sempid;unsigned __int16 semncnt;unsigned __int16 semzcnt;};
typedef int sem_t;
typedef semaphore_t semaphore_port_t;
typedef mach_port_t semaphore_t;
struct sembuf {unsigned __int16 sem_num;__int16 sem_op;__int16 sem_flg;};
struct semid_kernel;
union semun {int val;struct __semid_ds_new *buf;unsigned __int16 *array;};
typedef union semun semun_t;
struct servent {char *s_name;char **s_aliases;int s_port;char *s_proto;};
struct server_sasl_mechanism {int version;int condition;char *plugname;const sasl_server_plug_t *plug;char *f;};
typedef struct server_sasl_mechanism server_sasl_mechanism_t;
typedef union $4932DC24BA09BB104202CABB17FCEE34 servers_ip_addr_t;
struct session;
typedef void (__cdecl *setDocumentLocatorSAXFunc)(void *ctx, xmlSAXLocatorPtr loc);
struct sf_hdtr {struct iovec *headers;int hdr_cnt;struct iovec *trailers;int trl_cnt;};
struct sgttyb {char sg_ispeed;char sg_ospeed;char sg_erase;char sg_kill;__int16 sg_flags;};
typedef unsigned __int16 shmatt_t;
struct shmid_kernel;
struct short_hand_verf {struct opaque_auth new_cred;};
typedef int sig_atomic_t;
typedef void (__cdecl *sig_t)(int);
struct sigaction {union __sigaction_u __sigaction_u;sigset_t sa_mask;int sa_flags;};
struct sigevent {int sigev_notify;int sigev_signo;union sigval sigev_value;void (__cdecl *sigev_notify_function)(union sigval);pthread_attr_t *sigev_notify_attributes;};
typedef struct __siginfo siginfo_t;
typedef int sigjmp_buf[38];
typedef __darwin_sigset_t sigset_t;
struct sigstack {char *ss_sp;int ss_onstack;};
union sigval {int sival_int;void *sival_ptr;};
struct sigvec {void (__cdecl *sv_handler)(int);int sv_mask;int sv_flags;};
struct sioc_sg_req {struct in_addr src;struct in_addr grp;u_int32_t pktcnt;u_int32_t bytecnt;u_int32_t wrong_if;};
struct sioc_vif_req {vifi_t vifi;u_int32_t icount;u_int32_t ocount;u_int32_t ibytes;u_int32_t obytes;};
typedef __darwin_size_t size_t;
typedef int (__cdecl *slapi_acl_callback_t)(Slapi_PBlock *pb, Slapi_Entry *e, const char *attr, struct berval *berval, int access, void *state);
struct slapi_attr;
struct slapi_componentid;
typedef int (__cdecl *slapi_compute_callback_t)(computed_attr_context *c, char *type, Slapi_Entry *e, slapi_compute_output_t outputfn);
typedef int (__cdecl *slapi_compute_output_t)(computed_attr_context *c, Slapi_Attr *a, Slapi_Entry *e);
struct slapi_condvar;
struct slapi_dn;
struct slapi_entry;
typedef void *(__cdecl *slapi_extension_constructor_fnptr)(void *object, void *parent);
typedef void (__cdecl *slapi_extension_destructor_fnptr)(void *extension, void *object, void *parent);
struct slapi_filter;
struct slapi_mod;
struct slapi_mods;
struct slapi_mutex;
struct slapi_pblock;
struct slapi_plugindesc {char *spd_id;char *spd_vendor;char *spd_version;char *spd_description;};
struct slapi_rdn;
typedef int (__cdecl *slapi_search_rewrite_callback_t)(Slapi_PBlock *pb);
struct slapi_value;
struct slapi_valueset;
typedef int sleep_type_t;
struct sm_name {char *mon_name;};
enum sm_res {stat_succ = 0x0,stat_fail = 0x1,};
struct sm_stat {int state;};
struct sm_stat_res {sm_res res_stat;int state;};
struct sm_status {char *mon_name;int state;char priv[16];};
struct snmp_alarm {struct timeval t;unsigned int flags;unsigned int clientreg;struct timeval t_last;struct timeval t_next;void *clientarg;SNMPAlarmCallback *thecallback;struct snmp_alarm *next;};
typedef int (__cdecl *snmp_callback)(int, netsnmp_session *, int, netsnmp_pdu *, void *);
struct snmp_enum_list {struct snmp_enum_list *next;int value;char *label;};
struct snmp_gen_callback {SNMPCallback *sc_callback;void *sc_client_arg;int priority;struct snmp_gen_callback *next;};
struct snmp_log_message {int priority;const char *msg;};
struct snmp_pdu {__int64 version;int command;__int64 reqid;__int64 msgid;__int64 transid;__int64 sessid;__int64 errstat;__int64 errindex;u_long time;u_long flags;int securityModel;int securityLevel;int msgParseModel;void *transport_data;int transport_data_length;const oid *tDomain;size_t tDomainLen;netsnmp_variable_list *variables;u_char *community;size_t community_len;oid *enterprise;size_t enterprise_length;__int64 trap_type;__int64 specific_type;unsigned __int8 agent_addr[4];u_char *contextEngineID;size_t contextEngineIDLen;char *contextName;size_t contextNameLen;u_char *securityEngineID;size_t securityEngineIDLen;char *securityName;size_t securityNameLen;int priority;int range_subid;void *securityStateRef;};
struct snmp_secmod_def {SecmodSessionCallback *session_open;SecmodSessionCallback *session_close;SecmodSessionSetup *session_setup;SecmodPduCallback *pdu_free;Secmod2PduCallback *pdu_clone;SecmodPduCallback *pdu_timeout;SecmodFreeState *pdu_free_state_ref;SecmodOutMsg *encode_reverse;SecmodOutMsg *encode_forward;SecmodInMsg *decode;SecmodHandleReport *handle_report;SecmodDiscoveryMethod *probe_engineid;};
struct snmp_secmod_incoming_params {int msgProcModel;size_t maxMsgSize;u_char *secParams;int secModel;int secLevel;u_char *wholeMsg;size_t wholeMsgLen;u_char *secEngineID;size_t *secEngineIDLen;char *secName;size_t *secNameLen;u_char **scopedPdu;size_t *scopedPduLen;size_t *maxSizeResponse;void **secStateRef;netsnmp_session *sess;netsnmp_pdu *pdu;u_char msg_flags;};
struct snmp_secmod_list {int securityModel;struct snmp_secmod_def *secDef;struct snmp_secmod_list *next;};
struct snmp_secmod_outgoing_params {int msgProcModel;u_char *globalData;size_t globalDataLen;int maxMsgSize;int secModel;u_char *secEngineID;size_t secEngineIDLen;char *secName;size_t secNameLen;int secLevel;u_char *scopedPdu;size_t scopedPduLen;void *secStateRef;u_char *secParams;size_t *secParamsLen;u_char **wholeMsg;size_t *wholeMsgLen;size_t *wholeMsgOffset;netsnmp_pdu *pdu;netsnmp_session *session;};
struct snmp_session {__int64 version;int retries;__int64 timeout;u_long flags;struct snmp_session *subsession;struct snmp_session *next;char *peername;u_short remote_port;char *localname;u_short local_port;u_char *(__cdecl *authenticator)(u_char *, size_t *, u_char *, size_t);netsnmp_callback callback;void *callback_magic;int s_errno;int s_snmp_errno;__int64 sessid;u_char *community;size_t community_len;size_t rcvMsgMaxSize;size_t sndMsgMaxSize;u_char isAuthoritative;u_char *contextEngineID;size_t contextEngineIDLen;u_int engineBoots;u_int engineTime;char *contextName;size_t contextNameLen;u_char *securityEngineID;size_t securityEngineIDLen;char *securityName;size_t securityNameLen;oid *securityAuthProto;size_t securityAuthProtoLen;u_char securityAuthKey[32];size_t securityAuthKeyLen;u_char *securityAuthLocalKey;size_t securityAuthLocalKeyLen;oid *securityPrivProto;size_t securityPrivProtoLen;u_char securityPrivKey[32];size_t securityPrivKeyLen;u_char *securityPrivLocalKey;size_t securityPrivLocalKeyLen;int securityModel;int securityLevel;char *paramName;void *securityInfo;struct netsnmp_container_s *transport_configuration;void *myvoid;};
typedef u_quad_t so_gen_t;
struct so_nke {unsigned int nke_handle;unsigned int nke_where;int nke_flags;u_int32_t reserved[4];};
struct so_np_extensions {u_int32_t npx_flags;u_int32_t npx_mask;};
struct sockaddr {__uint8_t sa_len;sa_family_t sa_family;char sa_data[14];};
struct sockaddr_ctl {u_char sc_len;u_char sc_family;u_int16_t ss_sysaddr;u_int32_t sc_id;u_int32_t sc_unit;u_int32_t sc_reserved[5];};
struct sockaddr_dl {u_char sdl_len;u_char sdl_family;u_short sdl_index;u_char sdl_type;u_char sdl_nlen;u_char sdl_alen;u_char sdl_slen;char sdl_data[12];};
struct sockaddr_gen {union sockaddr_gen::$75CD6CBD540C65254472F3438B93F561 sg_addr;};
union sockaddr_gen::$75CD6CBD540C65254472F3438B93F561 {struct sockaddr _sg_sa;struct sockaddr_in _sg_sin;};
struct sockaddr_in {__uint8_t sin_len;sa_family_t sin_family;in_port_t sin_port;struct in_addr sin_addr;char sin_zero[8];};
struct sockaddr_in6 {__uint8_t sin6_len;sa_family_t sin6_family;in_port_t sin6_port;__uint32_t sin6_flowinfo;struct in6_addr sin6_addr;__uint32_t sin6_scope_id;};
struct sockaddr_inarp {u_char sin_len;u_char sin_family;u_short sin_port;struct in_addr sin_addr;struct in_addr sin_srcaddr;u_short sin_tos;u_short sin_other;};
struct sockaddr_ndrv {unsigned __int8 snd_len;unsigned __int8 snd_family;unsigned __int8 snd_name[16];};
struct sockaddr_storage {__uint8_t ss_len;sa_family_t ss_family;char __ss_pad1[6];__int64_t __ss_align;char __ss_pad2[112];};
struct sockaddr_sys {u_char ss_len;u_char ss_family;u_int16_t ss_sysaddr;u_int32_t ss_reserved[7];};
struct sockaddr_un {unsigned __int8 sun_len;sa_family_t sun_family;char sun_path[104];};
struct sockbuf;
struct sockbuf_info {uint32_t sbi_cc;uint32_t sbi_hiwat;uint32_t sbi_mbcnt;uint32_t sbi_mbmax;uint32_t sbi_lowat;__int16 sbi_flags;__int16 sbi_timeo;};
struct sockbuf_io {int (__cdecl *sbi_setup)(Sockbuf_IO_Desc *sbiod, void *arg);int (__cdecl *sbi_remove)(Sockbuf_IO_Desc *sbiod);int (__cdecl *sbi_ctrl)(Sockbuf_IO_Desc *sbiod, int opt, void *arg);ber_slen_t (__cdecl *sbi_read)(Sockbuf_IO_Desc *sbiod, void *buf, ber_len_t len);ber_slen_t (__cdecl *sbi_write)(Sockbuf_IO_Desc *sbiod, void *buf, ber_len_t len);int (__cdecl *sbi_close)(Sockbuf_IO_Desc *sbiod);};
struct sockbuf_io_desc {int sbiod_level;Sockbuf *sbiod_sb;Sockbuf_IO *sbiod_io;void *sbiod_pvt;struct sockbuf_io_desc *sbiod_next;};
struct socket_fdinfo {struct proc_fileinfo pfi;struct socket_info psi;};
struct socket_filter_entry;
struct socket_info {struct vinfo_stat soi_stat;uint64_t soi_so;uint64_t soi_pcb;int soi_type;int soi_protocol;int soi_family;__int16 soi_options;__int16 soi_linger;__int16 soi_state;__int16 soi_qlen;__int16 soi_incqlen;__int16 soi_qlimit;__int16 soi_timeo;u_short soi_error;uint32_t soi_oobmark;struct sockbuf_info soi_rcv;struct sockbuf_info soi_snd;int soi_kind;uint32_t rfu_1;union socket_info::$B957602F9D31755FD4966320C7ED8975 soi_proto;};
union socket_info::$B957602F9D31755FD4966320C7ED8975 {struct in_sockinfo pri_in;struct tcp_sockinfo pri_tcp;struct un_sockinfo pri_un;struct ndrv_info pri_ndrv;struct kern_event_info pri_kern_event;struct kern_ctl_info pri_kern_ctl;};
typedef struct __socket *socket_t;
struct sockif;
typedef __darwin_socklen_t socklen_t;
typedef struct __sockopt *sockopt_t;
struct sockproto {__uint16_t sp_family;__uint16_t sp_protocol;};
struct sockutil;
typedef unsigned __int64 speed_t;
struct speedtab {int sp_speed;int sp_code;};
typedef struct $C9793B2A88A40550F3E6FCBE57C78800 sprayarr;
struct spraycumul {u_int counter;spraytimeval clock;};
struct spraytimeval {u_int sec;u_int usec;};
struct sqlite3;
struct sqlite3_backup;
struct sqlite3_blob;
typedef int (__cdecl *sqlite3_callback)(void *, int, char **, char **);
struct sqlite3_context;
typedef void (__cdecl *sqlite3_destructor_type)(void *);
struct sqlite3_file {const struct sqlite3_io_methods *pMethods;};
struct sqlite3_index_info {int nConstraint;struct sqlite3_index_info::sqlite3_index_constraint *aConstraint;int nOrderBy;struct sqlite3_index_info::sqlite3_index_orderby *aOrderBy;struct sqlite3_index_info::sqlite3_index_constraint_usage *aConstraintUsage;int idxNum;char *idxStr;int needToFreeIdxStr;int orderByConsumed;double estimatedCost;};
struct sqlite3_index_info::sqlite3_index_constraint {int iColumn;unsigned __int8 op;unsigned __int8 usable;int iTermOffset;};
struct sqlite3_index_info::sqlite3_index_constraint_usage {int argvIndex;unsigned __int8 omit;};
struct sqlite3_index_info::sqlite3_index_orderby {int iColumn;unsigned __int8 desc;};
typedef sqlite_int64 sqlite3_int64;
struct sqlite3_io_methods {int iVersion;int (__cdecl *xClose)(sqlite3_file *);int (__cdecl *xRead)(sqlite3_file *, void *, int iAmt, sqlite3_int64 iOfst);int (__cdecl *xWrite)(sqlite3_file *, const void *, int iAmt, sqlite3_int64 iOfst);int (__cdecl *xTruncate)(sqlite3_file *, sqlite3_int64 size);int (__cdecl *xSync)(sqlite3_file *, int flags);int (__cdecl *xFileSize)(sqlite3_file *, sqlite3_int64 *pSize);int (__cdecl *xLock)(sqlite3_file *, int);int (__cdecl *xUnlock)(sqlite3_file *, int);int (__cdecl *xCheckReservedLock)(sqlite3_file *, int *pResOut);int (__cdecl *xFileControl)(sqlite3_file *, int op, void *pArg);int (__cdecl *xSectorSize)(sqlite3_file *);int (__cdecl *xDeviceCharacteristics)(sqlite3_file *);int (__cdecl *xShmMap)(sqlite3_file *, int iPg, int pgsz, int, volatile void **);int (__cdecl *xShmLock)(sqlite3_file *, int offset, int n, int flags);void (__cdecl *xShmBarrier)(sqlite3_file *);int (__cdecl *xShmUnmap)(sqlite3_file *, int deleteFlag);};
struct sqlite3_mem_methods {void *(__cdecl *xMalloc)(int);void (__cdecl *xFree)(void *);void *(__cdecl *xRealloc)(void *, int);int (__cdecl *xSize)(void *);int (__cdecl *xRoundup)(int);int (__cdecl *xInit)(void *);void (__cdecl *xShutdown)(void *);void *pAppData;};
struct sqlite3_module {int iVersion;int (__cdecl *xCreate)(sqlite3 *, void *pAux, int argc, const char *const *argv, sqlite3_vtab **ppVTab, char **);int (__cdecl *xConnect)(sqlite3 *, void *pAux, int argc, const char *const *argv, sqlite3_vtab **ppVTab, char **);int (__cdecl *xBestIndex)(sqlite3_vtab *pVTab, sqlite3_index_info *);int (__cdecl *xDisconnect)(sqlite3_vtab *pVTab);int (__cdecl *xDestroy)(sqlite3_vtab *pVTab);int (__cdecl *xOpen)(sqlite3_vtab *pVTab, sqlite3_vtab_cursor **ppCursor);int (__cdecl *xClose)(sqlite3_vtab_cursor *);int (__cdecl *xFilter)(sqlite3_vtab_cursor *, int idxNum, const char *idxStr, int argc, sqlite3_value **argv);int (__cdecl *xNext)(sqlite3_vtab_cursor *);int (__cdecl *xEof)(sqlite3_vtab_cursor *);int (__cdecl *xColumn)(sqlite3_vtab_cursor *, sqlite3_context *, int);int (__cdecl *xRowid)(sqlite3_vtab_cursor *, sqlite3_int64 *pRowid);int (__cdecl *xUpdate)(sqlite3_vtab *, int, sqlite3_value **, sqlite3_int64 *);int (__cdecl *xBegin)(sqlite3_vtab *pVTab);int (__cdecl *xSync)(sqlite3_vtab *pVTab);int (__cdecl *xCommit)(sqlite3_vtab *pVTab);int (__cdecl *xRollback)(sqlite3_vtab *pVTab);int (__cdecl *xFindFunction)(sqlite3_vtab *pVtab, int nArg, const char *zName, void (__cdecl **pxFunc)(sqlite3_context *, int, sqlite3_value **), void **ppArg);int (__cdecl *xRename)(sqlite3_vtab *pVtab, const char *zNew);};
struct sqlite3_mutex;
struct sqlite3_mutex_methods {int (*xMutexInit)(void);int (*xMutexEnd)(void);sqlite3_mutex *(__cdecl *xMutexAlloc)(int);void (__cdecl *xMutexFree)(sqlite3_mutex *);void (__cdecl *xMutexEnter)(sqlite3_mutex *);int (__cdecl *xMutexTry)(sqlite3_mutex *);void (__cdecl *xMutexLeave)(sqlite3_mutex *);int (__cdecl *xMutexHeld)(sqlite3_mutex *);int (__cdecl *xMutexNotheld)(sqlite3_mutex *);};
struct sqlite3_pcache;
struct sqlite3_pcache_methods {void *pArg;int (__cdecl *xInit)(void *);void (__cdecl *xShutdown)(void *);sqlite3_pcache *(__cdecl *xCreate)(int szPage, int bPurgeable);void (__cdecl *xCachesize)(sqlite3_pcache *, int nCachesize);int (__cdecl *xPagecount)(sqlite3_pcache *);void *(__cdecl *xFetch)(sqlite3_pcache *, unsigned int key, int createFlag);void (__cdecl *xUnpin)(sqlite3_pcache *, void *, int discard);void (__cdecl *xRekey)(sqlite3_pcache *, void *, unsigned int oldKey, unsigned int newKey);void (__cdecl *xTruncate)(sqlite3_pcache *, unsigned int iLimit);void (__cdecl *xDestroy)(sqlite3_pcache *);};
struct sqlite3_rtree_geometry {void *pContext;int nParam;double *aParam;void *pUser;void (__cdecl *xDelUser)(void *);};
struct sqlite3_stmt;
typedef sqlite_uint64 sqlite3_uint64;
typedef struct Mem sqlite3_value;
struct sqlite3_vfs {int iVersion;int szOsFile;int mxPathname;sqlite3_vfs *pNext;const char *zName;void *pAppData;int (__cdecl *xOpen)(sqlite3_vfs *, const char *zName, sqlite3_file *, int flags, int *pOutFlags);int (__cdecl *xDelete)(sqlite3_vfs *, const char *zName, int syncDir);int (__cdecl *xAccess)(sqlite3_vfs *, const char *zName, int flags, int *pResOut);int (__cdecl *xFullPathname)(sqlite3_vfs *, const char *zName, int nOut, char *zOut);void *(__cdecl *xDlOpen)(sqlite3_vfs *, const char *zFilename);void (__cdecl *xDlError)(sqlite3_vfs *, int nByte, char *zErrMsg);void (*(__cdecl *xDlSym)(sqlite3_vfs *, void *, const char *zSymbol))(void);void (__cdecl *xDlClose)(sqlite3_vfs *, void *);int (__cdecl *xRandomness)(sqlite3_vfs *, int nByte, char *zOut);int (__cdecl *xSleep)(sqlite3_vfs *, int microseconds);int (__cdecl *xCurrentTime)(sqlite3_vfs *, double *);int (__cdecl *xGetLastError)(sqlite3_vfs *, int, char *);int (__cdecl *xCurrentTimeInt64)(sqlite3_vfs *, sqlite3_int64 *);};
struct sqlite3_vtab {const sqlite3_module *pModule;int nRef;char *zErrMsg;};
struct sqlite3_vtab_cursor {sqlite3_vtab *pVtab;};
typedef __int64 sqlite_int64;
typedef unsigned __int64 sqlite_uint64;
typedef __darwin_ssize_t ssize_t;
struct ssl2_state_st {int three_byte_header;int clear_text;int escape;int ssl2_rollback;unsigned int wnum;int wpend_tot;const unsigned __int8 *wpend_buf;int wpend_off;int wpend_len;int wpend_ret;int rbuf_left;int rbuf_offs;unsigned __int8 *rbuf;unsigned __int8 *wbuf;unsigned __int8 *write_ptr;unsigned int padding;unsigned int rlength;int ract_data_length;unsigned int wlength;int wact_data_length;unsigned __int8 *ract_data;unsigned __int8 *wact_data;unsigned __int8 *mac_data;unsigned __int8 *read_key;unsigned __int8 *write_key;unsigned int challenge_length;unsigned __int8 challenge[32];unsigned int conn_id_length;unsigned __int8 conn_id[16];unsigned int key_material_length;unsigned __int8 key_material[48];unsigned __int64 read_sequence;unsigned __int64 write_sequence;struct ssl2_state_st::$84C368C7769861FE002B58071E3F7188 tmp;};
struct ssl2_state_st::$84C368C7769861FE002B58071E3F7188 {unsigned int conn_id_length;unsigned int cert_type;unsigned int cert_length;unsigned int csl;unsigned int clear;unsigned int enc;unsigned __int8 ccl[32];unsigned int cipher_spec_length;unsigned int session_id_length;unsigned int clen;unsigned int rlen;};
struct ssl3_buffer_st {unsigned __int8 *buf;size_t len;int offset;int left;};
struct ssl3_record_st {int type;unsigned int length;unsigned int off;unsigned __int8 *data;unsigned __int8 *input;unsigned __int8 *comp;unsigned __int64 epoch;unsigned __int64 seq_num;};
struct ssl3_state_st {__int64 flags;int delay_buf_pop_ret;unsigned __int8 read_sequence[8];unsigned __int8 read_mac_secret[64];unsigned __int8 write_sequence[8];unsigned __int8 write_mac_secret[64];unsigned __int8 server_random[32];unsigned __int8 client_random[32];int need_empty_fragments;int empty_fragment_done;SSL3_BUFFER rbuf;SSL3_BUFFER wbuf;SSL3_RECORD rrec;SSL3_RECORD wrec;unsigned __int8 alert_fragment[2];unsigned int alert_fragment_len;unsigned __int8 handshake_fragment[4];unsigned int handshake_fragment_len;unsigned int wnum;int wpend_tot;int wpend_type;int wpend_ret;const unsigned __int8 *wpend_buf;EVP_MD_CTX finish_dgst1;EVP_MD_CTX finish_dgst2;int change_cipher_spec;int warn_alert;int fatal_alert;int alert_dispatch;unsigned __int8 send_alert[2];int renegotiate;int total_renegotiations;int num_renegotiations;int in_read_app_data;struct ssl3_state_st::$42F7BD6B27181EF8C23D75FB26BE0959 tmp;unsigned __int8 previous_client_finished[64];unsigned __int8 previous_client_finished_len;unsigned __int8 previous_server_finished[64];unsigned __int8 previous_server_finished_len;int send_connection_binding;};
struct ssl3_state_st::$42F7BD6B27181EF8C23D75FB26BE0959 {unsigned __int8 cert_verify_md[128];unsigned __int8 finish_md[128];int finish_md_len;unsigned __int8 peer_finish_md[128];int peer_finish_md_len;unsigned __int64 message_size;int message_type;SSL_CIPHER *new_cipher;DH *dh;EC_KEY *ecdh;int next_state;int reuse_message;int cert_req;int ctype_num;char ctype[7];STACK *ca_names;int use_rsa_tmp;int key_block_length;unsigned __int8 *key_block;const EVP_CIPHER *new_sym_enc;const EVP_MD *new_hash;const SSL_COMP *new_compression;int cert_request;};
struct ssl_cipher_st {int valid;const char *name;unsigned __int64 id;unsigned __int64 algorithms;unsigned __int64 algo_strength;unsigned __int64 algorithm2;int strength_bits;int alg_bits;unsigned __int64 mask;unsigned __int64 mask_strength;};
struct ssl_comp_st {int id;const char *name;COMP_METHOD *method;};
typedef struct ssl_st *ssl_crock_st;
struct ssl_ctx_st {SSL_METHOD *method;STACK *cipher_list;STACK *cipher_list_by_id;struct x509_store_st *cert_store;struct lhash_st *sessions;unsigned __int64 session_cache_size;struct ssl_session_st *session_cache_head;struct ssl_session_st *session_cache_tail;int session_cache_mode;__int64 session_timeout;int (__cdecl *new_session_cb)(struct ssl_st *ssl, SSL_SESSION *sess);void (__cdecl *remove_session_cb)(struct ssl_ctx_st *ctx, SSL_SESSION *sess);SSL_SESSION *(__cdecl *get_session_cb)(struct ssl_st *ssl, unsigned __int8 *data, int len, int *copy);struct ssl_ctx_st::$1FDE854BB3A5E25B344A4239746AC17B stats;int references;int (__cdecl *app_verify_callback)(X509_STORE_CTX *, void *);void *app_verify_arg;pem_password_cb *default_passwd_callback;void *default_passwd_callback_userdata;int (__cdecl *client_cert_cb)(SSL *ssl, X509 **x509, EVP_PKEY **pkey);int (__cdecl *app_gen_cookie_cb)(SSL *ssl, unsigned __int8 *cookie, unsigned int *cookie_len);int (__cdecl *app_verify_cookie_cb)(SSL *ssl, unsigned __int8 *cookie, unsigned int cookie_len);CRYPTO_EX_DATA ex_data;const EVP_MD *rsa_md5;const EVP_MD *md5;const EVP_MD *sha1;STACK *extra_certs;STACK *comp_methods;void (__cdecl *info_callback)(const SSL *ssl, int type, int val);STACK *client_CA;unsigned __int64 options;unsigned __int64 mode;__int64 max_cert_list;struct cert_st *cert;int read_ahead;void (__cdecl *msg_callback)(int write_p, int version, int content_type, const void *buf, size_t len, SSL *ssl, void *arg);void *msg_callback_arg;int verify_mode;unsigned int sid_ctx_length;unsigned __int8 sid_ctx[32];int (__cdecl *default_verify_callback)(int ok, X509_STORE_CTX *ctx);GEN_SESSION_CB generate_session_id;X509_VERIFY_PARAM *param;int quiet_shutdown;ENGINE *client_cert_engine;int (__cdecl *tlsext_servername_callback)(SSL *, int *, void *);void *tlsext_servername_arg;unsigned __int8 tlsext_tick_key_name[16];unsigned __int8 tlsext_tick_hmac_key[16];unsigned __int8 tlsext_tick_aes_key[16];int (__cdecl *tlsext_ticket_key_cb)(SSL *ssl, unsigned __int8 *name, unsigned __int8 *iv, EVP_CIPHER_CTX *ectx, HMAC_CTX *hctx, int enc);int (__cdecl *tlsext_status_cb)(SSL *ssl, void *arg);void *tlsext_status_arg;};
struct ssl_ctx_st::$1FDE854BB3A5E25B344A4239746AC17B {int sess_connect;int sess_connect_renegotiate;int sess_connect_good;int sess_accept;int sess_accept_renegotiate;int sess_accept_good;int sess_miss;int sess_timeout;int sess_cache_full;int sess_hit;int sess_cb_hit;};
struct ssl_method_st {int version;int (__cdecl *ssl_new)(SSL *s);void (__cdecl *ssl_clear)(SSL *s);void (__cdecl *ssl_free)(SSL *s);int (__cdecl *ssl_accept)(SSL *s);int (__cdecl *ssl_connect)(SSL *s);int (__cdecl *ssl_read)(SSL *s, void *buf, int len);int (__cdecl *ssl_peek)(SSL *s, void *buf, int len);int (__cdecl *ssl_write)(SSL *s, const void *buf, int len);int (__cdecl *ssl_shutdown)(SSL *s);int (__cdecl *ssl_renegotiate)(SSL *s);int (__cdecl *ssl_renegotiate_check)(SSL *s);__int64 (__cdecl *ssl_get_message)(SSL *s, int st1, int stn, int mt, __int64 max, int *ok);int (__cdecl *ssl_read_bytes)(SSL *s, int type, unsigned __int8 *buf, int len, int peek);int (__cdecl *ssl_write_bytes)(SSL *s, int type, const void *buf_, int len);int (__cdecl *ssl_dispatch_alert)(SSL *s);__int64 (__cdecl *ssl_ctrl)(SSL *s, int cmd, __int64 larg, void *parg);__int64 (__cdecl *ssl_ctx_ctrl)(SSL_CTX *ctx, int cmd, __int64 larg, void *parg);SSL_CIPHER *(__cdecl *get_cipher_by_char)(const unsigned __int8 *ptr);int (__cdecl *put_cipher_by_char)(const SSL_CIPHER *cipher, unsigned __int8 *ptr);int (__cdecl *ssl_pending)(const SSL *s);int (*num_ciphers)(void);SSL_CIPHER *(__cdecl *get_cipher)(unsigned int ncipher);struct ssl_method_st *(__cdecl *get_ssl_method)(int version);__int64 (*get_timeout)(void);struct ssl3_enc_method *ssl3_enc;int (*ssl_version)(void);__int64 (__cdecl *ssl_callback_ctrl)(SSL *s, int cb_id, void (*fp)(void));__int64 (__cdecl *ssl_ctx_callback_ctrl)(SSL_CTX *s, int cb_id, void (*fp)(void));};
struct ssl_session_st {int ssl_version;unsigned int key_arg_length;unsigned __int8 key_arg[8];int master_key_length;unsigned __int8 master_key[48];unsigned int session_id_length;unsigned __int8 session_id[32];unsigned int sid_ctx_length;unsigned __int8 sid_ctx[32];int not_resumable;struct sess_cert_st *sess_cert;X509 *peer;__int64 verify_result;int references;__int64 timeout;__int64 time;int compress_meth;SSL_CIPHER *cipher;unsigned __int64 cipher_id;STACK *ciphers;CRYPTO_EX_DATA ex_data;struct ssl_session_st *prev;struct ssl_session_st *next;char *tlsext_hostname;unsigned __int8 *tlsext_tick;size_t tlsext_ticklen;__int64 tlsext_tick_lifetime_hint;};
struct ssl_st {int version;int type;SSL_METHOD *method;BIO *rbio;BIO *wbio;BIO *bbio;int rwstate;int in_handshake;int (__cdecl *handshake_func)(SSL *);int server;int new_session;int quiet_shutdown;int shutdown;int state;int rstate;BUF_MEM *init_buf;void *init_msg;int init_num;int init_off;unsigned __int8 *packet;unsigned int packet_length;struct ssl2_state_st *s2;struct ssl3_state_st *s3;struct dtls1_state_st *d1;int read_ahead;void (__cdecl *msg_callback)(int write_p, int version, int content_type, const void *buf, size_t len, SSL *ssl, void *arg);void *msg_callback_arg;int hit;X509_VERIFY_PARAM *param;STACK *cipher_list;STACK *cipher_list_by_id;EVP_CIPHER_CTX *enc_read_ctx;const EVP_MD *read_hash;COMP_CTX *expand;EVP_CIPHER_CTX *enc_write_ctx;const EVP_MD *write_hash;COMP_CTX *compress;struct cert_st *cert;unsigned int sid_ctx_length;unsigned __int8 sid_ctx[32];SSL_SESSION *session;GEN_SESSION_CB generate_session_id;int verify_mode;int (__cdecl *verify_callback)(int ok, X509_STORE_CTX *ctx);void (__cdecl *info_callback)(const SSL *ssl, int type, int val);int error;int error_code;SSL_CTX *ctx;int debug;__int64 verify_result;CRYPTO_EX_DATA ex_data;STACK *client_CA;int references;unsigned __int64 options;unsigned __int64 mode;__int64 max_cert_list;int first_packet;int client_version;void (__cdecl *tlsext_debug_cb)(SSL *s, int client_server, int type, unsigned __int8 *data, int len, void *arg);void *tlsext_debug_arg;char *tlsext_hostname;int servername_done;int tlsext_status_type;int tlsext_status_expected;STACK *tlsext_ocsp_ids;X509_EXTENSIONS *tlsext_ocsp_exts;unsigned __int8 *tlsext_ocsp_resp;int tlsext_ocsp_resplen;int tlsext_ticket_expected;SSL_CTX *initial_ctx;};
struct st_CRYPTO_EX_DATA_IMPL;
struct st_ERR_FNS;
struct st_dynamic_LOCK_fns {dyn_lock_locking_cb lock_locking_cb;dyn_lock_add_lock_cb lock_add_lock_cb;dyn_dynlock_create_cb dynlock_create_cb;dyn_dynlock_lock_cb dynlock_lock_cb;dyn_dynlock_destroy_cb dynlock_destroy_cb;};
struct st_dynamic_MEM_fns {dyn_MEM_malloc_cb malloc_cb;dyn_MEM_realloc_cb realloc_cb;dyn_MEM_free_cb free_cb;};
struct st_dynamic_fns {void *static_state;const ERR_FNS *err_fns;const CRYPTO_EX_DATA_IMPL *ex_data_fns;dynamic_MEM_fns mem_fns;dynamic_LOCK_fns lock_fns;};
struct stack_st {int num;char **data;int sorted;int num_alloc;int (__cdecl *comp)(const char *const *, const char *const *);};
typedef struct __darwin_sigaltstack stack_t;
typedef void (__cdecl *startDocumentSAXFunc)(void *ctx);
typedef void (__cdecl *startElementNsSAX2Func)(void *ctx, const xmlChar *localname, const xmlChar *prefix, const xmlChar *URI, int nb_namespaces, const xmlChar **namespaces, int nb_attributes, int nb_defaulted, const xmlChar **attributes);
typedef void (__cdecl *startElementSAXFunc)(void *ctx, const xmlChar *name, const xmlChar **atts);
struct stat {dev_t st_dev;mode_t st_mode;nlink_t st_nlink;__darwin_ino64_t st_ino;uid_t st_uid;gid_t st_gid;dev_t st_rdev;struct timespec st_atimespec;struct timespec st_mtimespec;struct timespec st_ctimespec;struct timespec st_birthtimespec;off_t st_size;blkcnt_t st_blocks;blksize_t st_blksize;__uint32_t st_flags;__uint32_t st_gen;__int32_t st_lspare;__int64_t st_qspare[2];};
struct stat64 {dev_t st_dev;mode_t st_mode;nlink_t st_nlink;__darwin_ino64_t st_ino;uid_t st_uid;gid_t st_gid;dev_t st_rdev;struct timespec st_atimespec;struct timespec st_mtimespec;struct timespec st_ctimespec;struct timespec st_birthtimespec;off_t st_size;blkcnt_t st_blocks;blksize_t st_blksize;__uint32_t st_flags;__uint32_t st_gen;__int32_t st_lspare;__int64_t st_qspare[2];};
struct stat_chge {char *mon_name;int state;};
typedef stat_t *stat_ptr_t;
typedef struct $615D5DC9703294F0ED919D7F4D86FFE9 stat_t;
struct statfs {uint32_t f_bsize;int32_t f_iosize;uint64_t f_blocks;uint64_t f_bfree;uint64_t f_bavail;uint64_t f_files;uint64_t f_ffree;fsid_t f_fsid;uid_t f_owner;uint32_t f_type;uint32_t f_flags;uint32_t f_fssubtype;char f_fstypename[16];char f_mntonname[1024];char f_mntfromname[1024];uint32_t f_reserved[8];};
struct statfs64 {uint32_t f_bsize;int32_t f_iosize;uint64_t f_blocks;uint64_t f_bfree;uint64_t f_bavail;uint64_t f_files;uint64_t f_ffree;fsid_t f_fsid;uid_t f_owner;uint32_t f_type;uint32_t f_flags;uint32_t f_fssubtype;char f_fstypename[16];char f_mntonname[1024];char f_mntfromname[1024];uint32_t f_reserved[8];};
struct stats {int cp_time[4];int dk_xfer[4];u_int v_pgpgin;u_int v_pgpgout;u_int v_pswpin;u_int v_pswpout;u_int v_intr;int if_ipackets;int if_ierrors;int if_oerrors;int if_collisions;int if_opackets;};
struct statsswtch {int cp_time[4];int dk_xfer[4];u_int v_pgpgin;u_int v_pgpgout;u_int v_pswpin;u_int v_pswpout;u_int v_intr;int if_ipackets;int if_ierrors;int if_oerrors;int if_collisions;u_int v_swtch;u_int avenrun[3];rstat_timeval boottime;int if_opackets;};
struct statstime {int cp_time[4];int dk_xfer[4];u_int v_pgpgin;u_int v_pgpgout;u_int v_pswpin;u_int v_pswpout;u_int v_intr;int if_ipackets;int if_ierrors;int if_oerrors;int if_collisions;u_int v_swtch;int avenrun[3];rstat_timeval boottime;rstat_timeval curtime;int if_opackets;};
struct statvfs {unsigned __int64 f_bsize;unsigned __int64 f_frsize;fsblkcnt_t f_blocks;fsblkcnt_t f_bfree;fsblkcnt_t f_bavail;fsfilcnt_t f_files;fsfilcnt_t f_ffree;fsfilcnt_t f_favail;unsigned __int64 f_fsid;unsigned __int64 f_flag;unsigned __int64 f_namemax;};
struct store_method_st;
struct store_st;
struct sub_client_command {uint32_t cmd;uint32_t cmdsize;union lc_str client;};
struct sub_framework_command {uint32_t cmd;uint32_t cmdsize;union lc_str umbrella;};
struct sub_library_command {uint32_t cmd;uint32_t cmdsize;union lc_str sub_library;};
struct sub_umbrella_command {uint32_t cmd;uint32_t cmdsize;union lc_str sub_umbrella;};
typedef struct subtree_context_cache_s subtree_context_cache;
struct subtree_context_cache_s {const char *context_name;struct netsnmp_subtree_s *first_subtree;struct subtree_context_cache_s *next;};
typedef __darwin_suseconds_t suseconds_t;
struct svc_req {unsigned int rq_prog;unsigned int rq_vers;unsigned int rq_proc;struct opaque_auth rq_cred;caddr_t rq_clntcred;SVCXPRT *rq_xprt;};
typedef int32_t swblk_t;
struct symseg_command {uint32_t cmd;uint32_t cmdsize;uint32_t offset;uint32_t size;};
struct symtab_command {uint32_t cmd;uint32_t cmdsize;uint32_t symoff;uint32_t nsyms;uint32_t stroff;uint32_t strsize;};
typedef char symtab_name_t[32];
typedef int sync_policy_t;
struct synch_state {int waiting;int status;int reqid;netsnmp_pdu *pdu;};
struct sysORTable {char *OR_descr;oid *OR_oid;size_t OR_oidlen;netsnmp_session *OR_sess;u_long OR_uptime;};
typedef u_int64_t syscall_arg_t;
struct tagDATE_STRUCT {SQLSMALLINT year;SQLUSMALLINT month;SQLUSMALLINT day;};
struct tagITEM {TEXT name;TEXT description;struct tagMENU *imenu;void *userptr;Item_Options opt;__int16 index;__int16 y;__int16 x;bool value;struct tagITEM *left;struct tagITEM *right;struct tagITEM *up;struct tagITEM *down;};
struct tagMENU {__int16 height;__int16 width;__int16 rows;__int16 cols;__int16 frows;__int16 fcols;__int16 arows;__int16 namelen;__int16 desclen;__int16 marklen;__int16 itemlen;__int16 spc_desc;__int16 spc_cols;__int16 spc_rows;char *pattern;__int16 pindex;WINDOW *win;WINDOW *sub;WINDOW *userwin;WINDOW *usersub;ITEM **items;__int16 nitems;ITEM *curitem;__int16 toprow;chtype fore;chtype back;chtype grey;unsigned __int8 pad;Menu_Hook menuinit;Menu_Hook menuterm;Menu_Hook iteminit;Menu_Hook itemterm;void *userptr;char *mark;Menu_Options opt;unsigned __int16 status;};
struct tagSQLGUID {unsigned int Data1;unsigned __int16 Data2;unsigned __int16 Data3;unsigned __int8 Data4[8];};
struct tagSQL_DAY_SECOND {SQLUINTEGER day;SQLUINTEGER hour;SQLUINTEGER minute;SQLUINTEGER second;SQLUINTEGER fraction;};
struct tagSQL_INTERVAL_STRUCT {SQLINTERVAL interval_type;SQLSMALLINT interval_sign;union tagSQL_INTERVAL_STRUCT::$E0CBF60BBC76AAAF9CF29F3CBADF463C intval;};
union tagSQL_INTERVAL_STRUCT::$E0CBF60BBC76AAAF9CF29F3CBADF463C {SQL_YEAR_MONTH_STRUCT year_month;SQL_DAY_SECOND_STRUCT day_second;};
struct tagSQL_NUMERIC_STRUCT {SQLCHAR precision;SQLSCHAR scale;SQLCHAR sign;SQLCHAR val[16];};
struct tagSQL_YEAR_MONTH {SQLUINTEGER year;SQLUINTEGER month;};
struct tagTIMESTAMP_STRUCT {SQLSMALLINT year;SQLUSMALLINT month;SQLUSMALLINT day;SQLUSMALLINT hour;SQLUSMALLINT minute;SQLUSMALLINT second;SQLUINTEGER fraction;};
struct tagTIME_STRUCT {SQLUSMALLINT hour;SQLUSMALLINT minute;SQLUSMALLINT second;};
struct task;
struct task_absolutetime_info {uint64_t total_user;uint64_t total_system;uint64_t threads_user;uint64_t threads_system;};
typedef struct task_absolutetime_info task_absolutetime_info_data_t;
typedef struct task_absolutetime_info *task_absolutetime_info_t;
struct task_affinity_tag_info {integer_t set_count;integer_t min;integer_t max;integer_t task_count;};
typedef struct task_affinity_tag_info task_affinity_tag_info_data_t;
typedef struct task_affinity_tag_info *task_affinity_tag_info_t;
typedef task_t *task_array_t;
struct task_basic_info {integer_t suspend_count;vm_size_t virtual_size;vm_size_t resident_size;time_value_t user_time;time_value_t system_time;policy_t policy;};
struct task_basic_info_32 {integer_t suspend_count;natural_t virtual_size;natural_t resident_size;time_value_t user_time;time_value_t system_time;policy_t policy;};
typedef struct task_basic_info_32 task_basic_info_32_data_t;
typedef struct task_basic_info_32 *task_basic_info_32_t;
struct task_basic_info_64 {integer_t suspend_count;mach_vm_size_t virtual_size;mach_vm_size_t resident_size;time_value_t user_time;time_value_t system_time;policy_t policy;};
typedef struct task_basic_info_64 task_basic_info_64_data_t;
typedef struct task_basic_info_64 *task_basic_info_64_t;
typedef struct task_basic_info task_basic_info_data_t;
typedef struct task_basic_info *task_basic_info_t;
struct task_category_policy {task_role_t role;};
typedef struct task_category_policy task_category_policy_data_t;
typedef struct task_category_policy *task_category_policy_t;
struct task_dyld_info {mach_vm_address_t all_image_info_addr;mach_vm_size_t all_image_info_size;integer_t all_image_info_format;};
typedef struct task_dyld_info task_dyld_info_data_t;
typedef struct task_dyld_info *task_dyld_info_t;
struct task_events_info {integer_t faults;integer_t pageins;integer_t cow_faults;integer_t messages_sent;integer_t messages_received;integer_t syscalls_mach;integer_t syscalls_unix;integer_t csw;};
typedef struct task_events_info task_events_info_data_t;
typedef struct task_events_info *task_events_info_t;
struct task_extmod_info {unsigned __int8 task_uuid[16];vm_extmod_statistics_data_t extmod_statistics;};
typedef struct task_extmod_info task_extmod_info_data_t;
typedef struct task_extmod_info *task_extmod_info_t;
typedef natural_t task_flavor_t;
struct task_gate {unsigned __int16 : 16;struct {unsigned __int16 rpl : 2;unsigned __int16 ti : 1;unsigned __int16 index : 13;} tss;unsigned __int32 : 8;unsigned __int32 type : 5;unsigned __int32 dpl : 2;unsigned __int32 present : 1;unsigned __int32 : 0;};
typedef struct task_gate task_gate_t;
typedef integer_t task_info_data_t[1024];
typedef integer_t *task_info_t;
struct task_kernelmemory_info {uint64_t total_palloc;uint64_t total_pfree;uint64_t total_salloc;uint64_t total_sfree;};
typedef struct task_kernelmemory_info task_kernelmemory_info_data_t;
typedef struct task_kernelmemory_info *task_kernelmemory_info_t;
typedef mach_port_t task_name_t;
typedef natural_t task_policy_flavor_t;
typedef integer_t *task_policy_t;
typedef task_array_t task_port_array_t;
typedef task_t task_port_t;
enum task_role {TASK_RENICED = 0xFFFFFFFF,TASK_UNSPECIFIED = 0x0,TASK_FOREGROUND_APPLICATION = 0x1,TASK_BACKGROUND_APPLICATION = 0x2,TASK_CONTROL_APPLICATION = 0x3,TASK_GRAPHICS_SERVER = 0x4,TASK_THROTTLE_APPLICATION = 0x5,TASK_NONUI_APPLICATION = 0x6,TASK_DEFAULT_APPLICATION = 0x7,};
typedef enum task_role task_role_t;
typedef int task_special_port_t;
typedef mach_port_t task_t;
struct task_thread_times_info {time_value_t user_time;time_value_t system_time;};
typedef struct task_thread_times_info task_thread_times_info_data_t;
typedef struct task_thread_times_info *task_thread_times_info_t;
typedef task_zone_info_t *task_zone_info_array_t;
struct task_zone_info_data {uint64_t tzi_count;uint64_t tzi_cur_size;uint64_t tzi_max_size;uint64_t tzi_elem_size;uint64_t tzi_alloc_size;uint64_t tzi_sum_size;uint64_t tzi_exhaustible;uint64_t tzi_collectable;uint64_t tzi_caller_acct;uint64_t tzi_task_alloc;uint64_t tzi_task_free;};
typedef struct task_zone_info_data task_zone_info_t;
typedef unsigned __int64 tcflag_t;
typedef uint tchar;
struct tchars {char t_intrc;char t_quitc;char t_startc;char t_stopc;char t_eofc;char t_brkc;};
typedef __uint32_t tcp_cc;
typedef __uint32_t tcp_seq;
struct tcp_sockinfo {struct in_sockinfo tcpsi_ini;int tcpsi_state;int tcpsi_timer[4];int tcpsi_mss;uint32_t tcpsi_flags;uint32_t rfu_1;uint64_t tcpsi_tp;};
struct tcpcb {struct tsegqe_head t_segq;int t_dupacks;u_int32_t unused;int t_timer[4];u_int32_t t_inpcb;int t_state;u_int t_flags;int t_force;tcp_seq snd_una;tcp_seq snd_max;tcp_seq snd_nxt;tcp_seq snd_up;tcp_seq snd_wl1;tcp_seq snd_wl2;tcp_seq iss;tcp_seq irs;tcp_seq rcv_nxt;tcp_seq rcv_adv;u_int32_t rcv_wnd;tcp_seq rcv_up;u_int32_t snd_wnd;u_int32_t snd_cwnd;u_int32_t snd_ssthresh;u_int t_maxopd;u_int32_t t_rcvtime;u_int32_t t_starttime;int t_rtttime;tcp_seq t_rtseq;int t_rxtcur;u_int t_maxseg;int t_srtt;int t_rttvar;int t_rxtshift;u_int t_rttmin;u_int32_t t_rttupdated;u_int32_t max_sndwnd;int t_softerror;char t_oobflags;char t_iobc;u_char snd_scale;u_char rcv_scale;u_char request_r_scale;u_char requested_s_scale;u_int32_t ts_recent;u_int32_t ts_recent_age;tcp_seq last_ack_sent;tcp_cc cc_send;tcp_cc cc_recv;tcp_seq snd_recover;u_int32_t snd_cwnd_prev;u_int32_t snd_ssthresh_prev;u_int32_t t_badrxtwin;};
struct tcpd_context {char *file;int line;};
struct tcphdr {unsigned __int16 th_sport;unsigned __int16 th_dport;tcp_seq th_seq;tcp_seq th_ack;unsigned __int32 th_x2 : 4;unsigned __int32 th_off : 4;unsigned __int8 th_flags;unsigned __int16 th_win;unsigned __int16 th_sum;unsigned __int16 th_urp;};
struct tcpiphdr {struct ipovly ti_i;struct tcphdr ti_t;};
struct tcpstat {u_int32_t tcps_connattempt;u_int32_t tcps_accepts;u_int32_t tcps_connects;u_int32_t tcps_drops;u_int32_t tcps_conndrops;u_int32_t tcps_closed;u_int32_t tcps_segstimed;u_int32_t tcps_rttupdated;u_int32_t tcps_delack;u_int32_t tcps_timeoutdrop;u_int32_t tcps_rexmttimeo;u_int32_t tcps_persisttimeo;u_int32_t tcps_keeptimeo;u_int32_t tcps_keepprobe;u_int32_t tcps_keepdrops;u_int32_t tcps_sndtotal;u_int32_t tcps_sndpack;u_int32_t tcps_sndbyte;u_int32_t tcps_sndrexmitpack;u_int32_t tcps_sndrexmitbyte;u_int32_t tcps_sndacks;u_int32_t tcps_sndprobe;u_int32_t tcps_sndurg;u_int32_t tcps_sndwinup;u_int32_t tcps_sndctrl;u_int32_t tcps_rcvtotal;u_int32_t tcps_rcvpack;u_int32_t tcps_rcvbyte;u_int32_t tcps_rcvbadsum;u_int32_t tcps_rcvbadoff;u_int32_t tcps_rcvmemdrop;u_int32_t tcps_rcvshort;u_int32_t tcps_rcvduppack;u_int32_t tcps_rcvdupbyte;u_int32_t tcps_rcvpartduppack;u_int32_t tcps_rcvpartdupbyte;u_int32_t tcps_rcvoopack;u_int32_t tcps_rcvoobyte;u_int32_t tcps_rcvpackafterwin;u_int32_t tcps_rcvbyteafterwin;u_int32_t tcps_rcvafterclose;u_int32_t tcps_rcvwinprobe;u_int32_t tcps_rcvdupack;u_int32_t tcps_rcvacktoomuch;u_int32_t tcps_rcvackpack;u_int32_t tcps_rcvackbyte;u_int32_t tcps_rcvwinupd;u_int32_t tcps_pawsdrop;u_int32_t tcps_predack;u_int32_t tcps_preddat;u_int32_t tcps_pcbcachemiss;u_int32_t tcps_cachedrtt;u_int32_t tcps_cachedrttvar;u_int32_t tcps_cachedssthresh;u_int32_t tcps_usedrtt;u_int32_t tcps_usedrttvar;u_int32_t tcps_usedssthresh;u_int32_t tcps_persistdrop;u_int32_t tcps_badsyn;u_int32_t tcps_mturesent;u_int32_t tcps_listendrop;u_int32_t tcps_minmssdrops;u_int32_t tcps_sndrexmitbad;u_int32_t tcps_badrst;u_int32_t tcps_sc_added;u_int32_t tcps_sc_retransmitted;u_int32_t tcps_sc_dupsyn;u_int32_t tcps_sc_dropped;u_int32_t tcps_sc_completed;u_int32_t tcps_sc_bucketoverflow;u_int32_t tcps_sc_cacheoverflow;u_int32_t tcps_sc_reset;u_int32_t tcps_sc_stale;u_int32_t tcps_sc_aborted;u_int32_t tcps_sc_badack;u_int32_t tcps_sc_unreach;u_int32_t tcps_sc_zonefail;u_int32_t tcps_sc_sendcookie;u_int32_t tcps_sc_recvcookie;u_int32_t tcps_hc_added;u_int32_t tcps_hc_bucketoverflow;u_int32_t tcps_sack_recovery_episode;u_int32_t tcps_sack_rexmits;u_int32_t tcps_sack_rexmit_bytes;u_int32_t tcps_sack_rcv_blocks;u_int32_t tcps_sack_send_blocks;u_int32_t tcps_sack_sboverflow;u_int32_t tcps_bg_rcvtotal;u_int32_t tcps_rxtfindrop;};
struct term {TERMTYPE type;__int16 Filedes;struct termios Ottyb;struct termios Nttyb;int _baudrate;char *_termname;};
struct termios {tcflag_t c_iflag;tcflag_t c_oflag;tcflag_t c_cflag;tcflag_t c_lflag;cc_t c_cc[20];speed_t c_ispeed;speed_t c_ospeed;};
struct termtype {char *term_names;char *str_table;char *Booleans;__int16 *Numbers;char **Strings;char *ext_str_table;char **ext_Names;unsigned __int16 num_Booleans;unsigned __int16 num_Numbers;unsigned __int16 num_Strings;unsigned __int16 ext_Booleans;unsigned __int16 ext_Numbers;unsigned __int16 ext_Strings;};
typedef u_int32_t text_encoding_t;
struct tftphdr {__int16 th_opcode;union tftphdr::$AC1EF054FE947B275A5712C606118B7A th_u;char th_data[1];};
union tftphdr::$AC1EF054FE947B275A5712C606118B7A {unsigned __int16 tu_block;__int16 tu_code;char tu_stuff[1];};
struct thread;
typedef thread_act_t *thread_act_array_t;
typedef thread_act_array_t thread_act_port_array_t;
typedef thread_act_t thread_act_port_t;
typedef mach_port_t thread_act_t;
struct thread_affinity_policy {integer_t affinity_tag;};
typedef struct thread_affinity_policy thread_affinity_policy_data_t;
typedef struct thread_affinity_policy *thread_affinity_policy_t;
typedef thread_t *thread_array_t;
struct thread_background_policy {integer_t priority;};
typedef struct thread_background_policy thread_background_policy_data_t;
typedef struct thread_background_policy *thread_background_policy_t;
struct thread_basic_info {time_value_t user_time;time_value_t system_time;integer_t cpu_usage;policy_t policy;integer_t run_state;integer_t flags;integer_t suspend_count;integer_t sleep_time;};
typedef struct thread_basic_info thread_basic_info_data_t;
typedef struct thread_basic_info *thread_basic_info_t;
struct thread_command {uint32_t cmd;uint32_t cmdsize;};
struct thread_extended_policy {boolean_t timeshare;};
typedef struct thread_extended_policy thread_extended_policy_data_t;
typedef struct thread_extended_policy *thread_extended_policy_t;
typedef natural_t thread_flavor_t;
struct thread_identifier_info {uint64_t thread_id;uint64_t thread_handle;uint64_t dispatch_qaddr;};
typedef struct thread_identifier_info thread_identifier_info_data_t;
typedef struct thread_identifier_info *thread_identifier_info_t;
typedef integer_t thread_info_data_t[1024];
typedef integer_t *thread_info_t;
typedef natural_t thread_policy_flavor_t;
typedef integer_t *thread_policy_t;
typedef thread_array_t thread_port_array_t;
typedef thread_t thread_port_t;
struct thread_precedence_policy {integer_t importance;};
typedef struct thread_precedence_policy thread_precedence_policy_data_t;
typedef struct thread_precedence_policy *thread_precedence_policy_t;
struct thread_standard_policy {natural_t no_data;};
typedef struct thread_standard_policy thread_standard_policy_data_t;
typedef struct thread_standard_policy *thread_standard_policy_t;
typedef natural_t thread_state_data_t[144];
typedef thread_state_flavor_t *thread_state_flavor_array_t;
typedef int thread_state_flavor_t;
typedef natural_t *thread_state_t;
typedef mach_port_t thread_t;
struct thread_time_constraint_policy {uint32_t period;uint32_t computation;uint32_t constraint;boolean_t preemptible;};
typedef struct thread_time_constraint_policy thread_time_constraint_policy_data_t;
typedef struct thread_time_constraint_policy *thread_time_constraint_policy_t;
typedef __darwin_time_t time_t;
struct time_value {integer_t seconds;integer_t microseconds;};
typedef struct time_value time_value_t;
struct timeb {time_t time;unsigned __int16 millitm;__int16 timezone;__int16 dstflag;};
struct timespec {__darwin_time_t tv_sec;__int64 tv_nsec;};
struct timeval {__darwin_time_t tv_sec;__darwin_suseconds_t tv_usec;};
struct timeval32 {__int32_t tv_sec;__int32_t tv_usec;};
struct timezone {int tz_minuteswest;int tz_dsttime;};
struct tinfo_fkeys {unsigned int offset;chtype code;};
struct tlv_descriptor {void *(__cdecl *thunk)(struct tlv_descriptor *);unsigned __int64 key;unsigned __int64 offset;};
struct tm {int tm_sec;int tm_min;int tm_hour;int tm_mday;int tm_mon;int tm_year;int tm_wday;int tm_yday;int tm_isdst;__int64 tm_gmtoff;char *tm_zone;};
typedef char tmbchar;
typedef tmbchar *tmbstr;
struct tms {clock_t tms_utime;clock_t tms_stime;clock_t tms_cutime;clock_t tms_cstime;};
struct token {char *tk_name;int tk_valnumber;char *tk_valstring;};
typedef struct au_token token_t;
struct tokenizer;
struct tokenizerW;
struct tokenstr {u_char id;u_char *data;size_t len;union tokenstr::$8AC0922476273DFEC243552765DE6A61 tt;};
union tokenstr::$8AC0922476273DFEC243552765DE6A61 {au_arg32_t arg32;au_arg64_t arg64;au_arb_t arb;au_attr32_t attr32;au_attr64_t attr64;au_execarg_t execarg;au_execenv_t execenv;au_exit_t exit;au_file_t file;au_groups_t grps;au_header32_t hdr32;au_header32_ex_t hdr32_ex;au_header64_t hdr64;au_header64_ex_t hdr64_ex;au_inaddr_t inaddr;au_inaddr_ex_t inaddr_ex;au_ip_t ip;au_ipc_t ipc;au_ipcperm_t ipcperm;au_iport_t iport;au_opaque_t opaque;au_path_t path;au_proc32_t proc32;au_proc32ex_t proc32_ex;au_proc64_t proc64;au_proc64ex_t proc64_ex;au_ret32_t ret32;au_ret64_t ret64;au_seq_t seq;au_socket_t socket;au_socket_ex32_t socket_ex32;au_socketinet_ex32_t sockinet_ex32;au_socketunix_t sockunix;au_subject32_t subj32;au_subject32ex_t subj32_ex;au_subject64_t subj64;au_subject64ex_t subj64_ex;au_text_t text;au_kevent_t kevent;au_invalid_t invalid;au_trailer_t trail;au_zonename_t zonename;};
typedef struct tokenstr tokenstr_t;
struct tostruct {uint32_t selfpc;int32_t count;uint16_t link;uint16_t order;};
struct tostruct_64 {uint64_t selfpc;int32_t count;uint16_t link;uint16_t order;};
typedef struct tostruct_64 tostruct_t;
typedef struct session *tpr_t;
struct trap_gate {unsigned __int16 offset00;sel_t seg;unsigned __int32 : 8;unsigned __int32 type : 5;unsigned __int32 dpl : 2;unsigned __int32 present : 1;unsigned __int32 offset16 : 16;};
typedef struct trap_gate trap_gate_t;
struct tree {struct tree *child_list;struct tree *next_peer;struct tree *next;struct tree *parent;char *label;u_long subid;int modid;int number_modules;int *module_list;int tc_index;int type;int access;int status;struct enum_list *enums;struct range_list *ranges;struct index_list *indexes;char *augments;struct varbind_list *varbinds;char *hint;char *units;int (__cdecl *printomat)(u_char **, size_t *, size_t *, int, const netsnmp_variable_list *, const struct enum_list *, const char *, const char *);void (__cdecl *printer)(char *, const netsnmp_variable_list *, const struct enum_list *, const char *, const char *);char *description;char *reference;int reported;char *defaultValue;};
struct tseg_qent;
struct tsegqe_head {u_int32_t lh_first;};
struct tsp {unsigned __int8 tsp_type;unsigned __int8 tsp_vers;unsigned __int16 tsp_seq;union tsp::$C5C79F2990C63D5A56D70B5237B3DD42 tsp_u;char tsp_name[256];};
union tsp::$C5C79F2990C63D5A56D70B5237B3DD42 {struct timeval32 tspu_time;char tspu_hopcnt;};
struct tss {sel_t oldtss;unsigned __int32 : 0;unsigned int esp0;struct {unsigned __int16 rpl : 2;unsigned __int16 ti : 1;unsigned __int16 index : 13;} ss0;unsigned __int32 : 0;unsigned int esp1;struct {unsigned __int16 rpl : 2;unsigned __int16 ti : 1;unsigned __int16 index : 13;} ss1;unsigned __int32 : 0;unsigned int esp2;struct {unsigned __int16 rpl : 2;unsigned __int16 ti : 1;unsigned __int16 index : 13;} ss2;unsigned __int32 : 0;unsigned int cr3;unsigned int eip;unsigned int eflags;unsigned int eax;unsigned int ecx;unsigned int edx;unsigned int ebx;unsigned int esp;unsigned int ebp;unsigned int esi;unsigned int edi;struct {unsigned __int16 rpl : 2;unsigned __int16 ti : 1;unsigned __int16 index : 13;} es;unsigned __int32 : 0;struct {unsigned __int16 rpl : 2;unsigned __int16 ti : 1;unsigned __int16 index : 13;} cs;unsigned __int32 : 0;struct {unsigned __int16 rpl : 2;unsigned __int16 ti : 1;unsigned __int16 index : 13;} ss;unsigned __int32 : 0;struct {unsigned __int16 rpl : 2;unsigned __int16 ti : 1;unsigned __int16 index : 13;} ds;unsigned __int32 : 0;struct {unsigned __int16 rpl : 2;unsigned __int16 ti : 1;unsigned __int16 index : 13;} fs;unsigned __int32 : 0;struct {unsigned __int16 rpl : 2;unsigned __int16 ti : 1;unsigned __int16 index : 13;} gs;unsigned __int32 : 0;struct {unsigned __int16 rpl : 2;unsigned __int16 ti : 1;unsigned __int16 index : 13;} ldt;unsigned __int32 : 0;unsigned __int32 t : 1;unsigned __int32 : 15;unsigned __int32 io_bmap : 16;};
struct tss_desc {unsigned __int16 limit00;unsigned __int16 base00;unsigned __int8 base16;unsigned __int8 type : 5;unsigned __int8 dpl : 2;unsigned __int8 present : 1;unsigned __int8 limit16 : 4;unsigned __int8 : 3;unsigned __int8 granular : 1;unsigned __int8 base24;};
typedef struct tss_desc tss_desc_t;
typedef struct tss tss_t;
struct tty;
struct ttychars {char tc_erase;char tc_kill;char tc_intrc;char tc_quitc;char tc_startc;char tc_stopc;char tc_eofc;char tc_brkc;char tc_suspc;char tc_dsuspc;char tc_rprntc;char tc_flushc;char tc_werasc;char tc_lnextc;};
struct ttyent {char *ty_name;char *ty_getty;char *ty_type;int ty_status;char *ty_window;char *ty_onerror;char *ty_onoption;char *ty_comment;};
struct ttysize {unsigned __int16 ts_lines;unsigned __int16 ts_cols;unsigned __int16 ts_xxx;unsigned __int16 ts_yyy;};
struct twolevel_hint {unsigned __int32 isub_image : 8;unsigned __int32 itoc : 24;};
struct twolevel_hints_command {uint32_t cmd;uint32_t cmdsize;uint32_t offset;uint32_t nhints;};
struct txt_db_st {int num_fields;STACK *data;LHASH **index;int (__cdecl **qual)(char **);__int64 error;__int64 arg1;__int64 arg2;char **arg_row;};
struct typenode {unsigned __int16 status;__int64 ref;struct typenode *left;struct typenode *right;void *(__cdecl *makearg)(va_list *);void *(__cdecl *copyarg)(const void *);void (__cdecl *freearg)(void *);bool (__cdecl *fcheck)(FIELD *, const void *);bool (__cdecl *ccheck)(int, const void *);bool (__cdecl *next)(FIELD *, const void *);bool (__cdecl *prev)(FIELD *, const void *);};
struct tzhead {char tzh_magic[4];char tzh_reserved[16];char tzh_ttisgmtcnt[4];char tzh_ttisstdcnt[4];char tzh_leapcnt[4];char tzh_timecnt[4];char tzh_typecnt[4];char tzh_charcnt[4];};
typedef unsigned int uInt;
typedef uInt uIntf;
typedef unsigned __int64 uLong;
typedef uLong uLongf;
typedef unsigned __int8 u_char;
typedef unsigned int u_int;
typedef unsigned __int16 u_int16_t;
typedef unsigned int u_int32;
typedef unsigned int u_int32_t;
typedef unsigned __int64 u_int64_t;
typedef unsigned __int8 u_int8_t;
typedef unsigned __int64 u_long;
typedef u_int64_t u_quad_t;
typedef unsigned __int16 u_short;
typedef struct __darwin_ucontext ucontext_t;
struct ucred {struct ucred::$FA68314EC5A1B61A7AF0AAA32900A7CA cr_link;u_long cr_ref;struct ucred::posix_cred cr_posix;struct label *cr_label;struct au_session cr_audit;};
struct ucred::$FA68314EC5A1B61A7AF0AAA32900A7CA {struct ucred *tqe_next;struct ucred **tqe_prev;};
struct ucred::posix_cred {uid_t cr_uid;uid_t cr_ruid;uid_t cr_svuid;__int16 cr_ngroups;gid_t cr_groups[16];gid_t cr_rgid;gid_t cr_svgid;uid_t cr_gmuid;int cr_flags;};
struct udphdr {u_short uh_sport;u_short uh_dport;u_short uh_ulen;u_short uh_sum;};
struct udpiphdr {struct ipovly ui_i;struct udphdr ui_u;};
struct udpstat {u_int32_t udps_ipackets;u_int32_t udps_hdrops;u_int32_t udps_badsum;u_int32_t udps_badlen;u_int32_t udps_noport;u_int32_t udps_noportbcast;u_int32_t udps_fullsock;u_int32_t udpps_pcbcachemiss;u_int32_t udpps_pcbhashmiss;u_int32_t udps_opackets;u_int32_t udps_fastout;};
struct ui_method_st;
struct ui_st;
struct ui_string_st;
typedef __darwin_uid_t uid_t;
typedef unsigned int uint;
typedef unsigned __int16 uint16_t;
typedef unsigned int uint32_t;
typedef unsigned __int64 uint64_t;
typedef unsigned __int8 uint8_t;
typedef uint16_t uint_fast16_t;
typedef uint32_t uint_fast32_t;
typedef uint64_t uint_fast64_t;
typedef uint8_t uint_fast8_t;
typedef uint16_t uint_least16_t;
typedef uint32_t uint_least32_t;
typedef uint64_t uint_least64_t;
typedef uint8_t uint_least8_t;
typedef unsigned __int64 uintmax_t;
typedef unsigned __int64 uintptr_t;
struct uio;
enum uio_rw {UIO_READ = 0x0,UIO_WRITE = 0x1,};
typedef struct uio *uio_t;
typedef unsigned __int64 ulong;
struct un_sockinfo {uint64_t unsi_conn_so;uint64_t unsi_conn_pcb;union un_sockinfo::$AC5844E0938FE50647D9B156445EFB6F unsi_addr;union un_sockinfo::$AC5844E0938FE50647D9B156445EFB6F unsi_caddr;};
union un_sockinfo::$AC5844E0938FE50647D9B156445EFB6F {struct sockaddr_un ua_sun;char ua_dummy[255];};
typedef u_quad_t unp_gen_t;
typedef void (__cdecl *unparsedEntityDeclSAXFunc)(void *ctx, const xmlChar *name, const xmlChar *publicId, const xmlChar *systemId, const xmlChar *notationName);
typedef struct counter64 unsigned64;
typedef struct unw_addr_space *unw_addr_space_t;
struct unw_context_t {uint64_t data[128];};
struct unw_cursor_t {uint64_t data[140];};
typedef double unw_fpreg_t;
struct unw_proc_info_t {unw_word_t start_ip;unw_word_t end_ip;unw_word_t lsda;unw_word_t handler;unw_word_t gp;unw_word_t flags;uint32_t format;uint32_t unwind_info_size;unw_word_t unwind_info;unw_word_t extra;};
typedef int unw_regnum_t;
typedef uint64_t unw_word_t;
typedef mach_port_t upl_t;
typedef __darwin_useconds_t useconds_t;
struct user {};
typedef u_int64_t user_addr_t;
typedef int64_t user_long_t;
typedef int64_t user_off_t;
typedef u_int64_t user_size_t;
typedef int64_t user_ssize_t;
typedef char *user_subsystem_t;
typedef int64_t user_time_t;
typedef u_int64_t user_ulong_t;
typedef unsigned __int16 ushort;
struct usmStateReference {char *usr_name;size_t usr_name_length;u_char *usr_engine_id;size_t usr_engine_id_length;oid *usr_auth_protocol;size_t usr_auth_protocol_length;u_char *usr_auth_key;size_t usr_auth_key_length;oid *usr_priv_protocol;size_t usr_priv_protocol_length;u_char *usr_priv_key;size_t usr_priv_key_length;u_int usr_sec_level;};
struct usmUser {u_char *engineID;size_t engineIDLen;char *name;char *secName;oid *cloneFrom;size_t cloneFromLen;oid *authProtocol;size_t authProtocolLen;u_char *authKey;size_t authKeyLen;oid *privProtocol;size_t privProtocolLen;u_char *privKey;size_t privKeyLen;u_char *userPublicString;size_t userPublicStringLen;int userStatus;int userStorageType;void *usmDHUserAuthKeyChange;void *usmDHUserPrivKeyChange;struct usmUser *next;struct usmUser *prev;};
struct utimbuf {time_t actime;time_t modtime;};
struct utmp {char ut_line[8];char ut_name[8];char ut_host[16];__int64 ut_time;};
typedef struct $19DEE1C64F7EC3DDB040A3404BEC0D9F utmp_array;
struct utmparr {struct utmp **uta_arr;int uta_cnt;};
struct utmpidle {struct ru_utmp ui_utmp;unsigned int ui_idle;};
struct utmpidlearr {struct utmpidle **uia_arr;int uia_cnt;};
struct utmpx {char ut_user[256];char ut_id[4];char ut_line[32];pid_t ut_pid;__int16 ut_type;struct timeval ut_tv;char ut_host[256];__uint32_t ut_pad[16];};
struct utsname {char sysname[256];char nodename[256];char release[256];char version[256];char machine[256];};
struct uuid_command {uint32_t cmd;uint32_t cmdsize;uint8_t uuid[16];};
typedef __darwin_uuid_string_t uuid_string_t;
typedef __darwin_uuid_t uuid_t;
struct v3_ext_ctx {int flags;X509 *issuer_cert;X509 *subject_cert;X509_REQ *subject_req;X509_CRL *crl;X509V3_CONF_METHOD *db_meth;void *db;};
struct v3_ext_method {int ext_nid;int ext_flags;ASN1_ITEM_EXP *it;X509V3_EXT_NEW ext_new;X509V3_EXT_FREE ext_free;X509V3_EXT_D2I d2i;X509V3_EXT_I2D i2d;X509V3_EXT_I2S i2s;X509V3_EXT_S2I s2i;X509V3_EXT_I2V i2v;X509V3_EXT_V2I v2i;X509V3_EXT_I2R i2r;X509V3_EXT_R2I r2i;void *usr_data;};
typedef __gnuc_va_list va_list;
struct vacm_accessEntry {char groupName[34];char contextPrefix[34];int securityModel;int securityLevel;int contextMatch;char views[8][34];int storageType;int status;u_long bitMask;struct vacm_accessEntry *reserved;struct vacm_accessEntry *next;};
struct vacm_groupEntry {int securityModel;char securityName[34];char groupName[34];int storageType;int status;u_long bitMask;struct vacm_groupEntry *reserved;struct vacm_groupEntry *next;};
struct vacm_viewEntry {char viewName[34];oid viewSubtree[128];size_t viewSubtreeLen;u_char viewMask[34];size_t viewMaskLen;int viewType;int viewStorageType;int viewStatus;u_long bitMask;struct vacm_viewEntry *reserved;struct vacm_viewEntry *next;};
typedef struct $0D364CBB4DE5622667695AC90920144B valdat;
struct varbind_list {struct varbind_list *next;char *vblabel;};
struct variable {u_char magic;char type;u_short acl;FindVarMethod *findVar;u_char namelen;oid name[128];};
struct variable1 {u_char magic;u_char type;u_short acl;FindVarMethod *findVar;u_char namelen;oid name[1];};
struct variable13 {u_char magic;u_char type;u_short acl;FindVarMethod *findVar;u_char namelen;oid name[13];};
struct variable2 {u_char magic;u_char type;u_short acl;FindVarMethod *findVar;u_char namelen;oid name[2];};
struct variable3 {u_char magic;u_char type;u_short acl;FindVarMethod *findVar;u_char namelen;oid name[3];};
struct variable4 {u_char magic;u_char type;u_short acl;FindVarMethod *findVar;u_char namelen;oid name[4];};
struct variable7 {u_char magic;u_char type;u_short acl;FindVarMethod *findVar;u_char namelen;oid name[7];};
struct variable8 {u_char magic;u_char type;u_short acl;FindVarMethod *findVar;u_char namelen;oid name[8];};
struct variable_list {struct variable_list *next_variable;oid *name;size_t name_length;u_char type;netsnmp_vardata val;size_t val_len;oid name_loc[128];u_char buf[40];void *data;void (__cdecl *dataFreeHook)(void *);int index;};
struct vend {u_char v_magic[4];u_int32_t v_flags;u_char v_unused[56];};
struct version_min_command {uint32_t cmd;uint32_t cmdsize;uint32_t version;uint32_t reserved;};
struct vfs_context;
typedef struct vfs_context *vfs_context_t;
struct vfsconf {uint32_t vfc_reserved1;char vfc_name[15];int vfc_typenum;int vfc_refcount;int vfc_flags;uint32_t vfc_reserved2;uint32_t vfc_reserved3;};
struct vfsidctl {int vc_vers;fsid_t vc_fsid;void *vc_ptr;size_t vc_len;u_int32_t vc_spare[12];};
struct vfsquery {u_int32_t vq_flags;u_int32_t vq_spare[31];};
struct vfsstatfs {uint32_t f_bsize;size_t f_iosize;uint64_t f_blocks;uint64_t f_bfree;uint64_t f_bavail;uint64_t f_bused;uint64_t f_files;uint64_t f_ffree;fsid_t f_fsid;uid_t f_owner;uint64_t f_flags;char f_fstypename[16];char f_mntonname[1024];char f_mntfromname[1024];uint32_t f_fssubtype;void *f_reserved[2];};
struct vfstable;
typedef struct vfstable *vfstable_t;
struct view_parameters {netsnmp_pdu *pdu;oid *name;size_t namelen;int test;int errorcode;int check_subtree;};
typedef u_int32_t vifbitmap_t;
struct vifctl {vifi_t vifc_vifi;u_char vifc_flags;u_char vifc_threshold;u_int vifc_rate_limit;struct in_addr vifc_lcl_addr;struct in_addr vifc_rmt_addr;};
typedef u_short vifi_t;
struct vinfo_stat {uint32_t vst_dev;uint16_t vst_mode;uint16_t vst_nlink;uint64_t vst_ino;uid_t vst_uid;gid_t vst_gid;int64_t vst_atime;int64_t vst_atimensec;int64_t vst_mtime;int64_t vst_mtimensec;int64_t vst_ctime;int64_t vst_ctimensec;int64_t vst_birthtime;int64_t vst_birthtimensec;off_t vst_size;int64_t vst_blocks;int32_t vst_blksize;uint32_t vst_flags;uint32_t vst_gen;uint32_t vst_rdev;int64_t vst_qspare[2];};
typedef uint32_t vm32_object_id_t;
typedef vm_offset_t vm_address_t;
typedef int vm_behavior_t;
struct __attribute__((aligned(8))) vm_extmod_statistics {int64_t task_for_pid_count;int64_t task_for_pid_caller_count;int64_t thread_creation_count;int64_t thread_creation_caller_count;int64_t thread_set_state_count;int64_t thread_set_state_caller_count;};
typedef struct vm_extmod_statistics vm_extmod_statistics_data_t;
typedef struct vm_extmod_statistics *vm_extmod_statistics_t;
struct vm_info_object {natural_t vio_object;natural_t vio_size;unsigned int vio_ref_count;unsigned int vio_resident_page_count;unsigned int vio_absent_count;natural_t vio_copy;natural_t vio_shadow;natural_t vio_shadow_offset;natural_t vio_paging_offset;memory_object_copy_strategy_t vio_copy_strategy;vm_offset_t vio_last_alloc;unsigned int vio_paging_in_progress;boolean_t vio_pager_created;boolean_t vio_pager_initialized;boolean_t vio_pager_ready;boolean_t vio_can_persist;boolean_t vio_internal;boolean_t vio_temporary;boolean_t vio_alive;boolean_t vio_purgable;boolean_t vio_purgable_volatile;};
typedef vm_info_object_t *vm_info_object_array_t;
typedef struct vm_info_object vm_info_object_t;
struct vm_info_region {natural_t vir_start;natural_t vir_end;natural_t vir_object;natural_t vir_offset;boolean_t vir_needs_copy;vm_prot_t vir_protection;vm_prot_t vir_max_protection;vm_inherit_t vir_inheritance;natural_t vir_wired_count;natural_t vir_user_wired_count;};
struct vm_info_region_64 {natural_t vir_start;natural_t vir_end;natural_t vir_object;memory_object_offset_t vir_offset;boolean_t vir_needs_copy;vm_prot_t vir_protection;vm_prot_t vir_max_protection;vm_inherit_t vir_inheritance;natural_t vir_wired_count;natural_t vir_user_wired_count;};
typedef struct vm_info_region_64 vm_info_region_64_t;
typedef struct vm_info_region vm_info_region_t;
typedef unsigned int vm_inherit_t;
typedef unsigned int vm_machine_attribute_t;
typedef int vm_machine_attribute_val_t;
typedef uint64_t vm_map_address_t;
typedef uint64_t vm_map_offset_t;
typedef uint64_t vm_map_size_t;
typedef mach_port_t vm_map_t;
typedef mach_port_t vm_named_entry_t;
typedef unsigned __int64 vm_object_id_t;
typedef uint64_t vm_object_offset_t;
typedef uint64_t vm_object_size_t;
typedef uintptr_t vm_offset_t;
struct vm_page_info_basic {int disposition;int ref_count;vm_object_id_t object_id;memory_object_offset_t offset;int depth;int __pad;};
typedef struct vm_page_info_basic vm_page_info_basic_data_t;
typedef struct vm_page_info_basic *vm_page_info_basic_t;
typedef int vm_page_info_data_t[];
typedef int vm_page_info_flavor_t;
typedef int *vm_page_info_t;
typedef int vm_prot_t;
typedef int vm_purgable_t;
typedef void __cdecl vm_range_recorder_t(task_t, void *, unsigned int type, vm_range_t *, unsigned int);
typedef struct $966BCD5BEC08EADD7CB66B18D60473E0 vm_range_t;
struct vm_read_entry {vm_address_t address;vm_size_t size;};
typedef struct vm_read_entry vm_read_entry_t[256];
struct vm_region_basic_info {vm_prot_t protection;vm_prot_t max_protection;vm_inherit_t inheritance;boolean_t shared;boolean_t reserved;uint32_t offset;vm_behavior_t behavior;unsigned __int16 user_wired_count;};
struct vm_region_basic_info_64 {vm_prot_t protection;vm_prot_t max_protection;vm_inherit_t inheritance;boolean_t shared;boolean_t reserved;memory_object_offset_t offset;vm_behavior_t behavior;unsigned __int16 user_wired_count;};
typedef struct vm_region_basic_info_64 *vm_region_basic_info_64_t;
typedef struct vm_region_basic_info_64 vm_region_basic_info_data_64_t;
typedef struct vm_region_basic_info vm_region_basic_info_data_t;
typedef struct vm_region_basic_info *vm_region_basic_info_t;
struct vm_region_extended_info {vm_prot_t protection;unsigned int user_tag;unsigned int pages_resident;unsigned int pages_shared_now_private;unsigned int pages_swapped_out;unsigned int pages_dirtied;unsigned int ref_count;unsigned __int16 shadow_depth;unsigned __int8 external_pager;unsigned __int8 share_mode;};
typedef struct vm_region_extended_info vm_region_extended_info_data_t;
typedef struct vm_region_extended_info *vm_region_extended_info_t;
typedef int vm_region_flavor_t;
typedef int *vm_region_info_64_t;
typedef int vm_region_info_data_t[1024];
typedef int *vm_region_info_t;
typedef int *vm_region_recurse_info_64_t;
typedef int *vm_region_recurse_info_t;
struct vm_region_submap_info {vm_prot_t protection;vm_prot_t max_protection;vm_inherit_t inheritance;uint32_t offset;unsigned int user_tag;unsigned int pages_resident;unsigned int pages_shared_now_private;unsigned int pages_swapped_out;unsigned int pages_dirtied;unsigned int ref_count;unsigned __int16 shadow_depth;unsigned __int8 external_pager;unsigned __int8 share_mode;boolean_t is_submap;vm_behavior_t behavior;vm32_object_id_t object_id;unsigned __int16 user_wired_count;};
struct vm_region_submap_info_64 {vm_prot_t protection;vm_prot_t max_protection;vm_inherit_t inheritance;memory_object_offset_t offset;unsigned int user_tag;unsigned int pages_resident;unsigned int pages_shared_now_private;unsigned int pages_swapped_out;unsigned int pages_dirtied;unsigned int ref_count;unsigned __int16 shadow_depth;unsigned __int8 external_pager;unsigned __int8 share_mode;boolean_t is_submap;vm_behavior_t behavior;vm32_object_id_t object_id;unsigned __int16 user_wired_count;};
typedef struct vm_region_submap_info_64 *vm_region_submap_info_64_t;
typedef struct vm_region_submap_info_64 vm_region_submap_info_data_64_t;
typedef struct vm_region_submap_info vm_region_submap_info_data_t;
typedef struct vm_region_submap_info *vm_region_submap_info_t;
struct vm_region_submap_short_info_64 {vm_prot_t protection;vm_prot_t max_protection;vm_inherit_t inheritance;memory_object_offset_t offset;unsigned int user_tag;unsigned int ref_count;unsigned __int16 shadow_depth;unsigned __int8 external_pager;unsigned __int8 share_mode;boolean_t is_submap;vm_behavior_t behavior;vm32_object_id_t object_id;unsigned __int16 user_wired_count;};
typedef struct vm_region_submap_short_info_64 *vm_region_submap_short_info_64_t;
typedef struct vm_region_submap_short_info_64 vm_region_submap_short_info_data_64_t;
struct vm_region_top_info {unsigned int obj_id;unsigned int ref_count;unsigned int private_pages_resident;unsigned int shared_pages_resident;unsigned __int8 share_mode;};
typedef struct vm_region_top_info vm_region_top_info_data_t;
typedef struct vm_region_top_info *vm_region_top_info_t;
typedef uintptr_t vm_size_t;
struct vm_statistics {natural_t free_count;natural_t active_count;natural_t inactive_count;natural_t wire_count;natural_t zero_fill_count;natural_t reactivations;natural_t pageins;natural_t pageouts;natural_t faults;natural_t cow_faults;natural_t lookups;natural_t hits;natural_t purgeable_count;natural_t purges;natural_t speculative_count;};
struct __attribute__((aligned(8))) vm_statistics64 {natural_t free_count;natural_t active_count;natural_t inactive_count;natural_t wire_count;uint64_t zero_fill_count;uint64_t reactivations;uint64_t pageins;uint64_t pageouts;uint64_t faults;uint64_t cow_faults;uint64_t lookups;uint64_t hits;uint64_t purges;natural_t purgeable_count;natural_t speculative_count;};
typedef struct vm_statistics64 vm_statistics64_data_t;
typedef struct vm_statistics64 *vm_statistics64_t;
typedef struct vm_statistics vm_statistics_data_t;
typedef struct vm_statistics *vm_statistics_t;
typedef unsigned int vm_sync_t;
typedef mach_port_t vm_task_entry_t;
struct vmmeter {unsigned int v_swtch;unsigned int v_trap;unsigned int v_syscall;unsigned int v_intr;unsigned int v_soft;unsigned int v_faults;unsigned int v_lookups;unsigned int v_hits;unsigned int v_vm_faults;unsigned int v_cow_faults;unsigned int v_swpin;unsigned int v_swpout;unsigned int v_pswpin;unsigned int v_pswpout;unsigned int v_pageins;unsigned int v_pageouts;unsigned int v_pgpgin;unsigned int v_pgpgout;unsigned int v_intrans;unsigned int v_reactivated;unsigned int v_rev;unsigned int v_scan;unsigned int v_dfree;unsigned int v_pfree;unsigned int v_zfod;unsigned int v_nzfod;unsigned int v_page_size;unsigned int v_kernel_pages;unsigned int v_free_target;unsigned int v_free_min;unsigned int v_free_count;unsigned int v_wire_count;unsigned int v_active_count;unsigned int v_inactive_target;unsigned int v_inactive_count;};
struct vmspace {int32_t dummy;caddr_t dummy2;int32_t dummy3[5];caddr_t dummy4[3];};
struct vmtotal {int16_t t_rq;int16_t t_dw;int16_t t_pw;int16_t t_sl;int16_t t_sw;int32_t t_vm;int32_t t_avm;int32_t t_rm;int32_t t_arm;int32_t t_vmshr;int32_t t_avmshr;int32_t t_rmshr;int32_t t_armshr;int32_t t_free;};
struct vn_ioctl {char *vn_file;int vn_size;vncontrol_t vn_control;};
typedef enum $6B111C5B4079F64069FB7C2797D9CE8F vncontrol_t;
struct vnode;
struct vnode_fdinfo {struct proc_fileinfo pfi;struct vnode_info pvi;};
struct vnode_fdinfowithpath {struct proc_fileinfo pfi;struct vnode_info_path pvip;};
struct vnode_info {struct vinfo_stat vi_stat;int vi_type;int vi_pad;fsid_t vi_fsid;};
struct vnode_info_path {struct vnode_info vip_vi;char vip_path[1024];};
typedef struct vnode *vnode_t;
struct vnop_advlock_args;
typedef void *voidp;
typedef const void *voidpc;
typedef void *voidpf;
struct vol_attributes_attr {attribute_set_t validattr;attribute_set_t nativeattr;};
typedef struct vol_attributes_attr vol_attributes_attr_t;
struct vol_capabilities_attr {vol_capabilities_set_t capabilities;vol_capabilities_set_t valid;};
typedef struct vol_capabilities_attr vol_capabilities_attr_t;
typedef u_int32_t vol_capabilities_set_t[4];
enum vtagtype {VT_NON = 0x0,VT_UFS = 0x1,VT_NFS = 0x2,VT_MFS = 0x3,VT_MSDOSFS = 0x4,VT_LFS = 0x5,VT_LOFS = 0x6,VT_FDESC = 0x7,VT_PORTAL = 0x8,VT_NULL = 0x9,VT_UMAP = 0xA,VT_KERNFS = 0xB,VT_PROCFS = 0xC,VT_AFS = 0xD,VT_ISOFS = 0xE,VT_UNION = 0xF,VT_HFS = 0x10,VT_ZFS = 0x11,VT_DEVFS = 0x12,VT_WEBDAV = 0x13,VT_UDF = 0x14,VT_AFP = 0x15,VT_CDDA = 0x16,VT_CIFS = 0x17,VT_OTHER = 0x18,};
enum vtype {VNON = 0x0,VREG = 0x1,VDIR = 0x2,VBLK = 0x3,VCHR = 0x4,VLNK = 0x5,VSOCK = 0x6,VFIFO = 0x7,VBAD = 0x8,VSTR = 0x9,VCPLX = 0xA,};
union wait {int w_status;struct wait::$7577FAE843D32618A04985FDB883FD87 w_T;struct wait::$D2BE3D1E9784782BB73F97C8AEDA900E w_S;};
struct wait::$7577FAE843D32618A04985FDB883FD87 {unsigned __int32 w_Termsig : 7;unsigned __int32 w_Coredump : 1;unsigned __int32 w_Retcode : 8;unsigned __int32 w_Filler : 16;};
struct wait::$D2BE3D1E9784782BB73F97C8AEDA900E {unsigned __int32 w_Stopval : 8;unsigned __int32 w_Stopsig : 8;unsigned __int32 w_Filler : 16;};
typedef void (*warningSAXFunc)(void *ctx, const char *msg, ...);
typedef __darwin_wchar_t wchar_t;
typedef __darwin_wctrans_t wctrans_t;
typedef __darwin_wctype_t wctype_t;
struct whod {char wd_vers;char wd_type;char wd_pad[2];int wd_sendtime;int wd_recvtime;char wd_hostname[32];int wd_loadav[3];int wd_boottime;whod::whoent wd_we[42];};
struct whod::whoent {struct outmp we_utmp;int we_idle;};
struct wide {UInt32 lo;SInt32 hi;};
struct winsize {unsigned __int16 ws_row;unsigned __int16 ws_col;unsigned __int16 ws_xpixel;unsigned __int16 ws_ypixel;};
typedef __darwin_wint_t wint_t;
typedef struct $E1260AB78985DBC228459590506E4C92 wordexp_t;
struct x509_attributes_st {ASN1_OBJECT *object;int single;union x509_attributes_st::$66E1659F4D2A4D8BBB27251FF152F229 value;};
union x509_attributes_st::$66E1659F4D2A4D8BBB27251FF152F229 {char *ptr;STACK *set;ASN1_TYPE *single;};
struct x509_cert_aux_st {STACK *trust;STACK *reject;ASN1_UTF8STRING *alias;ASN1_OCTET_STRING *keyid;STACK *other;};
struct x509_cert_pair_st {X509 *forward;X509 *reverse;};
struct x509_cinf_st {ASN1_INTEGER *version;ASN1_INTEGER *serialNumber;X509_ALGOR *signature;X509_NAME *issuer;X509_VAL *validity;X509_NAME *subject;X509_PUBKEY *key;ASN1_BIT_STRING *issuerUID;ASN1_BIT_STRING *subjectUID;STACK *extensions;ASN1_ENCODING enc;};
struct x509_file_st {int num_paths;int num_alloced;char **paths;int *path_type;};
struct x509_hash_dir_st {int num_dirs;char **dirs;int *dirs_type;int num_dirs_alloced;};
struct x509_lookup_method_st {const char *name;int (__cdecl *new_item)(X509_LOOKUP *ctx);void (__cdecl *free)(X509_LOOKUP *ctx);int (__cdecl *init)(X509_LOOKUP *ctx);int (__cdecl *shutdown)(X509_LOOKUP *ctx);int (__cdecl *ctrl)(X509_LOOKUP *ctx, int cmd, const char *argc, __int64 argl, char **ret);int (__cdecl *get_by_subject)(X509_LOOKUP *ctx, int type, X509_NAME *name, X509_OBJECT *ret);int (__cdecl *get_by_issuer_serial)(X509_LOOKUP *ctx, int type, X509_NAME *name, ASN1_INTEGER *serial, X509_OBJECT *ret);int (__cdecl *get_by_fingerprint)(X509_LOOKUP *ctx, int type, unsigned __int8 *bytes, int len, X509_OBJECT *ret);int (__cdecl *get_by_alias)(X509_LOOKUP *ctx, int type, char *str, int len, X509_OBJECT *ret);};
struct x509_lookup_st {int init;int skip;X509_LOOKUP_METHOD *method;char *method_data;X509_STORE *store_ctx;};
struct x509_object_st {int type;union x509_object_st::$0BEAA7EF7F7C8AAD9DD0E8F95323714A data;};
union x509_object_st::$0BEAA7EF7F7C8AAD9DD0E8F95323714A {char *ptr;X509 *x509;X509_CRL *crl;EVP_PKEY *pkey;};
struct x509_purpose_st {int purpose;int trust;int flags;int (__cdecl *check_purpose)(const struct x509_purpose_st *, const X509 *, int);char *name;char *sname;void *usr_data;};
struct x509_st {X509_CINF *cert_info;X509_ALGOR *sig_alg;ASN1_BIT_STRING *signature;int valid;int references;char *name;CRYPTO_EX_DATA ex_data;__int64 ex_pathlen;__int64 ex_pcpathlen;unsigned __int64 ex_flags;unsigned __int64 ex_kusage;unsigned __int64 ex_xkusage;unsigned __int64 ex_nscert;ASN1_OCTET_STRING *skid;struct AUTHORITY_KEYID_st *akid;X509_POLICY_CACHE *policy_cache;unsigned __int8 sha1_hash[20];X509_CERT_AUX *aux;};
struct x509_store_ctx_st {X509_STORE *ctx;int current_method;X509 *cert;STACK *untrusted;STACK *crls;X509_VERIFY_PARAM *param;void *other_ctx;int (__cdecl *verify)(X509_STORE_CTX *ctx);int (__cdecl *verify_cb)(int ok, X509_STORE_CTX *ctx);int (__cdecl *get_issuer)(X509 **issuer, X509_STORE_CTX *ctx, X509 *x);int (__cdecl *check_issued)(X509_STORE_CTX *ctx, X509 *x, X509 *issuer);int (__cdecl *check_revocation)(X509_STORE_CTX *ctx);int (__cdecl *get_crl)(X509_STORE_CTX *ctx, X509_CRL **crl, X509 *x);int (__cdecl *check_crl)(X509_STORE_CTX *ctx, X509_CRL *crl);int (__cdecl *cert_crl)(X509_STORE_CTX *ctx, X509_CRL *crl, X509 *x);int (__cdecl *check_policy)(X509_STORE_CTX *ctx);int (__cdecl *cleanup)(X509_STORE_CTX *ctx);int valid;int last_untrusted;STACK *chain;X509_POLICY_TREE *tree;int explicit_policy;int error_depth;int error;X509 *current_cert;X509 *current_issuer;X509_CRL *current_crl;CRYPTO_EX_DATA ex_data;};
struct x509_store_st {int cache;STACK *objs;STACK *get_cert_methods;X509_VERIFY_PARAM *param;int (__cdecl *verify)(X509_STORE_CTX *ctx);int (__cdecl *verify_cb)(int ok, X509_STORE_CTX *ctx);int (__cdecl *get_issuer)(X509 **issuer, X509_STORE_CTX *ctx, X509 *x);int (__cdecl *check_issued)(X509_STORE_CTX *ctx, X509 *x, X509 *issuer);int (__cdecl *check_revocation)(X509_STORE_CTX *ctx);int (__cdecl *get_crl)(X509_STORE_CTX *ctx, X509_CRL **crl, X509 *x);int (__cdecl *check_crl)(X509_STORE_CTX *ctx, X509_CRL *crl);int (__cdecl *cert_crl)(X509_STORE_CTX *ctx, X509_CRL *crl, X509 *x);int (__cdecl *cleanup)(X509_STORE_CTX *ctx);CRYPTO_EX_DATA ex_data;int references;};
struct x509_trust_st {int trust;int flags;int (__cdecl *check_trust)(struct x509_trust_st *, X509 *, int);char *name;int arg1;void *arg2;};
typedef struct __darwin_i386_avx_state x86_avx_state32_t;
typedef struct __darwin_x86_avx_state64 x86_avx_state64_t;
struct x86_debug_state {x86_state_hdr_t dsh;union x86_debug_state::$DE64C214EB37D0506E9F0452E3D9193B uds;};
typedef struct __darwin_x86_debug_state32 x86_debug_state32_t;
typedef struct __darwin_x86_debug_state64 x86_debug_state64_t;
union x86_debug_state::$DE64C214EB37D0506E9F0452E3D9193B {x86_debug_state32_t ds32;x86_debug_state64_t ds64;};
typedef struct x86_debug_state x86_debug_state_t;
struct x86_exception_state {x86_state_hdr_t esh;union x86_exception_state::$251411A5B45F799EBE3F14281E77BAD6 ues;};
typedef struct __darwin_i386_exception_state x86_exception_state32_t;
typedef struct __darwin_x86_exception_state64 x86_exception_state64_t;
union x86_exception_state::$251411A5B45F799EBE3F14281E77BAD6 {x86_exception_state32_t es32;x86_exception_state64_t es64;};
typedef struct x86_exception_state x86_exception_state_t;
struct x86_float_state {x86_state_hdr_t fsh;union x86_float_state::$598376F8C40D36F3E63ABC99E645E7DC ufs;};
typedef struct __darwin_i386_float_state x86_float_state32_t;
typedef struct __darwin_x86_float_state64 x86_float_state64_t;
union x86_float_state::$598376F8C40D36F3E63ABC99E645E7DC {x86_float_state32_t fs32;x86_float_state64_t fs64;};
typedef struct x86_float_state x86_float_state_t;
struct x86_seg_load_fault32 {uint16_t trapno;uint16_t cpu;uint32_t err;uint32_t eip;uint32_t cs;uint32_t efl;};
struct x86_state_hdr {int flavor;int count;};
typedef struct x86_state_hdr x86_state_hdr_t;
struct x86_thread_state {x86_state_hdr_t tsh;union x86_thread_state::$D2D4D49B333AEF99596DF2F7E46595A4 uts;};
typedef struct __darwin_i386_thread_state x86_thread_state32_t;
typedef struct __darwin_x86_thread_state64 x86_thread_state64_t;
union x86_thread_state::$D2D4D49B333AEF99596DF2F7E46595A4 {x86_thread_state32_t ts32;x86_thread_state64_t ts64;};
typedef struct x86_thread_state x86_thread_state_t;
struct x_passwd {char *pw_name;char *pw_passwd;int pw_uid;int pw_gid;char *pw_gecos;char *pw_dir;char *pw_shell;};
struct xdr_discrim {int value;xdrproc_t proc;};
enum xdr_op {XDR_ENCODE = 0x0,XDR_DECODE = 0x1,XDR_FREE = 0x2,};
struct xdrbuf {union xdrbuf::$3C99F4725429E2A3FEA5222150305F9C xb_u;char *xb_ptr;size_t xb_left;size_t xb_growsize;xdrbuf_type xb_type;uint32_t xb_flags;};
union xdrbuf::$3C99F4725429E2A3FEA5222150305F9C {struct xdrbuf::$3C99F4725429E2A3FEA5222150305F9C::$F1B07FB5AB0A91F7CDD6BE0247735827 xb_buffer;};
struct xdrbuf::$3C99F4725429E2A3FEA5222150305F9C::$F1B07FB5AB0A91F7CDD6BE0247735827 {char *xbb_base;uint32_t xbb_size;uint32_t xbb_len;};
enum xdrbuf_type {XDRBUF_BUFFER = 0x1,};
typedef int (*xdrproc_t)(XDR *, ...);
struct xinpcb {u_int32_t xi_len;struct inpcb xi_inp;struct xsocket xi_socket;u_quad_t xi_alignment_hack;};
struct xinpcb64 {u_int64_t xi_len;u_int64_t xi_inpp;u_short inp_fport;u_short inp_lport;struct inpcb64_list_entry inp_list;u_int64_t inp_ppcb;u_int64_t inp_pcbinfo;struct inpcb64_list_entry inp_portlist;u_int64_t inp_phd;inp_gen_t inp_gencnt;int inp_flags;u_int32_t inp_flow;u_char inp_vflag;u_char inp_ip_ttl;u_char inp_ip_p;union xinpcb64::$BD75B87EE766833A3DF9644C7FCC1E00 inp_dependfaddr;union xinpcb64::$61B649B2802E895728C8AA130C15F594 inp_dependladdr;struct xinpcb64::$890C891424358EA1AE7B5FD004102AA0 inp_depend4;struct xinpcb64::$5B229D794C9B59022271F29D340290EB inp_depend6;struct xsocket64 xi_socket;u_quad_t xi_alignment_hack;};
struct xinpcb64::$5B229D794C9B59022271F29D340290EB {u_int8_t inp6_hlim;int inp6_cksum;u_short inp6_ifindex;__int16 inp6_hops;};
union xinpcb64::$61B649B2802E895728C8AA130C15F594 {struct in_addr_4in6 inp46_local;struct in6_addr inp6_local;};
struct xinpcb64::$890C891424358EA1AE7B5FD004102AA0 {u_char inp4_ip_tos;};
union xinpcb64::$BD75B87EE766833A3DF9644C7FCC1E00 {struct in_addr_4in6 inp46_foreign;struct in6_addr inp6_foreign;};
struct xinpgen {u_int32_t xig_len;u_int xig_count;inp_gen_t xig_gen;so_gen_t xig_sogen;};
typedef enum $6DB4FE1C454B55753CB1CF245ADB8A73 xlinkActuate;
typedef void (__cdecl *xlinkExtendedLinkFunk)(void *ctx, xmlNodePtr node, int nbLocators, const xlinkHRef *hrefs, const xlinkRole *roles, int nbArcs, const xlinkRole *from, const xlinkRole *to, xlinkShow *show, xlinkActuate *actuate, int nbTitles, const xlinkTitle *titles, const xmlChar **langs);
typedef void (__cdecl *xlinkExtendedLinkSetFunk)(void *ctx, xmlNodePtr node, int nbLocators, const xlinkHRef *hrefs, const xlinkRole *roles, int nbTitles, const xlinkTitle *titles, const xmlChar **langs);
typedef xmlChar *xlinkHRef;
typedef struct _xlinkHandler xlinkHandler;
typedef xlinkHandler *xlinkHandlerPtr;
typedef void (__cdecl *xlinkNodeDetectFunc)(void *ctx, xmlNodePtr node);
typedef xmlChar *xlinkRole;
typedef enum $EE25B450600DB130E77B21E804467FD5 xlinkShow;
typedef void (__cdecl *xlinkSimpleLinkFunk)(void *ctx, xmlNodePtr node, const xlinkHRef href, const xlinkRole role, const xlinkTitle title);
typedef xmlChar *xlinkTitle;
typedef enum $4FD0ECE3FAAB0A3A3855B925214176D1 xlinkType;
typedef struct _xmlAttr xmlAttr;
typedef xmlAttr *xmlAttrPtr;
typedef struct _xmlAttribute xmlAttribute;
typedef enum $8BA7C419D374795706E7AF80CA235D6C xmlAttributeDefault;
typedef xmlAttribute *xmlAttributePtr;
typedef struct _xmlHashTable xmlAttributeTable;
typedef xmlAttributeTable *xmlAttributeTablePtr;
typedef enum $1DB7270510D9B9271406B2E2F1D1DAC7 xmlAttributeType;
typedef struct _xmlAutomata xmlAutomata;
typedef xmlAutomata *xmlAutomataPtr;
typedef struct _xmlAutomataState xmlAutomataState;
typedef xmlAutomataState *xmlAutomataStatePtr;
typedef struct _xmlBuffer xmlBuffer;
typedef enum $D4C59E39AC5981A3A29A91ECFFFB3F03 xmlBufferAllocationScheme;
typedef xmlBuffer *xmlBufferPtr;
typedef int (__cdecl *xmlC14NIsVisibleCallback)(void *user_data, xmlNodePtr node, xmlNodePtr parent);
typedef struct _xmlCatalog xmlCatalog;
typedef enum $E720E7619019B10D7DF6FB85013EE738 xmlCatalogAllow;
typedef enum $9AB5807BE2A73FD802AD3D897EE79005 xmlCatalogPrefer;
typedef xmlCatalog *xmlCatalogPtr;
typedef struct _xmlChLRange xmlChLRange;
typedef xmlChLRange *xmlChLRangePtr;
typedef struct _xmlChRangeGroup xmlChRangeGroup;
typedef xmlChRangeGroup *xmlChRangeGroupPtr;
typedef struct _xmlChSRange xmlChSRange;
typedef xmlChSRange *xmlChSRangePtr;
typedef unsigned __int8 xmlChar;
typedef enum $E5E7377D643AA4CAF5C6CDE0D2F168BF xmlCharEncoding;
typedef struct _xmlCharEncodingHandler xmlCharEncodingHandler;
typedef xmlCharEncodingHandler *xmlCharEncodingHandlerPtr;
typedef int (__cdecl *xmlCharEncodingInputFunc)(unsigned __int8 *out, int *outlen, const unsigned __int8 *in, int *inlen);
typedef int (__cdecl *xmlCharEncodingOutputFunc)(unsigned __int8 *out, int *outlen, const unsigned __int8 *in, int *inlen);
typedef xmlNsPtr (__cdecl *xmlDOMWrapAcquireNsFunction)(xmlDOMWrapCtxtPtr ctxt, xmlNodePtr node, const xmlChar *nsName, const xmlChar *nsPrefix);
typedef struct _xmlDOMWrapCtxt xmlDOMWrapCtxt;
typedef xmlDOMWrapCtxt *xmlDOMWrapCtxtPtr;
typedef void (__cdecl *xmlDeregisterNodeFunc)(xmlNodePtr node);
typedef struct _xmlDict xmlDict;
typedef xmlDict *xmlDictPtr;
typedef struct _xmlDoc xmlDoc;
typedef enum $77D6BC159AA5DA7BD67BECF2A12D0ED9 xmlDocProperties;
typedef xmlDoc *xmlDocPtr;
typedef struct _xmlDtd xmlDtd;
typedef xmlDtd *xmlDtdPtr;
typedef struct _xmlElement xmlElement;
typedef struct _xmlElementContent xmlElementContent;
typedef enum $FF6DEC2E5CE2EC2303227045BBC9CA50 xmlElementContentOccur;
typedef xmlElementContent *xmlElementContentPtr;
typedef enum $A0A84DEF331DB2FC39B4CD8900FCA11B xmlElementContentType;
typedef xmlElement *xmlElementPtr;
typedef struct _xmlHashTable xmlElementTable;
typedef xmlElementTable *xmlElementTablePtr;
typedef enum $C5101608B88D7C11ADC8E88E540FCD76 xmlElementType;
typedef enum $E1FDD4ACF09F0C0D97484FB628F6E577 xmlElementTypeVal;
typedef struct _xmlHashTable xmlEntitiesTable;
typedef xmlEntitiesTable *xmlEntitiesTablePtr;
typedef struct _xmlEntity xmlEntity;
typedef xmlEntity *xmlEntityPtr;
typedef void (__cdecl *xmlEntityReferenceFunc)(xmlEntityPtr ent, xmlNodePtr firstNode, xmlNodePtr lastNode);
typedef enum $D46AA9DF6FBFE9D2B16063CE8CC3B5EF xmlEntityType;
typedef struct _xmlEnumeration xmlEnumeration;
typedef xmlEnumeration *xmlEnumerationPtr;
typedef struct _xmlError xmlError;
typedef enum $6C3D1F16C57240F500269E6CB726B57E xmlErrorDomain;
typedef enum $2B1C8C2AA87A0F529B35F14375A7741D xmlErrorLevel;
typedef xmlError *xmlErrorPtr;
typedef struct _xmlExpCtxt xmlExpCtxt;
typedef xmlExpCtxt *xmlExpCtxtPtr;
typedef struct _xmlExpNode xmlExpNode;
typedef xmlExpNode *xmlExpNodePtr;
typedef enum $2DA825ED8C2895B6F3A859CF0380522A xmlExpNodeType;
typedef xmlParserInputPtr (__cdecl *xmlExternalEntityLoader)(const char *URL, const char *ID, xmlParserCtxtPtr context);
typedef enum $743EA981694C8951C7F0FF81288A5AAC xmlFeature;
typedef void (__cdecl *xmlFreeFunc)(void *mem);
typedef void (*xmlGenericErrorFunc)(void *ctx, const char *msg, ...);
typedef struct _xmlGlobalState xmlGlobalState;
typedef xmlGlobalState *xmlGlobalStatePtr;
typedef void *(__cdecl *xmlHashCopier)(void *payload, xmlChar *name);
typedef void (__cdecl *xmlHashDeallocator)(void *payload, xmlChar *name);
typedef void (__cdecl *xmlHashScanner)(void *payload, void *data, xmlChar *name);
typedef void (__cdecl *xmlHashScannerFull)(void *payload, void *data, const xmlChar *name, const xmlChar *name2, const xmlChar *name3);
typedef struct _xmlHashTable xmlHashTable;
typedef xmlHashTable *xmlHashTablePtr;
typedef struct _xmlID xmlID;
typedef xmlID *xmlIDPtr;
typedef struct _xmlHashTable xmlIDTable;
typedef xmlIDTable *xmlIDTablePtr;
typedef int (__cdecl *xmlInputCloseCallback)(void *context);
typedef int (__cdecl *xmlInputMatchCallback)(const char *filename);
typedef void *(__cdecl *xmlInputOpenCallback)(const char *filename);
typedef int (__cdecl *xmlInputReadCallback)(void *context, char *buffer, int len);
typedef struct _xmlLink xmlLink;
typedef xmlLink *xmlLinkPtr;
typedef struct _xmlList xmlList;
typedef int (__cdecl *xmlListDataCompare)(const void *data0, const void *data1);
typedef void (__cdecl *xmlListDeallocator)(xmlLinkPtr lk);
typedef xmlList *xmlListPtr;
typedef int (__cdecl *xmlListWalker)(const void *data, const void *user);
typedef struct _xmlLocationSet xmlLocationSet;
typedef xmlLocationSet *xmlLocationSetPtr;
typedef void *(__cdecl *xmlMallocFunc)(size_t size);
typedef struct _xmlModule xmlModule;
typedef enum $72C7479B17D42DC9DFBAFDAD1641A379 xmlModuleOption;
typedef xmlModule *xmlModulePtr;
typedef struct _xmlMutex xmlMutex;
typedef xmlMutex *xmlMutexPtr;
typedef struct _xmlNode xmlNode;
typedef xmlNode *xmlNodePtr;
typedef struct _xmlNodeSet xmlNodeSet;
typedef xmlNodeSet *xmlNodeSetPtr;
typedef struct _xmlNotation xmlNotation;
typedef xmlNotation *xmlNotationPtr;
typedef struct _xmlHashTable xmlNotationTable;
typedef xmlNotationTable *xmlNotationTablePtr;
typedef struct _xmlNs xmlNs;
typedef xmlNs *xmlNsPtr;
typedef xmlElementType xmlNsType;
typedef struct _xmlOutputBuffer xmlOutputBuffer;
typedef xmlOutputBufferPtr (__cdecl *xmlOutputBufferCreateFilenameFunc)(const char *URI, xmlCharEncodingHandlerPtr encoder, int compression);
typedef xmlOutputBuffer *xmlOutputBufferPtr;
typedef int (__cdecl *xmlOutputCloseCallback)(void *context);
typedef int (__cdecl *xmlOutputMatchCallback)(const char *filename);
typedef void *(__cdecl *xmlOutputOpenCallback)(const char *filename);
typedef int (__cdecl *xmlOutputWriteCallback)(void *context, const char *buffer, int len);
typedef struct _xmlParserCtxt xmlParserCtxt;
typedef xmlParserCtxt *xmlParserCtxtPtr;
typedef enum $98923156B44D8D77A256CDD67243A530 xmlParserErrors;
typedef struct _xmlParserInput xmlParserInput;
typedef struct _xmlParserInputBuffer xmlParserInputBuffer;
typedef xmlParserInputBufferPtr (__cdecl *xmlParserInputBufferCreateFilenameFunc)(const char *URI, xmlCharEncoding enc);
typedef xmlParserInputBuffer *xmlParserInputBufferPtr;
typedef void (__cdecl *xmlParserInputDeallocate)(xmlChar *str);
typedef xmlParserInput *xmlParserInputPtr;
typedef enum $87AADCA8575A383F1076ADE10D123F6C xmlParserInputState;
typedef enum $D3CAE1E2FD75A1BAED0D73857BABBB1F xmlParserMode;
typedef struct _xmlParserNodeInfo xmlParserNodeInfo;
typedef xmlParserNodeInfo *xmlParserNodeInfoPtr;
typedef struct _xmlParserNodeInfoSeq xmlParserNodeInfoSeq;
typedef xmlParserNodeInfoSeq *xmlParserNodeInfoSeqPtr;
typedef enum $B1615B6EE754A1E9BE91669222F3B978 xmlParserOption;
typedef enum $DD8E034716BD0047246A4D50EFF6F7DB xmlParserProperties;
typedef enum $DE419B5C0B7C486303E1E193CE859546 xmlParserSeverities;
typedef struct _xmlPattern xmlPattern;
typedef enum $E52E208B92D65F4D665A1F0C1924EDE5 xmlPatternFlags;
typedef xmlPattern *xmlPatternPtr;
typedef struct _xmlRMutex xmlRMutex;
typedef xmlRMutex *xmlRMutexPtr;
typedef enum $9D11CEBD141858D27EC341F596A794AC xmlReaderTypes;
typedef void *(__cdecl *xmlReallocFunc)(void *mem, size_t size);
typedef struct _xmlRef xmlRef;
typedef xmlRef *xmlRefPtr;
typedef struct _xmlHashTable xmlRefTable;
typedef xmlRefTable *xmlRefTablePtr;
typedef void (__cdecl *xmlRegExecCallbacks)(xmlRegExecCtxtPtr exec, const xmlChar *token, void *transdata, void *inputdata);
typedef struct _xmlRegExecCtxt xmlRegExecCtxt;
typedef xmlRegExecCtxt *xmlRegExecCtxtPtr;
typedef struct _xmlRegexp xmlRegexp;
typedef xmlRegexp *xmlRegexpPtr;
typedef void (__cdecl *xmlRegisterNodeFunc)(xmlNodePtr node);
typedef struct _xmlRelaxNG xmlRelaxNG;
typedef struct _xmlRelaxNGParserCtxt xmlRelaxNGParserCtxt;
typedef xmlRelaxNGParserCtxt *xmlRelaxNGParserCtxtPtr;
typedef enum $423F66BA35E8428C801C88EA56951FA7 xmlRelaxNGParserFlag;
typedef xmlRelaxNG *xmlRelaxNGPtr;
typedef struct _xmlRelaxNGValidCtxt xmlRelaxNGValidCtxt;
typedef xmlRelaxNGValidCtxt *xmlRelaxNGValidCtxtPtr;
typedef enum $4E7DAA04C1544F5CC93F7C5C5ABE1E5E xmlRelaxNGValidErr;
typedef void (*xmlRelaxNGValidityErrorFunc)(void *ctx, const char *msg, ...);
typedef void (*xmlRelaxNGValidityWarningFunc)(void *ctx, const char *msg, ...);
typedef struct _xmlSAXHandler xmlSAXHandler;
typedef xmlSAXHandler *xmlSAXHandlerPtr;
typedef struct _xmlSAXHandlerV1 xmlSAXHandlerV1;
typedef xmlSAXHandlerV1 *xmlSAXHandlerV1Ptr;
typedef struct _xmlSAXLocator xmlSAXLocator;
typedef xmlSAXLocator *xmlSAXLocatorPtr;
typedef struct _xmlSaveCtxt xmlSaveCtxt;
typedef xmlSaveCtxt *xmlSaveCtxtPtr;
typedef enum $1E2DDA021D687B95C32B4B8734BFFE5E xmlSaveOption;
typedef struct _xmlSchema xmlSchema;
typedef struct _xmlSchemaAnnot xmlSchemaAnnot;
typedef xmlSchemaAnnot *xmlSchemaAnnotPtr;
typedef struct _xmlSchemaAttribute xmlSchemaAttribute;
typedef struct _xmlSchemaAttributeGroup xmlSchemaAttributeGroup;
typedef xmlSchemaAttributeGroup *xmlSchemaAttributeGroupPtr;
typedef struct _xmlSchemaAttributeLink xmlSchemaAttributeLink;
typedef xmlSchemaAttributeLink *xmlSchemaAttributeLinkPtr;
typedef xmlSchemaAttribute *xmlSchemaAttributePtr;
typedef enum $2F04DECAC9E27824D85E198F1C682F07 xmlSchemaContentType;
typedef struct _xmlSchemaElement xmlSchemaElement;
typedef xmlSchemaElement *xmlSchemaElementPtr;
typedef struct _xmlSchemaFacet xmlSchemaFacet;
typedef struct _xmlSchemaFacetLink xmlSchemaFacetLink;
typedef xmlSchemaFacetLink *xmlSchemaFacetLinkPtr;
typedef xmlSchemaFacet *xmlSchemaFacetPtr;
typedef struct _xmlSchemaNotation xmlSchemaNotation;
typedef xmlSchemaNotation *xmlSchemaNotationPtr;
typedef struct _xmlSchemaParserCtxt xmlSchemaParserCtxt;
typedef xmlSchemaParserCtxt *xmlSchemaParserCtxtPtr;
typedef xmlSchema *xmlSchemaPtr;
typedef xmlSchemaSAXPlugStruct *xmlSchemaSAXPlugPtr;
typedef struct _xmlSchemaSAXPlug xmlSchemaSAXPlugStruct;
typedef struct _xmlSchemaType xmlSchemaType;
typedef struct _xmlSchemaTypeLink xmlSchemaTypeLink;
typedef xmlSchemaTypeLink *xmlSchemaTypeLinkPtr;
typedef xmlSchemaType *xmlSchemaTypePtr;
typedef enum $539980D7AFB74DD78553342EB4BF9B66 xmlSchemaTypeType;
typedef struct _xmlSchemaVal xmlSchemaVal;
typedef xmlSchemaVal *xmlSchemaValPtr;
typedef enum $24B90EFAD6F7231A0F4CA2F9C31D428B xmlSchemaValType;
typedef struct _xmlSchemaValidCtxt xmlSchemaValidCtxt;
typedef xmlSchemaValidCtxt *xmlSchemaValidCtxtPtr;
typedef enum $8D0F94C86775DD2813ADC12AE093783F xmlSchemaValidError;
typedef enum $3C85D19FBA73C2ACEDF478D656FAB909 xmlSchemaValidOption;
typedef void (*xmlSchemaValidityErrorFunc)(void *ctx, const char *msg, ...);
typedef void (*xmlSchemaValidityWarningFunc)(void *ctx, const char *msg, ...);
typedef enum $278B4CDAE9C99E304B0906BE5968E29D xmlSchemaWhitespaceValueType;
typedef struct _xmlSchemaWildcard xmlSchemaWildcard;
typedef struct _xmlSchemaWildcardNs xmlSchemaWildcardNs;
typedef xmlSchemaWildcardNs *xmlSchemaWildcardNsPtr;
typedef xmlSchemaWildcard *xmlSchemaWildcardPtr;
typedef struct _xmlSchematron xmlSchematron;
typedef struct _xmlSchematronParserCtxt xmlSchematronParserCtxt;
typedef xmlSchematronParserCtxt *xmlSchematronParserCtxtPtr;
typedef xmlSchematron *xmlSchematronPtr;
typedef struct _xmlSchematronValidCtxt xmlSchematronValidCtxt;
typedef xmlSchematronValidCtxt *xmlSchematronValidCtxtPtr;
typedef enum $A86837AB56EC532038D4CEC80449646F xmlSchematronValidOptions;
typedef void (*xmlSchematronValidityErrorFunc)(void *ctx, const char *msg, ...);
typedef void (*xmlSchematronValidityWarningFunc)(void *ctx, const char *msg, ...);
typedef int (__cdecl *xmlShellCmd)(xmlShellCtxtPtr ctxt, char *arg, xmlNodePtr node, xmlNodePtr node2);
typedef struct _xmlShellCtxt xmlShellCtxt;
typedef xmlShellCtxt *xmlShellCtxtPtr;
typedef char *(__cdecl *xmlShellReadlineFunc)(char *prompt);
typedef char *(__cdecl *xmlStrdupFunc)(const char *str);
typedef struct _xmlStreamCtxt xmlStreamCtxt;
typedef xmlStreamCtxt *xmlStreamCtxtPtr;
typedef void (__cdecl *xmlStructuredErrorFunc)(void *userData, xmlErrorPtr error);
typedef struct _xmlTextReader xmlTextReader;
typedef void (__cdecl *xmlTextReaderErrorFunc)(void *arg, const char *msg, xmlParserSeverities severity, xmlTextReaderLocatorPtr locator);
typedef void *xmlTextReaderLocatorPtr;
typedef enum $4C21AF12A3CB4BE1E82FF113A63D6EE5 xmlTextReaderMode;
typedef xmlTextReader *xmlTextReaderPtr;
typedef struct _xmlTextWriter xmlTextWriter;
typedef xmlTextWriter *xmlTextWriterPtr;
typedef struct _xmlURI xmlURI;
typedef xmlURI *xmlURIPtr;
typedef struct _xmlValidCtxt xmlValidCtxt;
typedef xmlValidCtxt *xmlValidCtxtPtr;
typedef struct _xmlValidState xmlValidState;
typedef xmlValidState *xmlValidStatePtr;
typedef void (*xmlValidityErrorFunc)(void *ctx, const char *msg, ...);
typedef void (*xmlValidityWarningFunc)(void *ctx, const char *msg, ...);
typedef struct _xmlXIncludeCtxt xmlXIncludeCtxt;
typedef xmlXIncludeCtxt *xmlXIncludeCtxtPtr;
typedef struct _xmlXPathAxis xmlXPathAxis;
typedef xmlXPathObjectPtr (__cdecl *xmlXPathAxisFunc)(xmlXPathParserContextPtr ctxt, xmlXPathObjectPtr cur);
typedef xmlXPathAxis *xmlXPathAxisPtr;
typedef struct _xmlXPathCompExpr xmlXPathCompExpr;
typedef xmlXPathCompExpr *xmlXPathCompExprPtr;
typedef struct _xmlXPathContext xmlXPathContext;
typedef xmlXPathContext *xmlXPathContextPtr;
typedef int (__cdecl *xmlXPathConvertFunc)(xmlXPathObjectPtr obj, int type);
typedef enum $6FDCE26D5FA4D6DB475CE5F65FC8B575 xmlXPathError;
typedef void (__cdecl *xmlXPathEvalFunc)(xmlXPathParserContextPtr ctxt, int nargs);
typedef xmlXPathFunction (__cdecl *xmlXPathFuncLookupFunc)(void *ctxt, const xmlChar *name, const xmlChar *ns_uri);
typedef xmlXPathFunct *xmlXPathFuncPtr;
typedef struct _xmlXPathFunct xmlXPathFunct;
typedef void (__cdecl *xmlXPathFunction)(xmlXPathParserContextPtr ctxt, int nargs);
typedef struct _xmlXPathObject xmlXPathObject;
typedef xmlXPathObject *xmlXPathObjectPtr;
typedef enum $0FAD588DCCF26DA566A37A2D9B7AC1B1 xmlXPathObjectType;
typedef struct _xmlXPathParserContext xmlXPathParserContext;
typedef xmlXPathParserContext *xmlXPathParserContextPtr;
typedef struct _xmlXPathType xmlXPathType;
typedef xmlXPathType *xmlXPathTypePtr;
typedef struct _xmlXPathVariable xmlXPathVariable;
typedef xmlXPathObjectPtr (__cdecl *xmlXPathVariableLookupFunc)(void *ctxt, const xmlChar *name, const xmlChar *ns_uri);
typedef xmlXPathVariable *xmlXPathVariablePtr;
typedef struct xp_async_error_event_struct xp_async_error_event;
struct xp_async_error_event_struct {xp_request_type request_type;xp_resource_id id;xp_error error;};
enum xp_bit_gravity_enum {XP_GRAVITY_NONE = 0x0,XP_GRAVITY_NORTH_WEST = 0x1,XP_GRAVITY_NORTH_EAST = 0x2,XP_GRAVITY_SOUTH_EAST = 0x3,XP_GRAVITY_SOUTH_WEST = 0x4,};
typedef int xp_bool;
typedef struct xp_box_struct xp_box;
struct xp_box_struct {__int16 x1;__int16 y1;__int16 x2;__int16 y2;};
typedef unsigned int xp_client_id;
typedef xp_error __cdecl xp_colormap_fun(void *data, int first_color, int n_colors, uint32_t *colors);
enum xp_composite_op_enum {XP_COMPOSITE_SRC = 0x0,XP_COMPOSITE_OVER = 0x1,};
enum xp_depth_enum {XP_DEPTH_NIL = 0x0,XP_DEPTH_ARGB8888 = 0x1,XP_DEPTH_RGB555 = 0x2,XP_DEPTH_A8 = 0x3,XP_DEPTH_INDEX8 = 0x4,};
typedef int xp_error;
enum xp_error_enum {XP_Success = 0x0,XP_BadRequest = 0x1,XP_BadValue = 0x2,XP_BadWindow = 0x3,XP_BadMatch = 0x8,XP_BadAccess = 0xA,XP_BadImplementation = 0x11,};
typedef void __cdecl xp_event_fun(unsigned int type, const void *arg, unsigned int arg_size, void *user_data);
enum xp_event_type_enum {XP_EVENT_DISPLAY_CHANGED = 0x1,XP_EVENT_WINDOW_STATE_CHANGED = 0x2,XP_EVENT_ASYNC_ERROR = 0x4,XP_EVENT_SURFACE_DESTROYED = 0x8,XP_EVENT_SURFACE_CHANGED = 0x10,XP_EVENT_WINDOW_MOVED = 0x20,XP_EVENT_SPACE_CHANGED = 0x40,};
typedef enum xp_frame_attr_enum xp_frame_attr;
enum xp_frame_attr_enum {XP_FRAME_ATTR_ACTIVE = 0x1,XP_FRAME_ATTR_URGENT = 0x2,XP_FRAME_ATTR_TITLE = 0x4,XP_FRAME_ATTR_PRELIGHT = 0x8,XP_FRAME_ATTR_SHADED = 0x10,XP_FRAME_ATTR_CLOSE_BOX = 0x100,XP_FRAME_ATTR_COLLAPSE = 0x200,XP_FRAME_ATTR_ZOOM = 0x400,XP_FRAME_ATTR_CLOSE_BOX_CLICKED = 0x800,XP_FRAME_ATTR_COLLAPSE_BOX_CLICKED = 0x1000,XP_FRAME_ATTR_ZOOM_BOX_CLICKED = 0x2000,XP_FRAME_ATTR_GROW_BOX = 0x4000,};
typedef enum xp_frame_class_enum xp_frame_class;
enum xp_frame_class_enum {XP_FRAME_CLASS_DECOR_LARGE = 0x1,XP_FRAME_CLASS_RESERVED1 = 0x2,XP_FRAME_CLASS_RESERVED2 = 0x4,XP_FRAME_CLASS_RESERVED3 = 0x8,XP_FRAME_CLASS_DECOR_SMALL = 0x10,XP_FRAME_CLASS_RESERVED5 = 0x20,XP_FRAME_CLASS_RESERVED6 = 0x40,XP_FRAME_CLASS_DECOR_NONE = 0x80,XP_FRAME_CLASS_RESERVED8 = 0x100,XP_FRAME_CLASS_BEHAVIOR_MANAGED = 0x8000,XP_FRAME_CLASS_BEHAVIOR_TRANSIENT = 0x10000,XP_FRAME_CLASS_BEHAVIOR_STATIONARY = 0x20000,};
typedef enum xp_frame_rect_enum xp_frame_rect;
enum xp_frame_rect_enum {XP_FRAME_RECT_TITLEBAR = 0x1,XP_FRAME_RECT_TRACKING = 0x2,XP_FRAME_RECT_GROWBOX = 0x3,};
enum xp_init_options_enum {XP_IN_BACKGROUND = 0x1,XP_BACKGROUND_EVENTS = 0x2,};
typedef unsigned int xp_request_type;
enum xp_request_type_enum {XP_REQUEST_NIL = 0x0,XP_REQUEST_DESTROY_WINDOW = 0x1,XP_REQUEST_CONFIGURE_WINDOW = 0x2,XP_REQUEST_FLUSH_WINDOW = 0x3,XP_REQUEST_COPY_WINDOW = 0x4,XP_REQUEST_UNLOCK_WINDOW = 0x5,XP_REQUEST_DISABLE_UPDATE = 0x6,XP_REQUEST_REENABLE_UPDATE = 0x7,XP_REQUEST_HIDE_CURSOR = 0x8,XP_REQUEST_SHOW_CURSOR = 0x9,XP_REQUEST_FRAME_DRAW = 0xA,};
typedef unsigned int xp_resource_id;
typedef xp_resource_id xp_surface_id;
typedef struct xp_window_changes_struct xp_window_changes;
enum xp_window_changes_enum {XP_ORIGIN = 0x1,XP_SIZE = 0x2,XP_BOUNDS = 0x3,XP_SHAPE = 0x4,XP_STACKING = 0x8,XP_DEPTH = 0x10,XP_COLORMAP = 0x20,XP_WINDOW_LEVEL = 0x40,XP_ATTACH_TRANSIENT = 0x80,};
struct xp_window_changes_struct {int x;int y;unsigned int width;unsigned int height;int bit_gravity;int shape_nrects;xp_box *shape_rects;int shape_tx;int shape_ty;int stack_mode;xp_window_id sibling;unsigned int depth;xp_colormap_fun *colormap;void *colormap_data;int window_level;xp_window_id transient_for;};
typedef xp_resource_id xp_window_id;
enum xp_window_stack_mode_enum {XP_UNMAPPED = 0x0,XP_MAPPED_ABOVE = 0x1,XP_MAPPED_BELOW = 0x2,};
enum xp_window_state_enum {XP_WINDOW_STATE_OFFSCREEN = 0x1,XP_WINDOW_STATE_OBSCURED = 0x2,};
typedef struct xp_window_state_event_struct xp_window_state_event;
struct xp_window_state_event_struct {xp_window_id id;unsigned int state;};
enum xprt_stat {XPRT_DIED = 0x0,XPRT_MOREREQS = 0x1,XPRT_IDLE = 0x2,};
typedef int (__cdecl *xsltAddCallCallback)(xsltTemplatePtr templ, xmlNodePtr source);
typedef struct _xsltCompMatch xsltCompMatch;
typedef xsltCompMatch *xsltCompMatchPtr;
typedef enum $F1A50F71D77F5C0A44F94F2AEF75FF0E xsltDebugStatusCodes;
typedef enum $84F121FDA2FE4096921DBCF7232175AD xsltDebugTraceCodes;
typedef struct _xsltDecimalFormat xsltDecimalFormat;
typedef xsltDecimalFormat *xsltDecimalFormatPtr;
typedef xmlDocPtr (__cdecl *xsltDocLoaderFunc)(const xmlChar *URI, xmlDictPtr dict, int options, void *ctxt, xsltLoadType type);
typedef struct _xsltDocument xsltDocument;
typedef xsltDocument *xsltDocumentPtr;
typedef void (*xsltDropCallCallback)(void);
typedef struct _xsltElemPreComp xsltElemPreComp;
typedef void (__cdecl *xsltElemPreCompDeallocator)(xsltElemPreCompPtr comp);
typedef xsltElemPreComp *xsltElemPreCompPtr;
typedef void *(__cdecl *xsltExtInitFunction)(xsltTransformContextPtr ctxt, const xmlChar *URI);
typedef void (__cdecl *xsltExtShutdownFunction)(xsltTransformContextPtr ctxt, const xmlChar *URI, void *data);
typedef struct _xsltFormatNumberInfo xsltFormatNumberInfo;
typedef xsltFormatNumberInfo *xsltFormatNumberInfoPtr;
typedef void (__cdecl *xsltHandleDebuggerCallback)(xmlNodePtr cur, xmlNodePtr node, xsltTemplatePtr templ, xsltTransformContextPtr ctxt);
typedef struct _xsltKeyDef xsltKeyDef;
typedef xsltKeyDef *xsltKeyDefPtr;
typedef struct _xsltKeyTable xsltKeyTable;
typedef xsltKeyTable *xsltKeyTablePtr;
typedef enum $118F56CDA9BE3A595E7F6B040CBBDA40 xsltLoadType;
typedef struct _xsltNumberData xsltNumberData;
typedef xsltNumberData *xsltNumberDataPtr;
typedef enum $7DDEDB93E618741445B281E5280D8762 xsltOutputType;
typedef xsltElemPreCompPtr (__cdecl *xsltPreComputeFunction)(xsltStylesheetPtr style, xmlNodePtr inst, xsltTransformFunction function);
typedef struct _xsltRuntimeExtra xsltRuntimeExtra;
typedef xsltRuntimeExtra *xsltRuntimeExtraPtr;
typedef int (__cdecl *xsltSecurityCheck)(xsltSecurityPrefsPtr sec, xsltTransformContextPtr ctxt, const char *value);
typedef enum $86944522B7C7082BFBF7A67C11C6FF4C xsltSecurityOption;
typedef struct _xsltSecurityPrefs xsltSecurityPrefs;
typedef xsltSecurityPrefs *xsltSecurityPrefsPtr;
typedef void (__cdecl *xsltSortFunc)(xsltTransformContextPtr ctxt, xmlNodePtr *sorts, int nbsorts);
typedef struct _xsltStackElem xsltStackElem;
typedef xsltStackElem *xsltStackElemPtr;
typedef void *(__cdecl *xsltStyleExtInitFunction)(xsltStylesheetPtr style, const xmlChar *URI);
typedef void (__cdecl *xsltStyleExtShutdownFunction)(xsltStylesheetPtr style, const xmlChar *URI, void *data);
typedef struct _xsltStylePreComp xsltStylePreComp;
typedef xsltStylePreComp *xsltStylePreCompPtr;
typedef enum $162ABE26F671F2AD93D06A9AC8714FD1 xsltStyleType;
typedef struct _xsltStylesheet xsltStylesheet;
typedef xsltStylesheet *xsltStylesheetPtr;
typedef struct _xsltTemplate xsltTemplate;
typedef xsltTemplate *xsltTemplatePtr;
typedef void (__cdecl *xsltTopLevelFunction)(xsltStylesheetPtr style, xmlNodePtr inst);
typedef struct _xsltTransformCache xsltTransformCache;
typedef xsltTransformCache *xsltTransformCachePtr;
typedef struct _xsltTransformContext xsltTransformContext;
typedef xsltTransformContext *xsltTransformContextPtr;
typedef void (__cdecl *xsltTransformFunction)(xsltTransformContextPtr ctxt, xmlNodePtr node, xmlNodePtr inst, xsltElemPreCompPtr comp);
typedef enum $934315CA77800E2DB42B327F9601CA42 xsltTransformState;
struct xsockbuf {u_int32_t sb_cc;u_int32_t sb_hiwat;u_int32_t sb_mbcnt;u_int32_t sb_mbmax;int32_t sb_lowat;__int16 sb_flags;__int16 sb_timeo;};
struct xsocket {u_int32_t xso_len;u_int32_t xso_so;__int16 so_type;__int16 so_options;__int16 so_linger;__int16 so_state;u_int32_t so_pcb;int xso_protocol;int xso_family;__int16 so_qlen;__int16 so_incqlen;__int16 so_qlimit;__int16 so_timeo;u_short so_error;pid_t so_pgid;u_int32_t so_oobmark;struct xsockbuf so_rcv;struct xsockbuf so_snd;uid_t so_uid;};
struct xsocket64 {u_int32_t xso_len;u_int64_t xso_so;__int16 so_type;__int16 so_options;__int16 so_linger;__int16 so_state;u_int64_t so_pcb;int xso_protocol;int xso_family;__int16 so_qlen;__int16 so_incqlen;__int16 so_qlimit;__int16 so_timeo;u_short so_error;pid_t so_pgid;u_int32_t so_oobmark;struct xsockbuf so_rcv;struct xsockbuf so_snd;uid_t so_uid;};
struct xsw_usage {u_int64_t xsu_total;u_int64_t xsu_avail;u_int64_t xsu_used;u_int32_t xsu_pagesize;boolean_t xsu_encrypted;};
struct xtcpcb {u_int32_t xt_len;struct inpcb xt_inp;struct tcpcb xt_tp;struct xsocket xt_socket;u_quad_t xt_alignment_hack;};
struct xtcpcb64 {u_int32_t xt_len;struct xinpcb64 xt_inpcb;u_int64_t t_segq;int t_dupacks;int t_timer[4];int t_state;u_int t_flags;int t_force;tcp_seq snd_una;tcp_seq snd_max;tcp_seq snd_nxt;tcp_seq snd_up;tcp_seq snd_wl1;tcp_seq snd_wl2;tcp_seq iss;tcp_seq irs;tcp_seq rcv_nxt;tcp_seq rcv_adv;u_int32_t rcv_wnd;tcp_seq rcv_up;u_int32_t snd_wnd;u_int32_t snd_cwnd;u_int32_t snd_ssthresh;u_int t_maxopd;u_int32_t t_rcvtime;u_int32_t t_starttime;int t_rtttime;tcp_seq t_rtseq;int t_rxtcur;u_int t_maxseg;int t_srtt;int t_rttvar;int t_rxtshift;u_int t_rttmin;u_int32_t t_rttupdated;u_int32_t max_sndwnd;int t_softerror;char t_oobflags;char t_iobc;u_char snd_scale;u_char rcv_scale;u_char request_r_scale;u_char requested_s_scale;u_int32_t ts_recent;u_int32_t ts_recent_age;tcp_seq last_ack_sent;tcp_cc cc_send;tcp_cc cc_recv;tcp_seq snd_recover;u_int32_t snd_cwnd_prev;u_int32_t snd_ssthresh_prev;u_int32_t t_badrxtwin;u_quad_t xt_alignment_hack;};
struct xucred {u_int cr_version;uid_t cr_uid;__int16 cr_ngroups;gid_t cr_groups[16];};
struct xunpgen {u_int32_t xug_len;u_int xug_count;unp_gen_t xug_gen;so_gen_t xug_sogen;};
struct ypall_callback {int (__cdecl *foreach)(unsigned __int64, char *, int, char *, int, void *);char *data;};
struct ypbind_binding {char ypbind_binding_addr[4];char ypbind_binding_port[2];};
struct ypbind_resp {ypbind_resptype ypbind_status;union ypbind_resp::$CD49527FE086EB7F6D0E69C2C3AD50AC ypbind_resp_u;};
union ypbind_resp::$CD49527FE086EB7F6D0E69C2C3AD50AC {u_int ypbind_error;ypbind_binding ypbind_bindinfo;};
enum ypbind_resptype {YPBIND_SUCC_VAL = 0x1,YPBIND_FAIL_VAL = 0x2,};
struct ypbind_setdom {domainname ypsetdom_domain;ypbind_binding ypsetdom_binding;u_int ypsetdom_vers;};
struct ypmap_parms {domainname domain;mapname map;u_int ordernum;peername peer;};
struct ypmaplist {mapname map;struct ypmaplist *next;};
struct yppasswd {char *oldpass;x_passwd newpw;};
enum yppush_status {YPPUSH_SUCC = 0x1,YPPUSH_AGE = 0x2,YPPUSH_NOMAP = 0xFFFFFFFF,YPPUSH_NODOM = 0xFFFFFFFE,YPPUSH_RSRC = 0xFFFFFFFD,YPPUSH_RPC = 0xFFFFFFFC,YPPUSH_MADDR = 0xFFFFFFFB,YPPUSH_YPERR = 0xFFFFFFFA,YPPUSH_BADARGS = 0xFFFFFFF9,YPPUSH_DBM = 0xFFFFFFF8,YPPUSH_FILE = 0xFFFFFFF7,YPPUSH_SKEW = 0xFFFFFFF6,YPPUSH_CLEAR = 0xFFFFFFF5,YPPUSH_FORCE = 0xFFFFFFF4,YPPUSH_XFRERR = 0xFFFFFFF3,YPPUSH_REFUSED = 0xFFFFFFF2,};
struct yppushresp_xfr {u_int transid;yppush_status status;};
struct ypreq_key {domainname domain;mapname map;keydat key;};
struct ypreq_nokey {domainname domain;mapname map;};
struct ypreq_xfr {ypmap_parms map_parms;u_int transid;u_int prog;u_int port;};
enum ypreqtype {YPREQ_KEY = 0x1,YPREQ_NOKEY = 0x2,YPREQ_MAP_PARMS = 0x3,};
struct yprequest {ypreqtype yp_reqtype;union yprequest::$6FDF785020AAFE35EF4D4B0B11050AAA yprequest_u;};
union yprequest::$6FDF785020AAFE35EF4D4B0B11050AAA {ypreq_key yp_req_keytype;ypreq_nokey yp_req_nokeytype;ypmap_parms yp_req_map_parmstype;};
struct ypresp_all {int more;union ypresp_all::$438EB5C0F713AEE99C9EADC1C626DC0A ypresp_all_u;};
union ypresp_all::$438EB5C0F713AEE99C9EADC1C626DC0A {ypresp_key_val val;};
struct ypresp_key_val {ypstat stat;keydat key;valdat val;};
struct ypresp_maplist {ypstat stat;ypmaplist *maps;};
struct ypresp_master {ypstat stat;peername peer;};
struct ypresp_order {ypstat stat;u_int ordernum;};
struct ypresp_val {ypstat stat;valdat val;};
struct ypresp_xfr {u_int transid;ypxfrstat xfrstat;};
struct ypresponse {ypresptype yp_resptype;union ypresponse::$6D34D2F64A3B31777223FA377120CA09 ypresponse_u;};
union ypresponse::$6D34D2F64A3B31777223FA377120CA09 {ypresp_val yp_resp_valtype;ypresp_key_val yp_resp_key_valtype;ypmap_parms yp_resp_map_parmstype;};
enum ypresptype {YPRESP_VAL = 0x1,YPRESP_KEY_VAL = 0x2,YPRESP_MAP_PARMS = 0x3,};
enum ypstat {YP_TRUE = 0x1,YP_NOMORE = 0x2,YP_FALSE = 0x0,YP_NOMAP = 0xFFFFFFFF,YP_NODOM = 0xFFFFFFFE,YP_NOKEY = 0xFFFFFFFD,YP_BADOP = 0xFFFFFFFC,YP_BADDB = 0xFFFFFFFB,YP_YPERR = 0xFFFFFFFA,YP_BADARGS = 0xFFFFFFF9,YP_VERS = 0xFFFFFFF8,};
enum ypxfrstat {YPXFR_SUCC = 0x1,YPXFR_AGE = 0x2,YPXFR_NOMAP = 0xFFFFFFFF,YPXFR_NODOM = 0xFFFFFFFE,YPXFR_RSRC = 0xFFFFFFFD,YPXFR_RPC = 0xFFFFFFFC,YPXFR_MADDR = 0xFFFFFFFB,YPXFR_YPERR = 0xFFFFFFFA,YPXFR_BADARGS = 0xFFFFFFF9,YPXFR_DBM = 0xFFFFFFF8,YPXFR_FILE = 0xFFFFFFF7,YPXFR_SKEW = 0xFFFFFFF6,YPXFR_CLEAR = 0xFFFFFFF5,YPXFR_FORCE = 0xFFFFFFF4,YPXFR_XFRERR = 0xFFFFFFF3,YPXFR_REFUSED = 0xFFFFFFF2,};
typedef struct z_stream_s z_stream;
struct z_stream_s {Bytef *next_in;uInt avail_in;uLong total_in;Bytef *next_out;uInt avail_out;uLong total_out;char *msg;struct internal_state *state;alloc_func zalloc;free_func zfree;voidpf opaque;int data_type;uLong adler;uLong reserved;};
typedef z_stream *z_streamp;
struct zone_info {integer_t zi_count;vm_size_t zi_cur_size;vm_size_t zi_max_size;vm_size_t zi_elem_size;vm_size_t zi_alloc_size;integer_t zi_pageable;integer_t zi_sleepable;integer_t zi_exhaustible;integer_t zi_collectable;};
typedef zone_info_t *zone_info_array_t;
typedef struct zone_info zone_info_t;
struct zone_name {char zn_name[80];};
typedef zone_name_t *zone_name_array_t;
typedef struct zone_name zone_name_t;

MACRO_ABDAY ABDAY_1;
MACRO_ABDAY ABDAY_2;
MACRO_ABDAY ABDAY_3;
MACRO_ABDAY ABDAY_4;
MACRO_ABDAY ABDAY_5;
MACRO_ABDAY ABDAY_6;
MACRO_ABDAY ABDAY_7;
MACRO_ABMON ABMON_1;
MACRO_ABMON ABMON_10;
MACRO_ABMON ABMON_11;
MACRO_ABMON ABMON_12;
MACRO_ABMON ABMON_2;
MACRO_ABMON ABMON_3;
MACRO_ABMON ABMON_4;
MACRO_ABMON ABMON_5;
MACRO_ABMON ABMON_6;
MACRO_ABMON ABMON_7;
MACRO_ABMON ABMON_8;
MACRO_ABMON ABMON_9;
MACRO_ABORT ABORT;
MACRO_ABORT_CHAR ABORT_CHAR;
MACRO_ABSENT ABSENT_BOOLEAN;
MACRO_ABSENT ABSENT_NUMERIC;
MACRO_ABSENT ABSENT_STRING;
MACRO_ACCESSLEVEL ACCESSLEVEL;
MACRO_ACCESSLEVEL ACCESSMATCH;
MACRO_ACCESSPREFIX ACCESSMODEL;
MACRO_ACCESSNOTIFY ACCESSNOTIFY;
MACRO_ACCESSPERMS ACCESSPERMS;
MACRO_ACCESSPREFIX ACCESSPREFIX;
MACRO_ACCESSREAD ACCESSREAD;
MACRO_ACCESSSTATUS ACCESSSTATUS;
MACRO_ACCESSNOTIFY ACCESSSTORAGE;
MACRO_ACCESSWRITE ACCESSWRITE;
MACRO_ACCESSX ACCESSX_MAX_DESCRIPTORS;
MACRO_ACCESSX ACCESSX_MAX_TABLESIZE;
MACRO_ACCESS ACCESS_CREATE;
MACRO_ACCESS ACCESS_NOACCESS;
MACRO_ACCESS ACCESS_NOTIFY;
MACRO_ACCESS ACCESS_READONLY;
MACRO_ACCESS ACCESS_READWRITE;
MACRO_ACCESS ACCESS_WRITEONLY;
MACRO_ACCOUNTING ACCOUNTING;
MACRO_DATA ACK;
$2B249EAD8B9396505612852840E44E36 ACL_ADD_FILE;
$2B249EAD8B9396505612852840E44E36 ACL_ADD_SUBDIRECTORY;
$2B249EAD8B9396505612852840E44E36 ACL_APPEND_DATA;
$2B249EAD8B9396505612852840E44E36 ACL_CHANGE_OWNER;
$2B249EAD8B9396505612852840E44E36 ACL_DELETE;
$2B249EAD8B9396505612852840E44E36 ACL_DELETE_CHILD;
$9D44ACAEA63D9A866E10323356541372 ACL_ENTRY_DIRECTORY_INHERIT;
$9D44ACAEA63D9A866E10323356541372 ACL_ENTRY_FILE_INHERIT;
$9D44ACAEA63D9A866E10323356541372 ACL_ENTRY_INHERITED;
$9D44ACAEA63D9A866E10323356541372 ACL_ENTRY_LIMIT_INHERIT;
$9D44ACAEA63D9A866E10323356541372 ACL_ENTRY_ONLY_INHERIT;
$2B249EAD8B9396505612852840E44E36 ACL_EXECUTE;
$F332E1DED775B0D62777DB33DD18F524 ACL_EXTENDED_ALLOW;
$F332E1DED775B0D62777DB33DD18F524 ACL_EXTENDED_DENY;
$97920DDAD3C80055B2939F984919E3D2 ACL_FIRST_ENTRY;
$9D44ACAEA63D9A866E10323356541372 ACL_FLAG_DEFER_INHERIT;
$9D44ACAEA63D9A866E10323356541372 ACL_FLAG_NO_INHERIT;
$97920DDAD3C80055B2939F984919E3D2 ACL_LAST_ENTRY;
$2B249EAD8B9396505612852840E44E36 ACL_LIST_DIRECTORY;
MACRO_ACL ACL_MAX_ENTRIES;
$97920DDAD3C80055B2939F984919E3D2 ACL_NEXT_ENTRY;
$2B249EAD8B9396505612852840E44E36 ACL_READ_ATTRIBUTES;
$2B249EAD8B9396505612852840E44E36 ACL_READ_DATA;
$2B249EAD8B9396505612852840E44E36 ACL_READ_EXTATTRIBUTES;
$2B249EAD8B9396505612852840E44E36 ACL_READ_SECURITY;
$2B249EAD8B9396505612852840E44E36 ACL_SEARCH;
$F8A097482C6B24D8CA3C16823450667A ACL_TYPE_ACCESS;
$F8A097482C6B24D8CA3C16823450667A ACL_TYPE_AFS;
$F8A097482C6B24D8CA3C16823450667A ACL_TYPE_CODA;
$F8A097482C6B24D8CA3C16823450667A ACL_TYPE_DEFAULT;
$F8A097482C6B24D8CA3C16823450667A ACL_TYPE_EXTENDED;
$F8A097482C6B24D8CA3C16823450667A ACL_TYPE_NTFS;
$F8A097482C6B24D8CA3C16823450667A ACL_TYPE_NWFS;
MACRO_ACL ACL_UNDEFINED_ID;
$F332E1DED775B0D62777DB33DD18F524 ACL_UNDEFINED_TAG;
$2B249EAD8B9396505612852840E44E36 ACL_WRITE_ATTRIBUTES;
$2B249EAD8B9396505612852840E44E36 ACL_WRITE_DATA;
$2B249EAD8B9396505612852840E44E36 ACL_WRITE_EXTATTRIBUTES;
$2B249EAD8B9396505612852840E44E36 ACL_WRITE_SECURITY;
MACRO_AFORK ACOMPAT;
MACRO_AFORK ACORE;
MACRO_RESERVE1 ACTION;
MACRO_AC_APPLE AC_APPLE_UNIVERSAL_BUILD;
MACRO_AC AC_DENY;
MACRO_AC AC_ERROR;
MACRO_AC AC_PERMIT;
MACRO_ADDRTYPE ADDRTYPE_ADDRPORT;
MACRO_ADDRTYPE ADDRTYPE_CHAOS;
MACRO_ADDRTYPE ADDRTYPE_DDP;
MACRO_ADDRTYPE ADDRTYPE_INET;
MACRO_ADDRTYPE ADDRTYPE_INET6;
MACRO_ADDRTYPE ADDRTYPE_IPPORT;
MACRO_ADDRTYPE ADDRTYPE_ISO;
MACRO_ADDRTYPE ADDRTYPE_XNS;
MACRO_AD AD_TYPE_EXTERNAL;
MACRO_AD AD_TYPE_FIELD_TYPE_MASK;
MACRO_AD_TYPE AD_TYPE_INTERNAL_MASK;
MACRO_AD AD_TYPE_REGISTERED;
MACRO_AD AD_TYPE_RESERVED;
MACRO_AES AES_BLOCK_SIZE;
MACRO_AES AES_DECRYPT;
MACRO_AES AES_ENCRYPT;
MACRO_AES AES_MAXNR;
MACRO_AFORK AFORK;
MACRO_AF_UNSPEC AF_APPLETALK;
MACRO_AF_UNSPEC AF_CCITT;
MACRO_AF_UNSPEC AF_CHAOS;
MACRO_AF_COIP AF_CNT;
MACRO_AF_COIP AF_COIP;
MACRO_AF_UNSPEC AF_DATAKIT;
MACRO_AF_UNSPEC AF_DECnet;
MACRO_AF_UNSPEC AF_DLI;
MACRO_AF_NDRV AF_E164;
MACRO_AF_UNSPEC AF_ECMA;
MACRO_AF_UNSPEC AF_HYLINK;
MACRO_AF_RESERVED AF_IEEE80211;
MACRO_AF_UNSPEC AF_IMPLINK;
MACRO_AF_UNSPEC AF_INET;
MACRO_AF_INET6 AF_INET6;
MACRO_AF_IPX AF_IPX;
MACRO_AF_NDRV AF_ISDN;
MACRO_AF_UNSPEC AF_ISO;
MACRO_AF_UNSPEC AF_LAT;
MACRO_AF_UNSPEC AF_LINK;
MACRO_AF_UNSPEC AF_LOCAL;
MACRO_AF_RESERVED AF_MAX;
MACRO_AF_INET6 AF_NATM;
MACRO_AF_NDRV AF_NDRV;
MACRO_AF_INET6 AF_NETBIOS;
MACRO_AF_UNSPEC AF_NS;
MACRO_AF_UNSPEC AF_OSI;
MACRO_AF_INET6 AF_PPP;
MACRO_AF_UNSPEC AF_PUP;
MACRO_AF_RESERVED AF_RESERVED_36;
MACRO_AF_UNSPEC AF_ROUTE;
MACRO_AF_IPX AF_SIP;
MACRO_AF_UNSPEC AF_SNA;
MACRO_AF_INET6 AF_SYSTEM;
MACRO_AF AF_SYS_CONTROL;
MACRO_AF_UNSPEC AF_UNIX;
MACRO_AF_UNSPEC AF_UNSPEC;
MACRO_AFORK AHZ;
MACRO_AIO AIO_ALLDONE;
MACRO_AIO AIO_CANCELED;
MACRO_AIO_LISTIO AIO_LISTIO_MAX;
MACRO_AIO AIO_NOTCANCELED;
MACRO_AI AI_ADDRCONFIG;
MACRO_AI AI_ALL;
MACRO_AI AI_CANONNAME;
MACRO_AI AI_DEFAULT;
MACRO_AI AI_NUMERICHOST;
MACRO_AI AI_NUMERICSERV;
MACRO_AI AI_PASSIVE;
MACRO_AI AI_V4MAPPED;
MACRO_AI AI_V4MAPPED_CFG;
MACRO_THREAD_NULL ALARM_NULL;
MACRO_ALLDELAY ALLDELAY;
MACRO_PREALLOCATE ALLOCATEALL;
MACRO_PREALLOCATE ALLOCATECONTIG;
MACRO_PREALLOCATE ALLOCATEFROMPEOF;
MACRO_PREALLOCATE ALLOCATEFROMVOL;
MACRO_ALLOCATE ALLOCATE_ANY_INDEX;
MACRO_ALLOCATE ALLOCATE_NEW_INDEX;
MACRO_ALLOCATE ALLOCATE_THIS_INDEX;
MACRO_ALLPERMS ALLPERMS;
MACRO_ALL ALL_MOUSE_EVENTS;
MACRO_ALL_VIFS ALL_VIFS;
MACRO_ALRMTYPE ALRMTYPE;
MACRO_ECHOKE ALTWERASE;
MACRO_ALT ALT_DIGITS;
MACRO_STR AM_STR;
MACRO_ANNOUNCE ANNOUNCE;
MACRO_ANYADDR ANYADDR;
MACRO_ANYP ANYP;
MACRO_ANY ANY_INTEGER_INDEX;
MACRO_ANY ANY_OID_INDEX;
MACRO_ANY ANY_STRING_INDEX;
MACRO_AO AO;
MACRO_APPLE APPLE_IF_FAM_BOND;
MACRO_APPLE APPLE_IF_FAM_DISC;
MACRO_APPLE APPLE_IF_FAM_ETHERNET;
MACRO_APPLE APPLE_IF_FAM_FAITH;
MACRO_APPLE APPLE_IF_FAM_FIREWIRE;
MACRO_APPLE APPLE_IF_FAM_GIF;
MACRO_APPLE APPLE_IF_FAM_LOOPBACK;
MACRO_APPLE APPLE_IF_FAM_MDECAP;
MACRO_APPLE APPLE_IF_FAM_PPP;
MACRO_APPLE APPLE_IF_FAM_PVC;
MACRO_APPLE APPLE_IF_FAM_SLIP;
MACRO_APPLE APPLE_IF_FAM_STF;
MACRO_APPLE APPLE_IF_FAM_TUN;
MACRO_APPLE APPLE_IF_FAM_VLAN;
MACRO_AP AP_OPTS_MUTUAL_REQUIRED;
MACRO_AP AP_OPTS_RESERVED;
MACRO_AP AP_OPTS_USE_SESSION_KEY;
MACRO_AP AP_OPTS_USE_SUBKEY;
MACRO_AP AP_OPTS_WIRE_MASK;
MACRO_AQ AQ_BUFSZ;
MACRO_AQ AQ_HIWATER;
MACRO_AQ AQ_LOWATER;
MACRO_AQ AQ_MAXBUFSZ;
MACRO_AQ AQ_MAXHIGH;
MACRO_ARCDENSITY ARCDENSITY;
MACRO_AREGTYPE AREGTYPE;
MACRO_ARG ARG_MAX;
MACRO_ARPHRD ARPHRD_ETHER;
MACRO_ARPHRD ARPHRD_FRELAY;
MACRO_ARPHRD ARPHRD_IEEE1394;
MACRO_ARPHRD ARPHRD_IEEE1394_EUI64;
MACRO_ARPHRD ARPHRD_IEEE802;
MACRO_ARPOP ARPOP_INVREPLY;
MACRO_ARPOP ARPOP_INVREQUEST;
MACRO_ARPOP ARPOP_REPLY;
MACRO_ARPOP ARPOP_REQUEST;
MACRO_ARPOP ARPOP_REVREPLY;
MACRO_ARPOP ARPOP_REVREQUEST;
MACRO_ARP ARP_SCAN_FOUR_ARGUMENTS;
MACRO_ASL ASL_FILTER_MASK_ALERT;
MACRO_ASL ASL_FILTER_MASK_CRIT;
MACRO_ASL ASL_FILTER_MASK_DEBUG;
MACRO_ASL ASL_FILTER_MASK_EMERG;
MACRO_ASL ASL_FILTER_MASK_ERR;
MACRO_ASL ASL_FILTER_MASK_INFO;
MACRO_ASL ASL_FILTER_MASK_NOTICE;
MACRO_ASL ASL_FILTER_MASK_WARNING;
MACRO_ASL ASL_LEVEL_ALERT;
MACRO_ASL ASL_LEVEL_CRIT;
MACRO_ASL ASL_LEVEL_DEBUG;
MACRO_ASL ASL_LEVEL_EMERG;
MACRO_ASL ASL_LEVEL_ERR;
MACRO_ASL ASL_LEVEL_INFO;
MACRO_ASL ASL_LEVEL_NOTICE;
MACRO_ASL ASL_LEVEL_WARNING;
MACRO_ASL ASL_OPT_NO_DELAY;
MACRO_ASL ASL_OPT_NO_REMOTE;
MACRO_ASL ASL_OPT_STDERR;
MACRO_ASL ASL_QUERY_OP_CASEFOLD;
MACRO_ASL ASL_QUERY_OP_EQUAL;
MACRO_ASL ASL_QUERY_OP_GREATER;
MACRO_ASL ASL_QUERY_OP_GREATER_EQUAL;
MACRO_ASL ASL_QUERY_OP_LESS;
MACRO_ASL ASL_QUERY_OP_LESS_EQUAL;
MACRO_ASL ASL_QUERY_OP_NOT_EQUAL;
MACRO_ASL ASL_QUERY_OP_NUMERIC;
MACRO_ASL ASL_QUERY_OP_PREFIX;
MACRO_ASL ASL_QUERY_OP_REGEX;
MACRO_ASL ASL_QUERY_OP_SUBSTRING;
MACRO_ASL ASL_QUERY_OP_SUFFIX;
MACRO_ASL ASL_QUERY_OP_TRUE;
MACRO_ASL ASL_TYPE_MSG;
MACRO_ASL ASL_TYPE_QUERY;
MACRO_ASN1_F ASN1_AFLG_BROKEN;
MACRO_ASN1_F ASN1_AFLG_ENCODING;
MACRO_ASN1_F ASN1_AFLG_REFCOUNT;
MACRO_ASN1 ASN1_BAD_FORMAT;
MACRO_ASN1 ASN1_BAD_GMTIME;
MACRO_ASN1 ASN1_BAD_ID;
MACRO_ASN1 ASN1_BAD_LENGTH;
MACRO_ASN1 ASN1_BAD_TIMEFORMAT;
MACRO_ASN1_F ASN1_F_A2D_ASN1_OBJECT;
MACRO_ASN1_F ASN1_F_A2I_ASN1_ENUMERATED;
MACRO_ASN1_F ASN1_F_A2I_ASN1_INTEGER;
MACRO_ASN1_F ASN1_F_A2I_ASN1_STRING;
MACRO_ASN1_F ASN1_F_APPEND_EXP;
MACRO_ASN1_F ASN1_F_ASN1_BIT_STRING_SET_BIT;
MACRO_ASN1_F ASN1_F_ASN1_CB;
MACRO_ASN1_F ASN1_F_ASN1_CHECK_TLEN;
MACRO_ASN1_F ASN1_F_ASN1_COLLATE_PRIMITIVE;
MACRO_ASN1_F ASN1_F_ASN1_COLLECT;
MACRO_ASN1_F ASN1_F_ASN1_D2I_EX_PRIMITIVE;
MACRO_ASN1_F ASN1_F_ASN1_D2I_FP;
MACRO_ASN1_F ASN1_F_ASN1_D2I_READ_BIO;
MACRO_ASN1_F ASN1_F_ASN1_DIGEST;
MACRO_ASN1_F ASN1_F_ASN1_DO_ADB;
MACRO_ASN1_F ASN1_F_ASN1_DUP;
MACRO_ASN1_F ASN1_F_ASN1_ENUMERATED_SET;
MACRO_ASN1_F ASN1_F_ASN1_ENUMERATED_TO_BN;
MACRO_ASN1_F ASN1_F_ASN1_EX_C2I;
MACRO_ASN1_F ASN1_F_ASN1_FIND_END;
MACRO_ASN1_F ASN1_F_ASN1_GENERALIZEDTIME_SET;
MACRO_ASN1_F ASN1_F_ASN1_GENERATE_V3;
MACRO_ASN1_F ASN1_F_ASN1_GET_OBJECT;
MACRO_ASN1_F ASN1_F_ASN1_HEADER_NEW;
MACRO_ASN1_F ASN1_F_ASN1_I2D_BIO;
MACRO_ASN1_F ASN1_F_ASN1_I2D_FP;
MACRO_ASN1_F ASN1_F_ASN1_INTEGER_SET;
MACRO_ASN1_F ASN1_F_ASN1_INTEGER_TO_BN;
MACRO_ASN1_F ASN1_F_ASN1_ITEM_D2I_FP;
MACRO_ASN1_F ASN1_F_ASN1_ITEM_DUP;
MACRO_ASN1_F ASN1_F_ASN1_ITEM_EX_COMBINE_NEW;
MACRO_ASN1_F ASN1_F_ASN1_ITEM_EX_D2I;
MACRO_ASN1_F ASN1_F_ASN1_ITEM_I2D_BIO;
MACRO_ASN1_F ASN1_F_ASN1_ITEM_I2D_FP;
MACRO_ASN1_F ASN1_F_ASN1_ITEM_PACK;
MACRO_ASN1_F ASN1_F_ASN1_ITEM_SIGN;
MACRO_ASN1_F ASN1_F_ASN1_ITEM_UNPACK;
MACRO_ASN1_F ASN1_F_ASN1_ITEM_VERIFY;
MACRO_ASN1_F ASN1_F_ASN1_MBSTRING_NCOPY;
MACRO_ASN1_F ASN1_F_ASN1_OBJECT_NEW;
MACRO_ASN1_F ASN1_F_ASN1_OUTPUT_DATA;
MACRO_ASN1_F ASN1_F_ASN1_PACK_STRING;
MACRO_ASN1_F ASN1_F_ASN1_PCTX_NEW;
MACRO_ASN1_F ASN1_F_ASN1_PKCS5_PBE_SET;
MACRO_ASN1_F ASN1_F_ASN1_SEQ_PACK;
MACRO_ASN1_F ASN1_F_ASN1_SEQ_UNPACK;
MACRO_ASN1_F ASN1_F_ASN1_SIGN;
MACRO_ASN1_F ASN1_F_ASN1_STR2TYPE;
MACRO_ASN1_F ASN1_F_ASN1_STRING_SET;
MACRO_ASN1_F ASN1_F_ASN1_STRING_TABLE_ADD;
MACRO_ASN1_F ASN1_F_ASN1_STRING_TYPE_NEW;
MACRO_ASN1_F ASN1_F_ASN1_TEMPLATE_EX_D2I;
MACRO_ASN1_F ASN1_F_ASN1_TEMPLATE_NEW;
MACRO_ASN1_F ASN1_F_ASN1_TEMPLATE_NOEXP_D2I;
MACRO_ASN1_F ASN1_F_ASN1_TIME_SET;
MACRO_ASN1_F ASN1_F_ASN1_TYPE_GET_INT_OCTETSTRING;
MACRO_ASN1_F ASN1_F_ASN1_TYPE_GET_OCTETSTRING;
MACRO_ASN1_F ASN1_F_ASN1_UNPACK_STRING;
MACRO_ASN1_F ASN1_F_ASN1_UTCTIME_SET;
MACRO_ASN1_F ASN1_F_ASN1_VERIFY;
MACRO_ASN1_F ASN1_F_B64_READ_ASN1;
MACRO_ASN1_F ASN1_F_B64_WRITE_ASN1;
MACRO_ASN1_F ASN1_F_BITSTR_CB;
MACRO_ASN1_F ASN1_F_BN_TO_ASN1_ENUMERATED;
MACRO_ASN1_F ASN1_F_BN_TO_ASN1_INTEGER;
MACRO_ASN1_F ASN1_F_C2I_ASN1_BIT_STRING;
MACRO_ASN1_F ASN1_F_C2I_ASN1_INTEGER;
MACRO_ASN1_F ASN1_F_C2I_ASN1_OBJECT;
MACRO_ASN1_F ASN1_F_COLLECT_DATA;
MACRO_ASN1_F ASN1_F_D2I_ASN1_BIT_STRING;
MACRO_ASN1_F ASN1_F_D2I_ASN1_BOOLEAN;
MACRO_ASN1_F ASN1_F_D2I_ASN1_BYTES;
MACRO_ASN1_F ASN1_F_D2I_ASN1_GENERALIZEDTIME;
MACRO_ASN1_F ASN1_F_D2I_ASN1_HEADER;
MACRO_ASN1_F ASN1_F_D2I_ASN1_INTEGER;
MACRO_ASN1_F ASN1_F_D2I_ASN1_OBJECT;
MACRO_ASN1_F ASN1_F_D2I_ASN1_SET;
MACRO_ASN1_F ASN1_F_D2I_ASN1_TYPE_BYTES;
MACRO_ASN1_F ASN1_F_D2I_ASN1_UINTEGER;
MACRO_ASN1_F ASN1_F_D2I_ASN1_UTCTIME;
MACRO_ASN1_F ASN1_F_D2I_NETSCAPE_RSA;
MACRO_ASN1_F ASN1_F_D2I_NETSCAPE_RSA_2;
MACRO_ASN1_F ASN1_F_D2I_PRIVATEKEY;
MACRO_ASN1_F ASN1_F_D2I_PUBLICKEY;
MACRO_ASN1_F ASN1_F_D2I_RSA_NET;
MACRO_ASN1_F ASN1_F_D2I_RSA_NET_2;
MACRO_ASN1_F ASN1_F_D2I_X509;
MACRO_ASN1_F ASN1_F_D2I_X509_CINF;
MACRO_ASN1_F ASN1_F_D2I_X509_PKEY;
MACRO_ASN1_F ASN1_F_I2D_ASN1_SET;
MACRO_ASN1_F ASN1_F_I2D_ASN1_TIME;
MACRO_ASN1_F ASN1_F_I2D_DSA_PUBKEY;
MACRO_ASN1_F ASN1_F_I2D_EC_PUBKEY;
MACRO_ASN1_F ASN1_F_I2D_PRIVATEKEY;
MACRO_ASN1_F ASN1_F_I2D_PUBLICKEY;
MACRO_ASN1_F ASN1_F_I2D_RSA_NET;
MACRO_ASN1_F ASN1_F_I2D_RSA_PUBKEY;
MACRO_ASN1_F ASN1_F_LONG_C2I;
MACRO_ASN1_F ASN1_F_OID_MODULE_INIT;
MACRO_ASN1_F ASN1_F_PARSE_TAGGING;
MACRO_ASN1_F ASN1_F_PKCS5_PBE2_SET;
MACRO_ASN1_F ASN1_F_PKCS5_PBE_SET;
MACRO_ASN1_F ASN1_F_SMIME_READ_ASN1;
MACRO_ASN1_F ASN1_F_SMIME_TEXT;
MACRO_ASN1_F ASN1_F_X509_CINF_NEW;
MACRO_ASN1_F ASN1_F_X509_CRL_ADD0_REVOKED;
MACRO_ASN1_F ASN1_F_X509_INFO_NEW;
MACRO_ASN1_F ASN1_F_X509_NAME_ENCODE;
MACRO_ASN1_F ASN1_F_X509_NAME_EX_D2I;
MACRO_ASN1_F ASN1_F_X509_NAME_EX_NEW;
MACRO_ASN1_F ASN1_F_X509_NEW;
MACRO_ASN1_F ASN1_F_X509_PKEY_NEW;
MACRO_ASN1_F ASN1_ITYPE_CHOICE;
MACRO_ASN1_F ASN1_ITYPE_COMPAT;
MACRO_ASN1_F ASN1_ITYPE_EXTERN;
MACRO_ASN1_F ASN1_ITYPE_MSTRING;
MACRO_ASN1_F ASN1_ITYPE_NDEF_SEQUENCE;
MACRO_ASN1_F ASN1_ITYPE_PRIMITIVE;
MACRO_ASN1_F ASN1_ITYPE_SEQUENCE;
MACRO_ASN1_OBJECT ASN1_LONG_UNDEF;
MACRO_ASN1 ASN1_MISMATCH_INDEF;
MACRO_ASN1 ASN1_MISPLACED_FIELD;
MACRO_ASN1 ASN1_MISSING_EOC;
MACRO_ASN1 ASN1_MISSING_FIELD;
MACRO_ASN1_OBJECT ASN1_OBJECT_FLAG_CRITICAL;
MACRO_ASN1_OBJECT ASN1_OBJECT_FLAG_DYNAMIC;
MACRO_ASN1_OBJECT ASN1_OBJECT_FLAG_DYNAMIC_DATA;
MACRO_ASN1_OBJECT ASN1_OBJECT_FLAG_DYNAMIC_STRINGS;
MACRO_ASN1_F ASN1_OP_D2I_POST;
MACRO_ASN1_F ASN1_OP_D2I_PRE;
MACRO_ASN1_F ASN1_OP_FREE_POST;
MACRO_ASN1_F ASN1_OP_FREE_PRE;
MACRO_ASN1_F ASN1_OP_I2D_POST;
MACRO_ASN1_F ASN1_OP_I2D_PRE;
MACRO_ASN1_F ASN1_OP_NEW_POST;
MACRO_ASN1_F ASN1_OP_NEW_PRE;
MACRO_ASN1 ASN1_OVERFLOW;
MACRO_ASN1 ASN1_OVERRUN;
MACRO_ASN1 ASN1_PARSE_ERROR;
MACRO_ASN1_F ASN1_R_ADDING_OBJECT;
MACRO_ASN1_F ASN1_R_ASN1_PARSE_ERROR;
MACRO_ASN1_F ASN1_R_ASN1_SIG_PARSE_ERROR;
MACRO_ASN1_F ASN1_R_AUX_ERROR;
MACRO_ASN1_F ASN1_R_BAD_CLASS;
MACRO_ASN1_F ASN1_R_BAD_OBJECT_HEADER;
MACRO_ASN1_F ASN1_R_BAD_PASSWORD_READ;
MACRO_ASN1_F ASN1_R_BAD_TAG;
MACRO_ASN1_F ASN1_R_BMPSTRING_IS_WRONG_LENGTH;
MACRO_ASN1_F ASN1_R_BN_LIB;
MACRO_ASN1_F ASN1_R_BOOLEAN_IS_WRONG_LENGTH;
MACRO_ASN1_F ASN1_R_BUFFER_TOO_SMALL;
MACRO_ASN1_F ASN1_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER;
MACRO_ASN1_F ASN1_R_DATA_IS_WRONG;
MACRO_ASN1_F ASN1_R_DECODE_ERROR;
MACRO_ASN1_F ASN1_R_DECODING_ERROR;
MACRO_ASN1_F ASN1_R_DEPTH_EXCEEDED;
MACRO_ASN1_F ASN1_R_ENCODE_ERROR;
MACRO_ASN1_F ASN1_R_ERROR_GETTING_TIME;
MACRO_ASN1_F ASN1_R_ERROR_LOADING_SECTION;
MACRO_ASN1_F ASN1_R_ERROR_PARSING_SET_ELEMENT;
MACRO_ASN1_F ASN1_R_ERROR_SETTING_CIPHER_PARAMS;
MACRO_ASN1_F ASN1_R_EXPECTING_AN_INTEGER;
MACRO_ASN1_F ASN1_R_EXPECTING_AN_OBJECT;
MACRO_ASN1_F ASN1_R_EXPECTING_A_BOOLEAN;
MACRO_ASN1_F ASN1_R_EXPECTING_A_TIME;
MACRO_ASN1_F ASN1_R_EXPLICIT_LENGTH_MISMATCH;
MACRO_ASN1_F ASN1_R_EXPLICIT_TAG_NOT_CONSTRUCTED;
MACRO_ASN1_F ASN1_R_FIELD_MISSING;
MACRO_ASN1_F ASN1_R_FIRST_NUM_TOO_LARGE;
MACRO_ASN1_F ASN1_R_HEADER_TOO_LONG;
MACRO_ASN1_F ASN1_R_ILLEGAL_BITSTRING_FORMAT;
MACRO_ASN1_F ASN1_R_ILLEGAL_BOOLEAN;
MACRO_ASN1_F ASN1_R_ILLEGAL_CHARACTERS;
MACRO_ASN1_F ASN1_R_ILLEGAL_FORMAT;
MACRO_ASN1_F ASN1_R_ILLEGAL_HEX;
MACRO_ASN1_F ASN1_R_ILLEGAL_IMPLICIT_TAG;
MACRO_ASN1_F ASN1_R_ILLEGAL_INTEGER;
MACRO_ASN1_F ASN1_R_ILLEGAL_NESTED_TAGGING;
MACRO_ASN1_F ASN1_R_ILLEGAL_NULL;
MACRO_ASN1_F ASN1_R_ILLEGAL_NULL_VALUE;
MACRO_ASN1_F ASN1_R_ILLEGAL_OBJECT;
MACRO_ASN1_F ASN1_R_ILLEGAL_OPTIONAL_ANY;
MACRO_ASN1_F ASN1_R_ILLEGAL_OPTIONS_ON_ITEM_TEMPLATE;
MACRO_ASN1_F ASN1_R_ILLEGAL_TAGGED_ANY;
MACRO_ASN1_F ASN1_R_ILLEGAL_TIME_VALUE;
MACRO_ASN1_F ASN1_R_INTEGER_NOT_ASCII_FORMAT;
MACRO_ASN1_F ASN1_R_INTEGER_TOO_LARGE_FOR_LONG;
MACRO_ASN1_F ASN1_R_INVALID_BMPSTRING_LENGTH;
MACRO_ASN1_F ASN1_R_INVALID_DIGIT;
MACRO_ASN1_F ASN1_R_INVALID_MIME_TYPE;
MACRO_ASN1_F ASN1_R_INVALID_MODIFIER;
MACRO_ASN1_F ASN1_R_INVALID_NUMBER;
MACRO_ASN1_F ASN1_R_INVALID_OBJECT_ENCODING;
MACRO_ASN1_F ASN1_R_INVALID_SEPARATOR;
MACRO_ASN1_F ASN1_R_INVALID_TIME_FORMAT;
MACRO_ASN1_F ASN1_R_INVALID_UNIVERSALSTRING_LENGTH;
MACRO_ASN1_F ASN1_R_INVALID_UTF8STRING;
MACRO_ASN1_F ASN1_R_IV_TOO_LARGE;
MACRO_ASN1_F ASN1_R_LENGTH_ERROR;
MACRO_ASN1_F ASN1_R_LIST_ERROR;
MACRO_ASN1_F ASN1_R_MIME_NO_CONTENT_TYPE;
MACRO_ASN1_F ASN1_R_MIME_PARSE_ERROR;
MACRO_ASN1_F ASN1_R_MIME_SIG_PARSE_ERROR;
MACRO_ASN1_F ASN1_R_MISSING_EOC;
MACRO_ASN1_F ASN1_R_MISSING_SECOND_NUMBER;
MACRO_ASN1_F ASN1_R_MISSING_VALUE;
MACRO_ASN1_F ASN1_R_MSTRING_NOT_UNIVERSAL;
MACRO_ASN1_F ASN1_R_MSTRING_WRONG_TAG;
MACRO_ASN1_F ASN1_R_NESTED_ASN1_STRING;
MACRO_ASN1_F ASN1_R_NON_HEX_CHARACTERS;
MACRO_ASN1_F ASN1_R_NOT_ASCII_FORMAT;
MACRO_ASN1_F ASN1_R_NOT_ENOUGH_DATA;
MACRO_ASN1_F ASN1_R_NO_CONTENT_TYPE;
MACRO_ASN1_F ASN1_R_NO_MATCHING_CHOICE_TYPE;
MACRO_ASN1_F ASN1_R_NO_MULTIPART_BODY_FAILURE;
MACRO_ASN1_F ASN1_R_NO_MULTIPART_BOUNDARY;
MACRO_ASN1_F ASN1_R_NO_SIG_CONTENT_TYPE;
MACRO_ASN1_F ASN1_R_NULL_IS_WRONG_LENGTH;
MACRO_ASN1_F ASN1_R_OBJECT_NOT_ASCII_FORMAT;
MACRO_ASN1_F ASN1_R_ODD_NUMBER_OF_CHARS;
MACRO_ASN1_F ASN1_R_PRIVATE_KEY_HEADER_MISSING;
MACRO_ASN1_F ASN1_R_SECOND_NUMBER_TOO_LARGE;
MACRO_ASN1_F ASN1_R_SEQUENCE_LENGTH_MISMATCH;
MACRO_ASN1_F ASN1_R_SEQUENCE_NOT_CONSTRUCTED;
MACRO_ASN1_F ASN1_R_SEQUENCE_OR_SET_NEEDS_CONFIG;
MACRO_ASN1_F ASN1_R_SHORT_LINE;
MACRO_ASN1_F ASN1_R_SIG_INVALID_MIME_TYPE;
MACRO_ASN1_F ASN1_R_STREAMING_NOT_SUPPORTED;
MACRO_ASN1_F ASN1_R_STRING_TOO_LONG;
MACRO_ASN1_F ASN1_R_STRING_TOO_SHORT;
MACRO_ASN1_F ASN1_R_TAG_VALUE_TOO_HIGH;
MACRO_ASN1_F ASN1_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD;
MACRO_ASN1_F ASN1_R_TIME_NOT_ASCII_FORMAT;
MACRO_ASN1_F ASN1_R_TOO_LONG;
MACRO_ASN1_F ASN1_R_TYPE_NOT_CONSTRUCTED;
MACRO_ASN1_F ASN1_R_UNABLE_TO_DECODE_RSA_KEY;
MACRO_ASN1_F ASN1_R_UNABLE_TO_DECODE_RSA_PRIVATE_KEY;
MACRO_ASN1_F ASN1_R_UNEXPECTED_EOC;
MACRO_ASN1_F ASN1_R_UNIVERSALSTRING_IS_WRONG_LENGTH;
MACRO_ASN1_F ASN1_R_UNKNOWN_FORMAT;
MACRO_ASN1_F ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM;
MACRO_ASN1_F ASN1_R_UNKNOWN_OBJECT_TYPE;
MACRO_ASN1_F ASN1_R_UNKNOWN_PUBLIC_KEY_TYPE;
MACRO_ASN1_F ASN1_R_UNKNOWN_TAG;
MACRO_ASN1_F ASN1_R_UNKOWN_FORMAT;
MACRO_ASN1_F ASN1_R_UNSUPPORTED_ANY_DEFINED_BY_TYPE;
MACRO_ASN1_F ASN1_R_UNSUPPORTED_CIPHER;
MACRO_ASN1_F ASN1_R_UNSUPPORTED_ENCRYPTION_ALGORITHM;
MACRO_ASN1_F ASN1_R_UNSUPPORTED_PUBLIC_KEY_TYPE;
MACRO_ASN1_F ASN1_R_UNSUPPORTED_TYPE;
MACRO_ASN1_F ASN1_R_WRONG_TAG;
MACRO_ASN1_F ASN1_R_WRONG_TYPE;
MACRO_ASN1_STRFLGS_UTF8 ASN1_STRFLGS_DUMP_ALL;
MACRO_ASN1_STRFLGS_UTF8 ASN1_STRFLGS_DUMP_DER;
MACRO_ASN1_STRFLGS_UTF8 ASN1_STRFLGS_DUMP_UNKNOWN;
MACRO_ASN1_STRFLGS ASN1_STRFLGS_ESC_2253;
MACRO_ASN1_STRFLGS ASN1_STRFLGS_ESC_CTRL;
MACRO_ASN1_STRFLGS ASN1_STRFLGS_ESC_MSB;
MACRO_ASN1_STRFLGS ASN1_STRFLGS_ESC_QUOTE;
MACRO_ASN1_STRFLGS_UTF8 ASN1_STRFLGS_IGNORE_TYPE;
MACRO_ASN1_STRFLGS_UTF8 ASN1_STRFLGS_RFC2253;
MACRO_ASN1_STRFLGS_UTF8 ASN1_STRFLGS_SHOW_TYPE;
MACRO_ASN1_STRFLGS_UTF8 ASN1_STRFLGS_UTF8_CONVERT;
MACRO_ASN1_OBJECT ASN1_STRING_FLAG_BITS_LEFT;
MACRO_ASN1_OBJECT ASN1_STRING_FLAG_CONT;
MACRO_ASN1_OBJECT ASN1_STRING_FLAG_NDEF;
MACRO_ASN1_F ASN1_TFLG_ADB_INT;
MACRO_ASN1_F ASN1_TFLG_ADB_MASK;
MACRO_ASN1_F ASN1_TFLG_ADB_OID;
MACRO_ASN1_F ASN1_TFLG_APPLICATION;
MACRO_ASN1_F ASN1_TFLG_COMBINE;
MACRO_ASN1_F ASN1_TFLG_CONTEXT;
MACRO_ASN1_F ASN1_TFLG_EXPTAG;
MACRO_ASN1_F ASN1_TFLG_IMPTAG;
MACRO_ASN1_F ASN1_TFLG_NDEF;
MACRO_ASN1_F ASN1_TFLG_OPTIONAL;
MACRO_ASN1_F ASN1_TFLG_PRIVATE;
MACRO_ASN1_F ASN1_TFLG_SEQUENCE_OF;
MACRO_ASN1_F ASN1_TFLG_SET_OF;
MACRO_ASN1_F ASN1_TFLG_SET_ORDER;
MACRO_ASN1_F ASN1_TFLG_SK_MASK;
MACRO_ASN1_F ASN1_TFLG_TAG_CLASS;
MACRO_ASN1_F ASN1_TFLG_TAG_MASK;
MACRO_ASN1_F ASN1_TFLG_UNIVERSAL;
MACRO_ASN1 ASN1_TYPE_MISMATCH;
MACRO_ASNT ASNT_OPAQUE;
MACRO_ASN ASN_APPLICATION;
MACRO_ASN ASN_APP_COUNTER64;
MACRO_ASN ASN_APP_DOUBLE;
MACRO_ASN ASN_APP_FLOAT;
MACRO_ASN ASN_APP_I64;
MACRO_ASN ASN_APP_OPAQUE;
MACRO_ASN ASN_APP_U64;
MACRO_ASN ASN_APP_UNION;
MACRO_ASN ASN_BIT8;
MACRO_ASN ASN_BIT_STR;
MACRO_ASN ASN_BOOLEAN;
MACRO_ASN ASN_CONSTRUCTOR;
MACRO_ASN ASN_CONTEXT;
MACRO_ASN_IPADDRESS ASN_COUNTER;
MACRO_ASN_IPADDRESS ASN_COUNTER64;
MACRO_ASN_IPADDRESS ASN_DOUBLE;
MACRO_ASN ASN_EXTENSION_ID;
MACRO_ASN_IPADDRESS ASN_FLOAT;
MACRO_ASN_IPADDRESS ASN_GAUGE;
MACRO_ASN ASN_INTEGER;
MACRO_ASN_IPADDRESS ASN_INTEGER64;
MACRO_ASN_IPADDRESS ASN_IPADDRESS;
MACRO_ASN ASN_LONG_LEN;
MACRO_ASN_IPADDRESS ASN_NSAP;
MACRO_ASN ASN_NULL;
MACRO_ASN ASN_OBJECT_ID;
MACRO_ASN ASN_OCTET_STR;
MACRO_ASN_IPADDRESS ASN_OPAQUE;
MACRO_ASN ASN_OPAQUE_COUNTER64;
MACRO_ASN ASN_OPAQUE_COUNTER64_MX_BER_LEN;
MACRO_ASN ASN_OPAQUE_DOUBLE;
MACRO_ASN ASN_OPAQUE_DOUBLE_BER_LEN;
MACRO_ASN ASN_OPAQUE_FLOAT;
MACRO_ASN ASN_OPAQUE_FLOAT_BER_LEN;
MACRO_ASN ASN_OPAQUE_I64;
MACRO_ASN ASN_OPAQUE_I64_MX_BER_LEN;
MACRO_ASN ASN_OPAQUE_TAG1;
MACRO_ASN ASN_OPAQUE_TAG2;
MACRO_ASN ASN_OPAQUE_TAG2U;
MACRO_ASN ASN_OPAQUE_U64;
MACRO_ASN ASN_OPAQUE_U64_MX_BER_LEN;
MACRO_ASN ASN_PRIMITIVE;
MACRO_ASN ASN_PRIVATE;
MACRO_ASN ASN_PRIV_DELEGATED;
MACRO_ASN ASN_PRIV_EXCL_RANGE;
MACRO_ASN ASN_PRIV_IMPLIED_OBJECT_ID;
MACRO_ASN ASN_PRIV_IMPLIED_OCTET_STR;
MACRO_ASN ASN_PRIV_INCL_RANGE;
MACRO_ASN ASN_PRIV_RETRY;
MACRO_ASN ASN_SEQUENCE;
MACRO_ASN ASN_SET;
MACRO_ASN_IPADDRESS ASN_TIMETICKS;
MACRO_ASN_IPADDRESS ASN_UINTEGER;
MACRO_ASN ASN_UNIVERSAL;
MACRO_ASN_IPADDRESS ASN_UNSIGNED;
MACRO_ASN_IPADDRESS ASN_UNSIGNED64;
MACRO_AFORK ASU;
MACRO_ATF ATF_COM;
MACRO_ATF ATF_INUSE;
MACRO_ATF ATF_PERM;
MACRO_ATF ATF_PUBL;
MACRO_ATF ATF_USETRAILERS;
MACRO_ATTR ATTR_BIT_MAP_COUNT;
MACRO_ATTR_CMN ATTR_CMN_ACCESSMASK;
MACRO_ATTR_CMN ATTR_CMN_ACCTIME;
MACRO_ATTR_CMN ATTR_CMN_ADDEDTIME;
MACRO_ATTR_CMN ATTR_CMN_BKUPTIME;
MACRO_ATTR_CMN ATTR_CMN_CHGTIME;
MACRO_ATTR_CMN ATTR_CMN_CRTIME;
MACRO_ATTR_CMN ATTR_CMN_DEVID;
MACRO_ATTR_CMN ATTR_CMN_EXTENDED_SECURITY;
MACRO_ATTR_CMN ATTR_CMN_FILEID;
MACRO_ATTR_CMN ATTR_CMN_FLAGS;
MACRO_ATTR_CMN ATTR_CMN_FNDRINFO;
MACRO_ATTR_CMN ATTR_CMN_FSID;
MACRO_ATTR_CMN ATTR_CMN_FULLPATH;
MACRO_ATTR_CMN ATTR_CMN_GRPID;
MACRO_ATTR_CMN ATTR_CMN_GRPUUID;
MACRO_ATTR_CMN ATTR_CMN_MODTIME;
MACRO_ATTR_CMN ATTR_CMN_NAME;
MACRO_ATTR_DIR ATTR_CMN_NAMEDATTRCOUNT;
MACRO_ATTR_DIR ATTR_CMN_NAMEDATTRLIST;
MACRO_ATTR_CMN ATTR_CMN_OBJID;
MACRO_ATTR_CMN ATTR_CMN_OBJPERMANENTID;
MACRO_ATTR_CMN ATTR_CMN_OBJTAG;
MACRO_ATTR_CMN ATTR_CMN_OBJTYPE;
MACRO_ATTR_CMN ATTR_CMN_OWNERID;
MACRO_ATTR_CMN ATTR_CMN_PARENTID;
MACRO_ATTR_CMN ATTR_CMN_PAROBJID;
MACRO_ATTR_CMN ATTR_CMN_RETURNED_ATTRS;
MACRO_ATTR_CMN ATTR_CMN_SCRIPT;
MACRO_ATTR_CMN ATTR_CMN_SETMASK;
MACRO_ATTR_CMN ATTR_CMN_USERACCESS;
MACRO_ATTR_CMN ATTR_CMN_UUID;
MACRO_ATTR_CMN ATTR_CMN_VALIDMASK;
MACRO_ATTR_CMN ATTR_CMN_VOLSETMASK;
MACRO_ATTR_CMN ATTR_DIR_ENTRYCOUNT;
MACRO_ATTR_CMN ATTR_DIR_LINKCOUNT;
MACRO_ATTR_CMN ATTR_DIR_MOUNTSTATUS;
MACRO_ATTR_DIR ATTR_DIR_SETMASK;
MACRO_ATTR_DIR ATTR_DIR_VALIDMASK;
MACRO_ATTR_DIR ATTR_FILE_ALLOCSIZE;
MACRO_ATTR_DIR ATTR_FILE_CLUMPSIZE;
MACRO_ATTR_DIR ATTR_FILE_DATAALLOCSIZE;
MACRO_ATTR_DIR ATTR_FILE_DATAEXTENTS;
MACRO_ATTR_DIR ATTR_FILE_DATALENGTH;
MACRO_ATTR_DIR ATTR_FILE_DEVTYPE;
MACRO_ATTR_DIR ATTR_FILE_FILETYPE;
MACRO_ATTR_DIR ATTR_FILE_FORKCOUNT;
MACRO_ATTR_DIR ATTR_FILE_FORKLIST;
MACRO_ATTR_DIR ATTR_FILE_IOBLOCKSIZE;
MACRO_ATTR_DIR ATTR_FILE_LINKCOUNT;
MACRO_ATTR_DIR ATTR_FILE_RSRCALLOCSIZE;
MACRO_ATTR_DIR ATTR_FILE_RSRCEXTENTS;
MACRO_ATTR_DIR ATTR_FILE_RSRCLENGTH;
MACRO_ATTR_DIR ATTR_FILE_SETMASK;
MACRO_ATTR_DIR ATTR_FILE_TOTALSIZE;
MACRO_ATTR_DIR ATTR_FILE_VALIDMASK;
MACRO_ATTR_DIR ATTR_FORK_ALLOCSIZE;
MACRO_ATTR_DIR ATTR_FORK_SETMASK;
MACRO_ATTR_DIR ATTR_FORK_TOTALSIZE;
MACRO_ATTR_DIR ATTR_FORK_VALIDMASK;
MACRO_ATTR_MAX ATTR_MAX_BUFFER;
MACRO_ATTR_CMN ATTR_VOL_ALLOCATIONCLUMP;
MACRO_ATTR_CMN ATTR_VOL_ATTRIBUTES;
MACRO_ATTR_CMN ATTR_VOL_CAPABILITIES;
MACRO_ATTR_CMN ATTR_VOL_DIRCOUNT;
MACRO_ATTR_CMN ATTR_VOL_ENCODINGSUSED;
MACRO_ATTR_CMN ATTR_VOL_FILECOUNT;
MACRO_ATTR_CMN ATTR_VOL_FSTYPE;
MACRO_ATTR_CMN ATTR_VOL_INFO;
MACRO_ATTR_CMN ATTR_VOL_IOBLOCKSIZE;
MACRO_ATTR_CMN ATTR_VOL_MAXOBJCOUNT;
MACRO_ATTR_CMN ATTR_VOL_MINALLOCATION;
MACRO_ATTR_CMN ATTR_VOL_MOUNTEDDEVICE;
MACRO_ATTR_CMN ATTR_VOL_MOUNTFLAGS;
MACRO_ATTR_CMN ATTR_VOL_MOUNTPOINT;
MACRO_ATTR_CMN ATTR_VOL_NAME;
MACRO_ATTR_CMN ATTR_VOL_OBJCOUNT;
MACRO_ATTR_CMN ATTR_VOL_SETMASK;
MACRO_ATTR_CMN ATTR_VOL_SIGNATURE;
MACRO_ATTR_CMN ATTR_VOL_SIZE;
MACRO_ATTR_CMN ATTR_VOL_SPACEAVAIL;
MACRO_ATTR_CMN ATTR_VOL_SPACEFREE;
MACRO_ATTR_CMN ATTR_VOL_UUID;
MACRO_ATTR_CMN ATTR_VOL_VALIDMASK;
MACRO_AT AT_IPC_MSG;
MACRO_AT AT_IPC_SEM;
MACRO_AT AT_IPC_SHM;
MACRO_AUC AUC_AUDITING;
MACRO_AUC AUC_DISABLED;
MACRO_AUC AUC_NOAUDIT;
MACRO_AUC AUC_UNSET;
MACRO_AUDIT_CNT AUDIT_AHLT;
MACRO_AUDIT_CNT AUDIT_ARGE;
MACRO_AUDIT_CNT AUDIT_ARGV;
MACRO_AUDIT_CNT AUDIT_CNT;
MACRO_AUDIT_CNT AUDIT_GROUP;
MACRO_AUDIT_HARD AUDIT_HARD_LIMIT_FREE_BLOCKS;
MACRO_AUDIT_MAX AUDIT_HEADER_VERSION_OLDDARWIN;
MACRO_AUDIT_MAX AUDIT_HEADER_VERSION_OPENBSM;
MACRO_AUDIT_MAX AUDIT_HEADER_VERSION_OPENBSM10;
MACRO_AUDIT_MAX AUDIT_HEADER_VERSION_OPENBSM11;
MACRO_AUDIT_MAX AUDIT_HEADER_VERSION_SOLARIS;
MACRO_AUDIT_MAX AUDIT_HEADER_VERSION_TSOL;
MACRO_AUDIT_MAX AUDIT_HEADER_VERSION_TSOL25;
MACRO_AUDIT_MAX_ARGS AUDIT_MAX_ARGS;
MACRO_AUDIT_MAX_ARGS AUDIT_MAX_ENV;
MACRO_AUDIT_MAX AUDIT_MAX_GROUPS;
MACRO_AUDIT_OFF AUDIT_OFF;
MACRO_AUDIT_OFF AUDIT_ON;
MACRO_AUDIT_CNT AUDIT_PATH;
MACRO_AUDIT_CNT AUDIT_PERZONE;
MACRO_AUDIT_CNT AUDIT_PUBLIC;
MACRO_AUDIT AUDIT_RECORD_MAGIC;
MACRO_AUDIT_CNT AUDIT_SCNT;
MACRO_AUDIT_CNT AUDIT_SEQ;
MACRO_AUDIT_CNT AUDIT_TRAIL;
MACRO_AUDIT_HARD AUDIT_TRIGGER_CLOSE_AND_DIE;
MACRO_AUDIT_HARD AUDIT_TRIGGER_EXPIRE_TRAILS;
MACRO_AUDIT_HARD AUDIT_TRIGGER_INITIALIZE;
MACRO_AUDIT_HARD AUDIT_TRIGGER_LOW_SPACE;
MACRO_AUDIT_HARD AUDIT_TRIGGER_MAX;
MACRO_AUDIT_HARD AUDIT_TRIGGER_MIN;
MACRO_AUDIT_HARD AUDIT_TRIGGER_NO_SPACE;
MACRO_AUDIT_HARD AUDIT_TRIGGER_READ_FILE;
MACRO_AUDIT_HARD AUDIT_TRIGGER_ROTATE_KERNEL;
MACRO_AUDIT_HARD AUDIT_TRIGGER_ROTATE_USER;
MACRO_AUDIT_CNT AUDIT_USER;
MACRO_AUDIT_CNT AUDIT_WINDATA;
MACRO_AUDIT_CNT AUDIT_ZONENAME;
MACRO_AUE AUE_ACCEPT;
MACRO_AUE AUE_ACCESS;
MACRO_AUE AUE_ACCESS_EXTENDED;
MACRO_AUE AUE_ACCT;
MACRO_AUE AUE_ACLSET;
MACRO_AUE AUE_ACL_CHECK_FD;
MACRO_AUE AUE_ACL_CHECK_FILE;
MACRO_AUE AUE_ACL_CHECK_LINK;
MACRO_AUE AUE_ACL_DELETE_FD;
MACRO_AUE AUE_ACL_DELETE_FILE;
MACRO_AUE AUE_ACL_DELETE_LINK;
MACRO_AUE AUE_ACL_GET_FD;
MACRO_AUE AUE_ACL_GET_FILE;
MACRO_AUE AUE_ACL_GET_LINK;
MACRO_AUE AUE_ACL_SET_FD;
MACRO_AUE AUE_ACL_SET_FILE;
MACRO_AUE AUE_ACL_SET_LINK;
MACRO_AUE AUE_ADDPROFILE;
MACRO_AUE AUE_ADJTIME;
MACRO_AUE AUE_ASYNC_DAEMON;
MACRO_AUE AUE_ASYNC_DAEMON_EXIT;
MACRO_AUE AUE_ATGETMSG;
MACRO_AUE AUE_ATPGETREQ;
MACRO_AUE AUE_ATPGETRSP;
MACRO_AUE AUE_ATPSNDREQ;
MACRO_AUE AUE_ATPSNDRSP;
MACRO_AUE AUE_ATPUTMSG;
MACRO_AUE AUE_ATSOCKET;
MACRO_AUE AUE_AUDIT;
MACRO_AUE AUE_AUDITCTL;
MACRO_AUE AUE_AUDITON;
MACRO_AUE AUE_AUDITON_GETCAR;
MACRO_AUE AUE_AUDITON_GETCLASS;
MACRO_AUE AUE_AUDITON_GETCOND;
MACRO_AUE AUE_AUDITON_GETCWD;
MACRO_AUE AUE_AUDITON_GETKMASK;
MACRO_AUE AUE_AUDITON_GETSTAT;
MACRO_AUE AUE_AUDITON_GPOLICY;
MACRO_AUE AUE_AUDITON_GQCTRL;
MACRO_AUE AUE_AUDITON_GTERMID;
MACRO_AUE AUE_AUDITON_SETCLASS;
MACRO_AUE AUE_AUDITON_SETCOND;
MACRO_AUE AUE_AUDITON_SETKMASK;
MACRO_AUE AUE_AUDITON_SETSMASK;
MACRO_AUE AUE_AUDITON_SETSTAT;
MACRO_AUE AUE_AUDITON_SETUMASK;
MACRO_AUE AUE_AUDITON_SPOLICY;
MACRO_AUE AUE_AUDITON_SQCTRL;
MACRO_AUE AUE_AUDITON_STERMID;
MACRO_AUE AUE_AUDITSTAT;
MACRO_AUE AUE_AUDITSVC;
MACRO_AUE AUE_AUDITSYS;
MACRO_AUE AUE_AUDITUSER;
MACRO_AUE AUE_BDFLUSH;
MACRO_AUE AUE_BIND;
MACRO_AUE AUE_BRANDSYS;
MACRO_AUE AUE_BSDTHREADCREATE;
MACRO_AUE AUE_BSDTHREADREGISTER;
MACRO_AUE AUE_BSDTHREADTERMINATE;
MACRO_AUE AUE_BSMSYS;
MACRO_AUE AUE_CAPGET;
MACRO_AUE AUE_CAPSET;
MACRO_AUE AUE_CAP_ENTER;
MACRO_AUE AUE_CAP_GETMODE;
MACRO_AUE AUE_CAP_GETRIGHTS;
MACRO_AUE AUE_CAP_NEW;
MACRO_AUE AUE_CHDIR;
MACRO_AUE AUE_CHFLAGS;
MACRO_AUE AUE_CHMOD;
MACRO_AUE AUE_CHMOD_EXTENDED;
MACRO_AUE AUE_CHOWN;
MACRO_AUE AUE_CHROOT;
MACRO_AUE AUE_CHUD;
MACRO_AUE AUE_CLOCK_SETTIME;
MACRO_AUE AUE_CLOSE;
MACRO_AUE AUE_CLOSEFROM;
MACRO_AUE AUE_CONFIGKSSL;
MACRO_AUE AUE_CONNECT;
MACRO_AUE AUE_COPYFILE;
MACRO_AUE AUE_CORE;
MACRO_AUE AUE_CREAT;
MACRO_AUE AUE_CRYPTOADM;
MACRO_AUE AUE_CSOPS;
MACRO_AUE AUE_DARWIN_ADDPROFILE;
MACRO_AUE AUE_DARWIN_AUDITCTL;
MACRO_AUE AUE_DARWIN_CHFLAGS;
MACRO_AUE AUE_DARWIN_COPYFILE;
MACRO_AUE AUE_DARWIN_EXCHANGEDATA;
MACRO_AUE AUE_DARWIN_FCHFLAGS;
MACRO_AUE AUE_DARWIN_FLOCK;
MACRO_AUE AUE_DARWIN_FPATHCONF;
MACRO_AUE AUE_DARWIN_FSTAT;
MACRO_AUE AUE_DARWIN_FTRUNCATE;
MACRO_AUE AUE_DARWIN_FUTIMES;
MACRO_AUE AUE_DARWIN_GETATTRLIST;
MACRO_AUE AUE_DARWIN_GETDIRENTRIES;
MACRO_AUE AUE_DARWIN_GETDIRENTRIESATTR;
MACRO_AUE AUE_DARWIN_GETFH;
MACRO_AUE AUE_DARWIN_GETFSSTAT;
MACRO_AUE AUE_DARWIN_INITPROCESS;
MACRO_AUE AUE_DARWIN_KDEBUGTRACE;
MACRO_AUE AUE_DARWIN_KTRACE;
MACRO_AUE AUE_DARWIN_LCHMOD;
MACRO_AUE AUE_DARWIN_LOADSHFILE;
MACRO_AUE AUE_DARWIN_MAPFD;
MACRO_AUE AUE_DARWIN_MINHERIT;
MACRO_AUE AUE_DARWIN_MKFIFO;
MACRO_AUE AUE_DARWIN_MLOCK;
MACRO_AUE AUE_DARWIN_MPROTECT;
MACRO_AUE AUE_DARWIN_MUNLOCK;
MACRO_AUE AUE_DARWIN_NEWSYSTEMSHREG;
MACRO_AUE AUE_DARWIN_NFSSVC;
MACRO_AUE AUE_DARWIN_PIDFORTASK;
MACRO_AUE AUE_DARWIN_POLL;
MACRO_AUE AUE_DARWIN_PROFILE;
MACRO_AUE AUE_DARWIN_PTHREADKILL;
MACRO_AUE AUE_DARWIN_PTHREADSIGMASK;
MACRO_AUE AUE_DARWIN_PTRACE;
MACRO_AUE AUE_DARWIN_QUOTACTL;
MACRO_AUE AUE_DARWIN_REBOOT;
MACRO_AUE AUE_DARWIN_RESETSHFILE;
MACRO_AUE AUE_DARWIN_REVOKE;
MACRO_AUE AUE_DARWIN_RFORK;
MACRO_AUE AUE_DARWIN_SEARCHFS;
MACRO_AUE AUE_DARWIN_SEMCLOSE;
MACRO_AUE AUE_DARWIN_SEMCONFIG;
MACRO_AUE AUE_DARWIN_SEMOPEN;
MACRO_AUE AUE_DARWIN_SEMUNLINK;
MACRO_AUE AUE_DARWIN_SETATTRLIST;
MACRO_AUE AUE_DARWIN_SETLOGIN;
MACRO_AUE AUE_DARWIN_SETPRIORITY;
MACRO_AUE AUE_DARWIN_SETPRIVEXEC;
MACRO_AUE AUE_DARWIN_SETSID;
MACRO_AUE AUE_DARWIN_SETTIMEOFDAY;
MACRO_AUE AUE_DARWIN_SHMOPEN;
MACRO_AUE AUE_DARWIN_SHMUNLINK;
MACRO_AUE AUE_DARWIN_SOCKETPAIR;
MACRO_AUE AUE_DARWIN_SWAPOFF;
MACRO_AUE AUE_DARWIN_SYSCTL;
MACRO_AUE AUE_DARWIN_SYSCTL_NONADMIN;
MACRO_AUE AUE_DARWIN_TASKFORPID;
MACRO_AUE AUE_DARWIN_TRUNCATE;
MACRO_AUE AUE_DARWIN_UMASK;
MACRO_AUE AUE_DARWIN_UNDELETE;
MACRO_AUE_at AUE_DARWIN_add_to_group;
MACRO_AUE_at AUE_DARWIN_audit_shutdown;
MACRO_AUE_at AUE_DARWIN_audit_startup;
MACRO_AUE_at AUE_DARWIN_auth_user;
MACRO_AUE_at AUE_DARWIN_create_group;
MACRO_AUE_at AUE_DARWIN_delete_group;
MACRO_AUE_at AUE_DARWIN_lw_login;
MACRO_AUE_at AUE_DARWIN_lw_logout;
MACRO_AUE_at AUE_DARWIN_modify_group;
MACRO_AUE_at AUE_DARWIN_modify_password;
MACRO_AUE_at AUE_DARWIN_remove_from_group;
MACRO_AUE_at AUE_DARWIN_revoke_obj;
MACRO_AUE_at AUE_DARWIN_ssauthint;
MACRO_AUE_at AUE_DARWIN_ssauthorize;
MACRO_AUE_at AUE_DARWIN_ssconn;
MACRO_AUE_at AUE_DARWIN_sudo;
MACRO_AUE AUE_DELETE;
MACRO_AUE AUE_DOORFS;
MACRO_AUE AUE_DOORFS_DOOR_BIND;
MACRO_AUE AUE_DOORFS_DOOR_CALL;
MACRO_AUE AUE_DOORFS_DOOR_CREATE;
MACRO_AUE AUE_DOORFS_DOOR_CRED;
MACRO_AUE AUE_DOORFS_DOOR_INFO;
MACRO_AUE AUE_DOORFS_DOOR_RETURN;
MACRO_AUE AUE_DOORFS_DOOR_REVOKE;
MACRO_AUE AUE_DOORFS_DOOR_UNBIND;
MACRO_AUE AUE_DUP;
MACRO_AUE AUE_DUP2;
MACRO_AUE AUE_EACCESS;
MACRO_AUE AUE_ENTERPROM;
MACRO_AUE AUE_EXCHANGEDATA;
MACRO_AUE AUE_EXEC;
MACRO_AUE AUE_EXECVE;
MACRO_AUE AUE_EXIT;
MACRO_AUE AUE_EXITPROM;
MACRO_AUE AUE_EXPORTFS;
MACRO_AUE AUE_EXTATTRCTL;
MACRO_AUE AUE_EXTATTR_DELETE_FD;
MACRO_AUE AUE_EXTATTR_DELETE_FILE;
MACRO_AUE AUE_EXTATTR_DELETE_LINK;
MACRO_AUE AUE_EXTATTR_GET_FD;
MACRO_AUE AUE_EXTATTR_GET_FILE;
MACRO_AUE AUE_EXTATTR_GET_LINK;
MACRO_AUE AUE_EXTATTR_LIST_FD;
MACRO_AUE AUE_EXTATTR_LIST_FILE;
MACRO_AUE AUE_EXTATTR_LIST_LINK;
MACRO_AUE AUE_EXTATTR_SET_FD;
MACRO_AUE AUE_EXTATTR_SET_FILE;
MACRO_AUE AUE_EXTATTR_SET_LINK;
MACRO_AUE AUE_FACCESSAT;
MACRO_AUE AUE_FACLSET;
MACRO_AUE AUE_FCHDIR;
MACRO_AUE AUE_FCHFLAGS;
MACRO_AUE AUE_FCHMOD;
MACRO_AUE AUE_FCHMODAT;
MACRO_AUE AUE_FCHMOD_EXTENDED;
MACRO_AUE AUE_FCHOWN;
MACRO_AUE AUE_FCHOWNAT;
MACRO_AUE AUE_FCHROOT;
MACRO_AUE AUE_FCNTL;
MACRO_AUE AUE_FDATASYNC;
MACRO_AUE AUE_FEXECVE;
MACRO_AUE AUE_FFSCTL;
MACRO_AUE AUE_FGETATTRLIST;
MACRO_AUE AUE_FGETXATTR;
MACRO_AUE AUE_FHOPEN;
MACRO_AUE AUE_FHSTAT;
MACRO_AUE AUE_FHSTATFS;
MACRO_AUE AUE_FLISTXATTR;
MACRO_AUE AUE_FLOCK;
MACRO_AUE AUE_FORK;
MACRO_AUE AUE_FORK1;
MACRO_AUE AUE_FORKALL;
MACRO_AUE AUE_FPATHCONF;
MACRO_AUE AUE_FREMOVEXATTR;
MACRO_AUE AUE_FSAT;
MACRO_AUE AUE_FSCTL;
MACRO_AUE AUE_FSETATTRLIST;
MACRO_AUE AUE_FSETXATTR;
MACRO_AUE AUE_FSGETPATH;
MACRO_AUE AUE_FSTAT;
MACRO_AUE AUE_FSTAT64;
MACRO_AUE AUE_FSTAT64_EXTENDED;
MACRO_AUE AUE_FSTATAT;
MACRO_AUE AUE_FSTATFS;
MACRO_AUE AUE_FSTATFS64;
MACRO_AUE AUE_FSTATV;
MACRO_AUE AUE_FSTAT_EXTENDED;
MACRO_AUE AUE_FSYNC;
MACRO_AUE AUE_FTRUNCATE;
MACRO_AUE AUE_FUSERS;
MACRO_AUE AUE_FUTIMES;
MACRO_AUE AUE_FUTIMESAT;
MACRO_AUE AUE_GCCONTROL;
MACRO_AUE AUE_GETATTRLIST;
MACRO_AUE AUE_GETAUDIT;
MACRO_AUE AUE_GETAUDIT_ADDR;
MACRO_AUE AUE_GETAUID;
MACRO_AUE AUE_GETCWD;
MACRO_AUE AUE_GETDENTS;
MACRO_AUE AUE_GETDIRENTRIES;
MACRO_AUE AUE_GETDIRENTRIES64;
MACRO_AUE AUE_GETDIRENTRIESATTR;
MACRO_AUE AUE_GETDTABLESIZE;
MACRO_AUE AUE_GETEGID;
MACRO_AUE AUE_GETEUID;
MACRO_AUE AUE_GETFSSTAT;
MACRO_AUE AUE_GETFSSTAT64;
MACRO_AUE AUE_GETGID;
MACRO_AUE AUE_GETGROUPS;
MACRO_AUE AUE_GETITIMER;
MACRO_AUE AUE_GETKERNSTATE;
MACRO_AUE AUE_GETLCID;
MACRO_AUE AUE_GETLOGIN;
MACRO_AUE AUE_GETMSG;
MACRO_AUE AUE_GETPATH_FROMADDR;
MACRO_AUE AUE_GETPATH_FROMFD;
MACRO_AUE AUE_GETPEERNAME;
MACRO_AUE AUE_GETPGID;
MACRO_AUE AUE_GETPGRP;
MACRO_AUE AUE_GETPID;
MACRO_AUE AUE_GETPMSG;
MACRO_AUE AUE_GETPORTAUDIT;
MACRO_AUE AUE_GETPPID;
MACRO_AUE AUE_GETPRIORITY;
MACRO_AUE AUE_GETRESGID;
MACRO_AUE AUE_GETRESUID;
MACRO_AUE AUE_GETRLIMIT;
MACRO_AUE AUE_GETRUSAGE;
MACRO_AUE AUE_GETSGROUPS;
MACRO_AUE AUE_GETSID;
MACRO_AUE AUE_GETSOCKNAME;
MACRO_AUE AUE_GETSOCKOPT;
MACRO_AUE AUE_GETTID;
MACRO_AUE AUE_GETTIMEOFDAY;
MACRO_AUE AUE_GETUID;
MACRO_AUE AUE_GETUSERAUDIT;
MACRO_AUE AUE_GETWGROUPS;
MACRO_AUE AUE_GETXATTR;
MACRO_AUE AUE_IDENTITYSVC;
MACRO_AUE AUE_IFLOAT;
MACRO_AUE AUE_INITGROUPS;
MACRO_AUE AUE_INITPROCESS;
MACRO_AUE AUE_INST_SYNC;
MACRO_AUE AUE_IOCTL;
MACRO_AUE AUE_IOPERM;
MACRO_AUE AUE_IOPL;
MACRO_AUE AUE_IOPOLICYSYS;
MACRO_AUE AUE_ISSETUGID;
MACRO_AUE AUE_JAIL;
MACRO_AUE AUE_JAIL_ATTACH;
MACRO_AUE AUE_JUNK;
MACRO_AUE AUE_KDBUGTRACE;
MACRO_AUE AUE_KDEBUGTRACE;
MACRO_AUE AUE_KENV;
MACRO_AUE AUE_KEVENT;
MACRO_AUE AUE_KILL;
MACRO_AUE AUE_KILLPG;
MACRO_AUE AUE_KQUEUE;
MACRO_AUE AUE_KTRACE;
MACRO_AUE AUE_LCHFLAGS;
MACRO_AUE AUE_LCHMOD;
MACRO_AUE AUE_LCHOWN;
MACRO_AUE AUE_LGETFH;
MACRO_AUE AUE_LINK;
MACRO_AUE AUE_LINKAT;
MACRO_AUE AUE_LIOLISTIO;
MACRO_AUE AUE_LISTEN;
MACRO_AUE AUE_LISTXATTR;
MACRO_AUE AUE_LOADSHFILE;
MACRO_AUE AUE_LPATHCONF;
MACRO_AUE AUE_LSEEK;
MACRO_AUE AUE_LSTAT;
MACRO_AUE AUE_LSTAT64;
MACRO_AUE AUE_LSTAT64_EXTENDED;
MACRO_AUE AUE_LSTATV;
MACRO_AUE AUE_LSTAT_EXTENDED;
MACRO_AUE AUE_LUTIMES;
MACRO_AUE AUE_LXSTAT;
MACRO_AUE AUE_MAC;
MACRO_AUE AUE_MAC_EXECVE;
MACRO_AUE AUE_MAC_GETFSSTAT;
MACRO_AUE AUE_MAC_GET_FD;
MACRO_AUE AUE_MAC_GET_FILE;
MACRO_AUE AUE_MAC_GET_LCID;
MACRO_AUE AUE_MAC_GET_LCTX;
MACRO_AUE AUE_MAC_GET_LINK;
MACRO_AUE AUE_MAC_GET_MOUNT;
MACRO_AUE AUE_MAC_GET_PID;
MACRO_AUE AUE_MAC_GET_PROC;
MACRO_AUE AUE_MAC_MOUNT;
MACRO_AUE AUE_MAC_SET_FD;
MACRO_AUE AUE_MAC_SET_FILE;
MACRO_AUE AUE_MAC_SET_LCTX;
MACRO_AUE AUE_MAC_SET_LINK;
MACRO_AUE AUE_MAC_SET_PROC;
MACRO_AUE AUE_MAC_SYSCALL;
MACRO_AUE AUE_MADVISE;
MACRO_AUE AUE_MAPFD;
MACRO_AUE AUE_MCTL;
MACRO_AUE AUE_MEMCNTL;
MACRO_AUE AUE_MINCORE;
MACRO_AUE AUE_MINHERIT;
MACRO_AUE AUE_MKCOMPLEX;
MACRO_AUE AUE_MKDIR;
MACRO_AUE AUE_MKDIRAT;
MACRO_AUE AUE_MKDIR_EXTENDED;
MACRO_AUE AUE_MKFIFO;
MACRO_AUE AUE_MKFIFOAT;
MACRO_AUE AUE_MKFIFO_EXTENDED;
MACRO_AUE AUE_MKNOD;
MACRO_AUE AUE_MKNODAT;
MACRO_AUE AUE_MLOCK;
MACRO_AUE AUE_MLOCKALL;
MACRO_AUE AUE_MMAP;
MACRO_AUE AUE_MODADDMAJ;
MACRO_AUE AUE_MODADDPRIV;
MACRO_AUE AUE_MODCONFIG;
MACRO_AUE AUE_MODCTL;
MACRO_AUE AUE_MODDEVPLCY;
MACRO_AUE AUE_MODLOAD;
MACRO_AUE AUE_MODUNLOAD;
MACRO_AUE AUE_MODWATCH;
MACRO_AUE AUE_MOUNT;
MACRO_AUE AUE_MPROTECT;
MACRO_AUE AUE_MQ_NOTIFY;
MACRO_AUE AUE_MQ_OPEN;
MACRO_AUE AUE_MQ_SETATTR;
MACRO_AUE AUE_MQ_TIMEDRECEIVE;
MACRO_AUE AUE_MQ_TIMEDSEND;
MACRO_AUE AUE_MQ_UNLINK;
MACRO_AUE AUE_MSGCL;
MACRO_AUE AUE_MSGCTL;
MACRO_AUE AUE_MSGCTL_RMID;
MACRO_AUE AUE_MSGCTL_SET;
MACRO_AUE AUE_MSGCTL_STAT;
MACRO_AUE AUE_MSGGET;
MACRO_AUE AUE_MSGRCV;
MACRO_AUE AUE_MSGSND;
MACRO_AUE AUE_MSGSYS;
MACRO_AUE AUE_MSYNC;
MACRO_AUE AUE_MUNLOCK;
MACRO_AUE AUE_MUNLOCKALL;
MACRO_AUE AUE_MUNMAP;
MACRO_AUE AUE_NEWSYSTEMSHREG;
MACRO_AUE AUE_NFS;
MACRO_AUE AUE_NFSSVC_EXIT;
MACRO_AUE AUE_NFS_GETFH;
MACRO_AUE AUE_NFS_SVC;
MACRO_AUE AUE_NICE;
MACRO_AUE AUE_NMOUNT;
MACRO_AUE AUE_NTP_ADJTIME;
MACRO_AUE AUE_NULL;
MACRO_AUE AUE_OPEN;
MACRO_AUE AUE_OPENAT;
MACRO_AUE AUE_OPENAT_R;
MACRO_AUE AUE_OPENAT_RC;
MACRO_AUE AUE_OPENAT_RT;
MACRO_AUE AUE_OPENAT_RTC;
MACRO_AUE AUE_OPENAT_RW;
MACRO_AUE AUE_OPENAT_RWC;
MACRO_AUE AUE_OPENAT_RWT;
MACRO_AUE AUE_OPENAT_RWTC;
MACRO_AUE AUE_OPENAT_W;
MACRO_AUE AUE_OPENAT_WC;
MACRO_AUE AUE_OPENAT_WT;
MACRO_AUE AUE_OPENAT_WTC;
MACRO_AUE AUE_OPENBSM_FSTAT;
MACRO_AUE AUE_OPENBSM_REVOKE;
MACRO_AUE AUE_OPEN_EXTENDED;
MACRO_AUE AUE_OPEN_EXTENDED_R;
MACRO_AUE AUE_OPEN_EXTENDED_RC;
MACRO_AUE AUE_OPEN_EXTENDED_RT;
MACRO_AUE AUE_OPEN_EXTENDED_RTC;
MACRO_AUE AUE_OPEN_EXTENDED_RW;
MACRO_AUE AUE_OPEN_EXTENDED_RWC;
MACRO_AUE AUE_OPEN_EXTENDED_RWT;
MACRO_AUE AUE_OPEN_EXTENDED_RWTC;
MACRO_AUE AUE_OPEN_EXTENDED_W;
MACRO_AUE AUE_OPEN_EXTENDED_WC;
MACRO_AUE AUE_OPEN_EXTENDED_WT;
MACRO_AUE AUE_OPEN_EXTENDED_WTC;
MACRO_AUE AUE_OPEN_R;
MACRO_AUE AUE_OPEN_RC;
MACRO_AUE AUE_OPEN_RT;
MACRO_AUE AUE_OPEN_RTC;
MACRO_AUE AUE_OPEN_RW;
MACRO_AUE AUE_OPEN_RWC;
MACRO_AUE AUE_OPEN_RWT;
MACRO_AUE AUE_OPEN_RWTC;
MACRO_AUE AUE_OPEN_W;
MACRO_AUE AUE_OPEN_WC;
MACRO_AUE AUE_OPEN_WT;
MACRO_AUE AUE_OPEN_WTC;
MACRO_AUE AUE_OSETPGRP;
MACRO_AUE AUE_OSTAT;
MACRO_AUE AUE_O_ACCEPT;
MACRO_AUE AUE_O_ASYNCDAEMON;
MACRO_AUE AUE_O_CREAT;
MACRO_AUE AUE_O_EXECVE;
MACRO_AUE AUE_O_EXPORTFS;
MACRO_AUE AUE_O_FSTAT;
MACRO_AUE AUE_O_FTRUNCATE;
MACRO_AUE AUE_O_GETDENTS;
MACRO_AUE AUE_O_GETDIRENTRIES;
MACRO_AUE AUE_O_GETDOMAINNAME;
MACRO_AUE AUE_O_GETDOPT;
MACRO_AUE AUE_O_GETHOSTID;
MACRO_AUE AUE_O_GETHOSTNAME;
MACRO_AUE AUE_O_GETPAGESIZE;
MACRO_AUE AUE_O_GETPEERNAME;
MACRO_AUE AUE_O_GETRLIMIT;
MACRO_AUE AUE_O_GETSOCKNAME;
MACRO_AUE AUE_O_KILLPG;
MACRO_AUE AUE_O_LSEEK;
MACRO_AUE AUE_O_LSTAT;
MACRO_AUE AUE_O_MMAP;
MACRO_AUE AUE_O_MOUNT;
MACRO_AUE AUE_O_PCFS_MOUNT;
MACRO_AUE AUE_O_QUOTA;
MACRO_AUE AUE_O_RECV;
MACRO_AUE AUE_O_RECVFROM;
MACRO_AUE AUE_O_RECVMSG;
MACRO_AUE AUE_O_RESUBA;
MACRO_AUE AUE_O_RPAUSE;
MACRO_AUE AUE_O_SBREAK;
MACRO_AUE AUE_O_SEND;
MACRO_AUE AUE_O_SENDMSG;
MACRO_AUE AUE_O_SETDOMAINNAME;
MACRO_AUE AUE_O_SETDOPT;
MACRO_AUE AUE_O_SETHOSTID;
MACRO_AUE AUE_O_SETHOSTNAME;
MACRO_AUE AUE_O_SETQUOTA;
MACRO_AUE AUE_O_SETREGID;
MACRO_AUE AUE_O_SETREUID;
MACRO_AUE AUE_O_SETRLIMIT;
MACRO_AUE AUE_O_SIGBLOCK;
MACRO_AUE AUE_O_SIGSETMASK;
MACRO_AUE AUE_O_SIGSTACK;
MACRO_AUE AUE_O_SIGVEC;
MACRO_AUE AUE_O_STAT;
MACRO_AUE AUE_O_TRUNCATE;
MACRO_AUE AUE_O_UMOUNT;
MACRO_AUE AUE_O_USTATE;
MACRO_AUE AUE_O_VADVISE;
MACRO_AUE AUE_O_VHANGUP;
MACRO_AUE AUE_O_VLIMIT;
MACRO_AUE AUE_O_VREAD;
MACRO_AUE AUE_O_VTIMES;
MACRO_AUE AUE_O_VTRACE;
MACRO_AUE AUE_O_VWRITE;
MACRO_AUE AUE_O_WAIT;
MACRO_AUE AUE_O_WAIT3;
MACRO_AUE AUE_PATHCONF;
MACRO_AUE AUE_PDFORK;
MACRO_AUE AUE_PDGETPID;
MACRO_AUE AUE_PDKILL;
MACRO_AUE AUE_PDWAIT;
MACRO_AUE AUE_PERSONALITY;
MACRO_AUE AUE_PFLOAT;
MACRO_AUE AUE_PF_POLICY_ADDRULE;
MACRO_AUE AUE_PF_POLICY_ALGS;
MACRO_AUE AUE_PF_POLICY_CLONE;
MACRO_AUE AUE_PF_POLICY_DELRULE;
MACRO_AUE AUE_PF_POLICY_FLIP;
MACRO_AUE AUE_PF_POLICY_FLUSH;
MACRO_AUE AUE_PIDFORTASK;
MACRO_AUE AUE_PIPE;
MACRO_AUE AUE_PIVOT_ROOT;
MACRO_AUE AUE_POLL;
MACRO_AUE AUE_PORTFS;
MACRO_AUE AUE_POSIX_OPENPT;
MACRO_AUE AUE_POSIX_SPAWN;
MACRO_AUE AUE_PRCTL;
MACRO_AUE AUE_PREAD;
MACRO_AUE AUE_PREADV;
MACRO_AUE AUE_PRIOCNTLSYS;
MACRO_AUE AUE_PROCESSOR_BIND;
MACRO_AUE AUE_PROCINFO;
MACRO_AUE AUE_PROFILE;
MACRO_AUE AUE_PTHREADCANCELED;
MACRO_AUE AUE_PTHREADCHDIR;
MACRO_AUE AUE_PTHREADCONDBROADCAST;
MACRO_AUE AUE_PTHREADCONDDESTORY;
MACRO_AUE AUE_PTHREADCONDINIT;
MACRO_AUE AUE_PTHREADCONDSIGNAL;
MACRO_AUE AUE_PTHREADCONDWAIT;
MACRO_AUE AUE_PTHREADFCHDIR;
MACRO_AUE AUE_PTHREADKILL;
MACRO_AUE AUE_PTHREADMARK;
MACRO_AUE AUE_PTHREADMUTEXDESTROY;
MACRO_AUE AUE_PTHREADMUTEXINIT;
MACRO_AUE AUE_PTHREADMUTEXTRYLOCK;
MACRO_AUE AUE_PTHREADMUTEXUNLOCK;
MACRO_AUE AUE_PTHREADSIGMASK;
MACRO_AUE AUE_PTRACE;
MACRO_AUE AUE_PUTMSG;
MACRO_AUE AUE_PUTPMSG;
MACRO_AUE AUE_PWRITE;
MACRO_AUE AUE_PWRITEV;
MACRO_AUE AUE_P_ONLINE;
MACRO_AUE AUE_QUOTACTL;
MACRO_AUE AUE_READ;
MACRO_AUE AUE_READDIR;
MACRO_AUE AUE_READL;
MACRO_AUE AUE_READLINK;
MACRO_AUE AUE_READLINKAT;
MACRO_AUE AUE_READV;
MACRO_AUE AUE_READVL;
MACRO_AUE AUE_REBOOT;
MACRO_AUE AUE_RECV;
MACRO_AUE AUE_RECVFROM;
MACRO_AUE AUE_RECVMSG;
MACRO_AUE AUE_REMOVEXATTR;
MACRO_AUE AUE_RENAME;
MACRO_AUE AUE_RENAMEAT;
MACRO_AUE AUE_RESETSHFILE;
MACRO_AUE AUE_REVOKE;
MACRO_AUE AUE_RFORK;
MACRO_AUE AUE_RFSSYS;
MACRO_AUE AUE_RMDIR;
MACRO_AUE AUE_RTPRIO;
MACRO_AUE AUE_SBRK;
MACRO_AUE AUE_SCHED_GETPARAM;
MACRO_AUE AUE_SCHED_GETSCHEDULER;
MACRO_AUE AUE_SCHED_GET_PRIORITY_MAX;
MACRO_AUE AUE_SCHED_GET_PRIORITY_MIN;
MACRO_AUE AUE_SCHED_RR_GET_INTERVAL;
MACRO_AUE AUE_SCHED_SETPARAM;
MACRO_AUE AUE_SCHED_SETSCHEDULER;
MACRO_AUE AUE_SEARCHFS;
MACRO_AUE AUE_SELECT;
MACRO_AUE AUE_SEMCLOSE;
MACRO_AUE AUE_SEMCONFIG;
MACRO_AUE AUE_SEMCTL;
MACRO_AUE AUE_SEMCTL_GETALL;
MACRO_AUE AUE_SEMCTL_GETNCNT;
MACRO_AUE AUE_SEMCTL_GETPID;
MACRO_AUE AUE_SEMCTL_GETVAL;
MACRO_AUE AUE_SEMCTL_GETZCNT;
MACRO_AUE AUE_SEMCTL_RMID;
MACRO_AUE AUE_SEMCTL_SET;
MACRO_AUE AUE_SEMCTL_SETALL;
MACRO_AUE AUE_SEMCTL_SETVAL;
MACRO_AUE AUE_SEMCTL_STAT;
MACRO_AUE AUE_SEMDESTROY;
MACRO_AUE AUE_SEMGET;
MACRO_AUE AUE_SEMGETVALUE;
MACRO_AUE AUE_SEMINIT;
MACRO_AUE AUE_SEMOP;
MACRO_AUE AUE_SEMOPEN;
MACRO_AUE AUE_SEMPOST;
MACRO_AUE AUE_SEMSYS;
MACRO_AUE AUE_SEMTRYWAIT;
MACRO_AUE AUE_SEMUNLINK;
MACRO_AUE AUE_SEMWAIT;
MACRO_AUE AUE_SEMWAITSIGNAL;
MACRO_AUE AUE_SEND;
MACRO_AUE AUE_SENDFILE;
MACRO_AUE AUE_SENDMSG;
MACRO_AUE AUE_SENDTO;
MACRO_AUE AUE_SESSION_CLOSE;
MACRO_AUE AUE_SESSION_END;
MACRO_AUE AUE_SESSION_START;
MACRO_AUE AUE_SESSION_UPDATE;
MACRO_AUE AUE_SETATTRLIST;
MACRO_AUE AUE_SETAUDIT;
MACRO_AUE AUE_SETAUDIT_ADDR;
MACRO_AUE AUE_SETAUID;
MACRO_AUE AUE_SETDOMAINNAME;
MACRO_AUE AUE_SETEGID;
MACRO_AUE AUE_SETEUID;
MACRO_AUE AUE_SETFSGID;
MACRO_AUE AUE_SETFSUID;
MACRO_AUE AUE_SETGID;
MACRO_AUE AUE_SETGROUPS;
MACRO_AUE AUE_SETHOSTNAME;
MACRO_AUE AUE_SETITIMER;
MACRO_AUE AUE_SETKERNSTATE;
MACRO_AUE AUE_SETLCID;
MACRO_AUE AUE_SETLOGIN;
MACRO_AUE AUE_SETPGRP;
MACRO_AUE AUE_SETPPRIV;
MACRO_AUE AUE_SETPRIORITY;
MACRO_AUE AUE_SETPRIVEXEC;
MACRO_AUE AUE_SETREGID;
MACRO_AUE AUE_SETRESGID;
MACRO_AUE AUE_SETRESUID;
MACRO_AUE AUE_SETREUID;
MACRO_AUE AUE_SETRLIMIT;
MACRO_AUE AUE_SETSGROUPS;
MACRO_AUE AUE_SETSID;
MACRO_AUE AUE_SETSOCKOPT;
MACRO_AUE AUE_SETTID;
MACRO_AUE AUE_SETTIDWITHPID;
MACRO_AUE AUE_SETTIMEOFDAY;
MACRO_AUE AUE_SETUID;
MACRO_AUE AUE_SETUSERAUDIT;
MACRO_AUE AUE_SETWGROUPS;
MACRO_AUE AUE_SETXATTR;
MACRO_AUE AUE_SHAREDREGIONCHECK;
MACRO_AUE AUE_SHAREDREGIONMAP;
MACRO_AUE AUE_SHMAT;
MACRO_AUE AUE_SHMCTL;
MACRO_AUE AUE_SHMCTL_RMID;
MACRO_AUE AUE_SHMCTL_SET;
MACRO_AUE AUE_SHMCTL_STAT;
MACRO_AUE AUE_SHMDT;
MACRO_AUE AUE_SHMGET;
MACRO_AUE AUE_SHMOPEN;
MACRO_AUE AUE_SHMSYS;
MACRO_AUE AUE_SHMUNLINK;
MACRO_AUE AUE_SHUTDOWN;
MACRO_AUE AUE_SIGACTION;
MACRO_AUE AUE_SIGALTSTACK;
MACRO_AUE AUE_SIGPENDING;
MACRO_AUE AUE_SIGPROCMASK;
MACRO_AUE AUE_SIGRETURN;
MACRO_AUE AUE_SIGSUSPEND;
MACRO_AUE AUE_SIGWAIT;
MACRO_AUE AUE_SOCKACCEPT;
MACRO_AUE AUE_SOCKCONFIG;
MACRO_AUE AUE_SOCKCONNECT;
MACRO_AUE AUE_SOCKET;
MACRO_AUE AUE_SOCKETPAIR;
MACRO_AUE AUE_SOCKRECEIVE;
MACRO_AUE AUE_SOCKSEND;
MACRO_AUE AUE_SSTK;
MACRO_AUE AUE_STACKSNAPSHOT;
MACRO_AUE AUE_STAT;
MACRO_AUE AUE_STAT64;
MACRO_AUE AUE_STAT64_EXTENDED;
MACRO_AUE AUE_STATFS;
MACRO_AUE AUE_STATFS64;
MACRO_AUE AUE_STATV;
MACRO_AUE AUE_STATVFS;
MACRO_AUE AUE_STAT_EXTENDED;
MACRO_AUE AUE_STIME;
MACRO_AUE AUE_SWAPOFF;
MACRO_AUE AUE_SWAPON;
MACRO_AUE AUE_SYMLINK;
MACRO_AUE AUE_SYMLINKAT;
MACRO_AUE AUE_SYNC;
MACRO_AUE AUE_SYSARCH;
MACRO_AUE AUE_SYSCALL;
MACRO_AUE AUE_SYSCTL;
MACRO_AUE AUE_SYSCTL_NONADMIN;
MACRO_AUE AUE_SYSCTL_WRITE;
MACRO_AUE AUE_SYSINFO;
MACRO_AUE AUE_SYSTEMBOOT;
MACRO_AUE AUE_TABLE;
MACRO_AUE AUE_TASKFORPID;
MACRO_AUE AUE_TASKNAMEFORPID;
MACRO_AUE AUE_TRUNCATE;
MACRO_AUE AUE_UMASK;
MACRO_AUE AUE_UMASK_EXTENDED;
MACRO_AUE AUE_UMOUNT;
MACRO_AUE AUE_UMOUNT2;
MACRO_AUE AUE_UNDELETE;
MACRO_AUE AUE_UNLINK;
MACRO_AUE AUE_UNLINKAT;
MACRO_AUE AUE_UNMOUNT;
MACRO_AUE AUE_UPRIV;
MACRO_AUE AUE_USELIB;
MACRO_AUE AUE_UTIME;
MACRO_AUE AUE_UTIMES;
MACRO_AUE AUE_VFORK;
MACRO_AUE AUE_VM86;
MACRO_AUE AUE_VMPRESSUREMONITOR;
MACRO_AUE AUE_VPIXSYS;
MACRO_AUE AUE_VTRACE;
MACRO_AUE AUE_WAIT4;
MACRO_AUE AUE_WAITEVENT;
MACRO_AUE AUE_WAITID;
MACRO_AUE AUE_WATCHEVENT;
MACRO_AUE AUE_WORKQOPEN;
MACRO_AUE AUE_WORKQOPS;
MACRO_AUE AUE_WRITE;
MACRO_AUE AUE_WRITEL;
MACRO_AUE AUE_WRITEV;
MACRO_AUE AUE_WRITEVL;
MACRO_AUE AUE_XMKNOD;
MACRO_AUE AUE_XSTAT;
MACRO_AUE_at AUE_add_to_group;
MACRO_AUE_at AUE_admin_authentication;
MACRO_AUE_at AUE_allocate_fail;
MACRO_AUE_at AUE_allocate_succ;
MACRO_AUE_at AUE_at_create;
MACRO_AUE_at AUE_at_delete;
MACRO_AUE_at AUE_at_perm;
MACRO_AUE_at AUE_audit_recovery;
MACRO_AUE_at AUE_audit_shutdown;
MACRO_AUE_at AUE_audit_startup;
MACRO_AUE_at AUE_auth_user;
MACRO_AUE_at AUE_calife;
MACRO_AUE_at AUE_create_group;
MACRO_AUE_at AUE_create_user;
MACRO_AUE_at AUE_cron_invoke;
MACRO_AUE_at AUE_crontab_create;
MACRO_AUE_at AUE_crontab_delete;
MACRO_AUE_at AUE_crontab_mod;
MACRO_AUE_at AUE_crontab_perm;
MACRO_AUE_at AUE_deallocate_fail;
MACRO_AUE_at AUE_deallocate_succ;
MACRO_AUE_at AUE_delete_group;
MACRO_AUE_at AUE_delete_user;
MACRO_AUE_at AUE_disable_user;
MACRO_AUE_at AUE_enable_user;
MACRO_AUE_at AUE_filesystem_add;
MACRO_AUE_at AUE_filesystem_delete;
MACRO_AUE_at AUE_filesystem_modify;
MACRO_AUE_at AUE_ftpd;
MACRO_AUE_at AUE_ftpd_logout;
MACRO_AUE_at AUE_halt;
MACRO_AUE_at AUE_inetd_connect;
MACRO_AUE_at AUE_init;
MACRO_AUE_at AUE_kadmind_auth;
MACRO_AUE_at AUE_kadmind_unauth;
MACRO_AUE_at AUE_krb5kdc_as_req;
MACRO_AUE_at AUE_krb5kdc_tgs_req;
MACRO_AUE_at AUE_krb5kdc_tgs_req_2ndtktmm;
MACRO_AUE_at AUE_krb5kdc_tgs_req_alt_tgt;
MACRO_AUE_at AUE_listdevice_fail;
MACRO_AUE_at AUE_listdevice_succ;
MACRO_AUE_at AUE_login;
MACRO_AUE_at AUE_logout;
MACRO_AUE_at AUE_lw_login;
MACRO_AUE_at AUE_lw_logout;
MACRO_AUE_at AUE_modify_group;
MACRO_AUE_at AUE_modify_password;
MACRO_AUE_at AUE_modify_user;
MACRO_AUE_at AUE_mountd_mount;
MACRO_AUE_at AUE_mountd_umount;
MACRO_AUE_at AUE_newgrp_login;
MACRO_AUE_at AUE_openssh;
MACRO_AUE_at AUE_passwd;
MACRO_AUE_at AUE_poweroff;
MACRO_AUE_at AUE_prof_cmd;
MACRO_AUE_at AUE_reboot;
MACRO_AUE_at AUE_remove_from_group;
MACRO_AUE_at AUE_revoke_obj;
MACRO_AUE_at AUE_rexd;
MACRO_AUE_at AUE_rexecd;
MACRO_AUE_at AUE_rlogin;
MACRO_AUE_at AUE_role_login;
MACRO_AUE_at AUE_rshd;
MACRO_AUE_at AUE_shutdown;
MACRO_AUE_at AUE_ssauthint;
MACRO_AUE_at AUE_ssauthmech;
MACRO_AUE_at AUE_ssauthorize;
MACRO_AUE_at AUE_ssconn;
MACRO_AUE_at AUE_ssh;
MACRO_AUE_at AUE_su;
MACRO_AUE_at AUE_sudo;
MACRO_AUE_at AUE_telnet;
MACRO_AUE_at AUE_uadmin;
MACRO_AUP AUP_BINARY;
MACRO_AUP AUP_DECIMAL;
MACRO_AUP AUP_HEX;
MACRO_AUP AUP_OCTAL;
MACRO_AUP AUP_STRING;
MACRO_AUR AUR_BYTE;
MACRO_AUR AUR_CHAR;
MACRO_AUR AUR_INT;
MACRO_AUR AUR_INT32;
MACRO_AUR AUR_INT64;
MACRO_AUR AUR_SHORT;
MACRO_AUTHTYPE AUTHTYPE_CNT;
MACRO_AUTHTYPE AUTHTYPE_KERBEROS_V4;
MACRO_AUTHTYPE AUTHTYPE_KERBEROS_V5;
MACRO_AUTHTYPE AUTHTYPE_MINK;
MACRO_AUTHTYPE AUTHTYPE_NULL;
MACRO_AUTHTYPE AUTHTYPE_SPX;
MACRO_AUTHTYPE AUTHTYPE_TEST;
auth_stat AUTH_BADCRED;
auth_stat AUTH_BADVERF;
auth_stat AUTH_DECODE;
MACRO_AUTH_NONE AUTH_DES;
reject_stat AUTH_ERROR;
auth_stat AUTH_FAILED;
MACRO_AUTH AUTH_HOW_MASK;
MACRO_AUTH AUTH_HOW_MUTUAL;
MACRO_AUTH AUTH_HOW_ONE_WAY;
auth_stat AUTH_INVALIDRESP;
auth_stat AUTH_KERB_GENERIC;
auth_stat AUTH_NET_ADDR;
MACRO_AUTH_NONE AUTH_NONE;
MACRO_AUTH_NONE AUTH_NULL;
auth_stat AUTH_OK;
auth_stat AUTH_REJECTEDCRED;
auth_stat AUTH_REJECTEDVERF;
MACRO_AUTH_NONE AUTH_SHORT;
auth_stat AUTH_TIMEEXPIRE;
auth_stat AUTH_TKT_FILE;
auth_stat AUTH_TOOWEAK;
MACRO_AUTH_NONE AUTH_UNIX;
MACRO_AUTH AUTH_WHO_CLIENT;
MACRO_AUTH AUTH_WHO_MASK;
MACRO_AUTH AUTH_WHO_SERVER;
MACRO_AUTO AUTO_FREE_OLDDATA;
MACRO_AUTO AUTO_FREE_STATEREF;
MACRO_AUT AUT_ACE;
MACRO_AUT AUT_ACL;
MACRO_AUT AUT_ARG;
MACRO_AUT AUT_ARG32;
MACRO_AUT AUT_ARG64;
MACRO_AUT AUT_ATTR;
MACRO_AUT AUT_ATTR32;
MACRO_AUT AUT_ATTR64;
MACRO_AUT AUT_CMD;
MACRO_AUT AUT_DATA;
MACRO_AUT AUT_EXEC_ARGS;
MACRO_AUT AUT_EXEC_ENV;
MACRO_AUT AUT_EXIT;
MACRO_AUT AUT_GROUPS;
MACRO_AUT AUT_HEADER;
MACRO_AUT AUT_HEADER32;
MACRO_AUT AUT_HEADER32_EX;
MACRO_AUT AUT_HEADER64;
MACRO_AUT AUT_HEADER64_EX;
MACRO_AUT AUT_HOST;
MACRO_AUT AUT_INVALID;
MACRO_AUT AUT_IN_ADDR;
MACRO_AUT AUT_IN_ADDR_EX;
MACRO_AUT AUT_IP;
MACRO_AUT AUT_IPC;
MACRO_AUT AUT_IPC_PERM;
MACRO_AUT AUT_IPORT;
MACRO_AUT AUT_LABEL;
MACRO_AUT AUT_LIAISON;
MACRO_AUT AUT_NEWGROUPS;
MACRO_AUT AUT_OHEADER;
MACRO_AUT AUT_OPAQUE;
MACRO_AUT AUT_OTHER_FILE;
MACRO_AUT AUT_OTHER_FILE32;
MACRO_AUT AUT_OTHER_FILE64;
MACRO_AUT AUT_PATH;
MACRO_AUT AUT_PRIV;
MACRO_AUT AUT_PROCESS;
MACRO_AUT AUT_PROCESS32;
MACRO_AUT AUT_PROCESS32_EX;
MACRO_AUT AUT_PROCESS64;
MACRO_AUT AUT_PROCESS64_EX;
MACRO_AUT AUT_RETURN;
MACRO_AUT AUT_RETURN32;
MACRO_AUT AUT_RETURN64;
MACRO_AUT AUT_SEQ;
MACRO_AUT AUT_SOCKET;
MACRO_AUT AUT_SOCKET_EX;
MACRO_AUT AUT_SOCKINET128;
MACRO_AUT AUT_SOCKINET32;
MACRO_AUT AUT_SOCKUNIX;
MACRO_AUT AUT_SUBJECT;
MACRO_AUT AUT_SUBJECT32;
MACRO_AUT AUT_SUBJECT32_EX;
MACRO_AUT AUT_SUBJECT64;
MACRO_AUT AUT_SUBJECT64_EX;
MACRO_AUT AUT_TEXT;
MACRO_AUT AUT_TRAILER;
MACRO_AUT_TRAILER AUT_TRAILER_MAGIC;
MACRO_AUT AUT_UNAUTH;
MACRO_AUT AUT_UPRIV;
MACRO_AUT AUT_XATOM;
MACRO_AUT AUT_XATPATH;
MACRO_AUT AUT_XCLIENT;
MACRO_AUT AUT_XCOLORMAP;
MACRO_AUT AUT_XCURSOR;
MACRO_AUT AUT_XFONT;
MACRO_AUT AUT_XGC;
MACRO_AUT AUT_XOBJ;
MACRO_AUT AUT_XPIXMAP;
MACRO_AUT AUT_XPROPERTY;
MACRO_AUT AUT_XPROTO;
MACRO_AUT AUT_XSELECT;
MACRO_AUT AUT_XWINDOW;
MACRO_AUT AUT_ZONENAME;
MACRO_AU AU_ASSIGN_ASID;
MACRO_AU_PRS AU_CLASS_DESC_MAX;
MACRO_AU_PRS AU_CLASS_NAME_MAX;
MACRO_AU AU_DEFAUDITID;
MACRO_AU AU_DEFAUDITSID;
MACRO_AU_PRS AU_EVENT_DESC_MAX;
MACRO_AU_PRS AU_EVENT_NAME_MAX;
MACRO_AU_FS AU_FS_MINFREE;
MACRO_AU_FS AU_IPv4;
MACRO_AU_FS AU_IPv6;
MACRO_AU_PRS AU_LINE_MAX;
MACRO_AU_TO AU_OFLAG_NONE;
MACRO_AU_TO AU_OFLAG_NORESOLVE;
MACRO_AU_TO AU_OFLAG_RAW;
MACRO_AU_TO AU_OFLAG_SHORT;
MACRO_AU_TO AU_OFLAG_XML;
MACRO_AU_PRS AU_PRS_BOTH;
MACRO_AU_PRS AU_PRS_FAILURE;
MACRO_AU_PRS AU_PRS_REREAD;
MACRO_AU_PRS AU_PRS_SUCCESS;
MACRO_AU_PRS AU_PRS_USECACHE;
MACRO_AU_TO AU_TO_NO_WRITE;
MACRO_AU_TO AU_TO_WRITE;
MACRO_AU_UNIMPL AU_UNIMPL;
MACRO_AU_PRS AU_USER_NAME_MAX;
MACRO_AFORK AXSIG;
MACRO_AYT AYT;
MACRO_A_NORMAL A_ALTCHARSET;
MACRO_A_NORMAL A_ATTRIBUTES;
MACRO_A_NORMAL A_BLINK;
MACRO_A_NORMAL A_BOLD;
MACRO_A_NORMAL A_CHARTEXT;
MACRO_A_NORMAL A_COLOR;
MACRO_A_NORMAL A_DIM;
MACRO_A A_GETCAR;
MACRO_A A_GETCLASS;
MACRO_A A_GETCOND;
MACRO_A A_GETCWD;
MACRO_A A_GETFSIZE;
MACRO_A A_GETKAUDIT;
MACRO_A A_GETKMASK;
MACRO_A A_GETPINFO;
MACRO_A A_GETPINFO_ADDR;
MACRO_A A_GETPOLICY;
MACRO_A A_GETQCTRL;
MACRO_A A_GETSFLAGS;
MACRO_A A_GETSINFO_ADDR;
MACRO_A A_GETSTAT;
MACRO_A_NORMAL A_HORIZONTAL;
MACRO_A_NORMAL A_INVIS;
MACRO_A_NORMAL A_LEFT;
MACRO_A_NORMAL A_LOW;
MACRO_A_NORMAL A_NORMAL;
MACRO_A A_OLDGETCOND;
MACRO_A A_OLDGETPOLICY;
MACRO_A A_OLDGETQCTRL;
MACRO_A A_OLDSETCOND;
MACRO_A A_OLDSETPOLICY;
MACRO_A A_OLDSETQCTRL;
MACRO_A_NORMAL A_PROTECT;
MACRO_A_NORMAL A_REVERSE;
MACRO_A_NORMAL A_RIGHT;
MACRO_A A_SENDTRIGGER;
MACRO_A A_SETCLASS;
MACRO_A A_SETCOND;
MACRO_A A_SETFSIZE;
MACRO_A A_SETKAUDIT;
MACRO_A A_SETKMASK;
MACRO_A A_SETPMASK;
MACRO_A A_SETPOLICY;
MACRO_A A_SETQCTRL;
MACRO_A A_SETSFLAGS;
MACRO_A A_SETSMASK;
MACRO_A A_SETSTAT;
MACRO_A A_SETUMASK;
MACRO_A_NORMAL A_STANDOUT;
MACRO_A_NORMAL A_TOP;
MACRO_A_NORMAL A_UNDERLINE;
MACRO_A_NORMAL A_VERTICAL;
MACRO_B0 B0;
MACRO_B110 B110;
MACRO_B115200 B115200;
MACRO_B1200 B1200;
MACRO_B134 B134;
MACRO_B14400 B14400;
MACRO_B150 B150;
MACRO_B1800 B1800;
MACRO_B19200 B19200;
MACRO_B200 B200;
MACRO_B230400 B230400;
MACRO_B2400 B2400;
MACRO_B28800 B28800;
MACRO_B300 B300;
MACRO_B38400 B38400;
MACRO_B4800 B4800;
MACRO_B0 B50;
MACRO_B57600 B57600;
MACRO_B600 B600;
MACRO_B7200 B7200;
MACRO_B75 B75;
MACRO_B76800 B76800;
MACRO_B9600 B9600;
MACRO_BABY BABY_STEP_ALL;
MACRO_BABY BABY_STEP_CHECK_CONSISTENCY;
MACRO_BABY BABY_STEP_CHECK_OBJECT;
MACRO_BABY BABY_STEP_CHECK_VALUE;
MACRO_BABY BABY_STEP_COMMIT;
MACRO_BABY BABY_STEP_IRREVERSIBLE_COMMIT;
MACRO_BABY BABY_STEP_NONE;
MACRO_BABY BABY_STEP_OBJECT_LOOKUP;
MACRO_BABY BABY_STEP_POST_REQUEST;
MACRO_BABY BABY_STEP_PRE_REQUEST;
MACRO_BABY BABY_STEP_ROW_CREATE;
MACRO_BABY BABY_STEP_SET_VALUE;
MACRO_BABY BABY_STEP_SET_VALUES;
MACRO_BABY BABY_STEP_UNDO_CLEANUP;
MACRO_BABY BABY_STEP_UNDO_COMMIT;
MACRO_BABY BABY_STEP_UNDO_SET;
MACRO_BABY BABY_STEP_UNDO_SETS;
MACRO_BABY BABY_STEP_UNDO_SETUP;
MACRO_ORDINARY BACKSPACE;
MACRO_BADADDR BADADDR;
MACRO_BADADDR BADCTLADDR;
MACRO_BADVERSION BADVERSION;
MACRO_BASE BASE_BUFFER_SIZE;
MACRO_BC BC_BASE_MAX;
MACRO_BC BC_DIM_MAX;
MACRO_BC BC_SCALE_MAX;
MACRO_BC BC_STRING_MAX;
MACRO_BF BF_BLOCK;
MACRO_BF BF_DECRYPT;
MACRO_BF BF_ENCRYPT;
MACRO_BF BF_ROUNDS;
MACRO_ENDIAN BIG_ENDIAN;
MACRO_PIPE_SIZE BIG_PIPE_SIZE;
MACRO_BIND BIND_IMMEDIATE_MASK;
MACRO_BIND BIND_OPCODE_ADD_ADDR_ULEB;
MACRO_BIND BIND_OPCODE_DONE;
MACRO_BIND BIND_OPCODE_DO_BIND;
MACRO_BIND BIND_OPCODE_DO_BIND_ADD_ADDR_IMM_SCALED;
MACRO_BIND BIND_OPCODE_DO_BIND_ADD_ADDR_ULEB;
MACRO_BIND BIND_OPCODE_DO_BIND_ULEB_TIMES_SKIPPING_ULEB;
MACRO_BIND BIND_OPCODE_MASK;
MACRO_BIND BIND_OPCODE_SET_ADDEND_SLEB;
MACRO_BIND BIND_OPCODE_SET_DYLIB_ORDINAL_IMM;
MACRO_BIND BIND_OPCODE_SET_DYLIB_ORDINAL_ULEB;
MACRO_BIND BIND_OPCODE_SET_DYLIB_SPECIAL_IMM;
MACRO_BIND BIND_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB;
MACRO_BIND BIND_OPCODE_SET_SYMBOL_TRAILING_FLAGS_IMM;
MACRO_BIND BIND_OPCODE_SET_TYPE_IMM;
MACRO_BIND BIND_SPECIAL_DYLIB_FLAT_LOOKUP;
MACRO_BIND BIND_SPECIAL_DYLIB_MAIN_EXECUTABLE;
MACRO_BIND BIND_SPECIAL_DYLIB_SELF;
MACRO_BIND BIND_SYMBOL_FLAGS_NON_WEAK_DEFINITION;
MACRO_BIND BIND_SYMBOL_FLAGS_WEAK_IMPORT;
MACRO_BIND BIND_TYPE_POINTER;
MACRO_BIND BIND_TYPE_TEXT_ABSOLUTE32;
MACRO_BIND BIND_TYPE_TEXT_PCREL32;
MACRO_BIOCFLUSH BIOCFLUSH;
MACRO_BIOCPROMISC BIOCPROMISC;
MACRO_BIO BIO_BIND_NORMAL;
MACRO_BIO BIO_BIND_REUSEADDR;
MACRO_BIO BIO_BIND_REUSEADDR_IF_UNUSED;
MACRO_BIO BIO_CB_CTRL;
MACRO_BIO BIO_CB_FREE;
MACRO_BIO BIO_CB_GETS;
MACRO_BIO BIO_CB_PUTS;
MACRO_BIO BIO_CB_READ;
MACRO_BIO BIO_CB_RETURN;
MACRO_BIO BIO_CB_WRITE;
MACRO_BIO BIO_CLOSE;
MACRO_BIO BIO_CONN_S_BEFORE;
MACRO_BIO BIO_CONN_S_BLOCKED_CONNECT;
MACRO_BIO BIO_CONN_S_CONNECT;
MACRO_BIO BIO_CONN_S_CREATE_SOCKET;
MACRO_BIO BIO_CONN_S_GET_IP;
MACRO_BIO BIO_CONN_S_GET_PORT;
MACRO_BIO BIO_CONN_S_NBIO;
MACRO_BIO BIO_CONN_S_OK;
MACRO_BIO BIO_CTRL_DGRAM_CONNECT;
MACRO_BIO BIO_CTRL_DGRAM_GET_MTU;
MACRO_BIO BIO_CTRL_DGRAM_GET_PEER;
MACRO_BIO BIO_CTRL_DGRAM_GET_RECV_TIMEOUT;
MACRO_BIO BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP;
MACRO_BIO BIO_CTRL_DGRAM_GET_SEND_TIMEOUT;
MACRO_BIO BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP;
MACRO_BIO BIO_CTRL_DGRAM_MTU_DISCOVER;
MACRO_BIO BIO_CTRL_DGRAM_MTU_EXCEEDED;
MACRO_BIO BIO_CTRL_DGRAM_QUERY_MTU;
MACRO_BIO BIO_CTRL_DGRAM_SET_CONNECTED;
MACRO_BIO BIO_CTRL_DGRAM_SET_MTU;
MACRO_BIO BIO_CTRL_DGRAM_SET_NEXT_TIMEOUT;
MACRO_BIO BIO_CTRL_DGRAM_SET_PEER;
MACRO_BIO BIO_CTRL_DGRAM_SET_RECV_TIMEOUT;
MACRO_BIO BIO_CTRL_DGRAM_SET_SEND_TIMEOUT;
MACRO_BIO BIO_CTRL_DUP;
MACRO_BIO BIO_CTRL_EOF;
MACRO_BIO BIO_CTRL_FLUSH;
MACRO_BIO BIO_CTRL_GET;
MACRO_BIO BIO_CTRL_GET_CALLBACK;
MACRO_BIO BIO_CTRL_GET_CLOSE;
MACRO_BIO BIO_CTRL_INFO;
MACRO_BIO BIO_CTRL_PENDING;
MACRO_BIO BIO_CTRL_POP;
MACRO_BIO BIO_CTRL_PUSH;
MACRO_BIO BIO_CTRL_RESET;
MACRO_BIO BIO_CTRL_SET;
MACRO_BIO BIO_CTRL_SET_CALLBACK;
MACRO_BIO BIO_CTRL_SET_CLOSE;
MACRO_BIO BIO_CTRL_SET_FILENAME;
MACRO_BIO BIO_CTRL_WPENDING;
MACRO_BIO BIO_C_DESTROY_BIO_PAIR;
MACRO_BIO BIO_C_DO_STATE_MACHINE;
MACRO_BIO BIO_C_FILE_SEEK;
MACRO_BIO BIO_C_FILE_TELL;
MACRO_BIO BIO_C_GET_ACCEPT;
MACRO_BIO BIO_C_GET_BIND_MODE;
MACRO_BIO BIO_C_GET_BUFF_NUM_LINES;
MACRO_BIO BIO_C_GET_BUF_MEM_PTR;
MACRO_BIO BIO_C_GET_CIPHER_CTX;
MACRO_BIO BIO_C_GET_CIPHER_STATUS;
MACRO_BIO BIO_C_GET_CONNECT;
MACRO_BIO BIO_C_GET_FD;
MACRO_BIO BIO_C_GET_FILE_PTR;
MACRO_BIO BIO_C_GET_MD;
MACRO_BIO BIO_C_GET_MD_CTX;
MACRO_BIO BIO_C_GET_PROXY_PARAM;
MACRO_BIO BIO_C_GET_READ_REQUEST;
MACRO_BIO BIO_C_GET_SOCKS;
MACRO_BIO BIO_C_GET_SSL;
MACRO_BIO BIO_C_GET_SSL_NUM_RENEGOTIATES;
MACRO_BIO BIO_C_GET_WRITE_BUF_SIZE;
MACRO_BIO BIO_C_GET_WRITE_GUARANTEE;
MACRO_BIO BIO_C_MAKE_BIO_PAIR;
MACRO_BIO BIO_C_NREAD;
MACRO_BIO BIO_C_NREAD0;
MACRO_BIO BIO_C_NWRITE;
MACRO_BIO BIO_C_NWRITE0;
MACRO_BIO BIO_C_RESET_READ_REQUEST;
MACRO_BIO BIO_C_SET_ACCEPT;
MACRO_BIO BIO_C_SET_BIND_MODE;
MACRO_BIO BIO_C_SET_BUFF_READ_DATA;
MACRO_BIO BIO_C_SET_BUFF_SIZE;
MACRO_BIO BIO_C_SET_BUF_MEM;
MACRO_BIO BIO_C_SET_BUF_MEM_EOF_RETURN;
MACRO_BIO BIO_C_SET_CONNECT;
MACRO_BIO BIO_C_SET_FD;
MACRO_BIO BIO_C_SET_FILENAME;
MACRO_BIO BIO_C_SET_FILE_PTR;
MACRO_BIO BIO_C_SET_MD;
MACRO_BIO BIO_C_SET_MD_CTX;
MACRO_BIO BIO_C_SET_NBIO;
MACRO_BIO BIO_C_SET_PROXY_PARAM;
MACRO_BIO BIO_C_SET_SOCKS;
MACRO_BIO BIO_C_SET_SSL;
MACRO_BIO BIO_C_SET_SSL_RENEGOTIATE_BYTES;
MACRO_BIO BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT;
MACRO_BIO BIO_C_SET_WRITE_BUF_SIZE;
MACRO_BIO BIO_C_SHUTDOWN_WR;
MACRO_BIO BIO_C_SSL_MODE;
MACRO_BIO BIO_FLAGS_BASE64_NO_NL;
MACRO_BIO BIO_FLAGS_IO_SPECIAL;
MACRO_BIO BIO_FLAGS_MEM_RDONLY;
MACRO_BIO BIO_FLAGS_READ;
MACRO_BIO BIO_FLAGS_RWS;
MACRO_BIO BIO_FLAGS_SHOULD_RETRY;
MACRO_BIO BIO_FLAGS_UPLINK;
MACRO_BIO BIO_FLAGS_WRITE;
MACRO_BIO BIO_FP_APPEND;
MACRO_BIO BIO_FP_READ;
MACRO_BIO BIO_FP_TEXT;
MACRO_BIO BIO_FP_WRITE;
MACRO_BIO BIO_F_ACPT_STATE;
MACRO_BIO BIO_F_BIO_ACCEPT;
MACRO_BIO BIO_F_BIO_BER_GET_HEADER;
MACRO_BIO BIO_F_BIO_CALLBACK_CTRL;
MACRO_BIO BIO_F_BIO_CTRL;
MACRO_BIO BIO_F_BIO_GETHOSTBYNAME;
MACRO_BIO BIO_F_BIO_GETS;
MACRO_BIO BIO_F_BIO_GET_ACCEPT_SOCKET;
MACRO_BIO BIO_F_BIO_GET_HOST_IP;
MACRO_BIO BIO_F_BIO_GET_PORT;
MACRO_BIO BIO_F_BIO_MAKE_PAIR;
MACRO_BIO BIO_F_BIO_NEW;
MACRO_BIO BIO_F_BIO_NEW_FILE;
MACRO_BIO BIO_F_BIO_NEW_MEM_BUF;
MACRO_BIO BIO_F_BIO_NREAD;
MACRO_BIO BIO_F_BIO_NREAD0;
MACRO_BIO BIO_F_BIO_NWRITE;
MACRO_BIO BIO_F_BIO_NWRITE0;
MACRO_BIO BIO_F_BIO_PUTS;
MACRO_BIO BIO_F_BIO_READ;
MACRO_BIO BIO_F_BIO_SOCK_INIT;
MACRO_BIO BIO_F_BIO_WRITE;
MACRO_BIO BIO_F_BUFFER_CTRL;
MACRO_BIO BIO_F_CONN_CTRL;
MACRO_BIO BIO_F_CONN_STATE;
MACRO_BIO BIO_F_FILE_CTRL;
MACRO_BIO BIO_F_FILE_READ;
MACRO_BIO BIO_F_LINEBUFFER_CTRL;
MACRO_BIO BIO_F_MEM_READ;
MACRO_BIO BIO_F_MEM_WRITE;
MACRO_BIO BIO_F_SSL_NEW;
MACRO_BIO BIO_F_WSASTARTUP;
MACRO_BIO BIO_GHBN_CTRL_CACHE_SIZE;
MACRO_BIO BIO_GHBN_CTRL_FLUSH;
MACRO_BIO BIO_GHBN_CTRL_GET_ENTRY;
MACRO_BIO BIO_GHBN_CTRL_HITS;
MACRO_BIO BIO_GHBN_CTRL_MISSES;
MACRO_BIO BIO_NOCLOSE;
MACRO_BIO BIO_RR_ACCEPT;
MACRO_BIO BIO_RR_CONNECT;
MACRO_BIO BIO_RR_SSL_X509_LOOKUP;
MACRO_BIO BIO_R_ACCEPT_ERROR;
MACRO_BIO BIO_R_BAD_FOPEN_MODE;
MACRO_BIO BIO_R_BAD_HOSTNAME_LOOKUP;
MACRO_BIO BIO_R_BROKEN_PIPE;
MACRO_BIO BIO_R_CONNECT_ERROR;
MACRO_BIO BIO_R_EOF_ON_MEMORY_BIO;
MACRO_BIO BIO_R_ERROR_SETTING_NBIO;
MACRO_BIO BIO_R_ERROR_SETTING_NBIO_ON_ACCEPTED_SOCKET;
MACRO_BIO BIO_R_ERROR_SETTING_NBIO_ON_ACCEPT_SOCKET;
MACRO_BIO BIO_R_GETHOSTBYNAME_ADDR_IS_NOT_AF_INET;
MACRO_BIO BIO_R_INVALID_ARGUMENT;
MACRO_BIO BIO_R_INVALID_IP_ADDRESS;
MACRO_BIO BIO_R_IN_USE;
MACRO_BIO BIO_R_KEEPALIVE;
MACRO_BIO BIO_R_NBIO_CONNECT_ERROR;
MACRO_BIO BIO_R_NO_ACCEPT_PORT_SPECIFIED;
MACRO_BIO BIO_R_NO_HOSTNAME_SPECIFIED;
MACRO_BIO BIO_R_NO_PORT_DEFINED;
MACRO_BIO BIO_R_NO_PORT_SPECIFIED;
MACRO_BIO BIO_R_NO_SUCH_FILE;
MACRO_BIO BIO_R_NULL_PARAMETER;
MACRO_BIO BIO_R_TAG_MISMATCH;
MACRO_BIO BIO_R_UNABLE_TO_BIND_SOCKET;
MACRO_BIO BIO_R_UNABLE_TO_CREATE_SOCKET;
MACRO_BIO BIO_R_UNABLE_TO_LISTEN_SOCKET;
MACRO_BIO BIO_R_UNINITIALIZED;
MACRO_BIO BIO_R_UNSUPPORTED_METHOD;
MACRO_BIO BIO_R_WRITE_TO_READ_ONLY_BIO;
MACRO_BIO BIO_R_WSASTARTUP;
MACRO_BIO BIO_TYPE_ACCEPT;
MACRO_BIO BIO_TYPE_BASE64;
MACRO_BIO BIO_TYPE_BER;
MACRO_BIO BIO_TYPE_BIO;
MACRO_BIO BIO_TYPE_BUFFER;
MACRO_BIO BIO_TYPE_CIPHER;
MACRO_BIO BIO_TYPE_COMP;
MACRO_BIO BIO_TYPE_CONNECT;
MACRO_BIO BIO_TYPE_DESCRIPTOR;
MACRO_BIO BIO_TYPE_DGRAM;
MACRO_BIO BIO_TYPE_FD;
MACRO_BIO BIO_TYPE_FILE;
MACRO_BIO BIO_TYPE_FILTER;
MACRO_BIO BIO_TYPE_LINEBUFFER;
MACRO_BIO BIO_TYPE_MD;
MACRO_BIO BIO_TYPE_MEM;
MACRO_BIO BIO_TYPE_NBIO_TEST;
MACRO_BIO BIO_TYPE_NONE;
MACRO_BIO BIO_TYPE_NULL;
MACRO_BIO BIO_TYPE_NULL_FILTER;
MACRO_BIO BIO_TYPE_PROXY_CLIENT;
MACRO_BIO BIO_TYPE_PROXY_SERVER;
MACRO_BIO BIO_TYPE_SOCKET;
MACRO_BIO BIO_TYPE_SOURCE_SINK;
MACRO_BIO BIO_TYPE_SSL;
MACRO_BITSTRING BITSTRING;
MACRO_BLKDEV BLKDEV_IOSIZE;
MACRO_BLKTYPE BLKTYPE;
MACRO_BLK_EOR BLK_BYTECOUNT;
MACRO_BLK_EOR BLK_EOF;
MACRO_BLK_EOR BLK_EOR;
MACRO_BLK_EOR BLK_ERRORS;
MACRO_BLK BLK_META;
MACRO_BLK BLK_ONLYVALID;
MACRO_BLK BLK_READ;
MACRO_BLK_EOR BLK_RESTART;
MACRO_BLK BLK_WRITE;
$B51E1DCDB81FA1FB4EE66033B9782554 BLOCK_ALL_COPY_DISPOSE_FLAGS;
$895EE9033D6821791DEBC30787A9414E BLOCK_BYREF_CALLER;
$B9B833D4AB600AEF2FFBDAC6174DED45 BLOCK_BYREF_HAS_COPY_DISPOSE;
$B9B833D4AB600AEF2FFBDAC6174DED45 BLOCK_BYREF_IS_GC;
$B9B833D4AB600AEF2FFBDAC6174DED45 BLOCK_BYREF_LAYOUT_EXTENDED;
$B9B833D4AB600AEF2FFBDAC6174DED45 BLOCK_BYREF_LAYOUT_MASK;
$B9B833D4AB600AEF2FFBDAC6174DED45 BLOCK_BYREF_LAYOUT_NON_OBJECT;
$B9B833D4AB600AEF2FFBDAC6174DED45 BLOCK_BYREF_LAYOUT_STRONG;
$B9B833D4AB600AEF2FFBDAC6174DED45 BLOCK_BYREF_LAYOUT_UNRETAINED;
$B9B833D4AB600AEF2FFBDAC6174DED45 BLOCK_BYREF_LAYOUT_WEAK;
$B9B833D4AB600AEF2FFBDAC6174DED45 BLOCK_BYREF_NEEDS_FREE;
$5FCD074AE9B9B407C11FF612FA90423F BLOCK_DEALLOCATING;
MACRO_BLOCK BLOCK_DESCRIPTOR_1;
MACRO_BLOCK BLOCK_DESCRIPTOR_2;
MACRO_BLOCK BLOCK_DESCRIPTOR_3;
$895EE9033D6821791DEBC30787A9414E BLOCK_FIELD_IS_BLOCK;
$895EE9033D6821791DEBC30787A9414E BLOCK_FIELD_IS_BYREF;
$895EE9033D6821791DEBC30787A9414E BLOCK_FIELD_IS_OBJECT;
$895EE9033D6821791DEBC30787A9414E BLOCK_FIELD_IS_WEAK;
$5FCD074AE9B9B407C11FF612FA90423F BLOCK_HAS_COPY_DISPOSE;
$5FCD074AE9B9B407C11FF612FA90423F BLOCK_HAS_CTOR;
$5FCD074AE9B9B407C11FF612FA90423F BLOCK_HAS_EXTENDED_LAYOUT;
$5FCD074AE9B9B407C11FF612FA90423F BLOCK_HAS_SIGNATURE;
$5FCD074AE9B9B407C11FF612FA90423F BLOCK_IS_GC;
$5FCD074AE9B9B407C11FF612FA90423F BLOCK_IS_GLOBAL;
$105EF7DF523ADCCD68A3E1D04A367638 BLOCK_LAYOUT_BYREF;
$105EF7DF523ADCCD68A3E1D04A367638 BLOCK_LAYOUT_ESCAPE;
$105EF7DF523ADCCD68A3E1D04A367638 BLOCK_LAYOUT_NON_OBJECT_BYTES;
$105EF7DF523ADCCD68A3E1D04A367638 BLOCK_LAYOUT_NON_OBJECT_WORDS;
$105EF7DF523ADCCD68A3E1D04A367638 BLOCK_LAYOUT_STRONG;
$105EF7DF523ADCCD68A3E1D04A367638 BLOCK_LAYOUT_UNKNOWN_WORDS_7;
$105EF7DF523ADCCD68A3E1D04A367638 BLOCK_LAYOUT_UNKNOWN_WORDS_8;
$105EF7DF523ADCCD68A3E1D04A367638 BLOCK_LAYOUT_UNKNOWN_WORDS_9;
$105EF7DF523ADCCD68A3E1D04A367638 BLOCK_LAYOUT_UNKNOWN_WORDS_A;
$105EF7DF523ADCCD68A3E1D04A367638 BLOCK_LAYOUT_UNRETAINED;
$105EF7DF523ADCCD68A3E1D04A367638 BLOCK_LAYOUT_UNUSED_B;
$105EF7DF523ADCCD68A3E1D04A367638 BLOCK_LAYOUT_UNUSED_C;
$105EF7DF523ADCCD68A3E1D04A367638 BLOCK_LAYOUT_UNUSED_D;
$105EF7DF523ADCCD68A3E1D04A367638 BLOCK_LAYOUT_UNUSED_E;
$105EF7DF523ADCCD68A3E1D04A367638 BLOCK_LAYOUT_UNUSED_F;
$105EF7DF523ADCCD68A3E1D04A367638 BLOCK_LAYOUT_WEAK;
$5FCD074AE9B9B407C11FF612FA90423F BLOCK_NEEDS_FREE;
$5FCD074AE9B9B407C11FF612FA90423F BLOCK_REFCOUNT_MASK;
$5FCD074AE9B9B407C11FF612FA90423F BLOCK_USE_STRET;
MACRO_BN BN_BITS;
MACRO_BN BN_BITS2;
MACRO_BN BN_BITS4;
MACRO_BN BN_BLINDING_NO_RECREATE;
MACRO_BN BN_BLINDING_NO_UPDATE;
MACRO_BN BN_BYTES;
MACRO_BN BN_DEC_CONV;
MACRO_BN BN_DEC_NUM;
MACRO_BN BN_DEFAULT_BITS;
MACRO_BN BN_FLG_CONSTTIME;
MACRO_BN BN_FLG_EXP_CONSTTIME;
MACRO_BN BN_FLG_FREE;
MACRO_BN BN_FLG_MALLOCED;
MACRO_BN BN_FLG_STATIC_DATA;
MACRO_BN BN_F_BNRAND;
MACRO_BN BN_F_BN_BLINDING_CONVERT_EX;
MACRO_BN BN_F_BN_BLINDING_CREATE_PARAM;
MACRO_BN BN_F_BN_BLINDING_INVERT_EX;
MACRO_BN BN_F_BN_BLINDING_NEW;
MACRO_BN BN_F_BN_BLINDING_UPDATE;
MACRO_BN BN_F_BN_BN2DEC;
MACRO_BN BN_F_BN_BN2HEX;
MACRO_BN BN_F_BN_CTX_GET;
MACRO_BN BN_F_BN_CTX_NEW;
MACRO_BN BN_F_BN_CTX_START;
MACRO_BN BN_F_BN_DIV;
MACRO_BN BN_F_BN_DIV_NO_BRANCH;
MACRO_BN BN_F_BN_DIV_RECP;
MACRO_BN BN_F_BN_EXP;
MACRO_BN BN_F_BN_EXPAND2;
MACRO_BN BN_F_BN_EXPAND_INTERNAL;
MACRO_BN BN_F_BN_GF2M_MOD;
MACRO_BN BN_F_BN_GF2M_MOD_EXP;
MACRO_BN BN_F_BN_GF2M_MOD_MUL;
MACRO_BN BN_F_BN_GF2M_MOD_SOLVE_QUAD;
MACRO_BN BN_F_BN_GF2M_MOD_SOLVE_QUAD_ARR;
MACRO_BN BN_F_BN_GF2M_MOD_SQR;
MACRO_BN BN_F_BN_GF2M_MOD_SQRT;
MACRO_BN BN_F_BN_MOD_EXP2_MONT;
MACRO_BN BN_F_BN_MOD_EXP_MONT;
MACRO_BN BN_F_BN_MOD_EXP_MONT_CONSTTIME;
MACRO_BN BN_F_BN_MOD_EXP_MONT_WORD;
MACRO_BN BN_F_BN_MOD_EXP_RECP;
MACRO_BN BN_F_BN_MOD_EXP_SIMPLE;
MACRO_BN BN_F_BN_MOD_INVERSE;
MACRO_BN BN_F_BN_MOD_INVERSE_NO_BRANCH;
MACRO_BN BN_F_BN_MOD_LSHIFT_QUICK;
MACRO_BN BN_F_BN_MOD_MUL_RECIPROCAL;
MACRO_BN BN_F_BN_MOD_SQRT;
MACRO_BN BN_F_BN_MPI2BN;
MACRO_BN BN_F_BN_NEW;
MACRO_BN BN_F_BN_RAND;
MACRO_BN BN_F_BN_RAND_RANGE;
MACRO_BN BN_F_BN_USUB;
MACRO_BN BN_MASK2;
MACRO_BN BN_MASK2h;
MACRO_BN BN_MASK2h1;
MACRO_BN BN_MASK2l;
MACRO_BN BN_R_ARG2_LT_ARG3;
MACRO_BN BN_R_BAD_RECIPROCAL;
MACRO_BN BN_R_BIGNUM_TOO_LONG;
MACRO_BN BN_R_CALLED_WITH_EVEN_MODULUS;
MACRO_BN BN_R_DIV_BY_ZERO;
MACRO_BN BN_R_ENCODING_ERROR;
MACRO_BN BN_R_EXPAND_ON_STATIC_BIGNUM_DATA;
MACRO_BN BN_R_INPUT_NOT_REDUCED;
MACRO_BN BN_R_INVALID_LENGTH;
MACRO_BN BN_R_INVALID_RANGE;
MACRO_BN BN_R_NOT_A_SQUARE;
MACRO_BN BN_R_NOT_INITIALIZED;
MACRO_BN BN_R_NO_INVERSE;
MACRO_BN BN_R_NO_SOLUTION;
MACRO_BN BN_R_P_IS_NOT_PRIME;
MACRO_BN BN_R_TOO_MANY_ITERATIONS;
MACRO_BN BN_R_TOO_MANY_TEMPORARY_VARIABLES;
MACRO_BN BN_TBIT;
MACRO_BN BN_prime_checks;
MACRO_BOOLCOUNT BOOLCOUNT;
MACRO_BOOLEAN BOOLEAN;
MACRO_BOOLWRITE BOOLWRITE;
MACRO_BOOTPARAMPROC BOOTPARAMPROC_GETFILE;
MACRO_BOOTPARAMPROC BOOTPARAMPROC_WHOAMI;
MACRO_BOOTPARAMPROG BOOTPARAMPROG;
MACRO_BOOTPARAMVERS BOOTPARAMVERS;
MACRO_BOOTPARAM BOOTPARAM_GETFILE;
MACRO_BOOTPARAM BOOTPARAM_PROG;
MACRO_BOOTPARAM BOOTPARAM_VERS;
MACRO_BOOTPARAM BOOTPARAM_WHOAMI;
MACRO_BOOTP BOOTP_MAX_BACKOFF;
MACRO_BOOTP BOOTP_MIN_BACKOFF;
MACRO_BOOTP BOOTP_RETRY;
MACRO_BOOTREQUEST BOOTREPLY;
MACRO_BOOTREQUEST BOOTREQUEST;
MACRO_BOOTSTRAP BOOTSTRAP_BAD_COUNT;
MACRO_BOOTSTRAP BOOTSTRAP_MAX_CMD_LEN;
MACRO_BOOTSTRAP BOOTSTRAP_MAX_LOOKUP_COUNT;
MACRO_BOOTSTRAP BOOTSTRAP_MAX_NAME_LEN;
MACRO_BOOTSTRAP BOOTSTRAP_NAME_IN_USE;
MACRO_BOOTSTRAP BOOTSTRAP_NOT_PRIVILEGED;
MACRO_BOOTSTRAP BOOTSTRAP_NO_CHILDREN;
MACRO_BOOTSTRAP BOOTSTRAP_NO_MEMORY;
MACRO_BOOTSTRAP BOOTSTRAP_SERVICE_ACTIVE;
MACRO_BOOTSTRAP BOOTSTRAP_STATUS_ACTIVE;
MACRO_BOOTSTRAP BOOTSTRAP_STATUS_INACTIVE;
MACRO_BOOTSTRAP BOOTSTRAP_STATUS_ON_DEMAND;
MACRO_BOOTSTRAP BOOTSTRAP_SUCCESS;
MACRO_BOOTSTRAP BOOTSTRAP_UNKNOWN_SERVICE;
MACRO_BOOT BOOT_TIME;
MACRO_BPF_LD BPF_A;
MACRO_BPF_LD BPF_ABS;
MACRO_BPF_LD BPF_ADD;
MACRO_BPF_LD BPF_ALU;
MACRO_BPF_LD BPF_AND;
MACRO_BPF_LD BPF_B;
MACRO_BPF_LD BPF_DIV;
MACRO_BPF_LD BPF_H;
MACRO_BPF_LD BPF_IMM;
MACRO_BPF_LD BPF_IND;
MACRO_BPF_LD BPF_JA;
MACRO_BPF_LD BPF_JEQ;
MACRO_BPF_LD BPF_JGE;
MACRO_BPF_LD BPF_JGT;
MACRO_BPF_LD BPF_JMP;
MACRO_BPF_LD BPF_JSET;
MACRO_BPF_LD BPF_K;
MACRO_BPF_LD BPF_LD;
MACRO_BPF_LD BPF_LDX;
MACRO_BPF_LD BPF_LEN;
MACRO_BPF_LD BPF_LSH;
MACRO_BPF BPF_MAJOR_VERSION;
MACRO_BPF_MAXINSNS BPF_MAXINSNS;
MACRO_BPF_LD BPF_MEM;
MACRO_BPF_LD BPF_MEMWORDS;
MACRO_BPF BPF_MINBUFSIZE;
MACRO_BPF BPF_MINOR_VERSION;
MACRO_BPF_LD BPF_MISC;
MACRO_BPF_LD BPF_MSH;
MACRO_BPF_LD BPF_MUL;
MACRO_BPF_LD BPF_NEG;
MACRO_BPF_LD BPF_OR;
MACRO_BPF BPF_RELEASE;
MACRO_BPF_LD BPF_RET;
MACRO_BPF_LD BPF_RSH;
MACRO_BPF_LD BPF_ST;
MACRO_BPF_LD BPF_STX;
MACRO_BPF_LD BPF_SUB;
MACRO_BPF_LD BPF_TAX;
MACRO_BPF_LD BPF_TXA;
MACRO_BPF_LD BPF_W;
MACRO_BPF_LD BPF_X;
MACRO_BPOP BPOP_ERROR;
MACRO_BPOP BPOP_OK;
MACRO_BPOP BPOP_QUERY;
MACRO_BPOP BPOP_QUERY_NE;
MACRO_BREAK BREAK;
MACRO_IGNBRK BRKINT;
MACRO_BS0 BS0;
MACRO_BS0 BS1;
MACRO_BSD BSD;
MACRO_BSD4 BSD4_3;
MACRO_BSD4 BSD4_4;
MACRO_XTABS BSDELAY;
MACRO_OPOST BSDLY;
MACRO_BSD_PROC BSD_PROC_EXIT;
MACRO_BSD_PROC BSD_PROC_FRCEXIT;
MACRO_BSM BSM_TEXTBUFSZ;
MACRO_BTREEMAGIC BTREEMAGIC;
MACRO_BTREEVERSION BTREEVERSION;
MACRO__IOFBF BUFSIZ;
MACRO_BUF BUF_CLAIMED;
MACRO_BUF BUF_CLAIMED_DONE;
MACRO_BUF_F BUF_F_BUF_MEMDUP;
MACRO_BUF_F BUF_F_BUF_MEM_GROW;
MACRO_BUF_F BUF_F_BUF_MEM_GROW_CLEAN;
MACRO_BUF_F BUF_F_BUF_MEM_NEW;
MACRO_BUF_F BUF_F_BUF_STRDUP;
MACRO_BUF_F BUF_F_BUF_STRNDUP;
MACRO_BUF BUF_INVALIDATE_LOCKED;
MACRO_BUF BUF_NOTIFY_BUSY;
MACRO_BUF BUF_RETURNED;
MACRO_BUF BUF_RETURNED_DONE;
MACRO_BUF BUF_SCAN_CLEAN;
MACRO_BUF BUF_SCAN_DIRTY;
MACRO_BUF BUF_SKIP_LOCKED;
MACRO_BUF BUF_SKIP_META;
MACRO_BUF BUF_SKIP_NONLOCKED;
MACRO_BUF BUF_WAIT;
MACRO_BUF BUF_WRITE_DATA;
MACRO_REQ_MSG BULK_REQ_MSG;
MACRO_BUS BUS_ADRALN;
MACRO_BUS BUS_ADRERR;
MACRO_BUS BUS_NOOP;
MACRO_BUS BUS_OBJERR;
MACRO_BUTTON1 BUTTON1_CLICKED;
MACRO_BUTTON1 BUTTON1_DOUBLE_CLICKED;
MACRO_BUTTON1 BUTTON1_PRESSED;
MACRO_BUTTON1 BUTTON1_RELEASED;
MACRO_RESERVED_EVENT BUTTON1_RESERVED_EVENT;
MACRO_BUTTON1 BUTTON1_TRIPLE_CLICKED;
MACRO_BUTTON2 BUTTON2_CLICKED;
MACRO_BUTTON2 BUTTON2_DOUBLE_CLICKED;
MACRO_BUTTON2 BUTTON2_PRESSED;
MACRO_BUTTON2 BUTTON2_RELEASED;
MACRO_RESERVED_EVENT BUTTON2_RESERVED_EVENT;
MACRO_BUTTON2 BUTTON2_TRIPLE_CLICKED;
MACRO_BUTTON3 BUTTON3_CLICKED;
MACRO_BUTTON3 BUTTON3_DOUBLE_CLICKED;
MACRO_BUTTON3 BUTTON3_PRESSED;
MACRO_BUTTON3 BUTTON3_RELEASED;
MACRO_RESERVED_EVENT BUTTON3_RESERVED_EVENT;
MACRO_BUTTON3 BUTTON3_TRIPLE_CLICKED;
MACRO_BUTTON4 BUTTON4_CLICKED;
MACRO_BUTTON4 BUTTON4_DOUBLE_CLICKED;
MACRO_BUTTON4 BUTTON4_PRESSED;
MACRO_BUTTON4 BUTTON4_RELEASED;
MACRO_RESERVED_EVENT BUTTON4_RESERVED_EVENT;
MACRO_BUTTON4 BUTTON4_TRIPLE_CLICKED;
MACRO_BUTTON BUTTON_ALT;
MACRO_BUTTON BUTTON_CTRL;
MACRO_BUTTON BUTTON_SHIFT;
MACRO_BYTEORDER BYTEORDER;
MACRO_BYTES BYTES_PER_XDR_UNIT;
MACRO_BYTE BYTE_ORDER;
MACRO_BYTE_SIZE BYTE_SIZE;
MACRO_BZ BZ_CONFIG_ERROR;
MACRO_BZ BZ_DATA_ERROR;
MACRO_BZ BZ_DATA_ERROR_MAGIC;
MACRO_BZ BZ_FINISH;
MACRO_BZ BZ_FINISH_OK;
MACRO_BZ BZ_FLUSH;
MACRO_BZ BZ_FLUSH_OK;
MACRO_BZ BZ_IO_ERROR;
MACRO_BZ BZ_MAX_UNUSED;
MACRO_BZ BZ_MEM_ERROR;
MACRO_BZ BZ_OK;
MACRO_BZ BZ_OUTBUFF_FULL;
MACRO_BZ BZ_PARAM_ERROR;
MACRO_BZ BZ_RUN;
MACRO_BZ BZ_RUN_OK;
MACRO_BZ BZ_SEQUENCE_ERROR;
MACRO_BZ BZ_STREAM_END;
MACRO_BZ BZ_UNEXPECTED_EOF;
MACRO_B_ADAPTORSHIFT B_ADAPTORMASK;
MACRO_B_ADAPTORSHIFT B_ADAPTORSHIFT;
MACRO_B_ASN1 B_ASN1_BIT_STRING;
MACRO_B_ASN1 B_ASN1_BMPSTRING;
MACRO_B_ASN1_TIME B_ASN1_DIRECTORYSTRING;
MACRO_B_ASN1_TIME B_ASN1_DISPLAYTEXT;
MACRO_B_ASN1 B_ASN1_GENERALIZEDTIME;
MACRO_B_ASN1 B_ASN1_GENERALSTRING;
MACRO_B_ASN1 B_ASN1_GRAPHICSTRING;
MACRO_B_ASN1 B_ASN1_IA5STRING;
MACRO_B_ASN1 B_ASN1_ISO64STRING;
MACRO_B_ASN1 B_ASN1_NUMERICSTRING;
MACRO_B_ASN1 B_ASN1_OCTET_STRING;
MACRO_B_ASN1_TIME B_ASN1_PRINTABLE;
MACRO_B_ASN1 B_ASN1_PRINTABLESTRING;
MACRO_B_ASN1 B_ASN1_SEQUENCE;
MACRO_B_ASN1 B_ASN1_T61STRING;
MACRO_B_ASN1 B_ASN1_TELETEXSTRING;
MACRO_B_ASN1_TIME B_ASN1_TIME;
MACRO_B_ASN1 B_ASN1_UNIVERSALSTRING;
MACRO_B_ASN1 B_ASN1_UNKNOWN;
MACRO_B_ASN1 B_ASN1_UTCTIME;
MACRO_B_ASN1 B_ASN1_UTF8STRING;
MACRO_B_ASN1 B_ASN1_VIDEOTEXSTRING;
MACRO_B_ASN1 B_ASN1_VISIBLESTRING;
MACRO_B B_ASYNC;
MACRO_B B_CLUSTER;
MACRO_B_ADAPTORSHIFT B_CONTROLLERMASK;
MACRO_B_ADAPTORSHIFT B_CONTROLLERSHIFT;
MACRO_B B_DELWRI;
MACRO_B_ADAPTORSHIFT B_DEVMAGIC;
MACRO_B B_ENCRYPTED_IO;
MACRO_B B_FUA;
MACRO_B B_IOSTREAMING;
MACRO_B B_LOCKED;
MACRO_B_ADAPTORSHIFT B_MAGICMASK;
MACRO_B B_META;
MACRO_B B_NOCACHE;
MACRO_B B_PAGEIO;
MACRO_B_ADAPTORSHIFT B_PARTITIONMASK;
MACRO_B_ADAPTORSHIFT B_PARTITIONSHIFT;
MACRO_B B_PASSIVE;
MACRO_B B_PHYS;
MACRO_B B_RAW;
MACRO_B B_READ;
MACRO_B B_THROTTLED_IO;
MACRO_B_ADAPTORSHIFT B_TYPEMASK;
MACRO_B_ADAPTORSHIFT B_TYPESHIFT;
MACRO_B_ADAPTORSHIFT B_UNITMASK;
MACRO_B_ADAPTORSHIFT B_UNITSHIFT;
MACRO_B B_WRITE;
MACRO_CACHE CACHE_ATTRIBUTES_VERSION_1;
MACRO_CACHE CACHE_ATTRIBUTES_VERSION_2;
MACRO_CLOCK CALENDAR_CLOCK;
msg_type CALL;
MACRO_CANCEL CANCEL;
MACRO_CANCELLED CANCELLED_BOOLEAN;
MACRO_CANCELLED CANCELLED_NUMERIC;
MACRO_CANCELLED CANCELLED_STRING;
MACRO_CAST CAST_BLOCK;
MACRO_CAST CAST_DECRYPT;
MACRO_CAST CAST_ENCRYPT;
MACRO_CAST CAST_KEY_LENGTH;
MACRO_CLSHIFT CBLOCK;
MACRO_CBQSIZE CBQSIZE;
MACRO_TANDEM CBREAK;
MACRO_CBRK CBRK;
MACRO_OFLOW CCAR_OFLOW;
MACRO_CCTS CCTS_OFLOW;
MACRO_CC CC_ARGHACK;
MACRO_CC CC_CURSOR;
MACRO_CC CC_EOF;
MACRO_CC CC_ERROR;
MACRO_CC CC_FATAL;
MACRO_CC CC_NEWLINE;
MACRO_CC CC_NORM;
MACRO_CC CC_REDISPLAY;
MACRO_CC CC_REFRESH;
MACRO_CC CC_REFRESH_BEEP;
MACRO_CDISCARD CDISCARD;
MACRO_OFLOW CDSR_OFLOW;
MACRO_CTIME CDSUSP;
MACRO_IFLOW CDTR_IFLOW;
MACRO_CEOF CEOF;
MACRO_CEOL CEOL;
MACRO_CEOT CEOT;
MACRO_CERASE CERASE;
MACRO_CFLUSH CFLUSH;
MACRO_CHARCLASS CHARCLASS_NAME_MAX;
MACRO_CHARTYPE CHARTYPE_FIRST_ESC_2253;
MACRO_CHARTYPE CHARTYPE_LAST_ESC_2253;
MACRO_CHARTYPE CHARTYPE_PRINTABLESTRING;
MACRO_CHAR CHAR_BIT;
MACRO_UCHAR CHAR_MAX;
MACRO_CHAR_MIN CHAR_MIN;
$A4AB2ACB256BC3C4C6BFF469F2F5E493 CHECKINT_NO_ERROR;
$A4AB2ACB256BC3C4C6BFF469F2F5E493 CHECKINT_OVERFLOW_ERROR;
$A4AB2ACB256BC3C4C6BFF469F2F5E493 CHECKINT_TYPE_ERROR;
MACRO_CHECK CHECK_RT_FLAGS;
MACRO_ARG CHILD_MAX;
MACRO_CHRTYPE CHRTYPE;
MACRO_CIGNORE CIGNORE;
MACRO_CINTR CINTR;
MACRO_CKILL CKILL;
MACRO_CKSUMTYPE CKSUMTYPE_CRC32;
MACRO_CKSUMTYPE CKSUMTYPE_DESCBC;
MACRO_CKSUMTYPE CKSUMTYPE_HMAC_MD5_ARCFOUR;
MACRO_CKSUMTYPE CKSUMTYPE_HMAC_SHA1_96_AES128;
MACRO_CKSUMTYPE CKSUMTYPE_HMAC_SHA1_96_AES256;
MACRO_CKSUMTYPE CKSUMTYPE_HMAC_SHA1_DES3;
MACRO_CKSUMTYPE CKSUMTYPE_NIST_SHA;
MACRO_CKSUMTYPE CKSUMTYPE_RSA_MD4;
MACRO_CKSUMTYPE CKSUMTYPE_RSA_MD4_DES;
MACRO_CKSUMTYPE CKSUMTYPE_RSA_MD5;
MACRO_CKSUMTYPE CKSUMTYPE_RSA_MD5_DES;
MACRO_CLBYTES CLBYTES;
MACRO_CLD CLD_CONTINUED;
MACRO_CLD CLD_DUMPED;
MACRO_CLD CLD_EXITED;
MACRO_CLD CLD_KILLED;
MACRO_CLD CLD_NOOP;
MACRO_CLD CLD_STOPPED;
MACRO_CLD CLD_TRAPPED;
MACRO_RETRY_TIMEOUT CLGET_RETRY_TIMEOUT;
MACRO_CLGET CLGET_SERVER_ADDR;
MACRO_TIMEOUT CLGET_TIMEOUT;
MACRO_CLK CLK_TCK;
MACRO_CLNEXT CLNEXT;
MACRO_CS8 CLOCAL;
MACRO_CLOCKS CLOCKS_PER_SEC;
MACRO_CLOCK_GET CLOCK_ALARM_CURRES;
MACRO_CLOCK_GET CLOCK_ALARM_MAXRES;
MACRO_CLOCK_GET CLOCK_ALARM_MINRES;
MACRO_CLOCK_GET CLOCK_GET_TIME_RES;
MACRO_THREAD_NULL CLOCK_NULL;
MACRO_CLOFF CLOFF;
MACRO_CLOFSET CLOFSET;
MACRO_RETRY_TIMEOUT CLSET_RETRY_TIMEOUT;
MACRO_TIMEOUT CLSET_TIMEOUT;
MACRO_CLSHIFT CLSHIFT;
MACRO_CLSIZE CLSIZE;
MACRO_CLSIZELOG2 CLSIZELOG2;
MACRO_CMASK CMASK;
MACRO_CMIN CMIN;
MACRO_CODESET CODESET;
MACRO_CHARCLASS COLL_WEIGHTS_MAX;
MACRO_COLOR COLOR_BLACK;
MACRO_COLOR COLOR_BLUE;
MACRO_COLOR COLOR_CYAN;
MACRO_COLOR COLOR_GREEN;
MACRO_COLOR COLOR_MAGENTA;
MACRO_COLOR COLOR_RED;
MACRO_COLOR COLOR_WHITE;
MACRO_COLOR COLOR_YELLOW;
MACRO_COMAPT COMAPT_MAXLOGNAME;
MACRO_COMMIT COMMIT;
MACRO_MAX_LEN COMMUNITY_MAX_LEN;
MACRO_PRELIM COMPLETE;
MACRO_COMP COMP_F_BIO_ZLIB_FLUSH;
MACRO_COMP COMP_F_BIO_ZLIB_NEW;
MACRO_COMP COMP_F_BIO_ZLIB_READ;
MACRO_COMP COMP_F_BIO_ZLIB_WRITE;
MACRO_COMP COMP_R_ZLIB_DEFLATE_ERROR;
MACRO_COMP COMP_R_ZLIB_INFLATE_ERROR;
MACRO_COMP COMP_R_ZLIB_NOT_SUPPORTED;
MACRO_CONFIG CONFIG_MAXVIFS;
MACRO_CONFIG CONFIG_MFCTBLSIZ;
MACRO_CONF CONF_F_CONF_DUMP_FP;
MACRO_CONF CONF_F_CONF_LOAD;
MACRO_CONF CONF_F_CONF_LOAD_BIO;
MACRO_CONF CONF_F_CONF_LOAD_FP;
MACRO_CONF CONF_F_CONF_MODULES_LOAD;
MACRO_CONF CONF_F_DEF_LOAD;
MACRO_CONF CONF_F_DEF_LOAD_BIO;
MACRO_CONF CONF_F_MODULE_INIT;
MACRO_CONF CONF_F_MODULE_LOAD_DSO;
MACRO_CONF CONF_F_MODULE_RUN;
MACRO_CONF CONF_F_NCONF_DUMP_BIO;
MACRO_CONF CONF_F_NCONF_DUMP_FP;
MACRO_CONF CONF_F_NCONF_GET_NUMBER;
MACRO_CONF CONF_F_NCONF_GET_NUMBER_E;
MACRO_CONF CONF_F_NCONF_GET_SECTION;
MACRO_CONF CONF_F_NCONF_GET_STRING;
MACRO_CONF CONF_F_NCONF_LOAD;
MACRO_CONF CONF_F_NCONF_LOAD_BIO;
MACRO_CONF CONF_F_NCONF_LOAD_FP;
MACRO_CONF CONF_F_NCONF_NEW;
MACRO_CONF CONF_F_STR_COPY;
MACRO_CONF CONF_MFLAGS_DEFAULT_SECTION;
MACRO_CONF CONF_MFLAGS_IGNORE_ERRORS;
MACRO_CONF CONF_MFLAGS_IGNORE_MISSING_FILE;
MACRO_CONF CONF_MFLAGS_IGNORE_RETURN_CODES;
MACRO_CONF CONF_MFLAGS_NO_DSO;
MACRO_CONF CONF_MFLAGS_SILENT;
MACRO_CONF CONF_R_ERROR_LOADING_DSO;
MACRO_CONF CONF_R_MISSING_CLOSE_SQUARE_BRACKET;
MACRO_CONF CONF_R_MISSING_EQUAL_SIGN;
MACRO_CONF CONF_R_MISSING_FINISH_FUNCTION;
MACRO_CONF CONF_R_MISSING_INIT_FUNCTION;
MACRO_CONF CONF_R_MODULE_INITIALIZATION_ERROR;
MACRO_CONF CONF_R_NO_CLOSE_BRACE;
MACRO_CONF CONF_R_NO_CONF;
MACRO_CONF CONF_R_NO_CONF_OR_ENVIRONMENT_VARIABLE;
MACRO_CONF CONF_R_NO_SECTION;
MACRO_CONF CONF_R_NO_SUCH_FILE;
MACRO_CONF CONF_R_NO_VALUE;
MACRO_CONF CONF_R_UNABLE_TO_CREATE_NEW_SECTION;
MACRO_CONF CONF_R_UNKNOWN_MODULE_NAME;
MACRO_CONF CONF_R_VARIABLE_HAS_NO_VALUE;
MACRO_CONTAINER CONTAINER_KEY_ALLOW_DUPLICATES;
MACRO_CONTAINER CONTAINER_KEY_UNSORTED;
MACRO_CONTEXT CONTEXT_MATCH_EXACT;
MACRO_CONTEXT CONTEXT_MATCH_PREFIX;
MACRO_CONTINUE CONTINUE;
MACRO_ORDINARY CONTROL;
MACRO_CONTTYPE CONTTYPE;
MACRO_COPYFILE COPYFILE_ACL;
MACRO_COPYFILE COPYFILE_ALL;
MACRO_COPYFILE COPYFILE_CHECK;
MACRO_COPYFILE COPYFILE_CONTINUE;
MACRO_COPYFILE COPYFILE_COPY_DATA;
MACRO_COPYFILE COPYFILE_COPY_XATTR;
MACRO_COPYFILE COPYFILE_DATA;
MACRO_COPYFILE COPYFILE_ERR;
MACRO_COPYFILE COPYFILE_EXCL;
MACRO_COPYFILE COPYFILE_FINISH;
MACRO_COPYFILE COPYFILE_METADATA;
MACRO_COPYFILE COPYFILE_MOVE;
MACRO_COPYFILE COPYFILE_NOFOLLOW;
MACRO_COPYFILE COPYFILE_NOFOLLOW_DST;
MACRO_COPYFILE COPYFILE_NOFOLLOW_SRC;
MACRO_COPYFILE COPYFILE_PACK;
MACRO_COPYFILE COPYFILE_PROGRESS;
MACRO_COPYFILE COPYFILE_QUIT;
MACRO_COPYFILE COPYFILE_RECURSE_DIR;
MACRO_COPYFILE COPYFILE_RECURSE_DIR_CLEANUP;
MACRO_COPYFILE COPYFILE_RECURSE_ERROR;
MACRO_COPYFILE COPYFILE_RECURSE_FILE;
MACRO_COPYFILE COPYFILE_RECURSIVE;
MACRO_COPYFILE COPYFILE_SECURITY;
MACRO_COPYFILE COPYFILE_SKIP;
MACRO_COPYFILE COPYFILE_START;
MACRO_COPYFILE COPYFILE_STAT;
MACRO_COPYFILE COPYFILE_STATE_COPIED;
MACRO_COPYFILE COPYFILE_STATE_DST_FD;
MACRO_COPYFILE COPYFILE_STATE_DST_FILENAME;
MACRO_COPYFILE COPYFILE_STATE_QUARANTINE;
MACRO_COPYFILE COPYFILE_STATE_SRC_FD;
MACRO_COPYFILE COPYFILE_STATE_SRC_FILENAME;
MACRO_COPYFILE COPYFILE_STATE_STATUS_CB;
MACRO_COPYFILE COPYFILE_STATE_STATUS_CTX;
MACRO_COPYFILE COPYFILE_STATE_XATTRNAME;
MACRO_COPYFILE COPYFILE_UNLINK;
MACRO_COPYFILE COPYFILE_UNPACK;
MACRO_COPYFILE COPYFILE_VERBOSE;
MACRO_COPYFILE COPYFILE_XATTR;
MACRO_COUNTER COUNTER;
MACRO_COUNTER64 COUNTER64;
MACRO_CPF CPF_IGNORE_MODE;
MACRO_CPF CPF_MASK;
MACRO_CPF CPF_OVERWRITE;
MACRO_CPUFAMILY CPUFAMILY_ARM_11;
MACRO_CPUFAMILY CPUFAMILY_ARM_13;
MACRO_CPUFAMILY CPUFAMILY_ARM_14;
MACRO_CPUFAMILY CPUFAMILY_ARM_9;
MACRO_CPUFAMILY CPUFAMILY_ARM_XSCALE;
MACRO_CPUFAMILY CPUFAMILY_INTEL_6_13;
MACRO_CPUFAMILY CPUFAMILY_INTEL_6_14;
MACRO_CPUFAMILY CPUFAMILY_INTEL_6_15;
MACRO_CPUFAMILY CPUFAMILY_INTEL_6_23;
MACRO_CPUFAMILY CPUFAMILY_INTEL_6_26;
MACRO_CPUFAMILY CPUFAMILY_INTEL_CORE;
MACRO_CPUFAMILY CPUFAMILY_INTEL_CORE2;
MACRO_CPUFAMILY CPUFAMILY_INTEL_MEROM;
MACRO_CPUFAMILY CPUFAMILY_INTEL_NEHALEM;
MACRO_CPUFAMILY CPUFAMILY_INTEL_PENRYN;
MACRO_CPUFAMILY CPUFAMILY_INTEL_SANDYBRIDGE;
MACRO_CPUFAMILY CPUFAMILY_INTEL_WESTMERE;
MACRO_CPUFAMILY CPUFAMILY_INTEL_YONAH;
MACRO_CPUFAMILY CPUFAMILY_POWERPC_G3;
MACRO_CPUFAMILY CPUFAMILY_POWERPC_G4;
MACRO_CPUFAMILY CPUFAMILY_POWERPC_G5;
MACRO_CPUFAMILY CPUFAMILY_UNKNOWN;
MACRO_CPU CPU_ARCH_ABI64;
MACRO_CPU CPU_ARCH_MASK;
MACRO_CPU CPU_STATE_IDLE;
MACRO_CPU CPU_STATE_MAX;
MACRO_CPU CPU_STATE_NICE;
MACRO_CPU CPU_STATE_SYSTEM;
MACRO_CPU CPU_STATE_USER;
MACRO_CPU CPU_SUBTYPE_386;
MACRO_CPU CPU_SUBTYPE_486;
MACRO_CPU CPU_SUBTYPE_486SX;
MACRO_CPU CPU_SUBTYPE_586;
MACRO_CPU CPU_SUBTYPE_ARM_ALL;
MACRO_CPU CPU_SUBTYPE_ARM_V4T;
MACRO_CPU CPU_SUBTYPE_ARM_V5TEJ;
MACRO_CPU CPU_SUBTYPE_ARM_V6;
MACRO_CPU CPU_SUBTYPE_ARM_V7;
MACRO_CPU CPU_SUBTYPE_ARM_XSCALE;
MACRO_CPU CPU_SUBTYPE_BIG_ENDIAN;
MACRO_CPU CPU_SUBTYPE_CELERON;
MACRO_CPU CPU_SUBTYPE_CELERON_MOBILE;
MACRO_CPU CPU_SUBTYPE_HPPA_7100;
MACRO_CPU CPU_SUBTYPE_HPPA_7100LC;
MACRO_CPU CPU_SUBTYPE_HPPA_ALL;
MACRO_CPU CPU_SUBTYPE_I386_ALL;
MACRO_CPU CPU_SUBTYPE_I860_860;
MACRO_CPU CPU_SUBTYPE_I860_ALL;
MACRO_CPU CPU_SUBTYPE_INTEL_FAMILY_MAX;
MACRO_CPU CPU_SUBTYPE_INTEL_MODEL_ALL;
MACRO_CPU CPU_SUBTYPE_ITANIUM;
MACRO_CPU CPU_SUBTYPE_ITANIUM_2;
MACRO_CPU CPU_SUBTYPE_LIB64;
MACRO_CPU CPU_SUBTYPE_LITTLE_ENDIAN;
MACRO_CPU CPU_SUBTYPE_MASK;
MACRO_CPU CPU_SUBTYPE_MC68030;
MACRO_CPU CPU_SUBTYPE_MC68030_ONLY;
MACRO_CPU CPU_SUBTYPE_MC68040;
MACRO_CPU CPU_SUBTYPE_MC680x0_ALL;
MACRO_CPU CPU_SUBTYPE_MC88000_ALL;
MACRO_CPU CPU_SUBTYPE_MC88100;
MACRO_CPU CPU_SUBTYPE_MC88110;
MACRO_CPU CPU_SUBTYPE_MC98000_ALL;
MACRO_CPU CPU_SUBTYPE_MC98601;
MACRO_CPU CPU_SUBTYPE_MIPS_ALL;
MACRO_CPU CPU_SUBTYPE_MIPS_R2000;
MACRO_CPU CPU_SUBTYPE_MIPS_R2000a;
MACRO_CPU CPU_SUBTYPE_MIPS_R2300;
MACRO_CPU CPU_SUBTYPE_MIPS_R2600;
MACRO_CPU CPU_SUBTYPE_MIPS_R2800;
MACRO_CPU CPU_SUBTYPE_MIPS_R3000;
MACRO_CPU CPU_SUBTYPE_MIPS_R3000a;
MACRO_CPU CPU_SUBTYPE_MULTIPLE;
MACRO_CPU CPU_SUBTYPE_PENT;
MACRO_CPU CPU_SUBTYPE_PENTII_M3;
MACRO_CPU CPU_SUBTYPE_PENTII_M5;
MACRO_CPU CPU_SUBTYPE_PENTIUM_3;
MACRO_CPU CPU_SUBTYPE_PENTIUM_3_M;
MACRO_CPU CPU_SUBTYPE_PENTIUM_3_XEON;
MACRO_CPU CPU_SUBTYPE_PENTIUM_4;
MACRO_CPU CPU_SUBTYPE_PENTIUM_4_M;
MACRO_CPU CPU_SUBTYPE_PENTIUM_M;
MACRO_CPU CPU_SUBTYPE_PENTPRO;
MACRO_CPU CPU_SUBTYPE_POWERPC_601;
MACRO_CPU CPU_SUBTYPE_POWERPC_602;
MACRO_CPU CPU_SUBTYPE_POWERPC_603;
MACRO_CPU CPU_SUBTYPE_POWERPC_603e;
MACRO_CPU CPU_SUBTYPE_POWERPC_603ev;
MACRO_CPU CPU_SUBTYPE_POWERPC_604;
MACRO_CPU CPU_SUBTYPE_POWERPC_604e;
MACRO_CPU CPU_SUBTYPE_POWERPC_620;
MACRO_CPU CPU_SUBTYPE_POWERPC_7400;
MACRO_CPU CPU_SUBTYPE_POWERPC_7450;
MACRO_CPU CPU_SUBTYPE_POWERPC_750;
MACRO_CPU CPU_SUBTYPE_POWERPC_970;
MACRO_CPU CPU_SUBTYPE_POWERPC_ALL;
MACRO_CPU CPU_SUBTYPE_SPARC_ALL;
MACRO_CPU CPU_SUBTYPE_UVAXI;
MACRO_CPU CPU_SUBTYPE_UVAXII;
MACRO_CPU CPU_SUBTYPE_UVAXIII;
MACRO_CPU CPU_SUBTYPE_VAX730;
MACRO_CPU CPU_SUBTYPE_VAX750;
MACRO_CPU CPU_SUBTYPE_VAX780;
MACRO_CPU CPU_SUBTYPE_VAX785;
MACRO_CPU CPU_SUBTYPE_VAX8200;
MACRO_CPU CPU_SUBTYPE_VAX8500;
MACRO_CPU CPU_SUBTYPE_VAX8600;
MACRO_CPU CPU_SUBTYPE_VAX8650;
MACRO_CPU CPU_SUBTYPE_VAX8800;
MACRO_CPU CPU_SUBTYPE_VAX_ALL;
MACRO_CPU CPU_SUBTYPE_X86_64_ALL;
MACRO_CPU CPU_SUBTYPE_X86_ALL;
MACRO_CPU CPU_SUBTYPE_X86_ARCH1;
MACRO_CPU CPU_SUBTYPE_XEON;
MACRO_CPU CPU_SUBTYPE_XEON_MP;
MACRO_CPU CPU_THREADTYPE_INTEL_HTT;
MACRO_CPU CPU_THREADTYPE_NONE;
MACRO_CPU CPU_TYPE_ANY;
MACRO_CPU CPU_TYPE_ARM;
MACRO_CPU CPU_TYPE_HPPA;
MACRO_CPU CPU_TYPE_I386;
MACRO_CPU CPU_TYPE_I860;
MACRO_CPU CPU_TYPE_MC680x0;
MACRO_CPU CPU_TYPE_MC88000;
MACRO_CPU CPU_TYPE_MC98000;
MACRO_CPU CPU_TYPE_POWERPC;
MACRO_CPU CPU_TYPE_POWERPC64;
MACRO_CPU CPU_TYPE_SPARC;
MACRO_CPU CPU_TYPE_VAX;
MACRO_CPU CPU_TYPE_X86;
MACRO_CPU CPU_TYPE_X86_64;
MACRO_CMIN CQUIT;
MACRO_CR0 CR0;
MACRO_CR0 CR1;
MACRO_CR0 CR2;
MACRO_CR3 CR3;
MACRO_XTABS CRDELAY;
MACRO_OPOST CRDLY;
MACRO_CS8 CREAD;
MACRO_CREPRINT CREPRINT;
MACRO_CRF CRF_MAC_ENFORCE;
MACRO_CRF CRF_NOMEMBERD;
MACRO_TANDEM CRMOD;
MACRO_CRNCYSTR CRNCYSTR;
MACRO_CROUND CROUND;
MACRO_CRPRNT CRPRNT;
MACRO_ALLDELAY CRTBS;
MACRO_ALLDELAY CRTERA;
MACRO_ALLDELAY CRTKIL;
MACRO_IFLOW CRTS_IFLOW;
MACRO_CRYPTO_EX CRYPTO_EX_INDEX_BIO;
MACRO_CRYPTO_EX CRYPTO_EX_INDEX_COMP;
MACRO_CRYPTO_EX CRYPTO_EX_INDEX_DH;
MACRO_CRYPTO_EX CRYPTO_EX_INDEX_DSA;
MACRO_CRYPTO_EX CRYPTO_EX_INDEX_ECDH;
MACRO_CRYPTO_EX CRYPTO_EX_INDEX_ECDSA;
MACRO_CRYPTO_EX CRYPTO_EX_INDEX_ENGINE;
MACRO_CRYPTO_EX CRYPTO_EX_INDEX_RSA;
MACRO_CRYPTO_EX CRYPTO_EX_INDEX_SSL;
MACRO_CRYPTO_EX CRYPTO_EX_INDEX_SSL_CTX;
MACRO_CRYPTO_EX CRYPTO_EX_INDEX_SSL_SESSION;
MACRO_CRYPTO_EX CRYPTO_EX_INDEX_STORE;
MACRO_CRYPTO_EX CRYPTO_EX_INDEX_UI;
MACRO_CRYPTO_EX CRYPTO_EX_INDEX_USER;
MACRO_CRYPTO_EX CRYPTO_EX_INDEX_X509;
MACRO_CRYPTO_EX CRYPTO_EX_INDEX_X509_STORE;
MACRO_CRYPTO_EX CRYPTO_EX_INDEX_X509_STORE_CTX;
MACRO_CRYPTO_F CRYPTO_F_CRYPTO_GET_EX_NEW_INDEX;
MACRO_CRYPTO_F CRYPTO_F_CRYPTO_GET_NEW_DYNLOCKID;
MACRO_CRYPTO_F CRYPTO_F_CRYPTO_GET_NEW_LOCKID;
MACRO_CRYPTO_F CRYPTO_F_CRYPTO_SET_EX_DATA;
MACRO_CRYPTO_F CRYPTO_F_DEF_ADD_INDEX;
MACRO_CRYPTO_F CRYPTO_F_DEF_GET_CLASS;
MACRO_CRYPTO_F CRYPTO_F_INT_DUP_EX_DATA;
MACRO_CRYPTO_F CRYPTO_F_INT_FREE_EX_DATA;
MACRO_CRYPTO_F CRYPTO_F_INT_NEW_EX_DATA;
MACRO_CRYPTO CRYPTO_LOCK;
MACRO_CRYPTO CRYPTO_LOCK_BIO;
MACRO_CRYPTO CRYPTO_LOCK_BN;
MACRO_CRYPTO CRYPTO_LOCK_COMP;
MACRO_CRYPTO CRYPTO_LOCK_DH;
MACRO_CRYPTO CRYPTO_LOCK_DSA;
MACRO_CRYPTO CRYPTO_LOCK_DSO;
MACRO_CRYPTO CRYPTO_LOCK_DYNLOCK;
MACRO_CRYPTO CRYPTO_LOCK_EC;
MACRO_CRYPTO CRYPTO_LOCK_ECDH;
MACRO_CRYPTO CRYPTO_LOCK_ECDSA;
MACRO_CRYPTO CRYPTO_LOCK_EC_PRE_COMP;
MACRO_CRYPTO CRYPTO_LOCK_ENGINE;
MACRO_CRYPTO CRYPTO_LOCK_ERR;
MACRO_CRYPTO CRYPTO_LOCK_EVP_PKEY;
MACRO_CRYPTO CRYPTO_LOCK_EX_DATA;
MACRO_CRYPTO CRYPTO_LOCK_GETHOSTBYNAME;
MACRO_CRYPTO CRYPTO_LOCK_GETSERVBYNAME;
MACRO_CRYPTO CRYPTO_LOCK_MALLOC;
MACRO_CRYPTO CRYPTO_LOCK_MALLOC2;
MACRO_CRYPTO CRYPTO_LOCK_RAND;
MACRO_CRYPTO CRYPTO_LOCK_RAND2;
MACRO_CRYPTO CRYPTO_LOCK_READDIR;
MACRO_CRYPTO CRYPTO_LOCK_RSA;
MACRO_CRYPTO CRYPTO_LOCK_RSA_BLINDING;
MACRO_CRYPTO CRYPTO_LOCK_SSL;
MACRO_CRYPTO CRYPTO_LOCK_SSL_CERT;
MACRO_CRYPTO CRYPTO_LOCK_SSL_CTX;
MACRO_CRYPTO CRYPTO_LOCK_SSL_METHOD;
MACRO_CRYPTO CRYPTO_LOCK_SSL_SESSION;
MACRO_CRYPTO CRYPTO_LOCK_SSL_SESS_CERT;
MACRO_CRYPTO CRYPTO_LOCK_STORE;
MACRO_CRYPTO CRYPTO_LOCK_UI;
MACRO_CRYPTO CRYPTO_LOCK_X509;
MACRO_CRYPTO CRYPTO_LOCK_X509_CRL;
MACRO_CRYPTO CRYPTO_LOCK_X509_INFO;
MACRO_CRYPTO CRYPTO_LOCK_X509_PKEY;
MACRO_CRYPTO CRYPTO_LOCK_X509_REQ;
MACRO_CRYPTO CRYPTO_LOCK_X509_STORE;
MACRO_CRYPTO CRYPTO_MEM_CHECK_DISABLE;
MACRO_CRYPTO CRYPTO_MEM_CHECK_ENABLE;
MACRO_CRYPTO CRYPTO_MEM_CHECK_OFF;
MACRO_CRYPTO CRYPTO_MEM_CHECK_ON;
MACRO_CRYPTO CRYPTO_NUM_LOCKS;
MACRO_CRYPTO CRYPTO_READ;
MACRO_CRYPTO_F CRYPTO_R_NO_DYNLOCK_CREATE_CALLBACK;
MACRO_CRYPTO CRYPTO_UNLOCK;
MACRO_CRYPTO CRYPTO_WRITE;
MACRO_CS5 CS5;
MACRO_CS5 CS6;
MACRO_CS5 CS7;
MACRO_CS8 CS8;
MACRO_CIGNORE CSIZE;
MACRO_CSTART CSTART;
MACRO_CINTR CSTATUS;
MACRO_CSTOP CSTOP;
MACRO_CS8 CSTOPB;
MACRO_CSUSP CSUSP;
MACRO_CTIME CTIME;
MACRO_ALLDELAY CTLECH;
MACRO_CTLFLAG CTLFLAG_ANYBODY;
MACRO_CTLFLAG CTLFLAG_KERN;
MACRO_CTLFLAG CTLFLAG_LOCKED;
MACRO_CTLFLAG CTLFLAG_MASKED;
MACRO_CTLFLAG CTLFLAG_NOAUTO;
MACRO_CTLFLAG CTLFLAG_NOLOCK;
MACRO_CTLFLAG CTLFLAG_OID2;
MACRO_CTLFLAG CTLFLAG_RD;
MACRO_CTLFLAG CTLFLAG_RW;
MACRO_CTLFLAG CTLFLAG_SECURE;
MACRO_CTLFLAG CTLFLAG_WR;
MACRO_CTLTYPE CTLTYPE;
MACRO_CTLTYPE_NODE CTLTYPE_INT;
MACRO_CTLTYPE_NODE CTLTYPE_NODE;
MACRO_CTLTYPE_NODE CTLTYPE_OPAQUE;
MACRO_CTLTYPE_NODE CTLTYPE_QUAD;
MACRO_CTLTYPE_NODE CTLTYPE_STRING;
MACRO_CTLTYPE_NODE CTLTYPE_STRUCT;
MACRO_CTL_UNSPEC CTL_DEBUG;
MACRO_CTL_DEBUG CTL_DEBUG_MAXID;
MACRO_CTL_DEBUG CTL_DEBUG_NAME;
MACRO_CTL_DEBUG CTL_DEBUG_VALUE;
MACRO_CTL_UNSPEC CTL_HW;
MACRO_CTL_UNSPEC CTL_KERN;
MACRO_CTL_UNSPEC CTL_MACHDEP;
MACRO_CTL_UNSPEC CTL_MAXID;
MACRO_CTL CTL_MAXNAME;
MACRO_CTL_UNSPEC CTL_NET;
MACRO_CTL_UNSPEC CTL_UNSPEC;
MACRO_CTL_UNSPEC CTL_USER;
MACRO_CTL_UNSPEC CTL_VFS;
MACRO_CTL_UNSPEC CTL_VM;
MACRO_CTX CTX_TEST;
ipp_op_e CUPS_ACCEPT_JOBS;
ipp_op_e CUPS_ADD_MODIFY_CLASS;
ipp_op_e CUPS_ADD_MODIFY_PRINTER;
cups_adv_e CUPS_ADVANCE_FILE;
cups_adv_e CUPS_ADVANCE_JOB;
cups_adv_e CUPS_ADVANCE_NONE;
cups_adv_e CUPS_ADVANCE_PAGE;
cups_adv_e CUPS_ADVANCE_SET;
ipp_op_e CUPS_AUTHENTICATE_JOB;
cups_encoding_e CUPS_AUTO_ENCODING;
cups_backend_e CUPS_BACKEND_AUTH_REQUIRED;
cups_backend_e CUPS_BACKEND_CANCEL;
cups_backend_e CUPS_BACKEND_FAILED;
cups_backend_e CUPS_BACKEND_HOLD;
cups_backend_e CUPS_BACKEND_OK;
cups_backend_e CUPS_BACKEND_RETRY;
cups_backend_e CUPS_BACKEND_RETRY_CURRENT;
cups_backend_e CUPS_BACKEND_STOP;
MACRO_CUPS_VERSION CUPS_BC_FD;
cups_cspace_e CUPS_CSPACE_ADOBERGB;
cups_cspace_e CUPS_CSPACE_CIELab;
cups_cspace_e CUPS_CSPACE_CIEXYZ;
cups_cspace_e CUPS_CSPACE_CMY;
cups_cspace_e CUPS_CSPACE_CMYK;
cups_cspace_e CUPS_CSPACE_DEVICE1;
cups_cspace_e CUPS_CSPACE_DEVICE2;
cups_cspace_e CUPS_CSPACE_DEVICE3;
cups_cspace_e CUPS_CSPACE_DEVICE4;
cups_cspace_e CUPS_CSPACE_DEVICE5;
cups_cspace_e CUPS_CSPACE_DEVICE6;
cups_cspace_e CUPS_CSPACE_DEVICE7;
cups_cspace_e CUPS_CSPACE_DEVICE8;
cups_cspace_e CUPS_CSPACE_DEVICE9;
cups_cspace_e CUPS_CSPACE_DEVICEA;
cups_cspace_e CUPS_CSPACE_DEVICEB;
cups_cspace_e CUPS_CSPACE_DEVICEC;
cups_cspace_e CUPS_CSPACE_DEVICED;
cups_cspace_e CUPS_CSPACE_DEVICEE;
cups_cspace_e CUPS_CSPACE_DEVICEF;
cups_cspace_e CUPS_CSPACE_GMCK;
cups_cspace_e CUPS_CSPACE_GMCS;
cups_cspace_e CUPS_CSPACE_GOLD;
cups_cspace_e CUPS_CSPACE_ICC1;
cups_cspace_e CUPS_CSPACE_ICC2;
cups_cspace_e CUPS_CSPACE_ICC3;
cups_cspace_e CUPS_CSPACE_ICC4;
cups_cspace_e CUPS_CSPACE_ICC5;
cups_cspace_e CUPS_CSPACE_ICC6;
cups_cspace_e CUPS_CSPACE_ICC7;
cups_cspace_e CUPS_CSPACE_ICC8;
cups_cspace_e CUPS_CSPACE_ICC9;
cups_cspace_e CUPS_CSPACE_ICCA;
cups_cspace_e CUPS_CSPACE_ICCB;
cups_cspace_e CUPS_CSPACE_ICCC;
cups_cspace_e CUPS_CSPACE_ICCD;
cups_cspace_e CUPS_CSPACE_ICCE;
cups_cspace_e CUPS_CSPACE_ICCF;
cups_cspace_e CUPS_CSPACE_K;
cups_cspace_e CUPS_CSPACE_KCMY;
cups_cspace_e CUPS_CSPACE_KCMYcm;
cups_cspace_e CUPS_CSPACE_RGB;
cups_cspace_e CUPS_CSPACE_RGBA;
cups_cspace_e CUPS_CSPACE_RGBW;
cups_cspace_e CUPS_CSPACE_SILVER;
cups_cspace_e CUPS_CSPACE_SRGB;
cups_cspace_e CUPS_CSPACE_SW;
cups_cspace_e CUPS_CSPACE_W;
cups_cspace_e CUPS_CSPACE_WHITE;
cups_cspace_e CUPS_CSPACE_YMC;
cups_cspace_e CUPS_CSPACE_YMCK;
cups_cut_e CUPS_CUT_FILE;
cups_cut_e CUPS_CUT_JOB;
cups_cut_e CUPS_CUT_NONE;
cups_cut_e CUPS_CUT_PAGE;
cups_cut_e CUPS_CUT_SET;
MACRO_CUPS_VERSION CUPS_DATE_ANY;
ipp_op_e CUPS_DELETE_CLASS;
ipp_op_e CUPS_DELETE_PRINTER;
cups_edge_e CUPS_EDGE_BOTTOM;
cups_edge_e CUPS_EDGE_LEFT;
cups_edge_e CUPS_EDGE_RIGHT;
cups_edge_e CUPS_EDGE_TOP;
cups_encoding_e CUPS_ENCODING_DBCS_END;
cups_encoding_e CUPS_ENCODING_SBCS_END;
cups_encoding_e CUPS_ENCODING_VBCS_END;
cups_encoding_e CUPS_EUC_CN;
cups_encoding_e CUPS_EUC_JP;
cups_encoding_e CUPS_EUC_KR;
cups_encoding_e CUPS_EUC_TW;
MACRO_CUPS_VERSION CUPS_EXCLUDE_NONE;
cups_bool_e CUPS_FALSE;
MACRO_CUPS CUPS_FILE_GZIP;
MACRO_CUPS CUPS_FILE_NONE;
ipp_op_e CUPS_GET_CLASSES;
ipp_op_e CUPS_GET_DEFAULT;
ipp_op_e CUPS_GET_DEVICES;
ipp_op_e CUPS_GET_DOCUMENT;
ipp_op_e CUPS_GET_PPD;
ipp_op_e CUPS_GET_PPDS;
ipp_op_e CUPS_GET_PRINTERS;
cups_icspace_e CUPS_IMAGE_BLACK;
cups_icspace_e CUPS_IMAGE_CMY;
cups_icspace_e CUPS_IMAGE_CMYK;
cups_icspace_e CUPS_IMAGE_RGB;
cups_icspace_e CUPS_IMAGE_RGB_CMYK;
cups_icspace_e CUPS_IMAGE_WHITE;
MACRO_CUPS_VERSION CUPS_INCLUDE_ALL;
cups_encoding_e CUPS_ISO8859_1;
cups_encoding_e CUPS_ISO8859_10;
cups_encoding_e CUPS_ISO8859_11;
cups_encoding_e CUPS_ISO8859_13;
cups_encoding_e CUPS_ISO8859_14;
cups_encoding_e CUPS_ISO8859_15;
cups_encoding_e CUPS_ISO8859_16;
cups_encoding_e CUPS_ISO8859_2;
cups_encoding_e CUPS_ISO8859_3;
cups_encoding_e CUPS_ISO8859_4;
cups_encoding_e CUPS_ISO8859_5;
cups_encoding_e CUPS_ISO8859_6;
cups_encoding_e CUPS_ISO8859_7;
cups_encoding_e CUPS_ISO8859_8;
cups_encoding_e CUPS_ISO8859_9;
cups_encoding_e CUPS_JIS_X0213;
MACRO_CUPS_VERSION CUPS_JOBID_ALL;
MACRO_CUPS_VERSION CUPS_JOBID_CURRENT;
cups_jog_e CUPS_JOG_FILE;
cups_jog_e CUPS_JOG_JOB;
cups_jog_e CUPS_JOG_NONE;
cups_jog_e CUPS_JOG_SET;
cups_encoding_e CUPS_KOI8_R;
cups_encoding_e CUPS_KOI8_U;
MACRO_CUPS_VERSION CUPS_LENGTH_VARIABLE;
cups_encoding_e CUPS_MAC_ROMAN;
MACRO_CUPS_RASTER CUPS_MAX_CHAN;
MACRO_CUPS_RASTER CUPS_MAX_LUT;
MACRO_CUPS_RASTER CUPS_MAX_RGB;
MACRO_CUPS_RASTER CUPS_MAX_USTRING;
ipp_op_e CUPS_MOVE_JOB;
cups_order_e CUPS_ORDER_BANDED;
cups_order_e CUPS_ORDER_CHUNKED;
cups_order_e CUPS_ORDER_PLANAR;
cups_orient_e CUPS_ORIENT_0;
cups_orient_e CUPS_ORIENT_180;
cups_orient_e CUPS_ORIENT_270;
cups_orient_e CUPS_ORIENT_90;
cups_ptype_e CUPS_PRINTER_AUTHENTICATED;
cups_ptype_e CUPS_PRINTER_BIND;
cups_ptype_e CUPS_PRINTER_BW;
cups_ptype_e CUPS_PRINTER_CLASS;
cups_ptype_e CUPS_PRINTER_COLLATE;
cups_ptype_e CUPS_PRINTER_COLOR;
cups_ptype_e CUPS_PRINTER_COMMANDS;
cups_ptype_e CUPS_PRINTER_COPIES;
cups_ptype_e CUPS_PRINTER_COVER;
cups_ptype_e CUPS_PRINTER_DEFAULT;
cups_ptype_e CUPS_PRINTER_DELETE;
cups_ptype_e CUPS_PRINTER_DISCOVERED;
cups_ptype_e CUPS_PRINTER_DUPLEX;
cups_ptype_e CUPS_PRINTER_FAX;
cups_ptype_e CUPS_PRINTER_IMPLICIT;
cups_ptype_e CUPS_PRINTER_LARGE;
cups_ptype_e CUPS_PRINTER_LOCAL;
cups_ptype_e CUPS_PRINTER_MEDIUM;
cups_ptype_e CUPS_PRINTER_MFP;
cups_ptype_e CUPS_PRINTER_NOT_SHARED;
cups_ptype_e CUPS_PRINTER_OPTIONS;
cups_ptype_e CUPS_PRINTER_PUNCH;
cups_ptype_e CUPS_PRINTER_REJECTING;
cups_ptype_e CUPS_PRINTER_REMOTE;
cups_ptype_e CUPS_PRINTER_SCANNER;
cups_ptype_e CUPS_PRINTER_SMALL;
cups_ptype_e CUPS_PRINTER_SORT;
cups_ptype_e CUPS_PRINTER_STAPLE;
cups_ptype_e CUPS_PRINTER_VARIABLE;
MACRO_CUPS_RASTER CUPS_RASTER_HAVE_COLORIMETRIC;
MACRO_CUPS_RASTER CUPS_RASTER_HAVE_DEVICE;
MACRO_CUPS_RASTER CUPS_RASTER_HAVE_PWGRASTER;
cups_mode_e CUPS_RASTER_READ;
MACRO_CUPS_RASTER CUPS_RASTER_REVSYNC;
MACRO_CUPS_RASTER CUPS_RASTER_REVSYNCv1;
MACRO_CUPS_RASTER CUPS_RASTER_REVSYNCv2;
MACRO_CUPS_RASTER CUPS_RASTER_SYNC;
MACRO_CUPS_RASTER CUPS_RASTER_SYNC_PWG;
MACRO_CUPS_RASTER CUPS_RASTER_SYNCv1;
MACRO_CUPS_RASTER CUPS_RASTER_SYNCv2;
cups_mode_e CUPS_RASTER_WRITE;
cups_mode_e CUPS_RASTER_WRITE_COMPRESSED;
cups_mode_e CUPS_RASTER_WRITE_PWG;
ipp_op_e CUPS_REJECT_JOBS;
cups_sc_bidi_e CUPS_SC_BIDI_NOT_SUPPORTED;
cups_sc_bidi_e CUPS_SC_BIDI_SUPPORTED;
cups_sc_command_e CUPS_SC_CMD_DRAIN_OUTPUT;
cups_sc_command_e CUPS_SC_CMD_GET_BIDI;
cups_sc_command_e CUPS_SC_CMD_GET_CONNECTED;
cups_sc_command_e CUPS_SC_CMD_GET_DEVICE_ID;
cups_sc_command_e CUPS_SC_CMD_GET_STATE;
cups_sc_command_e CUPS_SC_CMD_MAX;
cups_sc_command_e CUPS_SC_CMD_NONE;
cups_sc_command_e CUPS_SC_CMD_SNMP_GET;
cups_sc_command_e CUPS_SC_CMD_SNMP_GET_NEXT;
cups_sc_command_e CUPS_SC_CMD_SOFT_RESET;
cups_sc_connected_e CUPS_SC_CONNECTED;
MACRO_CUPS_RASTER CUPS_SC_FD;
cups_sc_connected_e CUPS_SC_NOT_CONNECTED;
cups_sc_state_e CUPS_SC_STATE_BUSY;
cups_sc_state_e CUPS_SC_STATE_ERROR;
cups_sc_state_e CUPS_SC_STATE_MARKER_EMPTY;
cups_sc_state_e CUPS_SC_STATE_MARKER_LOW;
cups_sc_state_e CUPS_SC_STATE_MEDIA_EMPTY;
cups_sc_state_e CUPS_SC_STATE_MEDIA_LOW;
cups_sc_state_e CUPS_SC_STATE_OFFLINE;
cups_sc_state_e CUPS_SC_STATE_ONLINE;
cups_sc_status_e CUPS_SC_STATUS_BAD_MESSAGE;
cups_sc_status_e CUPS_SC_STATUS_IO_ERROR;
cups_sc_status_e CUPS_SC_STATUS_NONE;
cups_sc_status_e CUPS_SC_STATUS_NOT_IMPLEMENTED;
cups_sc_status_e CUPS_SC_STATUS_NO_RESPONSE;
cups_sc_status_e CUPS_SC_STATUS_OK;
cups_sc_status_e CUPS_SC_STATUS_TIMEOUT;
cups_sc_status_e CUPS_SC_STATUS_TOO_BIG;
ipp_status_e CUPS_SEE_OTHER;
ipp_op_e CUPS_SET_DEFAULT;
MACRO_CUPS_VERSION CUPS_TIMEOUT_DEFAULT;
cups_bool_e CUPS_TRUE;
cups_encoding_e CUPS_US_ASCII;
cups_encoding_e CUPS_UTF8;
MACRO_CUPS_VERSION CUPS_VERSION_MAJOR;
MACRO_CUPS_VERSION CUPS_VERSION_MINOR;
MACRO_CUPS_VERSION CUPS_VERSION_PATCH;
MACRO_CUPS_VERSION CUPS_WHICHJOBS_ACTIVE;
MACRO_CUPS_VERSION CUPS_WHICHJOBS_ALL;
MACRO_CUPS_VERSION CUPS_WHICHJOBS_COMPLETED;
cups_encoding_e CUPS_WINDOWS_1250;
cups_encoding_e CUPS_WINDOWS_1251;
cups_encoding_e CUPS_WINDOWS_1252;
cups_encoding_e CUPS_WINDOWS_1253;
cups_encoding_e CUPS_WINDOWS_1254;
cups_encoding_e CUPS_WINDOWS_1255;
cups_encoding_e CUPS_WINDOWS_1256;
cups_encoding_e CUPS_WINDOWS_1257;
cups_encoding_e CUPS_WINDOWS_1258;
cups_encoding_e CUPS_WINDOWS_1361;
cups_encoding_e CUPS_WINDOWS_874;
cups_encoding_e CUPS_WINDOWS_932;
cups_encoding_e CUPS_WINDOWS_936;
cups_encoding_e CUPS_WINDOWS_949;
cups_encoding_e CUPS_WINDOWS_950;
MACRO_CURLAUTH CURLAUTH_ANY;
MACRO_CURLAUTH CURLAUTH_ANYSAFE;
MACRO_CURLAUTH CURLAUTH_BASIC;
MACRO_CURLAUTH CURLAUTH_DIGEST;
MACRO_CURLAUTH CURLAUTH_DIGEST_IE;
MACRO_CURLAUTH CURLAUTH_GSSNEGOTIATE;
MACRO_CURLAUTH CURLAUTH_NONE;
MACRO_CURLAUTH CURLAUTH_NTLM;
MACRO_CURLAUTH CURLAUTH_ONLY;
$7AE70D482D57B64FB9C9B10583B098AB CURLCLOSEPOLICY_CALLBACK;
$7AE70D482D57B64FB9C9B10583B098AB CURLCLOSEPOLICY_LAST;
$7AE70D482D57B64FB9C9B10583B098AB CURLCLOSEPOLICY_LEAST_RECENTLY_USED;
$7AE70D482D57B64FB9C9B10583B098AB CURLCLOSEPOLICY_LEAST_TRAFFIC;
$7AE70D482D57B64FB9C9B10583B098AB CURLCLOSEPOLICY_NONE;
$7AE70D482D57B64FB9C9B10583B098AB CURLCLOSEPOLICY_OLDEST;
$7AE70D482D57B64FB9C9B10583B098AB CURLCLOSEPOLICY_SLOWEST;
$031587082C14B3DB98E124F1346E686B CURLE_ABORTED_BY_CALLBACK;
$031587082C14B3DB98E124F1346E686B CURLE_AGAIN;
MACRO_CURLE CURLE_ALREADY_COMPLETE;
$031587082C14B3DB98E124F1346E686B CURLE_BAD_CONTENT_ENCODING;
$031587082C14B3DB98E124F1346E686B CURLE_BAD_DOWNLOAD_RESUME;
$031587082C14B3DB98E124F1346E686B CURLE_BAD_FUNCTION_ARGUMENT;
$031587082C14B3DB98E124F1346E686B CURLE_CHUNK_FAILED;
$031587082C14B3DB98E124F1346E686B CURLE_CONV_FAILED;
$031587082C14B3DB98E124F1346E686B CURLE_CONV_REQD;
$031587082C14B3DB98E124F1346E686B CURLE_COULDNT_CONNECT;
$031587082C14B3DB98E124F1346E686B CURLE_COULDNT_RESOLVE_HOST;
$031587082C14B3DB98E124F1346E686B CURLE_COULDNT_RESOLVE_PROXY;
$031587082C14B3DB98E124F1346E686B CURLE_FAILED_INIT;
$031587082C14B3DB98E124F1346E686B CURLE_FILESIZE_EXCEEDED;
$031587082C14B3DB98E124F1346E686B CURLE_FILE_COULDNT_READ_FILE;
$031587082C14B3DB98E124F1346E686B CURLE_FTP_BAD_FILE_LIST;
$031587082C14B3DB98E124F1346E686B CURLE_FTP_CANT_GET_HOST;
$031587082C14B3DB98E124F1346E686B CURLE_FTP_COULDNT_RETR_FILE;
$031587082C14B3DB98E124F1346E686B CURLE_FTP_COULDNT_SET_TYPE;
$031587082C14B3DB98E124F1346E686B CURLE_FTP_COULDNT_USE_REST;
$031587082C14B3DB98E124F1346E686B CURLE_FTP_PORT_FAILED;
$031587082C14B3DB98E124F1346E686B CURLE_FTP_PRET_FAILED;
$031587082C14B3DB98E124F1346E686B CURLE_FTP_WEIRD_227_FORMAT;
$031587082C14B3DB98E124F1346E686B CURLE_FTP_WEIRD_PASS_REPLY;
$031587082C14B3DB98E124F1346E686B CURLE_FTP_WEIRD_PASV_REPLY;
$031587082C14B3DB98E124F1346E686B CURLE_FTP_WEIRD_SERVER_REPLY;
$031587082C14B3DB98E124F1346E686B CURLE_FUNCTION_NOT_FOUND;
$031587082C14B3DB98E124F1346E686B CURLE_GOT_NOTHING;
$031587082C14B3DB98E124F1346E686B CURLE_HTTP_POST_ERROR;
$031587082C14B3DB98E124F1346E686B CURLE_HTTP_RETURNED_ERROR;
$031587082C14B3DB98E124F1346E686B CURLE_INTERFACE_FAILED;
$031587082C14B3DB98E124F1346E686B CURLE_LDAP_CANNOT_BIND;
$031587082C14B3DB98E124F1346E686B CURLE_LDAP_INVALID_URL;
$031587082C14B3DB98E124F1346E686B CURLE_LDAP_SEARCH_FAILED;
$031587082C14B3DB98E124F1346E686B CURLE_LOGIN_DENIED;
$031587082C14B3DB98E124F1346E686B CURLE_OBSOLETE10;
$031587082C14B3DB98E124F1346E686B CURLE_OBSOLETE12;
$031587082C14B3DB98E124F1346E686B CURLE_OBSOLETE16;
$031587082C14B3DB98E124F1346E686B CURLE_OBSOLETE20;
$031587082C14B3DB98E124F1346E686B CURLE_OBSOLETE24;
$031587082C14B3DB98E124F1346E686B CURLE_OBSOLETE29;
$031587082C14B3DB98E124F1346E686B CURLE_OBSOLETE32;
$031587082C14B3DB98E124F1346E686B CURLE_OBSOLETE4;
$031587082C14B3DB98E124F1346E686B CURLE_OBSOLETE40;
$031587082C14B3DB98E124F1346E686B CURLE_OBSOLETE44;
$031587082C14B3DB98E124F1346E686B CURLE_OBSOLETE46;
$031587082C14B3DB98E124F1346E686B CURLE_OBSOLETE50;
$031587082C14B3DB98E124F1346E686B CURLE_OBSOLETE57;
$031587082C14B3DB98E124F1346E686B CURLE_OK;
$031587082C14B3DB98E124F1346E686B CURLE_OPERATION_TIMEDOUT;
$031587082C14B3DB98E124F1346E686B CURLE_OUT_OF_MEMORY;
$031587082C14B3DB98E124F1346E686B CURLE_PARTIAL_FILE;
$031587082C14B3DB98E124F1346E686B CURLE_PEER_FAILED_VERIFICATION;
$031587082C14B3DB98E124F1346E686B CURLE_QUOTE_ERROR;
$031587082C14B3DB98E124F1346E686B CURLE_RANGE_ERROR;
$031587082C14B3DB98E124F1346E686B CURLE_READ_ERROR;
$031587082C14B3DB98E124F1346E686B CURLE_RECV_ERROR;
$031587082C14B3DB98E124F1346E686B CURLE_REMOTE_ACCESS_DENIED;
$031587082C14B3DB98E124F1346E686B CURLE_REMOTE_DISK_FULL;
$031587082C14B3DB98E124F1346E686B CURLE_REMOTE_FILE_EXISTS;
$031587082C14B3DB98E124F1346E686B CURLE_REMOTE_FILE_NOT_FOUND;
$031587082C14B3DB98E124F1346E686B CURLE_RTSP_CSEQ_ERROR;
$031587082C14B3DB98E124F1346E686B CURLE_RTSP_SESSION_ERROR;
$031587082C14B3DB98E124F1346E686B CURLE_SEND_ERROR;
$031587082C14B3DB98E124F1346E686B CURLE_SEND_FAIL_REWIND;
$031587082C14B3DB98E124F1346E686B CURLE_SSH;
$031587082C14B3DB98E124F1346E686B CURLE_SSL_CACERT;
$031587082C14B3DB98E124F1346E686B CURLE_SSL_CACERT_BADFILE;
$031587082C14B3DB98E124F1346E686B CURLE_SSL_CERTPROBLEM;
$031587082C14B3DB98E124F1346E686B CURLE_SSL_CIPHER;
$031587082C14B3DB98E124F1346E686B CURLE_SSL_CONNECT_ERROR;
$031587082C14B3DB98E124F1346E686B CURLE_SSL_CRL_BADFILE;
$031587082C14B3DB98E124F1346E686B CURLE_SSL_ENGINE_INITFAILED;
$031587082C14B3DB98E124F1346E686B CURLE_SSL_ENGINE_NOTFOUND;
$031587082C14B3DB98E124F1346E686B CURLE_SSL_ENGINE_SETFAILED;
$031587082C14B3DB98E124F1346E686B CURLE_SSL_ISSUER_ERROR;
$031587082C14B3DB98E124F1346E686B CURLE_SSL_SHUTDOWN_FAILED;
$031587082C14B3DB98E124F1346E686B CURLE_TELNET_OPTION_SYNTAX;
$031587082C14B3DB98E124F1346E686B CURLE_TFTP_ILLEGAL;
$031587082C14B3DB98E124F1346E686B CURLE_TFTP_NOSUCHUSER;
$031587082C14B3DB98E124F1346E686B CURLE_TFTP_NOTFOUND;
$031587082C14B3DB98E124F1346E686B CURLE_TFTP_PERM;
$031587082C14B3DB98E124F1346E686B CURLE_TFTP_UNKNOWNID;
$031587082C14B3DB98E124F1346E686B CURLE_TOO_MANY_REDIRECTS;
$031587082C14B3DB98E124F1346E686B CURLE_UNKNOWN_TELNET_OPTION;
$031587082C14B3DB98E124F1346E686B CURLE_UNSUPPORTED_PROTOCOL;
$031587082C14B3DB98E124F1346E686B CURLE_UPLOAD_FAILED;
$031587082C14B3DB98E124F1346E686B CURLE_URL_MALFORMAT;
$031587082C14B3DB98E124F1346E686B CURLE_USE_SSL_FAILED;
$031587082C14B3DB98E124F1346E686B CURLE_WRITE_ERROR;
$27A01D9EE3F8426B35A7597034B60846 CURLFILETYPE_DEVICE_BLOCK;
$27A01D9EE3F8426B35A7597034B60846 CURLFILETYPE_DEVICE_CHAR;
$27A01D9EE3F8426B35A7597034B60846 CURLFILETYPE_DIRECTORY;
$27A01D9EE3F8426B35A7597034B60846 CURLFILETYPE_DOOR;
$27A01D9EE3F8426B35A7597034B60846 CURLFILETYPE_FILE;
$27A01D9EE3F8426B35A7597034B60846 CURLFILETYPE_NAMEDPIPE;
$27A01D9EE3F8426B35A7597034B60846 CURLFILETYPE_SOCKET;
$27A01D9EE3F8426B35A7597034B60846 CURLFILETYPE_SYMLINK;
$27A01D9EE3F8426B35A7597034B60846 CURLFILETYPE_UNKNOWN;
MACRO_CURLFINFOFLAG CURLFINFOFLAG_KNOWN_FILENAME;
MACRO_CURLFINFOFLAG CURLFINFOFLAG_KNOWN_FILETYPE;
MACRO_CURLFINFOFLAG CURLFINFOFLAG_KNOWN_GID;
MACRO_CURLFINFOFLAG CURLFINFOFLAG_KNOWN_HLINKCOUNT;
MACRO_CURLFINFOFLAG CURLFINFOFLAG_KNOWN_PERM;
MACRO_CURLFINFOFLAG CURLFINFOFLAG_KNOWN_SIZE;
MACRO_CURLFINFOFLAG CURLFINFOFLAG_KNOWN_TIME;
MACRO_CURLFINFOFLAG CURLFINFOFLAG_KNOWN_UID;
$28266B4D1FF5A8F2FF1835543AB19A29 CURLFORM_ARRAY;
$28266B4D1FF5A8F2FF1835543AB19A29 CURLFORM_BUFFER;
$28266B4D1FF5A8F2FF1835543AB19A29 CURLFORM_BUFFERLENGTH;
$28266B4D1FF5A8F2FF1835543AB19A29 CURLFORM_BUFFERPTR;
$28266B4D1FF5A8F2FF1835543AB19A29 CURLFORM_CONTENTHEADER;
$28266B4D1FF5A8F2FF1835543AB19A29 CURLFORM_CONTENTSLENGTH;
$28266B4D1FF5A8F2FF1835543AB19A29 CURLFORM_CONTENTTYPE;
$28266B4D1FF5A8F2FF1835543AB19A29 CURLFORM_COPYCONTENTS;
$28266B4D1FF5A8F2FF1835543AB19A29 CURLFORM_COPYNAME;
$28266B4D1FF5A8F2FF1835543AB19A29 CURLFORM_END;
$28266B4D1FF5A8F2FF1835543AB19A29 CURLFORM_FILE;
$28266B4D1FF5A8F2FF1835543AB19A29 CURLFORM_FILECONTENT;
$28266B4D1FF5A8F2FF1835543AB19A29 CURLFORM_FILENAME;
$28266B4D1FF5A8F2FF1835543AB19A29 CURLFORM_LASTENTRY;
$28266B4D1FF5A8F2FF1835543AB19A29 CURLFORM_NAMELENGTH;
$28266B4D1FF5A8F2FF1835543AB19A29 CURLFORM_NOTHING;
$28266B4D1FF5A8F2FF1835543AB19A29 CURLFORM_OBSOLETE;
$28266B4D1FF5A8F2FF1835543AB19A29 CURLFORM_OBSOLETE2;
$28266B4D1FF5A8F2FF1835543AB19A29 CURLFORM_PTRCONTENTS;
$28266B4D1FF5A8F2FF1835543AB19A29 CURLFORM_PTRNAME;
$28266B4D1FF5A8F2FF1835543AB19A29 CURLFORM_STREAM;
$7C7EBFB03B6B9DB8456CC748404AF258 CURLFTPAUTH_DEFAULT;
$7C7EBFB03B6B9DB8456CC748404AF258 CURLFTPAUTH_LAST;
$7C7EBFB03B6B9DB8456CC748404AF258 CURLFTPAUTH_SSL;
$7C7EBFB03B6B9DB8456CC748404AF258 CURLFTPAUTH_TLS;
$5BB59419A030D6A179F24FB1144C5140 CURLFTPMETHOD_DEFAULT;
$5BB59419A030D6A179F24FB1144C5140 CURLFTPMETHOD_LAST;
$5BB59419A030D6A179F24FB1144C5140 CURLFTPMETHOD_MULTICWD;
$5BB59419A030D6A179F24FB1144C5140 CURLFTPMETHOD_NOCWD;
$5BB59419A030D6A179F24FB1144C5140 CURLFTPMETHOD_SINGLECWD;
$5BC5AC313FBD748556525804BA480EF5 CURLFTPSSL_CCC_ACTIVE;
$5BC5AC313FBD748556525804BA480EF5 CURLFTPSSL_CCC_LAST;
$5BC5AC313FBD748556525804BA480EF5 CURLFTPSSL_CCC_NONE;
$5BC5AC313FBD748556525804BA480EF5 CURLFTPSSL_CCC_PASSIVE;
$D3B97490B7B9C86B943C2E39D5FA02F9 CURLFTP_CREATE_DIR;
$D3B97490B7B9C86B943C2E39D5FA02F9 CURLFTP_CREATE_DIR_LAST;
$D3B97490B7B9C86B943C2E39D5FA02F9 CURLFTP_CREATE_DIR_NONE;
$D3B97490B7B9C86B943C2E39D5FA02F9 CURLFTP_CREATE_DIR_RETRY;
$5BB96409C7C381A52DD11FDA0AE1E04F CURLINFO_APPCONNECT_TIME;
$5BB96409C7C381A52DD11FDA0AE1E04F CURLINFO_CERTINFO;
$5BB96409C7C381A52DD11FDA0AE1E04F CURLINFO_CONDITION_UNMET;
$5BB96409C7C381A52DD11FDA0AE1E04F CURLINFO_CONNECT_TIME;
$5BB96409C7C381A52DD11FDA0AE1E04F CURLINFO_CONTENT_LENGTH_DOWNLOAD;
$5BB96409C7C381A52DD11FDA0AE1E04F CURLINFO_CONTENT_LENGTH_UPLOAD;
$5BB96409C7C381A52DD11FDA0AE1E04F CURLINFO_CONTENT_TYPE;
$5BB96409C7C381A52DD11FDA0AE1E04F CURLINFO_COOKIELIST;
$0CDFE265BA8298D003ED8250CCBFBAAD CURLINFO_DATA_IN;
$0CDFE265BA8298D003ED8250CCBFBAAD CURLINFO_DATA_OUT;
MACRO_CURLINFO CURLINFO_DOUBLE;
$5BB96409C7C381A52DD11FDA0AE1E04F CURLINFO_EFFECTIVE_URL;
$0CDFE265BA8298D003ED8250CCBFBAAD CURLINFO_END;
$5BB96409C7C381A52DD11FDA0AE1E04F CURLINFO_FILETIME;
$5BB96409C7C381A52DD11FDA0AE1E04F CURLINFO_FTP_ENTRY_PATH;
$0CDFE265BA8298D003ED8250CCBFBAAD CURLINFO_HEADER_IN;
$0CDFE265BA8298D003ED8250CCBFBAAD CURLINFO_HEADER_OUT;
$5BB96409C7C381A52DD11FDA0AE1E04F CURLINFO_HEADER_SIZE;
$5BB96409C7C381A52DD11FDA0AE1E04F CURLINFO_HTTPAUTH_AVAIL;
$5BB96409C7C381A52DD11FDA0AE1E04F CURLINFO_HTTP_CONNECTCODE;
$5BB96409C7C381A52DD11FDA0AE1E04F CURLINFO_LASTONE;
$5BB96409C7C381A52DD11FDA0AE1E04F CURLINFO_LASTSOCKET;
$5BB96409C7C381A52DD11FDA0AE1E04F CURLINFO_LOCAL_IP;
$5BB96409C7C381A52DD11FDA0AE1E04F CURLINFO_LOCAL_PORT;
MACRO_CURLINFO CURLINFO_LONG;
MACRO_CURLINFO CURLINFO_MASK;
$5BB96409C7C381A52DD11FDA0AE1E04F CURLINFO_NAMELOOKUP_TIME;
$5BB96409C7C381A52DD11FDA0AE1E04F CURLINFO_NONE;
$5BB96409C7C381A52DD11FDA0AE1E04F CURLINFO_NUM_CONNECTS;
$5BB96409C7C381A52DD11FDA0AE1E04F CURLINFO_OS_ERRNO;
$5BB96409C7C381A52DD11FDA0AE1E04F CURLINFO_PRETRANSFER_TIME;
$5BB96409C7C381A52DD11FDA0AE1E04F CURLINFO_PRIMARY_IP;
$5BB96409C7C381A52DD11FDA0AE1E04F CURLINFO_PRIMARY_PORT;
$5BB96409C7C381A52DD11FDA0AE1E04F CURLINFO_PRIVATE;
$5BB96409C7C381A52DD11FDA0AE1E04F CURLINFO_PROXYAUTH_AVAIL;
$5BB96409C7C381A52DD11FDA0AE1E04F CURLINFO_REDIRECT_COUNT;
$5BB96409C7C381A52DD11FDA0AE1E04F CURLINFO_REDIRECT_TIME;
$5BB96409C7C381A52DD11FDA0AE1E04F CURLINFO_REDIRECT_URL;
$5BB96409C7C381A52DD11FDA0AE1E04F CURLINFO_REQUEST_SIZE;
$5BB96409C7C381A52DD11FDA0AE1E04F CURLINFO_RESPONSE_CODE;
$5BB96409C7C381A52DD11FDA0AE1E04F CURLINFO_RTSP_CLIENT_CSEQ;
$5BB96409C7C381A52DD11FDA0AE1E04F CURLINFO_RTSP_CSEQ_RECV;
$5BB96409C7C381A52DD11FDA0AE1E04F CURLINFO_RTSP_SERVER_CSEQ;
$5BB96409C7C381A52DD11FDA0AE1E04F CURLINFO_RTSP_SESSION_ID;
$5BB96409C7C381A52DD11FDA0AE1E04F CURLINFO_SIZE_DOWNLOAD;
$5BB96409C7C381A52DD11FDA0AE1E04F CURLINFO_SIZE_UPLOAD;
MACRO_CURLINFO CURLINFO_SLIST;
$5BB96409C7C381A52DD11FDA0AE1E04F CURLINFO_SPEED_DOWNLOAD;
$5BB96409C7C381A52DD11FDA0AE1E04F CURLINFO_SPEED_UPLOAD;
$0CDFE265BA8298D003ED8250CCBFBAAD CURLINFO_SSL_DATA_IN;
$0CDFE265BA8298D003ED8250CCBFBAAD CURLINFO_SSL_DATA_OUT;
$5BB96409C7C381A52DD11FDA0AE1E04F CURLINFO_SSL_ENGINES;
$5BB96409C7C381A52DD11FDA0AE1E04F CURLINFO_SSL_VERIFYRESULT;
$5BB96409C7C381A52DD11FDA0AE1E04F CURLINFO_STARTTRANSFER_TIME;
MACRO_CURLINFO CURLINFO_STRING;
$0CDFE265BA8298D003ED8250CCBFBAAD CURLINFO_TEXT;
$5BB96409C7C381A52DD11FDA0AE1E04F CURLINFO_TOTAL_TIME;
MACRO_CURLINFO CURLINFO_TYPEMASK;
$56CFACB0BE9E4BA6F465B343389C1FC1 CURLIOCMD_LAST;
$56CFACB0BE9E4BA6F465B343389C1FC1 CURLIOCMD_NOP;
$56CFACB0BE9E4BA6F465B343389C1FC1 CURLIOCMD_RESTARTREAD;
$12BCB6FB1C1F7369F599F8C0386A61E5 CURLIOE_FAILRESTART;
$12BCB6FB1C1F7369F599F8C0386A61E5 CURLIOE_LAST;
$12BCB6FB1C1F7369F599F8C0386A61E5 CURLIOE_OK;
$12BCB6FB1C1F7369F599F8C0386A61E5 CURLIOE_UNKNOWNCMD;
curl_khmatch CURLKHMATCH_LAST;
curl_khmatch CURLKHMATCH_MISMATCH;
curl_khmatch CURLKHMATCH_MISSING;
curl_khmatch CURLKHMATCH_OK;
curl_khstat CURLKHSTAT_DEFER;
curl_khstat CURLKHSTAT_FINE;
curl_khstat CURLKHSTAT_FINE_ADD_TO_FILE;
curl_khstat CURLKHSTAT_LAST;
curl_khstat CURLKHSTAT_REJECT;
curl_khkey::type CURLKHTYPE_DSS;
curl_khkey::type CURLKHTYPE_RSA;
curl_khkey::type CURLKHTYPE_RSA1;
curl_khkey::type CURLKHTYPE_UNKNOWN;
$3BD93A796F6658F29C5207FE2468935A CURLMOPT_LASTENTRY;
$3BD93A796F6658F29C5207FE2468935A CURLMOPT_MAXCONNECTS;
$3BD93A796F6658F29C5207FE2468935A CURLMOPT_PIPELINING;
$3BD93A796F6658F29C5207FE2468935A CURLMOPT_SOCKETDATA;
$3BD93A796F6658F29C5207FE2468935A CURLMOPT_SOCKETFUNCTION;
$3BD93A796F6658F29C5207FE2468935A CURLMOPT_TIMERDATA;
$3BD93A796F6658F29C5207FE2468935A CURLMOPT_TIMERFUNCTION;
$E50CF21A375752F45409DA036BA9C4BA CURLMSG_DONE;
$E50CF21A375752F45409DA036BA9C4BA CURLMSG_LAST;
$E50CF21A375752F45409DA036BA9C4BA CURLMSG_NONE;
$80C78EA22186AB772B4BDEFF2BFDD204 CURLM_BAD_EASY_HANDLE;
$80C78EA22186AB772B4BDEFF2BFDD204 CURLM_BAD_HANDLE;
$80C78EA22186AB772B4BDEFF2BFDD204 CURLM_BAD_SOCKET;
$80C78EA22186AB772B4BDEFF2BFDD204 CURLM_CALL_MULTI_PERFORM;
$80C78EA22186AB772B4BDEFF2BFDD204 CURLM_INTERNAL_ERROR;
$80C78EA22186AB772B4BDEFF2BFDD204 CURLM_LAST;
$80C78EA22186AB772B4BDEFF2BFDD204 CURLM_OK;
$80C78EA22186AB772B4BDEFF2BFDD204 CURLM_OUT_OF_MEMORY;
$80C78EA22186AB772B4BDEFF2BFDD204 CURLM_UNKNOWN_OPTION;
MACRO_CURLOPTTYPE CURLOPTTYPE_FUNCTIONPOINT;
MACRO_CURLOPTTYPE CURLOPTTYPE_LONG;
MACRO_CURLOPTTYPE CURLOPTTYPE_OBJECTPOINT;
MACRO_CURLOPTTYPE CURLOPTTYPE_OFF_T;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_0x01;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_ADDRESS_SCOPE;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_APPEND;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_AUTOREFERER;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_BUFFERSIZE;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_CAINFO;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_CAPATH;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_CERTINFO;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_CHUNK_BGN_FUNCTION;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_CHUNK_DATA;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_CHUNK_END_FUNCTION;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_CLOSEPOLICY;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_CONNECTTIMEOUT;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_CONNECTTIMEOUT_MS;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_CONNECT_ONLY;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_CONV_FROM_NETWORK_FUNCTION;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_CONV_FROM_UTF8_FUNCTION;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_CONV_TO_NETWORK_FUNCTION;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_COOKIE;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_COOKIEFILE;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_COOKIEJAR;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_COOKIELIST;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_COOKIESESSION;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_COPYPOSTFIELDS;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_CRLF;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_CRLFILE;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_CUSTOMREQUEST;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_DEBUGDATA;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_DEBUGFUNCTION;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_DIRLISTONLY;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_DNS_CACHE_TIMEOUT;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_DNS_USE_GLOBAL_CACHE;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_EGDSOCKET;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_ENCODING;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_ERRORBUFFER;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_FAILONERROR;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_FILE;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_FILETIME;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_FNMATCH_DATA;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_FNMATCH_FUNCTION;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_FOLLOWLOCATION;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_FORBID_REUSE;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_FRESH_CONNECT;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_FTPPORT;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_FTPSSLAUTH;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_FTP_ACCOUNT;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_FTP_ALTERNATIVE_TO_USER;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_FTP_CREATE_MISSING_DIRS;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_FTP_FILEMETHOD;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_FTP_RESPONSE_TIMEOUT;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_FTP_SKIP_PASV_IP;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_FTP_SSL_CCC;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_FTP_USE_EPRT;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_FTP_USE_EPSV;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_FTP_USE_PRET;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_HEADER;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_HEADERFUNCTION;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_HTTP200ALIASES;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_HTTPAUTH;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_HTTPGET;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_HTTPHEADER;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_HTTPPOST;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_HTTPPROXYTUNNEL;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_HTTP_CONTENT_DECODING;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_HTTP_TRANSFER_DECODING;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_HTTP_VERSION;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_IGNORE_CONTENT_LENGTH;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_INFILE;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_INFILESIZE;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_INFILESIZE_LARGE;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_INTERFACE;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_INTERLEAVEDATA;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_INTERLEAVEFUNCTION;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_IOCTLDATA;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_IOCTLFUNCTION;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_IPRESOLVE;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_ISSUERCERT;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_KEYPASSWD;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_KRBLEVEL;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_LASTENTRY;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_LOCALPORT;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_LOCALPORTRANGE;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_LOW_SPEED_LIMIT;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_LOW_SPEED_TIME;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_MAIL_FROM;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_MAIL_RCPT;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_MAXCONNECTS;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_MAXFILESIZE;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_MAXFILESIZE_LARGE;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_MAXREDIRS;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_MAX_RECV_SPEED_LARGE;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_MAX_SEND_SPEED_LARGE;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_NETRC;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_NETRC_FILE;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_NEW_DIRECTORY_PERMS;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_NEW_FILE_PERMS;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_NOBODY;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_NOPROGRESS;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_NOPROXY;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_NOSIGNAL;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_OPENSOCKETDATA;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_OPENSOCKETFUNCTION;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_PASSWORD;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_PORT;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_POST;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_POSTFIELDS;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_POSTFIELDSIZE;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_POSTFIELDSIZE_LARGE;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_POSTQUOTE;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_POSTREDIR;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_PREQUOTE;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_PRIVATE;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_PROGRESSDATA;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_PROGRESSFUNCTION;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_PROTOCOLS;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_PROXY;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_PROXYAUTH;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_PROXYPASSWORD;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_PROXYPORT;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_PROXYTYPE;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_PROXYUSERNAME;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_PROXYUSERPWD;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_PROXY_TRANSFER_MODE;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_PUT;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_QUOTE;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_RANDOM_FILE;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_RANGE;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_READFUNCTION;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_REDIR_PROTOCOLS;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_REFERER;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_RESOLVE;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_RESUME_FROM;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_RESUME_FROM_LARGE;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_RTSP_CLIENT_CSEQ;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_RTSP_REQUEST;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_RTSP_SERVER_CSEQ;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_RTSP_SESSION_ID;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_RTSP_STREAM_URI;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_RTSP_TRANSPORT;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_SEEKDATA;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_SEEKFUNCTION;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_SHARE;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_SOCKOPTDATA;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_SOCKOPTFUNCTION;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_SOCKS5_GSSAPI_NEC;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_SOCKS5_GSSAPI_SERVICE;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_SSH_AUTH_TYPES;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_SSH_HOST_PUBLIC_KEY_MD5;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_SSH_KEYDATA;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_SSH_KEYFUNCTION;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_SSH_KNOWNHOSTS;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_SSH_PRIVATE_KEYFILE;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_SSH_PUBLIC_KEYFILE;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_SSLCERT;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_SSLCERTTYPE;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_SSLENGINE;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_SSLENGINE_DEFAULT;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_SSLKEY;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_SSLKEYTYPE;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_SSLVERSION;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_SSL_CIPHER_LIST;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_SSL_CTX_DATA;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_SSL_CTX_FUNCTION;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_SSL_SESSIONID_CACHE;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_SSL_VERIFYHOST;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_SSL_VERIFYPEER;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_STDERR;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_TELNETOPTIONS;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_TFTP_BLKSIZE;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_TIMECONDITION;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_TIMEOUT;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_TIMEOUT_MS;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_TIMEVALUE;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_TLSAUTH_PASSWORD;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_TLSAUTH_TYPE;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_TLSAUTH_USERNAME;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_TRANSFERTEXT;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_UNRESTRICTED_AUTH;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_UPLOAD;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_URL;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_USERAGENT;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_USERNAME;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_USERPWD;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_USE_SSL;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_VERBOSE;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_WILDCARDMATCH;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_WRITEFUNCTION;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_WRITEHEADER;
$2E8E5FC6A771AD2BBD66B1556875C23C CURLOPT_WRITEINFO;
MACRO_CURLPAUSE CURLPAUSE_ALL;
MACRO_CURLPAUSE CURLPAUSE_CONT;
MACRO_CURLPAUSE CURLPAUSE_RECV;
MACRO_CURLPAUSE CURLPAUSE_RECV_CONT;
MACRO_CURLPAUSE CURLPAUSE_SEND;
MACRO_CURLPAUSE CURLPAUSE_SEND_CONT;
MACRO_CURLPROTO CURLPROTO_ALL;
MACRO_CURLPROTO CURLPROTO_DICT;
MACRO_CURLPROTO CURLPROTO_FILE;
MACRO_CURLPROTO CURLPROTO_FTP;
MACRO_CURLPROTO CURLPROTO_FTPS;
MACRO_CURLPROTO CURLPROTO_GOPHER;
MACRO_CURLPROTO CURLPROTO_HTTP;
MACRO_CURLPROTO CURLPROTO_HTTPS;
MACRO_CURLPROTO CURLPROTO_IMAP;
MACRO_CURLPROTO CURLPROTO_IMAPS;
MACRO_CURLPROTO CURLPROTO_LDAP;
MACRO_CURLPROTO CURLPROTO_LDAPS;
MACRO_CURLPROTO CURLPROTO_POP3;
MACRO_CURLPROTO CURLPROTO_POP3S;
MACRO_CURLPROTO CURLPROTO_RTMP;
MACRO_CURLPROTO CURLPROTO_RTMPE;
MACRO_CURLPROTO CURLPROTO_RTMPS;
MACRO_CURLPROTO CURLPROTO_RTMPT;
MACRO_CURLPROTO CURLPROTO_RTMPTE;
MACRO_CURLPROTO CURLPROTO_RTMPTS;
MACRO_CURLPROTO CURLPROTO_RTSP;
MACRO_CURLPROTO CURLPROTO_SCP;
MACRO_CURLPROTO CURLPROTO_SFTP;
MACRO_CURLPROTO CURLPROTO_SMTP;
MACRO_CURLPROTO CURLPROTO_SMTPS;
MACRO_CURLPROTO CURLPROTO_TELNET;
MACRO_CURLPROTO CURLPROTO_TFTP;
$AA7AC226BF5649CDC6E12A1616281D14 CURLPROXY_HTTP;
$AA7AC226BF5649CDC6E12A1616281D14 CURLPROXY_HTTP_1_0;
$AA7AC226BF5649CDC6E12A1616281D14 CURLPROXY_SOCKS4;
$AA7AC226BF5649CDC6E12A1616281D14 CURLPROXY_SOCKS4A;
$AA7AC226BF5649CDC6E12A1616281D14 CURLPROXY_SOCKS5;
$AA7AC226BF5649CDC6E12A1616281D14 CURLPROXY_SOCKS5_HOSTNAME;
$DF9762E172B78CD0B567A8F57D5EE1A7 CURLSHE_BAD_OPTION;
$DF9762E172B78CD0B567A8F57D5EE1A7 CURLSHE_INVALID;
$DF9762E172B78CD0B567A8F57D5EE1A7 CURLSHE_IN_USE;
$DF9762E172B78CD0B567A8F57D5EE1A7 CURLSHE_LAST;
$DF9762E172B78CD0B567A8F57D5EE1A7 CURLSHE_NOMEM;
$DF9762E172B78CD0B567A8F57D5EE1A7 CURLSHE_OK;
$817EE464AA2F5FC31C63385F8A750782 CURLSHOPT_LAST;
$817EE464AA2F5FC31C63385F8A750782 CURLSHOPT_LOCKFUNC;
$817EE464AA2F5FC31C63385F8A750782 CURLSHOPT_NONE;
$817EE464AA2F5FC31C63385F8A750782 CURLSHOPT_SHARE;
$817EE464AA2F5FC31C63385F8A750782 CURLSHOPT_UNLOCKFUNC;
$817EE464AA2F5FC31C63385F8A750782 CURLSHOPT_UNSHARE;
$817EE464AA2F5FC31C63385F8A750782 CURLSHOPT_USERDATA;
$C2D4DC0A39BA1BADB043EDCBF23CFD90 CURLSOCKTYPE_IPCXN;
$C2D4DC0A39BA1BADB043EDCBF23CFD90 CURLSOCKTYPE_LAST;
MACRO_CURLSSH CURLSSH_AUTH_ANY;
MACRO_CURLSSH CURLSSH_AUTH_DEFAULT;
MACRO_CURLSSH CURLSSH_AUTH_HOST;
MACRO_CURLSSH CURLSSH_AUTH_KEYBOARD;
MACRO_CURLSSH CURLSSH_AUTH_NONE;
MACRO_CURLSSH CURLSSH_AUTH_PASSWORD;
MACRO_CURLSSH CURLSSH_AUTH_PUBLICKEY;
$0DBFB4EE40FDDB492A6C497C28C3DC12 CURLUSESSL_ALL;
$0DBFB4EE40FDDB492A6C497C28C3DC12 CURLUSESSL_CONTROL;
$0DBFB4EE40FDDB492A6C497C28C3DC12 CURLUSESSL_LAST;
$0DBFB4EE40FDDB492A6C497C28C3DC12 CURLUSESSL_NONE;
$0DBFB4EE40FDDB492A6C497C28C3DC12 CURLUSESSL_TRY;
$46343603E7EF6B9CA2DB5251398A8141 CURLVERSION_FIRST;
$46343603E7EF6B9CA2DB5251398A8141 CURLVERSION_FOURTH;
$46343603E7EF6B9CA2DB5251398A8141 CURLVERSION_LAST;
$46343603E7EF6B9CA2DB5251398A8141 CURLVERSION_SECOND;
$46343603E7EF6B9CA2DB5251398A8141 CURLVERSION_THIRD;
MACRO_CURL_CHUNK CURL_CHUNK_BGN_FUNC_FAIL;
MACRO_CURL_CHUNK CURL_CHUNK_BGN_FUNC_OK;
MACRO_CURL_CHUNK CURL_CHUNK_BGN_FUNC_SKIP;
MACRO_CURL_CHUNK CURL_CHUNK_END_FUNC_FAIL;
MACRO_CURL_CHUNK CURL_CHUNK_END_FUNC_OK;
MACRO_CURL_POLL CURL_CSELECT_ERR;
MACRO_CURL_POLL CURL_CSELECT_IN;
MACRO_CURL_POLL CURL_CSELECT_OUT;
MACRO_CURL_ERROR CURL_ERROR_SIZE;
MACRO_CURL_CHUNK CURL_FNMATCHFUNC_FAIL;
MACRO_CURL_CHUNK CURL_FNMATCHFUNC_MATCH;
MACRO_CURL_CHUNK CURL_FNMATCHFUNC_NOMATCH;
$55AEE0FA07D064890E756D545251771C CURL_FORMADD_DISABLED;
$55AEE0FA07D064890E756D545251771C CURL_FORMADD_ILLEGAL_ARRAY;
$55AEE0FA07D064890E756D545251771C CURL_FORMADD_INCOMPLETE;
$55AEE0FA07D064890E756D545251771C CURL_FORMADD_LAST;
$55AEE0FA07D064890E756D545251771C CURL_FORMADD_MEMORY;
$55AEE0FA07D064890E756D545251771C CURL_FORMADD_NULL;
$55AEE0FA07D064890E756D545251771C CURL_FORMADD_OK;
$55AEE0FA07D064890E756D545251771C CURL_FORMADD_OPTION_TWICE;
$55AEE0FA07D064890E756D545251771C CURL_FORMADD_UNKNOWN_OPTION;
MACRO_CURL_GLOBAL CURL_GLOBAL_ALL;
MACRO_CURL_GLOBAL CURL_GLOBAL_DEFAULT;
MACRO_CURL_GLOBAL CURL_GLOBAL_NOTHING;
MACRO_CURL_GLOBAL CURL_GLOBAL_SSL;
MACRO_CURL_GLOBAL CURL_GLOBAL_WIN32;
$B51368E841E12F171B8C755FA056AF73 CURL_HTTP_VERSION_1_0;
$B51368E841E12F171B8C755FA056AF73 CURL_HTTP_VERSION_1_1;
$B51368E841E12F171B8C755FA056AF73 CURL_HTTP_VERSION_LAST;
$B51368E841E12F171B8C755FA056AF73 CURL_HTTP_VERSION_NONE;
MACRO_CURL_IPRESOLVE CURL_IPRESOLVE_V4;
MACRO_CURL_IPRESOLVE CURL_IPRESOLVE_V6;
MACRO_CURL_IPRESOLVE CURL_IPRESOLVE_WHATEVER;
$031587082C14B3DB98E124F1346E686B CURL_LAST;
$8E6D3DD4E935220D4F923E1EC10C4FEC CURL_LOCK_ACCESS_LAST;
$8E6D3DD4E935220D4F923E1EC10C4FEC CURL_LOCK_ACCESS_NONE;
$8E6D3DD4E935220D4F923E1EC10C4FEC CURL_LOCK_ACCESS_SHARED;
$8E6D3DD4E935220D4F923E1EC10C4FEC CURL_LOCK_ACCESS_SINGLE;
$0F66511D35BDCD2A40906A0230E6F760 CURL_LOCK_DATA_CONNECT;
$0F66511D35BDCD2A40906A0230E6F760 CURL_LOCK_DATA_COOKIE;
$0F66511D35BDCD2A40906A0230E6F760 CURL_LOCK_DATA_DNS;
$0F66511D35BDCD2A40906A0230E6F760 CURL_LOCK_DATA_LAST;
$0F66511D35BDCD2A40906A0230E6F760 CURL_LOCK_DATA_NONE;
$0F66511D35BDCD2A40906A0230E6F760 CURL_LOCK_DATA_SHARE;
$0F66511D35BDCD2A40906A0230E6F760 CURL_LOCK_DATA_SSL_SESSION;
MACRO_CURL_MAX CURL_MAX_HTTP_HEADER;
MACRO_CURL_MAX CURL_MAX_WRITE_SIZE;
CURL_NETRC_OPTION CURL_NETRC_IGNORED;
CURL_NETRC_OPTION CURL_NETRC_LAST;
CURL_NETRC_OPTION CURL_NETRC_OPTIONAL;
CURL_NETRC_OPTION CURL_NETRC_REQUIRED;
MACRO_CURL_POLL CURL_POLL_IN;
MACRO_CURL_POLL CURL_POLL_INOUT;
MACRO_CURL_POLL CURL_POLL_NONE;
MACRO_CURL_POLL CURL_POLL_OUT;
MACRO_CURL_POLL CURL_POLL_REMOVE;
MACRO_CURL_CHUNK CURL_READFUNC_ABORT;
MACRO_CURL_CHUNK CURL_READFUNC_PAUSE;
MACRO_CURL_IPRESOLVE CURL_REDIR_GET_ALL;
MACRO_CURL_IPRESOLVE CURL_REDIR_POST_301;
MACRO_CURL_IPRESOLVE CURL_REDIR_POST_302;
MACRO_CURL_IPRESOLVE CURL_REDIR_POST_ALL;
$8F171625CA50F19FB0BDE4B67F774BC9 CURL_RTSPREQ_ANNOUNCE;
$8F171625CA50F19FB0BDE4B67F774BC9 CURL_RTSPREQ_DESCRIBE;
$8F171625CA50F19FB0BDE4B67F774BC9 CURL_RTSPREQ_GET_PARAMETER;
$8F171625CA50F19FB0BDE4B67F774BC9 CURL_RTSPREQ_LAST;
$8F171625CA50F19FB0BDE4B67F774BC9 CURL_RTSPREQ_NONE;
$8F171625CA50F19FB0BDE4B67F774BC9 CURL_RTSPREQ_OPTIONS;
$8F171625CA50F19FB0BDE4B67F774BC9 CURL_RTSPREQ_PAUSE;
$8F171625CA50F19FB0BDE4B67F774BC9 CURL_RTSPREQ_PLAY;
$8F171625CA50F19FB0BDE4B67F774BC9 CURL_RTSPREQ_RECEIVE;
$8F171625CA50F19FB0BDE4B67F774BC9 CURL_RTSPREQ_RECORD;
$8F171625CA50F19FB0BDE4B67F774BC9 CURL_RTSPREQ_SETUP;
$8F171625CA50F19FB0BDE4B67F774BC9 CURL_RTSPREQ_SET_PARAMETER;
$8F171625CA50F19FB0BDE4B67F774BC9 CURL_RTSPREQ_TEARDOWN;
MACRO_CURL_CHUNK CURL_SEEKFUNC_CANTSEEK;
MACRO_CURL_CHUNK CURL_SEEKFUNC_FAIL;
MACRO_CURL_CHUNK CURL_SEEKFUNC_OK;
MACRO_CURL CURL_SIZEOF_CURL_OFF_T;
MACRO_CURL CURL_SIZEOF_CURL_SOCKLEN_T;
MACRO_CURL CURL_SIZEOF_LONG;
MACRO_CURL_SOCKET CURL_SOCKET_BAD;
MACRO_CURL_POLL CURL_SOCKET_TIMEOUT;
$5AD11541F8B775E98080565D845776A5 CURL_SSLVERSION_DEFAULT;
$5AD11541F8B775E98080565D845776A5 CURL_SSLVERSION_LAST;
$5AD11541F8B775E98080565D845776A5 CURL_SSLVERSION_SSLv2;
$5AD11541F8B775E98080565D845776A5 CURL_SSLVERSION_SSLv3;
$5AD11541F8B775E98080565D845776A5 CURL_SSLVERSION_TLSv1;
$6BF03EB572F80D0BDF28C7CB21479A3D CURL_TIMECOND_IFMODSINCE;
$6BF03EB572F80D0BDF28C7CB21479A3D CURL_TIMECOND_IFUNMODSINCE;
$6BF03EB572F80D0BDF28C7CB21479A3D CURL_TIMECOND_LAST;
$6BF03EB572F80D0BDF28C7CB21479A3D CURL_TIMECOND_LASTMOD;
$6BF03EB572F80D0BDF28C7CB21479A3D CURL_TIMECOND_NONE;
CURL_TLSAUTH CURL_TLSAUTH_LAST;
CURL_TLSAUTH CURL_TLSAUTH_NONE;
CURL_TLSAUTH CURL_TLSAUTH_SRP;
MACRO_CURL_GLOBAL CURL_VERSION_ASYNCHDNS;
MACRO_CURL_GLOBAL CURL_VERSION_CONV;
MACRO_CURL_GLOBAL CURL_VERSION_CURLDEBUG;
MACRO_CURL_GLOBAL CURL_VERSION_DEBUG;
MACRO_CURL_GLOBAL CURL_VERSION_GSSNEGOTIATE;
MACRO_CURL_GLOBAL CURL_VERSION_IDN;
MACRO_CURL_GLOBAL CURL_VERSION_IPV6;
MACRO_CURL_GLOBAL CURL_VERSION_KERBEROS4;
MACRO_CURL_GLOBAL CURL_VERSION_LARGEFILE;
MACRO_CURL_GLOBAL CURL_VERSION_LIBZ;
MACRO_CURL_GLOBAL CURL_VERSION_NTLM;
MACRO_CURL_GLOBAL CURL_VERSION_SPNEGO;
MACRO_CURL_GLOBAL CURL_VERSION_SSL;
MACRO_CURL_GLOBAL CURL_VERSION_SSPI;
MACRO_CURL_GLOBAL CURL_VERSION_TLSAUTH_SRP;
MACRO_CURL_MAX CURL_WRITEFUNC_PAUSE;
MACRO_CURSES CURSES;
MACRO_CURSES_H CURSES_H;
MACRO_CWERASE CWERASE;
MACRO_C C_IRGRP;
MACRO_C C_IROTH;
MACRO_C C_IRUSR;
MACRO_C C_ISBLK;
MACRO_C C_ISCHR;
MACRO_C C_ISCTG;
MACRO_C C_ISDIR;
MACRO_C C_ISFIFO;
MACRO_C C_ISGID;
MACRO_C C_ISLNK;
MACRO_C C_ISREG;
MACRO_C C_ISSOCK;
MACRO_C C_ISUID;
MACRO_C C_ISVTX;
MACRO_C C_IWGRP;
MACRO_C C_IWOTH;
MACRO_C C_IWUSR;
MACRO_C C_IXGRP;
MACRO_C C_IXOTH;
MACRO_C C_IXUSR;
MACRO_DATA DATA;
MACRO_DAYSPERLYEAR DAYSPERLYEAR;
MACRO_DAYSPERNYEAR DAYSPERNYEAR;
MACRO_DAYSPERWEEK DAYSPERWEEK;
MACRO_DAYS DAYS_PER_LYEAR;
MACRO_DAYS DAYS_PER_NYEAR;
MACRO_DAYS DAYS_PER_WEEK;
MACRO_DAY DAY_1;
MACRO_DAY DAY_2;
MACRO_DAY DAY_3;
MACRO_DAY DAY_4;
MACRO_DAY DAY_5;
MACRO_DAY DAY_6;
MACRO_DAY DAY_7;
MACRO_DBG DBG_APPS;
MACRO_DBG_APP DBG_APP_SAMBA;
MACRO_DBG_NETIP DBG_BOOTCACHE;
MACRO_DBG DBG_BSD;
MACRO_DBG_NETIP DBG_BSD_AIO;
MACRO_DBG_NETIP DBG_BSD_EXCP_SC;
MACRO_DBG_NETIP DBG_BSD_PROC;
MACRO_DBG_NETIP DBG_BSD_SC_EXTENDED_INFO;
MACRO_DBG_NETIP DBG_BSD_SC_EXTENDED_INFO2;
MACRO_DBG_TRACE DBG_BUFFER;
MACRO_DBG DBG_CACHE_HIT_FAULT;
MACRO_DBG DBG_CORESTORAGE;
MACRO_DBG DBG_COW_FAULT;
MACRO_DBG_TRACE DBG_CS_IO;
MACRO_DBG_NETIP DBG_DKRW;
MACRO_DBG DBG_DLIL;
MACRO_DBG_NETIP DBG_DLIL_IF_FLT;
MACRO_DBG_NETIP DBG_DLIL_IF_MOD;
MACRO_DBG_NETIP DBG_DLIL_PR_FLT;
MACRO_DBG_NETIP DBG_DLIL_PR_MOD;
MACRO_DBG_NETIP DBG_DLIL_STATIC;
MACRO_DBG DBG_DRIVERS;
MACRO_DBG_NETIP DBG_DRVAUDIO;
MACRO_DBG_NETIP DBG_DRVBLUETOOTH;
MACRO_DBG_NETIP DBG_DRVDISK;
MACRO_DBG_NETIP DBG_DRVFIBRECHANNEL;
MACRO_DBG_NETIP DBG_DRVFIREWIRE;
MACRO_DBG_NETIP DBG_DRVGRAPHICS;
MACRO_DBG_NETIP DBG_DRVHID;
MACRO_DBG_NETIP DBG_DRVINFINIBAND;
MACRO_DBG_NETIP DBG_DRVKEYBOARD;
MACRO_DBG_NETIP DBG_DRVNETWORK;
MACRO_DBG_NETIP DBG_DRVPARALLELATA;
MACRO_DBG_NETIP DBG_DRVPARALLELSCSI;
MACRO_DBG_NETIP DBG_DRVPOINTING;
MACRO_DBG_NETIP DBG_DRVSAM;
MACRO_DBG_NETIP DBG_DRVSAS;
MACRO_DBG_NETIP DBG_DRVSATA;
MACRO_DBG_NETIP DBG_DRVSD;
MACRO_DBG_NETIP DBG_DRVSERIAL;
MACRO_DBG_NETIP DBG_DRVSTORAGE;
MACRO_DBG_NETIP DBG_DRVUSB;
MACRO_DBG DBG_DYLD;
MACRO_DBG_TRACE DBG_DYLD_STRING;
MACRO_DBG_TRACE DBG_EVENT;
MACRO_DBG_NETIP DBG_FSLOOOKUP;
MACRO_DBG_NETIP DBG_FSRW;
MACRO_DBG_NETIP DBG_FSVN;
MACRO_DBG DBG_FSYSTEM;
MACRO_DBG DBG_FUNC_END;
MACRO_DBG DBG_FUNC_NONE;
MACRO_DBG DBG_FUNC_START;
MACRO_DBG DBG_GUARD_FAULT;
MACRO_DBG_NETIP DBG_HFS;
MACRO_DBG_NETIP DBG_HIBERNATE;
MACRO_DBG_NETIP DBG_IOAUDIO;
MACRO_DBG_NETIP DBG_IOBLUETOOTH;
MACRO_DBG_NETIP DBG_IOCLKES;
MACRO_DBG_NETIP DBG_IOCMDQ;
MACRO_DBG_NETIP DBG_IOCPUPM;
MACRO_DBG_NETIP DBG_IOCTL;
MACRO_DBG_NETIP DBG_IODISK;
MACRO_DBG_NETIP DBG_IOFIBRECHANNEL;
MACRO_DBG_NETIP DBG_IOFIREWIRE;
MACRO_DBG_NETIP DBG_IOGRAPHICS;
MACRO_DBG_NETIP DBG_IOHID;
MACRO_DBG_NETIP DBG_IOINFINIBAND;
MACRO_DBG_NETIP DBG_IOINTC;
MACRO_DBG_NETIP DBG_IOINTES;
MACRO_DBG_NETIP DBG_IOKEYBOARD;
MACRO_DBG DBG_IOKIT;
MACRO_DBG_NETIP DBG_IOMCURS;
MACRO_DBG_NETIP DBG_IOMDESC;
MACRO_DBG_NETIP DBG_IONETWORK;
MACRO_DBG_NETIP DBG_IOPARALLELATA;
MACRO_DBG_NETIP DBG_IOPARALLELSCSI;
MACRO_DBG_NETIP DBG_IOPOINTING;
MACRO_DBG_NETIP DBG_IOPOWER;
MACRO_DBG_NETIP DBG_IOSAM;
MACRO_DBG_NETIP DBG_IOSAS;
MACRO_DBG_NETIP DBG_IOSATA;
MACRO_DBG_NETIP DBG_IOSERIAL;
MACRO_DBG_NETIP DBG_IOSERVICE;
MACRO_DBG_NETIP DBG_IOSTORAGE;
MACRO_DBG_NETIP DBG_IOTTY;
MACRO_DBG_NETIP DBG_IOUSB;
MACRO_DBG_NETIP DBG_IOWORKLOOP;
MACRO_DBG_NETIP DBG_JOURNAL;
MACRO_DBG DBG_LAUNCHD;
MACRO_DBG DBG_MACH;
MACRO_DBG DBG_MACH_CHUD;
MACRO_DBG DBG_MACH_EXCP_ALNG;
MACRO_DBG DBG_MACH_EXCP_DECI;
MACRO_DBG DBG_MACH_EXCP_DFLT;
MACRO_DBG DBG_MACH_EXCP_EMUL;
MACRO_DBG DBG_MACH_EXCP_FP;
MACRO_DBG DBG_MACH_EXCP_IFLT;
MACRO_DBG DBG_MACH_EXCP_INTR;
MACRO_DBG DBG_MACH_EXCP_KTRAP_x86;
MACRO_DBG DBG_MACH_EXCP_SC;
MACRO_DBG DBG_MACH_EXCP_TRACE;
MACRO_DBG DBG_MACH_EXCP_UTRAP_x86;
MACRO_DBG DBG_MACH_IHDLR;
MACRO_DBG DBG_MACH_IPC;
MACRO_DBG DBG_MACH_LEAKS;
MACRO_DBG DBG_MACH_LOCKS;
MACRO_DBG DBG_MACH_MP;
MACRO_DBG DBG_MACH_MSGID_INVALID;
MACRO_DBG DBG_MACH_PMAP;
MACRO_DBG DBG_MACH_SCHED;
MACRO_DBG DBG_MACH_VM;
MACRO_DBG DBG_MIG;
MACRO_DBG DBG_MISC;
MACRO_DBG_NETIP DBG_NETAARP;
MACRO_DBG_NETIP DBG_NETADSP;
MACRO_DBG_NETIP DBG_NETAFP;
MACRO_DBG_NETIP DBG_NETARP;
MACRO_DBG_NETIP DBG_NETASP;
MACRO_DBG_NETIP DBG_NETATP;
MACRO_DBG_NETIP DBG_NETAURP;
MACRO_DBG_NETIP DBG_NETDDP;
MACRO_DBG_NETIP DBG_NETICMP;
MACRO_DBG_NETIP DBG_NETIGMP;
MACRO_DBG_NETIP DBG_NETIP;
MACRO_DBG_NETIP DBG_NETIPSEC;
MACRO_DBG_NETIP DBG_NETISIS;
MACRO_DBG_NETIP DBG_NETNBP;
MACRO_DBG_NETIP DBG_NETOSPF;
MACRO_DBG_NETIP DBG_NETRIP;
MACRO_DBG_NETIP DBG_NETRTMP;
MACRO_DBG_NETIP DBG_NETSNMP;
MACRO_DBG_NETIP DBG_NETSOCK;
MACRO_DBG_NETIP DBG_NETTCP;
MACRO_DBG_NETIP DBG_NETUDP;
MACRO_DBG DBG_NETWORK;
MACRO_DBG_NETIP DBG_NETZIP;
MACRO_DBG DBG_NZF_PAGE_FAULT;
MACRO_DBG DBG_PAGEIND_FAULT;
MACRO_DBG DBG_PAGEINV_FAULT;
MACRO_DBG DBG_PAGEIN_FAULT;
MACRO_DBG DBG_QT;
MACRO_DBG DBG_SECURITY;
MACRO_DBG DBG_TRACE;
MACRO_DBG_TRACE DBG_TRACE_DATA;
MACRO_DBG_TRACE DBG_TRACE_INFO;
MACRO_DBG_TRACE DBG_TRACE_STRING;
MACRO_DBG DBG_ZERO_FILL_FAULT;
MACRO_DBM DBM_INSERT;
MACRO_DBM DBM_RDONLY;
MACRO_DBM DBM_REPLACE;
$B2A44DC877B17F2021CE46A73658A10E DB_BTREE;
MACRO_DB_ERROR DB_ERROR_INDEX_CLASH;
MACRO_DB_ERROR DB_ERROR_INDEX_OUT_OF_RANGE;
MACRO_DB_ERROR DB_ERROR_INSERT_INDEX_CLASH;
MACRO_DB_ERROR DB_ERROR_MALLOC;
MACRO_DB_ERROR DB_ERROR_NO_INDEX;
MACRO_DB_ERROR DB_ERROR_OK;
$B2A44DC877B17F2021CE46A73658A10E DB_HASH;
MACRO_DB DB_LOCK;
$B2A44DC877B17F2021CE46A73658A10E DB_RECNO;
MACRO_DB DB_SHMEM;
MACRO_DB DB_TXN;
MACRO_PROCESS DEAD_PROCESS;
MACRO_ALLDELAY DECCTQ;
MACRO_DEFAULT DEFAULT_MIB_PRIORITY;
MACRO_DEFFILEMODE DEFFILEMODE;
MACRO_DELETE DELETE;
MACRO_DESC_CALL DESC_CALL_GATE;
MACRO_DESC DESC_CODE_16B;
MACRO_DESC DESC_CODE_32B;
MACRO_DESC DESC_CODE_EXEC;
MACRO_DESC DESC_CODE_READ;
MACRO_DESC DESC_DATA_16B;
MACRO_DESC DESC_DATA_32B;
MACRO_DESC DESC_DATA_RONLY;
MACRO_DESC DESC_DATA_WRITE;
MACRO_DESC DESC_GRAN_BYTE;
MACRO_DESC DESC_GRAN_PAGE;
MACRO_DESC_CALL DESC_INTR_GATE;
MACRO_DESC DESC_LDT;
MACRO_DESC_TSS DESC_TASK_GATE;
MACRO_DESC_TSS DESC_TBL_MAX;
MACRO_DESC_CALL DESC_TRAP_GATE;
MACRO_DESC_TSS DESC_TSS;
MACRO_DES DES_CBC_MODE;
MACRO_DES DES_DECRYPT;
MACRO_DES DES_ENCRYPT;
MACRO_DES DES_PCBC_MODE;
MACRO_DEVFS DEVFS_BLOCK;
MACRO_DEVFS DEVFS_CHAR;
MACRO_DEVFS DEVFS_CLONE_ALLOC;
MACRO_DEVFS DEVFS_CLONE_FREE;
MACRO_DEVICE DEVICE_PAGER_CACHE_INHIB;
MACRO_DEVICE DEVICE_PAGER_COHERENT;
MACRO_DEVICE DEVICE_PAGER_CONTIGUOUS;
MACRO_DEVICE DEVICE_PAGER_GUARDED;
MACRO_DEVICE DEVICE_PAGER_NOPHYSCACHE;
MACRO_DEVICE DEVICE_PAGER_WRITE_THROUGH;
MACRO_DEV DEV_BSHIFT;
MACRO_DEV DEV_BSIZE;
MACRO_DFLCSIZ DFLCSIZ;
MACRO_DFLDSIZ DFLDSIZ;
MACRO_DFLSSIZ DFLSSIZ;
MACRO_DH DH_CHECK_PUBKEY_TOO_LARGE;
MACRO_DH DH_CHECK_PUBKEY_TOO_SMALL;
MACRO_DH DH_CHECK_P_NOT_PRIME;
MACRO_DH DH_CHECK_P_NOT_SAFE_PRIME;
MACRO_DH DH_CHECK_P_NOT_STRONG_PRIME;
MACRO_DH DH_FLAG_CACHE_MONT_P;
MACRO_DH DH_FLAG_NO_EXP_CONSTTIME;
MACRO_DH DH_F_COMPUTE_KEY;
MACRO_DH DH_F_DHPARAMS_PRINT;
MACRO_DH DH_F_DHPARAMS_PRINT_FP;
MACRO_DH DH_F_DH_BUILTIN_GENPARAMS;
MACRO_DH DH_F_DH_COMPUTE_KEY;
MACRO_DH DH_F_DH_GENERATE_KEY;
MACRO_DH DH_F_DH_GENERATE_PARAMETERS;
MACRO_DH DH_F_DH_NEW_METHOD;
MACRO_DH DH_F_GENERATE_KEY;
MACRO_DH DH_F_GENERATE_PARAMETERS;
MACRO_DH DH_GENERATOR_2;
MACRO_DH DH_GENERATOR_5;
MACRO_DH DH_NOT_SUITABLE_GENERATOR;
MACRO_DH DH_R_BAD_GENERATOR;
MACRO_DH DH_R_INVALID_PUBKEY;
MACRO_DH DH_R_KEY_SIZE_TOO_SMALL;
MACRO_DH DH_R_MODULUS_TOO_LARGE;
MACRO_DH DH_R_NO_PRIVATE_VALUE;
MACRO_DH DH_UNABLE_TO_CHECK_GENERATOR;
MACRO_DIRBLKSIZ DIRBLKSIZ;
MACRO_DIRSTRING DIRSTRING_TYPE;
MACRO_DIRTYPE DIRTYPE;
MACRO_DIR DIR_MNTSTATUS_MNTPOINT;
MACRO_DIR DIR_MNTSTATUS_TRIGGER;
MACRO_DISPATCH DISPATCH_API_VERSION;
MACRO_DISPATCH_TIME DISPATCH_DATA_DESTRUCTOR_DEFAULT;
MACRO_DISPATCH_TIME DISPATCH_IO_RANDOM;
MACRO_DISPATCH_TIME DISPATCH_IO_STOP;
MACRO_DISPATCH_TIME DISPATCH_IO_STREAM;
MACRO_DISPATCH_TIME DISPATCH_IO_STRICT_INTERVAL;
MACRO_DISPATCH_TIME DISPATCH_MACH_SEND_DEAD;
MACRO_DISPATCH_TIME DISPATCH_PROC_EXEC;
MACRO_DISPATCH_TIME DISPATCH_PROC_EXIT;
MACRO_DISPATCH_TIME DISPATCH_PROC_FORK;
MACRO_DISPATCH_TIME DISPATCH_PROC_SIGNAL;
MACRO_DISPATCH_TIME DISPATCH_QUEUE_PRIORITY_BACKGROUND;
MACRO_DISPATCH_TIME DISPATCH_QUEUE_PRIORITY_DEFAULT;
MACRO_DISPATCH_TIME DISPATCH_QUEUE_PRIORITY_HIGH;
MACRO_DISPATCH_TIME DISPATCH_QUEUE_PRIORITY_LOW;
MACRO_DISPATCH_TIME DISPATCH_QUEUE_SERIAL;
MACRO_DISPATCH_TIME DISPATCH_TARGET_QUEUE_DEFAULT;
MACRO_DISPATCH_TIME DISPATCH_TIME_FOREVER;
MACRO_DISPATCH_TIME DISPATCH_TIME_NOW;
MACRO_DISPATCH_TIME DISPATCH_VNODE_ATTRIB;
MACRO_DISPATCH_TIME DISPATCH_VNODE_DELETE;
MACRO_DISPATCH_TIME DISPATCH_VNODE_EXTEND;
MACRO_DISPATCH_TIME DISPATCH_VNODE_LINK;
MACRO_DISPATCH_TIME DISPATCH_VNODE_RENAME;
MACRO_DISPATCH_TIME DISPATCH_VNODE_REVOKE;
MACRO_DISPATCH_TIME DISPATCH_VNODE_WRITE;
MACRO_DKIOCEJECT DKIOCEJECT;
MACRO_DKIOCREQUESTIDLE DKIOCREQUESTIDLE;
MACRO_DKIOCSYNCHRONIZECACHE DKIOCSYNCHRONIZECACHE;
MACRO_DKIO DKIO_ASYNC;
MACRO_DKIO DKIO_DONE;
MACRO_DKIO DKIO_META;
MACRO_DKIO DKIO_PAGING;
MACRO_DKIO DKIO_PASSIVE;
MACRO_DKIO DKIO_READ;
MACRO_DKIO DKIO_THROTTLE;
MACRO_DK DK_FEATURE_UNMAP;
MACRO_DLT DLT_A429;
MACRO_DLT DLT_A653_ICM;
MACRO_DLT DLT_AIRONET_HEADER;
MACRO_DLT DLT_AOS;
MACRO_DLT DLT_APPLE_IP_OVER_IEEE1394;
MACRO_DLT DLT_ARCNET;
MACRO_DLT DLT_ARCNET_LINUX;
MACRO_DLT DLT_ATM_CLIP;
MACRO_DLT DLT_ATM_RFC1483;
MACRO_DLT DLT_AURORA;
MACRO_DLT DLT_AX25;
MACRO_DLT DLT_AX25_KISS;
MACRO_DLT DLT_BACNET_MS_TP;
MACRO_DLT DLT_BLUETOOTH_HCI_H4;
MACRO_DLT DLT_BLUETOOTH_HCI_H4_WITH_PHDR;
MACRO_DLT DLT_CAN20B;
MACRO_DLT DLT_CAN_SOCKETCAN;
MACRO_DLT DLT_CHAOS;
MACRO_DLT DLT_CHDLC;
MACRO_DLT DLT_CISCO_IOS;
MACRO_DLT DLT_CLASS_NETBSD_RAWAF;
MACRO_DLT DLT_C_HDLC;
MACRO_DLT DLT_C_HDLC_WITH_DIR;
MACRO_DLT DLT_DECT;
MACRO_DLT DLT_DOCSIS;
MACRO_DLT DLT_ECONET;
MACRO_DLT DLT_EN10MB;
MACRO_DLT DLT_EN3MB;
MACRO_DLT DLT_ENC;
MACRO_DLT DLT_ERF;
MACRO_DLT DLT_ERF_ETH;
MACRO_DLT DLT_ERF_POS;
MACRO_DLT DLT_FC_2;
MACRO_DLT DLT_FC_2_WITH_FRAME_DELIMS;
MACRO_DLT DLT_FDDI;
MACRO_DLT DLT_FLEXRAY;
MACRO_DLT DLT_FRELAY;
MACRO_DLT DLT_FRELAY_WITH_DIR;
MACRO_DLT DLT_GCOM_SERIAL;
MACRO_DLT DLT_GCOM_T1E1;
MACRO_DLT DLT_GPF_F;
MACRO_DLT DLT_GPF_T;
MACRO_DLT DLT_GPRS_LLC;
MACRO_DLT DLT_GSMTAP_ABIS;
MACRO_DLT DLT_GSMTAP_UM;
MACRO_DLT DLT_HHDLC;
MACRO_DLT DLT_IBM_SN;
MACRO_DLT DLT_IBM_SP;
MACRO_DLT DLT_IEEE802;
MACRO_DLT DLT_IEEE802_11;
MACRO_DLT DLT_IEEE802_11_RADIO;
MACRO_DLT DLT_IEEE802_11_RADIO_AVS;
MACRO_DLT DLT_IEEE802_15_4;
MACRO_DLT DLT_IEEE802_15_4_LINUX;
MACRO_DLT DLT_IEEE802_15_4_NONASK_PHY;
MACRO_DLT DLT_IEEE802_16_MAC_CPS;
MACRO_DLT DLT_IEEE802_16_MAC_CPS_RADIO;
MACRO_DLT DLT_IPFILTER;
MACRO_DLT DLT_IPMB;
MACRO_DLT DLT_IPMB_LINUX;
MACRO_DLT DLT_IPNET;
MACRO_DLT DLT_IPV4;
MACRO_DLT DLT_IPV6;
MACRO_DLT DLT_IP_OVER_FC;
MACRO_DLT DLT_JUNIPER_ATM1;
MACRO_DLT DLT_JUNIPER_ATM2;
MACRO_DLT DLT_JUNIPER_CHDLC;
MACRO_DLT DLT_JUNIPER_ES;
MACRO_DLT DLT_JUNIPER_ETHER;
MACRO_DLT DLT_JUNIPER_FRELAY;
MACRO_DLT DLT_JUNIPER_GGSN;
MACRO_DLT DLT_JUNIPER_ISM;
MACRO_DLT DLT_JUNIPER_MFR;
MACRO_DLT DLT_JUNIPER_MLFR;
MACRO_DLT DLT_JUNIPER_MLPPP;
MACRO_DLT DLT_JUNIPER_MONITOR;
MACRO_DLT DLT_JUNIPER_PIC_PEER;
MACRO_DLT DLT_JUNIPER_PPP;
MACRO_DLT DLT_JUNIPER_PPPOE;
MACRO_DLT DLT_JUNIPER_PPPOE_ATM;
MACRO_DLT DLT_JUNIPER_SERVICES;
MACRO_DLT DLT_JUNIPER_ST;
MACRO_DLT DLT_JUNIPER_VP;
MACRO_DLT DLT_LAPB_WITH_DIR;
MACRO_DLT DLT_LAPD;
MACRO_DLT DLT_LIN;
MACRO_DLT DLT_LINUX_EVDEV;
MACRO_DLT DLT_LINUX_IRDA;
MACRO_DLT DLT_LINUX_LAPD;
MACRO_DLT DLT_LINUX_PPP_WITHDIRECTION;
MACRO_DLT DLT_LINUX_SLL;
MACRO_DLT DLT_LOOP;
MACRO_DLT DLT_LTALK;
MACRO_DLT DLT_MFR;
MACRO_DLT DLT_MOST;
MACRO_DLT DLT_MPLS;
MACRO_DLT DLT_MTP2;
MACRO_DLT DLT_MTP2_WITH_PHDR;
MACRO_DLT DLT_MTP3;
MACRO_DLT DLT_NULL;
MACRO_DLT DLT_PCI_EXP;
MACRO_DLT DLT_PFLOG;
MACRO_DLT_PFSYNC DLT_PFSYNC;
MACRO_DLT DLT_PPI;
MACRO_DLT DLT_PPP;
MACRO_DLT DLT_PPP_BSDOS;
MACRO_DLT DLT_PPP_ETHER;
MACRO_DLT DLT_PPP_PPPD;
MACRO_DLT DLT_PPP_SERIAL;
MACRO_DLT DLT_PPP_WITH_DIR;
MACRO_DLT DLT_PPP_WITH_DIRECTION;
MACRO_DLT DLT_PRISM_HEADER;
MACRO_DLT DLT_PRONET;
MACRO_DLT DLT_RAIF1;
MACRO_DLT DLT_RAW;
MACRO_DLT DLT_REDBACK_SMARTEDGE;
MACRO_DLT DLT_RIO;
MACRO_DLT DLT_SCCP;
MACRO_DLT DLT_SITA;
MACRO_DLT DLT_SLIP;
MACRO_DLT DLT_SLIP_BSDOS;
MACRO_DLT DLT_SUNATM;
MACRO_DLT DLT_SYMANTEC_FIREWALL;
MACRO_DLT DLT_TZSP;
MACRO_DLT DLT_USB;
MACRO_DLT DLT_USB_LINUX;
MACRO_DLT DLT_USB_LINUX_MMAPPED;
MACRO_DLT DLT_USER0;
MACRO_DLT DLT_USER1;
MACRO_DLT DLT_USER10;
MACRO_DLT DLT_USER11;
MACRO_DLT DLT_USER12;
MACRO_DLT DLT_USER13;
MACRO_DLT DLT_USER14;
MACRO_DLT DLT_USER15;
MACRO_DLT DLT_USER2;
MACRO_DLT DLT_USER3;
MACRO_DLT DLT_USER4;
MACRO_DLT DLT_USER5;
MACRO_DLT DLT_USER6;
MACRO_DLT DLT_USER7;
MACRO_DLT DLT_USER8;
MACRO_DLT DLT_USER9;
MACRO_DLT DLT_WIHART;
MACRO_DLT DLT_X2E_SERIAL;
MACRO_DLT DLT_X2E_XORAYA;
MACRO_DM DM;
MACRO_DMSET DMBIC;
MACRO_DMSET DMBIS;
MACRO_DMGET DMGET;
MACRO_DMSET DMSET;
$29FC7CC788C9FFDBF53740441D4A1DD5 DNSServiceBrowserReplyAddInstance;
$29FC7CC788C9FFDBF53740441D4A1DD5 DNSServiceBrowserReplyRemoveInstance;
$6D22B6C70995B3A898F6ED894F8956B2 DNSServiceDiscoverReplyFlagsFinished;
$6D22B6C70995B3A898F6ED894F8956B2 DNSServiceDiscoverReplyFlagsMoreComing;
$EB4F25A3AB2B34DE382859FFD4ADE17B DNSServiceDomainEnumerationReplyAddDomain;
$EB4F25A3AB2B34DE382859FFD4ADE17B DNSServiceDomainEnumerationReplyAddDomainDefault;
$EB4F25A3AB2B34DE382859FFD4ADE17B DNSServiceDomainEnumerationReplyRemoveDomain;
MACRO_DNS DNS_PRINT_AA;
MACRO_DNS DNS_PRINT_ADDITIONAL;
MACRO_DNS DNS_PRINT_ANSWER;
MACRO_DNS DNS_PRINT_AUTHORITY;
MACRO_DNS DNS_PRINT_OPCODE;
MACRO_DNS DNS_PRINT_PR;
MACRO_DNS DNS_PRINT_QR;
MACRO_DNS DNS_PRINT_QUESTION;
MACRO_DNS DNS_PRINT_RA;
MACRO_DNS DNS_PRINT_RCODE;
MACRO_DNS DNS_PRINT_RD;
MACRO_DNS DNS_PRINT_SERVER;
MACRO_DNS DNS_PRINT_TC;
MACRO_DNS DNS_PRINT_XID;
MACRO_DNS DNS_STATUS_BAD_HANDLE;
MACRO_DNS DNS_STATUS_CONNECTION_FAILED;
MACRO_DNS DNS_STATUS_MALFORMED_QUERY;
MACRO_DNS DNS_STATUS_OK;
MACRO_DNS DNS_STATUS_RECEIVE_FAILED;
MACRO_DNS DNS_STATUS_SEND_FAILED;
MACRO_DNS DNS_STATUS_TIMEOUT;
MACRO_DNS DNS_STATUS_WRONG_QUESTION;
MACRO_DNS DNS_STATUS_WRONG_SERVER;
MACRO_DNS DNS_STATUS_WRONG_XID;
MACRO_DO DO;
MACRO_DONT DONT;
MACRO_INITIALIZE DONT_INITIALIZE;
MACRO_DOT3COMPLIANCE DOT3COMPLIANCE_COLLS;
MACRO_DOT3COMPLIANCE DOT3COMPLIANCE_STATS;
MACRO_INITIALIZE DO_INITIALIZE;
MACRO_DSA DSA_FLAG_CACHE_MONT_P;
MACRO_DSA DSA_FLAG_FIPS_METHOD;
MACRO_DSA DSA_FLAG_NON_FIPS_ALLOW;
MACRO_DSA DSA_FLAG_NO_EXP_CONSTTIME;
MACRO_DSA_F DSA_F_D2I_DSA_SIG;
MACRO_DSA_F DSA_F_DSAPARAMS_PRINT;
MACRO_DSA_F DSA_F_DSAPARAMS_PRINT_FP;
MACRO_DSA_F DSA_F_DSA_BUILTIN_KEYGEN;
MACRO_DSA_F DSA_F_DSA_BUILTIN_PARAMGEN;
MACRO_DSA_F DSA_F_DSA_DO_SIGN;
MACRO_DSA_F DSA_F_DSA_DO_VERIFY;
MACRO_DSA_F DSA_F_DSA_GENERATE_PARAMETERS;
MACRO_DSA_F DSA_F_DSA_NEW_METHOD;
MACRO_DSA_F DSA_F_DSA_PRINT;
MACRO_DSA_F DSA_F_DSA_PRINT_FP;
MACRO_DSA_F DSA_F_DSA_SET_DEFAULT_METHOD;
MACRO_DSA_F DSA_F_DSA_SET_METHOD;
MACRO_DSA_F DSA_F_DSA_SIGN;
MACRO_DSA_F DSA_F_DSA_SIGN_SETUP;
MACRO_DSA_F DSA_F_DSA_SIG_NEW;
MACRO_DSA_F DSA_F_DSA_VERIFY;
MACRO_DSA_F DSA_F_I2D_DSA_SIG;
MACRO_DSA_F DSA_F_SIG_CB;
MACRO_DSA_F DSA_R_BAD_Q_VALUE;
MACRO_DSA_F DSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE;
MACRO_DSA_F DSA_R_KEY_SIZE_TOO_SMALL;
MACRO_DSA_F DSA_R_MISSING_PARAMETERS;
MACRO_DSA_F DSA_R_MODULUS_TOO_LARGE;
MACRO_DSA_F DSA_R_NON_FIPS_METHOD;
MACRO_DSA_F DSA_R_OPERATION_NOT_ALLOWED_IN_FIPS_MODE;
MACRO_DSO DSO_CTRL_GET_FLAGS;
MACRO_DSO DSO_CTRL_OR_FLAGS;
MACRO_DSO DSO_CTRL_SET_FLAGS;
MACRO_DSO DSO_FLAG_GLOBAL_SYMBOLS;
MACRO_DSO DSO_FLAG_NAME_TRANSLATION_EXT_ONLY;
MACRO_DSO DSO_FLAG_NO_NAME_TRANSLATION;
MACRO_DSO DSO_FLAG_UPCASE_SYMBOL;
MACRO_DSO DSO_F_DLFCN_BIND_FUNC;
MACRO_DSO DSO_F_DLFCN_BIND_VAR;
MACRO_DSO DSO_F_DLFCN_LOAD;
MACRO_DSO DSO_F_DLFCN_MERGER;
MACRO_DSO DSO_F_DLFCN_NAME_CONVERTER;
MACRO_DSO DSO_F_DLFCN_UNLOAD;
MACRO_DSO DSO_F_DL_BIND_FUNC;
MACRO_DSO DSO_F_DL_BIND_VAR;
MACRO_DSO DSO_F_DL_LOAD;
MACRO_DSO DSO_F_DL_MERGER;
MACRO_DSO DSO_F_DL_NAME_CONVERTER;
MACRO_DSO DSO_F_DL_UNLOAD;
MACRO_DSO DSO_F_DSO_BIND_FUNC;
MACRO_DSO DSO_F_DSO_BIND_VAR;
MACRO_DSO DSO_F_DSO_CONVERT_FILENAME;
MACRO_DSO DSO_F_DSO_CTRL;
MACRO_DSO DSO_F_DSO_FREE;
MACRO_DSO DSO_F_DSO_GET_FILENAME;
MACRO_DSO DSO_F_DSO_GET_LOADED_FILENAME;
MACRO_DSO DSO_F_DSO_LOAD;
MACRO_DSO DSO_F_DSO_MERGE;
MACRO_DSO DSO_F_DSO_NEW_METHOD;
MACRO_DSO DSO_F_DSO_SET_FILENAME;
MACRO_DSO DSO_F_DSO_SET_NAME_CONVERTER;
MACRO_DSO DSO_F_DSO_UP_REF;
MACRO_DSO DSO_F_VMS_BIND_SYM;
MACRO_DSO DSO_F_VMS_LOAD;
MACRO_DSO DSO_F_VMS_MERGER;
MACRO_DSO DSO_F_VMS_UNLOAD;
MACRO_DSO DSO_F_WIN32_BIND_FUNC;
MACRO_DSO DSO_F_WIN32_BIND_VAR;
MACRO_DSO DSO_F_WIN32_JOINER;
MACRO_DSO DSO_F_WIN32_LOAD;
MACRO_DSO DSO_F_WIN32_MERGER;
MACRO_DSO DSO_F_WIN32_NAME_CONVERTER;
MACRO_DSO DSO_F_WIN32_SPLITTER;
MACRO_DSO DSO_F_WIN32_UNLOAD;
MACRO_DSO DSO_R_CTRL_FAILED;
MACRO_DSO DSO_R_DSO_ALREADY_LOADED;
MACRO_DSO DSO_R_EMPTY_FILE_STRUCTURE;
MACRO_DSO DSO_R_FAILURE;
MACRO_DSO DSO_R_FILENAME_TOO_BIG;
MACRO_DSO DSO_R_FINISH_FAILED;
MACRO_DSO DSO_R_INCORRECT_FILE_SYNTAX;
MACRO_DSO DSO_R_LOAD_FAILED;
MACRO_DSO DSO_R_NAME_TRANSLATION_FAILED;
MACRO_DSO DSO_R_NO_FILENAME;
MACRO_DSO DSO_R_NO_FILE_SPECIFICATION;
MACRO_DSO DSO_R_NULL_HANDLE;
MACRO_DSO DSO_R_SET_FILENAME_FAILED;
MACRO_DSO DSO_R_STACK_ERROR;
MACRO_DSO DSO_R_SYM_FAILURE;
MACRO_DSO DSO_R_UNLOAD_FAILED;
MACRO_DSO DSO_R_UNSUPPORTED;
MACRO_DSS DSS_prime_checks;
MACRO_DST DST_AUST;
MACRO_DST DST_CAN;
MACRO_DST DST_EET;
MACRO_DST DST_MET;
MACRO_DST DST_NONE;
MACRO_DST DST_USA;
MACRO_DST DST_WET;
MACRO_DTF DTF_HIDEW;
MACRO_DTF DTF_NODUP;
MACRO_DTF DTF_REWIND;
MACRO_DTLS1_VERSION DTLS1_AL_HEADER_LENGTH;
MACRO_DTLS1_VERSION DTLS1_BAD_VER;
MACRO_DTLS1_VERSION DTLS1_CCS_HEADER_LENGTH;
MACRO_DTLS1_VERSION DTLS1_COOKIE_LENGTH;
MACRO_DTLS1_VERSION DTLS1_HM_BAD_FRAGMENT;
MACRO_DTLS1_VERSION DTLS1_HM_FRAGMENT_RETRY;
MACRO_DTLS1_VERSION DTLS1_HM_HEADER_LENGTH;
MACRO_DTLS1 DTLS1_MT_HELLO_VERIFY_REQUEST;
MACRO_DTLS1_VERSION DTLS1_RT_HEADER_LENGTH;
MACRO_DTLS1_VERSION DTLS1_TMO_ALERT_COUNT;
MACRO_DTLS1_VERSION DTLS1_TMO_READ_COUNT;
MACRO_DTLS1_VERSION DTLS1_TMO_WRITE_COUNT;
MACRO_DTLS1_VERSION DTLS1_VERSION;
MACRO_DTLS DTLS_CTRL_GET_TIMEOUT;
MACRO_DTLS DTLS_CTRL_HANDLE_TIMEOUT;
MACRO_DTLS DTLS_CTRL_LISTEN;
MACRO_DT DT_BLK;
MACRO_DT DT_CHR;
MACRO_DT DT_DIR;
MACRO_DT DT_FIFO;
MACRO_DT DT_LNK;
MACRO_DT DT_REG;
MACRO_DT DT_SOCK;
MACRO_DT DT_UNKNOWN;
MACRO_DT DT_WHT;
MACRO_PACKET DUMP_PACKET;
MACRO_DYLD DYLD_CACHE_SLIDE_PAGE_ATTRS;
MACRO_DYLD DYLD_CACHE_SLIDE_PAGE_ATTR_END;
MACRO_DYLD DYLD_CACHE_SLIDE_PAGE_ATTR_EXTRA;
MACRO_DYLD DYLD_CACHE_SLIDE_PAGE_ATTR_NO_REBASE;
MACRO_DYLD DYLD_CACHE_SLIDE_V3_PAGE_ATTR_NO_REBASE;
MACRO_ORDINAL DYNAMIC_LOOKUP_ORDINAL;
MACRO_DYN DYN_DST_ADDR;
MACRO_DYN DYN_DST_PORT;
MACRO_DYN DYN_SRC_ADDR;
MACRO_DYN DYN_SRC_PORT;
MACRO_D D_DISK;
MACRO_D_T D_FMT;
MACRO_D_MD D_MD_ORDER;
MACRO_D D_TAPE;
MACRO_D D_TTY;
MACRO_D_T D_T_FMT;
MACRO_ERRNO E2BIG;
MACRO_ERRNO EACCES;
MACRO_EUNDEF EACCESS;
MACRO_ERRNO EADDRINUSE;
MACRO_ERRNO EADDRNOTAVAIL;
MACRO_ERRNO EAFNOSUPPORT;
MACRO_ERRNO EAGAIN;
MACRO_EAI EAI_ADDRFAMILY;
MACRO_EAI EAI_AGAIN;
MACRO_EAI EAI_BADFLAGS;
MACRO_EAI EAI_BADHINTS;
MACRO_EAI EAI_FAIL;
MACRO_EAI EAI_FAMILY;
MACRO_EAI EAI_MAX;
MACRO_EAI EAI_MEMORY;
MACRO_EAI EAI_NODATA;
MACRO_EAI EAI_NONAME;
MACRO_EAI EAI_OVERFLOW;
MACRO_EAI EAI_PROTOCOL;
MACRO_EAI EAI_SERVICE;
MACRO_EAI EAI_SOCKTYPE;
MACRO_EAI EAI_SYSTEM;
MACRO_ERRNO EALREADY;
MACRO_ERRNO EAUTH;
MACRO_ERRNO EBADARCH;
MACRO_ERRNO EBADEXEC;
MACRO_ERRNO EBADF;
MACRO_EBADID EBADID;
MACRO_ERRNO EBADMACHO;
MACRO_ERRNO EBADMSG;
MACRO_ENOSPACE EBADOP;
MACRO_ERRNO EBADRPC;
MACRO_ERRNO EBUSY;
MACRO_EC EC;
MACRO_ERRNO ECANCELED;
MACRO_ECDH ECDH_F_ECDH_COMPUTE_KEY;
MACRO_ECDH ECDH_F_ECDH_DATA_NEW_METHOD;
MACRO_ECDH ECDH_R_KDF_FAILED;
MACRO_ECDH ECDH_R_NO_PRIVATE_VALUE;
MACRO_ECDH ECDH_R_POINT_ARITHMETIC_FAILURE;
MACRO_ECDSA ECDSA_F_ECDSA_DATA_NEW_METHOD;
MACRO_ECDSA ECDSA_F_ECDSA_DO_SIGN;
MACRO_ECDSA ECDSA_F_ECDSA_DO_VERIFY;
MACRO_ECDSA ECDSA_F_ECDSA_SIGN_SETUP;
MACRO_ECDSA ECDSA_R_BAD_SIGNATURE;
MACRO_ECDSA ECDSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE;
MACRO_ECDSA ECDSA_R_ERR_EC_LIB;
MACRO_ECDSA ECDSA_R_MISSING_PARAMETERS;
MACRO_ECDSA ECDSA_R_NEED_NEW_SETUP_VALUES;
MACRO_ECDSA ECDSA_R_RANDOM_NUMBER_GENERATION_FAILED;
MACRO_ECDSA ECDSA_R_SIGNATURE_MALLOC_FAILED;
MACRO_ERRNO ECHILD;
MACRO_TANDEM ECHO;
MACRO_ECHOKE ECHOCTL;
MACRO_ECHOKE ECHOE;
MACRO_ECHOKE ECHOK;
MACRO_ECHOKE ECHOKE;
MACRO_ECHOKE ECHONL;
MACRO_ECHOKE ECHOPRT;
MACRO_ERRNO ECONNABORTED;
MACRO_ERRNO ECONNREFUSED;
MACRO_ERRNO ECONNRESET;
MACRO_EC_PKEY EC_F_COMPUTE_WNAF;
MACRO_EC_PKEY EC_F_D2I_ECPARAMETERS;
MACRO_EC_PKEY EC_F_D2I_ECPKPARAMETERS;
MACRO_EC_PKEY EC_F_D2I_ECPRIVATEKEY;
MACRO_EC_PKEY EC_F_ECPARAMETERS_PRINT;
MACRO_EC_PKEY EC_F_ECPARAMETERS_PRINT_FP;
MACRO_EC_PKEY EC_F_ECPKPARAMETERS_PRINT;
MACRO_EC_PKEY EC_F_ECPKPARAMETERS_PRINT_FP;
MACRO_EC_PKEY EC_F_ECP_NIST_MOD_192;
MACRO_EC_PKEY EC_F_ECP_NIST_MOD_224;
MACRO_EC_PKEY EC_F_ECP_NIST_MOD_256;
MACRO_EC_PKEY EC_F_ECP_NIST_MOD_521;
MACRO_EC_PKEY EC_F_EC_ASN1_GROUP2CURVE;
MACRO_EC_PKEY EC_F_EC_ASN1_GROUP2FIELDID;
MACRO_EC_PKEY EC_F_EC_ASN1_GROUP2PARAMETERS;
MACRO_EC_PKEY EC_F_EC_ASN1_GROUP2PKPARAMETERS;
MACRO_EC_PKEY EC_F_EC_ASN1_PARAMETERS2GROUP;
MACRO_EC_PKEY EC_F_EC_ASN1_PKPARAMETERS2GROUP;
MACRO_EC_PKEY EC_F_EC_EX_DATA_SET_DATA;
MACRO_EC_PKEY EC_F_EC_GF2M_MONTGOMERY_POINT_MULTIPLY;
MACRO_EC_PKEY EC_F_EC_GF2M_SIMPLE_GROUP_CHECK_DISCRIMINANT;
MACRO_EC_PKEY EC_F_EC_GF2M_SIMPLE_GROUP_SET_CURVE;
MACRO_EC_PKEY EC_F_EC_GF2M_SIMPLE_OCT2POINT;
MACRO_EC_PKEY EC_F_EC_GF2M_SIMPLE_POINT2OCT;
MACRO_EC_PKEY EC_F_EC_GF2M_SIMPLE_POINT_GET_AFFINE_COORDINATES;
MACRO_EC_PKEY EC_F_EC_GF2M_SIMPLE_POINT_SET_AFFINE_COORDINATES;
MACRO_EC_PKEY EC_F_EC_GF2M_SIMPLE_SET_COMPRESSED_COORDINATES;
MACRO_EC_PKEY EC_F_EC_GFP_MONT_FIELD_DECODE;
MACRO_EC_PKEY EC_F_EC_GFP_MONT_FIELD_ENCODE;
MACRO_EC_PKEY EC_F_EC_GFP_MONT_FIELD_MUL;
MACRO_EC_PKEY EC_F_EC_GFP_MONT_FIELD_SET_TO_ONE;
MACRO_EC_PKEY EC_F_EC_GFP_MONT_FIELD_SQR;
MACRO_EC_PKEY EC_F_EC_GFP_MONT_GROUP_SET_CURVE;
MACRO_EC_PKEY EC_F_EC_GFP_MONT_GROUP_SET_CURVE_GFP;
MACRO_EC_PKEY EC_F_EC_GFP_NIST_FIELD_MUL;
MACRO_EC_PKEY EC_F_EC_GFP_NIST_FIELD_SQR;
MACRO_EC_PKEY EC_F_EC_GFP_NIST_GROUP_SET_CURVE;
MACRO_EC_PKEY EC_F_EC_GFP_SIMPLE_GROUP_CHECK_DISCRIMINANT;
MACRO_EC_PKEY EC_F_EC_GFP_SIMPLE_GROUP_SET_CURVE;
MACRO_EC_PKEY EC_F_EC_GFP_SIMPLE_GROUP_SET_CURVE_GFP;
MACRO_EC_PKEY EC_F_EC_GFP_SIMPLE_GROUP_SET_GENERATOR;
MACRO_EC_PKEY EC_F_EC_GFP_SIMPLE_MAKE_AFFINE;
MACRO_EC_PKEY EC_F_EC_GFP_SIMPLE_OCT2POINT;
MACRO_EC_PKEY EC_F_EC_GFP_SIMPLE_POINT2OCT;
MACRO_EC_PKEY EC_F_EC_GFP_SIMPLE_POINTS_MAKE_AFFINE;
MACRO_EC_PKEY EC_F_EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES;
MACRO_EC_PKEY EC_F_EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES_GFP;
MACRO_EC_PKEY EC_F_EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES;
MACRO_EC_PKEY EC_F_EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES_GFP;
MACRO_EC_PKEY EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES;
MACRO_EC_PKEY EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES_GFP;
MACRO_EC_PKEY EC_F_EC_GROUP_CHECK;
MACRO_EC_PKEY EC_F_EC_GROUP_CHECK_DISCRIMINANT;
MACRO_EC_PKEY EC_F_EC_GROUP_COPY;
MACRO_EC_PKEY EC_F_EC_GROUP_GET0_GENERATOR;
MACRO_EC_PKEY EC_F_EC_GROUP_GET_COFACTOR;
MACRO_EC_PKEY EC_F_EC_GROUP_GET_CURVE_GF2M;
MACRO_EC_PKEY EC_F_EC_GROUP_GET_CURVE_GFP;
MACRO_EC_PKEY EC_F_EC_GROUP_GET_DEGREE;
MACRO_EC_PKEY EC_F_EC_GROUP_GET_ORDER;
MACRO_EC_PKEY EC_F_EC_GROUP_GET_PENTANOMIAL_BASIS;
MACRO_EC_PKEY EC_F_EC_GROUP_GET_TRINOMIAL_BASIS;
MACRO_EC_PKEY EC_F_EC_GROUP_NEW;
MACRO_EC_PKEY EC_F_EC_GROUP_NEW_BY_CURVE_NAME;
MACRO_EC_PKEY EC_F_EC_GROUP_NEW_FROM_DATA;
MACRO_EC_PKEY EC_F_EC_GROUP_PRECOMPUTE_MULT;
MACRO_EC_PKEY EC_F_EC_GROUP_SET_CURVE_GF2M;
MACRO_EC_PKEY EC_F_EC_GROUP_SET_CURVE_GFP;
MACRO_EC_PKEY EC_F_EC_GROUP_SET_EXTRA_DATA;
MACRO_EC_PKEY EC_F_EC_GROUP_SET_GENERATOR;
MACRO_EC_PKEY EC_F_EC_KEY_CHECK_KEY;
MACRO_EC_PKEY EC_F_EC_KEY_COPY;
MACRO_EC_PKEY EC_F_EC_KEY_GENERATE_KEY;
MACRO_EC_PKEY EC_F_EC_KEY_NEW;
MACRO_EC_PKEY EC_F_EC_KEY_PRINT;
MACRO_EC_PKEY EC_F_EC_KEY_PRINT_FP;
MACRO_EC_PKEY EC_F_EC_POINTS_MAKE_AFFINE;
MACRO_EC_PKEY EC_F_EC_POINTS_MUL;
MACRO_EC_PKEY EC_F_EC_POINT_ADD;
MACRO_EC_PKEY EC_F_EC_POINT_CMP;
MACRO_EC_PKEY EC_F_EC_POINT_COPY;
MACRO_EC_PKEY EC_F_EC_POINT_DBL;
MACRO_EC_PKEY EC_F_EC_POINT_GET_AFFINE_COORDINATES_GF2M;
MACRO_EC_PKEY EC_F_EC_POINT_GET_AFFINE_COORDINATES_GFP;
MACRO_EC_PKEY EC_F_EC_POINT_GET_JPROJECTIVE_COORDINATES_GFP;
MACRO_EC_PKEY EC_F_EC_POINT_INVERT;
MACRO_EC_PKEY EC_F_EC_POINT_IS_AT_INFINITY;
MACRO_EC_PKEY EC_F_EC_POINT_IS_ON_CURVE;
MACRO_EC_PKEY EC_F_EC_POINT_MAKE_AFFINE;
MACRO_EC_PKEY EC_F_EC_POINT_MUL;
MACRO_EC_PKEY EC_F_EC_POINT_NEW;
MACRO_EC_PKEY EC_F_EC_POINT_OCT2POINT;
MACRO_EC_PKEY EC_F_EC_POINT_POINT2OCT;
MACRO_EC_PKEY EC_F_EC_POINT_SET_AFFINE_COORDINATES_GF2M;
MACRO_EC_PKEY EC_F_EC_POINT_SET_AFFINE_COORDINATES_GFP;
MACRO_EC_PKEY EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GF2M;
MACRO_EC_PKEY EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GFP;
MACRO_EC_PKEY EC_F_EC_POINT_SET_JPROJECTIVE_COORDINATES_GFP;
MACRO_EC_PKEY EC_F_EC_POINT_SET_TO_INFINITY;
MACRO_EC_PKEY EC_F_EC_PRE_COMP_DUP;
MACRO_EC_PKEY EC_F_EC_PRE_COMP_NEW;
MACRO_EC_PKEY EC_F_EC_WNAF_MUL;
MACRO_EC_PKEY EC_F_EC_WNAF_PRECOMPUTE_MULT;
MACRO_EC_PKEY EC_F_I2D_ECPARAMETERS;
MACRO_EC_PKEY EC_F_I2D_ECPKPARAMETERS;
MACRO_EC_PKEY EC_F_I2D_ECPRIVATEKEY;
MACRO_EC_PKEY EC_F_I2O_ECPUBLICKEY;
MACRO_EC_PKEY EC_F_O2I_ECPUBLICKEY;
MACRO_EC_PKEY EC_PKEY_NO_PARAMETERS;
MACRO_EC_PKEY EC_PKEY_NO_PUBKEY;
MACRO_EC_PKEY EC_R_ASN1_ERROR;
MACRO_EC_PKEY EC_R_ASN1_UNKNOWN_FIELD;
MACRO_EC_PKEY EC_R_BUFFER_TOO_SMALL;
MACRO_EC_PKEY EC_R_D2I_ECPKPARAMETERS_FAILURE;
MACRO_EC_PKEY EC_R_DISCRIMINANT_IS_ZERO;
MACRO_EC_PKEY EC_R_EC_GROUP_NEW_BY_NAME_FAILURE;
MACRO_EC_PKEY EC_R_FIELD_TOO_LARGE;
MACRO_EC_PKEY EC_R_GROUP2PKPARAMETERS_FAILURE;
MACRO_EC_PKEY EC_R_I2D_ECPKPARAMETERS_FAILURE;
MACRO_EC_PKEY EC_R_INCOMPATIBLE_OBJECTS;
MACRO_EC_PKEY EC_R_INVALID_ARGUMENT;
MACRO_EC_PKEY EC_R_INVALID_COMPRESSED_POINT;
MACRO_EC_PKEY EC_R_INVALID_COMPRESSION_BIT;
MACRO_EC_PKEY EC_R_INVALID_ENCODING;
MACRO_EC_PKEY EC_R_INVALID_FIELD;
MACRO_EC_PKEY EC_R_INVALID_FORM;
MACRO_EC_PKEY EC_R_INVALID_GROUP_ORDER;
MACRO_EC_PKEY EC_R_INVALID_PENTANOMIAL_BASIS;
MACRO_EC_PKEY EC_R_INVALID_PRIVATE_KEY;
MACRO_EC_PKEY EC_R_INVALID_TRINOMIAL_BASIS;
MACRO_EC_PKEY EC_R_MISSING_PARAMETERS;
MACRO_EC_PKEY EC_R_MISSING_PRIVATE_KEY;
MACRO_EC_PKEY EC_R_NOT_A_NIST_PRIME;
MACRO_EC_PKEY EC_R_NOT_A_SUPPORTED_NIST_PRIME;
MACRO_EC_PKEY EC_R_NOT_IMPLEMENTED;
MACRO_EC_PKEY EC_R_NOT_INITIALIZED;
MACRO_EC_PKEY EC_R_NO_FIELD_MOD;
MACRO_EC_PKEY EC_R_PASSED_NULL_PARAMETER;
MACRO_EC_PKEY EC_R_PKPARAMETERS2GROUP_FAILURE;
MACRO_EC_PKEY EC_R_POINT_AT_INFINITY;
MACRO_EC_PKEY EC_R_POINT_IS_NOT_ON_CURVE;
MACRO_EC_PKEY EC_R_SLOT_FULL;
MACRO_EC_PKEY EC_R_UNDEFINED_GENERATOR;
MACRO_EC_PKEY EC_R_UNDEFINED_ORDER;
MACRO_EC_PKEY EC_R_UNKNOWN_GROUP;
MACRO_EC_PKEY EC_R_UNKNOWN_ORDER;
MACRO_EC_PKEY EC_R_UNSUPPORTED_FIELD;
MACRO_EC_PKEY EC_R_WRONG_ORDER;
MACRO_ERRNO EDEADLK;
MACRO_ERRNO EDESTADDRREQ;
MACRO_ERRNO EDEVERR;
MACRO_ERRNO EDOM;
MACRO_ERRNO EDQUOT;
MACRO_ERRNO EEXIST;
MACRO_EEXISTS EEXISTS;
MACRO_ERRNO EFAULT;
MACRO_ERRNO EFBIG;
MACRO_EFL EFL_AC;
MACRO_EFL EFL_AF;
MACRO_EFL EFL_CF;
MACRO_EFL EFL_CLR;
MACRO_EFL EFL_DF;
MACRO_EFL EFL_ID;
MACRO_EFL EFL_IF;
MACRO_EFL EFL_IOPL;
MACRO_EFL EFL_IOPL_KERNEL;
MACRO_EFL EFL_IOPL_USER;
MACRO_EFL EFL_NT;
MACRO_EFL EFL_OF;
MACRO_EFL EFL_PF;
MACRO_EFL EFL_RF;
MACRO_EFL EFL_SET;
MACRO_EFL EFL_SF;
MACRO_EFL EFL_TF;
MACRO_EFL EFL_USER_CLEAR;
MACRO_EFL EFL_USER_SET;
MACRO_EFL EFL_VIF;
MACRO_EFL EFL_VIP;
MACRO_EFL EFL_VM;
MACRO_EFL EFL_ZF;
MACRO_ERRNO EFTYPE;
MACRO_ERRNO EHOSTDOWN;
MACRO_ERRNO EHOSTUNREACH;
MACRO_ERRNO EIDRM;
MACRO_ERRNO EILSEQ;
MACRO_ERRNO EINPROGRESS;
MACRO_ERRNO EINTR;
MACRO_ERRNO EINVAL;
MACRO_ERRNO EIO;
MACRO_ERRNO EISCONN;
MACRO_ERRNO EISDIR;
MACRO_NORMAL EITHER_CONFIG;
MACRO_EL_0 EL;
MACRO_ERRNO ELAST;
MACRO_ERRNO ELOOP;
MACRO_EL EL_ADDFN;
MACRO_EL EL_BIND;
MACRO_EL EL_BUILTIN_GETCFN;
MACRO_EL EL_CLIENTDATA;
MACRO_EL EL_ECHOTC;
MACRO_EL EL_EDITMODE;
MACRO_EL EL_EDITOR;
MACRO_EL EL_GETCFN;
MACRO_EL EL_GETFP;
MACRO_EL EL_GETTC;
MACRO_EL EL_HIST;
MACRO_EL EL_PREP_TERM;
MACRO_EL EL_PROMPT;
MACRO_EL EL_PROMPT_ESC;
MACRO_EL EL_REFRESH;
MACRO_EL EL_RPROMPT;
MACRO_EL EL_RPROMPT_ESC;
MACRO_EL EL_SETFP;
MACRO_EL EL_SETTC;
MACRO_EL EL_SETTY;
MACRO_EL EL_SIGNAL;
MACRO_EL EL_TELLTC;
MACRO_EL EL_TERMINAL;
MACRO_EL EL_UNBUFFERED;
MACRO_ERRNO EMFILE;
MACRO_ERRNO EMLINK;
MACRO_EMPTY EMPTY;
MACRO_ERRNO EMSGSIZE;
MACRO_ERRNO EMULTIHOP;
MACRO_ERRNO ENAMETOOLONG;
MACRO_ENCRYPT ENCRYPT_CNT;
MACRO_ENCRYPT ENCRYPT_DEC_KEYID;
MACRO_ENCRYPT ENCRYPT_ENC_KEYID;
MACRO_ENCRYPT ENCRYPT_END;
MACRO_ENCRYPT ENCRYPT_IS;
MACRO_ENCRYPT ENCRYPT_REPLY;
MACRO_ENCRYPT ENCRYPT_REQEND;
MACRO_ENCRYPT ENCRYPT_REQSTART;
MACRO_ENCRYPT ENCRYPT_START;
MACRO_ENCRYPT ENCRYPT_SUPPORT;
MACRO_ENCTYPE ENCTYPE_AES128_CTS_HMAC_SHA1_96;
MACRO_ENCTYPE ENCTYPE_AES256_CTS_HMAC_SHA1_96;
MACRO_ENCTYPE_ANY ENCTYPE_ANY;
MACRO_ENCTYPE ENCTYPE_ARCFOUR_HMAC;
MACRO_ENCTYPE ENCTYPE_ARCFOUR_HMAC_EXP;
MACRO_ENCTYPE_ANY ENCTYPE_CNT;
MACRO_ENCTYPE ENCTYPE_DES3_CBC_ENV;
MACRO_ENCTYPE ENCTYPE_DES3_CBC_RAW;
MACRO_ENCTYPE ENCTYPE_DES3_CBC_SHA;
MACRO_ENCTYPE ENCTYPE_DES3_CBC_SHA1;
MACRO_ENCTYPE ENCTYPE_DES_CBC_CRC;
MACRO_ENCTYPE ENCTYPE_DES_CBC_MD4;
MACRO_ENCTYPE ENCTYPE_DES_CBC_MD5;
MACRO_ENCTYPE ENCTYPE_DES_CBC_RAW;
MACRO_ENCTYPE_ANY ENCTYPE_DES_CFB64;
MACRO_ENCTYPE ENCTYPE_DES_HMAC_SHA1;
MACRO_ENCTYPE_ANY ENCTYPE_DES_OFB64;
MACRO_ENCTYPE ENCTYPE_DSA_SHA1_CMS;
MACRO_ENCTYPE ENCTYPE_MD5_RSA_CMS;
MACRO_ENCTYPE ENCTYPE_NULL;
MACRO_ENCTYPE ENCTYPE_RC2_CBC_ENV;
MACRO_ENCTYPE ENCTYPE_RSA_ENV;
MACRO_ENCTYPE ENCTYPE_RSA_ES_OAEP_ENV;
MACRO_ENCTYPE ENCTYPE_SHA1_RSA_CMS;
MACRO_ENCTYPE ENCTYPE_UNKNOWN;
MACRO_ERRNO ENEEDAUTH;
MACRO_ERRNO ENETDOWN;
MACRO_ERRNO ENETRESET;
MACRO_ERRNO ENETUNREACH;
MACRO_ERRNO ENFILE;
MACRO_ENGINETIME ENGINEBOOT_MAX;
MACRO_ENGINEID ENGINEID_TYPE_EXACT;
MACRO_ENGINEID ENGINEID_TYPE_IPV4;
MACRO_ENGINEID ENGINEID_TYPE_IPV6;
MACRO_ENGINEID ENGINEID_TYPE_MACADDR;
MACRO_ENGINEID ENGINEID_TYPE_NETSNMP_RND;
MACRO_ENGINEID ENGINEID_TYPE_TEXT;
MACRO_ENGINETIME ENGINETIME_MAX;
MACRO_ENGINE ENGINE_CMD_BASE;
MACRO_ENGINE ENGINE_CMD_FLAG_INTERNAL;
MACRO_ENGINE ENGINE_CMD_FLAG_NO_INPUT;
MACRO_ENGINE ENGINE_CMD_FLAG_NUMERIC;
MACRO_ENGINE ENGINE_CMD_FLAG_STRING;
MACRO_ENGINE ENGINE_CTRL_CHIL_NO_LOCKING;
MACRO_ENGINE ENGINE_CTRL_CHIL_SET_FORKCHECK;
MACRO_ENGINE ENGINE_CTRL_GET_CMD_FLAGS;
MACRO_ENGINE ENGINE_CTRL_GET_CMD_FROM_NAME;
MACRO_ENGINE ENGINE_CTRL_GET_DESC_FROM_CMD;
MACRO_ENGINE ENGINE_CTRL_GET_DESC_LEN_FROM_CMD;
MACRO_ENGINE ENGINE_CTRL_GET_FIRST_CMD_TYPE;
MACRO_ENGINE ENGINE_CTRL_GET_NAME_FROM_CMD;
MACRO_ENGINE ENGINE_CTRL_GET_NAME_LEN_FROM_CMD;
MACRO_ENGINE ENGINE_CTRL_GET_NEXT_CMD_TYPE;
MACRO_ENGINE ENGINE_CTRL_HAS_CTRL_FUNCTION;
MACRO_ENGINE ENGINE_CTRL_HUP;
MACRO_ENGINE ENGINE_CTRL_LOAD_CONFIGURATION;
MACRO_ENGINE ENGINE_CTRL_LOAD_SECTION;
MACRO_ENGINE ENGINE_CTRL_SET_CALLBACK_DATA;
MACRO_ENGINE ENGINE_CTRL_SET_LOGSTREAM;
MACRO_ENGINE ENGINE_CTRL_SET_PASSWORD_CALLBACK;
MACRO_ENGINE ENGINE_CTRL_SET_USER_INTERFACE;
MACRO_ENGINE ENGINE_FLAGS_BY_ID_COPY;
MACRO_ENGINE ENGINE_FLAGS_MANUAL_CMD_CTRL;
MACRO_ENGINE_F ENGINE_F_DYNAMIC_CTRL;
MACRO_ENGINE_F ENGINE_F_DYNAMIC_GET_DATA_CTX;
MACRO_ENGINE_F ENGINE_F_DYNAMIC_LOAD;
MACRO_ENGINE_F ENGINE_F_DYNAMIC_SET_DATA_CTX;
MACRO_ENGINE_F ENGINE_F_ENGINE_ADD;
MACRO_ENGINE_F ENGINE_F_ENGINE_BY_ID;
MACRO_ENGINE_F ENGINE_F_ENGINE_CMD_IS_EXECUTABLE;
MACRO_ENGINE_F ENGINE_F_ENGINE_CTRL;
MACRO_ENGINE_F ENGINE_F_ENGINE_CTRL_CMD;
MACRO_ENGINE_F ENGINE_F_ENGINE_CTRL_CMD_STRING;
MACRO_ENGINE_F ENGINE_F_ENGINE_FINISH;
MACRO_ENGINE_F ENGINE_F_ENGINE_FREE_UTIL;
MACRO_ENGINE_F ENGINE_F_ENGINE_GET_CIPHER;
MACRO_ENGINE_F ENGINE_F_ENGINE_GET_DEFAULT_TYPE;
MACRO_ENGINE_F ENGINE_F_ENGINE_GET_DIGEST;
MACRO_ENGINE_F ENGINE_F_ENGINE_GET_NEXT;
MACRO_ENGINE_F ENGINE_F_ENGINE_GET_PREV;
MACRO_ENGINE_F ENGINE_F_ENGINE_INIT;
MACRO_ENGINE_F ENGINE_F_ENGINE_LIST_ADD;
MACRO_ENGINE_F ENGINE_F_ENGINE_LIST_REMOVE;
MACRO_ENGINE_F ENGINE_F_ENGINE_LOAD_PRIVATE_KEY;
MACRO_ENGINE_F ENGINE_F_ENGINE_LOAD_PUBLIC_KEY;
MACRO_ENGINE_F ENGINE_F_ENGINE_LOAD_SSL_CLIENT_CERT;
MACRO_ENGINE_F ENGINE_F_ENGINE_NEW;
MACRO_ENGINE_F ENGINE_F_ENGINE_REMOVE;
MACRO_ENGINE_F ENGINE_F_ENGINE_SET_DEFAULT_STRING;
MACRO_ENGINE_F ENGINE_F_ENGINE_SET_DEFAULT_TYPE;
MACRO_ENGINE_F ENGINE_F_ENGINE_SET_ID;
MACRO_ENGINE_F ENGINE_F_ENGINE_SET_NAME;
MACRO_ENGINE_F ENGINE_F_ENGINE_TABLE_REGISTER;
MACRO_ENGINE_F ENGINE_F_ENGINE_UNLOAD_KEY;
MACRO_ENGINE_F ENGINE_F_ENGINE_UNLOCKED_FINISH;
MACRO_ENGINE_F ENGINE_F_ENGINE_UP_REF;
MACRO_ENGINE_F ENGINE_F_INT_CTRL_HELPER;
MACRO_ENGINE_F ENGINE_F_INT_ENGINE_CONFIGURE;
MACRO_ENGINE_F ENGINE_F_INT_ENGINE_MODULE_INIT;
MACRO_ENGINE_F ENGINE_F_LOG_MESSAGE;
MACRO_ENGINE ENGINE_METHOD_ALL;
MACRO_ENGINE ENGINE_METHOD_CIPHERS;
MACRO_ENGINE ENGINE_METHOD_DH;
MACRO_ENGINE ENGINE_METHOD_DIGESTS;
MACRO_ENGINE ENGINE_METHOD_DSA;
MACRO_ENGINE ENGINE_METHOD_ECDH;
MACRO_ENGINE ENGINE_METHOD_ECDSA;
MACRO_ENGINE ENGINE_METHOD_NONE;
MACRO_ENGINE ENGINE_METHOD_RAND;
MACRO_ENGINE ENGINE_METHOD_RSA;
MACRO_ENGINE ENGINE_METHOD_STORE;
MACRO_ENGINE_F ENGINE_R_ALREADY_LOADED;
MACRO_ENGINE_F ENGINE_R_ARGUMENT_IS_NOT_A_NUMBER;
MACRO_ENGINE_F ENGINE_R_CMD_NOT_EXECUTABLE;
MACRO_ENGINE_F ENGINE_R_COMMAND_TAKES_INPUT;
MACRO_ENGINE_F ENGINE_R_COMMAND_TAKES_NO_INPUT;
MACRO_ENGINE_F ENGINE_R_CONFLICTING_ENGINE_ID;
MACRO_ENGINE_F ENGINE_R_CTRL_COMMAND_NOT_IMPLEMENTED;
MACRO_ENGINE_F ENGINE_R_DH_NOT_IMPLEMENTED;
MACRO_ENGINE_F ENGINE_R_DSA_NOT_IMPLEMENTED;
MACRO_ENGINE_F ENGINE_R_DSO_FAILURE;
MACRO_ENGINE_F ENGINE_R_DSO_NOT_FOUND;
MACRO_ENGINE_F ENGINE_R_ENGINES_SECTION_ERROR;
MACRO_ENGINE_F ENGINE_R_ENGINE_CONFIGURATION_ERROR;
MACRO_ENGINE_F ENGINE_R_ENGINE_IS_NOT_IN_LIST;
MACRO_ENGINE_F ENGINE_R_ENGINE_SECTION_ERROR;
MACRO_ENGINE_F ENGINE_R_FAILED_LOADING_PRIVATE_KEY;
MACRO_ENGINE_F ENGINE_R_FAILED_LOADING_PUBLIC_KEY;
MACRO_ENGINE_F ENGINE_R_FINISH_FAILED;
MACRO_ENGINE_F ENGINE_R_GET_HANDLE_FAILED;
MACRO_ENGINE_F ENGINE_R_ID_OR_NAME_MISSING;
MACRO_ENGINE_F ENGINE_R_INIT_FAILED;
MACRO_ENGINE_F ENGINE_R_INTERNAL_LIST_ERROR;
MACRO_ENGINE_F ENGINE_R_INVALID_ARGUMENT;
MACRO_ENGINE_F ENGINE_R_INVALID_CMD_NAME;
MACRO_ENGINE_F ENGINE_R_INVALID_CMD_NUMBER;
MACRO_ENGINE_F ENGINE_R_INVALID_INIT_VALUE;
MACRO_ENGINE_F ENGINE_R_INVALID_STRING;
MACRO_ENGINE_F ENGINE_R_NOT_INITIALISED;
MACRO_ENGINE_F ENGINE_R_NOT_LOADED;
MACRO_ENGINE_F ENGINE_R_NO_CONTROL_FUNCTION;
MACRO_ENGINE_F ENGINE_R_NO_INDEX;
MACRO_ENGINE_F ENGINE_R_NO_LOAD_FUNCTION;
MACRO_ENGINE_F ENGINE_R_NO_REFERENCE;
MACRO_ENGINE_F ENGINE_R_NO_SUCH_ENGINE;
MACRO_ENGINE_F ENGINE_R_NO_UNLOAD_FUNCTION;
MACRO_ENGINE_F ENGINE_R_PROVIDE_PARAMETERS;
MACRO_ENGINE_F ENGINE_R_RSA_NOT_IMPLEMENTED;
MACRO_ENGINE_F ENGINE_R_UNIMPLEMENTED_CIPHER;
MACRO_ENGINE_F ENGINE_R_UNIMPLEMENTED_DIGEST;
MACRO_ENGINE_F ENGINE_R_VERSION_INCOMPATIBILITY;
MACRO_ENGINE ENGINE_TABLE_FLAG_NOINIT;
MACRO_ERRNO ENOATTR;
MACRO_ERRNO ENOBUFS;
MACRO_ERRNO ENODATA;
MACRO_ERRNO ENODEV;
MACRO_ERRNO ENOENT;
MACRO_ERRNO ENOEXEC;
MACRO_ERRNO ENOLCK;
MACRO_ERRNO ENOLINK;
MACRO_ERRNO ENOMEM;
MACRO_ERRNO ENOMSG;
MACRO_ERRNO ENOPOLICY;
MACRO_ERRNO ENOPROTOOPT;
MACRO_ENOSPACE ENOSPACE;
MACRO_ERRNO ENOSPC;
MACRO_ERRNO ENOSR;
MACRO_ERRNO ENOSTR;
MACRO_ERRNO ENOSYS;
MACRO_ERRNO ENOTBLK;
MACRO_ERRNO ENOTCONN;
MACRO_ERRNO ENOTDIR;
MACRO_ERRNO ENOTEMPTY;
MACRO_EUNDEF ENOTFOUND;
MACRO_ERRNO ENOTRECOVERABLE;
MACRO_ERRNO ENOTSOCK;
MACRO_ERRNO ENOTSUP;
MACRO_ERRNO ENOTTY;
MACRO_ENOUSER ENOUSER;
$EDBA1914F16BC538415B0E0A3A3FD3BB ENTER;
MACRO_SLOT ENVIRONMENT_SLOT;
MACRO_ENV ENV_ESC;
MACRO_ENV_SEPARATOR ENV_SEPARATOR_CHAR;
MACRO_ENV ENV_USERVAR;
MACRO_ERRNO ENXIO;
MACRO_EOF EOF;
MACRO_ERRNO EOPNOTSUPP;
MACRO_ENOUSER EOPTNEG;
MACRO_EOR EOR;
MACRO_ERRNO EOVERFLOW;
MACRO_ERRNO EOWNERDEAD;
MACRO_ERRNO EPERM;
MACRO_ERRNO EPFNOSUPPORT;
MACRO_ERRNO EPIPE;
MACRO_EPOCH EPOCH_WDAY;
MACRO_EPOCH EPOCH_YEAR;
MACRO_ERRNO EPROCLIM;
MACRO_ERRNO EPROCUNAVAIL;
MACRO_EPROC EPROC_CTTY;
MACRO_EPROC EPROC_SLEADER;
MACRO_ERRNO EPROGMISMATCH;
MACRO_ERRNO EPROGUNAVAIL;
MACRO_ERRNO EPROTO;
MACRO_ERRNO EPROTONOSUPPORT;
MACRO_ERRNO EPROTOTYPE;
MACRO_ERRNO EPWROFF;
MACRO_CHARCLASS EQUIV_CLASS_MAX;
MACRO_ERA ERA;
MACRO_ERRNO ERANGE;
MACRO_ERA_D ERA_D_FMT;
MACRO_ERA_D ERA_D_T_FMT;
MACRO_ERA_D ERA_T_FMT;
MACRO_ERRNO EREMOTE;
MACRO_ERRNO EROFS;
MACRO_ERRNO ERPCMISMATCH;
MACRO_ERR ERR;
MACRO_ERROR_0 ERROR;
MACRO_ERROR_TABLE_BASE_asn1 ERROR_TABLE_BASE_asn1;
MACRO_ERROR_TABLE_BASE_k524 ERROR_TABLE_BASE_k524;
MACRO_ERROR_TABLE ERROR_TABLE_BASE_kdb5;
MACRO_ERROR ERROR_TABLE_BASE_krb5;
MACRO_ERROR_TABLE_BASE ERROR_TABLE_BASE_kv5m;
MACRO_ERROR_TABLE_BASE_prof ERROR_TABLE_BASE_prof;
MACRO_ERR_TXT ERR_FLAG_MARK;
MACRO_ERR_GDT ERR_GDT;
MACRO_ERR_GDT ERR_IDT;
MACRO_ERR_GDT ERR_LDT;
MACRO_ERR_TXT ERR_LIB_ASN1;
MACRO_ERR_TXT ERR_LIB_BIO;
MACRO_ERR_TXT ERR_LIB_BN;
MACRO_ERR_TXT ERR_LIB_BUF;
MACRO_ERR_TXT ERR_LIB_CMS;
MACRO_ERR_TXT ERR_LIB_COMP;
MACRO_ERR_TXT ERR_LIB_CONF;
MACRO_ERR_TXT ERR_LIB_CRYPTO;
MACRO_ERR_TXT ERR_LIB_DH;
MACRO_ERR_TXT ERR_LIB_DSA;
MACRO_ERR_TXT ERR_LIB_DSO;
MACRO_ERR_TXT ERR_LIB_EC;
MACRO_ERR_TXT ERR_LIB_ECDH;
MACRO_ERR_TXT ERR_LIB_ECDSA;
MACRO_ERR_TXT ERR_LIB_ENGINE;
MACRO_ERR_TXT ERR_LIB_EVP;
MACRO_ERR_TXT ERR_LIB_FIPS;
MACRO_ERR_TXT ERR_LIB_JPAKE;
MACRO_ERR_TXT ERR_LIB_NONE;
MACRO_ERR_TXT ERR_LIB_OBJ;
MACRO_ERR_TXT ERR_LIB_OCSP;
MACRO_ERR_TXT ERR_LIB_PEM;
MACRO_ERR_TXT ERR_LIB_PKCS12;
MACRO_ERR_TXT ERR_LIB_PKCS7;
MACRO_ERR_TXT ERR_LIB_RAND;
MACRO_ERR_TXT ERR_LIB_RSA;
MACRO_ERR_TXT ERR_LIB_SSL;
MACRO_ERR_TXT ERR_LIB_STORE;
MACRO_ERR_TXT ERR_LIB_SYS;
MACRO_ERR_TXT ERR_LIB_UI;
MACRO_ERR_TXT ERR_LIB_USER;
MACRO_ERR_TXT ERR_LIB_X509;
MACRO_ERR_TXT ERR_LIB_X509V3;
MACRO_ERR_TXT ERR_NUM_ERRORS;
MACRO_ERR_R ERR_R_ASN1_LENGTH_MISMATCH;
MACRO_ERR_R ERR_R_ASN1_LIB;
MACRO_ERR_R ERR_R_BAD_ASN1_OBJECT_HEADER;
MACRO_ERR_R ERR_R_BAD_GET_ASN1_OBJECT_CALL;
MACRO_ERR_R ERR_R_BIO_LIB;
MACRO_ERR_R ERR_R_BN_LIB;
MACRO_ERR_R ERR_R_BUF_LIB;
MACRO_ERR_R ERR_R_COMP_LIB;
MACRO_ERR_R ERR_R_CONF_LIB;
MACRO_ERR_R ERR_R_CRYPTO_LIB;
MACRO_ERR_R ERR_R_DH_LIB;
MACRO_ERR_R ERR_R_DISABLED;
MACRO_ERR_R ERR_R_DSA_LIB;
MACRO_ERR_R ERR_R_DSO_LIB;
MACRO_ERR_R ERR_R_ECDH_LIB;
MACRO_ERR_R ERR_R_ECDSA_LIB;
MACRO_ERR_R ERR_R_EC_LIB;
MACRO_ERR_R ERR_R_ENGINE_LIB;
MACRO_ERR_R ERR_R_EVP_LIB;
MACRO_ERR_R ERR_R_EXPECTING_AN_ASN1_SEQUENCE;
MACRO_ERR_R ERR_R_FATAL;
MACRO_ERR_R ERR_R_INTERNAL_ERROR;
MACRO_ERR_R ERR_R_MALLOC_FAILURE;
MACRO_ERR_R ERR_R_MISSING_ASN1_EOS;
MACRO_ERR_R ERR_R_NESTED_ASN1_ERROR;
MACRO_ERR_R ERR_R_OBJ_LIB;
MACRO_ERR_R ERR_R_OCSP_LIB;
MACRO_ERR_R ERR_R_PASSED_NULL_PARAMETER;
MACRO_ERR_R ERR_R_PEM_LIB;
MACRO_ERR_R ERR_R_PKCS12_LIB;
MACRO_ERR_R ERR_R_PKCS7_LIB;
MACRO_ERR_R ERR_R_RAND_LIB;
MACRO_ERR_R ERR_R_RSA_LIB;
MACRO_ERR_R ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED;
MACRO_ERR_R ERR_R_SSL_LIB;
MACRO_ERR_R ERR_R_STORE_LIB;
MACRO_ERR_R ERR_R_SYS_LIB;
MACRO_ERR_R ERR_R_UI_LIB;
MACRO_ERR_R ERR_R_X509V3_LIB;
MACRO_ERR_R ERR_R_X509_LIB;
MACRO_ERR_TXT ERR_TXT_MALLOCED;
MACRO_ERR_TXT ERR_TXT_STRING;
MACRO_ERRNO ESHLIBVERS;
MACRO_ERRNO ESHUTDOWN;
MACRO_ERRNO ESOCKTNOSUPPORT;
MACRO_ERRNO ESPIPE;
MACRO_ERRNO ESRCH;
MACRO_ERRNO ESTALE;
MACRO_ETHERMIN ETHERMIN;
MACRO_ETHERMTU ETHERMTU;
MACRO_ETHERTYPE ETHERTYPE_ARP;
MACRO_ETHERTYPE ETHERTYPE_IP;
MACRO_ETHERTYPE ETHERTYPE_IPV6;
MACRO_ETHERTYPE ETHERTYPE_LOOPBACK;
MACRO_ETHERTYPE ETHERTYPE_NTRAILER;
MACRO_ETHERTYPE ETHERTYPE_PAE;
MACRO_ETHERTYPE ETHERTYPE_PUP;
MACRO_ETHERTYPE ETHERTYPE_REVARP;
MACRO_ETHERTYPE ETHERTYPE_RSN_PREAUTH;
MACRO_ETHERTYPE ETHERTYPE_TRAIL;
MACRO_ETHERTYPE ETHERTYPE_VLAN;
MACRO_ETHER ETHER_ADDR_LEN;
MACRO_ETHER ETHER_ALIGN;
MACRO_ETHER ETHER_CRC_LEN;
MACRO_ETHER ETHER_HDR_LEN;
MACRO_ETHER ETHER_MAX_LEN;
MACRO_ETHER ETHER_MIN_LEN;
MACRO_ETHER ETHER_TYPE_LEN;
MACRO_ERRNO ETIME;
MACRO_ERRNO ETIMEDOUT;
MACRO_ETIMELIST ETIMELIST_SIZE;
MACRO_ERRNO ETOOMANYREFS;
MACRO_ERRNO ETXTBSY;
MACRO_EUNDEF EUNDEF;
MACRO_ERRNO EUSERS;
MACRO_TANDEM EVENP;
MACRO_EVFILT EVFILT_AIO;
MACRO_EVFILT EVFILT_FS;
MACRO_EVFILT EVFILT_MACHPORT;
MACRO_EVFILT EVFILT_PROC;
MACRO_EVFILT EVFILT_READ;
MACRO_EVFILT EVFILT_SIGNAL;
MACRO_EVFILT EVFILT_SYSCOUNT;
MACRO_EVFILT EVFILT_THREADMARKER;
MACRO_EVFILT EVFILT_TIMER;
MACRO_EVFILT EVFILT_USER;
MACRO_EVFILT EVFILT_VM;
MACRO_EVFILT EVFILT_VNODE;
MACRO_EVFILT EVFILT_WRITE;
MACRO_EVP_PK EVP_CIPH_ALWAYS_CALL_INIT;
MACRO_EVP_PK EVP_CIPH_CBC_MODE;
MACRO_EVP_PK EVP_CIPH_CFB_MODE;
MACRO_EVP_PK EVP_CIPH_CTRL_INIT;
MACRO_EVP_PK EVP_CIPH_CUSTOM_IV;
MACRO_EVP_PK EVP_CIPH_CUSTOM_KEY_LENGTH;
MACRO_EVP_PK EVP_CIPH_ECB_MODE;
MACRO_EVP_PK EVP_CIPH_FLAG_DEFAULT_ASN1;
MACRO_EVP_PK EVP_CIPH_FLAG_FIPS;
MACRO_EVP_PK EVP_CIPH_FLAG_LENGTH_BITS;
MACRO_EVP_PK EVP_CIPH_FLAG_NON_FIPS_ALLOW;
MACRO_EVP_PK EVP_CIPH_MODE;
MACRO_EVP_PK EVP_CIPH_NO_PADDING;
MACRO_EVP_PK EVP_CIPH_OFB_MODE;
MACRO_EVP_PK EVP_CIPH_RAND_KEY;
MACRO_EVP_PK EVP_CIPH_STREAM_CIPHER;
MACRO_EVP_PK EVP_CIPH_VARIABLE_LENGTH;
MACRO_EVP_PK EVP_CTRL_GET_RC2_KEY_BITS;
MACRO_EVP_PK EVP_CTRL_GET_RC5_ROUNDS;
MACRO_EVP_PK EVP_CTRL_INIT;
MACRO_EVP_PK EVP_CTRL_RAND_KEY;
MACRO_EVP_PK EVP_CTRL_SET_KEY_LENGTH;
MACRO_EVP_PK EVP_CTRL_SET_RC2_KEY_BITS;
MACRO_EVP_PK EVP_CTRL_SET_RC5_ROUNDS;
MACRO_EVP_PK EVP_F_AES_INIT_KEY;
MACRO_EVP_PK EVP_F_ALG_MODULE_INIT;
MACRO_EVP_PK EVP_F_CAMELLIA_INIT_KEY;
MACRO_EVP_PK EVP_F_D2I_PKEY;
MACRO_EVP_PK EVP_F_DO_EVP_ENC_ENGINE;
MACRO_EVP_PK EVP_F_DO_EVP_ENC_ENGINE_FULL;
MACRO_EVP_PK EVP_F_DO_EVP_MD_ENGINE;
MACRO_EVP_PK EVP_F_DO_EVP_MD_ENGINE_FULL;
MACRO_EVP_PK EVP_F_DSAPKEY2PKCS8;
MACRO_EVP_PK EVP_F_DSA_PKEY2PKCS8;
MACRO_EVP_PK EVP_F_ECDSA_PKEY2PKCS8;
MACRO_EVP_PK EVP_F_ECKEY_PKEY2PKCS8;
MACRO_EVP_PK EVP_F_EVP_CIPHERINIT;
MACRO_EVP_PK EVP_F_EVP_CIPHERINIT_EX;
MACRO_EVP_PK EVP_F_EVP_CIPHER_CTX_CTRL;
MACRO_EVP_PK EVP_F_EVP_CIPHER_CTX_SET_KEY_LENGTH;
MACRO_EVP_PK EVP_F_EVP_DECRYPTFINAL_EX;
MACRO_EVP_PK EVP_F_EVP_DIGESTINIT;
MACRO_EVP_PK EVP_F_EVP_DIGESTINIT_EX;
MACRO_EVP_PK EVP_F_EVP_ENCRYPTFINAL_EX;
MACRO_EVP_PK EVP_F_EVP_MD_CTX_COPY_EX;
MACRO_EVP_PK EVP_F_EVP_OPENINIT;
MACRO_EVP_PK EVP_F_EVP_PBE_ALG_ADD;
MACRO_EVP_PK EVP_F_EVP_PBE_CIPHERINIT;
MACRO_EVP_PK EVP_F_EVP_PKCS82PKEY;
MACRO_EVP_PK EVP_F_EVP_PKEY2PKCS8_BROKEN;
MACRO_EVP_PK EVP_F_EVP_PKEY_COPY_PARAMETERS;
MACRO_EVP_PK EVP_F_EVP_PKEY_DECRYPT;
MACRO_EVP_PK EVP_F_EVP_PKEY_ENCRYPT;
MACRO_EVP_PK EVP_F_EVP_PKEY_GET1_DH;
MACRO_EVP_PK EVP_F_EVP_PKEY_GET1_DSA;
MACRO_EVP_PK EVP_F_EVP_PKEY_GET1_ECDSA;
MACRO_EVP_PK EVP_F_EVP_PKEY_GET1_EC_KEY;
MACRO_EVP_PK EVP_F_EVP_PKEY_GET1_RSA;
MACRO_EVP_PK EVP_F_EVP_PKEY_NEW;
MACRO_EVP_PK EVP_F_EVP_RIJNDAEL;
MACRO_EVP_PK EVP_F_EVP_SIGNFINAL;
MACRO_EVP_PK EVP_F_EVP_VERIFYFINAL;
MACRO_EVP_PK EVP_F_PKCS5_PBE_KEYIVGEN;
MACRO_EVP_PK EVP_F_PKCS5_V2_PBE_KEYIVGEN;
MACRO_EVP_PK EVP_F_PKCS8_SET_BROKEN;
MACRO_EVP_PK EVP_F_RC2_MAGIC_TO_METH;
MACRO_EVP_PK EVP_F_RC5_CTRL;
MACRO_EVP EVP_MAX_BLOCK_LENGTH;
MACRO_EVP EVP_MAX_IV_LENGTH;
MACRO_EVP EVP_MAX_KEY_LENGTH;
MACRO_EVP EVP_MAX_MD_SIZE;
MACRO_EVP_PK EVP_MD_CTX_FLAG_CLEANED;
MACRO_EVP_PK EVP_MD_CTX_FLAG_NON_FIPS_ALLOW;
MACRO_EVP_PK EVP_MD_CTX_FLAG_ONESHOT;
MACRO_EVP_PK EVP_MD_CTX_FLAG_PAD_MASK;
MACRO_EVP_PK EVP_MD_CTX_FLAG_PAD_PKCS1;
MACRO_EVP_PK EVP_MD_CTX_FLAG_PAD_PSS;
MACRO_EVP_PK EVP_MD_CTX_FLAG_PAD_X931;
MACRO_EVP_PK EVP_MD_CTX_FLAG_PSS_MDLEN;
MACRO_EVP_PK EVP_MD_CTX_FLAG_PSS_MREC;
MACRO_EVP_PK EVP_MD_CTX_FLAG_REUSE;
MACRO_EVP_PK EVP_MD_FLAG_FIPS;
MACRO_EVP_PK EVP_MD_FLAG_ONESHOT;
MACRO_EVP_PK EVP_MD_FLAG_SVCTX;
MACRO_EVP_PK EVP_PKEY_DH;
MACRO_EVP_PK EVP_PKEY_DSA;
MACRO_EVP_PK EVP_PKEY_DSA1;
MACRO_EVP_PK EVP_PKEY_DSA2;
MACRO_EVP_PK EVP_PKEY_DSA3;
MACRO_EVP_PK EVP_PKEY_DSA4;
MACRO_EVP_PK EVP_PKEY_EC;
MACRO_EVP_PK EVP_PKEY_MO_DECRYPT;
MACRO_EVP_PK EVP_PKEY_MO_ENCRYPT;
MACRO_EVP_PK EVP_PKEY_MO_SIGN;
MACRO_EVP_PK EVP_PKEY_MO_VERIFY;
MACRO_EVP_PK EVP_PKEY_NONE;
MACRO_EVP_PK EVP_PKEY_RSA;
MACRO_EVP_PK EVP_PKEY_RSA2;
MACRO_EVP_PK EVP_PKS_DSA;
MACRO_EVP_PK EVP_PKS_EC;
MACRO_EVP_PK EVP_PKS_RSA;
MACRO_EVP_PK EVP_PKT_ENC;
MACRO_EVP_PK EVP_PKT_EXCH;
MACRO_EVP_PK EVP_PKT_EXP;
MACRO_EVP_PK EVP_PKT_SIGN;
MACRO_EVP_PK EVP_PK_DH;
MACRO_EVP_PK EVP_PK_DSA;
MACRO_EVP_PK EVP_PK_EC;
MACRO_EVP_PK EVP_PK_RSA;
MACRO_EVP_PK EVP_R_AES_KEY_SETUP_FAILED;
MACRO_EVP_PK EVP_R_ASN1_LIB;
MACRO_EVP_PK EVP_R_BAD_BLOCK_LENGTH;
MACRO_EVP_PK EVP_R_BAD_DECRYPT;
MACRO_EVP_PK EVP_R_BAD_KEY_LENGTH;
MACRO_EVP_PK EVP_R_BN_DECODE_ERROR;
MACRO_EVP_PK EVP_R_BN_PUBKEY_ERROR;
MACRO_EVP_PK EVP_R_CAMELLIA_KEY_SETUP_FAILED;
MACRO_EVP_PK EVP_R_CIPHER_PARAMETER_ERROR;
MACRO_EVP_PK EVP_R_CTRL_NOT_IMPLEMENTED;
MACRO_EVP_PK EVP_R_CTRL_OPERATION_NOT_IMPLEMENTED;
MACRO_EVP_PK EVP_R_DATA_NOT_MULTIPLE_OF_BLOCK_LENGTH;
MACRO_EVP_PK EVP_R_DECODE_ERROR;
MACRO_EVP_PK EVP_R_DIFFERENT_KEY_TYPES;
MACRO_EVP_PK EVP_R_DISABLED_FOR_FIPS;
MACRO_EVP_PK EVP_R_ENCODE_ERROR;
MACRO_EVP_PK EVP_R_ERROR_LOADING_SECTION;
MACRO_EVP_PK EVP_R_ERROR_SETTING_FIPS_MODE;
MACRO_EVP_PK EVP_R_EVP_PBE_CIPHERINIT_ERROR;
MACRO_EVP_PK EVP_R_EXPECTING_AN_RSA_KEY;
MACRO_EVP_PK EVP_R_EXPECTING_A_DH_KEY;
MACRO_EVP_PK EVP_R_EXPECTING_A_DSA_KEY;
MACRO_EVP_PK EVP_R_EXPECTING_A_ECDSA_KEY;
MACRO_EVP_PK EVP_R_EXPECTING_A_EC_KEY;
MACRO_EVP_PK EVP_R_FIPS_MODE_NOT_SUPPORTED;
MACRO_EVP_PK EVP_R_INITIALIZATION_ERROR;
MACRO_EVP_PK EVP_R_INPUT_NOT_INITIALIZED;
MACRO_EVP_PK EVP_R_INVALID_FIPS_MODE;
MACRO_EVP_PK EVP_R_INVALID_KEY_LENGTH;
MACRO_EVP_PK EVP_R_IV_TOO_LARGE;
MACRO_EVP_PK EVP_R_KEYGEN_FAILURE;
MACRO_EVP_PK EVP_R_MISSING_PARAMETERS;
MACRO_EVP_PK EVP_R_NO_CIPHER_SET;
MACRO_EVP_PK EVP_R_NO_DIGEST_SET;
MACRO_EVP_PK EVP_R_NO_DSA_PARAMETERS;
MACRO_EVP_PK EVP_R_NO_SIGN_FUNCTION_CONFIGURED;
MACRO_EVP_PK EVP_R_NO_VERIFY_FUNCTION_CONFIGURED;
MACRO_EVP_PK EVP_R_PKCS8_UNKNOWN_BROKEN_TYPE;
MACRO_EVP_PK EVP_R_PUBLIC_KEY_NOT_RSA;
MACRO_EVP_PK EVP_R_SEED_KEY_SETUP_FAILED;
MACRO_EVP_PK EVP_R_UNKNOWN_OPTION;
MACRO_EVP_PK EVP_R_UNKNOWN_PBE_ALGORITHM;
MACRO_EVP_PK EVP_R_UNSUPORTED_NUMBER_OF_ROUNDS;
MACRO_EVP_PK EVP_R_UNSUPPORTED_CIPHER;
MACRO_EVP_PK EVP_R_UNSUPPORTED_KEYLENGTH;
MACRO_EVP_PK EVP_R_UNSUPPORTED_KEY_DERIVATION_FUNCTION;
MACRO_EVP_PK EVP_R_UNSUPPORTED_KEY_SIZE;
MACRO_EVP_PK EVP_R_UNSUPPORTED_PRF;
MACRO_EVP_PK EVP_R_UNSUPPORTED_PRIVATE_KEY_ALGORITHM;
MACRO_EVP_PK EVP_R_UNSUPPORTED_SALT_TYPE;
MACRO_EVP_PK EVP_R_WRONG_FINAL_BLOCK_LENGTH;
MACRO_EVP_PK EVP_R_WRONG_PUBLIC_KEY_TYPE;
MACRO_EV_ADD EV_ADD;
MACRO_EV_ADD EV_CLEAR;
MACRO_EV_ADD EV_DELETE;
MACRO_EV_ADD EV_DISABLE;
MACRO_EV_ADD EV_DISPATCH;
MACRO_EV EV_DMASK;
MACRO_EV_ADD EV_ENABLE;
MACRO_EV_ADD EV_EOF;
MACRO_EV_ADD EV_ERROR;
MACRO_EV EV_EX;
MACRO_EV EV_FD;
MACRO_EV EV_FIN;
MACRO_EV_ADD EV_FLAG0;
MACRO_EV_ADD EV_FLAG1;
MACRO_EV EV_MASK;
MACRO_EV_ADD EV_ONESHOT;
MACRO_EV EV_OOB;
MACRO_EV_ADD EV_OOBAND;
MACRO_EV_ADD EV_POLL;
MACRO_EV EV_RBYTES;
MACRO_EV EV_RCLOSED;
MACRO_EV EV_RCONN;
MACRO_EV EV_RE;
MACRO_EV_ADD EV_RECEIPT;
MACRO_EV EV_RESET;
MACRO_EV EV_RM;
MACRO_EV EV_RWBYTES;
MACRO_EV_ADD EV_SYSFLAGS;
MACRO_EV EV_TIMEOUT;
MACRO_EV EV_WBYTES;
MACRO_EV EV_WCLOSED;
MACRO_EV EV_WCONN;
MACRO_EV EV_WR;
MACRO_ERRNO EWOULDBLOCK;
MACRO_EXCEPTION EXCEPTION_CODE_MAX;
MACRO_EXCEPTION_DEFAULT EXCEPTION_DEFAULT;
MACRO_EXCEPTION_DEFAULT EXCEPTION_STATE;
MACRO_EXCEPTION_DEFAULT EXCEPTION_STATE_IDENTITY;
MACRO_EXC_I386 EXC_ARITHMETIC;
MACRO_EXC_I386 EXC_BAD_ACCESS;
MACRO_EXC_I386 EXC_BAD_INSTRUCTION;
MACRO_EXC_I386 EXC_BREAKPOINT;
MACRO_EXC_I386 EXC_CRASH;
MACRO_EXC_I386 EXC_EMULATION;
MACRO_EXC_I386 EXC_I386_ALIGNFLT;
MACRO_EXC_I386 EXC_I386_BOUND;
MACRO_EXC_I386 EXC_I386_BOUNDFLT;
MACRO_EXC_I386 EXC_I386_BPT;
MACRO_EXC_I386 EXC_I386_BPTFLT;
MACRO_EXC_I386 EXC_I386_DBLFLT;
MACRO_EXC_I386 EXC_I386_DIV;
MACRO_EXC_I386 EXC_I386_DIVERR;
MACRO_EXC_I386 EXC_I386_EMERR;
MACRO_EXC_I386 EXC_I386_ENDPERR;
MACRO_EXC_I386 EXC_I386_ENOEXTFLT;
MACRO_EXC_I386 EXC_I386_EXTERR;
MACRO_EXC_I386 EXC_I386_EXTERRFLT;
MACRO_EXC_I386 EXC_I386_EXTOVR;
MACRO_EXC_I386 EXC_I386_EXTOVRFLT;
MACRO_EXC_I386 EXC_I386_GPFLT;
MACRO_EXC_I386 EXC_I386_INTO;
MACRO_EXC_I386 EXC_I386_INTOFLT;
MACRO_EXC_I386 EXC_I386_INVOP;
MACRO_EXC_I386 EXC_I386_INVOPFLT;
MACRO_EXC_I386 EXC_I386_INVTSSFLT;
MACRO_EXC_I386 EXC_I386_NMIFLT;
MACRO_EXC_I386 EXC_I386_NOEXT;
MACRO_EXC_I386 EXC_I386_NOEXTFLT;
MACRO_EXC_I386 EXC_I386_PGFLT;
MACRO_EXC_I386 EXC_I386_SEGNPFLT;
MACRO_EXC_I386 EXC_I386_SGL;
MACRO_EXC_I386 EXC_I386_SGLSTP;
MACRO_EXC_I386 EXC_I386_SSEEXTERR;
MACRO_EXC_I386 EXC_I386_STKFLT;
MACRO_EXC_I386 EXC_MACH_SYSCALL;
MACRO_EXC_MASK EXC_MASK_ALL;
MACRO_EXC_MASK EXC_MASK_ARITHMETIC;
MACRO_EXC_MASK EXC_MASK_BAD_ACCESS;
MACRO_EXC_MASK EXC_MASK_BAD_INSTRUCTION;
MACRO_EXC_MASK EXC_MASK_BREAKPOINT;
MACRO_EXC_MASK EXC_MASK_CRASH;
MACRO_EXC_MASK EXC_MASK_EMULATION;
MACRO_EXC_I386 EXC_MASK_MACHINE;
MACRO_EXC_MASK EXC_MASK_MACH_SYSCALL;
MACRO_EXC_MASK EXC_MASK_RPC_ALERT;
MACRO_EXC_MASK EXC_MASK_SOFTWARE;
MACRO_EXC_MASK EXC_MASK_SYSCALL;
MACRO_EXC_I386 EXC_RPC_ALERT;
MACRO_EXC_I386 EXC_SOFTWARE;
MACRO_EXC_SOFT EXC_SOFT_SIGNAL;
MACRO_EXC_I386 EXC_SYSCALL;
MACRO_EXC EXC_TYPES_COUNT;
MACRO_ERRNO EXDEV;
MACRO_ORDINAL EXECUTABLE_ORDINAL;
MACRO_EXFLAG EXFLAG_BCONS;
MACRO_EXFLAG EXFLAG_CA;
MACRO_EXFLAG EXFLAG_CRITICAL;
MACRO_EXFLAG EXFLAG_INVALID;
MACRO_EXFLAG EXFLAG_INVALID_POLICY;
MACRO_EXFLAG EXFLAG_KUSAGE;
MACRO_EXFLAG EXFLAG_NSCERT;
MACRO_EXFLAG EXFLAG_PROXY;
MACRO_EXFLAG EXFLAG_SET;
MACRO_EXFLAG EXFLAG_SI;
MACRO_EXFLAG EXFLAG_SS;
MACRO_EXFLAG EXFLAG_V1;
MACRO_EXFLAG EXFLAG_XKUSAGE;
MACRO_EXIT EXIT_FAILURE;
MACRO_EXIT EXIT_SUCCESS;
MACRO_EXPIRE EXPIRE_TIME;
MACRO_EXPORT EXPORT_SYMBOL_FLAGS_KIND_MASK;
MACRO_EXPORT EXPORT_SYMBOL_FLAGS_KIND_REGULAR;
MACRO_EXPORT EXPORT_SYMBOL_FLAGS_KIND_THREAD_LOCAL;
MACRO_EXPORT EXPORT_SYMBOL_FLAGS_REEXPORT;
MACRO_EXPORT EXPORT_SYMBOL_FLAGS_STUB_AND_RESOLVER;
MACRO_EXPORT EXPORT_SYMBOL_FLAGS_WEAK_DEFINITION;
MACRO_CHARCLASS EXPR_NEST_MAX;
MACRO_EXTA EXTA;
MACRO_EXTB EXTB;
MACRO_ECHOKE EXTPROC;
MACRO_EX EX_CANTCREAT;
MACRO_EX EX_CONFIG;
MACRO_EX EX_DATAERR;
MACRO_EX EX_IOERR;
MACRO_EX EX_NOHOST;
MACRO_EX EX_NOINPUT;
MACRO_EX EX_NOPERM;
MACRO_EX EX_NOUSER;
MACRO_EX EX_OK;
MACRO_EX EX_OSERR;
MACRO_EX EX_OSFILE;
MACRO_EX EX_PROTOCOL;
MACRO_EX EX_SOFTWARE;
MACRO_EX EX_TEMPFAIL;
MACRO_EX EX_UNAVAILABLE;
MACRO_EX EX_USAGE;
MACRO_EX EX__BASE;
MACRO_EX EX__MAX;
MACRO_E E_BAD_ARGUMENT;
MACRO_E E_BAD_STATE;
MACRO_E E_CONNECTED;
MACRO_E E_CURRENT;
MACRO_E E_INVALID_FIELD;
MACRO_E E_NOT_CONNECTED;
MACRO_E E_NOT_POSTED;
MACRO_E E_NOT_SELECTABLE;
MACRO_E E_NO_MATCH;
MACRO_E E_NO_ROOM;
MACRO_E E_OK;
MACRO_E E_POSTED;
MACRO_E E_REQUEST_DENIED;
MACRO_E E_SYSTEM_ERROR;
MACRO_E E_UNKNOWN_COMMAND;
MACRO_EndOfStream EndOfStream;
$696BC85C9266121A3094CE9AE91C2C01 FACTORY_EXISTS;
$696BC85C9266121A3094CE9AE91C2C01 FACTORY_GENERR;
$696BC85C9266121A3094CE9AE91C2C01 FACTORY_MAXIMUM_ERROR;
$696BC85C9266121A3094CE9AE91C2C01 FACTORY_NOERROR;
$696BC85C9266121A3094CE9AE91C2C01 FACTORY_NOMEMORY;
$696BC85C9266121A3094CE9AE91C2C01 FACTORY_NOTFOUND;
MACRO_FAILED FAILED;
DYLD_BOOL FALSE;
MACRO_FAPPEND FAPPEND;
MACRO_FAPPEND FASYNC;
MACRO_FAT FAT_CIGAM;
MACRO_FAT FAT_MAGIC;
MACRO_FCNTL FCNTL_FS_SPECIFIC_BASE;
MACRO_CLOEXEC FD_CLOEXEC;
MACRO_FD_REGISTERED FD_NO_SUCH_REGISTRATION;
MACRO_FD_REGISTERED FD_REGISTERED_OK;
MACRO_FD_REGISTERED FD_REGISTRATION_FAILED;
MACRO_FD FD_SETSIZE;
MACRO_FD_REGISTERED FD_UNREGISTERED_OK;
MACRO_FE FE_ALL_EXCEPT;
MACRO_FE FE_DIVBYZERO;
MACRO_FE FE_DOWNWARD;
MACRO_FE FE_INEXACT;
MACRO_FE FE_INVALID;
MACRO_FE FE_OVERFLOW;
MACRO_FE FE_TONEAREST;
MACRO_FE FE_TOWARDZERO;
MACRO_FE FE_UNDERFLOW;
MACRO_FE FE_UPWARD;
MACRO_FF0 FF0;
MACRO_FF0 FF1;
MACRO_OPOST FFDLY;
MACRO_FAPPEND FFDSYNC;
ffi_status FFI_BAD_ABI;
ffi_status FFI_BAD_TYPEDEF;
MACRO_FFI_CLOSURES FFI_CLOSURES;
ffi_abi FFI_DEFAULT_ABI;
ffi_abi FFI_FIRST_ABI;
ffi_abi FFI_LAST_ABI;
MACRO_FFI_CLOSURES FFI_LONG_LONG_MAX;
MACRO_FFI_CLOSURES FFI_NATIVE_RAW_API;
MACRO_FFI FFI_NO_RAW_API;
ffi_status FFI_OK;
MACRO_FFI_CLOSURES FFI_SIZEOF_ARG;
ffi_abi FFI_SYSV;
MACRO_FFI_CLOSURES FFI_TRAMPOLINE_SIZE;
MACRO_FFI_CLOSURES FFI_TYPE_DOUBLE;
MACRO_FFI_CLOSURES FFI_TYPE_FLOAT;
MACRO_FFI_CLOSURES FFI_TYPE_INT;
MACRO_FFI_CLOSURES FFI_TYPE_LAST;
MACRO_FFI_CLOSURES FFI_TYPE_LONGDOUBLE;
MACRO_FFI_CLOSURES FFI_TYPE_POINTER;
MACRO_FFI_CLOSURES FFI_TYPE_SINT16;
MACRO_FFI_CLOSURES FFI_TYPE_SINT32;
MACRO_FFI_CLOSURES FFI_TYPE_SINT64;
MACRO_FFI_CLOSURES FFI_TYPE_SINT8;
MACRO_FFI_CLOSURES FFI_TYPE_STRUCT;
MACRO_FFI_CLOSURES FFI_TYPE_UINT16;
MACRO_FFI_CLOSURES FFI_TYPE_UINT32;
MACRO_FFI_CLOSURES FFI_TYPE_UINT64;
MACRO_FFI_CLOSURES FFI_TYPE_UINT8;
MACRO_FFI_CLOSURES FFI_TYPE_VOID;
ffi_abi FFI_UNIX64;
MACRO_FAPPEND FFSYNC;
MACRO_FHSIZE FHSIZE;
MACRO_FIFOTYPE FIFOTYPE;
MACRO_FILENAMES FILENAMES_CASE_SENSITIVE;
MACRO_MAX FILENAME_MAX;
$D4934026ABEEF2822D8F739CC8F783CF FILESEC_ACL;
$D4934026ABEEF2822D8F739CC8F783CF FILESEC_ACL_ALLOCSIZE;
$D4934026ABEEF2822D8F739CC8F783CF FILESEC_ACL_RAW;
$D4934026ABEEF2822D8F739CC8F783CF FILESEC_GROUP;
$D4934026ABEEF2822D8F739CC8F783CF FILESEC_GRPUUID;
$D4934026ABEEF2822D8F739CC8F783CF FILESEC_MODE;
$D4934026ABEEF2822D8F739CC8F783CF FILESEC_OWNER;
$D4934026ABEEF2822D8F739CC8F783CF FILESEC_UUID;
$EDBA1914F16BC538415B0E0A3A3FD3BB FIND;
MACRO_FINISHED FINISHED_FAILURE;
MACRO_FINISHED FINISHED_SUCCESS;
MACRO_FIOCLEX FIOCLEX;
MACRO_FIONCLEX FIONCLEX;
MACRO_FIRST FIRST_EXCEPTION;
MACRO_FIRST_PASS FIRST_PASS;
MACRO_ALLDELAY FLUSHO;
MACRO_FNDELAY FNDELAY;
MACRO_FNM FNM_CASEFOLD;
MACRO_FNM FNM_FILE_NAME;
MACRO_FNM FNM_IGNORECASE;
MACRO_FNM FNM_LEADING_DIR;
MACRO_FNM FNM_NOESCAPE;
MACRO_FNM FNM_NOMATCH;
MACRO_FNM FNM_NOSYS;
MACRO_FNM FNM_PATHNAME;
MACRO_FNM FNM_PERIOD;
MACRO_FNONBLOCK FNONBLOCK;
MACRO_MAX FOPEN_MAX;
MACRO_FORM FORM_C;
MACRO_FORM FORM_N;
MACRO_FORM FORM_T;
MACRO_FPARSELN FPARSELN_UNESCALL;
MACRO_FPARSELN FPARSELN_UNESCCOMM;
MACRO_FPARSELN FPARSELN_UNESCCONT;
MACRO_FPARSELN FPARSELN_UNESCESC;
MACRO_FPARSELN FPARSELN_UNESCREST;
MACRO_FPC FPC_DE;
MACRO_FPC FPC_DM;
MACRO_FPC FPC_IC;
MACRO_FPC FPC_IC_AFF;
MACRO_FPC FPC_IC_PROJ;
MACRO_FPC FPC_IE;
MACRO_FPC FPC_IM;
MACRO_FPC FPC_OE;
MACRO_FPC FPC_OM;
MACRO_FPC FPC_PC;
MACRO_FPC FPC_PC_24;
MACRO_FPC FPC_PC_53;
MACRO_FPC FPC_PC_64;
MACRO_FPC FPC_PE;
MACRO_FPC FPC_RC;
MACRO_FPC FPC_RC_CHOP;
MACRO_FPC FPC_RC_RD;
MACRO_FPC FPC_RC_RN;
MACRO_FPC FPC_RC_RU;
MACRO_FPC FPC_UE;
MACRO_FPC FPC_ZE;
MACRO_FPC FPC_ZM;
MACRO_FPE FPE_FLTDIV;
MACRO_FPE FPE_FLTINV;
MACRO_FPE FPE_FLTOVF;
MACRO_FPE FPE_FLTRES;
MACRO_FPE FPE_FLTSUB;
MACRO_FPE FPE_FLTUND;
MACRO_FPE FPE_INTDIV;
MACRO_FPE FPE_INTOVF;
MACRO_FPE FPE_NOOP;
MACRO_FPS FPS_BUSY;
MACRO_FPS FPS_C0;
MACRO_FPS FPS_C1;
MACRO_FPS FPS_C2;
MACRO_FPS FPS_C3;
MACRO_FPS FPS_DE;
MACRO_FPS FPS_ES;
MACRO_FPS FPS_IE;
MACRO_FPS FPS_OE;
MACRO_FPS FPS_PE;
MACRO_FPS FPS_SF;
MACRO_FPS FPS_TOS;
MACRO_FPS FPS_TOS_SHIFT;
MACRO_FPS FPS_UE;
MACRO_FPS FPS_ZE;
MACRO_FP_NO FP_287;
MACRO_FP_NO FP_387;
MACRO_FP FP_CHOP;
MACRO_FP_NO FP_FXSR;
MACRO_FP_NAN FP_ILOGB0;
MACRO_FP_NAN FP_ILOGBNAN;
MACRO_FP_NAN FP_INFINITE;
MACRO_FP_NAN FP_NAN;
MACRO_FP_NO FP_NO;
MACRO_FP_NAN FP_NORMAL;
MACRO_FP FP_PREC_24B;
MACRO_FP FP_PREC_53B;
MACRO_FP FP_PREC_64B;
MACRO_FP_SNAN FP_QNAN;
MACRO_FP FP_RND_DOWN;
MACRO_FP FP_RND_NEAR;
MACRO_FP FP_RND_UP;
MACRO_FP_SNAN FP_SNAN;
MACRO_FP_NO FP_SOFT;
MACRO_FP FP_STATE_BYTES;
MACRO_FP_NAN FP_SUBNORMAL;
MACRO_FP_NAN FP_SUPERNORMAL;
MACRO_FP_TAG FP_TAG_EMPTY;
MACRO_FP_TAG FP_TAG_SPEC;
MACRO_FP_TAG FP_TAG_VALID;
MACRO_FP_TAG FP_TAG_ZERO;
MACRO_FP_NAN FP_ZERO;
MACRO_FREAD FREAD;
MACRO_COMMIT FREE;
MACRO_PREALLOCATE FREEREMAINDER;
MACRO_FSHIFT FSCALE;
MACRO_NOCRED FSCRED;
MACRO_FSHIFT FSHIFT;
MACRO_FSOPT FSOPT_NOFOLLOW;
MACRO_FSOPT FSOPT_NOINMEMUPDATE;
MACRO_FSOPT FSOPT_PACK_INVAL_ATTRS;
MACRO_FSOPT FSOPT_REPORT_FULLSIZE;
MACRO_FST FST_EOF;
MACRO_FSUC FSUC_INITIALIZE;
MACRO_FSUC FSUC_MOUNT;
MACRO_FSUC FSUC_MOUNT_FORCE;
MACRO_FSUC FSUC_PROBE;
MACRO_FSUC FSUC_PROBEFORINIT;
MACRO_FSUC FSUC_REPAIR;
MACRO_FSUC FSUC_UNMOUNT;
MACRO_FSUR FSUR_INITRECOGNIZED;
MACRO_FSUR FSUR_INVAL;
MACRO_FSUR FSUR_IO_FAIL;
MACRO_FSUR FSUR_IO_SUCCESS;
MACRO_FSUR FSUR_IO_UNCLEAN;
MACRO_FSUR FSUR_LOADERR;
MACRO_FSUR FSUR_RECOGNIZED;
MACRO_FSUR FSUR_UNRECOGNIZED;
MACRO_FTS FTS_AGAIN;
MACRO_FTS FTS_BLOCK_COMPAR;
MACRO_FTS FTS_COMFOLLOW;
MACRO_FTS FTS_COMFOLLOWDIR;
MACRO_FTS FTS_D;
MACRO_FTS FTS_DC;
MACRO_FTS FTS_DEFAULT;
MACRO_FTS FTS_DNR;
MACRO_FTS FTS_DONTCHDIR;
MACRO_FTS FTS_DOT;
MACRO_FTS FTS_DP;
MACRO_FTS FTS_ERR;
MACRO_FTS FTS_F;
MACRO_FTS FTS_FOLLOW;
MACRO_FTS FTS_INIT;
MACRO_FTS FTS_ISW;
MACRO_FTS FTS_LOGICAL;
MACRO_FTS FTS_NAMEONLY;
MACRO_FTS FTS_NOCHDIR;
MACRO_FTS FTS_NOINSTR;
MACRO_FTS FTS_NOSTAT;
MACRO_FTS FTS_NS;
MACRO_FTS FTS_NSOK;
MACRO_FTS FTS_OPTIONMASK;
MACRO_FTS FTS_PHYSICAL;
MACRO_FTS FTS_ROOTLEVEL;
MACRO_FTS FTS_ROOTPARENTLEVEL;
MACRO_FTS FTS_SEEDOT;
MACRO_FTS FTS_SKIP;
MACRO_FTS FTS_SL;
MACRO_FTS FTS_SLNONE;
MACRO_FTS FTS_STOP;
MACRO_FTS FTS_SYMFOLLOW;
MACRO_FTS FTS_W;
MACRO_FTS FTS_WHITEOUT;
MACRO_FTS FTS_XDEV;
MACRO_FTW FTW_CHDIR;
MACRO_FTW FTW_D;
MACRO_FTW FTW_DEPTH;
MACRO_FTW FTW_DNR;
MACRO_FTW FTW_DP;
MACRO_FTW FTW_F;
MACRO_FTW FTW_MOUNT;
MACRO_FTW FTW_NS;
MACRO_FTW FTW_PHYS;
MACRO_FTW FTW_SL;
MACRO_FTW FTW_SLN;
MACRO_FULLY FULLY_QUALIFIED_INSTANCE;
MACRO_FREAD FWRITE;
MACRO_F_DUPFD F_ADDFILESIGS;
MACRO_F_DUPFD F_ADDSIGS;
MACRO_F_ALLOCATECONTIG F_ALLOCATEALL;
MACRO_F_ALLOCATECONTIG F_ALLOCATECONTIG;
MACRO_F_DUPFD F_CHKCLEAN;
MACRO_F_DUPFD F_DUPFD;
MACRO_CLOEXEC F_DUPFD_CLOEXEC;
MACRO_F_DUPFD F_FLUSH_DATA;
MACRO_F_DUPFD F_FREEZE_FS;
MACRO_F_DUPFD F_FULLFSYNC;
MACRO_F_DUPFD F_GETFD;
MACRO_F_DUPFD F_GETFL;
MACRO_F_DUPFD F_GETLK;
MACRO_F_DUPFD F_GETLKPID;
MACRO_F_DUPFD F_GETNOSIGPIPE;
MACRO_F_DUPFD F_GETOWN;
MACRO_F_DUPFD F_GETPATH;
MACRO_F_DUPFD F_GETPATH_MTMINFO;
MACRO_F_DUPFD F_GETPROTECTIONCLASS;
MACRO_F_DUPFD F_GLOBAL_NOCACHE;
MACRO_F_NOT F_LEN_MASK;
MACRO_F F_LOCK;
MACRO_F_DUPFD F_LOG2PHYS;
MACRO_F_DUPFD F_LOG2PHYS_EXT;
MACRO_F_DUPFD F_MARKDEPENDENCY;
MACRO_F_DUPFD F_NOCACHE;
MACRO_F_DUPFD F_NODIRECT;
MACRO_F_NOT F_NOT;
MACRO_OK F_OK;
MACRO_F_NOT F_OR;
MACRO_F_DUPFD F_PATHPKG_CHECK;
MACRO_F_ALLOCATECONTIG F_PEOFPOSMODE;
MACRO_F_DUPFD F_PREALLOCATE;
MACRO_F_DUPFD F_RDADVISE;
MACRO_F_DUPFD F_RDAHEAD;
MACRO_F_RDLCK F_RDLCK;
MACRO_F_DUPFD F_READBOOTSTRAP;
MACRO_F_DUPFD F_SETBACKINGSTORE;
MACRO_F_DUPFD F_SETFD;
MACRO_F_DUPFD F_SETFL;
MACRO_F_DUPFD F_SETLK;
MACRO_F_DUPFD F_SETLKW;
MACRO_F_DUPFD F_SETNOSIGPIPE;
MACRO_F_DUPFD F_SETOWN;
MACRO_F_DUPFD F_SETPROTECTIONCLASS;
MACRO_F_DUPFD F_SETSIZE;
MACRO_F F_TEST;
MACRO_F_DUPFD F_THAW_FS;
MACRO_F F_TLOCK;
MACRO_F F_ULOCK;
MACRO_F_RDLCK F_UNLCK;
MACRO_F_ALLOCATECONTIG F_VOLPOSMODE;
MACRO_F_DUPFD F_WRITEBOOTSTRAP;
MACRO_F_RDLCK F_WRLCK;
MACRO_GA GA;
accept_stat GARBAGE_ARGS;
MACRO_EXPIRE GARBAGE_TIME;
MACRO_GAUGE GAUGE;
reloc_type_generic GENERIC_RELOC_LOCAL_SECTDIFF;
reloc_type_generic GENERIC_RELOC_PAIR;
reloc_type_generic GENERIC_RELOC_PB_LA_PTR;
reloc_type_generic GENERIC_RELOC_SECTDIFF;
reloc_type_generic GENERIC_RELOC_TLV;
reloc_type_generic GENERIC_RELOC_VANILLA;
MACRO_GEN GEN_DIRNAME;
MACRO_GEN GEN_DNS;
MACRO_GEN GEN_EDIPARTY;
MACRO_GEN GEN_EMAIL;
MACRO_GEN GEN_IPADD;
MACRO_GEN GEN_OTHERNAME;
MACRO_GEN GEN_RID;
MACRO_GEN GEN_URI;
MACRO_GEN GEN_X400;
MACRO_GETALL GETALL;
MACRO_GETNCNT GETNCNT;
MACRO_REQ_MSG GETNEXT_REQ_MSG;
MACRO_GETNCNT GETPID;
MACRO_GETVAL GETVAL;
MACRO_GETZCNT GETZCNT;
MACRO_REQ_MSG GET_REQ_MSG;
MACRO_REQ_MSG GET_RSP_MSG;
MACRO_GID GID_BIN;
MACRO_GID GID_DIALER;
MACRO_GID GID_GAMES;
MACRO_GID GID_KMEM;
MACRO_ARG GID_MAX;
MACRO_GID GID_OPERATOR;
MACRO_GID GID_TTY;
MACRO_GID GID_WHEEL;
MACRO_GLOB_MAXPATH GLOB_ABEND;
MACRO_GLOB GLOB_ABORTED;
MACRO_GLOB GLOB_ALTDIRFUNC;
MACRO_GLOB GLOB_APPEND;
MACRO_GLOB GLOB_BRACE;
MACRO_GLOB GLOB_DOOFFS;
MACRO_GLOB GLOB_ERR;
MACRO_GLOB GLOB_LIMIT;
MACRO_GLOB GLOB_MAGCHAR;
MACRO_GLOB GLOB_MARK;
MACRO_GLOB_MAXPATH GLOB_MAXPATH;
MACRO_GLOB GLOB_NOCHECK;
MACRO_GLOB GLOB_NOESCAPE;
MACRO_GLOB GLOB_NOMAGIC;
MACRO_GLOB GLOB_NOMATCH;
MACRO_GLOB GLOB_NOSORT;
MACRO_GLOB GLOB_NOSPACE;
MACRO_GLOB GLOB_NOSYS;
MACRO_GLOB GLOB_QUOTE;
MACRO_GLOB GLOB_TILDE;
MACRO_GMONTYPE GMONTYPE_ARCS_ORDERS;
MACRO_GMONTYPE GMONTYPE_DYLD2_STATE;
MACRO_GMONTYPE GMONTYPE_DYLD_STATE;
MACRO_GMONTYPE GMONTYPE_RAWARCS;
MACRO_GMONTYPE GMONTYPE_SAMPLES;
MACRO_GMONVERSION GMONVERSION;
MACRO_GMON_MAGIC GMON_MAGIC;
MACRO_GMON_MAGIC GMON_MAGIC_64;
MACRO_GMON GMON_PROF_BUSY;
MACRO_GMON GMON_PROF_ERROR;
MACRO_GMON GMON_PROF_OFF;
MACRO_GMON GMON_PROF_ON;
MACRO_GPROF GPROF_COUNT;
MACRO_GPROF GPROF_FROMS;
MACRO_GPROF GPROF_GMONPARAM;
MACRO_GPROF GPROF_STATE;
MACRO_GPROF GPROF_TOS;
MACRO_USRQUOTA GRPQUOTA;
MACRO_GSS GSS_C_ACCEPT;
MACRO_GSS GSS_C_AF_APPLETALK;
MACRO_GSS GSS_C_AF_BSC;
MACRO_GSS GSS_C_AF_CCITT;
MACRO_GSS GSS_C_AF_CHAOS;
MACRO_GSS GSS_C_AF_DATAKIT;
MACRO_GSS GSS_C_AF_DECnet;
MACRO_GSS GSS_C_AF_DLI;
MACRO_GSS GSS_C_AF_DSS;
MACRO_GSS GSS_C_AF_ECMA;
MACRO_GSS GSS_C_AF_HYLINK;
MACRO_GSS GSS_C_AF_IMPLINK;
MACRO_GSS GSS_C_AF_INET;
MACRO_GSS GSS_C_AF_LAT;
MACRO_GSS GSS_C_AF_LOCAL;
MACRO_GSS GSS_C_AF_NBS;
MACRO_GSS GSS_C_AF_NS;
MACRO_GSS GSS_C_AF_NULLADDR;
MACRO_GSS GSS_C_AF_OSI;
MACRO_GSS GSS_C_AF_PUP;
MACRO_GSS GSS_C_AF_SNA;
MACRO_GSS GSS_C_AF_UNSPEC;
MACRO_GSS GSS_C_AF_X25;
MACRO_GSS GSS_C_ANON_FLAG;
MACRO_GSS GSS_C_BOTH;
MACRO_GSS GSS_C_CALLING_ERROR_MASK;
MACRO_GSS GSS_C_CALLING_ERROR_OFFSET;
MACRO_GSS GSS_C_CONF_FLAG;
MACRO_GSS GSS_C_CRED_NO_UI;
MACRO_GSS GSS_C_DELEG_FLAG;
MACRO_GSS GSS_C_DELEG_POLICY_FLAG;
MACRO_GSS GSS_C_GSS_CODE;
MACRO_GSS GSS_C_INDEFINITE;
MACRO_GSS GSS_C_INITIATE;
MACRO_GSS GSS_C_INTEG_FLAG;
MACRO_GSS GSS_C_MECH_CODE;
MACRO_GSS GSS_C_MUTUAL_FLAG;
MACRO_GSS GSS_C_NO_BUFFER;
MACRO_GSS GSS_C_NO_CHANNEL_BINDINGS;
MACRO_GSS GSS_C_NO_CONTEXT;
MACRO_GSS GSS_C_NO_CREDENTIAL;
MACRO_GSS GSS_C_NO_NAME;
MACRO_GSS GSS_C_NO_OID;
MACRO_GSS GSS_C_NO_OID_SET;
MACRO_GSS GSS_C_NO_UI_FLAG;
MACRO_GSS GSS_C_NULL_OID;
MACRO_GSS GSS_C_NULL_OID_SET;
MACRO_GSS GSS_C_OPTION_MASK;
MACRO_GSS GSS_C_PROT_READY_FLAG;
MACRO_GSS GSS_C_QOP_DEFAULT;
MACRO_GSS GSS_C_REPLAY_FLAG;
MACRO_GSS GSS_C_ROUTINE_ERROR_MASK;
MACRO_GSS GSS_C_ROUTINE_ERROR_OFFSET;
MACRO_GSS GSS_C_SEQUENCE_FLAG;
MACRO_GSS GSS_C_SUPPLEMENTARY_MASK;
MACRO_GSS GSS_C_SUPPLEMENTARY_OFFSET;
MACRO_GSS GSS_C_TRANS_FLAG;
MACRO_GSS GSS_KRB5_UI_ALLOW;
MACRO_GSS GSS_KRB5_UI_DENY;
MACRO_GSS GSS_KRB5_UI_PROBE;
MACRO_GSS GSS_S_BAD_BINDINGS;
MACRO_GSS GSS_S_BAD_MECH;
MACRO_GSS GSS_S_BAD_NAME;
MACRO_GSS GSS_S_BAD_NAMETYPE;
MACRO_GSS GSS_S_BAD_QOP;
MACRO_GSS GSS_S_BAD_SIG;
MACRO_GSS GSS_S_BAD_STATUS;
MACRO_GSS GSS_S_CALL_BAD_STRUCTURE;
MACRO_GSS GSS_S_CALL_INACCESSIBLE_READ;
MACRO_GSS GSS_S_CALL_INACCESSIBLE_WRITE;
MACRO_GSS GSS_S_COMPLETE;
MACRO_GSS GSS_S_CONTEXT_EXPIRED;
MACRO_GSS GSS_S_CONTINUE_NEEDED;
MACRO_GSS GSS_S_CREDENTIALS_EXPIRED;
MACRO_GSS GSS_S_CRED_UNAVAIL;
MACRO_GSS GSS_S_DEFECTIVE_CREDENTIAL;
MACRO_GSS GSS_S_DEFECTIVE_TOKEN;
MACRO_GSS GSS_S_DUPLICATE_ELEMENT;
MACRO_GSS GSS_S_DUPLICATE_TOKEN;
MACRO_GSS GSS_S_FAILURE;
MACRO_GSS GSS_S_GAP_TOKEN;
MACRO_GSS GSS_S_NAME_NOT_MN;
MACRO_GSS GSS_S_NO_CONTEXT;
MACRO_GSS GSS_S_NO_CRED;
MACRO_GSS GSS_S_OLD_TOKEN;
MACRO_GSS GSS_S_UNAUTHORIZED;
MACRO_GSS GSS_S_UNAVAILABLE;
MACRO_GSS GSS_S_UNSEQ_TOKEN;
MACRO_Gstack Gstack;
MACRO_HANDLER HANDLER_CAN_BABY_STEP;
MACRO_HANDLER HANDLER_CAN_DEFAULT;
MACRO_HANDLER HANDLER_CAN_GETANDGETNEXT;
MACRO_HANDLER HANDLER_CAN_GETBULK;
MACRO_HANDLER HANDLER_CAN_NOT_CREATE;
MACRO_HANDLER HANDLER_CAN_RONLY;
MACRO_HANDLER HANDLER_CAN_RWRITE;
MACRO_HANDLER HANDLER_CAN_SET;
MACRO_HANDLER HANDLER_CAN_SET_ONLY;
MACRO_HANDLER HANDLER_CAN_STASH;
MACRO_HASHFRACTION HASHFRACTION;
MACRO_HASHMAGIC HASHMAGIC;
MACRO_HASHSIZE HASHSIZE;
MACRO_HASHVERSION HASHVERSION;
MACRO_HASH HASH_SZ;
MACRO_HAS_FUTIME HAS_FUTIME;
MACRO_HAS HAS_VSNPRINTF;
MACRO_HAVE_AES_0 HAVE_AES;
MACRO_HAVE_AES HAVE_AES_CFB128_ENCRYPT;
MACRO_HAVE HAVE_ALLOCA;
MACRO_HAVE HAVE_ALLOCA_H;
MACRO_HAVE_AES HAVE_ARPA_INET_H;
MACRO_HAVE_AES HAVE_CGETNEXT;
MACRO_HAVE_AES HAVE_CHOWN;
MACRO_HAVE_AES HAVE_CLOSEDIR;
MACRO_HAVE_AES HAVE_DIRENT_H;
MACRO_HAVE_AES HAVE_DLFCN_H;
MACRO_HAVE_AES HAVE_DLOPEN;
MACRO_HAVE_AES HAVE_ERR_H;
MACRO_HAVE_AES HAVE_EXECV;
MACRO_HAVE_AES HAVE_FCNTL_H;
MACRO_HAVE_AES HAVE_FORK;
MACRO_HAVE_AES HAVE_GAI_STRERROR;
MACRO_HAVE_AES HAVE_GETADDRINFO;
MACRO_HAVE_AES HAVE_GETDTABLESIZE;
MACRO_HAVE_AES HAVE_GETFSSTAT;
MACRO_HAVE_AES HAVE_GETGRNAM;
MACRO_HAVE_AES HAVE_GETHOSTBYNAME;
MACRO_HAVE_AES HAVE_GETHOSTNAME;
MACRO_HAVE_AES HAVE_GETIPNODEBYNAME;
MACRO_HAVE_AES HAVE_GETLOADAVG;
MACRO_HAVE_AES HAVE_GETOPT;
MACRO_HAVE_AES HAVE_GETOPT_H;
MACRO_HAVE_AES HAVE_GETPAGESIZE;
MACRO_HAVE_AES HAVE_GETPID;
MACRO_HAVE_AES HAVE_GETPWNAM;
MACRO_HAVE_AES HAVE_GETTIMEOFDAY;
MACRO_HAVE_AES HAVE_GRP_H;
MACRO_HAVE_AES HAVE_IF_FREENAMEINDEX;
MACRO_HAVE_AES HAVE_IF_NAMEINDEX;
MACRO_HAVE_AES HAVE_IF_NAMETOINDEX;
MACRO_HAVE_AES HAVE_INET_NTOP;
MACRO_HAVE_AES HAVE_INET_PTON;
MACRO_HAVE_AES HAVE_INITGROUPS;
MACRO_HAVE_AES HAVE_INTMAX_T;
MACRO_HAVE_AES HAVE_INTPTR_T;
MACRO_HAVE_AES HAVE_INTTYPES_H;
MACRO_HAVE_AES HAVE_IN_ADDR_T;
MACRO_HAVE_AES HAVE_LIBCRYPTO;
MACRO_HAVE_AES HAVE_LIMITS_H;
MACRO_HAVE_AES HAVE_LOCALE_H;
MACRO_HAVE_AES HAVE_LOCALTIME_R;
MACRO_DOUBLE HAVE_LONG_DOUBLE;
MACRO_HAVE_AES HAVE_LONG_LONG_INT;
MACRO_HAVE_AES HAVE_LPSTAT;
MACRO_HAVE_AES HAVE_LRAND48;
MACRO_HAVE_AES HAVE_MACHINE_PARAM_H;
MACRO_HAVE_AES HAVE_MACHINE_TYPES_H;
MACRO_HAVE HAVE_MEMCPY;
MACRO_HAVE_AES HAVE_MEMORY_H;
MACRO_HAVE_AES HAVE_MKSTEMP;
MACRO_HAVE_AES HAVE_MKTIME;
MACRO_HAVE HAVE_MMAP_ANON;
MACRO_HAVE HAVE_MMAP_FILE;
MACRO_HAVE_AES HAVE_NETDB_H;
MACRO_HAVE_AES HAVE_NETINET_ICMP6_H;
MACRO_HAVE_AES HAVE_NETINET_ICMP_VAR_H;
MACRO_HAVE_AES HAVE_NETINET_IF_ETHER_H;
MACRO_HAVE_AES HAVE_NETINET_IN_H;
MACRO_HAVE_AES HAVE_NETINET_IN_PCB_H;
MACRO_HAVE_AES HAVE_NETINET_IN_SYSTM_H;
MACRO_HAVE_AES HAVE_NETINET_IN_VAR_H;
MACRO_HAVE_AES HAVE_NETINET_IP6_H;
MACRO_HAVE_AES HAVE_NETINET_IP_H;
MACRO_HAVE_AES HAVE_NETINET_IP_ICMP_H;
MACRO_HAVE_AES HAVE_NETINET_IP_VAR_H;
MACRO_HAVE_AES HAVE_NETINET_TCPIP_H;
MACRO_HAVE_AES HAVE_NETINET_TCP_FSM_H;
MACRO_HAVE_AES HAVE_NETINET_TCP_H;
MACRO_HAVE_AES HAVE_NETINET_TCP_TIMER_H;
MACRO_HAVE_AES HAVE_NETINET_TCP_VAR_H;
MACRO_HAVE_AES HAVE_NETINET_UDP_H;
MACRO_HAVE_AES HAVE_NETINET_UDP_VAR_H;
MACRO_HAVE_AES HAVE_NET_IF_ARP_H;
MACRO_HAVE_AES HAVE_NET_IF_DL_H;
MACRO_HAVE_AES HAVE_NET_IF_H;
MACRO_HAVE_AES HAVE_NET_IF_MIB_H;
MACRO_HAVE_AES HAVE_NET_IF_TYPES_H;
MACRO_HAVE_AES HAVE_NET_IF_VAR_H;
MACRO_HAVE_AES HAVE_NET_ROUTE_H;
MACRO_HAVE_AES HAVE_NFDS_T;
MACRO_HAVE_AES HAVE_NLIST_H;
MACRO_HAVE_AES HAVE_OPENDIR;
MACRO_HAVE_AES HAVE_OPENSSL_AES_H;
MACRO_HAVE_AES HAVE_OPENSSL_DES_H;
MACRO_HAVE_AES HAVE_OPENSSL_DH_H;
MACRO_HAVE_AES HAVE_OPENSSL_EVP_H;
MACRO_HAVE_AES HAVE_OPENSSL_HMAC_H;
MACRO_HAVE_AES HAVE_POLL;
MACRO_HAVE_AES HAVE_PTHREAD_H;
MACRO_HAVE_AES HAVE_PWD_H;
MACRO_HAVE_AES HAVE_RAND;
MACRO_HAVE_AES HAVE_RANDOM;
MACRO_HAVE_AES HAVE_READDIR;
MACRO_HAVE_AES HAVE_REGCOMP;
MACRO_HAVE_AES HAVE_REGEX_H;
MACRO_HAVE_AES HAVE_SEARCH_H;
MACRO_HAVE_AES HAVE_SELECT;
MACRO_HAVE_AES HAVE_SETENV;
MACRO_HAVE_AES HAVE_SETGID;
MACRO_HAVE_AES HAVE_SETGROUPS;
MACRO_HAVE_AES HAVE_SETITIMER;
MACRO_HAVE_AES HAVE_SETLOCALE;
MACRO_HAVE_AES HAVE_SETSID;
MACRO_HAVE_AES HAVE_SETUID;
MACRO_HAVE_AES HAVE_SGTTY_H;
MACRO_HAVE_AES HAVE_SIGACTION;
MACRO_HAVE_AES HAVE_SIGBLOCK;
MACRO_HAVE_AES HAVE_SIGHOLD;
MACRO_HAVE_AES HAVE_SIGHUP;
MACRO_HAVE_AES HAVE_SIGNAL;
MACRO_HAVE_AES HAVE_SIGPROCMASK;
MACRO_HAVE_AES HAVE_SIGSET;
MACRO_HAVE_AES HAVE_SNPRINTF;
MACRO_HAVE_AES HAVE_SOCKET;
MACRO_HAVE_AES HAVE_SOCKLEN_T;
MACRO_HAVE_AES HAVE_SSIZE_T;
MACRO_HAVE_AES HAVE_STATFS;
MACRO_HAVE_AES HAVE_STATVFS;
MACRO_HAVE_AES HAVE_STDINT_H;
MACRO_HAVE_AES HAVE_STDLIB_H;
MACRO_HAVE_AES HAVE_STRCASESTR;
MACRO_HAVE_AES HAVE_STRDUP;
MACRO_HAVE_AES HAVE_STRERROR;
MACRO_HAVE_AES HAVE_STRINGS_H;
MACRO_HAVE_AES HAVE_STRING_H;
MACRO_HAVE_AES HAVE_STRLCPY;
MACRO_HAVE_AES HAVE_STRNCASECMP;
MACRO_HAVE_AES HAVE_STRTOK_R;
MACRO_HAVE_AES HAVE_STRTOL;
MACRO_HAVE_AES HAVE_STRTOUL;
MACRO_HAVE_AES HAVE_STRTOULL;
MACRO_HAVE_AES HAVE_STRUCT_DIRENT_D_TYPE;
MACRO_HAVE_AES HAVE_STRUCT_IPSTAT_IPS_CANTFORWARD;
MACRO_HAVE_AES HAVE_STRUCT_IPSTAT_IPS_CANTFRAG;
MACRO_HAVE_AES HAVE_STRUCT_IPSTAT_IPS_DELIVERED;
MACRO_HAVE_AES HAVE_STRUCT_IPSTAT_IPS_FRAGDROPPED;
MACRO_HAVE_AES HAVE_STRUCT_IPSTAT_IPS_FRAGMENTED;
MACRO_HAVE_AES HAVE_STRUCT_IPSTAT_IPS_FRAGTIMEOUT;
MACRO_HAVE_AES HAVE_STRUCT_IPSTAT_IPS_LOCALOUT;
MACRO_HAVE_AES HAVE_STRUCT_IPSTAT_IPS_NOPROTO;
MACRO_HAVE_AES HAVE_STRUCT_IPSTAT_IPS_NOROUTE;
MACRO_HAVE_AES HAVE_STRUCT_IPSTAT_IPS_ODROPPED;
MACRO_HAVE_AES HAVE_STRUCT_IPSTAT_IPS_OFRAGMENTS;
MACRO_HAVE_AES HAVE_STRUCT_IPSTAT_IPS_REASSEMBLED;
MACRO_HAVE_AES HAVE_STRUCT_MBSTAT_M_CLFREE;
MACRO_HAVE_AES HAVE_STRUCT_MBSTAT_M_CLUSTERS;
MACRO_HAVE_AES HAVE_STRUCT_MBSTAT_M_MBUFS;
MACRO_HAVE_AES HAVE_STRUCT_NLIST_N_VALUE;
MACRO_HAVE_AES HAVE_STRUCT_SIGACTION_SA_SIGACTION;
MACRO_HAVE_AES HAVE_STRUCT_SOCKADDR_IN6_SIN6_SCOPE_ID;
MACRO_HAVE_AES HAVE_STRUCT_SOCKADDR_SA_LEN;
MACRO_HAVE_AES HAVE_STRUCT_SOCKADDR_STORAGE_SS_FAMILY;
MACRO_HAVE_AES HAVE_STRUCT_STATFS_F_FFREE;
MACRO_HAVE_AES HAVE_STRUCT_STATFS_F_FILES;
MACRO_HAVE_AES HAVE_STRUCT_STATFS_F_FLAGS;
MACRO_HAVE_AES HAVE_STRUCT_STATVFS_F_FILES;
MACRO_HAVE_AES HAVE_STRUCT_STATVFS_F_FRSIZE;
MACRO_HAVE_AES HAVE_STRUCT_TIMEZONE_TZ_DSTTIME;
MACRO_HAVE_AES HAVE_STRUCT_TM_TM_GMTOFF;
MACRO_HAVE_AES HAVE_STRUCT_UDPSTAT_UDPS_FULLSOCK;
MACRO_HAVE_AES HAVE_STRUCT_UDPSTAT_UDPS_NOPORT;
MACRO_HAVE_AES HAVE_STRUCT_UDPSTAT_UDPS_NOPORTBCAST;
MACRO_HAVE_AES HAVE_STRUCT_UDPSTAT_UDPS_OPACKETS;
MACRO_HAVE_AES HAVE_SYSCONF;
MACRO_HAVE_AES HAVE_SYSLOG_H;
MACRO_HAVE_AES HAVE_SYSTEM;
MACRO_HAVE_AES HAVE_SYS_CDEFS_H;
MACRO_HAVE_AES HAVE_SYS_CONF_H;
MACRO_HAVE_AES HAVE_SYS_DKSTAT_H;
MACRO_HAVE_AES HAVE_SYS_FILE_H;
MACRO_HAVE_AES HAVE_SYS_FILIO_H;
MACRO_HAVE_AES HAVE_SYS_IOCTL_H;
MACRO_HAVE_AES HAVE_SYS_MBUF_H;
MACRO_HAVE_AES HAVE_SYS_MOUNT_H;
MACRO_HAVE_AES HAVE_SYS_PARAM_H;
MACRO_HAVE_AES HAVE_SYS_POLL_H;
MACRO_HAVE_AES HAVE_SYS_PROTOSW_H;
MACRO_HAVE_AES HAVE_SYS_QUEUE_H;
MACRO_HAVE_AES HAVE_SYS_SELECT_H;
MACRO_HAVE_AES HAVE_SYS_SOCKETVAR_H;
MACRO_HAVE_AES HAVE_SYS_SOCKET_H;
MACRO_HAVE_AES HAVE_SYS_SOCKIO_H;
MACRO_HAVE_AES HAVE_SYS_STATVFS_H;
MACRO_HAVE_AES HAVE_SYS_STAT_H;
MACRO_HAVE_AES HAVE_SYS_SYSCTL_H;
MACRO_HAVE_AES HAVE_SYS_TIMEB_H;
MACRO_HAVE_AES HAVE_SYS_TIMES_H;
MACRO_HAVE_AES HAVE_SYS_TIME_H;
MACRO_HAVE_AES HAVE_SYS_TYPES_H;
MACRO_HAVE_AES HAVE_SYS_UIO_H;
MACRO_HAVE_AES HAVE_SYS_UN_H;
MACRO_HAVE_AES HAVE_SYS_USER_H;
MACRO_HAVE_AES HAVE_SYS_UTSNAME_H;
MACRO_HAVE_AES HAVE_SYS_VMMETER_H;
MACRO_HAVE_AES HAVE_SYS_VMPARAM_H;
MACRO_HAVE_AES HAVE_SYS_VM_H;
MACRO_HAVE_AES HAVE_SYS_VNODE_H;
MACRO_HAVE_AES HAVE_SYS_WAIT_H;
MACRO_HAVE_AES HAVE_TCGETATTR;
MACRO_HAVE_AES HAVE_TIMES;
MACRO_HAVE_AES HAVE_UINTMAX_T;
MACRO_HAVE_AES HAVE_UINTPTR_T;
MACRO_HAVE_AES HAVE_UNAME;
MACRO_HAVE_AES HAVE_UNISTD_H;
MACRO_HAVE_AES HAVE_UNSIGNED_LONG_LONG_INT;
MACRO_HAVE_AES HAVE_USLEEP;
MACRO_HAVE_AES HAVE_UTMPX_H;
MACRO_HAVE_AES HAVE_VSNPRINTF;
MACRO_HFIXEDSZ HFIXEDSZ;
MACRO_HFSFSMNT HFSFSMNT_EXTENDED_ARGS;
MACRO_HFSFSMNT HFSFSMNT_NOXONFILES;
MACRO_HFSFSMNT HFSFSMNT_WRAPPER;
MACRO_HFS HFS_DISABLE_JOURNALING;
MACRO_HFS HFS_ENABLE_JOURNALING;
MACRO_HFS HFS_ENABLE_RESIZE_DEBUG;
MACRO_HFS HFS_ENCODINGBIAS;
MACRO_HFS HFS_ENCODINGHINT;
MACRO_HFS HFS_EXTEND_FS;
MACRO_HFS HFS_GET_JOURNAL_INFO;
MACRO_HFS HFS_REPLAY_JOURNAL;
MACRO_HFS HFS_SET_PKG_EXTENSIONS;
MACRO_HISTFRACTION HISTFRACTION;
MACRO_HMAC HMAC_MAX_MD_CBLOCK;
MACRO_HMAC_MD5 HMAC_MD5_H;
MACRO_HMAC_MD5 HMAC_MD5_SIZE;
MACRO_HOPCNT HOPCNT_INFINITY;
MACRO_HOST_BASIC HOST_AMFID_PORT;
MACRO_HOST_BASIC HOST_AUDIT_CONTROL_PORT;
MACRO_HOST_BASIC HOST_AUTOMOUNTD_PORT;
MACRO_HOST_BASIC HOST_BASIC_INFO;
MACRO_HOST_BASIC HOST_CALENDAR_CHANGED_REPLYID;
MACRO_HOST_BASIC HOST_CHUD_PORT;
MACRO_HOST_BASIC HOST_CPU_LOAD_INFO;
MACRO_HOST_BASIC HOST_DYNAMIC_PAGER_PORT;
MACRO_HOST_BASIC HOST_EXTMOD_INFO64;
MACRO_HOST HOST_INFO_MAX;
MACRO_HOST_BASIC HOST_IO_MASTER_PORT;
MACRO_HOST_BASIC HOST_KEXTD_PORT;
MACRO_HOST_BASIC HOST_LOAD_INFO;
MACRO_HOST_BASIC HOST_LOCAL_NODE;
MACRO_HOST_BASIC HOST_LOCKD_PORT;
MACRO_HOST_BASIC HOST_MACH_MSG_TRAP;
MACRO_HOST_BASIC HOST_MAX_SPECIAL_KERNEL_PORT;
MACRO_HOST_BASIC HOST_MAX_SPECIAL_PORT;
MACRO_HOST_BASIC HOST_NOTIFY_CALENDAR_CHANGE;
MACRO_HOST_BASIC HOST_NOTIFY_TYPE_MAX;
MACRO_HOST_NOT HOST_NOT_FOUND;
MACRO_THREAD_NULL HOST_NULL;
MACRO_HOST_BASIC HOST_PORT;
MACRO_HOST_BASIC HOST_PRIORITY_INFO;
MACRO_THREAD_NULL HOST_PRIV_NULL;
MACRO_HOST_BASIC HOST_PRIV_PORT;
MACRO_HOST_REBOOT HOST_REBOOT_DEBUGGER;
MACRO_HOST_REBOOT HOST_REBOOT_HALT;
MACRO_HOST_REBOOT HOST_REBOOT_UPSDELAY;
MACRO_HOST_BASIC HOST_RESOURCE_SIZES;
MACRO_HOST_BASIC HOST_SCHED_INFO;
MACRO_HOST_BASIC HOST_SEATBELT_PORT;
MACRO_THREAD_NULL HOST_SECURITY_NULL;
MACRO_HOST_BASIC HOST_SECURITY_PORT;
MACRO_HOST_BASIC HOST_SEMAPHORE_TRAPS;
MACRO_HOST_BASIC HOST_UNFREED_PORT;
MACRO_HOST_BASIC HOST_USER_NOTIFICATION_PORT;
MACRO_HOST_BASIC HOST_VM_INFO;
MACRO_HOST_BASIC HOST_VM_INFO64;
MACRO_HOURSPERDAY HOURSPERDAY;
MACRO_HOURS HOURS_PER_DAY;
$F022A16E3DDDADD4F8D0A3446DF412CC HTML_DEPRECATED;
$F022A16E3DDDADD4F8D0A3446DF412CC HTML_INVALID;
$F022A16E3DDDADD4F8D0A3446DF412CC HTML_NA;
$44336BB59F93F7B3E282D9E42617278E HTML_PARSE_COMPACT;
$44336BB59F93F7B3E282D9E42617278E HTML_PARSE_NOBLANKS;
$44336BB59F93F7B3E282D9E42617278E HTML_PARSE_NOERROR;
$44336BB59F93F7B3E282D9E42617278E HTML_PARSE_NONET;
$44336BB59F93F7B3E282D9E42617278E HTML_PARSE_NOWARNING;
$44336BB59F93F7B3E282D9E42617278E HTML_PARSE_PEDANTIC;
$44336BB59F93F7B3E282D9E42617278E HTML_PARSE_RECOVER;
$F022A16E3DDDADD4F8D0A3446DF412CC HTML_REQUIRED;
$F022A16E3DDDADD4F8D0A3446DF412CC HTML_VALID;
MACRO_HTTPPOST HTTPPOST_BUFFER;
MACRO_HTTPPOST HTTPPOST_CALLBACK;
MACRO_HTTPPOST HTTPPOST_FILENAME;
MACRO_HTTPPOST HTTPPOST_PTRBUFFER;
MACRO_HTTPPOST HTTPPOST_PTRCONTENTS;
MACRO_HTTPPOST HTTPPOST_PTRNAME;
MACRO_HTTPPOST HTTPPOST_READFILE;
http_version_e HTTP_0_9;
http_version_e HTTP_1_0;
http_version_e HTTP_1_1;
http_status_e HTTP_ACCEPTED;
http_status_e HTTP_AUTHORIZATION_CANCELED;
http_auth_e HTTP_AUTH_BASIC;
http_auth_e HTTP_AUTH_MD5;
http_auth_e HTTP_AUTH_MD5_INT;
http_auth_e HTTP_AUTH_MD5_SESS;
http_auth_e HTTP_AUTH_MD5_SESS_INT;
http_auth_e HTTP_AUTH_NEGOTIATE;
http_auth_e HTTP_AUTH_NONE;
http_status_e HTTP_BAD_GATEWAY;
http_status_e HTTP_BAD_REQUEST;
http_state_e HTTP_CLOSE;
http_status_e HTTP_CONFLICT;
http_status_e HTTP_CONTINUE;
http_status_e HTTP_CREATED;
http_state_e HTTP_DELETE;
http_encoding_e HTTP_ENCODE_CHUNKED;
http_encoding_e HTTP_ENCODE_FIELDS;
http_encoding_e HTTP_ENCODE_LENGTH;
http_encryption_e HTTP_ENCRYPT_ALWAYS;
http_encryption_e HTTP_ENCRYPT_IF_REQUESTED;
http_encryption_e HTTP_ENCRYPT_NEVER;
http_encryption_e HTTP_ENCRYPT_REQUIRED;
http_status_e HTTP_ERROR;
http_status_e HTTP_EXPECTATION_FAILED;
http_field_e HTTP_FIELD_ACCEPT_LANGUAGE;
http_field_e HTTP_FIELD_ACCEPT_RANGES;
http_field_e HTTP_FIELD_AUTHORIZATION;
http_field_e HTTP_FIELD_CONNECTION;
http_field_e HTTP_FIELD_CONTENT_ENCODING;
http_field_e HTTP_FIELD_CONTENT_LANGUAGE;
http_field_e HTTP_FIELD_CONTENT_LENGTH;
http_field_e HTTP_FIELD_CONTENT_LOCATION;
http_field_e HTTP_FIELD_CONTENT_MD5;
http_field_e HTTP_FIELD_CONTENT_RANGE;
http_field_e HTTP_FIELD_CONTENT_TYPE;
http_field_e HTTP_FIELD_CONTENT_VERSION;
http_field_e HTTP_FIELD_DATE;
http_field_e HTTP_FIELD_HOST;
http_field_e HTTP_FIELD_IF_MODIFIED_SINCE;
http_field_e HTTP_FIELD_IF_UNMODIFIED_SINCE;
http_field_e HTTP_FIELD_KEEP_ALIVE;
http_field_e HTTP_FIELD_LAST_MODIFIED;
http_field_e HTTP_FIELD_LINK;
http_field_e HTTP_FIELD_LOCATION;
http_field_e HTTP_FIELD_MAX;
http_field_e HTTP_FIELD_RANGE;
http_field_e HTTP_FIELD_REFERER;
http_field_e HTTP_FIELD_RETRY_AFTER;
http_field_e HTTP_FIELD_TRANSFER_ENCODING;
http_field_e HTTP_FIELD_UNKNOWN;
http_field_e HTTP_FIELD_UPGRADE;
http_field_e HTTP_FIELD_USER_AGENT;
http_field_e HTTP_FIELD_WWW_AUTHENTICATE;
http_status_e HTTP_FORBIDDEN;
http_status_e HTTP_GATEWAY_TIMEOUT;
http_state_e HTTP_GET;
http_state_e HTTP_GET_SEND;
http_status_e HTTP_GONE;
http_state_e HTTP_HEAD;
http_keepalive_e HTTP_KEEPALIVE_OFF;
http_keepalive_e HTTP_KEEPALIVE_ON;
http_status_e HTTP_LENGTH_REQUIRED;
MACRO_HTTP HTTP_MAX_BUFFER;
MACRO_HTTP HTTP_MAX_HOST;
MACRO_HTTP HTTP_MAX_URI;
MACRO_HTTP HTTP_MAX_VALUE;
http_status_e HTTP_METHOD_NOT_ALLOWED;
http_status_e HTTP_MOVED_PERMANENTLY;
http_status_e HTTP_MOVED_TEMPORARILY;
http_status_e HTTP_MULTIPLE_CHOICES;
http_status_e HTTP_NOT_ACCEPTABLE;
http_status_e HTTP_NOT_AUTHORITATIVE;
http_status_e HTTP_NOT_FOUND;
http_status_e HTTP_NOT_IMPLEMENTED;
http_status_e HTTP_NOT_MODIFIED;
http_status_e HTTP_NOT_SUPPORTED;
http_status_e HTTP_NO_CONTENT;
http_status_e HTTP_OK;
http_state_e HTTP_OPTIONS;
http_status_e HTTP_PARTIAL_CONTENT;
http_status_e HTTP_PAYMENT_REQUIRED;
http_status_e HTTP_PKI_ERROR;
http_state_e HTTP_POST;
http_state_e HTTP_POST_RECV;
http_state_e HTTP_POST_SEND;
http_status_e HTTP_PRECONDITION;
http_status_e HTTP_PROXY_AUTHENTICATION;
http_state_e HTTP_PUT;
http_state_e HTTP_PUT_RECV;
http_status_e HTTP_REQUESTED_RANGE;
http_status_e HTTP_REQUEST_TIMEOUT;
http_status_e HTTP_REQUEST_TOO_LARGE;
http_status_e HTTP_RESET_CONTENT;
http_status_e HTTP_SEE_OTHER;
http_status_e HTTP_SERVER_ERROR;
http_status_e HTTP_SERVICE_UNAVAILABLE;
http_state_e HTTP_STATUS;
http_status_e HTTP_SWITCHING_PROTOCOLS;
http_state_e HTTP_TRACE;
http_status_e HTTP_UNAUTHORIZED;
http_status_e HTTP_UNSUPPORTED_MEDIATYPE;
http_status_e HTTP_UPGRADE_REQUIRED;
http_uri_status_e HTTP_URI_BAD_ARGUMENTS;
http_uri_status_e HTTP_URI_BAD_HOSTNAME;
http_uri_status_e HTTP_URI_BAD_PORT;
http_uri_status_e HTTP_URI_BAD_RESOURCE;
http_uri_status_e HTTP_URI_BAD_SCHEME;
http_uri_status_e HTTP_URI_BAD_URI;
http_uri_status_e HTTP_URI_BAD_USERNAME;
http_uri_coding_e HTTP_URI_CODING_ALL;
http_uri_coding_e HTTP_URI_CODING_HOSTNAME;
http_uri_coding_e HTTP_URI_CODING_MOST;
http_uri_coding_e HTTP_URI_CODING_NONE;
http_uri_coding_e HTTP_URI_CODING_QUERY;
http_uri_coding_e HTTP_URI_CODING_RESOURCE;
http_uri_coding_e HTTP_URI_CODING_USERNAME;
http_uri_status_e HTTP_URI_MISSING_RESOURCE;
http_uri_status_e HTTP_URI_MISSING_SCHEME;
http_uri_status_e HTTP_URI_OK;
http_uri_status_e HTTP_URI_OVERFLOW;
http_status_e HTTP_URI_TOO_LONG;
http_uri_status_e HTTP_URI_UNKNOWN_SCHEME;
http_status_e HTTP_USE_PROXY;
http_state_e HTTP_WAITING;
http_status_e HTTP_WEBIF_DISABLED;
MACRO_CS8 HUPCL;
MACRO_HW HW_AVAILCPU;
MACRO_HW HW_BUS_FREQ;
MACRO_HW HW_BYTEORDER;
MACRO_HW HW_CACHELINE;
MACRO_HW HW_CPU_FREQ;
MACRO_HW HW_DISKNAMES;
MACRO_HW HW_DISKSTATS;
MACRO_HW HW_EPOCH;
MACRO_HW HW_FLOATINGPT;
MACRO_HW HW_L1DCACHESIZE;
MACRO_HW HW_L1ICACHESIZE;
MACRO_HW HW_L2CACHESIZE;
MACRO_HW HW_L2SETTINGS;
MACRO_HW HW_L3CACHESIZE;
MACRO_HW HW_L3SETTINGS;
MACRO_HW HW_MACHINE;
MACRO_HW HW_MACHINE_ARCH;
MACRO_HW HW_MAXID;
MACRO_HW HW_MEMSIZE;
MACRO_HW HW_MODEL;
MACRO_HW HW_NCPU;
MACRO_HW HW_PAGESIZE;
MACRO_HW HW_PHYSMEM;
MACRO_HW HW_TB_FREQ;
MACRO_HW HW_USERMEM;
MACRO_HW HW_VECTORUNIT;
MACRO_H H_ADD;
MACRO_H H_APPEND;
MACRO_H H_CLEAR;
MACRO_H H_CURR;
MACRO_H H_DEL;
MACRO_H H_DELDATA;
MACRO_H H_END;
MACRO_H H_ENTER;
MACRO_H H_FIRST;
MACRO_H H_FUNC;
MACRO_H H_GETSIZE;
MACRO_H H_GETUNIQUE;
MACRO_H H_LAST;
MACRO_H H_LOAD;
MACRO_H H_NEXT;
MACRO_H H_NEXT_EVDATA;
MACRO_H H_NEXT_EVENT;
MACRO_H H_NEXT_STR;
MACRO_H H_PREV;
MACRO_H H_PREV_EVENT;
MACRO_H H_PREV_STR;
MACRO_H H_REPLACE;
MACRO_H H_SAVE;
MACRO_H H_SET;
MACRO_H H_SETSIZE;
MACRO_H H_SETUNIQUE;
MACRO_I386_LPGBYTES I386_LPGBYTES;
MACRO_I386_LPGBYTES I386_LPGMASK;
MACRO_I386_LPGBYTES I386_LPGSHIFT;
MACRO_I386 I386_PGBYTES;
MACRO_I386 I386_PGSHIFT;
MACRO_STATE_MAX I386_THREAD_STATE_MAX;
MACRO_I64CHARSZ I64CHARSZ;
MACRO_IAC IAC;
MACRO_ECHOKE ICANON;
MACRO_ICMP6_DST ICMP6_DST_UNREACH;
MACRO_ICMP6_MAXTYPE ICMP6_DST_UNREACH_ADDR;
MACRO_ICMP6_MAXTYPE ICMP6_DST_UNREACH_ADMIN;
MACRO_ICMP6_MAXTYPE ICMP6_DST_UNREACH_BEYONDSCOPE;
MACRO_ICMP6_MAXTYPE ICMP6_DST_UNREACH_NOPORT;
MACRO_ICMP6_MAXTYPE ICMP6_DST_UNREACH_NOROUTE;
MACRO_ICMP6_MAXTYPE ICMP6_DST_UNREACH_NOTNEIGHBOR;
MACRO_ICMP6_DST ICMP6_ECHO_REPLY;
MACRO_ICMP6_DST ICMP6_ECHO_REQUEST;
MACRO_ICMP6 ICMP6_FILTER;
MACRO_ICMP6_ROUTER ICMP6_FQDN_QUERY;
MACRO_ICMP6_ROUTER ICMP6_FQDN_REPLY;
MACRO_ICMP6_MAXTYPE ICMP6_INFOMSG_MASK;
MACRO_ICMP6_MAXTYPE ICMP6_MAXTYPE;
MACRO_ICMP6_MEMBERSHIP ICMP6_MEMBERSHIP_QUERY;
MACRO_ICMP6_MEMBERSHIP ICMP6_MEMBERSHIP_REDUCTION;
MACRO_ICMP6_MEMBERSHIP ICMP6_MEMBERSHIP_REPORT;
MACRO_ICMP6_ROUTER ICMP6_NI_QUERY;
MACRO_ICMP6_MAXTYPE ICMP6_NI_REFUSED;
MACRO_ICMP6_ROUTER ICMP6_NI_REPLY;
MACRO_ICMP6_MAXTYPE ICMP6_NI_SUBJ_FQDN;
MACRO_ICMP6_MAXTYPE ICMP6_NI_SUBJ_IPV4;
MACRO_ICMP6_MAXTYPE ICMP6_NI_SUBJ_IPV6;
MACRO_ICMP6_MAXTYPE ICMP6_NI_SUCCESS;
MACRO_ICMP6_MAXTYPE ICMP6_NI_UNKNOWN;
MACRO_ICMP6_DST ICMP6_PACKET_TOO_BIG;
MACRO_ICMP6_MAXTYPE ICMP6_PARAMPROB_HEADER;
MACRO_ICMP6_MAXTYPE ICMP6_PARAMPROB_NEXTHEADER;
MACRO_ICMP6_MAXTYPE ICMP6_PARAMPROB_OPTION;
MACRO_ICMP6_DST ICMP6_PARAM_PROB;
MACRO_ICMP6_ROUTER ICMP6_ROUTER_RENUMBERING;
MACRO_ICMP6_MAXTYPE ICMP6_ROUTER_RENUMBERING_COMMAND;
MACRO_ICMP6_MAXTYPE ICMP6_ROUTER_RENUMBERING_RESULT;
MACRO_ICMP6_MAXTYPE ICMP6_ROUTER_RENUMBERING_SEQNUM_RESET;
MACRO_ICMP6_RR ICMP6_RR_FLAGS_FORCEAPPLY;
MACRO_ICMP6_RR ICMP6_RR_FLAGS_PREVDONE;
MACRO_ICMP6_RR ICMP6_RR_FLAGS_REQRESULT;
MACRO_ICMP6_RR ICMP6_RR_FLAGS_SPECSITE;
MACRO_ICMP6_RR ICMP6_RR_FLAGS_TEST;
MACRO_ICMP6_RR_PCOUSE ICMP6_RR_PCOUSE_FLAGS_DECRPLTIME;
MACRO_ICMP6_RR_PCOUSE ICMP6_RR_PCOUSE_FLAGS_DECRVLTIME;
MACRO_ICMP6_RR_PCOUSE ICMP6_RR_PCOUSE_RAFLAGS_AUTO;
MACRO_ICMP6_RR_PCOUSE ICMP6_RR_PCOUSE_RAFLAGS_ONLINK;
MACRO_ICMP6_RR_PCOUSE ICMP6_RR_RESULT_FLAGS_FORBIDDEN;
MACRO_ICMP6_RR_PCOUSE ICMP6_RR_RESULT_FLAGS_OOB;
MACRO_ICMP6_DST ICMP6_TIME_EXCEEDED;
MACRO_ICMP6_MAXTYPE ICMP6_TIME_EXCEED_REASSEMBLY;
MACRO_ICMP6_MAXTYPE ICMP6_TIME_EXCEED_TRANSIT;
MACRO_ICMP6_ROUTER ICMP6_WRUREPLY;
MACRO_ICMP6_ROUTER ICMP6_WRUREQUEST;
MACRO_ICMPCTL ICMPCTL_ICMPLIM;
MACRO_ICMPCTL ICMPCTL_MASKREPL;
MACRO_ICMPCTL ICMPCTL_MAXID;
MACRO_ICMPCTL ICMPCTL_STATS;
MACRO_ICMPCTL ICMPCTL_TIMESTAMP;
MACRO_ICMPV6CTL_STATS ICMPV6CTL_ERRPPSLIMIT;
MACRO_ICMPV6CTL_STATS ICMPV6CTL_MAXID;
MACRO_ICMPV6CTL_STATS ICMPV6CTL_MLD_MAXSRCFILTER;
MACRO_ICMPV6CTL_STATS ICMPV6CTL_MLD_SOMAXSRC;
MACRO_ICMPV6CTL_STATS ICMPV6CTL_MLD_VERSION;
MACRO_ICMPV6CTL_STATS ICMPV6CTL_MTUDISC_HIWAT;
MACRO_ICMPV6CTL_STATS ICMPV6CTL_MTUDISC_LOWAT;
MACRO_ICMPV6CTL_STATS ICMPV6CTL_ND6_ACCEPT_6TO4;
MACRO_ICMPV6CTL_STATS ICMPV6CTL_ND6_DEBUG;
MACRO_ICMPV6CTL_STATS ICMPV6CTL_ND6_DELAY;
MACRO_ICMPV6CTL_STATS ICMPV6CTL_ND6_DRLIST;
MACRO_ICMPV6CTL_STATS ICMPV6CTL_ND6_MAXNUDHINT;
MACRO_ICMPV6CTL_STATS ICMPV6CTL_ND6_MAXQLEN;
MACRO_ICMPV6CTL_STATS ICMPV6CTL_ND6_MMAXTRIES;
MACRO_ICMPV6CTL ICMPV6CTL_ND6_ONLINKNSRFC4861;
MACRO_ICMPV6CTL_STATS ICMPV6CTL_ND6_PRLIST;
MACRO_ICMPV6CTL_STATS ICMPV6CTL_ND6_PRUNE;
MACRO_ICMPV6CTL_STATS ICMPV6CTL_ND6_UMAXTRIES;
MACRO_ICMPV6CTL_STATS ICMPV6CTL_ND6_USELOOPBACK;
MACRO_ICMPV6CTL_STATS ICMPV6CTL_NODEINFO;
MACRO_ICMPV6CTL_STATS ICMPV6CTL_REDIRACCEPT;
MACRO_ICMPV6CTL_STATS ICMPV6CTL_REDIRTIMEOUT;
MACRO_ICMPV6CTL_STATS ICMPV6CTL_STATS;
MACRO_ICMPV6 ICMPV6_PLD_MAXLEN;
MACRO_ICMP ICMP_ALTHOSTADDR;
MACRO_ICMP ICMP_DATACONVERR;
MACRO_ICMP ICMP_ECHO;
MACRO_ICMP ICMP_ECHOREPLY;
MACRO_ICMP ICMP_IPV6_IAMHERE;
MACRO_ICMP ICMP_IPV6_WHEREAREYOU;
MACRO_ICMP ICMP_IREQ;
MACRO_ICMP ICMP_IREQREPLY;
MACRO_ICMP ICMP_MASKLEN;
MACRO_ICMP ICMP_MASKREPLY;
MACRO_ICMP ICMP_MASKREQ;
MACRO_ICMP ICMP_MAXTYPE;
MACRO_ICMP ICMP_MINLEN;
MACRO_ICMP ICMP_MOBILE_REDIRECT;
MACRO_ICMP ICMP_MOBILE_REGREPLY;
MACRO_ICMP ICMP_MOBILE_REGREQUEST;
MACRO_ICMP ICMP_PARAMPROB;
MACRO_ICMP ICMP_PARAMPROB_ERRATPTR;
MACRO_ICMP ICMP_PARAMPROB_LENGTH;
MACRO_ICMP ICMP_PARAMPROB_OPTABSENT;
MACRO_ICMP ICMP_PHOTURIS;
MACRO_ICMP ICMP_PHOTURIS_AUTH_FAILED;
MACRO_ICMP ICMP_PHOTURIS_DECRYPT_FAILED;
MACRO_ICMP ICMP_PHOTURIS_UNKNOWN_INDEX;
MACRO_ICMP ICMP_REDIRECT;
MACRO_ICMP ICMP_REDIRECT_HOST;
MACRO_ICMP ICMP_REDIRECT_NET;
MACRO_ICMP ICMP_REDIRECT_TOSHOST;
MACRO_ICMP ICMP_REDIRECT_TOSNET;
MACRO_ICMP_REJECT ICMP_REJECT_RST;
MACRO_ICMP ICMP_ROUTERADVERT;
MACRO_ICMP ICMP_ROUTERADVERT_NORMAL;
MACRO_ICMP ICMP_ROUTERADVERT_NOROUTE_COMMON;
MACRO_ICMP ICMP_ROUTERSOLICIT;
MACRO_ICMP ICMP_SKIP;
MACRO_ICMP ICMP_SOURCEQUENCH;
MACRO_ICMP ICMP_TIMXCEED;
MACRO_ICMP ICMP_TIMXCEED_INTRANS;
MACRO_ICMP ICMP_TIMXCEED_REASS;
MACRO_ICMP ICMP_TRACEROUTE;
MACRO_ICMP ICMP_TSTAMP;
MACRO_ICMP ICMP_TSTAMPREPLY;
MACRO_ICMP ICMP_UNREACH;
MACRO_ICMP ICMP_UNREACH_FILTER_PROHIB;
MACRO_ICMP ICMP_UNREACH_HOST;
MACRO_ICMP ICMP_UNREACH_HOST_PRECEDENCE;
MACRO_ICMP ICMP_UNREACH_HOST_PROHIB;
MACRO_ICMP ICMP_UNREACH_HOST_UNKNOWN;
MACRO_ICMP ICMP_UNREACH_ISOLATED;
MACRO_ICMP ICMP_UNREACH_NEEDFRAG;
MACRO_ICMP ICMP_UNREACH_NET;
MACRO_ICMP ICMP_UNREACH_NET_PROHIB;
MACRO_ICMP ICMP_UNREACH_NET_UNKNOWN;
MACRO_ICMP ICMP_UNREACH_PORT;
MACRO_ICMP ICMP_UNREACH_PRECEDENCE_CUTOFF;
MACRO_ICMP ICMP_UNREACH_PROTOCOL;
MACRO_ICMP ICMP_UNREACH_SRCFAIL;
MACRO_ICMP ICMP_UNREACH_TOSHOST;
MACRO_ICMP ICMP_UNREACH_TOSNET;
MACRO_ICONV ICONV_GET_DISCARD_ILSEQ;
MACRO_ICONV ICONV_GET_TRANSLITERATE;
MACRO_ICONV ICONV_SET_DISCARD_ILSEQ;
MACRO_ICONV ICONV_SET_FALLBACKS;
MACRO_ICONV ICONV_SET_HOOKS;
MACRO_ICONV ICONV_SET_TRANSLITERATE;
MACRO_ICONV ICONV_TRIVIALP;
MACRO_IGNBRK ICRNL;
MACRO_ID ID_TYPE_GID;
MACRO_ID ID_TYPE_GROUPNAME;
MACRO_ID ID_TYPE_GSS_EXPORT_NAME;
MACRO_ID ID_TYPE_KERBEROS;
MACRO_ID ID_TYPE_SID;
MACRO_ID ID_TYPE_UID;
MACRO_ID ID_TYPE_USERNAME;
MACRO_ID ID_TYPE_X509_DN;
MACRO_ECHOKE IEXTEN;
MACRO_IFCAP IFCAP_AV;
MACRO_IFCAP IFCAP_HWCSUM;
MACRO_IFCAP IFCAP_JUMBO_MTU;
MACRO_IFCAP IFCAP_LRO;
MACRO_IFCAP IFCAP_RXCSUM;
MACRO_IFCAP IFCAP_TSO;
MACRO_IFCAP IFCAP_TSO4;
MACRO_IFCAP IFCAP_TSO6;
MACRO_IFCAP IFCAP_TXCSUM;
MACRO_IFCAP IFCAP_VALID;
MACRO_IFCAP IFCAP_VLAN_HWTAGGING;
MACRO_IFCAP IFCAP_VLAN_MTU;
MACRO_IFDATA IFDATA_ADDRS;
MACRO_IFDATA IFDATA_GENERAL;
MACRO_IFDATA IFDATA_LINKSPECIFIC;
MACRO_IFDATA IFDATA_MULTIADDRS;
MACRO_IFF IFF_ALLMULTI;
MACRO_IFF IFF_ALTPHYS;
MACRO_IFF IFF_BROADCAST;
MACRO_IFF IFF_DEBUG;
MACRO_IFF IFF_LINK0;
MACRO_IFF IFF_LINK1;
MACRO_IFF IFF_LINK2;
MACRO_IFF IFF_LOOPBACK;
MACRO_IFF IFF_MULTICAST;
MACRO_IFF IFF_NOARP;
MACRO_IFF IFF_NOTRAILERS;
MACRO_IFF IFF_OACTIVE;
MACRO_IFF IFF_POINTOPOINT;
MACRO_IFF IFF_PROMISC;
MACRO_IFF IFF_RUNNING;
MACRO_IFF IFF_SIMPLEX;
MACRO_IFF IFF_UP;
MACRO_IFLR IFLR_PREFIX;
MACRO_IFMIB IFMIB_IFALLDATA;
MACRO_IFMIB_IFCOUNT IFMIB_IFCOUNT;
MACRO_IFMIB IFMIB_IFDATA;
MACRO_IFMIB IFMIB_SYSTEM;
MACRO_IFM IFM_1000_CX;
MACRO_IFM IFM_1000_LX;
MACRO_IFM IFM_1000_SX;
MACRO_IFM IFM_1000_T;
MACRO_IFM IFM_100_FX;
MACRO_IFM IFM_100_T2;
MACRO_IFM IFM_100_T4;
MACRO_IFM IFM_100_TX;
MACRO_IFM IFM_100_VG;
MACRO_IFM IFM_10G_CX4;
MACRO_IFM IFM_10G_LR;
MACRO_IFM IFM_10G_SR;
MACRO_IFM IFM_10G_T;
MACRO_IFM IFM_10_2;
MACRO_IFM IFM_10_5;
MACRO_IFM IFM_10_FL;
MACRO_IFM IFM_10_STP;
MACRO_IFM IFM_10_T;
MACRO_IFM IFM_ACTIVE;
MACRO_IFM IFM_AUTO;
MACRO_IFM IFM_AVALID;
MACRO_IFM IFM_EEE;
MACRO_IFM IFM_ETHER;
MACRO_IFM IFM_FDDI;
MACRO_IFM IFM_FDDI_DA;
MACRO_IFM IFM_FDDI_MMF;
MACRO_IFM IFM_FDDI_SMF;
MACRO_IFM IFM_FDDI_UTP;
MACRO_IFM IFM_FDX;
MACRO_IFM IFM_FLAG0;
MACRO_IFM IFM_FLAG1;
MACRO_IFM IFM_FLAG2;
MACRO_IFM IFM_FLOW;
MACRO_IFM IFM_GMASK;
MACRO_IFM IFM_HDX;
MACRO_IFM IFM_HPNA_1;
MACRO_IFM IFM_IEEE80211;
MACRO_IFM IFM_IEEE80211_ADHOC;
MACRO_IFM IFM_IEEE80211_DS1;
MACRO_IFM IFM_IEEE80211_DS11;
MACRO_IFM IFM_IEEE80211_DS2;
MACRO_IFM IFM_IEEE80211_DS22;
MACRO_IFM IFM_IEEE80211_DS5;
MACRO_IFM IFM_IEEE80211_FH1;
MACRO_IFM IFM_IEEE80211_FH2;
MACRO_IFM IFM_IMASK;
MACRO_IFM IFM_INST_MAX;
MACRO_IFM IFM_ISHIFT;
MACRO_IFM IFM_LOOP;
MACRO_IFM IFM_MANUAL;
MACRO_IFM IFM_NMASK;
MACRO_IFM IFM_NONE;
MACRO_IFM IFM_OMASK;
MACRO_IFM IFM_TMASK;
MACRO_IFM IFM_TOKEN;
MACRO_IFM IFM_TOK_ALLR;
MACRO_IFM IFM_TOK_AUTO;
MACRO_IFM IFM_TOK_CLASSIC;
MACRO_IFM IFM_TOK_DTR;
MACRO_IFM IFM_TOK_ETR;
MACRO_IFM IFM_TOK_SRCRT;
MACRO_IFM IFM_TOK_STP100;
MACRO_IFM IFM_TOK_STP16;
MACRO_IFM IFM_TOK_STP4;
MACRO_IFM IFM_TOK_UTP100;
MACRO_IFM IFM_TOK_UTP16;
MACRO_IFM IFM_TOK_UTP4;
MACRO_IFNAMSIZ IFNAMSIZ;
MACRO_IFNET IFNET_SLOWHZ;
MACRO_IFQ IFQ_MAXLEN;
MACRO_IFSTATMAX IFSTATMAX;
MACRO_IFT IFT_1822;
MACRO_IFT IFT_AAL5;
MACRO_IFT IFT_ARCNET;
MACRO_IFT IFT_ARCNETPLUS;
MACRO_IFT IFT_ATM;
MACRO_IFT IFT_BRIDGE;
MACRO_IFT IFT_CARP;
MACRO_IFT IFT_CELLULAR;
MACRO_IFT IFT_CEPT;
MACRO_IFT IFT_DS3;
MACRO_IFT IFT_ENC;
MACRO_IFT IFT_EON;
MACRO_IFT IFT_ETHER;
MACRO_IFT IFT_FAITH;
MACRO_IFT IFT_FDDI;
MACRO_IFT IFT_FRELAY;
MACRO_IFT IFT_FRELAYDCE;
MACRO_IFT IFT_GIF;
MACRO_IFT IFT_HDH1822;
MACRO_IFT IFT_HIPPI;
MACRO_IFT IFT_HSSI;
MACRO_IFT IFT_HY;
MACRO_IFT IFT_IEEE1394;
MACRO_IFT IFT_IEEE8023ADLAG;
MACRO_IFT IFT_ISDNBASIC;
MACRO_IFT IFT_ISDNPRIMARY;
MACRO_IFT IFT_ISO88022LLC;
MACRO_IFT IFT_ISO88023;
MACRO_IFT IFT_ISO88024;
MACRO_IFT IFT_ISO88025;
MACRO_IFT IFT_ISO88026;
MACRO_IFT IFT_L2VLAN;
MACRO_IFT IFT_LAPB;
MACRO_IFT IFT_LOCALTALK;
MACRO_IFT IFT_LOOP;
MACRO_IFT IFT_MIOX25;
MACRO_IFT IFT_MODEM;
MACRO_IFT IFT_NSIP;
MACRO_IFT IFT_OTHER;
MACRO_IFT IFT_P10;
MACRO_IFT IFT_P80;
MACRO_IFT IFT_PARA;
MACRO_IFT IFT_PDP;
MACRO_IFT IFT_PFLOG;
MACRO_IFT IFT_PFSYNC;
MACRO_IFT IFT_PPP;
MACRO_IFT IFT_PROPMUX;
MACRO_IFT IFT_PROPVIRTUAL;
MACRO_IFT IFT_PTPSERIAL;
MACRO_IFT IFT_RS232;
MACRO_IFT IFT_SDLC;
MACRO_IFT IFT_SIP;
MACRO_IFT IFT_SLIP;
MACRO_IFT IFT_SMDSDXI;
MACRO_IFT IFT_SMDSICIP;
MACRO_IFT IFT_SONET;
MACRO_IFT IFT_SONETPATH;
MACRO_IFT IFT_SONETVT;
MACRO_IFT IFT_STARLAN;
MACRO_IFT IFT_STF;
MACRO_IFT IFT_T1;
MACRO_IFT IFT_ULTRA;
MACRO_IFT IFT_V35;
MACRO_IFT IFT_X25;
MACRO_IFT IFT_X25DDN;
MACRO_IFT IFT_X25PLE;
MACRO_IFT IFT_XETHER;
MACRO_IF_MINMTU IF_MAXMTU;
MACRO_IF_MINMTU IF_MINMTU;
MACRO_IF IF_NAMESIZE;
MACRO_IF_WAKE IF_WAKE_ON_MAGIC_PACKET;
MACRO_IGMPCTL IGMPCTL_MAXID;
MACRO_IGMPCTL IGMPCTL_STATS;
MACRO_IGMPMSG IGMPMSG_NOCACHE;
MACRO_IGMPMSG IGMPMSG_WRONGVIF;
MACRO_IGMP IGMP_ALLOW_NEW_SOURCES;
MACRO_IGMP IGMP_BLOCK_OLD_SOURCES;
MACRO_IGMP IGMP_CHANGE_TO_EXCLUDE_MODE;
MACRO_IGMP IGMP_CHANGE_TO_INCLUDE_MODE;
MACRO_IGMP IGMP_DO_NOTHING;
MACRO_IGMP IGMP_DVMRP;
MACRO_IGMP IGMP_GRPREC_HDRLEN;
MACRO_IGMP IGMP_HOST_LEAVE_MESSAGE;
MACRO_IGMP IGMP_HOST_MEMBERSHIP_QUERY;
MACRO_IGMP IGMP_MAX_HOST_REPORT_DELAY;
MACRO_IGMP IGMP_MINLEN;
MACRO_IGMP IGMP_MODE_IS_EXCLUDE;
MACRO_IGMP IGMP_MODE_IS_INCLUDE;
MACRO_IGMP IGMP_MTRACE_QUERY;
MACRO_IGMP IGMP_MTRACE_REPLY;
MACRO_IGMP IGMP_PIM;
MACRO_IGMP IGMP_TIMER_SCALE;
MACRO_IGMP IGMP_V1V2_MAX_RI;
MACRO_IGMP IGMP_V3_GENERAL_QUERY;
MACRO_IGMP IGMP_V3_GROUP_QUERY;
MACRO_IGMP IGMP_V3_GROUP_SOURCE_QUERY;
MACRO_IGMP IGMP_V3_QUERY_MINLEN;
MACRO_IGMP IGMP_V3_REPORT_MAXRECS;
MACRO_IGMP IGMP_V3_REPORT_MINLEN;
MACRO_IGMP IGMP_v1_HOST_MEMBERSHIP_REPORT;
MACRO_IGMP IGMP_v2_HOST_MEMBERSHIP_REPORT;
MACRO_IGMP IGMP_v3_HOST_MEMBERSHIP_REPORT;
MACRO_IGNBRK IGNBRK;
MACRO_IGNBRK IGNCR;
MACRO_IGNBRK IGNPAR;
MACRO_IGPS IGPS_VERSION3_LEN;
MACRO_IGPS IGPS_VERSION_3;
MACRO_ILL ILL_BADSTK;
MACRO_ILL ILL_COPROC;
MACRO_ILL ILL_ILLADR;
MACRO_ILL ILL_ILLOPC;
MACRO_ILL ILL_ILLOPN;
MACRO_ILL ILL_ILLTRP;
MACRO_ILL ILL_NOOP;
MACRO_ILL ILL_PRVOPC;
MACRO_ILL ILL_PRVREG;
MACRO_IGNBRK IMAXBEL;
MACRO_INT16SZ IN6ADDRSZ;
MACRO_IN6P IN6P_AUTOFLOWLABEL;
MACRO_IN6P IN6P_BINDV6ONLY;
MACRO_IN6P IN6P_DSTOPTS;
MACRO_IN6P IN6P_HOPLIMIT;
MACRO_IN6P IN6P_HOPOPTS;
MACRO_IN6P IN6P_IPV6_V6ONLY;
MACRO_IN6P IN6P_MTU;
MACRO_IN6P IN6P_PKTINFO;
MACRO_IN6P IN6P_RFC2292;
MACRO_IN6P IN6P_RTHDR;
MACRO_IN6P IN6P_RTHDRDSTOPTS;
MACRO_IN6P IN6P_TCLASS;
MACRO_IN6_IFF IN6_IFF_ANYCAST;
MACRO_IN6_IFF IN6_IFF_AUTOCONF;
MACRO_IN6_IFF IN6_IFF_DEPRECATED;
MACRO_IN6_IFF IN6_IFF_DETACHED;
MACRO_IN6_IFF IN6_IFF_DUPLICATED;
MACRO_IN6_IFF IN6_IFF_NODAD;
MACRO_IN6_IFF IN6_IFF_NOPFX;
MACRO_IN6_IFF IN6_IFF_NOTREADY;
MACRO_IN6_IFF IN6_IFF_TEMPORARY;
MACRO_IN6_IFF IN6_IFF_TENTATIVE;
MACRO_IN6 IN6_PREFIX_ND;
MACRO_IN6 IN6_PREFIX_RR;
MACRO_INT16SZ INADDRSZ;
MACRO_INADDR_LOOPBACK INADDR_ALLHOSTS_GROUP;
MACRO_INADDR_LOOPBACK INADDR_ALLMDNS_GROUP;
MACRO_INADDR_LOOPBACK INADDR_ALLRPTS_GROUP;
MACRO_INADDR_LOOPBACK INADDR_ALLRTRS_GROUP;
MACRO_INADDR INADDR_ANY;
MACRO_INADDR INADDR_BROADCAST;
MACRO_INADDR_LOOPBACK INADDR_CARP_GROUP;
MACRO_INADDR_LOOPBACK INADDR_LOOPBACK;
MACRO_INADDR_LOOPBACK INADDR_MAX_LOCAL_GROUP;
MACRO_INADDR_LOOPBACK INADDR_NONE;
MACRO_INADDR_LOOPBACK INADDR_PFSYNC_GROUP;
MACRO_INADDR_LOOPBACK INADDR_UNSPEC_GROUP;
MACRO_INDEX INDEX_ERR_GENERR;
MACRO_INDEX INDEX_ERR_NOT_ALLOCATED;
MACRO_INDEX INDEX_ERR_WRONG_SESSION;
MACRO_INDEX INDEX_ERR_WRONG_TYPE;
MACRO_INDIRECT INDIRECT_SYMBOL_ABS;
MACRO_INDIRECT INDIRECT_SYMBOL_LOCAL;
MACRO_INDIR INDIR_MASK;
MACRO_INET6 INET6_ADDRSTRLEN;
MACRO_INET INET_ADDRSTRLEN;
MACRO_REQ_MSG INFORM_REQ_MSG;
MACRO_PROCESS INIT_PROCESS;
MACRO_INI INI_IPV4;
MACRO_INI INI_IPV6;
MACRO_IGNBRK INLCR;
MACRO_IGNBRK INPCK;
MACRO_INPUT INPUT_CHUNK;
MACRO_INP INP_ANONPORT;
MACRO_INP INP_BOUND_IF;
MACRO_INP INP_FAITH;
MACRO_INP INP_HDRINCL;
MACRO_INP INP_HIGHPORT;
MACRO_INP INP_INADDR_ANY;
MACRO_INP INP_IPV4;
MACRO_INP INP_IPV6;
MACRO_INP INP_LOWPORT;
MACRO_INP INP_MTUDISC;
MACRO_INP_PKTINFO INP_NO_IFT_CELLULAR;
MACRO_INP_PKTINFO INP_PKTINFO;
MACRO_INP INP_RECVDSTADDR;
MACRO_INP INP_RECVIF;
MACRO_INP INP_RECVOPTS;
MACRO_INP INP_RECVRETOPTS;
MACRO_INP INP_RECVTTL;
MACRO_INP INP_STRIPHDR;
MACRO_INP INP_UDP_NOCKSUM;
MACRO_INST INST;
MACRO_INT16SZ INT16SZ;
MACRO_INT8 INT16_MAX;
MACRO_MIN INT16_MIN;
MACRO_INT32SZ INT32SZ;
MACRO_INT8 INT32_MAX;
MACRO_MIN INT32_MIN;
MACRO_INT8 INT64_MAX;
MACRO_MIN INT64_MIN;
MACRO_INT8 INT8_MAX;
MACRO_MIN INT8_MIN;
MACRO_INTEGER INTEGER;
MACRO_INTMAX INTMAX_MAX;
MACRO_INTMAX INTMAX_MIN;
MACRO_INTPTR INTPTR_MAX;
MACRO_INTPTR INTPTR_MIN;
MACRO_INT_FAST8 INT_FAST16_MAX;
MACRO_INT_FAST8 INT_FAST16_MIN;
MACRO_INT_FAST8 INT_FAST32_MAX;
MACRO_INT_FAST8 INT_FAST32_MIN;
MACRO_INT_FAST8 INT_FAST64_MAX;
MACRO_INT_FAST8 INT_FAST64_MIN;
MACRO_INT_FAST8 INT_FAST8_MAX;
MACRO_INT_FAST8 INT_FAST8_MIN;
MACRO_INT INT_LEAST16_MAX;
MACRO_INT INT_LEAST16_MIN;
MACRO_INT INT_LEAST32_MAX;
MACRO_INT INT_LEAST32_MIN;
MACRO_INT INT_LEAST64_MAX;
MACRO_INT INT_LEAST64_MIN;
MACRO_INT INT_LEAST8_MAX;
MACRO_INT INT_LEAST8_MIN;
MACRO_UINT_MAX INT_MAX;
MACRO_INT_MIN INT_MIN;
MACRO_IN IN_CLASSA_HOST;
MACRO_IN IN_CLASSA_MAX;
MACRO_IN IN_CLASSA_NET;
MACRO_IN IN_CLASSA_NSHIFT;
MACRO_IN IN_CLASSB_HOST;
MACRO_IN IN_CLASSB_MAX;
MACRO_IN IN_CLASSB_NET;
MACRO_IN IN_CLASSB_NSHIFT;
MACRO_IN IN_CLASSC_HOST;
MACRO_IN IN_CLASSC_NET;
MACRO_IN IN_CLASSC_NSHIFT;
MACRO_IN IN_CLASSD_HOST;
MACRO_IN IN_CLASSD_NET;
MACRO_IN IN_CLASSD_NSHIFT;
MACRO_IN_LINKLOCALNETNUM IN_LINKLOCALNETNUM;
MACRO_IN_LINKLOCALNETNUM IN_LOOPBACKNET;
MACRO_IOCPARM IOCPARM_MASK;
MACRO_IOCPARM IOCPARM_MAX;
MACRO_IOC IOC_DIRMASK;
MACRO_IOC IOC_IN;
MACRO_IOC IOC_INOUT;
MACRO_IOC IOC_OUT;
MACRO_IOC IOC_VOID;
MACRO_IOPOL IOPOL_DEFAULT;
MACRO_IOPOL IOPOL_NORMAL;
MACRO_IOPOL IOPOL_PASSIVE;
MACRO_IOPOL IOPOL_SCOPE_PROCESS;
MACRO_IOPOL IOPOL_SCOPE_THREAD;
MACRO_IOPOL IOPOL_THROTTLE;
MACRO_IOPOL IOPOL_TYPE_DISK;
MACRO__XOPEN_IOV IOV_MAX;
MACRO_IO IO_METASYNC;
MACRO_IP_0 IP;
MACRO_IP6F IP6F_MORE_FRAG;
MACRO_IP6F IP6F_OFF_MASK;
MACRO_IP6F IP6F_RESERVED_MASK;
MACRO_IP6OPT IP6OPT_EID;
MACRO_IP6OPT IP6OPT_JUMBO;
MACRO_IP6OPT IP6OPT_JUMBO_LEN;
MACRO_IP6OPT IP6OPT_MINLEN;
MACRO_IP6OPT IP6OPT_MUTABLE;
MACRO_IP6OPT IP6OPT_NSAP_ADDR;
MACRO_IP6OPT IP6OPT_PAD1;
MACRO_IP6OPT IP6OPT_PADN;
MACRO_IP6OPT IP6OPT_ROUTER_ALERT;
MACRO_IP6OPT IP6OPT_RTALERT;
MACRO_IP6OPT IP6OPT_RTALERT_ACTNET;
MACRO_IP6OPT IP6OPT_RTALERT_LEN;
MACRO_IP6OPT IP6OPT_RTALERT_MLD;
MACRO_IP6OPT IP6OPT_RTALERT_RSVP;
MACRO_IP6OPT IP6OPT_TUNNEL_LIMIT;
MACRO_IP6OPT IP6OPT_TYPE_DISCARD;
MACRO_IP6OPT IP6OPT_TYPE_FORCEICMP;
MACRO_IP6OPT IP6OPT_TYPE_ICMP;
MACRO_IP6OPT IP6OPT_TYPE_SKIP;
MACRO_IP6TOS IP6TOS_CE;
MACRO_IP6TOS IP6TOS_ECT;
MACRO_IP6 IP6_ALERT_AN;
MACRO_IP6 IP6_ALERT_MLD;
MACRO_IP6 IP6_ALERT_RSVP;
MACRO_BITSTRING IPADDRESS;
MACRO_IPCTL IPCTL_ACCEPTSOURCEROUTE;
MACRO_IPCTL IPCTL_DEFTTL;
MACRO_IPCTL IPCTL_DIRECTEDBROADCAST;
MACRO_IPCTL IPCTL_FASTFORWARDING;
MACRO_IPCTL IPCTL_FORWARDING;
MACRO_IPCTL IPCTL_GIF_TTL;
MACRO_IPCTL IPCTL_INTRQDROPS;
MACRO_IPCTL IPCTL_INTRQMAXLEN;
MACRO_IPCTL IPCTL_KEEPFAITH;
MACRO_IPCTL IPCTL_MAXID;
MACRO_IPCTL IPCTL_RTEXPIRE;
MACRO_IPCTL IPCTL_RTMAXCACHE;
MACRO_IPCTL IPCTL_RTMINEXPIRE;
MACRO_IPCTL IPCTL_SENDREDIRECTS;
MACRO_IPCTL IPCTL_SOURCEROUTE;
MACRO_IPCTL IPCTL_STATS;
MACRO_IPC IPC_CREAT;
MACRO_IPC IPC_EXCL;
MACRO_IPC IPC_M;
MACRO_IPC IPC_NOWAIT;
MACRO_IPC IPC_PRIVATE;
MACRO_IPC IPC_R;
MACRO_IPC IPC_RMID;
MACRO_IPC IPC_SET;
MACRO_THREAD_NULL IPC_SPACE_NULL;
MACRO_IPC IPC_STAT;
MACRO_IPC IPC_W;
MACRO_IPDEFTTL IPDEFTTL;
MACRO_IPFRAGTTL IPFRAGTTL;
MACRO_IPOPT IPOPT_CONTROL;
MACRO_IPOPT IPOPT_DEBMEAS;
MACRO_IPOPT IPOPT_EOL;
MACRO_IPOPT IPOPT_LSRR;
MACRO_IPOPT IPOPT_MINOFF;
MACRO_IPOPT IPOPT_NOP;
MACRO_IPOPT IPOPT_OFFSET;
MACRO_IPOPT IPOPT_OLEN;
MACRO_IPOPT IPOPT_OPTVAL;
MACRO_IPOPT IPOPT_RA;
MACRO_IPOPT IPOPT_RESERVED1;
MACRO_IPOPT IPOPT_RESERVED2;
MACRO_IPOPT IPOPT_RR;
MACRO_IPOPT IPOPT_SATID;
MACRO_IPOPT IPOPT_SECURITY;
MACRO_IPOPT IPOPT_SECUR_CONFID;
MACRO_IPOPT IPOPT_SECUR_EFTO;
MACRO_IPOPT IPOPT_SECUR_MMMM;
MACRO_IPOPT IPOPT_SECUR_RESTR;
MACRO_IPOPT IPOPT_SECUR_SECRET;
MACRO_IPOPT IPOPT_SECUR_TOPSECRET;
MACRO_IPOPT IPOPT_SECUR_UNCLASS;
MACRO_IPOPT IPOPT_SSRR;
MACRO_IPOPT IPOPT_TS;
MACRO_IPOPT IPOPT_TS_PRESPEC;
MACRO_IPOPT IPOPT_TS_TSANDADDR;
MACRO_IPOPT IPOPT_TS_TSONLY;
MACRO_IPPORT_BOOTPS IPPORT_BOOTPC;
MACRO_IPPORT_BOOTPS IPPORT_BOOTPS;
MACRO_IPPORT IPPORT_HIFIRSTAUTO;
MACRO_IPPORT IPPORT_HILASTAUTO;
MACRO_RESERVED IPPORT_RESERVED;
MACRO_IPPORT IPPORT_RESERVEDSTART;
MACRO_IPPORT IPPORT_USERRESERVED;
MACRO_IPPROTO IPPROTO_3PC;
MACRO_IPPROTO IPPROTO_ADFS;
MACRO_IPPROTO IPPROTO_AH;
MACRO_IPPROTO IPPROTO_AHIP;
MACRO_IPPROTO IPPROTO_APES;
MACRO_IPPROTO IPPROTO_ARGUS;
MACRO_IPPROTO IPPROTO_AX25;
MACRO_IPPROTO IPPROTO_BHA;
MACRO_IPPROTO IPPROTO_BLT;
MACRO_IPPROTO IPPROTO_BRSATMON;
MACRO_IPPROTO IPPROTO_CFTP;
MACRO_IPPROTO IPPROTO_CHAOS;
MACRO_IPPROTO IPPROTO_CMTP;
MACRO_IPPROTO IPPROTO_CPHB;
MACRO_IPPROTO IPPROTO_CPNX;
MACRO_IPPROTO IPPROTO_DDP;
MACRO_IPPROTO IPPROTO_DGP;
MACRO_IPPROTO IPPROTO_DIVERT;
MACRO_IPPROTO IPPROTO_DONE;
MACRO_IPPROTO IPPROTO_DSTOPTS;
MACRO_IPPROTO IPPROTO_EGP;
MACRO_IPPROTO IPPROTO_EMCON;
MACRO_IPPROTO IPPROTO_ENCAP;
MACRO_IPPROTO IPPROTO_EON;
MACRO_IPPROTO IPPROTO_ESP;
MACRO_IPPROTO IPPROTO_ETHERIP;
MACRO_IPPROTO IPPROTO_FRAGMENT;
MACRO_IPPROTO IPPROTO_GGP;
MACRO_IPPROTO IPPROTO_GMTP;
MACRO_IPPROTO IPPROTO_GRE;
MACRO_IPPROTO IPPROTO_HELLO;
MACRO_IPPROTO IPPROTO_HMP;
MACRO_IPPROTO IPPROTO_HOPOPTS;
MACRO_IPPROTO IPPROTO_ICMP;
MACRO_IPPROTO IPPROTO_ICMPV6;
MACRO_IPPROTO IPPROTO_IDP;
MACRO_IPPROTO IPPROTO_IDPR;
MACRO_IPPROTO IPPROTO_IDRP;
MACRO_IPPROTO IPPROTO_IGMP;
MACRO_IPPROTO IPPROTO_IGP;
MACRO_IPPROTO IPPROTO_IGRP;
MACRO_IPPROTO IPPROTO_IL;
MACRO_IPPROTO IPPROTO_INLSP;
MACRO_IPPROTO IPPROTO_INP;
MACRO_IPPROTO IPPROTO_IP;
MACRO_IPPROTO IPPROTO_IPCOMP;
MACRO_IPPROTO IPPROTO_IPCV;
MACRO_IPPROTO IPPROTO_IPEIP;
MACRO_IPPROTO IPPROTO_IPIP;
MACRO_IPPROTO IPPROTO_IPPC;
MACRO_IPPROTO IPPROTO_IPV4;
MACRO_IPPROTO IPPROTO_IPV6;
MACRO_IPPROTO IPPROTO_IRTP;
MACRO_IPPROTO IPPROTO_KRYPTOLAN;
MACRO_IPPROTO IPPROTO_LARP;
MACRO_IPPROTO IPPROTO_LEAF1;
MACRO_IPPROTO IPPROTO_LEAF2;
MACRO_IPPROTO IPPROTO_MAX;
MACRO_IPPROTO_MAXID IPPROTO_MAXID;
MACRO_IPPROTO IPPROTO_MEAS;
MACRO_IPPROTO IPPROTO_MHRP;
MACRO_IPPROTO IPPROTO_MICP;
MACRO_IPPROTO IPPROTO_MTP;
MACRO_IPPROTO IPPROTO_MUX;
MACRO_IPPROTO IPPROTO_ND;
MACRO_IPPROTO IPPROTO_NHRP;
MACRO_IPPROTO IPPROTO_NONE;
MACRO_IPPROTO IPPROTO_NSP;
MACRO_IPPROTO IPPROTO_NVPII;
MACRO_IPPROTO IPPROTO_OSPFIGP;
MACRO_IPPROTO IPPROTO_PGM;
MACRO_IPPROTO IPPROTO_PIGP;
MACRO_IPPROTO IPPROTO_PIM;
MACRO_IPPROTO IPPROTO_PRM;
MACRO_IPPROTO IPPROTO_PUP;
MACRO_IPPROTO IPPROTO_PVP;
MACRO_IPPROTO IPPROTO_RAW;
MACRO_IPPROTO IPPROTO_RCCMON;
MACRO_IPPROTO IPPROTO_RDP;
MACRO_IPPROTO IPPROTO_ROUTING;
MACRO_IPPROTO IPPROTO_RSVP;
MACRO_IPPROTO IPPROTO_RVD;
MACRO_IPPROTO IPPROTO_SATEXPAK;
MACRO_IPPROTO IPPROTO_SATMON;
MACRO_IPPROTO IPPROTO_SCCSP;
MACRO_IPPROTO IPPROTO_SCTP;
MACRO_IPPROTO IPPROTO_SDRP;
MACRO_IPPROTO IPPROTO_SEP;
MACRO_IPPROTO IPPROTO_SRPC;
MACRO_IPPROTO IPPROTO_ST;
MACRO_IPPROTO IPPROTO_SVMTP;
MACRO_IPPROTO IPPROTO_SWIPE;
MACRO_IPPROTO IPPROTO_TCF;
MACRO_IPPROTO IPPROTO_TCP;
MACRO_IPPROTO IPPROTO_TP;
MACRO_IPPROTO IPPROTO_TPXX;
MACRO_IPPROTO IPPROTO_TRUNK1;
MACRO_IPPROTO IPPROTO_TRUNK2;
MACRO_IPPROTO IPPROTO_TTP;
MACRO_IPPROTO IPPROTO_UDP;
MACRO_IPPROTO IPPROTO_VINES;
MACRO_IPPROTO IPPROTO_VISA;
MACRO_IPPROTO IPPROTO_VMTP;
MACRO_IPPROTO IPPROTO_WBEXPAK;
MACRO_IPPROTO IPPROTO_WBMON;
MACRO_IPPROTO IPPROTO_WSN;
MACRO_IPPROTO IPPROTO_XNET;
MACRO_IPPROTO IPPROTO_XTP;
ipp_op_e IPP_ACTIVATE_PRINTER;
ipp_state_e IPP_ATTRIBUTE;
ipp_status_e IPP_ATTRIBUTES;
ipp_status_e IPP_ATTRIBUTES_NOT_SETTABLE;
ipp_status_e IPP_AUTHENTICATION_CANCELED;
ipp_status_e IPP_BAD_REQUEST;
ipp_op_e IPP_CANCEL_CURRENT_JOB;
ipp_op_e IPP_CANCEL_DOCUMENT;
ipp_op_e IPP_CANCEL_JOB;
ipp_op_e IPP_CANCEL_JOBS;
ipp_op_e IPP_CANCEL_MY_JOBS;
ipp_op_e IPP_CANCEL_SUBSCRIPTION;
ipp_status_e IPP_CHARSET;
ipp_op_e IPP_CLOSE_JOB;
ipp_status_e IPP_COMPRESSION_ERROR;
ipp_status_e IPP_COMPRESSION_NOT_SUPPORTED;
ipp_status_e IPP_CONFLICT;
ipp_op_e IPP_CREATE_JOB;
ipp_op_e IPP_CREATE_JOB_SUBSCRIPTION;
ipp_op_e IPP_CREATE_PRINTER_SUBSCRIPTION;
ipp_state_e IPP_DATA;
ipp_op_e IPP_DEACTIVATE_PRINTER;
ipp_op_e IPP_DELETE_DOCUMENT;
ipp_status_e IPP_DEVICE_ERROR;
ipp_op_e IPP_DISABLE_PRINTER;
ipp_status_e IPP_DOCUMENT_ACCESS_ERROR;
ipp_status_e IPP_DOCUMENT_FORMAT;
ipp_status_e IPP_DOCUMENT_FORMAT_ERROR;
ipp_op_e IPP_ENABLE_PRINTER;
ipp_state_e IPP_ERROR;
ipp_status_e IPP_ERROR_JOB_CANCELED;
ipp_finish_e IPP_FINISHINGS_BALE;
ipp_finish_e IPP_FINISHINGS_BIND;
ipp_finish_e IPP_FINISHINGS_BIND_BOTTOM;
ipp_finish_e IPP_FINISHINGS_BIND_LEFT;
ipp_finish_e IPP_FINISHINGS_BIND_RIGHT;
ipp_finish_e IPP_FINISHINGS_BIND_TOP;
ipp_finish_e IPP_FINISHINGS_BOOKLET_MAKER;
ipp_finish_e IPP_FINISHINGS_COVER;
ipp_finish_e IPP_FINISHINGS_EDGE_STITCH;
ipp_finish_e IPP_FINISHINGS_EDGE_STITCH_BOTTOM;
ipp_finish_e IPP_FINISHINGS_EDGE_STITCH_LEFT;
ipp_finish_e IPP_FINISHINGS_EDGE_STITCH_RIGHT;
ipp_finish_e IPP_FINISHINGS_EDGE_STITCH_TOP;
ipp_finish_e IPP_FINISHINGS_FOLD;
ipp_finish_e IPP_FINISHINGS_JOB_OFFSET;
ipp_finish_e IPP_FINISHINGS_NONE;
ipp_finish_e IPP_FINISHINGS_PUNCH;
ipp_finish_e IPP_FINISHINGS_SADDLE_STITCH;
ipp_finish_e IPP_FINISHINGS_STAPLE;
ipp_finish_e IPP_FINISHINGS_STAPLE_BOTTOM_LEFT;
ipp_finish_e IPP_FINISHINGS_STAPLE_BOTTOM_RIGHT;
ipp_finish_e IPP_FINISHINGS_STAPLE_DUAL_BOTTOM;
ipp_finish_e IPP_FINISHINGS_STAPLE_DUAL_LEFT;
ipp_finish_e IPP_FINISHINGS_STAPLE_DUAL_RIGHT;
ipp_finish_e IPP_FINISHINGS_STAPLE_DUAL_TOP;
ipp_finish_e IPP_FINISHINGS_STAPLE_TOP_LEFT;
ipp_finish_e IPP_FINISHINGS_STAPLE_TOP_RIGHT;
ipp_finish_e IPP_FINISHINGS_TRIM;
ipp_status_e IPP_FORBIDDEN;
ipp_op_e IPP_GET_DOCUMENTS;
ipp_op_e IPP_GET_DOCUMENT_ATTRIBUTES;
ipp_op_e IPP_GET_JOBS;
ipp_op_e IPP_GET_JOB_ATTRIBUTES;
ipp_op_e IPP_GET_NOTIFICATIONS;
ipp_op_e IPP_GET_PRINTER_ATTRIBUTES;
ipp_op_e IPP_GET_PRINTER_SUPPORTED_VALUES;
ipp_op_e IPP_GET_PRINT_SUPPORT_FILES;
ipp_op_e IPP_GET_SUBSCRIPTIONS;
ipp_op_e IPP_GET_SUBSCRIPTION_ATTRIBUTES;
ipp_status_e IPP_GONE;
ipp_state_e IPP_HEADER;
ipp_op_e IPP_HOLD_JOB;
ipp_op_e IPP_HOLD_NEW_JOBS;
ipp_state_e IPP_IDLE;
ipp_status_e IPP_IGNORED_ALL_NOTIFICATIONS;
ipp_status_e IPP_IGNORED_ALL_SUBSCRIPTIONS;
ipp_status_e IPP_INTERNAL_ERROR;
ipp_jstate_e IPP_JOB_ABORTED;
ipp_jstate_e IPP_JOB_CANCELED;
ipp_jstate_e IPP_JOB_COMPLETED;
ipp_jstate_e IPP_JOB_HELD;
ipp_jstate_e IPP_JOB_PENDING;
ipp_jstate_e IPP_JOB_PROCESSING;
ipp_jstate_e IPP_JOB_STOPPED;
ipp_orient_e IPP_LANDSCAPE;
MACRO_IPP IPP_MAX_LENGTH;
MACRO_IPP IPP_MAX_NAME;
MACRO_IPP IPP_MAX_VALUES;
ipp_status_e IPP_MULTIPLE_JOBS_NOT_SUPPORTED;
ipp_status_e IPP_NOT_ACCEPTING;
ipp_status_e IPP_NOT_AUTHENTICATED;
ipp_status_e IPP_NOT_AUTHORIZED;
ipp_status_e IPP_NOT_FOUND;
ipp_status_e IPP_NOT_POSSIBLE;
ipp_status_e IPP_OK;
ipp_status_e IPP_OK_BUT_CANCEL_SUBSCRIPTION;
ipp_status_e IPP_OK_CONFLICT;
ipp_status_e IPP_OK_EVENTS_COMPLETE;
ipp_status_e IPP_OK_IGNORED_NOTIFICATIONS;
ipp_status_e IPP_OK_IGNORED_SUBSCRIPTIONS;
ipp_status_e IPP_OK_SUBST;
ipp_status_e IPP_OK_TOO_MANY_EVENTS;
ipp_status_e IPP_OPERATION_NOT_SUPPORTED;
ipp_op_e IPP_PAUSE_PRINTER;
ipp_op_e IPP_PAUSE_PRINTER_AFTER_CURRENT_JOB;
ipp_status_e IPP_PKI_ERROR;
MACRO_IPP IPP_PORT;
ipp_orient_e IPP_PORTRAIT;
ipp_status_e IPP_PRINTER_BUSY;
ipp_pstate_e IPP_PRINTER_IDLE;
ipp_status_e IPP_PRINTER_IS_DEACTIVATED;
ipp_pstate_e IPP_PRINTER_PROCESSING;
ipp_pstate_e IPP_PRINTER_STOPPED;
ipp_op_e IPP_PRINT_JOB;
ipp_status_e IPP_PRINT_SUPPORT_FILE_NOT_FOUND;
ipp_op_e IPP_PRINT_URI;
ipp_op_e IPP_PRIVATE;
ipp_op_e IPP_PROMOTE_JOB;
ipp_op_e IPP_PURGE_JOBS;
ipp_quality_e IPP_QUALITY_DRAFT;
ipp_quality_e IPP_QUALITY_HIGH;
ipp_quality_e IPP_QUALITY_NORMAL;
ipp_status_e IPP_REDIRECTION_OTHER_SITE;
ipp_op_e IPP_RELEASE_HELD_NEW_JOBS;
ipp_op_e IPP_RELEASE_JOB;
ipp_op_e IPP_RENEW_SUBSCRIPTION;
ipp_op_e IPP_REPROCESS_JOB;
ipp_status_e IPP_REQUEST_ENTITY;
ipp_status_e IPP_REQUEST_VALUE;
ipp_op_e IPP_RESTART_JOB;
ipp_op_e IPP_RESTART_PRINTER;
ipp_op_e IPP_RESUBMIT_JOB;
ipp_op_e IPP_RESUME_JOB;
ipp_op_e IPP_RESUME_PRINTER;
ipp_res_e IPP_RES_PER_CM;
ipp_res_e IPP_RES_PER_INCH;
ipp_orient_e IPP_REVERSE_LANDSCAPE;
ipp_orient_e IPP_REVERSE_PORTRAIT;
ipp_op_e IPP_SCHEDULE_JOB_AFTER;
ipp_op_e IPP_SEND_DOCUMENT;
ipp_op_e IPP_SEND_NOTIFICATIONS;
ipp_op_e IPP_SEND_URI;
ipp_status_e IPP_SERVICE_UNAVAILABLE;
ipp_op_e IPP_SET_DOCUMENT_ATTRIBUTES;
ipp_op_e IPP_SET_JOB_ATTRIBUTES;
ipp_op_e IPP_SET_PRINTER_ATTRIBUTES;
ipp_op_e IPP_SHUTDOWN_PRINTER;
ipp_op_e IPP_STARTUP_PRINTER;
ipp_op_e IPP_SUSPEND_CURRENT_JOB;
ipp_tag_e IPP_TAG_ADMINDEFINE;
ipp_tag_e IPP_TAG_BEGIN_COLLECTION;
ipp_tag_e IPP_TAG_BOOLEAN;
ipp_tag_e IPP_TAG_CHARSET;
ipp_tag_e IPP_TAG_COPY;
ipp_tag_e IPP_TAG_DATE;
ipp_tag_e IPP_TAG_DEFAULT;
ipp_tag_e IPP_TAG_DELETEATTR;
ipp_tag_e IPP_TAG_END;
ipp_tag_e IPP_TAG_END_COLLECTION;
ipp_tag_e IPP_TAG_ENUM;
ipp_tag_e IPP_TAG_EVENT_NOTIFICATION;
ipp_tag_e IPP_TAG_INTEGER;
ipp_tag_e IPP_TAG_JOB;
ipp_tag_e IPP_TAG_KEYWORD;
ipp_tag_e IPP_TAG_LANGUAGE;
ipp_tag_e IPP_TAG_MASK;
ipp_tag_e IPP_TAG_MEMBERNAME;
ipp_tag_e IPP_TAG_MIMETYPE;
ipp_tag_e IPP_TAG_NAME;
ipp_tag_e IPP_TAG_NAMELANG;
ipp_tag_e IPP_TAG_NOTSETTABLE;
ipp_tag_e IPP_TAG_NOVALUE;
ipp_tag_e IPP_TAG_OPERATION;
ipp_tag_e IPP_TAG_PRINTER;
ipp_tag_e IPP_TAG_RANGE;
ipp_tag_e IPP_TAG_RESERVED_STRING;
ipp_tag_e IPP_TAG_RESOLUTION;
ipp_tag_e IPP_TAG_STRING;
ipp_tag_e IPP_TAG_SUBSCRIPTION;
ipp_tag_e IPP_TAG_TEXT;
ipp_tag_e IPP_TAG_TEXTLANG;
ipp_tag_e IPP_TAG_UNKNOWN;
ipp_tag_e IPP_TAG_UNSUPPORTED_GROUP;
ipp_tag_e IPP_TAG_UNSUPPORTED_VALUE;
ipp_tag_e IPP_TAG_URI;
ipp_tag_e IPP_TAG_URISCHEME;
ipp_tag_e IPP_TAG_ZERO;
ipp_status_e IPP_TEMPORARY_ERROR;
ipp_status_e IPP_TIMEOUT;
ipp_status_e IPP_TOO_MANY_SUBSCRIPTIONS;
ipp_status_e IPP_UPGRADE_REQUIRED;
ipp_status_e IPP_URI_SCHEME;
ipp_op_e IPP_VALIDATE_JOB;
ipp_status_e IPP_VERSION_NOT_SUPPORTED;
MACRO_IPSEC IPSEC_DIR_ANY;
MACRO_IPSEC IPSEC_DIR_INBOUND;
MACRO_IPSEC IPSEC_DIR_INVALID;
MACRO_IPSEC IPSEC_DIR_MAX;
MACRO_IPSEC IPSEC_DIR_OUTBOUND;
MACRO_IPSEC IPSEC_LEVEL_DEFAULT;
MACRO_IPSEC IPSEC_LEVEL_REQUIRE;
MACRO_IPSEC IPSEC_LEVEL_UNIQUE;
MACRO_IPSEC IPSEC_LEVEL_USE;
MACRO_IPSEC IPSEC_MANUAL_REQID_MAX;
MACRO_IPSEC IPSEC_MODE_ANY;
MACRO_IPSEC IPSEC_MODE_TRANSPORT;
MACRO_IPSEC IPSEC_MODE_TUNNEL;
MACRO_IPSEC IPSEC_POLICY_BYPASS;
MACRO_IPSEC IPSEC_POLICY_DISCARD;
MACRO_IPSEC IPSEC_POLICY_ENTRUST;
MACRO_IPSEC IPSEC_POLICY_GENERATE;
MACRO_IPSEC IPSEC_POLICY_IPSEC;
MACRO_IPSEC IPSEC_POLICY_NONE;
MACRO_IPSEC IPSEC_PORT_ANY;
MACRO_IPSEC IPSEC_PROTO_ANY;
MACRO_IPSEC IPSEC_REPLAYWSIZE;
MACRO_IPSEC IPSEC_ULPROTO_ANY;
MACRO_IPTOS IPTOS_CE;
MACRO_IPTOS IPTOS_ECN_CE;
MACRO_IPTOS IPTOS_ECN_ECT0;
MACRO_IPTOS IPTOS_ECN_ECT1;
MACRO_IPTOS IPTOS_ECN_MASK;
MACRO_IPTOS IPTOS_ECN_NOTECT;
MACRO_IPTOS IPTOS_ECT;
MACRO_IPTOS IPTOS_LOWDELAY;
MACRO_IPTOS IPTOS_MINCOST;
MACRO_IPTOS IPTOS_PREC_CRITIC_ECP;
MACRO_IPTOS IPTOS_PREC_FLASH;
MACRO_IPTOS IPTOS_PREC_FLASHOVERRIDE;
MACRO_IPTOS IPTOS_PREC_IMMEDIATE;
MACRO_IPTOS IPTOS_PREC_INTERNETCONTROL;
MACRO_IPTOS IPTOS_PREC_NETCONTROL;
MACRO_IPTOS IPTOS_PREC_PRIORITY;
MACRO_IPTOS IPTOS_PREC_ROUTINE;
MACRO_IPTOS IPTOS_RELIABILITY;
MACRO_IPTOS IPTOS_THROUGHPUT;
MACRO_IPTTLDEC IPTTLDEC;
MACRO_IPV6CTL IPV6CTL_ACCEPT_RTADV;
MACRO_IPV6CTL IPV6CTL_ADDRCTLPOLICY;
MACRO_IPV6CTL IPV6CTL_AUTO_FLOWLABEL;
MACRO_IPV6CTL IPV6CTL_AUTO_LINKLOCAL;
MACRO_IPV6CTL IPV6CTL_DAD_COUNT;
MACRO_IPV6CTL IPV6CTL_DEFHLIM;
MACRO_IPV6CTL IPV6CTL_DEFMCASTHLIM;
MACRO_IPV6CTL IPV6CTL_FORWARDING;
MACRO_IPV6CTL IPV6CTL_FORWSRCRT;
MACRO_IPV6CTL IPV6CTL_GIF_HLIM;
MACRO_IPV6CTL IPV6CTL_HDRNESTLIMIT;
MACRO_IPV6CTL IPV6CTL_KAME_VERSION;
MACRO_IPV6CTL IPV6CTL_KEEPFAITH;
MACRO_IPV6CTL IPV6CTL_LOG_INTERVAL;
MACRO_IPV6CTL IPV6CTL_MAXDYNROUTES;
MACRO_IPV6CTL IPV6CTL_MAXFRAGPACKETS;
MACRO_IPV6CTL IPV6CTL_MAXFRAGS;
MACRO_IPV6CTL_MAXID IPV6CTL_MAXID;
MACRO_IPV6CTL IPV6CTL_MAXIFDEFROUTERS;
MACRO_IPV6CTL IPV6CTL_MAXIFPREFIXES;
MACRO_IPV6CTL IPV6CTL_MCAST_PMTU;
MACRO_IPV6CTL IPV6CTL_MRTPROTO;
MACRO_IPV6CTL IPV6CTL_MRTSTATS;
MACRO_IPV6CTL IPV6CTL_NEIGHBORGCTHRESH;
MACRO_IPV6CTL IPV6CTL_PREFER_TEMPADDR;
MACRO_IPV6CTL IPV6CTL_RIP6STATS;
MACRO_IPV6CTL IPV6CTL_RR_PRUNE;
MACRO_IPV6CTL IPV6CTL_RTEXPIRE;
MACRO_IPV6CTL IPV6CTL_RTMAXCACHE;
MACRO_IPV6CTL IPV6CTL_RTMINEXPIRE;
MACRO_IPV6CTL IPV6CTL_SENDREDIRECTS;
MACRO_IPV6CTL IPV6CTL_SOURCECHECK;
MACRO_IPV6CTL IPV6CTL_SOURCECHECK_LOGINT;
MACRO_IPV6CTL IPV6CTL_STATS;
MACRO_IPV6CTL IPV6CTL_TEMPPLTIME;
MACRO_IPV6CTL IPV6CTL_TEMPVLTIME;
MACRO_IPV6CTL IPV6CTL_USETEMPADDR;
MACRO_IPV6CTL IPV6CTL_USE_DEFAULTZONE;
MACRO_IPV6CTL IPV6CTL_USE_DEPRECATED;
MACRO_IPV6CTL IPV6CTL_V6ONLY;
MACRO_IPV6PORT IPV6PORT_ANONMAX;
MACRO_IPV6PORT IPV6PORT_ANONMIN;
MACRO_IPV6PORT IPV6PORT_RESERVED;
MACRO_IPV6PORT IPV6PORT_RESERVEDMAX;
MACRO_IPV6PORT IPV6PORT_RESERVEDMIN;
MACRO_IPV6PROTO IPV6PROTO_MAXID;
MACRO_IPV6_2292PKTINFO IPV6_2292DSTOPTS;
MACRO_IPV6_2292PKTINFO IPV6_2292HOPLIMIT;
MACRO_IPV6_2292PKTINFO IPV6_2292HOPOPTS;
MACRO_IPV6_2292PKTINFO IPV6_2292NEXTHOP;
MACRO_IPV6_2292PKTINFO IPV6_2292PKTINFO;
MACRO_IPV6_2292PKTINFO IPV6_2292PKTOPTIONS;
MACRO_IPV6_2292PKTINFO IPV6_2292RTHDR;
MACRO_IPV6_2292PKTINFO IPV6_BINDV6ONLY;
MACRO_IPV6_2292PKTINFO IPV6_BOUND_IF;
MACRO_IPV6_2292PKTINFO IPV6_CHECKSUM;
MACRO_IPV6_2292PKTINFO IPV6_DEFAULT_MULTICAST_HOPS;
MACRO_IPV6_2292PKTINFO IPV6_DEFAULT_MULTICAST_LOOP;
MACRO_IPV6_MAXHLIM IPV6_DEFHLIM;
MACRO_IPV6_2292PKTINFO IPV6_FAITH;
MACRO_IPV6_VERSION IPV6_FLOWINFO_MASK;
MACRO_IPV6_VERSION IPV6_FLOWLABEL_MASK;
MACRO_IPV6_MAXHLIM IPV6_FRAGTTL;
MACRO_IPV6_2292PKTINFO IPV6_FW_ADD;
MACRO_IPV6_2292PKTINFO IPV6_FW_DEL;
MACRO_IPV6_2292PKTINFO IPV6_FW_FLUSH;
MACRO_IPV6_2292PKTINFO IPV6_FW_GET;
MACRO_IPV6_2292PKTINFO IPV6_FW_ZERO;
MACRO_IPV6_MAXHLIM IPV6_HLIMDEC;
MACRO_IPV6_2292PKTINFO IPV6_IPSEC_POLICY;
MACRO_IPV6 IPV6_JOIN_GROUP;
MACRO_IPV6 IPV6_LEAVE_GROUP;
MACRO_IPV6_MAXHLIM IPV6_MAXHLIM;
MACRO_IPV6_MAXHLIM IPV6_MAXOPTHDR;
MACRO_IPV6_MAXHLIM IPV6_MAXPACKET;
MACRO_IPV6_2292PKTINFO IPV6_MAX_GROUP_SRC_FILTER;
MACRO_IPV6_2292PKTINFO IPV6_MAX_MEMBERSHIPS;
MACRO_IPV6_2292PKTINFO IPV6_MAX_SOCK_SRC_FILTER;
MACRO_IPV6_2292PKTINFO IPV6_MIN_MEMBERSHIPS;
MACRO_IPV6_MAXHLIM IPV6_MMTU;
MACRO_IPV6 IPV6_MULTICAST_HOPS;
MACRO_IPV6 IPV6_MULTICAST_IF;
MACRO_IPV6 IPV6_MULTICAST_LOOP;
MACRO_IPV6 IPV6_PORTRANGE;
MACRO_IPV6_2292PKTINFO IPV6_PORTRANGE_DEFAULT;
MACRO_IPV6_2292PKTINFO IPV6_PORTRANGE_HIGH;
MACRO_IPV6_2292PKTINFO IPV6_PORTRANGE_LOW;
MACRO_IPV6_2292PKTINFO IPV6_RECVTCLASS;
MACRO_IPV6_2292PKTINFO IPV6_RTHDR_LOOSE;
MACRO_IPV6_2292PKTINFO IPV6_RTHDR_STRICT;
MACRO_IPV6_2292PKTINFO IPV6_RTHDR_TYPE_0;
MACRO_IPV6 IPV6_SOCKOPT_RESERVED1;
MACRO_IPV6_2292PKTINFO IPV6_TCLASS;
MACRO_IPV6 IPV6_UNICAST_HOPS;
MACRO_IPV6_2292PKTINFO IPV6_V6ONLY;
MACRO_IPV6_VERSION IPV6_VERSION;
MACRO_IPV6_VERSION IPV6_VERSION_MASK;
MACRO_IPVERSION IPVERSION;
MACRO_IP_ADDR IP_ADDR_TYPE;
MACRO_IP IP_ADD_MEMBERSHIP;
MACRO_IP IP_ADD_SOURCE_MEMBERSHIP;
MACRO_IP IP_BLOCK_SOURCE;
MACRO_IP IP_BOUND_IF;
MACRO_IP_DEFAULT IP_DEFAULT_MULTICAST_LOOP;
MACRO_IP_DEFAULT IP_DEFAULT_MULTICAST_TTL;
MACRO_IP_RF IP_DF;
MACRO_IP IP_DROP_MEMBERSHIP;
MACRO_IP IP_DROP_SOURCE_MEMBERSHIP;
MACRO_IP IP_DUMMYNET_CONFIGURE;
MACRO_IP IP_DUMMYNET_DEL;
MACRO_IP IP_DUMMYNET_FLUSH;
MACRO_IP IP_DUMMYNET_GET;
MACRO_IP IP_FAITH;
MACRO_IP IP_FW_ADD;
MACRO_IP_FW IP_FW_CURRENT_API_VERSION;
MACRO_IP IP_FW_DEL;
MACRO_IP IP_FW_FLUSH;
MACRO_IP IP_FW_GET;
MACRO_IP_FW_IPOPT IP_FW_IPOPT_LSRR;
MACRO_IP_FW_IPOPT IP_FW_IPOPT_RR;
MACRO_IP_FW_IPOPT IP_FW_IPOPT_SSRR;
MACRO_IP_FW_IPOPT IP_FW_IPOPT_TS;
MACRO_IP IP_FW_RESETLOG;
MACRO_IP_FW_IPOPT IP_FW_TCPOPT_CC;
MACRO_IP_FW_IPOPT IP_FW_TCPOPT_MSS;
MACRO_IP_FW_IPOPT IP_FW_TCPOPT_SACK;
MACRO_IP_FW_IPOPT IP_FW_TCPOPT_TS;
MACRO_IP_FW_IPOPT IP_FW_TCPOPT_WINDOW;
MACRO_IP_FW IP_FW_VERSION_0;
MACRO_IP_FW IP_FW_VERSION_1;
MACRO_IP_FW IP_FW_VERSION_2;
MACRO_IP_FW IP_FW_VERSION_NONE;
MACRO_IP IP_FW_ZERO;
MACRO_IP IP_HDRINCL;
MACRO_IP IP_IPSEC_POLICY;
MACRO_IP_RF IP_MAXPACKET;
MACRO_IP_DEFAULT IP_MAX_GROUP_SRC_FILTER;
MACRO_IP_DEFAULT IP_MAX_MEMBERSHIPS;
MACRO_IP_DEFAULT IP_MAX_SOCK_MUTE_FILTER;
MACRO_IP_DEFAULT IP_MAX_SOCK_SRC_FILTER;
MACRO_IP_RF IP_MF;
MACRO_IP_DEFAULT IP_MIN_MEMBERSHIPS;
MACRO_IP IP_MSFILTER;
MACRO_IP_MSS IP_MSS;
MACRO_IP IP_MULTICAST_IF;
MACRO_IP IP_MULTICAST_IFINDEX;
MACRO_IP IP_MULTICAST_LOOP;
MACRO_IP IP_MULTICAST_TTL;
MACRO_IP IP_MULTICAST_VIF;
MACRO_IP IP_NAT__XXX;
MACRO_IP_RF IP_OFFMASK;
MACRO_IP IP_OLD_FW_ADD;
MACRO_IP IP_OLD_FW_DEL;
MACRO_IP IP_OLD_FW_FLUSH;
MACRO_IP IP_OLD_FW_GET;
MACRO_IP IP_OLD_FW_RESETLOG;
MACRO_IP IP_OLD_FW_ZERO;
MACRO_IP IP_OPTIONS;
MACRO_IP IP_PKTINFO;
MACRO_IP IP_PORTRANGE;
MACRO_IP_PORTRANGE IP_PORTRANGE_DEFAULT;
MACRO_IP_PORTRANGE IP_PORTRANGE_HIGH;
MACRO_IP_PORTRANGE IP_PORTRANGE_LOW;
MACRO_IP IP_RECVDSTADDR;
MACRO_IP IP_RECVIF;
MACRO_IP IP_RECVOPTS;
MACRO_IP IP_RECVPKTINFO;
MACRO_IP IP_RECVRETOPTS;
MACRO_IP IP_RECVTTL;
MACRO_IP IP_RETOPTS;
MACRO_IP_RF IP_RF;
MACRO_IP IP_RSVP_OFF;
MACRO_IP IP_RSVP_ON;
MACRO_IP IP_RSVP_VIF_OFF;
MACRO_IP IP_RSVP_VIF_ON;
MACRO_IP IP_STRIPHDR;
MACRO_IP IP_TOS;
MACRO_IP IP_TRAFFIC_MGT_BACKGROUND;
MACRO_IP IP_TTL;
MACRO_IP IP_UNBLOCK_SOURCE;
MACRO_ISFUNC ISFUNC;
MACRO_ECHOKE ISIG;
MACRO_ISFUNC ISKMAP;
MACRO_ISFUNC ISMACR;
MACRO_IGNBRK ISTRIP;
MACRO_IS IS_SEQUENCE;
MACRO_IS IS_SET;
MACRO_ITEM ITEM_TASKS;
MACRO_ITEM ITEM_THREADS;
MACRO_ITEM ITEM_VM;
MACRO_ITIMER ITIMER_PROF;
MACRO_ITIMER ITIMER_REAL;
MACRO_ITIMER ITIMER_VIRTUAL;
MACRO_IGNBRK IUTF8;
MACRO_IGNBRK IXANY;
MACRO_IGNBRK IXOFF;
MACRO_IGNBRK IXON;
MACRO_JUSTIFY JUSTIFY_CENTER;
MACRO_JUSTIFY JUSTIFY_LEFT;
MACRO_JUSTIFY JUSTIFY_RIGHT;
MACRO_KAUTH_UID KAUTH_ACE_ALARM;
MACRO_KAUTH_UID KAUTH_ACE_AUDIT;
MACRO_KAUTH_UID KAUTH_ACE_DENY;
MACRO_KAUTH_UID KAUTH_ACE_DIRECTORY_INHERIT;
MACRO_KAUTH_UID KAUTH_ACE_FAILURE;
MACRO_KAUTH_UID KAUTH_ACE_FILE_INHERIT;
MACRO_KAUTH_UID KAUTH_ACE_GENERIC_ALL;
MACRO_KAUTH_UID KAUTH_ACE_GENERIC_EXECUTE;
MACRO_KAUTH_UID KAUTH_ACE_GENERIC_READ;
MACRO_KAUTH_UID KAUTH_ACE_GENERIC_WRITE;
MACRO_KAUTH_UID KAUTH_ACE_INHERITED;
MACRO_KAUTH_UID KAUTH_ACE_INHERIT_CONTROL_FLAGS;
MACRO_KAUTH_UID KAUTH_ACE_KINDMASK;
MACRO_KAUTH_UID KAUTH_ACE_LIMIT_INHERIT;
MACRO_KAUTH_UID KAUTH_ACE_ONLY_INHERIT;
MACRO_KAUTH_UID KAUTH_ACE_PERMIT;
MACRO_KAUTH_UID KAUTH_ACE_SUCCESS;
MACRO_KAUTH_UID KAUTH_ACL_DEFER_INHERIT;
MACRO_KAUTH_UID KAUTH_ACL_FLAGS_PRIVATE;
MACRO_KAUTH_UID KAUTH_ACL_MAX_ENTRIES;
MACRO_KAUTH_UID KAUTH_ACL_NO_INHERIT;
MACRO_KAUTH_UID KAUTH_ENDIAN_DISK;
MACRO_KAUTH_UID KAUTH_ENDIAN_HOST;
MACRO_KAUTH_UID KAUTH_EXTLOOKUP_BADRQ;
MACRO_KAUTH_UID KAUTH_EXTLOOKUP_DEREGISTER;
MACRO_KAUTH_UID KAUTH_EXTLOOKUP_FAILURE;
MACRO_KAUTH_UID KAUTH_EXTLOOKUP_FATAL;
MACRO_KAUTH_UID KAUTH_EXTLOOKUP_INPROG;
MACRO_KAUTH_UID KAUTH_EXTLOOKUP_ISMEMBER;
MACRO_KAUTH_UID KAUTH_EXTLOOKUP_REGISTER;
MACRO_KAUTH_UID KAUTH_EXTLOOKUP_RESULT;
MACRO_KAUTH_UID KAUTH_EXTLOOKUP_SUCCESS;
MACRO_KAUTH_UID KAUTH_EXTLOOKUP_VALID_GGUID;
MACRO_KAUTH_UID KAUTH_EXTLOOKUP_VALID_GID;
MACRO_KAUTH_UID KAUTH_EXTLOOKUP_VALID_GRNAM;
MACRO_KAUTH_UID KAUTH_EXTLOOKUP_VALID_GSID;
MACRO_KAUTH_UID KAUTH_EXTLOOKUP_VALID_MEMBERSHIP;
MACRO_KAUTH_UID KAUTH_EXTLOOKUP_VALID_PWNAM;
MACRO_KAUTH_UID KAUTH_EXTLOOKUP_VALID_UGUID;
MACRO_KAUTH_UID KAUTH_EXTLOOKUP_VALID_UID;
MACRO_KAUTH_UID KAUTH_EXTLOOKUP_VALID_USID;
MACRO_KAUTH_UID KAUTH_EXTLOOKUP_WANT_GGUID;
MACRO_KAUTH_UID KAUTH_EXTLOOKUP_WANT_GID;
MACRO_KAUTH_UID KAUTH_EXTLOOKUP_WANT_GRNAM;
MACRO_KAUTH_UID KAUTH_EXTLOOKUP_WANT_GSID;
MACRO_KAUTH_UID KAUTH_EXTLOOKUP_WANT_MEMBERSHIP;
MACRO_KAUTH_UID KAUTH_EXTLOOKUP_WANT_PWNAM;
MACRO_KAUTH_UID KAUTH_EXTLOOKUP_WANT_UGUID;
MACRO_KAUTH_UID KAUTH_EXTLOOKUP_WANT_UID;
MACRO_KAUTH_UID KAUTH_EXTLOOKUP_WANT_USID;
MACRO_KAUTH_UID KAUTH_EXTLOOKUP_WORKER;
MACRO_KAUTH_UID KAUTH_FILESEC_DEFER_INHERIT;
MACRO_KAUTH_UID KAUTH_FILESEC_FLAGS_PRIVATE;
MACRO_KAUTH_UID KAUTH_FILESEC_MAGIC;
MACRO_KAUTH_UID KAUTH_FILESEC_NOACL;
MACRO_KAUTH_UID KAUTH_FILESEC_NONE;
MACRO_KAUTH_UID KAUTH_FILESEC_NO_INHERIT;
MACRO_KAUTH_UID KAUTH_FILESEC_WANTED;
MACRO_KAUTH_UID KAUTH_GID_NONE;
MACRO_KAUTH KAUTH_GUID_SIZE;
MACRO_KAUTH_UID KAUTH_NTSID_HDRSIZE;
MACRO_KAUTH_UID KAUTH_NTSID_MAX_AUTHORITIES;
MACRO_KAUTH_UID KAUTH_UID_NONE;
MACRO_KAUTH_UID KAUTH_VNODE_ACCESS;
MACRO_KAUTH_UID KAUTH_VNODE_ADD_FILE;
MACRO_KAUTH_UID KAUTH_VNODE_ADD_SUBDIRECTORY;
MACRO_KAUTH_UID KAUTH_VNODE_APPEND_DATA;
MACRO_KAUTH_UID KAUTH_VNODE_CHANGE_OWNER;
MACRO_KAUTH_UID KAUTH_VNODE_CHECKIMMUTABLE;
MACRO_KAUTH_UID KAUTH_VNODE_DELETE;
MACRO_KAUTH_UID KAUTH_VNODE_DELETE_CHILD;
MACRO_KAUTH_UID KAUTH_VNODE_EXECUTE;
MACRO_KAUTH_UID KAUTH_VNODE_GENERIC_ALL_BITS;
MACRO_KAUTH_UID KAUTH_VNODE_GENERIC_EXECUTE_BITS;
MACRO_KAUTH_UID KAUTH_VNODE_GENERIC_READ_BITS;
MACRO_KAUTH_UID KAUTH_VNODE_GENERIC_WRITE_BITS;
MACRO_KAUTH_UID KAUTH_VNODE_LINKTARGET;
MACRO_KAUTH_UID KAUTH_VNODE_LIST_DIRECTORY;
MACRO_KAUTH_UID KAUTH_VNODE_NOIMMUTABLE;
MACRO_KAUTH_UID KAUTH_VNODE_READ_ATTRIBUTES;
MACRO_KAUTH_UID KAUTH_VNODE_READ_DATA;
MACRO_KAUTH_UID KAUTH_VNODE_READ_EXTATTRIBUTES;
MACRO_KAUTH_UID KAUTH_VNODE_READ_SECURITY;
MACRO_KAUTH_UID KAUTH_VNODE_SEARCH;
MACRO_KAUTH_UID KAUTH_VNODE_SEARCHBYANYONE;
MACRO_KAUTH_UID KAUTH_VNODE_SYNCHRONIZE;
MACRO_KAUTH_UID KAUTH_VNODE_TAKE_OWNERSHIP;
MACRO_KAUTH_UID KAUTH_VNODE_WRITE_ATTRIBUTES;
MACRO_KAUTH_UID KAUTH_VNODE_WRITE_DATA;
MACRO_KAUTH_UID KAUTH_VNODE_WRITE_EXTATTRIBUTES;
MACRO_KAUTH_UID KAUTH_VNODE_WRITE_RIGHTS;
MACRO_KAUTH_UID KAUTH_VNODE_WRITE_SECURITY;
MACRO_KDC KDC_OPT_ALLOW_POSTDATE;
MACRO_KDC KDC_OPT_CANONICALIZE;
MACRO_KDC KDC_OPT_DISABLE_TRANSITED_CHECK;
MACRO_KDC KDC_OPT_ENC_TKT_IN_SKEY;
MACRO_KDC KDC_OPT_FORWARDABLE;
MACRO_KDC KDC_OPT_FORWARDED;
MACRO_KDC KDC_OPT_POSTDATED;
MACRO_KDC KDC_OPT_PROXIABLE;
MACRO_KDC KDC_OPT_PROXY;
MACRO_KDC KDC_OPT_RENEW;
MACRO_KDC KDC_OPT_RENEWABLE;
MACRO_KDC KDC_OPT_RENEWABLE_OK;
MACRO_KDC KDC_OPT_REQUEST_ANONYMOUS;
MACRO_KDC KDC_OPT_VALIDATE;
MACRO_KDC KDC_TKT_COMMON_MASK;
MACRO_KDEBUG KDEBUG_ENABLE_CHUD;
MACRO_KDEBUG KDEBUG_ENABLE_ENTROPY;
MACRO_KDEBUG KDEBUG_ENABLE_TRACE;
MACRO_HOST KERNEL_BOOT_INFO_MAX;
MACRO_HOST KERNEL_VERSION_MAX;
MACRO_KERN KERN_ABORTED;
MACRO_KERN_OSTYPE KERN_AFFINITY;
MACRO_KERN_OSTYPE KERN_AIOMAX;
MACRO_KERN_OSTYPE KERN_AIOPROCMAX;
MACRO_KERN_OSTYPE KERN_AIOTHREADS;
MACRO_KERN KERN_ALREADY_IN_SET;
MACRO_KERN KERN_ALREADY_WAITING;
MACRO_KERN_OSTYPE KERN_ARGMAX;
MACRO_KERN_OSTYPE KERN_BOOTFILE;
MACRO_KERN_OSTYPE KERN_BOOTTIME;
MACRO_KERN_OSTYPE KERN_CHECKOPENEVT;
MACRO_KERN_OSTYPE KERN_CLASSIC;
MACRO_KERN_OSTYPE KERN_CLASSICHANDLER;
MACRO_KERN_OSTYPE KERN_CLOCKRATE;
MACRO_KERN KERN_CODESIGN_ERROR;
MACRO_KERN_CODE KERN_CODE_SELECTOR;
MACRO_KERN_OSTYPE KERN_COREDUMP;
MACRO_KERN_OSTYPE KERN_COREFILE;
MACRO_KERN_CODE KERN_DATA_SELECTOR;
MACRO_KERN KERN_DEFAULT_SET;
MACRO_KERN_OSTYPE KERN_DOMAINNAME;
MACRO_KERN_OSTYPE KERN_DUMMY;
MACRO_KERN_OSTYPE KERN_DUMPDEV;
MACRO_KERN KERN_EXCEPTION_PROTECTED;
MACRO_KERN_OSTYPE KERN_EXEC;
MACRO_KERN KERN_FAILURE;
MACRO_KERN_OSTYPE KERN_FILE;
MACRO_KERN_OSTYPE KERN_HOSTID;
MACRO_KERN_OSTYPE KERN_HOSTNAME;
MACRO_KERN KERN_INVALID_ADDRESS;
MACRO_KERN KERN_INVALID_ARGUMENT;
MACRO_KERN KERN_INVALID_CAPABILITY;
MACRO_KERN KERN_INVALID_HOST;
MACRO_KERN KERN_INVALID_LEDGER;
MACRO_KERN KERN_INVALID_MEMORY_CONTROL;
MACRO_KERN KERN_INVALID_NAME;
MACRO_KERN KERN_INVALID_OBJECT;
MACRO_KERN KERN_INVALID_POLICY;
MACRO_KERN KERN_INVALID_PROCESSOR_SET;
MACRO_KERN KERN_INVALID_RIGHT;
MACRO_KERN KERN_INVALID_SECURITY;
MACRO_KERN KERN_INVALID_TASK;
MACRO_KERN KERN_INVALID_VALUE;
MACRO_KERN_OSTYPE KERN_IPC;
MACRO_KERN_OSTYPE KERN_JOB_CONTROL;
MACRO_KERN_OSTYPE KERN_KDDFLAGS;
MACRO_KERN_OSTYPE KERN_KDEBUG;
MACRO_KERN_OSTYPE KERN_KDEFLAGS;
MACRO_KERN_OSTYPE KERN_KDENABLE;
MACRO_KERN_OSTYPE KERN_KDGETBUF;
MACRO_KERN_OSTYPE KERN_KDGETENTROPY;
MACRO_KERN_OSTYPE KERN_KDGETREG;
MACRO_KERN_OSTYPE KERN_KDPIDEX;
MACRO_KERN_OSTYPE KERN_KDPIDTR;
MACRO_KERN_OSTYPE KERN_KDREADTR;
MACRO_KERN_OSTYPE KERN_KDREMOVE;
MACRO_KERN_OSTYPE KERN_KDSETBUF;
MACRO_KERN_OSTYPE KERN_KDSETREG;
MACRO_KERN_OSTYPE KERN_KDSETRTCDEC;
MACRO_KERN_OSTYPE KERN_KDSETUP;
MACRO_KERN_OSTYPE KERN_KDTHRMAP;
MACRO_KERN_OSTYPE KERN_KDWRITEMAP;
MACRO_KERN_OSTYPE KERN_KDWRITETR;
MACRO_KERN_OSTYPE KERN_LCTX;
MACRO_KERN_OSTYPE KERN_LCTX_ALL;
MACRO_KERN_OSTYPE KERN_LCTX_LCID;
MACRO_KERN KERN_LOCK_OWNED;
MACRO_KERN KERN_LOCK_OWNED_SELF;
MACRO_KERN KERN_LOCK_SET_DESTROYED;
MACRO_KERN KERN_LOCK_UNSTABLE;
MACRO_KERN_OSTYPE KERN_LOGSIGEXIT;
MACRO_KERN_OSTYPE KERN_LOW_PRI_DELAY;
MACRO_KERN_OSTYPE KERN_LOW_PRI_WINDOW;
MACRO_KERN_OSTYPE KERN_MAXFILES;
MACRO_KERN_OSTYPE KERN_MAXFILESPERPROC;
MACRO_KERN_OSTYPE KERN_MAXID;
MACRO_KERN_OSTYPE KERN_MAXPARTITIONS;
MACRO_KERN_OSTYPE KERN_MAXPROC;
MACRO_KERN_OSTYPE KERN_MAXPROCPERUID;
MACRO_KERN_OSTYPE KERN_MAXVNODES;
MACRO_KERN KERN_MEMORY_DATA_MOVED;
MACRO_KERN KERN_MEMORY_ERROR;
MACRO_KERN KERN_MEMORY_FAILURE;
MACRO_KERN KERN_MEMORY_PRESENT;
MACRO_KERN KERN_MEMORY_RESTART_COPY;
MACRO_KERN KERN_NAME_EXISTS;
MACRO_KERN_OSTYPE KERN_NETBOOT;
MACRO_KERN_OSTYPE KERN_NGROUPS;
MACRO_KERN_OSTYPE KERN_NISDOMAINNAME;
MACRO_KERN KERN_NODE_DOWN;
MACRO_KERN KERN_NOT_DEPRESSED;
MACRO_KERN KERN_NOT_IN_SET;
MACRO_KERN KERN_NOT_RECEIVER;
MACRO_KERN KERN_NOT_SUPPORTED;
MACRO_KERN KERN_NOT_WAITING;
MACRO_KERN KERN_NO_ACCESS;
MACRO_KERN KERN_NO_SPACE;
MACRO_KERN_OSTYPE KERN_NTP_PLL;
MACRO_KERN_OSTYPE KERN_NX_PROTECTION;
MACRO_KERN_OSTYPE KERN_OPENEVT_PROC;
MACRO_KERN KERN_OPERATION_TIMED_OUT;
MACRO_KERN_OSTYPE KERN_OSRELDATE;
MACRO_KERN_OSTYPE KERN_OSRELEASE;
MACRO_KERN_OSTYPE KERN_OSREV;
MACRO_KERN_OSTYPE KERN_OSTYPE;
MACRO_KERN_OSTYPE KERN_OSVERSION;
MACRO_KERN_OSTYPE KERN_PANICINFO;
MACRO_KERN_OSTYPE KERN_PANICINFO_IMAGE;
MACRO_KERN_OSTYPE KERN_PANICINFO_MAXSIZE;
MACRO_KERN KERN_POLICY_LIMIT;
MACRO_KERN_OSTYPE KERN_POSIX;
MACRO_KERN_OSTYPE KERN_POSIX1;
MACRO_PRIV KERN_PRIV;
MACRO_KERN_OSTYPE KERN_PROC;
MACRO_KERN_OSTYPE KERN_PROCARGS;
MACRO_KERN_OSTYPE KERN_PROCARGS2;
MACRO_KERN_OSTYPE KERN_PROCDELAYTERM;
MACRO_KERN_OSTYPE KERN_PROCNAME;
MACRO_KERN_OSTYPE KERN_PROC_ALL;
MACRO_KERN_OSTYPE KERN_PROC_LCID;
MACRO_KERN_OSTYPE KERN_PROC_PGRP;
MACRO_KERN_OSTYPE KERN_PROC_PID;
MACRO_KERN_OSTYPE KERN_PROC_RUID;
MACRO_KERN_OSTYPE KERN_PROC_SESSION;
MACRO_KERN_OSTYPE KERN_PROC_TTY;
MACRO_KERN_OSTYPE KERN_PROC_UID;
MACRO_KERN_OSTYPE KERN_PROF;
MACRO_KERN KERN_PROTECTION_FAILURE;
MACRO_KERN_OSTYPE KERN_PS_STRINGS;
MACRO_KERN_OSTYPE KERN_RAGEVNODE;
MACRO_KERN_OSTYPE KERN_RAGE_PROC;
MACRO_KERN_OSTYPE KERN_RAGE_THREAD;
MACRO_KERN KERN_RESOURCE_SHORTAGE;
MACRO_KERN KERN_RETURN_MAX;
MACRO_KERN KERN_RIGHT_EXISTS;
MACRO_KERN KERN_RPC_CONTINUE_ORPHAN;
MACRO_KERN KERN_RPC_SERVER_TERMINATED;
MACRO_KERN KERN_RPC_TERMINATE_ORPHAN;
MACRO_KERN_OSTYPE KERN_SAFEBOOT;
MACRO_KERN_OSTYPE KERN_SAVED_IDS;
MACRO_KERN_OSTYPE KERN_SECURELVL;
MACRO_KERN KERN_SEMAPHORE_DESTROYED;
MACRO_KERN_OSTYPE KERN_SHREG_PRIVATIZABLE;
MACRO_KERN_OSTYPE KERN_SPECULATIVE_READS;
MACRO_KERN KERN_SUCCESS;
MACRO_KERN_OSTYPE KERN_SUGID_COREDUMP;
MACRO_KERN_OSTYPE KERN_SYMFILE;
MACRO_KERN_OSTYPE KERN_SYSV;
MACRO_KERN KERN_TERMINATED;
MACRO_KERN_OSTYPE KERN_TFP;
MACRO_KERN_OSTYPE KERN_TFP_POLICY;
MACRO_KERN_OSTYPE KERN_TFP_POLICY_DEFAULT;
MACRO_KERN_OSTYPE KERN_TFP_POLICY_DENY;
MACRO_KERN_OSTYPE KERN_THALTSTACK;
MACRO_KERN_OSTYPE KERN_THREADNAME;
MACRO_KERN_OSTYPE KERN_TRANSLATE;
MACRO_KERN_OSTYPE KERN_TTY;
MACRO_KERN_OSTYPE KERN_UNOPENEVT_PROC;
MACRO_KERN_OSTYPE KERN_UNRAGE_PROC;
MACRO_KERN_OSTYPE KERN_UNRAGE_THREAD;
MACRO_KERN_OSTYPE KERN_UPDATEINTERVAL;
MACRO_KERN KERN_UREFS_OVERFLOW;
MACRO_KERN_OSTYPE KERN_USRSTACK;
MACRO_KERN_OSTYPE KERN_USRSTACK32;
MACRO_KERN_OSTYPE KERN_USRSTACK64;
MACRO_KERN_OSTYPE KERN_VERSION;
MACRO_KERN_OSTYPE KERN_VNODE;
MACRO_KEVENTS KEVENTS_ON;
MACRO_KEV_SNDSPACE KEV_ANY_CLASS;
MACRO_KEV_SNDSPACE KEV_ANY_SUBCLASS;
MACRO_KEV_SNDSPACE KEV_ANY_VENDOR;
MACRO_KEV_SNDSPACE KEV_APPLESHARE_CLASS;
MACRO_KEV KEV_CTL_DEREGISTERED;
MACRO_KEV KEV_CTL_REGISTERED;
MACRO_KEV KEV_CTL_SUBCLASS;
MACRO_KEV_DL KEV_DL_ADDMULTI;
MACRO_KEV_DL KEV_DL_DELMULTI;
MACRO_KEV_DL KEV_DL_IFCAP_CHANGED;
MACRO_KEV_DL KEV_DL_IF_ATTACHED;
MACRO_KEV_DL KEV_DL_IF_DETACHED;
MACRO_KEV_DL KEV_DL_IF_DETACHING;
MACRO_KEV_DL KEV_DL_IF_IDLE_ROUTE_REFCNT;
MACRO_KEV_DL KEV_DL_LINK_ADDRESS_CHANGED;
MACRO_KEV_DL KEV_DL_LINK_OFF;
MACRO_KEV_DL KEV_DL_LINK_ON;
MACRO_KEV_DL KEV_DL_PROTO_ATTACHED;
MACRO_KEV_DL KEV_DL_PROTO_DETACHED;
MACRO_KEV_DL KEV_DL_SIFFLAGS;
MACRO_KEV_DL KEV_DL_SIFGENERIC;
MACRO_KEV_DL KEV_DL_SIFMEDIA;
MACRO_KEV_DL KEV_DL_SIFMETRICS;
MACRO_KEV_DL KEV_DL_SIFMTU;
MACRO_KEV_DL KEV_DL_SIFPHYS;
MACRO_KEV_DL KEV_DL_SUBCLASS;
MACRO_KEV_DL KEV_DL_WAKEFLAGS_CHANGED;
MACRO_KEV_SNDSPACE KEV_FIREWALL_CLASS;
MACRO_KEV_SNDSPACE KEV_IEEE80211_CLASS;
MACRO_KEV_INET6 KEV_INET6_ADDR_DELETED;
MACRO_KEV_INET6 KEV_INET6_CHANGED_ADDR;
MACRO_KEV_INET6 KEV_INET6_DEFROUTER;
MACRO_KEV_INET6 KEV_INET6_NEW_LL_ADDR;
MACRO_KEV_INET6 KEV_INET6_NEW_RTADV_ADDR;
MACRO_KEV_INET6 KEV_INET6_NEW_USER_ADDR;
MACRO_KEV_INET6 KEV_INET6_SUBCLASS;
MACRO_KEV_INET KEV_INET_ADDR_DELETED;
MACRO_KEV_INET KEV_INET_ARPCOLLISION;
MACRO_KEV_INET KEV_INET_CHANGED_ADDR;
MACRO_KEV_INET KEV_INET_NEW_ADDR;
MACRO_KEV_INET KEV_INET_PORTINUSE;
MACRO_KEV_INET KEV_INET_SIFBRDADDR;
MACRO_KEV_INET KEV_INET_SIFDSTADDR;
MACRO_KEV_INET KEV_INET_SIFNETMASK;
MACRO_KEV_INET KEV_INET_SUBCLASS;
MACRO_KEV_SNDSPACE KEV_IOKIT_CLASS;
MACRO_KEV_IPFW KEV_IPFW_ADD;
MACRO_KEV_IPFW KEV_IPFW_DEL;
MACRO_KEV_IPFW KEV_IPFW_ENABLE;
MACRO_KEV_IPFW KEV_IPFW_FLUSH;
MACRO_KEV_IPFW KEV_IPFW_SUBCLASS;
MACRO_KEV_SNDSPACE KEV_NETWORK_CLASS;
MACRO_KEV_SNDSPACE KEV_RECVSPACE;
MACRO_KEV_SNDSPACE KEV_SNDSPACE;
MACRO_KEV_SNDSPACE KEV_SYSTEM_CLASS;
MACRO_KEV_SNDSPACE KEV_VENDOR_APPLE;
MACRO_KEV_SNDSPACE KEV_VENDOR_CODE_MAX_STR_LEN;
MACRO_KEYMAP KEYMAP_SIZE;
MACRO_KEY KEY_A1;
MACRO_KEY KEY_A3;
MACRO_KEY KEY_B2;
MACRO_KEY KEY_BACKSPACE;
MACRO_KEY KEY_BEG;
MACRO_KEY KEY_BREAK;
MACRO_KEY KEY_BTAB;
MACRO_KEY KEY_C1;
MACRO_KEY KEY_C3;
MACRO_KEY KEY_CANCEL;
MACRO_KEY KEY_CATAB;
MACRO_KEY KEY_CLEAR;
MACRO_KEY KEY_CLOSE;
MACRO_KEY KEY_CODE_YES;
MACRO_KEY KEY_COMMAND;
MACRO_KEY KEY_COPY;
MACRO_KEY KEY_CREATE;
MACRO_KEY KEY_CTAB;
MACRO_KEY KEY_DC;
MACRO_KEY KEY_DL;
MACRO_KEY KEY_DOWN;
MACRO_KEY KEY_EIC;
MACRO_KEY KEY_END;
MACRO_KEY KEY_ENTER;
MACRO_KEY KEY_EOL;
MACRO_KEY KEY_EOS;
MACRO_KEY KEY_EVENT;
MACRO_KEY_EX KEY_EX;
MACRO_KEY KEY_EXIT;
MACRO_KEY KEY_F0;
MACRO_KEY KEY_FIND;
MACRO_KEY KEY_HELP;
MACRO_KEY KEY_HOME;
MACRO_KEY KEY_IC;
MACRO_KEY KEY_IL;
MACRO_KEY KEY_LEFT;
MACRO_KEY KEY_LL;
MACRO_KEY KEY_MARK;
MACRO_KEY KEY_MAX;
MACRO_KEY KEY_MESSAGE;
MACRO_KEY KEY_MIN;
MACRO_KEY KEY_MOUSE;
MACRO_KEY KEY_MOVE;
MACRO_KEY KEY_NEXT;
MACRO_KEY KEY_NPAGE;
MACRO_KEY KEY_OPEN;
MACRO_KEY KEY_OPTIONS;
MACRO_KEY KEY_PPAGE;
MACRO_KEY KEY_PREVIOUS;
MACRO_KEY KEY_PRINT;
MACRO_KEY KEY_REDO;
MACRO_KEY KEY_REFERENCE;
MACRO_KEY KEY_REFRESH;
MACRO_KEY KEY_REPLACE;
MACRO_KEY KEY_RESET;
MACRO_KEY KEY_RESIZE;
MACRO_KEY KEY_RESTART;
MACRO_KEY KEY_RESUME;
MACRO_KEY KEY_RIGHT;
MACRO_KEY KEY_SAVE;
MACRO_KEY KEY_SBEG;
MACRO_KEY KEY_SCANCEL;
MACRO_KEY KEY_SCOMMAND;
MACRO_KEY KEY_SCOPY;
MACRO_KEY KEY_SCREATE;
MACRO_KEY KEY_SDC;
MACRO_KEY KEY_SDL;
MACRO_KEY KEY_SELECT;
MACRO_KEY KEY_SEND;
MACRO_KEY_SENDUP KEY_SENDUP_ALL;
MACRO_KEY_SENDUP KEY_SENDUP_ONE;
MACRO_KEY_SENDUP KEY_SENDUP_REGISTERED;
MACRO_KEY KEY_SEOL;
MACRO_KEY KEY_SEXIT;
MACRO_KEY KEY_SF;
MACRO_KEY KEY_SFIND;
MACRO_KEY KEY_SHELP;
MACRO_KEY KEY_SHOME;
MACRO_KEY KEY_SIC;
MACRO_KEY_EX KEY_SIG;
MACRO_KEY KEY_SLEFT;
MACRO_KEY KEY_SMESSAGE;
MACRO_KEY KEY_SMOVE;
MACRO_KEY KEY_SNEXT;
MACRO_KEY KEY_SOPTIONS;
MACRO_KEY KEY_SPREVIOUS;
MACRO_KEY KEY_SPRINT;
MACRO_KEY KEY_SR;
MACRO_KEY KEY_SREDO;
MACRO_KEY KEY_SREPLACE;
MACRO_KEY KEY_SRESET;
MACRO_KEY KEY_SRIGHT;
MACRO_KEY KEY_SRSUME;
MACRO_KEY KEY_SSAVE;
MACRO_KEY KEY_SSUSPEND;
MACRO_KEY KEY_STAB;
MACRO_KEY KEY_SUNDO;
MACRO_KEY KEY_SUSPEND;
MACRO_KEY KEY_UNDO;
MACRO_KEY KEY_UP;
MACRO_KIPC KIPC_MAXSOCKBUF;
MACRO_KIPC KIPC_MAX_DATALEN;
MACRO_KIPC KIPC_MAX_HDR;
MACRO_KIPC KIPC_MAX_LINKHDR;
MACRO_KIPC KIPC_MAX_PROTOHDR;
MACRO_KIPC KIPC_MBSTAT;
MACRO_KIPC KIPC_NMBCLUSTERS;
MACRO_KIPC KIPC_SOCKBUF_WASTE;
MACRO_KIPC KIPC_SOMAXCONN;
MACRO_KIPC KIPC_SOQLIMITCOMPAT;
MACRO_KLM KLM_CANCEL;
MACRO_KLM KLM_LOCK;
MACRO_KLM KLM_PROG;
MACRO_KLM KLM_TEST;
MACRO_KLM KLM_UNLOCK;
MACRO_KLM KLM_VERS;
MACRO_KMEM KMEM_ALLOC_CODE;
MACRO_KMEM KMEM_ALLOC_CODE_2;
MACRO_KMEM KMEM_FREE_CODE;
MACRO_KMEM KMEM_FREE_CODE_2;
MACRO_KMOD KMOD_INFO_VERSION;
MACRO_KMOD KMOD_MAX_NAME;
MACRO_KMOD KMOD_RETURN_FAILURE;
MACRO_KMOD KMOD_RETURN_SUCCESS;
MACRO_KRB524 KRB524_BADADDR;
MACRO_KRB524 KRB524_BADKEY;
MACRO_KRB524 KRB524_BADPRINC;
MACRO_KRB524 KRB524_BADREALM;
MACRO_KRB524 KRB524_DECEMPTY;
MACRO_KRB524 KRB524_ENCFULL;
MACRO_KRB524 KRB524_KRB4_DISABLED;
MACRO_KRB524 KRB524_NOTRESP;
MACRO_KRB524 KRB524_V4ERR;
MACRO_KRB5DES KRB5DES_BAD_KEYPAR;
MACRO_KRB5DES KRB5DES_WEAK_KEY;
MACRO_KRB5KDC KRB5KDC_ERR_BADOPTION;
MACRO_KRB5KDC KRB5KDC_ERR_BAD_PVNO;
MACRO_KRB5KDC KRB5KDC_ERR_CANNOT_POSTDATE;
MACRO_KRB5KDC_ERR_CANT KRB5KDC_ERR_CANT_VERIFY_CERTIFICATE;
MACRO_KRB5KDC_ERR KRB5KDC_ERR_CERTIFICATE_MISMATCH;
MACRO_KRB5KDC_ERR_CANT KRB5KDC_ERR_CLIENT_NAME_MISMATCH;
MACRO_KRB5KDC KRB5KDC_ERR_CLIENT_NOTYET;
MACRO_KRB5KDC_ERR KRB5KDC_ERR_CLIENT_NOT_TRUSTED;
MACRO_KRB5KDC KRB5KDC_ERR_CLIENT_REVOKED;
MACRO_KRB5KDC KRB5KDC_ERR_C_OLD_MAST_KVNO;
MACRO_KRB5KDC KRB5KDC_ERR_C_PRINCIPAL_UNKNOWN;
MACRO_KRB5KDC_ERR KRB5KDC_ERR_DH_KEY_PARAMETERS_NOT_ACCEPTED;
MACRO_KRB5KDC_ERR_CANT KRB5KDC_ERR_DIGEST_IN_CERT_NOT_ACCEPTED;
MACRO_KRB5KDC_ERR_CANT KRB5KDC_ERR_DIGEST_IN_SIGNED_DATA_NOT_ACCEPTED;
MACRO_KRB5KDC KRB5KDC_ERR_ETYPE_NOSUPP;
MACRO_KRB5KDC_ERR_CANT KRB5KDC_ERR_INCONSISTENT_KEY_PURPOSE;
MACRO_KRB5KDC_ERR_CANT KRB5KDC_ERR_INVALID_CERTIFICATE;
MACRO_KRB5KDC_ERR KRB5KDC_ERR_INVALID_SIG;
MACRO_KRB5KDC_ERR_CANT KRB5KDC_ERR_KDC_NAME_MISMATCH;
MACRO_KRB5KDC_ERR KRB5KDC_ERR_KDC_NOT_TRUSTED;
MACRO_KRB5KDC KRB5KDC_ERR_KEY_EXP;
MACRO_KRB5KDC KRB5KDC_ERR_MUST_USE_USER2USER;
MACRO_KRB5KDC KRB5KDC_ERR_NAME_EXP;
MACRO_KRB5KDC KRB5KDC_ERR_NEVER_VALID;
MACRO_KRB5KDC KRB5KDC_ERR_NONE;
MACRO_KRB5KDC KRB5KDC_ERR_NULL_KEY;
MACRO_KRB5KDC KRB5KDC_ERR_PADATA_TYPE_NOSUPP;
MACRO_KRB5KDC KRB5KDC_ERR_PATH_NOT_ACCEPTED;
MACRO_KRB5KDC_ERR_CANT KRB5KDC_ERR_PA_CHECKSUM_MUST_BE_INCLUDED;
MACRO_KRB5KDC KRB5KDC_ERR_POLICY;
MACRO_KRB5KDC KRB5KDC_ERR_PREAUTH_FAILED;
MACRO_KRB5KDC KRB5KDC_ERR_PREAUTH_REQUIRED;
MACRO_KRB5KDC KRB5KDC_ERR_PRINCIPAL_NOT_UNIQUE;
MACRO_KRB5KDC_ERR_CANT KRB5KDC_ERR_PUBLIC_KEY_ENCRYPTION_NOT_SUPPORTED;
MACRO_KRB5KDC_ERR_CANT KRB5KDC_ERR_REVOCATION_STATUS_UNAVAILABLE;
MACRO_KRB5KDC_ERR_CANT KRB5KDC_ERR_REVOCATION_STATUS_UNKNOWN;
MACRO_KRB5KDC_ERR_CANT KRB5KDC_ERR_REVOKED_CERTIFICATE;
MACRO_KRB5KDC KRB5KDC_ERR_SERVER_NOMATCH;
MACRO_KRB5KDC KRB5KDC_ERR_SERVICE_EXP;
MACRO_KRB5KDC KRB5KDC_ERR_SERVICE_NOTYET;
MACRO_KRB5KDC KRB5KDC_ERR_SERVICE_REVOKED;
MACRO_KRB5KDC KRB5KDC_ERR_SUMTYPE_NOSUPP;
MACRO_KRB5KDC KRB5KDC_ERR_SVC_UNAVAILABLE;
MACRO_KRB5KDC KRB5KDC_ERR_S_OLD_MAST_KVNO;
MACRO_KRB5KDC KRB5KDC_ERR_S_PRINCIPAL_UNKNOWN;
MACRO_KRB5KDC KRB5KDC_ERR_TGT_REVOKED;
MACRO_KRB5KDC KRB5KDC_ERR_TRTYPE_NOSUPP;
MACRO_KRB5KDC_ERR_WRONG KRB5KDC_ERR_WRONG_REALM;
MACRO_KRB5KRB KRB5KRB_AP_ERR_BADADDR;
MACRO_KRB5KRB KRB5KRB_AP_ERR_BADDIRECTION;
MACRO_KRB5KRB KRB5KRB_AP_ERR_BADKEYVER;
MACRO_KRB5KRB KRB5KRB_AP_ERR_BADMATCH;
MACRO_KRB5KRB KRB5KRB_AP_ERR_BADORDER;
MACRO_KRB5KRB KRB5KRB_AP_ERR_BADSEQ;
MACRO_KRB5KRB KRB5KRB_AP_ERR_BADVERSION;
MACRO_KRB5KRB KRB5KRB_AP_ERR_BAD_INTEGRITY;
MACRO_KRB5KRB KRB5KRB_AP_ERR_ILL_CR_TKT;
MACRO_KRB5KRB KRB5KRB_AP_ERR_INAPP_CKSUM;
MACRO_KRB5KRB KRB5KRB_AP_ERR_METHOD;
MACRO_KRB5KRB KRB5KRB_AP_ERR_MODIFIED;
MACRO_KRB5KRB KRB5KRB_AP_ERR_MSG_TYPE;
MACRO_KRB5KRB KRB5KRB_AP_ERR_MUT_FAIL;
MACRO_KRB5KRB KRB5KRB_AP_ERR_NOKEY;
MACRO_KRB5KRB KRB5KRB_AP_ERR_NOT_US;
MACRO_KRB5KRB_AP KRB5KRB_AP_ERR_NO_TGT;
MACRO_KRB5KRB KRB5KRB_AP_ERR_REPEAT;
MACRO_KRB5KRB KRB5KRB_AP_ERR_SKEW;
MACRO_KRB5KRB KRB5KRB_AP_ERR_TKT_EXPIRED;
MACRO_KRB5KRB_AP_WRONG KRB5KRB_AP_ERR_TKT_INVALID;
MACRO_KRB5KRB KRB5KRB_AP_ERR_TKT_NYV;
MACRO_KRB5KRB_AP_ERR KRB5KRB_AP_ERR_USER_TO_USER_REQUIRED;
MACRO_KRB5KRB_AP_ERR_V4 KRB5KRB_AP_ERR_V4_REPLY;
MACRO_KRB5KRB KRB5KRB_AP_PATH_NOT_ACCEPTED;
MACRO_KRB5KRB_AP_WRONG KRB5KRB_AP_WRONG_PRINC;
MACRO_KRB5KRB_ERR KRB5KRB_ERR_FIELD_TOOLONG;
MACRO_KRB5KRB_ERR KRB5KRB_ERR_GENERIC;
MACRO_KRB5KRB KRB5KRB_ERR_RESPONSE_TOO_BIG;
MACRO_KRB5PLACEHOLD_82 KRB5PLACEHOLD_100;
MACRO_KRB5PLACEHOLD_82 KRB5PLACEHOLD_101;
MACRO_KRB5PLACEHOLD_82 KRB5PLACEHOLD_102;
MACRO_KRB5PLACEHOLD_82 KRB5PLACEHOLD_103;
MACRO_KRB5PLACEHOLD_82 KRB5PLACEHOLD_104;
MACRO_KRB5PLACEHOLD_82 KRB5PLACEHOLD_105;
MACRO_KRB5PLACEHOLD_82 KRB5PLACEHOLD_106;
MACRO_KRB5PLACEHOLD_82 KRB5PLACEHOLD_107;
MACRO_KRB5PLACEHOLD_82 KRB5PLACEHOLD_108;
MACRO_KRB5PLACEHOLD_82 KRB5PLACEHOLD_109;
MACRO_KRB5PLACEHOLD_82 KRB5PLACEHOLD_110;
MACRO_KRB5PLACEHOLD_82 KRB5PLACEHOLD_111;
MACRO_KRB5PLACEHOLD_82 KRB5PLACEHOLD_112;
MACRO_KRB5PLACEHOLD_82 KRB5PLACEHOLD_113;
MACRO_KRB5PLACEHOLD_82 KRB5PLACEHOLD_114;
MACRO_KRB5PLACEHOLD_82 KRB5PLACEHOLD_115;
MACRO_KRB5PLACEHOLD_82 KRB5PLACEHOLD_116;
MACRO_KRB5PLACEHOLD_82 KRB5PLACEHOLD_117;
MACRO_KRB5PLACEHOLD_82 KRB5PLACEHOLD_118;
MACRO_KRB5PLACEHOLD_82 KRB5PLACEHOLD_119;
MACRO_KRB5PLACEHOLD_82 KRB5PLACEHOLD_120;
MACRO_KRB5PLACEHOLD_82 KRB5PLACEHOLD_121;
MACRO_KRB5PLACEHOLD_82 KRB5PLACEHOLD_122;
MACRO_KRB5PLACEHOLD_82 KRB5PLACEHOLD_123;
MACRO_KRB5PLACEHOLD_82 KRB5PLACEHOLD_124;
MACRO_KRB5PLACEHOLD_82 KRB5PLACEHOLD_125;
MACRO_KRB5PLACEHOLD_82 KRB5PLACEHOLD_126;
MACRO_KRB5PLACEHOLD_82 KRB5PLACEHOLD_127;
MACRO_KRB5PLACEHOLD KRB5PLACEHOLD_30;
MACRO_KRB5PLACEHOLD_53 KRB5PLACEHOLD_53;
MACRO_KRB5PLACEHOLD_53 KRB5PLACEHOLD_54;
MACRO_KRB5PLACEHOLD_53 KRB5PLACEHOLD_55;
MACRO_KRB5PLACEHOLD_53 KRB5PLACEHOLD_56;
MACRO_KRB5PLACEHOLD_53 KRB5PLACEHOLD_57;
MACRO_KRB5PLACEHOLD_53 KRB5PLACEHOLD_58;
MACRO_KRB5PLACEHOLD_53 KRB5PLACEHOLD_59;
MACRO_KRB5PLACEHOLD_82 KRB5PLACEHOLD_82;
MACRO_KRB5PLACEHOLD_82 KRB5PLACEHOLD_83;
MACRO_KRB5PLACEHOLD_82 KRB5PLACEHOLD_84;
MACRO_KRB5PLACEHOLD_82 KRB5PLACEHOLD_85;
MACRO_KRB5PLACEHOLD_82 KRB5PLACEHOLD_86;
MACRO_KRB5PLACEHOLD_82 KRB5PLACEHOLD_87;
MACRO_KRB5PLACEHOLD_82 KRB5PLACEHOLD_88;
MACRO_KRB5PLACEHOLD_82 KRB5PLACEHOLD_89;
MACRO_KRB5PLACEHOLD_82 KRB5PLACEHOLD_90;
MACRO_KRB5PLACEHOLD_82 KRB5PLACEHOLD_91;
MACRO_KRB5PLACEHOLD_82 KRB5PLACEHOLD_92;
MACRO_KRB5PLACEHOLD_82 KRB5PLACEHOLD_93;
MACRO_KRB5PLACEHOLD_82 KRB5PLACEHOLD_94;
MACRO_KRB5PLACEHOLD_82 KRB5PLACEHOLD_95;
MACRO_KRB5PLACEHOLD_82 KRB5PLACEHOLD_96;
MACRO_KRB5PLACEHOLD_82 KRB5PLACEHOLD_97;
MACRO_KRB5PLACEHOLD_82 KRB5PLACEHOLD_98;
MACRO_KRB5PLACEHOLD_82 KRB5PLACEHOLD_99;
MACRO_KRB5_PVNO KRB5_ALTAUTH_ATT_CHALLENGE_RESPONSE;
MACRO_KRB5_REALM KRB5_APPL_EXPIRED;
MACRO_KRB5_PVNO KRB5_AP_REP;
MACRO_KRB5_PVNO KRB5_AP_REQ;
MACRO_KRB5_PVNO KRB5_AS_REP;
MACRO_KRB5_PVNO KRB5_AS_REQ;
MACRO_KRB5_PVNO KRB5_AUTHDATA_AND_OR;
MACRO_KRB5_PVNO KRB5_AUTHDATA_IF_RELEVANT;
MACRO_KRB5_PVNO KRB5_AUTHDATA_INITIAL_VERIFIED_CAS;
MACRO_KRB5_PVNO KRB5_AUTHDATA_KDC_ISSUED;
MACRO_KRB5_PVNO KRB5_AUTHDATA_MANDATORY_FOR_KDC;
MACRO_KRB5_PVNO KRB5_AUTHDATA_OSF_DCE;
MACRO_KRB5_PVNO KRB5_AUTHDATA_SESAME;
MACRO_KRB5_PVNO KRB5_AUTH_CONTEXT_DO_SEQUENCE;
MACRO_KRB5_PVNO KRB5_AUTH_CONTEXT_DO_TIME;
MACRO_KRB5_PVNO KRB5_AUTH_CONTEXT_GENERATE_LOCAL_ADDR;
MACRO_KRB5_PVNO KRB5_AUTH_CONTEXT_GENERATE_LOCAL_FULL_ADDR;
MACRO_KRB5_PVNO KRB5_AUTH_CONTEXT_GENERATE_REMOTE_ADDR;
MACRO_KRB5_PVNO KRB5_AUTH_CONTEXT_GENERATE_REMOTE_FULL_ADDR;
MACRO_KRB5_PVNO KRB5_AUTH_CONTEXT_PERMIT_ALL;
MACRO_KRB5_PVNO KRB5_AUTH_CONTEXT_RET_SEQUENCE;
MACRO_KRB5_PVNO KRB5_AUTH_CONTEXT_RET_TIME;
MACRO_KRB5_PVNO KRB5_AUTH_CONTEXT_USE_SUBKEY;
MACRO_KRB5_ERR KRB5_BADMSGTYPE;
MACRO_KRB5_BAD KRB5_BAD_ENCTYPE;
MACRO_KRB5_BAD KRB5_BAD_KEYSIZE;
MACRO_KRB5_BAD KRB5_BAD_MSIZE;
MACRO_KRB5_BAD KRB5_CCACHE_BADVNO;
MACRO_KRB5_ERR KRB5_CC_BADNAME;
MACRO_KRB5_ERR KRB5_CC_END;
MACRO_KRB5_BAD KRB5_CC_FORMAT;
MACRO_KRB5_BAD KRB5_CC_IO;
MACRO_KRB5_BAD KRB5_CC_NOMEM;
MACRO_KRB5_REALM KRB5_CC_NOSUPP;
MACRO_KRB5_ERR KRB5_CC_NOTFOUND;
MACRO_KRB5_BAD KRB5_CC_NOT_KTYPE;
MACRO_KRB5_REALM KRB5_CC_READONLY;
MACRO_KRB5_BAD KRB5_CC_TYPE_EXISTS;
MACRO_KRB5_ERR KRB5_CC_UNKNOWN_TYPE;
MACRO_KRB5_BAD KRB5_CC_WRITE;
MACRO_KRB5_REALM KRB5_CHPW_FAIL;
MACRO_KRB5_REALM KRB5_CHPW_PWDNULL;
MACRO_KRB5_ERR KRB5_CONFIG_BADFORMAT;
MACRO_KRB5_ERR KRB5_CONFIG_CANTOPEN;
MACRO_KRB5_REALM KRB5_CONFIG_ETYPE_NOSUPP;
MACRO_KRB5_REALM KRB5_CONFIG_NODEFREALM;
MACRO_KRB5_ERR KRB5_CONFIG_NOTENUFSPACE;
MACRO_KRB5_PVNO KRB5_CRED;
MACRO_KRB5_PRINC KRB5_CRYPTO_INTERNAL;
MACRO_KRB5_PVNO KRB5_CYBERSAFE_SECUREID;
$04A110E55D5920A84871EBC8F69BB0C6 KRB5_C_RANDSOURCE_EXTERNAL_PROTOCOL;
$04A110E55D5920A84871EBC8F69BB0C6 KRB5_C_RANDSOURCE_MAX;
$04A110E55D5920A84871EBC8F69BB0C6 KRB5_C_RANDSOURCE_OLDAPI;
$04A110E55D5920A84871EBC8F69BB0C6 KRB5_C_RANDSOURCE_OSRAND;
$04A110E55D5920A84871EBC8F69BB0C6 KRB5_C_RANDSOURCE_TIMING;
$04A110E55D5920A84871EBC8F69BB0C6 KRB5_C_RANDSOURCE_TRUSTEDPARTY;
MACRO_KRB5_REALM KRB5_DELTAT_BADFORMAT;
MACRO_KRB5 KRB5_DEPRECATED;
MACRO_KRB5_PVNO KRB5_DOMAIN_X500_COMPRESS;
MACRO_KRB5_REALM KRB5_EAI_FAIL;
MACRO_KRB5_REALM KRB5_EAI_NODATA;
MACRO_KRB5_REALM KRB5_EAI_NONAME;
MACRO_KRB5_REALM KRB5_EAI_SERVICE;
MACRO_KRB5_PVNO KRB5_ERROR;
MACRO_KRB5_BAD KRB5_ERR_BAD_HOSTNAME;
MACRO_KRB5_REALM KRB5_ERR_BAD_S2K_PARAMS;
MACRO_KRB5_BAD KRB5_ERR_HOST_REALM_UNKNOWN;
MACRO_KRB5_REALM KRB5_ERR_NO_SERVICE;
MACRO_KRB5_REALM KRB5_ERR_NUMERIC_REALM;
MACRO_KRB5_ERR KRB5_ERR_RCSID;
MACRO_KRB5_BAD KRB5_FCC_INTERNAL;
MACRO_KRB5_BAD KRB5_FCC_NOFILE;
MACRO_KRB5_BAD KRB5_FCC_PERM;
MACRO_KRB5_REALM KRB5_FWD_BAD_PRINCIPAL;
MACRO_KRB5_GC KRB5_GC_CACHED;
MACRO_KRB5_GC KRB5_GC_USER_USER;
MACRO_KRB5_GC KRB5_GET_INIT_CREDS_OPT_ADDRESS_LIST;
MACRO_KRB5_GC KRB5_GET_INIT_CREDS_OPT_CANONICALIZE;
MACRO_KRB5_GC KRB5_GET_INIT_CREDS_OPT_CHG_PWD_PRMPT;
MACRO_KRB5_GC KRB5_GET_INIT_CREDS_OPT_ETYPE_LIST;
MACRO_KRB5_GC KRB5_GET_INIT_CREDS_OPT_FORWARDABLE;
MACRO_KRB5_GC KRB5_GET_INIT_CREDS_OPT_PREAUTH_LIST;
MACRO_KRB5_GC KRB5_GET_INIT_CREDS_OPT_PROXIABLE;
MACRO_KRB5_GC KRB5_GET_INIT_CREDS_OPT_RENEW_LIFE;
MACRO_KRB5_GC KRB5_GET_INIT_CREDS_OPT_SALT;
MACRO_KRB5_GC KRB5_GET_INIT_CREDS_OPT_TKT_LIFE;
MACRO_KRB5_REALM KRB5_GET_IN_TKT_LOOP;
MACRO_KRB5_INT32 KRB5_INT16_MAX;
MACRO_KRB5_INT32 KRB5_INT16_MIN;
MACRO_KRB5_INT32 KRB5_INT32_MAX;
MACRO_KRB5_INT32 KRB5_INT32_MIN;
MACRO_KRB5_BAD KRB5_INVALID_FLAGS;
MACRO_KRB5_PRINC KRB5_IN_TKT_REALM_MISMATCH;
MACRO_KRB5_KDB KRB5_KDB_ACCESS_ERROR;
MACRO_KRB5_KDB KRB5_KDB_BADLOCKMODE;
MACRO_KRB5_KDB KRB5_KDB_BADMASTERKEY;
MACRO_KRB5_KDB KRB5_KDB_BADSTORED_MKEY;
MACRO_KRB5_KDB KRB5_KDB_BAD_CREATEFLAGS;
MACRO_KRB5_KDB KRB5_KDB_BAD_ENCTYPE;
MACRO_KRB5_KDB KRB5_KDB_BAD_SALTTYPE;
MACRO_KRB5_KDB KRB5_KDB_BAD_VERSION;
MACRO_KRB5_KDB KRB5_KDB_CANTLOCK_DB;
MACRO_KRB5_KDB KRB5_KDB_CANTREAD_STORED;
MACRO_KRB5_KDB KRB5_KDB_CONSTRAINT_VIOLATION;
MACRO_KRB5_KDB KRB5_KDB_DBINITED;
MACRO_KRB5_KDB KRB5_KDB_DBNOTINITED;
MACRO_KRB5_KDB KRB5_KDB_DBTYPE_INIT;
MACRO_KRB5_KDB KRB5_KDB_DBTYPE_NOSUP;
MACRO_KRB5_KDB KRB5_KDB_DBTYPE_NOTFOUND;
MACRO_KRB5_KDB KRB5_KDB_DB_CHANGED;
MACRO_KRB5_KDB KRB5_KDB_DB_CORRUPT;
MACRO_KRB5_KDB KRB5_KDB_DB_INUSE;
MACRO_KRB5_KDB KRB5_KDB_ILLDIRECTION;
MACRO_KRB5_KDB KRB5_KDB_ILL_WILDCARD;
MACRO_KRB5_KDB KRB5_KDB_INTERNAL_ERROR;
MACRO_KRB5_KDB KRB5_KDB_INUSE;
MACRO_KRB5_KDB KRB5_KDB_INVALIDKEYSIZE;
MACRO_KRB5_KDB KRB5_KDB_NOENTRY;
MACRO_KRB5_KDB KRB5_KDB_NOMASTERKEY;
MACRO_KRB5_KDB KRB5_KDB_NOTLOCKED;
MACRO_KRB5_KDB KRB5_KDB_NO_MATCHING_KEY;
MACRO_KRB5_KDB KRB5_KDB_NO_PERMITTED_KEY;
MACRO_KRB5_KDB KRB5_KDB_RCSID;
MACRO_KRB5_KDB KRB5_KDB_RECURSIVELOCK;
MACRO_KRB5_KDB KRB5_KDB_SERVER_INTERNAL_ERR;
MACRO_KRB5_KDB KRB5_KDB_TRUNCATED_RECORD;
MACRO_KRB5_KDB KRB5_KDB_UK_RERROR;
MACRO_KRB5_KDB KRB5_KDB_UK_SERROR;
MACRO_KRB5_KDB KRB5_KDB_UNAUTH;
MACRO_KRB5_PRINC KRB5_KDCREP_MODIFIED;
MACRO_KRB5_PRINC KRB5_KDCREP_SKEW;
MACRO_KRB5_PRINC KRB5_KDC_UNREACH;
MACRO_KRB5_BAD KRB5_KEYTAB_BADVNO;
MACRO_KRB5_KEYUSAGE KRB5_KEYUSAGE_AD_ITE;
MACRO_KRB5_KEYUSAGE KRB5_KEYUSAGE_AD_KDCISSUED_CKSUM;
MACRO_KRB5_KEYUSAGE KRB5_KEYUSAGE_AD_MTE;
MACRO_KRB5_KEYUSAGE KRB5_KEYUSAGE_APP_DATA_CKSUM;
MACRO_KRB5_KEYUSAGE KRB5_KEYUSAGE_APP_DATA_ENCRYPT;
MACRO_KRB5_KEYUSAGE KRB5_KEYUSAGE_AP_REP_ENCPART;
MACRO_KRB5_KEYUSAGE KRB5_KEYUSAGE_AP_REQ_AUTH;
MACRO_KRB5_KEYUSAGE KRB5_KEYUSAGE_AP_REQ_AUTH_CKSUM;
MACRO_KRB5_KEYUSAGE KRB5_KEYUSAGE_AS_REP_ENCPART;
MACRO_KRB5_KEYUSAGE KRB5_KEYUSAGE_AS_REQ_PA_ENC_TS;
MACRO_KRB5_KEYUSAGE KRB5_KEYUSAGE_GSS_TOK_MIC;
MACRO_KRB5_KEYUSAGE KRB5_KEYUSAGE_GSS_TOK_WRAP_INTEG;
MACRO_KRB5_KEYUSAGE KRB5_KEYUSAGE_GSS_TOK_WRAP_PRIV;
MACRO_KRB5_KEYUSAGE KRB5_KEYUSAGE_KDC_REP_TICKET;
MACRO_KRB5_KEYUSAGE KRB5_KEYUSAGE_KRB_CRED_ENCPART;
MACRO_KRB5_KEYUSAGE KRB5_KEYUSAGE_KRB_ERROR_CKSUM;
MACRO_KRB5_KEYUSAGE KRB5_KEYUSAGE_KRB_PRIV_ENCPART;
MACRO_KRB5_KEYUSAGE KRB5_KEYUSAGE_KRB_SAFE_CKSUM;
MACRO_KRB5_KEYUSAGE KRB5_KEYUSAGE_PA_REFERRAL;
MACRO_KRB5_KEYUSAGE KRB5_KEYUSAGE_PA_SAM_CHALLENGE_CKSUM;
MACRO_KRB5_KEYUSAGE KRB5_KEYUSAGE_PA_SAM_CHALLENGE_TRACKID;
MACRO_KRB5_KEYUSAGE KRB5_KEYUSAGE_PA_SAM_RESPONSE;
MACRO_KRB5_KEYUSAGE KRB5_KEYUSAGE_TGS_REP_ENCPART_SESSKEY;
MACRO_KRB5_KEYUSAGE KRB5_KEYUSAGE_TGS_REP_ENCPART_SUBKEY;
MACRO_KRB5_KEYUSAGE KRB5_KEYUSAGE_TGS_REQ_AD_SESSKEY;
MACRO_KRB5_KEYUSAGE KRB5_KEYUSAGE_TGS_REQ_AD_SUBKEY;
MACRO_KRB5_KEYUSAGE KRB5_KEYUSAGE_TGS_REQ_AUTH;
MACRO_KRB5_KEYUSAGE KRB5_KEYUSAGE_TGS_REQ_AUTH_CKSUM;
MACRO_KRB5_PVNO KRB5_KPASSWD_ACCESSDENIED;
MACRO_KRB5_PVNO KRB5_KPASSWD_AUTHERROR;
MACRO_KRB5_PVNO KRB5_KPASSWD_BAD_VERSION;
MACRO_KRB5_PVNO KRB5_KPASSWD_HARDERROR;
MACRO_KRB5_PVNO KRB5_KPASSWD_INITIAL_FLAG_NEEDED;
MACRO_KRB5_PVNO KRB5_KPASSWD_MALFORMED;
MACRO_KRB5_PVNO KRB5_KPASSWD_SOFTERROR;
MACRO_KRB5_PVNO KRB5_KPASSWD_SUCCESS;
MACRO_KRB5_PRINC KRB5_KT_BADNAME;
MACRO_KRB5_PRINC KRB5_KT_END;
MACRO_KRB5_REALM KRB5_KT_FORMAT;
MACRO_KRB5_PRINC KRB5_KT_IOERR;
MACRO_KRB5_REALM KRB5_KT_KVNONOTFOUND;
MACRO_KRB5_REALM KRB5_KT_NAME_TOOLONG;
MACRO_KRB5_PRINC KRB5_KT_NOTFOUND;
MACRO_KRB5_PRINC KRB5_KT_NOWRITE;
MACRO_KRB5_BAD KRB5_KT_TYPE_EXISTS;
MACRO_KRB5_PRINC KRB5_KT_UNKNOWN_TYPE;
MACRO_KRB5_ERR KRB5_LIBOS_BADLOCKFLAG;
MACRO_KRB5_ERR KRB5_LIBOS_BADPWDMATCH;
MACRO_KRB5_ERR KRB5_LIBOS_CANTREADPWD;
MACRO_KRB5_ERR KRB5_LIBOS_PWDINTR;
MACRO_KRB5_REALM KRB5_LIB_EXPIRED;
MACRO_KRB5_PRINC KRB5_LNAME_BADFORMAT;
MACRO_KRB5_PRINC KRB5_LNAME_CANTOPEN;
MACRO_KRB5_PRINC KRB5_LNAME_NOTRANS;
MACRO_KRB5_KDB KRB5_LOG_CONV;
MACRO_KRB5_KDB KRB5_LOG_CORRUPT;
MACRO_KRB5_KDB KRB5_LOG_ERROR;
MACRO_KRB5_KDB KRB5_LOG_UNSTABLE;
MACRO_KRB5_PVNO KRB5_LRQ_ALL_LAST_INITIAL;
MACRO_KRB5_PVNO KRB5_LRQ_ALL_LAST_RENEWAL;
MACRO_KRB5_PVNO KRB5_LRQ_ALL_LAST_REQ;
MACRO_KRB5_PVNO KRB5_LRQ_ALL_LAST_TGT;
MACRO_KRB5_PVNO KRB5_LRQ_ALL_LAST_TGT_ISSUED;
MACRO_KRB5_PVNO KRB5_LRQ_ALL_PW_EXPTIME;
MACRO_KRB5_PVNO KRB5_LRQ_NONE;
MACRO_KRB5_PVNO KRB5_LRQ_ONE_LAST_INITIAL;
MACRO_KRB5_PVNO KRB5_LRQ_ONE_LAST_RENEWAL;
MACRO_KRB5_PVNO KRB5_LRQ_ONE_LAST_REQ;
MACRO_KRB5_PVNO KRB5_LRQ_ONE_LAST_TGT;
MACRO_KRB5_PVNO KRB5_LRQ_ONE_LAST_TGT_ISSUED;
MACRO_KRB5_PVNO KRB5_LRQ_ONE_PW_EXPTIME;
MACRO_KRB5_PRINC KRB5_MUTUAL_FAILED;
MACRO_KRB5_BAD KRB5_NOCREDS_SUPPLIED;
MACRO_KRB5_REALM KRB5_NOPERM_ETYPE;
MACRO_KRB5_BAD KRB5_NO_2ND_TKT;
MACRO_KRB5_PRINC KRB5_NO_LOCALNAME;
MACRO_KRB5_PRINC KRB5_NO_TKT_IN_RLM;
MACRO_KRB5_ERR KRB5_NO_TKT_SUPPLIED;
MACRO_KRB5_NT KRB5_NT_ENTERPRISE_PRINCIPAL;
MACRO_KRB5_NT KRB5_NT_ENT_PRINCIPAL_AND_ID;
MACRO_KRB5_NT KRB5_NT_MS_PRINCIPAL;
MACRO_KRB5_NT KRB5_NT_MS_PRINCIPAL_AND_ID;
MACRO_KRB5_NT KRB5_NT_PRINCIPAL;
MACRO_KRB5_NT KRB5_NT_SMTP_NAME;
MACRO_KRB5_NT KRB5_NT_SRV_HST;
MACRO_KRB5_NT KRB5_NT_SRV_INST;
MACRO_KRB5_NT KRB5_NT_SRV_XHST;
MACRO_KRB5_NT KRB5_NT_UID;
MACRO_KRB5_NT KRB5_NT_UNKNOWN;
MACRO_KRB5_NT KRB5_NT_X500_PRINCIPAL;
MACRO_KRB5_REALM KRB5_OBSOLETE_FN;
MACRO_KRB5_PVNO KRB5_PADATA_AFS3_SALT;
MACRO_KRB5_PVNO KRB5_PADATA_AP_REQ;
MACRO_KRB5_PVNO KRB5_PADATA_DASS;
MACRO_KRB5_PVNO KRB5_PADATA_ENC_SANDIA_SECURID;
MACRO_KRB5_PVNO KRB5_PADATA_ENC_TIMESTAMP;
MACRO_KRB5_PVNO KRB5_PADATA_ENC_UNIX_TIME;
MACRO_KRB5_PVNO KRB5_PADATA_ETYPE_INFO;
MACRO_KRB5_PVNO KRB5_PADATA_ETYPE_INFO2;
MACRO_KRB5_PVNO KRB5_PADATA_GET_FROM_TYPED_DATA;
MACRO_KRB5_PVNO KRB5_PADATA_NONE;
MACRO_KRB5_PVNO KRB5_PADATA_OSF_DCE;
MACRO_KRB5_PVNO KRB5_PADATA_PK_AS_09_BINDING;
MACRO_KRB5_PVNO KRB5_PADATA_PK_AS_REP;
MACRO_KRB5_PVNO KRB5_PADATA_PK_AS_REP_OLD;
MACRO_KRB5_PVNO KRB5_PADATA_PK_AS_REQ;
MACRO_KRB5_PVNO KRB5_PADATA_PK_AS_REQ_OLD;
MACRO_KRB5_PVNO KRB5_PADATA_PW_SALT;
MACRO_KRB5_PVNO KRB5_PADATA_REFERRAL;
MACRO_KRB5_PVNO KRB5_PADATA_SAM_CHALLENGE;
MACRO_KRB5_PVNO KRB5_PADATA_SAM_CHALLENGE_2;
MACRO_KRB5_PVNO KRB5_PADATA_SAM_REDIRECT;
MACRO_KRB5_PVNO KRB5_PADATA_SAM_RESPONSE;
MACRO_KRB5_PVNO KRB5_PADATA_SAM_RESPONSE_2;
MACRO_KRB5_PVNO KRB5_PADATA_SESAME;
MACRO_KRB5_PVNO KRB5_PADATA_TGS_REQ;
MACRO_KRB5_PVNO KRB5_PADATA_USE_SPECIFIED_KVNO;
MACRO_KRB5_ERR KRB5_PARSE_ILLCHAR;
MACRO_KRB5_ERR KRB5_PARSE_MALFORMED;
MACRO_KRB5_REALM KRB5_PLUGIN_NO_HANDLE;
MACRO_KRB5_REALM KRB5_PLUGIN_OP_NOTSUPP;
MACRO_KRB5_BAD KRB5_PREAUTH_BAD_TYPE;
MACRO_KRB5_BAD KRB5_PREAUTH_FAILED;
MACRO_KRB5_BAD KRB5_PREAUTH_NO_KEY;
MACRO_KRB5_GC KRB5_PRINCIPAL_PARSE_ENTERPRISE;
MACRO_KRB5_GC KRB5_PRINCIPAL_PARSE_NO_REALM;
MACRO_KRB5_GC KRB5_PRINCIPAL_PARSE_REQUIRE_REALM;
MACRO_KRB5_GC KRB5_PRINCIPAL_UNPARSE_DISPLAY;
MACRO_KRB5_GC KRB5_PRINCIPAL_UNPARSE_NO_REALM;
MACRO_KRB5_GC KRB5_PRINCIPAL_UNPARSE_SHORT;
MACRO_KRB5_PRINC KRB5_PRINC_NOMATCH;
MACRO_KRB5_PVNO KRB5_PRIV;
MACRO_KRB5_BAD KRB5_PROG_ATYPE_NOSUPP;
MACRO_KRB5_PRINC KRB5_PROG_ETYPE_NOSUPP;
MACRO_KRB5_PRINC KRB5_PROG_KEYTYPE_NOSUPP;
MACRO_KRB5_PRINC KRB5_PROG_SUMTYPE_NOSUPP;
MACRO_KRB5_GC KRB5_PROMPT_TYPE_NEW_PASSWORD;
MACRO_KRB5_GC KRB5_PROMPT_TYPE_NEW_PASSWORD_AGAIN;
MACRO_KRB5_GC KRB5_PROMPT_TYPE_PASSWORD;
MACRO_KRB5_GC KRB5_PROMPT_TYPE_PREAUTH;
MACRO_KRB5_PVNO KRB5_PVNO;
MACRO_KRB5_BAD KRB5_RCACHE_BADVNO;
MACRO_KRB5_PRINC KRB5_RC_IO;
MACRO_KRB5_PRINC KRB5_RC_IO_EOF;
MACRO_KRB5_PRINC KRB5_RC_IO_IO;
MACRO_KRB5_PRINC KRB5_RC_IO_MALLOC;
MACRO_KRB5_PRINC KRB5_RC_IO_PERM;
MACRO_KRB5_PRINC KRB5_RC_IO_SPACE;
MACRO_KRB5_PRINC KRB5_RC_IO_UNKNOWN;
MACRO_KRB5_PRINC KRB5_RC_MALLOC;
MACRO_KRB5_PRINC KRB5_RC_NOIO;
MACRO_KRB5_PRINC KRB5_RC_PARSE;
MACRO_KRB5_PRINC KRB5_RC_REPLAY;
MACRO_KRB5_BAD KRB5_RC_REQUIRED;
MACRO_KRB5_PRINC KRB5_RC_TYPE_EXISTS;
MACRO_KRB5_PRINC KRB5_RC_TYPE_NOTFOUND;
MACRO_KRB5_PRINC KRB5_RC_UNKNOWN;
MACRO_KRB5_GC KRB5_REALM_BRANCH_CHAR;
MACRO_KRB5_REALM KRB5_REALM_CANT_RESOLVE;
MACRO_KRB5_PRINC KRB5_REALM_UNKNOWN;
MACRO_KRB5_GC KRB5_RECVAUTH_BADAUTHVERS;
MACRO_KRB5_GC KRB5_RECVAUTH_SKIP_VERSION;
MACRO_KRB5_PVNO KRB5_SAFE;
MACRO_KRB5_REALM KRB5_SAM_BAD_CHECKSUM;
MACRO_KRB5_REALM KRB5_SAM_INVALID_ETYPE;
MACRO_KRB5_PVNO KRB5_SAM_MUST_PK_ENCRYPT_SAD;
MACRO_KRB5_REALM KRB5_SAM_NO_CHECKSUM;
MACRO_KRB5_PVNO KRB5_SAM_SEND_ENCRYPTED_SAD;
MACRO_KRB5_REALM KRB5_SAM_UNSUPPORTED;
MACRO_KRB5_PVNO KRB5_SAM_USE_SAD_AS_KEY;
MACRO_KRB5_BAD KRB5_SENDAUTH_BADAPPLVERS;
MACRO_KRB5_BAD KRB5_SENDAUTH_BADAUTHVERS;
MACRO_KRB5_BAD KRB5_SENDAUTH_BADRESPONSE;
MACRO_KRB5_BAD KRB5_SENDAUTH_REJECTED;
MACRO_KRB5_PRINC KRB5_SERVICE_UNKNOWN;
MACRO_KRB5_BAD KRB5_SNAME_UNSUPP_NAMETYPE;
MACRO_KRB5_PVNO KRB5_TC_MATCH_2ND_TKT;
MACRO_KRB5_PVNO KRB5_TC_MATCH_AUTHDATA;
MACRO_KRB5_PVNO KRB5_TC_MATCH_FLAGS;
MACRO_KRB5_PVNO KRB5_TC_MATCH_FLAGS_EXACT;
MACRO_KRB5_PVNO KRB5_TC_MATCH_IS_SKEY;
MACRO_KRB5_PVNO KRB5_TC_MATCH_KTYPE;
MACRO_KRB5_PVNO KRB5_TC_MATCH_SRV_NAMEONLY;
MACRO_KRB5_PVNO KRB5_TC_MATCH_TIMES;
MACRO_KRB5_PVNO KRB5_TC_MATCH_TIMES_EXACT;
MACRO_KRB5_PVNO KRB5_TC_NOTICKET;
MACRO_KRB5_PVNO KRB5_TC_OPENCLOSE;
MACRO_KRB5_PVNO KRB5_TC_SUPPORTED_KTYPES;
MACRO_KRB5_GC KRB5_TGS_NAME_SIZE;
MACRO_KRB5_PVNO KRB5_TGS_REP;
MACRO_KRB5_PVNO KRB5_TGS_REQ;
MACRO_KRB5_REALM KRB5_TKT_NOT_FORWARDABLE;
MACRO_KRB5_PRINC KRB5_TRANS_BADFORMAT;
MACRO_KRB5_PRINC KRB5_TRANS_CANTOPEN;
MACRO_KRB5_GC KRB5_VERIFY_INIT_CREDS_OPT_AP_REQ_NOFAIL;
MACRO_KRB5_PRINC KRB5_WRONG_ETYPE;
MACRO_KU KU_CRL_SIGN;
MACRO_KU KU_DATA_ENCIPHERMENT;
MACRO_KU KU_DECIPHER_ONLY;
MACRO_KU KU_DIGITAL_SIGNATURE;
MACRO_KU KU_ENCIPHER_ONLY;
MACRO_KU KU_KEY_AGREEMENT;
MACRO_KU KU_KEY_CERT_SIGN;
MACRO_KU KU_KEY_ENCIPHERMENT;
MACRO_KU KU_NON_REPUDIATION;
MACRO_KV5M KV5M_ADDRESS;
MACRO_KV5M KV5M_ALT_METHOD;
MACRO_KV5M KV5M_AP_REP;
MACRO_KV5M KV5M_AP_REP_ENC_PART;
MACRO_KV5M KV5M_AP_REQ;
MACRO_KV5M KV5M_AUTHDATA;
MACRO_KV5M KV5M_AUTHENTICATOR;
MACRO_KV5M KV5M_AUTH_CONTEXT;
MACRO_KV5M KV5M_CCACHE;
MACRO_KV5M KV5M_CHECKSUM;
MACRO_KV5M KV5M_CHECKSUM_ENTRY;
MACRO_KV5M KV5M_CONTEXT;
MACRO_KV5M KV5M_CRED;
MACRO_KV5M KV5M_CREDS;
MACRO_KV5M KV5M_CRED_ENC_PART;
MACRO_KV5M KV5M_CRED_INFO;
MACRO_KV5M KV5M_CRYPTOSYSTEM_ENTRY;
MACRO_KV5M KV5M_CS_TABLE_ENTRY;
MACRO_KV5M KV5M_DATA;
MACRO_KV5M KV5M_DB_CONTEXT;
MACRO_KV5M KV5M_ENCRYPT_BLOCK;
MACRO_KV5M KV5M_ENC_DATA;
MACRO_KV5M KV5M_ENC_KDC_REP_PART;
MACRO_KV5M KV5M_ENC_SAM_RESPONSE_ENC;
MACRO_KV5M KV5M_ENC_SAM_RESPONSE_ENC_2;
MACRO_KV5M KV5M_ENC_TKT_PART;
MACRO_KV5M KV5M_ERROR;
MACRO_KV5M KV5M_ETYPE_INFO_ENTRY;
MACRO_KV5M KV5M_GSS_OID;
MACRO_KV5M KV5M_GSS_QUEUE;
MACRO_KV5M KV5M_KDC_REP;
MACRO_KV5M KV5M_KDC_REQ;
MACRO_KV5M KV5M_KEYBLOCK;
MACRO_KV5M KV5M_KEYTAB;
MACRO_KV5M KV5M_KEYTAB_ENTRY;
MACRO_KV5M KV5M_LAST_REQ_ENTRY;
MACRO_KV5M KV5M_NONE;
MACRO_KV5M KV5M_OS_CONTEXT;
MACRO_KV5M KV5M_PASSWD_PHRASE_ELEMENT;
MACRO_KV5M KV5M_PA_DATA;
MACRO_KV5M KV5M_PREAUTH_OPS;
MACRO_KV5M KV5M_PREDICTED_SAM_RESPONSE;
MACRO_KV5M KV5M_PRINCIPAL;
MACRO_KV5M KV5M_PRIV;
MACRO_KV5M KV5M_PRIV_ENC_PART;
MACRO_KV5M KV5M_PWD_DATA;
MACRO_KV5M KV5M_RCACHE;
MACRO_KV5M KV5M_RESPONSE;
MACRO_KV5M KV5M_SAFE;
MACRO_KV5M KV5M_SAM_CHALLENGE;
MACRO_KV5M KV5M_SAM_CHALLENGE_2;
MACRO_KV5M KV5M_SAM_KEY;
MACRO_KV5M KV5M_SAM_RESPONSE;
MACRO_KV5M KV5M_SAM_RESPONSE_2;
MACRO_KV5M KV5M_TICKET;
MACRO_KV5M KV5M_TKT_AUTHENT;
MACRO_KV5M KV5M_TRANSITED;
MACRO_ALLDELAY L001000;
MACRO_FIRST_PASS LAST_PASS;
$0783B1A147A2695A75D59C8C4539C7EA LAUNCH_DATA_ARRAY;
$0783B1A147A2695A75D59C8C4539C7EA LAUNCH_DATA_BOOL;
$0783B1A147A2695A75D59C8C4539C7EA LAUNCH_DATA_DICTIONARY;
$0783B1A147A2695A75D59C8C4539C7EA LAUNCH_DATA_ERRNO;
$0783B1A147A2695A75D59C8C4539C7EA LAUNCH_DATA_FD;
$0783B1A147A2695A75D59C8C4539C7EA LAUNCH_DATA_INTEGER;
$0783B1A147A2695A75D59C8C4539C7EA LAUNCH_DATA_MACHPORT;
$0783B1A147A2695A75D59C8C4539C7EA LAUNCH_DATA_OPAQUE;
$0783B1A147A2695A75D59C8C4539C7EA LAUNCH_DATA_REAL;
$0783B1A147A2695A75D59C8C4539C7EA LAUNCH_DATA_STRING;
MACRO_LBER LBER_BIG_TAG_MASK;
MACRO_LBER LBER_BITSTRING;
MACRO_LBER LBER_BOOLEAN;
MACRO_LBER LBER_BV_ALLOC;
MACRO_LBER LBER_BV_NOTERM;
MACRO_LBER LBER_BV_STRING;
MACRO_LBER LBER_CLASS_APPLICATION;
MACRO_LBER LBER_CLASS_CONTEXT;
MACRO_LBER LBER_CLASS_MASK;
MACRO_LBER LBER_CLASS_PRIVATE;
MACRO_LBER LBER_CLASS_UNIVERSAL;
MACRO_LBER LBER_CONSTRUCTED;
MACRO_LBER LBER_DEFAULT;
MACRO_LBER LBER_ENCODING_MASK;
MACRO_LBER LBER_ENUMERATED;
MACRO_LBER LBER_ERROR;
MACRO_LBER LBER_ERROR_MEMORY;
MACRO_LBER LBER_ERROR_NONE;
MACRO_LBER LBER_ERROR_PARAM;
MACRO_LBER LBER_FLUSH_FREE_ALWAYS;
MACRO_LBER LBER_FLUSH_FREE_NEVER;
MACRO_LBER LBER_FLUSH_FREE_ON_ERROR;
MACRO_LBER LBER_FLUSH_FREE_ON_SUCCESS;
MACRO_LBER LBER_INTEGER;
MACRO_LBER LBER_MORE_TAG_MASK;
MACRO_LBER LBER_NULL;
MACRO_LBER LBER_OCTETSTRING;
MACRO_LBER LBER_OPT_BER_BYTES_TO_WRITE;
MACRO_LBER LBER_OPT_BER_DEBUG;
MACRO_LBER LBER_OPT_BER_MEMCTX;
MACRO_LBER LBER_OPT_BER_OPTIONS;
MACRO_LBER LBER_OPT_BER_REMAINING_BYTES;
MACRO_LBER LBER_OPT_BER_TOTAL_BYTES;
MACRO_LBER LBER_OPT_BYTES_TO_WRITE;
MACRO_LBER LBER_OPT_DEBUG_LEVEL;
MACRO_LBER LBER_OPT_ERROR;
MACRO_LBER LBER_OPT_ERROR_FN;
MACRO_LBER LBER_OPT_LOG_PRINT_FILE;
MACRO_LBER LBER_OPT_LOG_PRINT_FN;
MACRO_LBER LBER_OPT_LOG_PROC;
MACRO_LBER LBER_OPT_MEMORY_FNS;
MACRO_LBER LBER_OPT_MEMORY_INUSE;
MACRO_LBER LBER_OPT_OFF;
MACRO_LBER LBER_OPT_REMAINING_BYTES;
MACRO_LBER LBER_OPT_SOCKBUF_DEBUG;
MACRO_LBER LBER_OPT_SOCKBUF_DESC;
MACRO_LBER LBER_OPT_SOCKBUF_OPTIONS;
MACRO_LBER LBER_OPT_SUCCESS;
MACRO_LBER LBER_OPT_TOTAL_BYTES;
MACRO_LBER LBER_PRIMITIVE;
MACRO_LBER LBER_SBIOD_LEVEL_APPLICATION;
MACRO_LBER LBER_SBIOD_LEVEL_PROVIDER;
MACRO_LBER LBER_SBIOD_LEVEL_TRANSPORT;
MACRO_LBER LBER_SB_OPT_DATA_READY;
MACRO_LBER LBER_SB_OPT_DRAIN;
MACRO_LBER LBER_SB_OPT_GET_FD;
MACRO_LBER LBER_SB_OPT_GET_MAX_INCOMING;
MACRO_LBER LBER_SB_OPT_GET_SSL;
MACRO_LBER LBER_SB_OPT_HAS_IO;
MACRO_LBER LBER_SB_OPT_NEEDS_READ;
MACRO_LBER LBER_SB_OPT_NEEDS_WRITE;
MACRO_LBER LBER_SB_OPT_OPT_MAX;
MACRO_LBER LBER_SB_OPT_SET_FD;
MACRO_LBER LBER_SB_OPT_SET_MAX_INCOMING;
MACRO_LBER LBER_SB_OPT_SET_NONBLOCK;
MACRO_LBER LBER_SB_OPT_SET_READAHEAD;
MACRO_LBER LBER_SB_OPT_UNGET_BUF;
MACRO_LBER LBER_SEQUENCE;
MACRO_LBER LBER_SET;
MACRO_LBER LBER_USE_DER;
MACRO_TANDEM LCASE;
MACRO_LCD LCD_TIME_SYNC_OPT;
MACRO_LCRTBS LCRTBS;
MACRO_LCRTBS LCRTERA;
MACRO_LCRTBS LCRTKIL;
MACRO_LCRTBS LCTLECH;
MACRO_LC LC_ALL;
MACRO_LC_REQ LC_CODE_SIGNATURE;
MACRO_LC LC_COLLATE;
MACRO_LC_COLLATE LC_COLLATE_MASK;
MACRO_LC LC_CTYPE;
MACRO_LC_COLLATE LC_CTYPE_MASK;
MACRO_LC_REQ LC_DYLD_ENVIRONMENT;
MACRO_LC_REQ LC_DYLD_INFO;
MACRO_LC_REQ LC_DYLD_INFO_ONLY;
MACRO_LC_REQ LC_DYSYMTAB;
MACRO_LC_REQ LC_ENCRYPTION_INFO;
MACRO_LC_REQ LC_FUNCTION_STARTS;
MACRO_LC_REQ LC_FVMFILE;
MACRO_LC_GLOBAL LC_GLOBAL_LOCALE;
MACRO_LC_REQ LC_IDENT;
MACRO_LC_REQ LC_IDFVMLIB;
MACRO_LC_REQ LC_ID_DYLIB;
MACRO_LC_REQ LC_ID_DYLINKER;
MACRO_LC_REQ LC_LAZY_LOAD_DYLIB;
MACRO_LC_REQ LC_LOADFVMLIB;
MACRO_LC_REQ LC_LOAD_DYLIB;
MACRO_LC_REQ LC_LOAD_DYLINKER;
MACRO_LC_REQ LC_LOAD_UPWARD_DYLIB;
MACRO_LC_REQ LC_LOAD_WEAK_DYLIB;
MACRO_LC LC_MESSAGES;
MACRO_LC_COLLATE LC_MESSAGES_MASK;
MACRO_LC LC_MONETARY;
MACRO_LC_COLLATE LC_MONETARY_MASK;
MACRO_LC LC_NUMERIC;
MACRO_LC_COLLATE LC_NUMERIC_MASK;
MACRO_LC_REQ LC_PREBIND_CKSUM;
MACRO_LC_REQ LC_PREBOUND_DYLIB;
MACRO_LC_REQ LC_PREPAGE;
MACRO_LC_REQ LC_REEXPORT_DYLIB;
MACRO_LC_REQ LC_REQ_DYLD;
MACRO_LC_REQ LC_ROUTINES;
MACRO_LC_REQ LC_ROUTINES_64;
MACRO_LC_REQ LC_RPATH;
MACRO_LC_REQ LC_SEGMENT;
MACRO_LC_REQ LC_SEGMENT_64;
MACRO_LC_REQ LC_SEGMENT_SPLIT_INFO;
MACRO_LC_REQ LC_SUB_CLIENT;
MACRO_LC_REQ LC_SUB_FRAMEWORK;
MACRO_LC_REQ LC_SUB_LIBRARY;
MACRO_LC_REQ LC_SUB_UMBRELLA;
MACRO_LC_REQ LC_SYMSEG;
MACRO_LC_REQ LC_SYMTAB;
MACRO_LC_REQ LC_THREAD;
MACRO_LC LC_TIME;
MACRO_LC_COLLATE LC_TIME_MASK;
MACRO_LC_REQ LC_TWOLEVEL_HINTS;
MACRO_LC_REQ LC_UNIXTHREAD;
MACRO_LC_REQ LC_UUID;
MACRO_LC_REQ LC_VERSION_MIN_IPHONEOS;
MACRO_LC_REQ LC_VERSION_MIN_MACOSX;
MACRO_LDAPS LDAPS_PORT;
MACRO_LDAP_MAXINT LDAP_ADMINLIMIT_EXCEEDED;
MACRO_LDAP_MAXINT LDAP_AFFECTS_MULTIPLE_DSAS;
MACRO_LDAP_MAXINT LDAP_ALIAS_DEREF_PROBLEM;
MACRO_LDAP_MAXINT LDAP_ALIAS_PROBLEM;
MACRO_LDAP_MAXINT LDAP_ALREADY_EXISTS;
MACRO_LDAP_MAXINT LDAP_API_FEATURE_CANCEL;
MACRO_LDAP_MAXINT LDAP_API_FEATURE_PAGED_RESULTS;
MACRO_LDAP_MAXINT LDAP_API_FEATURE_PASSWD_MODIFY;
MACRO_LDAP_MAXINT LDAP_API_FEATURE_PASSWORD_POLICY;
MACRO_LDAP_MAXINT LDAP_API_FEATURE_REFRESH;
MACRO_LDAP_MAXINT LDAP_API_FEATURE_SERVER_SIDE_SORT;
MACRO_LDAP_MAXINT LDAP_API_FEATURE_TURN;
MACRO_LDAP_MAXINT LDAP_API_FEATURE_VIRTUAL_LIST_VIEW;
MACRO_LDAP_MAXINT LDAP_API_FEATURE_WHOAMI;
MACRO_LDAP LDAP_API_FEATURE_X_OPENLDAP;
MACRO_LDAP LDAP_API_FEATURE_X_OPENLDAP_THREAD_SAFE;
MACRO_LDAP_MAXINT LDAP_API_INFO_VERSION;
MACRO_LDAP LDAP_API_VERSION;
MACRO_LDAP_MAXINT LDAP_ASSERTION_FAILED;
MACRO_LDAP_MAXINT LDAP_AUTH_KRBV4;
MACRO_LDAP_MAXINT LDAP_AUTH_KRBV41;
MACRO_LDAP_MAXINT LDAP_AUTH_KRBV42;
MACRO_LDAP_MAXINT LDAP_AUTH_METHOD_NOT_SUPPORTED;
MACRO_LDAP_MAXINT LDAP_AUTH_NEGOTIATE;
MACRO_LDAP_MAXINT LDAP_AUTH_NONE;
MACRO_LDAP_MAXINT LDAP_AUTH_SASL;
MACRO_LDAP_MAXINT LDAP_AUTH_SIMPLE;
MACRO_LDAP_MAXINT LDAP_AUTH_UNKNOWN;
MACRO_LDAP_MAXINT LDAP_AVA_BINARY;
MACRO_LDAP_MAXINT LDAP_AVA_FREE_ATTR;
MACRO_LDAP_MAXINT LDAP_AVA_FREE_VALUE;
MACRO_LDAP_MAXINT LDAP_AVA_NONPRINTABLE;
MACRO_LDAP_MAXINT LDAP_AVA_NULL;
MACRO_LDAP_MAXINT LDAP_AVA_STRING;
MACRO_LDAP_MAXINT LDAP_BUSY;
MACRO_LDAP_MAXINT LDAP_CANCELLED;
MACRO_LDAP_MAXINT LDAP_CANNOT_CANCEL;
MACRO_LDAP_MAXINT LDAP_CHAINING_PREFERRED;
MACRO_LDAP_MAXINT LDAP_CHAINING_REQUIRED;
MACRO_LDAP_MAXINT LDAP_CLIENT_LOOP;
MACRO_LDAP_MAXINT LDAP_COMPARE_FALSE;
MACRO_LDAP_MAXINT LDAP_COMPARE_TRUE;
MACRO_LDAP_MAXINT LDAP_CONFIDENTIALITY_REQUIRED;
MACRO_LDAP_MAXINT LDAP_CONNECT_ERROR;
MACRO_LDAP_MAXINT LDAP_CONSTRAINT_VIOLATION;
MACRO_LDAP_MAXINT LDAP_CONTROL_NOT_FOUND;
MACRO_LDAP_MAXINT LDAP_CONTROL_PERSIST_ENTRY_CHANGE_ADD;
MACRO_LDAP_MAXINT LDAP_CONTROL_PERSIST_ENTRY_CHANGE_DELETE;
MACRO_LDAP_MAXINT LDAP_CONTROL_PERSIST_ENTRY_CHANGE_MODIFY;
MACRO_LDAP_MAXINT LDAP_CONTROL_PERSIST_ENTRY_CHANGE_RENAME;
MACRO_LDAP_MAXINT LDAP_CUP_INVALID_DATA;
MACRO_LDAP_MAXINT LDAP_CUP_RELOAD_REQUIRED;
MACRO_LDAP_MAXINT LDAP_CUP_RESOURCES_EXHAUSTED;
MACRO_LDAP_MAXINT LDAP_CUP_SECURITY_VIOLATION;
MACRO_LDAP_MAXINT LDAP_CUP_UNSUPPORTED_SCHEME;
MACRO_LDAP_MAXINT LDAP_DECODING_ERROR;
MACRO_LDAP LDAP_DEPRECATED;
MACRO_LDAP_MAXINT LDAP_DEREF_ALWAYS;
MACRO_LDAP_MAXINT LDAP_DEREF_FINDING;
MACRO_LDAP_MAXINT LDAP_DEREF_NEVER;
MACRO_LDAP_MAXINT LDAP_DEREF_SEARCHING;
MACRO_LDAP_MAXINT LDAP_DN_FORMAT_AD_CANONICAL;
MACRO_LDAP_MAXINT LDAP_DN_FORMAT_DCE;
MACRO_LDAP_MAXINT LDAP_DN_FORMAT_LBER;
MACRO_LDAP_MAXINT LDAP_DN_FORMAT_LDAP;
MACRO_LDAP_MAXINT LDAP_DN_FORMAT_LDAPV2;
MACRO_LDAP_MAXINT LDAP_DN_FORMAT_LDAPV3;
MACRO_LDAP_MAXINT LDAP_DN_FORMAT_MASK;
MACRO_LDAP_MAXINT LDAP_DN_FORMAT_UFN;
MACRO_LDAP_MAXINT LDAP_DN_PEDANTIC;
MACRO_LDAP_MAXINT LDAP_DN_PRETTY;
MACRO_LDAP_MAXINT LDAP_DN_P_NOLEADTRAILSPACES;
MACRO_LDAP_MAXINT LDAP_DN_P_NOSPACEAFTERRDN;
MACRO_LDAP_MAXINT LDAP_DN_SKIP;
MACRO_LDAP_MAXINT LDAP_ENCODING_ERROR;
MACRO_LDAP_MAXINT LDAP_FEATURE_INFO_VERSION;
MACRO_LDAP_MAXINT LDAP_FILTER_AND;
MACRO_LDAP_MAXINT LDAP_FILTER_APPROX;
MACRO_LDAP_MAXINT LDAP_FILTER_EQUALITY;
MACRO_LDAP_MAXINT LDAP_FILTER_ERROR;
MACRO_LDAP_MAXINT LDAP_FILTER_EXT;
MACRO_LDAP_MAXINT LDAP_FILTER_EXT_DNATTRS;
MACRO_LDAP_FILTER LDAP_FILTER_EXT_MATCH;
MACRO_LDAP_MAXINT LDAP_FILTER_EXT_OID;
MACRO_LDAP_MAXINT LDAP_FILTER_EXT_TYPE;
MACRO_LDAP_MAXINT LDAP_FILTER_EXT_VALUE;
MACRO_LDAP_MAXINT LDAP_FILTER_GE;
MACRO_LDAP_MAXINT LDAP_FILTER_LE;
MACRO_LDAP_MAXINT LDAP_FILTER_NOT;
MACRO_LDAP_MAXINT LDAP_FILTER_OR;
MACRO_LDAP_MAXINT LDAP_FILTER_PRESENT;
MACRO_LDAP_MAXINT LDAP_FILTER_SUBSTRINGS;
MACRO_LDAP_MAXINT LDAP_INAPPROPRIATE_AUTH;
MACRO_LDAP_MAXINT LDAP_INAPPROPRIATE_MATCHING;
MACRO_LDAP_MAXINT LDAP_INSUFFICIENT_ACCESS;
MACRO_LDAP_MAXINT LDAP_INVALID_CREDENTIALS;
MACRO_LDAP_MAXINT LDAP_INVALID_DN_SYNTAX;
MACRO_LDAP_MAXINT LDAP_INVALID_SYNTAX;
MACRO_LDAP_MAXINT LDAP_IS_LEAF;
MACRO_LDAP_MAXINT LDAP_LOCAL_ERROR;
MACRO_LDAP_MAXINT LDAP_LOOP_DETECT;
MACRO_LDAP_MAXINT LDAP_MAXINT;
MACRO_LDAP_MAXINT LDAP_MOD_ADD;
MACRO_LDAP_MAXINT LDAP_MOD_BVALUES;
MACRO_LDAP_MAXINT LDAP_MOD_DELETE;
MACRO_LDAP_MAXINT LDAP_MOD_INCREMENT;
MACRO_LDAP_MAXINT LDAP_MOD_OP;
MACRO_LDAP_MAXINT LDAP_MOD_REPLACE;
MACRO_LDAP_MAXINT LDAP_MORE_RESULTS_TO_RETURN;
MACRO_LDAP_MAXINT LDAP_MSG_ALL;
MACRO_LDAP_MAXINT LDAP_MSG_ONE;
MACRO_LDAP_MAXINT LDAP_MSG_RECEIVED;
MACRO_LDAP_MAXINT LDAP_NAMING_VIOLATION;
MACRO_LDAP_MAXINT LDAP_NOT_ALLOWED_ON_NONLEAF;
MACRO_LDAP_MAXINT LDAP_NOT_ALLOWED_ON_RDN;
MACRO_LDAP_MAXINT LDAP_NOT_SUPPORTED;
MACRO_LDAP_MAXINT LDAP_NO_LIMIT;
MACRO_LDAP_MAXINT LDAP_NO_MEMORY;
MACRO_LDAP_MAXINT LDAP_NO_OBJECT_CLASS_MODS;
MACRO_LDAP_MAXINT LDAP_NO_RESULTS_RETURNED;
MACRO_LDAP_MAXINT LDAP_NO_SUCH_ATTRIBUTE;
MACRO_LDAP_MAXINT LDAP_NO_SUCH_OBJECT;
MACRO_LDAP_MAXINT LDAP_NO_SUCH_OPERATION;
MACRO_LDAP_MAXINT LDAP_OBJECT_CLASS_VIOLATION;
MACRO_LDAP_MAXINT LDAP_OPERATIONS_ERROR;
MACRO_LDAP_MAXINT LDAP_OPT_API_EXTENSION_BASE;
MACRO_LDAP_MAXINT LDAP_OPT_API_FEATURE_INFO;
MACRO_LDAP_MAXINT LDAP_OPT_API_INFO;
MACRO_LDAP_MAXINT LDAP_OPT_CLIENT_CONTROLS;
MACRO_LDAP_MAXINT LDAP_OPT_CONNECT_ASYNC;
MACRO_LDAP_MAXINT LDAP_OPT_CONNECT_CB;
MACRO_LDAP_MAXINT LDAP_OPT_DEBUG_LEVEL;
MACRO_LDAP_MAXINT LDAP_OPT_DEFBASE;
MACRO_LDAP_MAXINT LDAP_OPT_DEREF;
MACRO_LDAP_MAXINT LDAP_OPT_DESC;
MACRO_LDAP_MAXINT LDAP_OPT_DIAGNOSTIC_MESSAGE;
MACRO_LDAP_MAXINT LDAP_OPT_ENCRYPT;
MACRO_LDAP_MAXINT LDAP_OPT_ERROR;
MACRO_LDAP_MAXINT LDAP_OPT_ERROR_NUMBER;
MACRO_LDAP_MAXINT LDAP_OPT_ERROR_STRING;
MACRO_LDAP_MAXINT LDAP_OPT_HOST_NAME;
MACRO_LDAP_MAXINT LDAP_OPT_MATCHED_DN;
MACRO_LDAP_MAXINT LDAP_OPT_NETWORK_TIMEOUT;
MACRO_LDAP_MAXINT LDAP_OPT_NOREVERSE_LOOKUP;
MACRO_LDAP_MAXINT LDAP_OPT_OFF;
MACRO_LDAP_MAXINT LDAP_OPT_PRIVATE_EXTENSION_BASE;
MACRO_LDAP_MAXINT LDAP_OPT_PROTOCOL_VERSION;
MACRO_LDAP_MAXINT LDAP_OPT_REFERRALS;
MACRO_LDAP_MAXINT LDAP_OPT_REFERRAL_URLS;
MACRO_LDAP_MAXINT LDAP_OPT_REFHOPLIMIT;
MACRO_LDAP_MAXINT LDAP_OPT_RESTART;
MACRO_LDAP_MAXINT LDAP_OPT_RESULT_CODE;
MACRO_LDAP_MAXINT LDAP_OPT_SASL_METHOD;
MACRO_LDAP_MAXINT LDAP_OPT_SECURITY_CONTEXT;
MACRO_LDAP_MAXINT LDAP_OPT_SERVER_CONTROLS;
MACRO_LDAP_MAXINT LDAP_OPT_SIGN;
MACRO_LDAP_MAXINT LDAP_OPT_SIZELIMIT;
MACRO_LDAP_MAXINT LDAP_OPT_SOCKBUF;
MACRO_LDAP_MAXINT LDAP_OPT_SSPI_FLAGS;
MACRO_LDAP_MAXINT LDAP_OPT_SUCCESS;
MACRO_LDAP_MAXINT LDAP_OPT_TIMELIMIT;
MACRO_LDAP_MAXINT LDAP_OPT_TIMEOUT;
MACRO_LDAP_MAXINT LDAP_OPT_URI;
MACRO_LDAP_MAXINT LDAP_OPT_X_GSSAPI_ALLOW_REMOTE_PRINCIPAL;
MACRO_LDAP_MAXINT LDAP_OPT_X_GSSAPI_DO_NOT_FREE_CONTEXT;
MACRO_LDAP_MAXINT LDAP_OPT_X_KEEPALIVE_IDLE;
MACRO_LDAP_MAXINT LDAP_OPT_X_KEEPALIVE_INTERVAL;
MACRO_LDAP_MAXINT LDAP_OPT_X_KEEPALIVE_PROBES;
MACRO_LDAP_MAXINT LDAP_OPT_X_SASL_AUTHCID;
MACRO_LDAP_MAXINT LDAP_OPT_X_SASL_AUTHZID;
MACRO_LDAP_MAXINT LDAP_OPT_X_SASL_GSS_CREDS;
MACRO_LDAP_MAXINT LDAP_OPT_X_SASL_MAXBUFSIZE;
MACRO_LDAP_MAXINT LDAP_OPT_X_SASL_MECH;
MACRO_LDAP_MAXINT LDAP_OPT_X_SASL_MECHLIST;
MACRO_LDAP_MAXINT LDAP_OPT_X_SASL_NOCANON;
MACRO_LDAP_MAXINT LDAP_OPT_X_SASL_REALM;
MACRO_LDAP_MAXINT LDAP_OPT_X_SASL_SECPROPS;
MACRO_LDAP_MAXINT LDAP_OPT_X_SASL_SSF;
MACRO_LDAP_MAXINT LDAP_OPT_X_SASL_SSF_EXTERNAL;
MACRO_LDAP_MAXINT LDAP_OPT_X_SASL_SSF_MAX;
MACRO_LDAP_MAXINT LDAP_OPT_X_SASL_SSF_MIN;
MACRO_LDAP_MAXINT LDAP_OPT_X_SASL_USERNAME;
MACRO_LDAP_MAXINT LDAP_OPT_X_TLS;
MACRO_LDAP_MAXINT LDAP_OPT_X_TLS_ALLOW;
MACRO_LDAP_MAXINT LDAP_OPT_X_TLS_CACERTDIR;
MACRO_LDAP_MAXINT LDAP_OPT_X_TLS_CACERTFILE;
MACRO_LDAP_MAXINT LDAP_OPT_X_TLS_CERTFILE;
MACRO_LDAP_MAXINT LDAP_OPT_X_TLS_CIPHER_SUITE;
MACRO_LDAP_MAXINT LDAP_OPT_X_TLS_CONNECT_ARG;
MACRO_LDAP_MAXINT LDAP_OPT_X_TLS_CONNECT_CB;
MACRO_LDAP_MAXINT LDAP_OPT_X_TLS_CRLCHECK;
MACRO_LDAP_MAXINT LDAP_OPT_X_TLS_CRLFILE;
MACRO_LDAP_MAXINT LDAP_OPT_X_TLS_CRL_ALL;
MACRO_LDAP_MAXINT LDAP_OPT_X_TLS_CRL_NONE;
MACRO_LDAP_MAXINT LDAP_OPT_X_TLS_CRL_PEER;
MACRO_LDAP_MAXINT LDAP_OPT_X_TLS_CTX;
MACRO_LDAP_MAXINT LDAP_OPT_X_TLS_DEMAND;
MACRO_LDAP_MAXINT LDAP_OPT_X_TLS_DHFILE;
MACRO_LDAP_MAXINT LDAP_OPT_X_TLS_HARD;
MACRO_LDAP_MAXINT LDAP_OPT_X_TLS_KEYFILE;
MACRO_LDAP_MAXINT LDAP_OPT_X_TLS_NEVER;
MACRO_LDAP_MAXINT LDAP_OPT_X_TLS_NEWCTX;
MACRO_LDAP_MAXINT LDAP_OPT_X_TLS_PASSPHRASE_TOOL;
MACRO_LDAP_MAXINT LDAP_OPT_X_TLS_PROTOCOL_MIN;
MACRO_LDAP_MAXINT LDAP_OPT_X_TLS_PROTOCOL_SSL2;
MACRO_LDAP_MAXINT LDAP_OPT_X_TLS_PROTOCOL_SSL3;
MACRO_LDAP_MAXINT LDAP_OPT_X_TLS_PROTOCOL_TLS1_0;
MACRO_LDAP_MAXINT LDAP_OPT_X_TLS_PROTOCOL_TLS1_1;
MACRO_LDAP_MAXINT LDAP_OPT_X_TLS_PROTOCOL_TLS1_2;
MACRO_LDAP_MAXINT LDAP_OPT_X_TLS_RANDOM_FILE;
MACRO_LDAP_MAXINT LDAP_OPT_X_TLS_REQUIRE_CERT;
MACRO_LDAP_MAXINT LDAP_OPT_X_TLS_SSL_CTX;
MACRO_LDAP_MAXINT LDAP_OPT_X_TLS_TRY;
MACRO_LDAP_MAXINT LDAP_OTHER;
MACRO_LDAP_MAXINT LDAP_PARAM_ERROR;
MACRO_LDAP_MAXINT LDAP_PARTIAL_RESULTS;
MACRO_LDAP LDAP_PORT;
MACRO_LDAP_MAXINT LDAP_PROTOCOL_ERROR;
MACRO_LDAP_MAXINT LDAP_PROXIED_AUTHORIZATION_DENIED;
MACRO_LDAP_MAXINT LDAP_REFERRAL;
MACRO_LDAP_MAXINT LDAP_REFERRALS_PREFERRED;
MACRO_LDAP_MAXINT LDAP_REFERRALS_REQUIRED;
MACRO_LDAP_MAXINT LDAP_REFERRAL_LIMIT_EXCEEDED;
MACRO_LDAP_MAXINT LDAP_REQ_ABANDON;
MACRO_LDAP_MAXINT LDAP_REQ_ADD;
MACRO_LDAP_MAXINT LDAP_REQ_BIND;
MACRO_LDAP_MAXINT LDAP_REQ_COMPARE;
MACRO_LDAP_MAXINT LDAP_REQ_DELETE;
MACRO_LDAP_MAXINT LDAP_REQ_EXTENDED;
MACRO_LDAP_MAXINT LDAP_REQ_MODDN;
MACRO_LDAP_MAXINT LDAP_REQ_MODIFY;
MACRO_LDAP_MAXINT LDAP_REQ_MODRDN;
MACRO_LDAP_MAXINT LDAP_REQ_RENAME;
MACRO_LDAP_MAXINT LDAP_REQ_SEARCH;
MACRO_LDAP_MAXINT LDAP_REQ_UNBIND;
MACRO_LDAP_MAXINT LDAP_RESULTS_TOO_LARGE;
MACRO_LDAP_MAXINT LDAP_RES_ADD;
MACRO_LDAP_MAXINT LDAP_RES_ANY;
MACRO_LDAP_MAXINT LDAP_RES_BIND;
MACRO_LDAP_MAXINT LDAP_RES_COMPARE;
MACRO_LDAP_MAXINT LDAP_RES_DELETE;
MACRO_LDAP_MAXINT LDAP_RES_EXTENDED;
MACRO_LDAP_MAXINT LDAP_RES_INTERMEDIATE;
MACRO_LDAP_MAXINT LDAP_RES_MODDN;
MACRO_LDAP_MAXINT LDAP_RES_MODIFY;
MACRO_LDAP_MAXINT LDAP_RES_MODRDN;
MACRO_LDAP_MAXINT LDAP_RES_RENAME;
MACRO_LDAP_MAXINT LDAP_RES_SEARCH_ENTRY;
MACRO_LDAP_MAXINT LDAP_RES_SEARCH_REFERENCE;
MACRO_LDAP_MAXINT LDAP_RES_SEARCH_RESULT;
MACRO_LDAP_MAXINT LDAP_RES_UNSOLICITED;
MACRO_LDAP_MAXINT LDAP_SASL_AUTOMATIC;
MACRO_LDAP_MAXINT LDAP_SASL_BIND_IN_PROGRESS;
MACRO_LDAP_MAXINT LDAP_SASL_INTERACTIVE;
MACRO_LDAP_MAXINT LDAP_SASL_QUIET;
MACRO_LDAP_MAXINT LDAP_SASL_SIMPLE;
MACRO_LDAP_SCHERR LDAP_SCHEMA_ABSTRACT;
MACRO_LDAP_SCHERR LDAP_SCHEMA_ALLOW_ALL;
MACRO_LDAP_SCHERR LDAP_SCHEMA_ALLOW_DESCR;
MACRO_LDAP_SCHERR LDAP_SCHEMA_ALLOW_DESCR_PREFIX;
MACRO_LDAP_SCHERR LDAP_SCHEMA_ALLOW_NONE;
MACRO_LDAP_SCHERR LDAP_SCHEMA_ALLOW_NO_OID;
MACRO_LDAP_SCHERR LDAP_SCHEMA_ALLOW_OID_MACRO;
MACRO_LDAP_SCHERR LDAP_SCHEMA_ALLOW_OUT_OF_ORDER_FIELDS;
MACRO_LDAP_SCHERR LDAP_SCHEMA_ALLOW_QUOTED;
MACRO_LDAP_SCHERR LDAP_SCHEMA_AUXILIARY;
MACRO_LDAP_SCHERR LDAP_SCHEMA_DIRECTORY_OPERATION;
MACRO_LDAP_SCHERR LDAP_SCHEMA_DISTRIBUTED_OPERATION;
MACRO_LDAP_SCHERR LDAP_SCHEMA_DSA_OPERATION;
MACRO_LDAP_SCHERR LDAP_SCHEMA_NO;
MACRO_LDAP_SCHERR LDAP_SCHEMA_SKIP;
MACRO_LDAP_SCHERR LDAP_SCHEMA_STRUCTURAL;
MACRO_LDAP_SCHERR LDAP_SCHEMA_USER_APPLICATIONS;
MACRO_LDAP_SCHERR LDAP_SCHEMA_YES;
MACRO_LDAP_SCHERR LDAP_SCHERR_BADDESC;
MACRO_LDAP_SCHERR LDAP_SCHERR_BADNAME;
MACRO_LDAP_SCHERR LDAP_SCHERR_BADSUP;
MACRO_LDAP_SCHERR LDAP_SCHERR_DUPOPT;
MACRO_LDAP_SCHERR LDAP_SCHERR_EMPTY;
MACRO_LDAP_SCHERR LDAP_SCHERR_MISSING;
MACRO_LDAP_SCHERR LDAP_SCHERR_NODIGIT;
MACRO_LDAP_SCHERR LDAP_SCHERR_NOLEFTPAREN;
MACRO_LDAP_SCHERR LDAP_SCHERR_NORIGHTPAREN;
MACRO_LDAP_SCHERR LDAP_SCHERR_OUTOFMEM;
MACRO_LDAP_SCHERR LDAP_SCHERR_OUT_OF_ORDER;
MACRO_LDAP_SCHERR LDAP_SCHERR_UNEXPTOKEN;
MACRO_LDAP_MAXINT LDAP_SCOPE_BASE;
MACRO_LDAP_MAXINT LDAP_SCOPE_BASEOBJECT;
MACRO_LDAP_MAXINT LDAP_SCOPE_CHILDREN;
MACRO_LDAP_MAXINT LDAP_SCOPE_DEFAULT;
MACRO_LDAP_MAXINT LDAP_SCOPE_ONE;
MACRO_LDAP_MAXINT LDAP_SCOPE_ONELEVEL;
MACRO_LDAP_MAXINT LDAP_SCOPE_SUB;
MACRO_LDAP_MAXINT LDAP_SCOPE_SUBORDINATE;
MACRO_LDAP_MAXINT LDAP_SCOPE_SUBTREE;
MACRO_LDAP_MAXINT LDAP_SEARCH_FLAG_DOMAIN_SCOPE;
MACRO_LDAP_MAXINT LDAP_SEARCH_FLAG_PHANTOM_ROOT;
MACRO_LDAP_MAXINT LDAP_SERVER_DOWN;
MACRO_LDAP_MAXINT LDAP_SIZELIMIT_EXCEEDED;
MACRO_LDAP_MAXINT LDAP_STRONGER_AUTH_REQUIRED;
MACRO_LDAP_MAXINT LDAP_STRONG_AUTH_NOT_SUPPORTED;
MACRO_LDAP_MAXINT LDAP_STRONG_AUTH_REQUIRED;
MACRO_LDAP_MAXINT LDAP_SUBSTRING_ANY;
MACRO_LDAP_MAXINT LDAP_SUBSTRING_FINAL;
MACRO_LDAP_MAXINT LDAP_SUBSTRING_INITIAL;
MACRO_LDAP_MAXINT LDAP_SUCCESS;
MACRO_LDAP_MAXINT LDAP_SYNC_ADD;
$FA84D37CEEEAC6441153FDF22E064FC6 LDAP_SYNC_CAPI_ADD;
$FA84D37CEEEAC6441153FDF22E064FC6 LDAP_SYNC_CAPI_DELETE;
$FA84D37CEEEAC6441153FDF22E064FC6 LDAP_SYNC_CAPI_DELETES;
$FA84D37CEEEAC6441153FDF22E064FC6 LDAP_SYNC_CAPI_DELETES_IDSET;
$FA84D37CEEEAC6441153FDF22E064FC6 LDAP_SYNC_CAPI_DONE;
$FA84D37CEEEAC6441153FDF22E064FC6 LDAP_SYNC_CAPI_DONE_FLAG;
$FA84D37CEEEAC6441153FDF22E064FC6 LDAP_SYNC_CAPI_IDSET_FLAG;
$FA84D37CEEEAC6441153FDF22E064FC6 LDAP_SYNC_CAPI_MODIFY;
$FA84D37CEEEAC6441153FDF22E064FC6 LDAP_SYNC_CAPI_NONE;
$FA84D37CEEEAC6441153FDF22E064FC6 LDAP_SYNC_CAPI_PHASE_FLAG;
$FA84D37CEEEAC6441153FDF22E064FC6 LDAP_SYNC_CAPI_PRESENT;
$FA84D37CEEEAC6441153FDF22E064FC6 LDAP_SYNC_CAPI_PRESENTS;
$FA84D37CEEEAC6441153FDF22E064FC6 LDAP_SYNC_CAPI_PRESENTS_IDSET;
MACRO_LDAP_MAXINT LDAP_SYNC_DELETE;
MACRO_LDAP_MAXINT LDAP_SYNC_MODIFY;
MACRO_LDAP_MAXINT LDAP_SYNC_NEW_COOKIE;
MACRO_LDAP_MAXINT LDAP_SYNC_NONE;
MACRO_LDAP_MAXINT LDAP_SYNC_PRESENT;
MACRO_LDAP_MAXINT LDAP_SYNC_REFRESH_AND_PERSIST;
MACRO_LDAP_MAXINT LDAP_SYNC_REFRESH_DELETES;
MACRO_LDAP_MAXINT LDAP_SYNC_REFRESH_ONLY;
MACRO_LDAP_MAXINT LDAP_SYNC_REFRESH_PRESENTS;
MACRO_LDAP_MAXINT LDAP_SYNC_REFRESH_REQUIRED;
MACRO_LDAP_MAXINT LDAP_SYNC_RESERVED;
MACRO_LDAP_MAXINT LDAP_TAG_CONTROLS;
MACRO_LDAP_MAXINT LDAP_TAG_EXOP_MODIFY_PASSWD_GEN;
MACRO_LDAP_MAXINT LDAP_TAG_EXOP_MODIFY_PASSWD_ID;
MACRO_LDAP_MAXINT LDAP_TAG_EXOP_MODIFY_PASSWD_NEW;
MACRO_LDAP_MAXINT LDAP_TAG_EXOP_MODIFY_PASSWD_OLD;
MACRO_LDAP_MAXINT LDAP_TAG_EXOP_REFRESH_REQ_DN;
MACRO_LDAP_MAXINT LDAP_TAG_EXOP_REFRESH_REQ_TTL;
MACRO_LDAP_MAXINT LDAP_TAG_EXOP_REFRESH_RES_TTL;
MACRO_LDAP_MAXINT LDAP_TAG_EXOP_REQ_OID;
MACRO_LDAP_MAXINT LDAP_TAG_EXOP_REQ_VALUE;
MACRO_LDAP_MAXINT LDAP_TAG_EXOP_RES_OID;
MACRO_LDAP_MAXINT LDAP_TAG_EXOP_RES_VALUE;
MACRO_LDAP_MAXINT LDAP_TAG_IM_RES_OID;
MACRO_LDAP_MAXINT LDAP_TAG_IM_RES_VALUE;
MACRO_LDAP_MAXINT LDAP_TAG_LDAPCRED;
MACRO_LDAP_MAXINT LDAP_TAG_LDAPDN;
MACRO_LDAP_MAXINT LDAP_TAG_MESSAGE;
MACRO_LDAP_MAXINT LDAP_TAG_MSGID;
MACRO_LDAP_MAXINT LDAP_TAG_NEWSUPERIOR;
MACRO_LDAP_MAXINT LDAP_TAG_REFERRAL;
MACRO_LDAP_MAXINT LDAP_TAG_REFRESHDELETES;
MACRO_LDAP_MAXINT LDAP_TAG_REFRESHDONE;
MACRO_LDAP_MAXINT LDAP_TAG_RELOAD_HINT;
MACRO_LDAP_MAXINT LDAP_TAG_SASL_RES_CREDS;
MACRO_LDAP_MAXINT LDAP_TAG_SYNC_COOKIE;
MACRO_LDAP_MAXINT LDAP_TAG_SYNC_ID_SET;
MACRO_LDAP_MAXINT LDAP_TAG_SYNC_NEW_COOKIE;
MACRO_LDAP_MAXINT LDAP_TAG_SYNC_REFRESH_DELETE;
MACRO_LDAP_MAXINT LDAP_TAG_SYNC_REFRESH_PRESENT;
MACRO_LDAP_MAXINT LDAP_TIMELIMIT_EXCEEDED;
MACRO_LDAP_MAXINT LDAP_TIMEOUT;
MACRO_LDAP_MAXINT LDAP_TOO_LATE;
MACRO_LDAP_MAXINT LDAP_TYPE_OR_VALUE_EXISTS;
MACRO_LDAP_SCHERR LDAP_UCS4_INVALID;
MACRO_LDAP_MAXINT LDAP_UNAVAILABLE;
MACRO_LDAP_MAXINT LDAP_UNAVAILABLE_CRITICAL_EXTENSION;
MACRO_LDAP_MAXINT LDAP_UNDEFINED_TYPE;
MACRO_LDAP_MAXINT LDAP_UNWILLING_TO_PERFORM;
MACRO_LDAP_MAXINT LDAP_URL_ERR_BADATTRS;
MACRO_LDAP_MAXINT LDAP_URL_ERR_BADENCLOSURE;
MACRO_LDAP_MAXINT LDAP_URL_ERR_BADEXTS;
MACRO_LDAP_MAXINT LDAP_URL_ERR_BADFILTER;
MACRO_LDAP_MAXINT LDAP_URL_ERR_BADHOST;
MACRO_LDAP_MAXINT LDAP_URL_ERR_BADSCHEME;
MACRO_LDAP_MAXINT LDAP_URL_ERR_BADSCOPE;
MACRO_LDAP_MAXINT LDAP_URL_ERR_BADURL;
MACRO_LDAP_MAXINT LDAP_URL_ERR_MEM;
MACRO_LDAP_MAXINT LDAP_URL_ERR_PARAM;
MACRO_LDAP_MAXINT LDAP_URL_SUCCESS;
MACRO_LDAP_MAXINT LDAP_USER_CANCELLED;
MACRO_LDAP LDAP_VENDOR_VERSION;
MACRO_LDAP LDAP_VENDOR_VERSION_MAJOR;
MACRO_LDAP LDAP_VENDOR_VERSION_MINOR;
MACRO_LDAP LDAP_VENDOR_VERSION_PATCH;
MACRO_LDAP LDAP_VERSION;
MACRO_LDAP LDAP_VERSION1;
MACRO_LDAP LDAP_VERSION2;
MACRO_LDAP LDAP_VERSION3;
MACRO_LDAP LDAP_VERSION_MAX;
MACRO_LDAP LDAP_VERSION_MIN;
MACRO_LDAP_MAXINT LDAP_VLV_ERROR;
MACRO_LDAP_MAXINT LDAP_X_ASSERTION_FAILED;
MACRO_LDAP_MAXINT LDAP_X_CANNOT_CHAIN;
MACRO_LDAP_MAXINT LDAP_X_CONNECTING;
MACRO_LDAP_MAXINT LDAP_X_INVALIDREFERENCE;
MACRO_LDAP_MAXINT LDAP_X_NO_OPERATION;
MACRO_LDAP_MAXINT LDAP_X_NO_REFERRALS_FOUND;
MACRO_LDAP_MAXINT LDAP_X_PROXY_AUTHZ_FAILURE;
MACRO_LDAP_MAXINT LDAP_X_SYNC_REFRESH_REQUIRED;
MACRO_LCRTBS LDECCTQ;
MACRO_LDT LDT_AUTO_ALLOC;
MACRO_LEAVE LEAVE_INVITE;
MACRO_LEDGER LEDGER_ITEM_INFINITY;
MACRO_THREAD_NULL LEDGER_NULL;
MACRO_LEDGER_N LEDGER_N_ITEMS;
MACRO_LEDGER_N LEDGER_UNLIMITED;
MACRO_LFLOW LFLOW_OFF;
MACRO_LFLOW LFLOW_ON;
MACRO_LFLOW LFLOW_RESTART_ANY;
MACRO_LFLOW LFLOW_RESTART_XON;
MACRO_LCRTBS LFLUSHO;
MACRO_LH LH_LOAD_MULT;
MACRO_LIBCURL LIBCURL_VERSION_MAJOR;
MACRO_LIBCURL LIBCURL_VERSION_MINOR;
MACRO_LIBCURL LIBCURL_VERSION_NUM;
MACRO_LIBCURL LIBCURL_VERSION_PATCH;
MACRO_LIBEDIT LIBEDIT_MAJOR;
MACRO_LIBEDIT LIBEDIT_MINOR;
MACRO_LIBEXSLT LIBEXSLT_VERSION;
MACRO_LIBXML LIBXML_VERSION;
MACRO_LIBXSLT LIBXSLT_VERSION;
MACRO_CHARCLASS LINE_MAX;
MACRO_ARG LINK_MAX;
MACRO_LIO LIO_NOP;
MACRO_LIO LIO_NOWAIT;
MACRO_LIO LIO_READ;
MACRO_LIO LIO_WAIT;
MACRO_LIO LIO_WRITE;
MACRO_ALLDELAY LITOUT;
MACRO_ENDIAN LITTLE_ENDIAN;
MACRO_LLC LLC_8021D_LSAP;
MACRO_LLC LLC_DISC;
MACRO_LLC LLC_DISC_P;
MACRO_LLC LLC_DM;
MACRO_LLC LLC_DM_P;
MACRO_LLC LLC_FRMR;
MACRO_LLC LLC_FRMRLEN;
MACRO_LLC LLC_FRMR_P;
MACRO_LLC LLC_INFO;
MACRO_LLC LLC_ISFRAMELEN;
MACRO_LLC LLC_ISO_LSAP;
MACRO_LLC LLC_REJ;
MACRO_LLC LLC_RNR;
MACRO_LLC LLC_RR;
MACRO_LLC LLC_SABME;
MACRO_LLC LLC_SABME_P;
MACRO_LLC LLC_SNAPFRAMELEN;
MACRO_LLC LLC_SNAP_LSAP;
MACRO_LLC LLC_TEST;
MACRO_LLC LLC_TEST_P;
MACRO_LLC LLC_UA;
MACRO_LLC LLC_UA_P;
MACRO_LLC LLC_UFRAMELEN;
MACRO_LLC LLC_UI;
MACRO_LLC LLC_UI_P;
MACRO_LLC LLC_X25_LSAP;
MACRO_LLC LLC_XID;
MACRO_LLC LLC_XID_BASIC_MINLEN;
MACRO_LLC LLC_XID_CLASS_I;
MACRO_LLC LLC_XID_CLASS_II;
MACRO_LLC LLC_XID_CLASS_III;
MACRO_LLC LLC_XID_CLASS_IV;
MACRO_LLC LLC_XID_FORMAT_BASIC;
MACRO_LLC LLC_XID_P;
MACRO_LCRTBS LLITOUT;
MACRO_ULLONG LLONG_MAX;
MACRO_LLONG LLONG_MIN;
MACRO_LCRTBS LMDMBUF;
MACRO_LM LM_FORWARDMASK;
MACRO_LM_MAXSTRLEN LM_MAXSTRLEN;
MACRO_LM LM_MODE;
MACRO_LM LM_SLC;
MACRO_AREGTYPE LNKTYPE;
MACRO_LCRTBS LNOFLSH;
MACRO_LCRTBS LNOHANG;
MACRO_LOAD LOAD_SCALE;
MACRO_LOCALDOMAINPARTS LOCALDOMAINPARTS;
MACRO_LOCAL LOCAL_PEERCRED;
MACRO_LOCKD LOCKD_ANS_DENIED_GRACE;
MACRO_LOCKD LOCKD_ANS_GRANTED;
MACRO_LOCKD LOCKD_ANS_LOCK_EXCL;
MACRO_LOCKD LOCKD_ANS_LOCK_INFO;
MACRO_LOCKD LOCKD_ANS_VERSION;
MACRO_LOCKD LOCKD_MSG_BLOCK;
MACRO_LOCKD LOCKD_MSG_CANCEL;
MACRO_LOCKD LOCKD_MSG_DENIED_GRACE;
MACRO_LOCKD LOCKD_MSG_NFSV3;
MACRO_LOCKD LOCKD_MSG_RECLAIM;
MACRO_LOCKD LOCKD_MSG_TCP;
MACRO_LOCKD LOCKD_MSG_TEST;
MACRO_LOCKD LOCKD_MSG_VERSION;
MACRO_LOCKD LOCKD_NOTIFY_VERSION;
MACRO_LOCKGROUP LOCKGROUP_ATTR_STAT;
MACRO_LOCKGROUP LOCKGROUP_MAX_NAME;
MACRO_LOCK LOCK_EX;
MACRO_LOCK LOCK_NB;
MACRO_THREAD_NULL LOCK_SET_NULL;
MACRO_LOCK LOCK_SH;
MACRO_LOCK LOCK_UN;
MACRO_PROCESS LOGIN_PROCESS;
MACRO_LOG LOG_ALERT;
MACRO_LOG LOG_AUTH;
MACRO_LOG LOG_AUTHPRIV;
MACRO_LOG LOG_CONS;
MACRO_LOG LOG_CRIT;
MACRO_LOG LOG_CRON;
MACRO_LOG LOG_DAEMON;
MACRO_LOG LOG_DEBUG;
MACRO_LOG LOG_EMERG;
MACRO_LOG LOG_ERR;
MACRO_LOG LOG_FACMASK;
MACRO_LOG LOG_FTP;
MACRO_LOG LOG_INFO;
MACRO_LOG LOG_INSTALL;
MACRO_LOG LOG_KERN;
MACRO_LOG LOG_LAUNCHD;
MACRO_LOG LOG_LOCAL0;
MACRO_LOG LOG_LOCAL1;
MACRO_LOG LOG_LOCAL2;
MACRO_LOG LOG_LOCAL3;
MACRO_LOG LOG_LOCAL4;
MACRO_LOG LOG_LOCAL5;
MACRO_LOG LOG_LOCAL6;
MACRO_LOG LOG_LOCAL7;
MACRO_LOG LOG_LPR;
MACRO_LOG LOG_MAIL;
MACRO_LOG LOG_NDELAY;
MACRO_LOG LOG_NETINFO;
MACRO_LOG LOG_NEWS;
MACRO_LOG LOG_NFACILITIES;
MACRO_LOG LOG_NOTICE;
MACRO_LOG LOG_NOWAIT;
MACRO_LOG LOG_ODELAY;
MACRO_LOG LOG_PERROR;
MACRO_LOG LOG_PID;
MACRO_LOG LOG_PRIMASK;
MACRO_LOG LOG_RAS;
MACRO_LOG LOG_REMOTEAUTH;
MACRO_LOG LOG_SYSLOG;
MACRO_LOG LOG_USER;
MACRO_LOG LOG_UUCP;
MACRO_LOG LOG_WARNING;
MACRO_LONG_BIT LONG_BIT;
MACRO_ULONG LONG_MAX;
MACRO_LONG LONG_MIN;
MACRO_LOOK LOOK_UP;
MACRO_LCRTBS LPASS8;
MACRO_LCRTBS LPENDIN;
MACRO_LCRTBS LPRTERA;
MACRO_LR LR_TYPE_INTERPRETATION_MASK;
MACRO_LR LR_TYPE_THIS_SERVER_ONLY;
MACRO_LSCALE LSCALE;
MACRO_LS LS_PRINT_ALWAYS;
MACRO_LS LS_PRINT_LOG;
MACRO_LS LS_PRINT_NEVER;
MACRO_LTDL LTDL_H;
MACRO_LCRTBS LTILDE;
MACRO_LCRTBS LTOSTOP;
$E9DBAC0AE96102AB36550954105F0957 LT_DLLOADER_APPEND;
MACRO_LT LT_DLLOADER_H;
$E9DBAC0AE96102AB36550954105F0957 LT_DLLOADER_PREPEND;
MACRO_LT LT_EOS_CHAR;
$C4E230AE075788E5E60A8962A8E4C159 LT_ERROR_BUFFER_OVERFLOW;
$C4E230AE075788E5E60A8962A8E4C159 LT_ERROR_CANNOT_CLOSE;
$C4E230AE075788E5E60A8962A8E4C159 LT_ERROR_CANNOT_OPEN;
$C4E230AE075788E5E60A8962A8E4C159 LT_ERROR_CLOSE_RESIDENT_MODULE;
$C4E230AE075788E5E60A8962A8E4C159 LT_ERROR_CONFLICTING_FLAGS;
$C4E230AE075788E5E60A8962A8E4C159 LT_ERROR_DEPLIB_NOT_FOUND;
$C4E230AE075788E5E60A8962A8E4C159 LT_ERROR_DLOPEN_NOT_SUPPORTED;
$C4E230AE075788E5E60A8962A8E4C159 LT_ERROR_FILE_NOT_FOUND;
MACRO_LT LT_ERROR_H;
$C4E230AE075788E5E60A8962A8E4C159 LT_ERROR_INIT_LOADER;
$C4E230AE075788E5E60A8962A8E4C159 LT_ERROR_INVALID_ERRORCODE;
$C4E230AE075788E5E60A8962A8E4C159 LT_ERROR_INVALID_HANDLE;
$C4E230AE075788E5E60A8962A8E4C159 LT_ERROR_INVALID_LOADER;
$C4E230AE075788E5E60A8962A8E4C159 LT_ERROR_INVALID_MUTEX_ARGS;
$C4E230AE075788E5E60A8962A8E4C159 LT_ERROR_INVALID_POSITION;
MACRO_LT LT_ERROR_LEN_MAX;
$C4E230AE075788E5E60A8962A8E4C159 LT_ERROR_MAX;
$C4E230AE075788E5E60A8962A8E4C159 LT_ERROR_NO_MEMORY;
$C4E230AE075788E5E60A8962A8E4C159 LT_ERROR_NO_SYMBOLS;
$C4E230AE075788E5E60A8962A8E4C159 LT_ERROR_REMOVE_LOADER;
$C4E230AE075788E5E60A8962A8E4C159 LT_ERROR_SHUTDOWN;
$C4E230AE075788E5E60A8962A8E4C159 LT_ERROR_SYMBOL_NOT_FOUND;
$C4E230AE075788E5E60A8962A8E4C159 LT_ERROR_UNKNOWN;
MACRO_LT LT_FILENAME_MAX;
MACRO_LT LT_PATHSEP_CHAR;
MACRO_LTDL LT_SYSTEM_H;
MACRO_L_SET L_INCR;
MACRO_L_SET L_SET;
MACRO_L_SET L_XTND;
MACRO_L_ctermid L_ctermid;
MACRO_L L_tmpnam;
MACRO_M16KCLSHIFT M16KCLBYTES;
MACRO_M16KCLSHIFT M16KCLSHIFT;
MACRO_MACHINE MACHINE_THREAD_STATE;
MACRO_MACHINE_UNKNOWN MACHINE_UNKNOWN;
MACRO_MACH_SCHED MACH_CALLOUT;
MACRO_MACH_SCHED MACH_CALL_CONT;
MACRO_MACH_SCHED MACH_DEMOTE;
MACRO_MACH_EXCEPTION MACH_EXCEPTION_CODES;
MACRO_MACH_SCHED MACH_FAILSAFE;
MACRO_MACH_SCHED MACH_FAIRSHARE_ENTER;
MACRO_MACH_SCHED MACH_FAIRSHARE_EXIT;
MACRO_MACH_SCHED MACH_GET_URGENCY;
MACRO_MACH_SCHED MACH_IDLE;
MACRO_MACH_KDB MACH_KDB;
MACRO_MACH_SCHED MACH_MAKE_RUNNABLE;
MACRO_MACH_SCHED MACH_MOVED;
MACRO_MACH_MSG MACH_MSGH_BITS_CIRCULAR;
MACRO_MACH_MSG MACH_MSGH_BITS_COMPLEX;
MACRO_MACH_MSG MACH_MSGH_BITS_LOCAL_MASK;
MACRO_MACH_MSG MACH_MSGH_BITS_PORTS_MASK;
MACRO_MACH_MSG MACH_MSGH_BITS_REMOTE_MASK;
MACRO_MACH_MSG MACH_MSGH_BITS_USED;
MACRO_MACH_MSG MACH_MSGH_BITS_USER;
MACRO_MACH_MSG MACH_MSGH_BITS_ZERO;
MACRO_MACH_MSG MACH_MSGH_KIND_NORMAL;
MACRO_MACH_MSG MACH_MSGH_KIND_NOTIFICATION;
MACRO_MACH_MSG MACH_MSG_ALLOCATE;
MACRO_MACH_MSG MACH_MSG_BODY_NULL;
MACRO_MACH_MSG MACH_MSG_DESCRIPTOR_NULL;
MACRO_MACH_MSG MACH_MSG_IPC_KERNEL;
MACRO_MACH_MSG MACH_MSG_IPC_SPACE;
MACRO_MACH_MSG MACH_MSG_MASK;
MACRO_MACH_MSG MACH_MSG_NULL;
MACRO_MACH_MSG MACH_MSG_OOL_DESCRIPTOR;
MACRO_MACH_MSG MACH_MSG_OOL_PORTS_DESCRIPTOR;
MACRO_MACH_MSG MACH_MSG_OOL_VOLATILE_DESCRIPTOR;
MACRO_MACH_MSG MACH_MSG_OPTION_NONE;
MACRO_MACH_MSG MACH_MSG_OVERWRITE;
MACRO_MACH_MSG MACH_MSG_PHYSICAL_COPY;
MACRO_MACH_MSG MACH_MSG_PORT_DESCRIPTOR;
MACRO_MACH_MSG MACH_MSG_SIZE_MAX;
MACRO_MACH_MSG MACH_MSG_SIZE_NULL;
MACRO_MACH_MSG MACH_MSG_SUCCESS;
MACRO_MACH_MSG MACH_MSG_TIMEOUT_NONE;
MACRO_MACH_MSG MACH_MSG_TRAILER_FORMAT_0;
MACRO_MACH_MSG MACH_MSG_TYPE_COPY_RECEIVE;
MACRO_MACH_MSG MACH_MSG_TYPE_COPY_SEND;
MACRO_MACH_MSG MACH_MSG_TYPE_LAST;
MACRO_MACH_MSG MACH_MSG_TYPE_MAKE_SEND;
MACRO_MACH_MSG MACH_MSG_TYPE_MAKE_SEND_ONCE;
MACRO_MACH_MSG MACH_MSG_TYPE_MOVE_RECEIVE;
MACRO_MACH_MSG MACH_MSG_TYPE_MOVE_SEND;
MACRO_MACH_MSG MACH_MSG_TYPE_MOVE_SEND_ONCE;
MACRO_MACH_MSG MACH_MSG_TYPE_POLYMORPHIC;
MACRO_MACH_MSG MACH_MSG_TYPE_PORT_NAME;
MACRO_MACH_MSG MACH_MSG_TYPE_PORT_NONE;
MACRO_MACH_MSG MACH_MSG_TYPE_PORT_RECEIVE;
MACRO_MACH_MSG MACH_MSG_TYPE_PORT_SEND;
MACRO_MACH_MSG MACH_MSG_TYPE_PORT_SEND_ONCE;
MACRO_MACH_MSG MACH_MSG_VIRTUAL_COPY;
MACRO_MACH_MSG MACH_MSG_VM_KERNEL;
MACRO_MACH_MSG MACH_MSG_VM_SPACE;
MACRO_MACH_NOTIFY MACH_NOTIFY_DEAD_NAME;
MACRO_MACH_NOTIFY MACH_NOTIFY_FIRST;
MACRO_MACH_NOTIFY MACH_NOTIFY_LAST;
MACRO_MACH_NOTIFY MACH_NOTIFY_NO_SENDERS;
MACRO_MACH_NOTIFY MACH_NOTIFY_PORT_DELETED;
MACRO_MACH_NOTIFY MACH_NOTIFY_PORT_DESTROYED;
MACRO_MACH_NOTIFY MACH_NOTIFY_SEND_ONCE;
MACRO_MACH_NOTIFY MACH_NOTIFY_SEND_POSSIBLE;
MACRO_MACH_PORTS MACH_PORTS_SLOTS_USED;
MACRO_MACH MACH_PORT_DEAD;
MACRO_MACH MACH_PORT_DNREQUESTS_SIZE;
MACRO_MACH MACH_PORT_DNREQUESTS_SIZE_COUNT;
MACRO_MACH MACH_PORT_LIMITS_INFO;
MACRO_MACH MACH_PORT_NULL;
MACRO_MACH MACH_PORT_QLIMIT_BASIC;
MACRO_MACH MACH_PORT_QLIMIT_DEFAULT;
MACRO_MACH MACH_PORT_QLIMIT_KERNEL;
MACRO_MACH MACH_PORT_QLIMIT_LARGE;
MACRO_MACH MACH_PORT_QLIMIT_MAX;
MACRO_MACH MACH_PORT_QLIMIT_MIN;
MACRO_MACH MACH_PORT_QLIMIT_SMALL;
MACRO_MACH MACH_PORT_QLIMIT_ZERO;
MACRO_MACH MACH_PORT_RECEIVE_STATUS;
MACRO_MACH MACH_PORT_RIGHT_DEAD_NAME;
MACRO_MACH MACH_PORT_RIGHT_LABELH;
MACRO_MACH MACH_PORT_RIGHT_NUMBER;
MACRO_MACH MACH_PORT_RIGHT_PORT_SET;
MACRO_MACH MACH_PORT_RIGHT_RECEIVE;
MACRO_MACH MACH_PORT_RIGHT_SEND;
MACRO_MACH MACH_PORT_RIGHT_SEND_ONCE;
MACRO_MACH MACH_PORT_SRIGHTS_NONE;
MACRO_MACH MACH_PORT_SRIGHTS_PRESENT;
MACRO_MACH MACH_PORT_TYPE_ALL_RIGHTS;
MACRO_MACH MACH_PORT_TYPE_DEAD_NAME;
MACRO_MACH MACH_PORT_TYPE_DNREQUEST;
MACRO_MACH MACH_PORT_TYPE_LABELH;
MACRO_MACH MACH_PORT_TYPE_NONE;
MACRO_MACH MACH_PORT_TYPE_PORT_OR_DEAD;
MACRO_MACH MACH_PORT_TYPE_PORT_RIGHTS;
MACRO_MACH MACH_PORT_TYPE_PORT_SET;
MACRO_MACH MACH_PORT_TYPE_RECEIVE;
MACRO_MACH MACH_PORT_TYPE_SEND;
MACRO_MACH MACH_PORT_TYPE_SEND_ONCE;
MACRO_MACH MACH_PORT_TYPE_SEND_RECEIVE;
MACRO_MACH MACH_PORT_TYPE_SEND_RIGHTS;
MACRO_MACH MACH_PORT_TYPE_SPREQUEST;
MACRO_MACH MACH_PORT_TYPE_SPREQUEST_DELAYED;
MACRO_MACH_SCHED MACH_PROMOTE;
MACRO_MACH_MSG MACH_RCV_BODY_ERROR;
MACRO_MACH_MSG MACH_RCV_HEADER_ERROR;
MACRO_MACH_MSG MACH_RCV_INTERRUPT;
MACRO_MACH_MSG MACH_RCV_INTERRUPTED;
MACRO_MACH_MSG MACH_RCV_INVALID_DATA;
MACRO_MACH_MSG MACH_RCV_INVALID_NAME;
MACRO_MACH_MSG MACH_RCV_INVALID_NOTIFY;
MACRO_MACH_MSG MACH_RCV_INVALID_TRAILER;
MACRO_MACH_MSG MACH_RCV_INVALID_TYPE;
MACRO_MACH_MSG MACH_RCV_IN_PROGRESS;
MACRO_MACH_MSG MACH_RCV_IN_PROGRESS_TIMED;
MACRO_MACH_MSG MACH_RCV_IN_SET;
MACRO_MACH_MSG MACH_RCV_LARGE;
MACRO_MACH_MSG MACH_RCV_MSG;
MACRO_MACH_MSG MACH_RCV_NOTIFY;
MACRO_MACH_MSG MACH_RCV_OVERWRITE;
MACRO_MACH_MSG MACH_RCV_PORT_CHANGED;
MACRO_MACH_MSG MACH_RCV_PORT_DIED;
MACRO_MACH_MSG MACH_RCV_SCATTER_SMALL;
MACRO_MACH_MSG MACH_RCV_TIMED_OUT;
MACRO_MACH_MSG MACH_RCV_TIMEOUT;
MACRO_MACH_MSG MACH_RCV_TOO_LARGE;
MACRO_MACH_MSG MACH_RCV_TRAILER_AUDIT;
MACRO_MACH_MSG MACH_RCV_TRAILER_AV;
MACRO_MACH_MSG MACH_RCV_TRAILER_CTX;
MACRO_MACH_MSG MACH_RCV_TRAILER_LABELS;
MACRO_MACH_MSG MACH_RCV_TRAILER_MASK;
MACRO_MACH_MSG MACH_RCV_TRAILER_NULL;
MACRO_MACH_MSG MACH_RCV_TRAILER_SENDER;
MACRO_MACH_MSG MACH_RCV_TRAILER_SEQNO;
MACRO_MACH_SCHED MACH_REDISPATCH;
MACRO_MACH_SCHED MACH_REMOTE_AST;
MACRO_MACH_SCHED MACH_SCHED;
MACRO_MACH_SCHED MACH_SCHED_LPA_BROKEN;
MACRO_MACH_MSG MACH_SEND_ALWAYS;
MACRO_MACH_MSG MACH_SEND_INTERRUPT;
MACRO_MACH_MSG MACH_SEND_INTERRUPTED;
MACRO_MACH_MSG MACH_SEND_INVALID_DATA;
MACRO_MACH_MSG MACH_SEND_INVALID_DEST;
MACRO_MACH_MSG MACH_SEND_INVALID_HEADER;
MACRO_MACH_MSG MACH_SEND_INVALID_MEMORY;
MACRO_MACH_MSG MACH_SEND_INVALID_NOTIFY;
MACRO_MACH_MSG MACH_SEND_INVALID_REPLY;
MACRO_MACH_MSG MACH_SEND_INVALID_RIGHT;
MACRO_MACH_MSG MACH_SEND_INVALID_RT_OOL_SIZE;
MACRO_MACH_MSG MACH_SEND_INVALID_TRAILER;
MACRO_MACH_MSG MACH_SEND_INVALID_TYPE;
MACRO_MACH_MSG MACH_SEND_IN_PROGRESS;
MACRO_MACH_MSG MACH_SEND_MSG;
MACRO_MACH_MSG MACH_SEND_MSG_TOO_SMALL;
MACRO_MACH_MSG MACH_SEND_NOTIFY;
MACRO_MACH_MSG MACH_SEND_NO_BUFFER;
MACRO_MACH_MSG MACH_SEND_TIMED_OUT;
MACRO_MACH_MSG MACH_SEND_TIMEOUT;
MACRO_MACH_MSG MACH_SEND_TOO_LARGE;
MACRO_MACH_MSG MACH_SEND_TRAILER;
MACRO_MACH_SCHED MACH_STACK_ATTACH;
MACRO_MACH_SCHED MACH_STACK_DEPTH;
MACRO_MACH_SCHED MACH_STACK_DETACH;
MACRO_MACH_SCHED MACH_STACK_HANDOFF;
MACRO_MACH_SCHED MACH_URGENCY;
MACRO_ZONE_NAME_MAX_LEN MACH_ZONE_NAME_MAX_LEN;
MACRO_MAC_MAX MAC_ALL_ENFORCE;
MACRO_MAC_MAX MAC_AUDIT_DATA_LIMIT;
MACRO_MAC_MAX MAC_AUDIT_DEFAULT;
MACRO_MAC_MAX MAC_AUDIT_NO;
MACRO_MAC_MAX MAC_AUDIT_YES;
MACRO_MAC_MAX MAC_FILE_ENFORCE;
MACRO_MAC_MAX MAC_MACH_ENFORCE;
MACRO_MAC_MAX MAC_MAX_LABEL_BUF_LEN;
MACRO_MAC_MAX MAC_MAX_LABEL_ELEMENT_DATA;
MACRO_MAC_MAX MAC_MAX_LABEL_ELEMENT_NAME;
MACRO_MAC_MAX MAC_MAX_MANAGED_NAMESPACES;
MACRO_MAC_MAX MAC_MAX_POLICY_NAME;
MACRO_MAC_MAX MAC_MBUF_ENFORCE;
MACRO_MAC_MAX MAC_NET_ENFORCE;
MACRO_MAC_WAITOK MAC_NOWAIT;
MACRO_MAC MAC_OS_X_VERSION_10_0;
MACRO_MAC MAC_OS_X_VERSION_10_1;
MACRO_MAC MAC_OS_X_VERSION_10_2;
MACRO_MAC MAC_OS_X_VERSION_10_3;
MACRO_MAC MAC_OS_X_VERSION_10_4;
MACRO_MAC MAC_OS_X_VERSION_10_5;
MACRO_MAC MAC_OS_X_VERSION_10_6;
MACRO_MAC MAC_OS_X_VERSION_10_7;
MACRO_MAC MAC_OS_X_VERSION_MAX_ALLOWED;
MACRO_MAC MAC_OS_X_VERSION_MIN_REQUIRED;
MACRO_MAC_MAX MAC_PIPE_ENFORCE;
MACRO_MAC_MAX MAC_POLICY_OPS_VERSION;
MACRO_MAC_MAX MAC_POSIXSEM_ENFORCE;
MACRO_MAC_MAX MAC_POSIXSHM_ENFORCE;
MACRO_MAC_MAX MAC_PROC_CHECK_HIBERNATE;
MACRO_MAC_MAX MAC_PROC_CHECK_RESUME;
MACRO_MAC_MAX MAC_PROC_CHECK_SHUTDOWN_SOCKETS;
MACRO_MAC_MAX MAC_PROC_CHECK_SUSPEND;
MACRO_MAC_MAX MAC_PROC_ENFORCE;
MACRO_MAC_MAX MAC_SOCKET_ENFORCE;
MACRO_MAC_MAX MAC_SYSTEM_ENFORCE;
MACRO_MAC_MAX MAC_SYSVMSG_ENFORCE;
MACRO_MAC_MAX MAC_SYSVSEM_ENFORCE;
MACRO_MAC_MAX MAC_SYSVSHM_ENFORCE;
MACRO_MAC_MAX MAC_VM_ENFORCE;
MACRO_MAC_MAX MAC_VNODE_ENFORCE;
MACRO_MAC_WAITOK MAC_WAITOK;
MACRO_MADV MADV_CAN_REUSE;
MACRO_MADV MADV_DONTNEED;
MACRO_MADV MADV_FREE;
MACRO_MADV MADV_FREE_REUSABLE;
MACRO_MADV MADV_FREE_REUSE;
MACRO_MADV MADV_NORMAL;
MACRO_MADV MADV_RANDOM;
MACRO_MADV MADV_SEQUENTIAL;
MACRO_MADV MADV_WILLNEED;
MACRO_MADV MADV_ZERO_WIRED_PAGES;
MACRO_MAGIC MAGIC;
MACRO_MALLOC MALLOC_ADMIN_REGION_RANGE_TYPE;
MACRO_MALLOC MALLOC_PTR_IN_USE_RANGE_TYPE;
MACRO_MALLOC MALLOC_PTR_REGION_RANGE_TYPE;
MACRO_MALLOC MALLOC_ZONE_SPECIFIC_FLAGS;
MACRO_MAP_FILE MAP_ANON;
MACRO_MAP_SHARED MAP_COPY;
MACRO_MAP_FAILED MAP_FAILED;
MACRO_MAP_FILE MAP_FILE;
MACRO_MAP_SHARED MAP_FIXED;
MACRO_MAP_SHARED MAP_HASSEMAPHORE;
MACRO_MAP_SHARED MAP_JIT;
MACRO_MAP MAP_MEM_COPYBACK;
MACRO_MAP MAP_MEM_IO;
MACRO_MAP MAP_MEM_NAMED_CREATE;
MACRO_MAP MAP_MEM_NAMED_REUSE;
MACRO_MAP MAP_MEM_NOOP;
MACRO_MAP MAP_MEM_ONLY;
MACRO_MAP MAP_MEM_PURGABLE;
MACRO_MAP MAP_MEM_WCOMB;
MACRO_MAP MAP_MEM_WTHRU;
MACRO_MAP_SHARED MAP_NOCACHE;
MACRO_MAP_SHARED MAP_NOEXTEND;
MACRO_MAP_SHARED MAP_NORESERVE;
MACRO_MAP_SHARED MAP_PRIVATE;
MACRO_MAP_SHARED MAP_RENAME;
MACRO_MAP_SHARED MAP_RESERVED0080;
MACRO_MAP_SHARED MAP_SHARED;
MACRO_MATCH MATCH_FAILED;
MACRO_MATCH MATCH_SUCCEEDED;
MACRO_MATH MATH_ERREXCEPT;
MACRO_MATH MATH_ERRNO;
MACRO_MATTR MATTR_CACHE;
MACRO_MATTR MATTR_MIGRATE;
MACRO_MATTR MATTR_REPLICATE;
MACRO_MATTR MATTR_VAL_CACHE_FLUSH;
MACRO_MATTR MATTR_VAL_CACHE_SYNC;
MACRO_MATTR MATTR_VAL_DCACHE_FLUSH;
MACRO_MATTR MATTR_VAL_GET;
MACRO_MATTR MATTR_VAL_GET_INFO;
MACRO_MATTR MATTR_VAL_ICACHE_FLUSH;
MACRO_MATTR MATTR_VAL_OFF;
MACRO_MATTR MATTR_VAL_ON;
MACRO_MINBUCKET MAXALLOCSAVE;
MACRO_MAXAUDITDATA MAXAUDITDATA;
MACRO_CROUND MAXBSIZE;
MACRO_MAXCDNAME MAXCDNAME;
MACRO_MAXCOMLEN MAXCOMLEN;
MACRO_DFLCSIZ MAXCSIZ;
MACRO_MAXDEPTH MAXDEPTH;
MACRO_MAXDFLSRCH MAXDFLSRCH;
MACRO_PACKETSZ MAXDNAME;
MACRO_MAXDNSRCH MAXDNSRCH;
MACRO_MAXDOMNAMELEN MAXDOMNAMELEN;
MACRO_MAXDSIZ MAXDSIZ;
MACRO_MAXFRAG MAXFRAG;
MACRO_MAXHOSTNAMELEN MAXHOSTNAMELEN;
MACRO_MAXCOMLEN MAXINTERP;
MACRO_MAXLOGNAME MAXLOGNAME;
MACRO_MAXNAMELEN MAXNAMELEN;
MACRO_MAXNAMLEN MAXNAMLEN;
MACRO_MAXNETNAMELEN MAXNETNAMELEN;
MACRO_MAXNS MAXNS;
MACRO_MAXPACKETSIZE MAXPACKETSIZE;
MACRO_MAXPATHLEN MAXPATHLEN;
MACRO_MAXPHYS MAXPHYS;
MACRO_MAXPHYSIO MAXPHYSIO;
MACRO_MAXPHYSIO_WIRED MAXPHYSIO_WIRED;
MACRO_MAXPKTSIZE MAXPKTSIZE;
MACRO_MAXPRI MAXPRI;
MACRO_MAXQUOTAS MAXQUOTAS;
MACRO_MAXTOKEN MAXQUOTESTR;
MACRO_MAXRESOLVSORT MAXRESOLVSORT;
MACRO_MAXSEGSIZE MAXSEGSIZE;
MACRO_DFLSSIZ MAXSSIZ;
MACRO_MAXSYMLINKS MAXSYMLINKS;
MACRO_MAXTHREADNAMESIZE MAXTHREADNAMESIZE;
MACRO_MAXTOKEN MAXTOKEN;
MACRO_MAXTTL MAXTTL;
MACRO_MAXUPRC MAXUPRC;
MACRO_MAXUSERS MAXUSERS;
MACRO_MAX_NAME MAX_ALIAS;
MACRO_MAX_AUDITSTRING MAX_AUDITSTRING_LEN;
MACRO_MAX_AUDIT MAX_AUDIT_RECORDS;
MACRO_MAX_AUDIT_RECORD MAX_AUDIT_RECORD_SIZE;
MACRO_MAX_NETOBJ MAX_AUTH_BYTES;
MACRO_MAX_CALLBACK MAX_CALLBACK_IDS;
MACRO_MAX_CALLBACK MAX_CALLBACK_SUBIDS;
MACRO_MAX_CANON MAX_CANON;
MACRO_COMMAND MAX_COMMAND;
MACRO_MAX_USES MAX_CROSSLINKS;
MACRO_MAX_NAME MAX_DEBUG_LEVEL;
MACRO_MAX_DEBUG MAX_DEBUG_TOKENS;
MACRO_MAX_DEBUG MAX_DEBUG_TOKEN_LEN;
MACRO_MAX_IQ MAX_DQ_TIME;
MACRO_MAX_ENGINEID MAX_ENGINEID_LENGTH;
MACRO_MAX_NAME MAX_ENTRY_SIZE;
MACRO_MAX_PATH MAX_FILEID;
MACRO_COMMAND MAX_FORM_COMMAND;
MACRO_MAX_CANON MAX_INPUT;
MACRO_MAX_IPOPTLEN MAX_IPOPTLEN;
MACRO_MAX_IQ MAX_IQ_TIME;
MACRO_MAX_KCTL MAX_KCTL_NAME;
MACRO_MAX_KEYTAB MAX_KEYTAB_NAME_LEN;
MACRO_ORDINAL MAX_LIBRARY_ORDINAL;
MACRO_MAX_LIFE MAX_LIFE;
MACRO_MAX_USES MAX_LINE;
MACRO_MAX_MACHINE MAX_MACHINE_NAME;
MACRO_MAX_MBUF MAX_MBUF_CNAME;
MACRO_MAX_MEM MAX_MEM_LEVEL;
MACRO_MENU_COMMAND MAX_MENU_COMMAND;
MACRO_MAX_MSG MAX_MSG_BSIZE;
MACRO_LEN MAX_NAME_LEN;
MACRO_MAX_NAME MAX_NAME_SIZE;
MACRO_MAX_NETOBJ MAX_NETOBJ_SZ;
MACRO_MAX_SUBID MAX_OID_LEN;
MACRO_MAX_PAGE MAX_PAGE_NUMBER;
MACRO_MAX_PAGE MAX_PAGE_OFFSET;
MACRO_MAX_PATH MAX_PATH_LEN;
MACRO_MAX_PAGE MAX_REC_NUMBER;
MACRO_MAX_SACK MAX_SACK_BLKS;
MACRO_SECT MAX_SECT;
MACRO_MAX_SNMP MAX_SNMP_ERR;
MACRO_MAX_SOPS MAX_SOPS;
MACRO_STATS MAX_STATS;
MACRO_MAX_SUBID MAX_SUBID;
MACRO_MAX_TCPOPTLEN MAX_TCPOPTLEN;
MACRO_MAX_TERMCAP MAX_TERMCAP_LENGTH;
MACRO_MAX_TERMCAP MAX_TERMINFO_LENGTH;
MACRO_MAX_USES MAX_USES;
MACRO_WAITTIME MAX_WAITTIME;
MACRO_MAX_MEM MAX_WBITS;
MACRO_MBIGCLSHIFT MBIGCLBYTES;
MACRO_MBIGCLSHIFT MBIGCLSHIFT;
MACRO_MBSTRING MBSTRING_ASC;
MACRO_MBSTRING MBSTRING_BMP;
MACRO_MBSTRING MBSTRING_FLAG;
MACRO_MBSTRING MBSTRING_UNIV;
MACRO_MBSTRING MBSTRING_UTF8;
MACRO_MB MB_LEN_MAX;
MACRO_MCAST MCAST_BLOCK_SOURCE;
MACRO_MCAST_UNDEFINED MCAST_EXCLUDE;
MACRO_MCAST_UNDEFINED MCAST_INCLUDE;
MACRO_MCAST MCAST_JOIN_GROUP;
MACRO_MCAST MCAST_JOIN_SOURCE_GROUP;
MACRO_MCAST MCAST_LEAVE_GROUP;
MACRO_MCAST MCAST_LEAVE_SOURCE_GROUP;
MACRO_MCAST MCAST_UNBLOCK_SOURCE;
MACRO_MCAST_UNDEFINED MCAST_UNDEFINED;
MACRO_MCLSHIFT MCLBYTES;
MACRO_MCLOFSET MCLOFSET;
MACRO_MCLSHIFT MCLSHIFT;
MACRO_MCL MCL_CURRENT;
MACRO_MCL MCL_FUTURE;
MACRO_MCS MCS_DISABLED;
MACRO_MCS MCS_OFFLINE;
MACRO_MCS MCS_ONLINE;
MACRO_MCS MCS_PURGING;
MACRO_MD2 MD2_BLOCK;
MACRO_MD2 MD2_DIGEST_LENGTH;
MACRO_MD4 MD4_CBLOCK;
MACRO_MD4 MD4_DIGEST_LENGTH;
MACRO_MD4 MD4_LBLOCK;
MACRO_MD5 MD5_CBLOCK;
MACRO_MD5 MD5_DIGEST_LENGTH;
MACRO_MD5 MD5_LBLOCK;
MACRO_MDC2 MDC2_BLOCK;
MACRO_MDC2 MDC2_DIGEST_LENGTH;
MACRO_ALLDELAY MDMBUF;
MACRO_MECAB MECAB_BOS_NODE;
MACRO_MECAB MECAB_EOS_NODE;
MACRO_MECAB MECAB_NOR_NODE;
MACRO_MECAB MECAB_PRE_NODE;
MACRO_MECAB MECAB_SYS_DIC;
MACRO_MECAB MECAB_UNK_DIC;
MACRO_MECAB MECAB_UNK_NODE;
MACRO_MECAB MECAB_USR_DIC;
MACRO_MEMORY MEMORY_OBJECT_ATTRIBUTE_INFO;
MACRO_MEMORY MEMORY_OBJECT_BEHAVIOR_INFO;
MACRO_VM_MAP MEMORY_OBJECT_CONTROL_NULL;
MACRO_MEMORY MEMORY_OBJECT_COPY_CALL;
MACRO_MEMORY MEMORY_OBJECT_COPY_DELAY;
MACRO_MEMORY MEMORY_OBJECT_COPY_INVALID;
MACRO_MEMORY MEMORY_OBJECT_COPY_NONE;
MACRO_MEMORY MEMORY_OBJECT_COPY_SYMMETRIC;
MACRO_MEMORY MEMORY_OBJECT_COPY_SYNC;
MACRO_MEMORY MEMORY_OBJECT_COPY_TEMPORARY;
MACRO_MEMORY MEMORY_OBJECT_DATA_FLUSH;
MACRO_MEMORY MEMORY_OBJECT_DATA_FLUSH_ALL;
MACRO_MEMORY MEMORY_OBJECT_DATA_NO_CHANGE;
MACRO_MEMORY MEMORY_OBJECT_DATA_PURGE;
MACRO_MEMORY MEMORY_OBJECT_DATA_SYNC;
MACRO_VM_MAP MEMORY_OBJECT_DEFAULT_NULL;
MACRO_MEMORY MEMORY_OBJECT_INFO_MAX;
MACRO_MEMORY MEMORY_OBJECT_IO_SYNC;
MACRO_VM_MAP MEMORY_OBJECT_NAME_NULL;
MACRO_VM_MAP MEMORY_OBJECT_NULL;
MACRO_MEMORY MEMORY_OBJECT_PERFORMANCE_INFO;
MACRO_MEMORY MEMORY_OBJECT_RELEASE_NO_OP;
MACRO_MEMORY MEMORY_OBJECT_RESPECT_CACHE;
MACRO_MEMORY MEMORY_OBJECT_RETURN_ALL;
MACRO_MEMORY MEMORY_OBJECT_RETURN_ANYTHING;
MACRO_MEMORY MEMORY_OBJECT_RETURN_DIRTY;
MACRO_MEMORY MEMORY_OBJECT_RETURN_NONE;
MACRO_MEMORY MEMORY_OBJECT_TERMINATE_IDLE;
MACRO_MFCTBLSIZ MFCTBLSIZ;
MACRO_MFD MFD_CANNOT_CREATE_EVER;
MACRO_MFD MFD_CANNOT_CREATE_NOW;
MACRO_MFD MFD_END_OF_DATA;
MACRO_MFD MFD_ERROR;
MACRO_MFD MFD_NOT_VALID_EVER;
MACRO_MFD MFD_NOT_VALID_NOW;
MACRO_MFD MFD_NOT_WRITABLE;
MACRO_MFD MFD_RESOURCE_UNAVAILABLE;
MACRO_MFD MFD_ROW_CREATED;
MACRO_MFD MFD_ROW_DATA_FROM_USER;
MACRO_MFD MFD_ROW_DELETED;
MACRO_MFD MFD_ROW_DIRTY;
MACRO_MFD MFD_ROW_FLAG_USER_1;
MACRO_MFD MFD_ROW_FLAG_USER_2;
MACRO_MFD MFD_ROW_FLAG_USER_3;
MACRO_MFD MFD_ROW_FLAG_USER_4;
MACRO_MFD MFD_ROW_FLAG_USER_5;
MACRO_MFD MFD_ROW_FLAG_USER_6;
MACRO_MFD MFD_ROW_FLAG_USER_7;
MACRO_MFD MFD_ROW_FLAG_USER_8;
MACRO_MFD MFD_ROW_FLAG_USER_MASK;
MACRO_MFD MFD_ROW_MASK;
MACRO_MFD MFD_SKIP;
MACRO_MFD MFD_SUCCESS;
MACRO_MFSNAMELEN MFSNAMELEN;
MACRO_MFSNAMELEN MFSTYPENAMELEN;
MACRO_MH MH_ALLMODSBOUND;
MACRO_MH MH_ALLOW_STACK_EXECUTION;
MACRO_MH MH_BINDATLOAD;
MACRO_MH MH_BINDS_TO_WEAK;
MACRO_MH MH_BUNDLE;
MACRO_MH MH_CANONICAL;
MACRO_MH MH_CIGAM;
MACRO_MH MH_CIGAM_64;
MACRO_MH MH_CORE;
MACRO_MH MH_DEAD_STRIPPABLE_DYLIB;
MACRO_MH MH_DSYM;
MACRO_MH MH_DYLDLINK;
MACRO_MH MH_DYLIB;
MACRO_MH MH_DYLIB_STUB;
MACRO_MH MH_DYLINKER;
MACRO_MH MH_EXECUTE;
MACRO_MH MH_FORCE_FLAT;
MACRO_MH MH_FVMLIB;
MACRO_MH MH_HAS_TLV_DESCRIPTORS;
MACRO_MH MH_INCRLINK;
MACRO_MH MH_KEXT_BUNDLE;
MACRO_MH MH_LAZY_INIT;
MACRO_MH MH_MAGIC;
MACRO_MH MH_MAGIC_64;
MACRO_MH MH_NOFIXPREBINDING;
MACRO_MH MH_NOMULTIDEFS;
MACRO_MH MH_NOUNDEFS;
MACRO_MH MH_NO_HEAP_EXECUTION;
MACRO_MH MH_NO_REEXPORTED_DYLIBS;
MACRO_MH MH_OBJECT;
MACRO_MH MH_PIE;
MACRO_MH MH_PREBINDABLE;
MACRO_MH MH_PREBOUND;
MACRO_MH MH_PRELOAD;
MACRO_MH MH_ROOT_SAFE;
MACRO_MH MH_SETUID_SAFE;
MACRO_MH MH_SPLIT_SEGS;
MACRO_MH MH_SUBSECTIONS_VIA_SYMBOLS;
MACRO_MH MH_TWOLEVEL;
MACRO_MH MH_WEAK_DEFINES;
MACRO_MIB MIB_ACCESS_CREATE;
MACRO_MIB MIB_ACCESS_NOACCESS;
MACRO_MIB MIB_ACCESS_NOTIFY;
MACRO_MIB MIB_ACCESS_READONLY;
MACRO_MIB MIB_ACCESS_READWRITE;
MACRO_MIB MIB_ACCESS_WRITEONLY;
MACRO_MIB_REGISTERED MIB_DUPLICATE_REGISTRATION;
MACRO_MIB_IFTYPE MIB_EGPNEIGHSTATE_AQUISITION;
MACRO_MIB_IFTYPE MIB_EGPNEIGHSTATE_CEASE;
MACRO_MIB_IFTYPE MIB_EGPNEIGHSTATE_DOWN;
MACRO_MIB_IFTYPE MIB_EGPNEIGHSTATE_IDLE;
MACRO_MIB_IFTYPE MIB_EGPNEIGHSTATE_UP;
MACRO_MIB_IFTYPE MIB_FORWARD_GATEWAY;
MACRO_MIB_IFTYPE MIB_FORWARD_HOST;
MACRO_MIB_HANDLER MIB_HANDLER_AUTO_NEXT;
MACRO_MIB_HANDLER MIB_HANDLER_AUTO_NEXT_OVERRIDE_ONCE;
MACRO_MIB_HANDLER MIB_HANDLER_CUSTOM1;
MACRO_MIB_HANDLER MIB_HANDLER_CUSTOM2;
MACRO_MIB_HANDLER MIB_HANDLER_CUSTOM3;
MACRO_MIB_HANDLER MIB_HANDLER_CUSTOM4;
MACRO_MIB_HANDLER MIB_HANDLER_INSTANCE;
MACRO_MIB_IFTYPE MIB_IFSTATUS_DOWN;
MACRO_MIB_IFTYPE MIB_IFSTATUS_TESTING;
MACRO_MIB_IFTYPE MIB_IFSTATUS_UP;
MACRO_MIB_IFTYPE MIB_IFTYPE_BASICISDN;
MACRO_MIB_IFTYPE MIB_IFTYPE_CEPT;
MACRO_MIB_IFTYPE MIB_IFTYPE_DDNX25;
MACRO_MIB_IFTYPE MIB_IFTYPE_ETHERNETCSMACD;
MACRO_MIB_IFTYPE MIB_IFTYPE_FDDI;
MACRO_MIB_IFTYPE MIB_IFTYPE_HDH1822;
MACRO_MIB_IFTYPE MIB_IFTYPE_HYPERCHANNEL;
MACRO_MIB_IFTYPE MIB_IFTYPE_ISO88023CSMACD;
MACRO_MIB_IFTYPE MIB_IFTYPE_ISO88024TOKENBUS;
MACRO_MIB_IFTYPE MIB_IFTYPE_ISO88025TOKENRING;
MACRO_MIB_IFTYPE MIB_IFTYPE_ISO88026MAN;
MACRO_MIB_IFTYPE MIB_IFTYPE_LAPB;
MACRO_MIB_IFTYPE MIB_IFTYPE_OTHER;
MACRO_MIB_IFTYPE MIB_IFTYPE_PRIMARYISDN;
MACRO_MIB_IFTYPE MIB_IFTYPE_PROPPOINTTOPOINTSERIAL;
MACRO_MIB_IFTYPE MIB_IFTYPE_PROTEON10MBIT;
MACRO_MIB_IFTYPE MIB_IFTYPE_PROTEON80MBIT;
MACRO_MIB_IFTYPE MIB_IFTYPE_REGULAR1822;
MACRO_MIB_IFTYPE MIB_IFTYPE_RFC877X25;
MACRO_MIB_IFTYPE MIB_IFTYPE_SDLC;
MACRO_MIB_IFTYPE MIB_IFTYPE_STARLAN;
MACRO_MIB_IFTYPE MIB_IFTYPE_T1CARRIER;
MACRO_MIB_IFTYPE MIB_IPROUTEPROTO_BBNSPFIGP;
MACRO_MIB_IFTYPE MIB_IPROUTEPROTO_CISCOIGRP;
MACRO_MIB_IFTYPE MIB_IPROUTEPROTO_EGP;
MACRO_MIB_IFTYPE MIB_IPROUTEPROTO_ESIS;
MACRO_MIB_IFTYPE MIB_IPROUTEPROTO_GGP;
MACRO_MIB_IFTYPE MIB_IPROUTEPROTO_HELLO;
MACRO_MIB_IFTYPE MIB_IPROUTEPROTO_ICMP;
MACRO_MIB_IFTYPE MIB_IPROUTEPROTO_ISIS;
MACRO_MIB_IFTYPE MIB_IPROUTEPROTO_LOCAL;
MACRO_MIB_IFTYPE MIB_IPROUTEPROTO_NETMGMT;
MACRO_MIB_IFTYPE MIB_IPROUTEPROTO_OIGP;
MACRO_MIB_IFTYPE MIB_IPROUTEPROTO_OTHER;
MACRO_MIB_IFTYPE MIB_IPROUTEPROTO_RIP;
MACRO_MIB_IFTYPE MIB_IPROUTETYPE_DIRECT;
MACRO_MIB_IFTYPE MIB_IPROUTETYPE_INVALID;
MACRO_MIB_IFTYPE MIB_IPROUTETYPE_OTHER;
MACRO_MIB_IFTYPE MIB_IPROUTETYPE_REMOTE;
MACRO_MIB_REGISTERED MIB_NO_SUCH_REGISTRATION;
MACRO_MIB_REGISTERED MIB_REGISTERED_OK;
MACRO_MIB_REGISTERED MIB_REGISTRATION_FAILED;
MACRO_MIB MIB_STATUS_CURRENT;
MACRO_MIB MIB_STATUS_DEPRECATED;
MACRO_MIB MIB_STATUS_MANDATORY;
MACRO_MIB MIB_STATUS_OBSOLETE;
MACRO_MIB MIB_STATUS_OPTIONAL;
MACRO_MIB_IFTYPE MIB_TCPCONNSTATE_CLOSED;
MACRO_MIB_IFTYPE MIB_TCPCONNSTATE_CLOSEWAIT;
MACRO_MIB_IFTYPE MIB_TCPCONNSTATE_CLOSING;
MACRO_MIB_IFTYPE MIB_TCPCONNSTATE_ESTABLISHED;
MACRO_MIB_IFTYPE MIB_TCPCONNSTATE_FINWAIT1;
MACRO_MIB_IFTYPE MIB_TCPCONNSTATE_FINWAIT2;
MACRO_MIB_IFTYPE MIB_TCPCONNSTATE_LASTACK;
MACRO_MIB_IFTYPE MIB_TCPCONNSTATE_LISTEN;
MACRO_MIB_IFTYPE MIB_TCPCONNSTATE_SYNRECEIVED;
MACRO_MIB_IFTYPE MIB_TCPCONNSTATE_SYNSENT;
MACRO_MIB_IFTYPE MIB_TCPCONNSTATE_TIMEWAIT;
MACRO_MIB_IFTYPE MIB_TCPRTOALG_CONSTANT;
MACRO_MIB_IFTYPE MIB_TCPRTOALG_OTHER;
MACRO_MIB_IFTYPE MIB_TCPRTOALG_RSRE;
MACRO_MIB_IFTYPE MIB_TCPRTOALG_VANJ;
MACRO_MIB_REGISTERED MIB_UNREGISTERED_OK;
MACRO_MIB_REGISTERED MIB_UNREGISTRATION_FAILED;
MACRO_MIG MIG_ARRAY_TOO_LARGE;
MACRO_MIG MIG_BAD_ARGUMENTS;
MACRO_MIG MIG_BAD_ID;
MACRO_MIG MIG_EXCEPTION;
MACRO_MIG MIG_NO_REPLY;
MACRO_MIG MIG_REMOTE_ERROR;
MACRO_MIG MIG_REPLY_MISMATCH;
MACRO_MIG MIG_ROUTINE_ARG_DESCRIPTOR_NULL;
MACRO_MIG MIG_ROUTINE_DESCRIPTOR_NULL;
MACRO_MIG MIG_SERVER_DIED;
MACRO_MIG MIG_SUBSYSTEM_NULL;
MACRO_MIG MIG_TRAILER_ERROR;
MACRO_MIG MIG_TYPE_ERROR;
$E61B72B2528436688BBD75516B993DD2 MIME_MAGIC_AND;
$E61B72B2528436688BBD75516B993DD2 MIME_MAGIC_ASCII;
$E61B72B2528436688BBD75516B993DD2 MIME_MAGIC_CHAR;
$E61B72B2528436688BBD75516B993DD2 MIME_MAGIC_CONTAINS;
$E61B72B2528436688BBD75516B993DD2 MIME_MAGIC_INT;
$E61B72B2528436688BBD75516B993DD2 MIME_MAGIC_ISTRING;
$E61B72B2528436688BBD75516B993DD2 MIME_MAGIC_LOCALE;
$E61B72B2528436688BBD75516B993DD2 MIME_MAGIC_MATCH;
$E61B72B2528436688BBD75516B993DD2 MIME_MAGIC_NOP;
$E61B72B2528436688BBD75516B993DD2 MIME_MAGIC_OR;
$E61B72B2528436688BBD75516B993DD2 MIME_MAGIC_PRINTABLE;
$E61B72B2528436688BBD75516B993DD2 MIME_MAGIC_SHORT;
$E61B72B2528436688BBD75516B993DD2 MIME_MAGIC_STRING;
MACRO_MIME MIME_MAX_BUFFER;
MACRO_MIME MIME_MAX_FILTER;
MACRO_MIME MIME_MAX_SUPER;
MACRO_MIME MIME_MAX_TYPE;
MACRO_MINARCS MINARCS;
MACRO_MINBUCKET MINBUCKET;
MACRO_MINCORE MINCORE_INCORE;
MACRO_MINCORE MINCORE_MODIFIED;
MACRO_MINCORE MINCORE_MODIFIED_OTHER;
MACRO_MINCORE MINCORE_REFERENCED;
MACRO_MINCORE MINCORE_REFERENCED_OTHER;
MACRO_MINSIGSTKSZ MINSIGSTKSZ;
MACRO_MINSPERHOUR MINSPERHOUR;
MACRO_MINS MINS_PER_HOUR;
MACRO_MAX_AUDIT_RECORD MIN_AUDIT_FILE_SIZE;
MACRO_COMMAND MIN_FORM_COMMAND;
MACRO_MENU_COMMAND MIN_MENU_COMMAND;
MACRO_LEN MIN_OID_LEN;
MACRO_WAITTIME MIN_WAITTIME;
MACRO_MLD6 MLD6_LISTENER_DONE;
MACRO_MLD6 MLD6_LISTENER_QUERY;
MACRO_MLD6 MLD6_LISTENER_REPORT;
MACRO_MLD6_MTRACE MLD6_MTRACE;
MACRO_MLD6_MTRACE MLD6_MTRACE_RESP;
MACRO_MLDV2 MLDV2_LISTENER_REPORT;
MACRO_MLD MLD_LISTENER_DONE;
MACRO_MLD MLD_LISTENER_QUERY;
MACRO_MLD MLD_LISTENER_REDUCTION;
MACRO_MLD MLD_LISTENER_REPORT;
MACRO_MLD_MTRACE MLD_MTRACE;
MACRO_MLD_MTRACE MLD_MTRACE_RESP;
MACRO_MM MM_APPL;
MACRO_MM MM_CONSOLE;
MACRO_MM MM_ERROR;
MACRO_MM MM_FIRM;
MACRO_MM MM_HALT;
MACRO_MM MM_HARD;
MACRO_MM MM_INFO;
MACRO_MM MM_NOCON;
MACRO_MM MM_NOMSG;
MACRO_MM MM_NOSEV;
MACRO_MM MM_NOTOK;
MACRO_MM MM_NRECOV;
MACRO_MM MM_NULLACT;
MACRO_MM MM_NULLLBL;
MACRO_MM MM_NULLMC;
MACRO_MM MM_NULLSEV;
MACRO_MM MM_NULLTAG;
MACRO_MM MM_NULLTXT;
MACRO_MM MM_OK;
MACRO_MM MM_OPSYS;
MACRO_MM MM_PRINT;
MACRO_MM MM_RECOVER;
MACRO_MM MM_SOFT;
MACRO_MM MM_UTIL;
MACRO_MM MM_WARNING;
MACRO_MFSNAMELEN MNAMELEN;
MACRO_MNTNAMLEN MNTNAMLEN;
MACRO_MNTPATHLEN MNTPATHLEN;
MACRO_MNT MNT_ASYNC;
MACRO_MNT MNT_AUTOMOUNTED;
MACRO_MNT MNT_CMDFLAGS;
MACRO_MNT MNT_CPROTECT;
MACRO_MNT MNT_DEFWRITE;
MACRO_MNT MNT_DONTBROWSE;
MACRO_MNT MNT_DOVOLFS;
MACRO_MNT_WAIT MNT_DWAIT;
MACRO_MNT MNT_EXPORTED;
MACRO_MNT MNT_FORCE;
MACRO_MNT MNT_IGNORE_OWNERSHIP;
MACRO_MNT MNT_JOURNALED;
MACRO_MNT MNT_LOCAL;
MACRO_MNT MNT_MULTILABEL;
MACRO_MNT MNT_NOATIME;
MACRO_MNT MNT_NODEV;
MACRO_MNT MNT_NOEXEC;
MACRO_MNT MNT_NOSUID;
MACRO_MNT MNT_NOUSERXATTR;
MACRO_MNT_WAIT MNT_NOWAIT;
MACRO_MNT MNT_QUARANTINE;
MACRO_MNT MNT_QUOTA;
MACRO_MNT MNT_RDONLY;
MACRO_MNT MNT_RELOAD;
MACRO_MNT MNT_ROOTFS;
MACRO_MNT MNT_SYNCHRONOUS;
MACRO_MNT MNT_UNION;
MACRO_MNT MNT_UNKNOWNPERMISSIONS;
MACRO_MNT MNT_UPDATE;
MACRO_MNT MNT_VISFLAGMASK;
MACRO_MNT_WAIT MNT_WAIT;
MACRO_MODE_EDIT MODE_ACK;
MACRO_MODE MODE_B;
MACRO_MODE_GET MODE_BSTEP_CHECK_CONSISTENCY;
MACRO_MODE_GET MODE_BSTEP_CHECK_VALUE;
MACRO_MODE_GET MODE_BSTEP_COMMIT;
MACRO_MODE_GET MODE_BSTEP_IRREVERSIBLE_COMMIT;
MACRO_MODE_GET MODE_BSTEP_OBJECT_LOOKUP;
MACRO_MODE_GET MODE_BSTEP_POST_REQUEST;
MACRO_MODE_GET MODE_BSTEP_PRE_REQUEST;
MACRO_MODE_GET MODE_BSTEP_ROW_CREATE;
MACRO_MODE_GET MODE_BSTEP_SET_VALUE;
MACRO_MODE_GET MODE_BSTEP_UNDO_CLEANUP;
MACRO_MODE_GET MODE_BSTEP_UNDO_COMMIT;
MACRO_MODE_GET MODE_BSTEP_UNDO_SET;
MACRO_MODE_GET MODE_BSTEP_UNDO_SETUP;
MACRO_MODE MODE_C;
MACRO_MODE_EDIT MODE_ECHO;
MACRO_MODE_EDIT MODE_EDIT;
MACRO_MODE_EDIT MODE_FLOW;
MACRO_MODE_EDIT MODE_FORCE;
MACRO_MODE_GET MODE_GET;
MACRO_MODE_GET MODE_GETBULK;
MACRO_MODE_GET MODE_GETNEXT;
MACRO_MODE_GET MODE_GET_STASH;
MACRO_MODE_EDIT MODE_INBIN;
MACRO_MODE_EDIT MODE_LIT_ECHO;
MACRO_MODE_EDIT MODE_MASK;
MACRO_MODE_EDIT MODE_OUTBIN;
MACRO_MODE MODE_S;
MACRO_MODE_GET MODE_SET_ACTION;
MACRO_MODE_GET MODE_SET_BEGIN;
MACRO_MODE_GET MODE_SET_COMMIT;
MACRO_MODE_GET MODE_SET_FREE;
MACRO_MODE_GET MODE_SET_RESERVE1;
MACRO_MODE_GET MODE_SET_RESERVE2;
MACRO_MODE_GET MODE_SET_UNDO;
MACRO_MODE_EDIT MODE_SOFT_TAB;
MACRO_MODE_EDIT MODE_TRAPSIG;
MACRO_MONSPERYEAR MONSPERYEAR;
MACRO_MONS MONS_PER_YEAR;
MACRO_MON MON_1;
MACRO_MON MON_10;
MACRO_MON MON_11;
MACRO_MON MON_12;
MACRO_MON MON_2;
MACRO_MON MON_3;
MACRO_MON MON_4;
MACRO_MON MON_5;
MACRO_MON MON_6;
MACRO_MON MON_7;
MACRO_MON MON_8;
MACRO_MON MON_9;
MACRO_MOUNTPROC MOUNTPROC_DUMP;
MACRO_MOUNTPROC MOUNTPROC_EXPORT;
MACRO_MOUNTPROC MOUNTPROC_EXPORTALL;
MACRO_MOUNTPROC MOUNTPROC_MNT;
MACRO_MOUNTPROC MOUNTPROC_NULL;
MACRO_MOUNTPROC MOUNTPROC_UMNT;
MACRO_MOUNTPROC MOUNTPROC_UMNTALL;
MACRO_MOUNTPROG MOUNTPROG;
MACRO_MOUNTVERS MOUNTVERS;
MACRO_MPC MPC_LOADTIME_BASE_POLICY;
MACRO_MPC MPC_LOADTIME_FLAG_LABELMBUFS;
MACRO_MPC MPC_LOADTIME_FLAG_NOTLATE;
MACRO_MPC MPC_LOADTIME_FLAG_UNLOADOK;
MACRO_MPC MPC_RUNTIME_FLAG_REGISTERED;
MACRO_MPOOL MPOOL_DIRTY;
MACRO_MPOOL MPOOL_PINNED;
MACRO_MRT MRT_ADD_MFC;
MACRO_MRT MRT_ADD_VIF;
MACRO_MRT MRT_ASSERT;
MACRO_MRT MRT_DEL_MFC;
MACRO_MRT MRT_DEL_VIF;
MACRO_MRT MRT_DONE;
MACRO_MRT MRT_INIT;
MACRO_MRT MRT_VERSION;
MACRO_MSEC MSEC_DIRBIT;
MACRO_MSEC MSEC_VAL_MASK;
reply_stat MSG_ACCEPTED;
MACRO_MSG_OOB MSG_CTRUNC;
reply_stat MSG_DENIED;
MACRO_MSG_OOB MSG_DONTROUTE;
MACRO_MSG_OOB MSG_DONTWAIT;
MACRO_MSG_OOB MSG_EOF;
MACRO_MSG_OOB MSG_EOR;
MACRO_MSG_OOB MSG_FLUSH;
MACRO_MSG_OOB MSG_HAVEMORE;
MACRO_MSG_OOB MSG_HOLD;
MACRO_MSG_MAGIC MSG_MAGIC;
MACRO_MSG_OOB MSG_NEEDSA;
MACRO_MSG MSG_NOERROR;
MACRO_MSG_OOB MSG_OOB;
MACRO_MSG_OOB MSG_PEEK;
MACRO_MSG_OOB MSG_RCVMORE;
MACRO_MSG_OOB MSG_SEND;
MACRO_MSG_OOB MSG_TRUNC;
MACRO_MSG_OOB MSG_WAITALL;
MACRO_MSG_OOB MSG_WAITSTREAM;
MACRO_CLSIZELOG2 MSIZE;
MACRO_CLSIZELOG2 MSIZESHIFT;
MACRO_MS MS_ASYNC;
MACRO_MS MS_DEACTIVATE;
MACRO_MS MS_INVALIDATE;
MACRO_MS MS_KILLPAGES;
MACRO_MS MS_SYNC;
MACRO_MT_LIBRARY MT_APPLICATION_ID;
MACRO_MT MT_ATABLE;
MACRO_MT MT_CONTROL;
MACRO_MT MT_DATA;
MACRO_MT MT_FREE;
MACRO_MT MT_FTABLE;
MACRO_MT MT_HEADER;
MACRO_MT MT_HTABLE;
MACRO_MT MT_IFADDR;
MACRO_MT_LIBRARY MT_LIBRARY_ID;
MACRO_MT_LIBRARY MT_LIB_MAXIMUM;
MACRO_MT_LIBRARY MT_LIB_MESSAGEID;
MACRO_MT_LIBRARY MT_LIB_NONE;
MACRO_MT_LIBRARY MT_LIB_REQUESTID;
MACRO_MT_LIBRARY MT_LIB_SESSION;
MACRO_MT_LIBRARY MT_LIB_SESSIONID;
MACRO_MT_LIBRARY MT_LIB_TRANSID;
MACRO_MT MT_MAX;
MACRO_MT_LIBRARY MT_MAX_IDS;
MACRO_MT_LIBRARY MT_MAX_SUBIDS;
MACRO_MT MT_OOBDATA;
MACRO_MT MT_PCB;
MACRO_MT MT_RIGHTS;
MACRO_MT MT_RTABLE;
MACRO_MT MT_SOCKET;
MACRO_MT MT_SONAME;
MACRO_MT MT_SOOPTS;
MACRO_MT MT_TAG;
MACRO_MT_LIBRARY MT_TOKEN_ID;
MACRO_CANCEL NAMES;
MACRO_NAMESERVER NAMESERVER_PORT;
MACRO_TERMIOS NAMESIZE;
MACRO_NAME NAME_MAX;
MACRO_NOT_CHECKED_IN NAME_NOT_CHECKED_IN;
MACRO_NAME_NOT NAME_NOT_YOURS;
MACRO_SLOT NAME_SERVER_SLOT;
MACRO_NAME_SIZE NAME_SIZE;
MACRO_NBBY NBBY;
MACRO_NBPG NBPG;
MACRO_MAXUPRC NCARGS;
MACRO_NCCS NCCS;
MACRO_NCURSES_EXT NCURSES_ATTR_SHIFT;
MACRO_NCURSES_BUTTON NCURSES_BUTTON_CLICKED;
MACRO_NCURSES_BUTTON NCURSES_BUTTON_PRESSED;
MACRO_NCURSES_BUTTON NCURSES_BUTTON_RELEASED;
MACRO_NCURSES NCURSES_DLL_H_incl;
MACRO_NCURSES_BUTTON NCURSES_DOUBLE_CLICKED;
MACRO_NCURSES NCURSES_ENABLE_STDBOOL_H;
MACRO_NCURSES_ETI NCURSES_ETI_H_incl;
MACRO_NCURSES_EXT NCURSES_EXT_FUNCS;
MACRO_NCURSES NCURSES_MOUSE_VERSION;
MACRO_NCURSES NCURSES_OPAQUE;
MACRO_NCURSES_PANEL NCURSES_PANEL_H_incl;
MACRO_NCURSES_BUTTON NCURSES_RESERVED_EVENT;
MACRO_NCURSES_TERMCAP NCURSES_TERMCAP_H_incl;
MACRO_NCURSES_TERM_ENTRY NCURSES_TERM_ENTRY_H_incl;
MACRO_NCURSES_TERM NCURSES_TERM_H_incl;
MACRO_NCURSES NCURSES_TPARM_VARARGS;
MACRO_NCURSES_BUTTON NCURSES_TRIPLE_CLICKED;
MACRO_NCURSES NCURSES_UNCTRL_H_incl;
MACRO_NCURSES NCURSES_VERSION_MAJOR;
MACRO_NCURSES NCURSES_VERSION_MINOR;
MACRO_NCURSES NCURSES_VERSION_PATCH;
MACRO_NCURSES_TERM NCURSES_XNAMES;
MACRO_NDEXTENT NDEXTENT;
MACRO_NDFILE NDFILE;
MACRO_NDRVPROTO NDRVPROTO_NDRV;
MACRO_NDRV_DELDMXSPEC NDRV_ADDMULTICAST;
MACRO_NDRV_DELDMXSPEC NDRV_DELDMXSPEC;
MACRO_NDRV_DELDMXSPEC NDRV_DELMULTICAST;
MACRO_NDRV NDRV_DEMUXTYPE_ETHERTYPE;
MACRO_NDRV NDRV_DEMUXTYPE_SAP;
MACRO_NDRV NDRV_DEMUXTYPE_SNAP;
MACRO_NDRV_PROTOCOL NDRV_PROTOCOL_DESC_VERS;
MACRO_NDRV_DELDMXSPEC NDRV_SETDMXSPEC;
MACRO_NDR NDR_CHAR_ASCII;
MACRO_NDR NDR_CHAR_EBCDIC;
MACRO_NDR NDR_FLOAT_CRAY;
MACRO_NDR NDR_FLOAT_IBM;
MACRO_NDR NDR_FLOAT_IEEE;
MACRO_NDR NDR_FLOAT_VAX;
MACRO_NDR NDR_INT_BIG_ENDIAN;
MACRO_NDR NDR_INT_LITTLE_ENDIAN;
MACRO_NDR NDR_PROTOCOL_2_0;
MACRO_ND_REDIRECT ND_NA_FLAG_OVERRIDE;
MACRO_ND_REDIRECT ND_NA_FLAG_ROUTER;
MACRO_ND_REDIRECT ND_NA_FLAG_SOLICITED;
MACRO_ND ND_NEIGHBOR_ADVERT;
MACRO_ND ND_NEIGHBOR_SOLICIT;
MACRO_ND_REDIRECT ND_OPT_MTU;
MACRO_ND_REDIRECT ND_OPT_PI_FLAG_AUTO;
MACRO_ND_REDIRECT ND_OPT_PI_FLAG_ONLINK;
MACRO_ND_REDIRECT ND_OPT_PREFIX_INFORMATION;
MACRO_ND_REDIRECT ND_OPT_RDNSS;
MACRO_ND_REDIRECT ND_OPT_REDIRECTED_HEADER;
MACRO_ND_REDIRECT ND_OPT_ROUTE_INFO;
MACRO_ND_REDIRECT ND_OPT_SOURCE_LINKADDR;
MACRO_ND_REDIRECT ND_OPT_TARGET_LINKADDR;
MACRO_ND_REDIRECT ND_RA_FLAG_HA;
MACRO_ND_REDIRECT ND_RA_FLAG_MANAGED;
MACRO_ND_REDIRECT ND_RA_FLAG_OTHER;
MACRO_ND_REDIRECT ND_RA_FLAG_RTPREF_HIGH;
MACRO_ND_REDIRECT ND_RA_FLAG_RTPREF_LOW;
MACRO_ND_REDIRECT ND_RA_FLAG_RTPREF_MASK;
MACRO_ND_REDIRECT ND_RA_FLAG_RTPREF_MEDIUM;
MACRO_ND_REDIRECT ND_RA_FLAG_RTPREF_RSV;
MACRO_ND ND_REDIRECT;
MACRO_ND_REDIRECT ND_REDIRECT_ONLINK;
MACRO_ND_REDIRECT ND_REDIRECT_ROUTER;
MACRO_ND ND_ROUTER_ADVERT;
MACRO_ND ND_ROUTER_SOLICIT;
MACRO_NETDB NETDB_INTERNAL;
MACRO_NETDB NETDB_SUCCESS;
MACRO_OTTYDISC NETLDISC;
MACRO_NETLINK NETLINK_GENERIC;
MACRO_NETNAME_NO NETNAME_HOST_NOT_FOUND;
MACRO_NETNAME_NO NETNAME_INVALID_PORT;
MACRO_NOT_CHECKED_IN NETNAME_NOT_CHECKED_IN;
MACRO_NETNAME NETNAME_NOT_YOURS;
MACRO_NETNAME_NO NETNAME_NO_SUCH_HOST;
MACRO_NETNAME NETNAME_PENDING;
MACRO_NETNAME NETNAME_SUCCESS;
MACRO_NETSNMP_DEFAULT NETSNMP_AGENTID;
MACRO_NETSNMP_DEFAULT NETSNMP_AGENT_DIRECTORY_MODE;
MACRO_NETSNMP_DEFAULT NETSNMP_AIXID;
MACRO_NETSNMP_DEFAULT NETSNMP_ALWAYS_DEBUG;
MACRO_NETSNMP_DEFAULT NETSNMP_BSDIID;
MACRO_NETSNMP_CACHE NETSNMP_CACHE_AUTO_RELOAD;
MACRO_NETSNMP_CACHE NETSNMP_CACHE_DONT_AUTO_RELEASE;
MACRO_NETSNMP_CACHE NETSNMP_CACHE_DONT_FREE_BEFORE_LOAD;
MACRO_NETSNMP_CACHE NETSNMP_CACHE_DONT_FREE_EXPIRED;
MACRO_NETSNMP_CACHE NETSNMP_CACHE_DONT_INVALIDATE_ON_SET;
MACRO_NETSNMP_CACHE NETSNMP_CACHE_HINT_HANDLER_ARGS;
MACRO_NETSNMP_CACHE NETSNMP_CACHE_PRELOAD;
MACRO_NETSNMP_CALLBACK NETSNMP_CALLBACK_DEFAULT_PRIORITY;
MACRO_NETSNMP_CALLBACK NETSNMP_CALLBACK_HIGHEST_PRIORITY;
MACRO_NETSNMP_CALLBACK NETSNMP_CALLBACK_LOWEST_PRIORITY;
MACRO_NETSNMP_CALLBACK_OP NETSNMP_CALLBACK_OP_CONNECT;
MACRO_NETSNMP_CALLBACK_OP NETSNMP_CALLBACK_OP_DISCONNECT;
MACRO_NETSNMP_CALLBACK_OP NETSNMP_CALLBACK_OP_RECEIVED_MESSAGE;
MACRO_NETSNMP_CALLBACK_OP NETSNMP_CALLBACK_OP_SEND_FAILED;
MACRO_NETSNMP_CALLBACK_OP NETSNMP_CALLBACK_OP_TIMED_OUT;
MACRO_NETSNMP NETSNMP_CAN_DO_CRYPTO;
MACRO_NETSNMP_NO NETSNMP_CAN_GET_DISK_LABEL;
MACRO_NETSNMP NETSNMP_CAN_USE_SYSCTL;
MACRO_NETSNMP_DEFAULT NETSNMP_DEFAULT_ASNENCODING_DIRECTION;
MACRO_NETSNMP_DEFAULT NETSNMP_DEFAULT_SNMP_VERSION;
MACRO_NETSNMP_DEFAULT NETSNMP_DEFDISKMINIMUMSPACE;
MACRO_NETSNMP_DEFAULT NETSNMP_DISKMIBNUM;
MACRO_NETSNMP_CALLBACK NETSNMP_DONTWAIT;
MACRO_NETSNMP_DEFAULT NETSNMP_DOT_MIB_LENGTH;
MACRO_NETSNMP_DS_AGENT NETSNMP_DS_AGENT_AGENTX_MASTER;
MACRO_NETSNMP_DS_AGENT NETSNMP_DS_AGENT_AGENTX_PING_INTERVAL;
MACRO_NETSNMP_DS_AGENT NETSNMP_DS_AGENT_AGENTX_RETRIES;
MACRO_NETSNMP_DS_AGENT NETSNMP_DS_AGENT_AGENTX_TIMEOUT;
MACRO_NETSNMP_DS_AGENT NETSNMP_DS_AGENT_CACHE_TIMEOUT;
MACRO_NETSNMP_DS_AGENT NETSNMP_DS_AGENT_DISABLE_PERL;
MACRO_NETSNMP_DS_AGENT NETSNMP_DS_AGENT_DONT_LOG_TCPWRAPPERS_CONNECTS;
MACRO_NETSNMP_DS_AGENT NETSNMP_DS_AGENT_DONT_RETAIN_NOTIFICATIONS;
MACRO_NETSNMP_DS_AGENT NETSNMP_DS_AGENT_FLAGS;
MACRO_NETSNMP_DS_AGENT NETSNMP_DS_AGENT_GROUPID;
MACRO_NETSNMP_DS_AGENT NETSNMP_DS_AGENT_INTERNAL_SECLEVEL;
MACRO_NETSNMP_DS_AGENT NETSNMP_DS_AGENT_INTERNAL_SECNAME;
MACRO_NETSNMP_DS_AGENT NETSNMP_DS_AGENT_INTERNAL_VERSION;
MACRO_NETSNMP_DS_AGENT NETSNMP_DS_AGENT_LEAVE_PIDFILE;
MACRO_NETSNMP_DS_AGENT NETSNMP_DS_AGENT_MAX_GETBULKREPEATS;
MACRO_NETSNMP_DS_AGENT NETSNMP_DS_AGENT_MAX_GETBULKRESPONSES;
MACRO_NETSNMP_DS_AGENT NETSNMP_DS_AGENT_NO_CACHING;
MACRO_NETSNMP_DS_AGENT NETSNMP_DS_AGENT_NO_CONNECTION_WARNINGS;
MACRO_NETSNMP_DS_AGENT NETSNMP_DS_AGENT_NO_ROOT_ACCESS;
MACRO_NETSNMP_DS_AGENT NETSNMP_DS_AGENT_PERL_INIT_FILE;
MACRO_NETSNMP_DS_AGENT NETSNMP_DS_AGENT_PORTS;
MACRO_NETSNMP_DS_AGENT NETSNMP_DS_AGENT_PROGNAME;
MACRO_NETSNMP_DS_AGENT NETSNMP_DS_AGENT_QUIT_IMMEDIATELY;
MACRO_NETSNMP_DS_AGENT NETSNMP_DS_AGENT_ROLE;
MACRO_NETSNMP_DS_AGENT NETSNMP_DS_AGENT_SKIPNFSINHOSTRESOURCES;
MACRO_NETSNMP_DS_AGENT NETSNMP_DS_AGENT_STRICT_DISMAN;
MACRO_NETSNMP_DS_AGENT NETSNMP_DS_AGENT_TRAP_ADDR;
MACRO_NETSNMP_DS_AGENT NETSNMP_DS_AGENT_USERID;
MACRO_NETSNMP_DS_AGENT NETSNMP_DS_AGENT_VERBOSE;
MACRO_NETSNMP_DS_AGENT NETSNMP_DS_AGENT_X_DIR_PERM;
MACRO_NETSNMP_DS_AGENT NETSNMP_DS_AGENT_X_SOCKET;
MACRO_NETSNMP_DS_AGENT NETSNMP_DS_AGENT_X_SOCK_GROUP;
MACRO_NETSNMP_DS_AGENT NETSNMP_DS_AGENT_X_SOCK_PERM;
MACRO_NETSNMP_DS_AGENT NETSNMP_DS_AGENT_X_SOCK_USER;
MACRO_NETSNMP_DS NETSNMP_DS_APPLICATION_ID;
MACRO_NETSNMP_DS_AGENT NETSNMP_DS_APP_DONT_LOG;
MACRO_NETSNMP_DS NETSNMP_DS_LIBRARY_ID;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_16BIT_IDS;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_2DIGIT_HEX_OUTPUT;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_ALARM_DONT_USE_SIG;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_APPEND_LOGFILES;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_APPTYPE;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_APPTYPES;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_AUTHLOCALIZEDKEY;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_AUTHMASTERKEY;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_AUTHPASSPHRASE;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_CERT_EXTRA_SUBDIR;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_CLIENTRECVBUF;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_CLIENTSENDBUF;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_CLIENT_ADDR;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_COMMUNITY;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_CONFIGURATION_DIR;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_CONTEXT;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_DEFAULT_PORT;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_DISABLE_CONFIG_LOAD;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_DISABLE_PERSISTENT_LOAD;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_DISABLE_PERSISTENT_SAVE;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_DONT_BREAKDOWN_OIDS;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_DONT_CHECK_RANGE;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_DONT_LOAD_HOST_FILES;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_DONT_PERSIST_STATE;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_DONT_PRINT_UNITS;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_DONT_READ_CONFIGS;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_DUMP_PACKET;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_ESCAPE_QUOTES;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_EXTENDED_INDEX;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_HAVE_READ_CONFIG;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_HAVE_READ_PREMIB_CONFIG;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_HEX_OUTPUT_LENGTH;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_HOSTNAME;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_IGNORE_NO_COMMUNITY;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_KSM_KEYTAB;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_KSM_SERVICE_NAME;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_LOG_TIMESTAMP;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_MIBDIRS;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_MIB_COMMENT_TERM;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_MIB_ERRORS;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_MIB_PARSE_LABEL;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_MIB_REPLACE;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_MIB_WARNINGS;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_NO_DISCOVERY;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_NO_DISPLAY_HINT;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_NO_TOKEN_WARNINGS;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_NUMERIC_TIMETICKS;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_OIDPREFIX;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_OIDSUFFIX;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_OID_OUTPUT_FORMAT;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_OPTIONALCONFIG;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_PASSPHRASE;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_PERSISTENT_DIR;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_PRINT_BARE_VALUE;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_PRINT_FULL_OID;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_PRINT_HEX_TEXT;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_PRINT_NUMERIC_ENUM;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_PRINT_NUMERIC_OIDS;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_PRINT_SUFFIX_ONLY;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_PRINT_UCD_STYLE_OID;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_PRIVLOCALIZEDKEY;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_PRIVMASTERKEY;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_PRIVPASSPHRASE;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_QUICKE_PRINT;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_QUICK_PRINT;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_RANDOM_ACCESS;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_READ_UCD_STYLE_OID;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_REGEX_ACCESS;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_REVERSE_ENCODE;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_SAVE_MIB_DESCRS;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_SECLEVEL;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_SECMODEL;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_SECNAME;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_SERVERRECVBUF;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_SERVERSENDBUF;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_SNMPVERSION;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_SSHTOSNMP_SOCKET;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_STRING_OUTPUT_FORMAT;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_TEMP_FILE_PATTERN;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_TLS_ALGORITMS;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_TSM_USE_PREFIX;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_X509_CLIENT_PUB;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_X509_CRL_FILE;
MACRO_NETSNMP_DS NETSNMP_DS_LIB_X509_SERVER_PUB;
MACRO_NETSNMP_DS NETSNMP_DS_MAX_IDS;
MACRO_NETSNMP_DS NETSNMP_DS_MAX_SUBIDS;
MACRO_NETSNMP_DS_AGENT NETSNMP_DS_NOTIF_LOG_CTX;
MACRO_NETSNMP_DS_AGENT NETSNMP_DS_SMUX_SOCKET;
MACRO_NETSNMP_DS NETSNMP_DS_SNMP_VERSION_1;
MACRO_NETSNMP_DS NETSNMP_DS_SNMP_VERSION_2c;
MACRO_NETSNMP_DS NETSNMP_DS_SNMP_VERSION_3;
MACRO_NETSNMP_DS NETSNMP_DS_SSHDOMAIN_DIR_PERM;
MACRO_NETSNMP_DS NETSNMP_DS_SSHDOMAIN_SOCK_GROUP;
MACRO_NETSNMP_DS NETSNMP_DS_SSHDOMAIN_SOCK_PERM;
MACRO_NETSNMP_DS NETSNMP_DS_SSHDOMAIN_SOCK_USER;
MACRO_NETSNMP_DS NETSNMP_DS_TOKEN_ID;
MACRO_NETSNMP_DEFAULT NETSNMP_ENABLE_INLINE;
MACRO_NETSNMP NETSNMP_ENABLE_IPV6;
MACRO_NETSNMP NETSNMP_ENABLE_SCAPI_AUTHPRIV;
MACRO_NETSNMP_DEFAULT NETSNMP_ENTERPRISE_DOT_MIB_LENGTH;
MACRO_NETSNMP_DEFAULT NETSNMP_ENTERPRISE_OID;
MACRO_NETSNMP_DEFAULT NETSNMP_ERRORMIBNUM;
MACRO_NETSNMP_DEFAULT NETSNMP_ERRORTIMELENGTH;
MACRO_NETSNMP_DEFAULT NETSNMP_EXCACHETIME;
MACRO_NETSNMP_FILE NETSNMP_FILE_AUTO_OPEN;
MACRO_NETSNMP_FILE NETSNMP_FILE_NO_AUTOCLOSE;
MACRO_NETSNMP_FILE NETSNMP_FILE_STATS;
MACRO_NETSNMP_DEFAULT NETSNMP_FREEBSDID;
MACRO_NETSNMP_DEFAULT NETSNMP_HPUX10ID;
MACRO_NETSNMP_DEFAULT NETSNMP_HPUX11ID;
MACRO_NETSNMP_DEFAULT NETSNMP_HPUX9ID;
MACRO_NETSNMP_DEFAULT NETSNMP_IRIXID;
MACRO_NETSNMP_ITERATOR NETSNMP_ITERATOR_FLAG_SORTED;
MACRO_NETSNMP_SEC NETSNMP_KSM_SECURITY_MODEL;
MACRO_NETSNMP_DEFAULT NETSNMP_LASTFIELD;
MACRO_NETSNMP_DEFAULT NETSNMP_LINUXID;
MACRO_NETSNMP_DEFAULT NETSNMP_LOADAVEMIBNUM;
MACRO_NETSNMP_LOGHANDLER NETSNMP_LOGHANDLER_CALLBACK;
MACRO_NETSNMP_LOGHANDLER NETSNMP_LOGHANDLER_FILE;
MACRO_NETSNMP_LOGHANDLER NETSNMP_LOGHANDLER_NONE;
MACRO_NETSNMP_LOGHANDLER NETSNMP_LOGHANDLER_STDERR;
MACRO_NETSNMP_LOGHANDLER NETSNMP_LOGHANDLER_STDOUT;
MACRO_NETSNMP_LOGHANDLER NETSNMP_LOGHANDLER_SYSLOG;
MACRO_NETSNMP_DEFAULT NETSNMP_MACOSXID;
MACRO_NETSNMP_DEFAULT NETSNMP_MAXCACHESIZE;
MACRO_NETSNMP_DEFAULT NETSNMP_MAXREADCOUNT;
MACRO_NETSNMP_DEFAULT NETSNMP_MAX_PERSISTENT_BACKUPS;
MACRO_NETSNMP_DEFAULT NETSNMP_MEMMIBNUM;
MACRO_NETSNMP_CACHE NETSNMP_MODE_END_ALL_MODES;
MACRO_NETSNMP_DEFAULT NETSNMP_NETBSD1ID;
MACRO_NETSNMP_DEFAULT NETSNMP_NOTIFICATION_DOT_MIB_LENGTH;
MACRO_NETSNMP NETSNMP_NO_DUMMY_VALUES;
MACRO_NETSNMP NETSNMP_NO_KMEM_USAGE;
MACRO_NETSNMP_NO NETSNMP_NO_LEGACY_DEFINITIONS;
MACRO_NETSNMP_DEFAULT NETSNMP_NUM_COMMUNITIES;
MACRO_NETSNMP_DEFAULT NETSNMP_OID;
MACRO_NETSNMP_STRING NETSNMP_OID_OUTPUT_FULL;
MACRO_NETSNMP_STRING NETSNMP_OID_OUTPUT_MODULE;
MACRO_NETSNMP_STRING NETSNMP_OID_OUTPUT_NONE;
MACRO_NETSNMP_STRING NETSNMP_OID_OUTPUT_NUMERIC;
MACRO_NETSNMP_STRING NETSNMP_OID_OUTPUT_SUFFIX;
MACRO_NETSNMP_STRING NETSNMP_OID_OUTPUT_UCD;
MACRO_NETSNMP_OLDAPI NETSNMP_OLDAPI_NOACCESS;
MACRO_NETSNMP_OLDAPI NETSNMP_OLDAPI_RONLY;
MACRO_NETSNMP_OLDAPI NETSNMP_OLDAPI_RWRITE;
MACRO_NETSNMP_DEFAULT NETSNMP_OPENBSDID;
MACRO_NETSNMP_DEFAULT NETSNMP_OSFID;
MACRO_NETSNMP_DEFAULT NETSNMP_OSTYPE;
MACRO_NETSNMP_PARSE NETSNMP_PARSE_ARGS_ERROR;
MACRO_NETSNMP_PARSE NETSNMP_PARSE_ARGS_ERROR_USAGE;
MACRO_NETSNMP_PARSE NETSNMP_PARSE_ARGS_NOLOGGING;
MACRO_NETSNMP_PARSE NETSNMP_PARSE_ARGS_NOZERO;
MACRO_NETSNMP_PARSE NETSNMP_PARSE_ARGS_SUCCESS;
MACRO_NETSNMP_PARSE NETSNMP_PARSE_ARGS_SUCCESS_EXIT;
MACRO_NETSNMP NETSNMP_PERSISTENT_MASK;
MACRO_NETSNMP_DEFAULT NETSNMP_PROCMIBNUM;
MACRO_NETSNMP_DEFAULT NETSNMP_RESTARTSLEEP;
MACRO_NETSNMP_DEFAULT NETSNMP_SECMOD_USM;
MACRO_NETSNMP_SEC NETSNMP_SEC_MODEL_KSM;
MACRO_NETSNMP_LOGHANDLER NETSNMP_SELECT_NOALARMS;
MACRO_NETSNMP_LOGHANDLER NETSNMP_SELECT_NOFLAGS;
MACRO_NETSNMP_DEFAULT NETSNMP_SHELLMIBNUM;
MACRO_NETSNMP_DEFAULT NETSNMP_SNMPBLOCK;
MACRO_NETSNMP_DEFAULT NETSNMP_SNMPV1;
MACRO_NETSNMP_DEFAULT NETSNMP_SNMPV2ANY;
MACRO_NETSNMP_DEFAULT NETSNMP_SNMPV2AUTH;
MACRO_NETSNMP_DEFAULT NETSNMP_SOLARISID;
MACRO_STATS NETSNMP_STAT_MAX_STATS;
MACRO_NETSNMP_CALLBACK NETSNMP_STREAM_QUEUE_LEN;
MACRO_NETSNMP_STRING NETSNMP_STRING_OUTPUT_ASCII;
MACRO_NETSNMP_STRING NETSNMP_STRING_OUTPUT_GUESS;
MACRO_NETSNMP_STRING NETSNMP_STRING_OUTPUT_HEX;
MACRO_NETSNMP_DEFAULT NETSNMP_SUNOS4ID;
MACRO_NETSNMP_DEFAULT NETSNMP_SYSTEM_DOT_MIB_LENGTH;
MACRO_NETSNMP_CALLBACK NETSNMP_TM_MAX_SECNAME;
MACRO_NETSNMP_DEFAULT NETSNMP_TRANSPORT_ALIAS_DOMAIN;
MACRO_NETSNMP_DEFAULT NETSNMP_TRANSPORT_CALLBACK_DOMAIN;
MACRO_NETSNMP_CALLBACK NETSNMP_TRANSPORT_FLAG_EMPTY_PKT;
MACRO_NETSNMP_CALLBACK NETSNMP_TRANSPORT_FLAG_HOSTNAME;
MACRO_NETSNMP_CALLBACK NETSNMP_TRANSPORT_FLAG_LISTEN;
MACRO_NETSNMP_CALLBACK NETSNMP_TRANSPORT_FLAG_OPENED;
MACRO_NETSNMP_CALLBACK NETSNMP_TRANSPORT_FLAG_STREAM;
MACRO_NETSNMP_CALLBACK NETSNMP_TRANSPORT_FLAG_TMSTATE;
MACRO_NETSNMP_CALLBACK NETSNMP_TRANSPORT_FLAG_TUNNELED;
MACRO_NETSNMP_DEFAULT NETSNMP_TRANSPORT_IPV4BASE_DOMAIN;
MACRO_NETSNMP_DEFAULT NETSNMP_TRANSPORT_TCPIPV6_DOMAIN;
MACRO_NETSNMP_DEFAULT NETSNMP_TRANSPORT_TCP_DOMAIN;
MACRO_NETSNMP_DEFAULT NETSNMP_TRANSPORT_UDPIPV6_DOMAIN;
MACRO_NETSNMP_DEFAULT NETSNMP_TRANSPORT_UDP_DOMAIN;
MACRO_NETSNMP_DEFAULT NETSNMP_TRANSPORT_UNIX_DOMAIN;
MACRO_NETSNMP_SEC NETSNMP_TSM_SECURITY_MODEL;
MACRO_NETSNMP_DEFAULT NETSNMP_UCDAVIS_DOT_MIB_LENGTH;
MACRO_NETSNMP_DEFAULT NETSNMP_UCDAVIS_OID;
MACRO_NETSNMP_DEFAULT NETSNMP_ULTRIXID;
MACRO_NETSNMP_DEFAULT NETSNMP_UNKNOWNID;
MACRO_NETSNMP_USE_INLINE NETSNMP_USE_INLINE;
MACRO_NETSNMP_USE NETSNMP_USE_OPENSSL;
MACRO_NETSNMP_DEFAULT NETSNMP_USE_REVERSE_ASNENCODING;
MACRO_NETSNMP_DEFAULT NETSNMP_VERSIONMIBNUM;
MACRO_NETSNMP_WATCHER NETSNMP_WATCHER_DIRECT;
MACRO_NETSNMP_DEFAULT NETSNMP_WIN32ID;
MACRO_NETSNMP NETSNMP_WITH_OPAQUE_SPECIAL_TYPES;
MACRO_NET NET_MAXID;
MACRO_NET NET_RT_DUMP;
MACRO_NET NET_RT_DUMP2;
MACRO_NET NET_RT_FLAGS;
MACRO_NET NET_RT_IFLIST;
MACRO_NET NET_RT_IFLIST2;
MACRO_NET NET_RT_MAXID;
MACRO_NET NET_RT_STAT;
MACRO_NET NET_RT_TRASH;
MACRO_NEWLINE NEWLINE;
MACRO_NEW NEW_ENV_VALUE;
MACRO_NEW NEW_ENV_VAR;
MACRO_BOOT NEW_TIME;
$696096D9A1236276F280ED3B7625D32B NFATTRDIR;
$696096D9A1236276F280ED3B7625D32B NFBLK;
$696096D9A1236276F280ED3B7625D32B NFCHR;
$696096D9A1236276F280ED3B7625D32B NFDIR;
$696096D9A1236276F280ED3B7625D32B NFFIFO;
MACRO_NFF NFF_AFTER;
MACRO_NFF NFF_BEFORE;
$696096D9A1236276F280ED3B7625D32B NFLNK;
$696096D9A1236276F280ED3B7625D32B NFNAMEDATTR;
$696096D9A1236276F280ED3B7625D32B NFNON;
$696096D9A1236276F280ED3B7625D32B NFREG;
MACRO_NFS4 NFS4_CALLBACK_PROG;
MACRO_NFS4 NFS4_CALLBACK_PROG_VERSION;
MACRO_NFS4_FHSIZE NFS4_FHSIZE;
MACRO_NFS4_FHSIZE NFS4_OPAQUE_LIMIT;
MACRO_NFS4_TIME NFS4_TIME_SET_TO_CLIENT;
MACRO_NFS4_TIME NFS4_TIME_SET_TO_SERVER;
MACRO_NFS4_FHSIZE NFS4_VERIFIER_SIZE;
MACRO_NFSCLNT NFSCLNT_LOCKDANS;
MACRO_NFSCLNT NFSCLNT_LOCKDNOTIFY;
MACRO_NFSERR NFSERR_ACCES;
MACRO_NFSERR NFSERR_ADMIN_REVOKED;
MACRO_NFSERR NFSERR_ATTRNOTSUPP;
MACRO_NFSERR NFSERR_AUTHERR;
MACRO_NFSERR NFSERR_BADCHAR;
MACRO_NFSERR NFSERR_BADHANDLE;
MACRO_NFSERR NFSERR_BADNAME;
MACRO_NFSERR NFSERR_BADOWNER;
MACRO_NFSERR NFSERR_BADTYPE;
MACRO_NFSERR NFSERR_BADXDR;
MACRO_NFSERR NFSERR_BAD_COOKIE;
MACRO_NFSERR NFSERR_BAD_RANGE;
MACRO_NFSERR NFSERR_BAD_SEQID;
MACRO_NFSERR NFSERR_BAD_STATEID;
MACRO_NFSERR NFSERR_CB_PATH_DOWN;
MACRO_NFSERR NFSERR_CLID_INUSE;
MACRO_NFSERR NFSERR_DEADLOCK;
MACRO_NFSERR NFSERR_DELAY;
MACRO_NFSERR NFSERR_DENIED;
MACRO_NFSERR NFSERR_DIRBUFDROPPED;
MACRO_NFSERR NFSERR_DQUOT;
MACRO_NFSERR NFSERR_EAUTH;
MACRO_NFSERR NFSERR_EXIST;
MACRO_NFSERR NFSERR_EXPIRED;
MACRO_NFSERR NFSERR_FBIG;
MACRO_NFSERR NFSERR_FHEXPIRED;
MACRO_NFSERR NFSERR_FILE_OPEN;
MACRO_NFSERR NFSERR_GRACE;
MACRO_NFSERR NFSERR_INVAL;
MACRO_NFSERR NFSERR_IO;
MACRO_NFSERR NFSERR_ISDIR;
MACRO_NFSERR NFSERR_JUKEBOX;
MACRO_NFSERR NFSERR_LEASE_MOVED;
MACRO_NFSERR NFSERR_LOCKED;
MACRO_NFSERR NFSERR_LOCKS_HELD;
MACRO_NFSERR NFSERR_LOCK_NOTSUPP;
MACRO_NFSERR NFSERR_LOCK_RANGE;
MACRO_NFSERR NFSERR_MINOR_VERS_MISMATCH;
MACRO_NFSERR NFSERR_MLINK;
MACRO_NFSERR NFSERR_MOVED;
MACRO_NFSERR NFSERR_NAMETOL;
MACRO_NFSERR NFSERR_NODEV;
MACRO_NFSERR NFSERR_NOENT;
MACRO_NFSERR NFSERR_NOFILEHANDLE;
MACRO_NFSERR NFSERR_NOSPC;
MACRO_NFSERR NFSERR_NOTDIR;
MACRO_NFSERR NFSERR_NOTEMPTY;
MACRO_NFSERR NFSERR_NOTSUPP;
MACRO_NFSERR NFSERR_NOT_SAME;
MACRO_NFSERR NFSERR_NOT_SYNC;
MACRO_NFSERR NFSERR_NO_GRACE;
MACRO_NFSERR NFSERR_NXIO;
MACRO_NFSERR NFSERR_OLD_STATEID;
MACRO_NFSERR NFSERR_OPENMODE;
MACRO_NFSERR NFSERR_OP_ILLEGAL;
MACRO_NFSERR NFSERR_PERM;
MACRO_NFSERR NFSERR_RECLAIM_BAD;
MACRO_NFSERR NFSERR_RECLAIM_CONFLICT;
MACRO_NFSERR NFSERR_REMOTE;
MACRO_NFSERR NFSERR_RESOURCE;
MACRO_NFSERR NFSERR_RESTOREFH;
MACRO_NFSERR NFSERR_RETERR;
MACRO_NFSERR NFSERR_RETVOID;
MACRO_NFSERR NFSERR_ROFS;
MACRO_NFSERR NFSERR_SAME;
MACRO_NFSERR NFSERR_SERVERFAULT;
MACRO_NFSERR NFSERR_SHARE_DENIED;
MACRO_NFSERR NFSERR_STALE;
MACRO_NFSERR NFSERR_STALEWRITEVERF;
MACRO_NFSERR NFSERR_STALE_CLIENTID;
MACRO_NFSERR NFSERR_STALE_STATEID;
MACRO_NFSERR NFSERR_SYMLINK;
MACRO_NFSERR NFSERR_TOOSMALL;
MACRO_NFSERR NFSERR_TRYLATER;
MACRO_NFSERR NFSERR_WFLUSH;
MACRO_NFSERR NFSERR_WRONGSEC;
MACRO_NFSERR NFSERR_XDEV;
MACRO_NFSMNT NFSMNT_ACDIRMAX;
MACRO_NFSMNT NFSMNT_ACDIRMIN;
MACRO_NFSMNT NFSMNT_ACREGMAX;
MACRO_NFSMNT NFSMNT_ACREGMIN;
MACRO_NFSMNT NFSMNT_CALLUMNT;
MACRO_NFSMNT NFSMNT_DEADTIMEOUT;
MACRO_NFSMNT NFSMNT_DUMBTIMR;
MACRO_NFSMNT NFSMNT_INT;
MACRO_NFSMNT NFSMNT_LOCALLOCKS;
MACRO_NFSMNT NFSMNT_MAXGRPS;
MACRO_NFSMNT NFSMNT_MUTEJUKEBOX;
MACRO_NFSMNT NFSMNT_NFSV3;
MACRO_NFSMNT NFSMNT_NFSV4;
MACRO_NFSMNT NFSMNT_NOCONN;
MACRO_NFSMNT NFSMNT_NOLOCKS;
MACRO_NFSMNT NFSMNT_NONEGNAMECACHE;
MACRO_NFSMNT NFSMNT_NOQUOTA;
MACRO_NFSMNT NFSMNT_RDIRPLUS;
MACRO_NFSMNT NFSMNT_READAHEAD;
MACRO_NFSMNT NFSMNT_READDIRSIZE;
MACRO_NFSMNT NFSMNT_RESVPORT;
MACRO_NFSMNT NFSMNT_RETRANS;
MACRO_NFSMNT NFSMNT_RSIZE;
MACRO_NFSMNT NFSMNT_SECFLAVOR;
MACRO_NFSMNT NFSMNT_SECSYSOK;
MACRO_NFSMNT NFSMNT_SOFT;
MACRO_NFSMNT NFSMNT_TIMEO;
MACRO_NFSMNT NFSMNT_WSIZE;
$696096D9A1236276F280ED3B7625D32B NFSOCK;
MACRO_NFSPROC4 NFSPROC4_CB_COMPOUND;
MACRO_NFSPROC4 NFSPROC4_CB_NULL;
MACRO_NFSPROC4 NFSPROC4_COMPOUND;
MACRO_NFSPROC4 NFSPROC4_NULL;
MACRO_NFSPROC NFSPROC_ACCESS;
MACRO_NFSPROC NFSPROC_COMMIT;
MACRO_NFSPROC NFSPROC_CREATE;
MACRO_NFSPROC NFSPROC_FSINFO;
MACRO_NFSPROC NFSPROC_FSSTAT;
MACRO_NFSPROC NFSPROC_GETATTR;
MACRO_NFSPROC NFSPROC_LINK;
MACRO_NFSPROC NFSPROC_LOOKUP;
MACRO_NFSPROC NFSPROC_MKDIR;
MACRO_NFSPROC NFSPROC_MKNOD;
MACRO_NFSPROC NFSPROC_NOOP;
MACRO_NFSPROC NFSPROC_NULL;
MACRO_NFSPROC NFSPROC_PATHCONF;
MACRO_NFSPROC NFSPROC_READ;
MACRO_NFSPROC NFSPROC_READDIR;
MACRO_NFSPROC NFSPROC_READDIRPLUS;
MACRO_NFSPROC NFSPROC_READLINK;
MACRO_NFSPROC NFSPROC_REMOVE;
MACRO_NFSPROC NFSPROC_RENAME;
MACRO_NFSPROC NFSPROC_RMDIR;
MACRO_NFSPROC NFSPROC_SETATTR;
MACRO_NFSPROC NFSPROC_SYMLINK;
MACRO_NFSPROC NFSPROC_WRITE;
MACRO_NFSRV_DEADSOCKDELAY NFSRV_DEADSOCKDELAY;
MACRO_NFSRV NFSRV_MAXDATA;
MACRO_NFSRV_DEADSOCKDELAY NFSRV_MAXWGATHERDELAY;
MACRO_NFSRV_DEADSOCKDELAY NFSRV_WGATHERDELAY;
MACRO_NFSSVC NFSSVC_ADDSOCK;
MACRO_NFSSVC NFSSVC_EXPORT;
MACRO_NFSSVC NFSSVC_NFSD;
MACRO_NFSV2PROC NFSV2PROC_CREATE;
MACRO_NFSV2PROC NFSV2PROC_GETATTR;
MACRO_NFSV2PROC NFSV2PROC_LINK;
MACRO_NFSV2PROC NFSV2PROC_LOOKUP;
MACRO_NFSV2PROC NFSV2PROC_MKDIR;
MACRO_NFSV2PROC NFSV2PROC_NOOP;
MACRO_NFSV2PROC NFSV2PROC_NULL;
MACRO_NFSV2PROC NFSV2PROC_READ;
MACRO_NFSV2PROC NFSV2PROC_READDIR;
MACRO_NFSV2PROC NFSV2PROC_READLINK;
MACRO_NFSV2PROC NFSV2PROC_REMOVE;
MACRO_NFSV2PROC NFSV2PROC_RENAME;
MACRO_NFSV2PROC NFSV2PROC_RMDIR;
MACRO_NFSV2PROC NFSV2PROC_ROOT;
MACRO_NFSV2PROC NFSV2PROC_SETATTR;
MACRO_NFSV2PROC NFSV2PROC_STATFS;
MACRO_NFSV2PROC NFSV2PROC_SYMLINK;
MACRO_NFSV2PROC NFSV2PROC_WRITE;
MACRO_NFSV2PROC NFSV2PROC_WRITECACHE;
MACRO_MAX_FH_SIZE NFSV2_MAX_FH_SIZE;
MACRO_NFSV3FSINFO NFSV3FSINFO_CANSETTIME;
MACRO_NFSV3FSINFO NFSV3FSINFO_HOMOGENEOUS;
MACRO_NFSV3FSINFO NFSV3FSINFO_LINK;
MACRO_NFSV3FSINFO NFSV3FSINFO_SYMLINK;
MACRO_MAX_FH_SIZE NFSV3_MAX_FH_SIZE;
MACRO_MAX_FH_SIZE NFSV4_MAX_FH_SIZE;
MACRO_NFSX NFSX_UNSIGNED;
MACRO_NFSX NFSX_V2COOKIE;
MACRO_NFSX NFSX_V2FATTR;
MACRO_NFSX NFSX_V2FH;
MACRO_NFSX NFSX_V2SATTR;
MACRO_NFSX NFSX_V2STATFS;
MACRO_NFSX NFSX_V3COOKIEVERF;
MACRO_NFSX NFSX_V3CREATEVERF;
MACRO_NFSX NFSX_V3FATTR;
MACRO_NFSX NFSX_V3FHMAX;
MACRO_NFSX NFSX_V3FSINFO;
MACRO_NFSX NFSX_V3PATHCONF;
MACRO_NFSX NFSX_V3POSTOPATTR;
MACRO_NFSX NFSX_V3SATTR;
MACRO_NFSX NFSX_V3STATFS;
MACRO_NFSX NFSX_V3WCCDATA;
MACRO_NFSX NFSX_V3WRITEVERF;
MACRO_NFS_ACCESS NFS_ACCESS_ALL;
MACRO_NFS_ACCESS NFS_ACCESS_DELETE;
MACRO_NFS_ACCESS NFS_ACCESS_EXECUTE;
MACRO_NFS_ACCESS NFS_ACCESS_EXTEND;
MACRO_NFS_ACCESS NFS_ACCESS_LOOKUP;
MACRO_NFS_ACCESS NFS_ACCESS_MODIFY;
MACRO_NFS_ACCESS NFS_ACCESS_READ;
MACRO_NFS_OP NFS_ACE_ACCESS_ALLOWED_ACE_TYPE;
MACRO_NFS_OP NFS_ACE_ACCESS_DENIED_ACE_TYPE;
MACRO_NFS_OP NFS_ACE_ADD_FILE;
MACRO_NFS_OP NFS_ACE_ADD_SUBDIRECTORY;
MACRO_NFS_OP NFS_ACE_APPEND_DATA;
MACRO_NFS_OP NFS_ACE_DELETE;
MACRO_NFS_OP NFS_ACE_DELETE_CHILD;
MACRO_NFS_OP NFS_ACE_DIRECTORY_INHERIT_ACE;
MACRO_NFS_OP NFS_ACE_EXECUTE;
MACRO_NFS_OP NFS_ACE_FAILED_ACCESS_ACE_FLAG;
MACRO_NFS_OP NFS_ACE_FILE_INHERIT_ACE;
MACRO_NFS_OP NFS_ACE_GENERIC_EXECUTE;
MACRO_NFS_OP NFS_ACE_GENERIC_READ;
MACRO_NFS_OP NFS_ACE_GENERIC_WRITE;
MACRO_NFS_OP NFS_ACE_IDENTIFIER_GROUP;
MACRO_NFS_OP NFS_ACE_INHERITED_ACE;
MACRO_NFS_OP NFS_ACE_INHERIT_ONLY_ACE;
MACRO_NFS_OP NFS_ACE_LIST_DIRECTORY;
MACRO_NFS_OP NFS_ACE_NO_PROPAGATE_INHERIT_ACE;
MACRO_NFS_OP NFS_ACE_READ_ACL;
MACRO_NFS_OP NFS_ACE_READ_ATTRIBUTES;
MACRO_NFS_OP NFS_ACE_READ_DATA;
MACRO_NFS_OP NFS_ACE_READ_NAMED_ATTRS;
MACRO_NFS_OP NFS_ACE_SUCCESSFUL_ACCESS_ACE_FLAG;
MACRO_NFS_OP NFS_ACE_SYNCHRONIZE;
MACRO_NFS_OP NFS_ACE_SYSTEM_ALARM_ACE_TYPE;
MACRO_NFS_OP NFS_ACE_SYSTEM_AUDIT_ACE_TYPE;
MACRO_NFS_OP NFS_ACE_WRITE_ACL;
MACRO_NFS_OP NFS_ACE_WRITE_ATTRIBUTES;
MACRO_NFS_OP NFS_ACE_WRITE_DATA;
MACRO_NFS_OP NFS_ACE_WRITE_NAMED_ATTRS;
MACRO_NFS_OP NFS_ACE_WRITE_OWNER;
MACRO_NFS_OP NFS_ACL_SUPPORT_ALARM_ACL;
MACRO_NFS_OP NFS_ACL_SUPPORT_ALLOW_ACL;
MACRO_NFS_OP NFS_ACL_SUPPORT_AUDIT_ACL;
MACRO_NFS_OP NFS_ACL_SUPPORT_DENY_ACL;
MACRO_NFS_NODEALLOC NFS_ARGSVERSION;
MACRO_NFS_NODEALLOC NFS_ARGSVERSION_XDR;
MACRO_NFS_TICKINTVL NFS_ASYNCTHREADMAXIDLE;
MACRO_NFS_ACCESS NFS_ATTR_BITMAP_LEN;
MACRO_NFS_ACCESS NFS_CLAIM_DELEGATE_CUR;
MACRO_NFS_ACCESS NFS_CLAIM_DELEGATE_PREV;
MACRO_NFS_ACCESS NFS_CLAIM_NULL;
MACRO_NFS_ACCESS NFS_CLAIM_PREVIOUS;
MACRO_NFS_ACCESS NFS_CREATE_EXCLUSIVE;
MACRO_NFS_ACCESS NFS_CREATE_GUARDED;
MACRO_NFS_ACCESS NFS_CREATE_UNCHECKED;
MACRO_NFS_TICKINTVL NFS_DEFASYNCTHREAD;
MACRO_NFS_TICKINTVL NFS_DEFMAXASYNCWRITES;
MACRO_NFS_TICKINTVL NFS_DEFRAHEAD;
MACRO_NFS_TICKINTVL NFS_DEFSTATFSRATELIMIT;
MACRO_NFS_TICKINTVL NFS_DGRAM_RSIZE;
MACRO_NFS_TICKINTVL NFS_DGRAM_WSIZE;
MACRO_NFS_DIRBLKSIZ NFS_DIRBLKSIZ;
MACRO_NFS_NFSSTATS NFS_EXPORTSTATS;
MACRO_NFS_EXPORT NFS_EXPORT_STAT_REC_VERSION;
MACRO_NFS_MAXPATHLEN NFS_FABLKSIZE;
MACRO_NFS_ACCESS NFS_FATTR_ACL;
MACRO_NFS_ACCESS NFS_FATTR_ACLSUPPORT;
MACRO_NFS_ACCESS NFS_FATTR_ARCHIVE;
MACRO_NFS_ACCESS NFS_FATTR_CANSETTIME;
MACRO_NFS_ACCESS NFS_FATTR_CASE_INSENSITIVE;
MACRO_NFS_ACCESS NFS_FATTR_CASE_PRESERVING;
MACRO_NFS_ACCESS NFS_FATTR_CHANGE;
MACRO_NFS_ACCESS NFS_FATTR_CHOWN_RESTRICTED;
MACRO_NFS_ACCESS NFS_FATTR_FH_EXPIRE_TYPE;
MACRO_NFS_ACCESS NFS_FATTR_FILEHANDLE;
MACRO_NFS_ACCESS NFS_FATTR_FILEID;
MACRO_NFS_ACCESS NFS_FATTR_FILES_AVAIL;
MACRO_NFS_ACCESS NFS_FATTR_FILES_FREE;
MACRO_NFS_ACCESS NFS_FATTR_FILES_TOTAL;
MACRO_NFS_ACCESS NFS_FATTR_FSID;
MACRO_NFS_ACCESS NFS_FATTR_FS_LOCATIONS;
MACRO_NFS_ACCESS NFS_FATTR_HIDDEN;
MACRO_NFS_ACCESS NFS_FATTR_HOMOGENEOUS;
MACRO_NFS_ACCESS NFS_FATTR_LEASE_TIME;
MACRO_NFS_ACCESS NFS_FATTR_LINK_SUPPORT;
MACRO_NFS_ACCESS NFS_FATTR_MAXFILESIZE;
MACRO_NFS_ACCESS NFS_FATTR_MAXLINK;
MACRO_NFS_ACCESS NFS_FATTR_MAXNAME;
MACRO_NFS_ACCESS NFS_FATTR_MAXREAD;
MACRO_NFS_ACCESS NFS_FATTR_MAXWRITE;
MACRO_NFS_ACCESS NFS_FATTR_MIMETYPE;
MACRO_NFS_ACCESS NFS_FATTR_MODE;
MACRO_NFS_ACCESS NFS_FATTR_MOUNTED_ON_FILEID;
MACRO_NFS_ACCESS NFS_FATTR_NAMED_ATTR;
MACRO_NFS_ACCESS NFS_FATTR_NO_TRUNC;
MACRO_NFS_ACCESS NFS_FATTR_NUMLINKS;
MACRO_NFS_ACCESS NFS_FATTR_OWNER;
MACRO_NFS_ACCESS NFS_FATTR_OWNER_GROUP;
MACRO_NFS_ACCESS NFS_FATTR_QUOTA_AVAIL_HARD;
MACRO_NFS_ACCESS NFS_FATTR_QUOTA_AVAIL_SOFT;
MACRO_NFS_ACCESS NFS_FATTR_QUOTA_USED;
MACRO_NFS_ACCESS NFS_FATTR_RAWDEV;
MACRO_NFS_ACCESS NFS_FATTR_RDATTR_ERROR;
MACRO_NFS_ACCESS NFS_FATTR_SIZE;
MACRO_NFS_ACCESS NFS_FATTR_SPACE_AVAIL;
MACRO_NFS_ACCESS NFS_FATTR_SPACE_FREE;
MACRO_NFS_ACCESS NFS_FATTR_SPACE_TOTAL;
MACRO_NFS_ACCESS NFS_FATTR_SPACE_USED;
MACRO_NFS_ACCESS NFS_FATTR_SUPPORTED_ATTRS;
MACRO_NFS_ACCESS NFS_FATTR_SYMLINK_SUPPORT;
MACRO_NFS_ACCESS NFS_FATTR_SYSTEM;
MACRO_NFS_ACCESS NFS_FATTR_TIME_ACCESS;
MACRO_NFS_ACCESS NFS_FATTR_TIME_ACCESS_SET;
MACRO_NFS_ACCESS NFS_FATTR_TIME_BACKUP;
MACRO_NFS_ACCESS NFS_FATTR_TIME_CREATE;
MACRO_NFS_ACCESS NFS_FATTR_TIME_DELTA;
MACRO_NFS_ACCESS NFS_FATTR_TIME_METADATA;
MACRO_NFS_ACCESS NFS_FATTR_TIME_MODIFY;
MACRO_NFS_ACCESS NFS_FATTR_TIME_MODIFY_SET;
MACRO_NFS_ACCESS NFS_FATTR_TYPE;
MACRO_NFS_ACCESS NFS_FATTR_UNIQUE_HANDLES;
MACRO_NFS_OP NFS_FH_NOEXPIRE_WITH_OPEN;
MACRO_NFS_OP NFS_FH_PERSISTENT;
MACRO_NFS_MOUNT NFS_FH_VERSION;
MACRO_NFS_OP NFS_FH_VOLATILE_ANY;
MACRO_NFS_OP NFS_FH_VOL_MIGRATION;
MACRO_NFS_OP NFS_FH_VOL_RENAME;
MACRO_NFS_TICKINTVL NFS_IOSIZE;
MACRO_NFS_ACCESS NFS_LIMIT_BLOCKS;
MACRO_NFS_ACCESS NFS_LIMIT_SIZE;
MACRO_NFS_NODEALLOC NFS_LOCK_MODE_DISABLED;
MACRO_NFS_NODEALLOC NFS_LOCK_MODE_ENABLED;
MACRO_NFS_NODEALLOC NFS_LOCK_MODE_LOCAL;
MACRO_NFS_ACCESS NFS_LOCK_TYPE_READ;
MACRO_NFS_ACCESS NFS_LOCK_TYPE_READW;
MACRO_NFS_ACCESS NFS_LOCK_TYPE_WRITE;
MACRO_NFS_ACCESS NFS_LOCK_TYPE_WRITEW;
MACRO_NFS_NODEALLOC NFS_MATTR_ATTRCACHE_DIR_MAX;
MACRO_NFS_NODEALLOC NFS_MATTR_ATTRCACHE_DIR_MIN;
MACRO_NFS_NODEALLOC NFS_MATTR_ATTRCACHE_REG_MAX;
MACRO_NFS_NODEALLOC NFS_MATTR_ATTRCACHE_REG_MIN;
MACRO_NFS_NODEALLOC NFS_MATTR_BITMAP_LEN;
MACRO_NFS_NODEALLOC NFS_MATTR_DEAD_TIMEOUT;
MACRO_NFS_NODEALLOC NFS_MATTR_FH;
MACRO_NFS_NODEALLOC NFS_MATTR_FLAGS;
MACRO_NFS_NODEALLOC NFS_MATTR_FS_LOCATIONS;
MACRO_NFS_NODEALLOC NFS_MATTR_LOCK_MODE;
MACRO_NFS_NODEALLOC NFS_MATTR_MAX_GROUP_LIST;
MACRO_NFS_NODEALLOC NFS_MATTR_MNTFLAGS;
MACRO_NFS_NODEALLOC NFS_MATTR_MNTFROM;
MACRO_NFS_NODEALLOC NFS_MATTR_MOUNT_PORT;
MACRO_NFS_NODEALLOC NFS_MATTR_NFS_MINOR_VERSION;
MACRO_NFS_NODEALLOC NFS_MATTR_NFS_PORT;
MACRO_NFS_NODEALLOC NFS_MATTR_NFS_VERSION;
MACRO_NFS_NODEALLOC NFS_MATTR_READAHEAD;
MACRO_NFS_NODEALLOC NFS_MATTR_READDIR_SIZE;
MACRO_NFS_NODEALLOC NFS_MATTR_READ_SIZE;
MACRO_NFS_NODEALLOC NFS_MATTR_REQUEST_TIMEOUT;
MACRO_NFS_NODEALLOC NFS_MATTR_SECURITY;
MACRO_NFS_NODEALLOC NFS_MATTR_SOCKET_TYPE;
MACRO_NFS_NODEALLOC NFS_MATTR_SOFT_RETRY_COUNT;
MACRO_NFS_NODEALLOC NFS_MATTR_WRITE_SIZE;
MACRO_NFS_TICKINTVL NFS_MAXASYNCTHREAD;
MACRO_NFS_TICKINTVL NFS_MAXATTRTIMO;
MACRO_NFS NFS_MAXDATA;
MACRO_NFS NFS_MAXDGRAMDATA;
MACRO_NFS_TICKINTVL NFS_MAXDIRATTRTIMO;
MACRO_NFS_TICKINTVL NFS_MAXGRPS;
MACRO_NFS_MAXPATHLEN NFS_MAXNAMLEN;
MACRO_NFS_MAXPATHLEN NFS_MAXPACKET;
MACRO_NFS_MAXPATHLEN NFS_MAXPATHLEN;
MACRO_NFS_TICKINTVL NFS_MAXRAHEAD;
MACRO_NFS_TICKINTVL NFS_MAXREXMIT;
MACRO_NFS_NODEALLOC NFS_MFLAG_ACLONLY;
MACRO_NFS_NODEALLOC NFS_MFLAG_BITMAP_LEN;
MACRO_NFS_NODEALLOC NFS_MFLAG_CALLUMNT;
MACRO_NFS_NODEALLOC NFS_MFLAG_DUMBTIMER;
MACRO_NFS_NODEALLOC NFS_MFLAG_EPHEMERAL;
MACRO_NFS_NODEALLOC NFS_MFLAG_INTR;
MACRO_NFS_NODEALLOC NFS_MFLAG_MNTQUICK;
MACRO_NFS_NODEALLOC NFS_MFLAG_MNTUDP;
MACRO_NFS_NODEALLOC NFS_MFLAG_MUTEJUKEBOX;
MACRO_NFS_NODEALLOC NFS_MFLAG_NFC;
MACRO_NFS_NODEALLOC NFS_MFLAG_NOACL;
MACRO_NFS_NODEALLOC NFS_MFLAG_NOCALLBACK;
MACRO_NFS_NODEALLOC NFS_MFLAG_NOCONNECT;
MACRO_NFS_NODEALLOC NFS_MFLAG_NONAMEDATTR;
MACRO_NFS_NODEALLOC NFS_MFLAG_NONEGNAMECACHE;
MACRO_NFS_NODEALLOC NFS_MFLAG_NOQUOTA;
MACRO_NFS_NODEALLOC NFS_MFLAG_RDIRPLUS;
MACRO_NFS_NODEALLOC NFS_MFLAG_RESVPORT;
MACRO_NFS_NODEALLOC NFS_MFLAG_SOFT;
MACRO_NFS_MOUNT NFS_MIATTR_BITMAP_LEN;
MACRO_NFS_MOUNT NFS_MIATTR_CUR_ARGS;
MACRO_NFS_MOUNT NFS_MIATTR_CUR_LOC_INDEX;
MACRO_NFS_MOUNT NFS_MIATTR_FLAGS;
MACRO_NFS_MOUNT NFS_MIATTR_ORIG_ARGS;
MACRO_NFS_MOUNT NFS_MIFLAG_BITMAP_LEN;
MACRO_NFS_MOUNT NFS_MIFLAG_DEAD;
MACRO_NFS_MOUNT NFS_MIFLAG_NOTRESP;
MACRO_NFS_MOUNT NFS_MIFLAG_RECOVERY;
MACRO_NFS_TICKINTVL NFS_MINATTRTIMO;
MACRO_NFS_TICKINTVL NFS_MINDIRATTRTIMO;
MACRO_NFS_NODEALLOC NFS_MNTALLOC;
MACRO_NFS_NFSSTATS NFS_MOUNTINFO;
MACRO_NFS_MOUNT NFS_MOUNT_INFO_VERSION;
MACRO_NFS_NFSSTATS NFS_NFSSTATS;
MACRO_NFS_NODEALLOC NFS_NODEALLOC;
MACRO_NFS_NPROCS NFS_NPROCS;
MACRO_NFS_OK NFS_OK;
MACRO_NFS_ACCESS NFS_OPEN_CREATE;
MACRO_NFS_ACCESS NFS_OPEN_DELEGATE_NONE;
MACRO_NFS_ACCESS NFS_OPEN_DELEGATE_READ;
MACRO_NFS_ACCESS NFS_OPEN_DELEGATE_WRITE;
MACRO_NFS_ACCESS NFS_OPEN_NOCREATE;
MACRO_NFS_ACCESS NFS_OPEN_RESULT_CONFIRM;
MACRO_NFS_ACCESS NFS_OPEN_RESULT_LOCKTYPE_POSIX;
MACRO_NFS_ACCESS NFS_OPEN_SHARE_ACCESS_BOTH;
MACRO_NFS_ACCESS NFS_OPEN_SHARE_ACCESS_NONE;
MACRO_NFS_ACCESS NFS_OPEN_SHARE_ACCESS_READ;
MACRO_NFS_ACCESS NFS_OPEN_SHARE_ACCESS_WRITE;
MACRO_NFS_ACCESS NFS_OPEN_SHARE_DENY_BOTH;
MACRO_NFS_ACCESS NFS_OPEN_SHARE_DENY_NONE;
MACRO_NFS_ACCESS NFS_OPEN_SHARE_DENY_READ;
MACRO_NFS_ACCESS NFS_OPEN_SHARE_DENY_WRITE;
MACRO_NFS_OP NFS_OP_ACCESS;
MACRO_NFS_OP NFS_OP_CB_GETATTR;
MACRO_NFS_OP NFS_OP_CB_ILLEGAL;
MACRO_NFS_OP NFS_OP_CB_RECALL;
MACRO_NFS_OP NFS_OP_CLOSE;
MACRO_NFS_OP NFS_OP_COMMIT;
MACRO_NFS_OP NFS_OP_CREATE;
MACRO_NFS_OP NFS_OP_DELEGPURGE;
MACRO_NFS_OP NFS_OP_DELEGRETURN;
MACRO_NFS_OP NFS_OP_GETATTR;
MACRO_NFS_OP NFS_OP_GETFH;
MACRO_NFS_OP NFS_OP_ILLEGAL;
MACRO_NFS_OP NFS_OP_LINK;
MACRO_NFS_OP NFS_OP_LOCK;
MACRO_NFS_OP NFS_OP_LOCKT;
MACRO_NFS_OP NFS_OP_LOCKU;
MACRO_NFS_OP NFS_OP_LOOKUP;
MACRO_NFS_OP NFS_OP_LOOKUPP;
MACRO_NFS_OP NFS_OP_NVERIFY;
MACRO_NFS_OP NFS_OP_OPEN;
MACRO_NFS_OP NFS_OP_OPENATTR;
MACRO_NFS_OP NFS_OP_OPEN_CONFIRM;
MACRO_NFS_OP NFS_OP_OPEN_DOWNGRADE;
MACRO_NFS_OP NFS_OP_PUTFH;
MACRO_NFS_OP NFS_OP_PUTPUBFH;
MACRO_NFS_OP NFS_OP_PUTROOTFH;
MACRO_NFS_OP NFS_OP_READ;
MACRO_NFS_OP NFS_OP_READDIR;
MACRO_NFS_OP NFS_OP_READLINK;
MACRO_NFS_OP NFS_OP_RELEASE_LOCKOWNER;
MACRO_NFS_OP NFS_OP_REMOVE;
MACRO_NFS_OP NFS_OP_RENAME;
MACRO_NFS_OP NFS_OP_RENEW;
MACRO_NFS_OP NFS_OP_RESTOREFH;
MACRO_NFS_OP NFS_OP_SAVEFH;
MACRO_NFS_OP NFS_OP_SECINFO;
MACRO_NFS_OP NFS_OP_SETATTR;
MACRO_NFS_OP NFS_OP_SETCLIENTID;
MACRO_NFS_OP NFS_OP_SETCLIENTID_CONFIRM;
MACRO_NFS_OP NFS_OP_VERIFY;
MACRO_NFS_OP NFS_OP_WRITE;
MACRO_NFS NFS_PORT;
MACRO_NFS NFS_PREFDGRAMDATA;
MACRO_NFS NFS_PROG;
MACRO_NFS_TICKINTVL NFS_READDIRSIZE;
MACRO_NFS_TICKINTVL NFS_REQUESTDELAY;
MACRO_NFS_TICKINTVL NFS_RETRANS;
MACRO_NFS_TICKINTVL NFS_RSIZE;
MACRO_NFS_TICKINTVL NFS_RWSIZE;
MACRO_NFS_ACCESS NFS_SMALLFH;
MACRO_NFS_NODEALLOC NFS_SVCALLOC;
MACRO_NFS_TICKINTVL NFS_TICKINTVL;
MACRO_NFS_TIME NFS_TIME_DONT_CHANGE;
MACRO_NFS_TIME NFS_TIME_SET_TO_CLIENT;
MACRO_NFS_TIME NFS_TIME_SET_TO_SERVER;
MACRO_NFS_DIRBLKSIZ NFS_TPRINTF_DELAY;
MACRO_NFS_DIRBLKSIZ NFS_TPRINTF_INITIAL_DELAY;
MACRO_NFS_TICKINTVL NFS_TRYLATERDEL;
MACRO_NFS_MAXPATHLEN NFS_UDPSOCKBUF;
MACRO_NFS_NFSSTATS NFS_USERCOUNT;
MACRO_NFS_NFSSTATS NFS_USERSTATS;
MACRO_NFS_EXPORT NFS_USER_STAT_PATH_REC;
MACRO_NFS_EXPORT NFS_USER_STAT_REC_VERSION;
MACRO_NFS_EXPORT NFS_USER_STAT_USER_REC;
MACRO_NFS NFS_V2MAXDATA;
MACRO_NFS NFS_VER2;
MACRO_NFS NFS_VER3;
MACRO_NFS NFS_VER4;
MACRO_NFS_NFSSTATS NFS_WDELAYHASHSIZ;
MACRO_NFS_ACCESS NFS_WRITE_DATASYNC;
MACRO_NFS_ACCESS NFS_WRITE_FILESYNC;
MACRO_NFS_ACCESS NFS_WRITE_UNSTABLE;
MACRO_NFS_TICKINTVL NFS_WSIZE;
MACRO_NFS_NODEALLOC NFS_XDRARGS_VERSION_0;
MACRO_NGROUPS NGROUPS;
MACRO_NAME NGROUPS_MAX;
MACRO_NID NID_Directory;
MACRO_NID NID_Domain;
MACRO_NID NID_Enterprises;
MACRO_NID NID_Experimental;
MACRO_NID NID_ISO_US;
MACRO_NID NID_Independent;
MACRO_NID NID_LocalKeySet;
MACRO_NID NID_Mail;
MACRO_NID NID_Management;
MACRO_NID NID_OCSP_sign;
MACRO_NID NID_Private;
MACRO_NID NID_SMIME;
MACRO_NID NID_SMIMECapabilities;
MACRO_NID NID_SNMPv2;
MACRO_NID NID_Security;
MACRO_NID NID_X500;
MACRO_NID NID_X500algorithms;
MACRO_NID NID_X509;
MACRO_NID NID_X9_57;
MACRO_NID NID_X9_62_c2onb191v4;
MACRO_NID NID_X9_62_c2onb191v5;
MACRO_NID NID_X9_62_c2onb239v4;
MACRO_NID NID_X9_62_c2onb239v5;
MACRO_NID NID_X9_62_c2pnb163v1;
MACRO_NID NID_X9_62_c2pnb163v2;
MACRO_NID NID_X9_62_c2pnb163v3;
MACRO_NID NID_X9_62_c2pnb176v1;
MACRO_NID NID_X9_62_c2pnb208w1;
MACRO_NID NID_X9_62_c2pnb272w1;
MACRO_NID NID_X9_62_c2pnb304w1;
MACRO_NID NID_X9_62_c2pnb368w1;
MACRO_NID NID_X9_62_c2tnb191v1;
MACRO_NID NID_X9_62_c2tnb191v2;
MACRO_NID NID_X9_62_c2tnb191v3;
MACRO_NID NID_X9_62_c2tnb239v1;
MACRO_NID NID_X9_62_c2tnb239v2;
MACRO_NID NID_X9_62_c2tnb239v3;
MACRO_NID NID_X9_62_c2tnb359v1;
MACRO_NID NID_X9_62_c2tnb431r1;
MACRO_NID NID_X9_62_characteristic_two_field;
MACRO_NID NID_X9_62_id_characteristic_two_basis;
MACRO_NID NID_X9_62_id_ecPublicKey;
MACRO_NID NID_X9_62_onBasis;
MACRO_NID NID_X9_62_ppBasis;
MACRO_NID NID_X9_62_prime192v1;
MACRO_NID NID_X9_62_prime192v2;
MACRO_NID NID_X9_62_prime192v3;
MACRO_NID NID_X9_62_prime239v1;
MACRO_NID NID_X9_62_prime239v2;
MACRO_NID NID_X9_62_prime239v3;
MACRO_NID NID_X9_62_prime256v1;
MACRO_NID NID_X9_62_prime_field;
MACRO_NID NID_X9_62_tpBasis;
MACRO_NID NID_X9cm;
MACRO_NID NID_aRecord;
MACRO_NID NID_aaControls;
MACRO_NID NID_ac_auditEntity;
MACRO_NID NID_ac_proxying;
MACRO_NID NID_ac_targeting;
MACRO_NID NID_account;
MACRO_NID NID_ad_OCSP;
MACRO_NID NID_ad_ca_issuers;
MACRO_NID NID_ad_dvcs;
MACRO_NID NID_ad_timeStamping;
MACRO_NID NID_aes_128_cbc;
MACRO_NID NID_aes_128_cfb1;
MACRO_NID NID_aes_128_cfb128;
MACRO_NID NID_aes_128_cfb8;
MACRO_NID NID_aes_128_ecb;
MACRO_NID NID_aes_128_ofb128;
MACRO_NID NID_aes_192_cbc;
MACRO_NID NID_aes_192_cfb1;
MACRO_NID NID_aes_192_cfb128;
MACRO_NID NID_aes_192_cfb8;
MACRO_NID NID_aes_192_ecb;
MACRO_NID NID_aes_192_ofb128;
MACRO_NID NID_aes_256_cbc;
MACRO_NID NID_aes_256_cfb1;
MACRO_NID NID_aes_256_cfb128;
MACRO_NID NID_aes_256_cfb8;
MACRO_NID NID_aes_256_ecb;
MACRO_NID NID_aes_256_ofb128;
MACRO_NID NID_algorithm;
MACRO_NID NID_ansi_X9_62;
MACRO_NID NID_any_policy;
MACRO_NID NID_associatedDomain;
MACRO_NID NID_associatedName;
MACRO_NID NID_audio;
MACRO_NID NID_authorityRevocationList;
MACRO_NID NID_authority_key_identifier;
MACRO_NID NID_basic_constraints;
MACRO_NID NID_bf_cbc;
MACRO_NID NID_bf_cfb64;
MACRO_NID NID_bf_ecb;
MACRO_NID NID_bf_ofb64;
MACRO_NID NID_biometricInfo;
MACRO_NID NID_buildingName;
MACRO_NID NID_businessCategory;
MACRO_NID NID_cACertificate;
MACRO_NID NID_cNAMERecord;
MACRO_NID NID_caRepository;
MACRO_NID NID_camellia_128_cbc;
MACRO_NID NID_camellia_128_cfb1;
MACRO_NID NID_camellia_128_cfb128;
MACRO_NID NID_camellia_128_cfb8;
MACRO_NID NID_camellia_128_ecb;
MACRO_NID NID_camellia_128_ofb128;
MACRO_NID NID_camellia_192_cbc;
MACRO_NID NID_camellia_192_cfb1;
MACRO_NID NID_camellia_192_cfb128;
MACRO_NID NID_camellia_192_cfb8;
MACRO_NID NID_camellia_192_ecb;
MACRO_NID NID_camellia_192_ofb128;
MACRO_NID NID_camellia_256_cbc;
MACRO_NID NID_camellia_256_cfb1;
MACRO_NID NID_camellia_256_cfb128;
MACRO_NID NID_camellia_256_cfb8;
MACRO_NID NID_camellia_256_ecb;
MACRO_NID NID_camellia_256_ofb128;
MACRO_NID NID_caseIgnoreIA5StringSyntax;
MACRO_NID NID_cast5_cbc;
MACRO_NID NID_cast5_cfb64;
MACRO_NID NID_cast5_ecb;
MACRO_NID NID_cast5_ofb64;
MACRO_ccitt NID_ccitt;
MACRO_NID NID_certBag;
MACRO_NID NID_certicom_arc;
MACRO_NID NID_certificateRevocationList;
MACRO_NID NID_certificate_issuer;
MACRO_NID NID_certificate_policies;
MACRO_NID NID_clearance;
MACRO_NID NID_client_auth;
MACRO_NID NID_code_sign;
MACRO_NID NID_commonName;
MACRO_NID NID_countryName;
MACRO_NID NID_crlBag;
MACRO_NID NID_crl_distribution_points;
MACRO_NID NID_crl_number;
MACRO_NID NID_crl_reason;
MACRO_NID NID_crossCertificatePair;
MACRO_NID NID_cryptocom;
MACRO_NID NID_cryptopro;
MACRO_NID NID_dITRedirect;
MACRO_NID NID_dNSDomain;
MACRO_NID NID_dSAQuality;
MACRO_NID NID_data;
MACRO_NID NID_dcObject;
MACRO_NID NID_deltaRevocationList;
MACRO_NID NID_delta_crl;
MACRO_NID NID_des_cbc;
MACRO_NID NID_des_cdmf;
MACRO_NID NID_des_cfb1;
MACRO_NID NID_des_cfb64;
MACRO_NID NID_des_cfb8;
MACRO_NID NID_des_ecb;
MACRO_NID NID_des_ede3_cbc;
MACRO_NID NID_des_ede3_cfb1;
MACRO_NID NID_des_ede3_cfb64;
MACRO_NID NID_des_ede3_cfb8;
MACRO_NID NID_des_ede3_ecb;
MACRO_NID NID_des_ede3_ofb64;
MACRO_NID NID_des_ede_cbc;
MACRO_NID NID_des_ede_cfb64;
MACRO_NID NID_des_ede_ecb;
MACRO_NID NID_des_ede_ofb64;
MACRO_NID NID_des_ofb64;
MACRO_NID NID_description;
MACRO_NID NID_destinationIndicator;
MACRO_NID NID_desx_cbc;
MACRO_NID NID_dhKeyAgreement;
MACRO_NID NID_distinguishedName;
MACRO_NID NID_dmdName;
MACRO_NID NID_dnQualifier;
MACRO_NID NID_document;
MACRO_NID NID_documentAuthor;
MACRO_NID NID_documentIdentifier;
MACRO_NID NID_documentLocation;
MACRO_NID NID_documentPublisher;
MACRO_NID NID_documentSeries;
MACRO_NID NID_documentTitle;
MACRO_NID NID_documentVersion;
MACRO_NID NID_dod;
MACRO_NID NID_domainComponent;
MACRO_NID NID_domainRelatedObject;
MACRO_NID NID_dsa;
MACRO_NID NID_dsaWithSHA;
MACRO_NID NID_dsaWithSHA1;
MACRO_NID NID_dsaWithSHA1_2;
MACRO_NID NID_dsa_2;
MACRO_NID NID_dsa_with_SHA224;
MACRO_NID NID_dsa_with_SHA256;
MACRO_NID NID_dvcs;
MACRO_NID NID_ecdsa_with_Recommended;
MACRO_NID NID_ecdsa_with_SHA1;
MACRO_NID NID_ecdsa_with_SHA224;
MACRO_NID NID_ecdsa_with_SHA256;
MACRO_NID NID_ecdsa_with_SHA384;
MACRO_NID NID_ecdsa_with_SHA512;
MACRO_NID NID_ecdsa_with_Specified;
MACRO_NID NID_email_protect;
MACRO_NID NID_enhancedSearchGuide;
MACRO_NID NID_ext_key_usage;
MACRO_NID NID_ext_req;
MACRO_NID NID_facsimileTelephoneNumber;
MACRO_NID NID_favouriteDrink;
MACRO_NID NID_freshest_crl;
MACRO_NID NID_friendlyCountry;
MACRO_NID NID_friendlyCountryName;
MACRO_NID NID_friendlyName;
MACRO_NID NID_generationQualifier;
MACRO_NID NID_givenName;
MACRO_NID NID_gost89_cnt;
MACRO_NID NID_hmac;
MACRO_NID NID_hmacWithMD5;
MACRO_NID NID_hmacWithSHA1;
MACRO_NID NID_hmacWithSHA224;
MACRO_NID NID_hmacWithSHA256;
MACRO_NID NID_hmacWithSHA384;
MACRO_NID NID_hmacWithSHA512;
MACRO_NID NID_hmac_md5;
MACRO_NID NID_hmac_sha1;
MACRO_NID NID_hold_instruction_call_issuer;
MACRO_NID NID_hold_instruction_code;
MACRO_NID NID_hold_instruction_none;
MACRO_NID NID_hold_instruction_reject;
MACRO_NID NID_homePostalAddress;
MACRO_NID NID_homeTelephoneNumber;
MACRO_NID NID_host;
MACRO_NID NID_houseIdentifier;
MACRO_NID NID_iA5StringSyntax;
MACRO_NID NID_iana;
MACRO_NID NID_id_DHBasedMac;
MACRO_NID NID_id_Gost28147_89;
MACRO_NID NID_id_Gost28147_89_CryptoPro_A_ParamSet;
MACRO_NID NID_id_Gost28147_89_CryptoPro_B_ParamSet;
MACRO_NID NID_id_Gost28147_89_CryptoPro_C_ParamSet;
MACRO_NID NID_id_Gost28147_89_CryptoPro_D_ParamSet;
MACRO_NID NID_id_Gost28147_89_CryptoPro_KeyMeshing;
MACRO_NID NID_id_Gost28147_89_CryptoPro_Oscar_1_0_ParamSet;
MACRO_NID NID_id_Gost28147_89_CryptoPro_Oscar_1_1_ParamSet;
MACRO_NID NID_id_Gost28147_89_CryptoPro_RIC_1_ParamSet;
MACRO_NID NID_id_Gost28147_89_MAC;
MACRO_NID NID_id_Gost28147_89_None_KeyMeshing;
MACRO_NID NID_id_Gost28147_89_TestParamSet;
MACRO_NID NID_id_Gost28147_89_cc;
MACRO_NID NID_id_GostR3410_2001;
MACRO_NID NID_id_GostR3410_2001DH;
MACRO_NID NID_id_GostR3410_2001_CryptoPro_A_ParamSet;
MACRO_NID NID_id_GostR3410_2001_CryptoPro_B_ParamSet;
MACRO_NID NID_id_GostR3410_2001_CryptoPro_C_ParamSet;
MACRO_NID NID_id_GostR3410_2001_CryptoPro_XchA_ParamSet;
MACRO_NID NID_id_GostR3410_2001_CryptoPro_XchB_ParamSet;
MACRO_NID NID_id_GostR3410_2001_ParamSet_cc;
MACRO_NID NID_id_GostR3410_2001_TestParamSet;
MACRO_NID NID_id_GostR3410_2001_cc;
MACRO_NID NID_id_GostR3410_94;
MACRO_NID NID_id_GostR3410_94DH;
MACRO_NID NID_id_GostR3410_94_CryptoPro_A_ParamSet;
MACRO_NID NID_id_GostR3410_94_CryptoPro_B_ParamSet;
MACRO_NID NID_id_GostR3410_94_CryptoPro_C_ParamSet;
MACRO_NID NID_id_GostR3410_94_CryptoPro_D_ParamSet;
MACRO_NID NID_id_GostR3410_94_CryptoPro_XchA_ParamSet;
MACRO_NID NID_id_GostR3410_94_CryptoPro_XchB_ParamSet;
MACRO_NID NID_id_GostR3410_94_CryptoPro_XchC_ParamSet;
MACRO_NID NID_id_GostR3410_94_TestParamSet;
MACRO_NID NID_id_GostR3410_94_a;
MACRO_NID NID_id_GostR3410_94_aBis;
MACRO_NID NID_id_GostR3410_94_b;
MACRO_NID NID_id_GostR3410_94_bBis;
MACRO_NID NID_id_GostR3410_94_cc;
MACRO_NID NID_id_GostR3411_94;
MACRO_NID NID_id_GostR3411_94_CryptoProParamSet;
MACRO_NID NID_id_GostR3411_94_TestParamSet;
MACRO_NID NID_id_GostR3411_94_prf;
MACRO_NID NID_id_GostR3411_94_with_GostR3410_2001;
MACRO_NID NID_id_GostR3411_94_with_GostR3410_2001_cc;
MACRO_NID NID_id_GostR3411_94_with_GostR3410_94;
MACRO_NID NID_id_GostR3411_94_with_GostR3410_94_cc;
MACRO_NID NID_id_HMACGostR3411_94;
MACRO_NID NID_id_PasswordBasedMAC;
MACRO_NID NID_id_aca;
MACRO_NID NID_id_aca_accessIdentity;
MACRO_NID NID_id_aca_authenticationInfo;
MACRO_NID NID_id_aca_chargingIdentity;
MACRO_NID NID_id_aca_encAttrs;
MACRO_NID NID_id_aca_group;
MACRO_NID NID_id_aca_role;
MACRO_NID NID_id_ad;
MACRO_NID NID_id_aes128_wrap;
MACRO_NID NID_id_aes192_wrap;
MACRO_NID NID_id_aes256_wrap;
MACRO_NID NID_id_alg;
MACRO_NID NID_id_alg_des40;
MACRO_NID NID_id_alg_dh_pop;
MACRO_NID NID_id_alg_dh_sig_hmac_sha1;
MACRO_NID NID_id_alg_noSignature;
MACRO_NID NID_id_cct;
MACRO_NID NID_id_cct_PKIData;
MACRO_NID NID_id_cct_PKIResponse;
MACRO_NID NID_id_cct_crs;
MACRO_NID NID_id_ce;
MACRO_NID NID_id_cmc;
MACRO_NID NID_id_cmc_addExtensions;
MACRO_NID NID_id_cmc_confirmCertAcceptance;
MACRO_NID NID_id_cmc_dataReturn;
MACRO_NID NID_id_cmc_decryptedPOP;
MACRO_NID NID_id_cmc_encryptedPOP;
MACRO_NID NID_id_cmc_getCRL;
MACRO_NID NID_id_cmc_getCert;
MACRO_NID NID_id_cmc_identification;
MACRO_NID NID_id_cmc_identityProof;
MACRO_NID NID_id_cmc_lraPOPWitness;
MACRO_NID NID_id_cmc_popLinkRandom;
MACRO_NID NID_id_cmc_popLinkWitness;
MACRO_NID NID_id_cmc_queryPending;
MACRO_NID NID_id_cmc_recipientNonce;
MACRO_NID NID_id_cmc_regInfo;
MACRO_NID NID_id_cmc_responseInfo;
MACRO_NID NID_id_cmc_revokeRequest;
MACRO_NID NID_id_cmc_senderNonce;
MACRO_NID NID_id_cmc_statusInfo;
MACRO_NID NID_id_cmc_transactionId;
MACRO_NID NID_id_ct_asciiTextWithCRLF;
MACRO_NID NID_id_hex_multipart_message;
MACRO_NID NID_id_hex_partial_message;
MACRO_NID NID_id_it;
MACRO_NID NID_id_it_caKeyUpdateInfo;
MACRO_NID NID_id_it_caProtEncCert;
MACRO_NID NID_id_it_confirmWaitTime;
MACRO_NID NID_id_it_currentCRL;
MACRO_NID NID_id_it_encKeyPairTypes;
MACRO_NID NID_id_it_implicitConfirm;
MACRO_NID NID_id_it_keyPairParamRep;
MACRO_NID NID_id_it_keyPairParamReq;
MACRO_NID NID_id_it_origPKIMessage;
MACRO_NID NID_id_it_preferredSymmAlg;
MACRO_NID NID_id_it_revPassphrase;
MACRO_NID NID_id_it_signKeyPairTypes;
MACRO_NID NID_id_it_subscriptionRequest;
MACRO_NID NID_id_it_subscriptionResponse;
MACRO_NID NID_id_it_suppLangTags;
MACRO_NID NID_id_it_unsupportedOIDs;
MACRO_NID NID_id_kp;
MACRO_NID NID_id_mod_attribute_cert;
MACRO_NID NID_id_mod_cmc;
MACRO_NID NID_id_mod_cmp;
MACRO_NID NID_id_mod_cmp2000;
MACRO_NID NID_id_mod_crmf;
MACRO_NID NID_id_mod_dvcs;
MACRO_NID NID_id_mod_kea_profile_88;
MACRO_NID NID_id_mod_kea_profile_93;
MACRO_NID NID_id_mod_ocsp;
MACRO_NID NID_id_mod_qualified_cert_88;
MACRO_NID NID_id_mod_qualified_cert_93;
MACRO_NID NID_id_mod_timestamp_protocol;
MACRO_NID NID_id_on;
MACRO_NID NID_id_on_permanentIdentifier;
MACRO_NID NID_id_on_personalData;
MACRO_NID NID_id_pbkdf2;
MACRO_NID NID_id_pda;
MACRO_NID NID_id_pda_countryOfCitizenship;
MACRO_NID NID_id_pda_countryOfResidence;
MACRO_NID NID_id_pda_dateOfBirth;
MACRO_NID NID_id_pda_gender;
MACRO_NID NID_id_pda_placeOfBirth;
MACRO_NID NID_id_pe;
MACRO_NID NID_id_pkip;
MACRO_NID NID_id_pkix;
MACRO_NID NID_id_pkix1_explicit_88;
MACRO_NID NID_id_pkix1_explicit_93;
MACRO_NID NID_id_pkix1_implicit_88;
MACRO_NID NID_id_pkix1_implicit_93;
MACRO_NID NID_id_pkix_OCSP_CrlID;
MACRO_NID NID_id_pkix_OCSP_Nonce;
MACRO_NID NID_id_pkix_OCSP_acceptableResponses;
MACRO_NID NID_id_pkix_OCSP_archiveCutoff;
MACRO_NID NID_id_pkix_OCSP_basic;
MACRO_NID NID_id_pkix_OCSP_extendedStatus;
MACRO_NID NID_id_pkix_OCSP_noCheck;
MACRO_NID NID_id_pkix_OCSP_path;
MACRO_NID NID_id_pkix_OCSP_serviceLocator;
MACRO_NID NID_id_pkix_OCSP_trustRoot;
MACRO_NID NID_id_pkix_OCSP_valid;
MACRO_NID NID_id_pkix_mod;
MACRO_NID NID_id_ppl;
MACRO_NID NID_id_ppl_anyLanguage;
MACRO_NID NID_id_ppl_inheritAll;
MACRO_NID NID_id_qcs;
MACRO_NID NID_id_qcs_pkixQCSyntax_v1;
MACRO_NID NID_id_qt;
MACRO_NID NID_id_qt_cps;
MACRO_NID NID_id_qt_unotice;
MACRO_NID NID_id_regCtrl;
MACRO_NID NID_id_regCtrl_authenticator;
MACRO_NID NID_id_regCtrl_oldCertID;
MACRO_NID NID_id_regCtrl_pkiArchiveOptions;
MACRO_NID NID_id_regCtrl_pkiPublicationInfo;
MACRO_NID NID_id_regCtrl_protocolEncrKey;
MACRO_NID NID_id_regCtrl_regToken;
MACRO_NID NID_id_regInfo;
MACRO_NID NID_id_regInfo_certReq;
MACRO_NID NID_id_regInfo_utf8Pairs;
MACRO_NID NID_id_set;
MACRO_NID NID_id_smime_aa;
MACRO_NID NID_id_smime_aa_contentHint;
MACRO_NID NID_id_smime_aa_contentIdentifier;
MACRO_NID NID_id_smime_aa_contentReference;
MACRO_NID NID_id_smime_aa_dvcs_dvc;
MACRO_NID NID_id_smime_aa_encapContentType;
MACRO_NID NID_id_smime_aa_encrypKeyPref;
MACRO_NID NID_id_smime_aa_equivalentLabels;
MACRO_NID NID_id_smime_aa_ets_CertificateRefs;
MACRO_NID NID_id_smime_aa_ets_RevocationRefs;
MACRO_NID NID_id_smime_aa_ets_archiveTimeStamp;
MACRO_NID NID_id_smime_aa_ets_certCRLTimestamp;
MACRO_NID NID_id_smime_aa_ets_certValues;
MACRO_NID NID_id_smime_aa_ets_commitmentType;
MACRO_NID NID_id_smime_aa_ets_contentTimestamp;
MACRO_NID NID_id_smime_aa_ets_escTimeStamp;
MACRO_NID NID_id_smime_aa_ets_otherSigCert;
MACRO_NID NID_id_smime_aa_ets_revocationValues;
MACRO_NID NID_id_smime_aa_ets_sigPolicyId;
MACRO_NID NID_id_smime_aa_ets_signerAttr;
MACRO_NID NID_id_smime_aa_ets_signerLocation;
MACRO_NID NID_id_smime_aa_macValue;
MACRO_NID NID_id_smime_aa_mlExpandHistory;
MACRO_NID NID_id_smime_aa_msgSigDigest;
MACRO_NID NID_id_smime_aa_receiptRequest;
MACRO_NID NID_id_smime_aa_securityLabel;
MACRO_NID NID_id_smime_aa_signatureType;
MACRO_NID NID_id_smime_aa_signingCertificate;
MACRO_NID NID_id_smime_aa_smimeEncryptCerts;
MACRO_NID NID_id_smime_aa_timeStampToken;
MACRO_NID NID_id_smime_alg;
MACRO_NID NID_id_smime_alg_3DESwrap;
MACRO_NID NID_id_smime_alg_CMS3DESwrap;
MACRO_NID NID_id_smime_alg_CMSRC2wrap;
MACRO_NID NID_id_smime_alg_ESDH;
MACRO_NID NID_id_smime_alg_ESDHwith3DES;
MACRO_NID NID_id_smime_alg_ESDHwithRC2;
MACRO_NID NID_id_smime_alg_RC2wrap;
MACRO_NID NID_id_smime_cd;
MACRO_NID NID_id_smime_cd_ldap;
MACRO_NID NID_id_smime_ct;
MACRO_NID NID_id_smime_ct_DVCSRequestData;
MACRO_NID NID_id_smime_ct_DVCSResponseData;
MACRO_NID NID_id_smime_ct_TDTInfo;
MACRO_NID NID_id_smime_ct_TSTInfo;
MACRO_NID NID_id_smime_ct_authData;
MACRO_NID NID_id_smime_ct_compressedData;
MACRO_NID NID_id_smime_ct_contentInfo;
MACRO_NID NID_id_smime_ct_publishCert;
MACRO_NID NID_id_smime_ct_receipt;
MACRO_NID NID_id_smime_cti;
MACRO_NID NID_id_smime_cti_ets_proofOfApproval;
MACRO_NID NID_id_smime_cti_ets_proofOfCreation;
MACRO_NID NID_id_smime_cti_ets_proofOfDelivery;
MACRO_NID NID_id_smime_cti_ets_proofOfOrigin;
MACRO_NID NID_id_smime_cti_ets_proofOfReceipt;
MACRO_NID NID_id_smime_cti_ets_proofOfSender;
MACRO_NID NID_id_smime_mod;
MACRO_NID NID_id_smime_mod_cms;
MACRO_NID NID_id_smime_mod_ess;
MACRO_NID NID_id_smime_mod_ets_eSigPolicy_88;
MACRO_NID NID_id_smime_mod_ets_eSigPolicy_97;
MACRO_NID NID_id_smime_mod_ets_eSignature_88;
MACRO_NID NID_id_smime_mod_ets_eSignature_97;
MACRO_NID NID_id_smime_mod_msg_v3;
MACRO_NID NID_id_smime_mod_oid;
MACRO_NID NID_id_smime_spq;
MACRO_NID NID_id_smime_spq_ets_sqt_unotice;
MACRO_NID NID_id_smime_spq_ets_sqt_uri;
MACRO_NID NID_idea_cbc;
MACRO_NID NID_idea_cfb64;
MACRO_NID NID_idea_ecb;
MACRO_NID NID_idea_ofb64;
MACRO_NID NID_identified_organization;
MACRO_NID NID_info;
MACRO_NID NID_info_access;
MACRO_NID NID_inhibit_any_policy;
MACRO_NID NID_initials;
MACRO_NID NID_international_organizations;
MACRO_NID NID_internationaliSDNNumber;
MACRO_NID NID_invalidity_date;
MACRO_NID NID_ipsec3;
MACRO_NID NID_ipsec4;
MACRO_NID NID_ipsecEndSystem;
MACRO_NID NID_ipsecTunnel;
MACRO_NID NID_ipsecUser;
MACRO_iso NID_iso;
MACRO_NID NID_issuer_alt_name;
MACRO_NID NID_issuing_distribution_point;
MACRO_itu_t NID_itu_t;
MACRO_NID NID_janetMailbox;
MACRO_joint_iso_ccitt NID_joint_iso_ccitt;
MACRO_joint_iso_itu_t NID_joint_iso_itu_t;
MACRO_NID NID_keyBag;
MACRO_NID NID_key_usage;
MACRO_NID NID_kisa;
MACRO_NID NID_lastModifiedBy;
MACRO_NID NID_lastModifiedTime;
MACRO_NID NID_localKeyID;
MACRO_NID NID_localityName;
MACRO_NID NID_mXRecord;
MACRO_NID NID_mailPreferenceOption;
MACRO_NID NID_manager;
MACRO_NID NID_md2;
MACRO_NID NID_md2WithRSAEncryption;
MACRO_NID NID_md4;
MACRO_NID NID_md4WithRSAEncryption;
MACRO_NID NID_md5;
MACRO_NID NID_md5WithRSA;
MACRO_NID NID_md5WithRSAEncryption;
MACRO_NID NID_md5_sha1;
MACRO_NID NID_mdc2;
MACRO_NID NID_mdc2WithRSA;
MACRO_NID NID_member;
MACRO_NID NID_member_body;
MACRO_NID NID_mime_mhs;
MACRO_NID NID_mime_mhs_bodies;
MACRO_NID NID_mime_mhs_headings;
MACRO_NID NID_mobileTelephoneNumber;
MACRO_NID NID_ms_code_com;
MACRO_NID NID_ms_code_ind;
MACRO_NID NID_ms_csp_name;
MACRO_NID NID_ms_ctl_sign;
MACRO_NID NID_ms_efs;
MACRO_NID NID_ms_ext_req;
MACRO_NID NID_ms_sgc;
MACRO_NID NID_ms_smartcard_login;
MACRO_NID NID_ms_upn;
MACRO_NID NID_nSRecord;
MACRO_NID NID_name;
MACRO_NID NID_name_constraints;
MACRO_NID NID_netscape;
MACRO_NID NID_netscape_base_url;
MACRO_NID NID_netscape_ca_policy_url;
MACRO_NID NID_netscape_ca_revocation_url;
MACRO_NID NID_netscape_cert_extension;
MACRO_NID NID_netscape_cert_sequence;
MACRO_NID NID_netscape_cert_type;
MACRO_NID NID_netscape_comment;
MACRO_NID NID_netscape_data_type;
MACRO_NID NID_netscape_renewal_url;
MACRO_NID NID_netscape_revocation_url;
MACRO_NID NID_netscape_ssl_server_name;
MACRO_NID NID_no_rev_avail;
MACRO_NID NID_ns_sgc;
MACRO_NID NID_org;
MACRO_NID NID_organizationName;
MACRO_NID NID_organizationalStatus;
MACRO_NID NID_organizationalUnitName;
MACRO_NID NID_otherMailbox;
MACRO_NID NID_owner;
MACRO_NID NID_pagerTelephoneNumber;
MACRO_NID NID_pbeWithMD2AndDES_CBC;
MACRO_NID NID_pbeWithMD2AndRC2_CBC;
MACRO_NID NID_pbeWithMD5AndCast5_CBC;
MACRO_NID NID_pbeWithMD5AndDES_CBC;
MACRO_NID NID_pbeWithMD5AndRC2_CBC;
MACRO_NID NID_pbeWithSHA1AndDES_CBC;
MACRO_NID NID_pbeWithSHA1AndRC2_CBC;
MACRO_NID NID_pbe_WithSHA1And128BitRC2_CBC;
MACRO_NID NID_pbe_WithSHA1And128BitRC4;
MACRO_NID NID_pbe_WithSHA1And2_Key_TripleDES_CBC;
MACRO_NID NID_pbe_WithSHA1And3_Key_TripleDES_CBC;
MACRO_NID NID_pbe_WithSHA1And40BitRC2_CBC;
MACRO_NID NID_pbe_WithSHA1And40BitRC4;
MACRO_NID NID_pbes2;
MACRO_NID NID_pbmac1;
MACRO_NID NID_personalSignature;
MACRO_NID NID_personalTitle;
MACRO_NID NID_photo;
MACRO_NID NID_physicalDeliveryOfficeName;
MACRO_NID NID_pilot;
MACRO_NID NID_pilotAttributeSyntax;
MACRO_NID NID_pilotAttributeType;
MACRO_NID NID_pilotAttributeType27;
MACRO_NID NID_pilotDSA;
MACRO_NID NID_pilotGroups;
MACRO_NID NID_pilotObject;
MACRO_NID NID_pilotObjectClass;
MACRO_NID NID_pilotOrganization;
MACRO_NID NID_pilotPerson;
MACRO_NID NID_pkcs;
MACRO_NID NID_pkcs1;
MACRO_NID NID_pkcs3;
MACRO_NID NID_pkcs5;
MACRO_NID NID_pkcs7;
MACRO_NID NID_pkcs7_data;
MACRO_NID NID_pkcs7_digest;
MACRO_NID NID_pkcs7_encrypted;
MACRO_NID NID_pkcs7_enveloped;
MACRO_NID NID_pkcs7_signed;
MACRO_NID NID_pkcs7_signedAndEnveloped;
MACRO_NID NID_pkcs8ShroudedKeyBag;
MACRO_NID NID_pkcs9;
MACRO_NID NID_pkcs9_challengePassword;
MACRO_NID NID_pkcs9_contentType;
MACRO_NID NID_pkcs9_countersignature;
MACRO_NID NID_pkcs9_emailAddress;
MACRO_NID NID_pkcs9_extCertAttributes;
MACRO_NID NID_pkcs9_messageDigest;
MACRO_NID NID_pkcs9_signingTime;
MACRO_NID NID_pkcs9_unstructuredAddress;
MACRO_NID NID_pkcs9_unstructuredName;
MACRO_NID NID_policy_constraints;
MACRO_NID NID_policy_mappings;
MACRO_NID NID_postOfficeBox;
MACRO_NID NID_postalAddress;
MACRO_NID NID_postalCode;
MACRO_NID NID_preferredDeliveryMethod;
MACRO_NID NID_presentationAddress;
MACRO_NID NID_private_key_usage_period;
MACRO_NID NID_protocolInformation;
MACRO_NID NID_proxyCertInfo;
MACRO_NID NID_pseudonym;
MACRO_NID NID_pss;
MACRO_NID NID_qcStatements;
MACRO_NID NID_qualityLabelledData;
MACRO_NID NID_rFC822localPart;
MACRO_NID NID_rc2_40_cbc;
MACRO_NID NID_rc2_64_cbc;
MACRO_NID NID_rc2_cbc;
MACRO_NID NID_rc2_cfb64;
MACRO_NID NID_rc2_ecb;
MACRO_NID NID_rc2_ofb64;
MACRO_NID NID_rc4;
MACRO_NID NID_rc4_40;
MACRO_NID NID_rc5_cbc;
MACRO_NID NID_rc5_cfb64;
MACRO_NID NID_rc5_ecb;
MACRO_NID NID_rc5_ofb64;
MACRO_NID NID_registeredAddress;
MACRO_NID NID_rfc822Mailbox;
MACRO_NID NID_ripemd160;
MACRO_NID NID_ripemd160WithRSA;
MACRO_NID NID_rle_compression;
MACRO_NID NID_role;
MACRO_NID NID_roleOccupant;
MACRO_NID NID_room;
MACRO_NID NID_roomNumber;
MACRO_NID NID_rsa;
MACRO_NID NID_rsaEncryption;
MACRO_NID NID_rsaOAEPEncryptionSET;
MACRO_NID NID_rsaSignature;
MACRO_NID NID_rsadsi;
MACRO_NID NID_sOARecord;
MACRO_NID NID_safeContentsBag;
MACRO_NID NID_sbgp_autonomousSysNum;
MACRO_NID NID_sbgp_ipAddrBlock;
MACRO_NID NID_sbgp_routerIdentifier;
MACRO_NID NID_sdsiCertificate;
MACRO_NID NID_searchGuide;
MACRO_NID NID_secp112r1;
MACRO_NID NID_secp112r2;
MACRO_NID NID_secp128r1;
MACRO_NID NID_secp128r2;
MACRO_NID NID_secp160k1;
MACRO_NID NID_secp160r1;
MACRO_NID NID_secp160r2;
MACRO_NID NID_secp192k1;
MACRO_NID NID_secp224k1;
MACRO_NID NID_secp224r1;
MACRO_NID NID_secp256k1;
MACRO_NID NID_secp384r1;
MACRO_NID NID_secp521r1;
MACRO_NID NID_secretBag;
MACRO_NID NID_secretary;
MACRO_NID NID_sect113r1;
MACRO_NID NID_sect113r2;
MACRO_NID NID_sect131r1;
MACRO_NID NID_sect131r2;
MACRO_NID NID_sect163k1;
MACRO_NID NID_sect163r1;
MACRO_NID NID_sect163r2;
MACRO_NID NID_sect193r1;
MACRO_NID NID_sect193r2;
MACRO_NID NID_sect233k1;
MACRO_NID NID_sect233r1;
MACRO_NID NID_sect239k1;
MACRO_NID NID_sect283k1;
MACRO_NID NID_sect283r1;
MACRO_NID NID_sect409k1;
MACRO_NID NID_sect409r1;
MACRO_NID NID_sect571k1;
MACRO_NID NID_sect571r1;
MACRO_NID NID_seeAlso;
MACRO_NID NID_seed_cbc;
MACRO_NID NID_seed_cfb128;
MACRO_NID NID_seed_ecb;
MACRO_NID NID_seed_ofb128;
MACRO_NID NID_selected_attribute_types;
MACRO_NID NID_serialNumber;
MACRO_NID NID_server_auth;
MACRO_NID NID_setAttr_Cert;
MACRO_NID NID_setAttr_GenCryptgrm;
MACRO_NID NID_setAttr_IssCap;
MACRO_NID NID_setAttr_IssCap_CVM;
MACRO_NID NID_setAttr_IssCap_Sig;
MACRO_NID NID_setAttr_IssCap_T2;
MACRO_NID NID_setAttr_PGWYcap;
MACRO_NID NID_setAttr_SecDevSig;
MACRO_NID NID_setAttr_T2Enc;
MACRO_NID NID_setAttr_T2cleartxt;
MACRO_NID NID_setAttr_TokICCsig;
MACRO_NID NID_setAttr_TokenType;
MACRO_NID NID_setAttr_Token_B0Prime;
MACRO_NID NID_setAttr_Token_EMV;
MACRO_NID NID_setCext_IssuerCapabilities;
MACRO_NID NID_setCext_PGWYcapabilities;
MACRO_NID NID_setCext_TokenIdentifier;
MACRO_NID NID_setCext_TokenType;
MACRO_NID NID_setCext_Track2Data;
MACRO_NID NID_setCext_cCertRequired;
MACRO_NID NID_setCext_certType;
MACRO_NID NID_setCext_hashedRoot;
MACRO_NID NID_setCext_merchData;
MACRO_NID NID_setCext_setExt;
MACRO_NID NID_setCext_setQualf;
MACRO_NID NID_setCext_tunneling;
MACRO_NID NID_set_addPolicy;
MACRO_NID NID_set_attr;
MACRO_NID NID_set_brand;
MACRO_NID NID_set_brand_AmericanExpress;
MACRO_NID NID_set_brand_Diners;
MACRO_NID NID_set_brand_IATA_ATA;
MACRO_NID NID_set_brand_JCB;
MACRO_NID NID_set_brand_MasterCard;
MACRO_NID NID_set_brand_Novus;
MACRO_NID NID_set_brand_Visa;
MACRO_NID NID_set_certExt;
MACRO_NID NID_set_ctype;
MACRO_NID NID_set_msgExt;
MACRO_NID NID_set_policy;
MACRO_NID NID_set_policy_root;
MACRO_NID NID_set_rootKeyThumb;
MACRO_NID NID_setct_AcqCardCodeMsg;
MACRO_NID NID_setct_AcqCardCodeMsgTBE;
MACRO_NID NID_setct_AuthReqTBE;
MACRO_NID NID_setct_AuthReqTBS;
MACRO_NID NID_setct_AuthResBaggage;
MACRO_NID NID_setct_AuthResTBE;
MACRO_NID NID_setct_AuthResTBEX;
MACRO_NID NID_setct_AuthResTBS;
MACRO_NID NID_setct_AuthResTBSX;
MACRO_NID NID_setct_AuthRevReqBaggage;
MACRO_NID NID_setct_AuthRevReqTBE;
MACRO_NID NID_setct_AuthRevReqTBS;
MACRO_NID NID_setct_AuthRevResBaggage;
MACRO_NID NID_setct_AuthRevResData;
MACRO_NID NID_setct_AuthRevResTBE;
MACRO_NID NID_setct_AuthRevResTBEB;
MACRO_NID NID_setct_AuthRevResTBS;
MACRO_NID NID_setct_AuthTokenTBE;
MACRO_NID NID_setct_AuthTokenTBS;
MACRO_NID NID_setct_BCIDistributionTBS;
MACRO_NID NID_setct_BatchAdminReqData;
MACRO_NID NID_setct_BatchAdminReqTBE;
MACRO_NID NID_setct_BatchAdminResData;
MACRO_NID NID_setct_BatchAdminResTBE;
MACRO_NID NID_setct_CRLNotificationResTBS;
MACRO_NID NID_setct_CRLNotificationTBS;
MACRO_NID NID_setct_CapReqTBE;
MACRO_NID NID_setct_CapReqTBEX;
MACRO_NID NID_setct_CapReqTBS;
MACRO_NID NID_setct_CapReqTBSX;
MACRO_NID NID_setct_CapResData;
MACRO_NID NID_setct_CapResTBE;
MACRO_NID NID_setct_CapRevReqTBE;
MACRO_NID NID_setct_CapRevReqTBEX;
MACRO_NID NID_setct_CapRevReqTBS;
MACRO_NID NID_setct_CapRevReqTBSX;
MACRO_NID NID_setct_CapRevResData;
MACRO_NID NID_setct_CapRevResTBE;
MACRO_NID NID_setct_CapTokenData;
MACRO_NID NID_setct_CapTokenSeq;
MACRO_NID NID_setct_CapTokenTBE;
MACRO_NID NID_setct_CapTokenTBEX;
MACRO_NID NID_setct_CapTokenTBS;
MACRO_NID NID_setct_CardCInitResTBS;
MACRO_NID NID_setct_CertInqReqTBS;
MACRO_NID NID_setct_CertReqData;
MACRO_NID NID_setct_CertReqTBE;
MACRO_NID NID_setct_CertReqTBEX;
MACRO_NID NID_setct_CertReqTBS;
MACRO_NID NID_setct_CertResData;
MACRO_NID NID_setct_CertResTBE;
MACRO_NID NID_setct_CredReqTBE;
MACRO_NID NID_setct_CredReqTBEX;
MACRO_NID NID_setct_CredReqTBS;
MACRO_NID NID_setct_CredReqTBSX;
MACRO_NID NID_setct_CredResData;
MACRO_NID NID_setct_CredResTBE;
MACRO_NID NID_setct_CredRevReqTBE;
MACRO_NID NID_setct_CredRevReqTBEX;
MACRO_NID NID_setct_CredRevReqTBS;
MACRO_NID NID_setct_CredRevReqTBSX;
MACRO_NID NID_setct_CredRevResData;
MACRO_NID NID_setct_CredRevResTBE;
MACRO_NID NID_setct_ErrorTBS;
MACRO_NID NID_setct_HODInput;
MACRO_NID NID_setct_MeAqCInitResTBS;
MACRO_NID NID_setct_OIData;
MACRO_NID NID_setct_PANData;
MACRO_NID NID_setct_PANOnly;
MACRO_NID NID_setct_PANToken;
MACRO_NID NID_setct_PCertReqData;
MACRO_NID NID_setct_PCertResTBS;
MACRO_NID NID_setct_PI;
MACRO_NID NID_setct_PIData;
MACRO_NID NID_setct_PIDataUnsigned;
MACRO_NID NID_setct_PIDualSignedTBE;
MACRO_NID NID_setct_PIUnsignedTBE;
MACRO_NID NID_setct_PI_TBS;
MACRO_NID NID_setct_PInitResData;
MACRO_NID NID_setct_PResData;
MACRO_NID NID_setct_RegFormReqTBE;
MACRO_NID NID_setct_RegFormResTBS;
MACRO_NID NID_setext_cv;
MACRO_NID NID_setext_genCrypt;
MACRO_NID NID_setext_miAuth;
MACRO_NID NID_setext_pinAny;
MACRO_NID NID_setext_pinSecure;
MACRO_NID NID_setext_track2;
MACRO_NID NID_sha;
MACRO_NID NID_sha1;
MACRO_NID NID_sha1WithRSA;
MACRO_NID NID_sha1WithRSAEncryption;
MACRO_NID NID_sha224;
MACRO_NID NID_sha224WithRSAEncryption;
MACRO_NID NID_sha256;
MACRO_NID NID_sha256WithRSAEncryption;
MACRO_NID NID_sha384;
MACRO_NID NID_sha384WithRSAEncryption;
MACRO_NID NID_sha512;
MACRO_NID NID_sha512WithRSAEncryption;
MACRO_NID NID_shaWithRSAEncryption;
MACRO_NID NID_simpleSecurityObject;
MACRO_NID NID_sinfo_access;
MACRO_NID NID_singleLevelQuality;
MACRO_NID NID_stateOrProvinceName;
MACRO_NID NID_streetAddress;
MACRO_NID NID_subject_alt_name;
MACRO_NID NID_subject_directory_attributes;
MACRO_NID NID_subject_key_identifier;
MACRO_NID NID_subtreeMaximumQuality;
MACRO_NID NID_subtreeMinimumQuality;
MACRO_NID NID_supportedAlgorithms;
MACRO_NID NID_supportedApplicationContext;
MACRO_NID NID_surname;
MACRO_NID NID_sxnet;
MACRO_NID NID_target_information;
MACRO_NID NID_telephoneNumber;
MACRO_NID NID_teletexTerminalIdentifier;
MACRO_NID NID_telexNumber;
MACRO_NID NID_textEncodedORAddress;
MACRO_NID NID_textNotice;
MACRO_NID NID_time_stamp;
MACRO_NID NID_title;
MACRO_NID NID_ucl;
MACRO_undef NID_undef;
MACRO_NID NID_uniqueMember;
MACRO_NID NID_userCertificate;
MACRO_NID NID_userClass;
MACRO_NID NID_userId;
MACRO_NID NID_userPassword;
MACRO_NID NID_wap;
MACRO_NID NID_wap_wsg;
MACRO_NID NID_wap_wsg_idm_ecid_wtls1;
MACRO_NID NID_wap_wsg_idm_ecid_wtls10;
MACRO_NID NID_wap_wsg_idm_ecid_wtls11;
MACRO_NID NID_wap_wsg_idm_ecid_wtls12;
MACRO_NID NID_wap_wsg_idm_ecid_wtls3;
MACRO_NID NID_wap_wsg_idm_ecid_wtls4;
MACRO_NID NID_wap_wsg_idm_ecid_wtls5;
MACRO_NID NID_wap_wsg_idm_ecid_wtls6;
MACRO_NID NID_wap_wsg_idm_ecid_wtls7;
MACRO_NID NID_wap_wsg_idm_ecid_wtls8;
MACRO_NID NID_wap_wsg_idm_ecid_wtls9;
MACRO_NID NID_whirlpool;
MACRO_NID NID_x121Address;
MACRO_NID NID_x500UniqueIdentifier;
MACRO_NID NID_x509Certificate;
MACRO_NID NID_x509Crl;
MACRO_NID NID_zlib_compression;
MACRO_NI NI_DGRAM;
MACRO_NI_QTYPE NI_FQDN_FLAG_VALIDTTL;
MACRO_NI NI_MAXHOST;
MACRO_NI NI_MAXSERV;
MACRO_NI NI_NAMEREQD;
MACRO_NI_QTYPE NI_NODEADDR_FLAG_ALL;
MACRO_NI_QTYPE NI_NODEADDR_FLAG_ANYCAST;
MACRO_NI_QTYPE NI_NODEADDR_FLAG_COMPAT;
MACRO_NI_QTYPE NI_NODEADDR_FLAG_GLOBAL;
MACRO_NI_QTYPE NI_NODEADDR_FLAG_LINKLOCAL;
MACRO_NI_QTYPE NI_NODEADDR_FLAG_SITELOCAL;
MACRO_NI_QTYPE NI_NODEADDR_FLAG_TRUNCATE;
MACRO_NI NI_NOFQDN;
MACRO_NI NI_NUMERICHOST;
MACRO_NI NI_NUMERICSERV;
MACRO_NI_QTYPE NI_QTYPE_DNSNAME;
MACRO_NI_QTYPE NI_QTYPE_FQDN;
MACRO_NI_QTYPE NI_QTYPE_IPV4ADDR;
MACRO_NI_QTYPE NI_QTYPE_NODEADDR;
MACRO_NI_QTYPE NI_QTYPE_NOOP;
MACRO_NI_QTYPE NI_QTYPE_SUPTYPES;
MACRO_NI_QTYPE NI_SUPTYPE_FLAG_COMPRESS;
MACRO_NI NI_WITHSCOPEID;
MACRO_NKE NKE_OK;
MACRO_NKE NKE_REMOVE;
MACRO_NL0 NL0;
MACRO_NL0 NL1;
MACRO_NL0 NL2;
MACRO_NL3 NL3;
MACRO_ANYP NLDELAY;
MACRO_OPOST NLDLY;
MACRO_NLM4 NLM4_CANCEL;
MACRO_NLM4 NLM4_CANCEL_MSG;
MACRO_NLM4 NLM4_CANCEL_RES;
MACRO_NLM4 NLM4_FREE_ALL;
MACRO_NLM4 NLM4_GRANTED;
MACRO_NLM4 NLM4_GRANTED_MSG;
MACRO_NLM4 NLM4_GRANTED_RES;
MACRO_NLM4 NLM4_LOCK;
MACRO_NLM4 NLM4_LOCK_MSG;
MACRO_NLM4 NLM4_LOCK_RES;
MACRO_NLM4 NLM4_NM_LOCK;
MACRO_NLM4 NLM4_SHARE;
MACRO_NLM4 NLM4_TEST;
MACRO_NLM4 NLM4_TEST_MSG;
MACRO_NLM4 NLM4_TEST_RES;
MACRO_NLM4 NLM4_UNLOCK;
MACRO_NLM4 NLM4_UNLOCK_MSG;
MACRO_NLM4 NLM4_UNLOCK_RES;
MACRO_NLM4 NLM4_UNSHARE;
MACRO_NLM NLM_CANCEL;
MACRO_NLM NLM_CANCEL_MSG;
MACRO_NLM NLM_CANCEL_RES;
MACRO_NLM NLM_FREE_ALL;
MACRO_NLM NLM_GRANTED;
MACRO_NLM NLM_GRANTED_MSG;
MACRO_NLM NLM_GRANTED_RES;
MACRO_NLM NLM_LOCK;
MACRO_NLM NLM_LOCK_MSG;
MACRO_NLM NLM_LOCK_RES;
MACRO_NLM NLM_NM_LOCK;
MACRO_NLM NLM_PROG;
MACRO_NLM NLM_SHARE;
MACRO_NLM NLM_SM;
MACRO_NLM NLM_SM_NOTIFY;
MACRO_NLM NLM_TEST;
MACRO_NLM NLM_TEST_MSG;
MACRO_NLM NLM_TEST_RES;
MACRO_NLM NLM_UNLOCK;
MACRO_NLM NLM_UNLOCK_MSG;
MACRO_NLM NLM_UNLOCK_RES;
MACRO_NLM NLM_UNSHARE;
MACRO_NLM NLM_VERS;
MACRO_NLM NLM_VERS4;
MACRO_NLM NLM_VERSX;
MACRO_NL NL_ARGMAX;
MACRO_NL_SETD NL_CAT_LOCALE;
MACRO_NL NL_LANGMAX;
MACRO_NL NL_MSGMAX;
MACRO_NL NL_NMAX;
MACRO_NL_SETD NL_SETD;
MACRO_NL NL_SETMAX;
MACRO_NL NL_TEXTMAX;
MACRO_NMBCLUSTERS NMBCLUSTERS;
MACRO_NOCRED NOCRED;
MACRO_NODEV NODEV;
MACRO_NODE NODE_IS_KEYED;
MACRO_NOEXPR NOEXPR;
MACRO_NGROUPS NOFILE;
MACRO_ALLDELAY NOFLSH;
MACRO_NOGROUP NOGROUP;
MACRO_ALLDELAY NOHANG;
MACRO_ECHOKE NOKERNINFO;
MACRO_NOP NOP;
MACRO_NORMAL NORMAL_CONFIG;
MACRO_NOSTR NOSTR;
MACRO_NOTE NOTE_ABSOLUTE;
MACRO_NOTE NOTE_ATTRIB;
MACRO_NOTE NOTE_CHILD;
MACRO_NOTE NOTE_DELETE;
MACRO_NOTE NOTE_EXEC;
MACRO_NOTE NOTE_EXIT;
MACRO_NOTE NOTE_EXITSTATUS;
MACRO_NOTE NOTE_EXTEND;
MACRO_NOTE NOTE_FFAND;
MACRO_NOTE NOTE_FFCOPY;
MACRO_NOTE NOTE_FFCTRLMASK;
MACRO_NOTE NOTE_FFLAGSMASK;
MACRO_NOTE NOTE_FFNOP;
MACRO_NOTE NOTE_FFOR;
MACRO_NOTE NOTE_FORK;
MACRO_NOTE NOTE_LINK;
MACRO_NOTE NOTE_LOWAT;
MACRO_NOTE NOTE_NONE;
MACRO_NOTE NOTE_NSECONDS;
MACRO_NOTE NOTE_PCTRLMASK;
MACRO_NOTE NOTE_PDATAMASK;
MACRO_NOTE NOTE_REAP;
MACRO_NOTE NOTE_RENAME;
MACRO_NOTE NOTE_RESOURCEEND;
MACRO_NOTE NOTE_REVOKE;
MACRO_NOTE NOTE_SECONDS;
MACRO_NOTE NOTE_SIGNAL;
MACRO_NOTE NOTE_TRACK;
MACRO_NOTE NOTE_TRACKERR;
MACRO_NOTE NOTE_TRIGGER;
MACRO_NOTE NOTE_USECONDS;
MACRO_NOTE NOTE_VM_ERROR;
MACRO_NOTE NOTE_VM_PRESSURE;
MACRO_NOTE NOTE_VM_PRESSURE_SUDDEN_TERMINATE;
MACRO_NOTE NOTE_VM_PRESSURE_TERMINATE;
MACRO_NOTE NOTE_WRITE;
MACRO_NOTIFY NOTIFY_REUSE;
MACRO_NOTIFY NOTIFY_STATUS_FAILED;
MACRO_NOTIFY NOTIFY_STATUS_INVALID_FILE;
MACRO_NOTIFY NOTIFY_STATUS_INVALID_NAME;
MACRO_NOTIFY NOTIFY_STATUS_INVALID_PORT;
MACRO_NOTIFY NOTIFY_STATUS_INVALID_REQUEST;
MACRO_NOTIFY NOTIFY_STATUS_INVALID_SIGNAL;
MACRO_NOTIFY NOTIFY_STATUS_INVALID_TOKEN;
MACRO_NOTIFY NOTIFY_STATUS_NOT_AUTHORIZED;
MACRO_NOTIFY NOTIFY_STATUS_OK;
MACRO_NOT NOT_HERE;
MACRO_NO_RECOVERY NO_ADDRESS;
MACRO_NO_RECOVERY NO_DATA;
MACRO_NO NO_JUSTIFICATION;
MACRO_NO_PUSHBACK NO_PUSHBACK;
MACRO_NO_RECOVERY NO_RECOVERY;
MACRO_SECT NO_SECT;
MACRO_NSADDIMAGE NSADDIMAGE_OPTION_MATCH_FILENAME_BY_INSTALLNAME;
MACRO_NSADDIMAGE NSADDIMAGE_OPTION_NONE;
MACRO_NSADDIMAGE NSADDIMAGE_OPTION_RETURN_ONLY_IF_LOADED;
MACRO_NSADDIMAGE NSADDIMAGE_OPTION_RETURN_ON_ERROR;
MACRO_NSADDIMAGE NSADDIMAGE_OPTION_WITH_SEARCHING;
MACRO_NSAP NSAP;
$01E72305AF8283EAA993BE6EE5BCD1F9 NSAdminApplicationDirectory;
$01E72305AF8283EAA993BE6EE5BCD1F9 NSAllApplicationsDirectory;
$349CDD1D13F7DF0473388D33C8CD4390 NSAllDomainsMask;
$01E72305AF8283EAA993BE6EE5BCD1F9 NSAllLibrariesDirectory;
$01E72305AF8283EAA993BE6EE5BCD1F9 NSApplicationDirectory;
$01E72305AF8283EAA993BE6EE5BCD1F9 NSApplicationSupportDirectory;
$01E72305AF8283EAA993BE6EE5BCD1F9 NSAutosavedInformationDirectory;
$01E72305AF8283EAA993BE6EE5BCD1F9 NSCachesDirectory;
$01E72305AF8283EAA993BE6EE5BCD1F9 NSCoreServiceDirectory;
$01E72305AF8283EAA993BE6EE5BCD1F9 NSDemoApplicationDirectory;
$01E72305AF8283EAA993BE6EE5BCD1F9 NSDesktopDirectory;
$01E72305AF8283EAA993BE6EE5BCD1F9 NSDeveloperApplicationDirectory;
$01E72305AF8283EAA993BE6EE5BCD1F9 NSDeveloperDirectory;
$01E72305AF8283EAA993BE6EE5BCD1F9 NSDocumentDirectory;
$01E72305AF8283EAA993BE6EE5BCD1F9 NSDocumentationDirectory;
$01E72305AF8283EAA993BE6EE5BCD1F9 NSDownloadsDirectory;
MACRO_NSEC NSEC_PER_MSEC;
MACRO_NSEC NSEC_PER_SEC;
MACRO_NSEC_PER NSEC_PER_USEC;
MACRO_NSIG NSIG;
$01E72305AF8283EAA993BE6EE5BCD1F9 NSInputMethodsDirectory;
MACRO_NSLC NSLC;
MACRO_NSLINKMODULE NSLINKMODULE_OPTION_BINDNOW;
MACRO_NSLINKMODULE NSLINKMODULE_OPTION_DONT_CALL_MOD_INIT_ROUTINES;
MACRO_NSLINKMODULE NSLINKMODULE_OPTION_NONE;
MACRO_NSLINKMODULE NSLINKMODULE_OPTION_PRIVATE;
MACRO_NSLINKMODULE NSLINKMODULE_OPTION_RETURN_ON_ERROR;
MACRO_NSLINKMODULE NSLINKMODULE_OPTION_TRAILING_PHYS_NAME;
MACRO_NSLOOKUPSYMBOLINIMAGE NSLOOKUPSYMBOLINIMAGE_OPTION_BIND;
MACRO_NSLOOKUPSYMBOLINIMAGE NSLOOKUPSYMBOLINIMAGE_OPTION_BIND_FULLY;
MACRO_NSLOOKUPSYMBOLINIMAGE NSLOOKUPSYMBOLINIMAGE_OPTION_BIND_NOW;
MACRO_NSLOOKUPSYMBOLINIMAGE NSLOOKUPSYMBOLINIMAGE_OPTION_RETURN_ON_ERROR;
$01E72305AF8283EAA993BE6EE5BCD1F9 NSLibraryDirectory;
$DAE851F8676BA49E7F1B3A48D3E2CAFA NSLinkEditFileAccessError;
$DAE851F8676BA49E7F1B3A48D3E2CAFA NSLinkEditFileFormatError;
$DAE851F8676BA49E7F1B3A48D3E2CAFA NSLinkEditMachResourceError;
$DAE851F8676BA49E7F1B3A48D3E2CAFA NSLinkEditMultiplyDefinedError;
$DAE851F8676BA49E7F1B3A48D3E2CAFA NSLinkEditOtherError;
$DAE851F8676BA49E7F1B3A48D3E2CAFA NSLinkEditUndefinedError;
$DAE851F8676BA49E7F1B3A48D3E2CAFA NSLinkEditUnixResourceError;
$DAE851F8676BA49E7F1B3A48D3E2CAFA NSLinkEditWarningError;
$349CDD1D13F7DF0473388D33C8CD4390 NSLocalDomainMask;
$01E72305AF8283EAA993BE6EE5BCD1F9 NSMoviesDirectory;
$01E72305AF8283EAA993BE6EE5BCD1F9 NSMusicDirectory;
$349CDD1D13F7DF0473388D33C8CD4390 NSNetworkDomainMask;
$345160C3650206BB2C3C257B2FE36FED NSObjectFileImageAccess;
$345160C3650206BB2C3C257B2FE36FED NSObjectFileImageArch;
$345160C3650206BB2C3C257B2FE36FED NSObjectFileImageFailure;
$345160C3650206BB2C3C257B2FE36FED NSObjectFileImageFormat;
$345160C3650206BB2C3C257B2FE36FED NSObjectFileImageInappropriateFile;
$345160C3650206BB2C3C257B2FE36FED NSObjectFileImageSuccess;
$56960417386CC1564F639639D8B0AEF8 NSOtherErrorIndrLoop;
$56960417386CC1564F639639D8B0AEF8 NSOtherErrorInvalidArgs;
$56960417386CC1564F639639D8B0AEF8 NSOtherErrorLazyBind;
$56960417386CC1564F639639D8B0AEF8 NSOtherErrorLazyInit;
$56960417386CC1564F639639D8B0AEF8 NSOtherErrorRelocation;
$01E72305AF8283EAA993BE6EE5BCD1F9 NSPicturesDirectory;
$01E72305AF8283EAA993BE6EE5BCD1F9 NSPreferencePanesDirectory;
$01E72305AF8283EAA993BE6EE5BCD1F9 NSPrinterDescriptionDirectory;
$01E72305AF8283EAA993BE6EE5BCD1F9 NSSharedPublicDirectory;
$349CDD1D13F7DF0473388D33C8CD4390 NSSystemDomainMask;
MACRO_NSUNLINKMODULE NSUNLINKMODULE_OPTION_KEEP_MEMORY_MAPPED;
MACRO_NSUNLINKMODULE NSUNLINKMODULE_OPTION_NONE;
MACRO_NSUNLINKMODULE NSUNLINKMODULE_OPTION_RESET_LAZY_REFERENCES;
$01E72305AF8283EAA993BE6EE5BCD1F9 NSUserDirectory;
$349CDD1D13F7DF0473388D33C8CD4390 NSUserDomainMask;
MACRO_NS NS_ALG_DH;
MACRO_NS NS_ALG_DSA;
MACRO_NS NS_ALG_DSS;
MACRO_NS NS_ALG_EXPIRE_ONLY;
MACRO_NS NS_ALG_MD5RSA;
MACRO_NS NS_ALG_PRIVATE_OID;
MACRO_NS_SSL NS_ANY_CA;
MACRO_NS NS_CMPRSFLGS;
MACRO_NS NS_DEFAULTPORT;
MACRO_NS NS_DSA_MAX_BYTES;
MACRO_NS NS_DSA_MIN_SIZE;
MACRO_NS NS_DSA_SIG_SIZE;
MACRO_NS NS_HFIXEDSZ;
MACRO_NS NS_IN6ADDRSZ;
MACRO_NS NS_INADDRSZ;
MACRO_NS NS_INT16SZ;
MACRO_NS NS_INT32SZ;
MACRO_NS NS_INT8SZ;
MACRO_NS NS_KEY_EXTENDED_FLAGS;
MACRO_NS NS_KEY_NAME_ENTITY;
MACRO_NS NS_KEY_NAME_RESERVED;
MACRO_NS NS_KEY_NAME_TYPE;
MACRO_NS NS_KEY_NAME_USER;
MACRO_NS NS_KEY_NAME_ZONE;
MACRO_NS NS_KEY_NO_AUTH;
MACRO_NS NS_KEY_NO_CONF;
MACRO_NS NS_KEY_PROT_ANY;
MACRO_NS NS_KEY_PROT_DNSSEC;
MACRO_NS NS_KEY_PROT_EMAIL;
MACRO_NS NS_KEY_PROT_IPSEC;
MACRO_NS NS_KEY_PROT_TLS;
MACRO_NS NS_KEY_RESERVED10;
MACRO_NS NS_KEY_RESERVED11;
MACRO_NS NS_KEY_RESERVED2;
MACRO_NS NS_KEY_RESERVED4;
MACRO_NS NS_KEY_RESERVED5;
MACRO_NS NS_KEY_RESERVED8;
MACRO_NS NS_KEY_RESERVED9;
MACRO_NS NS_KEY_RESERVED_BITMASK;
MACRO_NS NS_KEY_RESERVED_BITMASK2;
MACRO_NS NS_KEY_SIGNATORYMASK;
MACRO_NS NS_KEY_TYPEMASK;
MACRO_NS NS_KEY_TYPE_AUTH_CONF;
MACRO_NS NS_KEY_TYPE_AUTH_ONLY;
MACRO_NS NS_KEY_TYPE_CONF_ONLY;
MACRO_NS NS_KEY_TYPE_NO_KEY;
MACRO_NS NS_MAXCDNAME;
MACRO_NS NS_MAXDNAME;
MACRO_NS NS_MAXLABEL;
MACRO_NS NS_MD5RSA_MAX_BASE64;
MACRO_NS NS_MD5RSA_MAX_BITS;
MACRO_NS NS_MD5RSA_MAX_BYTES;
MACRO_NS NS_MD5RSA_MAX_SIZE;
MACRO_NS NS_MD5RSA_MIN_BITS;
MACRO_NS NS_MD5RSA_MIN_SIZE;
MACRO_NS NS_NXT_BITS;
MACRO_NS NS_NXT_MAX;
MACRO_NS_SSL NS_OBJSIGN;
MACRO_NS_SSL NS_OBJSIGN_CA;
MACRO_NS NS_OPT_DNSSEC_OK;
MACRO_NS NS_PACKETSZ;
MACRO_NS NS_QFIXEDSZ;
MACRO_NS NS_RRFIXEDSZ;
MACRO_NS NS_SIG_ALG;
MACRO_NS NS_SIG_EXPIR;
MACRO_NS NS_SIG_FOOT;
MACRO_NS NS_SIG_LABELS;
MACRO_NS NS_SIG_OTTL;
MACRO_NS NS_SIG_SIGNED;
MACRO_NS NS_SIG_SIGNER;
MACRO_NS NS_SIG_TYPE;
MACRO_NS_SSL NS_SMIME;
MACRO_NS_SSL NS_SMIME_CA;
MACRO_NS_SSL NS_SSL_CA;
MACRO_NS_SSL NS_SSL_CLIENT;
MACRO_NS_SSL NS_SSL_SERVER;
MACRO_NS NS_TSIG_ERROR_FORMERR;
MACRO_NS NS_TSIG_ERROR_NO_SPACE;
MACRO_NS NS_TSIG_ERROR_NO_TSIG;
MACRO_NS NS_TSIG_FUDGE;
MACRO_NS NS_TSIG_TCP_COUNT;
MACRO_NTELOPTS NTELOPTS;
MACRO_NTSID NTSID_MAX_AUTHORITIES;
MACRO_OTTYDISC NTTYDISC;
MACRO_NULL NULL;
MACRO_NULLOBJ NULLOBJ;
MACRO_NULLPROC NULLPROC;
MACRO_NULL_xdrproc NULL_xdrproc_t;
MACRO_BOOLEAN NUMBER;
MACRO_NUMCOUNT NUMCOUNT;
MACRO_NUMWRITE NUMWRITE;
MACRO_NUM_EXTERNAL NUM_EXTERNAL_FDS;
MACRO_NUM_EXTERNAL_SIGS NUM_EXTERNAL_SIGS;
MACRO_NUM NUM_PARM;
MACRO_NVMAXTEXT NVMAXTEXT;
MACRO_NXA NXA_ADD;
MACRO_NXA NXA_CHECK;
MACRO_NXA NXA_DELETE;
MACRO_NXA NXA_DELETE_ALL;
MACRO_NXA NXA_OFFLINE;
MACRO_NXA NXA_REPLACE;
MACRO_NXHF NXHF_INVALIDFH;
MACRO_NX_READONLY NX_32BITCLIENTS;
NXByteOrder NX_BigEndian;
MACRO_NX_READONLY NX_DEFAULTEXPORT;
NXByteOrder NX_LittleEndian;
MACRO_NX_READONLY NX_MAPALL;
MACRO_NX_READONLY NX_MAPROOT;
MACRO_NX NX_MAX_SEC_FLAVORS;
MACRO_NX_READONLY NX_OFFLINE;
MACRO_NX_READONLY NX_READONLY;
NXByteOrder NX_UnknownByteOrder;
MACRO_NZERO NZERO;
MACRO_N_STAB N_ABS;
MACRO_N_NO N_ARM_THUMB_DEF;
MACRO_N N_BCOMM;
MACRO_N N_BINCL;
MACRO_N_BNSYM N_BNSYM;
MACRO_N N_BSLINE;
MACRO_N_NO N_DESC_DISCARDED;
MACRO_N N_DSLINE;
MACRO_N N_ECOML;
MACRO_N N_ECOMM;
MACRO_N N_EINCL;
MACRO_N_BNSYM N_ENSYM;
MACRO_N N_ENTRY;
MACRO_N N_EXCL;
MACRO_N_STAB N_EXT;
MACRO_N N_FNAME;
MACRO_N N_FUN;
MACRO_N N_GSYM;
MACRO_N_STAB N_INDR;
MACRO_N N_LBRAC;
MACRO_N N_LCSYM;
MACRO_N N_LENG;
MACRO_N N_LSYM;
MACRO_N N_MAIN;
MACRO_N_NO N_NO_DEAD_STRIP;
MACRO_N_BNSYM N_OLEVEL;
MACRO_N_BNSYM N_OPT;
MACRO_N_BNSYM N_OSO;
MACRO_N_BNSYM N_PARAMS;
MACRO_N_STAB N_PBUD;
MACRO_N N_PC;
MACRO_N_STAB N_PEXT;
MACRO_N N_PSYM;
MACRO_N N_RBRAC;
MACRO_N_NO N_REF_TO_WEAK;
MACRO_N N_RSYM;
MACRO_N_STAB N_SECT;
MACRO_N N_SLINE;
MACRO_N N_SO;
MACRO_N N_SOL;
MACRO_N N_SSYM;
MACRO_N_STAB N_STAB;
MACRO_N N_STSYM;
MACRO_N_NO N_SYMBOL_RESOLVER;
$7BC844CA13F55C9D2AEAF3513FB7769B N_TIDY_ATTRIBS;
$8AF341AFB349B0F3EC8B21B2C315FEF7 N_TIDY_OPTIONS;
$2FDA988FD3B15DF6C5C6EE839763B6D4 N_TIDY_TAGS;
MACRO_N_STAB N_TYPE;
MACRO_N_STAB N_UNDF;
MACRO_N_BNSYM N_VERSION;
MACRO_N_NO N_WEAK_DEF;
MACRO_N_NO N_WEAK_REF;
MACRO_NeXTBSD NeXTBSD;
MACRO_NeXTBSD4 NeXTBSD4_0;
MACRO_OACK OACK;
MACRO_OARMAG1 OARMAG1;
MACRO_OARMAG2 OARMAG2;
MACRO_OBJID OBJID;
MACRO_OBJ OBJ_BSEARCH_FIRST_VALUE_ON_MATCH;
MACRO_OBJ OBJ_BSEARCH_VALUE_ON_NOMATCH;
MACRO_OBJ OBJ_F_OBJ_ADD_OBJECT;
MACRO_OBJ OBJ_F_OBJ_CREATE;
MACRO_OBJ OBJ_F_OBJ_DUP;
MACRO_OBJ OBJ_F_OBJ_NAME_NEW_INDEX;
MACRO_OBJ OBJ_F_OBJ_NID2LN;
MACRO_OBJ OBJ_F_OBJ_NID2OBJ;
MACRO_OBJ OBJ_F_OBJ_NID2SN;
MACRO_OBJ OBJ_NAME_ALIAS;
MACRO_OBJ OBJ_NAME_TYPE_CIPHER_METH;
MACRO_OBJ OBJ_NAME_TYPE_COMP_METH;
MACRO_OBJ OBJ_NAME_TYPE_MD_METH;
MACRO_OBJ OBJ_NAME_TYPE_NUM;
MACRO_OBJ OBJ_NAME_TYPE_PKEY_METH;
MACRO_OBJ OBJ_NAME_TYPE_UNDEF;
MACRO_OBJ OBJ_R_MALLOC_FAILURE;
MACRO_OBJ OBJ_R_UNKNOWN_NID;
MACRO_ccitt OBJ_ccitt;
MACRO_iso OBJ_iso;
MACRO_itu_t OBJ_itu_t;
MACRO_joint_iso_ccitt OBJ_joint_iso_ccitt;
MACRO_joint_iso_itu_t OBJ_joint_iso_itu_t;
MACRO_undef OBJ_undef;
MACRO_OPOST OCRNL;
MACRO_OCSP OCSP_DEFAULT_NONCE_LENGTH;
MACRO_OCSP_REVOKED OCSP_F_ASN1_STRING_ENCODE;
MACRO_OCSP_REVOKED OCSP_F_D2I_OCSP_NONCE;
MACRO_OCSP_REVOKED OCSP_F_OCSP_BASIC_ADD1_STATUS;
MACRO_OCSP_REVOKED OCSP_F_OCSP_BASIC_SIGN;
MACRO_OCSP_REVOKED OCSP_F_OCSP_BASIC_VERIFY;
MACRO_OCSP_REVOKED OCSP_F_OCSP_CERT_ID_NEW;
MACRO_OCSP_REVOKED OCSP_F_OCSP_CHECK_DELEGATED;
MACRO_OCSP_REVOKED OCSP_F_OCSP_CHECK_IDS;
MACRO_OCSP_REVOKED OCSP_F_OCSP_CHECK_ISSUER;
MACRO_OCSP_REVOKED OCSP_F_OCSP_CHECK_VALIDITY;
MACRO_OCSP_REVOKED OCSP_F_OCSP_MATCH_ISSUERID;
MACRO_OCSP_REVOKED OCSP_F_OCSP_PARSE_URL;
MACRO_OCSP_REVOKED OCSP_F_OCSP_REQUEST_SIGN;
MACRO_OCSP_REVOKED OCSP_F_OCSP_REQUEST_VERIFY;
MACRO_OCSP_REVOKED OCSP_F_OCSP_RESPONSE_GET1_BASIC;
MACRO_OCSP_REVOKED OCSP_F_OCSP_SENDREQ_BIO;
MACRO_OCSP_REVOKED OCSP_F_PARSE_HTTP_LINE1;
MACRO_OCSP_REVOKED OCSP_F_REQUEST_VERIFY;
MACRO_OCSP OCSP_NOCASIGN;
MACRO_OCSP OCSP_NOCERTS;
MACRO_OCSP OCSP_NOCHAIN;
MACRO_OCSP OCSP_NOCHECKS;
MACRO_OCSP OCSP_NODELEGATED;
MACRO_OCSP OCSP_NOEXPLICIT;
MACRO_OCSP OCSP_NOINTERN;
MACRO_OCSP OCSP_NOSIGS;
MACRO_OCSP OCSP_NOTIME;
MACRO_OCSP OCSP_NOVERIFY;
MACRO_OCSP OCSP_RESPID_KEY;
MACRO_OCSP OCSP_RESPONSE_STATUS_INTERNALERROR;
MACRO_OCSP OCSP_RESPONSE_STATUS_MALFORMEDREQUEST;
MACRO_OCSP OCSP_RESPONSE_STATUS_SIGREQUIRED;
MACRO_OCSP OCSP_RESPONSE_STATUS_SUCCESSFUL;
MACRO_OCSP OCSP_RESPONSE_STATUS_TRYLATER;
MACRO_OCSP OCSP_RESPONSE_STATUS_UNAUTHORIZED;
MACRO_OCSP_REVOKED OCSP_REVOKED_STATUS_AFFILIATIONCHANGED;
MACRO_OCSP_REVOKED OCSP_REVOKED_STATUS_CACOMPROMISE;
MACRO_OCSP_REVOKED OCSP_REVOKED_STATUS_CERTIFICATEHOLD;
MACRO_OCSP_REVOKED OCSP_REVOKED_STATUS_CESSATIONOFOPERATION;
MACRO_OCSP_REVOKED OCSP_REVOKED_STATUS_KEYCOMPROMISE;
MACRO_OCSP_REVOKED OCSP_REVOKED_STATUS_NOSTATUS;
MACRO_OCSP_REVOKED OCSP_REVOKED_STATUS_REMOVEFROMCRL;
MACRO_OCSP_REVOKED OCSP_REVOKED_STATUS_SUPERSEDED;
MACRO_OCSP_REVOKED OCSP_REVOKED_STATUS_UNSPECIFIED;
MACRO_OCSP_REVOKED OCSP_R_BAD_DATA;
MACRO_OCSP_REVOKED OCSP_R_CERTIFICATE_VERIFY_ERROR;
MACRO_OCSP_REVOKED OCSP_R_DIGEST_ERR;
MACRO_OCSP_REVOKED OCSP_R_ERROR_IN_NEXTUPDATE_FIELD;
MACRO_OCSP_REVOKED OCSP_R_ERROR_IN_THISUPDATE_FIELD;
MACRO_OCSP_REVOKED OCSP_R_ERROR_PARSING_URL;
MACRO_OCSP_REVOKED OCSP_R_MISSING_OCSPSIGNING_USAGE;
MACRO_OCSP_REVOKED OCSP_R_NEXTUPDATE_BEFORE_THISUPDATE;
MACRO_OCSP_REVOKED OCSP_R_NOT_BASIC_RESPONSE;
MACRO_OCSP_REVOKED OCSP_R_NO_CERTIFICATES_IN_CHAIN;
MACRO_OCSP_REVOKED OCSP_R_NO_CONTENT;
MACRO_OCSP_REVOKED OCSP_R_NO_PUBLIC_KEY;
MACRO_OCSP_REVOKED OCSP_R_NO_RESPONSE_DATA;
MACRO_OCSP_REVOKED OCSP_R_NO_REVOKED_TIME;
MACRO_OCSP_REVOKED OCSP_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE;
MACRO_OCSP_REVOKED OCSP_R_REQUEST_NOT_SIGNED;
MACRO_OCSP_REVOKED OCSP_R_RESPONSE_CONTAINS_NO_REVOCATION_DATA;
MACRO_OCSP_REVOKED OCSP_R_ROOT_CA_NOT_TRUSTED;
MACRO_OCSP_REVOKED OCSP_R_SERVER_READ_ERROR;
MACRO_OCSP_REVOKED OCSP_R_SERVER_RESPONSE_ERROR;
MACRO_OCSP_REVOKED OCSP_R_SERVER_RESPONSE_PARSE_ERROR;
MACRO_OCSP_REVOKED OCSP_R_SERVER_WRITE_ERROR;
MACRO_OCSP_REVOKED OCSP_R_SIGNATURE_FAILURE;
MACRO_OCSP_REVOKED OCSP_R_SIGNER_CERTIFICATE_NOT_FOUND;
MACRO_OCSP_REVOKED OCSP_R_STATUS_EXPIRED;
MACRO_OCSP_REVOKED OCSP_R_STATUS_NOT_YET_VALID;
MACRO_OCSP_REVOKED OCSP_R_STATUS_TOO_OLD;
MACRO_OCSP_REVOKED OCSP_R_UNKNOWN_MESSAGE_DIGEST;
MACRO_OCSP_REVOKED OCSP_R_UNKNOWN_NID;
MACRO_OCSP_REVOKED OCSP_R_UNSUPPORTED_REQUESTORNAME_TYPE;
MACRO_OCSP OCSP_TRUSTOTHER;
MACRO_ODBCVER ODBCVER;
MACRO_ODBC ODBC_ADD_DSN;
MACRO_ODBC ODBC_ADD_SYS_DSN;
MACRO_ODBC ODBC_BOTH_DSN;
MACRO_ODBC ODBC_CONFIG_DRIVER;
MACRO_ODBC ODBC_CONFIG_DRIVER_MAX;
MACRO_ODBC ODBC_CONFIG_DSN;
MACRO_ODBC ODBC_CONFIG_SYS_DSN;
MACRO_ODBC ODBC_ERROR_COMPONENT_NOT_FOUND;
MACRO_ODBC ODBC_ERROR_CREATE_DSN_FAILED;
MACRO_ODBC ODBC_ERROR_DRIVER_SPECIFIC;
MACRO_ODBC ODBC_ERROR_GENERAL_ERR;
MACRO_ODBC ODBC_ERROR_INVALID_BUFF_LEN;
MACRO_ODBC ODBC_ERROR_INVALID_DSN;
MACRO_ODBC ODBC_ERROR_INVALID_HWND;
MACRO_ODBC ODBC_ERROR_INVALID_INF;
MACRO_ODBC ODBC_ERROR_INVALID_KEYWORD_VALUE;
MACRO_ODBC ODBC_ERROR_INVALID_LOG_FILE;
MACRO_ODBC ODBC_ERROR_INVALID_NAME;
MACRO_ODBC ODBC_ERROR_INVALID_PARAM_SEQUENCE;
MACRO_ODBC ODBC_ERROR_INVALID_PATH;
MACRO_ODBC ODBC_ERROR_INVALID_REQUEST_TYPE;
MACRO_ODBC ODBC_ERROR_INVALID_STR;
MACRO_ODBC ODBC_ERROR_LOAD_LIB_FAILED;
MACRO_ODBC ODBC_ERROR_OUTPUT_STRING_TRUNCATED;
MACRO_ODBC ODBC_ERROR_OUT_OF_MEM;
MACRO_ODBC ODBC_ERROR_REMOVE_DSN_FAILED;
MACRO_ODBC ODBC_ERROR_REQUEST_FAILED;
MACRO_ODBC ODBC_ERROR_USAGE_UPDATE_FAILED;
MACRO_ODBC ODBC_ERROR_USER_CANCELED;
MACRO_ODBC ODBC_ERROR_WRITING_SYSINFO_FAILED;
MACRO_ODBC ODBC_INSTALL_COMPLETE;
MACRO_ODBC ODBC_INSTALL_DRIVER;
MACRO_ODBC ODBC_INSTALL_INQUIRY;
MACRO_ODBC ODBC_REMOVE_DEFAULT_DSN;
MACRO_ODBC ODBC_REMOVE_DRIVER;
MACRO_ODBC ODBC_REMOVE_DSN;
MACRO_ODBC ODBC_REMOVE_SYS_DSN;
MACRO_ODBC ODBC_SYSTEM_DSN;
MACRO_ODBC ODBC_USER_DSN;
MACRO_TANDEM ODDP;
MACRO_OPOST OFDEL;
MACRO_OFF OFF_MAX;
MACRO_OFF OFF_MIN;
MACRO_OPOST OFILL;
MACRO_OID OID_AUTO;
MACRO_OID OID_AUTO_START;
MACRO_OID_STASH OID_STASH_CHILDREN_SIZE;
MACRO_OK_0 OK;
MACRO_OLD OLD_ENV_VALUE;
MACRO_OLD OLD_ENV_VAR;
MACRO_BOOT OLD_TIME;
MACRO_ONE ONE_SEC;
MACRO_OPOST ONLCR;
MACRO_OPOST ONLRET;
MACRO_OPOST ONOCR;
MACRO_OPOST ONOEOT;
MACRO_OPENDEV OPENDEV_BLCK;
MACRO_OPENDEV OPENDEV_PART;
MACRO_OPENPAM OPENPAM_VERSION;
MACRO_OPENSSL_DH OPENSSL_DH_FIPS_MIN_MODULUS_BITS;
MACRO_OPENSSL_DH OPENSSL_DH_MAX_MODULUS_BITS;
MACRO_OPENSSL_DSA OPENSSL_DSA_FIPS_MIN_MODULUS_BITS;
MACRO_OPENSSL_DSA OPENSSL_DSA_MAX_MODULUS_BITS;
MACRO_OPENSSL_ECC OPENSSL_ECC_MAX_FIELD_BITS;
MACRO_OPENSSL_ECC OPENSSL_EC_NAMED_CURVE;
MACRO_OPENSSL OPENSSL_HAVE_INIT;
MACRO_OPENSSL_NO OPENSSL_NO_SHA256;
MACRO_OPENSSL_NO OPENSSL_NO_SHA512;
MACRO_OPENSSL_RSA OPENSSL_RSA_FIPS_MIN_MODULUS_BITS;
MACRO_OPENSSL_RSA OPENSSL_RSA_MAX_MODULUS_BITS;
MACRO_OPENSSL_RSA OPENSSL_RSA_MAX_PUBEXP_BITS;
MACRO_OPENSSL_RSA OPENSSL_RSA_SMALL_MODULUS_BITS;
MACRO_VERSION_NUMBER OPENSSL_VERSION_NUMBER;
MACRO_NAME OPEN_MAX;
MACRO_OPOST OPOST;
MACRO_ORDINARY ORDINARY;
$3998B369563C3E922C9C4F0BF606DBF3 OSBigEndian;
$3998B369563C3E922C9C4F0BF606DBF3 OSLittleEndian;
MACRO_OSSL OSSL_DYNAMIC_OLDEST;
MACRO_OSSL OSSL_DYNAMIC_VERSION;
MACRO_OSTYPES OSTYPES_K64_REV;
$3998B369563C3E922C9C4F0BF606DBF3 OSUnknownByteOrder;
MACRO_OS OS_SPINLOCK_INIT;
MACRO_LCRTBS OTIOCCONS;
MACRO_OTTYDISC OTTYDISC;
MACRO_OVERRIDE OVERRIDE_UNKNOWN_PERMISSIONS;
MACRO_OPOST OXTABS;
ipfw_opcodes O_ACCEPT;
MACRO_O_RDONLY O_ACCMODE;
MACRO_O_VISIBLE O_ACTIVE;
MACRO_O_POPUP O_ALERT;
MACRO_O_NONBLOCK O_APPEND;
MACRO_O_NONBLOCK O_ASYNC;
MACRO_O_VISIBLE O_AUTOSKIP;
MACRO_O_VISIBLE O_BLANK;
MACRO_O_VISIBLE O_BS_OVERLOAD;
ipfw_opcodes O_CHECK_STATE;
MACRO_O_NONBLOCK O_CLOEXEC;
ipfw_opcodes O_COUNT;
MACRO_O_NONBLOCK O_CREAT;
ipfw_opcodes O_DENY;
MACRO_O_NONBLOCK O_DIRECTORY;
ipfw_opcodes O_DIVERT;
MACRO_O O_DSYNC;
MACRO_O_VISIBLE O_EDIT;
ipfw_opcodes O_ESTAB;
MACRO_O_NONBLOCK O_EVTONLY;
MACRO_O_NONBLOCK O_EXCL;
MACRO_O_NONBLOCK O_EXLOCK;
ipfw_opcodes O_FORWARD_IP;
ipfw_opcodes O_FORWARD_MAC;
ipfw_opcodes O_FRAG;
MACRO_O_NONBLOCK O_FSYNC;
ipfw_opcodes O_GID;
ipfw_opcodes O_ICMPTYPE;
MACRO_O_ONEVALUE O_IGNORECASE;
ipfw_opcodes O_IN;
ipfw_opcodes O_IPID;
ipfw_opcodes O_IPLEN;
ipfw_opcodes O_IPOPT;
ipfw_opcodes O_IPPRECEDENCE;
ipfw_opcodes O_IPSEC;
ipfw_opcodes O_IPTOS;
ipfw_opcodes O_IPTTL;
ipfw_opcodes O_IPVER;
ipfw_opcodes O_IP_DST;
ipfw_opcodes O_IP_DSTPORT;
ipfw_opcodes O_IP_DST_MASK;
ipfw_opcodes O_IP_DST_ME;
ipfw_opcodes O_IP_DST_SET;
ipfw_opcodes O_IP_SRC;
ipfw_opcodes O_IP_SRCPORT;
ipfw_opcodes O_IP_SRC_MASK;
ipfw_opcodes O_IP_SRC_ME;
ipfw_opcodes O_IP_SRC_SET;
ipfw_opcodes O_KEEP_STATE;
ipfw_opcodes O_LAST_OPCODE;
ipfw_opcodes O_LAYER2;
ipfw_opcodes O_LIMIT;
ipfw_opcodes O_LIMIT_PARENT;
ipfw_opcodes O_LOG;
ipfw_opcodes O_MACADDR2;
ipfw_opcodes O_MAC_TYPE;
MACRO_O_NDELAY O_NDELAY;
MACRO_O_VISIBLE O_NL_OVERLOAD;
MACRO_O_NONBLOCK O_NOCTTY;
MACRO_O_NONBLOCK O_NOFOLLOW;
MACRO_O_NONBLOCK O_NONBLOCK;
MACRO_O_ONEVALUE O_NONCYCLIC;
ipfw_opcodes O_NOP;
MACRO_O_VISIBLE O_NULLOK;
MACRO_O_ONEVALUE O_ONEVALUE;
MACRO_O_VISIBLE O_PASSOK;
ipfw_opcodes O_PIPE;
MACRO_O_POPUP O_POPUP;
ipfw_opcodes O_PROB;
ipfw_opcodes O_PROBE_STATE;
ipfw_opcodes O_PROTO;
MACRO_O_VISIBLE O_PUBLIC;
ipfw_opcodes O_QUEUE;
MACRO_O_RDONLY O_RDONLY;
MACRO_O_RDONLY O_RDWR;
ipfw_opcodes O_RECV;
ipfw_opcodes O_REJECT;
MACRO_O_ONEVALUE O_ROWMAJOR;
MACRO_O_ONEVALUE O_SELECTABLE;
MACRO_O_NONBLOCK O_SHLOCK;
MACRO_O_ONEVALUE O_SHOWDESC;
MACRO_O_ONEVALUE O_SHOWMATCH;
ipfw_opcodes O_SKIPTO;
MACRO_O_VISIBLE O_STATIC;
MACRO_O_NONBLOCK O_SYMLINK;
MACRO_O O_SYNC;
ipfw_opcodes O_TCPACK;
ipfw_opcodes O_TCPFLAGS;
ipfw_opcodes O_TCPOPTS;
ipfw_opcodes O_TCPSEQ;
ipfw_opcodes O_TCPWIN;
ipfw_opcodes O_TEE;
MACRO_O_NONBLOCK O_TRUNC;
ipfw_opcodes O_UID;
ipfw_opcodes O_VERREVPATH;
ipfw_opcodes O_VIA;
MACRO_O_VISIBLE O_VISIBLE;
MACRO_O_VISIBLE O_WRAP;
MACRO_O_RDONLY O_WRONLY;
ipfw_opcodes O_XMIT;
MACRO_PACKETSZ PACKETSZ;
MACRO_PAD PAD_FAILURE;
MACRO_PAD PAD_NOTATTR;
MACRO_PAGE PAGE_MASK;
MACRO_PAGE PAGE_SHIFT;
MACRO_PAGE PAGE_SIZE;
$4BA6DADA216E0E59C0FFC2E2D871AEA3 PAM_ABORT;
$4BA6DADA216E0E59C0FFC2E2D871AEA3 PAM_ACCT_EXPIRED;
$4BA6DADA216E0E59C0FFC2E2D871AEA3 PAM_AUTHINFO_UNAVAIL;
$A6805870A19637E169CA9D300BA1FBE4 PAM_AUTHTOK;
$4BA6DADA216E0E59C0FFC2E2D871AEA3 PAM_AUTHTOK_DISABLE_AGING;
$4BA6DADA216E0E59C0FFC2E2D871AEA3 PAM_AUTHTOK_ERR;
$4BA6DADA216E0E59C0FFC2E2D871AEA3 PAM_AUTHTOK_EXPIRED;
$4BA6DADA216E0E59C0FFC2E2D871AEA3 PAM_AUTHTOK_LOCK_BUSY;
$A6805870A19637E169CA9D300BA1FBE4 PAM_AUTHTOK_PROMPT;
$4BA6DADA216E0E59C0FFC2E2D871AEA3 PAM_AUTHTOK_RECOVERY_ERR;
$4BA6DADA216E0E59C0FFC2E2D871AEA3 PAM_AUTH_ERR;
$4BA6DADA216E0E59C0FFC2E2D871AEA3 PAM_BUF_ERR;
$25E79EFADC115BB1720FA9FDCC5A52F9 PAM_CHANGE_EXPIRED_AUTHTOK;
$A6805870A19637E169CA9D300BA1FBE4 PAM_CONV;
$4BA6DADA216E0E59C0FFC2E2D871AEA3 PAM_CONV_ERR;
$4BA6DADA216E0E59C0FFC2E2D871AEA3 PAM_CRED_ERR;
$4BA6DADA216E0E59C0FFC2E2D871AEA3 PAM_CRED_EXPIRED;
$4BA6DADA216E0E59C0FFC2E2D871AEA3 PAM_CRED_INSUFFICIENT;
$4BA6DADA216E0E59C0FFC2E2D871AEA3 PAM_CRED_UNAVAIL;
$25E79EFADC115BB1720FA9FDCC5A52F9 PAM_DELETE_CRED;
$25E79EFADC115BB1720FA9FDCC5A52F9 PAM_DISALLOW_NULL_AUTHTOK;
$4BA6DADA216E0E59C0FFC2E2D871AEA3 PAM_DOMAIN_UNKNOWN;
$BB2ABB128CDE206EF4F40C2E0E9F7E66 PAM_ERROR_MSG;
$25E79EFADC115BB1720FA9FDCC5A52F9 PAM_ESTABLISH_CRED;
$4BA6DADA216E0E59C0FFC2E2D871AEA3 PAM_IGNORE;
$52D6426493297E9F8FA1631B28D1D7F5 PAM_LOG_DEBUG;
$52D6426493297E9F8FA1631B28D1D7F5 PAM_LOG_ERROR;
$52D6426493297E9F8FA1631B28D1D7F5 PAM_LOG_NOTICE;
$52D6426493297E9F8FA1631B28D1D7F5 PAM_LOG_VERBOSE;
$4BA6DADA216E0E59C0FFC2E2D871AEA3 PAM_MAXTRIES;
$BB2ABB128CDE206EF4F40C2E0E9F7E66 PAM_MAX_MSG_SIZE;
$BB2ABB128CDE206EF4F40C2E0E9F7E66 PAM_MAX_NUM_MSG;
$BB2ABB128CDE206EF4F40C2E0E9F7E66 PAM_MAX_RESP_SIZE;
$4BA6DADA216E0E59C0FFC2E2D871AEA3 PAM_MODULE_UNKNOWN;
$4BA6DADA216E0E59C0FFC2E2D871AEA3 PAM_NEW_AUTHTOK_REQD;
$4BA6DADA216E0E59C0FFC2E2D871AEA3 PAM_NO_MODULE_DATA;
$4BA6DADA216E0E59C0FFC2E2D871AEA3 PAM_NUM_ERRORS;
$A6805870A19637E169CA9D300BA1FBE4 PAM_NUM_ITEMS;
$354399D6CA6DC4E39B1228DCABD316AD PAM_NUM_PRIMITIVES;
$A6805870A19637E169CA9D300BA1FBE4 PAM_OLDAUTHTOK;
$A6805870A19637E169CA9D300BA1FBE4 PAM_OLDAUTHTOK_PROMPT;
$4BA6DADA216E0E59C0FFC2E2D871AEA3 PAM_OPEN_ERR;
$4BA6DADA216E0E59C0FFC2E2D871AEA3 PAM_PERM_DENIED;
$25E79EFADC115BB1720FA9FDCC5A52F9 PAM_PRELIM_CHECK;
$BB2ABB128CDE206EF4F40C2E0E9F7E66 PAM_PROMPT_ECHO_OFF;
$BB2ABB128CDE206EF4F40C2E0E9F7E66 PAM_PROMPT_ECHO_ON;
$25E79EFADC115BB1720FA9FDCC5A52F9 PAM_REFRESH_CRED;
$25E79EFADC115BB1720FA9FDCC5A52F9 PAM_REINITIALIZE_CRED;
$A6805870A19637E169CA9D300BA1FBE4 PAM_REPOSITORY;
$A6805870A19637E169CA9D300BA1FBE4 PAM_RHOST;
$A6805870A19637E169CA9D300BA1FBE4 PAM_RUSER;
$A6805870A19637E169CA9D300BA1FBE4 PAM_SERVICE;
$4BA6DADA216E0E59C0FFC2E2D871AEA3 PAM_SERVICE_ERR;
$4BA6DADA216E0E59C0FFC2E2D871AEA3 PAM_SESSION_ERR;
$25E79EFADC115BB1720FA9FDCC5A52F9 PAM_SILENT;
$354399D6CA6DC4E39B1228DCABD316AD PAM_SM_ACCT_MGMT;
$354399D6CA6DC4E39B1228DCABD316AD PAM_SM_AUTHENTICATE;
$354399D6CA6DC4E39B1228DCABD316AD PAM_SM_CHAUTHTOK;
$354399D6CA6DC4E39B1228DCABD316AD PAM_SM_CLOSE_SESSION;
$354399D6CA6DC4E39B1228DCABD316AD PAM_SM_OPEN_SESSION;
$354399D6CA6DC4E39B1228DCABD316AD PAM_SM_SETCRED;
$4BA6DADA216E0E59C0FFC2E2D871AEA3 PAM_SUCCESS;
$4BA6DADA216E0E59C0FFC2E2D871AEA3 PAM_SYMBOL_ERR;
$4BA6DADA216E0E59C0FFC2E2D871AEA3 PAM_SYSTEM_ERR;
$BB2ABB128CDE206EF4F40C2E0E9F7E66 PAM_TEXT_INFO;
$4BA6DADA216E0E59C0FFC2E2D871AEA3 PAM_TRY_AGAIN;
$A6805870A19637E169CA9D300BA1FBE4 PAM_TTY;
$25E79EFADC115BB1720FA9FDCC5A52F9 PAM_UPDATE_AUTHTOK;
$A6805870A19637E169CA9D300BA1FBE4 PAM_USER;
$A6805870A19637E169CA9D300BA1FBE4 PAM_USER_PROMPT;
$4BA6DADA216E0E59C0FFC2E2D871AEA3 PAM_USER_UNKNOWN;
MACRO_CS8 PARENB;
MACRO_IGNBRK PARMRK;
MACRO_CS8 PARODD;
MACRO_PACKET PARSE_PACKET;
MACRO_ALLDELAY PASS8;
MACRO_PASS PASS_MAX;
MACRO_NAME PATH_MAX;
$0AA02EF7744A92D26B678F19DE8AD812 PCAP_D_IN;
$0AA02EF7744A92D26B678F19DE8AD812 PCAP_D_INOUT;
$0AA02EF7744A92D26B678F19DE8AD812 PCAP_D_OUT;
MACRO_PCAP PCAP_ERRBUF_SIZE;
MACRO_PCAP PCAP_ERROR;
MACRO_PCAP PCAP_ERROR_ACTIVATED;
MACRO_PCAP PCAP_ERROR_BREAK;
MACRO_PCAP PCAP_ERROR_IFACE_NOT_UP;
MACRO_PCAP PCAP_ERROR_NOT_ACTIVATED;
MACRO_PCAP PCAP_ERROR_NOT_RFMON;
MACRO_PCAP PCAP_ERROR_NO_SUCH_DEVICE;
MACRO_PCAP PCAP_ERROR_PERM_DENIED;
MACRO_PCAP PCAP_ERROR_RFMON_NOTSUP;
MACRO_PCAP PCAP_IF_LOOPBACK;
MACRO_PCAP PCAP_NETMASK_UNKNOWN;
MACRO_PCAP PCAP_VERSION_MAJOR;
MACRO_PCAP PCAP_VERSION_MINOR;
MACRO_PCAP PCAP_WARNING;
MACRO_PCAP PCAP_WARNING_PROMISC_NOTSUP;
MACRO_PRIMASK PCATCH;
MACRO_ENDIAN PDP_ENDIAN;
MACRO_PRIMASK PDROP;
MACRO_PEM PEM_BUFSIZE;
MACRO_PEM PEM_DEK_DES_CBC;
MACRO_PEM PEM_DEK_DES_ECB;
MACRO_PEM PEM_DEK_DES_EDE;
MACRO_PEM PEM_DEK_IDEA_CBC;
MACRO_PEM PEM_DEK_RSA;
MACRO_PEM PEM_DEK_RSA_MD2;
MACRO_PEM PEM_DEK_RSA_MD5;
MACRO_PEM PEM_ERROR;
MACRO_PEM PEM_F_D2I_PKCS8PRIVATEKEY_BIO;
MACRO_PEM PEM_F_D2I_PKCS8PRIVATEKEY_FP;
MACRO_PEM PEM_F_DO_PK8PKEY;
MACRO_PEM PEM_F_DO_PK8PKEY_FP;
MACRO_PEM PEM_F_LOAD_IV;
MACRO_PEM PEM_F_PEM_ASN1_READ;
MACRO_PEM PEM_F_PEM_ASN1_READ_BIO;
MACRO_PEM PEM_F_PEM_ASN1_WRITE;
MACRO_PEM PEM_F_PEM_ASN1_WRITE_BIO;
MACRO_PEM PEM_F_PEM_DEF_CALLBACK;
MACRO_PEM PEM_F_PEM_DO_HEADER;
MACRO_PEM PEM_F_PEM_F_PEM_WRITE_PKCS8PRIVATEKEY;
MACRO_PEM PEM_F_PEM_GET_EVP_CIPHER_INFO;
MACRO_PEM PEM_F_PEM_PK8PKEY;
MACRO_PEM PEM_F_PEM_READ;
MACRO_PEM PEM_F_PEM_READ_BIO;
MACRO_PEM PEM_F_PEM_READ_BIO_PRIVATEKEY;
MACRO_PEM PEM_F_PEM_READ_PRIVATEKEY;
MACRO_PEM PEM_F_PEM_SEALFINAL;
MACRO_PEM PEM_F_PEM_SEALINIT;
MACRO_PEM PEM_F_PEM_SIGNFINAL;
MACRO_PEM PEM_F_PEM_WRITE;
MACRO_PEM PEM_F_PEM_WRITE_BIO;
MACRO_PEM PEM_F_PEM_X509_INFO_READ;
MACRO_PEM PEM_F_PEM_X509_INFO_READ_BIO;
MACRO_PEM PEM_F_PEM_X509_INFO_WRITE_BIO;
MACRO_PEM PEM_MD_MD2;
MACRO_PEM PEM_MD_MD2_RSA;
MACRO_PEM PEM_MD_MD5;
MACRO_PEM PEM_MD_MD5_RSA;
MACRO_PEM PEM_MD_SHA;
MACRO_PEM PEM_MD_SHA_RSA;
MACRO_PEM PEM_OBJ_CRL;
MACRO_PEM PEM_OBJ_DHPARAMS;
MACRO_PEM PEM_OBJ_DSAPARAMS;
MACRO_PEM PEM_OBJ_ECPARAMETERS;
MACRO_PEM PEM_OBJ_PRIV_DH;
MACRO_PEM PEM_OBJ_PRIV_DSA;
MACRO_PEM PEM_OBJ_PRIV_ECDSA;
MACRO_PEM PEM_OBJ_PRIV_KEY;
MACRO_PEM PEM_OBJ_PRIV_RSA;
MACRO_PEM PEM_OBJ_PRIV_RSA_PUBLIC;
MACRO_PEM PEM_OBJ_PUB_DH;
MACRO_PEM PEM_OBJ_PUB_DSA;
MACRO_PEM PEM_OBJ_PUB_ECDSA;
MACRO_PEM PEM_OBJ_PUB_RSA;
MACRO_PEM PEM_OBJ_SSL_SESSION;
MACRO_PEM PEM_OBJ_UNDEF;
MACRO_PEM PEM_OBJ_X509;
MACRO_PEM PEM_OBJ_X509_REQ;
MACRO_PEM PEM_R_BAD_BASE64_DECODE;
MACRO_PEM PEM_R_BAD_DECRYPT;
MACRO_PEM PEM_R_BAD_END_LINE;
MACRO_PEM PEM_R_BAD_IV_CHARS;
MACRO_PEM PEM_R_BAD_PASSWORD_READ;
MACRO_PEM PEM_R_ERROR_CONVERTING_PRIVATE_KEY;
MACRO_PEM PEM_R_NOT_DEK_INFO;
MACRO_PEM PEM_R_NOT_ENCRYPTED;
MACRO_PEM PEM_R_NOT_PROC_TYPE;
MACRO_PEM PEM_R_NO_START_LINE;
MACRO_PEM PEM_R_PROBLEMS_GETTING_PASSWORD;
MACRO_PEM PEM_R_PUBLIC_KEY_NO_RSA;
MACRO_PEM PEM_R_READ_KEY;
MACRO_PEM PEM_R_SHORT_HEADER;
MACRO_PEM PEM_R_UNSUPPORTED_CIPHER;
MACRO_PEM PEM_R_UNSUPPORTED_ENCRYPTION;
MACRO_PEM PEM_TYPE_CLEAR;
MACRO_PEM PEM_TYPE_ENCRYPTED;
MACRO_PEM PEM_TYPE_MIC_CLEAR;
MACRO_PEM PEM_TYPE_MIC_ONLY;
MACRO_ALLDELAY PENDIN;
MACRO_PERMISSION PERMISSION_DENIED;
MACRO_PERSIST PERSIST_TIMEOUT;
MACRO_PFKEYV2 PFKEYV2_REVISION;
MACRO_PFKEY PFKEY_SOFT_LIFETIME_RATE;
MACRO_PF PF_APPLETALK;
MACRO_PF PF_BOND;
MACRO_PF PF_CCITT;
MACRO_PF PF_CHAOS;
MACRO_PF PF_CNT;
MACRO_PF PF_COIP;
MACRO_PF PF_DATAKIT;
MACRO_PF PF_DECnet;
MACRO_PF PF_DLI;
MACRO_PF PF_ECMA;
MACRO_PF PF_HYLINK;
MACRO_PF PF_IMPLINK;
MACRO_PF PF_INET;
MACRO_PF PF_INET6;
MACRO_PF PF_IPX;
MACRO_PF PF_ISDN;
MACRO_PF PF_ISO;
MACRO_PF PF_KEY;
MACRO_PF_KEY PF_KEY_V2;
MACRO_PF PF_LAT;
MACRO_PF PF_LINK;
MACRO_PF PF_LOCAL;
MACRO_PF PF_MAX;
MACRO_PF PF_NATM;
MACRO_PF PF_NDRV;
MACRO_PF PF_NETBIOS;
MACRO_PF PF_NS;
MACRO_PF PF_OSI;
MACRO_PF PF_PIP;
MACRO_PF PF_PPP;
MACRO_PF PF_PUP;
MACRO_PF PF_RESERVED_36;
MACRO_PF PF_ROUTE;
MACRO_PF PF_RTIP;
MACRO_PF PF_SIP;
MACRO_PF PF_SNA;
MACRO_PF PF_SYSTEM;
MACRO_PF PF_UNIX;
MACRO_PF PF_UNSPEC;
MACRO_PF PF_VLAN;
MACRO_PF PF_XTP;
MACRO_PGOFSET PGOFSET;
MACRO_PGSHIFT PGSHIFT;
MACRO_PIDLOCK PIDLOCK_NONBLOCK;
MACRO_PIDLOCK PIDLOCK_USEHOSTNAME;
MACRO_PSWP PINOD;
MACRO_PIPENPAGES PIPENPAGES;
MACRO_PIPE_ASYNC PIPE_ASYNC;
MACRO_PIPE PIPE_BUF;
MACRO_PIPE_ASYNC PIPE_DEAD;
MACRO_PIPE_ASYNC PIPE_DIRECTOK;
MACRO_PIPE_ASYNC PIPE_DIRECTW;
MACRO_PIPE_ASYNC PIPE_DRAIN;
MACRO_PIPE_ASYNC PIPE_EOF;
MACRO_PIPE_ASYNC PIPE_KNOTE;
MACRO_PIPE_ASYNC PIPE_LOCKFL;
MACRO_PIPE_ASYNC PIPE_LWANT;
MACRO_PIPE_MINDIRECT PIPE_MINDIRECT;
MACRO_PIPE_ASYNC PIPE_SEL;
MACRO_PIPE_SIZE PIPE_SIZE;
MACRO_PIPE_ASYNC PIPE_WANT;
MACRO_PIPE_ASYNC PIPE_WANTR;
MACRO_PIPE_ASYNC PIPE_WANTW;
MACRO_PIPE_ASYNC PIPE_WSELECT;
MACRO_PKCS12 PKCS12_DEFAULT_ITER;
MACRO_PKCS12_ERROR PKCS12_ERROR;
MACRO_PKCS12_ERROR PKCS12_F_PARSE_BAG;
MACRO_PKCS12_ERROR PKCS12_F_PARSE_BAGS;
MACRO_PKCS12_ERROR PKCS12_F_PKCS12_ADD_FRIENDLYNAME;
MACRO_PKCS12_ERROR PKCS12_F_PKCS12_ADD_FRIENDLYNAME_ASC;
MACRO_PKCS12_ERROR PKCS12_F_PKCS12_ADD_FRIENDLYNAME_UNI;
MACRO_PKCS12_ERROR PKCS12_F_PKCS12_ADD_LOCALKEYID;
MACRO_PKCS12_ERROR PKCS12_F_PKCS12_CREATE;
MACRO_PKCS12_ERROR PKCS12_F_PKCS12_GEN_MAC;
MACRO_PKCS12_ERROR PKCS12_F_PKCS12_INIT;
MACRO_PKCS12_ERROR PKCS12_F_PKCS12_ITEM_DECRYPT_D2I;
MACRO_PKCS12_ERROR PKCS12_F_PKCS12_ITEM_I2D_ENCRYPT;
MACRO_PKCS12_ERROR PKCS12_F_PKCS12_ITEM_PACK_SAFEBAG;
MACRO_PKCS12_ERROR PKCS12_F_PKCS12_KEY_GEN_ASC;
MACRO_PKCS12_ERROR PKCS12_F_PKCS12_KEY_GEN_UNI;
MACRO_PKCS12_ERROR PKCS12_F_PKCS12_MAKE_KEYBAG;
MACRO_PKCS12_ERROR PKCS12_F_PKCS12_MAKE_SHKEYBAG;
MACRO_PKCS12_ERROR PKCS12_F_PKCS12_NEWPASS;
MACRO_PKCS12_ERROR PKCS12_F_PKCS12_PACK_P7DATA;
MACRO_PKCS12_ERROR PKCS12_F_PKCS12_PACK_P7ENCDATA;
MACRO_PKCS12_ERROR PKCS12_F_PKCS12_PARSE;
MACRO_PKCS12_ERROR PKCS12_F_PKCS12_PBE_CRYPT;
MACRO_PKCS12_ERROR PKCS12_F_PKCS12_PBE_KEYIVGEN;
MACRO_PKCS12_ERROR PKCS12_F_PKCS12_SETUP_MAC;
MACRO_PKCS12_ERROR PKCS12_F_PKCS12_SET_MAC;
MACRO_PKCS12_ERROR PKCS12_F_PKCS12_UNPACK_AUTHSAFES;
MACRO_PKCS12_ERROR PKCS12_F_PKCS12_UNPACK_P7DATA;
MACRO_PKCS12_ERROR PKCS12_F_PKCS12_VERIFY_MAC;
MACRO_PKCS12_ERROR PKCS12_F_PKCS8_ADD_KEYUSAGE;
MACRO_PKCS12_ERROR PKCS12_F_PKCS8_ENCRYPT;
MACRO_PKCS12 PKCS12_IV_ID;
MACRO_PKCS12 PKCS12_KEY_ID;
MACRO_PKCS12 PKCS12_MAC_ID;
MACRO_PKCS12 PKCS12_MAC_KEY_LENGTH;
MACRO_PKCS12_ERROR PKCS12_OK;
MACRO_PKCS12_ERROR PKCS12_R_CANT_PACK_STRUCTURE;
MACRO_PKCS12_ERROR PKCS12_R_CONTENT_TYPE_NOT_DATA;
MACRO_PKCS12_ERROR PKCS12_R_DECODE_ERROR;
MACRO_PKCS12_ERROR PKCS12_R_ENCODE_ERROR;
MACRO_PKCS12_ERROR PKCS12_R_ENCRYPT_ERROR;
MACRO_PKCS12_ERROR PKCS12_R_ERROR_SETTING_ENCRYPTED_DATA_TYPE;
MACRO_PKCS12_ERROR PKCS12_R_INVALID_NULL_ARGUMENT;
MACRO_PKCS12_ERROR PKCS12_R_INVALID_NULL_PKCS12_POINTER;
MACRO_PKCS12_ERROR PKCS12_R_IV_GEN_ERROR;
MACRO_PKCS12_ERROR PKCS12_R_KEY_GEN_ERROR;
MACRO_PKCS12_ERROR PKCS12_R_MAC_ABSENT;
MACRO_PKCS12_ERROR PKCS12_R_MAC_GENERATION_ERROR;
MACRO_PKCS12_ERROR PKCS12_R_MAC_SETUP_ERROR;
MACRO_PKCS12_ERROR PKCS12_R_MAC_STRING_SET_ERROR;
MACRO_PKCS12_ERROR PKCS12_R_MAC_VERIFY_ERROR;
MACRO_PKCS12_ERROR PKCS12_R_MAC_VERIFY_FAILURE;
MACRO_PKCS12_ERROR PKCS12_R_PARSE_ERROR;
MACRO_PKCS12_ERROR PKCS12_R_PKCS12_ALGOR_CIPHERINIT_ERROR;
MACRO_PKCS12_ERROR PKCS12_R_PKCS12_CIPHERFINAL_ERROR;
MACRO_PKCS12_ERROR PKCS12_R_PKCS12_PBE_CRYPT_ERROR;
MACRO_PKCS12_ERROR PKCS12_R_UNKNOWN_DIGEST_ALGORITHM;
MACRO_PKCS12_ERROR PKCS12_R_UNSUPPORTED_PKCS12_MODE;
MACRO_PKCS12 PKCS12_SALT_LEN;
MACRO_PKCS5 PKCS5_DEFAULT_ITER;
MACRO_PKCS5 PKCS5_SALT_LEN;
MACRO_PKCS7 PKCS7_BINARY;
MACRO_PKCS7 PKCS7_CRLFEOL;
MACRO_PKCS7 PKCS7_DETACHED;
MACRO_PKCS7_F PKCS7_F_B64_READ_PKCS7;
MACRO_PKCS7_F PKCS7_F_B64_WRITE_PKCS7;
MACRO_PKCS7_F PKCS7_F_PKCS7_ADD_ATTRIB_SMIMECAP;
MACRO_PKCS7_F PKCS7_F_PKCS7_ADD_CERTIFICATE;
MACRO_PKCS7_F PKCS7_F_PKCS7_ADD_CRL;
MACRO_PKCS7_F PKCS7_F_PKCS7_ADD_RECIPIENT_INFO;
MACRO_PKCS7_F PKCS7_F_PKCS7_ADD_SIGNER;
MACRO_PKCS7_F PKCS7_F_PKCS7_BIO_ADD_DIGEST;
MACRO_PKCS7_F PKCS7_F_PKCS7_CTRL;
MACRO_PKCS7_F PKCS7_F_PKCS7_DATADECODE;
MACRO_PKCS7_F PKCS7_F_PKCS7_DATAFINAL;
MACRO_PKCS7_F PKCS7_F_PKCS7_DATAINIT;
MACRO_PKCS7_F PKCS7_F_PKCS7_DATASIGN;
MACRO_PKCS7_F PKCS7_F_PKCS7_DATAVERIFY;
MACRO_PKCS7_F PKCS7_F_PKCS7_DECRYPT;
MACRO_PKCS7_F PKCS7_F_PKCS7_ENCRYPT;
MACRO_PKCS7_F PKCS7_F_PKCS7_FIND_DIGEST;
MACRO_PKCS7_F PKCS7_F_PKCS7_GET0_SIGNERS;
MACRO_PKCS7_F PKCS7_F_PKCS7_SET_CIPHER;
MACRO_PKCS7_F PKCS7_F_PKCS7_SET_CONTENT;
MACRO_PKCS7_F PKCS7_F_PKCS7_SET_DIGEST;
MACRO_PKCS7_F PKCS7_F_PKCS7_SET_TYPE;
MACRO_PKCS7_F PKCS7_F_PKCS7_SIGN;
MACRO_PKCS7_F PKCS7_F_PKCS7_SIGNATUREVERIFY;
MACRO_PKCS7_F PKCS7_F_PKCS7_SIMPLE_SMIMECAP;
MACRO_PKCS7_F PKCS7_F_PKCS7_VERIFY;
MACRO_PKCS7_F PKCS7_F_SMIME_READ_PKCS7;
MACRO_PKCS7_F PKCS7_F_SMIME_TEXT;
MACRO_PKCS7 PKCS7_NOATTR;
MACRO_PKCS7 PKCS7_NOCERTS;
MACRO_PKCS7 PKCS7_NOCHAIN;
MACRO_PKCS7 PKCS7_NOCRL;
MACRO_PKCS7 PKCS7_NOINTERN;
MACRO_PKCS7 PKCS7_NOOLDMIMETYPE;
MACRO_PKCS7 PKCS7_NOSIGS;
MACRO_PKCS7 PKCS7_NOSMIMECAP;
MACRO_PKCS7 PKCS7_NOVERIFY;
MACRO_PKCS7 PKCS7_OP_GET_DETACHED_SIGNATURE;
MACRO_PKCS7 PKCS7_OP_SET_DETACHED_SIGNATURE;
MACRO_PKCS7_F PKCS7_R_CERTIFICATE_VERIFY_ERROR;
MACRO_PKCS7_F PKCS7_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER;
MACRO_PKCS7_F PKCS7_R_CIPHER_NOT_INITIALIZED;
MACRO_PKCS7_F PKCS7_R_CONTENT_AND_DATA_PRESENT;
MACRO_PKCS7_F PKCS7_R_DECODE_ERROR;
MACRO_PKCS7_F PKCS7_R_DECRYPTED_KEY_IS_WRONG_LENGTH;
MACRO_PKCS7_F PKCS7_R_DECRYPT_ERROR;
MACRO_PKCS7_F PKCS7_R_DIGEST_FAILURE;
MACRO_PKCS7_F PKCS7_R_ERROR_ADDING_RECIPIENT;
MACRO_PKCS7_F PKCS7_R_ERROR_SETTING_CIPHER;
MACRO_PKCS7_F PKCS7_R_INVALID_MIME_TYPE;
MACRO_PKCS7_F PKCS7_R_INVALID_NULL_POINTER;
MACRO_PKCS7_F PKCS7_R_MIME_NO_CONTENT_TYPE;
MACRO_PKCS7_F PKCS7_R_MIME_PARSE_ERROR;
MACRO_PKCS7_F PKCS7_R_MIME_SIG_PARSE_ERROR;
MACRO_PKCS7_F PKCS7_R_MISSING_CERIPEND_INFO;
MACRO_PKCS7_F PKCS7_R_NO_CONTENT;
MACRO_PKCS7_F PKCS7_R_NO_CONTENT_TYPE;
MACRO_PKCS7_F PKCS7_R_NO_MULTIPART_BODY_FAILURE;
MACRO_PKCS7_F PKCS7_R_NO_MULTIPART_BOUNDARY;
MACRO_PKCS7_F PKCS7_R_NO_RECIPIENT_MATCHES_CERTIFICATE;
MACRO_PKCS7_F PKCS7_R_NO_RECIPIENT_MATCHES_KEY;
MACRO_PKCS7_F PKCS7_R_NO_SIGNATURES_ON_DATA;
MACRO_PKCS7_F PKCS7_R_NO_SIGNERS;
MACRO_PKCS7_F PKCS7_R_NO_SIG_CONTENT_TYPE;
MACRO_PKCS7_F PKCS7_R_OPERATION_NOT_SUPPORTED_ON_THIS_TYPE;
MACRO_PKCS7_F PKCS7_R_PKCS7_ADD_SIGNATURE_ERROR;
MACRO_PKCS7_F PKCS7_R_PKCS7_DATAFINAL;
MACRO_PKCS7_F PKCS7_R_PKCS7_DATAFINAL_ERROR;
MACRO_PKCS7_F PKCS7_R_PKCS7_DATASIGN;
MACRO_PKCS7_F PKCS7_R_PKCS7_PARSE_ERROR;
MACRO_PKCS7_F PKCS7_R_PKCS7_SIG_PARSE_ERROR;
MACRO_PKCS7_F PKCS7_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE;
MACRO_PKCS7_F PKCS7_R_SIGNATURE_FAILURE;
MACRO_PKCS7_F PKCS7_R_SIGNER_CERTIFICATE_NOT_FOUND;
MACRO_PKCS7_F PKCS7_R_SIG_INVALID_MIME_TYPE;
MACRO_PKCS7_F PKCS7_R_SMIME_TEXT_ERROR;
MACRO_PKCS7_F PKCS7_R_UNABLE_TO_FIND_CERTIFICATE;
MACRO_PKCS7_F PKCS7_R_UNABLE_TO_FIND_MEM_BIO;
MACRO_PKCS7_F PKCS7_R_UNABLE_TO_FIND_MESSAGE_DIGEST;
MACRO_PKCS7_F PKCS7_R_UNKNOWN_DIGEST_TYPE;
MACRO_PKCS7_F PKCS7_R_UNKNOWN_OPERATION;
MACRO_PKCS7_F PKCS7_R_UNSUPPORTED_CIPHER_TYPE;
MACRO_PKCS7_F PKCS7_R_UNSUPPORTED_CONTENT_TYPE;
MACRO_PKCS7_F PKCS7_R_WRONG_CONTENT_TYPE;
MACRO_PKCS7_F PKCS7_R_WRONG_PKCS7_TYPE;
MACRO_PKCS7 PKCS7_STREAM;
MACRO_PKCS7 PKCS7_S_BODY;
MACRO_PKCS7 PKCS7_S_HEADER;
MACRO_PKCS7 PKCS7_S_TAIL;
MACRO_PKCS7 PKCS7_TEXT;
MACRO_PKCS8 PKCS8_EMBEDDED_PARAM;
MACRO_PKCS8 PKCS8_NO_OCTET;
MACRO_PKCS8 PKCS8_NS_DB;
MACRO_PKCS8 PKCS8_OK;
MACRO_DIRSTRING PKCS9STRING_TYPE;
MACRO_PKTSIZE PKTSIZE;
MACRO_PLOCK PLOCK;
MACRO_PMAPPORT PMAPPORT;
MACRO_PMAPPROC PMAPPROC_CALLIT;
MACRO_PMAPPROC PMAPPROC_DUMP;
MACRO_PMAPPROC PMAPPROC_GETPORT;
MACRO_PMAPPROC PMAPPROC_NULL;
MACRO_PMAPPROC PMAPPROC_SET;
MACRO_PMAPPROC PMAPPROC_UNSET;
MACRO_PMAPPROG PMAPPROG;
MACRO_PMAPVERS PMAPVERS;
MACRO_PMAPVERS_PROTO PMAPVERS_ORIG;
MACRO_PMAPVERS_PROTO PMAPVERS_PROTO;
MACRO_PMAP PMAP__ATTRIBUTE_CLEAR;
MACRO_PMAP PMAP__CREATE;
MACRO_PMAP PMAP__DESTROY;
MACRO_PMAP PMAP__ENTER;
MACRO_PMAP PMAP__FLUSH_TLBS;
MACRO_PMAP PMAP__NEST;
MACRO_PMAP PMAP__PAGE_PROTECT;
MACRO_PMAP PMAP__PROTECT;
MACRO_PMAP PMAP__REMOVE;
MACRO_PMAP PMAP__UNNEST;
MACRO_PMAP PMAP__UPDATE_INTERRUPT;
MACRO_STR PM_STR;
$F236BFF0AA67B00384F80E74B2E93967 POINT_CONVERSION_COMPRESSED;
$F236BFF0AA67B00384F80E74B2E93967 POINT_CONVERSION_HYBRID;
$F236BFF0AA67B00384F80E74B2E93967 POINT_CONVERSION_UNCOMPRESSED;
MACRO_POLICYCLASS POLICYCLASS_FIXEDPRI;
MACRO_POLICY POLICY_FIFO;
MACRO_POLICY POLICY_NULL;
MACRO_POLICY POLICY_RR;
MACRO_POLICY POLICY_TIMESHARE;
MACRO_POLLWRNORM POLLATTRIB;
MACRO_POLLERR POLLERR;
MACRO_POLLWRNORM POLLEXTEND;
MACRO_POLLERR POLLHUP;
MACRO_POLLIN POLLIN;
MACRO_POLLWRNORM POLLNLINK;
MACRO_POLLERR POLLNVAL;
MACRO_POLLIN POLLOUT;
MACRO_POLLIN POLLPRI;
MACRO_POLLWRNORM POLLRDBAND;
MACRO_POLLIN POLLRDNORM;
MACRO_POLLSTANDARD POLLSTANDARD;
MACRO_POLLWRNORM POLLWRBAND;
MACRO_POLLWRNORM POLLWRITE;
MACRO_POLLWRNORM POLLWRNORM;
MACRO_POLL POLL_ERR;
MACRO_POLL POLL_HUP;
MACRO_POLL POLL_IN;
MACRO_POLL POLL_MSG;
MACRO_POLL POLL_OUT;
MACRO_POLL POLL_PRI;
MACRO_POSIX POSIX_MADV_DONTNEED;
MACRO_POSIX POSIX_MADV_NORMAL;
MACRO_POSIX POSIX_MADV_RANDOM;
MACRO_POSIX POSIX_MADV_SEQUENTIAL;
MACRO_POSIX POSIX_MADV_WILLNEED;
MACRO_POSIX_SPAWN POSIX_SPAWN_CLOEXEC_DEFAULT;
MACRO_POSIX_SPAWN POSIX_SPAWN_PCONTROL_KILL;
MACRO_POSIX_SPAWN POSIX_SPAWN_PCONTROL_NONE;
MACRO_POSIX_SPAWN POSIX_SPAWN_PCONTROL_SUSPEND;
MACRO_POSIX_SPAWN POSIX_SPAWN_PCONTROL_THROTTLE;
MACRO_POSIX_SPAWN POSIX_SPAWN_RESETIDS;
MACRO_POSIX_SPAWN POSIX_SPAWN_SETEXEC;
MACRO_POSIX_SPAWN POSIX_SPAWN_SETPGROUP;
MACRO_POSIX_SPAWN POSIX_SPAWN_SETSIGDEF;
MACRO_POSIX_SPAWN POSIX_SPAWN_SETSIGMASK;
MACRO_POSIX_SPAWN POSIX_SPAWN_START_SUSPENDED;
MACRO_PPAUSE PPAUSE;
ppd_status_e PPD_ALLOC_ERROR;
ppd_status_e PPD_BAD_CUSTOM_PARAM;
ppd_status_e PPD_BAD_OPEN_GROUP;
ppd_status_e PPD_BAD_OPEN_UI;
ppd_status_e PPD_BAD_ORDER_DEPENDENCY;
ppd_status_e PPD_BAD_UI_CONSTRAINTS;
ppd_status_e PPD_BAD_VALUE;
ppd_conform_e PPD_CONFORM_RELAXED;
ppd_conform_e PPD_CONFORM_STRICT;
ppd_cs_e PPD_CS_CMY;
ppd_cs_e PPD_CS_CMYK;
ppd_cs_e PPD_CS_GRAY;
ppd_cs_e PPD_CS_N;
ppd_cs_e PPD_CS_RGB;
ppd_cs_e PPD_CS_RGBK;
ppd_cptype_e PPD_CUSTOM_CURVE;
ppd_cptype_e PPD_CUSTOM_INT;
ppd_cptype_e PPD_CUSTOM_INVCURVE;
ppd_cptype_e PPD_CUSTOM_PASSCODE;
ppd_cptype_e PPD_CUSTOM_PASSWORD;
ppd_cptype_e PPD_CUSTOM_POINTS;
ppd_cptype_e PPD_CUSTOM_REAL;
ppd_cptype_e PPD_CUSTOM_STRING;
ppd_status_e PPD_FILE_OPEN_ERROR;
ppd_status_e PPD_ILLEGAL_CHARACTER;
ppd_status_e PPD_ILLEGAL_MAIN_KEYWORD;
ppd_status_e PPD_ILLEGAL_OPTION_KEYWORD;
ppd_status_e PPD_ILLEGAL_TRANSLATION;
ppd_status_e PPD_ILLEGAL_WHITESPACE;
ppd_status_e PPD_INTERNAL_ERROR;
ppd_status_e PPD_LINE_TOO_LONG;
MACRO_PPD PPD_MAX_LINE;
MACRO_PPD PPD_MAX_NAME;
ppd_status_e PPD_MAX_STATUS;
MACRO_PPD PPD_MAX_TEXT;
ppd_status_e PPD_MISSING_ASTERISK;
ppd_status_e PPD_MISSING_CLOSE_GROUP;
ppd_status_e PPD_MISSING_OPTION_KEYWORD;
ppd_status_e PPD_MISSING_PPDADOBE4;
ppd_status_e PPD_MISSING_VALUE;
ppd_status_e PPD_NESTED_OPEN_GROUP;
ppd_status_e PPD_NESTED_OPEN_UI;
ppd_status_e PPD_NULL_FILE;
ppd_status_e PPD_OK;
ppd_section_e PPD_ORDER_ANY;
ppd_section_e PPD_ORDER_DOCUMENT;
ppd_section_e PPD_ORDER_EXIT;
ppd_section_e PPD_ORDER_JCL;
ppd_section_e PPD_ORDER_PAGE;
ppd_section_e PPD_ORDER_PROLOG;
ppd_ui_e PPD_UI_BOOLEAN;
ppd_ui_e PPD_UI_PICKMANY;
ppd_ui_e PPD_UI_PICKONE;
MACRO_PPNUM PPNUM_MAX;
MACRO_PPPDISC PPPDISC;
passpolicyerror_enum PP_accountLocked;
passpolicyerror_enum PP_changeAfterReset;
passpolicyerror_enum PP_insufficientPasswordQuality;
passpolicyerror_enum PP_mustSupplyOldPassword;
passpolicyerror_enum PP_noError;
passpolicyerror_enum PP_passwordExpired;
passpolicyerror_enum PP_passwordInHistory;
passpolicyerror_enum PP_passwordModNotAllowed;
passpolicyerror_enum PP_passwordTooShort;
passpolicyerror_enum PP_passwordTooYoung;
MACRO_PQ PQ_64BIT_IS_BIGNUM;
MACRO_PQ PQ_64BIT_IS_INTEGER;
MACRO_PREALLOCATE PREALLOCATE;
MACRO_PRELIM PRELIM;
MACRO_NORMAL PREMIB_CONFIG;
MACRO_PRESERVE PRESERVE_FILE_TIMES;
MACRO_PSWP PRIBIO;
MACRO_PRIMASK PRIMASK;
MACRO_PRIO PRIO_DARWIN_BG;
MACRO_PRIO PRIO_DARWIN_NONUI;
MACRO_PRIO PRIO_DARWIN_PROCESS;
MACRO_PRIO PRIO_DARWIN_THREAD;
MACRO_PRIO PRIO_MAX;
MACRO_PRIO PRIO_MIN;
MACRO_PRIO PRIO_PGRP;
MACRO_PRIO PRIO_PROCESS;
MACRO_PRIO PRIO_USER;
MACRO_PROCESSOR PROCESSOR_BASIC_INFO;
MACRO_PROCESSOR PROCESSOR_CPU_LOAD_INFO;
MACRO_PROCESSOR PROCESSOR_INFO_MAX;
MACRO_THREAD_NULL PROCESSOR_NULL;
MACRO_PROCESSOR PROCESSOR_PM_REGS_INFO;
MACRO_PROCESSOR_SET PROCESSOR_SET_BASIC_INFO;
MACRO_PROCESSOR PROCESSOR_SET_INFO_MAX;
MACRO_PROCESSOR_SET PROCESSOR_SET_LOAD_INFO;
MACRO_THREAD_NULL PROCESSOR_SET_NULL;
MACRO_PROCESSOR PROCESSOR_TEMPERATURE;
MACRO_PROC PROC_ALL_PIDS;
MACRO_PROC PROC_FLAG_CONTROLT;
MACRO_PROC PROC_FLAG_CTTY;
MACRO_PROC PROC_FLAG_EXEC;
MACRO_PROC PROC_FLAG_INEXIT;
MACRO_PROC PROC_FLAG_LP64;
MACRO_PROC PROC_FLAG_PA_SUSP;
MACRO_PROC PROC_FLAG_PA_THROTTLE;
MACRO_PROC PROC_FLAG_PC_KILL;
MACRO_PROC PROC_FLAG_PC_MASK;
MACRO_PROC PROC_FLAG_PC_SUSP;
MACRO_PROC PROC_FLAG_PC_THROTTLE;
MACRO_PROC PROC_FLAG_PPWAIT;
MACRO_PROC PROC_FLAG_PSUGID;
MACRO_PROC PROC_FLAG_SLEADER;
MACRO_PROC PROC_FLAG_SYSTEM;
MACRO_PROC PROC_FLAG_THCWD;
MACRO_PROC PROC_FLAG_TRACED;
MACRO_PROC_FP PROC_FP_CLEXEC;
MACRO_PROC_FP PROC_FP_SHARED;
MACRO_PROC_KQUEUE PROC_KQUEUE_SELECT;
MACRO_PROC_KQUEUE PROC_KQUEUE_SLEEP;
MACRO_PROC_PIDLISTFDS PROC_LISTPIDSPATH_EXCLUDE_EVTONLY;
MACRO_PROC_PIDLISTFDS PROC_LISTPIDSPATH_PATH_IS_VOLUME;
MACRO_PROC PROC_PGRP_ONLY;
MACRO_PROC_PIDLISTFDS PROC_PIDFDATALKINFO;
MACRO_PROC_PIDLISTFDS PROC_PIDFDKQUEUEINFO;
MACRO_PROC_PIDLISTFDS PROC_PIDFDPIPEINFO;
MACRO_PROC_PIDLISTFDS PROC_PIDFDPSEMINFO;
MACRO_PROC_PIDLISTFDS PROC_PIDFDPSHMINFO;
MACRO_PROC_PIDLISTFDS PROC_PIDFDSOCKETINFO;
MACRO_PROC_PIDLISTFDS PROC_PIDFDVNODEINFO;
MACRO_PROC_PIDLISTFDS PROC_PIDFDVNODEPATHINFO;
MACRO_PROC_PIDLISTFDS PROC_PIDFILEPORTPIPEINFO;
MACRO_PROC_PIDLISTFDS PROC_PIDFILEPORTPSHMINFO;
MACRO_PROC_PIDLISTFDS PROC_PIDFILEPORTSOCKETINFO;
MACRO_PROC_PIDLISTFDS PROC_PIDFILEPORTVNODEPATHINFO;
MACRO_PROC_PIDLISTFDS PROC_PIDLISTFDS;
MACRO_PROC_PIDLISTFDS PROC_PIDLISTFILEPORTS;
MACRO_PROC_PIDLISTFDS PROC_PIDLISTTHREADS;
MACRO_PROC_PIDLISTFDS PROC_PIDPATHINFO;
MACRO_PROC_PIDLISTFDS PROC_PIDPATHINFO_MAXSIZE;
MACRO_PROC_PIDLISTFDS PROC_PIDPATHINFO_SIZE;
MACRO_PROC_PIDLISTFDS PROC_PIDREGIONINFO;
MACRO_PROC_PIDLISTFDS PROC_PIDREGIONPATHINFO;
MACRO_PROC_PIDLISTFDS PROC_PIDTASKALLINFO;
MACRO_PROC_PIDLISTFDS PROC_PIDTASKINFO;
MACRO_PROC_PIDLISTFDS PROC_PIDTBSDINFO;
MACRO_PROC_PIDLISTFDS PROC_PIDTHREADINFO;
MACRO_PROC_PIDLISTFDS PROC_PIDTHREADPATHINFO;
MACRO_PROC_PIDLISTFDS PROC_PIDT_SHORTBSDINFO;
MACRO_PROC_PIDLISTFDS PROC_PIDVNODEPATHINFO;
MACRO_PROC_PIDLISTFDS PROC_PIDWORKQUEUEINFO;
MACRO_PROC PROC_PPID_ONLY;
MACRO_PROC_REGION PROC_REGION_SHARED;
MACRO_PROC_REGION PROC_REGION_SUBMAP;
MACRO_PROC PROC_RUID_ONLY;
MACRO_PROC_PIDLISTFDS PROC_SELFSET_PCONTROL;
MACRO_PROC_PIDLISTFDS PROC_SELFSET_THREADNAME;
MACRO_PROC_PIDLISTFDS PROC_SELFSET_THREADNAME_SIZE;
MACRO_PROC_PIDLISTFDS PROC_SELFSET_VMRSRCOWNER;
MACRO_PROC_PIDLISTFDS PROC_SETPC_NONE;
MACRO_PROC_PIDLISTFDS PROC_SETPC_SUSPEND;
MACRO_PROC_PIDLISTFDS PROC_SETPC_TERMINATE;
MACRO_PROC_PIDLISTFDS PROC_SETPC_THROTTLEMEM;
MACRO_PROC PROC_TTY_ONLY;
MACRO_PROC PROC_UID_ONLY;
accept_stat PROC_UNAVAIL;
MACRO_PROFILE PROFILE_ITER_LIST_SECTION;
MACRO_PROFILE PROFILE_ITER_RELATIONS_ONLY;
MACRO_PROFILE PROFILE_ITER_SECTIONS_ONLY;
MACRO_PROF PROF_ADD_NOT_SECTION;
MACRO_PROF PROF_BAD_BOOLEAN;
MACRO_PROF PROF_BAD_GROUP_LVL;
MACRO_PROF PROF_BAD_INTEGER;
MACRO_PROF PROF_BAD_LINK_LIST;
MACRO_PROF PROF_BAD_NAMESET;
MACRO_PROF PROF_BAD_PARENT_PTR;
MACRO_PROF PROF_EINVAL;
MACRO_PROF PROF_END_OF_SECTIONS;
MACRO_PROF PROF_EXISTS;
MACRO_PROF PROF_EXTRA_CBRACE;
MACRO_PROF PROF_FAIL_OPEN;
MACRO_PROF PROF_INVALID_SECTION;
MACRO_PROF PROF_MAGIC_FILE;
MACRO_PROF PROF_MAGIC_FILE_DATA;
MACRO_PROF PROF_MAGIC_ITERATOR;
MACRO_PROF PROF_MAGIC_NODE;
MACRO_PROF PROF_MAGIC_PROFILE;
MACRO_PROF PROF_MAGIC_SECTION;
MACRO_PROF PROF_MISSING_OBRACE;
MACRO_PROF PROF_NO_PROFILE;
MACRO_PROF PROF_NO_RELATION;
MACRO_PROF PROF_NO_SECTION;
MACRO_PROF PROF_READ_ONLY;
MACRO_PROF PROF_RELATION_SYNTAX;
MACRO_PROF PROF_SECTION_NOTOP;
MACRO_PROF PROF_SECTION_SYNTAX;
MACRO_PROF PROF_SECTION_WITH_VALUE;
MACRO_PROF PROF_SET_SECTION_VALUE;
MACRO_PROF PROF_TOPSECTION_ITER_NOSUPP;
MACRO_PROF PROF_VERSION;
accept_stat PROG_MISMATCH;
accept_stat PROG_UNAVAIL;
MACRO_PROP PROP_DEFAULT;
MACRO_PROP PROP_H;
MACRO_PROTOTYPES PROTOTYPES;
MACRO_PROTO PROTO_UNDEF;
MACRO_PROT PROT_EXEC;
MACRO_PROT PROT_NONE;
MACRO_PROT PROT_READ;
MACRO_PROT PROT_WRITE;
MACRO_PROX PROX_FDTYPE_ATALK;
MACRO_PROX PROX_FDTYPE_FSEVENTS;
MACRO_PROX PROX_FDTYPE_KQUEUE;
MACRO_PROX PROX_FDTYPE_PIPE;
MACRO_PROX PROX_FDTYPE_PSEM;
MACRO_PROX PROX_FDTYPE_PSHM;
MACRO_PROX PROX_FDTYPE_SOCKET;
MACRO_PROX PROX_FDTYPE_VNODE;
MACRO_ALLDELAY PRTERA;
MACRO_PR_ORIG PR_ORIG_KERNEL;
MACRO_PR_ORIG PR_ORIG_RA;
MACRO_PR_ORIG PR_ORIG_RR;
MACRO_PR_ORIG PR_ORIG_STATIC;
MACRO_PR PR_SLOWHZ;
MACRO_PSOCK PSOCK;
MACRO_PRIMASK PSPIN;
MACRO_PSWP PSWP;
MACRO_PTHREAD_CREATE PTHREAD_CANCELED;
MACRO_PTHREAD_CREATE PTHREAD_CANCEL_ASYNCHRONOUS;
MACRO_PTHREAD_CREATE PTHREAD_CANCEL_DEFERRED;
MACRO_PTHREAD_CREATE PTHREAD_CANCEL_DISABLE;
MACRO_PTHREAD_CREATE PTHREAD_CANCEL_ENABLE;
MACRO_PTHREAD_CREATE PTHREAD_CREATE_DETACHED;
MACRO_PTHREAD_CREATE PTHREAD_CREATE_JOINABLE;
MACRO_PTHREAD PTHREAD_DESTRUCTOR_ITERATIONS;
MACRO_PTHREAD_CREATE PTHREAD_EXPLICIT_SCHED;
MACRO_PTHREAD_CREATE PTHREAD_INHERIT_SCHED;
MACRO_PTHREAD PTHREAD_KEYS_MAX;
MACRO_PTHREAD_CREATE PTHREAD_MUTEX_DEFAULT;
MACRO_PTHREAD_CREATE PTHREAD_MUTEX_ERRORCHECK;
MACRO_PTHREAD_CREATE PTHREAD_MUTEX_NORMAL;
MACRO_PTHREAD_CREATE PTHREAD_MUTEX_RECURSIVE;
MACRO_PTHREAD_CREATE PTHREAD_PRIO_INHERIT;
MACRO_PTHREAD_CREATE PTHREAD_PRIO_NONE;
MACRO_PTHREAD_CREATE PTHREAD_PRIO_PROTECT;
MACRO_PTHREAD_CREATE PTHREAD_PROCESS_PRIVATE;
MACRO_PTHREAD_CREATE PTHREAD_PROCESS_SHARED;
MACRO_PTHREAD_CREATE PTHREAD_SCOPE_PROCESS;
MACRO_PTHREAD_CREATE PTHREAD_SCOPE_SYSTEM;
MACRO_PTHREAD PTHREAD_STACK_MIN;
MACRO_PTRDIFF PTRDIFF_MAX;
MACRO_PTRDIFF PTRDIFF_MIN;
MACRO_PRIMASK PTTYBLOCK;
MACRO_PT PT_ATTACH;
MACRO_PT PT_ATTACHEXC;
MACRO_PT PT_CONTINUE;
MACRO_PT PT_DENY_ATTACH;
MACRO_PT PT_DETACH;
MACRO_PT PT_FIRSTMACH;
MACRO_PT PT_FORCEQUOTA;
MACRO_PT PT_KILL;
MACRO_PT PT_READ_D;
MACRO_PT PT_READ_I;
MACRO_PT PT_READ_U;
MACRO_PT PT_SIGEXC;
MACRO_PT PT_STEP;
MACRO_PT PT_THUPDATE;
MACRO_PT PT_TRACE_ME;
MACRO_PT PT_WRITE_D;
MACRO_PT PT_WRITE_I;
MACRO_PT PT_WRITE_U;
MACRO_PUSER PUSER;
MACRO_PVFS PVFS;
MACRO_PSWP PVM;
MACRO_PSOCK PWAIT;
MACRO_PZERO PZERO;
MACRO_P P_ADVLOCK;
MACRO_P P_AFFINITY;
$891529C55A3D7F6C466AE0BA608A35EA P_ALL;
MACRO_P P_CHECKOPENEVT;
MACRO_P P_CLASSIC;
MACRO_P P_CONTINUED;
MACRO_P P_CONTROLT;
MACRO_P P_DEPENDENCY_CAPABLE;
MACRO_P P_DISABLE_ASLR;
MACRO_P P_EXEC;
MACRO_P P_FORCEQUOTA;
MACRO_P P_FSTRACE;
MACRO_P P_INMEM;
MACRO_P P_LP64;
MACRO_P P_NOCLDSTOP;
MACRO_P P_NOCLDWAIT;
MACRO_P P_NOREMOTEHANG;
MACRO_P P_NOSHLIB;
MACRO_P P_NOSWAP;
MACRO_P P_OWEUPC;
$891529C55A3D7F6C466AE0BA608A35EA P_PGID;
MACRO_P P_PHYSIO;
$891529C55A3D7F6C466AE0BA608A35EA P_PID;
MACRO_P P_PPWAIT;
MACRO_P P_PROFIL;
MACRO_P P_REBOOT;
MACRO_P P_RESV10;
MACRO_P P_RESV11;
MACRO_P P_RESV5;
MACRO_P P_RESV7;
MACRO_P P_RESV9;
MACRO_P P_SELECT;
MACRO_P P_SSTEP;
MACRO_P P_SUGID;
MACRO_P P_SYSTEM;
MACRO_P P_TBE;
MACRO_P P_THCWD;
MACRO_P P_TIMEOUT;
MACRO_P P_TRACED;
MACRO_P P_TRANSLATED;
MACRO_P P_WEXIT;
MACRO_QFIXEDSZ QFIXEDSZ;
MACRO_QF QF_GROUPS_PER_GB;
MACRO_QF QF_MAX_GROUPS;
MACRO_QF QF_MAX_USERS;
MACRO_QF QF_MIN_GROUPS;
MACRO_QF QF_MIN_USERS;
MACRO_QF QF_USERS_PER_GB;
MACRO_QF QF_VERSION;
gqr_status Q_EPERM;
MACRO_Q Q_GETQUOTA;
gqr_status Q_NOQUOTA;
gqr_status Q_OK;
MACRO_Q Q_QUOTAOFF;
MACRO_Q Q_QUOTAON;
MACRO_Q Q_QUOTASTAT;
MACRO_Q Q_SETQUOTA;
MACRO_Q Q_SETUSE;
MACRO_Q Q_SYNC;
MACRO_RADIXCHAR RADIXCHAR;
MACRO_RAND_F RAND_F_ENG_RAND_GET_RAND_METHOD;
MACRO_RAND_F RAND_F_FIPS_RAND;
MACRO_RAND_F RAND_F_FIPS_RAND_BYTES;
MACRO_RAND_F RAND_F_FIPS_RAND_GET_RAND_METHOD;
MACRO_RAND_F RAND_F_FIPS_RAND_SET_DT;
MACRO_RAND_F RAND_F_FIPS_SET_DT;
MACRO_RAND_F RAND_F_FIPS_SET_PRNG_SEED;
MACRO_RAND_F RAND_F_FIPS_SET_TEST_MODE;
MACRO_RAND_F RAND_F_RAND_GET_RAND_METHOD;
MACRO_RAND_F RAND_F_SSLEAY_RAND_BYTES;
MACRO_RAND RAND_MAX;
MACRO_RAND_F RAND_R_NON_FIPS_METHOD;
MACRO_RAND_F RAND_R_NOT_IN_TEST_MODE;
MACRO_RAND_F RAND_R_NO_KEY_SET;
MACRO_RAND_F RAND_R_PRNG_ASKING_FOR_TOO_MUCH;
MACRO_RAND_F RAND_R_PRNG_ERROR;
MACRO_RAND_F RAND_R_PRNG_KEYED;
MACRO_RAND_F RAND_R_PRNG_NOT_REKEYED;
MACRO_RAND_F RAND_R_PRNG_NOT_RESEEDED;
MACRO_RAND_F RAND_R_PRNG_NOT_SEEDED;
MACRO_RAND_F RAND_R_PRNG_SEED_MUST_NOT_MATCH_KEY;
MACRO_RAND_F RAND_R_PRNG_STUCK;
MACRO_RANLIBSKEW RANLIBSKEW;
MACRO_TANDEM RAW;
MACRO_RB RB_ALTBOOT;
MACRO_RB RB_ASKNAME;
MACRO_RB RB_AUTOBOOT;
MACRO_RB RB_BOOT;
MACRO_RB RB_DFLTROOT;
MACRO_RB RB_HALT;
MACRO_RB RB_INITNAME;
MACRO_RB RB_NOSYNC;
MACRO_RB RB_PANIC;
MACRO_RB RB_QUICK;
MACRO_RB RB_SAFEBOOT;
MACRO_RB RB_SINGLE;
MACRO_RB RB_UNIPROC;
MACRO_RB RB_UPSDELAY;
MACRO_RC2 RC2_BLOCK;
MACRO_RC2 RC2_DECRYPT;
MACRO_RC2 RC2_ENCRYPT;
MACRO_RC2 RC2_KEY_LENGTH;
MACRO_RC5 RC5_12_ROUNDS;
MACRO_RC5 RC5_16_ROUNDS;
MACRO_RC5 RC5_32_BLOCK;
MACRO_RC5 RC5_32_KEY_LENGTH;
MACRO_RC5 RC5_8_ROUNDS;
MACRO_RC5 RC5_DECRYPT;
MACRO_RC5 RC5_ENCRYPT;
MACRO_READ READ;
MACRO_CLOCK REALTIME_CLOCK;
MACRO_REBASE REBASE_IMMEDIATE_MASK;
MACRO_REBASE REBASE_OPCODE_ADD_ADDR_IMM_SCALED;
MACRO_REBASE REBASE_OPCODE_ADD_ADDR_ULEB;
MACRO_REBASE REBASE_OPCODE_DONE;
MACRO_REBASE REBASE_OPCODE_DO_REBASE_ADD_ADDR_ULEB;
MACRO_REBASE REBASE_OPCODE_DO_REBASE_IMM_TIMES;
MACRO_REBASE REBASE_OPCODE_DO_REBASE_ULEB_TIMES;
MACRO_REBASE REBASE_OPCODE_DO_REBASE_ULEB_TIMES_SKIPPING_ULEB;
MACRO_REBASE REBASE_OPCODE_MASK;
MACRO_REBASE REBASE_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB;
MACRO_REBASE REBASE_OPCODE_SET_TYPE_IMM;
MACRO_REBASE REBASE_TYPE_POINTER;
MACRO_REBASE REBASE_TYPE_TEXT_ABSOLUTE32;
MACRO_REBASE REBASE_TYPE_TEXT_PCREL32;
MACRO_REC REC_EOF;
MACRO_REC REC_EOR;
MACRO_REC REC_ESC;
MACRO_REFERENCED REFERENCED_DYNAMICALLY;
MACRO_REFERENCE REFERENCE_FLAG_DEFINED;
MACRO_REFERENCE REFERENCE_FLAG_PRIVATE_DEFINED;
MACRO_REFERENCE REFERENCE_FLAG_PRIVATE_UNDEFINED_LAZY;
MACRO_REFERENCE REFERENCE_FLAG_PRIVATE_UNDEFINED_NON_LAZY;
MACRO_REFERENCE REFERENCE_FLAG_UNDEFINED_LAZY;
MACRO_REFERENCE REFERENCE_FLAG_UNDEFINED_NON_LAZY;
MACRO_REFERENCE REFERENCE_TYPE;
MACRO_TVERSLEN REGTYPE;
MACRO_REG REG_ASSERT;
MACRO_REG REG_ATOI;
MACRO_REG REG_BACKR;
MACRO_REG REG_BADBR;
MACRO_REG REG_BADPAT;
MACRO_REG REG_BADRPT;
MACRO_REG REG_BASIC;
MACRO_REG REG_DUMP;
MACRO_REG REG_EBRACE;
MACRO_REG REG_EBRACK;
MACRO_REG REG_ECOLLATE;
MACRO_REG REG_ECTYPE;
MACRO_REG REG_EESCAPE;
MACRO_REG REG_EMPTY;
MACRO_REG REG_ENOSYS;
MACRO_REG REG_EPAREN;
MACRO_REG REG_ERANGE;
MACRO_REG REG_ESPACE;
MACRO_REG REG_ESUBREG;
MACRO_REG REG_EXTENDED;
MACRO_REG REG_ICASE;
MACRO_REG REG_ILLSEQ;
MACRO_REG REG_INVARG;
MACRO_REG REG_ITOA;
MACRO_REG REG_LARGE;
MACRO_REG REG_NEWLINE;
MACRO_REG REG_NOMATCH;
MACRO_REG REG_NOSPEC;
MACRO_REG REG_NOSUB;
MACRO_REG REG_NOTBOL;
MACRO_REG REG_NOTEOL;
MACRO_REG REG_PEND;
MACRO_REG REG_STARTEND;
MACRO_REG REG_TRACE;
$2142F4BDED004AA731F5D116DA25DAF0 REMOVEFILE_KEEP_PARENT;
$98B98ABCC9E6F9227613F51BE97EE338 REMOVEFILE_PROCEED;
$2142F4BDED004AA731F5D116DA25DAF0 REMOVEFILE_RECURSIVE;
$2142F4BDED004AA731F5D116DA25DAF0 REMOVEFILE_SECURE_1_PASS;
$2142F4BDED004AA731F5D116DA25DAF0 REMOVEFILE_SECURE_1_PASS_ZERO;
$2142F4BDED004AA731F5D116DA25DAF0 REMOVEFILE_SECURE_35_PASS;
$2142F4BDED004AA731F5D116DA25DAF0 REMOVEFILE_SECURE_3_PASS;
$2142F4BDED004AA731F5D116DA25DAF0 REMOVEFILE_SECURE_7_PASS;
$98B98ABCC9E6F9227613F51BE97EE338 REMOVEFILE_SKIP;
$9A2661DB1D1052644D87390F84E0D91B REMOVEFILE_STATE_CONFIRM_CALLBACK;
$9A2661DB1D1052644D87390F84E0D91B REMOVEFILE_STATE_CONFIRM_CONTEXT;
$9A2661DB1D1052644D87390F84E0D91B REMOVEFILE_STATE_ERRNO;
$9A2661DB1D1052644D87390F84E0D91B REMOVEFILE_STATE_ERROR_CALLBACK;
$9A2661DB1D1052644D87390F84E0D91B REMOVEFILE_STATE_ERROR_CONTEXT;
$9A2661DB1D1052644D87390F84E0D91B REMOVEFILE_STATE_STATUS_CALLBACK;
$9A2661DB1D1052644D87390F84E0D91B REMOVEFILE_STATE_STATUS_CONTEXT;
$98B98ABCC9E6F9227613F51BE97EE338 REMOVEFILE_STOP;
msg_type REPLY;
MACRO_REPORT REPORT_MOUSE_POSITION;
MACRO_REQ_MSG REPORT_RSP_MSG;
MACRO_REPORT_STATS REPORT_STATS_LEN;
MACRO_REPORT_STATS REPORT_snmpInvalidMsgs_NUM;
MACRO_REPORT_STATS REPORT_snmpUnknownSecurityModels_NUM;
MACRO_REPORT_STATS REPORT_usmStatsDecryptionErrors_NUM;
MACRO_REPORT_STATS REPORT_usmStatsNotInTimeWindows_NUM;
MACRO_REPORT_STATS REPORT_usmStatsUnknownEngineIDs_NUM;
MACRO_REPORT_STATS REPORT_usmStatsUnknownUserNames_NUM;
MACRO_REPORT_STATS REPORT_usmStatsUnsupportedSecLevels_NUM;
MACRO_REPORT_STATS REPORT_usmStatsWrongDigests_NUM;
MACRO_REQUEST REQUEST_IS_DELEGATED;
MACRO_REQUEST REQUEST_IS_NOT_DELEGATED;
MACRO_REQ_LEFT REQ_BACK_PATTERN;
MACRO_REQ REQ_BEG_FIELD;
MACRO_REQ REQ_BEG_LINE;
MACRO_REQ_LEFT REQ_CLEAR_PATTERN;
MACRO_REQ REQ_CLR_EOF;
MACRO_REQ REQ_CLR_EOL;
MACRO_REQ REQ_CLR_FIELD;
MACRO_REQ REQ_DEL_CHAR;
MACRO_REQ REQ_DEL_LINE;
MACRO_REQ REQ_DEL_PREV;
MACRO_REQ REQ_DEL_WORD;
MACRO_REQ REQ_DOWN_CHAR;
MACRO_REQ REQ_DOWN_FIELD;
MACRO_REQ_LEFT REQ_DOWN_ITEM;
MACRO_REQ REQ_END_FIELD;
MACRO_REQ REQ_END_LINE;
MACRO_REQ REQ_FIRST_FIELD;
MACRO_REQ_LEFT REQ_FIRST_ITEM;
MACRO_REQ REQ_FIRST_PAGE;
MACRO_REQ REQ_INS_CHAR;
MACRO_REQ REQ_INS_LINE;
MACRO_REQ REQ_INS_MODE;
MACRO_REQ REQ_LAST_FIELD;
MACRO_REQ_LEFT REQ_LAST_ITEM;
MACRO_REQ REQ_LAST_PAGE;
MACRO_REQ REQ_LEFT_CHAR;
MACRO_REQ REQ_LEFT_FIELD;
MACRO_REQ_LEFT REQ_LEFT_ITEM;
MACRO_REQ REQ_NEW_LINE;
MACRO_REQ REQ_NEXT_CHAR;
MACRO_REQ REQ_NEXT_CHOICE;
MACRO_REQ REQ_NEXT_FIELD;
MACRO_REQ_LEFT REQ_NEXT_ITEM;
MACRO_REQ REQ_NEXT_LINE;
MACRO_REQ_LEFT REQ_NEXT_MATCH;
MACRO_REQ REQ_NEXT_PAGE;
MACRO_REQ REQ_NEXT_WORD;
MACRO_REQ REQ_OVL_MODE;
MACRO_REQ REQ_PREV_CHAR;
MACRO_REQ REQ_PREV_CHOICE;
MACRO_REQ REQ_PREV_FIELD;
MACRO_REQ_LEFT REQ_PREV_ITEM;
MACRO_REQ REQ_PREV_LINE;
MACRO_REQ_LEFT REQ_PREV_MATCH;
MACRO_REQ REQ_PREV_PAGE;
MACRO_REQ REQ_PREV_WORD;
MACRO_REQ REQ_RIGHT_CHAR;
MACRO_REQ REQ_RIGHT_FIELD;
MACRO_REQ_LEFT REQ_RIGHT_ITEM;
MACRO_REQ REQ_SCR_BCHAR;
MACRO_REQ REQ_SCR_BHPAGE;
MACRO_REQ REQ_SCR_BLINE;
MACRO_REQ REQ_SCR_BPAGE;
MACRO_REQ_LEFT REQ_SCR_DLINE;
MACRO_REQ_LEFT REQ_SCR_DPAGE;
MACRO_REQ REQ_SCR_FCHAR;
MACRO_REQ REQ_SCR_FHPAGE;
MACRO_REQ REQ_SCR_FLINE;
MACRO_REQ REQ_SCR_FPAGE;
MACRO_REQ REQ_SCR_HBHALF;
MACRO_REQ REQ_SCR_HBLINE;
MACRO_REQ REQ_SCR_HFHALF;
MACRO_REQ REQ_SCR_HFLINE;
MACRO_REQ_LEFT REQ_SCR_ULINE;
MACRO_REQ_LEFT REQ_SCR_UPAGE;
MACRO_REQ REQ_SFIRST_FIELD;
MACRO_REQ REQ_SLAST_FIELD;
MACRO_REQ REQ_SNEXT_FIELD;
MACRO_REQ REQ_SPREV_FIELD;
MACRO_REQ_LEFT REQ_TOGGLE_ITEM;
MACRO_REQ REQ_UP_CHAR;
MACRO_REQ REQ_UP_FIELD;
MACRO_REQ_LEFT REQ_UP_ITEM;
MACRO_REQ REQ_VALIDATION;
MACRO_RESERVE1 RESERVE1;
MACRO_RESERVE1 RESERVE2;
MACRO_RESVD RESVD_SET;
MACRO_RES_MAXNDOTS RES_AAONLY;
MACRO_RES_MAXNDOTS RES_BLAST;
MACRO_RES_MAXNDOTS RES_DEBUG;
MACRO_RES_MAXNDOTS RES_DEFAULT;
MACRO_RES_MAXNDOTS RES_DEFNAMES;
MACRO_RES_MAXNDOTS RES_DFLRETRY;
MACRO_RES_MAXNDOTS RES_DNSRCH;
MACRO_RES_MAXNDOTS RES_EXHAUSTIVE;
MACRO_RES_MAXNDOTS RES_F_CONN;
MACRO_RES_MAXNDOTS RES_F_EDNS0ERR;
MACRO_RES_MAXNDOTS RES_F_VC;
MACRO_RES_MAXNDOTS RES_IGNTC;
MACRO_RES_MAXNDOTS RES_INIT;
MACRO_RES_MAXNDOTS RES_INSECURE1;
MACRO_RES_MAXNDOTS RES_INSECURE2;
MACRO_RES_MAXNDOTS RES_IPV4ONLY;
MACRO_RES_MAXNDOTS RES_IPV6ONLY;
MACRO_RES_MAXNDOTS RES_KEEPTSIG;
MACRO_RES_MAXNDOTS RES_MAXNDOTS;
MACRO_RES_MAXNDOTS RES_MAXRETRANS;
MACRO_RES_MAXNDOTS RES_MAXRETRY;
MACRO_RES_MAXNDOTS RES_MAXTIME;
MACRO_RES_MAXNDOTS RES_NOALIASES;
MACRO_RES_MAXNDOTS RES_NOCHECKNAME;
MACRO_RES_MAXNDOTS RES_NOTLDQUERY;
MACRO_RES_MAXNDOTS RES_NO_BITSTRING;
MACRO_RES_MAXNDOTS RES_NO_NIBBLE;
MACRO_RES_MAXNDOTS RES_NO_NIBBLE2;
MACRO_RES_MAXNDOTS RES_PRF_ADD;
MACRO_RES_MAXNDOTS RES_PRF_ANS;
MACRO_RES_MAXNDOTS RES_PRF_AUTH;
MACRO_RES_MAXNDOTS RES_PRF_CLASS;
MACRO_RES_MAXNDOTS RES_PRF_CMD;
MACRO_RES_MAXNDOTS RES_PRF_HEAD1;
MACRO_RES_MAXNDOTS RES_PRF_HEAD2;
MACRO_RES_MAXNDOTS RES_PRF_HEADX;
MACRO_RES_MAXNDOTS RES_PRF_INIT;
MACRO_RES_MAXNDOTS RES_PRF_QUERY;
MACRO_RES_MAXNDOTS RES_PRF_QUES;
MACRO_RES_MAXNDOTS RES_PRF_REPLY;
MACRO_RES_MAXNDOTS RES_PRF_STATS;
MACRO_RES_MAXNDOTS RES_PRF_TRUNC;
MACRO_RES_MAXNDOTS RES_PRF_TTLID;
MACRO_RES_MAXNDOTS RES_PRF_UPDATE;
MACRO_RES_MAXNDOTS RES_PRIMARY;
MACRO_RES_MAXNDOTS RES_RECURSE;
MACRO_RES_MAXNDOTS RES_ROTATE;
MACRO_RES_MAXNDOTS RES_STAYOPEN;
MACRO_RES RES_TIMEOUT;
MACRO_RES_MAXNDOTS RES_USEVC;
MACRO_RES_MAXNDOTS RES_USE_A6;
MACRO_RES_MAXNDOTS RES_USE_DNAME;
MACRO_RES_MAXNDOTS RES_USE_DNSSEC;
MACRO_RES_MAXNDOTS RES_USE_EDNS0;
MACRO_RES_MAXNDOTS RES_USE_INET6;
MACRO_RETURN RETURN;
MACRO_RET RET_ERROR;
MACRO_RET RET_SPECIAL;
MACRO_RET RET_SUCCESS;
MACRO_CHARCLASS RE_DUP_MAX;
MACRO_RING RING_WAIT;
MACRO_RIPCMD RIPCMD_MAX;
MACRO_RIPCMD RIPCMD_REQUEST;
MACRO_RIPCMD RIPCMD_RESPONSE;
MACRO_RIPCMD RIPCMD_TRACEOFF;
MACRO_RIPCMD RIPCMD_TRACEON;
MACRO_RIPEMD160 RIPEMD160_CBLOCK;
MACRO_RIPEMD160 RIPEMD160_DIGEST_LENGTH;
MACRO_RIPEMD160 RIPEMD160_LBLOCK;
MACRO_RIPVERSION RIPVERSION;
MACRO_RLIMIT RLIMIT_AS;
MACRO_RLIMIT RLIMIT_CORE;
MACRO_RLIMIT RLIMIT_CPU;
MACRO_RLIMIT RLIMIT_DATA;
MACRO_RLIMIT RLIMIT_FSIZE;
MACRO_RLIMIT RLIMIT_MEMLOCK;
MACRO_RLIMIT RLIMIT_NOFILE;
MACRO_RLIMIT RLIMIT_NPROC;
MACRO_RLIMIT RLIMIT_RSS;
MACRO_RLIMIT RLIMIT_STACK;
MACRO_RLIM RLIM_INFINITY;
MACRO_RLIM_NLIMITS RLIM_NLIMITS;
MACRO_RLIM RLIM_SAVED_CUR;
MACRO_RLIM RLIM_SAVED_MAX;
MACRO_RL RL_PROMPT_END_IGNORE;
MACRO_RL RL_PROMPT_START_IGNORE;
MACRO_RL RL_READLINE_VERSION;
MACRO_RPCAKN RPCAKN_FULLNAME;
MACRO_RPCAKN RPCAKN_NICKNAME;
MACRO_RPCAUTH RPCAUTH_INVALID;
MACRO_RPCAUTH RPCAUTH_KERB4;
MACRO_RPCAUTH RPCAUTH_KRB5;
MACRO_RPCAUTH RPCAUTH_KRB5I;
MACRO_RPCAUTH RPCAUTH_KRB5P;
MACRO_RPCAUTH RPCAUTH_MAXSIZ;
MACRO_RPCAUTH RPCAUTH_NONE;
MACRO_RPCAUTH RPCAUTH_NULL;
MACRO_RPCAUTH RPCAUTH_SHORT;
MACRO_RPCAUTH RPCAUTH_SYS;
MACRO_RPCAUTH RPCAUTH_UNIX;
MACRO_RPCAUTH RPCAUTH_UNIXGIDS;
MACRO_RPCAUTH RPCAUTH_UNKNOWN;
MACRO_RPCBPROC RPCBPROC_BCAST;
MACRO_RPCBPROC RPCBPROC_CALLIT;
MACRO_RPCBPROC RPCBPROC_DUMP;
MACRO_RPCBPROC RPCBPROC_GETADDR;
MACRO_RPCBPROC RPCBPROC_GETADDRLIST;
MACRO_RPCBPROC RPCBPROC_GETSTAT;
MACRO_RPCBPROC RPCBPROC_GETTIME;
MACRO_RPCBPROC RPCBPROC_GETVERSADDR;
MACRO_RPCBPROC RPCBPROC_INDIRECT;
MACRO_RPCBPROC RPCBPROC_NULL;
MACRO_RPCBPROC RPCBPROC_SET;
MACRO_RPCBPROC RPCBPROC_TADDR2UADDR;
MACRO_RPCBPROC RPCBPROC_UADDR2TADDR;
MACRO_RPCBPROC RPCBPROC_UNSET;
MACRO_RPCBPROG RPCBPROG;
MACRO_RPCBVERS3 RPCBVERS3;
MACRO_RPCBVERS3 RPCBVERS4;
MACRO_RPCGEN RPCGEN_VERSION;
MACRO_RPCMNT RPCMNT_DUMP;
MACRO_RPCMNT RPCMNT_EXPORT;
MACRO_RPCMNT RPCMNT_MOUNT;
MACRO_RPCMNT RPCMNT_NAMELEN;
MACRO_RPCMNT RPCMNT_PATHLEN;
MACRO_RPCMNT RPCMNT_UMNTALL;
MACRO_RPCMNT RPCMNT_UMOUNT;
MACRO_RPCMNT RPCMNT_VER1;
MACRO_RPCMNT RPCMNT_VER3;
MACRO_RPCPROG RPCPROG_MNT;
MACRO_RPCPROG_NFS RPCPROG_NFS;
MACRO_RPCPROG_NFS RPCPROG_RQUOTA;
MACRO_RPCRQUOTA RPCRQUOTA_EXT_VER;
MACRO_RPCRQUOTA RPCRQUOTA_GET;
MACRO_RPCRQUOTA RPCRQUOTA_VER;
auth_stat RPCSEC_GSS_CREDPROBLEM;
auth_stat RPCSEC_GSS_CTXPROBLEM;
MACRO_RPCSMALLMSGSIZE RPCSMALLMSGSIZE;
MACRO_RPCTEST RPCTEST_NULL_BATCH_PROC;
MACRO_RPCTEST RPCTEST_NULL_PROC;
MACRO_RPCTEST RPCTEST_PROGRAM;
MACRO_RPCTEST RPCTEST_VERSION;
MACRO_RPC_MSG RPC_ANYSOCK;
MACRO_RPC_CALL RPC_AUTHERR;
clnt_stat RPC_AUTHERROR;
MACRO_RPC_CALL RPC_CALL;
clnt_stat RPC_CANTDECODEARGS;
clnt_stat RPC_CANTDECODERES;
clnt_stat RPC_CANTENCODEARGS;
clnt_stat RPC_CANTRECV;
clnt_stat RPC_CANTSEND;
clnt_stat RPC_FAILED;
MACRO_RPC_CALL RPC_GARBAGE;
reject_stat RPC_MISMATCH;
MACRO_RPC_CALL RPC_MISMATCH_NFS;
MACRO_RPC_CALL RPC_MSGACCEPTED;
MACRO_RPC_CALL RPC_MSGDENIED;
MACRO_RPC_MSG RPC_MSG_VERSION;
clnt_stat RPC_PMAPFAILURE;
clnt_stat RPC_PROCUNAVAIL;
MACRO_RPC_CALL RPC_PROCUNAVAIL_NFS;
MACRO_RPC_CALL RPC_PROGMISMATCH;
clnt_stat RPC_PROGNOTREGISTERED;
clnt_stat RPC_PROGUNAVAIL;
MACRO_RPC_CALL RPC_PROGUNAVAIL_NFS;
clnt_stat RPC_PROGVERSMISMATCH;
MACRO_RPC_CALL RPC_REPLY;
MACRO_RPC_CALL RPC_REPLYSIZ;
MACRO_RPC_MSG RPC_SERVICE_PORT;
MACRO_RPC RPC_SIGBUF_SIZE;
MACRO_RPC_CALL RPC_SIZ;
MACRO_RPC RPC_SUBSYSTEM_NULL;
clnt_stat RPC_SUCCESS;
clnt_stat RPC_SYSTEMERROR;
MACRO_RPC_CALL RPC_SYSTEM_ERR;
clnt_stat RPC_TIMEDOUT;
clnt_stat RPC_UNKNOWNHOST;
clnt_stat RPC_UNKNOWNPROTO;
MACRO_RPC_VER2 RPC_VER2;
clnt_stat RPC_VERSMISMATCH;
MACRO_RPM RPM_PCO_ADD;
MACRO_RPM RPM_PCO_CHANGE;
MACRO_RPM RPM_PCO_MAX;
MACRO_RPM RPM_PCO_SETGLOBAL;
MACRO_RPP RPP_ECHO_OFF;
MACRO_RPP RPP_ECHO_ON;
MACRO_RPP RPP_FORCELOWER;
MACRO_RPP RPP_FORCEUPPER;
MACRO_RPP RPP_REQUIRE_TTY;
MACRO_RPP RPP_SEVENBIT;
MACRO_RQUOTAPROC RQUOTAPROC_GETACTIVEQUOTA;
MACRO_RQUOTAPROC RQUOTAPROC_GETQUOTA;
MACRO_RQUOTAPROG RQUOTAPROG;
MACRO_RQUOTAVERS RQUOTAVERS;
MACRO_RQUOTA RQUOTA_STAT_EPERM;
MACRO_RQUOTA RQUOTA_STAT_NOQUOTA;
MACRO_RQUOTA RQUOTA_STAT_OK;
MACRO_RQ RQ_CLIENT_ADDR;
MACRO_RQ RQ_CLIENT_NAME;
MACRO_RQ RQ_CLIENT_SIN;
MACRO_RQ RQ_DAEMON;
MACRO_RQ RQ_FILE;
MACRO_RQ_PATHLEN RQ_PATHLEN;
MACRO_RQ RQ_SERVER_ADDR;
MACRO_RQ RQ_SERVER_NAME;
MACRO_RQ RQ_SERVER_SIN;
MACRO_RQ RQ_USER;
MACRO_QFIXEDSZ RRFIXEDSZ;
MACRO_RRQ RRQ;
MACRO_RSA_3 RSA_3;
MACRO_RSA_3 RSA_F4;
MACRO_RSA_3 RSA_FLAG_BLINDING;
MACRO_RSA_3 RSA_FLAG_CACHE_PRIVATE;
MACRO_RSA_3 RSA_FLAG_CACHE_PUBLIC;
MACRO_RSA_3 RSA_FLAG_EXT_PKEY;
MACRO_RSA RSA_FLAG_FIPS_METHOD;
MACRO_RSA RSA_FLAG_NON_FIPS_ALLOW;
MACRO_RSA_3 RSA_FLAG_NO_BLINDING;
MACRO_RSA_3 RSA_FLAG_NO_CONSTTIME;
MACRO_RSA_3 RSA_FLAG_NO_EXP_CONSTTIME;
MACRO_RSA_3 RSA_FLAG_SIGN_VER;
MACRO_RSA_3 RSA_FLAG_THREAD_SAFE;
MACRO_RSA_3 RSA_F_FIPS_RSA_SIGN;
MACRO_RSA_3 RSA_F_FIPS_RSA_VERIFY;
MACRO_RSA_3 RSA_F_MEMORY_LOCK;
MACRO_RSA_3 RSA_F_RSA_BUILTIN_KEYGEN;
MACRO_RSA_3 RSA_F_RSA_CHECK_KEY;
MACRO_RSA_3 RSA_F_RSA_EAY_PRIVATE_DECRYPT;
MACRO_RSA_3 RSA_F_RSA_EAY_PRIVATE_ENCRYPT;
MACRO_RSA_3 RSA_F_RSA_EAY_PUBLIC_DECRYPT;
MACRO_RSA_3 RSA_F_RSA_EAY_PUBLIC_ENCRYPT;
MACRO_RSA_3 RSA_F_RSA_GENERATE_KEY;
MACRO_RSA_3 RSA_F_RSA_MEMORY_LOCK;
MACRO_RSA_3 RSA_F_RSA_NEW_METHOD;
MACRO_RSA_3 RSA_F_RSA_NULL;
MACRO_RSA_3 RSA_F_RSA_NULL_MOD_EXP;
MACRO_RSA_3 RSA_F_RSA_NULL_PRIVATE_DECRYPT;
MACRO_RSA_3 RSA_F_RSA_NULL_PRIVATE_ENCRYPT;
MACRO_RSA_3 RSA_F_RSA_NULL_PUBLIC_DECRYPT;
MACRO_RSA_3 RSA_F_RSA_NULL_PUBLIC_ENCRYPT;
MACRO_RSA_3 RSA_F_RSA_PADDING_ADD_NONE;
MACRO_RSA_3 RSA_F_RSA_PADDING_ADD_PKCS1_OAEP;
MACRO_RSA_3 RSA_F_RSA_PADDING_ADD_PKCS1_PSS;
MACRO_RSA_3 RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_1;
MACRO_RSA_3 RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_2;
MACRO_RSA_3 RSA_F_RSA_PADDING_ADD_SSLV23;
MACRO_RSA_3 RSA_F_RSA_PADDING_ADD_X931;
MACRO_RSA_3 RSA_F_RSA_PADDING_CHECK_NONE;
MACRO_RSA_3 RSA_F_RSA_PADDING_CHECK_PKCS1_OAEP;
MACRO_RSA_3 RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_1;
MACRO_RSA_3 RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_2;
MACRO_RSA_3 RSA_F_RSA_PADDING_CHECK_SSLV23;
MACRO_RSA_3 RSA_F_RSA_PADDING_CHECK_X931;
MACRO_RSA_3 RSA_F_RSA_PRINT;
MACRO_RSA_3 RSA_F_RSA_PRINT_FP;
MACRO_RSA_3 RSA_F_RSA_PRIVATE_ENCRYPT;
MACRO_RSA_3 RSA_F_RSA_PUBLIC_DECRYPT;
MACRO_RSA_3 RSA_F_RSA_SETUP_BLINDING;
MACRO_RSA_3 RSA_F_RSA_SET_DEFAULT_METHOD;
MACRO_RSA_3 RSA_F_RSA_SET_METHOD;
MACRO_RSA_3 RSA_F_RSA_SIGN;
MACRO_RSA_3 RSA_F_RSA_SIGN_ASN1_OCTET_STRING;
MACRO_RSA_3 RSA_F_RSA_VERIFY;
MACRO_RSA_3 RSA_F_RSA_VERIFY_ASN1_OCTET_STRING;
MACRO_RSA_3 RSA_F_RSA_VERIFY_PKCS1_PSS;
MACRO_RSA_3 RSA_METHOD_FLAG_NO_CHECK;
MACRO_RSA_3 RSA_NO_PADDING;
MACRO_RSA_3 RSA_PKCS1_OAEP_PADDING;
MACRO_RSA_3 RSA_PKCS1_PADDING;
MACRO_RSA_3 RSA_PKCS1_PADDING_SIZE;
MACRO_RSA_3 RSA_R_ALGORITHM_MISMATCH;
MACRO_RSA_3 RSA_R_BAD_E_VALUE;
MACRO_RSA_3 RSA_R_BAD_FIXED_HEADER_DECRYPT;
MACRO_RSA_3 RSA_R_BAD_PAD_BYTE_COUNT;
MACRO_RSA_3 RSA_R_BAD_SIGNATURE;
MACRO_RSA_3 RSA_R_BLOCK_TYPE_IS_NOT_01;
MACRO_RSA_3 RSA_R_BLOCK_TYPE_IS_NOT_02;
MACRO_RSA_3 RSA_R_DATA_GREATER_THAN_MOD_LEN;
MACRO_RSA_3 RSA_R_DATA_TOO_LARGE;
MACRO_RSA_3 RSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE;
MACRO_RSA_3 RSA_R_DATA_TOO_LARGE_FOR_MODULUS;
MACRO_RSA_3 RSA_R_DATA_TOO_SMALL;
MACRO_RSA_3 RSA_R_DATA_TOO_SMALL_FOR_KEY_SIZE;
MACRO_RSA_3 RSA_R_DIGEST_TOO_BIG_FOR_RSA_KEY;
MACRO_RSA_3 RSA_R_DMP1_NOT_CONGRUENT_TO_D;
MACRO_RSA_3 RSA_R_DMQ1_NOT_CONGRUENT_TO_D;
MACRO_RSA_3 RSA_R_D_E_NOT_CONGRUENT_TO_1;
MACRO_RSA_3 RSA_R_FIRST_OCTET_INVALID;
MACRO_RSA_3 RSA_R_INVALID_HEADER;
MACRO_RSA_3 RSA_R_INVALID_MESSAGE_LENGTH;
MACRO_RSA_3 RSA_R_INVALID_PADDING;
MACRO_RSA_3 RSA_R_INVALID_TRAILER;
MACRO_RSA_3 RSA_R_IQMP_NOT_INVERSE_OF_Q;
MACRO_RSA_3 RSA_R_KEY_SIZE_TOO_SMALL;
MACRO_RSA_3 RSA_R_LAST_OCTET_INVALID;
MACRO_RSA_3 RSA_R_MODULUS_TOO_LARGE;
MACRO_RSA_3 RSA_R_NON_FIPS_METHOD;
MACRO_RSA_3 RSA_R_NO_PUBLIC_EXPONENT;
MACRO_RSA_3 RSA_R_NULL_BEFORE_BLOCK_MISSING;
MACRO_RSA_3 RSA_R_N_DOES_NOT_EQUAL_P_Q;
MACRO_RSA_3 RSA_R_OAEP_DECODING_ERROR;
MACRO_RSA_3 RSA_R_OPERATION_NOT_ALLOWED_IN_FIPS_MODE;
MACRO_RSA_3 RSA_R_PADDING_CHECK_FAILED;
MACRO_RSA_3 RSA_R_P_NOT_PRIME;
MACRO_RSA_3 RSA_R_Q_NOT_PRIME;
MACRO_RSA_3 RSA_R_RSA_OPERATIONS_NOT_SUPPORTED;
MACRO_RSA_3 RSA_R_SLEN_CHECK_FAILED;
MACRO_RSA_3 RSA_R_SLEN_RECOVERY_FAILED;
MACRO_RSA_3 RSA_R_SSLV3_ROLLBACK_ATTACK;
MACRO_RSA_3 RSA_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD;
MACRO_RSA_3 RSA_R_UNKNOWN_ALGORITHM_TYPE;
MACRO_RSA_3 RSA_R_UNKNOWN_PADDING_TYPE;
MACRO_RSA_3 RSA_R_WRONG_SIGNATURE_LENGTH;
MACRO_RSA_3 RSA_SSLV23_PADDING;
MACRO_RSA_3 RSA_X931_PADDING;
MACRO_RSTATPROC RSTATPROC_HAVEDISK;
MACRO_RSTATPROC RSTATPROC_STATS;
MACRO_RSTATPROG RSTATPROG;
MACRO_RSTATVERS_SWTCH RSTATVERS_ORIG;
MACRO_RSTATVERS_SWTCH RSTATVERS_SWTCH;
MACRO_RSTATVERS RSTATVERS_TIME;
MACRO_RSTAT RSTAT_CPUSTATES;
MACRO_RSTAT RSTAT_DK_NDRIVE;
MACRO_RS RS_ACTIVE;
MACRO_RS RS_CREATEANDGO;
MACRO_RS RS_CREATEANDWAIT;
MACRO_RS RS_DESTROY;
MACRO_RS RS_NONEXISTENT;
MACRO_RS RS_NOTINSERVICE;
MACRO_RS RS_NOTREADY;
MACRO_RTAX RTAX_AUTHOR;
MACRO_RTAX RTAX_BRD;
MACRO_RTAX RTAX_DST;
MACRO_RTAX RTAX_GATEWAY;
MACRO_RTAX RTAX_GENMASK;
MACRO_RTAX RTAX_IFA;
MACRO_RTAX RTAX_IFP;
MACRO_RTAX RTAX_MAX;
MACRO_RTAX RTAX_NETMASK;
MACRO_RTA RTA_AUTHOR;
MACRO_RTA RTA_BRD;
MACRO_RTA RTA_DST;
MACRO_RTA RTA_GATEWAY;
MACRO_RTA RTA_GENMASK;
MACRO_RTA RTA_IFA;
MACRO_RTA RTA_IFP;
MACRO_RTA RTA_NETMASK;
MACRO_RTF_USETRAILERS RTF_ANNOUNCE;
MACRO_RTF RTF_BLACKHOLE;
MACRO_RTF RTF_BROADCAST;
MACRO_RTF RTF_CLONING;
MACRO_RTF RTF_CONDEMNED;
MACRO_RTF RTF_DELCLONE;
MACRO_RTF RTF_DONE;
MACRO_RTF RTF_DYNAMIC;
MACRO_RTF RTF_GATEWAY;
MACRO_RTF RTF_HOST;
MACRO_RTF RTF_IFREF;
MACRO_RTF RTF_IFSCOPE;
MACRO_RTF RTF_LLINFO;
MACRO_RTF RTF_LOCAL;
MACRO_RTF RTF_MODIFIED;
MACRO_RTF RTF_MULTICAST;
MACRO_RTF RTF_PINNED;
MACRO_RTF RTF_PRCLONING;
MACRO_RTF RTF_PROTO1;
MACRO_RTF RTF_PROTO2;
MACRO_RTF RTF_PROTO3;
MACRO_RTF RTF_REJECT;
MACRO_RTF RTF_STATIC;
MACRO_RTF RTF_UP;
MACRO_RTF_USETRAILERS RTF_USETRAILERS;
MACRO_RTF RTF_WASCLONED;
MACRO_RTF RTF_XRESOLVE;
MACRO_RTLD RTLD_DEFAULT;
MACRO_RTLD RTLD_FIRST;
MACRO_RTLD RTLD_GLOBAL;
MACRO_RTLD RTLD_LAZY;
MACRO_RTLD RTLD_LOCAL;
MACRO_RTLD RTLD_MAIN_ONLY;
MACRO_RTLD RTLD_NEXT;
MACRO_RTLD RTLD_NODELETE;
MACRO_RTLD RTLD_NOLOAD;
MACRO_RTLD RTLD_NOW;
MACRO_RTLD RTLD_SELF;
MACRO_RTM_VERSION RTM_ADD;
MACRO_RTM_VERSION RTM_CHANGE;
MACRO_RTM_VERSION RTM_DELADDR;
MACRO_RTM_VERSION RTM_DELETE;
MACRO_RTM_VERSION RTM_DELMADDR;
MACRO_RTM_VERSION RTM_GET;
MACRO_RTM_VERSION RTM_GET2;
MACRO_RTM_VERSION RTM_IFINFO;
MACRO_RTM_VERSION RTM_IFINFO2;
MACRO_RTM_VERSION RTM_LOCK;
MACRO_RTM_VERSION RTM_LOSING;
MACRO_RTM_VERSION RTM_MISS;
MACRO_RTM_VERSION RTM_NEWADDR;
MACRO_RTM_VERSION RTM_NEWMADDR;
MACRO_RTM_VERSION RTM_NEWMADDR2;
MACRO_RTM_VERSION RTM_OLDADD;
MACRO_RTM_VERSION RTM_OLDDEL;
MACRO_RTM_VERSION RTM_REDIRECT;
MACRO_RTM_VERSION RTM_RESOLVE;
MACRO_RTM RTM_RTTUNIT;
MACRO_RTM_VERSION RTM_VERSION;
MACRO_RTV RTV_EXPIRE;
MACRO_RTV RTV_HOPCOUNT;
MACRO_RTV RTV_MTU;
MACRO_RTV RTV_RPIPE;
MACRO_RTV RTV_RTT;
MACRO_RTV RTV_RTTVAR;
MACRO_RTV RTV_SPIPE;
MACRO_RTV RTV_SSTHRESH;
MACRO_RUBOUT RUBOUT;
MACRO_RUN RUN_LVL;
MACRO_RUSAGE RUSAGE_CHILDREN;
MACRO_RUSAGE RUSAGE_SELF;
MACRO_RUSERSPROC RUSERSPROC_ALLNAMES;
MACRO_RUSERSPROC RUSERSPROC_NAMES;
MACRO_RUSERSPROC RUSERSPROC_NUM;
MACRO_RUSERSPROG RUSERSPROG;
MACRO_RUSERSVERS_1 RUSERSVERS_1;
MACRO_RUSERSVERS_1 RUSERSVERS_2;
MACRO_RUSERSVERS_3 RUSERSVERS_3;
MACRO_RUSERSVERS RUSERSVERS_IDLE;
MACRO_RUSERSVERS RUSERSVERS_ORIG;
MACRO_RUSERS RUSERS_ACCOUNTING;
MACRO_RUSERS RUSERS_BOOT_TIME;
MACRO_RUSERS RUSERS_DEAD_PROCESS;
MACRO_RUSERS RUSERS_EMPTY;
MACRO_RUSERS RUSERS_INIT_PROCESS;
MACRO_RUSERS RUSERS_LOGIN_PROCESS;
MACRO_RUSERS RUSERS_MAXHOSTLEN;
MACRO_RUSERS RUSERS_MAXLINELEN;
MACRO_RUSERS RUSERS_MAXUSERLEN;
MACRO_RUSERS RUSERS_NEW_TIME;
MACRO_RUSERS RUSERS_OLD_TIME;
MACRO_RUSERS RUSERS_RUN_LVL;
MACRO_RUSERS RUSERS_USER_PROCESS;
MACRO_R_ABS R_ABS;
MACRO_R R_CURSOR;
MACRO_R_DUP R_DUP;
MACRO_R_FIRST R_FIRST;
MACRO_R_FIXEDLEN R_FIXEDLEN;
MACRO_R_FIRST R_IAFTER;
MACRO_R_FIRST R_IBEFORE;
MACRO_R_FIRST R_LAST;
MACRO_R_FIRST R_NEXT;
MACRO_R_FIXEDLEN R_NOKEY;
MACRO_R_FIRST R_NOOVERWRITE;
MACRO_OK R_OK;
MACRO_R_FIRST R_PREV;
MACRO_R_FIRST R_RECNOSYNC;
MACRO_R_ABS R_SCATTERED;
MACRO_R_FIRST R_SETCURSOR;
MACRO_R_FIXEDLEN R_SNAPSHOT;
MACRO_SADB SADB_AALG_MAX;
MACRO_SADB SADB_AALG_MD5HMAC;
MACRO_SADB SADB_AALG_NONE;
MACRO_SADB SADB_AALG_SHA1HMAC;
MACRO_SADB SADB_ACQUIRE;
MACRO_SADB SADB_ADD;
MACRO_SADB SADB_DELETE;
MACRO_SADB SADB_DUMP;
MACRO_SADB SADB_EALG_3DESCBC;
MACRO_SADB SADB_EALG_DESCBC;
MACRO_SADB SADB_EALG_MAX;
MACRO_SADB SADB_EALG_NONE;
MACRO_SADB SADB_EALG_NULL;
MACRO_SADB SADB_EXPIRE;
MACRO_SADB SADB_EXT_ADDRESS_DST;
MACRO_SADB SADB_EXT_ADDRESS_PROXY;
MACRO_SADB SADB_EXT_ADDRESS_SRC;
MACRO_SADB SADB_EXT_IDENTITY_DST;
MACRO_SADB SADB_EXT_IDENTITY_SRC;
MACRO_SADB SADB_EXT_KEY_AUTH;
MACRO_SADB SADB_EXT_KEY_ENCRYPT;
MACRO_SADB SADB_EXT_LIFETIME_CURRENT;
MACRO_SADB SADB_EXT_LIFETIME_HARD;
MACRO_SADB SADB_EXT_LIFETIME_SOFT;
MACRO_SADB SADB_EXT_MAX;
MACRO_SADB SADB_EXT_PROPOSAL;
MACRO_SADB SADB_EXT_RESERVED;
MACRO_SADB SADB_EXT_SA;
MACRO_SADB SADB_EXT_SASTAT;
MACRO_SADB SADB_EXT_SENSITIVITY;
MACRO_SADB SADB_EXT_SESSION_ID;
MACRO_SADB SADB_EXT_SPIRANGE;
MACRO_SADB SADB_EXT_SUPPORTED_AUTH;
MACRO_SADB SADB_EXT_SUPPORTED_ENCRYPT;
MACRO_SADB SADB_FLUSH;
MACRO_SADB SADB_GET;
MACRO_SADB SADB_GETSASTAT;
MACRO_SADB SADB_GETSPI;
MACRO_SADB SADB_IDENTTYPE_FQDN;
MACRO_SADB SADB_IDENTTYPE_MAX;
MACRO_SADB SADB_IDENTTYPE_PREFIX;
MACRO_SADB SADB_IDENTTYPE_RESERVED;
MACRO_SADB SADB_IDENTTYPE_USERFQDN;
MACRO_SADB SADB_KEY_FLAGS_MAX;
MACRO_SADB SADB_MAX;
MACRO_SADB SADB_REGISTER;
MACRO_SADB SADB_RESERVED;
MACRO_SADB SADB_SAFLAGS_PFS;
MACRO_SADB SADB_SASTATE_DEAD;
MACRO_SADB SADB_SASTATE_DYING;
MACRO_SADB SADB_SASTATE_LARVAL;
MACRO_SADB SADB_SASTATE_MATURE;
MACRO_SADB SADB_SASTATE_MAX;
MACRO_SADB SADB_SATYPE_AH;
MACRO_SADB SADB_SATYPE_ESP;
MACRO_SADB SADB_SATYPE_MAX;
MACRO_SADB SADB_SATYPE_MIP;
MACRO_SADB SADB_SATYPE_OSPFV2;
MACRO_SADB SADB_SATYPE_RIPV2;
MACRO_SADB SADB_SATYPE_RSVP;
MACRO_SADB SADB_SATYPE_UNSPEC;
MACRO_SADB SADB_UPDATE;
MACRO_SADB SADB_X_AALG_MD5;
MACRO_SADB SADB_X_AALG_NULL;
MACRO_SADB SADB_X_AALG_SHA;
MACRO_SADB SADB_X_AALG_SHA2_256;
MACRO_SADB SADB_X_AALG_SHA2_384;
MACRO_SADB SADB_X_AALG_SHA2_512;
MACRO_SADB SADB_X_CALG_DEFLATE;
MACRO_SADB SADB_X_CALG_LZS;
MACRO_SADB SADB_X_CALG_MAX;
MACRO_SADB SADB_X_CALG_NONE;
MACRO_SADB SADB_X_CALG_OUI;
MACRO_SADB SADB_X_EALG_AES;
MACRO_SADB SADB_X_EALG_AESCBC;
MACRO_SADB SADB_X_EALG_BLOWFISHCBC;
MACRO_SADB SADB_X_EALG_CAST128CBC;
MACRO_SADB SADB_X_EALG_RIJNDAELCBC;
MACRO_SADB SADB_X_EXT_CYCSEQ;
MACRO_SADB SADB_X_EXT_DERIV;
MACRO_SADB SADB_X_EXT_IV4B;
MACRO_SADB SADB_X_EXT_KMPRIVATE;
MACRO_SADB SADB_X_EXT_NONE;
MACRO_SADB SADB_X_EXT_OLD;
MACRO_SADB SADB_X_EXT_PMASK;
MACRO_SADB SADB_X_EXT_POLICY;
MACRO_SADB SADB_X_EXT_PRAND;
MACRO_SADB SADB_X_EXT_PSEQ;
MACRO_SADB SADB_X_EXT_PZERO;
MACRO_SADB SADB_X_EXT_RAWCPI;
MACRO_SADB SADB_X_EXT_SA2;
MACRO_SADB SADB_X_IDENTTYPE_ADDR;
MACRO_SADB SADB_X_LIFETIME_ADDTIME;
MACRO_SADB SADB_X_LIFETIME_ALLOCATIONS;
MACRO_SADB SADB_X_LIFETIME_BYTES;
MACRO_SADB SADB_X_LIFETIME_USETIME;
MACRO_SADB SADB_X_PCHANGE;
MACRO_SADB SADB_X_PROMISC;
MACRO_SADB SADB_X_SATYPE_IPCOMP;
MACRO_SADB SADB_X_SATYPE_POLICY;
MACRO_SADB SADB_X_SPDACQUIRE;
MACRO_SADB SADB_X_SPDADD;
MACRO_SADB SADB_X_SPDDELETE;
MACRO_SADB SADB_X_SPDDELETE2;
MACRO_SADB SADB_X_SPDDUMP;
MACRO_SADB SADB_X_SPDEXPIRE;
MACRO_SADB SADB_X_SPDFLUSH;
MACRO_SADB SADB_X_SPDGET;
MACRO_SADB SADB_X_SPDSETIDX;
MACRO_SADB SADB_X_SPDUPDATE;
MACRO_SALT SALT_TYPE_AFS_LENGTH;
MACRO_SALT SALT_TYPE_NO_LENGTH;
MACRO_SARMAG SARMAG;
MACRO_SASLPLUG SASLPLUG_H;
MACRO_SASLUTIL SASLUTIL_H;
MACRO_SASL SASL_APPNAME;
MACRO_SASL SASL_AUTHSOURCE;
MACRO_SASL SASL_AUTHUSER;
MACRO_SASL SASL_AUTH_EXTERNAL;
MACRO_SASL_UTILS SASL_AUXPROP_AUTHZID;
MACRO_SASL_UTILS SASL_AUXPROP_OVERRIDE;
MACRO_SASL_UTILS SASL_AUXPROP_PLUG_VERSION;
MACRO_SASL SASL_AUX_END;
MACRO_SASL SASL_BADAUTH;
MACRO_SASL SASL_BADMAC;
MACRO_SASL SASL_BADPARAM;
MACRO_SASL SASL_BADPROT;
MACRO_SASL SASL_BADSERV;
MACRO_SASL SASL_BADVERS;
MACRO_SASL SASL_BUFOVER;
MACRO_SASL SASL_CALLBACK;
MACRO_SASL_UTILS SASL_CANONUSER_PLUG_VERSION;
MACRO_SASL SASL_CB_AUTHNAME;
MACRO_SASL SASL_CB_CANON_USER;
MACRO_SASL SASL_CB_CNONCE;
MACRO_SASL SASL_CB_ECHOPROMPT;
MACRO_SASL SASL_CB_GETOPT;
MACRO_SASL SASL_CB_GETPATH;
MACRO_SASL SASL_CB_GETREALM;
MACRO_SASL SASL_CB_LANGUAGE;
MACRO_SASL SASL_CB_LIST_END;
MACRO_SASL SASL_CB_LOG;
MACRO_SASL SASL_CB_NOECHOPROMPT;
MACRO_SASL SASL_CB_PASS;
MACRO_SASL SASL_CB_PROXY_POLICY;
MACRO_SASL SASL_CB_SERVER_USERDB_CHECKPASS;
MACRO_SASL SASL_CB_SERVER_USERDB_SETPASS;
MACRO_SASL SASL_CB_USER;
MACRO_SASL SASL_CB_VERIFYFILE;
MACRO_SASL_UTILS SASL_CLIENT_PLUG_VERSION;
MACRO_SASL SASL_CONTINUE;
MACRO_SASL SASL_CU_AUTHID;
MACRO_SASL SASL_CU_AUTHZID;
MACRO_SASL SASL_CU_NONE;
MACRO_SASL SASL_DEFUSERREALM;
MACRO_SASL SASL_DELEGATEDCREDS;
MACRO_SASL SASL_DISABLED;
MACRO_SASL SASL_ENCRYPT;
MACRO_SASL SASL_EXPIRED;
MACRO_SASL SASL_FAIL;
MACRO_SASL_UTILS SASL_FEAT_ALLOWS_PROXY;
MACRO_SASL_UTILS SASL_FEAT_GETSECRET;
MACRO_SASL_UTILS SASL_FEAT_NEEDSERVERFQDN;
MACRO_SASL_UTILS SASL_FEAT_SERVER_FIRST;
MACRO_SASL_UTILS SASL_FEAT_SERVICE;
MACRO_SASL_UTILS SASL_FEAT_WANT_CLIENT_FIRST;
MACRO_SASL SASL_GETOPTCTX;
MACRO_SASL SASL_H;
$44CBB36E19F6FD8C2CE34633667F03E9 SASL_INFO_LIST_END;
$44CBB36E19F6FD8C2CE34633667F03E9 SASL_INFO_LIST_MECH;
$44CBB36E19F6FD8C2CE34633667F03E9 SASL_INFO_LIST_START;
MACRO_SASL SASL_INTERACT;
MACRO_SASL SASL_IPLOCALPORT;
MACRO_SASL SASL_IPREMOTEPORT;
MACRO_SASL SASL_KRB5_AUTHDATA;
MACRO_SASL SASL_LOG_DEBUG;
MACRO_SASL SASL_LOG_ERR;
MACRO_SASL SASL_LOG_FAIL;
MACRO_SASL SASL_LOG_NONE;
MACRO_SASL SASL_LOG_NOTE;
MACRO_SASL SASL_LOG_PASS;
MACRO_SASL SASL_LOG_TRACE;
MACRO_SASL SASL_LOG_WARN;
MACRO_SASL SASL_MAXOUTBUF;
MACRO_SASL SASL_MECHNAME;
MACRO_SASL SASL_MECHNAMEMAX;
MACRO_SASL SASL_NEED_PROXY;
MACRO_SASL SASL_NOAUTHZ;
MACRO_SASL SASL_NOCHANGE;
MACRO_SASL SASL_NOLOG;
MACRO_SASL SASL_NOMECH;
MACRO_SASL SASL_NOMEM;
MACRO_SASL SASL_NOTDONE;
MACRO_SASL SASL_NOTINIT;
MACRO_SASL SASL_NOUSER;
MACRO_SASL SASL_NOUSERPASS;
MACRO_SASL SASL_NOVERIFY;
MACRO_SASL SASL_OK;
MACRO_SASL SASL_PLUGERR;
MACRO_SASL SASL_PWLOCK;
MACRO_SASL SASL_SEC_FORWARD_SECRECY;
MACRO_SASL SASL_SEC_MAXIMUM;
MACRO_SASL SASL_SEC_MUTUAL_AUTH;
MACRO_SASL SASL_SEC_NOACTIVE;
MACRO_SASL SASL_SEC_NOANONYMOUS;
MACRO_SASL SASL_SEC_NODICTIONARY;
MACRO_SASL SASL_SEC_NOPLAINTEXT;
MACRO_SASL SASL_SEC_PASS_CREDENTIALS;
MACRO_SASL SASL_SEC_PROPS;
MACRO_SASL SASL_SERVERFQDN;
MACRO_SASL_UTILS SASL_SERVER_PLUG_VERSION;
MACRO_SASL SASL_SERVICE;
MACRO_SASL SASL_SET_CREATE;
MACRO_SASL SASL_SET_CURMECH_ONLY;
MACRO_SASL SASL_SET_DISABLE;
MACRO_SASL SASL_SET_NOPLAIN;
MACRO_SASL_UTILS SASL_SET_REMOVE;
MACRO_SASL SASL_SSF;
MACRO_SASL SASL_SSF_EXTERNAL;
MACRO_SASL SASL_SUCCESS_DATA;
MACRO_SASL SASL_TOOWEAK;
MACRO_SASL SASL_TRANS;
MACRO_SASL SASL_TRYAGAIN;
MACRO_SASL SASL_UNAVAIL;
MACRO_SASL SASL_USERNAME;
MACRO_SASL_UTILS SASL_UTILS_VERSION;
MACRO_SASL SASL_VERSION_FULL;
MACRO_SASL SASL_VERSION_MAJOR;
MACRO_SASL SASL_VERSION_MINOR;
MACRO_SASL SASL_VERSION_STEP;
$0D3254EE5F0606DD2967BF158FADA5B5 SASL_VRFY_CONF;
$0D3254EE5F0606DD2967BF158FADA5B5 SASL_VRFY_OTHER;
$0D3254EE5F0606DD2967BF158FADA5B5 SASL_VRFY_PASSWD;
$0D3254EE5F0606DD2967BF158FADA5B5 SASL_VRFY_PLUGIN;
MACRO_SASL SASL_WEAKPASS;
MACRO_SASL SASL_WRONGMECH;
MACRO_SA SA_64REGSET;
MACRO_SA_REPEAT SA_FIRED;
MACRO_SA SA_NOCLDSTOP;
MACRO_SA SA_NOCLDWAIT;
MACRO_SA SA_NODEFER;
MACRO_SA SA_ONSTACK;
MACRO_SA_REPEAT SA_REPEAT;
MACRO_SA SA_RESETHAND;
MACRO_SA SA_RESTART;
MACRO_SA SA_SIGINFO;
MACRO_SA SA_USERSPACE_MASK;
MACRO_SA SA_USERTRAMP;
MACRO_SB SB;
MACRO_SCHAR SCHAR_MAX;
MACRO_SCHAR SCHAR_MIN;
MACRO_SCHED SCHED_FIFO;
MACRO_SCHED SCHED_OTHER;
MACRO_SCHED SCHED_RR;
MACRO_SCM SCM_CREDS;
MACRO_SCM SCM_RIGHTS;
MACRO_SCM SCM_TIMESTAMP;
MACRO_SCM SCM_TIMESTAMP_MONOTONIC;
MACRO_SCOPE SCOPE_DELIMITER;
MACRO_SE SE;
MACRO_SEARCHFS SEARCHFS_MAX_SEARCHPARMS;
MACRO_DAYSPERLYEAR SECSPERDAY;
MACRO_DAYSPERLYEAR SECSPERHOUR;
MACRO_SECSPERMIN SECSPERMIN;
MACRO_SECS_PER SECS_PER_DAY;
MACRO_SECS_PER SECS_PER_HOUR;
MACRO_SECS SECS_PER_MIN;
MACRO_SECTION SECTION_ATTRIBUTES;
MACRO_SECTION_ATTRIBUTES_SYS SECTION_ATTRIBUTES_SYS;
MACRO_SECTION_ATTRIBUTES SECTION_ATTRIBUTES_USR;
MACRO_SECTION SECTION_TYPE;
MACRO_SECURITYGROUP SECURITYGROUP;
MACRO_SECURITYMODEL SECURITYMODEL;
MACRO_SECURITYMODEL SECURITYNAME;
MACRO_SECURITYSTATUS SECURITYSTATUS;
MACRO_SECURITYGROUP SECURITYSTORAGE;
MACRO_SEED SEED_BLOCK_SIZE;
MACRO_SEED SEED_KEY_LENGTH;
MACRO_SEEK SEEK_CUR;
MACRO_SEEK SEEK_END;
MACRO_SEEK SEEK_SET;
MACRO_SEGSIZE SEGSIZE;
MACRO_SEGV SEGV_ACCERR;
MACRO_SEGV SEGV_MAPERR;
MACRO_SEGV SEGV_NOOP;
MACRO_ORDINAL SELF_LIBRARY_ORDINAL;
MACRO_SEL SEL_GDT;
MACRO_SEL SEL_LDT;
MACRO_THREAD_NULL SEMAPHORE_NULL;
MACRO_SEM_A SEM_A;
MACRO_SEM_A SEM_FAILED;
MACRO_SEM_A SEM_R;
MACRO_SEM SEM_UNDO;
MACRO_SEM_A SEM_VALUE_MAX;
MACRO_SLOT SERVICE_SLOT;
MACRO_SETALL SETALL;
MACRO_GETZCNT SETVAL;
MACRO_REQ_MSG SET_REQ_MSG;
MACRO_SE_MAX SE_ALREADY_THERE;
MACRO_SE_MAX SE_APPLICATION_ID;
MACRO_SE_MAX SE_ASSIGNED_ID;
MACRO_SE_MAX SE_DNE;
MACRO_SE_MAX SE_LIBRARY_ID;
MACRO_SE_MAX SE_MAX_IDS;
MACRO_SE_MAX SE_MAX_SUBIDS;
MACRO_SE_MAX SE_MIB_ID;
MACRO_SE_MAX SE_NOMEM;
MACRO_SE_MAX SE_OK;
MACRO_SF SF_APPEND;
MACRO_SF SF_ARCHIVED;
MACRO_SF SF_IMMUTABLE;
MACRO_SF SF_SETTABLE;
MACRO_SG SG_FVMLIB;
MACRO_SG SG_HIGHVM;
MACRO_SG SG_NORELOC;
MACRO_SG SG_PROTECTED_VERSION_1;
MACRO_DIGEST_LENGTH SHA224_DIGEST_LENGTH;
MACRO_SHA256 SHA256_CBLOCK;
MACRO_DIGEST_LENGTH SHA256_DIGEST_LENGTH;
MACRO_DIGEST_LENGTH SHA384_DIGEST_LENGTH;
MACRO_SHA512 SHA512_CBLOCK;
MACRO_DIGEST_LENGTH SHA512_DIGEST_LENGTH;
MACRO_SHA SHA_CBLOCK;
MACRO_SHA SHA_DIGEST_LENGTH;
MACRO_SHA SHA_LAST_BLOCK;
MACRO_SHA SHA_LBLOCK;
MACRO_SHMLBA SHMLBA;
MACRO_SHM_R SHM_R;
MACRO_SHM SHM_RDONLY;
MACRO_SHM SHM_RND;
MACRO_SHM_R SHM_W;
MACRO_USHRT SHRT_MAX;
MACRO_SHRT SHRT_MIN;
MACRO_SHUTDOWN SHUTDOWN_TIME;
MACRO_SHUT SHUT_RD;
MACRO_SHUT SHUT_RDWR;
MACRO_SHUT SHUT_WR;
MACRO_SIDL SIDL;
MACRO_SIGNAL SIGABRT;
MACRO_SIGNAL SIGALRM;
MACRO_SIGNAL SIGBUS;
MACRO_SIGNAL SIGCHLD;
MACRO_SIGNAL SIGCONT;
MACRO_SIGNAL SIGEMT;
MACRO_SIGEV SIGEV_NONE;
MACRO_SIGEV SIGEV_SIGNAL;
MACRO_SIGEV SIGEV_THREAD;
MACRO_SIGNAL SIGFPE;
MACRO_SIGNAL SIGHUP;
MACRO_SIGNAL SIGILL;
MACRO_SIGNAL SIGINFO;
MACRO_SIGNAL SIGINT;
MACRO_SIGNAL SIGIO;
MACRO_SIGNAL SIGIOT;
MACRO_SIGNAL SIGKILL;
MACRO_SIGNATURE_0 SIGNATURE;
MACRO_SIGNAL SIGPIPE;
MACRO_SIGNAL SIGPROF;
MACRO_SIGNAL SIGQUIT;
MACRO_SIGNAL SIGSEGV;
MACRO_MINSIGSTKSZ SIGSTKSZ;
MACRO_SIGNAL SIGSTOP;
MACRO_SIGNAL SIGSYS;
MACRO_SIGNAL SIGTERM;
MACRO_SIGNAL SIGTRAP;
MACRO_SIGNAL SIGTSTP;
MACRO_SIGNAL SIGTTIN;
MACRO_SIGNAL SIGTTOU;
MACRO_SIGNAL SIGURG;
MACRO_SIGNAL SIGUSR1;
MACRO_SIGNAL SIGUSR2;
MACRO_SIGNAL SIGVTALRM;
MACRO_SIGNAL SIGWINCH;
MACRO_SIGNAL SIGXCPU;
MACRO_SIGNAL SIGXFSZ;
MACRO_SIG_ATOMIC SIG_ATOMIC_MAX;
MACRO_SIG_ATOMIC SIG_ATOMIC_MIN;
MACRO_SIG SIG_BLOCK;
MACRO_SIG_REGISTERED SIG_REGISTERED_OK;
MACRO_SIG_REGISTERED SIG_REGISTRATION_FAILED;
MACRO_SIG SIG_SETMASK;
MACRO_SIG SIG_UNBLOCK;
MACRO_SIG_REGISTERED SIG_UNREGISTERED_OK;
MACRO_SIN SIN_PROXY;
MACRO_DOUBLE SIZEOF_DOUBLE;
MACRO_SIZEOF SIZEOF_INT;
MACRO_SIZEOF SIZEOF_INTMAX_T;
MACRO_SIZEOF SIZEOF_LONG;
MACRO_DOUBLE SIZEOF_LONG_DOUBLE;
MACRO_SIZEOF SIZEOF_LONG_LONG;
MACRO_SIZEOF SIZEOF_SHORT;
MACRO_SIZEOF SIZEOF_SOCKADDR_UN_SUN_PATH;
MACRO_SIZE SIZE_MAX;
MACRO_SI SI_ASYNCIO;
MACRO_SI SI_MESGQ;
MACRO_SI SI_QUEUE;
MACRO_SI SI_TIMER;
MACRO_SI SI_USER;
MACRO_SLAPI SLAPI_ABANDON_MSGID;
MACRO_SLAPI SLAPI_ACL_ADD;
MACRO_SLAPI SLAPI_ACL_ALL;
MACRO_SLAPI SLAPI_ACL_COMPARE;
MACRO_SLAPI SLAPI_ACL_DELETE;
MACRO_SLAPI SLAPI_ACL_PROXY;
MACRO_SLAPI SLAPI_ACL_READ;
MACRO_SLAPI SLAPI_ACL_SEARCH;
MACRO_SLAPI SLAPI_ACL_SELF;
MACRO_SLAPI SLAPI_ACL_WRITE;
MACRO_SLAPI SLAPI_ADD_ENTRY;
MACRO_SLAPI SLAPI_ADD_EXISTING_DN_ENTRY;
MACRO_SLAPI SLAPI_ADD_EXISTING_UNIQUEID_ENTRY;
MACRO_SLAPI SLAPI_ADD_PARENT_ENTRY;
MACRO_SLAPI SLAPI_ADD_PARENT_UNIQUEID;
MACRO_SLAPI SLAPI_ADD_RESCONTROL;
MACRO_SLAPI SLAPI_ADD_TARGET;
MACRO_SLAPI SLAPI_ATTR_FLAG_COLLECTIVE;
MACRO_SLAPI SLAPI_ATTR_FLAG_NOUSERMOD;
MACRO_SLAPI SLAPI_ATTR_FLAG_OBSOLETE;
MACRO_SLAPI SLAPI_ATTR_FLAG_OPATTR;
MACRO_SLAPI SLAPI_ATTR_FLAG_READONLY;
MACRO_SLAPI SLAPI_ATTR_FLAG_SINGLE;
MACRO_SLAPI SLAPI_ATTR_FLAG_STD_ATTR;
MACRO_SLAPI SLAPI_BACKEND;
MACRO_SLAPI SLAPI_BACKEND_FLAG_GLOBAL_OVERLAY;
MACRO_SLAPI SLAPI_BACKEND_FLAG_GLUE_INSTANCE;
MACRO_SLAPI SLAPI_BACKEND_FLAG_GLUE_LINKED;
MACRO_SLAPI SLAPI_BACKEND_FLAG_GLUE_SUBORDINATE;
MACRO_SLAPI SLAPI_BACKEND_FLAG_NOLASTMOD;
MACRO_SLAPI SLAPI_BACKEND_FLAG_NO_SCHEMA_CHECK;
MACRO_SLAPI SLAPI_BACKEND_FLAG_OVERLAY;
MACRO_SLAPI SLAPI_BACKEND_FLAG_SHADOW;
MACRO_SLAPI SLAPI_BACKEND_FLAG_SLURP_SHADOW;
MACRO_SLAPI SLAPI_BACKEND_FLAG_SYNC_SHADOW;
MACRO_SLAPI SLAPI_BE_LASTMOD;
MACRO_SLAPI SLAPI_BE_MONITORDN;
MACRO_SLAPI SLAPI_BE_READONLY;
MACRO_SLAPI SLAPI_BE_TYPE;
MACRO_SLAPI SLAPI_BIND_ANONYMOUS;
MACRO_SLAPI SLAPI_BIND_CREDENTIALS;
MACRO_SLAPI SLAPI_BIND_FAIL;
MACRO_SLAPI SLAPI_BIND_METHOD;
MACRO_SLAPI SLAPI_BIND_RET_SASLCREDS;
MACRO_SLAPI SLAPI_BIND_SASLMECHANISM;
MACRO_SLAPI SLAPI_BIND_SUCCESS;
MACRO_SLAPI SLAPI_BIND_TARGET;
MACRO_SLAPI SLAPI_COMPARE_TARGET;
MACRO_SLAPI SLAPI_COMPARE_TYPE;
MACRO_SLAPI SLAPI_COMPARE_VALUE;
MACRO_SLAPI SLAPI_CONFIG_ARGC;
MACRO_SLAPI SLAPI_CONFIG_ARGV;
MACRO_SLAPI SLAPI_CONFIG_FILENAME;
MACRO_SLAPI SLAPI_CONFIG_LINENO;
MACRO_SLAPI SLAPI_CONNECTION;
MACRO_SLAPI SLAPI_CONN_AUTHMETHOD;
MACRO_SLAPI SLAPI_CONN_AUTHTYPE;
MACRO_SLAPI SLAPI_CONN_CERT;
MACRO_SLAPI SLAPI_CONN_CLIENTIP;
MACRO_SLAPI SLAPI_CONN_DN;
MACRO_SLAPI SLAPI_CONN_ID;
MACRO_SLAPI SLAPI_CONN_SERVERIP;
MACRO_SLAPI SLAPI_CONTROLS_ARG;
MACRO_SLAPI SLAPI_DELETE_EXISTING_ENTRY;
MACRO_SLAPI SLAPI_DELETE_TARGET;
MACRO_SLAPI SLAPI_EXT_OP_REQ_OID;
MACRO_SLAPI SLAPI_EXT_OP_REQ_VALUE;
MACRO_SLAPI SLAPI_EXT_OP_RET_OID;
MACRO_SLAPI SLAPI_EXT_OP_RET_VALUE;
MACRO_SLAPI SLAPI_FAIL_DISKFULL;
MACRO_SLAPI SLAPI_FAIL_GENERAL;
MACRO_SLAPI SLAPI_FILTER_SCAN_CONTINUE;
MACRO_SLAPI SLAPI_FILTER_SCAN_ERROR;
MACRO_SLAPI SLAPI_FILTER_SCAN_NOMORE;
MACRO_SLAPI SLAPI_FILTER_SCAN_STOP;
MACRO_SLAPI SLAPI_FILTER_UNKNOWN_FILTER_TYPE;
MACRO_SLAPI SLAPI_IS_INTERNAL_OPERATION;
MACRO_SLAPI SLAPI_IS_REPLICATED_OPERATION;
MACRO_SLAPI_LOG SLAPI_LOG_ACL;
MACRO_SLAPI_LOG SLAPI_LOG_ARGS;
MACRO_SLAPI_LOG SLAPI_LOG_BER;
MACRO_SLAPI_LOG SLAPI_LOG_CACHE;
MACRO_SLAPI_LOG SLAPI_LOG_CONFIG;
MACRO_SLAPI_LOG SLAPI_LOG_CONNS;
MACRO_SLAPI_LOG SLAPI_LOG_FATAL;
MACRO_SLAPI_LOG SLAPI_LOG_FILTER;
MACRO_SLAPI_LOG SLAPI_LOG_HOUSE;
MACRO_SLAPI_LOG SLAPI_LOG_PACKETS;
MACRO_SLAPI_LOG SLAPI_LOG_PARSE;
MACRO_SLAPI_LOG SLAPI_LOG_PLUGIN;
MACRO_SLAPI_LOG SLAPI_LOG_REPL;
MACRO_SLAPI_LOG SLAPI_LOG_SHELL;
MACRO_SLAPI_LOG SLAPI_LOG_TIMING;
MACRO_SLAPI_LOG SLAPI_LOG_TRACE;
MACRO_SLAPI SLAPI_MANAGEDSAIT;
MACRO_SLAPI SLAPI_MATCHINGRULE_DESC;
MACRO_SLAPI SLAPI_MATCHINGRULE_NAME;
MACRO_SLAPI SLAPI_MATCHINGRULE_OBSOLETE;
MACRO_SLAPI SLAPI_MATCHINGRULE_OID;
MACRO_SLAPI SLAPI_MATCHINGRULE_SYNTAX;
MACRO_SLAPI SLAPI_MODIFY_EXISTING_ENTRY;
MACRO_SLAPI SLAPI_MODIFY_MODS;
MACRO_SLAPI SLAPI_MODIFY_TARGET;
MACRO_SLAPI SLAPI_MODRDN_DELOLDRDN;
MACRO_SLAPI SLAPI_MODRDN_EXISTING_ENTRY;
MACRO_SLAPI SLAPI_MODRDN_NEWPARENT_ENTRY;
MACRO_SLAPI SLAPI_MODRDN_NEWRDN;
MACRO_SLAPI SLAPI_MODRDN_NEWSUPERIOR;
MACRO_SLAPI SLAPI_MODRDN_NEWSUPERIOR_ADDRESS;
MACRO_SLAPI SLAPI_MODRDN_PARENT_ENTRY;
MACRO_SLAPI SLAPI_MODRDN_TARGET;
MACRO_SLAPI SLAPI_MODRDN_TARGET_ENTRY;
MACRO_SLAPI SLAPI_NENTRIES;
MACRO_SLAPI SLAPI_OPERATION;
MACRO_SLAPI SLAPI_OPERATION_ABANDON;
MACRO_SLAPI SLAPI_OPERATION_ADD;
MACRO_SLAPI SLAPI_OPERATION_ANY;
MACRO_SLAPI SLAPI_OPERATION_AUTHTYPE;
MACRO_SLAPI SLAPI_OPERATION_BIND;
MACRO_SLAPI SLAPI_OPERATION_COMPARE;
MACRO_SLAPI SLAPI_OPERATION_DELETE;
MACRO_SLAPI SLAPI_OPERATION_EXTENDED;
MACRO_SLAPI SLAPI_OPERATION_ID;
MACRO_SLAPI SLAPI_OPERATION_MODDN;
MACRO_SLAPI SLAPI_OPERATION_MODIFY;
MACRO_SLAPI SLAPI_OPERATION_MODRDN;
MACRO_SLAPI SLAPI_OPERATION_MSGID;
MACRO_SLAPI SLAPI_OPERATION_NONE;
MACRO_SLAPI SLAPI_OPERATION_SEARCH;
MACRO_SLAPI SLAPI_OPERATION_TYPE;
MACRO_SLAPI SLAPI_OPERATION_UNBIND;
MACRO_SLAPI SLAPI_OPINITIATED_TIME;
MACRO_SLAPI SLAPI_OP_EQUAL;
MACRO_SLAPI SLAPI_OP_FLAG_NEVER_CHAIN;
MACRO_SLAPI SLAPI_OP_GREATER;
MACRO_SLAPI SLAPI_OP_GREATER_OR_EQUAL;
MACRO_SLAPI SLAPI_OP_LESS;
MACRO_SLAPI SLAPI_OP_LESS_OR_EQUAL;
MACRO_SLAPI SLAPI_OP_SUBSTRING;
MACRO_SLAPI SLAPI_PARENT_TXN;
MACRO_SLAPI SLAPI_PLUGIN;
MACRO_SLAPI SLAPI_PLUGIN_ACL_ALLOW_ACCESS;
MACRO_SLAPI SLAPI_PLUGIN_ACL_INIT;
MACRO_SLAPI SLAPI_PLUGIN_ACL_MODS_ALLOWED;
MACRO_SLAPI SLAPI_PLUGIN_ACL_MODS_UPDATE;
MACRO_SLAPI SLAPI_PLUGIN_ACL_SYNTAX_CHECK;
MACRO_SLAPI SLAPI_PLUGIN_ARGC;
MACRO_SLAPI SLAPI_PLUGIN_ARGV;
MACRO_SLAPI SLAPI_PLUGIN_AUDIT;
MACRO_SLAPI SLAPI_PLUGIN_AUDIT_DATA;
MACRO_SLAPI SLAPI_PLUGIN_AUDIT_FN;
MACRO_SLAPI SLAPI_PLUGIN_BE_POST_ADD_FN;
MACRO_SLAPI SLAPI_PLUGIN_BE_POST_DELETE_FN;
MACRO_SLAPI SLAPI_PLUGIN_BE_POST_MODIFY_FN;
MACRO_SLAPI SLAPI_PLUGIN_BE_POST_MODRDN_FN;
MACRO_SLAPI SLAPI_PLUGIN_BE_PRE_ADD_FN;
MACRO_SLAPI SLAPI_PLUGIN_BE_PRE_DELETE_FN;
MACRO_SLAPI SLAPI_PLUGIN_BE_PRE_MODIFY_FN;
MACRO_SLAPI SLAPI_PLUGIN_BE_PRE_MODRDN_FN;
MACRO_SLAPI SLAPI_PLUGIN_CLOSE_FN;
MACRO_SLAPI SLAPI_PLUGIN_DATABASE;
MACRO_SLAPI SLAPI_PLUGIN_DB_ABANDON_FN;
MACRO_SLAPI SLAPI_PLUGIN_DB_ABORT_FN;
MACRO_SLAPI SLAPI_PLUGIN_DB_ADD_FN;
MACRO_SLAPI SLAPI_PLUGIN_DB_ARCHIVE2DB_FN;
MACRO_SLAPI SLAPI_PLUGIN_DB_BEGIN_FN;
MACRO_SLAPI SLAPI_PLUGIN_DB_BIND_FN;
MACRO_SLAPI SLAPI_PLUGIN_DB_COMMIT_FN;
MACRO_SLAPI SLAPI_PLUGIN_DB_COMPARE_FN;
MACRO_SLAPI SLAPI_PLUGIN_DB_CONFIG_FN;
MACRO_SLAPI SLAPI_PLUGIN_DB_DB2ARCHIVE_FN;
MACRO_SLAPI SLAPI_PLUGIN_DB_DB2LDIF_FN;
MACRO_SLAPI SLAPI_PLUGIN_DB_DELETE_FN;
MACRO_SLAPI SLAPI_PLUGIN_DB_ENTRY_FN;
MACRO_SLAPI SLAPI_PLUGIN_DB_FLUSH_FN;
MACRO_SLAPI SLAPI_PLUGIN_DB_FREE_RESULT_SET_FN;
MACRO_SLAPI SLAPI_PLUGIN_DB_LDIF2DB_FN;
MACRO_SLAPI SLAPI_PLUGIN_DB_MODIFY_FN;
MACRO_SLAPI SLAPI_PLUGIN_DB_MODRDN_FN;
MACRO_SLAPI SLAPI_PLUGIN_DB_NEXT_SEARCH_ENTRY_FN;
MACRO_SLAPI SLAPI_PLUGIN_DB_REFERRAL_FN;
MACRO_SLAPI SLAPI_PLUGIN_DB_RESULT_FN;
MACRO_SLAPI SLAPI_PLUGIN_DB_SEARCH_FN;
MACRO_SLAPI SLAPI_PLUGIN_DB_SEQ_FN;
MACRO_SLAPI SLAPI_PLUGIN_DB_SIZE_FN;
MACRO_SLAPI SLAPI_PLUGIN_DB_TEST_FN;
MACRO_SLAPI SLAPI_PLUGIN_DB_UNBIND_FN;
MACRO_SLAPI SLAPI_PLUGIN_DESCRIPTION;
MACRO_SLAPI SLAPI_PLUGIN_DESTROY_FN;
MACRO_SLAPI SLAPI_PLUGIN_EXTENDEDOP;
MACRO_SLAPI SLAPI_PLUGIN_EXTENDED_NOT_HANDLED;
MACRO_SLAPI SLAPI_PLUGIN_EXTENDED_SENT_RESULT;
MACRO_SLAPI SLAPI_PLUGIN_EXT_OP_FN;
MACRO_SLAPI SLAPI_PLUGIN_EXT_OP_OIDLIST;
MACRO_SLAPI SLAPI_PLUGIN_IDENTITY;
MACRO_SLAPI SLAPI_PLUGIN_INTERNAL_POST_ABANDON_FN;
MACRO_SLAPI SLAPI_PLUGIN_INTERNAL_POST_ADD_FN;
MACRO_SLAPI SLAPI_PLUGIN_INTERNAL_POST_BIND_FN;
MACRO_SLAPI SLAPI_PLUGIN_INTERNAL_POST_COMPARE_FN;
MACRO_SLAPI SLAPI_PLUGIN_INTERNAL_POST_DELETE_FN;
MACRO_SLAPI SLAPI_PLUGIN_INTERNAL_POST_MODIFY_FN;
MACRO_SLAPI SLAPI_PLUGIN_INTERNAL_POST_MODRDN_FN;
MACRO_SLAPI SLAPI_PLUGIN_INTERNAL_POST_SEARCH_FN;
MACRO_SLAPI SLAPI_PLUGIN_INTERNAL_POST_UNBIND_FN;
MACRO_SLAPI SLAPI_PLUGIN_INTERNAL_PRE_ABANDON_FN;
MACRO_SLAPI SLAPI_PLUGIN_INTERNAL_PRE_ADD_FN;
MACRO_SLAPI SLAPI_PLUGIN_INTERNAL_PRE_BIND_FN;
MACRO_SLAPI SLAPI_PLUGIN_INTERNAL_PRE_COMPARE_FN;
MACRO_SLAPI SLAPI_PLUGIN_INTERNAL_PRE_DELETE_FN;
MACRO_SLAPI SLAPI_PLUGIN_INTERNAL_PRE_MODIFY_FN;
MACRO_SLAPI SLAPI_PLUGIN_INTERNAL_PRE_MODRDN_FN;
MACRO_SLAPI SLAPI_PLUGIN_INTERNAL_PRE_SEARCH_FN;
MACRO_SLAPI SLAPI_PLUGIN_INTERNAL_PRE_UNBIND_FN;
MACRO_SLAPI SLAPI_PLUGIN_INTOP_RESULT;
MACRO_SLAPI SLAPI_PLUGIN_INTOP_SEARCH_ENTRIES;
MACRO_SLAPI SLAPI_PLUGIN_INTOP_SEARCH_REFERRALS;
MACRO_SLAPI SLAPI_PLUGIN_MATCHINGRULE;
MACRO_SLAPI SLAPI_PLUGIN_MR_FILTER_CREATE_FN;
MACRO_SLAPI SLAPI_PLUGIN_MR_FILTER_INDEX_FN;
MACRO_SLAPI SLAPI_PLUGIN_MR_FILTER_MATCH_FN;
MACRO_SLAPI SLAPI_PLUGIN_MR_FILTER_RESET_FN;
MACRO_SLAPI SLAPI_PLUGIN_MR_FILTER_REUSABLE;
MACRO_SLAPI SLAPI_PLUGIN_MR_INDEXER_CREATE_FN;
MACRO_SLAPI SLAPI_PLUGIN_MR_INDEX_FN;
MACRO_SLAPI SLAPI_PLUGIN_MR_KEYS;
MACRO_SLAPI SLAPI_PLUGIN_MR_OID;
MACRO_SLAPI SLAPI_PLUGIN_MR_QUERY_OPERATOR;
MACRO_SLAPI SLAPI_PLUGIN_MR_TYPE;
MACRO_SLAPI SLAPI_PLUGIN_MR_USAGE;
MACRO_SLAPI SLAPI_PLUGIN_MR_USAGE_INDEX;
MACRO_SLAPI SLAPI_PLUGIN_MR_USAGE_SORT;
MACRO_SLAPI SLAPI_PLUGIN_MR_VALUE;
MACRO_SLAPI SLAPI_PLUGIN_MR_VALUES;
MACRO_SLAPI SLAPI_PLUGIN_OBJECT;
MACRO_SLAPI SLAPI_PLUGIN_OPRETURN;
MACRO_SLAPI SLAPI_PLUGIN_POSTOPERATION;
MACRO_SLAPI SLAPI_PLUGIN_POST_ABANDON_FN;
MACRO_SLAPI SLAPI_PLUGIN_POST_ADD_FN;
MACRO_SLAPI SLAPI_PLUGIN_POST_BIND_FN;
MACRO_SLAPI SLAPI_PLUGIN_POST_COMPARE_FN;
MACRO_SLAPI SLAPI_PLUGIN_POST_DELETE_FN;
MACRO_SLAPI SLAPI_PLUGIN_POST_ENTRY_FN;
MACRO_SLAPI SLAPI_PLUGIN_POST_MODIFY_FN;
MACRO_SLAPI SLAPI_PLUGIN_POST_MODRDN_FN;
MACRO_SLAPI SLAPI_PLUGIN_POST_REFERRAL_FN;
MACRO_SLAPI SLAPI_PLUGIN_POST_RESULT_FN;
MACRO_SLAPI SLAPI_PLUGIN_POST_SEARCH_FN;
MACRO_SLAPI SLAPI_PLUGIN_POST_UNBIND_FN;
MACRO_SLAPI SLAPI_PLUGIN_PREOPERATION;
MACRO_SLAPI SLAPI_PLUGIN_PRE_ABANDON_FN;
MACRO_SLAPI SLAPI_PLUGIN_PRE_ADD_FN;
MACRO_SLAPI SLAPI_PLUGIN_PRE_BIND_FN;
MACRO_SLAPI SLAPI_PLUGIN_PRE_COMPARE_FN;
MACRO_SLAPI SLAPI_PLUGIN_PRE_DELETE_FN;
MACRO_SLAPI SLAPI_PLUGIN_PRE_ENTRY_FN;
MACRO_SLAPI SLAPI_PLUGIN_PRE_MODIFY_FN;
MACRO_SLAPI SLAPI_PLUGIN_PRE_MODRDN_FN;
MACRO_SLAPI SLAPI_PLUGIN_PRE_REFERRAL_FN;
MACRO_SLAPI SLAPI_PLUGIN_PRE_RESULT_FN;
MACRO_SLAPI SLAPI_PLUGIN_PRE_SEARCH_FN;
MACRO_SLAPI SLAPI_PLUGIN_PRE_UNBIND_FN;
MACRO_SLAPI SLAPI_PLUGIN_PRIVATE;
MACRO_SLAPI SLAPI_PLUGIN_START_FN;
MACRO_SLAPI SLAPI_PLUGIN_SYNTAX;
MACRO_SLAPI SLAPI_PLUGIN_SYNTAX_ASSERTION2KEYS_AVA;
MACRO_SLAPI SLAPI_PLUGIN_SYNTAX_ASSERTION2KEYS_SUB;
MACRO_SLAPI SLAPI_PLUGIN_SYNTAX_COMPARE;
MACRO_SLAPI SLAPI_PLUGIN_SYNTAX_FILTER_AVA;
MACRO_SLAPI SLAPI_PLUGIN_SYNTAX_FILTER_SUB;
MACRO_SLAPI SLAPI_PLUGIN_SYNTAX_FLAGS;
MACRO_SLAPI SLAPI_PLUGIN_SYNTAX_FLAG_ORDERING;
MACRO_SLAPI SLAPI_PLUGIN_SYNTAX_FLAG_ORKEYS;
MACRO_SLAPI SLAPI_PLUGIN_SYNTAX_NAMES;
MACRO_SLAPI SLAPI_PLUGIN_SYNTAX_OID;
MACRO_SLAPI SLAPI_PLUGIN_SYNTAX_VALUES2KEYS;
MACRO_SLAPI SLAPI_PLUGIN_TYPE;
MACRO_SLAPI SLAPI_PLUGIN_VERSION;
MACRO_SLAPI SLAPI_REQCONTROLS;
MACRO_SLAPI SLAPI_REQUESTOR_DN;
MACRO_SLAPI SLAPI_REQUESTOR_ISROOT;
MACRO_SLAPI SLAPI_REQUESTOR_ISUPDATEDN;
MACRO_SLAPI SLAPI_RESCONTROLS;
MACRO_SLAPI SLAPI_RESULT_CODE;
MACRO_SLAPI SLAPI_RESULT_MATCHED;
MACRO_SLAPI SLAPI_RESULT_TEXT;
MACRO_SLAPI SLAPI_SEARCH_ATTRS;
MACRO_SLAPI SLAPI_SEARCH_ATTRSONLY;
MACRO_SLAPI SLAPI_SEARCH_DEREF;
MACRO_SLAPI SLAPI_SEARCH_FILTER;
MACRO_SLAPI SLAPI_SEARCH_REFERRALS;
MACRO_SLAPI SLAPI_SEARCH_RESULT_ENTRY;
MACRO_SLAPI SLAPI_SEARCH_RESULT_SET;
MACRO_SLAPI SLAPI_SEARCH_SCOPE;
MACRO_SLAPI SLAPI_SEARCH_SIZELIMIT;
MACRO_SLAPI SLAPI_SEARCH_STRFILTER;
MACRO_SLAPI SLAPI_SEARCH_TARGET;
MACRO_SLAPI SLAPI_SEARCH_TIMELIMIT;
MACRO_SLAPI SLAPI_STR2ENTRY_ADDRDNVALS;
MACRO_SLAPI SLAPI_STR2ENTRY_BIGENTRY;
MACRO_SLAPI SLAPI_STR2ENTRY_EXPAND_OBJECTCLASSES;
MACRO_SLAPI SLAPI_STR2ENTRY_IGNORE_STATE;
MACRO_SLAPI SLAPI_STR2ENTRY_INCLUDE_VERSION_STR;
MACRO_SLAPI SLAPI_STR2ENTRY_NOT_WELL_FORMED_LDIF;
MACRO_SLAPI SLAPI_STR2ENTRY_REMOVEDUPVALS;
MACRO_SLAPI SLAPI_STR2ENTRY_TOMBSTONE_CHECK;
MACRO_SLAPI SLAPI_TARGET_ADDRESS;
MACRO_SLAPI SLAPI_TARGET_DN;
MACRO_SLAPI SLAPI_TARGET_UNIQUEID;
MACRO_SLAPI SLAPI_TXN;
MACRO_SLAPI SLAPI_TYPE_CMP_BASE;
MACRO_SLAPI SLAPI_TYPE_CMP_EXACT;
MACRO_SLAPI SLAPI_TYPE_CMP_SUBTYPE;
MACRO_SLAPI SLAPI_X_ADD_STRUCTURAL_CLASS;
MACRO_SLAPI SLAPI_X_CONN_CLIENTPATH;
MACRO_SLAPI SLAPI_X_CONN_IS_UDP;
MACRO_SLAPI SLAPI_X_CONN_SASL_CONTEXT;
MACRO_SLAPI SLAPI_X_CONN_SERVERPATH;
MACRO_SLAPI SLAPI_X_CONN_SSF;
MACRO_SLAPI SLAPI_X_GROUP_ATTRIBUTE;
MACRO_SLAPI SLAPI_X_GROUP_ENTRY;
MACRO_SLAPI SLAPI_X_GROUP_OPERATION_DN;
MACRO_SLAPI SLAPI_X_GROUP_TARGET_ENTRY;
MACRO_SLAPI SLAPI_X_MANAGEDIT;
MACRO_SLAPI SLAPI_X_OPERATION_DELETE_GLUE_PARENT;
MACRO_SLAPI SLAPI_X_OPERATION_NO_SCHEMA_CHECK;
MACRO_SLAPI SLAPI_X_OPERATION_NO_SUBORDINATE_GLUE;
MACRO_SLAPI SLAPI_X_PLUGIN_POST_GROUP_FN;
MACRO_SLAPI SLAPI_X_PLUGIN_PRE_GROUP_FN;
MACRO_SLAPI SLAPI_X_RELAX;
MACRO_SLC SLC_ABORT;
MACRO_SLC_NOSUPPORT SLC_ACK;
MACRO_SLC SLC_AO;
MACRO_SLC SLC_AYT;
MACRO_SLC SLC_BRK;
MACRO_SLC_NOSUPPORT SLC_CANTCHANGE;
MACRO_SLC_NOSUPPORT SLC_DEFAULT;
MACRO_SLC SLC_EC;
MACRO_SLC SLC_EL;
MACRO_SLC SLC_EOF;
MACRO_SLC SLC_EOR;
MACRO_SLC SLC_EW;
MACRO_SLC_NOSUPPORT SLC_FLAGS;
MACRO_SLC_NOSUPPORT SLC_FLUSHIN;
MACRO_SLC_NOSUPPORT SLC_FLUSHOUT;
MACRO_SLC SLC_FORW1;
MACRO_SLC SLC_FORW2;
MACRO_SLC_NOSUPPORT SLC_FUNC;
MACRO_SLC SLC_IP;
MACRO_SLC_NOSUPPORT SLC_LEVELBITS;
MACRO_SLC SLC_LNEXT;
MACRO_SLC_NOSUPPORT SLC_NOSUPPORT;
MACRO_SLC SLC_RP;
MACRO_SLC SLC_SUSP;
MACRO_SLC SLC_SYNCH;
MACRO_SLC_NOSUPPORT SLC_VALUE;
MACRO_SLC_NOSUPPORT SLC_VARIABLE;
MACRO_SLC SLC_XOFF;
MACRO_SLC SLC_XON;
MACRO_TTYDISC SLIPDISC;
MACRO_PIPE_SIZE SMALL_PIPE_SIZE;
MACRO_SMIME_TEXT SMIME_BINARY;
MACRO_SMIME SMIME_CRLFEOL;
MACRO_SMIME_TEXT SMIME_DETACHED;
MACRO_SMIME_TEXT SMIME_NOATTR;
MACRO_SMIME_TEXT SMIME_NOCERTS;
MACRO_SMIME_TEXT SMIME_NOCHAIN;
MACRO_SMIME_TEXT SMIME_NOINTERN;
MACRO_SMIME_TEXT SMIME_NOSIGS;
MACRO_SMIME_TEXT SMIME_NOVERIFY;
MACRO_SMIME SMIME_OLDMIME;
MACRO_SMIME SMIME_STREAM;
MACRO_SMIME_TEXT SMIME_TEXT;
MACRO_SMI SMI_COUNTER32;
MACRO_SMI SMI_COUNTER64;
MACRO_SMI SMI_GAUGE32;
MACRO_SMI SMI_INTEGER;
MACRO_SMI SMI_IPADDRESS;
MACRO_SMI SMI_NULLOBJ;
MACRO_SMI SMI_OBJID;
MACRO_SMI SMI_OPAQUE;
MACRO_SMI SMI_STRING;
MACRO_SMI SMI_TIMETICKS;
MACRO_SMI SMI_UNSIGNED32;
MACRO_SM SM_COW;
MACRO_SM SM_EMPTY;
MACRO_SM SM_LARGE_PAGE;
MACRO_SM_MAXSTRLEN SM_MAXSTRLEN;
MACRO_SM_MAXSTRLEN SM_MON;
MACRO_SM_MAXSTRLEN SM_NOTIFY;
MACRO_SM SM_PRIVATE;
MACRO_SM SM_PRIVATE_ALIASED;
MACRO_SM_MAXSTRLEN SM_PROG;
MACRO_SM SM_SHARED;
MACRO_SM SM_SHARED_ALIASED;
MACRO_SM_MAXSTRLEN SM_SIMU_CRASH;
MACRO_SM_MAXSTRLEN SM_STAT;
MACRO_SM SM_TRUESHARED;
MACRO_SM_MAXSTRLEN SM_UNMON;
MACRO_SM_MAXSTRLEN SM_UNMON_ALL;
MACRO_SM_MAXSTRLEN SM_VERS;
MACRO_SNMPADMINLENGTH SNMPADMINLENGTH;
MACRO_SNMPD SNMPD_CALLBACK_ACM_CHECK;
MACRO_SNMPD SNMPD_CALLBACK_ACM_CHECK_INITIAL;
MACRO_SNMPD SNMPD_CALLBACK_ACM_CHECK_SUBTREE;
MACRO_SNMPD SNMPD_CALLBACK_INDEX_START;
MACRO_SNMPD SNMPD_CALLBACK_INDEX_STOP;
MACRO_SNMPD SNMPD_CALLBACK_PRE_UPDATE_CONFIG;
MACRO_SNMPD SNMPD_CALLBACK_REGISTER_NOTIFICATIONS;
MACRO_SNMPD SNMPD_CALLBACK_REGISTER_OID;
MACRO_SNMPD SNMPD_CALLBACK_REG_SYSOR;
MACRO_SNMPD SNMPD_CALLBACK_REQ_REG_SYSOR;
MACRO_SNMPD SNMPD_CALLBACK_REQ_UNREG_SYSOR;
MACRO_SNMPD SNMPD_CALLBACK_REQ_UNREG_SYSOR_SESS;
MACRO_SNMPD SNMPD_CALLBACK_SEND_TRAP1;
MACRO_SNMPD SNMPD_CALLBACK_SEND_TRAP2;
MACRO_SNMPD SNMPD_CALLBACK_UNREGISTER_OID;
MACRO_SNMPD SNMPD_CALLBACK_UNREG_SYSOR;
MACRO_SNMPERR SNMPERR_ABORT;
MACRO_SNMPERR SNMPERR_ASN_PARSE_ERR;
MACRO_SNMPERR SNMPERR_AUTHENTICATION_FAILURE;
MACRO_SNMPERR SNMPERR_BAD_ACL;
MACRO_SNMPERR SNMPERR_BAD_ADDRESS;
MACRO_SNMPERR SNMPERR_BAD_ASN1_BUILD;
MACRO_SNMPERR SNMPERR_BAD_COMMUNITY;
MACRO_SNMPERR SNMPERR_BAD_CONTEXT;
MACRO_SNMPERR SNMPERR_BAD_DST_PARTY;
MACRO_SNMPERR SNMPERR_BAD_ENG_ID;
MACRO_SNMPERR SNMPERR_BAD_LOCPORT;
MACRO_SNMPERR SNMPERR_BAD_NAME;
MACRO_SNMPERR SNMPERR_BAD_PARSE;
MACRO_SNMPERR SNMPERR_BAD_PARTY;
MACRO_SNMPERR SNMPERR_BAD_RECVFROM;
MACRO_SNMPERR SNMPERR_BAD_REPEATERS;
MACRO_SNMPERR SNMPERR_BAD_REPETITIONS;
MACRO_SNMPERR SNMPERR_BAD_SEC_LEVEL;
MACRO_SNMPERR SNMPERR_BAD_SEC_NAME;
MACRO_SNMPERR SNMPERR_BAD_SENDTO;
MACRO_SNMPERR SNMPERR_BAD_SESSION;
MACRO_SNMPERR SNMPERR_BAD_SRC_PARTY;
MACRO_SNMPERR SNMPERR_BAD_SUBID;
MACRO_SNMPERR SNMPERR_BAD_VERSION;
MACRO_SNMPERR SNMPERR_DECRYPTION_ERR;
MACRO_SNMPERR SNMPERR_GENERR;
MACRO_SNMPERR SNMPERR_INVALID_MSG;
MACRO_SNMPERR SNMPERR_JUST_A_CONTEXT_PROBE;
MACRO_SNMPERR SNMPERR_KRB5;
MACRO_SNMPERR SNMPERR_KT_NOT_AVAILABLE;
MACRO_SNMPERR SNMPERR_LONG_OID;
MACRO_SNMPERR SNMPERR_MALLOC;
MACRO_SNMPERR SNMPERR_MAX;
MACRO_SNMPERR SNMPERR_MAX_SUBID;
MACRO_SNMPERR SNMPERR_NOAUTH_DESPRIV;
MACRO_SNMPERR SNMPERR_NOMIB;
MACRO_SNMPERR SNMPERR_NOT_IN_TIME_WINDOW;
MACRO_SNMPERR SNMPERR_NO_SOCKET;
MACRO_SNMPERR SNMPERR_NO_VARS;
MACRO_SNMPERR SNMPERR_NULL_PDU;
MACRO_SNMPERR SNMPERR_OID_NONINCREASING;
MACRO_SNMPERR SNMPERR_PROTOCOL;
MACRO_SNMPERR SNMPERR_RANGE;
MACRO_SNMPERR SNMPERR_SC_GENERAL_FAILURE;
MACRO_SNMPERR SNMPERR_SC_NOT_CONFIGURED;
MACRO_SNMPERR SNMPERR_SUCCESS;
MACRO_SNMPERR SNMPERR_TIMEOUT;
MACRO_SNMPERR SNMPERR_TLS_NO_CERTIFICATE;
MACRO_SNMPERR SNMPERR_TOO_LONG;
MACRO_SNMPERR SNMPERR_TRANSPORT_CONFIG_ERROR;
MACRO_SNMPERR SNMPERR_TRANSPORT_NO_CONFIG;
MACRO_SNMPERR SNMPERR_UNKNOWN_ENG_ID;
MACRO_SNMPERR SNMPERR_UNKNOWN_OBJID;
MACRO_SNMPERR SNMPERR_UNKNOWN_PDU;
MACRO_SNMPERR SNMPERR_UNKNOWN_REPORT;
MACRO_SNMPERR SNMPERR_UNKNOWN_SEC_MODEL;
MACRO_SNMPERR SNMPERR_UNKNOWN_USER_NAME;
MACRO_SNMPERR SNMPERR_UNSUPPORTED_SEC_LEVEL;
MACRO_SNMPERR SNMPERR_USM_AUTHENTICATIONFAILURE;
MACRO_SNMPERR SNMPERR_USM_DECRYPTIONERROR;
MACRO_SNMPERR SNMPERR_USM_ENCRYPTIONERROR;
MACRO_SNMPERR SNMPERR_USM_GENERICERROR;
MACRO_SNMPERR SNMPERR_USM_NOTINTIMEWINDOW;
MACRO_SNMPERR SNMPERR_USM_PARSEERROR;
MACRO_SNMPERR SNMPERR_USM_UNKNOWNENGINEID;
MACRO_SNMPERR SNMPERR_USM_UNKNOWNSECURITYNAME;
MACRO_SNMPERR SNMPERR_USM_UNSUPPORTEDSECURITYLEVEL;
MACRO_SNMPERR SNMPERR_V1_IN_V2;
MACRO_SNMPERR SNMPERR_V2_IN_V1;
MACRO_SNMPERR SNMPERR_VALUE;
MACRO_SNMPERR SNMPERR_VAR_TYPE;
MACRO_SNMPV3 SNMPV3_IGNORE_UNAUTH_REPORTS;
MACRO_SNMP SNMP_CALLBACK_APPLICATION;
MACRO_SNMP SNMP_CALLBACK_LIBRARY;
MACRO_SNMP SNMP_CALLBACK_LOGGING;
MACRO_SNMP SNMP_CALLBACK_POST_PREMIB_READ_CONFIG;
MACRO_SNMP SNMP_CALLBACK_POST_READ_CONFIG;
MACRO_SNMP SNMP_CALLBACK_PRE_PREMIB_READ_CONFIG;
MACRO_SNMP SNMP_CALLBACK_PRE_READ_CONFIG;
MACRO_SNMP SNMP_CALLBACK_SESSION_INIT;
MACRO_SNMP SNMP_CALLBACK_SHUTDOWN;
MACRO_SNMP SNMP_CALLBACK_STORE_DATA;
MACRO_SNMP_DEFAULT SNMP_DEFAULT_ADDRESS;
MACRO_SNMP_DEFAULT SNMP_DEFAULT_COMMUNITY_LEN;
MACRO_SNMP_DEFAULT SNMP_DEFAULT_ENTERPRISE_LENGTH;
MACRO_SNMP_DEFAULT SNMP_DEFAULT_ERRINDEX;
MACRO_SNMP_DEFAULT SNMP_DEFAULT_ERRSTAT;
MACRO_SNMP_DEFAULT SNMP_DEFAULT_MSGID;
MACRO_SNMP_DEFAULT SNMP_DEFAULT_PEERNAME;
MACRO_SNMP_DEFAULT SNMP_DEFAULT_REMPORT;
MACRO_SNMP_DEFAULT SNMP_DEFAULT_REQID;
MACRO_SNMP_DEFAULT SNMP_DEFAULT_RETRIES;
MACRO_SNMP_DEFAULT SNMP_DEFAULT_SECMODEL;
MACRO_SNMP_DEFAULT SNMP_DEFAULT_TIME;
MACRO_SNMP_DEFAULT SNMP_DEFAULT_TIMEOUT;
MACRO_SNMP_DEFAULT SNMP_DEFAULT_VERSION;
MACRO_SNMP_DETAIL SNMP_DETAIL_SIZE;
MACRO_SNMP_PORT SNMP_ENDOFMIBVIEW;
MACRO_SNMP_PORT SNMP_ERR_AUTHORIZATIONERROR;
MACRO_SNMP_PORT SNMP_ERR_BADVALUE;
MACRO_SNMP_PORT SNMP_ERR_COMMITFAILED;
MACRO_SNMP_PORT SNMP_ERR_GENERR;
MACRO_SNMP_PORT SNMP_ERR_INCONSISTENTNAME;
MACRO_SNMP_PORT SNMP_ERR_INCONSISTENTVALUE;
MACRO_SNMP_PORT SNMP_ERR_NOACCESS;
MACRO_SNMP_PORT SNMP_ERR_NOCREATION;
MACRO_SNMP_PORT SNMP_ERR_NOERROR;
MACRO_SNMP_PORT SNMP_ERR_NOSUCHNAME;
MACRO_SNMP_PORT SNMP_ERR_NOTWRITABLE;
MACRO_SNMP_PORT SNMP_ERR_READONLY;
MACRO_SNMP_PORT SNMP_ERR_RESOURCEUNAVAILABLE;
MACRO_SNMP_PORT SNMP_ERR_TOOBIG;
MACRO_SNMP_PORT SNMP_ERR_UNDOFAILED;
MACRO_SNMP_PORT SNMP_ERR_WRONGENCODING;
MACRO_SNMP_PORT SNMP_ERR_WRONGLENGTH;
MACRO_SNMP_PORT SNMP_ERR_WRONGTYPE;
MACRO_SNMP_PORT SNMP_ERR_WRONGVALUE;
MACRO_SNMP_MAXPATH SNMP_FILEMODE_CLOSED;
MACRO_SNMP_MAXPATH SNMP_FILEMODE_OPEN;
MACRO_SNMP_DETAIL SNMP_FLAGS_DONT_PROBE;
MACRO_SNMP_DETAIL SNMP_FLAGS_LISTENING;
MACRO_SNMP_DETAIL SNMP_FLAGS_RESP_CALLBACK;
MACRO_SNMP_DETAIL SNMP_FLAGS_STREAM_SOCKET;
MACRO_SNMP_DETAIL SNMP_FLAGS_STRIKE1;
MACRO_SNMP_DETAIL SNMP_FLAGS_STRIKE2;
MACRO_SNMP_DETAIL SNMP_FLAGS_SUBSESSION;
MACRO_SNMP_DETAIL SNMP_FLAGS_UDP_BROADCAST;
MACRO_SNMP_DETAIL SNMP_FLAGS_USER_CREATED;
MACRO_SNMP_MAXPATH SNMP_MAXBUF;
MACRO_SNMP_MAXPATH SNMP_MAXBUF_MEDIUM;
MACRO_SNMP_MAXPATH SNMP_MAXBUF_MESSAGE;
MACRO_SNMP_MAXPATH SNMP_MAXBUF_SMALL;
MACRO_SNMP_MAXPATH SNMP_MAXOID;
MACRO_SNMP_MAXPATH SNMP_MAXPATH;
MACRO_SNMP_MAXPATH SNMP_MAX_CMDLINE_OIDS;
MACRO_SNMP_DEFAULT SNMP_MAX_CONTEXT_SIZE;
MACRO_SNMP_DEFAULT SNMP_MAX_ENG_SIZE;
MACRO_SNMP_PORT SNMP_MAX_LEN;
MACRO_SNMP_DEFAULT SNMP_MAX_MSG_SIZE;
MACRO_SNMP_DEFAULT SNMP_MAX_MSG_V3_HDRS;
MACRO_SNMP_MAX SNMP_MAX_PDU_SIZE;
MACRO_SNMP_DEFAULT SNMP_MAX_SEC_NAME_SIZE;
MACRO_SNMP_PORT SNMP_MIN_MAX_LEN;
MACRO_SNMP_TRAP SNMP_MP_MODEL_SNMPv1;
MACRO_SNMP_TRAP SNMP_MP_MODEL_SNMPv2c;
MACRO_SNMP_TRAP SNMP_MP_MODEL_SNMPv2p;
MACRO_SNMP_TRAP SNMP_MP_MODEL_SNMPv2u;
MACRO_SNMP_TRAP SNMP_MP_MODEL_SNMPv3;
MACRO_SNMP_TRAP SNMP_MSG_FLAG_AUTH_BIT;
MACRO_SNMP_TRAP SNMP_MSG_FLAG_PRIV_BIT;
MACRO_SNMP_TRAP SNMP_MSG_FLAG_RPRT_BIT;
MACRO_SNMP_PORT SNMP_MSG_GET;
MACRO_SNMP_PORT SNMP_MSG_GETBULK;
MACRO_SNMP_PORT SNMP_MSG_GETNEXT;
MACRO_SNMP_PORT SNMP_MSG_INFORM;
MACRO_SNMP_PORT SNMP_MSG_INTERNAL_CHECK_CONSISTENCY;
MACRO_SNMP_PORT SNMP_MSG_INTERNAL_CHECK_VALUE;
MACRO_SNMP_PORT SNMP_MSG_INTERNAL_COMMIT;
MACRO_SNMP_PORT SNMP_MSG_INTERNAL_GET_STASH;
MACRO_SNMP_PORT SNMP_MSG_INTERNAL_IRREVERSIBLE_COMMIT;
MACRO_SNMP_PORT SNMP_MSG_INTERNAL_OBJECT_LOOKUP;
MACRO_SNMP_PORT SNMP_MSG_INTERNAL_POST_REQUEST;
MACRO_SNMP_PORT SNMP_MSG_INTERNAL_PRE_REQUEST;
MACRO_SNMP_PORT SNMP_MSG_INTERNAL_ROW_CREATE;
MACRO_SNMP_PORT SNMP_MSG_INTERNAL_SET_ACTION;
MACRO_SNMP_PORT SNMP_MSG_INTERNAL_SET_BEGIN;
MACRO_SNMP_PORT SNMP_MSG_INTERNAL_SET_COMMIT;
MACRO_SNMP_PORT SNMP_MSG_INTERNAL_SET_FREE;
MACRO_SNMP_PORT SNMP_MSG_INTERNAL_SET_MAX;
MACRO_SNMP_PORT SNMP_MSG_INTERNAL_SET_RESERVE1;
MACRO_SNMP_PORT SNMP_MSG_INTERNAL_SET_RESERVE2;
MACRO_SNMP_PORT SNMP_MSG_INTERNAL_SET_UNDO;
MACRO_SNMP_PORT SNMP_MSG_INTERNAL_SET_VALUE;
MACRO_SNMP_PORT SNMP_MSG_INTERNAL_UNDO_CLEANUP;
MACRO_SNMP_PORT SNMP_MSG_INTERNAL_UNDO_COMMIT;
MACRO_SNMP_PORT SNMP_MSG_INTERNAL_UNDO_SET;
MACRO_SNMP_PORT SNMP_MSG_INTERNAL_UNDO_SETUP;
MACRO_SNMP_PORT SNMP_MSG_REPORT;
MACRO_SNMP_PORT SNMP_MSG_RESPONSE;
MACRO_SNMP_PORT SNMP_MSG_SET;
MACRO_SNMP_PORT SNMP_MSG_TRAP;
MACRO_SNMP_PORT SNMP_MSG_TRAP2;
MACRO_SNMP_PORT SNMP_NOSUCHINSTANCE;
MACRO_SNMP_PORT SNMP_NOSUCHOBJECT;
MACRO_SNMP_PDU SNMP_PDU_GET;
MACRO_SNMP_PDU SNMP_PDU_GETBULK;
MACRO_SNMP_PDU SNMP_PDU_GETNEXT;
MACRO_SNMP_PDU SNMP_PDU_INFORM;
MACRO_SNMP_PDU SNMP_PDU_REPORT;
MACRO_SNMP_PDU SNMP_PDU_RESPONSE;
MACRO_SNMP_PDU SNMP_PDU_SET;
MACRO_SNMP_PDU SNMP_PDU_V2TRAP;
MACRO_SNMP_PORT SNMP_PORT;
MACRO_SNMP_TRAP SNMP_ROW_ACTIVE;
MACRO_SNMP_TRAP SNMP_ROW_CREATEANDGO;
MACRO_SNMP_TRAP SNMP_ROW_CREATEANDWAIT;
MACRO_SNMP_TRAP SNMP_ROW_DESTROY;
MACRO_SNMP_TRAP SNMP_ROW_NONEXISTENT;
MACRO_SNMP_TRAP SNMP_ROW_NOTINSERVICE;
MACRO_SNMP_TRAP SNMP_ROW_NOTREADY;
MACRO_SNMP_TRAP SNMP_SEC_LEVEL_AUTHNOPRIV;
MACRO_SNMP_TRAP SNMP_SEC_LEVEL_AUTHPRIV;
MACRO_SNMP_TRAP SNMP_SEC_LEVEL_NOAUTH;
MACRO_SNMP_TRAP SNMP_SEC_MODEL_ANY;
MACRO_SNMP_TRAP SNMP_SEC_MODEL_SNMPv1;
MACRO_SNMP_TRAP SNMP_SEC_MODEL_SNMPv2c;
MACRO_SNMP_TRAP SNMP_SEC_MODEL_SNMPv2p;
MACRO_SNMP_TRAP SNMP_SEC_MODEL_TSM;
MACRO_SNMP_TRAP SNMP_SEC_MODEL_USM;
MACRO_SNMP_DEFAULT SNMP_SEC_PARAM_BUF_SIZE;
MACRO_SNMP_SESS SNMP_SESS_AUTHORITATIVE;
MACRO_SNMP_SESS SNMP_SESS_NONAUTHORITATIVE;
MACRO_SNMP_SESS SNMP_SESS_UNKNOWNAUTH;
MACRO_SNMP_TRAP SNMP_STORAGE_NONE;
MACRO_SNMP_TRAP SNMP_STORAGE_NONVOLATILE;
MACRO_SNMP_TRAP SNMP_STORAGE_OTHER;
MACRO_SNMP_TRAP SNMP_STORAGE_PERMANENT;
MACRO_SNMP_TRAP SNMP_STORAGE_READONLY;
MACRO_SNMP_TRAP SNMP_STORAGE_VOLATILE;
MACRO_SNMP_TRANS SNMP_TRANS_AES_AES128_PADSIZE;
MACRO_SNMP_TRANS SNMP_TRANS_AES_PADSIZE;
MACRO_SNMP_TRANS SNMP_TRANS_AUTHLEN_HMAC96;
MACRO_SNMP_TRANS SNMP_TRANS_AUTHLEN_HMACMD5;
MACRO_SNMP_TRANS SNMP_TRANS_AUTHLEN_HMACSHA1;
MACRO_SNMP_TRANS SNMP_TRANS_PRIVLEN_1DES;
MACRO_SNMP_TRANS SNMP_TRANS_PRIVLEN_1DES_IV;
MACRO_SNMP_TRANS SNMP_TRANS_PRIVLEN_AES;
MACRO_SNMP_TRANS SNMP_TRANS_PRIVLEN_AES128;
MACRO_SNMP_TRANS SNMP_TRANS_PRIVLEN_AES128_IV;
MACRO_SNMP_TRANS SNMP_TRANS_PRIVLEN_AES_IV;
MACRO_SNMP_PDU SNMP_TRAP_AUTHENTICATIONFAILURE;
MACRO_SNMP_TRAP SNMP_TRAP_AUTHFAIL;
MACRO_SNMP_TRAP SNMP_TRAP_COLDSTART;
MACRO_SNMP_TRAP SNMP_TRAP_EGPNEIGHBORLOSS;
MACRO_SNMP_TRAP SNMP_TRAP_ENTERPRISESPECIFIC;
MACRO_SNMP_TRAP SNMP_TRAP_LINKDOWN;
MACRO_SNMP_TRAP SNMP_TRAP_LINKUP;
MACRO_SNMP_PORT SNMP_TRAP_PORT;
MACRO_SNMP_TRAP SNMP_TRAP_WARMSTART;
MACRO_SNMP_PORT SNMP_VERSION_1;
MACRO_SNMP_PORT SNMP_VERSION_2c;
MACRO_SNMP_PORT SNMP_VERSION_2p;
MACRO_SNMP_PORT SNMP_VERSION_2star;
MACRO_SNMP_PORT SNMP_VERSION_2u;
MACRO_SNMP_PORT SNMP_VERSION_3;
MACRO_SNMP_PORT SNMP_VERSION_sec;
MACRO_SNMP_VIEW SNMP_VIEW_EXCLUDED;
MACRO_SNMP_VIEW SNMP_VIEW_INCLUDED;
$488028D4BD0C051E692AC01785C90027 SOCKINFO_GENERIC;
$488028D4BD0C051E692AC01785C90027 SOCKINFO_IN;
$488028D4BD0C051E692AC01785C90027 SOCKINFO_KERN_CTL;
$488028D4BD0C051E692AC01785C90027 SOCKINFO_KERN_EVENT;
$488028D4BD0C051E692AC01785C90027 SOCKINFO_NDRV;
$488028D4BD0C051E692AC01785C90027 SOCKINFO_TCP;
$488028D4BD0C051E692AC01785C90027 SOCKINFO_UN;
MACRO_SOCK SOCK_DGRAM;
MACRO_SOCK_MAXADDRLEN SOCK_MAXADDRLEN;
MACRO_SOCK SOCK_RAW;
MACRO_SOCK SOCK_RDM;
MACRO_SOCK SOCK_SEQPACKET;
MACRO_SOCK SOCK_STREAM;
MACRO_SOI SOI_S_ASYNC;
MACRO_SOI SOI_S_CANTRCVMORE;
MACRO_SOI SOI_S_CANTSENDMORE;
MACRO_SOI SOI_S_COMP;
MACRO_SOI SOI_S_DRAINING;
MACRO_SOI SOI_S_INCOMP;
MACRO_SOI SOI_S_ISCONNECTED;
MACRO_SOI SOI_S_ISCONNECTING;
MACRO_SOI SOI_S_ISDISCONNECTED;
MACRO_SOI SOI_S_ISDISCONNECTING;
MACRO_SOI SOI_S_NBIO;
MACRO_SOI SOI_S_NOFDREF;
MACRO_SOI SOI_S_PRIV;
MACRO_SOI SOI_S_RCVATMARK;
MACRO_SOL_LOCAL SOL_LOCAL;
MACRO_SOL_NDRVPROTO SOL_NDRVPROTO;
MACRO_SOL SOL_SOCKET;
MACRO_SOMAXCONN SOMAXCONN;
MACRO_SONPX SONPX_SETOPTSHUT;
MACRO_SO SO_ACCEPTCONN;
MACRO_SO SO_BROADCAST;
MACRO_SO SO_DEBUG;
MACRO_SO SO_DONTROUTE;
MACRO_SO SO_DONTTRUNC;
MACRO_SO SO_ERROR;
MACRO_SO SO_KEEPALIVE;
MACRO_SO SO_LABEL;
MACRO_SO SO_LINGER;
MACRO_SO SO_LINGER_SEC;
MACRO_SO SO_NKE;
MACRO_SO SO_NOADDRERR;
MACRO_SO SO_NOSIGPIPE;
MACRO_SO SO_NOTIFYCONFLICT;
MACRO_SO SO_NP_EXTENSIONS;
MACRO_SO SO_NREAD;
MACRO_SO SO_NWRITE;
MACRO_SO SO_OOBINLINE;
MACRO_SO_PEERCRED SO_PEERCRED;
MACRO_SO SO_PEERLABEL;
MACRO_SO SO_RANDOMPORT;
MACRO_SO SO_RCVBUF;
MACRO_SO SO_RCVLOWAT;
MACRO_SO SO_RCVTIMEO;
MACRO_SO SO_RESTRICTIONS;
MACRO_SO SO_RESTRICT_DENYIN;
MACRO_SO SO_RESTRICT_DENYOUT;
MACRO_SO SO_RESTRICT_DENYSET;
MACRO_SO SO_REUSEADDR;
MACRO_SO SO_REUSEPORT;
MACRO_SO SO_REUSESHAREUID;
MACRO_SO SO_SNDBUF;
MACRO_SO SO_SNDLOWAT;
MACRO_SO SO_SNDTIMEO;
MACRO_SO SO_TIMESTAMP;
MACRO_SO SO_TIMESTAMP_MONOTONIC;
MACRO_SO SO_TYPE;
MACRO_SO SO_UPCALLCLOSEWAIT;
MACRO_SO SO_USELOOPBACK;
MACRO_SO SO_WANTMORE;
MACRO_SO SO_WANTOOBFLAG;
MACRO_SPRAYMAX SPRAYMAX;
MACRO_SPRAYOVERHEAD SPRAYOVERHEAD;
MACRO_SPRAYPROC SPRAYPROC_CLEAR;
MACRO_SPRAYPROC SPRAYPROC_GET;
MACRO_SPRAYPROC SPRAYPROC_SPRAY;
MACRO_SPRAYPROG SPRAYPROG;
MACRO_SPRAYVERS SPRAYVERS;
MACRO_MAX_LEN SPRINT_MAX_LEN;
MACRO_SQLITE3 SQLITE3_TEXT;
MACRO_SQLITE SQLITE_ABORT;
MACRO_SQLITE SQLITE_ACCESS_EXISTS;
MACRO_SQLITE SQLITE_ACCESS_READ;
MACRO_SQLITE SQLITE_ACCESS_READWRITE;
MACRO_SQLITE SQLITE_ALTER_TABLE;
MACRO_SQLITE SQLITE_ANALYZE;
MACRO_SQLITE_UTF8 SQLITE_ANY;
MACRO_SQLITE SQLITE_ATTACH;
MACRO_SQLITE SQLITE_AUTH;
MACRO_SQLITE SQLITE_BLOB;
MACRO_SQLITE SQLITE_BUSY;
MACRO_SQLITE SQLITE_BUSY_RECOVERY;
MACRO_SQLITE SQLITE_CANTOPEN;
MACRO_SQLITE SQLITE_CANTOPEN_NOTEMPDIR;
MACRO_SQLITE SQLITE_CONFIG_GETMALLOC;
MACRO_SQLITE SQLITE_CONFIG_GETMUTEX;
MACRO_SQLITE SQLITE_CONFIG_GETPCACHE;
MACRO_SQLITE SQLITE_CONFIG_HEAP;
MACRO_SQLITE SQLITE_CONFIG_LOG;
MACRO_SQLITE SQLITE_CONFIG_LOOKASIDE;
MACRO_SQLITE SQLITE_CONFIG_MALLOC;
MACRO_SQLITE SQLITE_CONFIG_MEMSTATUS;
MACRO_SQLITE SQLITE_CONFIG_MULTITHREAD;
MACRO_SQLITE SQLITE_CONFIG_MUTEX;
MACRO_SQLITE SQLITE_CONFIG_PAGECACHE;
MACRO_SQLITE SQLITE_CONFIG_PCACHE;
MACRO_SQLITE SQLITE_CONFIG_SCRATCH;
MACRO_SQLITE SQLITE_CONFIG_SERIALIZED;
MACRO_SQLITE SQLITE_CONFIG_SINGLETHREAD;
MACRO_SQLITE SQLITE_CONSTRAINT;
MACRO_SQLITE SQLITE_COPY;
MACRO_SQLITE SQLITE_CORRUPT;
MACRO_SQLITE SQLITE_CREATE_INDEX;
MACRO_SQLITE SQLITE_CREATE_TABLE;
MACRO_SQLITE SQLITE_CREATE_TEMP_INDEX;
MACRO_SQLITE SQLITE_CREATE_TEMP_TABLE;
MACRO_SQLITE SQLITE_CREATE_TEMP_TRIGGER;
MACRO_SQLITE SQLITE_CREATE_TEMP_VIEW;
MACRO_SQLITE SQLITE_CREATE_TRIGGER;
MACRO_SQLITE SQLITE_CREATE_VIEW;
MACRO_SQLITE SQLITE_CREATE_VTABLE;
MACRO_SQLITE SQLITE_DBCONFIG_LOOKASIDE;
MACRO_SQLITE_UTF8 SQLITE_DBSTATUS_CACHE_USED;
MACRO_SQLITE_UTF8 SQLITE_DBSTATUS_LOOKASIDE_HIT;
MACRO_SQLITE_UTF8 SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL;
MACRO_SQLITE_UTF8 SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE;
MACRO_SQLITE_UTF8 SQLITE_DBSTATUS_LOOKASIDE_USED;
MACRO_SQLITE_UTF8 SQLITE_DBSTATUS_MAX;
MACRO_SQLITE_UTF8 SQLITE_DBSTATUS_SCHEMA_USED;
MACRO_SQLITE_UTF8 SQLITE_DBSTATUS_STMT_USED;
MACRO_SQLITE SQLITE_DELETE;
MACRO_SQLITE SQLITE_DENY;
MACRO_SQLITE SQLITE_DETACH;
MACRO_SQLITE SQLITE_DONE;
MACRO_SQLITE SQLITE_DROP_INDEX;
MACRO_SQLITE SQLITE_DROP_TABLE;
MACRO_SQLITE SQLITE_DROP_TEMP_INDEX;
MACRO_SQLITE SQLITE_DROP_TEMP_TABLE;
MACRO_SQLITE SQLITE_DROP_TEMP_TRIGGER;
MACRO_SQLITE SQLITE_DROP_TEMP_VIEW;
MACRO_SQLITE SQLITE_DROP_TRIGGER;
MACRO_SQLITE SQLITE_DROP_VIEW;
MACRO_SQLITE SQLITE_DROP_VTABLE;
MACRO_SQLITE SQLITE_EMPTY;
MACRO_SQLITE SQLITE_ERROR;
MACRO_SQLITE SQLITE_FCNTL_CHUNK_SIZE;
MACRO_SQLITE SQLITE_FCNTL_FILE_POINTER;
MACRO_SQLITE SQLITE_FCNTL_LOCKSTATE;
MACRO_SQLITE SQLITE_FCNTL_SIZE_HINT;
MACRO_SQLITE SQLITE_FCNTL_SYNC_OMITTED;
MACRO_SQLITE SQLITE_FLOAT;
MACRO_SQLITE SQLITE_FORMAT;
MACRO_SQLITE SQLITE_FULL;
MACRO_SQLITE SQLITE_FUNCTION;
MACRO_SQLITE SQLITE_GET_LOCKPROXYFILE;
MACRO_SQLITE SQLITE_IGNORE;
MACRO_SQLITE_UTF8 SQLITE_INDEX_CONSTRAINT_EQ;
MACRO_SQLITE_UTF8 SQLITE_INDEX_CONSTRAINT_GE;
MACRO_SQLITE_UTF8 SQLITE_INDEX_CONSTRAINT_GT;
MACRO_SQLITE_UTF8 SQLITE_INDEX_CONSTRAINT_LE;
MACRO_SQLITE_UTF8 SQLITE_INDEX_CONSTRAINT_LT;
MACRO_SQLITE_UTF8 SQLITE_INDEX_CONSTRAINT_MATCH;
MACRO_SQLITE SQLITE_INSERT;
MACRO_SQLITE SQLITE_INTEGER;
MACRO_SQLITE SQLITE_INTERNAL;
MACRO_SQLITE SQLITE_INTERRUPT;
MACRO_SQLITE SQLITE_IOCAP_ATOMIC;
MACRO_SQLITE SQLITE_IOCAP_ATOMIC16K;
MACRO_SQLITE SQLITE_IOCAP_ATOMIC1K;
MACRO_SQLITE SQLITE_IOCAP_ATOMIC2K;
MACRO_SQLITE SQLITE_IOCAP_ATOMIC32K;
MACRO_SQLITE SQLITE_IOCAP_ATOMIC4K;
MACRO_SQLITE SQLITE_IOCAP_ATOMIC512;
MACRO_SQLITE SQLITE_IOCAP_ATOMIC64K;
MACRO_SQLITE SQLITE_IOCAP_ATOMIC8K;
MACRO_SQLITE SQLITE_IOCAP_SAFE_APPEND;
MACRO_SQLITE SQLITE_IOCAP_SEQUENTIAL;
MACRO_SQLITE SQLITE_IOCAP_UNDELETABLE_WHEN_OPEN;
MACRO_SQLITE SQLITE_IOERR;
MACRO_SQLITE SQLITE_IOERR_ACCESS;
MACRO_SQLITE SQLITE_IOERR_BLOCKED;
MACRO_SQLITE SQLITE_IOERR_CHECKRESERVEDLOCK;
MACRO_SQLITE SQLITE_IOERR_CLOSE;
MACRO_SQLITE SQLITE_IOERR_DELETE;
MACRO_SQLITE SQLITE_IOERR_DIR_CLOSE;
MACRO_SQLITE SQLITE_IOERR_DIR_FSYNC;
MACRO_SQLITE SQLITE_IOERR_FSTAT;
MACRO_SQLITE SQLITE_IOERR_FSYNC;
MACRO_SQLITE SQLITE_IOERR_LOCK;
MACRO_SQLITE SQLITE_IOERR_NOMEM;
MACRO_SQLITE SQLITE_IOERR_RDLOCK;
MACRO_SQLITE SQLITE_IOERR_READ;
MACRO_SQLITE SQLITE_IOERR_SHMLOCK;
MACRO_SQLITE SQLITE_IOERR_SHMOPEN;
MACRO_SQLITE SQLITE_IOERR_SHMSIZE;
MACRO_SQLITE SQLITE_IOERR_SHORT_READ;
MACRO_SQLITE SQLITE_IOERR_TRUNCATE;
MACRO_SQLITE SQLITE_IOERR_UNLOCK;
MACRO_SQLITE SQLITE_IOERR_WRITE;
MACRO_SQLITE SQLITE_LAST_ERRNO;
MACRO_SQLITE SQLITE_LIMIT_ATTACHED;
MACRO_SQLITE SQLITE_LIMIT_COLUMN;
MACRO_SQLITE SQLITE_LIMIT_COMPOUND_SELECT;
MACRO_SQLITE SQLITE_LIMIT_EXPR_DEPTH;
MACRO_SQLITE SQLITE_LIMIT_FUNCTION_ARG;
MACRO_SQLITE SQLITE_LIMIT_LENGTH;
MACRO_SQLITE SQLITE_LIMIT_LIKE_PATTERN_LENGTH;
MACRO_SQLITE SQLITE_LIMIT_SQL_LENGTH;
MACRO_SQLITE SQLITE_LIMIT_TRIGGER_DEPTH;
MACRO_SQLITE SQLITE_LIMIT_VARIABLE_NUMBER;
MACRO_SQLITE SQLITE_LIMIT_VDBE_OP;
MACRO_SQLITE SQLITE_LOCKED;
MACRO_SQLITE SQLITE_LOCKED_SHAREDCACHE;
MACRO_SQLITE SQLITE_LOCK_EXCLUSIVE;
MACRO_SQLITE SQLITE_LOCK_NONE;
MACRO_SQLITE SQLITE_LOCK_PENDING;
MACRO_SQLITE SQLITE_LOCK_RESERVED;
MACRO_SQLITE SQLITE_LOCK_SHARED;
MACRO_SQLITE SQLITE_MISMATCH;
MACRO_SQLITE SQLITE_MISUSE;
MACRO_SQLITE_UTF8 SQLITE_MUTEX_FAST;
MACRO_SQLITE_UTF8 SQLITE_MUTEX_RECURSIVE;
MACRO_SQLITE_UTF8 SQLITE_MUTEX_STATIC_LRU;
MACRO_SQLITE_UTF8 SQLITE_MUTEX_STATIC_LRU2;
MACRO_SQLITE_UTF8 SQLITE_MUTEX_STATIC_MASTER;
MACRO_SQLITE_UTF8 SQLITE_MUTEX_STATIC_MEM;
MACRO_SQLITE_UTF8 SQLITE_MUTEX_STATIC_MEM2;
MACRO_SQLITE_UTF8 SQLITE_MUTEX_STATIC_OPEN;
MACRO_SQLITE_UTF8 SQLITE_MUTEX_STATIC_PMEM;
MACRO_SQLITE_UTF8 SQLITE_MUTEX_STATIC_PRNG;
MACRO_SQLITE SQLITE_NOLFS;
MACRO_SQLITE SQLITE_NOMEM;
MACRO_SQLITE SQLITE_NOTADB;
MACRO_SQLITE SQLITE_NOTFOUND;
MACRO_SQLITE SQLITE_NULL;
MACRO_SQLITE SQLITE_OK;
MACRO_SQLITE SQLITE_OPEN_AUTOPROXY;
MACRO_SQLITE SQLITE_OPEN_CREATE;
MACRO_SQLITE SQLITE_OPEN_DELETEONCLOSE;
MACRO_SQLITE SQLITE_OPEN_EXCLUSIVE;
MACRO_SQLITE SQLITE_OPEN_FILEPROTECTION_COMPLETE;
MACRO_SQLITE SQLITE_OPEN_FILEPROTECTION_COMPLETEUNLESSOPEN;
MACRO_SQLITE SQLITE_OPEN_FILEPROTECTION_COMPLETEUNTILFIRSTUSERAUTHENTICATION;
MACRO_SQLITE SQLITE_OPEN_FILEPROTECTION_MASK;
MACRO_SQLITE SQLITE_OPEN_FILEPROTECTION_NONE;
MACRO_SQLITE SQLITE_OPEN_FULLMUTEX;
MACRO_SQLITE SQLITE_OPEN_MAIN_DB;
MACRO_SQLITE SQLITE_OPEN_MAIN_JOURNAL;
MACRO_SQLITE SQLITE_OPEN_MASTER_JOURNAL;
MACRO_SQLITE SQLITE_OPEN_NOMUTEX;
MACRO_SQLITE SQLITE_OPEN_PRIVATECACHE;
MACRO_SQLITE SQLITE_OPEN_READONLY;
MACRO_SQLITE SQLITE_OPEN_READWRITE;
MACRO_SQLITE SQLITE_OPEN_SHAREDCACHE;
MACRO_SQLITE SQLITE_OPEN_SUBJOURNAL;
MACRO_SQLITE SQLITE_OPEN_TEMP_DB;
MACRO_SQLITE SQLITE_OPEN_TEMP_JOURNAL;
MACRO_SQLITE SQLITE_OPEN_TRANSIENT_DB;
MACRO_SQLITE SQLITE_OPEN_WAL;
MACRO_SQLITE SQLITE_PERM;
MACRO_SQLITE SQLITE_PRAGMA;
MACRO_SQLITE SQLITE_PROTOCOL;
MACRO_SQLITE SQLITE_RANGE;
MACRO_SQLITE SQLITE_READ;
MACRO_SQLITE SQLITE_READONLY;
MACRO_SQLITE SQLITE_REINDEX;
MACRO_SQLITE SQLITE_ROW;
MACRO_SQLITE SQLITE_SAVEPOINT;
MACRO_SQLITE SQLITE_SCHEMA;
MACRO_SQLITE SQLITE_SELECT;
MACRO_SQLITE SQLITE_SET_LOCKPROXYFILE;
MACRO_SQLITE SQLITE_SHM_EXCLUSIVE;
MACRO_SQLITE SQLITE_SHM_LOCK;
MACRO_SQLITE SQLITE_SHM_NLOCK;
MACRO_SQLITE SQLITE_SHM_SHARED;
MACRO_SQLITE SQLITE_SHM_UNLOCK;
MACRO_SQLITE_UTF8 SQLITE_STATIC;
MACRO_SQLITE_UTF8 SQLITE_STATUS_MALLOC_COUNT;
MACRO_SQLITE_UTF8 SQLITE_STATUS_MALLOC_SIZE;
MACRO_SQLITE_UTF8 SQLITE_STATUS_MEMORY_USED;
MACRO_SQLITE_UTF8 SQLITE_STATUS_PAGECACHE_OVERFLOW;
MACRO_SQLITE_UTF8 SQLITE_STATUS_PAGECACHE_SIZE;
MACRO_SQLITE_UTF8 SQLITE_STATUS_PAGECACHE_USED;
MACRO_SQLITE_UTF8 SQLITE_STATUS_PARSER_STACK;
MACRO_SQLITE_UTF8 SQLITE_STATUS_SCRATCH_OVERFLOW;
MACRO_SQLITE_UTF8 SQLITE_STATUS_SCRATCH_SIZE;
MACRO_SQLITE_UTF8 SQLITE_STATUS_SCRATCH_USED;
MACRO_SQLITE_UTF8 SQLITE_STMTSTATUS_AUTOINDEX;
MACRO_SQLITE_UTF8 SQLITE_STMTSTATUS_FULLSCAN_STEP;
MACRO_SQLITE_UTF8 SQLITE_STMTSTATUS_SORT;
MACRO_SQLITE SQLITE_SYNC_DATAONLY;
MACRO_SQLITE SQLITE_SYNC_FULL;
MACRO_SQLITE SQLITE_SYNC_NORMAL;
MACRO_SQLITE_UTF8 SQLITE_TESTCTRL_ALWAYS;
MACRO_SQLITE_UTF8 SQLITE_TESTCTRL_ASSERT;
MACRO_SQLITE_UTF8 SQLITE_TESTCTRL_BENIGN_MALLOC_HOOKS;
MACRO_SQLITE_UTF8 SQLITE_TESTCTRL_BITVEC_TEST;
MACRO_SQLITE_UTF8 SQLITE_TESTCTRL_FAULT_INSTALL;
MACRO_SQLITE_UTF8 SQLITE_TESTCTRL_FIRST;
MACRO_SQLITE_UTF8 SQLITE_TESTCTRL_ISKEYWORD;
MACRO_SQLITE_UTF8 SQLITE_TESTCTRL_LAST;
MACRO_SQLITE_UTF8 SQLITE_TESTCTRL_OPTIMIZATIONS;
MACRO_SQLITE_UTF8 SQLITE_TESTCTRL_PENDING_BYTE;
MACRO_SQLITE_UTF8 SQLITE_TESTCTRL_PGHDRSZ;
MACRO_SQLITE_UTF8 SQLITE_TESTCTRL_PRNG_RESET;
MACRO_SQLITE_UTF8 SQLITE_TESTCTRL_PRNG_RESTORE;
MACRO_SQLITE_UTF8 SQLITE_TESTCTRL_PRNG_SAVE;
MACRO_SQLITE_UTF8 SQLITE_TESTCTRL_RESERVE;
MACRO_SQLITE_UTF8 SQLITE_TESTCTRL_SCRATCHMALLOC;
MACRO_SQLITE SQLITE_TEXT;
MACRO_SQLITE SQLITE_TOOBIG;
MACRO_SQLITE SQLITE_TRANSACTION;
MACRO_SQLITE_UTF8 SQLITE_TRANSIENT;
MACRO_SQLITE SQLITE_UPDATE;
MACRO_SQLITE_UTF8 SQLITE_UTF16;
MACRO_SQLITE_UTF8 SQLITE_UTF16BE;
MACRO_SQLITE_UTF8 SQLITE_UTF16LE;
MACRO_SQLITE_UTF8 SQLITE_UTF16_ALIGNED;
MACRO_SQLITE_UTF8 SQLITE_UTF8;
MACRO_SQLITE SQLITE_VERSION_NUMBER;
MACRO_SQL_MAX SQL_AA_FALSE;
MACRO_SQL_MAX SQL_AA_TRUE;
MACRO_SQL_MAX SQL_ACCESSIBLE_PROCEDURES;
MACRO_SQL_MAX SQL_ACCESSIBLE_TABLES;
MACRO_SQL_MAX SQL_ACCESS_MODE;
MACRO_SQL_MAX SQL_ACTIVE_CONNECTIONS;
MACRO_SQL_MAX SQL_ACTIVE_ENVIRONMENTS;
MACRO_SQL_MAX SQL_ACTIVE_STATEMENTS;
MACRO_SQL_MAX SQL_ADD;
MACRO_SQL_MAX SQL_AD_ADD_CONSTRAINT_DEFERRABLE;
MACRO_SQL_MAX SQL_AD_ADD_CONSTRAINT_INITIALLY_DEFERRED;
MACRO_SQL_MAX SQL_AD_ADD_CONSTRAINT_INITIALLY_IMMEDIATE;
MACRO_SQL_MAX SQL_AD_ADD_CONSTRAINT_NON_DEFERRABLE;
MACRO_SQL_MAX SQL_AD_ADD_DOMAIN_CONSTRAINT;
MACRO_SQL_MAX SQL_AD_ADD_DOMAIN_DEFAULT;
MACRO_SQL_MAX SQL_AD_CONSTRAINT_NAME_DEFINITION;
MACRO_SQL SQL_AD_DEFAULT;
MACRO_SQL_MAX SQL_AD_DROP_DOMAIN_CONSTRAINT;
MACRO_SQL_MAX SQL_AD_DROP_DOMAIN_DEFAULT;
MACRO_SQL SQL_AD_OFF;
MACRO_SQL SQL_AD_ON;
MACRO_SQL_MAX SQL_AF_ALL;
MACRO_SQL_MAX SQL_AF_AVG;
MACRO_SQL_MAX SQL_AF_COUNT;
MACRO_SQL_MAX SQL_AF_DISTINCT;
MACRO_SQL_MAX SQL_AF_MAX;
MACRO_SQL_MAX SQL_AF_MIN;
MACRO_SQL_MAX SQL_AF_SUM;
MACRO_SQL_MAX SQL_AGGREGATE_FUNCTIONS;
MACRO_SQL_MAX SQL_ALL_EXCEPT_LIKE;
MACRO_SQL_MAX SQL_ALL_TYPES;
MACRO_SQL_MAX SQL_ALTER_DOMAIN;
MACRO_SQL_MAX SQL_ALTER_TABLE;
MACRO_SQL_MAX SQL_AM_CONNECTION;
MACRO_SQL_MAX SQL_AM_NONE;
MACRO_SQL_MAX SQL_AM_STATEMENT;
MACRO_SQL SQL_AO_DEFAULT;
MACRO_SQL SQL_AO_OFF;
MACRO_SQL SQL_AO_ON;
MACRO_SQL_MAX SQL_API_ALL_FUNCTIONS;
MACRO_SQL_MAX SQL_API_LOADBYORDINAL;
MACRO_SQL_MAX SQL_API_ODBC3_ALL_FUNCTIONS;
MACRO_SQL_MAX SQL_API_ODBC3_ALL_FUNCTIONS_SIZE;
MACRO_SQL_MAX SQL_API_SQLALLOCCONNECT;
MACRO_SQL_MAX SQL_API_SQLALLOCENV;
MACRO_SQL_MAX SQL_API_SQLALLOCHANDLE;
MACRO_SQL_MAX SQL_API_SQLALLOCHANDLESTD;
MACRO_SQL_MAX SQL_API_SQLALLOCSTMT;
MACRO_SQL_MAX SQL_API_SQLBINDCOL;
MACRO_SQL_MAX SQL_API_SQLBINDPARAM;
MACRO_SQL_MAX SQL_API_SQLBINDPARAMETER;
MACRO_SQL_MAX SQL_API_SQLBROWSECONNECT;
MACRO_SQL_MAX SQL_API_SQLBULKOPERATIONS;
MACRO_SQL_MAX SQL_API_SQLCANCEL;
MACRO_SQL_MAX SQL_API_SQLCLOSECURSOR;
MACRO_SQL_MAX SQL_API_SQLCOLATTRIBUTE;
MACRO_SQL_MAX SQL_API_SQLCOLATTRIBUTES;
MACRO_SQL_MAX SQL_API_SQLCOLUMNPRIVILEGES;
MACRO_SQL_MAX SQL_API_SQLCOLUMNS;
MACRO_SQL_MAX SQL_API_SQLCONNECT;
MACRO_SQL_MAX SQL_API_SQLCOPYDESC;
MACRO_SQL_MAX SQL_API_SQLDATASOURCES;
MACRO_SQL_MAX SQL_API_SQLDESCRIBECOL;
MACRO_SQL_MAX SQL_API_SQLDESCRIBEPARAM;
MACRO_SQL_MAX SQL_API_SQLDISCONNECT;
MACRO_SQL_MAX SQL_API_SQLDRIVERCONNECT;
MACRO_SQL_MAX SQL_API_SQLDRIVERS;
MACRO_SQL_MAX SQL_API_SQLENDTRAN;
MACRO_SQL_MAX SQL_API_SQLERROR;
MACRO_SQL_MAX SQL_API_SQLEXECDIRECT;
MACRO_SQL_MAX SQL_API_SQLEXECUTE;
MACRO_SQL_MAX SQL_API_SQLEXTENDEDFETCH;
MACRO_SQL_MAX SQL_API_SQLFETCH;
MACRO_SQL_MAX SQL_API_SQLFETCHSCROLL;
MACRO_SQL_MAX SQL_API_SQLFOREIGNKEYS;
MACRO_SQL_MAX SQL_API_SQLFREECONNECT;
MACRO_SQL_MAX SQL_API_SQLFREEENV;
MACRO_SQL_MAX SQL_API_SQLFREEHANDLE;
MACRO_SQL_MAX SQL_API_SQLFREESTMT;
MACRO_SQL_MAX SQL_API_SQLGETCONNECTATTR;
MACRO_SQL_MAX SQL_API_SQLGETCONNECTOPTION;
MACRO_SQL_MAX SQL_API_SQLGETCURSORNAME;
MACRO_SQL_MAX SQL_API_SQLGETDATA;
MACRO_SQL_MAX SQL_API_SQLGETDESCFIELD;
MACRO_SQL_MAX SQL_API_SQLGETDESCREC;
MACRO_SQL_MAX SQL_API_SQLGETDIAGFIELD;
MACRO_SQL_MAX SQL_API_SQLGETDIAGREC;
MACRO_SQL_MAX SQL_API_SQLGETENVATTR;
MACRO_SQL_MAX SQL_API_SQLGETFUNCTIONS;
MACRO_SQL_MAX SQL_API_SQLGETINFO;
MACRO_SQL_MAX SQL_API_SQLGETSTMTATTR;
MACRO_SQL_MAX SQL_API_SQLGETSTMTOPTION;
MACRO_SQL_MAX SQL_API_SQLGETTYPEINFO;
MACRO_SQL_MAX SQL_API_SQLMORERESULTS;
MACRO_SQL_MAX SQL_API_SQLNATIVESQL;
MACRO_SQL_MAX SQL_API_SQLNUMPARAMS;
MACRO_SQL_MAX SQL_API_SQLNUMRESULTCOLS;
MACRO_SQL_MAX SQL_API_SQLPARAMDATA;
MACRO_SQL_MAX SQL_API_SQLPARAMOPTIONS;
MACRO_SQL_MAX SQL_API_SQLPREPARE;
MACRO_SQL_MAX SQL_API_SQLPRIMARYKEYS;
MACRO_SQL_MAX SQL_API_SQLPROCEDURECOLUMNS;
MACRO_SQL_MAX SQL_API_SQLPROCEDURES;
MACRO_SQL_MAX SQL_API_SQLPUTDATA;
MACRO_SQL_MAX SQL_API_SQLROWCOUNT;
MACRO_SQL_MAX SQL_API_SQLSETCONNECTATTR;
MACRO_SQL_MAX SQL_API_SQLSETCONNECTOPTION;
MACRO_SQL_MAX SQL_API_SQLSETCURSORNAME;
MACRO_SQL_MAX SQL_API_SQLSETDESCFIELD;
MACRO_SQL_MAX SQL_API_SQLSETDESCREC;
MACRO_SQL_MAX SQL_API_SQLSETENVATTR;
MACRO_SQL_MAX SQL_API_SQLSETPARAM;
MACRO_SQL_MAX SQL_API_SQLSETPOS;
MACRO_SQL_MAX SQL_API_SQLSETSCROLLOPTIONS;
MACRO_SQL_MAX SQL_API_SQLSETSTMTATTR;
MACRO_SQL_MAX SQL_API_SQLSETSTMTOPTION;
MACRO_SQL_MAX SQL_API_SQLSPECIALCOLUMNS;
MACRO_SQL_MAX SQL_API_SQLSTATISTICS;
MACRO_SQL_MAX SQL_API_SQLTABLEPRIVILEGES;
MACRO_SQL_MAX SQL_API_SQLTABLES;
MACRO_SQL_MAX SQL_API_SQLTRANSACT;
MACRO_SQL SQL_APPEND_KEYS;
MACRO_SQL SQL_APPLICATION_NAME;
MACRO_SQL_MAX SQL_ARD_TYPE;
MACRO_SQL_MAX SQL_ASYNC_ENABLE;
MACRO_SQL_MAX SQL_ASYNC_ENABLE_DEFAULT;
MACRO_SQL_MAX SQL_ASYNC_ENABLE_OFF;
MACRO_SQL_MAX SQL_ASYNC_ENABLE_ON;
MACRO_SQL_MAX SQL_ASYNC_MODE;
MACRO_SQL SQL_ATOMIC_DEFAULT;
MACRO_SQL SQL_ATOMIC_NO;
MACRO_SQL SQL_ATOMIC_YES;
MACRO_SQL_MAX SQL_ATTR_ACCESS_MODE;
MACRO_SQL_MAX SQL_ATTR_ANSI_APP;
MACRO_SQL SQL_ATTR_APPEND_KEYS;
MACRO_SQL_MAX SQL_ATTR_APP_PARAM_DESC;
MACRO_SQL_MAX SQL_ATTR_APP_ROW_DESC;
MACRO_SQL_MAX SQL_ATTR_ASYNC_ENABLE;
MACRO_SQL_MAX SQL_ATTR_AUTOCOMMIT;
MACRO_SQL_MAX SQL_ATTR_AUTO_IPD;
MACRO_SQL SQL_ATTR_CLOSEOPEN;
MACRO_SQL SQL_ATTR_CLOSE_BEHAVIOR;
MACRO_SQL_MAX SQL_ATTR_CONCURRENCY;
MACRO_SQL SQL_ATTR_CONNECTION_DEAD;
MACRO_SQL_MAX SQL_ATTR_CONNECTION_POOLING;
MACRO_SQL_MAX SQL_ATTR_CONNECTION_TIMEOUT;
MACRO_SQL SQL_ATTR_CONNECTTYPE;
MACRO_SQL SQL_ATTR_CONN_CONTEXT;
MACRO_SQL_MAX SQL_ATTR_CP_MATCH;
MACRO_SQL_MAX SQL_ATTR_CURRENT_CATALOG;
MACRO_SQL SQL_ATTR_CURRENT_PACKAGE_SET;
MACRO_SQL SQL_ATTR_CURRENT_SCHEMA;
MACRO_SQL SQL_ATTR_CURSOR_HOLD;
MACRO_SQL_MAX SQL_ATTR_CURSOR_SCROLLABLE;
MACRO_SQL_MAX SQL_ATTR_CURSOR_SENSITIVITY;
MACRO_SQL_MAX SQL_ATTR_CURSOR_TYPE;
MACRO_SQL SQL_ATTR_DB2ESTIMATE;
MACRO_SQL SQL_ATTR_DB2EXPLAIN;
MACRO_SQL SQL_ATTR_DEFERRED_PREPARE;
MACRO_SQL_MAX SQL_ATTR_DISCONNECT_BEHAVIOR;
MACRO_SQL SQL_ATTR_EARLYCLOSE;
MACRO_SQL_MAX SQL_ATTR_ENABLE_AUTO_IPD;
MACRO_SQL SQL_ATTR_ENLIST_IN_DTC;
MACRO_SQL SQL_ATTR_ENLIST_IN_XA;
MACRO_SQL_MAX SQL_ATTR_FETCH_BOOKMARK_PTR;
MACRO_SQL SQL_ATTR_FORCE_CONVERSION_ON_CLIENT;
MACRO_SQL_MAX SQL_ATTR_IMP_PARAM_DESC;
MACRO_SQL_MAX SQL_ATTR_IMP_ROW_DESC;
MACRO_SQL SQL_ATTR_INHERIT_NULL_CONNECT;
MACRO_SQL_MAX SQL_ATTR_KEYSET_SIZE;
MACRO_SQL_MAX SQL_ATTR_LOGIN_TIMEOUT;
MACRO_SQL SQL_ATTR_LONGDATA_COMPAT;
MACRO_SQL SQL_ATTR_MAXCONN;
MACRO_SQL_MAX SQL_ATTR_MAX_LENGTH;
MACRO_SQL_MAX SQL_ATTR_MAX_ROWS;
MACRO_SQL_MAX SQL_ATTR_METADATA_ID;
MACRO_SQL SQL_ATTR_MINMEMORY_USAGE;
MACRO_SQL SQL_ATTR_NODESCRIBE;
MACRO_SQL SQL_ATTR_NODESCRIBE_INPUT;
MACRO_SQL SQL_ATTR_NODESCRIBE_OUTPUT;
MACRO_SQL_MAX SQL_ATTR_NOSCAN;
MACRO_SQL_MAX SQL_ATTR_ODBC_CURSORS;
MACRO_SQL_MAX SQL_ATTR_ODBC_VERSION;
MACRO_SQL_MAX SQL_ATTR_OUTPUT_NTS;
MACRO_SQL_MAX SQL_ATTR_PACKET_SIZE;
MACRO_SQL SQL_ATTR_PARAMOPT_ATOMIC;
MACRO_SQL_MAX SQL_ATTR_PARAMSET_SIZE;
MACRO_SQL_MAX SQL_ATTR_PARAMS_PROCESSED_PTR;
MACRO_SQL_MAX SQL_ATTR_PARAM_BIND_OFFSET_PTR;
MACRO_SQL_MAX SQL_ATTR_PARAM_BIND_TYPE;
MACRO_SQL_MAX SQL_ATTR_PARAM_OPERATION_PTR;
MACRO_SQL_MAX SQL_ATTR_PARAM_STATUS_PTR;
MACRO_SQL SQL_ATTR_PARSE_FWD_ONLY_REQ;
MACRO_SQL SQL_ATTR_PROCESSCTL;
MACRO_SQL_MAX SQL_ATTR_QUERY_TIMEOUT;
MACRO_SQL_MAX SQL_ATTR_QUIET_MODE;
MACRO_SQL_MAX SQL_ATTR_READONLY;
MACRO_SQL_MAX SQL_ATTR_READWRITE_UNKNOWN;
MACRO_SQL_MAX SQL_ATTR_RETRIEVE_DATA;
MACRO_SQL_MAX SQL_ATTR_ROWS_FETCHED_PTR;
MACRO_SQL_MAX SQL_ATTR_ROW_ARRAY_SIZE;
MACRO_SQL_MAX SQL_ATTR_ROW_BIND_OFFSET_PTR;
MACRO_SQL_MAX SQL_ATTR_ROW_BIND_TYPE;
MACRO_SQL_MAX SQL_ATTR_ROW_NUMBER;
MACRO_SQL_MAX SQL_ATTR_ROW_OPERATION_PTR;
MACRO_SQL_MAX SQL_ATTR_ROW_STATUS_PTR;
MACRO_SQL_MAX SQL_ATTR_SIMULATE_CURSOR;
MACRO_SQL SQL_ATTR_STMTTXN_ISOLATION;
MACRO_SQL SQL_ATTR_SYNC_POINT;
MACRO_SQL_MAX SQL_ATTR_TRACE;
MACRO_SQL_MAX SQL_ATTR_TRACEFILE;
MACRO_SQL_MAX SQL_ATTR_TRANSLATE_LIB;
MACRO_SQL_MAX SQL_ATTR_TRANSLATE_OPTION;
MACRO_SQL_MAX SQL_ATTR_TXN_ISOLATION;
MACRO_SQL_MAX SQL_ATTR_USE_BOOKMARKS;
MACRO_SQL SQL_ATTR_WCHARTYPE;
MACRO_SQL SQL_ATTR_WCHAR_SIZE;
MACRO_SQL_MAX SQL_ATTR_WRITE;
MACRO_SQL_MAX SQL_AT_ADD_COLUMN;
MACRO_SQL_MAX SQL_AT_ADD_COLUMN_COLLATION;
MACRO_SQL_MAX SQL_AT_ADD_COLUMN_DEFAULT;
MACRO_SQL_MAX SQL_AT_ADD_COLUMN_SINGLE;
MACRO_SQL_MAX SQL_AT_ADD_CONSTRAINT;
MACRO_SQL_MAX SQL_AT_ADD_TABLE_CONSTRAINT;
MACRO_SQL_MAX SQL_AT_CONSTRAINT_DEFERRABLE;
MACRO_SQL_MAX SQL_AT_CONSTRAINT_INITIALLY_DEFERRED;
MACRO_SQL_MAX SQL_AT_CONSTRAINT_INITIALLY_IMMEDIATE;
MACRO_SQL_MAX SQL_AT_CONSTRAINT_NAME_DEFINITION;
MACRO_SQL_MAX SQL_AT_CONSTRAINT_NON_DEFERRABLE;
MACRO_SQL_MAX SQL_AT_DROP_COLUMN;
MACRO_SQL_MAX SQL_AT_DROP_COLUMN_CASCADE;
MACRO_SQL_MAX SQL_AT_DROP_COLUMN_DEFAULT;
MACRO_SQL_MAX SQL_AT_DROP_COLUMN_RESTRICT;
MACRO_SQL_MAX SQL_AT_DROP_TABLE_CONSTRAINT_CASCADE;
MACRO_SQL_MAX SQL_AT_DROP_TABLE_CONSTRAINT_RESTRICT;
MACRO_SQL_MAX SQL_AT_SET_COLUMN_DEFAULT;
MACRO_SQL_MAX SQL_AUTOCOMMIT;
MACRO_SQL_MAX SQL_AUTOCOMMIT_DEFAULT;
MACRO_SQL_MAX SQL_AUTOCOMMIT_OFF;
MACRO_SQL_MAX SQL_AUTOCOMMIT_ON;
MACRO_SQL_MAX SQL_BATCH_ROW_COUNT;
MACRO_SQL_MAX SQL_BATCH_SUPPORT;
MACRO_SQL SQL_BCP_DEFAULT;
MACRO_SQL SQL_BCP_OFF;
MACRO_SQL SQL_BCP_ON;
MACRO_SQL_MAX SQL_BEST_ROWID;
MACRO_SQL_MAX SQL_BIGINT;
MACRO_SQL_MAX SQL_BINARY;
MACRO_SQL_MAX SQL_BIND_BY_COLUMN;
MACRO_SQL_MAX SQL_BIND_TYPE;
MACRO_SQL_MAX SQL_BIND_TYPE_DEFAULT;
MACRO_SQL_MAX SQL_BIT;
MACRO_SQL_MAX SQL_BOOKMARK_PERSISTENCE;
MACRO_SQL_MAX SQL_BP_CLOSE;
MACRO_SQL_MAX SQL_BP_DELETE;
MACRO_SQL_MAX SQL_BP_DROP;
MACRO_SQL_MAX SQL_BP_OTHER_HSTMT;
MACRO_SQL_MAX SQL_BP_SCROLL;
MACRO_SQL_MAX SQL_BP_TRANSACTION;
MACRO_SQL_MAX SQL_BP_UPDATE;
MACRO_SQL_MAX SQL_BRC_EXPLICIT;
MACRO_SQL_MAX SQL_BRC_PROCEDURES;
MACRO_SQL_MAX SQL_BRC_ROLLED_UP;
MACRO_SQL_MAX SQL_BS_ROW_COUNT_EXPLICIT;
MACRO_SQL_MAX SQL_BS_ROW_COUNT_PROC;
MACRO_SQL_MAX SQL_BS_SELECT_EXPLICIT;
MACRO_SQL_MAX SQL_BS_SELECT_PROC;
MACRO_SQL_MAX SQL_CA1_ABSOLUTE;
MACRO_SQL_MAX SQL_CA1_BOOKMARK;
MACRO_SQL_MAX SQL_CA1_BULK_ADD;
MACRO_SQL_MAX SQL_CA1_BULK_DELETE_BY_BOOKMARK;
MACRO_SQL_MAX SQL_CA1_BULK_FETCH_BY_BOOKMARK;
MACRO_SQL_MAX SQL_CA1_BULK_UPDATE_BY_BOOKMARK;
MACRO_SQL_MAX SQL_CA1_LOCK_EXCLUSIVE;
MACRO_SQL_MAX SQL_CA1_LOCK_NO_CHANGE;
MACRO_SQL_MAX SQL_CA1_LOCK_UNLOCK;
MACRO_SQL_MAX SQL_CA1_NEXT;
MACRO_SQL_MAX SQL_CA1_POSITIONED_DELETE;
MACRO_SQL_MAX SQL_CA1_POSITIONED_UPDATE;
MACRO_SQL_MAX SQL_CA1_POS_DELETE;
MACRO_SQL_MAX SQL_CA1_POS_POSITION;
MACRO_SQL_MAX SQL_CA1_POS_REFRESH;
MACRO_SQL_MAX SQL_CA1_POS_UPDATE;
MACRO_SQL_MAX SQL_CA1_RELATIVE;
MACRO_SQL_MAX SQL_CA1_SELECT_FOR_UPDATE;
MACRO_SQL_MAX SQL_CA2_CRC_APPROXIMATE;
MACRO_SQL_MAX SQL_CA2_CRC_EXACT;
MACRO_SQL_MAX SQL_CA2_LOCK_CONCURRENCY;
MACRO_SQL_MAX SQL_CA2_MAX_ROWS_AFFECTS_ALL;
MACRO_SQL_MAX SQL_CA2_MAX_ROWS_CATALOG;
MACRO_SQL_MAX SQL_CA2_MAX_ROWS_DELETE;
MACRO_SQL_MAX SQL_CA2_MAX_ROWS_INSERT;
MACRO_SQL_MAX SQL_CA2_MAX_ROWS_SELECT;
MACRO_SQL_MAX SQL_CA2_MAX_ROWS_UPDATE;
MACRO_SQL_MAX SQL_CA2_OPT_ROWVER_CONCURRENCY;
MACRO_SQL_MAX SQL_CA2_OPT_VALUES_CONCURRENCY;
MACRO_SQL_MAX SQL_CA2_READ_ONLY_CONCURRENCY;
MACRO_SQL_MAX SQL_CA2_SENSITIVITY_ADDITIONS;
MACRO_SQL_MAX SQL_CA2_SENSITIVITY_DELETIONS;
MACRO_SQL_MAX SQL_CA2_SENSITIVITY_UPDATES;
MACRO_SQL_MAX SQL_CA2_SIMULATE_NON_UNIQUE;
MACRO_SQL_MAX SQL_CA2_SIMULATE_TRY_UNIQUE;
MACRO_SQL_MAX SQL_CA2_SIMULATE_UNIQUE;
MACRO_SQL_MAX SQL_CASCADE;
MACRO_SQL_MAX SQL_CATALOG_LOCATION;
MACRO_SQL_MAX SQL_CATALOG_NAME;
MACRO_SQL_MAX SQL_CATALOG_NAME_SEPARATOR;
MACRO_SQL_MAX SQL_CATALOG_TERM;
MACRO_SQL_MAX SQL_CATALOG_USAGE;
MACRO_SQL_MAX SQL_CA_CONSTRAINT_DEFERRABLE;
MACRO_SQL_MAX SQL_CA_CONSTRAINT_INITIALLY_DEFERRED;
MACRO_SQL_MAX SQL_CA_CONSTRAINT_INITIALLY_IMMEDIATE;
MACRO_SQL_MAX SQL_CA_CONSTRAINT_NON_DEFERRABLE;
MACRO_SQL_MAX SQL_CA_CREATE_ASSERTION;
MACRO_SQL_MAX SQL_CB_CLOSE;
MACRO_SQL_MAX SQL_CB_DELETE;
MACRO_SQL_MAX SQL_CB_NON_NULL;
MACRO_SQL_MAX SQL_CB_NULL;
MACRO_SQL_MAX SQL_CB_PRESERVE;
MACRO_SQL_MAX SQL_CCOL_CREATE_COLLATION;
MACRO_SQL_MAX SQL_CCS_COLLATE_CLAUSE;
MACRO_SQL_MAX SQL_CCS_CREATE_CHARACTER_SET;
MACRO_SQL_MAX SQL_CCS_LIMITED_COLLATION;
MACRO_SQL_MAX SQL_CC_CLOSE;
MACRO_SQL SQL_CC_DEFAULT;
MACRO_SQL_MAX SQL_CC_DELETE;
MACRO_SQL SQL_CC_NO_RELEASE;
MACRO_SQL_MAX SQL_CC_PRESERVE;
MACRO_SQL SQL_CC_RELEASE;
MACRO_SQL_MAX SQL_CDO_COLLATION;
MACRO_SQL_MAX SQL_CDO_CONSTRAINT;
MACRO_SQL_MAX SQL_CDO_CONSTRAINT_DEFERRABLE;
MACRO_SQL_MAX SQL_CDO_CONSTRAINT_INITIALLY_DEFERRED;
MACRO_SQL_MAX SQL_CDO_CONSTRAINT_INITIALLY_IMMEDIATE;
MACRO_SQL_MAX SQL_CDO_CONSTRAINT_NAME_DEFINITION;
MACRO_SQL_MAX SQL_CDO_CONSTRAINT_NON_DEFERRABLE;
MACRO_SQL_MAX SQL_CDO_CREATE_DOMAIN;
MACRO_SQL_MAX SQL_CDO_DEFAULT;
MACRO_SQL_MAX SQL_CD_FALSE;
MACRO_SQL_MAX SQL_CD_TRUE;
MACRO_SQL_MAX SQL_CHAR;
MACRO_SQL_MAX SQL_CLOSE;
MACRO_SQL SQL_CLOSE_BEHAVIOR;
MACRO_SQL_MAX SQL_CN_ANY;
MACRO_SQL_MAX SQL_CN_DIFFERENT;
MACRO_SQL_MAX SQL_CN_NONE;
MACRO_SQL_MAX SQL_CODE_DATE;
MACRO_SQL_MAX SQL_CODE_DAY;
MACRO_SQL_MAX SQL_CODE_DAY_TO_HOUR;
MACRO_SQL_MAX SQL_CODE_DAY_TO_MINUTE;
MACRO_SQL_MAX SQL_CODE_DAY_TO_SECOND;
MACRO_SQL_MAX SQL_CODE_HOUR;
MACRO_SQL_MAX SQL_CODE_HOUR_TO_MINUTE;
MACRO_SQL_MAX SQL_CODE_HOUR_TO_SECOND;
MACRO_SQL_MAX SQL_CODE_MINUTE;
MACRO_SQL_MAX SQL_CODE_MINUTE_TO_SECOND;
MACRO_SQL_MAX SQL_CODE_MONTH;
MACRO_SQL_MAX SQL_CODE_SECOND;
MACRO_SQL_MAX SQL_CODE_TIME;
MACRO_SQL_MAX SQL_CODE_TIMESTAMP;
MACRO_SQL_MAX SQL_CODE_YEAR;
MACRO_SQL_MAX SQL_CODE_YEAR_TO_MONTH;
MACRO_SQL_MAX SQL_COLATT_OPT_MAX;
MACRO_SQL_MAX SQL_COLATT_OPT_MIN;
MACRO_SQL_MAX SQL_COLLATION_SEQ;
MACRO_SQL_MAX SQL_COLUMN_ALIAS;
MACRO_SQL_MAX SQL_COLUMN_AUTO_INCREMENT;
MACRO_SQL_MAX SQL_COLUMN_CASE_SENSITIVE;
MACRO_SQL_MAX SQL_COLUMN_COUNT;
MACRO_SQL_MAX SQL_COLUMN_DISPLAY_SIZE;
MACRO_SQL SQL_COLUMN_EXPR;
MACRO_SQL_MAX SQL_COLUMN_IGNORE;
MACRO_SQL SQL_COLUMN_KEY;
MACRO_SQL_MAX SQL_COLUMN_LABEL;
MACRO_SQL_MAX SQL_COLUMN_LENGTH;
MACRO_SQL_MAX SQL_COLUMN_MONEY;
MACRO_SQL_MAX SQL_COLUMN_NAME;
MACRO_SQL_MAX SQL_COLUMN_NULLABLE;
MACRO_SQL_MAX SQL_COLUMN_NUMBER_UNKNOWN;
MACRO_SQL_MAX SQL_COLUMN_OWNER_NAME;
MACRO_SQL_MAX SQL_COLUMN_PRECISION;
MACRO_SQL_MAX SQL_COLUMN_QUALIFIER_NAME;
MACRO_SQL_MAX SQL_COLUMN_SCALE;
MACRO_SQL_MAX SQL_COLUMN_SEARCHABLE;
MACRO_SQL_MAX SQL_COLUMN_TABLE_NAME;
MACRO_SQL_MAX SQL_COLUMN_TYPE;
MACRO_SQL_MAX SQL_COLUMN_TYPE_NAME;
MACRO_SQL_MAX SQL_COLUMN_UNSIGNED;
MACRO_SQL_MAX SQL_COLUMN_UPDATABLE;
MACRO_SQL_MAX SQL_COL_PRED_BASIC;
MACRO_SQL_MAX SQL_COL_PRED_CHAR;
MACRO_SQL_MAX SQL_COMMIT;
MACRO_SQL_MAX SQL_CONCAT_NULL_BEHAVIOR;
MACRO_SQL_MAX SQL_CONCURRENCY;
MACRO_SQL SQL_CONCURRENT_TRANS;
MACRO_SQL_MAX SQL_CONCUR_DEFAULT;
MACRO_SQL_MAX SQL_CONCUR_LOCK;
MACRO_SQL_MAX SQL_CONCUR_READ_ONLY;
MACRO_SQL_MAX SQL_CONCUR_ROWVER;
MACRO_SQL_MAX SQL_CONCUR_TIMESTAMP;
MACRO_SQL_MAX SQL_CONCUR_VALUES;
MACRO_SQL SQL_CONCUR_VAL_EXTENT;
MACRO_SQL SQL_CONNECTTYPE;
MACRO_SQL SQL_CONNECTTYPE_DEFAULT;
MACRO_SQL SQL_CONN_CONTEXT;
MACRO_SQL_MAX SQL_CONVERT_BIGINT;
MACRO_SQL_MAX SQL_CONVERT_BINARY;
MACRO_SQL_MAX SQL_CONVERT_BIT;
MACRO_SQL_MAX SQL_CONVERT_CHAR;
MACRO_SQL_MAX SQL_CONVERT_DATE;
MACRO_SQL_MAX SQL_CONVERT_DECIMAL;
MACRO_SQL_MAX SQL_CONVERT_DOUBLE;
MACRO_SQL_MAX SQL_CONVERT_FLOAT;
MACRO_SQL_MAX SQL_CONVERT_FUNCTIONS;
MACRO_SQL_MAX SQL_CONVERT_INTEGER;
MACRO_SQL_MAX SQL_CONVERT_INTERVAL_DAY_TIME;
MACRO_SQL_MAX SQL_CONVERT_INTERVAL_YEAR_MONTH;
MACRO_SQL_MAX SQL_CONVERT_LONGVARBINARY;
MACRO_SQL_MAX SQL_CONVERT_LONGVARCHAR;
MACRO_SQL_MAX SQL_CONVERT_NUMERIC;
MACRO_SQL_MAX SQL_CONVERT_REAL;
MACRO_SQL_MAX SQL_CONVERT_SMALLINT;
MACRO_SQL_MAX SQL_CONVERT_TIME;
MACRO_SQL_MAX SQL_CONVERT_TIMESTAMP;
MACRO_SQL_MAX SQL_CONVERT_TINYINT;
MACRO_SQL_MAX SQL_CONVERT_VARBINARY;
MACRO_SQL_MAX SQL_CONVERT_VARCHAR;
MACRO_SQL_MAX SQL_CONVERT_WCHAR;
MACRO_SQL_MAX SQL_CONVERT_WLONGVARCHAR;
MACRO_SQL_MAX SQL_CONVERT_WVARCHAR;
MACRO_SQL SQL_COORDINATED_TRANS;
MACRO_SQL SQL_COPT_SS_ANSI_NPW;
MACRO_SQL SQL_COPT_SS_ANSI_OEM;
MACRO_SQL SQL_COPT_SS_BASE;
MACRO_SQL SQL_COPT_SS_BCP;
MACRO_SQL SQL_COPT_SS_CONNECTION_DEAD;
MACRO_SQL SQL_COPT_SS_ENLIST_IN_DTC;
MACRO_SQL SQL_COPT_SS_ENLIST_IN_XA;
MACRO_SQL SQL_COPT_SS_FALLBACK_CONNECT;
MACRO_SQL SQL_COPT_SS_INTEGRATED_SECURITY;
MACRO_SQL SQL_COPT_SS_MAX_USED;
MACRO_SQL SQL_COPT_SS_PERF_DATA;
MACRO_SQL SQL_COPT_SS_PERF_DATA_LOG;
MACRO_SQL SQL_COPT_SS_PERF_DATA_LOG_NOW;
MACRO_SQL SQL_COPT_SS_PERF_QUERY;
MACRO_SQL SQL_COPT_SS_PERF_QUERY_INTERVAL;
MACRO_SQL SQL_COPT_SS_PERF_QUERY_LOG;
MACRO_SQL SQL_COPT_SS_PRESERVE_CURSORS;
MACRO_SQL SQL_COPT_SS_QUOTED_IDENT;
MACRO_SQL SQL_COPT_SS_REMOTE_PWD;
MACRO_SQL SQL_COPT_SS_USER_DATA;
MACRO_SQL SQL_COPT_SS_USE_PROC_FOR_PREP;
MACRO_SQL_MAX SQL_CORRELATION_NAME;
MACRO_SQL_MAX SQL_CP_DEFAULT;
MACRO_SQL_MAX SQL_CP_MATCH_DEFAULT;
MACRO_SQL_MAX SQL_CP_OFF;
MACRO_SQL_MAX SQL_CP_ONE_PER_DRIVER;
MACRO_SQL_MAX SQL_CP_ONE_PER_HENV;
MACRO_SQL_MAX SQL_CP_RELAXED_MATCH;
MACRO_SQL_MAX SQL_CP_STRICT_MATCH;
MACRO_SQL_MAX SQL_CREATE_ASSERTION;
MACRO_SQL_MAX SQL_CREATE_CHARACTER_SET;
MACRO_SQL_MAX SQL_CREATE_COLLATION;
MACRO_SQL_MAX SQL_CREATE_DOMAIN;
MACRO_SQL_MAX SQL_CREATE_SCHEMA;
MACRO_SQL_MAX SQL_CREATE_TABLE;
MACRO_SQL_MAX SQL_CREATE_TRANSLATION;
MACRO_SQL_MAX SQL_CREATE_VIEW;
MACRO_SQL_MAX SQL_CR_CLOSE;
MACRO_SQL_MAX SQL_CR_DELETE;
MACRO_SQL_MAX SQL_CR_PRESERVE;
MACRO_SQL_MAX SQL_CS_AUTHORIZATION;
MACRO_SQL_MAX SQL_CS_CREATE_SCHEMA;
MACRO_SQL_MAX SQL_CS_DEFAULT_CHARACTER_SET;
MACRO_SQL_MAX SQL_CTR_CREATE_TRANSLATION;
MACRO_SQL_MAX SQL_CT_COLUMN_COLLATION;
MACRO_SQL_MAX SQL_CT_COLUMN_CONSTRAINT;
MACRO_SQL_MAX SQL_CT_COLUMN_DEFAULT;
MACRO_SQL_MAX SQL_CT_COMMIT_DELETE;
MACRO_SQL_MAX SQL_CT_COMMIT_PRESERVE;
MACRO_SQL_MAX SQL_CT_CONSTRAINT_DEFERRABLE;
MACRO_SQL_MAX SQL_CT_CONSTRAINT_INITIALLY_DEFERRED;
MACRO_SQL_MAX SQL_CT_CONSTRAINT_INITIALLY_IMMEDIATE;
MACRO_SQL_MAX SQL_CT_CONSTRAINT_NAME_DEFINITION;
MACRO_SQL_MAX SQL_CT_CONSTRAINT_NON_DEFERRABLE;
MACRO_SQL_MAX SQL_CT_CREATE_TABLE;
MACRO_SQL_MAX SQL_CT_GLOBAL_TEMPORARY;
MACRO_SQL_MAX SQL_CT_LOCAL_TEMPORARY;
MACRO_SQL_MAX SQL_CT_TABLE_CONSTRAINT;
MACRO_SQL_MAX SQL_CURRENT_QUALIFIER;
MACRO_SQL SQL_CURRENT_SCHEMA;
MACRO_SQL_MAX SQL_CURSOR_COMMIT_BEHAVIOR;
MACRO_SQL_MAX SQL_CURSOR_DYNAMIC;
MACRO_SQL_MAX SQL_CURSOR_FORWARD_ONLY;
MACRO_SQL SQL_CURSOR_HOLD;
MACRO_SQL SQL_CURSOR_HOLD_DEFAULT;
MACRO_SQL SQL_CURSOR_HOLD_OFF;
MACRO_SQL SQL_CURSOR_HOLD_ON;
MACRO_SQL_MAX SQL_CURSOR_KEYSET_DRIVEN;
MACRO_SQL_MAX SQL_CURSOR_ROLLBACK_BEHAVIOR;
MACRO_SQL_MAX SQL_CURSOR_SENSITIVITY;
MACRO_SQL_MAX SQL_CURSOR_STATIC;
MACRO_SQL_MAX SQL_CURSOR_TYPE;
MACRO_SQL_MAX SQL_CURSOR_TYPE_DEFAULT;
MACRO_SQL_MAX SQL_CUR_DEFAULT;
MACRO_SQL_MAX SQL_CUR_USE_DRIVER;
MACRO_SQL_MAX SQL_CUR_USE_IF_NEEDED;
MACRO_SQL_MAX SQL_CUR_USE_ODBC;
MACRO_SQL_MAX SQL_CVT_BIGINT;
MACRO_SQL_MAX SQL_CVT_BINARY;
MACRO_SQL_MAX SQL_CVT_BIT;
MACRO_SQL_MAX SQL_CVT_CHAR;
MACRO_SQL_MAX SQL_CVT_DATE;
MACRO_SQL_MAX SQL_CVT_DECIMAL;
MACRO_SQL_MAX SQL_CVT_DOUBLE;
MACRO_SQL_MAX SQL_CVT_FLOAT;
MACRO_SQL_MAX SQL_CVT_INTEGER;
MACRO_SQL_MAX SQL_CVT_INTERVAL_DAY_TIME;
MACRO_SQL_MAX SQL_CVT_INTERVAL_YEAR_MONTH;
MACRO_SQL_MAX SQL_CVT_LONGVARBINARY;
MACRO_SQL_MAX SQL_CVT_LONGVARCHAR;
MACRO_SQL_MAX SQL_CVT_NUMERIC;
MACRO_SQL_MAX SQL_CVT_REAL;
MACRO_SQL_MAX SQL_CVT_SMALLINT;
MACRO_SQL_MAX SQL_CVT_TIME;
MACRO_SQL_MAX SQL_CVT_TIMESTAMP;
MACRO_SQL_MAX SQL_CVT_TINYINT;
MACRO_SQL_MAX SQL_CVT_VARBINARY;
MACRO_SQL_MAX SQL_CVT_VARCHAR;
MACRO_SQL_MAX SQL_CVT_WCHAR;
MACRO_SQL_MAX SQL_CVT_WLONGVARCHAR;
MACRO_SQL_MAX SQL_CVT_WVARCHAR;
MACRO_SQL_MAX SQL_CV_CASCADED;
MACRO_SQL_MAX SQL_CV_CHECK_OPTION;
MACRO_SQL_MAX SQL_CV_CREATE_VIEW;
MACRO_SQL_MAX SQL_CV_LOCAL;
MACRO_SQL_MAX SQL_C_BINARY;
MACRO_SQL_MAX SQL_C_BIT;
MACRO_SQL_MAX SQL_C_BOOKMARK;
MACRO_SQL_MAX SQL_C_CHAR;
MACRO_SQL_MAX SQL_C_DATE;
MACRO_SQL_MAX SQL_C_DEFAULT;
MACRO_SQL_MAX SQL_C_DOUBLE;
MACRO_SQL_MAX SQL_C_FLOAT;
MACRO_SQL_MAX SQL_C_GUID;
MACRO_SQL_MAX SQL_C_INTERVAL_DAY;
MACRO_SQL_MAX SQL_C_INTERVAL_DAY_TO_HOUR;
MACRO_SQL_MAX SQL_C_INTERVAL_DAY_TO_MINUTE;
MACRO_SQL_MAX SQL_C_INTERVAL_DAY_TO_SECOND;
MACRO_SQL_MAX SQL_C_INTERVAL_HOUR;
MACRO_SQL_MAX SQL_C_INTERVAL_HOUR_TO_MINUTE;
MACRO_SQL_MAX SQL_C_INTERVAL_HOUR_TO_SECOND;
MACRO_SQL_MAX SQL_C_INTERVAL_MINUTE;
MACRO_SQL_MAX SQL_C_INTERVAL_MINUTE_TO_SECOND;
MACRO_SQL_MAX SQL_C_INTERVAL_MONTH;
MACRO_SQL_MAX SQL_C_INTERVAL_SECOND;
MACRO_SQL_MAX SQL_C_INTERVAL_YEAR;
MACRO_SQL_MAX SQL_C_INTERVAL_YEAR_TO_MONTH;
MACRO_SQL_MAX SQL_C_LONG;
MACRO_SQL_MAX SQL_C_NUMERIC;
MACRO_SQL_MAX SQL_C_SBIGINT;
MACRO_SQL_MAX SQL_C_SHORT;
MACRO_SQL_MAX SQL_C_SLONG;
MACRO_SQL_MAX SQL_C_SSHORT;
MACRO_SQL_MAX SQL_C_STINYINT;
MACRO_SQL_MAX SQL_C_TCHAR;
MACRO_SQL_MAX SQL_C_TIME;
MACRO_SQL_MAX SQL_C_TIMESTAMP;
MACRO_SQL_MAX SQL_C_TINYINT;
MACRO_SQL_MAX SQL_C_TYPE_DATE;
MACRO_SQL_MAX SQL_C_TYPE_TIME;
MACRO_SQL_MAX SQL_C_TYPE_TIMESTAMP;
MACRO_SQL_MAX SQL_C_UBIGINT;
MACRO_SQL_MAX SQL_C_ULONG;
MACRO_SQL_MAX SQL_C_USHORT;
MACRO_SQL_MAX SQL_C_UTINYINT;
MACRO_SQL_MAX SQL_C_VARBOOKMARK;
MACRO_SQL_MAX SQL_C_WCHAR;
MACRO_SQL_MAX SQL_DATABASE_NAME;
MACRO_SQL_MAX SQL_DATA_AT_EXEC;
MACRO_SQL_MAX SQL_DATA_SOURCE_NAME;
MACRO_SQL_MAX SQL_DATA_SOURCE_READ_ONLY;
MACRO_SQL_MAX SQL_DATE;
MACRO_SQL_MAX SQL_DATETIME;
MACRO_SQL_MAX SQL_DATETIME_LITERALS;
MACRO_SQL_MAX SQL_DATE_LEN;
MACRO_SQL_MAX SQL_DA_DROP_ASSERTION;
MACRO_SQL SQL_DB2ESTIMATE;
MACRO_SQL SQL_DB2ESTIMATE_DEFAULT;
MACRO_SQL SQL_DB2ESTIMATE_OFF;
MACRO_SQL SQL_DB2ESTIMATE_ON;
MACRO_SQL SQL_DB2EXPLAIN;
MACRO_SQL SQL_DB2EXPLAIN_DEFAULT;
MACRO_SQL SQL_DB2EXPLAIN_MODE_ON;
MACRO_SQL SQL_DB2EXPLAIN_OFF;
MACRO_SQL SQL_DB2EXPLAIN_ON;
MACRO_SQL SQL_DB2EXPLAIN_SNAPSHOT_MODE_ON;
MACRO_SQL SQL_DB2EXPLAIN_SNAPSHOT_ON;
MACRO_SQL_MAX SQL_DBMS_NAME;
MACRO_SQL_MAX SQL_DBMS_VER;
MACRO_SQL_MAX SQL_DB_DEFAULT;
MACRO_SQL_MAX SQL_DB_DISCONNECT;
MACRO_SQL_MAX SQL_DB_RETURN_TO_POOL;
MACRO_SQL_MAX SQL_DCS_DROP_CHARACTER_SET;
MACRO_SQL_MAX SQL_DC_DROP_COLLATION;
MACRO_SQL_MAX SQL_DDL_INDEX;
MACRO_SQL_MAX SQL_DD_CASCADE;
MACRO_SQL_MAX SQL_DD_DROP_DOMAIN;
MACRO_SQL_MAX SQL_DD_RESTRICT;
MACRO_SQL_MAX SQL_DECIMAL;
MACRO_SQL_MAX SQL_DEFAULT;
MACRO_SQL_MAX SQL_DEFAULT_PARAM;
MACRO_SQL_MAX SQL_DEFAULT_TXN_ISOLATION;
MACRO_SQL SQL_DEFERRED_PREPARE_DEFAULT;
MACRO_SQL SQL_DEFERRED_PREPARE_OFF;
MACRO_SQL SQL_DEFERRED_PREPARE_ON;
MACRO_SQL_MAX SQL_DELETE;
MACRO_SQL_MAX SQL_DELETE_BY_BOOKMARK;
MACRO_SQL_MAX SQL_DESCRIBE_PARAMETER;
MACRO_SQL_MAX SQL_DESC_ALLOC_AUTO;
MACRO_SQL_MAX SQL_DESC_ALLOC_TYPE;
MACRO_SQL_MAX SQL_DESC_ALLOC_USER;
MACRO_SQL_MAX SQL_DESC_ARRAY_SIZE;
MACRO_SQL_MAX SQL_DESC_ARRAY_STATUS_PTR;
MACRO_SQL_MAX SQL_DESC_AUTO_UNIQUE_VALUE;
MACRO_SQL_MAX SQL_DESC_BASE_COLUMN_NAME;
MACRO_SQL_MAX SQL_DESC_BASE_TABLE_NAME;
MACRO_SQL_MAX SQL_DESC_BIND_OFFSET_PTR;
MACRO_SQL_MAX SQL_DESC_BIND_TYPE;
MACRO_SQL_MAX SQL_DESC_CASE_SENSITIVE;
MACRO_SQL_MAX SQL_DESC_CATALOG_NAME;
MACRO_SQL_MAX SQL_DESC_CONCISE_TYPE;
MACRO_SQL_MAX SQL_DESC_COUNT;
MACRO_SQL_MAX SQL_DESC_DATA_PTR;
MACRO_SQL_MAX SQL_DESC_DATETIME_INTERVAL_CODE;
MACRO_SQL_MAX SQL_DESC_DATETIME_INTERVAL_PRECISION;
MACRO_SQL_MAX SQL_DESC_DISPLAY_SIZE;
MACRO_SQL SQL_DESC_EXPR;
MACRO_SQL_MAX SQL_DESC_FIXED_PREC_SCALE;
MACRO_SQL_MAX SQL_DESC_INDICATOR_PTR;
MACRO_SQL SQL_DESC_KEY;
MACRO_SQL_MAX SQL_DESC_LABEL;
MACRO_SQL_MAX SQL_DESC_LENGTH;
MACRO_SQL_MAX SQL_DESC_LITERAL_PREFIX;
MACRO_SQL_MAX SQL_DESC_LITERAL_SUFFIX;
MACRO_SQL_MAX SQL_DESC_LOCAL_TYPE_NAME;
MACRO_SQL_MAX SQL_DESC_MAXIMUM_SCALE;
MACRO_SQL_MAX SQL_DESC_MINIMUM_SCALE;
MACRO_SQL_MAX SQL_DESC_NAME;
MACRO_SQL_MAX SQL_DESC_NULLABLE;
MACRO_SQL_MAX SQL_DESC_NUM_PREC_RADIX;
MACRO_SQL_MAX SQL_DESC_OCTET_LENGTH;
MACRO_SQL_MAX SQL_DESC_OCTET_LENGTH_PTR;
MACRO_SQL_MAX SQL_DESC_PARAMETER_TYPE;
MACRO_SQL_MAX SQL_DESC_PRECISION;
MACRO_SQL_MAX SQL_DESC_ROWS_PROCESSED_PTR;
MACRO_SQL_MAX SQL_DESC_ROWVER;
MACRO_SQL_MAX SQL_DESC_SCALE;
MACRO_SQL_MAX SQL_DESC_SCHEMA_NAME;
MACRO_SQL_MAX SQL_DESC_SEARCHABLE;
MACRO_SQL_MAX SQL_DESC_TABLE_NAME;
MACRO_SQL_MAX SQL_DESC_TYPE;
MACRO_SQL_MAX SQL_DESC_TYPE_NAME;
MACRO_SQL_MAX SQL_DESC_UNNAMED;
MACRO_SQL_MAX SQL_DESC_UNSIGNED;
MACRO_SQL_MAX SQL_DESC_UPDATABLE;
MACRO_SQL_MAX SQL_DIAG_ALTER_DOMAIN;
MACRO_SQL_MAX SQL_DIAG_ALTER_TABLE;
MACRO_SQL_MAX SQL_DIAG_CALL;
MACRO_SQL_MAX SQL_DIAG_CLASS_ORIGIN;
MACRO_SQL_MAX SQL_DIAG_COLUMN_NUMBER;
MACRO_SQL_MAX SQL_DIAG_CONNECTION_NAME;
MACRO_SQL_MAX SQL_DIAG_CREATE_ASSERTION;
MACRO_SQL_MAX SQL_DIAG_CREATE_CHARACTER_SET;
MACRO_SQL_MAX SQL_DIAG_CREATE_COLLATION;
MACRO_SQL_MAX SQL_DIAG_CREATE_DOMAIN;
MACRO_SQL_MAX SQL_DIAG_CREATE_INDEX;
MACRO_SQL_MAX SQL_DIAG_CREATE_SCHEMA;
MACRO_SQL_MAX SQL_DIAG_CREATE_TABLE;
MACRO_SQL_MAX SQL_DIAG_CREATE_TRANSLATION;
MACRO_SQL_MAX SQL_DIAG_CREATE_VIEW;
MACRO_SQL_MAX SQL_DIAG_CURSOR_ROW_COUNT;
MACRO_SQL_MAX SQL_DIAG_DELETE_WHERE;
MACRO_SQL_MAX SQL_DIAG_DROP_ASSERTION;
MACRO_SQL_MAX SQL_DIAG_DROP_CHARACTER_SET;
MACRO_SQL_MAX SQL_DIAG_DROP_COLLATION;
MACRO_SQL_MAX SQL_DIAG_DROP_DOMAIN;
MACRO_SQL_MAX SQL_DIAG_DROP_INDEX;
MACRO_SQL_MAX SQL_DIAG_DROP_SCHEMA;
MACRO_SQL_MAX SQL_DIAG_DROP_TABLE;
MACRO_SQL_MAX SQL_DIAG_DROP_TRANSLATION;
MACRO_SQL_MAX SQL_DIAG_DROP_VIEW;
MACRO_SQL_MAX SQL_DIAG_DYNAMIC_DELETE_CURSOR;
MACRO_SQL_MAX SQL_DIAG_DYNAMIC_FUNCTION;
MACRO_SQL_MAX SQL_DIAG_DYNAMIC_FUNCTION_CODE;
MACRO_SQL_MAX SQL_DIAG_DYNAMIC_UPDATE_CURSOR;
MACRO_SQL_MAX SQL_DIAG_GRANT;
MACRO_SQL_MAX SQL_DIAG_INSERT;
MACRO_SQL_MAX SQL_DIAG_MESSAGE_TEXT;
MACRO_SQL_MAX SQL_DIAG_NATIVE;
MACRO_SQL_MAX SQL_DIAG_NUMBER;
MACRO_SQL_MAX SQL_DIAG_RETURNCODE;
MACRO_SQL_MAX SQL_DIAG_REVOKE;
MACRO_SQL_MAX SQL_DIAG_ROW_COUNT;
MACRO_SQL_MAX SQL_DIAG_ROW_NUMBER;
MACRO_SQL_MAX SQL_DIAG_SELECT_CURSOR;
MACRO_SQL_MAX SQL_DIAG_SERVER_NAME;
MACRO_SQL_MAX SQL_DIAG_SQLSTATE;
MACRO_SQL_MAX SQL_DIAG_SUBCLASS_ORIGIN;
MACRO_SQL_MAX SQL_DIAG_UNKNOWN_STATEMENT;
MACRO_SQL_MAX SQL_DIAG_UPDATE_WHERE;
MACRO_SQL_MAX SQL_DI_CREATE_INDEX;
MACRO_SQL_MAX SQL_DI_DROP_INDEX;
MACRO_SQL_MAX SQL_DL_SQL92_DATE;
MACRO_SQL_MAX SQL_DL_SQL92_INTERVAL_DAY;
MACRO_SQL_MAX SQL_DL_SQL92_INTERVAL_DAY_TO_HOUR;
MACRO_SQL_MAX SQL_DL_SQL92_INTERVAL_DAY_TO_MINUTE;
MACRO_SQL_MAX SQL_DL_SQL92_INTERVAL_DAY_TO_SECOND;
MACRO_SQL_MAX SQL_DL_SQL92_INTERVAL_HOUR;
MACRO_SQL_MAX SQL_DL_SQL92_INTERVAL_HOUR_TO_MINUTE;
MACRO_SQL_MAX SQL_DL_SQL92_INTERVAL_HOUR_TO_SECOND;
MACRO_SQL_MAX SQL_DL_SQL92_INTERVAL_MINUTE;
MACRO_SQL_MAX SQL_DL_SQL92_INTERVAL_MINUTE_TO_SECOND;
MACRO_SQL_MAX SQL_DL_SQL92_INTERVAL_MONTH;
MACRO_SQL_MAX SQL_DL_SQL92_INTERVAL_SECOND;
MACRO_SQL_MAX SQL_DL_SQL92_INTERVAL_YEAR;
MACRO_SQL_MAX SQL_DL_SQL92_INTERVAL_YEAR_TO_MONTH;
MACRO_SQL_MAX SQL_DL_SQL92_TIME;
MACRO_SQL_MAX SQL_DL_SQL92_TIMESTAMP;
MACRO_SQL_MAX SQL_DM_VER;
MACRO_SQL_MAX SQL_DOUBLE;
MACRO_SQL_MAX SQL_DRIVER_COMPLETE;
MACRO_SQL_MAX SQL_DRIVER_COMPLETE_REQUIRED;
MACRO_SQL_MAX SQL_DRIVER_HDBC;
MACRO_SQL_MAX SQL_DRIVER_HDESC;
MACRO_SQL_MAX SQL_DRIVER_HENV;
MACRO_SQL_MAX SQL_DRIVER_HLIB;
MACRO_SQL_MAX SQL_DRIVER_HSTMT;
MACRO_SQL_MAX SQL_DRIVER_NAME;
MACRO_SQL_MAX SQL_DRIVER_NOPROMPT;
MACRO_SQL_MAX SQL_DRIVER_ODBC_VER;
MACRO_SQL_MAX SQL_DRIVER_PROMPT;
MACRO_SQL_MAX SQL_DRIVER_VER;
MACRO_SQL_MAX SQL_DROP;
MACRO_SQL_MAX SQL_DROP_ASSERTION;
MACRO_SQL_MAX SQL_DROP_CHARACTER_SET;
MACRO_SQL_MAX SQL_DROP_COLLATION;
MACRO_SQL_MAX SQL_DROP_DOMAIN;
MACRO_SQL_MAX SQL_DROP_SCHEMA;
MACRO_SQL_MAX SQL_DROP_TABLE;
MACRO_SQL_MAX SQL_DROP_TRANSLATION;
MACRO_SQL_MAX SQL_DROP_VIEW;
MACRO_SQL_MAX SQL_DS_CASCADE;
MACRO_SQL_MAX SQL_DS_DROP_SCHEMA;
MACRO_SQL_MAX SQL_DS_RESTRICT;
MACRO_SQL_MAX SQL_DTC_DONE;
MACRO_SQL_MAX SQL_DTC_ENLIST_EXPENSIVE;
MACRO_SQL_MAX SQL_DTC_TRANSITION_COST;
MACRO_SQL_MAX SQL_DTC_UNENLIST_EXPENSIVE;
MACRO_SQL_MAX SQL_DTR_DROP_TRANSLATION;
MACRO_SQL_MAX SQL_DT_CASCADE;
MACRO_SQL_MAX SQL_DT_DROP_TABLE;
MACRO_SQL_MAX SQL_DT_RESTRICT;
MACRO_SQL_MAX SQL_DV_CASCADE;
MACRO_SQL_MAX SQL_DV_DROP_VIEW;
MACRO_SQL_MAX SQL_DV_RESTRICT;
MACRO_SQL_MAX SQL_DYNAMIC_CURSOR_ATTRIBUTES1;
MACRO_SQL_MAX SQL_DYNAMIC_CURSOR_ATTRIBUTES2;
MACRO_SQL SQL_EARLYCLOSE_DEFAULT;
MACRO_SQL SQL_EARLYCLOSE_OFF;
MACRO_SQL SQL_EARLYCLOSE_ON;
MACRO_SQL_MAX SQL_ENSURE;
MACRO_SQL_MAX SQL_ENTIRE_ROWSET;
MACRO_SQL_MAX SQL_ERROR;
MACRO_SQL_MAX SQL_EXPRESSIONS_IN_ORDERBY;
MACRO_SQL_MAX SQL_FALSE;
MACRO_SQL SQL_FB_DEFAULT;
MACRO_SQL SQL_FB_OFF;
MACRO_SQL SQL_FB_ON;
MACRO_SQL_MAX SQL_FD_FETCH_ABSOLUTE;
MACRO_SQL_MAX SQL_FD_FETCH_BOOKMARK;
MACRO_SQL_MAX SQL_FD_FETCH_FIRST;
MACRO_SQL_MAX SQL_FD_FETCH_LAST;
MACRO_SQL_MAX SQL_FD_FETCH_NEXT;
MACRO_SQL_MAX SQL_FD_FETCH_PREV;
MACRO_SQL_MAX SQL_FD_FETCH_PRIOR;
MACRO_SQL_MAX SQL_FD_FETCH_RELATIVE;
MACRO_SQL_MAX SQL_FETCH_ABSOLUTE;
MACRO_SQL_MAX SQL_FETCH_BOOKMARK;
MACRO_SQL_MAX SQL_FETCH_BY_BOOKMARK;
MACRO_SQL_MAX SQL_FETCH_DIRECTION;
MACRO_SQL_MAX SQL_FETCH_FIRST;
MACRO_SQL_MAX SQL_FETCH_FIRST_SYSTEM;
MACRO_SQL_MAX SQL_FETCH_FIRST_USER;
MACRO_SQL_MAX SQL_FETCH_LAST;
MACRO_SQL_MAX SQL_FETCH_NEXT;
MACRO_SQL_MAX SQL_FETCH_PREV;
MACRO_SQL_MAX SQL_FETCH_PRIOR;
MACRO_SQL_MAX SQL_FETCH_RELATIVE;
MACRO_SQL_MAX SQL_FILE_CATALOG;
MACRO_SQL_MAX SQL_FILE_NOT_SUPPORTED;
MACRO_SQL_MAX SQL_FILE_QUALIFIER;
MACRO_SQL_MAX SQL_FILE_TABLE;
MACRO_SQL_MAX SQL_FILE_USAGE;
MACRO_SQL_MAX SQL_FLOAT;
MACRO_SQL_MAX SQL_FN_CVT_CAST;
MACRO_SQL_MAX SQL_FN_CVT_CONVERT;
MACRO_SQL_MAX SQL_FN_NUM_ABS;
MACRO_SQL_MAX SQL_FN_NUM_ACOS;
MACRO_SQL_MAX SQL_FN_NUM_ASIN;
MACRO_SQL_MAX SQL_FN_NUM_ATAN;
MACRO_SQL_MAX SQL_FN_NUM_ATAN2;
MACRO_SQL_MAX SQL_FN_NUM_CEILING;
MACRO_SQL_MAX SQL_FN_NUM_COS;
MACRO_SQL_MAX SQL_FN_NUM_COT;
MACRO_SQL_MAX SQL_FN_NUM_DEGREES;
MACRO_SQL_MAX SQL_FN_NUM_EXP;
MACRO_SQL_MAX SQL_FN_NUM_FLOOR;
MACRO_SQL_MAX SQL_FN_NUM_LOG;
MACRO_SQL_MAX SQL_FN_NUM_LOG10;
MACRO_SQL_MAX SQL_FN_NUM_MOD;
MACRO_SQL_MAX SQL_FN_NUM_PI;
MACRO_SQL_MAX SQL_FN_NUM_POWER;
MACRO_SQL_MAX SQL_FN_NUM_RADIANS;
MACRO_SQL_MAX SQL_FN_NUM_RAND;
MACRO_SQL_MAX SQL_FN_NUM_ROUND;
MACRO_SQL_MAX SQL_FN_NUM_SIGN;
MACRO_SQL_MAX SQL_FN_NUM_SIN;
MACRO_SQL_MAX SQL_FN_NUM_SQRT;
MACRO_SQL_MAX SQL_FN_NUM_TAN;
MACRO_SQL_MAX SQL_FN_NUM_TRUNCATE;
MACRO_SQL_MAX SQL_FN_STR_ASCII;
MACRO_SQL_MAX SQL_FN_STR_BIT_LENGTH;
MACRO_SQL_MAX SQL_FN_STR_CHAR;
MACRO_SQL_MAX SQL_FN_STR_CHARACTER_LENGTH;
MACRO_SQL_MAX SQL_FN_STR_CHAR_LENGTH;
MACRO_SQL_MAX SQL_FN_STR_CONCAT;
MACRO_SQL_MAX SQL_FN_STR_DIFFERENCE;
MACRO_SQL_MAX SQL_FN_STR_INSERT;
MACRO_SQL_MAX SQL_FN_STR_LCASE;
MACRO_SQL_MAX SQL_FN_STR_LEFT;
MACRO_SQL_MAX SQL_FN_STR_LENGTH;
MACRO_SQL_MAX SQL_FN_STR_LOCATE;
MACRO_SQL_MAX SQL_FN_STR_LOCATE_2;
MACRO_SQL_MAX SQL_FN_STR_LTRIM;
MACRO_SQL_MAX SQL_FN_STR_OCTET_LENGTH;
MACRO_SQL_MAX SQL_FN_STR_POSITION;
MACRO_SQL_MAX SQL_FN_STR_REPEAT;
MACRO_SQL_MAX SQL_FN_STR_REPLACE;
MACRO_SQL_MAX SQL_FN_STR_RIGHT;
MACRO_SQL_MAX SQL_FN_STR_RTRIM;
MACRO_SQL_MAX SQL_FN_STR_SOUNDEX;
MACRO_SQL_MAX SQL_FN_STR_SPACE;
MACRO_SQL_MAX SQL_FN_STR_SUBSTRING;
MACRO_SQL_MAX SQL_FN_STR_UCASE;
MACRO_SQL_MAX SQL_FN_SYS_DBNAME;
MACRO_SQL_MAX SQL_FN_SYS_IFNULL;
MACRO_SQL_MAX SQL_FN_SYS_USERNAME;
MACRO_SQL_MAX SQL_FN_TD_CURDATE;
MACRO_SQL_MAX SQL_FN_TD_CURRENT_DATE;
MACRO_SQL_MAX SQL_FN_TD_CURRENT_TIME;
MACRO_SQL_MAX SQL_FN_TD_CURRENT_TIMESTAMP;
MACRO_SQL_MAX SQL_FN_TD_CURTIME;
MACRO_SQL_MAX SQL_FN_TD_DAYNAME;
MACRO_SQL_MAX SQL_FN_TD_DAYOFMONTH;
MACRO_SQL_MAX SQL_FN_TD_DAYOFWEEK;
MACRO_SQL_MAX SQL_FN_TD_DAYOFYEAR;
MACRO_SQL_MAX SQL_FN_TD_EXTRACT;
MACRO_SQL_MAX SQL_FN_TD_HOUR;
MACRO_SQL_MAX SQL_FN_TD_MINUTE;
MACRO_SQL_MAX SQL_FN_TD_MONTH;
MACRO_SQL_MAX SQL_FN_TD_MONTHNAME;
MACRO_SQL_MAX SQL_FN_TD_NOW;
MACRO_SQL_MAX SQL_FN_TD_QUARTER;
MACRO_SQL_MAX SQL_FN_TD_SECOND;
MACRO_SQL_MAX SQL_FN_TD_TIMESTAMPADD;
MACRO_SQL_MAX SQL_FN_TD_TIMESTAMPDIFF;
MACRO_SQL_MAX SQL_FN_TD_WEEK;
MACRO_SQL_MAX SQL_FN_TD_YEAR;
MACRO_SQL_MAX SQL_FN_TSI_DAY;
MACRO_SQL_MAX SQL_FN_TSI_FRAC_SECOND;
MACRO_SQL_MAX SQL_FN_TSI_HOUR;
MACRO_SQL_MAX SQL_FN_TSI_MINUTE;
MACRO_SQL_MAX SQL_FN_TSI_MONTH;
MACRO_SQL_MAX SQL_FN_TSI_QUARTER;
MACRO_SQL_MAX SQL_FN_TSI_SECOND;
MACRO_SQL_MAX SQL_FN_TSI_WEEK;
MACRO_SQL_MAX SQL_FN_TSI_YEAR;
MACRO_SQL_MAX SQL_FORWARD_ONLY_CURSOR_ATTRIBUTES1;
MACRO_SQL_MAX SQL_FORWARD_ONLY_CURSOR_ATTRIBUTES2;
MACRO_SQL_MAX SQL_GB_COLLATE;
MACRO_SQL_MAX SQL_GB_GROUP_BY_CONTAINS_SELECT;
MACRO_SQL_MAX SQL_GB_GROUP_BY_EQUALS_SELECT;
MACRO_SQL_MAX SQL_GB_NOT_SUPPORTED;
MACRO_SQL_MAX SQL_GB_NO_RELATION;
MACRO_SQL_MAX SQL_GD_ANY_COLUMN;
MACRO_SQL_MAX SQL_GD_ANY_ORDER;
MACRO_SQL_MAX SQL_GD_BLOCK;
MACRO_SQL_MAX SQL_GD_BOUND;
MACRO_SQL_MAX SQL_GETDATA_EXTENSIONS;
MACRO_SQL SQL_GETLASTROWID;
MACRO_SQL SQL_GETLASTSERIAL;
MACRO_SQL_MAX SQL_GET_BOOKMARK;
MACRO_SQL_MAX SQL_GROUP_BY;
MACRO_SQL_MAX SQL_GUID;
MACRO_SQL_MAX SQL_HANDLE_DBC;
MACRO_SQL_MAX SQL_HANDLE_DESC;
MACRO_SQL_MAX SQL_HANDLE_ENV;
MACRO_SQL_MAX SQL_HANDLE_SENV;
MACRO_SQL_MAX SQL_HANDLE_STMT;
MACRO_SQL SQL_HC_DEFAULT;
MACRO_SQL SQL_HC_OFF;
MACRO_SQL SQL_HC_ON;
MACRO_SQL_MAX SQL_IC_LOWER;
MACRO_SQL_MAX SQL_IC_MIXED;
MACRO_SQL_MAX SQL_IC_SENSITIVE;
MACRO_SQL_MAX SQL_IC_UPPER;
MACRO_SQL_MAX SQL_IDENTIFIER_CASE;
MACRO_SQL_MAX SQL_IDENTIFIER_QUOTE_CHAR;
MACRO_SQL_MAX SQL_IGNORE;
MACRO_SQL_MAX SQL_IK_ALL;
MACRO_SQL_MAX SQL_IK_ASC;
MACRO_SQL_MAX SQL_IK_DESC;
MACRO_SQL_MAX SQL_IK_NONE;
MACRO_SQL_MAX SQL_INDEX_ALL;
MACRO_SQL_MAX SQL_INDEX_CLUSTERED;
MACRO_SQL_MAX SQL_INDEX_HASHED;
MACRO_SQL_MAX SQL_INDEX_KEYWORDS;
MACRO_SQL_MAX SQL_INDEX_OTHER;
MACRO_SQL_MAX SQL_INDEX_UNIQUE;
MACRO_SQL_MAX SQL_INFO_FIRST;
MACRO_SQL_MAX SQL_INFO_SCHEMA_VIEWS;
MACRO_SQL_MAX SQL_INITIALLY_DEFERRED;
MACRO_SQL_MAX SQL_INITIALLY_IMMEDIATE;
MACRO_SQL_MAX SQL_INSENSITIVE;
MACRO_SQL_MAX SQL_INSERT_STATEMENT;
MACRO_SQL_MAX SQL_INTEGER;
MACRO_SQL_MAX SQL_INTEGRITY;
MACRO_SQL_MAX SQL_INTERVAL;
MACRO_SQL_MAX SQL_INTERVAL_DAY;
MACRO_SQL_MAX SQL_INTERVAL_DAY_TO_HOUR;
MACRO_SQL_MAX SQL_INTERVAL_DAY_TO_MINUTE;
MACRO_SQL_MAX SQL_INTERVAL_DAY_TO_SECOND;
MACRO_SQL_MAX SQL_INTERVAL_HOUR;
MACRO_SQL_MAX SQL_INTERVAL_HOUR_TO_MINUTE;
MACRO_SQL_MAX SQL_INTERVAL_HOUR_TO_SECOND;
MACRO_SQL_MAX SQL_INTERVAL_MINUTE;
MACRO_SQL_MAX SQL_INTERVAL_MINUTE_TO_SECOND;
MACRO_SQL_MAX SQL_INTERVAL_MONTH;
MACRO_SQL_MAX SQL_INTERVAL_SECOND;
MACRO_SQL_MAX SQL_INTERVAL_YEAR;
MACRO_SQL_MAX SQL_INTERVAL_YEAR_TO_MONTH;
MACRO_SQL_MAX SQL_INVALID_HANDLE;
MACRO_SQL_MAX SQL_ISV_ASSERTIONS;
MACRO_SQL_MAX SQL_ISV_CHARACTER_SETS;
MACRO_SQL_MAX SQL_ISV_CHECK_CONSTRAINTS;
MACRO_SQL_MAX SQL_ISV_COLLATIONS;
MACRO_SQL_MAX SQL_ISV_COLUMNS;
MACRO_SQL_MAX SQL_ISV_COLUMN_DOMAIN_USAGE;
MACRO_SQL_MAX SQL_ISV_COLUMN_PRIVILEGES;
MACRO_SQL_MAX SQL_ISV_CONSTRAINT_COLUMN_USAGE;
MACRO_SQL_MAX SQL_ISV_CONSTRAINT_TABLE_USAGE;
MACRO_SQL_MAX SQL_ISV_DOMAINS;
MACRO_SQL_MAX SQL_ISV_DOMAIN_CONSTRAINTS;
MACRO_SQL_MAX SQL_ISV_KEY_COLUMN_USAGE;
MACRO_SQL_MAX SQL_ISV_REFERENTIAL_CONSTRAINTS;
MACRO_SQL_MAX SQL_ISV_SCHEMATA;
MACRO_SQL_MAX SQL_ISV_SQL_LANGUAGES;
MACRO_SQL_MAX SQL_ISV_TABLES;
MACRO_SQL_MAX SQL_ISV_TABLE_CONSTRAINTS;
MACRO_SQL_MAX SQL_ISV_TABLE_PRIVILEGES;
MACRO_SQL_MAX SQL_ISV_TRANSLATIONS;
MACRO_SQL_MAX SQL_ISV_USAGE_PRIVILEGES;
MACRO_SQL_MAX SQL_ISV_VIEWS;
MACRO_SQL_MAX SQL_ISV_VIEW_COLUMN_USAGE;
MACRO_SQL_MAX SQL_ISV_VIEW_TABLE_USAGE;
$AAF7D8B1D740C4801D49F07692D1E0A1 SQL_IS_DAY;
$AAF7D8B1D740C4801D49F07692D1E0A1 SQL_IS_DAY_TO_HOUR;
$AAF7D8B1D740C4801D49F07692D1E0A1 SQL_IS_DAY_TO_MINUTE;
$AAF7D8B1D740C4801D49F07692D1E0A1 SQL_IS_DAY_TO_SECOND;
MACRO_SQL SQL_IS_DEFAULT;
$AAF7D8B1D740C4801D49F07692D1E0A1 SQL_IS_HOUR;
$AAF7D8B1D740C4801D49F07692D1E0A1 SQL_IS_HOUR_TO_MINUTE;
$AAF7D8B1D740C4801D49F07692D1E0A1 SQL_IS_HOUR_TO_SECOND;
MACRO_SQL_MAX SQL_IS_INSERT_LITERALS;
MACRO_SQL_MAX SQL_IS_INSERT_SEARCHED;
MACRO_SQL_MAX SQL_IS_INTEGER;
$AAF7D8B1D740C4801D49F07692D1E0A1 SQL_IS_MINUTE;
$AAF7D8B1D740C4801D49F07692D1E0A1 SQL_IS_MINUTE_TO_SECOND;
$AAF7D8B1D740C4801D49F07692D1E0A1 SQL_IS_MONTH;
MACRO_SQL SQL_IS_OFF;
MACRO_SQL SQL_IS_ON;
MACRO_SQL_MAX SQL_IS_POINTER;
$AAF7D8B1D740C4801D49F07692D1E0A1 SQL_IS_SECOND;
MACRO_SQL_MAX SQL_IS_SELECT_INTO;
MACRO_SQL_MAX SQL_IS_SMALLINT;
MACRO_SQL_MAX SQL_IS_UINTEGER;
MACRO_SQL_MAX SQL_IS_USMALLINT;
$AAF7D8B1D740C4801D49F07692D1E0A1 SQL_IS_YEAR;
$AAF7D8B1D740C4801D49F07692D1E0A1 SQL_IS_YEAR_TO_MONTH;
MACRO_SQL_MAX SQL_KEYSET_CURSOR_ATTRIBUTES1;
MACRO_SQL_MAX SQL_KEYSET_CURSOR_ATTRIBUTES2;
MACRO_SQL_MAX SQL_KEYSET_SIZE;
MACRO_SQL_MAX SQL_KEYSET_SIZE_DEFAULT;
MACRO_SQL_MAX SQL_KEYWORDS;
MACRO_SQL_MAX SQL_LCK_EXCLUSIVE;
MACRO_SQL_MAX SQL_LCK_NO_CHANGE;
MACRO_SQL_MAX SQL_LCK_UNLOCK;
MACRO_SQL SQL_LD_COMPAT_DEFAULT;
MACRO_SQL SQL_LD_COMPAT_NO;
MACRO_SQL SQL_LD_COMPAT_YES;
MACRO_SQL_MAX SQL_LEN_BINARY_ATTR_OFFSET;
MACRO_SQL_MAX SQL_LEN_DATA_AT_EXEC_OFFSET;
MACRO_SQL_MAX SQL_LIKE_ESCAPE_CLAUSE;
MACRO_SQL_MAX SQL_LIKE_ONLY;
MACRO_SQL_MAX SQL_LOCK_EXCLUSIVE;
MACRO_SQL_MAX SQL_LOCK_NO_CHANGE;
MACRO_SQL_MAX SQL_LOCK_TYPES;
MACRO_SQL_MAX SQL_LOCK_UNLOCK;
MACRO_SQL_MAX SQL_LOGIN_TIMEOUT;
MACRO_SQL_MAX SQL_LOGIN_TIMEOUT_DEFAULT;
MACRO_SQL SQL_LONGDATA_COMPAT;
MACRO_SQL_MAX SQL_LONGVARBINARY;
MACRO_SQL_MAX SQL_LONGVARCHAR;
MACRO_SQL SQL_MAXCONN;
MACRO_SQL_MAX SQL_MAXIMUM_CATALOG_NAME_LENGTH;
MACRO_SQL_MAX SQL_MAXIMUM_COLUMNS_IN_GROUP_BY;
MACRO_SQL_MAX SQL_MAXIMUM_COLUMNS_IN_INDEX;
MACRO_SQL_MAX SQL_MAXIMUM_COLUMNS_IN_ORDER_BY;
MACRO_SQL_MAX SQL_MAXIMUM_COLUMNS_IN_SELECT;
MACRO_SQL_MAX SQL_MAXIMUM_COLUMN_NAME_LENGTH;
MACRO_SQL_MAX SQL_MAXIMUM_CONCURRENT_ACTIVITIES;
MACRO_SQL_MAX SQL_MAXIMUM_CURSOR_NAME_LENGTH;
MACRO_SQL_MAX SQL_MAXIMUM_DRIVER_CONNECTIONS;
MACRO_SQL_MAX SQL_MAXIMUM_IDENTIFIER_LENGTH;
MACRO_SQL_MAX SQL_MAXIMUM_INDEX_SIZE;
MACRO_SQL_MAX SQL_MAXIMUM_ROW_SIZE;
MACRO_SQL_MAX SQL_MAXIMUM_SCHEMA_NAME_LENGTH;
MACRO_SQL_MAX SQL_MAXIMUM_STATEMENT_LENGTH;
MACRO_SQL_MAX SQL_MAXIMUM_TABLES_IN_SELECT;
MACRO_SQL_MAX SQL_MAXIMUM_USER_NAME_LENGTH;
MACRO_SQL_MAX SQL_MAX_ASYNC_CONCURRENT_STATEMENTS;
MACRO_SQL_MAX SQL_MAX_BINARY_LITERAL_LEN;
MACRO_SQL_MAX SQL_MAX_CATALOG_NAME_LEN;
MACRO_SQL_MAX SQL_MAX_CHAR_LITERAL_LEN;
MACRO_SQL_MAX SQL_MAX_COLUMNS_IN_GROUP_BY;
MACRO_SQL_MAX SQL_MAX_COLUMNS_IN_INDEX;
MACRO_SQL_MAX SQL_MAX_COLUMNS_IN_ORDER_BY;
MACRO_SQL_MAX SQL_MAX_COLUMNS_IN_SELECT;
MACRO_SQL_MAX SQL_MAX_COLUMNS_IN_TABLE;
MACRO_SQL_MAX SQL_MAX_COLUMN_NAME_LEN;
MACRO_SQL_MAX SQL_MAX_CONCURRENT_ACTIVITIES;
MACRO_SQL_MAX SQL_MAX_CURSOR_NAME_LEN;
MACRO_SQL_MAX SQL_MAX_DRIVER_CONNECTIONS;
MACRO_SQL_MAX SQL_MAX_DSN_LENGTH;
MACRO_SQL_MAX SQL_MAX_IDENTIFIER_LEN;
MACRO_SQL_MAX SQL_MAX_INDEX_SIZE;
MACRO_SQL_MAX SQL_MAX_LENGTH;
MACRO_SQL_MAX SQL_MAX_LENGTH_DEFAULT;
MACRO_SQL_MAX SQL_MAX_MESSAGE_LENGTH;
MACRO_SQL_MAX SQL_MAX_NUMERIC_LEN;
MACRO_SQL_MAX SQL_MAX_OPTION_STRING_LENGTH;
MACRO_SQL_MAX SQL_MAX_OWNER_NAME_LEN;
MACRO_SQL_MAX SQL_MAX_PROCEDURE_NAME_LEN;
MACRO_SQL_MAX SQL_MAX_QUALIFIER_NAME_LEN;
MACRO_SQL_MAX SQL_MAX_ROWS;
MACRO_SQL_MAX SQL_MAX_ROWS_DEFAULT;
MACRO_SQL_MAX SQL_MAX_ROW_SIZE;
MACRO_SQL_MAX SQL_MAX_ROW_SIZE_INCLUDES_LONG;
MACRO_SQL_MAX SQL_MAX_SCHEMA_NAME_LEN;
MACRO_SQL_MAX SQL_MAX_STATEMENT_LEN;
MACRO_SQL_MAX SQL_MAX_TABLES_IN_SELECT;
MACRO_SQL_MAX SQL_MAX_TABLE_NAME_LEN;
MACRO_SQL_MAX SQL_MAX_USER_NAME_LEN;
MACRO_SQL SQL_MINMEMORY_USAGE;
MACRO_SQL_MAX SQL_MODE_DEFAULT;
MACRO_SQL_MAX SQL_MODE_READ_ONLY;
MACRO_SQL_MAX SQL_MODE_READ_WRITE;
MACRO_SQL_MAX SQL_MULTIPLE_ACTIVE_TXN;
MACRO_SQL_MAX SQL_MULT_RESULT_SETS;
MACRO_SQL_MAX SQL_NAMED;
MACRO_SQL SQL_NB_DEFAULT;
MACRO_SQL SQL_NB_OFF;
MACRO_SQL SQL_NB_ON;
MACRO_SQL_MAX SQL_NC_END;
MACRO_SQL_MAX SQL_NC_HIGH;
MACRO_SQL_MAX SQL_NC_LOW;
MACRO_SQL_MAX SQL_NC_START;
MACRO_SQL_MAX SQL_NEED_DATA;
MACRO_SQL_MAX SQL_NEED_LONG_DATA_LEN;
MACRO_SQL_MAX SQL_NNC_NON_NULL;
MACRO_SQL_MAX SQL_NNC_NULL;
MACRO_SQL SQL_NODESCRIBE;
MACRO_SQL SQL_NODESCRIBE_DEFAULT;
MACRO_SQL SQL_NODESCRIBE_INPUT;
MACRO_SQL SQL_NODESCRIBE_OFF;
MACRO_SQL SQL_NODESCRIBE_ON;
MACRO_SQL SQL_NODESCRIBE_OUTPUT;
MACRO_SQL_MAX SQL_NONSCROLLABLE;
MACRO_SQL_MAX SQL_NON_NULLABLE_COLUMNS;
MACRO_SQL_MAX SQL_NOSCAN;
MACRO_SQL_MAX SQL_NOSCAN_DEFAULT;
MACRO_SQL_MAX SQL_NOSCAN_OFF;
MACRO_SQL_MAX SQL_NOSCAN_ON;
MACRO_SQL_MAX SQL_NOT_DEFERRABLE;
MACRO_SQL_MAX SQL_NO_ACTION;
MACRO_SQL_MAX SQL_NO_COLUMN_NUMBER;
MACRO_SQL_MAX SQL_NO_DATA;
MACRO_SQL_MAX SQL_NO_DATA_FOUND;
MACRO_SQL_MAX SQL_NO_NULLS;
MACRO_SQL_MAX SQL_NO_ROW_NUMBER;
MACRO_SQL_MAX SQL_NO_TOTAL;
MACRO_SQL_MAX SQL_NTS;
MACRO_SQL_MAX SQL_NTSL;
MACRO_SQL_MAX SQL_NULLABLE;
MACRO_SQL_MAX SQL_NULLABLE_UNKNOWN;
MACRO_SQL_MAX SQL_NULL_COLLATION;
MACRO_SQL_MAX SQL_NULL_DATA;
MACRO_SQL_MAX SQL_NULL_HANDLE;
MACRO_SQL_MAX SQL_NULL_HDBC;
MACRO_SQL_MAX SQL_NULL_HDESC;
MACRO_SQL_MAX SQL_NULL_HENV;
MACRO_SQL_MAX SQL_NULL_HSTMT;
MACRO_SQL_MAX SQL_NUMERIC;
MACRO_SQL_MAX SQL_NUMERIC_FUNCTIONS;
MACRO_SQL_MAX SQL_OAC_LEVEL1;
MACRO_SQL_MAX SQL_OAC_LEVEL2;
MACRO_SQL_MAX SQL_OAC_NONE;
MACRO_SQL_MAX SQL_ODBC_API_CONFORMANCE;
MACRO_SQL_MAX SQL_ODBC_CURSORS;
MACRO_SQL_MAX SQL_ODBC_INTERFACE_CONFORMANCE;
MACRO_SQL_MAX SQL_ODBC_SAG_CLI_CONFORMANCE;
MACRO_SQL_MAX SQL_ODBC_SQL_CONFORMANCE;
MACRO_SQL_MAX SQL_ODBC_SQL_OPT_IEF;
MACRO_SQL_MAX SQL_ODBC_VER;
MACRO_SQL_MAX SQL_OIC_CORE;
MACRO_SQL_MAX SQL_OIC_LEVEL1;
MACRO_SQL_MAX SQL_OIC_LEVEL2;
MACRO_SQL_MAX SQL_OJ_ALL_COMPARISON_OPS;
MACRO_SQL_MAX SQL_OJ_CAPABILITIES;
MACRO_SQL_MAX SQL_OJ_FULL;
MACRO_SQL_MAX SQL_OJ_INNER;
MACRO_SQL_MAX SQL_OJ_LEFT;
MACRO_SQL_MAX SQL_OJ_NESTED;
MACRO_SQL_MAX SQL_OJ_NOT_ORDERED;
MACRO_SQL_MAX SQL_OJ_RIGHT;
MACRO_SQL SQL_ONEPHASE;
MACRO_SQL_MAX SQL_OPT_TRACE;
MACRO_SQL_MAX SQL_OPT_TRACEFILE;
MACRO_SQL_MAX SQL_OPT_TRACE_DEFAULT;
MACRO_SQL_MAX SQL_OPT_TRACE_OFF;
MACRO_SQL_MAX SQL_OPT_TRACE_ON;
MACRO_SQL_MAX SQL_ORDER_BY_COLUMNS_IN_SELECT;
MACRO_SQL_MAX SQL_OSCC_COMPLIANT;
MACRO_SQL_MAX SQL_OSCC_NOT_COMPLIANT;
MACRO_SQL_MAX SQL_OSC_CORE;
MACRO_SQL_MAX SQL_OSC_EXTENDED;
MACRO_SQL_MAX SQL_OSC_MINIMUM;
MACRO_SQL_MAX SQL_OUTER_JOINS;
MACRO_SQL_MAX SQL_OUTER_JOIN_CAPABILITIES;
MACRO_SQL_MAX SQL_OU_DML_STATEMENTS;
MACRO_SQL_MAX SQL_OU_INDEX_DEFINITION;
MACRO_SQL_MAX SQL_OU_PRIVILEGE_DEFINITION;
MACRO_SQL_MAX SQL_OU_PROCEDURE_INVOCATION;
MACRO_SQL_MAX SQL_OU_TABLE_DEFINITION;
MACRO_SQL_MAX SQL_OV_ODBC2;
MACRO_SQL_MAX SQL_OV_ODBC3;
MACRO_SQL_MAX SQL_OWNER_TERM;
MACRO_SQL_MAX SQL_OWNER_USAGE;
MACRO_SQL_MAX SQL_PACKET_SIZE;
MACRO_SQL SQL_PARAMOPT_ATOMIC;
MACRO_SQL_MAX SQL_PARAM_ARRAY_ROW_COUNTS;
MACRO_SQL_MAX SQL_PARAM_ARRAY_SELECTS;
MACRO_SQL_MAX SQL_PARAM_BIND_BY_COLUMN;
MACRO_SQL_MAX SQL_PARAM_BIND_TYPE_DEFAULT;
MACRO_SQL_MAX SQL_PARAM_DIAG_UNAVAILABLE;
MACRO_SQL_MAX SQL_PARAM_ERROR;
MACRO_SQL_MAX SQL_PARAM_IGNORE;
MACRO_SQL_MAX SQL_PARAM_INPUT;
MACRO_SQL_MAX SQL_PARAM_INPUT_OUTPUT;
MACRO_SQL_MAX SQL_PARAM_OUTPUT;
MACRO_SQL_MAX SQL_PARAM_PROCEED;
MACRO_SQL_MAX SQL_PARAM_SUCCESS;
MACRO_SQL_MAX SQL_PARAM_SUCCESS_WITH_INFO;
MACRO_SQL_MAX SQL_PARAM_TYPE_DEFAULT;
MACRO_SQL_MAX SQL_PARAM_TYPE_UNKNOWN;
MACRO_SQL_MAX SQL_PARAM_UNUSED;
MACRO_SQL_MAX SQL_PARC_BATCH;
MACRO_SQL_MAX SQL_PARC_NO_BATCH;
MACRO_SQL SQL_PARSE_FWD_ONLY_REQ;
MACRO_SQL_MAX SQL_PAS_BATCH;
MACRO_SQL_MAX SQL_PAS_NO_BATCH;
MACRO_SQL_MAX SQL_PAS_NO_SELECT;
MACRO_SQL SQL_PC_DEFAULT;
MACRO_SQL_MAX SQL_PC_NON_PSEUDO;
MACRO_SQL_MAX SQL_PC_NOT_PSEUDO;
MACRO_SQL SQL_PC_OFF;
MACRO_SQL SQL_PC_ON;
MACRO_SQL_MAX SQL_PC_PSEUDO;
MACRO_SQL_MAX SQL_PC_UNKNOWN;
MACRO_SQL_MAX SQL_POSITION;
MACRO_SQL_MAX SQL_POSITIONED_STATEMENTS;
MACRO_SQL_MAX SQL_POS_ADD;
MACRO_SQL_MAX SQL_POS_DELETE;
MACRO_SQL_MAX SQL_POS_OPERATIONS;
MACRO_SQL_MAX SQL_POS_POSITION;
MACRO_SQL_MAX SQL_POS_REFRESH;
MACRO_SQL_MAX SQL_POS_UPDATE;
MACRO_SQL_MAX SQL_PRED_BASIC;
MACRO_SQL_MAX SQL_PRED_CHAR;
MACRO_SQL_MAX SQL_PRED_NONE;
MACRO_SQL_MAX SQL_PRED_SEARCHABLE;
MACRO_SQL_MAX SQL_PROCEDURES;
MACRO_SQL_MAX SQL_PROCEDURE_TERM;
MACRO_SQL SQL_PROCESSCTL_NOFORK;
MACRO_SQL SQL_PROCESSCTL_NOTHREAD;
MACRO_SQL_MAX SQL_PS_POSITIONED_DELETE;
MACRO_SQL_MAX SQL_PS_POSITIONED_UPDATE;
MACRO_SQL_MAX SQL_PS_SELECT_FOR_UPDATE;
MACRO_SQL_MAX SQL_PT_FUNCTION;
MACRO_SQL_MAX SQL_PT_PROCEDURE;
MACRO_SQL_MAX SQL_PT_UNKNOWN;
MACRO_SQL SQL_QI_DEFAULT;
MACRO_SQL SQL_QI_OFF;
MACRO_SQL SQL_QI_ON;
MACRO_SQL_MAX SQL_QL_END;
MACRO_SQL_MAX SQL_QL_START;
MACRO_SQL_MAX SQL_QUALIFIER_LOCATION;
MACRO_SQL_MAX SQL_QUALIFIER_NAME_SEPARATOR;
MACRO_SQL_MAX SQL_QUALIFIER_TERM;
MACRO_SQL_MAX SQL_QUALIFIER_USAGE;
MACRO_SQL_MAX SQL_QUERY_TIMEOUT;
MACRO_SQL_MAX SQL_QUERY_TIMEOUT_DEFAULT;
MACRO_SQL_MAX SQL_QUICK;
MACRO_SQL_MAX SQL_QUIET_MODE;
MACRO_SQL_MAX SQL_QUOTED_IDENTIFIER_CASE;
MACRO_SQL_MAX SQL_QU_DML_STATEMENTS;
MACRO_SQL_MAX SQL_QU_INDEX_DEFINITION;
MACRO_SQL_MAX SQL_QU_PRIVILEGE_DEFINITION;
MACRO_SQL_MAX SQL_QU_PROCEDURE_INVOCATION;
MACRO_SQL_MAX SQL_QU_TABLE_DEFINITION;
MACRO_SQL_MAX SQL_RD_DEFAULT;
MACRO_SQL_MAX SQL_RD_OFF;
MACRO_SQL_MAX SQL_RD_ON;
MACRO_SQL_MAX SQL_REAL;
MACRO_SQL_MAX SQL_REFRESH;
MACRO_SQL_MAX SQL_RESET_PARAMS;
MACRO_SQL_MAX SQL_RESTRICT;
MACRO_SQL_MAX SQL_RESULT_COL;
MACRO_SQL_MAX SQL_RETRIEVE_DATA;
MACRO_SQL_MAX SQL_RETURN_VALUE;
MACRO_SQL SQL_RE_DEFAULT;
MACRO_SQL SQL_RE_OFF;
MACRO_SQL SQL_RE_ON;
MACRO_SQL_MAX SQL_ROLLBACK;
MACRO_SQL_MAX SQL_ROWSET_SIZE;
MACRO_SQL_MAX SQL_ROWSET_SIZE_DEFAULT;
MACRO_SQL_MAX SQL_ROWVER;
MACRO_SQL_MAX SQL_ROW_ADDED;
MACRO_SQL_MAX SQL_ROW_DELETED;
MACRO_SQL_MAX SQL_ROW_ERROR;
MACRO_SQL_MAX SQL_ROW_IDENTIFIER;
MACRO_SQL_MAX SQL_ROW_IGNORE;
MACRO_SQL_MAX SQL_ROW_NOROW;
MACRO_SQL_MAX SQL_ROW_NUMBER;
MACRO_SQL_MAX SQL_ROW_NUMBER_UNKNOWN;
MACRO_SQL_MAX SQL_ROW_PROCEED;
MACRO_SQL_MAX SQL_ROW_SUCCESS;
MACRO_SQL_MAX SQL_ROW_SUCCESS_WITH_INFO;
MACRO_SQL_MAX SQL_ROW_UPDATED;
MACRO_SQL_MAX SQL_ROW_UPDATES;
MACRO_SQL_MAX SQL_SCCO_LOCK;
MACRO_SQL_MAX SQL_SCCO_OPT_ROWVER;
MACRO_SQL_MAX SQL_SCCO_OPT_TIMESTAMP;
MACRO_SQL_MAX SQL_SCCO_OPT_VALUES;
MACRO_SQL_MAX SQL_SCCO_READ_ONLY;
MACRO_SQL_MAX SQL_SCC_ISO92_CLI;
MACRO_SQL_MAX SQL_SCC_XOPEN_CLI_VERSION1;
MACRO_SQL_MAX SQL_SCHEMA_TERM;
MACRO_SQL_MAX SQL_SCHEMA_USAGE;
MACRO_SQL_MAX SQL_SCOPE_CURROW;
MACRO_SQL_MAX SQL_SCOPE_SESSION;
MACRO_SQL_MAX SQL_SCOPE_TRANSACTION;
MACRO_SQL_MAX SQL_SCROLLABLE;
MACRO_SQL_MAX SQL_SCROLL_CONCURRENCY;
MACRO_SQL_MAX SQL_SCROLL_DYNAMIC;
MACRO_SQL_MAX SQL_SCROLL_FORWARD_ONLY;
MACRO_SQL_MAX SQL_SCROLL_KEYSET_DRIVEN;
MACRO_SQL_MAX SQL_SCROLL_OPTIONS;
MACRO_SQL_MAX SQL_SCROLL_STATIC;
MACRO_SQL_MAX SQL_SC_FIPS127_2_TRANSITIONAL;
MACRO_SQL_MAX SQL_SC_NON_UNIQUE;
MACRO_SQL_MAX SQL_SC_SQL92_ENTRY;
MACRO_SQL_MAX SQL_SC_SQL92_FULL;
MACRO_SQL_MAX SQL_SC_SQL92_INTERMEDIATE;
MACRO_SQL_MAX SQL_SC_TRY_UNIQUE;
MACRO_SQL_MAX SQL_SC_UNIQUE;
MACRO_SQL_MAX SQL_SDF_CURRENT_DATE;
MACRO_SQL_MAX SQL_SDF_CURRENT_TIME;
MACRO_SQL_MAX SQL_SDF_CURRENT_TIMESTAMP;
MACRO_SQL_MAX SQL_SEARCHABLE;
MACRO_SQL_MAX SQL_SEARCH_PATTERN_ESCAPE;
MACRO_SQL_MAX SQL_SENSITIVE;
MACRO_SQL_MAX SQL_SERVER_NAME;
MACRO_SQL_MAX SQL_SETPARAM_VALUE_MAX;
MACRO_SQL_MAX SQL_SETPOS_MAX_LOCK_VALUE;
MACRO_SQL_MAX SQL_SETPOS_MAX_OPTION_VALUE;
MACRO_SQL_MAX SQL_SET_DEFAULT;
MACRO_SQL_MAX SQL_SET_NULL;
MACRO_SQL_MAX SQL_SFKD_CASCADE;
MACRO_SQL_MAX SQL_SFKD_NO_ACTION;
MACRO_SQL_MAX SQL_SFKD_SET_DEFAULT;
MACRO_SQL_MAX SQL_SFKD_SET_NULL;
MACRO_SQL_MAX SQL_SFKU_CASCADE;
MACRO_SQL_MAX SQL_SFKU_NO_ACTION;
MACRO_SQL_MAX SQL_SFKU_SET_DEFAULT;
MACRO_SQL_MAX SQL_SFKU_SET_NULL;
MACRO_SQL_MAX SQL_SG_DELETE_TABLE;
MACRO_SQL_MAX SQL_SG_INSERT_COLUMN;
MACRO_SQL_MAX SQL_SG_INSERT_TABLE;
MACRO_SQL_MAX SQL_SG_REFERENCES_COLUMN;
MACRO_SQL_MAX SQL_SG_REFERENCES_TABLE;
MACRO_SQL_MAX SQL_SG_SELECT_TABLE;
MACRO_SQL_MAX SQL_SG_UPDATE_COLUMN;
MACRO_SQL_MAX SQL_SG_UPDATE_TABLE;
MACRO_SQL_MAX SQL_SG_USAGE_ON_CHARACTER_SET;
MACRO_SQL_MAX SQL_SG_USAGE_ON_COLLATION;
MACRO_SQL_MAX SQL_SG_USAGE_ON_DOMAIN;
MACRO_SQL_MAX SQL_SG_USAGE_ON_TRANSLATION;
MACRO_SQL_MAX SQL_SG_WITH_GRANT_OPTION;
MACRO_SQL_MAX SQL_SIGNED_OFFSET;
MACRO_SQL_MAX SQL_SIMULATE_CURSOR;
MACRO_SQL_MAX SQL_SMALLINT;
MACRO_SQL_MAX SQL_SNVF_BIT_LENGTH;
MACRO_SQL_MAX SQL_SNVF_CHARACTER_LENGTH;
MACRO_SQL_MAX SQL_SNVF_CHAR_LENGTH;
MACRO_SQL_MAX SQL_SNVF_EXTRACT;
MACRO_SQL_MAX SQL_SNVF_OCTET_LENGTH;
MACRO_SQL_MAX SQL_SNVF_POSITION;
MACRO_SQL SQL_SOPT_SS_BASE;
MACRO_SQL SQL_SOPT_SS_CURRENT_COMMAND;
MACRO_SQL SQL_SOPT_SS_HIDDEN_COLUMNS;
MACRO_SQL SQL_SOPT_SS_MAX_USED;
MACRO_SQL SQL_SOPT_SS_NOBROWSETABLE;
MACRO_SQL SQL_SOPT_SS_REGIONALIZE;
MACRO_SQL SQL_SOPT_SS_TEXTPTR_LOGGING;
MACRO_SQL_MAX SQL_SO_DYNAMIC;
MACRO_SQL_MAX SQL_SO_FORWARD_ONLY;
MACRO_SQL_MAX SQL_SO_KEYSET_DRIVEN;
MACRO_SQL_MAX SQL_SO_MIXED;
MACRO_SQL_MAX SQL_SO_STATIC;
MACRO_SQL_MAX SQL_SPECIAL_CHARACTERS;
MACRO_SQL_MAX SQL_SPEC_MAJOR;
MACRO_SQL_MAX SQL_SPEC_MINOR;
MACRO_SQL_MAX SQL_SP_BETWEEN;
MACRO_SQL_MAX SQL_SP_COMPARISON;
MACRO_SQL_MAX SQL_SP_EXISTS;
MACRO_SQL_MAX SQL_SP_IN;
MACRO_SQL_MAX SQL_SP_ISNOTNULL;
MACRO_SQL_MAX SQL_SP_ISNULL;
MACRO_SQL_MAX SQL_SP_LIKE;
MACRO_SQL_MAX SQL_SP_MATCH_FULL;
MACRO_SQL_MAX SQL_SP_MATCH_PARTIAL;
MACRO_SQL_MAX SQL_SP_MATCH_UNIQUE_FULL;
MACRO_SQL_MAX SQL_SP_MATCH_UNIQUE_PARTIAL;
MACRO_SQL_MAX SQL_SP_OVERLAPS;
MACRO_SQL_MAX SQL_SP_QUANTIFIED_COMPARISON;
MACRO_SQL_MAX SQL_SP_UNIQUE;
MACRO_SQL_MAX SQL_SQL92_DATETIME_FUNCTIONS;
MACRO_SQL_MAX SQL_SQL92_FOREIGN_KEY_DELETE_RULE;
MACRO_SQL_MAX SQL_SQL92_FOREIGN_KEY_UPDATE_RULE;
MACRO_SQL_MAX SQL_SQL92_GRANT;
MACRO_SQL_MAX SQL_SQL92_NUMERIC_VALUE_FUNCTIONS;
MACRO_SQL_MAX SQL_SQL92_PREDICATES;
MACRO_SQL_MAX SQL_SQL92_RELATIONAL_JOIN_OPERATORS;
MACRO_SQL_MAX SQL_SQL92_REVOKE;
MACRO_SQL_MAX SQL_SQL92_ROW_VALUE_CONSTRUCTOR;
MACRO_SQL_MAX SQL_SQL92_STRING_FUNCTIONS;
MACRO_SQL_MAX SQL_SQL92_VALUE_EXPRESSIONS;
MACRO_SQL_MAX SQL_SQLSTATE_SIZE;
MACRO_SQL_MAX SQL_SQLSTATE_SIZEW;
MACRO_SQL_MAX SQL_SQL_CONFORMANCE;
MACRO_SQL_MAX SQL_SQ_COMPARISON;
MACRO_SQL_MAX SQL_SQ_CORRELATED_SUBQUERIES;
MACRO_SQL_MAX SQL_SQ_EXISTS;
MACRO_SQL_MAX SQL_SQ_IN;
MACRO_SQL_MAX SQL_SQ_QUANTIFIED;
MACRO_SQL_MAX SQL_SRJO_CORRESPONDING_CLAUSE;
MACRO_SQL_MAX SQL_SRJO_CROSS_JOIN;
MACRO_SQL_MAX SQL_SRJO_EXCEPT_JOIN;
MACRO_SQL_MAX SQL_SRJO_FULL_OUTER_JOIN;
MACRO_SQL_MAX SQL_SRJO_INNER_JOIN;
MACRO_SQL_MAX SQL_SRJO_INTERSECT_JOIN;
MACRO_SQL_MAX SQL_SRJO_LEFT_OUTER_JOIN;
MACRO_SQL_MAX SQL_SRJO_NATURAL_JOIN;
MACRO_SQL_MAX SQL_SRJO_RIGHT_OUTER_JOIN;
MACRO_SQL_MAX SQL_SRJO_UNION_JOIN;
MACRO_SQL_MAX SQL_SRVC_DEFAULT;
MACRO_SQL_MAX SQL_SRVC_NULL;
MACRO_SQL_MAX SQL_SRVC_ROW_SUBQUERY;
MACRO_SQL_MAX SQL_SRVC_VALUE_EXPRESSION;
MACRO_SQL_MAX SQL_SR_CASCADE;
MACRO_SQL_MAX SQL_SR_DELETE_TABLE;
MACRO_SQL_MAX SQL_SR_GRANT_OPTION_FOR;
MACRO_SQL_MAX SQL_SR_INSERT_COLUMN;
MACRO_SQL_MAX SQL_SR_INSERT_TABLE;
MACRO_SQL_MAX SQL_SR_REFERENCES_COLUMN;
MACRO_SQL_MAX SQL_SR_REFERENCES_TABLE;
MACRO_SQL_MAX SQL_SR_RESTRICT;
MACRO_SQL_MAX SQL_SR_SELECT_TABLE;
MACRO_SQL_MAX SQL_SR_UPDATE_COLUMN;
MACRO_SQL_MAX SQL_SR_UPDATE_TABLE;
MACRO_SQL_MAX SQL_SR_USAGE_ON_CHARACTER_SET;
MACRO_SQL_MAX SQL_SR_USAGE_ON_COLLATION;
MACRO_SQL_MAX SQL_SR_USAGE_ON_DOMAIN;
MACRO_SQL_MAX SQL_SR_USAGE_ON_TRANSLATION;
MACRO_SQL_MAX SQL_SSF_CONVERT;
MACRO_SQL_MAX SQL_SSF_LOWER;
MACRO_SQL_MAX SQL_SSF_SUBSTRING;
MACRO_SQL_MAX SQL_SSF_TRANSLATE;
MACRO_SQL_MAX SQL_SSF_TRIM_BOTH;
MACRO_SQL_MAX SQL_SSF_TRIM_LEADING;
MACRO_SQL_MAX SQL_SSF_TRIM_TRAILING;
MACRO_SQL_MAX SQL_SSF_UPPER;
MACRO_SQL_MAX SQL_SS_ADDITIONS;
MACRO_SQL_MAX SQL_SS_DELETIONS;
MACRO_SQL_MAX SQL_SS_UPDATES;
MACRO_SQL_MAX SQL_STANDARD_CLI_CONFORMANCE;
MACRO_SQL_MAX SQL_STATIC_CURSOR_ATTRIBUTES1;
MACRO_SQL_MAX SQL_STATIC_CURSOR_ATTRIBUTES2;
MACRO_SQL_MAX SQL_STATIC_SENSITIVITY;
MACRO_SQL_MAX SQL_STILL_EXECUTING;
MACRO_SQL SQL_STMTTXN_ISOLATION;
MACRO_SQL_MAX SQL_STRING_FUNCTIONS;
MACRO_SQL_MAX SQL_SUBQUERIES;
MACRO_SQL_MAX SQL_SUCCESS;
MACRO_SQL_MAX SQL_SUCCESS_WITH_INFO;
MACRO_SQL_MAX SQL_SU_DML_STATEMENTS;
MACRO_SQL_MAX SQL_SU_INDEX_DEFINITION;
MACRO_SQL_MAX SQL_SU_PRIVILEGE_DEFINITION;
MACRO_SQL_MAX SQL_SU_PROCEDURE_INVOCATION;
MACRO_SQL_MAX SQL_SU_TABLE_DEFINITION;
MACRO_SQL_MAX SQL_SVE_CASE;
MACRO_SQL_MAX SQL_SVE_CAST;
MACRO_SQL_MAX SQL_SVE_COALESCE;
MACRO_SQL_MAX SQL_SVE_NULLIF;
MACRO_SQL SQL_SYNCPOINT_DEFAULT;
MACRO_SQL SQL_SYNC_POINT;
MACRO_SQL_MAX SQL_SYSTEM_FUNCTIONS;
MACRO_SQL_MAX SQL_TABLE_STAT;
MACRO_SQL_MAX SQL_TABLE_TERM;
MACRO_SQL_MAX SQL_TC_ALL;
MACRO_SQL_MAX SQL_TC_DDL_COMMIT;
MACRO_SQL_MAX SQL_TC_DDL_IGNORE;
MACRO_SQL_MAX SQL_TC_DML;
MACRO_SQL_MAX SQL_TC_NONE;
MACRO_SQL_MAX SQL_TIME;
MACRO_SQL_MAX SQL_TIMEDATE_ADD_INTERVALS;
MACRO_SQL_MAX SQL_TIMEDATE_DIFF_INTERVALS;
MACRO_SQL_MAX SQL_TIMEDATE_FUNCTIONS;
MACRO_SQL_MAX SQL_TIMESTAMP;
MACRO_SQL_MAX SQL_TIMESTAMP_LEN;
MACRO_SQL_MAX SQL_TIME_LEN;
MACRO_SQL_MAX SQL_TINYINT;
MACRO_SQL SQL_TL_DEFAULT;
MACRO_SQL SQL_TL_OFF;
MACRO_SQL SQL_TL_ON;
MACRO_SQL_MAX SQL_TRANSACTION_CAPABLE;
MACRO_SQL_MAX SQL_TRANSACTION_ISOLATION_OPTION;
MACRO_SQL_MAX SQL_TRANSACTION_READ_COMMITTED;
MACRO_SQL_MAX SQL_TRANSACTION_READ_UNCOMMITTED;
MACRO_SQL_MAX SQL_TRANSACTION_REPEATABLE_READ;
MACRO_SQL_MAX SQL_TRANSACTION_SERIALIZABLE;
MACRO_SQL_MAX SQL_TRANSLATE_DLL;
MACRO_SQL_MAX SQL_TRANSLATE_OPTION;
MACRO_SQL_MAX SQL_TRUE;
MACRO_SQL SQL_TWOPHASE;
MACRO_SQL_MAX SQL_TXN_CAPABLE;
MACRO_SQL_MAX SQL_TXN_ISOLATION;
MACRO_SQL_MAX SQL_TXN_ISOLATION_OPTION;
MACRO_SQL_MAX SQL_TXN_READ_COMMITTED;
MACRO_SQL_MAX SQL_TXN_READ_UNCOMMITTED;
MACRO_SQL_MAX SQL_TXN_REPEATABLE_READ;
MACRO_SQL_MAX SQL_TXN_SERIALIZABLE;
MACRO_SQL_MAX SQL_TYPE_DATE;
MACRO_SQL_MAX SQL_TYPE_NULL;
MACRO_SQL_MAX SQL_TYPE_TIME;
MACRO_SQL_MAX SQL_TYPE_TIMESTAMP;
MACRO_SQL_MAX SQL_UB_DEFAULT;
MACRO_SQL_MAX SQL_UB_FIXED;
MACRO_SQL_MAX SQL_UB_OFF;
MACRO_SQL_MAX SQL_UB_ON;
MACRO_SQL_MAX SQL_UB_VARIABLE;
MACRO_SQL SQL_UD_NOTSET;
MACRO_SQL_MAX SQL_UNBIND;
MACRO_SQL_MAX SQL_UNION;
MACRO_SQL_MAX SQL_UNION_STATEMENT;
MACRO_SQL_MAX SQL_UNKNOWN_TYPE;
MACRO_SQL_MAX SQL_UNNAMED;
MACRO_SQL_MAX SQL_UNSEARCHABLE;
MACRO_SQL_MAX SQL_UNSIGNED_OFFSET;
MACRO_SQL_MAX SQL_UNSPECIFIED;
MACRO_SQL_MAX SQL_UPDATE;
MACRO_SQL_MAX SQL_UPDATE_BY_BOOKMARK;
MACRO_SQL SQL_UP_DEFAULT;
MACRO_SQL SQL_UP_OFF;
MACRO_SQL SQL_UP_ON;
MACRO_SQL SQL_UP_ON_DROP;
MACRO_SQL_MAX SQL_USER_NAME;
MACRO_SQL_MAX SQL_USE_BOOKMARKS;
MACRO_SQL_MAX SQL_US_UNION;
MACRO_SQL_MAX SQL_US_UNION_ALL;
MACRO_SQL_MAX SQL_U_UNION;
MACRO_SQL_MAX SQL_U_UNION_ALL;
MACRO_SQL_MAX SQL_VARBINARY;
MACRO_SQL_MAX SQL_VARCHAR;
MACRO_SQL_MAX SQL_WCHAR;
MACRO_SQL SQL_WCHARTYPE;
MACRO_SQL SQL_WCHARTYPE_DEFAULT;
MACRO_SQL SQL_WCHARTYPE_NOCONVERT;
MACRO_SQL_MAX SQL_WLONGVARCHAR;
MACRO_SQL_MAX SQL_WVARCHAR;
MACRO_SQL_MAX SQL_XOPEN_CLI_YEAR;
MACRO_SRCHFS SRCHFS_MATCHDIRS;
MACRO_SRCHFS SRCHFS_MATCHFILES;
MACRO_SRCHFS SRCHFS_MATCHPARTIALNAMES;
MACRO_SRCHFS SRCHFS_NEGATEPARAMS;
MACRO_SRCHFS SRCHFS_SKIPINAPPROPRIATE;
MACRO_SRCHFS SRCHFS_SKIPINVISIBLE;
MACRO_SRCHFS SRCHFS_SKIPLINKS;
MACRO_SRCHFS SRCHFS_SKIPPACKAGES;
MACRO_SRCHFS SRCHFS_START;
MACRO_SRCHFS SRCHFS_VALIDOPTIONSMASK;
MACRO_SIDL SRUN;
MACRO_SSIZE SSIZE_MAX;
MACRO_SSL2 SSL2_AT_MD5_WITH_RSA_ENCRYPTION;
MACRO_SSL2 SSL2_CF_5_BYTE_ENC;
MACRO_SSL2 SSL2_CF_8_BYTE_ENC;
MACRO_SSL2 SSL2_CHALLENGE_LENGTH;
MACRO_SSL2 SSL2_CK_DES_192_EDE3_CBC_WITH_MD5;
MACRO_SSL2 SSL2_CK_DES_192_EDE3_CBC_WITH_SHA;
MACRO_SSL2 SSL2_CK_DES_64_CBC_WITH_MD5;
MACRO_SSL2 SSL2_CK_DES_64_CBC_WITH_SHA;
MACRO_SSL2 SSL2_CK_DES_64_CFB64_WITH_MD5_1;
MACRO_SSL2 SSL2_CK_IDEA_128_CBC_WITH_MD5;
MACRO_SSL2 SSL2_CK_NULL;
MACRO_SSL2 SSL2_CK_NULL_WITH_MD5;
MACRO_SSL2 SSL2_CK_RC2_128_CBC_EXPORT40_WITH_MD5;
MACRO_SSL2 SSL2_CK_RC2_128_CBC_WITH_MD5;
MACRO_SSL2 SSL2_CK_RC4_128_EXPORT40_WITH_MD5;
MACRO_SSL2 SSL2_CK_RC4_128_WITH_MD5;
MACRO_SSL2 SSL2_CK_RC4_64_WITH_MD5;
MACRO_SSL2 SSL2_CONNECTION_ID_LENGTH;
MACRO_SSL2 SSL2_CT_X509_CERTIFICATE;
MACRO_SSL2 SSL2_MAX_CERT_CHALLENGE_LENGTH;
MACRO_SSL2 SSL2_MAX_CHALLENGE_LENGTH;
MACRO_SSL2 SSL2_MAX_CONNECTION_ID_LENGTH;
MACRO_SSL2 SSL2_MAX_KEY_MATERIAL_LENGTH;
MACRO_SSL2 SSL2_MAX_MASTER_KEY_LENGTH_IN_BITS;
MACRO_SSL2 SSL2_MAX_RECORD_LENGTH_2_BYTE_HEADER;
MACRO_SSL2 SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER;
MACRO_SSL2 SSL2_MAX_SSL_SESSION_ID_LENGTH;
MACRO_SSL2 SSL2_MIN_CERT_CHALLENGE_LENGTH;
MACRO_SSL2 SSL2_MIN_CHALLENGE_LENGTH;
MACRO_SSL2 SSL2_MT_CLIENT_CERTIFICATE;
MACRO_SSL2 SSL2_MT_CLIENT_FINISHED;
MACRO_SSL2 SSL2_MT_CLIENT_HELLO;
MACRO_SSL2 SSL2_MT_CLIENT_MASTER_KEY;
MACRO_SSL2 SSL2_MT_ERROR;
MACRO_SSL2 SSL2_MT_REQUEST_CERTIFICATE;
MACRO_SSL2 SSL2_MT_SERVER_FINISHED;
MACRO_SSL2 SSL2_MT_SERVER_HELLO;
MACRO_SSL2 SSL2_MT_SERVER_VERIFY;
MACRO_SSL2 SSL2_PE_BAD_CERTIFICATE;
MACRO_SSL2 SSL2_PE_NO_CERTIFICATE;
MACRO_SSL2 SSL2_PE_NO_CIPHER;
MACRO_SSL2 SSL2_PE_UNDEFINED_ERROR;
MACRO_SSL2 SSL2_PE_UNSUPPORTED_CERTIFICATE_TYPE;
MACRO_SSL2 SSL2_SSL_SESSION_ID_LENGTH;
MACRO_SSL2 SSL2_VERSION;
MACRO_SSL2 SSL2_VERSION_MAJOR;
MACRO_SSL2 SSL2_VERSION_MINOR;
MACRO_SSL3 SSL3_AD_BAD_CERTIFICATE;
MACRO_SSL3 SSL3_AD_BAD_RECORD_MAC;
MACRO_SSL3 SSL3_AD_CERTIFICATE_EXPIRED;
MACRO_SSL3 SSL3_AD_CERTIFICATE_REVOKED;
MACRO_SSL3 SSL3_AD_CERTIFICATE_UNKNOWN;
MACRO_SSL3 SSL3_AD_CLOSE_NOTIFY;
MACRO_SSL3 SSL3_AD_DECOMPRESSION_FAILURE;
MACRO_SSL3 SSL3_AD_HANDSHAKE_FAILURE;
MACRO_SSL3 SSL3_AD_ILLEGAL_PARAMETER;
MACRO_SSL3 SSL3_AD_NO_CERTIFICATE;
MACRO_SSL3 SSL3_AD_UNEXPECTED_MESSAGE;
MACRO_SSL3 SSL3_AD_UNSUPPORTED_CERTIFICATE;
MACRO_SSL3 SSL3_AL_FATAL;
MACRO_SSL3 SSL3_AL_WARNING;
MACRO_SSL3_MT_CCS SSL3_CC_CLIENT;
MACRO_SSL3_MT_CCS SSL3_CC_READ;
MACRO_SSL3_MT_CCS SSL3_CC_SERVER;
MACRO_SSL3_MT_CCS SSL3_CC_WRITE;
MACRO_SSL3_MT_CCS SSL3_CHANGE_CIPHER_CLIENT_READ;
MACRO_SSL3_MT_CCS SSL3_CHANGE_CIPHER_CLIENT_WRITE;
MACRO_SSL3_MT_CCS SSL3_CHANGE_CIPHER_SERVER_READ;
MACRO_SSL3_MT_CCS SSL3_CHANGE_CIPHER_SERVER_WRITE;
MACRO_SSL3 SSL3_CK_ADH_DES_192_CBC_SHA;
MACRO_SSL3 SSL3_CK_ADH_DES_40_CBC_SHA;
MACRO_SSL3 SSL3_CK_ADH_DES_64_CBC_SHA;
MACRO_SSL3 SSL3_CK_ADH_RC4_128_MD5;
MACRO_SSL3 SSL3_CK_ADH_RC4_40_MD5;
MACRO_SSL3 SSL3_CK_DH_DSS_DES_192_CBC3_SHA;
MACRO_SSL3 SSL3_CK_DH_DSS_DES_40_CBC_SHA;
MACRO_SSL3 SSL3_CK_DH_DSS_DES_64_CBC_SHA;
MACRO_SSL3 SSL3_CK_DH_RSA_DES_192_CBC3_SHA;
MACRO_SSL3 SSL3_CK_DH_RSA_DES_40_CBC_SHA;
MACRO_SSL3 SSL3_CK_DH_RSA_DES_64_CBC_SHA;
MACRO_SSL3 SSL3_CK_EDH_DSS_DES_192_CBC3_SHA;
MACRO_SSL3 SSL3_CK_EDH_DSS_DES_40_CBC_SHA;
MACRO_SSL3 SSL3_CK_EDH_DSS_DES_64_CBC_SHA;
MACRO_SSL3 SSL3_CK_EDH_RSA_DES_192_CBC3_SHA;
MACRO_SSL3 SSL3_CK_EDH_RSA_DES_40_CBC_SHA;
MACRO_SSL3 SSL3_CK_EDH_RSA_DES_64_CBC_SHA;
MACRO_SSL3 SSL3_CK_FZA_DMS_FZA_SHA;
MACRO_SSL3 SSL3_CK_FZA_DMS_NULL_SHA;
MACRO_SSL3 SSL3_CK_KRB5_DES_192_CBC3_MD5;
MACRO_SSL3 SSL3_CK_KRB5_DES_192_CBC3_SHA;
MACRO_SSL3 SSL3_CK_KRB5_DES_40_CBC_MD5;
MACRO_SSL3 SSL3_CK_KRB5_DES_40_CBC_SHA;
MACRO_SSL3 SSL3_CK_KRB5_DES_64_CBC_MD5;
MACRO_SSL3 SSL3_CK_KRB5_DES_64_CBC_SHA;
MACRO_SSL3 SSL3_CK_KRB5_IDEA_128_CBC_MD5;
MACRO_SSL3 SSL3_CK_KRB5_IDEA_128_CBC_SHA;
MACRO_SSL3 SSL3_CK_KRB5_RC2_40_CBC_MD5;
MACRO_SSL3 SSL3_CK_KRB5_RC2_40_CBC_SHA;
MACRO_SSL3 SSL3_CK_KRB5_RC4_128_MD5;
MACRO_SSL3 SSL3_CK_KRB5_RC4_128_SHA;
MACRO_SSL3 SSL3_CK_KRB5_RC4_40_MD5;
MACRO_SSL3 SSL3_CK_KRB5_RC4_40_SHA;
MACRO_SSL3 SSL3_CK_RSA_DES_192_CBC3_SHA;
MACRO_SSL3 SSL3_CK_RSA_DES_40_CBC_SHA;
MACRO_SSL3 SSL3_CK_RSA_DES_64_CBC_SHA;
MACRO_SSL3 SSL3_CK_RSA_IDEA_128_SHA;
MACRO_SSL3 SSL3_CK_RSA_NULL_MD5;
MACRO_SSL3 SSL3_CK_RSA_NULL_SHA;
MACRO_SSL3 SSL3_CK_RSA_RC2_40_MD5;
MACRO_SSL3 SSL3_CK_RSA_RC4_128_MD5;
MACRO_SSL3 SSL3_CK_RSA_RC4_128_SHA;
MACRO_SSL3 SSL3_CK_RSA_RC4_40_MD5;
MACRO_SSL3 SSL3_CK_SCSV;
MACRO_SSL3 SSL3_CT_DSS_EPHEMERAL_DH;
MACRO_SSL3 SSL3_CT_DSS_FIXED_DH;
MACRO_SSL3 SSL3_CT_DSS_SIGN;
MACRO_SSL3 SSL3_CT_FORTEZZA_DMS;
MACRO_SSL3 SSL3_CT_NUMBER;
MACRO_SSL3 SSL3_CT_RSA_EPHEMERAL_DH;
MACRO_SSL3 SSL3_CT_RSA_FIXED_DH;
MACRO_SSL3 SSL3_CT_RSA_SIGN;
MACRO_SSL3 SSL3_FLAGS_DELAY_CLIENT_FINISHED;
MACRO_SSL3 SSL3_FLAGS_NO_RENEGOTIATE_CIPHERS;
MACRO_SSL3 SSL3_FLAGS_POP_BUFFER;
MACRO_SSL3 SSL3_MASTER_SECRET_SIZE;
MACRO_SSL3 SSL3_MAX_SSL_SESSION_ID_LENGTH;
MACRO_SSL3_MT_CCS SSL3_MT_CCS;
MACRO_SSL3_MT SSL3_MT_CERTIFICATE;
MACRO_SSL3_MT SSL3_MT_CERTIFICATE_REQUEST;
MACRO_SSL3_MT SSL3_MT_CERTIFICATE_STATUS;
MACRO_SSL3_MT SSL3_MT_CERTIFICATE_VERIFY;
MACRO_SSL3_MT SSL3_MT_CLIENT_HELLO;
MACRO_SSL3_MT SSL3_MT_CLIENT_KEY_EXCHANGE;
MACRO_SSL3_MT SSL3_MT_FINISHED;
MACRO_SSL3_MT SSL3_MT_HELLO_REQUEST;
MACRO_SSL3_MT SSL3_MT_NEWSESSION_TICKET;
MACRO_SSL3_MT SSL3_MT_SERVER_DONE;
MACRO_SSL3_MT SSL3_MT_SERVER_HELLO;
MACRO_SSL3_MT SSL3_MT_SERVER_KEY_EXCHANGE;
MACRO_SSL3 SSL3_RANDOM_SIZE;
MACRO_SSL3 SSL3_RT_ALERT;
MACRO_SSL3 SSL3_RT_APPLICATION_DATA;
MACRO_SSL3 SSL3_RT_CHANGE_CIPHER_SPEC;
MACRO_SSL3 SSL3_RT_HANDSHAKE;
MACRO_SSL3 SSL3_RT_HEADER_LENGTH;
MACRO_SSL3 SSL3_RT_MAX_COMPRESSED_LENGTH;
MACRO_SSL3 SSL3_RT_MAX_DATA_SIZE;
MACRO_SSL3 SSL3_RT_MAX_ENCRYPTED_LENGTH;
MACRO_SSL3 SSL3_RT_MAX_EXTRA;
MACRO_SSL3 SSL3_RT_MAX_PACKET_SIZE;
MACRO_SSL3 SSL3_RT_MAX_PLAIN_LENGTH;
MACRO_SSL3 SSL3_SESSION_ID_SIZE;
MACRO_SSL3 SSL3_SSL_SESSION_ID_LENGTH;
MACRO_SSL3 SSL3_VERSION;
MACRO_SSL3 SSL3_VERSION_MAJOR;
MACRO_SSL3 SSL3_VERSION_MINOR;
MACRO_SSLEAY SSLEAY_BUILT_ON;
MACRO_SSLEAY SSLEAY_CFLAGS;
MACRO_SSLEAY SSLEAY_DIR;
MACRO_SSLEAY SSLEAY_PLATFORM;
MACRO_SSLEAY SSLEAY_VERSION;
MACRO_VERSION_NUMBER SSLEAY_VERSION_NUMBER;
MACRO_SSLEEP SSLEEP;
MACRO_SSL_ST SSL_AD_ACCESS_DENIED;
MACRO_SSL_ST SSL_AD_BAD_CERTIFICATE;
MACRO_SSL_ST SSL_AD_BAD_CERTIFICATE_STATUS_RESPONSE;
MACRO_SSL_ST SSL_AD_BAD_RECORD_MAC;
MACRO_SSL_ST SSL_AD_CERTIFICATE_EXPIRED;
MACRO_SSL_ST SSL_AD_CERTIFICATE_REVOKED;
MACRO_SSL_ST SSL_AD_CERTIFICATE_UNKNOWN;
MACRO_SSL_ST SSL_AD_CERTIFICATE_UNOBTAINABLE;
MACRO_SSL_ST SSL_AD_CLOSE_NOTIFY;
MACRO_SSL_ST SSL_AD_DECODE_ERROR;
MACRO_SSL_ST SSL_AD_DECOMPRESSION_FAILURE;
MACRO_SSL_ST SSL_AD_DECRYPTION_FAILED;
MACRO_SSL_ST SSL_AD_DECRYPT_ERROR;
MACRO_SSL_ST SSL_AD_EXPORT_RESTRICTION;
MACRO_SSL_ST SSL_AD_HANDSHAKE_FAILURE;
MACRO_SSL_ST SSL_AD_ILLEGAL_PARAMETER;
MACRO_SSL_ST SSL_AD_INSUFFICIENT_SECURITY;
MACRO_SSL_ST SSL_AD_INTERNAL_ERROR;
MACRO_SSL_ST SSL_AD_NO_CERTIFICATE;
MACRO_SSL_ST SSL_AD_NO_RENEGOTIATION;
MACRO_SSL_ST SSL_AD_PROTOCOL_VERSION;
MACRO_SSL_ST SSL_AD_REASON_OFFSET;
MACRO_SSL_ST SSL_AD_RECORD_OVERFLOW;
MACRO_SSL_ST SSL_AD_UNEXPECTED_MESSAGE;
MACRO_SSL_ST SSL_AD_UNKNOWN_CA;
MACRO_SSL_ST SSL_AD_UNRECOGNIZED_NAME;
MACRO_SSL_ST SSL_AD_UNSUPPORTED_CERTIFICATE;
MACRO_SSL_ST SSL_AD_UNSUPPORTED_EXTENSION;
MACRO_SSL_ST SSL_AD_USER_CANCELLED;
MACRO_SSL_ST SSL_CB_ACCEPT_EXIT;
MACRO_SSL_ST SSL_CB_ACCEPT_LOOP;
MACRO_SSL_ST SSL_CB_ALERT;
MACRO_SSL_ST SSL_CB_CONNECT_EXIT;
MACRO_SSL_ST SSL_CB_CONNECT_LOOP;
MACRO_SSL_ST SSL_CB_EXIT;
MACRO_SSL_ST SSL_CB_HANDSHAKE_DONE;
MACRO_SSL_ST SSL_CB_HANDSHAKE_START;
MACRO_SSL_ST SSL_CB_LOOP;
MACRO_SSL_ST SSL_CB_READ;
MACRO_SSL_ST SSL_CB_READ_ALERT;
MACRO_SSL_ST SSL_CB_WRITE;
MACRO_SSL_ST SSL_CB_WRITE_ALERT;
MACRO_SSL_CTRL SSL_CTRL_CLEAR_MODE;
MACRO_SSL_ST SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS;
MACRO_SSL_CTRL SSL_CTRL_CLEAR_OPTIONS;
MACRO_SSL_ST SSL_CTRL_EXTRA_CHAIN_CERT;
MACRO_SSL_ST SSL_CTRL_GET_CLIENT_CERT_REQUEST;
MACRO_SSL_ST SSL_CTRL_GET_FLAGS;
MACRO_SSL_ST SSL_CTRL_GET_MAX_CERT_LIST;
MACRO_SSL_ST SSL_CTRL_GET_NUM_RENEGOTIATIONS;
MACRO_SSL_ST SSL_CTRL_GET_READ_AHEAD;
MACRO_SSL_CTRL SSL_CTRL_GET_RI_SUPPORT;
MACRO_SSL_ST SSL_CTRL_GET_SESSION_REUSED;
MACRO_SSL_ST SSL_CTRL_GET_SESS_CACHE_MODE;
MACRO_SSL_ST SSL_CTRL_GET_SESS_CACHE_SIZE;
MACRO_SSL_ST SSL_CTRL_GET_TLSEXT_STATUS_REQ_EXTS;
MACRO_SSL_ST SSL_CTRL_GET_TLSEXT_STATUS_REQ_IDS;
MACRO_SSL_ST SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP;
MACRO_SSL_ST SSL_CTRL_GET_TLSEXT_TICKET_KEYS;
MACRO_SSL_ST SSL_CTRL_GET_TOTAL_RENEGOTIATIONS;
MACRO_SSL_ST SSL_CTRL_MODE;
MACRO_SSL_ST SSL_CTRL_NEED_TMP_RSA;
MACRO_SSL_ST SSL_CTRL_OPTIONS;
MACRO_SSL_ST SSL_CTRL_SESS_ACCEPT;
MACRO_SSL_ST SSL_CTRL_SESS_ACCEPT_GOOD;
MACRO_SSL_ST SSL_CTRL_SESS_ACCEPT_RENEGOTIATE;
MACRO_SSL_ST SSL_CTRL_SESS_CACHE_FULL;
MACRO_SSL_ST SSL_CTRL_SESS_CB_HIT;
MACRO_SSL_ST SSL_CTRL_SESS_CONNECT;
MACRO_SSL_ST SSL_CTRL_SESS_CONNECT_GOOD;
MACRO_SSL_ST SSL_CTRL_SESS_CONNECT_RENEGOTIATE;
MACRO_SSL_ST SSL_CTRL_SESS_HIT;
MACRO_SSL_ST SSL_CTRL_SESS_MISSES;
MACRO_SSL_ST SSL_CTRL_SESS_NUMBER;
MACRO_SSL_ST SSL_CTRL_SESS_TIMEOUTS;
MACRO_SSL_ST SSL_CTRL_SET_MAX_CERT_LIST;
MACRO_SSL_ST SSL_CTRL_SET_MSG_CALLBACK;
MACRO_SSL_ST SSL_CTRL_SET_MSG_CALLBACK_ARG;
MACRO_SSL_ST SSL_CTRL_SET_MTU;
MACRO_SSL_ST SSL_CTRL_SET_READ_AHEAD;
MACRO_SSL_ST SSL_CTRL_SET_SESS_CACHE_MODE;
MACRO_SSL_ST SSL_CTRL_SET_SESS_CACHE_SIZE;
MACRO_SSL_ST SSL_CTRL_SET_TLSEXT_DEBUG_ARG;
MACRO_SSL_ST SSL_CTRL_SET_TLSEXT_DEBUG_CB;
MACRO_SSL_ST SSL_CTRL_SET_TLSEXT_HOSTNAME;
MACRO_SSL_ST SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG;
MACRO_SSL_ST SSL_CTRL_SET_TLSEXT_SERVERNAME_CB;
MACRO_SSL_ST SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB;
MACRO_SSL_ST SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG;
MACRO_SSL_ST SSL_CTRL_SET_TLSEXT_STATUS_REQ_EXTS;
MACRO_SSL_ST SSL_CTRL_SET_TLSEXT_STATUS_REQ_IDS;
MACRO_SSL_ST SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP;
MACRO_SSL_ST SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE;
MACRO_SSL_ST SSL_CTRL_SET_TLSEXT_TICKET_KEYS;
MACRO_SSL_ST SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB;
MACRO_SSL_ST SSL_CTRL_SET_TMP_DH;
MACRO_SSL_ST SSL_CTRL_SET_TMP_DH_CB;
MACRO_SSL_ST SSL_CTRL_SET_TMP_ECDH;
MACRO_SSL_ST SSL_CTRL_SET_TMP_ECDH_CB;
MACRO_SSL_ST SSL_CTRL_SET_TMP_RSA;
MACRO_SSL_ST SSL_CTRL_SET_TMP_RSA_CB;
MACRO_SSL_ST SSL_ERROR_NONE;
MACRO_SSL_ST SSL_ERROR_SSL;
MACRO_SSL_ST SSL_ERROR_SYSCALL;
MACRO_SSL_ST SSL_ERROR_WANT_ACCEPT;
MACRO_SSL_ST SSL_ERROR_WANT_CONNECT;
MACRO_SSL_ST SSL_ERROR_WANT_READ;
MACRO_SSL_ST SSL_ERROR_WANT_WRITE;
MACRO_SSL_ST SSL_ERROR_WANT_X509_LOOKUP;
MACRO_SSL_ST SSL_ERROR_ZERO_RETURN;
MACRO_SSL SSL_FILETYPE_ASN1;
MACRO_SSL SSL_FILETYPE_PEM;
MACRO_SSL_CTRL SSL_F_CLIENT_CERTIFICATE;
MACRO_SSL_CTRL SSL_F_CLIENT_FINISHED;
MACRO_SSL_CTRL SSL_F_CLIENT_HELLO;
MACRO_SSL_CTRL SSL_F_CLIENT_MASTER_KEY;
MACRO_SSL_CTRL SSL_F_D2I_SSL_SESSION;
MACRO_SSL_CTRL SSL_F_DO_DTLS1_WRITE;
MACRO_SSL_CTRL SSL_F_DO_SSL3_WRITE;
MACRO_SSL_CTRL SSL_F_DTLS1_ACCEPT;
MACRO_SSL_CTRL SSL_F_DTLS1_ADD_CERT_TO_BUF;
MACRO_SSL_CTRL SSL_F_DTLS1_BUFFER_RECORD;
MACRO_SSL_CTRL SSL_F_DTLS1_CLIENT_HELLO;
MACRO_SSL_CTRL SSL_F_DTLS1_CONNECT;
MACRO_SSL_CTRL SSL_F_DTLS1_ENC;
MACRO_SSL_CTRL SSL_F_DTLS1_GET_HELLO_VERIFY;
MACRO_SSL_CTRL SSL_F_DTLS1_GET_MESSAGE;
MACRO_SSL_CTRL SSL_F_DTLS1_GET_MESSAGE_FRAGMENT;
MACRO_SSL_CTRL SSL_F_DTLS1_GET_RECORD;
MACRO_SSL_CTRL SSL_F_DTLS1_HANDLE_TIMEOUT;
MACRO_SSL_CTRL SSL_F_DTLS1_OUTPUT_CERT_CHAIN;
MACRO_SSL_CTRL SSL_F_DTLS1_PREPROCESS_FRAGMENT;
MACRO_SSL_CTRL SSL_F_DTLS1_PROCESS_OUT_OF_SEQ_MESSAGE;
MACRO_SSL_CTRL SSL_F_DTLS1_PROCESS_RECORD;
MACRO_SSL_CTRL SSL_F_DTLS1_READ_BYTES;
MACRO_SSL_CTRL SSL_F_DTLS1_READ_FAILED;
MACRO_SSL_CTRL SSL_F_DTLS1_SEND_CERTIFICATE_REQUEST;
MACRO_SSL_CTRL SSL_F_DTLS1_SEND_CLIENT_CERTIFICATE;
MACRO_SSL_CTRL SSL_F_DTLS1_SEND_CLIENT_KEY_EXCHANGE;
MACRO_SSL_CTRL SSL_F_DTLS1_SEND_CLIENT_VERIFY;
MACRO_SSL_CTRL SSL_F_DTLS1_SEND_HELLO_VERIFY_REQUEST;
MACRO_SSL_CTRL SSL_F_DTLS1_SEND_SERVER_CERTIFICATE;
MACRO_SSL_CTRL SSL_F_DTLS1_SEND_SERVER_HELLO;
MACRO_SSL_CTRL SSL_F_DTLS1_SEND_SERVER_KEY_EXCHANGE;
MACRO_SSL_CTRL SSL_F_DTLS1_WRITE_APP_DATA_BYTES;
MACRO_SSL_CTRL SSL_F_GET_CLIENT_FINISHED;
MACRO_SSL_CTRL SSL_F_GET_CLIENT_HELLO;
MACRO_SSL_CTRL SSL_F_GET_CLIENT_MASTER_KEY;
MACRO_SSL_CTRL SSL_F_GET_SERVER_FINISHED;
MACRO_SSL_CTRL SSL_F_GET_SERVER_HELLO;
MACRO_SSL_CTRL SSL_F_GET_SERVER_VERIFY;
MACRO_SSL_CTRL SSL_F_I2D_SSL_SESSION;
MACRO_SSL_CTRL SSL_F_READ_N;
MACRO_SSL_CTRL SSL_F_REQUEST_CERTIFICATE;
MACRO_SSL_CTRL SSL_F_SERVER_FINISH;
MACRO_SSL_CTRL SSL_F_SERVER_HELLO;
MACRO_SSL_CTRL SSL_F_SERVER_VERIFY;
MACRO_SSL_CTRL SSL_F_SSL23_ACCEPT;
MACRO_SSL_CTRL SSL_F_SSL23_CLIENT_HELLO;
MACRO_SSL_CTRL SSL_F_SSL23_CONNECT;
MACRO_SSL_CTRL SSL_F_SSL23_GET_CLIENT_HELLO;
MACRO_SSL_CTRL SSL_F_SSL23_GET_SERVER_HELLO;
MACRO_SSL_CTRL SSL_F_SSL23_PEEK;
MACRO_SSL_CTRL SSL_F_SSL23_READ;
MACRO_SSL_CTRL SSL_F_SSL23_WRITE;
MACRO_SSL_CTRL SSL_F_SSL2_ACCEPT;
MACRO_SSL_CTRL SSL_F_SSL2_CONNECT;
MACRO_SSL_CTRL SSL_F_SSL2_ENC_INIT;
MACRO_SSL_CTRL SSL_F_SSL2_GENERATE_KEY_MATERIAL;
MACRO_SSL_CTRL SSL_F_SSL2_PEEK;
MACRO_SSL_CTRL SSL_F_SSL2_READ;
MACRO_SSL_CTRL SSL_F_SSL2_READ_INTERNAL;
MACRO_SSL_CTRL SSL_F_SSL2_SET_CERTIFICATE;
MACRO_SSL_CTRL SSL_F_SSL2_WRITE;
MACRO_SSL_CTRL SSL_F_SSL3_ACCEPT;
MACRO_SSL_CTRL SSL_F_SSL3_ADD_CERT_TO_BUF;
MACRO_SSL_CTRL SSL_F_SSL3_CALLBACK_CTRL;
MACRO_SSL_CTRL SSL_F_SSL3_CHANGE_CIPHER_STATE;
MACRO_SSL_CTRL SSL_F_SSL3_CHECK_CERT_AND_ALGORITHM;
MACRO_SSL_CTRL SSL_F_SSL3_CLIENT_HELLO;
MACRO_SSL_CTRL SSL_F_SSL3_CONNECT;
MACRO_SSL_CTRL SSL_F_SSL3_CTRL;
MACRO_SSL_CTRL SSL_F_SSL3_CTX_CTRL;
MACRO_SSL_CTRL SSL_F_SSL3_DO_CHANGE_CIPHER_SPEC;
MACRO_SSL_CTRL SSL_F_SSL3_ENC;
MACRO_SSL_CTRL SSL_F_SSL3_GENERATE_KEY_BLOCK;
MACRO_SSL_CTRL SSL_F_SSL3_GET_CERTIFICATE_REQUEST;
MACRO_SSL_CTRL SSL_F_SSL3_GET_CERT_STATUS;
MACRO_SSL_CTRL SSL_F_SSL3_GET_CERT_VERIFY;
MACRO_SSL_CTRL SSL_F_SSL3_GET_CLIENT_CERTIFICATE;
MACRO_SSL_CTRL SSL_F_SSL3_GET_CLIENT_HELLO;
MACRO_SSL_CTRL SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE;
MACRO_SSL_CTRL SSL_F_SSL3_GET_FINISHED;
MACRO_SSL_CTRL SSL_F_SSL3_GET_KEY_EXCHANGE;
MACRO_SSL_CTRL SSL_F_SSL3_GET_MESSAGE;
MACRO_SSL_CTRL SSL_F_SSL3_GET_NEW_SESSION_TICKET;
MACRO_SSL_CTRL SSL_F_SSL3_GET_RECORD;
MACRO_SSL_CTRL SSL_F_SSL3_GET_SERVER_CERTIFICATE;
MACRO_SSL_CTRL SSL_F_SSL3_GET_SERVER_DONE;
MACRO_SSL_CTRL SSL_F_SSL3_GET_SERVER_HELLO;
MACRO_SSL_CTRL SSL_F_SSL3_NEW_SESSION_TICKET;
MACRO_SSL_CTRL SSL_F_SSL3_OUTPUT_CERT_CHAIN;
MACRO_SSL_CTRL SSL_F_SSL3_PEEK;
MACRO_SSL_CTRL SSL_F_SSL3_READ_BYTES;
MACRO_SSL_CTRL SSL_F_SSL3_READ_N;
MACRO_SSL_CTRL SSL_F_SSL3_SEND_CERTIFICATE_REQUEST;
MACRO_SSL_CTRL SSL_F_SSL3_SEND_CLIENT_CERTIFICATE;
MACRO_SSL_CTRL SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE;
MACRO_SSL_CTRL SSL_F_SSL3_SEND_CLIENT_VERIFY;
MACRO_SSL_CTRL SSL_F_SSL3_SEND_SERVER_CERTIFICATE;
MACRO_SSL_CTRL SSL_F_SSL3_SEND_SERVER_HELLO;
MACRO_SSL_CTRL SSL_F_SSL3_SEND_SERVER_KEY_EXCHANGE;
MACRO_SSL_CTRL SSL_F_SSL3_SETUP_BUFFERS;
MACRO_SSL_CTRL SSL_F_SSL3_SETUP_KEY_BLOCK;
MACRO_SSL_CTRL SSL_F_SSL3_WRITE_BYTES;
MACRO_SSL_CTRL SSL_F_SSL3_WRITE_PENDING;
MACRO_SSL_CTRL SSL_F_SSL_ADD_CLIENTHELLO_RENEGOTIATE_EXT;
MACRO_SSL_CTRL SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT;
MACRO_SSL_CTRL SSL_F_SSL_ADD_DIR_CERT_SUBJECTS_TO_STACK;
MACRO_SSL_CTRL SSL_F_SSL_ADD_FILE_CERT_SUBJECTS_TO_STACK;
MACRO_SSL_CTRL SSL_F_SSL_ADD_SERVERHELLO_RENEGOTIATE_EXT;
MACRO_SSL_CTRL SSL_F_SSL_ADD_SERVERHELLO_TLSEXT;
MACRO_SSL_CTRL SSL_F_SSL_BAD_METHOD;
MACRO_SSL_CTRL SSL_F_SSL_BYTES_TO_CIPHER_LIST;
MACRO_SSL_CTRL SSL_F_SSL_CERT_DUP;
MACRO_SSL_CTRL SSL_F_SSL_CERT_INST;
MACRO_SSL_CTRL SSL_F_SSL_CERT_INSTANTIATE;
MACRO_SSL_CTRL SSL_F_SSL_CERT_NEW;
MACRO_SSL_CTRL SSL_F_SSL_CHECK_PRIVATE_KEY;
MACRO_SSL_CTRL SSL_F_SSL_CHECK_SERVERHELLO_TLSEXT;
MACRO_SSL_CTRL SSL_F_SSL_CIPHER_PROCESS_RULESTR;
MACRO_SSL_CTRL SSL_F_SSL_CIPHER_STRENGTH_SORT;
MACRO_SSL_CTRL SSL_F_SSL_CLEAR;
MACRO_SSL_CTRL SSL_F_SSL_COMP_ADD_COMPRESSION_METHOD;
MACRO_SSL_CTRL SSL_F_SSL_CREATE_CIPHER_LIST;
MACRO_SSL_CTRL SSL_F_SSL_CTRL;
MACRO_SSL_CTRL SSL_F_SSL_CTX_CHECK_PRIVATE_KEY;
MACRO_SSL_CTRL SSL_F_SSL_CTX_NEW;
MACRO_SSL_CTRL SSL_F_SSL_CTX_SET_CIPHER_LIST;
MACRO_SSL_CTRL SSL_F_SSL_CTX_SET_CLIENT_CERT_ENGINE;
MACRO_SSL_CTRL SSL_F_SSL_CTX_SET_PURPOSE;
MACRO_SSL_CTRL SSL_F_SSL_CTX_SET_SESSION_ID_CONTEXT;
MACRO_SSL_CTRL SSL_F_SSL_CTX_SET_SSL_VERSION;
MACRO_SSL_CTRL SSL_F_SSL_CTX_SET_TRUST;
MACRO_SSL_CTRL SSL_F_SSL_CTX_USE_CERTIFICATE;
MACRO_SSL_CTRL SSL_F_SSL_CTX_USE_CERTIFICATE_ASN1;
MACRO_SSL_CTRL SSL_F_SSL_CTX_USE_CERTIFICATE_CHAIN_FILE;
MACRO_SSL_CTRL SSL_F_SSL_CTX_USE_CERTIFICATE_FILE;
MACRO_SSL_CTRL SSL_F_SSL_CTX_USE_PRIVATEKEY;
MACRO_SSL_CTRL SSL_F_SSL_CTX_USE_PRIVATEKEY_ASN1;
MACRO_SSL_CTRL SSL_F_SSL_CTX_USE_PRIVATEKEY_FILE;
MACRO_SSL_CTRL SSL_F_SSL_CTX_USE_RSAPRIVATEKEY;
MACRO_SSL_CTRL SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_ASN1;
MACRO_SSL_CTRL SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_FILE;
MACRO_SSL_CTRL SSL_F_SSL_DO_HANDSHAKE;
MACRO_SSL_CTRL SSL_F_SSL_GET_NEW_SESSION;
MACRO_SSL_CTRL SSL_F_SSL_GET_PREV_SESSION;
MACRO_SSL_CTRL SSL_F_SSL_GET_SERVER_SEND_CERT;
MACRO_SSL_CTRL SSL_F_SSL_GET_SIGN_PKEY;
MACRO_SSL_CTRL SSL_F_SSL_INIT_WBIO_BUFFER;
MACRO_SSL_CTRL SSL_F_SSL_LOAD_CLIENT_CA_FILE;
MACRO_SSL_CTRL SSL_F_SSL_NEW;
MACRO_SSL_CTRL SSL_F_SSL_PARSE_CLIENTHELLO_RENEGOTIATE_EXT;
MACRO_SSL_CTRL SSL_F_SSL_PARSE_CLIENTHELLO_TLSEXT;
MACRO_SSL_CTRL SSL_F_SSL_PARSE_SERVERHELLO_RENEGOTIATE_EXT;
MACRO_SSL_CTRL SSL_F_SSL_PARSE_SERVERHELLO_TLSEXT;
MACRO_SSL_CTRL SSL_F_SSL_PEEK;
MACRO_SSL_CTRL SSL_F_SSL_PREPARE_CLIENTHELLO_TLSEXT;
MACRO_SSL_CTRL SSL_F_SSL_PREPARE_SERVERHELLO_TLSEXT;
MACRO_SSL_CTRL SSL_F_SSL_READ;
MACRO_SSL_CTRL SSL_F_SSL_RSA_PRIVATE_DECRYPT;
MACRO_SSL_CTRL SSL_F_SSL_RSA_PUBLIC_ENCRYPT;
MACRO_SSL_CTRL SSL_F_SSL_SESSION_NEW;
MACRO_SSL_CTRL SSL_F_SSL_SESSION_PRINT_FP;
MACRO_SSL_CTRL SSL_F_SSL_SESS_CERT_NEW;
MACRO_SSL_CTRL SSL_F_SSL_SET_CERT;
MACRO_SSL_CTRL SSL_F_SSL_SET_CIPHER_LIST;
MACRO_SSL_CTRL SSL_F_SSL_SET_FD;
MACRO_SSL_CTRL SSL_F_SSL_SET_PKEY;
MACRO_SSL_CTRL SSL_F_SSL_SET_PURPOSE;
MACRO_SSL_CTRL SSL_F_SSL_SET_RFD;
MACRO_SSL_CTRL SSL_F_SSL_SET_SESSION;
MACRO_SSL_CTRL SSL_F_SSL_SET_SESSION_ID_CONTEXT;
MACRO_SSL_CTRL SSL_F_SSL_SET_TRUST;
MACRO_SSL_CTRL SSL_F_SSL_SET_WFD;
MACRO_SSL_CTRL SSL_F_SSL_SHUTDOWN;
MACRO_SSL_CTRL SSL_F_SSL_UNDEFINED_CONST_FUNCTION;
MACRO_SSL_CTRL SSL_F_SSL_UNDEFINED_FUNCTION;
MACRO_SSL_CTRL SSL_F_SSL_UNDEFINED_VOID_FUNCTION;
MACRO_SSL_CTRL SSL_F_SSL_USE_CERTIFICATE;
MACRO_SSL_CTRL SSL_F_SSL_USE_CERTIFICATE_ASN1;
MACRO_SSL_CTRL SSL_F_SSL_USE_CERTIFICATE_FILE;
MACRO_SSL_CTRL SSL_F_SSL_USE_PRIVATEKEY;
MACRO_SSL_CTRL SSL_F_SSL_USE_PRIVATEKEY_ASN1;
MACRO_SSL_CTRL SSL_F_SSL_USE_PRIVATEKEY_FILE;
MACRO_SSL_CTRL SSL_F_SSL_USE_RSAPRIVATEKEY;
MACRO_SSL_CTRL SSL_F_SSL_USE_RSAPRIVATEKEY_ASN1;
MACRO_SSL_CTRL SSL_F_SSL_USE_RSAPRIVATEKEY_FILE;
MACRO_SSL_CTRL SSL_F_SSL_VERIFY_CERT_CHAIN;
MACRO_SSL_CTRL SSL_F_SSL_WRITE;
MACRO_SSL_CTRL SSL_F_TLS1_CHANGE_CIPHER_STATE;
MACRO_SSL_CTRL SSL_F_TLS1_ENC;
MACRO_SSL_CTRL SSL_F_TLS1_SETUP_KEY_BLOCK;
MACRO_SSL_CTRL SSL_F_WRITE_PENDING;
MACRO_SSL SSL_MAX_CERT_LIST_DEFAULT;
MACRO_SSL SSL_MAX_KEY_ARG_LENGTH;
MACRO_SSL SSL_MAX_KRB5_PRINCIPAL_LENGTH;
MACRO_SSL SSL_MAX_MASTER_KEY_LENGTH;
MACRO_SSL SSL_MAX_SID_CTX_LENGTH;
MACRO_SSL SSL_MAX_SSL_SESSION_ID_LENGTH;
MACRO_SSL SSL_MIN_RSA_MODULUS_LENGTH_IN_BYTES;
MACRO_SSL SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER;
MACRO_SSL SSL_MODE_AUTO_RETRY;
MACRO_SSL SSL_MODE_ENABLE_PARTIAL_WRITE;
MACRO_SSL SSL_MODE_NO_AUTO_CHAIN;
MACRO_SSL SSL_NOTHING;
MACRO_SSL SSL_OP_ALL;
MACRO_SSL SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION;
MACRO_SSL SSL_OP_CIPHER_SERVER_PREFERENCE;
MACRO_SSL SSL_OP_CISCO_ANYCONNECT;
MACRO_SSL SSL_OP_COOKIE_EXCHANGE;
MACRO_SSL SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS;
MACRO_SSL SSL_OP_EPHEMERAL_RSA;
MACRO_SSL SSL_OP_LEGACY_SERVER_CONNECT;
MACRO_SSL SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER;
MACRO_SSL SSL_OP_MICROSOFT_SESS_ID_BUG;
MACRO_SSL SSL_OP_MSIE_SSLV2_RSA_PADDING;
MACRO_SSL SSL_OP_NETSCAPE_CA_DN_BUG;
MACRO_SSL SSL_OP_NETSCAPE_CHALLENGE_BUG;
MACRO_SSL SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG;
MACRO_SSL SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG;
MACRO_SSL SSL_OP_NO_QUERY_MTU;
MACRO_SSL SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION;
MACRO_SSL SSL_OP_NO_SSLv2;
MACRO_SSL SSL_OP_NO_SSLv3;
MACRO_SSL SSL_OP_NO_TICKET;
MACRO_SSL SSL_OP_NO_TLSv1;
MACRO_SSL SSL_OP_PKCS1_CHECK_1;
MACRO_SSL SSL_OP_PKCS1_CHECK_2;
MACRO_SSL SSL_OP_SINGLE_DH_USE;
MACRO_SSL SSL_OP_SINGLE_ECDH_USE;
MACRO_SSL SSL_OP_SSLEAY_080_CLIENT_DH_BUG;
MACRO_SSL SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG;
MACRO_SSL SSL_OP_TLS_BLOCK_PADDING_BUG;
MACRO_SSL SSL_OP_TLS_D5_BUG;
MACRO_SSL SSL_OP_TLS_ROLLBACK_BUG;
MACRO_SSL SSL_READING;
MACRO_SSL SSL_RECEIVED_SHUTDOWN;
MACRO_SSL_CTRL SSL_R_APP_DATA_IN_HANDSHAKE;
MACRO_SSL_CTRL SSL_R_ATTEMPT_TO_REUSE_SESSION_IN_DIFFERENT_CONTEXT;
MACRO_SSL_CTRL SSL_R_BAD_ALERT_RECORD;
MACRO_SSL_CTRL SSL_R_BAD_AUTHENTICATION_TYPE;
MACRO_SSL_CTRL SSL_R_BAD_CHANGE_CIPHER_SPEC;
MACRO_SSL_CTRL SSL_R_BAD_CHECKSUM;
MACRO_SSL_CTRL SSL_R_BAD_DATA_RETURNED_BY_CALLBACK;
MACRO_SSL_CTRL SSL_R_BAD_DECOMPRESSION;
MACRO_SSL_CTRL SSL_R_BAD_DH_G_LENGTH;
MACRO_SSL_CTRL SSL_R_BAD_DH_PUB_KEY_LENGTH;
MACRO_SSL_CTRL SSL_R_BAD_DH_P_LENGTH;
MACRO_SSL_CTRL SSL_R_BAD_DIGEST_LENGTH;
MACRO_SSL_CTRL SSL_R_BAD_DSA_SIGNATURE;
MACRO_SSL_CTRL SSL_R_BAD_ECC_CERT;
MACRO_SSL_CTRL SSL_R_BAD_ECDSA_SIGNATURE;
MACRO_SSL_CTRL SSL_R_BAD_ECPOINT;
MACRO_SSL_CTRL SSL_R_BAD_HELLO_REQUEST;
MACRO_SSL_CTRL SSL_R_BAD_LENGTH;
MACRO_SSL_CTRL SSL_R_BAD_MAC_DECODE;
MACRO_SSL_CTRL SSL_R_BAD_MESSAGE_TYPE;
MACRO_SSL_CTRL SSL_R_BAD_PACKET_LENGTH;
MACRO_SSL_CTRL SSL_R_BAD_PROTOCOL_VERSION_NUMBER;
MACRO_SSL_CTRL SSL_R_BAD_RESPONSE_ARGUMENT;
MACRO_SSL_CTRL SSL_R_BAD_RSA_DECRYPT;
MACRO_SSL_CTRL SSL_R_BAD_RSA_ENCRYPT;
MACRO_SSL_CTRL SSL_R_BAD_RSA_E_LENGTH;
MACRO_SSL_CTRL SSL_R_BAD_RSA_MODULUS_LENGTH;
MACRO_SSL_CTRL SSL_R_BAD_RSA_SIGNATURE;
MACRO_SSL_CTRL SSL_R_BAD_SIGNATURE;
MACRO_SSL_CTRL SSL_R_BAD_SSL_FILETYPE;
MACRO_SSL_CTRL SSL_R_BAD_SSL_SESSION_ID_LENGTH;
MACRO_SSL_CTRL SSL_R_BAD_STATE;
MACRO_SSL_CTRL SSL_R_BAD_WRITE_RETRY;
MACRO_SSL_CTRL SSL_R_BIO_NOT_SET;
MACRO_SSL_CTRL SSL_R_BLOCK_CIPHER_PAD_IS_WRONG;
MACRO_SSL_CTRL SSL_R_BN_LIB;
MACRO_SSL_CTRL SSL_R_CA_DN_LENGTH_MISMATCH;
MACRO_SSL_CTRL SSL_R_CA_DN_TOO_LONG;
MACRO_SSL_CTRL SSL_R_CCS_RECEIVED_EARLY;
MACRO_SSL_CTRL SSL_R_CERTIFICATE_VERIFY_FAILED;
MACRO_SSL_CTRL SSL_R_CERT_LENGTH_MISMATCH;
MACRO_SSL_CTRL SSL_R_CHALLENGE_IS_DIFFERENT;
MACRO_SSL_CTRL SSL_R_CIPHER_CODE_WRONG_LENGTH;
MACRO_SSL_CTRL SSL_R_CIPHER_OR_HASH_UNAVAILABLE;
MACRO_SSL_CTRL SSL_R_CIPHER_TABLE_SRC_ERROR;
MACRO_SSL_CTRL SSL_R_CLIENTHELLO_TLSEXT;
MACRO_SSL_CTRL SSL_R_COMPRESSED_LENGTH_TOO_LONG;
MACRO_SSL_CTRL SSL_R_COMPRESSION_FAILURE;
MACRO_SSL_CTRL SSL_R_COMPRESSION_ID_NOT_WITHIN_PRIVATE_RANGE;
MACRO_SSL_CTRL SSL_R_COMPRESSION_LIBRARY_ERROR;
MACRO_SSL_CTRL SSL_R_CONNECTION_ID_IS_DIFFERENT;
MACRO_SSL_CTRL SSL_R_CONNECTION_TYPE_NOT_SET;
MACRO_SSL_CTRL SSL_R_COOKIE_MISMATCH;
MACRO_SSL_CTRL SSL_R_DATA_BETWEEN_CCS_AND_FINISHED;
MACRO_SSL_CTRL SSL_R_DATA_LENGTH_TOO_LONG;
MACRO_SSL_CTRL SSL_R_DECRYPTION_FAILED;
MACRO_SSL_CTRL SSL_R_DECRYPTION_FAILED_OR_BAD_RECORD_MAC;
MACRO_SSL_CTRL SSL_R_DH_PUBLIC_VALUE_LENGTH_IS_WRONG;
MACRO_SSL_CTRL SSL_R_DIGEST_CHECK_FAILED;
MACRO_SSL_CTRL SSL_R_DTLS_MESSAGE_TOO_BIG;
MACRO_SSL_CTRL SSL_R_DUPLICATE_COMPRESSION_ID;
MACRO_SSL_CTRL SSL_R_ECGROUP_TOO_LARGE_FOR_CIPHER;
MACRO_SSL_CTRL SSL_R_ENCRYPTED_LENGTH_TOO_LONG;
MACRO_SSL_CTRL SSL_R_ERROR_GENERATING_TMP_RSA_KEY;
MACRO_SSL_CTRL SSL_R_ERROR_IN_RECEIVED_CIPHER_LIST;
MACRO_SSL_CTRL SSL_R_EXCESSIVE_MESSAGE_SIZE;
MACRO_SSL_CTRL SSL_R_EXTRA_DATA_IN_MESSAGE;
MACRO_SSL_CTRL SSL_R_GOT_A_FIN_BEFORE_A_CCS;
MACRO_SSL_CTRL SSL_R_HTTPS_PROXY_REQUEST;
MACRO_SSL_CTRL SSL_R_HTTP_REQUEST;
MACRO_SSL_CTRL SSL_R_ILLEGAL_PADDING;
MACRO_SSL_CTRL SSL_R_INVALID_CHALLENGE_LENGTH;
MACRO_SSL_CTRL SSL_R_INVALID_COMMAND;
MACRO_SSL_CTRL SSL_R_INVALID_PURPOSE;
MACRO_SSL_CTRL SSL_R_INVALID_STATUS_RESPONSE;
MACRO_SSL_CTRL SSL_R_INVALID_TICKET_KEYS_LENGTH;
MACRO_SSL_CTRL SSL_R_INVALID_TRUST;
MACRO_SSL_CTRL SSL_R_KEY_ARG_TOO_LONG;
MACRO_SSL_CTRL SSL_R_KRB5;
MACRO_SSL_CTRL SSL_R_KRB5_C_CC_PRINC;
MACRO_SSL_CTRL SSL_R_KRB5_C_GET_CRED;
MACRO_SSL_CTRL SSL_R_KRB5_C_INIT;
MACRO_SSL_CTRL SSL_R_KRB5_C_MK_REQ;
MACRO_SSL_CTRL SSL_R_KRB5_S_BAD_TICKET;
MACRO_SSL_CTRL SSL_R_KRB5_S_INIT;
MACRO_SSL_CTRL SSL_R_KRB5_S_RD_REQ;
MACRO_SSL_CTRL SSL_R_KRB5_S_TKT_EXPIRED;
MACRO_SSL_CTRL SSL_R_KRB5_S_TKT_NYV;
MACRO_SSL_CTRL SSL_R_KRB5_S_TKT_SKEW;
MACRO_SSL_CTRL SSL_R_LENGTH_MISMATCH;
MACRO_SSL_CTRL SSL_R_LENGTH_TOO_SHORT;
MACRO_SSL_CTRL SSL_R_LIBRARY_BUG;
MACRO_SSL_CTRL SSL_R_LIBRARY_HAS_NO_CIPHERS;
MACRO_SSL_CTRL SSL_R_MESSAGE_TOO_LONG;
MACRO_SSL_CTRL SSL_R_MISSING_DH_DSA_CERT;
MACRO_SSL_CTRL SSL_R_MISSING_DH_KEY;
MACRO_SSL_CTRL SSL_R_MISSING_DH_RSA_CERT;
MACRO_SSL_CTRL SSL_R_MISSING_DSA_SIGNING_CERT;
MACRO_SSL_CTRL SSL_R_MISSING_EXPORT_TMP_DH_KEY;
MACRO_SSL_CTRL SSL_R_MISSING_EXPORT_TMP_RSA_KEY;
MACRO_SSL_CTRL SSL_R_MISSING_RSA_CERTIFICATE;
MACRO_SSL_CTRL SSL_R_MISSING_RSA_ENCRYPTING_CERT;
MACRO_SSL_CTRL SSL_R_MISSING_RSA_SIGNING_CERT;
MACRO_SSL_CTRL SSL_R_MISSING_TMP_DH_KEY;
MACRO_SSL_CTRL SSL_R_MISSING_TMP_ECDH_KEY;
MACRO_SSL_CTRL SSL_R_MISSING_TMP_RSA_KEY;
MACRO_SSL_CTRL SSL_R_MISSING_TMP_RSA_PKEY;
MACRO_SSL_CTRL SSL_R_MISSING_VERIFY_MESSAGE;
MACRO_SSL_CTRL SSL_R_NON_SSLV2_INITIAL_PACKET;
MACRO_SSL_CTRL SSL_R_NO_CERTIFICATES_RETURNED;
MACRO_SSL_CTRL SSL_R_NO_CERTIFICATE_ASSIGNED;
MACRO_SSL_CTRL SSL_R_NO_CERTIFICATE_RETURNED;
MACRO_SSL_CTRL SSL_R_NO_CERTIFICATE_SET;
MACRO_SSL_CTRL SSL_R_NO_CERTIFICATE_SPECIFIED;
MACRO_SSL_CTRL SSL_R_NO_CIPHERS_AVAILABLE;
MACRO_SSL_CTRL SSL_R_NO_CIPHERS_PASSED;
MACRO_SSL_CTRL SSL_R_NO_CIPHERS_SPECIFIED;
MACRO_SSL_CTRL SSL_R_NO_CIPHER_LIST;
MACRO_SSL_CTRL SSL_R_NO_CIPHER_MATCH;
MACRO_SSL_CTRL SSL_R_NO_CLIENT_CERT_METHOD;
MACRO_SSL_CTRL SSL_R_NO_CLIENT_CERT_RECEIVED;
MACRO_SSL_CTRL SSL_R_NO_COMPRESSION_SPECIFIED;
MACRO_SSL_CTRL SSL_R_NO_METHOD_SPECIFIED;
MACRO_SSL_CTRL SSL_R_NO_PRIVATEKEY;
MACRO_SSL_CTRL SSL_R_NO_PRIVATE_KEY_ASSIGNED;
MACRO_SSL_CTRL SSL_R_NO_PROTOCOLS_AVAILABLE;
MACRO_SSL_CTRL SSL_R_NO_PUBLICKEY;
MACRO_SSL_CTRL SSL_R_NO_RENEGOTIATION;
MACRO_SSL_CTRL SSL_R_NO_SHARED_CIPHER;
MACRO_SSL_CTRL SSL_R_NO_VERIFY_CALLBACK;
MACRO_SSL_CTRL SSL_R_NULL_SSL_CTX;
MACRO_SSL_CTRL SSL_R_NULL_SSL_METHOD_PASSED;
MACRO_SSL_CTRL SSL_R_OLD_SESSION_CIPHER_NOT_RETURNED;
MACRO_SSL_CTRL SSL_R_ONLY_TLS_ALLOWED_IN_FIPS_MODE;
MACRO_SSL_CTRL SSL_R_PACKET_LENGTH_TOO_LONG;
MACRO_SSL_CTRL SSL_R_PARSE_TLSEXT;
MACRO_SSL_CTRL SSL_R_PATH_TOO_LONG;
MACRO_SSL_CTRL SSL_R_PEER_DID_NOT_RETURN_A_CERTIFICATE;
MACRO_SSL_CTRL SSL_R_PEER_ERROR;
MACRO_SSL_CTRL SSL_R_PEER_ERROR_CERTIFICATE;
MACRO_SSL_CTRL SSL_R_PEER_ERROR_NO_CERTIFICATE;
MACRO_SSL_CTRL SSL_R_PEER_ERROR_NO_CIPHER;
MACRO_SSL_CTRL SSL_R_PEER_ERROR_UNSUPPORTED_CERTIFICATE_TYPE;
MACRO_SSL_CTRL SSL_R_PRE_MAC_LENGTH_TOO_LONG;
MACRO_SSL_CTRL SSL_R_PROBLEMS_MAPPING_CIPHER_FUNCTIONS;
MACRO_SSL_CTRL SSL_R_PROTOCOL_IS_SHUTDOWN;
MACRO_SSL_CTRL SSL_R_PUBLIC_KEY_ENCRYPT_ERROR;
MACRO_SSL_CTRL SSL_R_PUBLIC_KEY_IS_NOT_RSA;
MACRO_SSL_CTRL SSL_R_PUBLIC_KEY_NOT_RSA;
MACRO_SSL_CTRL SSL_R_READ_BIO_NOT_SET;
MACRO_SSL_CTRL SSL_R_READ_TIMEOUT_EXPIRED;
MACRO_SSL_CTRL SSL_R_READ_WRONG_PACKET_TYPE;
MACRO_SSL_CTRL SSL_R_RECORD_LENGTH_MISMATCH;
MACRO_SSL_CTRL SSL_R_RECORD_TOO_LARGE;
MACRO_SSL_CTRL SSL_R_RECORD_TOO_SMALL;
MACRO_SSL_CTRL SSL_R_RENEGOTIATE_EXT_TOO_LONG;
MACRO_SSL_CTRL SSL_R_RENEGOTIATION_ENCODING_ERR;
MACRO_SSL_CTRL SSL_R_RENEGOTIATION_MISMATCH;
MACRO_SSL_CTRL SSL_R_REQUIRED_CIPHER_MISSING;
MACRO_SSL_CTRL SSL_R_REUSE_CERT_LENGTH_NOT_ZERO;
MACRO_SSL_CTRL SSL_R_REUSE_CERT_TYPE_NOT_ZERO;
MACRO_SSL_CTRL SSL_R_REUSE_CIPHER_LIST_NOT_ZERO;
MACRO_SSL_CTRL SSL_R_SCSV_RECEIVED_WHEN_RENEGOTIATING;
MACRO_SSL_CTRL SSL_R_SERVERHELLO_TLSEXT;
MACRO_SSL_CTRL SSL_R_SESSION_ID_CONTEXT_UNINITIALIZED;
MACRO_SSL_CTRL SSL_R_SHORT_READ;
MACRO_SSL_CTRL SSL_R_SIGNATURE_FOR_NON_SIGNING_CERTIFICATE;
MACRO_SSL_CTRL SSL_R_SSL23_DOING_SESSION_ID_REUSE;
MACRO_SSL_CTRL SSL_R_SSL2_CONNECTION_ID_TOO_LONG;
MACRO_SSL_CTRL SSL_R_SSL3_EXT_INVALID_SERVERNAME;
MACRO_SSL_CTRL SSL_R_SSL3_EXT_INVALID_SERVERNAME_TYPE;
MACRO_SSL_CTRL SSL_R_SSL3_SESSION_ID_TOO_LONG;
MACRO_SSL_CTRL SSL_R_SSL3_SESSION_ID_TOO_SHORT;
MACRO_SSL_CTRL SSL_R_SSLV3_ALERT_BAD_CERTIFICATE;
MACRO_SSL_CTRL SSL_R_SSLV3_ALERT_BAD_RECORD_MAC;
MACRO_SSL_CTRL SSL_R_SSLV3_ALERT_CERTIFICATE_EXPIRED;
MACRO_SSL_CTRL SSL_R_SSLV3_ALERT_CERTIFICATE_REVOKED;
MACRO_SSL_CTRL SSL_R_SSLV3_ALERT_CERTIFICATE_UNKNOWN;
MACRO_SSL_CTRL SSL_R_SSLV3_ALERT_DECOMPRESSION_FAILURE;
MACRO_SSL_CTRL SSL_R_SSLV3_ALERT_HANDSHAKE_FAILURE;
MACRO_SSL_CTRL SSL_R_SSLV3_ALERT_ILLEGAL_PARAMETER;
MACRO_SSL_CTRL SSL_R_SSLV3_ALERT_NO_CERTIFICATE;
MACRO_SSL_CTRL SSL_R_SSLV3_ALERT_UNEXPECTED_MESSAGE;
MACRO_SSL_CTRL SSL_R_SSLV3_ALERT_UNSUPPORTED_CERTIFICATE;
MACRO_SSL_CTRL SSL_R_SSL_CTX_HAS_NO_DEFAULT_SSL_VERSION;
MACRO_SSL_CTRL SSL_R_SSL_HANDSHAKE_FAILURE;
MACRO_SSL_CTRL SSL_R_SSL_LIBRARY_HAS_NO_CIPHERS;
MACRO_SSL_CTRL SSL_R_SSL_SESSION_ID_CALLBACK_FAILED;
MACRO_SSL_CTRL SSL_R_SSL_SESSION_ID_CONFLICT;
MACRO_SSL_CTRL SSL_R_SSL_SESSION_ID_CONTEXT_TOO_LONG;
MACRO_SSL_CTRL SSL_R_SSL_SESSION_ID_HAS_BAD_LENGTH;
MACRO_SSL_CTRL SSL_R_SSL_SESSION_ID_IS_DIFFERENT;
MACRO_SSL_CTRL SSL_R_TLSV1_ALERT_ACCESS_DENIED;
MACRO_SSL_CTRL SSL_R_TLSV1_ALERT_DECODE_ERROR;
MACRO_SSL_CTRL SSL_R_TLSV1_ALERT_DECRYPTION_FAILED;
MACRO_SSL_CTRL SSL_R_TLSV1_ALERT_DECRYPT_ERROR;
MACRO_SSL_CTRL SSL_R_TLSV1_ALERT_EXPORT_RESTRICTION;
MACRO_SSL_CTRL SSL_R_TLSV1_ALERT_INSUFFICIENT_SECURITY;
MACRO_SSL_CTRL SSL_R_TLSV1_ALERT_INTERNAL_ERROR;
MACRO_SSL_CTRL SSL_R_TLSV1_ALERT_NO_RENEGOTIATION;
MACRO_SSL_CTRL SSL_R_TLSV1_ALERT_PROTOCOL_VERSION;
MACRO_SSL_CTRL SSL_R_TLSV1_ALERT_RECORD_OVERFLOW;
MACRO_SSL_CTRL SSL_R_TLSV1_ALERT_UNKNOWN_CA;
MACRO_SSL_CTRL SSL_R_TLSV1_ALERT_USER_CANCELLED;
MACRO_SSL_CTRL SSL_R_TLS_CLIENT_CERT_REQ_WITH_ANON_CIPHER;
MACRO_SSL_CTRL SSL_R_TLS_INVALID_ECPOINTFORMAT_LIST;
MACRO_SSL_CTRL SSL_R_TLS_PEER_DID_NOT_RESPOND_WITH_CERTIFICATE_LIST;
MACRO_SSL_CTRL SSL_R_TLS_RSA_ENCRYPTED_VALUE_LENGTH_IS_WRONG;
MACRO_SSL_CTRL SSL_R_TRIED_TO_USE_UNSUPPORTED_CIPHER;
MACRO_SSL_CTRL SSL_R_UNABLE_TO_DECODE_DH_CERTS;
MACRO_SSL_CTRL SSL_R_UNABLE_TO_DECODE_ECDH_CERTS;
MACRO_SSL_CTRL SSL_R_UNABLE_TO_EXTRACT_PUBLIC_KEY;
MACRO_SSL_CTRL SSL_R_UNABLE_TO_FIND_DH_PARAMETERS;
MACRO_SSL_CTRL SSL_R_UNABLE_TO_FIND_ECDH_PARAMETERS;
MACRO_SSL_CTRL SSL_R_UNABLE_TO_FIND_PUBLIC_KEY_PARAMETERS;
MACRO_SSL_CTRL SSL_R_UNABLE_TO_FIND_SSL_METHOD;
MACRO_SSL_CTRL SSL_R_UNABLE_TO_LOAD_SSL2_MD5_ROUTINES;
MACRO_SSL_CTRL SSL_R_UNABLE_TO_LOAD_SSL3_MD5_ROUTINES;
MACRO_SSL_CTRL SSL_R_UNABLE_TO_LOAD_SSL3_SHA1_ROUTINES;
MACRO_SSL_CTRL SSL_R_UNEXPECTED_MESSAGE;
MACRO_SSL_CTRL SSL_R_UNEXPECTED_RECORD;
MACRO_SSL_CTRL SSL_R_UNINITIALIZED;
MACRO_SSL_CTRL SSL_R_UNKNOWN_ALERT_TYPE;
MACRO_SSL_CTRL SSL_R_UNKNOWN_CERTIFICATE_TYPE;
MACRO_SSL_CTRL SSL_R_UNKNOWN_CIPHER_RETURNED;
MACRO_SSL_CTRL SSL_R_UNKNOWN_CIPHER_TYPE;
MACRO_SSL_CTRL SSL_R_UNKNOWN_KEY_EXCHANGE_TYPE;
MACRO_SSL_CTRL SSL_R_UNKNOWN_PKEY_TYPE;
MACRO_SSL_CTRL SSL_R_UNKNOWN_PROTOCOL;
MACRO_SSL_CTRL SSL_R_UNKNOWN_REMOTE_ERROR_TYPE;
MACRO_SSL_CTRL SSL_R_UNKNOWN_SSL_VERSION;
MACRO_SSL_CTRL SSL_R_UNKNOWN_STATE;
MACRO_SSL_CTRL SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED;
MACRO_SSL_CTRL SSL_R_UNSUPPORTED_CIPHER;
MACRO_SSL_CTRL SSL_R_UNSUPPORTED_COMPRESSION_ALGORITHM;
MACRO_SSL_CTRL SSL_R_UNSUPPORTED_ELLIPTIC_CURVE;
MACRO_SSL_CTRL SSL_R_UNSUPPORTED_PROTOCOL;
MACRO_SSL_CTRL SSL_R_UNSUPPORTED_SSL_VERSION;
MACRO_SSL_CTRL SSL_R_UNSUPPORTED_STATUS_TYPE;
MACRO_SSL_CTRL SSL_R_WRITE_BIO_NOT_SET;
MACRO_SSL_CTRL SSL_R_WRONG_CIPHER_RETURNED;
MACRO_SSL_CTRL SSL_R_WRONG_MESSAGE_TYPE;
MACRO_SSL_CTRL SSL_R_WRONG_NUMBER_OF_KEY_BITS;
MACRO_SSL_CTRL SSL_R_WRONG_SIGNATURE_LENGTH;
MACRO_SSL_CTRL SSL_R_WRONG_SIGNATURE_SIZE;
MACRO_SSL_CTRL SSL_R_WRONG_SSL_VERSION;
MACRO_SSL_CTRL SSL_R_WRONG_VERSION_NUMBER;
MACRO_SSL_CTRL SSL_R_X509_LIB;
MACRO_SSL_CTRL SSL_R_X509_VERIFICATION_SETUP_PROBLEMS;
MACRO_SSL SSL_SENT_SHUTDOWN;
MACRO_SSL SSL_SESSION_ASN1_VERSION;
MACRO_SSL SSL_SESSION_CACHE_MAX_SIZE_DEFAULT;
MACRO_SSL SSL_SESS_CACHE_BOTH;
MACRO_SSL SSL_SESS_CACHE_CLIENT;
MACRO_SSL SSL_SESS_CACHE_NO_AUTO_CLEAR;
MACRO_SSL SSL_SESS_CACHE_NO_INTERNAL;
MACRO_SSL SSL_SESS_CACHE_NO_INTERNAL_LOOKUP;
MACRO_SSL SSL_SESS_CACHE_NO_INTERNAL_STORE;
MACRO_SSL SSL_SESS_CACHE_OFF;
MACRO_SSL SSL_SESS_CACHE_SERVER;
MACRO_SSL_ST SSL_ST_ACCEPT;
MACRO_SSL_ST SSL_ST_BEFORE;
MACRO_SSL_ST SSL_ST_CONNECT;
MACRO_SSL_ST SSL_ST_INIT;
MACRO_SSL_ST SSL_ST_MASK;
MACRO_SSL_ST SSL_ST_OK;
MACRO_SSL_ST SSL_ST_READ_BODY;
MACRO_SSL_ST SSL_ST_READ_DONE;
MACRO_SSL_ST SSL_ST_READ_HEADER;
MACRO_SSL_ST SSL_ST_RENEGOTIATE;
MACRO_SSL_TLSEXT SSL_TLSEXT_ERR_ALERT_FATAL;
MACRO_SSL_TLSEXT SSL_TLSEXT_ERR_ALERT_WARNING;
MACRO_SSL_TLSEXT SSL_TLSEXT_ERR_NOACK;
MACRO_SSL_TLSEXT SSL_TLSEXT_ERR_OK;
MACRO_SSL_ST SSL_VERIFY_CLIENT_ONCE;
MACRO_SSL_ST SSL_VERIFY_FAIL_IF_NO_PEER_CERT;
MACRO_SSL_ST SSL_VERIFY_NONE;
MACRO_SSL_ST SSL_VERIFY_PEER;
MACRO_SSL SSL_WRITING;
MACRO_SSL SSL_X509_LOOKUP;
MACRO_SSLEEP SSTOP;
MACRO_SS_NOFDREF SS_ASYNC;
MACRO_SS_NOFDREF SS_CANTRCVMORE;
MACRO_SS_NOFDREF SS_CANTSENDMORE;
MACRO_SS_NOFDREF SS_COMP;
MACRO_SS_NOFDREF SS_DEFUNCT;
MACRO_SS SS_DISABLE;
MACRO_SS_NOFDREF SS_DRAINING;
MACRO_SS_NOFDREF SS_INCOMP;
MACRO_SS_NOFDREF SS_ISCONFIRMING;
MACRO_SS_NOFDREF SS_ISCONNECTED;
MACRO_SS_NOFDREF SS_ISCONNECTING;
MACRO_SS_NOFDREF SS_ISDISCONNECTED;
MACRO_SS_NOFDREF SS_ISDISCONNECTING;
MACRO_SS_NOFDREF SS_NBIO;
MACRO_SS_NOFDREF SS_NOFDREF;
MACRO_SS SS_ONSTACK;
MACRO_SS_NOFDREF SS_PRIV;
MACRO_SS_NOFDREF SS_RCVATMARK;
MACRO_STABLE STABLE_FLAGS_MALLOC;
MACRO_STABLE STABLE_NO_MASK;
MACRO_STACK STACK_INCR;
MACRO_STATUS STATUS_CURRENT;
MACRO_STATUS STATUS_DEPRECATED;
MACRO_STATUS STATUS_MANDATORY;
MACRO_STATUS STATUS_OBSOLETE;
MACRO_STATUS STATUS_OPTIONAL;
MACRO_STAT STAT_ERROR;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_MPD_STATS_END;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_MPD_STATS_START;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_SNMPINASNPARSEERRS;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_SNMPINBADCOMMUNITYNAMES;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_SNMPINBADCOMMUNITYUSES;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_SNMPINBADVALUES;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_SNMPINBADVERSIONS;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_SNMPINGENERRS;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_SNMPINGETNEXTS;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_SNMPINGETREQUESTS;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_SNMPINGETRESPONSES;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_SNMPINNOSUCHNAMES;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_SNMPINPKTS;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_SNMPINREADONLYS;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_SNMPINSETREQUESTS;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_SNMPINTOOBIGS;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_SNMPINTOTALREQVARS;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_SNMPINTOTALSETVARS;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_SNMPINTRAPS;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_SNMPINVALIDMSGS;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_SNMPOUTBADVALUES;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_SNMPOUTGENERRS;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_SNMPOUTGETNEXTS;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_SNMPOUTGETREQUESTS;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_SNMPOUTGETRESPONSES;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_SNMPOUTNOSUCHNAMES;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_SNMPOUTPKTS;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_SNMPOUTSETREQUESTS;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_SNMPOUTTOOBIGS;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_SNMPOUTTRAPS;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_SNMPPROXYDROPS;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_SNMPSILENTDROPS;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_SNMPUNAVAILABLECONTEXTS;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_SNMPUNKNOWNCONTEXTS;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_SNMPUNKNOWNPDUHANDLERS;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_SNMPUNKNOWNSECURITYMODELS;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_SNMP_STATS_END;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_SNMP_STATS_START;
MACRO_STAT STAT_SUCCESS;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_TARGET_STATS_END;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_TARGET_STATS_START;
MACRO_STAT STAT_TIMEOUT;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_TLSTM_SNMPTLSTMSESSIONACCEPTS;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_TLSTM_SNMPTLSTMSESSIONCLIENTCLOSES;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_TLSTM_SNMPTLSTMSESSIONINVALIDCACHES;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_TLSTM_SNMPTLSTMSESSIONINVALIDCLIENTCERTIFICATES;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_TLSTM_SNMPTLSTMSESSIONINVALIDSERVERCERTIFICATES;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_TLSTM_SNMPTLSTMSESSIONNOSESSIONS;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_TLSTM_SNMPTLSTMSESSIONOPENERRORS;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_TLSTM_SNMPTLSTMSESSIONOPENS;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_TLSTM_SNMPTLSTMSESSIONSERVERCLOSES;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_TLSTM_SNMPTLSTMSESSIONUNKNOWNSERVERCERTIFICATE;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_TLSTM_STATS_END;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_TLSTM_STATS_START;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_TSM_SNMPTSMINADEQUATESECURITYLEVELS;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_TSM_SNMPTSMINVALIDCACHES;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_TSM_SNMPTSMINVALIDPREFIXES;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_TSM_SNMPTSMUNKNOWNPREFIXES;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_TSM_STATS_END;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_TSM_STATS_START;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_USMSTATSDECRYPTIONERRORS;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_USMSTATSNOTINTIMEWINDOWS;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_USMSTATSUNKNOWNENGINEIDS;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_USMSTATSUNKNOWNUSERNAMES;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_USMSTATSUNSUPPORTEDSECLEVELS;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_USMSTATSWRONGDIGESTS;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_USM_STATS_END;
MACRO_STAT_SNMPUNKNOWNSECURITYMODELS STAT_USM_STATS_START;
MACRO_STDC STDC_HEADERS;
MACRO_FILENO STDERR_FILENO;
MACRO_FILENO STDIN_FILENO;
MACRO_FILENO STDOUT_FILENO;
STORE_attribs STORE_ATTR_CERTHASH;
STORE_attribs STORE_ATTR_EMAIL;
STORE_attribs STORE_ATTR_END;
STORE_attribs STORE_ATTR_FILENAME;
STORE_attribs STORE_ATTR_FRIENDLYNAME;
STORE_attribs STORE_ATTR_ISSUER;
STORE_attribs STORE_ATTR_ISSUERKEYID;
STORE_attribs STORE_ATTR_ISSUERSERIALHASH;
STORE_attribs STORE_ATTR_KEYID;
STORE_attribs STORE_ATTR_OR;
STORE_attribs STORE_ATTR_SERIAL;
STORE_attribs STORE_ATTR_SUBJECT;
STORE_attribs STORE_ATTR_SUBJECTKEYID;
STORE_attribs STORE_ATTR_TYPE_NUM;
MACRO_STORE STORE_CTRL_SET_CONF_FILE;
MACRO_STORE STORE_CTRL_SET_CONF_SECTION;
MACRO_STORE STORE_CTRL_SET_DIRECTORY;
MACRO_STORE STORE_CTRL_SET_FILE;
MACRO_STORE STORE_F_MEM_DELETE;
MACRO_STORE STORE_F_MEM_GENERATE;
MACRO_STORE STORE_F_MEM_LIST_END;
MACRO_STORE STORE_F_MEM_LIST_NEXT;
MACRO_STORE STORE_F_MEM_LIST_START;
MACRO_STORE STORE_F_MEM_MODIFY;
MACRO_STORE STORE_F_MEM_STORE;
MACRO_STORE STORE_F_STORE_ATTR_INFO_GET0_CSTR;
MACRO_STORE STORE_F_STORE_ATTR_INFO_GET0_DN;
MACRO_STORE STORE_F_STORE_ATTR_INFO_GET0_NUMBER;
MACRO_STORE STORE_F_STORE_ATTR_INFO_GET0_SHA1STR;
MACRO_STORE STORE_F_STORE_ATTR_INFO_MODIFY_CSTR;
MACRO_STORE STORE_F_STORE_ATTR_INFO_MODIFY_DN;
MACRO_STORE STORE_F_STORE_ATTR_INFO_MODIFY_NUMBER;
MACRO_STORE STORE_F_STORE_ATTR_INFO_MODIFY_SHA1STR;
MACRO_STORE STORE_F_STORE_ATTR_INFO_SET_CSTR;
MACRO_STORE STORE_F_STORE_ATTR_INFO_SET_DN;
MACRO_STORE STORE_F_STORE_ATTR_INFO_SET_NUMBER;
MACRO_STORE STORE_F_STORE_ATTR_INFO_SET_SHA1STR;
MACRO_STORE STORE_F_STORE_CERTIFICATE;
MACRO_STORE STORE_F_STORE_CTRL;
MACRO_STORE STORE_F_STORE_DELETE_ARBITRARY;
MACRO_STORE STORE_F_STORE_DELETE_CERTIFICATE;
MACRO_STORE STORE_F_STORE_DELETE_CRL;
MACRO_STORE STORE_F_STORE_DELETE_NUMBER;
MACRO_STORE STORE_F_STORE_DELETE_PRIVATE_KEY;
MACRO_STORE STORE_F_STORE_DELETE_PUBLIC_KEY;
MACRO_STORE STORE_F_STORE_GENERATE_CRL;
MACRO_STORE STORE_F_STORE_GENERATE_KEY;
MACRO_STORE STORE_F_STORE_GET_ARBITRARY;
MACRO_STORE STORE_F_STORE_GET_CERTIFICATE;
MACRO_STORE STORE_F_STORE_GET_CRL;
MACRO_STORE STORE_F_STORE_GET_NUMBER;
MACRO_STORE STORE_F_STORE_GET_PRIVATE_KEY;
MACRO_STORE STORE_F_STORE_GET_PUBLIC_KEY;
MACRO_STORE STORE_F_STORE_LIST_CERTIFICATE_END;
MACRO_STORE STORE_F_STORE_LIST_CERTIFICATE_ENDP;
MACRO_STORE STORE_F_STORE_LIST_CERTIFICATE_NEXT;
MACRO_STORE STORE_F_STORE_LIST_CERTIFICATE_START;
MACRO_STORE STORE_F_STORE_LIST_CRL_END;
MACRO_STORE STORE_F_STORE_LIST_CRL_ENDP;
MACRO_STORE STORE_F_STORE_LIST_CRL_NEXT;
MACRO_STORE STORE_F_STORE_LIST_CRL_START;
MACRO_STORE STORE_F_STORE_LIST_PRIVATE_KEY_END;
MACRO_STORE STORE_F_STORE_LIST_PRIVATE_KEY_ENDP;
MACRO_STORE STORE_F_STORE_LIST_PRIVATE_KEY_NEXT;
MACRO_STORE STORE_F_STORE_LIST_PRIVATE_KEY_START;
MACRO_STORE STORE_F_STORE_LIST_PUBLIC_KEY_END;
MACRO_STORE STORE_F_STORE_LIST_PUBLIC_KEY_ENDP;
MACRO_STORE STORE_F_STORE_LIST_PUBLIC_KEY_NEXT;
MACRO_STORE STORE_F_STORE_LIST_PUBLIC_KEY_START;
MACRO_STORE STORE_F_STORE_MODIFY_ARBITRARY;
MACRO_STORE STORE_F_STORE_MODIFY_CERTIFICATE;
MACRO_STORE STORE_F_STORE_MODIFY_CRL;
MACRO_STORE STORE_F_STORE_MODIFY_NUMBER;
MACRO_STORE STORE_F_STORE_MODIFY_PRIVATE_KEY;
MACRO_STORE STORE_F_STORE_MODIFY_PUBLIC_KEY;
MACRO_STORE STORE_F_STORE_NEW_ENGINE;
MACRO_STORE STORE_F_STORE_NEW_METHOD;
MACRO_STORE STORE_F_STORE_PARSE_ATTRS_END;
MACRO_STORE STORE_F_STORE_PARSE_ATTRS_ENDP;
MACRO_STORE STORE_F_STORE_PARSE_ATTRS_NEXT;
MACRO_STORE STORE_F_STORE_PARSE_ATTRS_START;
MACRO_STORE STORE_F_STORE_REVOKE_CERTIFICATE;
MACRO_STORE STORE_F_STORE_REVOKE_PRIVATE_KEY;
MACRO_STORE STORE_F_STORE_REVOKE_PUBLIC_KEY;
MACRO_STORE STORE_F_STORE_STORE_ARBITRARY;
MACRO_STORE STORE_F_STORE_STORE_CERTIFICATE;
MACRO_STORE STORE_F_STORE_STORE_CRL;
MACRO_STORE STORE_F_STORE_STORE_NUMBER;
MACRO_STORE STORE_F_STORE_STORE_PRIVATE_KEY;
MACRO_STORE STORE_F_STORE_STORE_PUBLIC_KEY;
STORE_object_types STORE_OBJECT_TYPE_ARBITRARY;
STORE_object_types STORE_OBJECT_TYPE_NUM;
STORE_object_types STORE_OBJECT_TYPE_NUMBER;
STORE_object_types STORE_OBJECT_TYPE_PRIVATE_KEY;
STORE_object_types STORE_OBJECT_TYPE_PUBLIC_KEY;
STORE_object_types STORE_OBJECT_TYPE_X509_CERTIFICATE;
STORE_object_types STORE_OBJECT_TYPE_X509_CRL;
STORE_params STORE_PARAM_AUTH_KRB5_TICKET;
STORE_params STORE_PARAM_AUTH_PASSPHRASE;
STORE_params STORE_PARAM_BITS;
STORE_params STORE_PARAM_EVP_TYPE;
STORE_params STORE_PARAM_KEY_NO_PARAMETERS;
STORE_params STORE_PARAM_KEY_PARAMETERS;
STORE_params STORE_PARAM_TYPE_NUM;
MACRO_STORE STORE_R_ALREADY_HAS_A_VALUE;
MACRO_STORE STORE_R_FAILED_DELETING_ARBITRARY;
MACRO_STORE STORE_R_FAILED_DELETING_CERTIFICATE;
MACRO_STORE STORE_R_FAILED_DELETING_KEY;
MACRO_STORE STORE_R_FAILED_DELETING_NUMBER;
MACRO_STORE STORE_R_FAILED_GENERATING_CRL;
MACRO_STORE STORE_R_FAILED_GENERATING_KEY;
MACRO_STORE STORE_R_FAILED_GETTING_ARBITRARY;
MACRO_STORE STORE_R_FAILED_GETTING_CERTIFICATE;
MACRO_STORE STORE_R_FAILED_GETTING_KEY;
MACRO_STORE STORE_R_FAILED_GETTING_NUMBER;
MACRO_STORE STORE_R_FAILED_LISTING_CERTIFICATES;
MACRO_STORE STORE_R_FAILED_LISTING_KEYS;
MACRO_STORE STORE_R_FAILED_MODIFYING_ARBITRARY;
MACRO_STORE STORE_R_FAILED_MODIFYING_CERTIFICATE;
MACRO_STORE STORE_R_FAILED_MODIFYING_CRL;
MACRO_STORE STORE_R_FAILED_MODIFYING_NUMBER;
MACRO_STORE STORE_R_FAILED_MODIFYING_PRIVATE_KEY;
MACRO_STORE STORE_R_FAILED_MODIFYING_PUBLIC_KEY;
MACRO_STORE STORE_R_FAILED_REVOKING_CERTIFICATE;
MACRO_STORE STORE_R_FAILED_REVOKING_KEY;
MACRO_STORE STORE_R_FAILED_STORING_ARBITRARY;
MACRO_STORE STORE_R_FAILED_STORING_CERTIFICATE;
MACRO_STORE STORE_R_FAILED_STORING_KEY;
MACRO_STORE STORE_R_FAILED_STORING_NUMBER;
MACRO_STORE STORE_R_NOT_IMPLEMENTED;
MACRO_STORE STORE_R_NO_CONTROL_FUNCTION;
MACRO_STORE STORE_R_NO_DELETE_ARBITRARY_FUNCTION;
MACRO_STORE STORE_R_NO_DELETE_NUMBER_FUNCTION;
MACRO_STORE STORE_R_NO_DELETE_OBJECT_FUNCTION;
MACRO_STORE STORE_R_NO_GENERATE_CRL_FUNCTION;
MACRO_STORE STORE_R_NO_GENERATE_OBJECT_FUNCTION;
MACRO_STORE STORE_R_NO_GET_OBJECT_ARBITRARY_FUNCTION;
MACRO_STORE STORE_R_NO_GET_OBJECT_FUNCTION;
MACRO_STORE STORE_R_NO_GET_OBJECT_NUMBER_FUNCTION;
MACRO_STORE STORE_R_NO_LIST_OBJECT_ENDP_FUNCTION;
MACRO_STORE STORE_R_NO_LIST_OBJECT_END_FUNCTION;
MACRO_STORE STORE_R_NO_LIST_OBJECT_NEXT_FUNCTION;
MACRO_STORE STORE_R_NO_LIST_OBJECT_START_FUNCTION;
MACRO_STORE STORE_R_NO_MODIFY_OBJECT_FUNCTION;
MACRO_STORE STORE_R_NO_REVOKE_OBJECT_FUNCTION;
MACRO_STORE STORE_R_NO_STORE;
MACRO_STORE STORE_R_NO_STORE_OBJECT_ARBITRARY_FUNCTION;
MACRO_STORE STORE_R_NO_STORE_OBJECT_FUNCTION;
MACRO_STORE STORE_R_NO_STORE_OBJECT_NUMBER_FUNCTION;
MACRO_STORE STORE_R_NO_VALUE;
STORE_certificate_status STORE_X509_EXPIRED;
STORE_certificate_status STORE_X509_REVOKED;
STORE_certificate_status STORE_X509_SUSPENDED;
STORE_certificate_status STORE_X509_VALID;
MACRO_STRCOUNT STRCOUNT;
MACRO_STRINGMAX STRINGMAX;
MACRO_STRING STRING_LENGTH;
MACRO_STRU STRU_F;
MACRO_STRU STRU_P;
MACRO_STRU STRU_R;
MACRO_NUMWRITE STRWRITE;
MACRO_ST_NONE ST_NONE;
MACRO_ST_NONE ST_NONVOLATILE;
MACRO_ST ST_NOSUID;
MACRO_ST_NONE ST_OTHER;
MACRO_ST_NONE ST_PERMANENT;
MACRO_ST ST_RDONLY;
MACRO_ST_NONE ST_READONLY;
MACRO_ST_NONE ST_VOLATILE;
MACRO_SUBCMDMASK SUBCMDMASK;
MACRO_SUBCMDSHIFT SUBCMDSHIFT;
MACRO_SUBTREE SUBTREE_ATTACHED;
accept_stat SUCCESS;
MACRO_SUPERPAGE SUPERPAGE_NONE;
MACRO_SUPERPAGE_SIZE SUPERPAGE_SIZE_2MB;
MACRO_SUPERPAGE SUPERPAGE_SIZE_ANY;
MACRO_SUPPLY SUPPLY_INTERVAL;
MACRO_SUPPORT SUPPORT_ACCESSIBILITY_CHECKS;
MACRO_SUPPORT SUPPORT_ASIAN_ENCODINGS;
MACRO_SUPPORT SUPPORT_UTF16_ENCODINGS;
MACRO_SUSP SUSP;
MACRO_SV SV_INTERRUPT;
MACRO_SV SV_NOCLDSTOP;
MACRO_SV SV_NODEFER;
MACRO_SV SV_ONSTACK;
MACRO_SV SV_RESETHAND;
MACRO_SV SV_SIGINFO;
MACRO_SWITCH SWITCH_OPTION_DEPRESS;
MACRO_SWITCH SWITCH_OPTION_NONE;
MACRO_SWITCH SWITCH_OPTION_WAIT;
MACRO_SYMTYPE SYMTYPE;
MACRO_SYNCH SYNCH;
MACRO_SYNC SYNC_POLICY_FIFO;
MACRO_SYNC SYNC_POLICY_FIXED_PRIORITY;
MACRO_SYNC SYNC_POLICY_LIFO;
MACRO_SYNC SYNC_POLICY_MAX;
MACRO_SYNC SYNC_POLICY_ORDER_MASK;
MACRO_SYNC SYNC_POLICY_REVERSED;
MACRO_SYN SYN_TERMCAP;
MACRO_SYN SYN_TERMINFO;
MACRO_SYSPROTO SYSPROTO_CONTROL;
MACRO_SYSPROTO SYSPROTO_EVENT;
MACRO_ONLY SYSTEMDSN_ONLY;
MACRO_CLOCK SYSTEM_CLOCK;
accept_stat SYSTEM_ERR;
MACRO_SYS SYS_ATPgetreq;
MACRO_SYS SYS_ATPgetrsp;
MACRO_SYS SYS_ATPsndreq;
MACRO_SYS SYS_ATPsndrsp;
MACRO_SYS SYS_ATgetmsg;
MACRO_SYS SYS_ATputmsg;
MACRO_SYS SYS_ATsocket;
MACRO_SYS_F SYS_F_ACCEPT;
MACRO_SYS_F SYS_F_BIND;
MACRO_SYS_F SYS_F_CONNECT;
MACRO_SYS_F SYS_F_FOPEN;
MACRO_SYS_F SYS_F_FREAD;
MACRO_SYS_F SYS_F_GETSERVBYNAME;
MACRO_SYS_F SYS_F_IOCTLSOCKET;
MACRO_SYS_F SYS_F_LISTEN;
MACRO_SYS_F SYS_F_OPENDIR;
MACRO_SYS_F SYS_F_SOCKET;
MACRO_SYS_F SYS_F_WSASTARTUP;
MACRO_SYS_IOCTL SYS_IOCTL_H_HAS_SIOCGIFADDR;
MACRO_SYS SYS_MAXSYSCALL;
MACRO_SYS_ORTABLE SYS_ORTABLE_NO_SUCH_REGISTRATION;
MACRO_SYS_ORTABLE SYS_ORTABLE_REGISTERED_OK;
MACRO_SYS_ORTABLE SYS_ORTABLE_REGISTRATION_FAILED;
MACRO_SYS_ORTABLE SYS_ORTABLE_UNREGISTERED_OK;
MACRO_SYS SYS___disable_threadsignal;
MACRO_SYS SYS___mac_execve;
MACRO_SYS SYS___mac_get_fd;
MACRO_SYS SYS___mac_get_file;
MACRO_SYS SYS___mac_get_lcid;
MACRO_SYS SYS___mac_get_lctx;
MACRO_SYS SYS___mac_get_link;
MACRO_SYS SYS___mac_get_mount;
MACRO_SYS SYS___mac_get_pid;
MACRO_SYS SYS___mac_get_proc;
MACRO_SYS SYS___mac_getfsstat;
MACRO_SYS SYS___mac_mount;
MACRO_SYS SYS___mac_set_fd;
MACRO_SYS SYS___mac_set_file;
MACRO_SYS SYS___mac_set_lctx;
MACRO_SYS SYS___mac_set_link;
MACRO_SYS SYS___mac_set_proc;
MACRO_SYS SYS___mac_syscall;
MACRO_SYS SYS___old_semwait_signal;
MACRO_SYS SYS___old_semwait_signal_nocancel;
MACRO_SYS SYS___pthread_canceled;
MACRO_SYS SYS___pthread_chdir;
MACRO_SYS SYS___pthread_fchdir;
MACRO_SYS SYS___pthread_kill;
MACRO_SYS SYS___pthread_markcancel;
MACRO_SYS SYS___pthread_sigmask;
MACRO_SYS SYS___semwait_signal;
MACRO_SYS SYS___semwait_signal_nocancel;
MACRO_SYS SYS___sigwait;
MACRO_SYS SYS___sigwait_nocancel;
MACRO_SYS SYS___sysctl;
MACRO_SYS SYS_accept;
MACRO_SYS SYS_accept_nocancel;
MACRO_SYS SYS_access;
MACRO_SYS SYS_access_extended;
MACRO_SYS SYS_acct;
MACRO_SYS SYS_add_profil;
MACRO_SYS SYS_adjtime;
MACRO_SYS SYS_aio_cancel;
MACRO_SYS SYS_aio_error;
MACRO_SYS SYS_aio_fsync;
MACRO_SYS SYS_aio_read;
MACRO_SYS SYS_aio_return;
MACRO_SYS SYS_aio_suspend;
MACRO_SYS SYS_aio_suspend_nocancel;
MACRO_SYS SYS_aio_write;
MACRO_SYS SYS_audit;
MACRO_SYS SYS_audit_session_join;
MACRO_SYS SYS_audit_session_port;
MACRO_SYS SYS_audit_session_self;
MACRO_SYS SYS_auditctl;
MACRO_SYS SYS_auditon;
MACRO_SYS SYS_bind;
MACRO_SYS SYS_bsdthread_create;
MACRO_SYS SYS_bsdthread_register;
MACRO_SYS SYS_bsdthread_terminate;
MACRO_SYS SYS_chdir;
MACRO_SYS SYS_chflags;
MACRO_SYS SYS_chmod;
MACRO_SYS SYS_chmod_extended;
MACRO_SYS SYS_chown;
MACRO_SYS SYS_chroot;
MACRO_SYS SYS_chud;
MACRO_SYS SYS_close;
MACRO_SYS SYS_close_nocancel;
MACRO_SYS SYS_connect;
MACRO_SYS SYS_connect_nocancel;
MACRO_SYS SYS_copyfile;
MACRO_SYS SYS_csops;
MACRO_SYS SYS_delete;
MACRO_SYS SYS_dup;
MACRO_SYS SYS_dup2;
MACRO_SYS SYS_exchangedata;
MACRO_SYS SYS_execve;
MACRO_SYS SYS_exit;
MACRO_SYS SYS_fchdir;
MACRO_SYS SYS_fchflags;
MACRO_SYS SYS_fchmod;
MACRO_SYS SYS_fchmod_extended;
MACRO_SYS SYS_fchown;
MACRO_SYS SYS_fcntl;
MACRO_SYS SYS_fcntl_nocancel;
MACRO_SYS SYS_fdatasync;
MACRO_SYS SYS_ffsctl;
MACRO_SYS SYS_fgetattrlist;
MACRO_SYS SYS_fgetxattr;
MACRO_SYS SYS_fhopen;
MACRO_SYS SYS_fileport_makefd;
MACRO_SYS SYS_fileport_makeport;
MACRO_SYS SYS_flistxattr;
MACRO_SYS SYS_flock;
MACRO_SYS SYS_fork;
MACRO_SYS SYS_fpathconf;
MACRO_SYS SYS_fremovexattr;
MACRO_SYS SYS_fsctl;
MACRO_SYS SYS_fsetattrlist;
MACRO_SYS SYS_fsetxattr;
MACRO_SYS SYS_fsgetpath;
MACRO_SYS SYS_fstat;
MACRO_SYS SYS_fstat64;
MACRO_SYS SYS_fstat64_extended;
MACRO_SYS SYS_fstat_extended;
MACRO_SYS SYS_fstatfs;
MACRO_SYS SYS_fstatfs64;
MACRO_SYS SYS_fstatv;
MACRO_SYS SYS_fsync;
MACRO_SYS SYS_fsync_nocancel;
MACRO_SYS SYS_ftruncate;
MACRO_SYS SYS_futimes;
MACRO_SYS SYS_getattrlist;
MACRO_SYS SYS_getaudit;
MACRO_SYS SYS_getaudit_addr;
MACRO_SYS SYS_getauid;
MACRO_SYS SYS_getdirentries;
MACRO_SYS SYS_getdirentries64;
MACRO_SYS SYS_getdirentriesattr;
MACRO_SYS SYS_getdtablesize;
MACRO_SYS SYS_getegid;
MACRO_SYS SYS_geteuid;
MACRO_SYS SYS_getfh;
MACRO_SYS SYS_getfsstat;
MACRO_SYS SYS_getfsstat64;
MACRO_SYS SYS_getgid;
MACRO_SYS SYS_getgroups;
MACRO_SYS SYS_gethostuuid;
MACRO_SYS SYS_getitimer;
MACRO_SYS SYS_getlcid;
MACRO_SYS SYS_getlogin;
MACRO_SYS SYS_getpeername;
MACRO_SYS SYS_getpgid;
MACRO_SYS SYS_getpgrp;
MACRO_SYS SYS_getpid;
MACRO_SYS SYS_getppid;
MACRO_SYS SYS_getpriority;
MACRO_SYS SYS_getrlimit;
MACRO_SYS SYS_getrusage;
MACRO_SYS SYS_getsgroups;
MACRO_SYS SYS_getsid;
MACRO_SYS SYS_getsockname;
MACRO_SYS SYS_getsockopt;
MACRO_SYS SYS_gettid;
MACRO_SYS SYS_gettimeofday;
MACRO_SYS SYS_getuid;
MACRO_SYS SYS_getwgroups;
MACRO_SYS SYS_getxattr;
MACRO_SYS SYS_identitysvc;
MACRO_SYS SYS_initgroups;
MACRO_SYS SYS_ioctl;
MACRO_SYS SYS_iopolicysys;
MACRO_SYS SYS_issetugid;
MACRO_SYS SYS_kdebug_trace;
MACRO_SYS SYS_kevent;
MACRO_SYS SYS_kevent64;
MACRO_SYS SYS_kill;
MACRO_SYS SYS_kqueue;
MACRO_SYS SYS_lchown;
MACRO_SYS SYS_link;
MACRO_SYS SYS_lio_listio;
MACRO_SYS SYS_listen;
MACRO_SYS SYS_listxattr;
MACRO_SYS SYS_lseek;
MACRO_SYS SYS_lstat;
MACRO_SYS SYS_lstat64;
MACRO_SYS SYS_lstat64_extended;
MACRO_SYS SYS_lstat_extended;
MACRO_SYS SYS_lstatv;
MACRO_SYS SYS_madvise;
MACRO_SYS SYS_mincore;
MACRO_SYS SYS_minherit;
MACRO_SYS SYS_mkcomplex;
MACRO_SYS SYS_mkdir;
MACRO_SYS SYS_mkdir_extended;
MACRO_SYS SYS_mkfifo;
MACRO_SYS SYS_mkfifo_extended;
MACRO_SYS SYS_mknod;
MACRO_SYS SYS_mlock;
MACRO_SYS SYS_mlockall;
MACRO_SYS SYS_mmap;
MACRO_SYS SYS_modwatch;
MACRO_SYS SYS_mount;
MACRO_SYS SYS_mprotect;
MACRO_SYS SYS_msgctl;
MACRO_SYS SYS_msgget;
MACRO_SYS SYS_msgrcv;
MACRO_SYS SYS_msgrcv_nocancel;
MACRO_SYS SYS_msgsnd;
MACRO_SYS SYS_msgsnd_nocancel;
MACRO_SYS SYS_msgsys;
MACRO_SYS SYS_msync;
MACRO_SYS SYS_msync_nocancel;
MACRO_SYS SYS_munlock;
MACRO_SYS SYS_munlockall;
MACRO_SYS SYS_munmap;
MACRO_SYS SYS_nfsclnt;
MACRO_SYS SYS_nfssvc;
MACRO_SYS SYS_open;
MACRO_SYS SYS_open_extended;
MACRO_SYS SYS_open_nocancel;
MACRO_SYS SYS_pathconf;
MACRO_SYS SYS_pid_hibernate;
MACRO_SYS SYS_pid_resume;
MACRO_SYS SYS_pid_shutdown_sockets;
MACRO_SYS SYS_pid_suspend;
MACRO_SYS SYS_pipe;
MACRO_SYS SYS_poll;
MACRO_SYS SYS_poll_nocancel;
MACRO_SYS SYS_posix_spawn;
MACRO_SYS SYS_pread;
MACRO_SYS SYS_pread_nocancel;
MACRO_SYS SYS_proc_info;
MACRO_SYS SYS_process_policy;
MACRO_SYS SYS_profil;
MACRO_SYS SYS_psynch_cvbroad;
MACRO_SYS SYS_psynch_cvclrprepost;
MACRO_SYS SYS_psynch_cvsignal;
MACRO_SYS SYS_psynch_cvwait;
MACRO_SYS SYS_psynch_mutexdrop;
MACRO_SYS SYS_psynch_mutexwait;
MACRO_SYS SYS_psynch_rw_downgrade;
MACRO_SYS SYS_psynch_rw_longrdlock;
MACRO_SYS SYS_psynch_rw_rdlock;
MACRO_SYS SYS_psynch_rw_unlock;
MACRO_SYS SYS_psynch_rw_unlock2;
MACRO_SYS SYS_psynch_rw_upgrade;
MACRO_SYS SYS_psynch_rw_wrlock;
MACRO_SYS SYS_psynch_rw_yieldwrlock;
MACRO_SYS SYS_ptrace;
MACRO_SYS SYS_pwrite;
MACRO_SYS SYS_pwrite_nocancel;
MACRO_SYS SYS_quotactl;
MACRO_SYS SYS_read;
MACRO_SYS SYS_read_nocancel;
MACRO_SYS SYS_readlink;
MACRO_SYS SYS_readv;
MACRO_SYS SYS_readv_nocancel;
MACRO_SYS SYS_reboot;
MACRO_SYS SYS_recvfrom;
MACRO_SYS SYS_recvfrom_nocancel;
MACRO_SYS SYS_recvmsg;
MACRO_SYS SYS_recvmsg_nocancel;
MACRO_SYS SYS_removexattr;
MACRO_SYS SYS_rename;
MACRO_SYS SYS_revoke;
MACRO_SYS SYS_rmdir;
MACRO_SYS SYS_searchfs;
MACRO_SYS SYS_select;
MACRO_SYS SYS_select_nocancel;
MACRO_SYS SYS_sem_close;
MACRO_SYS SYS_sem_destroy;
MACRO_SYS SYS_sem_getvalue;
MACRO_SYS SYS_sem_init;
MACRO_SYS SYS_sem_open;
MACRO_SYS SYS_sem_post;
MACRO_SYS SYS_sem_trywait;
MACRO_SYS SYS_sem_unlink;
MACRO_SYS SYS_sem_wait;
MACRO_SYS SYS_sem_wait_nocancel;
MACRO_SYS SYS_semctl;
MACRO_SYS SYS_semget;
MACRO_SYS SYS_semop;
MACRO_SYS SYS_semsys;
MACRO_SYS SYS_sendfile;
MACRO_SYS SYS_sendmsg;
MACRO_SYS SYS_sendmsg_nocancel;
MACRO_SYS SYS_sendto;
MACRO_SYS SYS_sendto_nocancel;
MACRO_SYS SYS_setattrlist;
MACRO_SYS SYS_setaudit;
MACRO_SYS SYS_setaudit_addr;
MACRO_SYS SYS_setauid;
MACRO_SYS SYS_setegid;
MACRO_SYS SYS_seteuid;
MACRO_SYS SYS_setgid;
MACRO_SYS SYS_setgroups;
MACRO_SYS SYS_setitimer;
MACRO_SYS SYS_setlcid;
MACRO_SYS SYS_setlogin;
MACRO_SYS SYS_setpgid;
MACRO_SYS SYS_setpriority;
MACRO_SYS SYS_setprivexec;
MACRO_SYS SYS_setregid;
MACRO_SYS SYS_setreuid;
MACRO_SYS SYS_setrlimit;
MACRO_SYS SYS_setsgroups;
MACRO_SYS SYS_setsid;
MACRO_SYS SYS_setsockopt;
MACRO_SYS SYS_settid;
MACRO_SYS SYS_settid_with_pid;
MACRO_SYS SYS_settimeofday;
MACRO_SYS SYS_setuid;
MACRO_SYS SYS_setwgroups;
MACRO_SYS SYS_setxattr;
MACRO_SYS SYS_shared_region_check_np;
MACRO_SYS SYS_shared_region_map_and_slide_np;
MACRO_SYS SYS_shm_open;
MACRO_SYS SYS_shm_unlink;
MACRO_SYS SYS_shmat;
MACRO_SYS SYS_shmctl;
MACRO_SYS SYS_shmdt;
MACRO_SYS SYS_shmget;
MACRO_SYS SYS_shmsys;
MACRO_SYS SYS_shutdown;
MACRO_SYS SYS_sigaction;
MACRO_SYS SYS_sigaltstack;
MACRO_SYS SYS_sigpending;
MACRO_SYS SYS_sigprocmask;
MACRO_SYS SYS_sigreturn;
MACRO_SYS SYS_sigsuspend;
MACRO_SYS SYS_sigsuspend_nocancel;
MACRO_SYS SYS_socket;
MACRO_SYS SYS_socketpair;
MACRO_SYS SYS_stack_snapshot;
MACRO_SYS SYS_stat;
MACRO_SYS SYS_stat64;
MACRO_SYS SYS_stat64_extended;
MACRO_SYS SYS_stat_extended;
MACRO_SYS SYS_statfs;
MACRO_SYS SYS_statfs64;
MACRO_SYS SYS_statv;
MACRO_SYS SYS_swapon;
MACRO_SYS SYS_symlink;
MACRO_SYS SYS_sync;
MACRO_SYS SYS_syscall;
MACRO_SYS SYS_thread_selfid;
MACRO_SYS SYS_truncate;
MACRO_SYS SYS_umask;
MACRO_SYS SYS_umask_extended;
MACRO_SYS SYS_undelete;
MACRO_SYS SYS_unlink;
MACRO_SYS SYS_unmount;
MACRO_SYS SYS_utimes;
MACRO_SYS SYS_vfork;
MACRO_SYS SYS_vm_pressure_monitor;
MACRO_SYS SYS_wait4;
MACRO_SYS SYS_wait4_nocancel;
MACRO_SYS SYS_waitevent;
MACRO_SYS SYS_waitid;
MACRO_SYS SYS_waitid_nocancel;
MACRO_SYS SYS_watchevent;
MACRO_SYS SYS_workq_kernreturn;
MACRO_SYS SYS_workq_open;
MACRO_SYS SYS_write;
MACRO_SYS SYS_write_nocancel;
MACRO_SYS SYS_writev;
MACRO_SYS SYS_writev_nocancel;
MACRO_SZOMB SZOMB;
MACRO_S_REGULAR S_16BYTE_LITERALS;
MACRO_S_REGULAR S_4BYTE_LITERALS;
MACRO_S_REGULAR S_8BYTE_LITERALS;
MACRO_S_ATTR S_ATTR_DEBUG;
MACRO_S_ATTR_SOME S_ATTR_EXT_RELOC;
MACRO_S_ATTR S_ATTR_LIVE_SUPPORT;
MACRO_S_ATTR_SOME S_ATTR_LOC_RELOC;
MACRO_S_ATTR S_ATTR_NO_DEAD_STRIP;
MACRO_S_ATTR S_ATTR_NO_TOC;
MACRO_S_ATTR S_ATTR_PURE_INSTRUCTIONS;
MACRO_S_ATTR S_ATTR_SELF_MODIFYING_CODE;
MACRO_S_ATTR_SOME S_ATTR_SOME_INSTRUCTIONS;
MACRO_S_ATTR S_ATTR_STRIP_STATIC_SYMS;
MACRO_S_BLKSIZE S_BLKSIZE;
MACRO_S_REGULAR S_COALESCED;
MACRO_S_REGULAR S_CSTRING_LITERALS;
MACRO_S_REGULAR S_DTRACE_DOF;
MACRO_S_REGULAR S_GB_ZEROFILL;
MACRO_S S_IEXEC;
MACRO_S S_IFBLK;
MACRO_S S_IFCHR;
MACRO_S S_IFDIR;
MACRO_S S_IFIFO;
MACRO_S S_IFLNK;
MACRO_S S_IFMT;
MACRO_S S_IFREG;
MACRO_S S_IFSOCK;
MACRO_S S_IFWHT;
MACRO_S_REGULAR S_INTERPOSING;
MACRO_S S_IREAD;
MACRO_S S_IRGRP;
MACRO_S S_IROTH;
MACRO_S S_IRUSR;
MACRO_S S_IRWXG;
MACRO_S S_IRWXO;
MACRO_S S_IRWXU;
MACRO_S S_ISGID;
MACRO_S S_ISTXT;
MACRO_S S_ISUID;
MACRO_S S_ISVTX;
MACRO_S S_IWGRP;
MACRO_S S_IWOTH;
MACRO_S S_IWRITE;
MACRO_S S_IWUSR;
MACRO_S S_IXGRP;
MACRO_S S_IXOTH;
MACRO_S S_IXUSR;
MACRO_S_REGULAR S_LAZY_DYLIB_SYMBOL_POINTERS;
MACRO_S_REGULAR S_LAZY_SYMBOL_POINTERS;
MACRO_S_REGULAR S_LITERAL_POINTERS;
MACRO_S_REGULAR S_MOD_INIT_FUNC_POINTERS;
MACRO_S_REGULAR S_MOD_TERM_FUNC_POINTERS;
MACRO_S_REGULAR S_NON_LAZY_SYMBOL_POINTERS;
MACRO_S_REGULAR S_REGULAR;
MACRO_S_REGULAR S_SYMBOL_STUBS;
MACRO_S_REGULAR S_THREAD_LOCAL_INIT_FUNCTION_POINTERS;
MACRO_S_REGULAR S_THREAD_LOCAL_REGULAR;
MACRO_S_REGULAR S_THREAD_LOCAL_VARIABLES;
MACRO_S_REGULAR S_THREAD_LOCAL_VARIABLE_POINTERS;
MACRO_S_REGULAR S_THREAD_LOCAL_ZEROFILL;
MACRO_S_REGULAR S_ZEROFILL;
MACRO_NEWLINE TAB;
MACRO_TAB0 TAB0;
MACRO_TAB0 TAB1;
MACRO_TAB0 TAB2;
MACRO_TAB3 TAB3;
MACRO_OPOST TABDLY;
MACRO_TTYDISC TABLDISC;
MACRO_TABLE TABLE_CONTAINER_KEY_NETSNMP_INDEX;
MACRO_TABLE TABLE_CONTAINER_KEY_VARBIND_INDEX;
MACRO_TABLE TABLE_CONTAINER_KEY_VARBIND_RAW;
MACRO_TALK TALK_VERSION;
MACRO_TANDEM TANDEM;
MACRO_TARGET TARGET_CPU_68K;
MACRO_TARGET TARGET_CPU_ALPHA;
MACRO_TARGET TARGET_CPU_ARM;
MACRO_TARGET TARGET_CPU_MIPS;
MACRO_TARGET TARGET_CPU_PPC;
MACRO_TARGET TARGET_CPU_PPC64;
MACRO_TARGET TARGET_CPU_SPARC;
MACRO_TARGET TARGET_CPU_X86;
MACRO_TARGET TARGET_CPU_X86_64;
MACRO_TARGET TARGET_IPHONE_SIMULATOR;
MACRO_TARGET TARGET_OS_EMBEDDED;
MACRO_TARGET TARGET_OS_IPHONE;
MACRO_TARGET TARGET_OS_MAC;
MACRO_TARGET TARGET_OS_UNIX;
MACRO_TARGET TARGET_OS_WIN32;
MACRO_TARGET TARGET_RT_64_BIT;
MACRO_TARGET TARGET_RT_BIG_ENDIAN;
MACRO_TARGET TARGET_RT_LITTLE_ENDIAN;
MACRO_TARGET TARGET_RT_MAC_CFM;
MACRO_TARGET TARGET_RT_MAC_MACHO;
MACRO_TASK TASK_ABSOLUTETIME_INFO;
MACRO_TASK TASK_ACCESS_PORT;
MACRO_TASK TASK_AFFINITY_TAG_INFO;
MACRO_TASK TASK_AUDIT_TOKEN;
task_role TASK_BACKGROUND_APPLICATION;
MACRO_TASK TASK_BASIC2_INFO_32;
MACRO_TASK TASK_BASIC_INFO;
MACRO_TASK TASK_BASIC_INFO_32;
MACRO_TASK TASK_BASIC_INFO_64;
MACRO_TASK TASK_BOOTSTRAP_PORT;
MACRO_TASK TASK_CATEGORY_POLICY;
task_role TASK_CONTROL_APPLICATION;
task_role TASK_DEFAULT_APPLICATION;
MACRO_TASK TASK_DYLD_ALL_IMAGE_INFO_32;
MACRO_TASK TASK_DYLD_ALL_IMAGE_INFO_64;
MACRO_TASK TASK_DYLD_INFO;
MACRO_TASK TASK_EVENTS_INFO;
MACRO_TASK TASK_EXTMOD_INFO;
task_role TASK_FOREGROUND_APPLICATION;
task_role TASK_GRAPHICS_SERVER;
MACRO_TASK TASK_GSSD_PORT;
MACRO_TASK TASK_HOST_PORT;
MACRO_TASK TASK_INFO_MAX;
MACRO_TASK TASK_KERNELMEMORY_INFO;
MACRO_TASK TASK_KERNEL_PORT;
MACRO_TASK_NULL TASK_NAME_NULL;
MACRO_TASK TASK_NAME_PORT;
task_role TASK_NONUI_APPLICATION;
MACRO_TASK_NULL TASK_NULL;
MACRO_TASK TASK_PAGED_LEDGER_PORT;
MACRO_TASK_PORT TASK_PORT_REGISTER_MAX;
task_role TASK_RENICED;
MACRO_TASK TASK_SCHED_FIFO_INFO;
MACRO_TASK TASK_SCHED_INFO;
MACRO_TASK TASK_SCHED_RR_INFO;
MACRO_TASK TASK_SCHED_TIMESHARE_INFO;
MACRO_TASK TASK_SEATBELT_PORT;
MACRO_TASK TASK_SECURITY_TOKEN;
MACRO_TASK TASK_THREAD_TIMES_INFO;
task_role TASK_THROTTLE_APPLICATION;
task_role TASK_UNSPECIFIED;
MACRO_TASK TASK_WIRED_LEDGER_PORT;
MACRO_ANYP TBDELAY;
MACRO_TCIFLUSH TCIFLUSH;
MACRO_TCIOFF TCIOFF;
MACRO_TCIOFLUSH TCIOFLUSH;
MACRO_TCIOFF TCION;
MACRO_TCIFLUSH TCOFLUSH;
MACRO_TCOOFF TCOOFF;
MACRO_TCOOFF TCOON;
MACRO_TCP6S TCP6S_CLOSED;
MACRO_TCP6S TCP6S_CLOSE_WAIT;
MACRO_TCP6S TCP6S_CLOSING;
MACRO_TCP6S TCP6S_ESTABLISHED;
MACRO_TCP6S TCP6S_FIN_WAIT_1;
MACRO_TCP6S TCP6S_FIN_WAIT_2;
MACRO_TCP6S TCP6S_LAST_ACK;
MACRO_TCP6S TCP6S_LISTEN;
MACRO_TCP6S TCP6S_SYN_RECEIVED;
MACRO_TCP6S TCP6S_SYN_SENT;
MACRO_TCP6S TCP6S_TIME_WAIT;
MACRO_TCP6 TCP6_MSS;
MACRO_TCP6_NSTATES TCP6_NSTATES;
MACRO_TCPCTL TCPCTL_DELACKTIME;
MACRO_TCPCTL TCPCTL_DO_RFC1323;
MACRO_TCPCTL TCPCTL_DO_RFC1644;
MACRO_TCPCTL TCPCTL_KEEPIDLE;
MACRO_TCPCTL TCPCTL_KEEPINIT;
MACRO_TCPCTL TCPCTL_KEEPINTVL;
MACRO_TCPCTL TCPCTL_MAXID;
MACRO_TCPCTL TCPCTL_MSSDFLT;
MACRO_TCPCTL TCPCTL_PCBLIST;
MACRO_TCPCTL TCPCTL_RECVSPACE;
MACRO_TCPCTL TCPCTL_RTTDFLT;
MACRO_TCPCTL TCPCTL_SENDSPACE;
MACRO_TCPCTL TCPCTL_STATS;
MACRO_TCPCTL TCPCTL_V6MSSDFLT;
MACRO_TCPOLEN_CC TCPOLEN_CC;
MACRO_TCPOLEN_CC TCPOLEN_CC_APPA;
MACRO_TCPOLEN TCPOLEN_MAXSEG;
MACRO_SACK TCPOLEN_SACK;
MACRO_SACK_PERMITTED TCPOLEN_SACK_PERMITTED;
MACRO_SIGNATURE TCPOLEN_SIGNATURE;
MACRO_TIMESTAMP TCPOLEN_TIMESTAMP;
MACRO_TCPOLEN_TSTAMP TCPOLEN_TSTAMP_APPA;
MACRO_WINDOW TCPOLEN_WINDOW;
MACRO_TCPOOB TCPOOB_HADDATA;
MACRO_TCPOOB TCPOOB_HAVEDATA;
MACRO_TCPOPT_CC TCPOPT_CC;
MACRO_TCPOPT_CC TCPOPT_CCECHO;
MACRO_TCPOPT_CC TCPOPT_CCNEW;
MACRO_TCPOPT TCPOPT_EOL;
MACRO_TCPOPT TCPOPT_MAXSEG;
MACRO_TCPOPT TCPOPT_NOP;
MACRO_SACK TCPOPT_SACK;
MACRO_TCPOPT_SACK TCPOPT_SACK_HDR;
MACRO_SACK_PERMITTED TCPOPT_SACK_PERMITTED;
MACRO_TCPOPT_SACK TCPOPT_SACK_PERMIT_HDR;
MACRO_SIGNATURE TCPOPT_SIGNATURE;
MACRO_TIMESTAMP TCPOPT_TIMESTAMP;
MACRO_TCPOPT_TSTAMP TCPOPT_TSTAMP_HDR;
MACRO_WINDOW TCPOPT_WINDOW;
MACRO_TCPS TCPS_CLOSED;
MACRO_TCPS TCPS_CLOSE_WAIT;
MACRO_TCPS TCPS_CLOSING;
MACRO_TCPS TCPS_ESTABLISHED;
MACRO_TCPS TCPS_FIN_WAIT_1;
MACRO_TCPS TCPS_FIN_WAIT_2;
MACRO_TCPS TCPS_LAST_ACK;
MACRO_TCPS TCPS_LISTEN;
MACRO_TCPS TCPS_SYN_RECEIVED;
MACRO_TCPS TCPS_SYN_SENT;
MACRO_TCPS TCPS_TIME_WAIT;
MACRO_TCPTV TCPTV_MIN;
MACRO_TCPTV TCPTV_REXMTMAX;
MACRO_TCPT TCPT_2MSL;
MACRO_TCPT TCPT_DELACK;
MACRO_TCPT TCPT_KEEP;
MACRO_TCPT TCPT_MAX;
MACRO_TCPT TCPT_NONE;
MACRO_TCPT TCPT_NTIMERS;
MACRO_TCPT TCPT_NTIMERS_EXT;
MACRO_TCPT TCPT_PERSIST;
MACRO_TCPT TCPT_REXMT;
MACRO_TCP_MAX TCP_CONNECTIONTIMEOUT;
MACRO_TCP_RETRANSHZ TCP_FASTTIMER_QUANTUM;
MACRO_TCP_MAX TCP_KEEPALIVE;
MACRO_TCP_MAX TCP_MAXHLEN;
MACRO_TCP_MAX TCP_MAXSEG;
MACRO_TCP_MAXWIN TCP_MAXWIN;
MACRO_TCP TCP_MAX_SACK;
MACRO_TCP_MAX TCP_MAX_WINSHIFT;
MACRO_TCP TCP_MINMSS;
MACRO_TCP TCP_MINMSSOVERLOAD;
MACRO_TCP TCP_MSS;
MACRO_TCP_MAX TCP_NODELAY;
MACRO_TCP_MAX TCP_NOOPT;
MACRO_TCP_MAX TCP_NOPUSH;
MACRO_TCP_NSTATES TCP_NSTATES;
MACRO_TCP_RETRANSHZ TCP_RETRANSHZ;
MACRO_TCP_RETRANSHZ TCP_RETRANSHZ_TO_USEC;
MACRO_TCP_RXT TCP_RXT_CONNDROPTIME;
MACRO_TCP_RXT TCP_RXT_FINDROP;
MACRO_TCP_RETRANSHZ TCP_SLOWTIMER_QUANTUM;
MACRO_TCP_RETRANSHZ TCP_TIMERHZ;
MACRO_TCSANOW TCSADRAIN;
MACRO_TCSANOW TCSAFLUSH;
MACRO_TCSANOW TCSANOW;
MACRO_TCSANOW TCSASOFT;
MACRO_TDATA TDATA_FLAG_NO_CONTAINER;
MACRO_TDATA TDATA_FLAG_NO_STORE_INDEXES;
MACRO_TELCMD TELCMD_FIRST;
MACRO_TELCMD TELCMD_LAST;
MACRO_TELOPT TELOPT_3270REGIME;
MACRO_TELOPT TELOPT_AUTHENTICATION;
MACRO_TELOPT TELOPT_BINARY;
MACRO_TELOPT TELOPT_BM;
MACRO_TELOPT TELOPT_DET;
MACRO_TELOPT TELOPT_ECHO;
MACRO_TELOPT TELOPT_ENCRYPT;
MACRO_TELOPT TELOPT_EOR;
MACRO_TELOPT TELOPT_EXOPL;
MACRO_TELOPT TELOPT_LFLOW;
MACRO_TELOPT TELOPT_LINEMODE;
MACRO_TELOPT TELOPT_LOGOUT;
MACRO_TELOPT TELOPT_NAMS;
MACRO_TELOPT TELOPT_NAOCRD;
MACRO_TELOPT TELOPT_NAOFFD;
MACRO_TELOPT TELOPT_NAOHTD;
MACRO_TELOPT TELOPT_NAOHTS;
MACRO_TELOPT TELOPT_NAOL;
MACRO_TELOPT TELOPT_NAOLFD;
MACRO_TELOPT TELOPT_NAOP;
MACRO_TELOPT TELOPT_NAOVTD;
MACRO_TELOPT TELOPT_NAOVTS;
MACRO_TELOPT TELOPT_NAWS;
MACRO_TELOPT TELOPT_NEW_ENVIRON;
MACRO_TELOPT TELOPT_OLD_ENVIRON;
MACRO_TELOPT TELOPT_OUTMRK;
MACRO_TELOPT TELOPT_RCP;
MACRO_TELOPT TELOPT_RCTE;
MACRO_TELOPT TELOPT_SGA;
MACRO_TELOPT TELOPT_SNDLOC;
MACRO_TELOPT TELOPT_STATUS;
MACRO_TELOPT TELOPT_SUPDUP;
MACRO_TELOPT TELOPT_SUPDUPOUTPUT;
MACRO_TELOPT TELOPT_TM;
MACRO_TELOPT TELOPT_TSPEED;
MACRO_TELOPT TELOPT_TTYLOC;
MACRO_TELOPT TELOPT_TTYPE;
MACRO_TELOPT TELOPT_TUID;
MACRO_TELOPT TELOPT_X3PAD;
MACRO_TELOPT TELOPT_XASCII;
MACRO_TELOPT TELOPT_XDISPLOC;
MACRO_TELQUAL TELQUAL_INFO;
MACRO_TELQUAL TELQUAL_IS;
MACRO_TELQUAL TELQUAL_NAME;
MACRO_TELQUAL TELQUAL_REPLY;
MACRO_TELQUAL TELQUAL_SEND;
MACRO_TERMIOS TERMIOS;
MACRO_TF TF_ACKNOW;
MACRO_TF TF_DELACK;
MACRO_TF TF_LQ_OVERFLOW;
MACRO_TF TF_MORETOCOME;
MACRO_TF TF_NEEDFIN;
MACRO_TF TF_NEEDSYN;
MACRO_TF TF_NODELAY;
MACRO_TF TF_NOOPT;
MACRO_TF TF_NOPUSH;
MACRO_TF TF_RCVD_CC;
MACRO_TF TF_RCVD_SCALE;
MACRO_TF TF_RCVD_TSTMP;
MACRO_TF TF_REQ_CC;
MACRO_TF TF_REQ_SCALE;
MACRO_TF TF_REQ_TSTMP;
MACRO_TF TF_RXWIN0SENT;
MACRO_TF TF_SACK_PERMIT;
MACRO_TF TF_SENDCCNEW;
MACRO_TF TF_SENTFIN;
MACRO_TF TF_SLOWLINK;
MACRO_TGEXEC TGEXEC;
MACRO_TGREAD TGREAD;
MACRO_TGWRITE TGWRITE;
MACRO_THOUSEP THOUSEP;
MACRO_THREAD_SCHED THREAD_AFFINITY_POLICY;
MACRO_THREAD_SCHED THREAD_AFFINITY_TAG_NULL;
MACRO_THREAD_SCHED THREAD_BACKGROUND_POLICY;
MACRO_THREAD_INFO THREAD_BASIC_INFO;
MACRO_THREAD_SCHED THREAD_EXTENDED_POLICY;
MACRO_THREAD_INFO THREAD_IDENTIFIER_INFO;
MACRO_THREAD_INFO THREAD_INFO_MAX;
MACRO_THREAD_SCHED THREAD_KERNEL_PORT;
MACRO_THREAD_MACHINE THREAD_MACHINE_STATE_MAX;
MACRO_THREAD_NULL THREAD_NULL;
MACRO_THREAD_SCHED THREAD_PRECEDENCE_POLICY;
MACRO_THREAD_SCHED THREAD_SCHED_FIFO_INFO;
MACRO_THREAD_SCHED THREAD_SCHED_RR_INFO;
MACRO_THREAD_SCHED THREAD_SCHED_TIMESHARE_INFO;
MACRO_THREAD_SCHED THREAD_STANDARD_POLICY;
MACRO_THREAD_SCHED THREAD_STANDARD_POLICY_COUNT;
MACRO_THREAD_STATE THREAD_STATE_FLAVOR_LIST;
MACRO_THREAD_STATE THREAD_STATE_FLAVOR_LIST_NEW;
MACRO_STATE_MAX THREAD_STATE_MAX;
MACRO_THREAD THREAD_STATE_NONE;
MACRO_THREAD_SCHED THREAD_TIME_CONSTRAINT_POLICY;
MACRO_THREAD_NULL THR_ACT_NULL;
MACRO_TH_FIN TH_ACK;
MACRO_TH_FIN TH_CWR;
MACRO_TH_FIN TH_ECE;
MACRO_TH_FIN TH_FIN;
MACRO_TH_FIN TH_FLAGS;
MACRO_TH TH_FLAGS_IDLE;
MACRO_TH TH_FLAGS_SWAPPED;
MACRO_TH_FIN TH_PUSH;
MACRO_TH_FIN TH_RST;
MACRO_TH TH_STATE_HALTED;
MACRO_TH TH_STATE_RUNNING;
MACRO_TH TH_STATE_STOPPED;
MACRO_TH TH_STATE_UNINTERRUPTIBLE;
MACRO_TH TH_STATE_WAITING;
MACRO_TH_FIN TH_SYN;
MACRO_TH_FIN TH_URG;
MACRO_TH TH_USAGE_SCALE;
MACRO_TIDY TIDY_APPLE_CHANGES;
MACRO_THREAD_NULL TID_NULL;
MACRO_ALLDELAY TILDE;
MACRO_TIMER TIMER_RATE;
MACRO_TIMETICKS TIMETICKS;
MACRO_TIME_ABSOLUTE TIME_ABSOLUTE;
MACRO_TIME TIME_MICROS_MAX;
MACRO_TIME_ABSOLUTE TIME_RELATIVE;
MACRO_TIME_WITH TIME_WITH_SYS_TIME;
MACRO_TIOCCBRK TIOCCBRK;
MACRO_TIOCCDTR TIOCCDTR;
MACRO_TIOCDRAIN TIOCDRAIN;
MACRO_TIOCDSIMICROCODE TIOCDSIMICROCODE;
MACRO_TIOCEXCL TIOCEXCL;
MACRO_TIOCHPCL TIOCHPCL;
MACRO_TIOCIXOFF TIOCIXOFF;
MACRO_TIOCIXON TIOCIXON;
MACRO_TIOCM TIOCM_CAR;
MACRO_TIOCM TIOCM_CD;
MACRO_TIOCM TIOCM_CTS;
MACRO_TIOCM TIOCM_DSR;
MACRO_TIOCM TIOCM_DTR;
MACRO_TIOCM TIOCM_LE;
MACRO_TIOCM TIOCM_RI;
MACRO_TIOCM TIOCM_RNG;
MACRO_TIOCM TIOCM_RTS;
MACRO_TIOCM TIOCM_SR;
MACRO_TIOCM TIOCM_ST;
MACRO_TIOCNOTTY TIOCNOTTY;
MACRO_TIOCNXCL TIOCNXCL;
MACRO_TIOCPKT TIOCPKT_DATA;
MACRO_TIOCPKT TIOCPKT_DOSTOP;
MACRO_TIOCPKT TIOCPKT_FLUSHREAD;
MACRO_TIOCPKT TIOCPKT_FLUSHWRITE;
MACRO_TIOCPKT TIOCPKT_IOCTL;
MACRO_TIOCPKT TIOCPKT_NOSTOP;
MACRO_TIOCPKT TIOCPKT_START;
MACRO_TIOCPKT TIOCPKT_STOP;
MACRO_TIOCPTYGNAME TIOCPTYGNAME;
MACRO_TIOCPTYGRANT TIOCPTYGRANT;
MACRO_TIOCPTYUNLK TIOCPTYUNLK;
MACRO_TIOCSBRK TIOCSBRK;
MACRO_TIOCSCONS TIOCSCONS;
MACRO_TIOCSCTTY TIOCSCTTY;
MACRO_TIOCSDTR TIOCSDTR;
MACRO_TIOCSIG TIOCSIG;
MACRO_TIOCSTART TIOCSTART;
MACRO_TIOCSTAT TIOCSTAT;
MACRO_TIOCSTOP TIOCSTOP;
MACRO_TKT TKT_FLG_ANONYMOUS;
MACRO_TKT TKT_FLG_FORWARDABLE;
MACRO_TKT TKT_FLG_FORWARDED;
MACRO_TKT TKT_FLG_HW_AUTH;
MACRO_TKT TKT_FLG_INITIAL;
MACRO_TKT TKT_FLG_INVALID;
MACRO_TKT TKT_FLG_MAY_POSTDATE;
MACRO_TKT TKT_FLG_OK_AS_DELEGATE;
MACRO_TKT TKT_FLG_POSTDATED;
MACRO_TKT TKT_FLG_PRE_AUTH;
MACRO_TKT TKT_FLG_PROXIABLE;
MACRO_TKT TKT_FLG_PROXY;
MACRO_TKT TKT_FLG_RENEWABLE;
MACRO_TKT TKT_FLG_TRANSIT_POLICY_CHECKED;
MACRO_TLS1_ALLOW TLS1_AD_ACCESS_DENIED;
MACRO_TLS1_ALLOW TLS1_AD_BAD_CERTIFICATE_HASH_VALUE;
MACRO_TLS1_ALLOW TLS1_AD_BAD_CERTIFICATE_STATUS_RESPONSE;
MACRO_TLS1_ALLOW TLS1_AD_CERTIFICATE_UNOBTAINABLE;
MACRO_TLS1_ALLOW TLS1_AD_DECODE_ERROR;
MACRO_TLS1_ALLOW TLS1_AD_DECRYPTION_FAILED;
MACRO_TLS1_ALLOW TLS1_AD_DECRYPT_ERROR;
MACRO_TLS1_ALLOW TLS1_AD_EXPORT_RESTRICTION;
MACRO_TLS1_ALLOW TLS1_AD_INSUFFICIENT_SECURITY;
MACRO_TLS1_ALLOW TLS1_AD_INTERNAL_ERROR;
MACRO_TLS1_ALLOW TLS1_AD_NO_RENEGOTIATION;
MACRO_TLS1_ALLOW TLS1_AD_PROTOCOL_VERSION;
MACRO_TLS1_ALLOW TLS1_AD_RECORD_OVERFLOW;
MACRO_TLS1_ALLOW TLS1_AD_UNKNOWN_CA;
MACRO_TLS1_ALLOW TLS1_AD_UNKNOWN_PSK_IDENTITY;
MACRO_TLS1_ALLOW TLS1_AD_UNRECOGNIZED_NAME;
MACRO_TLS1_ALLOW TLS1_AD_UNSUPPORTED_EXTENSION;
MACRO_TLS1_ALLOW TLS1_AD_USER_CANCELLED;
MACRO_TLS1_ALLOW TLS1_ALLOW_EXPERIMENTAL_CIPHERSUITES;
MACRO_TLS1_CK TLS1_CK_ADH_WITH_AES_128_SHA;
MACRO_TLS1_CK TLS1_CK_ADH_WITH_AES_256_SHA;
MACRO_TLS1_CK TLS1_CK_ADH_WITH_CAMELLIA_128_CBC_SHA;
MACRO_TLS1_CK TLS1_CK_ADH_WITH_CAMELLIA_256_CBC_SHA;
MACRO_TLS1_CK TLS1_CK_ADH_WITH_SEED_SHA;
MACRO_TLS1_CK TLS1_CK_DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA;
MACRO_TLS1_CK TLS1_CK_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA;
MACRO_TLS1_CK TLS1_CK_DHE_DSS_WITH_AES_128_SHA;
MACRO_TLS1_CK TLS1_CK_DHE_DSS_WITH_AES_256_SHA;
MACRO_TLS1_CK TLS1_CK_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA;
MACRO_TLS1_CK TLS1_CK_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA;
MACRO_TLS1_CK TLS1_CK_DHE_DSS_WITH_RC4_128_SHA;
MACRO_TLS1_CK TLS1_CK_DHE_DSS_WITH_SEED_SHA;
MACRO_TLS1_CK TLS1_CK_DHE_RSA_WITH_AES_128_SHA;
MACRO_TLS1_CK TLS1_CK_DHE_RSA_WITH_AES_256_SHA;
MACRO_TLS1_CK TLS1_CK_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA;
MACRO_TLS1_CK TLS1_CK_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA;
MACRO_TLS1_CK TLS1_CK_DHE_RSA_WITH_SEED_SHA;
MACRO_TLS1_CK TLS1_CK_DH_DSS_WITH_AES_128_SHA;
MACRO_TLS1_CK TLS1_CK_DH_DSS_WITH_AES_256_SHA;
MACRO_TLS1_CK TLS1_CK_DH_DSS_WITH_CAMELLIA_128_CBC_SHA;
MACRO_TLS1_CK TLS1_CK_DH_DSS_WITH_CAMELLIA_256_CBC_SHA;
MACRO_TLS1_CK TLS1_CK_DH_DSS_WITH_SEED_SHA;
MACRO_TLS1_CK TLS1_CK_DH_RSA_WITH_AES_128_SHA;
MACRO_TLS1_CK TLS1_CK_DH_RSA_WITH_AES_256_SHA;
MACRO_TLS1_CK TLS1_CK_DH_RSA_WITH_CAMELLIA_128_CBC_SHA;
MACRO_TLS1_CK TLS1_CK_DH_RSA_WITH_CAMELLIA_256_CBC_SHA;
MACRO_TLS1_CK TLS1_CK_DH_RSA_WITH_SEED_SHA;
MACRO_TLS1_CK TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CBC_SHA;
MACRO_TLS1_CK TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CBC_SHA;
MACRO_TLS1_CK TLS1_CK_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA;
MACRO_TLS1_CK TLS1_CK_ECDHE_ECDSA_WITH_NULL_SHA;
MACRO_TLS1_CK TLS1_CK_ECDHE_ECDSA_WITH_RC4_128_SHA;
MACRO_TLS1_CK TLS1_CK_ECDHE_RSA_WITH_AES_128_CBC_SHA;
MACRO_TLS1_CK TLS1_CK_ECDHE_RSA_WITH_AES_256_CBC_SHA;
MACRO_TLS1_CK TLS1_CK_ECDHE_RSA_WITH_DES_192_CBC3_SHA;
MACRO_TLS1_CK TLS1_CK_ECDHE_RSA_WITH_NULL_SHA;
MACRO_TLS1_CK TLS1_CK_ECDHE_RSA_WITH_RC4_128_SHA;
MACRO_TLS1_CK TLS1_CK_ECDH_ECDSA_WITH_AES_128_CBC_SHA;
MACRO_TLS1_CK TLS1_CK_ECDH_ECDSA_WITH_AES_256_CBC_SHA;
MACRO_TLS1_CK TLS1_CK_ECDH_ECDSA_WITH_DES_192_CBC3_SHA;
MACRO_TLS1_CK TLS1_CK_ECDH_ECDSA_WITH_NULL_SHA;
MACRO_TLS1_CK TLS1_CK_ECDH_ECDSA_WITH_RC4_128_SHA;
MACRO_TLS1_CK TLS1_CK_ECDH_RSA_WITH_AES_128_CBC_SHA;
MACRO_TLS1_CK TLS1_CK_ECDH_RSA_WITH_AES_256_CBC_SHA;
MACRO_TLS1_CK TLS1_CK_ECDH_RSA_WITH_DES_192_CBC3_SHA;
MACRO_TLS1_CK TLS1_CK_ECDH_RSA_WITH_NULL_SHA;
MACRO_TLS1_CK TLS1_CK_ECDH_RSA_WITH_RC4_128_SHA;
MACRO_TLS1_CK TLS1_CK_ECDH_anon_WITH_AES_128_CBC_SHA;
MACRO_TLS1_CK TLS1_CK_ECDH_anon_WITH_AES_256_CBC_SHA;
MACRO_TLS1_CK TLS1_CK_ECDH_anon_WITH_DES_192_CBC3_SHA;
MACRO_TLS1_CK TLS1_CK_ECDH_anon_WITH_NULL_SHA;
MACRO_TLS1_CK TLS1_CK_ECDH_anon_WITH_RC4_128_SHA;
MACRO_TLS1_CK TLS1_CK_RSA_EXPORT1024_WITH_DES_CBC_SHA;
MACRO_TLS1_CK TLS1_CK_RSA_EXPORT1024_WITH_RC2_CBC_56_MD5;
MACRO_TLS1_CK TLS1_CK_RSA_EXPORT1024_WITH_RC4_56_MD5;
MACRO_TLS1_CK TLS1_CK_RSA_EXPORT1024_WITH_RC4_56_SHA;
MACRO_TLS1_CK TLS1_CK_RSA_WITH_AES_128_SHA;
MACRO_TLS1_CK TLS1_CK_RSA_WITH_AES_256_SHA;
MACRO_TLS1_CK TLS1_CK_RSA_WITH_CAMELLIA_128_CBC_SHA;
MACRO_TLS1_CK TLS1_CK_RSA_WITH_CAMELLIA_256_CBC_SHA;
MACRO_TLS1_CK TLS1_CK_RSA_WITH_SEED_SHA;
MACRO_TLS1_FINISH TLS1_FINISH_MAC_LENGTH;
MACRO_TLS1 TLS1_FLAGS_TLS_PADDING_BUG;
MACRO_TLS1_ALLOW TLS1_VERSION;
MACRO_TLS1_ALLOW TLS1_VERSION_MAJOR;
MACRO_TLS1_ALLOW TLS1_VERSION_MINOR;
MACRO_TLSEXT TLSEXT_MAXLEN_host_name;
MACRO_TLSEXT TLSEXT_NAMETYPE_host_name;
MACRO_TLSEXT TLSEXT_STATUSTYPE_ocsp;
MACRO_TLSEXT TLSEXT_TYPE_client_certificate_url;
MACRO_TLSEXT TLSEXT_TYPE_ec_point_formats;
MACRO_TLSEXT TLSEXT_TYPE_elliptic_curves;
MACRO_TLSEXT TLSEXT_TYPE_max_fragment_length;
MACRO_TLSEXT TLSEXT_TYPE_renegotiate;
MACRO_TLSEXT TLSEXT_TYPE_server_name;
MACRO_TLSEXT TLSEXT_TYPE_session_ticket;
MACRO_TLSEXT TLSEXT_TYPE_status_request;
MACRO_TLSEXT TLSEXT_TYPE_truncated_hmac;
MACRO_TLSEXT TLSEXT_TYPE_trusted_ca_keys;
MACRO_TLS TLS_CT_DSS_FIXED_DH;
MACRO_TLS TLS_CT_DSS_SIGN;
MACRO_TLS TLS_CT_ECDSA_FIXED_ECDH;
MACRO_TLS TLS_CT_ECDSA_SIGN;
MACRO_TLS TLS_CT_NUMBER;
MACRO_TLS TLS_CT_RSA_FIXED_DH;
MACRO_TLS TLS_CT_RSA_FIXED_ECDH;
MACRO_TLS TLS_CT_RSA_SIGN;
MACRO_TLS_MD TLS_MD_CLIENT_FINISH_CONST_SIZE;
MACRO_TLS_MD TLS_MD_CLIENT_WRITE_KEY_CONST_SIZE;
MACRO_TLS_MD TLS_MD_IV_BLOCK_CONST_SIZE;
MACRO_TLS_MD TLS_MD_KEY_EXPANSION_CONST_SIZE;
MACRO_TLS_MD TLS_MD_MASTER_SECRET_CONST_SIZE;
MACRO_TLS_MD TLS_MD_MAX_CONST_SIZE;
MACRO_TLS_MD TLS_MD_SERVER_FINISH_CONST_SIZE;
MACRO_TLS_MD TLS_MD_SERVER_WRITE_KEY_CONST_SIZE;
MACRO_TMAGLEN TMAGLEN;
MACRO_TMP TMP_MAX;
MACRO_TM TM_APRIL;
MACRO_TM TM_AUGUST;
MACRO_TM TM_DECEMBER;
MACRO_TM TM_FEBRUARY;
MACRO_TM TM_FRIDAY;
MACRO_TM TM_JANUARY;
MACRO_TM TM_JULY;
MACRO_TM TM_JUNE;
MACRO_TM TM_MARCH;
MACRO_TM TM_MAY;
MACRO_TM TM_MONDAY;
MACRO_TM TM_NOVEMBER;
MACRO_TM TM_OCTOBER;
MACRO_TM TM_SATURDAY;
MACRO_TM TM_SEPTEMBER;
MACRO_TM TM_SUNDAY;
MACRO_TM TM_THURSDAY;
MACRO_TM TM_TUESDAY;
MACRO_TM TM_WEDNESDAY;
MACRO_TM TM_YEAR_BASE;
MACRO_TOEXEC TOEXEC;
MACRO_TOREAD TOREAD;
MACRO_ALLDELAY TOSTOP;
MACRO_TOWRITE TOWRITE;
MACRO_TRACE TRACE_ATTRS;
MACRO_TRACE TRACE_BITS;
MACRO_TRACE TRACE_CALLS;
MACRO_TRACE TRACE_CCALLS;
MACRO_TRACE TRACE_CHARPUT;
MACRO_TRACE TRACE_DATABASE;
MACRO_TRACE TRACE_DISABLE;
MACRO_TRACE TRACE_ICALLS;
MACRO_TRACE TRACE_IEVENT;
MACRO_TRACE TRACE_MAXIMUM;
MACRO_TRACE TRACE_MOVE;
MACRO_TRACE TRACE_ORDINARY;
MACRO_TRACE TRACE_SHIFT;
MACRO_TRACE TRACE_TIMES;
MACRO_TRACE TRACE_TPUTS;
MACRO_TRACE TRACE_UPDATE;
MACRO_TRACE TRACE_VIRTPUT;
MACRO_CONTINUE TRANSIENT;
MACRO_TRAP TRAP_BRKPT;
MACRO_TRAP TRAP_TRACE;
MACRO_TRCSIZ TRCSIZ;
MACRO_REQ_MSG TRP2_REQ_MSG;
MACRO_REQ_MSG TRP_REQ_MSG;
DYLD_BOOL TRUE;
MACRO_TRY TRY_AGAIN;
MACRO_TR TR_BREADHIT;
MACRO_TR TR_BREADHITRA;
MACRO_TR TR_BREADMISS;
MACRO_TR TR_BREADMISSRA;
MACRO_TR TR_BREALLOC;
MACRO_TR TR_BRELSE;
MACRO_TR TR_BWRITE;
MACRO_TR TR_CACHEFOD;
MACRO_TR TR_EINTRANS;
MACRO_TR TR_EWAITMEM;
MACRO_TR TR_EXFOD;
MACRO_TR TR_FRECLAIM;
MACRO_TR TR_INTRANS;
MACRO_TR TR_MALL;
MACRO_TR TR_NFLAGS;
MACRO_TR TR_PGINDONE;
MACRO_TR TR_RECLAIM;
MACRO_TR TR_STAMP;
MACRO_TR TR_SWAPIN;
MACRO_TR TR_SWAPIO;
MACRO_TR TR_VADVISE;
MACRO_TR TR_VRFOD;
MACRO_TR TR_WAITMEM;
MACRO_TR TR_XFODHIT;
MACRO_TR TR_XFODMISS;
MACRO_TR TR_XIFREC;
MACRO_TR TR_XSFREC;
MACRO_TR TR_ZFOD;
MACRO_TSGID TSGID;
MACRO_TSI TSI_S_CLOSED;
MACRO_TSI TSI_S_CLOSING;
MACRO_TSI TSI_S_ESTABLISHED;
MACRO_TSI TSI_S_FIN_WAIT_1;
MACRO_TSI TSI_S_FIN_WAIT_2;
MACRO_TSI TSI_S_LAST_ACK;
MACRO_TSI TSI_S_LISTEN;
MACRO_TSI TSI_S_RESERVED;
MACRO_TSI TSI_S_SYN_RECEIVED;
MACRO_TSI TSI_S_SYN_SENT;
MACRO_TSI TSI_S_TIME_WAIT;
MACRO_TSI TSI_S__CLOSE_WAIT;
MACRO_TSI TSI_T_2MSL;
MACRO_TSI TSI_T_KEEP;
MACRO_TSI TSI_T_NTIMERS;
MACRO_TSI TSI_T_PERSIST;
MACRO_TSI TSI_T_REXMT;
MACRO_TSPTYPENUMBER TSPTYPENUMBER;
MACRO_TSPVERSION TSPVERSION;
MACRO_TSP TSP_ACCEPT;
MACRO_TSP TSP_ACK;
MACRO_TSP TSP_ADJTIME;
MACRO_TSP TSP_ANY;
MACRO_TSP TSP_CONFLICT;
MACRO_TSP TSP_DATE;
MACRO_TSP TSP_DATEACK;
MACRO_TSP TSP_DATEREQ;
MACRO_TSP TSP_ELECTION;
MACRO_TSP TSP_LOOP;
MACRO_TSP TSP_MASTERACK;
MACRO_TSP TSP_MASTERREQ;
MACRO_TSP TSP_MASTERUP;
MACRO_TSP TSP_MSITE;
MACRO_TSP TSP_MSITEREQ;
MACRO_TSP TSP_QUIT;
MACRO_TSP TSP_REFUSE;
MACRO_TSP TSP_RESOLVE;
MACRO_TSP TSP_SETDATE;
MACRO_TSP TSP_SETDATEREQ;
MACRO_TSP TSP_SETTIME;
MACRO_TSP TSP_SLAVEUP;
MACRO_TSP TSP_TEST;
MACRO_TSP TSP_TRACEOFF;
MACRO_TSP TSP_TRACEON;
MACRO_CONTTYPE TSUID;
MACRO_TSVTX TSVTX;
MACRO_TS TS_ASYNC;
MACRO_TS TS_BKSL;
MACRO_TS TS_BUSY;
MACRO_TS TS_CAN_BYPASS_L_RINT;
MACRO_TS TS_CARR_ON;
MACRO_TS TS_CAR_OFLOW;
MACRO_TS TS_CNTTB;
MACRO_TS TS_CONNECTED;
MACRO_TS TS_ERASE;
MACRO_TS TS_FLUSH;
MACRO_TS TS_IOCTL_NOT_OK;
MACRO_TS TS_ISOPEN;
MACRO_TS TS_LNCH;
MACRO_TS TS_LOCAL;
MACRO_TS TS_SNOOP;
MACRO_TS TS_SO_OCOMPLETE;
MACRO_TS TS_SO_OLOWAT;
MACRO_TS TS_TBLOCK;
MACRO_TS TS_TIMEOUT;
MACRO_TS TS_TTSTOP;
MACRO_TS TS_TYPEN;
MACRO_TS TS_XCLUDE;
MACRO_TS TS_ZOMBIE;
MACRO_TTCP TTCP_CLIENT_SND_WND;
MACRO_TTYDEF TTYDEF_CFLAG;
MACRO_TTYDEF TTYDEF_IFLAG;
MACRO_TTYDEF TTYDEF_LFLAG;
MACRO_TTYDEF TTYDEF_OFLAG;
MACRO_TTYDEF TTYDEF_SPEED;
MACRO_TTYDISC TTYDISC;
MACRO_TTY TTY_BI;
MACRO_TTY TTY_CHARMASK;
MACRO_TTY TTY_ERRORMASK;
MACRO_TTY TTY_FE;
MACRO_TTY TTY_OE;
MACRO_TTY_ON TTY_ON;
MACRO_TTY TTY_PE;
MACRO_TTY TTY_QUOTE;
MACRO_TTY_ON TTY_SECURE;
MACRO_NAME_SIZE TTY_SIZE;
MACRO_TUEXEC TUEXEC;
MACRO_TUREAD TUREAD;
MACRO_TUWRITE TUWRITE;
MACRO_TVERSLEN TVERSLEN;
MACRO_TV TV_FALSE;
MACRO_TV TV_TRUE;
MACRO_TYPE TYPE_A;
MACRO_TYPE_OTHER TYPE_AGENTCAP;
MACRO_TYPE_OTHER TYPE_BITSTRING;
MACRO_TYPE_OTHER TYPE_COUNTER;
MACRO_TYPE_OTHER TYPE_COUNTER64;
MACRO_TYPE TYPE_E;
MACRO_TYPE_OTHER TYPE_GAUGE;
MACRO_TYPE TYPE_I;
MACRO_TYPE_OTHER TYPE_INTEGER;
MACRO_TYPE_OTHER TYPE_INTEGER32;
MACRO_TYPE_OTHER TYPE_IPADDR;
MACRO_TYPE TYPE_L;
MACRO_TYPE_OTHER TYPE_MODCOMP;
MACRO_TYPE_OTHER TYPE_MODID;
MACRO_TYPE_OTHER TYPE_NETADDR;
MACRO_TYPE_OTHER TYPE_NOTIFGROUP;
MACRO_TYPE_OTHER TYPE_NOTIFTYPE;
MACRO_TYPE_OTHER TYPE_NSAPADDRESS;
MACRO_TYPE_OTHER TYPE_NULL;
MACRO_TYPE_OTHER TYPE_OBJGROUP;
MACRO_TYPE_OTHER TYPE_OBJID;
MACRO_TYPE_OTHER TYPE_OBJIDENTITY;
MACRO_TYPE_OTHER TYPE_OCTETSTR;
MACRO_TYPE_OTHER TYPE_OPAQUE;
MACRO_TYPE_OTHER TYPE_OTHER;
MACRO_TYPE_OTHER TYPE_SIMPLE_LAST;
MACRO_TYPE_OTHER TYPE_TIMETICKS;
MACRO_TYPE_OTHER TYPE_TRAPTYPE;
MACRO_TYPE_OTHER TYPE_UINTEGER;
MACRO_TYPE_OTHER TYPE_UNSIGNED32;
MACRO_TZ TZ_MAX_CHARS;
MACRO_TZ TZ_MAX_LEAPS;
MACRO_TZ TZ_MAX_TIMES;
MACRO_TZ TZ_MAX_TYPES;
MACRO_T T_FMT;
MACRO_T T_FMT_AMPM;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyAbsolutePathBaseUri;
$8C351220F954B531CED471BF1232BFD8 TidyAccess;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyAccessibilityCheckLevel;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyAltText;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyAsciiChars;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_ABBR;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_ACCEPT;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_ACCEPT_CHARSET;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_ACCESSKEY;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_ACTION;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_ADD_DATE;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_ALIGN;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_ALINK;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_ALT;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_ARCHIVE;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_AXIS;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_BACKGROUND;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_BGCOLOR;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_BGPROPERTIES;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_BORDER;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_BORDERCOLOR;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_BOTTOMMARGIN;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_CELLPADDING;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_CELLSPACING;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_CHAR;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_CHAROFF;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_CHARSET;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_CHECKED;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_CITE;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_CLASS;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_CLASSID;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_CLEAR;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_CODE;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_CODEBASE;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_CODETYPE;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_COLOR;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_COLS;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_COLSPAN;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_COMPACT;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_CONTENT;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_COORDS;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_DATA;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_DATAFLD;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_DATAFORMATAS;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_DATAPAGESIZE;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_DATASRC;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_DATETIME;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_DECLARE;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_DEFER;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_DIR;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_DISABLED;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_ENCODING;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_ENCTYPE;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_EVENT;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_FACE;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_FOR;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_FRAME;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_FRAMEBORDER;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_FRAMESPACING;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_GRIDX;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_GRIDY;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_HEADERS;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_HEIGHT;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_HREF;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_HREFLANG;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_HSPACE;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_HTTP_EQUIV;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_ID;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_ISMAP;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_LABEL;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_LANG;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_LANGUAGE;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_LAST_MODIFIED;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_LAST_VISIT;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_LEFTMARGIN;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_LINK;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_LONGDESC;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_LOWSRC;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_MARGINHEIGHT;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_MARGINWIDTH;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_MAXLENGTH;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_MEDIA;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_METHOD;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_METHODS;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_MULTIPLE;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_N;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_NAME;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_NOHREF;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_NORESIZE;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_NOSHADE;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_NOWRAP;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_OBJECT;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_OnAFTERUPDATE;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_OnBEFOREUNLOAD;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_OnBEFOREUPDATE;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_OnBLUR;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_OnCHANGE;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_OnCLICK;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_OnDATAAVAILABLE;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_OnDATASETCHANGED;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_OnDATASETCOMPLETE;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_OnDBLCLICK;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_OnERRORUPDATE;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_OnFOCUS;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_OnKEYDOWN;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_OnKEYPRESS;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_OnKEYUP;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_OnLOAD;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_OnMOUSEDOWN;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_OnMOUSEMOVE;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_OnMOUSEOUT;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_OnMOUSEOVER;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_OnMOUSEUP;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_OnRESET;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_OnROWENTER;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_OnROWEXIT;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_OnSELECT;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_OnSUBMIT;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_OnUNLOAD;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_PROFILE;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_PROMPT;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_RBSPAN;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_READONLY;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_REL;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_REV;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_RIGHTMARGIN;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_ROWS;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_ROWSPAN;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_RULES;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_SCHEME;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_SCOPE;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_SCROLLING;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_SDAFORM;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_SDAPREF;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_SDASUFF;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_SELECTED;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_SHAPE;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_SHOWGRID;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_SHOWGRIDX;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_SHOWGRIDY;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_SIZE;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_SPAN;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_SRC;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_STANDBY;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_START;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_STYLE;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_SUMMARY;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_TABINDEX;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_TARGET;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_TEXT;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_TITLE;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_TOPMARGIN;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_TYPE;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_UNKNOWN;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_URN;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_USEMAP;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_VALIGN;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_VALUE;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_VALUETYPE;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_VERSION;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_VLINK;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_VSPACE;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_WIDTH;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_WRAP;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_XMLNS;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_XML_LANG;
$7BC844CA13F55C9D2AEAF3513FB7769B TidyAttr_XML_SPACE;
$7B6D6F191C45FE8067F0BF66D1F2D24A TidyAutoState;
$8C351220F954B531CED471BF1232BFD8 TidyBadDocument;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyBlockTags;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyBodyOnly;
$27728F6308F3E4DDCA008ED55D2293B2 TidyBoolean;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyBreakBeforeBR;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyBurstSlides;
$3369F195F3872D92A108D01D54B2E7FC TidyCR;
$3369F195F3872D92A108D01D54B2E7FC TidyCRLF;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyCSSPrefix;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyCharEncoding;
$8C351220F954B531CED471BF1232BFD8 TidyConfig;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyDecorateInferredUL;
$E86A9D4BDF47B8ECB447213BB5AF724B TidyDiagnostics;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyDoctype;
$B8C02EDA4356AFEB3B864A542494BAF4 TidyDoctypeAuto;
$B8C02EDA4356AFEB3B864A542494BAF4 TidyDoctypeLoose;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyDoctypeMode;
$B8C02EDA4356AFEB3B864A542494BAF4 TidyDoctypeOmit;
$B8C02EDA4356AFEB3B864A542494BAF4 TidyDoctypeStrict;
$B8C02EDA4356AFEB3B864A542494BAF4 TidyDoctypeUser;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyDropClassesWithPrefix;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyDropEmptyParas;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyDropFontTags;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyDropIdsWithPrefix;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyDropPropAttrs;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyDuplicateAttrs;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyEmacs;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyEmacsFile;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyEmptyTags;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyEncloseBlockText;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyEncloseBodyText;
$E86A9D4BDF47B8ECB447213BB5AF724B TidyEncoding;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyErrFile;
$8C351220F954B531CED471BF1232BFD8 TidyError;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyEscapeCdata;
$8C351220F954B531CED471BF1232BFD8 TidyFatal;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyFixBackslash;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyFixComments;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyFixUri;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyForceOutput;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyHideComments;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyHideEndTags;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyHtmlOut;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyInCharEncoding;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyIndentAttributes;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyIndentCdata;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyIndentContent;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyIndentSpaces;
$8C351220F954B531CED471BF1232BFD8 TidyInfo;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyInlineTags;
$27728F6308F3E4DDCA008ED55D2293B2 TidyInteger;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyJoinClasses;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyJoinStyles;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyKeepFileTimes;
$A825878F958596565FEE8860DE052352 TidyKeepFirst;
$A825878F958596565FEE8860DE052352 TidyKeepLast;
$3369F195F3872D92A108D01D54B2E7FC TidyLF;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyLanguage;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyLiteralAttribs;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyLogicalEmphasis;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyLowerLiterals;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyMakeBare;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyMakeClean;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyMark;
$E86A9D4BDF47B8ECB447213BB5AF724B TidyMarkup;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyMergeDivs;
$E86A9D4BDF47B8ECB447213BB5AF724B TidyMiscellaneous;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyNCR;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyNewline;
$7B6D6F191C45FE8067F0BF66D1F2D24A TidyNoState;
$215194CEC7B0CB0293C31B12FA375707 TidyNode_Asp;
$215194CEC7B0CB0293C31B12FA375707 TidyNode_CDATA;
$215194CEC7B0CB0293C31B12FA375707 TidyNode_Comment;
$215194CEC7B0CB0293C31B12FA375707 TidyNode_DocType;
$215194CEC7B0CB0293C31B12FA375707 TidyNode_End;
$215194CEC7B0CB0293C31B12FA375707 TidyNode_Jste;
$215194CEC7B0CB0293C31B12FA375707 TidyNode_Php;
$215194CEC7B0CB0293C31B12FA375707 TidyNode_ProcIns;
$215194CEC7B0CB0293C31B12FA375707 TidyNode_Root;
$215194CEC7B0CB0293C31B12FA375707 TidyNode_Section;
$215194CEC7B0CB0293C31B12FA375707 TidyNode_Start;
$215194CEC7B0CB0293C31B12FA375707 TidyNode_StartEnd;
$215194CEC7B0CB0293C31B12FA375707 TidyNode_Text;
$215194CEC7B0CB0293C31B12FA375707 TidyNode_XmlDecl;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyNumEntities;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyOutCharEncoding;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyOutFile;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyOutputBOM;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyPreTags;
$E86A9D4BDF47B8ECB447213BB5AF724B TidyPrettyPrint;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyPunctWrap;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyQuiet;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyQuoteAmpersand;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyQuoteMarks;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyQuoteNbsp;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyRelativePathBaseUri;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyReplaceColor;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidySanitizeAgainstXSS;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyShowErrors;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyShowMarkup;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyShowWarnings;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidySlideStyle;
$27728F6308F3E4DDCA008ED55D2293B2 TidyString;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyTabSize;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_A;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_ABBR;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_ACRONYM;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_ADDRESS;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_ALIGN;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_APPLET;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_AREA;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_B;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_BASE;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_BASEFONT;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_BDO;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_BGSOUND;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_BIG;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_BLINK;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_BLOCKQUOTE;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_BODY;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_BR;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_BUTTON;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_CAPTION;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_CENTER;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_CITE;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_CODE;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_COL;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_COLGROUP;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_COMMENT;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_DD;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_DEL;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_DFN;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_DIR;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_DIV;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_DL;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_DT;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_EM;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_EMBED;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_FIELDSET;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_FONT;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_FORM;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_FRAME;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_FRAMESET;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_H1;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_H2;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_H3;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_H4;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_H5;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_H6;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_HEAD;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_HR;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_HTML;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_I;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_IFRAME;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_ILAYER;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_IMG;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_INPUT;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_INS;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_ISINDEX;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_KBD;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_KEYGEN;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_LABEL;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_LAYER;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_LEGEND;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_LI;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_LINK;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_LISTING;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_MAP;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_MARQUEE;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_MENU;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_META;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_MULTICOL;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_NEXTID;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_NOBR;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_NOEMBED;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_NOFRAMES;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_NOLAYER;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_NOSAVE;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_NOSCRIPT;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_OBJECT;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_OL;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_OPTGROUP;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_OPTION;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_P;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_PARAM;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_PLAINTEXT;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_PRE;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_Q;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_RB;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_RBC;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_RP;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_RT;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_RTC;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_RUBY;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_S;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_SAMP;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_SCRIPT;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_SELECT;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_SERVER;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_SERVLET;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_SMALL;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_SPACER;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_SPAN;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_STRIKE;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_STRONG;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_STYLE;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_SUB;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_SUP;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_TABLE;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_TBODY;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_TD;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_TEXTAREA;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_TFOOT;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_TH;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_THEAD;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_TITLE;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_TR;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_TT;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_U;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_UL;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_UNKNOWN;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_VAR;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_WBR;
$2FDA988FD3B15DF6C5C6EE839763B6D4 TidyTag_XMP;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyUnknownOption;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyUpperCaseAttrs;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyUpperCaseTags;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyVertSpace;
$8C351220F954B531CED471BF1232BFD8 TidyWarning;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyWord2000;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyWrapAsp;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyWrapAttVals;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyWrapJste;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyWrapLen;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyWrapPhp;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyWrapScriptlets;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyWrapSection;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyWriteBack;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyXhtmlOut;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyXmlDecl;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyXmlOut;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyXmlPIs;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyXmlSpace;
$8AF341AFB349B0F3EC8B21B2C315FEF7 TidyXmlTags;
$7B6D6F191C45FE8067F0BF66D1F2D24A TidyYesState;
MACRO_UCD_MSG UCD_MSG_FLAG_ALWAYS_IN_VIEW;
MACRO_UCD_MSG UCD_MSG_FLAG_EXPECT_RESPONSE;
MACRO_UCD_MSG UCD_MSG_FLAG_FORCE_PDU_COPY;
MACRO_UCD_MSG UCD_MSG_FLAG_ONE_PASS_ONLY;
MACRO_UCD_MSG UCD_MSG_FLAG_PDU_TIMEOUT;
MACRO_UCD_MSG UCD_MSG_FLAG_RESPONSE_PDU;
MACRO_UCD_MSG UCD_MSG_FLAG_TUNNELED;
MACRO_UCD_REGISTRY UCD_REGISTRY_OID_MAX_LEN;
MACRO_UCD UCD_SNMP_LIBRARY;
MACRO_UCHAR UCHAR_MAX;
MACRO_UDPCTL UDPCTL_CHECKSUM;
MACRO_UDPCTL UDPCTL_MAXDGRAM;
MACRO_UDPCTL UDPCTL_MAXID;
MACRO_UDPCTL UDPCTL_PCBLIST;
MACRO_UDPCTL UDPCTL_RECVSPACE;
MACRO_UDPCTL UDPCTL_STATS;
MACRO_NULLPROC UDPMSGSIZE;
MACRO_UDP_ADDRESSES UDP_ADDRESSES_IN_HOST_ORDER;
MACRO_UDP UDP_NOCKSUM;
MACRO_UF UF_APPEND;
MACRO_UF UF_COMPRESSED;
MACRO_UF UF_HIDDEN;
MACRO_UF UF_IMMUTABLE;
MACRO_UF UF_NODUMP;
MACRO_UF UF_OPAQUE;
MACRO_UF UF_SETTABLE;
MACRO_UF UF_TRACKED;
MACRO_UID UID_BIN;
MACRO_NAME UID_MAX;
MACRO_UID UID_ROOT;
MACRO_UID UID_UUCP;
MACRO_UINT8 UINT16_MAX;
MACRO_UINT8 UINT32_MAX;
MACRO_UINT8 UINT64_MAX;
MACRO_UINT8 UINT8_MAX;
MACRO_UINTEGER UINTEGER;
MACRO_UINTMAX UINTMAX_MAX;
MACRO_UINTPTR UINTPTR_MAX;
MACRO_UINT_FAST8 UINT_FAST16_MAX;
MACRO_UINT_FAST8 UINT_FAST32_MAX;
MACRO_UINT_FAST8 UINT_FAST64_MAX;
MACRO_UINT_FAST8 UINT_FAST8_MAX;
MACRO_UINT UINT_LEAST16_MAX;
MACRO_UINT UINT_LEAST32_MAX;
MACRO_UINT UINT_LEAST64_MAX;
MACRO_UINT UINT_LEAST8_MAX;
MACRO_UINT_MAX UINT_MAX;
uio_rw UIO_READ;
uio_rw UIO_WRITE;
UI_string_types UIT_BOOLEAN;
UI_string_types UIT_ERROR;
UI_string_types UIT_INFO;
UI_string_types UIT_NONE;
UI_string_types UIT_PROMPT;
UI_string_types UIT_VERIFY;
MACRO_UI UI_CTRL_IS_REDOABLE;
MACRO_UI UI_CTRL_PRINT_ERRORS;
MACRO_UI UI_F_GENERAL_ALLOCATE_BOOLEAN;
MACRO_UI UI_F_GENERAL_ALLOCATE_PROMPT;
MACRO_UI UI_F_GENERAL_ALLOCATE_STRING;
MACRO_UI UI_F_UI_CTRL;
MACRO_UI UI_F_UI_DUP_ERROR_STRING;
MACRO_UI UI_F_UI_DUP_INFO_STRING;
MACRO_UI UI_F_UI_DUP_INPUT_BOOLEAN;
MACRO_UI UI_F_UI_DUP_INPUT_STRING;
MACRO_UI UI_F_UI_DUP_VERIFY_STRING;
MACRO_UI UI_F_UI_GET0_RESULT;
MACRO_UI UI_F_UI_NEW_METHOD;
MACRO_UI UI_F_UI_SET_RESULT;
MACRO_UI UI_INPUT_FLAG_DEFAULT_PWD;
MACRO_UI UI_INPUT_FLAG_ECHO;
MACRO_UI UI_INPUT_FLAG_USER_BASE;
MACRO_UI UI_R_COMMON_OK_AND_CANCEL_CHARACTERS;
MACRO_UI UI_R_INDEX_TOO_LARGE;
MACRO_UI UI_R_INDEX_TOO_SMALL;
MACRO_UI UI_R_NO_RESULT_BUFFER;
MACRO_UI UI_R_RESULT_TOO_LARGE;
MACRO_UI UI_R_RESULT_TOO_SMALL;
MACRO_UI UI_R_UNKNOWN_CONTROL_COMMAND;
MACRO_ULLONG ULLONG_MAX;
MACRO_ULONG ULONG_MAX;
MACRO_UL UL_GETFSIZE;
MACRO_UL UL_SETFSIZE;
MACRO_UNDEF UNDEF;
MACRO_UNDEFINED UNDEFINED_DEFAULT_NS;
MACRO_UNDO UNDO;
MACRO_THREAD_NULL UND_SERVER_NULL;
MACRO_UNKNOWNGID UNKNOWNGID;
MACRO_UNKNOWNPERMISSIONS UNKNOWNPERMISSIONS;
MACRO_UNKNOWNUID UNKNOWNUID;
MACRO_UNKNOWN UNKNOWN_REQUEST;
MACRO_UNSIGNED UNSIGNED;
MACRO_UNVIS UNVIS_END;
MACRO_UNVIS UNVIS_ERROR;
MACRO_UNVIS UNVIS_NOCHAR;
MACRO_UNVIS UNVIS_SYNBAD;
MACRO_UNVIS UNVIS_VALID;
MACRO_UNVIS UNVIS_VALIDPUSH;
$33C9AC843D06A38A38E08EEC860A8350 UNW_EBADFRAME;
$33C9AC843D06A38A38E08EEC860A8350 UNW_EBADREG;
$33C9AC843D06A38A38E08EEC860A8350 UNW_EBADVERSION;
$33C9AC843D06A38A38E08EEC860A8350 UNW_EINVAL;
$33C9AC843D06A38A38E08EEC860A8350 UNW_EINVALIDIP;
$33C9AC843D06A38A38E08EEC860A8350 UNW_ENOINFO;
$33C9AC843D06A38A38E08EEC860A8350 UNW_ENOMEM;
$33C9AC843D06A38A38E08EEC860A8350 UNW_EREADONLYREG;
$33C9AC843D06A38A38E08EEC860A8350 UNW_ESTOPUNWIND;
$33C9AC843D06A38A38E08EEC860A8350 UNW_ESUCCESS;
$33C9AC843D06A38A38E08EEC860A8350 UNW_EUNSPEC;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_AP;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_CR0;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_CR1;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_CR2;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_CR3;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_CR4;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_CR5;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_CR6;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_CR7;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_CTR;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_F0;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_F1;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_F10;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_F11;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_F12;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_F13;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_F14;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_F15;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_F16;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_F17;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_F18;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_F19;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_F2;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_F20;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_F21;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_F22;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_F23;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_F24;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_F25;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_F26;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_F27;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_F28;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_F29;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_F3;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_F30;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_F31;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_F4;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_F5;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_F6;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_F7;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_F8;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_F9;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_LR;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_MQ;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_R0;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_R1;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_R10;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_R11;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_R12;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_R13;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_R14;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_R15;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_R16;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_R17;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_R18;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_R19;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_R2;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_R20;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_R21;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_R22;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_R23;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_R24;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_R25;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_R26;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_R27;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_R28;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_R29;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_R3;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_R30;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_R31;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_R4;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_R5;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_R6;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_R7;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_R8;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_R9;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_SPEFSCR;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_SPE_ACC;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_V0;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_V1;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_V10;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_V11;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_V12;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_V13;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_V14;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_V15;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_V16;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_V17;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_V18;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_V19;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_V2;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_V20;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_V21;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_V22;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_V23;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_V24;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_V25;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_V26;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_V27;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_V28;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_V29;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_V3;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_V30;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_V31;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_V4;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_V5;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_V6;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_V7;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_V8;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_V9;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_VRSAVE;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_VSCR;
$8E022E9E7FCF037C3464A135AB33BF4A UNW_PPC_XER;
$05FFD975A3AE67166A60CC6030479BAB UNW_REG_IP;
$05FFD975A3AE67166A60CC6030479BAB UNW_REG_SP;
$8D9F9A8BB1D8AD61C3ACB6F7B056472F UNW_X86_64_R10;
$8D9F9A8BB1D8AD61C3ACB6F7B056472F UNW_X86_64_R11;
$8D9F9A8BB1D8AD61C3ACB6F7B056472F UNW_X86_64_R12;
$8D9F9A8BB1D8AD61C3ACB6F7B056472F UNW_X86_64_R13;
$8D9F9A8BB1D8AD61C3ACB6F7B056472F UNW_X86_64_R14;
$8D9F9A8BB1D8AD61C3ACB6F7B056472F UNW_X86_64_R15;
$8D9F9A8BB1D8AD61C3ACB6F7B056472F UNW_X86_64_R8;
$8D9F9A8BB1D8AD61C3ACB6F7B056472F UNW_X86_64_R9;
$8D9F9A8BB1D8AD61C3ACB6F7B056472F UNW_X86_64_RAX;
$8D9F9A8BB1D8AD61C3ACB6F7B056472F UNW_X86_64_RBP;
$8D9F9A8BB1D8AD61C3ACB6F7B056472F UNW_X86_64_RBX;
$8D9F9A8BB1D8AD61C3ACB6F7B056472F UNW_X86_64_RCX;
$8D9F9A8BB1D8AD61C3ACB6F7B056472F UNW_X86_64_RDI;
$8D9F9A8BB1D8AD61C3ACB6F7B056472F UNW_X86_64_RDX;
$8D9F9A8BB1D8AD61C3ACB6F7B056472F UNW_X86_64_RSI;
$8D9F9A8BB1D8AD61C3ACB6F7B056472F UNW_X86_64_RSP;
$CF0840319031D014E124B84294A5BA84 UNW_X86_EAX;
$CF0840319031D014E124B84294A5BA84 UNW_X86_EBP;
$CF0840319031D014E124B84294A5BA84 UNW_X86_EBX;
$CF0840319031D014E124B84294A5BA84 UNW_X86_ECX;
$CF0840319031D014E124B84294A5BA84 UNW_X86_EDI;
$CF0840319031D014E124B84294A5BA84 UNW_X86_EDX;
$CF0840319031D014E124B84294A5BA84 UNW_X86_ESI;
$CF0840319031D014E124B84294A5BA84 UNW_X86_ESP;
MACRO_VM_MAP UPL_NULL;
MACRO_USEC USEC_PER_SEC;
MACRO_ONLY USERDSN_ONLY;
MACRO_USER USER_ADDR_NULL;
MACRO_USER_CS USER_BC_BASE_MAX;
MACRO_USER_CS USER_BC_DIM_MAX;
MACRO_USER_CS USER_BC_SCALE_MAX;
MACRO_USER_CS USER_BC_STRING_MAX;
MACRO_USER_CODE USER_CODE_SELECTOR;
MACRO_USER_CS USER_COLL_WEIGHTS_MAX;
MACRO_USER_CS USER_CS_PATH;
MACRO_USER_CODE USER_DATA_SELECTOR;
MACRO_USER_CS USER_EXPR_NEST_MAX;
MACRO_USER_CS USER_LINE_MAX;
MACRO_USER_CS USER_MAXID;
MACRO_USER_CS USER_POSIX2_CHAR_TERM;
MACRO_USER_CS USER_POSIX2_C_BIND;
MACRO_USER_CS USER_POSIX2_C_DEV;
MACRO_USER_CS USER_POSIX2_FORT_DEV;
MACRO_USER_CS USER_POSIX2_FORT_RUN;
MACRO_USER_CS USER_POSIX2_LOCALEDEF;
MACRO_USER_CS USER_POSIX2_SW_DEV;
MACRO_USER_CS USER_POSIX2_UPE;
MACRO_USER_CS USER_POSIX2_VERSION;
MACRO_PRIV USER_PRIV;
MACRO_PROCESS USER_PROCESS;
MACRO_USER_CS USER_RE_DUP_MAX;
MACRO_USER_CS USER_STREAM_MAX;
MACRO_USER_CS USER_TZNAME_MAX;
MACRO_USE USE_MACH_HOST_STATISTICS;
MACRO_USHRT USHRT_MAX;
MACRO_USING USING_AGENTX_AGENTX_CONFIG_MODULE;
MACRO_USING USING_AGENTX_CLIENT_MODULE;
MACRO_USING USING_AGENTX_MASTER_ADMIN_MODULE;
MACRO_USING USING_AGENTX_MASTER_MODULE;
MACRO_USING_HOST USING_AGENTX_MODULE;
MACRO_USING USING_AGENTX_PROTOCOL_MODULE;
MACRO_USING USING_AGENTX_SUBAGENT_MODULE;
MACRO_USING_HOST USING_AGENT_EXTEND_MODULE;
MACRO_USING_HOST USING_AGENT_MIBS_MODULE;
MACRO_USING_HOST USING_AGENT_NSCACHE_MODULE;
MACRO_USING_HOST USING_AGENT_NSDEBUG_MODULE;
MACRO_USING_HOST USING_AGENT_NSLOGGING_MODULE;
MACRO_USING_HOST USING_AGENT_NSMODULETABLE_MODULE;
MACRO_USING_HOST USING_AGENT_NSTRANSACTIONTABLE_MODULE;
MACRO_USING_HOST USING_AGENT_NSVACMACCESSTABLE_MODULE;
MACRO_USING_HOST USING_DEFAULT_MODULES_MODULE;
MACRO_USING_HOST USING_DISMAN_EVENT_MODULE;
MACRO_USING_HOST USING_DISMAN_EVENT_MTEEVENTCONF_MODULE;
MACRO_USING_HOST USING_DISMAN_EVENT_MTEEVENTNOTIFICATIONTABLE_MODULE;
MACRO_USING_HOST USING_DISMAN_EVENT_MTEEVENTSETTABLE_MODULE;
MACRO_USING_HOST USING_DISMAN_EVENT_MTEEVENTTABLE_MODULE;
MACRO_USING_HOST USING_DISMAN_EVENT_MTEEVENT_MODULE;
MACRO_USING_HOST USING_DISMAN_EVENT_MTEOBJECTSCONF_MODULE;
MACRO_USING_HOST USING_DISMAN_EVENT_MTEOBJECTSTABLE_MODULE;
MACRO_USING_HOST USING_DISMAN_EVENT_MTEOBJECTS_MODULE;
MACRO_USING_HOST USING_DISMAN_EVENT_MTESCALARS_MODULE;
MACRO_USING_HOST USING_DISMAN_EVENT_MTETRIGGERBOOLEANTABLE_MODULE;
MACRO_USING_HOST USING_DISMAN_EVENT_MTETRIGGERCONF_MODULE;
MACRO_USING_HOST USING_DISMAN_EVENT_MTETRIGGERDELTATABLE_MODULE;
MACRO_USING_HOST USING_DISMAN_EVENT_MTETRIGGEREXISTENCETABLE_MODULE;
MACRO_USING_HOST USING_DISMAN_EVENT_MTETRIGGERTABLE_MODULE;
MACRO_USING_HOST USING_DISMAN_EVENT_MTETRIGGERTHRESHOLDTABLE_MODULE;
MACRO_USING_HOST USING_DISMAN_EVENT_MTETRIGGER_MODULE;
MACRO_USING_HOST USING_DISMAN_SCHEDULE_MODULE;
MACRO_USING_HOST USING_DISMAN_SCHEDULE_SCHEDCONF_MODULE;
MACRO_USING_HOST USING_DISMAN_SCHEDULE_SCHEDCORE_MODULE;
MACRO_USING_HOST USING_DISMAN_SCHEDULE_SCHEDTABLE_MODULE;
MACRO_USING_HOST USING_HARDWARE_CPU_CPU_MACH_MODULE;
MACRO_USING_HOST USING_HARDWARE_CPU_CPU_MODULE;
MACRO_USING_HOST USING_HARDWARE_CPU_MODULE;
MACRO_USING_HOST USING_HARDWARE_MEMORY_HW_MEM_MODULE;
MACRO_USING_HOST USING_HARDWARE_MEMORY_MEMORY_NULL_MODULE;
MACRO_USING_HOST USING_HARDWARE_MEMORY_MODULE;
MACRO_USING_HOST USING_HEADER_COMPLEX_MODULE;
MACRO_USING_HOST USING_HOST_DATA_ACCESS_SWINST_DARWIN_MODULE;
MACRO_USING_HOST USING_HOST_DATA_ACCESS_SWINST_MODULE;
MACRO_USING_HOST USING_HOST_DATA_ACCESS_SWRUN_DARWIN_MODULE;
MACRO_USING_HOST USING_HOST_DATA_ACCESS_SWRUN_MODULE;
MACRO_USING_HOST USING_HOST_HRSWINSTALLEDTABLE_MODULE;
MACRO_USING_HOST USING_HOST_HRSWRUNPERFTABLE_MODULE;
MACRO_USING_HOST USING_HOST_HRSWRUNTABLE_MODULE;
MACRO_USING_HOST USING_HOST_HR_DEVICE_MODULE;
MACRO_USING_HOST USING_HOST_HR_DISK_MODULE;
MACRO_USING_HOST USING_HOST_HR_FILESYS_MODULE;
MACRO_USING_HOST USING_HOST_HR_NETWORK_MODULE;
MACRO_USING_HOST USING_HOST_HR_OTHER_MODULE;
MACRO_USING_HOST USING_HOST_HR_PARTITION_MODULE;
MACRO_USING_HOST USING_HOST_HR_PRINT_MODULE;
MACRO_USING_HOST USING_HOST_HR_PROC_MODULE;
MACRO_USING_HOST USING_HOST_HR_STORAGE_MODULE;
MACRO_USING_HOST USING_HOST_HR_SYSTEM_MODULE;
MACRO_USING_HOST USING_HOST_MODULE;
MACRO_USING_HOST USING_IF_MIB_DATA_ACCESS_INTERFACE_MODULE;
MACRO_USING_HOST USING_IF_MIB_DATA_ACCESS_INTERFACE_SYSCTL_MODULE;
MACRO_USING_HOST USING_IF_MIB_IFTABLE_IFTABLE_DATA_ACCESS_MODULE;
MACRO_USING_HOST USING_IF_MIB_IFTABLE_IFTABLE_INTERFACE_MODULE;
MACRO_USING_HOST USING_IF_MIB_IFTABLE_IFTABLE_MODULE;
MACRO_USING_HOST USING_IF_MIB_IFTABLE_MODULE;
MACRO_USING_HOST USING_IF_MIB_IFXTABLE_IFXTABLE_DATA_ACCESS_MODULE;
MACRO_USING_HOST USING_IF_MIB_IFXTABLE_IFXTABLE_INTERFACE_MODULE;
MACRO_USING_HOST USING_IF_MIB_IFXTABLE_IFXTABLE_MODULE;
MACRO_USING_HOST USING_IF_MIB_IFXTABLE_MODULE;
MACRO_USING_HOST USING_IF_MIB_MODULE;
MACRO_USING_HOST USING_MIBII_AT_MODULE;
MACRO_USING_HOST USING_MIBII_ICMP_MODULE;
MACRO_USING_HOST USING_MIBII_IFTABLE_MODULE;
MACRO_USING_HOST USING_MIBII_IPADDR_MODULE;
MACRO_USING_HOST USING_MIBII_IP_MODULE;
MACRO_USING_HOST USING_MIBII_MODULE;
MACRO_USING_HOST USING_MIBII_ROUTE_WRITE_MODULE;
MACRO_USING_HOST USING_MIBII_SETSERIALNO_MODULE;
MACRO_USING_HOST USING_MIBII_SNMP_MIB_5_5_MODULE;
MACRO_USING_HOST USING_MIBII_SYSORTABLE_MODULE;
MACRO_USING_HOST USING_MIBII_SYSTEM_MIB_MODULE;
MACRO_USING_HOST USING_MIBII_TCPTABLE_MODULE;
MACRO_USING_HOST USING_MIBII_TCP_MODULE;
MACRO_USING_HOST USING_MIBII_UDPTABLE_MODULE;
MACRO_USING_HOST USING_MIBII_UDP_MODULE;
MACRO_USING_HOST USING_MIBII_UPDATES_MODULE;
MACRO_USING USING_MIBII_VACM_CONF_MODULE;
MACRO_USING_HOST USING_MIBII_VACM_CONTEXT_MODULE;
MACRO_USING_HOST USING_MIBII_VACM_VARS_MODULE;
MACRO_USING_HOST USING_MIBII_VAR_ROUTE_MODULE;
MACRO_USING_HOST USING_NOTIFICATION_LOG_MIB_MODULE;
MACRO_USING_HOST USING_NOTIFICATION_LOG_MIB_NOTIFICATION_LOG_MODULE;
MACRO_USING_HOST USING_NOTIFICATION_MODULE;
MACRO_USING_HOST USING_NOTIFICATION_SNMPNOTIFYFILTERPROFILETABLE_MODULE;
MACRO_USING_HOST USING_NOTIFICATION_SNMPNOTIFYTABLE_MODULE;
MACRO_USING_HOST USING_SNMPV3MIBS_MODULE;
MACRO_USING_HOST USING_SNMPV3_SNMPENGINE_MODULE;
MACRO_USING_HOST USING_SNMPV3_SNMPMPDSTATS_5_5_MODULE;
MACRO_USING USING_SNMPV3_USMCONF_MODULE;
MACRO_USING_HOST USING_SNMPV3_USMSTATS_5_5_MODULE;
MACRO_USING_HOST USING_SNMPV3_USMUSER_MODULE;
MACRO_USING_HOST USING_SNMP_NOTIFICATION_MIB_SNMPNOTIFYFILTERTABLE_MODULE;
MACRO_USING_HOST USING_SNMP_NOTIFICATION_MIB_SNMPNOTIFYFILTERTABLE_SNMPNOTIFYFILTERTABLE_DATA_ACCESS_MODULE;
MACRO_USING_HOST USING_SNMP_NOTIFICATION_MIB_SNMPNOTIFYFILTERTABLE_SNMPNOTIFYFILTERTABLE_INTERFACE_MODULE;
MACRO_USING_HOST USING_SNMP_NOTIFICATION_MIB_SNMPNOTIFYFILTERTABLE_SNMPNOTIFYFILTERTABLE_MODULE;
MACRO_USING_HOST USING_TARGET_MODULE;
MACRO_USING_HOST USING_TARGET_SNMPTARGETADDRENTRY_MODULE;
MACRO_USING_HOST USING_TARGET_SNMPTARGETPARAMSENTRY_MODULE;
MACRO_USING_HOST USING_TARGET_TARGET_COUNTERS_5_5_MODULE;
MACRO_USING_HOST USING_TARGET_TARGET_MODULE;
MACRO_USING_HOST USING_UCD_SNMP_DISKIO_MODULE;
MACRO_USING_HOST USING_UCD_SNMP_DISK_MODULE;
MACRO_USING_HOST USING_UCD_SNMP_DLMOD_MODULE;
MACRO_USING_HOST USING_UCD_SNMP_ERRORMIB_MODULE;
MACRO_USING_HOST USING_UCD_SNMP_FILE_MODULE;
MACRO_USING_HOST USING_UCD_SNMP_LOADAVE_MODULE;
MACRO_USING_HOST USING_UCD_SNMP_LOGMATCH_MODULE;
MACRO_USING_HOST USING_UCD_SNMP_MEMORY_MODULE;
MACRO_USING_HOST USING_UCD_SNMP_MODULE;
MACRO_USING_HOST USING_UCD_SNMP_PASS_MODULE;
MACRO_USING_HOST USING_UCD_SNMP_PASS_PERSIST_MODULE;
MACRO_USING_HOST USING_UCD_SNMP_PROC_MODULE;
MACRO_USING_HOST USING_UCD_SNMP_PROXY_MODULE;
MACRO_USING_HOST USING_UCD_SNMP_VERSIONINFO_MODULE;
MACRO_USING_HOST USING_UCD_SNMP_VMSTAT_MODULE;
MACRO_USING USING_UTILITIES_EXECUTE_MODULE;
MACRO_USING USING_UTILITIES_IQUERY_MODULE;
MACRO_USING_HOST USING_UTILITIES_MODULE;
MACRO_USING_HOST USING_UTILITIES_OVERRIDE_MODULE;
MACRO_USING_HOST USING_UTIL_FUNCS_EXIT_MODULE;
MACRO_USING_HOST USING_UTIL_FUNCS_HEADER_GENERIC_MODULE;
MACRO_USING_HOST USING_UTIL_FUNCS_HEADER_SIMPLE_TABLE_MODULE;
MACRO_USING_HOST USING_UTIL_FUNCS_MODULE;
MACRO_USING_HOST USING_UTIL_FUNCS_RESTART_MODULE;
MACRO_USM_MAX USM_AES_SALT_LENGTH;
MACRO_USM USM_AUTH_KU_LEN;
MACRO_USM_MAX USM_AUTH_PROTO_MD5_LEN;
MACRO_USM_MAX USM_AUTH_PROTO_NOAUTH_LEN;
MACRO_USM_MAX USM_AUTH_PROTO_SHA_LEN;
MACRO_USM_MAX USM_DES_SALT_LENGTH;
MACRO_USM_LENGTH_EXPANDED USM_LENGTH_EXPANDED_PASSPHRASE;
MACRO_USM_LENGTH_EXPANDED USM_LENGTH_KU_HASHBLOCK;
MACRO_USM_LENGTH USM_LENGTH_OID_TRANSFORM;
MACRO_USM_LENGTH_EXPANDED USM_LENGTH_P_MIN;
MACRO_USM_MAX USM_MAX_AUTHSIZE;
MACRO_USM_MAX USM_MAX_ID_LENGTH;
MACRO_USM_MAX USM_MAX_KEYEDHASH_LENGTH;
MACRO_USM_MAX USM_MAX_SALT_LENGTH;
MACRO_USM_MAX USM_MD5_AND_SHA_AUTH_LEN;
MACRO_USM USM_PRIV_KU_LEN;
MACRO_USM_MAX USM_PRIV_PROTO_AES128_LEN;
MACRO_USM_MAX USM_PRIV_PROTO_AES_LEN;
MACRO_USM_MAX USM_PRIV_PROTO_DES_LEN;
MACRO_USM_MAX USM_PRIV_PROTO_NOPRIV_LEN;
MACRO_USM_MAX USM_SEC_MODEL_NUMBER;
MACRO_USM_MAX USM_TIME_WINDOW;
MACRO_USRQUOTA USRQUOTA;
MACRO_USRSTACK USRSTACK;
MACRO_USRSTACK64 USRSTACK64;
MACRO_UTIME UTIME_NEEDS_CLOSED_FILE;
MACRO_UTMPX UTMPX_AUTOFILL_MASK;
MACRO_UTMPX UTMPX_DEAD_IF_CORRESPONDING_MASK;
MACRO_UT UT_HOSTSIZE;
MACRO_UT UT_LINESIZE;
MACRO_UT UT_NAMESIZE;
MACRO_VACMSTRINGLEN VACMSTRINGLEN;
MACRO_VACMVIEWSPINLOCK VACMVIEWSPINLOCK;
MACRO_VACM_MAX VACM_MAX_STRING;
MACRO_VACM_VIEW VACM_MAX_VIEWS;
MACRO_VACM_VIEW VACM_MODE_CHECK_SUBTREE;
MACRO_VACM_VIEW VACM_MODE_FIND;
MACRO_VACM_VIEW VACM_MODE_IGNORE_MASK;
MACRO_VACM VACM_NOACCESS;
MACRO_VACM VACM_NOGROUP;
MACRO_VACM VACM_NOSECNAME;
MACRO_VACM VACM_NOSUCHCONTEXT;
MACRO_VACM VACM_NOTINVIEW;
MACRO_VACM VACM_NOVIEW;
MACRO_VACM VACM_SUBTREE_UNKNOWN;
MACRO_VACM VACM_SUCCESS;
MACRO_VACM_VIEW VACM_VIEW_EXECUTE;
MACRO_VACM_VIEW VACM_VIEW_EXECUTE_BIT;
MACRO_VACM_VIEW VACM_VIEW_LOG;
MACRO_VACM_VIEW VACM_VIEW_LOG_BIT;
MACRO_VACM_VIEW VACM_VIEW_NET;
MACRO_VACM_VIEW VACM_VIEW_NET_BIT;
MACRO_VACM_VIEW VACM_VIEW_NOTIFY;
MACRO_VACM_VIEW VACM_VIEW_NOTIFY_BIT;
MACRO_VACM_VIEW VACM_VIEW_NO_BITS;
MACRO_VACM_VIEW VACM_VIEW_READ;
MACRO_VACM_VIEW VACM_VIEW_READ_BIT;
MACRO_VACM_VIEW VACM_VIEW_WRITE;
MACRO_VACM_VIEW VACM_VIEW_WRITE_BIT;
MACRO_VALID VALID_INT_BITS;
MACRO_VALID VALID_UINT_BITS;
MACRO_VA VA_ANOM;
MACRO_VA VA_FLUSH;
MACRO_VA VA_NORM;
MACRO_VA VA_SEQL;
vtype VBAD;
vtype VBLK;
vtype VCHR;
vtype VCPLX;
vtype VDIR;
MACRO_VDISCARD VDISCARD;
MACRO_VDSUSP VDSUSP;
MACRO_VEOF VEOF;
MACRO_VEOF VEOL;
MACRO_VEOF VEOL2;
MACRO_VERASE VERASE;
vtype VFIFO;
MACRO_VFS VFS_CONF;
MACRO_VFS_CTL VFS_CTL_NEWADDR;
MACRO_VFS_CTL VFS_CTL_NOLOCKS;
MACRO_VFS_CTL VFS_CTL_QUERY;
MACRO_VFS_CTL VFS_CTL_SADDR;
MACRO_VFS_CTL VFS_CTL_STATFS;
MACRO_VFS_CTL VFS_CTL_TIMEO;
MACRO_VFS_CTL VFS_CTL_UMOUNT;
MACRO_VFS_CTL VFS_CTL_VERS1;
MACRO_VFS VFS_GENERIC;
MACRO_VFS VFS_MAXTYPENUM;
MACRO_VFS VFS_NUMMNTOPS;
MACRO_VFS VFS_SET_PACKAGE_EXTS;
MACRO_VF VF_HELP;
MACRO_VF VF_PCBOOT;
MACRO_VIEWSUBTREE VIEWMASK;
MACRO_VACMVIEWSPINLOCK VIEWNAME;
MACRO_VIEWSTATUS VIEWSTATUS;
MACRO_VIEWSTORAGE VIEWSTORAGE;
MACRO_VIEWSUBTREE VIEWSUBTREE;
MACRO_VIEWTYPE VIEWTYPE;
MACRO_VIFF VIFF_SRCRT;
MACRO_VIFF VIFF_TUNNEL;
MACRO_VREPRINT VINTR;
MACRO_VIS VIS_CSTYLE;
MACRO_VIS VIS_GLOB;
MACRO_VIS VIS_HTTPSTYLE;
MACRO_VIS VIS_NL;
MACRO_VIS VIS_NOSLASH;
MACRO_VIS VIS_OCTAL;
MACRO_VIS VIS_SAFE;
MACRO_VIS VIS_SP;
MACRO_VIS VIS_TAB;
MACRO_VIS VIS_WHITE;
MACRO_VKILL VKILL;
MACRO_VLNEXT VLNEXT;
vtype VLNK;
MACRO_VDISCARD VMIN;
MACRO_VM_INHERIT VM_BEHAVIOR_CAN_REUSE;
MACRO_VM_INHERIT VM_BEHAVIOR_DEFAULT;
MACRO_VM_INHERIT VM_BEHAVIOR_DONTNEED;
MACRO_VM_INHERIT VM_BEHAVIOR_FREE;
MACRO_VM_INHERIT VM_BEHAVIOR_RANDOM;
MACRO_VM_INHERIT VM_BEHAVIOR_REUSABLE;
MACRO_VM_INHERIT VM_BEHAVIOR_REUSE;
MACRO_VM_INHERIT VM_BEHAVIOR_RSEQNTL;
MACRO_VM_INHERIT VM_BEHAVIOR_SEQUENTIAL;
MACRO_VM_INHERIT VM_BEHAVIOR_WILLNEED;
MACRO_VM_INHERIT VM_BEHAVIOR_ZERO_WIRED_PAGES;
MACRO_VM VM_DYLD64;
MACRO_VM_FLAGS_SUPERPAGE VM_FLAGS_ALIAS_MASK;
MACRO_VM_PAGE VM_FLAGS_ANYWHERE;
MACRO_VM_PAGE VM_FLAGS_FIXED;
MACRO_VM_PAGE VM_FLAGS_NO_CACHE;
MACRO_VM_PAGE VM_FLAGS_OVERWRITE;
MACRO_VM_PAGE VM_FLAGS_PURGABLE;
MACRO_VM_PAGE VM_FLAGS_SUPERPAGE_MASK;
MACRO_VM_FLAGS VM_FLAGS_SUPERPAGE_NONE;
MACRO_VM_PAGE VM_FLAGS_SUPERPAGE_SHIFT;
MACRO_VM_FLAGS_SUPERPAGE VM_FLAGS_SUPERPAGE_SIZE_2MB;
MACRO_VM_FLAGS VM_FLAGS_SUPERPAGE_SIZE_ANY;
MACRO_VM_FLAGS_SUPERPAGE VM_FLAGS_USER_ALLOCATE;
MACRO_VM_FLAGS_SUPERPAGE VM_FLAGS_USER_MAP;
MACRO_VM_FLAGS_SUPERPAGE VM_FLAGS_USER_REMAP;
MACRO_VM_INHERIT VM_INHERIT_COPY;
MACRO_VM_INHERIT VM_INHERIT_DEFAULT;
MACRO_VM_INHERIT VM_INHERIT_DONATE_COPY;
MACRO_VM_INHERIT VM_INHERIT_LAST_VALID;
MACRO_VM_INHERIT VM_INHERIT_NONE;
MACRO_VM_INHERIT VM_INHERIT_SHARE;
MACRO_VM VM_LIB64_SHR_DATA;
MACRO_VM VM_LIB64_SHR_TEXT;
MACRO_VM_METER VM_LOADAVG;
MACRO_VM_METER VM_MACHFACTOR;
MACRO_VM_REGION VM_MAP_ENTRY_MAX;
MACRO_VM_MAP VM_MAP_NULL;
MACRO_VM_METER VM_MAXID;
MACRO_VM VM_MAX_PAGE_ADDRESS;
MACRO_VM VM_MAX_USER_PAGE_ADDRESS;
MACRO_VM_FLAGS_SUPERPAGE VM_MEMORY_ANALYSIS_TOOL;
MACRO_VM_FLAGS_SUPERPAGE VM_MEMORY_APPKIT;
MACRO_VM_FLAGS_SUPERPAGE VM_MEMORY_APPLICATION_SPECIFIC_1;
MACRO_VM_FLAGS_SUPERPAGE VM_MEMORY_APPLICATION_SPECIFIC_16;
MACRO_VM_FLAGS_SUPERPAGE VM_MEMORY_ASSETSD;
MACRO_VM_FLAGS_SUPERPAGE VM_MEMORY_ATS;
MACRO_VM_FLAGS_SUPERPAGE VM_MEMORY_CARBON;
MACRO_VM_FLAGS_SUPERPAGE VM_MEMORY_CGIMAGE;
MACRO_VM_FLAGS_SUPERPAGE VM_MEMORY_COREGRAPHICS;
MACRO_VM_FLAGS_SUPERPAGE VM_MEMORY_COREGRAPHICS_BACKINGSTORES;
MACRO_VM_FLAGS_SUPERPAGE VM_MEMORY_COREGRAPHICS_DATA;
MACRO_VM_FLAGS_SUPERPAGE VM_MEMORY_COREGRAPHICS_FRAMEBUFFERS;
MACRO_VM_FLAGS_SUPERPAGE VM_MEMORY_COREGRAPHICS_MISC;
MACRO_VM_FLAGS_SUPERPAGE VM_MEMORY_COREGRAPHICS_SHARED;
MACRO_VM_FLAGS_SUPERPAGE VM_MEMORY_COREIMAGE;
MACRO_VM_FLAGS_SUPERPAGE VM_MEMORY_COREPROFILE;
MACRO_VM_FLAGS_SUPERPAGE VM_MEMORY_DYLD;
MACRO_VM_FLAGS_SUPERPAGE VM_MEMORY_DYLD_MALLOC;
MACRO_VM_FLAGS_SUPERPAGE VM_MEMORY_DYLIB;
MACRO_VM_FLAGS_SUPERPAGE VM_MEMORY_FOUNDATION;
MACRO_VM_FLAGS_SUPERPAGE VM_MEMORY_GLSL;
MACRO_VM_FLAGS_SUPERPAGE VM_MEMORY_GUARD;
MACRO_VM_FLAGS_SUPERPAGE VM_MEMORY_IMAGEIO;
MACRO_VM_FLAGS_SUPERPAGE VM_MEMORY_IOKIT;
MACRO_VM_FLAGS_SUPERPAGE VM_MEMORY_JAVA;
MACRO_VM_FLAGS_SUPERPAGE VM_MEMORY_JAVASCRIPT_CORE;
MACRO_VM_FLAGS_SUPERPAGE VM_MEMORY_JAVASCRIPT_JIT_EXECUTABLE_ALLOCATOR;
MACRO_VM_FLAGS_SUPERPAGE VM_MEMORY_JAVASCRIPT_JIT_REGISTER_FILE;
MACRO_VM_FLAGS_SUPERPAGE VM_MEMORY_LAYERKIT;
MACRO_VM_FLAGS_SUPERPAGE VM_MEMORY_MACH_MSG;
MACRO_VM_FLAGS_SUPERPAGE VM_MEMORY_MALLOC;
MACRO_VM_FLAGS_SUPERPAGE VM_MEMORY_MALLOC_HUGE;
MACRO_VM_FLAGS_SUPERPAGE VM_MEMORY_MALLOC_LARGE;
MACRO_VM_FLAGS_SUPERPAGE VM_MEMORY_MALLOC_LARGE_REUSABLE;
MACRO_VM_FLAGS_SUPERPAGE VM_MEMORY_MALLOC_LARGE_REUSED;
MACRO_VM_FLAGS_SUPERPAGE VM_MEMORY_MALLOC_SMALL;
MACRO_VM_FLAGS_SUPERPAGE VM_MEMORY_MALLOC_TINY;
MACRO_VM_FLAGS_SUPERPAGE VM_MEMORY_OBJC_DISPATCHERS;
MACRO_VM_FLAGS_SUPERPAGE VM_MEMORY_OPENCL;
MACRO_VM_FLAGS_SUPERPAGE VM_MEMORY_REALLOC;
MACRO_VM_FLAGS_SUPERPAGE VM_MEMORY_SBRK;
MACRO_VM_FLAGS_SUPERPAGE VM_MEMORY_SHARED_PMAP;
MACRO_VM_FLAGS_SUPERPAGE VM_MEMORY_SQLITE;
MACRO_VM_FLAGS_SUPERPAGE VM_MEMORY_STACK;
MACRO_VM_FLAGS_SUPERPAGE VM_MEMORY_TCMALLOC;
MACRO_VM_FLAGS_SUPERPAGE VM_MEMORY_WEBCORE_PURGEABLE_BUFFERS;
MACRO_VM_METER VM_METER;
MACRO_VM VM_MIN_ADDRESS64;
MACRO_VM_MAP VM_NAMED_ENTRY_NULL;
MACRO_VM_REGION VM_PAGE_INFO_BASIC;
MACRO_VM_PAGE VM_PAGE_QUERY_PAGE_COPIED;
MACRO_VM_PAGE VM_PAGE_QUERY_PAGE_CS_TAINTED;
MACRO_VM_PAGE VM_PAGE_QUERY_PAGE_CS_VALIDATED;
MACRO_VM_PAGE VM_PAGE_QUERY_PAGE_DIRTY;
MACRO_VM_PAGE VM_PAGE_QUERY_PAGE_EXTERNAL;
MACRO_VM_PAGE VM_PAGE_QUERY_PAGE_FICTITIOUS;
MACRO_VM_PAGE VM_PAGE_QUERY_PAGE_PAGED_OUT;
MACRO_VM_PAGE VM_PAGE_QUERY_PAGE_PRESENT;
MACRO_VM_PAGE VM_PAGE_QUERY_PAGE_REF;
MACRO_VM_PAGE VM_PAGE_QUERY_PAGE_SPECULATIVE;
MACRO_VM_PROT VM_PROT_ALL;
MACRO_VM_PROT VM_PROT_COPY;
MACRO_VM_PROT VM_PROT_DEFAULT;
MACRO_VM_PROT VM_PROT_EXECUTE;
MACRO_VM_PROT VM_PROT_IS_MASK;
MACRO_VM_PROT VM_PROT_NONE;
MACRO_VM_PROT VM_PROT_NO_CHANGE;
MACRO_VM_PROT VM_PROT_READ;
MACRO_VM_PROT VM_PROT_WANTS_COPY;
MACRO_VM_PROT VM_PROT_WRITE;
MACRO_VM_INHERIT VM_PURGABLE_ALL_MASKS;
MACRO_VM_INHERIT VM_PURGABLE_BEHAVIOR_FIFO;
MACRO_VM_INHERIT VM_PURGABLE_BEHAVIOR_LIFO;
MACRO_VM_INHERIT VM_PURGABLE_BEHAVIOR_MASK;
MACRO_VM_INHERIT VM_PURGABLE_BEHAVIOR_SHIFT;
MACRO_VM_INHERIT VM_PURGABLE_DEBUG_EMPTY;
MACRO_VM_INHERIT VM_PURGABLE_DEBUG_FAULT;
MACRO_VM_INHERIT VM_PURGABLE_DEBUG_MASK;
MACRO_VM_INHERIT VM_PURGABLE_DEBUG_SHIFT;
MACRO_VM_INHERIT VM_PURGABLE_DENY;
MACRO_VM_INHERIT VM_PURGABLE_EMPTY;
MACRO_VM_INHERIT VM_PURGABLE_GET_STATE;
MACRO_VM_INHERIT VM_PURGABLE_NONVOLATILE;
MACRO_VM_INHERIT VM_PURGABLE_ORDERING_MASK;
MACRO_VM_INHERIT VM_PURGABLE_ORDERING_NORMAL;
MACRO_VM_INHERIT VM_PURGABLE_ORDERING_OBSOLETE;
MACRO_VM_INHERIT VM_PURGABLE_ORDERING_SHIFT;
MACRO_VM_INHERIT VM_PURGABLE_PURGE_ALL;
MACRO_VM_INHERIT VM_PURGABLE_SET_STATE;
MACRO_VM_INHERIT VM_PURGABLE_STATE_MASK;
MACRO_VM_INHERIT VM_PURGABLE_STATE_MAX;
MACRO_VM_INHERIT VM_PURGABLE_STATE_MIN;
MACRO_VM_INHERIT VM_PURGABLE_VOLATILE;
MACRO_VM_INHERIT VM_REGION_BASIC_INFO;
MACRO_VM_INHERIT VM_REGION_BASIC_INFO_64;
MACRO_VM_INHERIT VM_REGION_EXTENDED_INFO;
MACRO_VM_INHERIT VM_REGION_INFO_MAX;
MACRO_VM_REGION VM_REGION_TOP_INFO;
MACRO_VM_METER VM_SWAPUSAGE;
MACRO_VM_PROT VM_SYNC_ASYNCHRONOUS;
MACRO_VM_PROT VM_SYNC_CONTIGUOUS;
MACRO_VM_PROT VM_SYNC_DEACTIVATE;
MACRO_VM_PROT VM_SYNC_INVALIDATE;
MACRO_VM_PROT VM_SYNC_KILLPAGES;
MACRO_VM_PROT VM_SYNC_REUSABLEPAGES;
MACRO_VM_PROT VM_SYNC_SYNCHRONOUS;
MACRO_VM VM_USRSTACK64;
MACRO_VM_INHERIT VM_VOLATILE_GROUP_0;
MACRO_VM_INHERIT VM_VOLATILE_GROUP_1;
MACRO_VM_INHERIT VM_VOLATILE_GROUP_2;
MACRO_VM_INHERIT VM_VOLATILE_GROUP_3;
MACRO_VM_INHERIT VM_VOLATILE_GROUP_4;
MACRO_VM_INHERIT VM_VOLATILE_GROUP_5;
MACRO_VM_INHERIT VM_VOLATILE_GROUP_6;
MACRO_VM_INHERIT VM_VOLATILE_GROUP_7;
MACRO_VM_INHERIT VM_VOLATILE_GROUP_MASK;
MACRO_VM_INHERIT VM_VOLATILE_GROUP_SHIFT;
MACRO_VM_INHERIT VM_VOLATILE_MAKE_FIRST_IN_GROUP;
MACRO_VM_INHERIT VM_VOLATILE_MAKE_LAST_IN_GROUP;
MACRO_VM_INHERIT VM_VOLATILE_ORDER_MASK;
MACRO_VM_INHERIT VM_VOLATILE_ORDER_SHIFT;
MACRO_VNODE VNODE_READ;
MACRO_VNODE VNODE_WRITE;
vtype VNON;
MACRO_VNOVAL VNOVAL;
MACRO_VN VN_DEBUG;
MACRO_VN VN_DONTCLUSTER;
MACRO_VN VN_FOLLOW;
MACRO_VN VN_IO;
MACRO_VN VN_LABELS;
MACRO_VN VN_RESERVE;
MACRO_VOL VOL_CAPABILITIES_FORMAT;
MACRO_VOL VOL_CAPABILITIES_INTERFACES;
MACRO_VOL VOL_CAPABILITIES_RESERVED1;
MACRO_VOL VOL_CAPABILITIES_RESERVED2;
MACRO_VOL_CAP VOL_CAP_FMT_2TB_FILESIZE;
MACRO_VOL_CAP VOL_CAP_FMT_64BIT_OBJECT_IDS;
MACRO_VOL_CAP VOL_CAP_FMT_CASE_PRESERVING;
MACRO_VOL_CAP VOL_CAP_FMT_CASE_SENSITIVE;
MACRO_VOL_CAP VOL_CAP_FMT_DECMPFS_COMPRESSION;
MACRO_VOL_CAP VOL_CAP_FMT_FAST_STATFS;
MACRO_VOL_CAP VOL_CAP_FMT_HARDLINKS;
MACRO_VOL_CAP VOL_CAP_FMT_HIDDEN_FILES;
MACRO_VOL_CAP VOL_CAP_FMT_JOURNAL;
MACRO_VOL_CAP VOL_CAP_FMT_JOURNAL_ACTIVE;
MACRO_VOL_CAP VOL_CAP_FMT_NO_ROOT_TIMES;
MACRO_VOL_CAP VOL_CAP_FMT_NO_VOLUME_SIZES;
MACRO_VOL_CAP VOL_CAP_FMT_OPENDENYMODES;
MACRO_VOL_CAP VOL_CAP_FMT_PATH_FROM_ID;
MACRO_VOL_CAP VOL_CAP_FMT_PERSISTENTOBJECTIDS;
MACRO_VOL_CAP VOL_CAP_FMT_SPARSE_FILES;
MACRO_VOL_CAP VOL_CAP_FMT_SYMBOLICLINKS;
MACRO_VOL_CAP VOL_CAP_FMT_ZERO_RUNS;
MACRO_VOL_CAP VOL_CAP_INT_ADVLOCK;
MACRO_VOL_CAP VOL_CAP_INT_ALLOCATE;
MACRO_VOL_CAP VOL_CAP_INT_ATTRLIST;
MACRO_VOL_CAP VOL_CAP_INT_COPYFILE;
MACRO_VOL_CAP VOL_CAP_INT_EXCHANGEDATA;
MACRO_VOL_CAP VOL_CAP_INT_EXTENDED_ATTR;
MACRO_VOL_CAP VOL_CAP_INT_EXTENDED_SECURITY;
MACRO_VOL_CAP VOL_CAP_INT_FLOCK;
MACRO_VOL_CAP VOL_CAP_INT_MANLOCK;
MACRO_VOL_CAP VOL_CAP_INT_NAMEDSTREAMS;
MACRO_VOL_CAP VOL_CAP_INT_NFSEXPORT;
MACRO_VOL_CAP VOL_CAP_INT_READDIRATTR;
MACRO_VOL_CAP VOL_CAP_INT_SEARCHFS;
MACRO_VOL_CAP VOL_CAP_INT_USERACCESS;
MACRO_VOL_CAP VOL_CAP_INT_VOL_RENAME;
MACRO_VPRINT VPLOT;
MACRO_VPRINT VPRINT;
MACRO_VPRINT VPRINTPLOT;
MACRO_VQUIT VQUIT;
MACRO_VQ VQ_ASSIST;
MACRO_VQ VQ_DEAD;
MACRO_VQ VQ_FLAG0800;
MACRO_VQ VQ_FLAG1000;
MACRO_VQ VQ_FLAG2000;
MACRO_VQ VQ_FLAG4000;
MACRO_VQ VQ_FLAG8000;
MACRO_VQ VQ_LOWDISK;
MACRO_VQ VQ_MOUNT;
MACRO_VQ VQ_NEEDAUTH;
MACRO_VQ VQ_NOTRESP;
MACRO_VQ VQ_NOTRESPLOCK;
MACRO_VQ VQ_SYNCEVENT;
MACRO_VQ VQ_UNMOUNT;
MACRO_VQ VQ_UPDATE;
MACRO_VQ VQ_VERYLOWDISK;
vtype VREG;
MACRO_VREPRINT VREPRINT;
vtype VSOCK;
MACRO_VSTART VSTART;
MACRO_VSTATUS VSTATUS;
MACRO_VSTOP VSTOP;
vtype VSTR;
MACRO_VSUSP VSUSP;
MACRO_VT0 VT0;
MACRO_VT0 VT1;
MACRO_VTAB VTAB;
MACRO_XTABS VTDELAY;
MACRO_OPOST VTDLY;
MACRO_VTIME VTIME;
MACRO_VTRACE VTRACE;
MACRO_VTR VTR_DISABLE;
MACRO_VTR VTR_ENABLE;
MACRO_VTR VTR_STAMP;
MACRO_VTR VTR_UALARM;
MACRO_VTR VTR_VALUE;
vtagtype VT_AFP;
vtagtype VT_AFS;
vtagtype VT_CDDA;
vtagtype VT_CIFS;
vtagtype VT_DEVFS;
vtagtype VT_FDESC;
vtagtype VT_HFS;
vtagtype VT_ISOFS;
vtagtype VT_KERNFS;
vtagtype VT_LFS;
vtagtype VT_LOFS;
vtagtype VT_MFS;
vtagtype VT_MSDOSFS;
vtagtype VT_NFS;
vtagtype VT_NON;
vtagtype VT_NULL;
vtagtype VT_OTHER;
vtagtype VT_PORTAL;
vtagtype VT_PROCFS;
vtagtype VT_UDF;
vtagtype VT_UFS;
vtagtype VT_UMAP;
vtagtype VT_UNION;
vtagtype VT_WEBDAV;
vtagtype VT_ZFS;
MACRO_VERASE VWERASE;
MACRO_V_ASN1 V_ASN1_ANY;
MACRO_V_ASN1 V_ASN1_APPLICATION;
MACRO_V_ASN1 V_ASN1_APP_CHOOSE;
MACRO_V_ASN1 V_ASN1_BIT_STRING;
MACRO_V_ASN1 V_ASN1_BMPSTRING;
MACRO_V_ASN1 V_ASN1_BOOLEAN;
MACRO_V_ASN1 V_ASN1_CONSTRUCTED;
MACRO_V_ASN1 V_ASN1_CONTEXT_SPECIFIC;
MACRO_V_ASN1 V_ASN1_ENUMERATED;
MACRO_V_ASN1 V_ASN1_EOC;
MACRO_V_ASN1 V_ASN1_EXTERNAL;
MACRO_V_ASN1 V_ASN1_GENERALIZEDTIME;
MACRO_V_ASN1 V_ASN1_GENERALSTRING;
MACRO_V_ASN1 V_ASN1_GRAPHICSTRING;
MACRO_V_ASN1 V_ASN1_IA5STRING;
MACRO_V_ASN1 V_ASN1_INTEGER;
MACRO_V_ASN1 V_ASN1_ISO64STRING;
MACRO_V_ASN1 V_ASN1_NEG;
MACRO_V_ASN1 V_ASN1_NEG_ENUMERATED;
MACRO_V_ASN1 V_ASN1_NEG_INTEGER;
MACRO_V_ASN1 V_ASN1_NULL;
MACRO_V_ASN1 V_ASN1_NUMERICSTRING;
MACRO_V_ASN1 V_ASN1_OBJECT;
MACRO_V_ASN1 V_ASN1_OBJECT_DESCRIPTOR;
MACRO_V_ASN1 V_ASN1_OCTET_STRING;
MACRO_V_ASN1 V_ASN1_OTHER;
MACRO_V_ASN1 V_ASN1_PRIMATIVE_TAG;
MACRO_V_ASN1 V_ASN1_PRIMITIVE_TAG;
MACRO_V_ASN1 V_ASN1_PRINTABLESTRING;
MACRO_V_ASN1 V_ASN1_PRIVATE;
MACRO_V_ASN1 V_ASN1_REAL;
MACRO_V_ASN1 V_ASN1_SEQUENCE;
MACRO_V_ASN1 V_ASN1_SET;
MACRO_V_ASN1 V_ASN1_T61STRING;
MACRO_V_ASN1 V_ASN1_TELETEXSTRING;
MACRO_V_ASN1 V_ASN1_UNDEF;
MACRO_V_ASN1 V_ASN1_UNIVERSAL;
MACRO_V_ASN1 V_ASN1_UNIVERSALSTRING;
MACRO_V_ASN1 V_ASN1_UTCTIME;
MACRO_V_ASN1 V_ASN1_UTF8STRING;
MACRO_V_ASN1 V_ASN1_VIDEOTEXSTRING;
MACRO_V_ASN1 V_ASN1_VISIBLESTRING;
MACRO_V V_CRYPTO_MDEBUG_ALL;
MACRO_V V_CRYPTO_MDEBUG_THREAD;
MACRO_V V_CRYPTO_MDEBUG_TIME;
MACRO_V_OCSP V_OCSP_CERTSTATUS_GOOD;
MACRO_V_OCSP V_OCSP_CERTSTATUS_REVOKED;
MACRO_V_OCSP V_OCSP_CERTSTATUS_UNKNOWN;
MACRO_V_OCSP V_OCSP_RESPID_KEY;
MACRO_V_OCSP V_OCSP_RESPID_NAME;
MACRO_WAIT WAIT_ANY;
MACRO_WAIT WAIT_MYPGRP;
MACRO_WALLPROC WALLPROC_WALL;
MACRO_WALLPROG WALLPROG;
MACRO_WALLVERS WALLVERS;
MACRO_WATCHER WATCHER_FIXED_SIZE;
MACRO_WATCHER WATCHER_MAX_SIZE;
MACRO_WATCHER WATCHER_SIZE_IS_PTR;
MACRO_WATCHER WATCHER_SIZE_STRLEN;
MACRO_WATCHER WATCHER_SIZE_UNIT_OIDS;
MACRO_SIZE WCHAR_MAX;
MACRO_WCHAR WCHAR_MIN;
MACRO_WEXITED WCONTINUED;
MACRO_WNOHANG WCOREFLAG;
MACRO_WEOF WEOF;
MACRO_WEXITED WEXITED;
MACRO_WHODTYPE WHODTYPE_STATUS;
MACRO_WHODVERSION WHODVERSION;
MACRO_WILL WILL;
MACRO_WINT WINT_MAX;
MACRO_WCHAR WINT_MIN;
MACRO_WMESGLEN WMESGLEN;
MACRO_WNOHANG WNOHANG;
MACRO_WEXITED WNOWAIT;
MACRO_WONT WONT;
MACRO_WORD WORD_BIT;
MACRO_WQ WQ_EXCEEDED_CONSTRAINED_THREAD_LIMIT;
MACRO_WQ WQ_EXCEEDED_TOTAL_THREAD_LIMIT;
MACRO_WRDE WRDE_APPEND;
MACRO_WRDE WRDE_BADCHAR;
MACRO_WRDE WRDE_BADVAL;
MACRO_WRDE WRDE_CMDSUB;
MACRO_WRDE WRDE_DOOFFS;
MACRO_WRDE WRDE_NOCMD;
MACRO_WRDE WRDE_NOSPACE;
MACRO_WRDE WRDE_NOSYS;
MACRO_WRDE WRDE_REUSE;
MACRO_WRDE WRDE_SHOWERR;
MACRO_WRDE WRDE_SYNTAX;
MACRO_WRDE WRDE_UNDEF;
MACRO_WRITE WRITE;
MACRO_RRQ WRQ;
MACRO_WEXITED WSTOPPED;
MACRO_WNOHANG WUNTRACED;
MACRO_OK W_OK;
MACRO_X509V3_EXT X509V3_ADD_APPEND;
MACRO_X509V3_EXT X509V3_ADD_DEFAULT;
MACRO_X509V3_EXT X509V3_ADD_DELETE;
MACRO_X509V3_EXT X509V3_ADD_KEEP_EXISTING;
MACRO_X509V3_EXT X509V3_ADD_OP_MASK;
MACRO_X509V3_EXT X509V3_ADD_REPLACE;
MACRO_X509V3_EXT X509V3_ADD_REPLACE_EXISTING;
MACRO_X509V3_EXT X509V3_ADD_SILENT;
MACRO_X509V3 X509V3_EXT_CTX_DEP;
MACRO_X509V3_EXT X509V3_EXT_DEFAULT;
MACRO_X509V3_EXT X509V3_EXT_DUMP_UNKNOWN;
MACRO_X509V3 X509V3_EXT_DYNAMIC;
MACRO_X509V3_EXT X509V3_EXT_ERROR_UNKNOWN;
MACRO_X509V3 X509V3_EXT_MULTILINE;
MACRO_X509V3_EXT X509V3_EXT_PARSE_UNKNOWN;
MACRO_X509V3_EXT X509V3_EXT_UNKNOWN_MASK;
MACRO_X509V3_EXT X509V3_F_ASIDENTIFIERCHOICE_CANONIZE;
MACRO_X509V3_EXT X509V3_F_ASIDENTIFIERCHOICE_IS_CANONICAL;
MACRO_X509V3_EXT X509V3_F_COPY_EMAIL;
MACRO_X509V3_EXT X509V3_F_COPY_ISSUER;
MACRO_X509V3_EXT X509V3_F_DO_DIRNAME;
MACRO_X509V3_EXT X509V3_F_DO_EXT_CONF;
MACRO_X509V3_EXT X509V3_F_DO_EXT_I2D;
MACRO_X509V3_EXT X509V3_F_DO_EXT_NCONF;
MACRO_X509V3_EXT X509V3_F_DO_I2V_NAME_CONSTRAINTS;
MACRO_X509V3_EXT X509V3_F_HEX_TO_STRING;
MACRO_X509V3_EXT X509V3_F_I2S_ASN1_ENUMERATED;
MACRO_X509V3_EXT X509V3_F_I2S_ASN1_IA5STRING;
MACRO_X509V3_EXT X509V3_F_I2S_ASN1_INTEGER;
MACRO_X509V3_EXT X509V3_F_I2V_AUTHORITY_INFO_ACCESS;
MACRO_X509V3_EXT X509V3_F_NOTICE_SECTION;
MACRO_X509V3_EXT X509V3_F_NREF_NOS;
MACRO_X509V3_EXT X509V3_F_POLICY_SECTION;
MACRO_X509V3_EXT X509V3_F_PROCESS_PCI_VALUE;
MACRO_X509V3_EXT X509V3_F_R2I_CERTPOL;
MACRO_X509V3_EXT X509V3_F_R2I_PCI;
MACRO_X509V3_EXT X509V3_F_S2I_ASN1_IA5STRING;
MACRO_X509V3_EXT X509V3_F_S2I_ASN1_INTEGER;
MACRO_X509V3_EXT X509V3_F_S2I_ASN1_OCTET_STRING;
MACRO_X509V3_EXT X509V3_F_S2I_ASN1_SKEY_ID;
MACRO_X509V3_EXT X509V3_F_S2I_SKEY_ID;
MACRO_X509V3_EXT X509V3_F_STRING_TO_HEX;
MACRO_X509V3_EXT X509V3_F_SXNET_ADD_ID_ASC;
MACRO_X509V3_EXT X509V3_F_SXNET_ADD_ID_INTEGER;
MACRO_X509V3_EXT X509V3_F_SXNET_ADD_ID_ULONG;
MACRO_X509V3_EXT X509V3_F_SXNET_GET_ID_ASC;
MACRO_X509V3_EXT X509V3_F_SXNET_GET_ID_ULONG;
MACRO_X509V3_EXT X509V3_F_V2I_ASIDENTIFIERS;
MACRO_X509V3_EXT X509V3_F_V2I_ASN1_BIT_STRING;
MACRO_X509V3_EXT X509V3_F_V2I_AUTHORITY_INFO_ACCESS;
MACRO_X509V3_EXT X509V3_F_V2I_AUTHORITY_KEYID;
MACRO_X509V3_EXT X509V3_F_V2I_BASIC_CONSTRAINTS;
MACRO_X509V3_EXT X509V3_F_V2I_CRLD;
MACRO_X509V3_EXT X509V3_F_V2I_EXTENDED_KEY_USAGE;
MACRO_X509V3_EXT X509V3_F_V2I_GENERAL_NAMES;
MACRO_X509V3_EXT X509V3_F_V2I_GENERAL_NAME_EX;
MACRO_X509V3_EXT X509V3_F_V2I_IPADDRBLOCKS;
MACRO_X509V3_EXT X509V3_F_V2I_ISSUER_ALT;
MACRO_X509V3_EXT X509V3_F_V2I_NAME_CONSTRAINTS;
MACRO_X509V3_EXT X509V3_F_V2I_POLICY_CONSTRAINTS;
MACRO_X509V3_EXT X509V3_F_V2I_POLICY_MAPPINGS;
MACRO_X509V3_EXT X509V3_F_V2I_SUBJECT_ALT;
MACRO_X509V3_EXT X509V3_F_V3_ADDR_VALIDATE_PATH_INTERNAL;
MACRO_X509V3_EXT X509V3_F_V3_GENERIC_EXTENSION;
MACRO_X509V3_EXT X509V3_F_X509V3_ADD1_I2D;
MACRO_X509V3_EXT X509V3_F_X509V3_ADD_VALUE;
MACRO_X509V3_EXT X509V3_F_X509V3_EXT_ADD;
MACRO_X509V3_EXT X509V3_F_X509V3_EXT_ADD_ALIAS;
MACRO_X509V3_EXT X509V3_F_X509V3_EXT_CONF;
MACRO_X509V3_EXT X509V3_F_X509V3_EXT_I2D;
MACRO_X509V3_EXT X509V3_F_X509V3_EXT_NCONF;
MACRO_X509V3_EXT X509V3_F_X509V3_GET_SECTION;
MACRO_X509V3_EXT X509V3_F_X509V3_GET_STRING;
MACRO_X509V3_EXT X509V3_F_X509V3_GET_VALUE_BOOL;
MACRO_X509V3_EXT X509V3_F_X509V3_PARSE_LIST;
MACRO_X509V3_EXT X509V3_F_X509_PURPOSE_ADD;
MACRO_X509V3_EXT X509V3_F_X509_PURPOSE_SET;
MACRO_X509V3_EXT X509V3_R_BAD_IP_ADDRESS;
MACRO_X509V3_EXT X509V3_R_BAD_OBJECT;
MACRO_X509V3_EXT X509V3_R_BN_DEC2BN_ERROR;
MACRO_X509V3_EXT X509V3_R_BN_TO_ASN1_INTEGER_ERROR;
MACRO_X509V3_EXT X509V3_R_DIRNAME_ERROR;
MACRO_X509V3_EXT X509V3_R_DUPLICATE_ZONE_ID;
MACRO_X509V3_EXT X509V3_R_ERROR_CONVERTING_ZONE;
MACRO_X509V3_EXT X509V3_R_ERROR_CREATING_EXTENSION;
MACRO_X509V3_EXT X509V3_R_ERROR_IN_EXTENSION;
MACRO_X509V3_EXT X509V3_R_EXPECTED_A_SECTION_NAME;
MACRO_X509V3_EXT X509V3_R_EXTENSION_EXISTS;
MACRO_X509V3_EXT X509V3_R_EXTENSION_NAME_ERROR;
MACRO_X509V3_EXT X509V3_R_EXTENSION_NOT_FOUND;
MACRO_X509V3_EXT X509V3_R_EXTENSION_SETTING_NOT_SUPPORTED;
MACRO_X509V3_EXT X509V3_R_EXTENSION_VALUE_ERROR;
MACRO_X509V3_EXT X509V3_R_ILLEGAL_EMPTY_EXTENSION;
MACRO_X509V3_EXT X509V3_R_ILLEGAL_HEX_DIGIT;
MACRO_X509V3_EXT X509V3_R_INCORRECT_POLICY_SYNTAX_TAG;
MACRO_X509V3_EXT X509V3_R_INVALID_ASNUMBER;
MACRO_X509V3_EXT X509V3_R_INVALID_ASRANGE;
MACRO_X509V3_EXT X509V3_R_INVALID_BOOLEAN_STRING;
MACRO_X509V3_EXT X509V3_R_INVALID_EXTENSION_STRING;
MACRO_X509V3_EXT X509V3_R_INVALID_INHERITANCE;
MACRO_X509V3_EXT X509V3_R_INVALID_IPADDRESS;
MACRO_X509V3_EXT X509V3_R_INVALID_NAME;
MACRO_X509V3_EXT X509V3_R_INVALID_NULL_ARGUMENT;
MACRO_X509V3_EXT X509V3_R_INVALID_NULL_NAME;
MACRO_X509V3_EXT X509V3_R_INVALID_NULL_VALUE;
MACRO_X509V3_EXT X509V3_R_INVALID_NUMBER;
MACRO_X509V3_EXT X509V3_R_INVALID_NUMBERS;
MACRO_X509V3_EXT X509V3_R_INVALID_OBJECT_IDENTIFIER;
MACRO_X509V3_EXT X509V3_R_INVALID_OPTION;
MACRO_X509V3_EXT X509V3_R_INVALID_POLICY_IDENTIFIER;
MACRO_X509V3_EXT X509V3_R_INVALID_PROXY_POLICY_SETTING;
MACRO_X509V3_EXT X509V3_R_INVALID_PURPOSE;
MACRO_X509V3_EXT X509V3_R_INVALID_SAFI;
MACRO_X509V3_EXT X509V3_R_INVALID_SECTION;
MACRO_X509V3_EXT X509V3_R_INVALID_SYNTAX;
MACRO_X509V3_EXT X509V3_R_ISSUER_DECODE_ERROR;
MACRO_X509V3_EXT X509V3_R_MISSING_VALUE;
MACRO_X509V3_EXT X509V3_R_NEED_ORGANIZATION_AND_NUMBERS;
MACRO_X509V3_EXT X509V3_R_NO_CONFIG_DATABASE;
MACRO_X509V3_EXT X509V3_R_NO_ISSUER_CERTIFICATE;
MACRO_X509V3_EXT X509V3_R_NO_ISSUER_DETAILS;
MACRO_X509V3_EXT X509V3_R_NO_POLICY_IDENTIFIER;
MACRO_X509V3_EXT X509V3_R_NO_PROXY_CERT_POLICY_LANGUAGE_DEFINED;
MACRO_X509V3_EXT X509V3_R_NO_PUBLIC_KEY;
MACRO_X509V3_EXT X509V3_R_NO_SUBJECT_DETAILS;
MACRO_X509V3_EXT X509V3_R_ODD_NUMBER_OF_DIGITS;
MACRO_X509V3_EXT X509V3_R_OPERATION_NOT_DEFINED;
MACRO_X509V3_EXT X509V3_R_OTHERNAME_ERROR;
MACRO_X509V3_EXT X509V3_R_POLICY_LANGUAGE_ALREADTY_DEFINED;
MACRO_X509V3_EXT X509V3_R_POLICY_PATH_LENGTH;
MACRO_X509V3_EXT X509V3_R_POLICY_PATH_LENGTH_ALREADTY_DEFINED;
MACRO_X509V3_EXT X509V3_R_POLICY_SYNTAX_NOT_CURRENTLY_SUPPORTED;
MACRO_X509V3_EXT X509V3_R_POLICY_WHEN_PROXY_LANGUAGE_REQUIRES_NO_POLICY;
MACRO_X509V3_EXT X509V3_R_SECTION_NOT_FOUND;
MACRO_X509V3_EXT X509V3_R_UNABLE_TO_GET_ISSUER_DETAILS;
MACRO_X509V3_EXT X509V3_R_UNABLE_TO_GET_ISSUER_KEYID;
MACRO_X509V3_EXT X509V3_R_UNKNOWN_BIT_STRING_ARGUMENT;
MACRO_X509V3_EXT X509V3_R_UNKNOWN_EXTENSION;
MACRO_X509V3_EXT X509V3_R_UNKNOWN_EXTENSION_NAME;
MACRO_X509V3_EXT X509V3_R_UNKNOWN_OPTION;
MACRO_X509V3_EXT X509V3_R_UNSUPPORTED_OPTION;
MACRO_X509V3_EXT X509V3_R_USER_TOO_LONG;
MACRO_X509_EXT X509_EXT_PACK_STRING;
MACRO_X509_EXT X509_EXT_PACK_UNKNOWN;
MACRO_X509_EX X509_EX_V_INIT;
MACRO_X509_EX X509_EX_V_NETSCAPE_HACK;
MACRO_X509 X509_FILETYPE_ASN1;
MACRO_X509 X509_FILETYPE_DEFAULT;
MACRO_X509 X509_FILETYPE_PEM;
MACRO_X509_EX X509_FLAG_COMPAT;
MACRO_X509_EX X509_FLAG_NO_ATTRIBUTES;
MACRO_X509_EX X509_FLAG_NO_AUX;
MACRO_X509_EX X509_FLAG_NO_EXTENSIONS;
MACRO_X509_EX X509_FLAG_NO_HEADER;
MACRO_X509_EX X509_FLAG_NO_ISSUER;
MACRO_X509_EX X509_FLAG_NO_PUBKEY;
MACRO_X509_EX X509_FLAG_NO_SERIAL;
MACRO_X509_EX X509_FLAG_NO_SIGDUMP;
MACRO_X509_EX X509_FLAG_NO_SIGNAME;
MACRO_X509_EX X509_FLAG_NO_SUBJECT;
MACRO_X509_EX X509_FLAG_NO_VALIDITY;
MACRO_X509_EX X509_FLAG_NO_VERSION;
MACRO_X509_EXT X509_F_ADD_CERT_DIR;
MACRO_X509_EXT X509_F_BY_FILE_CTRL;
MACRO_X509_EXT X509_F_CHECK_POLICY;
MACRO_X509_EXT X509_F_DIR_CTRL;
MACRO_X509_EXT X509_F_GET_CERT_BY_SUBJECT;
MACRO_X509_EXT X509_F_NETSCAPE_SPKI_B64_DECODE;
MACRO_X509_EXT X509_F_NETSCAPE_SPKI_B64_ENCODE;
MACRO_X509_EXT X509_F_X509AT_ADD1_ATTR;
MACRO_X509_EXT X509_F_X509V3_ADD_EXT;
MACRO_X509_EXT X509_F_X509_ATTRIBUTE_CREATE_BY_NID;
MACRO_X509_EXT X509_F_X509_ATTRIBUTE_CREATE_BY_OBJ;
MACRO_X509_EXT X509_F_X509_ATTRIBUTE_CREATE_BY_TXT;
MACRO_X509_EXT X509_F_X509_ATTRIBUTE_GET0_DATA;
MACRO_X509_EXT X509_F_X509_ATTRIBUTE_SET1_DATA;
MACRO_X509_EXT X509_F_X509_CHECK_PRIVATE_KEY;
MACRO_X509_EXT X509_F_X509_CRL_PRINT_FP;
MACRO_X509_EXT X509_F_X509_EXTENSION_CREATE_BY_NID;
MACRO_X509_EXT X509_F_X509_EXTENSION_CREATE_BY_OBJ;
MACRO_X509_EXT X509_F_X509_GET_PUBKEY_PARAMETERS;
MACRO_X509_EXT X509_F_X509_LOAD_CERT_CRL_FILE;
MACRO_X509_EXT X509_F_X509_LOAD_CERT_FILE;
MACRO_X509_EXT X509_F_X509_LOAD_CRL_FILE;
MACRO_X509_EXT X509_F_X509_NAME_ADD_ENTRY;
MACRO_X509_EXT X509_F_X509_NAME_ENTRY_CREATE_BY_NID;
MACRO_X509_EXT X509_F_X509_NAME_ENTRY_CREATE_BY_TXT;
MACRO_X509_EXT X509_F_X509_NAME_ENTRY_SET_OBJECT;
MACRO_X509_EXT X509_F_X509_NAME_ONELINE;
MACRO_X509_EXT X509_F_X509_NAME_PRINT;
MACRO_X509_EXT X509_F_X509_PRINT_EX_FP;
MACRO_X509_EXT X509_F_X509_PUBKEY_GET;
MACRO_X509_EXT X509_F_X509_PUBKEY_SET;
MACRO_X509_EXT X509_F_X509_REQ_CHECK_PRIVATE_KEY;
MACRO_X509_EXT X509_F_X509_REQ_PRINT_EX;
MACRO_X509_EXT X509_F_X509_REQ_PRINT_FP;
MACRO_X509_EXT X509_F_X509_REQ_TO_X509;
MACRO_X509_EXT X509_F_X509_STORE_ADD_CERT;
MACRO_X509_EXT X509_F_X509_STORE_ADD_CRL;
MACRO_X509_EXT X509_F_X509_STORE_CTX_GET1_ISSUER;
MACRO_X509_EXT X509_F_X509_STORE_CTX_INIT;
MACRO_X509_EXT X509_F_X509_STORE_CTX_NEW;
MACRO_X509_EXT X509_F_X509_STORE_CTX_PURPOSE_INHERIT;
MACRO_X509_EXT X509_F_X509_TO_X509_REQ;
MACRO_X509_EXT X509_F_X509_TRUST_ADD;
MACRO_X509_EXT X509_F_X509_TRUST_SET;
MACRO_X509_EXT X509_F_X509_VERIFY_CERT;
MACRO_X509_LU X509_LU_CRL;
MACRO_X509_LU X509_LU_FAIL;
MACRO_X509_LU X509_LU_PKEY;
MACRO_X509_LU X509_LU_RETRY;
MACRO_X509_LU X509_LU_X509;
MACRO_X509_LU X509_L_ADD_DIR;
MACRO_X509_LU X509_L_FILE_LOAD;
MACRO_X509_PURPOSE X509_PURPOSE_ANY;
MACRO_X509_PURPOSE X509_PURPOSE_CRL_SIGN;
MACRO_X509_PURPOSE X509_PURPOSE_DYNAMIC;
MACRO_X509_PURPOSE X509_PURPOSE_DYNAMIC_NAME;
MACRO_X509_PURPOSE X509_PURPOSE_MAX;
MACRO_X509_PURPOSE X509_PURPOSE_MIN;
MACRO_X509_PURPOSE X509_PURPOSE_NS_SSL_SERVER;
MACRO_X509_PURPOSE X509_PURPOSE_OCSP_HELPER;
MACRO_X509_PURPOSE X509_PURPOSE_SMIME_ENCRYPT;
MACRO_X509_PURPOSE X509_PURPOSE_SMIME_SIGN;
MACRO_X509_PURPOSE X509_PURPOSE_SSL_CLIENT;
MACRO_X509_PURPOSE X509_PURPOSE_SSL_SERVER;
MACRO_X509_EXT X509_R_BAD_X509_FILETYPE;
MACRO_X509_EXT X509_R_BASE64_DECODE_ERROR;
MACRO_X509_EXT X509_R_CANT_CHECK_DH_KEY;
MACRO_X509_EXT X509_R_CERT_ALREADY_IN_HASH_TABLE;
MACRO_X509_EXT X509_R_ERR_ASN1_LIB;
MACRO_X509_EXT X509_R_INVALID_DIRECTORY;
MACRO_X509_EXT X509_R_INVALID_FIELD_NAME;
MACRO_X509_EXT X509_R_INVALID_TRUST;
MACRO_X509_EXT X509_R_KEY_TYPE_MISMATCH;
MACRO_X509_EXT X509_R_KEY_VALUES_MISMATCH;
MACRO_X509_EXT X509_R_LOADING_CERT_DIR;
MACRO_X509_EXT X509_R_LOADING_DEFAULTS;
MACRO_X509_EXT X509_R_NO_CERT_SET_FOR_US_TO_VERIFY;
MACRO_X509_EXT X509_R_SHOULD_RETRY;
MACRO_X509_EXT X509_R_UNABLE_TO_FIND_PARAMETERS_IN_CHAIN;
MACRO_X509_EXT X509_R_UNABLE_TO_GET_CERTS_PUBLIC_KEY;
MACRO_X509_EXT X509_R_UNKNOWN_KEY_TYPE;
MACRO_X509_EXT X509_R_UNKNOWN_NID;
MACRO_X509_EXT X509_R_UNKNOWN_PURPOSE_ID;
MACRO_X509_EXT X509_R_UNKNOWN_TRUST_ID;
MACRO_X509_EXT X509_R_UNSUPPORTED_ALGORITHM;
MACRO_X509_EXT X509_R_WRONG_LOOKUP_TYPE;
MACRO_X509_EXT X509_R_WRONG_TYPE;
MACRO_X509_EX X509_TRUST_COMPAT;
MACRO_X509_EX X509_TRUST_DEFAULT;
MACRO_X509_EX X509_TRUST_DYNAMIC;
MACRO_X509_EX X509_TRUST_DYNAMIC_NAME;
MACRO_X509_EX X509_TRUST_EMAIL;
MACRO_X509_EX X509_TRUST_MAX;
MACRO_X509_EX X509_TRUST_MIN;
MACRO_X509_EX X509_TRUST_OBJECT_SIGN;
MACRO_X509_EX X509_TRUST_OCSP_REQUEST;
MACRO_X509_EX X509_TRUST_OCSP_SIGN;
MACRO_X509_EX X509_TRUST_REJECTED;
MACRO_X509_EX X509_TRUST_SSL_CLIENT;
MACRO_X509_EX X509_TRUST_SSL_SERVER;
MACRO_X509_EX X509_TRUST_TRUSTED;
MACRO_X509_EX X509_TRUST_UNTRUSTED;
MACRO_X509_LU X509_VP_FLAG_DEFAULT;
MACRO_X509_LU X509_VP_FLAG_LOCKED;
MACRO_X509_LU X509_VP_FLAG_ONCE;
MACRO_X509_LU X509_VP_FLAG_OVERWRITE;
MACRO_X509_LU X509_VP_FLAG_RESET_FLAGS;
MACRO_X509_LU X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH;
MACRO_X509_LU X509_V_ERR_AKID_SKID_MISMATCH;
MACRO_X509_LU X509_V_ERR_APPLICATION_VERIFICATION;
MACRO_X509_LU X509_V_ERR_CERT_CHAIN_TOO_LONG;
MACRO_X509_LU X509_V_ERR_CERT_HAS_EXPIRED;
MACRO_X509_LU X509_V_ERR_CERT_NOT_YET_VALID;
MACRO_X509_LU X509_V_ERR_CERT_REJECTED;
MACRO_X509_LU X509_V_ERR_CERT_REVOKED;
MACRO_X509_LU X509_V_ERR_CERT_SIGNATURE_FAILURE;
MACRO_X509_LU X509_V_ERR_CERT_UNTRUSTED;
MACRO_X509_LU X509_V_ERR_CRL_HAS_EXPIRED;
MACRO_X509_LU X509_V_ERR_CRL_NOT_YET_VALID;
MACRO_X509_LU X509_V_ERR_CRL_SIGNATURE_FAILURE;
MACRO_X509_LU X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT;
MACRO_X509_LU X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD;
MACRO_X509_LU X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD;
MACRO_X509_LU X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD;
MACRO_X509_LU X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD;
MACRO_X509_LU X509_V_ERR_INVALID_CA;
MACRO_X509_LU X509_V_ERR_INVALID_EXTENSION;
MACRO_X509_LU X509_V_ERR_INVALID_NON_CA;
MACRO_X509_LU X509_V_ERR_INVALID_POLICY_EXTENSION;
MACRO_X509_LU X509_V_ERR_INVALID_PURPOSE;
MACRO_X509_LU X509_V_ERR_KEYUSAGE_NO_CERTSIGN;
MACRO_X509_LU X509_V_ERR_KEYUSAGE_NO_CRL_SIGN;
MACRO_X509_LU X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE;
MACRO_X509_LU X509_V_ERR_NO_EXPLICIT_POLICY;
MACRO_X509_LU X509_V_ERR_OUT_OF_MEM;
MACRO_X509_LU X509_V_ERR_PATH_LENGTH_EXCEEDED;
MACRO_X509_LU X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED;
MACRO_X509_LU X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED;
MACRO_X509_LU X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN;
MACRO_X509_LU X509_V_ERR_SUBJECT_ISSUER_MISMATCH;
MACRO_X509_LU X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY;
MACRO_X509_LU X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE;
MACRO_X509_LU X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE;
MACRO_X509_LU X509_V_ERR_UNABLE_TO_GET_CRL;
MACRO_X509_LU X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER;
MACRO_X509_LU X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT;
MACRO_X509_LU X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY;
MACRO_X509_LU X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE;
MACRO_X509_LU X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION;
MACRO_X509_LU X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION;
MACRO_X509_LU X509_V_ERR_UNNESTED_RESOURCE;
MACRO_X509_LU X509_V_FLAG_ALLOW_PROXY_CERTS;
MACRO_X509_LU X509_V_FLAG_CB_ISSUER_CHECK;
MACRO_X509_LU X509_V_FLAG_CHECK_SS_SIGNATURE;
MACRO_X509_LU X509_V_FLAG_CRL_CHECK;
MACRO_X509_LU X509_V_FLAG_CRL_CHECK_ALL;
MACRO_X509_LU X509_V_FLAG_EXPLICIT_POLICY;
MACRO_X509_LU X509_V_FLAG_IGNORE_CRITICAL;
MACRO_X509_LU X509_V_FLAG_INHIBIT_ANY;
MACRO_X509_LU X509_V_FLAG_INHIBIT_MAP;
MACRO_X509_LU X509_V_FLAG_NOTIFY_POLICY;
MACRO_X509_LU X509_V_FLAG_POLICY_CHECK;
MACRO_X509_LU X509_V_FLAG_POLICY_MASK;
MACRO_X509_LU X509_V_FLAG_USE_CHECK_TIME;
MACRO_X509_LU X509_V_FLAG_X509_STRICT;
MACRO_X509_LU X509_V_OK;
MACRO_X509v3 X509v3_KU_CRL_SIGN;
MACRO_X509v3 X509v3_KU_DATA_ENCIPHERMENT;
MACRO_X509v3 X509v3_KU_DECIPHER_ONLY;
MACRO_X509v3 X509v3_KU_DIGITAL_SIGNATURE;
MACRO_X509v3 X509v3_KU_ENCIPHER_ONLY;
MACRO_X509v3 X509v3_KU_KEY_AGREEMENT;
MACRO_X509v3 X509v3_KU_KEY_CERT_SIGN;
MACRO_X509v3 X509v3_KU_KEY_ENCIPHERMENT;
MACRO_X509v3 X509v3_KU_NON_REPUDIATION;
MACRO_X509v3 X509v3_KU_UNDEF;
MACRO_XATTR XATTR_CREATE;
MACRO_XATTR XATTR_MAXNAMELEN;
MACRO_XATTR XATTR_NODEFAULT;
MACRO_XATTR XATTR_NOFOLLOW;
MACRO_XATTR XATTR_NOSECURITY;
MACRO_XATTR XATTR_REPLACE;
MACRO_XATTR XATTR_SHOWCOMPRESSION;
MACRO_XB XB_CLEANUP;
xdrbuf_type XDRBUF_BUFFER;
MACRO_XDRWORD XDRWORD;
xdr_op XDR_DECODE;
xdr_op XDR_ENCODE;
xdr_op XDR_FREE;
MACRO_XKU XKU_CODE_SIGN;
MACRO_XKU XKU_DVCS;
MACRO_XKU XKU_OCSP_SIGN;
MACRO_XKU XKU_SGC;
MACRO_XKU XKU_SMIME;
MACRO_XKU XKU_SSL_CLIENT;
MACRO_XKU XKU_SSL_SERVER;
MACRO_XKU XKU_TIMESTAMP;
$6DB4FE1C454B55753CB1CF245ADB8A73 XLINK_ACTUATE_AUTO;
$6DB4FE1C454B55753CB1CF245ADB8A73 XLINK_ACTUATE_NONE;
$6DB4FE1C454B55753CB1CF245ADB8A73 XLINK_ACTUATE_ONREQUEST;
$EE25B450600DB130E77B21E804467FD5 XLINK_SHOW_EMBED;
$EE25B450600DB130E77B21E804467FD5 XLINK_SHOW_NEW;
$EE25B450600DB130E77B21E804467FD5 XLINK_SHOW_NONE;
$EE25B450600DB130E77B21E804467FD5 XLINK_SHOW_REPLACE;
$4FD0ECE3FAAB0A3A3855B925214176D1 XLINK_TYPE_EXTENDED;
$4FD0ECE3FAAB0A3A3855B925214176D1 XLINK_TYPE_EXTENDED_SET;
$4FD0ECE3FAAB0A3A3855B925214176D1 XLINK_TYPE_NONE;
$4FD0ECE3FAAB0A3A3855B925214176D1 XLINK_TYPE_SIMPLE;
$1DB7270510D9B9271406B2E2F1D1DAC7 XML_ATTRIBUTE_CDATA;
$C5101608B88D7C11ADC8E88E540FCD76 XML_ATTRIBUTE_DECL;
$1DB7270510D9B9271406B2E2F1D1DAC7 XML_ATTRIBUTE_ENTITIES;
$1DB7270510D9B9271406B2E2F1D1DAC7 XML_ATTRIBUTE_ENTITY;
$1DB7270510D9B9271406B2E2F1D1DAC7 XML_ATTRIBUTE_ENUMERATION;
$8BA7C419D374795706E7AF80CA235D6C XML_ATTRIBUTE_FIXED;
$1DB7270510D9B9271406B2E2F1D1DAC7 XML_ATTRIBUTE_ID;
$1DB7270510D9B9271406B2E2F1D1DAC7 XML_ATTRIBUTE_IDREF;
$1DB7270510D9B9271406B2E2F1D1DAC7 XML_ATTRIBUTE_IDREFS;
$8BA7C419D374795706E7AF80CA235D6C XML_ATTRIBUTE_IMPLIED;
$1DB7270510D9B9271406B2E2F1D1DAC7 XML_ATTRIBUTE_NMTOKEN;
$1DB7270510D9B9271406B2E2F1D1DAC7 XML_ATTRIBUTE_NMTOKENS;
$C5101608B88D7C11ADC8E88E540FCD76 XML_ATTRIBUTE_NODE;
$8BA7C419D374795706E7AF80CA235D6C XML_ATTRIBUTE_NONE;
$1DB7270510D9B9271406B2E2F1D1DAC7 XML_ATTRIBUTE_NOTATION;
$8BA7C419D374795706E7AF80CA235D6C XML_ATTRIBUTE_REQUIRED;
$D4C59E39AC5981A3A29A91ECFFFB3F03 XML_BUFFER_ALLOC_DOUBLEIT;
$D4C59E39AC5981A3A29A91ECFFFB3F03 XML_BUFFER_ALLOC_EXACT;
$D4C59E39AC5981A3A29A91ECFFFB3F03 XML_BUFFER_ALLOC_IMMUTABLE;
$D4C59E39AC5981A3A29A91ECFFFB3F03 XML_BUFFER_ALLOC_IO;
$98923156B44D8D77A256CDD67243A530 XML_C14N_CREATE_CTXT;
$98923156B44D8D77A256CDD67243A530 XML_C14N_CREATE_STACK;
$98923156B44D8D77A256CDD67243A530 XML_C14N_INVALID_NODE;
$98923156B44D8D77A256CDD67243A530 XML_C14N_RELATIVE_NAMESPACE;
$98923156B44D8D77A256CDD67243A530 XML_C14N_REQUIRES_UTF8;
$98923156B44D8D77A256CDD67243A530 XML_C14N_UNKNOW_NODE;
$98923156B44D8D77A256CDD67243A530 XML_CATALOG_ENTRY_BROKEN;
$98923156B44D8D77A256CDD67243A530 XML_CATALOG_MISSING_ATTR;
$98923156B44D8D77A256CDD67243A530 XML_CATALOG_NOT_CATALOG;
$98923156B44D8D77A256CDD67243A530 XML_CATALOG_PREFER_VALUE;
$98923156B44D8D77A256CDD67243A530 XML_CATALOG_RECURSION;
$E720E7619019B10D7DF6FB85013EE738 XML_CATA_ALLOW_ALL;
$E720E7619019B10D7DF6FB85013EE738 XML_CATA_ALLOW_DOCUMENT;
$E720E7619019B10D7DF6FB85013EE738 XML_CATA_ALLOW_GLOBAL;
$E720E7619019B10D7DF6FB85013EE738 XML_CATA_ALLOW_NONE;
$9AB5807BE2A73FD802AD3D897EE79005 XML_CATA_PREFER_NONE;
$9AB5807BE2A73FD802AD3D897EE79005 XML_CATA_PREFER_PUBLIC;
$9AB5807BE2A73FD802AD3D897EE79005 XML_CATA_PREFER_SYSTEM;
$C5101608B88D7C11ADC8E88E540FCD76 XML_CDATA_SECTION_NODE;
$E5E7377D643AA4CAF5C6CDE0D2F168BF XML_CHAR_ENCODING_2022_JP;
$E5E7377D643AA4CAF5C6CDE0D2F168BF XML_CHAR_ENCODING_8859_1;
$E5E7377D643AA4CAF5C6CDE0D2F168BF XML_CHAR_ENCODING_8859_2;
$E5E7377D643AA4CAF5C6CDE0D2F168BF XML_CHAR_ENCODING_8859_3;
$E5E7377D643AA4CAF5C6CDE0D2F168BF XML_CHAR_ENCODING_8859_4;
$E5E7377D643AA4CAF5C6CDE0D2F168BF XML_CHAR_ENCODING_8859_5;
$E5E7377D643AA4CAF5C6CDE0D2F168BF XML_CHAR_ENCODING_8859_6;
$E5E7377D643AA4CAF5C6CDE0D2F168BF XML_CHAR_ENCODING_8859_7;
$E5E7377D643AA4CAF5C6CDE0D2F168BF XML_CHAR_ENCODING_8859_8;
$E5E7377D643AA4CAF5C6CDE0D2F168BF XML_CHAR_ENCODING_8859_9;
$E5E7377D643AA4CAF5C6CDE0D2F168BF XML_CHAR_ENCODING_ASCII;
$E5E7377D643AA4CAF5C6CDE0D2F168BF XML_CHAR_ENCODING_EBCDIC;
$E5E7377D643AA4CAF5C6CDE0D2F168BF XML_CHAR_ENCODING_ERROR;
$E5E7377D643AA4CAF5C6CDE0D2F168BF XML_CHAR_ENCODING_EUC_JP;
$E5E7377D643AA4CAF5C6CDE0D2F168BF XML_CHAR_ENCODING_NONE;
$E5E7377D643AA4CAF5C6CDE0D2F168BF XML_CHAR_ENCODING_SHIFT_JIS;
$E5E7377D643AA4CAF5C6CDE0D2F168BF XML_CHAR_ENCODING_UCS2;
$E5E7377D643AA4CAF5C6CDE0D2F168BF XML_CHAR_ENCODING_UCS4BE;
$E5E7377D643AA4CAF5C6CDE0D2F168BF XML_CHAR_ENCODING_UCS4LE;
$E5E7377D643AA4CAF5C6CDE0D2F168BF XML_CHAR_ENCODING_UCS4_2143;
$E5E7377D643AA4CAF5C6CDE0D2F168BF XML_CHAR_ENCODING_UCS4_3412;
$E5E7377D643AA4CAF5C6CDE0D2F168BF XML_CHAR_ENCODING_UTF16BE;
$E5E7377D643AA4CAF5C6CDE0D2F168BF XML_CHAR_ENCODING_UTF16LE;
$E5E7377D643AA4CAF5C6CDE0D2F168BF XML_CHAR_ENCODING_UTF8;
$98923156B44D8D77A256CDD67243A530 XML_CHECK_ENTITY_TYPE;
$98923156B44D8D77A256CDD67243A530 XML_CHECK_FOUND_ATTRIBUTE;
$98923156B44D8D77A256CDD67243A530 XML_CHECK_FOUND_CDATA;
$98923156B44D8D77A256CDD67243A530 XML_CHECK_FOUND_COMMENT;
$98923156B44D8D77A256CDD67243A530 XML_CHECK_FOUND_DOCTYPE;
$98923156B44D8D77A256CDD67243A530 XML_CHECK_FOUND_ELEMENT;
$98923156B44D8D77A256CDD67243A530 XML_CHECK_FOUND_ENTITY;
$98923156B44D8D77A256CDD67243A530 XML_CHECK_FOUND_ENTITYREF;
$98923156B44D8D77A256CDD67243A530 XML_CHECK_FOUND_FRAGMENT;
$98923156B44D8D77A256CDD67243A530 XML_CHECK_FOUND_NOTATION;
$98923156B44D8D77A256CDD67243A530 XML_CHECK_FOUND_PI;
$98923156B44D8D77A256CDD67243A530 XML_CHECK_FOUND_TEXT;
$98923156B44D8D77A256CDD67243A530 XML_CHECK_NAME_NOT_NULL;
$98923156B44D8D77A256CDD67243A530 XML_CHECK_NOT_ATTR;
$98923156B44D8D77A256CDD67243A530 XML_CHECK_NOT_ATTR_DECL;
$98923156B44D8D77A256CDD67243A530 XML_CHECK_NOT_DTD;
$98923156B44D8D77A256CDD67243A530 XML_CHECK_NOT_ELEM_DECL;
$98923156B44D8D77A256CDD67243A530 XML_CHECK_NOT_ENTITY_DECL;
$98923156B44D8D77A256CDD67243A530 XML_CHECK_NOT_NCNAME;
$98923156B44D8D77A256CDD67243A530 XML_CHECK_NOT_NS_DECL;
$98923156B44D8D77A256CDD67243A530 XML_CHECK_NOT_UTF8;
$98923156B44D8D77A256CDD67243A530 XML_CHECK_NO_DICT;
$98923156B44D8D77A256CDD67243A530 XML_CHECK_NO_DOC;
$98923156B44D8D77A256CDD67243A530 XML_CHECK_NO_ELEM;
$98923156B44D8D77A256CDD67243A530 XML_CHECK_NO_HREF;
$98923156B44D8D77A256CDD67243A530 XML_CHECK_NO_NAME;
$98923156B44D8D77A256CDD67243A530 XML_CHECK_NO_NEXT;
$98923156B44D8D77A256CDD67243A530 XML_CHECK_NO_PARENT;
$98923156B44D8D77A256CDD67243A530 XML_CHECK_NO_PREV;
$98923156B44D8D77A256CDD67243A530 XML_CHECK_NS_ANCESTOR;
$98923156B44D8D77A256CDD67243A530 XML_CHECK_NS_SCOPE;
$98923156B44D8D77A256CDD67243A530 XML_CHECK_OUTSIDE_DICT;
$98923156B44D8D77A256CDD67243A530 XML_CHECK_UNKNOWN_NODE;
$98923156B44D8D77A256CDD67243A530 XML_CHECK_WRONG_DOC;
$98923156B44D8D77A256CDD67243A530 XML_CHECK_WRONG_NAME;
$98923156B44D8D77A256CDD67243A530 XML_CHECK_WRONG_NEXT;
$98923156B44D8D77A256CDD67243A530 XML_CHECK_WRONG_PARENT;
$98923156B44D8D77A256CDD67243A530 XML_CHECK_WRONG_PREV;
$C5101608B88D7C11ADC8E88E540FCD76 XML_COMMENT_NODE;
MACRO_XML XML_COMPLETE_ATTRS;
MACRO_XML XML_DETECT_IDS;
$C5101608B88D7C11ADC8E88E540FCD76 XML_DOCB_DOCUMENT_NODE;
$C5101608B88D7C11ADC8E88E540FCD76 XML_DOCUMENT_FRAG_NODE;
$C5101608B88D7C11ADC8E88E540FCD76 XML_DOCUMENT_NODE;
$C5101608B88D7C11ADC8E88E540FCD76 XML_DOCUMENT_TYPE_NODE;
$77D6BC159AA5DA7BD67BECF2A12D0ED9 XML_DOC_DTDVALID;
$77D6BC159AA5DA7BD67BECF2A12D0ED9 XML_DOC_HTML;
$77D6BC159AA5DA7BD67BECF2A12D0ED9 XML_DOC_INTERNAL;
$77D6BC159AA5DA7BD67BECF2A12D0ED9 XML_DOC_NSVALID;
$77D6BC159AA5DA7BD67BECF2A12D0ED9 XML_DOC_OLD10;
$77D6BC159AA5DA7BD67BECF2A12D0ED9 XML_DOC_USERBUILT;
$77D6BC159AA5DA7BD67BECF2A12D0ED9 XML_DOC_WELLFORMED;
$77D6BC159AA5DA7BD67BECF2A12D0ED9 XML_DOC_XINCLUDE;
$98923156B44D8D77A256CDD67243A530 XML_DTD_ATTRIBUTE_DEFAULT;
$98923156B44D8D77A256CDD67243A530 XML_DTD_ATTRIBUTE_REDEFINED;
$98923156B44D8D77A256CDD67243A530 XML_DTD_ATTRIBUTE_VALUE;
$98923156B44D8D77A256CDD67243A530 XML_DTD_CONTENT_ERROR;
$98923156B44D8D77A256CDD67243A530 XML_DTD_CONTENT_MODEL;
$98923156B44D8D77A256CDD67243A530 XML_DTD_CONTENT_NOT_DETERMINIST;
$98923156B44D8D77A256CDD67243A530 XML_DTD_DIFFERENT_PREFIX;
$98923156B44D8D77A256CDD67243A530 XML_DTD_DUP_TOKEN;
$98923156B44D8D77A256CDD67243A530 XML_DTD_ELEM_DEFAULT_NAMESPACE;
$98923156B44D8D77A256CDD67243A530 XML_DTD_ELEM_NAMESPACE;
$98923156B44D8D77A256CDD67243A530 XML_DTD_ELEM_REDEFINED;
$98923156B44D8D77A256CDD67243A530 XML_DTD_EMPTY_NOTATION;
$98923156B44D8D77A256CDD67243A530 XML_DTD_ENTITY_TYPE;
$98923156B44D8D77A256CDD67243A530 XML_DTD_ID_FIXED;
$98923156B44D8D77A256CDD67243A530 XML_DTD_ID_REDEFINED;
$98923156B44D8D77A256CDD67243A530 XML_DTD_ID_SUBSET;
$98923156B44D8D77A256CDD67243A530 XML_DTD_INVALID_CHILD;
$98923156B44D8D77A256CDD67243A530 XML_DTD_INVALID_DEFAULT;
$98923156B44D8D77A256CDD67243A530 XML_DTD_LOAD_ERROR;
$98923156B44D8D77A256CDD67243A530 XML_DTD_MISSING_ATTRIBUTE;
$98923156B44D8D77A256CDD67243A530 XML_DTD_MIXED_CORRUPT;
$98923156B44D8D77A256CDD67243A530 XML_DTD_MULTIPLE_ID;
$C5101608B88D7C11ADC8E88E540FCD76 XML_DTD_NODE;
$98923156B44D8D77A256CDD67243A530 XML_DTD_NOTATION_REDEFINED;
$98923156B44D8D77A256CDD67243A530 XML_DTD_NOTATION_VALUE;
$98923156B44D8D77A256CDD67243A530 XML_DTD_NOT_EMPTY;
$98923156B44D8D77A256CDD67243A530 XML_DTD_NOT_PCDATA;
$98923156B44D8D77A256CDD67243A530 XML_DTD_NOT_STANDALONE;
$98923156B44D8D77A256CDD67243A530 XML_DTD_NO_DOC;
$98923156B44D8D77A256CDD67243A530 XML_DTD_NO_DTD;
$98923156B44D8D77A256CDD67243A530 XML_DTD_NO_ELEM_NAME;
$98923156B44D8D77A256CDD67243A530 XML_DTD_NO_PREFIX;
$98923156B44D8D77A256CDD67243A530 XML_DTD_NO_ROOT;
$98923156B44D8D77A256CDD67243A530 XML_DTD_ROOT_NAME;
$98923156B44D8D77A256CDD67243A530 XML_DTD_STANDALONE_DEFAULTED;
$98923156B44D8D77A256CDD67243A530 XML_DTD_STANDALONE_WHITE_SPACE;
$98923156B44D8D77A256CDD67243A530 XML_DTD_UNKNOWN_ATTRIBUTE;
$98923156B44D8D77A256CDD67243A530 XML_DTD_UNKNOWN_ELEM;
$98923156B44D8D77A256CDD67243A530 XML_DTD_UNKNOWN_ENTITY;
$98923156B44D8D77A256CDD67243A530 XML_DTD_UNKNOWN_ID;
$98923156B44D8D77A256CDD67243A530 XML_DTD_UNKNOWN_NOTATION;
$98923156B44D8D77A256CDD67243A530 XML_DTD_XMLID_TYPE;
$98923156B44D8D77A256CDD67243A530 XML_DTD_XMLID_VALUE;
$A0A84DEF331DB2FC39B4CD8900FCA11B XML_ELEMENT_CONTENT_ELEMENT;
$FF6DEC2E5CE2EC2303227045BBC9CA50 XML_ELEMENT_CONTENT_MULT;
$FF6DEC2E5CE2EC2303227045BBC9CA50 XML_ELEMENT_CONTENT_ONCE;
$FF6DEC2E5CE2EC2303227045BBC9CA50 XML_ELEMENT_CONTENT_OPT;
$A0A84DEF331DB2FC39B4CD8900FCA11B XML_ELEMENT_CONTENT_OR;
$A0A84DEF331DB2FC39B4CD8900FCA11B XML_ELEMENT_CONTENT_PCDATA;
$FF6DEC2E5CE2EC2303227045BBC9CA50 XML_ELEMENT_CONTENT_PLUS;
$A0A84DEF331DB2FC39B4CD8900FCA11B XML_ELEMENT_CONTENT_SEQ;
$C5101608B88D7C11ADC8E88E540FCD76 XML_ELEMENT_DECL;
$C5101608B88D7C11ADC8E88E540FCD76 XML_ELEMENT_NODE;
$E1FDD4ACF09F0C0D97484FB628F6E577 XML_ELEMENT_TYPE_ANY;
$E1FDD4ACF09F0C0D97484FB628F6E577 XML_ELEMENT_TYPE_ELEMENT;
$E1FDD4ACF09F0C0D97484FB628F6E577 XML_ELEMENT_TYPE_EMPTY;
$E1FDD4ACF09F0C0D97484FB628F6E577 XML_ELEMENT_TYPE_MIXED;
$E1FDD4ACF09F0C0D97484FB628F6E577 XML_ELEMENT_TYPE_UNDEFINED;
$C5101608B88D7C11ADC8E88E540FCD76 XML_ENTITY_DECL;
$C5101608B88D7C11ADC8E88E540FCD76 XML_ENTITY_NODE;
$C5101608B88D7C11ADC8E88E540FCD76 XML_ENTITY_REF_NODE;
$98923156B44D8D77A256CDD67243A530 XML_ERR_ATTLIST_NOT_FINISHED;
$98923156B44D8D77A256CDD67243A530 XML_ERR_ATTLIST_NOT_STARTED;
$98923156B44D8D77A256CDD67243A530 XML_ERR_ATTRIBUTE_NOT_FINISHED;
$98923156B44D8D77A256CDD67243A530 XML_ERR_ATTRIBUTE_NOT_STARTED;
$98923156B44D8D77A256CDD67243A530 XML_ERR_ATTRIBUTE_REDEFINED;
$98923156B44D8D77A256CDD67243A530 XML_ERR_ATTRIBUTE_WITHOUT_VALUE;
$98923156B44D8D77A256CDD67243A530 XML_ERR_CDATA_NOT_FINISHED;
$98923156B44D8D77A256CDD67243A530 XML_ERR_CHARREF_AT_EOF;
$98923156B44D8D77A256CDD67243A530 XML_ERR_CHARREF_IN_DTD;
$98923156B44D8D77A256CDD67243A530 XML_ERR_CHARREF_IN_EPILOG;
$98923156B44D8D77A256CDD67243A530 XML_ERR_CHARREF_IN_PROLOG;
$98923156B44D8D77A256CDD67243A530 XML_ERR_COMMENT_NOT_FINISHED;
$98923156B44D8D77A256CDD67243A530 XML_ERR_CONDSEC_INVALID;
$98923156B44D8D77A256CDD67243A530 XML_ERR_CONDSEC_INVALID_KEYWORD;
$98923156B44D8D77A256CDD67243A530 XML_ERR_CONDSEC_NOT_FINISHED;
$98923156B44D8D77A256CDD67243A530 XML_ERR_CONDSEC_NOT_STARTED;
$98923156B44D8D77A256CDD67243A530 XML_ERR_DOCTYPE_NOT_FINISHED;
$98923156B44D8D77A256CDD67243A530 XML_ERR_DOCUMENT_EMPTY;
$98923156B44D8D77A256CDD67243A530 XML_ERR_DOCUMENT_END;
$98923156B44D8D77A256CDD67243A530 XML_ERR_DOCUMENT_START;
$98923156B44D8D77A256CDD67243A530 XML_ERR_ELEMCONTENT_NOT_FINISHED;
$98923156B44D8D77A256CDD67243A530 XML_ERR_ELEMCONTENT_NOT_STARTED;
$98923156B44D8D77A256CDD67243A530 XML_ERR_ENCODING_NAME;
$98923156B44D8D77A256CDD67243A530 XML_ERR_ENTITYREF_AT_EOF;
$98923156B44D8D77A256CDD67243A530 XML_ERR_ENTITYREF_IN_DTD;
$98923156B44D8D77A256CDD67243A530 XML_ERR_ENTITYREF_IN_EPILOG;
$98923156B44D8D77A256CDD67243A530 XML_ERR_ENTITYREF_IN_PROLOG;
$98923156B44D8D77A256CDD67243A530 XML_ERR_ENTITYREF_NO_NAME;
$98923156B44D8D77A256CDD67243A530 XML_ERR_ENTITYREF_SEMICOL_MISSING;
$98923156B44D8D77A256CDD67243A530 XML_ERR_ENTITY_BOUNDARY;
$98923156B44D8D77A256CDD67243A530 XML_ERR_ENTITY_CHAR_ERROR;
$98923156B44D8D77A256CDD67243A530 XML_ERR_ENTITY_IS_EXTERNAL;
$98923156B44D8D77A256CDD67243A530 XML_ERR_ENTITY_IS_PARAMETER;
$98923156B44D8D77A256CDD67243A530 XML_ERR_ENTITY_LOOP;
$98923156B44D8D77A256CDD67243A530 XML_ERR_ENTITY_NOT_FINISHED;
$98923156B44D8D77A256CDD67243A530 XML_ERR_ENTITY_NOT_STARTED;
$98923156B44D8D77A256CDD67243A530 XML_ERR_ENTITY_PE_INTERNAL;
$98923156B44D8D77A256CDD67243A530 XML_ERR_ENTITY_PROCESSING;
$98923156B44D8D77A256CDD67243A530 XML_ERR_EQUAL_REQUIRED;
$2B1C8C2AA87A0F529B35F14375A7741D XML_ERR_ERROR;
$98923156B44D8D77A256CDD67243A530 XML_ERR_EXTRA_CONTENT;
$98923156B44D8D77A256CDD67243A530 XML_ERR_EXT_ENTITY_STANDALONE;
$98923156B44D8D77A256CDD67243A530 XML_ERR_EXT_SUBSET_NOT_FINISHED;
$2B1C8C2AA87A0F529B35F14375A7741D XML_ERR_FATAL;
$98923156B44D8D77A256CDD67243A530 XML_ERR_GT_REQUIRED;
$98923156B44D8D77A256CDD67243A530 XML_ERR_HYPHEN_IN_COMMENT;
$98923156B44D8D77A256CDD67243A530 XML_ERR_INTERNAL_ERROR;
$98923156B44D8D77A256CDD67243A530 XML_ERR_INVALID_CHAR;
$98923156B44D8D77A256CDD67243A530 XML_ERR_INVALID_CHARREF;
$98923156B44D8D77A256CDD67243A530 XML_ERR_INVALID_DEC_CHARREF;
$98923156B44D8D77A256CDD67243A530 XML_ERR_INVALID_ENCODING;
$98923156B44D8D77A256CDD67243A530 XML_ERR_INVALID_HEX_CHARREF;
$98923156B44D8D77A256CDD67243A530 XML_ERR_INVALID_URI;
$98923156B44D8D77A256CDD67243A530 XML_ERR_LITERAL_NOT_FINISHED;
$98923156B44D8D77A256CDD67243A530 XML_ERR_LITERAL_NOT_STARTED;
$98923156B44D8D77A256CDD67243A530 XML_ERR_LTSLASH_REQUIRED;
$98923156B44D8D77A256CDD67243A530 XML_ERR_LT_IN_ATTRIBUTE;
$98923156B44D8D77A256CDD67243A530 XML_ERR_LT_REQUIRED;
$98923156B44D8D77A256CDD67243A530 XML_ERR_MISPLACED_CDATA_END;
$98923156B44D8D77A256CDD67243A530 XML_ERR_MISSING_ENCODING;
$98923156B44D8D77A256CDD67243A530 XML_ERR_MIXED_NOT_FINISHED;
$98923156B44D8D77A256CDD67243A530 XML_ERR_MIXED_NOT_STARTED;
$98923156B44D8D77A256CDD67243A530 XML_ERR_NAME_REQUIRED;
$98923156B44D8D77A256CDD67243A530 XML_ERR_NMTOKEN_REQUIRED;
$2B1C8C2AA87A0F529B35F14375A7741D XML_ERR_NONE;
$98923156B44D8D77A256CDD67243A530 XML_ERR_NOTATION_NOT_FINISHED;
$98923156B44D8D77A256CDD67243A530 XML_ERR_NOTATION_NOT_STARTED;
$98923156B44D8D77A256CDD67243A530 XML_ERR_NOTATION_PROCESSING;
$98923156B44D8D77A256CDD67243A530 XML_ERR_NOT_STANDALONE;
$98923156B44D8D77A256CDD67243A530 XML_ERR_NOT_WELL_BALANCED;
$98923156B44D8D77A256CDD67243A530 XML_ERR_NO_DTD;
$98923156B44D8D77A256CDD67243A530 XML_ERR_NO_MEMORY;
$98923156B44D8D77A256CDD67243A530 XML_ERR_NS_DECL_ERROR;
$98923156B44D8D77A256CDD67243A530 XML_ERR_OK;
$98923156B44D8D77A256CDD67243A530 XML_ERR_PCDATA_REQUIRED;
$98923156B44D8D77A256CDD67243A530 XML_ERR_PEREF_AT_EOF;
$98923156B44D8D77A256CDD67243A530 XML_ERR_PEREF_IN_EPILOG;
$98923156B44D8D77A256CDD67243A530 XML_ERR_PEREF_IN_INT_SUBSET;
$98923156B44D8D77A256CDD67243A530 XML_ERR_PEREF_IN_PROLOG;
$98923156B44D8D77A256CDD67243A530 XML_ERR_PEREF_NO_NAME;
$98923156B44D8D77A256CDD67243A530 XML_ERR_PEREF_SEMICOL_MISSING;
$98923156B44D8D77A256CDD67243A530 XML_ERR_PI_NOT_FINISHED;
$98923156B44D8D77A256CDD67243A530 XML_ERR_PI_NOT_STARTED;
$98923156B44D8D77A256CDD67243A530 XML_ERR_PUBID_REQUIRED;
$98923156B44D8D77A256CDD67243A530 XML_ERR_RESERVED_XML_NAME;
$98923156B44D8D77A256CDD67243A530 XML_ERR_SEPARATOR_REQUIRED;
$98923156B44D8D77A256CDD67243A530 XML_ERR_SPACE_REQUIRED;
$98923156B44D8D77A256CDD67243A530 XML_ERR_STANDALONE_VALUE;
$98923156B44D8D77A256CDD67243A530 XML_ERR_STRING_NOT_CLOSED;
$98923156B44D8D77A256CDD67243A530 XML_ERR_STRING_NOT_STARTED;
$98923156B44D8D77A256CDD67243A530 XML_ERR_TAG_NAME_MISMATCH;
$98923156B44D8D77A256CDD67243A530 XML_ERR_TAG_NOT_FINISHED;
$98923156B44D8D77A256CDD67243A530 XML_ERR_UNDECLARED_ENTITY;
$98923156B44D8D77A256CDD67243A530 XML_ERR_UNKNOWN_ENCODING;
$98923156B44D8D77A256CDD67243A530 XML_ERR_UNKNOWN_VERSION;
$98923156B44D8D77A256CDD67243A530 XML_ERR_UNPARSED_ENTITY;
$98923156B44D8D77A256CDD67243A530 XML_ERR_UNSUPPORTED_ENCODING;
$98923156B44D8D77A256CDD67243A530 XML_ERR_URI_FRAGMENT;
$98923156B44D8D77A256CDD67243A530 XML_ERR_URI_REQUIRED;
$98923156B44D8D77A256CDD67243A530 XML_ERR_VALUE_REQUIRED;
$98923156B44D8D77A256CDD67243A530 XML_ERR_VERSION_MISMATCH;
$98923156B44D8D77A256CDD67243A530 XML_ERR_VERSION_MISSING;
$2B1C8C2AA87A0F529B35F14375A7741D XML_ERR_WARNING;
$98923156B44D8D77A256CDD67243A530 XML_ERR_XMLDECL_NOT_FINISHED;
$98923156B44D8D77A256CDD67243A530 XML_ERR_XMLDECL_NOT_STARTED;
$2DA825ED8C2895B6F3A859CF0380522A XML_EXP_ATOM;
$2DA825ED8C2895B6F3A859CF0380522A XML_EXP_COUNT;
$2DA825ED8C2895B6F3A859CF0380522A XML_EXP_EMPTY;
$2DA825ED8C2895B6F3A859CF0380522A XML_EXP_FORBID;
$2DA825ED8C2895B6F3A859CF0380522A XML_EXP_OR;
$2DA825ED8C2895B6F3A859CF0380522A XML_EXP_SEQ;
$D46AA9DF6FBFE9D2B16063CE8CC3B5EF XML_EXTERNAL_GENERAL_PARSED_ENTITY;
$D46AA9DF6FBFE9D2B16063CE8CC3B5EF XML_EXTERNAL_GENERAL_UNPARSED_ENTITY;
$D46AA9DF6FBFE9D2B16063CE8CC3B5EF XML_EXTERNAL_PARAMETER_ENTITY;
$6C3D1F16C57240F500269E6CB726B57E XML_FROM_C14N;
$6C3D1F16C57240F500269E6CB726B57E XML_FROM_CATALOG;
$6C3D1F16C57240F500269E6CB726B57E XML_FROM_CHECK;
$6C3D1F16C57240F500269E6CB726B57E XML_FROM_DATATYPE;
$6C3D1F16C57240F500269E6CB726B57E XML_FROM_DTD;
$6C3D1F16C57240F500269E6CB726B57E XML_FROM_FTP;
$6C3D1F16C57240F500269E6CB726B57E XML_FROM_HTML;
$6C3D1F16C57240F500269E6CB726B57E XML_FROM_HTTP;
$6C3D1F16C57240F500269E6CB726B57E XML_FROM_I18N;
$6C3D1F16C57240F500269E6CB726B57E XML_FROM_IO;
$6C3D1F16C57240F500269E6CB726B57E XML_FROM_MEMORY;
$6C3D1F16C57240F500269E6CB726B57E XML_FROM_MODULE;
$6C3D1F16C57240F500269E6CB726B57E XML_FROM_NAMESPACE;
$6C3D1F16C57240F500269E6CB726B57E XML_FROM_NONE;
$6C3D1F16C57240F500269E6CB726B57E XML_FROM_OUTPUT;
$6C3D1F16C57240F500269E6CB726B57E XML_FROM_PARSER;
$6C3D1F16C57240F500269E6CB726B57E XML_FROM_REGEXP;
$6C3D1F16C57240F500269E6CB726B57E XML_FROM_RELAXNGP;
$6C3D1F16C57240F500269E6CB726B57E XML_FROM_RELAXNGV;
$6C3D1F16C57240F500269E6CB726B57E XML_FROM_SCHEMASP;
$6C3D1F16C57240F500269E6CB726B57E XML_FROM_SCHEMASV;
$6C3D1F16C57240F500269E6CB726B57E XML_FROM_SCHEMATRONV;
$6C3D1F16C57240F500269E6CB726B57E XML_FROM_TREE;
$6C3D1F16C57240F500269E6CB726B57E XML_FROM_VALID;
$6C3D1F16C57240F500269E6CB726B57E XML_FROM_WRITER;
$6C3D1F16C57240F500269E6CB726B57E XML_FROM_XINCLUDE;
$6C3D1F16C57240F500269E6CB726B57E XML_FROM_XPATH;
$6C3D1F16C57240F500269E6CB726B57E XML_FROM_XPOINTER;
$6C3D1F16C57240F500269E6CB726B57E XML_FROM_XSLT;
$98923156B44D8D77A256CDD67243A530 XML_FTP_ACCNT;
$98923156B44D8D77A256CDD67243A530 XML_FTP_EPSV_ANSWER;
$98923156B44D8D77A256CDD67243A530 XML_FTP_PASV_ANSWER;
$98923156B44D8D77A256CDD67243A530 XML_FTP_URL_SYNTAX;
$C5101608B88D7C11ADC8E88E540FCD76 XML_HTML_DOCUMENT_NODE;
$98923156B44D8D77A256CDD67243A530 XML_HTML_STRUCURE_ERROR;
$98923156B44D8D77A256CDD67243A530 XML_HTML_UNKNOWN_TAG;
$98923156B44D8D77A256CDD67243A530 XML_HTTP_UNKNOWN_HOST;
$98923156B44D8D77A256CDD67243A530 XML_HTTP_URL_SYNTAX;
$98923156B44D8D77A256CDD67243A530 XML_HTTP_USE_IP;
$98923156B44D8D77A256CDD67243A530 XML_I18N_CONV_FAILED;
$98923156B44D8D77A256CDD67243A530 XML_I18N_EXCESS_HANDLER;
$98923156B44D8D77A256CDD67243A530 XML_I18N_NO_HANDLER;
$98923156B44D8D77A256CDD67243A530 XML_I18N_NO_NAME;
$98923156B44D8D77A256CDD67243A530 XML_I18N_NO_OUTPUT;
$D46AA9DF6FBFE9D2B16063CE8CC3B5EF XML_INTERNAL_GENERAL_ENTITY;
$D46AA9DF6FBFE9D2B16063CE8CC3B5EF XML_INTERNAL_PARAMETER_ENTITY;
$D46AA9DF6FBFE9D2B16063CE8CC3B5EF XML_INTERNAL_PREDEFINED_ENTITY;
$98923156B44D8D77A256CDD67243A530 XML_IO_BUFFER_FULL;
$98923156B44D8D77A256CDD67243A530 XML_IO_EACCES;
$98923156B44D8D77A256CDD67243A530 XML_IO_EADDRINUSE;
$98923156B44D8D77A256CDD67243A530 XML_IO_EAFNOSUPPORT;
$98923156B44D8D77A256CDD67243A530 XML_IO_EAGAIN;
$98923156B44D8D77A256CDD67243A530 XML_IO_EALREADY;
$98923156B44D8D77A256CDD67243A530 XML_IO_EBADF;
$98923156B44D8D77A256CDD67243A530 XML_IO_EBADMSG;
$98923156B44D8D77A256CDD67243A530 XML_IO_EBUSY;
$98923156B44D8D77A256CDD67243A530 XML_IO_ECANCELED;
$98923156B44D8D77A256CDD67243A530 XML_IO_ECHILD;
$98923156B44D8D77A256CDD67243A530 XML_IO_ECONNREFUSED;
$98923156B44D8D77A256CDD67243A530 XML_IO_EDEADLK;
$98923156B44D8D77A256CDD67243A530 XML_IO_EDOM;
$98923156B44D8D77A256CDD67243A530 XML_IO_EEXIST;
$98923156B44D8D77A256CDD67243A530 XML_IO_EFAULT;
$98923156B44D8D77A256CDD67243A530 XML_IO_EFBIG;
$98923156B44D8D77A256CDD67243A530 XML_IO_EINPROGRESS;
$98923156B44D8D77A256CDD67243A530 XML_IO_EINTR;
$98923156B44D8D77A256CDD67243A530 XML_IO_EINVAL;
$98923156B44D8D77A256CDD67243A530 XML_IO_EIO;
$98923156B44D8D77A256CDD67243A530 XML_IO_EISCONN;
$98923156B44D8D77A256CDD67243A530 XML_IO_EISDIR;
$98923156B44D8D77A256CDD67243A530 XML_IO_EMFILE;
$98923156B44D8D77A256CDD67243A530 XML_IO_EMLINK;
$98923156B44D8D77A256CDD67243A530 XML_IO_EMSGSIZE;
$98923156B44D8D77A256CDD67243A530 XML_IO_ENAMETOOLONG;
$98923156B44D8D77A256CDD67243A530 XML_IO_ENCODER;
$98923156B44D8D77A256CDD67243A530 XML_IO_ENETUNREACH;
$98923156B44D8D77A256CDD67243A530 XML_IO_ENFILE;
$98923156B44D8D77A256CDD67243A530 XML_IO_ENODEV;
$98923156B44D8D77A256CDD67243A530 XML_IO_ENOENT;
$98923156B44D8D77A256CDD67243A530 XML_IO_ENOEXEC;
$98923156B44D8D77A256CDD67243A530 XML_IO_ENOLCK;
$98923156B44D8D77A256CDD67243A530 XML_IO_ENOMEM;
$98923156B44D8D77A256CDD67243A530 XML_IO_ENOSPC;
$98923156B44D8D77A256CDD67243A530 XML_IO_ENOSYS;
$98923156B44D8D77A256CDD67243A530 XML_IO_ENOTDIR;
$98923156B44D8D77A256CDD67243A530 XML_IO_ENOTEMPTY;
$98923156B44D8D77A256CDD67243A530 XML_IO_ENOTSOCK;
$98923156B44D8D77A256CDD67243A530 XML_IO_ENOTSUP;
$98923156B44D8D77A256CDD67243A530 XML_IO_ENOTTY;
$98923156B44D8D77A256CDD67243A530 XML_IO_ENXIO;
$98923156B44D8D77A256CDD67243A530 XML_IO_EPERM;
$98923156B44D8D77A256CDD67243A530 XML_IO_EPIPE;
$98923156B44D8D77A256CDD67243A530 XML_IO_ERANGE;
$98923156B44D8D77A256CDD67243A530 XML_IO_EROFS;
$98923156B44D8D77A256CDD67243A530 XML_IO_ESPIPE;
$98923156B44D8D77A256CDD67243A530 XML_IO_ESRCH;
$98923156B44D8D77A256CDD67243A530 XML_IO_ETIMEDOUT;
$98923156B44D8D77A256CDD67243A530 XML_IO_EXDEV;
$98923156B44D8D77A256CDD67243A530 XML_IO_FLUSH;
$98923156B44D8D77A256CDD67243A530 XML_IO_LOAD_ERROR;
$98923156B44D8D77A256CDD67243A530 XML_IO_NETWORK_ATTEMPT;
$98923156B44D8D77A256CDD67243A530 XML_IO_NO_INPUT;
$98923156B44D8D77A256CDD67243A530 XML_IO_UNKNOWN;
$98923156B44D8D77A256CDD67243A530 XML_IO_WRITE;
MACRO_XML_MAX XML_MAX_NAMELEN;
MACRO_XML_MAX XML_MAX_TEXT_LENGTH;
$98923156B44D8D77A256CDD67243A530 XML_MODULE_CLOSE;
$72C7479B17D42DC9DFBAFDAD1641A379 XML_MODULE_LAZY;
$72C7479B17D42DC9DFBAFDAD1641A379 XML_MODULE_LOCAL;
$98923156B44D8D77A256CDD67243A530 XML_MODULE_OPEN;
$C5101608B88D7C11ADC8E88E540FCD76 XML_NAMESPACE_DECL;
$C5101608B88D7C11ADC8E88E540FCD76 XML_NOTATION_NODE;
$98923156B44D8D77A256CDD67243A530 XML_NS_ERR_ATTRIBUTE_REDEFINED;
$98923156B44D8D77A256CDD67243A530 XML_NS_ERR_COLON;
$98923156B44D8D77A256CDD67243A530 XML_NS_ERR_EMPTY;
$98923156B44D8D77A256CDD67243A530 XML_NS_ERR_QNAME;
$98923156B44D8D77A256CDD67243A530 XML_NS_ERR_UNDEFINED_NAMESPACE;
$98923156B44D8D77A256CDD67243A530 XML_NS_ERR_XML_NAMESPACE;
$87AADCA8575A383F1076ADE10D123F6C XML_PARSER_ATTRIBUTE_VALUE;
$87AADCA8575A383F1076ADE10D123F6C XML_PARSER_CDATA_SECTION;
$87AADCA8575A383F1076ADE10D123F6C XML_PARSER_COMMENT;
$87AADCA8575A383F1076ADE10D123F6C XML_PARSER_CONTENT;
$DD8E034716BD0047246A4D50EFF6F7DB XML_PARSER_DEFAULTATTRS;
$87AADCA8575A383F1076ADE10D123F6C XML_PARSER_DTD;
$87AADCA8575A383F1076ADE10D123F6C XML_PARSER_END_TAG;
$87AADCA8575A383F1076ADE10D123F6C XML_PARSER_ENTITY_DECL;
$87AADCA8575A383F1076ADE10D123F6C XML_PARSER_ENTITY_VALUE;
$87AADCA8575A383F1076ADE10D123F6C XML_PARSER_EOF;
$87AADCA8575A383F1076ADE10D123F6C XML_PARSER_EPILOG;
$87AADCA8575A383F1076ADE10D123F6C XML_PARSER_IGNORE;
$DD8E034716BD0047246A4D50EFF6F7DB XML_PARSER_LOADDTD;
$87AADCA8575A383F1076ADE10D123F6C XML_PARSER_MISC;
$87AADCA8575A383F1076ADE10D123F6C XML_PARSER_PI;
$87AADCA8575A383F1076ADE10D123F6C XML_PARSER_PROLOG;
$87AADCA8575A383F1076ADE10D123F6C XML_PARSER_PUBLIC_LITERAL;
$DE419B5C0B7C486303E1E193CE859546 XML_PARSER_SEVERITY_ERROR;
$DE419B5C0B7C486303E1E193CE859546 XML_PARSER_SEVERITY_VALIDITY_ERROR;
$DE419B5C0B7C486303E1E193CE859546 XML_PARSER_SEVERITY_VALIDITY_WARNING;
$DE419B5C0B7C486303E1E193CE859546 XML_PARSER_SEVERITY_WARNING;
$87AADCA8575A383F1076ADE10D123F6C XML_PARSER_START;
$87AADCA8575A383F1076ADE10D123F6C XML_PARSER_START_TAG;
$DD8E034716BD0047246A4D50EFF6F7DB XML_PARSER_SUBST_ENTITIES;
$87AADCA8575A383F1076ADE10D123F6C XML_PARSER_SYSTEM_LITERAL;
$DD8E034716BD0047246A4D50EFF6F7DB XML_PARSER_VALIDATE;
$B1615B6EE754A1E9BE91669222F3B978 XML_PARSE_COMPACT;
$D3CAE1E2FD75A1BAED0D73857BABBB1F XML_PARSE_DOM;
$B1615B6EE754A1E9BE91669222F3B978 XML_PARSE_DTDATTR;
$B1615B6EE754A1E9BE91669222F3B978 XML_PARSE_DTDLOAD;
$B1615B6EE754A1E9BE91669222F3B978 XML_PARSE_DTDVALID;
$B1615B6EE754A1E9BE91669222F3B978 XML_PARSE_HUGE;
$B1615B6EE754A1E9BE91669222F3B978 XML_PARSE_NOBASEFIX;
$B1615B6EE754A1E9BE91669222F3B978 XML_PARSE_NOBLANKS;
$B1615B6EE754A1E9BE91669222F3B978 XML_PARSE_NOCDATA;
$B1615B6EE754A1E9BE91669222F3B978 XML_PARSE_NODICT;
$B1615B6EE754A1E9BE91669222F3B978 XML_PARSE_NOENT;
$B1615B6EE754A1E9BE91669222F3B978 XML_PARSE_NOERROR;
$B1615B6EE754A1E9BE91669222F3B978 XML_PARSE_NONET;
$B1615B6EE754A1E9BE91669222F3B978 XML_PARSE_NOWARNING;
$B1615B6EE754A1E9BE91669222F3B978 XML_PARSE_NOXINCNODE;
$B1615B6EE754A1E9BE91669222F3B978 XML_PARSE_NSCLEAN;
$B1615B6EE754A1E9BE91669222F3B978 XML_PARSE_OLD10;
$B1615B6EE754A1E9BE91669222F3B978 XML_PARSE_OLDSAX;
$B1615B6EE754A1E9BE91669222F3B978 XML_PARSE_PEDANTIC;
$D3CAE1E2FD75A1BAED0D73857BABBB1F XML_PARSE_PUSH_DOM;
$D3CAE1E2FD75A1BAED0D73857BABBB1F XML_PARSE_PUSH_SAX;
$D3CAE1E2FD75A1BAED0D73857BABBB1F XML_PARSE_READER;
$B1615B6EE754A1E9BE91669222F3B978 XML_PARSE_RECOVER;
$D3CAE1E2FD75A1BAED0D73857BABBB1F XML_PARSE_SAX;
$B1615B6EE754A1E9BE91669222F3B978 XML_PARSE_SAX1;
$D3CAE1E2FD75A1BAED0D73857BABBB1F XML_PARSE_UNKNOWN;
$B1615B6EE754A1E9BE91669222F3B978 XML_PARSE_XINCLUDE;
$E52E208B92D65F4D665A1F0C1924EDE5 XML_PATTERN_DEFAULT;
$E52E208B92D65F4D665A1F0C1924EDE5 XML_PATTERN_XPATH;
$E52E208B92D65F4D665A1F0C1924EDE5 XML_PATTERN_XSFIELD;
$E52E208B92D65F4D665A1F0C1924EDE5 XML_PATTERN_XSSEL;
$C5101608B88D7C11ADC8E88E540FCD76 XML_PI_NODE;
$9D11CEBD141858D27EC341F596A794AC XML_READER_TYPE_ATTRIBUTE;
$9D11CEBD141858D27EC341F596A794AC XML_READER_TYPE_CDATA;
$9D11CEBD141858D27EC341F596A794AC XML_READER_TYPE_COMMENT;
$9D11CEBD141858D27EC341F596A794AC XML_READER_TYPE_DOCUMENT;
$9D11CEBD141858D27EC341F596A794AC XML_READER_TYPE_DOCUMENT_FRAGMENT;
$9D11CEBD141858D27EC341F596A794AC XML_READER_TYPE_DOCUMENT_TYPE;
$9D11CEBD141858D27EC341F596A794AC XML_READER_TYPE_ELEMENT;
$9D11CEBD141858D27EC341F596A794AC XML_READER_TYPE_END_ELEMENT;
$9D11CEBD141858D27EC341F596A794AC XML_READER_TYPE_END_ENTITY;
$9D11CEBD141858D27EC341F596A794AC XML_READER_TYPE_ENTITY;
$9D11CEBD141858D27EC341F596A794AC XML_READER_TYPE_ENTITY_REFERENCE;
$9D11CEBD141858D27EC341F596A794AC XML_READER_TYPE_NONE;
$9D11CEBD141858D27EC341F596A794AC XML_READER_TYPE_NOTATION;
$9D11CEBD141858D27EC341F596A794AC XML_READER_TYPE_PROCESSING_INSTRUCTION;
$9D11CEBD141858D27EC341F596A794AC XML_READER_TYPE_SIGNIFICANT_WHITESPACE;
$9D11CEBD141858D27EC341F596A794AC XML_READER_TYPE_TEXT;
$9D11CEBD141858D27EC341F596A794AC XML_READER_TYPE_WHITESPACE;
$9D11CEBD141858D27EC341F596A794AC XML_READER_TYPE_XML_DECLARATION;
$98923156B44D8D77A256CDD67243A530 XML_REGEXP_COMPILE_ERROR;
$423F66BA35E8428C801C88EA56951FA7 XML_RELAXNGP_CRNG;
$423F66BA35E8428C801C88EA56951FA7 XML_RELAXNGP_FREE_DOC;
$423F66BA35E8428C801C88EA56951FA7 XML_RELAXNGP_NONE;
$4E7DAA04C1544F5CC93F7C5C5ABE1E5E XML_RELAXNG_ERR_ATTREXTRANS;
$4E7DAA04C1544F5CC93F7C5C5ABE1E5E XML_RELAXNG_ERR_ATTRNAME;
$4E7DAA04C1544F5CC93F7C5C5ABE1E5E XML_RELAXNG_ERR_ATTRNONS;
$4E7DAA04C1544F5CC93F7C5C5ABE1E5E XML_RELAXNG_ERR_ATTRVALID;
$4E7DAA04C1544F5CC93F7C5C5ABE1E5E XML_RELAXNG_ERR_ATTRWRONGNS;
$4E7DAA04C1544F5CC93F7C5C5ABE1E5E XML_RELAXNG_ERR_CONTENTVALID;
$4E7DAA04C1544F5CC93F7C5C5ABE1E5E XML_RELAXNG_ERR_DATAELEM;
$4E7DAA04C1544F5CC93F7C5C5ABE1E5E XML_RELAXNG_ERR_DATATYPE;
$4E7DAA04C1544F5CC93F7C5C5ABE1E5E XML_RELAXNG_ERR_DUPID;
$4E7DAA04C1544F5CC93F7C5C5ABE1E5E XML_RELAXNG_ERR_ELEMEXTRANS;
$4E7DAA04C1544F5CC93F7C5C5ABE1E5E XML_RELAXNG_ERR_ELEMNAME;
$4E7DAA04C1544F5CC93F7C5C5ABE1E5E XML_RELAXNG_ERR_ELEMNONS;
$4E7DAA04C1544F5CC93F7C5C5ABE1E5E XML_RELAXNG_ERR_ELEMNOTEMPTY;
$4E7DAA04C1544F5CC93F7C5C5ABE1E5E XML_RELAXNG_ERR_ELEMWRONG;
$4E7DAA04C1544F5CC93F7C5C5ABE1E5E XML_RELAXNG_ERR_ELEMWRONGNS;
$4E7DAA04C1544F5CC93F7C5C5ABE1E5E XML_RELAXNG_ERR_EXTRACONTENT;
$4E7DAA04C1544F5CC93F7C5C5ABE1E5E XML_RELAXNG_ERR_EXTRADATA;
$4E7DAA04C1544F5CC93F7C5C5ABE1E5E XML_RELAXNG_ERR_INTEREXTRA;
$4E7DAA04C1544F5CC93F7C5C5ABE1E5E XML_RELAXNG_ERR_INTERNAL;
$4E7DAA04C1544F5CC93F7C5C5ABE1E5E XML_RELAXNG_ERR_INTERNODATA;
$4E7DAA04C1544F5CC93F7C5C5ABE1E5E XML_RELAXNG_ERR_INTERSEQ;
$4E7DAA04C1544F5CC93F7C5C5ABE1E5E XML_RELAXNG_ERR_INVALIDATTR;
$4E7DAA04C1544F5CC93F7C5C5ABE1E5E XML_RELAXNG_ERR_LACKDATA;
$4E7DAA04C1544F5CC93F7C5C5ABE1E5E XML_RELAXNG_ERR_LIST;
$4E7DAA04C1544F5CC93F7C5C5ABE1E5E XML_RELAXNG_ERR_LISTELEM;
$4E7DAA04C1544F5CC93F7C5C5ABE1E5E XML_RELAXNG_ERR_LISTEMPTY;
$4E7DAA04C1544F5CC93F7C5C5ABE1E5E XML_RELAXNG_ERR_LISTEXTRA;
$4E7DAA04C1544F5CC93F7C5C5ABE1E5E XML_RELAXNG_ERR_MEMORY;
$4E7DAA04C1544F5CC93F7C5C5ABE1E5E XML_RELAXNG_ERR_NODEFINE;
$4E7DAA04C1544F5CC93F7C5C5ABE1E5E XML_RELAXNG_ERR_NOELEM;
$4E7DAA04C1544F5CC93F7C5C5ABE1E5E XML_RELAXNG_ERR_NOGRAMMAR;
$4E7DAA04C1544F5CC93F7C5C5ABE1E5E XML_RELAXNG_ERR_NOSTATE;
$4E7DAA04C1544F5CC93F7C5C5ABE1E5E XML_RELAXNG_ERR_NOTELEM;
$4E7DAA04C1544F5CC93F7C5C5ABE1E5E XML_RELAXNG_ERR_TEXTWRONG;
$4E7DAA04C1544F5CC93F7C5C5ABE1E5E XML_RELAXNG_ERR_TYPE;
$4E7DAA04C1544F5CC93F7C5C5ABE1E5E XML_RELAXNG_ERR_TYPECMP;
$4E7DAA04C1544F5CC93F7C5C5ABE1E5E XML_RELAXNG_ERR_TYPEVAL;
$4E7DAA04C1544F5CC93F7C5C5ABE1E5E XML_RELAXNG_ERR_VALELEM;
$4E7DAA04C1544F5CC93F7C5C5ABE1E5E XML_RELAXNG_ERR_VALUE;
$4E7DAA04C1544F5CC93F7C5C5ABE1E5E XML_RELAXNG_OK;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_ANYNAME_ATTR_ANCESTOR;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_ATTRIBUTE_CHILDREN;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_ATTRIBUTE_CONTENT;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_ATTRIBUTE_EMPTY;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_ATTRIBUTE_NOOP;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_ATTR_CONFLICT;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_CHOICE_CONTENT;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_CHOICE_EMPTY;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_CREATE_FAILURE;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_DATA_CONTENT;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_DEFINE_CREATE_FAILED;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_DEFINE_EMPTY;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_DEFINE_MISSING;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_DEFINE_NAME_MISSING;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_DEF_CHOICE_AND_INTERLEAVE;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_ELEMENT_CONTENT;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_ELEMENT_EMPTY;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_ELEMENT_NAME;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_ELEMENT_NO_CONTENT;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_ELEM_CONTENT_EMPTY;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_ELEM_CONTENT_ERROR;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_ELEM_TEXT_CONFLICT;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_EMPTY;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_EMPTY_CONSTRUCT;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_EMPTY_CONTENT;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_EMPTY_NOT_EMPTY;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_ERROR_TYPE_LIB;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_EXCEPT_EMPTY;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_EXCEPT_MISSING;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_EXCEPT_MULTIPLE;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_EXCEPT_NO_CONTENT;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_EXTERNALREF_EMTPY;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_EXTERNALREF_RECURSE;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_EXTERNAL_REF_FAILURE;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_FORBIDDEN_ATTRIBUTE;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_FOREIGN_ELEMENT;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_GRAMMAR_CONTENT;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_GRAMMAR_EMPTY;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_GRAMMAR_MISSING;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_GRAMMAR_NO_START;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_GROUP_ATTR_CONFLICT;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_HREF_ERROR;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_INCLUDE_EMPTY;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_INCLUDE_FAILURE;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_INCLUDE_RECURSE;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_INTERLEAVE_ADD;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_INTERLEAVE_CREATE_FAILED;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_INTERLEAVE_EMPTY;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_INTERLEAVE_NO_CONTENT;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_INVALID_DEFINE_NAME;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_INVALID_URI;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_INVALID_VALUE;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_MISSING_HREF;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_NAME_MISSING;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_NEED_COMBINE;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_NOTALLOWED_NOT_EMPTY;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_NSNAME_ATTR_ANCESTOR;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_NSNAME_NO_NS;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_PARAM_FORBIDDEN;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_PARAM_NAME_MISSING;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_PARENTREF_CREATE_FAILED;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_PARENTREF_NAME_INVALID;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_PARENTREF_NOT_EMPTY;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_PARENTREF_NO_NAME;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_PARENTREF_NO_PARENT;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_PARSE_ERROR;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_PAT_ANYNAME_EXCEPT_ANYNAME;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_PAT_ATTR_ATTR;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_PAT_ATTR_ELEM;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_PAT_DATA_EXCEPT_ATTR;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_PAT_DATA_EXCEPT_ELEM;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_PAT_DATA_EXCEPT_EMPTY;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_PAT_DATA_EXCEPT_GROUP;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_PAT_DATA_EXCEPT_INTERLEAVE;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_PAT_DATA_EXCEPT_LIST;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_PAT_DATA_EXCEPT_ONEMORE;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_PAT_DATA_EXCEPT_REF;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_PAT_DATA_EXCEPT_TEXT;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_PAT_LIST_ATTR;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_PAT_LIST_ELEM;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_PAT_LIST_INTERLEAVE;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_PAT_LIST_LIST;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_PAT_LIST_REF;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_PAT_LIST_TEXT;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_PAT_NSNAME_EXCEPT_ANYNAME;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_PAT_NSNAME_EXCEPT_NSNAME;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_PAT_ONEMORE_GROUP_ATTR;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_PAT_ONEMORE_INTERLEAVE_ATTR;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_PAT_START_ATTR;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_PAT_START_DATA;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_PAT_START_EMPTY;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_PAT_START_GROUP;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_PAT_START_INTERLEAVE;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_PAT_START_LIST;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_PAT_START_ONEMORE;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_PAT_START_TEXT;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_PAT_START_VALUE;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_PREFIX_UNDEFINED;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_REF_CREATE_FAILED;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_REF_CYCLE;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_REF_NAME_INVALID;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_REF_NOT_EMPTY;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_REF_NO_DEF;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_REF_NO_NAME;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_START_CHOICE_AND_INTERLEAVE;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_START_CONTENT;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_START_EMPTY;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_START_MISSING;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_TEXT_EXPECTED;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_TEXT_HAS_CHILD;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_TYPE_MISSING;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_TYPE_NOT_FOUND;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_TYPE_VALUE;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_UNKNOWN_ATTRIBUTE;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_UNKNOWN_COMBINE;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_UNKNOWN_CONSTRUCT;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_UNKNOWN_TYPE_LIB;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_URI_FRAGMENT;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_URI_NOT_ABSOLUTE;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_VALUE_EMPTY;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_VALUE_NO_CONTENT;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_XMLNS_NAME;
$98923156B44D8D77A256CDD67243A530 XML_RNGP_XML_NS;
$1E2DDA021D687B95C32B4B8734BFFE5E XML_SAVE_AS_HTML;
$1E2DDA021D687B95C32B4B8734BFFE5E XML_SAVE_AS_XML;
$98923156B44D8D77A256CDD67243A530 XML_SAVE_CHAR_INVALID;
$1E2DDA021D687B95C32B4B8734BFFE5E XML_SAVE_FORMAT;
$98923156B44D8D77A256CDD67243A530 XML_SAVE_NOT_UTF8;
$1E2DDA021D687B95C32B4B8734BFFE5E XML_SAVE_NO_DECL;
$98923156B44D8D77A256CDD67243A530 XML_SAVE_NO_DOCTYPE;
$1E2DDA021D687B95C32B4B8734BFFE5E XML_SAVE_NO_EMPTY;
$1E2DDA021D687B95C32B4B8734BFFE5E XML_SAVE_NO_XHTML;
$98923156B44D8D77A256CDD67243A530 XML_SAVE_UNKNOWN_ENCODING;
$1E2DDA021D687B95C32B4B8734BFFE5E XML_SAVE_XHTML;
MACRO_XML XML_SAX2_MAGIC;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_AG_PROPS_CORRECT;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_ATTRFORMDEFAULT_VALUE;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_ATTRGRP_NONAME_NOREF;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_ATTR_NONAME_NOREF;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_AU_PROPS_CORRECT;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_AU_PROPS_CORRECT_2;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_A_PROPS_CORRECT_2;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_A_PROPS_CORRECT_3;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_COMPLEXTYPE_NONAME_NOREF;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_COS_ALL_LIMITED;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_COS_CT_EXTENDS_1_1;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_COS_CT_EXTENDS_1_2;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_COS_CT_EXTENDS_1_3;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_COS_ST_DERIVED_OK_2_1;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_COS_ST_DERIVED_OK_2_2;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_COS_ST_RESTRICTS_1_1;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_COS_ST_RESTRICTS_1_2;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_COS_ST_RESTRICTS_1_3_1;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_COS_ST_RESTRICTS_1_3_2;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_COS_ST_RESTRICTS_2_1;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_COS_ST_RESTRICTS_2_3_1_1;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_COS_ST_RESTRICTS_2_3_1_2;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_1;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_2;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_3;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_4;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_COS_ST_RESTRICTS_2_3_2_5;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_COS_ST_RESTRICTS_3_1;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_COS_ST_RESTRICTS_3_3_1;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_COS_ST_RESTRICTS_3_3_1_2;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_1;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_2;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_3;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_4;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_COS_ST_RESTRICTS_3_3_2_5;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_COS_VALID_DEFAULT_1;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_COS_VALID_DEFAULT_2_1;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_COS_VALID_DEFAULT_2_2_1;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_COS_VALID_DEFAULT_2_2_2;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_CT_PROPS_CORRECT_1;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_CT_PROPS_CORRECT_2;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_CT_PROPS_CORRECT_3;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_CT_PROPS_CORRECT_4;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_CT_PROPS_CORRECT_5;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_CVC_SIMPLE_TYPE;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_C_PROPS_CORRECT;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_DEF_AND_PREFIX;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_DERIVATION_OK_RESTRICTION_1;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_1_1;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_1_2;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_1_3;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_DERIVATION_OK_RESTRICTION_2_2;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_DERIVATION_OK_RESTRICTION_3;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_DERIVATION_OK_RESTRICTION_4_1;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_DERIVATION_OK_RESTRICTION_4_2;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_DERIVATION_OK_RESTRICTION_4_3;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_ELEMFORMDEFAULT_VALUE;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_ELEM_DEFAULT_FIXED;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_ELEM_NONAME_NOREF;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_EXTENSION_NO_BASE;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_E_PROPS_CORRECT_2;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_E_PROPS_CORRECT_3;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_E_PROPS_CORRECT_4;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_E_PROPS_CORRECT_5;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_E_PROPS_CORRECT_6;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_FACET_NO_VALUE;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_FAILED_BUILD_IMPORT;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_FAILED_LOAD;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_FAILED_PARSE;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_GROUP_NONAME_NOREF;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_IMPORT_NAMESPACE_NOT_URI;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_IMPORT_REDEFINE_NSNAME;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_IMPORT_SCHEMA_NOT_URI;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_INCLUDE_SCHEMA_NOT_URI;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_INCLUDE_SCHEMA_NO_URI;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_INTERNAL;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_INTERSECTION_NOT_EXPRESSIBLE;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_INVALID_ATTR_COMBINATION;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_INVALID_ATTR_INLINE_COMBINATION;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_INVALID_ATTR_NAME;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_INVALID_ATTR_USE;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_INVALID_BOOLEAN;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_INVALID_ENUM;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_INVALID_FACET;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_INVALID_FACET_VALUE;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_INVALID_MAXOCCURS;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_INVALID_MINOCCURS;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_INVALID_REF_AND_SUBTYPE;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_INVALID_WHITE_SPACE;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_MG_PROPS_CORRECT_1;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_MG_PROPS_CORRECT_2;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_MISSING_SIMPLETYPE_CHILD;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_NOATTR_NOREF;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_NOROOT;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_NOTATION_NO_NAME;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_NOTHING_TO_PARSE;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_NOTYPE_NOREF;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_NOT_DETERMINISTIC;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_NOT_SCHEMA;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_NO_XMLNS;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_NO_XSI;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_PREFIX_UNDEFINED;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_P_PROPS_CORRECT_1;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_P_PROPS_CORRECT_2_1;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_P_PROPS_CORRECT_2_2;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_RECURSIVE;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_REDEFINED_ATTR;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_REDEFINED_ATTRGROUP;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_REDEFINED_ELEMENT;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_REDEFINED_GROUP;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_REDEFINED_NOTATION;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_REDEFINED_TYPE;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_REF_AND_CONTENT;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_REF_AND_SUBTYPE;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_REGEXP_INVALID;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_RESTRICTION_NONAME_NOREF;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_S4S_ATTR_INVALID_VALUE;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_S4S_ATTR_MISSING;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_S4S_ATTR_NOT_ALLOWED;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_S4S_ELEM_MISSING;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_S4S_ELEM_NOT_ALLOWED;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_SIMPLETYPE_NONAME;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_SRC_ATTRIBUTE_1;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_SRC_ATTRIBUTE_2;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_SRC_ATTRIBUTE_3_1;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_SRC_ATTRIBUTE_3_2;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_SRC_ATTRIBUTE_4;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_SRC_ATTRIBUTE_GROUP_1;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_SRC_ATTRIBUTE_GROUP_2;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_SRC_ATTRIBUTE_GROUP_3;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_SRC_CT_1;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_SRC_ELEMENT_1;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_SRC_ELEMENT_2_1;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_SRC_ELEMENT_2_2;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_SRC_ELEMENT_3;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_SRC_IMPORT;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_SRC_IMPORT_1_1;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_SRC_IMPORT_1_2;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_SRC_IMPORT_2;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_SRC_IMPORT_2_1;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_SRC_IMPORT_2_2;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_SRC_IMPORT_3_1;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_SRC_IMPORT_3_2;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_SRC_INCLUDE;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_SRC_LIST_ITEMTYPE_OR_SIMPLETYPE;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_SRC_REDEFINE;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_SRC_RESOLVE;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_SRC_RESTRICTION_BASE_OR_SIMPLETYPE;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_SRC_SIMPLE_TYPE_1;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_SRC_SIMPLE_TYPE_2;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_SRC_SIMPLE_TYPE_3;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_SRC_SIMPLE_TYPE_4;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_SRC_UNION_MEMBERTYPES_OR_SIMPLETYPES;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_ST_PROPS_CORRECT_1;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_ST_PROPS_CORRECT_2;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_ST_PROPS_CORRECT_3;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_SUPERNUMEROUS_LIST_ITEM_TYPE;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_TYPE_AND_SUBTYPE;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_UNION_NOT_EXPRESSIBLE;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_UNKNOWN_ALL_CHILD;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_UNKNOWN_ANYATTRIBUTE_CHILD;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_UNKNOWN_ATTRGRP_CHILD;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_UNKNOWN_ATTRIBUTE_GROUP;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_UNKNOWN_ATTR_CHILD;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_UNKNOWN_BASE_TYPE;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_UNKNOWN_CHOICE_CHILD;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_UNKNOWN_COMPLEXCONTENT_CHILD;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_UNKNOWN_COMPLEXTYPE_CHILD;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_UNKNOWN_ELEM_CHILD;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_UNKNOWN_EXTENSION_CHILD;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_UNKNOWN_FACET_CHILD;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_UNKNOWN_FACET_TYPE;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_UNKNOWN_GROUP_CHILD;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_UNKNOWN_IMPORT_CHILD;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_UNKNOWN_INCLUDE_CHILD;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_UNKNOWN_LIST_CHILD;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_UNKNOWN_MEMBER_TYPE;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_UNKNOWN_NOTATION_CHILD;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_UNKNOWN_PREFIX;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_UNKNOWN_PROCESSCONTENT_CHILD;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_UNKNOWN_REF;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_UNKNOWN_RESTRICTION_CHILD;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_UNKNOWN_SCHEMAS_CHILD;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_UNKNOWN_SEQUENCE_CHILD;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_UNKNOWN_SIMPLECONTENT_CHILD;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_UNKNOWN_SIMPLETYPE_CHILD;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_UNKNOWN_TYPE;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_UNKNOWN_UNION_CHILD;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_WARN_ATTR_POINTLESS_PROH;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_WARN_ATTR_REDECL_PROH;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_WARN_SKIP_SCHEMA;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_WARN_UNLOCATED_SCHEMA;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAP_WILDCARD_INVALID_NS_MEMBER;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_ANYATTR_LAX;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_ANYATTR_SKIP;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_ANYATTR_STRICT;
$24B90EFAD6F7231A0F4CA2F9C31D428B XML_SCHEMAS_ANYSIMPLETYPE;
$24B90EFAD6F7231A0F4CA2F9C31D428B XML_SCHEMAS_ANYTYPE;
$24B90EFAD6F7231A0F4CA2F9C31D428B XML_SCHEMAS_ANYURI;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_ANY_LAX;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_ANY_SKIP;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_ANY_STRICT;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_ATTRGROUP_GLOBAL;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_ATTRGROUP_HAS_REFS;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_ATTRGROUP_MARKED;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_ATTRGROUP_REDEFINED;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_ATTRGROUP_WILDCARD_BUILDED;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_ATTR_FIXED;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_ATTR_GLOBAL;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_ATTR_INTERNAL_RESOLVED;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_ATTR_NSDEFAULT;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_ATTR_USE_OPTIONAL;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_ATTR_USE_PROHIBITED;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_ATTR_USE_REQUIRED;
$24B90EFAD6F7231A0F4CA2F9C31D428B XML_SCHEMAS_BASE64BINARY;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_BLOCK_DEFAULT_EXTENSION;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_BLOCK_DEFAULT_RESTRICTION;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_BLOCK_DEFAULT_SUBSTITUTION;
$24B90EFAD6F7231A0F4CA2F9C31D428B XML_SCHEMAS_BOOLEAN;
$24B90EFAD6F7231A0F4CA2F9C31D428B XML_SCHEMAS_BYTE;
$24B90EFAD6F7231A0F4CA2F9C31D428B XML_SCHEMAS_DATE;
$24B90EFAD6F7231A0F4CA2F9C31D428B XML_SCHEMAS_DATETIME;
$24B90EFAD6F7231A0F4CA2F9C31D428B XML_SCHEMAS_DECIMAL;
$24B90EFAD6F7231A0F4CA2F9C31D428B XML_SCHEMAS_DOUBLE;
$24B90EFAD6F7231A0F4CA2F9C31D428B XML_SCHEMAS_DURATION;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_ELEM_ABSTRACT;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_ELEM_BLOCK_ABSENT;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_ELEM_BLOCK_EXTENSION;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_ELEM_BLOCK_RESTRICTION;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_ELEM_BLOCK_SUBSTITUTION;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_ELEM_CIRCULAR;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_ELEM_DEFAULT;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_ELEM_FINAL_ABSENT;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_ELEM_FINAL_EXTENSION;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_ELEM_FINAL_RESTRICTION;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_ELEM_FIXED;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_ELEM_GLOBAL;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_ELEM_INTERNAL_CHECKED;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_ELEM_INTERNAL_RESOLVED;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_ELEM_NILLABLE;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_ELEM_NSDEFAULT;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_ELEM_REF;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_ELEM_SUBST_GROUP_HEAD;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_ELEM_TOPLEVEL;
$24B90EFAD6F7231A0F4CA2F9C31D428B XML_SCHEMAS_ENTITIES;
$24B90EFAD6F7231A0F4CA2F9C31D428B XML_SCHEMAS_ENTITY;
$8D0F94C86775DD2813ADC12AE093783F XML_SCHEMAS_ERR_;
$8D0F94C86775DD2813ADC12AE093783F XML_SCHEMAS_ERR_ATTRINVALID;
$8D0F94C86775DD2813ADC12AE093783F XML_SCHEMAS_ERR_ATTRUNKNOWN;
$8D0F94C86775DD2813ADC12AE093783F XML_SCHEMAS_ERR_CONSTRUCT;
$8D0F94C86775DD2813ADC12AE093783F XML_SCHEMAS_ERR_ELEMCONT;
$8D0F94C86775DD2813ADC12AE093783F XML_SCHEMAS_ERR_EXTRACONTENT;
$8D0F94C86775DD2813ADC12AE093783F XML_SCHEMAS_ERR_FACET;
$8D0F94C86775DD2813ADC12AE093783F XML_SCHEMAS_ERR_HAVEDEFAULT;
$8D0F94C86775DD2813ADC12AE093783F XML_SCHEMAS_ERR_INTERNAL;
$8D0F94C86775DD2813ADC12AE093783F XML_SCHEMAS_ERR_INVALIDATTR;
$8D0F94C86775DD2813ADC12AE093783F XML_SCHEMAS_ERR_INVALIDELEM;
$8D0F94C86775DD2813ADC12AE093783F XML_SCHEMAS_ERR_ISABSTRACT;
$8D0F94C86775DD2813ADC12AE093783F XML_SCHEMAS_ERR_MISSING;
$8D0F94C86775DD2813ADC12AE093783F XML_SCHEMAS_ERR_NOROLLBACK;
$8D0F94C86775DD2813ADC12AE093783F XML_SCHEMAS_ERR_NOROOT;
$8D0F94C86775DD2813ADC12AE093783F XML_SCHEMAS_ERR_NOTDETERMINIST;
$8D0F94C86775DD2813ADC12AE093783F XML_SCHEMAS_ERR_NOTEMPTY;
$8D0F94C86775DD2813ADC12AE093783F XML_SCHEMAS_ERR_NOTNILLABLE;
$8D0F94C86775DD2813ADC12AE093783F XML_SCHEMAS_ERR_NOTSIMPLE;
$8D0F94C86775DD2813ADC12AE093783F XML_SCHEMAS_ERR_NOTTOPLEVEL;
$8D0F94C86775DD2813ADC12AE093783F XML_SCHEMAS_ERR_NOTYPE;
$8D0F94C86775DD2813ADC12AE093783F XML_SCHEMAS_ERR_OK;
$8D0F94C86775DD2813ADC12AE093783F XML_SCHEMAS_ERR_UNDECLAREDELEM;
$8D0F94C86775DD2813ADC12AE093783F XML_SCHEMAS_ERR_VALUE;
$8D0F94C86775DD2813ADC12AE093783F XML_SCHEMAS_ERR_WRONGELEM;
$8D0F94C86775DD2813ADC12AE093783F XML_SCHEMAS_ERR_XXX;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_FACET_COLLAPSE;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_FACET_PRESERVE;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_FACET_REPLACE;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_FACET_UNKNOWN;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_FINAL_DEFAULT_EXTENSION;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_FINAL_DEFAULT_LIST;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_FINAL_DEFAULT_RESTRICTION;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_FINAL_DEFAULT_UNION;
$24B90EFAD6F7231A0F4CA2F9C31D428B XML_SCHEMAS_FLOAT;
$24B90EFAD6F7231A0F4CA2F9C31D428B XML_SCHEMAS_GDAY;
$24B90EFAD6F7231A0F4CA2F9C31D428B XML_SCHEMAS_GMONTH;
$24B90EFAD6F7231A0F4CA2F9C31D428B XML_SCHEMAS_GMONTHDAY;
$24B90EFAD6F7231A0F4CA2F9C31D428B XML_SCHEMAS_GYEAR;
$24B90EFAD6F7231A0F4CA2F9C31D428B XML_SCHEMAS_GYEARMONTH;
$24B90EFAD6F7231A0F4CA2F9C31D428B XML_SCHEMAS_HEXBINARY;
$24B90EFAD6F7231A0F4CA2F9C31D428B XML_SCHEMAS_ID;
$24B90EFAD6F7231A0F4CA2F9C31D428B XML_SCHEMAS_IDREF;
$24B90EFAD6F7231A0F4CA2F9C31D428B XML_SCHEMAS_IDREFS;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_INCLUDING_CONVERT_NS;
$24B90EFAD6F7231A0F4CA2F9C31D428B XML_SCHEMAS_INT;
$24B90EFAD6F7231A0F4CA2F9C31D428B XML_SCHEMAS_INTEGER;
$24B90EFAD6F7231A0F4CA2F9C31D428B XML_SCHEMAS_LANGUAGE;
$24B90EFAD6F7231A0F4CA2F9C31D428B XML_SCHEMAS_LONG;
$24B90EFAD6F7231A0F4CA2F9C31D428B XML_SCHEMAS_NAME;
$24B90EFAD6F7231A0F4CA2F9C31D428B XML_SCHEMAS_NCNAME;
$24B90EFAD6F7231A0F4CA2F9C31D428B XML_SCHEMAS_NINTEGER;
$24B90EFAD6F7231A0F4CA2F9C31D428B XML_SCHEMAS_NMTOKEN;
$24B90EFAD6F7231A0F4CA2F9C31D428B XML_SCHEMAS_NMTOKENS;
$24B90EFAD6F7231A0F4CA2F9C31D428B XML_SCHEMAS_NNINTEGER;
$24B90EFAD6F7231A0F4CA2F9C31D428B XML_SCHEMAS_NORMSTRING;
$24B90EFAD6F7231A0F4CA2F9C31D428B XML_SCHEMAS_NOTATION;
$24B90EFAD6F7231A0F4CA2F9C31D428B XML_SCHEMAS_NPINTEGER;
$24B90EFAD6F7231A0F4CA2F9C31D428B XML_SCHEMAS_PINTEGER;
$24B90EFAD6F7231A0F4CA2F9C31D428B XML_SCHEMAS_QNAME;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_QUALIF_ATTR;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_QUALIF_ELEM;
$24B90EFAD6F7231A0F4CA2F9C31D428B XML_SCHEMAS_SHORT;
$24B90EFAD6F7231A0F4CA2F9C31D428B XML_SCHEMAS_STRING;
$24B90EFAD6F7231A0F4CA2F9C31D428B XML_SCHEMAS_TIME;
$24B90EFAD6F7231A0F4CA2F9C31D428B XML_SCHEMAS_TOKEN;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_TYPE_ABSTRACT;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_TYPE_BLOCK_DEFAULT;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_TYPE_BLOCK_EXTENSION;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_TYPE_BLOCK_RESTRICTION;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_TYPE_BUILTIN_PRIMITIVE;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_TYPE_DERIVATION_METHOD_EXTENSION;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_TYPE_DERIVATION_METHOD_RESTRICTION;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_TYPE_FACETSNEEDVALUE;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_TYPE_FINAL_DEFAULT;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_TYPE_FINAL_EXTENSION;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_TYPE_FINAL_LIST;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_TYPE_FINAL_RESTRICTION;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_TYPE_FINAL_UNION;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_TYPE_FIXUP_1;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_TYPE_GLOBAL;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_TYPE_HAS_FACETS;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_TYPE_INTERNAL_INVALID;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_TYPE_INTERNAL_RESOLVED;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_TYPE_MARKED;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_TYPE_MIXED;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_TYPE_NORMVALUENEEDED;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_TYPE_OWNED_ATTR_WILDCARD;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_TYPE_REDEFINED;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_TYPE_VARIETY_ABSENT;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_TYPE_VARIETY_ATOMIC;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_TYPE_VARIETY_LIST;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_TYPE_VARIETY_UNION;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_TYPE_WHITESPACE_COLLAPSE;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_TYPE_WHITESPACE_PRESERVE;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_TYPE_WHITESPACE_REPLACE;
$24B90EFAD6F7231A0F4CA2F9C31D428B XML_SCHEMAS_UBYTE;
$24B90EFAD6F7231A0F4CA2F9C31D428B XML_SCHEMAS_UINT;
$24B90EFAD6F7231A0F4CA2F9C31D428B XML_SCHEMAS_ULONG;
$24B90EFAD6F7231A0F4CA2F9C31D428B XML_SCHEMAS_UNKNOWN;
$24B90EFAD6F7231A0F4CA2F9C31D428B XML_SCHEMAS_USHORT;
MACRO_XML_SUBSTITUTE XML_SCHEMAS_WILDCARD_COMPLETE;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMATRONV_ASSERT;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMATRONV_REPORT;
$A86837AB56EC532038D4CEC80449646F XML_SCHEMATRON_OUT_BUFFER;
$A86837AB56EC532038D4CEC80449646F XML_SCHEMATRON_OUT_ERROR;
$A86837AB56EC532038D4CEC80449646F XML_SCHEMATRON_OUT_FILE;
$A86837AB56EC532038D4CEC80449646F XML_SCHEMATRON_OUT_IO;
$A86837AB56EC532038D4CEC80449646F XML_SCHEMATRON_OUT_QUIET;
$A86837AB56EC532038D4CEC80449646F XML_SCHEMATRON_OUT_TEXT;
$A86837AB56EC532038D4CEC80449646F XML_SCHEMATRON_OUT_XML;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_ATTRINVALID;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_ATTRUNKNOWN;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_CONSTRUCT;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_CVC_ATTRIBUTE_1;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_CVC_ATTRIBUTE_2;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_CVC_ATTRIBUTE_3;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_CVC_ATTRIBUTE_4;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_CVC_AU;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_CVC_COMPLEX_TYPE_1;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_CVC_COMPLEX_TYPE_2_1;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_CVC_COMPLEX_TYPE_2_2;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_CVC_COMPLEX_TYPE_2_3;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_CVC_COMPLEX_TYPE_2_4;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_CVC_COMPLEX_TYPE_3_1;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_CVC_COMPLEX_TYPE_3_2_1;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_CVC_COMPLEX_TYPE_3_2_2;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_CVC_COMPLEX_TYPE_4;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_CVC_COMPLEX_TYPE_5_1;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_CVC_COMPLEX_TYPE_5_2;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_1;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_2;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_CVC_DATATYPE_VALID_1_2_3;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_CVC_ELT_1;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_CVC_ELT_2;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_CVC_ELT_3_1;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_CVC_ELT_3_2_1;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_CVC_ELT_3_2_2;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_CVC_ELT_4_1;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_CVC_ELT_4_2;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_CVC_ELT_4_3;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_CVC_ELT_5_1_1;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_CVC_ELT_5_1_2;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_CVC_ELT_5_2_1;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_CVC_ELT_5_2_2_1;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_CVC_ELT_5_2_2_2_1;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_CVC_ELT_5_2_2_2_2;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_CVC_ELT_6;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_CVC_ELT_7;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_CVC_ENUMERATION_VALID;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_CVC_FACET_VALID;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_CVC_FRACTIONDIGITS_VALID;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_CVC_IDC;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_CVC_LENGTH_VALID;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_CVC_MAXEXCLUSIVE_VALID;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_CVC_MAXINCLUSIVE_VALID;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_CVC_MAXLENGTH_VALID;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_CVC_MINEXCLUSIVE_VALID;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_CVC_MININCLUSIVE_VALID;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_CVC_MINLENGTH_VALID;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_CVC_PATTERN_VALID;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_CVC_TOTALDIGITS_VALID;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_CVC_TYPE_1;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_CVC_TYPE_2;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_CVC_TYPE_3_1_1;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_CVC_TYPE_3_1_2;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_CVC_WILDCARD;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_DOCUMENT_ELEMENT_MISSING;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_ELEMCONT;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_ELEMENT_CONTENT;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_EXTRACONTENT;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_FACET;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_HAVEDEFAULT;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_INTERNAL;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_INVALIDATTR;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_INVALIDELEM;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_ISABSTRACT;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_MISC;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_MISSING;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_NOROLLBACK;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_NOROOT;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_NOTDETERMINIST;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_NOTEMPTY;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_NOTNILLABLE;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_NOTSIMPLE;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_NOTTOPLEVEL;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_NOTYPE;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_UNDECLAREDELEM;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_VALUE;
$98923156B44D8D77A256CDD67243A530 XML_SCHEMAV_WRONGELEM;
$2F04DECAC9E27824D85E198F1C682F07 XML_SCHEMA_CONTENT_ANY;
$2F04DECAC9E27824D85E198F1C682F07 XML_SCHEMA_CONTENT_BASIC;
$2F04DECAC9E27824D85E198F1C682F07 XML_SCHEMA_CONTENT_ELEMENTS;
$2F04DECAC9E27824D85E198F1C682F07 XML_SCHEMA_CONTENT_EMPTY;
$2F04DECAC9E27824D85E198F1C682F07 XML_SCHEMA_CONTENT_MIXED;
$2F04DECAC9E27824D85E198F1C682F07 XML_SCHEMA_CONTENT_MIXED_OR_ELEMENTS;
$2F04DECAC9E27824D85E198F1C682F07 XML_SCHEMA_CONTENT_SIMPLE;
$2F04DECAC9E27824D85E198F1C682F07 XML_SCHEMA_CONTENT_UNKNOWN;
$539980D7AFB74DD78553342EB4BF9B66 XML_SCHEMA_EXTRA_ATTR_USE_PROHIB;
$539980D7AFB74DD78553342EB4BF9B66 XML_SCHEMA_EXTRA_QNAMEREF;
$539980D7AFB74DD78553342EB4BF9B66 XML_SCHEMA_FACET_ENUMERATION;
$539980D7AFB74DD78553342EB4BF9B66 XML_SCHEMA_FACET_FRACTIONDIGITS;
$539980D7AFB74DD78553342EB4BF9B66 XML_SCHEMA_FACET_LENGTH;
$539980D7AFB74DD78553342EB4BF9B66 XML_SCHEMA_FACET_MAXEXCLUSIVE;
$539980D7AFB74DD78553342EB4BF9B66 XML_SCHEMA_FACET_MAXINCLUSIVE;
$539980D7AFB74DD78553342EB4BF9B66 XML_SCHEMA_FACET_MAXLENGTH;
$539980D7AFB74DD78553342EB4BF9B66 XML_SCHEMA_FACET_MINEXCLUSIVE;
$539980D7AFB74DD78553342EB4BF9B66 XML_SCHEMA_FACET_MININCLUSIVE;
$539980D7AFB74DD78553342EB4BF9B66 XML_SCHEMA_FACET_MINLENGTH;
$539980D7AFB74DD78553342EB4BF9B66 XML_SCHEMA_FACET_PATTERN;
$539980D7AFB74DD78553342EB4BF9B66 XML_SCHEMA_FACET_TOTALDIGITS;
$539980D7AFB74DD78553342EB4BF9B66 XML_SCHEMA_FACET_WHITESPACE;
$539980D7AFB74DD78553342EB4BF9B66 XML_SCHEMA_TYPE_ALL;
$539980D7AFB74DD78553342EB4BF9B66 XML_SCHEMA_TYPE_ANY;
$539980D7AFB74DD78553342EB4BF9B66 XML_SCHEMA_TYPE_ANY_ATTRIBUTE;
$539980D7AFB74DD78553342EB4BF9B66 XML_SCHEMA_TYPE_ATTRIBUTE;
$539980D7AFB74DD78553342EB4BF9B66 XML_SCHEMA_TYPE_ATTRIBUTEGROUP;
$539980D7AFB74DD78553342EB4BF9B66 XML_SCHEMA_TYPE_ATTRIBUTE_USE;
$539980D7AFB74DD78553342EB4BF9B66 XML_SCHEMA_TYPE_BASIC;
$539980D7AFB74DD78553342EB4BF9B66 XML_SCHEMA_TYPE_CHOICE;
$539980D7AFB74DD78553342EB4BF9B66 XML_SCHEMA_TYPE_COMPLEX;
$539980D7AFB74DD78553342EB4BF9B66 XML_SCHEMA_TYPE_COMPLEX_CONTENT;
$539980D7AFB74DD78553342EB4BF9B66 XML_SCHEMA_TYPE_ELEMENT;
$539980D7AFB74DD78553342EB4BF9B66 XML_SCHEMA_TYPE_EXTENSION;
$539980D7AFB74DD78553342EB4BF9B66 XML_SCHEMA_TYPE_FACET;
$539980D7AFB74DD78553342EB4BF9B66 XML_SCHEMA_TYPE_GROUP;
$539980D7AFB74DD78553342EB4BF9B66 XML_SCHEMA_TYPE_IDC_KEY;
$539980D7AFB74DD78553342EB4BF9B66 XML_SCHEMA_TYPE_IDC_KEYREF;
$539980D7AFB74DD78553342EB4BF9B66 XML_SCHEMA_TYPE_IDC_UNIQUE;
$539980D7AFB74DD78553342EB4BF9B66 XML_SCHEMA_TYPE_LIST;
$539980D7AFB74DD78553342EB4BF9B66 XML_SCHEMA_TYPE_NOTATION;
$539980D7AFB74DD78553342EB4BF9B66 XML_SCHEMA_TYPE_PARTICLE;
$539980D7AFB74DD78553342EB4BF9B66 XML_SCHEMA_TYPE_RESTRICTION;
$539980D7AFB74DD78553342EB4BF9B66 XML_SCHEMA_TYPE_SEQUENCE;
$539980D7AFB74DD78553342EB4BF9B66 XML_SCHEMA_TYPE_SIMPLE;
$539980D7AFB74DD78553342EB4BF9B66 XML_SCHEMA_TYPE_SIMPLE_CONTENT;
$539980D7AFB74DD78553342EB4BF9B66 XML_SCHEMA_TYPE_UNION;
$539980D7AFB74DD78553342EB4BF9B66 XML_SCHEMA_TYPE_UR;
$3C85D19FBA73C2ACEDF478D656FAB909 XML_SCHEMA_VAL_VC_I_CREATE;
$278B4CDAE9C99E304B0906BE5968E29D XML_SCHEMA_WHITESPACE_COLLAPSE;
$278B4CDAE9C99E304B0906BE5968E29D XML_SCHEMA_WHITESPACE_PRESERVE;
$278B4CDAE9C99E304B0906BE5968E29D XML_SCHEMA_WHITESPACE_REPLACE;
$278B4CDAE9C99E304B0906BE5968E29D XML_SCHEMA_WHITESPACE_UNKNOWN;
MACRO_XML XML_SKIP_IDS;
MACRO_XML_SUBSTITUTE XML_SUBSTITUTE_BOTH;
MACRO_XML_SUBSTITUTE XML_SUBSTITUTE_NONE;
MACRO_XML_SUBSTITUTE XML_SUBSTITUTE_PEREF;
MACRO_XML_SUBSTITUTE XML_SUBSTITUTE_REF;
$4C21AF12A3CB4BE1E82FF113A63D6EE5 XML_TEXTREADER_MODE_CLOSED;
$4C21AF12A3CB4BE1E82FF113A63D6EE5 XML_TEXTREADER_MODE_EOF;
$4C21AF12A3CB4BE1E82FF113A63D6EE5 XML_TEXTREADER_MODE_ERROR;
$4C21AF12A3CB4BE1E82FF113A63D6EE5 XML_TEXTREADER_MODE_INITIAL;
$4C21AF12A3CB4BE1E82FF113A63D6EE5 XML_TEXTREADER_MODE_INTERACTIVE;
$4C21AF12A3CB4BE1E82FF113A63D6EE5 XML_TEXTREADER_MODE_READING;
$C5101608B88D7C11ADC8E88E540FCD76 XML_TEXT_NODE;
$98923156B44D8D77A256CDD67243A530 XML_TREE_INVALID_DEC;
$98923156B44D8D77A256CDD67243A530 XML_TREE_INVALID_HEX;
$98923156B44D8D77A256CDD67243A530 XML_TREE_NOT_UTF8;
$98923156B44D8D77A256CDD67243A530 XML_TREE_UNTERMINATED_ENTITY;
$98923156B44D8D77A256CDD67243A530 XML_WAR_CATALOG_PI;
$98923156B44D8D77A256CDD67243A530 XML_WAR_ENTITY_REDEFINED;
$98923156B44D8D77A256CDD67243A530 XML_WAR_LANG_VALUE;
$98923156B44D8D77A256CDD67243A530 XML_WAR_NS_COLUMN;
$98923156B44D8D77A256CDD67243A530 XML_WAR_NS_URI;
$98923156B44D8D77A256CDD67243A530 XML_WAR_NS_URI_RELATIVE;
$98923156B44D8D77A256CDD67243A530 XML_WAR_SPACE_VALUE;
$98923156B44D8D77A256CDD67243A530 XML_WAR_UNDECLARED_ENTITY;
$98923156B44D8D77A256CDD67243A530 XML_WAR_UNKNOWN_VERSION;
$743EA981694C8951C7F0FF81288A5AAC XML_WITH_AUTOMATA;
$743EA981694C8951C7F0FF81288A5AAC XML_WITH_C14N;
$743EA981694C8951C7F0FF81288A5AAC XML_WITH_CATALOG;
$743EA981694C8951C7F0FF81288A5AAC XML_WITH_DEBUG;
$743EA981694C8951C7F0FF81288A5AAC XML_WITH_DEBUG_MEM;
$743EA981694C8951C7F0FF81288A5AAC XML_WITH_DEBUG_RUN;
$743EA981694C8951C7F0FF81288A5AAC XML_WITH_EXPR;
$743EA981694C8951C7F0FF81288A5AAC XML_WITH_FTP;
$743EA981694C8951C7F0FF81288A5AAC XML_WITH_HTML;
$743EA981694C8951C7F0FF81288A5AAC XML_WITH_HTTP;
$743EA981694C8951C7F0FF81288A5AAC XML_WITH_ICONV;
$743EA981694C8951C7F0FF81288A5AAC XML_WITH_ICU;
$743EA981694C8951C7F0FF81288A5AAC XML_WITH_ISO8859X;
$743EA981694C8951C7F0FF81288A5AAC XML_WITH_LEGACY;
$743EA981694C8951C7F0FF81288A5AAC XML_WITH_MODULES;
$743EA981694C8951C7F0FF81288A5AAC XML_WITH_NONE;
$743EA981694C8951C7F0FF81288A5AAC XML_WITH_OUTPUT;
$743EA981694C8951C7F0FF81288A5AAC XML_WITH_PATTERN;
$743EA981694C8951C7F0FF81288A5AAC XML_WITH_PUSH;
$743EA981694C8951C7F0FF81288A5AAC XML_WITH_READER;
$743EA981694C8951C7F0FF81288A5AAC XML_WITH_REGEXP;
$743EA981694C8951C7F0FF81288A5AAC XML_WITH_SAX1;
$743EA981694C8951C7F0FF81288A5AAC XML_WITH_SCHEMAS;
$743EA981694C8951C7F0FF81288A5AAC XML_WITH_SCHEMATRON;
$743EA981694C8951C7F0FF81288A5AAC XML_WITH_THREAD;
$743EA981694C8951C7F0FF81288A5AAC XML_WITH_TREE;
$743EA981694C8951C7F0FF81288A5AAC XML_WITH_UNICODE;
$743EA981694C8951C7F0FF81288A5AAC XML_WITH_VALID;
$743EA981694C8951C7F0FF81288A5AAC XML_WITH_WRITER;
$743EA981694C8951C7F0FF81288A5AAC XML_WITH_XINCLUDE;
$743EA981694C8951C7F0FF81288A5AAC XML_WITH_XPATH;
$743EA981694C8951C7F0FF81288A5AAC XML_WITH_XPTR;
$743EA981694C8951C7F0FF81288A5AAC XML_WITH_ZLIB;
$98923156B44D8D77A256CDD67243A530 XML_XINCLUDE_BUILD_FAILED;
$98923156B44D8D77A256CDD67243A530 XML_XINCLUDE_DEPRECATED_NS;
$C5101608B88D7C11ADC8E88E540FCD76 XML_XINCLUDE_END;
$98923156B44D8D77A256CDD67243A530 XML_XINCLUDE_ENTITY_DEF_MISMATCH;
$98923156B44D8D77A256CDD67243A530 XML_XINCLUDE_FALLBACKS_IN_INCLUDE;
$98923156B44D8D77A256CDD67243A530 XML_XINCLUDE_FALLBACK_NOT_IN_INCLUDE;
$98923156B44D8D77A256CDD67243A530 XML_XINCLUDE_FRAGMENT_ID;
$98923156B44D8D77A256CDD67243A530 XML_XINCLUDE_HREF_URI;
$98923156B44D8D77A256CDD67243A530 XML_XINCLUDE_INCLUDE_IN_INCLUDE;
$98923156B44D8D77A256CDD67243A530 XML_XINCLUDE_INVALID_CHAR;
$98923156B44D8D77A256CDD67243A530 XML_XINCLUDE_MULTIPLE_ROOT;
$98923156B44D8D77A256CDD67243A530 XML_XINCLUDE_NO_FALLBACK;
$98923156B44D8D77A256CDD67243A530 XML_XINCLUDE_NO_HREF;
$98923156B44D8D77A256CDD67243A530 XML_XINCLUDE_PARSE_VALUE;
$98923156B44D8D77A256CDD67243A530 XML_XINCLUDE_RECURSION;
$C5101608B88D7C11ADC8E88E540FCD76 XML_XINCLUDE_START;
$98923156B44D8D77A256CDD67243A530 XML_XINCLUDE_TEXT_DOCUMENT;
$98923156B44D8D77A256CDD67243A530 XML_XINCLUDE_TEXT_FRAGMENT;
$98923156B44D8D77A256CDD67243A530 XML_XINCLUDE_UNKNOWN_ENCODING;
$98923156B44D8D77A256CDD67243A530 XML_XINCLUDE_XPTR_FAILED;
$98923156B44D8D77A256CDD67243A530 XML_XINCLUDE_XPTR_RESULT;
MACRO_XML_XPATH XML_XPATH_CHECKNS;
$98923156B44D8D77A256CDD67243A530 XML_XPATH_ENCODING_ERROR;
$98923156B44D8D77A256CDD67243A530 XML_XPATH_EXPRESSION_OK;
$98923156B44D8D77A256CDD67243A530 XML_XPATH_EXPR_ERROR;
$98923156B44D8D77A256CDD67243A530 XML_XPATH_INVALID_ARITY;
$98923156B44D8D77A256CDD67243A530 XML_XPATH_INVALID_CHAR_ERROR;
$98923156B44D8D77A256CDD67243A530 XML_XPATH_INVALID_CTXT_POSITION;
$98923156B44D8D77A256CDD67243A530 XML_XPATH_INVALID_CTXT_SIZE;
$98923156B44D8D77A256CDD67243A530 XML_XPATH_INVALID_OPERAND;
$98923156B44D8D77A256CDD67243A530 XML_XPATH_INVALID_PREDICATE_ERROR;
$98923156B44D8D77A256CDD67243A530 XML_XPATH_INVALID_TYPE;
$98923156B44D8D77A256CDD67243A530 XML_XPATH_MEMORY_ERROR;
MACRO_XML_XPATH XML_XPATH_NOVAR;
$98923156B44D8D77A256CDD67243A530 XML_XPATH_NUMBER_ERROR;
$98923156B44D8D77A256CDD67243A530 XML_XPATH_START_LITERAL_ERROR;
$98923156B44D8D77A256CDD67243A530 XML_XPATH_UNCLOSED_ERROR;
$98923156B44D8D77A256CDD67243A530 XML_XPATH_UNDEF_PREFIX_ERROR;
$98923156B44D8D77A256CDD67243A530 XML_XPATH_UNDEF_VARIABLE_ERROR;
$98923156B44D8D77A256CDD67243A530 XML_XPATH_UNFINISHED_LITERAL_ERROR;
$98923156B44D8D77A256CDD67243A530 XML_XPATH_UNKNOWN_FUNC_ERROR;
$98923156B44D8D77A256CDD67243A530 XML_XPATH_VARIABLE_REF_ERROR;
$98923156B44D8D77A256CDD67243A530 XML_XPTR_CHILDSEQ_START;
$98923156B44D8D77A256CDD67243A530 XML_XPTR_EVAL_FAILED;
$98923156B44D8D77A256CDD67243A530 XML_XPTR_EXTRA_OBJECTS;
$98923156B44D8D77A256CDD67243A530 XML_XPTR_RESOURCE_ERROR;
$98923156B44D8D77A256CDD67243A530 XML_XPTR_SUB_RESOURCE_ERROR;
$98923156B44D8D77A256CDD67243A530 XML_XPTR_SYNTAX_ERROR;
$98923156B44D8D77A256CDD67243A530 XML_XPTR_UNKNOWN_SCHEME;
MACRO_XN XN_FLAG_COMPAT;
MACRO_XN XN_FLAG_DN_REV;
MACRO_XN XN_FLAG_DUMP_UNKNOWN_FIELDS;
MACRO_XN XN_FLAG_FN_ALIGN;
MACRO_XN XN_FLAG_FN_LN;
MACRO_XN XN_FLAG_FN_MASK;
MACRO_XN XN_FLAG_FN_NONE;
MACRO_XN XN_FLAG_FN_OID;
MACRO_XN XN_FLAG_FN_SN;
MACRO_XN XN_FLAG_MULTILINE;
MACRO_XN XN_FLAG_ONELINE;
MACRO_XN XN_FLAG_RFC2253;
MACRO_XN XN_FLAG_SEP_COMMA_PLUS;
MACRO_XN XN_FLAG_SEP_CPLUS_SPC;
MACRO_XN XN_FLAG_SEP_MASK;
MACRO_XN XN_FLAG_SEP_MULTILINE;
MACRO_XN XN_FLAG_SEP_SPLUS_SPC;
MACRO_XN XN_FLAG_SPC_EQ;
$0FAD588DCCF26DA566A37A2D9B7AC1B1 XPATH_BOOLEAN;
$6FDCE26D5FA4D6DB475CE5F65FC8B575 XPATH_ENCODING_ERROR;
$6FDCE26D5FA4D6DB475CE5F65FC8B575 XPATH_EXPRESSION_OK;
$6FDCE26D5FA4D6DB475CE5F65FC8B575 XPATH_EXPR_ERROR;
$6FDCE26D5FA4D6DB475CE5F65FC8B575 XPATH_INVALID_ARITY;
$6FDCE26D5FA4D6DB475CE5F65FC8B575 XPATH_INVALID_CHAR_ERROR;
$6FDCE26D5FA4D6DB475CE5F65FC8B575 XPATH_INVALID_CTXT;
$6FDCE26D5FA4D6DB475CE5F65FC8B575 XPATH_INVALID_CTXT_POSITION;
$6FDCE26D5FA4D6DB475CE5F65FC8B575 XPATH_INVALID_CTXT_SIZE;
$6FDCE26D5FA4D6DB475CE5F65FC8B575 XPATH_INVALID_OPERAND;
$6FDCE26D5FA4D6DB475CE5F65FC8B575 XPATH_INVALID_PREDICATE_ERROR;
$6FDCE26D5FA4D6DB475CE5F65FC8B575 XPATH_INVALID_TYPE;
$0FAD588DCCF26DA566A37A2D9B7AC1B1 XPATH_LOCATIONSET;
$6FDCE26D5FA4D6DB475CE5F65FC8B575 XPATH_MEMORY_ERROR;
$0FAD588DCCF26DA566A37A2D9B7AC1B1 XPATH_NODESET;
$0FAD588DCCF26DA566A37A2D9B7AC1B1 XPATH_NUMBER;
$6FDCE26D5FA4D6DB475CE5F65FC8B575 XPATH_NUMBER_ERROR;
$0FAD588DCCF26DA566A37A2D9B7AC1B1 XPATH_POINT;
$0FAD588DCCF26DA566A37A2D9B7AC1B1 XPATH_RANGE;
$6FDCE26D5FA4D6DB475CE5F65FC8B575 XPATH_START_LITERAL_ERROR;
$0FAD588DCCF26DA566A37A2D9B7AC1B1 XPATH_STRING;
$6FDCE26D5FA4D6DB475CE5F65FC8B575 XPATH_UNCLOSED_ERROR;
$0FAD588DCCF26DA566A37A2D9B7AC1B1 XPATH_UNDEFINED;
$6FDCE26D5FA4D6DB475CE5F65FC8B575 XPATH_UNDEF_PREFIX_ERROR;
$6FDCE26D5FA4D6DB475CE5F65FC8B575 XPATH_UNDEF_VARIABLE_ERROR;
$6FDCE26D5FA4D6DB475CE5F65FC8B575 XPATH_UNFINISHED_LITERAL_ERROR;
$6FDCE26D5FA4D6DB475CE5F65FC8B575 XPATH_UNKNOWN_FUNC_ERROR;
$0FAD588DCCF26DA566A37A2D9B7AC1B1 XPATH_USERS;
$6FDCE26D5FA4D6DB475CE5F65FC8B575 XPATH_VARIABLE_REF_ERROR;
$0FAD588DCCF26DA566A37A2D9B7AC1B1 XPATH_XSLT_TREE;
MACRO_XPLUGIN XPLUGIN_H;
MACRO_XPLUGIN XPLUGIN_VERSION;
xprt_stat XPRT_DIED;
xprt_stat XPRT_IDLE;
xprt_stat XPRT_MOREREQS;
$6FDCE26D5FA4D6DB475CE5F65FC8B575 XPTR_RESOURCE_ERROR;
$6FDCE26D5FA4D6DB475CE5F65FC8B575 XPTR_SUB_RESOURCE_ERROR;
$6FDCE26D5FA4D6DB475CE5F65FC8B575 XPTR_SYNTAX_ERROR;
xp_window_changes_enum XP_ATTACH_TRANSIENT;
xp_init_options_enum XP_BACKGROUND_EVENTS;
xp_window_changes_enum XP_BOUNDS;
xp_error_enum XP_BadAccess;
xp_error_enum XP_BadImplementation;
xp_error_enum XP_BadMatch;
xp_error_enum XP_BadRequest;
xp_error_enum XP_BadValue;
xp_error_enum XP_BadWindow;
xp_window_changes_enum XP_COLORMAP;
xp_composite_op_enum XP_COMPOSITE_OVER;
xp_composite_op_enum XP_COMPOSITE_SRC;
xp_window_changes_enum XP_DEPTH;
xp_depth_enum XP_DEPTH_A8;
xp_depth_enum XP_DEPTH_ARGB8888;
xp_depth_enum XP_DEPTH_INDEX8;
xp_depth_enum XP_DEPTH_NIL;
xp_depth_enum XP_DEPTH_RGB555;
xp_event_type_enum XP_EVENT_ASYNC_ERROR;
xp_event_type_enum XP_EVENT_DISPLAY_CHANGED;
xp_event_type_enum XP_EVENT_SPACE_CHANGED;
xp_event_type_enum XP_EVENT_SURFACE_CHANGED;
xp_event_type_enum XP_EVENT_SURFACE_DESTROYED;
xp_event_type_enum XP_EVENT_WINDOW_MOVED;
xp_event_type_enum XP_EVENT_WINDOW_STATE_CHANGED;
xp_frame_attr_enum XP_FRAME_ATTR_ACTIVE;
xp_frame_attr_enum XP_FRAME_ATTR_CLOSE_BOX;
xp_frame_attr_enum XP_FRAME_ATTR_CLOSE_BOX_CLICKED;
xp_frame_attr_enum XP_FRAME_ATTR_COLLAPSE;
xp_frame_attr_enum XP_FRAME_ATTR_COLLAPSE_BOX_CLICKED;
xp_frame_attr_enum XP_FRAME_ATTR_GROW_BOX;
xp_frame_attr_enum XP_FRAME_ATTR_PRELIGHT;
xp_frame_attr_enum XP_FRAME_ATTR_SHADED;
xp_frame_attr_enum XP_FRAME_ATTR_TITLE;
xp_frame_attr_enum XP_FRAME_ATTR_URGENT;
xp_frame_attr_enum XP_FRAME_ATTR_ZOOM;
xp_frame_attr_enum XP_FRAME_ATTR_ZOOM_BOX_CLICKED;
xp_frame_class_enum XP_FRAME_CLASS_BEHAVIOR_MANAGED;
xp_frame_class_enum XP_FRAME_CLASS_BEHAVIOR_STATIONARY;
xp_frame_class_enum XP_FRAME_CLASS_BEHAVIOR_TRANSIENT;
xp_frame_class_enum XP_FRAME_CLASS_DECOR_LARGE;
xp_frame_class_enum XP_FRAME_CLASS_DECOR_NONE;
xp_frame_class_enum XP_FRAME_CLASS_DECOR_SMALL;
xp_frame_class_enum XP_FRAME_CLASS_RESERVED1;
xp_frame_class_enum XP_FRAME_CLASS_RESERVED2;
xp_frame_class_enum XP_FRAME_CLASS_RESERVED3;
xp_frame_class_enum XP_FRAME_CLASS_RESERVED5;
xp_frame_class_enum XP_FRAME_CLASS_RESERVED6;
xp_frame_class_enum XP_FRAME_CLASS_RESERVED8;
xp_frame_rect_enum XP_FRAME_RECT_GROWBOX;
xp_frame_rect_enum XP_FRAME_RECT_TITLEBAR;
xp_frame_rect_enum XP_FRAME_RECT_TRACKING;
xp_bit_gravity_enum XP_GRAVITY_NONE;
xp_bit_gravity_enum XP_GRAVITY_NORTH_EAST;
xp_bit_gravity_enum XP_GRAVITY_NORTH_WEST;
xp_bit_gravity_enum XP_GRAVITY_SOUTH_EAST;
xp_bit_gravity_enum XP_GRAVITY_SOUTH_WEST;
xp_init_options_enum XP_IN_BACKGROUND;
xp_window_stack_mode_enum XP_MAPPED_ABOVE;
xp_window_stack_mode_enum XP_MAPPED_BELOW;
xp_window_changes_enum XP_ORIGIN;
xp_request_type_enum XP_REQUEST_CONFIGURE_WINDOW;
xp_request_type_enum XP_REQUEST_COPY_WINDOW;
xp_request_type_enum XP_REQUEST_DESTROY_WINDOW;
xp_request_type_enum XP_REQUEST_DISABLE_UPDATE;
xp_request_type_enum XP_REQUEST_FLUSH_WINDOW;
xp_request_type_enum XP_REQUEST_FRAME_DRAW;
xp_request_type_enum XP_REQUEST_HIDE_CURSOR;
xp_request_type_enum XP_REQUEST_NIL;
xp_request_type_enum XP_REQUEST_REENABLE_UPDATE;
xp_request_type_enum XP_REQUEST_SHOW_CURSOR;
xp_request_type_enum XP_REQUEST_UNLOCK_WINDOW;
xp_window_changes_enum XP_SHAPE;
xp_window_changes_enum XP_SIZE;
xp_window_changes_enum XP_STACKING;
xp_error_enum XP_Success;
xp_window_stack_mode_enum XP_UNMAPPED;
xp_window_changes_enum XP_WINDOW_LEVEL;
xp_window_state_enum XP_WINDOW_STATE_OBSCURED;
xp_window_state_enum XP_WINDOW_STATE_OFFSCREEN;
$F1A50F71D77F5C0A44F94F2AEF75FF0E XSLT_DEBUG_CONT;
$F1A50F71D77F5C0A44F94F2AEF75FF0E XSLT_DEBUG_INIT;
$F1A50F71D77F5C0A44F94F2AEF75FF0E XSLT_DEBUG_NEXT;
$F1A50F71D77F5C0A44F94F2AEF75FF0E XSLT_DEBUG_NONE;
$F1A50F71D77F5C0A44F94F2AEF75FF0E XSLT_DEBUG_QUIT;
$F1A50F71D77F5C0A44F94F2AEF75FF0E XSLT_DEBUG_RUN;
$F1A50F71D77F5C0A44F94F2AEF75FF0E XSLT_DEBUG_RUN_RESTART;
$F1A50F71D77F5C0A44F94F2AEF75FF0E XSLT_DEBUG_STEP;
$F1A50F71D77F5C0A44F94F2AEF75FF0E XSLT_DEBUG_STEPOUT;
$F1A50F71D77F5C0A44F94F2AEF75FF0E XSLT_DEBUG_STOP;
$162ABE26F671F2AD93D06A9AC8714FD1 XSLT_FUNC_APPLYIMPORTS;
$162ABE26F671F2AD93D06A9AC8714FD1 XSLT_FUNC_APPLYTEMPLATES;
$162ABE26F671F2AD93D06A9AC8714FD1 XSLT_FUNC_ATTRIBUTE;
$162ABE26F671F2AD93D06A9AC8714FD1 XSLT_FUNC_CALLTEMPLATE;
$162ABE26F671F2AD93D06A9AC8714FD1 XSLT_FUNC_CHOOSE;
$162ABE26F671F2AD93D06A9AC8714FD1 XSLT_FUNC_COMMENT;
$162ABE26F671F2AD93D06A9AC8714FD1 XSLT_FUNC_COPY;
$162ABE26F671F2AD93D06A9AC8714FD1 XSLT_FUNC_COPYOF;
$162ABE26F671F2AD93D06A9AC8714FD1 XSLT_FUNC_DOCUMENT;
$162ABE26F671F2AD93D06A9AC8714FD1 XSLT_FUNC_ELEMENT;
$162ABE26F671F2AD93D06A9AC8714FD1 XSLT_FUNC_EXTENSION;
$162ABE26F671F2AD93D06A9AC8714FD1 XSLT_FUNC_FOREACH;
$162ABE26F671F2AD93D06A9AC8714FD1 XSLT_FUNC_IF;
$162ABE26F671F2AD93D06A9AC8714FD1 XSLT_FUNC_NUMBER;
$162ABE26F671F2AD93D06A9AC8714FD1 XSLT_FUNC_PARAM;
$162ABE26F671F2AD93D06A9AC8714FD1 XSLT_FUNC_PI;
$162ABE26F671F2AD93D06A9AC8714FD1 XSLT_FUNC_SORT;
$162ABE26F671F2AD93D06A9AC8714FD1 XSLT_FUNC_TEXT;
$162ABE26F671F2AD93D06A9AC8714FD1 XSLT_FUNC_VALUEOF;
$162ABE26F671F2AD93D06A9AC8714FD1 XSLT_FUNC_VARIABLE;
$162ABE26F671F2AD93D06A9AC8714FD1 XSLT_FUNC_WHEN;
$162ABE26F671F2AD93D06A9AC8714FD1 XSLT_FUNC_WITHPARAM;
$118F56CDA9BE3A595E7F6B040CBBDA40 XSLT_LOAD_DOCUMENT;
$118F56CDA9BE3A595E7F6B040CBBDA40 XSLT_LOAD_START;
$118F56CDA9BE3A595E7F6B040CBBDA40 XSLT_LOAD_STYLESHEET;
MACRO_XSLT XSLT_MAX_SORT;
$7DDEDB93E618741445B281E5280D8762 XSLT_OUTPUT_HTML;
$7DDEDB93E618741445B281E5280D8762 XSLT_OUTPUT_TEXT;
$7DDEDB93E618741445B281E5280D8762 XSLT_OUTPUT_XML;
MACRO_XSLT XSLT_PAT_NO_PRIORITY;
$86944522B7C7082BFBF7A67C11C6FF4C XSLT_SECPREF_CREATE_DIRECTORY;
$86944522B7C7082BFBF7A67C11C6FF4C XSLT_SECPREF_READ_FILE;
$86944522B7C7082BFBF7A67C11C6FF4C XSLT_SECPREF_READ_NETWORK;
$86944522B7C7082BFBF7A67C11C6FF4C XSLT_SECPREF_WRITE_FILE;
$86944522B7C7082BFBF7A67C11C6FF4C XSLT_SECPREF_WRITE_NETWORK;
$934315CA77800E2DB42B327F9601CA42 XSLT_STATE_ERROR;
$934315CA77800E2DB42B327F9601CA42 XSLT_STATE_OK;
$934315CA77800E2DB42B327F9601CA42 XSLT_STATE_STOPPED;
MACRO_XSLT_TIMESTAMP XSLT_TIMESTAMP_TICS_PER_SEC;
$84F121FDA2FE4096921DBCF7232175AD XSLT_TRACE_ALL;
$84F121FDA2FE4096921DBCF7232175AD XSLT_TRACE_APPLY_TEMPLATE;
$84F121FDA2FE4096921DBCF7232175AD XSLT_TRACE_APPLY_TEMPLATES;
$84F121FDA2FE4096921DBCF7232175AD XSLT_TRACE_CALL_TEMPLATE;
$84F121FDA2FE4096921DBCF7232175AD XSLT_TRACE_CHOOSE;
$84F121FDA2FE4096921DBCF7232175AD XSLT_TRACE_COMMENT;
$84F121FDA2FE4096921DBCF7232175AD XSLT_TRACE_COPY;
$84F121FDA2FE4096921DBCF7232175AD XSLT_TRACE_COPY_OF;
$84F121FDA2FE4096921DBCF7232175AD XSLT_TRACE_COPY_TEXT;
$84F121FDA2FE4096921DBCF7232175AD XSLT_TRACE_FOR_EACH;
$84F121FDA2FE4096921DBCF7232175AD XSLT_TRACE_IF;
$84F121FDA2FE4096921DBCF7232175AD XSLT_TRACE_KEYS;
$84F121FDA2FE4096921DBCF7232175AD XSLT_TRACE_NONE;
$84F121FDA2FE4096921DBCF7232175AD XSLT_TRACE_PI;
$84F121FDA2FE4096921DBCF7232175AD XSLT_TRACE_PROCESS_NODE;
$84F121FDA2FE4096921DBCF7232175AD XSLT_TRACE_STRIP_SPACES;
$84F121FDA2FE4096921DBCF7232175AD XSLT_TRACE_TEMPLATES;
$84F121FDA2FE4096921DBCF7232175AD XSLT_TRACE_VALUE_OF;
$84F121FDA2FE4096921DBCF7232175AD XSLT_TRACE_VARIABLES;
MACRO_XSLT XSLT_VAR_GLOBAL;
MACRO_XSLT XSLT_VAR_IN_SELECT;
MACRO_XTABS XTABS;
MACRO_XUCRED XUCRED_VERSION;
MACRO_OK X_OK;
MACRO_YESEXPR YESEXPR;
MACRO_YESSTR YESSTR;
MACRO_YPBINDPROC YPBINDPROC_DOMAIN;
MACRO_YPBINDPROC YPBINDPROC_NULL;
MACRO_YPBINDPROC YPBINDPROC_SETDOM;
MACRO_YPBINDPROG YPBINDPROG;
MACRO_YPBINDVERS YPBINDVERS;
MACRO_YPBIND YPBIND_ERR_ERR;
MACRO_YPBIND YPBIND_ERR_NOSERV;
MACRO_YPBIND YPBIND_ERR_RESC;
ypbind_resptype YPBIND_FAIL_VAL;
ypbind_resptype YPBIND_SUCC_VAL;
MACRO_YPERR YPERR_ACCESS;
MACRO_YPERR YPERR_BADARGS;
MACRO_YPERR YPERR_BADDB;
MACRO_YPERR YPERR_BUSY;
MACRO_YPERR YPERR_DOMAIN;
MACRO_YPERR YPERR_KEY;
MACRO_YPERR YPERR_MAP;
MACRO_YPERR YPERR_NODOM;
MACRO_YPERR YPERR_NOMORE;
MACRO_YPERR YPERR_PMAP;
MACRO_YPERR YPERR_RESRC;
MACRO_YPERR YPERR_RPC;
MACRO_YPERR YPERR_VERS;
MACRO_YPERR YPERR_YPBIND;
MACRO_YPERR YPERR_YPERR;
MACRO_YPERR YPERR_YPSERV;
MACRO_YPMAXDOMAIN YPMAXDOMAIN;
MACRO_YPMAXMAP YPMAXMAP;
MACRO_YPMAXPEER YPMAXPEER;
MACRO_YPMAXRECORD YPMAXRECORD;
MACRO_YPOLDPROC YPOLDPROC_DOMAIN;
MACRO_YPOLDPROC YPOLDPROC_DOMAIN_NONACK;
MACRO_YPOLDPROC YPOLDPROC_FIRST;
MACRO_YPOLDPROC YPOLDPROC_GET;
MACRO_YPOLDPROC YPOLDPROC_MATCH;
MACRO_YPOLDPROC YPOLDPROC_NEXT;
MACRO_YPOLDPROC YPOLDPROC_NULL;
MACRO_YPOLDPROC YPOLDPROC_POLL;
MACRO_YPOLDPROC YPOLDPROC_PULL;
MACRO_YPOLDPROC YPOLDPROC_PUSH;
MACRO_YPOLDVERS YPOLDVERS;
MACRO_YPOP YPOP_CHANGE;
MACRO_YPOP YPOP_DELETE;
MACRO_YPOP YPOP_INSERT;
MACRO_YPOP YPOP_STORE;
MACRO_YPPASSWDPROC YPPASSWDPROC_UPDATE;
MACRO_YPPASSWDPROG YPPASSWDPROG;
MACRO_YPPASSWDVERS YPPASSWDVERS;
MACRO_YPPROC YPPROC_ALL;
MACRO_YPPROC YPPROC_CLEAR;
MACRO_YPPROC YPPROC_DOMAIN;
MACRO_YPPROC YPPROC_DOMAIN_NONACK;
MACRO_YPPROC YPPROC_FIRST;
MACRO_YPPROC YPPROC_MAPLIST;
MACRO_YPPROC YPPROC_MASTER;
MACRO_YPPROC YPPROC_MATCH;
MACRO_YPPROC YPPROC_NEXT;
MACRO_YPPROC YPPROC_NULL;
MACRO_YPPROC YPPROC_ORDER;
MACRO_YPPROC YPPROC_XFR;
MACRO_YPPROG YPPROG;
MACRO_YPPUSHPROC YPPUSHPROC_NULL;
MACRO_YPPUSHPROC YPPUSHPROC_XFRRESP;
yppush_status YPPUSH_AGE;
yppush_status YPPUSH_BADARGS;
yppush_status YPPUSH_CLEAR;
yppush_status YPPUSH_DBM;
yppush_status YPPUSH_FILE;
yppush_status YPPUSH_FORCE;
yppush_status YPPUSH_MADDR;
yppush_status YPPUSH_NODOM;
yppush_status YPPUSH_NOMAP;
yppush_status YPPUSH_REFUSED;
yppush_status YPPUSH_RPC;
yppush_status YPPUSH_RSRC;
yppush_status YPPUSH_SKEW;
yppush_status YPPUSH_SUCC;
yppush_status YPPUSH_XFRERR;
MACRO_YPPUSH YPPUSH_XFRRESPPROG;
MACRO_YPPUSH YPPUSH_XFRRESPVERS;
yppush_status YPPUSH_YPERR;
ypreqtype YPREQ_KEY;
ypreqtype YPREQ_MAP_PARMS;
ypreqtype YPREQ_NOKEY;
ypresptype YPRESP_KEY_VAL;
ypresptype YPRESP_MAP_PARMS;
ypresptype YPRESP_VAL;
MACRO_YPVERS YPVERS;
ypxfrstat YPXFR_AGE;
ypxfrstat YPXFR_BADARGS;
ypxfrstat YPXFR_CLEAR;
ypxfrstat YPXFR_DBM;
ypxfrstat YPXFR_FILE;
ypxfrstat YPXFR_FORCE;
ypxfrstat YPXFR_MADDR;
ypxfrstat YPXFR_NODOM;
ypxfrstat YPXFR_NOMAP;
ypxfrstat YPXFR_REFUSED;
ypxfrstat YPXFR_RPC;
ypxfrstat YPXFR_RSRC;
ypxfrstat YPXFR_SKEW;
ypxfrstat YPXFR_SUCC;
ypxfrstat YPXFR_XFRERR;
ypxfrstat YPXFR_YPERR;
ypstat YP_BADARGS;
ypstat YP_BADDB;
ypstat YP_BADOP;
ypstat YP_FALSE;
ypstat YP_NODOM;
ypstat YP_NOKEY;
ypstat YP_NOMAP;
ypstat YP_NOMORE;
ypstat YP_TRUE;
ypstat YP_VERS;
ypstat YP_YPERR;
MACRO_ZALLOC ZALLOC_CODE;
MACRO_ZALLOC ZALLOC_CODE_2;
MACRO_ZFREE ZFREE_CODE;
MACRO_ZFREE ZFREE_CODE_2;
MACRO_ZLIB ZLIB_VERNUM;
MACRO_ZLIB ZLIB_VER_MAJOR;
MACRO_ZLIB ZLIB_VER_MINOR;
MACRO_ZLIB ZLIB_VER_REVISION;
MACRO_ZLIB ZLIB_VER_SUBREVISION;
MACRO_ZONE_NAME_MAX_LEN ZONE_NAME_MAX_LEN;
MACRO_Z Z_ASCII;
MACRO_Z Z_BEST_COMPRESSION;
MACRO_Z Z_BEST_SPEED;
MACRO_Z Z_BINARY;
MACRO_Z Z_BLOCK;
MACRO_Z Z_BUF_ERROR;
MACRO_Z Z_DATA_ERROR;
MACRO_Z Z_DEFAULT_COMPRESSION;
MACRO_Z Z_DEFAULT_STRATEGY;
MACRO_Z Z_DEFLATED;
MACRO_Z Z_ERRNO;
MACRO_Z Z_FILTERED;
MACRO_Z Z_FINISH;
MACRO_Z Z_FIXED;
MACRO_Z Z_FULL_FLUSH;
MACRO_Z Z_HUFFMAN_ONLY;
MACRO_Z Z_MEM_ERROR;
MACRO_Z Z_NEED_DICT;
MACRO_Z Z_NO_COMPRESSION;
MACRO_Z Z_NO_FLUSH;
MACRO_Z Z_NULL;
MACRO_Z Z_OK;
MACRO_Z Z_PARTIAL_FLUSH;
MACRO_Z Z_RLE;
MACRO_Z Z_STREAM_END;
MACRO_Z Z_STREAM_ERROR;
MACRO_Z Z_SYNC_FLUSH;
MACRO_Z Z_TEXT;
MACRO_Z Z_TREES;
MACRO_Z Z_UNKNOWN;
MACRO_Z Z_VERSION_ERROR;
void __cdecl ACCESS_DESCRIPTION_free(ACCESS_DESCRIPTION *a);
const ASN1_ITEM ACCESS_DESCRIPTION_it;
ACCESS_DESCRIPTION *ACCESS_DESCRIPTION_new(void);
MACRO__ACCESS _ACCESS_EXTENDED_MASK;
void __cdecl AES_bi_ige_encrypt(const unsigned __int8 *in, unsigned __int8 *out, const unsigned __int64 length, const AES_KEY *key, const AES_KEY *key2, const unsigned __int8 *ivec, const int enc);
void __cdecl AES_cbc_encrypt(const unsigned __int8 *in, unsigned __int8 *out, const unsigned __int64 length, const AES_KEY *key, unsigned __int8 *ivec, const int enc);
void __cdecl AES_cfb128_encrypt(const unsigned __int8 *in, unsigned __int8 *out, const unsigned __int64 length, const AES_KEY *key, unsigned __int8 *ivec, int *num, const int enc);
void __cdecl AES_cfb1_encrypt(const unsigned __int8 *in, unsigned __int8 *out, const unsigned __int64 length, const AES_KEY *key, unsigned __int8 *ivec, int *num, const int enc);
void __cdecl AES_cfb8_encrypt(const unsigned __int8 *in, unsigned __int8 *out, const unsigned __int64 length, const AES_KEY *key, unsigned __int8 *ivec, int *num, const int enc);
void __cdecl AES_cfbr_encrypt_block(const unsigned __int8 *in, unsigned __int8 *out, const int nbits, const AES_KEY *key, unsigned __int8 *ivec, const int enc);
void __cdecl AES_ctr128_encrypt(const unsigned __int8 *in, unsigned __int8 *out, const unsigned __int64 length, const AES_KEY *key, unsigned __int8 ivec[16], unsigned __int8 ecount_buf[16], unsigned int *num);
void __cdecl AES_decrypt(const unsigned __int8 *in, unsigned __int8 *out, const AES_KEY *key);
void __cdecl AES_ecb_encrypt(const unsigned __int8 *in, unsigned __int8 *out, const AES_KEY *key, const int enc);
void __cdecl AES_encrypt(const unsigned __int8 *in, unsigned __int8 *out, const AES_KEY *key);
void __cdecl AES_ige_encrypt(const unsigned __int8 *in, unsigned __int8 *out, const unsigned __int64 length, const AES_KEY *key, unsigned __int8 *ivec, const int enc);
void __cdecl AES_ofb128_encrypt(const unsigned __int8 *in, unsigned __int8 *out, const unsigned __int64 length, const AES_KEY *key, unsigned __int8 *ivec, int *num);
const char *AES_options(void);
int __cdecl AES_set_decrypt_key(const unsigned __int8 *userKey, const int bits, AES_KEY *key);
int __cdecl AES_set_encrypt_key(const unsigned __int8 *userKey, const int bits, AES_KEY *key);
int __cdecl AES_unwrap_key(AES_KEY *key, const unsigned __int8 *iv, unsigned __int8 *out, const unsigned __int8 *in, unsigned int inlen);
int __cdecl AES_wrap_key(AES_KEY *key, const unsigned __int8 *iv, unsigned __int8 *out, const unsigned __int8 *in, unsigned int inlen);
MACRO_SOURCE _ALL_SOURCE;
MACRO_OK _APPEND_OK;
const ASN1_ITEM ASN1_ANY_it;
ASN1_METHOD *ASN1_BIT_STRING_asn1_meth(void);
void __cdecl ASN1_BIT_STRING_free(ASN1_BIT_STRING *a);
int __cdecl ASN1_BIT_STRING_get_bit(ASN1_BIT_STRING *a, int n);
const ASN1_ITEM ASN1_BIT_STRING_it;
int __cdecl ASN1_BIT_STRING_name_print(BIO *out, ASN1_BIT_STRING *bs, BIT_STRING_BITNAME *tbl, int indent);
ASN1_BIT_STRING *ASN1_BIT_STRING_new(void);
int __cdecl ASN1_BIT_STRING_num_asc(char *name, BIT_STRING_BITNAME *tbl);
int __cdecl ASN1_BIT_STRING_set(ASN1_BIT_STRING *a, unsigned __int8 *d, int length);
int __cdecl ASN1_BIT_STRING_set_asc(ASN1_BIT_STRING *bs, char *name, int value, BIT_STRING_BITNAME *tbl);
int __cdecl ASN1_BIT_STRING_set_bit(ASN1_BIT_STRING *a, int n, int value);
void __cdecl ASN1_BMPSTRING_free(ASN1_BMPSTRING *a);
const ASN1_ITEM ASN1_BMPSTRING_it;
ASN1_BMPSTRING *ASN1_BMPSTRING_new(void);
const ASN1_ITEM ASN1_BOOLEAN_it;
void __cdecl ASN1_ENUMERATED_free(ASN1_ENUMERATED *a);
__int64 __cdecl ASN1_ENUMERATED_get(ASN1_ENUMERATED *a);
const ASN1_ITEM ASN1_ENUMERATED_it;
ASN1_ENUMERATED *ASN1_ENUMERATED_new(void);
int __cdecl ASN1_ENUMERATED_set(ASN1_ENUMERATED *a, __int64 v);
BIGNUM *__cdecl ASN1_ENUMERATED_to_BN(ASN1_ENUMERATED *ai, BIGNUM *bn);
const ASN1_ITEM ASN1_FBOOLEAN_it;
int __cdecl ASN1_GENERALIZEDTIME_check(ASN1_GENERALIZEDTIME *a);
void __cdecl ASN1_GENERALIZEDTIME_free(ASN1_GENERALIZEDTIME *a);
const ASN1_ITEM ASN1_GENERALIZEDTIME_it;
ASN1_GENERALIZEDTIME *ASN1_GENERALIZEDTIME_new(void);
int __cdecl ASN1_GENERALIZEDTIME_print(BIO *fp, ASN1_GENERALIZEDTIME *a);
ASN1_GENERALIZEDTIME *__cdecl ASN1_GENERALIZEDTIME_set(ASN1_GENERALIZEDTIME *s, time_t t);
int __cdecl ASN1_GENERALIZEDTIME_set_string(ASN1_GENERALIZEDTIME *s, const char *str);
void __cdecl ASN1_GENERALSTRING_free(ASN1_GENERALSTRING *a);
const ASN1_ITEM ASN1_GENERALSTRING_it;
ASN1_GENERALSTRING *ASN1_GENERALSTRING_new(void);
void __cdecl ASN1_HEADER_free(ASN1_HEADER *a);
ASN1_HEADER *ASN1_HEADER_new(void);
ASN1_METHOD *ASN1_IA5STRING_asn1_meth(void);
void __cdecl ASN1_IA5STRING_free(ASN1_IA5STRING *a);
const ASN1_ITEM ASN1_IA5STRING_it;
ASN1_IA5STRING *ASN1_IA5STRING_new(void);
int __cdecl ASN1_INTEGER_cmp(ASN1_INTEGER *x, ASN1_INTEGER *y);
ASN1_INTEGER *__cdecl ASN1_INTEGER_dup(ASN1_INTEGER *x);
void __cdecl ASN1_INTEGER_free(ASN1_INTEGER *a);
__int64 __cdecl ASN1_INTEGER_get(ASN1_INTEGER *a);
const ASN1_ITEM ASN1_INTEGER_it;
ASN1_INTEGER *ASN1_INTEGER_new(void);
int __cdecl ASN1_INTEGER_set(ASN1_INTEGER *a, __int64 v);
BIGNUM *__cdecl ASN1_INTEGER_to_BN(ASN1_INTEGER *ai, BIGNUM *bn);
void __cdecl ASN1_NULL_free(ASN1_NULL *a);
const ASN1_ITEM ASN1_NULL_it;
ASN1_NULL *ASN1_NULL_new(void);
ASN1_OBJECT *__cdecl ASN1_OBJECT_create(int nid, unsigned __int8 *data, int len, const char *sn, const char *ln);
void __cdecl ASN1_OBJECT_free(ASN1_OBJECT *a);
const ASN1_ITEM ASN1_OBJECT_it;
ASN1_OBJECT *ASN1_OBJECT_new(void);
const ASN1_ITEM ASN1_OCTET_STRING_NDEF_it;
int __cdecl ASN1_OCTET_STRING_cmp(ASN1_OCTET_STRING *a, ASN1_OCTET_STRING *b);
ASN1_OCTET_STRING *__cdecl ASN1_OCTET_STRING_dup(ASN1_OCTET_STRING *a);
void __cdecl ASN1_OCTET_STRING_free(ASN1_OCTET_STRING *a);
const ASN1_ITEM ASN1_OCTET_STRING_it;
ASN1_OCTET_STRING *ASN1_OCTET_STRING_new(void);
int __cdecl ASN1_OCTET_STRING_set(ASN1_OCTET_STRING *str, const unsigned __int8 *data, int len);
void __cdecl ASN1_PRINTABLESTRING_free(ASN1_PRINTABLESTRING *a);
const ASN1_ITEM ASN1_PRINTABLESTRING_it;
ASN1_PRINTABLESTRING *ASN1_PRINTABLESTRING_new(void);
void __cdecl ASN1_PRINTABLE_free(ASN1_STRING *a);
const ASN1_ITEM ASN1_PRINTABLE_it;
ASN1_STRING *ASN1_PRINTABLE_new(void);
int __cdecl ASN1_PRINTABLE_type(const unsigned __int8 *s, int max);
const ASN1_ITEM ASN1_SEQUENCE_it;
int __cdecl ASN1_STRING_TABLE_add(int, __int64, __int64, unsigned __int64, unsigned __int64);
void ASN1_STRING_TABLE_cleanup(void);
ASN1_STRING_TABLE *__cdecl ASN1_STRING_TABLE_get(int nid);
int __cdecl ASN1_STRING_cmp(ASN1_STRING *a, ASN1_STRING *b);
unsigned __int8 *__cdecl ASN1_STRING_data(ASN1_STRING *x);
ASN1_STRING *__cdecl ASN1_STRING_dup(ASN1_STRING *a);
ASN1_STRING *__cdecl ASN1_STRING_encode(ASN1_STRING *s, i2d_of_void *i2d, void *data, STACK *sk);
void __cdecl ASN1_STRING_free(ASN1_STRING *a);
unsigned __int64 ASN1_STRING_get_default_mask(void);
int __cdecl ASN1_STRING_length(ASN1_STRING *x);
void __cdecl ASN1_STRING_length_set(ASN1_STRING *x, int n);
ASN1_STRING *ASN1_STRING_new(void);
int __cdecl ASN1_STRING_print(BIO *bp, ASN1_STRING *v);
int __cdecl ASN1_STRING_print_ex(BIO *out, ASN1_STRING *str, unsigned __int64 flags);
int __cdecl ASN1_STRING_print_ex_fp(FILE *fp, ASN1_STRING *str, unsigned __int64 flags);
int __cdecl ASN1_STRING_set(ASN1_STRING *str, const void *data, int len);
void __cdecl ASN1_STRING_set0(ASN1_STRING *str, void *data, int len);
ASN1_STRING *__cdecl ASN1_STRING_set_by_NID(ASN1_STRING **out, const unsigned __int8 *in, int inlen, int inform, int nid);
void __cdecl ASN1_STRING_set_default_mask(unsigned __int64 mask);
int __cdecl ASN1_STRING_set_default_mask_asc(const char *p);
int __cdecl ASN1_STRING_to_UTF8(unsigned __int8 **out, ASN1_STRING *in);
int __cdecl ASN1_STRING_type(ASN1_STRING *x);
ASN1_STRING *__cdecl ASN1_STRING_type_new(int type);
void __cdecl ASN1_T61STRING_free(ASN1_T61STRING *a);
const ASN1_ITEM ASN1_T61STRING_it;
ASN1_T61STRING *ASN1_T61STRING_new(void);
const ASN1_ITEM ASN1_TBOOLEAN_it;
int __cdecl ASN1_TIME_check(ASN1_TIME *t);
void __cdecl ASN1_TIME_free(ASN1_TIME *a);
const ASN1_ITEM ASN1_TIME_it;
ASN1_TIME *ASN1_TIME_new(void);
int __cdecl ASN1_TIME_print(BIO *fp, ASN1_TIME *a);
ASN1_TIME *__cdecl ASN1_TIME_set(ASN1_TIME *s, time_t t);
ASN1_GENERALIZEDTIME *__cdecl ASN1_TIME_to_generalizedtime(ASN1_TIME *t, ASN1_GENERALIZEDTIME **out);
void __cdecl ASN1_TYPE_free(ASN1_TYPE *a);
int __cdecl ASN1_TYPE_get(ASN1_TYPE *a);
int __cdecl ASN1_TYPE_get_int_octetstring(ASN1_TYPE *a, __int64 *num, unsigned __int8 *data, int max_len);
int __cdecl ASN1_TYPE_get_octetstring(ASN1_TYPE *a, unsigned __int8 *data, int max_len);
ASN1_TYPE *ASN1_TYPE_new(void);
void __cdecl ASN1_TYPE_set(ASN1_TYPE *a, int type, void *value);
int __cdecl ASN1_TYPE_set1(ASN1_TYPE *a, int type, const void *value);
int __cdecl ASN1_TYPE_set_int_octetstring(ASN1_TYPE *a, __int64 num, unsigned __int8 *data, int len);
int __cdecl ASN1_TYPE_set_octetstring(ASN1_TYPE *a, unsigned __int8 *data, int len);
void __cdecl ASN1_UNIVERSALSTRING_free(ASN1_UNIVERSALSTRING *a);
const ASN1_ITEM ASN1_UNIVERSALSTRING_it;
ASN1_UNIVERSALSTRING *ASN1_UNIVERSALSTRING_new(void);
int __cdecl ASN1_UNIVERSALSTRING_to_string(ASN1_UNIVERSALSTRING *s);
int __cdecl ASN1_UTCTIME_check(ASN1_UTCTIME *a);
int __cdecl ASN1_UTCTIME_cmp_time_t(const ASN1_UTCTIME *s, time_t t);
void __cdecl ASN1_UTCTIME_free(ASN1_UTCTIME *a);
const ASN1_ITEM ASN1_UTCTIME_it;
ASN1_UTCTIME *ASN1_UTCTIME_new(void);
int __cdecl ASN1_UTCTIME_print(BIO *fp, ASN1_UTCTIME *a);
ASN1_UTCTIME *__cdecl ASN1_UTCTIME_set(ASN1_UTCTIME *s, time_t t);
int __cdecl ASN1_UTCTIME_set_string(ASN1_UTCTIME *s, const char *str);
void __cdecl ASN1_UTF8STRING_free(ASN1_UTF8STRING *a);
const ASN1_ITEM ASN1_UTF8STRING_it;
ASN1_UTF8STRING *ASN1_UTF8STRING_new(void);
void __cdecl ASN1_VISIBLESTRING_free(ASN1_VISIBLESTRING *a);
const ASN1_ITEM ASN1_VISIBLESTRING_it;
ASN1_VISIBLESTRING *ASN1_VISIBLESTRING_new(void);
void ASN1_add_oid_module(void);
int __cdecl ASN1_check_infinite_end(unsigned __int8 **p, __int64 len);
int __cdecl ASN1_const_check_infinite_end(const unsigned __int8 **p, __int64 len);
void *__cdecl ASN1_d2i_bio(void *(*xnew)(void), d2i_of_void *d2i, BIO *in, void **x);
void *__cdecl ASN1_d2i_fp(void *(*xnew)(void), d2i_of_void *d2i, FILE *in, void **x);
int __cdecl ASN1_digest(i2d_of_void *i2d, const EVP_MD *type, char *data, unsigned __int8 *md, unsigned int *len);
void *__cdecl ASN1_dup(i2d_of_void *i2d, d2i_of_void *d2i, char *x);
ASN1_TYPE *__cdecl ASN1_generate_nconf(char *str, CONF *nconf);
ASN1_TYPE *__cdecl ASN1_generate_v3(char *str, X509V3_CTX *cnf);
int __cdecl ASN1_get_object(const unsigned __int8 **pp, __int64 *plength, int *ptag, int *pclass, __int64 omax);
int __cdecl ASN1_i2d_bio(i2d_of_void *i2d, BIO *out, unsigned __int8 *x);
int __cdecl ASN1_i2d_fp(i2d_of_void *i2d, FILE *out, void *x);
ASN1_VALUE *__cdecl ASN1_item_d2i(ASN1_VALUE **val, const unsigned __int8 **in, __int64 len, const ASN1_ITEM *it);
void *__cdecl ASN1_item_d2i_bio(const ASN1_ITEM *it, BIO *in, void *x);
void *__cdecl ASN1_item_d2i_fp(const ASN1_ITEM *it, FILE *in, void *x);
int __cdecl ASN1_item_digest(const ASN1_ITEM *it, const EVP_MD *type, void *data, unsigned __int8 *md, unsigned int *len);
void *__cdecl ASN1_item_dup(const ASN1_ITEM *it, void *x);
int __cdecl ASN1_item_ex_d2i(ASN1_VALUE **pval, const unsigned __int8 **in, __int64 len, const ASN1_ITEM *it, int tag, int aclass, char opt, ASN1_TLC *ctx);
void __cdecl ASN1_item_ex_free(ASN1_VALUE **pval, const ASN1_ITEM *it);
int __cdecl ASN1_item_ex_i2d(ASN1_VALUE **pval, unsigned __int8 **out, const ASN1_ITEM *it, int tag, int aclass);
int __cdecl ASN1_item_ex_new(ASN1_VALUE **pval, const ASN1_ITEM *it);
void __cdecl ASN1_item_free(ASN1_VALUE *val, const ASN1_ITEM *it);
int __cdecl ASN1_item_i2d(ASN1_VALUE *val, unsigned __int8 **out, const ASN1_ITEM *it);
int __cdecl ASN1_item_i2d_bio(const ASN1_ITEM *it, BIO *out, void *x);
int __cdecl ASN1_item_i2d_fp(const ASN1_ITEM *it, FILE *out, void *x);
int __cdecl ASN1_item_ndef_i2d(ASN1_VALUE *val, unsigned __int8 **out, const ASN1_ITEM *it);
ASN1_VALUE *__cdecl ASN1_item_new(const ASN1_ITEM *it);
ASN1_STRING *__cdecl ASN1_item_pack(void *obj, const ASN1_ITEM *it, ASN1_OCTET_STRING **oct);
int __cdecl ASN1_item_sign(const ASN1_ITEM *it, X509_ALGOR *algor1, X509_ALGOR *algor2, ASN1_BIT_STRING *signature, void *data, EVP_PKEY *pkey, const EVP_MD *type);
void *__cdecl ASN1_item_unpack(ASN1_STRING *oct, const ASN1_ITEM *it);
int __cdecl ASN1_item_verify(const ASN1_ITEM *it, X509_ALGOR *algor1, ASN1_BIT_STRING *signature, void *data, EVP_PKEY *pkey);
int __cdecl ASN1_mbstring_copy(ASN1_STRING **out, const unsigned __int8 *in, int len, int inform, unsigned __int64 mask);
int __cdecl ASN1_mbstring_ncopy(ASN1_STRING **out, const unsigned __int8 *in, int len, int inform, unsigned __int64 mask, __int64 minsize, __int64 maxsize);
int __cdecl ASN1_object_size(int constructed, int length, int tag);
ASN1_STRING *__cdecl ASN1_pack_string(void *obj, i2d_of_void *i2d, ASN1_OCTET_STRING **oct);
int __cdecl ASN1_parse(BIO *bp, const unsigned __int8 *pp, __int64 len, int indent);
int __cdecl ASN1_parse_dump(BIO *bp, const unsigned __int8 *pp, __int64 len, int indent, int dump);
void __cdecl ASN1_primitive_free(ASN1_VALUE **pval, const ASN1_ITEM *it);
int __cdecl ASN1_primitive_new(ASN1_VALUE **pval, const ASN1_ITEM *it);
int __cdecl ASN1_put_eoc(unsigned __int8 **pp);
void __cdecl ASN1_put_object(unsigned __int8 **pp, int constructed, int length, int tag, int xclass);
unsigned __int8 *__cdecl ASN1_seq_pack(STACK *safes, i2d_of_void *i2d, unsigned __int8 **buf, int *len);
STACK *__cdecl ASN1_seq_unpack(const unsigned __int8 *buf, int len, d2i_of_void *d2i, void (__cdecl *free_func)(void *));
int __cdecl ASN1_sign(i2d_of_void *i2d, X509_ALGOR *algor1, X509_ALGOR *algor2, ASN1_BIT_STRING *signature, char *data, EVP_PKEY *pkey, const EVP_MD *type);
unsigned __int64 __cdecl ASN1_tag2bit(int tag);
const char *__cdecl ASN1_tag2str(int tag);
int __cdecl ASN1_template_d2i(ASN1_VALUE **pval, const unsigned __int8 **in, __int64 len, const ASN1_TEMPLATE *tt);
void __cdecl ASN1_template_free(ASN1_VALUE **pval, const ASN1_TEMPLATE *tt);
int __cdecl ASN1_template_i2d(ASN1_VALUE **pval, unsigned __int8 **out, const ASN1_TEMPLATE *tt);
int __cdecl ASN1_template_new(ASN1_VALUE **pval, const ASN1_TEMPLATE *tt);
void *__cdecl ASN1_unpack_string(ASN1_STRING *oct, d2i_of_void *d2i);
int __cdecl ASN1_verify(i2d_of_void *i2d, X509_ALGOR *algor1, ASN1_BIT_STRING *signature, char *data, EVP_PKEY *pkey);
void __cdecl AUTHORITY_INFO_ACCESS_free(AUTHORITY_INFO_ACCESS *a);
const ASN1_ITEM AUTHORITY_INFO_ACCESS_it;
AUTHORITY_INFO_ACCESS *AUTHORITY_INFO_ACCESS_new(void);
void __cdecl AUTHORITY_KEYID_free(AUTHORITY_KEYID *a);
const ASN1_ITEM AUTHORITY_KEYID_it;
AUTHORITY_KEYID *AUTHORITY_KEYID_new(void);
void __cdecl BASIC_CONSTRAINTS_free(BASIC_CONSTRAINTS *a);
const ASN1_ITEM BASIC_CONSTRAINTS_it;
BASIC_CONSTRAINTS *BASIC_CONSTRAINTS_new(void);
char *BC;
void __cdecl BF_cbc_encrypt(const unsigned __int8 *in, unsigned __int8 *out, __int64 length, const BF_KEY *schedule, unsigned __int8 *ivec, int enc);
void __cdecl BF_cfb64_encrypt(const unsigned __int8 *in, unsigned __int8 *out, __int64 length, const BF_KEY *schedule, unsigned __int8 *ivec, int *num, int enc);
void __cdecl BF_decrypt(unsigned int *data, const BF_KEY *key);
void __cdecl BF_ecb_encrypt(const unsigned __int8 *in, unsigned __int8 *out, const BF_KEY *key, int enc);
void __cdecl BF_encrypt(unsigned int *data, const BF_KEY *key);
void __cdecl BF_ofb64_encrypt(const unsigned __int8 *in, unsigned __int8 *out, __int64 length, const BF_KEY *schedule, unsigned __int8 *ivec, int *num);
const char *BF_options(void);
void __cdecl BF_set_key(BF_KEY *key, int len, const unsigned __int8 *data);
const ASN1_ITEM BIGNUM_it;
int __cdecl BIO_accept(int sock, char **ip_port);
__int64 __cdecl BIO_callback_ctrl(BIO *b, int cmd, void (__cdecl *fp)(struct bio_st *, int, const char *, int, __int64, __int64));
void __cdecl BIO_clear_flags(BIO *b, int flags);
void __cdecl BIO_copy_next_retry(BIO *b);
__int64 __cdecl BIO_ctrl(BIO *bp, int cmd, __int64 larg, void *parg);
size_t __cdecl BIO_ctrl_get_read_request(BIO *b);
size_t __cdecl BIO_ctrl_get_write_guarantee(BIO *b);
size_t __cdecl BIO_ctrl_pending(BIO *b);
int __cdecl BIO_ctrl_reset_read_request(BIO *b);
size_t __cdecl BIO_ctrl_wpending(BIO *b);
__int64 __cdecl BIO_debug_callback(BIO *bio, int cmd, const char *argp, int argi, __int64 argl, __int64 ret);
int __cdecl BIO_dgram_non_fatal_error(int error);
int __cdecl BIO_dump(BIO *b, const char *bytes, int len);
int __cdecl BIO_dump_cb(int (__cdecl *cb)(const void *data, size_t len, void *u), void *u, const char *s, int len);
int __cdecl BIO_dump_fp(FILE *fp, const char *s, int len);
int __cdecl BIO_dump_indent(BIO *b, const char *bytes, int len, int indent);
int __cdecl BIO_dump_indent_cb(int (__cdecl *cb)(const void *data, size_t len, void *u), void *u, const char *s, int len, int indent);
int __cdecl BIO_dump_indent_fp(FILE *fp, const char *s, int len, int indent);
BIO *__cdecl BIO_dup_chain(BIO *in);
BIO_METHOD *BIO_f_base64(void);
BIO_METHOD *BIO_f_buffer(void);
BIO_METHOD *BIO_f_cipher(void);
BIO_METHOD *BIO_f_md(void);
BIO_METHOD *BIO_f_nbio_test(void);
BIO_METHOD *BIO_f_null(void);
BIO_METHOD *BIO_f_reliable(void);
BIO_METHOD *BIO_f_ssl(void);
int __cdecl BIO_fd_non_fatal_error(int error);
int __cdecl BIO_fd_should_retry(int i);
BIO *__cdecl BIO_find_type(BIO *b, int bio_type);
int __cdecl BIO_free(BIO *a);
void __cdecl BIO_free_all(BIO *a);
int __cdecl BIO_get_accept_socket(char *host_port, int mode);
__int64 (__cdecl *__cdecl BIO_get_callback(const BIO *b))(struct bio_st *, int, const char *, int, __int64, __int64);
char *__cdecl BIO_get_callback_arg(const BIO *b);
void *__cdecl BIO_get_ex_data(BIO *bio, int idx);
int __cdecl BIO_get_ex_new_index(__int64 argl, void *argp, CRYPTO_EX_new *new_func, CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func);
int __cdecl BIO_get_host_ip(const char *str, unsigned __int8 *ip);
int __cdecl BIO_get_port(const char *str, unsigned __int16 *port_ptr);
BIO *__cdecl BIO_get_retry_BIO(BIO *bio, int *reason);
int __cdecl BIO_get_retry_reason(BIO *bio);
struct hostent *__cdecl BIO_gethostbyname(const char *name);
int __cdecl BIO_gets(BIO *bp, char *buf, int size);
int __cdecl BIO_indent(BIO *b, int indent, int max);
__int64 __cdecl BIO_int_ctrl(BIO *bp, int cmd, __int64 larg, int iarg);
const char *__cdecl BIO_method_name(const BIO *b);
int __cdecl BIO_method_type(const BIO *b);
BIO *__cdecl BIO_new(BIO_METHOD *type);
BIO *__cdecl BIO_new_accept(char *host_port);
int __cdecl BIO_new_bio_pair(BIO **bio1, size_t writebuf1, BIO **bio2, size_t writebuf2);
BIO *__cdecl BIO_new_buffer_ssl_connect(SSL_CTX *ctx);
BIO *__cdecl BIO_new_connect(char *host_port);
BIO *__cdecl BIO_new_dgram(int fd, int close_flag);
BIO *__cdecl BIO_new_fd(int fd, int close_flag);
BIO *__cdecl BIO_new_file(const char *filename, const char *mode);
BIO *__cdecl BIO_new_fp(FILE *stream, int close_flag);
BIO *__cdecl BIO_new_mem_buf(void *buf, int len);
BIO *__cdecl BIO_new_socket(int sock, int close_flag);
BIO *__cdecl BIO_new_ssl(SSL_CTX *ctx, int client);
BIO *__cdecl BIO_new_ssl_connect(SSL_CTX *ctx);
BIO *__cdecl BIO_next(BIO *b);
int __cdecl BIO_nread(BIO *bio, char **buf, int num);
int __cdecl BIO_nread0(BIO *bio, char **buf);
unsigned __int64 __cdecl BIO_number_read(BIO *bio);
unsigned __int64 __cdecl BIO_number_written(BIO *bio);
int __cdecl BIO_nwrite(BIO *bio, char **buf, int num);
int __cdecl BIO_nwrite0(BIO *bio, char **buf);
BIO *__cdecl BIO_pop(BIO *b);
int BIO_printf(BIO *bio, const char *format, ...);
char *__cdecl BIO_ptr_ctrl(BIO *bp, int cmd, __int64 larg);
BIO *__cdecl BIO_push(BIO *b, BIO *append);
int __cdecl BIO_puts(BIO *bp, const char *buf);
int __cdecl BIO_read(BIO *b, void *data, int len);
BIO_METHOD *BIO_s_accept(void);
BIO_METHOD *BIO_s_bio(void);
BIO_METHOD *BIO_s_connect(void);
BIO_METHOD *BIO_s_datagram(void);
BIO_METHOD *BIO_s_fd(void);
BIO_METHOD *BIO_s_file(void);
BIO_METHOD *BIO_s_log(void);
BIO_METHOD *BIO_s_mem(void);
BIO_METHOD *BIO_s_null(void);
BIO_METHOD *BIO_s_socket(void);
int __cdecl BIO_set(BIO *a, BIO_METHOD *type);
void __cdecl BIO_set_callback(BIO *b, __int64 (__cdecl *callback)(struct bio_st *, int, const char *, int, __int64, __int64));
void __cdecl BIO_set_callback_arg(BIO *b, char *arg);
void __cdecl BIO_set_cipher(BIO *b, const EVP_CIPHER *c, const unsigned __int8 *k, const unsigned __int8 *i, int enc);
int __cdecl BIO_set_ex_data(BIO *bio, int idx, void *data);
void __cdecl BIO_set_flags(BIO *b, int flags);
int __cdecl BIO_set_tcp_ndelay(int sock, int turn_on);
int BIO_snprintf(char *buf, size_t n, const char *format, ...);
void BIO_sock_cleanup(void);
int __cdecl BIO_sock_error(int sock);
int BIO_sock_init(void);
int __cdecl BIO_sock_non_fatal_error(int error);
int __cdecl BIO_sock_should_retry(int i);
int __cdecl BIO_socket_ioctl(int fd, __int64 type, void *arg);
int __cdecl BIO_socket_nbio(int fd, int mode);
int __cdecl BIO_ssl_copy_session_id(BIO *to, BIO *from);
void __cdecl BIO_ssl_shutdown(BIO *ssl_bio);
int __cdecl BIO_test_flags(const BIO *b, int flags);
void __cdecl BIO_vfree(BIO *a);
int __cdecl BIO_vprintf(BIO *bio, const char *format, va_list args);
int __cdecl BIO_vsnprintf(char *buf, size_t n, const char *format, va_list args);
int __cdecl BIO_write(BIO *b, const void *data, int len);
int __cdecl BN_BLINDING_convert(BIGNUM *n, BN_BLINDING *b, BN_CTX *ctx);
int __cdecl BN_BLINDING_convert_ex(BIGNUM *n, BIGNUM *r, BN_BLINDING *b, BN_CTX *);
BN_BLINDING *__cdecl BN_BLINDING_create_param(BN_BLINDING *b, const BIGNUM *e, BIGNUM *m, BN_CTX *ctx, int (__cdecl *bn_mod_exp)(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx), BN_MONT_CTX *m_ctx);
void __cdecl BN_BLINDING_free(BN_BLINDING *b);
unsigned __int64 __cdecl BN_BLINDING_get_flags(const BN_BLINDING *);
unsigned __int64 __cdecl BN_BLINDING_get_thread_id(const BN_BLINDING *);
int __cdecl BN_BLINDING_invert(BIGNUM *n, BN_BLINDING *b, BN_CTX *ctx);
int __cdecl BN_BLINDING_invert_ex(BIGNUM *n, const BIGNUM *r, BN_BLINDING *b, BN_CTX *);
BN_BLINDING *__cdecl BN_BLINDING_new(const BIGNUM *A, const BIGNUM *Ai, BIGNUM *mod);
void __cdecl BN_BLINDING_set_flags(BN_BLINDING *, unsigned __int64);
void __cdecl BN_BLINDING_set_thread_id(BN_BLINDING *, unsigned __int64);
int __cdecl BN_BLINDING_update(BN_BLINDING *b, BN_CTX *ctx);
void __cdecl BN_CTX_end(BN_CTX *ctx);
void __cdecl BN_CTX_free(BN_CTX *c);
BIGNUM *__cdecl BN_CTX_get(BN_CTX *ctx);
void __cdecl BN_CTX_init(BN_CTX *c);
BN_CTX *BN_CTX_new(void);
void __cdecl BN_CTX_start(BN_CTX *ctx);
int __cdecl BN_GENCB_call(BN_GENCB *cb, int a, int b);
int __cdecl BN_GF2m_add(BIGNUM *r, const BIGNUM *a, const BIGNUM *b);
int __cdecl BN_GF2m_arr2poly(const unsigned int p[], BIGNUM *a);
int __cdecl BN_GF2m_mod(BIGNUM *r, const BIGNUM *a, const BIGNUM *p);
int __cdecl BN_GF2m_mod_arr(BIGNUM *r, const BIGNUM *a, const unsigned int p[]);
int __cdecl BN_GF2m_mod_div(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *p, BN_CTX *ctx);
int __cdecl BN_GF2m_mod_div_arr(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const unsigned int p[], BN_CTX *ctx);
int __cdecl BN_GF2m_mod_exp(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *p, BN_CTX *ctx);
int __cdecl BN_GF2m_mod_exp_arr(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const unsigned int p[], BN_CTX *ctx);
int __cdecl BN_GF2m_mod_inv(BIGNUM *r, const BIGNUM *b, const BIGNUM *p, BN_CTX *ctx);
int __cdecl BN_GF2m_mod_inv_arr(BIGNUM *r, const BIGNUM *b, const unsigned int p[], BN_CTX *ctx);
int __cdecl BN_GF2m_mod_mul(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *p, BN_CTX *ctx);
int __cdecl BN_GF2m_mod_mul_arr(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const unsigned int p[], BN_CTX *ctx);
int __cdecl BN_GF2m_mod_solve_quad(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx);
int __cdecl BN_GF2m_mod_solve_quad_arr(BIGNUM *r, const BIGNUM *a, const unsigned int p[], BN_CTX *ctx);
int __cdecl BN_GF2m_mod_sqr(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx);
int __cdecl BN_GF2m_mod_sqr_arr(BIGNUM *r, const BIGNUM *a, const unsigned int p[], BN_CTX *ctx);
int __cdecl BN_GF2m_mod_sqrt(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx);
int __cdecl BN_GF2m_mod_sqrt_arr(BIGNUM *r, const BIGNUM *a, const unsigned int p[], BN_CTX *ctx);
int __cdecl BN_GF2m_poly2arr(const BIGNUM *a, unsigned int p[], int max);
BN_MONT_CTX *__cdecl BN_MONT_CTX_copy(BN_MONT_CTX *to, BN_MONT_CTX *from);
void __cdecl BN_MONT_CTX_free(BN_MONT_CTX *mont);
void __cdecl BN_MONT_CTX_init(BN_MONT_CTX *ctx);
BN_MONT_CTX *BN_MONT_CTX_new(void);
int __cdecl BN_MONT_CTX_set(BN_MONT_CTX *mont, const BIGNUM *mod, BN_CTX *ctx);
BN_MONT_CTX *__cdecl BN_MONT_CTX_set_locked(BN_MONT_CTX **pmont, int lock, const BIGNUM *mod, BN_CTX *ctx);
void __cdecl BN_RECP_CTX_free(BN_RECP_CTX *recp);
void __cdecl BN_RECP_CTX_init(BN_RECP_CTX *recp);
BN_RECP_CTX *BN_RECP_CTX_new(void);
int __cdecl BN_RECP_CTX_set(BN_RECP_CTX *recp, const BIGNUM *rdiv, BN_CTX *ctx);
int __cdecl BN_X931_derive_prime_ex(BIGNUM *p, BIGNUM *p1, BIGNUM *p2, const BIGNUM *Xp, const BIGNUM *Xp1, const BIGNUM *Xp2, const BIGNUM *e, BN_CTX *ctx, BN_GENCB *cb);
int __cdecl BN_X931_generate_Xpq(BIGNUM *Xp, BIGNUM *Xq, int nbits, BN_CTX *ctx);
int __cdecl BN_X931_generate_prime_ex(BIGNUM *p, BIGNUM *p1, BIGNUM *p2, BIGNUM *Xp1, BIGNUM *Xp2, const BIGNUM *Xp, const BIGNUM *e, BN_CTX *ctx, BN_GENCB *cb);
int __cdecl BN_add(BIGNUM *r, const BIGNUM *a, const BIGNUM *b);
int __cdecl BN_add_word(BIGNUM *a, unsigned __int64 w);
BIGNUM *__cdecl BN_bin2bn(const unsigned __int8 *s, int len, BIGNUM *ret);
int __cdecl BN_bn2bin(const BIGNUM *a, unsigned __int8 *to);
char *__cdecl BN_bn2dec(const BIGNUM *a);
char *__cdecl BN_bn2hex(const BIGNUM *a);
int __cdecl BN_bn2mpi(const BIGNUM *a, unsigned __int8 *to);
int __cdecl BN_bntest_rand(BIGNUM *rnd, int bits, int top, int bottom);
void __cdecl BN_clear(BIGNUM *a);
int __cdecl BN_clear_bit(BIGNUM *a, int n);
void __cdecl BN_clear_free(BIGNUM *a);
int __cdecl BN_cmp(const BIGNUM *a, const BIGNUM *b);
BIGNUM *__cdecl BN_copy(BIGNUM *a, const BIGNUM *b);
int __cdecl BN_dec2bn(BIGNUM **a, const char *str);
int __cdecl BN_div(BIGNUM *dv, BIGNUM *rem, const BIGNUM *m, const BIGNUM *d, BN_CTX *ctx);
int __cdecl BN_div_recp(BIGNUM *dv, BIGNUM *rem, const BIGNUM *m, BN_RECP_CTX *recp, BN_CTX *ctx);
unsigned __int64 __cdecl BN_div_word(BIGNUM *a, unsigned __int64 w);
BIGNUM *__cdecl BN_dup(const BIGNUM *a);
int __cdecl BN_exp(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx);
void __cdecl BN_free(BIGNUM *a);
int __cdecl BN_from_montgomery(BIGNUM *r, const BIGNUM *a, BN_MONT_CTX *mont, BN_CTX *ctx);
int __cdecl BN_gcd(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx);
BIGNUM *__cdecl BN_generate_prime(BIGNUM *ret, int bits, int safe, const BIGNUM *add, const BIGNUM *rem, void (__cdecl *callback)(int, int, void *), void *cb_arg);
int __cdecl BN_generate_prime_ex(BIGNUM *ret, int bits, int safe, const BIGNUM *add, const BIGNUM *rem, BN_GENCB *cb);
const BIGNUM *BN_get0_nist_prime_192(void);
const BIGNUM *BN_get0_nist_prime_224(void);
const BIGNUM *BN_get0_nist_prime_256(void);
const BIGNUM *BN_get0_nist_prime_384(void);
const BIGNUM *BN_get0_nist_prime_521(void);
int __cdecl BN_get_params(int which);
unsigned __int64 __cdecl BN_get_word(const BIGNUM *a);
int __cdecl BN_hex2bn(BIGNUM **a, const char *str);
void __cdecl BN_init(BIGNUM *);
int __cdecl BN_is_bit_set(const BIGNUM *a, int n);
int __cdecl BN_is_prime(const BIGNUM *p, int nchecks, void (__cdecl *callback)(int, int, void *), BN_CTX *ctx, void *cb_arg);
int __cdecl BN_is_prime_ex(const BIGNUM *p, int nchecks, BN_CTX *ctx, BN_GENCB *cb);
int __cdecl BN_is_prime_fasttest(const BIGNUM *p, int nchecks, void (__cdecl *callback)(int, int, void *), BN_CTX *ctx, void *cb_arg, int do_trial_division);
int __cdecl BN_is_prime_fasttest_ex(const BIGNUM *p, int nchecks, BN_CTX *ctx, int do_trial_division, BN_GENCB *cb);
int __cdecl BN_kronecker(const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx);
int __cdecl BN_lshift(BIGNUM *r, const BIGNUM *a, int n);
int __cdecl BN_lshift1(BIGNUM *r, const BIGNUM *a);
int __cdecl BN_mask_bits(BIGNUM *a, int n);
int __cdecl BN_mod_add(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *m, BN_CTX *ctx);
int __cdecl BN_mod_add_quick(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *m);
int __cdecl BN_mod_exp(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, const BIGNUM *m, BN_CTX *ctx);
int __cdecl BN_mod_exp2_mont(BIGNUM *r, const BIGNUM *a1, const BIGNUM *p1, const BIGNUM *a2, const BIGNUM *p2, const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx);
int __cdecl BN_mod_exp_mont(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx);
int __cdecl BN_mod_exp_mont_consttime(BIGNUM *rr, const BIGNUM *a, const BIGNUM *p, const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *in_mont);
int __cdecl BN_mod_exp_mont_word(BIGNUM *r, unsigned __int64 a, const BIGNUM *p, const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx);
int __cdecl BN_mod_exp_recp(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, const BIGNUM *m, BN_CTX *ctx);
int __cdecl BN_mod_exp_simple(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, const BIGNUM *m, BN_CTX *ctx);
BIGNUM *__cdecl BN_mod_inverse(BIGNUM *ret, const BIGNUM *a, const BIGNUM *n, BN_CTX *ctx);
int __cdecl BN_mod_lshift(BIGNUM *r, const BIGNUM *a, int n, const BIGNUM *m, BN_CTX *ctx);
int __cdecl BN_mod_lshift1(BIGNUM *r, const BIGNUM *a, const BIGNUM *m, BN_CTX *ctx);
int __cdecl BN_mod_lshift1_quick(BIGNUM *r, const BIGNUM *a, const BIGNUM *m);
int __cdecl BN_mod_lshift_quick(BIGNUM *r, const BIGNUM *a, int n, const BIGNUM *m);
int __cdecl BN_mod_mul(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *m, BN_CTX *ctx);
int __cdecl BN_mod_mul_montgomery(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, BN_MONT_CTX *mont, BN_CTX *ctx);
int __cdecl BN_mod_mul_reciprocal(BIGNUM *r, const BIGNUM *x, const BIGNUM *y, BN_RECP_CTX *recp, BN_CTX *ctx);
int __cdecl BN_mod_sqr(BIGNUM *r, const BIGNUM *a, const BIGNUM *m, BN_CTX *ctx);
BIGNUM *__cdecl BN_mod_sqrt(BIGNUM *ret, const BIGNUM *a, const BIGNUM *n, BN_CTX *ctx);
int __cdecl BN_mod_sub(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *m, BN_CTX *ctx);
int __cdecl BN_mod_sub_quick(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *m);
unsigned __int64 __cdecl BN_mod_word(const BIGNUM *a, unsigned __int64 w);
BIGNUM *__cdecl BN_mpi2bn(const unsigned __int8 *s, int len, BIGNUM *ret);
int __cdecl BN_mul(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx);
int __cdecl BN_mul_word(BIGNUM *a, unsigned __int64 w);
BIGNUM *BN_new(void);
int __cdecl BN_nist_mod_192(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx);
int __cdecl BN_nist_mod_224(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx);
int __cdecl BN_nist_mod_256(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx);
int __cdecl BN_nist_mod_384(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx);
int __cdecl BN_nist_mod_521(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx);
int __cdecl BN_nnmod(BIGNUM *r, const BIGNUM *m, const BIGNUM *d, BN_CTX *ctx);
int __cdecl BN_num_bits(const BIGNUM *a);
int __cdecl BN_num_bits_word(unsigned __int64);
char *BN_options(void);
int __cdecl BN_print(BIO *fp, const BIGNUM *a);
int __cdecl BN_print_fp(FILE *fp, const BIGNUM *a);
int __cdecl BN_pseudo_rand(BIGNUM *rnd, int bits, int top, int bottom);
int __cdecl BN_pseudo_rand_range(BIGNUM *rnd, const BIGNUM *range);
int __cdecl BN_rand(BIGNUM *rnd, int bits, int top, int bottom);
int __cdecl BN_rand_range(BIGNUM *rnd, const BIGNUM *range);
int __cdecl BN_reciprocal(BIGNUM *r, const BIGNUM *m, int len, BN_CTX *ctx);
int __cdecl BN_rshift(BIGNUM *r, const BIGNUM *a, int n);
int __cdecl BN_rshift1(BIGNUM *r, const BIGNUM *a);
int __cdecl BN_set_bit(BIGNUM *a, int n);
void __cdecl BN_set_negative(BIGNUM *b, int n);
void __cdecl BN_set_params(int mul, int high, int low, int mont);
int __cdecl BN_set_word(BIGNUM *a, unsigned __int64 w);
int __cdecl BN_sqr(BIGNUM *r, const BIGNUM *a, BN_CTX *ctx);
int __cdecl BN_sub(BIGNUM *r, const BIGNUM *a, const BIGNUM *b);
int __cdecl BN_sub_word(BIGNUM *a, unsigned __int64 w);
void __cdecl BN_swap(BIGNUM *a, BIGNUM *b);
ASN1_ENUMERATED *__cdecl BN_to_ASN1_ENUMERATED(BIGNUM *bn, ASN1_ENUMERATED *ai);
ASN1_INTEGER *__cdecl BN_to_ASN1_INTEGER(BIGNUM *bn, ASN1_INTEGER *ai);
int __cdecl BN_uadd(BIGNUM *r, const BIGNUM *a, const BIGNUM *b);
int __cdecl BN_ucmp(const BIGNUM *a, const BIGNUM *b);
int __cdecl BN_usub(BIGNUM *r, const BIGNUM *a, const BIGNUM *b);
const BIGNUM *BN_value_one(void);
MACRO__BSD _BSD_I386_VMPARAM_H_;
void __cdecl BUF_MEM_free(BUF_MEM *a);
int __cdecl BUF_MEM_grow(BUF_MEM *str, int len);
int __cdecl BUF_MEM_grow_clean(BUF_MEM *str, int len);
BUF_MEM *BUF_MEM_new(void);
void *__cdecl BUF_memdup(const void *data, size_t siz);
char *__cdecl BUF_strdup(const char *str);
size_t __cdecl BUF_strlcat(char *dst, const char *src, size_t siz);
size_t __cdecl BUF_strlcpy(char *dst, const char *src, size_t siz);
char *__cdecl BUF_strndup(const char *str, size_t siz);
int __cdecl BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen, char *source, unsigned int sourceLen, int blockSize100k, int verbosity, int workFactor);
int __cdecl BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen, char *source, unsigned int sourceLen, int small, int verbosity);
int __cdecl BZ2_bzCompress(bz_stream *strm, int action);
int __cdecl BZ2_bzCompressEnd(bz_stream *strm);
int __cdecl BZ2_bzCompressInit(bz_stream *strm, int blockSize100k, int verbosity, int workFactor);
int __cdecl BZ2_bzDecompress(bz_stream *strm);
int __cdecl BZ2_bzDecompressEnd(bz_stream *strm);
int __cdecl BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small);
int __cdecl BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
void __cdecl BZ2_bzReadClose(int *bzerror, BZFILE *b);
void __cdecl BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused, int *nUnused);
BZFILE *__cdecl BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small, void *unused, int nUnused);
void __cdecl BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
void __cdecl BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon, unsigned int *nbytes_in, unsigned int *nbytes_out);
void __cdecl BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon, unsigned int *nbytes_in_lo32, unsigned int *nbytes_in_hi32, unsigned int *nbytes_out_lo32, unsigned int *nbytes_out_hi32);
BZFILE *__cdecl BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k, int verbosity, int workFactor);
void __cdecl BZ2_bzclose(BZFILE *b);
BZFILE *__cdecl BZ2_bzdopen(int fd, const char *mode);
const char *__cdecl BZ2_bzerror(BZFILE *b, int *errnum);
int __cdecl BZ2_bzflush(BZFILE *b);
const char *BZ2_bzlibVersion(void);
BZFILE *__cdecl BZ2_bzopen(const char *path, const char *mode);
int __cdecl BZ2_bzread(BZFILE *b, void *buf, int len);
int __cdecl BZ2_bzwrite(BZFILE *b, void *buf, int len);
size_t __cdecl Block_size(void *aBlock);
MACRO__CACHED _CACHED_RUNES;
void __cdecl CAST_cbc_encrypt(const unsigned __int8 *in, unsigned __int8 *out, __int64 length, const CAST_KEY *ks, unsigned __int8 *iv, int enc);
void __cdecl CAST_cfb64_encrypt(const unsigned __int8 *in, unsigned __int8 *out, __int64 length, const CAST_KEY *schedule, unsigned __int8 *ivec, int *num, int enc);
void __cdecl CAST_decrypt(unsigned __int64 *data, const CAST_KEY *key);
void __cdecl CAST_ecb_encrypt(const unsigned __int8 *in, unsigned __int8 *out, const CAST_KEY *key, int enc);
void __cdecl CAST_encrypt(unsigned __int64 *data, const CAST_KEY *key);
void __cdecl CAST_ofb64_encrypt(const unsigned __int8 *in, unsigned __int8 *out, __int64 length, const CAST_KEY *schedule, unsigned __int8 *ivec, int *num);
void __cdecl CAST_set_key(CAST_KEY *key, int len, const unsigned __int8 *data);
const ASN1_ITEM CBIGNUM_it;
void __cdecl CERTIFICATEPOLICIES_free(CERTIFICATEPOLICIES *a);
const ASN1_ITEM CERTIFICATEPOLICIES_it;
CERTIFICATEPOLICIES *CERTIFICATEPOLICIES_new(void);
MACRO_OK _CHOWN_OK;
int COLORS;
int __cdecl COLOR_PAIR(int);
int COLOR_PAIRS;
int COLS;
void __cdecl COMP_CTX_free(COMP_CTX *ctx);
COMP_CTX *__cdecl COMP_CTX_new(COMP_METHOD *meth);
int __cdecl COMP_compress_block(COMP_CTX *ctx, unsigned __int8 *out, int olen, unsigned __int8 *in, int ilen);
int __cdecl COMP_expand_block(COMP_CTX *ctx, unsigned __int8 *out, int olen, unsigned __int8 *in, int ilen);
COMP_METHOD *COMP_rle(void);
COMP_METHOD *COMP_zlib(void);
void COMP_zlib_cleanup(void);
int __cdecl CONF_dump_bio(LHASH *conf, BIO *out);
int __cdecl CONF_dump_fp(LHASH *conf, FILE *out);
void __cdecl CONF_free(LHASH *conf);
char *CONF_get1_default_config_file(void);
__int64 __cdecl CONF_get_number(LHASH *conf, const char *group, const char *name);
STACK *__cdecl CONF_get_section(LHASH *conf, const char *section);
char *__cdecl CONF_get_string(LHASH *conf, const char *group, const char *name);
unsigned __int64 __cdecl CONF_imodule_get_flags(const CONF_IMODULE *md);
CONF_MODULE *__cdecl CONF_imodule_get_module(const CONF_IMODULE *md);
const char *__cdecl CONF_imodule_get_name(const CONF_IMODULE *md);
void *__cdecl CONF_imodule_get_usr_data(const CONF_IMODULE *md);
const char *__cdecl CONF_imodule_get_value(const CONF_IMODULE *md);
void __cdecl CONF_imodule_set_flags(CONF_IMODULE *md, unsigned __int64 flags);
void __cdecl CONF_imodule_set_usr_data(CONF_IMODULE *md, void *usr_data);
LHASH *__cdecl CONF_load(LHASH *conf, const char *file, __int64 *eline);
LHASH *__cdecl CONF_load_bio(LHASH *conf, BIO *bp, __int64 *eline);
LHASH *__cdecl CONF_load_fp(LHASH *conf, FILE *fp, __int64 *eline);
int __cdecl CONF_module_add(const char *name, conf_init_func *ifunc, conf_finish_func *ffunc);
void *__cdecl CONF_module_get_usr_data(CONF_MODULE *pmod);
void __cdecl CONF_module_set_usr_data(CONF_MODULE *pmod, void *usr_data);
void CONF_modules_finish(void);
void CONF_modules_free(void);
int __cdecl CONF_modules_load(const CONF *cnf, const char *appname, unsigned __int64 flags);
int __cdecl CONF_modules_load_file(const char *filename, const char *appname, unsigned __int64 flags);
void __cdecl CONF_modules_unload(int all);
int __cdecl CONF_parse_list(const char *list, int sep, int nospc, int (__cdecl *list_cb)(const char *elem, int len, void *usr), void *arg);
int __cdecl CONF_set_default_method(CONF_METHOD *meth);
void __cdecl CONF_set_nconf(CONF *conf, LHASH *hash);
static void __cdecl CONTAINER_CLEAR(netsnmp_container *x, netsnmp_container_obj_func *f, void *c);
static netsnmp_container *__cdecl CONTAINER_DUP(netsnmp_container *x, void *ctx, u_int flags);
static int __cdecl CONTAINER_FREE(netsnmp_container *x);
static void __cdecl CONTAINER_FREE_ALL(netsnmp_container *x, void *c);
static int __cdecl CONTAINER_INSERT(netsnmp_container *x, const void *k);
static int __cdecl CONTAINER_INSERT_HELPER(netsnmp_container *x, const void *k);
static int __cdecl CONTAINER_REMOVE(netsnmp_container *x, const void *k);
void __cdecl CRL_DIST_POINTS_free(CRL_DIST_POINTS *a);
const ASN1_ITEM CRL_DIST_POINTS_it;
CRL_DIST_POINTS *CRL_DIST_POINTS_new(void);
MACRO__CRMASK _CRMASK;
int __cdecl CRYPTO_add_lock(int *pointer, int amount, int type, const char *file, int line);
void CRYPTO_cleanup_all_ex_data(void);
void __cdecl CRYPTO_dbg_free(void *addr, int before_p);
__int64 CRYPTO_dbg_get_options(void);
void __cdecl CRYPTO_dbg_malloc(void *addr, int num, const char *file, int line, int before_p);
int CRYPTO_dbg_pop_info(void);
int __cdecl CRYPTO_dbg_push_info(const char *info, const char *file, int line);
void __cdecl CRYPTO_dbg_realloc(void *addr1, void *addr2, int num, const char *file, int line, int before_p);
int CRYPTO_dbg_remove_all_info(void);
void __cdecl CRYPTO_dbg_set_options(__int64 bits);
void __cdecl CRYPTO_destroy_dynlockid(int i);
int __cdecl CRYPTO_dup_ex_data(int class_index, CRYPTO_EX_DATA *to, CRYPTO_EX_DATA *from);
int CRYPTO_ex_data_new_class(void);
void __cdecl CRYPTO_free(void *);
void __cdecl CRYPTO_free_ex_data(int class_index, void *obj, CRYPTO_EX_DATA *ad);
void __cdecl CRYPTO_free_locked(void *);
int (__cdecl *CRYPTO_get_add_lock_callback(void))(int *, int, int, const char *, int);
struct CRYPTO_dynlock_value *(__cdecl *CRYPTO_get_dynlock_create_callback(void))(const char *, int);
void (__cdecl *CRYPTO_get_dynlock_destroy_callback(void))(struct CRYPTO_dynlock_value *, const char *, int);
void (__cdecl *CRYPTO_get_dynlock_lock_callback(void))(int, struct CRYPTO_dynlock_value *, const char *, int);
struct CRYPTO_dynlock_value *__cdecl CRYPTO_get_dynlock_value(int i);
void *__cdecl CRYPTO_get_ex_data(const CRYPTO_EX_DATA *ad, int idx);
const CRYPTO_EX_DATA_IMPL *CRYPTO_get_ex_data_implementation(void);
int __cdecl CRYPTO_get_ex_new_index(int class_index, __int64 argl, void *argp, CRYPTO_EX_new *new_func, CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func);
unsigned __int64 (*CRYPTO_get_id_callback(void))(void);
const char *__cdecl CRYPTO_get_lock_name(int type);
void __cdecl CRYPTO_get_locked_mem_ex_functions(void *(__cdecl **m)(size_t, const char *, int), void (__cdecl **f)(void *));
void __cdecl CRYPTO_get_locked_mem_functions(void *(__cdecl **m)(size_t), void (__cdecl **f)(void *));
void (__cdecl *CRYPTO_get_locking_callback(void))(int, int, const char *, int);
void __cdecl CRYPTO_get_mem_debug_functions(void (__cdecl **m)(void *, int, const char *, int, int), void (__cdecl **r)(void *, void *, int, const char *, int, int), void (__cdecl **f)(void *, int), void (__cdecl **so)(__int64), __int64 (**go)(void));
__int64 CRYPTO_get_mem_debug_options(void);
void __cdecl CRYPTO_get_mem_ex_functions(void *(__cdecl **m)(size_t, const char *, int), void *(__cdecl **r)(void *, size_t, const char *, int), void (__cdecl **f)(void *));
void __cdecl CRYPTO_get_mem_functions(void *(__cdecl **m)(size_t), void *(__cdecl **r)(void *, size_t), void (__cdecl **f)(void *));
int CRYPTO_get_new_dynlockid(void);
int __cdecl CRYPTO_get_new_lockid(char *name);
int CRYPTO_is_mem_check_on(void);
void __cdecl CRYPTO_lock(int mode, int type, const char *file, int line);
void *__cdecl CRYPTO_malloc(int num, const char *file, int line);
void CRYPTO_malloc_debug_init(void);
void *__cdecl CRYPTO_malloc_locked(int num, const char *file, int line);
int __cdecl CRYPTO_mem_ctrl(int mode);
void __cdecl CRYPTO_mem_leaks(struct bio_st *bio);
void __cdecl CRYPTO_mem_leaks_cb(CRYPTO_MEM_LEAK_CB *cb);
void __cdecl CRYPTO_mem_leaks_fp(FILE *);
int __cdecl CRYPTO_new_ex_data(int class_index, void *obj, CRYPTO_EX_DATA *ad);
int CRYPTO_num_locks(void);
int CRYPTO_pop_info(void);
int __cdecl CRYPTO_push_info_(const char *info, const char *file, int line);
void *__cdecl CRYPTO_realloc(void *addr, int num, const char *file, int line);
void *__cdecl CRYPTO_realloc_clean(void *addr, int old_num, int num, const char *file, int line);
void *__cdecl CRYPTO_remalloc(void *addr, int num, const char *file, int line);
int CRYPTO_remove_all_info(void);
void __cdecl CRYPTO_set_add_lock_callback(int (__cdecl *func)(int *num, int mount, int type, const char *file, int line));
void __cdecl CRYPTO_set_dynlock_create_callback(struct CRYPTO_dynlock_value *(__cdecl *dyn_create_function)(const char *file, int line));
void __cdecl CRYPTO_set_dynlock_destroy_callback(void (__cdecl *dyn_destroy_function)(struct CRYPTO_dynlock_value *l, const char *file, int line));
void __cdecl CRYPTO_set_dynlock_lock_callback(void (__cdecl *dyn_lock_function)(int mode, struct CRYPTO_dynlock_value *l, const char *file, int line));
int __cdecl CRYPTO_set_ex_data(CRYPTO_EX_DATA *ad, int idx, void *val);
int __cdecl CRYPTO_set_ex_data_implementation(const CRYPTO_EX_DATA_IMPL *i);
void __cdecl CRYPTO_set_id_callback(unsigned __int64 (*func)(void));
int __cdecl CRYPTO_set_locked_mem_ex_functions(void *(__cdecl *m)(size_t, const char *, int), void (__cdecl *free_func)(void *));
int __cdecl CRYPTO_set_locked_mem_functions(void *(__cdecl *m)(size_t), void (__cdecl *free_func)(void *));
void __cdecl CRYPTO_set_locking_callback(void (__cdecl *func)(int mode, int type, const char *file, int line));
int __cdecl CRYPTO_set_mem_debug_functions(void (__cdecl *m)(void *, int, const char *, int, int), void (__cdecl *r)(void *, void *, int, const char *, int, int), void (__cdecl *f)(void *, int), void (__cdecl *so)(__int64), __int64 (*go)(void));
void __cdecl CRYPTO_set_mem_debug_options(__int64 bits);
int __cdecl CRYPTO_set_mem_ex_functions(void *(__cdecl *m)(size_t, const char *, int), void *(__cdecl *r)(void *, size_t, const char *, int), void (__cdecl *f)(void *));
int __cdecl CRYPTO_set_mem_functions(void *(__cdecl *m)(size_t), void *(__cdecl *r)(void *, size_t), void (__cdecl *f)(void *));
void __cdecl CRYPTO_set_mem_info_functions(int (__cdecl *push_info_fn)(const char *info, const char *file, int line), int (*pop_info_fn)(void), int (*remove_all_info_fn)(void));
char *__cdecl CRYPTO_strdup(const char *str, const char *file, int line);
unsigned __int64 CRYPTO_thread_id(void);
MACRO__CS_POSIX _CS_DARWIN_USER_CACHE_DIR;
MACRO__CS_POSIX _CS_DARWIN_USER_DIR;
MACRO__CS_POSIX _CS_DARWIN_USER_TEMP_DIR;
MACRO__CS _CS_PATH;
MACRO__CS_POSIX _CS_POSIX_V6_ILP32_OFF32_CFLAGS;
MACRO__CS_POSIX _CS_POSIX_V6_ILP32_OFF32_LDFLAGS;
MACRO__CS_POSIX _CS_POSIX_V6_ILP32_OFF32_LIBS;
MACRO__CS_POSIX _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS;
MACRO__CS_POSIX _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS;
MACRO__CS_POSIX _CS_POSIX_V6_ILP32_OFFBIG_LIBS;
MACRO__CS_POSIX _CS_POSIX_V6_LP64_OFF64_CFLAGS;
MACRO__CS_POSIX _CS_POSIX_V6_LP64_OFF64_LDFLAGS;
MACRO__CS_POSIX _CS_POSIX_V6_LP64_OFF64_LIBS;
MACRO__CS_POSIX _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS;
MACRO__CS_POSIX _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS;
MACRO__CS_POSIX _CS_POSIX_V6_LPBIG_OFFBIG_LIBS;
MACRO__CS_POSIX _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS;
MACRO__CS_POSIX _CS_XBS5_ILP32_OFF32_CFLAGS;
MACRO__CS_POSIX _CS_XBS5_ILP32_OFF32_LDFLAGS;
MACRO__CS_POSIX _CS_XBS5_ILP32_OFF32_LIBS;
MACRO__CS_POSIX _CS_XBS5_ILP32_OFF32_LINTFLAGS;
MACRO__CS_POSIX _CS_XBS5_ILP32_OFFBIG_CFLAGS;
MACRO__CS_POSIX _CS_XBS5_ILP32_OFFBIG_LDFLAGS;
MACRO__CS_POSIX _CS_XBS5_ILP32_OFFBIG_LIBS;
MACRO__CS_POSIX _CS_XBS5_ILP32_OFFBIG_LINTFLAGS;
MACRO__CS_POSIX _CS_XBS5_LP64_OFF64_CFLAGS;
MACRO__CS_POSIX _CS_XBS5_LP64_OFF64_LDFLAGS;
MACRO__CS_POSIX _CS_XBS5_LP64_OFF64_LIBS;
MACRO__CS_POSIX _CS_XBS5_LP64_OFF64_LINTFLAGS;
MACRO__CS_POSIX _CS_XBS5_LPBIG_OFFBIG_CFLAGS;
MACRO__CS_POSIX _CS_XBS5_LPBIG_OFFBIG_LDFLAGS;
MACRO__CS_POSIX _CS_XBS5_LPBIG_OFFBIG_LIBS;
MACRO__CS_POSIX _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS;
MACRO__CTYPE _CTYPE_A;
MACRO__CTYPE _CTYPE_B;
MACRO__CTYPE _CTYPE_C;
MACRO__CTYPE _CTYPE_D;
MACRO__CTYPE _CTYPE_G;
MACRO__CTYPE _CTYPE_I;
MACRO__CTYPE _CTYPE_L;
MACRO__CTYPE _CTYPE_P;
MACRO__CTYPE _CTYPE_Q;
MACRO__CTYPE _CTYPE_R;
MACRO__CTYPE _CTYPE_S;
MACRO__CTYPE _CTYPE_SW0;
MACRO__CTYPE _CTYPE_SW1;
MACRO__CTYPE _CTYPE_SW2;
MACRO__CTYPE _CTYPE_SW3;
MACRO__CTYPE _CTYPE_SWM;
MACRO__CTYPE _CTYPE_SWS;
MACRO__CTYPE _CTYPE_T;
MACRO__CTYPE _CTYPE_U;
MACRO__CTYPE _CTYPE_X;
void __cdecl ClearMemory(void *, size_t size);
BOOL __cdecl ConfigDSN(HWND hwndParent, WORD fRequest, LPCSTR lpszDriver, LPCSTR lpszAttributes);
BOOL __cdecl ConfigDSNW(HWND hwndParent, WORD fRequest, LPCWSTR lpszDriver, LPCWSTR lpszAttributes);
BOOL __cdecl ConfigDriver(HWND hwndParent, WORD fRequest, LPCSTR lpszDriver, LPCSTR lpszArgs, LPSTR lpszMsg, WORD cbMsgMax, WORD *pcbMsgOut);
BOOL __cdecl ConfigDriverW(HWND hwndParent, WORD fRequest, LPCWSTR lpszDriver, LPCWSTR lpszArgs, LPWSTR lpszMsg, WORD cbMsgMax, WORD *pcbMsgOut);
BOOL __cdecl ConfigTranslator(HWND hwndParent, DWORD *pvOption);
MACRO__DARWIN _DARWIN_FEATURE_64_BIT_INODE;
MACRO__DARWIN _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE;
MACRO__DARWIN _DARWIN_FEATURE_UNIX_CONFORMANCE;
MACRO_OK _DELETE_OK;
unsigned int __cdecl DES_cbc_cksum(const unsigned __int8 *input, DES_cblock *output, __int64 length, DES_key_schedule *schedule, const_DES_cblock *ivec);
void __cdecl DES_cbc_encrypt(const unsigned __int8 *input, unsigned __int8 *output, __int64 length, DES_key_schedule *schedule, DES_cblock *ivec, int enc);
void __cdecl DES_cfb64_encrypt(const unsigned __int8 *in, unsigned __int8 *out, __int64 length, DES_key_schedule *schedule, DES_cblock *ivec, int *num, int enc);
void __cdecl DES_cfb_encrypt(const unsigned __int8 *in, unsigned __int8 *out, int numbits, __int64 length, DES_key_schedule *schedule, DES_cblock *ivec, int enc);
int __cdecl DES_check_key_parity(const_DES_cblock *key);
char *__cdecl DES_crypt(const char *buf, const char *salt);
void __cdecl DES_decrypt3(unsigned int *data, DES_key_schedule *ks1, DES_key_schedule *ks2, DES_key_schedule *ks3);
void __cdecl DES_ecb3_encrypt(const_DES_cblock *input, DES_cblock *output, DES_key_schedule *ks1, DES_key_schedule *ks2, DES_key_schedule *ks3, int enc);
void __cdecl DES_ecb_encrypt(const_DES_cblock *input, DES_cblock *output, DES_key_schedule *ks, int enc);
void __cdecl DES_ede3_cbc_encrypt(const unsigned __int8 *input, unsigned __int8 *output, __int64 length, DES_key_schedule *ks1, DES_key_schedule *ks2, DES_key_schedule *ks3, DES_cblock *ivec, int enc);
void __cdecl DES_ede3_cbcm_encrypt(const unsigned __int8 *in, unsigned __int8 *out, __int64 length, DES_key_schedule *ks1, DES_key_schedule *ks2, DES_key_schedule *ks3, DES_cblock *ivec1, DES_cblock *ivec2, int enc);
void __cdecl DES_ede3_cfb64_encrypt(const unsigned __int8 *in, unsigned __int8 *out, __int64 length, DES_key_schedule *ks1, DES_key_schedule *ks2, DES_key_schedule *ks3, DES_cblock *ivec, int *num, int enc);
void __cdecl DES_ede3_cfb_encrypt(const unsigned __int8 *in, unsigned __int8 *out, int numbits, __int64 length, DES_key_schedule *ks1, DES_key_schedule *ks2, DES_key_schedule *ks3, DES_cblock *ivec, int enc);
void __cdecl DES_ede3_ofb64_encrypt(const unsigned __int8 *in, unsigned __int8 *out, __int64 length, DES_key_schedule *ks1, DES_key_schedule *ks2, DES_key_schedule *ks3, DES_cblock *ivec, int *num);
int __cdecl DES_enc_read(int fd, void *buf, int len, DES_key_schedule *sched, DES_cblock *iv);
int __cdecl DES_enc_write(int fd, const void *buf, int len, DES_key_schedule *sched, DES_cblock *iv);
void __cdecl DES_encrypt1(unsigned int *data, DES_key_schedule *ks, int enc);
void __cdecl DES_encrypt2(unsigned int *data, DES_key_schedule *ks, int enc);
void __cdecl DES_encrypt3(unsigned int *data, DES_key_schedule *ks1, DES_key_schedule *ks2, DES_key_schedule *ks3);
char *__cdecl DES_fcrypt(const char *buf, const char *salt, char *ret);
int __cdecl DES_is_weak_key(const_DES_cblock *key);
int __cdecl DES_key_sched(const_DES_cblock *key, DES_key_schedule *schedule);
void __cdecl DES_ncbc_encrypt(const unsigned __int8 *input, unsigned __int8 *output, __int64 length, DES_key_schedule *schedule, DES_cblock *ivec, int enc);
void __cdecl DES_ofb64_encrypt(const unsigned __int8 *in, unsigned __int8 *out, __int64 length, DES_key_schedule *schedule, DES_cblock *ivec, int *num);
void __cdecl DES_ofb_encrypt(const unsigned __int8 *in, unsigned __int8 *out, int numbits, __int64 length, DES_key_schedule *schedule, DES_cblock *ivec);
const char *DES_options(void);
void __cdecl DES_pcbc_encrypt(const unsigned __int8 *input, unsigned __int8 *output, __int64 length, DES_key_schedule *schedule, DES_cblock *ivec, int enc);
unsigned int __cdecl DES_quad_cksum(const unsigned __int8 *input, DES_cblock output[], __int64 length, int out_count, DES_cblock *seed);
int __cdecl DES_random_key(DES_cblock *ret);
int __cdecl DES_read_2passwords(DES_cblock *key1, DES_cblock *key2, const char *prompt, int verify);
int __cdecl DES_read_password(DES_cblock *key, const char *prompt, int verify);
int __cdecl DES_set_key(const_DES_cblock *key, DES_key_schedule *schedule);
int __cdecl DES_set_key_checked(const_DES_cblock *key, DES_key_schedule *schedule);
void __cdecl DES_set_key_unchecked(const_DES_cblock *key, DES_key_schedule *schedule);
void __cdecl DES_set_odd_parity(DES_cblock *key);
void __cdecl DES_string_to_2keys(const char *str, DES_cblock *key1, DES_cblock *key2);
void __cdecl DES_string_to_key(const char *str, DES_cblock *key);
void __cdecl DES_xcbc_encrypt(const unsigned __int8 *input, unsigned __int8 *output, __int64 length, DES_key_schedule *schedule, DES_cblock *ivec, const_DES_cblock *inw, const_DES_cblock *outw, int enc);
const DH_METHOD *DH_OpenSSL(void);
int __cdecl DH_check(const DH *dh, int *codes);
int __cdecl DH_check_pub_key(const DH *dh, const BIGNUM *pub_key, int *codes);
int __cdecl DH_compute_key(unsigned __int8 *key, const BIGNUM *pub_key, DH *dh);
void __cdecl DH_free(DH *dh);
int __cdecl DH_generate_key(DH *dh);
DH *__cdecl DH_generate_parameters(int prime_len, int generator, void (__cdecl *callback)(int, int, void *), void *cb_arg);
int __cdecl DH_generate_parameters_ex(DH *dh, int prime_len, int generator, BN_GENCB *cb);
const DH_METHOD *DH_get_default_method(void);
void *__cdecl DH_get_ex_data(DH *d, int idx);
int __cdecl DH_get_ex_new_index(__int64 argl, void *argp, CRYPTO_EX_new *new_func, CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func);
DH *DH_new(void);
DH *__cdecl DH_new_method(ENGINE *engine);
void __cdecl DH_set_default_method(const DH_METHOD *meth);
int __cdecl DH_set_ex_data(DH *d, int idx, void *arg);
int __cdecl DH_set_method(DH *dh, const DH_METHOD *meth);
int __cdecl DH_size(const DH *dh);
int __cdecl DH_up_ref(DH *dh);
int __cdecl DHparams_print(BIO *bp, const DH *x);
int __cdecl DHparams_print_fp(FILE *fp, const DH *x);
void __cdecl DIRECTORYSTRING_free(ASN1_STRING *a);
const ASN1_ITEM DIRECTORYSTRING_it;
ASN1_STRING *DIRECTORYSTRING_new(void);
void __cdecl DISPLAYTEXT_free(ASN1_STRING *a);
const ASN1_ITEM DISPLAYTEXT_it;
ASN1_STRING *DISPLAYTEXT_new(void);
void __cdecl DIST_POINT_NAME_free(DIST_POINT_NAME *a);
const ASN1_ITEM DIST_POINT_NAME_it;
DIST_POINT_NAME *DIST_POINT_NAME_new(void);
void __cdecl DIST_POINT_free(DIST_POINT *a);
const ASN1_ITEM DIST_POINT_it;
DIST_POINT *DIST_POINT_new(void);
DNSServiceErrorType __cdecl DNSServiceAddRecord(DNSServiceRef sdRef, DNSRecordRef *RecordRef, DNSServiceFlags flags, uint16_t rrtype, uint16_t rdlen, const void *rdata, uint32_t ttl);
DNSServiceErrorType __cdecl DNSServiceBrowse(DNSServiceRef *sdRef, DNSServiceFlags flags, uint32_t interfaceIndex, const char *regtype, const char *domain, DNSServiceBrowseReply callBack, void *context);
dns_service_discovery_ref __cdecl DNSServiceBrowserCreate(const char *regtype, const char *domain, DNSServiceBrowserReply callBack, void *context);
DNSServiceErrorType __cdecl DNSServiceConstructFullName(char *const fullName, const char *const service, const char *const regtype, const char *const domain);
DNSServiceErrorType __cdecl DNSServiceCreateConnection(DNSServiceRef *sdRef);
void __cdecl DNSServiceDiscoveryDeallocate(dns_service_discovery_ref dnsServiceDiscovery);
mach_port_t __cdecl DNSServiceDiscoveryMachPort(dns_service_discovery_ref dnsServiceDiscovery);
void __cdecl DNSServiceDiscovery_handleReply(void *replyMsg);
dns_service_discovery_ref __cdecl DNSServiceDomainEnumerationCreate(int registrationDomains, DNSServiceDomainEnumerationReply callBack, void *context);
DNSServiceErrorType __cdecl DNSServiceEnumerateDomains(DNSServiceRef *sdRef, DNSServiceFlags flags, uint32_t interfaceIndex, DNSServiceDomainEnumReply callBack, void *context);
DNSServiceErrorType __cdecl DNSServiceGetAddrInfo(DNSServiceRef *sdRef, DNSServiceFlags flags, uint32_t interfaceIndex, DNSServiceProtocol protocol, const char *hostname, DNSServiceGetAddrInfoReply callBack, void *context);
DNSServiceErrorType __cdecl DNSServiceGetProperty(const char *property, void *result, uint32_t *size);
DNSServiceErrorType __cdecl DNSServiceNATPortMappingCreate(DNSServiceRef *sdRef, DNSServiceFlags flags, uint32_t interfaceIndex, DNSServiceProtocol protocol, uint16_t internalPort, uint16_t externalPort, uint32_t ttl, DNSServiceNATPortMappingReply callBack, void *context);
DNSServiceErrorType __cdecl DNSServiceProcessResult(DNSServiceRef sdRef);
DNSServiceErrorType __cdecl DNSServiceQueryRecord(DNSServiceRef *sdRef, DNSServiceFlags flags, uint32_t interfaceIndex, const char *fullname, uint16_t rrtype, uint16_t rrclass, DNSServiceQueryRecordReply callBack, void *context);
DNSServiceErrorType __cdecl DNSServiceReconfirmRecord(DNSServiceFlags flags, uint32_t interfaceIndex, const char *fullname, uint16_t rrtype, uint16_t rrclass, uint16_t rdlen, const void *rdata);
void __cdecl DNSServiceRefDeallocate(DNSServiceRef sdRef);
int __cdecl DNSServiceRefSockFD(DNSServiceRef sdRef);
DNSServiceErrorType __cdecl DNSServiceRegister(DNSServiceRef *sdRef, DNSServiceFlags flags, uint32_t interfaceIndex, const char *name, const char *regtype, const char *domain, const char *host, uint16_t port, uint16_t txtLen, const void *txtRecord, DNSServiceRegisterReply callBack, void *context);
DNSServiceErrorType __cdecl DNSServiceRegisterRecord(DNSServiceRef sdRef, DNSRecordRef *RecordRef, DNSServiceFlags flags, uint32_t interfaceIndex, const char *fullname, uint16_t rrtype, uint16_t rrclass, uint16_t rdlen, const void *rdata, uint32_t ttl, DNSServiceRegisterRecordReply callBack, void *context);
DNSRecordReference __cdecl DNSServiceRegistrationAddRecord(dns_service_discovery_ref dnsServiceDiscovery, uint16_t rrtype, uint16_t rdlen, const char *rdata, uint32_t ttl);
dns_service_discovery_ref __cdecl DNSServiceRegistrationCreate(const char *name, const char *regtype, const char *domain, uint16_t port, const char *txtRecord, DNSServiceRegistrationReply callBack, void *context);
DNSServiceRegistrationReplyErrorType __cdecl DNSServiceRegistrationRemoveRecord(dns_service_discovery_ref ref, DNSRecordReference reference);
DNSServiceRegistrationReplyErrorType __cdecl DNSServiceRegistrationUpdateRecord(dns_service_discovery_ref ref, DNSRecordReference reference, uint16_t rdlen, const char *rdata, uint32_t ttl);
DNSServiceErrorType __cdecl DNSServiceRemoveRecord(DNSServiceRef sdRef, DNSRecordRef RecordRef, DNSServiceFlags flags);
DNSServiceErrorType __cdecl DNSServiceResolve(DNSServiceRef *sdRef, DNSServiceFlags flags, uint32_t interfaceIndex, const char *name, const char *regtype, const char *domain, DNSServiceResolveReply callBack, void *context);
dns_service_discovery_ref __cdecl DNSServiceResolverResolve(const char *name, const char *regtype, const char *domain, DNSServiceResolverReply callBack, void *context);
DNSServiceErrorType __cdecl DNSServiceSetDispatchQueue(DNSServiceRef service, dispatch_queue_t queue);
DNSServiceErrorType __cdecl DNSServiceUpdateRecord(DNSServiceRef sdRef, DNSRecordRef RecordRef, DNSServiceFlags flags, uint16_t rdlen, const void *rdata, uint32_t ttl);
MACRO__DNS _DNS_SD_H;
MACRO__DNS _DNS_SD_LIBDISPATCH;
const DSA_METHOD *DSA_OpenSSL(void);
void __cdecl DSA_SIG_free(DSA_SIG *a);
DSA_SIG *DSA_SIG_new(void);
DSA_SIG *__cdecl DSA_do_sign(const unsigned __int8 *dgst, int dlen, DSA *dsa);
int __cdecl DSA_do_verify(const unsigned __int8 *dgst, int dgst_len, DSA_SIG *sig, DSA *dsa);
DH *__cdecl DSA_dup_DH(const DSA *r);
void __cdecl DSA_free(DSA *r);
int __cdecl DSA_generate_key(DSA *a);
DSA *__cdecl DSA_generate_parameters(int bits, unsigned __int8 *seed, int seed_len, int *counter_ret, unsigned __int64 *h_ret, void (__cdecl *callback)(int, int, void *), void *cb_arg);
int __cdecl DSA_generate_parameters_ex(DSA *dsa, int bits, unsigned __int8 *seed, int seed_len, int *counter_ret, unsigned __int64 *h_ret, BN_GENCB *cb);
const DSA_METHOD *DSA_get_default_method(void);
void *__cdecl DSA_get_ex_data(DSA *d, int idx);
int __cdecl DSA_get_ex_new_index(__int64 argl, void *argp, CRYPTO_EX_new *new_func, CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func);
DSA *DSA_new(void);
DSA *__cdecl DSA_new_method(ENGINE *engine);
int __cdecl DSA_print(BIO *bp, const DSA *x, int off);
int __cdecl DSA_print_fp(FILE *bp, const DSA *x, int off);
void __cdecl DSA_set_default_method(const DSA_METHOD *);
int __cdecl DSA_set_ex_data(DSA *d, int idx, void *arg);
int __cdecl DSA_set_method(DSA *dsa, const DSA_METHOD *);
int __cdecl DSA_sign(int type, const unsigned __int8 *dgst, int dlen, unsigned __int8 *sig, unsigned int *siglen, DSA *dsa);
int __cdecl DSA_sign_setup(DSA *dsa, BN_CTX *ctx_in, BIGNUM **kinvp, BIGNUM **rp);
int __cdecl DSA_size(const DSA *);
int __cdecl DSA_up_ref(DSA *r);
int __cdecl DSA_verify(int type, const unsigned __int8 *dgst, int dgst_len, const unsigned __int8 *sigbuf, int siglen, DSA *dsa);
int __cdecl DSAparams_print(BIO *bp, const DSA *x);
int __cdecl DSAparams_print_fp(FILE *fp, const DSA *x);
DSO_METHOD *DSO_METHOD_dl(void);
DSO_METHOD *DSO_METHOD_dlfcn(void);
DSO_METHOD *DSO_METHOD_null(void);
DSO_METHOD *DSO_METHOD_openssl(void);
DSO_METHOD *DSO_METHOD_vms(void);
DSO_METHOD *DSO_METHOD_win32(void);
DSO_FUNC_TYPE __cdecl DSO_bind_func(DSO *dso, const char *symname);
void *__cdecl DSO_bind_var(DSO *dso, const char *symname);
char *__cdecl DSO_convert_filename(DSO *dso, const char *filename);
__int64 __cdecl DSO_ctrl(DSO *dso, int cmd, __int64 larg, void *parg);
int __cdecl DSO_flags(DSO *dso);
int __cdecl DSO_free(DSO *dso);
DSO_METHOD *DSO_get_default_method(void);
const char *__cdecl DSO_get_filename(DSO *dso);
const char *__cdecl DSO_get_loaded_filename(DSO *dso);
DSO_METHOD *__cdecl DSO_get_method(DSO *dso);
DSO *__cdecl DSO_load(DSO *dso, const char *filename, DSO_METHOD *meth, int flags);
char *__cdecl DSO_merge(DSO *dso, const char *filespec1, const char *filespec2);
DSO *DSO_new(void);
DSO *__cdecl DSO_new_method(DSO_METHOD *method);
void __cdecl DSO_set_default_method(DSO_METHOD *meth);
int __cdecl DSO_set_filename(DSO *dso, const char *filename);
DSO_METHOD *__cdecl DSO_set_method(DSO *dso, DSO_METHOD *meth);
int __cdecl DSO_set_name_converter(DSO *dso, DSO_NAME_CONVERTER_FUNC cb, DSO_NAME_CONVERTER_FUNC *oldcb);
int __cdecl DSO_up_ref(DSO *dso);
SSL_METHOD *DTLSv1_client_method(void);
SSL_METHOD *DTLSv1_method(void);
SSL_METHOD *DTLSv1_server_method(void);
const ECDH_METHOD *ECDH_OpenSSL(void);
int __cdecl ECDH_compute_key(void *out, size_t outlen, const EC_POINT *pub_key, EC_KEY *ecdh, void *(__cdecl *KDF)(const void *in, size_t inlen, void *out, size_t *outlen));
const ECDH_METHOD *ECDH_get_default_method(void);
void *__cdecl ECDH_get_ex_data(EC_KEY *d, int idx);
int __cdecl ECDH_get_ex_new_index(__int64 argl, void *argp, CRYPTO_EX_new *new_func, CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func);
void __cdecl ECDH_set_default_method(const ECDH_METHOD *);
int __cdecl ECDH_set_ex_data(EC_KEY *d, int idx, void *arg);
int __cdecl ECDH_set_method(EC_KEY *, const ECDH_METHOD *);
const ECDSA_METHOD *ECDSA_OpenSSL(void);
void __cdecl ECDSA_SIG_free(ECDSA_SIG *a);
ECDSA_SIG *ECDSA_SIG_new(void);
ECDSA_SIG *__cdecl ECDSA_do_sign(const unsigned __int8 *dgst, int dgst_len, EC_KEY *eckey);
ECDSA_SIG *__cdecl ECDSA_do_sign_ex(const unsigned __int8 *dgst, int dgstlen, const BIGNUM *kinv, const BIGNUM *rp, EC_KEY *eckey);
int __cdecl ECDSA_do_verify(const unsigned __int8 *dgst, int dgst_len, const ECDSA_SIG *sig, EC_KEY *eckey);
const ECDSA_METHOD *ECDSA_get_default_method(void);
void *__cdecl ECDSA_get_ex_data(EC_KEY *d, int idx);
int __cdecl ECDSA_get_ex_new_index(__int64 argl, void *argp, CRYPTO_EX_new *new_func, CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func);
void __cdecl ECDSA_set_default_method(const ECDSA_METHOD *meth);
int __cdecl ECDSA_set_ex_data(EC_KEY *d, int idx, void *arg);
int __cdecl ECDSA_set_method(EC_KEY *eckey, const ECDSA_METHOD *meth);
int __cdecl ECDSA_sign(int type, const unsigned __int8 *dgst, int dgstlen, unsigned __int8 *sig, unsigned int *siglen, EC_KEY *eckey);
int __cdecl ECDSA_sign_ex(int type, const unsigned __int8 *dgst, int dgstlen, unsigned __int8 *sig, unsigned int *siglen, const BIGNUM *kinv, const BIGNUM *rp, EC_KEY *eckey);
int __cdecl ECDSA_sign_setup(EC_KEY *eckey, BN_CTX *ctx, BIGNUM **kinv, BIGNUM **rp);
int __cdecl ECDSA_size(const EC_KEY *eckey);
int __cdecl ECDSA_verify(int type, const unsigned __int8 *dgst, int dgstlen, const unsigned __int8 *sig, int siglen, EC_KEY *eckey);
int __cdecl ECPKParameters_print(BIO *bp, const EC_GROUP *x, int off);
int __cdecl ECPKParameters_print_fp(FILE *fp, const EC_GROUP *x, int off);
int __cdecl ECParameters_print(BIO *bp, const EC_KEY *x);
int __cdecl ECParameters_print_fp(FILE *fp, const EC_KEY *x);
const EC_METHOD *EC_GF2m_simple_method(void);
const EC_METHOD *EC_GFp_mont_method(void);
const EC_METHOD *EC_GFp_nist_method(void);
const EC_METHOD *EC_GFp_simple_method(void);
int __cdecl EC_GROUP_check(const EC_GROUP *group, BN_CTX *ctx);
int __cdecl EC_GROUP_check_discriminant(const EC_GROUP *, BN_CTX *);
void __cdecl EC_GROUP_clear_free(EC_GROUP *);
int __cdecl EC_GROUP_cmp(const EC_GROUP *, const EC_GROUP *, BN_CTX *);
int __cdecl EC_GROUP_copy(EC_GROUP *, const EC_GROUP *);
EC_GROUP *__cdecl EC_GROUP_dup(const EC_GROUP *);
void __cdecl EC_GROUP_free(EC_GROUP *);
const EC_POINT *__cdecl EC_GROUP_get0_generator(const EC_GROUP *);
unsigned __int8 *__cdecl EC_GROUP_get0_seed(const EC_GROUP *);
int __cdecl EC_GROUP_get_asn1_flag(const EC_GROUP *);
int __cdecl EC_GROUP_get_basis_type(const EC_GROUP *);
int __cdecl EC_GROUP_get_cofactor(const EC_GROUP *, BIGNUM *cofactor, BN_CTX *);
int __cdecl EC_GROUP_get_curve_GF2m(const EC_GROUP *, BIGNUM *p, BIGNUM *a, BIGNUM *b, BN_CTX *);
int __cdecl EC_GROUP_get_curve_GFp(const EC_GROUP *, BIGNUM *p, BIGNUM *a, BIGNUM *b, BN_CTX *);
int __cdecl EC_GROUP_get_curve_name(const EC_GROUP *);
int __cdecl EC_GROUP_get_degree(const EC_GROUP *);
int __cdecl EC_GROUP_get_order(const EC_GROUP *, BIGNUM *order, BN_CTX *);
int __cdecl EC_GROUP_get_pentanomial_basis(const EC_GROUP *, unsigned int *k1, unsigned int *k2, unsigned int *k3);
point_conversion_form_t __cdecl EC_GROUP_get_point_conversion_form(const EC_GROUP *);
size_t __cdecl EC_GROUP_get_seed_len(const EC_GROUP *);
int __cdecl EC_GROUP_get_trinomial_basis(const EC_GROUP *, unsigned int *k);
int __cdecl EC_GROUP_have_precompute_mult(const EC_GROUP *);
const EC_METHOD *__cdecl EC_GROUP_method_of(const EC_GROUP *);
EC_GROUP *__cdecl EC_GROUP_new(const EC_METHOD *);
EC_GROUP *__cdecl EC_GROUP_new_by_curve_name(int nid);
EC_GROUP *__cdecl EC_GROUP_new_curve_GF2m(const BIGNUM *p, const BIGNUM *a, const BIGNUM *b, BN_CTX *);
EC_GROUP *__cdecl EC_GROUP_new_curve_GFp(const BIGNUM *p, const BIGNUM *a, const BIGNUM *b, BN_CTX *);
int __cdecl EC_GROUP_precompute_mult(EC_GROUP *, BN_CTX *);
void __cdecl EC_GROUP_set_asn1_flag(EC_GROUP *, int flag);
int __cdecl EC_GROUP_set_curve_GF2m(EC_GROUP *, const BIGNUM *p, const BIGNUM *a, const BIGNUM *b, BN_CTX *);
int __cdecl EC_GROUP_set_curve_GFp(EC_GROUP *, const BIGNUM *p, const BIGNUM *a, const BIGNUM *b, BN_CTX *);
void __cdecl EC_GROUP_set_curve_name(EC_GROUP *, int nid);
int __cdecl EC_GROUP_set_generator(EC_GROUP *, const EC_POINT *generator, const BIGNUM *order, const BIGNUM *cofactor);
void __cdecl EC_GROUP_set_point_conversion_form(EC_GROUP *, point_conversion_form_t);
size_t __cdecl EC_GROUP_set_seed(EC_GROUP *, const unsigned __int8 *, size_t len);
int __cdecl EC_KEY_check_key(const EC_KEY *);
EC_KEY *__cdecl EC_KEY_copy(EC_KEY *, const EC_KEY *);
EC_KEY *__cdecl EC_KEY_dup(const EC_KEY *);
void __cdecl EC_KEY_free(EC_KEY *);
int __cdecl EC_KEY_generate_key(EC_KEY *);
const EC_GROUP *__cdecl EC_KEY_get0_group(const EC_KEY *);
const BIGNUM *__cdecl EC_KEY_get0_private_key(const EC_KEY *);
const EC_POINT *__cdecl EC_KEY_get0_public_key(const EC_KEY *);
point_conversion_form_t __cdecl EC_KEY_get_conv_form(const EC_KEY *);
unsigned int __cdecl EC_KEY_get_enc_flags(const EC_KEY *);
void *__cdecl EC_KEY_get_key_method_data(EC_KEY *, void *(__cdecl *dup_func)(void *), void (__cdecl *free_func)(void *), void (__cdecl *clear_free_func)(void *));
void __cdecl EC_KEY_insert_key_method_data(EC_KEY *, void *data, void *(__cdecl *dup_func)(void *), void (__cdecl *free_func)(void *), void (__cdecl *clear_free_func)(void *));
EC_KEY *EC_KEY_new(void);
EC_KEY *__cdecl EC_KEY_new_by_curve_name(int nid);
int __cdecl EC_KEY_precompute_mult(EC_KEY *, BN_CTX *ctx);
int __cdecl EC_KEY_print(BIO *bp, const EC_KEY *x, int off);
int __cdecl EC_KEY_print_fp(FILE *fp, const EC_KEY *x, int off);
void __cdecl EC_KEY_set_asn1_flag(EC_KEY *, int);
void __cdecl EC_KEY_set_conv_form(EC_KEY *, point_conversion_form_t);
void __cdecl EC_KEY_set_enc_flags(EC_KEY *, unsigned int);
int __cdecl EC_KEY_set_group(EC_KEY *, const EC_GROUP *);
int __cdecl EC_KEY_set_private_key(EC_KEY *, const BIGNUM *);
int __cdecl EC_KEY_set_public_key(EC_KEY *, const EC_POINT *);
int __cdecl EC_KEY_up_ref(EC_KEY *);
int __cdecl EC_METHOD_get_field_type(const EC_METHOD *);
int __cdecl EC_POINT_add(const EC_GROUP *, EC_POINT *r, const EC_POINT *a, const EC_POINT *b, BN_CTX *);
EC_POINT *__cdecl EC_POINT_bn2point(const EC_GROUP *, const BIGNUM *, EC_POINT *, BN_CTX *);
void __cdecl EC_POINT_clear_free(EC_POINT *);
int __cdecl EC_POINT_cmp(const EC_GROUP *, const EC_POINT *a, const EC_POINT *b, BN_CTX *);
int __cdecl EC_POINT_copy(EC_POINT *, const EC_POINT *);
int __cdecl EC_POINT_dbl(const EC_GROUP *, EC_POINT *r, const EC_POINT *a, BN_CTX *);
EC_POINT *__cdecl EC_POINT_dup(const EC_POINT *, const EC_GROUP *);
void __cdecl EC_POINT_free(EC_POINT *);
int __cdecl EC_POINT_get_Jprojective_coordinates_GFp(const EC_GROUP *, const EC_POINT *, BIGNUM *x, BIGNUM *y, BIGNUM *z, BN_CTX *);
int __cdecl EC_POINT_get_affine_coordinates_GF2m(const EC_GROUP *, const EC_POINT *, BIGNUM *x, BIGNUM *y, BN_CTX *);
int __cdecl EC_POINT_get_affine_coordinates_GFp(const EC_GROUP *, const EC_POINT *, BIGNUM *x, BIGNUM *y, BN_CTX *);
EC_POINT *__cdecl EC_POINT_hex2point(const EC_GROUP *, const char *, EC_POINT *, BN_CTX *);
int __cdecl EC_POINT_invert(const EC_GROUP *, EC_POINT *, BN_CTX *);
int __cdecl EC_POINT_is_at_infinity(const EC_GROUP *, const EC_POINT *);
int __cdecl EC_POINT_is_on_curve(const EC_GROUP *, const EC_POINT *, BN_CTX *);
int __cdecl EC_POINT_make_affine(const EC_GROUP *, EC_POINT *, BN_CTX *);
const EC_METHOD *__cdecl EC_POINT_method_of(const EC_POINT *);
int __cdecl EC_POINT_mul(const EC_GROUP *, EC_POINT *r, const BIGNUM *, const EC_POINT *, const BIGNUM *, BN_CTX *);
EC_POINT *__cdecl EC_POINT_new(const EC_GROUP *);
int __cdecl EC_POINT_oct2point(const EC_GROUP *, EC_POINT *, const unsigned __int8 *buf, size_t len, BN_CTX *);
BIGNUM *__cdecl EC_POINT_point2bn(const EC_GROUP *, const EC_POINT *, point_conversion_form_t form, BIGNUM *, BN_CTX *);
char *__cdecl EC_POINT_point2hex(const EC_GROUP *, const EC_POINT *, point_conversion_form_t form, BN_CTX *);
size_t __cdecl EC_POINT_point2oct(const EC_GROUP *, const EC_POINT *, point_conversion_form_t form, unsigned __int8 *buf, size_t len, BN_CTX *);
int __cdecl EC_POINT_set_Jprojective_coordinates_GFp(const EC_GROUP *, EC_POINT *, const BIGNUM *x, const BIGNUM *y, const BIGNUM *z, BN_CTX *);
int __cdecl EC_POINT_set_affine_coordinates_GF2m(const EC_GROUP *, EC_POINT *, const BIGNUM *x, const BIGNUM *y, BN_CTX *);
int __cdecl EC_POINT_set_affine_coordinates_GFp(const EC_GROUP *, EC_POINT *, const BIGNUM *x, const BIGNUM *y, BN_CTX *);
int __cdecl EC_POINT_set_compressed_coordinates_GF2m(const EC_GROUP *, EC_POINT *, const BIGNUM *x, int y_bit, BN_CTX *);
int __cdecl EC_POINT_set_compressed_coordinates_GFp(const EC_GROUP *, EC_POINT *, const BIGNUM *x, int y_bit, BN_CTX *);
int __cdecl EC_POINT_set_to_infinity(const EC_GROUP *, EC_POINT *);
int __cdecl EC_POINTs_make_affine(const EC_GROUP *, size_t num, EC_POINT *[], BN_CTX *);
int __cdecl EC_POINTs_mul(const EC_GROUP *, EC_POINT *r, const BIGNUM *, size_t num, const EC_POINT *[], const BIGNUM *[], BN_CTX *);
size_t __cdecl EC_get_builtin_curves(EC_builtin_curve *r, size_t nitems);
void __cdecl EDIPARTYNAME_free(EDIPARTYNAME *a);
const ASN1_ITEM EDIPARTYNAME_it;
EDIPARTYNAME *EDIPARTYNAME_new(void);
MACRO_OK_0 _ENDLINE;
int __cdecl ENGINE_add(ENGINE *e);
void ENGINE_add_conf_module(void);
ENGINE *__cdecl ENGINE_by_id(const char *id);
void ENGINE_cleanup(void);
int __cdecl ENGINE_cmd_is_executable(ENGINE *e, int cmd);
int __cdecl ENGINE_ctrl(ENGINE *e, int cmd, __int64 i, void *p, void (*f)(void));
int __cdecl ENGINE_ctrl_cmd(ENGINE *e, const char *cmd_name, __int64 i, void *p, void (*f)(void), int cmd_optional);
int __cdecl ENGINE_ctrl_cmd_string(ENGINE *e, const char *cmd_name, const char *arg, int cmd_optional);
int __cdecl ENGINE_finish(ENGINE *e);
int __cdecl ENGINE_free(ENGINE *e);
const DH_METHOD *__cdecl ENGINE_get_DH(const ENGINE *e);
const DSA_METHOD *__cdecl ENGINE_get_DSA(const ENGINE *e);
const ECDH_METHOD *__cdecl ENGINE_get_ECDH(const ENGINE *e);
const ECDSA_METHOD *__cdecl ENGINE_get_ECDSA(const ENGINE *e);
const RAND_METHOD *__cdecl ENGINE_get_RAND(const ENGINE *e);
const RSA_METHOD *__cdecl ENGINE_get_RSA(const ENGINE *e);
const STORE_METHOD *__cdecl ENGINE_get_STORE(const ENGINE *e);
const EVP_CIPHER *__cdecl ENGINE_get_cipher(ENGINE *e, int nid);
ENGINE *__cdecl ENGINE_get_cipher_engine(int nid);
ENGINE_CIPHERS_PTR __cdecl ENGINE_get_ciphers(const ENGINE *e);
const ENGINE_CMD_DEFN *__cdecl ENGINE_get_cmd_defns(const ENGINE *e);
ENGINE_CTRL_FUNC_PTR __cdecl ENGINE_get_ctrl_function(const ENGINE *e);
ENGINE *ENGINE_get_default_DH(void);
ENGINE *ENGINE_get_default_DSA(void);
ENGINE *ENGINE_get_default_ECDH(void);
ENGINE *ENGINE_get_default_ECDSA(void);
ENGINE *ENGINE_get_default_RAND(void);
ENGINE *ENGINE_get_default_RSA(void);
ENGINE_GEN_INT_FUNC_PTR __cdecl ENGINE_get_destroy_function(const ENGINE *e);
const EVP_MD *__cdecl ENGINE_get_digest(ENGINE *e, int nid);
ENGINE *__cdecl ENGINE_get_digest_engine(int nid);
ENGINE_DIGESTS_PTR __cdecl ENGINE_get_digests(const ENGINE *e);
void *__cdecl ENGINE_get_ex_data(const ENGINE *e, int idx);
int __cdecl ENGINE_get_ex_new_index(__int64 argl, void *argp, CRYPTO_EX_new *new_func, CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func);
ENGINE_GEN_INT_FUNC_PTR __cdecl ENGINE_get_finish_function(const ENGINE *e);
ENGINE *ENGINE_get_first(void);
int __cdecl ENGINE_get_flags(const ENGINE *e);
const char *__cdecl ENGINE_get_id(const ENGINE *e);
ENGINE_GEN_INT_FUNC_PTR __cdecl ENGINE_get_init_function(const ENGINE *e);
ENGINE *ENGINE_get_last(void);
ENGINE_LOAD_KEY_PTR __cdecl ENGINE_get_load_privkey_function(const ENGINE *e);
ENGINE_LOAD_KEY_PTR __cdecl ENGINE_get_load_pubkey_function(const ENGINE *e);
const char *__cdecl ENGINE_get_name(const ENGINE *e);
ENGINE *__cdecl ENGINE_get_next(ENGINE *e);
ENGINE *__cdecl ENGINE_get_prev(ENGINE *e);
ENGINE_SSL_CLIENT_CERT_PTR __cdecl ENGINE_get_ssl_client_cert_function(const ENGINE *e);
void *ENGINE_get_static_state(void);
unsigned int ENGINE_get_table_flags(void);
int __cdecl ENGINE_init(ENGINE *e);
void ENGINE_load_builtin_engines(void);
void ENGINE_load_cryptodev(void);
void ENGINE_load_dynamic(void);
void ENGINE_load_openssl(void);
void ENGINE_load_padlock(void);
EVP_PKEY *__cdecl ENGINE_load_private_key(ENGINE *e, const char *key_id, UI_METHOD *ui_method, void *callback_data);
EVP_PKEY *__cdecl ENGINE_load_public_key(ENGINE *e, const char *key_id, UI_METHOD *ui_method, void *callback_data);
int __cdecl ENGINE_load_ssl_client_cert(ENGINE *e, SSL *s, STACK *ca_dn, X509 **pcert, EVP_PKEY **ppkey, STACK **pother, UI_METHOD *ui_method, void *callback_data);
ENGINE *ENGINE_new(void);
int __cdecl ENGINE_register_DH(ENGINE *e);
int __cdecl ENGINE_register_DSA(ENGINE *e);
int __cdecl ENGINE_register_ECDH(ENGINE *e);
int __cdecl ENGINE_register_ECDSA(ENGINE *e);
int __cdecl ENGINE_register_RAND(ENGINE *e);
int __cdecl ENGINE_register_RSA(ENGINE *e);
int __cdecl ENGINE_register_STORE(ENGINE *e);
void ENGINE_register_all_DH(void);
void ENGINE_register_all_DSA(void);
void ENGINE_register_all_ECDH(void);
void ENGINE_register_all_ECDSA(void);
void ENGINE_register_all_RAND(void);
void ENGINE_register_all_RSA(void);
void ENGINE_register_all_STORE(void);
void ENGINE_register_all_ciphers(void);
int ENGINE_register_all_complete(void);
void ENGINE_register_all_digests(void);
int __cdecl ENGINE_register_ciphers(ENGINE *e);
int __cdecl ENGINE_register_complete(ENGINE *e);
int __cdecl ENGINE_register_digests(ENGINE *e);
int __cdecl ENGINE_remove(ENGINE *e);
int __cdecl ENGINE_set_DH(ENGINE *e, const DH_METHOD *dh_meth);
int __cdecl ENGINE_set_DSA(ENGINE *e, const DSA_METHOD *dsa_meth);
int __cdecl ENGINE_set_ECDH(ENGINE *e, const ECDH_METHOD *ecdh_meth);
int __cdecl ENGINE_set_ECDSA(ENGINE *e, const ECDSA_METHOD *ecdsa_meth);
int __cdecl ENGINE_set_RAND(ENGINE *e, const RAND_METHOD *rand_meth);
int __cdecl ENGINE_set_RSA(ENGINE *e, const RSA_METHOD *rsa_meth);
int __cdecl ENGINE_set_STORE(ENGINE *e, const STORE_METHOD *store_meth);
int __cdecl ENGINE_set_ciphers(ENGINE *e, ENGINE_CIPHERS_PTR f);
int __cdecl ENGINE_set_cmd_defns(ENGINE *e, const ENGINE_CMD_DEFN *defns);
int __cdecl ENGINE_set_ctrl_function(ENGINE *e, ENGINE_CTRL_FUNC_PTR ctrl_f);
int __cdecl ENGINE_set_default(ENGINE *e, unsigned int flags);
int __cdecl ENGINE_set_default_DH(ENGINE *e);
int __cdecl ENGINE_set_default_DSA(ENGINE *e);
int __cdecl ENGINE_set_default_ECDH(ENGINE *e);
int __cdecl ENGINE_set_default_ECDSA(ENGINE *e);
int __cdecl ENGINE_set_default_RAND(ENGINE *e);
int __cdecl ENGINE_set_default_RSA(ENGINE *e);
int __cdecl ENGINE_set_default_ciphers(ENGINE *e);
int __cdecl ENGINE_set_default_digests(ENGINE *e);
int __cdecl ENGINE_set_default_string(ENGINE *e, const char *def_list);
int __cdecl ENGINE_set_destroy_function(ENGINE *e, ENGINE_GEN_INT_FUNC_PTR destroy_f);
int __cdecl ENGINE_set_digests(ENGINE *e, ENGINE_DIGESTS_PTR f);
int __cdecl ENGINE_set_ex_data(ENGINE *e, int idx, void *arg);
int __cdecl ENGINE_set_finish_function(ENGINE *e, ENGINE_GEN_INT_FUNC_PTR finish_f);
int __cdecl ENGINE_set_flags(ENGINE *e, int flags);
int __cdecl ENGINE_set_id(ENGINE *e, const char *id);
int __cdecl ENGINE_set_init_function(ENGINE *e, ENGINE_GEN_INT_FUNC_PTR init_f);
int __cdecl ENGINE_set_load_privkey_function(ENGINE *e, ENGINE_LOAD_KEY_PTR loadpriv_f);
int __cdecl ENGINE_set_load_pubkey_function(ENGINE *e, ENGINE_LOAD_KEY_PTR loadpub_f);
int __cdecl ENGINE_set_load_ssl_client_cert_function(ENGINE *e, ENGINE_SSL_CLIENT_CERT_PTR loadssl_f);
int __cdecl ENGINE_set_name(ENGINE *e, const char *name);
void __cdecl ENGINE_set_table_flags(unsigned int flags);
void __cdecl ENGINE_unregister_DH(ENGINE *e);
void __cdecl ENGINE_unregister_DSA(ENGINE *e);
void __cdecl ENGINE_unregister_ECDH(ENGINE *e);
void __cdecl ENGINE_unregister_ECDSA(ENGINE *e);
void __cdecl ENGINE_unregister_RAND(ENGINE *e);
void __cdecl ENGINE_unregister_RSA(ENGINE *e);
void __cdecl ENGINE_unregister_STORE(ENGINE *e);
void __cdecl ENGINE_unregister_ciphers(ENGINE *e);
void __cdecl ENGINE_unregister_digests(ENGINE *e);
int __cdecl ENGINE_up_ref(ENGINE *e);
void ERR_add_error_data(int num, ...);
void ERR_clear_error(void);
char *__cdecl ERR_error_string(unsigned __int64 e, char *buf);
void __cdecl ERR_error_string_n(unsigned __int64 e, char *buf, size_t len);
void ERR_free_strings(void);
const char *__cdecl ERR_func_error_string(unsigned __int64 e);
LHASH *ERR_get_err_state_table(void);
unsigned __int64 ERR_get_error(void);
unsigned __int64 __cdecl ERR_get_error_line(const char **file, int *line);
unsigned __int64 __cdecl ERR_get_error_line_data(const char **file, int *line, const char **data, int *flags);
const ERR_FNS *ERR_get_implementation(void);
int ERR_get_next_error_library(void);
ERR_STATE *ERR_get_state(void);
LHASH *ERR_get_string_table(void);
const char *__cdecl ERR_lib_error_string(unsigned __int64 e);
void ERR_load_ASN1_strings(void);
void ERR_load_BIO_strings(void);
void ERR_load_BN_strings(void);
void ERR_load_BUF_strings(void);
void ERR_load_COMP_strings(void);
void ERR_load_CONF_strings(void);
void ERR_load_CRYPTO_strings(void);
void ERR_load_DH_strings(void);
void ERR_load_DSA_strings(void);
void ERR_load_DSO_strings(void);
void ERR_load_ECDH_strings(void);
void ERR_load_ECDSA_strings(void);
void ERR_load_EC_strings(void);
void ERR_load_ENGINE_strings(void);
void ERR_load_ERR_strings(void);
void ERR_load_EVP_strings(void);
void ERR_load_OBJ_strings(void);
void ERR_load_OCSP_strings(void);
void ERR_load_PEM_strings(void);
void ERR_load_PKCS12_strings(void);
void ERR_load_PKCS7_strings(void);
void ERR_load_RAND_strings(void);
void ERR_load_RSA_strings(void);
void ERR_load_SSL_strings(void);
void ERR_load_STORE_strings(void);
void ERR_load_UI_strings(void);
void ERR_load_X509V3_strings(void);
void ERR_load_X509_strings(void);
void ERR_load_crypto_strings(void);
void __cdecl ERR_load_strings(int lib, ERR_STRING_DATA str[]);
unsigned __int64 ERR_peek_error(void);
unsigned __int64 __cdecl ERR_peek_error_line(const char **file, int *line);
unsigned __int64 __cdecl ERR_peek_error_line_data(const char **file, int *line, const char **data, int *flags);
unsigned __int64 ERR_peek_last_error(void);
unsigned __int64 __cdecl ERR_peek_last_error_line(const char **file, int *line);
unsigned __int64 __cdecl ERR_peek_last_error_line_data(const char **file, int *line, const char **data, int *flags);
int ERR_pop_to_mark(void);
void __cdecl ERR_print_errors(BIO *bp);
void __cdecl ERR_print_errors_cb(int (__cdecl *cb)(const char *str, size_t len, void *u), void *u);
void __cdecl ERR_print_errors_fp(FILE *fp);
void __cdecl ERR_put_error(int lib, int func, int reason, const char *file, int line);
const char *__cdecl ERR_reason_error_string(unsigned __int64 e);
void __cdecl ERR_release_err_state_table(LHASH **hash);
void __cdecl ERR_remove_state(unsigned __int64 pid);
void __cdecl ERR_set_error_data(char *data, int flags);
int __cdecl ERR_set_implementation(const ERR_FNS *fns);
int ERR_set_mark(void);
void __cdecl ERR_unload_strings(int lib, ERR_STRING_DATA str[]);
int ESCDELAY;
int __cdecl EVP_BytesToKey(const EVP_CIPHER *type, const EVP_MD *md, const unsigned __int8 *salt, const unsigned __int8 *data, int datal, int count, unsigned __int8 *key, unsigned __int8 *iv);
int __cdecl EVP_CIPHER_CTX_block_size(const EVP_CIPHER_CTX *ctx);
const EVP_CIPHER *__cdecl EVP_CIPHER_CTX_cipher(const EVP_CIPHER_CTX *ctx);
int __cdecl EVP_CIPHER_CTX_cleanup(EVP_CIPHER_CTX *a);
void __cdecl EVP_CIPHER_CTX_clear_flags(EVP_CIPHER_CTX *ctx, int flags);
int __cdecl EVP_CIPHER_CTX_ctrl(EVP_CIPHER_CTX *ctx, int type, int arg, void *ptr);
unsigned __int64 __cdecl EVP_CIPHER_CTX_flags(const EVP_CIPHER_CTX *ctx);
void __cdecl EVP_CIPHER_CTX_free(EVP_CIPHER_CTX *a);
void *__cdecl EVP_CIPHER_CTX_get_app_data(const EVP_CIPHER_CTX *ctx);
void __cdecl EVP_CIPHER_CTX_init(EVP_CIPHER_CTX *a);
int __cdecl EVP_CIPHER_CTX_iv_length(const EVP_CIPHER_CTX *ctx);
int __cdecl EVP_CIPHER_CTX_key_length(const EVP_CIPHER_CTX *ctx);
EVP_CIPHER_CTX *EVP_CIPHER_CTX_new(void);
int __cdecl EVP_CIPHER_CTX_nid(const EVP_CIPHER_CTX *ctx);
int __cdecl EVP_CIPHER_CTX_rand_key(EVP_CIPHER_CTX *ctx, unsigned __int8 *key);
void __cdecl EVP_CIPHER_CTX_set_app_data(EVP_CIPHER_CTX *ctx, void *data);
void __cdecl EVP_CIPHER_CTX_set_flags(EVP_CIPHER_CTX *ctx, int flags);
int __cdecl EVP_CIPHER_CTX_set_key_length(EVP_CIPHER_CTX *x, int keylen);
int __cdecl EVP_CIPHER_CTX_set_padding(EVP_CIPHER_CTX *c, int pad);
int __cdecl EVP_CIPHER_CTX_test_flags(const EVP_CIPHER_CTX *ctx, int flags);
int __cdecl EVP_CIPHER_asn1_to_param(EVP_CIPHER_CTX *c, ASN1_TYPE *type);
int __cdecl EVP_CIPHER_block_size(const EVP_CIPHER *cipher);
unsigned __int64 __cdecl EVP_CIPHER_flags(const EVP_CIPHER *cipher);
int __cdecl EVP_CIPHER_get_asn1_iv(EVP_CIPHER_CTX *c, ASN1_TYPE *type);
int __cdecl EVP_CIPHER_iv_length(const EVP_CIPHER *cipher);
int __cdecl EVP_CIPHER_key_length(const EVP_CIPHER *cipher);
int __cdecl EVP_CIPHER_nid(const EVP_CIPHER *cipher);
int __cdecl EVP_CIPHER_param_to_asn1(EVP_CIPHER_CTX *c, ASN1_TYPE *type);
int __cdecl EVP_CIPHER_set_asn1_iv(EVP_CIPHER_CTX *c, ASN1_TYPE *type);
int __cdecl EVP_CIPHER_type(const EVP_CIPHER *ctx);
int __cdecl EVP_Cipher(EVP_CIPHER_CTX *c, unsigned __int8 *out, const unsigned __int8 *in, unsigned int inl);
int __cdecl EVP_CipherFinal(EVP_CIPHER_CTX *ctx, unsigned __int8 *outm, int *outl);
int __cdecl EVP_CipherFinal_ex(EVP_CIPHER_CTX *ctx, unsigned __int8 *outm, int *outl);
int __cdecl EVP_CipherInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher, const unsigned __int8 *key, const unsigned __int8 *iv, int enc);
int __cdecl EVP_CipherInit_ex(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher, ENGINE *impl, const unsigned __int8 *key, const unsigned __int8 *iv, int enc);
int __cdecl EVP_CipherUpdate(EVP_CIPHER_CTX *ctx, unsigned __int8 *out, int *outl, const unsigned __int8 *in, int inl);
int __cdecl EVP_DecodeBlock(unsigned __int8 *t, const unsigned __int8 *f, int n);
int __cdecl EVP_DecodeFinal(EVP_ENCODE_CTX *ctx, unsigned __int8 *out, int *outl);
void __cdecl EVP_DecodeInit(EVP_ENCODE_CTX *ctx);
int __cdecl EVP_DecodeUpdate(EVP_ENCODE_CTX *ctx, unsigned __int8 *out, int *outl, const unsigned __int8 *in, int inl);
int __cdecl EVP_DecryptFinal(EVP_CIPHER_CTX *ctx, unsigned __int8 *outm, int *outl);
int __cdecl EVP_DecryptFinal_ex(EVP_CIPHER_CTX *ctx, unsigned __int8 *outm, int *outl);
int __cdecl EVP_DecryptInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher, const unsigned __int8 *key, const unsigned __int8 *iv);
int __cdecl EVP_DecryptInit_ex(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher, ENGINE *impl, const unsigned __int8 *key, const unsigned __int8 *iv);
int __cdecl EVP_DecryptUpdate(EVP_CIPHER_CTX *ctx, unsigned __int8 *out, int *outl, const unsigned __int8 *in, int inl);
int __cdecl EVP_Digest(const void *data, size_t count, unsigned __int8 *md, unsigned int *size, const EVP_MD *type, ENGINE *impl);
int __cdecl EVP_DigestFinal(EVP_MD_CTX *ctx, unsigned __int8 *md, unsigned int *s);
int __cdecl EVP_DigestFinal_ex(EVP_MD_CTX *ctx, unsigned __int8 *md, unsigned int *s);
int __cdecl EVP_DigestInit(EVP_MD_CTX *ctx, const EVP_MD *type);
int __cdecl EVP_DigestInit_ex(EVP_MD_CTX *ctx, const EVP_MD *type, ENGINE *impl);
int __cdecl EVP_DigestUpdate(EVP_MD_CTX *ctx, const void *d, size_t cnt);
int __cdecl EVP_EncodeBlock(unsigned __int8 *t, const unsigned __int8 *f, int n);
void __cdecl EVP_EncodeFinal(EVP_ENCODE_CTX *ctx, unsigned __int8 *out, int *outl);
void __cdecl EVP_EncodeInit(EVP_ENCODE_CTX *ctx);
void __cdecl EVP_EncodeUpdate(EVP_ENCODE_CTX *ctx, unsigned __int8 *out, int *outl, const unsigned __int8 *in, int inl);
int __cdecl EVP_EncryptFinal(EVP_CIPHER_CTX *ctx, unsigned __int8 *out, int *outl);
int __cdecl EVP_EncryptFinal_ex(EVP_CIPHER_CTX *ctx, unsigned __int8 *out, int *outl);
int __cdecl EVP_EncryptInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher, const unsigned __int8 *key, const unsigned __int8 *iv);
int __cdecl EVP_EncryptInit_ex(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher, ENGINE *impl, const unsigned __int8 *key, const unsigned __int8 *iv);
int __cdecl EVP_EncryptUpdate(EVP_CIPHER_CTX *ctx, unsigned __int8 *out, int *outl, const unsigned __int8 *in, int inl);
int __cdecl EVP_MD_CTX_cleanup(EVP_MD_CTX *ctx);
void __cdecl EVP_MD_CTX_clear_flags(EVP_MD_CTX *ctx, int flags);
int __cdecl EVP_MD_CTX_copy(EVP_MD_CTX *out, const EVP_MD_CTX *in);
int __cdecl EVP_MD_CTX_copy_ex(EVP_MD_CTX *out, const EVP_MD_CTX *in);
EVP_MD_CTX *EVP_MD_CTX_create(void);
void __cdecl EVP_MD_CTX_destroy(EVP_MD_CTX *ctx);
void __cdecl EVP_MD_CTX_init(EVP_MD_CTX *ctx);
const EVP_MD *__cdecl EVP_MD_CTX_md(const EVP_MD_CTX *ctx);
void __cdecl EVP_MD_CTX_set_flags(EVP_MD_CTX *ctx, int flags);
int __cdecl EVP_MD_CTX_test_flags(const EVP_MD_CTX *ctx, int flags);
int __cdecl EVP_MD_block_size(const EVP_MD *md);
int __cdecl EVP_MD_pkey_type(const EVP_MD *md);
int __cdecl EVP_MD_size(const EVP_MD *md);
int __cdecl EVP_MD_type(const EVP_MD *md);
int __cdecl EVP_OpenFinal(EVP_CIPHER_CTX *ctx, unsigned __int8 *out, int *outl);
int __cdecl EVP_OpenInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type, const unsigned __int8 *ek, int ekl, const unsigned __int8 *iv, EVP_PKEY *priv);
int __cdecl EVP_PBE_CipherInit(ASN1_OBJECT *pbe_obj, const char *pass, int passlen, ASN1_TYPE *param, EVP_CIPHER_CTX *ctx, int en_de);
int __cdecl EVP_PBE_alg_add(int nid, const EVP_CIPHER *cipher, const EVP_MD *md, EVP_PBE_KEYGEN *keygen);
void EVP_PBE_cleanup(void);
EVP_PKEY *__cdecl EVP_PKCS82PKEY(PKCS8_PRIV_KEY_INFO *p8);
PKCS8_PRIV_KEY_INFO *__cdecl EVP_PKEY2PKCS8(EVP_PKEY *pkey);
PKCS8_PRIV_KEY_INFO *__cdecl EVP_PKEY2PKCS8_broken(EVP_PKEY *pkey, int broken);
int __cdecl EVP_PKEY_add1_attr(EVP_PKEY *key, X509_ATTRIBUTE *attr);
int __cdecl EVP_PKEY_add1_attr_by_NID(EVP_PKEY *key, int nid, int type, const unsigned __int8 *bytes, int len);
int __cdecl EVP_PKEY_add1_attr_by_OBJ(EVP_PKEY *key, const ASN1_OBJECT *obj, int type, const unsigned __int8 *bytes, int len);
int __cdecl EVP_PKEY_add1_attr_by_txt(EVP_PKEY *key, const char *attrname, int type, const unsigned __int8 *bytes, int len);
int __cdecl EVP_PKEY_assign(EVP_PKEY *pkey, int type, char *key);
int __cdecl EVP_PKEY_bits(EVP_PKEY *pkey);
int __cdecl EVP_PKEY_cmp(const EVP_PKEY *a, const EVP_PKEY *b);
int __cdecl EVP_PKEY_cmp_parameters(const EVP_PKEY *a, const EVP_PKEY *b);
int __cdecl EVP_PKEY_copy_parameters(EVP_PKEY *to, const EVP_PKEY *from);
int __cdecl EVP_PKEY_decrypt(unsigned __int8 *dec_key, const unsigned __int8 *enc_key, int enc_key_len, EVP_PKEY *private_key);
X509_ATTRIBUTE *__cdecl EVP_PKEY_delete_attr(EVP_PKEY *key, int loc);
int __cdecl EVP_PKEY_encrypt(unsigned __int8 *enc_key, const unsigned __int8 *key, int key_len, EVP_PKEY *pub_key);
void __cdecl EVP_PKEY_free(EVP_PKEY *pkey);
struct dh_st *__cdecl EVP_PKEY_get1_DH(EVP_PKEY *pkey);
struct dsa_st *__cdecl EVP_PKEY_get1_DSA(EVP_PKEY *pkey);
struct ec_key_st *__cdecl EVP_PKEY_get1_EC_KEY(EVP_PKEY *pkey);
struct rsa_st *__cdecl EVP_PKEY_get1_RSA(EVP_PKEY *pkey);
X509_ATTRIBUTE *__cdecl EVP_PKEY_get_attr(const EVP_PKEY *key, int loc);
int __cdecl EVP_PKEY_get_attr_by_NID(const EVP_PKEY *key, int nid, int lastpos);
int __cdecl EVP_PKEY_get_attr_by_OBJ(const EVP_PKEY *key, ASN1_OBJECT *obj, int lastpos);
int __cdecl EVP_PKEY_get_attr_count(const EVP_PKEY *key);
int __cdecl EVP_PKEY_missing_parameters(const EVP_PKEY *pkey);
EVP_PKEY *EVP_PKEY_new(void);
int __cdecl EVP_PKEY_save_parameters(EVP_PKEY *pkey, int mode);
int __cdecl EVP_PKEY_set1_DH(EVP_PKEY *pkey, struct dh_st *key);
int __cdecl EVP_PKEY_set1_DSA(EVP_PKEY *pkey, struct dsa_st *key);
int __cdecl EVP_PKEY_set1_EC_KEY(EVP_PKEY *pkey, struct ec_key_st *key);
int __cdecl EVP_PKEY_set1_RSA(EVP_PKEY *pkey, struct rsa_st *key);
int __cdecl EVP_PKEY_size(EVP_PKEY *pkey);
int __cdecl EVP_PKEY_type(int type);
int __cdecl EVP_SealFinal(EVP_CIPHER_CTX *ctx, unsigned __int8 *out, int *outl);
int __cdecl EVP_SealInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type, unsigned __int8 **ek, int *ekl, unsigned __int8 *iv, EVP_PKEY **pubk, int npubk);
int __cdecl EVP_SignFinal(EVP_MD_CTX *ctx, unsigned __int8 *md, unsigned int *s, EVP_PKEY *pkey);
int __cdecl EVP_VerifyFinal(EVP_MD_CTX *ctx, const unsigned __int8 *sigbuf, unsigned int siglen, EVP_PKEY *pkey);
void EVP_add_alg_module(void);
int __cdecl EVP_add_cipher(const EVP_CIPHER *cipher);
int __cdecl EVP_add_digest(const EVP_MD *digest);
const EVP_CIPHER *EVP_aes_128_cbc(void);
const EVP_CIPHER *EVP_aes_128_cfb1(void);
const EVP_CIPHER *EVP_aes_128_cfb128(void);
const EVP_CIPHER *EVP_aes_128_cfb8(void);
const EVP_CIPHER *EVP_aes_128_ecb(void);
const EVP_CIPHER *EVP_aes_128_ofb(void);
const EVP_CIPHER *EVP_aes_192_cbc(void);
const EVP_CIPHER *EVP_aes_192_cfb1(void);
const EVP_CIPHER *EVP_aes_192_cfb128(void);
const EVP_CIPHER *EVP_aes_192_cfb8(void);
const EVP_CIPHER *EVP_aes_192_ecb(void);
const EVP_CIPHER *EVP_aes_192_ofb(void);
const EVP_CIPHER *EVP_aes_256_cbc(void);
const EVP_CIPHER *EVP_aes_256_cfb1(void);
const EVP_CIPHER *EVP_aes_256_cfb128(void);
const EVP_CIPHER *EVP_aes_256_cfb8(void);
const EVP_CIPHER *EVP_aes_256_ecb(void);
const EVP_CIPHER *EVP_aes_256_ofb(void);
const EVP_CIPHER *EVP_bf_cbc(void);
const EVP_CIPHER *EVP_bf_cfb64(void);
const EVP_CIPHER *EVP_bf_ecb(void);
const EVP_CIPHER *EVP_bf_ofb(void);
const EVP_CIPHER *EVP_cast5_cbc(void);
const EVP_CIPHER *EVP_cast5_cfb64(void);
const EVP_CIPHER *EVP_cast5_ecb(void);
const EVP_CIPHER *EVP_cast5_ofb(void);
void EVP_cleanup(void);
const EVP_CIPHER *EVP_des_cbc(void);
const EVP_CIPHER *EVP_des_cfb1(void);
const EVP_CIPHER *EVP_des_cfb64(void);
const EVP_CIPHER *EVP_des_cfb8(void);
const EVP_CIPHER *EVP_des_ecb(void);
const EVP_CIPHER *EVP_des_ede(void);
const EVP_CIPHER *EVP_des_ede3(void);
const EVP_CIPHER *EVP_des_ede3_cbc(void);
const EVP_CIPHER *EVP_des_ede3_cfb1(void);
const EVP_CIPHER *EVP_des_ede3_cfb64(void);
const EVP_CIPHER *EVP_des_ede3_cfb8(void);
const EVP_CIPHER *EVP_des_ede3_ecb(void);
const EVP_CIPHER *EVP_des_ede3_ofb(void);
const EVP_CIPHER *EVP_des_ede_cbc(void);
const EVP_CIPHER *EVP_des_ede_cfb64(void);
const EVP_CIPHER *EVP_des_ede_ecb(void);
const EVP_CIPHER *EVP_des_ede_ofb(void);
const EVP_CIPHER *EVP_des_ofb(void);
const EVP_CIPHER *EVP_desx_cbc(void);
const EVP_MD *EVP_dss(void);
const EVP_MD *EVP_dss1(void);
const EVP_MD *EVP_ecdsa(void);
const EVP_CIPHER *EVP_enc_null(void);
const EVP_CIPHER *__cdecl EVP_get_cipherbyname(const char *name);
const EVP_MD *__cdecl EVP_get_digestbyname(const char *name);
char *EVP_get_pw_prompt(void);
const EVP_MD *EVP_md2(void);
const EVP_MD *EVP_md4(void);
const EVP_MD *EVP_md5(void);
const EVP_MD *EVP_md_null(void);
const EVP_MD *EVP_mdc2(void);
const EVP_CIPHER *EVP_rc2_40_cbc(void);
const EVP_CIPHER *EVP_rc2_64_cbc(void);
const EVP_CIPHER *EVP_rc2_cbc(void);
const EVP_CIPHER *EVP_rc2_cfb64(void);
const EVP_CIPHER *EVP_rc2_ecb(void);
const EVP_CIPHER *EVP_rc2_ofb(void);
const EVP_CIPHER *EVP_rc4(void);
const EVP_CIPHER *EVP_rc4_40(void);
const EVP_CIPHER *EVP_rc5_32_12_16_cbc(void);
const EVP_CIPHER *EVP_rc5_32_12_16_cfb64(void);
const EVP_CIPHER *EVP_rc5_32_12_16_ecb(void);
const EVP_CIPHER *EVP_rc5_32_12_16_ofb(void);
int __cdecl EVP_read_pw_string(char *buf, int length, const char *prompt, int verify);
const EVP_MD *EVP_ripemd160(void);
const EVP_CIPHER *EVP_seed_cbc(void);
const EVP_CIPHER *EVP_seed_cfb128(void);
const EVP_CIPHER *EVP_seed_ecb(void);
const EVP_CIPHER *EVP_seed_ofb(void);
void __cdecl EVP_set_pw_prompt(const char *prompt);
const EVP_MD *EVP_sha(void);
const EVP_MD *EVP_sha1(void);
const EVP_MD *EVP_sha224(void);
const EVP_MD *EVP_sha256(void);
const EVP_MD *EVP_sha384(void);
const EVP_MD *EVP_sha512(void);
MACRO_OK _EXECUTE_OK;
void __cdecl EXTENDED_KEY_USAGE_free(EXTENDED_KEY_USAGE *a);
const ASN1_ITEM EXTENDED_KEY_USAGE_it;
EXTENDED_KEY_USAGE *EXTENDED_KEY_USAGE_new(void);
MACRO__FILESEC _FILESEC_REMOVE_ACL;
MACRO__FILESEC FILESEC_UNSET_PROPERTY;
MACRO__FORTIFY _FORTIFY_SOURCE;
MACRO_OK_0 _FULLWIN;
void __cdecl FatalError(ctmbstr msg);
void __cdecl GENERAL_NAMES_free(GENERAL_NAMES *a);
const ASN1_ITEM GENERAL_NAMES_it;
GENERAL_NAMES *GENERAL_NAMES_new(void);
void __cdecl GENERAL_NAME_free(GENERAL_NAME *a);
const ASN1_ITEM GENERAL_NAME_it;
GENERAL_NAME *GENERAL_NAME_new(void);
int __cdecl GENERAL_NAME_print(BIO *out, GENERAL_NAME *gen);
void __cdecl GENERAL_SUBTREE_free(GENERAL_SUBTREE *a);
const ASN1_ITEM GENERAL_SUBTREE_it;
GENERAL_SUBTREE *GENERAL_SUBTREE_new(void);
MACRO__GLOB _GLOB_ERR_BLOCK;
MACRO_SOURCE _GNU_SOURCE;
gss_OID GSS_C_NT_ANONYMOUS;
gss_OID GSS_C_NT_EXPORT_NAME;
gss_OID GSS_C_NT_HOSTBASED_SERVICE;
gss_OID GSS_C_NT_HOSTBASED_SERVICE_X;
gss_OID GSS_C_NT_MACHINE_UID_NAME;
gss_OID GSS_C_NT_STRING_UID_NAME;
gss_OID GSS_C_NT_USER_NAME;
const gss_OID_desc *const GSS_KRB5_NT_PRINCIPAL_NAME;
MACRO_OK_0 _HASMOVED;
unsigned __int8 *__cdecl HMAC(const EVP_MD *evp_md, const void *key, int key_len, const unsigned __int8 *d, size_t n, unsigned __int8 *md, unsigned int *md_len);
void __cdecl HMAC_CTX_cleanup(HMAC_CTX *ctx);
void __cdecl HMAC_CTX_init(HMAC_CTX *ctx);
void __cdecl HMAC_CTX_set_flags(HMAC_CTX *ctx, unsigned __int64 flags);
void __cdecl HMAC_Final(HMAC_CTX *ctx, unsigned __int8 *md, unsigned int *len);
void __cdecl HMAC_Init(HMAC_CTX *ctx, const void *key, int len, const EVP_MD *md);
void __cdecl HMAC_Init_ex(HMAC_CTX *ctx, const void *key, int len, const EVP_MD *md, ENGINE *impl);
void __cdecl HMAC_Update(HMAC_CTX *ctx, const unsigned __int8 *data, size_t len);
MACRO__I386 _I386_SIGNAL_H_;
MACRO__IOFBF IOFBF;
MACRO__IOFBF _IOLBF;
MACRO__IOFBF _IONBF;
MACRO_OK_0 _ISPAD;
MACRO__JBLEN _JBLEN;
audit_token_t KERNEL_AUDIT_TOKEN;
security_token_t KERNEL_SECURITY_TOKEN;
void __cdecl KRB5_APREQBODY_free(KRB5_APREQBODY *a);
const ASN1_ITEM KRB5_APREQBODY_it;
KRB5_APREQBODY *KRB5_APREQBODY_new(void);
void __cdecl KRB5_APREQ_free(KRB5_APREQ *a);
const ASN1_ITEM KRB5_APREQ_it;
KRB5_APREQ *KRB5_APREQ_new(void);
void __cdecl KRB5_AUTHDATA_free(KRB5_AUTHDATA *a);
const ASN1_ITEM KRB5_AUTHDATA_it;
KRB5_AUTHDATA *KRB5_AUTHDATA_new(void);
void __cdecl KRB5_AUTHENTBODY_free(KRB5_AUTHENTBODY *a);
const ASN1_ITEM KRB5_AUTHENTBODY_it;
KRB5_AUTHENTBODY *KRB5_AUTHENTBODY_new(void);
void __cdecl KRB5_AUTHENT_free(KRB5_AUTHENT *a);
const ASN1_ITEM KRB5_AUTHENT_it;
KRB5_AUTHENT *KRB5_AUTHENT_new(void);
void __cdecl KRB5_CHECKSUM_free(KRB5_CHECKSUM *a);
const ASN1_ITEM KRB5_CHECKSUM_it;
KRB5_CHECKSUM *KRB5_CHECKSUM_new(void);
void __cdecl KRB5_ENCDATA_free(KRB5_ENCDATA *a);
const ASN1_ITEM KRB5_ENCDATA_it;
KRB5_ENCDATA *KRB5_ENCDATA_new(void);
void __cdecl KRB5_ENCKEY_free(KRB5_ENCKEY *a);
const ASN1_ITEM KRB5_ENCKEY_it;
KRB5_ENCKEY *KRB5_ENCKEY_new(void);
void __cdecl KRB5_PRINCNAME_free(KRB5_PRINCNAME *a);
const ASN1_ITEM KRB5_PRINCNAME_it;
KRB5_PRINCNAME *KRB5_PRINCNAME_new(void);
void __cdecl KRB5_TICKET_free(KRB5_TICKET *a);
const ASN1_ITEM KRB5_TICKET_it;
KRB5_TICKET *KRB5_TICKET_new(void);
void __cdecl KRB5_TKTBODY_free(KRB5_TKTBODY *a);
const ASN1_ITEM KRB5_TKTBODY_it;
KRB5_TKTBODY *KRB5_TKTBODY_new(void);
MACRO__LC _LC_LAST;
MACRO__LC_NUM _LC_LAST_MASK;
MACRO__LC_NUM _LC_NUM_MASK;
MACRO__LDAP _LDAP_FEATURES_H;
MACRO__LDAP_SCHEMA _LDAP_SCHEMA_H;
MACRO__LIBICONV _LIBICONV_VERSION;
int LINES;
const ASN1_ITEM LONG_it;
MACRO__MACH_ERROR _MACH_ERROR_;
MACRO__MACH _MACH_INIT_;
unsigned __int8 *__cdecl MD2(const unsigned __int8 *d, size_t n, unsigned __int8 *md);
int __cdecl MD2_Final(unsigned __int8 *md, MD2_CTX *c);
int __cdecl MD2_Init(MD2_CTX *c);
int __cdecl MD2_Update(MD2_CTX *c, const unsigned __int8 *data, size_t len);
const char *MD2_options(void);
unsigned __int8 *__cdecl MD4(const unsigned __int8 *d, size_t n, unsigned __int8 *md);
int __cdecl MD4_Final(unsigned __int8 *md, MD4_CTX *c);
int __cdecl MD4_Init(MD4_CTX *c);
void __cdecl MD4_Transform(MD4_CTX *c, const unsigned __int8 *b);
int __cdecl MD4_Update(MD4_CTX *c, const void *data, size_t len);
unsigned __int8 *__cdecl MD5(const unsigned __int8 *d, size_t n, unsigned __int8 *md);
int __cdecl MD5_Final(unsigned __int8 *md, MD5_CTX *c);
int __cdecl MD5_Init(MD5_CTX *c);
void __cdecl MD5_Transform(MD5_CTX *c, const unsigned __int8 *b);
int __cdecl MD5_Update(MD5_CTX *c, const void *data, size_t len);
unsigned __int8 *__cdecl MDC2(const unsigned __int8 *d, size_t n, unsigned __int8 *md);
int __cdecl MDC2_Final(unsigned __int8 *md, MDC2_CTX *c);
int __cdecl MDC2_Init(MDC2_CTX *c);
int __cdecl MDC2_Update(MDC2_CTX *c, const unsigned __int8 *data, size_t len);
void __cdecl MDbegin(MDptr);
int __cdecl MDchecksum(const u_char *data, size_t len, u_char *mac, size_t maclen);
void __cdecl MDget(MDstruct *MD, u_char *buf, size_t buflen);
void __cdecl MDprint(MDptr);
int __cdecl MDsign(const u_char *data, size_t len, u_char *mac, size_t maclen, const u_char *secret, size_t secretlen);
int __cdecl MDupdate(MDptr, const unsigned __int8 *, unsigned int);
void *__cdecl MemAlloc(size_t size);
void __cdecl MemFree(void *mem);
void *__cdecl MemRealloc(void *mem, size_t newsize);
void __cdecl NAME_CONSTRAINTS_free(NAME_CONSTRAINTS *a);
const ASN1_ITEM NAME_CONSTRAINTS_it;
NAME_CONSTRAINTS *NAME_CONSTRAINTS_new(void);
CONF_METHOD *NCONF_WIN32(void);
CONF_METHOD *NCONF_default(void);
int __cdecl NCONF_dump_bio(const CONF *conf, BIO *out);
int __cdecl NCONF_dump_fp(const CONF *conf, FILE *out);
void __cdecl NCONF_free(CONF *conf);
void __cdecl NCONF_free_data(CONF *conf);
int __cdecl NCONF_get_number_e(const CONF *conf, const char *group, const char *name, __int64 *result);
STACK *__cdecl NCONF_get_section(const CONF *conf, const char *section);
char *__cdecl NCONF_get_string(const CONF *conf, const char *group, const char *name);
int __cdecl NCONF_load(CONF *conf, const char *file, __int64 *eline);
int __cdecl NCONF_load_bio(CONF *conf, BIO *bp, __int64 *eline);
int __cdecl NCONF_load_fp(CONF *conf, FILE *fp, __int64 *eline);
CONF *__cdecl NCONF_new(CONF_METHOD *meth);
NDR_record_t NDR_record;
void __cdecl NETSCAPE_CERT_SEQUENCE_free(NETSCAPE_CERT_SEQUENCE *a);
const ASN1_ITEM NETSCAPE_CERT_SEQUENCE_it;
NETSCAPE_CERT_SEQUENCE *NETSCAPE_CERT_SEQUENCE_new(void);
void __cdecl NETSCAPE_SPKAC_free(NETSCAPE_SPKAC *a);
const ASN1_ITEM NETSCAPE_SPKAC_it;
NETSCAPE_SPKAC *NETSCAPE_SPKAC_new(void);
NETSCAPE_SPKI *__cdecl NETSCAPE_SPKI_b64_decode(const char *str, int len);
char *__cdecl NETSCAPE_SPKI_b64_encode(NETSCAPE_SPKI *x);
void __cdecl NETSCAPE_SPKI_free(NETSCAPE_SPKI *a);
EVP_PKEY *__cdecl NETSCAPE_SPKI_get_pubkey(NETSCAPE_SPKI *x);
const ASN1_ITEM NETSCAPE_SPKI_it;
NETSCAPE_SPKI *NETSCAPE_SPKI_new(void);
int __cdecl NETSCAPE_SPKI_print(BIO *out, NETSCAPE_SPKI *spki);
int __cdecl NETSCAPE_SPKI_set_pubkey(NETSCAPE_SPKI *x, EVP_PKEY *pkey);
int __cdecl NETSCAPE_SPKI_sign(NETSCAPE_SPKI *x, EVP_PKEY *pkey, const EVP_MD *md);
int __cdecl NETSCAPE_SPKI_verify(NETSCAPE_SPKI *a, EVP_PKEY *r);
MACRO__NET _NET_IF_MIB_H;
MACRO__NEWINDEX _NEWINDEX;
MACRO__NOCHANGE _NOCHANGE;
void __cdecl NOTICEREF_free(NOTICEREF *a);
const ASN1_ITEM NOTICEREF_it;
NOTICEREF *NOTICEREF_new(void);
const struct mach_header *__cdecl NSAddImage(const char *image_name, uint32_t options);
bool __cdecl NSAddLibrary(const char *pathName);
bool __cdecl NSAddLibraryWithSearching(const char *pathName);
void *__cdecl NSAddressOfSymbol(NSSymbol symbol);
NSObjectFileImageReturnCode __cdecl NSCreateObjectFileImageFromFile(const char *pathName, NSObjectFileImage *objectFileImage);
NSObjectFileImageReturnCode __cdecl NSCreateObjectFileImageFromMemory(const void *address, size_t size, NSObjectFileImage *objectFileImage);
bool __cdecl NSDestroyObjectFileImage(NSObjectFileImage objectFileImage);
NSSearchPathEnumerationState __cdecl NSGetNextSearchPathEnumeration(NSSearchPathEnumerationState state, char *path);
void *__cdecl NSGetSectionDataInObjectFileImage(NSObjectFileImage objectFileImage, const char *segmentName, const char *sectionName, size_t *size);
bool __cdecl NSHasModInitObjectFileImage(NSObjectFileImage objectFileImage);
void __cdecl NSInstallLinkEditErrorHandlers(const NSLinkEditErrorHandlers *handlers);
bool __cdecl NSIsSymbolDefinedInObjectFileImage(NSObjectFileImage objectFileImage, const char *symbolName);
bool __cdecl NSIsSymbolNameDefined(const char *symbolName);
bool __cdecl NSIsSymbolNameDefinedInImage(const struct mach_header *image, const char *symbolName);
bool __cdecl NSIsSymbolNameDefinedWithHint(const char *symbolName, const char *libraryNameHint);
const char *__cdecl NSLibraryNameForModule(NSModule m);
void __cdecl NSLinkEditError(NSLinkEditErrors *c, int *errorNumber, const char **fileName, const char **errorString);
NSModule __cdecl NSLinkModule(NSObjectFileImage objectFileImage, const char *moduleName, uint32_t options);
NSSymbol __cdecl NSLookupAndBindSymbol(const char *symbolName);
NSSymbol __cdecl NSLookupAndBindSymbolWithHint(const char *symbolName, const char *libraryNameHint);
NSSymbol __cdecl NSLookupSymbolInImage(const struct mach_header *image, const char *symbolName, uint32_t options);
NSSymbol __cdecl NSLookupSymbolInModule(NSModule module, const char *symbolName);
NSModule __cdecl NSModuleForSymbol(NSSymbol symbol);
const char *__cdecl NSNameOfModule(NSModule m);
const char *__cdecl NSNameOfSymbol(NSSymbol symbol);
NSSearchPathEnumerationState __cdecl NSStartSearchPathEnumeration(NSSearchPathDirectory dir, NSSearchPathDomainMask domainMask);
uint32_t __cdecl NSSymbolDefinitionCountInObjectFileImage(NSObjectFileImage objectFileImage);
const char *__cdecl NSSymbolDefinitionNameInObjectFileImage(NSObjectFileImage objectFileImage, uint32_t ordinal);
uint32_t __cdecl NSSymbolReferenceCountInObjectFileImage(NSObjectFileImage objectFileImage);
const char *__cdecl NSSymbolReferenceNameInObjectFileImage(NSObjectFileImage objectFileImage, uint32_t ordinal, bool *tentative_definition);
bool __cdecl NSUnLinkModule(NSModule module, uint32_t options);
int32_t __cdecl NSVersionOfLinkTimeLibrary(const char *libraryName);
int32_t __cdecl NSVersionOfRunTimeLibrary(const char *libraryName);
cpu_subtype_t __cdecl NXCombineCpuSubtypes(cpu_type_t cputype, cpu_subtype_t cpusubtype1, cpu_subtype_t cpusubtype2);
static NXSwappedDouble __cdecl NXConvertHostDoubleToSwapped(double x);
static NXSwappedFloat __cdecl NXConvertHostFloatToSwapped(float x);
static double __cdecl NXConvertSwappedDoubleToHost(NXSwappedDouble x);
static float __cdecl NXConvertSwappedFloatToHost(NXSwappedFloat x);
struct fat_arch *__cdecl NXFindBestFatArch(cpu_type_t cputype, cpu_subtype_t cpusubtype, struct fat_arch *fat_archs, uint32_t nfat_archs);
const NXArchInfo *NXGetAllArchInfos(void);
const NXArchInfo *__cdecl NXGetArchInfoFromCpuType(cpu_type_t cputype, cpu_subtype_t cpusubtype);
const NXArchInfo *__cdecl NXGetArchInfoFromName(const char *name);
const NXArchInfo *NXGetLocalArchInfo(void);
static enum NXByteOrder NXHostByteOrder(void);
static double __cdecl NXSwapBigDoubleToHost(NXSwappedDouble x);
static float __cdecl NXSwapBigFloatToHost(NXSwappedFloat x);
static unsigned int __cdecl NXSwapBigIntToHost(unsigned int x);
static unsigned __int64 __cdecl NXSwapBigLongLongToHost(unsigned __int64 x);
static unsigned __int64 __cdecl NXSwapBigLongToHost(unsigned __int64 x);
static unsigned __int16 __cdecl NXSwapBigShortToHost(unsigned __int16 x);
static NXSwappedDouble __cdecl NXSwapDouble(NXSwappedDouble x);
static NXSwappedFloat __cdecl NXSwapFloat(NXSwappedFloat x);
static NXSwappedDouble __cdecl NXSwapHostDoubleToBig(double x);
static NXSwappedDouble __cdecl NXSwapHostDoubleToLittle(double x);
static NXSwappedFloat __cdecl NXSwapHostFloatToBig(float x);
static NXSwappedFloat __cdecl NXSwapHostFloatToLittle(float x);
static unsigned int __cdecl NXSwapHostIntToBig(unsigned int x);
static unsigned int __cdecl NXSwapHostIntToLittle(unsigned int x);
static unsigned __int64 __cdecl NXSwapHostLongLongToBig(unsigned __int64 x);
static unsigned __int64 __cdecl NXSwapHostLongLongToLittle(unsigned __int64 x);
static unsigned __int64 __cdecl NXSwapHostLongToBig(unsigned __int64 x);
static unsigned __int64 __cdecl NXSwapHostLongToLittle(unsigned __int64 x);
static unsigned __int16 __cdecl NXSwapHostShortToBig(unsigned __int16 x);
static unsigned __int16 __cdecl NXSwapHostShortToLittle(unsigned __int16 x);
static unsigned int __cdecl NXSwapInt(unsigned int inv);
static double __cdecl NXSwapLittleDoubleToHost(NXSwappedDouble x);
static float __cdecl NXSwapLittleFloatToHost(NXSwappedFloat x);
static unsigned int __cdecl NXSwapLittleIntToHost(unsigned int x);
static unsigned __int64 __cdecl NXSwapLittleLongLongToHost(unsigned __int64 x);
static unsigned __int64 __cdecl NXSwapLittleLongToHost(unsigned __int64 x);
static unsigned __int16 __cdecl NXSwapLittleShortToHost(unsigned __int16 x);
static unsigned __int64 __cdecl NXSwapLong(unsigned __int64 inv);
static unsigned __int64 __cdecl NXSwapLongLong(unsigned __int64 inv);
static unsigned __int16 __cdecl NXSwapShort(unsigned __int16 inv);
int __cdecl OBJ_NAME_add(const char *name, int type, const char *data);
void __cdecl OBJ_NAME_cleanup(int type);
void __cdecl OBJ_NAME_do_all(int type, void (__cdecl *fn)(const OBJ_NAME *, void *arg), void *arg);
void __cdecl OBJ_NAME_do_all_sorted(int type, void (__cdecl *fn)(const OBJ_NAME *, void *arg), void *arg);
const char *__cdecl OBJ_NAME_get(const char *name, int type);
int OBJ_NAME_init(void);
int __cdecl OBJ_NAME_new_index(unsigned __int64 (__cdecl *hash_func)(const char *), int (__cdecl *cmp_func)(const char *, const char *), void (__cdecl *free_func)(const char *, int, const char *));
int __cdecl OBJ_NAME_remove(const char *name, int type);
int __cdecl OBJ_add_object(const ASN1_OBJECT *obj);
const char *__cdecl OBJ_bsearch(const char *key, const char *base, int num, int size, int (__cdecl *cmp)(const void *, const void *));
const char *__cdecl OBJ_bsearch_ex(const char *key, const char *base, int num, int size, int (__cdecl *cmp)(const void *, const void *), int flags);
void OBJ_cleanup(void);
int __cdecl OBJ_cmp(const ASN1_OBJECT *a, const ASN1_OBJECT *b);
int __cdecl OBJ_create(const char *oid, const char *sn, const char *ln);
int __cdecl OBJ_create_objects(BIO *in);
ASN1_OBJECT *__cdecl OBJ_dup(const ASN1_OBJECT *o);
int __cdecl OBJ_ln2nid(const char *s);
int __cdecl OBJ_new_nid(int num);
const char *__cdecl OBJ_nid2ln(int n);
ASN1_OBJECT *__cdecl OBJ_nid2obj(int n);
const char *__cdecl OBJ_nid2sn(int n);
int __cdecl OBJ_obj2nid(const ASN1_OBJECT *o);
int __cdecl OBJ_obj2txt(char *buf, int buf_len, const ASN1_OBJECT *a, int no_name);
int __cdecl OBJ_sn2nid(const char *s);
int __cdecl OBJ_txt2nid(const char *s);
ASN1_OBJECT *__cdecl OBJ_txt2obj(const char *s, int no_name);
int __cdecl OCSP_BASICRESP_add1_ext_i2d(OCSP_BASICRESP *x, int nid, void *value, int crit, unsigned __int64 flags);
int __cdecl OCSP_BASICRESP_add_ext(OCSP_BASICRESP *x, X509_EXTENSION *ex, int loc);
X509_EXTENSION *__cdecl OCSP_BASICRESP_delete_ext(OCSP_BASICRESP *x, int loc);
void __cdecl OCSP_BASICRESP_free(OCSP_BASICRESP *a);
void *__cdecl OCSP_BASICRESP_get1_ext_d2i(OCSP_BASICRESP *x, int nid, int *crit, int *idx);
X509_EXTENSION *__cdecl OCSP_BASICRESP_get_ext(OCSP_BASICRESP *x, int loc);
int __cdecl OCSP_BASICRESP_get_ext_by_NID(OCSP_BASICRESP *x, int nid, int lastpos);
int __cdecl OCSP_BASICRESP_get_ext_by_OBJ(OCSP_BASICRESP *x, ASN1_OBJECT *obj, int lastpos);
int __cdecl OCSP_BASICRESP_get_ext_by_critical(OCSP_BASICRESP *x, int crit, int lastpos);
int __cdecl OCSP_BASICRESP_get_ext_count(OCSP_BASICRESP *x);
const ASN1_ITEM OCSP_BASICRESP_it;
OCSP_BASICRESP *OCSP_BASICRESP_new(void);
void __cdecl OCSP_CERTID_free(OCSP_CERTID *a);
const ASN1_ITEM OCSP_CERTID_it;
OCSP_CERTID *OCSP_CERTID_new(void);
void __cdecl OCSP_CERTSTATUS_free(OCSP_CERTSTATUS *a);
const ASN1_ITEM OCSP_CERTSTATUS_it;
OCSP_CERTSTATUS *OCSP_CERTSTATUS_new(void);
void __cdecl OCSP_CRLID_free(OCSP_CRLID *a);
const ASN1_ITEM OCSP_CRLID_it;
OCSP_CRLID *OCSP_CRLID_new(void);
int __cdecl OCSP_ONEREQ_add1_ext_i2d(OCSP_ONEREQ *x, int nid, void *value, int crit, unsigned __int64 flags);
int __cdecl OCSP_ONEREQ_add_ext(OCSP_ONEREQ *x, X509_EXTENSION *ex, int loc);
X509_EXTENSION *__cdecl OCSP_ONEREQ_delete_ext(OCSP_ONEREQ *x, int loc);
void __cdecl OCSP_ONEREQ_free(OCSP_ONEREQ *a);
void *__cdecl OCSP_ONEREQ_get1_ext_d2i(OCSP_ONEREQ *x, int nid, int *crit, int *idx);
X509_EXTENSION *__cdecl OCSP_ONEREQ_get_ext(OCSP_ONEREQ *x, int loc);
int __cdecl OCSP_ONEREQ_get_ext_by_NID(OCSP_ONEREQ *x, int nid, int lastpos);
int __cdecl OCSP_ONEREQ_get_ext_by_OBJ(OCSP_ONEREQ *x, ASN1_OBJECT *obj, int lastpos);
int __cdecl OCSP_ONEREQ_get_ext_by_critical(OCSP_ONEREQ *x, int crit, int lastpos);
int __cdecl OCSP_ONEREQ_get_ext_count(OCSP_ONEREQ *x);
const ASN1_ITEM OCSP_ONEREQ_it;
OCSP_ONEREQ *OCSP_ONEREQ_new(void);
void __cdecl OCSP_REQINFO_free(OCSP_REQINFO *a);
const ASN1_ITEM OCSP_REQINFO_it;
OCSP_REQINFO *OCSP_REQINFO_new(void);
int __cdecl OCSP_REQUEST_add1_ext_i2d(OCSP_REQUEST *x, int nid, void *value, int crit, unsigned __int64 flags);
int __cdecl OCSP_REQUEST_add_ext(OCSP_REQUEST *x, X509_EXTENSION *ex, int loc);
X509_EXTENSION *__cdecl OCSP_REQUEST_delete_ext(OCSP_REQUEST *x, int loc);
void __cdecl OCSP_REQUEST_free(OCSP_REQUEST *a);
void *__cdecl OCSP_REQUEST_get1_ext_d2i(OCSP_REQUEST *x, int nid, int *crit, int *idx);
X509_EXTENSION *__cdecl OCSP_REQUEST_get_ext(OCSP_REQUEST *x, int loc);
int __cdecl OCSP_REQUEST_get_ext_by_NID(OCSP_REQUEST *x, int nid, int lastpos);
int __cdecl OCSP_REQUEST_get_ext_by_OBJ(OCSP_REQUEST *x, ASN1_OBJECT *obj, int lastpos);
int __cdecl OCSP_REQUEST_get_ext_by_critical(OCSP_REQUEST *x, int crit, int lastpos);
int __cdecl OCSP_REQUEST_get_ext_count(OCSP_REQUEST *x);
const ASN1_ITEM OCSP_REQUEST_it;
OCSP_REQUEST *OCSP_REQUEST_new(void);
int __cdecl OCSP_REQUEST_print(BIO *bp, OCSP_REQUEST *a, unsigned __int64 flags);
void __cdecl OCSP_REQ_CTX_free(OCSP_REQ_CTX *rctx);
void __cdecl OCSP_RESPBYTES_free(OCSP_RESPBYTES *a);
const ASN1_ITEM OCSP_RESPBYTES_it;
OCSP_RESPBYTES *OCSP_RESPBYTES_new(void);
void __cdecl OCSP_RESPDATA_free(OCSP_RESPDATA *a);
const ASN1_ITEM OCSP_RESPDATA_it;
OCSP_RESPDATA *OCSP_RESPDATA_new(void);
void __cdecl OCSP_RESPID_free(OCSP_RESPID *a);
const ASN1_ITEM OCSP_RESPID_it;
OCSP_RESPID *OCSP_RESPID_new(void);
void __cdecl OCSP_RESPONSE_free(OCSP_RESPONSE *a);
const ASN1_ITEM OCSP_RESPONSE_it;
OCSP_RESPONSE *OCSP_RESPONSE_new(void);
int __cdecl OCSP_RESPONSE_print(BIO *bp, OCSP_RESPONSE *o, unsigned __int64 flags);
void __cdecl OCSP_REVOKEDINFO_free(OCSP_REVOKEDINFO *a);
const ASN1_ITEM OCSP_REVOKEDINFO_it;
OCSP_REVOKEDINFO *OCSP_REVOKEDINFO_new(void);
void __cdecl OCSP_SERVICELOC_free(OCSP_SERVICELOC *a);
const ASN1_ITEM OCSP_SERVICELOC_it;
OCSP_SERVICELOC *OCSP_SERVICELOC_new(void);
void __cdecl OCSP_SIGNATURE_free(OCSP_SIGNATURE *a);
const ASN1_ITEM OCSP_SIGNATURE_it;
OCSP_SIGNATURE *OCSP_SIGNATURE_new(void);
int __cdecl OCSP_SINGLERESP_add1_ext_i2d(OCSP_SINGLERESP *x, int nid, void *value, int crit, unsigned __int64 flags);
int __cdecl OCSP_SINGLERESP_add_ext(OCSP_SINGLERESP *x, X509_EXTENSION *ex, int loc);
X509_EXTENSION *__cdecl OCSP_SINGLERESP_delete_ext(OCSP_SINGLERESP *x, int loc);
void __cdecl OCSP_SINGLERESP_free(OCSP_SINGLERESP *a);
void *__cdecl OCSP_SINGLERESP_get1_ext_d2i(OCSP_SINGLERESP *x, int nid, int *crit, int *idx);
X509_EXTENSION *__cdecl OCSP_SINGLERESP_get_ext(OCSP_SINGLERESP *x, int loc);
int __cdecl OCSP_SINGLERESP_get_ext_by_NID(OCSP_SINGLERESP *x, int nid, int lastpos);
int __cdecl OCSP_SINGLERESP_get_ext_by_OBJ(OCSP_SINGLERESP *x, ASN1_OBJECT *obj, int lastpos);
int __cdecl OCSP_SINGLERESP_get_ext_by_critical(OCSP_SINGLERESP *x, int crit, int lastpos);
int __cdecl OCSP_SINGLERESP_get_ext_count(OCSP_SINGLERESP *x);
const ASN1_ITEM OCSP_SINGLERESP_it;
OCSP_SINGLERESP *OCSP_SINGLERESP_new(void);
X509_EXTENSION *__cdecl OCSP_accept_responses_new(char **oids);
X509_EXTENSION *__cdecl OCSP_archive_cutoff_new(char *tim);
int __cdecl OCSP_basic_add1_cert(OCSP_BASICRESP *resp, X509 *cert);
int __cdecl OCSP_basic_add1_nonce(OCSP_BASICRESP *resp, unsigned __int8 *val, int len);
OCSP_SINGLERESP *__cdecl OCSP_basic_add1_status(OCSP_BASICRESP *rsp, OCSP_CERTID *cid, int status, int reason, ASN1_TIME *revtime, ASN1_TIME *thisupd, ASN1_TIME *nextupd);
int __cdecl OCSP_basic_sign(OCSP_BASICRESP *brsp, X509 *signer, EVP_PKEY *key, const EVP_MD *dgst, STACK *certs, unsigned __int64 flags);
int __cdecl OCSP_basic_verify(OCSP_BASICRESP *bs, STACK *certs, X509_STORE *st, unsigned __int64 flags);
OCSP_CERTID *__cdecl OCSP_cert_id_new(const EVP_MD *dgst, X509_NAME *issuerName, ASN1_BIT_STRING *issuerKey, ASN1_INTEGER *serialNumber);
char *__cdecl OCSP_cert_status_str(__int64 s);
OCSP_CERTID *__cdecl OCSP_cert_to_id(const EVP_MD *dgst, X509 *subject, X509 *issuer);
int __cdecl OCSP_check_nonce(OCSP_REQUEST *req, OCSP_BASICRESP *bs);
int __cdecl OCSP_check_validity(ASN1_GENERALIZEDTIME *thisupd, ASN1_GENERALIZEDTIME *nextupd, __int64 sec, __int64 maxsec);
int __cdecl OCSP_copy_nonce(OCSP_BASICRESP *resp, OCSP_REQUEST *req);
X509_EXTENSION *__cdecl OCSP_crlID_new(char *url, __int64 *n, char *tim);
char *__cdecl OCSP_crl_reason_str(__int64 s);
int __cdecl OCSP_id_cmp(OCSP_CERTID *a, OCSP_CERTID *b);
int __cdecl OCSP_id_get0_info(ASN1_OCTET_STRING **piNameHash, ASN1_OBJECT **pmd, ASN1_OCTET_STRING **pikeyHash, ASN1_INTEGER **pserial, OCSP_CERTID *cid);
int __cdecl OCSP_id_issuer_cmp(OCSP_CERTID *a, OCSP_CERTID *b);
OCSP_CERTID *__cdecl OCSP_onereq_get0_id(OCSP_ONEREQ *one);
int __cdecl OCSP_parse_url(char *url, char **phost, char **pport, char **ppath, int *pssl);
OCSP_ONEREQ *__cdecl OCSP_request_add0_id(OCSP_REQUEST *req, OCSP_CERTID *cid);
int __cdecl OCSP_request_add1_cert(OCSP_REQUEST *req, X509 *cert);
int __cdecl OCSP_request_add1_nonce(OCSP_REQUEST *req, unsigned __int8 *val, int len);
int __cdecl OCSP_request_is_signed(OCSP_REQUEST *req);
int __cdecl OCSP_request_onereq_count(OCSP_REQUEST *req);
OCSP_ONEREQ *__cdecl OCSP_request_onereq_get0(OCSP_REQUEST *req, int i);
int __cdecl OCSP_request_set1_name(OCSP_REQUEST *req, X509_NAME *nm);
int __cdecl OCSP_request_sign(OCSP_REQUEST *req, X509 *signer, EVP_PKEY *key, const EVP_MD *dgst, STACK *certs, unsigned __int64 flags);
int __cdecl OCSP_request_verify(OCSP_REQUEST *req, STACK *certs, X509_STORE *store, unsigned __int64 flags);
int __cdecl OCSP_resp_count(OCSP_BASICRESP *bs);
int __cdecl OCSP_resp_find(OCSP_BASICRESP *bs, OCSP_CERTID *id, int last);
int __cdecl OCSP_resp_find_status(OCSP_BASICRESP *bs, OCSP_CERTID *id, int *status, int *reason, ASN1_GENERALIZEDTIME **revtime, ASN1_GENERALIZEDTIME **thisupd, ASN1_GENERALIZEDTIME **nextupd);
OCSP_SINGLERESP *__cdecl OCSP_resp_get0(OCSP_BASICRESP *bs, int idx);
OCSP_RESPONSE *__cdecl OCSP_response_create(int status, OCSP_BASICRESP *bs);
OCSP_BASICRESP *__cdecl OCSP_response_get1_basic(OCSP_RESPONSE *resp);
int __cdecl OCSP_response_status(OCSP_RESPONSE *resp);
char *__cdecl OCSP_response_status_str(__int64 s);
OCSP_RESPONSE *__cdecl OCSP_sendreq_bio(BIO *b, char *path, OCSP_REQUEST *req);
int __cdecl OCSP_sendreq_nbio(OCSP_RESPONSE **presp, OCSP_REQ_CTX *rctx);
OCSP_REQ_CTX *__cdecl OCSP_sendreq_new(BIO *io, char *path, OCSP_REQUEST *req, int maxline);
int __cdecl OCSP_single_get0_status(OCSP_SINGLERESP *single, int *reason, ASN1_GENERALIZEDTIME **revtime, ASN1_GENERALIZEDTIME **thisupd, ASN1_GENERALIZEDTIME **nextupd);
X509_EXTENSION *__cdecl OCSP_url_svcloc_new(X509_NAME *issuer, char **urls);
void OPENSSL_add_all_algorithms_conf(void);
void OPENSSL_add_all_algorithms_noconf(void);
void __cdecl OPENSSL_cleanse(void *ptr, size_t len);
void __cdecl OPENSSL_config(const char *config_name);
unsigned __int64 *OPENSSL_ia32cap_loc(void);
void OPENSSL_init(void);
int OPENSSL_isservice(void);
int OPENSSL_issetugid(void);
void OPENSSL_load_builtin_modules(void);
void OPENSSL_no_config(void);
int32_t __cdecl OSAtomicAdd32(int32_t theAmount, volatile int32_t *theValue);
int32_t __cdecl OSAtomicAdd32Barrier(int32_t theAmount, volatile int32_t *theValue);
int64_t __cdecl OSAtomicAdd64(int64_t theAmount, volatile int64_t *theValue);
int64_t __cdecl OSAtomicAdd64Barrier(int64_t theAmount, volatile int64_t *theValue);
int32_t __cdecl OSAtomicAnd32(uint32_t theMask, volatile uint32_t *theValue);
int32_t __cdecl OSAtomicAnd32Barrier(uint32_t theMask, volatile uint32_t *theValue);
int32_t __cdecl OSAtomicAnd32Orig(uint32_t theMask, volatile uint32_t *theValue);
int32_t __cdecl OSAtomicAnd32OrigBarrier(uint32_t theMask, volatile uint32_t *theValue);
bool __cdecl OSAtomicCompareAndSwap32(int32_t oldValue, int32_t newValue, volatile int32_t *theValue);
bool __cdecl OSAtomicCompareAndSwap32Barrier(int32_t oldValue, int32_t newValue, volatile int32_t *theValue);
bool __cdecl OSAtomicCompareAndSwap64(int64_t oldValue, int64_t newValue, volatile int64_t *theValue);
bool __cdecl OSAtomicCompareAndSwap64Barrier(int64_t oldValue, int64_t newValue, volatile int64_t *theValue);
bool __cdecl OSAtomicCompareAndSwapInt(int oldValue, int newValue, volatile int *theValue);
bool __cdecl OSAtomicCompareAndSwapIntBarrier(int oldValue, int newValue, volatile int *theValue);
bool __cdecl OSAtomicCompareAndSwapLong(__int64 oldValue, __int64 newValue, volatile __int64 *theValue);
bool __cdecl OSAtomicCompareAndSwapLongBarrier(__int64 oldValue, __int64 newValue, volatile __int64 *theValue);
bool __cdecl OSAtomicCompareAndSwapPtr(void *oldValue, void *newValue, void *volatile *theValue);
bool __cdecl OSAtomicCompareAndSwapPtrBarrier(void *oldValue, void *newValue, void *volatile *theValue);
static int32_t __cdecl OSAtomicDecrement32(volatile int32_t *theValue);
static int32_t __cdecl OSAtomicDecrement32Barrier(volatile int32_t *theValue);
static int64_t __cdecl OSAtomicDecrement64(volatile int64_t *theValue);
static int64_t __cdecl OSAtomicDecrement64Barrier(volatile int64_t *theValue);
void *__cdecl OSAtomicDequeue(OSQueueHead *list, size_t offset);
void __cdecl OSAtomicEnqueue(OSQueueHead *list, void *new, size_t offset);
void *__cdecl OSAtomicFifoDequeue(OSFifoQueueHead *list, size_t offset);
void __cdecl OSAtomicFifoEnqueue(OSFifoQueueHead *list, void *new, size_t offset);
static int32_t __cdecl OSAtomicIncrement32(volatile int32_t *theValue);
static int32_t __cdecl OSAtomicIncrement32Barrier(volatile int32_t *theValue);
static int64_t __cdecl OSAtomicIncrement64(volatile int64_t *theValue);
static int64_t __cdecl OSAtomicIncrement64Barrier(volatile int64_t *theValue);
int32_t __cdecl OSAtomicOr32(uint32_t theMask, volatile uint32_t *theValue);
int32_t __cdecl OSAtomicOr32Barrier(uint32_t theMask, volatile uint32_t *theValue);
int32_t __cdecl OSAtomicOr32Orig(uint32_t theMask, volatile uint32_t *theValue);
int32_t __cdecl OSAtomicOr32OrigBarrier(uint32_t theMask, volatile uint32_t *theValue);
bool __cdecl OSAtomicTestAndClear(uint32_t n, volatile void *theAddress);
bool __cdecl OSAtomicTestAndClearBarrier(uint32_t n, volatile void *theAddress);
bool __cdecl OSAtomicTestAndSet(uint32_t n, volatile void *theAddress);
bool __cdecl OSAtomicTestAndSetBarrier(uint32_t n, volatile void *theAddress);
int32_t __cdecl OSAtomicXor32(uint32_t theMask, volatile uint32_t *theValue);
int32_t __cdecl OSAtomicXor32Barrier(uint32_t theMask, volatile uint32_t *theValue);
int32_t __cdecl OSAtomicXor32Orig(uint32_t theMask, volatile uint32_t *theValue);
int32_t __cdecl OSAtomicXor32OrigBarrier(uint32_t theMask, volatile uint32_t *theValue);
unsigned int __cdecl OSBacktrace(void **bt, unsigned int maxAddrs);
static int32_t OSHostByteOrder(void);
vm_offset_t OSKernelStackRemaining(void);
void OSMemoryBarrier(void);
void OSPrintBacktrace(void);
static uint16_t __cdecl OSReadSwapInt16(const volatile void *base, uintptr_t byteOffset);
static uint32_t __cdecl OSReadSwapInt32(const volatile void *base, uintptr_t byteOffset);
static uint64_t __cdecl OSReadSwapInt64(const volatile void *base, uintptr_t byteOffset);
void OSReportWithBacktrace(const char *str, ...);
void __cdecl OSSpinLockLock(volatile OSSpinLock *lock);
bool __cdecl OSSpinLockTry(volatile OSSpinLock *lock);
void __cdecl OSSpinLockUnlock(volatile OSSpinLock *lock);
static void __cdecl OSWriteSwapInt16(volatile void *base, uintptr_t byteOffset, uint16_t data);
static void __cdecl OSWriteSwapInt32(volatile void *base, uintptr_t byteOffset, uint32_t data);
static void __cdecl OSWriteSwapInt64(volatile void *base, uintptr_t byteOffset, uint64_t data);
void __cdecl OTHERNAME_free(OTHERNAME *a);
const ASN1_ITEM OTHERNAME_it;
OTHERNAME *OTHERNAME_new(void);
void __cdecl OpenSSLDie(const char *file, int line, const char *assertion);
void OpenSSL_add_all_ciphers(void);
void OpenSSL_add_all_digests(void);
int __cdecl PAIR_NUMBER(int);
MACRO__PASSWORD _PASSWORD_CHGNOW;
MACRO__PASSWORD _PASSWORD_EFMT1;
MACRO__PASSWORD _PASSWORD_LEN;
MACRO__PASSWORD _PASSWORD_NOCHG;
MACRO__PASSWORD _PASSWORD_NOEXP;
MACRO__PASSWORD _PASSWORD_NOGID;
MACRO__PASSWORD _PASSWORD_NOUID;
MACRO__PASSWORD _PASSWORD_WARNDAYS;
void __cdecl PBE2PARAM_free(PBE2PARAM *a);
const ASN1_ITEM PBE2PARAM_it;
PBE2PARAM *PBE2PARAM_new(void);
void __cdecl PBEPARAM_free(PBEPARAM *a);
const ASN1_ITEM PBEPARAM_it;
PBEPARAM *PBEPARAM_new(void);
void __cdecl PBKDF2PARAM_free(PBKDF2PARAM *a);
const ASN1_ITEM PBKDF2PARAM_it;
PBKDF2PARAM *PBKDF2PARAM_new(void);
char PC;
MACRO__PC _PC_2_SYMLINKS;
MACRO__PC _PC_ALLOC_SIZE_MIN;
MACRO__PC _PC_ASYNC_IO;
MACRO__PC _PC_AUTH_OPAQUE_NP;
MACRO__PC _PC_CASE_PRESERVING;
MACRO__PC _PC_CASE_SENSITIVE;
MACRO__PC _PC_CHOWN_RESTRICTED;
MACRO__PC _PC_EXTENDED_SECURITY_NP;
MACRO__PC _PC_FILESIZEBITS;
MACRO__PC _PC_LINK_MAX;
MACRO__PC _PC_MAX_CANON;
MACRO__PC _PC_MAX_INPUT;
MACRO__PC _PC_NAME_CHARS_MAX;
MACRO__PC _PC_NAME_MAX;
MACRO__PC _PC_NO_TRUNC;
MACRO__PC _PC_PATH_MAX;
MACRO__PC _PC_PIPE_BUF;
MACRO__PC _PC_PRIO_IO;
MACRO__PC _PC_REC_INCR_XFER_SIZE;
MACRO__PC _PC_REC_MAX_XFER_SIZE;
MACRO__PC _PC_REC_MIN_XFER_SIZE;
MACRO__PC _PC_REC_XFER_ALIGN;
MACRO__PC _PC_SYMLINK_MAX;
MACRO__PC _PC_SYNC_IO;
MACRO__PC _PC_VDISABLE;
MACRO__PC _PC_XATTR_SIZE_BITS;
void *__cdecl PEM_ASN1_read(d2i_of_void *d2i, const char *name, FILE *fp, void **x, pem_password_cb *cb, void *u);
void *__cdecl PEM_ASN1_read_bio(d2i_of_void *d2i, const char *name, BIO *bp, void **x, pem_password_cb *cb, void *u);
int __cdecl PEM_ASN1_write(i2d_of_void *i2d, const char *name, FILE *fp, char *x, const EVP_CIPHER *enc, unsigned __int8 *kstr, int klen, pem_password_cb *callback, void *u);
int __cdecl PEM_ASN1_write_bio(i2d_of_void *i2d, const char *name, BIO *bp, char *x, const EVP_CIPHER *enc, unsigned __int8 *kstr, int klen, pem_password_cb *cb, void *u);
int __cdecl PEM_SealFinal(PEM_ENCODE_SEAL_CTX *ctx, unsigned __int8 *sig, int *sigl, unsigned __int8 *out, int *outl, EVP_PKEY *priv);
int __cdecl PEM_SealInit(PEM_ENCODE_SEAL_CTX *ctx, EVP_CIPHER *type, EVP_MD *md_type, unsigned __int8 **ek, int *ekl, unsigned __int8 *iv, EVP_PKEY **pubk, int npubk);
void __cdecl PEM_SealUpdate(PEM_ENCODE_SEAL_CTX *ctx, unsigned __int8 *out, int *outl, unsigned __int8 *in, int inl);
int __cdecl PEM_SignFinal(EVP_MD_CTX *ctx, unsigned __int8 *sigret, unsigned int *siglen, EVP_PKEY *pkey);
void __cdecl PEM_SignInit(EVP_MD_CTX *ctx, EVP_MD *type);
void __cdecl PEM_SignUpdate(EVP_MD_CTX *ctx, unsigned __int8 *d, unsigned int cnt);
STACK *__cdecl PEM_X509_INFO_read(FILE *fp, STACK *sk, pem_password_cb *cb, void *u);
STACK *__cdecl PEM_X509_INFO_read_bio(BIO *bp, STACK *sk, pem_password_cb *cb, void *u);
int __cdecl PEM_X509_INFO_write_bio(BIO *bp, X509_INFO *xi, EVP_CIPHER *enc, unsigned __int8 *kstr, int klen, pem_password_cb *cd, void *u);
int __cdecl PEM_bytes_read_bio(unsigned __int8 **pdata, __int64 *plen, char **pnm, const char *name, BIO *bp, pem_password_cb *cb, void *u);
int __cdecl PEM_def_callback(char *buf, int num, int w, void *key);
void __cdecl PEM_dek_info(char *buf, const char *type, int len, char *str);
int __cdecl PEM_do_header(EVP_CIPHER_INFO *cipher, unsigned __int8 *data, __int64 *len, pem_password_cb *callback, void *u);
int __cdecl PEM_get_EVP_CIPHER_INFO(char *header, EVP_CIPHER_INFO *cipher);
void __cdecl PEM_proc_type(char *buf, int type);
int __cdecl PEM_read(FILE *fp, char **name, char **header, unsigned __int8 **data, __int64 *len);
DH *__cdecl PEM_read_DHparams(FILE *fp, DH **x, pem_password_cb *cb, void *u);
DSA *__cdecl PEM_read_DSAPrivateKey(FILE *fp, DSA **x, pem_password_cb *cb, void *u);
DSA *__cdecl PEM_read_DSA_PUBKEY(FILE *fp, DSA **x, pem_password_cb *cb, void *u);
DSA *__cdecl PEM_read_DSAparams(FILE *fp, DSA **x, pem_password_cb *cb, void *u);
EC_GROUP *__cdecl PEM_read_ECPKParameters(FILE *fp, EC_GROUP **x, pem_password_cb *cb, void *u);
EC_KEY *__cdecl PEM_read_ECPrivateKey(FILE *fp, EC_KEY **x, pem_password_cb *cb, void *u);
EC_KEY *__cdecl PEM_read_EC_PUBKEY(FILE *fp, EC_KEY **x, pem_password_cb *cb, void *u);
NETSCAPE_CERT_SEQUENCE *__cdecl PEM_read_NETSCAPE_CERT_SEQUENCE(FILE *fp, NETSCAPE_CERT_SEQUENCE **x, pem_password_cb *cb, void *u);
PKCS7 *__cdecl PEM_read_PKCS7(FILE *fp, PKCS7 **x, pem_password_cb *cb, void *u);
X509_SIG *__cdecl PEM_read_PKCS8(FILE *fp, X509_SIG **x, pem_password_cb *cb, void *u);
PKCS8_PRIV_KEY_INFO *__cdecl PEM_read_PKCS8_PRIV_KEY_INFO(FILE *fp, PKCS8_PRIV_KEY_INFO **x, pem_password_cb *cb, void *u);
EVP_PKEY *__cdecl PEM_read_PUBKEY(FILE *fp, EVP_PKEY **x, pem_password_cb *cb, void *u);
EVP_PKEY *__cdecl PEM_read_PrivateKey(FILE *fp, EVP_PKEY **x, pem_password_cb *cb, void *u);
RSA *__cdecl PEM_read_RSAPrivateKey(FILE *fp, RSA **x, pem_password_cb *cb, void *u);
RSA *__cdecl PEM_read_RSAPublicKey(FILE *fp, RSA **x, pem_password_cb *cb, void *u);
RSA *__cdecl PEM_read_RSA_PUBKEY(FILE *fp, RSA **x, pem_password_cb *cb, void *u);
X509 *__cdecl PEM_read_X509(FILE *fp, X509 **x, pem_password_cb *cb, void *u);
X509 *__cdecl PEM_read_X509_AUX(FILE *fp, X509 **x, pem_password_cb *cb, void *u);
X509_CERT_PAIR *__cdecl PEM_read_X509_CERT_PAIR(FILE *fp, X509_CERT_PAIR **x, pem_password_cb *cb, void *u);
X509_CRL *__cdecl PEM_read_X509_CRL(FILE *fp, X509_CRL **x, pem_password_cb *cb, void *u);
X509_REQ *__cdecl PEM_read_X509_REQ(FILE *fp, X509_REQ **x, pem_password_cb *cb, void *u);
int __cdecl PEM_read_bio(BIO *bp, char **name, char **header, unsigned __int8 **data, __int64 *len);
DH *__cdecl PEM_read_bio_DHparams(BIO *bp, DH **x, pem_password_cb *cb, void *u);
DSA *__cdecl PEM_read_bio_DSAPrivateKey(BIO *bp, DSA **x, pem_password_cb *cb, void *u);
DSA *__cdecl PEM_read_bio_DSA_PUBKEY(BIO *bp, DSA **x, pem_password_cb *cb, void *u);
DSA *__cdecl PEM_read_bio_DSAparams(BIO *bp, DSA **x, pem_password_cb *cb, void *u);
EC_GROUP *__cdecl PEM_read_bio_ECPKParameters(BIO *bp, EC_GROUP **x, pem_password_cb *cb, void *u);
EC_KEY *__cdecl PEM_read_bio_ECPrivateKey(BIO *bp, EC_KEY **x, pem_password_cb *cb, void *u);
EC_KEY *__cdecl PEM_read_bio_EC_PUBKEY(BIO *bp, EC_KEY **x, pem_password_cb *cb, void *u);
NETSCAPE_CERT_SEQUENCE *__cdecl PEM_read_bio_NETSCAPE_CERT_SEQUENCE(BIO *bp, NETSCAPE_CERT_SEQUENCE **x, pem_password_cb *cb, void *u);
PKCS7 *__cdecl PEM_read_bio_PKCS7(BIO *bp, PKCS7 **x, pem_password_cb *cb, void *u);
X509_SIG *__cdecl PEM_read_bio_PKCS8(BIO *bp, X509_SIG **x, pem_password_cb *cb, void *u);
PKCS8_PRIV_KEY_INFO *__cdecl PEM_read_bio_PKCS8_PRIV_KEY_INFO(BIO *bp, PKCS8_PRIV_KEY_INFO **x, pem_password_cb *cb, void *u);
EVP_PKEY *__cdecl PEM_read_bio_PUBKEY(BIO *bp, EVP_PKEY **x, pem_password_cb *cb, void *u);
EVP_PKEY *__cdecl PEM_read_bio_PrivateKey(BIO *bp, EVP_PKEY **x, pem_password_cb *cb, void *u);
RSA *__cdecl PEM_read_bio_RSAPrivateKey(BIO *bp, RSA **x, pem_password_cb *cb, void *u);
RSA *__cdecl PEM_read_bio_RSAPublicKey(BIO *bp, RSA **x, pem_password_cb *cb, void *u);
RSA *__cdecl PEM_read_bio_RSA_PUBKEY(BIO *bp, RSA **x, pem_password_cb *cb, void *u);
X509 *__cdecl PEM_read_bio_X509(BIO *bp, X509 **x, pem_password_cb *cb, void *u);
X509 *__cdecl PEM_read_bio_X509_AUX(BIO *bp, X509 **x, pem_password_cb *cb, void *u);
X509_CERT_PAIR *__cdecl PEM_read_bio_X509_CERT_PAIR(BIO *bp, X509_CERT_PAIR **x, pem_password_cb *cb, void *u);
X509_CRL *__cdecl PEM_read_bio_X509_CRL(BIO *bp, X509_CRL **x, pem_password_cb *cb, void *u);
X509_REQ *__cdecl PEM_read_bio_X509_REQ(BIO *bp, X509_REQ **x, pem_password_cb *cb, void *u);
int __cdecl PEM_write(FILE *fp, char *name, char *hdr, unsigned __int8 *data, __int64 len);
int __cdecl PEM_write_DHparams(FILE *fp, const DH *x);
int __cdecl PEM_write_DSAPrivateKey(FILE *fp, DSA *x, const EVP_CIPHER *enc, unsigned __int8 *kstr, int klen, pem_password_cb *cb, void *u);
int __cdecl PEM_write_DSA_PUBKEY(FILE *fp, DSA *x);
int __cdecl PEM_write_DSAparams(FILE *fp, const DSA *x);
int __cdecl PEM_write_ECPKParameters(FILE *fp, const EC_GROUP *x);
int __cdecl PEM_write_ECPrivateKey(FILE *fp, EC_KEY *x, const EVP_CIPHER *enc, unsigned __int8 *kstr, int klen, pem_password_cb *cb, void *u);
int __cdecl PEM_write_EC_PUBKEY(FILE *fp, EC_KEY *x);
int __cdecl PEM_write_NETSCAPE_CERT_SEQUENCE(FILE *fp, NETSCAPE_CERT_SEQUENCE *x);
int __cdecl PEM_write_PKCS7(FILE *fp, PKCS7 *x);
int __cdecl PEM_write_PKCS8(FILE *fp, X509_SIG *x);
int __cdecl PEM_write_PKCS8PrivateKey(FILE *fp, EVP_PKEY *x, const EVP_CIPHER *enc, char *kstr, int klen, pem_password_cb *cd, void *u);
int __cdecl PEM_write_PKCS8PrivateKey_nid(FILE *fp, EVP_PKEY *x, int nid, char *kstr, int klen, pem_password_cb *cb, void *u);
int __cdecl PEM_write_PKCS8_PRIV_KEY_INFO(FILE *fp, PKCS8_PRIV_KEY_INFO *x);
int __cdecl PEM_write_PUBKEY(FILE *fp, EVP_PKEY *x);
int __cdecl PEM_write_PrivateKey(FILE *fp, EVP_PKEY *x, const EVP_CIPHER *enc, unsigned __int8 *kstr, int klen, pem_password_cb *cb, void *u);
int __cdecl PEM_write_RSAPrivateKey(FILE *fp, RSA *x, const EVP_CIPHER *enc, unsigned __int8 *kstr, int klen, pem_password_cb *cb, void *u);
int __cdecl PEM_write_RSAPublicKey(FILE *fp, const RSA *x);
int __cdecl PEM_write_RSA_PUBKEY(FILE *fp, RSA *x);
int __cdecl PEM_write_X509(FILE *fp, X509 *x);
int __cdecl PEM_write_X509_AUX(FILE *fp, X509 *x);
int __cdecl PEM_write_X509_CERT_PAIR(FILE *fp, X509_CERT_PAIR *x);
int __cdecl PEM_write_X509_CRL(FILE *fp, X509_CRL *x);
int __cdecl PEM_write_X509_REQ(FILE *fp, X509_REQ *x);
int __cdecl PEM_write_X509_REQ_NEW(FILE *fp, X509_REQ *x);
int __cdecl PEM_write_bio(BIO *bp, const char *name, char *hdr, unsigned __int8 *data, __int64 len);
int __cdecl PEM_write_bio_DHparams(BIO *bp, const DH *x);
int __cdecl PEM_write_bio_DSAPrivateKey(BIO *bp, DSA *x, const EVP_CIPHER *enc, unsigned __int8 *kstr, int klen, pem_password_cb *cb, void *u);
int __cdecl PEM_write_bio_DSA_PUBKEY(BIO *bp, DSA *x);
int __cdecl PEM_write_bio_DSAparams(BIO *bp, const DSA *x);
int __cdecl PEM_write_bio_ECPKParameters(BIO *bp, const EC_GROUP *x);
int __cdecl PEM_write_bio_ECPrivateKey(BIO *bp, EC_KEY *x, const EVP_CIPHER *enc, unsigned __int8 *kstr, int klen, pem_password_cb *cb, void *u);
int __cdecl PEM_write_bio_EC_PUBKEY(BIO *bp, EC_KEY *x);
int __cdecl PEM_write_bio_NETSCAPE_CERT_SEQUENCE(BIO *bp, NETSCAPE_CERT_SEQUENCE *x);
int __cdecl PEM_write_bio_PKCS7(BIO *bp, PKCS7 *x);
int __cdecl PEM_write_bio_PKCS8(BIO *bp, X509_SIG *x);
int __cdecl PEM_write_bio_PKCS8PrivateKey(BIO *, EVP_PKEY *, const EVP_CIPHER *, char *, int, pem_password_cb *, void *);
int __cdecl PEM_write_bio_PKCS8PrivateKey_nid(BIO *bp, EVP_PKEY *x, int nid, char *kstr, int klen, pem_password_cb *cb, void *u);
int __cdecl PEM_write_bio_PKCS8_PRIV_KEY_INFO(BIO *bp, PKCS8_PRIV_KEY_INFO *x);
int __cdecl PEM_write_bio_PUBKEY(BIO *bp, EVP_PKEY *x);
int __cdecl PEM_write_bio_PrivateKey(BIO *bp, EVP_PKEY *x, const EVP_CIPHER *enc, unsigned __int8 *kstr, int klen, pem_password_cb *cb, void *u);
int __cdecl PEM_write_bio_RSAPrivateKey(BIO *bp, RSA *x, const EVP_CIPHER *enc, unsigned __int8 *kstr, int klen, pem_password_cb *cb, void *u);
int __cdecl PEM_write_bio_RSAPublicKey(BIO *bp, const RSA *x);
int __cdecl PEM_write_bio_RSA_PUBKEY(BIO *bp, RSA *x);
int __cdecl PEM_write_bio_X509(BIO *bp, X509 *x);
int __cdecl PEM_write_bio_X509_AUX(BIO *bp, X509 *x);
int __cdecl PEM_write_bio_X509_CERT_PAIR(BIO *bp, X509_CERT_PAIR *x);
int __cdecl PEM_write_bio_X509_CRL(BIO *bp, X509_CRL *x);
int __cdecl PEM_write_bio_X509_REQ(BIO *bp, X509_REQ *x);
int __cdecl PEM_write_bio_X509_REQ_NEW(BIO *bp, X509_REQ *x);
const ASN1_ITEM PKCS12_AUTHSAFES_it;
void __cdecl PKCS12_BAGS_free(PKCS12_BAGS *a);
const ASN1_ITEM PKCS12_BAGS_it;
PKCS12_BAGS *PKCS12_BAGS_new(void);
void __cdecl PKCS12_MAC_DATA_free(PKCS12_MAC_DATA *a);
const ASN1_ITEM PKCS12_MAC_DATA_it;
PKCS12_MAC_DATA *PKCS12_MAC_DATA_new(void);
PKCS12_SAFEBAG *__cdecl PKCS12_MAKE_KEYBAG(PKCS8_PRIV_KEY_INFO *p8);
PKCS12_SAFEBAG *__cdecl PKCS12_MAKE_SHKEYBAG(int pbe_nid, const char *pass, int passlen, unsigned __int8 *salt, int saltlen, int iter, PKCS8_PRIV_KEY_INFO *p8);
void PKCS12_PBE_add(void);
int __cdecl PKCS12_PBE_keyivgen(EVP_CIPHER_CTX *ctx, const char *pass, int passlen, ASN1_TYPE *param, const EVP_CIPHER *cipher, const EVP_MD *md_type, int en_de);
const ASN1_ITEM PKCS12_SAFEBAGS_it;
void __cdecl PKCS12_SAFEBAG_free(PKCS12_SAFEBAG *a);
const ASN1_ITEM PKCS12_SAFEBAG_it;
PKCS12_SAFEBAG *PKCS12_SAFEBAG_new(void);
int __cdecl PKCS12_add_CSPName_asc(PKCS12_SAFEBAG *bag, const char *name, int namelen);
PKCS12_SAFEBAG *__cdecl PKCS12_add_cert(STACK **pbags, X509 *cert);
int __cdecl PKCS12_add_friendlyname_asc(PKCS12_SAFEBAG *bag, const char *name, int namelen);
int __cdecl PKCS12_add_friendlyname_uni(PKCS12_SAFEBAG *bag, const unsigned __int8 *name, int namelen);
PKCS12_SAFEBAG *__cdecl PKCS12_add_key(STACK **pbags, EVP_PKEY *key, int key_usage, int iter, int key_nid, char *pass);
int __cdecl PKCS12_add_localkeyid(PKCS12_SAFEBAG *bag, unsigned __int8 *name, int namelen);
int __cdecl PKCS12_add_safe(STACK **psafes, STACK *bags, int safe_nid, int iter, char *pass);
PKCS12 *__cdecl PKCS12_add_safes(STACK *safes, int p7_nid);
X509 *__cdecl PKCS12_certbag2x509(PKCS12_SAFEBAG *bag);
X509_CRL *__cdecl PKCS12_certbag2x509crl(PKCS12_SAFEBAG *bag);
PKCS12 *__cdecl PKCS12_create(char *pass, char *name, EVP_PKEY *pkey, X509 *cert, STACK *ca, int nid_key, int nid_cert, int iter, int mac_iter, int keytype);
PKCS8_PRIV_KEY_INFO *__cdecl PKCS12_decrypt_skey(PKCS12_SAFEBAG *bag, const char *pass, int passlen);
void __cdecl PKCS12_free(PKCS12 *a);
int __cdecl PKCS12_gen_mac(PKCS12 *p12, const char *pass, int passlen, unsigned __int8 *mac, unsigned int *maclen);
ASN1_TYPE *__cdecl PKCS12_get_attr_gen(STACK *attrs, int attr_nid);
char *__cdecl PKCS12_get_friendlyname(PKCS12_SAFEBAG *bag);
PKCS12 *__cdecl PKCS12_init(int mode);
const ASN1_ITEM PKCS12_it;
void *__cdecl PKCS12_item_decrypt_d2i(X509_ALGOR *algor, const ASN1_ITEM *it, const char *pass, int passlen, ASN1_OCTET_STRING *oct, int zbuf);
ASN1_OCTET_STRING *__cdecl PKCS12_item_i2d_encrypt(X509_ALGOR *algor, const ASN1_ITEM *it, const char *pass, int passlen, void *obj, int zbuf);
PKCS12_SAFEBAG *__cdecl PKCS12_item_pack_safebag(void *obj, const ASN1_ITEM *it, int nid1, int nid2);
int __cdecl PKCS12_key_gen_asc(const char *pass, int passlen, unsigned __int8 *salt, int saltlen, int id, int iter, int n, unsigned __int8 *out, const EVP_MD *md_type);
int __cdecl PKCS12_key_gen_uni(unsigned __int8 *pass, int passlen, unsigned __int8 *salt, int saltlen, int id, int iter, int n, unsigned __int8 *out, const EVP_MD *md_type);
PKCS12 *PKCS12_new(void);
int __cdecl PKCS12_newpass(PKCS12 *p12, char *oldpass, char *newpass);
int __cdecl PKCS12_pack_authsafes(PKCS12 *p12, STACK *safes);
PKCS7 *__cdecl PKCS12_pack_p7data(STACK *sk);
PKCS7 *__cdecl PKCS12_pack_p7encdata(int pbe_nid, const char *pass, int passlen, unsigned __int8 *salt, int saltlen, int iter, STACK *bags);
int __cdecl PKCS12_parse(PKCS12 *p12, const char *pass, EVP_PKEY **pkey, X509 **cert, STACK **ca);
unsigned __int8 *__cdecl PKCS12_pbe_crypt(X509_ALGOR *algor, const char *pass, int passlen, unsigned __int8 *in, int inlen, unsigned __int8 **data, int *datalen, int en_de);
int __cdecl PKCS12_set_mac(PKCS12 *p12, const char *pass, int passlen, unsigned __int8 *salt, int saltlen, int iter, const EVP_MD *md_type);
int __cdecl PKCS12_setup_mac(PKCS12 *p12, int iter, unsigned __int8 *salt, int saltlen, const EVP_MD *md_type);
STACK *__cdecl PKCS12_unpack_authsafes(PKCS12 *p12);
STACK *__cdecl PKCS12_unpack_p7data(PKCS7 *p7);
STACK *__cdecl PKCS12_unpack_p7encdata(PKCS7 *p7, const char *pass, int passlen);
int __cdecl PKCS12_verify_mac(PKCS12 *p12, const char *pass, int passlen);
PKCS12_SAFEBAG *__cdecl PKCS12_x5092certbag(X509 *x509);
PKCS12_SAFEBAG *__cdecl PKCS12_x509crl2certbag(X509_CRL *crl);
int __cdecl PKCS1_MGF1(unsigned __int8 *mask, __int64 len, const unsigned __int8 *seed, __int64 seedlen, const EVP_MD *dgst);
void PKCS5_PBE_add(void);
int __cdecl PKCS5_PBE_keyivgen(EVP_CIPHER_CTX *ctx, const char *pass, int passlen, ASN1_TYPE *param, const EVP_CIPHER *cipher, const EVP_MD *md, int en_de);
int __cdecl PKCS5_PBKDF2_HMAC_SHA1(const char *pass, int passlen, const unsigned __int8 *salt, int saltlen, int iter, int keylen, unsigned __int8 *out);
X509_ALGOR *__cdecl PKCS5_pbe2_set(const EVP_CIPHER *cipher, int iter, unsigned __int8 *salt, int saltlen);
X509_ALGOR *__cdecl PKCS5_pbe_set(int alg, int iter, unsigned __int8 *salt, int saltlen);
int __cdecl PKCS5_v2_PBE_keyivgen(EVP_CIPHER_CTX *ctx, const char *pass, int passlen, ASN1_TYPE *param, const EVP_CIPHER *cipher, const EVP_MD *md, int en_de);
const ASN1_ITEM PKCS7_ATTR_SIGN_it;
const ASN1_ITEM PKCS7_ATTR_VERIFY_it;
void __cdecl PKCS7_DIGEST_free(PKCS7_DIGEST *a);
const ASN1_ITEM PKCS7_DIGEST_it;
PKCS7_DIGEST *PKCS7_DIGEST_new(void);
void __cdecl PKCS7_ENCRYPT_free(PKCS7_ENCRYPT *a);
const ASN1_ITEM PKCS7_ENCRYPT_it;
PKCS7_ENCRYPT *PKCS7_ENCRYPT_new(void);
void __cdecl PKCS7_ENC_CONTENT_free(PKCS7_ENC_CONTENT *a);
const ASN1_ITEM PKCS7_ENC_CONTENT_it;
PKCS7_ENC_CONTENT *PKCS7_ENC_CONTENT_new(void);
void __cdecl PKCS7_ENVELOPE_free(PKCS7_ENVELOPE *a);
const ASN1_ITEM PKCS7_ENVELOPE_it;
PKCS7_ENVELOPE *PKCS7_ENVELOPE_new(void);
int __cdecl PKCS7_ISSUER_AND_SERIAL_digest(PKCS7_ISSUER_AND_SERIAL *data, const EVP_MD *type, unsigned __int8 *md, unsigned int *len);
void __cdecl PKCS7_ISSUER_AND_SERIAL_free(PKCS7_ISSUER_AND_SERIAL *a);
const ASN1_ITEM PKCS7_ISSUER_AND_SERIAL_it;
PKCS7_ISSUER_AND_SERIAL *PKCS7_ISSUER_AND_SERIAL_new(void);
void __cdecl PKCS7_RECIP_INFO_free(PKCS7_RECIP_INFO *a);
const ASN1_ITEM PKCS7_RECIP_INFO_it;
PKCS7_RECIP_INFO *PKCS7_RECIP_INFO_new(void);
int __cdecl PKCS7_RECIP_INFO_set(PKCS7_RECIP_INFO *p7i, X509 *x509);
void __cdecl PKCS7_SIGNED_free(PKCS7_SIGNED *a);
const ASN1_ITEM PKCS7_SIGNED_it;
PKCS7_SIGNED *PKCS7_SIGNED_new(void);
void __cdecl PKCS7_SIGNER_INFO_free(PKCS7_SIGNER_INFO *a);
const ASN1_ITEM PKCS7_SIGNER_INFO_it;
PKCS7_SIGNER_INFO *PKCS7_SIGNER_INFO_new(void);
int __cdecl PKCS7_SIGNER_INFO_set(PKCS7_SIGNER_INFO *p7i, X509 *x509, EVP_PKEY *pkey, const EVP_MD *dgst);
void __cdecl PKCS7_SIGN_ENVELOPE_free(PKCS7_SIGN_ENVELOPE *a);
const ASN1_ITEM PKCS7_SIGN_ENVELOPE_it;
PKCS7_SIGN_ENVELOPE *PKCS7_SIGN_ENVELOPE_new(void);
int __cdecl PKCS7_add_attrib_smimecap(PKCS7_SIGNER_INFO *si, STACK *cap);
int __cdecl PKCS7_add_attribute(PKCS7_SIGNER_INFO *p7si, int nid, int atrtype, void *value);
int __cdecl PKCS7_add_certificate(PKCS7 *p7, X509 *x509);
int __cdecl PKCS7_add_crl(PKCS7 *p7, X509_CRL *x509);
PKCS7_RECIP_INFO *__cdecl PKCS7_add_recipient(PKCS7 *p7, X509 *x509);
int __cdecl PKCS7_add_recipient_info(PKCS7 *p7, PKCS7_RECIP_INFO *ri);
PKCS7_SIGNER_INFO *__cdecl PKCS7_add_signature(PKCS7 *p7, X509 *x509, EVP_PKEY *pkey, const EVP_MD *dgst);
int __cdecl PKCS7_add_signed_attribute(PKCS7_SIGNER_INFO *p7si, int nid, int type, void *data);
int __cdecl PKCS7_add_signer(PKCS7 *p7, PKCS7_SIGNER_INFO *p7i);
X509 *__cdecl PKCS7_cert_from_signer_info(PKCS7 *p7, PKCS7_SIGNER_INFO *si);
int __cdecl PKCS7_content_new(PKCS7 *p7, int nid);
__int64 __cdecl PKCS7_ctrl(PKCS7 *p7, int cmd, __int64 larg, char *parg);
BIO *__cdecl PKCS7_dataDecode(PKCS7 *p7, EVP_PKEY *pkey, BIO *in_bio, X509 *pcert);
int __cdecl PKCS7_dataFinal(PKCS7 *p7, BIO *bio);
BIO *__cdecl PKCS7_dataInit(PKCS7 *p7, BIO *bio);
int __cdecl PKCS7_dataVerify(X509_STORE *cert_store, X509_STORE_CTX *ctx, BIO *bio, PKCS7 *p7, PKCS7_SIGNER_INFO *si);
int __cdecl PKCS7_decrypt(PKCS7 *p7, EVP_PKEY *pkey, X509 *cert, BIO *data, int flags);
ASN1_OCTET_STRING *__cdecl PKCS7_digest_from_attributes(STACK *sk);
PKCS7 *__cdecl PKCS7_dup(PKCS7 *p7);
PKCS7 *__cdecl PKCS7_encrypt(STACK *certs, BIO *in, const EVP_CIPHER *cipher, int flags);
void __cdecl PKCS7_free(PKCS7 *a);
STACK *__cdecl PKCS7_get0_signers(PKCS7 *p7, STACK *certs, int flags);
ASN1_TYPE *__cdecl PKCS7_get_attribute(PKCS7_SIGNER_INFO *si, int nid);
PKCS7_ISSUER_AND_SERIAL *__cdecl PKCS7_get_issuer_and_serial(PKCS7 *p7, int idx);
ASN1_TYPE *__cdecl PKCS7_get_signed_attribute(PKCS7_SIGNER_INFO *si, int nid);
STACK *__cdecl PKCS7_get_signer_info(PKCS7 *p7);
STACK *__cdecl PKCS7_get_smimecap(PKCS7_SIGNER_INFO *si);
const ASN1_ITEM PKCS7_it;
PKCS7 *PKCS7_new(void);
int __cdecl PKCS7_set0_type_other(PKCS7 *p7, int type, ASN1_TYPE *other);
int __cdecl PKCS7_set_attributes(PKCS7_SIGNER_INFO *p7si, STACK *sk);
int __cdecl PKCS7_set_cipher(PKCS7 *p7, const EVP_CIPHER *cipher);
int __cdecl PKCS7_set_content(PKCS7 *p7, PKCS7 *p7_data);
int __cdecl PKCS7_set_digest(PKCS7 *p7, const EVP_MD *md);
int __cdecl PKCS7_set_signed_attributes(PKCS7_SIGNER_INFO *p7si, STACK *sk);
int __cdecl PKCS7_set_type(PKCS7 *p7, int type);
PKCS7 *__cdecl PKCS7_sign(X509 *signcert, EVP_PKEY *pkey, STACK *certs, BIO *data, int flags);
int __cdecl PKCS7_signatureVerify(BIO *bio, PKCS7 *p7, PKCS7_SIGNER_INFO *si, X509 *x509);
int __cdecl PKCS7_simple_smimecap(STACK *sk, int nid, int arg);
int __cdecl PKCS7_verify(PKCS7 *p7, STACK *certs, X509_STORE *store, BIO *indata, BIO *out, int flags);
void __cdecl PKCS8_PRIV_KEY_INFO_free(PKCS8_PRIV_KEY_INFO *a);
const ASN1_ITEM PKCS8_PRIV_KEY_INFO_it;
PKCS8_PRIV_KEY_INFO *PKCS8_PRIV_KEY_INFO_new(void);
int __cdecl PKCS8_add_keyusage(PKCS8_PRIV_KEY_INFO *p8, int usage);
PKCS8_PRIV_KEY_INFO *__cdecl PKCS8_decrypt(X509_SIG *p8, const char *pass, int passlen);
X509_SIG *__cdecl PKCS8_encrypt(int pbe_nid, const EVP_CIPHER *cipher, const char *pass, int passlen, unsigned __int8 *salt, int saltlen, int iter, PKCS8_PRIV_KEY_INFO *p8);
PKCS8_PRIV_KEY_INFO *__cdecl PKCS8_set_broken(PKCS8_PRIV_KEY_INFO *p8, int broken);
void __cdecl PKEY_USAGE_PERIOD_free(PKEY_USAGE_PERIOD *a);
const ASN1_ITEM PKEY_USAGE_PERIOD_it;
PKEY_USAGE_PERIOD *PKEY_USAGE_PERIOD_new(void);
void __cdecl POLICYINFO_free(POLICYINFO *a);
const ASN1_ITEM POLICYINFO_it;
POLICYINFO *POLICYINFO_new(void);
void __cdecl POLICYQUALINFO_free(POLICYQUALINFO *a);
const ASN1_ITEM POLICYQUALINFO_it;
POLICYQUALINFO *POLICYQUALINFO_new(void);
void __cdecl POLICY_CONSTRAINTS_free(POLICY_CONSTRAINTS *a);
const ASN1_ITEM POLICY_CONSTRAINTS_it;
POLICY_CONSTRAINTS *POLICY_CONSTRAINTS_new(void);
const ASN1_ITEM POLICY_MAPPINGS_it;
void __cdecl POLICY_MAPPING_free(POLICY_MAPPING *a);
const ASN1_ITEM POLICY_MAPPING_it;
POLICY_MAPPING *POLICY_MAPPING_new(void);
MACRO__POSIX2_BC _POSIX2_BC_BASE_MAX;
MACRO__POSIX2_BC _POSIX2_BC_DIM_MAX;
MACRO__POSIX2_BC _POSIX2_BC_SCALE_MAX;
MACRO__POSIX2_BC _POSIX2_BC_STRING_MAX;
MACRO__POSIX2_CHARCLASS _POSIX2_CHARCLASS_NAME_MAX;
MACRO__POSIX2 _POSIX2_CHAR_TERM;
MACRO__POSIX2_CHARCLASS _POSIX2_COLL_WEIGHTS_MAX;
MACRO__POSIX2 _POSIX2_C_BIND;
MACRO__POSIX2 _POSIX2_C_DEV;
MACRO__POSIX2_BC _POSIX2_EQUIV_CLASS_MAX;
MACRO__POSIX2_BC _POSIX2_EXPR_NEST_MAX;
MACRO__POSIX2 _POSIX2_FORT_DEV;
MACRO__POSIX2 _POSIX2_FORT_RUN;
MACRO__POSIX2_BC _POSIX2_LINE_MAX;
MACRO__POSIX2 _POSIX2_LOCALEDEF;
MACRO__POSIX2 _POSIX2_PBS;
MACRO__POSIX2 _POSIX2_PBS_ACCOUNTING;
MACRO__POSIX2 _POSIX2_PBS_CHECKPOINT;
MACRO__POSIX2 _POSIX2_PBS_LOCATE;
MACRO__POSIX2 _POSIX2_PBS_MESSAGE;
MACRO__POSIX2 _POSIX2_PBS_TRACK;
MACRO__POSIX2_BC _POSIX2_RE_DUP_MAX;
MACRO__POSIX2 _POSIX2_SW_DEV;
MACRO__POSIX2 _POSIX2_UPE;
MACRO_VERSION _POSIX2_VERSION;
MACRO__POSIX_ADVISORY _POSIX_ADVISORY_INFO;
MACRO__POSIX_AIO _POSIX_AIO_LISTIO_MAX;
MACRO__POSIX_AIO _POSIX_AIO_MAX;
MACRO__POSIX_ARG _POSIX_ARG_MAX;
MACRO__POSIX_ADVISORY _POSIX_ASYNCHRONOUS_IO;
MACRO__POSIX_ADVISORY _POSIX_BARRIERS;
MACRO__POSIX_ARG _POSIX_CHILD_MAX;
MACRO__POSIX_ADVISORY _POSIX_CHOWN_RESTRICTED;
MACRO__POSIX_ADVISORY _POSIX_CLOCK_SELECTION;
MACRO__POSIX_ADVISORY _POSIX_CPUTIME;
MACRO__POSIX_AIO _POSIX_DELAYTIMER_MAX;
MACRO__POSIX_ADVISORY _POSIX_FSYNC;
MACRO__POSIX_AIO _POSIX_HOST_NAME_MAX;
MACRO__POSIX_ADVISORY _POSIX_IPV6;
MACRO__POSIX_ADVISORY _POSIX_JOB_CONTROL;
MACRO__POSIX_ARG _POSIX_LINK_MAX;
MACRO__POSIX_AIO _POSIX_LOGIN_NAME_MAX;
MACRO__POSIX_ADVISORY _POSIX_MAPPED_FILES;
MACRO__POSIX_ARG _POSIX_MAX_CANON;
MACRO__POSIX_ARG _POSIX_MAX_INPUT;
MACRO__POSIX_ADVISORY _POSIX_MEMLOCK;
MACRO__POSIX_ADVISORY _POSIX_MEMLOCK_RANGE;
MACRO__POSIX_ADVISORY _POSIX_MEMORY_PROTECTION;
MACRO__POSIX_ADVISORY _POSIX_MESSAGE_PASSING;
MACRO__POSIX_ADVISORY _POSIX_MONOTONIC_CLOCK;
MACRO__POSIX_AIO _POSIX_MQ_OPEN_MAX;
MACRO__POSIX_AIO _POSIX_MQ_PRIO_MAX;
MACRO__POSIX_ARG _POSIX_NAME_MAX;
MACRO__POSIX_ARG _POSIX_NGROUPS_MAX;
MACRO__POSIX_ADVISORY _POSIX_NO_TRUNC;
MACRO__POSIX_ARG _POSIX_OPEN_MAX;
MACRO__POSIX_ARG _POSIX_PATH_MAX;
MACRO__POSIX_ARG _POSIX_PIPE_BUF;
MACRO__POSIX_ADVISORY _POSIX_PRIORITIZED_IO;
MACRO__POSIX_ADVISORY _POSIX_PRIORITY_SCHEDULING;
MACRO__POSIX_PTHREAD _POSIX_PTHREAD_SEMANTICS;
MACRO__POSIX_ADVISORY _POSIX_RAW_SOCKETS;
MACRO__POSIX_ADVISORY _POSIX_READER_WRITER_LOCKS;
MACRO__POSIX_ADVISORY _POSIX_REALTIME_SIGNALS;
MACRO__POSIX_ADVISORY _POSIX_REGEXP;
MACRO__POSIX_RE _POSIX_RE_DUP_MAX;
MACRO__POSIX_AIO _POSIX_RTSIG_MAX;
MACRO__POSIX_ADVISORY _POSIX_SAVED_IDS;
MACRO__POSIX_ADVISORY _POSIX_SEMAPHORES;
MACRO__POSIX_AIO _POSIX_SEM_NSEMS_MAX;
MACRO__POSIX_AIO _POSIX_SEM_VALUE_MAX;
MACRO__POSIX_ADVISORY _POSIX_SHARED_MEMORY_OBJECTS;
MACRO__POSIX_ADVISORY _POSIX_SHELL;
MACRO__POSIX_AIO _POSIX_SIGQUEUE_MAX;
MACRO__POSIX_ADVISORY _POSIX_SPAWN;
MACRO__POSIX_ADVISORY _POSIX_SPIN_LOCKS;
MACRO__POSIX_ADVISORY _POSIX_SPORADIC_SERVER;
MACRO__POSIX_ARG _POSIX_SSIZE_MAX;
MACRO__POSIX_AIO _POSIX_SS_REPL_MAX;
MACRO__POSIX_ARG _POSIX_STREAM_MAX;
MACRO__POSIX_AIO _POSIX_SYMLINK_MAX;
MACRO__POSIX_AIO _POSIX_SYMLOOP_MAX;
MACRO__POSIX_ADVISORY _POSIX_SYNCHRONIZED_IO;
MACRO__POSIX_ADVISORY _POSIX_THREADS;
MACRO__POSIX_ADVISORY _POSIX_THREAD_ATTR_STACKADDR;
MACRO__POSIX_ADVISORY _POSIX_THREAD_ATTR_STACKSIZE;
MACRO__POSIX_ADVISORY _POSIX_THREAD_CPUTIME;
MACRO__POSIX_AIO _POSIX_THREAD_DESTRUCTOR_ITERATIONS;
MACRO__POSIX _POSIX_THREAD_KEYS_MAX;
MACRO__POSIX_ADVISORY _POSIX_THREAD_PRIORITY_SCHEDULING;
MACRO__POSIX_ADVISORY _POSIX_THREAD_PRIO_INHERIT;
MACRO__POSIX_ADVISORY _POSIX_THREAD_PRIO_PROTECT;
MACRO__POSIX_ADVISORY _POSIX_THREAD_PROCESS_SHARED;
MACRO__POSIX_ADVISORY _POSIX_THREAD_SAFE_FUNCTIONS;
MACRO__POSIX_ADVISORY _POSIX_THREAD_SPORADIC_SERVER;
MACRO__POSIX_AIO _POSIX_THREAD_THREADS_MAX;
MACRO__POSIX_ADVISORY _POSIX_TIMEOUTS;
MACRO__POSIX_ADVISORY _POSIX_TIMERS;
MACRO__POSIX_AIO _POSIX_TIMER_MAX;
MACRO__POSIX_ADVISORY _POSIX_TRACE;
MACRO__POSIX_ADVISORY _POSIX_TRACE_EVENT_FILTER;
MACRO__POSIX_AIO _POSIX_TRACE_EVENT_NAME_MAX;
MACRO__POSIX_ADVISORY _POSIX_TRACE_INHERIT;
MACRO__POSIX_ADVISORY _POSIX_TRACE_LOG;
MACRO__POSIX_AIO _POSIX_TRACE_NAME_MAX;
MACRO__POSIX_AIO _POSIX_TRACE_SYS_MAX;
MACRO__POSIX_AIO _POSIX_TRACE_USER_EVENT_MAX;
MACRO__POSIX_AIO _POSIX_TTY_NAME_MAX;
MACRO__POSIX_ADVISORY _POSIX_TYPED_MEMORY_OBJECTS;
MACRO__POSIX_ARG _POSIX_TZNAME_MAX;
MACRO__POSIX_V6 _POSIX_V6_ILP32_OFF32;
MACRO__POSIX_V6 _POSIX_V6_ILP32_OFFBIG;
MACRO__POSIX_V6 _POSIX_V6_LP64_OFF64;
MACRO__POSIX_V6 _POSIX_V6_LPBIG_OFFBIG;
MACRO__POSIX_V6 _POSIX_V7_ILP32_OFF32;
MACRO__POSIX_V6 _POSIX_V7_ILP32_OFFBIG;
MACRO__POSIX_V6 _POSIX_V7_LP64_OFF64;
MACRO__POSIX_V6 _POSIX_V7_LPBIG_OFFBIG;
MACRO__POSIX _POSIX_VDISABLE;
MACRO_VERSION _POSIX_VERSION;
void __cdecl PROXY_CERT_INFO_EXTENSION_free(PROXY_CERT_INFO_EXTENSION *a);
const ASN1_ITEM PROXY_CERT_INFO_EXTENSION_it;
PROXY_CERT_INFO_EXTENSION *PROXY_CERT_INFO_EXTENSION_new(void);
void __cdecl PROXY_POLICY_free(PROXY_POLICY *a);
const ASN1_ITEM PROXY_POLICY_it;
PROXY_POLICY *PROXY_POLICY_new(void);
MACRO__PTHREAD _PTHREAD_COND_SIG_init;
MACRO__PTHREAD _PTHREAD_ERRORCHECK_MUTEX_SIG_init;
MACRO__PTHREAD _PTHREAD_FIRSTFIT_MUTEX_SIG_init;
MACRO__PTHREAD _PTHREAD_MUTEX_SIG_init;
MACRO__PTHREAD _PTHREAD_ONCE_SIG_init;
MACRO__PTHREAD _PTHREAD_RECURSIVE_MUTEX_SIG_init;
MACRO__PTHREAD _PTHREAD_RWLOCK_SIG_init;
MACRO__PW _PW_KEYBYNAME;
MACRO__PW _PW_KEYBYNUM;
MACRO__PW _PW_KEYBYUID;
MACRO__QUAD _QUAD_HIGHWORD;
MACRO__QUAD QUAD_LOWWORD;
RAND_METHOD *RAND_SSLeay(void);
void __cdecl RAND_add(const void *buf, int num, double entropy);
int __cdecl RAND_bytes(unsigned __int8 *buf, int num);
void RAND_cleanup(void);
int __cdecl RAND_egd(const char *path);
int __cdecl RAND_egd_bytes(const char *path, int bytes);
const char *__cdecl RAND_file_name(char *file, size_t num);
const RAND_METHOD *RAND_get_rand_method(void);
int __cdecl RAND_load_file(const char *file, __int64 max_bytes);
int RAND_poll(void);
int __cdecl RAND_pseudo_bytes(unsigned __int8 *buf, int num);
int __cdecl RAND_query_egd_bytes(const char *path, unsigned __int8 *buf, int bytes);
void __cdecl RAND_seed(const void *buf, int num);
int __cdecl RAND_set_rand_engine(ENGINE *engine);
int __cdecl RAND_set_rand_method(const RAND_METHOD *meth);
int RAND_status(void);
int __cdecl RAND_write_file(const char *file);
MACRO_OK _RATTR_OK;
void __cdecl RC2_cbc_encrypt(const unsigned __int8 *in, unsigned __int8 *out, __int64 length, RC2_KEY *ks, unsigned __int8 *iv, int enc);
void __cdecl RC2_cfb64_encrypt(const unsigned __int8 *in, unsigned __int8 *out, __int64 length, RC2_KEY *schedule, unsigned __int8 *ivec, int *num, int enc);
void __cdecl RC2_decrypt(unsigned __int64 *data, RC2_KEY *key);
void __cdecl RC2_ecb_encrypt(const unsigned __int8 *in, unsigned __int8 *out, RC2_KEY *key, int enc);
void __cdecl RC2_encrypt(unsigned __int64 *data, RC2_KEY *key);
void __cdecl RC2_ofb64_encrypt(const unsigned __int8 *in, unsigned __int8 *out, __int64 length, RC2_KEY *schedule, unsigned __int8 *ivec, int *num);
void __cdecl RC2_set_key(RC2_KEY *key, int len, const unsigned __int8 *data, int bits);
void __cdecl RC4(RC4_KEY *key, unsigned __int64 len, const unsigned __int8 *indata, unsigned __int8 *outdata);
const char *RC4_options(void);
void __cdecl RC4_set_key(RC4_KEY *key, int len, const unsigned __int8 *data);
void __cdecl RC5_32_cbc_encrypt(const unsigned __int8 *in, unsigned __int8 *out, __int64 length, RC5_32_KEY *ks, unsigned __int8 *iv, int enc);
void __cdecl RC5_32_cfb64_encrypt(const unsigned __int8 *in, unsigned __int8 *out, __int64 length, RC5_32_KEY *schedule, unsigned __int8 *ivec, int *num, int enc);
void __cdecl RC5_32_decrypt(unsigned __int64 *data, RC5_32_KEY *key);
void __cdecl RC5_32_ecb_encrypt(const unsigned __int8 *in, unsigned __int8 *out, RC5_32_KEY *key, int enc);
void __cdecl RC5_32_encrypt(unsigned __int64 *data, RC5_32_KEY *key);
void __cdecl RC5_32_ofb64_encrypt(const unsigned __int8 *in, unsigned __int8 *out, __int64 length, RC5_32_KEY *schedule, unsigned __int8 *ivec, int *num);
void __cdecl RC5_32_set_key(RC5_32_KEY *key, int len, const unsigned __int8 *data, int rounds);
MACRO_OK _READ_OK;
MACRO_OK _REXT_OK;
unsigned __int8 *__cdecl RIPEMD160(const unsigned __int8 *d, size_t n, unsigned __int8 *md);
int __cdecl RIPEMD160_Final(unsigned __int8 *md, RIPEMD160_CTX *c);
int __cdecl RIPEMD160_Init(RIPEMD160_CTX *c);
void __cdecl RIPEMD160_Transform(RIPEMD160_CTX *c, const unsigned __int8 *b);
int __cdecl RIPEMD160_Update(RIPEMD160_CTX *c, const void *data, size_t len);
MACRO__RLIMIT _RLIMIT_POSIX_FLAG;
MACRO_OK _RMFILE_OK;
MACRO_OK _RPERM_OK;
ASN1_METHOD *RSAPrivateKey_asn1_meth(void);
RSA *__cdecl RSAPrivateKey_dup(RSA *rsa);
const ASN1_ITEM RSAPrivateKey_it;
RSA *__cdecl RSAPublicKey_dup(RSA *rsa);
const ASN1_ITEM RSAPublicKey_it;
const RSA_METHOD *RSA_PKCS1_SSLeay(void);
int __cdecl RSA_X931_derive_ex(RSA *rsa, BIGNUM *p1, BIGNUM *p2, BIGNUM *q1, BIGNUM *q2, const BIGNUM *Xp1, const BIGNUM *Xp2, const BIGNUM *Xp, const BIGNUM *Xq1, const BIGNUM *Xq2, const BIGNUM *Xq, const BIGNUM *e, BN_GENCB *cb);
int __cdecl RSA_X931_generate_key_ex(RSA *rsa, int bits, const BIGNUM *e, BN_GENCB *cb);
int __cdecl RSA_X931_hash_id(int nid);
void __cdecl RSA_blinding_off(RSA *rsa);
int __cdecl RSA_blinding_on(RSA *rsa, BN_CTX *ctx);
int __cdecl RSA_check_key(const RSA *);
int __cdecl RSA_flags(const RSA *r);
void __cdecl RSA_free(RSA *r);
RSA *__cdecl RSA_generate_key(int bits, unsigned __int64 e, void (__cdecl *callback)(int, int, void *), void *cb_arg);
int __cdecl RSA_generate_key_ex(RSA *rsa, int bits, BIGNUM *e, BN_GENCB *cb);
const RSA_METHOD *RSA_get_default_method(void);
void *__cdecl RSA_get_ex_data(const RSA *r, int idx);
int __cdecl RSA_get_ex_new_index(__int64 argl, void *argp, CRYPTO_EX_new *new_func, CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func);
const RSA_METHOD *__cdecl RSA_get_method(const RSA *rsa);
int __cdecl RSA_memory_lock(RSA *r);
RSA *RSA_new(void);
RSA *__cdecl RSA_new_method(ENGINE *engine);
const RSA_METHOD *RSA_null_method(void);
int __cdecl RSA_padding_add_PKCS1_OAEP(unsigned __int8 *to, int tlen, const unsigned __int8 *f, int fl, const unsigned __int8 *p, int pl);
int __cdecl RSA_padding_add_PKCS1_PSS(RSA *rsa, unsigned __int8 *EM, const unsigned __int8 *mHash, const EVP_MD *Hash, int sLen);
int __cdecl RSA_padding_add_PKCS1_type_1(unsigned __int8 *to, int tlen, const unsigned __int8 *f, int fl);
int __cdecl RSA_padding_add_PKCS1_type_2(unsigned __int8 *to, int tlen, const unsigned __int8 *f, int fl);
int __cdecl RSA_padding_add_SSLv23(unsigned __int8 *to, int tlen, const unsigned __int8 *f, int fl);
int __cdecl RSA_padding_add_X931(unsigned __int8 *to, int tlen, const unsigned __int8 *f, int fl);
int __cdecl RSA_padding_add_none(unsigned __int8 *to, int tlen, const unsigned __int8 *f, int fl);
int __cdecl RSA_padding_check_PKCS1_OAEP(unsigned __int8 *to, int tlen, const unsigned __int8 *f, int fl, int rsa_len, const unsigned __int8 *p, int pl);
int __cdecl RSA_padding_check_PKCS1_type_1(unsigned __int8 *to, int tlen, const unsigned __int8 *f, int fl, int rsa_len);
int __cdecl RSA_padding_check_PKCS1_type_2(unsigned __int8 *to, int tlen, const unsigned __int8 *f, int fl, int rsa_len);
int __cdecl RSA_padding_check_SSLv23(unsigned __int8 *to, int tlen, const unsigned __int8 *f, int fl, int rsa_len);
int __cdecl RSA_padding_check_X931(unsigned __int8 *to, int tlen, const unsigned __int8 *f, int fl, int rsa_len);
int __cdecl RSA_padding_check_none(unsigned __int8 *to, int tlen, const unsigned __int8 *f, int fl, int rsa_len);
int __cdecl RSA_print(BIO *bp, const RSA *r, int offset);
int __cdecl RSA_print_fp(FILE *fp, const RSA *r, int offset);
int __cdecl RSA_private_decrypt(int flen, const unsigned __int8 *from, unsigned __int8 *to, RSA *rsa, int padding);
int __cdecl RSA_private_encrypt(int flen, const unsigned __int8 *from, unsigned __int8 *to, RSA *rsa, int padding);
int __cdecl RSA_public_decrypt(int flen, const unsigned __int8 *from, unsigned __int8 *to, RSA *rsa, int padding);
int __cdecl RSA_public_encrypt(int flen, const unsigned __int8 *from, unsigned __int8 *to, RSA *rsa, int padding);
void __cdecl RSA_set_default_method(const RSA_METHOD *meth);
int __cdecl RSA_set_ex_data(RSA *r, int idx, void *arg);
int __cdecl RSA_set_method(RSA *rsa, const RSA_METHOD *meth);
BN_BLINDING *__cdecl RSA_setup_blinding(RSA *rsa, BN_CTX *ctx);
int __cdecl RSA_sign(int type, const unsigned __int8 *m, unsigned int m_length, unsigned __int8 *sigret, unsigned int *siglen, RSA *rsa);
int __cdecl RSA_sign_ASN1_OCTET_STRING(int type, const unsigned __int8 *m, unsigned int m_length, unsigned __int8 *sigret, unsigned int *siglen, RSA *rsa);
int __cdecl RSA_size(const RSA *);
int __cdecl RSA_up_ref(RSA *r);
int __cdecl RSA_verify(int type, const unsigned __int8 *m, unsigned int m_length, unsigned __int8 *sigbuf, unsigned int siglen, RSA *rsa);
int __cdecl RSA_verify_ASN1_OCTET_STRING(int type, const unsigned __int8 *m, unsigned int m_length, unsigned __int8 *sigbuf, unsigned int siglen, RSA *rsa);
int __cdecl RSA_verify_PKCS1_PSS(RSA *rsa, const unsigned __int8 *mHash, const EVP_MD *Hash, const unsigned __int8 *EM, int sLen);
MACRO_OK_0 _SCROLLWIN;
MACRO__SC _SC_2_CHAR_TERM;
MACRO__SC _SC_2_C_BIND;
MACRO__SC _SC_2_C_DEV;
MACRO__SC _SC_2_FORT_DEV;
MACRO__SC _SC_2_FORT_RUN;
MACRO__SC _SC_2_LOCALEDEF;
MACRO__SC _SC_2_PBS;
MACRO__SC _SC_2_PBS_ACCOUNTING;
MACRO__SC _SC_2_PBS_CHECKPOINT;
MACRO__SC _SC_2_PBS_LOCATE;
MACRO__SC _SC_2_PBS_MESSAGE;
MACRO__SC _SC_2_PBS_TRACK;
MACRO__SC _SC_2_SW_DEV;
MACRO__SC _SC_2_UPE;
MACRO__SC _SC_2_VERSION;
MACRO__SC _SC_ADVISORY_INFO;
MACRO__SC _SC_AIO_LISTIO_MAX;
MACRO__SC _SC_AIO_MAX;
MACRO__SC _SC_AIO_PRIO_DELTA_MAX;
MACRO__SC _SC_ARG_MAX;
MACRO__SC _SC_ASYNCHRONOUS_IO;
MACRO__SC _SC_ATEXIT_MAX;
MACRO__SC _SC_BARRIERS;
MACRO__SC _SC_BC_BASE_MAX;
MACRO__SC _SC_BC_DIM_MAX;
MACRO__SC _SC_BC_SCALE_MAX;
MACRO__SC _SC_BC_STRING_MAX;
MACRO__SC _SC_CHILD_MAX;
MACRO__SC _SC_CLK_TCK;
MACRO__SC _SC_CLOCK_SELECTION;
MACRO__SC _SC_COLL_WEIGHTS_MAX;
MACRO__SC _SC_CPUTIME;
MACRO__SC _SC_DELAYTIMER_MAX;
MACRO__SC _SC_EXPR_NEST_MAX;
MACRO__SC _SC_FILE_LOCKING;
MACRO__SC _SC_FSYNC;
MACRO__SC _SC_GETGR_R_SIZE_MAX;
MACRO__SC _SC_GETPW_R_SIZE_MAX;
MACRO__SC _SC_HOST_NAME_MAX;
MACRO__SC _SC_IOV_MAX;
MACRO__SC _SC_IPV6;
MACRO__SC _SC_JOB_CONTROL;
MACRO__SC _SC_LINE_MAX;
MACRO__SC _SC_LOGIN_NAME_MAX;
MACRO__SC _SC_MAPPED_FILES;
MACRO__SC _SC_MEMLOCK;
MACRO__SC _SC_MEMLOCK_RANGE;
MACRO__SC _SC_MEMORY_PROTECTION;
MACRO__SC _SC_MESSAGE_PASSING;
MACRO__SC _SC_MONOTONIC_CLOCK;
MACRO__SC _SC_MQ_OPEN_MAX;
MACRO__SC _SC_MQ_PRIO_MAX;
MACRO__SC _SC_NGROUPS_MAX;
MACRO__SC _SC_NPROCESSORS_CONF;
MACRO__SC _SC_NPROCESSORS_ONLN;
MACRO__SC _SC_OPEN_MAX;
MACRO__SC _SC_PAGESIZE;
MACRO__SC _SC_PAGE_SIZE;
MACRO__SC _SC_PASS_MAX;
MACRO__SC _SC_PRIORITIZED_IO;
MACRO__SC _SC_PRIORITY_SCHEDULING;
MACRO__SC _SC_RAW_SOCKETS;
MACRO__SC _SC_READER_WRITER_LOCKS;
MACRO__SC _SC_REALTIME_SIGNALS;
MACRO__SC _SC_REGEXP;
MACRO__SC _SC_RE_DUP_MAX;
MACRO__SC _SC_RTSIG_MAX;
MACRO__SC _SC_SAVED_IDS;
MACRO__SC _SC_SEMAPHORES;
MACRO__SC _SC_SEM_NSEMS_MAX;
MACRO__SC _SC_SEM_VALUE_MAX;
MACRO__SC _SC_SHARED_MEMORY_OBJECTS;
MACRO__SC _SC_SHELL;
MACRO__SC _SC_SIGQUEUE_MAX;
MACRO__SC _SC_SPAWN;
MACRO__SC _SC_SPIN_LOCKS;
MACRO__SC _SC_SPORADIC_SERVER;
MACRO__SC _SC_SS_REPL_MAX;
MACRO__SC _SC_STREAM_MAX;
MACRO__SC _SC_SYMLOOP_MAX;
MACRO__SC _SC_SYNCHRONIZED_IO;
MACRO__SC _SC_THREADS;
MACRO__SC _SC_THREAD_ATTR_STACKADDR;
MACRO__SC _SC_THREAD_ATTR_STACKSIZE;
MACRO__SC _SC_THREAD_CPUTIME;
MACRO__SC _SC_THREAD_DESTRUCTOR_ITERATIONS;
MACRO__SC _SC_THREAD_KEYS_MAX;
MACRO__SC _SC_THREAD_PRIORITY_SCHEDULING;
MACRO__SC _SC_THREAD_PRIO_INHERIT;
MACRO__SC _SC_THREAD_PRIO_PROTECT;
MACRO__SC _SC_THREAD_PROCESS_SHARED;
MACRO__SC _SC_THREAD_SAFE_FUNCTIONS;
MACRO__SC _SC_THREAD_SPORADIC_SERVER;
MACRO__SC _SC_THREAD_STACK_MIN;
MACRO__SC _SC_THREAD_THREADS_MAX;
MACRO__SC _SC_TIMEOUTS;
MACRO__SC _SC_TIMERS;
MACRO__SC _SC_TIMER_MAX;
MACRO__SC _SC_TRACE;
MACRO__SC _SC_TRACE_EVENT_FILTER;
MACRO__SC _SC_TRACE_EVENT_NAME_MAX;
MACRO__SC _SC_TRACE_INHERIT;
MACRO__SC _SC_TRACE_LOG;
MACRO__SC _SC_TRACE_NAME_MAX;
MACRO__SC _SC_TRACE_SYS_MAX;
MACRO__SC _SC_TRACE_USER_EVENT_MAX;
MACRO__SC _SC_TTY_NAME_MAX;
MACRO__SC _SC_TYPED_MEMORY_OBJECTS;
MACRO__SC _SC_TZNAME_MAX;
MACRO__SC _SC_V6_ILP32_OFF32;
MACRO__SC _SC_V6_ILP32_OFFBIG;
MACRO__SC _SC_V6_LP64_OFF64;
MACRO__SC _SC_V6_LPBIG_OFFBIG;
MACRO__SC _SC_VERSION;
MACRO__SC _SC_XBS5_ILP32_OFF32;
MACRO__SC _SC_XBS5_ILP32_OFFBIG;
MACRO__SC _SC_XBS5_LP64_OFF64;
MACRO__SC _SC_XBS5_LPBIG_OFFBIG;
MACRO__SC _SC_XOPEN_CRYPT;
MACRO__SC _SC_XOPEN_ENH_I18N;
MACRO__SC _SC_XOPEN_LEGACY;
MACRO__SC _SC_XOPEN_REALTIME;
MACRO__SC _SC_XOPEN_REALTIME_THREADS;
MACRO__SC _SC_XOPEN_SHM;
MACRO__SC _SC_XOPEN_STREAMS;
MACRO__SC _SC_XOPEN_UNIX;
MACRO__SC _SC_XOPEN_VERSION;
MACRO__SC _SC_XOPEN_XCU_VERSION;
void __cdecl SEED_cbc_encrypt(const unsigned __int8 *in, unsigned __int8 *out, size_t len, const SEED_KEY_SCHEDULE *ks, unsigned __int8 ivec[16], int enc);
void __cdecl SEED_cfb128_encrypt(const unsigned __int8 *in, unsigned __int8 *out, size_t len, const SEED_KEY_SCHEDULE *ks, unsigned __int8 ivec[16], int *num, int enc);
void __cdecl SEED_decrypt(const unsigned __int8 s[16], unsigned __int8 d[16], const SEED_KEY_SCHEDULE *ks);
void __cdecl SEED_ecb_encrypt(const unsigned __int8 *in, unsigned __int8 *out, const SEED_KEY_SCHEDULE *ks, int enc);
void __cdecl SEED_encrypt(const unsigned __int8 s[16], unsigned __int8 d[16], const SEED_KEY_SCHEDULE *ks);
void __cdecl SEED_ofb128_encrypt(const unsigned __int8 *in, unsigned __int8 *out, size_t len, const SEED_KEY_SCHEDULE *ks, unsigned __int8 ivec[16], int *num);
void __cdecl SEED_set_key(const unsigned __int8 rawkey[16], SEED_KEY_SCHEDULE *ks);
unsigned __int8 *__cdecl SHA(const unsigned __int8 *d, size_t n, unsigned __int8 *md);
unsigned __int8 *__cdecl SHA1(const unsigned __int8 *d, size_t n, unsigned __int8 *md);
int __cdecl SHA1_Final(unsigned __int8 *md, SHA_CTX *c);
int __cdecl SHA1_Init(SHA_CTX *c);
void __cdecl SHA1_Transform(SHA_CTX *c, const unsigned __int8 *data);
int __cdecl SHA1_Update(SHA_CTX *c, const void *data, size_t len);
unsigned __int8 *__cdecl SHA224(const unsigned __int8 *d, size_t n, unsigned __int8 *md);
int __cdecl SHA224_Final(unsigned __int8 *md, SHA256_CTX *c);
int __cdecl SHA224_Init(SHA256_CTX *c);
int __cdecl SHA224_Update(SHA256_CTX *c, const void *data, size_t len);
unsigned __int8 *__cdecl SHA256(const unsigned __int8 *d, size_t n, unsigned __int8 *md);
int __cdecl SHA256_Final(unsigned __int8 *md, SHA256_CTX *c);
int __cdecl SHA256_Init(SHA256_CTX *c);
void __cdecl SHA256_Transform(SHA256_CTX *c, const unsigned __int8 *data);
int __cdecl SHA256_Update(SHA256_CTX *c, const void *data, size_t len);
unsigned __int8 *__cdecl SHA384(const unsigned __int8 *d, size_t n, unsigned __int8 *md);
int __cdecl SHA384_Final(unsigned __int8 *md, SHA512_CTX *c);
int __cdecl SHA384_Init(SHA512_CTX *c);
int __cdecl SHA384_Update(SHA512_CTX *c, const void *data, size_t len);
unsigned __int8 *__cdecl SHA512(const unsigned __int8 *d, size_t n, unsigned __int8 *md);
int __cdecl SHA512_Final(unsigned __int8 *md, SHA512_CTX *c);
int __cdecl SHA512_Init(SHA512_CTX *c);
void __cdecl SHA512_Transform(SHA512_CTX *c, const unsigned __int8 *data);
int __cdecl SHA512_Update(SHA512_CTX *c, const void *data, size_t len);
int __cdecl SHA_Final(unsigned __int8 *md, SHA_CTX *c);
int __cdecl SHA_Init(SHA_CTX *c);
void __cdecl SHA_Transform(SHA_CTX *c, const unsigned __int8 *data);
int __cdecl SHA_Update(SHA_CTX *c, const void *data, size_t len);
int __cdecl SMIME_crlf_copy(BIO *in, BIO *out, int flags);
ASN1_VALUE *__cdecl SMIME_read_ASN1(BIO *bio, BIO **bcont, const ASN1_ITEM *it);
PKCS7 *__cdecl SMIME_read_PKCS7(BIO *bio, BIO **bcont);
int __cdecl SMIME_text(BIO *in, BIO *out);
int __cdecl SMIME_write_PKCS7(BIO *bio, PKCS7 *p7, BIO *data, int flags);
SQLRETURN __cdecl SQLAllocConnect(SQLHENV EnvironmentHandle, SQLHDBC *ConnectionHandle);
SQLRETURN __cdecl SQLAllocEnv(SQLHENV *EnvironmentHandle);
SQLRETURN __cdecl SQLAllocHandle(SQLSMALLINT HandleType, SQLHANDLE InputHandle, SQLHANDLE *OutputHandle);
SQLRETURN __cdecl SQLAllocStmt(SQLHDBC ConnectionHandle, SQLHSTMT *StatementHandle);
SQLRETURN __cdecl SQLBindCol(SQLHSTMT StatementHandle, SQLUSMALLINT ColumnNumber, SQLSMALLINT TargetType, SQLPOINTER TargetValue, __int64 BufferLength, __int64 *StrLen_or_Ind);
SQLRETURN __cdecl SQLBindParam(SQLHSTMT StatementHandle, SQLUSMALLINT ParameterNumber, SQLSMALLINT ValueType, SQLSMALLINT ParameterType, unsigned __int64 LengthPrecision, SQLSMALLINT ParameterScale, SQLPOINTER ParameterValue, __int64 *StrLen_or_Ind);
SQLRETURN __cdecl SQLBindParameter(SQLHSTMT hstmt, SQLUSMALLINT ipar, SQLSMALLINT fParamType, SQLSMALLINT fCType, SQLSMALLINT fSqlType, unsigned __int64 cbColDef, SQLSMALLINT ibScale, SQLPOINTER rgbValue, __int64 cbValueMax, __int64 *pcbValue);
SQLRETURN __cdecl SQLBrowseConnect(SQLHDBC hdbc, SQLCHAR *szConnStrIn, SQLSMALLINT cbConnStrIn, SQLCHAR *szConnStrOut, SQLSMALLINT cbConnStrOutMax, SQLSMALLINT *pcbConnStrOut);
SQLRETURN __cdecl SQLBrowseConnectA(SQLHDBC hdbc, SQLCHAR *szConnStrIn, SQLSMALLINT cbConnStrIn, SQLCHAR *szConnStrOut, SQLSMALLINT cbConnStrOutMax, SQLSMALLINT *pcbConnStrOut);
SQLRETURN __cdecl SQLBrowseConnectW(SQLHDBC hdbc, SQLWCHAR *szConnStrIn, SQLSMALLINT cbConnStrIn, SQLWCHAR *szConnStrOut, SQLSMALLINT cbConnStrOutMax, SQLSMALLINT *pcbConnStrOut);
SQLRETURN __cdecl SQLBulkOperations(SQLHSTMT StatementHandle, SQLSMALLINT Operation);
SQLRETURN __cdecl SQLCancel(SQLHSTMT StatementHandle);
SQLRETURN __cdecl SQLCloseCursor(SQLHSTMT StatementHandle);
SQLRETURN __cdecl SQLColAttribute(SQLHSTMT StatementHandle, SQLUSMALLINT ColumnNumber, SQLUSMALLINT FieldIdentifier, SQLPOINTER CharacterAttribute, SQLSMALLINT BufferLength, SQLSMALLINT *StringLength, __int64 *NumericAttribute);
SQLRETURN __cdecl SQLColAttributeA(SQLHSTMT hstmt, SQLUSMALLINT iCol, SQLUSMALLINT iField, SQLPOINTER pCharAttr, SQLSMALLINT cbCharAttrMax, SQLSMALLINT *pcbCharAttr, __int64 *pNumAttr);
SQLRETURN __cdecl SQLColAttributeW(SQLHSTMT hstmt, SQLUSMALLINT iCol, SQLUSMALLINT iField, SQLPOINTER pCharAttr, SQLSMALLINT cbCharAttrMax, SQLSMALLINT *pcbCharAttr, __int64 *pNumAttr);
SQLRETURN __cdecl SQLColAttributes(SQLHSTMT hstmt, SQLUSMALLINT icol, SQLUSMALLINT fDescType, SQLPOINTER rgbDesc, SQLSMALLINT cbDescMax, SQLSMALLINT *pcbDesc, __int64 *pfDesc);
SQLRETURN __cdecl SQLColAttributesA(SQLHSTMT hstmt, SQLUSMALLINT icol, SQLUSMALLINT fDescType, SQLPOINTER rgbDesc, SQLSMALLINT cbDescMax, SQLSMALLINT *pcbDesc, __int64 *pfDesc);
SQLRETURN __cdecl SQLColAttributesW(SQLHSTMT hstmt, SQLUSMALLINT icol, SQLUSMALLINT fDescType, SQLPOINTER rgbDesc, SQLSMALLINT cbDescMax, SQLSMALLINT *pcbDesc, __int64 *pfDesc);
SQLRETURN __cdecl SQLColumnPrivileges(SQLHSTMT hstmt, SQLCHAR *szCatalogName, SQLSMALLINT cbCatalogName, SQLCHAR *szSchemaName, SQLSMALLINT cbSchemaName, SQLCHAR *szTableName, SQLSMALLINT cbTableName, SQLCHAR *szColumnName, SQLSMALLINT cbColumnName);
SQLRETURN __cdecl SQLColumnPrivilegesA(SQLHSTMT hstmt, SQLCHAR *szCatalogName, SQLSMALLINT cbCatalogName, SQLCHAR *szSchemaName, SQLSMALLINT cbSchemaName, SQLCHAR *szTableName, SQLSMALLINT cbTableName, SQLCHAR *szColumnName, SQLSMALLINT cbColumnName);
SQLRETURN __cdecl SQLColumnPrivilegesW(SQLHSTMT hstmt, SQLWCHAR *szCatalogName, SQLSMALLINT cbCatalogName, SQLWCHAR *szSchemaName, SQLSMALLINT cbSchemaName, SQLWCHAR *szTableName, SQLSMALLINT cbTableName, SQLWCHAR *szColumnName, SQLSMALLINT cbColumnName);
SQLRETURN __cdecl SQLColumns(SQLHSTMT StatementHandle, SQLCHAR *CatalogName, SQLSMALLINT NameLength1, SQLCHAR *SchemaName, SQLSMALLINT NameLength2, SQLCHAR *TableName, SQLSMALLINT NameLength3, SQLCHAR *ColumnName, SQLSMALLINT NameLength4);
SQLRETURN __cdecl SQLColumnsA(SQLHSTMT hstmt, SQLCHAR *szCatalogName, SQLSMALLINT cbCatalogName, SQLCHAR *szSchemaName, SQLSMALLINT cbSchemaName, SQLCHAR *szTableName, SQLSMALLINT cbTableName, SQLCHAR *szColumnName, SQLSMALLINT cbColumnName);
SQLRETURN __cdecl SQLColumnsW(SQLHSTMT hstmt, SQLWCHAR *szCatalogName, SQLSMALLINT cbCatalogName, SQLWCHAR *szSchemaName, SQLSMALLINT cbSchemaName, SQLWCHAR *szTableName, SQLSMALLINT cbTableName, SQLWCHAR *szColumnName, SQLSMALLINT cbColumnName);
BOOL __cdecl SQLConfigDataSource(HWND hwndParent, WORD fRequest, LPCSTR lpszDriver, LPCSTR lpszAttributes);
BOOL __cdecl SQLConfigDataSourceW(HWND hwndParent, WORD fRequest, LPCWSTR lpszDriver, LPCWSTR lpszAttributes);
BOOL __cdecl SQLConfigDriver(HWND hwndParent, WORD fRequest, LPCSTR lpszDriver, LPCSTR lpszArgs, LPSTR lpszMsg, WORD cbMsgMax, WORD *pcbMsgOut);
BOOL __cdecl SQLConfigDriverW(HWND hwndParent, WORD fRequest, LPCWSTR lpszDriver, LPCWSTR lpszArgs, LPWSTR lpszMsg, WORD cbMsgMax, WORD *pcbMsgOut);
SQLRETURN __cdecl SQLConnect(SQLHDBC ConnectionHandle, SQLCHAR *ServerName, SQLSMALLINT NameLength1, SQLCHAR *UserName, SQLSMALLINT NameLength2, SQLCHAR *Authentication, SQLSMALLINT NameLength3);
SQLRETURN __cdecl SQLConnectA(SQLHDBC hdbc, SQLCHAR *szDSN, SQLSMALLINT cbDSN, SQLCHAR *szUID, SQLSMALLINT cbUID, SQLCHAR *szAuthStr, SQLSMALLINT cbAuthStr);
SQLRETURN __cdecl SQLConnectW(SQLHDBC hdbc, SQLWCHAR *szDSN, SQLSMALLINT cbDSN, SQLWCHAR *szUID, SQLSMALLINT cbUID, SQLWCHAR *szAuthStr, SQLSMALLINT cbAuthStr);
SQLRETURN __cdecl SQLCopyDesc(SQLHDESC SourceDescHandle, SQLHDESC TargetDescHandle);
BOOL __cdecl SQLCreateDataSource(HWND hwndParent, LPCSTR lpszDSN);
BOOL __cdecl SQLCreateDataSourceW(HWND hwndParent, LPCWSTR lpszDSN);
SQLRETURN __cdecl SQLDataSources(SQLHENV EnvironmentHandle, SQLUSMALLINT Direction, SQLCHAR *ServerName, SQLSMALLINT BufferLength1, SQLSMALLINT *NameLength1, SQLCHAR *Description, SQLSMALLINT BufferLength2, SQLSMALLINT *NameLength2);
SQLRETURN __cdecl SQLDataSourcesA(SQLHENV henv, SQLUSMALLINT fDirection, SQLCHAR *szDSN, SQLSMALLINT cbDSNMax, SQLSMALLINT *pcbDSN, SQLCHAR *szDescription, SQLSMALLINT cbDescriptionMax, SQLSMALLINT *pcbDescription);
SQLRETURN __cdecl SQLDataSourcesW(SQLHENV henv, SQLUSMALLINT fDirection, SQLWCHAR *szDSN, SQLSMALLINT cbDSNMax, SQLSMALLINT *pcbDSN, SQLWCHAR *szDescription, SQLSMALLINT cbDescriptionMax, SQLSMALLINT *pcbDescription);
SQLRETURN __cdecl SQLDescribeCol(SQLHSTMT StatementHandle, SQLUSMALLINT ColumnNumber, SQLCHAR *ColumnName, SQLSMALLINT BufferLength, SQLSMALLINT *NameLength, SQLSMALLINT *DataType, unsigned __int64 *ColumnSize, SQLSMALLINT *DecimalDigits, SQLSMALLINT *Nullable);
SQLRETURN __cdecl SQLDescribeColA(SQLHSTMT hstmt, SQLUSMALLINT icol, SQLCHAR *szColName, SQLSMALLINT cbColNameMax, SQLSMALLINT *pcbColName, SQLSMALLINT *pfSqlType, unsigned __int64 *pcbColDef, SQLSMALLINT *pibScale, SQLSMALLINT *pfNullable);
SQLRETURN __cdecl SQLDescribeColW(SQLHSTMT hstmt, SQLUSMALLINT icol, SQLWCHAR *szColName, SQLSMALLINT cbColNameMax, SQLSMALLINT *pcbColName, SQLSMALLINT *pfSqlType, unsigned __int64 *pcbColDef, SQLSMALLINT *pibScale, SQLSMALLINT *pfNullable);
SQLRETURN __cdecl SQLDescribeParam(SQLHSTMT hstmt, SQLUSMALLINT ipar, SQLSMALLINT *pfSqlType, unsigned __int64 *pcbParamDef, SQLSMALLINT *pibScale, SQLSMALLINT *pfNullable);
SQLRETURN __cdecl SQLDisconnect(SQLHDBC ConnectionHandle);
SQLRETURN __cdecl SQLDriverConnect(SQLHDBC hdbc, SQLHWND hwnd, SQLCHAR *szConnStrIn, SQLSMALLINT cbConnStrIn, SQLCHAR *szConnStrOut, SQLSMALLINT cbConnStrOutMax, SQLSMALLINT *pcbConnStrOut, SQLUSMALLINT fDriverCompletion);
SQLRETURN __cdecl SQLDriverConnectA(SQLHDBC hdbc, SQLHWND hwnd, SQLCHAR *szConnStrIn, SQLSMALLINT cbConnStrIn, SQLCHAR *szConnStrOut, SQLSMALLINT cbConnStrOutMax, SQLSMALLINT *pcbConnStrOut, SQLUSMALLINT fDriverCompletion);
SQLRETURN __cdecl SQLDriverConnectW(SQLHDBC hdbc, SQLHWND hwnd, SQLWCHAR *szConnStrIn, SQLSMALLINT cbConnStrIn, SQLWCHAR *szConnStrOut, SQLSMALLINT cbConnStrOutMax, SQLSMALLINT *pcbConnStrOut, SQLUSMALLINT fDriverCompletion);
SQLRETURN __cdecl SQLDrivers(SQLHENV henv, SQLUSMALLINT fDirection, SQLCHAR *szDriverDesc, SQLSMALLINT cbDriverDescMax, SQLSMALLINT *pcbDriverDesc, SQLCHAR *szDriverAttributes, SQLSMALLINT cbDrvrAttrMax, SQLSMALLINT *pcbDrvrAttr);
SQLRETURN __cdecl SQLDriversA(SQLHENV henv, SQLUSMALLINT fDirection, SQLCHAR *szDriverDesc, SQLSMALLINT cbDriverDescMax, SQLSMALLINT *pcbDriverDesc, SQLCHAR *szDriverAttributes, SQLSMALLINT cbDrvrAttrMax, SQLSMALLINT *pcbDrvrAttr);
SQLRETURN __cdecl SQLDriversW(SQLHENV henv, SQLUSMALLINT fDirection, SQLWCHAR *szDriverDesc, SQLSMALLINT cbDriverDescMax, SQLSMALLINT *pcbDriverDesc, SQLWCHAR *szDriverAttributes, SQLSMALLINT cbDrvrAttrMax, SQLSMALLINT *pcbDrvrAttr);
SQLRETURN __cdecl SQLEndTran(SQLSMALLINT HandleType, SQLHANDLE Handle, SQLSMALLINT CompletionType);
SQLRETURN __cdecl SQLError(SQLHENV EnvironmentHandle, SQLHDBC ConnectionHandle, SQLHSTMT StatementHandle, SQLCHAR *Sqlstate, SQLINTEGER *NativeError, SQLCHAR *MessageText, SQLSMALLINT BufferLength, SQLSMALLINT *TextLength);
SQLRETURN __cdecl SQLErrorA(SQLHENV henv, SQLHDBC hdbc, SQLHSTMT hstmt, SQLCHAR *szSqlState, SQLINTEGER *pfNativeError, SQLCHAR *szErrorMsg, SQLSMALLINT cbErrorMsgMax, SQLSMALLINT *pcbErrorMsg);
SQLRETURN __cdecl SQLErrorW(SQLHENV henv, SQLHDBC hdbc, SQLHSTMT hstmt, SQLWCHAR *szSqlState, SQLINTEGER *pfNativeError, SQLWCHAR *szErrorMsg, SQLSMALLINT cbErrorMsgMax, SQLSMALLINT *pcbErrorMsg);
SQLRETURN __cdecl SQLExecDirect(SQLHSTMT StatementHandle, SQLCHAR *StatementText, SQLINTEGER TextLength);
SQLRETURN __cdecl SQLExecDirectA(SQLHSTMT hstmt, SQLCHAR *szSqlStr, SQLINTEGER cbSqlStr);
SQLRETURN __cdecl SQLExecDirectW(SQLHSTMT hstmt, SQLWCHAR *szSqlStr, SQLINTEGER cbSqlStr);
SQLRETURN __cdecl SQLExecute(SQLHSTMT StatementHandle);
SQLRETURN __cdecl SQLExtendedFetch(SQLHSTMT hstmt, SQLUSMALLINT fFetchType, __int64 irow, unsigned __int64 *pcrow, SQLUSMALLINT *rgfRowStatus);
SQLRETURN __cdecl SQLFetch(SQLHSTMT StatementHandle);
SQLRETURN __cdecl SQLFetchScroll(SQLHSTMT StatementHandle, SQLSMALLINT FetchOrientation, __int64 FetchOffset);
SQLRETURN __cdecl SQLForeignKeys(SQLHSTMT hstmt, SQLCHAR *szPkCatalogName, SQLSMALLINT cbPkCatalogName, SQLCHAR *szPkSchemaName, SQLSMALLINT cbPkSchemaName, SQLCHAR *szPkTableName, SQLSMALLINT cbPkTableName, SQLCHAR *szFkCatalogName, SQLSMALLINT cbFkCatalogName, SQLCHAR *szFkSchemaName, SQLSMALLINT cbFkSchemaName, SQLCHAR *szFkTableName, SQLSMALLINT cbFkTableName);
SQLRETURN __cdecl SQLForeignKeysA(SQLHSTMT hstmt, SQLCHAR *szPkCatalogName, SQLSMALLINT cbPkCatalogName, SQLCHAR *szPkSchemaName, SQLSMALLINT cbPkSchemaName, SQLCHAR *szPkTableName, SQLSMALLINT cbPkTableName, SQLCHAR *szFkCatalogName, SQLSMALLINT cbFkCatalogName, SQLCHAR *szFkSchemaName, SQLSMALLINT cbFkSchemaName, SQLCHAR *szFkTableName, SQLSMALLINT cbFkTableName);
SQLRETURN __cdecl SQLForeignKeysW(SQLHSTMT hstmt, SQLWCHAR *szPkCatalogName, SQLSMALLINT cbPkCatalogName, SQLWCHAR *szPkSchemaName, SQLSMALLINT cbPkSchemaName, SQLWCHAR *szPkTableName, SQLSMALLINT cbPkTableName, SQLWCHAR *szFkCatalogName, SQLSMALLINT cbFkCatalogName, SQLWCHAR *szFkSchemaName, SQLSMALLINT cbFkSchemaName, SQLWCHAR *szFkTableName, SQLSMALLINT cbFkTableName);
SQLRETURN __cdecl SQLFreeConnect(SQLHDBC ConnectionHandle);
SQLRETURN __cdecl SQLFreeEnv(SQLHENV EnvironmentHandle);
SQLRETURN __cdecl SQLFreeHandle(SQLSMALLINT HandleType, SQLHANDLE Handle);
SQLRETURN __cdecl SQLFreeStmt(SQLHSTMT StatementHandle, SQLUSMALLINT Option);
BOOL __cdecl SQLGetAvailableDrivers(LPCSTR lpszInfFile, LPSTR lpszBuf, WORD cbBufMax, WORD *pcbBufOut);
BOOL __cdecl SQLGetAvailableDriversW(LPCWSTR lpszInfFile, LPWSTR lpszBuf, WORD cbBufMax, WORD *pcbBufOut);
BOOL __cdecl SQLGetConfigMode(UWORD *pwConfigMode);
SQLRETURN __cdecl SQLGetConnectAttr(SQLHDBC ConnectionHandle, SQLINTEGER Attribute, SQLPOINTER Value, SQLINTEGER BufferLength, SQLINTEGER *StringLength);
SQLRETURN __cdecl SQLGetConnectAttrA(SQLHDBC hdbc, SQLINTEGER fAttribute, SQLPOINTER rgbValue, SQLINTEGER cbValueMax, SQLINTEGER *pcbValue);
SQLRETURN __cdecl SQLGetConnectAttrW(SQLHDBC hdbc, SQLINTEGER fAttribute, SQLPOINTER rgbValue, SQLINTEGER cbValueMax, SQLINTEGER *pcbValue);
SQLRETURN __cdecl SQLGetConnectOption(SQLHDBC ConnectionHandle, SQLUSMALLINT Option, SQLPOINTER Value);
SQLRETURN __cdecl SQLGetConnectOptionA(SQLHDBC hdbc, SQLUSMALLINT fOption, SQLPOINTER pvParam);
SQLRETURN __cdecl SQLGetConnectOptionW(SQLHDBC hdbc, SQLUSMALLINT fOption, SQLPOINTER pvParam);
SQLRETURN __cdecl SQLGetCursorName(SQLHSTMT StatementHandle, SQLCHAR *CursorName, SQLSMALLINT BufferLength, SQLSMALLINT *NameLength);
SQLRETURN __cdecl SQLGetCursorNameA(SQLHSTMT hstmt, SQLCHAR *szCursor, SQLSMALLINT cbCursorMax, SQLSMALLINT *pcbCursor);
SQLRETURN __cdecl SQLGetCursorNameW(SQLHSTMT hstmt, SQLWCHAR *szCursor, SQLSMALLINT cbCursorMax, SQLSMALLINT *pcbCursor);
SQLRETURN __cdecl SQLGetData(SQLHSTMT StatementHandle, SQLUSMALLINT ColumnNumber, SQLSMALLINT TargetType, SQLPOINTER TargetValue, __int64 BufferLength, __int64 *StrLen_or_Ind);
SQLRETURN __cdecl SQLGetDescField(SQLHDESC DescriptorHandle, SQLSMALLINT RecNumber, SQLSMALLINT FieldIdentifier, SQLPOINTER Value, SQLINTEGER BufferLength, SQLINTEGER *StringLength);
SQLRETURN __cdecl SQLGetDescFieldA(SQLHDESC hdesc, SQLSMALLINT iRecord, SQLSMALLINT iField, SQLPOINTER rgbValue, SQLINTEGER cbValueMax, SQLINTEGER *pcbValue);
SQLRETURN __cdecl SQLGetDescFieldW(SQLHDESC hdesc, SQLSMALLINT iRecord, SQLSMALLINT iField, SQLPOINTER rgbValue, SQLINTEGER cbValueMax, SQLINTEGER *pcbValue);
SQLRETURN __cdecl SQLGetDescRec(SQLHDESC DescriptorHandle, SQLSMALLINT RecNumber, SQLCHAR *Name, SQLSMALLINT BufferLength, SQLSMALLINT *StringLength, SQLSMALLINT *Type, SQLSMALLINT *SubType, __int64 *Length, SQLSMALLINT *Precision, SQLSMALLINT *Scale, SQLSMALLINT *Nullable);
SQLRETURN __cdecl SQLGetDescRecA(SQLHDESC hdesc, SQLSMALLINT iRecord, SQLCHAR *szName, SQLSMALLINT cbNameMax, SQLSMALLINT *pcbName, SQLSMALLINT *pfType, SQLSMALLINT *pfSubType, __int64 *pLength, SQLSMALLINT *pPrecision, SQLSMALLINT *pScale, SQLSMALLINT *pNullable);
SQLRETURN __cdecl SQLGetDescRecW(SQLHDESC hdesc, SQLSMALLINT iRecord, SQLWCHAR *szName, SQLSMALLINT cbNameMax, SQLSMALLINT *pcbName, SQLSMALLINT *pfType, SQLSMALLINT *pfSubType, __int64 *pLength, SQLSMALLINT *pPrecision, SQLSMALLINT *pScale, SQLSMALLINT *pNullable);
SQLRETURN __cdecl SQLGetDiagField(SQLSMALLINT HandleType, SQLHANDLE Handle, SQLSMALLINT RecNumber, SQLSMALLINT DiagIdentifier, SQLPOINTER DiagInfo, SQLSMALLINT BufferLength, SQLSMALLINT *StringLength);
SQLRETURN __cdecl SQLGetDiagFieldA(SQLSMALLINT fHandleType, SQLHANDLE handle, SQLSMALLINT iRecord, SQLSMALLINT fDiagField, SQLPOINTER rgbDiagInfo, SQLSMALLINT cbDiagInfoMax, SQLSMALLINT *pcbDiagInfo);
SQLRETURN __cdecl SQLGetDiagFieldW(SQLSMALLINT fHandleType, SQLHANDLE handle, SQLSMALLINT iRecord, SQLSMALLINT fDiagField, SQLPOINTER rgbDiagInfo, SQLSMALLINT cbDiagInfoMax, SQLSMALLINT *pcbDiagInfo);
SQLRETURN __cdecl SQLGetDiagRec(SQLSMALLINT HandleType, SQLHANDLE Handle, SQLSMALLINT RecNumber, SQLCHAR *Sqlstate, SQLINTEGER *NativeError, SQLCHAR *MessageText, SQLSMALLINT BufferLength, SQLSMALLINT *TextLength);
SQLRETURN __cdecl SQLGetDiagRecA(SQLSMALLINT fHandleType, SQLHANDLE handle, SQLSMALLINT iRecord, SQLCHAR *szSqlState, SQLINTEGER *pfNativeError, SQLCHAR *szErrorMsg, SQLSMALLINT cbErrorMsgMax, SQLSMALLINT *pcbErrorMsg);
SQLRETURN __cdecl SQLGetDiagRecW(SQLSMALLINT fHandleType, SQLHANDLE handle, SQLSMALLINT iRecord, SQLWCHAR *szSqlState, SQLINTEGER *pfNativeError, SQLWCHAR *szErrorMsg, SQLSMALLINT cbErrorMsgMax, SQLSMALLINT *pcbErrorMsg);
SQLRETURN __cdecl SQLGetEnvAttr(SQLHENV EnvironmentHandle, SQLINTEGER Attribute, SQLPOINTER Value, SQLINTEGER BufferLength, SQLINTEGER *StringLength);
SQLRETURN __cdecl SQLGetFunctions(SQLHDBC ConnectionHandle, SQLUSMALLINT FunctionId, SQLUSMALLINT *Supported);
SQLRETURN __cdecl SQLGetInfo(SQLHDBC ConnectionHandle, SQLUSMALLINT InfoType, SQLPOINTER InfoValue, SQLSMALLINT BufferLength, SQLSMALLINT *StringLength);
SQLRETURN __cdecl SQLGetInfoA(SQLHDBC hdbc, SQLUSMALLINT fInfoType, SQLPOINTER rgbInfoValue, SQLSMALLINT cbInfoValueMax, SQLSMALLINT *pcbInfoValue);
SQLRETURN __cdecl SQLGetInfoW(SQLHDBC hdbc, SQLUSMALLINT fInfoType, SQLPOINTER rgbInfoValue, SQLSMALLINT cbInfoValueMax, SQLSMALLINT *pcbInfoValue);
BOOL __cdecl SQLGetInstalledDrivers(LPSTR lpszBuf, WORD cbBufMax, WORD *pcbBufOut);
BOOL __cdecl SQLGetInstalledDriversW(LPWSTR lpszBuf, WORD cbBufMax, WORD *pcbBufOut);
int __cdecl SQLGetPrivateProfileString(LPCSTR lpszSection, LPCSTR lpszEntry, LPCSTR lpszDefault, LPSTR lpszRetBuffer, int cbRetBuffer, LPCSTR lpszFilename);
int __cdecl SQLGetPrivateProfileStringW(LPCWSTR lpszSection, LPCWSTR lpszEntry, LPCWSTR lpszDefault, LPWSTR lpszRetBuffer, int cbRetBuffer, LPCWSTR lpszFilename);
SQLRETURN __cdecl SQLGetStmtAttr(SQLHSTMT StatementHandle, SQLINTEGER Attribute, SQLPOINTER Value, SQLINTEGER BufferLength, SQLINTEGER *StringLength);
SQLRETURN __cdecl SQLGetStmtAttrA(SQLHSTMT hstmt, SQLINTEGER fAttribute, SQLPOINTER rgbValue, SQLINTEGER cbValueMax, SQLINTEGER *pcbValue);
SQLRETURN __cdecl SQLGetStmtAttrW(SQLHSTMT hstmt, SQLINTEGER fAttribute, SQLPOINTER rgbValue, SQLINTEGER cbValueMax, SQLINTEGER *pcbValue);
SQLRETURN __cdecl SQLGetStmtOption(SQLHSTMT StatementHandle, SQLUSMALLINT Option, SQLPOINTER Value);
BOOL __cdecl SQLGetTranslator(HWND hwnd, LPSTR lpszName, WORD cbNameMax, WORD *pcbNameOut, LPSTR lpszPath, WORD cbPathMax, WORD *pcbPathOut, DWORD *pvOption);
BOOL __cdecl SQLGetTranslatorW(HWND hwnd, LPWSTR lpszName, WORD cbNameMax, WORD *pcbNameOut, LPWSTR lpszPath, WORD cbPathMax, WORD *pcbPathOut, DWORD *pvOption);
SQLRETURN __cdecl SQLGetTypeInfo(SQLHSTMT StatementHandle, SQLSMALLINT DataType);
SQLRETURN __cdecl SQLGetTypeInfoA(SQLHSTMT StatementHandle, SQLSMALLINT DataType);
SQLRETURN __cdecl SQLGetTypeInfoW(SQLHSTMT StatementHandle, SQLSMALLINT DataType);
BOOL __cdecl SQLInstallDriver(LPCSTR lpszInfFile, LPCSTR lpszDriver, LPSTR lpszPath, WORD cbPathMax, WORD *pcbPathOut);
BOOL __cdecl SQLInstallDriverEx(LPCSTR lpszDriver, LPCSTR lpszPathIn, LPSTR lpszPathOut, WORD cbPathOutMax, WORD *pcbPathOut, WORD fRequest, LPDWORD lpdwUsageCount);
BOOL __cdecl SQLInstallDriverExW(LPCWSTR lpszDriver, LPCWSTR lpszPathIn, LPWSTR lpszPathOut, WORD cbPathOutMax, WORD *pcbPathOut, WORD fRequest, LPDWORD lpdwUsageCount);
BOOL __cdecl SQLInstallDriverManager(LPSTR lpszPath, WORD cbPathMax, WORD *pcbPathOut);
BOOL __cdecl SQLInstallDriverManagerW(LPWSTR lpszPath, WORD cbPathMax, WORD *pcbPathOut);
BOOL __cdecl SQLInstallDriverW(LPCWSTR lpszInfFile, LPCWSTR lpszDriver, LPWSTR lpszPath, WORD cbPathMax, WORD *pcbPathOut);
BOOL __cdecl SQLInstallODBC(HWND hwndParent, LPCSTR lpszInfFile, LPCSTR lpszSrcPath, LPCSTR lpszDrivers);
BOOL __cdecl SQLInstallODBCW(HWND hwndParent, LPCWSTR lpszInfFile, LPCWSTR lpszSrcPath, LPCWSTR lpszDrivers);
BOOL __cdecl SQLInstallTranslator(LPCSTR lpszInfFile, LPCSTR lpszTranslator, LPCSTR lpszPathIn, LPSTR lpszPathOut, WORD cbPathOutMax, WORD *pcbPathOut, WORD fRequest, LPDWORD lpdwUsageCount);
BOOL __cdecl SQLInstallTranslatorEx(LPCSTR lpszTranslator, LPCSTR lpszPathIn, LPSTR lpszPathOut, WORD cbPathOutMax, WORD *pcbPathOut, WORD fRequest, LPDWORD lpdwUsageCount);
BOOL __cdecl SQLInstallTranslatorExW(LPCWSTR lpszTranslator, LPCWSTR lpszPathIn, LPWSTR lpszPathOut, WORD cbPathOutMax, WORD *pcbPathOut, WORD fRequest, LPDWORD lpdwUsageCount);
BOOL __cdecl SQLInstallTranslatorW(LPCWSTR lpszInfFile, LPCWSTR lpszTranslator, LPCWSTR lpszPathIn, LPWSTR lpszPathOut, WORD cbPathOutMax, WORD *pcbPathOut, WORD fRequest, LPDWORD lpdwUsageCount);
RETCODE __cdecl SQLInstallerError(WORD iError, DWORD *pfErrorCode, LPSTR lpszErrorMsg, WORD cbErrorMsgMax, WORD *pcbErrorMsg);
RETCODE __cdecl SQLInstallerErrorW(WORD iError, DWORD *pfErrorCode, LPWSTR lpszErrorMsg, WORD cbErrorMsgMax, WORD *pcbErrorMsg);
BOOL __cdecl SQLManageDataSources(HWND hwndParent);
SQLRETURN __cdecl SQLMoreResults(SQLHSTMT hstmt);
SQLRETURN __cdecl SQLNativeSql(SQLHDBC hdbc, SQLCHAR *szSqlStrIn, SQLINTEGER cbSqlStrIn, SQLCHAR *szSqlStr, SQLINTEGER cbSqlStrMax, SQLINTEGER *pcbSqlStr);
SQLRETURN __cdecl SQLNativeSqlA(SQLHDBC hdbc, SQLCHAR *szSqlStrIn, SQLINTEGER cbSqlStrIn, SQLCHAR *szSqlStr, SQLINTEGER cbSqlStrMax, SQLINTEGER *pcbSqlStr);
SQLRETURN __cdecl SQLNativeSqlW(SQLHDBC hdbc, SQLWCHAR *szSqlStrIn, SQLINTEGER cbSqlStrIn, SQLWCHAR *szSqlStr, SQLINTEGER cbSqlStrMax, SQLINTEGER *pcbSqlStr);
SQLRETURN __cdecl SQLNumParams(SQLHSTMT hstmt, SQLSMALLINT *pcpar);
SQLRETURN __cdecl SQLNumResultCols(SQLHSTMT StatementHandle, SQLSMALLINT *ColumnCount);
SQLRETURN __cdecl SQLParamData(SQLHSTMT StatementHandle, SQLPOINTER *Value);
SQLRETURN __cdecl SQLParamOptions(SQLHSTMT hstmt, unsigned __int64 crow, unsigned __int64 *pirow);
RETCODE __cdecl SQLPostInstallerError(DWORD fErrorCode, LPSTR szErrorMsg);
RETCODE __cdecl SQLPostInstallerErrorW(DWORD fErrorCode, LPWSTR szErrorMsg);
SQLRETURN __cdecl SQLPrepare(SQLHSTMT StatementHandle, SQLCHAR *StatementText, SQLINTEGER TextLength);
SQLRETURN __cdecl SQLPrepareA(SQLHSTMT hstmt, SQLCHAR *szSqlStr, SQLINTEGER cbSqlStr);
SQLRETURN __cdecl SQLPrepareW(SQLHSTMT hstmt, SQLWCHAR *szSqlStr, SQLINTEGER cbSqlStr);
SQLRETURN __cdecl SQLPrimaryKeys(SQLHSTMT hstmt, SQLCHAR *szCatalogName, SQLSMALLINT cbCatalogName, SQLCHAR *szSchemaName, SQLSMALLINT cbSchemaName, SQLCHAR *szTableName, SQLSMALLINT cbTableName);
SQLRETURN __cdecl SQLPrimaryKeysA(SQLHSTMT hstmt, SQLCHAR *szCatalogName, SQLSMALLINT cbCatalogName, SQLCHAR *szSchemaName, SQLSMALLINT cbSchemaName, SQLCHAR *szTableName, SQLSMALLINT cbTableName);
SQLRETURN __cdecl SQLPrimaryKeysW(SQLHSTMT hstmt, SQLWCHAR *szCatalogName, SQLSMALLINT cbCatalogName, SQLWCHAR *szSchemaName, SQLSMALLINT cbSchemaName, SQLWCHAR *szTableName, SQLSMALLINT cbTableName);
SQLRETURN __cdecl SQLProcedureColumns(SQLHSTMT hstmt, SQLCHAR *szCatalogName, SQLSMALLINT cbCatalogName, SQLCHAR *szSchemaName, SQLSMALLINT cbSchemaName, SQLCHAR *szProcName, SQLSMALLINT cbProcName, SQLCHAR *szColumnName, SQLSMALLINT cbColumnName);
SQLRETURN __cdecl SQLProcedureColumnsA(SQLHSTMT hstmt, SQLCHAR *szCatalogName, SQLSMALLINT cbCatalogName, SQLCHAR *szSchemaName, SQLSMALLINT cbSchemaName, SQLCHAR *szProcName, SQLSMALLINT cbProcName, SQLCHAR *szColumnName, SQLSMALLINT cbColumnName);
SQLRETURN __cdecl SQLProcedureColumnsW(SQLHSTMT hstmt, SQLWCHAR *szCatalogName, SQLSMALLINT cbCatalogName, SQLWCHAR *szSchemaName, SQLSMALLINT cbSchemaName, SQLWCHAR *szProcName, SQLSMALLINT cbProcName, SQLWCHAR *szColumnName, SQLSMALLINT cbColumnName);
SQLRETURN __cdecl SQLProcedures(SQLHSTMT hstmt, SQLCHAR *szCatalogName, SQLSMALLINT cbCatalogName, SQLCHAR *szSchemaName, SQLSMALLINT cbSchemaName, SQLCHAR *szProcName, SQLSMALLINT cbProcName);
SQLRETURN __cdecl SQLProceduresA(SQLHSTMT hstmt, SQLCHAR *szCatalogName, SQLSMALLINT cbCatalogName, SQLCHAR *szSchemaName, SQLSMALLINT cbSchemaName, SQLCHAR *szProcName, SQLSMALLINT cbProcName);
SQLRETURN __cdecl SQLProceduresW(SQLHSTMT hstmt, SQLWCHAR *szCatalogName, SQLSMALLINT cbCatalogName, SQLWCHAR *szSchemaName, SQLSMALLINT cbSchemaName, SQLWCHAR *szProcName, SQLSMALLINT cbProcName);
SQLRETURN __cdecl SQLPutData(SQLHSTMT StatementHandle, SQLPOINTER Data, __int64 StrLen_or_Ind);
BOOL __cdecl SQLReadFileDSN(LPCSTR lpszFileName, LPCSTR lpszAppName, LPCSTR lpszKeyName, LPSTR lpszString, WORD cbString, WORD *pcbString);
BOOL __cdecl SQLReadFileDSNW(LPCWSTR lpszFileName, LPCWSTR lpszAppName, LPCWSTR lpszKeyName, LPWSTR lpszString, WORD cbString, WORD *pcbString);
BOOL __cdecl SQLRemoveDSNFromIni(LPCSTR lpszDSN);
BOOL __cdecl SQLRemoveDSNFromIniW(LPCWSTR lpszDSN);
BOOL SQLRemoveDefaultDataSource(void);
BOOL __cdecl SQLRemoveDriver(LPCSTR lpszDriver, BOOL fRemoveDSN, LPDWORD lpdwUsageCount);
BOOL __cdecl SQLRemoveDriverManager(LPDWORD lpdwUsageCount);
BOOL __cdecl SQLRemoveDriverW(LPCWSTR lpszDriver, BOOL fRemoveDSN, LPDWORD lpdwUsageCount);
BOOL __cdecl SQLRemoveTranslator(LPCSTR lpszTranslator, LPDWORD lpdwUsageCount);
BOOL __cdecl SQLRemoveTranslatorW(LPCWSTR lpszTranslator, LPDWORD lpdwUsageCount);
SQLRETURN __cdecl SQLRowCount(SQLHSTMT StatementHandle, __int64 *RowCount);
BOOL __cdecl SQLSetConfigMode(UWORD wConfigMode);
SQLRETURN __cdecl SQLSetConnectAttr(SQLHDBC ConnectionHandle, SQLINTEGER Attribute, SQLPOINTER Value, SQLINTEGER StringLength);
SQLRETURN __cdecl SQLSetConnectAttrA(SQLHDBC hdbc, SQLINTEGER fAttribute, SQLPOINTER rgbValue, SQLINTEGER cbValue);
SQLRETURN __cdecl SQLSetConnectAttrW(SQLHDBC hdbc, SQLINTEGER fAttribute, SQLPOINTER rgbValue, SQLINTEGER cbValue);
SQLRETURN __cdecl SQLSetConnectOption(SQLHDBC ConnectionHandle, SQLUSMALLINT Option, unsigned __int64 Value);
SQLRETURN __cdecl SQLSetConnectOptionA(SQLHDBC hdbc, SQLUSMALLINT fOption, unsigned __int64 vParam);
SQLRETURN __cdecl SQLSetConnectOptionW(SQLHDBC hdbc, SQLUSMALLINT fOption, unsigned __int64 vParam);
SQLRETURN __cdecl SQLSetCursorName(SQLHSTMT StatementHandle, SQLCHAR *CursorName, SQLSMALLINT NameLength);
SQLRETURN __cdecl SQLSetCursorNameA(SQLHSTMT hstmt, SQLCHAR *szCursor, SQLSMALLINT cbCursor);
SQLRETURN __cdecl SQLSetCursorNameW(SQLHSTMT hstmt, SQLWCHAR *szCursor, SQLSMALLINT cbCursor);
SQLRETURN __cdecl SQLSetDescField(SQLHDESC DescriptorHandle, SQLSMALLINT RecNumber, SQLSMALLINT FieldIdentifier, SQLPOINTER Value, SQLINTEGER BufferLength);
SQLRETURN __cdecl SQLSetDescFieldA(SQLHDESC DescriptorHandle, SQLSMALLINT RecNumber, SQLSMALLINT FieldIdentifier, SQLPOINTER Value, SQLINTEGER BufferLength);
SQLRETURN __cdecl SQLSetDescFieldW(SQLHDESC DescriptorHandle, SQLSMALLINT RecNumber, SQLSMALLINT FieldIdentifier, SQLPOINTER Value, SQLINTEGER BufferLength);
SQLRETURN __cdecl SQLSetDescRec(SQLHDESC DescriptorHandle, SQLSMALLINT RecNumber, SQLSMALLINT Type, SQLSMALLINT SubType, __int64 Length, SQLSMALLINT Precision, SQLSMALLINT Scale, SQLPOINTER Data, __int64 *StringLength, __int64 *Indicator);
SQLRETURN __cdecl SQLSetEnvAttr(SQLHENV EnvironmentHandle, SQLINTEGER Attribute, SQLPOINTER Value, SQLINTEGER StringLength);
SQLRETURN __cdecl SQLSetParam(SQLHSTMT StatementHandle, SQLUSMALLINT ParameterNumber, SQLSMALLINT ValueType, SQLSMALLINT ParameterType, unsigned __int64 LengthPrecision, SQLSMALLINT ParameterScale, SQLPOINTER ParameterValue, __int64 *StrLen_or_Ind);
SQLRETURN __cdecl SQLSetPos(SQLHSTMT hstmt, unsigned __int16 irow, SQLUSMALLINT fOption, SQLUSMALLINT fLock);
SQLRETURN __cdecl SQLSetScrollOptions(SQLHSTMT hstmt, SQLUSMALLINT fConcurrency, __int64 crowKeyset, SQLUSMALLINT crowRowset);
SQLRETURN __cdecl SQLSetStmtAttr(SQLHSTMT StatementHandle, SQLINTEGER Attribute, SQLPOINTER Value, SQLINTEGER StringLength);
SQLRETURN __cdecl SQLSetStmtAttrA(SQLHSTMT hstmt, SQLINTEGER fAttribute, SQLPOINTER rgbValue, SQLINTEGER cbValueMax);
SQLRETURN __cdecl SQLSetStmtAttrW(SQLHSTMT hstmt, SQLINTEGER fAttribute, SQLPOINTER rgbValue, SQLINTEGER cbValueMax);
SQLRETURN __cdecl SQLSetStmtOption(SQLHSTMT StatementHandle, SQLUSMALLINT Option, unsigned __int64 Value);
SQLRETURN __cdecl SQLSpecialColumns(SQLHSTMT StatementHandle, SQLUSMALLINT IdentifierType, SQLCHAR *CatalogName, SQLSMALLINT NameLength1, SQLCHAR *SchemaName, SQLSMALLINT NameLength2, SQLCHAR *TableName, SQLSMALLINT NameLength3, SQLUSMALLINT Scope, SQLUSMALLINT Nullable);
SQLRETURN __cdecl SQLSpecialColumnsA(SQLHSTMT hstmt, SQLUSMALLINT fColType, SQLCHAR *szCatalogName, SQLSMALLINT cbCatalogName, SQLCHAR *szSchemaName, SQLSMALLINT cbSchemaName, SQLCHAR *szTableName, SQLSMALLINT cbTableName, SQLUSMALLINT fScope, SQLUSMALLINT fNullable);
SQLRETURN __cdecl SQLSpecialColumnsW(SQLHSTMT hstmt, SQLUSMALLINT fColType, SQLWCHAR *szCatalogName, SQLSMALLINT cbCatalogName, SQLWCHAR *szSchemaName, SQLSMALLINT cbSchemaName, SQLWCHAR *szTableName, SQLSMALLINT cbTableName, SQLUSMALLINT fScope, SQLUSMALLINT fNullable);
SQLRETURN __cdecl SQLStatistics(SQLHSTMT StatementHandle, SQLCHAR *CatalogName, SQLSMALLINT NameLength1, SQLCHAR *SchemaName, SQLSMALLINT NameLength2, SQLCHAR *TableName, SQLSMALLINT NameLength3, SQLUSMALLINT Unique, SQLUSMALLINT Reserved);
SQLRETURN __cdecl SQLStatisticsA(SQLHSTMT hstmt, SQLCHAR *szCatalogName, SQLSMALLINT cbCatalogName, SQLCHAR *szSchemaName, SQLSMALLINT cbSchemaName, SQLCHAR *szTableName, SQLSMALLINT cbTableName, SQLUSMALLINT fUnique, SQLUSMALLINT fAccuracy);
SQLRETURN __cdecl SQLStatisticsW(SQLHSTMT hstmt, SQLWCHAR *szCatalogName, SQLSMALLINT cbCatalogName, SQLWCHAR *szSchemaName, SQLSMALLINT cbSchemaName, SQLWCHAR *szTableName, SQLSMALLINT cbTableName, SQLUSMALLINT fUnique, SQLUSMALLINT fAccuracy);
SQLRETURN __cdecl SQLTablePrivileges(SQLHSTMT hstmt, SQLCHAR *szCatalogName, SQLSMALLINT cbCatalogName, SQLCHAR *szSchemaName, SQLSMALLINT cbSchemaName, SQLCHAR *szTableName, SQLSMALLINT cbTableName);
SQLRETURN __cdecl SQLTablePrivilegesA(SQLHSTMT hstmt, SQLCHAR *szCatalogName, SQLSMALLINT cbCatalogName, SQLCHAR *szSchemaName, SQLSMALLINT cbSchemaName, SQLCHAR *szTableName, SQLSMALLINT cbTableName);
SQLRETURN __cdecl SQLTablePrivilegesW(SQLHSTMT hstmt, SQLWCHAR *szCatalogName, SQLSMALLINT cbCatalogName, SQLWCHAR *szSchemaName, SQLSMALLINT cbSchemaName, SQLWCHAR *szTableName, SQLSMALLINT cbTableName);
SQLRETURN __cdecl SQLTables(SQLHSTMT StatementHandle, SQLCHAR *CatalogName, SQLSMALLINT NameLength1, SQLCHAR *SchemaName, SQLSMALLINT NameLength2, SQLCHAR *TableName, SQLSMALLINT NameLength3, SQLCHAR *TableType, SQLSMALLINT NameLength4);
SQLRETURN __cdecl SQLTablesA(SQLHSTMT hstmt, SQLCHAR *szCatalogName, SQLSMALLINT cbCatalogName, SQLCHAR *szSchemaName, SQLSMALLINT cbSchemaName, SQLCHAR *szTableName, SQLSMALLINT cbTableName, SQLCHAR *szTableType, SQLSMALLINT cbTableType);
SQLRETURN __cdecl SQLTablesW(SQLHSTMT hstmt, SQLWCHAR *szCatalogName, SQLSMALLINT cbCatalogName, SQLWCHAR *szSchemaName, SQLSMALLINT cbSchemaName, SQLWCHAR *szTableName, SQLSMALLINT cbTableName, SQLWCHAR *szTableType, SQLSMALLINT cbTableType);
SQLRETURN __cdecl SQLTransact(SQLHENV EnvironmentHandle, SQLHDBC ConnectionHandle, SQLUSMALLINT CompletionType);
BOOL __cdecl SQLValidDSN(LPCSTR lpszDSN);
BOOL __cdecl SQLValidDSNW(LPCWSTR lpszDSN);
BOOL __cdecl SQLWriteDSNToIni(LPCSTR lpszDSN, LPCSTR lpszDriver);
BOOL __cdecl SQLWriteDSNToIniW(LPCWSTR lpszDSN, LPCWSTR lpszDriver);
BOOL __cdecl SQLWriteFileDSN(LPCSTR lpszFileName, LPCSTR lpszAppName, LPCSTR lpszKeyName, LPSTR lpszString);
BOOL __cdecl SQLWriteFileDSNW(LPCWSTR lpszFileName, LPCWSTR lpszAppName, LPCWSTR lpszKeyName, LPWSTR lpszString);
BOOL __cdecl SQLWritePrivateProfileString(LPCSTR lpszSection, LPCSTR lpszEntry, LPCSTR lpszString, LPCSTR lpszFilename);
BOOL __cdecl SQLWritePrivateProfileStringW(LPCWSTR lpszSection, LPCWSTR lpszEntry, LPCWSTR lpszString, LPCWSTR lpszFilename);
char *__cdecl SSL_CIPHER_description(const SSL_CIPHER *, char *buf, int size);
int __cdecl SSL_CIPHER_get_bits(const SSL_CIPHER *c, int *alg_bits);
const char *__cdecl SSL_CIPHER_get_name(const SSL_CIPHER *c);
char *__cdecl SSL_CIPHER_get_version(const SSL_CIPHER *c);
int __cdecl SSL_COMP_add_compression_method(int id, COMP_METHOD *cm);
STACK *SSL_COMP_get_compression_methods(void);
const char *__cdecl SSL_COMP_get_name(const COMP_METHOD *comp);
int __cdecl SSL_CTX_add_client_CA(SSL_CTX *ctx, X509 *x);
int __cdecl SSL_CTX_add_session(SSL_CTX *s, SSL_SESSION *c);
__int64 __cdecl SSL_CTX_callback_ctrl(SSL_CTX *, int, void (*)(void));
int __cdecl SSL_CTX_check_private_key(const SSL_CTX *ctx);
__int64 __cdecl SSL_CTX_ctrl(SSL_CTX *ctx, int cmd, __int64 larg, void *parg);
void __cdecl SSL_CTX_flush_sessions(SSL_CTX *ctx, __int64 tm);
void __cdecl SSL_CTX_free(SSL_CTX *);
X509_STORE *__cdecl SSL_CTX_get_cert_store(const SSL_CTX *);
STACK *__cdecl SSL_CTX_get_client_CA_list(const SSL_CTX *s);
int (__cdecl *__cdecl SSL_CTX_get_client_cert_cb(SSL_CTX *ctx))(SSL *ssl, X509 **x509, EVP_PKEY **pkey);
void *__cdecl SSL_CTX_get_ex_data(const SSL_CTX *ssl, int idx);
int __cdecl SSL_CTX_get_ex_new_index(__int64 argl, void *argp, CRYPTO_EX_new *new_func, CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func);
void (__cdecl *__cdecl SSL_CTX_get_info_callback(SSL_CTX *ctx))(const SSL *ssl, int type, int val);
int __cdecl SSL_CTX_get_quiet_shutdown(const SSL_CTX *ctx);
__int64 __cdecl SSL_CTX_get_timeout(const SSL_CTX *ctx);
int (__cdecl *__cdecl SSL_CTX_get_verify_callback(const SSL_CTX *ctx))(int, X509_STORE_CTX *);
int __cdecl SSL_CTX_get_verify_depth(const SSL_CTX *ctx);
int __cdecl SSL_CTX_get_verify_mode(const SSL_CTX *ctx);
int __cdecl SSL_CTX_load_verify_locations(SSL_CTX *ctx, const char *CAfile, const char *CApath);
SSL_CTX *__cdecl SSL_CTX_new(SSL_METHOD *meth);
int __cdecl SSL_CTX_remove_session(SSL_CTX *, SSL_SESSION *c);
SSL_SESSION *(__cdecl *__cdecl SSL_CTX_sess_get_get_cb(SSL_CTX *ctx))(struct ssl_st *ssl, unsigned __int8 *Data, int len, int *copy);
int (__cdecl *__cdecl SSL_CTX_sess_get_new_cb(SSL_CTX *ctx))(struct ssl_st *ssl, SSL_SESSION *sess);
void (__cdecl *__cdecl SSL_CTX_sess_get_remove_cb(SSL_CTX *ctx))(struct ssl_ctx_st *ctx, SSL_SESSION *sess);
void __cdecl SSL_CTX_sess_set_get_cb(SSL_CTX *ctx, SSL_SESSION *(__cdecl *get_session_cb)(struct ssl_st *ssl, unsigned __int8 *data, int len, int *copy));
void __cdecl SSL_CTX_sess_set_new_cb(SSL_CTX *ctx, int (__cdecl *new_session_cb)(struct ssl_st *ssl, SSL_SESSION *sess));
void __cdecl SSL_CTX_sess_set_remove_cb(SSL_CTX *ctx, void (__cdecl *remove_session_cb)(struct ssl_ctx_st *ctx, SSL_SESSION *sess));
struct lhash_st *__cdecl SSL_CTX_sessions(SSL_CTX *ctx);
void __cdecl SSL_CTX_set_cert_store(SSL_CTX *, X509_STORE *);
void __cdecl SSL_CTX_set_cert_verify_callback(SSL_CTX *ctx, int (__cdecl *cb)(X509_STORE_CTX *, void *), void *arg);
int __cdecl SSL_CTX_set_cipher_list(SSL_CTX *, const char *str);
void __cdecl SSL_CTX_set_client_CA_list(SSL_CTX *ctx, STACK *name_list);
void __cdecl SSL_CTX_set_client_cert_cb(SSL_CTX *ctx, int (__cdecl *client_cert_cb)(SSL *ssl, X509 **x509, EVP_PKEY **pkey));
int __cdecl SSL_CTX_set_client_cert_engine(SSL_CTX *ctx, ENGINE *e);
void __cdecl SSL_CTX_set_cookie_generate_cb(SSL_CTX *ctx, int (__cdecl *app_gen_cookie_cb)(SSL *ssl, unsigned __int8 *cookie, unsigned int *cookie_len));
void __cdecl SSL_CTX_set_cookie_verify_cb(SSL_CTX *ctx, int (__cdecl *app_verify_cookie_cb)(SSL *ssl, unsigned __int8 *cookie, unsigned int cookie_len));
void __cdecl SSL_CTX_set_default_passwd_cb(SSL_CTX *ctx, pem_password_cb *cb);
void __cdecl SSL_CTX_set_default_passwd_cb_userdata(SSL_CTX *ctx, void *u);
int __cdecl SSL_CTX_set_default_verify_paths(SSL_CTX *ctx);
int __cdecl SSL_CTX_set_ex_data(SSL_CTX *ssl, int idx, void *data);
int __cdecl SSL_CTX_set_generate_session_id(SSL_CTX *, GEN_SESSION_CB);
void __cdecl SSL_CTX_set_info_callback(SSL_CTX *ctx, void (__cdecl *cb)(const SSL *ssl, int type, int val));
void __cdecl SSL_CTX_set_msg_callback(SSL_CTX *ctx, void (__cdecl *cb)(int write_p, int version, int content_type, const void *buf, size_t len, SSL *ssl, void *arg));
int __cdecl SSL_CTX_set_purpose(SSL_CTX *s, int purpose);
void __cdecl SSL_CTX_set_quiet_shutdown(SSL_CTX *ctx, int mode);
int __cdecl SSL_CTX_set_session_id_context(SSL_CTX *ctx, const unsigned __int8 *sid_ctx, unsigned int sid_ctx_len);
int __cdecl SSL_CTX_set_ssl_version(SSL_CTX *ctx, SSL_METHOD *meth);
__int64 __cdecl SSL_CTX_set_timeout(SSL_CTX *ctx, __int64 t);
void __cdecl SSL_CTX_set_tmp_dh_callback(SSL_CTX *ctx, DH *(__cdecl *dh)(SSL *ssl, int is_export, int keylength));
void __cdecl SSL_CTX_set_tmp_ecdh_callback(SSL_CTX *ctx, EC_KEY *(__cdecl *ecdh)(SSL *ssl, int is_export, int keylength));
void __cdecl SSL_CTX_set_tmp_rsa_callback(SSL_CTX *ctx, RSA *(__cdecl *cb)(SSL *ssl, int is_export, int keylength));
int __cdecl SSL_CTX_set_trust(SSL_CTX *s, int trust);
void __cdecl SSL_CTX_set_verify(SSL_CTX *ctx, int mode, int (__cdecl *callback)(int, X509_STORE_CTX *));
void __cdecl SSL_CTX_set_verify_depth(SSL_CTX *ctx, int depth);
int __cdecl SSL_CTX_use_PrivateKey(SSL_CTX *ctx, EVP_PKEY *pkey);
int __cdecl SSL_CTX_use_PrivateKey_ASN1(int pk, SSL_CTX *ctx, const unsigned __int8 *d, __int64 len);
int __cdecl SSL_CTX_use_PrivateKey_file(SSL_CTX *ctx, const char *file, int type);
int __cdecl SSL_CTX_use_RSAPrivateKey(SSL_CTX *ctx, RSA *rsa);
int __cdecl SSL_CTX_use_RSAPrivateKey_ASN1(SSL_CTX *ctx, const unsigned __int8 *d, __int64 len);
int __cdecl SSL_CTX_use_RSAPrivateKey_file(SSL_CTX *ctx, const char *file, int type);
int __cdecl SSL_CTX_use_certificate(SSL_CTX *ctx, X509 *x);
int __cdecl SSL_CTX_use_certificate_ASN1(SSL_CTX *ctx, int len, const unsigned __int8 *d);
int __cdecl SSL_CTX_use_certificate_chain_file(SSL_CTX *ctx, const char *file);
int __cdecl SSL_CTX_use_certificate_file(SSL_CTX *ctx, const char *file, int type);
int __cdecl SSL_SESSION_cmp(const SSL_SESSION *a, const SSL_SESSION *b);
void __cdecl SSL_SESSION_free(SSL_SESSION *ses);
void *__cdecl SSL_SESSION_get_ex_data(const SSL_SESSION *ss, int idx);
int __cdecl SSL_SESSION_get_ex_new_index(__int64 argl, void *argp, CRYPTO_EX_new *new_func, CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func);
const unsigned __int8 *__cdecl SSL_SESSION_get_id(const SSL_SESSION *s, unsigned int *len);
__int64 __cdecl SSL_SESSION_get_time(const SSL_SESSION *s);
__int64 __cdecl SSL_SESSION_get_timeout(const SSL_SESSION *s);
unsigned __int64 __cdecl SSL_SESSION_hash(const SSL_SESSION *a);
SSL_SESSION *SSL_SESSION_new(void);
int __cdecl SSL_SESSION_print(BIO *fp, const SSL_SESSION *ses);
int __cdecl SSL_SESSION_print_fp(FILE *fp, const SSL_SESSION *ses);
int __cdecl SSL_SESSION_set_ex_data(SSL_SESSION *ss, int idx, void *data);
__int64 __cdecl SSL_SESSION_set_time(SSL_SESSION *s, __int64 t);
__int64 __cdecl SSL_SESSION_set_timeout(SSL_SESSION *s, __int64 t);
int __cdecl SSL_accept(SSL *ssl);
int __cdecl SSL_add_client_CA(SSL *ssl, X509 *x);
int __cdecl SSL_add_dir_cert_subjects_to_stack(STACK *stackCAs, const char *dir);
int __cdecl SSL_add_file_cert_subjects_to_stack(STACK *stackCAs, const char *file);
const char *__cdecl SSL_alert_desc_string(int value);
const char *__cdecl SSL_alert_desc_string_long(int value);
const char *__cdecl SSL_alert_type_string(int value);
const char *__cdecl SSL_alert_type_string_long(int value);
__int64 __cdecl SSL_callback_ctrl(SSL *, int, void (*)(void));
int __cdecl SSL_check_private_key(const SSL *ctx);
int __cdecl SSL_clear(SSL *s);
int __cdecl SSL_connect(SSL *ssl);
void __cdecl SSL_copy_session_id(SSL *to, const SSL *from);
__int64 __cdecl SSL_ctrl(SSL *ssl, int cmd, __int64 larg, void *parg);
int __cdecl SSL_do_handshake(SSL *s);
SSL *__cdecl SSL_dup(SSL *ssl);
STACK *__cdecl SSL_dup_CA_list(STACK *sk);
void __cdecl SSL_free(SSL *ssl);
SSL_SESSION *__cdecl SSL_get1_session(SSL *ssl);
SSL_CTX *__cdecl SSL_get_SSL_CTX(const SSL *ssl);
X509 *__cdecl SSL_get_certificate(const SSL *ssl);
const char *__cdecl SSL_get_cipher_list(const SSL *s, int n);
STACK *__cdecl SSL_get_ciphers(const SSL *s);
STACK *__cdecl SSL_get_client_CA_list(const SSL *s);
SSL_CIPHER *__cdecl SSL_get_current_cipher(const SSL *s);
const COMP_METHOD *__cdecl SSL_get_current_compression(SSL *s);
const COMP_METHOD *__cdecl SSL_get_current_expansion(SSL *s);
__int64 __cdecl SSL_get_default_timeout(const SSL *s);
int __cdecl SSL_get_error(const SSL *s, int ret_code);
void *__cdecl SSL_get_ex_data(const SSL *ssl, int idx);
int SSL_get_ex_data_X509_STORE_CTX_idx(void);
int __cdecl SSL_get_ex_new_index(__int64 argl, void *argp, CRYPTO_EX_new *new_func, CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func);
int __cdecl SSL_get_fd(const SSL *s);
size_t __cdecl SSL_get_finished(const SSL *s, void *buf, size_t count);
void (__cdecl *__cdecl SSL_get_info_callback(const SSL *ssl))(const SSL *ssl, int type, int val);
STACK *__cdecl SSL_get_peer_cert_chain(const SSL *s);
X509 *__cdecl SSL_get_peer_certificate(const SSL *s);
size_t __cdecl SSL_get_peer_finished(const SSL *s, void *buf, size_t count);
struct evp_pkey_st *__cdecl SSL_get_privatekey(SSL *ssl);
int __cdecl SSL_get_quiet_shutdown(const SSL *ssl);
BIO *__cdecl SSL_get_rbio(const SSL *s);
int __cdecl SSL_get_read_ahead(const SSL *s);
int __cdecl SSL_get_rfd(const SSL *s);
const char *__cdecl SSL_get_servername(const SSL *s, const int type);
int __cdecl SSL_get_servername_type(const SSL *s);
SSL_SESSION *__cdecl SSL_get_session(const SSL *ssl);
char *__cdecl SSL_get_shared_ciphers(const SSL *s, char *buf, int len);
int __cdecl SSL_get_shutdown(const SSL *ssl);
SSL_METHOD *__cdecl SSL_get_ssl_method(SSL *s);
int (__cdecl *__cdecl SSL_get_verify_callback(const SSL *s))(int, X509_STORE_CTX *);
int __cdecl SSL_get_verify_depth(const SSL *s);
int __cdecl SSL_get_verify_mode(const SSL *s);
__int64 __cdecl SSL_get_verify_result(const SSL *ssl);
const char *__cdecl SSL_get_version(const SSL *s);
BIO *__cdecl SSL_get_wbio(const SSL *s);
int __cdecl SSL_get_wfd(const SSL *s);
int __cdecl SSL_has_matching_session_id(const SSL *ssl, const unsigned __int8 *id, unsigned int id_len);
int SSL_library_init(void);
STACK *__cdecl SSL_load_client_CA_file(const char *file);
void SSL_load_error_strings(void);
SSL *__cdecl SSL_new(SSL_CTX *ctx);
int __cdecl SSL_peek(SSL *ssl, void *buf, int num);
int __cdecl SSL_pending(const SSL *s);
int __cdecl SSL_read(SSL *ssl, void *buf, int num);
int __cdecl SSL_renegotiate(SSL *s);
int __cdecl SSL_renegotiate_pending(SSL *s);
const char *__cdecl SSL_rstate_string(const SSL *s);
const char *__cdecl SSL_rstate_string_long(const SSL *s);
SSL_CTX *__cdecl SSL_set_SSL_CTX(SSL *ssl, SSL_CTX *ctx);
void __cdecl SSL_set_accept_state(SSL *s);
void __cdecl SSL_set_bio(SSL *s, BIO *rbio, BIO *wbio);
int __cdecl SSL_set_cipher_list(SSL *s, const char *str);
void __cdecl SSL_set_client_CA_list(SSL *s, STACK *name_list);
void __cdecl SSL_set_connect_state(SSL *s);
int __cdecl SSL_set_ex_data(SSL *ssl, int idx, void *data);
int __cdecl SSL_set_fd(SSL *s, int fd);
int __cdecl SSL_set_generate_session_id(SSL *, GEN_SESSION_CB);
void __cdecl SSL_set_info_callback(SSL *ssl, void (__cdecl *cb)(const SSL *ssl, int type, int val));
void __cdecl SSL_set_msg_callback(SSL *ssl, void (__cdecl *cb)(int write_p, int version, int content_type, const void *buf, size_t len, SSL *ssl, void *arg));
int __cdecl SSL_set_purpose(SSL *s, int purpose);
void __cdecl SSL_set_quiet_shutdown(SSL *ssl, int mode);
void __cdecl SSL_set_read_ahead(SSL *s, int yes);
int __cdecl SSL_set_rfd(SSL *s, int fd);
int __cdecl SSL_set_session(SSL *to, SSL_SESSION *session);
int __cdecl SSL_set_session_id_context(SSL *ssl, const unsigned __int8 *sid_ctx, unsigned int sid_ctx_len);
void __cdecl SSL_set_shutdown(SSL *ssl, int mode);
int __cdecl SSL_set_ssl_method(SSL *s, SSL_METHOD *method);
void __cdecl SSL_set_tmp_dh_callback(SSL *ssl, DH *(__cdecl *dh)(SSL *ssl, int is_export, int keylength));
void __cdecl SSL_set_tmp_ecdh_callback(SSL *ssl, EC_KEY *(__cdecl *ecdh)(SSL *ssl, int is_export, int keylength));
void __cdecl SSL_set_tmp_rsa_callback(SSL *ssl, RSA *(__cdecl *cb)(SSL *ssl, int is_export, int keylength));
int __cdecl SSL_set_trust(SSL *s, int trust);
void __cdecl SSL_set_verify(SSL *s, int mode, int (__cdecl *callback)(int ok, X509_STORE_CTX *ctx));
void __cdecl SSL_set_verify_depth(SSL *s, int depth);
void __cdecl SSL_set_verify_result(SSL *ssl, __int64 v);
int __cdecl SSL_set_wfd(SSL *s, int fd);
int __cdecl SSL_shutdown(SSL *s);
int __cdecl SSL_state(const SSL *ssl);
const char *__cdecl SSL_state_string(const SSL *s);
const char *__cdecl SSL_state_string_long(const SSL *s);
int __cdecl SSL_use_PrivateKey(SSL *ssl, EVP_PKEY *pkey);
int __cdecl SSL_use_PrivateKey_ASN1(int pk, SSL *ssl, const unsigned __int8 *d, __int64 len);
int __cdecl SSL_use_PrivateKey_file(SSL *ssl, const char *file, int type);
int __cdecl SSL_use_RSAPrivateKey(SSL *ssl, RSA *rsa);
int __cdecl SSL_use_RSAPrivateKey_ASN1(SSL *ssl, unsigned __int8 *d, __int64 len);
int __cdecl SSL_use_RSAPrivateKey_file(SSL *ssl, const char *file, int type);
int __cdecl SSL_use_certificate(SSL *ssl, X509 *x);
int __cdecl SSL_use_certificate_ASN1(SSL *ssl, const unsigned __int8 *d, int len);
int __cdecl SSL_use_certificate_file(SSL *ssl, const char *file, int type);
int __cdecl SSL_version(const SSL *ssl);
int __cdecl SSL_want(const SSL *s);
int __cdecl SSL_write(SSL *ssl, const void *buf, int num);
unsigned __int64 SSLeay(void);
const char *__cdecl SSLeay_version(int type);
SSL_METHOD *SSLv23_client_method(void);
SSL_METHOD *SSLv23_method(void);
SSL_METHOD *SSLv23_server_method(void);
SSL_METHOD *SSLv2_client_method(void);
SSL_METHOD *SSLv2_method(void);
SSL_METHOD *SSLv2_server_method(void);
SSL_METHOD *SSLv3_client_method(void);
SSL_METHOD *SSLv3_method(void);
SSL_METHOD *SSLv3_server_method(void);
MACRO__SS _SS_MAXSIZE;
int __cdecl STORE_ATTR_INFO_compare(STORE_ATTR_INFO *a, STORE_ATTR_INFO *b);
int __cdecl STORE_ATTR_INFO_free(STORE_ATTR_INFO *attrs);
char *__cdecl STORE_ATTR_INFO_get0_cstr(STORE_ATTR_INFO *attrs, STORE_ATTR_TYPES code);
X509_NAME *__cdecl STORE_ATTR_INFO_get0_dn(STORE_ATTR_INFO *attrs, STORE_ATTR_TYPES code);
BIGNUM *__cdecl STORE_ATTR_INFO_get0_number(STORE_ATTR_INFO *attrs, STORE_ATTR_TYPES code);
unsigned __int8 *__cdecl STORE_ATTR_INFO_get0_sha1str(STORE_ATTR_INFO *attrs, STORE_ATTR_TYPES code);
int __cdecl STORE_ATTR_INFO_in(STORE_ATTR_INFO *a, STORE_ATTR_INFO *b);
int __cdecl STORE_ATTR_INFO_in_ex(STORE_ATTR_INFO *a, STORE_ATTR_INFO *b);
int __cdecl STORE_ATTR_INFO_in_range(STORE_ATTR_INFO *a, STORE_ATTR_INFO *b);
int __cdecl STORE_ATTR_INFO_modify_cstr(STORE_ATTR_INFO *attrs, STORE_ATTR_TYPES code, char *cstr, size_t cstr_size);
int __cdecl STORE_ATTR_INFO_modify_dn(STORE_ATTR_INFO *attrs, STORE_ATTR_TYPES code, X509_NAME *dn);
int __cdecl STORE_ATTR_INFO_modify_number(STORE_ATTR_INFO *attrs, STORE_ATTR_TYPES code, BIGNUM *number);
int __cdecl STORE_ATTR_INFO_modify_sha1str(STORE_ATTR_INFO *attrs, STORE_ATTR_TYPES code, unsigned __int8 *sha1str, size_t sha1str_size);
STORE_ATTR_INFO *STORE_ATTR_INFO_new(void);
int __cdecl STORE_ATTR_INFO_set_cstr(STORE_ATTR_INFO *attrs, STORE_ATTR_TYPES code, char *cstr, size_t cstr_size);
int __cdecl STORE_ATTR_INFO_set_dn(STORE_ATTR_INFO *attrs, STORE_ATTR_TYPES code, X509_NAME *dn);
int __cdecl STORE_ATTR_INFO_set_number(STORE_ATTR_INFO *attrs, STORE_ATTR_TYPES code, BIGNUM *number);
int __cdecl STORE_ATTR_INFO_set_sha1str(STORE_ATTR_INFO *attrs, STORE_ATTR_TYPES code, unsigned __int8 *sha1str, size_t sha1str_size);
const STORE_METHOD *STORE_Memory(void);
void __cdecl STORE_OBJECT_free(STORE_OBJECT *data);
STORE_OBJECT *STORE_OBJECT_new(void);
const int STORE_attr_sizes[12];
STORE_METHOD *__cdecl STORE_create_method(char *name);
int __cdecl STORE_ctrl(STORE *store, int cmd, __int64 i, void *p, void (*f)(void));
int __cdecl STORE_delete_arbitrary(STORE *e, OPENSSL_ITEM attributes[], OPENSSL_ITEM parameters[]);
int __cdecl STORE_delete_certificate(STORE *e, OPENSSL_ITEM attributes[], OPENSSL_ITEM parameters[]);
int __cdecl STORE_delete_crl(STORE *e, OPENSSL_ITEM attributes[], OPENSSL_ITEM parameters[]);
int __cdecl STORE_delete_number(STORE *e, OPENSSL_ITEM attributes[], OPENSSL_ITEM parameters[]);
int __cdecl STORE_delete_private_key(STORE *e, OPENSSL_ITEM attributes[], OPENSSL_ITEM parameters[]);
int __cdecl STORE_delete_public_key(STORE *e, OPENSSL_ITEM attributes[], OPENSSL_ITEM parameters[]);
void __cdecl STORE_destroy_method(STORE_METHOD *store_method);
void __cdecl STORE_free(STORE *ui);
X509_CRL *__cdecl STORE_generate_crl(STORE *e, OPENSSL_ITEM attributes[], OPENSSL_ITEM parameters[]);
EVP_PKEY *__cdecl STORE_generate_key(STORE *e, OPENSSL_ITEM attributes[], OPENSSL_ITEM parameters[]);
BUF_MEM *__cdecl STORE_get_arbitrary(STORE *e, OPENSSL_ITEM attributes[], OPENSSL_ITEM parameters[]);
X509 *__cdecl STORE_get_certificate(STORE *e, OPENSSL_ITEM attributes[], OPENSSL_ITEM parameters[]);
X509_CRL *__cdecl STORE_get_crl(STORE *e, OPENSSL_ITEM attributes[], OPENSSL_ITEM parameters[]);
void *__cdecl STORE_get_ex_data(STORE *r, int idx);
int __cdecl STORE_get_ex_new_index(__int64 argl, void *argp, CRYPTO_EX_new *new_func, CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func);
const STORE_METHOD *__cdecl STORE_get_method(STORE *store);
BIGNUM *__cdecl STORE_get_number(STORE *e, OPENSSL_ITEM attributes[], OPENSSL_ITEM parameters[]);
EVP_PKEY *__cdecl STORE_get_private_key(STORE *e, OPENSSL_ITEM attributes[], OPENSSL_ITEM parameters[]);
EVP_PKEY *__cdecl STORE_get_public_key(STORE *e, OPENSSL_ITEM attributes[], OPENSSL_ITEM parameters[]);
int __cdecl STORE_list_certificate_end(STORE *e, void *handle);
int __cdecl STORE_list_certificate_endp(STORE *e, void *handle);
X509 *__cdecl STORE_list_certificate_next(STORE *e, void *handle);
void *__cdecl STORE_list_certificate_start(STORE *e, OPENSSL_ITEM attributes[], OPENSSL_ITEM parameters[]);
int __cdecl STORE_list_crl_end(STORE *e, void *handle);
int __cdecl STORE_list_crl_endp(STORE *e, void *handle);
X509_CRL *__cdecl STORE_list_crl_next(STORE *e, void *handle);
void *__cdecl STORE_list_crl_start(STORE *e, OPENSSL_ITEM attributes[], OPENSSL_ITEM parameters[]);
int __cdecl STORE_list_private_key_end(STORE *e, void *handle);
int __cdecl STORE_list_private_key_endp(STORE *e, void *handle);
EVP_PKEY *__cdecl STORE_list_private_key_next(STORE *e, void *handle);
void *__cdecl STORE_list_private_key_start(STORE *e, OPENSSL_ITEM attributes[], OPENSSL_ITEM parameters[]);
int __cdecl STORE_list_public_key_end(STORE *e, void *handle);
int __cdecl STORE_list_public_key_endp(STORE *e, void *handle);
EVP_PKEY *__cdecl STORE_list_public_key_next(STORE *e, void *handle);
void *__cdecl STORE_list_public_key_start(STORE *e, OPENSSL_ITEM attributes[], OPENSSL_ITEM parameters[]);
STORE_CLEANUP_FUNC_PTR __cdecl STORE_method_get_cleanup_function(STORE_METHOD *sm);
STORE_CTRL_FUNC_PTR __cdecl STORE_method_get_ctrl_function(STORE_METHOD *sm);
STORE_HANDLE_OBJECT_FUNC_PTR __cdecl STORE_method_get_delete_function(STORE_METHOD *sm);
STORE_GENERATE_OBJECT_FUNC_PTR __cdecl STORE_method_get_generate_function(STORE_METHOD *sm);
STORE_GET_OBJECT_FUNC_PTR __cdecl STORE_method_get_get_function(STORE_METHOD *sm);
STORE_INITIALISE_FUNC_PTR __cdecl STORE_method_get_initialise_function(STORE_METHOD *sm);
STORE_END_OBJECT_FUNC_PTR __cdecl STORE_method_get_list_end_function(STORE_METHOD *sm);
STORE_NEXT_OBJECT_FUNC_PTR __cdecl STORE_method_get_list_next_function(STORE_METHOD *sm);
STORE_START_OBJECT_FUNC_PTR __cdecl STORE_method_get_list_start_function(STORE_METHOD *sm);
STORE_GENERIC_FUNC_PTR __cdecl STORE_method_get_lock_store_function(STORE_METHOD *sm);
STORE_MODIFY_OBJECT_FUNC_PTR __cdecl STORE_method_get_modify_function(STORE_METHOD *sm);
STORE_HANDLE_OBJECT_FUNC_PTR __cdecl STORE_method_get_revoke_function(STORE_METHOD *sm);
STORE_STORE_OBJECT_FUNC_PTR __cdecl STORE_method_get_store_function(STORE_METHOD *sm);
STORE_GENERIC_FUNC_PTR __cdecl STORE_method_get_unlock_store_function(STORE_METHOD *sm);
STORE_GENERIC_FUNC_PTR __cdecl STORE_method_get_update_store_function(STORE_METHOD *sm);
int __cdecl STORE_method_set_cleanup_function(STORE_METHOD *sm, STORE_CLEANUP_FUNC_PTR clean_f);
int __cdecl STORE_method_set_ctrl_function(STORE_METHOD *sm, STORE_CTRL_FUNC_PTR ctrl_f);
int __cdecl STORE_method_set_delete_function(STORE_METHOD *sm, STORE_HANDLE_OBJECT_FUNC_PTR delete_f);
int __cdecl STORE_method_set_generate_function(STORE_METHOD *sm, STORE_GENERATE_OBJECT_FUNC_PTR generate_f);
int __cdecl STORE_method_set_get_function(STORE_METHOD *sm, STORE_GET_OBJECT_FUNC_PTR get_f);
int __cdecl STORE_method_set_initialise_function(STORE_METHOD *sm, STORE_INITIALISE_FUNC_PTR init_f);
int __cdecl STORE_method_set_list_end_function(STORE_METHOD *sm, STORE_END_OBJECT_FUNC_PTR list_end_f);
int __cdecl STORE_method_set_list_next_function(STORE_METHOD *sm, STORE_NEXT_OBJECT_FUNC_PTR list_next_f);
int __cdecl STORE_method_set_list_start_function(STORE_METHOD *sm, STORE_START_OBJECT_FUNC_PTR list_start_f);
int __cdecl STORE_method_set_lock_store_function(STORE_METHOD *sm, STORE_GENERIC_FUNC_PTR);
int __cdecl STORE_method_set_modify_function(STORE_METHOD *sm, STORE_MODIFY_OBJECT_FUNC_PTR store_f);
int __cdecl STORE_method_set_revoke_function(STORE_METHOD *sm, STORE_HANDLE_OBJECT_FUNC_PTR revoke_f);
int __cdecl STORE_method_set_store_function(STORE_METHOD *sm, STORE_STORE_OBJECT_FUNC_PTR store_f);
int __cdecl STORE_method_set_unlock_store_function(STORE_METHOD *sm, STORE_GENERIC_FUNC_PTR);
int __cdecl STORE_method_set_update_store_function(STORE_METHOD *sm, STORE_GENERIC_FUNC_PTR);
int __cdecl STORE_modify_arbitrary(STORE *e, OPENSSL_ITEM search_attributes[], OPENSSL_ITEM add_sttributes[], OPENSSL_ITEM modify_attributes[], OPENSSL_ITEM delete_attributes[], OPENSSL_ITEM parameters[]);
int __cdecl STORE_modify_certificate(STORE *e, OPENSSL_ITEM search_attributes[], OPENSSL_ITEM add_attributes[], OPENSSL_ITEM modify_attributes[], OPENSSL_ITEM delete_attributes[], OPENSSL_ITEM parameters[]);
int __cdecl STORE_modify_crl(STORE *e, OPENSSL_ITEM search_attributes[], OPENSSL_ITEM add_sttributes[], OPENSSL_ITEM modify_attributes[], OPENSSL_ITEM delete_attributes[], OPENSSL_ITEM parameters[]);
int __cdecl STORE_modify_number(STORE *e, OPENSSL_ITEM search_attributes[], OPENSSL_ITEM add_sttributes[], OPENSSL_ITEM modify_attributes[], OPENSSL_ITEM delete_attributes[], OPENSSL_ITEM parameters[]);
int __cdecl STORE_modify_private_key(STORE *e, OPENSSL_ITEM search_attributes[], OPENSSL_ITEM add_sttributes[], OPENSSL_ITEM modify_attributes[], OPENSSL_ITEM delete_attributes[], OPENSSL_ITEM parameters[]);
int __cdecl STORE_modify_public_key(STORE *e, OPENSSL_ITEM search_attributes[], OPENSSL_ITEM add_sttributes[], OPENSSL_ITEM modify_attributes[], OPENSSL_ITEM delete_attributes[], OPENSSL_ITEM parameters[]);
STORE *__cdecl STORE_new_engine(ENGINE *engine);
STORE *__cdecl STORE_new_method(const STORE_METHOD *method);
const char *const STORE_object_type_string[7];
const int STORE_param_sizes[7];
int __cdecl STORE_parse_attrs_end(void *handle);
int __cdecl STORE_parse_attrs_endp(void *handle);
STORE_ATTR_INFO *__cdecl STORE_parse_attrs_next(void *handle);
void *__cdecl STORE_parse_attrs_start(OPENSSL_ITEM *attributes);
int __cdecl STORE_revoke_certificate(STORE *e, OPENSSL_ITEM attributes[], OPENSSL_ITEM parameters[]);
int __cdecl STORE_revoke_private_key(STORE *e, OPENSSL_ITEM attributes[], OPENSSL_ITEM parameters[]);
int __cdecl STORE_revoke_public_key(STORE *e, OPENSSL_ITEM attributes[], OPENSSL_ITEM parameters[]);
int __cdecl STORE_set_ex_data(STORE *r, int idx, void *arg);
const STORE_METHOD *__cdecl STORE_set_method(STORE *store, const STORE_METHOD *meth);
int __cdecl STORE_store_arbitrary(STORE *e, BUF_MEM *data, OPENSSL_ITEM attributes[], OPENSSL_ITEM parameters[]);
int __cdecl STORE_store_certificate(STORE *e, X509 *data, OPENSSL_ITEM attributes[], OPENSSL_ITEM parameters[]);
int __cdecl STORE_store_crl(STORE *e, X509_CRL *data, OPENSSL_ITEM attributes[], OPENSSL_ITEM parameters[]);
int __cdecl STORE_store_number(STORE *e, BIGNUM *data, OPENSSL_ITEM attributes[], OPENSSL_ITEM parameters[]);
int __cdecl STORE_store_private_key(STORE *e, EVP_PKEY *data, OPENSSL_ITEM attributes[], OPENSSL_ITEM parameters[]);
int __cdecl STORE_store_public_key(STORE *e, EVP_PKEY *data, OPENSSL_ITEM attributes[], OPENSSL_ITEM parameters[]);
static netsnmp_container *__cdecl SUBCONTAINER_FIND(netsnmp_container *x, const char *name);
MACRO_OK_0 _SUBWIN;
void __cdecl SXNETID_free(SXNETID *a);
const ASN1_ITEM SXNETID_it;
SXNETID *SXNETID_new(void);
int __cdecl SXNET_add_id_INTEGER(SXNET **psx, ASN1_INTEGER *izone, char *user, int userlen);
int __cdecl SXNET_add_id_asc(SXNET **psx, char *zone, char *user, int userlen);
int __cdecl SXNET_add_id_ulong(SXNET **psx, unsigned __int64 lzone, char *user, int userlen);
void __cdecl SXNET_free(SXNET *a);
ASN1_OCTET_STRING *__cdecl SXNET_get_id_INTEGER(SXNET *sx, ASN1_INTEGER *zone);
ASN1_OCTET_STRING *__cdecl SXNET_get_id_asc(SXNET *sx, char *zone);
ASN1_OCTET_STRING *__cdecl SXNET_get_id_ulong(SXNET *sx, unsigned __int64 lzone);
const ASN1_ITEM SXNET_it;
SXNET *SXNET_new(void);
MACRO__SYS _SYS_CONF_H_;
MACRO__SYS_NAMELEN _SYS_NAMELEN;
int TABSIZE;
MACRO__TANDEM _TANDEM_SOURCE;
SSL_METHOD *TLSv1_client_method(void);
SSL_METHOD *TLSv1_method(void);
SSL_METHOD *TLSv1_server_method(void);
int __cdecl TXTRecordContainsKey(uint16_t txtLen, const void *txtRecord, const char *key);
void __cdecl TXTRecordCreate(TXTRecordRef *txtRecord, uint16_t bufferLen, void *buffer);
void __cdecl TXTRecordDeallocate(TXTRecordRef *txtRecord);
const void *__cdecl TXTRecordGetBytesPtr(const TXTRecordRef *txtRecord);
uint16_t __cdecl TXTRecordGetCount(uint16_t txtLen, const void *txtRecord);
DNSServiceErrorType __cdecl TXTRecordGetItemAtIndex(uint16_t txtLen, const void *txtRecord, uint16_t itemIndex, uint16_t keyBufLen, char *key, uint8_t *valueLen, const void **value);
uint16_t __cdecl TXTRecordGetLength(const TXTRecordRef *txtRecord);
const void *__cdecl TXTRecordGetValuePtr(uint16_t txtLen, const void *txtRecord, const char *key, uint8_t *valueLen);
DNSServiceErrorType __cdecl TXTRecordRemoveValue(TXTRecordRef *txtRecord, const char *key);
DNSServiceErrorType __cdecl TXTRecordSetValue(TXTRecordRef *txtRecord, const char *key, uint8_t valueSize, const void *value);
int __cdecl TXT_DB_create_index(TXT_DB *db, int field, int (__cdecl *qual)(char **), LHASH_HASH_FN_TYPE hash, LHASH_COMP_FN_TYPE cmp);
void __cdecl TXT_DB_free(TXT_DB *db);
char **__cdecl TXT_DB_get_by_index(TXT_DB *db, int idx, char **value);
int __cdecl TXT_DB_insert(TXT_DB *db, char **value);
TXT_DB *__cdecl TXT_DB_read(BIO *in, int num);
__int64 __cdecl TXT_DB_write(BIO *out, TXT_DB *db);
FIELDTYPE *TYPE_ALNUM;
FIELDTYPE *TYPE_ALPHA;
FIELDTYPE *TYPE_ENUM;
FIELDTYPE *TYPE_INTEGER;
FIELDTYPE *TYPE_IPV4;
FIELDTYPE *TYPE_NUMERIC;
FIELDTYPE *TYPE_REGEXP;
UI_METHOD *UI_OpenSSL(void);
int __cdecl UI_UTIL_read_pw(char *buf, char *buff, int size, const char *prompt, int verify);
int __cdecl UI_UTIL_read_pw_string(char *buf, int length, const char *prompt, int verify);
int __cdecl UI_add_error_string(UI *ui, const char *text);
int __cdecl UI_add_info_string(UI *ui, const char *text);
int __cdecl UI_add_input_boolean(UI *ui, const char *prompt, const char *action_desc, const char *ok_chars, const char *cancel_chars, int flags, char *result_buf);
int __cdecl UI_add_input_string(UI *ui, const char *prompt, int flags, char *result_buf, int minsize, int maxsize);
void *__cdecl UI_add_user_data(UI *ui, void *user_data);
int __cdecl UI_add_verify_string(UI *ui, const char *prompt, int flags, char *result_buf, int minsize, int maxsize, const char *test_buf);
char *__cdecl UI_construct_prompt(UI *ui_method, const char *object_desc, const char *object_name);
UI_METHOD *__cdecl UI_create_method(char *name);
int __cdecl UI_ctrl(UI *ui, int cmd, __int64 i, void *p, void (*f)(void));
void __cdecl UI_destroy_method(UI_METHOD *ui_method);
int __cdecl UI_dup_error_string(UI *ui, const char *text);
int __cdecl UI_dup_info_string(UI *ui, const char *text);
int __cdecl UI_dup_input_boolean(UI *ui, const char *prompt, const char *action_desc, const char *ok_chars, const char *cancel_chars, int flags, char *result_buf);
int __cdecl UI_dup_input_string(UI *ui, const char *prompt, int flags, char *result_buf, int minsize, int maxsize);
int __cdecl UI_dup_verify_string(UI *ui, const char *prompt, int flags, char *result_buf, int minsize, int maxsize, const char *test_buf);
void __cdecl UI_free(UI *ui);
const char *__cdecl UI_get0_action_string(UI_STRING *uis);
const char *__cdecl UI_get0_output_string(UI_STRING *uis);
const char *__cdecl UI_get0_result(UI *ui, int i);
const char *__cdecl UI_get0_result_string(UI_STRING *uis);
const char *__cdecl UI_get0_test_string(UI_STRING *uis);
void *__cdecl UI_get0_user_data(UI *ui);
const UI_METHOD *UI_get_default_method(void);
void *__cdecl UI_get_ex_data(UI *r, int idx);
int __cdecl UI_get_ex_new_index(__int64 argl, void *argp, CRYPTO_EX_new *new_func, CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func);
int __cdecl UI_get_input_flags(UI_STRING *uis);
const UI_METHOD *__cdecl UI_get_method(UI *ui);
int __cdecl UI_get_result_maxsize(UI_STRING *uis);
int __cdecl UI_get_result_minsize(UI_STRING *uis);
enum UI_string_types __cdecl UI_get_string_type(UI_STRING *uis);
int (__cdecl *__cdecl UI_method_get_closer(UI_METHOD *method))(UI *);
int (__cdecl *__cdecl UI_method_get_flusher(UI_METHOD *method))(UI *);
int (__cdecl *__cdecl UI_method_get_opener(UI_METHOD *method))(UI *);
int (__cdecl *__cdecl UI_method_get_reader(UI_METHOD *method))(UI *, UI_STRING *);
int (__cdecl *__cdecl UI_method_get_writer(UI_METHOD *method))(UI *, UI_STRING *);
int __cdecl UI_method_set_closer(UI_METHOD *method, int (__cdecl *closer)(UI *ui));
int __cdecl UI_method_set_flusher(UI_METHOD *method, int (__cdecl *flusher)(UI *ui));
int __cdecl UI_method_set_opener(UI_METHOD *method, int (__cdecl *opener)(UI *ui));
int __cdecl UI_method_set_reader(UI_METHOD *method, int (__cdecl *reader)(UI *ui, UI_STRING *uis));
int __cdecl UI_method_set_writer(UI_METHOD *method, int (__cdecl *writer)(UI *ui, UI_STRING *uis));
UI *UI_new(void);
UI *__cdecl UI_new_method(const UI_METHOD *method);
int __cdecl UI_process(UI *ui);
void __cdecl UI_set_default_method(const UI_METHOD *meth);
int __cdecl UI_set_ex_data(UI *r, int idx, void *arg);
const UI_METHOD *__cdecl UI_set_method(UI *ui, const UI_METHOD *meth);
int __cdecl UI_set_result(UI *ui, UI_STRING *uis, const char *result);
char *UP;
void __cdecl USERNOTICE_free(USERNOTICE *a);
const ASN1_ITEM USERNOTICE_it;
USERNOTICE *USERNOTICE_new(void);
MACRO__USE _USE_FORTIFY_LEVEL;
int __cdecl UTF8ToHtml(unsigned __int8 *out, int *outlen, const unsigned __int8 *in, int *inlen);
int __cdecl UTF8Toisolat1(unsigned __int8 *out, int *outlen, const unsigned __int8 *in, int *inlen);
int __cdecl UTF8_getc(const unsigned __int8 *str, int len, unsigned __int64 *val);
int __cdecl UTF8_putc(unsigned __int8 *str, int len, unsigned __int64 value);
MACRO__UTX _UTX_HOSTSIZE;
MACRO__UTX _UTX_IDSIZE;
MACRO__UTX _UTX_LINESIZE;
MACRO__UTX _UTX_USERSIZE;
MACRO__V6 _V6_ILP32_OFF32;
MACRO__V6 _V6_ILP32_OFFBIG;
MACRO__V6 _V6_LP64_OFF64;
MACRO__V6 _V6_LPBIG_OFFBIG;
MACRO_OK _WATTR_OK;
MACRO_OK _WEXT_OK;
MACRO_OK _WPERM_OK;
MACRO_OK_0 _WRAPPED;
MACRO_OK _WRITE_OK;
MACRO__WSTOPPED _WSTOPPED;
int __cdecl X509V3_EXT_CRL_add_conf(LHASH *conf, X509V3_CTX *ctx, char *section, X509_CRL *crl);
int __cdecl X509V3_EXT_CRL_add_nconf(CONF *conf, X509V3_CTX *ctx, char *section, X509_CRL *crl);
int __cdecl X509V3_EXT_REQ_add_conf(LHASH *conf, X509V3_CTX *ctx, char *section, X509_REQ *req);
int __cdecl X509V3_EXT_REQ_add_nconf(CONF *conf, X509V3_CTX *ctx, char *section, X509_REQ *req);
int __cdecl X509V3_EXT_add(X509V3_EXT_METHOD *ext);
int __cdecl X509V3_EXT_add_alias(int nid_to, int nid_from);
int __cdecl X509V3_EXT_add_conf(LHASH *conf, X509V3_CTX *ctx, char *section, X509 *cert);
int __cdecl X509V3_EXT_add_list(X509V3_EXT_METHOD *extlist);
int __cdecl X509V3_EXT_add_nconf(CONF *conf, X509V3_CTX *ctx, char *section, X509 *cert);
int __cdecl X509V3_EXT_add_nconf_sk(CONF *conf, X509V3_CTX *ctx, char *section, STACK **sk);
void X509V3_EXT_cleanup(void);
X509_EXTENSION *__cdecl X509V3_EXT_conf(LHASH *conf, X509V3_CTX *ctx, char *name, char *value);
X509_EXTENSION *__cdecl X509V3_EXT_conf_nid(LHASH *conf, X509V3_CTX *ctx, int ext_nid, char *value);
void *__cdecl X509V3_EXT_d2i(X509_EXTENSION *ext);
X509V3_EXT_METHOD *__cdecl X509V3_EXT_get(X509_EXTENSION *ext);
X509V3_EXT_METHOD *__cdecl X509V3_EXT_get_nid(int nid);
X509_EXTENSION *__cdecl X509V3_EXT_i2d(int ext_nid, int crit, void *ext_struc);
X509_EXTENSION *__cdecl X509V3_EXT_nconf(CONF *conf, X509V3_CTX *ctx, char *name, char *value);
X509_EXTENSION *__cdecl X509V3_EXT_nconf_nid(CONF *conf, X509V3_CTX *ctx, int ext_nid, char *value);
int __cdecl X509V3_EXT_print(BIO *out, X509_EXTENSION *ext, unsigned __int64 flag, int indent);
int __cdecl X509V3_EXT_print_fp(FILE *out, X509_EXTENSION *ext, int flag, int indent);
void __cdecl X509V3_EXT_val_prn(BIO *out, STACK *val, int indent, int ml);
int __cdecl X509V3_NAME_from_section(X509_NAME *nm, STACK *dn_sk, unsigned __int64 chtype);
int __cdecl X509V3_add1_i2d(STACK **x, int nid, void *value, int crit, unsigned __int64 flags);
int X509V3_add_standard_extensions(void);
int __cdecl X509V3_add_value(const char *name, const char *value, STACK **extlist);
int __cdecl X509V3_add_value_bool(const char *name, int asn1_bool, STACK **extlist);
int __cdecl X509V3_add_value_bool_nf(char *name, int asn1_bool, STACK **extlist);
int __cdecl X509V3_add_value_int(const char *name, ASN1_INTEGER *aint, STACK **extlist);
int __cdecl X509V3_add_value_uchar(const char *name, const unsigned __int8 *value, STACK **extlist);
void __cdecl X509V3_conf_free(CONF_VALUE *val);
int __cdecl X509V3_extensions_print(BIO *out, char *title, STACK *exts, unsigned __int64 flag, int indent);
void *__cdecl X509V3_get_d2i(STACK *x, int nid, int *crit, int *idx);
STACK *__cdecl X509V3_get_section(X509V3_CTX *ctx, char *section);
char *__cdecl X509V3_get_string(X509V3_CTX *ctx, char *name, char *section);
int __cdecl X509V3_get_value_bool(CONF_VALUE *value, int *asn1_bool);
int __cdecl X509V3_get_value_int(CONF_VALUE *value, ASN1_INTEGER **aint);
STACK *__cdecl X509V3_parse_list(const char *line);
void __cdecl X509V3_section_free(X509V3_CTX *ctx, STACK *section);
void __cdecl X509V3_set_conf_lhash(X509V3_CTX *ctx, LHASH *lhash);
void __cdecl X509V3_set_ctx(X509V3_CTX *ctx, X509 *issuer, X509 *subject, X509_REQ *req, X509_CRL *crl, int flags);
void __cdecl X509V3_set_nconf(X509V3_CTX *ctx, CONF *conf);
void __cdecl X509V3_string_free(X509V3_CTX *ctx, char *str);
const ASN1_ITEM X509_ALGORS_it;
X509_ALGOR *__cdecl X509_ALGOR_dup(X509_ALGOR *xn);
void __cdecl X509_ALGOR_free(X509_ALGOR *a);
void __cdecl X509_ALGOR_get0(ASN1_OBJECT **paobj, int *pptype, void **ppval, X509_ALGOR *algor);
const ASN1_ITEM X509_ALGOR_it;
X509_ALGOR *X509_ALGOR_new(void);
int __cdecl X509_ALGOR_set0(X509_ALGOR *alg, ASN1_OBJECT *aobj, int ptype, void *pval);
int __cdecl X509_ATTRIBUTE_count(X509_ATTRIBUTE *attr);
X509_ATTRIBUTE *__cdecl X509_ATTRIBUTE_create(int nid, int atrtype, void *value);
X509_ATTRIBUTE *__cdecl X509_ATTRIBUTE_create_by_NID(X509_ATTRIBUTE **attr, int nid, int atrtype, const void *data, int len);
X509_ATTRIBUTE *__cdecl X509_ATTRIBUTE_create_by_OBJ(X509_ATTRIBUTE **attr, const ASN1_OBJECT *obj, int atrtype, const void *data, int len);
X509_ATTRIBUTE *__cdecl X509_ATTRIBUTE_create_by_txt(X509_ATTRIBUTE **attr, const char *atrname, int type, const unsigned __int8 *bytes, int len);
X509_ATTRIBUTE *__cdecl X509_ATTRIBUTE_dup(X509_ATTRIBUTE *xa);
void __cdecl X509_ATTRIBUTE_free(X509_ATTRIBUTE *a);
void *__cdecl X509_ATTRIBUTE_get0_data(X509_ATTRIBUTE *attr, int idx, int atrtype, void *data);
ASN1_OBJECT *__cdecl X509_ATTRIBUTE_get0_object(X509_ATTRIBUTE *attr);
ASN1_TYPE *__cdecl X509_ATTRIBUTE_get0_type(X509_ATTRIBUTE *attr, int idx);
const ASN1_ITEM X509_ATTRIBUTE_it;
X509_ATTRIBUTE *X509_ATTRIBUTE_new(void);
int __cdecl X509_ATTRIBUTE_set1_data(X509_ATTRIBUTE *attr, int attrtype, const void *data, int len);
int __cdecl X509_ATTRIBUTE_set1_object(X509_ATTRIBUTE *attr, const ASN1_OBJECT *obj);
void __cdecl X509_CERT_AUX_free(X509_CERT_AUX *a);
const ASN1_ITEM X509_CERT_AUX_it;
X509_CERT_AUX *X509_CERT_AUX_new(void);
int __cdecl X509_CERT_AUX_print(BIO *bp, X509_CERT_AUX *x, int indent);
void __cdecl X509_CERT_PAIR_free(X509_CERT_PAIR *a);
const ASN1_ITEM X509_CERT_PAIR_it;
X509_CERT_PAIR *X509_CERT_PAIR_new(void);
void __cdecl X509_CINF_free(X509_CINF *a);
const ASN1_ITEM X509_CINF_it;
X509_CINF *X509_CINF_new(void);
void __cdecl X509_CRL_INFO_free(X509_CRL_INFO *a);
const ASN1_ITEM X509_CRL_INFO_it;
X509_CRL_INFO *X509_CRL_INFO_new(void);
int __cdecl X509_CRL_add0_revoked(X509_CRL *crl, X509_REVOKED *rev);
int __cdecl X509_CRL_add1_ext_i2d(X509_CRL *x, int nid, void *value, int crit, unsigned __int64 flags);
int __cdecl X509_CRL_add_ext(X509_CRL *x, X509_EXTENSION *ex, int loc);
int __cdecl X509_CRL_cmp(const X509_CRL *a, const X509_CRL *b);
X509_EXTENSION *__cdecl X509_CRL_delete_ext(X509_CRL *x, int loc);
int __cdecl X509_CRL_digest(const X509_CRL *data, const EVP_MD *type, unsigned __int8 *md, unsigned int *len);
X509_CRL *__cdecl X509_CRL_dup(X509_CRL *crl);
void __cdecl X509_CRL_free(X509_CRL *a);
X509_EXTENSION *__cdecl X509_CRL_get_ext(X509_CRL *x, int loc);
int __cdecl X509_CRL_get_ext_by_NID(X509_CRL *x, int nid, int lastpos);
int __cdecl X509_CRL_get_ext_by_OBJ(X509_CRL *x, ASN1_OBJECT *obj, int lastpos);
int __cdecl X509_CRL_get_ext_by_critical(X509_CRL *x, int crit, int lastpos);
int __cdecl X509_CRL_get_ext_count(X509_CRL *x);
void *__cdecl X509_CRL_get_ext_d2i(X509_CRL *x, int nid, int *crit, int *idx);
const ASN1_ITEM X509_CRL_it;
X509_CRL *X509_CRL_new(void);
int __cdecl X509_CRL_print(BIO *bp, X509_CRL *x);
int __cdecl X509_CRL_print_fp(FILE *bp, X509_CRL *x);
int __cdecl X509_CRL_set_issuer_name(X509_CRL *x, X509_NAME *name);
int __cdecl X509_CRL_set_lastUpdate(X509_CRL *x, ASN1_TIME *tm);
int __cdecl X509_CRL_set_nextUpdate(X509_CRL *x, ASN1_TIME *tm);
int __cdecl X509_CRL_set_version(X509_CRL *x, __int64 version);
int __cdecl X509_CRL_sign(X509_CRL *x, EVP_PKEY *pkey, const EVP_MD *md);
int __cdecl X509_CRL_sort(X509_CRL *crl);
int __cdecl X509_CRL_verify(X509_CRL *a, EVP_PKEY *r);
const ASN1_ITEM X509_EXTENSIONS_it;
X509_EXTENSION *__cdecl X509_EXTENSION_create_by_NID(X509_EXTENSION **ex, int nid, int crit, ASN1_OCTET_STRING *data);
X509_EXTENSION *__cdecl X509_EXTENSION_create_by_OBJ(X509_EXTENSION **ex, ASN1_OBJECT *obj, int crit, ASN1_OCTET_STRING *data);
X509_EXTENSION *__cdecl X509_EXTENSION_dup(X509_EXTENSION *ex);
void __cdecl X509_EXTENSION_free(X509_EXTENSION *a);
int __cdecl X509_EXTENSION_get_critical(X509_EXTENSION *ex);
ASN1_OCTET_STRING *__cdecl X509_EXTENSION_get_data(X509_EXTENSION *ne);
ASN1_OBJECT *__cdecl X509_EXTENSION_get_object(X509_EXTENSION *ex);
const ASN1_ITEM X509_EXTENSION_it;
X509_EXTENSION *X509_EXTENSION_new(void);
int __cdecl X509_EXTENSION_set_critical(X509_EXTENSION *ex, int crit);
int __cdecl X509_EXTENSION_set_data(X509_EXTENSION *ex, ASN1_OCTET_STRING *data);
int __cdecl X509_EXTENSION_set_object(X509_EXTENSION *ex, ASN1_OBJECT *obj);
void __cdecl X509_INFO_free(X509_INFO *a);
X509_INFO *X509_INFO_new(void);
int __cdecl X509_LOOKUP_by_alias(X509_LOOKUP *ctx, int type, char *str, int len, X509_OBJECT *ret);
int __cdecl X509_LOOKUP_by_fingerprint(X509_LOOKUP *ctx, int type, unsigned __int8 *bytes, int len, X509_OBJECT *ret);
int __cdecl X509_LOOKUP_by_issuer_serial(X509_LOOKUP *ctx, int type, X509_NAME *name, ASN1_INTEGER *serial, X509_OBJECT *ret);
int __cdecl X509_LOOKUP_by_subject(X509_LOOKUP *ctx, int type, X509_NAME *name, X509_OBJECT *ret);
int __cdecl X509_LOOKUP_ctrl(X509_LOOKUP *ctx, int cmd, const char *argc, __int64 argl, char **ret);
X509_LOOKUP_METHOD *X509_LOOKUP_file(void);
void __cdecl X509_LOOKUP_free(X509_LOOKUP *ctx);
X509_LOOKUP_METHOD *X509_LOOKUP_hash_dir(void);
int __cdecl X509_LOOKUP_init(X509_LOOKUP *ctx);
X509_LOOKUP *__cdecl X509_LOOKUP_new(X509_LOOKUP_METHOD *method);
int __cdecl X509_LOOKUP_shutdown(X509_LOOKUP *ctx);
X509_NAME_ENTRY *__cdecl X509_NAME_ENTRY_create_by_NID(X509_NAME_ENTRY **ne, int nid, int type, unsigned __int8 *bytes, int len);
X509_NAME_ENTRY *__cdecl X509_NAME_ENTRY_create_by_OBJ(X509_NAME_ENTRY **ne, ASN1_OBJECT *obj, int type, const unsigned __int8 *bytes, int len);
X509_NAME_ENTRY *__cdecl X509_NAME_ENTRY_create_by_txt(X509_NAME_ENTRY **ne, const char *field, int type, const unsigned __int8 *bytes, int len);
X509_NAME_ENTRY *__cdecl X509_NAME_ENTRY_dup(X509_NAME_ENTRY *ne);
void __cdecl X509_NAME_ENTRY_free(X509_NAME_ENTRY *a);
ASN1_STRING *__cdecl X509_NAME_ENTRY_get_data(X509_NAME_ENTRY *ne);
ASN1_OBJECT *__cdecl X509_NAME_ENTRY_get_object(X509_NAME_ENTRY *ne);
const ASN1_ITEM X509_NAME_ENTRY_it;
X509_NAME_ENTRY *X509_NAME_ENTRY_new(void);
int __cdecl X509_NAME_ENTRY_set_data(X509_NAME_ENTRY *ne, int type, const unsigned __int8 *bytes, int len);
int __cdecl X509_NAME_ENTRY_set_object(X509_NAME_ENTRY *ne, ASN1_OBJECT *obj);
int __cdecl X509_NAME_add_entry(X509_NAME *name, X509_NAME_ENTRY *ne, int loc, int set);
int __cdecl X509_NAME_add_entry_by_NID(X509_NAME *name, int nid, int type, unsigned __int8 *bytes, int len, int loc, int set);
int __cdecl X509_NAME_add_entry_by_OBJ(X509_NAME *name, ASN1_OBJECT *obj, int type, unsigned __int8 *bytes, int len, int loc, int set);
int __cdecl X509_NAME_add_entry_by_txt(X509_NAME *name, const char *field, int type, const unsigned __int8 *bytes, int len, int loc, int set);
int __cdecl X509_NAME_cmp(const X509_NAME *a, const X509_NAME *b);
X509_NAME_ENTRY *__cdecl X509_NAME_delete_entry(X509_NAME *name, int loc);
int __cdecl X509_NAME_digest(const X509_NAME *data, const EVP_MD *type, unsigned __int8 *md, unsigned int *len);
X509_NAME *__cdecl X509_NAME_dup(X509_NAME *xn);
int __cdecl X509_NAME_entry_count(X509_NAME *name);
void __cdecl X509_NAME_free(X509_NAME *a);
X509_NAME_ENTRY *__cdecl X509_NAME_get_entry(X509_NAME *name, int loc);
int __cdecl X509_NAME_get_index_by_NID(X509_NAME *name, int nid, int lastpos);
int __cdecl X509_NAME_get_index_by_OBJ(X509_NAME *name, ASN1_OBJECT *obj, int lastpos);
int __cdecl X509_NAME_get_text_by_NID(X509_NAME *name, int nid, char *buf, int len);
int __cdecl X509_NAME_get_text_by_OBJ(X509_NAME *name, ASN1_OBJECT *obj, char *buf, int len);
unsigned __int64 __cdecl X509_NAME_hash(X509_NAME *x);
const ASN1_ITEM X509_NAME_it;
X509_NAME *X509_NAME_new(void);
char *__cdecl X509_NAME_oneline(X509_NAME *a, char *buf, int size);
int __cdecl X509_NAME_print(BIO *bp, X509_NAME *name, int obase);
int __cdecl X509_NAME_print_ex(BIO *out, X509_NAME *nm, int indent, unsigned __int64 flags);
int __cdecl X509_NAME_print_ex_fp(FILE *fp, X509_NAME *nm, int indent, unsigned __int64 flags);
int __cdecl X509_NAME_set(X509_NAME **xn, X509_NAME *name);
void __cdecl X509_OBJECT_free_contents(X509_OBJECT *a);
int __cdecl X509_OBJECT_idx_by_subject(STACK *h, int type, X509_NAME *name);
X509_OBJECT *__cdecl X509_OBJECT_retrieve_by_subject(STACK *h, int type, X509_NAME *name);
X509_OBJECT *__cdecl X509_OBJECT_retrieve_match(STACK *h, X509_OBJECT *x);
void __cdecl X509_OBJECT_up_ref_count(X509_OBJECT *a);
void __cdecl X509_PKEY_free(X509_PKEY *a);
X509_PKEY *X509_PKEY_new(void);
void __cdecl X509_POLICY_NODE_print(BIO *out, X509_POLICY_NODE *node, int indent);
void __cdecl X509_PUBKEY_free(X509_PUBKEY *a);
EVP_PKEY *__cdecl X509_PUBKEY_get(X509_PUBKEY *key);
const ASN1_ITEM X509_PUBKEY_it;
X509_PUBKEY *X509_PUBKEY_new(void);
int __cdecl X509_PUBKEY_set(X509_PUBKEY **x, EVP_PKEY *pkey);
int __cdecl X509_PURPOSE_add(int id, int trust, int flags, int (__cdecl *ck)(const X509_PURPOSE *, const X509 *, int), char *name, char *sname, void *arg);
void X509_PURPOSE_cleanup(void);
X509_PURPOSE *__cdecl X509_PURPOSE_get0(int idx);
char *__cdecl X509_PURPOSE_get0_name(X509_PURPOSE *xp);
char *__cdecl X509_PURPOSE_get0_sname(X509_PURPOSE *xp);
int __cdecl X509_PURPOSE_get_by_id(int id);
int __cdecl X509_PURPOSE_get_by_sname(char *sname);
int X509_PURPOSE_get_count(void);
int __cdecl X509_PURPOSE_get_id(X509_PURPOSE *);
int __cdecl X509_PURPOSE_get_trust(X509_PURPOSE *xp);
int __cdecl X509_PURPOSE_set(int *p, int purpose);
void __cdecl X509_REQ_INFO_free(X509_REQ_INFO *a);
const ASN1_ITEM X509_REQ_INFO_it;
X509_REQ_INFO *X509_REQ_INFO_new(void);
int __cdecl X509_REQ_add1_attr(X509_REQ *req, X509_ATTRIBUTE *attr);
int __cdecl X509_REQ_add1_attr_by_NID(X509_REQ *req, int nid, int type, const unsigned __int8 *bytes, int len);
int __cdecl X509_REQ_add1_attr_by_OBJ(X509_REQ *req, const ASN1_OBJECT *obj, int type, const unsigned __int8 *bytes, int len);
int __cdecl X509_REQ_add1_attr_by_txt(X509_REQ *req, const char *attrname, int type, const unsigned __int8 *bytes, int len);
int __cdecl X509_REQ_add_extensions(X509_REQ *req, STACK *exts);
int __cdecl X509_REQ_add_extensions_nid(X509_REQ *req, STACK *exts, int nid);
int __cdecl X509_REQ_check_private_key(X509_REQ *x509, EVP_PKEY *pkey);
X509_ATTRIBUTE *__cdecl X509_REQ_delete_attr(X509_REQ *req, int loc);
int __cdecl X509_REQ_digest(const X509_REQ *data, const EVP_MD *type, unsigned __int8 *md, unsigned int *len);
X509_REQ *__cdecl X509_REQ_dup(X509_REQ *req);
int __cdecl X509_REQ_extension_nid(int nid);
void __cdecl X509_REQ_free(X509_REQ *a);
STACK *__cdecl X509_REQ_get1_email(X509_REQ *x);
X509_ATTRIBUTE *__cdecl X509_REQ_get_attr(const X509_REQ *req, int loc);
int __cdecl X509_REQ_get_attr_by_NID(const X509_REQ *req, int nid, int lastpos);
int __cdecl X509_REQ_get_attr_by_OBJ(const X509_REQ *req, ASN1_OBJECT *obj, int lastpos);
int __cdecl X509_REQ_get_attr_count(const X509_REQ *req);
int *X509_REQ_get_extension_nids(void);
STACK *__cdecl X509_REQ_get_extensions(X509_REQ *req);
EVP_PKEY *__cdecl X509_REQ_get_pubkey(X509_REQ *req);
const ASN1_ITEM X509_REQ_it;
X509_REQ *X509_REQ_new(void);
int __cdecl X509_REQ_print(BIO *bp, X509_REQ *req);
int __cdecl X509_REQ_print_ex(BIO *bp, X509_REQ *x, unsigned __int64 nmflag, unsigned __int64 cflag);
int __cdecl X509_REQ_print_fp(FILE *bp, X509_REQ *req);
void __cdecl X509_REQ_set_extension_nids(int *nids);
int __cdecl X509_REQ_set_pubkey(X509_REQ *x, EVP_PKEY *pkey);
int __cdecl X509_REQ_set_subject_name(X509_REQ *req, X509_NAME *name);
int __cdecl X509_REQ_set_version(X509_REQ *x, __int64 version);
int __cdecl X509_REQ_sign(X509_REQ *x, EVP_PKEY *pkey, const EVP_MD *md);
X509 *__cdecl X509_REQ_to_X509(X509_REQ *r, int days, EVP_PKEY *pkey);
int __cdecl X509_REQ_verify(X509_REQ *a, EVP_PKEY *r);
int __cdecl X509_REVOKED_add1_ext_i2d(X509_REVOKED *x, int nid, void *value, int crit, unsigned __int64 flags);
int __cdecl X509_REVOKED_add_ext(X509_REVOKED *x, X509_EXTENSION *ex, int loc);
X509_EXTENSION *__cdecl X509_REVOKED_delete_ext(X509_REVOKED *x, int loc);
void __cdecl X509_REVOKED_free(X509_REVOKED *a);
X509_EXTENSION *__cdecl X509_REVOKED_get_ext(X509_REVOKED *x, int loc);
int __cdecl X509_REVOKED_get_ext_by_NID(X509_REVOKED *x, int nid, int lastpos);
int __cdecl X509_REVOKED_get_ext_by_OBJ(X509_REVOKED *x, ASN1_OBJECT *obj, int lastpos);
int __cdecl X509_REVOKED_get_ext_by_critical(X509_REVOKED *x, int crit, int lastpos);
int __cdecl X509_REVOKED_get_ext_count(X509_REVOKED *x);
void *__cdecl X509_REVOKED_get_ext_d2i(X509_REVOKED *x, int nid, int *crit, int *idx);
const ASN1_ITEM X509_REVOKED_it;
X509_REVOKED *X509_REVOKED_new(void);
int __cdecl X509_REVOKED_set_revocationDate(X509_REVOKED *r, ASN1_TIME *tm);
int __cdecl X509_REVOKED_set_serialNumber(X509_REVOKED *x, ASN1_INTEGER *serial);
void __cdecl X509_SIG_free(X509_SIG *a);
const ASN1_ITEM X509_SIG_it;
X509_SIG *X509_SIG_new(void);
void __cdecl X509_STORE_CTX_cleanup(X509_STORE_CTX *ctx);
void __cdecl X509_STORE_CTX_free(X509_STORE_CTX *ctx);
X509_VERIFY_PARAM *__cdecl X509_STORE_CTX_get0_param(X509_STORE_CTX *ctx);
X509_POLICY_TREE *__cdecl X509_STORE_CTX_get0_policy_tree(X509_STORE_CTX *ctx);
STACK *__cdecl X509_STORE_CTX_get1_chain(X509_STORE_CTX *ctx);
int __cdecl X509_STORE_CTX_get1_issuer(X509 **issuer, X509_STORE_CTX *ctx, X509 *x);
STACK *__cdecl X509_STORE_CTX_get_chain(X509_STORE_CTX *ctx);
X509 *__cdecl X509_STORE_CTX_get_current_cert(X509_STORE_CTX *ctx);
int __cdecl X509_STORE_CTX_get_error(X509_STORE_CTX *ctx);
int __cdecl X509_STORE_CTX_get_error_depth(X509_STORE_CTX *ctx);
void *__cdecl X509_STORE_CTX_get_ex_data(X509_STORE_CTX *ctx, int idx);
int __cdecl X509_STORE_CTX_get_ex_new_index(__int64 argl, void *argp, CRYPTO_EX_new *new_func, CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func);
int __cdecl X509_STORE_CTX_get_explicit_policy(X509_STORE_CTX *ctx);
int __cdecl X509_STORE_CTX_init(X509_STORE_CTX *ctx, X509_STORE *store, X509 *x509, STACK *chain);
X509_STORE_CTX *X509_STORE_CTX_new(void);
int __cdecl X509_STORE_CTX_purpose_inherit(X509_STORE_CTX *ctx, int def_purpose, int purpose, int trust);
void __cdecl X509_STORE_CTX_set0_crls(X509_STORE_CTX *c, STACK *sk);
void __cdecl X509_STORE_CTX_set0_param(X509_STORE_CTX *ctx, X509_VERIFY_PARAM *param);
void __cdecl X509_STORE_CTX_set_cert(X509_STORE_CTX *c, X509 *x);
void __cdecl X509_STORE_CTX_set_chain(X509_STORE_CTX *c, STACK *sk);
int __cdecl X509_STORE_CTX_set_default(X509_STORE_CTX *ctx, const char *name);
void __cdecl X509_STORE_CTX_set_depth(X509_STORE_CTX *ctx, int depth);
void __cdecl X509_STORE_CTX_set_error(X509_STORE_CTX *ctx, int s);
int __cdecl X509_STORE_CTX_set_ex_data(X509_STORE_CTX *ctx, int idx, void *data);
void __cdecl X509_STORE_CTX_set_flags(X509_STORE_CTX *ctx, unsigned __int64 flags);
int __cdecl X509_STORE_CTX_set_purpose(X509_STORE_CTX *ctx, int purpose);
void __cdecl X509_STORE_CTX_set_time(X509_STORE_CTX *ctx, unsigned __int64 flags, time_t t);
int __cdecl X509_STORE_CTX_set_trust(X509_STORE_CTX *ctx, int trust);
void __cdecl X509_STORE_CTX_set_verify_cb(X509_STORE_CTX *ctx, int (__cdecl *verify_cb)(int, X509_STORE_CTX *));
void __cdecl X509_STORE_CTX_trusted_stack(X509_STORE_CTX *ctx, STACK *sk);
int __cdecl X509_STORE_add_cert(X509_STORE *ctx, X509 *x);
int __cdecl X509_STORE_add_crl(X509_STORE *ctx, X509_CRL *x);
X509_LOOKUP *__cdecl X509_STORE_add_lookup(X509_STORE *v, X509_LOOKUP_METHOD *m);
void __cdecl X509_STORE_free(X509_STORE *v);
int __cdecl X509_STORE_get_by_subject(X509_STORE_CTX *vs, int type, X509_NAME *name, X509_OBJECT *ret);
int __cdecl X509_STORE_load_locations(X509_STORE *ctx, const char *file, const char *dir);
X509_STORE *X509_STORE_new(void);
int __cdecl X509_STORE_set1_param(X509_STORE *ctx, X509_VERIFY_PARAM *pm);
int __cdecl X509_STORE_set_default_paths(X509_STORE *ctx);
int __cdecl X509_STORE_set_depth(X509_STORE *store, int depth);
int __cdecl X509_STORE_set_flags(X509_STORE *ctx, unsigned __int64 flags);
int __cdecl X509_STORE_set_purpose(X509_STORE *ctx, int purpose);
int __cdecl X509_STORE_set_trust(X509_STORE *ctx, int trust);
int __cdecl X509_TRUST_add(int id, int flags, int (__cdecl *ck)(X509_TRUST *, X509 *, int), char *name, int arg1, void *arg2);
void X509_TRUST_cleanup(void);
X509_TRUST *__cdecl X509_TRUST_get0(int idx);
char *__cdecl X509_TRUST_get0_name(X509_TRUST *xp);
int __cdecl X509_TRUST_get_by_id(int id);
int X509_TRUST_get_count(void);
int __cdecl X509_TRUST_get_flags(X509_TRUST *xp);
int __cdecl X509_TRUST_get_trust(X509_TRUST *xp);
int __cdecl X509_TRUST_set(int *t, int trust);
int (__cdecl *__cdecl X509_TRUST_set_default(int (__cdecl *trust)(int, X509 *, int)))(int, X509 *, int);
void __cdecl X509_VAL_free(X509_VAL *a);
const ASN1_ITEM X509_VAL_it;
X509_VAL *X509_VAL_new(void);
int __cdecl X509_VERIFY_PARAM_add0_policy(X509_VERIFY_PARAM *param, ASN1_OBJECT *policy);
int __cdecl X509_VERIFY_PARAM_add0_table(X509_VERIFY_PARAM *param);
int __cdecl X509_VERIFY_PARAM_clear_flags(X509_VERIFY_PARAM *param, unsigned __int64 flags);
void __cdecl X509_VERIFY_PARAM_free(X509_VERIFY_PARAM *param);
int __cdecl X509_VERIFY_PARAM_get_depth(const X509_VERIFY_PARAM *param);
unsigned __int64 __cdecl X509_VERIFY_PARAM_get_flags(X509_VERIFY_PARAM *param);
int __cdecl X509_VERIFY_PARAM_inherit(X509_VERIFY_PARAM *to, const X509_VERIFY_PARAM *from);
const X509_VERIFY_PARAM *__cdecl X509_VERIFY_PARAM_lookup(const char *name);
X509_VERIFY_PARAM *X509_VERIFY_PARAM_new(void);
int __cdecl X509_VERIFY_PARAM_set1(X509_VERIFY_PARAM *to, const X509_VERIFY_PARAM *from);
int __cdecl X509_VERIFY_PARAM_set1_name(X509_VERIFY_PARAM *param, const char *name);
int __cdecl X509_VERIFY_PARAM_set1_policies(X509_VERIFY_PARAM *param, STACK *policies);
void __cdecl X509_VERIFY_PARAM_set_depth(X509_VERIFY_PARAM *param, int depth);
int __cdecl X509_VERIFY_PARAM_set_flags(X509_VERIFY_PARAM *param, unsigned __int64 flags);
int __cdecl X509_VERIFY_PARAM_set_purpose(X509_VERIFY_PARAM *param, int purpose);
void __cdecl X509_VERIFY_PARAM_set_time(X509_VERIFY_PARAM *param, time_t t);
int __cdecl X509_VERIFY_PARAM_set_trust(X509_VERIFY_PARAM *param, int trust);
void X509_VERIFY_PARAM_table_cleanup(void);
int __cdecl X509_add1_ext_i2d(X509 *x, int nid, void *value, int crit, unsigned __int64 flags);
int __cdecl X509_add1_reject_object(X509 *x, ASN1_OBJECT *obj);
int __cdecl X509_add1_trust_object(X509 *x, ASN1_OBJECT *obj);
int __cdecl X509_add_ext(X509 *x, X509_EXTENSION *ex, int loc);
unsigned __int8 *__cdecl X509_alias_get0(X509 *x, int *len);
int __cdecl X509_alias_set1(X509 *x, unsigned __int8 *name, int len);
ASN1_METHOD *X509_asn1_meth(void);
int __cdecl X509_certificate_type(X509 *x, EVP_PKEY *pubkey);
int __cdecl X509_check_ca(X509 *x);
int __cdecl X509_check_issued(X509 *issuer, X509 *subject);
int __cdecl X509_check_private_key(X509 *x509, EVP_PKEY *pkey);
int __cdecl X509_check_purpose(X509 *x, int id, int ca);
int __cdecl X509_check_trust(X509 *x, int id, int flags);
int __cdecl X509_cmp(const X509 *a, const X509 *b);
int __cdecl X509_cmp_current_time(ASN1_TIME *s);
int __cdecl X509_cmp_time(ASN1_TIME *s, time_t *t);
X509_EXTENSION *__cdecl X509_delete_ext(X509 *x, int loc);
int __cdecl X509_digest(const X509 *data, const EVP_MD *type, unsigned __int8 *md, unsigned int *len);
X509 *__cdecl X509_dup(X509 *x509);
void __cdecl X509_email_free(STACK *sk);
X509 *__cdecl X509_find_by_issuer_and_serial(STACK *sk, X509_NAME *name, ASN1_INTEGER *serial);
X509 *__cdecl X509_find_by_subject(STACK *sk, X509_NAME *name);
void __cdecl X509_free(X509 *a);
ASN1_BIT_STRING *__cdecl X509_get0_pubkey_bitstr(const X509 *x);
STACK *__cdecl X509_get1_email(X509 *x);
STACK *__cdecl X509_get1_ocsp(X509 *x);
const char *X509_get_default_cert_area(void);
const char *X509_get_default_cert_dir(void);
const char *X509_get_default_cert_dir_env(void);
const char *X509_get_default_cert_file(void);
const char *X509_get_default_cert_file_env(void);
const char *X509_get_default_private_dir(void);
void *__cdecl X509_get_ex_data(X509 *r, int idx);
int __cdecl X509_get_ex_new_index(__int64 argl, void *argp, CRYPTO_EX_new *new_func, CRYPTO_EX_dup *dup_func, CRYPTO_EX_free *free_func);
X509_EXTENSION *__cdecl X509_get_ext(X509 *x, int loc);
int __cdecl X509_get_ext_by_NID(X509 *x, int nid, int lastpos);
int __cdecl X509_get_ext_by_OBJ(X509 *x, ASN1_OBJECT *obj, int lastpos);
int __cdecl X509_get_ext_by_critical(X509 *x, int crit, int lastpos);
int __cdecl X509_get_ext_count(X509 *x);
void *__cdecl X509_get_ext_d2i(X509 *x, int nid, int *crit, int *idx);
X509_NAME *__cdecl X509_get_issuer_name(X509 *a);
EVP_PKEY *__cdecl X509_get_pubkey(X509 *x);
int __cdecl X509_get_pubkey_parameters(EVP_PKEY *pkey, STACK *chain);
ASN1_INTEGER *__cdecl X509_get_serialNumber(X509 *x);
X509_NAME *__cdecl X509_get_subject_name(X509 *a);
ASN1_TIME *__cdecl X509_gmtime_adj(ASN1_TIME *s, __int64 adj);
int __cdecl X509_issuer_and_serial_cmp(const X509 *a, const X509 *b);
unsigned __int64 __cdecl X509_issuer_and_serial_hash(X509 *a);
int __cdecl X509_issuer_name_cmp(const X509 *a, const X509 *b);
unsigned __int64 __cdecl X509_issuer_name_hash(X509 *a);
const ASN1_ITEM X509_it;
unsigned __int8 *__cdecl X509_keyid_get0(X509 *x, int *len);
int __cdecl X509_keyid_set1(X509 *x, unsigned __int8 *id, int len);
int __cdecl X509_load_cert_crl_file(X509_LOOKUP *ctx, const char *file, int type);
int __cdecl X509_load_cert_file(X509_LOOKUP *ctx, const char *file, int type);
int __cdecl X509_load_crl_file(X509_LOOKUP *ctx, const char *file, int type);
X509 *X509_new(void);
int __cdecl X509_ocspid_print(BIO *bp, X509 *x);
int __cdecl X509_policy_check(X509_POLICY_TREE **ptree, int *pexplicit_policy, STACK *certs, STACK *policy_oids, unsigned int flags);
X509_POLICY_NODE *__cdecl X509_policy_level_get0_node(X509_POLICY_LEVEL *level, int i);
int __cdecl X509_policy_level_node_count(X509_POLICY_LEVEL *level);
const X509_POLICY_NODE *__cdecl X509_policy_node_get0_parent(const X509_POLICY_NODE *node);
const ASN1_OBJECT *__cdecl X509_policy_node_get0_policy(const X509_POLICY_NODE *node);
STACK *__cdecl X509_policy_node_get0_qualifiers(const X509_POLICY_NODE *node);
void __cdecl X509_policy_tree_free(X509_POLICY_TREE *tree);
X509_POLICY_LEVEL *__cdecl X509_policy_tree_get0_level(const X509_POLICY_TREE *tree, int i);
STACK *__cdecl X509_policy_tree_get0_policies(const X509_POLICY_TREE *tree);
STACK *__cdecl X509_policy_tree_get0_user_policies(const X509_POLICY_TREE *tree);
int __cdecl X509_policy_tree_level_count(const X509_POLICY_TREE *tree);
int __cdecl X509_print(BIO *bp, X509 *x);
int __cdecl X509_print_ex(BIO *bp, X509 *x, unsigned __int64 nmflag, unsigned __int64 cflag);
int __cdecl X509_print_ex_fp(FILE *bp, X509 *x, unsigned __int64 nmflag, unsigned __int64 cflag);
int __cdecl X509_print_fp(FILE *bp, X509 *x);
int __cdecl X509_pubkey_digest(const X509 *data, const EVP_MD *type, unsigned __int8 *md, unsigned int *len);
void __cdecl X509_reject_clear(X509 *x);
int __cdecl X509_set_ex_data(X509 *r, int idx, void *arg);
int __cdecl X509_set_issuer_name(X509 *x, X509_NAME *name);
int __cdecl X509_set_notAfter(X509 *x, ASN1_TIME *tm);
int __cdecl X509_set_notBefore(X509 *x, ASN1_TIME *tm);
int __cdecl X509_set_pubkey(X509 *x, EVP_PKEY *pkey);
int __cdecl X509_set_serialNumber(X509 *x, ASN1_INTEGER *serial);
int __cdecl X509_set_subject_name(X509 *x, X509_NAME *name);
int __cdecl X509_set_version(X509 *x, __int64 version);
int __cdecl X509_sign(X509 *x, EVP_PKEY *pkey, const EVP_MD *md);
int __cdecl X509_signature_print(BIO *bp, X509_ALGOR *alg, ASN1_STRING *sig);
int __cdecl X509_subject_name_cmp(const X509 *a, const X509 *b);
unsigned __int64 __cdecl X509_subject_name_hash(X509 *x);
int __cdecl X509_supported_extension(X509_EXTENSION *ex);
ASN1_TIME *__cdecl X509_time_adj(ASN1_TIME *s, __int64 adj, time_t *t);
X509_REQ *__cdecl X509_to_X509_REQ(X509 *x, EVP_PKEY *pkey, const EVP_MD *md);
void __cdecl X509_trust_clear(X509 *x);
int __cdecl X509_verify(X509 *a, EVP_PKEY *r);
int __cdecl X509_verify_cert(X509_STORE_CTX *ctx);
const char *__cdecl X509_verify_cert_error_string(__int64 n);
STACK *__cdecl X509at_add1_attr(STACK **x, X509_ATTRIBUTE *attr);
STACK *__cdecl X509at_add1_attr_by_NID(STACK **x, int nid, int type, const unsigned __int8 *bytes, int len);
STACK *__cdecl X509at_add1_attr_by_OBJ(STACK **x, const ASN1_OBJECT *obj, int type, const unsigned __int8 *bytes, int len);
STACK *__cdecl X509at_add1_attr_by_txt(STACK **x, const char *attrname, int type, const unsigned __int8 *bytes, int len);
X509_ATTRIBUTE *__cdecl X509at_delete_attr(STACK *x, int loc);
void *__cdecl X509at_get0_data_by_OBJ(STACK *x, ASN1_OBJECT *obj, int lastpos, int type);
X509_ATTRIBUTE *__cdecl X509at_get_attr(const STACK *x, int loc);
int __cdecl X509at_get_attr_by_NID(const STACK *x, int nid, int lastpos);
int __cdecl X509at_get_attr_by_OBJ(const STACK *sk, ASN1_OBJECT *obj, int lastpos);
int __cdecl X509at_get_attr_count(const STACK *x);
STACK *__cdecl X509v3_add_ext(STACK **x, X509_EXTENSION *ex, int loc);
X509_EXTENSION *__cdecl X509v3_delete_ext(STACK *x, int loc);
X509_EXTENSION *__cdecl X509v3_get_ext(const STACK *x, int loc);
int __cdecl X509v3_get_ext_by_NID(const STACK *x, int nid, int lastpos);
int __cdecl X509v3_get_ext_by_OBJ(const STACK *x, ASN1_OBJECT *obj, int lastpos);
int __cdecl X509v3_get_ext_by_critical(const STACK *x, int crit, int lastpos);
int __cdecl X509v3_get_ext_count(const STACK *x);
MACRO__XBS5 _XBS5_ILP32_OFF32;
MACRO__XBS5 _XBS5_ILP32_OFFBIG;
MACRO__XBS5 _XBS5_LP64_OFF64;
MACRO__XBS5 _XBS5_LPBIG_OFFBIG;
MACRO__XOPEN_CRYPT _XOPEN_CRYPT;
MACRO__XOPEN_CRYPT _XOPEN_ENH_I18N;
MACRO__XOPEN_IOV _XOPEN_IOV_MAX;
MACRO__XOPEN_CRYPT _XOPEN_LEGACY;
MACRO__XOPEN_IOV _XOPEN_NAME_MAX;
MACRO__XOPEN_IOV _XOPEN_PATH_MAX;
MACRO__XOPEN_CRYPT _XOPEN_REALTIME;
MACRO__XOPEN_CRYPT _XOPEN_REALTIME_THREADS;
MACRO__XOPEN_CRYPT _XOPEN_SHM;
MACRO__XOPEN_CRYPT _XOPEN_STREAMS;
MACRO__XOPEN_CRYPT _XOPEN_UNIX;
MACRO__XOPEN _XOPEN_VERSION;
MACRO__XOPEN _XOPEN_XCU_VERSION;
const ASN1_ITEM ZLONG_it;
MACRO___APPLE __APPLE_API_STRICT_CONFORMANCE;
MACRO___ASSERT __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES;
MACRO___BIND __BIND;
void *__cdecl _Block_copy(const void *aBlock);
const char *__cdecl _Block_extended_layout(void *aBlock);
bool __cdecl _Block_has_signature(void *aBlock);
bool __cdecl _Block_isDeallocating(const void *aBlock);
const char *__cdecl _Block_layout(void *aBlock);
void __cdecl _Block_object_assign(void *, const void *, const int);
void __cdecl _Block_object_dispose(const void *, const int);
void __cdecl _Block_release(const void *aBlock);
const char *__cdecl _Block_signature(void *aBlock);
bool __cdecl _Block_tryRetain(const void *aBlock);
void __cdecl _Block_use_RR2(const Block_callbacks_RR *callbacks);
bool __cdecl _Block_use_stret(void *aBlock);
int __cdecl _CONF_add_string(CONF *conf, CONF_VALUE *section, CONF_VALUE *value);
void __cdecl _CONF_free_data(CONF *conf);
__int64 __cdecl _CONF_get_number(const CONF *conf, const char *section, const char *name);
CONF_VALUE *__cdecl _CONF_get_section(const CONF *conf, const char *section);
STACK *__cdecl _CONF_get_section_values(const CONF *conf, const char *section);
char *__cdecl _CONF_get_string(const CONF *conf, const char *section, const char *name);
int __cdecl _CONF_new_data(CONF *conf);
CONF_VALUE *__cdecl _CONF_new_section(CONF *conf, const char *section);
MACRO___CTERMID __CTERMID_DEFINED;
_RuneLocale *_CurrentRuneLocale;
MACRO___DARWIN __DARWIN_64_BIT_INO_T;
MACRO___DARWIN_ACL __DARWIN_ACL_ADD_FILE;
MACRO___DARWIN_ACL __DARWIN_ACL_ADD_SUBDIRECTORY;
MACRO___DARWIN_ACL __DARWIN_ACL_APPEND_DATA;
MACRO___DARWIN_ACL __DARWIN_ACL_CHANGE_OWNER;
MACRO___DARWIN_ACL __DARWIN_ACL_DELETE;
MACRO___DARWIN_ACL __DARWIN_ACL_DELETE_CHILD;
MACRO___DARWIN_ACL __DARWIN_ACL_ENTRY_DIRECTORY_INHERIT;
MACRO___DARWIN_ACL __DARWIN_ACL_ENTRY_FILE_INHERIT;
MACRO___DARWIN_ACL __DARWIN_ACL_ENTRY_INHERITED;
MACRO___DARWIN_ACL __DARWIN_ACL_ENTRY_LIMIT_INHERIT;
MACRO___DARWIN_ACL __DARWIN_ACL_ENTRY_ONLY_INHERIT;
MACRO___DARWIN_ACL __DARWIN_ACL_EXECUTE;
MACRO___DARWIN_ACL __DARWIN_ACL_EXTENDED_ALLOW;
MACRO___DARWIN_ACL __DARWIN_ACL_EXTENDED_DENY;
MACRO___DARWIN_ACL __DARWIN_ACL_FLAG_NO_INHERIT;
MACRO___DARWIN_ACL __DARWIN_ACL_LIST_DIRECTORY;
MACRO___DARWIN_ACL __DARWIN_ACL_READ_ATTRIBUTES;
MACRO___DARWIN_ACL __DARWIN_ACL_READ_DATA;
MACRO___DARWIN_ACL __DARWIN_ACL_READ_EXTATTRIBUTES;
MACRO___DARWIN_ACL __DARWIN_ACL_READ_SECURITY;
MACRO___DARWIN_ACL __DARWIN_ACL_SEARCH;
MACRO___DARWIN_ACL __DARWIN_ACL_WRITE_ATTRIBUTES;
MACRO___DARWIN_ACL __DARWIN_ACL_WRITE_DATA;
MACRO___DARWIN_ACL __DARWIN_ACL_WRITE_EXTATTRIBUTES;
MACRO___DARWIN_ACL __DARWIN_ACL_WRITE_SECURITY;
MACRO___DARWIN_LITTLE __DARWIN_BIG_ENDIAN;
MACRO___DARWIN_LITTLE __DARWIN_BYTE_ORDER;
MACRO___DARWIN_CLK __DARWIN_CLK_TCK;
MACRO___DARWIN __DARWIN_C_ANSI;
MACRO___DARWIN __DARWIN_C_FULL;
MACRO___DARWIN __DARWIN_C_LEVEL;
MACRO___DARWIN_FD __DARWIN_FD_SETSIZE;
MACRO_RESERVED __DARWIN_IPPORT_RESERVED;
MACRO___DARWIN_LITTLE __DARWIN_LITTLE_ENDIAN;
MACRO___DARWIN _DARWIN_LONG_DOUBLE_IS_DOUBLE;
MACRO___DARWIN_MAXNAMLEN __DARWIN_MAXNAMLEN;
MACRO___DARWIN_MAXNAMLEN __DARWIN_MAXPATHLEN;
MACRO___DARWIN_FD __DARWIN_NBBY;
MACRO___DARWIN _DARWIN_NON_CANCELABLE;
MACRO___DARWIN_NSIG __DARWIN_NSIG;
MACRO___DARWIN_NULL _DARWIN_NULL;
MACRO___DARWIN _DARWIN_ONLY_64_BIT_INO_T;
MACRO___DARWIN __DARWIN_ONLY_UNIX_CONFORMANCE;
MACRO___DARWIN _DARWIN_ONLY_VERS_1050;
MACRO___DARWIN_LITTLE __DARWIN_PDP_ENDIAN;
MACRO___DARWIN __DARWIN_UNIX03;
MACRO___DARWIN __DARWIN_VERS_1050;
MACRO___DARWIN_NULL __DARWIN_WCHAR_MAX;
MACRO___DARWIN_NULL __DARWIN_WCHAR_MIN;
MACRO___DARWIN_NULL __DARWIN_WEOF;
MACRO___DTF __DTF_READALL;
_RuneLocale _DefaultRuneLocale;
MACRO___EXTENSIONS __EXTENSIONS__;
void __cdecl __noreturn _Exit(int);
const fenv_t _FE_DFL_DISABLE_SSE_DENORMS_ENV;
const fenv_t _FE_DFL_ENV;
MACRO___ILP32 __ILP32_OFF32;
MACRO___ILP32 __ILP32_OFFBIG;
MACRO___IPHONE __IPHONE_2_0;
MACRO___IPHONE __IPHONE_2_1;
MACRO___IPHONE __IPHONE_2_2;
MACRO___IPHONE __IPHONE_3_0;
MACRO___IPHONE __IPHONE_3_1;
MACRO___IPHONE __IPHONE_3_2;
MACRO___IPHONE __IPHONE_4_0;
MACRO___IPHONE __IPHONE_4_1;
MACRO___IPHONE __IPHONE_4_2;
MACRO___IPHONE __IPHONE_4_3;
MACRO___IPHONE __IPHONE_NA;
MACRO___IPV6 __IPV6_ADDR_SCOPE_GLOBAL;
MACRO___IPV6 __IPV6_ADDR_SCOPE_INTFACELOCAL;
MACRO___IPV6 __IPV6_ADDR_SCOPE_LINKLOCAL;
MACRO___IPV6 __IPV6_ADDR_SCOPE_NODELOCAL;
MACRO___IPV6 __IPV6_ADDR_SCOPE_ORGLOCAL;
MACRO___IPV6 __IPV6_ADDR_SCOPE_SITELOCAL;
MACRO___LP64 __LP64_OFF64;
MACRO___LPBIG __LPBIG_OFFBIG;
MACRO___MAC __MAC_10_0;
MACRO___MAC __MAC_10_1;
MACRO___MAC __MAC_10_2;
MACRO___MAC __MAC_10_3;
MACRO___MAC __MAC_10_4;
MACRO___MAC __MAC_10_5;
MACRO___MAC __MAC_10_6;
MACRO___MAC __MAC_10_7;
MACRO___MAC __MAC_NA;
MACRO___MigPackStructs __MigPackStructs;
MACRO___MigTypeCheck __MigTypeCheck;
MACRO___NAMESER __NAMESER;
MACRO___NDR __NDR_convert__;
MACRO___NDR _NDR_convert__char_rep__;
MACRO___NDR _NDR_convert__float_rep__;
MACRO___NDR __NDR_convert__int_rep__;
void *_NSConcreteAutoBlock[32];
void *_NSConcreteFinalizingBlock[32];
void *_NSConcreteGlobalBlock[32];
void *_NSConcreteMallocBlock[32];
void *_NSConcreteStackBlock[32];
void *_NSConcreteWeakBlockVariable[32];
int *_NSGetArgc(void);
char ***_NSGetArgv(void);
char ***_NSGetEnviron(void);
int __cdecl _NSGetExecutablePath(char *buf, uint32_t *bufsize);
struct mach_header_64 *_NSGetMachExecuteHeader(void);
char **_NSGetProgname(void);
static uint16_t __cdecl _OSReadInt16(const volatile void *base, uintptr_t byteOffset);
static uint32_t __cdecl _OSReadInt32(const volatile void *base, uintptr_t byteOffset);
static uint64_t __cdecl _OSReadInt64(const volatile void *base, uintptr_t byteOffset);
static __uint16_t __cdecl _OSSwapInt16(__uint16_t data);
static __uint32_t __cdecl _OSSwapInt32(__uint32_t data);
static __uint64_t __cdecl _OSSwapInt64(__uint64_t data);
static void __cdecl _OSWriteInt16(volatile void *base, uintptr_t byteOffset, uint16_t data);
static void __cdecl _OSWriteInt32(volatile void *base, uintptr_t byteOffset, uint32_t data);
static void __cdecl _OSWriteInt64(volatile void *base, uintptr_t byteOffset, uint64_t data);
MACRO___PFKEY __PFKEY_V2_H;
MACRO___PTHREAD __PTHREAD_ATTR_SIZE__;
MACRO___PTHREAD __PTHREAD_CONDATTR_SIZE__;
MACRO___PTHREAD __PTHREAD_COND_SIZE__;
MACRO___PTHREAD __PTHREAD_MUTEXATTR_SIZE__;
MACRO___PTHREAD __PTHREAD_MUTEX_SIZE__;
MACRO___PTHREAD __PTHREAD_ONCE_SIZE__;
MACRO___PTHREAD __PTHREAD_RWLOCKATTR_SIZE__;
MACRO___PTHREAD __PTHREAD_RWLOCK_SIZE__;
MACRO___PTHREAD __PTHREAD_SIZE__;
MACRO___RES __RES;
MACRO___R __R_UNUSED;
MACRO___SLBF __SALC;
MACRO___SLBF __SAPP;
MACRO___SCHED __SCHED_PARAM_SIZE__;
MACRO___SLBF __SEOF;
MACRO___SLBF __SERR;
MACRO___SLBF __SIGN;
MACRO___SLBF __SLBF;
MACRO___SLBF __SMBF;
MACRO___SLBF __SMOD;
MACRO___SLBF __SNBF;
MACRO___SLBF __SNPT;
MACRO___SLBF __SOFF;
MACRO___SLBF __SOPT;
MACRO___SLBF __SRD;
MACRO___SLBF __SRW;
MACRO___SLBF __SSTR;
MACRO___SLBF __SWR;
MACRO___WORDSIZE __WORDSIZE;
static double __cdecl __NDR_READSWAP__double(double *argp);
static float __cdecl __NDR_READSWAP__float(float *argp);
static void __cdecl __NDR_convert__mig_reply_error_t(mig_reply_error_t *x);
int ___mb_cur_max(void);
int __cdecl ___mb_cur_max_l(locale_t);
unsigned __int64 __cdecl ___runetype(__darwin_ct_rune_t);
unsigned __int64 __cdecl ___runetype_l(__darwin_ct_rune_t, locale_t);
__darwin_ct_rune_t __cdecl ___tolower(__darwin_ct_rune_t);
__darwin_ct_rune_t __cdecl ___tolower_l(__darwin_ct_rune_t, locale_t);
__darwin_ct_rune_t __cdecl ___toupper(__darwin_ct_rune_t);
__darwin_ct_rune_t __cdecl ___toupper_l(__darwin_ct_rune_t, locale_t);
void __cdecl __noreturn __assert_rtn(const char *, const char *, int, const char *);
static int32_t __cdecl __checkint_int32_add(int64_t x, int64_t y, int32_t *err);
static int32_t __cdecl __checkint_int32_div_signed_signed(int32_t x, int32_t y, int32_t *err);
static int32_t __cdecl __checkint_int32_div_signed_unsigned(int32_t x, uint32_t y, int32_t *err);
static int32_t __cdecl __checkint_int32_div_unsigned_signed(uint32_t x, int32_t y, int32_t *err);
static int32_t __cdecl __checkint_int32_div_unsigned_unsigned(uint32_t x, uint32_t y, int32_t *err);
static int32_t __cdecl __checkint_int32_mul(int64_t x, int64_t y, int32_t *err);
static int32_t __cdecl __checkint_int32_sub(int64_t x, int64_t y, int32_t *err);
static int32_t __cdecl __checkint_int32_type_error(int32_t *err);
static int64_t __cdecl __checkint_int64_add_signed_signed(int64_t x, int64_t y, int32_t *err);
static int64_t __cdecl __checkint_int64_add_signed_unsigned(int64_t x, uint64_t y, int32_t *err);
static int64_t __cdecl __checkint_int64_add_unsigned_signed(uint64_t x, int64_t y, int32_t *err);
static int64_t __cdecl __checkint_int64_add_unsigned_unsigned(uint64_t x, uint64_t y, int32_t *err);
static int64_t __cdecl __checkint_int64_div_signed_signed(int64_t x, int64_t y, int32_t *err);
static int64_t __cdecl __checkint_int64_div_signed_unsigned(int64_t x, uint64_t y, int32_t *err);
static int64_t __cdecl __checkint_int64_div_unsigned_signed(uint64_t x, int64_t y, int32_t *err);
static int64_t __cdecl __checkint_int64_div_unsigned_unsigned(uint64_t x, uint64_t y, int32_t *err);
static int64_t __cdecl __checkint_int64_mul_signed_signed(int64_t x, int64_t y, int32_t *err);
static int64_t __cdecl __checkint_int64_mul_signed_unsigned(int64_t x, uint64_t y, int32_t *err);
static int64_t __cdecl __checkint_int64_mul_unsigned_signed(uint64_t x, int64_t y, int32_t *err);
static int64_t __cdecl __checkint_int64_mul_unsigned_unsigned(uint64_t x, uint64_t y, int32_t *err);
static int64_t __cdecl __checkint_int64_sub_signed_signed(int64_t x, int64_t y, int32_t *err);
static int64_t __cdecl __checkint_int64_sub_signed_unsigned(int64_t x, uint64_t y, int32_t *err);
static int64_t __cdecl __checkint_int64_sub_unsigned_signed(uint64_t x, int64_t y, int32_t *err);
static int64_t __cdecl __checkint_int64_sub_unsigned_unsigned(uint64_t x, uint64_t y, int32_t *err);
static int32_t __cdecl __checkint_int64_type_error(int32_t *err);
static int32_t __cdecl __checkint_is_mixed_sign32(int32_t x, int32_t y);
static int32_t __cdecl __checkint_is_mixed_sign64(int64_t x, int64_t y);
static uint32_t __cdecl __checkint_uint32_add(int64_t x, int64_t y, int32_t *err);
static uint32_t __cdecl __checkint_uint32_div_signed_signed(int32_t x, int32_t y, int32_t *err);
static uint32_t __cdecl __checkint_uint32_div_signed_unsigned(int32_t x, uint32_t y, int32_t *err);
static uint32_t __cdecl __checkint_uint32_div_unsigned_signed(uint32_t x, int32_t y, int32_t *err);
static uint32_t __cdecl __checkint_uint32_div_unsigned_unsigned(uint32_t x, uint32_t y, int32_t *err);
static uint32_t __cdecl __checkint_uint32_mul(int64_t x, int64_t y, int32_t *err);
static uint32_t __cdecl __checkint_uint32_sub(int64_t x, int64_t y, int32_t *err);
static int32_t __cdecl __checkint_uint32_type_error(int32_t *err);
static uint64_t __cdecl __checkint_uint64_add_signed_signed(int64_t x, int64_t y, int32_t *err);
static uint64_t __cdecl __checkint_uint64_add_signed_unsigned(int64_t x, uint64_t y, int32_t *err);
static uint64_t __cdecl __checkint_uint64_add_unsigned_signed(uint64_t x, int64_t y, int32_t *err);
static uint64_t __cdecl __checkint_uint64_add_unsigned_unsigned(uint64_t x, uint64_t y, int32_t *err);
static uint64_t __cdecl __checkint_uint64_div_signed_signed(int64_t x, int64_t y, int32_t *err);
static uint64_t __cdecl __checkint_uint64_div_signed_unsigned(int64_t x, uint64_t y, int32_t *err);
static uint64_t __cdecl __checkint_uint64_div_unsigned_signed(uint64_t x, int64_t y, int32_t *err);
static uint64_t __cdecl __checkint_uint64_div_unsigned_unsigned(uint64_t x, uint64_t y, int32_t *err);
static uint64_t __cdecl __checkint_uint64_mul_signed_signed(int64_t x, int64_t y, int32_t *err);
static uint64_t __cdecl __checkint_uint64_mul_signed_unsigned(int64_t x, uint64_t y, int32_t *err);
static uint64_t __cdecl __checkint_uint64_mul_unsigned_signed(uint64_t x, int64_t y, int32_t *err);
static uint64_t __cdecl __checkint_uint64_mul_unsigned_unsigned(uint64_t x, uint64_t y, int32_t *err);
static uint64_t __cdecl __checkint_uint64_sub_signed_signed(int64_t x, int64_t y, int32_t *err);
static uint64_t __cdecl __checkint_uint64_sub_signed_unsigned(int64_t x, uint64_t y, int32_t *err);
static uint64_t __cdecl __checkint_uint64_sub_unsigned_signed(uint64_t x, int64_t y, int32_t *err);
static uint64_t __cdecl __checkint_uint64_sub_unsigned_unsigned(uint64_t x, uint64_t y, int32_t *err);
static int32_t __cdecl __checkint_uint64_type_error(int32_t *err);
static int __cdecl __darwin_fd_isset(int n, const struct fd_set *p);
xmlSAXHandlerV1 *__docbDefaultSAXHandler(void);
void __cdecl __noreturn __eprintf(const char *, const char *, unsigned int, const char *);
int *__error(void);
int __cdecl __fpclassify(long double);
int __cdecl __fpclassifyd(double);
int __cdecl __fpclassifyf(float);
xmlSAXHandlerV1 *__htmlDefaultSAXHandler(void);
double __inf(void);
float __inff(void);
long double __infl(void);
static int __cdecl __inline_isfinite(long double);
static int __cdecl __inline_isfinited(double);
static int __cdecl __inline_isfinitef(float);
static int __cdecl __inline_isinf(long double);
static int __cdecl __inline_isinfd(double);
static int __cdecl __inline_isinff(float);
static int __cdecl __inline_isnan(long double);
static int __cdecl __inline_isnand(double);
static int __cdecl __inline_isnanf(float);
static int __cdecl __inline_isnormal(long double);
static int __cdecl __inline_isnormald(double);
static int __cdecl __inline_isnormalf(float);
static void *__cdecl __inline_memcpy_chk(void *dest, const void *src, size_t len);
static void *__cdecl __inline_memmove_chk(void *dest, const void *src, size_t len);
static void *__cdecl __inline_memset_chk(void *dest, int val, size_t len);
static int __cdecl __inline_signbit(long double);
static int __cdecl __inline_signbitd(double);
static int __cdecl __inline_signbitf(float);
static char *__cdecl __inline_stpcpy_chk(char *dest, const char *src);
static char *__cdecl __inline_stpncpy_chk(char *dest, const char *src, size_t len);
static char *__cdecl __inline_strcat_chk(char *dest, const char *src);
static char *__cdecl __inline_strcpy_chk(char *dest, const char *src);
static char *__cdecl __inline_strncat_chk(char *dest, const char *src, size_t len);
static char *__cdecl __inline_strncpy_chk(char *dest, const char *src, size_t len);
static __darwin_ct_rune_t __cdecl __isctype(__darwin_ct_rune_t c, unsigned __int64 f);
static int __cdecl __istype(__darwin_ct_rune_t c, unsigned __int64 f);
static int __cdecl __istype_l(__darwin_ct_rune_t c, unsigned __int64 f, locale_t l);
int __cdecl __mac_execve(char *fname, char **argv, char **envv, mac_t label);
int __cdecl __mac_get_fd(int fd, mac_t label);
int __cdecl __mac_get_file(const char *path, mac_t label);
int __cdecl __mac_get_lcid(pid_t lcid, mac_t label);
int __cdecl __mac_get_lctx(mac_t label);
int __cdecl __mac_get_link(const char *path, mac_t label);
int __cdecl __mac_get_mount(const char *path, struct mac *label);
int __cdecl __mac_get_pid(pid_t pid, mac_t label);
int __cdecl __mac_get_proc(mac_t label);
int __cdecl __mac_mount(const char *type, const char *path, int flags, void *data, struct mac *label);
int __cdecl __mac_set_fd(int fildes, const mac_t label);
int __cdecl __mac_set_file(const char *path, mac_t label);
int __cdecl __mac_set_lctx(mac_t label);
int __cdecl __mac_set_link(const char *path, mac_t label);
int __cdecl __mac_set_proc(const mac_t label);
int __cdecl __mac_syscall(const char *policyname, int call, void *arg);
int __cdecl __maskrune(__darwin_ct_rune_t, unsigned __int64);
int __cdecl __maskrune_l(__darwin_ct_rune_t, unsigned __int64, locale_t);
int __math_errhandling(void);
int __mb_cur_max;
float __nan(void);
int *__oldXMLWDcompatibility(void);
DIR *__cdecl __opendir2(const char *, int);
int __cdecl __pcap_atodn(const char *, bpf_u_int32 *);
int __cdecl __pcap_atoin(const char *, bpf_u_int32 *);
u_short __cdecl __pcap_nametodnaddr(const char *);
const struct res_9_sym __res_9_p_cert_syms[];
const struct res_9_sym __res_9_p_class_syms[];
const struct res_9_sym __res_9_p_key_syms[];
const struct res_9_sym __res_9_p_rcode_syms[];
const struct res_9_sym __res_9_p_type_syms[];
static int __cdecl __sigbits(int signo);
int __snprintf_chk(char *, size_t, int, size_t, const char *, ...);
int __sprintf_chk(char *, int, size_t, const char *, ...);
static int __cdecl __sputc(int c, FILE *p);
int __cdecl __srget(FILE *);
FILE *__stderrp;
FILE *__stdinp;
FILE *__stdoutp;
int __cdecl __svfscanf(FILE *, const char *, va_list);
int __cdecl __swbuf(int, FILE *);
__darwin_ct_rune_t __cdecl __tolower(__darwin_ct_rune_t);
static __darwin_ct_rune_t __cdecl __tolower_l(__darwin_ct_rune_t c, locale_t l);
__darwin_ct_rune_t __cdecl __toupper(__darwin_ct_rune_t);
static __darwin_ct_rune_t __cdecl __toupper_l(__darwin_ct_rune_t c, locale_t l);
int __cdecl __vsnprintf_chk(char *, size_t, int, size_t, const char *, va_list);
int __cdecl __vsprintf_chk(char *, int, size_t, const char *, va_list);
static int __cdecl __wcwidth(__darwin_ct_rune_t c);
static int __cdecl __wcwidth_l(__darwin_ct_rune_t c, locale_t l);
xmlBufferAllocationScheme *__xmlBufferAllocScheme(void);
int *__xmlDefaultBufferSize(void);
xmlSAXHandlerV1 *__xmlDefaultSAXHandler(void);
xmlSAXLocator *__xmlDefaultSAXLocator(void);
xmlDeregisterNodeFunc *__xmlDeregisterNodeDefaultValue(void);
int *__xmlDoValidityCheckingDefaultValue(void);
xmlGenericErrorFunc *__xmlGenericError(void);
void **__xmlGenericErrorContext(void);
int *__xmlGetWarningsDefaultValue(void);
int *__xmlIndentTreeOutput(void);
int *__xmlKeepBlanksDefaultValue(void);
xmlError *__xmlLastError(void);
int *__xmlLineNumbersDefaultValue(void);
int *__xmlLoadExtDtdDefaultValue(void);
xmlOutputBufferPtr __cdecl __xmlOutputBufferCreateFilename(const char *URI, xmlCharEncodingHandlerPtr encoder, int compression);
xmlOutputBufferCreateFilenameFunc *__xmlOutputBufferCreateFilenameValue(void);
int *__xmlParserDebugEntities(void);
xmlParserInputBufferPtr __cdecl __xmlParserInputBufferCreateFilename(const char *URI, xmlCharEncoding enc);
xmlParserInputBufferCreateFilenameFunc *__xmlParserInputBufferCreateFilenameValue(void);
const char **__xmlParserVersion(void);
int *__xmlPedanticParserDefaultValue(void);
xmlRegisterNodeFunc *__xmlRegisterNodeDefaultValue(void);
int *__xmlSaveNoEmptyTags(void);
xmlStructuredErrorFunc *__xmlStructuredError(void);
int *__xmlSubstituteEntitiesDefaultValue(void);
const char **__xmlTreeIndentString(void);
enum auth_stat __cdecl _authenticate(struct svc_req *, struct rpc_msg *);
MACRO___bool __bool_true_false_are_defined;
const locale_t _c_locale;
static void _curl_easy_getinfo_err_curl_slist(void);
static void _curl_easy_getinfo_err_double(void);
static void _curl_easy_getinfo_err_long(void);
static void _curl_easy_getinfo_err_string(void);
static void _curl_easy_setopt_err_CURLSH(void);
static void _curl_easy_setopt_err_FILE(void);
static void _curl_easy_setopt_err_cb_data(void);
static void _curl_easy_setopt_err_conv_cb(void);
static void _curl_easy_setopt_err_curl_httpost(void);
static void _curl_easy_setopt_err_curl_off_t(void);
static void _curl_easy_setopt_err_curl_slist(void);
static void _curl_easy_setopt_err_debug_cb(void);
static void _curl_easy_setopt_err_error_buffer(void);
static void _curl_easy_setopt_err_ioctl_cb(void);
static void _curl_easy_setopt_err_long(void);
static void _curl_easy_setopt_err_opensocket_cb(void);
static void _curl_easy_setopt_err_postfields(void);
static void _curl_easy_setopt_err_progress_cb(void);
static void _curl_easy_setopt_err_read_cb(void);
static void _curl_easy_setopt_err_seek_cb(void);
static void _curl_easy_setopt_err_sockopt_cb(void);
static void _curl_easy_setopt_err_ssl_ctx_cb(void);
static void _curl_easy_setopt_err_string(void);
static void _curl_easy_setopt_err_write_callback(void);
const dispatch_block_t _dispatch_data_destructor_free;
struct dispatch_data_s _dispatch_data_empty;
struct dispatch_queue_s _dispatch_main_q;
static void __cdecl _dispatch_once(dispatch_once_t *predicate, dispatch_block_t block);
static void __cdecl _dispatch_once_f(dispatch_once_t *predicate, void *context, dispatch_function_t function);
struct dispatch_queue_attr_s _dispatch_queue_attr_concurrent;
const struct dispatch_source_type_s _dispatch_source_type_data_add;
const struct dispatch_source_type_s _dispatch_source_type_data_or;
const struct dispatch_source_type_s _dispatch_source_type_mach_recv;
const struct dispatch_source_type_s _dispatch_source_type_mach_send;
const struct dispatch_source_type_s _dispatch_source_type_proc;
const struct dispatch_source_type_s _dispatch_source_type_read;
const struct dispatch_source_type_s _dispatch_source_type_signal;
const struct dispatch_source_type_s _dispatch_source_type_timer;
const struct dispatch_source_type_s _dispatch_source_type_vnode;
const struct dispatch_source_type_s _dispatch_source_type_write;
MACRO___dontcare __dontcare__;
bool _dyld_all_twolevel_modules_prebound(void);
bool __cdecl _dyld_bind_fully_image_containing_address(const void *address);
void __cdecl _dyld_bind_objc_module(const void *objc_module);
const struct mach_header *__cdecl _dyld_get_image_header(uint32_t image_index);
const struct mach_header *__cdecl _dyld_get_image_header_containing_address(const void *address);
const char *__cdecl _dyld_get_image_name(uint32_t image_index);
intptr_t __cdecl _dyld_get_image_vmaddr_slide(uint32_t image_index);
bool __cdecl _dyld_image_containing_address(const void *address);
uint32_t _dyld_image_count(void);
bool _dyld_launched_prebound(void);
void __cdecl _dyld_lookup_and_bind(const char *symbol_name, void **address, NSModule *module);
void __cdecl _dyld_lookup_and_bind_fully(const char *symbol_name, void **address, NSModule *module);
void __cdecl _dyld_lookup_and_bind_with_hint(const char *symbol_name, const char *library_name_hint, void **address, NSModule *module);
void __cdecl _dyld_moninit(void (__cdecl *monaddition)(char *lowpc, char *highpc));
bool _dyld_present(void);
void __cdecl _dyld_register_func_for_add_image(void (__cdecl *func)(const struct mach_header *mh, intptr_t vmaddr_slide));
void __cdecl _dyld_register_func_for_remove_image(void (__cdecl *func)(const struct mach_header *mh, intptr_t vmaddr_slide));
unsigned __int8 __cdecl _el_fn_complete(EditLine *, int);
void __cdecl __noreturn _exit(int);
struct gmonparam _gmonparam;
kern_return_t __cdecl _host_page_size(host_t host, vm_size_t *out_page_size);
time_t __cdecl _int_to_time(int tint);
int _libiconv_version;
time_t __cdecl _long_to_time(__int64 tlong);
void __cdecl _longjmp(jmp_buf, int);
kern_return_t __cdecl _mach_make_memory_entry(vm_map_t target_task, memory_object_size_t *size, memory_object_offset_t offset, vm_prot_t permission, mem_entry_name_port_t *object_handle, mem_entry_name_port_t parent_handle);
const struct mach_header_64 _mh_bundle_header;
const struct mach_header_64 _mh_dylib_header;
const struct mach_header_64 _mh_dylinker_header;
const struct mach_header_64 _mh_execute_header;
FIELD *_nc_Default_Field;
FORM *_nc_Default_Form;
void __cdecl _nc_align_termtype(TERMTYPE *, TERMTYPE *);
char *__cdecl _nc_basename(char *);
int __cdecl _nc_capcmp(const char *, const char *);
char *__cdecl _nc_captoinfo(const char *, const char *, const int);
void (__cdecl *_nc_check_termtype)(TERMTYPE *);
void (__cdecl *_nc_check_termtype2)(TERMTYPE *, bool);
__int64 _nc_comment_end;
__int64 _nc_comment_start;
ENTRY *__cdecl _nc_copy_entry(ENTRY *oldp);
void __cdecl _nc_copy_termtype(TERMTYPE *, TERMTYPE *);
int _nc_curr_col;
__int64 _nc_curr_file_pos;
int _nc_curr_line;
struct token _nc_curr_token;
bool _nc_disable_period;
bool __cdecl _nc_entry_match(char *, char *);
void _nc_err_abort(const char *const, ...);
const TERMTYPE *__cdecl _nc_fallback(const char *);
const struct name_table_entry *__cdecl _nc_find_entry(const char *, const __int16 *);
const struct name_table_entry *__cdecl _nc_find_type_entry(const char *, int, const struct name_table_entry *);
void __cdecl _nc_first_db(DBDIRS *, int *);
char *__cdecl _nc_first_name(const char *const);
void __cdecl _nc_free_entries(ENTRY *);
void __cdecl _nc_free_termtype(TERMTYPE *);
const struct alias *__cdecl _nc_get_alias_table(bool);
const __int16 *__cdecl _nc_get_hash_table(bool);
const char *_nc_get_source(void);
const struct name_table_entry *__cdecl _nc_get_table(bool);
int __cdecl _nc_get_token(bool);
int __cdecl _nc_get_tty_mode(struct termios *buf);
void __cdecl _nc_get_type(char *name);
ENTRY *_nc_head;
char *_nc_home_terminfo(void);
char *__cdecl _nc_infotocap(const char *, const char *, const int);
void _nc_init_acs(void);
void __cdecl _nc_init_entry(TERMTYPE *const);
bool __cdecl _nc_is_abs_path(const char *);
bool __cdecl _nc_is_dir_path(const char *);
bool __cdecl _nc_is_file_path(const char *);
void _nc_last_db(void);
void __cdecl _nc_merge_entry(TERMTYPE *const, TERMTYPE *const);
int __cdecl _nc_name_match(const char *const, const char *const, const char *const);
const char *__cdecl _nc_next_db(DBDIRS *, int *);
int _nc_nulls_sent;
void __cdecl _nc_panic_mode(char);
int __cdecl _nc_parse_entry(ENTRY *, int, bool);
unsigned int __cdecl _nc_pathlast(const char *);
const char *_nc_progname;
void __cdecl _nc_push_token(int);
int __cdecl _nc_read_entry(const char *const, char *const, TERMTYPE *const);
void __cdecl _nc_read_entry_source(FILE *, char *, int, bool, bool (__cdecl *)(ENTRY *));
int __cdecl _nc_read_file_entry(const char *const, TERMTYPE *);
int __cdecl _nc_read_termtype(TERMTYPE *, char *, int);
void __cdecl _nc_reset_input(FILE *, char *);
int __cdecl _nc_resolve_uses(bool);
int __cdecl _nc_resolve_uses2(bool, bool);
char *__cdecl _nc_rootname(char *);
char *__cdecl _nc_save_str(const char *const);
void __cdecl _nc_set_source(const char *const);
int __cdecl _nc_set_tty_mode(struct termios *buf);
void __cdecl _nc_set_type(const char *const);
void __cdecl _nc_set_writedir(char *);
__int64 _nc_start_line;
bool _nc_suppress_warnings;
int _nc_syntax;
void _nc_syserr_abort(const char *const, ...);
ENTRY *_nc_tail;
const char *__cdecl _nc_tic_dir(const char *);
char *__cdecl _nc_tic_expand(const char *, bool, int);
int _nc_tic_written(void);
const struct tinfo_fkeys _nc_tinfo_fkeys[];
int __cdecl _nc_tparm_analyze(const char *, char **, int *);
int _nc_tparm_err;
void __cdecl _nc_trace_xnames(TERMTYPE *);
char *_nc_tracebits(void);
void _nc_tracef(char *, ...);
unsigned int _nc_tracing;
int __cdecl _nc_trans_string(char *, char *);
char *__cdecl _nc_trim_sgr0(TERMTYPE *);
bool _nc_user_definable;
const char *__cdecl _nc_visbuf(const char *);
const char *__cdecl _nc_visbuf2(int, const char *);
void _nc_warning(const char *const, ...);
void __cdecl _nc_wrap_entry(ENTRY *const, bool);
void __cdecl _nc_write_entry(TERMTYPE *const);
void __cdecl _netsnmp_udp_sockopt_set(int fd, int local);
struct opaque_auth _null_auth;
void _openpam_log(int level, const char *func, const char *fmt, ...);
void *__cdecl _openssl_ascii2ebcdic(void *dest, const void *srce, size_t count);
void *__cdecl _openssl_ebcdic2ascii(void *dest, const void *srce, size_t count);
const unsigned __int8 _openssl_os_toascii[256];
const unsigned __int8 _openssl_os_toebcdic[256];
void __cdecl _ossl_096_des_random_seed(DES_cblock *key);
char *__cdecl _ossl_old_crypt(const char *buf, const char *salt);
unsigned int __cdecl _ossl_old_des_cbc_cksum(_ossl_old_des_cblock *input, _ossl_old_des_cblock *output, __int64 length, _ossl_old_des_key_schedule schedule, _ossl_old_des_cblock *ivec);
void __cdecl _ossl_old_des_cbc_encrypt(_ossl_old_des_cblock *input, _ossl_old_des_cblock *output, __int64 length, _ossl_old_des_key_schedule schedule, _ossl_old_des_cblock *ivec, int enc);
void __cdecl _ossl_old_des_cfb64_encrypt(unsigned __int8 *in, unsigned __int8 *out, __int64 length, _ossl_old_des_key_schedule schedule, _ossl_old_des_cblock *ivec, int *num, int enc);
void __cdecl _ossl_old_des_cfb_encrypt(unsigned __int8 *in, unsigned __int8 *out, int numbits, __int64 length, _ossl_old_des_key_schedule schedule, _ossl_old_des_cblock *ivec, int enc);
char *__cdecl _ossl_old_des_crypt(const char *buf, const char *salt);
void __cdecl _ossl_old_des_decrypt3(unsigned int *data, _ossl_old_des_key_schedule ks1, _ossl_old_des_key_schedule ks2, _ossl_old_des_key_schedule ks3);
void __cdecl _ossl_old_des_ecb3_encrypt(_ossl_old_des_cblock *input, _ossl_old_des_cblock *output, _ossl_old_des_key_schedule ks1, _ossl_old_des_key_schedule ks2, _ossl_old_des_key_schedule ks3, int enc);
void __cdecl _ossl_old_des_ecb_encrypt(_ossl_old_des_cblock *input, _ossl_old_des_cblock *output, _ossl_old_des_key_schedule ks, int enc);
void __cdecl _ossl_old_des_ede3_cbc_encrypt(_ossl_old_des_cblock *input, _ossl_old_des_cblock *output, __int64 length, _ossl_old_des_key_schedule ks1, _ossl_old_des_key_schedule ks2, _ossl_old_des_key_schedule ks3, _ossl_old_des_cblock *ivec, int enc);
void __cdecl _ossl_old_des_ede3_cfb64_encrypt(unsigned __int8 *in, unsigned __int8 *out, __int64 length, _ossl_old_des_key_schedule ks1, _ossl_old_des_key_schedule ks2, _ossl_old_des_key_schedule ks3, _ossl_old_des_cblock *ivec, int *num, int enc);
void __cdecl _ossl_old_des_ede3_ofb64_encrypt(unsigned __int8 *in, unsigned __int8 *out, __int64 length, _ossl_old_des_key_schedule ks1, _ossl_old_des_key_schedule ks2, _ossl_old_des_key_schedule ks3, _ossl_old_des_cblock *ivec, int *num);
int __cdecl _ossl_old_des_enc_read(int fd, char *buf, int len, _ossl_old_des_key_schedule sched, _ossl_old_des_cblock *iv);
int __cdecl _ossl_old_des_enc_write(int fd, char *buf, int len, _ossl_old_des_key_schedule sched, _ossl_old_des_cblock *iv);
void __cdecl _ossl_old_des_encrypt(unsigned int *data, _ossl_old_des_key_schedule ks, int enc);
void __cdecl _ossl_old_des_encrypt2(unsigned int *data, _ossl_old_des_key_schedule ks, int enc);
void __cdecl _ossl_old_des_encrypt3(unsigned int *data, _ossl_old_des_key_schedule ks1, _ossl_old_des_key_schedule ks2, _ossl_old_des_key_schedule ks3);
char *__cdecl _ossl_old_des_fcrypt(const char *buf, const char *salt, char *ret);
int __cdecl _ossl_old_des_is_weak_key(_ossl_old_des_cblock *key);
int __cdecl _ossl_old_des_key_sched(_ossl_old_des_cblock *key, _ossl_old_des_key_schedule schedule);
void __cdecl _ossl_old_des_ncbc_encrypt(_ossl_old_des_cblock *input, _ossl_old_des_cblock *output, __int64 length, _ossl_old_des_key_schedule schedule, _ossl_old_des_cblock *ivec, int enc);
void __cdecl _ossl_old_des_ofb64_encrypt(unsigned __int8 *in, unsigned __int8 *out, __int64 length, _ossl_old_des_key_schedule schedule, _ossl_old_des_cblock *ivec, int *num);
void __cdecl _ossl_old_des_ofb_encrypt(unsigned __int8 *in, unsigned __int8 *out, int numbits, __int64 length, _ossl_old_des_key_schedule schedule, _ossl_old_des_cblock *ivec);
const char *_ossl_old_des_options(void);
void __cdecl _ossl_old_des_pcbc_encrypt(_ossl_old_des_cblock *input, _ossl_old_des_cblock *output, __int64 length, _ossl_old_des_key_schedule schedule, _ossl_old_des_cblock *ivec, int enc);
unsigned int __cdecl _ossl_old_des_quad_cksum(_ossl_old_des_cblock *input, _ossl_old_des_cblock *output, __int64 length, int out_count, _ossl_old_des_cblock *seed);
void __cdecl _ossl_old_des_random_key(_ossl_old_des_cblock ret);
void __cdecl _ossl_old_des_random_seed(_ossl_old_des_cblock key);
int __cdecl _ossl_old_des_read_2passwords(_ossl_old_des_cblock *key1, _ossl_old_des_cblock *key2, const char *prompt, int verify);
int __cdecl _ossl_old_des_read_password(_ossl_old_des_cblock *key, const char *prompt, int verify);
int __cdecl _ossl_old_des_read_pw(char *buf, char *buff, int size, const char *prompt, int verify);
int __cdecl _ossl_old_des_read_pw_string(char *buf, int length, const char *prompt, int verify);
int __cdecl _ossl_old_des_set_key(_ossl_old_des_cblock *key, _ossl_old_des_key_schedule schedule);
void __cdecl _ossl_old_des_set_odd_parity(_ossl_old_des_cblock *key);
void __cdecl _ossl_old_des_string_to_2keys(char *str, _ossl_old_des_cblock *key1, _ossl_old_des_cblock *key2);
void __cdecl _ossl_old_des_string_to_key(char *str, _ossl_old_des_cblock *key);
void __cdecl _ossl_old_des_xcbc_encrypt(_ossl_old_des_cblock *input, _ossl_old_des_cblock *output, __int64 length, _ossl_old_des_key_schedule schedule, _ossl_old_des_cblock *ivec, _ossl_old_des_cblock *inw, _ossl_old_des_cblock *outw, int enc);
struct __res_9_state _res;
void __cdecl _res_9_h_errno_set(struct __res_9_state *res, int err);
struct _res_9_ns_flagdata _res_9_ns_flagdata[];
int _rl_abort_internal(void);
int _rl_print_completions_horizontally;
int __cdecl _rl_qsort_string_compare(char **, char **);
void __cdecl _sasl_MD5Final();
void __cdecl _sasl_MD5Init();
void __cdecl _sasl_MD5Update();
void __cdecl _sasl_hmac_md5(const unsigned __int8 *text, int text_len, const unsigned __int8 *key, int key_len, unsigned __int8 digest[16]);
void __cdecl _sasl_hmac_md5_final(unsigned __int8 digest[16], HMAC_MD5_CTX *hmac);
void __cdecl _sasl_hmac_md5_import(HMAC_MD5_CTX *hmac, HMAC_MD5_STATE *state);
void __cdecl _sasl_hmac_md5_init(HMAC_MD5_CTX *hmac, const unsigned __int8 *key, int key_len);
void __cdecl _sasl_hmac_md5_precalc(HMAC_MD5_STATE *hmac, const unsigned __int8 *key, int key_len);
void __cdecl _seterr_reply(struct rpc_msg *, struct rpc_err *);
int __cdecl _setjmp(jmp_buf);
int _shadow_DES_check_key;
int _shadow_DES_rw_mode;
time_t __cdecl _time32_to_time(int32_t t32);
time_t __cdecl _time64_to_time(int64_t t64);
int __cdecl _time_to_int(time_t t);
__int64 __cdecl _time_to_long(time_t t);
int32_t __cdecl _time_to_time32(time_t t);
int64_t __cdecl _time_to_time64(time_t t);
char *__cdecl _traceattr(attr_t);
char *__cdecl _traceattr2(int, chtype);
char *__cdecl _tracechar(int);
char *__cdecl _tracechtype(chtype);
char *__cdecl _tracechtype2(int, chtype);
void __cdecl _tracedump(const char *, WINDOW *);
void _tracef(const char *, ...);
char *__cdecl _tracemouse(const MEVENT *);
int __cdecl _yp_dobind(const char *, struct dom_binding **);
int __cdecl _yppasswd(char *, struct x_passwd *);
int __cdecl a2d_ASN1_OBJECT(unsigned __int8 *out, int olen, const char *buf, int num);
int __cdecl a2i_ASN1_ENUMERATED(BIO *bp, ASN1_ENUMERATED *bs, char *buf, int size);
int __cdecl a2i_ASN1_INTEGER(BIO *bp, ASN1_INTEGER *bs, char *buf, int size);
int __cdecl a2i_ASN1_STRING(BIO *bp, ASN1_STRING *bs, char *buf, int size);
ASN1_OCTET_STRING *__cdecl a2i_IPADDRESS(const char *ipasc);
ASN1_OCTET_STRING *__cdecl a2i_IPADDRESS_NC(const char *ipasc);
int __cdecl a2i_ipadd(unsigned __int8 *ipout, const char *ipasc);
__int64 __cdecl a64l(const char *);
void __noreturn abort(void);
int __cdecl abs(int);
int __cdecl accept(int, struct sockaddr *, socklen_t *);
int __cdecl access(const char *, int);
int __cdecl accessx_np(const struct accessx_descriptor *, size_t, int *, uid_t);
int __cdecl acct(const char *);
int __cdecl acl_add_flag_np(acl_flagset_t flagset_d, acl_flag_t flag);
int __cdecl acl_add_perm(acl_permset_t permset_d, acl_perm_t perm);
int __cdecl acl_calc_mask(acl_t *acl_p);
int __cdecl acl_clear_flags_np(acl_flagset_t flagset_d);
int __cdecl acl_clear_perms(acl_permset_t permset_d);
int __cdecl acl_copy_entry(acl_entry_t dest_d, acl_entry_t src_d);
ssize_t __cdecl acl_copy_ext(void *buf_p, acl_t acl, ssize_t size);
ssize_t __cdecl acl_copy_ext_native(void *buf_p, acl_t acl, ssize_t size);
acl_t __cdecl acl_copy_int(const void *buf_p);
acl_t __cdecl acl_copy_int_native(const void *buf_p);
int __cdecl acl_create_entry(acl_t *acl_p, acl_entry_t *entry_p);
int __cdecl acl_create_entry_np(acl_t *acl_p, acl_entry_t *entry_p, int entry_index);
int __cdecl acl_delete_def_file(const char *path_p);
int __cdecl acl_delete_entry(acl_t acl, acl_entry_t entry_d);
int __cdecl acl_delete_flag_np(acl_flagset_t flagset_d, acl_flag_t flag);
int __cdecl acl_delete_perm(acl_permset_t permset_d, acl_perm_t perm);
acl_t __cdecl acl_dup(acl_t acl);
int __cdecl acl_free(void *obj_p);
acl_t __cdecl acl_from_text(const char *buf_p);
int __cdecl acl_get_entry(acl_t acl, int entry_id, acl_entry_t *entry_p);
acl_t __cdecl acl_get_fd(int fd);
acl_t __cdecl acl_get_fd_np(int fd, acl_type_t type);
acl_t __cdecl acl_get_file(const char *path_p, acl_type_t type);
int __cdecl acl_get_flag_np(acl_flagset_t flagset_d, acl_flag_t flag);
int __cdecl acl_get_flagset_np(void *obj_p, acl_flagset_t *flagset_p);
acl_t __cdecl acl_get_link_np(const char *path_p, acl_type_t type);
int __cdecl acl_get_perm_np(acl_permset_t permset_d, acl_perm_t perm);
int __cdecl acl_get_permset(acl_entry_t entry_d, acl_permset_t *permset_p);
int __cdecl acl_get_permset_mask_np(acl_entry_t entry_d, acl_permset_mask_t *mask_p);
void *__cdecl acl_get_qualifier(acl_entry_t entry_d);
int __cdecl acl_get_tag_type(acl_entry_t entry_d, acl_tag_t *tag_type_p);
acl_t __cdecl acl_init(int count);
int __cdecl acl_maximal_permset_mask_np(acl_permset_mask_t *mask_p);
int __cdecl acl_set_fd(int fd, acl_t acl);
int __cdecl acl_set_fd_np(int fd, acl_t acl, acl_type_t acl_type);
int __cdecl acl_set_file(const char *path_p, acl_type_t type, acl_t acl);
int __cdecl acl_set_flagset_np(void *obj_p, acl_flagset_t flagset_d);
int __cdecl acl_set_link_np(const char *path_p, acl_type_t type, acl_t acl);
int __cdecl acl_set_permset(acl_entry_t entry_d, acl_permset_t permset_d);
int __cdecl acl_set_permset_mask_np(acl_entry_t entry_d, acl_permset_mask_t mask);
int __cdecl acl_set_qualifier(acl_entry_t entry_d, const void *tag_qualifier_p);
int __cdecl acl_set_tag_type(acl_entry_t entry_d, acl_tag_t tag_type);
ssize_t __cdecl acl_size(acl_t acl);
char *__cdecl acl_to_text(acl_t acl, ssize_t *len_p);
int __cdecl acl_valid(acl_t acl);
int __cdecl acl_valid_fd_np(int fd, acl_type_t type, acl_t acl);
int __cdecl acl_valid_file_np(const char *path, acl_type_t type, acl_t acl);
int __cdecl acl_valid_link_np(const char *path, acl_type_t type, acl_t acl);
double __cdecl acos(double);
float __cdecl acosf(float);
double __cdecl acosh(double);
float __cdecl acoshf(float);
long double __cdecl acoshl(long double);
long double __cdecl acosl(long double);
chtype acs_map[];
kern_return_t __cdecl act_get_state(thread_act_t target_act, int flavor, thread_state_t old_state, mach_msg_type_number_t *old_stateCnt);
kern_return_t __cdecl act_set_state(thread_act_t target_act, int flavor, thread_state_t new_state, mach_msg_type_number_t new_stateCnt);
errcode_t __cdecl add_error_table(const struct error_table *et);
int __cdecl add_history(const char *);
int __cdecl add_mibdir(const char *);
int __cdecl add_mibfile(const char *, const char *, FILE *);
void __cdecl add_module_replacement(const char *, const char *, const char *, int);
int __cdecl add_profil(char *, size_t, unsigned __int64, unsigned int);
void __cdecl add_to_init_list(char *module_list);
int __cdecl add_trap_session(netsnmp_session *, int, int, int);
int __cdecl addch(const chtype);
int __cdecl addchnstr(const chtype *, int);
int __cdecl addchstr(const chtype *);
int __cdecl addnstr(const char *, int);
char *__cdecl addr2ascii(int, const void *, int, char *);
void addrsel_policy_init(void);
int __cdecl addstr(const char *);
int __cdecl adjtime(const struct timeval *, struct timeval *);
uLong __cdecl adler32(uLong adler, const Bytef *buf, uInt len);
uLong __cdecl adler32_combine(uLong, uLong, __int64);
void adopt_orphans(void);
int __cdecl agent_check_and_process(int block);
int __cdecl aio_cancel(int fd, struct aiocb *aiocbp);
int __cdecl aio_error(const struct aiocb *aiocbp);
int __cdecl aio_fsync(int op, struct aiocb *aiocbp);
int __cdecl aio_read(struct aiocb *aiocbp);
ssize_t __cdecl aio_return(struct aiocb *aiocbp);
int __cdecl aio_suspend(const struct aiocb *const aiocblist[], int nent, const struct timespec *timeoutp);
int __cdecl aio_write(struct aiocb *aiocbp);
unsigned int __cdecl alarm(unsigned int);
void __cdecl alarm_handler(int a);
void *__cdecl alloca(size_t);
int allow_severity;
int __cdecl alphasort(const void *, const void *);
OM_uint32 __cdecl apple_gss_krb5_export_authdata_if_relevant_context(OM_uint32 *minor_status, gss_ctx_id_t *context_handle, OM_uint32 version, void **kctx);
OM_uint32 __cdecl apple_gss_krb5_free_authdata_if_relevant(OM_uint32 *minor_status, void *kctx);
u_int32_t arc4random(void);
void __cdecl arc4random_addrandom(unsigned __int8 *, int);
void __cdecl arc4random_buf(void *, size_t);
void arc4random_stir(void);
u_int32_t __cdecl arc4random_uniform(u_int32_t);
unsigned __int8 *__cdecl asc2uni(const char *asc, int asclen, unsigned __int8 **uni, int *unilen);
int __cdecl ascii2addr(int, const char *, void *);
char *__cdecl asctime(const struct tm *);
char *__cdecl asctime_r(const struct tm *, char *);
double __cdecl asin(double);
float __cdecl asinf(float);
double __cdecl asinh(double);
float __cdecl asinhf(float);
long double __cdecl asinhl(long double);
long double __cdecl asinl(long double);
int __cdecl asl_add_log_file(aslclient asl, int fd);
void __cdecl asl_close(aslclient asl);
int __cdecl asl_close_auxiliary_file(int fd);
int __cdecl asl_create_auxiliary_file(aslmsg msg, const char *title, const char *uti, int *out_fd);
void __cdecl asl_free(aslmsg msg);
const char *__cdecl asl_get(aslmsg msg, const char *key);
const char *__cdecl asl_key(aslmsg msg, uint32_t n);
int asl_log(aslclient asl, aslmsg msg, int level, const char *format, ...);
int __cdecl asl_log_auxiliary_location(aslmsg msg, const char *title, const char *uti, const char *url);
aslmsg __cdecl asl_new(uint32_t type);
aslclient __cdecl asl_open(const char *ident, const char *facility, uint32_t opts);
aslclient __cdecl asl_open_from_file(int fd, const char *ident, const char *facility);
int __cdecl asl_remove_log_file(aslclient asl, int fd);
aslresponse __cdecl asl_search(aslclient asl, aslmsg msg);
int __cdecl asl_send(aslclient asl, aslmsg msg);
int __cdecl asl_set(aslmsg msg, const char *key, const char *value);
int __cdecl asl_set_filter(aslclient asl, int f);
int __cdecl asl_set_query(aslmsg msg, const char *key, const char *value, uint32_t op);
int __cdecl asl_unset(aslmsg msg, const char *key);
int __cdecl asl_vlog(aslclient asl, aslmsg msg, int level, const char *format, va_list ap);
void __cdecl aslresponse_free(aslresponse r);
aslmsg __cdecl aslresponse_next(aslresponse r);
int __cdecl asn1_Finish(ASN1_CTX *c);
int __cdecl asn1_GetSequence(ASN1_const_CTX *c, __int64 *length);
void __cdecl asn1_add_error(const unsigned __int8 *address, int offset);
int __cdecl asn1_const_Finish(ASN1_const_CTX *c);
const ASN1_TEMPLATE *__cdecl asn1_do_adb(ASN1_VALUE **pval, const ASN1_TEMPLATE *tt, int nullerr);
int __cdecl asn1_do_lock(ASN1_VALUE **pval, int op, const ASN1_ITEM *it);
void __cdecl asn1_enc_free(ASN1_VALUE **pval, const ASN1_ITEM *it);
void __cdecl asn1_enc_init(ASN1_VALUE **pval, const ASN1_ITEM *it);
int __cdecl asn1_enc_restore(int *len, unsigned __int8 **out, ASN1_VALUE **pval, const ASN1_ITEM *it);
int __cdecl asn1_enc_save(ASN1_VALUE **pval, const unsigned __int8 *in, int inlen, const ASN1_ITEM *it);
int __cdecl asn1_ex_c2i(ASN1_VALUE **pval, const unsigned __int8 *cont, int len, int utype, char *free_cont, const ASN1_ITEM *it);
int __cdecl asn1_ex_i2c(ASN1_VALUE **pval, unsigned __int8 *cont, int *putype, const ASN1_ITEM *it);
int __cdecl asn1_get_choice_selector(ASN1_VALUE **pval, const ASN1_ITEM *it);
ASN1_VALUE **__cdecl asn1_get_field_ptr(ASN1_VALUE **pval, const ASN1_TEMPLATE *tt);
int __cdecl asn1_set_choice_selector(ASN1_VALUE **pval, int value, const ASN1_ITEM *it);
u_char *__cdecl asn_build_bitstring(u_char *, size_t *, u_char, const u_char *, size_t);
u_char *__cdecl asn_build_double(u_char *, size_t *, u_char, const double *, size_t);
u_char *__cdecl asn_build_float(u_char *, size_t *, u_char, const float *, size_t);
u_char *__cdecl asn_build_header(u_char *, size_t *, u_char, size_t);
u_char *__cdecl asn_build_int(u_char *, size_t *, u_char, const __int64 *, size_t);
u_char *__cdecl asn_build_length(u_char *, size_t *, size_t);
u_char *__cdecl asn_build_null(u_char *, size_t *, u_char);
u_char *__cdecl asn_build_objid(u_char *, size_t *, u_char, oid *, size_t);
u_char *__cdecl asn_build_sequence(u_char *, size_t *, u_char, size_t);
u_char *__cdecl asn_build_signed_int64(u_char *, size_t *, u_char, const struct counter64 *, size_t);
u_char *__cdecl asn_build_string(u_char *, size_t *, u_char, const u_char *, size_t);
u_char *__cdecl asn_build_unsigned_int(u_char *, size_t *, u_char, const u_long *, size_t);
u_char *__cdecl asn_build_unsigned_int64(u_char *, size_t *, u_char, const struct counter64 *, size_t);
int __cdecl asn_check_packet(u_char *, size_t);
u_char *__cdecl asn_parse_bitstring(u_char *, size_t *, u_char *, u_char *, size_t *);
u_char *__cdecl asn_parse_double(u_char *, size_t *, u_char *, double *, size_t);
u_char *__cdecl asn_parse_float(u_char *, size_t *, u_char *, float *, size_t);
u_char *__cdecl asn_parse_header(u_char *, size_t *, u_char *);
u_char *__cdecl asn_parse_int(u_char *, size_t *, u_char *, __int64 *, size_t);
u_char *__cdecl asn_parse_length(u_char *, u_long *);
u_char *__cdecl asn_parse_null(u_char *, size_t *, u_char *);
u_char *__cdecl asn_parse_objid(u_char *, size_t *, u_char *, oid *, size_t *);
u_char *__cdecl asn_parse_sequence(u_char *, size_t *, u_char *, u_char expected_type, const char *estr);
u_char *__cdecl asn_parse_signed_int64(u_char *, size_t *, u_char *, struct counter64 *, size_t);
u_char *__cdecl asn_parse_string(u_char *, size_t *, u_char *, u_char *, size_t *);
u_char *__cdecl asn_parse_unsigned_int(u_char *, size_t *, u_char *, u_long *, size_t);
u_char *__cdecl asn_parse_unsigned_int64(u_char *, size_t *, u_char *, struct counter64 *, size_t);
int __cdecl asn_predict_int_length(int type, __int64 number, size_t len);
int __cdecl asn_predict_length(int type, u_char *ptr, size_t u_char_len);
int __cdecl asn_realloc(u_char **, size_t *);
int __cdecl asn_realloc_rbuild_bitstring(u_char **pkt, size_t *pkt_len, size_t *offset, int allow_realloc, u_char type, const u_char *data, size_t data_size);
int __cdecl asn_realloc_rbuild_double(u_char **pkt, size_t *pkt_len, size_t *offset, int allow_realloc, u_char type, const double *data, size_t data_size);
int __cdecl asn_realloc_rbuild_float(u_char **pkt, size_t *pkt_len, size_t *offset, int allow_realloc, u_char type, const float *data, size_t data_size);
int __cdecl asn_realloc_rbuild_header(u_char **pkt, size_t *pkt_len, size_t *offset, int allow_realloc, u_char type, size_t data_size);
int __cdecl asn_realloc_rbuild_int(u_char **pkt, size_t *pkt_len, size_t *offset, int allow_realloc, u_char type, const __int64 *data, size_t data_size);
int __cdecl asn_realloc_rbuild_length(u_char **pkt, size_t *pkt_len, size_t *offset, int allow_realloc, size_t data_size);
int __cdecl asn_realloc_rbuild_null(u_char **pkt, size_t *pkt_len, size_t *offset, int allow_realloc, u_char type);
int __cdecl asn_realloc_rbuild_objid(u_char **pkt, size_t *pkt_len, size_t *offset, int allow_realloc, u_char type, const oid *, size_t);
int __cdecl asn_realloc_rbuild_sequence(u_char **pkt, size_t *pkt_len, size_t *offset, int allow_realloc, u_char type, size_t data_size);
int __cdecl asn_realloc_rbuild_signed_int64(u_char **pkt, size_t *pkt_len, size_t *offset, int allow_realloc, u_char type, const struct counter64 *data, size_t);
int __cdecl asn_realloc_rbuild_string(u_char **pkt, size_t *pkt_len, size_t *offset, int allow_realloc, u_char type, const u_char *data, size_t data_size);
int __cdecl asn_realloc_rbuild_unsigned_int(u_char **pkt, size_t *pkt_len, size_t *offset, int allow_realloc, u_char type, const u_long *data, size_t data_size);
int __cdecl asn_realloc_rbuild_unsigned_int64(u_char **pkt, size_t *pkt_len, size_t *offset, int allow_realloc, u_char type, const struct counter64 *data, size_t);
int asprintf(char **, const char *, ...);
int asprintf_l(char **, locale_t, const char *, ...);
int __cdecl assume_default_colors(int, int);
double __cdecl atan(double);
double __cdecl atan2(double, double);
float __cdecl atan2f(float, float);
long double __cdecl atan2l(long double, long double);
float __cdecl atanf(float);
double __cdecl atanh(double);
float __cdecl atanhf(float);
long double __cdecl atanhl(long double);
long double __cdecl atanl(long double);
int __cdecl atexit(void (*)(void));
int __cdecl atexit_b(void *);
__int64 __cdecl atime_diff(const_marker_t first, const_marker_t second);
marker_t atime_newMarker(void);
int __cdecl atime_ready(const_marker_t pm, int deltaT);
void __cdecl atime_setMarker(marker_t pm);
double __cdecl atof(const char *);
double __cdecl atof_l(const char *, locale_t);
int __cdecl atoi(const char *);
int __cdecl atoi_l(const char *, locale_t);
__int64 __cdecl atol(const char *);
__int64 __cdecl atol_l(const char *, locale_t);
__int64 __cdecl atoll(const char *);
__int64 __cdecl atoll_l(const char *, locale_t);
int __cdecl attr_get(attr_t *, __int16 *, void *);
int __cdecl attr_off(attr_t, void *);
int __cdecl attr_on(attr_t, void *);
int __cdecl attr_set(attr_t, __int16, void *);
void __cdecl attribute(void *ctx, const xmlChar *fullname, const xmlChar *value);
void __cdecl attributeDecl(void *ctx, const xmlChar *elem, const xmlChar *fullname, int type, int def, const xmlChar *defaultValue, xmlEnumerationPtr tree);
int __cdecl attroff(int);
int __cdecl attron(int);
int __cdecl attrset(int);
int __cdecl au_bsm_to_domain(u_short bsm_domain, int *local_domainp);
int __cdecl au_bsm_to_errno(u_char bsm_error, int *errorp);
int __cdecl au_bsm_to_fcntl_cmd(u_short bsm_fcntl_cmd, int *local_fcntl_cmdp);
int __cdecl au_bsm_to_socket_type(u_short bsm_socket_type, int *local_socket_typep);
int __cdecl au_close(int d, int keep, __int16 event);
int __cdecl au_close_buffer(int d, __int16 event, u_char *buffer, size_t *buflen);
int __cdecl au_close_token(token_t *tok, u_char *buffer, size_t *buflen);
u_short __cdecl au_domain_to_bsm(int local_domain);
u_char __cdecl au_errno_to_bsm(int local_errno);
u_short __cdecl au_fcntl_cmd_to_bsm(int local_fcntl_command);
int __cdecl au_fetch_tok(tokenstr_t *tok, u_char *buf, int len);
void __cdecl au_free_token(token_t *tok);
int au_get_state(void);
uint32_t au_notify_initialize(void);
int au_notify_terminate(void);
int au_open(void);
ssize_t __cdecl au_poltostr(int policy, size_t maxsize, char *buf);
int __cdecl au_preselect(au_event_t event, au_mask_t *mask_p, int sorf, int flag);
void __cdecl au_print_flags_tok(FILE *outfp, tokenstr_t *tok, char *del, int oflags);
void __cdecl au_print_tok(FILE *outfp, tokenstr_t *tok, char *del, char raw, char sfrm);
void __cdecl au_print_tok_xml(FILE *outfp, tokenstr_t *tok, char *del, char raw, char sfrm);
void __cdecl au_print_xml_footer(FILE *outfp);
void __cdecl au_print_xml_header(FILE *outfp);
int __cdecl au_read_rec(FILE *fp, u_char **buf);
ssize_t __cdecl au_sflagstostr(uint64_t flags, size_t maxsize, char *buf);
u_short __cdecl au_socket_type_to_bsm(int local_socket_type);
const char *__cdecl au_strerror(u_char bsm_error);
int __cdecl au_strtopol(const char *polstr, int *policy);
int __cdecl au_strtosflags(const char *sflagsstr, uint64_t *flags);
token_t *__cdecl au_to_arg(char n, const char *text, uint32_t v);
token_t *__cdecl au_to_arg32(char n, const char *text, uint32_t v);
token_t *__cdecl au_to_arg64(char n, const char *text, uint64_t v);
token_t *__cdecl au_to_data(char unit_print, char unit_type, char unit_count, const char *p);
token_t *__cdecl au_to_exec_args(char **argv);
token_t *__cdecl au_to_exec_env(char **envp);
token_t *__cdecl au_to_exit(int retval, int err);
token_t *__cdecl au_to_file(const char *file, struct timeval tm);
token_t *__cdecl au_to_groups(int *groups);
token_t *__cdecl au_to_header(int rec_size, au_event_t e_type, au_emod_t e_mod);
token_t *__cdecl au_to_header32(int rec_size, au_event_t e_type, au_emod_t e_mod);
token_t *__cdecl au_to_header32_ex(int rec_size, au_event_t e_type, au_emod_t e_mod);
token_t *__cdecl au_to_header32_ex_tm(int rec_size, au_event_t e_type, au_emod_t e_mod, struct timeval tm, struct auditinfo_addr *aia);
token_t *__cdecl au_to_header32_tm(int rec_size, au_event_t e_type, au_emod_t e_mod, struct timeval tm);
token_t *__cdecl au_to_header64(int rec_size, au_event_t e_type, au_emod_t e_mod);
token_t *__cdecl au_to_header64_tm(int rec_size, au_event_t e_type, au_emod_t e_mod, struct timeval tm);
token_t *__cdecl au_to_header_ex(int rec_size, au_event_t e_type, au_emod_t e_mod);
token_t *__cdecl au_to_in_addr(struct in_addr *internet_addr);
token_t *__cdecl au_to_in_addr_ex(struct in6_addr *internet_addr);
token_t *__cdecl au_to_ip(struct ip *ip);
token_t *__cdecl au_to_ipc(char type, int id);
token_t *__cdecl au_to_ipc_perm(struct ipc_perm *perm);
token_t *__cdecl au_to_iport(uint16_t iport);
token_t *__cdecl au_to_kevent(struct kevent *kev);
token_t *au_to_me(void);
token_t *__cdecl au_to_newgroups(uint16_t n, gid_t *groups);
token_t *__cdecl au_to_opaque(const char *data, uint16_t bytes);
token_t *__cdecl au_to_path(const char *path);
token_t *__cdecl au_to_process(au_id_t auid, uid_t euid, gid_t egid, uid_t ruid, gid_t rgid, pid_t pid, au_asid_t sid, au_tid_t *tid);
token_t *__cdecl au_to_process32(au_id_t auid, uid_t euid, gid_t egid, uid_t ruid, gid_t rgid, pid_t pid, au_asid_t sid, au_tid_t *tid);
token_t *__cdecl au_to_process32_ex(au_id_t auid, uid_t euid, gid_t egid, uid_t ruid, gid_t rgid, pid_t pid, au_asid_t sid, au_tid_addr_t *tid);
token_t *__cdecl au_to_process64(au_id_t auid, uid_t euid, gid_t egid, uid_t ruid, gid_t rgid, pid_t pid, au_asid_t sid, au_tid_t *tid);
token_t *__cdecl au_to_process64_ex(au_id_t auid, uid_t euid, gid_t egid, uid_t ruid, gid_t rgid, pid_t pid, au_asid_t sid, au_tid_addr_t *tid);
token_t *__cdecl au_to_process_ex(au_id_t auid, uid_t euid, gid_t egid, uid_t ruid, gid_t rgid, pid_t pid, au_asid_t sid, au_tid_addr_t *tid);
token_t *__cdecl au_to_return(char status, uint32_t ret);
token_t *__cdecl au_to_return32(char status, uint32_t ret);
token_t *__cdecl au_to_return64(char status, uint64_t ret);
token_t *__cdecl au_to_seq(__int64 audit_count);
token_t *__cdecl au_to_sock_inet(struct sockaddr_in *so);
token_t *__cdecl au_to_sock_inet128(struct sockaddr_in6 *so);
token_t *__cdecl au_to_sock_inet32(struct sockaddr_in *so);
token_t *__cdecl au_to_sock_unix(struct sockaddr_un *so);
token_t *__cdecl au_to_socket_ex(u_short so_domain, u_short so_type, struct sockaddr *sa_local, struct sockaddr *sa_remote);
token_t *__cdecl au_to_subject(au_id_t auid, uid_t euid, gid_t egid, uid_t ruid, gid_t rgid, pid_t pid, au_asid_t sid, au_tid_t *tid);
token_t *__cdecl au_to_subject32(au_id_t auid, uid_t euid, gid_t egid, uid_t ruid, gid_t rgid, pid_t pid, au_asid_t sid, au_tid_t *tid);
token_t *__cdecl au_to_subject32_ex(au_id_t auid, uid_t euid, gid_t egid, uid_t ruid, gid_t rgid, pid_t pid, au_asid_t sid, au_tid_addr_t *tid);
token_t *__cdecl au_to_subject64(au_id_t auid, uid_t euid, gid_t egid, uid_t ruid, gid_t rgid, pid_t pid, au_asid_t sid, au_tid_t *tid);
token_t *__cdecl au_to_subject64_ex(au_id_t auid, uid_t euid, gid_t egid, uid_t ruid, gid_t rgid, pid_t pid, au_asid_t sid, au_tid_addr_t *tid);
token_t *__cdecl au_to_subject_ex(au_id_t auid, uid_t euid, gid_t egid, uid_t ruid, gid_t rgid, pid_t pid, au_asid_t sid, au_tid_addr_t *tid);
token_t *__cdecl au_to_text(const char *text);
token_t *__cdecl au_to_trailer(int rec_size);
token_t *__cdecl au_to_zonename(const char *zonename);
int __cdecl au_user_mask(char *username, au_mask_t *mask_p);
int __cdecl au_write(int d, token_t *m);
int __cdecl audit(const void *, int);
int __cdecl audit_get_car(char *path, size_t sz);
int __cdecl audit_get_class(au_evclass_map_t *evc_map, size_t sz);
int __cdecl audit_get_cond(int *cond);
int __cdecl audit_get_cwd(char *path, size_t sz);
int __cdecl audit_get_fsize(au_fstat_t *fstat, size_t sz);
int __cdecl audit_get_kaudit(auditinfo_addr_t *aia, size_t sz);
int __cdecl audit_get_kmask(au_mask_t *kmask, size_t sz);
int __cdecl audit_get_pinfo(auditpinfo_t *api, size_t sz);
int __cdecl audit_get_pinfo_addr(auditpinfo_addr_t *apia, size_t sz);
int __cdecl audit_get_policy(int *policy);
int __cdecl audit_get_qctrl(au_qctrl_t *qctrl, size_t sz);
int __cdecl audit_get_sflags(uint64_t *flags);
int __cdecl audit_get_sflags_mask(const char *which, uint64_t *mask);
int __cdecl audit_get_sinfo_addr(auditinfo_addr_t *aia, size_t sz);
int __cdecl audit_get_stat(au_stat_t *stats, size_t sz);
int __cdecl audit_send_trigger(int *trigger);
au_asid_t __cdecl audit_session_join(mach_port_name_t port);
int __cdecl audit_session_port(au_asid_t asid, mach_port_name_t *portname);
mach_port_name_t audit_session_self(void);
int __cdecl audit_set_class(au_evclass_map_t *evc_map, size_t sz);
int __cdecl audit_set_cond(int *cond);
int __cdecl audit_set_fsize(au_fstat_t *fstat, size_t sz);
int __cdecl audit_set_kaudit(auditinfo_addr_t *aia, size_t sz);
int __cdecl audit_set_kmask(au_mask_t *kmask, size_t sz);
int __cdecl audit_set_pmask(auditpinfo_t *api, size_t sz);
int __cdecl audit_set_policy(int *policy);
int __cdecl audit_set_qctrl(au_qctrl_t *qctrl, size_t sz);
int __cdecl audit_set_sflags(uint64_t flags);
int __cdecl audit_set_sflags_mask(const char *which, uint64_t mask);
int __cdecl audit_set_stat(au_stat_t *stats, size_t sz);
int __cdecl audit_set_terminal_id(au_tid_t *tid);
int audit_submit(__int16 au_event, au_id_t auid, char status, int reterr, const char *fmt, ...);
void __cdecl audit_token_to_au32(audit_token_t atoken, uid_t *auidp, uid_t *euidp, gid_t *egidp, uid_t *ruidp, gid_t *rgidp, pid_t *pidp, au_asid_t *asidp, au_tid_t *tidp);
int __cdecl audit_write(__int16 event_code, token_t *subject, token_t *misctok, char retval, int errcode);
int __cdecl audit_write_failure(__int16 event_code, char *errmsg, int errret, au_id_t auid, uid_t euid, gid_t egid, uid_t ruid, gid_t rgid, pid_t pid, au_asid_t sid, au_tid_t *tid);
int __cdecl audit_write_failure_na(__int16 event_code, char *errmsg, int errret, uid_t euid, gid_t egid, pid_t pid, au_tid_t *tid);
int __cdecl audit_write_failure_self(__int16 event_code, char *errmsg, int errret);
int __cdecl audit_write_success(__int16 event_code, token_t *misctok, au_id_t auid, uid_t euid, gid_t egid, uid_t ruid, gid_t rgid, pid_t pid, au_asid_t sid, au_tid_t *tid);
int __cdecl audit_write_success_self(__int16 event_code, token_t *misctok);
int __cdecl auditctl(const char *);
int __cdecl auditon(int, void *, int);
AUTH *__cdecl authdes_create(char *, unsigned int, struct sockaddr_in *, des_block *);
AUTH *authnone_create(void);
char *authtype_names[];
AUTH *__cdecl authunix_create(char *, int, int, int, int *);
AUTH *authunix_create_default(void);
int auto_nlist_noop(void);
struct loadavg averunnable;
char *__cdecl basename(char *);
int baudrate(void);
int __cdecl bcmp(const void *, const void *, size_t);
void __cdecl bcopy(const void *, void *, size_t);
int beep(void);
BerElement *ber_alloc(void);
BerElement *__cdecl ber_alloc_t(int beroptions);
void __cdecl ber_bprint(const char *data, ber_len_t len);
int __cdecl ber_bvarray_add(BerVarray *p, BerValue *bv);
void __cdecl ber_bvarray_free(BerVarray p);
struct berval *__cdecl ber_bvdup(struct berval *src);
int __cdecl ber_bvecadd(struct berval ***bvec, struct berval *bv);
void __cdecl ber_bvecfree(struct berval **bv);
void __cdecl ber_bvfree(struct berval *bv);
struct berval *__cdecl ber_bvreplace(struct berval *dst, const struct berval *src);
int __cdecl ber_decode_oid(struct berval *in, struct berval *out);
void __cdecl ber_dump(BerElement *ber, int inout);
BerElement *__cdecl ber_dup(BerElement *ber);
struct berval *__cdecl ber_dupbv(struct berval *dst, struct berval *src);
int __cdecl ber_encode_oid(struct berval *in, struct berval *out);
int *ber_errno_addr(void);
void __cdecl ber_error_print(const char *data);
ber_tag_t __cdecl ber_first_element(BerElement *ber, ber_len_t *len, char **last);
int __cdecl ber_flatten(BerElement *ber, struct berval **bvPtr);
int __cdecl ber_flatten2(BerElement *ber, struct berval *bv, int alloc);
int __cdecl ber_flush(Sockbuf *sb, BerElement *ber, int freeit);
int __cdecl ber_flush2(Sockbuf *sb, BerElement *ber, int freeit);
void __cdecl ber_free(BerElement *ber, int freebuf);
void __cdecl ber_free_buf(BerElement *ber);
ber_tag_t __cdecl ber_get_bitstringa(BerElement *ber, char **buf, ber_len_t *len);
ber_tag_t __cdecl ber_get_boolean(BerElement *ber, ber_int_t *boolval);
ber_tag_t __cdecl ber_get_enum(BerElement *ber, ber_int_t *num);
ber_tag_t __cdecl ber_get_int(BerElement *ber, ber_int_t *num);
ber_tag_t __cdecl ber_get_next(Sockbuf *sb, ber_len_t *len, BerElement *ber);
ber_tag_t __cdecl ber_get_null(BerElement *ber);
int __cdecl ber_get_option(void *item, int option, void *outvalue);
ber_tag_t __cdecl ber_get_stringa(BerElement *ber, char **buf);
ber_tag_t __cdecl ber_get_stringal(BerElement *ber, struct berval **bv);
ber_tag_t __cdecl ber_get_stringb(BerElement *ber, char *buf, ber_len_t *len);
ber_tag_t __cdecl ber_get_stringbv(BerElement *ber, struct berval *bv, int options);
ber_tag_t __cdecl ber_get_tag(BerElement *ber);
BerElement *__cdecl ber_init(struct berval *bv);
void __cdecl ber_init2(BerElement *ber, struct berval *bv, int options);
void __cdecl ber_init_w_nullc(BerElement *ber, int options);
struct berval *__cdecl ber_mem2bv(const char *, ber_len_t len, int duplicate, struct berval *bv);
void *__cdecl ber_memalloc(ber_len_t s);
void *__cdecl ber_memcalloc(ber_len_t n, ber_len_t s);
void __cdecl ber_memfree(void *p);
void *__cdecl ber_memrealloc(void *p, ber_len_t s);
void __cdecl ber_memvfree(void **vector);
ber_tag_t __cdecl ber_next_element(BerElement *ber, ber_len_t *len, const char *last);
ber_tag_t __cdecl ber_peek_element(const BerElement *ber, struct berval *bv);
ber_tag_t __cdecl ber_peek_tag(BerElement *ber, ber_len_t *len);
int ber_printf(BerElement *ber, const char *fmt, ...);
int __cdecl ber_put_berval(BerElement *ber, struct berval *bv, ber_tag_t tag);
int __cdecl ber_put_bitstring(BerElement *ber, const char *str, ber_len_t bitlen, ber_tag_t tag);
int __cdecl ber_put_boolean(BerElement *ber, ber_int_t boolval, ber_tag_t tag);
int __cdecl ber_put_enum(BerElement *ber, ber_int_t num, ber_tag_t tag);
int __cdecl ber_put_int(BerElement *ber, ber_int_t num, ber_tag_t tag);
int __cdecl ber_put_null(BerElement *ber, ber_tag_t tag);
int __cdecl ber_put_ostring(BerElement *ber, const char *str, ber_len_t len, ber_tag_t tag);
int __cdecl ber_put_seq(BerElement *ber);
int __cdecl ber_put_set(BerElement *ber);
int __cdecl ber_put_string(BerElement *ber, const char *str, ber_tag_t tag);
char ber_pvt_opt_on;
ber_slen_t __cdecl ber_read(BerElement *ber, char *buf, ber_len_t len);
int __cdecl ber_remaining(BerElement *ber);
void __cdecl ber_reset(BerElement *ber, int was_writing);
ber_tag_t ber_scanf(BerElement *ber, const char *fmt, ...);
int __cdecl ber_set_option(void *item, int option, const void *invalue);
ber_slen_t __cdecl ber_skip_data(BerElement *ber, ber_len_t len);
ber_tag_t __cdecl ber_skip_element(BerElement *ber, struct berval *bv);
ber_tag_t __cdecl ber_skip_tag(BerElement *ber, ber_len_t *len);
int __cdecl ber_sockbuf_add_io(Sockbuf *sb, Sockbuf_IO *sbio, int layer, void *arg);
Sockbuf *ber_sockbuf_alloc(void);
int __cdecl ber_sockbuf_ctrl(Sockbuf *sb, int opt, void *arg);
void __cdecl ber_sockbuf_free(Sockbuf *sb);
Sockbuf_IO ber_sockbuf_io_debug;
Sockbuf_IO ber_sockbuf_io_fd;
Sockbuf_IO ber_sockbuf_io_readahead;
Sockbuf_IO ber_sockbuf_io_tcp;
Sockbuf_IO ber_sockbuf_io_udp;
int __cdecl ber_sockbuf_remove_io(Sockbuf *sb, Sockbuf_IO *sbio, int layer);
int __cdecl ber_start_seq(BerElement *ber, ber_tag_t tag);
int __cdecl ber_start_set(BerElement *ber, ber_tag_t tag);
struct berval *__cdecl ber_str2bv(const char *, ber_len_t len, int duplicate, struct berval *bv);
char *__cdecl ber_strdup(const char *);
char *__cdecl ber_strndup(const char *s, ber_len_t l);
ber_len_t __cdecl ber_strnlen(const char *s, ber_len_t len);
ber_slen_t __cdecl ber_write(BerElement *ber, const char *buf, ber_len_t len, int zero);
u_int __cdecl binary_to_hex(const u_char *input, size_t len, char **output);
int __cdecl bind(int, const struct sockaddr *, socklen_t);
int __cdecl bindresvport(int, struct sockaddr_in *);
int __cdecl bindresvport_sa(int, struct sockaddr *);
int __cdecl bkgd(chtype);
void __cdecl bkgdset(chtype);
unsigned __int64 __cdecl bn_add_words(unsigned __int64 *rp, const unsigned __int64 *ap, const unsigned __int64 *bp, int num);
unsigned __int64 __cdecl bn_div_words(unsigned __int64 h, unsigned __int64 l, unsigned __int64 d);
BIGNUM *__cdecl bn_dup_expand(const BIGNUM *a, int words);
BIGNUM *__cdecl bn_expand2(BIGNUM *a, int words);
unsigned __int64 __cdecl bn_mul_add_words(unsigned __int64 *rp, const unsigned __int64 *ap, int num, unsigned __int64 w);
unsigned __int64 __cdecl bn_mul_words(unsigned __int64 *rp, const unsigned __int64 *ap, int num, unsigned __int64 w);
void __cdecl bn_sqr_words(unsigned __int64 *rp, const unsigned __int64 *ap, int num);
unsigned __int64 __cdecl bn_sub_words(unsigned __int64 *rp, const unsigned __int64 *ap, const unsigned __int64 *bp, int num);
char *const boolcodes[];
char *const boolfnames[];
char *const boolnames[];
bp_getfile_res *__cdecl bootparamproc_getfile_1(bp_getfile_arg *, CLIENT *);
bp_getfile_res *__cdecl bootparamproc_getfile_1_svc(bp_getfile_arg *, struct svc_req *);
bp_whoami_res *__cdecl bootparamproc_whoami_1(bp_whoami_arg *, CLIENT *);
bp_whoami_res *__cdecl bootparamproc_whoami_1_svc(bp_whoami_arg *, struct svc_req *);
kern_return_t __cdecl bootstrap_check_in(mach_port_t bp, const name_t service_name, mach_port_t *sp);
kern_return_t __cdecl bootstrap_create_server(mach_port_t bp, cmd_t server_cmd, uid_t server_uid, boolean_t on_demand, mach_port_t *server_port);
kern_return_t __cdecl bootstrap_create_service(mach_port_t bp, name_t service_name, mach_port_t *sp);
kern_return_t __cdecl bootstrap_look_up(mach_port_t bp, const name_t service_name, mach_port_t *sp);
kern_return_t __cdecl bootstrap_parent(mach_port_t bp, mach_port_t *parent_port);
mach_port_t bootstrap_port;
kern_return_t __cdecl bootstrap_register(mach_port_t bp, name_t service_name, mach_port_t sp);
kern_return_t __cdecl bootstrap_status(mach_port_t bp, name_t service_name, bootstrap_status_t *service_active);
const char *__cdecl bootstrap_strerror(kern_return_t r);
kern_return_t __cdecl bootstrap_subset(mach_port_t bp, mach_port_t requestor_port, mach_port_t *subset_port);
kern_return_t __cdecl bootstrap_unprivileged(mach_port_t bp, mach_port_t *unpriv_port);
int __cdecl border(chtype, chtype, chtype, chtype, chtype, chtype, chtype, chtype);
int __cdecl bottom_panel(PANEL *);
int __cdecl box(WINDOW *, chtype, chtype);
void __cdecl bpf_dump(const struct bpf_program *, int);
u_int __cdecl bpf_filter(const struct bpf_insn *, const u_char *, u_int, u_int);
char *__cdecl bpf_image(const struct bpf_insn *, int);
int __cdecl bpf_validate(const struct bpf_insn *, int);
void *__cdecl brk(const void *);
void (__cdecl *__cdecl bsd_signal(int, void (__cdecl *)(int)))(int);
void *__cdecl bsearch(const void *, const void *, size_t, size_t, int (__cdecl *)(const void *, const void *));
void *__cdecl bsearch_b(const void *, const void *, size_t, size_t, void *);
wint_t __cdecl btowc(int);
wint_t __cdecl btowc_l(int, locale_t);
buf_t __cdecl buf_alloc(vnode_t);
errno_t __cdecl buf_bawrite(buf_t);
errno_t __cdecl buf_bdwrite(buf_t);
void __cdecl buf_biodone(buf_t);
errno_t __cdecl buf_biowait(buf_t);
daddr64_t __cdecl buf_blkno(buf_t);
errno_t __cdecl buf_bread(vnode_t, daddr64_t, int, kauth_cred_t, buf_t *);
errno_t __cdecl buf_breadn(vnode_t, daddr64_t, int, daddr64_t *, int *, int, kauth_cred_t, buf_t *);
void __cdecl buf_brelse(buf_t);
errno_t __cdecl buf_bwrite(buf_t);
void *__cdecl buf_callback(buf_t);
void __cdecl buf_clear(buf_t);
void __cdecl buf_clear_redundancy_flags(buf_t, uint32_t);
void __cdecl buf_clearflags(buf_t, int32_t);
buf_t __cdecl buf_clone(buf_t, int, int, void (__cdecl *)(buf_t, void *), void *);
uint32_t __cdecl buf_count(buf_t);
buf_t __cdecl buf_create_shadow(buf_t bp, boolean_t force_copy, uintptr_t external_storage, void (__cdecl *iodone)(buf_t, void *), void *arg);
uintptr_t __cdecl buf_dataptr(buf_t);
dev_t __cdecl buf_device(buf_t);
uint32_t __cdecl buf_dirtyend(buf_t);
uint32_t __cdecl buf_dirtyoff(buf_t);
void *__cdecl buf_drvdata(buf_t);
errno_t __cdecl buf_error(buf_t);
int32_t __cdecl buf_flags(buf_t);
void __cdecl buf_flushdirtyblks(vnode_t, int, int, const char *);
void __cdecl buf_free(buf_t);
int __cdecl buf_fromcache(buf_t);
void *__cdecl buf_fsprivate(buf_t);
int __cdecl buf_fua(buf_t);
buf_t __cdecl buf_getblk(vnode_t, daddr64_t, int, int, int, int);
buf_t __cdecl buf_geteblk(int);
errno_t __cdecl buf_invalblkno(vnode_t, daddr64_t, int);
int __cdecl buf_invalidateblks(vnode_t, int, int, int);
void __cdecl buf_iterate(vnode_t, int (__cdecl *)(buf_t, void *), int, void *);
daddr64_t __cdecl buf_lblkno(buf_t);
errno_t __cdecl buf_map(buf_t, caddr_t *);
void __cdecl buf_markaged(buf_t);
void __cdecl buf_markclean(buf_t);
void __cdecl buf_markdelayed(buf_t);
void __cdecl buf_markeintr(buf_t);
void __cdecl buf_markfua(buf_t);
void __cdecl buf_markinvalid(buf_t);
errno_t __cdecl buf_meta_bread(vnode_t, daddr64_t, int, kauth_cred_t, buf_t *);
errno_t __cdecl buf_meta_breadn(vnode_t, daddr64_t, int, daddr64_t *, int *, int, kauth_cred_t, buf_t *);
proc_t __cdecl buf_proc(buf_t);
kauth_cred_t __cdecl buf_rcred(buf_t);
uint32_t __cdecl buf_redundancy_flags(buf_t);
void __cdecl buf_reset(buf_t, int32_t);
uint32_t __cdecl buf_resid(buf_t);
void __cdecl buf_set_redundancy_flags(buf_t, uint32_t);
void __cdecl buf_setblkno(buf_t, daddr64_t);
errno_t __cdecl buf_setcallback(buf_t, void (__cdecl *)(buf_t, void *), void *);
void __cdecl buf_setcount(buf_t, uint32_t);
void __cdecl buf_setdataptr(buf_t, uintptr_t);
errno_t __cdecl buf_setdevice(buf_t, vnode_t);
void __cdecl buf_setdirtyend(buf_t, uint32_t);
void __cdecl buf_setdirtyoff(buf_t, uint32_t);
void __cdecl buf_setdrvdata(buf_t, void *);
void __cdecl buf_seterror(buf_t, errno_t);
void __cdecl buf_setflags(buf_t, int32_t);
void __cdecl buf_setfsprivate(buf_t, void *);
void __cdecl buf_setlblkno(buf_t, daddr64_t);
void __cdecl buf_setresid(buf_t, uint32_t);
void __cdecl buf_setsize(buf_t, uint32_t);
errno_t __cdecl buf_setupl(buf_t, upl_t, uint32_t);
void __cdecl buf_setvnode(buf_t, vnode_t);
int __cdecl buf_shadow(buf_t bp);
uint32_t __cdecl buf_size(buf_t);
errno_t __cdecl buf_strategy(vnode_t, void *);
errno_t __cdecl buf_unmap(buf_t);
void *__cdecl buf_upl(buf_t);
uint32_t __cdecl buf_uploffset(buf_t);
int __cdecl buf_valid(buf_t);
vnode_t __cdecl buf_vnode(buf_t);
kauth_cred_t __cdecl buf_wcred(buf_t);
int __cdecl build_oid(oid **out, size_t *out_len, oid *prefix, size_t prefix_len, netsnmp_variable_list *indexes);
int __cdecl build_oid_noalloc(oid *in, size_t in_len, size_t *out_len, oid *prefix, size_t prefix_len, netsnmp_variable_list *indexes);
int __cdecl build_oid_segment(netsnmp_variable_list *var);
void __cdecl bzero(void *, size_t);
ASN1_BIT_STRING *__cdecl c2i_ASN1_BIT_STRING(ASN1_BIT_STRING **a, const unsigned __int8 **pp, __int64 length);
ASN1_INTEGER *__cdecl c2i_ASN1_INTEGER(ASN1_INTEGER **a, const unsigned __int8 **pp, __int64 length);
ASN1_OBJECT *__cdecl c2i_ASN1_OBJECT(ASN1_OBJECT **a, const unsigned __int8 **pp, __int64 length);
int __cdecl cache_create(const char *name, cache_attributes_t *attrs, cache_t **cache_out);
int __cdecl cache_destroy(cache_t *cache);
int __cdecl cache_get_and_retain(cache_t *cache, void *key, void **value_out);
uintptr_t __cdecl cache_hash_byte_string(const char *data, size_t bytes);
uintptr_t __cdecl cache_key_hash_cb_cstring(void *key, void *unused);
uintptr_t __cdecl cache_key_hash_cb_integer(void *key, void *unused);
bool __cdecl cache_key_is_equal_cb_cstring(void *key1, void *key2, void *unused);
bool __cdecl cache_key_is_equal_cb_integer(void *key1, void *key2, void *unused);
void __cdecl cache_release_cb_free(void *key_or_value, void *unused);
int __cdecl cache_release_value(cache_t *cache, void *value);
int __cdecl cache_remove(cache_t *cache, void *key);
int __cdecl cache_remove_all(cache_t *cache);
int __cdecl cache_set_and_retain(cache_t *cache, void *key, void *value, cache_cost_t cost);
bool __cdecl cache_value_make_nonpurgeable_cb(void *value, void *unused);
void __cdecl cache_value_make_purgeable_cb(void *value, void *unused);
u_int __cdecl calculate_sectime_diff(const struct timeval *now, const struct timeval *then);
int __cdecl calculate_time_diff(const struct timeval *, const struct timeval *);
void *__cdecl calloc(size_t, size_t);
bool can_change_color(void);
int __cdecl cannot_audit(int);
int __cdecl catclose(nl_catd);
char *__cdecl catgets(nl_catd, int, int, const char *);
nl_catd __cdecl catopen(const char *, int);
int cbreak(void);
double __cdecl cbrt(double);
float __cdecl cbrtf(float);
long double __cdecl cbrtl(long double);
void __cdecl cdataBlock(void *ctx, const xmlChar *value, int len);
double __cdecl ceil(double);
float __cdecl ceilf(float);
long double __cdecl ceill(long double);
speed_t __cdecl cfgetispeed(const struct termios *);
speed_t __cdecl cfgetospeed(const struct termios *);
void __cdecl cfmakeraw(struct termios *);
int __cdecl cfsetispeed(struct termios *, speed_t);
int __cdecl cfsetospeed(struct termios *, speed_t);
int __cdecl cfsetspeed(struct termios *, speed_t);
char *__cdecl cgetcap(char *, const char *, int);
int cgetclose(void);
int __cdecl cgetent(char **, char **, const char *);
int __cdecl cgetfirst(char **, char **);
int __cdecl cgetmatch(const char *, const char *);
int __cdecl cgetnext(char **, char **);
int __cdecl cgetnum(char *, const char *, __int64 *);
int __cdecl cgetset(const char *);
int __cdecl cgetstr(char *, const char *, char **);
int __cdecl cgetustr(char *, const char *, char **);
void cgiAbort(const char *title, const char *stylesheet, const char *format, ...);
int __cdecl cgiCheckVariables(const char *names);
void cgiClearVariables(void);
void *__cdecl cgiCompileSearch(const char *query);
void __cdecl cgiCopyTemplateFile(FILE *out, const char *tmpl);
void __cdecl cgiCopyTemplateLang(const char *tmpl);
int __cdecl cgiDoSearch(void *search, const char *text);
void cgiEndHTML(void);
void cgiEndMultipart(void);
char *__cdecl cgiFormEncode(char *dst, const char *src, size_t dstsize);
void __cdecl cgiFreeSearch(void *search);
const char *__cdecl cgiGetArray(const char *name, int element);
void __cdecl cgiGetAttributes(ipp_t *request, const char *tmpl);
const char *__cdecl cgiGetCookie(const char *name);
const cgi_file_t *cgiGetFile(void);
cups_array_t *__cdecl cgiGetIPPObjects(ipp_t *response, void *search);
int __cdecl cgiGetSize(const char *name);
char *cgiGetTemplateDir(void);
const char *__cdecl cgiGetVariable(const char *name);
int cgiInitialize(void);
int cgiIsPOST(void);
void __cdecl cgiMoveJobs(http_t *http, const char *dest, int job_id);
void __cdecl cgiPrintCommand(http_t *http, const char *dest, const char *command, const char *title);
void __cdecl cgiPrintTestPage(http_t *http, const char *dest);
char *__cdecl cgiRewriteURL(const char *uri, char *url, int urlsize, const char *newresource);
void __cdecl cgiSetArray(const char *name, int element, const char *value);
void __cdecl cgiSetCookie(const char *name, const char *value, const char *path, const char *domain, time_t expires, int secure);
ipp_attribute_t *__cdecl cgiSetIPPObjectVars(ipp_attribute_t *obj, const char *prefix, int element);
int __cdecl cgiSetIPPVars(ipp_t *response, const char *filter_name, const char *filter_value, const char *prefix, int parent_el);
void cgiSetServerVersion(void);
void __cdecl cgiSetSize(const char *name, int size);
void __cdecl cgiSetVariable(const char *name, const char *value);
void __cdecl cgiShowIPPError(const char *message);
void __cdecl cgiShowJobs(http_t *http, const char *dest);
void __cdecl cgiStartHTML(const char *title);
void cgiStartMultipart(void);
int cgiSupportsMultipart(void);
const char *__cdecl cgiText(const char *message);
void __cdecl characters(void *ctx, const xmlChar *ch, int len);
int __cdecl chdir(const char *);
int __cdecl checkNamespace(void *ctx, xmlChar *nameSpace);
int __cdecl check_access(netsnmp_pdu *pdu);
char __cdecl check_rowstatus_transition(int old_val, int new_val);
char __cdecl check_rowstatus_with_storagetype_transition(int old_val, int new_val, int old_storage);
char __cdecl check_storage_transition(int old_val, int new_val);
int __cdecl chflags(const char *, __uint32_t);
int __cdecl chgat(int, attr_t, __int16, const void *);
int __cdecl chmod(const char *, mode_t);
int __cdecl chmodx_np(const char *, filesec_t);
int __cdecl chown(const char *, uid_t, gid_t);
int __cdecl chroot(const char *);
void __cdecl clean_exit();
int clear(void);
void clear_callback(void);
void clear_context(void);
void clear_history(void);
void clear_sec_mod(void);
void clear_snmp_enum(void);
void __cdecl clear_tree_flags(struct tree *tp);
void clear_user_list(void);
void __cdecl clearerr(FILE *);
int __cdecl clearok(WINDOW *, bool);
enum clnt_stat __cdecl clnt_broadcast(unsigned int, unsigned int, unsigned int, xdrproc_t, char *, xdrproc_t, char *, int (__cdecl *)());
CLIENT *__cdecl clnt_create(char *, unsigned int, unsigned int, char *);
void __cdecl clnt_pcreateerror(char *);
void __cdecl clnt_perrno(enum clnt_stat);
void __cdecl clnt_perror(CLIENT *, char *);
char *__cdecl clnt_spcreateerror(char *);
char *__cdecl clnt_sperrno(enum clnt_stat);
char *__cdecl clnt_sperror(CLIENT *, char *);
CLIENT *__cdecl clntraw_create(unsigned int, unsigned int);
CLIENT *__cdecl clnttcp_create(struct sockaddr_in *, unsigned int, unsigned int, int *, unsigned int, unsigned int);
CLIENT *__cdecl clntudp_bufcreate(struct sockaddr_in *, unsigned int, unsigned int, struct timeval, int *, unsigned int, unsigned int);
CLIENT *__cdecl clntudp_create(struct sockaddr_in *, unsigned int, unsigned int, struct timeval, int *);
clock_t clock(void);
kern_return_t __cdecl clock_alarm(clock_serv_t clock_serv, alarm_type_t alarm_type, mach_timespec_t alarm_time, clock_reply_t alarm_port);
kern_return_t __cdecl clock_alarm_reply(clock_reply_t alarm_port, mach_msg_type_name_t alarm_portPoly, kern_return_t alarm_code, alarm_type_t alarm_type, mach_timespec_t alarm_time);
kern_return_t __cdecl clock_get_attributes(clock_serv_t clock_serv, clock_flavor_t flavor, clock_attr_t clock_attr, mach_msg_type_number_t *clock_attrCnt);
kern_return_t __cdecl clock_get_res(mach_port_t, clock_res_t *);
kern_return_t __cdecl clock_get_time(clock_serv_t clock_serv, mach_timespec_t *cur_time);
kern_return_t __cdecl clock_set_attributes(clock_ctrl_t clock_ctrl, clock_flavor_t flavor, clock_attr_t clock_attr, mach_msg_type_number_t clock_attrCnt);
kern_return_t __cdecl clock_set_res(mach_port_t, clock_res_t);
kern_return_t __cdecl clock_set_time(clock_ctrl_t clock_ctrl, mach_timespec_t new_time);
kern_return_t __cdecl clock_sleep(mach_port_t, int, mach_timespec_t, mach_timespec_t *);
int __cdecl close(int);
int __cdecl closedir(DIR *);
void closelog(void);
int clrtobot(void);
int clrtoeol(void);
u_char *__cdecl cmu_snmp_parse(netsnmp_session *session, netsnmp_pdu *pdu, u_char *data, size_t length);
int __cdecl color_content(__int16, __int16 *, __int16 *, __int16 *);
int __cdecl color_set(__int16, void *);
void com_err(const char *progname, errcode_t code, const char *format, ...);
void __cdecl com_err_va(const char *progname, errcode_t code, const char *format, va_list args);
void __cdecl comment(void *ctx, const xmlChar *value);
int __cdecl compare_tree(const oid *, size_t, const oid *, size_t);
bool __cdecl compat_mode(const char *function, const char *mode);
char **__cdecl completion_matches(const char *, CPFunction *);
int __cdecl compress(Bytef *dest, uLongf *destLen, const Bytef *source, uLong sourceLen);
int __cdecl compress2(Bytef *dest, uLongf *destLen, const Bytef *source, uLong sourceLen, int level);
uLong __cdecl compressBound(uLong sourceLen);
int __cdecl compute_evaluator(computed_attr_context *c, char *type, Slapi_Entry *e, slapi_compute_output_t outputfn);
int __cdecl compute_rewrite_search_filter(Slapi_PBlock *pb);
void __cdecl config_perror(const char *);
void __cdecl config_pwarn(const char *);
size_t __cdecl confstr(int, char *, size_t);
int __cdecl connect(int, const struct sockaddr *, socklen_t);
netsnmp_variable_list *__cdecl convert_v1_to_v2(netsnmp_pdu *);
netsnmp_pdu *__cdecl convert_v1pdu_to_v2(netsnmp_pdu *);
void __cdecl convert_v2_to_v1(netsnmp_variable_list *, netsnmp_pdu *);
netsnmp_pdu *__cdecl convert_v2pdu_to_v1(netsnmp_pdu *);
char *__cdecl copy_nword(char *, char *, int);
const char *__cdecl copy_nword_const(const char *, char *, int);
char *__cdecl copy_word(char *, char *);
int __cdecl copyfile(const char *from, const char *to, copyfile_state_t state, copyfile_flags_t flags);
copyfile_state_t copyfile_state_alloc(void);
int __cdecl copyfile_state_free(copyfile_state_t);
int __cdecl copyfile_state_get(copyfile_state_t s, uint32_t flag, void *dst);
int __cdecl copyfile_state_set(copyfile_state_t s, uint32_t flag, const void *src);
double __cdecl copysign(double, double);
float __cdecl copysignf(float, float);
long double __cdecl copysignl(long double, long double);
int __cdecl copywin(const WINDOW *, WINDOW *, int, int, int, int, int, int, int);
double __cdecl cos(double);
float __cdecl cosf(float);
double __cdecl cosh(double);
float __cdecl coshf(float);
long double __cdecl coshl(long double);
long double __cdecl cosl(long double);
unsigned __int64 __cdecl count_indexes(oid *name, size_t namelen, int include_unallocated);
int __cdecl count_varbinds(netsnmp_variable_list *var_ptr);
int __cdecl count_varbinds_of_type(netsnmp_variable_list *var_ptr, u_char type);
uLong __cdecl crc32(uLong crc, const Bytef *buf, uInt len);
uLong __cdecl crc32_combine(uLong, uLong, __int64);
int __cdecl creat(const char *, mode_t);
int __cdecl create_trap_session(char *, u_short, char *, int, int);
int __cdecl create_user_from_session(netsnmp_session *session);
char *__cdecl crypt(const char *, const char *);
char *__cdecl ctermid(char *);
char *__cdecl ctermid_r(char *);
char *__cdecl ctime(const time_t *);
char *__cdecl ctime_r(const time_t *, char *);
time_t __cdecl ctime_to_timet(const char *);
int __cdecl cupsAddDest(const char *name, const char *instance, int num_dests, cups_dest_t **dests);
int __cdecl cupsAddOption(const char *name, const char *value, int num_options, cups_option_t **options);
char *__cdecl cupsAdminCreateWindowsPPD(http_t *http, const char *dest, char *buffer, int bufsize);
int __cdecl cupsAdminExportSamba(const char *dest, const char *ppd, const char *samba_server, const char *samba_user, const char *samba_password, FILE *logfile);
int __cdecl cupsAdminGetServerSettings(http_t *http, int *num_settings, cups_option_t **settings);
int __cdecl cupsAdminSetServerSettings(http_t *http, int num_settings, cups_option_t *settings);
int __cdecl cupsArrayAdd(cups_array_t *a, void *e);
void __cdecl cupsArrayClear(cups_array_t *a);
int __cdecl cupsArrayCount(cups_array_t *a);
void *__cdecl cupsArrayCurrent(cups_array_t *a);
void __cdecl cupsArrayDelete(cups_array_t *a);
cups_array_t *__cdecl cupsArrayDup(cups_array_t *a);
void *__cdecl cupsArrayFind(cups_array_t *a, void *e);
void *__cdecl cupsArrayFirst(cups_array_t *a);
int __cdecl cupsArrayGetIndex(cups_array_t *a);
int __cdecl cupsArrayGetInsert(cups_array_t *a);
void *__cdecl cupsArrayIndex(cups_array_t *a, int n);
int __cdecl cupsArrayInsert(cups_array_t *a, void *e);
void *__cdecl cupsArrayLast(cups_array_t *a);
cups_array_t *__cdecl cupsArrayNew(cups_array_func_t f, void *d);
cups_array_t *__cdecl cupsArrayNew2(cups_array_func_t f, void *d, cups_ahash_func_t h, int hsize);
cups_array_t *__cdecl cupsArrayNew3(cups_array_func_t f, void *d, cups_ahash_func_t h, int hsize, cups_acopy_func_t cf, cups_afree_func_t ff);
void *__cdecl cupsArrayNext(cups_array_t *a);
void *__cdecl cupsArrayPrev(cups_array_t *a);
int __cdecl cupsArrayRemove(cups_array_t *a, void *e);
void *__cdecl cupsArrayRestore(cups_array_t *a);
int __cdecl cupsArraySave(cups_array_t *a);
void *__cdecl cupsArrayUserData(cups_array_t *a);
ssize_t __cdecl cupsBackChannelRead(char *buffer, size_t bytes, double timeout);
ssize_t __cdecl cupsBackChannelWrite(const char *buffer, size_t bytes, double timeout);
const char *__cdecl cupsBackendDeviceURI(char **argv);
void __cdecl cupsBackendReport(const char *device_scheme, const char *device_uri, const char *device_make_and_model, const char *device_info, const char *device_id, const char *device_location);
void __cdecl cupsCMYKDelete(cups_cmyk_t *cmyk);
void __cdecl cupsCMYKDoBlack(const cups_cmyk_t *cmyk, const unsigned __int8 *input, __int16 *output, int num_pixels);
void __cdecl cupsCMYKDoCMYK(const cups_cmyk_t *cmyk, const unsigned __int8 *input, __int16 *output, int num_pixels);
void __cdecl cupsCMYKDoGray(const cups_cmyk_t *cmyk, const unsigned __int8 *input, __int16 *output, int num_pixels);
void __cdecl cupsCMYKDoRGB(const cups_cmyk_t *cmyk, const unsigned __int8 *input, __int16 *output, int num_pixels);
cups_cmyk_t *__cdecl cupsCMYKLoad(ppd_file_t *ppd, const char *colormodel, const char *media, const char *resolution);
cups_cmyk_t *__cdecl cupsCMYKNew(int num_channels);
void __cdecl cupsCMYKSetBlack(cups_cmyk_t *cmyk, float lower, float upper);
void __cdecl cupsCMYKSetCurve(cups_cmyk_t *cmyk, int channel, int num_xypoints, const float *xypoints);
void __cdecl cupsCMYKSetGamma(cups_cmyk_t *cmyk, int channel, float gamval, float density);
void __cdecl cupsCMYKSetInkLimit(cups_cmyk_t *cmyk, float limit);
void __cdecl cupsCMYKSetLtDk(cups_cmyk_t *cmyk, int channel, float light, float dark);
int __cdecl cupsCancelJob(const char *name, int job_id);
ipp_status_t __cdecl cupsCancelJob2(http_t *http, const char *name, int job_id, int purge);
int __cdecl cupsCharsetToUTF8(cups_utf8_t *dest, const char *src, const int maxout, const cups_encoding_t encoding);
int __cdecl cupsCheckBytes(const unsigned __int8 *, int);
int __cdecl cupsCheckValue(const unsigned __int8 *, int, const unsigned __int8);
int __cdecl cupsCreateJob(http_t *http, const char *name, const char *title, int num_options, cups_option_t *options);
void __cdecl cupsDirClose(cups_dir_t *dp);
cups_dir_t *__cdecl cupsDirOpen(const char *directory);
cups_dentry_t *__cdecl cupsDirRead(cups_dir_t *dp);
void __cdecl cupsDirRewind(cups_dir_t *dp);
void __cdecl cupsDitherDelete(cups_dither_t *);
void __cdecl cupsDitherLine(cups_dither_t *d, const cups_lut_t *lut, const __int16 *data, int num_channels, unsigned __int8 *p);
cups_dither_t *__cdecl cupsDitherNew(int width);
int __cdecl cupsDoAuthentication(http_t *http, const char *method, const char *resource);
ipp_t *__cdecl cupsDoFileRequest(http_t *http, ipp_t *request, const char *resource, const char *filename);
ipp_t *__cdecl cupsDoIORequest(http_t *http, ipp_t *request, const char *resource, int infile, int outfile);
ipp_t *__cdecl cupsDoRequest(http_t *http, ipp_t *request, const char *resource);
void __cdecl cupsEncodeOptions(ipp_t *ipp, int num_options, cups_option_t *options);
void __cdecl cupsEncodeOptions2(ipp_t *ipp, int num_options, cups_option_t *options, ipp_tag_t group_tag);
http_encryption_t cupsEncryption(void);
int __cdecl cupsFileClose(cups_file_t *fp);
int __cdecl cupsFileCompression(cups_file_t *fp);
int __cdecl cupsFileEOF(cups_file_t *fp);
const char *__cdecl cupsFileFind(const char *filename, const char *path, int executable, char *buffer, int bufsize);
int __cdecl cupsFileFlush(cups_file_t *fp);
int __cdecl cupsFileGetChar(cups_file_t *fp);
char *__cdecl cupsFileGetConf(cups_file_t *fp, char *buf, size_t buflen, char **value, int *linenum);
size_t __cdecl cupsFileGetLine(cups_file_t *fp, char *buf, size_t buflen);
char *__cdecl cupsFileGets(cups_file_t *fp, char *buf, size_t buflen);
int __cdecl cupsFileLock(cups_file_t *fp, int block);
int __cdecl cupsFileNumber(cups_file_t *fp);
cups_file_t *__cdecl cupsFileOpen(const char *filename, const char *mode);
cups_file_t *__cdecl cupsFileOpenFd(int fd, const char *mode);
int __cdecl cupsFilePeekChar(cups_file_t *fp);
int cupsFilePrintf(cups_file_t *fp, const char *format, ...);
int __cdecl cupsFilePutChar(cups_file_t *fp, int c);
ssize_t __cdecl cupsFilePutConf(cups_file_t *fp, const char *directive, const char *value);
int __cdecl cupsFilePuts(cups_file_t *fp, const char *s);
ssize_t __cdecl cupsFileRead(cups_file_t *fp, char *buf, size_t bytes);
off_t __cdecl cupsFileRewind(cups_file_t *fp);
off_t __cdecl cupsFileSeek(cups_file_t *fp, off_t pos);
cups_file_t *cupsFileStderr(void);
cups_file_t *cupsFileStdin(void);
cups_file_t *cupsFileStdout(void);
off_t __cdecl cupsFileTell(cups_file_t *fp);
int __cdecl cupsFileUnlock(cups_file_t *fp);
ssize_t __cdecl cupsFileWrite(cups_file_t *fp, const char *buf, size_t bytes);
ppd_attr_t *__cdecl cupsFindAttr(ppd_file_t *ppd, const char *name, const char *colormodel, const char *media, const char *resolution, char *spec, int specsize);
ipp_status_t __cdecl cupsFinishDocument(http_t *http, const char *name);
void __cdecl cupsFreeDests(int num_dests, cups_dest_t *dests);
void __cdecl cupsFreeJobs(int num_jobs, cups_job_t *jobs);
void __cdecl cupsFreeOptions(int num_options, cups_option_t *options);
int __cdecl cupsGetClasses(char ***classes);
int __cdecl cupsGetConflicts(ppd_file_t *ppd, const char *option, const char *choice, cups_option_t **options);
const char *cupsGetDefault(void);
const char *__cdecl cupsGetDefault2(http_t *http);
cups_dest_t *__cdecl cupsGetDest(const char *name, const char *instance, int num_dests, cups_dest_t *dests);
int __cdecl cupsGetDests(cups_dest_t **dests);
int __cdecl cupsGetDests2(http_t *http, cups_dest_t **dests);
ipp_status_t __cdecl cupsGetDevices(http_t *http, int timeout, const char *include_schemes, const char *exclude_schemes, cups_device_cb_t callback, void *user_data);
http_status_t __cdecl cupsGetFd(http_t *http, const char *resource, int fd);
http_status_t __cdecl cupsGetFile(http_t *http, const char *resource, const char *filename);
int __cdecl cupsGetJobs(cups_job_t **jobs, const char *name, int myjobs, int whichjobs);
int __cdecl cupsGetJobs2(http_t *http, cups_job_t **jobs, const char *name, int myjobs, int whichjobs);
cups_dest_t *__cdecl cupsGetNamedDest(http_t *http, const char *name, const char *instance);
const char *__cdecl cupsGetOption(const char *name, int num_options, cups_option_t *options);
const char *__cdecl cupsGetPPD(const char *name);
const char *__cdecl cupsGetPPD2(http_t *http, const char *name);
http_status_t __cdecl cupsGetPPD3(http_t *http, const char *name, time_t *modtime, char *buffer, size_t bufsize);
const char *__cdecl cupsGetPassword(const char *prompt);
const char *__cdecl cupsGetPassword2(const char *prompt, http_t *http, const char *method, const char *resource);
int __cdecl cupsGetPrinters(char ***printers);
ipp_t *__cdecl cupsGetResponse(http_t *http, const char *resource);
char *__cdecl cupsGetServerPPD(http_t *http, const char *name);
void __cdecl cupsImageCMYKToBlack(const cups_ib_t *in, cups_ib_t *out, int count);
void __cdecl cupsImageCMYKToCMY(const cups_ib_t *in, cups_ib_t *out, int count);
void __cdecl cupsImageCMYKToCMYK(const cups_ib_t *in, cups_ib_t *out, int count);
void __cdecl cupsImageCMYKToRGB(const cups_ib_t *in, cups_ib_t *out, int count);
void __cdecl cupsImageCMYKToWhite(const cups_ib_t *in, cups_ib_t *out, int count);
void __cdecl cupsImageClose(cups_image_t *img);
int __cdecl cupsImageGetCol(cups_image_t *img, int x, int y, int height, cups_ib_t *pixels);
cups_icspace_t __cdecl cupsImageGetColorSpace(cups_image_t *img);
int __cdecl cupsImageGetDepth(cups_image_t *img);
unsigned int __cdecl cupsImageGetHeight(cups_image_t *img);
int __cdecl cupsImageGetRow(cups_image_t *img, int x, int y, int width, cups_ib_t *pixels);
unsigned int __cdecl cupsImageGetWidth(cups_image_t *img);
unsigned int __cdecl cupsImageGetXPPI(cups_image_t *img);
unsigned int __cdecl cupsImageGetYPPI(cups_image_t *img);
void __cdecl cupsImageLut(cups_ib_t *pixels, int count, const cups_ib_t *lut);
cups_image_t *__cdecl cupsImageOpen(const char *filename, cups_icspace_t primary, cups_icspace_t secondary, int saturation, int hue, const cups_ib_t *lut);
void __cdecl cupsImageRGBAdjust(cups_ib_t *pixels, int count, int saturation, int hue);
void __cdecl cupsImageRGBToBlack(const cups_ib_t *in, cups_ib_t *out, int count);
void __cdecl cupsImageRGBToCMY(const cups_ib_t *in, cups_ib_t *out, int count);
void __cdecl cupsImageRGBToCMYK(const cups_ib_t *in, cups_ib_t *out, int count);
void __cdecl cupsImageRGBToRGB(const cups_ib_t *in, cups_ib_t *out, int count);
void __cdecl cupsImageRGBToWhite(const cups_ib_t *in, cups_ib_t *out, int count);
void __cdecl cupsImageSetMaxTiles(cups_image_t *img, int max_tiles);
void __cdecl cupsImageSetProfile(float d, float g, float matrix[3][3]);
void __cdecl cupsImageSetRasterColorSpace(cups_cspace_t cs);
void __cdecl cupsImageWhiteToBlack(const cups_ib_t *in, cups_ib_t *out, int count);
void __cdecl cupsImageWhiteToCMY(const cups_ib_t *in, cups_ib_t *out, int count);
void __cdecl cupsImageWhiteToCMYK(const cups_ib_t *in, cups_ib_t *out, int count);
void __cdecl cupsImageWhiteToRGB(const cups_ib_t *in, cups_ib_t *out, int count);
void __cdecl cupsImageWhiteToWhite(const cups_ib_t *in, cups_ib_t *out, int count);
cups_lang_t *cupsLangDefault(void);
const char *__cdecl cupsLangEncoding(cups_lang_t *lang);
void cupsLangFlush(void);
void __cdecl cupsLangFree(cups_lang_t *lang);
cups_lang_t *__cdecl cupsLangGet(const char *language);
ipp_status_t cupsLastError(void);
const char *cupsLastErrorString(void);
void __cdecl cupsLutDelete(cups_lut_t *lut);
cups_lut_t *__cdecl cupsLutLoad(ppd_file_t *ppd, const char *colormodel, const char *media, const char *resolution, const char *ink);
cups_lut_t *__cdecl cupsLutNew(int num_vals, const float *vals);
int __cdecl cupsMarkOptions(ppd_file_t *ppd, int num_options, cups_option_t *options);
char *__cdecl cupsNotifySubject(cups_lang_t *lang, ipp_t *event);
char *__cdecl cupsNotifyText(cups_lang_t *lang, ipp_t *event);
void __cdecl cupsPackHorizontal(const unsigned __int8 *, unsigned __int8 *, int, const unsigned __int8, const int);
void __cdecl cupsPackHorizontal2(const unsigned __int8 *, unsigned __int8 *, int, const int);
void __cdecl cupsPackHorizontalBit(const unsigned __int8 *, unsigned __int8 *, int, const unsigned __int8, const unsigned __int8);
void __cdecl cupsPackVertical(const unsigned __int8 *, unsigned __int8 *, int, const unsigned __int8, const int);
int __cdecl cupsParseOptions(const char *arg, int num_options, cups_option_t **options);
int __cdecl cupsPrintFile(const char *name, const char *filename, const char *title, int num_options, cups_option_t *options);
int __cdecl cupsPrintFile2(http_t *http, const char *name, const char *filename, const char *title, int num_options, cups_option_t *options);
int __cdecl cupsPrintFiles(const char *name, int num_files, const char **files, const char *title, int num_options, cups_option_t *options);
int __cdecl cupsPrintFiles2(http_t *http, const char *name, int num_files, const char **files, const char *title, int num_options, cups_option_t *options);
http_status_t __cdecl cupsPutFd(http_t *http, const char *resource, int fd);
http_status_t __cdecl cupsPutFile(http_t *http, const char *resource, const char *filename);
void __cdecl cupsRGBDelete(cups_rgb_t *rgb);
void __cdecl cupsRGBDoGray(cups_rgb_t *rgb, const unsigned __int8 *input, unsigned __int8 *output, int num_pixels);
void __cdecl cupsRGBDoRGB(cups_rgb_t *rgb, const unsigned __int8 *input, unsigned __int8 *output, int num_pixels);
cups_rgb_t *__cdecl cupsRGBLoad(ppd_file_t *ppd, const char *colormodel, const char *media, const char *resolution);
cups_rgb_t *__cdecl cupsRGBNew(int num_samples, cups_sample_t *samples, int cube_size, int num_channels);
void __cdecl cupsRasterClose(cups_raster_t *r);
const char *cupsRasterErrorString(void);
int __cdecl cupsRasterInterpretPPD(cups_page_header2_t *h, ppd_file_t *ppd, int num_options, cups_option_t *options, cups_interpret_cb_t func);
cups_raster_t *__cdecl cupsRasterOpen(int fd, cups_mode_t mode);
cups_raster_t *__cdecl cupsRasterOpenIO(cups_raster_iocb_t iocb, void *ctx, cups_mode_t mode);
unsigned int __cdecl cupsRasterReadHeader(cups_raster_t *r, cups_page_header_t *h);
unsigned int __cdecl cupsRasterReadHeader2(cups_raster_t *r, cups_page_header2_t *h);
unsigned int __cdecl cupsRasterReadPixels(cups_raster_t *r, unsigned __int8 *p, unsigned int len);
unsigned int __cdecl cupsRasterWriteHeader(cups_raster_t *r, cups_page_header_t *h);
unsigned int __cdecl cupsRasterWriteHeader2(cups_raster_t *r, cups_page_header2_t *h);
unsigned int __cdecl cupsRasterWritePixels(cups_raster_t *r, unsigned __int8 *p, unsigned int len);
ssize_t __cdecl cupsReadResponseData(http_t *http, char *buffer, size_t length);
int __cdecl cupsRemoveDest(const char *name, const char *instance, int num_dests, cups_dest_t **dests);
int __cdecl cupsRemoveOption(const char *name, int num_options, cups_option_t **options);
int __cdecl cupsResolveConflicts(ppd_file_t *ppd, const char *option, const char *choice, int *num_options, cups_option_t **options);
http_status_t __cdecl cupsSendRequest(http_t *http, ipp_t *request, const char *resource, size_t length);
const char *cupsServer(void);
void __cdecl cupsSetClientCertCB(cups_client_cert_cb_t cb, void *user_data);
int __cdecl cupsSetCredentials(cups_array_t *certs);
void __cdecl cupsSetDefaultDest(const char *name, const char *instance, int num_dests, cups_dest_t *dests);
void __cdecl cupsSetDests(int num_dests, cups_dest_t *dests);
int __cdecl cupsSetDests2(http_t *http, int num_dests, cups_dest_t *dests);
void __cdecl cupsSetEncryption(http_encryption_t e);
void __cdecl cupsSetPasswordCB(cups_password_cb_t cb);
void __cdecl cupsSetPasswordCB2(cups_password_cb2_t cb, void *user_data);
void __cdecl cupsSetServer(const char *server);
void __cdecl cupsSetServerCertCB(cups_server_cert_cb_t cb, void *user_data);
void __cdecl cupsSetUser(const char *user);
cups_sc_status_t __cdecl cupsSideChannelDoRequest(cups_sc_command_t command, char *data, int *datalen, double timeout);
int __cdecl cupsSideChannelRead(cups_sc_command_t *command, cups_sc_status_t *status, char *data, int *datalen, double timeout);
cups_sc_status_t __cdecl cupsSideChannelSNMPGet(const char *oid, char *data, int *datalen, double timeout);
cups_sc_status_t __cdecl cupsSideChannelSNMPWalk(const char *oid, double timeout, cups_sc_walk_func_t cb, void *context);
int __cdecl cupsSideChannelWrite(cups_sc_command_t command, cups_sc_status_t status, const char *data, int datalen, double timeout);
http_status_t __cdecl cupsStartDocument(http_t *http, const char *name, int job_id, const char *docname, const char *format, int last_document);
int __cdecl cupsTempFd(char *filename, int len);
char *__cdecl cupsTempFile(char *filename, int len);
cups_file_t *__cdecl cupsTempFile2(char *filename, int len);
int __cdecl cupsUTF32ToUTF8(cups_utf8_t *dest, const cups_utf32_t *src, const int maxout);
int __cdecl cupsUTF8ToCharset(char *dest, const cups_utf8_t *src, const int maxout, const cups_encoding_t encoding);
int __cdecl cupsUTF8ToUTF32(cups_utf32_t *dest, const cups_utf8_t *src, const int maxout);
const char *cupsUser(void);
http_status_t __cdecl cupsWriteRequestData(http_t *http, const char *buffer, size_t length);
const unsigned __int8 cups_scmy_lut[256];
const unsigned __int8 cups_srgb_lut[256];
TERMINAL *cur_term;
void __cdecl curl_easy_cleanup(CURL *curl);
CURL *__cdecl curl_easy_duphandle(CURL *curl);
char *__cdecl curl_easy_escape(CURL *handle, const char *string, int length);
CURLcode curl_easy_getinfo(CURL *curl, CURLINFO info, ...);
CURL *curl_easy_init(void);
CURLcode __cdecl curl_easy_pause(CURL *handle, int bitmask);
CURLcode __cdecl curl_easy_perform(CURL *curl);
CURLcode __cdecl curl_easy_recv(CURL *curl, void *buffer, size_t buflen, size_t *n);
void __cdecl curl_easy_reset(CURL *curl);
CURLcode __cdecl curl_easy_send(CURL *curl, const void *buffer, size_t buflen, size_t *n);
CURLcode curl_easy_setopt(CURL *curl, CURLoption option, ...);
const char *__cdecl curl_easy_strerror(CURLcode);
char *__cdecl curl_easy_unescape(CURL *handle, const char *string, int length, int *outlength);
char *__cdecl curl_escape(const char *string, int length);
CURLFORMcode curl_formadd(struct curl_httppost **httppost, struct curl_httppost **last_post, ...);
void __cdecl curl_formfree(struct curl_httppost *form);
int __cdecl curl_formget(struct curl_httppost *form, void *arg, curl_formget_callback append);
void __cdecl curl_free(void *p);
time_t __cdecl curl_getdate(const char *p, const time_t *unused);
char *__cdecl curl_getenv(const char *variable);
void curl_global_cleanup(void);
CURLcode __cdecl curl_global_init(__int64 flags);
CURLcode __cdecl curl_global_init_mem(__int64 flags, curl_malloc_callback m, curl_free_callback f, curl_realloc_callback r, curl_strdup_callback s, curl_calloc_callback c);
char *curl_maprintf(const char *format, ...);
int curl_mfprintf(FILE *fd, const char *format, ...);
int curl_mprintf(const char *format, ...);
int curl_msnprintf(char *buffer, size_t maxlength, const char *format, ...);
int curl_msprintf(char *buffer, const char *format, ...);
CURLMcode __cdecl curl_multi_add_handle(CURLM *multi_handle, CURL *curl_handle);
CURLMcode __cdecl curl_multi_assign(CURLM *multi_handle, curl_socket_t sockfd, void *sockp);
CURLMcode __cdecl curl_multi_cleanup(CURLM *multi_handle);
CURLMcode __cdecl curl_multi_fdset(CURLM *multi_handle, fd_set *read_fd_set, fd_set *write_fd_set, fd_set *exc_fd_set, int *max_fd);
CURLMsg *__cdecl curl_multi_info_read(CURLM *multi_handle, int *msgs_in_queue);
CURLM *curl_multi_init(void);
CURLMcode __cdecl curl_multi_perform(CURLM *multi_handle, int *running_handles);
CURLMcode __cdecl curl_multi_remove_handle(CURLM *multi_handle, CURL *curl_handle);
CURLMcode curl_multi_setopt(CURLM *multi_handle, CURLMoption option, ...);
CURLMcode __cdecl curl_multi_socket(CURLM *multi_handle, curl_socket_t s, int *running_handles);
CURLMcode __cdecl curl_multi_socket_action(CURLM *multi_handle, curl_socket_t s, int ev_bitmask, int *running_handles);
CURLMcode __cdecl curl_multi_socket_all(CURLM *multi_handle, int *running_handles);
const char *__cdecl curl_multi_strerror(CURLMcode);
CURLMcode __cdecl curl_multi_timeout(CURLM *multi_handle, __int64 *milliseconds);
char *__cdecl curl_mvaprintf(const char *format, va_list args);
int __cdecl curl_mvfprintf(FILE *fd, const char *format, va_list args);
int __cdecl curl_mvprintf(const char *format, va_list args);
int __cdecl curl_mvsnprintf(char *buffer, size_t maxlength, const char *format, va_list args);
int __cdecl curl_mvsprintf(char *buffer, const char *format, va_list args);
CURLSHcode __cdecl curl_share_cleanup(CURLSH *);
CURLSH *curl_share_init(void);
CURLSHcode curl_share_setopt(CURLSH *, CURLSHoption option, ...);
const char *__cdecl curl_share_strerror(CURLSHcode);
struct curl_slist *__cdecl curl_slist_append(struct curl_slist *, const char *);
void __cdecl curl_slist_free_all(struct curl_slist *);
int __cdecl curl_strequal(const char *s1, const char *s2);
int __cdecl curl_strnequal(const char *s1, const char *s2, size_t n);
char *__cdecl curl_unescape(const char *string, int length);
char *curl_version(void);
curl_version_info_data *__cdecl curl_version_info(CURLversion);
FIELD *__cdecl current_field(const FORM *);
HIST_ENTRY *current_history(void);
ITEM *__cdecl current_item(const MENU *);
int __cdecl curs_set(int);
WINDOW *curscr;
const char *curses_version(void);
ACCESS_DESCRIPTION *__cdecl d2i_ACCESS_DESCRIPTION(ACCESS_DESCRIPTION **a, const unsigned __int8 **in, __int64 len);
ASN1_BIT_STRING *__cdecl d2i_ASN1_BIT_STRING(ASN1_BIT_STRING **a, const unsigned __int8 **in, __int64 len);
ASN1_BMPSTRING *__cdecl d2i_ASN1_BMPSTRING(ASN1_BMPSTRING **a, const unsigned __int8 **in, __int64 len);
int __cdecl d2i_ASN1_BOOLEAN(int *a, const unsigned __int8 **pp, __int64 length);
ASN1_ENUMERATED *__cdecl d2i_ASN1_ENUMERATED(ASN1_ENUMERATED **a, const unsigned __int8 **in, __int64 len);
ASN1_GENERALIZEDTIME *__cdecl d2i_ASN1_GENERALIZEDTIME(ASN1_GENERALIZEDTIME **a, const unsigned __int8 **in, __int64 len);
ASN1_GENERALSTRING *__cdecl d2i_ASN1_GENERALSTRING(ASN1_GENERALSTRING **a, const unsigned __int8 **in, __int64 len);
ASN1_HEADER *__cdecl d2i_ASN1_HEADER(ASN1_HEADER **a, const unsigned __int8 **pp, __int64 length);
ASN1_IA5STRING *__cdecl d2i_ASN1_IA5STRING(ASN1_IA5STRING **a, const unsigned __int8 **in, __int64 len);
ASN1_INTEGER *__cdecl d2i_ASN1_INTEGER(ASN1_INTEGER **a, const unsigned __int8 **in, __int64 len);
ASN1_NULL *__cdecl d2i_ASN1_NULL(ASN1_NULL **a, const unsigned __int8 **in, __int64 len);
ASN1_OBJECT *__cdecl d2i_ASN1_OBJECT(ASN1_OBJECT **a, const unsigned __int8 **pp, __int64 length);
ASN1_OCTET_STRING *__cdecl d2i_ASN1_OCTET_STRING(ASN1_OCTET_STRING **a, const unsigned __int8 **in, __int64 len);
ASN1_STRING *__cdecl d2i_ASN1_PRINTABLE(ASN1_STRING **a, const unsigned __int8 **in, __int64 len);
ASN1_PRINTABLESTRING *__cdecl d2i_ASN1_PRINTABLESTRING(ASN1_PRINTABLESTRING **a, const unsigned __int8 **in, __int64 len);
STACK *__cdecl d2i_ASN1_SET(STACK **a, const unsigned __int8 **pp, __int64 length, d2i_of_void *d2i, void (__cdecl *free_func)(void *), int ex_tag, int ex_class);
ASN1_T61STRING *__cdecl d2i_ASN1_T61STRING(ASN1_T61STRING **a, const unsigned __int8 **in, __int64 len);
ASN1_TIME *__cdecl d2i_ASN1_TIME(ASN1_TIME **a, const unsigned __int8 **in, __int64 len);
ASN1_TYPE *__cdecl d2i_ASN1_TYPE(ASN1_TYPE **a, const unsigned __int8 **in, __int64 len);
ASN1_INTEGER *__cdecl d2i_ASN1_UINTEGER(ASN1_INTEGER **a, const unsigned __int8 **pp, __int64 length);
ASN1_UNIVERSALSTRING *__cdecl d2i_ASN1_UNIVERSALSTRING(ASN1_UNIVERSALSTRING **a, const unsigned __int8 **in, __int64 len);
ASN1_UTCTIME *__cdecl d2i_ASN1_UTCTIME(ASN1_UTCTIME **a, const unsigned __int8 **in, __int64 len);
ASN1_UTF8STRING *__cdecl d2i_ASN1_UTF8STRING(ASN1_UTF8STRING **a, const unsigned __int8 **in, __int64 len);
ASN1_VISIBLESTRING *__cdecl d2i_ASN1_VISIBLESTRING(ASN1_VISIBLESTRING **a, const unsigned __int8 **in, __int64 len);
ASN1_STRING *__cdecl d2i_ASN1_bytes(ASN1_STRING **a, const unsigned __int8 **pp, __int64 length, int Ptag, int Pclass);
ASN1_STRING *__cdecl d2i_ASN1_type_bytes(ASN1_STRING **a, const unsigned __int8 **pp, __int64 length, int type);
AUTHORITY_INFO_ACCESS *__cdecl d2i_AUTHORITY_INFO_ACCESS(AUTHORITY_INFO_ACCESS **a, const unsigned __int8 **in, __int64 len);
AUTHORITY_KEYID *__cdecl d2i_AUTHORITY_KEYID(AUTHORITY_KEYID **a, const unsigned __int8 **in, __int64 len);
EVP_PKEY *__cdecl d2i_AutoPrivateKey(EVP_PKEY **a, const unsigned __int8 **pp, __int64 length);
BASIC_CONSTRAINTS *__cdecl d2i_BASIC_CONSTRAINTS(BASIC_CONSTRAINTS **a, const unsigned __int8 **in, __int64 len);
CERTIFICATEPOLICIES *__cdecl d2i_CERTIFICATEPOLICIES(CERTIFICATEPOLICIES **a, const unsigned __int8 **in, __int64 len);
CRL_DIST_POINTS *__cdecl d2i_CRL_DIST_POINTS(CRL_DIST_POINTS **a, const unsigned __int8 **in, __int64 len);
DH *__cdecl d2i_DHparams(DH **a, const unsigned __int8 **pp, __int64 length);
ASN1_STRING *__cdecl d2i_DIRECTORYSTRING(ASN1_STRING **a, const unsigned __int8 **in, __int64 len);
ASN1_STRING *__cdecl d2i_DISPLAYTEXT(ASN1_STRING **a, const unsigned __int8 **in, __int64 len);
DIST_POINT *__cdecl d2i_DIST_POINT(DIST_POINT **a, const unsigned __int8 **in, __int64 len);
DIST_POINT_NAME *__cdecl d2i_DIST_POINT_NAME(DIST_POINT_NAME **a, const unsigned __int8 **in, __int64 len);
DSA *__cdecl d2i_DSAPrivateKey(DSA **a, const unsigned __int8 **pp, __int64 length);
DSA *__cdecl d2i_DSAPrivateKey_bio(BIO *bp, DSA **dsa);
DSA *__cdecl d2i_DSAPrivateKey_fp(FILE *fp, DSA **dsa);
DSA *__cdecl d2i_DSAPublicKey(DSA **a, const unsigned __int8 **pp, __int64 length);
DSA *__cdecl d2i_DSA_PUBKEY(DSA **a, const unsigned __int8 **pp, __int64 length);
DSA *__cdecl d2i_DSA_PUBKEY_bio(BIO *bp, DSA **dsa);
DSA *__cdecl d2i_DSA_PUBKEY_fp(FILE *fp, DSA **dsa);
DSA_SIG *__cdecl d2i_DSA_SIG(DSA_SIG **v, const unsigned __int8 **pp, __int64 length);
DSA *__cdecl d2i_DSAparams(DSA **a, const unsigned __int8 **pp, __int64 length);
ECDSA_SIG *__cdecl d2i_ECDSA_SIG(ECDSA_SIG **v, const unsigned __int8 **pp, __int64 len);
EC_GROUP *__cdecl d2i_ECPKParameters(EC_GROUP **, const unsigned __int8 **in, __int64 len);
EC_KEY *__cdecl d2i_ECParameters(EC_KEY **a, const unsigned __int8 **in, __int64 len);
EC_KEY *__cdecl d2i_ECPrivateKey(EC_KEY **a, const unsigned __int8 **in, __int64 len);
EC_KEY *__cdecl d2i_ECPrivateKey_bio(BIO *bp, EC_KEY **eckey);
EC_KEY *__cdecl d2i_ECPrivateKey_fp(FILE *fp, EC_KEY **eckey);
EC_KEY *__cdecl d2i_EC_PUBKEY(EC_KEY **a, const unsigned __int8 **pp, __int64 length);
EC_KEY *__cdecl d2i_EC_PUBKEY_bio(BIO *bp, EC_KEY **eckey);
EC_KEY *__cdecl d2i_EC_PUBKEY_fp(FILE *fp, EC_KEY **eckey);
EDIPARTYNAME *__cdecl d2i_EDIPARTYNAME(EDIPARTYNAME **a, const unsigned __int8 **in, __int64 len);
EXTENDED_KEY_USAGE *__cdecl d2i_EXTENDED_KEY_USAGE(EXTENDED_KEY_USAGE **a, const unsigned __int8 **in, __int64 len);
GENERAL_NAME *__cdecl d2i_GENERAL_NAME(GENERAL_NAME **a, const unsigned __int8 **in, __int64 len);
GENERAL_NAMES *__cdecl d2i_GENERAL_NAMES(GENERAL_NAMES **a, const unsigned __int8 **in, __int64 len);
KRB5_APREQ *__cdecl d2i_KRB5_APREQ(KRB5_APREQ **a, const unsigned __int8 **in, __int64 len);
KRB5_APREQBODY *__cdecl d2i_KRB5_APREQBODY(KRB5_APREQBODY **a, const unsigned __int8 **in, __int64 len);
KRB5_AUTHDATA *__cdecl d2i_KRB5_AUTHDATA(KRB5_AUTHDATA **a, const unsigned __int8 **in, __int64 len);
KRB5_AUTHENT *__cdecl d2i_KRB5_AUTHENT(KRB5_AUTHENT **a, const unsigned __int8 **in, __int64 len);
KRB5_AUTHENTBODY *__cdecl d2i_KRB5_AUTHENTBODY(KRB5_AUTHENTBODY **a, const unsigned __int8 **in, __int64 len);
KRB5_CHECKSUM *__cdecl d2i_KRB5_CHECKSUM(KRB5_CHECKSUM **a, const unsigned __int8 **in, __int64 len);
KRB5_ENCDATA *__cdecl d2i_KRB5_ENCDATA(KRB5_ENCDATA **a, const unsigned __int8 **in, __int64 len);
KRB5_ENCKEY *__cdecl d2i_KRB5_ENCKEY(KRB5_ENCKEY **a, const unsigned __int8 **in, __int64 len);
KRB5_PRINCNAME *__cdecl d2i_KRB5_PRINCNAME(KRB5_PRINCNAME **a, const unsigned __int8 **in, __int64 len);
KRB5_TICKET *__cdecl d2i_KRB5_TICKET(KRB5_TICKET **a, const unsigned __int8 **in, __int64 len);
KRB5_TKTBODY *__cdecl d2i_KRB5_TKTBODY(KRB5_TKTBODY **a, const unsigned __int8 **in, __int64 len);
NETSCAPE_CERT_SEQUENCE *__cdecl d2i_NETSCAPE_CERT_SEQUENCE(NETSCAPE_CERT_SEQUENCE **a, const unsigned __int8 **in, __int64 len);
NETSCAPE_SPKAC *__cdecl d2i_NETSCAPE_SPKAC(NETSCAPE_SPKAC **a, const unsigned __int8 **in, __int64 len);
NETSCAPE_SPKI *__cdecl d2i_NETSCAPE_SPKI(NETSCAPE_SPKI **a, const unsigned __int8 **in, __int64 len);
NOTICEREF *__cdecl d2i_NOTICEREF(NOTICEREF **a, const unsigned __int8 **in, __int64 len);
RSA *__cdecl d2i_Netscape_RSA(RSA **a, const unsigned __int8 **pp, __int64 length, int (__cdecl *cb)(char *buf, int len, const char *prompt, int verify));
OCSP_BASICRESP *__cdecl d2i_OCSP_BASICRESP(OCSP_BASICRESP **a, const unsigned __int8 **in, __int64 len);
OCSP_CERTID *__cdecl d2i_OCSP_CERTID(OCSP_CERTID **a, const unsigned __int8 **in, __int64 len);
OCSP_CERTSTATUS *__cdecl d2i_OCSP_CERTSTATUS(OCSP_CERTSTATUS **a, const unsigned __int8 **in, __int64 len);
OCSP_CRLID *__cdecl d2i_OCSP_CRLID(OCSP_CRLID **a, const unsigned __int8 **in, __int64 len);
OCSP_ONEREQ *__cdecl d2i_OCSP_ONEREQ(OCSP_ONEREQ **a, const unsigned __int8 **in, __int64 len);
OCSP_REQINFO *__cdecl d2i_OCSP_REQINFO(OCSP_REQINFO **a, const unsigned __int8 **in, __int64 len);
OCSP_REQUEST *__cdecl d2i_OCSP_REQUEST(OCSP_REQUEST **a, const unsigned __int8 **in, __int64 len);
OCSP_RESPBYTES *__cdecl d2i_OCSP_RESPBYTES(OCSP_RESPBYTES **a, const unsigned __int8 **in, __int64 len);
OCSP_RESPDATA *__cdecl d2i_OCSP_RESPDATA(OCSP_RESPDATA **a, const unsigned __int8 **in, __int64 len);
OCSP_RESPID *__cdecl d2i_OCSP_RESPID(OCSP_RESPID **a, const unsigned __int8 **in, __int64 len);
OCSP_RESPONSE *__cdecl d2i_OCSP_RESPONSE(OCSP_RESPONSE **a, const unsigned __int8 **in, __int64 len);
OCSP_REVOKEDINFO *__cdecl d2i_OCSP_REVOKEDINFO(OCSP_REVOKEDINFO **a, const unsigned __int8 **in, __int64 len);
OCSP_SERVICELOC *__cdecl d2i_OCSP_SERVICELOC(OCSP_SERVICELOC **a, const unsigned __int8 **in, __int64 len);
OCSP_SIGNATURE *__cdecl d2i_OCSP_SIGNATURE(OCSP_SIGNATURE **a, const unsigned __int8 **in, __int64 len);
OCSP_SINGLERESP *__cdecl d2i_OCSP_SINGLERESP(OCSP_SINGLERESP **a, const unsigned __int8 **in, __int64 len);
OTHERNAME *__cdecl d2i_OTHERNAME(OTHERNAME **a, const unsigned __int8 **in, __int64 len);
PBE2PARAM *__cdecl d2i_PBE2PARAM(PBE2PARAM **a, const unsigned __int8 **in, __int64 len);
PBEPARAM *__cdecl d2i_PBEPARAM(PBEPARAM **a, const unsigned __int8 **in, __int64 len);
PBKDF2PARAM *__cdecl d2i_PBKDF2PARAM(PBKDF2PARAM **a, const unsigned __int8 **in, __int64 len);
PKCS12 *__cdecl d2i_PKCS12(PKCS12 **a, const unsigned __int8 **in, __int64 len);
PKCS12_BAGS *__cdecl d2i_PKCS12_BAGS(PKCS12_BAGS **a, const unsigned __int8 **in, __int64 len);
PKCS12_MAC_DATA *__cdecl d2i_PKCS12_MAC_DATA(PKCS12_MAC_DATA **a, const unsigned __int8 **in, __int64 len);
PKCS12_SAFEBAG *__cdecl d2i_PKCS12_SAFEBAG(PKCS12_SAFEBAG **a, const unsigned __int8 **in, __int64 len);
PKCS12 *__cdecl d2i_PKCS12_bio(BIO *bp, PKCS12 **p12);
PKCS12 *__cdecl d2i_PKCS12_fp(FILE *fp, PKCS12 **p12);
PKCS7 *__cdecl d2i_PKCS7(PKCS7 **a, const unsigned __int8 **in, __int64 len);
PKCS7_DIGEST *__cdecl d2i_PKCS7_DIGEST(PKCS7_DIGEST **a, const unsigned __int8 **in, __int64 len);
PKCS7_ENCRYPT *__cdecl d2i_PKCS7_ENCRYPT(PKCS7_ENCRYPT **a, const unsigned __int8 **in, __int64 len);
PKCS7_ENC_CONTENT *__cdecl d2i_PKCS7_ENC_CONTENT(PKCS7_ENC_CONTENT **a, const unsigned __int8 **in, __int64 len);
PKCS7_ENVELOPE *__cdecl d2i_PKCS7_ENVELOPE(PKCS7_ENVELOPE **a, const unsigned __int8 **in, __int64 len);
PKCS7_ISSUER_AND_SERIAL *__cdecl d2i_PKCS7_ISSUER_AND_SERIAL(PKCS7_ISSUER_AND_SERIAL **a, const unsigned __int8 **in, __int64 len);
PKCS7_RECIP_INFO *__cdecl d2i_PKCS7_RECIP_INFO(PKCS7_RECIP_INFO **a, const unsigned __int8 **in, __int64 len);
PKCS7_SIGNED *__cdecl d2i_PKCS7_SIGNED(PKCS7_SIGNED **a, const unsigned __int8 **in, __int64 len);
PKCS7_SIGNER_INFO *__cdecl d2i_PKCS7_SIGNER_INFO(PKCS7_SIGNER_INFO **a, const unsigned __int8 **in, __int64 len);
PKCS7_SIGN_ENVELOPE *__cdecl d2i_PKCS7_SIGN_ENVELOPE(PKCS7_SIGN_ENVELOPE **a, const unsigned __int8 **in, __int64 len);
PKCS7 *__cdecl d2i_PKCS7_bio(BIO *bp, PKCS7 **p7);
PKCS7 *__cdecl d2i_PKCS7_fp(FILE *fp, PKCS7 **p7);
EVP_PKEY *__cdecl d2i_PKCS8PrivateKey_bio(BIO *bp, EVP_PKEY **x, pem_password_cb *cb, void *u);
EVP_PKEY *__cdecl d2i_PKCS8PrivateKey_fp(FILE *fp, EVP_PKEY **x, pem_password_cb *cb, void *u);
PKCS8_PRIV_KEY_INFO *__cdecl d2i_PKCS8_PRIV_KEY_INFO(PKCS8_PRIV_KEY_INFO **a, const unsigned __int8 **in, __int64 len);
PKCS8_PRIV_KEY_INFO *__cdecl d2i_PKCS8_PRIV_KEY_INFO_bio(BIO *bp, PKCS8_PRIV_KEY_INFO **p8inf);
PKCS8_PRIV_KEY_INFO *__cdecl d2i_PKCS8_PRIV_KEY_INFO_fp(FILE *fp, PKCS8_PRIV_KEY_INFO **p8inf);
X509_SIG *__cdecl d2i_PKCS8_bio(BIO *bp, X509_SIG **p8);
X509_SIG *__cdecl d2i_PKCS8_fp(FILE *fp, X509_SIG **p8);
PKEY_USAGE_PERIOD *__cdecl d2i_PKEY_USAGE_PERIOD(PKEY_USAGE_PERIOD **a, const unsigned __int8 **in, __int64 len);
POLICYINFO *__cdecl d2i_POLICYINFO(POLICYINFO **a, const unsigned __int8 **in, __int64 len);
POLICYQUALINFO *__cdecl d2i_POLICYQUALINFO(POLICYQUALINFO **a, const unsigned __int8 **in, __int64 len);
PROXY_CERT_INFO_EXTENSION *__cdecl d2i_PROXY_CERT_INFO_EXTENSION(PROXY_CERT_INFO_EXTENSION **a, const unsigned __int8 **in, __int64 len);
PROXY_POLICY *__cdecl d2i_PROXY_POLICY(PROXY_POLICY **a, const unsigned __int8 **in, __int64 len);
EVP_PKEY *__cdecl d2i_PUBKEY(EVP_PKEY **a, const unsigned __int8 **pp, __int64 length);
EVP_PKEY *__cdecl d2i_PUBKEY_bio(BIO *bp, EVP_PKEY **a);
EVP_PKEY *__cdecl d2i_PUBKEY_fp(FILE *fp, EVP_PKEY **a);
EVP_PKEY *__cdecl d2i_PrivateKey(int type, EVP_PKEY **a, const unsigned __int8 **pp, __int64 length);
EVP_PKEY *__cdecl d2i_PrivateKey_bio(BIO *bp, EVP_PKEY **a);
EVP_PKEY *__cdecl d2i_PrivateKey_fp(FILE *fp, EVP_PKEY **a);
EVP_PKEY *__cdecl d2i_PublicKey(int type, EVP_PKEY **a, const unsigned __int8 **pp, __int64 length);
RSA *__cdecl d2i_RSAPrivateKey(RSA **a, const unsigned __int8 **in, __int64 len);
RSA *__cdecl d2i_RSAPrivateKey_bio(BIO *bp, RSA **rsa);
RSA *__cdecl d2i_RSAPrivateKey_fp(FILE *fp, RSA **rsa);
RSA *__cdecl d2i_RSAPublicKey(RSA **a, const unsigned __int8 **in, __int64 len);
RSA *__cdecl d2i_RSAPublicKey_bio(BIO *bp, RSA **rsa);
RSA *__cdecl d2i_RSAPublicKey_fp(FILE *fp, RSA **rsa);
RSA *__cdecl d2i_RSA_NET(RSA **a, const unsigned __int8 **pp, __int64 length, int (__cdecl *cb)(char *buf, int len, const char *prompt, int verify), int sgckey);
RSA *__cdecl d2i_RSA_PUBKEY(RSA **a, const unsigned __int8 **pp, __int64 length);
RSA *__cdecl d2i_RSA_PUBKEY_bio(BIO *bp, RSA **rsa);
RSA *__cdecl d2i_RSA_PUBKEY_fp(FILE *fp, RSA **rsa);
SSL_SESSION *__cdecl d2i_SSL_SESSION(SSL_SESSION **a, const unsigned __int8 **pp, __int64 length);
SXNET *__cdecl d2i_SXNET(SXNET **a, const unsigned __int8 **in, __int64 len);
SXNETID *__cdecl d2i_SXNETID(SXNETID **a, const unsigned __int8 **in, __int64 len);
USERNOTICE *__cdecl d2i_USERNOTICE(USERNOTICE **a, const unsigned __int8 **in, __int64 len);
X509 *__cdecl d2i_X509(X509 **a, const unsigned __int8 **in, __int64 len);
X509_ALGOR *__cdecl d2i_X509_ALGOR(X509_ALGOR **a, const unsigned __int8 **in, __int64 len);
X509_ALGORS *__cdecl d2i_X509_ALGORS(X509_ALGORS **a, const unsigned __int8 **in, __int64 len);
X509_ATTRIBUTE *__cdecl d2i_X509_ATTRIBUTE(X509_ATTRIBUTE **a, const unsigned __int8 **in, __int64 len);
X509 *__cdecl d2i_X509_AUX(X509 **a, const unsigned __int8 **pp, __int64 length);
X509_CERT_AUX *__cdecl d2i_X509_CERT_AUX(X509_CERT_AUX **a, const unsigned __int8 **in, __int64 len);
X509_CERT_PAIR *__cdecl d2i_X509_CERT_PAIR(X509_CERT_PAIR **a, const unsigned __int8 **in, __int64 len);
X509_CINF *__cdecl d2i_X509_CINF(X509_CINF **a, const unsigned __int8 **in, __int64 len);
X509_CRL *__cdecl d2i_X509_CRL(X509_CRL **a, const unsigned __int8 **in, __int64 len);
X509_CRL_INFO *__cdecl d2i_X509_CRL_INFO(X509_CRL_INFO **a, const unsigned __int8 **in, __int64 len);
X509_CRL *__cdecl d2i_X509_CRL_bio(BIO *bp, X509_CRL **crl);
X509_CRL *__cdecl d2i_X509_CRL_fp(FILE *fp, X509_CRL **crl);
X509_EXTENSION *__cdecl d2i_X509_EXTENSION(X509_EXTENSION **a, const unsigned __int8 **in, __int64 len);
X509_EXTENSIONS *__cdecl d2i_X509_EXTENSIONS(X509_EXTENSIONS **a, const unsigned __int8 **in, __int64 len);
X509_NAME *__cdecl d2i_X509_NAME(X509_NAME **a, const unsigned __int8 **in, __int64 len);
X509_NAME_ENTRY *__cdecl d2i_X509_NAME_ENTRY(X509_NAME_ENTRY **a, const unsigned __int8 **in, __int64 len);
X509_PKEY *__cdecl d2i_X509_PKEY(X509_PKEY **a, const unsigned __int8 **pp, __int64 length);
X509_PUBKEY *__cdecl d2i_X509_PUBKEY(X509_PUBKEY **a, const unsigned __int8 **in, __int64 len);
X509_REQ *__cdecl d2i_X509_REQ(X509_REQ **a, const unsigned __int8 **in, __int64 len);
X509_REQ_INFO *__cdecl d2i_X509_REQ_INFO(X509_REQ_INFO **a, const unsigned __int8 **in, __int64 len);
X509_REQ *__cdecl d2i_X509_REQ_bio(BIO *bp, X509_REQ **req);
X509_REQ *__cdecl d2i_X509_REQ_fp(FILE *fp, X509_REQ **req);
X509_REVOKED *__cdecl d2i_X509_REVOKED(X509_REVOKED **a, const unsigned __int8 **in, __int64 len);
X509_SIG *__cdecl d2i_X509_SIG(X509_SIG **a, const unsigned __int8 **in, __int64 len);
X509_VAL *__cdecl d2i_X509_VAL(X509_VAL **a, const unsigned __int8 **in, __int64 len);
X509 *__cdecl d2i_X509_bio(BIO *bp, X509 **x509);
X509 *__cdecl d2i_X509_fp(FILE *fp, X509 **x509);
int __cdecl daemon(int, int);
bool __cdecl data_ahead(const FORM *);
bool __cdecl data_behind(const FORM *);
u_char *__cdecl date_n_time(const time_t *, size_t *);
int daylight;
netsnmp_token_descr dbg_tokens[256];
int __cdecl dbm_clearerr(DBM *);
void __cdecl dbm_close(DBM *);
int __cdecl dbm_delete(DBM *, datum);
int __cdecl dbm_dirfno(DBM *);
int __cdecl dbm_error(DBM *);
datum __cdecl dbm_fetch(DBM *, datum);
datum __cdecl dbm_firstkey(DBM *);
__int64 __cdecl dbm_forder(DBM *, datum);
datum __cdecl dbm_nextkey(DBM *);
DBM *__cdecl dbm_open(const char *, int, mode_t);
int __cdecl dbm_store(DBM *, datum, datum, int);
DB *__cdecl dbopen(const char *, int, int, DBTYPE, const void *);
void debug_combo_nc(const char *token, const char *format, ...);
const char *debug_indent(void);
void __cdecl debug_indent_add(int amount);
int debug_indent_get(void);
int __cdecl debug_is_token_registered(const char *token);
int debug_num_tokens;
void __cdecl debug_register_tokens(char *tokens);
void debugmsg(const char *token, const char *format, ...);
void __cdecl debugmsg_hex(const char *token, const u_char *thedata, size_t len);
void __cdecl debugmsg_hextli(const char *token, const u_char *thedata, size_t len);
void __cdecl debugmsg_oid(const char *token, const oid *theoid, size_t len);
void __cdecl debugmsg_oidrange(const char *token, const oid *theoid, size_t len, size_t var_subid, oid range_ubound);
void __cdecl debugmsg_suboid(const char *token, const oid *theoid, size_t len);
void __cdecl debugmsg_var(const char *token, netsnmp_variable_list *var);
void debugmsgtoken(const char *token, const char *format, ...);
int __cdecl decode_keychange(const oid *hashtype, u_int hashtype_len, u_char *oldkey, size_t oldkey_len, u_char *kcstring, size_t kcstring_len, u_char *newkey, size_t *newkey_len);
int def_prog_mode(void);
int def_shell_mode(void);
int __cdecl define_key(const char *, int);
int __cdecl deflate(z_streamp strm, int flush);
uLong __cdecl deflateBound(z_streamp strm, uLong sourceLen);
int __cdecl deflateCopy(z_streamp dest, z_streamp source);
int __cdecl deflateEnd(z_streamp strm);
int __cdecl deflateInit2_(z_streamp strm, int level, int method, int windowBits, int memLevel, int strategy, const char *version, int stream_size);
int __cdecl deflateInit_(z_streamp strm, int level, const char *version, int stream_size);
int __cdecl deflateParams(z_streamp strm, int level, int strategy);
int __cdecl deflatePrime(z_streamp strm, int bits, int value);
int __cdecl deflateReset(z_streamp strm);
int __cdecl deflateSetDictionary(z_streamp strm, const Bytef *dictionary, uInt dictLength);
int __cdecl deflateSetHeader(z_streamp strm, gz_headerp head);
int __cdecl deflateTune(z_streamp strm, int good_length, int max_lazy, int nice_length, int max_chain);
int __cdecl deinit_usm_post_config(int majorid, int minorid, void *serverarg, void *clientarg);
int __cdecl del_curterm(TERMINAL *);
int __cdecl del_panel(PANEL *);
int __cdecl delay_output(int);
int delch(void);
int deleteln(void);
void __cdecl delscreen(SCREEN *);
int __cdecl delwin(WINDOW *);
int deny_severity;
BerElement *der_alloc(void);
WINDOW *__cdecl derwin(WINDOW *, int, int, int, int);
void *devfs_make_node(dev_t dev, int chrblk, uid_t uid, gid_t gid, int perms, const char *fmt, ...);
void *devfs_make_node_clone(dev_t dev, int chrblk, uid_t uid, gid_t gid, int perms, int (__cdecl *clone)(dev_t dev, int action), const char *fmt, ...);
void __cdecl devfs_remove(void *handle);
char *__cdecl devname(dev_t, mode_t);
char *__cdecl devname_r(dev_t, mode_t, char *buf, int len);
double __cdecl difftime(time_t, time_t);
static int __cdecl digittoint(int c);
static int __cdecl digittoint_l(int c, locale_t l);
char *__cdecl dirname(char *);
void __cdecl dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block);
void __cdecl dispatch_after_f(dispatch_time_t when, dispatch_queue_t queue, void *context, dispatch_function_t work);
void __cdecl dispatch_apply(size_t iterations, dispatch_queue_t queue, void *block);
void __cdecl dispatch_apply_f(size_t iterations, dispatch_queue_t queue, void *context, void (__cdecl *work)(void *, size_t));
void __cdecl dispatch_async(dispatch_queue_t queue, dispatch_block_t block);
void __cdecl dispatch_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work);
void __cdecl dispatch_barrier_async(dispatch_queue_t queue, dispatch_block_t block);
void __cdecl dispatch_barrier_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work);
void __cdecl dispatch_barrier_sync(dispatch_queue_t queue, dispatch_block_t block);
void __cdecl dispatch_barrier_sync_f(dispatch_queue_t queue, void *context, dispatch_function_t work);
bool __cdecl dispatch_data_apply(dispatch_data_t data, dispatch_data_applier_t applier);
dispatch_data_t __cdecl dispatch_data_copy_region(dispatch_data_t data, size_t location, size_t *offset_ptr);
dispatch_data_t __cdecl dispatch_data_create(const void *buffer, size_t size, dispatch_queue_t queue, dispatch_block_t destructor);
dispatch_data_t __cdecl dispatch_data_create_concat(dispatch_data_t data1, dispatch_data_t data2);
dispatch_data_t __cdecl dispatch_data_create_map(dispatch_data_t data, const void **buffer_ptr, size_t *size_ptr);
dispatch_data_t __cdecl dispatch_data_create_subrange(dispatch_data_t data, size_t offset, size_t length);
size_t __cdecl dispatch_data_get_size(dispatch_data_t data);
void dispatch_debug(dispatch_object_t object, const char *message, ...);
void __cdecl dispatch_debugv(dispatch_object_t object, const char *message, va_list ap);
void *__cdecl dispatch_get_context(dispatch_object_t object);
dispatch_queue_t dispatch_get_current_queue(void);
dispatch_queue_t __cdecl dispatch_get_global_queue(dispatch_queue_priority_t priority, unsigned __int64 flags);
void *__cdecl dispatch_get_specific(const void *key);
void __cdecl dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block);
void __cdecl dispatch_group_async_f(dispatch_group_t group, dispatch_queue_t queue, void *context, dispatch_function_t work);
dispatch_group_t dispatch_group_create(void);
void __cdecl dispatch_group_enter(dispatch_group_t group);
void __cdecl dispatch_group_leave(dispatch_group_t group);
void __cdecl dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block);
void __cdecl dispatch_group_notify_f(dispatch_group_t group, dispatch_queue_t queue, void *context, dispatch_function_t work);
__int64 __cdecl dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout);
void __cdecl dispatch_io_barrier(dispatch_io_t channel, dispatch_block_t barrier);
void __cdecl dispatch_io_close(dispatch_io_t channel, dispatch_io_close_flags_t flags);
dispatch_io_t __cdecl dispatch_io_create(dispatch_io_type_t type, dispatch_fd_t fd, dispatch_queue_t queue, void *cleanup_handler);
dispatch_io_t __cdecl dispatch_io_create_with_io(dispatch_io_type_t type, dispatch_io_t io, dispatch_queue_t queue, void *cleanup_handler);
dispatch_io_t __cdecl dispatch_io_create_with_path(dispatch_io_type_t type, const char *path, int oflag, mode_t mode, dispatch_queue_t queue, void *cleanup_handler);
dispatch_fd_t __cdecl dispatch_io_get_descriptor(dispatch_io_t channel);
void __cdecl dispatch_io_read(dispatch_io_t channel, off_t offset, size_t length, dispatch_queue_t queue, dispatch_io_handler_t io_handler);
void __cdecl dispatch_io_set_high_water(dispatch_io_t channel, size_t high_water);
void __cdecl dispatch_io_set_interval(dispatch_io_t channel, uint64_t interval, dispatch_io_interval_flags_t flags);
void __cdecl dispatch_io_set_low_water(dispatch_io_t channel, size_t low_water);
void __cdecl dispatch_io_write(dispatch_io_t channel, off_t offset, dispatch_data_t data, dispatch_queue_t queue, dispatch_io_handler_t io_handler);
void __noreturn dispatch_main(void);
void __cdecl dispatch_once(dispatch_once_t *predicate, dispatch_block_t block);
void __cdecl dispatch_once_f(dispatch_once_t *predicate, void *context, dispatch_function_t function);
dispatch_queue_t __cdecl dispatch_queue_create(const char *label, dispatch_queue_attr_t attr);
const char *__cdecl dispatch_queue_get_label(dispatch_queue_t queue);
void *__cdecl dispatch_queue_get_specific(dispatch_queue_t queue, const void *key);
void __cdecl dispatch_queue_set_specific(dispatch_queue_t queue, const void *key, void *context, dispatch_function_t destructor);
void __cdecl dispatch_read(dispatch_fd_t fd, size_t length, dispatch_queue_t queue, void *handler);
void __cdecl dispatch_release(dispatch_object_t object);
void __cdecl dispatch_resume(dispatch_object_t object);
void __cdecl dispatch_retain(dispatch_object_t object);
dispatch_semaphore_t __cdecl dispatch_semaphore_create(__int64 value);
__int64 __cdecl dispatch_semaphore_signal(dispatch_semaphore_t dsema);
__int64 __cdecl dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout);
void __cdecl dispatch_set_context(dispatch_object_t object, void *context);
void __cdecl dispatch_set_finalizer_f(dispatch_object_t object, dispatch_function_t finalizer);
void __cdecl dispatch_set_target_queue(dispatch_object_t object, dispatch_queue_t queue);
void __cdecl dispatch_source_cancel(dispatch_source_t source);
dispatch_source_t __cdecl dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, unsigned __int64 mask, dispatch_queue_t queue);
unsigned __int64 __cdecl dispatch_source_get_data(dispatch_source_t source);
uintptr_t __cdecl dispatch_source_get_handle(dispatch_source_t source);
unsigned __int64 __cdecl dispatch_source_get_mask(dispatch_source_t source);
void __cdecl dispatch_source_merge_data(dispatch_source_t source, unsigned __int64 value);
void __cdecl dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t cancel_handler);
void __cdecl dispatch_source_set_cancel_handler_f(dispatch_source_t source, dispatch_function_t cancel_handler);
void __cdecl dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler);
void __cdecl dispatch_source_set_event_handler_f(dispatch_source_t source, dispatch_function_t handler);
void __cdecl dispatch_source_set_registration_handler(dispatch_source_t source, dispatch_block_t registration_handler);
void __cdecl dispatch_source_set_registration_handler_f(dispatch_source_t source, dispatch_function_t registration_handler);
void __cdecl dispatch_source_set_timer(dispatch_source_t source, dispatch_time_t start, uint64_t interval, uint64_t leeway);
__int64 __cdecl dispatch_source_testcancel(dispatch_source_t source);
void __cdecl dispatch_suspend(dispatch_object_t object);
void __cdecl dispatch_sync(dispatch_queue_t queue, dispatch_block_t block);
void __cdecl dispatch_sync_f(dispatch_queue_t queue, void *context, dispatch_function_t work);
dispatch_time_t __cdecl dispatch_time(dispatch_time_t when, int64_t delta);
dispatch_time_t __cdecl dispatch_walltime(const struct timespec *when, int64_t delta);
void __cdecl dispatch_write(dispatch_fd_t fd, dispatch_data_t data, dispatch_queue_t queue, void *handler);
div_t __cdecl div(int, int);
void __cdecl divBy10(U64, U64 *, unsigned int *);
int __cdecl dladdr(const void *, Dl_info *);
int __cdecl dlclose(void *handle);
char *dlerror(void);
void *__cdecl dlopen(const char *path, int mode);
bool __cdecl dlopen_preflight(const char *path);
void *__cdecl dlsym(void *handle, const char *symbol);
int32_t __cdecl dns_class_number(const char *c, uint16_t *n);
const char *__cdecl dns_class_string(uint16_t dnsclass);
void __cdecl dns_free(dns_handle_t dns);
void __cdecl dns_free_question(dns_question_t *q);
void __cdecl dns_free_reply(dns_reply_t *r);
void __cdecl dns_free_resource_record(dns_resource_record_t *rr);
uint32_t __cdecl dns_get_buffer_size(dns_handle_t d);
dns_reply_t *__cdecl dns_lookup(dns_handle_t dns, const char *name, uint32_t dnsclass, uint32_t dnstype);
dns_handle_t __cdecl dns_open(const char *name);
dns_reply_t *__cdecl dns_parse_packet(const char *buf, uint32_t len);
dns_question_t *__cdecl dns_parse_question(const char *buf, uint32_t len);
dns_resource_record_t *__cdecl dns_parse_resource_record(const char *buf, uint32_t len);
void __cdecl dns_print_handle(dns_handle_t d, FILE *f);
void __cdecl dns_print_question(const dns_question_t *q, FILE *f);
void __cdecl dns_print_reply(const dns_reply_t *r, FILE *f, uint16_t mask);
void __cdecl dns_print_resource_record(const dns_resource_record_t *r, FILE *f);
int32_t __cdecl dns_query(dns_handle_t dns, const char *name, uint32_t dnsclass, uint32_t dnstype, char *buf, uint32_t len, struct sockaddr *from, uint32_t *fromlen);
int32_t __cdecl dns_search(dns_handle_t dns, const char *name, uint32_t dnsclass, uint32_t dnstype, char *buf, uint32_t len, struct sockaddr *from, uint32_t *fromlen);
char *__cdecl dns_search_list_domain(dns_handle_t dns, uint32_t i);
uint32_t __cdecl dns_search_list_domain_count(dns_handle_t dns);
void __cdecl dns_set_buffer_size(dns_handle_t d, uint32_t len);
void __cdecl dns_set_debug(dns_handle_t dns, uint32_t flag);
int32_t __cdecl dns_type_number(const char *t, uint16_t *n);
const char *__cdecl dns_type_string(uint16_t dnstype);
xmlSAXHandlerV1 docbDefaultSAXHandler;
void docbDefaultSAXHandlerInit(void);
unsigned __int64 __cdecl dot_quad_addr();
int doupdate(void);
int dprintf(int, const char *, ...);
int dprintf_l(int, locale_t, const char *, ...);
static int __cdecl dqhashshift(u_int32_t);
double drand48(void);
int dry_run;
void __cdecl dump_chunk(const char *debugtoken, const char *title, const u_char *buf, int size);
void dump_etimelist(void);
void __cdecl dump_etimelist_entry(Enginetime e, int count);
void dump_sess_list(void);
char *__cdecl dump_snmpEngineID(const u_char *buf, size_t *buflen);
int __cdecl dup(int);
int __cdecl dup2(int, int);
FIELD *__cdecl dup_field(FIELD *, int, int);
locale_t __cdecl duplocale(locale_t);
WINDOW *__cdecl dupwin(WINDOW *);
int __cdecl dynamic_field_info(const FIELD *, int *, int *, int *);
int echo(void);
int __cdecl echochar(const chtype);
char *__cdecl ecvt(double, int, int *, int *);
void __cdecl el_beep(EditLine *);
void __cdecl el_deletestr(EditLine *, int);
void __cdecl el_end(EditLine *);
int el_get(EditLine *, int, ...);
int __cdecl el_getc(EditLine *, char *);
const char *__cdecl el_gets(EditLine *, int *);
EditLine *__cdecl el_init(const char *, FILE *, FILE *, FILE *);
int __cdecl el_insertstr(EditLine *, const char *);
const LineInfo *__cdecl el_line(EditLine *);
int __cdecl el_parse(EditLine *, int, const char **);
void __cdecl el_push(EditLine *, const char *);
void __cdecl el_reset(EditLine *);
void __cdecl el_resize(EditLine *);
int el_set(EditLine *, int, ...);
int __cdecl el_source(EditLine *, const char *);
int el_wget(EditLine *, int, ...);
int __cdecl el_wgetc(EditLine *, wchar_t *);
const wchar_t *__cdecl el_wgets(EditLine *, int *);
int __cdecl el_winsertstr(EditLine *, const wchar_t *);
const LineInfoW *__cdecl el_wline(EditLine *);
int __cdecl el_wparse(EditLine *, int, const wchar_t **);
void __cdecl el_wpush(EditLine *, const wchar_t *);
int el_wset(EditLine *, int, ...);
void __cdecl elementDecl(void *ctx, const xmlChar *name, int type, xmlElementContentPtr content);
KEYMAP_ENTRY_ARRAY emacs_ctlx_keymap;
KEYMAP_ENTRY_ARRAY emacs_meta_keymap;
KEYMAP_ENTRY_ARRAY emacs_standard_keymap;
xmlExpNodePtr emptyExp;
int __cdecl encode_keychange(const oid *hashtype, u_int hashtype_len, u_char *oldkey, size_t oldkey_len, u_char *newkey, size_t newkey_len, u_char *kcstring, size_t *kcstring_len);
void __cdecl encrypt(char *, int);
char *encrypt_names[];
char *enctype_names[];
void __cdecl endDocument(void *ctx);
void __cdecl endElement(void *ctx, const xmlChar *name);
void endac(void);
void endauclass(void);
void endauevent(void);
void endauuser(void);
void endfsent(void);
void endgrent(void);
void endhostent(void);
void endnetent(void);
void endnetgrent(void);
void endprotoent(void);
void endpwent(void);
void endrpcent(void);
void endservent(void);
int endttyent(void);
void endusershell(void);
void endutxent(void);
void endutxent_wtmp(void);
int endwin(void);
void __cdecl engineBoots_conf(const char *, char *);
void __cdecl engineIDNic_conf(const char *, char *);
void __cdecl engineIDType_conf(const char *, char *);
void __cdecl engineID_conf(const char *word, char *cptr);
void __cdecl entityDecl(void *ctx, const xmlChar *name, int type, const xmlChar *publicId, const xmlChar *systemId, xmlChar *content);
double __cdecl erand48(unsigned __int16[3]);
int erase(void);
char erasechar(void);
double __cdecl erf(double);
double __cdecl erfc(double);
float __cdecl erfcf(float);
long double __cdecl erfcl(long double);
float __cdecl erff(float);
long double __cdecl erfl(long double);
void __noreturn err(int, const char *, ...);
void __cdecl err_set_exit(void (__cdecl *)(int));
void __cdecl err_set_exit_b(void *);
void __cdecl err_set_file(void *);
void __noreturn errc(int, int, const char *, ...);
const char *__cdecl error_manager(errcode_t code);
const char *__cdecl error_message(errcode_t code);
void __noreturn errx(int, const char *, ...);
const struct error_table et_asn1_error_table;
const struct error_table et_k524_error_table;
const struct error_table et_kdb5_error_table;
const struct error_table et_krb5_error_table;
const struct error_table et_kv5m_error_table;
const struct error_table et_prof_error_table;
kern_return_t __cdecl etap_trace_thread(thread_act_t target_act, boolean_t trace_status);
struct ether_addr *__cdecl ether_aton(const char *);
int __cdecl ether_hostton(const char *, struct ether_addr *);
int __cdecl ether_line(const char *, struct ether_addr *, char *);
char *__cdecl ether_ntoa(const struct ether_addr *);
int __cdecl ether_ntohost(char *, const struct ether_addr *);
char *__cdecl eval_client();
char *__cdecl eval_hostaddr();
char *__cdecl eval_hostinfo();
char *__cdecl eval_hostname();
char *__cdecl eval_server();
char *__cdecl eval_user();
kern_return_t __cdecl exception_raise(mach_port_t exception_port, mach_port_t thread, mach_port_t task, exception_type_t exception, exception_data_t code, mach_msg_type_number_t codeCnt);
kern_return_t __cdecl exception_raise_state(mach_port_t exception_port, exception_type_t exception, const exception_data_t code, mach_msg_type_number_t codeCnt, int *flavor, const thread_state_t old_state, mach_msg_type_number_t old_stateCnt, thread_state_t new_state, mach_msg_type_number_t *new_stateCnt);
kern_return_t __cdecl exception_raise_state_identity(mach_port_t exception_port, mach_port_t thread, mach_port_t task, exception_type_t exception, exception_data_t code, mach_msg_type_number_t codeCnt, int *flavor, thread_state_t old_state, mach_msg_type_number_t old_stateCnt, thread_state_t new_state, mach_msg_type_number_t *new_stateCnt);
int __cdecl exchangedata(const char *, const char *, unsigned int);
int execl(const char *, const char *, ...);
int execle(const char *, const char *, ...);
int execlp(const char *, const char *, ...);
int __cdecl execv(const char *, char *const *);
int __cdecl execvP(const char *, const char *, char *const *);
int __cdecl execve(const char *, char *const *, char *const *);
int __cdecl execvp(const char *, char *const *);
void __cdecl __noreturn exit(int);
double __cdecl exp(double);
double __cdecl exp2(double);
float __cdecl exp2f(float);
long double __cdecl exp2l(long double);
float __cdecl expf(float);
long double __cdecl expl(long double);
double __cdecl expm1(double);
float __cdecl expm1f(float);
long double __cdecl expm1l(long double);
void exsltCommonRegister(void);
void exsltDateRegister(void);
void exsltDynRegister(void);
void exsltFuncRegister(void);
const int exsltLibexsltVersion;
const char *exsltLibraryVersion;
const int exsltLibxmlVersion;
const int exsltLibxsltVersion;
void exsltMathRegister(void);
void exsltRegisterAll(void);
void exsltSaxonRegister(void);
void exsltSetsRegister(void);
void exsltStrRegister(void);
void __cdecl externalSubset(void *ctx, const xmlChar *name, const xmlChar *ExternalID, const xmlChar *SystemID);
int external_exceptfd[32];
void *external_exceptfd_data[32];
void (__cdecl *external_exceptfdfunc[32])(int, void *);
int external_exceptfdlen;
int external_readfd[32];
void *external_readfd_data[32];
void (__cdecl *external_readfdfunc[32])(int, void *);
int external_readfdlen;
void (__cdecl *external_signal_handler[32])(int);
int external_signal_scheduled[32];
int external_writefd[32];
void *external_writefd_data[32];
void (__cdecl *external_writefdfunc[32])(int, void *);
int external_writefdlen;
double __cdecl fabs(double);
float __cdecl fabsf(float);
long double __cdecl fabsl(long double);
int __cdecl fchdir(int);
int __cdecl fchflags(int, __uint32_t);
int __cdecl fchmod(int, mode_t);
int __cdecl fchmodx_np(int, filesec_t);
int __cdecl fchown(int, uid_t, gid_t);
int __cdecl fclose(FILE *);
int fcntl(int, int, ...);
int __cdecl fcopyfile(int from_fd, int to_fd, copyfile_state_t, copyfile_flags_t flags);
char *__cdecl fcvt(double, int, int *, int *);
double __cdecl fdim(double, double);
float __cdecl fdimf(float, float);
long double __cdecl fdiml(long double, long double);
FILE *__cdecl fdopen(int, const char *);
int __cdecl feclearexcept(int);
int __cdecl fegetenv(fenv_t *);
int __cdecl fegetexceptflag(fexcept_t *, int);
int fegetround(void);
int __cdecl feholdexcept(fenv_t *);
int __cdecl feof(FILE *);
int __cdecl feraiseexcept(int);
int __cdecl ferror(FILE *);
int __cdecl fesetenv(const fenv_t *);
int __cdecl fesetexceptflag(const fexcept_t *, int);
int __cdecl fesetround(int);
int __cdecl fetestexcept(int);
int __cdecl feupdateenv(const fenv_t *);
void __cdecl ffi_call(ffi_cif *cif, void (*fn)(void), void *rvalue, void **avalue);
void __cdecl ffi_java_ptrarray_to_raw(ffi_cif *cif, void **args, ffi_raw *raw);
void __cdecl ffi_java_raw_call(ffi_cif *cif, void (*fn)(void), void *rvalue, ffi_raw *avalue);
size_t __cdecl ffi_java_raw_size(ffi_cif *cif);
void __cdecl ffi_java_raw_to_ptrarray(ffi_cif *cif, ffi_raw *raw, void **args);
ffi_status __cdecl ffi_prep_cif(ffi_cif *cif, ffi_abi abi, unsigned int nargs, ffi_type *rtype, ffi_type **atypes);
ffi_status __cdecl ffi_prep_closure(ffi_closure *closure, ffi_cif *cif, void (__cdecl *fun)(ffi_cif *, void *, void **, void *), void *user_data);
ffi_status __cdecl ffi_prep_java_raw_closure(ffi_raw_closure *closure, ffi_cif *cif, void (__cdecl *fun)(ffi_cif *, void *, ffi_raw *, void *), void *user_data);
ffi_status __cdecl ffi_prep_raw_closure(ffi_raw_closure *closure, ffi_cif *cif, void (__cdecl *fun)(ffi_cif *, void *, ffi_raw *, void *), void *user_data);
void __cdecl ffi_ptrarray_to_raw(ffi_cif *cif, void **args, ffi_raw *raw);
void __cdecl ffi_raw_call(ffi_cif *cif, void (*fn)(void), void *rvalue, ffi_raw *avalue);
size_t __cdecl ffi_raw_size(ffi_cif *cif);
void __cdecl ffi_raw_to_ptrarray(ffi_cif *cif, ffi_raw *raw, void **args);
ffi_type ffi_type_double;
ffi_type ffi_type_float;
ffi_type ffi_type_longdouble;
ffi_type ffi_type_pointer;
ffi_type ffi_type_sint16;
ffi_type ffi_type_sint32;
ffi_type ffi_type_sint64;
ffi_type ffi_type_sint8;
ffi_type ffi_type_uint16;
ffi_type ffi_type_uint32;
ffi_type ffi_type_uint64;
ffi_type ffi_type_uint8;
ffi_type ffi_type_void;
char *__cdecl fflagstostr(unsigned __int64);
int __cdecl fflush(FILE *);
int __cdecl ffs(int);
int __cdecl ffsctl(int, unsigned __int64, void *, unsigned int);
int __cdecl ffsl(__int64);
int __cdecl fgetattrlist(int, void *, void *, size_t, unsigned int);
int __cdecl fgetc(FILE *);
char *__cdecl fgetln(FILE *, size_t *);
int __cdecl fgetpos(FILE *, fpos_t *);
__int64 __cdecl fgetrune(FILE *);
char *__cdecl fgets(char *, int, FILE *);
wint_t __cdecl fgetwc(FILE *);
wint_t __cdecl fgetwc_l(FILE *, locale_t);
wchar_t *__cdecl fgetwln(FILE *, size_t *);
wchar_t *__cdecl fgetwln_l(FILE *, size_t *, locale_t);
wchar_t *__cdecl fgetws(wchar_t *, int, FILE *);
wchar_t *__cdecl fgetws_l(wchar_t *, int, FILE *, locale_t);
ssize_t __cdecl fgetxattr(int fd, const char *name, void *value, size_t size, u_int32_t position, int options);
int __cdecl fhopen(const struct fhandle *, int);
void *__cdecl field_arg(const FIELD *);
chtype __cdecl field_back(const FIELD *);
char *__cdecl field_buffer(const FIELD *, int);
int __cdecl field_count(const FORM *);
chtype __cdecl field_fore(const FIELD *);
int __cdecl field_index(const FIELD *);
int __cdecl field_info(const FIELD *, int *, int *, int *, int *, int *, int *);
Form_Hook __cdecl field_init(const FORM *);
int __cdecl field_just(const FIELD *);
Field_Options __cdecl field_opts(const FIELD *);
int __cdecl field_opts_off(FIELD *, Field_Options);
int __cdecl field_opts_on(FIELD *, Field_Options);
int __cdecl field_pad(const FIELD *);
bool __cdecl field_status(const FIELD *);
Form_Hook __cdecl field_term(const FORM *);
FIELDTYPE *__cdecl field_type(const FIELD *);
void *__cdecl field_userptr(const FIELD *);
char *__cdecl filename_completion_function(const char *, int);
int __cdecl fileno(FILE *);
filesec_t __cdecl filesec_dup(filesec_t);
void __cdecl filesec_free(filesec_t);
int __cdecl filesec_get_property(filesec_t, filesec_property_t, void *);
filesec_t filesec_init(void);
int __cdecl filesec_query_property(filesec_t, filesec_property_t, int *);
int __cdecl filesec_set_property(filesec_t, filesec_property_t, const void *);
int __cdecl filesec_unset_property(filesec_t, filesec_property_t);
void filter(void);
struct tree *__cdecl find_best_tree_node(const char *, struct tree *, u_int *);
struct module *__cdecl find_module(int);
struct tree *__cdecl find_node(const char *, struct tree *);
struct tree *__cdecl find_node2(const char *, const char *);
struct snmp_secmod_def *__cdecl find_sec_mod(int);
struct tree *__cdecl find_tree_node(const char *, int);
netsnmp_variable_list *__cdecl find_varbind_in_list(netsnmp_variable_list *vblist, const oid *name, size_t len);
netsnmp_variable_list *__cdecl find_varbind_of_type(netsnmp_variable_list *var_ptr, u_char type);
int __cdecl finite(double);
int flash(void);
ssize_t __cdecl flistxattr(int fd, char *namebuff, size_t size, int options);
int __cdecl flock(int, int);
void __cdecl flockfile(FILE *);
double __cdecl floor(double);
float __cdecl floorf(float);
long double __cdecl floorl(long double);
int __cdecl fls(int);
int __cdecl flsl(__int64);
int flushinp(void);
double __cdecl fma(double, double, double);
float __cdecl fmaf(float, float, float);
long double __cdecl fmal(long double, long double, long double);
double __cdecl fmax(double, double);
float __cdecl fmaxf(float, float);
long double __cdecl fmaxl(long double, long double);
double __cdecl fmin(double, double);
float __cdecl fminf(float, float);
long double __cdecl fminl(long double, long double);
double __cdecl fmod(double, double);
float __cdecl fmodf(float, float);
long double __cdecl fmodl(long double, long double);
const char *__cdecl fmtcheck(const char *, const char *);
int __cdecl fmtmsg(__int64, const char *, int, const char *, const char *, const char *);
int __cdecl fnmatch(const char *, const char *, int);
FILE *__cdecl fopen(const char *, const char *);
xmlExpNodePtr forbiddenExp;
pid_t fork(void);
pid_t __cdecl forkpty(int *, char *, struct termios *, struct winsize *);
int __cdecl form_driver(FORM *, int);
FIELD **__cdecl form_fields(const FORM *);
Form_Hook __cdecl form_init(const FORM *);
Form_Options __cdecl form_opts(const FORM *);
int __cdecl form_opts_off(FORM *, Form_Options);
int __cdecl form_opts_on(FORM *, Form_Options);
int __cdecl form_page(const FORM *);
int __cdecl form_request_by_name(const char *);
const char *__cdecl form_request_name(int);
WINDOW *__cdecl form_sub(const FORM *);
Form_Hook __cdecl form_term(const FORM *);
void *__cdecl form_userptr(const FORM *);
WINDOW *__cdecl form_win(const FORM *);
char *__cdecl fparseln(FILE *, size_t *, size_t *, const char[3], int);
__int64 __cdecl fpathconf(int, int);
void __cdecl fprint_description(FILE *fp, oid *objid, size_t objidlen, int width);
void __cdecl fprint_objid(FILE *fp, const oid *objid, size_t objidlen);
void __cdecl fprint_value(FILE *fp, const oid *objid, size_t objidlen, const netsnmp_variable_list *variable);
void __cdecl fprint_variable(FILE *fp, const oid *objid, size_t objidlen, const netsnmp_variable_list *variable);
int fprintf(FILE *, const char *, ...);
int fprintf_l(FILE *, locale_t, const char *, ...);
int __cdecl fpurge(FILE *);
int __cdecl fputc(int, FILE *);
int __cdecl fputrune(rune_t, FILE *);
int __cdecl fputs(const char *, FILE *);
wint_t __cdecl fputwc(wchar_t, FILE *);
wint_t __cdecl fputwc_l(wchar_t, FILE *, locale_t);
int __cdecl fputws(const wchar_t *, FILE *);
int __cdecl fputws_l(const wchar_t *, FILE *, locale_t);
size_t __cdecl fread(void *, size_t, size_t, FILE *);
void __cdecl free(void *);
void __cdecl free_agent_snmp_session(netsnmp_agent_session *);
void free_config(void);
int __cdecl free_engineID(int majorid, int minorid, void *serverarg, void *clientarg);
void __cdecl free_enginetime(unsigned __int8 *engineID, size_t engineID_len);
void free_etimelist(void);
int __cdecl free_field(FIELD *);
int __cdecl free_fieldtype(FIELDTYPE *);
int __cdecl free_form(FORM *);
int __cdecl free_item(ITEM *);
int __cdecl free_menu(MENU *);
void __cdecl free_zero(void *buf, size_t size);
void __cdecl freeaddrinfo(struct addrinfo *);
void __cdecl freehostent(struct hostent *);
void __cdecl freeifaddrs(struct ifaddrs *);
void __cdecl freeifmaddrs(struct ifmaddrs *);
int __cdecl freelocale(locale_t);
int __cdecl fremovexattr(int fd, const char *name, int options);
FILE *__cdecl freopen(const char *, const char *, FILE *);
double __cdecl frexp(double, int *);
float __cdecl frexpf(float, int *);
long double __cdecl frexpl(long double, int *);
int fscanf(FILE *, const char *, ...);
int fscanf_l(FILE *, locale_t, const char *, ...);
int __cdecl fsctl(const char *, unsigned __int64, void *, unsigned int);
int __cdecl fseek(FILE *, __int64, int);
int __cdecl fseeko(FILE *, off_t, int);
int __cdecl fsetattrlist(int, void *, void *, size_t, unsigned int);
int __cdecl fsetpos(FILE *, const fpos_t *);
int __cdecl fsetxattr(int fd, const char *name, const void *value, size_t size, u_int32_t position, int options);
int __cdecl fstat(int, struct stat *);
int __cdecl fstat64(int, struct stat64 *);
int __cdecl fstatfs(int, struct statfs *);
int __cdecl fstatfs64(int, struct statfs64 *);
int __cdecl fstatvfs(int, struct statvfs *);
int __cdecl fstatx64_np(int, struct stat64 *, filesec_t);
int __cdecl fstatx_np(int, struct stat *, filesec_t);
int __cdecl fsync(int);
__int64 __cdecl ftell(FILE *);
off_t __cdecl ftello(FILE *);
int __cdecl ftime(struct timeb *);
key_t __cdecl ftok(const char *, int);
int __cdecl ftruncate(int, off_t);
int __cdecl ftrylockfile(FILE *);
FTSENT *__cdecl fts_children(FTS *, int);
int __cdecl fts_close(FTS *);
FTS *__cdecl fts_open(char *const *, int, int (__cdecl *)(const FTSENT **, const FTSENT **));
FTS *__cdecl fts_open_b(char *const *, int, void *);
FTSENT *__cdecl fts_read(FTS *);
int __cdecl fts_set(FTS *, FTSENT *, int);
int __cdecl ftw(const char *, int (__cdecl *)(const char *, const struct stat *, int), int);
int __cdecl fungetrune(rune_t, FILE *);
void __cdecl funlockfile(FILE *);
FILE *__cdecl funopen(const void *, int (__cdecl *)(void *, char *, int), int (__cdecl *)(void *, const char *, int), fpos_t (__cdecl *)(void *, fpos_t, int), int (__cdecl *)(void *));
int __cdecl futimes(int, const struct timeval *);
int __cdecl fwide(FILE *, int);
int fwprintf(FILE *, const wchar_t *, ...);
int fwprintf_l(FILE *, locale_t, const wchar_t *, ...);
size_t __cdecl fwrite(const void *, size_t, size_t, FILE *);
int fwscanf(FILE *, const wchar_t *, ...);
int fwscanf_l(FILE *, locale_t, const wchar_t *, ...);
const char *__cdecl gai_strerror(int);
double __cdecl gamma(double);
char *__cdecl gcvt(double, int, char *);
int __cdecl generate_Ku(const oid *hashtype, u_int hashtype_len, const u_char *P, size_t pplen, u_char *Ku, size_t *kulen);
int __cdecl generate_kul(const oid *hashtype, u_int hashtype_len, const u_char *engineID, size_t engineID_len, const u_char *Ku, size_t ku_len, u_char *Kul, size_t *kul_len);
int __cdecl getColumnNumber(void *ctx);
xmlEntityPtr __cdecl getEntity(void *ctx, const xmlChar *name);
int __cdecl getLineNumber(void *ctx);
xmlNsPtr __cdecl getNamespace(void *ctx);
int getNextSessID(void);
xmlEntityPtr __cdecl getParameterEntity(void *ctx, const xmlChar *name);
const xmlChar *__cdecl getPublicId(void *ctx);
const xmlChar *__cdecl getSystemId(void *ctx);
static unsigned __int64 __cdecl get_align_long(void *ivalue);
static unsigned __int16 __cdecl get_align_short(void *ivalue);
const char *get_configuration_directory(void);
const uLongf *get_crc_table(void);
const oid *__cdecl get_default_authtype(size_t *);
const oid *__cdecl get_default_privtype(size_t *);
int get_default_secLevel(void);
kern_return_t __cdecl get_dp_control_port(host_priv_t host, mach_port_t *contorl_port);
unsigned __int64 get_edata(void);
unsigned __int64 get_end(void);
int __cdecl get_enginetime(const u_char *engineID, u_int engineID_len, u_int *engine_boot, u_int *engine_time, u_int authenticated);
int __cdecl get_enginetime_ex(u_char *engineID, u_int engineID_len, u_int *engine_boot, u_int *engine_time, u_int *last_engine_time, u_int authenticated);
unsigned __int64 get_etext(void);
const char *__cdecl get_history_event(const char *, int *, int);
netsnmp_log_handler *get_logh_head(void);
int get_mib_parse_error_count(void);
int __cdecl get_module_node(const char *, const char *, oid *, size_t *);
in_addr_t get_myaddr(void);
int __cdecl get_next_alarm_delay_time(struct timeval *delta);
int __cdecl get_node(const char *, oid *, size_t *);
char *__cdecl get_objid(char *line, oid **optr, size_t *len);
const char *get_persistent_directory(void);
BIGNUM *__cdecl get_rfc2409_prime_1024(BIGNUM *bn);
BIGNUM *__cdecl get_rfc2409_prime_768(BIGNUM *bn);
BIGNUM *__cdecl get_rfc3526_prime_1536(BIGNUM *bn);
BIGNUM *__cdecl get_rfc3526_prime_2048(BIGNUM *bn);
BIGNUM *__cdecl get_rfc3526_prime_3072(BIGNUM *bn);
BIGNUM *__cdecl get_rfc3526_prime_4096(BIGNUM *bn);
BIGNUM *__cdecl get_rfc3526_prime_6144(BIGNUM *bn);
BIGNUM *__cdecl get_rfc3526_prime_8192(BIGNUM *bn);
netsnmp_session *__cdecl get_session_for_oid(oid *, size_t, const char *context_name);
const char *__cdecl get_tc_description(int);
const char *__cdecl get_tc_descriptor(int);
const char *get_temp_file_pattern(void);
subtree_context_cache *get_top_context_cache(void);
struct tree *__cdecl get_tree(const oid *, size_t, struct tree *);
struct tree *get_tree_head(void);
__int64 get_uptime(void);
int __cdecl get_wild_node(const char *, oid *, size_t *);
int __cdecl getacdir(char *name, int len);
int __cdecl getacexpire(int *andflg, time_t *age, size_t *size);
int __cdecl getacfilesz(size_t *size_val);
int __cdecl getacflg(char *auditstr, int len);
int __cdecl getachost(char *auditstr, size_t len);
int __cdecl getacmin(int *min_val);
int __cdecl getacna(char *auditstr, int len);
int __cdecl getacpol(char *auditstr, size_t len);
int __cdecl getacsflagsmask(const char *which, char *auditstr, size_t len);
int __cdecl getaddrinfo(const char *, const char *, const struct addrinfo *, struct addrinfo **);
int __cdecl getattrlist(const char *, void *, void *, size_t, unsigned int);
int __cdecl getattrs(const WINDOW *);
struct au_class_ent *getauclassent(void);
struct au_class_ent *__cdecl getauclassent_r(au_class_ent_t *class_int);
struct au_class_ent *__cdecl getauclassnam(const char *name);
struct au_class_ent *__cdecl getauclassnam_r(au_class_ent_t *class_int, const char *name);
struct au_class_ent *__cdecl getauclassnum(au_class_t class_number);
struct au_class_ent *__cdecl getauclassnum_r(au_class_ent_t *class_int, au_class_t class_number);
int __cdecl getaudit(struct auditinfo *);
int __cdecl getaudit_addr(struct auditinfo_addr *, int);
int __cdecl getauditflagsbin(char *auditstr, au_mask_t *masks);
int __cdecl getauditflagschar(char *auditstr, au_mask_t *masks, int verbose);
struct au_event_ent *getauevent(void);
struct au_event_ent *__cdecl getauevent_r(struct au_event_ent *e);
struct au_event_ent *__cdecl getauevnam(const char *name);
struct au_event_ent *__cdecl getauevnam_r(struct au_event_ent *e, const char *name);
au_event_t *__cdecl getauevnonam(const char *event_name);
au_event_t *__cdecl getauevnonam_r(au_event_t *ev, const char *event_name);
struct au_event_ent *__cdecl getauevnum(au_event_t event_number);
struct au_event_ent *__cdecl getauevnum_r(struct au_event_ent *e, au_event_t event_number);
int __cdecl getauid(au_id_t *);
struct au_user_ent *getauuserent(void);
struct au_user_ent *__cdecl getauuserent_r(struct au_user_ent *u);
struct au_user_ent *__cdecl getauusernam(const char *name);
struct au_user_ent *__cdecl getauusernam_r(struct au_user_ent *u, const char *name);
int __cdecl getbegx(const WINDOW *);
int __cdecl getbegy(const WINDOW *);
chtype __cdecl getbkgd(WINDOW *);
char *__cdecl getbsize(int *, __int64 *);
int __cdecl getc(FILE *);
int __cdecl getc_unlocked(FILE *);
int getch(void);
int getchar(void);
int getchar_unlocked(void);
int __cdecl getcontext(ucontext_t *);
int __cdecl getcurx(const WINDOW *);
int __cdecl getcury(const WINDOW *);
char *__cdecl getcwd(char *, size_t);
struct tm *__cdecl getdate(const char *);
int getdate_err;
ssize_t __cdecl getdelim(char **, size_t *, int, FILE *);
int __cdecl getdirentries(int, char *, int, __int64 *);
int __cdecl getdirentriesattr(int, void *, void *, size_t, unsigned int *, unsigned int *, unsigned int *, unsigned int);
int __cdecl getdomainname(char *, int);
int getdtablesize(void);
gid_t getegid(void);
char *__cdecl getenv(const char *);
uid_t geteuid(void);
int __cdecl getfauditflags(au_mask_t *usremask, au_mask_t *usrdmask, au_mask_t *lastmask);
int __cdecl getfh(const char *, fhandle_t *);
struct fstab *getfsent(void);
struct fstab *__cdecl getfsfile(const char *);
struct fstab *__cdecl getfsspec(const char *);
int __cdecl getfsstat(struct statfs *, int, int);
int __cdecl getfsstat64(struct statfs64 *, int, int);
gid_t getgid(void);
struct group *getgrent(void);
struct group *__cdecl getgrgid(gid_t);
int __cdecl getgrgid_r(gid_t, struct group *, char *, size_t, struct group **);
struct group *__cdecl getgrnam(const char *);
int __cdecl getgrnam_r(const char *, struct group *, char *, size_t, struct group **);
int __cdecl getgrouplist(const char *, int, int *, int *);
int __cdecl getgroups(int, gid_t[]);
struct hostent *__cdecl gethostbyaddr(const void *, socklen_t, int);
struct hostent *__cdecl gethostbyname(const char *);
struct hostent *__cdecl gethostbyname2(const char *, int);
struct hostent *gethostent(void);
__int64 gethostid(void);
int __cdecl gethostname(char *, size_t);
int __cdecl gethostuuid(uuid_t, const struct timespec *);
int __cdecl getifaddrs(struct ifaddrs **);
int __cdecl getifmaddrs(struct ifmaddrs **);
int __cdecl getiopolicy_np(int, int);
struct hostent *__cdecl getipnodebyaddr(const void *, size_t, int, int *);
struct hostent *__cdecl getipnodebyname(const char *, int, int, int *);
int __cdecl getipv4sourcefilter(int, struct in_addr, struct in_addr, uint32_t *, uint32_t *, struct in_addr *);
int __cdecl getitimer(int, struct itimerval *);
struct lastlogx *__cdecl getlastlogx(uid_t, struct lastlogx *);
struct lastlogx *__cdecl getlastlogxbyname(const char *, struct lastlogx *);
ssize_t __cdecl getline(char **, size_t *, FILE *);
int __cdecl getloadavg(double[], int);
char *getlogin(void);
int __cdecl getlogin_r(char *, size_t);
int __cdecl getmaxx(const WINDOW *);
int __cdecl getmaxy(const WINDOW *);
int __cdecl getmntinfo(struct statfs **, int);
int __cdecl getmntinfo64(struct statfs64 **, int);
mode_t __cdecl getmode(const void *, mode_t);
int __cdecl getmouse(MEVENT *);
int __cdecl getnameinfo(const struct sockaddr *, socklen_t, char *, socklen_t, char *, socklen_t, int);
struct netent *__cdecl getnetbyaddr(uint32_t, int);
struct netent *__cdecl getnetbyname(const char *);
struct netent *getnetent(void);
int __cdecl getnetgrent(char **, char **, char **);
int __cdecl getnstr(char *, int);
int __cdecl getopt(int, char *const [], const char *);
int __cdecl getopt_long(int, char *const *, const char *, const struct option *, int *);
int __cdecl getopt_long_only(int, char *const *, const char *, const struct option *, int *);
int getpagesize(void);
int __cdecl getparx(const WINDOW *);
int __cdecl getpary(const WINDOW *);
char *__cdecl getpass(const char *);
int __cdecl getpeereid(int, uid_t *, gid_t *);
int __cdecl getpeername(int, struct sockaddr *, socklen_t *);
pid_t __cdecl getpgid(pid_t);
pid_t getpgrp(void);
pid_t getpid(void);
pid_t getppid(void);
int __cdecl getpriority(int, id_t);
const char *getprogname(void);
struct protoent *__cdecl getprotobyname(const char *);
struct protoent *__cdecl getprotobynumber(int);
struct protoent *getprotoent(void);
struct passwd *getpwent(void);
struct passwd *__cdecl getpwnam(const char *);
int __cdecl getpwnam_r(const char *, struct passwd *, char *, size_t, struct passwd **);
struct passwd *__cdecl getpwuid(uid_t);
int __cdecl getpwuid_r(uid_t, struct passwd *, char *, size_t, struct passwd **);
int __cdecl getrlimit(int, struct rlimit *);
struct rpcent *__cdecl getrpcbyname(const char *name);
struct rpcent *__cdecl getrpcbynumber(int number);
struct rpcent *getrpcent(void);
int __cdecl getrpcport(char *, int, int, int);
int __cdecl getrusage(int, struct rusage *);
char *__cdecl gets(char *);
const struct section_64 *__cdecl getsectbyname(const char *segname, const char *sectname);
const struct section *__cdecl getsectbynamefromheader(const struct mach_header *mhp, const char *segname, const char *sectname);
const struct section_64 *__cdecl getsectbynamefromheader_64(const struct mach_header_64 *mhp, const char *segname, const char *sectname);
char *__cdecl getsectdata(const char *segname, const char *sectname, unsigned __int64 *size);
char *__cdecl getsectdatafromFramework(const char *FrameworkName, const char *segname, const char *sectname, unsigned __int64 *size);
char *__cdecl getsectdatafromheader(const struct mach_header *mhp, const char *segname, const char *sectname, uint32_t *size);
char *__cdecl getsectdatafromheader_64(const struct mach_header_64 *mhp, const char *segname, const char *sectname, uint64_t *size);
uint8_t *__cdecl getsectiondata(const struct mach_header_64 *mhp, const char *segname, const char *sectname, unsigned __int64 *size);
const struct segment_command_64 *__cdecl getsegbyname(const char *segname);
uint8_t *__cdecl getsegmentdata(const struct mach_header_64 *mhp, const char *segname, unsigned __int64 *size);
struct servent *__cdecl getservbyname(const char *, const char *);
struct servent *__cdecl getservbyport(int, const char *);
struct servent *getservent(void);
int __cdecl getsgroups_np(int *, uuid_t);
pid_t __cdecl getsid(pid_t);
int __cdecl getsockname(int, struct sockaddr *, socklen_t *);
int __cdecl getsockopt(int, int, int, void *, socklen_t *);
int __cdecl getsourcefilter(int, uint32_t, struct sockaddr *, socklen_t, uint32_t *, uint32_t *, struct sockaddr_storage *);
int __cdecl getstr(char *);
int __cdecl getsubopt(char **, char *const *, char **);
int __cdecl gettimeofday(struct timeval *, void *);
struct ttyent *getttyent(void);
struct ttyent *__cdecl getttynam(const char *);
uid_t getuid(void);
char *getusershell(void);
void __cdecl getutmp(const struct utmpx *, struct utmp *);
void __cdecl getutmpx(const struct utmp *, struct utmpx *);
struct utmpx *getutxent(void);
struct utmpx *getutxent_wtmp(void);
struct utmpx *__cdecl getutxid(const struct utmpx *);
struct utmpx *__cdecl getutxline(const struct utmpx *);
int __cdecl getvfsbyname(const char *, struct vfsconf *);
int __cdecl getw(FILE *);
wint_t __cdecl getwc(FILE *);
wint_t __cdecl getwc_l(FILE *, locale_t);
wint_t getwchar(void);
wint_t __cdecl getwchar_l(locale_t);
char *__cdecl getwd(char *);
int __cdecl getwgroups_np(int *, uuid_t);
WINDOW *__cdecl getwin(FILE *);
ssize_t __cdecl getxattr(const char *path, const char *name, void *value, size_t size, u_int32_t position, int options);
int __cdecl glob(const char *, int, int (__cdecl *)(const char *, int), glob_t *);
int __cdecl glob_b(const char *, int, void *, glob_t *);
void __cdecl globalNamespace(void *ctx, const xmlChar *href, const xmlChar *prefix);
void __cdecl globfree(glob_t *);
struct tm *__cdecl gmtime(const time_t *);
struct tm *__cdecl gmtime_r(const time_t *, struct tm *);
int __cdecl grantpt(int);
OM_uint32 __cdecl gss_accept_sec_context(OM_uint32 *, gss_ctx_id_t *, gss_cred_id_t, gss_buffer_t, gss_channel_bindings_t, gss_name_t *, gss_OID *, gss_buffer_t, OM_uint32 *, OM_uint32 *, gss_cred_id_t *);
OM_uint32 __cdecl gss_acquire_cred(OM_uint32 *, gss_name_t, OM_uint32, gss_OID_set, gss_cred_usage_t, gss_cred_id_t *, gss_OID_set *, OM_uint32 *);
OM_uint32 __cdecl gss_add_cred(OM_uint32 *, gss_cred_id_t, gss_name_t, gss_OID, gss_cred_usage_t, OM_uint32, OM_uint32, gss_cred_id_t *, gss_OID_set *, OM_uint32 *, OM_uint32 *);
OM_uint32 __cdecl gss_add_oid_set_member(OM_uint32 *, gss_OID, gss_OID_set *);
OM_uint32 __cdecl gss_canonicalize_name(OM_uint32 *, const gss_name_t, const gss_OID, gss_name_t *);
OM_uint32 __cdecl gss_compare_name(OM_uint32 *, gss_name_t, gss_name_t, int *);
OM_uint32 __cdecl gss_context_time(OM_uint32 *, gss_ctx_id_t, OM_uint32 *);
OM_uint32 __cdecl gss_create_empty_oid_set(OM_uint32 *, gss_OID_set *);
OM_uint32 __cdecl gss_delete_sec_context(OM_uint32 *, gss_ctx_id_t *, gss_buffer_t);
OM_uint32 __cdecl gss_display_name(OM_uint32 *, gss_name_t, gss_buffer_t, gss_OID *);
OM_uint32 __cdecl gss_display_status(OM_uint32 *, OM_uint32, int, gss_OID, OM_uint32 *, gss_buffer_t);
OM_uint32 __cdecl gss_duplicate_name(OM_uint32 *, const gss_name_t, gss_name_t *);
OM_uint32 __cdecl gss_export_name(OM_uint32 *, const gss_name_t, gss_buffer_t);
OM_uint32 __cdecl gss_export_name_object(OM_uint32 *, gss_name_t, gss_OID, void **);
OM_uint32 __cdecl gss_export_sec_context(OM_uint32 *, gss_ctx_id_t *, gss_buffer_t);
OM_uint32 __cdecl gss_get_mic(OM_uint32 *, gss_ctx_id_t, gss_qop_t, gss_buffer_t, gss_buffer_t);
OM_uint32 __cdecl gss_import_name(OM_uint32 *, gss_buffer_t, gss_OID, gss_name_t *);
OM_uint32 __cdecl gss_import_name_object(OM_uint32 *, void *, gss_OID, gss_name_t *);
OM_uint32 __cdecl gss_import_sec_context(OM_uint32 *, gss_buffer_t, gss_ctx_id_t *);
OM_uint32 __cdecl gss_indicate_mechs(OM_uint32 *, gss_OID_set *);
OM_uint32 __cdecl gss_init_sec_context(OM_uint32 *, gss_cred_id_t, gss_ctx_id_t *, gss_name_t, gss_OID, OM_uint32, OM_uint32, gss_channel_bindings_t, gss_buffer_t, gss_OID *, gss_buffer_t, OM_uint32 *, OM_uint32 *);
OM_uint32 __cdecl gss_inquire_context(OM_uint32 *, gss_ctx_id_t, gss_name_t *, gss_name_t *, OM_uint32 *, gss_OID *, OM_uint32 *, int *, int *);
OM_uint32 __cdecl gss_inquire_cred(OM_uint32 *, gss_cred_id_t, gss_name_t *, OM_uint32 *, gss_cred_usage_t *, gss_OID_set *);
OM_uint32 __cdecl gss_inquire_cred_by_mech(OM_uint32 *, gss_cred_id_t, gss_OID, gss_name_t *, OM_uint32 *, OM_uint32 *, gss_cred_usage_t *);
OM_uint32 __cdecl gss_inquire_mechs_for_name(OM_uint32 *, const gss_name_t, gss_OID_set *);
OM_uint32 __cdecl gss_inquire_names_for_mech(OM_uint32 *, gss_OID, gss_OID_set *);
OM_uint32 __cdecl gss_krb5_ccache_name(OM_uint32 *minor_status, const char *name, const char **out_name);
OM_uint32 __cdecl gss_krb5_copy_ccache(OM_uint32 *minor_status, gss_cred_id_t cred_handle, krb5_ccache out_ccache);
OM_uint32 __cdecl gss_krb5_export_lucid_sec_context(OM_uint32 *minor_status, gss_ctx_id_t *context_handle, OM_uint32 version, void **kctx);
OM_uint32 __cdecl gss_krb5_free_lucid_sec_context(OM_uint32 *minor_status, void *kctx);
OM_uint32 __cdecl gss_krb5_get_tkt_flags(OM_uint32 *minor_status, gss_ctx_id_t context_handle, krb5_flags *ticket_flags);
OM_uint32 __cdecl gss_krb5_set_allowable_enctypes(OM_uint32 *minor_status, gss_cred_id_t cred, OM_uint32 num_ktypes, krb5_enctype *ktypes);
OM_uint32 __cdecl gss_krb5_ui(OM_uint32 *, OM_uint32);
const gss_OID_desc *const gss_mech_krb5;
const gss_OID_desc *const gss_mech_krb5_old;
const gss_OID_desc *const gss_mech_krb5_wrong;
const gss_OID_set_desc *const gss_mech_set_krb5;
const gss_OID_set_desc *const gss_mech_set_krb5_both;
const gss_OID_set_desc *const gss_mech_set_krb5_old;
gss_OID gss_nt_exported_name;
const gss_OID_desc *const gss_nt_krb5_name;
const gss_OID_desc *const gss_nt_krb5_principal;
gss_OID gss_nt_machine_uid_name;
gss_OID gss_nt_service_name;
gss_OID gss_nt_service_name_v2;
gss_OID gss_nt_string_uid_name;
gss_OID gss_nt_user_name;
OM_uint32 __cdecl gss_oid_to_str(OM_uint32 *, gss_OID, gss_buffer_t);
OM_uint32 __cdecl gss_process_context_token(OM_uint32 *, gss_ctx_id_t, gss_buffer_t);
OM_uint32 __cdecl gss_release_buffer(OM_uint32 *, gss_buffer_t);
OM_uint32 __cdecl gss_release_cred(OM_uint32 *, gss_cred_id_t *);
OM_uint32 __cdecl gss_release_name(OM_uint32 *, gss_name_t *);
OM_uint32 __cdecl gss_release_oid(OM_uint32 *, gss_OID *);
OM_uint32 __cdecl gss_release_oid_set(OM_uint32 *, gss_OID_set *);
OM_uint32 __cdecl gss_seal(OM_uint32 *, gss_ctx_id_t, int, int, gss_buffer_t, int *, gss_buffer_t);
OM_uint32 __cdecl gss_sign(OM_uint32 *, gss_ctx_id_t, int, gss_buffer_t, gss_buffer_t);
OM_uint32 __cdecl gss_str_to_oid(OM_uint32 *, gss_buffer_t, gss_OID *);
OM_uint32 __cdecl gss_test_oid_set_member(OM_uint32 *, gss_OID, gss_OID_set, int *);
OM_uint32 __cdecl gss_unseal(OM_uint32 *, gss_ctx_id_t, gss_buffer_t, gss_buffer_t, int *, int *);
OM_uint32 __cdecl gss_unwrap(OM_uint32 *, gss_ctx_id_t, gss_buffer_t, gss_buffer_t, int *, gss_qop_t *);
OM_uint32 __cdecl gss_verify(OM_uint32 *, gss_ctx_id_t, gss_buffer_t, gss_buffer_t, int *);
OM_uint32 __cdecl gss_verify_mic(OM_uint32 *, gss_ctx_id_t, gss_buffer_t, gss_buffer_t, gss_qop_t *);
OM_uint32 __cdecl gss_wrap(OM_uint32 *, gss_ctx_id_t, int, gss_qop_t, gss_buffer_t, int *, gss_buffer_t);
OM_uint32 __cdecl gss_wrap_size_limit(OM_uint32 *, gss_ctx_id_t, int, gss_qop_t, OM_uint32, OM_uint32 *);
int __cdecl gtty(int, struct sgttyb *);
int __cdecl gzbuffer(gzFile file, unsigned int size);
void __cdecl gzclearerr(gzFile file);
int __cdecl gzclose(gzFile file);
int __cdecl gzclose_r(gzFile file);
int __cdecl gzclose_w(gzFile file);
int __cdecl gzdirect(gzFile file);
gzFile __cdecl gzdopen(int fd, const char *mode);
int __cdecl gzeof(gzFile file);
const char *__cdecl gzerror(gzFile file, int *errnum);
int __cdecl gzflush(gzFile file, int flush);
int __cdecl gzgetc(gzFile file);
char *__cdecl gzgets(gzFile file, char *buf, int len);
__int64 __cdecl gzoffset(gzFile);
gzFile __cdecl gzopen(const char *, const char *);
int gzprintf(gzFile file, const char *format, ...);
int __cdecl gzputc(gzFile file, int c);
int __cdecl gzputs(gzFile file, const char *s);
int __cdecl gzread(gzFile file, voidp buf, unsigned int len);
int __cdecl gzrewind(gzFile file);
__int64 __cdecl gzseek(gzFile, __int64, int);
int __cdecl gzsetparams(gzFile file, int level, int strategy);
__int64 __cdecl gztell(gzFile);
int __cdecl gzungetc(int c, gzFile file);
int __cdecl gzwrite(gzFile file, voidpc buf, unsigned int len);
int h_errno;
int __cdecl halfdelay(int);
void __cdecl handle_long_opt(const char *myoptarg);
int __cdecl handle_snmp_packet(int, netsnmp_session *, int, netsnmp_pdu *, void *);
int __cdecl hasExternalSubset(void *ctx);
int __cdecl hasInternalSubset(void *ctx);
int __cdecl has_access(u_char, int, int, int);
bool has_colors(void);
bool has_ic(void);
bool has_il(void);
int __cdecl has_key(int);
hash_table *__cdecl hash_create(int size);
void __cdecl hash_destroy(hash_table *table, char *key, void (__cdecl *nukefunc)(char *k, void *d));
int __cdecl hash_engineID(const u_char *engineID, u_int engineID_len);
void __cdecl hash_purge(hash_table *table, void (__cdecl *purge_func)(char *k, void *d));
void *__cdecl hash_search(hash_table *table, char *key, void *datum, void (__cdecl *replace_func)(void *d));
void __cdecl hash_traverse(hash_table *table, int (__cdecl *func)(char *k, void *d, void *arg), void *arg);
int __cdecl havedisk(char *);
int __cdecl hcreate(size_t);
void hdestroy(void);
int __cdecl heapsort(void *, size_t, size_t, int (__cdecl *)(const void *, const void *));
int __cdecl heapsort_b(void *, size_t, size_t, void *);
void __cdecl helpDeleteIndex(help_index_t *hi);
help_node_t *__cdecl helpFindNode(help_index_t *hi, const char *filename, const char *anchor);
help_index_t *__cdecl helpLoadIndex(const char *hifile, const char *directory);
int __cdecl helpSaveIndex(help_index_t *hi, const char *hifile);
help_index_t *__cdecl helpSearchIndex(help_index_t *hi, const char *query, const char *section, const char *filename);
void __cdecl herror(const char *);
int __cdecl hex_to_binary2(const u_char *input, size_t len, char **output);
char *__cdecl hex_to_string(unsigned __int8 *buffer, __int64 len);
int __cdecl hide_panel(PANEL *);
int history(History *, HistEvent *, int, ...);
char *__cdecl history_arg_extract(int, int, const char *);
int history_base;
void __cdecl history_end(History *);
int __cdecl history_expand(char *, char **);
HIST_ENTRY *__cdecl history_get(int);
HISTORY_STATE *history_get_history_state(void);
History *history_init(void);
int history_is_stifled(void);
int history_length;
int __cdecl history_search(const char *, int);
int __cdecl history_search_pos(const char *, int, int);
int __cdecl history_search_prefix(const char *, int);
int __cdecl history_set_pos(int);
char **__cdecl history_tokenize(const char *);
int history_total_bytes(void);
int __cdecl history_truncate_file(const char *, int);
int history_w(HistoryW *, HistEventW *, int, ...);
void __cdecl history_wend(HistoryW *);
HistoryW *history_winit(void);
int __cdecl hline(chtype, int);
kern_return_t __cdecl host_default_memory_manager(host_priv_t host_priv, memory_object_default_t *default_manager, memory_object_cluster_size_t cluster_size);
kern_return_t __cdecl host_get_UNDServer(host_priv_t host, UNDServerRef *server);
kern_return_t __cdecl host_get_boot_info(host_priv_t host_priv, kernel_boot_info_t boot_info);
kern_return_t __cdecl host_get_clock_control(host_priv_t host_priv, clock_id_t clock_id, clock_ctrl_t *clock_ctrl);
kern_return_t __cdecl host_get_clock_service(host_t host, clock_id_t clock_id, clock_serv_t *clock_serv);
kern_return_t __cdecl host_get_exception_ports(host_priv_t host_priv, exception_mask_t exception_mask, exception_mask_array_t masks, mach_msg_type_number_t *masksCnt, exception_handler_array_t old_handlers, exception_behavior_array_t old_behaviors, exception_flavor_array_t old_flavors);
kern_return_t __cdecl host_get_io_master(host_t host, io_master_t *io_master);
kern_return_t __cdecl host_get_special_port(host_priv_t host_priv, int node, int which, mach_port_t *port);
kern_return_t __cdecl host_info(host_t host, host_flavor_t flavor, host_info_t host_info_out, mach_msg_type_number_t *host_info_outCnt);
kern_return_t __cdecl host_ipc_hash_info(host_t host, hash_info_bucket_array_t *info, mach_msg_type_number_t *infoCnt);
kern_return_t __cdecl host_kernel_version(host_t host, kernel_version_t kernel_version);
kern_return_t __cdecl host_load_symbol_table(host_priv_t host, task_t task, symtab_name_t name, vm_offset_t symtab, mach_msg_type_number_t symtabCnt);
kern_return_t __cdecl host_lockgroup_info(host_t host, lockgroup_info_array_t *lockgroup_info, mach_msg_type_number_t *lockgroup_infoCnt);
kern_return_t __cdecl host_page_size(host_t, vm_size_t *);
kern_return_t __cdecl host_priv_statistics(host_priv_t host_priv, host_flavor_t flavor, host_info_t host_info_out, mach_msg_type_number_t *host_info_outCnt);
kern_return_t __cdecl host_processor_info(host_t host, processor_flavor_t flavor, natural_t *out_processor_count, processor_info_array_t *out_processor_info, mach_msg_type_number_t *out_processor_infoCnt);
kern_return_t __cdecl host_processor_set_priv(host_priv_t host_priv, processor_set_name_t set_name, processor_set_t *set);
kern_return_t __cdecl host_processor_sets(host_priv_t host_priv, processor_set_name_array_t *processor_sets, mach_msg_type_number_t *processor_setsCnt);
kern_return_t __cdecl host_processors(host_priv_t host_priv, processor_array_t *out_processor_list, mach_msg_type_number_t *out_processor_listCnt);
kern_return_t __cdecl host_reboot(host_priv_t host_priv, int options);
kern_return_t __cdecl host_request_notification(host_t host, host_flavor_t notify_type, mach_port_t notify_port);
kern_return_t __cdecl host_security_create_task_token(host_security_t host_security, task_t parent_task, security_token_t sec_token, audit_token_t audit_token, host_t host, ledger_array_t ledgers, mach_msg_type_number_t ledgersCnt, boolean_t inherit_memory, task_t *child_task);
kern_return_t __cdecl host_security_set_task_token(host_security_t host_security, task_t target_task, security_token_t sec_token, audit_token_t audit_token, host_t host);
kern_return_t __cdecl host_set_UNDServer(host_priv_t host, UNDServerRef server);
kern_return_t __cdecl host_set_exception_ports(host_priv_t host_priv, exception_mask_t exception_mask, mach_port_t new_port, exception_behavior_t behavior, thread_state_flavor_t new_flavor);
kern_return_t __cdecl host_set_special_port(host_priv_t host_priv, int which, mach_port_t port);
kern_return_t __cdecl host_statistics(host_t host_priv, host_flavor_t flavor, host_info_t host_info_out, mach_msg_type_number_t *host_info_outCnt);
kern_return_t __cdecl host_statistics64(host_t host_priv, host_flavor_t flavor, host_info64_t host_info64_out, mach_msg_type_number_t *host_info64_outCnt);
kern_return_t __cdecl host_swap_exception_ports(host_priv_t host_priv, exception_mask_t exception_mask, mach_port_t new_port, exception_behavior_t behavior, thread_state_flavor_t new_flavor, exception_mask_array_t masks, mach_msg_type_number_t *masksCnt, exception_handler_array_t old_handlerss, exception_behavior_array_t old_behaviors, exception_flavor_array_t old_flavors);
kern_return_t __cdecl host_virtual_physical_table_info(host_t host, hash_info_bucket_array_t *info, mach_msg_type_number_t *infoCnt);
kern_return_t __cdecl host_zone_info(host_t host, zone_name_array_t *names, mach_msg_type_number_t *namesCnt, zone_info_array_t *info, mach_msg_type_number_t *infoCnt);
int __cdecl hosts_access();
int hosts_access_verbose;
char *hosts_allow_table;
char *hosts_deny_table;
ENTRY *__cdecl hsearch(ENTRY, ACTION);
const char *__cdecl hstrerror(int);
htmlStatus __cdecl htmlAttrAllowed(const htmlElemDesc *, const xmlChar *, int);
int __cdecl htmlAutoCloseTag(htmlDocPtr doc, const xmlChar *name, htmlNodePtr elem);
htmlParserCtxtPtr __cdecl htmlCreateFileParserCtxt(const char *filename, const char *encoding);
htmlParserCtxtPtr __cdecl htmlCreateMemoryParserCtxt(const char *buffer, int size);
htmlParserCtxtPtr __cdecl htmlCreatePushParserCtxt(htmlSAXHandlerPtr sax, void *user_data, const char *chunk, int size, const char *filename, xmlCharEncoding enc);
htmlDocPtr __cdecl htmlCtxtReadDoc(xmlParserCtxtPtr ctxt, const xmlChar *cur, const char *URL, const char *encoding, int options);
htmlDocPtr __cdecl htmlCtxtReadFd(xmlParserCtxtPtr ctxt, int fd, const char *URL, const char *encoding, int options);
htmlDocPtr __cdecl htmlCtxtReadFile(xmlParserCtxtPtr ctxt, const char *filename, const char *encoding, int options);
htmlDocPtr __cdecl htmlCtxtReadIO(xmlParserCtxtPtr ctxt, xmlInputReadCallback ioread, xmlInputCloseCallback ioclose, void *ioctx, const char *URL, const char *encoding, int options);
htmlDocPtr __cdecl htmlCtxtReadMemory(xmlParserCtxtPtr ctxt, const char *buffer, int size, const char *URL, const char *encoding, int options);
void __cdecl htmlCtxtReset(htmlParserCtxtPtr ctxt);
int __cdecl htmlCtxtUseOptions(htmlParserCtxtPtr ctxt, int options);
xmlSAXHandlerV1 htmlDefaultSAXHandler;
void htmlDefaultSAXHandlerInit(void);
void __cdecl htmlDocContentDumpFormatOutput(xmlOutputBufferPtr buf, xmlDocPtr cur, const char *encoding, int format);
void __cdecl htmlDocContentDumpOutput(xmlOutputBufferPtr buf, xmlDocPtr cur, const char *encoding);
int __cdecl htmlDocDump(FILE *f, xmlDocPtr cur);
void __cdecl htmlDocDumpMemory(xmlDocPtr cur, xmlChar **mem, int *size);
void __cdecl htmlDocDumpMemoryFormat(xmlDocPtr cur, xmlChar **mem, int *size, int format);
int __cdecl htmlElementAllowedHere(const htmlElemDesc *, const xmlChar *);
htmlStatus __cdecl htmlElementStatusHere(const htmlElemDesc *, const htmlElemDesc *);
int __cdecl htmlEncodeEntities(unsigned __int8 *out, int *outlen, const unsigned __int8 *in, int *inlen, int quoteChar);
const htmlEntityDesc *__cdecl htmlEntityLookup(const xmlChar *name);
const htmlEntityDesc *__cdecl htmlEntityValueLookup(unsigned int value);
void __cdecl htmlFreeParserCtxt(htmlParserCtxtPtr ctxt);
const xmlChar *__cdecl htmlGetMetaEncoding(htmlDocPtr doc);
int __cdecl htmlHandleOmittedElem(int val);
void htmlInitAutoClose(void);
int __cdecl htmlIsAutoClosed(htmlDocPtr doc, htmlNodePtr elem);
int __cdecl htmlIsBooleanAttr(const xmlChar *name);
int __cdecl htmlIsScriptAttribute(const xmlChar *name);
htmlDocPtr __cdecl htmlNewDoc(const xmlChar *URI, const xmlChar *ExternalID);
htmlDocPtr __cdecl htmlNewDocNoDtD(const xmlChar *URI, const xmlChar *ExternalID);
htmlParserCtxtPtr htmlNewParserCtxt(void);
int __cdecl htmlNodeDump(xmlBufferPtr buf, xmlDocPtr doc, xmlNodePtr cur);
void __cdecl htmlNodeDumpFile(FILE *out, xmlDocPtr doc, xmlNodePtr cur);
int __cdecl htmlNodeDumpFileFormat(FILE *out, xmlDocPtr doc, xmlNodePtr cur, const char *encoding, int format);
void __cdecl htmlNodeDumpFormatOutput(xmlOutputBufferPtr buf, xmlDocPtr doc, xmlNodePtr cur, const char *encoding, int format);
void __cdecl htmlNodeDumpOutput(xmlOutputBufferPtr buf, xmlDocPtr doc, xmlNodePtr cur, const char *encoding);
htmlStatus __cdecl htmlNodeStatus(const htmlNodePtr, int);
int __cdecl htmlParseCharRef(htmlParserCtxtPtr ctxt);
int __cdecl htmlParseChunk(htmlParserCtxtPtr ctxt, const char *chunk, int size, int terminate);
htmlDocPtr __cdecl htmlParseDoc(xmlChar *cur, const char *encoding);
int __cdecl htmlParseDocument(htmlParserCtxtPtr ctxt);
void __cdecl htmlParseElement(htmlParserCtxtPtr ctxt);
const htmlEntityDesc *__cdecl htmlParseEntityRef(htmlParserCtxtPtr ctxt, const xmlChar **str);
htmlDocPtr __cdecl htmlParseFile(const char *filename, const char *encoding);
htmlDocPtr __cdecl htmlReadDoc(const xmlChar *cur, const char *URL, const char *encoding, int options);
htmlDocPtr __cdecl htmlReadFd(int fd, const char *URL, const char *encoding, int options);
htmlDocPtr __cdecl htmlReadFile(const char *URL, const char *encoding, int options);
htmlDocPtr __cdecl htmlReadIO(xmlInputReadCallback ioread, xmlInputCloseCallback ioclose, void *ioctx, const char *URL, const char *encoding, int options);
htmlDocPtr __cdecl htmlReadMemory(const char *buffer, int size, const char *URL, const char *encoding, int options);
htmlDocPtr __cdecl htmlSAXParseDoc(xmlChar *cur, const char *encoding, htmlSAXHandlerPtr sax, void *userData);
htmlDocPtr __cdecl htmlSAXParseFile(const char *filename, const char *encoding, htmlSAXHandlerPtr sax, void *userData);
int __cdecl htmlSaveFile(const char *filename, xmlDocPtr cur);
int __cdecl htmlSaveFileEnc(const char *filename, xmlDocPtr cur, const char *encoding);
int __cdecl htmlSaveFileFormat(const char *filename, xmlDocPtr cur, const char *encoding, int format);
int __cdecl htmlSetMetaEncoding(htmlDocPtr doc, const xmlChar *encoding);
const htmlElemDesc *__cdecl htmlTagLookup(const xmlChar *tag);
int __cdecl httpAddCredential(cups_array_t *credentials, const void *data, size_t datalen);
int __cdecl httpAddrAny(const http_addr_t *addr);
http_addrlist_t *__cdecl httpAddrConnect(http_addrlist_t *addrlist, int *sock);
int __cdecl httpAddrEqual(const http_addr_t *addr1, const http_addr_t *addr2);
void __cdecl httpAddrFreeList(http_addrlist_t *addrlist);
http_addrlist_t *__cdecl httpAddrGetList(const char *hostname, int family, const char *service);
int __cdecl httpAddrLength(const http_addr_t *addr);
int __cdecl httpAddrLocalhost(const http_addr_t *addr);
char *__cdecl httpAddrLookup(const http_addr_t *addr, char *name, int namelen);
char *__cdecl httpAddrString(const http_addr_t *addr, char *s, int slen);
http_uri_status_t __cdecl httpAssembleURI(http_uri_coding_t encoding, char *uri, int urilen, const char *scheme, const char *username, const char *host, int port, const char *resource);
http_uri_status_t httpAssembleURIf(http_uri_coding_t encoding, char *uri, int urilen, const char *scheme, const char *username, const char *host, int port, const char *resourcef, ...);
void __cdecl httpBlocking(http_t *http, int b);
int __cdecl httpCheck(http_t *http);
void __cdecl httpClearCookie(http_t *http);
void __cdecl httpClearFields(http_t *http);
void __cdecl httpClose(http_t *http);
http_t *__cdecl httpConnect(const char *host, int port);
http_t *__cdecl httpConnectEncrypt(const char *host, int port, http_encryption_t encryption);
int __cdecl httpCopyCredentials(http_t *http, cups_array_t **credentials);
char *__cdecl httpDecode64(char *out, const char *in);
char *__cdecl httpDecode64_2(char *out, int *outlen, const char *in);
int __cdecl httpDelete(http_t *http, const char *uri);
char *__cdecl httpEncode64(char *out, const char *in);
char *__cdecl httpEncode64_2(char *out, int outlen, const char *in, int inlen);
int __cdecl httpEncryption(http_t *http, http_encryption_t e);
int __cdecl httpError(http_t *http);
void __cdecl httpFlush(http_t *http);
int __cdecl httpFlushWrite(http_t *http);
void __cdecl httpFreeCredentials(cups_array_t *certs);
int __cdecl httpGet(http_t *http, const char *uri);
char *__cdecl httpGetAuthString(http_t *http);
int __cdecl httpGetBlocking(http_t *http);
const char *__cdecl httpGetCookie(http_t *http);
const char *__cdecl httpGetDateString(time_t t);
const char *__cdecl httpGetDateString2(time_t t, char *s, int slen);
time_t __cdecl httpGetDateTime(const char *s);
int __cdecl httpGetFd(http_t *http);
const char *__cdecl httpGetField(http_t *http, http_field_t field);
struct hostent *__cdecl httpGetHostByName(const char *name);
const char *__cdecl httpGetHostname(http_t *http, char *s, int slen);
int __cdecl httpGetLength(http_t *http);
off_t __cdecl httpGetLength2(http_t *http);
http_status_t __cdecl httpGetStatus(http_t *http);
char *__cdecl httpGetSubField(http_t *http, http_field_t field, const char *name, char *value);
char *__cdecl httpGetSubField2(http_t *http, http_field_t field, const char *name, char *value, int valuelen);
char *__cdecl httpGets(char *line, int length, http_t *http);
int __cdecl httpHead(http_t *http, const char *uri);
void httpInitialize(void);
char *__cdecl httpMD5(const char *, const char *, const char *, char[33]);
char *__cdecl httpMD5Final(const char *, const char *, const char *, char[33]);
char *__cdecl httpMD5String(const unsigned __int8 *, char[33]);
int __cdecl httpOptions(http_t *http, const char *uri);
int __cdecl httpPost(http_t *http, const char *uri);
int httpPrintf(http_t *http, const char *format, ...);
int __cdecl httpPut(http_t *http, const char *uri);
int __cdecl httpRead(http_t *http, char *buffer, int length);
ssize_t __cdecl httpRead2(http_t *http, char *buffer, size_t length);
int __cdecl httpReconnect(http_t *http);
void __cdecl httpSeparate(const char *uri, char *method, char *username, char *host, int *port, char *resource);
void __cdecl httpSeparate2(const char *uri, char *method, int methodlen, char *username, int usernamelen, char *host, int hostlen, int *port, char *resource, int resourcelen);
http_uri_status_t __cdecl httpSeparateURI(http_uri_coding_t decoding, const char *uri, char *scheme, int schemelen, char *username, int usernamelen, char *host, int hostlen, int *port, char *resource, int resourcelen);
void __cdecl httpSetAuthString(http_t *http, const char *scheme, const char *data);
void __cdecl httpSetCookie(http_t *http, const char *cookie);
int __cdecl httpSetCredentials(http_t *http, cups_array_t *certs);
void __cdecl httpSetExpect(http_t *http, http_status_t expect);
void __cdecl httpSetField(http_t *http, http_field_t field, const char *value);
void __cdecl httpSetLength(http_t *http, size_t length);
void __cdecl httpSetTimeout(http_t *http, double timeout, http_timeout_cb_t cb, void *user_data);
const char *__cdecl httpStatus(http_status_t status);
int __cdecl httpTrace(http_t *http, const char *uri);
http_status_t __cdecl httpUpdate(http_t *http);
int __cdecl httpWait(http_t *http, int msec);
int __cdecl httpWrite(http_t *http, const char *buffer, int length);
ssize_t __cdecl httpWrite2(http_t *http, const char *buffer, size_t length);
double __cdecl hypot(double, double);
float __cdecl hypotf(float, float);
long double __cdecl hypotl(long double, long double);
int __cdecl i2a_ACCESS_DESCRIPTION(BIO *bp, ACCESS_DESCRIPTION *a);
int __cdecl i2a_ASN1_ENUMERATED(BIO *bp, ASN1_ENUMERATED *a);
int __cdecl i2a_ASN1_INTEGER(BIO *bp, ASN1_INTEGER *a);
int __cdecl i2a_ASN1_OBJECT(BIO *bp, ASN1_OBJECT *a);
int __cdecl i2a_ASN1_STRING(BIO *bp, ASN1_STRING *a, int type);
int __cdecl i2c_ASN1_BIT_STRING(ASN1_BIT_STRING *a, unsigned __int8 **pp);
int __cdecl i2c_ASN1_INTEGER(ASN1_INTEGER *a, unsigned __int8 **pp);
int __cdecl i2d_ACCESS_DESCRIPTION(ACCESS_DESCRIPTION *a, unsigned __int8 **out);
int __cdecl i2d_ASN1_BIT_STRING(ASN1_BIT_STRING *a, unsigned __int8 **out);
int __cdecl i2d_ASN1_BMPSTRING(ASN1_BMPSTRING *a, unsigned __int8 **out);
int __cdecl i2d_ASN1_BOOLEAN(int a, unsigned __int8 **pp);
int __cdecl i2d_ASN1_ENUMERATED(ASN1_ENUMERATED *a, unsigned __int8 **out);
int __cdecl i2d_ASN1_GENERALIZEDTIME(ASN1_GENERALIZEDTIME *a, unsigned __int8 **out);
int __cdecl i2d_ASN1_GENERALSTRING(ASN1_GENERALSTRING *a, unsigned __int8 **out);
int __cdecl i2d_ASN1_HEADER(ASN1_HEADER *a, unsigned __int8 **pp);
int __cdecl i2d_ASN1_IA5STRING(ASN1_IA5STRING *a, unsigned __int8 **out);
int __cdecl i2d_ASN1_INTEGER(ASN1_INTEGER *a, unsigned __int8 **out);
int __cdecl i2d_ASN1_NULL(ASN1_NULL *a, unsigned __int8 **out);
int __cdecl i2d_ASN1_OBJECT(ASN1_OBJECT *a, unsigned __int8 **pp);
int __cdecl i2d_ASN1_OCTET_STRING(ASN1_OCTET_STRING *a, unsigned __int8 **out);
int __cdecl i2d_ASN1_PRINTABLE(ASN1_STRING *a, unsigned __int8 **out);
int __cdecl i2d_ASN1_PRINTABLESTRING(ASN1_PRINTABLESTRING *a, unsigned __int8 **out);
int __cdecl i2d_ASN1_SET(STACK *a, unsigned __int8 **pp, i2d_of_void *i2d, int ex_tag, int ex_class, int is_set);
int __cdecl i2d_ASN1_T61STRING(ASN1_T61STRING *a, unsigned __int8 **out);
int __cdecl i2d_ASN1_TIME(ASN1_TIME *a, unsigned __int8 **out);
int __cdecl i2d_ASN1_TYPE(ASN1_TYPE *a, unsigned __int8 **out);
int __cdecl i2d_ASN1_UNIVERSALSTRING(ASN1_UNIVERSALSTRING *a, unsigned __int8 **out);
int __cdecl i2d_ASN1_UTCTIME(ASN1_UTCTIME *a, unsigned __int8 **out);
int __cdecl i2d_ASN1_UTF8STRING(ASN1_UTF8STRING *a, unsigned __int8 **out);
int __cdecl i2d_ASN1_VISIBLESTRING(ASN1_VISIBLESTRING *a, unsigned __int8 **out);
int __cdecl i2d_ASN1_bytes(ASN1_STRING *a, unsigned __int8 **pp, int tag, int xclass);
int __cdecl i2d_AUTHORITY_INFO_ACCESS(AUTHORITY_INFO_ACCESS *a, unsigned __int8 **out);
int __cdecl i2d_AUTHORITY_KEYID(AUTHORITY_KEYID *a, unsigned __int8 **out);
int __cdecl i2d_BASIC_CONSTRAINTS(BASIC_CONSTRAINTS *a, unsigned __int8 **out);
int __cdecl i2d_CERTIFICATEPOLICIES(CERTIFICATEPOLICIES *a, unsigned __int8 **out);
int __cdecl i2d_CRL_DIST_POINTS(CRL_DIST_POINTS *a, unsigned __int8 **out);
int __cdecl i2d_DHparams(const DH *a, unsigned __int8 **pp);
int __cdecl i2d_DIRECTORYSTRING(ASN1_STRING *a, unsigned __int8 **out);
int __cdecl i2d_DISPLAYTEXT(ASN1_STRING *a, unsigned __int8 **out);
int __cdecl i2d_DIST_POINT(DIST_POINT *a, unsigned __int8 **out);
int __cdecl i2d_DIST_POINT_NAME(DIST_POINT_NAME *a, unsigned __int8 **out);
int __cdecl i2d_DSAPrivateKey(const DSA *a, unsigned __int8 **pp);
int __cdecl i2d_DSAPrivateKey_bio(BIO *bp, DSA *dsa);
int __cdecl i2d_DSAPrivateKey_fp(FILE *fp, DSA *dsa);
int __cdecl i2d_DSAPublicKey(const DSA *a, unsigned __int8 **pp);
int __cdecl i2d_DSA_PUBKEY(DSA *a, unsigned __int8 **pp);
int __cdecl i2d_DSA_PUBKEY_bio(BIO *bp, DSA *dsa);
int __cdecl i2d_DSA_PUBKEY_fp(FILE *fp, DSA *dsa);
int __cdecl i2d_DSA_SIG(const DSA_SIG *a, unsigned __int8 **pp);
int __cdecl i2d_DSAparams(const DSA *a, unsigned __int8 **pp);
int __cdecl i2d_ECDSA_SIG(const ECDSA_SIG *a, unsigned __int8 **pp);
int __cdecl i2d_ECPKParameters(const EC_GROUP *, unsigned __int8 **out);
int __cdecl i2d_ECParameters(EC_KEY *a, unsigned __int8 **out);
int __cdecl i2d_ECPrivateKey(EC_KEY *a, unsigned __int8 **out);
int __cdecl i2d_ECPrivateKey_bio(BIO *bp, EC_KEY *eckey);
int __cdecl i2d_ECPrivateKey_fp(FILE *fp, EC_KEY *eckey);
int __cdecl i2d_EC_PUBKEY(EC_KEY *a, unsigned __int8 **pp);
int __cdecl i2d_EC_PUBKEY_bio(BIO *bp, EC_KEY *eckey);
int __cdecl i2d_EC_PUBKEY_fp(FILE *fp, EC_KEY *eckey);
int __cdecl i2d_EDIPARTYNAME(EDIPARTYNAME *a, unsigned __int8 **out);
int __cdecl i2d_EXTENDED_KEY_USAGE(EXTENDED_KEY_USAGE *a, unsigned __int8 **out);
int __cdecl i2d_GENERAL_NAME(GENERAL_NAME *a, unsigned __int8 **out);
int __cdecl i2d_GENERAL_NAMES(GENERAL_NAMES *a, unsigned __int8 **out);
int __cdecl i2d_KRB5_APREQ(KRB5_APREQ *a, unsigned __int8 **out);
int __cdecl i2d_KRB5_APREQBODY(KRB5_APREQBODY *a, unsigned __int8 **out);
int __cdecl i2d_KRB5_AUTHDATA(KRB5_AUTHDATA *a, unsigned __int8 **out);
int __cdecl i2d_KRB5_AUTHENT(KRB5_AUTHENT *a, unsigned __int8 **out);
int __cdecl i2d_KRB5_AUTHENTBODY(KRB5_AUTHENTBODY *a, unsigned __int8 **out);
int __cdecl i2d_KRB5_CHECKSUM(KRB5_CHECKSUM *a, unsigned __int8 **out);
int __cdecl i2d_KRB5_ENCDATA(KRB5_ENCDATA *a, unsigned __int8 **out);
int __cdecl i2d_KRB5_ENCKEY(KRB5_ENCKEY *a, unsigned __int8 **out);
int __cdecl i2d_KRB5_PRINCNAME(KRB5_PRINCNAME *a, unsigned __int8 **out);
int __cdecl i2d_KRB5_TICKET(KRB5_TICKET *a, unsigned __int8 **out);
int __cdecl i2d_KRB5_TKTBODY(KRB5_TKTBODY *a, unsigned __int8 **out);
int __cdecl i2d_NETSCAPE_CERT_SEQUENCE(NETSCAPE_CERT_SEQUENCE *a, unsigned __int8 **out);
int __cdecl i2d_NETSCAPE_SPKAC(NETSCAPE_SPKAC *a, unsigned __int8 **out);
int __cdecl i2d_NETSCAPE_SPKI(NETSCAPE_SPKI *a, unsigned __int8 **out);
int __cdecl i2d_NOTICEREF(NOTICEREF *a, unsigned __int8 **out);
int __cdecl i2d_Netscape_RSA(const RSA *a, unsigned __int8 **pp, int (__cdecl *cb)(char *buf, int len, const char *prompt, int verify));
int __cdecl i2d_OCSP_BASICRESP(OCSP_BASICRESP *a, unsigned __int8 **out);
int __cdecl i2d_OCSP_CERTID(OCSP_CERTID *a, unsigned __int8 **out);
int __cdecl i2d_OCSP_CERTSTATUS(OCSP_CERTSTATUS *a, unsigned __int8 **out);
int __cdecl i2d_OCSP_CRLID(OCSP_CRLID *a, unsigned __int8 **out);
int __cdecl i2d_OCSP_ONEREQ(OCSP_ONEREQ *a, unsigned __int8 **out);
int __cdecl i2d_OCSP_REQINFO(OCSP_REQINFO *a, unsigned __int8 **out);
int __cdecl i2d_OCSP_REQUEST(OCSP_REQUEST *a, unsigned __int8 **out);
int __cdecl i2d_OCSP_RESPBYTES(OCSP_RESPBYTES *a, unsigned __int8 **out);
int __cdecl i2d_OCSP_RESPDATA(OCSP_RESPDATA *a, unsigned __int8 **out);
int __cdecl i2d_OCSP_RESPID(OCSP_RESPID *a, unsigned __int8 **out);
int __cdecl i2d_OCSP_RESPONSE(OCSP_RESPONSE *a, unsigned __int8 **out);
int __cdecl i2d_OCSP_REVOKEDINFO(OCSP_REVOKEDINFO *a, unsigned __int8 **out);
int __cdecl i2d_OCSP_SERVICELOC(OCSP_SERVICELOC *a, unsigned __int8 **out);
int __cdecl i2d_OCSP_SIGNATURE(OCSP_SIGNATURE *a, unsigned __int8 **out);
int __cdecl i2d_OCSP_SINGLERESP(OCSP_SINGLERESP *a, unsigned __int8 **out);
int __cdecl i2d_OTHERNAME(OTHERNAME *a, unsigned __int8 **out);
int __cdecl i2d_PBE2PARAM(PBE2PARAM *a, unsigned __int8 **out);
int __cdecl i2d_PBEPARAM(PBEPARAM *a, unsigned __int8 **out);
int __cdecl i2d_PBKDF2PARAM(PBKDF2PARAM *a, unsigned __int8 **out);
int __cdecl i2d_PKCS12(PKCS12 *a, unsigned __int8 **out);
int __cdecl i2d_PKCS12_BAGS(PKCS12_BAGS *a, unsigned __int8 **out);
int __cdecl i2d_PKCS12_MAC_DATA(PKCS12_MAC_DATA *a, unsigned __int8 **out);
int __cdecl i2d_PKCS12_SAFEBAG(PKCS12_SAFEBAG *a, unsigned __int8 **out);
int __cdecl i2d_PKCS12_bio(BIO *bp, PKCS12 *p12);
int __cdecl i2d_PKCS12_fp(FILE *fp, PKCS12 *p12);
int __cdecl i2d_PKCS7(PKCS7 *a, unsigned __int8 **out);
int __cdecl i2d_PKCS7_DIGEST(PKCS7_DIGEST *a, unsigned __int8 **out);
int __cdecl i2d_PKCS7_ENCRYPT(PKCS7_ENCRYPT *a, unsigned __int8 **out);
int __cdecl i2d_PKCS7_ENC_CONTENT(PKCS7_ENC_CONTENT *a, unsigned __int8 **out);
int __cdecl i2d_PKCS7_ENVELOPE(PKCS7_ENVELOPE *a, unsigned __int8 **out);
int __cdecl i2d_PKCS7_ISSUER_AND_SERIAL(PKCS7_ISSUER_AND_SERIAL *a, unsigned __int8 **out);
int __cdecl i2d_PKCS7_NDEF(PKCS7 *a, unsigned __int8 **out);
int __cdecl i2d_PKCS7_RECIP_INFO(PKCS7_RECIP_INFO *a, unsigned __int8 **out);
int __cdecl i2d_PKCS7_SIGNED(PKCS7_SIGNED *a, unsigned __int8 **out);
int __cdecl i2d_PKCS7_SIGNER_INFO(PKCS7_SIGNER_INFO *a, unsigned __int8 **out);
int __cdecl i2d_PKCS7_SIGN_ENVELOPE(PKCS7_SIGN_ENVELOPE *a, unsigned __int8 **out);
int __cdecl i2d_PKCS7_bio(BIO *bp, PKCS7 *p7);
int __cdecl i2d_PKCS7_fp(FILE *fp, PKCS7 *p7);
int __cdecl i2d_PKCS8PrivateKeyInfo_bio(BIO *bp, EVP_PKEY *key);
int __cdecl i2d_PKCS8PrivateKeyInfo_fp(FILE *fp, EVP_PKEY *key);
int __cdecl i2d_PKCS8PrivateKey_bio(BIO *bp, EVP_PKEY *x, const EVP_CIPHER *enc, char *kstr, int klen, pem_password_cb *cb, void *u);
int __cdecl i2d_PKCS8PrivateKey_fp(FILE *fp, EVP_PKEY *x, const EVP_CIPHER *enc, char *kstr, int klen, pem_password_cb *cb, void *u);
int __cdecl i2d_PKCS8PrivateKey_nid_bio(BIO *bp, EVP_PKEY *x, int nid, char *kstr, int klen, pem_password_cb *cb, void *u);
int __cdecl i2d_PKCS8PrivateKey_nid_fp(FILE *fp, EVP_PKEY *x, int nid, char *kstr, int klen, pem_password_cb *cb, void *u);
int __cdecl i2d_PKCS8_PRIV_KEY_INFO(PKCS8_PRIV_KEY_INFO *a, unsigned __int8 **out);
int __cdecl i2d_PKCS8_PRIV_KEY_INFO_bio(BIO *bp, PKCS8_PRIV_KEY_INFO *p8inf);
int __cdecl i2d_PKCS8_PRIV_KEY_INFO_fp(FILE *fp, PKCS8_PRIV_KEY_INFO *p8inf);
int __cdecl i2d_PKCS8_bio(BIO *bp, X509_SIG *p8);
int __cdecl i2d_PKCS8_fp(FILE *fp, X509_SIG *p8);
int __cdecl i2d_PKEY_USAGE_PERIOD(PKEY_USAGE_PERIOD *a, unsigned __int8 **out);
int __cdecl i2d_POLICYINFO(POLICYINFO *a, unsigned __int8 **out);
int __cdecl i2d_POLICYQUALINFO(POLICYQUALINFO *a, unsigned __int8 **out);
int __cdecl i2d_PROXY_CERT_INFO_EXTENSION(PROXY_CERT_INFO_EXTENSION *a, unsigned __int8 **out);
int __cdecl i2d_PROXY_POLICY(PROXY_POLICY *a, unsigned __int8 **out);
int __cdecl i2d_PUBKEY(EVP_PKEY *a, unsigned __int8 **pp);
int __cdecl i2d_PUBKEY_bio(BIO *bp, EVP_PKEY *pkey);
int __cdecl i2d_PUBKEY_fp(FILE *fp, EVP_PKEY *pkey);
int __cdecl i2d_PrivateKey(EVP_PKEY *a, unsigned __int8 **pp);
int __cdecl i2d_PrivateKey_bio(BIO *bp, EVP_PKEY *pkey);
int __cdecl i2d_PrivateKey_fp(FILE *fp, EVP_PKEY *pkey);
int __cdecl i2d_PublicKey(EVP_PKEY *a, unsigned __int8 **pp);
int __cdecl i2d_RSAPrivateKey(const RSA *a, unsigned __int8 **out);
int __cdecl i2d_RSAPrivateKey_bio(BIO *bp, RSA *rsa);
int __cdecl i2d_RSAPrivateKey_fp(FILE *fp, RSA *rsa);
int __cdecl i2d_RSAPublicKey(const RSA *a, unsigned __int8 **out);
int __cdecl i2d_RSAPublicKey_bio(BIO *bp, RSA *rsa);
int __cdecl i2d_RSAPublicKey_fp(FILE *fp, RSA *rsa);
int __cdecl i2d_RSA_NET(const RSA *a, unsigned __int8 **pp, int (__cdecl *cb)(char *buf, int len, const char *prompt, int verify), int sgckey);
int __cdecl i2d_RSA_PUBKEY(RSA *a, unsigned __int8 **pp);
int __cdecl i2d_RSA_PUBKEY_bio(BIO *bp, RSA *rsa);
int __cdecl i2d_RSA_PUBKEY_fp(FILE *fp, RSA *rsa);
int __cdecl i2d_SSL_SESSION(SSL_SESSION *in, unsigned __int8 **pp);
int __cdecl i2d_SXNET(SXNET *a, unsigned __int8 **out);
int __cdecl i2d_SXNETID(SXNETID *a, unsigned __int8 **out);
int __cdecl i2d_USERNOTICE(USERNOTICE *a, unsigned __int8 **out);
int __cdecl i2d_X509(X509 *a, unsigned __int8 **out);
int __cdecl i2d_X509_ALGOR(X509_ALGOR *a, unsigned __int8 **out);
int __cdecl i2d_X509_ALGORS(X509_ALGORS *a, unsigned __int8 **out);
int __cdecl i2d_X509_ATTRIBUTE(X509_ATTRIBUTE *a, unsigned __int8 **out);
int __cdecl i2d_X509_AUX(X509 *a, unsigned __int8 **pp);
int __cdecl i2d_X509_CERT_AUX(X509_CERT_AUX *a, unsigned __int8 **out);
int __cdecl i2d_X509_CERT_PAIR(X509_CERT_PAIR *a, unsigned __int8 **out);
int __cdecl i2d_X509_CINF(X509_CINF *a, unsigned __int8 **out);
int __cdecl i2d_X509_CRL(X509_CRL *a, unsigned __int8 **out);
int __cdecl i2d_X509_CRL_INFO(X509_CRL_INFO *a, unsigned __int8 **out);
int __cdecl i2d_X509_CRL_bio(BIO *bp, X509_CRL *crl);
int __cdecl i2d_X509_CRL_fp(FILE *fp, X509_CRL *crl);
int __cdecl i2d_X509_EXTENSION(X509_EXTENSION *a, unsigned __int8 **out);
int __cdecl i2d_X509_EXTENSIONS(X509_EXTENSIONS *a, unsigned __int8 **out);
int __cdecl i2d_X509_NAME(X509_NAME *a, unsigned __int8 **out);
int __cdecl i2d_X509_NAME_ENTRY(X509_NAME_ENTRY *a, unsigned __int8 **out);
int __cdecl i2d_X509_PKEY(X509_PKEY *a, unsigned __int8 **pp);
int __cdecl i2d_X509_PUBKEY(X509_PUBKEY *a, unsigned __int8 **out);
int __cdecl i2d_X509_REQ(X509_REQ *a, unsigned __int8 **out);
int __cdecl i2d_X509_REQ_INFO(X509_REQ_INFO *a, unsigned __int8 **out);
int __cdecl i2d_X509_REQ_bio(BIO *bp, X509_REQ *req);
int __cdecl i2d_X509_REQ_fp(FILE *fp, X509_REQ *req);
int __cdecl i2d_X509_REVOKED(X509_REVOKED *a, unsigned __int8 **out);
int __cdecl i2d_X509_SIG(X509_SIG *a, unsigned __int8 **out);
int __cdecl i2d_X509_VAL(X509_VAL *a, unsigned __int8 **out);
int __cdecl i2d_X509_bio(BIO *bp, X509 *x509);
int __cdecl i2d_X509_fp(FILE *fp, X509 *x509);
int __cdecl i2o_ECPublicKey(EC_KEY *a, unsigned __int8 **out);
char *__cdecl i2s_ASN1_ENUMERATED(X509V3_EXT_METHOD *meth, ASN1_ENUMERATED *aint);
char *__cdecl i2s_ASN1_ENUMERATED_TABLE(X509V3_EXT_METHOD *meth, ASN1_ENUMERATED *aint);
char *__cdecl i2s_ASN1_INTEGER(X509V3_EXT_METHOD *meth, ASN1_INTEGER *aint);
char *__cdecl i2s_ASN1_OCTET_STRING(X509V3_EXT_METHOD *method, ASN1_OCTET_STRING *ia5);
int __cdecl i2t_ASN1_OBJECT(char *buf, int buf_len, ASN1_OBJECT *a);
STACK *__cdecl i2v_ASN1_BIT_STRING(X509V3_EXT_METHOD *method, ASN1_BIT_STRING *bits, STACK *extlist);
STACK *__cdecl i2v_GENERAL_NAME(X509V3_EXT_METHOD *method, GENERAL_NAME *gen, STACK *ret);
STACK *__cdecl i2v_GENERAL_NAMES(X509V3_EXT_METHOD *method, GENERAL_NAMES *gen, STACK *extlist);
int __cdecl i386_get_ldt(int, union ldt_entry *, int);
int __cdecl i386_set_ldt(int, const union ldt_entry *, int);
size_t __cdecl iconv(iconv_t, char **, size_t *, char **, size_t *);
const char *__cdecl iconv_canonicalize(const char *name);
int __cdecl iconv_close(iconv_t);
iconv_t __cdecl iconv_open(const char *, const char *);
int __cdecl iconvctl(iconv_t, int, void *);
void __cdecl iconvlist(int (__cdecl *)(unsigned int, const char *const *, void *), void *);
void __cdecl idcok(WINDOW *, bool);
int __cdecl idlok(WINDOW *, bool);
void __cdecl if_freenameindex(struct if_nameindex *);
char *__cdecl if_indextoname(unsigned int, char *);
struct if_nameindex *if_nameindex(void);
unsigned int __cdecl if_nametoindex(const char *);
void __cdecl ignorableWhitespace(void *ctx, const xmlChar *ch, int len);
int __cdecl ilogb(double);
int __cdecl ilogbf(float);
int __cdecl ilogbl(long double);
intmax_t __cdecl imaxabs(intmax_t j);
imaxdiv_t __cdecl imaxdiv(intmax_t numer, intmax_t denom);
void __cdecl immedok(WINDOW *, bool);
const struct in6_addr in6addr_any;
const struct in6_addr in6addr_linklocal_allnodes;
const struct in6_addr in6addr_linklocal_allrouters;
const struct in6_addr in6addr_linklocal_allv2routers;
const struct in6_addr in6addr_loopback;
const struct in6_addr in6addr_nodelocal_allnodes;
int __cdecl in_a_view(oid *, size_t *, netsnmp_pdu *, int);
static unsigned __int8 __cdecl inb(i386_ioport_t port);
chtype inch(void);
int __cdecl inchnstr(chtype *, int);
int __cdecl inchstr(chtype *);
void __cdecl incrByU16(U64 *, unsigned int);
void __cdecl incrByU32(U64 *, unsigned int);
char *__cdecl index(const char *, int);
int __cdecl inet6_opt_append(void *, socklen_t, int, __uint8_t, socklen_t, __uint8_t, void **);
int __cdecl inet6_opt_find(void *, socklen_t, int, __uint8_t, socklen_t *, void **);
int __cdecl inet6_opt_finish(void *, socklen_t, int);
int __cdecl inet6_opt_get_val(void *, int, void *, socklen_t);
int __cdecl inet6_opt_init(void *, socklen_t);
int __cdecl inet6_opt_next(void *, socklen_t, int, __uint8_t *, socklen_t *, void **);
int __cdecl inet6_opt_set_val(void *, int, void *, socklen_t);
__uint8_t *__cdecl inet6_option_alloc(struct cmsghdr *, int, int, int);
int __cdecl inet6_option_append(struct cmsghdr *, const __uint8_t *, int, int);
int __cdecl inet6_option_find(const struct cmsghdr *, __uint8_t **, int);
int __cdecl inet6_option_init(void *, struct cmsghdr **, int);
int __cdecl inet6_option_next(const struct cmsghdr *, __uint8_t **);
int __cdecl inet6_option_space(int);
int __cdecl inet6_rth_add(void *, const struct in6_addr *);
struct in6_addr *__cdecl inet6_rth_getaddr(const void *, int);
void *__cdecl inet6_rth_init(void *, socklen_t, int, int);
int __cdecl inet6_rth_reverse(const void *, void *);
int __cdecl inet6_rth_segments(const void *);
socklen_t __cdecl inet6_rth_space(int, int);
int __cdecl inet6_rthdr_add(struct cmsghdr *, const struct in6_addr *, unsigned int);
struct in6_addr *__cdecl inet6_rthdr_getaddr(struct cmsghdr *, int);
int __cdecl inet6_rthdr_getflags(const struct cmsghdr *, int);
struct cmsghdr *__cdecl inet6_rthdr_init(void *, int);
int __cdecl inet6_rthdr_lasthop(struct cmsghdr *, unsigned int);
int __cdecl inet6_rthdr_segments(const struct cmsghdr *);
size_t __cdecl inet6_rthdr_space(int, int);
in_addr_t __cdecl inet_addr(const char *);
int __cdecl inet_aton(const char *, struct in_addr *);
in_addr_t __cdecl inet_lnaof(struct in_addr);
struct in_addr __cdecl inet_makeaddr(in_addr_t, in_addr_t);
char *__cdecl inet_net_ntop(int, const void *, int, char *, __darwin_size_t);
int __cdecl inet_net_pton(int, const char *, void *, __darwin_size_t);
char *__cdecl inet_neta(in_addr_t, char *, __darwin_size_t);
in_addr_t __cdecl inet_netof(struct in_addr);
in_addr_t __cdecl inet_network(const char *);
unsigned int __cdecl inet_nsap_addr(const char *, unsigned __int8 *, int maxlen);
char *__cdecl inet_nsap_ntoa(int, const unsigned __int8 *, char *ascii);
char *__cdecl inet_ntoa(struct in_addr);
const char *__cdecl inet_ntop(int, const void *, char *, socklen_t);
int __cdecl inet_pton(int, const char *, void *);
int __cdecl inflate(z_streamp strm, int flush);
int __cdecl inflateBack(z_streamp strm, in_func in, void *in_desc, out_func out, void *out_desc);
int __cdecl inflateBackEnd(z_streamp strm);
int __cdecl inflateBackInit_(z_streamp strm, int windowBits, unsigned __int8 *window, const char *version, int stream_size);
int __cdecl inflateCopy(z_streamp dest, z_streamp source);
int __cdecl inflateEnd(z_streamp strm);
int __cdecl inflateGetHeader(z_streamp strm, gz_headerp head);
int __cdecl inflateInit2_(z_streamp strm, int windowBits, const char *version, int stream_size);
int __cdecl inflateInit_(z_streamp strm, const char *version, int stream_size);
__int64 __cdecl inflateMark(z_streamp strm);
int __cdecl inflatePrime(z_streamp strm, int bits, int value);
int __cdecl inflateReset(z_streamp strm);
int __cdecl inflateReset2(z_streamp strm, int windowBits);
int __cdecl inflateSetDictionary(z_streamp strm, const Bytef *dictionary, uInt dictLength);
int __cdecl inflateSync(z_streamp strm);
int __cdecl inflateSyncPoint(z_streamp);
int __cdecl inflateUndermine(z_streamp, int);
void __cdecl initGenericErrorDefaultFunc(xmlGenericErrorFunc *handler);
int __cdecl init_agent(const char *);
void __cdecl init_agent_read_config(const char *);
netsnmp_agent_session *__cdecl init_agent_snmp_session(netsnmp_session *, netsnmp_pdu *);
void init_agent_sysORTable(void);
int __cdecl init_alarm_post_config(int majorid, int minorid, void *serverarg, void *clientarg);
void init_callbacks(void);
int __cdecl init_color(__int16, __int16, __int16, __int16);
int init_master_agent(void);
void init_mib_modules(void);
int __cdecl init_pair(__int16, __int16, __int16);
void init_secmod(void);
void __cdecl init_snmp(const char *);
void init_snmp_alarm(void);
int __cdecl init_snmp_enum(const char *type);
void init_snmp_logging(void);
void init_snmp_transport(void);
void __cdecl init_snmpv3(const char *);
int __cdecl init_snmpv3_post_config(int majorid, int minorid, void *serverarg, void *clientarg);
int __cdecl init_snmpv3_post_premib_config(int majorid, int minorid, void *serverarg, void *clientarg);
void init_traps(void);
void init_usm(void);
void __cdecl init_usm_conf(const char *app);
int __cdecl init_usm_post_config(int majorid, int minorid, void *serverarg, void *clientarg);
void init_vacm(void);
void __cdecl initdocbDefaultSAXHandler(xmlSAXHandlerV1 *hdlr);
int __cdecl initgroups(const char *, int);
void __cdecl inithtmlDefaultSAXHandler(xmlSAXHandlerV1 *hdlr);
void initialize_asn1_error_table(void);
void initialize_k524_error_table(void);
void initialize_kdb5_error_table(void);
void initialize_krb5_error_table(void);
void initialize_kv5m_error_table(void);
void initialize_prof_error_table(void);
WINDOW *initscr(void);
char *__cdecl initstate(unsigned int, char *, size_t);
void __cdecl initxmlDefaultSAXHandler(xmlSAXHandlerV1 *hdlr, int warning);
static unsigned __int64 __cdecl inl(i386_ioport_t port);
int __cdecl innetgr(const char *, const char *, const char *, const char *);
int __cdecl innstr(char *, int);
xmlParserInputPtr __cdecl inputPop(xmlParserCtxtPtr ctxt);
int __cdecl inputPush(xmlParserCtxtPtr ctxt, xmlParserInputPtr value);
int __cdecl insch(chtype);
int __cdecl insdelln(int);
int insertln(void);
int __cdecl insnstr(const char *, int);
void __cdecl insque(void *, void *);
int __cdecl insstr(const char *);
int __cdecl instr(char *);
void __cdecl int_CRYPTO_set_do_dynlock_callback(void (__cdecl *do_dynlock_cb)(int mode, int type, const char *file, int line));
int __cdecl int_smime_write_ASN1(BIO *bio, ASN1_VALUE *val, BIO *data, int flags, int ctype_nid, int econt_nid, STACK *mdalgs, asn1_output_data_fn *data_fn, const ASN1_ITEM *it);
void __cdecl internalSubset(void *ctx, const xmlChar *name, const xmlChar *ExternalID, const xmlChar *SystemID);
int __cdecl intrflush(WINDOW *, bool);
static unsigned __int16 __cdecl inw(i386_ioport_t port);
int ioctl(int, unsigned __int64, ...);
ipp_attribute_t *__cdecl ippAddBoolean(ipp_t *ipp, ipp_tag_t group, const char *name, char value);
ipp_attribute_t *__cdecl ippAddBooleans(ipp_t *ipp, ipp_tag_t group, const char *name, int num_values, const char *values);
ipp_attribute_t *__cdecl ippAddCollection(ipp_t *ipp, ipp_tag_t group, const char *name, ipp_t *value);
ipp_attribute_t *__cdecl ippAddCollections(ipp_t *ipp, ipp_tag_t group, const char *name, int num_values, const ipp_t **values);
ipp_attribute_t *__cdecl ippAddDate(ipp_t *ipp, ipp_tag_t group, const char *name, const ipp_uchar_t *value);
ipp_attribute_t *__cdecl ippAddInteger(ipp_t *ipp, ipp_tag_t group, ipp_tag_t type, const char *name, int value);
ipp_attribute_t *__cdecl ippAddIntegers(ipp_t *ipp, ipp_tag_t group, ipp_tag_t type, const char *name, int num_values, const int *values);
ipp_attribute_t *__cdecl ippAddOctetString(ipp_t *ipp, ipp_tag_t group, const char *name, const void *data, int datalen);
ipp_attribute_t *__cdecl ippAddRange(ipp_t *ipp, ipp_tag_t group, const char *name, int lower, int upper);
ipp_attribute_t *__cdecl ippAddRanges(ipp_t *ipp, ipp_tag_t group, const char *name, int num_values, const int *lower, const int *upper);
ipp_attribute_t *__cdecl ippAddResolution(ipp_t *ipp, ipp_tag_t group, const char *name, ipp_res_t units, int xres, int yres);
ipp_attribute_t *__cdecl ippAddResolutions(ipp_t *ipp, ipp_tag_t group, const char *name, int num_values, ipp_res_t units, const int *xres, const int *yres);
ipp_attribute_t *__cdecl ippAddSeparator(ipp_t *ipp);
ipp_attribute_t *__cdecl ippAddString(ipp_t *ipp, ipp_tag_t group, ipp_tag_t type, const char *name, const char *charset, const char *value);
ipp_attribute_t *__cdecl ippAddStrings(ipp_t *ipp, ipp_tag_t group, ipp_tag_t type, const char *name, int num_values, const char *charset, const char *const *values);
time_t __cdecl ippDateToTime(const ipp_uchar_t *date);
void __cdecl ippDelete(ipp_t *ipp);
void __cdecl ippDeleteAttribute(ipp_t *ipp, ipp_attribute_t *attr);
const char *__cdecl ippErrorString(ipp_status_t error);
ipp_status_t __cdecl ippErrorValue(const char *name);
ipp_attribute_t *__cdecl ippFindAttribute(ipp_t *ipp, const char *name, ipp_tag_t type);
ipp_attribute_t *__cdecl ippFindNextAttribute(ipp_t *ipp, const char *name, ipp_tag_t type);
size_t __cdecl ippLength(ipp_t *ipp);
ipp_t *ippNew(void);
ipp_t *__cdecl ippNewRequest(ipp_op_t op);
const char *__cdecl ippOpString(ipp_op_t op);
ipp_op_t __cdecl ippOpValue(const char *name);
int ippPort(void);
ipp_state_t __cdecl ippRead(http_t *http, ipp_t *ipp);
ipp_state_t __cdecl ippReadFile(int fd, ipp_t *ipp);
ipp_state_t __cdecl ippReadIO(void *src, ipp_iocb_t cb, int blocking, ipp_t *parent, ipp_t *ipp);
void __cdecl ippSetPort(int p);
const char *__cdecl ippTagString(ipp_tag_t tag);
ipp_tag_t __cdecl ippTagValue(const char *name);
const ipp_uchar_t *__cdecl ippTimeToDate(time_t t);
ipp_state_t __cdecl ippWrite(http_t *http, ipp_t *ipp);
ipp_state_t __cdecl ippWriteFile(int fd, ipp_t *ipp);
ipp_state_t __cdecl ippWriteIO(void *dst, ipp_iocb_t cb, int blocking, ipp_t *parent, ipp_t *ipp);
char *__cdecl ipsec_dump_policy(caddr_t, char *);
int __cdecl ipsec_get_policylen(caddr_t);
caddr_t __cdecl ipsec_set_policy(char *, int);
const char *ipsec_strerror(void);
int __cdecl iruserok(unsigned __int64, int, const char *, const char *);
int __cdecl iruserok_sa(const void *, int, int, const char *, const char *);
int __cdecl isStandalone(void *ctx);
int __cdecl isZeroU64(const U64 *);
bool __cdecl is_cleared(const WINDOW *);
bool __cdecl is_idcok(const WINDOW *);
bool __cdecl is_idlok(const WINDOW *);
bool __cdecl is_immedok(const WINDOW *);
bool __cdecl is_keypad(const WINDOW *);
bool __cdecl is_leaveok(const WINDOW *);
bool __cdecl is_linetouched(WINDOW *, int);
bool __cdecl is_nodelay(const WINDOW *);
bool __cdecl is_notimeout(const WINDOW *);
bool __cdecl is_scrollok(const WINDOW *);
bool __cdecl is_syncok(const WINDOW *);
bool __cdecl is_term_resized(int, int);
bool __cdecl is_wintouched(WINDOW *);
static int __cdecl isalnum(int c);
static int __cdecl isalnum_l(int c, locale_t l);
static int __cdecl isalpha(int c);
static int __cdecl isalpha_l(int c, locale_t l);
static int __cdecl isascii(int c);
int __cdecl isatty(int);
static int __cdecl isblank(int c);
static int __cdecl isblank_l(int c, locale_t l);
static int __cdecl iscntrl(int c);
static int __cdecl iscntrl_l(int c, locale_t l);
static int __cdecl isdigit(int c);
static int __cdecl isdigit_l(int c, locale_t l);
bool isendwin(void);
static int __cdecl isgraph(int c);
static int __cdecl isgraph_l(int c, locale_t l);
static int __cdecl ishexnumber(int c);
static int __cdecl ishexnumber_l(int c, locale_t l);
static int __cdecl isideogram(int c);
static int __cdecl isideogram_l(int c, locale_t l);
static int __cdecl islower(int c);
static int __cdecl islower_l(int c, locale_t l);
static int __cdecl isnumber(int c);
static int __cdecl isnumber_l(int c, locale_t l);
int __cdecl isolat1ToUTF8(unsigned __int8 *out, int *outlen, const unsigned __int8 *in, int *inlen);
static int __cdecl isphonogram(int c);
static int __cdecl isphonogram_l(int c, locale_t l);
static int __cdecl isprint(int c);
static int __cdecl isprint_l(int c, locale_t l);
static int __cdecl ispunct(int c);
static int __cdecl ispunct_l(int c, locale_t l);
static int __cdecl isrune(int c);
static int __cdecl isrune_l(int c, locale_t l);
int issetugid(void);
static int __cdecl isspace(int c);
static int __cdecl isspace_l(int c, locale_t l);
static int __cdecl isspecial(int c);
static int __cdecl isspecial_l(int c, locale_t l);
static int __cdecl isupper(int c);
static int __cdecl isupper_l(int c, locale_t l);
static int __cdecl iswalnum(wint_t wc);
static int __cdecl iswalnum_l(wint_t wc, locale_t l);
static int __cdecl iswalpha(wint_t wc);
static int __cdecl iswalpha_l(wint_t wc, locale_t l);
static int __cdecl iswascii(wint_t wc);
static int __cdecl iswblank(wint_t wc);
static int __cdecl iswblank_l(wint_t wc, locale_t l);
static int __cdecl iswcntrl(wint_t wc);
static int __cdecl iswcntrl_l(wint_t wc, locale_t l);
static int __cdecl iswctype(wint_t wc, wctype_t charclass);
static int __cdecl iswctype_l(wint_t wc, wctype_t charclass, locale_t l);
static int __cdecl iswdigit(wint_t wc);
static int __cdecl iswdigit_l(wint_t wc, locale_t l);
static int __cdecl iswgraph(wint_t wc);
static int __cdecl iswgraph_l(wint_t wc, locale_t l);
static int __cdecl iswhexnumber(wint_t wc);
static int __cdecl iswhexnumber_l(wint_t wc, locale_t l);
static int __cdecl iswideogram(wint_t wc);
static int __cdecl iswideogram_l(wint_t wc, locale_t l);
static int __cdecl iswlower(wint_t wc);
static int __cdecl iswlower_l(wint_t wc, locale_t l);
static int __cdecl iswnumber(wint_t wc);
static int __cdecl iswnumber_l(wint_t wc, locale_t l);
static int __cdecl iswphonogram(wint_t wc);
static int __cdecl iswphonogram_l(wint_t wc, locale_t l);
static int __cdecl iswprint(wint_t wc);
static int __cdecl iswprint_l(wint_t wc, locale_t l);
static int __cdecl iswpunct(wint_t wc);
static int __cdecl iswpunct_l(wint_t wc, locale_t l);
static int __cdecl iswrune(wint_t wc);
static int __cdecl iswrune_l(wint_t wc, locale_t l);
static int __cdecl iswspace(wint_t wc);
static int __cdecl iswspace_l(wint_t wc, locale_t l);
static int __cdecl iswspecial(wint_t wc);
static int __cdecl iswspecial_l(wint_t wc, locale_t l);
static int __cdecl iswupper(wint_t wc);
static int __cdecl iswupper_l(wint_t wc, locale_t l);
static int __cdecl iswxdigit(wint_t wc);
static int __cdecl iswxdigit_l(wint_t wc, locale_t l);
static int __cdecl isxdigit(int c);
static int __cdecl isxdigit_l(int c, locale_t l);
int __cdecl item_count(const MENU *);
const char *__cdecl item_description(const ITEM *);
int __cdecl item_index(const ITEM *);
Menu_Hook __cdecl item_init(const MENU *);
const char *__cdecl item_name(const ITEM *);
Item_Options __cdecl item_opts(const ITEM *);
int __cdecl item_opts_off(ITEM *, Item_Options);
int __cdecl item_opts_on(ITEM *, Item_Options);
Menu_Hook __cdecl item_term(const MENU *);
void *__cdecl item_userptr(const ITEM *);
bool __cdecl item_value(const ITEM *);
bool __cdecl item_visible(const ITEM *);
double __cdecl j0(double);
double __cdecl j1(double);
double __cdecl jn(int, double);
__int64 __cdecl jrand48(unsigned __int16[3]);
unsigned int kdebug_enable;
void __cdecl kernel_debug(uint32_t debugid, uintptr_t arg1, uintptr_t arg2, uintptr_t arg3, uintptr_t arg4, uintptr_t arg5);
void __cdecl kernel_debug1(uint32_t debugid, uintptr_t arg1, uintptr_t arg2, uintptr_t arg3, uintptr_t arg4, uintptr_t arg5);
int __cdecl kevent(int kq, const struct kevent *changelist, int nchanges, struct kevent *eventlist, int nevents, const struct timespec *timeout);
int __cdecl kevent64(int kq, const struct kevent64_s *changelist, int nchanges, struct kevent64_s *eventlist, int nevents, unsigned int flags, const struct timespec *timeout);
kern_return_t __cdecl kext_request(host_priv_t host_priv, uint32_t user_log_flags, vm_offset_t request_data, mach_msg_type_number_t request_dataCnt, vm_offset_t *response_data, mach_msg_type_number_t *response_dataCnt, vm_offset_t *log_data, mach_msg_type_number_t *log_dataCnt, kern_return_t *op_result);
int __cdecl key_defined(const char *);
char *__cdecl keybound(int, int);
char *__cdecl keyname(int);
int __cdecl keyok(int, bool);
int __cdecl keypad(WINDOW *, bool);
int __cdecl kill(pid_t, int);
char killchar(void);
int __cdecl killpg(pid_t, int);
klm_stat *__cdecl klm_cancel_1(struct klm_lockargs *, CLIENT *);
klm_stat *__cdecl klm_cancel_1_svc(struct klm_lockargs *, struct svc_req *);
klm_stat *__cdecl klm_lock_1(struct klm_lockargs *, CLIENT *);
klm_stat *__cdecl klm_lock_1_svc(struct klm_lockargs *, struct svc_req *);
klm_testrply *__cdecl klm_test_1(struct klm_testargs *, CLIENT *);
klm_testrply *__cdecl klm_test_1_svc(struct klm_testargs *, struct svc_req *);
klm_stat *__cdecl klm_unlock_1(struct klm_unlockargs *, CLIENT *);
klm_stat *__cdecl klm_unlock_1_svc(struct klm_unlockargs *, struct svc_req *);
kern_return_t __cdecl kmod_control(host_priv_t host_priv, kmod_t module, kmod_control_flavor_t flavor, kmod_args_t *data, mach_msg_type_number_t *dataCnt);
kern_return_t __cdecl kmod_create(host_priv_t host_priv, vm_address_t info, kmod_t *module);
kern_return_t __cdecl kmod_destroy(host_priv_t host_priv, kmod_t module);
kern_return_t __cdecl kmod_get_info(host_t host, kmod_args_t *modules, mach_msg_type_number_t *modulesCnt);
int kqueue(void);
krb5_error_code __cdecl krb5_425_conv_principal(krb5_context, const char *name, const char *instance, const char *realm, krb5_principal *princ);
krb5_error_code __cdecl krb5_524_conv_principal(krb5_context context, krb5_const_principal princ, char *name, char *inst, char *realm);
int __cdecl krb5_524_convert_creds(krb5_context context, krb5_creds *v5creds, struct credentials *v4creds);
krb5_boolean __cdecl krb5_address_compare(krb5_context, const krb5_address *, const krb5_address *);
int __cdecl krb5_address_order(krb5_context, const krb5_address *, const krb5_address *);
krb5_boolean __cdecl krb5_address_search(krb5_context, const krb5_address *, krb5_address *const *);
krb5_error_code __cdecl krb5_aname_to_localname(krb5_context, krb5_const_principal, int, char *);
void __cdecl krb5_appdefault_boolean(krb5_context context, const char *appname, const krb5_data *realm, const char *option, int default_value, int *ret_value);
void __cdecl krb5_appdefault_string(krb5_context context, const char *appname, const krb5_data *realm, const char *option, const char *default_value, char **ret_value);
krb5_error_code __cdecl krb5_auth_con_free(krb5_context, krb5_auth_context);
krb5_error_code __cdecl krb5_auth_con_genaddrs(krb5_context, krb5_auth_context, int, int);
krb5_error_code __cdecl krb5_auth_con_get_checksum_func(krb5_context, krb5_auth_context, krb5_mk_req_checksum_func *, void **);
krb5_error_code __cdecl krb5_auth_con_getaddrs(krb5_context, krb5_auth_context, krb5_address **, krb5_address **);
krb5_error_code __cdecl krb5_auth_con_getauthenticator(krb5_context, krb5_auth_context, krb5_authenticator **);
krb5_error_code __cdecl krb5_auth_con_getflags(krb5_context, krb5_auth_context, krb5_int32 *);
krb5_error_code __cdecl krb5_auth_con_getkey(krb5_context, krb5_auth_context, krb5_keyblock **);
krb5_error_code __cdecl krb5_auth_con_getlocalseqnumber(krb5_context, krb5_auth_context, krb5_int32 *);
krb5_error_code __cdecl krb5_auth_con_getrcache(krb5_context, krb5_auth_context, krb5_rcache *);
krb5_error_code __cdecl krb5_auth_con_getrecvsubkey(krb5_context, krb5_auth_context, krb5_keyblock **);
krb5_error_code __cdecl krb5_auth_con_getremoteseqnumber(krb5_context, krb5_auth_context, krb5_int32 *);
krb5_error_code __cdecl krb5_auth_con_getsendsubkey(krb5_context, krb5_auth_context, krb5_keyblock **);
krb5_error_code __cdecl krb5_auth_con_init(krb5_context, krb5_auth_context *);
krb5_error_code __cdecl krb5_auth_con_set_checksum_func(krb5_context, krb5_auth_context, krb5_mk_req_checksum_func, void *);
krb5_error_code __cdecl krb5_auth_con_setaddrs(krb5_context, krb5_auth_context, krb5_address *, krb5_address *);
krb5_error_code __cdecl krb5_auth_con_setflags(krb5_context, krb5_auth_context, krb5_int32);
krb5_error_code __cdecl krb5_auth_con_setports(krb5_context, krb5_auth_context, krb5_address *, krb5_address *);
krb5_error_code __cdecl krb5_auth_con_setrcache(krb5_context, krb5_auth_context, krb5_rcache);
krb5_error_code __cdecl krb5_auth_con_setrecvsubkey(krb5_context, krb5_auth_context, krb5_keyblock *);
krb5_error_code __cdecl krb5_auth_con_setsendsubkey(krb5_context, krb5_auth_context, krb5_keyblock *);
krb5_error_code __cdecl krb5_auth_con_setuseruserkey(krb5_context, krb5_auth_context, krb5_keyblock *);
krb5_error_code krb5_build_principal(krb5_context, krb5_principal *, unsigned int, const char *, ...);
krb5_error_code __cdecl krb5_build_principal_alloc_va(krb5_context, krb5_principal *, unsigned int, const char *, va_list);
krb5_error_code krb5_build_principal_ext(krb5_context, krb5_principal *, unsigned int, const char *, ...);
krb5_error_code __cdecl krb5_c_block_size(krb5_context context, krb5_enctype enctype, size_t *blocksize);
krb5_error_code __cdecl krb5_c_checksum_length(krb5_context context, krb5_cksumtype cksumtype, size_t *length);
krb5_error_code __cdecl krb5_c_decrypt(krb5_context context, const krb5_keyblock *key, krb5_keyusage usage, const krb5_data *cipher_state, const krb5_enc_data *input, krb5_data *output);
krb5_error_code __cdecl krb5_c_encrypt(krb5_context context, const krb5_keyblock *key, krb5_keyusage usage, const krb5_data *cipher_state, const krb5_data *input, krb5_enc_data *output);
krb5_error_code __cdecl krb5_c_encrypt_length(krb5_context context, krb5_enctype enctype, size_t inputlen, size_t *length);
krb5_error_code __cdecl krb5_c_enctype_compare(krb5_context context, krb5_enctype e1, krb5_enctype e2, krb5_boolean *similar);
krb5_error_code __cdecl krb5_c_free_state(krb5_context context, const krb5_keyblock *key, krb5_data *state);
krb5_error_code __cdecl krb5_c_init_state(krb5_context context, const krb5_keyblock *key, krb5_keyusage usage, krb5_data *new_state);
krb5_boolean __cdecl krb5_c_is_coll_proof_cksum(krb5_cksumtype ctype);
krb5_boolean __cdecl krb5_c_is_keyed_cksum(krb5_cksumtype ctype);
krb5_error_code __cdecl krb5_c_keyed_checksum_types(krb5_context context, krb5_enctype enctype, unsigned int *count, krb5_cksumtype **cksumtypes);
krb5_error_code __cdecl krb5_c_keylengths(krb5_context context, krb5_enctype enctype, size_t *keybytes, size_t *keylength);
krb5_error_code __cdecl krb5_c_make_checksum(krb5_context context, krb5_cksumtype cksumtype, const krb5_keyblock *key, krb5_keyusage usage, const krb5_data *input, krb5_checksum *cksum);
krb5_error_code __cdecl krb5_c_make_random_key(krb5_context context, krb5_enctype enctype, krb5_keyblock *k5_random_key);
krb5_error_code __cdecl krb5_c_prf(krb5_context, const krb5_keyblock *, krb5_data *in, krb5_data *out);
krb5_error_code __cdecl krb5_c_prf_length(krb5_context, krb5_enctype, size_t *outlen);
krb5_error_code __cdecl krb5_c_random_add_entropy(krb5_context context, unsigned int randsource_id, const krb5_data *data);
krb5_error_code __cdecl krb5_c_random_make_octets(krb5_context context, krb5_data *data);
krb5_error_code __cdecl krb5_c_random_os_entropy(krb5_context context, int strong, int *success);
krb5_error_code __cdecl krb5_c_random_seed(krb5_context context, krb5_data *data);
krb5_error_code __cdecl krb5_c_random_to_key(krb5_context context, krb5_enctype enctype, krb5_data *random_data, krb5_keyblock *k5_random_key);
krb5_error_code __cdecl krb5_c_string_to_key(krb5_context context, krb5_enctype enctype, const krb5_data *string, const krb5_data *salt, krb5_keyblock *key);
krb5_error_code __cdecl krb5_c_string_to_key_with_params(krb5_context context, krb5_enctype enctype, const krb5_data *string, const krb5_data *salt, const krb5_data *params, krb5_keyblock *key);
krb5_boolean __cdecl krb5_c_valid_cksumtype(krb5_cksumtype ctype);
krb5_boolean __cdecl krb5_c_valid_enctype(krb5_enctype ktype);
krb5_error_code __cdecl krb5_c_verify_checksum(krb5_context context, const krb5_keyblock *key, krb5_keyusage usage, const krb5_data *data, const krb5_checksum *cksum, krb5_boolean *valid);
krb5_error_code __cdecl krb5_calculate_checksum(krb5_context context, krb5_cksumtype ctype, krb5_const_pointer in, size_t in_length, krb5_const_pointer seed, size_t seed_length, krb5_checksum *outcksum);
krb5_error_code __cdecl krb5_cc_cache_match(krb5_context context, krb5_principal client, krb5_ccache *id);
krb5_error_code __cdecl krb5_cc_close(krb5_context context, krb5_ccache cache);
krb5_error_code __cdecl krb5_cc_copy_creds(krb5_context context, krb5_ccache incc, krb5_ccache outcc);
krb5_error_code __cdecl krb5_cc_default(krb5_context, krb5_ccache *);
const char *__cdecl krb5_cc_default_name(krb5_context);
krb5_error_code __cdecl krb5_cc_destroy(krb5_context context, krb5_ccache cache);
krb5_error_code __cdecl krb5_cc_end_seq_get(krb5_context context, krb5_ccache cache, krb5_cc_cursor *cursor);
krb5_error_code __cdecl krb5_cc_gen_new(krb5_context context, krb5_ccache *cache);
krb5_error_code __cdecl krb5_cc_get_config(krb5_context, krb5_ccache, krb5_const_principal, const char *, krb5_data *);
krb5_error_code __cdecl krb5_cc_get_flags(krb5_context context, krb5_ccache cache, krb5_flags *flags);
const char *__cdecl krb5_cc_get_name(krb5_context context, krb5_ccache cache);
krb5_error_code __cdecl krb5_cc_get_principal(krb5_context context, krb5_ccache cache, krb5_principal *principal);
const char *__cdecl krb5_cc_get_type(krb5_context context, krb5_ccache cache);
krb5_error_code __cdecl krb5_cc_initialize(krb5_context context, krb5_ccache cache, krb5_principal principal);
krb5_error_code __cdecl krb5_cc_last_change_time(krb5_context context, krb5_ccache ccache, krb5_timestamp *change_time);
krb5_error_code __cdecl krb5_cc_lock(krb5_context context, krb5_ccache ccache);
krb5_error_code __cdecl krb5_cc_move(krb5_context context, krb5_ccache src, krb5_ccache dst);
krb5_error_code __cdecl krb5_cc_new_unique(krb5_context context, const char *type, const char *hint, krb5_ccache *id);
krb5_error_code __cdecl krb5_cc_next_cred(krb5_context context, krb5_ccache cache, krb5_cc_cursor *cursor, krb5_creds *creds);
krb5_error_code __cdecl krb5_cc_remove_cred(krb5_context context, krb5_ccache cache, krb5_flags flags, krb5_creds *creds);
krb5_error_code __cdecl krb5_cc_resolve(krb5_context, const char *, krb5_ccache *);
krb5_error_code __cdecl krb5_cc_retrieve_cred(krb5_context context, krb5_ccache cache, krb5_flags flags, krb5_creds *mcreds, krb5_creds *creds);
krb5_error_code __cdecl krb5_cc_set_config(krb5_context, krb5_ccache, krb5_const_principal, const char *, krb5_data *);
krb5_error_code __cdecl krb5_cc_set_default_name(krb5_context, const char *);
krb5_error_code __cdecl krb5_cc_set_flags(krb5_context context, krb5_ccache cache, krb5_flags flags);
krb5_error_code __cdecl krb5_cc_start_seq_get(krb5_context context, krb5_ccache cache, krb5_cc_cursor *cursor);
krb5_error_code __cdecl krb5_cc_store_cred(krb5_context context, krb5_ccache cache, krb5_creds *creds);
krb5_error_code __cdecl krb5_cc_unlock(krb5_context context, krb5_ccache ccache);
krb5_error_code __cdecl krb5_cccol_cursor_free(krb5_context context, krb5_cccol_cursor *cursor);
krb5_error_code __cdecl krb5_cccol_cursor_new(krb5_context context, krb5_cccol_cursor *cursor);
krb5_error_code __cdecl krb5_cccol_cursor_next(krb5_context context, krb5_cccol_cursor cursor, krb5_ccache *ccache);
krb5_error_code __cdecl krb5_cccol_last_change_time(krb5_context context, krb5_timestamp *change_time);
krb5_error_code __cdecl krb5_cccol_lock(krb5_context context);
krb5_error_code __cdecl krb5_cccol_unlock(krb5_context context);
krb5_error_code __cdecl krb5_change_password(krb5_context context, krb5_creds *creds, char *newpw, int *result_code, krb5_data *result_code_string, krb5_data *result_string);
size_t __cdecl krb5_checksum_size(krb5_context context, krb5_cksumtype ctype);
krb5_error_code __cdecl krb5_cksumtype_to_string(krb5_cksumtype, char *, size_t);
void __cdecl krb5_clear_error_message(krb5_context);
krb5_error_code __cdecl krb5_copy_addresses(krb5_context, krb5_address *const *, krb5_address ***);
krb5_error_code __cdecl krb5_copy_authdata(krb5_context, krb5_authdata *const *, krb5_authdata ***);
krb5_error_code __cdecl krb5_copy_authenticator(krb5_context, const krb5_authenticator *, krb5_authenticator **);
krb5_error_code __cdecl krb5_copy_checksum(krb5_context, const krb5_checksum *, krb5_checksum **);
krb5_error_code __cdecl krb5_copy_context(krb5_context, krb5_context *);
krb5_error_code __cdecl krb5_copy_creds(krb5_context, const krb5_creds *, krb5_creds **);
krb5_error_code __cdecl krb5_copy_data(krb5_context, const krb5_data *, krb5_data **);
krb5_error_code __cdecl krb5_copy_keyblock(krb5_context, const krb5_keyblock *, krb5_keyblock **);
krb5_error_code __cdecl krb5_copy_keyblock_contents(krb5_context, const krb5_keyblock *, krb5_keyblock *);
krb5_error_code __cdecl krb5_copy_principal(krb5_context, krb5_const_principal, krb5_principal *);
krb5_error_code __cdecl krb5_copy_ticket(krb5_context, const krb5_ticket *, krb5_ticket **);
krb5_error_code __cdecl krb5_decode_ticket(const krb5_data *code, krb5_ticket **rep);
krb5_error_code __cdecl krb5_decrypt(krb5_context context, krb5_const_pointer inptr, krb5_pointer outptr, size_t size, krb5_encrypt_block *eblock, krb5_pointer ivec);
krb5_error_code __cdecl krb5_deltat_to_string(krb5_deltat, char *, size_t);
krb5_enctype __cdecl krb5_eblock_enctype(krb5_context context, const krb5_encrypt_block *eblock);
krb5_error_code __cdecl krb5_encrypt(krb5_context context, krb5_const_pointer inptr, krb5_pointer outptr, size_t size, krb5_encrypt_block *eblock, krb5_pointer ivec);
size_t __cdecl krb5_encrypt_size(size_t length, krb5_enctype crypto);
krb5_error_code __cdecl krb5_enctype_to_string(krb5_enctype, char *, size_t);
krb5_error_code __cdecl krb5_finish_key(krb5_context context, krb5_encrypt_block *eblock);
krb5_error_code __cdecl krb5_finish_random_key(krb5_context context, const krb5_encrypt_block *eblock, krb5_pointer *ptr);
void __cdecl krb5_free_addresses(krb5_context, krb5_address **);
void __cdecl krb5_free_ap_rep_enc_part(krb5_context, krb5_ap_rep_enc_part *);
void __cdecl krb5_free_authdata(krb5_context, krb5_authdata **);
void __cdecl krb5_free_authenticator(krb5_context, krb5_authenticator *);
void __cdecl krb5_free_checksum(krb5_context, krb5_checksum *);
void __cdecl krb5_free_checksum_contents(krb5_context, krb5_checksum *);
void __cdecl krb5_free_cksumtypes(krb5_context, krb5_cksumtype *);
void __cdecl krb5_free_context(krb5_context);
void __cdecl krb5_free_cred_contents(krb5_context, krb5_creds *);
void __cdecl krb5_free_creds(krb5_context, krb5_creds *);
void __cdecl krb5_free_data(krb5_context, krb5_data *);
void __cdecl krb5_free_data_contents(krb5_context, krb5_data *);
void __cdecl krb5_free_default_realm(krb5_context, char *);
void __cdecl krb5_free_error(krb5_context, krb5_error *);
void __cdecl krb5_free_error_message(krb5_context, const char *);
krb5_error_code __cdecl krb5_free_host_realm(krb5_context, char *const *);
void __cdecl krb5_free_keyblock(krb5_context, krb5_keyblock *);
void __cdecl krb5_free_keyblock_contents(krb5_context, krb5_keyblock *);
krb5_error_code __cdecl krb5_free_keytab_entry_contents(krb5_context, krb5_keytab_entry *);
void __cdecl krb5_free_principal(krb5_context, krb5_principal);
void __cdecl krb5_free_tgt_creds(krb5_context, krb5_creds **);
void __cdecl krb5_free_ticket(krb5_context, krb5_ticket *);
void __cdecl krb5_free_unparsed_name(krb5_context, char *);
krb5_error_code __cdecl krb5_fwd_tgt_creds(krb5_context, krb5_auth_context, char *, krb5_principal, krb5_principal, krb5_ccache, int forwardable, krb5_data *);
krb5_error_code __cdecl krb5_get_credentials(krb5_context, krb5_flags, krb5_ccache, krb5_creds *, krb5_creds **);
krb5_error_code __cdecl krb5_get_credentials_renew(krb5_context, krb5_flags, krb5_ccache, krb5_creds *, krb5_creds **);
krb5_error_code __cdecl krb5_get_credentials_validate(krb5_context, krb5_flags, krb5_ccache, krb5_creds *, krb5_creds **);
krb5_error_code __cdecl krb5_get_default_realm(krb5_context, char **);
const char *__cdecl krb5_get_error_message(krb5_context, krb5_error_code);
krb5_error_code __cdecl krb5_get_fallback_host_realm(krb5_context, krb5_data *, char ***);
krb5_error_code __cdecl krb5_get_host_realm(krb5_context, const char *, char ***);
krb5_error_code __cdecl krb5_get_init_creds_keytab(krb5_context context, krb5_creds *creds, krb5_principal client, krb5_keytab arg_keytab, krb5_deltat start_time, char *in_tkt_service, krb5_get_init_creds_opt *k5_gic_options);
krb5_error_code __cdecl krb5_get_init_creds_opt_alloc(krb5_context context, krb5_get_init_creds_opt **opt);
void __cdecl krb5_get_init_creds_opt_free(krb5_context context, krb5_get_init_creds_opt *opt);
void __cdecl krb5_get_init_creds_opt_init(krb5_get_init_creds_opt *opt);
void __cdecl krb5_get_init_creds_opt_set_address_list(krb5_get_init_creds_opt *opt, krb5_address **addresses);
void __cdecl krb5_get_init_creds_opt_set_canonicalize(krb5_get_init_creds_opt *opt, int canonicalize);
void __cdecl krb5_get_init_creds_opt_set_change_password_prompt(krb5_get_init_creds_opt *opt, int prompt);
void __cdecl krb5_get_init_creds_opt_set_etype_list(krb5_get_init_creds_opt *opt, krb5_enctype *etype_list, int etype_list_length);
void __cdecl krb5_get_init_creds_opt_set_forwardable(krb5_get_init_creds_opt *opt, int forwardable);
krb5_error_code __cdecl krb5_get_init_creds_opt_set_pa(krb5_context context, krb5_get_init_creds_opt *opt, const char *attr, const char *value);
void __cdecl krb5_get_init_creds_opt_set_preauth_list(krb5_get_init_creds_opt *opt, krb5_preauthtype *preauth_list, int preauth_list_length);
krb5_error_code __cdecl krb5_get_init_creds_opt_set_process_last_req(krb5_context, krb5_get_init_creds_opt *, krb5_gic_process_last_req, void *);
void __cdecl krb5_get_init_creds_opt_set_proxiable(krb5_get_init_creds_opt *opt, int proxiable);
void __cdecl krb5_get_init_creds_opt_set_renew_life(krb5_get_init_creds_opt *opt, krb5_deltat renew_life);
void __cdecl krb5_get_init_creds_opt_set_salt(krb5_get_init_creds_opt *opt, krb5_data *salt);
void __cdecl krb5_get_init_creds_opt_set_tkt_life(krb5_get_init_creds_opt *opt, krb5_deltat tkt_life);
krb5_error_code __cdecl krb5_get_init_creds_password(krb5_context context, krb5_creds *creds, krb5_principal client, char *password, krb5_prompter_fct prompter, void *data, krb5_deltat start_time, char *in_tkt_service, krb5_get_init_creds_opt *k5_gic_options);
krb5_error_code __cdecl krb5_get_permitted_enctypes(krb5_context, krb5_enctype **);
krb5_error_code __cdecl krb5_get_profile(krb5_context, struct _profile_t **);
krb5_prompt_type *__cdecl krb5_get_prompt_types(krb5_context context);
krb5_error_code __cdecl krb5_get_renewed_creds(krb5_context context, krb5_creds *creds, krb5_principal client, krb5_ccache ccache, char *in_tkt_service);
krb5_error_code __cdecl krb5_get_server_rcache(krb5_context, const krb5_data *, krb5_rcache *);
krb5_error_code __cdecl krb5_get_time_offsets(krb5_context, krb5_timestamp *, krb5_int32 *);
krb5_error_code __cdecl krb5_get_validated_creds(krb5_context context, krb5_creds *creds, krb5_principal client, krb5_ccache ccache, char *in_tkt_service);
const gss_OID_desc krb5_gss_oid_array[];
OM_uint32 __cdecl krb5_gss_register_acceptor_identity(const char *);
krb5_error_code __cdecl krb5_init_context(krb5_context *);
krb5_error_code __cdecl krb5_init_keyblock(krb5_context, krb5_enctype enctype, size_t length, krb5_keyblock **out);
krb5_error_code __cdecl krb5_init_random_key(krb5_context context, const krb5_encrypt_block *eblock, const krb5_keyblock *keyblock, krb5_pointer *ptr);
krb5_error_code __cdecl krb5_init_secure_context(krb5_context *);
krb5_boolean __cdecl krb5_is_config_principal(krb5_context, krb5_const_principal);
krb5_boolean __cdecl krb5_is_referral_realm(const krb5_data *);
krb5_boolean krb5_is_thread_safe(void);
krb5_error_code __cdecl krb5_kt_add_entry(krb5_context, krb5_keytab, krb5_keytab_entry *);
krb5_error_code __cdecl krb5_kt_close(krb5_context context, krb5_keytab keytab);
krb5_error_code __cdecl krb5_kt_default(krb5_context, krb5_keytab *);
krb5_error_code __cdecl krb5_kt_default_name(krb5_context, char *, int);
krb5_error_code __cdecl krb5_kt_end_seq_get(krb5_context context, krb5_keytab keytab, krb5_kt_cursor *cursor);
krb5_error_code __cdecl krb5_kt_get_entry(krb5_context context, krb5_keytab keytab, krb5_const_principal principal, krb5_kvno vno, krb5_enctype enctype, krb5_keytab_entry *entry);
krb5_error_code __cdecl krb5_kt_get_name(krb5_context context, krb5_keytab keytab, char *name, unsigned int namelen);
const char *__cdecl krb5_kt_get_type(krb5_context, krb5_keytab keytab);
krb5_error_code __cdecl krb5_kt_next_entry(krb5_context context, krb5_keytab keytab, krb5_keytab_entry *entry, krb5_kt_cursor *cursor);
krb5_error_code __cdecl krb5_kt_read_service_key(krb5_context, krb5_pointer, krb5_principal, krb5_kvno, krb5_enctype, krb5_keyblock **);
krb5_error_code __cdecl krb5_kt_remove_entry(krb5_context, krb5_keytab, krb5_keytab_entry *);
krb5_error_code __cdecl krb5_kt_resolve(krb5_context, const char *, krb5_keytab *);
krb5_error_code __cdecl krb5_kt_start_seq_get(krb5_context context, krb5_keytab keytab, krb5_kt_cursor *cursor);
krb5_boolean __cdecl krb5_kuserok(krb5_context, krb5_principal, const char *);
krb5_error_code __cdecl krb5_mk_1cred(krb5_context, krb5_auth_context, krb5_creds *, krb5_data **, krb5_replay_data *);
krb5_error_code __cdecl krb5_mk_error(krb5_context, const krb5_error *, krb5_data *);
krb5_error_code __cdecl krb5_mk_ncred(krb5_context, krb5_auth_context, krb5_creds **, krb5_data **, krb5_replay_data *);
krb5_error_code __cdecl krb5_mk_priv(krb5_context, krb5_auth_context, const krb5_data *, krb5_data *, krb5_replay_data *);
krb5_error_code __cdecl krb5_mk_rep(krb5_context, krb5_auth_context, krb5_data *);
krb5_error_code __cdecl krb5_mk_req(krb5_context, krb5_auth_context *, krb5_flags, char *, char *, krb5_data *, krb5_ccache, krb5_data *);
krb5_error_code __cdecl krb5_mk_req_extended(krb5_context, krb5_auth_context *, krb5_flags, krb5_data *, krb5_creds *, krb5_data *);
krb5_error_code __cdecl krb5_mk_safe(krb5_context, krb5_auth_context, const krb5_data *, krb5_data *, krb5_replay_data *);
krb5_error_code __cdecl krb5_os_localaddr(krb5_context, krb5_address ***);
krb5_error_code __cdecl krb5_parse_name(krb5_context, const char *, krb5_principal *);
krb5_error_code __cdecl krb5_parse_name_flags(krb5_context, const char *, int, krb5_principal *);
krb5_error_code __cdecl krb5_principal2salt(krb5_context, krb5_const_principal, krb5_data *);
krb5_boolean __cdecl krb5_principal_compare(krb5_context, krb5_const_principal, krb5_const_principal);
krb5_error_code __cdecl krb5_process_key(krb5_context context, krb5_encrypt_block *eblock, const krb5_keyblock *key);
krb5_error_code __cdecl krb5_prompter_posix(krb5_context context, void *data, const char *name, const char *banner, int num_prompts, krb5_prompt prompts[]);
krb5_error_code __cdecl krb5_random_key(krb5_context context, const krb5_encrypt_block *eblock, krb5_pointer ptr, krb5_keyblock **keyblock);
krb5_error_code __cdecl krb5_rd_cred(krb5_context, krb5_auth_context, krb5_data *, krb5_creds ***, krb5_replay_data *);
krb5_error_code __cdecl krb5_rd_error(krb5_context, const krb5_data *, krb5_error **);
krb5_error_code __cdecl krb5_rd_priv(krb5_context, krb5_auth_context, const krb5_data *, krb5_data *, krb5_replay_data *);
krb5_error_code __cdecl krb5_rd_rep(krb5_context, krb5_auth_context, const krb5_data *, krb5_ap_rep_enc_part **);
krb5_error_code __cdecl krb5_rd_req(krb5_context, krb5_auth_context *, const krb5_data *, krb5_const_principal, krb5_keytab, krb5_flags *, krb5_ticket **);
krb5_error_code __cdecl krb5_rd_safe(krb5_context, krb5_auth_context, const krb5_data *, krb5_data *, krb5_replay_data *);
krb5_error_code __cdecl krb5_read_password(krb5_context, const char *, const char *, char *, unsigned int *);
krb5_boolean __cdecl krb5_realm_compare(krb5_context, krb5_const_principal, krb5_const_principal);
krb5_error_code __cdecl krb5_recvauth(krb5_context, krb5_auth_context *, krb5_pointer, char *, krb5_principal, krb5_int32, krb5_keytab, krb5_ticket **);
krb5_error_code __cdecl krb5_recvauth_version(krb5_context, krb5_auth_context *, krb5_pointer, krb5_principal, krb5_int32, krb5_keytab, krb5_ticket **, krb5_data *);
krb5_error_code __cdecl krb5_salttype_to_string(krb5_int32, char *, size_t);
krb5_error_code __cdecl krb5_sendauth(krb5_context, krb5_auth_context *, krb5_pointer, char *, krb5_principal, krb5_principal, krb5_flags, krb5_data *, krb5_creds *, krb5_ccache, krb5_error **, krb5_ap_rep_enc_part **, krb5_creds **);
krb5_error_code __cdecl krb5_server_decrypt_ticket_keytab(krb5_context context, const krb5_keytab kt, krb5_ticket *ticket);
krb5_error_code __cdecl krb5_set_default_realm(krb5_context, const char *);
krb5_error_code __cdecl krb5_set_default_tgs_enctypes(krb5_context, const krb5_enctype *);
void krb5_set_error_message(krb5_context, krb5_error_code, const char *, ...);
krb5_error_code __cdecl krb5_set_password(krb5_context context, krb5_creds *creds, char *newpw, krb5_principal change_password_for, int *result_code, krb5_data *result_code_string, krb5_data *result_string);
krb5_error_code __cdecl krb5_set_password_using_ccache(krb5_context context, krb5_ccache ccache, char *newpw, krb5_principal change_password_for, int *result_code, krb5_data *result_code_string, krb5_data *result_string);
krb5_error_code __cdecl krb5_set_principal_realm(krb5_context, krb5_principal, const char *);
krb5_error_code __cdecl krb5_set_real_time(krb5_context, krb5_timestamp, krb5_int32);
krb5_error_code __cdecl krb5_sname_to_principal(krb5_context, const char *, const char *, krb5_int32, krb5_principal *);
krb5_error_code __cdecl krb5_string_to_cksumtype(char *, krb5_cksumtype *);
krb5_error_code __cdecl krb5_string_to_deltat(char *, krb5_deltat *);
krb5_error_code __cdecl krb5_string_to_enctype(char *, krb5_enctype *);
krb5_error_code __cdecl krb5_string_to_key(krb5_context context, const krb5_encrypt_block *eblock, krb5_keyblock *keyblock, const krb5_data *data, const krb5_data *salt);
krb5_error_code __cdecl krb5_string_to_salttype(char *, krb5_int32 *);
krb5_error_code __cdecl krb5_string_to_timestamp(char *, krb5_timestamp *);
krb5_error_code __cdecl krb5_timeofday(krb5_context, krb5_timestamp *);
krb5_error_code __cdecl krb5_timestamp_to_sfstring(krb5_timestamp, char *, size_t, char *);
krb5_error_code __cdecl krb5_timestamp_to_string(krb5_timestamp, char *, size_t);
krb5_error_code __cdecl krb5_unparse_name(krb5_context, krb5_const_principal, char **);
krb5_error_code __cdecl krb5_unparse_name_ext(krb5_context, krb5_const_principal, char **, unsigned int *);
krb5_error_code __cdecl krb5_unparse_name_flags(krb5_context, krb5_const_principal, int, char **);
krb5_error_code __cdecl krb5_unparse_name_flags_ext(krb5_context, krb5_const_principal, int, char **, unsigned int *);
krb5_error_code __cdecl krb5_us_timeofday(krb5_context, krb5_timestamp *, krb5_int32 *);
krb5_error_code __cdecl krb5_use_enctype(krb5_context context, krb5_encrypt_block *eblock, krb5_enctype enctype);
krb5_error_code __cdecl krb5_verify_checksum(krb5_context context, krb5_cksumtype ctype, const krb5_checksum *cksum, krb5_const_pointer in, size_t in_length, krb5_const_pointer seed, size_t seed_length);
krb5_error_code __cdecl krb5_verify_init_creds(krb5_context context, krb5_creds *creds, krb5_principal ap_req_server, krb5_keytab ap_req_keytab, krb5_ccache *ccache, krb5_verify_init_creds_opt *k5_vic_options);
void __cdecl krb5_verify_init_creds_opt_init(krb5_verify_init_creds_opt *k5_vic_options);
void __cdecl krb5_verify_init_creds_opt_set_ap_req_nofail(krb5_verify_init_creds_opt *k5_vic_options, int ap_req_nofail);
void __cdecl krb5_vset_error_message(krb5_context, krb5_error_code, const char *, va_list);
int __cdecl krpc_call(struct sockaddr_in *sin, u_int sotype, u_int prog, u_int vers, u_int func, mbuf_t *data, struct sockaddr_in *from);
int __cdecl krpc_portmap(struct sockaddr_in *sin, u_int prog, u_int vers, u_int proto, u_int16_t *portp);
char *__cdecl l64a(__int64);
__int64 __cdecl labs(__int64);
int lastAddrAge;
launch_data_t __cdecl launch_data_alloc(launch_data_type_t);
size_t __cdecl launch_data_array_get_count(const launch_data_t);
launch_data_t __cdecl launch_data_array_get_index(const launch_data_t, size_t);
bool __cdecl launch_data_array_set_index(launch_data_t, const launch_data_t, size_t);
launch_data_t __cdecl launch_data_copy(launch_data_t);
size_t __cdecl launch_data_dict_get_count(const launch_data_t);
bool __cdecl launch_data_dict_insert(launch_data_t, const launch_data_t, const char *);
void __cdecl launch_data_dict_iterate(const launch_data_t, void (__cdecl *)(const launch_data_t, const char *, void *), void *);
launch_data_t __cdecl launch_data_dict_lookup(const launch_data_t, const char *);
bool __cdecl launch_data_dict_remove(launch_data_t, const char *);
void __cdecl launch_data_free(launch_data_t);
bool __cdecl launch_data_get_bool(const launch_data_t);
int __cdecl launch_data_get_errno(const launch_data_t);
int __cdecl launch_data_get_fd(const launch_data_t);
__int64 __cdecl launch_data_get_integer(const launch_data_t);
mach_port_t __cdecl launch_data_get_machport(const launch_data_t);
void *__cdecl launch_data_get_opaque(const launch_data_t);
size_t __cdecl launch_data_get_opaque_size(const launch_data_t);
double __cdecl launch_data_get_real(const launch_data_t);
const char *__cdecl launch_data_get_string(const launch_data_t);
launch_data_type_t __cdecl launch_data_get_type(const launch_data_t);
launch_data_t __cdecl launch_data_new_bool(bool);
launch_data_t __cdecl launch_data_new_fd(int);
launch_data_t __cdecl launch_data_new_integer(__int64);
launch_data_t __cdecl launch_data_new_machport(mach_port_t);
launch_data_t __cdecl launch_data_new_opaque(const void *, size_t);
launch_data_t __cdecl launch_data_new_real(double);
launch_data_t __cdecl launch_data_new_string(const char *);
bool __cdecl launch_data_set_bool(launch_data_t, bool);
bool __cdecl launch_data_set_fd(launch_data_t, int);
bool __cdecl launch_data_set_integer(launch_data_t, __int64);
bool __cdecl launch_data_set_machport(launch_data_t, mach_port_t);
bool __cdecl launch_data_set_opaque(launch_data_t, const void *, size_t);
bool __cdecl launch_data_set_real(launch_data_t, double);
bool __cdecl launch_data_set_string(launch_data_t, const char *);
int launch_get_fd(void);
launch_data_t __cdecl launch_msg(const launch_data_t);
int __cdecl lchflags(const char *, __uint32_t);
int __cdecl lchmod(const char *, mode_t);
int __cdecl lchown(const char *, uid_t, gid_t);
void __cdecl lcong48(unsigned __int16[7]);
int __cdecl ldap_X509dn2bv(void *x509_name, struct berval *dn, LDAPDN_rewrite_func *func, unsigned int flags);
int __cdecl ldap_abandon(LDAP *ld, int msgid);
int __cdecl ldap_abandon_ext(LDAP *ld, int msgid, LDAPControl **serverctrls, LDAPControl **clientctrls);
int __cdecl ldap_add(LDAP *ld, const char *dn, LDAPMod **attrs);
int __cdecl ldap_add_ext(LDAP *ld, const char *dn, LDAPMod **attrs, LDAPControl **serverctrls, LDAPControl **clientctrls, int *msgidp);
int __cdecl ldap_add_ext_s(LDAP *ld, const char *dn, LDAPMod **attrs, LDAPControl **serverctrls, LDAPControl **clientctrls);
void __cdecl ldap_add_result_entry(LDAPMessage **list, LDAPMessage *e);
int __cdecl ldap_add_s(LDAP *ld, const char *dn, LDAPMod **attrs);
struct berval *__cdecl ldap_attributetype2bv(LDAPAttributeType *at, struct berval *bv);
const char *__cdecl ldap_attributetype2name(LDAPAttributeType *at);
char *__cdecl ldap_attributetype2str(LDAPAttributeType *at);
void __cdecl ldap_attributetype_free(LDAPAttributeType *at);
int __cdecl ldap_bind(LDAP *ld, const char *who, const char *passwd, int authmethod);
int __cdecl ldap_bind_s(LDAP *ld, const char *who, const char *cred, int authmethod);
int __cdecl ldap_bv2dn(struct berval *bv, LDAPDN *dn, unsigned int flags);
int __cdecl ldap_bv2escaped_filter_value(struct berval *in, struct berval *out);
int __cdecl ldap_bv2rdn(struct berval *bv, LDAPRDN *rdn, char **next, unsigned int flags);
int __cdecl ldap_cancel(LDAP *ld, int cancelid, LDAPControl **sctrls, LDAPControl **cctrls, int *msgidp);
int __cdecl ldap_cancel_s(LDAP *ld, int cancelid, LDAPControl **sctrl, LDAPControl **cctrl);
int __cdecl ldap_compare(LDAP *ld, const char *dn, const char *attr, const char *value);
int __cdecl ldap_compare_ext(LDAP *ld, const char *dn, const char *attr, struct berval *bvalue, LDAPControl **serverctrls, LDAPControl **clientctrls, int *msgidp);
int __cdecl ldap_compare_ext_s(LDAP *ld, const char *dn, const char *attr, struct berval *bvalue, LDAPControl **serverctrls, LDAPControl **clientctrls);
int __cdecl ldap_compare_s(LDAP *ld, const char *dn, const char *attr, const char *value);
struct berval *__cdecl ldap_contentrule2bv(LDAPContentRule *cr, struct berval *bv);
const char *__cdecl ldap_contentrule2name(LDAPContentRule *cr);
char *__cdecl ldap_contentrule2str(LDAPContentRule *cr);
void __cdecl ldap_contentrule_free(LDAPContentRule *cr);
int __cdecl ldap_control_create(const char *requestOID, int iscritical, struct berval *value, int dupval, LDAPControl **ctrlp);
LDAPControl *__cdecl ldap_control_dup(const LDAPControl *c);
LDAPControl *__cdecl ldap_control_find(const char *oid, LDAPControl **ctrls, LDAPControl ***nextctrlp);
void __cdecl ldap_control_free(LDAPControl *ctrl);
LDAPControl **__cdecl ldap_controls_dup(LDAPControl *const *controls);
void __cdecl ldap_controls_free(LDAPControl **ctrls);
int __cdecl ldap_count_entries(LDAP *ld, LDAPMessage *chain);
int __cdecl ldap_count_messages(LDAP *ld, LDAPMessage *chain);
int __cdecl ldap_count_references(LDAP *ld, LDAPMessage *chain);
int __cdecl ldap_count_values(char **vals);
int __cdecl ldap_count_values_len(struct berval **vals);
int __cdecl ldap_create(LDAP **ldp);
int __cdecl ldap_create_assertion_control(LDAP *ld, char *filter, int iscritical, LDAPControl **ctrlp);
int __cdecl ldap_create_assertion_control_value(LDAP *ld, char *assertion, struct berval *value);
int __cdecl ldap_create_control(const char *requestOID, BerElement *ber, int iscritical, LDAPControl **ctrlp);
int __cdecl ldap_create_deref_control(LDAP *ld, LDAPDerefSpec *ds, int iscritical, LDAPControl **ctrlp);
int __cdecl ldap_create_deref_control_value(LDAP *ld, LDAPDerefSpec *ds, struct berval *value);
int __cdecl ldap_create_page_control(LDAP *ld, ber_int_t pagesize, struct berval *cookie, int iscritical, LDAPControl **ctrlp);
int __cdecl ldap_create_page_control_value(LDAP *ld, ber_int_t pagesize, struct berval *cookie, struct berval *value);
int __cdecl ldap_create_passwordpolicy_control(LDAP *ld, LDAPControl **ctrlp);
int __cdecl ldap_create_sort_control(LDAP *ld, LDAPSortKey **keyList, int iscritical, LDAPControl **ctrlp);
int __cdecl ldap_create_sort_control_value(LDAP *ld, LDAPSortKey **keyList, struct berval *value);
int __cdecl ldap_create_sort_keylist(LDAPSortKey ***sortKeyList, char *keyString);
int __cdecl ldap_create_vlv_control(LDAP *ld, LDAPVLVInfo *ldvlistp, LDAPControl **ctrlp);
int __cdecl ldap_create_vlv_control_value(LDAP *ld, LDAPVLVInfo *ldvlistp, struct berval *value);
char *__cdecl ldap_dcedn2dn(const char *dce);
int __cdecl ldap_delete(LDAP *ld, const char *dn);
int __cdecl ldap_delete_ext(LDAP *ld, const char *dn, LDAPControl **serverctrls, LDAPControl **clientctrls, int *msgidp);
int __cdecl ldap_delete_ext_s(LDAP *ld, const char *dn, LDAPControl **serverctrls, LDAPControl **clientctrls);
LDAPMessage *__cdecl ldap_delete_result_entry(LDAPMessage **list, LDAPMessage *e);
int __cdecl ldap_delete_s(LDAP *ld, const char *dn);
void __cdecl ldap_derefresponse_free(LDAPDerefRes *dr);
char *__cdecl ldap_dn2ad_canonical(const char *dn);
int __cdecl ldap_dn2bv(LDAPDN dn, struct berval *bv, unsigned int flags);
char *__cdecl ldap_dn2dcedn(const char *dn);
int __cdecl ldap_dn2domain(const char *dn, char **domain);
int __cdecl ldap_dn2str(LDAPDN dn, char **str, unsigned int flags);
char *__cdecl ldap_dn2ufn(const char *dn);
int __cdecl ldap_dn_normalize(const char *in, unsigned int iflags, char **out, unsigned int oflags);
void __cdecl ldap_dnfree(LDAPDN dn);
int __cdecl ldap_domain2dn(const char *domain, char **dn);
int __cdecl ldap_domain2hostlist(const char *domain, char **hostlist);
char *__cdecl ldap_err2string(int err);
char **__cdecl ldap_explode_dn(const char *dn, int notypes);
char **__cdecl ldap_explode_rdn(const char *rdn, int notypes);
int __cdecl ldap_extended_operation(LDAP *ld, const char *reqoid, struct berval *reqdata, LDAPControl **serverctrls, LDAPControl **clientctrls, int *msgidp);
int __cdecl ldap_extended_operation_s(LDAP *ld, const char *reqoid, struct berval *reqdata, LDAPControl **serverctrls, LDAPControl **clientctrls, char **retoidp, struct berval **retdatap);
LDAPControl *__cdecl ldap_find_control(const char *oid, LDAPControl **ctrls);
char *__cdecl ldap_first_attribute(LDAP *ld, LDAPMessage *entry, BerElement **ber);
LDAPMessage *__cdecl ldap_first_entry(LDAP *ld, LDAPMessage *chain);
LDAPMessage *__cdecl ldap_first_message(LDAP *ld, LDAPMessage *chain);
LDAPMessage *__cdecl ldap_first_reference(LDAP *ld, LDAPMessage *chain);
void __cdecl ldap_free_sort_keylist(LDAPSortKey **sortkeylist);
void __cdecl ldap_free_urldesc(LDAPURLDesc *ludp);
int __cdecl ldap_get_attribute_ber(LDAP *ld, LDAPMessage *e, BerElement *ber, struct berval *attr, struct berval **vals);
char *__cdecl ldap_get_dn(LDAP *ld, LDAPMessage *entry);
int __cdecl ldap_get_dn_ber(LDAP *ld, LDAPMessage *e, BerElement **berout, struct berval *dn);
int __cdecl ldap_get_entry_controls(LDAP *ld, LDAPMessage *entry, LDAPControl ***serverctrls);
int __cdecl ldap_get_option(LDAP *ld, int option, void *outvalue);
char **__cdecl ldap_get_values(LDAP *ld, LDAPMessage *entry, const char *target);
struct berval **__cdecl ldap_get_values_len(LDAP *ld, LDAPMessage *entry, const char *target);
int __cdecl ldap_gssapi_bind(LDAP *ld, const char *dn, const char *creds);
int __cdecl ldap_gssapi_bind_s(LDAP *ld, const char *dn, const char *creds);
LDAP *__cdecl ldap_init(const char *host, int port);
int __cdecl ldap_initialize(LDAP **ldp, const char *url);
int __cdecl ldap_install_tls(LDAP *ld);
int __cdecl ldap_is_ldap_url(const char *url);
int __cdecl ldap_is_ldapi_url(const char *url);
int __cdecl ldap_is_ldaps_url(const char *url);
struct berval *__cdecl ldap_matchingrule2bv(LDAPMatchingRule *mr, struct berval *bv);
const char *__cdecl ldap_matchingrule2name(LDAPMatchingRule *mr);
char *__cdecl ldap_matchingrule2str(LDAPMatchingRule *mr);
void __cdecl ldap_matchingrule_free(LDAPMatchingRule *mr);
struct berval *__cdecl ldap_matchingruleuse2bv(LDAPMatchingRuleUse *mru, struct berval *bv);
const char *__cdecl ldap_matchingruleuse2name(LDAPMatchingRuleUse *mru);
char *__cdecl ldap_matchingruleuse2str(LDAPMatchingRuleUse *mru);
void __cdecl ldap_matchingruleuse_free(LDAPMatchingRuleUse *mr);
void *__cdecl ldap_memalloc(ber_len_t s);
void *__cdecl ldap_memcalloc(ber_len_t n, ber_len_t s);
void __cdecl ldap_memfree(void *p);
void *__cdecl ldap_memrealloc(void *p, ber_len_t s);
void __cdecl ldap_memvfree(void **v);
int __cdecl ldap_modify(LDAP *ld, const char *dn, LDAPMod **mods);
int __cdecl ldap_modify_ext(LDAP *ld, const char *dn, LDAPMod **mods, LDAPControl **serverctrls, LDAPControl **clientctrls, int *msgidp);
int __cdecl ldap_modify_ext_s(LDAP *ld, const char *dn, LDAPMod **mods, LDAPControl **serverctrls, LDAPControl **clientctrls);
int __cdecl ldap_modify_s(LDAP *ld, const char *dn, LDAPMod **mods);
int __cdecl ldap_modrdn(LDAP *ld, const char *dn, const char *newrdn);
int __cdecl ldap_modrdn2(LDAP *ld, const char *dn, const char *newrdn, int deleteoldrdn);
int __cdecl ldap_modrdn2_s(LDAP *ld, const char *dn, const char *newrdn, int deleteoldrdn);
int __cdecl ldap_modrdn_s(LDAP *ld, const char *dn, const char *newrdn);
void __cdecl ldap_mods_free(LDAPMod **mods, int freemods);
int __cdecl ldap_msgdelete(LDAP *ld, int msgid);
int __cdecl ldap_msgfree(LDAPMessage *lm);
int __cdecl ldap_msgid(LDAPMessage *lm);
int __cdecl ldap_msgtype(LDAPMessage *lm);
struct berval *__cdecl ldap_nameform2bv(LDAPNameForm *nf, struct berval *bv);
const char *__cdecl ldap_nameform2name(LDAPNameForm *nf);
char *__cdecl ldap_nameform2str(LDAPNameForm *nf);
void __cdecl ldap_nameform_free(LDAPNameForm *nf);
char *__cdecl ldap_next_attribute(LDAP *ld, LDAPMessage *entry, BerElement *ber);
LDAPMessage *__cdecl ldap_next_entry(LDAP *ld, LDAPMessage *entry);
LDAPMessage *__cdecl ldap_next_message(LDAP *ld, LDAPMessage *msg);
LDAPMessage *__cdecl ldap_next_reference(LDAP *ld, LDAPMessage *ref);
struct berval *__cdecl ldap_objectclass2bv(LDAPObjectClass *oc, struct berval *bv);
const char *__cdecl ldap_objectclass2name(LDAPObjectClass *oc);
char *__cdecl ldap_objectclass2str(LDAPObjectClass *oc);
void __cdecl ldap_objectclass_free(LDAPObjectClass *oc);
LDAP *__cdecl ldap_open(const char *host, int port);
int __cdecl ldap_parse_deref_control(LDAP *ld, LDAPControl **ctrls, LDAPDerefRes **drp);
int __cdecl ldap_parse_derefresponse_control(LDAP *ld, LDAPControl *ctrl, LDAPDerefRes **drp);
int __cdecl ldap_parse_extended_result(LDAP *ld, LDAPMessage *res, char **retoidp, struct berval **retdatap, int freeit);
int __cdecl ldap_parse_intermediate(LDAP *ld, LDAPMessage *res, char **retoidp, struct berval **retdatap, LDAPControl ***serverctrls, int freeit);
int __cdecl ldap_parse_page_control(LDAP *ld, LDAPControl **ctrls, ber_int_t *count, struct berval **cookie);
int __cdecl ldap_parse_pageresponse_control(LDAP *ld, LDAPControl *ctrl, ber_int_t *count, struct berval *cookie);
int __cdecl ldap_parse_passwd(LDAP *ld, LDAPMessage *res, struct berval *newpasswd);
int __cdecl ldap_parse_passwordpolicy_control(LDAP *ld, LDAPControl *ctrl, ber_int_t *expirep, ber_int_t *gracep, LDAPPasswordPolicyError *errorp);
int __cdecl ldap_parse_reference(LDAP *ld, LDAPMessage *ref, char ***referralsp, LDAPControl ***serverctrls, int freeit);
int __cdecl ldap_parse_refresh(LDAP *ld, LDAPMessage *res, ber_int_t *newttl);
int __cdecl ldap_parse_result(LDAP *ld, LDAPMessage *res, int *errcodep, char **matcheddnp, char **errmsgp, char ***referralsp, LDAPControl ***serverctrls, int freeit);
int __cdecl ldap_parse_sasl_bind_result(LDAP *ld, LDAPMessage *res, struct berval **servercredp, int freeit);
int __cdecl ldap_parse_sort_control(LDAP *ld, LDAPControl **ctrlp, unsigned __int64 *result, char **attribute);
int __cdecl ldap_parse_sortresponse_control(LDAP *ld, LDAPControl *ctrl, ber_int_t *result, char **attribute);
int __cdecl ldap_parse_vlv_control(LDAP *ld, LDAPControl **ctrls, unsigned __int64 *target_posp, unsigned __int64 *list_countp, struct berval **contextp, int *errcodep);
int __cdecl ldap_parse_vlvresponse_control(LDAP *ld, LDAPControl *ctrls, ber_int_t *target_posp, ber_int_t *list_countp, struct berval **contextp, int *errcodep);
int __cdecl ldap_parse_whoami(LDAP *ld, LDAPMessage *res, struct berval **authzid);
int __cdecl ldap_passwd(LDAP *ld, struct berval *user, struct berval *oldpw, struct berval *newpw, LDAPControl **sctrls, LDAPControl **cctrls, int *msgidp);
int __cdecl ldap_passwd_s(LDAP *ld, struct berval *user, struct berval *oldpw, struct berval *newpw, struct berval *newpasswd, LDAPControl **sctrls, LDAPControl **cctrls);
const char *__cdecl ldap_passwordpolicy_err2txt(LDAPPasswordPolicyError);
void __cdecl ldap_perror(LDAP *ld, const char *s);
int __cdecl ldap_put_vrFilter(BerElement *ber, const char *vrf);
int __cdecl ldap_rdn2bv(LDAPRDN rdn, struct berval *bv, unsigned int flags);
int __cdecl ldap_rdn2str(LDAPRDN rdn, char **str, unsigned int flags);
void __cdecl ldap_rdnfree(LDAPRDN rdn);
int __cdecl ldap_refresh(LDAP *ld, struct berval *dn, ber_int_t ttl, LDAPControl **sctrls, LDAPControl **cctrls, int *msgidp);
int __cdecl ldap_refresh_s(LDAP *ld, struct berval *dn, ber_int_t ttl, ber_int_t *newttl, LDAPControl **sctrls, LDAPControl **cctrls);
int __cdecl ldap_rename(LDAP *ld, const char *dn, const char *newrdn, const char *newSuperior, int deleteoldrdn, LDAPControl **sctrls, LDAPControl **cctrls, int *msgidp);
int __cdecl ldap_rename2(LDAP *ld, const char *dn, const char *newrdn, const char *newSuperior, int deleteoldrdn);
int __cdecl ldap_rename2_s(LDAP *ld, const char *dn, const char *newrdn, const char *newSuperior, int deleteoldrdn);
int __cdecl ldap_rename_s(LDAP *ld, const char *dn, const char *newrdn, const char *newSuperior, int deleteoldrdn, LDAPControl **sctrls, LDAPControl **cctrls);
int __cdecl ldap_result(LDAP *ld, int msgid, int all, struct timeval *timeout, LDAPMessage **result);
int __cdecl ldap_result2error(LDAP *ld, LDAPMessage *r, int freeit);
int __cdecl ldap_sasl_bind(LDAP *ld, const char *dn, const char *mechanism, struct berval *cred, LDAPControl **serverctrls, LDAPControl **clientctrls, int *msgidp);
int __cdecl ldap_sasl_bind_s(LDAP *ld, const char *dn, const char *mechanism, struct berval *cred, LDAPControl **serverctrls, LDAPControl **clientctrls, struct berval **servercredp);
int __cdecl ldap_sasl_interactive_bind_s(LDAP *ld, const char *dn, const char *saslMechanism, LDAPControl **serverControls, LDAPControl **clientControls, unsigned int flags, LDAP_SASL_INTERACT_PROC *proc, void *defaults);
char *__cdecl ldap_scherr2str(int code);
int __cdecl ldap_search(LDAP *ld, const char *base, int scope, const char *filter, char **attrs, int attrsonly);
int __cdecl ldap_search_ext(LDAP *ld, const char *base, int scope, const char *filter, char **attrs, int attrsonly, LDAPControl **serverctrls, LDAPControl **clientctrls, struct timeval *timeout, int sizelimit, int *msgidp);
int __cdecl ldap_search_ext_s(LDAP *ld, const char *base, int scope, const char *filter, char **attrs, int attrsonly, LDAPControl **serverctrls, LDAPControl **clientctrls, struct timeval *timeout, int sizelimit, LDAPMessage **res);
int __cdecl ldap_search_s(LDAP *ld, const char *base, int scope, const char *filter, char **attrs, int attrsonly, LDAPMessage **res);
int __cdecl ldap_search_st(LDAP *ld, const char *base, int scope, const char *filter, char **attrs, int attrsonly, struct timeval *timeout, LDAPMessage **res);
int __cdecl ldap_set_nextref_proc(LDAP *ld, LDAP_NEXTREF_PROC *nextref_proc, void *params);
int __cdecl ldap_set_option(LDAP *ld, int option, const void *invalue);
int __cdecl ldap_set_rebind_proc(LDAP *ld, LDAP_REBIND_PROC *rebind_proc, void *params);
int __cdecl ldap_set_urllist_proc(LDAP *ld, LDAP_URLLIST_PROC *urllist_proc, void *params);
int __cdecl ldap_simple_bind(LDAP *ld, const char *who, const char *passwd);
int __cdecl ldap_simple_bind_s(LDAP *ld, const char *who, const char *passwd);
int __cdecl ldap_sort_entries(LDAP *ld, LDAPMessage **chain, const char *attr, LDAP_SORT_AD_CMP_PROC *cmp);
int __cdecl ldap_sort_strcasecmp(const void *a, const void *b);
int __cdecl ldap_sort_values(LDAP *ld, char **vals, LDAP_SORT_AV_CMP_PROC *cmp);
int __cdecl ldap_start_tls(LDAP *ld, LDAPControl **serverctrls, LDAPControl **clientctrls, int *msgidp);
int __cdecl ldap_start_tls_s(LDAP *ld, LDAPControl **serverctrls, LDAPControl **clientctrls);
LDAPAttributeType *__cdecl ldap_str2attributetype(const char *s, int *code, const char **errp, const unsigned int flags);
LDAPContentRule *__cdecl ldap_str2contentrule(const char *s, int *code, const char **errp, const unsigned int flags);
int __cdecl ldap_str2dn(const char *str, LDAPDN *dn, unsigned int flags);
LDAPMatchingRule *__cdecl ldap_str2matchingrule(const char *s, int *code, const char **errp, const unsigned int flags);
LDAPMatchingRuleUse *__cdecl ldap_str2matchingruleuse(const char *s, int *code, const char **errp, const unsigned int flags);
LDAPNameForm *__cdecl ldap_str2nameform(const char *s, int *code, const char **errp, const unsigned int flags);
LDAPObjectClass *__cdecl ldap_str2objectclass(const char *s, int *code, const char **errp, const unsigned int flags);
int __cdecl ldap_str2rdn(const char *str, LDAPRDN *rdn, char **next, unsigned int flags);
LDAPStructureRule *__cdecl ldap_str2structurerule(const char *s, int *code, const char **errp, const unsigned int flags);
LDAPSyntax *__cdecl ldap_str2syntax(const char *s, int *code, const char **errp, const unsigned int flags);
char *__cdecl ldap_strdup(const char *);
struct berval *__cdecl ldap_structurerule2bv(LDAPStructureRule *sr, struct berval *bv);
const char *__cdecl ldap_structurerule2name(LDAPStructureRule *sr);
char *__cdecl ldap_structurerule2str(LDAPStructureRule *sr);
void __cdecl ldap_structurerule_free(LDAPStructureRule *sr);
void __cdecl ldap_sync_destroy(ldap_sync_t *ls, int freeit);
int __cdecl ldap_sync_init(ldap_sync_t *ls, int mode);
int __cdecl ldap_sync_init_refresh_and_persist(ldap_sync_t *ls);
int __cdecl ldap_sync_init_refresh_only(ldap_sync_t *ls);
ldap_sync_t *__cdecl ldap_sync_initialize(ldap_sync_t *ls);
int __cdecl ldap_sync_poll(ldap_sync_t *ls);
struct berval *__cdecl ldap_syntax2bv(LDAPSyntax *syn, struct berval *bv);
const char *__cdecl ldap_syntax2name(LDAPSyntax *syn);
char *__cdecl ldap_syntax2str(LDAPSyntax *syn);
void __cdecl ldap_syntax_free(LDAPSyntax *syn);
int __cdecl ldap_tls_inplace(LDAP *ld);
int __cdecl ldap_turn(LDAP *ld, int mutual, const char *identifier, LDAPControl **sctrls, LDAPControl **cctrls, int *msgidp);
int __cdecl ldap_turn_s(LDAP *ld, int mutual, const char *identifier, LDAPControl **sctrl, LDAPControl **cctrl);
int __cdecl ldap_unbind(LDAP *ld);
int __cdecl ldap_unbind_ext(LDAP *ld, LDAPControl **serverctrls, LDAPControl **clientctrls);
int __cdecl ldap_unbind_ext_s(LDAP *ld, LDAPControl **serverctrls, LDAPControl **clientctrls);
int __cdecl ldap_unbind_s(LDAP *ld);
char *__cdecl ldap_url_desc2str(LDAPURLDesc *ludp);
int __cdecl ldap_url_parse(const char *url, LDAPURLDesc **ludpp);
void __cdecl ldap_value_free(char **vals);
void __cdecl ldap_value_free_len(struct berval **vals);
int __cdecl ldap_whoami(LDAP *ld, LDAPControl **sctrls, LDAPControl **cctrls, int *msgidp);
int __cdecl ldap_whoami_s(LDAP *ld, struct berval **authzid, LDAPControl **sctrls, LDAPControl **cctrls);
int __cdecl ldap_x_mb_to_utf8(char *utf8char, const char *mbchar, size_t mbsize, int (__cdecl *ldap_f_mbtowc)(wchar_t *wchar, const char *mbchar, size_t count));
int __cdecl ldap_x_mbs_to_utf8s(char *utf8str, const char *mbstr, size_t count, size_t (__cdecl *ldap_f_mbstowcs)(wchar_t *wcstr, const char *mbstr, size_t count));
int __cdecl ldap_x_ucs4_to_utf8(ldap_ucs4_t c, char *buf);
int __cdecl ldap_x_utf8_to_mb(char *mbchar, const char *utf8char, int (__cdecl *ldap_f_wctomb)(char *mbchar, wchar_t wchar));
ldap_ucs4_t __cdecl ldap_x_utf8_to_ucs4(const char *p);
int __cdecl ldap_x_utf8_to_wc(wchar_t *wchar, const char *utf8char);
int __cdecl ldap_x_utf8s_to_mbs(char *mbstr, const char *utf8str, size_t count, size_t (__cdecl *ldap_f_wcstombs)(char *mbstr, const wchar_t *wcstr, size_t count));
int __cdecl ldap_x_utf8s_to_wcs(wchar_t *wcstr, const char *utf8str, size_t count);
int __cdecl ldap_x_wc_to_utf8(char *utf8char, wchar_t wchar, size_t count);
int __cdecl ldap_x_wcs_to_utf8s(char *utf8str, const wchar_t *wcstr, size_t count);
double __cdecl ldexp(double, int);
float __cdecl ldexpf(float, int);
long double __cdecl ldexpl(long double, int);
ldiv_t __cdecl ldiv(__int64, __int64);
int __cdecl leaveok(WINDOW *, bool);
kern_return_t __cdecl ledger_create(ledger_t parent_ledger, ledger_t ledger_ledger, ledger_t *new_ledger, ledger_item_t transfer);
kern_return_t __cdecl ledger_read(ledger_t ledger, ledger_item_t *balance, ledger_item_t *limit);
kern_return_t __cdecl ledger_terminate(ledger_t ledger);
kern_return_t __cdecl ledger_transfer(ledger_t parent_ledger, ledger_t child_ledger, ledger_item_t transfer);
void *__cdecl lfind(const void *, const void *, size_t *, size_t, int (__cdecl *)(const void *, const void *));
double __cdecl lgamma(double);
float __cdecl lgammaf(float);
long double __cdecl lgammal(long double);
void *__cdecl lh_delete(LHASH *lh, const void *data);
void __cdecl lh_doall(LHASH *lh, LHASH_DOALL_FN_TYPE func);
void __cdecl lh_doall_arg(LHASH *lh, LHASH_DOALL_ARG_FN_TYPE func, void *arg);
void __cdecl lh_free(LHASH *lh);
void *__cdecl lh_insert(LHASH *lh, void *data);
LHASH *__cdecl lh_new(LHASH_HASH_FN_TYPE h, LHASH_COMP_FN_TYPE c);
void __cdecl lh_node_stats(const LHASH *lh, FILE *out);
void __cdecl lh_node_stats_bio(const LHASH *lh, BIO *out);
void __cdecl lh_node_usage_stats(const LHASH *lh, FILE *out);
void __cdecl lh_node_usage_stats_bio(const LHASH *lh, BIO *out);
unsigned __int64 __cdecl lh_num_items(const LHASH *lh);
void *__cdecl lh_retrieve(LHASH *lh, const void *data);
void __cdecl lh_stats(const LHASH *lh, FILE *out);
void __cdecl lh_stats_bio(const LHASH *lh, BIO *out);
unsigned __int64 __cdecl lh_strhash(const char *c);
void __cdecl libcharset_set_relocation_prefix(const char *orig_prefix, const char *curr_prefix);
void __cdecl libiconv_set_relocation_prefix(const char *, const char *);
int __cdecl link(const char *, const char *);
void __cdecl link_addr(const char *, struct sockaddr_dl *);
FIELD *__cdecl link_field(FIELD *, int, int);
FIELDTYPE *__cdecl link_fieldtype(FIELDTYPE *, FIELDTYPE *);
char *__cdecl link_ntoa(const struct sockaddr_dl *);
int __cdecl lio_listio(int mode, struct aiocb *const aiocblist[], int nent, struct sigevent *sigp);
int __cdecl listen(int, int);
ssize_t __cdecl listxattr(const char *path, char *namebuff, size_t size, int options);
__int64 __cdecl llabs(__int64);
lldiv_t __cdecl lldiv(__int64, __int64);
__int64 __cdecl llrint(double);
__int64 __cdecl llrintf(float);
__int64 __cdecl llrintl(long double);
__int64 __cdecl llround(double);
__int64 __cdecl llroundf(float);
__int64 __cdecl llroundl(long double);
const char *locale_charset(void);
struct lconv *localeconv(void);
struct lconv *__cdecl localeconv_l(locale_t);
struct tm *__cdecl localtime(const time_t *);
struct tm *__cdecl localtime_r(const time_t *, struct tm *);
kern_return_t __cdecl lock_acquire(lock_set_t lock_set, int lock_id);
kern_return_t __cdecl lock_handoff(lock_set_t lock_set, int lock_id);
kern_return_t __cdecl lock_handoff_accept(lock_set_t lock_set, int lock_id);
kern_return_t __cdecl lock_make_stable(lock_set_t lock_set, int lock_id);
kern_return_t __cdecl lock_release(lock_set_t lock_set, int lock_id);
kern_return_t __cdecl lock_set_create(task_t task, lock_set_t *new_lock_set, int n_ulocks, int policy);
kern_return_t __cdecl lock_set_destroy(task_t task, lock_set_t lock_set);
kern_return_t __cdecl lock_try(lock_set_t lock_set, int lock_id);
int __cdecl lockf(int, int, off_t);
double __cdecl log(double);
double __cdecl log10(double);
float __cdecl log10f(float);
long double __cdecl log10l(long double);
double __cdecl log1p(double);
float __cdecl log1pf(float);
long double __cdecl log1pl(long double);
double __cdecl log2(double);
float __cdecl log2f(float);
long double __cdecl log2l(long double);
int log_addresses;
NetsnmpLogHandler log_handler_callback;
NetsnmpLogHandler log_handler_file;
NetsnmpLogHandler log_handler_null;
NetsnmpLogHandler log_handler_stdouterr;
NetsnmpLogHandler log_handler_syslog;
int log_leaks;
double __cdecl logb(double);
float __cdecl logbf(float);
long double __cdecl logbl(long double);
float __cdecl logf(float);
void __cdecl login(struct utmp *);
int __cdecl login_tty(int);
long double __cdecl logl(long double);
int __cdecl logout(const char *);
void __cdecl logwtmp(const char *, const char *, const char *);
__int64 long_return;
void __cdecl longjmp(jmp_buf, int);
void longjmperror(void);
char *longname(void);
__int64 lrand48(void);
__int64 __cdecl lrint(double);
__int64 __cdecl lrintf(float);
__int64 __cdecl lrintl(long double);
__int64 __cdecl lround(double);
__int64 __cdecl lroundf(float);
__int64 __cdecl lroundl(long double);
void *__cdecl lsearch(const void *, void *, size_t *, size_t, int (__cdecl *)(const void *, const void *));
off_t __cdecl lseek(int, off_t, int);
int __cdecl lstat(const char *, struct stat *);
int __cdecl lstat64(const char *, struct stat64 *);
int __cdecl lstatx64_np(const char *, struct stat64 *, filesec_t);
int __cdecl lstatx_np(const char *, struct stat *, filesec_t);
int __cdecl lt_dladderror(const char *diagnostic);
int __cdecl lt_dladdsearchdir(const char *search_dir);
int __cdecl lt_dladvise_destroy(lt_dladvise *advise);
int __cdecl lt_dladvise_ext(lt_dladvise *advise);
int __cdecl lt_dladvise_global(lt_dladvise *advise);
int __cdecl lt_dladvise_init(lt_dladvise *advise);
int __cdecl lt_dladvise_local(lt_dladvise *advise);
int __cdecl lt_dladvise_preload(lt_dladvise *advise);
int __cdecl lt_dladvise_resident(lt_dladvise *advise);
void *__cdecl lt_dlcaller_get_data(lt_dlinterface_id key, lt_dlhandle handle);
void *__cdecl lt_dlcaller_set_data(lt_dlinterface_id key, lt_dlhandle handle, void *data);
int __cdecl lt_dlclose(lt_dlhandle handle);
const char *lt_dlerror(void);
int lt_dlexit(void);
int __cdecl lt_dlforeachfile(const char *search_path, int (__cdecl *func)(const char *filename, void *data), void *data);
const lt_dlinfo *__cdecl lt_dlgetinfo(lt_dlhandle handle);
const char *lt_dlgetsearchpath(void);
lt_dlhandle __cdecl lt_dlhandle_fetch(lt_dlinterface_id iface, const char *module_name);
lt_dlhandle __cdecl lt_dlhandle_iterate(lt_dlinterface_id iface, lt_dlhandle place);
int __cdecl lt_dlhandle_map(lt_dlinterface_id iface, int (__cdecl *func)(lt_dlhandle handle, void *data), void *data);
int lt_dlinit(void);
int __cdecl lt_dlinsertsearchdir(const char *before, const char *search_dir);
void __cdecl lt_dlinterface_free(lt_dlinterface_id key);
lt_dlinterface_id __cdecl lt_dlinterface_register(const char *id_string, lt_dlhandle_interface *iface);
int __cdecl lt_dlisresident(lt_dlhandle handle);
int __cdecl lt_dlloader_add(const lt_dlvtable *vtable);
const lt_dlvtable *__cdecl lt_dlloader_find(const char *name);
const lt_dlvtable *__cdecl lt_dlloader_get(lt_dlloader loader);
lt_dlloader __cdecl lt_dlloader_next(const lt_dlloader loader);
lt_dlvtable *__cdecl lt_dlloader_remove(const char *name);
int __cdecl lt_dlmakeresident(lt_dlhandle handle);
lt_dlhandle __cdecl lt_dlopen(const char *filename);
lt_dlhandle __cdecl lt_dlopenadvise(const char *filename, lt_dladvise advise);
lt_dlhandle __cdecl lt_dlopenext(const char *filename);
int __cdecl lt_dlpreload(const lt_dlsymlist *preloaded);
int __cdecl lt_dlpreload_default(const lt_dlsymlist *preloaded);
int __cdecl lt_dlpreload_open(const char *originator, lt_dlpreload_callback_func *func);
int __cdecl lt_dlseterror(int errorcode);
int __cdecl lt_dlsetsearchpath(const char *search_path);
void *__cdecl lt_dlsym(lt_dlhandle handle, const char *name);
int __cdecl lutimes(const char *, const struct timeval *);
int __cdecl mac_audit_text(char *text, mac_policy_handle_t handle);
intptr_t __cdecl mac_label_get(struct label *l, int slot);
void __cdecl mac_label_set(struct label *l, int slot, intptr_t v);
int __cdecl mac_policy_register(struct mac_policy_conf *mpc, mac_policy_handle_t *handlep, void *xd);
int __cdecl mac_policy_unregister(mac_policy_handle_t handle);
int __cdecl mac_vnop_getxattr(struct vnode *, const char *, char *, size_t, size_t *);
int __cdecl mac_vnop_removexattr(struct vnode *, const char *);
int __cdecl mac_vnop_setxattr(struct vnode *, const char *, char *, size_t);
uint64_t mach_absolute_time(void);
void __cdecl mach_error(const char *str, mach_error_t error_value);
char *__cdecl mach_error_string(mach_error_t error_value);
char *__cdecl mach_error_type(mach_error_t error_value);
mach_port_t mach_host_self(void);
kern_return_t __cdecl mach_make_memory_entry(vm_map_t target_task, vm_size_t *size, vm_offset_t offset, vm_prot_t permission, mem_entry_name_port_t *object_handle, mem_entry_name_port_t parent_entry);
kern_return_t __cdecl mach_make_memory_entry_64(vm_map_t target_task, memory_object_size_t *size, memory_object_offset_t offset, vm_prot_t permission, mach_port_t *object_handle, mem_entry_name_port_t parent_entry);
kern_return_t __cdecl mach_memory_object_memory_entry(host_t host, boolean_t internal, vm_size_t size, vm_prot_t permission, memory_object_t pager, mach_port_t *entry_handle);
kern_return_t __cdecl mach_memory_object_memory_entry_64(host_t host, boolean_t internal, memory_object_size_t size, vm_prot_t permission, memory_object_t pager, mach_port_t *entry_handle);
mach_msg_return_t __cdecl mach_msg(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify);
void __cdecl mach_msg_destroy(mach_msg_header_t *);
mach_msg_return_t __cdecl mach_msg_overwrite(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify, mach_msg_header_t *rcv_msg, mach_msg_size_t rcv_limit);
mach_msg_return_t __cdecl mach_msg_receive(mach_msg_header_t *);
mach_msg_return_t __cdecl mach_msg_send(mach_msg_header_t *);
mach_msg_return_t __cdecl mach_msg_server(boolean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *), mach_msg_size_t, mach_port_t, mach_msg_options_t);
mach_msg_return_t __cdecl mach_msg_server_once(boolean_t (__cdecl *)(mach_msg_header_t *, mach_msg_header_t *), mach_msg_size_t, mach_port_t, mach_msg_options_t);
kern_return_t __cdecl mach_port_allocate(ipc_space_t task, mach_port_right_t right, mach_port_name_t *name);
kern_return_t __cdecl mach_port_allocate_full(ipc_space_t task, mach_port_right_t right, mach_port_t proto, mach_port_qos_t *qos, mach_port_name_t *name);
kern_return_t __cdecl mach_port_allocate_name(ipc_space_t task, mach_port_right_t right, mach_port_name_t name);
kern_return_t __cdecl mach_port_allocate_qos(ipc_space_t task, mach_port_right_t right, mach_port_qos_t *qos, mach_port_name_t *name);
kern_return_t __cdecl mach_port_deallocate(ipc_space_t task, mach_port_name_t name);
kern_return_t __cdecl mach_port_destroy(ipc_space_t task, mach_port_name_t name);
kern_return_t __cdecl mach_port_dnrequest_info(ipc_space_t task, mach_port_name_t name, unsigned int *dnr_total, unsigned int *dnr_used);
kern_return_t __cdecl mach_port_extract_member(ipc_space_t task, mach_port_name_t name, mach_port_name_t pset);
kern_return_t __cdecl mach_port_extract_right(ipc_space_t task, mach_port_name_t name, mach_msg_type_name_t msgt_name, mach_port_t *poly, mach_msg_type_name_t *polyPoly);
kern_return_t __cdecl mach_port_get_attributes(ipc_space_t task, mach_port_name_t name, mach_port_flavor_t flavor, mach_port_info_t port_info_out, mach_msg_type_number_t *port_info_outCnt);
kern_return_t __cdecl mach_port_get_context(ipc_space_t task, mach_port_name_t name, mach_vm_address_t *context);
kern_return_t __cdecl mach_port_get_refs(ipc_space_t task, mach_port_name_t name, mach_port_right_t right, mach_port_urefs_t *refs);
kern_return_t __cdecl mach_port_get_set_status(ipc_space_t task, mach_port_name_t name, mach_port_name_array_t *members, mach_msg_type_number_t *membersCnt);
kern_return_t __cdecl mach_port_get_srights(ipc_space_t task, mach_port_name_t name, mach_port_rights_t *srights);
kern_return_t __cdecl mach_port_insert_member(ipc_space_t task, mach_port_name_t name, mach_port_name_t pset);
kern_return_t __cdecl mach_port_insert_right(ipc_space_t task, mach_port_name_t name, mach_port_t poly, mach_msg_type_name_t polyPoly);
kern_return_t __cdecl mach_port_kernel_object(ipc_space_t task, mach_port_name_t name, unsigned int *object_type, unsigned int *object_addr);
kern_return_t __cdecl mach_port_kobject(ipc_space_t task, mach_port_name_t name, natural_t *object_type, mach_vm_address_t *object_addr);
kern_return_t __cdecl mach_port_mod_refs(ipc_space_t task, mach_port_name_t name, mach_port_right_t right, mach_port_delta_t delta);
kern_return_t __cdecl mach_port_move_member(ipc_space_t task, mach_port_name_t member, mach_port_name_t after);
kern_return_t __cdecl mach_port_names(ipc_space_t task, mach_port_name_array_t *names, mach_msg_type_number_t *namesCnt, mach_port_type_array_t *types, mach_msg_type_number_t *typesCnt);
kern_return_t __cdecl mach_port_rename(ipc_space_t task, mach_port_name_t old_name, mach_port_name_t new_name);
kern_return_t __cdecl mach_port_request_notification(ipc_space_t task, mach_port_name_t name, mach_msg_id_t msgid, mach_port_mscount_t sync, mach_port_t notify, mach_msg_type_name_t notifyPoly, mach_port_t *previous);
kern_return_t __cdecl mach_port_set_attributes(ipc_space_t task, mach_port_name_t name, mach_port_flavor_t flavor, mach_port_info_t port_info, mach_msg_type_number_t port_infoCnt);
kern_return_t __cdecl mach_port_set_context(ipc_space_t task, mach_port_name_t name, mach_vm_address_t context);
kern_return_t __cdecl mach_port_set_mscount(ipc_space_t task, mach_port_name_t name, mach_port_mscount_t mscount);
kern_return_t __cdecl mach_port_set_seqno(ipc_space_t task, mach_port_name_t name, mach_port_seqno_t seqno);
kern_return_t __cdecl mach_port_space_info(ipc_space_t task, ipc_info_space_t *space_info, ipc_info_name_array_t *table_info, mach_msg_type_number_t *table_infoCnt, ipc_info_tree_name_array_t *tree_info, mach_msg_type_number_t *tree_infoCnt);
kern_return_t __cdecl mach_port_type(ipc_space_t task, mach_port_name_t name, mach_port_type_t *ptype);
kern_return_t __cdecl mach_ports_lookup(task_t target_task, mach_port_array_t *init_port_set, mach_msg_type_number_t *init_port_setCnt);
kern_return_t __cdecl mach_ports_register(task_t target_task, mach_port_array_t init_port_set, mach_msg_type_number_t init_port_setCnt);
mach_port_t mach_task_self_;
mach_port_t mach_thread_self(void);
kern_return_t __cdecl mach_timebase_info(mach_timebase_info_t info);
kern_return_t __cdecl mach_vm_allocate(vm_map_t target, mach_vm_address_t *address, mach_vm_size_t size, int flags);
kern_return_t __cdecl mach_vm_behavior_set(vm_map_t target_task, mach_vm_address_t address, mach_vm_size_t size, vm_behavior_t new_behavior);
kern_return_t __cdecl mach_vm_copy(vm_map_t target_task, mach_vm_address_t source_address, mach_vm_size_t size, mach_vm_address_t dest_address);
kern_return_t __cdecl mach_vm_deallocate(vm_map_t target, mach_vm_address_t address, mach_vm_size_t size);
kern_return_t __cdecl mach_vm_inherit(vm_map_t target_task, mach_vm_address_t address, mach_vm_size_t size, vm_inherit_t new_inheritance);
kern_return_t __cdecl mach_vm_machine_attribute(vm_map_t target_task, mach_vm_address_t address, mach_vm_size_t size, vm_machine_attribute_t attribute, vm_machine_attribute_val_t *value);
kern_return_t __cdecl mach_vm_map(vm_map_t target_task, mach_vm_address_t *address, mach_vm_size_t size, mach_vm_offset_t mask, int flags, mem_entry_name_port_t object, memory_object_offset_t offset, boolean_t copy, vm_prot_t cur_protection, vm_prot_t max_protection, vm_inherit_t inheritance);
kern_return_t __cdecl mach_vm_msync(vm_map_t target_task, mach_vm_address_t address, mach_vm_size_t size, vm_sync_t sync_flags);
kern_return_t __cdecl mach_vm_page_info(vm_map_t target_task, mach_vm_address_t address, vm_page_info_flavor_t flavor, vm_page_info_t info, mach_msg_type_number_t *infoCnt);
kern_return_t __cdecl mach_vm_page_query(vm_map_t target_map, mach_vm_offset_t offset, integer_t *disposition, integer_t *ref_count);
kern_return_t __cdecl mach_vm_protect(vm_map_t target_task, mach_vm_address_t address, mach_vm_size_t size, boolean_t set_maximum, vm_prot_t new_protection);
kern_return_t __cdecl mach_vm_purgable_control(vm_map_t target_task, mach_vm_address_t address, vm_purgable_t control, int *state);
kern_return_t __cdecl mach_vm_read(vm_map_t target_task, mach_vm_address_t address, mach_vm_size_t size, vm_offset_t *data, mach_msg_type_number_t *dataCnt);
kern_return_t __cdecl mach_vm_read_list(vm_map_t target_task, mach_vm_read_entry_t data_list, natural_t count);
kern_return_t __cdecl mach_vm_read_overwrite(vm_map_t target_task, mach_vm_address_t address, mach_vm_size_t size, mach_vm_address_t data, mach_vm_size_t *outsize);
kern_return_t __cdecl mach_vm_region(vm_map_t target_task, mach_vm_address_t *address, mach_vm_size_t *size, vm_region_flavor_t flavor, vm_region_info_t info, mach_msg_type_number_t *infoCnt, mach_port_t *object_name);
kern_return_t __cdecl mach_vm_region_info(vm_map_t task, vm_address_t address, vm_info_region_t *region, vm_info_object_array_t *objects, mach_msg_type_number_t *objectsCnt);
kern_return_t __cdecl mach_vm_region_info_64(vm_map_t task, vm_address_t address, vm_info_region_64_t *region, vm_info_object_array_t *objects, mach_msg_type_number_t *objectsCnt);
kern_return_t __cdecl mach_vm_region_recurse(vm_map_t target_task, mach_vm_address_t *address, mach_vm_size_t *size, natural_t *nesting_depth, vm_region_recurse_info_t info, mach_msg_type_number_t *infoCnt);
kern_return_t __cdecl mach_vm_remap(vm_map_t target_task, mach_vm_address_t *target_address, mach_vm_size_t size, mach_vm_offset_t mask, int flags, vm_map_t src_task, mach_vm_address_t src_address, boolean_t copy, vm_prot_t *cur_protection, vm_prot_t *max_protection, vm_inherit_t inheritance);
kern_return_t __cdecl mach_vm_wire(host_priv_t host_priv, vm_map_t task, mach_vm_address_t address, mach_vm_size_t size, vm_prot_t desired_access);
kern_return_t __cdecl mach_vm_write(vm_map_t target_task, mach_vm_address_t address, vm_offset_t data, mach_msg_type_number_t dataCnt);
kern_return_t __cdecl mach_wait_until(uint64_t deadline);
kern_return_t __cdecl mach_zone_info(host_t host, mach_zone_name_array_t *names, mach_msg_type_number_t *namesCnt, mach_zone_info_array_t *info, mach_msg_type_number_t *infoCnt);
kern_return_t __cdecl macx_backing_store_recovery(int pid);
kern_return_t __cdecl macx_backing_store_suspend(boolean_t suspend);
kern_return_t __cdecl macx_swapoff(uint64_t filename, int flags);
kern_return_t __cdecl macx_swapon(uint64_t filename, int flags, int size, int priority);
kern_return_t __cdecl macx_triggers(int hi_water, int low_water, int flags, mach_port_t alert_port);
int __cdecl madvise(void *, size_t, int);
void makecontext(ucontext_t *, void (__cdecl *)(), int, ...);
void *__cdecl malloc(size_t);
malloc_zone_t *__cdecl malloc_create_zone(vm_size_t start_size, unsigned int flags);
malloc_zone_t *malloc_default_purgeable_zone(void);
malloc_zone_t *malloc_default_zone(void);
void __cdecl malloc_destroy_zone(malloc_zone_t *zone);
kern_return_t __cdecl malloc_get_all_zones(task_t task, memory_reader_t *reader, vm_address_t **addresses, unsigned int *count);
const char *__cdecl malloc_get_zone_name(malloc_zone_t *zone);
size_t __cdecl malloc_good_size(size_t size);
int __cdecl malloc_make_nonpurgeable(void *ptr);
void __cdecl malloc_make_purgeable(void *ptr);
void malloc_printf(const char *format, ...);
u_char *__cdecl malloc_random(size_t *size);
void __cdecl malloc_set_zone_name(malloc_zone_t *zone, const char *name);
size_t __cdecl malloc_size(const void *ptr);
u_char *__cdecl malloc_zero(size_t size);
void __cdecl malloc_zone_batch_free(malloc_zone_t *zone, void **to_be_freed, unsigned int num);
unsigned int __cdecl malloc_zone_batch_malloc(malloc_zone_t *zone, size_t size, void **results, unsigned int num_requested);
void *__cdecl malloc_zone_calloc(malloc_zone_t *zone, size_t num_items, size_t size);
boolean_t __cdecl malloc_zone_check(malloc_zone_t *zone);
void __cdecl malloc_zone_disable_discharge_checking(malloc_zone_t *zone);
void __cdecl malloc_zone_discharge(malloc_zone_t *zone, void *memory);
boolean_t __cdecl malloc_zone_enable_discharge_checking(malloc_zone_t *zone);
void __cdecl malloc_zone_enumerate_discharged_pointers(malloc_zone_t *zone, void *);
void __cdecl malloc_zone_free(malloc_zone_t *zone, void *ptr);
malloc_zone_t *__cdecl malloc_zone_from_ptr(const void *ptr);
void __cdecl malloc_zone_log(malloc_zone_t *zone, void *address);
void *__cdecl malloc_zone_malloc(malloc_zone_t *zone, size_t size);
void *__cdecl malloc_zone_memalign(malloc_zone_t *zone, size_t alignment, size_t size);
size_t __cdecl malloc_zone_pressure_relief(malloc_zone_t *zone, size_t goal);
void __cdecl malloc_zone_print(malloc_zone_t *zone, boolean_t verbose);
void __cdecl malloc_zone_print_ptr_info(void *ptr);
void *__cdecl malloc_zone_realloc(malloc_zone_t *zone, void *ptr, size_t size);
void __cdecl malloc_zone_register(malloc_zone_t *zone);
void __cdecl malloc_zone_statistics(malloc_zone_t *zone, malloc_statistics_t *stats);
void __cdecl malloc_zone_unregister(malloc_zone_t *zone);
void *__cdecl malloc_zone_valloc(malloc_zone_t *zone, size_t size);
kern_return_t __cdecl map_fd(int fd, vm_offset_t offset, vm_offset_t *addr, boolean_t find_space, vm_size_t numbytes);
int __cdecl marker_tticks(const_marker_t pm);
mach_port_t master_device_port;
int max_input_history;
int __cdecl mblen(const char *, size_t);
int __cdecl mblen_l(const char *, size_t, locale_t);
char *__cdecl mbmb(const char *, char *);
int __cdecl mbr_check_membership(const uuid_t user, const uuid_t group, int *ismember);
int __cdecl mbr_check_service_membership(const uuid_t user, const char *servicename, int *ismember);
int __cdecl mbr_gid_to_uuid(gid_t gid, uuid_t uu);
int __cdecl mbr_identifier_to_uuid(int id_type, const void *identifier, size_t identifier_size, uuid_t uu);
int __cdecl mbr_sid_to_string(const nt_sid_t *sid, char *string);
int __cdecl mbr_sid_to_uuid(const nt_sid_t *sid, uuid_t uu);
int __cdecl mbr_string_to_sid(const char *string, nt_sid_t *sid);
int __cdecl mbr_uid_to_uuid(uid_t uid, uuid_t uu);
int __cdecl mbr_uuid_to_id(const uuid_t uu, id_t *uid_or_gid, int *id_type);
int __cdecl mbr_uuid_to_sid(const uuid_t uu, nt_sid_t *sid);
size_t __cdecl mbrlen(const char *, size_t, mbstate_t *);
size_t __cdecl mbrlen_l(const char *, size_t, mbstate_t *, locale_t);
char *__cdecl mbrrune(const char *, rune_t);
size_t __cdecl mbrtowc(wchar_t *, const char *, size_t, mbstate_t *);
size_t __cdecl mbrtowc_l(wchar_t *, const char *, size_t, mbstate_t *, locale_t);
char *__cdecl mbrune(const char *, rune_t);
int __cdecl mbsinit(const mbstate_t *);
int __cdecl mbsinit_l(const mbstate_t *, locale_t);
size_t __cdecl mbsnrtowcs(wchar_t *, const char **, size_t, size_t, mbstate_t *);
size_t __cdecl mbsnrtowcs_l(wchar_t *, const char **, size_t, size_t, mbstate_t *, locale_t);
size_t __cdecl mbsrtowcs(wchar_t *, const char **, size_t, mbstate_t *);
size_t __cdecl mbsrtowcs_l(wchar_t *, const char **, size_t, mbstate_t *, locale_t);
size_t __cdecl mbstowcs(wchar_t *, const char *, size_t);
size_t __cdecl mbstowcs_l(wchar_t *, const char *, size_t, locale_t);
int __cdecl mbtowc(wchar_t *, const char *, size_t);
int __cdecl mbtowc_l(wchar_t *, const char *, size_t, locale_t);
int __cdecl mcprint(char *, int);
int __cdecl mecab_cost_train(int argc, char **argv);
void __cdecl mecab_destroy(mecab_t *mecab);
int __cdecl mecab_dict_gen(int argc, char **argv);
int __cdecl mecab_dict_index(int argc, char **argv);
const mecab_dictionary_info_t *__cdecl mecab_dictionary_info(mecab_t *mecab);
int __cdecl mecab_do(int argc, char **argv);
const char *__cdecl mecab_format_node(mecab_t *mecab, const mecab_node_t *node);
int __cdecl mecab_get_all_morphs(mecab_t *mecab);
int __cdecl mecab_get_lattice_level(mecab_t *mecab);
int __cdecl mecab_get_partial(mecab_t *mecab);
float __cdecl mecab_get_theta(mecab_t *mecab);
int __cdecl mecab_nbest_init(mecab_t *mecab, const char *str);
int __cdecl mecab_nbest_init2(mecab_t *mecab, const char *str, size_t len);
const mecab_node_t *__cdecl mecab_nbest_next_tonode(mecab_t *mecab);
const char *__cdecl mecab_nbest_next_tostr(mecab_t *mecab);
char *__cdecl mecab_nbest_next_tostr2(mecab_t *mecab, char *ostr, size_t olen);
const char *__cdecl mecab_nbest_sparse_tostr(mecab_t *mecab, size_t N, const char *str);
const char *__cdecl mecab_nbest_sparse_tostr2(mecab_t *mecab, size_t N, const char *str, size_t len);
char *__cdecl mecab_nbest_sparse_tostr3(mecab_t *mecab, size_t N, const char *str, size_t len, char *ostr, size_t olen);
mecab_t *__cdecl mecab_new(int argc, char **argv);
mecab_t *__cdecl mecab_new2(const char *arg);
void __cdecl mecab_set_all_morphs(mecab_t *mecab, int all_morphs);
void __cdecl mecab_set_lattice_level(mecab_t *mecab, int level);
void __cdecl mecab_set_partial(mecab_t *mecab, int partial);
void __cdecl mecab_set_theta(mecab_t *mecab, float theta);
const mecab_node_t *__cdecl mecab_sparse_tonode(mecab_t *mecab, const char *);
const mecab_node_t *__cdecl mecab_sparse_tonode2(mecab_t *mecab, const char *, size_t);
const char *__cdecl mecab_sparse_tostr(mecab_t *mecab, const char *str);
const char *__cdecl mecab_sparse_tostr2(mecab_t *mecab, const char *str, size_t len);
char *__cdecl mecab_sparse_tostr3(mecab_t *mecab, const char *str, size_t len, char *ostr, size_t olen);
const char *__cdecl mecab_strerror(mecab_t *mecab);
int __cdecl mecab_system_eval(int argc, char **argv);
int __cdecl mecab_test_gen(int argc, char **argv);
const char *__cdecl mecab_version();
void *__cdecl memccpy(void *, const void *, int, size_t);
void *__cdecl memchr(const void *, int, size_t);
int __cdecl memcmp(const void *, const void *, size_t);
void *__cdecl memcpy(void *, const void *, size_t);
int __cdecl memdup(u_char **to, const void *from, size_t size);
void *__cdecl memmem(const void *, size_t, const void *, size_t);
void *__cdecl memmove(void *, const void *, size_t);
void *__cdecl memset(void *, int, size_t);
void __cdecl memset_pattern16(void *, const void *, size_t);
void __cdecl memset_pattern4(void *, const void *, size_t);
void __cdecl memset_pattern8(void *, const void *, size_t);
chtype __cdecl menu_back(const MENU *);
int __cdecl menu_driver(MENU *, int);
chtype __cdecl menu_fore(const MENU *);
void __cdecl menu_format(const MENU *, int *, int *);
chtype __cdecl menu_grey(const MENU *);
Menu_Hook __cdecl menu_init(const MENU *);
ITEM **__cdecl menu_items(const MENU *);
const char *__cdecl menu_mark(const MENU *);
Menu_Options __cdecl menu_opts(const MENU *);
int __cdecl menu_opts_off(MENU *, Menu_Options);
int __cdecl menu_opts_on(MENU *, Menu_Options);
int __cdecl menu_pad(const MENU *);
char *__cdecl menu_pattern(const MENU *);
int __cdecl menu_request_by_name(const char *);
const char *__cdecl menu_request_name(int);
int __cdecl menu_spacing(const MENU *, int *, int *, int *);
WINDOW *__cdecl menu_sub(const MENU *);
Menu_Hook __cdecl menu_term(const MENU *);
void *__cdecl menu_userptr(const MENU *);
WINDOW *__cdecl menu_win(const MENU *);
int __cdecl mergesort(void *, size_t, size_t, int (__cdecl *)(const void *, const void *));
int __cdecl mergesort_b(void *, size_t, size_t, void *);
int __cdecl meta(WINDOW *, bool);
int __cdecl mib_OidToTxt(oid *, size_t, char *, size_t);
int __cdecl mib_TxtToOid(char *, oid **, size_t *);
u_char __cdecl mib_to_asn_type(int mib_type);
void __cdecl mig_allocate(vm_address_t *, vm_size_t);
void __cdecl mig_dealloc_reply_port(mach_port_t reply_port);
void __cdecl mig_deallocate(vm_address_t, vm_size_t);
mach_port_t mig_get_reply_port(void);
void __cdecl mig_put_reply_port(mach_port_t reply_port);
void __cdecl mig_reply_setup(mach_msg_header_t *, mach_msg_header_t *);
int __cdecl mig_strncpy(char *dest, const char *src, int len);
mime_filter_t *__cdecl mimeAddFilter(mime_t *mime, mime_type_t *src, mime_type_t *dst, int cost, const char *filter);
mime_type_t *__cdecl mimeAddType(mime_t *mime, const char *super, const char *type);
int __cdecl mimeAddTypeRule(mime_type_t *mt, const char *rule);
void __cdecl mimeDelete(mime_t *mime);
void __cdecl mimeDeleteFilter(mime_t *mime, mime_filter_t *filter);
void __cdecl mimeDeleteType(mime_t *mime, mime_type_t *mt);
mime_type_t *__cdecl mimeFileType(mime_t *mime, const char *pathname, const char *filename, int *compression);
cups_array_t *__cdecl mimeFilter(mime_t *mime, mime_type_t *src, mime_type_t *dst, int *cost);
cups_array_t *__cdecl mimeFilter2(mime_t *mime, mime_type_t *src, size_t srcsize, mime_type_t *dst, int *cost);
mime_filter_t *__cdecl mimeFilterLookup(mime_t *mime, mime_type_t *src, mime_type_t *dst);
mime_filter_t *__cdecl mimeFirstFilter(mime_t *mime);
mime_type_t *__cdecl mimeFirstType(mime_t *mime);
mime_t *__cdecl mimeLoad(const char *pathname, const char *filterpath);
mime_t *__cdecl mimeLoadFilters(mime_t *mime, const char *pathname, const char *filterpath);
mime_t *__cdecl mimeLoadTypes(mime_t *mime, const char *pathname);
mime_t *mimeNew(void);
mime_filter_t *__cdecl mimeNextFilter(mime_t *mime);
mime_type_t *__cdecl mimeNextType(mime_t *mime);
int __cdecl mimeNumFilters(mime_t *mime);
int __cdecl mimeNumTypes(mime_t *mime);
void __cdecl mimeSetErrorCallback(mime_t *mime, mime_error_cb_t cb, void *context);
mime_type_t *__cdecl mimeType(mime_t *mime, const char *super, const char *type);
int __cdecl mincore(const void *, size_t, char *);
int __cdecl minherit(void *, size_t, int);
u_int __cdecl minphys(buf_t bp);
int __cdecl misc_conv(int num_msg, const struct pam_message **msgm, struct pam_response **response, void *appdata_ptr);
int __cdecl mkdir(const char *, mode_t);
int __cdecl mkdirhier(const char *pathname, mode_t mode, int skiplast);
int __cdecl mkdirx_np(const char *, filesec_t);
char *__cdecl mkdtemp(char *);
int __cdecl mkfifo(const char *, mode_t);
int __cdecl mkfifox_np(const char *, filesec_t);
int __cdecl mknod(const char *, mode_t, dev_t);
int __cdecl mkstemp(char *);
int __cdecl mkstemps(char *, int);
char *__cdecl mktemp(char *);
time_t __cdecl mktime(struct tm *);
int __cdecl mlock(const void *, size_t);
int __cdecl mlockall(int);
void *__cdecl mmap(void *, size_t, int, int, int, off_t);
double __cdecl modf(double, double *);
float __cdecl modff(float, float *);
long double __cdecl modfl(long double, long double *);
char *__cdecl module_name(int, char *);
int __cdecl modwatch(er_t, int);
void __cdecl moncontrol(int mode);
void moninit(void);
void __cdecl monitor(char *lowpc, char *highpc, char *buf, int bufsiz, int cntsiz);
void __cdecl monoutput(const char *filename);
void monreset(void);
void __cdecl monstartup(char *lowpc, char *highpc);
int __cdecl mount(const char *, const char *, int, void *);
mountlist *__cdecl mountproc_dump_1(void *, CLIENT *);
mountlist *__cdecl mountproc_dump_1_svc(void *, struct svc_req *);
exports *__cdecl mountproc_export_1(void *, CLIENT *);
exports *__cdecl mountproc_export_1_svc(void *, struct svc_req *);
exports *__cdecl mountproc_exportall_1(void *, CLIENT *);
exports *__cdecl mountproc_exportall_1_svc(void *, struct svc_req *);
fhstatus *__cdecl mountproc_mnt_1(dirpath *, CLIENT *);
fhstatus *__cdecl mountproc_mnt_1_svc(dirpath *, struct svc_req *);
void *__cdecl mountproc_null_1(void *, CLIENT *);
void *__cdecl mountproc_null_1_svc(void *, struct svc_req *);
void *__cdecl mountproc_umnt_1(dirpath *, CLIENT *);
void *__cdecl mountproc_umnt_1_svc(dirpath *, struct svc_req *);
void *__cdecl mountproc_umntall_1(void *, CLIENT *);
void *__cdecl mountproc_umntall_1_svc(void *, struct svc_req *);
bool __cdecl mouse_trafo(int *, int *, bool);
int __cdecl mouseinterval(int);
mmask_t __cdecl mousemask(mmask_t, mmask_t *);
int __cdecl move(int, int);
int __cdecl move_field(FIELD *, int, int);
int __cdecl move_panel(PANEL *, int, int);
int __cdecl mpool_close(MPOOL *);
void __cdecl mpool_filter(MPOOL *, void (__cdecl *)(void *, pgno_t, void *), void (__cdecl *)(void *, pgno_t, void *), void *);
void *__cdecl mpool_get(MPOOL *, pgno_t, unsigned int);
void *__cdecl mpool_new(MPOOL *, pgno_t *);
MPOOL *__cdecl mpool_open(void *, int, pgno_t, pgno_t);
int __cdecl mpool_put(MPOOL *, void *, unsigned int);
int __cdecl mpool_sync(MPOOL *);
int __cdecl mprotect(void *, size_t, int);
__int64 mrand48(void);
int __cdecl ms_time_cmp(const MS_TM *ap, const MS_TM *bp);
double __cdecl ms_time_diff(MS_TM *start, MS_TM *end);
void __cdecl ms_time_free(MS_TM *a);
void __cdecl ms_time_get(MS_TM *a);
MS_TM *ms_time_new(void);
int __cdecl msgctl(int, int, struct __msqid_ds_new *);
int __cdecl msgget(key_t, int);
ssize_t __cdecl msgrcv(int, void *, size_t, __int64, int);
int __cdecl msgsnd(int, const void *, size_t, int);
int msgsys(int, ...);
struct mstats mstats(void);
int __cdecl msync(void *, size_t, int);
void __cdecl multBy10(U64, U64 *);
int __cdecl munlock(const void *, size_t);
int munlockall(void);
int __cdecl munmap(void *, size_t);
int __cdecl mvaddch(int, int, const chtype);
int __cdecl mvaddchnstr(int, int, const chtype *, int);
int __cdecl mvaddchstr(int, int, const chtype *);
int __cdecl mvaddnstr(int, int, const char *, int);
int __cdecl mvaddstr(int, int, const char *);
int __cdecl mvchgat(int, int, int, attr_t, __int16, const void *);
int __cdecl mvcur(int, int, int, int);
int __cdecl mvdelch(int, int);
int __cdecl mvderwin(WINDOW *, int, int);
int __cdecl mvgetch(int, int);
int __cdecl mvgetnstr(int, int, char *, int);
int __cdecl mvgetstr(int, int, char *);
int __cdecl mvhline(int, int, chtype, int);
chtype __cdecl mvinch(int, int);
int __cdecl mvinchnstr(int, int, chtype *, int);
int __cdecl mvinchstr(int, int, chtype *);
int __cdecl mvinnstr(int, int, char *, int);
int __cdecl mvinsch(int, int, chtype);
int __cdecl mvinsnstr(int, int, const char *, int);
int __cdecl mvinsstr(int, int, const char *);
int __cdecl mvinstr(int, int, char *);
int mvprintw(int, int, const char *, ...);
int mvscanw(int, int, char *, ...);
int __cdecl mvvline(int, int, chtype, int);
int __cdecl mvwaddch(WINDOW *, int, int, const chtype);
int __cdecl mvwaddchnstr(WINDOW *, int, int, const chtype *, int);
int __cdecl mvwaddchstr(WINDOW *, int, int, const chtype *);
int __cdecl mvwaddnstr(WINDOW *, int, int, const char *, int);
int __cdecl mvwaddstr(WINDOW *, int, int, const char *);
int __cdecl mvwchgat(WINDOW *, int, int, int, attr_t, __int16, const void *);
int __cdecl mvwdelch(WINDOW *, int, int);
int __cdecl mvwgetch(WINDOW *, int, int);
int __cdecl mvwgetnstr(WINDOW *, int, int, char *, int);
int __cdecl mvwgetstr(WINDOW *, int, int, char *);
int __cdecl mvwhline(WINDOW *, int, int, chtype, int);
int __cdecl mvwin(WINDOW *, int, int);
chtype __cdecl mvwinch(WINDOW *, int, int);
int __cdecl mvwinchnstr(WINDOW *, int, int, chtype *, int);
int __cdecl mvwinchstr(WINDOW *, int, int, chtype *);
int __cdecl mvwinnstr(WINDOW *, int, int, char *, int);
int __cdecl mvwinsch(WINDOW *, int, int, chtype);
int __cdecl mvwinsnstr(WINDOW *, int, int, const char *, int);
int __cdecl mvwinsstr(WINDOW *, int, int, const char *);
int __cdecl mvwinstr(WINDOW *, int, int, char *);
int mvwprintw(WINDOW *, int, int, const char *, ...);
int mvwscanw(WINDOW *, int, int, char *, ...);
int __cdecl mvwvline(WINDOW *, int, int, chtype, int);
const xmlChar *__cdecl namePop(xmlParserCtxtPtr ctxt);
int __cdecl namePush(xmlParserCtxtPtr ctxt, const xmlChar *value);
int __cdecl name_cmp(const char *name, const char *cmp);
void __cdecl namespaceDecl(void *ctx, const xmlChar *href, const xmlChar *prefix);
double __cdecl nan(const char *);
float __cdecl nanf(const char *);
long double __cdecl nanl(const char *);
int __cdecl nanosleep(const struct timespec *, struct timespec *);
int __cdecl napms(int);
double __cdecl nearbyint(double);
float __cdecl nearbyintf(float);
long double __cdecl nearbyintl(long double);
kern_return_t __cdecl netname_check_in(mach_port_t server_port, netname_name_t port_name, mach_port_t signature, mach_port_t port_id);
kern_return_t __cdecl netname_check_out(mach_port_t server_port, netname_name_t port_name, mach_port_t signature);
kern_return_t __cdecl netname_look_up(mach_port_t server_port, netname_name_t host_name, netname_name_t port_name, mach_port_t *port_id);
kern_return_t __cdecl netname_version(mach_port_t server_port, netname_name_t version);
oid netsnmpCLNSDomain[];
size_t netsnmpCLNSDomain_len;
oid netsnmpCONSDomain[];
size_t netsnmpCONSDomain_len;
oid netsnmpDDPDomain[];
size_t netsnmpDDPDomain_len;
oid netsnmpIPXDomain[];
size_t netsnmpIPXDomain_len;
oid netsnmpUDPDomain[];
size_t netsnmpUDPDomain_len;
oid netsnmp_TCPIPv6Domain[];
oid netsnmp_UDPIPv6Domain[];
oid netsnmp_UnixDomain[];
int __cdecl netsnmp_acm_check_subtree(netsnmp_pdu *, oid *, size_t);
void __cdecl netsnmp_add_list_data(netsnmp_data_list **head, netsnmp_data_list *node);
int __cdecl netsnmp_add_loghandler(netsnmp_log_handler *logh);
void netsnmp_addrcache_age(void);
void netsnmp_addrcache_destroy(void);
void netsnmp_addrcache_initialise(void);
int __cdecl netsnmp_addrstr_hton(char *ptr, size_t len);
void __cdecl netsnmp_agent_add_list_data(netsnmp_agent_request_info *agent, netsnmp_data_list *node);
int __cdecl netsnmp_agent_check_packet(netsnmp_session *, struct netsnmp_transport_s *, void *, int);
int __cdecl netsnmp_agent_check_parse(netsnmp_session *, netsnmp_pdu *, int);
void *__cdecl netsnmp_agent_get_list_data(netsnmp_agent_request_info *agent, const char *name);
int __cdecl netsnmp_agent_remove_list_data(netsnmp_agent_request_info *ari, const char *name);
void netsnmp_alias_ctor(void);
int netsnmp_allocate_globalcacheid(void);
int __cdecl netsnmp_baby_step_mode2flag(u_int mode);
netsnmp_mib_handler *__cdecl netsnmp_baby_steps_access_multiplexer_get(netsnmp_baby_steps_access_methods *);
netsnmp_mib_handler *__cdecl netsnmp_baby_steps_handler_get(u_long modes);
void netsnmp_baby_steps_init(void);
int __cdecl netsnmp_binary_array_options_set(netsnmp_container *c, int set, u_int flags);
void __cdecl netsnmp_binary_array_release(netsnmp_container *c);
int __cdecl netsnmp_binary_array_remove(netsnmp_container *c, const void *key, void **save);
u_int __cdecl netsnmp_binary_to_hex(u_char **dest, size_t *dest_len, int allow_realloc, const u_char *input, size_t len);
void __cdecl netsnmp_bulk_to_next_fix_requests(netsnmp_request_info *requests);
Netsnmp_Node_Handler netsnmp_bulk_to_next_helper;
int __cdecl netsnmp_c64_check32_and_update(struct counter64 *prev_val, struct counter64 *new_val, struct counter64 *old_prev_val, int *need_wrap_check);
int __cdecl netsnmp_c64_check_for_32bit_wrap(U64 *old_val, U64 *new_val, int adjust);
int __cdecl netsnmp_cache_check_and_reload(netsnmp_cache *cache);
int __cdecl netsnmp_cache_check_expired(netsnmp_cache *cache);
netsnmp_cache *__cdecl netsnmp_cache_create(int timeout, NetsnmpCacheLoad *load_hook, NetsnmpCacheFree *free_hook, const oid *rootoid, int rootoid_len);
netsnmp_cache *__cdecl netsnmp_cache_find_by_oid(const oid *rootoid, int rootoid_len);
int __cdecl netsnmp_cache_free(netsnmp_cache *cache);
netsnmp_mib_handler *__cdecl netsnmp_cache_handler_get(netsnmp_cache *cache);
Netsnmp_Node_Handler netsnmp_cache_helper_handler;
int __cdecl netsnmp_cache_is_valid(netsnmp_agent_request_info *, const char *name);
int __cdecl netsnmp_cache_remove(netsnmp_cache *cache);
netsnmp_cache *__cdecl netsnmp_cache_reqinfo_extract(netsnmp_agent_request_info *reqinfo, const char *name);
void __cdecl netsnmp_cache_reqinfo_insert(netsnmp_cache *cache, netsnmp_agent_request_info *reqinfo, const char *name);
unsigned int __cdecl netsnmp_cache_timer_start(netsnmp_cache *cache);
void __cdecl netsnmp_cache_timer_stop(netsnmp_cache *cache);
int __cdecl netsnmp_call_handler(netsnmp_mib_handler *next_handler, netsnmp_handler_registration *reginfo, netsnmp_agent_request_info *reqinfo, netsnmp_request_info *requests);
int __cdecl netsnmp_call_handlers(netsnmp_handler_registration *reginfo, netsnmp_agent_request_info *reqinfo, netsnmp_request_info *requests);
int __cdecl netsnmp_call_next_handler(netsnmp_mib_handler *current, netsnmp_handler_registration *reginfo, netsnmp_agent_request_info *reqinfo, netsnmp_request_info *requests);
int __cdecl netsnmp_call_next_handler_one_request(netsnmp_mib_handler *current, netsnmp_handler_registration *reginfo, netsnmp_agent_request_info *reqinfo, netsnmp_request_info *requests);
int __cdecl netsnmp_callback_check_packet(u_char *pkt, size_t len);
int __cdecl netsnmp_callback_clear_client_arg(void *, int i, int j);
netsnmp_pdu *__cdecl netsnmp_callback_create_pdu(netsnmp_transport *transport, void *opaque, size_t olength);
int __cdecl netsnmp_callback_hook_build(netsnmp_session *sp, netsnmp_pdu *pdu, u_char *ptk, size_t *len);
int __cdecl netsnmp_callback_hook_parse(netsnmp_session *sp, netsnmp_pdu *pdu, u_char *packetptr, size_t len);
netsnmp_session *__cdecl netsnmp_callback_open(int attach_to, int (__cdecl *return_func)(int op, netsnmp_session *session, int reqid, netsnmp_pdu *pdu, void *magic), int (__cdecl *fpre_parse)(netsnmp_session *, struct netsnmp_transport_s *, void *, int), int (__cdecl *fpost_parse)(netsnmp_session *, netsnmp_pdu *, int));
netsnmp_transport *__cdecl netsnmp_callback_transport(int);
void *__cdecl netsnmp_calloc(size_t nelem, size_t elsize);
int __cdecl netsnmp_check_all_requests_error(netsnmp_agent_session *asp, int look_for_specific);
int __cdecl netsnmp_check_getnext_reply(netsnmp_request_info *request, oid *prefix, size_t prefix_len, netsnmp_variable_list *newvar, netsnmp_variable_list **outvar);
void netsnmp_check_outstanding_agent_requests(void);
int __cdecl netsnmp_check_requests_error(netsnmp_request_info *reqs);
int __cdecl netsnmp_check_transaction_id(int transaction_id);
int __cdecl netsnmp_check_vb_int(const netsnmp_variable_list *var);
int __cdecl netsnmp_check_vb_int_range(const netsnmp_variable_list *var, int low, int high);
int __cdecl netsnmp_check_vb_max_size(const netsnmp_variable_list *var, size_t size);
int __cdecl netsnmp_check_vb_oid(const netsnmp_variable_list *var);
int __cdecl netsnmp_check_vb_range(const netsnmp_variable_list *var, size_t low, size_t high);
int __cdecl netsnmp_check_vb_rowstatus(const netsnmp_variable_list *var, int old_val);
int __cdecl netsnmp_check_vb_rowstatus_value(const netsnmp_variable_list *var);
int __cdecl netsnmp_check_vb_rowstatus_with_storagetype(const netsnmp_variable_list *var, int old_val, int old_storage);
int __cdecl netsnmp_check_vb_size(const netsnmp_variable_list *var, size_t size);
int __cdecl netsnmp_check_vb_size_range(const netsnmp_variable_list *var, size_t low, size_t high);
int __cdecl netsnmp_check_vb_storagetype(const netsnmp_variable_list *var, int old_val);
int __cdecl netsnmp_check_vb_truthvalue(const netsnmp_variable_list *var);
int __cdecl netsnmp_check_vb_type(const netsnmp_variable_list *var, int type);
int __cdecl netsnmp_check_vb_type_and_max_size(const netsnmp_variable_list *var, int type, size_t size);
int __cdecl netsnmp_check_vb_type_and_size(const netsnmp_variable_list *var, int type, size_t size);
int __cdecl netsnmp_check_vb_uint(const netsnmp_variable_list *var);
void netsnmp_clear_callback_list(void);
void netsnmp_clear_default_domain(void);
void netsnmp_clear_default_target(void);
void netsnmp_clear_handler_list(void);
void netsnmp_clear_tdomain_list(void);
unsigned int __cdecl netsnmp_closest_column(unsigned int current, netsnmp_column_info *valid_columns);
int __cdecl netsnmp_compare_cstring(const void *lhs, const void *rhs);
int __cdecl netsnmp_compare_direct_cstring(const void *lhs, const void *rhs);
int __cdecl netsnmp_compare_int32(const void *lhs, const void *rhs);
int __cdecl netsnmp_compare_long(const void *lhs, const void *rhs);
int __cdecl netsnmp_compare_mem(const char *lhs, size_t lhs_len, const char *rhs, size_t rhs_len);
int __cdecl netsnmp_compare_netsnmp_index(const void *lhs, const void *rhs);
int __cdecl netsnmp_compare_uint32(const void *lhs, const void *rhs);
int __cdecl netsnmp_compare_ulong(const void *lhs, const void *rhs);
int __cdecl netsnmp_config(char *);
void netsnmp_config_error(const char *, ...);
void __cdecl netsnmp_config_parse_add_row(const char *token, char *line);
void __cdecl netsnmp_config_parse_table_set(const char *token, char *line);
void netsnmp_config_process_memories(void);
void __cdecl netsnmp_config_remember(char *);
void netsnmp_config_warn(const char *, ...);
void __cdecl netsnmp_container_add_index(netsnmp_container *primary, netsnmp_container *new_index);
void netsnmp_container_binary_array_init(void);
int __cdecl netsnmp_container_data_dup(netsnmp_container *dup, netsnmp_container *c);
netsnmp_container *__cdecl netsnmp_container_find(const char *type_list);
void netsnmp_container_free_list(void);
netsnmp_container *__cdecl netsnmp_container_get(const char *type);
netsnmp_container *netsnmp_container_get_binary_array(void);
netsnmp_factory *netsnmp_container_get_binary_array_factory(void);
netsnmp_factory *__cdecl netsnmp_container_get_factory(const char *type);
netsnmp_container *netsnmp_container_get_null(void);
netsnmp_container *__cdecl netsnmp_container_get_singly_linked_list(int fifo);
netsnmp_container *netsnmp_container_get_sorted_singly_linked_list(void);
void netsnmp_container_init_list(void);
netsnmp_container *__cdecl netsnmp_container_iterator_get(void *iterator_user_ctx, netsnmp_container_compare *compare, Netsnmp_Iterator_Loop_Key *get_first, Netsnmp_Iterator_Loop_Key *get_next, Netsnmp_Iterator_Loop_Data *get_data, Netsnmp_Iterator_Ctx_Dup *save_pos, Netsnmp_Iterator_Ctx *init_loop_ctx, Netsnmp_Iterator_Ctx *cleanup_loop_ctx, Netsnmp_Iterator_Data *free_user_ctx, int sorted);
void netsnmp_container_iterator_init(void);
void __cdecl netsnmp_container_iterator_set_data_cb(netsnmp_container *c, Netsnmp_Iterator_Data *insert_data, Netsnmp_Iterator_Data *remove_data, Netsnmp_Iterator_Op *get_size);
void netsnmp_container_null_init(void);
int __cdecl netsnmp_container_register(const char *name, netsnmp_factory *f);
int __cdecl netsnmp_container_register_with_compare(const char *name, netsnmp_factory *f, netsnmp_container_compare *c);
void __cdecl netsnmp_container_simple_free(void *data, void *context);
void netsnmp_container_ssll_init(void);
netsnmp_container *__cdecl netsnmp_container_table_container_extract(netsnmp_request_info *request);
static void *__cdecl netsnmp_container_table_extract_context(netsnmp_request_info *request);
void *__cdecl netsnmp_container_table_find_next_row(netsnmp_request_info *request, netsnmp_table_request_info *tblreq, netsnmp_container *container, char key_type);
netsnmp_mib_handler *__cdecl netsnmp_container_table_handler_get(netsnmp_table_registration_info *tabreq, netsnmp_container *container, char key_type);
int __cdecl netsnmp_container_table_register(netsnmp_handler_registration *reginfo, netsnmp_table_registration_info *tabreq, netsnmp_container *container, char key_type);
static void *__cdecl netsnmp_container_table_row_extract(netsnmp_request_info *request);
void __cdecl netsnmp_container_table_row_insert(netsnmp_request_info *request, netsnmp_index *row);
void __cdecl netsnmp_container_table_row_remove(netsnmp_request_info *request, netsnmp_index *row);
int __cdecl netsnmp_container_table_unregister(netsnmp_handler_registration *reginfo);
void __cdecl netsnmp_copy_fd_set_to_large_fd_set(netsnmp_large_fd_set *dst, const fd_set *src);
int __cdecl netsnmp_copy_large_fd_set_to_fd_set(fd_set *dst, const netsnmp_large_fd_set *src);
netsnmp_data_list *__cdecl netsnmp_create_data_list(const char *, void *, Netsnmp_Free_List_Data *);
netsnmp_delegated_cache *__cdecl netsnmp_create_delegated_cache(netsnmp_mib_handler *, netsnmp_handler_registration *, netsnmp_agent_request_info *, netsnmp_request_info *, void *);
netsnmp_mib_handler *__cdecl netsnmp_create_handler(const char *name, Netsnmp_Node_Handler *handler_access_method);
netsnmp_handler_registration *__cdecl netsnmp_create_handler_registration(const char *name, Netsnmp_Node_Handler *handler_access_method, const oid *reg_oid, size_t reg_oid_len, int modes);
netsnmp_table_data *__cdecl netsnmp_create_table_data(const char *name);
netsnmp_table_row *netsnmp_create_table_data_row(void);
netsnmp_table_data_set *__cdecl netsnmp_create_table_data_set(const char *);
netsnmp_watcher_info *__cdecl netsnmp_create_watcher_info(void *, size_t, u_char, int);
netsnmp_watcher_info *__cdecl netsnmp_create_watcher_info6(void *, size_t, u_char, int, size_t, size_t *);
int __cdecl netsnmp_daemonize(int quit_immediately, int stderr_log);
netsnmp_data_list *__cdecl netsnmp_data_list_add_data(netsnmp_data_list **head, const char *name, void *data, Netsnmp_Free_List_Data *beer);
void __cdecl netsnmp_data_list_add_node(netsnmp_data_list **head, netsnmp_data_list *node);
int __cdecl netsnmp_dateandtime_set_buf_from_vars(u_char *buf, size_t *bufsize, u_short y, u_char mon, u_char d, u_char h, u_char min, u_char s, u_char deci_seconds, int utc_offset_direction, u_char utc_offset_hours, u_char utc_offset_minutes);
Netsnmp_Node_Handler netsnmp_debug_helper;
void __cdecl netsnmp_deregister_agent_nsap(int handle);
int __cdecl netsnmp_disable_loghandler(const char *token);
void __cdecl netsnmp_disable_this_loghandler(netsnmp_log_handler *logh);
void __cdecl netsnmp_dispatch_external_events(int *count, fd_set *readfds, fd_set *writefds, fd_set *exceptfds);
void __cdecl netsnmp_dispatch_external_events2(int *count, netsnmp_large_fd_set *readfds, netsnmp_large_fd_set *writefds, netsnmp_large_fd_set *exceptfds);
int __cdecl netsnmp_ds_get_boolean(int storeid, int which);
int __cdecl netsnmp_ds_get_int(int storeid, int which);
char *__cdecl netsnmp_ds_get_string(int storeid, int which);
void *__cdecl netsnmp_ds_get_void(int storeid, int which);
int __cdecl netsnmp_ds_parse_boolean(char *line);
int __cdecl netsnmp_ds_register_config(u_char type, const char *ftype, const char *token, int storeid, int which);
int __cdecl netsnmp_ds_register_premib(u_char type, const char *ftype, const char *token, int storeid, int which);
int __cdecl netsnmp_ds_set_boolean(int storeid, int which, int value);
int __cdecl netsnmp_ds_set_int(int storeid, int which, int value);
int __cdecl netsnmp_ds_set_string(int storeid, int which, const char *value);
int __cdecl netsnmp_ds_set_void(int storeid, int which, void *value);
void netsnmp_ds_shutdown(void);
int __cdecl netsnmp_ds_toggle_boolean(int storeid, int which);
int __cdecl netsnmp_enable_loghandler(const char *token);
void netsnmp_enable_subagent(void);
void __cdecl netsnmp_enable_this_loghandler(netsnmp_log_handler *logh);
void __cdecl netsnmp_external_event_info(int *numfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds);
void __cdecl netsnmp_external_event_info2(int *numfds, netsnmp_large_fd_set *readfds, netsnmp_large_fd_set *writefds, netsnmp_large_fd_set *exceptfds);
netsnmp_container *__cdecl netsnmp_extract_array_context(netsnmp_request_info *);
netsnmp_cache *__cdecl netsnmp_extract_cache_info(netsnmp_agent_request_info *);
void *__cdecl netsnmp_extract_iterator_context(netsnmp_request_info *);
netsnmp_oid_stash_node **__cdecl netsnmp_extract_stash_cache(netsnmp_agent_request_info *reqinfo);
netsnmp_table_data *__cdecl netsnmp_extract_table(netsnmp_request_info *);
netsnmp_table_data_set *__cdecl netsnmp_extract_table_data_set(netsnmp_request_info *request);
netsnmp_table_data_set_storage *__cdecl netsnmp_extract_table_data_set_column(netsnmp_request_info *, unsigned int);
netsnmp_table_request_info *__cdecl netsnmp_extract_table_info(netsnmp_request_info *);
netsnmp_table_row *__cdecl netsnmp_extract_table_row(netsnmp_request_info *);
void *__cdecl netsnmp_extract_table_row_data(netsnmp_request_info *);
netsnmp_factory *__cdecl netsnmp_factory_get(const char *product);
void netsnmp_factory_init(void);
void *__cdecl netsnmp_factory_produce(const char *product);
int __cdecl netsnmp_factory_produce_noalloc(const char *product, void *memory);
int __cdecl netsnmp_factory_register(netsnmp_factory *f);
int __cdecl netsnmp_file_close(netsnmp_file *filei);
int __cdecl netsnmp_file_compare_name(netsnmp_file *lhs, netsnmp_file *rhs);
void __cdecl netsnmp_file_container_free(netsnmp_file *file, void *context);
netsnmp_file *netsnmp_file_create(void);
netsnmp_file *__cdecl netsnmp_file_fill(netsnmp_file *filei, const char *name, int fs_flags, mode_t mode, u_int ns_flags);
netsnmp_file *__cdecl netsnmp_file_new(const char *name, int fs_flags, mode_t mode, u_int ns_flags);
int __cdecl netsnmp_file_open(netsnmp_file *filei);
int __cdecl netsnmp_file_release(netsnmp_file *filei);
netsnmp_mib_handler *__cdecl netsnmp_find_handler_by_name(netsnmp_handler_registration *reginfo, const char *name);
void *__cdecl netsnmp_find_handler_data_by_name(netsnmp_handler_registration *reginfo, const char *name);
netsnmp_log_handler *__cdecl netsnmp_find_loghandler(const char *token);
netsnmp_table_registration_info *__cdecl netsnmp_find_table_registration_info(netsnmp_handler_registration *reginfo);
void netsnmp_fixup_mib_directory(void);
void __cdecl netsnmp_free(void *ptr);
void __cdecl netsnmp_free_agent_data_set(netsnmp_agent_request_info *agent);
void __cdecl netsnmp_free_agent_data_sets(netsnmp_agent_request_info *agent);
void __cdecl netsnmp_free_agent_request_info(netsnmp_agent_request_info *ari);
void __cdecl netsnmp_free_all_list_data(netsnmp_data_list *head);
void __cdecl netsnmp_free_delegated_cache(netsnmp_delegated_cache *dcache);
void __cdecl netsnmp_free_list_data(netsnmp_data_list *head);
void __cdecl netsnmp_free_request_data_set(netsnmp_request_info *request);
void __cdecl netsnmp_free_request_data_sets(netsnmp_request_info *request);
const_marker_t netsnmp_get_agent_starttime(void);
u_long netsnmp_get_agent_uptime(void);
netsnmp_mib_handler *netsnmp_get_bare_stash_cache_handler(void);
netsnmp_mib_handler *netsnmp_get_bulk_to_next_handler(void);
netsnmp_mib_handler *__cdecl netsnmp_get_cache_handler(int, NetsnmpCacheLoad *, NetsnmpCacheFree *, const oid *, int);
netsnmp_agent_session *netsnmp_get_current_agent_session(void);
netsnmp_mib_handler *netsnmp_get_debug_handler(void);
netsnmp_mib_handler *netsnmp_get_instance_handler(void);
void *__cdecl netsnmp_get_list_data(netsnmp_data_list *head, const char *node);
netsnmp_data_list *__cdecl netsnmp_get_list_node(netsnmp_data_list *head, const char *name);
int netsnmp_get_lookup_cache_size(void);
char *netsnmp_get_mib_directory(void);
netsnmp_mib_handler *__cdecl netsnmp_get_mode_end_call_handler(netsnmp_mode_handler_list *endlist);
netsnmp_mib_handler *__cdecl netsnmp_get_multiplexer_handler(netsnmp_mib_handler_methods *);
netsnmp_mib_handler *netsnmp_get_read_only_handler(void);
netsnmp_mib_handler *__cdecl netsnmp_get_row_merge_handler(int);
netsnmp_mib_handler *__cdecl netsnmp_get_scalar_group_handler(oid first, oid last);
netsnmp_mib_handler *netsnmp_get_scalar_handler(void);
netsnmp_mib_handler *netsnmp_get_serialize_handler(void);
netsnmp_mib_handler *netsnmp_get_stash_cache_handler(void);
netsnmp_mib_handler *netsnmp_get_stash_to_next_handler(void);
netsnmp_mib_handler *__cdecl netsnmp_get_table_data_handler(netsnmp_table_data *table);
netsnmp_mib_handler *__cdecl netsnmp_get_table_data_set_handler(netsnmp_table_data_set *);
netsnmp_mib_handler *__cdecl netsnmp_get_table_handler(netsnmp_table_registration_info *tabreq);
netsnmp_mib_handler *__cdecl netsnmp_get_table_iterator_handler(netsnmp_iterator_info *iinfo);
netsnmp_mib_handler *__cdecl netsnmp_get_tdata_handler(netsnmp_tdata *table);
netsnmp_mib_handler *__cdecl netsnmp_get_timed_bare_stash_cache_handler(int timeout, oid *rootoid, size_t rootoid_len);
netsnmp_mib_handler *__cdecl netsnmp_get_timed_stash_cache_handler(int timeout, oid *rootoid, size_t rootoid_len);
netsnmp_mib_handler *netsnmp_get_watched_spinlock_handler(void);
netsnmp_mib_handler *netsnmp_get_watched_timestamp_handler(void);
netsnmp_mib_handler *netsnmp_get_watcher_handler(void);
char *__cdecl netsnmp_getenv(const char *name);
int __cdecl netsnmp_gethostbyname_v4(const char *name, in_addr_t *addr_out);
netsnmp_delegated_cache *__cdecl netsnmp_handler_check_cache(netsnmp_delegated_cache *dcache);
netsnmp_mib_handler *__cdecl netsnmp_handler_dup(netsnmp_mib_handler *);
void __cdecl netsnmp_handler_free(netsnmp_mib_handler *);
void *__cdecl netsnmp_handler_get_parent_data(netsnmp_request_info *, const char *);
void __cdecl netsnmp_handler_mark_requests_as_delegated(netsnmp_request_info *, int);
netsnmp_handler_registration *__cdecl netsnmp_handler_registration_create(const char *name, netsnmp_mib_handler *handler, const oid *reg_oid, size_t reg_oid_len, int modes);
netsnmp_handler_registration *__cdecl netsnmp_handler_registration_dup(netsnmp_handler_registration *);
void __cdecl netsnmp_handler_registration_free(netsnmp_handler_registration *);
int __cdecl netsnmp_hex_to_binary(u_char **buf, size_t *buf_len, size_t *offset, int allow_realloc, const char *hex, const char *delim);
void netsnmp_init_bulk_to_next_helper(void);
void __cdecl netsnmp_init_container(netsnmp_container *c, netsnmp_container_rc *init, netsnmp_container_rc *cfree, netsnmp_container_size *size, netsnmp_container_compare *cmp, netsnmp_container_op *ins, netsnmp_container_op *rem, netsnmp_container_rtn *fnd);
void netsnmp_init_debug_helper(void);
void netsnmp_init_handler_conf(void);
void netsnmp_init_helpers(void);
void netsnmp_init_mib(void);
void netsnmp_init_mib_internals(void);
void netsnmp_init_read_only_helper(void);
void netsnmp_init_row_merge(void);
void netsnmp_init_serialize(void);
void netsnmp_init_stash_cache_helper(void);
void netsnmp_init_table_dataset(void);
netsnmp_watcher_info *__cdecl netsnmp_init_watcher_info(netsnmp_watcher_info *, void *, size_t, u_char, int);
netsnmp_watcher_info *__cdecl netsnmp_init_watcher_info6(netsnmp_watcher_info *, void *, size_t, u_char, int, size_t, size_t *);
int __cdecl netsnmp_inject_handler(netsnmp_handler_registration *reginfo, netsnmp_mib_handler *handler);
int __cdecl netsnmp_inject_handler_before(netsnmp_handler_registration *reginfo, netsnmp_mib_handler *handler, const char *before_what);
void __cdecl netsnmp_insert_iterator_context(netsnmp_request_info *, void *);
void __cdecl netsnmp_insert_table_row(netsnmp_request_info *, netsnmp_table_row *);
void __cdecl netsnmp_insert_tdata_row(netsnmp_request_info *, netsnmp_tdata_row *);
Netsnmp_Node_Handler netsnmp_instance_counter32_handler;
Netsnmp_Node_Handler netsnmp_instance_helper_handler;
Netsnmp_Node_Handler netsnmp_instance_int_handler;
Netsnmp_Node_Handler netsnmp_instance_long_handler;
Netsnmp_Node_Handler netsnmp_instance_num_file_handler;
Netsnmp_Node_Handler netsnmp_instance_uint_handler;
Netsnmp_Node_Handler netsnmp_instance_ulong_handler;
char *__cdecl netsnmp_ipv4_fmtaddr(const char *prefix, netsnmp_transport *t, void *data, int len);
char *__cdecl netsnmp_ipv6_fmtaddr(const char *prefix, netsnmp_transport *t, void *data, int len);
int __cdecl netsnmp_is_cache_valid(netsnmp_agent_request_info *);
void __cdecl netsnmp_iterator_delete_table(netsnmp_iterator_info *iinfo);
int __cdecl netsnmp_iterator_row_count(netsnmp_iterator_info *);
void *__cdecl netsnmp_iterator_row_first(netsnmp_iterator_info *);
void *__cdecl netsnmp_iterator_row_get(netsnmp_iterator_info *, void *);
void *__cdecl netsnmp_iterator_row_get_byidx(netsnmp_iterator_info *, netsnmp_variable_list *);
void *__cdecl netsnmp_iterator_row_get_byoid(netsnmp_iterator_info *, oid *, size_t);
void *__cdecl netsnmp_iterator_row_next(netsnmp_iterator_info *, void *);
void *__cdecl netsnmp_iterator_row_next_byidx(netsnmp_iterator_info *, netsnmp_variable_list *);
void *__cdecl netsnmp_iterator_row_next_byoid(netsnmp_iterator_info *, oid *, size_t);
void __cdecl netsnmp_large_fd_clr(int fd, netsnmp_large_fd_set *fdset);
int __cdecl netsnmp_large_fd_is_set(int fd, netsnmp_large_fd_set *fdset);
void __cdecl netsnmp_large_fd_set_cleanup(netsnmp_large_fd_set *fdset);
void __cdecl netsnmp_large_fd_set_init(netsnmp_large_fd_set *fdset, int setsize);
void __cdecl netsnmp_large_fd_set_resize(netsnmp_large_fd_set *fdset, int setsize);
void __cdecl netsnmp_large_fd_setfd(int fd, netsnmp_large_fd_set *fdset);
void netsnmp_logging_restart(void);
const char *__cdecl netsnmp_lookup_default_domain(const char *application);
const char *const *__cdecl netsnmp_lookup_default_domains(const char *application);
const char *__cdecl netsnmp_lookup_default_target(const char *application, const char *domain);
void *__cdecl netsnmp_malloc(size_t size);
int __cdecl netsnmp_mark_row_column_writable(netsnmp_table_row *row, int column, int writable);
u_long __cdecl netsnmp_marker_uptime(marker_t pm);
void netsnmp_mibindex_load(void);
char *__cdecl netsnmp_mibindex_lookup(const char *);
FILE *__cdecl netsnmp_mibindex_new(const char *);
const char *netsnmp_mktemp(void);
netsnmp_mode_handler_list *__cdecl netsnmp_mode_end_call_add_mode_callback(netsnmp_mode_handler_list *endlist, int mode, netsnmp_mib_handler *callbackh);
Netsnmp_Node_Handler netsnmp_mode_end_call_helper;
Netsnmp_Node_Handler netsnmp_multiplexer_helper_handler;
int __cdecl netsnmp_ncompare_cstring(const void *lhs, const void *rhs);
int __cdecl netsnmp_ncompare_netsnmp_index(const void *lhs, const void *rhs);
Netsnmp_Node_Handler netsnmp_null_handler;
int __cdecl netsnmp_oid_compare_ll(const oid *in_name1, size_t len1, const oid *in_name2, size_t len2, size_t *offpt);
int __cdecl netsnmp_oid_equals(const oid *, size_t, const oid *, size_t);
int __cdecl netsnmp_oid_find_prefix(const oid *in_name1, size_t len1, const oid *in_name2, size_t len2);
int __cdecl netsnmp_oid_is_subtree(const oid *, size_t, const oid *, size_t);
int __cdecl netsnmp_oid_stash_add_data(netsnmp_oid_stash_node **root, const oid *lookup, size_t lookup_len, void *mydata);
netsnmp_oid_stash_node *netsnmp_oid_stash_create_node(void);
netsnmp_oid_stash_node *__cdecl netsnmp_oid_stash_create_sized_node(size_t mysize);
void __cdecl netsnmp_oid_stash_free(netsnmp_oid_stash_node **root, NetSNMPStashFreeNode *freefn);
void *__cdecl netsnmp_oid_stash_get_data(netsnmp_oid_stash_node *root, const oid *lookup, size_t lookup_len);
netsnmp_oid_stash_node *__cdecl netsnmp_oid_stash_get_node(netsnmp_oid_stash_node *root, const oid *lookup, size_t lookup_len);
netsnmp_oid_stash_node *__cdecl netsnmp_oid_stash_getnext_node(netsnmp_oid_stash_node *root, oid *lookup, size_t lookup_len);
NetSNMPStashFreeNode netsnmp_oid_stash_no_free;
void __cdecl netsnmp_oid_stash_store(netsnmp_oid_stash_node *root, const char *tokenname, NetSNMPStashDump *dumpfn, oid *curoid, size_t curoid_len);
SNMPCallback netsnmp_oid_stash_store_all;
int __cdecl netsnmp_oid_tree_equals(const oid *, size_t, const oid *, size_t);
Netsnmp_Node_Handler netsnmp_old_api_helper;
int netsnmp_os_kernel_width(void);
int __cdecl netsnmp_os_prematch(const char *ospmname, const char *ospmrelprefix);
int __cdecl netsnmp_parse_args(int argc, char **argv, netsnmp_session *session, const char *localOpts, void (__cdecl *proc)(int, char *const *, int), int flags);
int __cdecl netsnmp_query_get(netsnmp_variable_list *, netsnmp_session *);
netsnmp_session *netsnmp_query_get_default_session(void);
netsnmp_session *netsnmp_query_get_default_session_unchecked(void);
int __cdecl netsnmp_query_getnext(netsnmp_variable_list *, netsnmp_session *);
int __cdecl netsnmp_query_set(netsnmp_variable_list *, netsnmp_session *);
void __cdecl netsnmp_query_set_default_session(netsnmp_session *);
int __cdecl netsnmp_query_walk(netsnmp_variable_list *, netsnmp_session *);
void __cdecl netsnmp_read_data_callback(const char *token, char *line);
struct tree *__cdecl netsnmp_read_module(const char *);
Netsnmp_Node_Handler netsnmp_read_only_helper;
void *__cdecl netsnmp_realloc(void *ptr, size_t size);
int __cdecl netsnmp_register_agent_nsap(struct netsnmp_transport_s *t);
void __cdecl netsnmp_register_auto_data_table(netsnmp_table_data_set *table_set, char *registration_name);
int __cdecl netsnmp_register_cache_handler(netsnmp_handler_registration *reginfo, int, NetsnmpCacheLoad *, NetsnmpCacheFree *);
int __cdecl netsnmp_register_callback(int major, int minor, SNMPCallback *new_callback, void *arg, int priority);
int __cdecl netsnmp_register_default_domain(const char *application, const char *domain);
int __cdecl netsnmp_register_default_target(const char *application, const char *domain, const char *target);
int __cdecl netsnmp_register_handler(netsnmp_handler_registration *reginfo);
void __cdecl netsnmp_register_handler_by_name(const char *, netsnmp_mib_handler *);
int __cdecl netsnmp_register_handler_nocallback(netsnmp_handler_registration *reginfo);
int __cdecl netsnmp_register_instance(netsnmp_handler_registration *reginfo);
int __cdecl netsnmp_register_int_instance(const char *name, const oid *reg_oid, size_t reg_oid_len, int *it, Netsnmp_Node_Handler *subhandler);
int __cdecl netsnmp_register_int_instance_context(const char *name, const oid *reg_oid, size_t reg_oid_len, int *it, Netsnmp_Node_Handler *subhandler, const char *contextName);
int __cdecl netsnmp_register_int_scalar(const char *name, const oid *reg_oid, size_t reg_oid_len, int *it, Netsnmp_Node_Handler *subhandler);
netsnmp_log_handler *__cdecl netsnmp_register_loghandler(int type, int pri);
int __cdecl netsnmp_register_long_instance(const char *name, const oid *reg_oid, size_t reg_oid_len, __int64 *it, Netsnmp_Node_Handler *subhandler);
int __cdecl netsnmp_register_long_instance_context(const char *name, const oid *reg_oid, size_t reg_oid_len, __int64 *it, Netsnmp_Node_Handler *subhandler, const char *contextName);
int __cdecl netsnmp_register_long_scalar(const char *name, const oid *reg_oid, size_t reg_oid_len, __int64 *it, Netsnmp_Node_Handler *subhandler);
int __cdecl netsnmp_register_mib(const char *, struct variable *, size_t, size_t, oid *, size_t, int, int, oid, netsnmp_session *, const char *, int, int, struct netsnmp_handler_registration_s *, int);
int __cdecl netsnmp_register_mib_table_row(const char *, struct variable *, size_t, size_t, oid *, size_t, int, int, netsnmp_session *, const char *, int, int);
int __cdecl netsnmp_register_null(oid *, size_t);
int __cdecl netsnmp_register_null_context(oid *, size_t, const char *contextName);
int __cdecl netsnmp_register_num_file_instance(const char *name, const oid *reg_oid, size_t reg_oid_len, const char *file_name, int asn_type, int mode, Netsnmp_Node_Handler *subhandler, const char *contextName);
int __cdecl netsnmp_register_old_api(const char *moduleName, struct variable *var, size_t varsize, size_t numvars, oid *mibloc, size_t mibloclen, int priority, int range_subid, oid range_ubound, netsnmp_session *ss, const char *context, int timeout, int flags);
int __cdecl netsnmp_register_read_only_counter32_instance(const char *name, const oid *reg_oid, size_t reg_oid_len, u_long *it, Netsnmp_Node_Handler *subhandler);
int __cdecl netsnmp_register_read_only_counter32_instance_context(const char *name, const oid *reg_oid, size_t reg_oid_len, u_long *it, Netsnmp_Node_Handler *subhandler, const char *contextName);
int __cdecl netsnmp_register_read_only_counter32_scalar(const char *name, const oid *reg_oid, size_t reg_oid_len, u_long *it, Netsnmp_Node_Handler *subhandler);
int __cdecl netsnmp_register_read_only_instance(netsnmp_handler_registration *reginfo);
int __cdecl netsnmp_register_read_only_int_instance(const char *name, const oid *reg_oid, size_t reg_oid_len, int *it, Netsnmp_Node_Handler *subhandler);
int __cdecl netsnmp_register_read_only_int_instance_context(const char *name, const oid *reg_oid, size_t reg_oid_len, int *it, Netsnmp_Node_Handler *subhandler, const char *contextName);
int __cdecl netsnmp_register_read_only_int_scalar(const char *name, const oid *reg_oid, size_t reg_oid_len, int *it, Netsnmp_Node_Handler *subhandler);
int __cdecl netsnmp_register_read_only_long_instance(const char *name, const oid *reg_oid, size_t reg_oid_len, __int64 *it, Netsnmp_Node_Handler *subhandler);
int __cdecl netsnmp_register_read_only_long_instance_context(const char *name, const oid *reg_oid, size_t reg_oid_len, __int64 *it, Netsnmp_Node_Handler *subhandler, const char *contextName);
int __cdecl netsnmp_register_read_only_long_scalar(const char *name, const oid *reg_oid, size_t reg_oid_len, __int64 *it, Netsnmp_Node_Handler *subhandler);
int __cdecl netsnmp_register_read_only_scalar(netsnmp_handler_registration *reginfo);
int __cdecl netsnmp_register_read_only_table_data(netsnmp_handler_registration *reginfo, netsnmp_table_data *table, netsnmp_table_registration_info *table_info);
int __cdecl netsnmp_register_read_only_ulong_instance(const char *name, const oid *reg_oid, size_t reg_oid_len, u_long *it, Netsnmp_Node_Handler *subhandler);
int __cdecl netsnmp_register_read_only_ulong_instance_context(const char *name, const oid *reg_oid, size_t reg_oid_len, u_long *it, Netsnmp_Node_Handler *subhandler, const char *contextName);
int __cdecl netsnmp_register_read_only_ulong_scalar(const char *name, const oid *reg_oid, size_t reg_oid_len, u_long *it, Netsnmp_Node_Handler *subhandler);
int __cdecl netsnmp_register_row_merge(netsnmp_handler_registration *reginfo);
void __cdecl netsnmp_register_save_list(netsnmp_data_list **datalist, const char *type, const char *token, Netsnmp_Save_List_Data *data_list_save_ptr, Netsnmp_Read_List_Data *data_list_read_ptr, Netsnmp_Free_List_Data *data_list_free_ptr);
int __cdecl netsnmp_register_scalar(netsnmp_handler_registration *reginfo);
int __cdecl netsnmp_register_scalar_group(netsnmp_handler_registration *reginfo, oid first, oid last);
int __cdecl netsnmp_register_serialize(netsnmp_handler_registration *reginfo);
void netsnmp_register_service_handlers(void);
int __cdecl netsnmp_register_statistic_handler(netsnmp_handler_registration *reginfo, oid start, int begin, int end);
int __cdecl netsnmp_register_table(netsnmp_handler_registration *reginfo, netsnmp_table_registration_info *tabreq);
int __cdecl netsnmp_register_table_data(netsnmp_handler_registration *reginfo, netsnmp_table_data *table, netsnmp_table_registration_info *table_info);
int __cdecl netsnmp_register_table_data_set(netsnmp_handler_registration *, netsnmp_table_data_set *, netsnmp_table_registration_info *);
int __cdecl netsnmp_register_table_iterator(netsnmp_handler_registration *reginfo, netsnmp_iterator_info *iinfo);
int __cdecl netsnmp_register_ulong_instance(const char *name, const oid *reg_oid, size_t reg_oid_len, u_long *it, Netsnmp_Node_Handler *subhandler);
int __cdecl netsnmp_register_ulong_instance_context(const char *name, const oid *reg_oid, size_t reg_oid_len, u_long *it, Netsnmp_Node_Handler *subhandler, const char *contextName);
int __cdecl netsnmp_register_ulong_scalar(const char *name, const oid *reg_oid, size_t reg_oid_len, u_long *it, Netsnmp_Node_Handler *subhandler);
int __cdecl netsnmp_register_watched_instance(netsnmp_handler_registration *reginfo, netsnmp_watcher_info *winfo);
int __cdecl netsnmp_register_watched_scalar(netsnmp_handler_registration *reginfo, netsnmp_watcher_info *winfo);
int __cdecl netsnmp_register_watched_spinlock(netsnmp_handler_registration *reginfo, int *spinlock);
int __cdecl netsnmp_register_watched_timestamp(netsnmp_handler_registration *reginfo, marker_t timestamp);
void __cdecl netsnmp_remove_and_free_agent_snmp_session(netsnmp_agent_session *asp);
int __cdecl netsnmp_remove_delegated_requests_for_session(netsnmp_session *sess);
int __cdecl netsnmp_remove_list_node(netsnmp_data_list **realhead, const char *name);
int __cdecl netsnmp_remove_loghandler(netsnmp_log_handler *logh);
void __cdecl netsnmp_remove_tdata_row(netsnmp_request_info *, netsnmp_tdata_row *);
void __cdecl netsnmp_request_add_list_data(netsnmp_request_info *request, netsnmp_data_list *node);
void *__cdecl netsnmp_request_get_list_data(netsnmp_request_info *request, const char *name);
int __cdecl netsnmp_request_remove_list_data(netsnmp_request_info *request, const char *name);
int __cdecl netsnmp_request_set_error(netsnmp_request_info *request, int error_value);
int __cdecl netsnmp_request_set_error_all(netsnmp_request_info *requests, int error_value);
int __cdecl netsnmp_request_set_error_idx(netsnmp_request_info *requests, int error_value, int idx);
int __cdecl netsnmp_row_create(netsnmp_session *sess, netsnmp_variable_list *vars, int row_status_index);
Netsnmp_Node_Handler netsnmp_row_merge_helper_handler;
int __cdecl netsnmp_row_merge_status_first(netsnmp_handler_registration *reginfo, netsnmp_agent_request_info *reqinfo);
int __cdecl netsnmp_row_merge_status_last(netsnmp_handler_registration *reginfo, netsnmp_agent_request_info *reqinfo);
int __cdecl netsnmp_save_all_data(netsnmp_data_list *head, const char *type, const char *token, Netsnmp_Save_List_Data *data_list_save_ptr);
SNMPCallback netsnmp_save_all_data_callback;
Netsnmp_Node_Handler netsnmp_scalar_group_helper_handler;
Netsnmp_Node_Handler netsnmp_scalar_helper_handler;
int __cdecl netsnmp_send_traps(int trap, int specific, const oid *enterprise, int enterprise_length, netsnmp_variable_list *vars, const char *context, int flags);
Netsnmp_Node_Handler netsnmp_serialize_helper_handler;
int __cdecl netsnmp_sess_config_and_open_transport(netsnmp_session *in_session, netsnmp_transport *transport);
int __cdecl netsnmp_sess_config_transport(struct netsnmp_container_s *transport_configuration, struct netsnmp_transport_s *transport);
void __cdecl netsnmp_sess_log_error(int priority, const char *prog_string, netsnmp_session *ss);
void __cdecl netsnmp_set_agent_starttime(marker_t s);
void __cdecl netsnmp_set_agent_uptime(u_long hsec);
int __cdecl netsnmp_set_all_requests_error(netsnmp_agent_request_info *reqinfo, netsnmp_request_info *requests, int error_value);
void __cdecl netsnmp_set_line_buffering(FILE *stream);
void __cdecl netsnmp_set_lookup_cache_size(int newsize);
void __cdecl netsnmp_set_mib_directory(const char *dir);
int __cdecl netsnmp_set_mode_request_error(int mode, netsnmp_request_info *request, int error_value);
int __cdecl netsnmp_set_non_blocking_mode(int sock, int non_blocking_mode);
int __cdecl netsnmp_set_request_error(netsnmp_agent_request_info *reqinfo, netsnmp_request_info *request, int error_value);
int __cdecl netsnmp_set_row_column(netsnmp_table_row *, unsigned int, int, const void *, size_t);
oid netsnmp_snmpALIASDomain[];
oid netsnmp_snmpTCPDomain[];
int __cdecl netsnmp_sock_buffer_set(int s, int optname, int local, int size);
int __cdecl netsnmp_sockaddr_in(struct sockaddr_in *addr, const char *peername, int remote_port);
int __cdecl netsnmp_sockaddr_in2(struct sockaddr_in *addr, const char *inpeername, const char *default_target);
int __cdecl netsnmp_sockaddr_in6(struct sockaddr_in6 *addr, const char *inpeername, int remote_port);
int __cdecl netsnmp_sockaddr_in6_2(struct sockaddr_in6 *addr, const char *inpeername, const char *default_target);
int __cdecl netsnmp_socketbase_close(netsnmp_transport *t);
netsnmp_mib_handler *netsnmp_sparse_table_handler_get(void);
int __cdecl netsnmp_sparse_table_register(netsnmp_handler_registration *reginfo, netsnmp_table_registration_info *tabreq);
void __cdecl netsnmp_sprint_realloc_objid(u_char **buf, size_t *buf_len, size_t *out_len, int allow_realloc, int *buf_overflow, const oid *objid, size_t objidlen);
struct tree *__cdecl netsnmp_sprint_realloc_objid_tree(u_char **buf, size_t *buf_len, size_t *out_len, int allow_realloc, int *buf_overflow, const oid *objid, size_t objidlen);
Netsnmp_Node_Handler netsnmp_stash_cache_helper;
int __cdecl netsnmp_stash_cache_update(netsnmp_mib_handler *handler, netsnmp_handler_registration *reginfo, netsnmp_agent_request_info *reqinfo, netsnmp_request_info *requests, netsnmp_stash_cache_info *cinfo);
Netsnmp_Node_Handler netsnmp_stash_to_next_helper;
int __cdecl netsnmp_state_machine_run(netsnmp_state_machine_input *input);
int __cdecl netsnmp_str2oid(const char *S, oid *O, int L);
int __cdecl netsnmp_str_to_gid(const char *grouporgid);
int __cdecl netsnmp_str_to_uid(const char *useroruid);
char *__cdecl netsnmp_strdup(const char *s1);
char *__cdecl netsnmp_strdup_and_null(const u_char *from, size_t from_len);
netsnmp_subtree *__cdecl netsnmp_subtree_find(oid *, size_t, netsnmp_subtree *, const char *context_name);
netsnmp_subtree *__cdecl netsnmp_subtree_find_first(const char *context_name);
netsnmp_subtree *__cdecl netsnmp_subtree_find_next(oid *, size_t, netsnmp_subtree *, const char *context_name);
netsnmp_subtree *__cdecl netsnmp_subtree_find_prev(oid *, size_t, netsnmp_subtree *, const char *context_name);
void __cdecl netsnmp_sysORTable_foreach(void (__cdecl *)(const struct sysORTable *, void *), void *);
int __cdecl netsnmp_table_array_check_row_status(netsnmp_table_array_callbacks *cb, netsnmp_request_group *ag, __int64 *rs_new, __int64 *rs_old);
Netsnmp_Node_Handler netsnmp_table_array_helper_handler;
int __cdecl netsnmp_table_array_register(netsnmp_handler_registration *reginfo, netsnmp_table_registration_info *tabreq, netsnmp_table_array_callbacks *cb, netsnmp_container *container, int group_rows);
int __cdecl netsnmp_table_build_oid(netsnmp_handler_registration *reginfo, netsnmp_request_info *reqinfo, netsnmp_table_request_info *table_info);
int __cdecl netsnmp_table_build_oid_from_index(netsnmp_handler_registration *reginfo, netsnmp_request_info *reqinfo, netsnmp_table_request_info *table_info);
int __cdecl netsnmp_table_build_result(netsnmp_handler_registration *reginfo, netsnmp_request_info *reqinfo, netsnmp_table_request_info *table_info, u_char type, u_char *result, size_t result_len);
int __cdecl netsnmp_table_container_register(netsnmp_handler_registration *reginfo, netsnmp_table_registration_info *tabreq, netsnmp_table_array_callbacks *cb, netsnmp_container *container, int group_rows);
int __cdecl netsnmp_table_data_add_row(netsnmp_table_data *table, netsnmp_table_row *row);
int __cdecl netsnmp_table_data_build_result(netsnmp_handler_registration *reginfo, netsnmp_agent_request_info *reqinfo, netsnmp_request_info *request, netsnmp_table_row *row, int column, u_char type, u_char *result_data, size_t result_data_len);
netsnmp_table_row *__cdecl netsnmp_table_data_clone_row(netsnmp_table_row *row);
void *__cdecl netsnmp_table_data_delete_row(netsnmp_table_row *row);
void __cdecl netsnmp_table_data_generate_index_oid(netsnmp_table_row *row);
netsnmp_table_row *__cdecl netsnmp_table_data_get(netsnmp_table_data *table, netsnmp_variable_list *indexes);
netsnmp_table_row *__cdecl netsnmp_table_data_get_first_row(netsnmp_table_data *table);
netsnmp_table_row *__cdecl netsnmp_table_data_get_from_oid(netsnmp_table_data *table, oid *searchfor, size_t searchfor_len);
netsnmp_table_row *__cdecl netsnmp_table_data_get_next_row(netsnmp_table_data *table, netsnmp_table_row *row);
Netsnmp_Node_Handler netsnmp_table_data_helper_handler;
int __cdecl netsnmp_table_data_num_rows(netsnmp_table_data *table);
void *__cdecl netsnmp_table_data_remove_and_delete_row(netsnmp_table_data *table, netsnmp_table_row *row);
netsnmp_table_row *__cdecl netsnmp_table_data_remove_row(netsnmp_table_data *table, netsnmp_table_row *row);
void __cdecl netsnmp_table_data_replace_row(netsnmp_table_data *table, netsnmp_table_row *origrow, netsnmp_table_row *newrow);
netsnmp_table_row *__cdecl netsnmp_table_data_set_clone_row(netsnmp_table_row *row);
netsnmp_table_data_set_storage *__cdecl netsnmp_table_data_set_find_column(netsnmp_table_data_set_storage *, unsigned int);
netsnmp_table_row *__cdecl netsnmp_table_data_set_get_first_row(netsnmp_table_data_set *table);
netsnmp_table_row *__cdecl netsnmp_table_data_set_get_next_row(netsnmp_table_data_set *table, netsnmp_table_row *row);
Netsnmp_Node_Handler netsnmp_table_data_set_helper_handler;
void __cdecl netsnmp_table_dataset_add_index(netsnmp_table_data_set *table, u_char type);
void __cdecl netsnmp_table_dataset_add_row(netsnmp_table_data_set *table, netsnmp_table_row *row);
void __cdecl netsnmp_table_dataset_delete_all_data(netsnmp_table_data_set_storage *data);
void __cdecl netsnmp_table_dataset_delete_row(netsnmp_table_row *row);
netsnmp_table_row *__cdecl netsnmp_table_dataset_get_newrow(netsnmp_request_info *request, netsnmp_agent_request_info *reqinfo, int rootoid_len, netsnmp_table_data_set *datatable, netsnmp_table_request_info *table_info);
netsnmp_oid_stash_node **__cdecl netsnmp_table_dataset_get_or_create_stash(netsnmp_agent_request_info *ari, netsnmp_table_data_set *tds, netsnmp_table_request_info *tri);
void __cdecl netsnmp_table_dataset_remove_and_delete_row(netsnmp_table_data_set *table, netsnmp_table_row *row);
void __cdecl netsnmp_table_dataset_remove_row(netsnmp_table_data_set *table, netsnmp_table_row *row);
void __cdecl netsnmp_table_dataset_replace_row(netsnmp_table_data_set *table, netsnmp_table_row *origrow, netsnmp_table_row *newrow);
netsnmp_oid_stash_node **__cdecl netsnmp_table_get_or_create_row_stash(netsnmp_agent_request_info *reqinfo, const u_char *storage_name);
void netsnmp_table_helper_add_indexes(netsnmp_table_registration_info *tinfo, ...);
netsnmp_index *__cdecl netsnmp_table_index_find_next_row(netsnmp_container *c, netsnmp_table_request_info *tblreq);
Netsnmp_Node_Handler netsnmp_table_iterator_helper_handler;
unsigned int __cdecl netsnmp_table_next_column(netsnmp_table_request_info *table_info);
void __cdecl netsnmp_table_registration_info_free(netsnmp_table_registration_info *);
int __cdecl netsnmp_table_set_add_default_row(netsnmp_table_data_set *, unsigned int, int, int, void *default_value, size_t default_value_len);
void netsnmp_table_set_add_indexes(netsnmp_table_data_set *tset, ...);
void netsnmp_table_set_multi_add_default_row(netsnmp_table_data_set *, ...);
int __cdecl netsnmp_table_set_num_rows(netsnmp_table_data_set *table);
netsnmp_transport *__cdecl netsnmp_tcp6_transport(struct sockaddr_in6 *addr, int local);
void netsnmp_tcp_ctor(void);
netsnmp_transport *__cdecl netsnmp_tcp_transport(struct sockaddr_in *addr, int local);
int __cdecl netsnmp_tcpbase_recv(netsnmp_transport *t, void *buf, int size, void **opaque, int *olength);
int __cdecl netsnmp_tcpbase_send(netsnmp_transport *t, void *buf, int size, void **opaque, int *olength);
void netsnmp_tcpipv6_ctor(void);
int __cdecl netsnmp_tdata_add_row(netsnmp_tdata *table, netsnmp_tdata_row *row);
netsnmp_tdata_row *__cdecl netsnmp_tdata_clone_row(netsnmp_tdata_row *row);
int __cdecl netsnmp_tdata_compare_idx(netsnmp_tdata_row *row, netsnmp_variable_list *indexes);
int __cdecl netsnmp_tdata_compare_oid(netsnmp_tdata_row *row, oid *compareto, size_t compareto_len);
int __cdecl netsnmp_tdata_compare_subtree_idx(netsnmp_tdata_row *row, netsnmp_variable_list *indexes);
int __cdecl netsnmp_tdata_compare_subtree_oid(netsnmp_tdata_row *row, oid *compareto, size_t compareto_len);
int __cdecl netsnmp_tdata_copy_row(netsnmp_tdata_row *dst_row, netsnmp_tdata_row *src_row);
netsnmp_tdata_row *netsnmp_tdata_create_row(void);
netsnmp_tdata *__cdecl netsnmp_tdata_create_table(const char *name, __int64 flags);
void *__cdecl netsnmp_tdata_delete_row(netsnmp_tdata_row *row);
void __cdecl netsnmp_tdata_delete_table(netsnmp_tdata *table);
netsnmp_container *__cdecl netsnmp_tdata_extract_container(netsnmp_request_info *);
void *__cdecl netsnmp_tdata_extract_entry(netsnmp_request_info *);
netsnmp_tdata_row *__cdecl netsnmp_tdata_extract_row(netsnmp_request_info *);
netsnmp_tdata *__cdecl netsnmp_tdata_extract_table(netsnmp_request_info *);
int __cdecl netsnmp_tdata_register(netsnmp_handler_registration *reginfo, netsnmp_tdata *table, netsnmp_table_registration_info *table_info);
void *__cdecl netsnmp_tdata_remove_and_delete_row(netsnmp_tdata *table, netsnmp_tdata_row *row);
netsnmp_tdata_row *__cdecl netsnmp_tdata_remove_row(netsnmp_tdata *table, netsnmp_tdata_row *row);
void __cdecl netsnmp_tdata_replace_row(netsnmp_tdata *table, netsnmp_tdata_row *origrow, netsnmp_tdata_row *newrow);
int __cdecl netsnmp_tdata_row_count(netsnmp_tdata *table);
void *__cdecl netsnmp_tdata_row_entry(netsnmp_tdata_row *row);
netsnmp_tdata_row *__cdecl netsnmp_tdata_row_first(netsnmp_tdata *table);
netsnmp_tdata_row *__cdecl netsnmp_tdata_row_get(netsnmp_tdata *table, netsnmp_tdata_row *row);
netsnmp_tdata_row *__cdecl netsnmp_tdata_row_get_byidx(netsnmp_tdata *table, netsnmp_variable_list *indexes);
netsnmp_tdata_row *__cdecl netsnmp_tdata_row_get_byoid(netsnmp_tdata *table, oid *searchfor, size_t searchfor_len);
netsnmp_tdata_row *__cdecl netsnmp_tdata_row_next(netsnmp_tdata *table, netsnmp_tdata_row *row);
netsnmp_tdata_row *__cdecl netsnmp_tdata_row_next_byidx(netsnmp_tdata *table, netsnmp_variable_list *indexes);
netsnmp_tdata_row *__cdecl netsnmp_tdata_row_next_byoid(netsnmp_tdata *table, oid *searchfor, size_t searchfor_len);
int __cdecl netsnmp_tdata_unregister(netsnmp_handler_registration *reginfo);
void netsnmp_tdomain_init(void);
int __cdecl netsnmp_tdomain_register(netsnmp_tdomain *domain);
int __cdecl netsnmp_tdomain_support(const oid *in_oid, size_t in_len, const oid **out_oid, size_t *out_len);
netsnmp_transport *__cdecl netsnmp_tdomain_transport(const char *str, int local, const char *default_domain);
netsnmp_transport *__cdecl netsnmp_tdomain_transport_full(const char *application, const char *str, int local, const char *default_domain, const char *default_target);
netsnmp_transport *__cdecl netsnmp_tdomain_transport_oid(const oid *dom, size_t dom_len, const u_char *o, size_t o_len, int local);
int __cdecl netsnmp_tdomain_unregister(netsnmp_tdomain *domain);
u_long __cdecl netsnmp_timeval_uptime(struct timeval *tv);
int __cdecl netsnmp_transport_add_to_list(netsnmp_transport_list **transport_list, netsnmp_transport *transport);
int __cdecl netsnmp_transport_config_compare(netsnmp_transport_config *left, netsnmp_transport_config *right);
netsnmp_transport *__cdecl netsnmp_transport_copy(netsnmp_transport *t);
netsnmp_transport_config *__cdecl netsnmp_transport_create_config(char *key, char *value);
void __cdecl netsnmp_transport_free(netsnmp_transport *t);
netsnmp_transport *__cdecl netsnmp_transport_open(const char *application, const char *str, int local);
netsnmp_transport *__cdecl netsnmp_transport_open_client(const char *application, const char *str);
netsnmp_transport *__cdecl netsnmp_transport_open_server(const char *application, const char *str);
char *__cdecl netsnmp_transport_peer_string(netsnmp_transport *t, void *data, int len);
int __cdecl netsnmp_transport_recv(netsnmp_transport *t, void *data, int len, void **opaque, int *olength);
int __cdecl netsnmp_transport_remove_from_list(netsnmp_transport_list **transport_list, netsnmp_transport *transport);
int __cdecl netsnmp_transport_send(netsnmp_transport *t, void *data, int len, void **opaque, int *olength);
void netsnmp_udp6_agent_config_tokens_register(void);
int __cdecl netsnmp_udp6_getSecName(void *opaque, int olength, const char *community, int community_len, const char **secname, const char **contextName);
void __cdecl netsnmp_udp6_parse_security(const char *token, char *param);
void netsnmp_udp_agent_config_tokens_register(void);
void netsnmp_udp_ctor(void);
char *__cdecl netsnmp_udp_fmtaddr(netsnmp_transport *t, void *data, int len);
int __cdecl netsnmp_udp_getSecName(void *opaque, int olength, const char *community, size_t community_len, const char **secname, const char **contextName);
void __cdecl netsnmp_udp_parse_security(const char *token, char *param);
netsnmp_transport *__cdecl netsnmp_udp_transport(struct sockaddr_in *addr, int local);
int __cdecl netsnmp_udpbase_recv(netsnmp_transport *t, void *buf, int size, void **opaque, int *olength);
int __cdecl netsnmp_udpbase_send(netsnmp_transport *t, void *buf, int size, void **opaque, int *olength);
netsnmp_transport *__cdecl netsnmp_udpipv4base_transport(struct sockaddr_in *addr, int local);
void netsnmp_udpipv6_ctor(void);
void netsnmp_unix_agent_config_tokens_register(void);
void __cdecl netsnmp_unix_create_path_with_mode(int mode);
void netsnmp_unix_ctor(void);
void netsnmp_unix_dont_create_path(void);
int __cdecl netsnmp_unix_getSecName(void *opaque, int olength, const char *community, size_t community_len, const char **secName, const char **contextName);
void __cdecl netsnmp_unix_parse_security(const char *token, char *param);
netsnmp_transport *__cdecl netsnmp_unix_transport(struct sockaddr_un *addr, int local);
int __cdecl netsnmp_unload_module(const char *name);
int __cdecl netsnmp_unregister_handler(netsnmp_handler_registration *reginfo);
int __cdecl netsnmp_unregister_mib_table_row(oid *mibloc, size_t mibloclen, int priority, int var_subid, oid range_ubound, const char *context);
int __cdecl netsnmp_unregister_table(netsnmp_handler_registration *reginfo);
int __cdecl netsnmp_update_indexes_from_variable_list(netsnmp_table_request_info *tri);
int __cdecl netsnmp_update_variable_list_from_index(netsnmp_table_request_info *);
struct vacm_viewEntry *__cdecl netsnmp_view_get(struct vacm_viewEntry *head, const char *viewName, oid *viewSubtree, size_t viewSubtreeLen, int mode);
Netsnmp_Node_Handler netsnmp_watched_spinlock_handler;
Netsnmp_Node_Handler netsnmp_watched_timestamp_handler;
int __cdecl netsnmp_watched_timestamp_register(netsnmp_mib_handler *whandler, netsnmp_handler_registration *reginfo, marker_t timestamp);
Netsnmp_Node_Handler netsnmp_watcher_helper_handler;
FIELD *__cdecl new_field(int, int, int, int, int, int);
FIELDTYPE *__cdecl new_fieldtype(bool (__cdecl *const field_check)(FIELD *, const void *), bool (__cdecl *const char_check)(int, const void *));
FORM *__cdecl new_form(FIELD **);
ITEM *__cdecl new_item(const char *, const char *);
MENU *__cdecl new_menu(ITEM **);
bool __cdecl new_page(const FIELD *);
PANEL *__cdecl new_panel(WINDOW *);
locale_t __cdecl newlocale(int, const char *, locale_t);
WINDOW *__cdecl newpad(int, int);
WINDOW *newscr;
SCREEN *__cdecl newterm(char *, FILE *, FILE *);
WINDOW *__cdecl newwin(int, int, int, int);
HIST_ENTRY *next_history(void);
double __cdecl nextafter(double, double);
float __cdecl nextafterf(float, float);
long double __cdecl nextafterl(long double, long double);
double __cdecl nexttoward(double, long double);
float __cdecl nexttowardf(float, long double);
long double __cdecl nexttowardl(long double, long double);
wint_t __cdecl nextwctype(wint_t, wctype_t);
wint_t __cdecl nextwctype_l(wint_t, wctype_t, locale_t);
uint32_t nfs_fs_attr_bitmap[2];
uint32_t nfs_getattr_bitmap[2];
uint32_t nfs_object_attr_bitmap[2];
int nfs_ticks;
int __cdecl nfssvc(int, void *);
int __cdecl nftw(const char *, int (__cdecl *)(const char *, const struct stat *, int, struct FTW *), int, int);
int __cdecl nice(int);
int nl(void);
char *__cdecl nl_langinfo(nl_item);
char *__cdecl nl_langinfo_l(nl_item, locale_t);
int __cdecl nlist(const char *filename, struct nlist *list);
nlm4_res *__cdecl nlm4_cancel_4(nlm4_cancargs *, CLIENT *);
nlm4_res *__cdecl nlm4_cancel_4_svc(nlm4_cancargs *, struct svc_req *);
void *__cdecl nlm4_cancel_msg_4(nlm4_cancargs *, CLIENT *);
void *__cdecl nlm4_cancel_msg_4_svc(nlm4_cancargs *, struct svc_req *);
void *__cdecl nlm4_cancel_res_4(nlm4_res *, CLIENT *);
void *__cdecl nlm4_cancel_res_4_svc(nlm4_res *, struct svc_req *);
void *__cdecl nlm4_free_all_4(nlm4_notify *, CLIENT *);
void *__cdecl nlm4_free_all_4_svc(nlm4_notify *, struct svc_req *);
nlm4_res *__cdecl nlm4_granted_4(nlm4_testargs *, CLIENT *);
nlm4_res *__cdecl nlm4_granted_4_svc(nlm4_testargs *, struct svc_req *);
void *__cdecl nlm4_granted_msg_4(nlm4_testargs *, CLIENT *);
void *__cdecl nlm4_granted_msg_4_svc(nlm4_testargs *, struct svc_req *);
void *__cdecl nlm4_granted_res_4(nlm4_res *, CLIENT *);
void *__cdecl nlm4_granted_res_4_svc(nlm4_res *, struct svc_req *);
nlm4_res *__cdecl nlm4_lock_4(nlm4_lockargs *, CLIENT *);
nlm4_res *__cdecl nlm4_lock_4_svc(nlm4_lockargs *, struct svc_req *);
void *__cdecl nlm4_lock_msg_4(nlm4_lockargs *, CLIENT *);
void *__cdecl nlm4_lock_msg_4_svc(nlm4_lockargs *, struct svc_req *);
void *__cdecl nlm4_lock_res_4(nlm4_res *, CLIENT *);
void *__cdecl nlm4_lock_res_4_svc(nlm4_res *, struct svc_req *);
nlm4_res *__cdecl nlm4_nm_lock_4(nlm4_lockargs *, CLIENT *);
nlm4_res *__cdecl nlm4_nm_lock_4_svc(nlm4_lockargs *, struct svc_req *);
nlm4_shareres *__cdecl nlm4_share_4(nlm4_shareargs *, CLIENT *);
nlm4_shareres *__cdecl nlm4_share_4_svc(nlm4_shareargs *, struct svc_req *);
nlm4_testres *__cdecl nlm4_test_4(nlm4_testargs *, CLIENT *);
nlm4_testres *__cdecl nlm4_test_4_svc(nlm4_testargs *, struct svc_req *);
void *__cdecl nlm4_test_msg_4(nlm4_testargs *, CLIENT *);
void *__cdecl nlm4_test_msg_4_svc(nlm4_testargs *, struct svc_req *);
void *__cdecl nlm4_test_res_4(nlm4_testres *, CLIENT *);
void *__cdecl nlm4_test_res_4_svc(nlm4_testres *, struct svc_req *);
nlm4_res *__cdecl nlm4_unlock_4(nlm4_unlockargs *, CLIENT *);
nlm4_res *__cdecl nlm4_unlock_4_svc(nlm4_unlockargs *, struct svc_req *);
void *__cdecl nlm4_unlock_msg_4(nlm4_unlockargs *, CLIENT *);
void *__cdecl nlm4_unlock_msg_4_svc(nlm4_unlockargs *, struct svc_req *);
void *__cdecl nlm4_unlock_res_4(nlm4_res *, CLIENT *);
void *__cdecl nlm4_unlock_res_4_svc(nlm4_res *, struct svc_req *);
nlm4_shareres *__cdecl nlm4_unshare_4(nlm4_shareargs *, CLIENT *);
nlm4_shareres *__cdecl nlm4_unshare_4_svc(nlm4_shareargs *, struct svc_req *);
nlm_res *__cdecl nlm_cancel_1(struct nlm_cancargs *, CLIENT *);
nlm_res *__cdecl nlm_cancel_1_svc(struct nlm_cancargs *, struct svc_req *);
nlm_res *__cdecl nlm_cancel_3(struct nlm_cancargs *, CLIENT *);
nlm_res *__cdecl nlm_cancel_3_svc(struct nlm_cancargs *, struct svc_req *);
void *__cdecl nlm_cancel_msg_1(struct nlm_cancargs *, CLIENT *);
void *__cdecl nlm_cancel_msg_1_svc(struct nlm_cancargs *, struct svc_req *);
void *__cdecl nlm_cancel_msg_3(struct nlm_cancargs *, CLIENT *);
void *__cdecl nlm_cancel_msg_3_svc(struct nlm_cancargs *, struct svc_req *);
void *__cdecl nlm_cancel_res_1(nlm_res *, CLIENT *);
void *__cdecl nlm_cancel_res_1_svc(nlm_res *, struct svc_req *);
void *__cdecl nlm_cancel_res_3(nlm_res *, CLIENT *);
void *__cdecl nlm_cancel_res_3_svc(nlm_res *, struct svc_req *);
void *__cdecl nlm_free_all_3(nlm_notify *, CLIENT *);
void *__cdecl nlm_free_all_3_svc(nlm_notify *, struct svc_req *);
nlm_res *__cdecl nlm_granted_1(struct nlm_testargs *, CLIENT *);
nlm_res *__cdecl nlm_granted_1_svc(struct nlm_testargs *, struct svc_req *);
nlm_res *__cdecl nlm_granted_3(struct nlm_testargs *, CLIENT *);
nlm_res *__cdecl nlm_granted_3_svc(struct nlm_testargs *, struct svc_req *);
void *__cdecl nlm_granted_msg_1(struct nlm_testargs *, CLIENT *);
void *__cdecl nlm_granted_msg_1_svc(struct nlm_testargs *, struct svc_req *);
void *__cdecl nlm_granted_msg_3(struct nlm_testargs *, CLIENT *);
void *__cdecl nlm_granted_msg_3_svc(struct nlm_testargs *, struct svc_req *);
void *__cdecl nlm_granted_res_1(nlm_res *, CLIENT *);
void *__cdecl nlm_granted_res_1_svc(nlm_res *, struct svc_req *);
void *__cdecl nlm_granted_res_3(nlm_res *, CLIENT *);
void *__cdecl nlm_granted_res_3_svc(nlm_res *, struct svc_req *);
nlm_res *__cdecl nlm_lock_1(struct nlm_lockargs *, CLIENT *);
nlm_res *__cdecl nlm_lock_1_svc(struct nlm_lockargs *, struct svc_req *);
nlm_res *__cdecl nlm_lock_3(struct nlm_lockargs *, CLIENT *);
nlm_res *__cdecl nlm_lock_3_svc(struct nlm_lockargs *, struct svc_req *);
void *__cdecl nlm_lock_msg_1(struct nlm_lockargs *, CLIENT *);
void *__cdecl nlm_lock_msg_1_svc(struct nlm_lockargs *, struct svc_req *);
void *__cdecl nlm_lock_msg_3(struct nlm_lockargs *, CLIENT *);
void *__cdecl nlm_lock_msg_3_svc(struct nlm_lockargs *, struct svc_req *);
void *__cdecl nlm_lock_res_1(nlm_res *, CLIENT *);
void *__cdecl nlm_lock_res_1_svc(nlm_res *, struct svc_req *);
void *__cdecl nlm_lock_res_3(nlm_res *, CLIENT *);
void *__cdecl nlm_lock_res_3_svc(nlm_res *, struct svc_req *);
nlm_res *__cdecl nlm_nm_lock_3(nlm_lockargs *, CLIENT *);
nlm_res *__cdecl nlm_nm_lock_3_svc(nlm_lockargs *, struct svc_req *);
nlm_shareres *__cdecl nlm_share_3(nlm_shareargs *, CLIENT *);
nlm_shareres *__cdecl nlm_share_3_svc(nlm_shareargs *, struct svc_req *);
void *__cdecl nlm_sm_notify_0(struct nlm_sm_status *, CLIENT *);
void *__cdecl nlm_sm_notify_0_svc(struct nlm_sm_status *, struct svc_req *);
nlm_testres *__cdecl nlm_test_1(struct nlm_testargs *, CLIENT *);
nlm_testres *__cdecl nlm_test_1_svc(struct nlm_testargs *, struct svc_req *);
nlm_testres *__cdecl nlm_test_3(struct nlm_testargs *, CLIENT *);
nlm_testres *__cdecl nlm_test_3_svc(struct nlm_testargs *, struct svc_req *);
void *__cdecl nlm_test_msg_1(struct nlm_testargs *, CLIENT *);
void *__cdecl nlm_test_msg_1_svc(struct nlm_testargs *, struct svc_req *);
void *__cdecl nlm_test_msg_3(struct nlm_testargs *, CLIENT *);
void *__cdecl nlm_test_msg_3_svc(struct nlm_testargs *, struct svc_req *);
void *__cdecl nlm_test_res_1(nlm_testres *, CLIENT *);
void *__cdecl nlm_test_res_1_svc(nlm_testres *, struct svc_req *);
void *__cdecl nlm_test_res_3(nlm_testres *, CLIENT *);
void *__cdecl nlm_test_res_3_svc(nlm_testres *, struct svc_req *);
nlm_res *__cdecl nlm_unlock_1(struct nlm_unlockargs *, CLIENT *);
nlm_res *__cdecl nlm_unlock_1_svc(struct nlm_unlockargs *, struct svc_req *);
nlm_res *__cdecl nlm_unlock_3(struct nlm_unlockargs *, CLIENT *);
nlm_res *__cdecl nlm_unlock_3_svc(struct nlm_unlockargs *, struct svc_req *);
void *__cdecl nlm_unlock_msg_1(struct nlm_unlockargs *, CLIENT *);
void *__cdecl nlm_unlock_msg_1_svc(struct nlm_unlockargs *, struct svc_req *);
void *__cdecl nlm_unlock_msg_3(struct nlm_unlockargs *, CLIENT *);
void *__cdecl nlm_unlock_msg_3_svc(struct nlm_unlockargs *, struct svc_req *);
void *__cdecl nlm_unlock_res_1(nlm_res *, CLIENT *);
void *__cdecl nlm_unlock_res_1_svc(nlm_res *, struct svc_req *);
void *__cdecl nlm_unlock_res_3(nlm_res *, CLIENT *);
void *__cdecl nlm_unlock_res_3_svc(nlm_res *, struct svc_req *);
nlm_shareres *__cdecl nlm_unshare_3(nlm_shareargs *, CLIENT *);
nlm_shareres *__cdecl nlm_unshare_3_svc(nlm_shareargs *, struct svc_req *);
int nocbreak(void);
xmlNodePtr __cdecl nodePop(xmlParserCtxtPtr ctxt);
int __cdecl nodePush(xmlParserCtxtPtr ctxt, xmlNodePtr value);
int __cdecl nodelay(WINDOW *, bool);
int noecho(void);
void nofilter(void);
int nonl(void);
void noqiflush(void);
int noraw(void);
void __cdecl notationDecl(void *ctx, const xmlChar *name, const xmlChar *publicId, const xmlChar *systemId);
uint32_t __cdecl notify_cancel(int token);
uint32_t __cdecl notify_check(int token, int *check);
uint32_t __cdecl notify_get_state(int token, uint64_t *state64);
uint32_t __cdecl notify_post(const char *name);
uint32_t __cdecl notify_register_check(const char *name, int *out_token);
uint32_t __cdecl notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler);
uint32_t __cdecl notify_register_file_descriptor(const char *name, int *notify_fd, int flags, int *out_token);
uint32_t __cdecl notify_register_mach_port(const char *name, mach_port_t *notify_port, int flags, int *out_token);
uint32_t __cdecl notify_register_signal(const char *name, int sig, int *out_token);
uint32_t __cdecl notify_resume(int token);
uint32_t __cdecl notify_set_state(int token, uint64_t state64);
uint32_t __cdecl notify_suspend(int token);
int __cdecl notimeout(WINDOW *, bool);
__int64 __cdecl nrand48(unsigned __int16[3]);
oid nullOid[];
int nullOidLen;
char *const numcodes[];
int __cdecl numeric_addr();
char *const numfnames[];
char *const numnames[];
EC_KEY *__cdecl o2i_ECPublicKey(EC_KEY **a, const unsigned __int8 **in, __int64 len);
int oldXMLWDcompatibility;
int open(const char *, int, ...);
int __cdecl opendev(char *, int, int, char **);
DIR *__cdecl opendir(const char *);
void __cdecl openlog(const char *, int, int);
int __cdecl openpam_borrow_cred(pam_handle_t *pamh, const struct passwd *pwd);
void __cdecl openpam_free_data(pam_handle_t *pamh, void *data, int status);
void __cdecl openpam_free_envlist(char **envlist);
const char *__cdecl openpam_get_option(pam_handle_t *pamh, const char *option);
int __cdecl openpam_nullconv(int n, const struct pam_message **msg, struct pam_response **resp, void *data);
char *__cdecl openpam_readline(FILE *f, int *lineno, size_t *lenp);
int __cdecl openpam_restore_cred(pam_handle_t *pamh);
int __cdecl openpam_set_option(pam_handle_t *pamh, const char *option, const char *value);
int __cdecl openpam_ttyconv(int n, const struct pam_message **msg, struct pam_response **resp, void *data);
int openpam_ttyconv_timeout;
int __cdecl openpty(int *, int *, char *, struct termios *, struct winsize *);
int __cdecl openx_np(const char *, int, filesec_t);
char *optarg;
int opterr;
int optind;
int optopt;
int optreset;
__int16 ospeed;
static void __cdecl outb(i386_ioport_t port, unsigned __int8 datum);
static void __cdecl outl(i386_ioport_t port, unsigned __int64 datum);
static void __cdecl outw(i386_ioport_t port, unsigned __int16 datum);
int __cdecl overlay(const WINDOW *, WINDOW *);
int __cdecl overwrite(const WINDOW *, WINDOW *);
int __cdecl pair_content(__int16, __int16 *, __int16 *);
int __cdecl pam_acct_mgmt(pam_handle_t *pamh, int flags);
int __cdecl pam_authenticate(pam_handle_t *pamh, int flags);
int __cdecl pam_chauthtok(pam_handle_t *pamh, int flags);
int __cdecl pam_close_session(pam_handle_t *pamh, int flags);
int __cdecl pam_end(pam_handle_t *pamh, int status);
int pam_error(const pam_handle_t *pamh, const char *fmt, ...);
int __cdecl pam_get_authtok(pam_handle_t *pamh, int item, const char **authtok, const char *prompt);
int __cdecl pam_get_data(const pam_handle_t *pamh, const char *module_data_name, const void **data);
int __cdecl pam_get_item(const pam_handle_t *pamh, int item_type, const void **item);
int __cdecl pam_get_user(pam_handle_t *pamh, const char **user, const char *prompt);
const char *__cdecl pam_getenv(pam_handle_t *pamh, const char *name);
char **__cdecl pam_getenvlist(pam_handle_t *pamh);
int pam_info(const pam_handle_t *pamh, const char *fmt, ...);
int __cdecl pam_open_session(pam_handle_t *pamh, int flags);
int pam_prompt(const pam_handle_t *pamh, int style, char **resp, const char *fmt, ...);
int __cdecl pam_putenv(pam_handle_t *pamh, const char *namevalue);
int __cdecl pam_set_data(pam_handle_t *pamh, const char *module_data_name, void *data, void (__cdecl *cleanup)(pam_handle_t *pamh, void *data, int pam_end_status));
int __cdecl pam_set_item(pam_handle_t *pamh, int item_type, const void *item);
int __cdecl pam_setcred(pam_handle_t *pamh, int flags);
int __cdecl pam_setenv(pam_handle_t *pamh, const char *name, const char *value, int overwrite);
int __cdecl pam_sm_acct_mgmt(pam_handle_t *pamh, int flags, int argc, const char **argv);
int __cdecl pam_sm_authenticate(pam_handle_t *pamh, int flags, int argc, const char **argv);
int __cdecl pam_sm_chauthtok(pam_handle_t *pamh, int flags, int argc, const char **argv);
int __cdecl pam_sm_close_session(pam_handle_t *pamh, int flags, int args, const char **argv);
int __cdecl pam_sm_open_session(pam_handle_t *pamh, int flags, int argc, const char **argv);
int __cdecl pam_sm_setcred(pam_handle_t *pamh, int flags, int argc, const char **argv);
int __cdecl pam_start(const char *service, const char *user, const struct pam_conv *pam_conv, pam_handle_t **pamh);
const char *__cdecl pam_strerror(const pam_handle_t *pamh, int error_number);
int __cdecl pam_unsetenv(pam_handle_t *pamh, const char *name);
int __cdecl pam_verror(const pam_handle_t *pamh, const char *fmt, va_list ap);
int __cdecl pam_vinfo(const pam_handle_t *pamh, const char *fmt, va_list ap);
int __cdecl pam_vprompt(const pam_handle_t *pamh, int style, char **resp, const char *fmt, va_list ap);
PANEL *__cdecl panel_above(const PANEL *);
PANEL *__cdecl panel_below(const PANEL *);
int __cdecl panel_hidden(const PANEL *);
void *__cdecl panel_userptr(const PANEL *);
WINDOW *__cdecl panel_window(const PANEL *);
void panic(const char *, ...);
void __cdecl panic_init(mach_port_t);
char paranoid[];
const char *__cdecl parse_octet_hint(const char *hint, const char *value, unsigned __int8 **new_val, int *new_val_len);
int __cdecl parse_oid_indexes(oid *oidIndex, size_t oidLen, netsnmp_variable_list *data);
int __cdecl parse_one_oid_index(oid **oidStart, size_t *oidLen, netsnmp_variable_list *data, int complete);
int __cdecl parse_secLevel_conf(const char *word, char *cptr);
__int64 __cdecl pathconf(const char *, int);
int pause(void);
int __cdecl pcap_activate(pcap_t *);
void __cdecl pcap_breakloop(pcap_t *);
int __cdecl pcap_can_set_rfmon(pcap_t *);
void __cdecl pcap_close(pcap_t *);
int __cdecl pcap_compile(pcap_t *, struct bpf_program *, const char *, int, bpf_u_int32);
int __cdecl pcap_compile_nopcap(int, int, struct bpf_program *, const char *, int, bpf_u_int32);
pcap_t *__cdecl pcap_create(const char *, char *);
int __cdecl pcap_datalink(pcap_t *);
int __cdecl pcap_datalink_ext(pcap_t *);
int __cdecl pcap_datalink_name_to_val(const char *);
const char *__cdecl pcap_datalink_val_to_description(int);
const char *__cdecl pcap_datalink_val_to_name(int);
int __cdecl pcap_dispatch(pcap_t *, int, pcap_handler, u_char *);
void __cdecl pcap_dump(u_char *, const struct pcap_pkthdr *, const u_char *);
void __cdecl pcap_dump_close(pcap_dumper_t *);
FILE *__cdecl pcap_dump_file(pcap_dumper_t *);
int __cdecl pcap_dump_flush(pcap_dumper_t *);
pcap_dumper_t *__cdecl pcap_dump_fopen(pcap_t *, FILE *fp);
__int64 __cdecl pcap_dump_ftell(pcap_dumper_t *);
pcap_dumper_t *__cdecl pcap_dump_open(pcap_t *, const char *);
u_char *__cdecl pcap_ether_aton(const char *);
u_char *__cdecl pcap_ether_hostton(const char *);
FILE *__cdecl pcap_file(pcap_t *);
int __cdecl pcap_fileno(pcap_t *);
int __cdecl pcap_findalldevs(pcap_if_t **, char *);
pcap_t *__cdecl pcap_fopen_offline(FILE *, char *);
void __cdecl pcap_free_datalinks(int *);
void __cdecl pcap_freealldevs(pcap_if_t *);
void __cdecl pcap_freecode(struct bpf_program *);
int __cdecl pcap_get_selectable_fd(pcap_t *);
char *__cdecl pcap_geterr(pcap_t *);
int __cdecl pcap_getnonblock(pcap_t *, char *);
int __cdecl pcap_inject(pcap_t *, const void *, size_t);
int __cdecl pcap_is_swapped(pcap_t *);
const char *pcap_lib_version(void);
int __cdecl pcap_list_datalinks(pcap_t *, int **);
char *__cdecl pcap_lookupdev(char *);
int __cdecl pcap_lookupnet(const char *, bpf_u_int32 *, bpf_u_int32 *, char *);
int __cdecl pcap_loop(pcap_t *, int, pcap_handler, u_char *);
int __cdecl pcap_major_version(pcap_t *);
int __cdecl pcap_minor_version(pcap_t *);
bpf_u_int32 **__cdecl pcap_nametoaddr(const char *);
int __cdecl pcap_nametoeproto(const char *);
int __cdecl pcap_nametollc(const char *);
bpf_u_int32 __cdecl pcap_nametonetaddr(const char *);
int __cdecl pcap_nametoport(const char *, int *, int *);
int __cdecl pcap_nametoportrange(const char *, int *, int *, int *);
int __cdecl pcap_nametoproto(const char *);
const u_char *__cdecl pcap_next(pcap_t *, struct pcap_pkthdr *);
struct pcap_etherent *__cdecl pcap_next_etherent(FILE *);
int __cdecl pcap_next_ex(pcap_t *, struct pcap_pkthdr **, const u_char **);
int __cdecl pcap_offline_filter(struct bpf_program *, const struct pcap_pkthdr *, const u_char *);
pcap_t *__cdecl pcap_open_dead(int, int);
pcap_t *__cdecl pcap_open_live(const char *, int, int, int, char *);
pcap_t *__cdecl pcap_open_offline(const char *, char *);
void __cdecl pcap_perror(pcap_t *, char *);
int __cdecl pcap_sendpacket(pcap_t *, const u_char *, int);
int __cdecl pcap_set_buffer_size(pcap_t *, int);
int __cdecl pcap_set_datalink(pcap_t *, int);
int __cdecl pcap_set_promisc(pcap_t *, int);
int __cdecl pcap_set_rfmon(pcap_t *, int);
int __cdecl pcap_set_snaplen(pcap_t *, int);
int __cdecl pcap_set_timeout(pcap_t *, int);
int __cdecl pcap_setdirection(pcap_t *, pcap_direction_t);
int __cdecl pcap_setfilter(pcap_t *, struct bpf_program *);
int __cdecl pcap_setnonblock(pcap_t *, int, char *);
int __cdecl pcap_snapshot(pcap_t *);
int __cdecl pcap_stats(pcap_t *, struct pcap_stat *);
const char *__cdecl pcap_statustostr(int);
const char *__cdecl pcap_strerror(int);
int __cdecl pclose(FILE *);
int __cdecl pechochar(WINDOW *, const chtype);
char *__cdecl percent_x();
void __cdecl perror(const char *);
void __cdecl pfctlinput(int, struct sockaddr *);
int __cdecl physio(void (__cdecl *)(buf_t), buf_t, dev_t, int, u_int (__cdecl *)(buf_t), struct uio *, int);
kern_return_t __cdecl pid_for_task(mach_port_name_t t, int *x);
int __cdecl pidlock(const char *, int, pid_t *, const char *);
int __cdecl pipe(int[2]);
void __cdecl pitem_free(pitem *item);
pitem *__cdecl pitem_new(unsigned __int64 priority, void *data);
struct pmaplist *__cdecl pmap_getmaps(struct sockaddr_in *);
unsigned __int16 __cdecl pmap_getport(struct sockaddr_in *, unsigned int, unsigned int, unsigned int);
enum clnt_stat __cdecl pmap_rmtcall(struct sockaddr_in *, unsigned int, unsigned int, unsigned int, xdrproc_t, caddr_t, xdrproc_t, caddr_t, struct timeval, unsigned int *);
int __cdecl pmap_set(unsigned int, unsigned int, int, int);
int __cdecl pmap_unset(unsigned int, unsigned int);
int __cdecl pnoutrefresh(WINDOW *, int, int, int, int, int, int);
int __cdecl poll(struct pollfd *, nfds_t, int);
FILE *__cdecl popen(const char *, const char *);
void __cdecl port_obj_init(int);
struct port_obj_tentry *port_obj_table;
int port_obj_table_size;
port_stat_ptr_t port_stat_cur;
port_stat_ptr_t port_stat_end;
struct mutex port_stat_lock;
int __cdecl pos_form_cursor(FORM *);
int __cdecl pos_menu_cursor(const MENU *);
time_t __cdecl posix2time(time_t);
int __cdecl posix_madvise(void *, size_t, int);
int __cdecl posix_memalign(void **, size_t, size_t);
int __cdecl posix_openpt(int);
int __cdecl posix_spawn(pid_t *, const char *, const posix_spawn_file_actions_t *, const posix_spawnattr_t *, char *const argv[], char *const envp[]);
int __cdecl posix_spawn_file_actions_addclose(posix_spawn_file_actions_t *, int);
int __cdecl posix_spawn_file_actions_adddup2(posix_spawn_file_actions_t *, int, int);
int __cdecl posix_spawn_file_actions_addinherit_np(posix_spawn_file_actions_t *, int);
int __cdecl posix_spawn_file_actions_addopen(posix_spawn_file_actions_t *, int, const char *, int, mode_t);
int __cdecl posix_spawn_file_actions_destroy(posix_spawn_file_actions_t *);
int __cdecl posix_spawn_file_actions_init(posix_spawn_file_actions_t *);
int __cdecl posix_spawnattr_destroy(posix_spawnattr_t *);
int __cdecl posix_spawnattr_getbinpref_np(const posix_spawnattr_t *, size_t, cpu_type_t *, size_t *);
int __cdecl posix_spawnattr_getflags(const posix_spawnattr_t *, __int16 *);
int __cdecl posix_spawnattr_getpgroup(const posix_spawnattr_t *, pid_t *);
int __cdecl posix_spawnattr_getsigdefault(const posix_spawnattr_t *, sigset_t *);
int __cdecl posix_spawnattr_getsigmask(const posix_spawnattr_t *, sigset_t *);
int __cdecl posix_spawnattr_init(posix_spawnattr_t *);
int __cdecl posix_spawnattr_setauditsessionport_np(posix_spawnattr_t *, mach_port_t);
int __cdecl posix_spawnattr_setbinpref_np(posix_spawnattr_t *, size_t, cpu_type_t *, size_t *);
int __cdecl posix_spawnattr_setexceptionports_np(posix_spawnattr_t *, exception_mask_t, mach_port_t, exception_behavior_t, thread_state_flavor_t);
int __cdecl posix_spawnattr_setflags(posix_spawnattr_t *, __int16);
int __cdecl posix_spawnattr_setpgroup(posix_spawnattr_t *, pid_t);
int __cdecl posix_spawnattr_setsigdefault(posix_spawnattr_t *, const sigset_t *);
int __cdecl posix_spawnattr_setsigmask(posix_spawnattr_t *, const sigset_t *);
int __cdecl posix_spawnattr_setspecialport_np(posix_spawnattr_t *, mach_port_t, int);
int __cdecl posix_spawnp(pid_t *, const char *, const posix_spawn_file_actions_t *, const posix_spawnattr_t *, char *const argv[], char *const envp[]);
int __cdecl post_form(FORM *);
int __cdecl post_menu(MENU *);
double __cdecl pow(double, double);
float __cdecl powf(float, float);
long double __cdecl powl(long double, long double);
void __cdecl ppdClose(ppd_file_t *ppd);
int __cdecl ppdCollect(ppd_file_t *ppd, ppd_section_t section, ppd_choice_t ***choices);
int __cdecl ppdCollect2(ppd_file_t *ppd, ppd_section_t section, float min_order, ppd_choice_t ***choices);
int __cdecl ppdConflicts(ppd_file_t *ppd);
int __cdecl ppdEmit(ppd_file_t *ppd, FILE *fp, ppd_section_t section);
int __cdecl ppdEmitAfterOrder(ppd_file_t *ppd, FILE *fp, ppd_section_t section, int limit, float min_order);
int __cdecl ppdEmitFd(ppd_file_t *ppd, int fd, ppd_section_t section);
int __cdecl ppdEmitJCL(ppd_file_t *ppd, FILE *fp, int job_id, const char *user, const char *title);
int __cdecl ppdEmitJCLEnd(ppd_file_t *ppd, FILE *fp);
char *__cdecl ppdEmitString(ppd_file_t *ppd, ppd_section_t section, float min_order);
const char *__cdecl ppdErrorString(ppd_status_t status);
ppd_attr_t *__cdecl ppdFindAttr(ppd_file_t *ppd, const char *name, const char *spec);
ppd_choice_t *__cdecl ppdFindChoice(ppd_option_t *o, const char *option);
ppd_coption_t *__cdecl ppdFindCustomOption(ppd_file_t *ppd, const char *keyword);
ppd_cparam_t *__cdecl ppdFindCustomParam(ppd_coption_t *opt, const char *name);
ppd_choice_t *__cdecl ppdFindMarkedChoice(ppd_file_t *ppd, const char *keyword);
ppd_attr_t *__cdecl ppdFindNextAttr(ppd_file_t *ppd, const char *name, const char *spec);
ppd_option_t *__cdecl ppdFindOption(ppd_file_t *ppd, const char *keyword);
ppd_cparam_t *__cdecl ppdFirstCustomParam(ppd_coption_t *opt);
ppd_option_t *__cdecl ppdFirstOption(ppd_file_t *ppd);
int __cdecl ppdInstallableConflict(ppd_file_t *ppd, const char *option, const char *choice);
int __cdecl ppdIsMarked(ppd_file_t *ppd, const char *keyword, const char *option);
ppd_status_t __cdecl ppdLastError(int *line);
int __cdecl ppdLocalize(ppd_file_t *ppd);
ppd_attr_t *__cdecl ppdLocalizeAttr(ppd_file_t *ppd, const char *keyword, const char *spec);
const char *__cdecl ppdLocalizeIPPReason(ppd_file_t *ppd, const char *reason, const char *scheme, char *buffer, size_t bufsize);
const char *__cdecl ppdLocalizeMarkerName(ppd_file_t *ppd, const char *name);
void __cdecl ppdMarkDefaults(ppd_file_t *ppd);
int __cdecl ppdMarkOption(ppd_file_t *ppd, const char *keyword, const char *option);
ppd_cparam_t *__cdecl ppdNextCustomParam(ppd_coption_t *opt);
ppd_option_t *__cdecl ppdNextOption(ppd_file_t *ppd);
ppd_file_t *__cdecl ppdOpen(FILE *fp);
ppd_file_t *__cdecl ppdOpen2(cups_file_t *fp);
ppd_file_t *__cdecl ppdOpenFd(int fd);
ppd_file_t *__cdecl ppdOpenFile(const char *filename);
float __cdecl ppdPageLength(ppd_file_t *ppd, const char *name);
ppd_size_t *__cdecl ppdPageSize(ppd_file_t *ppd, const char *name);
int __cdecl ppdPageSizeLimits(ppd_file_t *ppd, ppd_size_t *minimum, ppd_size_t *maximum);
float __cdecl ppdPageWidth(ppd_file_t *ppd, const char *name);
void __cdecl ppdSetConformance(ppd_conform_t c);
pitem *__cdecl pqueue_find(pqueue pq, unsigned __int64 priority);
void __cdecl pqueue_free(pqueue pq);
pitem *__cdecl pqueue_insert(pqueue pq, pitem *item);
pitem *__cdecl pqueue_iterator(pqueue pq);
pqueue pqueue_new(void);
pitem *__cdecl pqueue_next(piterator *iter);
pitem *__cdecl pqueue_peek(pqueue pq);
pitem *__cdecl pqueue_pop(pqueue pq);
void __cdecl pqueue_print(pqueue pq);
int __cdecl pqueue_size(pqueue pq);
ssize_t __cdecl pread(int, void *, size_t, off_t);
int __cdecl prefresh(WINDOW *, int, int, int, int, int, int);
HIST_ENTRY *previous_history(void);
void __cdecl printI64(char *, const U64 *);
void __cdecl printU64(char *, const U64 *);
void __cdecl print_ascii_dump(FILE *);
void __cdecl print_ascii_dump_tree(FILE *, struct tree *, int);
void __cdecl print_description(oid *objid, size_t objidlen, int width);
void __cdecl print_mib(FILE *fp);
void __cdecl print_mib_tree(FILE *, struct tree *, int);
void __cdecl print_objid(const oid *objid, size_t objidlen);
void __cdecl print_oid_report(FILE *);
void print_oid_report_enable_labeledoid(void);
void print_oid_report_enable_mibchildoid(void);
void print_oid_report_enable_oid(void);
void print_oid_report_enable_suffix(void);
void print_oid_report_enable_symbolic(void);
void __cdecl print_subtree(FILE *, struct tree *, int);
void __cdecl print_value(const oid *objid, size_t objidlen, const netsnmp_variable_list *variable);
void __cdecl print_variable(const oid *objid, size_t objidlen, const netsnmp_variable_list *variable);
int printf(const char *, ...);
int printf_l(locale_t, const char *, ...);
int printw(const char *, ...);
int __cdecl proc_kmsgbuf(void *buffer, uint32_t buffersize);
int __cdecl proc_libversion(int *major, int *minor);
int __cdecl proc_listallpids(void *buffer, int buffersize);
int __cdecl proc_listchildpids(pid_t ppid, void *buffer, int buffersize);
int __cdecl proc_listpgrppids(pid_t pgrpid, void *buffer, int buffersize);
int __cdecl proc_listpids(uint32_t type, uint32_t typeinfo, void *buffer, int buffersize);
int __cdecl proc_listpidspath(uint32_t type, uint32_t typeinfo, const char *path, uint32_t pathflags, void *buffer, int buffersize);
int __cdecl proc_name(int pid, void *buffer, uint32_t buffersize);
int __cdecl proc_pidfdinfo(int pid, int fd, int flavor, void *buffer, int buffersize);
int __cdecl proc_pidfileportinfo(int pid, uint32_t fileport, int flavor, void *buffer, int buffersize);
int __cdecl proc_pidinfo(int pid, int flavor, uint64_t arg, void *buffer, int buffersize);
int __cdecl proc_pidpath(int pid, void *buffer, uint32_t buffersize);
int __cdecl proc_regionfilename(int pid, uint64_t address, void *buffer, uint32_t buffersize);
int __cdecl proc_setpcontrol(const int control);
void __cdecl process_options();
void __cdecl processingInstruction(void *ctx, const xmlChar *target, const xmlChar *data);
kern_return_t __cdecl processor_assign(processor_t processor, processor_set_t new_set, boolean_t wait);
kern_return_t __cdecl processor_control(processor_t processor, processor_info_t processor_cmd, mach_msg_type_number_t processor_cmdCnt);
kern_return_t __cdecl processor_exit(processor_t processor);
kern_return_t __cdecl processor_get_assignment(processor_t processor, processor_set_name_t *assigned_set);
kern_return_t __cdecl processor_info(processor_t processor, processor_flavor_t flavor, host_t *host, processor_info_t processor_info_out, mach_msg_type_number_t *processor_info_outCnt);
kern_return_t __cdecl processor_set_create(host_t host, processor_set_t *new_set, processor_set_name_t *new_name);
kern_return_t __cdecl processor_set_default(host_t host, processor_set_name_t *default_set);
kern_return_t __cdecl processor_set_destroy(processor_set_t set);
kern_return_t __cdecl processor_set_info(processor_set_name_t set_name, int flavor, host_t *host, processor_set_info_t info_out, mach_msg_type_number_t *info_outCnt);
kern_return_t __cdecl processor_set_max_priority(processor_set_t processor_set, int max_priority, boolean_t change_threads);
kern_return_t __cdecl processor_set_policy_control(processor_set_t pset, processor_set_flavor_t flavor, processor_set_info_t policy_info, mach_msg_type_number_t policy_infoCnt, boolean_t change);
kern_return_t __cdecl processor_set_policy_disable(processor_set_t processor_set, int policy, boolean_t change_threads);
kern_return_t __cdecl processor_set_policy_enable(processor_set_t processor_set, int policy);
kern_return_t __cdecl processor_set_stack_usage(processor_set_t pset, unsigned int *ltotal, vm_size_t *space, vm_size_t *resident, vm_size_t *maxusage, vm_offset_t *maxstack);
kern_return_t __cdecl processor_set_statistics(processor_set_name_t pset, processor_set_flavor_t flavor, processor_set_info_t info_out, mach_msg_type_number_t *info_outCnt);
kern_return_t __cdecl processor_set_tasks(processor_set_t processor_set, task_array_t *task_list, mach_msg_type_number_t *task_listCnt);
kern_return_t __cdecl processor_set_threads(processor_set_t processor_set, thread_act_array_t *thread_list, mach_msg_type_number_t *thread_listCnt);
kern_return_t __cdecl processor_start(processor_t processor);
int __cdecl profil(char *, size_t, unsigned __int64, unsigned int);
void __cdecl profile_abandon(profile_t profile);
__int64 __cdecl profile_add_relation(profile_t profile, const char **names, const char *new_value);
__int64 __cdecl profile_clear_relation(profile_t profile, const char **names);
void profile_configuration_updated(void);
__int64 __cdecl profile_flush(profile_t profile);
__int64 __cdecl profile_flush_to_buffer(profile_t profile, char **bufp);
__int64 __cdecl profile_flush_to_file(profile_t profile, const_profile_filespec_t outfile);
void __cdecl profile_free_buffer(profile_t profile, char *buf);
void __cdecl profile_free_list(char **list);
__int64 __cdecl profile_get_boolean(profile_t profile, const char *name, const char *subname, const char *subsubname, int def_val, int *ret_default);
__int64 __cdecl profile_get_integer(profile_t profile, const char *name, const char *subname, const char *subsubname, int def_val, int *ret_default);
__int64 __cdecl profile_get_relation_names(profile_t profile, const char **names, char ***ret_names);
__int64 __cdecl profile_get_string(profile_t profile, const char *name, const char *subname, const char *subsubname, const char *def_val, char **ret_string);
__int64 __cdecl profile_get_subsection_names(profile_t profile, const char **names, char ***ret_names);
__int64 __cdecl profile_get_values(profile_t profile, const char *const *names, char ***ret_values);
__int64 __cdecl profile_init(const_profile_filespec_t *files, profile_t *ret_profile);
__int64 __cdecl profile_init_path(const_profile_filespec_list_t filelist, profile_t *ret_profile);
__int64 __cdecl profile_is_modified(profile_t profile, int *modified);
__int64 __cdecl profile_is_writable(profile_t profile, int *writable);
__int64 __cdecl profile_iterator(void **iter_p, char **ret_name, char **ret_value);
__int64 __cdecl profile_iterator_create(profile_t profile, const char *const *names, int flags, void **ret_iter);
void __cdecl profile_iterator_free(void **iter_p);
void __cdecl profile_release(profile_t profile);
void __cdecl profile_release_string(char *str);
__int64 __cdecl profile_rename_section(profile_t profile, const char **names, const char *new_name);
__int64 __cdecl profile_update_relation(profile_t profile, const char **names, const char *old_value, const char *new_value);
void __cdecl prop_clear(struct propctx *ctx, int requests);
void __cdecl prop_dispose(struct propctx **ctx);
int __cdecl prop_dup(struct propctx *src_ctx, struct propctx **dst_ctx);
void __cdecl prop_erase(struct propctx *ctx, const char *name);
int __cdecl prop_format(struct propctx *ctx, const char *sep, int seplen, char *outbuf, unsigned int outmax, unsigned int *outlen);
const struct propval *__cdecl prop_get(struct propctx *ctx);
int __cdecl prop_getnames(struct propctx *ctx, const char **names, struct propval *vals);
struct propctx *__cdecl prop_new(unsigned int estimate);
int __cdecl prop_request(struct propctx *ctx, const char **names);
int __cdecl prop_set(struct propctx *ctx, const char *name, const char *value, int vallen);
int __cdecl prop_setvals(struct propctx *ctx, const char *name, const char **values);
int __cdecl pselect(int, fd_set *, fd_set *, fd_set *, const struct timespec *, const sigset_t *);
void __cdecl psignal(unsigned int, const char *);
void __cdecl psort(void *, size_t, size_t, int (__cdecl *)(const void *, const void *));
void __cdecl psort_b(void *, size_t, size_t, void *);
void __cdecl psort_r(void *, size_t, size_t, void *, int (__cdecl *)(void *, const void *, const void *));
int __cdecl pthread_atfork(void (*)(void), void (*)(void), void (*)(void));
int __cdecl pthread_attr_destroy(pthread_attr_t *);
int __cdecl pthread_attr_getdetachstate(const pthread_attr_t *, int *);
int __cdecl pthread_attr_getguardsize(const pthread_attr_t *, size_t *);
int __cdecl pthread_attr_getinheritsched(const pthread_attr_t *, int *);
int __cdecl pthread_attr_getschedparam(const pthread_attr_t *, struct sched_param *);
int __cdecl pthread_attr_getschedpolicy(const pthread_attr_t *, int *);
int __cdecl pthread_attr_getscope(const pthread_attr_t *, int *);
int __cdecl pthread_attr_getstack(const pthread_attr_t *, void **, size_t *);
int __cdecl pthread_attr_getstackaddr(const pthread_attr_t *, void **);
int __cdecl pthread_attr_getstacksize(const pthread_attr_t *, size_t *);
int __cdecl pthread_attr_init(pthread_attr_t *);
int __cdecl pthread_attr_setdetachstate(pthread_attr_t *, int);
int __cdecl pthread_attr_setguardsize(pthread_attr_t *, size_t);
int __cdecl pthread_attr_setinheritsched(pthread_attr_t *, int);
int __cdecl pthread_attr_setschedparam(pthread_attr_t *, const struct sched_param *);
int __cdecl pthread_attr_setschedpolicy(pthread_attr_t *, int);
int __cdecl pthread_attr_setscope(pthread_attr_t *, int);
int __cdecl pthread_attr_setstack(pthread_attr_t *, void *, size_t);
int __cdecl pthread_attr_setstackaddr(pthread_attr_t *, void *);
int __cdecl pthread_attr_setstacksize(pthread_attr_t *, size_t);
int __cdecl pthread_cancel(pthread_t);
int __cdecl pthread_cond_broadcast(pthread_cond_t *);
int __cdecl pthread_cond_destroy(pthread_cond_t *);
int __cdecl pthread_cond_init(pthread_cond_t *, const pthread_condattr_t *);
int __cdecl pthread_cond_signal(pthread_cond_t *);
int __cdecl pthread_cond_timedwait(pthread_cond_t *, pthread_mutex_t *, const struct timespec *);
int __cdecl pthread_cond_wait(pthread_cond_t *, pthread_mutex_t *);
int __cdecl pthread_condattr_destroy(pthread_condattr_t *);
int __cdecl pthread_condattr_getpshared(const pthread_condattr_t *, int *);
int __cdecl pthread_condattr_init(pthread_condattr_t *);
int __cdecl pthread_condattr_setpshared(pthread_condattr_t *, int);
int __cdecl pthread_create(pthread_t *, const pthread_attr_t *, void *(__cdecl *)(void *), void *);
int __cdecl pthread_detach(pthread_t);
int __cdecl pthread_equal(pthread_t, pthread_t);
void __cdecl __noreturn pthread_exit(void *);
int pthread_getconcurrency(void);
int __cdecl pthread_getschedparam(pthread_t, int *, struct sched_param *);
void *__cdecl pthread_getspecific(pthread_key_t);
int __cdecl pthread_getugid_np(uid_t *, gid_t *);
int __cdecl pthread_join(pthread_t, void **);
int __cdecl pthread_key_create(pthread_key_t *, void (__cdecl *)(void *));
int __cdecl pthread_key_delete(pthread_key_t);
int __cdecl pthread_kill(pthread_t, int);
int __cdecl pthread_mutex_destroy(pthread_mutex_t *);
int __cdecl pthread_mutex_getprioceiling(const pthread_mutex_t *, int *);
int __cdecl pthread_mutex_init(pthread_mutex_t *, const pthread_mutexattr_t *);
int __cdecl pthread_mutex_lock(pthread_mutex_t *);
int __cdecl pthread_mutex_setprioceiling(pthread_mutex_t *, int, int *);
int __cdecl pthread_mutex_trylock(pthread_mutex_t *);
int __cdecl pthread_mutex_unlock(pthread_mutex_t *);
int __cdecl pthread_mutexattr_destroy(pthread_mutexattr_t *);
int __cdecl pthread_mutexattr_getprioceiling(const pthread_mutexattr_t *, int *);
int __cdecl pthread_mutexattr_getprotocol(const pthread_mutexattr_t *, int *);
int __cdecl pthread_mutexattr_getpshared(const pthread_mutexattr_t *, int *);
int __cdecl pthread_mutexattr_gettype(const pthread_mutexattr_t *, int *);
int __cdecl pthread_mutexattr_init(pthread_mutexattr_t *);
int __cdecl pthread_mutexattr_setprioceiling(pthread_mutexattr_t *, int);
int __cdecl pthread_mutexattr_setprotocol(pthread_mutexattr_t *, int);
int __cdecl pthread_mutexattr_setpshared(pthread_mutexattr_t *, int);
int __cdecl pthread_mutexattr_settype(pthread_mutexattr_t *, int);
int __cdecl pthread_once(pthread_once_t *, void (*)(void));
int __cdecl pthread_rwlock_destroy(pthread_rwlock_t *);
int __cdecl pthread_rwlock_init(pthread_rwlock_t *, const pthread_rwlockattr_t *);
int __cdecl pthread_rwlock_rdlock(pthread_rwlock_t *);
int __cdecl pthread_rwlock_tryrdlock(pthread_rwlock_t *);
int __cdecl pthread_rwlock_trywrlock(pthread_rwlock_t *);
int __cdecl pthread_rwlock_unlock(pthread_rwlock_t *);
int __cdecl pthread_rwlock_wrlock(pthread_rwlock_t *);
int __cdecl pthread_rwlockattr_destroy(pthread_rwlockattr_t *);
int __cdecl pthread_rwlockattr_getpshared(const pthread_rwlockattr_t *, int *);
int __cdecl pthread_rwlockattr_init(pthread_rwlockattr_t *);
int __cdecl pthread_rwlockattr_setpshared(pthread_rwlockattr_t *, int);
pthread_t pthread_self(void);
int __cdecl pthread_setcancelstate(int, int *);
int __cdecl pthread_setcanceltype(int, int *);
int __cdecl pthread_setconcurrency(int);
int __cdecl pthread_setschedparam(pthread_t, int, const struct sched_param *);
int __cdecl pthread_setspecific(pthread_key_t, const void *);
int __cdecl pthread_setugid_np(uid_t, gid_t);
int __cdecl pthread_sigmask(int, const sigset_t *, sigset_t *);
void pthread_testcancel(void);
int __cdecl ptrace(int request, pid_t pid, caddr_t addr, int data);
char *__cdecl ptsname(int);
static unsigned __int64 __cdecl put_align_long(unsigned __int64 ivalue, void *ovalue);
static unsigned __int16 __cdecl put_align_short(unsigned __int16 ivalue, void *ovalue);
int __cdecl putc(int, FILE *);
int __cdecl putc_unlocked(int, FILE *);
int __cdecl putchar(int);
int __cdecl putchar_unlocked(int);
int __cdecl putenv(char *);
int __cdecl putp(const char *);
int __cdecl puts(const char *);
struct utmpx *__cdecl pututxline(const struct utmpx *);
int __cdecl putw(int, FILE *);
wint_t __cdecl putwc(wchar_t, FILE *);
wint_t __cdecl putwc_l(wchar_t, FILE *, locale_t);
wint_t __cdecl putwchar(wchar_t);
wint_t __cdecl putwchar_l(wchar_t, locale_t);
int __cdecl putwin(WINDOW *, FILE *);
ssize_t __cdecl pwrite(int, const void *, size_t, off_t);
void qiflush(void);
void __cdecl qsort(void *, size_t, size_t, int (__cdecl *)(const void *, const void *));
void __cdecl qsort_b(void *, size_t, size_t, void *);
void __cdecl qsort_r(void *, size_t, size_t, void *, int (__cdecl *)(void *, const void *, const void *));
const char *__cdecl querylocale(int, locale_t);
int quick_print;
int __cdecl quotactl(const char *, int, int, caddr_t);
int __cdecl radixsort(const unsigned __int8 **, int, const unsigned __int8 *, unsigned int);
int __cdecl raise(int);
int rand(void);
int __cdecl rand_r(unsigned int *);
__int64 random(void);
int raw(void);
int __cdecl rcmd(char **, int, const char *, const char *, const char *, int *);
int __cdecl rcmd_af(char **, int, const char *, const char *, const char *, int *, int);
ssize_t __cdecl read(int, void *, size_t);
int __cdecl read64(U64 *, const char *);
struct tree *read_all_mibs(void);
void __cdecl read_app_config_store(const char *line);
int __cdecl read_config(const char *, struct config_line *, int);
int __cdecl read_config_files(int);
int __cdecl read_config_files_of_type(int when, struct config_files *ctmp);
struct config_line *__cdecl read_config_get_handlers(const char *type);
void __cdecl read_config_print_usage(const char *lead);
char *__cdecl read_config_read_data(int type, char *readfrom, void *dataptr, size_t *len);
char *__cdecl read_config_read_memory(int type, char *readfrom, char *dataptr, size_t *len);
char *__cdecl read_config_read_objid(char *readfrom, oid **objid, size_t *len);
const char *__cdecl read_config_read_objid_const(const char *readfrom, oid **objid, size_t *len);
char *__cdecl read_config_read_octet_string(const char *readfrom, u_char **str, size_t *len);
const char *__cdecl read_config_read_octet_string_const(const char *readfrom, u_char **str, size_t *len);
char *__cdecl read_config_save_objid(char *saveto, oid *objid, size_t len);
char *__cdecl read_config_save_octet_string(char *saveto, u_char *str, size_t len);
void __cdecl read_config_store(const char *type, const char *line);
char *__cdecl read_config_store_data(int type, char *storeto, void *dataptr, size_t *len);
char *__cdecl read_config_store_data_prefix(char prefix, int type, char *storeto, void *dataptr, size_t len);
int __cdecl read_config_with_type(const char *, const char *);
void read_configs(void);
int __cdecl read_history(const char *);
struct tree *__cdecl read_mib(const char *);
int __cdecl read_objid(const char *, oid *, size_t *);
void read_premib_configs(void);
void __cdecl read_random(void *buffer, u_int numBytes);
struct dirent *__cdecl readdir(DIR *);
int __cdecl readdir_r(DIR *, struct dirent *, struct dirent **);
char *__cdecl readline(const char *);
int readline_echoing_p;
ssize_t __cdecl readlink(const char *, char *, size_t);
char *__cdecl readpassphrase(const char *, char *, size_t, int);
ssize_t __cdecl readv(int, const struct iovec *, int);
void *__cdecl realloc(void *, size_t);
void *__cdecl reallocf(void *, size_t);
char *__cdecl realpath(const char *, char *);
int __cdecl reboot(int);
ssize_t __cdecl recv(int, void *, size_t, int);
ssize_t __cdecl recvfrom(int, void *, size_t, int, struct sockaddr *, socklen_t *);
ssize_t __cdecl recvmsg(int, struct msghdr *, int);
int __cdecl redrawwin(WINDOW *);
void __cdecl reference(void *ctx, const xmlChar *name);
int refresh(void);
void __cdecl refuse();
int __cdecl regcomp(regex_t *, const char *, int);
size_t __cdecl regerror(int, const regex_t *, char *, size_t);
int __cdecl regexec(const regex_t *, const char *, size_t, regmatch_t pmatch[], int);
void __cdecl regfree(regex_t *);
struct config_line *__cdecl register_app_config_handler(const char *token, void (__cdecl *parser)(const char *, char *), void (*releaser)(void), const char *usageLine);
struct config_line *__cdecl register_app_prenetsnmp_mib_handler(const char *token, void (__cdecl *parser)(const char *, char *), void (*releaser)(void), const char *usageLine);
struct config_line *__cdecl register_config_handler(const char *filePrefix, const char *token, void (__cdecl *parser)(const char *, char *), void (*releaser)(void), const char *usageLine);
struct config_line *__cdecl register_const_config_handler(const char *filePrefix, const char *token, void (__cdecl *parser)(const char *, const char *), void (*releaser)(void), const char *usageLine);
int __cdecl register_exceptfd(int, void (__cdecl *func)(int, void *), void *);
netsnmp_variable_list *__cdecl register_index(netsnmp_variable_list *, int, netsnmp_session *);
int __cdecl register_int_index(oid *, size_t, int);
int __cdecl register_mib(const char *, struct variable *, size_t, size_t, oid *, size_t);
int __cdecl register_mib_context(const char *, struct variable *, size_t, size_t, oid *, size_t, int, int, oid, netsnmp_session *, const char *, int, int);
void register_mib_detach(void);
void register_mib_handlers(void);
int __cdecl register_mib_priority(const char *, struct variable *, size_t, size_t, oid *, size_t, int);
int __cdecl register_mib_range(const char *, struct variable *, size_t, size_t, oid *, size_t, int, int, oid, netsnmp_session *);
void register_mib_reattach(void);
netsnmp_variable_list *__cdecl register_oid_index(oid *, size_t, oid *, size_t);
struct config_line *__cdecl register_prenetsnmp_mib_handler(const char *filePrefix, const char *token, void (__cdecl *parser)(const char *, char *), void (*releaser)(void), const char *usageLine);
int __cdecl register_readfd(int, void (__cdecl *func)(int, void *), void *);
int __cdecl register_sec_mod(int, const char *, struct snmp_secmod_def *);
int __cdecl register_signal(int, void (__cdecl *func)(int));
char *__cdecl register_string_index(oid *, size_t, char *);
int __cdecl register_sysORTable(oid *, size_t, const char *);
int __cdecl register_sysORTable_sess(oid *, size_t, const char *, netsnmp_session *);
int __cdecl register_writefd(int, void (__cdecl *func)(int, void *), void *);
int __cdecl release_index(netsnmp_variable_list *);
double __cdecl remainder(double, double);
float __cdecl remainderf(float, float);
long double __cdecl remainderl(long double, long double);
int __cdecl remove(const char *);
errcode_t __cdecl remove_error_table(const struct error_table *et);
HIST_ENTRY *__cdecl remove_history(int);
int __cdecl remove_index(netsnmp_variable_list *, netsnmp_session *);
int __cdecl remove_trap_session(netsnmp_session *);
int __cdecl removefile(const char *path, removefile_state_t state, removefile_flags_t flags);
int __cdecl removefile_cancel(removefile_state_t state);
removefile_state_t removefile_state_alloc(void);
int __cdecl removefile_state_free(removefile_state_t);
int __cdecl removefile_state_get(removefile_state_t state, uint32_t key, void *dst);
int __cdecl removefile_state_set(removefile_state_t state, uint32_t key, const void *value);
int __cdecl removexattr(const char *path, const char *name, int options);
void __cdecl remque(void *);
double __cdecl remquo(double, double, int *);
float __cdecl remquof(float, float, int *);
long double __cdecl remquol(long double, long double, int *);
int __cdecl rename(const char *, const char *);
HIST_ENTRY *__cdecl replace_history_entry(int, const char *, histdata_t);
int __cdecl replace_panel(PANEL *, WINDOW *);
struct request_info *request_init(struct request_info *, ...);
struct request_info *request_set(struct request_info *, ...);
int __cdecl res_9_b64_ntop(const u_char *, size_t, char *, size_t);
int __cdecl res_9_b64_pton(const char *, u_char *, size_t);
void res_9_close(void);
int __cdecl res_9_dn_comp(const char *, u_char *, int, u_char **, u_char **);
int __cdecl res_9_dn_count_labels(const char *);
int __cdecl res_9_dn_expand(const u_char *, const u_char *, const u_char *, char *, int);
int __cdecl res_9_dn_skipname(const u_char *, const u_char *);
int __cdecl res_9_dnok(const char *);
int __cdecl res_9_findzonecut(res_9_state, const char *, res_9_ns_class, int, char *, size_t, struct in_addr *, int);
int __cdecl res_9_findzonecut2(res_9_state, const char *, res_9_ns_class, int, char *, size_t, union res_9_sockaddr_union *, int);
void __cdecl res_9_fp_nquery(const u_char *, int, FILE *);
void __cdecl res_9_fp_query(const u_char *, FILE *);
void __cdecl res_9_fp_resstat(const res_9_state, FILE *);
u_int32_t __cdecl res_9_getlong(const u_char *src);
int __cdecl res_9_getservers(res_9_state, union res_9_sockaddr_union *, int);
u_int16_t __cdecl res_9_getshort(const u_char *src);
int __cdecl res_9_hnok(const char *);
const char *__cdecl res_9_hostalias_1(const char *);
const char *__cdecl res_9_hostalias_2(const res_9_state, const char *, char *, size_t);
int res_9_init(void);
int __cdecl res_9_isourserver(const struct sockaddr_in *);
int __cdecl res_9_loc_aton(const char *ascii, u_char *binary);
const char *__cdecl res_9_loc_ntoa(const u_char *binary, char *ascii);
int __cdecl res_9_mailok(const char *);
int __cdecl res_9_mkquery(int, const char *, int, int, const u_char *, int, const u_char *, u_char *, int);
int __cdecl res_9_nameinquery(const char *, int, int, const u_char *, const u_char *);
u_int16_t __cdecl res_9_nametoclass(const char *buf, int *success);
u_int16_t __cdecl res_9_nametotype(const char *buf, int *success);
void __cdecl res_9_nclose(res_9_state);
void __cdecl res_9_ndestroy(res_9_state);
int __cdecl res_9_ninit(res_9_state);
int __cdecl res_9_nisourserver(const res_9_state, const struct sockaddr_in *);
int __cdecl res_9_nmkquery(res_9_state, int, const char *, int, int, const u_char *, int, const u_char *, u_char *, int);
int __cdecl res_9_nopt(res_9_state, int, u_char *, int, int);
int __cdecl res_9_nquery(res_9_state, const char *, int, int, u_char *, int);
int __cdecl res_9_nquerydomain(res_9_state, const char *, const char *, int, int, u_char *, int);
u_int32_t __cdecl res_9_ns_datetosecs(const char *cp, int *errp);
u_char *__cdecl res_9_ns_find_tsig(u_char *, u_char *);
int __cdecl res_9_ns_format_ttl(u_long, char *, size_t);
u_int __cdecl res_9_ns_get16(const u_char *);
u_long __cdecl res_9_ns_get32(const u_char *);
int __cdecl res_9_ns_initparse(const u_char *, int, res_9_ns_msg *);
int __cdecl res_9_ns_makecanon(const char *, char *, size_t);
int __cdecl res_9_ns_msg_getflag(res_9_ns_msg, int);
int __cdecl res_9_ns_name_compress(const char *, u_char *, size_t, const u_char **, const u_char **);
int __cdecl res_9_ns_name_ntol(const u_char *, u_char *, size_t);
int __cdecl res_9_ns_name_ntop(const u_char *, char *, size_t);
int __cdecl res_9_ns_name_pack(const u_char *, u_char *, int, const u_char **, const u_char **);
int __cdecl res_9_ns_name_pton(const char *, u_char *, size_t);
void __cdecl res_9_ns_name_rollback(const u_char *, const u_char **, const u_char **);
int __cdecl res_9_ns_name_skip(const u_char **, const u_char *);
int __cdecl res_9_ns_name_uncompress(const u_char *, const u_char *, const u_char *, char *, size_t);
int __cdecl res_9_ns_name_unpack(const u_char *, const u_char *, const u_char *, u_char *, size_t);
int __cdecl res_9_ns_parse_ttl(const char *, u_long *);
int __cdecl res_9_ns_parserr(res_9_ns_msg *, res_9_ns_sect, int, res_9_ns_rr *);
void __cdecl res_9_ns_put16(u_int, u_char *);
void __cdecl res_9_ns_put32(u_long, u_char *);
int __cdecl res_9_ns_samedomain(const char *, const char *);
int __cdecl res_9_ns_samename(const char *, const char *);
int __cdecl res_9_ns_sign(u_char *, int *, int, int, void *, const u_char *, int, u_char *, int *, time_t);
int __cdecl res_9_ns_sign2(u_char *, int *, int, int, void *, const u_char *, int, u_char *, int *, time_t, u_char **, u_char **);
int __cdecl res_9_ns_sign_tcp(u_char *, int *, int, int, res_9_ns_tcp_tsig_state *, int);
int __cdecl res_9_ns_sign_tcp2(u_char *, int *, int, int, res_9_ns_tcp_tsig_state *, int, u_char **, u_char **);
int __cdecl res_9_ns_sign_tcp_init(void *, const u_char *, int, res_9_ns_tcp_tsig_state *);
int __cdecl res_9_ns_skiprr(const u_char *, const u_char *, res_9_ns_sect, int);
int __cdecl res_9_ns_sprintrr(const res_9_ns_msg *, const res_9_ns_rr *, const char *, const char *, char *, size_t);
int __cdecl res_9_ns_sprintrrf(const u_char *, size_t, const char *, res_9_ns_class, ns_type, u_long, const u_char *, size_t, const char *, const char *, char *, size_t);
int __cdecl res_9_ns_subdomain(const char *, const char *);
int __cdecl res_9_ns_verify(u_char *, int *, void *, const u_char *, int, u_char *, int *, time_t *, int);
int __cdecl res_9_ns_verify_tcp(u_char *, int *, res_9_ns_tcp_tsig_state *, int);
int __cdecl res_9_ns_verify_tcp_init(void *, const u_char *, int, res_9_ns_tcp_tsig_state *);
int __cdecl res_9_nsearch(res_9_state, const char *, int, int, u_char *, int);
int __cdecl res_9_nsend(res_9_state, const u_char *, int, u_char *, int);
int __cdecl res_9_nsendsigned(res_9_state, const u_char *, int, res_9_ns_tsig_key *, u_char *, int);
int __cdecl res_9_ownok(const char *);
const u_char *__cdecl res_9_p_cdname(const u_char *, const u_char *, FILE *);
const u_char *__cdecl res_9_p_cdnname(const u_char *, const u_char *, int, FILE *);
const char *__cdecl res_9_p_class(int);
const u_char *__cdecl res_9_p_fqname(const u_char *, const u_char *, FILE *);
const u_char *__cdecl res_9_p_fqnname(const u_char *cp, const u_char *msg, int, char *, int);
const char *__cdecl res_9_p_option(u_long option);
void __cdecl res_9_p_query(const u_char *);
const char *__cdecl res_9_p_rcode(int);
char *__cdecl res_9_p_secstodate(u_long);
const char *__cdecl res_9_p_section(int section, int opcode);
const char *__cdecl res_9_p_time(u_int32_t);
const char *__cdecl res_9_p_type(int);
void __cdecl res_9_pquery(const res_9_state, const u_char *, int, FILE *);
void __cdecl res_9_putlong(u_int32_t, u_char *);
void __cdecl res_9_putshort(u_int16_t, u_char *);
int __cdecl res_9_queriesmatch(const u_char *, const u_char *, const u_char *, const u_char *);
int __cdecl res_9_query(const char *, int, int, u_char *, int);
int __cdecl res_9_querydomain(const char *, const char *, int, int, u_char *, int);
u_int res_9_randomid(void);
int __cdecl res_9_search(const char *, int, int, u_char *, int);
int __cdecl res_9_send(const u_char *, int, u_char *, int);
int __cdecl res_9_sendsigned(const u_char *, int, res_9_ns_tsig_key *, u_char *, int);
void __cdecl res_9_setservers(res_9_state, const union res_9_sockaddr_union *, int);
const char *__cdecl res_9_sym_ntop(const struct res_9_sym *, int, int *);
const char *__cdecl res_9_sym_ntos(const struct res_9_sym *, int, int *);
int __cdecl res_9_sym_ston(const struct res_9_sym *, const char *, int *);
int __cdecl res_9_vinit(res_9_state, int);
void res_buildprotolist(void);
void res_destroyprotolist(void);
void res_destroyservicelist(void);
const char *__cdecl res_get_bitstringsuffix(res_9_state);
const char *__cdecl res_get_nibblesuffix(res_9_state);
const char *__cdecl res_get_nibblesuffix2(res_9_state);
const char *__cdecl res_protocolname(int num);
void __cdecl res_send_setqhook(res_send_qhook hook);
void __cdecl res_send_setrhook(res_send_rhook hook);
const char *__cdecl res_servicename(u_int16_t port, const char *proto);
com_err_handler_t reset_com_err_hook(void);
int reset_prog_mode(void);
int reset_shell_mode(void);
int resetty(void);
int resident;
int __cdecl resize_term(int, int);
int __cdecl resizeterm(int, int);
xmlParserInputPtr __cdecl resolveEntity(void *ctx, const xmlChar *publicId, const xmlChar *systemId);
int __cdecl restartterm(char *, int, int *);
u_char return_buf[];
int __cdecl revoke(const char *);
void __cdecl rewind(FILE *);
void __cdecl rewinddir(DIR *);
void __cdecl rfc931();
int rfc931_timeout;
char *__cdecl rindex(const char *, int);
double __cdecl rint(double);
float __cdecl rintf(float);
long double __cdecl rintl(long double);
__int64 __cdecl rinttol(double);
int __cdecl ripoffline(int, int (__cdecl *)(WINDOW *, int));
int __cdecl rl_add_defun(const char *, Function *, int);
int rl_already_prompted;
CPPFunction *rl_attempted_completion_function;
int rl_attempted_completion_over;
char *rl_basic_word_break_characters;
int __cdecl rl_bind_key(int, rl_command_func_t *);
int __cdecl rl_bind_key_in_map(int, rl_command_func_t *, Keymap);
void __cdecl rl_callback_handler_install(const char *, VCPFunction *);
void rl_callback_handler_remove(void);
void rl_callback_read_char(void);
void rl_cleanup_after_signal(void);
int __cdecl rl_complete(int, int);
char *rl_completer_quote_characters;
char *rl_completer_word_break_characters;
int rl_completion_append_character;
VFunction *rl_completion_display_matches_hook;
Function *rl_completion_entry_function;
char **__cdecl rl_completion_matches(const char *, rl_compentry_func_t *);
int rl_completion_query_items;
int rl_completion_type;
VFunction *rl_deprep_term_function;
void rl_deprep_terminal(void);
void __cdecl rl_display_match_list(char **, int, int);
int rl_end;
int rl_filename_completion_desired;
char *__cdecl rl_filename_completion_function(const char *, int);
void rl_forced_update_display(void);
void rl_free_line_state(void);
int __cdecl rl_generic_bind(int, const char *, const char *, Keymap);
Keymap rl_get_keymap(void);
int __cdecl rl_get_previous_history(int, int);
void __cdecl rl_get_screen_size(int *, int *);
int (__cdecl *rl_getc_function)(FILE *);
int rl_ignore_completion_duplicates;
int rl_inhibit_completion;
int rl_initialize(void);
int __cdecl rl_insert(int, int);
int __cdecl rl_insert_text(const char *);
FILE *rl_instream;
int __cdecl rl_kill_text(int, int);
const char *rl_library_version;
char *rl_line_buffer;
Keymap rl_make_bare_keymap(void);
int __cdecl rl_newline(int, int);
FILE *rl_outstream;
int __cdecl rl_parse_and_bind(const char *);
int rl_point;
Function *rl_pre_input_hook;
VFunction *rl_prep_term_function;
void __cdecl rl_prep_terminal(int);
char *rl_prompt;
int __cdecl rl_read_init_file(const char *);
int rl_read_key(void);
char *rl_readline_name;
int rl_readline_version;
void rl_redisplay(void);
VFunction *rl_redisplay_function;
void __cdecl rl_reset_terminal(const char *);
void __cdecl rl_set_keymap(Keymap);
int __cdecl rl_set_prompt(const char *);
void __cdecl rl_set_screen_size(int, int);
char *rl_special_prefixes;
Function *rl_startup_hook;
void __cdecl rl_stuff_char(int);
char *rl_terminal_name;
int __cdecl rl_variable_bind(const char *, const char *);
int __cdecl rmdir(const char *);
double __cdecl round(double);
float __cdecl roundf(float);
long double __cdecl roundl(long double);
__int64 __cdecl roundtol(double);
struct rpc_createerr rpc_createerr;
void __cdecl rpctest_service();
getquota_rslt *__cdecl rquotaproc_getactivequota_1(getquota_args *, CLIENT *);
getquota_rslt *__cdecl rquotaproc_getactivequota_1_svc(getquota_args *, struct svc_req *);
getquota_rslt *__cdecl rquotaproc_getquota_1(getquota_args *, CLIENT *);
getquota_rslt *__cdecl rquotaproc_getquota_1_svc(getquota_args *, struct svc_req *);
int __cdecl rresvport(int *);
int __cdecl rresvport_af(int *, int);
enum clnt_stat __cdecl rstat(char *, struct statstime *);
u_int *__cdecl rstatproc_havedisk_1(void *, CLIENT *);
u_int *__cdecl rstatproc_havedisk_1_svc(void *, struct svc_req *);
u_int *__cdecl rstatproc_havedisk_2(void *, CLIENT *);
u_int *__cdecl rstatproc_havedisk_2_svc(void *, struct svc_req *);
u_int *__cdecl rstatproc_havedisk_3(void *, CLIENT *);
u_int *__cdecl rstatproc_havedisk_3_svc(void *, struct svc_req *);
stats *__cdecl rstatproc_stats_1(void *, CLIENT *);
stats *__cdecl rstatproc_stats_1_svc(void *, struct svc_req *);
statsswtch *__cdecl rstatproc_stats_2(void *, CLIENT *);
statsswtch *__cdecl rstatproc_stats_2_svc(void *, struct svc_req *);
statstime *__cdecl rstatproc_stats_3(void *, CLIENT *);
statstime *__cdecl rstatproc_stats_3_svc(void *, struct svc_req *);
void run_alarms(void);
int __cdecl ruserok(const char *, int, const char *, const char *);
utmp_array *__cdecl rusersproc_allnames_3(void *, CLIENT *);
utmp_array *__cdecl rusersproc_allnames_3_svc(void *, struct svc_req *);
utmp_array *__cdecl rusersproc_names_3(void *, CLIENT *);
utmp_array *__cdecl rusersproc_names_3_svc(void *, struct svc_req *);
int *__cdecl rusersproc_num_3(void *, CLIENT *);
int *__cdecl rusersproc_num_3_svc(void *, struct svc_req *);
ASN1_INTEGER *__cdecl s2i_ASN1_INTEGER(X509V3_EXT_METHOD *meth, char *value);
ASN1_OCTET_STRING *__cdecl s2i_ASN1_OCTET_STRING(X509V3_EXT_METHOD *method, X509V3_CTX *ctx, char *str);
struct snmp_alarm *sa_find_next(void);
void __cdecl sa_update_entry(struct snmp_alarm *alrm);
void __cdecl safe_gets(char *, char *, int);
int __cdecl sasl_auxprop_add_plugin(const char *plugname, sasl_auxprop_init_t *auxpropfunc);
int __cdecl sasl_auxprop_add_plugin_nolog(const char *plugname, sasl_auxprop_init_t *auxpropfunc);
struct propctx *__cdecl sasl_auxprop_getctx(sasl_conn_t *conn);
int __cdecl sasl_auxprop_request(sasl_conn_t *conn, const char **propnames);
int __cdecl sasl_auxprop_store(sasl_conn_t *conn, struct propctx *ctx, const char *user);
int __cdecl sasl_canonuser_add_plugin(const char *plugname, sasl_canonuser_init_t *canonuserfunc);
int __cdecl sasl_checkapop(sasl_conn_t *conn, const char *challenge, unsigned int challen, const char *response, unsigned int resplen);
int __cdecl sasl_checkpass(sasl_conn_t *conn, const char *user, unsigned int userlen, const char *pass, unsigned int passlen);
void __cdecl sasl_churn(sasl_rand_t *rpool, const char *data, unsigned int len);
int __cdecl sasl_client_add_plugin(const char *plugname, sasl_client_plug_init_t *cplugfunc);
int __cdecl sasl_client_init(const sasl_callback_t *callbacks);
int __cdecl sasl_client_new(const char *service, const char *serverFQDN, const char *iplocalport, const char *ipremoteport, const sasl_callback_t *prompt_supp, unsigned int flags, sasl_conn_t **pconn);
int __cdecl sasl_client_plugin_info(char *mech_list, sasl_client_info_callback_t *info_cb, void *info_cb_rock);
int __cdecl sasl_client_start(sasl_conn_t *conn, const char *mechlist, sasl_interact_t **prompt_need, const char **clientout, unsigned int *clientoutlen, const char **mech);
int __cdecl sasl_client_step(sasl_conn_t *conn, const char *serverin, unsigned int serverinlen, sasl_interact_t **prompt_need, const char **clientout, unsigned int *clientoutlen);
int __cdecl sasl_decode(sasl_conn_t *conn, const char *input, unsigned int inputlen, const char **output, unsigned int *outputlen);
int __cdecl sasl_decode64(const char *in, unsigned int inlen, char *out, unsigned int outmax, unsigned int *outlen);
void __cdecl sasl_dispose(sasl_conn_t **pconn);
void sasl_done(void);
int __cdecl sasl_encode(sasl_conn_t *conn, const char *input, unsigned int inputlen, const char **output, unsigned int *outputlen);
int __cdecl sasl_encode64(const char *in, unsigned int inlen, char *out, unsigned int outmax, unsigned int *outlen);
int __cdecl sasl_encodev(sasl_conn_t *conn, const struct iovec *invec, unsigned int numiov, const char **output, unsigned int *outputlen);
void __cdecl sasl_erasebuffer(char *pass, unsigned int len);
const char *__cdecl sasl_errdetail(sasl_conn_t *conn);
const char *__cdecl sasl_errstring(int saslerr, const char *langlist, const char **outlang);
int __cdecl sasl_getprop(sasl_conn_t *conn, int propnum, const void **pvalue);
const char **sasl_global_listmech(void);
int __cdecl sasl_idle(sasl_conn_t *conn);
int __cdecl sasl_listmech(sasl_conn_t *conn, const char *user, const char *prefix, const char *sep, const char *suffix, const char **result, unsigned int *plen, int *pcount);
int __cdecl sasl_mkchal(sasl_conn_t *conn, char *buf, unsigned int maxlen, unsigned int hostflag);
void __cdecl sasl_rand(sasl_rand_t *rpool, char *buf, unsigned int len);
int __cdecl sasl_randcreate(sasl_rand_t **rpool);
void __cdecl sasl_randfree(sasl_rand_t **rpool);
void __cdecl sasl_randseed(sasl_rand_t *rpool, const char *seed, unsigned int len);
int __cdecl sasl_server_add_plugin(const char *plugname, sasl_server_plug_init_t *splugfunc);
int __cdecl sasl_server_init(const sasl_callback_t *callbacks, const char *appname);
int __cdecl sasl_server_init_alt(const sasl_callback_t *callbacks, const char *appname);
int __cdecl sasl_server_new(const char *service, const char *serverFQDN, const char *user_realm, const char *iplocalport, const char *ipremoteport, const sasl_callback_t *callbacks, unsigned int flags, sasl_conn_t **pconn);
int __cdecl sasl_server_plugin_info(char *mech_list, sasl_server_info_callback_t *info_cb, void *info_cb_rock);
int __cdecl sasl_server_start(sasl_conn_t *conn, const char *mech, const char *clientin, unsigned int clientinlen, const char **serverout, unsigned int *serveroutlen);
int __cdecl sasl_server_step(sasl_conn_t *conn, const char *clientin, unsigned int clientinlen, const char **serverout, unsigned int *serveroutlen);
void __cdecl sasl_set_alloc(sasl_malloc_t *, sasl_calloc_t *, sasl_realloc_t *, sasl_free_t *);
void __cdecl sasl_set_mutex(sasl_mutex_alloc_t *, sasl_mutex_lock_t *, sasl_mutex_unlock_t *, sasl_mutex_free_t *);
void sasl_seterror(sasl_conn_t *conn, unsigned int flags, const char *fmt, ...);
int __cdecl sasl_setpass(sasl_conn_t *conn, const char *user, const char *pass, unsigned int passlen, const char *oldpass, unsigned int oldpasslen, unsigned int flags);
int __cdecl sasl_setprop(sasl_conn_t *conn, int propnum, const void *value);
int __cdecl sasl_user_exists(sasl_conn_t *conn, const char *service, const char *user_realm, const char *user);
int __cdecl sasl_utf8verify(const char *str, unsigned int len);
void __cdecl sasl_version(const char **implementation, int *version);
void __cdecl sasl_version_info(const char **implementation, const char **version_string, int *version_major, int *version_minor, int *version_step, int *version_patch);
int savetty(void);
void *__cdecl sbrk(int);
int __cdecl sc_check_keyed_hash(const oid *authtype, size_t authtypelen, const u_char *key, u_int keylen, const u_char *message, u_int msglen, const u_char *MAC, u_int maclen);
int __cdecl sc_decrypt(const oid *privtype, size_t privtypelen, u_char *key, u_int keylen, u_char *iv, u_int ivlen, u_char *ciphertext, u_int ctlen, u_char *plaintext, size_t *ptlen);
int __cdecl sc_encrypt(const oid *privtype, size_t privtypelen, u_char *key, u_int keylen, u_char *iv, u_int ivlen, const u_char *plaintext, u_int ptlen, u_char *ciphertext, size_t *ctlen);
int __cdecl sc_generate_keyed_hash(const oid *authtype, size_t authtypelen, const u_char *key, u_int keylen, const u_char *message, u_int msglen, u_char *MAC, size_t *maclen);
int __cdecl sc_get_proper_priv_length(const oid *privtype, u_int privtype_len);
int __cdecl sc_get_properlength(const oid *hashtype, u_int hashtype_len);
int __cdecl sc_get_transform_type(oid *hashtype, u_int hashtype_len, int (__cdecl **hash_fn)(const int mode, void **context, const u_char *data, const int data_len, u_char **digest, size_t *digest_len));
int __cdecl sc_hash(const oid *hashtype, size_t hashtypelen, const u_char *buf, size_t buf_len, u_char *MAC, size_t *MAC_len);
int sc_init(void);
int __cdecl sc_random(u_char *buf, size_t *buflen);
int __cdecl sc_shutdown(int majorID, int minorID, void *serverarg, void *clientarg);
double __cdecl scalb(double, double);
double __cdecl scalbln(double, __int64);
float __cdecl scalblnf(float, __int64);
long double __cdecl scalblnl(long double, __int64);
double __cdecl scalbn(double, int);
float __cdecl scalbnf(float, int);
long double __cdecl scalbnl(long double, int);
int __cdecl scale_form(const FORM *, int *, int *);
int __cdecl scale_menu(const MENU *, int *, int *);
int __cdecl scandir(const char *, struct dirent ***, int (__cdecl *)(struct dirent *), int (__cdecl *)(const void *, const void *));
int __cdecl scandir_b(const char *, struct dirent ***, void *, void *);
int scanf(const char *, ...);
int scanf_l(locale_t, const char *, ...);
int scanw(char *, ...);
int __cdecl sched_get_priority_max(int);
int __cdecl sched_get_priority_min(int);
int sched_yield(void);
int __cdecl scr_dump(const char *);
int __cdecl scr_init(const char *);
int __cdecl scr_restore(const char *);
int __cdecl scr_set(const char *);
int __cdecl scrl(int);
int __cdecl scroll(WINDOW *);
int __cdecl scrollok(WINDOW *, bool);
int __cdecl se_add_pair(unsigned int major, unsigned int minor, char *label, int value);
int __cdecl se_add_pair_to_list(struct snmp_enum_list **list, char *label, int value);
int __cdecl se_add_pair_to_slist(const char *listname, char *label, int value);
int __cdecl se_find_free_value(unsigned int major, unsigned int minor);
int __cdecl se_find_free_value_in_list(struct snmp_enum_list *list);
int __cdecl se_find_free_value_in_slist(const char *listname);
char *__cdecl se_find_label(unsigned int major, unsigned int minor, int value);
char *__cdecl se_find_label_in_list(struct snmp_enum_list *list, int value);
char *__cdecl se_find_label_in_slist(const char *listname, int value);
struct snmp_enum_list *__cdecl se_find_list(unsigned int major, unsigned int minor);
struct snmp_enum_list *__cdecl se_find_slist(const char *listname);
int __cdecl se_find_value(unsigned int major, unsigned int minor, const char *label);
int __cdecl se_find_value_in_list(struct snmp_enum_list *list, const char *label);
int __cdecl se_find_value_in_slist(const char *listname, const char *label);
void __cdecl se_read_conf(const char *word, char *cptr);
void __cdecl se_store_enum_list(struct snmp_enum_list *new_list, const char *token, char *type);
int __cdecl se_store_in_list(struct snmp_enum_list *, unsigned int major, unsigned int minor);
void __cdecl se_store_list(unsigned int major, unsigned int minor, char *type);
void __cdecl se_store_slist(const char *listname, char *type);
int __cdecl se_store_slist_callback(int majorID, int minorID, void *serverargs, void *clientargs);
Enginetime __cdecl search_enginetime_list(const u_char *engineID, u_int engineID_len);
int __cdecl searchfs(const char *, struct fssearchblock *, unsigned __int64 *, unsigned int, unsigned int, struct searchstate *);
unsigned __int16 *__cdecl seed48(unsigned __int16[3]);
void __cdecl seekdir(DIR *, __int64);
int __cdecl select(int, fd_set *, fd_set *, fd_set *, struct timeval *);
int __cdecl sem_close(sem_t *);
int __cdecl sem_destroy(sem_t *);
int __cdecl sem_getvalue(sem_t *, int *);
int __cdecl sem_init(sem_t *, int, unsigned int);
sem_t *sem_open(const char *, int, ...);
int __cdecl sem_post(sem_t *);
int __cdecl sem_trywait(sem_t *);
int __cdecl sem_unlink(const char *);
int __cdecl sem_wait(sem_t *);
kern_return_t __cdecl semaphore_create(task_t task, semaphore_t *semaphore, int policy, int value);
kern_return_t __cdecl semaphore_destroy(task_t task, semaphore_t semaphore);
kern_return_t __cdecl semaphore_signal(semaphore_t semaphore);
kern_return_t __cdecl semaphore_signal_all(semaphore_t semaphore);
kern_return_t __cdecl semaphore_signal_thread(semaphore_t semaphore, thread_t thread);
kern_return_t __cdecl semaphore_timedwait(semaphore_t semaphore, mach_timespec_t wait_time);
kern_return_t __cdecl semaphore_timedwait_signal(semaphore_t wait_semaphore, semaphore_t signal_semaphore, mach_timespec_t wait_time);
kern_return_t __cdecl semaphore_wait(semaphore_t semaphore);
kern_return_t __cdecl semaphore_wait_signal(semaphore_t wait_semaphore, semaphore_t signal_semaphore);
int semctl(int, int, int, ...);
int __cdecl semget(key_t, int, int);
int __cdecl semop(int, struct sembuf *, size_t);
int semsys(int, ...);
ssize_t __cdecl send(int, const void *, size_t, int);
void __cdecl send_easy_trap(int, int);
void __cdecl send_enterprise_trap_vars(int trap, int specific, const oid *enterprise, int enterprise_length, netsnmp_variable_list *vars);
void __cdecl send_trap_pdu(netsnmp_pdu *);
void __cdecl send_trap_to_sess(netsnmp_session *sess, netsnmp_pdu *template_pdu);
void __cdecl send_trap_vars(int, int, netsnmp_variable_list *);
void __cdecl send_trap_vars_with_context(int trap, int specific, netsnmp_variable_list *vars, const char *context);
void __cdecl send_v2trap(netsnmp_variable_list *);
void __cdecl send_v3trap(netsnmp_variable_list *vars, const char *context);
int __cdecl sendfile(int, int, off_t, off_t *, struct sf_hdtr *, int);
ssize_t __cdecl sendmsg(int, const struct msghdr *, int);
ssize_t __cdecl sendto(int, const void *, size_t, int, const struct sockaddr *, socklen_t);
void __cdecl setDocumentLocator(void *ctx, xmlSAXLocatorPtr loc);
void __cdecl setNamespace(void *ctx, const xmlChar *name);
void set_an_alarm(void);
com_err_handler_t __cdecl set_com_err_hook(com_err_handler_t handler);
void __cdecl set_configuration_directory(const char *dir);
int __cdecl set_current_field(FORM *, FIELD *);
int __cdecl set_current_item(MENU *menu, ITEM *item);
TERMINAL *__cdecl set_curterm(TERMINAL *);
kern_return_t __cdecl set_dp_control_port(host_priv_t host, mach_port_t control_port);
int __cdecl set_enginetime(const u_char *engineID, u_int engineID_len, u_int engine_boot, u_int engine_time, u_int authenticated);
int __cdecl set_escdelay(int);
int __cdecl set_field_back(FIELD *, chtype);
int __cdecl set_field_buffer(FIELD *, int, const char *);
int __cdecl set_field_fore(FIELD *, chtype);
int __cdecl set_field_init(FORM *, Form_Hook);
int __cdecl set_field_just(FIELD *, int);
int __cdecl set_field_opts(FIELD *, Field_Options);
int __cdecl set_field_pad(FIELD *, int);
int __cdecl set_field_status(FIELD *, bool);
int __cdecl set_field_term(FORM *, Form_Hook);
int set_field_type(FIELD *, FIELDTYPE *, ...);
int __cdecl set_field_userptr(FIELD *, void *);
int __cdecl set_fieldtype_arg(FIELDTYPE *, void *(__cdecl *const make_arg)(va_list *), void *(__cdecl *const copy_arg)(const void *), void (__cdecl *const free_arg)(void *));
int __cdecl set_fieldtype_choice(FIELDTYPE *, bool (__cdecl *const next_choice)(FIELD *, const void *), bool (__cdecl *const prev_choice)(FIELD *, const void *));
int __cdecl set_form_fields(FORM *, FIELD **);
int __cdecl set_form_init(FORM *, Form_Hook);
int __cdecl set_form_opts(FORM *, Form_Options);
int __cdecl set_form_page(FORM *, int);
int __cdecl set_form_sub(FORM *, WINDOW *);
int __cdecl set_form_term(FORM *, Form_Hook);
int __cdecl set_form_userptr(FORM *, void *);
int __cdecl set_form_win(FORM *, WINDOW *);
void __cdecl set_function(struct tree *);
int __cdecl set_item_init(MENU *, Menu_Hook);
int __cdecl set_item_opts(ITEM *, Item_Options);
int __cdecl set_item_term(MENU *, Menu_Hook);
int __cdecl set_item_userptr(ITEM *, void *);
int __cdecl set_item_value(ITEM *, bool);
int __cdecl set_max_field(FIELD *, int);
int __cdecl set_menu_back(MENU *, chtype);
int __cdecl set_menu_fore(MENU *, chtype);
int __cdecl set_menu_format(MENU *, int, int);
int __cdecl set_menu_grey(MENU *, chtype);
int __cdecl set_menu_init(MENU *, Menu_Hook);
int __cdecl set_menu_items(MENU *, ITEM **);
int __cdecl set_menu_mark(MENU *, const char *);
int __cdecl set_menu_opts(MENU *, Menu_Options);
int __cdecl set_menu_pad(MENU *, int);
int __cdecl set_menu_pattern(MENU *, const char *);
int __cdecl set_menu_spacing(MENU *, int, int, int);
int __cdecl set_menu_sub(MENU *, WINDOW *);
int __cdecl set_menu_term(MENU *, Menu_Hook);
int __cdecl set_menu_userptr(MENU *, void *);
int __cdecl set_menu_win(MENU *, WINDOW *);
int __cdecl set_new_page(FIELD *, bool);
int __cdecl set_panel_userptr(PANEL *, void *);
void __cdecl set_persistent_directory(const char *dir);
int __cdecl set_tabsize(int);
void __cdecl set_temp_file_pattern(const char *pattern);
SCREEN *__cdecl set_term(SCREEN *);
int __cdecl set_top_row(MENU *, int);
void setac(void);
int __cdecl setattrlist(const char *, void *, void *, size_t, unsigned int);
void setauclass(void);
int __cdecl setaudit(const struct auditinfo *);
int __cdecl setaudit_addr(const struct auditinfo_addr *, int);
void setauevent(void);
int __cdecl setauid(const au_id_t *);
void setauuser(void);
void __cdecl setbuf(FILE *, char *);
void __cdecl setbuffer(FILE *, char *, int);
int __cdecl setcontext(const ucontext_t *);
int __cdecl setdomainname(const char *, int);
int __cdecl setegid(gid_t);
int __cdecl setenv(const char *, const char *, int);
int __cdecl seteuid(uid_t);
int setfsent(void);
int __cdecl setgid(gid_t);
void setgrent(void);
void __cdecl setgrfile(const char *);
int __cdecl setgroupent(int);
int __cdecl setgroups(int, const gid_t *);
void __cdecl sethostent(int);
void __cdecl sethostid(__int64);
int __cdecl sethostname(const char *, int);
void __cdecl setinvalidrune(rune_t);
int __cdecl setiopolicy_np(int, int, int);
int __cdecl setipv4sourcefilter(int, struct in_addr, struct in_addr, uint32_t, uint32_t, struct in_addr *);
int __cdecl setitimer(int, const struct itimerval *, struct itimerval *);
int __cdecl setjmp(jmp_buf);
void __cdecl setkey(const char *);
int __cdecl setlinebuf(FILE *);
char *__cdecl setlocale(int, const char *);
int __cdecl setlogin(const char *);
int __cdecl setlogmask(int);
void *__cdecl setmode(const char *);
void __cdecl setnetent(int);
void __cdecl setnetgrent(const char *);
int __cdecl setpgid(pid_t, pid_t);
pid_t setpgrp(void);
int __cdecl setpriority(int, id_t, int);
void __cdecl setprogname(const char *);
void __cdecl setprotoent(int);
void setpwent(void);
int __cdecl setregid(gid_t, gid_t);
int __cdecl setreuid(uid_t, uid_t);
int __cdecl setrgid(gid_t);
int __cdecl setrlimit(int, const struct rlimit *);
void __cdecl setrpcent(int stayopen);
int __cdecl setruid(uid_t);
int __cdecl setrunelocale(char *);
int __cdecl setscrreg(int, int);
void __cdecl setservent(int);
int __cdecl setsgroups_np(int, const uuid_t);
pid_t setsid(void);
int __cdecl setsockopt(int, int, int, const void *, socklen_t);
int __cdecl setsourcefilter(int, uint32_t, struct sockaddr *, socklen_t, uint32_t, uint32_t, struct sockaddr_storage *);
char *__cdecl setstate(const char *);
int __cdecl settimeofday(const struct timeval *, const struct timezone *);
int setttyent(void);
int __cdecl setuid(uid_t);
int __cdecl setup_engineID(u_char **eidp, const char *text);
void setup_tree(void);
int __cdecl setupterm(char *, int, int *);
void setusershell(void);
void setutxent(void);
void __cdecl setutxent_wtmp(int);
int __cdecl setvbuf(FILE *, char *, int, size_t);
int __cdecl setwgroups_np(int, const uuid_t);
int __cdecl setxattr(const char *path, const char *name, const void *value, size_t size, u_int32_t position, int options);
void __cdecl shell_cmd();
int shm_open(const char *, int, ...);
int __cdecl shm_unlink(const char *);
void *__cdecl shmat(int, const void *, int);
int __cdecl shmctl(int, int, struct __shmid_ds_new *);
int __cdecl shmdt(const void *);
int __cdecl shmget(key_t, size_t, int);
int shmsys(int, ...);
int __cdecl should_init(const char *module_name);
int __cdecl show_panel(PANEL *);
int __cdecl shutdown(int, int);
void shutdown_agent(void);
void shutdown_agent_sysORTable(void);
void shutdown_master_agent(void);
void shutdown_mib(void);
void shutdown_snmp_logging(void);
void __cdecl shutdown_snmpv3(const char *type);
void shutdown_tree(void);
u_char sid[];
int __cdecl sigaction(int, const struct sigaction *, struct sigaction *);
int __cdecl sigaddset(sigset_t *, int);
int __cdecl sigaltstack(const stack_t *, stack_t *);
int __cdecl sigblock(int);
int __cdecl sigdelset(sigset_t *, int);
int __cdecl sigemptyset(sigset_t *);
int __cdecl sigfillset(sigset_t *);
int __cdecl sighold(int);
int __cdecl sigignore(int);
int __cdecl siginterrupt(int, int);
int __cdecl sigismember(const sigset_t *, int);
void __cdecl siglongjmp(sigjmp_buf, int);
void (__cdecl *__cdecl signal(int, void (__cdecl *)(int)))(int);
int signgam;
int __cdecl sigpause(int);
int __cdecl sigpending(sigset_t *);
int __cdecl sigprocmask(int, const sigset_t *, sigset_t *);
int __cdecl sigrelse(int);
void (__cdecl *__cdecl sigset(int, void (__cdecl *)(int)))(int);
int __cdecl sigsetjmp(sigjmp_buf, int);
int __cdecl sigsetmask(int);
int __cdecl sigsuspend(const sigset_t *);
int __cdecl sigvec(int, struct sigvec *, struct sigvec *);
int __cdecl sigwait(const sigset_t *, int *);
double __cdecl sin(double);
float __cdecl sinf(float);
double __cdecl sinh(double);
float __cdecl sinhf(float);
long double __cdecl sinhl(long double);
long double __cdecl sinl(long double);
char *__cdecl sk_delete(STACK *st, int loc);
char *__cdecl sk_delete_ptr(STACK *st, char *p);
STACK *__cdecl sk_dup(STACK *st);
int __cdecl sk_find(STACK *st, char *data);
int __cdecl sk_find_ex(STACK *st, char *data);
void __cdecl sk_free(STACK *);
int __cdecl sk_insert(STACK *sk, char *data, int where);
int __cdecl sk_is_sorted(const STACK *st);
STACK *__cdecl sk_new(int (__cdecl *cmp)(const char *const *, const char *const *));
STACK *sk_new_null(void);
int __cdecl sk_num(const STACK *);
char *__cdecl sk_pop(STACK *st);
void __cdecl sk_pop_free(STACK *st, void (__cdecl *func)(void *));
int __cdecl sk_push(STACK *st, char *data);
char *__cdecl sk_set(STACK *, int, char *);
int (__cdecl *__cdecl sk_set_cmp_func(STACK *sk, int (__cdecl *c)(const char *const *, const char *const *)))(const char *const *, const char *const *);
char *__cdecl sk_shift(STACK *st);
void __cdecl sk_sort(STACK *st);
int __cdecl sk_unshift(STACK *st, char *data);
char *__cdecl sk_value(const STACK *, int);
void __cdecl sk_zero(STACK *st);
char *__cdecl skip_not_white(char *);
const char *__cdecl skip_not_white_const(const char *);
char *__cdecl skip_token(char *);
const char *__cdecl skip_token_const(const char *);
char *__cdecl skip_white(char *);
const char *__cdecl skip_white_const(const char *);
int __cdecl sl_add(StringList *, char *);
char *__cdecl sl_find(StringList *, char *);
void __cdecl sl_free(StringList *, int);
StringList *sl_init(void);
int __cdecl slapi_access_allowed(Slapi_PBlock *pb, Slapi_Entry *e, char *attr, struct berval *val, int access);
int __cdecl slapi_acl_check_mods(Slapi_PBlock *pb, Slapi_Entry *e, LDAPMod **mods, char **errbuf);
Slapi_PBlock *__cdecl slapi_add_entry_internal(Slapi_Entry *e, LDAPControl **controls, int log_change);
void __cdecl slapi_add_entry_internal_set_pb(Slapi_PBlock *pb, Slapi_Entry *e, LDAPControl **controls, Slapi_ComponentId *plugin_identity, int operation_flags);
Slapi_PBlock *__cdecl slapi_add_internal(char *dn, LDAPMod **attrs, LDAPControl **controls, int log_changes);
int __cdecl slapi_add_internal_pb(Slapi_PBlock *pb);
int __cdecl slapi_add_internal_set_pb(Slapi_PBlock *pb, const char *dn, LDAPMod **attrs, LDAPControl **controls, Slapi_ComponentId *plugin_identity, int operation_flags);
int __cdecl slapi_attr_add_value(Slapi_Attr *a, const Slapi_Value *v);
Slapi_Attr *__cdecl slapi_attr_dup(const Slapi_Attr *attr);
int __cdecl slapi_attr_first_value(Slapi_Attr *a, Slapi_Value **v);
int __cdecl slapi_attr_flag_is_set(const Slapi_Attr *attr, unsigned __int64 flag);
void __cdecl slapi_attr_free(Slapi_Attr **a);
int __cdecl slapi_attr_get_bervals_copy(Slapi_Attr *a, struct berval ***vals);
int __cdecl slapi_attr_get_flags(const Slapi_Attr *attr, unsigned __int64 *flags);
int __cdecl slapi_attr_get_numvalues(const Slapi_Attr *a, int *numValues);
int __cdecl slapi_attr_get_oid_copy(const Slapi_Attr *attr, char **oidp);
int __cdecl slapi_attr_get_type(const Slapi_Attr *attr, char **type);
int __cdecl slapi_attr_get_values(Slapi_Attr *attr, struct berval ***vals);
int __cdecl slapi_attr_get_valueset(const Slapi_Attr *a, Slapi_ValueSet **vs);
Slapi_Attr *__cdecl slapi_attr_init(Slapi_Attr *a, const char *type);
Slapi_Attr *slapi_attr_new(void);
int __cdecl slapi_attr_next_value(Slapi_Attr *a, int hint, Slapi_Value **v);
char *__cdecl slapi_attr_syntax_normalize(const char *s);
int __cdecl slapi_attr_type2plugin(const char *type, void **pi);
int __cdecl slapi_attr_type_cmp(const char *t1, const char *t2, int opt);
int __cdecl slapi_attr_types_equivalent(const char *t1, const char *t2);
int __cdecl slapi_attr_value_cmp(const Slapi_Attr *attr, const struct berval *v1, const struct berval *v2);
int __cdecl slapi_attr_value_find(const Slapi_Attr *a, struct berval *v);
int __cdecl slapi_be_get_readonly(Slapi_Backend *be);
Slapi_Backend *__cdecl slapi_be_select(const Slapi_DN *sdn);
void __cdecl slapi_be_set_readonly(Slapi_Backend *be, int readonly);
void __cdecl slapi_ch_array_free(char **arrayp);
struct berval *__cdecl slapi_ch_bvdup(const struct berval *v);
struct berval **__cdecl slapi_ch_bvecdup(const struct berval **v);
char *__cdecl slapi_ch_calloc(unsigned __int64 nelem, unsigned __int64 size);
void __cdecl slapi_ch_free(void **ptr);
void __cdecl slapi_ch_free_string(char **ptr);
char *__cdecl slapi_ch_malloc(unsigned __int64 size);
char *__cdecl slapi_ch_realloc(char *block, unsigned __int64 size);
char *__cdecl slapi_ch_strdup(const char *s);
int __cdecl slapi_compute_add_evaluator(slapi_compute_callback_t function);
int __cdecl slapi_compute_add_search_rewriter(slapi_search_rewrite_callback_t function);
int __cdecl slapi_control_present(LDAPControl **controls, char *oid, struct berval **val, int *iscritical);
Slapi_PBlock *__cdecl slapi_delete_internal(char *dn, LDAPControl **controls, int log_change);
int __cdecl slapi_delete_internal_pb(Slapi_PBlock *pb);
void __cdecl slapi_delete_internal_set_pb(Slapi_PBlock *pb, const char *dn, LDAPControl **controls, const char *uniqueid, Slapi_ComponentId *plugin_identity, int operation_flags);
void __cdecl slapi_destroy_condvar(Slapi_CondVar *cvar);
void __cdecl slapi_destroy_mutex(Slapi_Mutex *mutex);
char *__cdecl slapi_dn_beparent(Slapi_PBlock *pb, const char *dn);
char *__cdecl slapi_dn_ignore_case(char *dn);
int __cdecl slapi_dn_isbesuffix(Slapi_PBlock *pb, char *dn);
int __cdecl slapi_dn_isparent(const char *parentdn, const char *childdn);
int __cdecl slapi_dn_issuffix(char *dn, char *suffix);
char *__cdecl slapi_dn_normalize(char *dn);
char *__cdecl slapi_dn_normalize_case(char *dn);
char *__cdecl slapi_dn_parent(const char *dn);
char *__cdecl slapi_dn_plus_rdn(const char *dn, const char *rdn);
LDAPControl *__cdecl slapi_dup_control(LDAPControl *ctrl);
char *__cdecl slapi_entry2str(Slapi_Entry *e, int *len);
int __cdecl slapi_entry_add_rdn_values(Slapi_Entry *e);
int __cdecl slapi_entry_add_string(Slapi_Entry *e, const char *type, const char *value);
int __cdecl slapi_entry_add_value(Slapi_Entry *e, const char *type, const Slapi_Value *value);
int __cdecl slapi_entry_add_values_sv(Slapi_Entry *e, const char *type, Slapi_Value **vals);
int __cdecl slapi_entry_add_valueset(Slapi_Entry *e, const char *type, Slapi_ValueSet *vs);
Slapi_Entry *__cdecl slapi_entry_alloc();
int __cdecl slapi_entry_attr_delete(Slapi_Entry *e, char *type);
int __cdecl slapi_entry_attr_find(Slapi_Entry *e, char *type, Slapi_Attr **attr);
char *__cdecl slapi_entry_attr_get_charptr(const Slapi_Entry *e, const char *type);
int __cdecl slapi_entry_attr_get_int(const Slapi_Entry *e, const char *type);
__int64 __cdecl slapi_entry_attr_get_long(const Slapi_Entry *e, const char *type);
unsigned int __cdecl slapi_entry_attr_get_uint(const Slapi_Entry *e, const char *type);
unsigned __int64 __cdecl slapi_entry_attr_get_ulong(const Slapi_Entry *e, const char *type);
int __cdecl slapi_entry_attr_hasvalue(Slapi_Entry *e, const char *type, const char *value);
int __cdecl slapi_entry_attr_merge(Slapi_Entry *e, char *type, struct berval **vals);
int __cdecl slapi_entry_attr_merge_sv(Slapi_Entry *e, const char *type, Slapi_Value **vals);
int __cdecl slapi_entry_attr_replace_sv(Slapi_Entry *e, const char *type, Slapi_Value **vals);
void __cdecl slapi_entry_attr_set_charptr(Slapi_Entry *e, const char *type, const char *value);
void __cdecl slapi_entry_attr_set_int(Slapi_Entry *e, const char *type, int l);
void __cdecl slapi_entry_attr_set_long(Slapi_Entry *e, const char *type, __int64 l);
void __cdecl slapi_entry_attr_set_uint(Slapi_Entry *e, const char *type, unsigned int l);
void __cdecl slapi_entry_attr_set_ulong(Slapi_Entry *e, const char *type, unsigned __int64 l);
int __cdecl slapi_entry_delete_string(Slapi_Entry *e, const char *type, const char *value);
int __cdecl slapi_entry_delete_values_sv(Slapi_Entry *e, const char *type, Slapi_Value **vals);
Slapi_Entry *__cdecl slapi_entry_dup(Slapi_Entry *e);
int __cdecl slapi_entry_first_attr(const Slapi_Entry *e, Slapi_Attr **attr);
void __cdecl slapi_entry_free(Slapi_Entry *e);
char *__cdecl slapi_entry_get_dn(Slapi_Entry *e);
const char *__cdecl slapi_entry_get_uniqueid(const Slapi_Entry *e);
int __cdecl slapi_entry_has_children(const Slapi_Entry *e);
int __cdecl slapi_entry_merge_values_sv(Slapi_Entry *e, const char *type, Slapi_Value **vals);
int __cdecl slapi_entry_next_attr(const Slapi_Entry *e, Slapi_Attr *prevattr, Slapi_Attr **attr);
int __cdecl slapi_entry_rdn_values_present(const Slapi_Entry *e);
int __cdecl slapi_entry_schema_check(Slapi_PBlock *pb, Slapi_Entry *e);
void __cdecl slapi_entry_set_dn(Slapi_Entry *e, char *dn);
void __cdecl slapi_entry_set_uniqueid(Slapi_Entry *e, char *uniqueid);
size_t __cdecl slapi_entry_size(Slapi_Entry *e);
int __cdecl slapi_filter_apply(Slapi_Filter *f, FILTER_APPLY_FN fn, void *arg, int *error_code);
Slapi_Filter *__cdecl slapi_filter_dup(Slapi_Filter *f);
void __cdecl slapi_filter_free(Slapi_Filter *f, int recurse);
int __cdecl slapi_filter_get_attribute_type(Slapi_Filter *f, char **type);
int __cdecl slapi_filter_get_ava(Slapi_Filter *f, char **type, struct berval **bval);
int __cdecl slapi_filter_get_choice(Slapi_Filter *f);
int __cdecl slapi_filter_get_subfilt(Slapi_Filter *f, char **type, char **initial, char ***any, char **final);
Slapi_Filter *__cdecl slapi_filter_join(int ftype, Slapi_Filter *f1, Slapi_Filter *f2);
Slapi_Filter *__cdecl slapi_filter_list_first(Slapi_Filter *f);
Slapi_Filter *__cdecl slapi_filter_list_next(Slapi_Filter *f, Slapi_Filter *fprev);
int __cdecl slapi_filter_test(Slapi_PBlock *pb, Slapi_Entry *e, Slapi_Filter *f, int verify_access);
int __cdecl slapi_filter_test_simple(Slapi_Entry *e, Slapi_Filter *f);
void __cdecl slapi_free_search_results_internal(Slapi_PBlock *pb);
int __cdecl slapi_get_client_port(Slapi_PBlock *pPB, int *fromPort);
void *__cdecl slapi_get_object_extension(int objecttype, void *object, int extensionhandle);
int __cdecl slapi_get_supported_controls(char ***ctrloidsp, unsigned __int64 **ctrlopsp);
char **slapi_get_supported_extended_ops(void);
char **__cdecl slapi_get_supported_saslmechanisms();
int __cdecl slapi_is_connection_ssl(Slapi_PBlock *pPB, int *isSSL);
int __cdecl slapi_is_rootdse(const char *dn);
LDAP *__cdecl slapi_ldap_init(char *ldaphost, int ldapport, int secure, int shared);
void __cdecl slapi_ldap_unbind(LDAP *ld);
void __cdecl slapi_lock_mutex(Slapi_Mutex *mutex);
int slapi_log_error(int severity, char *subsystem, char *fmt, ...);
char *__cdecl slapi_moddn_get_newdn(Slapi_DN *dn_olddn, char *newrdn, char *newsuperiordn);
Slapi_PBlock *__cdecl slapi_modify_internal(char *dn, LDAPMod **mods, LDAPControl **controls, int log_change);
int __cdecl slapi_modify_internal_pb(Slapi_PBlock *pb);
void __cdecl slapi_modify_internal_set_pb(Slapi_PBlock *pb, const char *dn, LDAPMod **mods, LDAPControl **controls, const char *uniqueid, Slapi_ComponentId *plugin_identity, int operation_flags);
Slapi_PBlock *__cdecl slapi_modrdn_internal(char *olddn, char *newrdn, int deloldrdn, LDAPControl **controls, int log_change);
int __cdecl slapi_modrdn_internal_pb(Slapi_PBlock *pb);
Slapi_CondVar *__cdecl slapi_new_condvar(Slapi_Mutex *mutex);
Slapi_Mutex *slapi_new_mutex(void);
int __cdecl slapi_notify_condvar(Slapi_CondVar *cvar, int notify_all);
int __cdecl slapi_op_abandoned(Slapi_PBlock *pb);
unsigned __int64 __cdecl slapi_op_get_type(Slapi_Operation *op);
char *__cdecl slapi_op_type_to_string(unsigned __int64 type);
void __cdecl slapi_operation_clear_flag(Slapi_Operation *op, unsigned __int64 flag);
int __cdecl slapi_operation_is_flag_set(Slapi_Operation *op, unsigned __int64 flag);
void __cdecl slapi_operation_set_flag(Slapi_Operation *op, unsigned __int64 flag);
void __cdecl slapi_pblock_destroy(Slapi_PBlock *pb);
int __cdecl slapi_pblock_get(Slapi_PBlock *pb, int arg, void *value);
Slapi_PBlock *slapi_pblock_new(void);
int __cdecl slapi_pblock_set(Slapi_PBlock *pb, int arg, void *value);
int __cdecl slapi_rdn2typeval(char *rdn, char **type, struct berval *bv);
int __cdecl slapi_rdn_add(Slapi_RDN *rdn, const char *type, const char *value);
int __cdecl slapi_rdn_compare(Slapi_RDN *rdn1, Slapi_RDN *rdn2);
int __cdecl slapi_rdn_contains(Slapi_RDN *rdn, const char *type, const char *value, size_t length);
int __cdecl slapi_rdn_contains_attr(Slapi_RDN *rdn, const char *type, char **value);
void __cdecl slapi_rdn_done(Slapi_RDN *rdn);
void __cdecl slapi_rdn_free(Slapi_RDN **rdn);
int __cdecl slapi_rdn_get_first(Slapi_RDN *rdn, char **type, char **value);
int __cdecl slapi_rdn_get_index(Slapi_RDN *rdn, const char *type, const char *value, size_t length);
int __cdecl slapi_rdn_get_index_attr(Slapi_RDN *rdn, const char *type, char **value);
int __cdecl slapi_rdn_get_next(Slapi_RDN *rdn, int index, char **type, char **value);
const char *__cdecl slapi_rdn_get_nrdn(const Slapi_RDN *rdn);
int __cdecl slapi_rdn_get_num_components(Slapi_RDN *rdn);
const char *__cdecl slapi_rdn_get_rdn(const Slapi_RDN *rdn);
void __cdecl slapi_rdn_init(Slapi_RDN *rdn);
void __cdecl slapi_rdn_init_dn(Slapi_RDN *rdn, const char *dn);
void __cdecl slapi_rdn_init_rdn(Slapi_RDN *rdn, const Slapi_RDN *fromrdn);
void __cdecl slapi_rdn_init_sdn(Slapi_RDN *rdn, const Slapi_DN *sdn);
int __cdecl slapi_rdn_isempty(const Slapi_RDN *rdn);
Slapi_RDN *slapi_rdn_new(void);
Slapi_RDN *__cdecl slapi_rdn_new_dn(const char *dn);
Slapi_RDN *__cdecl slapi_rdn_new_rdn(const Slapi_RDN *fromrdn);
Slapi_RDN *__cdecl slapi_rdn_new_sdn(const Slapi_DN *sdn);
int __cdecl slapi_rdn_remove(Slapi_RDN *rdn, const char *type, const char *value, size_t length);
int __cdecl slapi_rdn_remove_attr(Slapi_RDN *rdn, const char *type);
int __cdecl slapi_rdn_remove_index(Slapi_RDN *rdn, int atindex);
void __cdecl slapi_rdn_set_dn(Slapi_RDN *rdn, const char *dn);
void __cdecl slapi_rdn_set_rdn(Slapi_RDN *rdn, const Slapi_RDN *fromrdn);
void __cdecl slapi_rdn_set_sdn(Slapi_RDN *rdn, const Slapi_DN *sdn);
int __cdecl slapi_register_object_extension(const char *pluginname, const char *objectname, slapi_extension_constructor_fnptr constructor, slapi_extension_destructor_fnptr destructor, int *objecttype, int *extensionhandle);
void __cdecl slapi_register_supported_control(char *controloid, unsigned __int64 controlops);
void __cdecl slapi_register_supported_saslmechanism(char *mechanism);
Slapi_PBlock *__cdecl slapi_rename_internal(const char *olddn, const char *newrdn, const char *newsuperior, int delolrdn, LDAPControl **controls, int log_change);
void __cdecl slapi_rename_internal_set_pb(Slapi_PBlock *pb, const char *olddn, const char *newrdn, const char *newsuperior, int deloldrdn, LDAPControl **controls, const char *uniqueid, Slapi_ComponentId *plugin_identity, int operation_flags);
Slapi_DN *__cdecl slapi_sdn_add_rdn(Slapi_DN *sdn, const Slapi_RDN *rdn);
int __cdecl slapi_sdn_compare(const Slapi_DN *sdn1, const Slapi_DN *sdn2);
void __cdecl slapi_sdn_copy(const Slapi_DN *from, Slapi_DN *to);
void __cdecl slapi_sdn_done(Slapi_DN *sdn);
Slapi_DN *__cdecl slapi_sdn_dup(const Slapi_DN *sdn);
void __cdecl slapi_sdn_free(Slapi_DN **sdn);
void __cdecl slapi_sdn_get_backend_parent(const Slapi_DN *sdn, Slapi_DN *sdn_parent, const Slapi_Backend *backend);
const char *__cdecl slapi_sdn_get_dn(const Slapi_DN *sdn);
const char *__cdecl slapi_sdn_get_ndn(const Slapi_DN *sdn);
int __cdecl slapi_sdn_get_ndn_len(const Slapi_DN *sdn);
void __cdecl slapi_sdn_get_parent(const Slapi_DN *sdn, Slapi_DN *sdn_parent);
void __cdecl slapi_sdn_get_rdn(const Slapi_DN *sdn, Slapi_RDN *rdn);
int __cdecl slapi_sdn_is_rdn_component(const Slapi_DN *rdn, const Slapi_Attr *a, const Slapi_Value *v);
int __cdecl slapi_sdn_isempty(const Slapi_DN *sdn);
int __cdecl slapi_sdn_isgrandparent(const Slapi_DN *parent, const Slapi_DN *child);
int __cdecl slapi_sdn_isparent(const Slapi_DN *parent, const Slapi_DN *child);
int __cdecl slapi_sdn_issuffix(const Slapi_DN *sdn, const Slapi_DN *suffixsdn);
Slapi_DN *slapi_sdn_new(void);
Slapi_DN *__cdecl slapi_sdn_new_dn_byref(const char *dn);
Slapi_DN *__cdecl slapi_sdn_new_dn_byval(const char *dn);
Slapi_DN *__cdecl slapi_sdn_new_dn_passin(const char *dn);
Slapi_DN *__cdecl slapi_sdn_new_ndn_byref(const char *ndn);
Slapi_DN *__cdecl slapi_sdn_new_ndn_byval(const char *ndn);
int __cdecl slapi_sdn_scope_test(const Slapi_DN *dn, const Slapi_DN *base, int scope);
Slapi_DN *__cdecl slapi_sdn_set_dn_byref(Slapi_DN *sdn, const char *dn);
Slapi_DN *__cdecl slapi_sdn_set_dn_byval(Slapi_DN *sdn, const char *dn);
Slapi_DN *__cdecl slapi_sdn_set_dn_passin(Slapi_DN *sdn, const char *dn);
Slapi_DN *__cdecl slapi_sdn_set_ndn_byref(Slapi_DN *sdn, const char *ndn);
Slapi_DN *__cdecl slapi_sdn_set_ndn_byval(Slapi_DN *sdn, const char *ndn);
Slapi_DN *__cdecl slapi_sdn_set_parent(Slapi_DN *sdn, const Slapi_DN *parentdn);
Slapi_DN *__cdecl slapi_sdn_set_rdn(Slapi_DN *sdn, const Slapi_RDN *rdn);
Slapi_PBlock *__cdecl slapi_search_internal(char *base, int scope, char *filter, LDAPControl **controls, char **attrs, int attrsonly);
int __cdecl slapi_search_internal_callback_pb(Slapi_PBlock *pb, void *callback_data, plugin_result_callback prc, plugin_search_entry_callback psec, plugin_referral_entry_callback prec);
int __cdecl slapi_search_internal_pb(Slapi_PBlock *pb);
void __cdecl slapi_search_internal_set_pb(Slapi_PBlock *pb, const char *base, int scope, const char *filter, char **attrs, int attrsonly, LDAPControl **controls, const char *uniqueid, Slapi_ComponentId *plugin_identity, int operation_flags);
void __cdecl slapi_send_ldap_result(Slapi_PBlock *pb, int err, char *matched, char *text, int nentries, struct berval **urls);
int __cdecl slapi_send_ldap_search_entry(Slapi_PBlock *pb, Slapi_Entry *e, LDAPControl **ectrls, char **attrs, int attrsonly);
int __cdecl slapi_send_ldap_search_reference(Slapi_PBlock *pb, Slapi_Entry *e, struct berval **urls, LDAPControl **ectrls, struct berval **v2refs);
int __cdecl slapi_seq_internal_callback_pb(Slapi_PBlock *pb, void *callback_data, plugin_result_callback res_callback, plugin_search_entry_callback srch_callback, plugin_referral_entry_callback ref_callback);
void __cdecl slapi_seq_internal_set_pb(Slapi_PBlock *pb, char *ibase, int type, char *attrname, char *val, char **attrs, int attrsonly, LDAPControl **controls, Slapi_ComponentId *plugin_identity, int operation_flags);
void __cdecl slapi_set_object_extension(int objecttype, void *object, int extensionhandle, void *extension);
Slapi_Entry *__cdecl slapi_str2entry(char *s, int flags);
Slapi_Filter *__cdecl slapi_str2filter(char *str);
int __cdecl slapi_unlock_mutex(Slapi_Mutex *mutex);
int __cdecl slapi_value_compare(const Slapi_Attr *a, const Slapi_Value *v1, const Slapi_Value *v2);
Slapi_Value *__cdecl slapi_value_dup(const Slapi_Value *v);
void __cdecl slapi_value_free(Slapi_Value **value);
const struct berval *__cdecl slapi_value_get_berval(const Slapi_Value *value);
int __cdecl slapi_value_get_int(const Slapi_Value *value);
size_t __cdecl slapi_value_get_length(const Slapi_Value *value);
__int64 __cdecl slapi_value_get_long(const Slapi_Value *value);
const char *__cdecl slapi_value_get_string(const Slapi_Value *value);
unsigned int __cdecl slapi_value_get_uint(const Slapi_Value *value);
unsigned __int64 __cdecl slapi_value_get_ulong(const Slapi_Value *value);
Slapi_Value *__cdecl slapi_value_init(Slapi_Value *v);
Slapi_Value *__cdecl slapi_value_init_berval(Slapi_Value *v, struct berval *bval);
Slapi_Value *__cdecl slapi_value_init_string(Slapi_Value *v, const char *s);
Slapi_Value *slapi_value_new(void);
Slapi_Value *__cdecl slapi_value_new_berval(const struct berval *bval);
Slapi_Value *__cdecl slapi_value_new_string(const char *s);
Slapi_Value *__cdecl slapi_value_new_value(const Slapi_Value *v);
Slapi_Value *__cdecl slapi_value_set(Slapi_Value *value, void *val, unsigned __int64 len);
Slapi_Value *__cdecl slapi_value_set_berval(Slapi_Value *value, const struct berval *bval);
int __cdecl slapi_value_set_int(Slapi_Value *value, int intVal);
int __cdecl slapi_value_set_string(Slapi_Value *value, const char *strVal);
Slapi_Value *__cdecl slapi_value_set_value(Slapi_Value *value, const Slapi_Value *vfrom);
void __cdecl slapi_valueset_add_value(Slapi_ValueSet *vs, const Slapi_Value *addval);
int __cdecl slapi_valueset_count(const Slapi_ValueSet *vs);
void __cdecl slapi_valueset_done(Slapi_ValueSet *vs);
int __cdecl slapi_valueset_first_value(Slapi_ValueSet *vs, Slapi_Value **v);
void __cdecl slapi_valueset_free(Slapi_ValueSet *vs);
void __cdecl slapi_valueset_init(Slapi_ValueSet *vs);
Slapi_ValueSet *slapi_valueset_new(void);
int __cdecl slapi_valueset_next_value(Slapi_ValueSet *vs, int index, Slapi_Value **v);
void __cdecl slapi_valueset_set_valueset(Slapi_ValueSet *vs1, const Slapi_ValueSet *vs2);
int __cdecl slapi_wait_condvar(Slapi_CondVar *cvar, struct timeval *timeout);
int __cdecl slapi_x_backend_get_flags(const Slapi_Backend *be, unsigned __int64 *flags);
const char *__cdecl slapi_x_be_get_updatedn(Slapi_Backend *be);
int __cdecl slapi_x_compute_get_pblock(computed_attr_context *c, Slapi_PBlock **pb);
int __cdecl slapi_x_entry_get_id(Slapi_Entry *e);
int __cdecl slapi_x_filter_append(int choice, Slapi_Filter **pContainingFilter, Slapi_Filter **pNextFilter, Slapi_Filter *filterToAppend);
int __cdecl slapi_x_filter_set_attribute_type(Slapi_Filter *f, const char *type);
char *slc_names[];
unsigned int __cdecl sleep(unsigned int);
attr_t slk_attr(void);
int __cdecl slk_attr_off(const attr_t, void *);
int __cdecl slk_attr_on(attr_t, void *);
int __cdecl slk_attr_set(const attr_t, __int16, void *);
int __cdecl slk_attroff(const chtype);
int __cdecl slk_attron(const chtype);
int __cdecl slk_attrset(const chtype);
int slk_clear(void);
int __cdecl slk_color(__int16);
int __cdecl slk_init(int);
char *__cdecl slk_label(int);
int slk_noutrefresh(void);
int slk_refresh(void);
int slk_restore(void);
int __cdecl slk_set(int, const char *, int);
int slk_touch(void);
void __cdecl slot_name(cpu_type_t, cpu_subtype_t, char **, char **);
struct sm_stat_res *__cdecl sm_mon_1(struct mon *, CLIENT *);
struct sm_stat_res *__cdecl sm_mon_1_svc(struct mon *, struct svc_req *);
void *__cdecl sm_notify_1(struct stat_chge *, CLIENT *);
void *__cdecl sm_notify_1_svc(struct stat_chge *, struct svc_req *);
void *__cdecl sm_simu_crash_1(void *, CLIENT *);
void *__cdecl sm_simu_crash_1_svc(void *, struct svc_req *);
struct sm_stat_res *__cdecl sm_stat_1(struct sm_name *, CLIENT *);
struct sm_stat_res *__cdecl sm_stat_1_svc(struct sm_name *, struct svc_req *);
struct sm_stat *__cdecl sm_unmon_1(struct mon_id *, CLIENT *);
struct sm_stat *__cdecl sm_unmon_1_svc(struct mon_id *, struct svc_req *);
struct sm_stat *__cdecl sm_unmon_all_1(struct my_id *, CLIENT *);
struct sm_stat *__cdecl sm_unmon_all_1_svc(struct my_id *, struct svc_req *);
netsnmp_session *__cdecl snmp_add(netsnmp_session *, struct netsnmp_transport_s *, int (__cdecl *fpre_parse)(netsnmp_session *, struct netsnmp_transport_s *, void *, int), int (__cdecl *fpost_parse)(netsnmp_session *, netsnmp_pdu *, int));
netsnmp_session *__cdecl snmp_add_full(netsnmp_session *in_session, struct netsnmp_transport_s *transport, int (__cdecl *fpre_parse)(netsnmp_session *, struct netsnmp_transport_s *, void *, int), int (__cdecl *fparse)(netsnmp_session *, netsnmp_pdu *, u_char *, size_t), int (__cdecl *fpost_parse)(netsnmp_session *, netsnmp_pdu *, int), int (__cdecl *fbuild)(netsnmp_session *, netsnmp_pdu *, u_char *, size_t *), int (__cdecl *frbuild)(netsnmp_session *, netsnmp_pdu *, u_char **, size_t *, size_t *), int (__cdecl *fcheck)(u_char *, size_t), netsnmp_pdu *(__cdecl *fcreate_pdu)(struct netsnmp_transport_s *, void *, size_t));
netsnmp_variable_list *__cdecl snmp_add_null_var(netsnmp_pdu *pdu, const oid *name, size_t name_length);
int __cdecl snmp_add_var(netsnmp_pdu *, const oid *, size_t, char, const char *);
void __cdecl snmp_agent_parse_config(char *, char *);
unsigned int __cdecl snmp_alarm_register(unsigned int when, unsigned int flags, SNMPAlarmCallback *thecallback, void *clientarg);
unsigned int __cdecl snmp_alarm_register_hr(struct timeval t, unsigned int flags, SNMPAlarmCallback *cb, void *cd);
void __cdecl snmp_alarm_unregister(unsigned int clientreg);
void snmp_alarm_unregister_all(void);
const char *__cdecl snmp_api_errstring(int snmp_errorno);
int __cdecl snmp_async_send(netsnmp_session *, netsnmp_pdu *, netsnmp_callback, void *);
u_char *__cdecl snmp_build_var_op(u_char *, oid *, size_t *, u_char, size_t, u_char *, size_t *);
int __cdecl snmp_call_callbacks(int major, int minor, void *caller_arg);
int __cdecl snmp_callback_available(int major, int minor);
struct snmp_gen_callback *__cdecl snmp_callback_list(int major, int minor);
void __cdecl snmp_clean_persistent(const char *type);
int __cdecl snmp_clone_mem(void **, const void *, unsigned int);
netsnmp_pdu *__cdecl snmp_clone_pdu(netsnmp_pdu *pdu);
int __cdecl snmp_clone_var(netsnmp_variable_list *, netsnmp_variable_list *);
netsnmp_variable_list *__cdecl snmp_clone_varbind(netsnmp_variable_list *varlist);
int __cdecl snmp_close(netsnmp_session *);
int snmp_close_sessions(void);
u_char *__cdecl snmp_comstr_build(u_char *, size_t *, u_char *, size_t *, __int64 *, size_t);
u_char *__cdecl snmp_comstr_parse(u_char *, size_t *, u_char *, size_t *, __int64 *);
void __cdecl snmp_config_process_memory_list(struct read_config_memory **mem, int, int);
void __cdecl snmp_config_remember_free_list(struct read_config_memory **mem);
void __cdecl snmp_config_remember_in_list(char *line, struct read_config_memory **mem);
int __cdecl snmp_count_callbacks(int major, int minor);
void snmp_debug_init(void);
int __cdecl snmp_decimal_to_binary(u_char **buf, size_t *buf_len, size_t *out_len, int allow_realloc, const char *decimal);
void snmp_disable_calllog(void);
void snmp_disable_filelog(void);
void snmp_disable_log(void);
void snmp_disable_stderrlog(void);
void snmp_disable_syslog(void);
int snmp_dump_packet;
oid *__cdecl snmp_duplicate_objid(const oid *objToCopy, size_t);
void snmp_enable_calllog(void);
void __cdecl snmp_enable_filelog(const char *logfilename, int dont_zero_log);
void snmp_enable_stderrlog(void);
void snmp_enable_syslog(void);
void __cdecl snmp_enable_syslog_ident(const char *ident, const int facility);
int snmp_errno;
void __cdecl snmp_error(netsnmp_session *sess, int *clib_errorno, int *snmp_errorno, char **errstring);
const char *__cdecl snmp_errstring(int snmp_errorno);
netsnmp_pdu *__cdecl snmp_fix_pdu(netsnmp_pdu *pdu, int idx);
void __cdecl snmp_free_pdu(netsnmp_pdu *pdu);
void __cdecl snmp_free_var(netsnmp_variable_list *var);
void __cdecl snmp_free_var_internals(netsnmp_variable_list *);
void __cdecl snmp_free_varbind(netsnmp_variable_list *varlist);
int snmp_get_do_debugging(void);
int snmp_get_do_logging(void);
int snmp_get_dump_packet(void);
int __cdecl snmp_get_fd_for_session(struct snmp_session *sessp);
int snmp_get_full_objid(void);
__int64 snmp_get_next_msgid(void);
__int64 snmp_get_next_reqid(void);
__int64 snmp_get_next_sessid(void);
__int64 snmp_get_next_transid(void);
int snmp_get_quick_print(void);
int snmp_get_random_access(void);
u_int __cdecl snmp_get_statistic(int which);
int snmp_get_suffix_only(void);
int __cdecl snmp_get_token(FILE *fp, char *token, int maxtlen);
int __cdecl snmp_hex_to_binary(u_char **buf, size_t *buf_len, size_t *offset, int allow_realloc, const char *hex);
char *__cdecl snmp_in_options(char *, int, char *const *);
char *__cdecl snmp_in_toggle_options(char *);
void __cdecl snmp_in_toggle_options_usage(const char *, FILE *);
u_int __cdecl snmp_increment_statistic(int which);
u_int __cdecl snmp_increment_statistic_by(int which, int count);
void snmp_init_statistics(void);
int snmp_log(int priority, const char *format, ...);
int __cdecl snmp_log_options(char *optarg, int argc, char *const *argv);
void __cdecl snmp_log_options_usage(const char *lead, FILE *outf);
void __cdecl snmp_log_perror(const char *msg);
char *__cdecl snmp_log_syslogname(const char *syslogname);
char *__cdecl snmp_mib_toggle_options(char *options);
void __cdecl snmp_mib_toggle_options_usage(const char *lead, FILE *outf);
int __cdecl snmp_oid_compare(const oid *, size_t, const oid *, size_t);
int __cdecl snmp_oid_ncompare(const oid *, size_t, const oid *, size_t, size_t);
int __cdecl snmp_oidsubtree_compare(const oid *, size_t, const oid *, size_t);
int __cdecl snmp_oidtree_compare(const oid *, size_t, const oid *, size_t);
netsnmp_session *__cdecl snmp_open(netsnmp_session *);
netsnmp_session *__cdecl snmp_open_ex(netsnmp_session *, int (__cdecl *fpre_parse)(netsnmp_session *, struct netsnmp_transport_s *, void *, int), int (__cdecl *fparse)(netsnmp_session *, netsnmp_pdu *, u_char *, size_t), int (__cdecl *fpost_parse)(netsnmp_session *, netsnmp_pdu *, int), int (__cdecl *fbuild)(netsnmp_session *, netsnmp_pdu *, u_char *, size_t *), int (__cdecl *frbuild)(netsnmp_session *, netsnmp_pdu *, u_char **, size_t *, size_t *), int (__cdecl *fcheck)(u_char *, size_t));
char *__cdecl snmp_out_toggle_options(char *);
void __cdecl snmp_out_toggle_options_usage(const char *, FILE *);
int __cdecl snmp_parse_args(int argc, char **argv, netsnmp_session *session, const char *localOpts, void (__cdecl *proc)(int, char *const *, int));
void __cdecl snmp_parse_args_descriptions(FILE *);
void __cdecl snmp_parse_args_usage(FILE *);
oid *__cdecl snmp_parse_oid(const char *, oid *, size_t *);
u_char *__cdecl snmp_parse_var_op(u_char *, oid *, size_t *, u_char *, size_t *, u_char **, size_t *);
netsnmp_variable_list *__cdecl snmp_pdu_add_variable(netsnmp_pdu *pdu, const oid *name, size_t name_length, u_char type, const void *value, size_t len);
u_char *__cdecl snmp_pdu_build(netsnmp_pdu *, u_char *, size_t *);
netsnmp_pdu *__cdecl snmp_pdu_create(int type);
int __cdecl snmp_pdu_parse(netsnmp_pdu *pdu, u_char *data, size_t *length);
u_char *__cdecl snmp_pdu_rbuild(netsnmp_pdu *, u_char *, size_t *);
int __cdecl snmp_pdu_realloc_rbuild(u_char **pkt, size_t *pkt_len, size_t *offset, netsnmp_pdu *pdu);
const char *__cdecl snmp_pdu_type(int type);
void __cdecl snmp_perror(const char *msg);
void __cdecl snmp_read(fd_set *);
void __cdecl snmp_read2(netsnmp_large_fd_set *);
int __cdecl snmp_realloc(u_char **buf, size_t *buf_len);
int __cdecl snmp_realloc_rbuild_var_op(u_char **pkt, size_t *pkt_len, size_t *offset, int allow_realloc, const oid *name, size_t *name_len, u_char value_type, u_char *value, size_t value_length);
int __cdecl snmp_register_callback(int major, int minor, SNMPCallback *new_callback, void *arg);
void __cdecl snmp_replace_var_types(netsnmp_variable_list *vbl, u_char old_type, u_char new_type);
void __cdecl snmp_reset_var_buffers(netsnmp_variable_list *var);
void __cdecl snmp_reset_var_types(netsnmp_variable_list *vbl, u_char new_type);
void __cdecl snmp_save_persistent(const char *type);
int __cdecl snmp_select_info(int *, fd_set *, struct timeval *, int *);
int __cdecl snmp_select_info2(int *, netsnmp_large_fd_set *, struct timeval *, int *);
int __cdecl snmp_send(netsnmp_session *, netsnmp_pdu *);
void *__cdecl snmp_sess_add(netsnmp_session *, struct netsnmp_transport_s *, int (__cdecl *fpre_parse)(netsnmp_session *, struct netsnmp_transport_s *, void *, int), int (__cdecl *fpost_parse)(netsnmp_session *, netsnmp_pdu *, int));
void *__cdecl snmp_sess_add_ex(netsnmp_session *, struct netsnmp_transport_s *, int (__cdecl *fpre_parse)(netsnmp_session *, struct netsnmp_transport_s *, void *, int), int (__cdecl *fparse)(netsnmp_session *, struct snmp_pdu *, u_char *, size_t), int (__cdecl *fpost_parse)(netsnmp_session *, struct snmp_pdu *, int), int (__cdecl *fbuild)(netsnmp_session *, struct snmp_pdu *, u_char *, size_t *), int (__cdecl *frbuild)(netsnmp_session *, struct snmp_pdu *, u_char **, size_t *, size_t *), int (__cdecl *fcheck)(u_char *, size_t), netsnmp_pdu *(__cdecl *fcreate_pdu)(struct netsnmp_transport_s *, void *, size_t));
int __cdecl snmp_sess_async_send(void *, netsnmp_pdu *, netsnmp_callback, void *);
int __cdecl snmp_sess_close(void *);
void __cdecl snmp_sess_error(void *sess, int *clib_errorno, int *snmp_errorno, char **errstring);
void __cdecl snmp_sess_init(netsnmp_session *);
void *__cdecl snmp_sess_open(netsnmp_session *);
void __cdecl snmp_sess_perror(const char *msg, netsnmp_session *sess);
void *__cdecl snmp_sess_pointer(netsnmp_session *);
int __cdecl snmp_sess_read(void *, fd_set *);
int __cdecl snmp_sess_read2(void *, netsnmp_large_fd_set *);
int __cdecl snmp_sess_select_info(void *, int *, fd_set *, struct timeval *, int *);
int __cdecl snmp_sess_select_info2(void *, int *, netsnmp_large_fd_set *, struct timeval *, int *);
int __cdecl snmp_sess_select_info2_flags(void *, int *, netsnmp_large_fd_set *, struct timeval *, int *, int);
int __cdecl snmp_sess_select_info_flags(void *, int *, fd_set *, struct timeval *, int *, int);
int __cdecl snmp_sess_send(void *, netsnmp_pdu *);
netsnmp_session *__cdecl snmp_sess_session(void *);
int __cdecl snmp_sess_synch_response(void *, netsnmp_pdu *, netsnmp_pdu **);
void __cdecl snmp_sess_timeout(void *);
struct netsnmp_transport_s *__cdecl snmp_sess_transport(void *);
void __cdecl snmp_sess_transport_set(void *, struct netsnmp_transport_s *);
void __cdecl snmp_set_detail(const char *);
void __cdecl snmp_set_do_debugging(int);
void __cdecl snmp_set_dump_packet(int);
void __cdecl snmp_set_full_objid(int);
void __cdecl snmp_set_mib_comment_term(int);
void __cdecl snmp_set_mib_errors(int);
void __cdecl snmp_set_mib_parse_label(int);
void __cdecl snmp_set_mib_warnings(int);
void __cdecl snmp_set_quick_print(int);
void __cdecl snmp_set_random_access(int);
void __cdecl snmp_set_save_descriptions(int);
void __cdecl snmp_set_suffix_only(int);
int __cdecl snmp_set_var_objid(netsnmp_variable_list *var, const oid *name, size_t name_length);
int __cdecl snmp_set_var_typed_integer(netsnmp_variable_list *var, u_char type, __int64 val);
int __cdecl snmp_set_var_typed_value(netsnmp_variable_list *var, u_char type, const void *value, size_t len);
int __cdecl snmp_set_var_value(netsnmp_variable_list *var, const void *value, size_t len);
void __cdecl snmp_shutdown(const char *type);
netsnmp_pdu *__cdecl snmp_split_pdu(netsnmp_pdu *, int skipCount, int copyCount);
int snmp_stderrlog_status(void);
void __cdecl snmp_store(const char *type);
void snmp_store_if_needed(void);
void __cdecl snmp_store_needed(const char *type);
int __cdecl snmp_strcat(u_char **buf, size_t *buf_len, size_t *out_len, int allow_realloc, const u_char *s);
int __cdecl snmp_synch_response(netsnmp_session *, netsnmp_pdu *, netsnmp_pdu **);
int __cdecl snmp_synch_response_cb(netsnmp_session *, netsnmp_pdu *, netsnmp_pdu **, snmp_callback);
void snmp_timeout(void);
netsnmp_transport *__cdecl snmp_udp6_transport(struct sockaddr_in6 *addr, int local);
int __cdecl snmp_unregister_callback(int major, int minor, SNMPCallback *new_callback, void *arg, int matchargs);
unsigned __int64 __cdecl snmp_varbind_len(netsnmp_pdu *pdu);
netsnmp_variable_list *__cdecl snmp_varlist_add_variable(netsnmp_variable_list **varlist, const oid *name, size_t name_length, u_char type, const void *value, size_t len);
int __cdecl snmp_vlog(int priority, const char *format, va_list ap);
void snmpd_free_trapcommunity(void);
void snmpd_free_trapsinks(void);
void __cdecl snmpd_parse_config_authtrap(const char *, char *);
void __cdecl snmpd_parse_config_informsink(const char *, char *);
void __cdecl snmpd_parse_config_trap2sink(const char *, char *);
void __cdecl snmpd_parse_config_trapcommunity(const char *, char *);
void __cdecl snmpd_parse_config_trapsess(const char *, char *);
void __cdecl snmpd_parse_config_trapsink(const char *, char *);
void __cdecl snmpd_register_config_handler(const char *token, void (__cdecl *parser)(const char *, char *), void (*releaser)(void), const char *help);
void __cdecl snmpd_register_const_config_handler(const char *, void (__cdecl *parser)(const char *, const char *), void (*releaser)(void), const char *);
void __cdecl snmpd_store_config(const char *);
void __cdecl snmpd_unregister_config_handler(const char *);
void __cdecl snmpv3_authtype_conf(const char *word, char *cptr);
int __cdecl snmpv3_clone_engineID(u_char **, size_t *, u_char *, size_t);
u_char *__cdecl snmpv3_generate_engineID(size_t *);
size_t __cdecl snmpv3_get_engineID(u_char *buf, size_t buflen);
int __cdecl snmpv3_get_report_type(netsnmp_pdu *pdu);
u_long snmpv3_local_snmpEngineBoots(void);
u_long snmpv3_local_snmpEngineTime(void);
int __cdecl snmpv3_make_report(netsnmp_pdu *pdu, int error);
int __cdecl snmpv3_packet_build(netsnmp_session *, netsnmp_pdu *pdu, u_char *packet, size_t *out_length, u_char *pdu_data, size_t pdu_data_len);
int __cdecl snmpv3_packet_rbuild(netsnmp_session *, netsnmp_pdu *pdu, u_char *packet, size_t *out_length, u_char *pdu_data, size_t pdu_data_len);
int __cdecl snmpv3_packet_realloc_rbuild(u_char **pkt, size_t *pkt_len, size_t *offset, netsnmp_session *session, netsnmp_pdu *pdu, u_char *pdu_data, size_t pdu_data_len);
int __cdecl snmpv3_parse(netsnmp_pdu *, u_char *, size_t *, u_char **, netsnmp_session *);
void __cdecl snmpv3_privtype_conf(const char *word, char *cptr);
int __cdecl snmpv3_probe_contextEngineID_rfc5343(void *slp, netsnmp_session *session);
u_char *__cdecl snmpv3_scopedPDU_parse(netsnmp_pdu *pdu, u_char *cp, size_t *length);
void __cdecl snmpv3_set_engineBootsAndTime(int boots, int ttime);
int __cdecl snmpv3_store(int majorID, int minorID, void *serverarg, void *clientarg);
int __cdecl snprint_asciistring(char *buf, size_t buf_len, const u_char *cp, size_t len);
int __cdecl snprint_badtype(char *buf, size_t buf_len, const netsnmp_variable_list *, const struct enum_list *, const char *, const char *);
int __cdecl snprint_bitstring(char *buf, size_t buf_len, const netsnmp_variable_list *, const struct enum_list *, const char *, const char *);
int __cdecl snprint_by_type(char *buf, size_t buf_len, netsnmp_variable_list *var, const struct enum_list *enums, const char *hint, const char *units);
int __cdecl snprint_counter(char *buf, size_t buf_len, const netsnmp_variable_list *, const struct enum_list *, const char *, const char *);
int __cdecl snprint_counter64(char *buf, size_t buf_len, const netsnmp_variable_list *, const struct enum_list *, const char *, const char *);
int __cdecl snprint_description(char *buf, size_t buf_len, oid *objid, size_t objidlen, int width);
int __cdecl snprint_double(char *buf, size_t buf_len, const netsnmp_variable_list *, const struct enum_list *, const char *, const char *);
int __cdecl snprint_float(char *buf, size_t buf_len, const netsnmp_variable_list *, const struct enum_list *, const char *, const char *);
int __cdecl snprint_gauge(char *buf, size_t buf_len, const netsnmp_variable_list *, const struct enum_list *, const char *, const char *);
int __cdecl snprint_hexstring(char *buf, size_t buf_len, const u_char *, size_t);
int __cdecl snprint_hinted_integer(char *buf, size_t buf_len, __int64, const char *, const char *);
int __cdecl snprint_integer(char *buf, size_t buf_len, const netsnmp_variable_list *, const struct enum_list *, const char *, const char *);
int __cdecl snprint_ipaddress(char *buf, size_t buf_len, const netsnmp_variable_list *, const struct enum_list *, const char *, const char *);
int __cdecl snprint_networkaddress(char *buf, size_t buf_len, const netsnmp_variable_list *, const struct enum_list *, const char *, const char *);
int __cdecl snprint_nsapaddress(char *buf, size_t buf_len, const netsnmp_variable_list *, const struct enum_list *, const char *, const char *);
int __cdecl snprint_null(char *buf, size_t buf_len, const netsnmp_variable_list *, const struct enum_list *, const char *, const char *);
int __cdecl snprint_object_identifier(char *buf, size_t buf_len, const netsnmp_variable_list *, const struct enum_list *, const char *, const char *);
int __cdecl snprint_objid(char *buf, size_t buf_len, const oid *objid, size_t objidlen);
int __cdecl snprint_octet_string(char *buf, size_t buf_len, const netsnmp_variable_list *, const struct enum_list *, const char *, const char *);
int __cdecl snprint_opaque(char *buf, size_t buf_len, const netsnmp_variable_list *, const struct enum_list *, const char *, const char *);
int __cdecl snprint_timeticks(char *buf, size_t buf_len, const netsnmp_variable_list *, const struct enum_list *, const char *, const char *);
int __cdecl snprint_uinteger(char *buf, size_t buf_len, const netsnmp_variable_list *, const struct enum_list *, const char *, const char *);
int __cdecl snprint_value(char *buf, size_t buf_len, const oid *objid, size_t objidlen, const netsnmp_variable_list *variable);
int __cdecl snprint_variable(char *buf, size_t buf_len, const oid *objid, size_t objidlen, const netsnmp_variable_list *variable);
int snprintf(char *, size_t, const char *, ...);
int snprintf_l(char *, size_t, locale_t, const char *, ...);
void __cdecl sock_host();
void __cdecl sock_hostaddr();
void __cdecl sock_hostname();
int __cdecl sockatmark(int);
int __cdecl socket(int, int, int);
int __cdecl socketpair(int, int, int, int *);
void __cdecl sockgen_simplify();
char *__cdecl split_at();
void *__cdecl sprayproc_clear_1(void *, CLIENT *);
void *__cdecl sprayproc_clear_1_svc(void *, struct svc_req *);
spraycumul *__cdecl sprayproc_get_1(void *, CLIENT *);
spraycumul *__cdecl sprayproc_get_1_svc(void *, struct svc_req *);
void *__cdecl sprayproc_spray_1(sprayarr *, CLIENT *);
void *__cdecl sprayproc_spray_1_svc(sprayarr *, struct svc_req *);
int __cdecl sprint_realloc_asciistring(u_char **buf, size_t *buf_len, size_t *out_len, int allow_realloc, const u_char *cp, size_t len);
int __cdecl sprint_realloc_badtype(u_char **buf, size_t *buf_len, size_t *out_len, int allow_realloc, const netsnmp_variable_list *, const struct enum_list *, const char *, const char *);
int __cdecl sprint_realloc_bitstring(u_char **buf, size_t *buf_len, size_t *out_len, int allow_realloc, const netsnmp_variable_list *, const struct enum_list *, const char *, const char *);
int __cdecl sprint_realloc_by_type(u_char **buf, size_t *buf_len, size_t *out_len, int allow_realloc, const netsnmp_variable_list *var, const struct enum_list *enums, const char *hint, const char *units);
int __cdecl sprint_realloc_counter(u_char **buf, size_t *buf_len, size_t *out_len, int allow_realloc, const netsnmp_variable_list *, const struct enum_list *, const char *, const char *);
int __cdecl sprint_realloc_counter64(u_char **buf, size_t *buf_len, size_t *out_len, int allow_realloc, const netsnmp_variable_list *, const struct enum_list *, const char *, const char *);
int __cdecl sprint_realloc_description(u_char **buf, size_t *buf_len, size_t *out_len, int allow_realloc, oid *objid, size_t objidlen, int width);
int __cdecl sprint_realloc_double(u_char **buf, size_t *buf_len, size_t *out_len, int allow_realloc, const netsnmp_variable_list *, const struct enum_list *, const char *, const char *);
int __cdecl sprint_realloc_float(u_char **buf, size_t *buf_len, size_t *out_len, int allow_realloc, const netsnmp_variable_list *, const struct enum_list *, const char *, const char *);
int __cdecl sprint_realloc_gauge(u_char **buf, size_t *buf_len, size_t *out_len, int allow_realloc, const netsnmp_variable_list *, const struct enum_list *, const char *, const char *);
int __cdecl sprint_realloc_hexstring(u_char **buf, size_t *buf_len, size_t *out_len, int allow_realloc, const u_char *, size_t);
int __cdecl sprint_realloc_hinted_integer(u_char **buf, size_t *buf_len, size_t *out_len, int allow_realloc, __int64, const char, const char *, const char *);
int __cdecl sprint_realloc_integer(u_char **buf, size_t *buf_len, size_t *out_len, int allow_realloc, const netsnmp_variable_list *, const struct enum_list *, const char *, const char *);
int __cdecl sprint_realloc_ipaddress(u_char **buf, size_t *buf_len, size_t *out_len, int allow_realloc, const netsnmp_variable_list *, const struct enum_list *, const char *, const char *);
int __cdecl sprint_realloc_networkaddress(u_char **buf, size_t *buf_len, size_t *out_len, int allow_realloc, const netsnmp_variable_list *, const struct enum_list *, const char *, const char *);
int __cdecl sprint_realloc_nsapaddress(u_char **buf, size_t *buf_len, size_t *out_len, int allow_realloc, const netsnmp_variable_list *, const struct enum_list *, const char *, const char *);
int __cdecl sprint_realloc_null(u_char **buf, size_t *buf_len, size_t *out_len, int allow_realloc, const netsnmp_variable_list *, const struct enum_list *, const char *, const char *);
int __cdecl sprint_realloc_object_identifier(u_char **buf, size_t *buf_len, size_t *out_len, int allow_realloc, const netsnmp_variable_list *, const struct enum_list *, const char *, const char *);
int __cdecl sprint_realloc_objid(u_char **buf, size_t *buf_len, size_t *out_len, int allow_realloc, const oid *objid, size_t objidlen);
int __cdecl sprint_realloc_octet_string(u_char **buf, size_t *buf_len, size_t *out_len, int allow_realloc, const netsnmp_variable_list *, const struct enum_list *, const char *, const char *);
int __cdecl sprint_realloc_opaque(u_char **buf, size_t *buf_len, size_t *out_len, int allow_realloc, const netsnmp_variable_list *, const struct enum_list *, const char *, const char *);
int __cdecl sprint_realloc_timeticks(u_char **buf, size_t *buf_len, size_t *out_len, int allow_realloc, const netsnmp_variable_list *, const struct enum_list *, const char *, const char *);
int __cdecl sprint_realloc_uinteger(u_char **buf, size_t *buf_len, size_t *out_len, int allow_realloc, const netsnmp_variable_list *, const struct enum_list *, const char *, const char *);
int __cdecl sprint_realloc_value(u_char **buf, size_t *buf_len, size_t *out_len, int allow_realloc, const oid *objid, size_t objidlen, const netsnmp_variable_list *variable);
int __cdecl sprint_realloc_variable(u_char **buf, size_t *buf_len, size_t *out_len, int allow_realloc, const oid *objid, size_t objidlen, const netsnmp_variable_list *variable);
int sprintf(char *, const char *, ...);
int sprintf_l(char *, locale_t, const char *, ...);
void *__cdecl sqlite3_aggregate_context(sqlite3_context *, int nBytes);
int __cdecl sqlite3_aggregate_count(sqlite3_context *);
int __cdecl sqlite3_auto_extension(void (*xEntryPoint)(void));
int __cdecl sqlite3_backup_finish(sqlite3_backup *p);
sqlite3_backup *__cdecl sqlite3_backup_init(sqlite3 *pDest, const char *zDestName, sqlite3 *pSource, const char *zSourceName);
int __cdecl sqlite3_backup_pagecount(sqlite3_backup *p);
int __cdecl sqlite3_backup_remaining(sqlite3_backup *p);
int __cdecl sqlite3_backup_step(sqlite3_backup *p, int nPage);
int __cdecl sqlite3_bind_blob(sqlite3_stmt *, int, const void *, int n, void (__cdecl *)(void *));
int __cdecl sqlite3_bind_double(sqlite3_stmt *, int, double);
int __cdecl sqlite3_bind_int(sqlite3_stmt *, int, int);
int __cdecl sqlite3_bind_int64(sqlite3_stmt *, int, sqlite3_int64);
int __cdecl sqlite3_bind_null(sqlite3_stmt *, int);
int __cdecl sqlite3_bind_parameter_count(sqlite3_stmt *);
int __cdecl sqlite3_bind_parameter_index(sqlite3_stmt *, const char *zName);
const char *__cdecl sqlite3_bind_parameter_name(sqlite3_stmt *, int);
int __cdecl sqlite3_bind_text(sqlite3_stmt *, int, const char *, int n, void (__cdecl *)(void *));
int __cdecl sqlite3_bind_text16(sqlite3_stmt *, int, const void *, int, void (__cdecl *)(void *));
int __cdecl sqlite3_bind_value(sqlite3_stmt *, int, const sqlite3_value *);
int __cdecl sqlite3_bind_zeroblob(sqlite3_stmt *, int, int n);
int __cdecl sqlite3_blob_bytes(sqlite3_blob *);
int __cdecl sqlite3_blob_close(sqlite3_blob *);
int __cdecl sqlite3_blob_open(sqlite3 *, const char *zDb, const char *zTable, const char *zColumn, sqlite3_int64 iRow, int flags, sqlite3_blob **ppBlob);
int __cdecl sqlite3_blob_read(sqlite3_blob *, void *Z, int N, int iOffset);
int __cdecl sqlite3_blob_reopen(sqlite3_blob *, sqlite3_int64);
int __cdecl sqlite3_blob_write(sqlite3_blob *, const void *z, int n, int iOffset);
int __cdecl sqlite3_busy_handler(sqlite3 *, int (__cdecl *)(void *, int), void *);
int __cdecl sqlite3_busy_timeout(sqlite3 *, int ms);
int __cdecl sqlite3_changes(sqlite3 *);
int __cdecl sqlite3_clear_bindings(sqlite3_stmt *);
int __cdecl sqlite3_close(sqlite3 *);
int __cdecl sqlite3_collation_needed(sqlite3 *, void *, void (__cdecl *)(void *, sqlite3 *, int eTextRep, const char *));
int __cdecl sqlite3_collation_needed16(sqlite3 *, void *, void (__cdecl *)(void *, sqlite3 *, int eTextRep, const void *));
const void *__cdecl sqlite3_column_blob(sqlite3_stmt *, int iCol);
int __cdecl sqlite3_column_bytes(sqlite3_stmt *, int iCol);
int __cdecl sqlite3_column_bytes16(sqlite3_stmt *, int iCol);
int __cdecl sqlite3_column_count(sqlite3_stmt *pStmt);
const char *__cdecl sqlite3_column_database_name(sqlite3_stmt *, int);
const void *__cdecl sqlite3_column_database_name16(sqlite3_stmt *, int);
const char *__cdecl sqlite3_column_decltype(sqlite3_stmt *, int);
const void *__cdecl sqlite3_column_decltype16(sqlite3_stmt *, int);
double __cdecl sqlite3_column_double(sqlite3_stmt *, int iCol);
int __cdecl sqlite3_column_int(sqlite3_stmt *, int iCol);
sqlite3_int64 __cdecl sqlite3_column_int64(sqlite3_stmt *, int iCol);
const char *__cdecl sqlite3_column_name(sqlite3_stmt *, int N);
const void *__cdecl sqlite3_column_name16(sqlite3_stmt *, int N);
const char *__cdecl sqlite3_column_origin_name(sqlite3_stmt *, int);
const void *__cdecl sqlite3_column_origin_name16(sqlite3_stmt *, int);
const char *__cdecl sqlite3_column_table_name(sqlite3_stmt *, int);
const void *__cdecl sqlite3_column_table_name16(sqlite3_stmt *, int);
const unsigned __int8 *__cdecl sqlite3_column_text(sqlite3_stmt *, int iCol);
const void *__cdecl sqlite3_column_text16(sqlite3_stmt *, int iCol);
int __cdecl sqlite3_column_type(sqlite3_stmt *, int iCol);
sqlite3_value *__cdecl sqlite3_column_value(sqlite3_stmt *, int iCol);
void *__cdecl sqlite3_commit_hook(sqlite3 *, int (__cdecl *)(void *), void *);
const char *__cdecl sqlite3_compileoption_get(int N);
int __cdecl sqlite3_compileoption_used(const char *zOptName);
int __cdecl sqlite3_complete(const char *sql);
int __cdecl sqlite3_complete16(const void *sql);
int sqlite3_config(int, ...);
sqlite3 *__cdecl sqlite3_context_db_handle(sqlite3_context *);
int __cdecl sqlite3_create_collation(sqlite3 *, const char *zName, int eTextRep, void *pArg, int (__cdecl *xCompare)(void *, int, const void *, int, const void *));
int __cdecl sqlite3_create_collation16(sqlite3 *, const void *zName, int eTextRep, void *pArg, int (__cdecl *xCompare)(void *, int, const void *, int, const void *));
int __cdecl sqlite3_create_collation_v2(sqlite3 *, const char *zName, int eTextRep, void *pArg, int (__cdecl *xCompare)(void *, int, const void *, int, const void *), void (__cdecl *xDestroy)(void *));
int __cdecl sqlite3_create_function(sqlite3 *db, const char *zFunctionName, int nArg, int eTextRep, void *pApp, void (__cdecl *xFunc)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xStep)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xFinal)(sqlite3_context *));
int __cdecl sqlite3_create_function16(sqlite3 *db, const void *zFunctionName, int nArg, int eTextRep, void *pApp, void (__cdecl *xFunc)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xStep)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xFinal)(sqlite3_context *));
int __cdecl sqlite3_create_function_v2(sqlite3 *db, const char *zFunctionName, int nArg, int eTextRep, void *pApp, void (__cdecl *xFunc)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xStep)(sqlite3_context *, int, sqlite3_value **), void (__cdecl *xFinal)(sqlite3_context *), void (__cdecl *xDestroy)(void *));
int __cdecl sqlite3_create_module(sqlite3 *db, const char *zName, const sqlite3_module *p, void *pClientData);
int __cdecl sqlite3_create_module_v2(sqlite3 *db, const char *zName, const sqlite3_module *p, void *pClientData, void (__cdecl *xDestroy)(void *));
int __cdecl sqlite3_data_count(sqlite3_stmt *pStmt);
int sqlite3_db_config(sqlite3 *, int op, ...);
sqlite3 *__cdecl sqlite3_db_handle(sqlite3_stmt *);
sqlite3_mutex *__cdecl sqlite3_db_mutex(sqlite3 *);
int __cdecl sqlite3_db_status(sqlite3 *, int op, int *pCur, int *pHiwtr, int resetFlg);
int __cdecl sqlite3_declare_vtab(sqlite3 *, const char *zSQL);
int __cdecl sqlite3_enable_load_extension(sqlite3 *db, int onoff);
int __cdecl sqlite3_enable_shared_cache(int);
int __cdecl sqlite3_errcode(sqlite3 *db);
const char *__cdecl sqlite3_errmsg(sqlite3 *);
const void *__cdecl sqlite3_errmsg16(sqlite3 *);
int __cdecl sqlite3_exec(sqlite3 *, const char *sql, int (__cdecl *callback)(void *, int, char **, char **), void *, char **errmsg);
int __cdecl sqlite3_expired(sqlite3_stmt *);
int __cdecl sqlite3_extended_errcode(sqlite3 *db);
int __cdecl sqlite3_extended_result_codes(sqlite3 *, int onoff);
int __cdecl sqlite3_file_control(sqlite3 *, const char *zDbName, int op, void *);
int __cdecl sqlite3_finalize(sqlite3_stmt *pStmt);
void __cdecl sqlite3_free(void *);
void __cdecl sqlite3_free_table(char **result);
int __cdecl sqlite3_get_autocommit(sqlite3 *);
void *__cdecl sqlite3_get_auxdata(sqlite3_context *, int N);
int __cdecl sqlite3_get_table(sqlite3 *db, const char *zSql, char ***pazResult, int *pnRow, int *pnColumn, char **pzErrmsg);
int sqlite3_global_recover(void);
int sqlite3_initialize(void);
void __cdecl sqlite3_interrupt(sqlite3 *);
sqlite3_int64 __cdecl sqlite3_last_insert_rowid(sqlite3 *);
const char *sqlite3_libversion(void);
int sqlite3_libversion_number(void);
int __cdecl sqlite3_limit(sqlite3 *, int id, int newVal);
int __cdecl sqlite3_load_extension(sqlite3 *db, const char *zFile, const char *zProc, char **pzErrMsg);
void sqlite3_log(int iErrCode, const char *zFormat, ...);
void *__cdecl sqlite3_malloc(int);
int __cdecl sqlite3_memory_alarm(void (__cdecl *)(void *, sqlite3_int64, int), void *, sqlite3_int64);
sqlite3_int64 __cdecl sqlite3_memory_highwater(int resetFlag);
sqlite3_int64 sqlite3_memory_used(void);
char *sqlite3_mprintf(const char *, ...);
sqlite3_mutex *__cdecl sqlite3_mutex_alloc(int);
void __cdecl sqlite3_mutex_enter(sqlite3_mutex *);
void __cdecl sqlite3_mutex_free(sqlite3_mutex *);
int __cdecl sqlite3_mutex_held(sqlite3_mutex *);
void __cdecl sqlite3_mutex_leave(sqlite3_mutex *);
int __cdecl sqlite3_mutex_notheld(sqlite3_mutex *);
int __cdecl sqlite3_mutex_try(sqlite3_mutex *);
sqlite3_stmt *__cdecl sqlite3_next_stmt(sqlite3 *pDb, sqlite3_stmt *pStmt);
int __cdecl sqlite3_open(const char *filename, sqlite3 **ppDb);
int __cdecl sqlite3_open16(const void *filename, sqlite3 **ppDb);
int __cdecl sqlite3_open_v2(const char *filename, sqlite3 **ppDb, int flags, const char *zVfs);
int sqlite3_os_end(void);
int sqlite3_os_init(void);
int __cdecl sqlite3_overload_function(sqlite3 *, const char *zFuncName, int nArg);
int __cdecl sqlite3_prepare(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail);
int __cdecl sqlite3_prepare16(sqlite3 *db, const void *zSql, int nByte, sqlite3_stmt **ppStmt, const void **pzTail);
int __cdecl sqlite3_prepare16_v2(sqlite3 *db, const void *zSql, int nByte, sqlite3_stmt **ppStmt, const void **pzTail);
int __cdecl sqlite3_prepare_v2(sqlite3 *db, const char *zSql, int nByte, sqlite3_stmt **ppStmt, const char **pzTail);
void *__cdecl sqlite3_profile(sqlite3 *, void (__cdecl *xProfile)(void *, const char *, sqlite3_uint64), void *);
void __cdecl sqlite3_progress_handler(sqlite3 *, int, int (__cdecl *)(void *), void *);
void __cdecl sqlite3_randomness(int N, void *P);
void *__cdecl sqlite3_realloc(void *, int);
int __cdecl sqlite3_release_memory(int);
int __cdecl sqlite3_reset(sqlite3_stmt *pStmt);
void sqlite3_reset_auto_extension(void);
void __cdecl sqlite3_result_blob(sqlite3_context *, const void *, int, void (__cdecl *)(void *));
void __cdecl sqlite3_result_double(sqlite3_context *, double);
void __cdecl sqlite3_result_error(sqlite3_context *, const char *, int);
void __cdecl sqlite3_result_error16(sqlite3_context *, const void *, int);
void __cdecl sqlite3_result_error_code(sqlite3_context *, int);
void __cdecl sqlite3_result_error_nomem(sqlite3_context *);
void __cdecl sqlite3_result_error_toobig(sqlite3_context *);
void __cdecl sqlite3_result_int(sqlite3_context *, int);
void __cdecl sqlite3_result_int64(sqlite3_context *, sqlite3_int64);
void __cdecl sqlite3_result_null(sqlite3_context *);
void __cdecl sqlite3_result_text(sqlite3_context *, const char *, int, void (__cdecl *)(void *));
void __cdecl sqlite3_result_text16(sqlite3_context *, const void *, int, void (__cdecl *)(void *));
void __cdecl sqlite3_result_text16be(sqlite3_context *, const void *, int, void (__cdecl *)(void *));
void __cdecl sqlite3_result_text16le(sqlite3_context *, const void *, int, void (__cdecl *)(void *));
void __cdecl sqlite3_result_value(sqlite3_context *, sqlite3_value *);
void __cdecl sqlite3_result_zeroblob(sqlite3_context *, int n);
void *__cdecl sqlite3_rollback_hook(sqlite3 *, void (__cdecl *)(void *), void *);
int __cdecl sqlite3_rtree_geometry_callback(sqlite3 *db, const char *zGeom, int (__cdecl *xGeom)(sqlite3_rtree_geometry *, int nCoord, double *aCoord, int *pRes), void *pContext);
int __cdecl sqlite3_set_authorizer(sqlite3 *, int (__cdecl *xAuth)(void *, int, const char *, const char *, const char *, const char *), void *pUserData);
void __cdecl sqlite3_set_auxdata(sqlite3_context *, int N, void *, void (__cdecl *)(void *));
int sqlite3_shutdown(void);
int __cdecl sqlite3_sleep(int);
char *sqlite3_snprintf(int, char *, const char *, ...);
void __cdecl sqlite3_soft_heap_limit(int N);
sqlite3_int64 __cdecl sqlite3_soft_heap_limit64(sqlite3_int64 N);
const char *sqlite3_sourceid(void);
const char *__cdecl sqlite3_sql(sqlite3_stmt *pStmt);
int __cdecl sqlite3_status(int op, int *pCurrent, int *pHighwater, int resetFlag);
int __cdecl sqlite3_step(sqlite3_stmt *);
int __cdecl sqlite3_stmt_readonly(sqlite3_stmt *pStmt);
int __cdecl sqlite3_stmt_status(sqlite3_stmt *, int op, int resetFlg);
int __cdecl sqlite3_strnicmp(const char *, const char *, int);
int __cdecl sqlite3_table_column_metadata(sqlite3 *db, const char *zDbName, const char *zTableName, const char *zColumnName, const char **pzDataType, const char **pzCollSeq, int *pNotNull, int *pPrimaryKey, int *pAutoinc);
char *sqlite3_temp_directory;
int sqlite3_test_control(int op, ...);
void sqlite3_thread_cleanup(void);
int sqlite3_threadsafe(void);
int __cdecl sqlite3_total_changes(sqlite3 *);
void *__cdecl sqlite3_trace(sqlite3 *, void (__cdecl *xTrace)(void *, const char *), void *);
int __cdecl sqlite3_transfer_bindings(sqlite3_stmt *, sqlite3_stmt *);
int __cdecl sqlite3_unlock_notify(sqlite3 *pBlocked, void (__cdecl *xNotify)(void **apArg, int nArg), void *pNotifyArg);
void *__cdecl sqlite3_update_hook(sqlite3 *, void (__cdecl *)(void *, int, const char *, const char *, sqlite3_int64), void *);
void *__cdecl sqlite3_user_data(sqlite3_context *);
const void *__cdecl sqlite3_value_blob(sqlite3_value *);
int __cdecl sqlite3_value_bytes(sqlite3_value *);
int __cdecl sqlite3_value_bytes16(sqlite3_value *);
double __cdecl sqlite3_value_double(sqlite3_value *);
int __cdecl sqlite3_value_int(sqlite3_value *);
sqlite3_int64 __cdecl sqlite3_value_int64(sqlite3_value *);
int __cdecl sqlite3_value_numeric_type(sqlite3_value *);
const unsigned __int8 *__cdecl sqlite3_value_text(sqlite3_value *);
const void *__cdecl sqlite3_value_text16(sqlite3_value *);
const void *__cdecl sqlite3_value_text16be(sqlite3_value *);
const void *__cdecl sqlite3_value_text16le(sqlite3_value *);
int __cdecl sqlite3_value_type(sqlite3_value *);
const char sqlite3_version[];
sqlite3_vfs *__cdecl sqlite3_vfs_find(const char *zVfsName);
int __cdecl sqlite3_vfs_register(sqlite3_vfs *, int makeDflt);
int __cdecl sqlite3_vfs_unregister(sqlite3_vfs *);
char *__cdecl sqlite3_vmprintf(const char *, va_list);
char *__cdecl sqlite3_vsnprintf(int, char *, const char *, va_list);
int __cdecl sqlite3_wal_autocheckpoint(sqlite3 *db, int N);
int __cdecl sqlite3_wal_checkpoint(sqlite3 *db, const char *zDb);
void *__cdecl sqlite3_wal_hook(sqlite3 *, int (__cdecl *)(void *, sqlite3 *, const char *, int), void *);
double __cdecl sqrt(double);
float __cdecl sqrtf(float);
long double __cdecl sqrtl(long double);
int __cdecl sradixsort(const unsigned __int8 **, int, const unsigned __int8 *, unsigned int);
void __cdecl srand(unsigned int);
void __cdecl srand48(__int64);
void sranddev(void);
void __cdecl srandom(unsigned int);
void srandomdev(void);
int sscanf(const char *, const char *, ...);
int sscanf_l(const char *, locale_t, const char *, ...);
int standend(void);
int standout(void);
void __cdecl startDocument(void *ctx);
void __cdecl startElement(void *ctx, const xmlChar *fullname, const xmlChar **atts);
int start_color(void);
int __cdecl stat(const char *, struct stat *);
int __cdecl stat64(const char *, struct stat64 *);
int __cdecl statfs(const char *, struct statfs *);
int __cdecl statfs64(const char *, struct statfs64 *);
int __cdecl statvfs(const char *, struct statvfs *);
int __cdecl statx64_np(const char *, struct stat64 *, filesec_t);
int __cdecl statx_np(const char *, struct stat *, filesec_t);
WINDOW *stdscr;
void __cdecl stifle_history(int);
int __cdecl store_vacm(int majorID, int minorID, void *serverarg, void *clientarg);
char *__cdecl stpcpy(char *, const char *);
char *__cdecl stpncpy(char *, const char *, size_t);
int __cdecl strcasecmp(const char *, const char *);
int __cdecl strcasecmp_l(const char *, const char *, locale_t);
char *__cdecl strcasestr(const char *, const char *);
char *__cdecl strcasestr_l(const char *, const char *, locale_t);
char *__cdecl strcat(char *, const char *);
char *__cdecl strchr(const char *, int);
int __cdecl strcmp(const char *, const char *);
char *const strcodes[];
int __cdecl strcoll(const char *, const char *);
int __cdecl strcoll_l(const char *, const char *, locale_t);
char *__cdecl strcpy(char *, const char *);
size_t __cdecl strcspn(const char *, const char *);
char *__cdecl strdup(const char *);
char *__cdecl strerror(int);
int __cdecl strerror_r(int, char *, size_t);
ssize_t strfmon(char *, size_t, const char *, ...);
ssize_t strfmon_l(char *, size_t, locale_t, const char *, ...);
char *const strfnames[];
size_t __cdecl strftime(char *, size_t, const char *, const struct tm *);
size_t __cdecl strftime_l(char *, size_t, const char *, const struct tm *, locale_t);
unsigned __int8 *__cdecl string_to_hex(char *str, __int64 *len);
size_t __cdecl strlcat(char *, const char *, size_t);
size_t __cdecl strlcpy(char *, const char *, size_t);
size_t __cdecl strlen(const char *);
void __cdecl strmode(int, char *);
char *const strnames[];
int __cdecl strncasecmp(const char *, const char *, size_t);
int __cdecl strncasecmp_l(const char *, const char *, size_t, locale_t);
char *__cdecl strncat(char *, const char *, size_t);
int __cdecl strncmp(const char *, const char *, size_t);
char *__cdecl strncpy(char *, const char *, size_t);
char *__cdecl strndup(const char *, size_t);
size_t __cdecl strnlen(const char *, size_t);
char *__cdecl strnstr(const char *, const char *, size_t);
char *__cdecl strpbrk(const char *, const char *);
char *__cdecl strptime(const char *, const char *, struct tm *);
char *__cdecl strptime_l(const char *, const char *, struct tm *, locale_t);
char *__cdecl strrchr(const char *, int);
char *__cdecl strsep(char **, const char *);
char *__cdecl strsignal(int sig);
size_t __cdecl strspn(const char *, const char *);
char *__cdecl strstr(const char *, const char *);
double __cdecl strtod(const char *, char **);
double __cdecl strtod_l(const char *, char **, locale_t);
float __cdecl strtof(const char *, char **);
float __cdecl strtof_l(const char *, char **, locale_t);
int __cdecl strtofflags(char **, unsigned __int64 *, unsigned __int64 *);
intmax_t __cdecl strtoimax(const char *nptr, char **endptr, int base);
intmax_t __cdecl strtoimax_l(const char *nptr, char **endptr, int base, locale_t);
char *__cdecl strtok(char *, const char *);
char *__cdecl strtok_r(char *, const char *, char **);
__int64 __cdecl strtol(const char *, char **, int);
__int64 __cdecl strtol_l(const char *, char **, int, locale_t);
long double __cdecl strtold(const char *, char **);
long double __cdecl strtold_l(const char *, char **, locale_t);
__int64 __cdecl strtoll(const char *, char **, int);
__int64 __cdecl strtoll_l(const char *, char **, int, locale_t);
__int64 __cdecl strtoq(const char *, char **, int);
__int64 __cdecl strtoq_l(const char *, char **, int, locale_t);
unsigned __int64 __cdecl strtoul(const char *, char **, int);
unsigned __int64 __cdecl strtoul_l(const char *, char **, int, locale_t);
unsigned __int64 __cdecl strtoull(const char *, char **, int);
unsigned __int64 __cdecl strtoull_l(const char *, char **, int, locale_t);
uintmax_t __cdecl strtoumax(const char *nptr, char **endptr, int base);
uintmax_t __cdecl strtoumax_l(const char *nptr, char **endptr, int base, locale_t);
unsigned __int64 __cdecl strtouq(const char *, char **, int);
unsigned __int64 __cdecl strtouq_l(const char *, char **, int, locale_t);
int __cdecl strunvis(char *, const char *);
int __cdecl strunvisx(char *, const char *, int);
int __cdecl strvis(char *, const char *, int);
int __cdecl strvisx(char *, const char *, size_t, int);
size_t __cdecl strxfrm(char *, const char *, size_t);
size_t __cdecl strxfrm_l(char *, const char *, size_t, locale_t);
int __cdecl stty(int, struct sgttyb *);
char *suboptarg;
WINDOW *__cdecl subpad(WINDOW *, int, int, int, int);
WINDOW *__cdecl subwin(WINDOW *, int, int, int, int);
fd_set svc_fdset;
void __cdecl svc_getreq(int);
void __cdecl svc_getreqset(fd_set *);
int __cdecl svc_register(SVCXPRT *, unsigned int, unsigned int, void (__cdecl *)(), int);
void svc_run(void);
int __cdecl svc_sendreply(SVCXPRT *, xdrproc_t, char *);
void __cdecl svc_unregister(unsigned int, unsigned int);
void __cdecl svcerr_auth(SVCXPRT *, enum auth_stat);
void __cdecl svcerr_decode(SVCXPRT *);
void __cdecl svcerr_noproc(SVCXPRT *);
void __cdecl svcerr_noprog(SVCXPRT *);
void __cdecl svcerr_progvers(SVCXPRT *, unsigned int, unsigned int);
void __cdecl svcerr_systemerr(SVCXPRT *);
void __cdecl svcerr_weakauth(SVCXPRT *);
SVCXPRT *__cdecl svcfd_create(int, u_int, u_int);
SVCXPRT *svcraw_create(void);
SVCXPRT *__cdecl svctcp_create(int, unsigned int, unsigned int);
SVCXPRT *__cdecl svcudp_bufcreate(int, unsigned int, unsigned int);
SVCXPRT *__cdecl svcudp_create(int);
void __cdecl swab(const void *, void *, ssize_t);
void __cdecl swap_dylib_command(struct dylib_command *dl, enum NXByteOrder target_byte_sex);
void __cdecl swap_dylib_module(struct dylib_module *mods, uint32_t nmods, enum NXByteOrder target_byte_sex);
void __cdecl swap_dylib_module_64(struct dylib_module_64 *mods, uint32_t nmods, enum NXByteOrder target_byte_sex);
void __cdecl swap_dylib_reference(struct dylib_reference *refs, uint32_t nrefs, enum NXByteOrder target_byte_sex);
void __cdecl swap_dylib_table_of_contents(struct dylib_table_of_contents *tocs, uint32_t ntocs, enum NXByteOrder target_byte_sex);
void __cdecl swap_dylinker_command(struct dylinker_command *dyld, enum NXByteOrder target_byte_sex);
void __cdecl swap_dysymtab_command(struct dysymtab_command *dyst, enum NXByteOrder target_byte_sex);
void __cdecl swap_fat_arch(struct fat_arch *fat_archs, uint32_t nfat_arch, enum NXByteOrder target_byte_order);
void __cdecl swap_fat_header(struct fat_header *fat_header, enum NXByteOrder target_byte_order);
void __cdecl swap_fvmfile_command(struct fvmfile_command *ff, enum NXByteOrder target_byte_order);
void __cdecl swap_fvmlib_command(struct fvmlib_command *fl, enum NXByteOrder target_byte_order);
void __cdecl swap_i386_exception_state(i386_exception_state_t *exc, enum NXByteOrder target_byte_order);
void __cdecl swap_i386_float_state(struct i386_float_state *fpu, enum NXByteOrder target_byte_order);
void __cdecl swap_i386_thread_state(i386_thread_state_t *cpu, enum NXByteOrder target_byte_order);
void __cdecl swap_ident_command(struct ident_command *ident, enum NXByteOrder target_byte_order);
void __cdecl swap_indirect_symbols(uint32_t *indirect_symbols, uint32_t nindirect_symbols, enum NXByteOrder target_byte_sex);
void __cdecl swap_load_command(struct load_command *lc, enum NXByteOrder target_byte_order);
void __cdecl swap_mach_header(struct mach_header *mh, enum NXByteOrder target_byte_order);
void __cdecl swap_mach_header_64(struct mach_header_64 *mh, enum NXByteOrder target_byte_order);
void __cdecl swap_nlist(struct nlist *symbols, uint32_t nsymbols, enum NXByteOrder target_byte_order);
void __cdecl swap_nlist_64(struct nlist_64 *symbols, uint32_t nsymbols, enum NXByteOrder target_byte_order);
void __cdecl swap_prebind_cksum_command(struct prebind_cksum_command *cksum_cmd, enum NXByteOrder target_byte_sex);
void __cdecl swap_prebound_dylib_command(struct prebound_dylib_command *pbdylib, enum NXByteOrder target_byte_sex);
void __cdecl swap_ranlib(struct ranlib *ranlibs, uint32_t nranlibs, enum NXByteOrder target_byte_order);
void __cdecl swap_relocation_info(struct relocation_info *relocs, uint32_t nrelocs, enum NXByteOrder target_byte_order);
void __cdecl swap_routines_command(struct routines_command *r_cmd, enum NXByteOrder target_byte_sex);
void __cdecl swap_routines_command_64(struct routines_command_64 *r_cmd, enum NXByteOrder target_byte_sex);
void __cdecl swap_section(struct section *s, uint32_t nsects, enum NXByteOrder target_byte_order);
void __cdecl swap_section_64(struct section_64 *s, uint32_t nsects, enum NXByteOrder target_byte_order);
void __cdecl swap_segment_command(struct segment_command *sg, enum NXByteOrder target_byte_order);
void __cdecl swap_segment_command_64(struct segment_command_64 *sg, enum NXByteOrder target_byte_order);
void __cdecl swap_sub_client_command(struct sub_client_command *csub, enum NXByteOrder target_byte_sex);
void __cdecl swap_sub_framework_command(struct sub_framework_command *sub, enum NXByteOrder target_byte_sex);
void __cdecl swap_sub_library_command(struct sub_library_command *lsub, enum NXByteOrder target_byte_sex);
void __cdecl swap_sub_umbrella_command(struct sub_umbrella_command *usub, enum NXByteOrder target_byte_sex);
void __cdecl swap_symseg_command(struct symseg_command *ss, enum NXByteOrder target_byte_order);
void __cdecl swap_symtab_command(struct symtab_command *st, enum NXByteOrder target_byte_order);
void __cdecl swap_thread_command(struct thread_command *ut, enum NXByteOrder target_byte_order);
void __cdecl swap_twolevel_hint(struct twolevel_hint *hints, uint32_t nhints, enum NXByteOrder target_byte_sex);
void __cdecl swap_twolevel_hints_command(struct twolevel_hints_command *hints_cmd, enum NXByteOrder target_byte_sex);
void __cdecl swap_uuid_command(struct uuid_command *uuid_cmd, enum NXByteOrder target_byte_sex);
void __cdecl swap_x86_debug_state(x86_debug_state_t *debug, enum NXByteOrder target_byte_order);
void __cdecl swap_x86_debug_state32(x86_debug_state32_t *debug, enum NXByteOrder target_byte_order);
void __cdecl swap_x86_debug_state64(x86_debug_state64_t *debug, enum NXByteOrder target_byte_order);
void __cdecl swap_x86_exception_state(x86_exception_state_t *exc, enum NXByteOrder target_byte_order);
void __cdecl swap_x86_exception_state64(x86_exception_state64_t *exc, enum NXByteOrder target_byte_order);
void __cdecl swap_x86_float_state(x86_float_state_t *fpu, enum NXByteOrder target_byte_order);
void __cdecl swap_x86_float_state64(x86_float_state64_t *fpu, enum NXByteOrder target_byte_order);
void __cdecl swap_x86_state_hdr(x86_state_hdr_t *hdr, enum NXByteOrder target_byte_order);
void __cdecl swap_x86_thread_state(x86_thread_state_t *cpu, enum NXByteOrder target_byte_order);
void __cdecl swap_x86_thread_state64(x86_thread_state64_t *cpu, enum NXByteOrder target_byte_order);
int __cdecl swapcontext(ucontext_t *, const ucontext_t *);
int __cdecl swapon(const char *);
int swprintf(wchar_t *, size_t, const wchar_t *, ...);
int swprintf_l(wchar_t *, size_t n, locale_t, const wchar_t *, ...);
int swscanf(const wchar_t *, const wchar_t *, ...);
int swscanf_l(const wchar_t *, locale_t, const wchar_t *, ...);
boolean_t swtch(void);
boolean_t __cdecl swtch_pri(int pri);
int __cdecl symlink(const char *, const char *);
void sync(void);
int __cdecl syncok(WINDOW *, bool);
const char *const sys_errlist[];
const int sys_nerr;
const char *const sys_siglist[32];
const char *const sys_signame[32];
int syscall(int, ...);
__int64 __cdecl sysconf(int);
int __cdecl sysctl(int *, u_int, void *, size_t *, void *, size_t);
int __cdecl sysctlbyname(const char *, void *, size_t *, void *, size_t);
int __cdecl sysctlnametomib(const char *, int *, size_t *);
void syslog(int, const char *, ...);
int __cdecl system(const char *);
Netsnmp_Node_Handler table_helper_handler;
double __cdecl tan(double);
float __cdecl tanf(float);
double __cdecl tanh(double);
float __cdecl tanhf(float);
long double __cdecl tanhl(long double);
long double __cdecl tanl(long double);
kern_return_t __cdecl task_assign(task_t task, processor_set_t new_set, boolean_t assign_threads);
kern_return_t __cdecl task_assign_default(task_t task, boolean_t assign_threads);
kern_return_t __cdecl task_create(task_t target_task, ledger_array_t ledgers, mach_msg_type_number_t ledgersCnt, boolean_t inherit_memory, task_t *child_task);
kern_return_t __cdecl task_for_pid(mach_port_name_t target_tport, int pid, mach_port_name_t *t);
kern_return_t __cdecl task_get_assignment(task_t task, processor_set_name_t *assigned_set);
kern_return_t __cdecl task_get_emulation_vector(task_t task, int *vector_start, emulation_vector_t *emulation_vector, mach_msg_type_number_t *emulation_vectorCnt);
kern_return_t __cdecl task_get_exception_ports(task_t task, exception_mask_t exception_mask, exception_mask_array_t masks, mach_msg_type_number_t *masksCnt, exception_handler_array_t old_handlers, exception_behavior_array_t old_behaviors, exception_flavor_array_t old_flavors);
kern_return_t __cdecl task_get_special_port(task_t task, int which_port, mach_port_t *special_port);
kern_return_t __cdecl task_get_state(task_t task, thread_state_flavor_t flavor, thread_state_t old_state, mach_msg_type_number_t *old_stateCnt);
kern_return_t __cdecl task_info(task_name_t target_task, task_flavor_t flavor, task_info_t task_info_out, mach_msg_type_number_t *task_info_outCnt);
kern_return_t __cdecl task_name_for_pid(mach_port_name_t target_tport, int pid, mach_port_name_t *tn);
kern_return_t __cdecl task_policy(task_t task, policy_t policy, policy_base_t base, mach_msg_type_number_t baseCnt, boolean_t set_limit, boolean_t change);
kern_return_t __cdecl task_policy_get(task_t task, task_policy_flavor_t flavor, task_policy_t policy_info, mach_msg_type_number_t *policy_infoCnt, boolean_t *get_default);
kern_return_t __cdecl task_policy_set(task_t task, task_policy_flavor_t flavor, task_policy_t policy_info, mach_msg_type_number_t policy_infoCnt);
kern_return_t __cdecl task_resume(task_t target_task);
kern_return_t __cdecl task_sample(task_t task, mach_port_t reply);
mach_port_name_t task_self_trap(void);
kern_return_t __cdecl task_set_emulation(task_t target_port, vm_address_t routine_entry_pt, int routine_number);
kern_return_t __cdecl task_set_emulation_vector(task_t task, int vector_start, emulation_vector_t emulation_vector, mach_msg_type_number_t emulation_vectorCnt);
kern_return_t __cdecl task_set_exception_ports(task_t task, exception_mask_t exception_mask, mach_port_t new_port, exception_behavior_t behavior, thread_state_flavor_t new_flavor);
kern_return_t __cdecl task_set_info(task_t target_task, task_flavor_t flavor, task_info_t task_info_in, mach_msg_type_number_t task_info_inCnt);
kern_return_t __cdecl task_set_policy(task_t task, processor_set_t pset, policy_t policy, policy_base_t base, mach_msg_type_number_t baseCnt, policy_limit_t limit, mach_msg_type_number_t limitCnt, boolean_t change);
kern_return_t __cdecl task_set_port_space(ipc_space_t task, int table_entries);
kern_return_t __cdecl task_set_ras_pc(task_t target_task, vm_address_t basepc, vm_address_t boundspc);
kern_return_t __cdecl task_set_special_port(task_t task, int which_port, mach_port_t special_port);
kern_return_t __cdecl task_set_state(task_t task, thread_state_flavor_t flavor, thread_state_t new_state, mach_msg_type_number_t new_stateCnt);
kern_return_t __cdecl task_suspend(task_t target_task);
kern_return_t __cdecl task_swap_exception_ports(task_t task, exception_mask_t exception_mask, mach_port_t new_port, exception_behavior_t behavior, thread_state_flavor_t new_flavor, exception_mask_array_t masks, mach_msg_type_number_t *masksCnt, exception_handler_array_t old_handlerss, exception_behavior_array_t old_behaviors, exception_flavor_array_t old_flavors);
kern_return_t __cdecl task_terminate(task_t target_task);
kern_return_t __cdecl task_threads(task_t target_task, thread_act_array_t *act_list, mach_msg_type_number_t *act_listCnt);
kern_return_t __cdecl task_wire(vm_map_t target_task, boolean_t must_wire);
kern_return_t __cdecl task_zone_info(task_t target_task, mach_zone_name_array_t *names, mach_msg_type_number_t *namesCnt, task_zone_info_array_t *info, mach_msg_type_number_t *infoCnt);
int __cdecl tcdrain(int);
int __cdecl tcflow(int, int);
int __cdecl tcflush(int, int);
int __cdecl tcgetattr(int, struct termios *);
pid_t __cdecl tcgetpgrp(int);
pid_t __cdecl tcgetsid(int);
struct tcpd_context tcpd_context;
struct hostent *__cdecl tcpd_gethostbyname();
void tcpd_jump(char *, ...);
void tcpd_warn(char *, ...);
int __cdecl tcsendbreak(int, int);
int __cdecl tcsetattr(int, int, const struct termios *);
int __cdecl tcsetpgrp(int, pid_t);
void *__cdecl tdelete(const void *, void **, int (__cdecl *)(const void *, const void *));
char *telcmds[];
__int64 __cdecl telldir(DIR *);
char *__cdecl tempnam(const char *, const char *);
chtype termattrs(void);
char *termname(void);
void *__cdecl tfind(const void *, void *const *, int (__cdecl *)(const void *, const void *));
double __cdecl tgamma(double);
float __cdecl tgammaf(float);
long double __cdecl tgammal(long double);
int __cdecl tgetent(char *, const char *);
int __cdecl tgetflag(char *);
int __cdecl tgetnum(char *);
char *__cdecl tgetstr(char *, char **);
char *__cdecl tgoto(const char *, int, int);
kern_return_t __cdecl thread_abort(thread_act_t target_act);
kern_return_t __cdecl thread_abort_safely(thread_act_t target_act);
kern_return_t __cdecl thread_assign(thread_act_t thread, processor_set_t new_set);
kern_return_t __cdecl thread_assign_default(thread_act_t thread);
kern_return_t __cdecl thread_create(task_t parent_task, thread_act_t *child_act);
kern_return_t __cdecl thread_create_running(task_t parent_task, thread_state_flavor_t flavor, thread_state_t new_state, mach_msg_type_number_t new_stateCnt, thread_act_t *child_act);
kern_return_t __cdecl thread_depress_abort(thread_act_t thread);
kern_return_t __cdecl thread_get_assignment(thread_act_t thread, processor_set_name_t *assigned_set);
kern_return_t __cdecl thread_get_exception_ports(thread_act_t thread, exception_mask_t exception_mask, exception_mask_array_t masks, mach_msg_type_number_t *masksCnt, exception_handler_array_t old_handlers, exception_behavior_array_t old_behaviors, exception_flavor_array_t old_flavors);
kern_return_t __cdecl thread_get_special_port(thread_act_t thr_act, int which_port, mach_port_t *special_port);
kern_return_t __cdecl thread_get_state(thread_act_t target_act, thread_state_flavor_t flavor, thread_state_t old_state, mach_msg_type_number_t *old_stateCnt);
kern_return_t __cdecl thread_info(thread_act_t target_act, thread_flavor_t flavor, thread_info_t thread_info_out, mach_msg_type_number_t *thread_info_outCnt);
kern_return_t __cdecl thread_policy(thread_act_t thr_act, policy_t policy, policy_base_t base, mach_msg_type_number_t baseCnt, boolean_t set_limit);
kern_return_t __cdecl thread_policy_get(thread_act_t thread, thread_policy_flavor_t flavor, thread_policy_t policy_info, mach_msg_type_number_t *policy_infoCnt, boolean_t *get_default);
kern_return_t __cdecl thread_policy_set(thread_act_t thread, thread_policy_flavor_t flavor, thread_policy_t policy_info, mach_msg_type_number_t policy_infoCnt);
kern_return_t __cdecl thread_resume(thread_act_t target_act);
kern_return_t __cdecl thread_sample(thread_act_t thread, mach_port_t reply);
kern_return_t __cdecl thread_set_exception_ports(thread_act_t thread, exception_mask_t exception_mask, mach_port_t new_port, exception_behavior_t behavior, thread_state_flavor_t new_flavor);
kern_return_t __cdecl thread_set_policy(thread_act_t thr_act, processor_set_t pset, policy_t policy, policy_base_t base, mach_msg_type_number_t baseCnt, policy_limit_t limit, mach_msg_type_number_t limitCnt);
kern_return_t __cdecl thread_set_special_port(thread_act_t thr_act, int which_port, mach_port_t special_port);
kern_return_t __cdecl thread_set_state(thread_act_t target_act, thread_state_flavor_t flavor, thread_state_t new_state, mach_msg_type_number_t new_stateCnt);
kern_return_t __cdecl thread_suspend(thread_act_t target_act);
kern_return_t __cdecl thread_swap_exception_ports(thread_act_t thread, exception_mask_t exception_mask, mach_port_t new_port, exception_behavior_t behavior, thread_state_flavor_t new_flavor, exception_mask_array_t masks, mach_msg_type_number_t *masksCnt, exception_handler_array_t old_handlers, exception_behavior_array_t old_behaviors, exception_flavor_array_t old_flavors);
kern_return_t __cdecl thread_switch(mach_port_name_t thread_name, int option, mach_msg_timeout_t option_time);
kern_return_t __cdecl thread_terminate(thread_act_t target_act);
kern_return_t __cdecl thread_wire(host_priv_t host_priv, thread_act_t thread, boolean_t wired);
uint __cdecl tidyAccessWarningCount(TidyDoc tdoc);
TidyAttr __cdecl tidyAttrFirst(TidyNode tnod);
TidyAttr __cdecl tidyAttrGetABBR(TidyNode tnod);
TidyAttr __cdecl tidyAttrGetALINK(TidyNode tnod);
TidyAttr __cdecl tidyAttrGetALT(TidyNode tnod);
TidyAttr __cdecl tidyAttrGetBGCOLOR(TidyNode tnod);
TidyAttr __cdecl tidyAttrGetById(TidyNode tnod, TidyAttrId attId);
TidyAttr __cdecl tidyAttrGetCHECKED(TidyNode tnod);
TidyAttr __cdecl tidyAttrGetCOLSPAN(TidyNode tnod);
TidyAttr __cdecl tidyAttrGetCONTENT(TidyNode tnod);
TidyAttr __cdecl tidyAttrGetDATAFLD(TidyNode tnod);
TidyAttr __cdecl tidyAttrGetFOR(TidyNode tnod);
TidyAttr __cdecl tidyAttrGetHEIGHT(TidyNode tnod);
TidyAttr __cdecl tidyAttrGetHREF(TidyNode tnod);
TidyAttr __cdecl tidyAttrGetHTTP_EQUIV(TidyNode tnod);
TidyAttr __cdecl tidyAttrGetID(TidyNode tnod);
TidyAttr __cdecl tidyAttrGetISMAP(TidyNode tnod);
TidyAttrId __cdecl tidyAttrGetId(TidyAttr tattr);
TidyAttr __cdecl tidyAttrGetLANG(TidyNode tnod);
TidyAttr __cdecl tidyAttrGetLANGUAGE(TidyNode tnod);
TidyAttr __cdecl tidyAttrGetLINK(TidyNode tnod);
TidyAttr __cdecl tidyAttrGetLONGDESC(TidyNode tnod);
TidyAttr __cdecl tidyAttrGetNAME(TidyNode tnod);
TidyAttr __cdecl tidyAttrGetOnBLUR(TidyNode tnod);
TidyAttr __cdecl tidyAttrGetOnCLICK(TidyNode tnod);
TidyAttr __cdecl tidyAttrGetOnFOCUS(TidyNode tnod);
TidyAttr __cdecl tidyAttrGetOnKEYDOWN(TidyNode tnod);
TidyAttr __cdecl tidyAttrGetOnKEYPRESS(TidyNode tnod);
TidyAttr __cdecl tidyAttrGetOnKEYUP(TidyNode tnod);
TidyAttr __cdecl tidyAttrGetOnMOUSEDOWN(TidyNode tnod);
TidyAttr __cdecl tidyAttrGetOnMOUSEMOVE(TidyNode tnod);
TidyAttr __cdecl tidyAttrGetOnMOUSEOUT(TidyNode tnod);
TidyAttr __cdecl tidyAttrGetOnMOUSEOVER(TidyNode tnod);
TidyAttr __cdecl tidyAttrGetOnMOUSEUP(TidyNode tnod);
TidyAttr __cdecl tidyAttrGetREL(TidyNode tnod);
TidyAttr __cdecl tidyAttrGetROWSPAN(TidyNode tnod);
TidyAttr __cdecl tidyAttrGetSELECTED(TidyNode tnod);
TidyAttr __cdecl tidyAttrGetSRC(TidyNode tnod);
TidyAttr __cdecl tidyAttrGetSTYLE(TidyNode tnod);
TidyAttr __cdecl tidyAttrGetSUMMARY(TidyNode tnod);
TidyAttr __cdecl tidyAttrGetTARGET(TidyNode tnod);
TidyAttr __cdecl tidyAttrGetTEXT(TidyNode tnod);
TidyAttr __cdecl tidyAttrGetTITLE(TidyNode tnod);
TidyAttr __cdecl tidyAttrGetTYPE(TidyNode tnod);
TidyAttr __cdecl tidyAttrGetUSEMAP(TidyNode tnod);
TidyAttr __cdecl tidyAttrGetVALUE(TidyNode tnod);
TidyAttr __cdecl tidyAttrGetVLINK(TidyNode tnod);
TidyAttr __cdecl tidyAttrGetWIDTH(TidyNode tnod);
TidyAttr __cdecl tidyAttrGetXMLNS(TidyNode tnod);
Bool __cdecl tidyAttrIsABBR(TidyAttr tattr);
Bool __cdecl tidyAttrIsALINK(TidyAttr tattr);
Bool __cdecl tidyAttrIsALT(TidyAttr tattr);
Bool __cdecl tidyAttrIsBGCOLOR(TidyAttr tattr);
Bool __cdecl tidyAttrIsCHECKED(TidyAttr tattr);
Bool __cdecl tidyAttrIsCOLSPAN(TidyAttr tattr);
Bool __cdecl tidyAttrIsCONTENT(TidyAttr tattr);
Bool __cdecl tidyAttrIsDATAFLD(TidyAttr tattr);
Bool __cdecl tidyAttrIsEvent(TidyAttr tattr);
Bool __cdecl tidyAttrIsFOR(TidyAttr tattr);
Bool __cdecl tidyAttrIsHEIGHT(TidyAttr tattr);
Bool __cdecl tidyAttrIsHREF(TidyAttr tattr);
Bool __cdecl tidyAttrIsHTTP_EQUIV(TidyAttr tattr);
Bool __cdecl tidyAttrIsID(TidyAttr tattr);
Bool __cdecl tidyAttrIsISMAP(TidyAttr tattr);
Bool __cdecl tidyAttrIsLANG(TidyAttr tattr);
Bool __cdecl tidyAttrIsLANGUAGE(TidyAttr tattr);
Bool __cdecl tidyAttrIsLINK(TidyAttr tattr);
Bool __cdecl tidyAttrIsLONGDESC(TidyAttr tattr);
Bool __cdecl tidyAttrIsNAME(TidyAttr tattr);
Bool __cdecl tidyAttrIsOnBLUR(TidyAttr tattr);
Bool __cdecl tidyAttrIsOnCLICK(TidyAttr tattr);
Bool __cdecl tidyAttrIsOnFOCUS(TidyAttr tattr);
Bool __cdecl tidyAttrIsOnKEYDOWN(TidyAttr tattr);
Bool __cdecl tidyAttrIsOnKEYPRESS(TidyAttr tattr);
Bool __cdecl tidyAttrIsOnKEYUP(TidyAttr tattr);
Bool __cdecl tidyAttrIsOnMOUSEDOWN(TidyAttr tattr);
Bool __cdecl tidyAttrIsOnMOUSEMOVE(TidyAttr tattr);
Bool __cdecl tidyAttrIsOnMOUSEOUT(TidyAttr tattr);
Bool __cdecl tidyAttrIsOnMOUSEOVER(TidyAttr tattr);
Bool __cdecl tidyAttrIsOnMOUSEUP(TidyAttr tattr);
Bool __cdecl tidyAttrIsProp(TidyAttr tattr);
Bool __cdecl tidyAttrIsREL(TidyAttr tattr);
Bool __cdecl tidyAttrIsROWSPAN(TidyAttr tattr);
Bool __cdecl tidyAttrIsSELECTED(TidyAttr tattr);
Bool __cdecl tidyAttrIsSRC(TidyAttr tattr);
Bool __cdecl tidyAttrIsSTYLE(TidyAttr tattr);
Bool __cdecl tidyAttrIsSUMMARY(TidyAttr tattr);
Bool __cdecl tidyAttrIsTARGET(TidyAttr tattr);
Bool __cdecl tidyAttrIsTEXT(TidyAttr tattr);
Bool __cdecl tidyAttrIsTITLE(TidyAttr tattr);
Bool __cdecl tidyAttrIsTYPE(TidyAttr tattr);
Bool __cdecl tidyAttrIsUSEMAP(TidyAttr tattr);
Bool __cdecl tidyAttrIsVALUE(TidyAttr tattr);
Bool __cdecl tidyAttrIsVLINK(TidyAttr tattr);
Bool __cdecl tidyAttrIsWIDTH(TidyAttr tattr);
Bool __cdecl tidyAttrIsXMLNS(TidyAttr tattr);
ctmbstr __cdecl tidyAttrName(TidyAttr tattr);
TidyAttr __cdecl tidyAttrNext(TidyAttr tattr);
ctmbstr __cdecl tidyAttrValue(TidyAttr tattr);
void __cdecl tidyBufAlloc(TidyBuffer *buf, uint allocSize);
void __cdecl tidyBufAppend(TidyBuffer *buf, void *vp, uint size);
void __cdecl tidyBufAttach(TidyBuffer *buf, byte *bp, uint size);
void __cdecl tidyBufCheckAlloc(TidyBuffer *buf, uint allocSize, uint chunkSize);
void __cdecl tidyBufClear(TidyBuffer *buf);
void __cdecl tidyBufDetach(TidyBuffer *buf);
Bool __cdecl tidyBufEndOfInput(TidyBuffer *buf);
void __cdecl tidyBufFree(TidyBuffer *buf);
int __cdecl tidyBufGetByte(TidyBuffer *buf);
void __cdecl tidyBufInit(TidyBuffer *buf);
int __cdecl tidyBufPopByte(TidyBuffer *buf);
void __cdecl tidyBufPutByte(TidyBuffer *buf, byte bv);
void __cdecl tidyBufUngetByte(TidyBuffer *buf, byte bv);
int __cdecl tidyCleanAndRepair(TidyDoc tdoc);
uint __cdecl tidyConfigErrorCount(TidyDoc tdoc);
TidyDoc tidyCreate(void);
Bool __cdecl tidyDetectedGenericXml(TidyDoc tdoc);
int __cdecl tidyDetectedHtmlVersion(TidyDoc tdoc);
Bool __cdecl tidyDetectedXhtml(TidyDoc tdoc);
uint __cdecl tidyErrorCount(TidyDoc tdoc);
void __cdecl tidyErrorSummary(TidyDoc tdoc);
Bool __cdecl tidyFileExists(ctmbstr filename);
void __cdecl tidyGeneralInfo(TidyDoc tdoc);
void *__cdecl tidyGetAppData(TidyDoc tdoc);
TidyNode __cdecl tidyGetBody(TidyDoc tdoc);
uint __cdecl tidyGetByte(TidyInputSource *source);
TidyNode __cdecl tidyGetChild(TidyNode tnod);
TidyNode __cdecl tidyGetHead(TidyDoc tdoc);
TidyNode __cdecl tidyGetHtml(TidyDoc tdoc);
TidyNode __cdecl tidyGetNext(TidyNode tnod);
TidyOption __cdecl tidyGetNextOption(TidyDoc tdoc, TidyIterator *pos);
TidyOption __cdecl tidyGetOption(TidyDoc tdoc, TidyOptionId optId);
TidyOption __cdecl tidyGetOptionByName(TidyDoc tdoc, ctmbstr optnam);
TidyIterator __cdecl tidyGetOptionList(TidyDoc tdoc);
TidyNode __cdecl tidyGetParent(TidyNode tnod);
TidyNode __cdecl tidyGetPrev(TidyNode tnod);
TidyNode __cdecl tidyGetRoot(TidyDoc tdoc);
void __cdecl tidyInitInputBuffer(TidyInputSource *inp, TidyBuffer *buf);
void __cdecl tidyInitOutputBuffer(TidyOutputSink *outp, TidyBuffer *buf);
Bool __cdecl tidyInitSink(TidyOutputSink *sink, void *snkData, TidyPutByteFunc pbFunc);
Bool __cdecl tidyInitSource(TidyInputSource *source, void *srcData, TidyGetByteFunc gbFunc, TidyUngetByteFunc ugbFunc, TidyEOFFunc endFunc);
Bool __cdecl tidyIsEOF(TidyInputSource *source);
int __cdecl tidyLoadConfig(TidyDoc tdoc, ctmbstr configFile);
int __cdecl tidyLoadConfigEnc(TidyDoc tdoc, ctmbstr configFile, ctmbstr charenc);
uint __cdecl tidyNodeColumn(TidyNode tnod);
TidyTagId __cdecl tidyNodeGetId(TidyNode tnod);
ctmbstr __cdecl tidyNodeGetName(TidyNode tnod);
Bool __cdecl tidyNodeGetText(TidyDoc tdoc, TidyNode tnod, TidyBuffer *buf);
TidyNodeType __cdecl tidyNodeGetType(TidyNode tnod);
Bool __cdecl tidyNodeHasText(TidyDoc tdoc, TidyNode tnod);
Bool __cdecl tidyNodeIsA(TidyNode tnod);
Bool __cdecl tidyNodeIsADDRESS(TidyNode tnod);
Bool __cdecl tidyNodeIsAPPLET(TidyNode tnod);
Bool __cdecl tidyNodeIsAREA(TidyNode tnod);
Bool __cdecl tidyNodeIsB(TidyNode tnod);
Bool __cdecl tidyNodeIsBASE(TidyNode tnod);
Bool __cdecl tidyNodeIsBASEFONT(TidyNode tnod);
Bool __cdecl tidyNodeIsBIG(TidyNode tnod);
Bool __cdecl tidyNodeIsBLINK(TidyNode tnod);
Bool __cdecl tidyNodeIsBLOCKQUOTE(TidyNode tnod);
Bool __cdecl tidyNodeIsBODY(TidyNode tnod);
Bool __cdecl tidyNodeIsBR(TidyNode tnod);
Bool __cdecl tidyNodeIsCAPTION(TidyNode tnod);
Bool __cdecl tidyNodeIsCENTER(TidyNode tnod);
Bool __cdecl tidyNodeIsCOL(TidyNode tnod);
Bool __cdecl tidyNodeIsCOLGROUP(TidyNode tnod);
Bool __cdecl tidyNodeIsDD(TidyNode tnod);
Bool __cdecl tidyNodeIsDIR(TidyNode tnod);
Bool __cdecl tidyNodeIsDIV(TidyNode tnod);
Bool __cdecl tidyNodeIsDL(TidyNode tnod);
Bool __cdecl tidyNodeIsDT(TidyNode tnod);
Bool __cdecl tidyNodeIsEM(TidyNode tnod);
Bool __cdecl tidyNodeIsEMBED(TidyNode tnod);
Bool __cdecl tidyNodeIsFONT(TidyNode tnod);
Bool __cdecl tidyNodeIsFORM(TidyNode tnod);
Bool __cdecl tidyNodeIsFRAME(TidyNode tnod);
Bool __cdecl tidyNodeIsFRAMESET(TidyNode tnod);
Bool __cdecl tidyNodeIsH1(TidyNode tnod);
Bool __cdecl tidyNodeIsH2(TidyNode tnod);
Bool __cdecl tidyNodeIsH3(TidyNode tnod);
Bool __cdecl tidyNodeIsH4(TidyNode tnod);
Bool __cdecl tidyNodeIsH5(TidyNode tnod);
Bool __cdecl tidyNodeIsH6(TidyNode tnod);
Bool __cdecl tidyNodeIsHEAD(TidyNode tnod);
Bool __cdecl tidyNodeIsHR(TidyNode tnod);
Bool __cdecl tidyNodeIsHTML(TidyNode tnod);
Bool __cdecl tidyNodeIsHeader(TidyNode tnod);
Bool __cdecl tidyNodeIsI(TidyNode tnod);
Bool __cdecl tidyNodeIsIFRAME(TidyNode tnod);
Bool __cdecl tidyNodeIsIMG(TidyNode tnod);
Bool __cdecl tidyNodeIsINPUT(TidyNode tnod);
Bool __cdecl tidyNodeIsISINDEX(TidyNode tnod);
Bool __cdecl tidyNodeIsLABEL(TidyNode tnod);
Bool __cdecl tidyNodeIsLAYER(TidyNode tnod);
Bool __cdecl tidyNodeIsLI(TidyNode tnod);
Bool __cdecl tidyNodeIsLINK(TidyNode tnod);
Bool __cdecl tidyNodeIsLISTING(TidyNode tnod);
Bool __cdecl tidyNodeIsMAP(TidyNode tnod);
Bool __cdecl tidyNodeIsMARQUEE(TidyNode tnod);
Bool __cdecl tidyNodeIsMENU(TidyNode tnod);
Bool __cdecl tidyNodeIsMETA(TidyNode tnod);
Bool __cdecl tidyNodeIsNOBR(TidyNode tnod);
Bool __cdecl tidyNodeIsNOFRAMES(TidyNode tnod);
Bool __cdecl tidyNodeIsNOSCRIPT(TidyNode tnod);
Bool __cdecl tidyNodeIsOBJECT(TidyNode tnod);
Bool __cdecl tidyNodeIsOL(TidyNode tnod);
Bool __cdecl tidyNodeIsOPTGROUP(TidyNode tnod);
Bool __cdecl tidyNodeIsOPTION(TidyNode tnod);
Bool __cdecl tidyNodeIsP(TidyNode tnod);
Bool __cdecl tidyNodeIsPARAM(TidyNode tnod);
Bool __cdecl tidyNodeIsPRE(TidyNode tnod);
Bool __cdecl tidyNodeIsProp(TidyDoc tdoc, TidyNode tnod);
Bool __cdecl tidyNodeIsQ(TidyNode tnod);
Bool __cdecl tidyNodeIsS(TidyNode tnod);
Bool __cdecl tidyNodeIsSCRIPT(TidyNode tnod);
Bool __cdecl tidyNodeIsSELECT(TidyNode tnod);
Bool __cdecl tidyNodeIsSMALL(TidyNode tnod);
Bool __cdecl tidyNodeIsSPACER(TidyNode tnod);
Bool __cdecl tidyNodeIsSPAN(TidyNode tnod);
Bool __cdecl tidyNodeIsSTRIKE(TidyNode tnod);
Bool __cdecl tidyNodeIsSTRONG(TidyNode tnod);
Bool __cdecl tidyNodeIsSTYLE(TidyNode tnod);
Bool __cdecl tidyNodeIsTABLE(TidyNode tnod);
Bool __cdecl tidyNodeIsTD(TidyNode tnod);
Bool __cdecl tidyNodeIsTEXTAREA(TidyNode tnod);
Bool __cdecl tidyNodeIsTH(TidyNode tnod);
Bool __cdecl tidyNodeIsTITLE(TidyNode tnod);
Bool __cdecl tidyNodeIsTR(TidyNode tnod);
Bool __cdecl tidyNodeIsText(TidyNode tnod);
Bool __cdecl tidyNodeIsU(TidyNode tnod);
Bool __cdecl tidyNodeIsUL(TidyNode tnod);
Bool __cdecl tidyNodeIsWBR(TidyNode tnod);
Bool __cdecl tidyNodeIsXMP(TidyNode tnod);
uint __cdecl tidyNodeLine(TidyNode tnod);
Bool __cdecl tidyOptCopyConfig(TidyDoc tdocTo, TidyDoc tdocFrom);
Bool __cdecl tidyOptDiffThanDefault(TidyDoc tdoc);
Bool __cdecl tidyOptDiffThanSnapshot(TidyDoc tdoc);
Bool __cdecl tidyOptGetBool(TidyDoc tdoc, TidyOptionId optId);
TidyConfigCategory __cdecl tidyOptGetCategory(TidyOption opt);
ctmbstr __cdecl tidyOptGetCurrPick(TidyDoc tdoc, TidyOptionId optId);
TidyIterator __cdecl tidyOptGetDeclTagList(TidyDoc tdoc);
ctmbstr __cdecl tidyOptGetDefault(TidyOption opt);
Bool __cdecl tidyOptGetDefaultBool(TidyOption opt);
ulong __cdecl tidyOptGetDefaultInt(TidyOption opt);
ctmbstr __cdecl tidyOptGetDoc(TidyDoc tdoc, TidyOption opt);
TidyIterator __cdecl tidyOptGetDocLinksList(TidyDoc tdoc, TidyOption opt);
ctmbstr __cdecl tidyOptGetEncName(TidyDoc tdoc, TidyOptionId optId);
TidyOptionId __cdecl tidyOptGetId(TidyOption opt);
TidyOptionId __cdecl tidyOptGetIdForName(ctmbstr optnam);
ulong __cdecl tidyOptGetInt(TidyDoc tdoc, TidyOptionId optId);
ctmbstr __cdecl tidyOptGetName(TidyOption opt);
ctmbstr __cdecl tidyOptGetNextDeclTag(TidyDoc tdoc, TidyOptionId optId, TidyIterator *iter);
TidyOption __cdecl tidyOptGetNextDocLinks(TidyDoc tdoc, TidyIterator *pos);
ctmbstr __cdecl tidyOptGetNextPick(TidyOption opt, TidyIterator *pos);
TidyIterator __cdecl tidyOptGetPickList(TidyOption opt);
TidyOptionType __cdecl tidyOptGetType(TidyOption opt);
ctmbstr __cdecl tidyOptGetValue(TidyDoc tdoc, TidyOptionId optId);
Bool __cdecl tidyOptIsReadOnly(TidyOption opt);
Bool __cdecl tidyOptParseValue(TidyDoc tdoc, ctmbstr optnam, ctmbstr val);
Bool __cdecl tidyOptResetAllToDefault(TidyDoc tdoc);
Bool __cdecl tidyOptResetToDefault(TidyDoc tdoc, TidyOptionId opt);
Bool __cdecl tidyOptResetToSnapshot(TidyDoc tdoc);
int __cdecl tidyOptSaveFile(TidyDoc tdoc, ctmbstr cfgfil);
int __cdecl tidyOptSaveSink(TidyDoc tdoc, TidyOutputSink *sink);
Bool __cdecl tidyOptSetBool(TidyDoc tdoc, TidyOptionId optId, Bool val);
Bool __cdecl tidyOptSetInt(TidyDoc tdoc, TidyOptionId optId, ulong val);
Bool __cdecl tidyOptSetValue(TidyDoc tdoc, TidyOptionId optId, ctmbstr val);
Bool __cdecl tidyOptSnapshot(TidyDoc tdoc);
int __cdecl tidyParseBuffer(TidyDoc tdoc, TidyBuffer *buf);
int __cdecl tidyParseFile(TidyDoc tdoc, ctmbstr filename);
int __cdecl tidyParseSource(TidyDoc tdoc, TidyInputSource *source);
int __cdecl tidyParseStdin(TidyDoc tdoc);
int __cdecl tidyParseString(TidyDoc tdoc, ctmbstr content);
void __cdecl tidyPutByte(TidyOutputSink *sink, uint byteValue);
void __cdecl tidyRelease(TidyDoc tdoc);
ctmbstr tidyReleaseDate(void);
int __cdecl tidyRunDiagnostics(TidyDoc tdoc);
int __cdecl tidySaveBuffer(TidyDoc tdoc, TidyBuffer *buf);
int __cdecl tidySaveFile(TidyDoc tdoc, ctmbstr filename);
int __cdecl tidySaveSink(TidyDoc tdoc, TidyOutputSink *sink);
int __cdecl tidySaveStdout(TidyDoc tdoc);
int __cdecl tidySaveString(TidyDoc tdoc, tmbstr buffer, uint *buflen);
void __cdecl tidySetAppData(TidyDoc tdoc, void *appData);
int __cdecl tidySetCharEncoding(TidyDoc tdoc, ctmbstr encnam);
int __cdecl tidySetErrorBuffer(TidyDoc tdoc, TidyBuffer *errbuf);
FILE *__cdecl tidySetErrorFile(TidyDoc tdoc, ctmbstr errfilnam);
int __cdecl tidySetErrorSink(TidyDoc tdoc, TidyOutputSink *sink);
Bool __cdecl tidySetFreeCall(TidyFree ffree);
int __cdecl tidySetInCharEncoding(TidyDoc tdoc, ctmbstr encnam);
Bool __cdecl tidySetMallocCall(TidyMalloc fmalloc);
Bool __cdecl tidySetOptionCallback(TidyDoc tdoc, TidyOptCallback pOptCallback);
int __cdecl tidySetOutCharEncoding(TidyDoc tdoc, ctmbstr encnam);
Bool __cdecl tidySetPanicCall(TidyPanic fpanic);
Bool __cdecl tidySetReallocCall(TidyRealloc frealloc);
Bool __cdecl tidySetReportFilter(TidyDoc tdoc, TidyReportFilter filtCallback);
int __cdecl tidyStatus(TidyDoc tdoc);
void __cdecl tidyUngetByte(TidyInputSource *source, uint byteValue);
uint __cdecl tidyWarningCount(TidyDoc tdoc);
int __cdecl tigetflag(char *);
int __cdecl tigetnum(char *);
char *__cdecl tigetstr(char *);
char *__cdecl tilde_expand(char *);
time_t __cdecl time(time_t *);
time_t __cdecl time2posix(time_t);
time_t __cdecl timegm(struct tm *const);
time_t __cdecl timelocal(struct tm *const);
void __cdecl timeout(int);
clock_t __cdecl times(struct tms *);
int __cdecl timeval_tticks(const struct timeval *tv);
__int64 timezone;
FILE *tmpfile(void);
char *__cdecl tmpnam(char *);
static int __cdecl toascii(int c);
void __cdecl tok_end(Tokenizer *);
Tokenizer *__cdecl tok_init(const char *);
int __cdecl tok_line(Tokenizer *, const LineInfo *, int *, const char ***, int *, int *);
void __cdecl tok_reset(Tokenizer *);
int __cdecl tok_str(Tokenizer *, const char *, int *, const char ***);
void __cdecl tok_wend(TokenizerW *);
TokenizerW *__cdecl tok_winit(const wchar_t *);
int __cdecl tok_wline(TokenizerW *, const LineInfoW *, int *, const wchar_t ***, int *, int *);
void __cdecl tok_wreset(TokenizerW *);
int __cdecl tok_wstr(TokenizerW *, const wchar_t *, int *, const wchar_t ***);
static int __cdecl tolower(int c);
static int __cdecl tolower_l(int c, locale_t l);
int __cdecl top_panel(PANEL *);
int __cdecl top_row(const MENU *);
int __cdecl touchline(WINDOW *, int, int);
int __cdecl touchwin(WINDOW *);
static int __cdecl toupper(int c);
static int __cdecl toupper_l(int c, locale_t l);
wint_t __cdecl towctrans(wint_t, wctrans_t);
wint_t __cdecl towctrans_l(wint_t, wctrans_t, locale_t);
static wint_t __cdecl towlower(wint_t wc);
static wint_t __cdecl towlower_l(wint_t wc, locale_t l);
static wint_t __cdecl towupper(wint_t wc);
static wint_t __cdecl towupper_l(wint_t wc, locale_t l);
char *tparm(char *, ...);
void tprintf(tpr_t, const char *fmt, ...);
void __cdecl tprintf_close(tpr_t);
tpr_t __cdecl tprintf_open(struct proc *);
int __cdecl tputs(const char *, int, int (__cdecl *)(int));
void __cdecl trace(const unsigned int);
void __cdecl trace_backtrace(unsigned int debugid, unsigned int debugid2, unsigned __int64 size, unsigned __int64 data);
double __cdecl trunc(double);
int __cdecl truncate(const char *, off_t);
float __cdecl truncf(float);
long double __cdecl truncl(long double);
void *__cdecl tsearch(const void *, void **, int (__cdecl *)(const void *, const void *));
int __cdecl ttyaction(char *tty, char *act, char *user);
int __cdecl ttylock(const char *, int, pid_t *);
char *__cdecl ttymsg(struct iovec *, int, const char *, int);
char *__cdecl ttyname(int);
int __cdecl ttyname_r(int, char *, size_t);
int ttyslot(void);
char ttytype[];
int __cdecl ttyunlock(const char *);
void __cdecl twalk(const void *, void (__cdecl *)(const void *, VISIT, int));
int __cdecl typeahead(int);
char *tzname[];
void tzset(void);
void tzsetwall(void);
void __cdecl u64Copy(U64 *pu64one, const U64 *pu64two);
void __cdecl u64Incr(U64 *pu64out, const U64 *pu64one);
void __cdecl u64Subtract(const U64 *pu64one, const U64 *pu64two, U64 *pu64out);
void __cdecl u64UpdateCounter(U64 *pu64out, const U64 *pu64one, const U64 *pu64two);
useconds_t __cdecl ualarm(useconds_t, useconds_t);
u_long __cdecl uatime_diff(const_marker_t first, const_marker_t second);
u_long __cdecl uatime_hdiff(const_marker_t first, const_marker_t second);
int __cdecl uatime_ready(const_marker_t pm, unsigned int deltaT);
__int64 ulimit(int, ...);
mode_t __cdecl umask(mode_t);
int __cdecl umaskx_np(filesec_t);
int __cdecl uname(struct utsname *);
int __cdecl uncompress(Bytef *dest, uLongf *destLen, const Bytef *source, uLong sourceLen);
char *__cdecl unctrl(chtype);
int __cdecl undelete(const char *);
int __cdecl ungetc(int, FILE *);
int __cdecl ungetch(int);
int __cdecl ungetmouse(MEVENT *);
wint_t __cdecl ungetwc(wint_t, FILE *);
wint_t __cdecl ungetwc_l(wint_t, FILE *, locale_t);
char *__cdecl uni2asc(unsigned __int8 *uni, int unilen);
char unknown[];
int __cdecl unlink(const char *);
void unload_all_mibs(void);
int __cdecl unlockpt(int);
int __cdecl unmount(const char *, int);
void __cdecl unparsedEntityDecl(void *ctx, const xmlChar *name, const xmlChar *publicId, const xmlChar *systemId, const xmlChar *notationName);
int __cdecl unpost_form(FORM *);
int __cdecl unpost_menu(MENU *);
void unregister_all_config_handlers(void);
void __cdecl unregister_app_config_handler(const char *token);
void __cdecl unregister_config_handler(const char *filePrefix, const char *token);
int __cdecl unregister_exceptfd(int);
int __cdecl unregister_index(netsnmp_variable_list *, int, netsnmp_session *);
void __cdecl unregister_index_by_session(netsnmp_session *);
int __cdecl unregister_int_index(oid *, size_t, int);
int __cdecl unregister_mib(oid *, size_t);
int __cdecl unregister_mib_context(oid *, size_t, int, int, oid, const char *);
int __cdecl unregister_mib_priority(oid *, size_t, int);
int __cdecl unregister_mib_range(oid *, size_t, int, int, oid);
void __cdecl unregister_mibs_by_session(netsnmp_session *);
int __cdecl unregister_oid_index(oid *, size_t, oid *, size_t);
int __cdecl unregister_readfd(int);
int __cdecl unregister_sec_mod(int);
int __cdecl unregister_signal(int);
int __cdecl unregister_string_index(oid *, size_t, char *);
int __cdecl unregister_sysORTable(oid *, size_t);
void __cdecl unregister_sysORTable_by_session(netsnmp_session *);
int __cdecl unregister_sysORTable_sess(oid *, size_t, netsnmp_session *);
int __cdecl unregister_writefd(int);
int __cdecl unsetenv(const char *);
int unstifle_history(void);
int __cdecl untouchwin(WINDOW *);
int __cdecl unvis(char *, int, int *, int);
int __cdecl unw_get_fpreg(unw_cursor_t *, unw_regnum_t, unw_fpreg_t *);
int __cdecl unw_get_proc_info(unw_cursor_t *, unw_proc_info_t *);
int __cdecl unw_get_proc_name(unw_cursor_t *, char *, size_t, unw_word_t *);
int __cdecl unw_get_reg(unw_cursor_t *, unw_regnum_t, unw_word_t *);
int __cdecl unw_getcontext(unw_context_t *);
int __cdecl unw_init_local(unw_cursor_t *, unw_context_t *);
int __cdecl unw_is_fpreg(unw_cursor_t *, unw_regnum_t);
int __cdecl unw_is_signal_frame(unw_cursor_t *);
const char *__cdecl unw_regname(unw_cursor_t *, unw_regnum_t);
int __cdecl unw_resume(unw_cursor_t *);
int __cdecl unw_set_fpreg(unw_cursor_t *, unw_regnum_t, unw_fpreg_t);
int __cdecl unw_set_reg(unw_cursor_t *, unw_regnum_t, unw_word_t);
int __cdecl unw_step(unw_cursor_t *);
int __cdecl unwhiteout(const char *);
void update_config(void);
void update_panels(void);
char *__cdecl uptime_string(u_long, char *);
char *__cdecl uptime_string_n(u_long, char *, size_t);
int use_default_colors(void);
void __cdecl use_env(bool);
int __cdecl use_extended_names(bool);
int __cdecl use_legacy_coding(int);
int __cdecl use_screen(SCREEN *, NCURSES_SCREEN_CB, void *);
int __cdecl use_window(WINDOW *, NCURSES_WINDOW_CB, void *);
locale_t __cdecl uselocale(locale_t);
char *__cdecl username_completion_function(const char *, int);
void using_history(void);
int __cdecl usleep(useconds_t);
oid *usmAES128PrivProtocol;
oid usmAESPrivProtocol[10];
oid usmDESPrivProtocol[10];
oid usmHMACMD5AuthProtocol[10];
oid usmHMACSHA1AuthProtocol[10];
oid usmNoAuthProtocol[10];
oid usmNoPrivProtocol[10];
struct usmUser *__cdecl usm_add_user(struct usmUser *user);
struct usmUser *__cdecl usm_add_user_to_list(struct usmUser *user, struct usmUser *userList);
int __cdecl usm_check_and_update_timeliness(u_char *secEngineID, size_t secEngineIDLen, u_int boots_uint, u_int time_uint, int *error);
int __cdecl usm_check_secLevel(int level, struct usmUser *user);
struct usmUser *__cdecl usm_cloneFrom_user(struct usmUser *from, struct usmUser *to);
struct usmUser *__cdecl usm_create_initial_user(const char *name, const oid *authProtocol, size_t authProtocolLen, const oid *privProtocol, size_t privProtocolLen);
struct usmUser *usm_create_user(void);
struct usmUser *__cdecl usm_free_user(struct usmUser *user);
void __cdecl usm_free_usmStateReference(void *old);
int __cdecl usm_generate_out_msg(int, u_char *, size_t, int, int, u_char *, size_t, char *, size_t, int, u_char *, size_t, void *, u_char *, size_t *, u_char **, size_t *);
struct usmUser *__cdecl usm_get_user(u_char *engineID, size_t engineIDLen, char *name);
struct usmUser *usm_get_userList(void);
struct usmUser *__cdecl usm_get_user_from_list(u_char *engineID, size_t engineIDLen, char *name, struct usmUser *userList, int use_default);
struct usmStateReference *usm_malloc_usmStateReference(void);
SecmodSessionCallback usm_open_session;
void __cdecl usm_parse_config_usmUser(const char *token, char *line);
void __cdecl usm_parse_create_usmUser(const char *token, char *line);
int __cdecl usm_parse_security_parameters(u_char *secParams, size_t remaining, u_char *secEngineID, size_t *secEngineIDLen, u_int *boots_uint, u_int *time_uint, char *secName, size_t *secNameLen, u_char *signature, size_t *signature_length, u_char *salt, size_t *salt_length, u_char **data_ptr);
int __cdecl usm_process_in_msg(int, size_t, u_char *, int, int, u_char *, size_t, u_char *, size_t *, char *, size_t *, u_char **, size_t *, size_t *, void **, netsnmp_session *, u_char);
struct usmUser *__cdecl usm_read_user(const char *line);
struct usmUser *__cdecl usm_remove_user(struct usmUser *user);
struct usmUser *__cdecl usm_remove_user_from_list(struct usmUser *user, struct usmUser **userList);
int __cdecl usm_rgenerate_out_msg(int, u_char *, size_t, int, int, u_char *, size_t, char *, size_t, int, u_char *, size_t, void *, u_char **, size_t *, size_t *);
void __cdecl usm_save_user(struct usmUser *user, const char *token, const char *type);
void __cdecl usm_save_users(const char *token, const char *type);
void __cdecl usm_save_users_from_list(struct usmUser *user, const char *token, const char *type);
SecmodOutMsg usm_secmod_generate_out_msg;
SecmodInMsg usm_secmod_process_in_msg;
void __cdecl usm_set_password(const char *token, char *line);
int __cdecl usm_set_salt(u_char *iv, size_t *iv_length, u_char *priv_salt, size_t priv_salt_length, u_char *msgSalt);
void __cdecl usm_set_user_password(struct usmUser *user, const char *token, char *line);
int __cdecl usm_set_usmStateReference_auth_key(struct usmStateReference *ref, u_char *auth_key, size_t auth_key_len);
int __cdecl usm_set_usmStateReference_auth_protocol(struct usmStateReference *ref, oid *auth_protocol, size_t auth_protocol_len);
int __cdecl usm_set_usmStateReference_engine_id(struct usmStateReference *ref, u_char *engine_id, size_t engine_id_len);
int __cdecl usm_set_usmStateReference_name(struct usmStateReference *ref, char *name, size_t name_len);
int __cdecl usm_set_usmStateReference_priv_key(struct usmStateReference *ref, u_char *priv_key, size_t priv_key_len);
int __cdecl usm_set_usmStateReference_priv_protocol(struct usmStateReference *ref, oid *priv_protocol, size_t priv_protocol_len);
int __cdecl usm_set_usmStateReference_sec_level(struct usmStateReference *ref, int sec_level);
SNMPCallback usm_store_users;
int __cdecl utime(const char *, const struct utimbuf *);
int __cdecl utimes(const char *, const struct timeval *);
int __cdecl utmpxname(const char *);
void __cdecl uuid_clear(uuid_t uu);
int __cdecl uuid_compare(const uuid_t uu1, const uuid_t uu2);
void __cdecl uuid_copy(uuid_t dst, const uuid_t src);
void __cdecl uuid_generate(uuid_t out);
void __cdecl uuid_generate_random(uuid_t out);
void __cdecl uuid_generate_time(uuid_t out);
int __cdecl uuid_is_null(const uuid_t uu);
int __cdecl uuid_parse(const uuid_string_t in, uuid_t uu);
void __cdecl uuid_unparse(const uuid_t uu, uuid_string_t out);
void __cdecl uuid_unparse_lower(const uuid_t uu, uuid_string_t out);
void __cdecl uuid_unparse_upper(const uuid_t uu, uuid_string_t out);
ASN1_BIT_STRING *__cdecl v2i_ASN1_BIT_STRING(X509V3_EXT_METHOD *method, X509V3_CTX *ctx, STACK *nval);
GENERAL_NAME *__cdecl v2i_GENERAL_NAME(X509V3_EXT_METHOD *method, X509V3_CTX *ctx, CONF_VALUE *cnf);
GENERAL_NAMES *__cdecl v2i_GENERAL_NAMES(X509V3_EXT_METHOD *method, X509V3_CTX *ctx, STACK *nval);
GENERAL_NAME *__cdecl v2i_GENERAL_NAME_ex(GENERAL_NAME *out, X509V3_EXT_METHOD *method, X509V3_CTX *ctx, CONF_VALUE *cnf, int is_nc);
int __cdecl vacm_checkSubtree(const char *, oid *, size_t);
struct vacm_accessEntry *__cdecl vacm_createAccessEntry(const char *, const char *, int, int);
struct vacm_groupEntry *__cdecl vacm_createGroupEntry(int, const char *);
struct vacm_securityEntry *__cdecl vacm_createSecurityEntry(const char *);
struct vacm_viewEntry *__cdecl vacm_createViewEntry(const char *, oid *, size_t);
void __cdecl vacm_destroyAccessEntry(const char *, const char *, int, int);
void vacm_destroyAllAccessEntries(void);
void vacm_destroyAllGroupEntries(void);
void vacm_destroyAllViewEntries(void);
void __cdecl vacm_destroyGroupEntry(int, const char *);
void __cdecl vacm_destroySecurityEntry(const char *);
void __cdecl vacm_destroyViewEntry(const char *, oid *, size_t);
struct vacm_accessEntry *__cdecl vacm_getAccessEntry(const char *, const char *, int, int);
struct vacm_groupEntry *__cdecl vacm_getGroupEntry(int, const char *);
struct vacm_securityEntry *__cdecl vacm_getSecurityEntry(const char *);
struct vacm_viewEntry *__cdecl vacm_getViewEntry(const char *, oid *, size_t, int);
int vacm_is_configured(void);
void __cdecl vacm_parse_config_access(const char *token, const char *line);
void __cdecl vacm_parse_config_auth_access(const char *token, const char *line);
void __cdecl vacm_parse_config_group(const char *token, const char *line);
void __cdecl vacm_parse_config_view(const char *token, const char *line);
void __cdecl vacm_save(const char *token, const char *type);
void __cdecl vacm_save_access(struct vacm_accessEntry *access_entry, const char *token, const char *type);
void __cdecl vacm_save_auth_access(struct vacm_accessEntry *access_entry, const char *token, const char *type, int authtype);
void __cdecl vacm_save_group(struct vacm_groupEntry *group_entry, const char *token, const char *type);
void __cdecl vacm_save_view(struct vacm_viewEntry *view, const char *token, const char *type);
void vacm_scanAccessInit(void);
struct vacm_accessEntry *vacm_scanAccessNext(void);
void vacm_scanGroupInit(void);
struct vacm_groupEntry *vacm_scanGroupNext(void);
struct vacm_securityEntry *vacm_scanSecurityEntry(void);
void vacm_scanSecurityInit(void);
void vacm_scanViewInit(void);
struct vacm_viewEntry *vacm_scanViewNext(void);
void *__cdecl valloc(size_t);
xmlXPathObjectPtr __cdecl valuePop(xmlXPathParserContextPtr ctxt);
int __cdecl valuePush(xmlXPathParserContextPtr ctxt, xmlXPathObjectPtr value);
int __cdecl vasprintf(char **, const char *, va_list);
int __cdecl vasprintf_l(char **, locale_t, const char *, va_list);
int __cdecl vdprintf(int, const char *, va_list);
int __cdecl vdprintf_l(int, locale_t, const char *, va_list);
void __cdecl __noreturn verr(int, const char *, __darwin_va_list);
void __cdecl __noreturn verrc(int, int, const char *, __darwin_va_list);
void __cdecl __noreturn verrx(int, const char *, __darwin_va_list);
pid_t vfork(void);
int __cdecl vfprintf(FILE *, const char *, va_list);
int __cdecl vfprintf_l(FILE *, locale_t, const char *, va_list);
int __cdecl vfscanf(FILE *, const char *, va_list);
int __cdecl vfscanf_l(FILE *, locale_t, const char *, va_list);
int __cdecl vfwprintf(FILE *, const wchar_t *, __darwin_va_list);
int __cdecl vfwprintf_l(FILE *, locale_t, const wchar_t *, __darwin_va_list);
int __cdecl vfwscanf(FILE *, const wchar_t *, __darwin_va_list);
int __cdecl vfwscanf_l(FILE *, locale_t, const wchar_t *, __darwin_va_list);
int __cdecl vidattr(chtype);
int __cdecl vidputs(chtype, int (__cdecl *)(int));
char *__cdecl vis(char *, int, int, int);
int __cdecl vline(chtype, int);
kern_return_t __cdecl vm_allocate(vm_map_t target_task, vm_address_t *address, vm_size_t size, int flags);
kern_return_t __cdecl vm_allocate_cpm(host_priv_t host_priv, vm_map_t task, vm_address_t *address, vm_size_t size, int flags);
kern_return_t __cdecl vm_behavior_set(vm_map_t target_task, vm_address_t address, vm_size_t size, vm_behavior_t new_behavior);
kern_return_t __cdecl vm_copy(vm_map_t target_task, vm_address_t source_address, vm_size_t size, vm_address_t dest_address);
kern_return_t __cdecl vm_deallocate(vm_map_t target_task, vm_address_t address, vm_size_t size);
kern_return_t __cdecl vm_inherit(vm_map_t target_task, vm_address_t address, vm_size_t size, vm_inherit_t new_inheritance);
kern_return_t __cdecl vm_machine_attribute(vm_map_t target_task, vm_address_t address, vm_size_t size, vm_machine_attribute_t attribute, vm_machine_attribute_val_t *value);
kern_return_t __cdecl vm_map(vm_map_t target_task, vm_address_t *address, vm_size_t size, vm_address_t mask, int flags, mem_entry_name_port_t object, vm_offset_t offset, boolean_t copy, vm_prot_t cur_protection, vm_prot_t max_protection, vm_inherit_t inheritance);
kern_return_t __cdecl vm_map_64(vm_map_t target_task, vm_address_t *address, vm_size_t size, vm_address_t mask, int flags, mem_entry_name_port_t object, memory_object_offset_t offset, boolean_t copy, vm_prot_t cur_protection, vm_prot_t max_protection, vm_inherit_t inheritance);
kern_return_t __cdecl vm_map_page_query(vm_map_t target_map, vm_offset_t offset, integer_t *disposition, integer_t *ref_count);
kern_return_t __cdecl vm_mapped_pages_info(vm_map_t task, page_address_array_t *pages, mach_msg_type_number_t *pagesCnt);
kern_return_t __cdecl vm_msync(vm_map_t target_task, vm_address_t address, vm_size_t size, vm_sync_t sync_flags);
vm_size_t vm_page_mask;
int vm_page_shift;
vm_size_t vm_page_size;
kern_return_t __cdecl vm_protect(vm_map_t target_task, vm_address_t address, vm_size_t size, boolean_t set_maximum, vm_prot_t new_protection);
kern_return_t __cdecl vm_purgable_control(vm_map_t target_task, vm_address_t address, vm_purgable_t control, int *state);
kern_return_t __cdecl vm_read(vm_map_t target_task, vm_address_t address, vm_size_t size, vm_offset_t *data, mach_msg_type_number_t *dataCnt);
kern_return_t __cdecl vm_read_list(vm_map_t target_task, vm_read_entry_t data_list, natural_t count);
kern_return_t __cdecl vm_read_overwrite(vm_map_t target_task, vm_address_t address, vm_size_t size, vm_address_t data, vm_size_t *outsize);
kern_return_t __cdecl vm_region(vm_map_t target_task, vm_address_t *address, vm_size_t *size, vm_region_flavor_t flavor, vm_region_info_t info, mach_msg_type_number_t *infoCnt, mach_port_t *object_name);
kern_return_t __cdecl vm_region_64(vm_map_t target_task, vm_address_t *address, vm_size_t *size, vm_region_flavor_t flavor, vm_region_info_t info, mach_msg_type_number_t *infoCnt, mach_port_t *object_name);
kern_return_t __cdecl vm_region_recurse(vm_map_t target_task, vm_address_t *address, vm_size_t *size, natural_t *nesting_depth, vm_region_recurse_info_t info, mach_msg_type_number_t *infoCnt);
kern_return_t __cdecl vm_region_recurse_64(vm_map_t target_task, vm_address_t *address, vm_size_t *size, natural_t *nesting_depth, vm_region_recurse_info_t info, mach_msg_type_number_t *infoCnt);
kern_return_t __cdecl vm_remap(vm_map_t target_task, vm_address_t *target_address, vm_size_t size, vm_address_t mask, int flags, vm_map_t src_task, vm_address_t src_address, boolean_t copy, vm_prot_t *cur_protection, vm_prot_t *max_protection, vm_inherit_t inheritance);
kern_return_t __cdecl vm_wire(host_priv_t host_priv, vm_map_t task, vm_address_t address, vm_size_t size, vm_prot_t desired_access);
kern_return_t __cdecl vm_write(vm_map_t target_task, vm_address_t address, vm_offset_t data, mach_msg_type_number_t dataCnt);
int __cdecl vprintf(const char *, va_list);
int __cdecl vprintf_l(locale_t, const char *, va_list);
int (__cdecl *vprintf_stderr_func)(const char *format, va_list ap);
int __cdecl vscanf(const char *, va_list);
int __cdecl vscanf_l(locale_t, const char *, va_list);
int __cdecl vsnprintf(char *, size_t, const char *, va_list);
int __cdecl vsnprintf_l(char *, size_t, locale_t, const char *, va_list);
int __cdecl vsprintf(char *, const char *, va_list);
int __cdecl vsprintf_l(char *, locale_t, const char *, va_list);
int __cdecl vsscanf(const char *, const char *, va_list);
int __cdecl vsscanf_l(const char *, locale_t, const char *, va_list);
int __cdecl vswprintf(wchar_t *, size_t, const wchar_t *, __darwin_va_list);
int __cdecl vswprintf_l(wchar_t *, size_t n, locale_t, const wchar_t *, __darwin_va_list);
int __cdecl vswscanf(const wchar_t *, const wchar_t *, __darwin_va_list);
int __cdecl vswscanf_l(const wchar_t *, locale_t, const wchar_t *, __darwin_va_list);
void __cdecl vsyslog(int, const char *, __darwin_va_list);
int __cdecl vw_printw(WINDOW *, const char *, va_list);
int __cdecl vw_scanw(WINDOW *, char *, va_list);
void __cdecl vwarn(const char *, __darwin_va_list);
void __cdecl vwarnc(int, const char *, __darwin_va_list);
void __cdecl vwarnx(const char *, __darwin_va_list);
int __cdecl vwprintf(const wchar_t *, __darwin_va_list);
int __cdecl vwprintf_l(locale_t, const wchar_t *, __darwin_va_list);
int __cdecl vwprintw(WINDOW *, const char *, va_list);
int __cdecl vwscanf(const wchar_t *, __darwin_va_list);
int __cdecl vwscanf_l(locale_t, const wchar_t *, __darwin_va_list);
int __cdecl vwscanw(WINDOW *, char *, va_list);
int __cdecl waddch(WINDOW *, const chtype);
int __cdecl waddchnstr(WINDOW *, const chtype *, int);
int __cdecl waddchstr(WINDOW *, const chtype *);
int __cdecl waddnstr(WINDOW *, const char *, int);
int __cdecl waddstr(WINDOW *, const char *);
pid_t __cdecl wait(int *);
pid_t __cdecl wait3(int *, int, struct rusage *);
pid_t __cdecl wait4(pid_t, int *, int, struct rusage *);
int __cdecl waitevent(er_t, struct timeval *);
int __cdecl waitid(idtype_t, id_t, siginfo_t *, int);
pid_t __cdecl waitpid(pid_t, int *, int);
void *__cdecl wallproc_wall_1(char **, CLIENT *);
void *__cdecl wallproc_wall_1_svc(char **, struct svc_req *);
void warn(const char *, ...);
void warnc(int, const char *, ...);
void warnx(const char *, ...);
int __cdecl watchevent(er_t, int);
int __cdecl wattr_get(WINDOW *, attr_t *, __int16 *, void *);
int __cdecl wattr_off(WINDOW *, attr_t, void *);
int __cdecl wattr_on(WINDOW *, attr_t, void *);
int __cdecl wattr_set(WINDOW *, attr_t, __int16, void *);
int __cdecl wattroff(WINDOW *, int);
int __cdecl wattron(WINDOW *, int);
int __cdecl wattrset(WINDOW *, int);
int __cdecl wbkgd(WINDOW *, chtype);
void __cdecl wbkgdset(WINDOW *, chtype);
int __cdecl wborder(WINDOW *, chtype, chtype, chtype, chtype, chtype, chtype, chtype, chtype);
int __cdecl wchgat(WINDOW *, int, attr_t, __int16, const void *);
int __cdecl wclear(WINDOW *);
int __cdecl wclrtobot(WINDOW *);
int __cdecl wclrtoeol(WINDOW *);
int __cdecl wcolor_set(WINDOW *, __int16, void *);
wchar_t *__cdecl wcpcpy(wchar_t *, const wchar_t *);
wchar_t *__cdecl wcpncpy(wchar_t *, const wchar_t *, size_t);
size_t __cdecl wcrtomb(char *, wchar_t, mbstate_t *);
size_t __cdecl wcrtomb_l(char *, wchar_t, mbstate_t *, locale_t);
int __cdecl wcscasecmp(const wchar_t *, const wchar_t *);
int __cdecl wcscasecmp_l(const wchar_t *, const wchar_t *, locale_t);
wchar_t *__cdecl wcscat(wchar_t *, const wchar_t *);
wchar_t *__cdecl wcschr(const wchar_t *, wchar_t);
int __cdecl wcscmp(const wchar_t *, const wchar_t *);
int __cdecl wcscoll(const wchar_t *, const wchar_t *);
int __cdecl wcscoll_l(const wchar_t *, const wchar_t *, locale_t);
wchar_t *__cdecl wcscpy(wchar_t *, const wchar_t *);
size_t __cdecl wcscspn(const wchar_t *, const wchar_t *);
wchar_t *__cdecl wcsdup(const wchar_t *);
size_t __cdecl wcsftime(wchar_t *, size_t, const wchar_t *, const struct tm *);
size_t __cdecl wcsftime_l(wchar_t *, size_t, const wchar_t *, const struct tm *, locale_t);
size_t __cdecl wcslcat(wchar_t *, const wchar_t *, size_t);
size_t __cdecl wcslcpy(wchar_t *, const wchar_t *, size_t);
size_t __cdecl wcslen(const wchar_t *);
int __cdecl wcsncasecmp(const wchar_t *, const wchar_t *, size_t n);
int __cdecl wcsncasecmp_l(const wchar_t *, const wchar_t *, size_t n, locale_t);
wchar_t *__cdecl wcsncat(wchar_t *, const wchar_t *, size_t);
int __cdecl wcsncmp(const wchar_t *, const wchar_t *, size_t);
wchar_t *__cdecl wcsncpy(wchar_t *, const wchar_t *, size_t);
size_t __cdecl wcsnlen(const wchar_t *, size_t);
size_t __cdecl wcsnrtombs(char *, const wchar_t **, size_t, size_t, mbstate_t *);
size_t __cdecl wcsnrtombs_l(char *, const wchar_t **, size_t, size_t, mbstate_t *, locale_t);
wchar_t *__cdecl wcspbrk(const wchar_t *, const wchar_t *);
wchar_t *__cdecl wcsrchr(const wchar_t *, wchar_t);
size_t __cdecl wcsrtombs(char *, const wchar_t **, size_t, mbstate_t *);
size_t __cdecl wcsrtombs_l(char *, const wchar_t **, size_t, mbstate_t *, locale_t);
size_t __cdecl wcsspn(const wchar_t *, const wchar_t *);
wchar_t *__cdecl wcsstr(const wchar_t *, const wchar_t *);
double __cdecl wcstod(const wchar_t *, wchar_t **);
double __cdecl wcstod_l(const wchar_t *, wchar_t **, locale_t);
float __cdecl wcstof(const wchar_t *, wchar_t **);
float __cdecl wcstof_l(const wchar_t *, wchar_t **, locale_t);
intmax_t __cdecl wcstoimax(const wchar_t *nptr, wchar_t **endptr, int base);
intmax_t __cdecl wcstoimax_l(const wchar_t *nptr, wchar_t **endptr, int base, locale_t);
wchar_t *__cdecl wcstok(wchar_t *, const wchar_t *, wchar_t **);
__int64 __cdecl wcstol(const wchar_t *, wchar_t **, int);
__int64 __cdecl wcstol_l(const wchar_t *, wchar_t **, int, locale_t);
long double __cdecl wcstold(const wchar_t *, wchar_t **);
long double __cdecl wcstold_l(const wchar_t *, wchar_t **, locale_t);
__int64 __cdecl wcstoll(const wchar_t *, wchar_t **, int);
__int64 __cdecl wcstoll_l(const wchar_t *, wchar_t **, int, locale_t);
size_t __cdecl wcstombs(char *, const wchar_t *, size_t);
size_t __cdecl wcstombs_l(char *, const wchar_t *, size_t, locale_t);
unsigned __int64 __cdecl wcstoul(const wchar_t *, wchar_t **, int);
unsigned __int64 __cdecl wcstoul_l(const wchar_t *, wchar_t **, int, locale_t);
unsigned __int64 __cdecl wcstoull(const wchar_t *, wchar_t **, int);
unsigned __int64 __cdecl wcstoull_l(const wchar_t *, wchar_t **, int, locale_t);
uintmax_t __cdecl wcstoumax(const wchar_t *nptr, wchar_t **endptr, int base);
uintmax_t __cdecl wcstoumax_l(const wchar_t *nptr, wchar_t **endptr, int base, locale_t);
int __cdecl wcswidth(const wchar_t *, size_t);
int __cdecl wcswidth_l(const wchar_t *, size_t, locale_t);
size_t __cdecl wcsxfrm(wchar_t *, const wchar_t *, size_t);
size_t __cdecl wcsxfrm_l(wchar_t *, const wchar_t *, size_t, locale_t);
int __cdecl wctob(wint_t);
int __cdecl wctob_l(wint_t, locale_t);
int __cdecl wctomb(char *, wchar_t);
int __cdecl wctomb_l(char *, wchar_t, locale_t);
wctrans_t __cdecl wctrans(const char *);
wctrans_t __cdecl wctrans_l(const char *, locale_t);
wctype_t __cdecl wctype(const char *);
wctype_t __cdecl wctype_l(const char *, locale_t);
void __cdecl wcursyncup(WINDOW *);
int __cdecl wcwidth(wchar_t);
int __cdecl wcwidth_l(wchar_t, locale_t);
int __cdecl wdelch(WINDOW *);
int __cdecl wdeleteln(WINDOW *);
int __cdecl wechochar(WINDOW *, const chtype);
bool __cdecl wenclose(const WINDOW *, int, int);
int __cdecl werase(WINDOW *);
int __cdecl wgetch(WINDOW *);
int __cdecl wgetnstr(WINDOW *, char *, int);
WINDOW *__cdecl wgetparent(const WINDOW *);
int __cdecl wgetscrreg(const WINDOW *, int *, int *);
int __cdecl wgetstr(WINDOW *, char *);
int where_history(void);
int __cdecl which_module(const char *);
int __cdecl whline(WINDOW *, chtype, int);
chtype __cdecl winch(WINDOW *);
int __cdecl winchnstr(WINDOW *, chtype *, int);
int __cdecl winchstr(WINDOW *, chtype *);
int __cdecl winnstr(WINDOW *, char *, int);
int __cdecl winsch(WINDOW *, chtype);
int __cdecl winsdelln(WINDOW *, int);
int __cdecl winsertln(WINDOW *);
int __cdecl winsnstr(WINDOW *, const char *, int);
int __cdecl winsstr(WINDOW *, const char *);
int __cdecl winstr(WINDOW *, char *);
wchar_t *__cdecl wmemchr(const wchar_t *, wchar_t, size_t);
int __cdecl wmemcmp(const wchar_t *, const wchar_t *, size_t);
wchar_t *__cdecl wmemcpy(wchar_t *, const wchar_t *, size_t);
wchar_t *__cdecl wmemmove(wchar_t *, const wchar_t *, size_t);
wchar_t *__cdecl wmemset(wchar_t *, wchar_t, size_t);
bool __cdecl wmouse_trafo(const WINDOW *, int *, int *, bool);
int __cdecl wmove(WINDOW *, int, int);
int __cdecl wnoutrefresh(WINDOW *);
int __cdecl wordexp(const char *, wordexp_t *, int);
void __cdecl wordfree(wordexp_t *);
int wprintf(const wchar_t *, ...);
int wprintf_l(locale_t, const wchar_t *, ...);
int wprintw(WINDOW *, const char *, ...);
int __cdecl wredrawln(WINDOW *, int, int);
int __cdecl wrefresh(WINDOW *);
int __cdecl wresize(WINDOW *, int, int);
ssize_t __cdecl write(int, const void *, size_t);
int __cdecl write_history(const char *);
ssize_t __cdecl writev(int, const struct iovec *, int);
int wscanf(const wchar_t *, ...);
int wscanf_l(locale_t, const wchar_t *, ...);
int wscanw(WINDOW *, char *, ...);
int __cdecl wscrl(WINDOW *, int);
int __cdecl wsetscrreg(WINDOW *, int, int);
int __cdecl wstandend(WINDOW *);
int __cdecl wstandout(WINDOW *);
void __cdecl wsyncdown(WINDOW *);
void __cdecl wsyncup(WINDOW *);
void __cdecl wtimeout(WINDOW *, int);
int __cdecl wtmpxname(const char *);
int __cdecl wtouchln(WINDOW *, int, int, int);
int __cdecl wvline(WINDOW *, chtype, int);
int __cdecl xb_add_bytes(struct xdrbuf *, const char *, uint32_t, int);
int __cdecl xb_advance(struct xdrbuf *, uint32_t);
char *__cdecl xb_buffer_base(struct xdrbuf *);
void __cdecl xb_cleanup(struct xdrbuf *);
void __cdecl xb_free(void *);
int __cdecl xb_get_bytes(struct xdrbuf *, char *, uint32_t, int);
int __cdecl xb_grow(struct xdrbuf *);
void __cdecl xb_init(struct xdrbuf *, xdrbuf_type);
void __cdecl xb_init_buffer(struct xdrbuf *, char *, size_t);
void *__cdecl xb_malloc(size_t);
int __cdecl xb_offset(struct xdrbuf *);
int __cdecl xb_seek(struct xdrbuf *, uint32_t);
void __cdecl xb_set_cur_buf_len(struct xdrbuf *);
int __cdecl xdr_array(XDR *, char **, unsigned int *, unsigned int, unsigned int, xdrproc_t);
int __cdecl xdr_authunix_parms(XDR *, struct authunix_parms *);
int __cdecl xdr_bool(XDR *, int *);
int __cdecl xdr_bp_address(XDR *, bp_address *);
int __cdecl xdr_bp_fileid_t(XDR *, bp_fileid_t *);
int __cdecl xdr_bp_getfile_arg(XDR *, bp_getfile_arg *);
int __cdecl xdr_bp_getfile_res(XDR *, bp_getfile_res *);
int __cdecl xdr_bp_machine_name_t(XDR *, bp_machine_name_t *);
int __cdecl xdr_bp_path_t(XDR *, bp_path_t *);
int __cdecl xdr_bp_whoami_arg(XDR *, bp_whoami_arg *);
int __cdecl xdr_bp_whoami_res(XDR *, bp_whoami_res *);
int __cdecl xdr_bytes(XDR *, char **, unsigned int *, unsigned int);
int __cdecl xdr_callhdr(XDR *, struct rpc_msg *);
int __cdecl xdr_callmsg(XDR *, struct rpc_msg *);
int __cdecl xdr_char(XDR *, char *);
int __cdecl xdr_des_block(XDR *, des_block *);
int __cdecl xdr_dirpath(XDR *, dirpath *);
int __cdecl xdr_domainname(XDR *, domainname *);
int __cdecl xdr_double(XDR *, double *);
int __cdecl xdr_enum(XDR *, int *);
int __cdecl xdr_exportnode(XDR *, exportnode *);
int __cdecl xdr_exports(XDR *, exports *);
int __cdecl xdr_fhandle(XDR *, fhandle);
int __cdecl xdr_fhstatus(XDR *, fhstatus *);
int __cdecl xdr_float(XDR *, float *);
void __cdecl xdr_free(xdrproc_t, void *);
int __cdecl xdr_fsh_access(XDR *, fsh_access *);
int __cdecl xdr_fsh_mode(XDR *, fsh_mode *);
static int __cdecl xdr_getint32(XDR *xdrs, int32_t *ip);
int __cdecl xdr_getquota_args(XDR *, getquota_args *);
int __cdecl xdr_getquota_rslt(XDR *, getquota_rslt *);
int __cdecl xdr_gqr_status(XDR *, gqr_status *);
int __cdecl xdr_groupnode(XDR *, groupnode *);
int __cdecl xdr_groups(XDR *, groups *);
int __cdecl xdr_hyper(XDR *, quad_t *);
int __cdecl xdr_int(XDR *, int *);
int __cdecl xdr_int16_t(XDR *, int16_t *);
int __cdecl xdr_int32_t(XDR *, int32_t *);
int __cdecl xdr_int64_t(XDR *, int64_t *);
int __cdecl xdr_ip_addr_t(XDR *, ip_addr_t *);
int __cdecl xdr_keydat(XDR *, keydat *);
int __cdecl xdr_klm_holder(XDR *, klm_holder *);
int __cdecl xdr_klm_lock(XDR *, klm_lock *);
int __cdecl xdr_klm_lockargs(XDR *, klm_lockargs *);
int __cdecl xdr_klm_stat(XDR *, klm_stat *);
int __cdecl xdr_klm_stats(XDR *, klm_stats *);
int __cdecl xdr_klm_testargs(XDR *, klm_testargs *);
int __cdecl xdr_klm_testrply(XDR *, klm_testrply *);
int __cdecl xdr_klm_unlockargs(XDR *, klm_unlockargs *);
int __cdecl xdr_long(XDR *, int *);
int __cdecl xdr_longlong_t(XDR *, quad_t *);
int __cdecl xdr_mapname(XDR *, mapname *);
int __cdecl xdr_mon(XDR *, mon *);
int __cdecl xdr_mon_id(XDR *, mon_id *);
int __cdecl xdr_mountbody(XDR *, mountbody *);
int __cdecl xdr_mountlist(XDR *, mountlist *);
int __cdecl xdr_my_id(XDR *, my_id *);
int __cdecl xdr_name(XDR *, name *);
int __cdecl xdr_netobj(XDR *, struct netobj *);
int __cdecl xdr_nlm4_cancargs(XDR *, nlm4_cancargs *);
int __cdecl xdr_nlm4_holder(XDR *, nlm4_holder *);
int __cdecl xdr_nlm4_lock(XDR *, nlm4_lock *);
int __cdecl xdr_nlm4_lockargs(XDR *, nlm4_lockargs *);
int __cdecl xdr_nlm4_notify(XDR *, nlm4_notify *);
int __cdecl xdr_nlm4_res(XDR *, nlm4_res *);
int __cdecl xdr_nlm4_share(XDR *, nlm4_share *);
int __cdecl xdr_nlm4_shareargs(XDR *, nlm4_shareargs *);
int __cdecl xdr_nlm4_shareres(XDR *, nlm4_shareres *);
int __cdecl xdr_nlm4_stat(XDR *, nlm4_stat *);
int __cdecl xdr_nlm4_stats(XDR *, nlm4_stats *);
int __cdecl xdr_nlm4_testargs(XDR *, nlm4_testargs *);
int __cdecl xdr_nlm4_testres(XDR *, nlm4_testres *);
int __cdecl xdr_nlm4_testrply(XDR *, nlm4_testrply *);
int __cdecl xdr_nlm4_unlockargs(XDR *, nlm4_unlockargs *);
int __cdecl xdr_nlm_cancargs(XDR *, nlm_cancargs *);
int __cdecl xdr_nlm_holder(XDR *, nlm_holder *);
int __cdecl xdr_nlm_lock(XDR *, nlm_lock *);
int __cdecl xdr_nlm_lockargs(XDR *, nlm_lockargs *);
int __cdecl xdr_nlm_notify(XDR *, nlm_notify *);
int __cdecl xdr_nlm_res(XDR *, nlm_res *);
int __cdecl xdr_nlm_share(XDR *, nlm_share *);
int __cdecl xdr_nlm_shareargs(XDR *, nlm_shareargs *);
int __cdecl xdr_nlm_shareres(XDR *, nlm_shareres *);
int __cdecl xdr_nlm_sm_status(XDR *, nlm_sm_status *);
int __cdecl xdr_nlm_stat(XDR *, nlm_stat *);
int __cdecl xdr_nlm_stats(XDR *, nlm_stats *);
int __cdecl xdr_nlm_testargs(XDR *, nlm_testargs *);
int __cdecl xdr_nlm_testres(XDR *, nlm_testres *);
int __cdecl xdr_nlm_testrply(XDR *, nlm_testrply *);
int __cdecl xdr_nlm_unlockargs(XDR *, nlm_unlockargs *);
int __cdecl xdr_opaque(XDR *, char *, unsigned int);
int __cdecl xdr_peername(XDR *, peername *);
int __cdecl xdr_pmap(XDR *, struct pmap *);
int __cdecl xdr_pmaplist(XDR *, struct pmaplist **);
int __cdecl xdr_pointer(XDR *, char **, unsigned int, xdrproc_t);
static int __cdecl xdr_putint32(XDR *xdrs, int32_t *ip);
int __cdecl xdr_quadruple(XDR *, long double *);
int __cdecl xdr_reference(XDR *, char **, unsigned int, xdrproc_t);
int __cdecl xdr_replymsg(XDR *, struct rpc_msg *);
int __cdecl xdr_rmtcall_args(XDR *, struct rmtcallargs *);
int __cdecl xdr_rmtcallres(XDR *, struct rmtcallres *);
int __cdecl xdr_rquota(XDR *, rquota *);
int __cdecl xdr_rstat_timeval(XDR *, rstat_timeval *);
int __cdecl xdr_rusers_utmp(XDR *, rusers_utmp *);
int __cdecl xdr_short(XDR *, __int16 *);
int __cdecl xdr_sm_name(XDR *, sm_name *);
int __cdecl xdr_sm_res(XDR *, sm_res *);
int __cdecl xdr_sm_stat(XDR *, sm_stat *);
int __cdecl xdr_sm_stat_res(XDR *, sm_stat_res *);
int __cdecl xdr_sm_status(XDR *, sm_status *);
int __cdecl xdr_sprayarr(XDR *, sprayarr *);
int __cdecl xdr_spraycumul(XDR *, spraycumul *);
int __cdecl xdr_spraytimeval(XDR *, spraytimeval *);
int __cdecl xdr_stat_chge(XDR *, stat_chge *);
int __cdecl xdr_stats(XDR *, stats *);
int __cdecl xdr_statsswtch(XDR *, statsswtch *);
int __cdecl xdr_statstime(XDR *, statstime *);
int __cdecl xdr_string(XDR *, char **, unsigned int);
int __cdecl xdr_u_char(XDR *, unsigned __int8 *);
int __cdecl xdr_u_hyper(XDR *, u_quad_t *);
int __cdecl xdr_u_int(XDR *, unsigned int *);
int __cdecl xdr_u_int16_t(XDR *, u_int16_t *);
int __cdecl xdr_u_int32_t(XDR *, u_int32_t *);
int __cdecl xdr_u_int64_t(XDR *, u_int64_t *);
int __cdecl xdr_u_long(XDR *, unsigned int *);
int __cdecl xdr_u_longlong_t(XDR *, u_quad_t *);
int __cdecl xdr_u_short(XDR *, unsigned __int16 *);
int __cdecl xdr_union(XDR *, int *, char *, const struct xdr_discrim *, xdrproc_t);
int __cdecl xdr_utmp_array(XDR *, utmp_array *);
int __cdecl xdr_utmparr();
int __cdecl xdr_utmpidlearr();
int __cdecl xdr_valdat(XDR *, valdat *);
int __cdecl xdr_vector(XDR *, char *, unsigned int, unsigned int, xdrproc_t);
int xdr_void(void);
int __cdecl xdr_wrapstring(XDR *, char **);
int __cdecl xdr_x_passwd(XDR *, x_passwd *);
int __cdecl xdr_ypbind_binding(XDR *, ypbind_binding *);
int __cdecl xdr_ypbind_resp(XDR *, ypbind_resp *);
int __cdecl xdr_ypbind_resptype(XDR *, ypbind_resptype *);
int __cdecl xdr_ypbind_setdom(XDR *, ypbind_setdom *);
int __cdecl xdr_ypmap_parms(XDR *, ypmap_parms *);
int __cdecl xdr_ypmaplist(XDR *, ypmaplist *);
int __cdecl xdr_yppasswd(XDR *, yppasswd *);
int __cdecl xdr_yppush_status(XDR *, yppush_status *);
int __cdecl xdr_yppushresp_xfr(XDR *, yppushresp_xfr *);
int __cdecl xdr_ypreq_key(XDR *, ypreq_key *);
int __cdecl xdr_ypreq_nokey(XDR *, ypreq_nokey *);
int __cdecl xdr_ypreq_xfr(XDR *, ypreq_xfr *);
int __cdecl xdr_ypreqtype(XDR *, ypreqtype *);
int __cdecl xdr_yprequest(XDR *, yprequest *);
int __cdecl xdr_ypresp_all(XDR *, ypresp_all *);
int __cdecl xdr_ypresp_key_val(XDR *, ypresp_key_val *);
int __cdecl xdr_ypresp_maplist(XDR *, ypresp_maplist *);
int __cdecl xdr_ypresp_master(XDR *, ypresp_master *);
int __cdecl xdr_ypresp_order(XDR *, ypresp_order *);
int __cdecl xdr_ypresp_val(XDR *, ypresp_val *);
int __cdecl xdr_ypresp_xfr(XDR *, ypresp_xfr *);
int __cdecl xdr_ypresponse(XDR *, ypresponse *);
int __cdecl xdr_ypresptype(XDR *, ypresptype *);
int __cdecl xdr_ypstat(XDR *, ypstat *);
int __cdecl xdr_ypxfrstat(XDR *, ypxfrstat *);
void __cdecl xdrmem_create(XDR *, char *, unsigned int, enum xdr_op);
void __cdecl xdrrec_create(XDR *, unsigned int, unsigned int, void *, int (__cdecl *)(void *, void *, int), int (__cdecl *)(void *, void *, int));
int __cdecl xdrrec_endofrecord(XDR *, int);
int __cdecl xdrrec_eof(XDR *);
unsigned int __cdecl xdrrec_readbytes(XDR *, caddr_t, unsigned int);
int __cdecl xdrrec_skiprecord(XDR *);
void __cdecl xdrstdio_create(XDR *, FILE *, enum xdr_op);
void __cdecl xdump(const void *, size_t, const char *);
char *__cdecl xgets();
xlinkNodeDetectFunc xlinkGetDefaultDetect(void);
xlinkHandlerPtr xlinkGetDefaultHandler(void);
xlinkType __cdecl xlinkIsLink(xmlDocPtr doc, xmlNodePtr node);
void __cdecl xlinkSetDefaultDetect(xlinkNodeDetectFunc func);
void __cdecl xlinkSetDefaultHandler(xlinkHandlerPtr handler);
int __cdecl xmlACatalogAdd(xmlCatalogPtr catal, const xmlChar *type, const xmlChar *orig, const xmlChar *replace);
void __cdecl xmlACatalogDump(xmlCatalogPtr catal, FILE *out);
int __cdecl xmlACatalogRemove(xmlCatalogPtr catal, const xmlChar *value);
xmlChar *__cdecl xmlACatalogResolve(xmlCatalogPtr catal, const xmlChar *pubID, const xmlChar *sysID);
xmlChar *__cdecl xmlACatalogResolvePublic(xmlCatalogPtr catal, const xmlChar *pubID);
xmlChar *__cdecl xmlACatalogResolveSystem(xmlCatalogPtr catal, const xmlChar *sysID);
xmlChar *__cdecl xmlACatalogResolveURI(xmlCatalogPtr catal, const xmlChar *URI);
xmlAttributePtr __cdecl xmlAddAttributeDecl(xmlValidCtxtPtr ctxt, xmlDtdPtr dtd, const xmlChar *elem, const xmlChar *name, const xmlChar *ns, xmlAttributeType type, xmlAttributeDefault def, const xmlChar *defaultValue, xmlEnumerationPtr tree);
xmlNodePtr __cdecl xmlAddChild(xmlNodePtr parent, xmlNodePtr cur);
xmlNodePtr __cdecl xmlAddChildList(xmlNodePtr parent, xmlNodePtr cur);
xmlEntityPtr __cdecl xmlAddDocEntity(xmlDocPtr doc, const xmlChar *name, int type, const xmlChar *ExternalID, const xmlChar *SystemID, const xmlChar *content);
xmlEntityPtr __cdecl xmlAddDtdEntity(xmlDocPtr doc, const xmlChar *name, int type, const xmlChar *ExternalID, const xmlChar *SystemID, const xmlChar *content);
xmlElementPtr __cdecl xmlAddElementDecl(xmlValidCtxtPtr ctxt, xmlDtdPtr dtd, const xmlChar *name, xmlElementTypeVal type, xmlElementContentPtr content);
int __cdecl xmlAddEncodingAlias(const char *name, const char *alias);
xmlIDPtr __cdecl xmlAddID(xmlValidCtxtPtr ctxt, xmlDocPtr doc, const xmlChar *value, xmlAttrPtr attr);
xmlNodePtr __cdecl xmlAddNextSibling(xmlNodePtr cur, xmlNodePtr elem);
xmlNotationPtr __cdecl xmlAddNotationDecl(xmlValidCtxtPtr ctxt, xmlDtdPtr dtd, const xmlChar *name, const xmlChar *PublicID, const xmlChar *SystemID);
xmlNodePtr __cdecl xmlAddPrevSibling(xmlNodePtr cur, xmlNodePtr elem);
xmlRefPtr __cdecl xmlAddRef(xmlValidCtxtPtr ctxt, xmlDocPtr doc, const xmlChar *value, xmlAttrPtr attr);
xmlNodePtr __cdecl xmlAddSibling(xmlNodePtr cur, xmlNodePtr elem);
xmlOutputBufferPtr __cdecl xmlAllocOutputBuffer(xmlCharEncodingHandlerPtr encoder);
xmlParserInputBufferPtr __cdecl xmlAllocParserInputBuffer(xmlCharEncoding enc);
void __cdecl xmlAttrSerializeTxtContent(xmlBufferPtr buf, xmlDocPtr doc, xmlAttrPtr attr, const xmlChar *string);
xmlRegexpPtr __cdecl xmlAutomataCompile(xmlAutomataPtr am);
xmlAutomataStatePtr __cdecl xmlAutomataGetInitState(xmlAutomataPtr am);
int __cdecl xmlAutomataIsDeterminist(xmlAutomataPtr am);
xmlAutomataStatePtr __cdecl xmlAutomataNewAllTrans(xmlAutomataPtr am, xmlAutomataStatePtr from, xmlAutomataStatePtr to, int lax);
xmlAutomataStatePtr __cdecl xmlAutomataNewCountTrans(xmlAutomataPtr am, xmlAutomataStatePtr from, xmlAutomataStatePtr to, const xmlChar *token, int min, int max, void *data);
xmlAutomataStatePtr __cdecl xmlAutomataNewCountTrans2(xmlAutomataPtr am, xmlAutomataStatePtr from, xmlAutomataStatePtr to, const xmlChar *token, const xmlChar *token2, int min, int max, void *data);
xmlAutomataStatePtr __cdecl xmlAutomataNewCountedTrans(xmlAutomataPtr am, xmlAutomataStatePtr from, xmlAutomataStatePtr to, int counter);
int __cdecl xmlAutomataNewCounter(xmlAutomataPtr am, int min, int max);
xmlAutomataStatePtr __cdecl xmlAutomataNewCounterTrans(xmlAutomataPtr am, xmlAutomataStatePtr from, xmlAutomataStatePtr to, int counter);
xmlAutomataStatePtr __cdecl xmlAutomataNewEpsilon(xmlAutomataPtr am, xmlAutomataStatePtr from, xmlAutomataStatePtr to);
xmlAutomataStatePtr __cdecl xmlAutomataNewNegTrans(xmlAutomataPtr am, xmlAutomataStatePtr from, xmlAutomataStatePtr to, const xmlChar *token, const xmlChar *token2, void *data);
xmlAutomataStatePtr __cdecl xmlAutomataNewOnceTrans(xmlAutomataPtr am, xmlAutomataStatePtr from, xmlAutomataStatePtr to, const xmlChar *token, int min, int max, void *data);
xmlAutomataStatePtr __cdecl xmlAutomataNewOnceTrans2(xmlAutomataPtr am, xmlAutomataStatePtr from, xmlAutomataStatePtr to, const xmlChar *token, const xmlChar *token2, int min, int max, void *data);
xmlAutomataStatePtr __cdecl xmlAutomataNewState(xmlAutomataPtr am);
xmlAutomataStatePtr __cdecl xmlAutomataNewTransition(xmlAutomataPtr am, xmlAutomataStatePtr from, xmlAutomataStatePtr to, const xmlChar *token, void *data);
xmlAutomataStatePtr __cdecl xmlAutomataNewTransition2(xmlAutomataPtr am, xmlAutomataStatePtr from, xmlAutomataStatePtr to, const xmlChar *token, const xmlChar *token2, void *data);
int __cdecl xmlAutomataSetFinalState(xmlAutomataPtr am, xmlAutomataStatePtr state);
const char *__cdecl xmlBoolToText(int boolval);
int __cdecl xmlBufferAdd(xmlBufferPtr buf, const xmlChar *str, int len);
int __cdecl xmlBufferAddHead(xmlBufferPtr buf, const xmlChar *str, int len);
xmlBufferAllocationScheme xmlBufferAllocScheme;
int __cdecl xmlBufferCCat(xmlBufferPtr buf, const char *str);
int __cdecl xmlBufferCat(xmlBufferPtr buf, const xmlChar *str);
const xmlChar *__cdecl xmlBufferContent(const xmlBufferPtr buf);
xmlBufferPtr xmlBufferCreate(void);
xmlBufferPtr __cdecl xmlBufferCreateSize(size_t size);
xmlBufferPtr __cdecl xmlBufferCreateStatic(void *mem, size_t size);
int __cdecl xmlBufferDump(FILE *file, xmlBufferPtr buf);
void __cdecl xmlBufferEmpty(xmlBufferPtr buf);
void __cdecl xmlBufferFree(xmlBufferPtr buf);
int __cdecl xmlBufferGrow(xmlBufferPtr buf, unsigned int len);
int __cdecl xmlBufferLength(const xmlBufferPtr buf);
int __cdecl xmlBufferResize(xmlBufferPtr buf, unsigned int size);
void __cdecl xmlBufferSetAllocationScheme(xmlBufferPtr buf, xmlBufferAllocationScheme scheme);
int __cdecl xmlBufferShrink(xmlBufferPtr buf, unsigned int len);
void __cdecl xmlBufferWriteCHAR(xmlBufferPtr buf, const xmlChar *string);
void __cdecl xmlBufferWriteChar(xmlBufferPtr buf, const char *string);
void __cdecl xmlBufferWriteQuotedString(xmlBufferPtr buf, const xmlChar *string);
xmlChar *__cdecl xmlBuildQName(const xmlChar *ncname, const xmlChar *prefix, xmlChar *memory, int len);
xmlChar *__cdecl xmlBuildRelativeURI(const xmlChar *URI, const xmlChar *base);
xmlChar *__cdecl xmlBuildURI(const xmlChar *URI, const xmlChar *base);
__int64 __cdecl xmlByteConsumed(xmlParserCtxtPtr ctxt);
int __cdecl xmlC14NDocDumpMemory(xmlDocPtr doc, xmlNodeSetPtr nodes, int exclusive, xmlChar **inclusive_ns_prefixes, int with_comments, xmlChar **doc_txt_ptr);
int __cdecl xmlC14NDocSave(xmlDocPtr doc, xmlNodeSetPtr nodes, int exclusive, xmlChar **inclusive_ns_prefixes, int with_comments, const char *filename, int compression);
int __cdecl xmlC14NDocSaveTo(xmlDocPtr doc, xmlNodeSetPtr nodes, int exclusive, xmlChar **inclusive_ns_prefixes, int with_comments, xmlOutputBufferPtr buf);
int __cdecl xmlC14NExecute(xmlDocPtr doc, xmlC14NIsVisibleCallback is_visible_callback, void *user_data, int exclusive, xmlChar **inclusive_ns_prefixes, int with_comments, xmlOutputBufferPtr buf);
xmlChar *__cdecl xmlCanonicPath(const xmlChar *path);
int __cdecl xmlCatalogAdd(const xmlChar *type, const xmlChar *orig, const xmlChar *replace);
void *__cdecl xmlCatalogAddLocal(void *catalogs, const xmlChar *URL);
void xmlCatalogCleanup(void);
int xmlCatalogConvert(void);
void __cdecl xmlCatalogDump(FILE *out);
void __cdecl xmlCatalogFreeLocal(void *catalogs);
xmlCatalogAllow xmlCatalogGetDefaults(void);
const xmlChar *__cdecl xmlCatalogGetPublic(const xmlChar *pubID);
const xmlChar *__cdecl xmlCatalogGetSystem(const xmlChar *sysID);
int __cdecl xmlCatalogIsEmpty(xmlCatalogPtr catal);
xmlChar *__cdecl xmlCatalogLocalResolve(void *catalogs, const xmlChar *pubID, const xmlChar *sysID);
xmlChar *__cdecl xmlCatalogLocalResolveURI(void *catalogs, const xmlChar *URI);
int __cdecl xmlCatalogRemove(const xmlChar *value);
xmlChar *__cdecl xmlCatalogResolve(const xmlChar *pubID, const xmlChar *sysID);
xmlChar *__cdecl xmlCatalogResolvePublic(const xmlChar *pubID);
xmlChar *__cdecl xmlCatalogResolveSystem(const xmlChar *sysID);
xmlChar *__cdecl xmlCatalogResolveURI(const xmlChar *URI);
int __cdecl xmlCatalogSetDebug(int level);
xmlCatalogPrefer __cdecl xmlCatalogSetDefaultPrefer(xmlCatalogPrefer prefer);
void __cdecl xmlCatalogSetDefaults(xmlCatalogAllow allow);
int __cdecl xmlCharEncCloseFunc(xmlCharEncodingHandler *handler);
int __cdecl xmlCharEncFirstLine(xmlCharEncodingHandler *handler, xmlBufferPtr out, xmlBufferPtr in);
int __cdecl xmlCharEncInFunc(xmlCharEncodingHandler *handler, xmlBufferPtr out, xmlBufferPtr in);
int __cdecl xmlCharEncOutFunc(xmlCharEncodingHandler *handler, xmlBufferPtr out, xmlBufferPtr in);
int __cdecl xmlCharInRange(unsigned int val, const xmlChRangeGroup *group);
xmlChar *__cdecl xmlCharStrdup(const char *cur);
xmlChar *__cdecl xmlCharStrndup(const char *cur, int len);
int __cdecl xmlCheckFilename(const char *path);
xmlParserInputPtr __cdecl xmlCheckHTTPInput(xmlParserCtxtPtr ctxt, xmlParserInputPtr ret);
int __cdecl xmlCheckLanguageID(const xmlChar *lang);
int __cdecl xmlCheckUTF8(const unsigned __int8 *utf);
void __cdecl xmlCheckVersion(int version);
unsigned __int64 __cdecl xmlChildElementCount(xmlNodePtr parent);
void xmlCleanupCharEncodingHandlers(void);
void xmlCleanupEncodingAliases(void);
void xmlCleanupGlobals(void);
void xmlCleanupInputCallbacks(void);
void xmlCleanupMemory(void);
void xmlCleanupOutputCallbacks(void);
void xmlCleanupParser(void);
void xmlCleanupPredefinedEntities(void);
void xmlCleanupThreads(void);
void __cdecl xmlClearNodeInfoSeq(xmlParserNodeInfoSeqPtr seq);
void __cdecl xmlClearParserCtxt(xmlParserCtxtPtr ctxt);
int __cdecl xmlConvertSGMLCatalog(xmlCatalogPtr catal);
xmlAttributeTablePtr __cdecl xmlCopyAttributeTable(xmlAttributeTablePtr table);
int __cdecl xmlCopyChar(int len, xmlChar *out, int val);
int __cdecl xmlCopyCharMultiByte(xmlChar *out, int val);
xmlDocPtr __cdecl xmlCopyDoc(xmlDocPtr doc, int recursive);
xmlElementContentPtr __cdecl xmlCopyDocElementContent(xmlDocPtr doc, xmlElementContentPtr content);
xmlDtdPtr __cdecl xmlCopyDtd(xmlDtdPtr dtd);
xmlElementContentPtr __cdecl xmlCopyElementContent(xmlElementContentPtr content);
xmlElementTablePtr __cdecl xmlCopyElementTable(xmlElementTablePtr table);
xmlEntitiesTablePtr __cdecl xmlCopyEntitiesTable(xmlEntitiesTablePtr table);
xmlEnumerationPtr __cdecl xmlCopyEnumeration(xmlEnumerationPtr cur);
int __cdecl xmlCopyError(xmlErrorPtr from, xmlErrorPtr to);
xmlNsPtr __cdecl xmlCopyNamespace(xmlNsPtr cur);
xmlNsPtr __cdecl xmlCopyNamespaceList(xmlNsPtr cur);
xmlNodePtr __cdecl xmlCopyNode(const xmlNodePtr node, int recursive);
xmlNodePtr __cdecl xmlCopyNodeList(const xmlNodePtr node);
xmlNotationTablePtr __cdecl xmlCopyNotationTable(xmlNotationTablePtr table);
xmlAttrPtr __cdecl xmlCopyProp(xmlNodePtr target, xmlAttrPtr cur);
xmlAttrPtr __cdecl xmlCopyPropList(xmlNodePtr target, xmlAttrPtr cur);
xmlParserCtxtPtr __cdecl xmlCreateDocParserCtxt(const xmlChar *cur);
xmlEntitiesTablePtr xmlCreateEntitiesTable(void);
xmlParserCtxtPtr __cdecl xmlCreateEntityParserCtxt(const xmlChar *URL, const xmlChar *ID, const xmlChar *base);
xmlEnumerationPtr __cdecl xmlCreateEnumeration(const xmlChar *name);
xmlParserCtxtPtr __cdecl xmlCreateFileParserCtxt(const char *filename);
xmlParserCtxtPtr __cdecl xmlCreateIOParserCtxt(xmlSAXHandlerPtr sax, void *user_data, xmlInputReadCallback ioread, xmlInputCloseCallback ioclose, void *ioctx, xmlCharEncoding enc);
xmlDtdPtr __cdecl xmlCreateIntSubset(xmlDocPtr doc, const xmlChar *name, const xmlChar *ExternalID, const xmlChar *SystemID);
xmlParserCtxtPtr __cdecl xmlCreateMemoryParserCtxt(const char *buffer, int size);
xmlParserCtxtPtr __cdecl xmlCreatePushParserCtxt(xmlSAXHandlerPtr sax, void *user_data, const char *chunk, int size, const char *filename);
xmlURIPtr xmlCreateURI(void);
xmlParserCtxtPtr __cdecl xmlCreateURLParserCtxt(const char *filename, int options);
xmlErrorPtr __cdecl xmlCtxtGetLastError(void *ctx);
xmlDocPtr __cdecl xmlCtxtReadDoc(xmlParserCtxtPtr ctxt, const xmlChar *cur, const char *URL, const char *encoding, int options);
xmlDocPtr __cdecl xmlCtxtReadFd(xmlParserCtxtPtr ctxt, int fd, const char *URL, const char *encoding, int options);
xmlDocPtr __cdecl xmlCtxtReadFile(xmlParserCtxtPtr ctxt, const char *filename, const char *encoding, int options);
xmlDocPtr __cdecl xmlCtxtReadIO(xmlParserCtxtPtr ctxt, xmlInputReadCallback ioread, xmlInputCloseCallback ioclose, void *ioctx, const char *URL, const char *encoding, int options);
xmlDocPtr __cdecl xmlCtxtReadMemory(xmlParserCtxtPtr ctxt, const char *buffer, int size, const char *URL, const char *encoding, int options);
void __cdecl xmlCtxtReset(xmlParserCtxtPtr ctxt);
void __cdecl xmlCtxtResetLastError(void *ctx);
int __cdecl xmlCtxtResetPush(xmlParserCtxtPtr ctxt, const char *chunk, int size, const char *filename, const char *encoding);
int __cdecl xmlCtxtUseOptions(xmlParserCtxtPtr ctxt, int options);
int __cdecl xmlCurrentChar(xmlParserCtxtPtr ctxt, int *len);
int __cdecl xmlDOMWrapAdoptNode(xmlDOMWrapCtxtPtr ctxt, xmlDocPtr sourceDoc, xmlNodePtr node, xmlDocPtr destDoc, xmlNodePtr destParent, int options);
int __cdecl xmlDOMWrapCloneNode(xmlDOMWrapCtxtPtr ctxt, xmlDocPtr sourceDoc, xmlNodePtr node, xmlNodePtr *clonedNode, xmlDocPtr destDoc, xmlNodePtr destParent, int deep, int options);
void __cdecl xmlDOMWrapFreeCtxt(xmlDOMWrapCtxtPtr ctxt);
xmlDOMWrapCtxtPtr xmlDOMWrapNewCtxt(void);
int __cdecl xmlDOMWrapReconcileNamespaces(xmlDOMWrapCtxtPtr ctxt, xmlNodePtr elem, int options);
int __cdecl xmlDOMWrapRemoveNode(xmlDOMWrapCtxtPtr ctxt, xmlDocPtr doc, xmlNodePtr node, int options);
int __cdecl xmlDebugCheckDocument(FILE *output, xmlDocPtr doc);
void __cdecl xmlDebugDumpAttr(FILE *output, xmlAttrPtr attr, int depth);
void __cdecl xmlDebugDumpAttrList(FILE *output, xmlAttrPtr attr, int depth);
void __cdecl xmlDebugDumpDTD(FILE *output, xmlDtdPtr dtd);
void __cdecl xmlDebugDumpDocument(FILE *output, xmlDocPtr doc);
void __cdecl xmlDebugDumpDocumentHead(FILE *output, xmlDocPtr doc);
void __cdecl xmlDebugDumpEntities(FILE *output, xmlDocPtr doc);
void __cdecl xmlDebugDumpNode(FILE *output, xmlNodePtr node, int depth);
void __cdecl xmlDebugDumpNodeList(FILE *output, xmlNodePtr node, int depth);
void __cdecl xmlDebugDumpOneNode(FILE *output, xmlNodePtr node, int depth);
void __cdecl xmlDebugDumpString(FILE *output, const xmlChar *str);
xmlChar *__cdecl xmlDecodeEntities(xmlParserCtxtPtr ctxt, int len, int what, xmlChar end, xmlChar end2, xmlChar end3);
int xmlDefaultBufferSize;
xmlSAXHandlerV1 xmlDefaultSAXHandler;
void xmlDefaultSAXHandlerInit(void);
xmlSAXLocator xmlDefaultSAXLocator;
int __cdecl xmlDelEncodingAlias(const char *alias);
xmlDeregisterNodeFunc __cdecl xmlDeregisterNodeDefault(xmlDeregisterNodeFunc func);
xmlDeregisterNodeFunc xmlDeregisterNodeDefaultValue;
xmlCharEncoding __cdecl xmlDetectCharEncoding(const unsigned __int8 *in, int len);
void xmlDictCleanup(void);
xmlDictPtr xmlDictCreate(void);
xmlDictPtr __cdecl xmlDictCreateSub(xmlDictPtr sub);
const xmlChar *__cdecl xmlDictExists(xmlDictPtr dict, const xmlChar *name, int len);
void __cdecl xmlDictFree(xmlDictPtr dict);
const xmlChar *__cdecl xmlDictLookup(xmlDictPtr dict, const xmlChar *name, int len);
int __cdecl xmlDictOwns(xmlDictPtr dict, const xmlChar *str);
const xmlChar *__cdecl xmlDictQLookup(xmlDictPtr dict, const xmlChar *prefix, const xmlChar *name);
int __cdecl xmlDictReference(xmlDictPtr dict);
int __cdecl xmlDictSize(xmlDictPtr dict);
int xmlDoValidityCheckingDefaultValue;
xmlNodePtr __cdecl xmlDocCopyNode(const xmlNodePtr node, xmlDocPtr doc, int recursive);
xmlNodePtr __cdecl xmlDocCopyNodeList(xmlDocPtr doc, const xmlNodePtr node);
int __cdecl xmlDocDump(FILE *f, xmlDocPtr cur);
void __cdecl xmlDocDumpFormatMemory(xmlDocPtr cur, xmlChar **mem, int *size, int format);
void __cdecl xmlDocDumpFormatMemoryEnc(xmlDocPtr out_doc, xmlChar **doc_txt_ptr, int *doc_txt_len, const char *txt_encoding, int format);
void __cdecl xmlDocDumpMemory(xmlDocPtr cur, xmlChar **mem, int *size);
void __cdecl xmlDocDumpMemoryEnc(xmlDocPtr out_doc, xmlChar **doc_txt_ptr, int *doc_txt_len, const char *txt_encoding);
int __cdecl xmlDocFormatDump(FILE *f, xmlDocPtr cur, int format);
xmlNodePtr __cdecl xmlDocGetRootElement(xmlDocPtr doc);
xmlNodePtr __cdecl xmlDocSetRootElement(xmlDocPtr doc, xmlNodePtr root);
void __cdecl xmlDumpAttributeDecl(xmlBufferPtr buf, xmlAttributePtr attr);
void __cdecl xmlDumpAttributeTable(xmlBufferPtr buf, xmlAttributeTablePtr table);
void __cdecl xmlDumpElementDecl(xmlBufferPtr buf, xmlElementPtr elem);
void __cdecl xmlDumpElementTable(xmlBufferPtr buf, xmlElementTablePtr table);
void __cdecl xmlDumpEntitiesTable(xmlBufferPtr buf, xmlEntitiesTablePtr table);
void __cdecl xmlDumpEntityDecl(xmlBufferPtr buf, xmlEntityPtr ent);
void __cdecl xmlDumpNotationDecl(xmlBufferPtr buf, xmlNotationPtr nota);
void __cdecl xmlDumpNotationTable(xmlBufferPtr buf, xmlNotationTablePtr table);
void __cdecl xmlElemDump(FILE *f, xmlDocPtr doc, xmlNodePtr cur);
const xmlChar *__cdecl xmlEncodeEntities(xmlDocPtr doc, const xmlChar *input);
xmlChar *__cdecl xmlEncodeEntitiesReentrant(xmlDocPtr doc, const xmlChar *input);
xmlChar *__cdecl xmlEncodeSpecialChars(xmlDocPtr doc, const xmlChar *input);
int __cdecl xmlExpCtxtNbCons(xmlExpCtxtPtr ctxt);
int __cdecl xmlExpCtxtNbNodes(xmlExpCtxtPtr ctxt);
void __cdecl xmlExpDump(xmlBufferPtr buf, xmlExpNodePtr expr);
xmlExpNodePtr __cdecl xmlExpExpDerive(xmlExpCtxtPtr ctxt, xmlExpNodePtr expr, xmlExpNodePtr sub);
void __cdecl xmlExpFree(xmlExpCtxtPtr ctxt, xmlExpNodePtr expr);
void __cdecl xmlExpFreeCtxt(xmlExpCtxtPtr ctxt);
int __cdecl xmlExpGetLanguage(xmlExpCtxtPtr ctxt, xmlExpNodePtr expr, const xmlChar **langList, int len);
int __cdecl xmlExpGetStart(xmlExpCtxtPtr ctxt, xmlExpNodePtr expr, const xmlChar **tokList, int len);
int __cdecl xmlExpIsNillable(xmlExpNodePtr expr);
int __cdecl xmlExpMaxToken(xmlExpNodePtr expr);
xmlExpNodePtr __cdecl xmlExpNewAtom(xmlExpCtxtPtr ctxt, const xmlChar *name, int len);
xmlExpCtxtPtr __cdecl xmlExpNewCtxt(int maxNodes, xmlDictPtr dict);
xmlExpNodePtr __cdecl xmlExpNewOr(xmlExpCtxtPtr ctxt, xmlExpNodePtr left, xmlExpNodePtr right);
xmlExpNodePtr __cdecl xmlExpNewRange(xmlExpCtxtPtr ctxt, xmlExpNodePtr subset, int min, int max);
xmlExpNodePtr __cdecl xmlExpNewSeq(xmlExpCtxtPtr ctxt, xmlExpNodePtr left, xmlExpNodePtr right);
xmlExpNodePtr __cdecl xmlExpParse(xmlExpCtxtPtr ctxt, const char *expr);
void __cdecl xmlExpRef(xmlExpNodePtr expr);
xmlExpNodePtr __cdecl xmlExpStringDerive(xmlExpCtxtPtr ctxt, xmlExpNodePtr expr, const xmlChar *str, int len);
int __cdecl xmlExpSubsume(xmlExpCtxtPtr ctxt, xmlExpNodePtr expr, xmlExpNodePtr sub);
int __cdecl xmlFileClose(void *context);
int __cdecl xmlFileMatch(const char *filename);
void *__cdecl xmlFileOpen(const char *filename);
int __cdecl xmlFileRead(void *context, char *buffer, int len);
xmlCharEncodingHandlerPtr __cdecl xmlFindCharEncodingHandler(const char *name);
xmlNodePtr __cdecl xmlFirstElementChild(xmlNodePtr parent);
xmlFreeFunc xmlFree;
void __cdecl xmlFreeAttributeTable(xmlAttributeTablePtr table);
void __cdecl xmlFreeAutomata(xmlAutomataPtr am);
void __cdecl xmlFreeCatalog(xmlCatalogPtr catal);
void __cdecl xmlFreeDoc(xmlDocPtr cur);
void __cdecl xmlFreeDocElementContent(xmlDocPtr doc, xmlElementContentPtr cur);
void __cdecl xmlFreeDtd(xmlDtdPtr cur);
void __cdecl xmlFreeElementContent(xmlElementContentPtr cur);
void __cdecl xmlFreeElementTable(xmlElementTablePtr table);
void __cdecl xmlFreeEntitiesTable(xmlEntitiesTablePtr table);
void __cdecl xmlFreeEnumeration(xmlEnumerationPtr cur);
void __cdecl xmlFreeIDTable(xmlIDTablePtr table);
void __cdecl xmlFreeInputStream(xmlParserInputPtr input);
void __cdecl xmlFreeMutex(xmlMutexPtr tok);
void __cdecl xmlFreeNode(xmlNodePtr cur);
void __cdecl xmlFreeNodeList(xmlNodePtr cur);
void __cdecl xmlFreeNotationTable(xmlNotationTablePtr table);
void __cdecl xmlFreeNs(xmlNsPtr cur);
void __cdecl xmlFreeNsList(xmlNsPtr cur);
void __cdecl xmlFreeParserCtxt(xmlParserCtxtPtr ctxt);
void __cdecl xmlFreeParserInputBuffer(xmlParserInputBufferPtr in);
void __cdecl xmlFreePattern(xmlPatternPtr comp);
void __cdecl xmlFreePatternList(xmlPatternPtr comp);
void __cdecl xmlFreeProp(xmlAttrPtr cur);
void __cdecl xmlFreePropList(xmlAttrPtr cur);
void __cdecl xmlFreeRMutex(xmlRMutexPtr tok);
void __cdecl xmlFreeRefTable(xmlRefTablePtr table);
void __cdecl xmlFreeStreamCtxt(xmlStreamCtxtPtr stream);
void __cdecl xmlFreeTextReader(xmlTextReaderPtr reader);
void __cdecl xmlFreeTextWriter(xmlTextWriterPtr writer);
void __cdecl xmlFreeURI(xmlURIPtr uri);
void __cdecl xmlFreeValidCtxt(xmlValidCtxtPtr);
int __cdecl xmlGcMemGet(xmlFreeFunc *freeFunc, xmlMallocFunc *mallocFunc, xmlMallocFunc *mallocAtomicFunc, xmlReallocFunc *reallocFunc, xmlStrdupFunc *strdupFunc);
int __cdecl xmlGcMemSetup(xmlFreeFunc freeFunc, xmlMallocFunc mallocFunc, xmlMallocFunc mallocAtomicFunc, xmlReallocFunc reallocFunc, xmlStrdupFunc strdupFunc);
xmlGenericErrorFunc xmlGenericError;
void *xmlGenericErrorContext;
xmlBufferAllocationScheme xmlGetBufferAllocationScheme(void);
xmlCharEncodingHandlerPtr __cdecl xmlGetCharEncodingHandler(xmlCharEncoding enc);
const char *__cdecl xmlGetCharEncodingName(xmlCharEncoding enc);
int xmlGetCompressMode(void);
int __cdecl xmlGetDocCompressMode(xmlDocPtr doc);
xmlEntityPtr __cdecl xmlGetDocEntity(xmlDocPtr doc, const xmlChar *name);
xmlAttributePtr __cdecl xmlGetDtdAttrDesc(xmlDtdPtr dtd, const xmlChar *elem, const xmlChar *name);
xmlElementPtr __cdecl xmlGetDtdElementDesc(xmlDtdPtr dtd, const xmlChar *name);
xmlEntityPtr __cdecl xmlGetDtdEntity(xmlDocPtr doc, const xmlChar *name);
xmlNotationPtr __cdecl xmlGetDtdNotationDesc(xmlDtdPtr dtd, const xmlChar *name);
xmlAttributePtr __cdecl xmlGetDtdQAttrDesc(xmlDtdPtr dtd, const xmlChar *elem, const xmlChar *name, const xmlChar *prefix);
xmlElementPtr __cdecl xmlGetDtdQElementDesc(xmlDtdPtr dtd, const xmlChar *name, const xmlChar *prefix);
const char *__cdecl xmlGetEncodingAlias(const char *alias);
xmlExternalEntityLoader xmlGetExternalEntityLoader(void);
int __cdecl xmlGetFeature(xmlParserCtxtPtr ctxt, const char *name, void *result);
int __cdecl xmlGetFeaturesList(int *len, const char **result);
xmlGlobalStatePtr xmlGetGlobalState(void);
xmlAttrPtr __cdecl xmlGetID(xmlDocPtr doc, const xmlChar *ID);
xmlDtdPtr __cdecl xmlGetIntSubset(xmlDocPtr doc);
xmlNodePtr __cdecl xmlGetLastChild(xmlNodePtr parent);
xmlErrorPtr xmlGetLastError(void);
__int64 __cdecl xmlGetLineNo(xmlNodePtr node);
xmlChar *__cdecl xmlGetNoNsProp(xmlNodePtr node, const xmlChar *name);
xmlChar *__cdecl xmlGetNodePath(xmlNodePtr node);
xmlNsPtr *__cdecl xmlGetNsList(xmlDocPtr doc, xmlNodePtr node);
xmlChar *__cdecl xmlGetNsProp(xmlNodePtr node, const xmlChar *name, const xmlChar *nameSpace);
xmlEntityPtr __cdecl xmlGetParameterEntity(xmlDocPtr doc, const xmlChar *name);
xmlEntityPtr __cdecl xmlGetPredefinedEntity(const xmlChar *name);
xmlChar *__cdecl xmlGetProp(xmlNodePtr node, const xmlChar *name);
xmlListPtr __cdecl xmlGetRefs(xmlDocPtr doc, const xmlChar *ID);
int xmlGetThreadId(void);
int __cdecl xmlGetUTF8Char(const unsigned __int8 *utf, int *len);
int xmlGetWarningsDefaultValue;
void __cdecl xmlHandleEntity(xmlParserCtxtPtr ctxt, xmlEntityPtr entity);
int __cdecl xmlHasFeature(xmlFeature feature);
xmlAttrPtr __cdecl xmlHasNsProp(xmlNodePtr node, const xmlChar *name, const xmlChar *nameSpace);
xmlAttrPtr __cdecl xmlHasProp(xmlNodePtr node, const xmlChar *name);
int __cdecl xmlHashAddEntry(xmlHashTablePtr table, const xmlChar *name, void *userdata);
int __cdecl xmlHashAddEntry2(xmlHashTablePtr table, const xmlChar *name, const xmlChar *name2, void *userdata);
int __cdecl xmlHashAddEntry3(xmlHashTablePtr table, const xmlChar *name, const xmlChar *name2, const xmlChar *name3, void *userdata);
xmlHashTablePtr __cdecl xmlHashCopy(xmlHashTablePtr table, xmlHashCopier f);
xmlHashTablePtr __cdecl xmlHashCreate(int size);
xmlHashTablePtr __cdecl xmlHashCreateDict(int size, xmlDictPtr dict);
void __cdecl xmlHashFree(xmlHashTablePtr table, xmlHashDeallocator f);
void *__cdecl xmlHashLookup(xmlHashTablePtr table, const xmlChar *name);
void *__cdecl xmlHashLookup2(xmlHashTablePtr table, const xmlChar *name, const xmlChar *name2);
void *__cdecl xmlHashLookup3(xmlHashTablePtr table, const xmlChar *name, const xmlChar *name2, const xmlChar *name3);
void *__cdecl xmlHashQLookup(xmlHashTablePtr table, const xmlChar *name, const xmlChar *prefix);
void *__cdecl xmlHashQLookup2(xmlHashTablePtr table, const xmlChar *name, const xmlChar *prefix, const xmlChar *name2, const xmlChar *prefix2);
void *__cdecl xmlHashQLookup3(xmlHashTablePtr table, const xmlChar *name, const xmlChar *prefix, const xmlChar *name2, const xmlChar *prefix2, const xmlChar *name3, const xmlChar *prefix3);
int __cdecl xmlHashRemoveEntry(xmlHashTablePtr table, const xmlChar *name, xmlHashDeallocator f);
int __cdecl xmlHashRemoveEntry2(xmlHashTablePtr table, const xmlChar *name, const xmlChar *name2, xmlHashDeallocator f);
int __cdecl xmlHashRemoveEntry3(xmlHashTablePtr table, const xmlChar *name, const xmlChar *name2, const xmlChar *name3, xmlHashDeallocator f);
void __cdecl xmlHashScan(xmlHashTablePtr table, xmlHashScanner f, void *data);
void __cdecl xmlHashScan3(xmlHashTablePtr table, const xmlChar *name, const xmlChar *name2, const xmlChar *name3, xmlHashScanner f, void *data);
void __cdecl xmlHashScanFull(xmlHashTablePtr table, xmlHashScannerFull f, void *data);
void __cdecl xmlHashScanFull3(xmlHashTablePtr table, const xmlChar *name, const xmlChar *name2, const xmlChar *name3, xmlHashScannerFull f, void *data);
int __cdecl xmlHashSize(xmlHashTablePtr table);
int __cdecl xmlHashUpdateEntry(xmlHashTablePtr table, const xmlChar *name, void *userdata, xmlHashDeallocator f);
int __cdecl xmlHashUpdateEntry2(xmlHashTablePtr table, const xmlChar *name, const xmlChar *name2, void *userdata, xmlHashDeallocator f);
int __cdecl xmlHashUpdateEntry3(xmlHashTablePtr table, const xmlChar *name, const xmlChar *name2, const xmlChar *name3, void *userdata, xmlHashDeallocator f);
int __cdecl xmlIOFTPClose(void *context);
int __cdecl xmlIOFTPMatch(const char *filename);
void *__cdecl xmlIOFTPOpen(const char *filename);
int __cdecl xmlIOFTPRead(void *context, char *buffer, int len);
int __cdecl xmlIOHTTPClose(void *context);
int __cdecl xmlIOHTTPMatch(const char *filename);
void *__cdecl xmlIOHTTPOpen(const char *filename);
void *__cdecl xmlIOHTTPOpenW(const char *post_uri, int compression);
int __cdecl xmlIOHTTPRead(void *context, char *buffer, int len);
xmlDtdPtr __cdecl xmlIOParseDTD(xmlSAXHandlerPtr sax, xmlParserInputBufferPtr input, xmlCharEncoding enc);
int xmlIndentTreeOutput;
void xmlInitCharEncodingHandlers(void);
void xmlInitGlobals(void);
int xmlInitMemory(void);
void __cdecl xmlInitNodeInfoSeq(xmlParserNodeInfoSeqPtr seq);
void xmlInitParser(void);
int __cdecl xmlInitParserCtxt(xmlParserCtxtPtr ctxt);
void xmlInitThreads(void);
void xmlInitializeCatalog(void);
void __cdecl xmlInitializeGlobalState(xmlGlobalStatePtr gs);
void xmlInitializePredefinedEntities(void);
int __cdecl xmlIsBaseChar(unsigned int ch);
const xmlChRangeGroup xmlIsBaseCharGroup;
int __cdecl xmlIsBlank(unsigned int ch);
int __cdecl xmlIsBlankNode(xmlNodePtr node);
int __cdecl xmlIsChar(unsigned int ch);
const xmlChRangeGroup xmlIsCharGroup;
int __cdecl xmlIsCombining(unsigned int ch);
const xmlChRangeGroup xmlIsCombiningGroup;
int __cdecl xmlIsDigit(unsigned int ch);
const xmlChRangeGroup xmlIsDigitGroup;
int __cdecl xmlIsExtender(unsigned int ch);
const xmlChRangeGroup xmlIsExtenderGroup;
int __cdecl xmlIsID(xmlDocPtr doc, xmlNodePtr elem, xmlAttrPtr attr);
int __cdecl xmlIsIdeographic(unsigned int ch);
const xmlChRangeGroup xmlIsIdeographicGroup;
int __cdecl xmlIsLetter(int c);
int xmlIsMainThread(void);
int __cdecl xmlIsMixedElement(xmlDocPtr doc, const xmlChar *name);
int __cdecl xmlIsPubidChar(unsigned int ch);
const unsigned __int8 xmlIsPubidChar_tab[256];
int __cdecl xmlIsRef(xmlDocPtr doc, xmlNodePtr elem, xmlAttrPtr attr);
int __cdecl xmlIsXHTML(const xmlChar *systemID, const xmlChar *publicID);
int __cdecl xmlKeepBlanksDefault(int val);
int xmlKeepBlanksDefaultValue;
xmlNodePtr __cdecl xmlLastElementChild(xmlNodePtr parent);
xmlError xmlLastError;
int __cdecl xmlLineNumbersDefault(int val);
int xmlLineNumbersDefaultValue;
void *__cdecl xmlLinkGetData(xmlLinkPtr lk);
int __cdecl xmlListAppend(xmlListPtr l, void *data);
void __cdecl xmlListClear(xmlListPtr l);
int __cdecl xmlListCopy(xmlListPtr cur, const xmlListPtr old);
xmlListPtr __cdecl xmlListCreate(xmlListDeallocator deallocator, xmlListDataCompare compare);
void __cdecl xmlListDelete(xmlListPtr l);
xmlListPtr __cdecl xmlListDup(const xmlListPtr old);
int __cdecl xmlListEmpty(xmlListPtr l);
xmlLinkPtr __cdecl xmlListEnd(xmlListPtr l);
xmlLinkPtr __cdecl xmlListFront(xmlListPtr l);
int __cdecl xmlListInsert(xmlListPtr l, void *data);
void __cdecl xmlListMerge(xmlListPtr l1, xmlListPtr l2);
void __cdecl xmlListPopBack(xmlListPtr l);
void __cdecl xmlListPopFront(xmlListPtr l);
int __cdecl xmlListPushBack(xmlListPtr l, void *data);
int __cdecl xmlListPushFront(xmlListPtr l, void *data);
int __cdecl xmlListRemoveAll(xmlListPtr l, void *data);
int __cdecl xmlListRemoveFirst(xmlListPtr l, void *data);
int __cdecl xmlListRemoveLast(xmlListPtr l, void *data);
void __cdecl xmlListReverse(xmlListPtr l);
void *__cdecl xmlListReverseSearch(xmlListPtr l, void *data);
void __cdecl xmlListReverseWalk(xmlListPtr l, xmlListWalker walker, const void *user);
void *__cdecl xmlListSearch(xmlListPtr l, void *data);
int __cdecl xmlListSize(xmlListPtr l);
void __cdecl xmlListSort(xmlListPtr l);
void __cdecl xmlListWalk(xmlListPtr l, xmlListWalker walker, const void *user);
xmlCatalogPtr __cdecl xmlLoadACatalog(const char *filename);
int __cdecl xmlLoadCatalog(const char *filename);
void __cdecl xmlLoadCatalogs(const char *paths);
int xmlLoadExtDtdDefaultValue;
xmlParserInputPtr __cdecl xmlLoadExternalEntity(const char *URL, const char *ID, xmlParserCtxtPtr ctxt);
xmlCatalogPtr __cdecl xmlLoadSGMLSuperCatalog(const char *filename);
void xmlLockLibrary(void);
int __cdecl xmlLsCountNode(xmlNodePtr node);
void __cdecl xmlLsOneNode(FILE *output, xmlNodePtr node);
xmlMallocFunc xmlMalloc;
xmlMallocFunc xmlMallocAtomic;
void *__cdecl xmlMallocAtomicLoc(size_t size, const char *file, int line);
void *__cdecl xmlMallocLoc(size_t size, const char *file, int line);
int xmlMemBlocks(void);
void __cdecl xmlMemDisplay(FILE *fp);
void __cdecl xmlMemDisplayLast(FILE *fp, __int64 nbBytes);
void __cdecl xmlMemFree(void *ptr);
int __cdecl xmlMemGet(xmlFreeFunc *freeFunc, xmlMallocFunc *mallocFunc, xmlReallocFunc *reallocFunc, xmlStrdupFunc *strdupFunc);
void *__cdecl xmlMemMalloc(size_t size);
void *__cdecl xmlMemRealloc(void *ptr, size_t size);
int __cdecl xmlMemSetup(xmlFreeFunc freeFunc, xmlMallocFunc mallocFunc, xmlReallocFunc reallocFunc, xmlStrdupFunc strdupFunc);
void __cdecl xmlMemShow(FILE *fp, int nr);
xmlStrdupFunc xmlMemStrdup;
char *__cdecl xmlMemStrdupLoc(const char *str, const char *file, int line);
int xmlMemUsed(void);
void xmlMemoryDump(void);
char *__cdecl xmlMemoryStrdup(const char *str);
int __cdecl xmlModuleClose(xmlModulePtr module);
int __cdecl xmlModuleFree(xmlModulePtr module);
xmlModulePtr __cdecl xmlModuleOpen(const char *filename, int options);
int __cdecl xmlModuleSymbol(xmlModulePtr module, const char *name, void **result);
void __cdecl xmlMutexLock(xmlMutexPtr tok);
void __cdecl xmlMutexUnlock(xmlMutexPtr tok);
xmlChar *__cdecl xmlNamespaceParseNCName(xmlParserCtxtPtr ctxt);
xmlChar *__cdecl xmlNamespaceParseNSDef(xmlParserCtxtPtr ctxt);
xmlChar *__cdecl xmlNamespaceParseQName(xmlParserCtxtPtr ctxt, xmlChar **prefix);
int __cdecl xmlNanoFTPCheckResponse(void *ctx);
void xmlNanoFTPCleanup(void);
int __cdecl xmlNanoFTPClose(void *ctx);
int __cdecl xmlNanoFTPCloseConnection(void *ctx);
int __cdecl xmlNanoFTPConnect(void *ctx);
void *__cdecl xmlNanoFTPConnectTo(const char *server, int port);
int __cdecl xmlNanoFTPCwd(void *ctx, const char *directory);
int __cdecl xmlNanoFTPDele(void *ctx, const char *file);
void __cdecl xmlNanoFTPFreeCtxt(void *ctx);
int __cdecl xmlNanoFTPGet(void *ctx, ftpDataCallback callback, void *userData, const char *filename);
int __cdecl xmlNanoFTPGetConnection(void *ctx);
int __cdecl xmlNanoFTPGetResponse(void *ctx);
int __cdecl xmlNanoFTPGetSocket(void *ctx, const char *filename);
void xmlNanoFTPInit(void);
int __cdecl xmlNanoFTPList(void *ctx, ftpListCallback callback, void *userData, const char *filename);
void *__cdecl xmlNanoFTPNewCtxt(const char *URL);
void *__cdecl xmlNanoFTPOpen(const char *URL);
void __cdecl xmlNanoFTPProxy(const char *host, int port, const char *user, const char *passwd, int type);
int __cdecl xmlNanoFTPQuit(void *ctx);
int __cdecl xmlNanoFTPRead(void *ctx, void *dest, int len);
void __cdecl xmlNanoFTPScanProxy(const char *URL);
int __cdecl xmlNanoFTPUpdateURL(void *ctx, const char *URL);
const char *__cdecl xmlNanoHTTPAuthHeader(void *ctx);
void xmlNanoHTTPCleanup(void);
void __cdecl xmlNanoHTTPClose(void *ctx);
int __cdecl xmlNanoHTTPContentLength(void *ctx);
const char *__cdecl xmlNanoHTTPEncoding(void *ctx);
int __cdecl xmlNanoHTTPFetch(const char *URL, const char *filename, char **contentType);
void xmlNanoHTTPInit(void);
void *__cdecl xmlNanoHTTPMethod(const char *URL, const char *method, const char *input, char **contentType, const char *headers, int ilen);
void *__cdecl xmlNanoHTTPMethodRedir(const char *URL, const char *method, const char *input, char **contentType, char **redir, const char *headers, int ilen);
const char *__cdecl xmlNanoHTTPMimeType(void *ctx);
void *__cdecl xmlNanoHTTPOpen(const char *URL, char **contentType);
void *__cdecl xmlNanoHTTPOpenRedir(const char *URL, char **contentType, char **redir);
int __cdecl xmlNanoHTTPRead(void *ctx, void *dest, int len);
const char *__cdecl xmlNanoHTTPRedir(void *ctx);
int __cdecl xmlNanoHTTPReturnCode(void *ctx);
int __cdecl xmlNanoHTTPSave(void *ctxt, const char *filename);
void __cdecl xmlNanoHTTPScanProxy(const char *URL);
xmlAutomataPtr xmlNewAutomata(void);
xmlNodePtr __cdecl xmlNewCDataBlock(xmlDocPtr doc, const xmlChar *content, int len);
xmlCatalogPtr __cdecl xmlNewCatalog(int sgml);
xmlCharEncodingHandlerPtr __cdecl xmlNewCharEncodingHandler(const char *name, xmlCharEncodingInputFunc input, xmlCharEncodingOutputFunc output);
xmlNodePtr __cdecl xmlNewCharRef(xmlDocPtr doc, const xmlChar *name);
xmlNodePtr __cdecl xmlNewChild(xmlNodePtr parent, xmlNsPtr ns, const xmlChar *name, const xmlChar *content);
xmlNodePtr __cdecl xmlNewComment(const xmlChar *content);
xmlDocPtr __cdecl xmlNewDoc(const xmlChar *version);
xmlNodePtr __cdecl xmlNewDocComment(xmlDocPtr doc, const xmlChar *content);
xmlElementContentPtr __cdecl xmlNewDocElementContent(xmlDocPtr doc, const xmlChar *name, xmlElementContentType type);
xmlNodePtr __cdecl xmlNewDocFragment(xmlDocPtr doc);
xmlNodePtr __cdecl xmlNewDocNode(xmlDocPtr doc, xmlNsPtr ns, const xmlChar *name, const xmlChar *content);
xmlNodePtr __cdecl xmlNewDocNodeEatName(xmlDocPtr doc, xmlNsPtr ns, xmlChar *name, const xmlChar *content);
xmlNodePtr __cdecl xmlNewDocPI(xmlDocPtr doc, const xmlChar *name, const xmlChar *content);
xmlAttrPtr __cdecl xmlNewDocProp(xmlDocPtr doc, const xmlChar *name, const xmlChar *value);
xmlNodePtr __cdecl xmlNewDocRawNode(xmlDocPtr doc, xmlNsPtr ns, const xmlChar *name, const xmlChar *content);
xmlNodePtr __cdecl xmlNewDocText(xmlDocPtr doc, const xmlChar *content);
xmlNodePtr __cdecl xmlNewDocTextLen(xmlDocPtr doc, const xmlChar *content, int len);
xmlDtdPtr __cdecl xmlNewDtd(xmlDocPtr doc, const xmlChar *name, const xmlChar *ExternalID, const xmlChar *SystemID);
xmlElementContentPtr __cdecl xmlNewElementContent(const xmlChar *name, xmlElementContentType type);
xmlEntityPtr __cdecl xmlNewEntity(xmlDocPtr doc, const xmlChar *name, int type, const xmlChar *ExternalID, const xmlChar *SystemID, const xmlChar *content);
xmlParserInputPtr __cdecl xmlNewEntityInputStream(xmlParserCtxtPtr ctxt, xmlEntityPtr entity);
xmlNsPtr __cdecl xmlNewGlobalNs(xmlDocPtr doc, const xmlChar *href, const xmlChar *prefix);
xmlParserInputPtr __cdecl xmlNewIOInputStream(xmlParserCtxtPtr ctxt, xmlParserInputBufferPtr input, xmlCharEncoding enc);
xmlParserInputPtr __cdecl xmlNewInputFromFile(xmlParserCtxtPtr ctxt, const char *filename);
xmlParserInputPtr __cdecl xmlNewInputStream(xmlParserCtxtPtr ctxt);
xmlMutexPtr xmlNewMutex(void);
xmlNodePtr __cdecl xmlNewNode(xmlNsPtr ns, const xmlChar *name);
xmlNodePtr __cdecl xmlNewNodeEatName(xmlNsPtr ns, xmlChar *name);
xmlNsPtr __cdecl xmlNewNs(xmlNodePtr node, const xmlChar *href, const xmlChar *prefix);
xmlAttrPtr __cdecl xmlNewNsProp(xmlNodePtr node, xmlNsPtr ns, const xmlChar *name, const xmlChar *value);
xmlAttrPtr __cdecl xmlNewNsPropEatName(xmlNodePtr node, xmlNsPtr ns, xmlChar *name, const xmlChar *value);
xmlNodePtr __cdecl xmlNewPI(const xmlChar *name, const xmlChar *content);
xmlParserCtxtPtr xmlNewParserCtxt(void);
xmlAttrPtr __cdecl xmlNewProp(xmlNodePtr node, const xmlChar *name, const xmlChar *value);
xmlRMutexPtr xmlNewRMutex(void);
xmlNodePtr __cdecl xmlNewReference(xmlDocPtr doc, const xmlChar *name);
xmlParserInputPtr __cdecl xmlNewStringInputStream(xmlParserCtxtPtr ctxt, const xmlChar *buffer);
xmlNodePtr __cdecl xmlNewText(const xmlChar *content);
xmlNodePtr __cdecl xmlNewTextChild(xmlNodePtr parent, xmlNsPtr ns, const xmlChar *name, const xmlChar *content);
xmlNodePtr __cdecl xmlNewTextLen(const xmlChar *content, int len);
xmlTextReaderPtr __cdecl xmlNewTextReader(xmlParserInputBufferPtr input, const char *URI);
xmlTextReaderPtr __cdecl xmlNewTextReaderFilename(const char *URI);
xmlTextWriterPtr __cdecl xmlNewTextWriter(xmlOutputBufferPtr out);
xmlTextWriterPtr __cdecl xmlNewTextWriterDoc(xmlDocPtr *doc, int compression);
xmlTextWriterPtr __cdecl xmlNewTextWriterFilename(const char *uri, int compression);
xmlTextWriterPtr __cdecl xmlNewTextWriterMemory(xmlBufferPtr buf, int compression);
xmlTextWriterPtr __cdecl xmlNewTextWriterPushParser(xmlParserCtxtPtr ctxt, int compression);
xmlTextWriterPtr __cdecl xmlNewTextWriterTree(xmlDocPtr doc, xmlNodePtr node, int compression);
xmlValidCtxtPtr xmlNewValidCtxt(void);
void __cdecl xmlNextChar(xmlParserCtxtPtr ctxt);
xmlNodePtr __cdecl xmlNextElementSibling(xmlNodePtr node);
xmlParserInputPtr __cdecl xmlNoNetExternalEntityLoader(const char *URL, const char *ID, xmlParserCtxtPtr ctxt);
void __cdecl xmlNodeAddContent(xmlNodePtr cur, const xmlChar *content);
void __cdecl xmlNodeAddContentLen(xmlNodePtr cur, const xmlChar *content, int len);
int __cdecl xmlNodeBufGetContent(xmlBufferPtr buffer, xmlNodePtr cur);
int __cdecl xmlNodeDump(xmlBufferPtr buf, xmlDocPtr doc, xmlNodePtr cur, int level, int format);
void __cdecl xmlNodeDumpOutput(xmlOutputBufferPtr buf, xmlDocPtr doc, xmlNodePtr cur, int level, int format, const char *encoding);
xmlChar *__cdecl xmlNodeGetBase(xmlDocPtr doc, xmlNodePtr cur);
xmlChar *__cdecl xmlNodeGetContent(xmlNodePtr cur);
xmlChar *__cdecl xmlNodeGetLang(xmlNodePtr cur);
int __cdecl xmlNodeGetSpacePreserve(xmlNodePtr cur);
int __cdecl xmlNodeIsText(xmlNodePtr node);
xmlChar *__cdecl xmlNodeListGetRawString(xmlDocPtr doc, xmlNodePtr list, int inLine);
xmlChar *__cdecl xmlNodeListGetString(xmlDocPtr doc, xmlNodePtr list, int inLine);
void __cdecl xmlNodeSetBase(xmlNodePtr cur, const xmlChar *uri);
void __cdecl xmlNodeSetContent(xmlNodePtr cur, const xmlChar *content);
void __cdecl xmlNodeSetContentLen(xmlNodePtr cur, const xmlChar *content, int len);
void __cdecl xmlNodeSetLang(xmlNodePtr cur, const xmlChar *lang);
void __cdecl xmlNodeSetName(xmlNodePtr cur, const xmlChar *name);
void __cdecl xmlNodeSetSpacePreserve(xmlNodePtr cur, int val);
int __cdecl xmlNormalizeURIPath(char *path);
xmlChar *__cdecl xmlNormalizeWindowsPath(const xmlChar *path);
int __cdecl xmlOutputBufferClose(xmlOutputBufferPtr out);
xmlOutputBufferPtr __cdecl xmlOutputBufferCreateBuffer(xmlBufferPtr buffer, xmlCharEncodingHandlerPtr encoder);
xmlOutputBufferPtr __cdecl xmlOutputBufferCreateFd(int fd, xmlCharEncodingHandlerPtr encoder);
xmlOutputBufferPtr __cdecl xmlOutputBufferCreateFile(FILE *file, xmlCharEncodingHandlerPtr encoder);
xmlOutputBufferPtr __cdecl xmlOutputBufferCreateFilename(const char *URI, xmlCharEncodingHandlerPtr encoder, int compression);
xmlOutputBufferCreateFilenameFunc __cdecl xmlOutputBufferCreateFilenameDefault(xmlOutputBufferCreateFilenameFunc func);
xmlOutputBufferCreateFilenameFunc xmlOutputBufferCreateFilenameValue;
xmlOutputBufferPtr __cdecl xmlOutputBufferCreateIO(xmlOutputWriteCallback iowrite, xmlOutputCloseCallback ioclose, void *ioctx, xmlCharEncodingHandlerPtr encoder);
int __cdecl xmlOutputBufferFlush(xmlOutputBufferPtr out);
int __cdecl xmlOutputBufferWrite(xmlOutputBufferPtr out, int len, const char *buf);
int __cdecl xmlOutputBufferWriteEscape(xmlOutputBufferPtr out, const xmlChar *str, xmlCharEncodingOutputFunc escaping);
int __cdecl xmlOutputBufferWriteString(xmlOutputBufferPtr out, const char *str);
xmlChar *__cdecl xmlParseAttValue(xmlParserCtxtPtr ctxt);
const xmlChar *__cdecl xmlParseAttribute(xmlParserCtxtPtr ctxt, xmlChar **value);
void __cdecl xmlParseAttributeListDecl(xmlParserCtxtPtr ctxt);
int __cdecl xmlParseAttributeType(xmlParserCtxtPtr ctxt, xmlEnumerationPtr *tree);
int __cdecl xmlParseBalancedChunkMemory(xmlDocPtr doc, xmlSAXHandlerPtr sax, void *user_data, int depth, const xmlChar *string, xmlNodePtr *lst);
int __cdecl xmlParseBalancedChunkMemoryRecover(xmlDocPtr doc, xmlSAXHandlerPtr sax, void *user_data, int depth, const xmlChar *string, xmlNodePtr *lst, int recover);
void __cdecl xmlParseCDSect(xmlParserCtxtPtr ctxt);
xmlDocPtr __cdecl xmlParseCatalogFile(const char *filename);
void __cdecl xmlParseCharData(xmlParserCtxtPtr ctxt, int cdata);
xmlCharEncoding __cdecl xmlParseCharEncoding(const char *name);
int __cdecl xmlParseCharRef(xmlParserCtxtPtr ctxt);
int __cdecl xmlParseChunk(xmlParserCtxtPtr ctxt, const char *chunk, int size, int terminate);
void __cdecl xmlParseComment(xmlParserCtxtPtr ctxt);
void __cdecl xmlParseContent(xmlParserCtxtPtr ctxt);
int __cdecl xmlParseCtxtExternalEntity(xmlParserCtxtPtr ctx, const xmlChar *URL, const xmlChar *ID, xmlNodePtr *lst);
xmlDtdPtr __cdecl xmlParseDTD(const xmlChar *ExternalID, const xmlChar *SystemID);
int __cdecl xmlParseDefaultDecl(xmlParserCtxtPtr ctxt, xmlChar **value);
xmlDocPtr __cdecl xmlParseDoc(const xmlChar *cur);
void __cdecl xmlParseDocTypeDecl(xmlParserCtxtPtr ctxt);
int __cdecl xmlParseDocument(xmlParserCtxtPtr ctxt);
void __cdecl xmlParseElement(xmlParserCtxtPtr ctxt);
xmlElementContentPtr __cdecl xmlParseElementChildrenContentDecl(xmlParserCtxtPtr ctxt, int inputchk);
int __cdecl xmlParseElementContentDecl(xmlParserCtxtPtr ctxt, const xmlChar *name, xmlElementContentPtr *result);
int __cdecl xmlParseElementDecl(xmlParserCtxtPtr ctxt);
xmlElementContentPtr __cdecl xmlParseElementMixedContentDecl(xmlParserCtxtPtr ctxt, int inputchk);
xmlChar *__cdecl xmlParseEncName(xmlParserCtxtPtr ctxt);
const xmlChar *__cdecl xmlParseEncodingDecl(xmlParserCtxtPtr ctxt);
void __cdecl xmlParseEndTag(xmlParserCtxtPtr ctxt);
xmlDocPtr __cdecl xmlParseEntity(const char *filename);
void __cdecl xmlParseEntityDecl(xmlParserCtxtPtr ctxt);
xmlEntityPtr __cdecl xmlParseEntityRef(xmlParserCtxtPtr ctxt);
xmlChar *__cdecl xmlParseEntityValue(xmlParserCtxtPtr ctxt, xmlChar **orig);
int __cdecl xmlParseEnumeratedType(xmlParserCtxtPtr ctxt, xmlEnumerationPtr *tree);
xmlEnumerationPtr __cdecl xmlParseEnumerationType(xmlParserCtxtPtr ctxt);
int __cdecl xmlParseExtParsedEnt(xmlParserCtxtPtr ctxt);
int __cdecl xmlParseExternalEntity(xmlDocPtr doc, xmlSAXHandlerPtr sax, void *user_data, int depth, const xmlChar *URL, const xmlChar *ID, xmlNodePtr *lst);
xmlChar *__cdecl xmlParseExternalID(xmlParserCtxtPtr ctxt, xmlChar **publicID, int strict);
void __cdecl xmlParseExternalSubset(xmlParserCtxtPtr ctxt, const xmlChar *ExternalID, const xmlChar *SystemID);
xmlDocPtr __cdecl xmlParseFile(const char *filename);
xmlParserErrors __cdecl xmlParseInNodeContext(xmlNodePtr node, const char *data, int datalen, int options, xmlNodePtr *lst);
void __cdecl xmlParseMarkupDecl(xmlParserCtxtPtr ctxt);
xmlDocPtr __cdecl xmlParseMemory(const char *buffer, int size);
void __cdecl xmlParseMisc(xmlParserCtxtPtr ctxt);
const xmlChar *__cdecl xmlParseName(xmlParserCtxtPtr ctxt);
void __cdecl xmlParseNamespace(xmlParserCtxtPtr ctxt);
xmlChar *__cdecl xmlParseNmtoken(xmlParserCtxtPtr ctxt);
void __cdecl xmlParseNotationDecl(xmlParserCtxtPtr ctxt);
xmlEnumerationPtr __cdecl xmlParseNotationType(xmlParserCtxtPtr ctxt);
void __cdecl xmlParsePEReference(xmlParserCtxtPtr ctxt);
void __cdecl xmlParsePI(xmlParserCtxtPtr ctxt);
const xmlChar *__cdecl xmlParsePITarget(xmlParserCtxtPtr ctxt);
xmlChar *__cdecl xmlParsePubidLiteral(xmlParserCtxtPtr ctxt);
xmlChar *__cdecl xmlParseQuotedString(xmlParserCtxtPtr ctxt);
void __cdecl xmlParseReference(xmlParserCtxtPtr ctxt);
int __cdecl xmlParseSDDecl(xmlParserCtxtPtr ctxt);
const xmlChar *__cdecl xmlParseStartTag(xmlParserCtxtPtr ctxt);
xmlChar *__cdecl xmlParseSystemLiteral(xmlParserCtxtPtr ctxt);
void __cdecl xmlParseTextDecl(xmlParserCtxtPtr ctxt);
xmlURIPtr __cdecl xmlParseURI(const char *str);
xmlURIPtr __cdecl xmlParseURIRaw(const char *str, int raw);
int __cdecl xmlParseURIReference(xmlURIPtr uri, const char *str);
xmlChar *__cdecl xmlParseVersionInfo(xmlParserCtxtPtr ctxt);
xmlChar *__cdecl xmlParseVersionNum(xmlParserCtxtPtr ctxt);
void __cdecl xmlParseXMLDecl(xmlParserCtxtPtr ctxt);
void __cdecl xmlParserAddNodeInfo(xmlParserCtxtPtr ctxt, const xmlParserNodeInfoPtr info);
int xmlParserDebugEntities;
void xmlParserError(void *ctx, const char *msg, ...);
const xmlParserNodeInfo *__cdecl xmlParserFindNodeInfo(const xmlParserCtxtPtr ctxt, const xmlNodePtr node);
unsigned __int64 __cdecl xmlParserFindNodeInfoIndex(const xmlParserNodeInfoSeqPtr seq, const xmlNodePtr node);
char *__cdecl xmlParserGetDirectory(const char *filename);
void __cdecl xmlParserHandlePEReference(xmlParserCtxtPtr ctxt);
void __cdecl xmlParserHandleReference(xmlParserCtxtPtr ctxt);
xmlParserInputBufferPtr __cdecl xmlParserInputBufferCreateFd(int fd, xmlCharEncoding enc);
xmlParserInputBufferPtr __cdecl xmlParserInputBufferCreateFile(FILE *file, xmlCharEncoding enc);
xmlParserInputBufferPtr __cdecl xmlParserInputBufferCreateFilename(const char *URI, xmlCharEncoding enc);
xmlParserInputBufferCreateFilenameFunc __cdecl xmlParserInputBufferCreateFilenameDefault(xmlParserInputBufferCreateFilenameFunc func);
xmlParserInputBufferCreateFilenameFunc xmlParserInputBufferCreateFilenameValue;
xmlParserInputBufferPtr __cdecl xmlParserInputBufferCreateIO(xmlInputReadCallback ioread, xmlInputCloseCallback ioclose, void *ioctx, xmlCharEncoding enc);
xmlParserInputBufferPtr __cdecl xmlParserInputBufferCreateMem(const char *mem, int size, xmlCharEncoding enc);
xmlParserInputBufferPtr __cdecl xmlParserInputBufferCreateStatic(const char *mem, int size, xmlCharEncoding enc);
int __cdecl xmlParserInputBufferGrow(xmlParserInputBufferPtr in, int len);
int __cdecl xmlParserInputBufferPush(xmlParserInputBufferPtr in, int len, const char *buf);
int __cdecl xmlParserInputBufferRead(xmlParserInputBufferPtr in, int len);
int __cdecl xmlParserInputGrow(xmlParserInputPtr in, int len);
int __cdecl xmlParserInputRead(xmlParserInputPtr in, int len);
void __cdecl xmlParserInputShrink(xmlParserInputPtr in);
unsigned int xmlParserMaxDepth;
void __cdecl xmlParserPrintFileContext(xmlParserInputPtr input);
void __cdecl xmlParserPrintFileInfo(xmlParserInputPtr input);
void xmlParserValidityError(void *ctx, const char *msg, ...);
void xmlParserValidityWarning(void *ctx, const char *msg, ...);
const char *xmlParserVersion;
void xmlParserWarning(void *ctx, const char *msg, ...);
xmlChar *__cdecl xmlPathToURI(const xmlChar *path);
int __cdecl xmlPatternFromRoot(xmlPatternPtr comp);
xmlStreamCtxtPtr __cdecl xmlPatternGetStreamCtxt(xmlPatternPtr comp);
int __cdecl xmlPatternMatch(xmlPatternPtr comp, xmlNodePtr node);
int __cdecl xmlPatternMaxDepth(xmlPatternPtr comp);
int __cdecl xmlPatternMinDepth(xmlPatternPtr comp);
int __cdecl xmlPatternStreamable(xmlPatternPtr comp);
xmlPatternPtr __cdecl xmlPatterncompile(const xmlChar *pattern, xmlDict *dict, int flags, const xmlChar **namespaces);
int __cdecl xmlPedanticParserDefault(int val);
int xmlPedanticParserDefaultValue;
xmlChar __cdecl xmlPopInput(xmlParserCtxtPtr ctxt);
int xmlPopInputCallbacks(void);
xmlNodePtr __cdecl xmlPreviousElementSibling(xmlNodePtr node);
void __cdecl xmlPrintURI(FILE *stream, xmlURIPtr uri);
int __cdecl xmlPushInput(xmlParserCtxtPtr ctxt, xmlParserInputPtr input);
void __cdecl xmlRMutexLock(xmlRMutexPtr tok);
void __cdecl xmlRMutexUnlock(xmlRMutexPtr tok);
xmlDocPtr __cdecl xmlReadDoc(const xmlChar *cur, const char *URL, const char *encoding, int options);
xmlDocPtr __cdecl xmlReadFd(int fd, const char *URL, const char *encoding, int options);
xmlDocPtr __cdecl xmlReadFile(const char *URL, const char *encoding, int options);
xmlDocPtr __cdecl xmlReadIO(xmlInputReadCallback ioread, xmlInputCloseCallback ioclose, void *ioctx, const char *URL, const char *encoding, int options);
xmlDocPtr __cdecl xmlReadMemory(const char *buffer, int size, const char *URL, const char *encoding, int options);
xmlTextReaderPtr __cdecl xmlReaderForDoc(const xmlChar *cur, const char *URL, const char *encoding, int options);
xmlTextReaderPtr __cdecl xmlReaderForFd(int fd, const char *URL, const char *encoding, int options);
xmlTextReaderPtr __cdecl xmlReaderForFile(const char *filename, const char *encoding, int options);
xmlTextReaderPtr __cdecl xmlReaderForIO(xmlInputReadCallback ioread, xmlInputCloseCallback ioclose, void *ioctx, const char *URL, const char *encoding, int options);
xmlTextReaderPtr __cdecl xmlReaderForMemory(const char *buffer, int size, const char *URL, const char *encoding, int options);
int __cdecl xmlReaderNewDoc(xmlTextReaderPtr reader, const xmlChar *cur, const char *URL, const char *encoding, int options);
int __cdecl xmlReaderNewFd(xmlTextReaderPtr reader, int fd, const char *URL, const char *encoding, int options);
int __cdecl xmlReaderNewFile(xmlTextReaderPtr reader, const char *filename, const char *encoding, int options);
int __cdecl xmlReaderNewIO(xmlTextReaderPtr reader, xmlInputReadCallback ioread, xmlInputCloseCallback ioclose, void *ioctx, const char *URL, const char *encoding, int options);
int __cdecl xmlReaderNewMemory(xmlTextReaderPtr reader, const char *buffer, int size, const char *URL, const char *encoding, int options);
int __cdecl xmlReaderNewWalker(xmlTextReaderPtr reader, xmlDocPtr doc);
xmlTextReaderPtr __cdecl xmlReaderWalker(xmlDocPtr doc);
xmlReallocFunc xmlRealloc;
void *__cdecl xmlReallocLoc(void *ptr, size_t size, const char *file, int line);
int __cdecl xmlReconciliateNs(xmlDocPtr doc, xmlNodePtr tree);
xmlDocPtr __cdecl xmlRecoverDoc(xmlChar *cur);
xmlDocPtr __cdecl xmlRecoverFile(const char *filename);
xmlDocPtr __cdecl xmlRecoverMemory(const char *buffer, int size);
int __cdecl xmlRegExecErrInfo(xmlRegExecCtxtPtr exec, const xmlChar **string, int *nbval, int *nbneg, xmlChar **values, int *terminal);
int __cdecl xmlRegExecNextValues(xmlRegExecCtxtPtr exec, int *nbval, int *nbneg, xmlChar **values, int *terminal);
int __cdecl xmlRegExecPushString(xmlRegExecCtxtPtr exec, const xmlChar *value, void *data);
int __cdecl xmlRegExecPushString2(xmlRegExecCtxtPtr exec, const xmlChar *value, const xmlChar *value2, void *data);
void __cdecl xmlRegFreeExecCtxt(xmlRegExecCtxtPtr exec);
void __cdecl xmlRegFreeRegexp(xmlRegexpPtr regexp);
xmlRegExecCtxtPtr __cdecl xmlRegNewExecCtxt(xmlRegexpPtr comp, xmlRegExecCallbacks callback, void *data);
xmlRegexpPtr __cdecl xmlRegexpCompile(const xmlChar *regexp);
int __cdecl xmlRegexpExec(xmlRegexpPtr comp, const xmlChar *value);
int __cdecl xmlRegexpIsDeterminist(xmlRegexpPtr comp);
void __cdecl xmlRegexpPrint(FILE *output, xmlRegexpPtr regexp);
void __cdecl xmlRegisterCharEncodingHandler(xmlCharEncodingHandlerPtr handler);
void xmlRegisterDefaultInputCallbacks(void);
void xmlRegisterDefaultOutputCallbacks(void);
void xmlRegisterHTTPPostCallbacks(void);
int __cdecl xmlRegisterInputCallbacks(xmlInputMatchCallback matchFunc, xmlInputOpenCallback openFunc, xmlInputReadCallback readFunc, xmlInputCloseCallback closeFunc);
xmlRegisterNodeFunc __cdecl xmlRegisterNodeDefault(xmlRegisterNodeFunc func);
xmlRegisterNodeFunc xmlRegisterNodeDefaultValue;
int __cdecl xmlRegisterOutputCallbacks(xmlOutputMatchCallback matchFunc, xmlOutputOpenCallback openFunc, xmlOutputWriteCallback writeFunc, xmlOutputCloseCallback closeFunc);
void xmlRelaxNGCleanupTypes(void);
void __cdecl xmlRelaxNGDump(FILE *output, xmlRelaxNGPtr schema);
void __cdecl xmlRelaxNGDumpTree(FILE *output, xmlRelaxNGPtr schema);
void __cdecl xmlRelaxNGFree(xmlRelaxNGPtr schema);
void __cdecl xmlRelaxNGFreeParserCtxt(xmlRelaxNGParserCtxtPtr ctxt);
void __cdecl xmlRelaxNGFreeValidCtxt(xmlRelaxNGValidCtxtPtr ctxt);
int __cdecl xmlRelaxNGGetParserErrors(xmlRelaxNGParserCtxtPtr ctxt, xmlRelaxNGValidityErrorFunc *err, xmlRelaxNGValidityWarningFunc *warn, void **ctx);
int __cdecl xmlRelaxNGGetValidErrors(xmlRelaxNGValidCtxtPtr ctxt, xmlRelaxNGValidityErrorFunc *err, xmlRelaxNGValidityWarningFunc *warn, void **ctx);
int xmlRelaxNGInitTypes(void);
xmlRelaxNGParserCtxtPtr __cdecl xmlRelaxNGNewDocParserCtxt(xmlDocPtr doc);
xmlRelaxNGParserCtxtPtr __cdecl xmlRelaxNGNewMemParserCtxt(const char *buffer, int size);
xmlRelaxNGParserCtxtPtr __cdecl xmlRelaxNGNewParserCtxt(const char *URL);
xmlRelaxNGValidCtxtPtr __cdecl xmlRelaxNGNewValidCtxt(xmlRelaxNGPtr schema);
xmlRelaxNGPtr __cdecl xmlRelaxNGParse(xmlRelaxNGParserCtxtPtr ctxt);
void __cdecl xmlRelaxNGSetParserErrors(xmlRelaxNGParserCtxtPtr ctxt, xmlRelaxNGValidityErrorFunc err, xmlRelaxNGValidityWarningFunc warn, void *ctx);
void __cdecl xmlRelaxNGSetParserStructuredErrors(xmlRelaxNGParserCtxtPtr ctxt, xmlStructuredErrorFunc serror, void *ctx);
void __cdecl xmlRelaxNGSetValidErrors(xmlRelaxNGValidCtxtPtr ctxt, xmlRelaxNGValidityErrorFunc err, xmlRelaxNGValidityWarningFunc warn, void *ctx);
void __cdecl xmlRelaxNGSetValidStructuredErrors(xmlRelaxNGValidCtxtPtr ctxt, xmlStructuredErrorFunc serror, void *ctx);
int __cdecl xmlRelaxNGValidateDoc(xmlRelaxNGValidCtxtPtr ctxt, xmlDocPtr doc);
int __cdecl xmlRelaxNGValidateFullElement(xmlRelaxNGValidCtxtPtr ctxt, xmlDocPtr doc, xmlNodePtr elem);
int __cdecl xmlRelaxNGValidatePopElement(xmlRelaxNGValidCtxtPtr ctxt, xmlDocPtr doc, xmlNodePtr elem);
int __cdecl xmlRelaxNGValidatePushCData(xmlRelaxNGValidCtxtPtr ctxt, const xmlChar *data, int len);
int __cdecl xmlRelaxNGValidatePushElement(xmlRelaxNGValidCtxtPtr ctxt, xmlDocPtr doc, xmlNodePtr elem);
int __cdecl xmlRelaxParserSetFlag(xmlRelaxNGParserCtxtPtr ctxt, int flag);
int __cdecl xmlRemoveID(xmlDocPtr doc, xmlAttrPtr attr);
int __cdecl xmlRemoveProp(xmlAttrPtr cur);
int __cdecl xmlRemoveRef(xmlDocPtr doc, xmlAttrPtr attr);
xmlNodePtr __cdecl xmlReplaceNode(xmlNodePtr old, xmlNodePtr cur);
void __cdecl xmlResetError(xmlErrorPtr err);
void xmlResetLastError(void);
void __cdecl xmlSAX2AttributeDecl(void *ctx, const xmlChar *elem, const xmlChar *fullname, int type, int def, const xmlChar *defaultValue, xmlEnumerationPtr tree);
void __cdecl xmlSAX2CDataBlock(void *ctx, const xmlChar *value, int len);
void __cdecl xmlSAX2Characters(void *ctx, const xmlChar *ch, int len);
void __cdecl xmlSAX2Comment(void *ctx, const xmlChar *value);
void __cdecl xmlSAX2ElementDecl(void *ctx, const xmlChar *name, int type, xmlElementContentPtr content);
void __cdecl xmlSAX2EndDocument(void *ctx);
void __cdecl xmlSAX2EndElement(void *ctx, const xmlChar *name);
void __cdecl xmlSAX2EndElementNs(void *ctx, const xmlChar *localname, const xmlChar *prefix, const xmlChar *URI);
void __cdecl xmlSAX2EntityDecl(void *ctx, const xmlChar *name, int type, const xmlChar *publicId, const xmlChar *systemId, xmlChar *content);
void __cdecl xmlSAX2ExternalSubset(void *ctx, const xmlChar *name, const xmlChar *ExternalID, const xmlChar *SystemID);
int __cdecl xmlSAX2GetColumnNumber(void *ctx);
xmlEntityPtr __cdecl xmlSAX2GetEntity(void *ctx, const xmlChar *name);
int __cdecl xmlSAX2GetLineNumber(void *ctx);
xmlEntityPtr __cdecl xmlSAX2GetParameterEntity(void *ctx, const xmlChar *name);
const xmlChar *__cdecl xmlSAX2GetPublicId(void *ctx);
const xmlChar *__cdecl xmlSAX2GetSystemId(void *ctx);
int __cdecl xmlSAX2HasExternalSubset(void *ctx);
int __cdecl xmlSAX2HasInternalSubset(void *ctx);
void __cdecl xmlSAX2IgnorableWhitespace(void *ctx, const xmlChar *ch, int len);
void __cdecl xmlSAX2InitDefaultSAXHandler(xmlSAXHandler *hdlr, int warning);
void __cdecl xmlSAX2InitDocbDefaultSAXHandler(xmlSAXHandler *hdlr);
void __cdecl xmlSAX2InitHtmlDefaultSAXHandler(xmlSAXHandler *hdlr);
void __cdecl xmlSAX2InternalSubset(void *ctx, const xmlChar *name, const xmlChar *ExternalID, const xmlChar *SystemID);
int __cdecl xmlSAX2IsStandalone(void *ctx);
void __cdecl xmlSAX2NotationDecl(void *ctx, const xmlChar *name, const xmlChar *publicId, const xmlChar *systemId);
void __cdecl xmlSAX2ProcessingInstruction(void *ctx, const xmlChar *target, const xmlChar *data);
void __cdecl xmlSAX2Reference(void *ctx, const xmlChar *name);
xmlParserInputPtr __cdecl xmlSAX2ResolveEntity(void *ctx, const xmlChar *publicId, const xmlChar *systemId);
void __cdecl xmlSAX2SetDocumentLocator(void *ctx, xmlSAXLocatorPtr loc);
void __cdecl xmlSAX2StartDocument(void *ctx);
void __cdecl xmlSAX2StartElement(void *ctx, const xmlChar *fullname, const xmlChar **atts);
void __cdecl xmlSAX2StartElementNs(void *ctx, const xmlChar *localname, const xmlChar *prefix, const xmlChar *URI, int nb_namespaces, const xmlChar **namespaces, int nb_attributes, int nb_defaulted, const xmlChar **attributes);
void __cdecl xmlSAX2UnparsedEntityDecl(void *ctx, const xmlChar *name, const xmlChar *publicId, const xmlChar *systemId, const xmlChar *notationName);
int __cdecl xmlSAXDefaultVersion(int version);
xmlDtdPtr __cdecl xmlSAXParseDTD(xmlSAXHandlerPtr sax, const xmlChar *ExternalID, const xmlChar *SystemID);
xmlDocPtr __cdecl xmlSAXParseDoc(xmlSAXHandlerPtr sax, const xmlChar *cur, int recovery);
xmlDocPtr __cdecl xmlSAXParseEntity(xmlSAXHandlerPtr sax, const char *filename);
xmlDocPtr __cdecl xmlSAXParseFile(xmlSAXHandlerPtr sax, const char *filename, int recovery);
xmlDocPtr __cdecl xmlSAXParseFileWithData(xmlSAXHandlerPtr sax, const char *filename, int recovery, void *data);
xmlDocPtr __cdecl xmlSAXParseMemory(xmlSAXHandlerPtr sax, const char *buffer, int size, int recovery);
xmlDocPtr __cdecl xmlSAXParseMemoryWithData(xmlSAXHandlerPtr sax, const char *buffer, int size, int recovery, void *data);
int __cdecl xmlSAXUserParseFile(xmlSAXHandlerPtr sax, void *user_data, const char *filename);
int __cdecl xmlSAXUserParseMemory(xmlSAXHandlerPtr sax, void *user_data, const char *buffer, int size);
int __cdecl xmlSAXVersion(xmlSAXHandler *hdlr, int version);
int __cdecl xmlSaveClose(xmlSaveCtxtPtr ctxt);
__int64 __cdecl xmlSaveDoc(xmlSaveCtxtPtr ctxt, xmlDocPtr doc);
int __cdecl xmlSaveFile(const char *filename, xmlDocPtr cur);
int __cdecl xmlSaveFileEnc(const char *filename, xmlDocPtr cur, const char *encoding);
int __cdecl xmlSaveFileTo(xmlOutputBufferPtr buf, xmlDocPtr cur, const char *encoding);
int __cdecl xmlSaveFlush(xmlSaveCtxtPtr ctxt);
int __cdecl xmlSaveFormatFile(const char *filename, xmlDocPtr cur, int format);
int __cdecl xmlSaveFormatFileEnc(const char *filename, xmlDocPtr cur, const char *encoding, int format);
int __cdecl xmlSaveFormatFileTo(xmlOutputBufferPtr buf, xmlDocPtr cur, const char *encoding, int format);
int xmlSaveNoEmptyTags;
int __cdecl xmlSaveSetAttrEscape(xmlSaveCtxtPtr ctxt, xmlCharEncodingOutputFunc escape);
int __cdecl xmlSaveSetEscape(xmlSaveCtxtPtr ctxt, xmlCharEncodingOutputFunc escape);
xmlSaveCtxtPtr __cdecl xmlSaveToBuffer(xmlBufferPtr buffer, const char *encoding, int options);
xmlSaveCtxtPtr __cdecl xmlSaveToFd(int fd, const char *encoding, int options);
xmlSaveCtxtPtr __cdecl xmlSaveToFilename(const char *filename, const char *encoding, int options);
xmlSaveCtxtPtr __cdecl xmlSaveToIO(xmlOutputWriteCallback iowrite, xmlOutputCloseCallback ioclose, void *ioctx, const char *encoding, int options);
__int64 __cdecl xmlSaveTree(xmlSaveCtxtPtr ctxt, xmlNodePtr node);
xmlChar *__cdecl xmlSaveUri(xmlURIPtr uri);
xmlChar *__cdecl xmlScanName(xmlParserCtxtPtr ctxt);
int __cdecl xmlSchemaCheckFacet(xmlSchemaFacetPtr facet, xmlSchemaTypePtr typeDecl, xmlSchemaParserCtxtPtr ctxt, const xmlChar *name);
void xmlSchemaCleanupTypes(void);
xmlChar *__cdecl xmlSchemaCollapseString(const xmlChar *value);
int __cdecl xmlSchemaCompareValues(xmlSchemaValPtr x, xmlSchemaValPtr y);
int __cdecl xmlSchemaCompareValuesWhtsp(xmlSchemaValPtr x, xmlSchemaWhitespaceValueType xws, xmlSchemaValPtr y, xmlSchemaWhitespaceValueType yws);
xmlSchemaValPtr __cdecl xmlSchemaCopyValue(xmlSchemaValPtr val);
void __cdecl xmlSchemaDump(FILE *output, xmlSchemaPtr schema);
void __cdecl xmlSchemaFree(xmlSchemaPtr schema);
void __cdecl xmlSchemaFreeFacet(xmlSchemaFacetPtr facet);
void __cdecl xmlSchemaFreeParserCtxt(xmlSchemaParserCtxtPtr ctxt);
void __cdecl xmlSchemaFreeType(xmlSchemaTypePtr type);
void __cdecl xmlSchemaFreeValidCtxt(xmlSchemaValidCtxtPtr ctxt);
void __cdecl xmlSchemaFreeValue(xmlSchemaValPtr val);
void __cdecl xmlSchemaFreeWildcard(xmlSchemaWildcardPtr wildcard);
xmlSchemaTypePtr __cdecl xmlSchemaGetBuiltInListSimpleTypeItemType(xmlSchemaTypePtr type);
xmlSchemaTypePtr __cdecl xmlSchemaGetBuiltInType(xmlSchemaValType type);
int __cdecl xmlSchemaGetCanonValue(xmlSchemaValPtr val, const xmlChar **retValue);
int __cdecl xmlSchemaGetCanonValueWhtsp(xmlSchemaValPtr val, const xmlChar **retValue, xmlSchemaWhitespaceValueType ws);
unsigned __int64 __cdecl xmlSchemaGetFacetValueAsULong(xmlSchemaFacetPtr facet);
int __cdecl xmlSchemaGetParserErrors(xmlSchemaParserCtxtPtr ctxt, xmlSchemaValidityErrorFunc *err, xmlSchemaValidityWarningFunc *warn, void **ctx);
xmlSchemaTypePtr __cdecl xmlSchemaGetPredefinedType(const xmlChar *name, const xmlChar *ns);
xmlSchemaValType __cdecl xmlSchemaGetValType(xmlSchemaValPtr val);
int __cdecl xmlSchemaGetValidErrors(xmlSchemaValidCtxtPtr ctxt, xmlSchemaValidityErrorFunc *err, xmlSchemaValidityWarningFunc *warn, void **ctx);
void xmlSchemaInitTypes(void);
int __cdecl xmlSchemaIsBuiltInTypeFacet(xmlSchemaTypePtr type, int facetType);
int __cdecl xmlSchemaIsValid(xmlSchemaValidCtxtPtr ctxt);
xmlSchemaParserCtxtPtr __cdecl xmlSchemaNewDocParserCtxt(xmlDocPtr doc);
xmlSchemaFacetPtr xmlSchemaNewFacet(void);
xmlSchemaParserCtxtPtr __cdecl xmlSchemaNewMemParserCtxt(const char *buffer, int size);
xmlSchemaValPtr __cdecl xmlSchemaNewNOTATIONValue(const xmlChar *name, const xmlChar *ns);
xmlSchemaParserCtxtPtr __cdecl xmlSchemaNewParserCtxt(const char *URL);
xmlSchemaValPtr __cdecl xmlSchemaNewQNameValue(const xmlChar *namespaceName, const xmlChar *localName);
xmlSchemaValPtr __cdecl xmlSchemaNewStringValue(xmlSchemaValType type, const xmlChar *value);
xmlSchemaValidCtxtPtr __cdecl xmlSchemaNewValidCtxt(xmlSchemaPtr schema);
xmlSchemaPtr __cdecl xmlSchemaParse(xmlSchemaParserCtxtPtr ctxt);
xmlSchemaSAXPlugPtr __cdecl xmlSchemaSAXPlug(xmlSchemaValidCtxtPtr ctxt, xmlSAXHandlerPtr *sax, void **user_data);
int __cdecl xmlSchemaSAXUnplug(xmlSchemaSAXPlugPtr plug);
void __cdecl xmlSchemaSetParserErrors(xmlSchemaParserCtxtPtr ctxt, xmlSchemaValidityErrorFunc err, xmlSchemaValidityWarningFunc warn, void *ctx);
void __cdecl xmlSchemaSetParserStructuredErrors(xmlSchemaParserCtxtPtr ctxt, xmlStructuredErrorFunc serror, void *ctx);
void __cdecl xmlSchemaSetValidErrors(xmlSchemaValidCtxtPtr ctxt, xmlSchemaValidityErrorFunc err, xmlSchemaValidityWarningFunc warn, void *ctx);
int __cdecl xmlSchemaSetValidOptions(xmlSchemaValidCtxtPtr ctxt, int options);
void __cdecl xmlSchemaSetValidStructuredErrors(xmlSchemaValidCtxtPtr ctxt, xmlStructuredErrorFunc serror, void *ctx);
int __cdecl xmlSchemaValPredefTypeNode(xmlSchemaTypePtr type, const xmlChar *value, xmlSchemaValPtr *val, xmlNodePtr node);
int __cdecl xmlSchemaValPredefTypeNodeNoNorm(xmlSchemaTypePtr type, const xmlChar *value, xmlSchemaValPtr *val, xmlNodePtr node);
int __cdecl xmlSchemaValidCtxtGetOptions(xmlSchemaValidCtxtPtr ctxt);
xmlParserCtxtPtr __cdecl xmlSchemaValidCtxtGetParserCtxt(xmlSchemaValidCtxtPtr ctxt);
int __cdecl xmlSchemaValidateDoc(xmlSchemaValidCtxtPtr ctxt, xmlDocPtr instance);
int __cdecl xmlSchemaValidateFacet(xmlSchemaTypePtr base, xmlSchemaFacetPtr facet, const xmlChar *value, xmlSchemaValPtr val);
int __cdecl xmlSchemaValidateFacetWhtsp(xmlSchemaFacetPtr facet, xmlSchemaWhitespaceValueType fws, xmlSchemaValType valType, const xmlChar *value, xmlSchemaValPtr val, xmlSchemaWhitespaceValueType ws);
int __cdecl xmlSchemaValidateFile(xmlSchemaValidCtxtPtr ctxt, const char *filename, int options);
int __cdecl xmlSchemaValidateLengthFacet(xmlSchemaTypePtr type, xmlSchemaFacetPtr facet, const xmlChar *value, xmlSchemaValPtr val, unsigned __int64 *length);
int __cdecl xmlSchemaValidateLengthFacetWhtsp(xmlSchemaFacetPtr facet, xmlSchemaValType valType, const xmlChar *value, xmlSchemaValPtr val, unsigned __int64 *length, xmlSchemaWhitespaceValueType ws);
int __cdecl xmlSchemaValidateListSimpleTypeFacet(xmlSchemaFacetPtr facet, const xmlChar *value, unsigned __int64 actualLen, unsigned __int64 *expectedLen);
int __cdecl xmlSchemaValidateOneElement(xmlSchemaValidCtxtPtr ctxt, xmlNodePtr elem);
int __cdecl xmlSchemaValidatePredefinedType(xmlSchemaTypePtr type, const xmlChar *value, xmlSchemaValPtr *val);
int __cdecl xmlSchemaValidateStream(xmlSchemaValidCtxtPtr ctxt, xmlParserInputBufferPtr input, xmlCharEncoding enc, xmlSAXHandlerPtr sax, void *user_data);
int __cdecl xmlSchemaValueAppend(xmlSchemaValPtr prev, xmlSchemaValPtr cur);
int __cdecl xmlSchemaValueGetAsBoolean(xmlSchemaValPtr val);
const xmlChar *__cdecl xmlSchemaValueGetAsString(xmlSchemaValPtr val);
xmlSchemaValPtr __cdecl xmlSchemaValueGetNext(xmlSchemaValPtr cur);
xmlChar *__cdecl xmlSchemaWhiteSpaceReplace(const xmlChar *value);
void __cdecl xmlSchematronFree(xmlSchematronPtr schema);
void __cdecl xmlSchematronFreeParserCtxt(xmlSchematronParserCtxtPtr ctxt);
void __cdecl xmlSchematronFreeValidCtxt(xmlSchematronValidCtxtPtr ctxt);
xmlSchematronParserCtxtPtr __cdecl xmlSchematronNewDocParserCtxt(xmlDocPtr doc);
xmlSchematronParserCtxtPtr __cdecl xmlSchematronNewMemParserCtxt(const char *buffer, int size);
xmlSchematronParserCtxtPtr __cdecl xmlSchematronNewParserCtxt(const char *URL);
xmlSchematronValidCtxtPtr __cdecl xmlSchematronNewValidCtxt(xmlSchematronPtr schema, int options);
xmlSchematronPtr __cdecl xmlSchematronParse(xmlSchematronParserCtxtPtr ctxt);
void __cdecl xmlSchematronSetValidStructuredErrors(xmlSchematronValidCtxtPtr ctxt, xmlStructuredErrorFunc serror, void *ctx);
int __cdecl xmlSchematronValidateDoc(xmlSchematronValidCtxtPtr ctxt, xmlDocPtr instance);
xmlNsPtr __cdecl xmlSearchNs(xmlDocPtr doc, xmlNodePtr node, const xmlChar *nameSpace);
xmlNsPtr __cdecl xmlSearchNsByHref(xmlDocPtr doc, xmlNodePtr node, const xmlChar *href);
void __cdecl xmlSetBufferAllocationScheme(xmlBufferAllocationScheme scheme);
void __cdecl xmlSetCompressMode(int mode);
void __cdecl xmlSetDocCompressMode(xmlDocPtr doc, int mode);
void __cdecl xmlSetEntityReferenceFunc(xmlEntityReferenceFunc func);
void __cdecl xmlSetExternalEntityLoader(xmlExternalEntityLoader f);
int __cdecl xmlSetFeature(xmlParserCtxtPtr ctxt, const char *name, void *value);
void __cdecl xmlSetGenericErrorFunc(void *ctx, xmlGenericErrorFunc handler);
void __cdecl xmlSetListDoc(xmlNodePtr list, xmlDocPtr doc);
void __cdecl xmlSetNs(xmlNodePtr node, xmlNsPtr ns);
xmlAttrPtr __cdecl xmlSetNsProp(xmlNodePtr node, xmlNsPtr ns, const xmlChar *name, const xmlChar *value);
xmlAttrPtr __cdecl xmlSetProp(xmlNodePtr node, const xmlChar *name, const xmlChar *value);
void __cdecl xmlSetStructuredErrorFunc(void *ctx, xmlStructuredErrorFunc handler);
void __cdecl xmlSetTreeDoc(xmlNodePtr tree, xmlDocPtr doc);
void __cdecl xmlSetupParserForBuffer(xmlParserCtxtPtr ctxt, const xmlChar *buffer, const char *filename);
void __cdecl xmlShell(xmlDocPtr doc, char *filename, xmlShellReadlineFunc input, FILE *output);
int __cdecl xmlShellBase(xmlShellCtxtPtr ctxt, char *arg, xmlNodePtr node, xmlNodePtr node2);
int __cdecl xmlShellCat(xmlShellCtxtPtr ctxt, char *arg, xmlNodePtr node, xmlNodePtr node2);
int __cdecl xmlShellDir(xmlShellCtxtPtr ctxt, char *arg, xmlNodePtr node, xmlNodePtr node2);
int __cdecl xmlShellDu(xmlShellCtxtPtr ctxt, char *arg, xmlNodePtr tree, xmlNodePtr node2);
int __cdecl xmlShellList(xmlShellCtxtPtr ctxt, char *arg, xmlNodePtr node, xmlNodePtr node2);
int __cdecl xmlShellLoad(xmlShellCtxtPtr ctxt, char *filename, xmlNodePtr node, xmlNodePtr node2);
void __cdecl xmlShellPrintNode(xmlNodePtr node);
void __cdecl xmlShellPrintXPathError(int errorType, const char *arg);
void __cdecl xmlShellPrintXPathResult(xmlXPathObjectPtr list);
int __cdecl xmlShellPwd(xmlShellCtxtPtr ctxt, char *buffer, xmlNodePtr node, xmlNodePtr node2);
int __cdecl xmlShellSave(xmlShellCtxtPtr ctxt, char *filename, xmlNodePtr node, xmlNodePtr node2);
int __cdecl xmlShellValidate(xmlShellCtxtPtr ctxt, char *dtd, xmlNodePtr node, xmlNodePtr node2);
int __cdecl xmlShellWrite(xmlShellCtxtPtr ctxt, char *filename, xmlNodePtr node, xmlNodePtr node2);
int __cdecl xmlSkipBlankChars(xmlParserCtxtPtr ctxt);
void __cdecl xmlSnprintfElementContent(char *buf, int size, xmlElementContentPtr content, int englob);
xmlChar *__cdecl xmlSplitQName(xmlParserCtxtPtr ctxt, const xmlChar *name, xmlChar **prefix);
xmlChar *__cdecl xmlSplitQName2(const xmlChar *name, xmlChar **prefix);
const xmlChar *__cdecl xmlSplitQName3(const xmlChar *name, int *len);
void __cdecl xmlSprintfElementContent(char *buf, xmlElementContentPtr content, int englob);
void __cdecl xmlStopParser(xmlParserCtxtPtr ctxt);
int __cdecl xmlStrEqual(const xmlChar *str1, const xmlChar *str2);
int xmlStrPrintf(xmlChar *buf, int len, const xmlChar *msg, ...);
int __cdecl xmlStrQEqual(const xmlChar *pref, const xmlChar *name, const xmlChar *str);
int __cdecl xmlStrVPrintf(xmlChar *buf, int len, const xmlChar *msg, va_list ap);
int __cdecl xmlStrcasecmp(const xmlChar *str1, const xmlChar *str2);
const xmlChar *__cdecl xmlStrcasestr(const xmlChar *str, xmlChar *val);
xmlChar *__cdecl xmlStrcat(xmlChar *cur, const xmlChar *add);
const xmlChar *__cdecl xmlStrchr(const xmlChar *str, xmlChar val);
int __cdecl xmlStrcmp(const xmlChar *str1, const xmlChar *str2);
xmlChar *__cdecl xmlStrdup(const xmlChar *cur);
int __cdecl xmlStreamPop(xmlStreamCtxtPtr stream);
int __cdecl xmlStreamPush(xmlStreamCtxtPtr stream, const xmlChar *name, const xmlChar *ns);
int __cdecl xmlStreamPushAttr(xmlStreamCtxtPtr stream, const xmlChar *name, const xmlChar *ns);
int __cdecl xmlStreamPushNode(xmlStreamCtxtPtr stream, const xmlChar *name, const xmlChar *ns, int nodeType);
int __cdecl xmlStreamWantsAnyNode(xmlStreamCtxtPtr stream);
const xmlChar xmlStringComment[];
int __cdecl xmlStringCurrentChar(xmlParserCtxtPtr ctxt, const xmlChar *cur, int *len);
xmlChar *__cdecl xmlStringDecodeEntities(xmlParserCtxtPtr ctxt, const xmlChar *str, int what, xmlChar end, xmlChar end2, xmlChar end3);
xmlNodePtr __cdecl xmlStringGetNodeList(xmlDocPtr doc, const xmlChar *value);
xmlChar *__cdecl xmlStringLenDecodeEntities(xmlParserCtxtPtr ctxt, const xmlChar *str, int len, int what, xmlChar end, xmlChar end2, xmlChar end3);
xmlNodePtr __cdecl xmlStringLenGetNodeList(xmlDocPtr doc, const xmlChar *value, int len);
const xmlChar xmlStringText[];
const xmlChar xmlStringTextNoenc[];
int __cdecl xmlStrlen(const xmlChar *str);
int __cdecl xmlStrncasecmp(const xmlChar *str1, const xmlChar *str2, int len);
xmlChar *__cdecl xmlStrncat(xmlChar *cur, const xmlChar *add, int len);
xmlChar *__cdecl xmlStrncatNew(const xmlChar *str1, const xmlChar *str2, int len);
int __cdecl xmlStrncmp(const xmlChar *str1, const xmlChar *str2, int len);
xmlChar *__cdecl xmlStrndup(const xmlChar *cur, int len);
const xmlChar *__cdecl xmlStrstr(const xmlChar *str, const xmlChar *val);
xmlChar *__cdecl xmlStrsub(const xmlChar *str, int start, int len);
xmlStructuredErrorFunc xmlStructuredError;
int __cdecl xmlSubstituteEntitiesDefault(int val);
int xmlSubstituteEntitiesDefaultValue;
int __cdecl xmlSwitchEncoding(xmlParserCtxtPtr ctxt, xmlCharEncoding enc);
int __cdecl xmlSwitchInputEncoding(xmlParserCtxtPtr ctxt, xmlParserInputPtr input, xmlCharEncodingHandlerPtr handler);
int __cdecl xmlSwitchToEncoding(xmlParserCtxtPtr ctxt, xmlCharEncodingHandlerPtr handler);
int __cdecl xmlTextConcat(xmlNodePtr node, const xmlChar *content, int len);
xmlNodePtr __cdecl xmlTextMerge(xmlNodePtr first, xmlNodePtr second);
int __cdecl xmlTextReaderAttributeCount(xmlTextReaderPtr reader);
xmlChar *__cdecl xmlTextReaderBaseUri(xmlTextReaderPtr reader);
__int64 __cdecl xmlTextReaderByteConsumed(xmlTextReaderPtr reader);
int __cdecl xmlTextReaderClose(xmlTextReaderPtr reader);
const xmlChar *__cdecl xmlTextReaderConstBaseUri(xmlTextReaderPtr reader);
const xmlChar *__cdecl xmlTextReaderConstEncoding(xmlTextReaderPtr reader);
const xmlChar *__cdecl xmlTextReaderConstLocalName(xmlTextReaderPtr reader);
const xmlChar *__cdecl xmlTextReaderConstName(xmlTextReaderPtr reader);
const xmlChar *__cdecl xmlTextReaderConstNamespaceUri(xmlTextReaderPtr reader);
const xmlChar *__cdecl xmlTextReaderConstPrefix(xmlTextReaderPtr reader);
const xmlChar *__cdecl xmlTextReaderConstString(xmlTextReaderPtr reader, const xmlChar *str);
const xmlChar *__cdecl xmlTextReaderConstValue(xmlTextReaderPtr reader);
const xmlChar *__cdecl xmlTextReaderConstXmlLang(xmlTextReaderPtr reader);
const xmlChar *__cdecl xmlTextReaderConstXmlVersion(xmlTextReaderPtr reader);
xmlDocPtr __cdecl xmlTextReaderCurrentDoc(xmlTextReaderPtr reader);
xmlNodePtr __cdecl xmlTextReaderCurrentNode(xmlTextReaderPtr reader);
int __cdecl xmlTextReaderDepth(xmlTextReaderPtr reader);
xmlNodePtr __cdecl xmlTextReaderExpand(xmlTextReaderPtr reader);
xmlChar *__cdecl xmlTextReaderGetAttribute(xmlTextReaderPtr reader, const xmlChar *name);
xmlChar *__cdecl xmlTextReaderGetAttributeNo(xmlTextReaderPtr reader, int no);
xmlChar *__cdecl xmlTextReaderGetAttributeNs(xmlTextReaderPtr reader, const xmlChar *localName, const xmlChar *namespaceURI);
void __cdecl xmlTextReaderGetErrorHandler(xmlTextReaderPtr reader, xmlTextReaderErrorFunc *f, void **arg);
int __cdecl xmlTextReaderGetParserColumnNumber(xmlTextReaderPtr reader);
int __cdecl xmlTextReaderGetParserLineNumber(xmlTextReaderPtr reader);
int __cdecl xmlTextReaderGetParserProp(xmlTextReaderPtr reader, int prop);
xmlParserInputBufferPtr __cdecl xmlTextReaderGetRemainder(xmlTextReaderPtr reader);
int __cdecl xmlTextReaderHasAttributes(xmlTextReaderPtr reader);
int __cdecl xmlTextReaderHasValue(xmlTextReaderPtr reader);
int __cdecl xmlTextReaderIsDefault(xmlTextReaderPtr reader);
int __cdecl xmlTextReaderIsEmptyElement(xmlTextReaderPtr reader);
int __cdecl xmlTextReaderIsNamespaceDecl(xmlTextReaderPtr reader);
int __cdecl xmlTextReaderIsValid(xmlTextReaderPtr reader);
xmlChar *__cdecl xmlTextReaderLocalName(xmlTextReaderPtr reader);
xmlChar *__cdecl xmlTextReaderLocatorBaseURI(xmlTextReaderLocatorPtr locator);
int __cdecl xmlTextReaderLocatorLineNumber(xmlTextReaderLocatorPtr locator);
xmlChar *__cdecl xmlTextReaderLookupNamespace(xmlTextReaderPtr reader, const xmlChar *prefix);
int __cdecl xmlTextReaderMoveToAttribute(xmlTextReaderPtr reader, const xmlChar *name);
int __cdecl xmlTextReaderMoveToAttributeNo(xmlTextReaderPtr reader, int no);
int __cdecl xmlTextReaderMoveToAttributeNs(xmlTextReaderPtr reader, const xmlChar *localName, const xmlChar *namespaceURI);
int __cdecl xmlTextReaderMoveToElement(xmlTextReaderPtr reader);
int __cdecl xmlTextReaderMoveToFirstAttribute(xmlTextReaderPtr reader);
int __cdecl xmlTextReaderMoveToNextAttribute(xmlTextReaderPtr reader);
xmlChar *__cdecl xmlTextReaderName(xmlTextReaderPtr reader);
xmlChar *__cdecl xmlTextReaderNamespaceUri(xmlTextReaderPtr reader);
int __cdecl xmlTextReaderNext(xmlTextReaderPtr reader);
int __cdecl xmlTextReaderNextSibling(xmlTextReaderPtr reader);
int __cdecl xmlTextReaderNodeType(xmlTextReaderPtr reader);
int __cdecl xmlTextReaderNormalization(xmlTextReaderPtr reader);
xmlChar *__cdecl xmlTextReaderPrefix(xmlTextReaderPtr reader);
xmlNodePtr __cdecl xmlTextReaderPreserve(xmlTextReaderPtr reader);
int __cdecl xmlTextReaderPreservePattern(xmlTextReaderPtr reader, const xmlChar *pattern, const xmlChar **namespaces);
int __cdecl xmlTextReaderQuoteChar(xmlTextReaderPtr reader);
int __cdecl xmlTextReaderRead(xmlTextReaderPtr reader);
int __cdecl xmlTextReaderReadAttributeValue(xmlTextReaderPtr reader);
xmlChar *__cdecl xmlTextReaderReadInnerXml(xmlTextReaderPtr reader);
xmlChar *__cdecl xmlTextReaderReadOuterXml(xmlTextReaderPtr reader);
int __cdecl xmlTextReaderReadState(xmlTextReaderPtr reader);
xmlChar *__cdecl xmlTextReaderReadString(xmlTextReaderPtr reader);
int __cdecl xmlTextReaderRelaxNGSetSchema(xmlTextReaderPtr reader, xmlRelaxNGPtr schema);
int __cdecl xmlTextReaderRelaxNGValidate(xmlTextReaderPtr reader, const char *rng);
int __cdecl xmlTextReaderSchemaValidate(xmlTextReaderPtr reader, const char *xsd);
int __cdecl xmlTextReaderSchemaValidateCtxt(xmlTextReaderPtr reader, xmlSchemaValidCtxtPtr ctxt, int options);
void __cdecl xmlTextReaderSetErrorHandler(xmlTextReaderPtr reader, xmlTextReaderErrorFunc f, void *arg);
int __cdecl xmlTextReaderSetParserProp(xmlTextReaderPtr reader, int prop, int value);
int __cdecl xmlTextReaderSetSchema(xmlTextReaderPtr reader, xmlSchemaPtr schema);
void __cdecl xmlTextReaderSetStructuredErrorHandler(xmlTextReaderPtr reader, xmlStructuredErrorFunc f, void *arg);
int __cdecl xmlTextReaderSetup(xmlTextReaderPtr reader, xmlParserInputBufferPtr input, const char *URL, const char *encoding, int options);
int __cdecl xmlTextReaderStandalone(xmlTextReaderPtr reader);
xmlChar *__cdecl xmlTextReaderValue(xmlTextReaderPtr reader);
xmlChar *__cdecl xmlTextReaderXmlLang(xmlTextReaderPtr reader);
int __cdecl xmlTextWriterEndAttribute(xmlTextWriterPtr writer);
int __cdecl xmlTextWriterEndCDATA(xmlTextWriterPtr writer);
int __cdecl xmlTextWriterEndComment(xmlTextWriterPtr writer);
int __cdecl xmlTextWriterEndDTD(xmlTextWriterPtr writer);
int __cdecl xmlTextWriterEndDTDAttlist(xmlTextWriterPtr writer);
int __cdecl xmlTextWriterEndDTDElement(xmlTextWriterPtr writer);
int __cdecl xmlTextWriterEndDTDEntity(xmlTextWriterPtr writer);
int __cdecl xmlTextWriterEndDocument(xmlTextWriterPtr writer);
int __cdecl xmlTextWriterEndElement(xmlTextWriterPtr writer);
int __cdecl xmlTextWriterEndPI(xmlTextWriterPtr writer);
int __cdecl xmlTextWriterFlush(xmlTextWriterPtr writer);
int __cdecl xmlTextWriterFullEndElement(xmlTextWriterPtr writer);
int __cdecl xmlTextWriterSetIndent(xmlTextWriterPtr writer, int indent);
int __cdecl xmlTextWriterSetIndentString(xmlTextWriterPtr writer, const xmlChar *str);
int __cdecl xmlTextWriterStartAttribute(xmlTextWriterPtr writer, const xmlChar *name);
int __cdecl xmlTextWriterStartAttributeNS(xmlTextWriterPtr writer, const xmlChar *prefix, const xmlChar *name, const xmlChar *namespaceURI);
int __cdecl xmlTextWriterStartCDATA(xmlTextWriterPtr writer);
int __cdecl xmlTextWriterStartComment(xmlTextWriterPtr writer);
int __cdecl xmlTextWriterStartDTD(xmlTextWriterPtr writer, const xmlChar *name, const xmlChar *pubid, const xmlChar *sysid);
int __cdecl xmlTextWriterStartDTDAttlist(xmlTextWriterPtr writer, const xmlChar *name);
int __cdecl xmlTextWriterStartDTDElement(xmlTextWriterPtr writer, const xmlChar *name);
int __cdecl xmlTextWriterStartDTDEntity(xmlTextWriterPtr writer, int pe, const xmlChar *name);
int __cdecl xmlTextWriterStartDocument(xmlTextWriterPtr writer, const char *version, const char *encoding, const char *standalone);
int __cdecl xmlTextWriterStartElement(xmlTextWriterPtr writer, const xmlChar *name);
int __cdecl xmlTextWriterStartElementNS(xmlTextWriterPtr writer, const xmlChar *prefix, const xmlChar *name, const xmlChar *namespaceURI);
int __cdecl xmlTextWriterStartPI(xmlTextWriterPtr writer, const xmlChar *target);
int __cdecl xmlTextWriterWriteAttribute(xmlTextWriterPtr writer, const xmlChar *name, const xmlChar *content);
int __cdecl xmlTextWriterWriteAttributeNS(xmlTextWriterPtr writer, const xmlChar *prefix, const xmlChar *name, const xmlChar *namespaceURI, const xmlChar *content);
int __cdecl xmlTextWriterWriteBase64(xmlTextWriterPtr writer, const char *data, int start, int len);
int __cdecl xmlTextWriterWriteBinHex(xmlTextWriterPtr writer, const char *data, int start, int len);
int __cdecl xmlTextWriterWriteCDATA(xmlTextWriterPtr writer, const xmlChar *content);
int __cdecl xmlTextWriterWriteComment(xmlTextWriterPtr writer, const xmlChar *content);
int __cdecl xmlTextWriterWriteDTD(xmlTextWriterPtr writer, const xmlChar *name, const xmlChar *pubid, const xmlChar *sysid, const xmlChar *subset);
int __cdecl xmlTextWriterWriteDTDAttlist(xmlTextWriterPtr writer, const xmlChar *name, const xmlChar *content);
int __cdecl xmlTextWriterWriteDTDElement(xmlTextWriterPtr writer, const xmlChar *name, const xmlChar *content);
int __cdecl xmlTextWriterWriteDTDEntity(xmlTextWriterPtr writer, int pe, const xmlChar *name, const xmlChar *pubid, const xmlChar *sysid, const xmlChar *ndataid, const xmlChar *content);
int __cdecl xmlTextWriterWriteDTDExternalEntity(xmlTextWriterPtr writer, int pe, const xmlChar *name, const xmlChar *pubid, const xmlChar *sysid, const xmlChar *ndataid);
int __cdecl xmlTextWriterWriteDTDExternalEntityContents(xmlTextWriterPtr writer, const xmlChar *pubid, const xmlChar *sysid, const xmlChar *ndataid);
int __cdecl xmlTextWriterWriteDTDInternalEntity(xmlTextWriterPtr writer, int pe, const xmlChar *name, const xmlChar *content);
int __cdecl xmlTextWriterWriteDTDNotation(xmlTextWriterPtr writer, const xmlChar *name, const xmlChar *pubid, const xmlChar *sysid);
int __cdecl xmlTextWriterWriteElement(xmlTextWriterPtr writer, const xmlChar *name, const xmlChar *content);
int __cdecl xmlTextWriterWriteElementNS(xmlTextWriterPtr writer, const xmlChar *prefix, const xmlChar *name, const xmlChar *namespaceURI, const xmlChar *content);
int xmlTextWriterWriteFormatAttribute(xmlTextWriterPtr writer, const xmlChar *name, const char *format, ...);
int xmlTextWriterWriteFormatAttributeNS(xmlTextWriterPtr writer, const xmlChar *prefix, const xmlChar *name, const xmlChar *namespaceURI, const char *format, ...);
int xmlTextWriterWriteFormatCDATA(xmlTextWriterPtr writer, const char *format, ...);
int xmlTextWriterWriteFormatComment(xmlTextWriterPtr writer, const char *format, ...);
int xmlTextWriterWriteFormatDTD(xmlTextWriterPtr writer, const xmlChar *name, const xmlChar *pubid, const xmlChar *sysid, const char *format, ...);
int xmlTextWriterWriteFormatDTDAttlist(xmlTextWriterPtr writer, const xmlChar *name, const char *format, ...);
int xmlTextWriterWriteFormatDTDElement(xmlTextWriterPtr writer, const xmlChar *name, const char *format, ...);
int xmlTextWriterWriteFormatDTDInternalEntity(xmlTextWriterPtr writer, int pe, const xmlChar *name, const char *format, ...);
int xmlTextWriterWriteFormatElement(xmlTextWriterPtr writer, const xmlChar *name, const char *format, ...);
int xmlTextWriterWriteFormatElementNS(xmlTextWriterPtr writer, const xmlChar *prefix, const xmlChar *name, const xmlChar *namespaceURI, const char *format, ...);
int xmlTextWriterWriteFormatPI(xmlTextWriterPtr writer, const xmlChar *target, const char *format, ...);
int xmlTextWriterWriteFormatRaw(xmlTextWriterPtr writer, const char *format, ...);
int xmlTextWriterWriteFormatString(xmlTextWriterPtr writer, const char *format, ...);
int __cdecl xmlTextWriterWritePI(xmlTextWriterPtr writer, const xmlChar *target, const xmlChar *content);
int __cdecl xmlTextWriterWriteRaw(xmlTextWriterPtr writer, const xmlChar *content);
int __cdecl xmlTextWriterWriteRawLen(xmlTextWriterPtr writer, const xmlChar *content, int len);
int __cdecl xmlTextWriterWriteString(xmlTextWriterPtr writer, const xmlChar *content);
int __cdecl xmlTextWriterWriteVFormatAttribute(xmlTextWriterPtr writer, const xmlChar *name, const char *format, va_list argptr);
int __cdecl xmlTextWriterWriteVFormatAttributeNS(xmlTextWriterPtr writer, const xmlChar *prefix, const xmlChar *name, const xmlChar *namespaceURI, const char *format, va_list argptr);
int __cdecl xmlTextWriterWriteVFormatCDATA(xmlTextWriterPtr writer, const char *format, va_list argptr);
int __cdecl xmlTextWriterWriteVFormatComment(xmlTextWriterPtr writer, const char *format, va_list argptr);
int __cdecl xmlTextWriterWriteVFormatDTD(xmlTextWriterPtr writer, const xmlChar *name, const xmlChar *pubid, const xmlChar *sysid, const char *format, va_list argptr);
int __cdecl xmlTextWriterWriteVFormatDTDAttlist(xmlTextWriterPtr writer, const xmlChar *name, const char *format, va_list argptr);
int __cdecl xmlTextWriterWriteVFormatDTDElement(xmlTextWriterPtr writer, const xmlChar *name, const char *format, va_list argptr);
int __cdecl xmlTextWriterWriteVFormatDTDInternalEntity(xmlTextWriterPtr writer, int pe, const xmlChar *name, const char *format, va_list argptr);
int __cdecl xmlTextWriterWriteVFormatElement(xmlTextWriterPtr writer, const xmlChar *name, const char *format, va_list argptr);
int __cdecl xmlTextWriterWriteVFormatElementNS(xmlTextWriterPtr writer, const xmlChar *prefix, const xmlChar *name, const xmlChar *namespaceURI, const char *format, va_list argptr);
int __cdecl xmlTextWriterWriteVFormatPI(xmlTextWriterPtr writer, const xmlChar *target, const char *format, va_list argptr);
int __cdecl xmlTextWriterWriteVFormatRaw(xmlTextWriterPtr writer, const char *format, va_list argptr);
int __cdecl xmlTextWriterWriteVFormatString(xmlTextWriterPtr writer, const char *format, va_list argptr);
xmlBufferAllocationScheme __cdecl xmlThrDefBufferAllocScheme(xmlBufferAllocationScheme v);
int __cdecl xmlThrDefDefaultBufferSize(int v);
xmlDeregisterNodeFunc __cdecl xmlThrDefDeregisterNodeDefault(xmlDeregisterNodeFunc func);
int __cdecl xmlThrDefDoValidityCheckingDefaultValue(int v);
int __cdecl xmlThrDefGetWarningsDefaultValue(int v);
int __cdecl xmlThrDefIndentTreeOutput(int v);
int __cdecl xmlThrDefKeepBlanksDefaultValue(int v);
int __cdecl xmlThrDefLineNumbersDefaultValue(int v);
int __cdecl xmlThrDefLoadExtDtdDefaultValue(int v);
xmlOutputBufferCreateFilenameFunc __cdecl xmlThrDefOutputBufferCreateFilenameDefault(xmlOutputBufferCreateFilenameFunc func);
int __cdecl xmlThrDefParserDebugEntities(int v);
xmlParserInputBufferCreateFilenameFunc __cdecl xmlThrDefParserInputBufferCreateFilenameDefault(xmlParserInputBufferCreateFilenameFunc func);
int __cdecl xmlThrDefPedanticParserDefaultValue(int v);
xmlRegisterNodeFunc __cdecl xmlThrDefRegisterNodeDefault(xmlRegisterNodeFunc func);
int __cdecl xmlThrDefSaveNoEmptyTags(int v);
void __cdecl xmlThrDefSetGenericErrorFunc(void *ctx, xmlGenericErrorFunc handler);
void __cdecl xmlThrDefSetStructuredErrorFunc(void *ctx, xmlStructuredErrorFunc handler);
int __cdecl xmlThrDefSubstituteEntitiesDefaultValue(int v);
const char *__cdecl xmlThrDefTreeIndentString(const char *v);
const char *xmlTreeIndentString;
int __cdecl xmlUCSIsAegeanNumbers(int code);
int __cdecl xmlUCSIsAlphabeticPresentationForms(int code);
int __cdecl xmlUCSIsArabic(int code);
int __cdecl xmlUCSIsArabicPresentationFormsA(int code);
int __cdecl xmlUCSIsArabicPresentationFormsB(int code);
int __cdecl xmlUCSIsArmenian(int code);
int __cdecl xmlUCSIsArrows(int code);
int __cdecl xmlUCSIsBasicLatin(int code);
int __cdecl xmlUCSIsBengali(int code);
int __cdecl xmlUCSIsBlock(int code, const char *block);
int __cdecl xmlUCSIsBlockElements(int code);
int __cdecl xmlUCSIsBopomofo(int code);
int __cdecl xmlUCSIsBopomofoExtended(int code);
int __cdecl xmlUCSIsBoxDrawing(int code);
int __cdecl xmlUCSIsBraillePatterns(int code);
int __cdecl xmlUCSIsBuhid(int code);
int __cdecl xmlUCSIsByzantineMusicalSymbols(int code);
int __cdecl xmlUCSIsCJKCompatibility(int code);
int __cdecl xmlUCSIsCJKCompatibilityForms(int code);
int __cdecl xmlUCSIsCJKCompatibilityIdeographs(int code);
int __cdecl xmlUCSIsCJKCompatibilityIdeographsSupplement(int code);
int __cdecl xmlUCSIsCJKRadicalsSupplement(int code);
int __cdecl xmlUCSIsCJKSymbolsandPunctuation(int code);
int __cdecl xmlUCSIsCJKUnifiedIdeographs(int code);
int __cdecl xmlUCSIsCJKUnifiedIdeographsExtensionA(int code);
int __cdecl xmlUCSIsCJKUnifiedIdeographsExtensionB(int code);
int __cdecl xmlUCSIsCat(int code, const char *cat);
int __cdecl xmlUCSIsCatC(int code);
int __cdecl xmlUCSIsCatCc(int code);
int __cdecl xmlUCSIsCatCf(int code);
int __cdecl xmlUCSIsCatCo(int code);
int __cdecl xmlUCSIsCatCs(int code);
int __cdecl xmlUCSIsCatL(int code);
int __cdecl xmlUCSIsCatLl(int code);
int __cdecl xmlUCSIsCatLm(int code);
int __cdecl xmlUCSIsCatLo(int code);
int __cdecl xmlUCSIsCatLt(int code);
int __cdecl xmlUCSIsCatLu(int code);
int __cdecl xmlUCSIsCatM(int code);
int __cdecl xmlUCSIsCatMc(int code);
int __cdecl xmlUCSIsCatMe(int code);
int __cdecl xmlUCSIsCatMn(int code);
int __cdecl xmlUCSIsCatN(int code);
int __cdecl xmlUCSIsCatNd(int code);
int __cdecl xmlUCSIsCatNl(int code);
int __cdecl xmlUCSIsCatNo(int code);
int __cdecl xmlUCSIsCatP(int code);
int __cdecl xmlUCSIsCatPc(int code);
int __cdecl xmlUCSIsCatPd(int code);
int __cdecl xmlUCSIsCatPe(int code);
int __cdecl xmlUCSIsCatPf(int code);
int __cdecl xmlUCSIsCatPi(int code);
int __cdecl xmlUCSIsCatPo(int code);
int __cdecl xmlUCSIsCatPs(int code);
int __cdecl xmlUCSIsCatS(int code);
int __cdecl xmlUCSIsCatSc(int code);
int __cdecl xmlUCSIsCatSk(int code);
int __cdecl xmlUCSIsCatSm(int code);
int __cdecl xmlUCSIsCatSo(int code);
int __cdecl xmlUCSIsCatZ(int code);
int __cdecl xmlUCSIsCatZl(int code);
int __cdecl xmlUCSIsCatZp(int code);
int __cdecl xmlUCSIsCatZs(int code);
int __cdecl xmlUCSIsCherokee(int code);
int __cdecl xmlUCSIsCombiningDiacriticalMarks(int code);
int __cdecl xmlUCSIsCombiningDiacriticalMarksforSymbols(int code);
int __cdecl xmlUCSIsCombiningHalfMarks(int code);
int __cdecl xmlUCSIsCombiningMarksforSymbols(int code);
int __cdecl xmlUCSIsControlPictures(int code);
int __cdecl xmlUCSIsCurrencySymbols(int code);
int __cdecl xmlUCSIsCypriotSyllabary(int code);
int __cdecl xmlUCSIsCyrillic(int code);
int __cdecl xmlUCSIsCyrillicSupplement(int code);
int __cdecl xmlUCSIsDeseret(int code);
int __cdecl xmlUCSIsDevanagari(int code);
int __cdecl xmlUCSIsDingbats(int code);
int __cdecl xmlUCSIsEnclosedAlphanumerics(int code);
int __cdecl xmlUCSIsEnclosedCJKLettersandMonths(int code);
int __cdecl xmlUCSIsEthiopic(int code);
int __cdecl xmlUCSIsGeneralPunctuation(int code);
int __cdecl xmlUCSIsGeometricShapes(int code);
int __cdecl xmlUCSIsGeorgian(int code);
int __cdecl xmlUCSIsGothic(int code);
int __cdecl xmlUCSIsGreek(int code);
int __cdecl xmlUCSIsGreekExtended(int code);
int __cdecl xmlUCSIsGreekandCoptic(int code);
int __cdecl xmlUCSIsGujarati(int code);
int __cdecl xmlUCSIsGurmukhi(int code);
int __cdecl xmlUCSIsHalfwidthandFullwidthForms(int code);
int __cdecl xmlUCSIsHangulCompatibilityJamo(int code);
int __cdecl xmlUCSIsHangulJamo(int code);
int __cdecl xmlUCSIsHangulSyllables(int code);
int __cdecl xmlUCSIsHanunoo(int code);
int __cdecl xmlUCSIsHebrew(int code);
int __cdecl xmlUCSIsHighPrivateUseSurrogates(int code);
int __cdecl xmlUCSIsHighSurrogates(int code);
int __cdecl xmlUCSIsHiragana(int code);
int __cdecl xmlUCSIsIPAExtensions(int code);
int __cdecl xmlUCSIsIdeographicDescriptionCharacters(int code);
int __cdecl xmlUCSIsKanbun(int code);
int __cdecl xmlUCSIsKangxiRadicals(int code);
int __cdecl xmlUCSIsKannada(int code);
int __cdecl xmlUCSIsKatakana(int code);
int __cdecl xmlUCSIsKatakanaPhoneticExtensions(int code);
int __cdecl xmlUCSIsKhmer(int code);
int __cdecl xmlUCSIsKhmerSymbols(int code);
int __cdecl xmlUCSIsLao(int code);
int __cdecl xmlUCSIsLatin1Supplement(int code);
int __cdecl xmlUCSIsLatinExtendedA(int code);
int __cdecl xmlUCSIsLatinExtendedAdditional(int code);
int __cdecl xmlUCSIsLatinExtendedB(int code);
int __cdecl xmlUCSIsLetterlikeSymbols(int code);
int __cdecl xmlUCSIsLimbu(int code);
int __cdecl xmlUCSIsLinearBIdeograms(int code);
int __cdecl xmlUCSIsLinearBSyllabary(int code);
int __cdecl xmlUCSIsLowSurrogates(int code);
int __cdecl xmlUCSIsMalayalam(int code);
int __cdecl xmlUCSIsMathematicalAlphanumericSymbols(int code);
int __cdecl xmlUCSIsMathematicalOperators(int code);
int __cdecl xmlUCSIsMiscellaneousMathematicalSymbolsA(int code);
int __cdecl xmlUCSIsMiscellaneousMathematicalSymbolsB(int code);
int __cdecl xmlUCSIsMiscellaneousSymbols(int code);
int __cdecl xmlUCSIsMiscellaneousSymbolsandArrows(int code);
int __cdecl xmlUCSIsMiscellaneousTechnical(int code);
int __cdecl xmlUCSIsMongolian(int code);
int __cdecl xmlUCSIsMusicalSymbols(int code);
int __cdecl xmlUCSIsMyanmar(int code);
int __cdecl xmlUCSIsNumberForms(int code);
int __cdecl xmlUCSIsOgham(int code);
int __cdecl xmlUCSIsOldItalic(int code);
int __cdecl xmlUCSIsOpticalCharacterRecognition(int code);
int __cdecl xmlUCSIsOriya(int code);
int __cdecl xmlUCSIsOsmanya(int code);
int __cdecl xmlUCSIsPhoneticExtensions(int code);
int __cdecl xmlUCSIsPrivateUse(int code);
int __cdecl xmlUCSIsPrivateUseArea(int code);
int __cdecl xmlUCSIsRunic(int code);
int __cdecl xmlUCSIsShavian(int code);
int __cdecl xmlUCSIsSinhala(int code);
int __cdecl xmlUCSIsSmallFormVariants(int code);
int __cdecl xmlUCSIsSpacingModifierLetters(int code);
int __cdecl xmlUCSIsSpecials(int code);
int __cdecl xmlUCSIsSuperscriptsandSubscripts(int code);
int __cdecl xmlUCSIsSupplementalArrowsA(int code);
int __cdecl xmlUCSIsSupplementalArrowsB(int code);
int __cdecl xmlUCSIsSupplementalMathematicalOperators(int code);
int __cdecl xmlUCSIsSupplementaryPrivateUseAreaA(int code);
int __cdecl xmlUCSIsSupplementaryPrivateUseAreaB(int code);
int __cdecl xmlUCSIsSyriac(int code);
int __cdecl xmlUCSIsTagalog(int code);
int __cdecl xmlUCSIsTagbanwa(int code);
int __cdecl xmlUCSIsTags(int code);
int __cdecl xmlUCSIsTaiLe(int code);
int __cdecl xmlUCSIsTaiXuanJingSymbols(int code);
int __cdecl xmlUCSIsTamil(int code);
int __cdecl xmlUCSIsTelugu(int code);
int __cdecl xmlUCSIsThaana(int code);
int __cdecl xmlUCSIsThai(int code);
int __cdecl xmlUCSIsTibetan(int code);
int __cdecl xmlUCSIsUgaritic(int code);
int __cdecl xmlUCSIsUnifiedCanadianAboriginalSyllabics(int code);
int __cdecl xmlUCSIsVariationSelectors(int code);
int __cdecl xmlUCSIsVariationSelectorsSupplement(int code);
int __cdecl xmlUCSIsYiRadicals(int code);
int __cdecl xmlUCSIsYiSyllables(int code);
int __cdecl xmlUCSIsYijingHexagramSymbols(int code);
xmlChar *__cdecl xmlURIEscape(const xmlChar *str);
xmlChar *__cdecl xmlURIEscapeStr(const xmlChar *str, const xmlChar *list);
char *__cdecl xmlURIUnescapeString(const char *str, int len, char *target);
int __cdecl xmlUTF8Charcmp(const xmlChar *utf1, const xmlChar *utf2);
int __cdecl xmlUTF8Size(const xmlChar *utf);
int __cdecl xmlUTF8Strlen(const xmlChar *utf);
int __cdecl xmlUTF8Strloc(const xmlChar *utf, const xmlChar *utfchar);
xmlChar *__cdecl xmlUTF8Strndup(const xmlChar *utf, int len);
const xmlChar *__cdecl xmlUTF8Strpos(const xmlChar *utf, int pos);
int __cdecl xmlUTF8Strsize(const xmlChar *utf, int len);
xmlChar *__cdecl xmlUTF8Strsub(const xmlChar *utf, int start, int len);
void __cdecl xmlUnlinkNode(xmlNodePtr cur);
void xmlUnlockLibrary(void);
int __cdecl xmlUnsetNsProp(xmlNodePtr node, xmlNsPtr ns, const xmlChar *name);
int __cdecl xmlUnsetProp(xmlNodePtr node, const xmlChar *name);
int __cdecl xmlValidBuildContentModel(xmlValidCtxtPtr ctxt, xmlElementPtr elem);
xmlChar *__cdecl xmlValidCtxtNormalizeAttributeValue(xmlValidCtxtPtr ctxt, xmlDocPtr doc, xmlNodePtr elem, const xmlChar *name, const xmlChar *value);
int __cdecl xmlValidGetPotentialChildren(xmlElementContent *ctree, const xmlChar **names, int *len, int max);
int __cdecl xmlValidGetValidElements(xmlNode *prev, xmlNode *next, const xmlChar **names, int max);
xmlChar *__cdecl xmlValidNormalizeAttributeValue(xmlDocPtr doc, xmlNodePtr elem, const xmlChar *name, const xmlChar *value);
int __cdecl xmlValidateAttributeDecl(xmlValidCtxtPtr ctxt, xmlDocPtr doc, xmlAttributePtr attr);
int __cdecl xmlValidateAttributeValue(xmlAttributeType type, const xmlChar *value);
int __cdecl xmlValidateDocument(xmlValidCtxtPtr ctxt, xmlDocPtr doc);
int __cdecl xmlValidateDocumentFinal(xmlValidCtxtPtr ctxt, xmlDocPtr doc);
int __cdecl xmlValidateDtd(xmlValidCtxtPtr ctxt, xmlDocPtr doc, xmlDtdPtr dtd);
int __cdecl xmlValidateDtdFinal(xmlValidCtxtPtr ctxt, xmlDocPtr doc);
int __cdecl xmlValidateElement(xmlValidCtxtPtr ctxt, xmlDocPtr doc, xmlNodePtr elem);
int __cdecl xmlValidateElementDecl(xmlValidCtxtPtr ctxt, xmlDocPtr doc, xmlElementPtr elem);
int __cdecl xmlValidateNCName(const xmlChar *value, int space);
int __cdecl xmlValidateNMToken(const xmlChar *value, int space);
int __cdecl xmlValidateName(const xmlChar *value, int space);
int __cdecl xmlValidateNameValue(const xmlChar *value);
int __cdecl xmlValidateNamesValue(const xmlChar *value);
int __cdecl xmlValidateNmtokenValue(const xmlChar *value);
int __cdecl xmlValidateNmtokensValue(const xmlChar *value);
int __cdecl xmlValidateNotationDecl(xmlValidCtxtPtr ctxt, xmlDocPtr doc, xmlNotationPtr nota);
int __cdecl xmlValidateNotationUse(xmlValidCtxtPtr ctxt, xmlDocPtr doc, const xmlChar *notationName);
int __cdecl xmlValidateOneAttribute(xmlValidCtxtPtr ctxt, xmlDocPtr doc, xmlNodePtr elem, xmlAttrPtr attr, const xmlChar *value);
int __cdecl xmlValidateOneElement(xmlValidCtxtPtr ctxt, xmlDocPtr doc, xmlNodePtr elem);
int __cdecl xmlValidateOneNamespace(xmlValidCtxtPtr ctxt, xmlDocPtr doc, xmlNodePtr elem, const xmlChar *prefix, xmlNsPtr ns, const xmlChar *value);
int __cdecl xmlValidatePopElement(xmlValidCtxtPtr ctxt, xmlDocPtr doc, xmlNodePtr elem, const xmlChar *qname);
int __cdecl xmlValidatePushCData(xmlValidCtxtPtr ctxt, const xmlChar *data, int len);
int __cdecl xmlValidatePushElement(xmlValidCtxtPtr ctxt, xmlDocPtr doc, xmlNodePtr elem, const xmlChar *qname);
int __cdecl xmlValidateQName(const xmlChar *value, int space);
int __cdecl xmlValidateRoot(xmlValidCtxtPtr ctxt, xmlDocPtr doc);
void __cdecl xmlXIncludeFreeContext(xmlXIncludeCtxtPtr ctxt);
xmlXIncludeCtxtPtr __cdecl xmlXIncludeNewContext(xmlDocPtr doc);
int __cdecl xmlXIncludeProcess(xmlDocPtr doc);
int __cdecl xmlXIncludeProcessFlags(xmlDocPtr doc, int flags);
int __cdecl xmlXIncludeProcessFlagsData(xmlDocPtr doc, int flags, void *data);
int __cdecl xmlXIncludeProcessNode(xmlXIncludeCtxtPtr ctxt, xmlNodePtr tree);
int __cdecl xmlXIncludeProcessTree(xmlNodePtr tree);
int __cdecl xmlXIncludeProcessTreeFlags(xmlNodePtr tree, int flags);
int __cdecl xmlXIncludeSetFlags(xmlXIncludeCtxtPtr ctxt, int flags);
void __cdecl xmlXPathAddValues(xmlXPathParserContextPtr ctxt);
void __cdecl xmlXPathBooleanFunction(xmlXPathParserContextPtr ctxt, int nargs);
double __cdecl xmlXPathCastBooleanToNumber(int val);
xmlChar *__cdecl xmlXPathCastBooleanToString(int val);
int __cdecl xmlXPathCastNodeSetToBoolean(xmlNodeSetPtr ns);
double __cdecl xmlXPathCastNodeSetToNumber(xmlNodeSetPtr ns);
xmlChar *__cdecl xmlXPathCastNodeSetToString(xmlNodeSetPtr ns);
double __cdecl xmlXPathCastNodeToNumber(xmlNodePtr node);
xmlChar *__cdecl xmlXPathCastNodeToString(xmlNodePtr node);
int __cdecl xmlXPathCastNumberToBoolean(double val);
xmlChar *__cdecl xmlXPathCastNumberToString(double val);
int __cdecl xmlXPathCastStringToBoolean(const xmlChar *val);
double __cdecl xmlXPathCastStringToNumber(const xmlChar *val);
int __cdecl xmlXPathCastToBoolean(xmlXPathObjectPtr val);
double __cdecl xmlXPathCastToNumber(xmlXPathObjectPtr val);
xmlChar *__cdecl xmlXPathCastToString(xmlXPathObjectPtr val);
void __cdecl xmlXPathCeilingFunction(xmlXPathParserContextPtr ctxt, int nargs);
int __cdecl xmlXPathCmpNodes(xmlNodePtr node1, xmlNodePtr node2);
int __cdecl xmlXPathCompareValues(xmlXPathParserContextPtr ctxt, int inf, int strict);
xmlXPathCompExprPtr __cdecl xmlXPathCompile(const xmlChar *str);
xmlXPathObjectPtr __cdecl xmlXPathCompiledEval(xmlXPathCompExprPtr comp, xmlXPathContextPtr ctx);
int __cdecl xmlXPathCompiledEvalToBoolean(xmlXPathCompExprPtr comp, xmlXPathContextPtr ctxt);
void __cdecl xmlXPathConcatFunction(xmlXPathParserContextPtr ctxt, int nargs);
void __cdecl xmlXPathContainsFunction(xmlXPathParserContextPtr ctxt, int nargs);
int __cdecl xmlXPathContextSetCache(xmlXPathContextPtr ctxt, int active, int value, int options);
xmlXPathObjectPtr __cdecl xmlXPathConvertBoolean(xmlXPathObjectPtr val);
xmlXPathObjectPtr __cdecl xmlXPathConvertNumber(xmlXPathObjectPtr val);
xmlXPathObjectPtr __cdecl xmlXPathConvertString(xmlXPathObjectPtr val);
void __cdecl xmlXPathCountFunction(xmlXPathParserContextPtr ctxt, int nargs);
xmlXPathCompExprPtr __cdecl xmlXPathCtxtCompile(xmlXPathContextPtr ctxt, const xmlChar *str);
void __cdecl xmlXPathDebugDumpCompExpr(FILE *output, xmlXPathCompExprPtr comp, int depth);
void __cdecl xmlXPathDebugDumpObject(FILE *output, xmlXPathObjectPtr cur, int depth);
xmlNodeSetPtr __cdecl xmlXPathDifference(xmlNodeSetPtr nodes1, xmlNodeSetPtr nodes2);
xmlNodeSetPtr __cdecl xmlXPathDistinct(xmlNodeSetPtr nodes);
xmlNodeSetPtr __cdecl xmlXPathDistinctSorted(xmlNodeSetPtr nodes);
void __cdecl xmlXPathDivValues(xmlXPathParserContextPtr ctxt);
int __cdecl xmlXPathEqualValues(xmlXPathParserContextPtr ctxt);
void __cdecl xmlXPathErr(xmlXPathParserContextPtr ctxt, int error);
xmlXPathObjectPtr __cdecl xmlXPathEval(const xmlChar *str, xmlXPathContextPtr ctx);
void __cdecl xmlXPathEvalExpr(xmlXPathParserContextPtr ctxt);
xmlXPathObjectPtr __cdecl xmlXPathEvalExpression(const xmlChar *str, xmlXPathContextPtr ctxt);
int __cdecl xmlXPathEvalPredicate(xmlXPathContextPtr ctxt, xmlXPathObjectPtr res);
int __cdecl xmlXPathEvaluatePredicateResult(xmlXPathParserContextPtr ctxt, xmlXPathObjectPtr res);
void __cdecl xmlXPathFalseFunction(xmlXPathParserContextPtr ctxt, int nargs);
void __cdecl xmlXPathFloorFunction(xmlXPathParserContextPtr ctxt, int nargs);
void __cdecl xmlXPathFreeCompExpr(xmlXPathCompExprPtr comp);
void __cdecl xmlXPathFreeContext(xmlXPathContextPtr ctxt);
void __cdecl xmlXPathFreeNodeSet(xmlNodeSetPtr obj);
void __cdecl xmlXPathFreeNodeSetList(xmlXPathObjectPtr obj);
void __cdecl xmlXPathFreeObject(xmlXPathObjectPtr obj);
void __cdecl xmlXPathFreeParserContext(xmlXPathParserContextPtr ctxt);
xmlXPathFunction __cdecl xmlXPathFunctionLookup(xmlXPathContextPtr ctxt, const xmlChar *name);
xmlXPathFunction __cdecl xmlXPathFunctionLookupNS(xmlXPathContextPtr ctxt, const xmlChar *name, const xmlChar *ns_uri);
int __cdecl xmlXPathHasSameNodes(xmlNodeSetPtr nodes1, xmlNodeSetPtr nodes2);
void __cdecl xmlXPathIdFunction(xmlXPathParserContextPtr ctxt, int nargs);
void xmlXPathInit(void);
xmlNodeSetPtr __cdecl xmlXPathIntersection(xmlNodeSetPtr nodes1, xmlNodeSetPtr nodes2);
int __cdecl xmlXPathIsInf(double val);
int __cdecl xmlXPathIsNaN(double val);
int __cdecl xmlXPathIsNodeType(const xmlChar *name);
void __cdecl xmlXPathLangFunction(xmlXPathParserContextPtr ctxt, int nargs);
void __cdecl xmlXPathLastFunction(xmlXPathParserContextPtr ctxt, int nargs);
xmlNodeSetPtr __cdecl xmlXPathLeading(xmlNodeSetPtr nodes1, xmlNodeSetPtr nodes2);
xmlNodeSetPtr __cdecl xmlXPathLeadingSorted(xmlNodeSetPtr nodes1, xmlNodeSetPtr nodes2);
void __cdecl xmlXPathLocalNameFunction(xmlXPathParserContextPtr ctxt, int nargs);
void __cdecl xmlXPathModValues(xmlXPathParserContextPtr ctxt);
void __cdecl xmlXPathMultValues(xmlXPathParserContextPtr ctxt);
double xmlXPathNAN;
double xmlXPathNINF;
void __cdecl xmlXPathNamespaceURIFunction(xmlXPathParserContextPtr ctxt, int nargs);
xmlXPathObjectPtr __cdecl xmlXPathNewBoolean(int val);
xmlXPathObjectPtr __cdecl xmlXPathNewCString(const char *val);
xmlXPathContextPtr __cdecl xmlXPathNewContext(xmlDocPtr doc);
xmlXPathObjectPtr __cdecl xmlXPathNewFloat(double val);
xmlXPathObjectPtr __cdecl xmlXPathNewNodeSet(xmlNodePtr val);
xmlXPathObjectPtr __cdecl xmlXPathNewNodeSetList(xmlNodeSetPtr val);
xmlXPathParserContextPtr __cdecl xmlXPathNewParserContext(const xmlChar *str, xmlXPathContextPtr ctxt);
xmlXPathObjectPtr __cdecl xmlXPathNewString(const xmlChar *val);
xmlXPathObjectPtr __cdecl xmlXPathNewValueTree(xmlNodePtr val);
xmlNodePtr __cdecl xmlXPathNextAncestor(xmlXPathParserContextPtr ctxt, xmlNodePtr cur);
xmlNodePtr __cdecl xmlXPathNextAncestorOrSelf(xmlXPathParserContextPtr ctxt, xmlNodePtr cur);
xmlNodePtr __cdecl xmlXPathNextAttribute(xmlXPathParserContextPtr ctxt, xmlNodePtr cur);
xmlNodePtr __cdecl xmlXPathNextChild(xmlXPathParserContextPtr ctxt, xmlNodePtr cur);
xmlNodePtr __cdecl xmlXPathNextDescendant(xmlXPathParserContextPtr ctxt, xmlNodePtr cur);
xmlNodePtr __cdecl xmlXPathNextDescendantOrSelf(xmlXPathParserContextPtr ctxt, xmlNodePtr cur);
xmlNodePtr __cdecl xmlXPathNextFollowing(xmlXPathParserContextPtr ctxt, xmlNodePtr cur);
xmlNodePtr __cdecl xmlXPathNextFollowingSibling(xmlXPathParserContextPtr ctxt, xmlNodePtr cur);
xmlNodePtr __cdecl xmlXPathNextNamespace(xmlXPathParserContextPtr ctxt, xmlNodePtr cur);
xmlNodePtr __cdecl xmlXPathNextParent(xmlXPathParserContextPtr ctxt, xmlNodePtr cur);
xmlNodePtr __cdecl xmlXPathNextPreceding(xmlXPathParserContextPtr ctxt, xmlNodePtr cur);
xmlNodePtr __cdecl xmlXPathNextPrecedingSibling(xmlXPathParserContextPtr ctxt, xmlNodePtr cur);
xmlNodePtr __cdecl xmlXPathNextSelf(xmlXPathParserContextPtr ctxt, xmlNodePtr cur);
xmlNodeSetPtr __cdecl xmlXPathNodeLeading(xmlNodeSetPtr nodes, xmlNodePtr node);
xmlNodeSetPtr __cdecl xmlXPathNodeLeadingSorted(xmlNodeSetPtr nodes, xmlNodePtr node);
void __cdecl xmlXPathNodeSetAdd(xmlNodeSetPtr cur, xmlNodePtr val);
void __cdecl xmlXPathNodeSetAddNs(xmlNodeSetPtr cur, xmlNodePtr node, xmlNsPtr ns);
void __cdecl xmlXPathNodeSetAddUnique(xmlNodeSetPtr cur, xmlNodePtr val);
int __cdecl xmlXPathNodeSetContains(xmlNodeSetPtr cur, xmlNodePtr val);
xmlNodeSetPtr __cdecl xmlXPathNodeSetCreate(xmlNodePtr val);
void __cdecl xmlXPathNodeSetDel(xmlNodeSetPtr cur, xmlNodePtr val);
void __cdecl xmlXPathNodeSetFreeNs(xmlNsPtr ns);
xmlNodeSetPtr __cdecl xmlXPathNodeSetMerge(xmlNodeSetPtr val1, xmlNodeSetPtr val2);
void __cdecl xmlXPathNodeSetRemove(xmlNodeSetPtr cur, int val);
void __cdecl xmlXPathNodeSetSort(xmlNodeSetPtr set);
xmlNodeSetPtr __cdecl xmlXPathNodeTrailing(xmlNodeSetPtr nodes, xmlNodePtr node);
xmlNodeSetPtr __cdecl xmlXPathNodeTrailingSorted(xmlNodeSetPtr nodes, xmlNodePtr node);
void __cdecl xmlXPathNormalizeFunction(xmlXPathParserContextPtr ctxt, int nargs);
int __cdecl xmlXPathNotEqualValues(xmlXPathParserContextPtr ctxt);
void __cdecl xmlXPathNotFunction(xmlXPathParserContextPtr ctxt, int nargs);
const xmlChar *__cdecl xmlXPathNsLookup(xmlXPathContextPtr ctxt, const xmlChar *prefix);
void __cdecl xmlXPathNumberFunction(xmlXPathParserContextPtr ctxt, int nargs);
xmlXPathObjectPtr __cdecl xmlXPathObjectCopy(xmlXPathObjectPtr val);
__int64 __cdecl xmlXPathOrderDocElems(xmlDocPtr doc);
double xmlXPathPINF;
xmlChar *__cdecl xmlXPathParseNCName(xmlXPathParserContextPtr ctxt);
xmlChar *__cdecl xmlXPathParseName(xmlXPathParserContextPtr ctxt);
int __cdecl xmlXPathPopBoolean(xmlXPathParserContextPtr ctxt);
void *__cdecl xmlXPathPopExternal(xmlXPathParserContextPtr ctxt);
xmlNodeSetPtr __cdecl xmlXPathPopNodeSet(xmlXPathParserContextPtr ctxt);
double __cdecl xmlXPathPopNumber(xmlXPathParserContextPtr ctxt);
xmlChar *__cdecl xmlXPathPopString(xmlXPathParserContextPtr ctxt);
void __cdecl xmlXPathPositionFunction(xmlXPathParserContextPtr ctxt, int nargs);
void __cdecl xmlXPathRegisterAllFunctions(xmlXPathContextPtr ctxt);
int __cdecl xmlXPathRegisterFunc(xmlXPathContextPtr ctxt, const xmlChar *name, xmlXPathFunction f);
void __cdecl xmlXPathRegisterFuncLookup(xmlXPathContextPtr ctxt, xmlXPathFuncLookupFunc f, void *funcCtxt);
int __cdecl xmlXPathRegisterFuncNS(xmlXPathContextPtr ctxt, const xmlChar *name, const xmlChar *ns_uri, xmlXPathFunction f);
int __cdecl xmlXPathRegisterNs(xmlXPathContextPtr ctxt, const xmlChar *prefix, const xmlChar *ns_uri);
int __cdecl xmlXPathRegisterVariable(xmlXPathContextPtr ctxt, const xmlChar *name, xmlXPathObjectPtr value);
void __cdecl xmlXPathRegisterVariableLookup(xmlXPathContextPtr ctxt, xmlXPathVariableLookupFunc f, void *data);
int __cdecl xmlXPathRegisterVariableNS(xmlXPathContextPtr ctxt, const xmlChar *name, const xmlChar *ns_uri, xmlXPathObjectPtr value);
void __cdecl xmlXPathRegisteredFuncsCleanup(xmlXPathContextPtr ctxt);
void __cdecl xmlXPathRegisteredNsCleanup(xmlXPathContextPtr ctxt);
void __cdecl xmlXPathRegisteredVariablesCleanup(xmlXPathContextPtr ctxt);
void __cdecl xmlXPathRoot(xmlXPathParserContextPtr ctxt);
void __cdecl xmlXPathRoundFunction(xmlXPathParserContextPtr ctxt, int nargs);
void __cdecl xmlXPathStartsWithFunction(xmlXPathParserContextPtr ctxt, int nargs);
double __cdecl xmlXPathStringEvalNumber(const xmlChar *str);
void __cdecl xmlXPathStringFunction(xmlXPathParserContextPtr ctxt, int nargs);
void __cdecl xmlXPathStringLengthFunction(xmlXPathParserContextPtr ctxt, int nargs);
void __cdecl xmlXPathSubValues(xmlXPathParserContextPtr ctxt);
void __cdecl xmlXPathSubstringAfterFunction(xmlXPathParserContextPtr ctxt, int nargs);
void __cdecl xmlXPathSubstringBeforeFunction(xmlXPathParserContextPtr ctxt, int nargs);
void __cdecl xmlXPathSubstringFunction(xmlXPathParserContextPtr ctxt, int nargs);
void __cdecl xmlXPathSumFunction(xmlXPathParserContextPtr ctxt, int nargs);
xmlNodeSetPtr __cdecl xmlXPathTrailing(xmlNodeSetPtr nodes1, xmlNodeSetPtr nodes2);
xmlNodeSetPtr __cdecl xmlXPathTrailingSorted(xmlNodeSetPtr nodes1, xmlNodeSetPtr nodes2);
void __cdecl xmlXPathTranslateFunction(xmlXPathParserContextPtr ctxt, int nargs);
void __cdecl xmlXPathTrueFunction(xmlXPathParserContextPtr ctxt, int nargs);
void __cdecl xmlXPathValueFlipSign(xmlXPathParserContextPtr ctxt);
xmlXPathObjectPtr __cdecl xmlXPathVariableLookup(xmlXPathContextPtr ctxt, const xmlChar *name);
xmlXPathObjectPtr __cdecl xmlXPathVariableLookupNS(xmlXPathContextPtr ctxt, const xmlChar *name, const xmlChar *ns_uri);
xmlXPathObjectPtr __cdecl xmlXPathWrapCString(char *val);
xmlXPathObjectPtr __cdecl xmlXPathWrapExternal(void *val);
xmlXPathObjectPtr __cdecl xmlXPathWrapNodeSet(xmlNodeSetPtr val);
xmlXPathObjectPtr __cdecl xmlXPathWrapString(xmlChar *val);
void __cdecl xmlXPatherror(xmlXPathParserContextPtr ctxt, const char *file, int line, int no);
xmlNodePtr __cdecl xmlXPtrBuildNodeList(xmlXPathObjectPtr obj);
xmlXPathObjectPtr __cdecl xmlXPtrEval(const xmlChar *str, xmlXPathContextPtr ctx);
void __cdecl xmlXPtrEvalRangePredicate(xmlXPathParserContextPtr ctxt);
void __cdecl xmlXPtrFreeLocationSet(xmlLocationSetPtr obj);
void __cdecl xmlXPtrLocationSetAdd(xmlLocationSetPtr cur, xmlXPathObjectPtr val);
xmlLocationSetPtr __cdecl xmlXPtrLocationSetCreate(xmlXPathObjectPtr val);
void __cdecl xmlXPtrLocationSetDel(xmlLocationSetPtr cur, xmlXPathObjectPtr val);
xmlLocationSetPtr __cdecl xmlXPtrLocationSetMerge(xmlLocationSetPtr val1, xmlLocationSetPtr val2);
void __cdecl xmlXPtrLocationSetRemove(xmlLocationSetPtr cur, int val);
xmlXPathObjectPtr __cdecl xmlXPtrNewCollapsedRange(xmlNodePtr start);
xmlXPathContextPtr __cdecl xmlXPtrNewContext(xmlDocPtr doc, xmlNodePtr here, xmlNodePtr origin);
xmlXPathObjectPtr __cdecl xmlXPtrNewLocationSetNodeSet(xmlNodeSetPtr set);
xmlXPathObjectPtr __cdecl xmlXPtrNewLocationSetNodes(xmlNodePtr start, xmlNodePtr end);
xmlXPathObjectPtr __cdecl xmlXPtrNewRange(xmlNodePtr start, int startindex, xmlNodePtr end, int endindex);
xmlXPathObjectPtr __cdecl xmlXPtrNewRangeNodeObject(xmlNodePtr start, xmlXPathObjectPtr end);
xmlXPathObjectPtr __cdecl xmlXPtrNewRangeNodePoint(xmlNodePtr start, xmlXPathObjectPtr end);
xmlXPathObjectPtr __cdecl xmlXPtrNewRangeNodes(xmlNodePtr start, xmlNodePtr end);
xmlXPathObjectPtr __cdecl xmlXPtrNewRangePointNode(xmlXPathObjectPtr start, xmlNodePtr end);
xmlXPathObjectPtr __cdecl xmlXPtrNewRangePoints(xmlXPathObjectPtr start, xmlXPathObjectPtr end);
void __cdecl xmlXPtrRangeToFunction(xmlXPathParserContextPtr ctxt, int nargs);
xmlXPathObjectPtr __cdecl xmlXPtrWrapLocationSet(xmlLocationSetPtr val);
xp_error __cdecl xp_attach_gl_context(void *cgl_ctx, xp_surface_id sid);
unsigned int xp_composite_area_threshold;
xp_error __cdecl xp_composite_pixels(unsigned int width, unsigned int height, unsigned int function, void *src[2], unsigned int src_rowbytes[2], void *mask, unsigned int mask_rowbytes, void *dest[2], unsigned int dest_rowbytes[2]);
xp_error __cdecl xp_configure_surface(xp_surface_id sid, unsigned int mask, const xp_window_changes *values);
xp_error __cdecl xp_configure_window(xp_window_id id, unsigned int mask, const xp_window_changes *values);
void __cdecl xp_copy_bytes(unsigned int width, unsigned int height, const void *src, unsigned int src_rowbytes, void *dst, unsigned int dst_rowbytes);
unsigned int xp_copy_bytes_threshold;
xp_error __cdecl xp_copy_window(xp_window_id src_id, xp_window_id dst_id, int dst_nrects, const xp_box *dst_rects, int dx, int dy);
xp_error __cdecl xp_create_surface(xp_window_id id, xp_surface_id *ret_sid);
xp_error __cdecl xp_create_window(unsigned int mask, const xp_window_changes *values, xp_window_id *ret_id);
xp_error __cdecl xp_destroy_surface(xp_surface_id sid);
xp_error __cdecl xp_destroy_window(xp_window_id id);
xp_error __cdecl xp_disable_hot_keys(xp_bool state);
xp_error xp_disable_update(void);
xp_error __cdecl xp_export_surface(xp_window_id wid, xp_surface_id sid, xp_client_id client, unsigned int ret_key[2]);
void __cdecl xp_fill_bytes(unsigned int width, unsigned int height, uint32_t value, void *dst, unsigned int dst_rowbytes);
unsigned int xp_fill_bytes_threshold;
xp_error __cdecl xp_find_window(int x, int y, xp_window_id above_id, xp_window_id *ret_id);
xp_error __cdecl xp_flush_window(xp_window_id id);
xp_error __cdecl xp_frame_draw(xp_window_id wid, xp_frame_class class, xp_frame_attr attr, const xp_box *outer, const xp_box *inner, unsigned int title_len, const unsigned __int8 *title_bytes);
xp_error __cdecl xp_frame_get_rect(xp_frame_rect type, xp_frame_class class, const xp_box *outer, const xp_box *inner, xp_box *ret);
xp_error __cdecl xp_frame_hit_test(xp_frame_class class, int x, int y, const xp_box *outer, const xp_box *inner, int *ret);
void __cdecl xp_free_shape(int nrects, xp_box *rects);
xp_error __cdecl xp_get_client_id(xp_client_id *ret_client);
xp_error __cdecl xp_get_marked_shape(xp_window_id id, int *ret_nrects, xp_box **ret_rects);
xp_error __cdecl xp_get_native_window(xp_window_id id, unsigned int *ret_native_id);
xp_error __cdecl xp_get_window_bounds(xp_window_id id, xp_box *bounds_ret);
xp_error __cdecl xp_get_window_surface_count(xp_window_id id, unsigned int *ret);
xp_error xp_hide_cursor(void);
xp_error __cdecl xp_import_surface(const unsigned int key[2], xp_surface_id *sid_ret);
xp_error __cdecl xp_init(unsigned int options);
xp_bool __cdecl xp_is_symbolic_hotkey_event(const void *e);
xp_bool __cdecl xp_is_window_marked(xp_window_id id);
xp_error __cdecl xp_lock_window(xp_window_id id, const xp_box *in_rect, unsigned int *depth, void *bits[2], unsigned int rowbytes[2], xp_box *out_rect);
xp_bool __cdecl xp_lookup_native_window(unsigned int native_id, xp_window_id *ret_id);
xp_error __cdecl xp_mark_window(xp_window_id id, int shape_nrects, const xp_box *shape_rects, int shape_tx, int shape_ty);
xp_error xp_reenable_update(void);
unsigned int xp_scroll_area_threshold;
xp_error __cdecl xp_select_events(unsigned int mask, xp_event_fun *callback, void *callback_data);
xp_error __cdecl xp_set_cursor(unsigned int width, unsigned int height, unsigned int hot_x, unsigned int hot_y, const uint32_t *argb_data, unsigned int rowbytes);
xp_error __cdecl xp_set_dock_proxy(uint32_t hi, uint32_t lo);
xp_error xp_show_cursor(void);
xp_error xp_synchronize(void);
xp_error __cdecl xp_unlock_window(xp_window_id id, xp_bool flush);
xp_error __cdecl xp_update_gl_context(void *cgl_ctx);
void __cdecl xprt_register(SVCXPRT *);
void __cdecl xprt_unregister(SVCXPRT *);
int __cdecl xslAddCall(xsltTemplatePtr templ, xmlNodePtr source);
int xslDebugStatus;
void xslDropCall(void);
void __cdecl xslHandleDebugger(xmlNodePtr cur, xmlNodePtr node, xsltTemplatePtr templ, xsltTransformContextPtr ctxt);
int __cdecl xsltAddKey(xsltStylesheetPtr style, const xmlChar *name, const xmlChar *nameURI, const xmlChar *match, const xmlChar *use, xmlNodePtr inst);
int __cdecl xsltAddStackElemList(xsltTransformContextPtr ctxt, xsltStackElemPtr elems);
int __cdecl xsltAddTemplate(xsltStylesheetPtr style, xsltTemplatePtr cur, const xmlChar *mode, const xmlChar *modeURI);
int __cdecl xsltAllocateExtra(xsltStylesheetPtr style);
int __cdecl xsltAllocateExtraCtxt(xsltTransformContextPtr ctxt);
void __cdecl xsltApplyAttributeSet(xsltTransformContextPtr ctxt, xmlNodePtr node, xmlNodePtr inst, const xmlChar *attributes);
void __cdecl xsltApplyImports(xsltTransformContextPtr ctxt, xmlNodePtr node, xmlNodePtr inst, xsltStylePreCompPtr comp);
void __cdecl xsltApplyOneTemplate(xsltTransformContextPtr ctxt, xmlNodePtr node, xmlNodePtr list, xsltTemplatePtr templ, xsltStackElemPtr params);
void __cdecl xsltApplyStripSpaces(xsltTransformContextPtr ctxt, xmlNodePtr node);
xmlDocPtr __cdecl xsltApplyStylesheet(xsltStylesheetPtr style, xmlDocPtr doc, const char **params);
xmlDocPtr __cdecl xsltApplyStylesheetUser(xsltStylesheetPtr style, xmlDocPtr doc, const char **params, const char *output, FILE *profile, xsltTransformContextPtr userCtxt);
void __cdecl xsltApplyTemplates(xsltTransformContextPtr ctxt, xmlNodePtr node, xmlNodePtr inst, xsltStylePreCompPtr comp);
xmlAttrPtr __cdecl xsltAttrListTemplateProcess(xsltTransformContextPtr ctxt, xmlNodePtr target, xmlAttrPtr cur);
xmlAttrPtr __cdecl xsltAttrTemplateProcess(xsltTransformContextPtr ctxt, xmlNodePtr target, xmlAttrPtr attr);
xmlChar *__cdecl xsltAttrTemplateValueProcess(xsltTransformContextPtr ctxt, const xmlChar *attr);
xmlChar *__cdecl xsltAttrTemplateValueProcessNode(xsltTransformContextPtr ctxt, const xmlChar *str, xmlNodePtr node);
void __cdecl xsltAttribute(xsltTransformContextPtr ctxt, xmlNodePtr node, xmlNodePtr inst, xsltStylePreCompPtr comp);
void __cdecl xsltCalibrateAdjust(__int64 delta);
void __cdecl xsltCallTemplate(xsltTransformContextPtr ctxt, xmlNodePtr node, xmlNodePtr inst, xsltStylePreCompPtr comp);
int __cdecl xsltCheckExtPrefix(xsltStylesheetPtr style, const xmlChar *URI);
int __cdecl xsltCheckExtURI(xsltStylesheetPtr style, const xmlChar *URI);
int __cdecl xsltCheckRead(xsltSecurityPrefsPtr sec, xsltTransformContextPtr ctxt, const xmlChar *URL);
int __cdecl xsltCheckWrite(xsltSecurityPrefsPtr sec, xsltTransformContextPtr ctxt, const xmlChar *URL);
void __cdecl xsltChoose(xsltTransformContextPtr ctxt, xmlNodePtr node, xmlNodePtr inst, xsltStylePreCompPtr comp);
void xsltCleanupGlobals(void);
void __cdecl xsltCleanupTemplates(xsltStylesheetPtr style);
void __cdecl xsltComment(xsltTransformContextPtr ctxt, xmlNodePtr node, xmlNodePtr inst, xsltStylePreCompPtr comp);
void __cdecl xsltCompileAttr(xsltStylesheetPtr style, xmlAttrPtr attr);
xsltCompMatchPtr __cdecl xsltCompilePattern(const xmlChar *pattern, xmlDocPtr doc, xmlNodePtr node, xsltStylesheetPtr style, xsltTransformContextPtr runtime);
xmlXPathObjectPtr *__cdecl xsltComputeSortResult(xsltTransformContextPtr ctxt, xmlNodePtr sort);
void __cdecl xsltCopy(xsltTransformContextPtr ctxt, xmlNodePtr node, xmlNodePtr inst, xsltStylePreCompPtr comp);
xmlNsPtr __cdecl xsltCopyNamespace(xsltTransformContextPtr ctxt, xmlNodePtr elem, xmlNsPtr ns);
xmlNsPtr __cdecl xsltCopyNamespaceList(xsltTransformContextPtr ctxt, xmlNodePtr node, xmlNsPtr cur);
void __cdecl xsltCopyOf(xsltTransformContextPtr ctxt, xmlNodePtr node, xmlNodePtr inst, xsltStylePreCompPtr comp);
xmlNodePtr __cdecl xsltCopyTextString(xsltTransformContextPtr ctxt, xmlNodePtr target, const xmlChar *string, int noescape);
xmlDocPtr __cdecl xsltCreateRVT(xsltTransformContextPtr ctxt);
void __cdecl xsltDebug(xsltTransformContextPtr ctxt, xmlNodePtr node, xmlNodePtr inst, xsltStylePreCompPtr comp);
void __cdecl xsltDebugDumpExtensions(FILE *output);
xsltDebugTraceCodes xsltDebugGetDefaultTrace(void);
void __cdecl xsltDebugSetDefaultTrace(xsltDebugTraceCodes val);
xsltDecimalFormatPtr __cdecl xsltDecimalFormatGetByName(xsltStylesheetPtr style, xmlChar *name);
void __cdecl xsltDefaultSortFunction(xsltTransformContextPtr ctxt, xmlNodePtr *sorts, int nbsorts);
void __cdecl xsltDoSortFunction(xsltTransformContextPtr ctxt, xmlNodePtr *sorts, int nbsorts);
xsltDocLoaderFunc xsltDocDefaultLoader;
xsltElemPreCompPtr __cdecl xsltDocumentComp(xsltStylesheetPtr style, xmlNodePtr inst, xsltTransformFunction function);
void __cdecl xsltDocumentElem(xsltTransformContextPtr ctxt, xmlNodePtr node, xmlNodePtr inst, xsltStylePreCompPtr comp);
void __cdecl xsltDocumentFunction(xmlXPathParserContextPtr ctxt, int nargs);
void __cdecl xsltDocumentSortFunction(xmlNodeSetPtr list);
void __cdecl xsltElement(xsltTransformContextPtr ctxt, xmlNodePtr node, xmlNodePtr inst, xsltStylePreCompPtr comp);
void __cdecl xsltElementAvailableFunction(xmlXPathParserContextPtr ctxt, int nargs);
const char *xsltEngineVersion;
xmlChar *__cdecl xsltEvalAVT(xsltTransformContextPtr ctxt, void *avt, xmlNodePtr node);
xmlChar *__cdecl xsltEvalAttrValueTemplate(xsltTransformContextPtr ctxt, xmlNodePtr node, const xmlChar *name, const xmlChar *ns);
int __cdecl xsltEvalGlobalVariables(xsltTransformContextPtr ctxt);
int __cdecl xsltEvalOneUserParam(xsltTransformContextPtr ctxt, const xmlChar *name, const xmlChar *value);
const xmlChar *__cdecl xsltEvalStaticAttrValueTemplate(xsltStylesheetPtr style, xmlNodePtr node, const xmlChar *name, const xmlChar *ns, int *found);
xmlChar *__cdecl xsltEvalTemplateString(xsltTransformContextPtr ctxt, xmlNodePtr contextNode, xmlNodePtr inst);
int __cdecl xsltEvalUserParams(xsltTransformContextPtr ctxt, const char **params);
int __cdecl xsltEvalXPathPredicate(xsltTransformContextPtr ctxt, xmlXPathCompExprPtr comp, xmlNsPtr *nsList, int nsNr);
xmlChar *__cdecl xsltEvalXPathString(xsltTransformContextPtr ctxt, xmlXPathCompExprPtr comp);
xmlChar *__cdecl xsltEvalXPathStringNs(xsltTransformContextPtr ctxt, xmlXPathCompExprPtr comp, int nsNr, xmlNsPtr *nsList);
xsltTransformFunction __cdecl xsltExtElementLookup(xsltTransformContextPtr ctxt, const xmlChar *name, const xmlChar *URI);
xmlXPathFunction __cdecl xsltExtFunctionLookup(xsltTransformContextPtr ctxt, const xmlChar *name, const xmlChar *URI);
const xmlChar *xsltExtMarker;
xsltTransformFunction __cdecl xsltExtModuleElementLookup(const xmlChar *name, const xmlChar *URI);
xsltPreComputeFunction __cdecl xsltExtModuleElementPreComputeLookup(const xmlChar *name, const xmlChar *URI);
xmlXPathFunction __cdecl xsltExtModuleFunctionLookup(const xmlChar *name, const xmlChar *URI);
xsltTopLevelFunction __cdecl xsltExtModuleTopLevelLookup(const xmlChar *name, const xmlChar *URI);
int __cdecl xsltExtensionInstructionResultFinalize(xsltTransformContextPtr ctxt);
int __cdecl xsltExtensionInstructionResultRegister(xsltTransformContextPtr ctxt, xmlXPathObjectPtr obj);
xsltDocumentPtr __cdecl xsltFindDocument(xsltTransformContextPtr ctxt, xmlDocPtr doc);
int __cdecl xsltFindElemSpaceHandling(xsltTransformContextPtr ctxt, xmlNodePtr node);
xsltTemplatePtr __cdecl xsltFindTemplate(xsltTransformContextPtr ctxt, const xmlChar *name, const xmlChar *nameURI);
void __cdecl xsltForEach(xsltTransformContextPtr ctxt, xmlNodePtr node, xmlNodePtr inst, xsltStylePreCompPtr comp);
xmlXPathError __cdecl xsltFormatNumberConversion(xsltDecimalFormatPtr self, xmlChar *format, double number, xmlChar **result);
void __cdecl xsltFormatNumberFunction(xmlXPathParserContextPtr ctxt, int nargs);
void __cdecl xsltFreeAVTList(void *avt);
void __cdecl xsltFreeAttributeSetsHashes(xsltStylesheetPtr style);
void __cdecl xsltFreeCompMatchList(xsltCompMatchPtr comp);
void __cdecl xsltFreeCtxtExts(xsltTransformContextPtr ctxt);
void __cdecl xsltFreeDocumentKeys(xsltDocumentPtr doc);
void __cdecl xsltFreeDocuments(xsltTransformContextPtr ctxt);
void __cdecl xsltFreeExts(xsltStylesheetPtr style);
void __cdecl xsltFreeGlobalVariables(xsltTransformContextPtr ctxt);
void __cdecl xsltFreeKeys(xsltStylesheetPtr style);
void __cdecl xsltFreeNamespaceAliasHashes(xsltStylesheetPtr style);
void __cdecl xsltFreeRVTs(xsltTransformContextPtr ctxt);
void __cdecl xsltFreeSecurityPrefs(xsltSecurityPrefsPtr sec);
void __cdecl xsltFreeStackElemList(xsltStackElemPtr elem);
void __cdecl xsltFreeStyleDocuments(xsltStylesheetPtr style);
void __cdecl xsltFreeStylePreComps(xsltStylesheetPtr style);
void __cdecl xsltFreeStylesheet(xsltStylesheetPtr style);
void __cdecl xsltFreeTemplateHashes(xsltStylesheetPtr style);
void __cdecl xsltFreeTransformContext(xsltTransformContextPtr ctxt);
void __cdecl xsltFunctionAvailableFunction(xmlXPathParserContextPtr ctxt, int nargs);
void __cdecl xsltFunctionNodeSet(xmlXPathParserContextPtr ctxt, int nargs);
void __cdecl xsltGenerateIdFunction(xmlXPathParserContextPtr ctxt, int nargs);
xmlGenericErrorFunc xsltGenericDebug;
void *xsltGenericDebugContext;
xmlGenericErrorFunc xsltGenericError;
void *xsltGenericErrorContext;
const xmlChar *__cdecl xsltGetCNsProp(xsltStylesheetPtr style, xmlNodePtr node, const xmlChar *name, const xmlChar *nameSpace);
int xsltGetDebuggerStatus(void);
xsltSecurityPrefsPtr xsltGetDefaultSecurityPrefs(void);
void *__cdecl xsltGetExtData(xsltTransformContextPtr ctxt, const xmlChar *URI);
xmlHashTablePtr __cdecl xsltGetExtInfo(xsltStylesheetPtr style, const xmlChar *URI);
xmlNodeSetPtr __cdecl xsltGetKey(xsltTransformContextPtr ctxt, const xmlChar *name, const xmlChar *nameURI, const xmlChar *value);
xmlNsPtr __cdecl xsltGetNamespace(xsltTransformContextPtr ctxt, xmlNodePtr cur, xmlNsPtr ns, xmlNodePtr out);
xmlChar *__cdecl xsltGetNsProp(xmlNodePtr node, const xmlChar *name, const xmlChar *nameSpace);
xmlNsPtr __cdecl xsltGetPlainNamespace(xsltTransformContextPtr ctxt, xmlNodePtr cur, xmlNsPtr ns, xmlNodePtr out);
xmlDocPtr __cdecl xsltGetProfileInformation(xsltTransformContextPtr ctxt);
const xmlChar *__cdecl xsltGetQNameURI(xmlNodePtr node, xmlChar **name);
const xmlChar *__cdecl xsltGetQNameURI2(xsltStylesheetPtr style, xmlNodePtr node, const xmlChar **name);
xsltSecurityCheck __cdecl xsltGetSecurityPrefs(xsltSecurityPrefsPtr sec, xsltSecurityOption option);
xmlNsPtr __cdecl xsltGetSpecialNamespace(xsltTransformContextPtr ctxt, xmlNodePtr cur, const xmlChar *URI, const xmlChar *prefix, xmlNodePtr out);
xsltTemplatePtr __cdecl xsltGetTemplate(xsltTransformContextPtr ctxt, xmlNodePtr node, xsltStylesheetPtr style);
int __cdecl xsltGetUTF8Char(const unsigned __int8 *utf, int *len);
int xsltGetXIncludeDefault(void);
void __cdecl xsltIf(xsltTransformContextPtr ctxt, xmlNodePtr node, xmlNodePtr inst, xsltStylePreCompPtr comp);
void xsltInit(void);
int __cdecl xsltInitAllDocKeys(xsltTransformContextPtr ctxt);
int __cdecl xsltInitCtxtExts(xsltTransformContextPtr ctxt);
int __cdecl xsltInitCtxtKey(xsltTransformContextPtr ctxt, xsltDocumentPtr doc, xsltKeyDefPtr keyd);
void __cdecl xsltInitCtxtKeys(xsltTransformContextPtr ctxt, xsltDocumentPtr doc);
void __cdecl xsltInitElemPreComp(xsltElemPreCompPtr comp, xsltStylesheetPtr style, xmlNodePtr inst, xsltTransformFunction function, xsltElemPreCompDeallocator freeFunc);
int __cdecl xsltIsBlank(xmlChar *str);
void __cdecl xsltKeyFunction(xmlXPathParserContextPtr ctxt, int nargs);
const int xsltLibxmlVersion;
const int xsltLibxsltVersion;
xsltDocumentPtr __cdecl xsltLoadDocument(xsltTransformContextPtr ctxt, const xmlChar *URI);
xsltDocumentPtr __cdecl xsltLoadStyleDocument(xsltStylesheetPtr style, const xmlChar *URI);
xsltStylesheetPtr __cdecl xsltLoadStylesheetPI(xmlDocPtr doc);
void __cdecl xsltLocalVariablePop(xsltTransformContextPtr ctxt, int limitNr, int level);
int __cdecl xsltLocalVariablePush(xsltTransformContextPtr ctxt, xsltStackElemPtr variable, int level);
int xsltMaxDepth;
void __cdecl xsltMessage(xsltTransformContextPtr ctxt, xmlNodePtr node, xmlNodePtr inst);
void __cdecl xsltNamespaceAlias(xsltStylesheetPtr style, xmlNodePtr node);
int __cdecl xsltNeedElemSpaceHandling(xsltTransformContextPtr ctxt);
xsltDocumentPtr __cdecl xsltNewDocument(xsltTransformContextPtr ctxt, xmlDocPtr doc);
xsltElemPreCompPtr __cdecl xsltNewElemPreComp(xsltStylesheetPtr style, xmlNodePtr inst, xsltTransformFunction function);
xsltSecurityPrefsPtr xsltNewSecurityPrefs(void);
xsltDocumentPtr __cdecl xsltNewStyleDocument(xsltStylesheetPtr style, xmlDocPtr doc);
xsltStylesheetPtr xsltNewStylesheet(void);
xsltTransformContextPtr __cdecl xsltNewTransformContext(xsltStylesheetPtr style, xmlDocPtr doc);
xsltStylesheetPtr __cdecl xsltNextImport(xsltStylesheetPtr style);
void __cdecl xsltNormalizeCompSteps(void *payload, void *data, const xmlChar *name);
void __cdecl xsltNumber(xsltTransformContextPtr ctxt, xmlNodePtr node, xmlNodePtr inst, xsltStylePreCompPtr comp);
void __cdecl xsltNumberFormat(xsltTransformContextPtr ctxt, xsltNumberDataPtr data, xmlNodePtr node);
void __cdecl xsltParseGlobalParam(xsltStylesheetPtr style, xmlNodePtr cur);
void __cdecl xsltParseGlobalVariable(xsltStylesheetPtr style, xmlNodePtr cur);
void __cdecl xsltParseStylesheetAttributeSet(xsltStylesheetPtr style, xmlNodePtr cur);
xsltStackElemPtr __cdecl xsltParseStylesheetCallerParam(xsltTransformContextPtr ctxt, xmlNodePtr cur);
xsltStylesheetPtr __cdecl xsltParseStylesheetDoc(xmlDocPtr doc);
xsltStylesheetPtr __cdecl xsltParseStylesheetFile(const xmlChar *filename);
int __cdecl xsltParseStylesheetImport(xsltStylesheetPtr style, xmlNodePtr cur);
xsltStylesheetPtr __cdecl xsltParseStylesheetImportedDoc(xmlDocPtr doc, xsltStylesheetPtr style);
int __cdecl xsltParseStylesheetInclude(xsltStylesheetPtr style, xmlNodePtr cur);
void __cdecl xsltParseStylesheetOutput(xsltStylesheetPtr style, xmlNodePtr cur);
void __cdecl xsltParseStylesheetParam(xsltTransformContextPtr ctxt, xmlNodePtr cur);
xsltStylesheetPtr __cdecl xsltParseStylesheetProcess(xsltStylesheetPtr ret, xmlDocPtr doc);
void __cdecl xsltParseStylesheetVariable(xsltTransformContextPtr ctxt, xmlNodePtr cur);
void __cdecl xsltParseTemplateContent(xsltStylesheetPtr style, xmlNodePtr templ);
xsltElemPreCompPtr __cdecl xsltPreComputeExtModuleElement(xsltStylesheetPtr style, xmlNodePtr inst);
void __cdecl xsltPrintErrorContext(xsltTransformContextPtr ctxt, xsltStylesheetPtr style, xmlNodePtr node);
void __cdecl xsltProcessingInstruction(xsltTransformContextPtr ctxt, xmlNodePtr node, xmlNodePtr inst, xsltStylePreCompPtr comp);
xmlDocPtr __cdecl xsltProfileStylesheet(xsltStylesheetPtr style, xmlDocPtr doc, const char **params, FILE *output);
int __cdecl xsltQuoteOneUserParam(xsltTransformContextPtr ctxt, const xmlChar *name, const xmlChar *value);
int __cdecl xsltQuoteUserParams(xsltTransformContextPtr ctxt, const char **params);
void __cdecl xsltRegisterAllElement(xsltTransformContextPtr ctxt);
void xsltRegisterAllExtras(void);
void __cdecl xsltRegisterAllFunctions(xmlXPathContextPtr ctxt);
int __cdecl xsltRegisterExtElement(xsltTransformContextPtr ctxt, const xmlChar *name, const xmlChar *URI, xsltTransformFunction function);
int __cdecl xsltRegisterExtFunction(xsltTransformContextPtr ctxt, const xmlChar *name, const xmlChar *URI, xmlXPathFunction function);
int __cdecl xsltRegisterExtModule(const xmlChar *URI, xsltExtInitFunction initFunc, xsltExtShutdownFunction shutdownFunc);
int __cdecl xsltRegisterExtModuleElement(const xmlChar *name, const xmlChar *URI, xsltPreComputeFunction precomp, xsltTransformFunction transform);
int __cdecl xsltRegisterExtModuleFull(const xmlChar *URI, xsltExtInitFunction initFunc, xsltExtShutdownFunction shutdownFunc, xsltStyleExtInitFunction styleInitFunc, xsltStyleExtShutdownFunction styleShutdownFunc);
int __cdecl xsltRegisterExtModuleFunction(const xmlChar *name, const xmlChar *URI, xmlXPathFunction function);
int __cdecl xsltRegisterExtModuleTopLevel(const xmlChar *name, const xmlChar *URI, xsltTopLevelFunction function);
int __cdecl xsltRegisterExtPrefix(xsltStylesheetPtr style, const xmlChar *prefix, const xmlChar *URI);
void __cdecl xsltRegisterExtras(xsltTransformContextPtr ctxt);
int __cdecl xsltRegisterLocalRVT(xsltTransformContextPtr ctxt, xmlDocPtr RVT);
int __cdecl xsltRegisterPersistRVT(xsltTransformContextPtr ctxt, xmlDocPtr RVT);
void xsltRegisterTestModule(void);
int __cdecl xsltRegisterTmpRVT(xsltTransformContextPtr ctxt, xmlDocPtr RVT);
void __cdecl xsltReleaseRVT(xsltTransformContextPtr ctxt, xmlDocPtr RVT);
void __cdecl xsltResolveStylesheetAttributeSet(xsltStylesheetPtr style);
int __cdecl xsltRunStylesheet(xsltStylesheetPtr style, xmlDocPtr doc, const char **params, const char *output, xmlSAXHandlerPtr SAX, xmlOutputBufferPtr IObuf);
int __cdecl xsltRunStylesheetUser(xsltStylesheetPtr style, xmlDocPtr doc, const char **params, const char *output, xmlSAXHandlerPtr SAX, xmlOutputBufferPtr IObuf, FILE *profile, xsltTransformContextPtr userCtxt);
void __cdecl xsltSaveProfiling(xsltTransformContextPtr ctxt, FILE *output);
int __cdecl xsltSaveResultTo(xmlOutputBufferPtr buf, xmlDocPtr result, xsltStylesheetPtr style);
int __cdecl xsltSaveResultToFd(int fd, xmlDocPtr result, xsltStylesheetPtr style);
int __cdecl xsltSaveResultToFile(FILE *file, xmlDocPtr result, xsltStylesheetPtr style);
int __cdecl xsltSaveResultToFilename(const char *URI, xmlDocPtr result, xsltStylesheetPtr style, int compression);
int __cdecl xsltSaveResultToString(xmlChar **doc_txt_ptr, int *doc_txt_len, xmlDocPtr result, xsltStylesheetPtr style);
int __cdecl xsltSecurityAllow(xsltSecurityPrefsPtr sec, xsltTransformContextPtr ctxt, const char *value);
int __cdecl xsltSecurityForbid(xsltSecurityPrefsPtr sec, xsltTransformContextPtr ctxt, const char *value);
int __cdecl xsltSetCtxtParseOptions(xsltTransformContextPtr ctxt, int options);
int __cdecl xsltSetCtxtSecurityPrefs(xsltSecurityPrefsPtr sec, xsltTransformContextPtr ctxt);
void __cdecl xsltSetCtxtSortFunc(xsltTransformContextPtr ctxt, xsltSortFunc handler);
int __cdecl xsltSetDebuggerCallbacks(int no, void *block);
void __cdecl xsltSetDebuggerStatus(int value);
void __cdecl xsltSetDefaultSecurityPrefs(xsltSecurityPrefsPtr sec);
void __cdecl xsltSetGenericDebugFunc(void *ctx, xmlGenericErrorFunc handler);
void __cdecl xsltSetGenericErrorFunc(void *ctx, xmlGenericErrorFunc handler);
void __cdecl xsltSetLoaderFunc(xsltDocLoaderFunc f);
int __cdecl xsltSetSecurityPrefs(xsltSecurityPrefsPtr sec, xsltSecurityOption option, xsltSecurityCheck func);
void __cdecl xsltSetSortFunc(xsltSortFunc handler);
void __cdecl xsltSetTransformErrorFunc(xsltTransformContextPtr ctxt, void *ctx, xmlGenericErrorFunc handler);
void __cdecl xsltSetXIncludeDefault(int xinclude);
void __cdecl xsltShutdownCtxtExts(xsltTransformContextPtr ctxt);
void __cdecl xsltShutdownExts(xsltStylesheetPtr style);
void __cdecl xsltSort(xsltTransformContextPtr ctxt, xmlNodePtr node, xmlNodePtr inst, xsltStylePreCompPtr comp);
const xmlChar *__cdecl xsltSplitQName(xmlDictPtr dict, const xmlChar *name, const xmlChar **prefix);
void *__cdecl xsltStyleGetExtData(xsltStylesheetPtr style, const xmlChar *URI);
void __cdecl xsltStylePreCompute(xsltStylesheetPtr style, xmlNodePtr inst);
void __cdecl xsltSystemPropertyFunction(xmlXPathParserContextPtr ctxt, int nargs);
xmlNodePtr *__cdecl xsltTemplateProcess(xsltTransformContextPtr ctxt, xmlNodePtr node);
int __cdecl xsltTestCompMatchList(xsltTransformContextPtr ctxt, xmlNodePtr node, xsltCompMatchPtr comp);
void __cdecl xsltText(xsltTransformContextPtr ctxt, xmlNodePtr node, xmlNodePtr inst, xsltStylePreCompPtr comp);
__int64 xsltTimestamp(void);
int __cdecl xsltTransStorageAdd(xsltTransformContextPtr ctxt, void *id, void *data);
void *__cdecl xsltTransStorageRemove(xsltTransformContextPtr ctxt, void *id);
void xsltTransformError(xsltTransformContextPtr ctxt, xsltStylesheetPtr style, xmlNodePtr node, const char *msg, ...);
void xsltUninit(void);
void __cdecl xsltUnparsedEntityURIFunction(xmlXPathParserContextPtr ctxt, int nargs);
int __cdecl xsltUnregisterExtModule(const xmlChar *URI);
int __cdecl xsltUnregisterExtModuleElement(const xmlChar *name, const xmlChar *URI);
int __cdecl xsltUnregisterExtModuleFunction(const xmlChar *name, const xmlChar *URI);
int __cdecl xsltUnregisterExtModuleTopLevel(const xmlChar *name, const xmlChar *URI);
void __cdecl xsltValueOf(xsltTransformContextPtr ctxt, xmlNodePtr node, xmlNodePtr inst, xsltStylePreCompPtr comp);
xmlXPathObjectPtr __cdecl xsltVariableLookup(xsltTransformContextPtr ctxt, const xmlChar *name, const xmlChar *ns_uri);
xmlXPathCompExprPtr __cdecl xsltXPathCompile(xsltStylesheetPtr style, const xmlChar *str);
xmlXPathFunction __cdecl xsltXPathFunctionLookup(xmlXPathContextPtr ctxt, const xmlChar *name, const xmlChar *ns_uri);
xsltTransformContextPtr __cdecl xsltXPathGetTransformContext(xmlXPathParserContextPtr ctxt);
xmlXPathObjectPtr __cdecl xsltXPathVariableLookup(void *ctxt, const xmlChar *name, const xmlChar *ns_uri);
double __cdecl y0(double);
double __cdecl y1(double);
double __cdecl yn(int, double);
int __cdecl yp_all(const char *, const char *, struct ypall_callback *);
int __cdecl yp_bind(const char *);
int __cdecl yp_first(const char *, const char *, char **, int *, char **, int *);
int __cdecl yp_get_default_domain(char **);
int __cdecl yp_maplist(const char *, struct ypmaplist **);
int __cdecl yp_master(const char *, const char *, char **);
int __cdecl yp_match(const char *, const char *, const char *, int, char **, int *);
int __cdecl yp_next(const char *, const char *, const char *, int, char **, int *, char **, int *);
int __cdecl yp_order(const char *, const char *, int *);
void __cdecl yp_unbind(const char *);
ypbind_resp *__cdecl ypbindproc_domain_2(domainname *, CLIENT *);
ypbind_resp *__cdecl ypbindproc_domain_2_svc(domainname *, struct svc_req *);
void *__cdecl ypbindproc_null_2(void *, CLIENT *);
void *__cdecl ypbindproc_null_2_svc(void *, struct svc_req *);
void *__cdecl ypbindproc_setdom_2(ypbind_setdom *, CLIENT *);
void *__cdecl ypbindproc_setdom_2_svc(ypbind_setdom *, struct svc_req *);
char *__cdecl yperr_string(int);
int *__cdecl ypoldproc_domain_1(domainname *, CLIENT *);
int *__cdecl ypoldproc_domain_1_svc(domainname *, struct svc_req *);
int *__cdecl ypoldproc_domain_nonack_1(domainname *, CLIENT *);
int *__cdecl ypoldproc_domain_nonack_1_svc(domainname *, struct svc_req *);
ypresponse *__cdecl ypoldproc_first_1(yprequest *, CLIENT *);
ypresponse *__cdecl ypoldproc_first_1_svc(yprequest *, struct svc_req *);
ypresponse *__cdecl ypoldproc_get_1(yprequest *, CLIENT *);
ypresponse *__cdecl ypoldproc_get_1_svc(yprequest *, struct svc_req *);
ypresponse *__cdecl ypoldproc_match_1(yprequest *, CLIENT *);
ypresponse *__cdecl ypoldproc_match_1_svc(yprequest *, struct svc_req *);
ypresponse *__cdecl ypoldproc_next_1(yprequest *, CLIENT *);
ypresponse *__cdecl ypoldproc_next_1_svc(yprequest *, struct svc_req *);
void *__cdecl ypoldproc_null_1(void *, CLIENT *);
void *__cdecl ypoldproc_null_1_svc(void *, struct svc_req *);
ypresponse *__cdecl ypoldproc_poll_1(yprequest *, CLIENT *);
ypresponse *__cdecl ypoldproc_poll_1_svc(yprequest *, struct svc_req *);
ypresponse *__cdecl ypoldproc_pull_1(yprequest *, CLIENT *);
ypresponse *__cdecl ypoldproc_pull_1_svc(yprequest *, struct svc_req *);
ypresponse *__cdecl ypoldproc_push_1(yprequest *, CLIENT *);
ypresponse *__cdecl ypoldproc_push_1_svc(yprequest *, struct svc_req *);
int *__cdecl yppasswdproc_update_1(yppasswd *, CLIENT *);
int *__cdecl yppasswdproc_update_1_svc(yppasswd *, struct svc_req *);
ypresp_all *__cdecl ypproc_all_2(ypreq_nokey *, CLIENT *);
ypresp_all *__cdecl ypproc_all_2_svc(ypreq_nokey *, struct svc_req *);
void *__cdecl ypproc_clear_2(void *, CLIENT *);
void *__cdecl ypproc_clear_2_svc(void *, struct svc_req *);
int *__cdecl ypproc_domain_2(domainname *, CLIENT *);
int *__cdecl ypproc_domain_2_svc(domainname *, struct svc_req *);
int *__cdecl ypproc_domain_nonack_2(domainname *, CLIENT *);
int *__cdecl ypproc_domain_nonack_2_svc(domainname *, struct svc_req *);
ypresp_key_val *__cdecl ypproc_first_2(ypreq_key *, CLIENT *);
ypresp_key_val *__cdecl ypproc_first_2_svc(ypreq_key *, struct svc_req *);
ypresp_maplist *__cdecl ypproc_maplist_2(domainname *, CLIENT *);
ypresp_maplist *__cdecl ypproc_maplist_2_svc(domainname *, struct svc_req *);
ypresp_master *__cdecl ypproc_master_2(ypreq_nokey *, CLIENT *);
ypresp_master *__cdecl ypproc_master_2_svc(ypreq_nokey *, struct svc_req *);
ypresp_val *__cdecl ypproc_match_2(ypreq_key *, CLIENT *);
ypresp_val *__cdecl ypproc_match_2_svc(ypreq_key *, struct svc_req *);
ypresp_key_val *__cdecl ypproc_next_2(ypreq_key *, CLIENT *);
ypresp_key_val *__cdecl ypproc_next_2_svc(ypreq_key *, struct svc_req *);
void *__cdecl ypproc_null_2(void *, CLIENT *);
void *__cdecl ypproc_null_2_svc(void *, struct svc_req *);
ypresp_order *__cdecl ypproc_order_2(ypreq_nokey *, CLIENT *);
ypresp_order *__cdecl ypproc_order_2_svc(ypreq_nokey *, struct svc_req *);
ypresp_xfr *__cdecl ypproc_xfr_2(ypreq_xfr *, CLIENT *);
ypresp_xfr *__cdecl ypproc_xfr_2_svc(ypreq_xfr *, struct svc_req *);
int __cdecl ypprot_err(unsigned int);
void *__cdecl yppushproc_null_1(void *, CLIENT *);
void *__cdecl yppushproc_null_1_svc(void *, struct svc_req *);
yppushresp_xfr *__cdecl yppushproc_xfrresp_1(void *, CLIENT *);
yppushresp_xfr *__cdecl yppushproc_xfrresp_1_svc(void *, struct svc_req *);
const char *__cdecl zError(int);
void __cdecl zeroU64(U64 *);
uLong zlibCompileFlags(void);
const char *zlibVersion(void);
FILE *__cdecl zopen(const char *, const char *, int);
MACRO_acs acs_chars_index;
MACRO_asn1 asn1_err_base;
__ns_cert_types cert_t_oid;
__ns_cert_types cert_t_pgp;
__ns_cert_types cert_t_pkix;
__ns_cert_types cert_t_spki;
__ns_cert_types cert_t_url;
MACRO_clock clock_MSG_COUNT;
MACRO_priv_MSG_COUNT clock_priv_MSG_COUNT;
MACRO_clock clock_reply_MSG_COUNT;
MACRO_emask code_emask;
MACRO_control control_character_bit;
MACRO_control control_character_threshold;
MACRO_darwin darwin;
MACRO_darwin10 darwin10;
MACRO_darwin11 darwin11;
$81EAA969F6CC11E48BC03187F305DA8C dbdLAST;
$81EAA969F6CC11E48BC03187F305DA8C dbdTIC;
$2EA0513515F7563CFBB6420CCE575C9E dot3ChipSetAMD7990;
$2EA0513515F7563CFBB6420CCE575C9E dot3ChipSetAMD79900;
$2EA0513515F7563CFBB6420CCE575C9E dot3ChipSetAMD79C940;
$D034DF41D4B9D2189D2EB2EA4C611CD6 dot3ChipSetDigitalDC21040;
$D034DF41D4B9D2189D2EB2EA4C611CD6 dot3ChipSetDigitalDC21041;
$D034DF41D4B9D2189D2EB2EA4C611CD6 dot3ChipSetDigitalDC21140;
$D034DF41D4B9D2189D2EB2EA4C611CD6 dot3ChipSetDigitalDC21140A;
$D034DF41D4B9D2189D2EB2EA4C611CD6 dot3ChipSetDigitalDC21142;
$35D4575BDD269CB2C114416BAA7558BD dot3ChipSetFujitsu86950;
$A0887B53835153F1EDF9F781696CAC39 dot3ChipSetIntel82557;
$A0887B53835153F1EDF9F781696CAC39 dot3ChipSetIntel82586;
$A0887B53835153F1EDF9F781696CAC39 dot3ChipSetIntel82596;
$955A79D8B36BA02C2AC93EA67E94FC4E dot3ChipSetNational8390;
$955A79D8B36BA02C2AC93EA67E94FC4E dot3ChipSetNationalSonic;
$C3D2D4EDCF7C6B2D868D1D9CA16C55C6 dot3ChipSetWesternDigital83C690;
$C3D2D4EDCF7C6B2D868D1D9CA16C55C6 dot3ChipSetWesternDigital83C790;
dot3Vendors dot3VendorAMD;
dot3Vendors dot3VendorDigital;
dot3Vendors dot3VendorFujitsu;
dot3Vendors dot3VendorIntel;
dot3Vendors dot3VendorNational;
dot3Vendors dot3VendorWesternDigital;
$003F63A829E52477BDB4080710A1139D endorder;
MACRO_err err_dipc;
MACRO_err err_ipc;
MACRO_err err_ipc_compat;
MACRO_err err_kern;
MACRO_err err_local;
MACRO_err err_mach_ipc;
MACRO_err err_max_system;
MACRO_err err_server;
MACRO_err err_us;
MACRO_exc exc_MSG_COUNT;
MACRO_bool false;
fsh_access fsa_NONE;
fsh_access fsa_R;
fsh_access fsa_RW;
fsh_access fsa_W;
fsh_mode fsm_DN;
fsh_mode fsm_DR;
fsh_mode fsm_DRW;
fsh_mode fsm_DW;
MACRO_priv_MSG_COUNT host_priv_MSG_COUNT;
MACRO_MSG_COUNT host_security_MSG_COUNT;
MACRO_i386 i386_EXCEPTION_STATE;
MACRO_i386 i386_FLOAT_STATE;
MACRO_i386 i386_THREAD_STATE;
MACRO_k524 k524_err_base;
$09E147D3D15D65BE8A2EAFBAEB46AC86 kAUBadParamErr;
$09E147D3D15D65BE8A2EAFBAEB46AC86 kAUCloseErr;
$09E147D3D15D65BE8A2EAFBAEB46AC86 kAULastErr;
$09E147D3D15D65BE8A2EAFBAEB46AC86 kAUMakeReturnTokErr;
$09E147D3D15D65BE8A2EAFBAEB46AC86 kAUMakeSubjectTokErr;
$09E147D3D15D65BE8A2EAFBAEB46AC86 kAUMakeTextTokErr;
$09E147D3D15D65BE8A2EAFBAEB46AC86 kAUNoErr;
$09E147D3D15D65BE8A2EAFBAEB46AC86 kAUOpenErr;
$09E147D3D15D65BE8A2EAFBAEB46AC86 kAUStatErr;
$09E147D3D15D65BE8A2EAFBAEB46AC86 kAUSysctlErr;
$09E147D3D15D65BE8A2EAFBAEB46AC86 kAUWriteCallerTokErr;
$09E147D3D15D65BE8A2EAFBAEB46AC86 kAUWriteReturnTokErr;
$09E147D3D15D65BE8A2EAFBAEB46AC86 kAUWriteSubjectTokErr;
$1FDFCDB6B16318BF0B312BA6FA177D60 kBTBadCloseMask;
$1FDFCDB6B16318BF0B312BA6FA177D60 kBTBigKeysMask;
$1FB0C3C05C839538DC046EE3FB85DDAE kBTHeaderNode;
$1FB0C3C05C839538DC046EE3FB85DDAE kBTIndexNode;
$1FB0C3C05C839538DC046EE3FB85DDAE kBTLeafNode;
$1FB0C3C05C839538DC046EE3FB85DDAE kBTMapNode;
$1FDFCDB6B16318BF0B312BA6FA177D60 kBTVariableIndexKeysMask;
$61FDFA1F505666F1AE44654F634BAE72 kDNSServiceClass_IN;
$120AC332EBC18F2A4396A3C657EB4314 kDNSServiceDiscoveryAlreadyRegistered;
$120AC332EBC18F2A4396A3C657EB4314 kDNSServiceDiscoveryBadFlagsErr;
$120AC332EBC18F2A4396A3C657EB4314 kDNSServiceDiscoveryBadParamErr;
$120AC332EBC18F2A4396A3C657EB4314 kDNSServiceDiscoveryBadReferenceErr;
$120AC332EBC18F2A4396A3C657EB4314 kDNSServiceDiscoveryBadStateErr;
$120AC332EBC18F2A4396A3C657EB4314 kDNSServiceDiscoveryInvalid;
$120AC332EBC18F2A4396A3C657EB4314 kDNSServiceDiscoveryMemFree;
$E9C6ABAFEE51821EC034C6B74D5B344E kDNSServiceDiscoveryMoreRepliesImmediately;
$120AC332EBC18F2A4396A3C657EB4314 kDNSServiceDiscoveryNameConflict;
$120AC332EBC18F2A4396A3C657EB4314 kDNSServiceDiscoveryNoCache;
$120AC332EBC18F2A4396A3C657EB4314 kDNSServiceDiscoveryNoError;
$E9C6ABAFEE51821EC034C6B74D5B344E kDNSServiceDiscoveryNoFlags;
$120AC332EBC18F2A4396A3C657EB4314 kDNSServiceDiscoveryNoMemoryErr;
$120AC332EBC18F2A4396A3C657EB4314 kDNSServiceDiscoveryNoSuchNameErr;
$120AC332EBC18F2A4396A3C657EB4314 kDNSServiceDiscoveryNotInitializedErr;
$120AC332EBC18F2A4396A3C657EB4314 kDNSServiceDiscoveryUnknownErr;
$120AC332EBC18F2A4396A3C657EB4314 kDNSServiceDiscoveryUnsupportedErr;
$120AC332EBC18F2A4396A3C657EB4314 kDNSServiceDiscoveryWaiting;
$15BD65DF0A8CF1C1FCC2C1B4CC004B54 kDNSServiceErr_AlreadyRegistered;
$15BD65DF0A8CF1C1FCC2C1B4CC004B54 kDNSServiceErr_BadFlags;
$15BD65DF0A8CF1C1FCC2C1B4CC004B54 kDNSServiceErr_BadInterfaceIndex;
$15BD65DF0A8CF1C1FCC2C1B4CC004B54 kDNSServiceErr_BadKey;
$15BD65DF0A8CF1C1FCC2C1B4CC004B54 kDNSServiceErr_BadParam;
$15BD65DF0A8CF1C1FCC2C1B4CC004B54 kDNSServiceErr_BadReference;
$15BD65DF0A8CF1C1FCC2C1B4CC004B54 kDNSServiceErr_BadSig;
$15BD65DF0A8CF1C1FCC2C1B4CC004B54 kDNSServiceErr_BadState;
$15BD65DF0A8CF1C1FCC2C1B4CC004B54 kDNSServiceErr_BadTime;
$15BD65DF0A8CF1C1FCC2C1B4CC004B54 kDNSServiceErr_DoubleNAT;
$15BD65DF0A8CF1C1FCC2C1B4CC004B54 kDNSServiceErr_Firewall;
$15BD65DF0A8CF1C1FCC2C1B4CC004B54 kDNSServiceErr_Incompatible;
$15BD65DF0A8CF1C1FCC2C1B4CC004B54 kDNSServiceErr_Invalid;
$15BD65DF0A8CF1C1FCC2C1B4CC004B54 kDNSServiceErr_NATPortMappingDisabled;
$15BD65DF0A8CF1C1FCC2C1B4CC004B54 kDNSServiceErr_NATPortMappingUnsupported;
$15BD65DF0A8CF1C1FCC2C1B4CC004B54 kDNSServiceErr_NATTraversal;
$15BD65DF0A8CF1C1FCC2C1B4CC004B54 kDNSServiceErr_NameConflict;
$15BD65DF0A8CF1C1FCC2C1B4CC004B54 kDNSServiceErr_NoAuth;
$15BD65DF0A8CF1C1FCC2C1B4CC004B54 kDNSServiceErr_NoError;
$15BD65DF0A8CF1C1FCC2C1B4CC004B54 kDNSServiceErr_NoMemory;
$15BD65DF0A8CF1C1FCC2C1B4CC004B54 kDNSServiceErr_NoRouter;
$15BD65DF0A8CF1C1FCC2C1B4CC004B54 kDNSServiceErr_NoSuchKey;
$15BD65DF0A8CF1C1FCC2C1B4CC004B54 kDNSServiceErr_NoSuchName;
$15BD65DF0A8CF1C1FCC2C1B4CC004B54 kDNSServiceErr_NoSuchRecord;
$15BD65DF0A8CF1C1FCC2C1B4CC004B54 kDNSServiceErr_NotInitialized;
$15BD65DF0A8CF1C1FCC2C1B4CC004B54 kDNSServiceErr_PollingMode;
$15BD65DF0A8CF1C1FCC2C1B4CC004B54 kDNSServiceErr_Refused;
$15BD65DF0A8CF1C1FCC2C1B4CC004B54 kDNSServiceErr_ServiceNotRunning;
$15BD65DF0A8CF1C1FCC2C1B4CC004B54 kDNSServiceErr_Timeout;
$15BD65DF0A8CF1C1FCC2C1B4CC004B54 kDNSServiceErr_Transient;
$15BD65DF0A8CF1C1FCC2C1B4CC004B54 kDNSServiceErr_Unknown;
$15BD65DF0A8CF1C1FCC2C1B4CC004B54 kDNSServiceErr_Unsupported;
$283BE608AB49AEC9A9CA8DA02D1A1601 kDNSServiceFlagsAdd;
$283BE608AB49AEC9A9CA8DA02D1A1601 kDNSServiceFlagsAllowRemoteQuery;
$283BE608AB49AEC9A9CA8DA02D1A1601 kDNSServiceFlagsBrowseDomains;
$283BE608AB49AEC9A9CA8DA02D1A1601 kDNSServiceFlagsDefault;
$283BE608AB49AEC9A9CA8DA02D1A1601 kDNSServiceFlagsForce;
$283BE608AB49AEC9A9CA8DA02D1A1601 kDNSServiceFlagsForceMulticast;
$283BE608AB49AEC9A9CA8DA02D1A1601 kDNSServiceFlagsIncludeP2P;
$283BE608AB49AEC9A9CA8DA02D1A1601 kDNSServiceFlagsLongLivedQuery;
$283BE608AB49AEC9A9CA8DA02D1A1601 kDNSServiceFlagsMoreComing;
$283BE608AB49AEC9A9CA8DA02D1A1601 kDNSServiceFlagsNoAutoRename;
$283BE608AB49AEC9A9CA8DA02D1A1601 kDNSServiceFlagsNonBrowsable;
$283BE608AB49AEC9A9CA8DA02D1A1601 kDNSServiceFlagsRegistrationDomains;
$283BE608AB49AEC9A9CA8DA02D1A1601 kDNSServiceFlagsReturnIntermediates;
$283BE608AB49AEC9A9CA8DA02D1A1601 kDNSServiceFlagsShareConnection;
$283BE608AB49AEC9A9CA8DA02D1A1601 kDNSServiceFlagsShared;
$283BE608AB49AEC9A9CA8DA02D1A1601 kDNSServiceFlagsSuppressUnusable;
$283BE608AB49AEC9A9CA8DA02D1A1601 kDNSServiceFlagsTimeout;
$283BE608AB49AEC9A9CA8DA02D1A1601 kDNSServiceFlagsUnique;
$283BE608AB49AEC9A9CA8DA02D1A1601 kDNSServiceFlagsWakeOnResolve;
MACRO_kDNSServiceInterfaceIndexAny kDNSServiceInterfaceIndexAny;
MACRO_kDNSServiceInterfaceIndexAny kDNSServiceInterfaceIndexLocalOnly;
MACRO_kDNSServiceInterfaceIndexP2P kDNSServiceInterfaceIndexP2P;
MACRO_kDNSServiceInterfaceIndexUnicast kDNSServiceInterfaceIndexUnicast;
MACRO_kDNSServiceMaxDomainName kDNSServiceMaxDomainName;
MACRO_kDNSServiceMaxServiceName kDNSServiceMaxServiceName;
$6B91EF07066D7C63AE6C8DC2E4246264 kDNSServiceProtocol_IPv4;
$6B91EF07066D7C63AE6C8DC2E4246264 kDNSServiceProtocol_IPv6;
$6B91EF07066D7C63AE6C8DC2E4246264 kDNSServiceProtocol_TCP;
$6B91EF07066D7C63AE6C8DC2E4246264 kDNSServiceProtocol_UDP;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_A;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_A6;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_AAAA;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_AFSDB;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_ANY;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_APL;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_ATMA;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_AXFR;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_CERT;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_CNAME;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_DHCID;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_DNAME;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_DNSKEY;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_DS;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_EID;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_GID;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_GPOS;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_HINFO;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_HIP;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_IPSECKEY;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_ISDN;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_IXFR;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_KEY;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_KX;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_LOC;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_MAILA;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_MAILB;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_MB;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_MD;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_MF;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_MG;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_MINFO;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_MR;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_MX;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_NAPTR;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_NIMLOC;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_NS;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_NSAP;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_NSAP_PTR;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_NSEC;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_NSEC3;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_NSEC3PARAM;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_NULL;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_NXT;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_OPT;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_PTR;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_PX;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_RP;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_RRSIG;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_RT;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_SIG;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_SINK;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_SOA;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_SPF;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_SRV;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_SSHFP;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_TKEY;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_TSIG;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_TXT;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_UID;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_UINFO;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_UNSPEC;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_WKS;
$F8685D9A6F07534FD5C3F02CB40ABFB2 kDNSServiceType_X25;
$1FB9CAD4792414AA5B71A295737B2862 kDyldSharedCacheTypeDevelopment;
$1FB9CAD4792414AA5B71A295737B2862 kDyldSharedCacheTypeProduction;
$FF33C0E81AF30F09B11252A739DC6DDA kFSKMountVersion;
$77C1F6ECCA22552EA6FDBBFC93F817BE kHFSAllocationFileID;
$77C1F6ECCA22552EA6FDBBFC93F817BE kHFSAttributeDataFileID;
$77C1F6ECCA22552EA6FDBBFC93F817BE kHFSAttributesFileID;
$77C1F6ECCA22552EA6FDBBFC93F817BE kHFSBadBlockFileID;
$8C79ED20FC2D021B4CE653A1AD218746 kHFSBinaryCompare;
$77C1F6ECCA22552EA6FDBBFC93F817BE kHFSBogusExtentFileID;
$09DE316CB93062A5C173A1063676BE3E kHFSBootVolumeInconsistentBit;
$09DE316CB93062A5C173A1063676BE3E kHFSBootVolumeInconsistentMask;
$8C79ED20FC2D021B4CE653A1AD218746 kHFSCaseFolding;
$77C1F6ECCA22552EA6FDBBFC93F817BE kHFSCatalogFileID;
$1847E82C722A14F5F43D3B5EFF380B36 kHFSCatalogKeyMaximumLength;
$1847E82C722A14F5F43D3B5EFF380B36 kHFSCatalogKeyMinimumLength;
$09DE316CB93062A5C173A1063676BE3E kHFSCatalogNodeIDsReusedBit;
$09DE316CB93062A5C173A1063676BE3E kHFSCatalogNodeIDsReusedMask;
$09DE316CB93062A5C173A1063676BE3E kHFSContentProtectionBit;
$09DE316CB93062A5C173A1063676BE3E kHFSContentProtectionMask;
$F37E133A365EB9F6FA66643137085251 kHFSExtentDensity;
$1847E82C722A14F5F43D3B5EFF380B36 kHFSExtentKeyMaximumLength;
$77C1F6ECCA22552EA6FDBBFC93F817BE kHFSExtentsFileID;
$BB5A96A2CE5D6B27726B421C0566B799 kHFSFileLockedBit;
$BB5A96A2CE5D6B27726B421C0566B799 kHFSFileLockedMask;
$43AF380ED1E5C6639BF29287A0048170 kHFSFileRecord;
$43AF380ED1E5C6639BF29287A0048170 kHFSFileThreadRecord;
$77C1F6ECCA22552EA6FDBBFC93F817BE kHFSFirstUserCatalogNodeID;
$43AF380ED1E5C6639BF29287A0048170 kHFSFolderRecord;
$43AF380ED1E5C6639BF29287A0048170 kHFSFolderThreadRecord;
$BB5A96A2CE5D6B27726B421C0566B799 kHFSHasAttributesBit;
$BB5A96A2CE5D6B27726B421C0566B799 kHFSHasAttributesMask;
$BB5A96A2CE5D6B27726B421C0566B799 kHFSHasChildLinkBit;
$BB5A96A2CE5D6B27726B421C0566B799 kHFSHasChildLinkMask;
$BB5A96A2CE5D6B27726B421C0566B799 kHFSHasDateAddedBit;
$BB5A96A2CE5D6B27726B421C0566B799 kHFSHasDateAddedMask;
$BB5A96A2CE5D6B27726B421C0566B799 kHFSHasFolderCountBit;
$BB5A96A2CE5D6B27726B421C0566B799 kHFSHasFolderCountMask;
$BB5A96A2CE5D6B27726B421C0566B799 kHFSHasLinkChainBit;
$BB5A96A2CE5D6B27726B421C0566B799 kHFSHasLinkChainMask;
$BB5A96A2CE5D6B27726B421C0566B799 kHFSHasSecurityBit;
$BB5A96A2CE5D6B27726B421C0566B799 kHFSHasSecurityMask;
$FF33C0E81AF30F09B11252A739DC6DDA kHFSJMountVersion;
$09DE316CB93062A5C173A1063676BE3E kHFSMDBAttributesMask;
$DE06055EB230CD568A22B7F3A8A630B2 kHFSMaxAttrNameLen;
$ACDB03B0D9D598C0F761C4B16B3D1CB5 kHFSMaxFileNameChars;
$ACDB03B0D9D598C0F761C4B16B3D1CB5 kHFSMaxVolumeNameChars;
$44412BD0CE14AFC237A6D071851322F1 kHFSPlusAttrExtents;
$44412BD0CE14AFC237A6D071851322F1 kHFSPlusAttrForkData;
$44412BD0CE14AFC237A6D071851322F1 kHFSPlusAttrInlineData;
$1847E82C722A14F5F43D3B5EFF380B36 kHFSPlusAttrMinNodeSize;
$1847E82C722A14F5F43D3B5EFF380B36 kHFSPlusCatalogKeyMaximumLength;
$1847E82C722A14F5F43D3B5EFF380B36 kHFSPlusCatalogKeyMinimumLength;
$1847E82C722A14F5F43D3B5EFF380B36 kHFSPlusCatalogMinNodeSize;
$9B247B4FB8AF703C9CE314B5E47E50E3 kHFSPlusCreator;
$F37E133A365EB9F6FA66643137085251 kHFSPlusExtentDensity;
$1847E82C722A14F5F43D3B5EFF380B36 kHFSPlusExtentKeyMaximumLength;
$1847E82C722A14F5F43D3B5EFF380B36 kHFSPlusExtentMinNodeSize;
$43AF380ED1E5C6639BF29287A0048170 kHFSPlusFileRecord;
$43AF380ED1E5C6639BF29287A0048170 kHFSPlusFileThreadRecord;
$43AF380ED1E5C6639BF29287A0048170 kHFSPlusFolderRecord;
$43AF380ED1E5C6639BF29287A0048170 kHFSPlusFolderThreadRecord;
$ACDB03B0D9D598C0F761C4B16B3D1CB5 kHFSPlusMaxFileNameChars;
$FF33C0E81AF30F09B11252A739DC6DDA kHFSPlusMountVersion;
$FF33C0E81AF30F09B11252A739DC6DDA kHFSPlusSigWord;
$FF33C0E81AF30F09B11252A739DC6DDA kHFSPlusVersion;
$77C1F6ECCA22552EA6FDBBFC93F817BE kHFSRepairCatalogFileID;
$77C1F6ECCA22552EA6FDBBFC93F817BE kHFSRootFolderID;
$77C1F6ECCA22552EA6FDBBFC93F817BE kHFSRootParentID;
$FF33C0E81AF30F09B11252A739DC6DDA kHFSSigWord;
$77C1F6ECCA22552EA6FDBBFC93F817BE kHFSStartupFileID;
$BB5A96A2CE5D6B27726B421C0566B799 kHFSThreadExistsBit;
$BB5A96A2CE5D6B27726B421C0566B799 kHFSThreadExistsMask;
$09DE316CB93062A5C173A1063676BE3E kHFSUnusedNodeFixBit;
$09DE316CB93062A5C173A1063676BE3E kHFSUnusedNodeFixMask;
$36BD9AB06F2ACF31462F8B03D46184A5 kHFSUnusedNodesFixDate;
$09DE316CB93062A5C173A1063676BE3E kHFSVolumeHardwareLockBit;
$09DE316CB93062A5C173A1063676BE3E kHFSVolumeHardwareLockMask;
$09DE316CB93062A5C173A1063676BE3E kHFSVolumeInconsistentBit;
$09DE316CB93062A5C173A1063676BE3E kHFSVolumeInconsistentMask;
$09DE316CB93062A5C173A1063676BE3E kHFSVolumeJournaledBit;
$09DE316CB93062A5C173A1063676BE3E kHFSVolumeJournaledMask;
$09DE316CB93062A5C173A1063676BE3E kHFSVolumeNoCacheRequiredBit;
$09DE316CB93062A5C173A1063676BE3E kHFSVolumeNoCacheRequiredMask;
$09DE316CB93062A5C173A1063676BE3E kHFSVolumeSoftwareLockBit;
$09DE316CB93062A5C173A1063676BE3E kHFSVolumeSoftwareLockMask;
$09DE316CB93062A5C173A1063676BE3E kHFSVolumeSparedBlocksBit;
$09DE316CB93062A5C173A1063676BE3E kHFSVolumeSparedBlocksMask;
$09DE316CB93062A5C173A1063676BE3E kHFSVolumeUnmountedBit;
$09DE316CB93062A5C173A1063676BE3E kHFSVolumeUnmountedMask;
$FF33C0E81AF30F09B11252A739DC6DDA kHFSXSigWord;
$FF33C0E81AF30F09B11252A739DC6DDA kHFSXVersion;
$9B247B4FB8AF703C9CE314B5E47E50E3 kHardLinkFileType;
$C2DD888A95F2B46A37DA27F4E6CDD186 kJIJournalInFSMask;
$C2DD888A95F2B46A37DA27F4E6CDD186 kJIJournalNeedInitMask;
$C2DD888A95F2B46A37DA27F4E6CDD186 kJIJournalOnOtherDeviceMask;
BTreeKeyLimits kMaxKeyLength;
MACRO_kOSMetaClassDuplicateClass kOSMetaClassDuplicateClass;
MACRO_kOSMetaClassHasInstances kOSMetaClassHasInstances;
MACRO_kOSMetaClassInstNoSuper kOSMetaClassInstNoSuper;
MACRO_kOSMetaClassInternal kOSMetaClassInternal;
MACRO_kOSMetaClassNoDicts kOSMetaClassNoDicts;
MACRO_kOSMetaClassNoInit kOSMetaClassNoInit;
MACRO_kOSMetaClassNoInsKModSet kOSMetaClassNoInsKModSet;
MACRO_kOSMetaClassNoKModSet kOSMetaClassNoKModSet;
MACRO_kOSMetaClassNoKext kOSMetaClassNoKext;
MACRO_kOSMetaClassNoSuper kOSMetaClassNoSuper;
MACRO_kOSMetaClassNoTempData kOSMetaClassNoTempData;
MACRO_kOSReturnSuccess kOSReturnError;
MACRO_kOSReturnSuccess kOSReturnSuccess;
$DF051F384C7337C7B173CB8C15D72E06 kSymLinkCreator;
$DF051F384C7337C7B173CB8C15D72E06 kSymLinkFileType;
MACRO_kdb5 kdb5_err_base;
klm_stats klm_denied;
klm_stats klm_denied_nolocks;
klm_stats klm_granted;
klm_stats klm_working;
MACRO_krb5 krb5_err_base;
MACRO_kv5m kv5m_err_base;
$003F63A829E52477BDB4080710A1139D leaf;
MACRO_MSG_COUNT ledger_MSG_COUNT;
MACRO_MSG_COUNT lock_set_MSG_COUNT;
MACRO_mach mach_host_MSG_COUNT;
MACRO_COUNT mach_port_MSG_COUNT;
MACRO_mach_vm mach_vm_MSG_COUNT;
MACRO_netname netname_MSG_COUNT;
nlm4_stats nlm4_blocked;
nlm4_stats nlm4_deadlck;
nlm4_stats nlm4_denied;
nlm4_stats nlm4_denied_grace_period;
nlm4_stats nlm4_denied_nolocks;
nlm4_stats nlm4_failed;
nlm4_stats nlm4_fbig;
nlm4_stats nlm4_granted;
nlm4_stats nlm4_rofs;
nlm4_stats nlm4_stale_fh;
nlm_stats nlm_blocked;
nlm_stats nlm_deadlck;
nlm_stats nlm_denied;
nlm_stats nlm_denied_grace_period;
nlm_stats nlm_denied_nolocks;
nlm_stats nlm_granted;
$65EE5B278A6A516D307828565C93733B no;
MACRO_argument no_argument;
__ns_class ns_c_2;
__ns_class ns_c_any;
__ns_class ns_c_chaos;
__ns_class ns_c_hs;
__ns_class ns_c_in;
__ns_class ns_c_invalid;
__ns_class ns_c_max;
__ns_class ns_c_none;
__ns_flag ns_f_aa;
__ns_flag ns_f_ad;
__ns_flag ns_f_cd;
__ns_flag ns_f_max;
__ns_flag ns_f_opcode;
__ns_flag ns_f_qr;
__ns_flag ns_f_ra;
__ns_flag ns_f_rcode;
__ns_flag ns_f_rd;
__ns_flag ns_f_tc;
__ns_flag ns_f_z;
__ns_key_types ns_kt_dh;
__ns_key_types ns_kt_dsa;
__ns_key_types ns_kt_private;
__ns_key_types ns_kt_rsa;
__ns_opcode ns_o_iquery;
__ns_opcode ns_o_max;
__ns_opcode ns_o_notify;
__ns_opcode ns_o_query;
__ns_opcode ns_o_status;
__ns_opcode ns_o_update;
__ns_rcode ns_r_badkey;
__ns_rcode ns_r_badsig;
__ns_rcode ns_r_badtime;
__ns_rcode ns_r_badvers;
__ns_rcode ns_r_formerr;
__ns_rcode ns_r_max;
__ns_rcode ns_r_noerror;
__ns_rcode ns_r_notauth;
__ns_rcode ns_r_notimpl;
__ns_rcode ns_r_notzone;
__ns_rcode ns_r_nxdomain;
__ns_rcode ns_r_nxrrset;
__ns_rcode ns_r_refused;
__ns_rcode ns_r_servfail;
__ns_rcode ns_r_yxdomain;
__ns_rcode ns_r_yxrrset;
__ns_sect ns_s_an;
__ns_sect ns_s_ar;
__ns_sect ns_s_max;
__ns_sect ns_s_ns;
__ns_sect ns_s_pr;
__ns_sect ns_s_qd;
__ns_sect ns_s_ud;
__ns_sect ns_s_zn;
__ns_type ns_t_a;
__ns_type ns_t_a6;
__ns_type ns_t_aaaa;
__ns_type ns_t_afsdb;
__ns_type ns_t_any;
__ns_type ns_t_atma;
__ns_type ns_t_axfr;
__ns_type ns_t_cert;
__ns_type ns_t_cname;
__ns_type ns_t_dname;
__ns_type ns_t_eid;
__ns_type ns_t_gpos;
__ns_type ns_t_hinfo;
__ns_type ns_t_invalid;
__ns_type ns_t_isdn;
__ns_type ns_t_ixfr;
__ns_type ns_t_key;
__ns_type ns_t_kx;
__ns_type ns_t_loc;
__ns_type ns_t_maila;
__ns_type ns_t_mailb;
__ns_type ns_t_max;
__ns_type ns_t_mb;
__ns_type ns_t_md;
__ns_type ns_t_mf;
__ns_type ns_t_mg;
__ns_type ns_t_minfo;
__ns_type ns_t_mr;
__ns_type ns_t_mx;
__ns_type ns_t_naptr;
__ns_type ns_t_nimloc;
__ns_type ns_t_ns;
__ns_type ns_t_nsap;
__ns_type ns_t_nsap_ptr;
__ns_type ns_t_null;
__ns_type ns_t_nxt;
__ns_type ns_t_opt;
__ns_type ns_t_ptr;
__ns_type ns_t_px;
__ns_type ns_t_rp;
__ns_type ns_t_rt;
__ns_type ns_t_sig;
__ns_type ns_t_sink;
__ns_type ns_t_soa;
__ns_type ns_t_srv;
__ns_type ns_t_tkey;
__ns_type ns_t_tsig;
__ns_type ns_t_txt;
__ns_type ns_t_wks;
__ns_type ns_t_x25;
__ns_type ns_t_zxfr;
__ns_update_operation ns_uop_add;
__ns_update_operation ns_uop_delete;
__ns_update_operation ns_uop_max;
MACRO_argument optional_argument;
$003F63A829E52477BDB4080710A1139D postorder;
$003F63A829E52477BDB4080710A1139D preorder;
MACRO_MSG_COUNT processor_MSG_COUNT;
MACRO_MSG_COUNT processor_set_MSG_COUNT;
MACRO_prof prof_err_base;
MACRO_pseudo_AF_HDRCMPLT pseudo_AF_HDRCMPLT;
MACRO_pseudo_AF_KEY pseudo_AF_KEY;
MACRO_pseudo_AF_PIP pseudo_AF_PIP;
MACRO_pseudo_AF pseudo_AF_RTIP;
MACRO_pseudo pseudo_AF_XTP;
MACRO_argument required_argument;
$41E859DAAE26B07B8598FA4D4F1DF50A res_9_done;
$41E859DAAE26B07B8598FA4D4F1DF50A res_9_error;
$41E859DAAE26B07B8598FA4D4F1DF50A res_9_goahead;
$41E859DAAE26B07B8598FA4D4F1DF50A res_9_modified;
$41E859DAAE26B07B8598FA4D4F1DF50A res_9_nextns;
sm_res stat_fail;
sm_res stat_succ;
MACRO_emask sub_emask;
MACRO_sub sub_libkern_common;
MACRO_sub sub_libkern_metaclass;
MACRO_sub sub_libkern_reserved;
MACRO_sys sys_libkern;
MACRO_emask system_emask;
MACRO_COUNT task_MSG_COUNT;
MACRO_COUNT thread_act_MSG_COUNT;
MACRO_bool true;
MACRO_ub ub_common_name;
MACRO_ub ub_email_address;
MACRO_ub ub_locality_name;
MACRO_ub ub_name;
MACRO_ub ub_organization_name;
MACRO_ub ub_organization_unit_name;
MACRO_ub ub_state_name;
MACRO_ub ub_title;
MACRO_COUNT vm_map_MSG_COUNT;
$6B111C5B4079F64069FB7C2797D9CE8F vncontrol_readwrite_io_e;
MACRO_x86_AVX x86_AVX_STATE32;
MACRO_x86_AVX x86_AVX_STATE64;
MACRO_x86 x86_DEBUG_STATE;
MACRO_x86 x86_DEBUG_STATE32;
MACRO_x86 x86_DEBUG_STATE64;
MACRO_x86 x86_EXCEPTION_STATE;
MACRO_x86 x86_EXCEPTION_STATE32;
MACRO_x86 x86_EXCEPTION_STATE64;
MACRO_x86 x86_FLOAT_STATE;
MACRO_x86 x86_FLOAT_STATE32;
MACRO_x86 x86_FLOAT_STATE64;
MACRO_x86 x86_THREAD_STATE;
MACRO_x86 x86_THREAD_STATE32;
MACRO_x86 x86_THREAD_STATE64;
MACRO_xEOF xEOF;
$65EE5B278A6A516D307828565C93733B yes;
