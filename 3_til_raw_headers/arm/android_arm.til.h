enum $04002F0402C508C6DCA950313C38753A {ALOOPER_POLL_WAKE = 0xFFFFFFFF,ALOOPER_POLL_CALLBACK = 0xFFFFFFFE,ALOOPER_POLL_TIMEOUT = 0xFFFFFFFD,ALOOPER_POLL_ERROR = 0xFFFFFFFC,};
struct $06CAB5296C39900A9CE51DBF4F560AD6 {int val[2];};
enum $0A08CFE9374656399FFB4BF5C54E6AAD {ASENSOR_STATUS_NO_CONTACT = 0xFFFFFFFF,ASENSOR_STATUS_UNRELIABLE = 0x0,ASENSOR_STATUS_ACCURACY_LOW = 0x1,ASENSOR_STATUS_ACCURACY_MEDIUM = 0x2,ASENSOR_STATUS_ACCURACY_HIGH = 0x3,};
struct $13B8135214ADCA8C5B891879B37639D2 {uint64_t flags;void *reserved_addr;size_t reserved_size;int relro_fd;int library_fd;};
enum $1A098DE8B5FD566F9A5BC3A59F895876 {AMOTION_EVENT_BUTTON_PRIMARY = 0x1,AMOTION_EVENT_BUTTON_SECONDARY = 0x2,AMOTION_EVENT_BUTTON_TERTIARY = 0x4,AMOTION_EVENT_BUTTON_BACK = 0x8,AMOTION_EVENT_BUTTON_FORWARD = 0x10,};
enum $1EEB42125CB8A02EEEDF6B2D5DAB4486 {AMETA_NONE = 0x0,AMETA_ALT_ON = 0x2,AMETA_ALT_LEFT_ON = 0x10,AMETA_ALT_RIGHT_ON = 0x20,AMETA_SHIFT_ON = 0x1,AMETA_SHIFT_LEFT_ON = 0x40,AMETA_SHIFT_RIGHT_ON = 0x80,AMETA_SYM_ON = 0x4,AMETA_FUNCTION_ON = 0x8,AMETA_CTRL_ON = 0x1000,AMETA_CTRL_LEFT_ON = 0x2000,AMETA_CTRL_RIGHT_ON = 0x4000,AMETA_META_ON = 0x10000,AMETA_META_LEFT_ON = 0x20000,AMETA_META_RIGHT_ON = 0x40000,AMETA_CAPS_LOCK_ON = 0x100000,AMETA_NUM_LOCK_ON = 0x200000,AMETA_SCROLL_LOCK_ON = 0x400000,};
enum $294E6B22D2C7C3462ECC5C21F28E2210 {ANDROID_TTS_AUDIO_FORMAT_INVALID = 0xFFFFFFFF,ANDROID_TTS_AUDIO_FORMAT_DEFAULT = 0x0,ANDROID_TTS_AUDIO_FORMAT_PCM_16_BIT = 0x1,ANDROID_TTS_AUDIO_FORMAT_PCM_8_BIT = 0x2,};
enum $2DFCE81C22045DA5588F32BE57F779B3 {ANDROID_TTS_SUCCESS = 0x0,ANDROID_TTS_FAILURE = 0xFFFFFFFF,ANDROID_TTS_FEATURE_UNSUPPORTED = 0xFFFFFFFE,ANDROID_TTS_VALUE_INVALID = 0xFFFFFFFD,ANDROID_TTS_PROPERTY_UNSUPPORTED = 0xFFFFFFFC,ANDROID_TTS_PROPERTY_SIZE_TOO_SMALL = 0xFFFFFFFB,ANDROID_TTS_MISSING_RESOURCES = 0xFFFFFFFA,};
enum $33C3A92DE7424356190637196BFAB2FD {AINPUT_KEYBOARD_TYPE_NONE = 0x0,AINPUT_KEYBOARD_TYPE_NON_ALPHABETIC = 0x1,AINPUT_KEYBOARD_TYPE_ALPHABETIC = 0x2,};
enum $3EDC26D5AD8305513B732BC9206567CE {AMOTION_EVENT_AXIS_X = 0x0,AMOTION_EVENT_AXIS_Y = 0x1,AMOTION_EVENT_AXIS_PRESSURE = 0x2,AMOTION_EVENT_AXIS_SIZE = 0x3,AMOTION_EVENT_AXIS_TOUCH_MAJOR = 0x4,AMOTION_EVENT_AXIS_TOUCH_MINOR = 0x5,AMOTION_EVENT_AXIS_TOOL_MAJOR = 0x6,AMOTION_EVENT_AXIS_TOOL_MINOR = 0x7,AMOTION_EVENT_AXIS_ORIENTATION = 0x8,AMOTION_EVENT_AXIS_VSCROLL = 0x9,AMOTION_EVENT_AXIS_HSCROLL = 0xA,AMOTION_EVENT_AXIS_Z = 0xB,AMOTION_EVENT_AXIS_RX = 0xC,AMOTION_EVENT_AXIS_RY = 0xD,AMOTION_EVENT_AXIS_RZ = 0xE,AMOTION_EVENT_AXIS_HAT_X = 0xF,AMOTION_EVENT_AXIS_HAT_Y = 0x10,AMOTION_EVENT_AXIS_LTRIGGER = 0x11,AMOTION_EVENT_AXIS_RTRIGGER = 0x12,AMOTION_EVENT_AXIS_THROTTLE = 0x13,AMOTION_EVENT_AXIS_RUDDER = 0x14,AMOTION_EVENT_AXIS_WHEEL = 0x15,AMOTION_EVENT_AXIS_GAS = 0x16,AMOTION_EVENT_AXIS_BRAKE = 0x17,AMOTION_EVENT_AXIS_DISTANCE = 0x18,AMOTION_EVENT_AXIS_TILT = 0x19,AMOTION_EVENT_AXIS_GENERIC_1 = 0x20,AMOTION_EVENT_AXIS_GENERIC_2 = 0x21,AMOTION_EVENT_AXIS_GENERIC_3 = 0x22,AMOTION_EVENT_AXIS_GENERIC_4 = 0x23,AMOTION_EVENT_AXIS_GENERIC_5 = 0x24,AMOTION_EVENT_AXIS_GENERIC_6 = 0x25,AMOTION_EVENT_AXIS_GENERIC_7 = 0x26,AMOTION_EVENT_AXIS_GENERIC_8 = 0x27,AMOTION_EVENT_AXIS_GENERIC_9 = 0x28,AMOTION_EVENT_AXIS_GENERIC_10 = 0x29,AMOTION_EVENT_AXIS_GENERIC_11 = 0x2A,AMOTION_EVENT_AXIS_GENERIC_12 = 0x2B,AMOTION_EVENT_AXIS_GENERIC_13 = 0x2C,AMOTION_EVENT_AXIS_GENERIC_14 = 0x2D,AMOTION_EVENT_AXIS_GENERIC_15 = 0x2E,AMOTION_EVENT_AXIS_GENERIC_16 = 0x2F,};
enum $4139C7DF365D5434A7E6C4EAB6785B55 {ANDROID_TTS_LANG_COUNTRY_VAR_AVAILABLE = 0x2,ANDROID_TTS_LANG_COUNTRY_AVAILABLE = 0x1,ANDROID_TTS_LANG_AVAILABLE = 0x0,ANDROID_TTS_LANG_MISSING_DATA = 0xFFFFFFFF,ANDROID_TTS_LANG_NOT_SUPPORTED = 0xFFFFFFFE,};
enum $43465BD039ADFB836688E81ACF130360 {ANATIVEACTIVITY_SHOW_SOFT_INPUT_IMPLICIT = 0x1,ANATIVEACTIVITY_SHOW_SOFT_INPUT_FORCED = 0x2,};
enum $43C70A9F12D4BBD98F9B0F65C539512C {WINDOW_FORMAT_RGBA_8888 = 0x1,WINDOW_FORMAT_RGBX_8888 = 0x2,WINDOW_FORMAT_RGB_565 = 0x4,};
enum $49F8A3275CB8ABD51DE4E72706AE5CC8 {AMOTION_EVENT_ACTION_MASK = 0xFF,AMOTION_EVENT_ACTION_POINTER_INDEX_MASK = 0xFF00,AMOTION_EVENT_ACTION_DOWN = 0x0,AMOTION_EVENT_ACTION_UP = 0x1,AMOTION_EVENT_ACTION_MOVE = 0x2,AMOTION_EVENT_ACTION_CANCEL = 0x3,AMOTION_EVENT_ACTION_OUTSIDE = 0x4,AMOTION_EVENT_ACTION_POINTER_DOWN = 0x5,AMOTION_EVENT_ACTION_POINTER_UP = 0x6,AMOTION_EVENT_ACTION_HOVER_MOVE = 0x7,AMOTION_EVENT_ACTION_SCROLL = 0x8,AMOTION_EVENT_ACTION_HOVER_ENTER = 0x9,AMOTION_EVENT_ACTION_HOVER_EXIT = 0xA,};
enum $6A860F0239D1D54EF2A4CDC8898EA208 : unsigned __int32 {AINPUT_SOURCE_UNKNOWN = 0x0,AINPUT_SOURCE_KEYBOARD = 0x101,AINPUT_SOURCE_DPAD = 0x201,AINPUT_SOURCE_GAMEPAD = 0x401,AINPUT_SOURCE_TOUCHSCREEN = 0x1002,AINPUT_SOURCE_MOUSE = 0x2002,AINPUT_SOURCE_STYLUS = 0x4002,AINPUT_SOURCE_TRACKBALL = 0x10004,AINPUT_SOURCE_TOUCHPAD = 0x100008,AINPUT_SOURCE_TOUCH_NAVIGATION = 0x200000,AINPUT_SOURCE_JOYSTICK = 0x1000010,AINPUT_SOURCE_ANY = 0xFFFFFF00,};
struct $6BD93AD6A320A51794F58DE6EDFB59E6 {void (**preinit_array)(void);void (**init_array)(void);void (**fini_array)(void);};
enum $6CF558C41A0BF1C80174ADD62A6DBE10 {AWINDOW_FLAG_ALLOW_LOCK_WHILE_SCREEN_ON = 0x1,AWINDOW_FLAG_DIM_BEHIND = 0x2,AWINDOW_FLAG_BLUR_BEHIND = 0x4,AWINDOW_FLAG_NOT_FOCUSABLE = 0x8,AWINDOW_FLAG_NOT_TOUCHABLE = 0x10,AWINDOW_FLAG_NOT_TOUCH_MODAL = 0x20,AWINDOW_FLAG_TOUCHABLE_WHEN_WAKING = 0x40,AWINDOW_FLAG_KEEP_SCREEN_ON = 0x80,AWINDOW_FLAG_LAYOUT_IN_SCREEN = 0x100,AWINDOW_FLAG_LAYOUT_NO_LIMITS = 0x200,AWINDOW_FLAG_FULLSCREEN = 0x400,AWINDOW_FLAG_FORCE_NOT_FULLSCREEN = 0x800,AWINDOW_FLAG_DITHER = 0x1000,AWINDOW_FLAG_SECURE = 0x2000,AWINDOW_FLAG_SCALED = 0x4000,AWINDOW_FLAG_IGNORE_CHEEK_PRESSES = 0x8000,AWINDOW_FLAG_LAYOUT_INSET_DECOR = 0x10000,AWINDOW_FLAG_ALT_FOCUSABLE_IM = 0x20000,AWINDOW_FLAG_WATCH_OUTSIDE_TOUCH = 0x40000,AWINDOW_FLAG_SHOW_WHEN_LOCKED = 0x80000,AWINDOW_FLAG_SHOW_WALLPAPER = 0x100000,AWINDOW_FLAG_TURN_SCREEN_ON = 0x200000,AWINDOW_FLAG_DISMISS_KEYGUARD = 0x400000,};
enum $7EC23C51206D55A80D1F276DA8A5980F {ACONFIGURATION_ORIENTATION_ANY = 0x0,ACONFIGURATION_ORIENTATION_PORT = 0x1,ACONFIGURATION_ORIENTATION_LAND = 0x2,ACONFIGURATION_ORIENTATION_SQUARE = 0x3,ACONFIGURATION_TOUCHSCREEN_ANY = 0x0,ACONFIGURATION_TOUCHSCREEN_NOTOUCH = 0x1,ACONFIGURATION_TOUCHSCREEN_STYLUS = 0x2,ACONFIGURATION_TOUCHSCREEN_FINGER = 0x3,ACONFIGURATION_DENSITY_DEFAULT = 0x0,ACONFIGURATION_DENSITY_LOW = 0x78,ACONFIGURATION_DENSITY_MEDIUM = 0xA0,ACONFIGURATION_DENSITY_TV = 0xD5,ACONFIGURATION_DENSITY_HIGH = 0xF0,ACONFIGURATION_DENSITY_XHIGH = 0x140,ACONFIGURATION_DENSITY_XXHIGH = 0x1E0,ACONFIGURATION_DENSITY_XXXHIGH = 0x280,ACONFIGURATION_DENSITY_ANY = 0xFFFE,ACONFIGURATION_DENSITY_NONE = 0xFFFF,ACONFIGURATION_KEYBOARD_ANY = 0x0,ACONFIGURATION_KEYBOARD_NOKEYS = 0x1,ACONFIGURATION_KEYBOARD_QWERTY = 0x2,ACONFIGURATION_KEYBOARD_12KEY = 0x3,ACONFIGURATION_NAVIGATION_ANY = 0x0,ACONFIGURATION_NAVIGATION_NONAV = 0x1,ACONFIGURATION_NAVIGATION_DPAD = 0x2,ACONFIGURATION_NAVIGATION_TRACKBALL = 0x3,ACONFIGURATION_NAVIGATION_WHEEL = 0x4,ACONFIGURATION_KEYSHIDDEN_ANY = 0x0,ACONFIGURATION_KEYSHIDDEN_NO = 0x1,ACONFIGURATION_KEYSHIDDEN_YES = 0x2,ACONFIGURATION_KEYSHIDDEN_SOFT = 0x3,ACONFIGURATION_NAVHIDDEN_ANY = 0x0,ACONFIGURATION_NAVHIDDEN_NO = 0x1,ACONFIGURATION_NAVHIDDEN_YES = 0x2,ACONFIGURATION_SCREENSIZE_ANY = 0x0,ACONFIGURATION_SCREENSIZE_SMALL = 0x1,ACONFIGURATION_SCREENSIZE_NORMAL = 0x2,ACONFIGURATION_SCREENSIZE_LARGE = 0x3,ACONFIGURATION_SCREENSIZE_XLARGE = 0x4,ACONFIGURATION_SCREENLONG_ANY = 0x0,ACONFIGURATION_SCREENLONG_NO = 0x1,ACONFIGURATION_SCREENLONG_YES = 0x2,ACONFIGURATION_UI_MODE_TYPE_ANY = 0x0,ACONFIGURATION_UI_MODE_TYPE_NORMAL = 0x1,ACONFIGURATION_UI_MODE_TYPE_DESK = 0x2,ACONFIGURATION_UI_MODE_TYPE_CAR = 0x3,ACONFIGURATION_UI_MODE_TYPE_TELEVISION = 0x4,ACONFIGURATION_UI_MODE_TYPE_APPLIANCE = 0x5,ACONFIGURATION_UI_MODE_TYPE_WATCH = 0x6,ACONFIGURATION_UI_MODE_NIGHT_ANY = 0x0,ACONFIGURATION_UI_MODE_NIGHT_NO = 0x1,ACONFIGURATION_UI_MODE_NIGHT_YES = 0x2,ACONFIGURATION_SCREEN_WIDTH_DP_ANY = 0x0,ACONFIGURATION_SCREEN_HEIGHT_DP_ANY = 0x0,ACONFIGURATION_SMALLEST_SCREEN_WIDTH_DP_ANY = 0x0,ACONFIGURATION_LAYOUTDIR_ANY = 0x0,ACONFIGURATION_LAYOUTDIR_LTR = 0x1,ACONFIGURATION_LAYOUTDIR_RTL = 0x2,ACONFIGURATION_MCC = 0x1,ACONFIGURATION_MNC = 0x2,ACONFIGURATION_LOCALE = 0x4,ACONFIGURATION_TOUCHSCREEN = 0x8,ACONFIGURATION_KEYBOARD = 0x10,ACONFIGURATION_KEYBOARD_HIDDEN = 0x20,ACONFIGURATION_NAVIGATION = 0x40,ACONFIGURATION_ORIENTATION = 0x80,ACONFIGURATION_DENSITY = 0x100,ACONFIGURATION_SCREEN_SIZE = 0x200,ACONFIGURATION_VERSION = 0x400,ACONFIGURATION_SCREEN_LAYOUT = 0x800,ACONFIGURATION_UI_MODE = 0x1000,ACONFIGURATION_SMALLEST_SCREEN_SIZE = 0x2000,ACONFIGURATION_LAYOUTDIR = 0x4000,ACONFIGURATION_MNC_ZERO = 0xFFFF,};
enum $813B786A03EC45D0D5359DBC0989DB3C {AREPORTING_MODE_CONTINUOUS = 0x0,AREPORTING_MODE_ON_CHANGE = 0x1,AREPORTING_MODE_ONE_SHOT = 0x2,AREPORTING_MODE_SPECIAL_TRIGGER = 0x3,};
struct $82E117BB9FC04C8485243D8E6D5317B0 {android_tts_engine_funcs_t *funcs;};
enum $8391374E526CE51103AADBB5D9199BE1 {AKEYCODE_UNKNOWN = 0x0,AKEYCODE_SOFT_LEFT = 0x1,AKEYCODE_SOFT_RIGHT = 0x2,AKEYCODE_HOME = 0x3,AKEYCODE_BACK = 0x4,AKEYCODE_CALL = 0x5,AKEYCODE_ENDCALL = 0x6,AKEYCODE_0 = 0x7,AKEYCODE_1 = 0x8,AKEYCODE_2 = 0x9,AKEYCODE_3 = 0xA,AKEYCODE_4 = 0xB,AKEYCODE_5 = 0xC,AKEYCODE_6 = 0xD,AKEYCODE_7 = 0xE,AKEYCODE_8 = 0xF,AKEYCODE_9 = 0x10,AKEYCODE_STAR = 0x11,AKEYCODE_POUND = 0x12,AKEYCODE_DPAD_UP = 0x13,AKEYCODE_DPAD_DOWN = 0x14,AKEYCODE_DPAD_LEFT = 0x15,AKEYCODE_DPAD_RIGHT = 0x16,AKEYCODE_DPAD_CENTER = 0x17,AKEYCODE_VOLUME_UP = 0x18,AKEYCODE_VOLUME_DOWN = 0x19,AKEYCODE_POWER = 0x1A,AKEYCODE_CAMERA = 0x1B,AKEYCODE_CLEAR = 0x1C,AKEYCODE_A = 0x1D,AKEYCODE_B = 0x1E,AKEYCODE_C = 0x1F,AKEYCODE_D = 0x20,AKEYCODE_E = 0x21,AKEYCODE_F = 0x22,AKEYCODE_G = 0x23,AKEYCODE_H = 0x24,AKEYCODE_I = 0x25,AKEYCODE_J = 0x26,AKEYCODE_K = 0x27,AKEYCODE_L = 0x28,AKEYCODE_M = 0x29,AKEYCODE_N = 0x2A,AKEYCODE_O = 0x2B,AKEYCODE_P = 0x2C,AKEYCODE_Q = 0x2D,AKEYCODE_R = 0x2E,AKEYCODE_S = 0x2F,AKEYCODE_T = 0x30,AKEYCODE_U = 0x31,AKEYCODE_V = 0x32,AKEYCODE_W = 0x33,AKEYCODE_X = 0x34,AKEYCODE_Y = 0x35,AKEYCODE_Z = 0x36,AKEYCODE_COMMA = 0x37,AKEYCODE_PERIOD = 0x38,AKEYCODE_ALT_LEFT = 0x39,AKEYCODE_ALT_RIGHT = 0x3A,AKEYCODE_SHIFT_LEFT = 0x3B,AKEYCODE_SHIFT_RIGHT = 0x3C,AKEYCODE_TAB = 0x3D,AKEYCODE_SPACE = 0x3E,AKEYCODE_SYM = 0x3F,AKEYCODE_EXPLORER = 0x40,AKEYCODE_ENVELOPE = 0x41,AKEYCODE_ENTER = 0x42,AKEYCODE_DEL = 0x43,AKEYCODE_GRAVE = 0x44,AKEYCODE_MINUS = 0x45,AKEYCODE_EQUALS = 0x46,AKEYCODE_LEFT_BRACKET = 0x47,AKEYCODE_RIGHT_BRACKET = 0x48,AKEYCODE_BACKSLASH = 0x49,AKEYCODE_SEMICOLON = 0x4A,AKEYCODE_APOSTROPHE = 0x4B,AKEYCODE_SLASH = 0x4C,AKEYCODE_AT = 0x4D,AKEYCODE_NUM = 0x4E,AKEYCODE_HEADSETHOOK = 0x4F,AKEYCODE_FOCUS = 0x50,AKEYCODE_PLUS = 0x51,AKEYCODE_MENU = 0x52,AKEYCODE_NOTIFICATION = 0x53,AKEYCODE_SEARCH = 0x54,AKEYCODE_MEDIA_PLAY_PAUSE = 0x55,AKEYCODE_MEDIA_STOP = 0x56,AKEYCODE_MEDIA_NEXT = 0x57,AKEYCODE_MEDIA_PREVIOUS = 0x58,AKEYCODE_MEDIA_REWIND = 0x59,AKEYCODE_MEDIA_FAST_FORWARD = 0x5A,AKEYCODE_MUTE = 0x5B,AKEYCODE_PAGE_UP = 0x5C,AKEYCODE_PAGE_DOWN = 0x5D,AKEYCODE_PICTSYMBOLS = 0x5E,AKEYCODE_SWITCH_CHARSET = 0x5F,AKEYCODE_BUTTON_A = 0x60,AKEYCODE_BUTTON_B = 0x61,AKEYCODE_BUTTON_C = 0x62,AKEYCODE_BUTTON_X = 0x63,AKEYCODE_BUTTON_Y = 0x64,AKEYCODE_BUTTON_Z = 0x65,AKEYCODE_BUTTON_L1 = 0x66,AKEYCODE_BUTTON_R1 = 0x67,AKEYCODE_BUTTON_L2 = 0x68,AKEYCODE_BUTTON_R2 = 0x69,AKEYCODE_BUTTON_THUMBL = 0x6A,AKEYCODE_BUTTON_THUMBR = 0x6B,AKEYCODE_BUTTON_START = 0x6C,AKEYCODE_BUTTON_SELECT = 0x6D,AKEYCODE_BUTTON_MODE = 0x6E,AKEYCODE_ESCAPE = 0x6F,AKEYCODE_FORWARD_DEL = 0x70,AKEYCODE_CTRL_LEFT = 0x71,AKEYCODE_CTRL_RIGHT = 0x72,AKEYCODE_CAPS_LOCK = 0x73,AKEYCODE_SCROLL_LOCK = 0x74,AKEYCODE_META_LEFT = 0x75,AKEYCODE_META_RIGHT = 0x76,AKEYCODE_FUNCTION = 0x77,AKEYCODE_SYSRQ = 0x78,AKEYCODE_BREAK = 0x79,AKEYCODE_MOVE_HOME = 0x7A,AKEYCODE_MOVE_END = 0x7B,AKEYCODE_INSERT = 0x7C,AKEYCODE_FORWARD = 0x7D,AKEYCODE_MEDIA_PLAY = 0x7E,AKEYCODE_MEDIA_PAUSE = 0x7F,AKEYCODE_MEDIA_CLOSE = 0x80,AKEYCODE_MEDIA_EJECT = 0x81,AKEYCODE_MEDIA_RECORD = 0x82,AKEYCODE_F1 = 0x83,AKEYCODE_F2 = 0x84,AKEYCODE_F3 = 0x85,AKEYCODE_F4 = 0x86,AKEYCODE_F5 = 0x87,AKEYCODE_F6 = 0x88,AKEYCODE_F7 = 0x89,AKEYCODE_F8 = 0x8A,AKEYCODE_F9 = 0x8B,AKEYCODE_F10 = 0x8C,AKEYCODE_F11 = 0x8D,AKEYCODE_F12 = 0x8E,AKEYCODE_NUM_LOCK = 0x8F,AKEYCODE_NUMPAD_0 = 0x90,AKEYCODE_NUMPAD_1 = 0x91,AKEYCODE_NUMPAD_2 = 0x92,AKEYCODE_NUMPAD_3 = 0x93,AKEYCODE_NUMPAD_4 = 0x94,AKEYCODE_NUMPAD_5 = 0x95,AKEYCODE_NUMPAD_6 = 0x96,AKEYCODE_NUMPAD_7 = 0x97,AKEYCODE_NUMPAD_8 = 0x98,AKEYCODE_NUMPAD_9 = 0x99,AKEYCODE_NUMPAD_DIVIDE = 0x9A,AKEYCODE_NUMPAD_MULTIPLY = 0x9B,AKEYCODE_NUMPAD_SUBTRACT = 0x9C,AKEYCODE_NUMPAD_ADD = 0x9D,AKEYCODE_NUMPAD_DOT = 0x9E,AKEYCODE_NUMPAD_COMMA = 0x9F,AKEYCODE_NUMPAD_ENTER = 0xA0,AKEYCODE_NUMPAD_EQUALS = 0xA1,AKEYCODE_NUMPAD_LEFT_PAREN = 0xA2,AKEYCODE_NUMPAD_RIGHT_PAREN = 0xA3,AKEYCODE_VOLUME_MUTE = 0xA4,AKEYCODE_INFO = 0xA5,AKEYCODE_CHANNEL_UP = 0xA6,AKEYCODE_CHANNEL_DOWN = 0xA7,AKEYCODE_ZOOM_IN = 0xA8,AKEYCODE_ZOOM_OUT = 0xA9,AKEYCODE_TV = 0xAA,AKEYCODE_WINDOW = 0xAB,AKEYCODE_GUIDE = 0xAC,AKEYCODE_DVR = 0xAD,AKEYCODE_BOOKMARK = 0xAE,AKEYCODE_CAPTIONS = 0xAF,AKEYCODE_SETTINGS = 0xB0,AKEYCODE_TV_POWER = 0xB1,AKEYCODE_TV_INPUT = 0xB2,AKEYCODE_STB_POWER = 0xB3,AKEYCODE_STB_INPUT = 0xB4,AKEYCODE_AVR_POWER = 0xB5,AKEYCODE_AVR_INPUT = 0xB6,AKEYCODE_PROG_RED = 0xB7,AKEYCODE_PROG_GREEN = 0xB8,AKEYCODE_PROG_YELLOW = 0xB9,AKEYCODE_PROG_BLUE = 0xBA,AKEYCODE_APP_SWITCH = 0xBB,AKEYCODE_BUTTON_1 = 0xBC,AKEYCODE_BUTTON_2 = 0xBD,AKEYCODE_BUTTON_3 = 0xBE,AKEYCODE_BUTTON_4 = 0xBF,AKEYCODE_BUTTON_5 = 0xC0,AKEYCODE_BUTTON_6 = 0xC1,AKEYCODE_BUTTON_7 = 0xC2,AKEYCODE_BUTTON_8 = 0xC3,AKEYCODE_BUTTON_9 = 0xC4,AKEYCODE_BUTTON_10 = 0xC5,AKEYCODE_BUTTON_11 = 0xC6,AKEYCODE_BUTTON_12 = 0xC7,AKEYCODE_BUTTON_13 = 0xC8,AKEYCODE_BUTTON_14 = 0xC9,AKEYCODE_BUTTON_15 = 0xCA,AKEYCODE_BUTTON_16 = 0xCB,AKEYCODE_LANGUAGE_SWITCH = 0xCC,AKEYCODE_MANNER_MODE = 0xCD,AKEYCODE_3D_MODE = 0xCE,AKEYCODE_CONTACTS = 0xCF,AKEYCODE_CALENDAR = 0xD0,AKEYCODE_MUSIC = 0xD1,AKEYCODE_CALCULATOR = 0xD2,AKEYCODE_ZENKAKU_HANKAKU = 0xD3,AKEYCODE_EISU = 0xD4,AKEYCODE_MUHENKAN = 0xD5,AKEYCODE_HENKAN = 0xD6,AKEYCODE_KATAKANA_HIRAGANA = 0xD7,AKEYCODE_YEN = 0xD8,AKEYCODE_RO = 0xD9,AKEYCODE_KANA = 0xDA,AKEYCODE_ASSIST = 0xDB,AKEYCODE_BRIGHTNESS_DOWN = 0xDC,AKEYCODE_BRIGHTNESS_UP = 0xDD,AKEYCODE_MEDIA_AUDIO_TRACK = 0xDE,AKEYCODE_SLEEP = 0xDF,AKEYCODE_WAKEUP = 0xE0,AKEYCODE_PAIRING = 0xE1,AKEYCODE_MEDIA_TOP_MENU = 0xE2,AKEYCODE_11 = 0xE3,AKEYCODE_12 = 0xE4,AKEYCODE_LAST_CHANNEL = 0xE5,AKEYCODE_TV_DATA_SERVICE = 0xE6,AKEYCODE_VOICE_ASSIST = 0xE7,AKEYCODE_TV_RADIO_SERVICE = 0xE8,AKEYCODE_TV_TELETEXT = 0xE9,AKEYCODE_TV_NUMBER_ENTRY = 0xEA,AKEYCODE_TV_TERRESTRIAL_ANALOG = 0xEB,AKEYCODE_TV_TERRESTRIAL_DIGITAL = 0xEC,AKEYCODE_TV_SATELLITE = 0xED,AKEYCODE_TV_SATELLITE_BS = 0xEE,AKEYCODE_TV_SATELLITE_CS = 0xEF,AKEYCODE_TV_SATELLITE_SERVICE = 0xF0,AKEYCODE_TV_NETWORK = 0xF1,AKEYCODE_TV_ANTENNA_CABLE = 0xF2,AKEYCODE_TV_INPUT_HDMI_1 = 0xF3,AKEYCODE_TV_INPUT_HDMI_2 = 0xF4,AKEYCODE_TV_INPUT_HDMI_3 = 0xF5,AKEYCODE_TV_INPUT_HDMI_4 = 0xF6,AKEYCODE_TV_INPUT_COMPOSITE_1 = 0xF7,AKEYCODE_TV_INPUT_COMPOSITE_2 = 0xF8,AKEYCODE_TV_INPUT_COMPONENT_1 = 0xF9,AKEYCODE_TV_INPUT_COMPONENT_2 = 0xFA,AKEYCODE_TV_INPUT_VGA_1 = 0xFB,AKEYCODE_TV_AUDIO_DESCRIPTION = 0xFC,AKEYCODE_TV_AUDIO_DESCRIPTION_MIX_UP = 0xFD,AKEYCODE_TV_AUDIO_DESCRIPTION_MIX_DOWN = 0xFE,AKEYCODE_TV_ZOOM_MODE = 0xFF,AKEYCODE_TV_CONTENTS_MENU = 0x100,AKEYCODE_TV_MEDIA_CONTEXT_MENU = 0x101,AKEYCODE_TV_TIMER_PROGRAMMING = 0x102,AKEYCODE_HELP = 0x103,};
enum $84DF78F24C88ED534F04DAB1618088EB {AASSET_MODE_UNKNOWN = 0x0,AASSET_MODE_RANDOM = 0x1,AASSET_MODE_STREAMING = 0x2,AASSET_MODE_BUFFER = 0x3,};
enum $89669B75FFFA2E86F49C9A03322F5AA7 {ANDROID_TTS_CALLBACK_HALT = 0x0,ANDROID_TTS_CALLBACK_CONTINUE = 0x1,};
enum $8FD9CD2309289E94A8F9FFD043EF0AFD {AINPUT_MOTION_RANGE_X = 0x0,AINPUT_MOTION_RANGE_Y = 0x1,AINPUT_MOTION_RANGE_PRESSURE = 0x2,AINPUT_MOTION_RANGE_SIZE = 0x3,AINPUT_MOTION_RANGE_TOUCH_MAJOR = 0x4,AINPUT_MOTION_RANGE_TOUCH_MINOR = 0x5,AINPUT_MOTION_RANGE_TOOL_MAJOR = 0x6,AINPUT_MOTION_RANGE_TOOL_MINOR = 0x7,AINPUT_MOTION_RANGE_ORIENTATION = 0x8,};
enum $95883D125DB13DB1D57A7284B9B24EE2 {AMOTION_EVENT_EDGE_FLAG_NONE = 0x0,AMOTION_EVENT_EDGE_FLAG_TOP = 0x1,AMOTION_EVENT_EDGE_FLAG_BOTTOM = 0x2,AMOTION_EVENT_EDGE_FLAG_LEFT = 0x4,AMOTION_EVENT_EDGE_FLAG_RIGHT = 0x8,};
struct $979FA3DE6ECCF956231BFC297C4278E6 {int quot;int rem;};
struct $9A42493D2BEF7F5422B539727BDDB5E2 {uint32_t width;uint32_t height;uint32_t stride;int32_t format;uint32_t flags;};
enum $A3DE050FA3F4C661374A5EDCE5929D78 {ANATIVEACTIVITY_HIDE_SOFT_INPUT_IMPLICIT_ONLY = 0x1,ANATIVEACTIVITY_HIDE_SOFT_INPUT_NOT_ALWAYS = 0x2,};
enum $A57BE63AFA9E7C22F20D0CC4DC1F0295 {AKEY_EVENT_FLAG_WOKE_HERE = 0x1,AKEY_EVENT_FLAG_SOFT_KEYBOARD = 0x2,AKEY_EVENT_FLAG_KEEP_TOUCH_MODE = 0x4,AKEY_EVENT_FLAG_FROM_SYSTEM = 0x8,AKEY_EVENT_FLAG_EDITOR_ACTION = 0x10,AKEY_EVENT_FLAG_CANCELED = 0x20,AKEY_EVENT_FLAG_VIRTUAL_HARD_KEY = 0x40,AKEY_EVENT_FLAG_LONG_PRESS = 0x80,AKEY_EVENT_FLAG_CANCELED_LONG_PRESS = 0x100,AKEY_EVENT_FLAG_TRACKING = 0x200,AKEY_EVENT_FLAG_FALLBACK = 0x400,};
enum $A66A407457C3F86F0D5D01263F39DB8B {ANDROID_TTS_SYNTH_DONE = 0x0,ANDROID_TTS_SYNTH_PENDING = 0x1,};
struct $AC1F0727205AA235F31FA7E4FBAB6931 {__int64 quot;__int64 rem;};
enum $AD64F63EA24B69117AF36AB567679717 {AINPUT_SOURCE_CLASS_MASK = 0xFF,AINPUT_SOURCE_CLASS_NONE = 0x0,AINPUT_SOURCE_CLASS_BUTTON = 0x1,AINPUT_SOURCE_CLASS_POINTER = 0x2,AINPUT_SOURCE_CLASS_NAVIGATION = 0x4,AINPUT_SOURCE_CLASS_POSITION = 0x8,AINPUT_SOURCE_CLASS_JOYSTICK = 0x10,};
enum $B343988F95AB2F1D8FA49E95A93C30CE {ALOOPER_PREPARE_ALLOW_NON_CALLBACKS = 0x1,};
enum $B34E6FF94D606ADE7B24EB7AB8A02C61 {SHUT_RD = 0x0,SHUT_WR = 0x1,SHUT_RDWR = 0x2,};
enum $B82DD008134C41CE6745BEDF33E8A9EF {AOBBINFO_OVERLAY = 0x1,};
enum $B8EBEDC710F2D2D4BF6562A77E339AD2 {AKEY_EVENT_ACTION_DOWN = 0x0,AKEY_EVENT_ACTION_UP = 0x1,AKEY_EVENT_ACTION_MULTIPLE = 0x2,};
enum $BF3B02121B7CEC921D6E601970F9B0F9 {ASENSOR_TYPE_ACCELEROMETER = 0x1,ASENSOR_TYPE_MAGNETIC_FIELD = 0x2,ASENSOR_TYPE_GYROSCOPE = 0x4,ASENSOR_TYPE_LIGHT = 0x5,ASENSOR_TYPE_PROXIMITY = 0x8,};
enum $C90664CDFAFCCB655C0534A15FE08428 {AMOTION_EVENT_FLAG_WINDOW_IS_OBSCURED = 0x1,};
enum $D8A37C4E5955677A821D861553F77D56 {AMOTION_EVENT_TOOL_TYPE_UNKNOWN = 0x0,AMOTION_EVENT_TOOL_TYPE_FINGER = 0x1,AMOTION_EVENT_TOOL_TYPE_STYLUS = 0x2,AMOTION_EVENT_TOOL_TYPE_MOUSE = 0x3,AMOTION_EVENT_TOOL_TYPE_ERASER = 0x4,};
enum $DCE88B22097C19B754359F67EC2BAC42 {ANDROID_DLEXT_RESERVED_ADDRESS = 0x1,ANDROID_DLEXT_RESERVED_ADDRESS_HINT = 0x2,ANDROID_DLEXT_WRITE_RELRO = 0x4,ANDROID_DLEXT_USE_RELRO = 0x8,ANDROID_DLEXT_USE_LIBRARY_FD = 0x10,ANDROID_DLEXT_VALID_FLAG_BITS = 0x1F,};
enum $F1FBE46807403350B28214291BCCB154 {AINPUT_EVENT_TYPE_KEY = 0x1,AINPUT_EVENT_TYPE_MOTION = 0x2,};
struct $F5B8624EE83FF6F82791C1F247BCF763 {const char *name;const char *signature;void *fnPtr;};
enum $F64AC3025220C98ACA937EAAAA67CC79 {AKEY_STATE_UNKNOWN = 0xFFFFFFFF,AKEY_STATE_UP = 0x0,AKEY_STATE_DOWN = 0x1,AKEY_STATE_VIRTUAL = 0x2,};
struct $FB68FDDBB52DBDF02F327E3198820E09 {unsigned int fds_bits[32];};
enum $FE49DD53806F6C6786D41F1B1A617458 {ALOOPER_EVENT_INPUT = 0x1,ALOOPER_EVENT_OUTPUT = 0x2,ALOOPER_EVENT_ERROR = 0x4,ALOOPER_EVENT_HANGUP = 0x8,ALOOPER_EVENT_INVALID = 0x10,};
enum $FFDA7144AC23E088DA23CB4BAD3742B2 {AOBB_STATE_MOUNTED = 0x1,AOBB_STATE_UNMOUNTED = 0x2,AOBB_STATE_ERROR_INTERNAL = 0x14,AOBB_STATE_ERROR_COULD_NOT_MOUNT = 0x15,AOBB_STATE_ERROR_COULD_NOT_UNMOUNT = 0x16,AOBB_STATE_ERROR_NOT_MOUNTED = 0x17,AOBB_STATE_ERROR_ALREADY_MOUNTED = 0x18,AOBB_STATE_ERROR_PERMISSION_DENIED = 0x19,};
struct AAsset;
struct AAssetDir;
struct AAssetManager;
struct AChoreographer;
typedef void (*AChoreographer_frameCallback)(int frameTimeNanos, void *data);
struct AConfiguration;
struct AHeartRateEvent {float bpm;int8_t status;};
struct AInputEvent;
struct AInputQueue;
struct ALooper;
typedef int (*ALooper_callbackFunc)(int fd, int events, void *data);
struct AMetaDataEvent {int32_t what;int32_t sensor;};
struct ANativeActivity {struct ANativeActivityCallbacks *callbacks;JavaVM *vm;JNIEnv *env;jobject clazz;const char *internalDataPath;const char *externalDataPath;int32_t sdkVersion;void *instance;AAssetManager *assetManager;const char *obbPath;};
struct ANativeActivityCallbacks {void (*onStart)(ANativeActivity *activity);void (*onResume)(ANativeActivity *activity);void *(*onSaveInstanceState)(ANativeActivity *activity, size_t *outSize);void (*onPause)(ANativeActivity *activity);void (*onStop)(ANativeActivity *activity);void (*onDestroy)(ANativeActivity *activity);void (*onWindowFocusChanged)(ANativeActivity *activity, int hasFocus);void (*onNativeWindowCreated)(ANativeActivity *activity, ANativeWindow *window);void (*onNativeWindowResized)(ANativeActivity *activity, ANativeWindow *window);void (*onNativeWindowRedrawNeeded)(ANativeActivity *activity, ANativeWindow *window);void (*onNativeWindowDestroyed)(ANativeActivity *activity, ANativeWindow *window);void (*onInputQueueCreated)(ANativeActivity *activity, AInputQueue *queue);void (*onInputQueueDestroyed)(ANativeActivity *activity, AInputQueue *queue);void (*onContentRectChanged)(ANativeActivity *activity, const ARect *rect);void (*onConfigurationChanged)(ANativeActivity *activity);void (*onLowMemory)(ANativeActivity *activity);};
typedef void ANativeActivity_createFunc(ANativeActivity *activity, void *savedState, size_t savedStateSize);
struct ANativeWindow;
struct ANativeWindow_Buffer {int32_t width;int32_t height;int32_t stride;int32_t format;void *bits;uint32_t reserved[6];};
struct AObbInfo;
struct ARect {int32_t left;int32_t top;int32_t right;int32_t bottom;};
struct ASensor;
struct ASensorEvent {int32_t version;int32_t sensor;int32_t type;int32_t reserved0;int64_t timestamp;union {union {float data[16];ASensorVector vector;ASensorVector acceleration;ASensorVector magnetic;float temperature;float distance;float light;float pressure;float relative_humidity;AUncalibratedEvent uncalibrated_gyro;AUncalibratedEvent uncalibrated_magnetic;AMetaDataEvent meta_data;AHeartRateEvent heart_rate;};union ASensorEvent::$8C4383882548A4AFD5A27D59188EEA15::$B0DF98B0DA57608596DB29A29B6BE38C u64;};uint32_t flags;int32_t reserved1[3];};
union ASensorEvent::$8C4383882548A4AFD5A27D59188EEA15 {union {float data[16];ASensorVector vector;ASensorVector acceleration;ASensorVector magnetic;float temperature;float distance;float light;float pressure;float relative_humidity;AUncalibratedEvent uncalibrated_gyro;AUncalibratedEvent uncalibrated_magnetic;AMetaDataEvent meta_data;AHeartRateEvent heart_rate;};union ASensorEvent::$8C4383882548A4AFD5A27D59188EEA15::$B0DF98B0DA57608596DB29A29B6BE38C u64;};
union ASensorEvent::$8C4383882548A4AFD5A27D59188EEA15::$8799DC19886954CE614B86D80AF89C03 {float data[16];ASensorVector vector;ASensorVector acceleration;ASensorVector magnetic;float temperature;float distance;float light;float pressure;float relative_humidity;AUncalibratedEvent uncalibrated_gyro;AUncalibratedEvent uncalibrated_magnetic;AMetaDataEvent meta_data;AHeartRateEvent heart_rate;};
union ASensorEvent::$8C4383882548A4AFD5A27D59188EEA15::$B0DF98B0DA57608596DB29A29B6BE38C {uint64_t data[8];uint64_t step_counter;};
struct ASensorEventQueue;
typedef const ASensorRef *ASensorList;
struct ASensorManager;
typedef const ASensor *ASensorRef;
struct ASensorVector {union {float v[3];struct {float x;float y;float z;};struct {float azimuth;float pitch;float roll;};};int8_t status;uint8_t reserved[3];};
union ASensorVector::$F2857E502D1D2A10B29DC4A0FBD43A9D {float v[3];struct {float x;float y;float z;};struct {float azimuth;float pitch;float roll;};};
struct ASensorVector::$F2857E502D1D2A10B29DC4A0FBD43A9D::$393C16A032292777F0C3725FFB2C0008 {float x;float y;float z;};
struct ASensorVector::$F2857E502D1D2A10B29DC4A0FBD43A9D::$EF3AD327C1AB8B40A3E55346EA0B82D6 {float azimuth;float pitch;float roll;};
struct AStorageManager;
typedef void (*AStorageManager_obbCallbackFunc)(const char *filename, const int32_t state, void *data);
struct AUncalibratedEvent {union {float uncalib[3];struct {float x_uncalib;float y_uncalib;float z_uncalib;};};union {float bias[3];struct {float x_bias;float y_bias;float z_bias;};};};
union AUncalibratedEvent::$DF44242611926E1C130E4FBDDA9DF95B {float uncalib[3];struct {float x_uncalib;float y_uncalib;float z_uncalib;};};
struct AUncalibratedEvent::$DF44242611926E1C130E4FBDDA9DF95B::$395D474A162CC38FCBA3B5F2F110E81A {float x_uncalib;float y_uncalib;float z_uncalib;};
union AUncalibratedEvent::$E6B472915ABE29A5F88CB1D88F3370D5 {float bias[3];struct {float x_bias;float y_bias;float z_bias;};};
struct AUncalibratedEvent::$E6B472915ABE29A5F88CB1D88F3370D5::$CBABEABD3E42441DCC777DF1E2461D66 {float x_bias;float y_bias;float z_bias;};
enum AndroidBitmapFormat {ANDROID_BITMAP_FORMAT_NONE = 0x0,ANDROID_BITMAP_FORMAT_RGBA_8888 = 0x1,ANDROID_BITMAP_FORMAT_RGB_565 = 0x4,ANDROID_BITMAP_FORMAT_RGBA_4444 = 0x7,ANDROID_BITMAP_FORMAT_A_8 = 0x8,};
typedef struct $9A42493D2BEF7F5422B539727BDDB5E2 AndroidBitmapInfo;
typedef const struct JNINativeInterface *C_JNIEnv;
typedef const struct JNINativeInterface *JNIEnv;
struct JNIInvokeInterface {void *reserved0;void *reserved1;void *reserved2;jint (*DestroyJavaVM)(JavaVM *);jint (*AttachCurrentThread)(JavaVM *, JNIEnv **, void *);jint (*DetachCurrentThread)(JavaVM *);jint (*GetEnv)(JavaVM *, void **, jint);jint (*AttachCurrentThreadAsDaemon)(JavaVM *, JNIEnv **, void *);};
struct JNINativeInterface {void *reserved0;void *reserved1;void *reserved2;void *reserved3;jint (*GetVersion)(JNIEnv *);jclass (*DefineClass)(JNIEnv *, const char *, jobject, const jbyte *, jsize);jclass (*FindClass)(JNIEnv *, const char *);jmethodID (*FromReflectedMethod)(JNIEnv *, jobject);jfieldID (*FromReflectedField)(JNIEnv *, jobject);jobject (*ToReflectedMethod)(JNIEnv *, jclass, jmethodID, jboolean);jclass (*GetSuperclass)(JNIEnv *, jclass);jboolean (*IsAssignableFrom)(JNIEnv *, jclass, jclass);jobject (*ToReflectedField)(JNIEnv *, jclass, jfieldID, jboolean);jint (*Throw)(JNIEnv *, jthrowable);jint (*ThrowNew)(JNIEnv *, jclass, const char *);jthrowable (*ExceptionOccurred)(JNIEnv *);void (*ExceptionDescribe)(JNIEnv *);void (*ExceptionClear)(JNIEnv *);void (*FatalError)(JNIEnv *, const char *);jint (*PushLocalFrame)(JNIEnv *, jint);jobject (*PopLocalFrame)(JNIEnv *, jobject);jobject (*NewGlobalRef)(JNIEnv *, jobject);void (*DeleteGlobalRef)(JNIEnv *, jobject);void (*DeleteLocalRef)(JNIEnv *, jobject);jboolean (*IsSameObject)(JNIEnv *, jobject, jobject);jobject (*NewLocalRef)(JNIEnv *, jobject);jint (*EnsureLocalCapacity)(JNIEnv *, jint);jobject (*AllocObject)(JNIEnv *, jclass);jobject (*NewObject)(JNIEnv *, jclass, jmethodID, ...);jobject (*NewObjectV)(JNIEnv *, jclass, jmethodID, va_list);jobject (*NewObjectA)(JNIEnv *, jclass, jmethodID, jvalue *);jclass (*GetObjectClass)(JNIEnv *, jobject);jboolean (*IsInstanceOf)(JNIEnv *, jobject, jclass);jmethodID (*GetMethodID)(JNIEnv *, jclass, const char *, const char *);jobject (*CallObjectMethod)(JNIEnv *, jobject, jmethodID, ...);jobject (*CallObjectMethodV)(JNIEnv *, jobject, jmethodID, va_list);jobject (*CallObjectMethodA)(JNIEnv *, jobject, jmethodID, jvalue *);jboolean (*CallBooleanMethod)(JNIEnv *, jobject, jmethodID, ...);jboolean (*CallBooleanMethodV)(JNIEnv *, jobject, jmethodID, va_list);jboolean (*CallBooleanMethodA)(JNIEnv *, jobject, jmethodID, jvalue *);jbyte (*CallByteMethod)(JNIEnv *, jobject, jmethodID, ...);jbyte (*CallByteMethodV)(JNIEnv *, jobject, jmethodID, va_list);jbyte (*CallByteMethodA)(JNIEnv *, jobject, jmethodID, jvalue *);jchar (*CallCharMethod)(JNIEnv *, jobject, jmethodID, ...);jchar (*CallCharMethodV)(JNIEnv *, jobject, jmethodID, va_list);jchar (*CallCharMethodA)(JNIEnv *, jobject, jmethodID, jvalue *);jshort (*CallShortMethod)(JNIEnv *, jobject, jmethodID, ...);jshort (*CallShortMethodV)(JNIEnv *, jobject, jmethodID, va_list);jshort (*CallShortMethodA)(JNIEnv *, jobject, jmethodID, jvalue *);jint (*CallIntMethod)(JNIEnv *, jobject, jmethodID, ...);jint (*CallIntMethodV)(JNIEnv *, jobject, jmethodID, va_list);jint (*CallIntMethodA)(JNIEnv *, jobject, jmethodID, jvalue *);jlong (*CallLongMethod)(JNIEnv *, jobject, jmethodID, ...);jlong (*CallLongMethodV)(JNIEnv *, jobject, jmethodID, va_list);jlong (*CallLongMethodA)(JNIEnv *, jobject, jmethodID, jvalue *);jfloat (*CallFloatMethod)(JNIEnv *, jobject, jmethodID, ...);jfloat (*CallFloatMethodV)(JNIEnv *, jobject, jmethodID, va_list);jfloat (*CallFloatMethodA)(JNIEnv *, jobject, jmethodID, jvalue *);jdouble (*CallDoubleMethod)(JNIEnv *, jobject, jmethodID, ...);jdouble (*CallDoubleMethodV)(JNIEnv *, jobject, jmethodID, va_list);jdouble (*CallDoubleMethodA)(JNIEnv *, jobject, jmethodID, jvalue *);void (*CallVoidMethod)(JNIEnv *, jobject, jmethodID, ...);void (*CallVoidMethodV)(JNIEnv *, jobject, jmethodID, va_list);void (*CallVoidMethodA)(JNIEnv *, jobject, jmethodID, jvalue *);jobject (*CallNonvirtualObjectMethod)(JNIEnv *, jobject, jclass, jmethodID, ...);jobject (*CallNonvirtualObjectMethodV)(JNIEnv *, jobject, jclass, jmethodID, va_list);jobject (*CallNonvirtualObjectMethodA)(JNIEnv *, jobject, jclass, jmethodID, jvalue *);jboolean (*CallNonvirtualBooleanMethod)(JNIEnv *, jobject, jclass, jmethodID, ...);jboolean (*CallNonvirtualBooleanMethodV)(JNIEnv *, jobject, jclass, jmethodID, va_list);jboolean (*CallNonvirtualBooleanMethodA)(JNIEnv *, jobject, jclass, jmethodID, jvalue *);jbyte (*CallNonvirtualByteMethod)(JNIEnv *, jobject, jclass, jmethodID, ...);jbyte (*CallNonvirtualByteMethodV)(JNIEnv *, jobject, jclass, jmethodID, va_list);jbyte (*CallNonvirtualByteMethodA)(JNIEnv *, jobject, jclass, jmethodID, jvalue *);jchar (*CallNonvirtualCharMethod)(JNIEnv *, jobject, jclass, jmethodID, ...);jchar (*CallNonvirtualCharMethodV)(JNIEnv *, jobject, jclass, jmethodID, va_list);jchar (*CallNonvirtualCharMethodA)(JNIEnv *, jobject, jclass, jmethodID, jvalue *);jshort (*CallNonvirtualShortMethod)(JNIEnv *, jobject, jclass, jmethodID, ...);jshort (*CallNonvirtualShortMethodV)(JNIEnv *, jobject, jclass, jmethodID, va_list);jshort (*CallNonvirtualShortMethodA)(JNIEnv *, jobject, jclass, jmethodID, jvalue *);jint (*CallNonvirtualIntMethod)(JNIEnv *, jobject, jclass, jmethodID, ...);jint (*CallNonvirtualIntMethodV)(JNIEnv *, jobject, jclass, jmethodID, va_list);jint (*CallNonvirtualIntMethodA)(JNIEnv *, jobject, jclass, jmethodID, jvalue *);jlong (*CallNonvirtualLongMethod)(JNIEnv *, jobject, jclass, jmethodID, ...);jlong (*CallNonvirtualLongMethodV)(JNIEnv *, jobject, jclass, jmethodID, va_list);jlong (*CallNonvirtualLongMethodA)(JNIEnv *, jobject, jclass, jmethodID, jvalue *);jfloat (*CallNonvirtualFloatMethod)(JNIEnv *, jobject, jclass, jmethodID, ...);jfloat (*CallNonvirtualFloatMethodV)(JNIEnv *, jobject, jclass, jmethodID, va_list);jfloat (*CallNonvirtualFloatMethodA)(JNIEnv *, jobject, jclass, jmethodID, jvalue *);jdouble (*CallNonvirtualDoubleMethod)(JNIEnv *, jobject, jclass, jmethodID, ...);jdouble (*CallNonvirtualDoubleMethodV)(JNIEnv *, jobject, jclass, jmethodID, va_list);jdouble (*CallNonvirtualDoubleMethodA)(JNIEnv *, jobject, jclass, jmethodID, jvalue *);void (*CallNonvirtualVoidMethod)(JNIEnv *, jobject, jclass, jmethodID, ...);void (*CallNonvirtualVoidMethodV)(JNIEnv *, jobject, jclass, jmethodID, va_list);void (*CallNonvirtualVoidMethodA)(JNIEnv *, jobject, jclass, jmethodID, jvalue *);jfieldID (*GetFieldID)(JNIEnv *, jclass, const char *, const char *);jobject (*GetObjectField)(JNIEnv *, jobject, jfieldID);jboolean (*GetBooleanField)(JNIEnv *, jobject, jfieldID);jbyte (*GetByteField)(JNIEnv *, jobject, jfieldID);jchar (*GetCharField)(JNIEnv *, jobject, jfieldID);jshort (*GetShortField)(JNIEnv *, jobject, jfieldID);jint (*GetIntField)(JNIEnv *, jobject, jfieldID);jlong (*GetLongField)(JNIEnv *, jobject, jfieldID);jfloat (*GetFloatField)(JNIEnv *, jobject, jfieldID);jdouble (*GetDoubleField)(JNIEnv *, jobject, jfieldID);void (*SetObjectField)(JNIEnv *, jobject, jfieldID, jobject);void (*SetBooleanField)(JNIEnv *, jobject, jfieldID, jboolean);void (*SetByteField)(JNIEnv *, jobject, jfieldID, jbyte);void (*SetCharField)(JNIEnv *, jobject, jfieldID, jchar);void (*SetShortField)(JNIEnv *, jobject, jfieldID, jshort);void (*SetIntField)(JNIEnv *, jobject, jfieldID, jint);void (*SetLongField)(JNIEnv *, jobject, jfieldID, jlong);void (*SetFloatField)(JNIEnv *, jobject, jfieldID, jfloat);void (*SetDoubleField)(JNIEnv *, jobject, jfieldID, jdouble);jmethodID (*GetStaticMethodID)(JNIEnv *, jclass, const char *, const char *);jobject (*CallStaticObjectMethod)(JNIEnv *, jclass, jmethodID, ...);jobject (*CallStaticObjectMethodV)(JNIEnv *, jclass, jmethodID, va_list);jobject (*CallStaticObjectMethodA)(JNIEnv *, jclass, jmethodID, jvalue *);jboolean (*CallStaticBooleanMethod)(JNIEnv *, jclass, jmethodID, ...);jboolean (*CallStaticBooleanMethodV)(JNIEnv *, jclass, jmethodID, va_list);jboolean (*CallStaticBooleanMethodA)(JNIEnv *, jclass, jmethodID, jvalue *);jbyte (*CallStaticByteMethod)(JNIEnv *, jclass, jmethodID, ...);jbyte (*CallStaticByteMethodV)(JNIEnv *, jclass, jmethodID, va_list);jbyte (*CallStaticByteMethodA)(JNIEnv *, jclass, jmethodID, jvalue *);jchar (*CallStaticCharMethod)(JNIEnv *, jclass, jmethodID, ...);jchar (*CallStaticCharMethodV)(JNIEnv *, jclass, jmethodID, va_list);jchar (*CallStaticCharMethodA)(JNIEnv *, jclass, jmethodID, jvalue *);jshort (*CallStaticShortMethod)(JNIEnv *, jclass, jmethodID, ...);jshort (*CallStaticShortMethodV)(JNIEnv *, jclass, jmethodID, va_list);jshort (*CallStaticShortMethodA)(JNIEnv *, jclass, jmethodID, jvalue *);jint (*CallStaticIntMethod)(JNIEnv *, jclass, jmethodID, ...);jint (*CallStaticIntMethodV)(JNIEnv *, jclass, jmethodID, va_list);jint (*CallStaticIntMethodA)(JNIEnv *, jclass, jmethodID, jvalue *);jlong (*CallStaticLongMethod)(JNIEnv *, jclass, jmethodID, ...);jlong (*CallStaticLongMethodV)(JNIEnv *, jclass, jmethodID, va_list);jlong (*CallStaticLongMethodA)(JNIEnv *, jclass, jmethodID, jvalue *);jfloat (*CallStaticFloatMethod)(JNIEnv *, jclass, jmethodID, ...);jfloat (*CallStaticFloatMethodV)(JNIEnv *, jclass, jmethodID, va_list);jfloat (*CallStaticFloatMethodA)(JNIEnv *, jclass, jmethodID, jvalue *);jdouble (*CallStaticDoubleMethod)(JNIEnv *, jclass, jmethodID, ...);jdouble (*CallStaticDoubleMethodV)(JNIEnv *, jclass, jmethodID, va_list);jdouble (*CallStaticDoubleMethodA)(JNIEnv *, jclass, jmethodID, jvalue *);void (*CallStaticVoidMethod)(JNIEnv *, jclass, jmethodID, ...);void (*CallStaticVoidMethodV)(JNIEnv *, jclass, jmethodID, va_list);void (*CallStaticVoidMethodA)(JNIEnv *, jclass, jmethodID, jvalue *);jfieldID (*GetStaticFieldID)(JNIEnv *, jclass, const char *, const char *);jobject (*GetStaticObjectField)(JNIEnv *, jclass, jfieldID);jboolean (*GetStaticBooleanField)(JNIEnv *, jclass, jfieldID);jbyte (*GetStaticByteField)(JNIEnv *, jclass, jfieldID);jchar (*GetStaticCharField)(JNIEnv *, jclass, jfieldID);jshort (*GetStaticShortField)(JNIEnv *, jclass, jfieldID);jint (*GetStaticIntField)(JNIEnv *, jclass, jfieldID);jlong (*GetStaticLongField)(JNIEnv *, jclass, jfieldID);jfloat (*GetStaticFloatField)(JNIEnv *, jclass, jfieldID);jdouble (*GetStaticDoubleField)(JNIEnv *, jclass, jfieldID);void (*SetStaticObjectField)(JNIEnv *, jclass, jfieldID, jobject);void (*SetStaticBooleanField)(JNIEnv *, jclass, jfieldID, jboolean);void (*SetStaticByteField)(JNIEnv *, jclass, jfieldID, jbyte);void (*SetStaticCharField)(JNIEnv *, jclass, jfieldID, jchar);void (*SetStaticShortField)(JNIEnv *, jclass, jfieldID, jshort);void (*SetStaticIntField)(JNIEnv *, jclass, jfieldID, jint);void (*SetStaticLongField)(JNIEnv *, jclass, jfieldID, jlong);void (*SetStaticFloatField)(JNIEnv *, jclass, jfieldID, jfloat);void (*SetStaticDoubleField)(JNIEnv *, jclass, jfieldID, jdouble);jstring (*NewString)(JNIEnv *, const jchar *, jsize);jsize (*GetStringLength)(JNIEnv *, jstring);const jchar *(*GetStringChars)(JNIEnv *, jstring, jboolean *);void (*ReleaseStringChars)(JNIEnv *, jstring, const jchar *);jstring (*NewStringUTF)(JNIEnv *, const char *);jsize (*GetStringUTFLength)(JNIEnv *, jstring);const char *(*GetStringUTFChars)(JNIEnv *, jstring, jboolean *);void (*ReleaseStringUTFChars)(JNIEnv *, jstring, const char *);jsize (*GetArrayLength)(JNIEnv *, jarray);jobjectArray (*NewObjectArray)(JNIEnv *, jsize, jclass, jobject);jobject (*GetObjectArrayElement)(JNIEnv *, jobjectArray, jsize);void (*SetObjectArrayElement)(JNIEnv *, jobjectArray, jsize, jobject);jbooleanArray (*NewBooleanArray)(JNIEnv *, jsize);jbyteArray (*NewByteArray)(JNIEnv *, jsize);jcharArray (*NewCharArray)(JNIEnv *, jsize);jshortArray (*NewShortArray)(JNIEnv *, jsize);jintArray (*NewIntArray)(JNIEnv *, jsize);jlongArray (*NewLongArray)(JNIEnv *, jsize);jfloatArray (*NewFloatArray)(JNIEnv *, jsize);jdoubleArray (*NewDoubleArray)(JNIEnv *, jsize);jboolean *(*GetBooleanArrayElements)(JNIEnv *, jbooleanArray, jboolean *);jbyte *(*GetByteArrayElements)(JNIEnv *, jbyteArray, jboolean *);jchar *(*GetCharArrayElements)(JNIEnv *, jcharArray, jboolean *);jshort *(*GetShortArrayElements)(JNIEnv *, jshortArray, jboolean *);jint *(*GetIntArrayElements)(JNIEnv *, jintArray, jboolean *);jlong *(*GetLongArrayElements)(JNIEnv *, jlongArray, jboolean *);jfloat *(*GetFloatArrayElements)(JNIEnv *, jfloatArray, jboolean *);jdouble *(*GetDoubleArrayElements)(JNIEnv *, jdoubleArray, jboolean *);void (*ReleaseBooleanArrayElements)(JNIEnv *, jbooleanArray, jboolean *, jint);void (*ReleaseByteArrayElements)(JNIEnv *, jbyteArray, jbyte *, jint);void (*ReleaseCharArrayElements)(JNIEnv *, jcharArray, jchar *, jint);void (*ReleaseShortArrayElements)(JNIEnv *, jshortArray, jshort *, jint);void (*ReleaseIntArrayElements)(JNIEnv *, jintArray, jint *, jint);void (*ReleaseLongArrayElements)(JNIEnv *, jlongArray, jlong *, jint);void (*ReleaseFloatArrayElements)(JNIEnv *, jfloatArray, jfloat *, jint);void (*ReleaseDoubleArrayElements)(JNIEnv *, jdoubleArray, jdouble *, jint);void (*GetBooleanArrayRegion)(JNIEnv *, jbooleanArray, jsize, jsize, jboolean *);void (*GetByteArrayRegion)(JNIEnv *, jbyteArray, jsize, jsize, jbyte *);void (*GetCharArrayRegion)(JNIEnv *, jcharArray, jsize, jsize, jchar *);void (*GetShortArrayRegion)(JNIEnv *, jshortArray, jsize, jsize, jshort *);void (*GetIntArrayRegion)(JNIEnv *, jintArray, jsize, jsize, jint *);void (*GetLongArrayRegion)(JNIEnv *, jlongArray, jsize, jsize, jlong *);void (*GetFloatArrayRegion)(JNIEnv *, jfloatArray, jsize, jsize, jfloat *);void (*GetDoubleArrayRegion)(JNIEnv *, jdoubleArray, jsize, jsize, jdouble *);void (*SetBooleanArrayRegion)(JNIEnv *, jbooleanArray, jsize, jsize, const jboolean *);void (*SetByteArrayRegion)(JNIEnv *, jbyteArray, jsize, jsize, const jbyte *);void (*SetCharArrayRegion)(JNIEnv *, jcharArray, jsize, jsize, const jchar *);void (*SetShortArrayRegion)(JNIEnv *, jshortArray, jsize, jsize, const jshort *);void (*SetIntArrayRegion)(JNIEnv *, jintArray, jsize, jsize, const jint *);void (*SetLongArrayRegion)(JNIEnv *, jlongArray, jsize, jsize, const jlong *);void (*SetFloatArrayRegion)(JNIEnv *, jfloatArray, jsize, jsize, const jfloat *);void (*SetDoubleArrayRegion)(JNIEnv *, jdoubleArray, jsize, jsize, const jdouble *);jint (*RegisterNatives)(JNIEnv *, jclass, const JNINativeMethod *, jint);jint (*UnregisterNatives)(JNIEnv *, jclass);jint (*MonitorEnter)(JNIEnv *, jobject);jint (*MonitorExit)(JNIEnv *, jobject);jint (*GetJavaVM)(JNIEnv *, JavaVM **);void (*GetStringRegion)(JNIEnv *, jstring, jsize, jsize, jchar *);void (*GetStringUTFRegion)(JNIEnv *, jstring, jsize, jsize, char *);void *(*GetPrimitiveArrayCritical)(JNIEnv *, jarray, jboolean *);void (*ReleasePrimitiveArrayCritical)(JNIEnv *, jarray, void *, jint);const jchar *(*GetStringCritical)(JNIEnv *, jstring, jboolean *);void (*ReleaseStringCritical)(JNIEnv *, jstring, const jchar *);jweak (*NewWeakGlobalRef)(JNIEnv *, jobject);void (*DeleteWeakGlobalRef)(JNIEnv *, jweak);jboolean (*ExceptionCheck)(JNIEnv *);jobject (*NewDirectByteBuffer)(JNIEnv *, void *, jlong);void *(*GetDirectBufferAddress)(JNIEnv *, jobject);jlong (*GetDirectBufferCapacity)(JNIEnv *, jobject);jobjectRefType (*GetObjectRefType)(JNIEnv *, jobject);};
typedef struct $F5B8624EE83FF6F82791C1F247BCF763 JNINativeMethod;
typedef const struct JNIInvokeInterface *JavaVM;
struct JavaVMAttachArgs {jint version;const char *name;jobject group;};
struct JavaVMInitArgs {jint version;jint nOptions;JavaVMOption *options;jboolean ignoreUnrecognized;};
struct JavaVMOption {const char *optionString;void *extraInfo;};
enum MACRO_AF {AF_UNSPEC = 0,AF_UNIX = 1,AF_LOCAL = 1,AF_INET = 2,AF_AX25 = 3,AF_IPX = 4,AF_APPLETALK = 5,AF_NETROM = 6,AF_BRIDGE = 7,AF_ATMPVC = 8,AF_X25 = 9,AF_INET6 = 10,AF_ROSE = 11,AF_DECnet = 12,AF_NETBEUI = 13,AF_SECURITY = 14,AF_KEY = 15,AF_NETLINK = 16,AF_ROUTE = 16,AF_PACKET = 17,AF_ASH = 18,AF_ECONET = 19,AF_ATMSVC = 20,AF_RDS = 21,AF_SNA = 22,AF_IRDA = 23,AF_PPPOX = 24,AF_WANPIPE = 25,AF_LLC = 26,AF_CAN = 29,AF_TIPC = 30,AF_BLUETOOTH = 31,AF_IUCV = 32,AF_RXRPC = 33,AF_ISDN = 34,AF_PHONET = 35,AF_IEEE802154 = 36,AF_CAIF = 37,AF_ALG = 38,AF_MAX = 39,};
enum MACRO_AI {AI_PASSIVE = 0x1,AI_CANONNAME = 0x2,AI_NUMERICHOST = 0x4,AI_NUMERICSERV = 0x8,AI_ALL = 0x100,AI_V4MAPPED_CFG = 0x200,AI_ADDRCONFIG = 0x400,AI_V4MAPPED = 0x800,AI_DEFAULT = 0x600,};
enum MACRO_AMOTION {AMOTION_EVENT_ACTION_POINTER_INDEX_SHIFT = 8,};
enum MACRO_ANDROID {ANDROID_BITMAP_RESULT_SUCCESS = 0,ANDROID_BITMAP_RESULT_BAD_PARAMETER = -1,ANDROID_BITMAP_RESULT_JNI_EXCEPTION = -2,ANDROID_BITMAP_RESULT_ALLOCATION_FAILED = -3,ANDROID_BITMAP_RESUT_SUCCESS = 0,};
enum MACRO_EAI {EAI_ADDRFAMILY = 1,EAI_AGAIN = 2,EAI_BADFLAGS = 3,EAI_FAIL = 4,EAI_FAMILY = 5,EAI_MEMORY = 6,EAI_NODATA = 7,EAI_NONAME = 8,EAI_SERVICE = 9,EAI_SOCKTYPE = 10,EAI_SYSTEM = 11,EAI_BADHINTS = 12,EAI_PROTOCOL = 13,EAI_OVERFLOW = 14,EAI_MAX = 15,};
enum MACRO_EXIT {EXIT_FAILURE = 1,EXIT_SUCCESS = 0,};
enum MACRO_F {F_DUPFD = 0,F_GETFD = 1,F_SETFD = 2,F_GETFL = 3,F_SETFL = 4,F_GETLK = 5,F_SETLK = 6,F_SETLKW = 7,F_SETOWN = 8,F_GETOWN = 9,F_SETSIG = 10,F_GETSIG = 11,F_GETLK64 = 12,F_SETLK64 = 13,F_SETLKW64 = 14,F_SETOWN_EX = 15,F_GETOWN_EX = 16,F_GETOWNER_UIDS = 17,F_OWNER_TID = 0,F_OWNER_PID = 1,F_OWNER_PGRP = 2,};
enum MACRO_FASYNC {FASYNC = 0x2000,};
enum MACRO_FD {FD_CLOEXEC = 1,};
enum MACRO_FIOGETOWN {FIOGETOWN = 0x8903,};
enum MACRO_FIOSETOWN {FIOSETOWN = 0x8901,};
enum MACRO_F_LINUX {F_LINUX_SPECIFIC_BASE = 1024,};
enum MACRO_F_RDLCK {F_RDLCK = 0,F_WRLCK = 1,F_UNLCK = 2,F_EXLCK = 4,F_SHLCK = 8,};
enum MACRO_HOST {HOST_NOT_FOUND = 1,};
enum MACRO_INT {INT_LEAST8_MIN = -128,INT_LEAST8_MAX = 127,INT_FAST8_MIN = -128,INT_FAST8_MAX = 127,};
enum MACRO_INT16 {INT16_MIN = -32768,INT16_MAX = 32767,};
enum MACRO_INT32 {INT32_MIN = -2147483648,INT32_MAX = 2147483647,};
enum MACRO_INT64 : __int64 {INT64_MIN = -9223372036854775808,INT64_MAX = 9223372036854775807,};
enum MACRO_INT8 {INT8_MIN = -128,INT8_MAX = 127,};
enum MACRO_INTMAX : __int64 {INTMAX_MIN = -9223372036854775808,INTMAX_MAX = 9223372036854775807,};
enum MACRO_INTPTR {INTPTR_MIN = -2147483648,INTPTR_MAX = 2147483647,};
enum MACRO_INT_LEAST16 {INT_LEAST16_MIN = -32768,INT_LEAST16_MAX = 32767,};
enum MACRO_INT_LEAST32 {INT_LEAST32_MIN = -2147483648,INT_LEAST32_MAX = 2147483647,INT_FAST32_MIN = -2147483648,INT_FAST32_MAX = 2147483647,};
enum MACRO_INT_LEAST64 : __int64 {INT_LEAST64_MIN = -9223372036854775808,INT_LEAST64_MAX = 9223372036854775807,INT_FAST64_MIN = -9223372036854775808,INT_FAST64_MAX = 9223372036854775807,};
enum MACRO_IPX {IPX_TYPE = 1,};
enum MACRO_JNI {JNI_FALSE = 0,JNI_TRUE = 1,JNI_VERSION_1_1 = 65537,JNI_VERSION_1_2 = 65538,JNI_VERSION_1_4 = 65540,JNI_VERSION_1_6 = 65542,JNI_OK = 0,JNI_ERR = -1,JNI_EDETACHED = -2,JNI_EVERSION = -3,JNI_COMMIT = 1,JNI_ABORT = 2,};
enum MACRO_LOCK {LOCK_SH = 1,LOCK_EX = 2,LOCK_NB = 4,LOCK_UN = 8,LOCK_MAND = 32,LOCK_READ = 64,LOCK_WRITE = 128,LOCK_RW = 192,};
enum MACRO_MAX {UINT8_MAX = 255,UINT_LEAST8_MAX = 255,UINT_FAST8_MAX = 255,};
enum MACRO_MAXHOSTNAMELEN {MAXHOSTNAMELEN = 256,};
enum MACRO_MSG {MSG_OOB = 1,MSG_PEEK = 2,MSG_DONTROUTE = 4,MSG_TRYHARD = 4,MSG_CTRUNC = 8,MSG_PROBE = 16,MSG_TRUNC = 32,MSG_DONTWAIT = 64,MSG_EOR = 128,MSG_WAITALL = 256,MSG_FIN = 512,MSG_SYN = 1024,MSG_CONFIRM = 2048,MSG_RST = 4096,MSG_ERRQUEUE = 8192,MSG_NOSIGNAL = 16384,MSG_MORE = 32768,MSG_WAITFORONE = 65536,MSG_FASTOPEN = 536870912,MSG_CMSG_CLOEXEC = 1073741824,MSG_EOF = 512,MSG_CMSG_COMPAT = 0,};
enum MACRO_NETDB {NETDB_INTERNAL = -1,NETDB_SUCCESS = 0,};
enum MACRO_NETWORK {NETWORK_UNSPECIFIED = 0,};
enum MACRO_NI {NI_MAXHOST = 1025,NI_MAXSERV = 32,NI_NOFQDN = 1,NI_NUMERICHOST = 2,NI_NAMEREQD = 4,NI_NUMERICSERV = 8,NI_DGRAM = 16,};
enum MACRO_NO {NO_RECOVERY = 3,NO_DATA = 4,NO_ADDRESS = 4,};
enum MACRO_NULL {NULL = 0,};
enum MACRO_O {O_DIRECTORY = 0x4000,O_NOFOLLOW = 0x8000,O_DIRECT = 0x10000,O_LARGEFILE = 0x20000,O_ACCMODE = 0x3,O_RDONLY = 0x0,O_WRONLY = 0x1,O_RDWR = 0x2,O_CREAT = 0x40,O_EXCL = 0x80,O_NOCTTY = 0x100,O_TRUNC = 0x200,O_APPEND = 0x400,O_NONBLOCK = 0x800,O_DSYNC = 0x1000,};
enum MACRO_O_NOATIME {O_NOATIME = 0x40000,O_CLOEXEC = 0x80000,};
enum MACRO_O_PATH {O_PATH = 0x200000,};
enum MACRO_O_TMPFILE {O_TMPFILE_MASK = 4210752,O_NDELAY = 2048,};
enum MACRO_PF {PF_UNSPEC = 0,PF_UNIX = 1,PF_LOCAL = 1,PF_INET = 2,PF_AX25 = 3,PF_IPX = 4,PF_APPLETALK = 5,PF_NETROM = 6,PF_BRIDGE = 7,PF_ATMPVC = 8,PF_X25 = 9,PF_INET6 = 10,PF_ROSE = 11,PF_DECnet = 12,PF_NETBEUI = 13,PF_SECURITY = 14,PF_KEY = 15,PF_NETLINK = 16,PF_ROUTE = 16,PF_PACKET = 17,PF_ASH = 18,PF_ECONET = 19,PF_ATMSVC = 20,PF_RDS = 21,PF_SNA = 22,PF_IRDA = 23,PF_PPPOX = 24,PF_WANPIPE = 25,PF_LLC = 26,PF_CAN = 29,PF_TIPC = 30,PF_BLUETOOTH = 31,PF_IUCV = 32,PF_RXRPC = 33,PF_ISDN = 34,PF_PHONET = 35,PF_IEEE802154 = 36,PF_CAIF = 37,PF_ALG = 38,PF_MAX = 39,};
enum MACRO_PTRDIFF {PTRDIFF_MIN = -2147483648,PTRDIFF_MAX = 2147483647,};
enum MACRO_RAND {RAND_MAX = 0x7FFFFFFF,};
enum MACRO_SCM {SCM_TIMESTAMP = 29,};
enum MACRO_SCM_RIGHTS {SCM_RIGHTS = 0x1,SCM_CREDENTIALS = 0x2,SCM_SECURITY = 0x3,};
enum MACRO_SCM_TIMESTAMPING {SCM_TIMESTAMPING = 37,};
enum MACRO_SCM_TIMESTAMPNS {SCM_TIMESTAMPNS = 35,};
enum MACRO_SCM_WIFI {SCM_WIFI_STATUS = 41,};
enum MACRO_SCOPE {SCOPE_DELIMITER = 37,};
enum MACRO_SIG {SIG_ATOMIC_MIN = -2147483648,};
enum MACRO_SIOCADDDLCI {SIOCADDDLCI = 0x8980,};
enum MACRO_SIOCADDMULTI {SIOCADDMULTI = 0x8931,};
enum MACRO_SIOCADDRT {SIOCADDRT = 0x890B,};
enum MACRO_SIOCATMARK {SIOCATMARK = 0x8905,};
enum MACRO_SIOCBONDCHANGEACTIVE {SIOCBONDCHANGEACTIVE = 0x8995,};
enum MACRO_SIOCBONDENSLAVE {SIOCBONDENSLAVE = 0x8990,};
enum MACRO_SIOCBONDINFOQUERY {SIOCBONDINFOQUERY = 0x8994,};
enum MACRO_SIOCBONDRELEASE {SIOCBONDRELEASE = 0x8991,};
enum MACRO_SIOCBONDSETHWADDR {SIOCBONDSETHWADDR = 0x8992,};
enum MACRO_SIOCBONDSLAVEINFOQUERY {SIOCBONDSLAVEINFOQUERY = 0x8993,};
enum MACRO_SIOCBRADDBR {SIOCBRADDBR = 0x89A0,};
enum MACRO_SIOCBRADDIF {SIOCBRADDIF = 0x89A2,};
enum MACRO_SIOCBRDELBR {SIOCBRDELBR = 0x89A1,};
enum MACRO_SIOCBRDELIF {SIOCBRDELIF = 0x89A3,};
enum MACRO_SIOCDARP {SIOCDARP = 0x8953,};
enum MACRO_SIOCDELDLCI {SIOCDELDLCI = 0x8981,};
enum MACRO_SIOCDELMULTI {SIOCDELMULTI = 0x8932,};
enum MACRO_SIOCDELRT {SIOCDELRT = 0x890C,};
enum MACRO_SIOCDEVPRIVATE {SIOCDEVPRIVATE = 0x89F0,};
enum MACRO_SIOCDIFADDR {SIOCDIFADDR = 0x8936,};
enum MACRO_SIOCDRARP {SIOCDRARP = 0x8960,};
enum MACRO_SIOCETHTOOL {SIOCETHTOOL = 0x8946,};
enum MACRO_SIOCGARP {SIOCGARP = 0x8954,};
enum MACRO_SIOCGHWTSTAMP {SIOCGHWTSTAMP = 0x89B1,};
enum MACRO_SIOCGIFADDR {SIOCGIFADDR = 0x8915,};
enum MACRO_SIOCGIFBR {SIOCGIFBR = 0x8940,};
enum MACRO_SIOCGIFBRDADDR {SIOCGIFBRDADDR = 0x8919,};
enum MACRO_SIOCGIFCONF {SIOCGIFCONF = 0x8912,};
enum MACRO_SIOCGIFCOUNT {SIOCGIFCOUNT = 0x8938,};
enum MACRO_SIOCGIFDSTADDR {SIOCGIFDSTADDR = 0x8917,};
enum MACRO_SIOCGIFENCAP {SIOCGIFENCAP = 0x8925,};
enum MACRO_SIOCGIFFLAGS {SIOCGIFFLAGS = 0x8913,};
enum MACRO_SIOCGIFHWADDR {SIOCGIFHWADDR = 0x8927,};
enum MACRO_SIOCGIFINDEX {SIOCGIFINDEX = 0x8933,};
enum MACRO_SIOCGIFMAP {SIOCGIFMAP = 0x8970,};
enum MACRO_SIOCGIFMEM {SIOCGIFMEM = 0x891F,};
enum MACRO_SIOCGIFMETRIC {SIOCGIFMETRIC = 0x891D,};
enum MACRO_SIOCGIFMTU {SIOCGIFMTU = 0x8921,};
enum MACRO_SIOCGIFNAME {SIOCGIFNAME = 0x8910,};
enum MACRO_SIOCGIFNETMASK {SIOCGIFNETMASK = 0x891B,};
enum MACRO_SIOCGIFPFLAGS {SIOCGIFPFLAGS = 0x8935,};
enum MACRO_SIOCGIFSLAVE {SIOCGIFSLAVE = 0x8929,};
enum MACRO_SIOCGIFTXQLEN {SIOCGIFTXQLEN = 0x8942,};
enum MACRO_SIOCGIFVLAN {SIOCGIFVLAN = 0x8982,};
enum MACRO_SIOCGMIIPHY {SIOCGMIIPHY = 0x8947,};
enum MACRO_SIOCGMIIREG {SIOCGMIIREG = 0x8948,};
enum MACRO_SIOCGPGRP {SIOCGPGRP = 0x8904,};
enum MACRO_SIOCGRARP {SIOCGRARP = 0x8961,};
enum MACRO_SIOCGSTAMP {SIOCGSTAMP = 0x8906,};
enum MACRO_SIOCGSTAMPNS {SIOCGSTAMPNS = 0x8907,};
enum MACRO_SIOCOUTQNSD {SIOCOUTQNSD = 0x894B,};
enum MACRO_SIOCPROTOPRIVATE {SIOCPROTOPRIVATE = 0x89E0,};
enum MACRO_SIOCRTMSG {SIOCRTMSG = 0x890D,};
enum MACRO_SIOCSARP {SIOCSARP = 0x8955,};
enum MACRO_SIOCSHWTSTAMP {SIOCSHWTSTAMP = 0x89B0,};
enum MACRO_SIOCSIFADDR {SIOCSIFADDR = 0x8916,};
enum MACRO_SIOCSIFBR {SIOCSIFBR = 0x8941,};
enum MACRO_SIOCSIFBRDADDR {SIOCSIFBRDADDR = 0x891A,};
enum MACRO_SIOCSIFDSTADDR {SIOCSIFDSTADDR = 0x8918,};
enum MACRO_SIOCSIFENCAP {SIOCSIFENCAP = 0x8926,};
enum MACRO_SIOCSIFFLAGS {SIOCSIFFLAGS = 0x8914,};
enum MACRO_SIOCSIFHWADDR {SIOCSIFHWADDR = 0x8924,};
enum MACRO_SIOCSIFHWBROADCAST {SIOCSIFHWBROADCAST = 0x8937,};
enum MACRO_SIOCSIFLINK {SIOCSIFLINK = 0x8911,};
enum MACRO_SIOCSIFMAP {SIOCSIFMAP = 0x8971,};
enum MACRO_SIOCSIFMEM {SIOCSIFMEM = 0x8920,};
enum MACRO_SIOCSIFMETRIC {SIOCSIFMETRIC = 0x891E,};
enum MACRO_SIOCSIFMTU {SIOCSIFMTU = 0x8922,};
enum MACRO_SIOCSIFNAME {SIOCSIFNAME = 0x8923,};
enum MACRO_SIOCSIFNETMASK {SIOCSIFNETMASK = 0x891C,};
enum MACRO_SIOCSIFPFLAGS {SIOCSIFPFLAGS = 0x8934,};
enum MACRO_SIOCSIFSLAVE {SIOCSIFSLAVE = 0x8930,};
enum MACRO_SIOCSIFTXQLEN {SIOCSIFTXQLEN = 0x8943,};
enum MACRO_SIOCSIFVLAN {SIOCSIFVLAN = 0x8983,};
enum MACRO_SIOCSMIIREG {SIOCSMIIREG = 0x8949,};
enum MACRO_SIOCSPGRP {SIOCSPGRP = 0x8902,};
enum MACRO_SIOCSRARP {SIOCSRARP = 0x8962,};
enum MACRO_SIOCWANDEV {SIOCWANDEV = 0x894A,};
enum MACRO_SIOGIFINDEX {SIOGIFINDEX = 35123,};
enum MACRO_SIZE {SIZE_MAX = -1,};
enum MACRO_SO {SO_DEBUG = 1,SO_REUSEADDR = 2,SO_TYPE = 3,SO_ERROR = 4,SO_DONTROUTE = 5,SO_BROADCAST = 6,SO_SNDBUF = 7,SO_RCVBUF = 8,SO_SNDBUFFORCE = 32,SO_RCVBUFFORCE = 33,SO_KEEPALIVE = 9,SO_OOBINLINE = 10,SO_NO_CHECK = 11,SO_PRIORITY = 12,SO_LINGER = 13,SO_BSDCOMPAT = 14,SO_REUSEPORT = 15,SO_PASSCRED = 16,SO_PEERCRED = 17,SO_RCVLOWAT = 18,SO_SNDLOWAT = 19,SO_RCVTIMEO = 20,SO_SNDTIMEO = 21,SO_SECURITY_AUTHENTICATION = 22,SO_SECURITY_ENCRYPTION_TRANSPORT = 23,SO_SECURITY_ENCRYPTION_NETWORK = 24,SO_BINDTODEVICE = 25,SO_ATTACH_FILTER = 26,SO_DETACH_FILTER = 27,SO_GET_FILTER = 26,SO_PEERNAME = 28,SO_TIMESTAMP = 29,};
enum MACRO_SOCK {SOCK_STREAM = 1,SOCK_DGRAM = 2,SOCK_RAW = 3,SOCK_RDM = 4,SOCK_SEQPACKET = 5,SOCK_PACKET = 10,SOCK_CLOEXEC = 524288,SOCK_NONBLOCK = 2048,};
enum MACRO_SOL {SOL_SOCKET = 1,};
enum MACRO_SOL_IP {SOL_IP = 0,SOL_TCP = 6,SOL_UDP = 17,SOL_IPV6 = 41,SOL_ICMPV6 = 58,SOL_SCTP = 132,SOL_RAW = 255,SOL_IPX = 256,SOL_AX25 = 257,SOL_ATALK = 258,SOL_NETROM = 259,SOL_ROSE = 260,SOL_DECNET = 261,SOL_X25 = 262,SOL_PACKET = 263,SOL_ATM = 264,SOL_AAL = 265,SOL_IRDA = 266,SOL_NETBEUI = 267,SOL_LLC = 268,SOL_DCCP = 269,SOL_NETLINK = 270,SOL_TIPC = 271,};
enum MACRO_SOMAXCONN {SOMAXCONN = 128,};
enum MACRO_SO_ACCEPTCONN {SO_ACCEPTCONN = 30,SO_PEERSEC = 31,SO_PASSSEC = 34,SO_TIMESTAMPNS = 35,};
enum MACRO_SO_MARK {SO_MARK = 36,SO_TIMESTAMPING = 37,};
enum MACRO_SO_PEEK {SO_PEEK_OFF = 42,SO_NOFCS = 43,SO_LOCK_FILTER = 44,SO_SELECT_ERR_QUEUE = 45,SO_BUSY_POLL = 46,SO_MAX_PACING_RATE = 47,SO_BPF_EXTENSIONS = 48,};
enum MACRO_SO_PROTOCOL {SO_PROTOCOL = 38,SO_DOMAIN = 39,SO_RXQ_OVFL = 40,SO_WIFI_STATUS = 41,};
enum MACRO_STRUCT {STRUCT_MALLINFO_DECLARED = 1,};
enum MACRO_SYNC {__O_SYNC = 0x100000,O_SYNC = 0x101000,};
enum MACRO_TMPFILE {__O_TMPFILE = 0x400000,O_TMPFILE = 0x404000,};
enum MACRO_TRY {TRY_AGAIN = 2,};
enum MACRO_UINT {UINT_LEAST32_MAX = -1,UINT_FAST32_MAX = -1,};
enum MACRO_UINT16 {UINT16_MAX = 65535,UINT_LEAST16_MAX = 65535,};
enum MACRO_UINT32 {UINT32_MAX = -1,UINT32_MIN = 0,};
enum MACRO_UINT64 {UINT64_MAX = -1,UINT_LEAST64_MAX = -1,UINT_FAST64_MAX = -1,};
enum MACRO_UINTMAX {UINTMAX_MAX = -1,SIG_ATOMIC_MAX = 2147483647,};
enum MACRO_UINTPTR {UINTPTR_MAX = -1,};
enum MACRO_UIO {UIO_FASTIOV = 8,UIO_MAXIOV = 1024,};
enum MACRO_VISIBLE {__POSIX_VISIBLE = 200809,__XSI_VISIBLE = 700,__BSD_VISIBLE = 1,__ISO_C_VISIBLE = 1999,__XPG_VISIBLE = 700,};
enum MACRO_WINT {WINT_MAX = 2147483647,WINT_MIN = -2147483648,};
enum MACRO__K {_K_SS_MAXSIZE = 128,};
enum MACRO___ANDROID {__ANDROID_API__ = 24,};
enum MACRO___BIONIC {__BIONIC__ = 1,};
enum MACRO___BITS {__BITS_PER_LONG = 32,};
enum MACRO___FD {__FD_SETSIZE = 1024,};
enum MACRO___WORDSIZE {__WORDSIZE = 32,};
enum MACRO___bool {__bool_true_false_are_defined = 1,};
enum MACRO_bool {true = 1,false = 0,};
struct _JNIEnv {const struct JNINativeInterface *functions;};
struct _JavaVM {const struct JNIInvokeInterface *functions;};
typedef __u16 __be16;
typedef __u32 __be32;
typedef __u64 __be64;
typedef void *__builtin_va_list;
typedef __kernel_clockid_t __clockid_t;
typedef __kernel_gid32_t __gid_t;
typedef __builtin_va_list __gnuc_va_list;
typedef uint32_t __id_t;
typedef __kernel_ino_t __ino_t;
typedef __int16 __int16_t;
typedef int __int32_t;
typedef __int64 __int64_t;
typedef signed __int8 __int8_t;
typedef int __intptr_t;
typedef char *__kernel_caddr_t;
typedef __kernel_long_t __kernel_clock_t;
typedef int __kernel_clockid_t;
typedef int __kernel_daddr_t;
typedef struct $FB68FDDBB52DBDF02F327E3198820E09 __kernel_fd_set;
typedef struct $06CAB5296C39900A9CE51DBF4F560AD6 __kernel_fsid_t;
typedef unsigned __int16 __kernel_gid16_t;
typedef unsigned int __kernel_gid32_t;
typedef unsigned __int16 __kernel_gid_t;
typedef __kernel_ulong_t __kernel_ino_t;
typedef unsigned __int16 __kernel_ipc_pid_t;
typedef int __kernel_key_t;
typedef __int64 __kernel_loff_t;
typedef int __kernel_long_t;
typedef unsigned __int16 __kernel_mode_t;
typedef int __kernel_mqd_t;
typedef __kernel_long_t __kernel_off_t;
typedef unsigned __int16 __kernel_old_dev_t;
typedef __kernel_gid_t __kernel_old_gid_t;
typedef __kernel_uid_t __kernel_old_uid_t;
typedef int __kernel_pid_t;
typedef int __kernel_ptrdiff_t;
typedef unsigned __int16 __kernel_sa_family_t;
typedef void (*__kernel_sighandler_t)(int);
typedef unsigned int __kernel_size_t;
struct __kernel_sockaddr_storage {__kernel_sa_family_t ss_family;char __data[126];};
typedef int __kernel_ssize_t;
typedef __kernel_long_t __kernel_suseconds_t;
typedef __kernel_long_t __kernel_time_t;
typedef int __kernel_timer_t;
typedef unsigned __int16 __kernel_uid16_t;
typedef unsigned int __kernel_uid32_t;
typedef unsigned __int16 __kernel_uid_t;
typedef unsigned int __kernel_ulong_t;
typedef __kernel_key_t __key_t;
typedef __u16 __le16;
typedef __u32 __le32;
typedef __u64 __le64;
struct __locale_t;
typedef __kernel_mode_t __mode_t;
typedef uint32_t __nlink_t;
typedef __kernel_pid_t __pid_t;
typedef signed __int16 __s16;
typedef signed int __s32;
typedef signed __int64 __s64;
typedef signed __int8 __s8;
typedef int32_t __socklen_t;
typedef __u16 __sum16;
typedef __kernel_suseconds_t __suseconds_t;
typedef __kernel_time_t __time_t;
typedef void *__timer_t;
typedef unsigned __int16 __u16;
typedef unsigned int __u32;
typedef unsigned __int64 __u64;
typedef unsigned __int8 __u8;
typedef __kernel_uid32_t __uid_t;
typedef unsigned __int16 __uint16_t;
typedef unsigned int __uint32_t;
typedef unsigned __int64 __uint64_t;
typedef unsigned __int8 __uint8_t;
typedef unsigned int __uintptr_t;
typedef uint32_t __useconds_t;
typedef __builtin_va_list __va_list;
typedef __u32 __wsum;
struct _jfieldID;
struct _jmethodID;
struct addrinfo {int ai_flags;int ai_family;int ai_socktype;int ai_protocol;socklen_t ai_addrlen;char *ai_canonname;struct sockaddr *ai_addr;struct addrinfo *ai_next;};
enum android_LogPriority {ANDROID_LOG_UNKNOWN = 0x0,ANDROID_LOG_DEFAULT = 0x1,ANDROID_LOG_VERBOSE = 0x2,ANDROID_LOG_DEBUG = 0x3,ANDROID_LOG_INFO = 0x4,ANDROID_LOG_WARN = 0x5,ANDROID_LOG_ERROR = 0x6,ANDROID_LOG_FATAL = 0x7,ANDROID_LOG_SILENT = 0x8,};
typedef struct $13B8135214ADCA8C5B891879B37639D2 android_dlextinfo;
typedef enum $294E6B22D2C7C3462ECC5C21F28E2210 android_tts_audio_format_t;
typedef enum $89669B75FFFA2E86F49C9A03322F5AA7 android_tts_callback_status_t;
struct android_tts_engine_funcs_t {void *reserved[2];android_tts_result_t (*init)(void *engine, android_tts_synth_cb_t synthDonePtr, const char *engineConfig);android_tts_result_t (*shutdown)(void *engine);android_tts_result_t (*stop)(void *engine);android_tts_support_result_t (*isLanguageAvailable)(void *engine, const char *lang, const char *country, const char *variant);android_tts_result_t (*loadLanguage)(void *engine, const char *lang, const char *country, const char *variant);android_tts_result_t (*setLanguage)(void *engine, const char *lang, const char *country, const char *variant);android_tts_result_t (*getLanguage)(void *engine, char *language, char *country, char *variant);android_tts_result_t (*setAudioFormat)(void *engine, android_tts_audio_format_t *pEncoding, uint32_t *pRate, int *pChannels);android_tts_result_t (*setProperty)(void *engine, const char *property, const char *value, const size_t size);android_tts_result_t (*getProperty)(void *engine, const char *property, char *value, size_t *iosize);android_tts_result_t (*synthesizeText)(void *engine, const char *text, int8_t *buffer, size_t bufferSize, void *userdata);};
typedef struct $82E117BB9FC04C8485243D8E6D5317B0 android_tts_engine_t;
typedef enum $2DFCE81C22045DA5588F32BE57F779B3 android_tts_result_t;
typedef enum $4139C7DF365D5434A7E6C4EAB6785B55 android_tts_support_result_t;
typedef android_tts_callback_status_t (*android_tts_synth_cb_t)(void **pUserData, uint32_t trackSamplingHz, android_tts_audio_format_t audioFormat, int channelCount, int8_t **pAudioBuffer, size_t *pBufferSize, android_tts_synth_status_t status);
typedef enum $A66A407457C3F86F0D5D01263F39DB8B android_tts_synth_status_t;
typedef unsigned int blkcnt_t;
typedef unsigned int blksize_t;
typedef __kernel_caddr_t caddr_t;
typedef __kernel_clock_t clock_t;
typedef __clockid_t clockid_t;
struct cmsghdr {size_t cmsg_len;int cmsg_level;int cmsg_type;};
typedef __kernel_daddr_t daddr_t;
typedef uint32_t dev_t;
typedef struct $979FA3DE6ECCF956231BFC297C4278E6 div_t;
struct f_owner_ex {int type;__kernel_pid_t pid;};
struct flock {__int16 l_type;__int16 l_whence;__kernel_off_t l_start;__kernel_off_t l_len;__kernel_pid_t l_pid;};
struct flock64 {__int16 l_type;__int16 l_whence;__kernel_loff_t l_start;__kernel_loff_t l_len;__kernel_pid_t l_pid;};
typedef unsigned int fsblkcnt_t;
typedef unsigned int fsfilcnt_t;
typedef __gid_t gid_t;
struct hostent {char *h_name;char **h_aliases;int h_addrtype;int h_length;char **h_addr_list;};
typedef __id_t id_t;
typedef __ino_t ino_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;
typedef __int8_t int8_t;
typedef int32_t int_fast16_t;
typedef int32_t int_fast32_t;
typedef int64_t int_fast64_t;
typedef int8_t int_fast8_t;
typedef int16_t int_least16_t;
typedef int32_t int_least32_t;
typedef int64_t int_least64_t;
typedef int8_t int_least8_t;
typedef int64_t intmax_t;
typedef __intptr_t intptr_t;
struct iovec {void *iov_base;__kernel_size_t iov_len;};
typedef jobject jarray;
typedef unsigned __int8 jboolean;
typedef jarray jbooleanArray;
typedef signed __int8 jbyte;
typedef jarray jbyteArray;
typedef unsigned __int16 jchar;
typedef jarray jcharArray;
typedef jobject jclass;
typedef double jdouble;
typedef jarray jdoubleArray;
typedef struct _jfieldID *jfieldID;
typedef float jfloat;
typedef jarray jfloatArray;
typedef int jint;
typedef jarray jintArray;
typedef __int64 jlong;
typedef jarray jlongArray;
typedef struct _jmethodID *jmethodID;
typedef void *jobject;
typedef jarray jobjectArray;
enum jobjectRefType {JNIInvalidRefType = 0x0,JNILocalRefType = 0x1,JNIGlobalRefType = 0x2,JNIWeakGlobalRefType = 0x3,};
typedef __int16 jshort;
typedef jarray jshortArray;
typedef jint jsize;
typedef jobject jstring;
typedef jobject jthrowable;
union jvalue {jboolean z;jbyte b;jchar c;jshort s;jint i;jlong j;jfloat f;jdouble d;jobject l;};
typedef jobject jweak;
typedef __key_t key_t;
typedef struct $979FA3DE6ECCF956231BFC297C4278E6 ldiv_t;
struct linger {int l_onoff;int l_linger;};
typedef struct $AC1F0727205AA235F31FA7E4FBAB6931 lldiv_t;
typedef struct __locale_t *locale_t;
typedef __kernel_loff_t loff_t;
struct mallinfo {size_t arena;size_t ordblks;size_t smblks;size_t hblks;size_t hblkhd;size_t usmblks;size_t fsmblks;size_t uordblks;size_t fordblks;size_t keepcost;};
struct mmsghdr {struct msghdr msg_hdr;unsigned int msg_len;};
typedef __mode_t mode_t;
struct msghdr {void *msg_name;socklen_t msg_namelen;struct iovec *msg_iov;size_t msg_iovlen;void *msg_control;size_t msg_controllen;int msg_flags;};
typedef uint64_t net_handle_t;
struct netent {char *n_name;char **n_aliases;int n_addrtype;uint32_t n_net;};
typedef __nlink_t nlink_t;
typedef loff_t off64_t;
typedef __kernel_off_t off_t;
typedef __pid_t pid_t;
struct protoent {char *p_name;char **p_aliases;int p_proto;};
typedef int ptrdiff_t;
typedef unsigned __int16 sa_family_t;
struct servent {char *s_name;char **s_aliases;int s_port;char *s_proto;};
typedef unsigned int size_t;
struct sockaddr {sa_family_t sa_family;char sa_data[14];};
typedef __socklen_t socklen_t;
typedef __kernel_ssize_t ssize_t;
typedef struct $6BD93AD6A320A51794F58DE6EDFB59E6 structors_array_t;
typedef __suseconds_t suseconds_t;
typedef __time_t time_t;
typedef __timer_t timer_t;
struct timespec;
typedef unsigned __int8 u_char;
typedef unsigned int u_int;
typedef uint16_t u_int16_t;
typedef uint32_t u_int32_t;
typedef uint64_t u_int64_t;
typedef uint8_t u_int8_t;
typedef unsigned int u_long;
typedef unsigned __int16 u_short;
struct ucred {pid_t pid;uid_t uid;gid_t gid;};
typedef __uid_t uid_t;
typedef unsigned int uint;
typedef __uint16_t uint16_t;
typedef __uint32_t uint32_t;
typedef __uint64_t uint64_t;
typedef __uint8_t uint8_t;
typedef uint32_t uint_fast16_t;
typedef uint32_t uint_fast32_t;
typedef uint64_t uint_fast64_t;
typedef uint8_t uint_fast8_t;
typedef uint16_t uint_least16_t;
typedef uint32_t uint_least32_t;
typedef uint64_t uint_least64_t;
typedef uint8_t uint_least8_t;
typedef unsigned int uint_t;
typedef uint64_t uintmax_t;
typedef __uintptr_t uintptr_t;
typedef __useconds_t useconds_t;
typedef __gnuc_va_list va_list;
typedef int wchar_t;

$84DF78F24C88ED534F04DAB1618088EB AASSET_MODE_BUFFER;
$84DF78F24C88ED534F04DAB1618088EB AASSET_MODE_RANDOM;
$84DF78F24C88ED534F04DAB1618088EB AASSET_MODE_STREAMING;
$84DF78F24C88ED534F04DAB1618088EB AASSET_MODE_UNKNOWN;
void AAssetDir_close(AAssetDir *assetDir);
const char *AAssetDir_getNextFileName(AAssetDir *assetDir);
void AAssetDir_rewind(AAssetDir *assetDir);
AAssetManager *AAssetManager_fromJava(JNIEnv *env, jobject assetManager);
AAsset *AAssetManager_open(AAssetManager *mgr, const char *filename, int mode);
AAssetDir *AAssetManager_openDir(AAssetManager *mgr, const char *dirName);
void AAsset_close(AAsset *asset);
const void *AAsset_getBuffer(AAsset *asset);
off_t AAsset_getLength(AAsset *asset);
off64_t AAsset_getLength64(AAsset *asset);
off_t AAsset_getRemainingLength(AAsset *asset);
off64_t AAsset_getRemainingLength64(AAsset *asset);
int AAsset_isAllocated(AAsset *asset);
int AAsset_openFileDescriptor(AAsset *asset, off_t *outStart, off_t *outLength);
int AAsset_openFileDescriptor64(AAsset *asset, off64_t *outStart, off64_t *outLength);
int AAsset_read(AAsset *asset, void *buf, size_t count);
off_t AAsset_seek(AAsset *asset, off_t offset, int whence);
off64_t AAsset_seek64(AAsset *asset, off64_t offset, int whence);
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_DENSITY;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_DENSITY_ANY;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_DENSITY_DEFAULT;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_DENSITY_HIGH;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_DENSITY_LOW;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_DENSITY_MEDIUM;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_DENSITY_NONE;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_DENSITY_TV;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_DENSITY_XHIGH;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_DENSITY_XXHIGH;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_DENSITY_XXXHIGH;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_KEYBOARD;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_KEYBOARD_12KEY;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_KEYBOARD_ANY;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_KEYBOARD_HIDDEN;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_KEYBOARD_NOKEYS;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_KEYBOARD_QWERTY;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_KEYSHIDDEN_ANY;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_KEYSHIDDEN_NO;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_KEYSHIDDEN_SOFT;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_KEYSHIDDEN_YES;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_LAYOUTDIR;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_LAYOUTDIR_ANY;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_LAYOUTDIR_LTR;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_LAYOUTDIR_RTL;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_LOCALE;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_MCC;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_MNC;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_MNC_ZERO;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_NAVHIDDEN_ANY;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_NAVHIDDEN_NO;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_NAVHIDDEN_YES;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_NAVIGATION;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_NAVIGATION_ANY;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_NAVIGATION_DPAD;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_NAVIGATION_NONAV;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_NAVIGATION_TRACKBALL;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_NAVIGATION_WHEEL;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_ORIENTATION;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_ORIENTATION_ANY;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_ORIENTATION_LAND;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_ORIENTATION_PORT;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_ORIENTATION_SQUARE;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_SCREENLONG_ANY;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_SCREENLONG_NO;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_SCREENLONG_YES;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_SCREENSIZE_ANY;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_SCREENSIZE_LARGE;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_SCREENSIZE_NORMAL;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_SCREENSIZE_SMALL;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_SCREENSIZE_XLARGE;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_SCREEN_HEIGHT_DP_ANY;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_SCREEN_LAYOUT;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_SCREEN_SIZE;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_SCREEN_WIDTH_DP_ANY;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_SMALLEST_SCREEN_SIZE;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_SMALLEST_SCREEN_WIDTH_DP_ANY;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_TOUCHSCREEN;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_TOUCHSCREEN_ANY;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_TOUCHSCREEN_FINGER;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_TOUCHSCREEN_NOTOUCH;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_TOUCHSCREEN_STYLUS;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_UI_MODE;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_UI_MODE_NIGHT_ANY;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_UI_MODE_NIGHT_NO;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_UI_MODE_NIGHT_YES;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_UI_MODE_TYPE_ANY;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_UI_MODE_TYPE_APPLIANCE;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_UI_MODE_TYPE_CAR;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_UI_MODE_TYPE_DESK;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_UI_MODE_TYPE_NORMAL;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_UI_MODE_TYPE_TELEVISION;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_UI_MODE_TYPE_WATCH;
$7EC23C51206D55A80D1F276DA8A5980F ACONFIGURATION_VERSION;
AChoreographer *AChoreographer_getInstance();
void AChoreographer_postFrameCallback(AChoreographer *choreographer, AChoreographer_frameCallback callback, void *data);
void AChoreographer_postFrameCallbackDelayed(AChoreographer *choreographer, AChoreographer_frameCallback callback, void *data, int delayMillis);
void AConfiguration_copy(AConfiguration *dest, AConfiguration *src);
void AConfiguration_delete(AConfiguration *config);
int32_t AConfiguration_diff(AConfiguration *config1, AConfiguration *config2);
void AConfiguration_fromAssetManager(AConfiguration *out, AAssetManager *am);
void AConfiguration_getCountry(AConfiguration *config, char *outCountry);
int32_t AConfiguration_getDensity(AConfiguration *config);
int32_t AConfiguration_getKeyboard(AConfiguration *config);
int32_t AConfiguration_getKeysHidden(AConfiguration *config);
void AConfiguration_getLanguage(AConfiguration *config, char *outLanguage);
int32_t AConfiguration_getLayoutDirection(AConfiguration *config);
int32_t AConfiguration_getMcc(AConfiguration *config);
int32_t AConfiguration_getMnc(AConfiguration *config);
int32_t AConfiguration_getNavHidden(AConfiguration *config);
int32_t AConfiguration_getNavigation(AConfiguration *config);
int32_t AConfiguration_getOrientation(AConfiguration *config);
int32_t AConfiguration_getScreenHeightDp(AConfiguration *config);
int32_t AConfiguration_getScreenLong(AConfiguration *config);
int32_t AConfiguration_getScreenSize(AConfiguration *config);
int32_t AConfiguration_getScreenWidthDp(AConfiguration *config);
int32_t AConfiguration_getSdkVersion(AConfiguration *config);
int32_t AConfiguration_getSmallestScreenWidthDp(AConfiguration *config);
int32_t AConfiguration_getTouchscreen(AConfiguration *config);
int32_t AConfiguration_getUiModeNight(AConfiguration *config);
int32_t AConfiguration_getUiModeType(AConfiguration *config);
int32_t AConfiguration_isBetterThan(AConfiguration *base, AConfiguration *test, AConfiguration *requested);
int32_t AConfiguration_match(AConfiguration *base, AConfiguration *requested);
AConfiguration *AConfiguration_new();
void AConfiguration_setCountry(AConfiguration *config, const char *country);
void AConfiguration_setDensity(AConfiguration *config, int32_t density);
void AConfiguration_setKeyboard(AConfiguration *config, int32_t keyboard);
void AConfiguration_setKeysHidden(AConfiguration *config, int32_t keysHidden);
void AConfiguration_setLanguage(AConfiguration *config, const char *language);
void AConfiguration_setLayoutDirection(AConfiguration *config, int32_t value);
void AConfiguration_setMcc(AConfiguration *config, int32_t mcc);
void AConfiguration_setMnc(AConfiguration *config, int32_t mnc);
void AConfiguration_setNavHidden(AConfiguration *config, int32_t navHidden);
void AConfiguration_setNavigation(AConfiguration *config, int32_t navigation);
void AConfiguration_setOrientation(AConfiguration *config, int32_t orientation);
void AConfiguration_setScreenHeightDp(AConfiguration *config, int32_t value);
void AConfiguration_setScreenLong(AConfiguration *config, int32_t screenLong);
void AConfiguration_setScreenSize(AConfiguration *config, int32_t screenSize);
void AConfiguration_setScreenWidthDp(AConfiguration *config, int32_t value);
void AConfiguration_setSdkVersion(AConfiguration *config, int32_t sdkVersion);
void AConfiguration_setSmallestScreenWidthDp(AConfiguration *config, int32_t value);
void AConfiguration_setTouchscreen(AConfiguration *config, int32_t touchscreen);
void AConfiguration_setUiModeNight(AConfiguration *config, int32_t uiModeNight);
void AConfiguration_setUiModeType(AConfiguration *config, int32_t uiModeType);
MACRO_AF AF_ALG;
MACRO_AF AF_APPLETALK;
MACRO_AF AF_ASH;
MACRO_AF AF_ATMPVC;
MACRO_AF AF_ATMSVC;
MACRO_AF AF_AX25;
MACRO_AF AF_BLUETOOTH;
MACRO_AF AF_BRIDGE;
MACRO_AF AF_CAIF;
MACRO_AF AF_CAN;
MACRO_AF AF_DECnet;
MACRO_AF AF_ECONET;
MACRO_AF AF_IEEE802154;
MACRO_AF AF_INET;
MACRO_AF AF_INET6;
MACRO_AF AF_IPX;
MACRO_AF AF_IRDA;
MACRO_AF AF_ISDN;
MACRO_AF AF_IUCV;
MACRO_AF AF_KEY;
MACRO_AF AF_LLC;
MACRO_AF AF_LOCAL;
MACRO_AF AF_MAX;
MACRO_AF AF_NETBEUI;
MACRO_AF AF_NETLINK;
MACRO_AF AF_NETROM;
MACRO_AF AF_PACKET;
MACRO_AF AF_PHONET;
MACRO_AF AF_PPPOX;
MACRO_AF AF_RDS;
MACRO_AF AF_ROSE;
MACRO_AF AF_ROUTE;
MACRO_AF AF_RXRPC;
MACRO_AF AF_SECURITY;
MACRO_AF AF_SNA;
MACRO_AF AF_TIPC;
MACRO_AF AF_UNIX;
MACRO_AF AF_UNSPEC;
MACRO_AF AF_WANPIPE;
MACRO_AF AF_X25;
$F1FBE46807403350B28214291BCCB154 AINPUT_EVENT_TYPE_KEY;
$F1FBE46807403350B28214291BCCB154 AINPUT_EVENT_TYPE_MOTION;
$33C3A92DE7424356190637196BFAB2FD AINPUT_KEYBOARD_TYPE_ALPHABETIC;
$33C3A92DE7424356190637196BFAB2FD AINPUT_KEYBOARD_TYPE_NONE;
$33C3A92DE7424356190637196BFAB2FD AINPUT_KEYBOARD_TYPE_NON_ALPHABETIC;
$8FD9CD2309289E94A8F9FFD043EF0AFD AINPUT_MOTION_RANGE_ORIENTATION;
$8FD9CD2309289E94A8F9FFD043EF0AFD AINPUT_MOTION_RANGE_PRESSURE;
$8FD9CD2309289E94A8F9FFD043EF0AFD AINPUT_MOTION_RANGE_SIZE;
$8FD9CD2309289E94A8F9FFD043EF0AFD AINPUT_MOTION_RANGE_TOOL_MAJOR;
$8FD9CD2309289E94A8F9FFD043EF0AFD AINPUT_MOTION_RANGE_TOOL_MINOR;
$8FD9CD2309289E94A8F9FFD043EF0AFD AINPUT_MOTION_RANGE_TOUCH_MAJOR;
$8FD9CD2309289E94A8F9FFD043EF0AFD AINPUT_MOTION_RANGE_TOUCH_MINOR;
$8FD9CD2309289E94A8F9FFD043EF0AFD AINPUT_MOTION_RANGE_X;
$8FD9CD2309289E94A8F9FFD043EF0AFD AINPUT_MOTION_RANGE_Y;
$6A860F0239D1D54EF2A4CDC8898EA208 AINPUT_SOURCE_ANY;
$AD64F63EA24B69117AF36AB567679717 AINPUT_SOURCE_CLASS_BUTTON;
$AD64F63EA24B69117AF36AB567679717 AINPUT_SOURCE_CLASS_JOYSTICK;
$AD64F63EA24B69117AF36AB567679717 AINPUT_SOURCE_CLASS_MASK;
$AD64F63EA24B69117AF36AB567679717 AINPUT_SOURCE_CLASS_NAVIGATION;
$AD64F63EA24B69117AF36AB567679717 AINPUT_SOURCE_CLASS_NONE;
$AD64F63EA24B69117AF36AB567679717 AINPUT_SOURCE_CLASS_POINTER;
$AD64F63EA24B69117AF36AB567679717 AINPUT_SOURCE_CLASS_POSITION;
$6A860F0239D1D54EF2A4CDC8898EA208 AINPUT_SOURCE_DPAD;
$6A860F0239D1D54EF2A4CDC8898EA208 AINPUT_SOURCE_GAMEPAD;
$6A860F0239D1D54EF2A4CDC8898EA208 AINPUT_SOURCE_JOYSTICK;
$6A860F0239D1D54EF2A4CDC8898EA208 AINPUT_SOURCE_KEYBOARD;
$6A860F0239D1D54EF2A4CDC8898EA208 AINPUT_SOURCE_MOUSE;
$6A860F0239D1D54EF2A4CDC8898EA208 AINPUT_SOURCE_STYLUS;
$6A860F0239D1D54EF2A4CDC8898EA208 AINPUT_SOURCE_TOUCHPAD;
$6A860F0239D1D54EF2A4CDC8898EA208 AINPUT_SOURCE_TOUCHSCREEN;
$6A860F0239D1D54EF2A4CDC8898EA208 AINPUT_SOURCE_TOUCH_NAVIGATION;
$6A860F0239D1D54EF2A4CDC8898EA208 AINPUT_SOURCE_TRACKBALL;
$6A860F0239D1D54EF2A4CDC8898EA208 AINPUT_SOURCE_UNKNOWN;
MACRO_AI AI_ADDRCONFIG;
MACRO_AI AI_ALL;
MACRO_AI AI_CANONNAME;
MACRO_AI AI_DEFAULT;
MACRO_AI AI_NUMERICHOST;
MACRO_AI AI_NUMERICSERV;
MACRO_AI AI_PASSIVE;
MACRO_AI AI_V4MAPPED;
MACRO_AI AI_V4MAPPED_CFG;
int32_t AInputEvent_getDeviceId(const AInputEvent *event);
int32_t AInputEvent_getSource(const AInputEvent *event);
int32_t AInputEvent_getType(const AInputEvent *event);
void AInputQueue_attachLooper(AInputQueue *queue, ALooper *looper, int ident, ALooper_callbackFunc callback, void *data);
void AInputQueue_detachLooper(AInputQueue *queue);
void AInputQueue_finishEvent(AInputQueue *queue, AInputEvent *event, int handled);
int32_t AInputQueue_getEvent(AInputQueue *queue, AInputEvent **outEvent);
int32_t AInputQueue_hasEvents(AInputQueue *queue);
int32_t AInputQueue_preDispatchEvent(AInputQueue *queue, AInputEvent *event);
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_0;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_1;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_11;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_12;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_2;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_3;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_3D_MODE;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_4;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_5;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_6;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_7;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_8;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_9;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_A;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_ALT_LEFT;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_ALT_RIGHT;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_APOSTROPHE;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_APP_SWITCH;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_ASSIST;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_AT;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_AVR_INPUT;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_AVR_POWER;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_B;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_BACK;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_BACKSLASH;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_BOOKMARK;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_BREAK;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_BRIGHTNESS_DOWN;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_BRIGHTNESS_UP;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_BUTTON_1;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_BUTTON_10;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_BUTTON_11;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_BUTTON_12;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_BUTTON_13;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_BUTTON_14;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_BUTTON_15;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_BUTTON_16;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_BUTTON_2;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_BUTTON_3;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_BUTTON_4;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_BUTTON_5;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_BUTTON_6;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_BUTTON_7;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_BUTTON_8;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_BUTTON_9;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_BUTTON_A;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_BUTTON_B;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_BUTTON_C;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_BUTTON_L1;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_BUTTON_L2;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_BUTTON_MODE;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_BUTTON_R1;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_BUTTON_R2;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_BUTTON_SELECT;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_BUTTON_START;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_BUTTON_THUMBL;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_BUTTON_THUMBR;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_BUTTON_X;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_BUTTON_Y;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_BUTTON_Z;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_C;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_CALCULATOR;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_CALENDAR;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_CALL;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_CAMERA;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_CAPS_LOCK;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_CAPTIONS;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_CHANNEL_DOWN;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_CHANNEL_UP;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_CLEAR;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_COMMA;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_CONTACTS;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_CTRL_LEFT;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_CTRL_RIGHT;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_D;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_DEL;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_DPAD_CENTER;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_DPAD_DOWN;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_DPAD_LEFT;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_DPAD_RIGHT;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_DPAD_UP;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_DVR;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_E;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_EISU;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_ENDCALL;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_ENTER;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_ENVELOPE;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_EQUALS;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_ESCAPE;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_EXPLORER;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_F;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_F1;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_F10;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_F11;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_F12;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_F2;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_F3;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_F4;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_F5;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_F6;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_F7;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_F8;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_F9;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_FOCUS;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_FORWARD;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_FORWARD_DEL;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_FUNCTION;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_G;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_GRAVE;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_GUIDE;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_H;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_HEADSETHOOK;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_HELP;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_HENKAN;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_HOME;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_I;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_INFO;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_INSERT;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_J;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_K;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_KANA;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_KATAKANA_HIRAGANA;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_L;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_LANGUAGE_SWITCH;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_LAST_CHANNEL;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_LEFT_BRACKET;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_M;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_MANNER_MODE;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_MEDIA_AUDIO_TRACK;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_MEDIA_CLOSE;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_MEDIA_EJECT;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_MEDIA_FAST_FORWARD;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_MEDIA_NEXT;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_MEDIA_PAUSE;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_MEDIA_PLAY;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_MEDIA_PLAY_PAUSE;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_MEDIA_PREVIOUS;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_MEDIA_RECORD;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_MEDIA_REWIND;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_MEDIA_STOP;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_MEDIA_TOP_MENU;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_MENU;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_META_LEFT;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_META_RIGHT;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_MINUS;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_MOVE_END;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_MOVE_HOME;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_MUHENKAN;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_MUSIC;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_MUTE;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_N;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_NOTIFICATION;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_NUM;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_NUMPAD_0;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_NUMPAD_1;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_NUMPAD_2;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_NUMPAD_3;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_NUMPAD_4;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_NUMPAD_5;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_NUMPAD_6;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_NUMPAD_7;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_NUMPAD_8;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_NUMPAD_9;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_NUMPAD_ADD;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_NUMPAD_COMMA;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_NUMPAD_DIVIDE;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_NUMPAD_DOT;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_NUMPAD_ENTER;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_NUMPAD_EQUALS;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_NUMPAD_LEFT_PAREN;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_NUMPAD_MULTIPLY;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_NUMPAD_RIGHT_PAREN;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_NUMPAD_SUBTRACT;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_NUM_LOCK;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_O;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_P;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_PAGE_DOWN;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_PAGE_UP;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_PAIRING;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_PERIOD;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_PICTSYMBOLS;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_PLUS;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_POUND;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_POWER;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_PROG_BLUE;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_PROG_GREEN;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_PROG_RED;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_PROG_YELLOW;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_Q;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_R;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_RIGHT_BRACKET;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_RO;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_S;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_SCROLL_LOCK;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_SEARCH;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_SEMICOLON;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_SETTINGS;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_SHIFT_LEFT;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_SHIFT_RIGHT;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_SLASH;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_SLEEP;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_SOFT_LEFT;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_SOFT_RIGHT;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_SPACE;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_STAR;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_STB_INPUT;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_STB_POWER;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_SWITCH_CHARSET;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_SYM;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_SYSRQ;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_T;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_TAB;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_TV;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_TV_ANTENNA_CABLE;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_TV_AUDIO_DESCRIPTION;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_TV_AUDIO_DESCRIPTION_MIX_DOWN;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_TV_AUDIO_DESCRIPTION_MIX_UP;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_TV_CONTENTS_MENU;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_TV_DATA_SERVICE;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_TV_INPUT;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_TV_INPUT_COMPONENT_1;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_TV_INPUT_COMPONENT_2;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_TV_INPUT_COMPOSITE_1;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_TV_INPUT_COMPOSITE_2;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_TV_INPUT_HDMI_1;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_TV_INPUT_HDMI_2;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_TV_INPUT_HDMI_3;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_TV_INPUT_HDMI_4;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_TV_INPUT_VGA_1;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_TV_MEDIA_CONTEXT_MENU;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_TV_NETWORK;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_TV_NUMBER_ENTRY;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_TV_POWER;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_TV_RADIO_SERVICE;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_TV_SATELLITE;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_TV_SATELLITE_BS;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_TV_SATELLITE_CS;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_TV_SATELLITE_SERVICE;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_TV_TELETEXT;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_TV_TERRESTRIAL_ANALOG;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_TV_TERRESTRIAL_DIGITAL;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_TV_TIMER_PROGRAMMING;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_TV_ZOOM_MODE;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_U;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_UNKNOWN;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_V;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_VOICE_ASSIST;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_VOLUME_DOWN;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_VOLUME_MUTE;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_VOLUME_UP;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_W;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_WAKEUP;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_WINDOW;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_X;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_Y;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_YEN;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_Z;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_ZENKAKU_HANKAKU;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_ZOOM_IN;
$8391374E526CE51103AADBB5D9199BE1 AKEYCODE_ZOOM_OUT;
$B8EBEDC710F2D2D4BF6562A77E339AD2 AKEY_EVENT_ACTION_DOWN;
$B8EBEDC710F2D2D4BF6562A77E339AD2 AKEY_EVENT_ACTION_MULTIPLE;
$B8EBEDC710F2D2D4BF6562A77E339AD2 AKEY_EVENT_ACTION_UP;
$A57BE63AFA9E7C22F20D0CC4DC1F0295 AKEY_EVENT_FLAG_CANCELED;
$A57BE63AFA9E7C22F20D0CC4DC1F0295 AKEY_EVENT_FLAG_CANCELED_LONG_PRESS;
$A57BE63AFA9E7C22F20D0CC4DC1F0295 AKEY_EVENT_FLAG_EDITOR_ACTION;
$A57BE63AFA9E7C22F20D0CC4DC1F0295 AKEY_EVENT_FLAG_FALLBACK;
$A57BE63AFA9E7C22F20D0CC4DC1F0295 AKEY_EVENT_FLAG_FROM_SYSTEM;
$A57BE63AFA9E7C22F20D0CC4DC1F0295 AKEY_EVENT_FLAG_KEEP_TOUCH_MODE;
$A57BE63AFA9E7C22F20D0CC4DC1F0295 AKEY_EVENT_FLAG_LONG_PRESS;
$A57BE63AFA9E7C22F20D0CC4DC1F0295 AKEY_EVENT_FLAG_SOFT_KEYBOARD;
$A57BE63AFA9E7C22F20D0CC4DC1F0295 AKEY_EVENT_FLAG_TRACKING;
$A57BE63AFA9E7C22F20D0CC4DC1F0295 AKEY_EVENT_FLAG_VIRTUAL_HARD_KEY;
$A57BE63AFA9E7C22F20D0CC4DC1F0295 AKEY_EVENT_FLAG_WOKE_HERE;
$F64AC3025220C98ACA937EAAAA67CC79 AKEY_STATE_DOWN;
$F64AC3025220C98ACA937EAAAA67CC79 AKEY_STATE_UNKNOWN;
$F64AC3025220C98ACA937EAAAA67CC79 AKEY_STATE_UP;
$F64AC3025220C98ACA937EAAAA67CC79 AKEY_STATE_VIRTUAL;
int32_t AKeyEvent_getAction(const AInputEvent *key_event);
int64_t AKeyEvent_getDownTime(const AInputEvent *key_event);
int64_t AKeyEvent_getEventTime(const AInputEvent *key_event);
int32_t AKeyEvent_getFlags(const AInputEvent *key_event);
int32_t AKeyEvent_getKeyCode(const AInputEvent *key_event);
int32_t AKeyEvent_getMetaState(const AInputEvent *key_event);
int32_t AKeyEvent_getRepeatCount(const AInputEvent *key_event);
int32_t AKeyEvent_getScanCode(const AInputEvent *key_event);
$FE49DD53806F6C6786D41F1B1A617458 ALOOPER_EVENT_ERROR;
$FE49DD53806F6C6786D41F1B1A617458 ALOOPER_EVENT_HANGUP;
$FE49DD53806F6C6786D41F1B1A617458 ALOOPER_EVENT_INPUT;
$FE49DD53806F6C6786D41F1B1A617458 ALOOPER_EVENT_INVALID;
$FE49DD53806F6C6786D41F1B1A617458 ALOOPER_EVENT_OUTPUT;
$04002F0402C508C6DCA950313C38753A ALOOPER_POLL_CALLBACK;
$04002F0402C508C6DCA950313C38753A ALOOPER_POLL_ERROR;
$04002F0402C508C6DCA950313C38753A ALOOPER_POLL_TIMEOUT;
$04002F0402C508C6DCA950313C38753A ALOOPER_POLL_WAKE;
$B343988F95AB2F1D8FA49E95A93C30CE ALOOPER_PREPARE_ALLOW_NON_CALLBACKS;
void ALooper_acquire(ALooper *looper);
int ALooper_addFd(ALooper *looper, int fd, int ident, int events, ALooper_callbackFunc callback, void *data);
ALooper *ALooper_forThread();
int ALooper_pollAll(int timeoutMillis, int *outFd, int *outEvents, void **outData);
int ALooper_pollOnce(int timeoutMillis, int *outFd, int *outEvents, void **outData);
ALooper *ALooper_prepare(int opts);
void ALooper_release(ALooper *looper);
int ALooper_removeFd(ALooper *looper, int fd);
void ALooper_wake(ALooper *looper);
$1EEB42125CB8A02EEEDF6B2D5DAB4486 AMETA_ALT_LEFT_ON;
$1EEB42125CB8A02EEEDF6B2D5DAB4486 AMETA_ALT_ON;
$1EEB42125CB8A02EEEDF6B2D5DAB4486 AMETA_ALT_RIGHT_ON;
$1EEB42125CB8A02EEEDF6B2D5DAB4486 AMETA_CAPS_LOCK_ON;
$1EEB42125CB8A02EEEDF6B2D5DAB4486 AMETA_CTRL_LEFT_ON;
$1EEB42125CB8A02EEEDF6B2D5DAB4486 AMETA_CTRL_ON;
$1EEB42125CB8A02EEEDF6B2D5DAB4486 AMETA_CTRL_RIGHT_ON;
$1EEB42125CB8A02EEEDF6B2D5DAB4486 AMETA_FUNCTION_ON;
$1EEB42125CB8A02EEEDF6B2D5DAB4486 AMETA_META_LEFT_ON;
$1EEB42125CB8A02EEEDF6B2D5DAB4486 AMETA_META_ON;
$1EEB42125CB8A02EEEDF6B2D5DAB4486 AMETA_META_RIGHT_ON;
$1EEB42125CB8A02EEEDF6B2D5DAB4486 AMETA_NONE;
$1EEB42125CB8A02EEEDF6B2D5DAB4486 AMETA_NUM_LOCK_ON;
$1EEB42125CB8A02EEEDF6B2D5DAB4486 AMETA_SCROLL_LOCK_ON;
$1EEB42125CB8A02EEEDF6B2D5DAB4486 AMETA_SHIFT_LEFT_ON;
$1EEB42125CB8A02EEEDF6B2D5DAB4486 AMETA_SHIFT_ON;
$1EEB42125CB8A02EEEDF6B2D5DAB4486 AMETA_SHIFT_RIGHT_ON;
$1EEB42125CB8A02EEEDF6B2D5DAB4486 AMETA_SYM_ON;
$49F8A3275CB8ABD51DE4E72706AE5CC8 AMOTION_EVENT_ACTION_CANCEL;
$49F8A3275CB8ABD51DE4E72706AE5CC8 AMOTION_EVENT_ACTION_DOWN;
$49F8A3275CB8ABD51DE4E72706AE5CC8 AMOTION_EVENT_ACTION_HOVER_ENTER;
$49F8A3275CB8ABD51DE4E72706AE5CC8 AMOTION_EVENT_ACTION_HOVER_EXIT;
$49F8A3275CB8ABD51DE4E72706AE5CC8 AMOTION_EVENT_ACTION_HOVER_MOVE;
$49F8A3275CB8ABD51DE4E72706AE5CC8 AMOTION_EVENT_ACTION_MASK;
$49F8A3275CB8ABD51DE4E72706AE5CC8 AMOTION_EVENT_ACTION_MOVE;
$49F8A3275CB8ABD51DE4E72706AE5CC8 AMOTION_EVENT_ACTION_OUTSIDE;
$49F8A3275CB8ABD51DE4E72706AE5CC8 AMOTION_EVENT_ACTION_POINTER_DOWN;
$49F8A3275CB8ABD51DE4E72706AE5CC8 AMOTION_EVENT_ACTION_POINTER_INDEX_MASK;
MACRO_AMOTION AMOTION_EVENT_ACTION_POINTER_INDEX_SHIFT;
$49F8A3275CB8ABD51DE4E72706AE5CC8 AMOTION_EVENT_ACTION_POINTER_UP;
$49F8A3275CB8ABD51DE4E72706AE5CC8 AMOTION_EVENT_ACTION_SCROLL;
$49F8A3275CB8ABD51DE4E72706AE5CC8 AMOTION_EVENT_ACTION_UP;
$3EDC26D5AD8305513B732BC9206567CE AMOTION_EVENT_AXIS_BRAKE;
$3EDC26D5AD8305513B732BC9206567CE AMOTION_EVENT_AXIS_DISTANCE;
$3EDC26D5AD8305513B732BC9206567CE AMOTION_EVENT_AXIS_GAS;
$3EDC26D5AD8305513B732BC9206567CE AMOTION_EVENT_AXIS_GENERIC_1;
$3EDC26D5AD8305513B732BC9206567CE AMOTION_EVENT_AXIS_GENERIC_10;
$3EDC26D5AD8305513B732BC9206567CE AMOTION_EVENT_AXIS_GENERIC_11;
$3EDC26D5AD8305513B732BC9206567CE AMOTION_EVENT_AXIS_GENERIC_12;
$3EDC26D5AD8305513B732BC9206567CE AMOTION_EVENT_AXIS_GENERIC_13;
$3EDC26D5AD8305513B732BC9206567CE AMOTION_EVENT_AXIS_GENERIC_14;
$3EDC26D5AD8305513B732BC9206567CE AMOTION_EVENT_AXIS_GENERIC_15;
$3EDC26D5AD8305513B732BC9206567CE AMOTION_EVENT_AXIS_GENERIC_16;
$3EDC26D5AD8305513B732BC9206567CE AMOTION_EVENT_AXIS_GENERIC_2;
$3EDC26D5AD8305513B732BC9206567CE AMOTION_EVENT_AXIS_GENERIC_3;
$3EDC26D5AD8305513B732BC9206567CE AMOTION_EVENT_AXIS_GENERIC_4;
$3EDC26D5AD8305513B732BC9206567CE AMOTION_EVENT_AXIS_GENERIC_5;
$3EDC26D5AD8305513B732BC9206567CE AMOTION_EVENT_AXIS_GENERIC_6;
$3EDC26D5AD8305513B732BC9206567CE AMOTION_EVENT_AXIS_GENERIC_7;
$3EDC26D5AD8305513B732BC9206567CE AMOTION_EVENT_AXIS_GENERIC_8;
$3EDC26D5AD8305513B732BC9206567CE AMOTION_EVENT_AXIS_GENERIC_9;
$3EDC26D5AD8305513B732BC9206567CE AMOTION_EVENT_AXIS_HAT_X;
$3EDC26D5AD8305513B732BC9206567CE AMOTION_EVENT_AXIS_HAT_Y;
$3EDC26D5AD8305513B732BC9206567CE AMOTION_EVENT_AXIS_HSCROLL;
$3EDC26D5AD8305513B732BC9206567CE AMOTION_EVENT_AXIS_LTRIGGER;
$3EDC26D5AD8305513B732BC9206567CE AMOTION_EVENT_AXIS_ORIENTATION;
$3EDC26D5AD8305513B732BC9206567CE AMOTION_EVENT_AXIS_PRESSURE;
$3EDC26D5AD8305513B732BC9206567CE AMOTION_EVENT_AXIS_RTRIGGER;
$3EDC26D5AD8305513B732BC9206567CE AMOTION_EVENT_AXIS_RUDDER;
$3EDC26D5AD8305513B732BC9206567CE AMOTION_EVENT_AXIS_RX;
$3EDC26D5AD8305513B732BC9206567CE AMOTION_EVENT_AXIS_RY;
$3EDC26D5AD8305513B732BC9206567CE AMOTION_EVENT_AXIS_RZ;
$3EDC26D5AD8305513B732BC9206567CE AMOTION_EVENT_AXIS_SIZE;
$3EDC26D5AD8305513B732BC9206567CE AMOTION_EVENT_AXIS_THROTTLE;
$3EDC26D5AD8305513B732BC9206567CE AMOTION_EVENT_AXIS_TILT;
$3EDC26D5AD8305513B732BC9206567CE AMOTION_EVENT_AXIS_TOOL_MAJOR;
$3EDC26D5AD8305513B732BC9206567CE AMOTION_EVENT_AXIS_TOOL_MINOR;
$3EDC26D5AD8305513B732BC9206567CE AMOTION_EVENT_AXIS_TOUCH_MAJOR;
$3EDC26D5AD8305513B732BC9206567CE AMOTION_EVENT_AXIS_TOUCH_MINOR;
$3EDC26D5AD8305513B732BC9206567CE AMOTION_EVENT_AXIS_VSCROLL;
$3EDC26D5AD8305513B732BC9206567CE AMOTION_EVENT_AXIS_WHEEL;
$3EDC26D5AD8305513B732BC9206567CE AMOTION_EVENT_AXIS_X;
$3EDC26D5AD8305513B732BC9206567CE AMOTION_EVENT_AXIS_Y;
$3EDC26D5AD8305513B732BC9206567CE AMOTION_EVENT_AXIS_Z;
$1A098DE8B5FD566F9A5BC3A59F895876 AMOTION_EVENT_BUTTON_BACK;
$1A098DE8B5FD566F9A5BC3A59F895876 AMOTION_EVENT_BUTTON_FORWARD;
$1A098DE8B5FD566F9A5BC3A59F895876 AMOTION_EVENT_BUTTON_PRIMARY;
$1A098DE8B5FD566F9A5BC3A59F895876 AMOTION_EVENT_BUTTON_SECONDARY;
$1A098DE8B5FD566F9A5BC3A59F895876 AMOTION_EVENT_BUTTON_TERTIARY;
$95883D125DB13DB1D57A7284B9B24EE2 AMOTION_EVENT_EDGE_FLAG_BOTTOM;
$95883D125DB13DB1D57A7284B9B24EE2 AMOTION_EVENT_EDGE_FLAG_LEFT;
$95883D125DB13DB1D57A7284B9B24EE2 AMOTION_EVENT_EDGE_FLAG_NONE;
$95883D125DB13DB1D57A7284B9B24EE2 AMOTION_EVENT_EDGE_FLAG_RIGHT;
$95883D125DB13DB1D57A7284B9B24EE2 AMOTION_EVENT_EDGE_FLAG_TOP;
$C90664CDFAFCCB655C0534A15FE08428 AMOTION_EVENT_FLAG_WINDOW_IS_OBSCURED;
$D8A37C4E5955677A821D861553F77D56 AMOTION_EVENT_TOOL_TYPE_ERASER;
$D8A37C4E5955677A821D861553F77D56 AMOTION_EVENT_TOOL_TYPE_FINGER;
$D8A37C4E5955677A821D861553F77D56 AMOTION_EVENT_TOOL_TYPE_MOUSE;
$D8A37C4E5955677A821D861553F77D56 AMOTION_EVENT_TOOL_TYPE_STYLUS;
$D8A37C4E5955677A821D861553F77D56 AMOTION_EVENT_TOOL_TYPE_UNKNOWN;
int32_t AMotionEvent_getAction(const AInputEvent *motion_event);
float AMotionEvent_getAxisValue(const AInputEvent *motion_event, int32_t axis, size_t pointer_index);
int32_t AMotionEvent_getButtonState(const AInputEvent *motion_event);
int64_t AMotionEvent_getDownTime(const AInputEvent *motion_event);
int32_t AMotionEvent_getEdgeFlags(const AInputEvent *motion_event);
int64_t AMotionEvent_getEventTime(const AInputEvent *motion_event);
int32_t AMotionEvent_getFlags(const AInputEvent *motion_event);
float AMotionEvent_getHistoricalAxisValue(const AInputEvent *motion_event, int32_t axis, size_t pointer_index, size_t history_index);
int64_t AMotionEvent_getHistoricalEventTime(const AInputEvent *motion_event, size_t history_index);
float AMotionEvent_getHistoricalOrientation(const AInputEvent *motion_event, size_t pointer_index, size_t history_index);
float AMotionEvent_getHistoricalPressure(const AInputEvent *motion_event, size_t pointer_index, size_t history_index);
float AMotionEvent_getHistoricalRawX(const AInputEvent *motion_event, size_t pointer_index, size_t history_index);
float AMotionEvent_getHistoricalRawY(const AInputEvent *motion_event, size_t pointer_index, size_t history_index);
float AMotionEvent_getHistoricalSize(const AInputEvent *motion_event, size_t pointer_index, size_t history_index);
float AMotionEvent_getHistoricalToolMajor(const AInputEvent *motion_event, size_t pointer_index, size_t history_index);
float AMotionEvent_getHistoricalToolMinor(const AInputEvent *motion_event, size_t pointer_index, size_t history_index);
float AMotionEvent_getHistoricalTouchMajor(const AInputEvent *motion_event, size_t pointer_index, size_t history_index);
float AMotionEvent_getHistoricalTouchMinor(const AInputEvent *motion_event, size_t pointer_index, size_t history_index);
float AMotionEvent_getHistoricalX(const AInputEvent *motion_event, size_t pointer_index, size_t history_index);
float AMotionEvent_getHistoricalY(const AInputEvent *motion_event, size_t pointer_index, size_t history_index);
size_t AMotionEvent_getHistorySize(const AInputEvent *motion_event);
int32_t AMotionEvent_getMetaState(const AInputEvent *motion_event);
float AMotionEvent_getOrientation(const AInputEvent *motion_event, size_t pointer_index);
size_t AMotionEvent_getPointerCount(const AInputEvent *motion_event);
int32_t AMotionEvent_getPointerId(const AInputEvent *motion_event, size_t pointer_index);
float AMotionEvent_getPressure(const AInputEvent *motion_event, size_t pointer_index);
float AMotionEvent_getRawX(const AInputEvent *motion_event, size_t pointer_index);
float AMotionEvent_getRawY(const AInputEvent *motion_event, size_t pointer_index);
float AMotionEvent_getSize(const AInputEvent *motion_event, size_t pointer_index);
float AMotionEvent_getToolMajor(const AInputEvent *motion_event, size_t pointer_index);
float AMotionEvent_getToolMinor(const AInputEvent *motion_event, size_t pointer_index);
int32_t AMotionEvent_getToolType(const AInputEvent *motion_event, size_t pointer_index);
float AMotionEvent_getTouchMajor(const AInputEvent *motion_event, size_t pointer_index);
float AMotionEvent_getTouchMinor(const AInputEvent *motion_event, size_t pointer_index);
float AMotionEvent_getX(const AInputEvent *motion_event, size_t pointer_index);
float AMotionEvent_getXOffset(const AInputEvent *motion_event);
float AMotionEvent_getXPrecision(const AInputEvent *motion_event);
float AMotionEvent_getY(const AInputEvent *motion_event, size_t pointer_index);
float AMotionEvent_getYOffset(const AInputEvent *motion_event);
float AMotionEvent_getYPrecision(const AInputEvent *motion_event);
$A3DE050FA3F4C661374A5EDCE5929D78 ANATIVEACTIVITY_HIDE_SOFT_INPUT_IMPLICIT_ONLY;
$A3DE050FA3F4C661374A5EDCE5929D78 ANATIVEACTIVITY_HIDE_SOFT_INPUT_NOT_ALWAYS;
$43465BD039ADFB836688E81ACF130360 ANATIVEACTIVITY_SHOW_SOFT_INPUT_FORCED;
$43465BD039ADFB836688E81ACF130360 ANATIVEACTIVITY_SHOW_SOFT_INPUT_IMPLICIT;
AndroidBitmapFormat ANDROID_BITMAP_FORMAT_A_8;
AndroidBitmapFormat ANDROID_BITMAP_FORMAT_NONE;
AndroidBitmapFormat ANDROID_BITMAP_FORMAT_RGBA_4444;
AndroidBitmapFormat ANDROID_BITMAP_FORMAT_RGBA_8888;
AndroidBitmapFormat ANDROID_BITMAP_FORMAT_RGB_565;
MACRO_ANDROID ANDROID_BITMAP_RESULT_ALLOCATION_FAILED;
MACRO_ANDROID ANDROID_BITMAP_RESULT_BAD_PARAMETER;
MACRO_ANDROID ANDROID_BITMAP_RESULT_JNI_EXCEPTION;
MACRO_ANDROID ANDROID_BITMAP_RESULT_SUCCESS;
MACRO_ANDROID ANDROID_BITMAP_RESUT_SUCCESS;
$DCE88B22097C19B754359F67EC2BAC42 ANDROID_DLEXT_RESERVED_ADDRESS;
$DCE88B22097C19B754359F67EC2BAC42 ANDROID_DLEXT_RESERVED_ADDRESS_HINT;
$DCE88B22097C19B754359F67EC2BAC42 ANDROID_DLEXT_USE_LIBRARY_FD;
$DCE88B22097C19B754359F67EC2BAC42 ANDROID_DLEXT_USE_RELRO;
$DCE88B22097C19B754359F67EC2BAC42 ANDROID_DLEXT_VALID_FLAG_BITS;
$DCE88B22097C19B754359F67EC2BAC42 ANDROID_DLEXT_WRITE_RELRO;
android_LogPriority ANDROID_LOG_DEBUG;
android_LogPriority ANDROID_LOG_DEFAULT;
android_LogPriority ANDROID_LOG_ERROR;
android_LogPriority ANDROID_LOG_FATAL;
android_LogPriority ANDROID_LOG_INFO;
android_LogPriority ANDROID_LOG_SILENT;
android_LogPriority ANDROID_LOG_UNKNOWN;
android_LogPriority ANDROID_LOG_VERBOSE;
android_LogPriority ANDROID_LOG_WARN;
$294E6B22D2C7C3462ECC5C21F28E2210 ANDROID_TTS_AUDIO_FORMAT_DEFAULT;
$294E6B22D2C7C3462ECC5C21F28E2210 ANDROID_TTS_AUDIO_FORMAT_INVALID;
$294E6B22D2C7C3462ECC5C21F28E2210 ANDROID_TTS_AUDIO_FORMAT_PCM_16_BIT;
$294E6B22D2C7C3462ECC5C21F28E2210 ANDROID_TTS_AUDIO_FORMAT_PCM_8_BIT;
$89669B75FFFA2E86F49C9A03322F5AA7 ANDROID_TTS_CALLBACK_CONTINUE;
$89669B75FFFA2E86F49C9A03322F5AA7 ANDROID_TTS_CALLBACK_HALT;
$2DFCE81C22045DA5588F32BE57F779B3 ANDROID_TTS_FAILURE;
$2DFCE81C22045DA5588F32BE57F779B3 ANDROID_TTS_FEATURE_UNSUPPORTED;
$4139C7DF365D5434A7E6C4EAB6785B55 ANDROID_TTS_LANG_AVAILABLE;
$4139C7DF365D5434A7E6C4EAB6785B55 ANDROID_TTS_LANG_COUNTRY_AVAILABLE;
$4139C7DF365D5434A7E6C4EAB6785B55 ANDROID_TTS_LANG_COUNTRY_VAR_AVAILABLE;
$4139C7DF365D5434A7E6C4EAB6785B55 ANDROID_TTS_LANG_MISSING_DATA;
$4139C7DF365D5434A7E6C4EAB6785B55 ANDROID_TTS_LANG_NOT_SUPPORTED;
$2DFCE81C22045DA5588F32BE57F779B3 ANDROID_TTS_MISSING_RESOURCES;
$2DFCE81C22045DA5588F32BE57F779B3 ANDROID_TTS_PROPERTY_SIZE_TOO_SMALL;
$2DFCE81C22045DA5588F32BE57F779B3 ANDROID_TTS_PROPERTY_UNSUPPORTED;
$2DFCE81C22045DA5588F32BE57F779B3 ANDROID_TTS_SUCCESS;
$A66A407457C3F86F0D5D01263F39DB8B ANDROID_TTS_SYNTH_DONE;
$A66A407457C3F86F0D5D01263F39DB8B ANDROID_TTS_SYNTH_PENDING;
$2DFCE81C22045DA5588F32BE57F779B3 ANDROID_TTS_VALUE_INVALID;
void ANativeActivity_finish(ANativeActivity *activity);
void ANativeActivity_hideSoftInput(ANativeActivity *activity, uint32_t flags);
ANativeActivity_createFunc ANativeActivity_onCreate;
void ANativeActivity_setWindowFlags(ANativeActivity *activity, uint32_t addFlags, uint32_t removeFlags);
void ANativeActivity_setWindowFormat(ANativeActivity *activity, int32_t format);
void ANativeActivity_showSoftInput(ANativeActivity *activity, uint32_t flags);
void ANativeWindow_acquire(ANativeWindow *window);
ANativeWindow *ANativeWindow_fromSurface(JNIEnv *env, jobject surface);
int32_t ANativeWindow_getFormat(ANativeWindow *window);
int32_t ANativeWindow_getHeight(ANativeWindow *window);
int32_t ANativeWindow_getWidth(ANativeWindow *window);
int32_t ANativeWindow_lock(ANativeWindow *window, ANativeWindow_Buffer *outBuffer, ARect *inOutDirtyBounds);
void ANativeWindow_release(ANativeWindow *window);
int32_t ANativeWindow_setBuffersGeometry(ANativeWindow *window, int32_t width, int32_t height, int32_t format);
int32_t ANativeWindow_unlockAndPost(ANativeWindow *window);
$B82DD008134C41CE6745BEDF33E8A9EF AOBBINFO_OVERLAY;
$FFDA7144AC23E088DA23CB4BAD3742B2 AOBB_STATE_ERROR_ALREADY_MOUNTED;
$FFDA7144AC23E088DA23CB4BAD3742B2 AOBB_STATE_ERROR_COULD_NOT_MOUNT;
$FFDA7144AC23E088DA23CB4BAD3742B2 AOBB_STATE_ERROR_COULD_NOT_UNMOUNT;
$FFDA7144AC23E088DA23CB4BAD3742B2 AOBB_STATE_ERROR_INTERNAL;
$FFDA7144AC23E088DA23CB4BAD3742B2 AOBB_STATE_ERROR_NOT_MOUNTED;
$FFDA7144AC23E088DA23CB4BAD3742B2 AOBB_STATE_ERROR_PERMISSION_DENIED;
$FFDA7144AC23E088DA23CB4BAD3742B2 AOBB_STATE_MOUNTED;
$FFDA7144AC23E088DA23CB4BAD3742B2 AOBB_STATE_UNMOUNTED;
void AObbInfo_delete(AObbInfo *obbInfo);
int32_t AObbInfo_getFlags(AObbInfo *obbInfo);
const char *AObbInfo_getPackageName(AObbInfo *obbInfo);
int32_t AObbInfo_getVersion(AObbInfo *obbInfo);
AObbInfo *AObbScanner_getObbInfo(const char *filename);
$813B786A03EC45D0D5359DBC0989DB3C AREPORTING_MODE_CONTINUOUS;
$813B786A03EC45D0D5359DBC0989DB3C AREPORTING_MODE_ONE_SHOT;
$813B786A03EC45D0D5359DBC0989DB3C AREPORTING_MODE_ON_CHANGE;
$813B786A03EC45D0D5359DBC0989DB3C AREPORTING_MODE_SPECIAL_TRIGGER;
$0A08CFE9374656399FFB4BF5C54E6AAD ASENSOR_STATUS_ACCURACY_HIGH;
$0A08CFE9374656399FFB4BF5C54E6AAD ASENSOR_STATUS_ACCURACY_LOW;
$0A08CFE9374656399FFB4BF5C54E6AAD ASENSOR_STATUS_ACCURACY_MEDIUM;
$0A08CFE9374656399FFB4BF5C54E6AAD ASENSOR_STATUS_NO_CONTACT;
$0A08CFE9374656399FFB4BF5C54E6AAD ASENSOR_STATUS_UNRELIABLE;
$BF3B02121B7CEC921D6E601970F9B0F9 ASENSOR_TYPE_ACCELEROMETER;
$BF3B02121B7CEC921D6E601970F9B0F9 ASENSOR_TYPE_GYROSCOPE;
$BF3B02121B7CEC921D6E601970F9B0F9 ASENSOR_TYPE_LIGHT;
$BF3B02121B7CEC921D6E601970F9B0F9 ASENSOR_TYPE_MAGNETIC_FIELD;
$BF3B02121B7CEC921D6E601970F9B0F9 ASENSOR_TYPE_PROXIMITY;
int ASensorEventQueue_disableSensor(ASensorEventQueue *queue, const ASensor *sensor);
int ASensorEventQueue_enableSensor(ASensorEventQueue *queue, const ASensor *sensor);
ssize_t ASensorEventQueue_getEvents(ASensorEventQueue *queue, ASensorEvent *events, size_t count);
int ASensorEventQueue_hasEvents(ASensorEventQueue *queue);
int ASensorEventQueue_setEventRate(ASensorEventQueue *queue, const ASensor *sensor, int32_t usec);
ASensorEventQueue *ASensorManager_createEventQueue(ASensorManager *manager, ALooper *looper, int ident, ALooper_callbackFunc callback, void *data);
int ASensorManager_destroyEventQueue(ASensorManager *manager, ASensorEventQueue *queue);
const ASensor *ASensorManager_getDefaultSensor(ASensorManager *manager, int type);
const ASensor *ASensorManager_getDefaultSensorEx(ASensorManager *manager, int type, bool wakeUp);
ASensorManager *ASensorManager_getInstance();
int ASensorManager_getSensorList(ASensorManager *manager, ASensorList *list);
int ASensor_getFifoMaxEventCount(const ASensor *sensor);
int ASensor_getFifoReservedEventCount(const ASensor *sensor);
int ASensor_getMinDelay(const ASensor *sensor);
const char *ASensor_getName(const ASensor *sensor);
int ASensor_getReportingMode(const ASensor *sensor);
float ASensor_getResolution(const ASensor *sensor);
const char *ASensor_getStringType(const ASensor *sensor);
int ASensor_getType(const ASensor *sensor);
const char *ASensor_getVendor(const ASensor *sensor);
bool ASensor_isWakeUpSensor(const ASensor *sensor);
void AStorageManager_delete(AStorageManager *mgr);
const char *AStorageManager_getMountedObbPath(AStorageManager *mgr, const char *filename);
int AStorageManager_isObbMounted(AStorageManager *mgr, const char *filename);
void AStorageManager_mountObb(AStorageManager *mgr, const char *filename, const char *key, AStorageManager_obbCallbackFunc cb, void *data);
AStorageManager *AStorageManager_new();
void AStorageManager_unmountObb(AStorageManager *mgr, const char *filename, const int force, AStorageManager_obbCallbackFunc cb, void *data);
void ATrace_beginSection(const char *sectionName);
void ATrace_endSection();
bool ATrace_isEnabled();
$6CF558C41A0BF1C80174ADD62A6DBE10 AWINDOW_FLAG_ALLOW_LOCK_WHILE_SCREEN_ON;
$6CF558C41A0BF1C80174ADD62A6DBE10 AWINDOW_FLAG_ALT_FOCUSABLE_IM;
$6CF558C41A0BF1C80174ADD62A6DBE10 AWINDOW_FLAG_BLUR_BEHIND;
$6CF558C41A0BF1C80174ADD62A6DBE10 AWINDOW_FLAG_DIM_BEHIND;
$6CF558C41A0BF1C80174ADD62A6DBE10 AWINDOW_FLAG_DISMISS_KEYGUARD;
$6CF558C41A0BF1C80174ADD62A6DBE10 AWINDOW_FLAG_DITHER;
$6CF558C41A0BF1C80174ADD62A6DBE10 AWINDOW_FLAG_FORCE_NOT_FULLSCREEN;
$6CF558C41A0BF1C80174ADD62A6DBE10 AWINDOW_FLAG_FULLSCREEN;
$6CF558C41A0BF1C80174ADD62A6DBE10 AWINDOW_FLAG_IGNORE_CHEEK_PRESSES;
$6CF558C41A0BF1C80174ADD62A6DBE10 AWINDOW_FLAG_KEEP_SCREEN_ON;
$6CF558C41A0BF1C80174ADD62A6DBE10 AWINDOW_FLAG_LAYOUT_INSET_DECOR;
$6CF558C41A0BF1C80174ADD62A6DBE10 AWINDOW_FLAG_LAYOUT_IN_SCREEN;
$6CF558C41A0BF1C80174ADD62A6DBE10 AWINDOW_FLAG_LAYOUT_NO_LIMITS;
$6CF558C41A0BF1C80174ADD62A6DBE10 AWINDOW_FLAG_NOT_FOCUSABLE;
$6CF558C41A0BF1C80174ADD62A6DBE10 AWINDOW_FLAG_NOT_TOUCHABLE;
$6CF558C41A0BF1C80174ADD62A6DBE10 AWINDOW_FLAG_NOT_TOUCH_MODAL;
$6CF558C41A0BF1C80174ADD62A6DBE10 AWINDOW_FLAG_SCALED;
$6CF558C41A0BF1C80174ADD62A6DBE10 AWINDOW_FLAG_SECURE;
$6CF558C41A0BF1C80174ADD62A6DBE10 AWINDOW_FLAG_SHOW_WALLPAPER;
$6CF558C41A0BF1C80174ADD62A6DBE10 AWINDOW_FLAG_SHOW_WHEN_LOCKED;
$6CF558C41A0BF1C80174ADD62A6DBE10 AWINDOW_FLAG_TOUCHABLE_WHEN_WAKING;
$6CF558C41A0BF1C80174ADD62A6DBE10 AWINDOW_FLAG_TURN_SCREEN_ON;
$6CF558C41A0BF1C80174ADD62A6DBE10 AWINDOW_FLAG_WATCH_OUTSIDE_TOUCH;
int AndroidBitmap_getInfo(JNIEnv *env, jobject jbitmap, AndroidBitmapInfo *info);
int AndroidBitmap_lockPixels(JNIEnv *env, jobject jbitmap, void **addrPtr);
int AndroidBitmap_unlockPixels(JNIEnv *env, jobject jbitmap);
MACRO_EAI EAI_ADDRFAMILY;
MACRO_EAI EAI_AGAIN;
MACRO_EAI EAI_BADFLAGS;
MACRO_EAI EAI_BADHINTS;
MACRO_EAI EAI_FAIL;
MACRO_EAI EAI_FAMILY;
MACRO_EAI EAI_MAX;
MACRO_EAI EAI_MEMORY;
MACRO_EAI EAI_NODATA;
MACRO_EAI EAI_NONAME;
MACRO_EAI EAI_OVERFLOW;
MACRO_EAI EAI_PROTOCOL;
MACRO_EAI EAI_SERVICE;
MACRO_EAI EAI_SOCKTYPE;
MACRO_EAI EAI_SYSTEM;
MACRO_EXIT EXIT_FAILURE;
MACRO_EXIT EXIT_SUCCESS;
MACRO_FASYNC FASYNC;
MACRO_FD FD_CLOEXEC;
MACRO_FIOGETOWN FIOGETOWN;
MACRO_FIOSETOWN FIOSETOWN;
MACRO_F F_DUPFD;
MACRO_F_RDLCK F_EXLCK;
MACRO_F F_GETFD;
MACRO_F F_GETFL;
MACRO_F F_GETLK;
MACRO_F F_GETLK64;
MACRO_F F_GETOWN;
MACRO_F F_GETOWNER_UIDS;
MACRO_F F_GETOWN_EX;
MACRO_F F_GETSIG;
MACRO_F_LINUX F_LINUX_SPECIFIC_BASE;
MACRO_F F_OWNER_PGRP;
MACRO_F F_OWNER_PID;
MACRO_F F_OWNER_TID;
MACRO_F_RDLCK F_RDLCK;
MACRO_F F_SETFD;
MACRO_F F_SETFL;
MACRO_F F_SETLK;
MACRO_F F_SETLK64;
MACRO_F F_SETLKW;
MACRO_F F_SETLKW64;
MACRO_F F_SETOWN;
MACRO_F F_SETOWN_EX;
MACRO_F F_SETSIG;
MACRO_F_RDLCK F_SHLCK;
MACRO_F_RDLCK F_UNLCK;
MACRO_F_RDLCK F_WRLCK;
MACRO_HOST HOST_NOT_FOUND;
MACRO_INT16 INT16_MAX;
MACRO_INT16 INT16_MIN;
MACRO_INT32 INT32_MAX;
MACRO_INT32 INT32_MIN;
MACRO_INT64 INT64_MAX;
MACRO_INT64 INT64_MIN;
MACRO_INT8 INT8_MAX;
MACRO_INT8 INT8_MIN;
MACRO_INTMAX INTMAX_MAX;
MACRO_INTMAX INTMAX_MIN;
MACRO_INTPTR INTPTR_MAX;
MACRO_INTPTR INTPTR_MIN;
MACRO_INT_LEAST32 INT_FAST32_MAX;
MACRO_INT_LEAST32 INT_FAST32_MIN;
MACRO_INT_LEAST64 INT_FAST64_MAX;
MACRO_INT_LEAST64 INT_FAST64_MIN;
MACRO_INT INT_FAST8_MAX;
MACRO_INT INT_FAST8_MIN;
MACRO_INT_LEAST16 INT_LEAST16_MAX;
MACRO_INT_LEAST16 INT_LEAST16_MIN;
MACRO_INT_LEAST32 INT_LEAST32_MAX;
MACRO_INT_LEAST32 INT_LEAST32_MIN;
MACRO_INT_LEAST64 INT_LEAST64_MAX;
MACRO_INT_LEAST64 INT_LEAST64_MIN;
MACRO_INT INT_LEAST8_MAX;
MACRO_INT INT_LEAST8_MIN;
MACRO_IPX IPX_TYPE;
jobjectRefType JNIGlobalRefType;
jobjectRefType JNIInvalidRefType;
jobjectRefType JNILocalRefType;
jobjectRefType JNIWeakGlobalRefType;
MACRO_JNI JNI_ABORT;
MACRO_JNI JNI_COMMIT;
MACRO_JNI JNI_EDETACHED;
MACRO_JNI JNI_ERR;
MACRO_JNI JNI_EVERSION;
MACRO_JNI JNI_FALSE;
MACRO_JNI JNI_OK;
jint JNI_OnLoad(JavaVM *vm, void *reserved);
void JNI_OnUnload(JavaVM *vm, void *reserved);
MACRO_JNI JNI_TRUE;
MACRO_JNI JNI_VERSION_1_1;
MACRO_JNI JNI_VERSION_1_2;
MACRO_JNI JNI_VERSION_1_4;
MACRO_JNI JNI_VERSION_1_6;
MACRO_LOCK LOCK_EX;
MACRO_LOCK LOCK_MAND;
MACRO_LOCK LOCK_NB;
MACRO_LOCK LOCK_READ;
MACRO_LOCK LOCK_RW;
MACRO_LOCK LOCK_SH;
MACRO_LOCK LOCK_UN;
MACRO_LOCK LOCK_WRITE;
MACRO_MAXHOSTNAMELEN MAXHOSTNAMELEN;
MACRO_MSG MSG_CMSG_CLOEXEC;
MACRO_MSG MSG_CMSG_COMPAT;
MACRO_MSG MSG_CONFIRM;
MACRO_MSG MSG_CTRUNC;
MACRO_MSG MSG_DONTROUTE;
MACRO_MSG MSG_DONTWAIT;
MACRO_MSG MSG_EOF;
MACRO_MSG MSG_EOR;
MACRO_MSG MSG_ERRQUEUE;
MACRO_MSG MSG_FASTOPEN;
MACRO_MSG MSG_FIN;
MACRO_MSG MSG_MORE;
MACRO_MSG MSG_NOSIGNAL;
MACRO_MSG MSG_OOB;
MACRO_MSG MSG_PEEK;
MACRO_MSG MSG_PROBE;
MACRO_MSG MSG_RST;
MACRO_MSG MSG_SYN;
MACRO_MSG MSG_TRUNC;
MACRO_MSG MSG_TRYHARD;
MACRO_MSG MSG_WAITALL;
MACRO_MSG MSG_WAITFORONE;
MACRO_NETDB NETDB_INTERNAL;
MACRO_NETDB NETDB_SUCCESS;
MACRO_NETWORK NETWORK_UNSPECIFIED;
MACRO_NI NI_DGRAM;
MACRO_NI NI_MAXHOST;
MACRO_NI NI_MAXSERV;
MACRO_NI NI_NAMEREQD;
MACRO_NI NI_NOFQDN;
MACRO_NI NI_NUMERICHOST;
MACRO_NI NI_NUMERICSERV;
MACRO_NO NO_ADDRESS;
MACRO_NO NO_DATA;
MACRO_NO NO_RECOVERY;
MACRO_NULL NULL;
MACRO_O O_ACCMODE;
MACRO_O O_APPEND;
MACRO_O_NOATIME O_CLOEXEC;
MACRO_O O_CREAT;
MACRO_O O_DIRECT;
MACRO_O O_DIRECTORY;
MACRO_O O_DSYNC;
MACRO_O O_EXCL;
MACRO_O O_LARGEFILE;
MACRO_O_TMPFILE O_NDELAY;
MACRO_O_NOATIME O_NOATIME;
MACRO_O O_NOCTTY;
MACRO_O O_NOFOLLOW;
MACRO_O O_NONBLOCK;
MACRO_O_PATH O_PATH;
MACRO_O O_RDONLY;
MACRO_O O_RDWR;
MACRO_SYNC O_SYNC;
MACRO_TMPFILE O_TMPFILE;
MACRO_O_TMPFILE O_TMPFILE_MASK;
MACRO_O O_TRUNC;
MACRO_O O_WRONLY;
MACRO_PF PF_ALG;
MACRO_PF PF_APPLETALK;
MACRO_PF PF_ASH;
MACRO_PF PF_ATMPVC;
MACRO_PF PF_ATMSVC;
MACRO_PF PF_AX25;
MACRO_PF PF_BLUETOOTH;
MACRO_PF PF_BRIDGE;
MACRO_PF PF_CAIF;
MACRO_PF PF_CAN;
MACRO_PF PF_DECnet;
MACRO_PF PF_ECONET;
MACRO_PF PF_IEEE802154;
MACRO_PF PF_INET;
MACRO_PF PF_INET6;
MACRO_PF PF_IPX;
MACRO_PF PF_IRDA;
MACRO_PF PF_ISDN;
MACRO_PF PF_IUCV;
MACRO_PF PF_KEY;
MACRO_PF PF_LLC;
MACRO_PF PF_LOCAL;
MACRO_PF PF_MAX;
MACRO_PF PF_NETBEUI;
MACRO_PF PF_NETLINK;
MACRO_PF PF_NETROM;
MACRO_PF PF_PACKET;
MACRO_PF PF_PHONET;
MACRO_PF PF_PPPOX;
MACRO_PF PF_RDS;
MACRO_PF PF_ROSE;
MACRO_PF PF_ROUTE;
MACRO_PF PF_RXRPC;
MACRO_PF PF_SECURITY;
MACRO_PF PF_SNA;
MACRO_PF PF_TIPC;
MACRO_PF PF_UNIX;
MACRO_PF PF_UNSPEC;
MACRO_PF PF_WANPIPE;
MACRO_PF PF_X25;
MACRO_PTRDIFF PTRDIFF_MAX;
MACRO_PTRDIFF PTRDIFF_MIN;
MACRO_RAND RAND_MAX;
MACRO_SCM_RIGHTS SCM_CREDENTIALS;
MACRO_SCM_RIGHTS SCM_RIGHTS;
MACRO_SCM_RIGHTS SCM_SECURITY;
MACRO_SCM SCM_TIMESTAMP;
MACRO_SCM_TIMESTAMPING SCM_TIMESTAMPING;
MACRO_SCM_TIMESTAMPNS SCM_TIMESTAMPNS;
MACRO_SCM_WIFI SCM_WIFI_STATUS;
MACRO_SCOPE SCOPE_DELIMITER;
$B34E6FF94D606ADE7B24EB7AB8A02C61 SHUT_RD;
$B34E6FF94D606ADE7B24EB7AB8A02C61 SHUT_RDWR;
$B34E6FF94D606ADE7B24EB7AB8A02C61 SHUT_WR;
MACRO_UINTMAX SIG_ATOMIC_MAX;
MACRO_SIG SIG_ATOMIC_MIN;
MACRO_SIOCADDDLCI SIOCADDDLCI;
MACRO_SIOCADDMULTI SIOCADDMULTI;
MACRO_SIOCADDRT SIOCADDRT;
MACRO_SIOCATMARK SIOCATMARK;
MACRO_SIOCBONDCHANGEACTIVE SIOCBONDCHANGEACTIVE;
MACRO_SIOCBONDENSLAVE SIOCBONDENSLAVE;
MACRO_SIOCBONDINFOQUERY SIOCBONDINFOQUERY;
MACRO_SIOCBONDRELEASE SIOCBONDRELEASE;
MACRO_SIOCBONDSETHWADDR SIOCBONDSETHWADDR;
MACRO_SIOCBONDSLAVEINFOQUERY SIOCBONDSLAVEINFOQUERY;
MACRO_SIOCBRADDBR SIOCBRADDBR;
MACRO_SIOCBRADDIF SIOCBRADDIF;
MACRO_SIOCBRDELBR SIOCBRDELBR;
MACRO_SIOCBRDELIF SIOCBRDELIF;
MACRO_SIOCDARP SIOCDARP;
MACRO_SIOCDELDLCI SIOCDELDLCI;
MACRO_SIOCDELMULTI SIOCDELMULTI;
MACRO_SIOCDELRT SIOCDELRT;
MACRO_SIOCDEVPRIVATE SIOCDEVPRIVATE;
MACRO_SIOCDIFADDR SIOCDIFADDR;
MACRO_SIOCDRARP SIOCDRARP;
MACRO_SIOCETHTOOL SIOCETHTOOL;
MACRO_SIOCGARP SIOCGARP;
MACRO_SIOCGHWTSTAMP SIOCGHWTSTAMP;
MACRO_SIOCGIFADDR SIOCGIFADDR;
MACRO_SIOCGIFBR SIOCGIFBR;
MACRO_SIOCGIFBRDADDR SIOCGIFBRDADDR;
MACRO_SIOCGIFCONF SIOCGIFCONF;
MACRO_SIOCGIFCOUNT SIOCGIFCOUNT;
MACRO_SIOCGIFDSTADDR SIOCGIFDSTADDR;
MACRO_SIOCGIFENCAP SIOCGIFENCAP;
MACRO_SIOCGIFFLAGS SIOCGIFFLAGS;
MACRO_SIOCGIFHWADDR SIOCGIFHWADDR;
MACRO_SIOCGIFINDEX SIOCGIFINDEX;
MACRO_SIOCGIFMAP SIOCGIFMAP;
MACRO_SIOCGIFMEM SIOCGIFMEM;
MACRO_SIOCGIFMETRIC SIOCGIFMETRIC;
MACRO_SIOCGIFMTU SIOCGIFMTU;
MACRO_SIOCGIFNAME SIOCGIFNAME;
MACRO_SIOCGIFNETMASK SIOCGIFNETMASK;
MACRO_SIOCGIFPFLAGS SIOCGIFPFLAGS;
MACRO_SIOCGIFSLAVE SIOCGIFSLAVE;
MACRO_SIOCGIFTXQLEN SIOCGIFTXQLEN;
MACRO_SIOCGIFVLAN SIOCGIFVLAN;
MACRO_SIOCGMIIPHY SIOCGMIIPHY;
MACRO_SIOCGMIIREG SIOCGMIIREG;
MACRO_SIOCGPGRP SIOCGPGRP;
MACRO_SIOCGRARP SIOCGRARP;
MACRO_SIOCGSTAMP SIOCGSTAMP;
MACRO_SIOCGSTAMPNS SIOCGSTAMPNS;
MACRO_SIOCOUTQNSD SIOCOUTQNSD;
MACRO_SIOCPROTOPRIVATE SIOCPROTOPRIVATE;
MACRO_SIOCRTMSG SIOCRTMSG;
MACRO_SIOCSARP SIOCSARP;
MACRO_SIOCSHWTSTAMP SIOCSHWTSTAMP;
MACRO_SIOCSIFADDR SIOCSIFADDR;
MACRO_SIOCSIFBR SIOCSIFBR;
MACRO_SIOCSIFBRDADDR SIOCSIFBRDADDR;
MACRO_SIOCSIFDSTADDR SIOCSIFDSTADDR;
MACRO_SIOCSIFENCAP SIOCSIFENCAP;
MACRO_SIOCSIFFLAGS SIOCSIFFLAGS;
MACRO_SIOCSIFHWADDR SIOCSIFHWADDR;
MACRO_SIOCSIFHWBROADCAST SIOCSIFHWBROADCAST;
MACRO_SIOCSIFLINK SIOCSIFLINK;
MACRO_SIOCSIFMAP SIOCSIFMAP;
MACRO_SIOCSIFMEM SIOCSIFMEM;
MACRO_SIOCSIFMETRIC SIOCSIFMETRIC;
MACRO_SIOCSIFMTU SIOCSIFMTU;
MACRO_SIOCSIFNAME SIOCSIFNAME;
MACRO_SIOCSIFNETMASK SIOCSIFNETMASK;
MACRO_SIOCSIFPFLAGS SIOCSIFPFLAGS;
MACRO_SIOCSIFSLAVE SIOCSIFSLAVE;
MACRO_SIOCSIFTXQLEN SIOCSIFTXQLEN;
MACRO_SIOCSIFVLAN SIOCSIFVLAN;
MACRO_SIOCSMIIREG SIOCSMIIREG;
MACRO_SIOCSPGRP SIOCSPGRP;
MACRO_SIOCSRARP SIOCSRARP;
MACRO_SIOCWANDEV SIOCWANDEV;
MACRO_SIOGIFINDEX SIOGIFINDEX;
MACRO_SIZE SIZE_MAX;
MACRO_SOCK SOCK_CLOEXEC;
MACRO_SOCK SOCK_DGRAM;
MACRO_SOCK SOCK_NONBLOCK;
MACRO_SOCK SOCK_PACKET;
MACRO_SOCK SOCK_RAW;
MACRO_SOCK SOCK_RDM;
MACRO_SOCK SOCK_SEQPACKET;
MACRO_SOCK SOCK_STREAM;
MACRO_SOL_IP SOL_AAL;
MACRO_SOL_IP SOL_ATALK;
MACRO_SOL_IP SOL_ATM;
MACRO_SOL_IP SOL_AX25;
MACRO_SOL_IP SOL_DCCP;
MACRO_SOL_IP SOL_DECNET;
MACRO_SOL_IP SOL_ICMPV6;
MACRO_SOL_IP SOL_IP;
MACRO_SOL_IP SOL_IPV6;
MACRO_SOL_IP SOL_IPX;
MACRO_SOL_IP SOL_IRDA;
MACRO_SOL_IP SOL_LLC;
MACRO_SOL_IP SOL_NETBEUI;
MACRO_SOL_IP SOL_NETLINK;
MACRO_SOL_IP SOL_NETROM;
MACRO_SOL_IP SOL_PACKET;
MACRO_SOL_IP SOL_RAW;
MACRO_SOL_IP SOL_ROSE;
MACRO_SOL_IP SOL_SCTP;
MACRO_SOL SOL_SOCKET;
MACRO_SOL_IP SOL_TCP;
MACRO_SOL_IP SOL_TIPC;
MACRO_SOL_IP SOL_UDP;
MACRO_SOL_IP SOL_X25;
MACRO_SOMAXCONN SOMAXCONN;
MACRO_SO_ACCEPTCONN SO_ACCEPTCONN;
MACRO_SO SO_ATTACH_FILTER;
MACRO_SO SO_BINDTODEVICE;
MACRO_SO_PEEK SO_BPF_EXTENSIONS;
MACRO_SO SO_BROADCAST;
MACRO_SO SO_BSDCOMPAT;
MACRO_SO_PEEK SO_BUSY_POLL;
MACRO_SO SO_DEBUG;
MACRO_SO SO_DETACH_FILTER;
MACRO_SO_PROTOCOL SO_DOMAIN;
MACRO_SO SO_DONTROUTE;
MACRO_SO SO_ERROR;
MACRO_SO SO_GET_FILTER;
MACRO_SO SO_KEEPALIVE;
MACRO_SO SO_LINGER;
MACRO_SO_PEEK SO_LOCK_FILTER;
MACRO_SO_MARK SO_MARK;
MACRO_SO_PEEK SO_MAX_PACING_RATE;
MACRO_SO_PEEK SO_NOFCS;
MACRO_SO SO_NO_CHECK;
MACRO_SO SO_OOBINLINE;
MACRO_SO SO_PASSCRED;
MACRO_SO_ACCEPTCONN SO_PASSSEC;
MACRO_SO_PEEK SO_PEEK_OFF;
MACRO_SO SO_PEERCRED;
MACRO_SO SO_PEERNAME;
MACRO_SO_ACCEPTCONN SO_PEERSEC;
MACRO_SO SO_PRIORITY;
MACRO_SO_PROTOCOL SO_PROTOCOL;
MACRO_SO SO_RCVBUF;
MACRO_SO SO_RCVBUFFORCE;
MACRO_SO SO_RCVLOWAT;
MACRO_SO SO_RCVTIMEO;
MACRO_SO SO_REUSEADDR;
MACRO_SO SO_REUSEPORT;
MACRO_SO_PROTOCOL SO_RXQ_OVFL;
MACRO_SO SO_SECURITY_AUTHENTICATION;
MACRO_SO SO_SECURITY_ENCRYPTION_NETWORK;
MACRO_SO SO_SECURITY_ENCRYPTION_TRANSPORT;
MACRO_SO_PEEK SO_SELECT_ERR_QUEUE;
MACRO_SO SO_SNDBUF;
MACRO_SO SO_SNDBUFFORCE;
MACRO_SO SO_SNDLOWAT;
MACRO_SO SO_SNDTIMEO;
MACRO_SO SO_TIMESTAMP;
MACRO_SO_MARK SO_TIMESTAMPING;
MACRO_SO_ACCEPTCONN SO_TIMESTAMPNS;
MACRO_SO SO_TYPE;
MACRO_SO_PROTOCOL SO_WIFI_STATUS;
MACRO_STRUCT STRUCT_MALLINFO_DECLARED;
MACRO_TRY TRY_AGAIN;
MACRO_UINT16 UINT16_MAX;
MACRO_UINT32 UINT32_MAX;
MACRO_UINT32 UINT32_MIN;
MACRO_UINT64 UINT64_MAX;
MACRO_MAX UINT8_MAX;
MACRO_UINTMAX UINTMAX_MAX;
MACRO_UINTPTR UINTPTR_MAX;
MACRO_UINT UINT_FAST32_MAX;
MACRO_UINT64 UINT_FAST64_MAX;
MACRO_MAX UINT_FAST8_MAX;
MACRO_UINT16 UINT_LEAST16_MAX;
MACRO_UINT UINT_LEAST32_MAX;
MACRO_UINT64 UINT_LEAST64_MAX;
MACRO_MAX UINT_LEAST8_MAX;
MACRO_UIO UIO_FASTIOV;
MACRO_UIO UIO_MAXIOV;
$43C70A9F12D4BBD98F9B0F65C539512C WINDOW_FORMAT_RGBA_8888;
$43C70A9F12D4BBD98F9B0F65C539512C WINDOW_FORMAT_RGBX_8888;
$43C70A9F12D4BBD98F9B0F65C539512C WINDOW_FORMAT_RGB_565;
MACRO_WINT WINT_MAX;
MACRO_WINT WINT_MIN;
void Exit(int);
MACRO__K _K_SS_MAXSIZE;
MACRO___ANDROID __ANDROID_API__;
MACRO___BIONIC __BIONIC__;
MACRO___BITS __BITS_PER_LONG;
MACRO_VISIBLE __BSD_VISIBLE;
MACRO___FD __FD_SETSIZE;
MACRO_VISIBLE __ISO_C_VISIBLE;
MACRO_SYNC __O_SYNC;
MACRO_TMPFILE __O_TMPFILE;
MACRO_VISIBLE __POSIX_VISIBLE;
MACRO___WORDSIZE __WORDSIZE;
MACRO_VISIBLE __XPG_VISIBLE;
MACRO_VISIBLE __XSI_VISIBLE;
void _android_log_assert(const char *cond, const char *tag, const char *fmt, ...);
int _android_log_print(int prio, const char *tag, const char *fmt, ...);
int _android_log_vprint(int prio, const char *tag, const char *fmt, va_list ap);
int _android_log_write(int prio, const char *tag, const char *text);
MACRO___bool __bool_true_false_are_defined;
struct cmsghdr *_cmsg_nxthdr(struct msghdr *, struct cmsghdr *);
size_t _ctype_get_mb_cur_max(void);
int *_get_h_errno(void);
void __noreturn _libc_init(void *raw_args, void (*onexit)(void), int (*slingshot)(int, char **, char **), const structors_array_t *const structors);
char *_strchr_chk(const char *, int, size_t);
size_t _strlen_chk(const char *, size_t);
char *_strrchr_chk(const char *, int, size_t);
void abort(void);
int abs(int);
int accept(int, struct sockaddr *, socklen_t *);
int accept4(int, struct sockaddr *, socklen_t *, int);
void *android_dlopen_ext(const char *filename, int flag, const android_dlextinfo *extinfo);
android_tts_engine_t *android_getTtsEngine();
int android_getaddrinfofornetwork(net_handle_t network, const char *node, const char *service, const struct addrinfo *hints, struct addrinfo **res);
int android_setprocnetwork(net_handle_t network);
int android_setsocknetwork(net_handle_t network, int fd);
unsigned int arc4random(void);
void arc4random_buf(void *, size_t);
unsigned int arc4random_uniform(unsigned int);
int atexit(void (*)(void));
double atof(const char *);
int atoi(const char *);
int atol(const char *);
__int64 atoll(const char *);
int bind(int, const struct sockaddr *, int);
void *bsearch(const void *key, const void *base0, size_t nmemb, size_t size, int (*compar)(const void *, const void *));
void *calloc(size_t item_count, size_t item_size);
int clearenv(void);
int connect(int, const struct sockaddr *, socklen_t);
div_t div(int, int);
double drand48(void);
void endhostent(void);
void endnetent(void);
void endnetgrent(void);
void endprotoent(void);
void endservent(void);
double erand48(unsigned __int16 xsubi[3]);
void exit(int);
MACRO_bool false;
int ffs(int);
void free(void *p);
void freeaddrinfo(struct addrinfo *);
void freehostent(struct hostent *);
const char *gai_strerror(int);
android_tts_engine_t *getTtsEngine();
int getaddrinfo(const char *, const char *, const struct addrinfo *, struct addrinfo **);
char *getenv(const char *);
struct hostent *gethostbyaddr(const void *, socklen_t, int);
int gethostbyaddr_r(const void *, int, int, struct hostent *, char *, size_t, struct hostent **, int *);
struct hostent *gethostbyname(const char *);
struct hostent *gethostbyname2(const char *, int);
int gethostbyname2_r(const char *, int, struct hostent *, char *, size_t, struct hostent **, int *);
int gethostbyname_r(const char *, struct hostent *, char *, size_t, struct hostent **, int *);
struct hostent *gethostent(void);
int gethostent_r(struct hostent *, char *, size_t, struct hostent **, int *);
struct hostent *getipnodebyaddr(const void *, size_t, int, int *);
struct hostent *getipnodebyname(const char *, int, int, int *);
int getnameinfo(const struct sockaddr *, socklen_t, char *, size_t, char *, size_t, int);
struct netent *getnetbyaddr(uint32_t, int);
int getnetbyaddr_r(uint32_t, int, struct netent *, char *, size_t, struct netent **, int *);
struct netent *getnetbyname(const char *);
int getnetbyname_r(const char *, struct netent *, char *, size_t, struct netent **, int *);
struct netent *getnetent(void);
int getnetent_r(struct netent *, char *, size_t, struct netent **, int *);
int getnetgrent(char **, char **, char **);
int getpeername(int, struct sockaddr *, socklen_t *);
const char *getprogname(void);
struct protoent *getprotobyname(const char *);
int getprotobyname_r(const char *, struct protoent *, char *, size_t, struct protoent **);
struct protoent *getprotobynumber(int);
int getprotobynumber_r(int, struct protoent *, char *, size_t, struct protoent **);
struct protoent *getprotoent(void);
int getprotoent_r(struct protoent *, char *, size_t, struct protoent **);
int getpt(void);
struct servent *getservbyname(const char *, const char *);
struct servent *getservbyport(int, const char *);
struct servent *getservent(void);
int getsockname(int, struct sockaddr *, socklen_t *);
int getsockopt(int, int, int, void *, socklen_t *);
int grantpt(int);
void herror(const char *);
const char *hstrerror(int);
char *initstate(unsigned int, char *, size_t);
int innetgr(const char *, const char *, const char *, const char *);
int jrand48(unsigned __int16 *);
int labs(int);
ldiv_t ldiv(int, int);
int listen(int, int);
__int64 llabs(__int64);
lldiv_t lldiv(__int64, __int64);
int lrand48(void);
static int major(dev_t dev);
static dev_t makedev(int ma, int mi);
struct mallinfo mallinfo(void);
void *malloc(size_t byte_count);
size_t malloc_usable_size(const void *p);
int mblen(const char *, size_t);
size_t mbstowcs(wchar_t *, const char *, size_t);
int mbtowc(wchar_t *, const char *, size_t);
void *memalign(size_t alignment, size_t byte_count);
void *memccpy(void *, const void *, int, size_t);
void *memchr(const void *, int, size_t);
int memcmp(const void *, const void *, size_t);
void *memcpy(void *, const void *, size_t);
void *memmem(const void *, size_t, const void *, size_t);
void *memmove(void *, const void *, size_t);
void *memrchr(const void *, int, size_t);
void *memset(void *, int, size_t);
static int minor(dev_t dev);
char *mkdtemp(char *);
int mkstemp(char *);
int mkstemp64(char *);
char *mktemp(char *);
int mrand48(void);
int nrand48(unsigned __int16 *);
int posix_memalign(void **memptr, size_t alignment, size_t size);
int posix_openpt(int);
char *ptsname(int);
int ptsname_r(int, char *, size_t);
int putenv(char *);
void qsort(void *, size_t, size_t, int (*)(const void *, const void *));
int rand(void);
int rand_r(unsigned int *);
int random(void);
void *realloc(void *p, size_t byte_count);
char *realpath(const char *path, char *resolved);
ssize_t recv(int, void *, size_t, int);
ssize_t recvfrom(int, void *, size_t, int, const struct sockaddr *, socklen_t *);
int recvmmsg(int, struct mmsghdr *, unsigned int, int, const struct timespec *);
int recvmsg(int, struct msghdr *, int);
unsigned __int16 *seed48(unsigned __int16 *);
ssize_t send(int, const void *, size_t, int);
int sendmmsg(int, const struct mmsghdr *, unsigned int, int);
int sendmsg(int, const struct msghdr *, int);
ssize_t sendto(int, const void *, size_t, int, const struct sockaddr *, socklen_t);
int setenv(const char *, const char *, int);
void sethostent(int);
void setnetent(int);
void setnetgrent(const char *);
void setprogname(const char *);
void setprotoent(int);
void setservent(int);
int setsockopt(int, int, int, const void *, socklen_t);
char *setstate(char *);
int shutdown(int, int);
int socket(int, int, int);
int socketpair(int, int, int, int *);
void srand(unsigned int);
void srand48(int);
void srandom(unsigned int);
char *stpcpy(char *, const char *);
char *stpncpy(char *, const char *, size_t);
int strcasecmp(const char *, const char *);
char *strcasestr(const char *haystack, const char *needle);
char *strcat(char *, const char *);
char *strchr(const char *, int);
int strcmp(const char *, const char *);
int strcoll(const char *, const char *);
int strcoll_l(const char *, const char *, locale_t);
char *strcpy(char *, const char *);
size_t strcspn(const char *, const char *);
char *strdup(const char *);
char *strerror(int);
int strerror_r(int errnum, char *buf, size_t n);
size_t strlcat(char *, const char *, size_t);
size_t strlcpy(char *, const char *, size_t);
size_t strlen(const char *);
int strncasecmp(const char *, const char *, size_t);
char *strncat(char *, const char *, size_t);
int strncmp(const char *, const char *, size_t);
char *strncpy(char *, const char *, size_t);
char *strndup(const char *, size_t);
size_t strnlen(const char *, size_t);
char *strpbrk(const char *, const char *);
char *strrchr(const char *, int);
char *strsep(char **, const char *);
char *strsignal(int sig);
size_t strspn(const char *, const char *);
char *strstr(const char *, const char *);
double strtod(const char *, char **);
float strtof(const char *, char **);
char *strtok(char *, const char *);
char *strtok_r(char *, const char *, char **);
int strtol(const char *, char **, int);
long double strtold(const char *, char **);
long double strtold_l(const char *, char **, locale_t);
__int64 strtoll(const char *, char **, int);
__int64 strtoll_l(const char *, char **, int, locale_t);
unsigned int strtoul(const char *, char **, int);
unsigned __int64 strtoull(const char *, char **, int);
unsigned __int64 strtoull_l(const char *, char **, int, locale_t);
size_t strxfrm(char *, const char *, size_t);
size_t strxfrm_l(char *, const char *, size_t, locale_t);
int system(const char *string);
MACRO_bool true;
int unlockpt(int);
int unsetenv(const char *);
size_t wcstombs(char *, const wchar_t *, size_t);
int wctomb(char *, wchar_t);
