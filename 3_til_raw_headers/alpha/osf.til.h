struct $000F54A3D2D1B2368C1E258AC0240D62 {coff_uint ri_gprmask;coff_uint ri_fprmask;coff_int ri_gp_value;};
struct $002B57C8BB4B43007E200F40CE367FF9 {__int16 screen;__int16 device_number;__int16 x;__int16 y;};
enum $003F63A829E52477BDB4080710A1139D {preorder = 0x0,postorder = 0x1,endorder = 0x2,leaf = 0x3,};
struct $004508BAB182CC3DFE4E4DE2605F69B0 {int (*kb_getc)(unsigned int data);int (*kb_putc)(char c);__int16 timeout;__int16 interval;ws_keyboard *kp;int device_number;unsigned int status;unsigned int keys[8];ws_event_queue *queue;__int16 last;__int16 comp_count;u_short comp_chars[2];int reserved;caddr_t private1;};
struct $00AADC3DD05FECE689336ECE4990DEE4 {float32_t Guar_R;uint32_t Guar_S;};
struct $00C97D723519BB9A2C9FAEFA4C57CC85 {CARD16 oc_opcode;CARD16 oc_length;CARD16 shape;pexSwitch ignoreEdges;CARD8 unused;};
struct $00DE07BDF9171D1E83970CD9B8CCE388 {int initial_delay;int repeat_delay;int minimum_delay;int decay;Boolean flash;XtCallbackList start_callbacks;XtCallbackList stop_callbacks;int next_delay;XtIntervalId timer;};
struct $00F7B8E09565AD18E354C8D48A946CAE {__int16 screen;__int16 state;int level;__int64 data;};
struct $010E2232FCDAF4D2B313A37D19ED5DA2 {PEXColorCIE cie;PEXVector normal;};
enum $0112955827FC2F1F3D73B2DA97E42271 {XSyncPositiveTransition = 0x0,XSyncNegativeTransition = 0x1,XSyncPositiveComparison = 0x2,XSyncNegativeComparison = 0x3,};
struct $01476E97539DE0A8F6B3890F5B84B008 {ir_bucket_t *ir_buckets;lock_data_t cache_gl_lock;cache_policy_config_t config;u_int cache_size;int (*cache_hash)();int (*ir_compare)();};
struct $0156C81EE6468A8027946F1322C9006F {PEXEnumTypeIndex type;PEXEnumTypeIndex model;unsigned __int16 max1;unsigned __int16 max2;unsigned __int16 max3;PEXSwitch dither;unsigned __int8 reserved;unsigned __int64 mult1;unsigned __int64 mult2;unsigned __int64 mult3;float weight1;float weight2;float weight3;unsigned __int64 base_pixel;};
struct $01593098553202BCB9DBD5F27E6226E8 {int reason;XEvent *event;int set;};
struct $01658B32220AFC536C48BC6A907CE1A2 {__int16 screen;__int16 device;__int64 data;};
struct $019CECDD6753AAB6598130682127E88A {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD16 accelNumerator;CARD16 accelDenominator;CARD16 threshold;CARD16 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
enum $0232AD16D6C3E7FDD249CAB34FDC4361 {XmPLACE_TOP = 0x0,XmPLACE_ABOVE_SELECTION = 0x1,XmPLACE_BELOW_SELECTION = 0x2,};
enum $02B2F3591FEAEB4334C5D9D93533B7DF {XmVISIBILITY_UNOBSCURED = 0x0,XmVISIBILITY_PARTIALLY_OBSCURED = 0x1,XmVISIBILITY_FULLY_OBSCURED = 0x2,};
struct $02B7C110B96F422043FD747664A5A945 {CARD8 reqType;CARD8 dpmsReqType;CARD16 length;CARD16 majorVersion;CARD16 minorVersion;};
struct $02BD538092AE8CCFADB9D5F5F231A029 {CARD16 oc_opcode;CARD16 oc_length;pexComposition compType;CARD16 unused;pexMatrix3X3 matrix3X3;};
struct $02CBA2D7891D54F464303EC336D0C7F7 {Position grip_indent;Boolean refiguremode;XtTranslations grip_translations;Pixel internal_bp;Dimension internal_bw;XtOrientation orientation;Cursor cursor;Cursor grip_cursor;Cursor v_grip_cursor;Cursor h_grip_cursor;Cursor adjust_this_cursor;Cursor v_adjust_this_cursor;Cursor h_adjust_this_cursor;Cursor adjust_upper_cursor;Cursor adjust_lower_cursor;Cursor adjust_left_cursor;Cursor adjust_right_cursor;Boolean recursively_called;Boolean resize_children_to_pref;int start_loc;Widget whichadd;Widget whichsub;GC normgc;GC invgc;GC flipgc;int num_panes;PaneStack *stack;};
struct $0310B9E1E152DD159D8B60AA90E9FD8C {CARD8 reqType;CARD8 opcode;CARD16 length;pexLookupTable lut;pexTableIndex start;CARD16 count;};
struct $0340F183E3D57BA98D278D6E8F4BBAEC {CARD8 reqType;BYTE pad;CARD16 length;CARD32 gc;CARD32 drawable;CARD32 mask;};
struct $034953B446088FAEEEC9E3F04F4B28E0 {ulong dl_primitive;ulong dl_control;};
struct $0394D367A99981B9C7C3F01397962FB0 {_LC_object_t hdr;int (*strcoll)(const char *, const char *, struct _LC_collate_t *);size_t (*strxfrm)(char *, const char *, size_t, struct _LC_collate_t *);int (*wcscoll)(const wchar_t *, const wchar_t *, struct _LC_collate_t *);size_t (*wcsxfrm)(wchar_t *, const wchar_t *, size_t, struct _LC_collate_t *);int (*fnmatch)(const char *, const char *, const char *, int, struct _LC_collate_t *);int (*regcomp)();size_t (*regerror)();int (*regexec)();void (*regfree)();struct _LC_collate_t *(*init)(struct _LC_locale_t *);void *data;};
struct $0398E3E4100D21BFF643C40E8C2A6EB3 {u_char vers;u_char type;u_char answer;u_char pad;u_int id_num;struct sockaddr addr;struct sockaddr ctl_addr;int pid;char l_name[12];char r_name[12];char r_tty[16];};
struct $03A62E6745AE8117684158C8FB6651D9 {CARD8 reqType;CARD8 opcode;CARD16 length;pexEnumTypeIndex fpFormat;CARD16 unused;pexPhigsWks wks;INT16 viewport_xmin;INT16 viewport_ymin;PEXFLOAT viewport_zmin;INT16 viewport_xmax;INT16 viewport_ymax;PEXFLOAT viewport_zmax;pexSwitch useDrawable;BYTE pad[3];};
struct $03C803DDC9061B143F519D4D73BD5571 {CARD8 reqType;BOOL ownerEvents;CARD16 length;CARD32 grabWindow;CARD16 eventMask;BYTE pointerMode;BYTE keyboardMode;CARD32 confineTo;CARD32 cursor;CARD8 button;BYTE pad;CARD16 modifiers;};
struct $03D5BB64BEC6FD91F45C473FB811595F {Cardinal number;Cardinal maximum;RangeRec *range;};
struct $03F6C202096B59F76F9B2BDC64B4BC9A {CARD8 reqType;CARD8 opcode;CARD16 length;pexStructure old_id;pexStructure new_id;};
struct $043AED21A972E4A3F4A6099033AB1926 {PEXCoord point;PEXColorIndexed strchr;PEXVector normal;};
struct $04693A94417938523F8F08AD466EE7BF {CARD8 reqType;CARD8 opcode;CARD16 length;CARD16 clientProtocolMajor;CARD16 clientProtocolMinor;};
struct $048EDDC221AC6C2316AA6C5DA748547D {CARD16 x_resolution;CARD16 y_resolution;CARD16 point_size;};
union $04A2706E00298110DA579B11AD1FCB86 {struct $04A2706E00298110DA579B11AD1FCB86::$1FD856F91262D0265159A87BA38BF31A gt_header;struct $04A2706E00298110DA579B11AD1FCB86::$8880D624777572A69F8E1CC62FCD54BC gt_entry;};
struct $04A2706E00298110DA579B11AD1FCB86::$1FD856F91262D0265159A87BA38BF31A {coff_uint gt_current_g_value;coff_uint gt_unused;};
struct $04A2706E00298110DA579B11AD1FCB86::$8880D624777572A69F8E1CC62FCD54BC {coff_uint gt_g_value;coff_uint gt_bytes;};
struct $04BE85DF42EB3710F3E3DA7E472F659C {CARD16 elemType;CARD16 elemLength;xieTypPhototag src;CARD16 pad;xieTypConvertFromRGBTechnique convert;CARD16 lenParams;};
struct $04F0974705EEA07D2ED3E56C2753EC67 {CARD16 oc_opcode;CARD16 oc_length;pexAsfAttribute attribute;pexAsfValue source;BYTE pad[3];};
struct $050D667D91EB5E6EF621582721732C5C {BYTE type;BYTE request;CARD16 sequenceNumber;CARD32 length;fsTimestamp timestamp;CARD8 major_opcode;CARD8 minor_opcode;CARD16 pad;fsRange range;};
struct $053B2B0CA6E771FE5ADC34D9A21D155E {CARD16 whence;CARD16 unused;INT32 offset;};
struct $054E83D9D1F7A4F12D5A0F144010C432 {unsigned __int64 ipd;unsigned __int64 adr;};
struct $05D4B123D388DB951228551962F7FDB4 {PEXEnumTypeIndex marker_type;float marker_scale;PEXColorSpecifier marker_color;PEXTableIndex marker_bundle_index;PEXTableIndex text_font;unsigned __int16 text_precision;float char_expansion;float char_spacing;PEXColorSpecifier text_color;float char_height;PEXVector2D char_up_vector;unsigned __int16 text_path;PEXTextAlignment text_alignment;float atext_height;PEXVector2D atext_up_vector;unsigned __int16 atext_path;PEXTextAlignment atext_alignment;PEXEnumTypeIndex atext_style;PEXTableIndex text_bundle_index;PEXEnumTypeIndex line_type;float line_width;PEXColorSpecifier line_color;PEXCurveApprox curve_approx;PEXEnumTypeIndex polyline_interp;PEXTableIndex line_bundle_index;PEXEnumTypeIndex interior_style;PEXTypeOrTableIndex interior_style_index;PEXColorSpecifier surface_color;PEXReflectionAttributes reflection_attr;PEXEnumTypeIndex reflection_model;PEXEnumTypeIndex surface_interp;PEXEnumTypeIndex bf_interior_style;PEXTypeOrTableIndex bf_interior_style_index;PEXColorSpecifier bf_surface_color;PEXReflectionAttributes bf_reflection_attr;PEXEnumTypeIndex bf_reflection_model;PEXEnumTypeIndex bf_surface_interp;PEXSurfaceApprox surface_approx;unsigned __int16 culling_mode;int distinguish;PEXCoord2D pattern_size;PEXCoord pattern_ref_point;PEXVector pattern_ref_vec1;PEXVector pattern_ref_vec2;PEXTableIndex interior_bundle_index;PEXSwitch surface_edges;PEXEnumTypeIndex surface_edge_type;float surface_edge_width;PEXColorSpecifier surface_edge_color;PEXTableIndex edge_bundle_index;PEXMatrix local_transform;PEXMatrix global_transform;unsigned __int16 model_clip;PEXModelClipVolume model_clip_volume;PEXTableIndex view_index;PEXListOfLight light_state;PEXTableIndex depth_cue_index;PEXBitmask asf_enables;PEXBitmask asf_values;__int64 pick_id;unsigned __int64 hlhsr_id;PEXNameSet name_set;PEXTableIndex color_approx_index;PEXEnumTypeIndex rendering_color_model;PEXPSCSpecifier para_surf_char;};
struct $05D4C060AE1EF11C848698CCD73DFF37 {CARD8 majorOpcode;CARD8 minorOpcode;CARD8 unused1[2];CARD32 length;CARD8 saveType;CARD8 shutdown;CARD8 interactStyle;CARD8 fast;CARD8 unused2[3];};
struct $064D8376BF0C95A3A86F0FEB3567FA41 {ulong dl_primitive;ulong dl_sap;ulong dl_max_conind;ushort dl_service_mode;ushort dl_conn_mgmt;ulong dl_xidtest_flg;};
struct $064F821DAAD25287F43010D2D1702E84 {INT16 kernelSize;CARD16 pad;};
struct $069CA722659D31B5E21E1ACEADA10473 {CARD8 reqType;BYTE pad;CARD16 length;CARD16 nFonts;BYTE pad1;BYTE pad2;};
struct $0702AFAE85E523028461380896C86760 {BYTE type;CARD8 numKeyPerModifier;CARD16 sequenceNumber;CARD32 length;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct $070EDC20FCF7E4426EF727EAB9741C68 {rapi_qos_service_t spec_type;rapi_qos_Tspec_body xspec_Tspec;float32_t xspec_R;uint32_t xspec_S;};
struct $0733D28D39B544C0D1FF9AB5A89F168E {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD32 event_mask;};
struct $07A0BBE0F3D6D0E97B5A30869B6D39C4 {CARD8 byteOrder;BYTE pad;CARD16 majorVersion;CARD16 minorVersion;CARD16 nbytesAuthProto;CARD16 nbytesAuthString;CARD16 pad2;};
struct $07DA1A18C479E9B164BC5DAA3FF0707A {ulong dl_primitive;ulong dl_correlation;ulong dl_status;};
struct $07DF049C92EFA72E1E8152C1F763FF30 {CARD8 reqType;CARD8 opcode;CARD16 length;pexPhigsWks wks;pexStructure sid;};
struct $0816025FBD9D05C7C86BC1E774A2CFFD {CARD8 event;CARD8 pad1;CARD16 sequenceNum;CARD32 time;CARD32 instanceNameSpace;CARD32 instanceFloID;xieTypPhototag src;CARD16 type;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct $086797AA123EC279514825093732CF07 {CARD8 reqType;CARD8 opcode;CARD16 length;CARD16 unused;CARD16 maxNames;CARD16 numChars;CARD16 pad;};
struct $08CC88903709FBBAD024CFF75A3D43F0 {PEXCoord point;PEXColorRGB8 rgb8;};
struct $08D1E73019D0DDEC0EBB545A043C5282 {CARD8 error;CARD8 code;CARD16 sequenceNum;CARD32 floID;CARD16 minorOpcode;CARD8 majorOpcode;CARD8 floErrorCode;CARD32 nameSpace;xieTypPhototag phototag;CARD16 type;CARD16 techniqueNumber;CARD16 lenTechParams;CARD8 techniqueGroup;CARD8 pad[7];};
struct $08E7BB45AF45164209AD32D6030ECBA7 {CARD8 class;CARD8 id;CARD16 length;CARD8 pad1;CARD8 pad2;INT16 num;INT16 denom;INT16 thresh;};
struct $090B61DB237F41A79AEED49C48161BFD {__int16 device_number;__int16 mode;};
struct $091A8121C3C792D8858188DBB434C01C {CARD8 reqType;BYTE pad;CARD16 length;CARD32 cmap;CARD32 planeMask;};
struct $092DD72AC6B9BBA1C79AF097B6F8E844 {CARD8 repType;CARD8 RepType;CARD16 sequenceNumber;CARD32 length;CARD16 num_feedbacks;CARD16 pad01;CARD32 pad02;CARD32 pad03;CARD32 pad04;CARD32 pad05;CARD32 pad06;};
struct $0938F46EF6BF1A288D23C461D10040B7 {BYTE type;BOOL status;CARD16 sequenceNumber;CARD32 length;CARD16 prevRes;CARD16 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct $0943ACAEA05D0ED4F3B13BBB6DC4F621 {int type;unsigned __int64 serial;int send_event;Display *display;unsigned __int64 name_space;Time time;unsigned __int64 flo_id;XiePhototag src;unsigned int elem_type;XieColorList color_list;XieColorAllocTechnique color_alloc_technique;unsigned __int64 color_alloc_data;};
struct $095E04B97CE84C59083222C7D172F70D {__int64 flags;int x;int y;int width;int height;int min_width;int min_height;int max_width;int max_height;int width_inc;int height_inc;struct $095E04B97CE84C59083222C7D172F70D::$CDF557A927ED2BFF93B09908D4EFCA76 min_aspect;struct $095E04B97CE84C59083222C7D172F70D::$CDF557A927ED2BFF93B09908D4EFCA76 max_aspect;int base_width;int base_height;int win_gravity;};
struct $095E04B97CE84C59083222C7D172F70D::$CDF557A927ED2BFF93B09908D4EFCA76 {int x;int y;};
struct $09637314DB6CB928D71C16F96B805C44 {PEXCoord point;PEXColorHSV hsv;};
struct $09E69E0556021A33BB43607C87C36B45 {CARD32 visual;CARD8 depth;CARD8 pad1;CARD16 pad2;};
struct $0A132E968BCCC0DBF60AFD92D1AD913D {CARD8 majorOpcode;CARD8 minorOpcode;CARD8 unused1[2];CARD32 length;CARD8 saveType;CARD8 shutdown;CARD8 interactStyle;CARD8 fast;CARD8 unused2[4];};
struct $0A17B52EADACEBEB1F7545E17FEE95BE {Pixel foreground;XFontStruct *font;XFontSet fontset;char *label;XtJustify justify;Dimension internal_width;Dimension internal_height;Pixmap pixmap;Boolean resize;unsigned __int8 encoding;Pixmap left_bitmap;GC normal_GC;GC gray_GC;Pixmap stipple;Position label_x;Position label_y;Dimension label_width;Dimension label_height;Dimension label_len;int lbm_y;unsigned int lbm_width;unsigned int lbm_height;};
struct $0A270F69B196F9EFA6F2CD4624EE5655 {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD16 red;CARD16 green;CARD16 blue;CARD16 pad2;CARD32 pixel;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct $0A340C8DACCDB841363CF5B63EC45822 {__int16 device_number;__int16 numerator;__int16 denominator;__int16 threshold;};
struct $0A3657FDEACD4DE7EF7634442EEB5411 {PEXCoord point;PEXColorIndexed strchr;unsigned int edge;};
struct $0A5C89641A93CB3ACF06CDFC9D8A23B0 {BYTE type;CARD8 what;CARD16 sequenceNumber;CARD32 length;BYTE pad[24];};
struct $0A62F3378E7EE0C32D1AC7B808E76453 {CARD8 type;CARD8 data;CARD16 sequenceNum;CARD32 length;CARD16 numTechniques;CARD8 pad[22];};
struct $0A94BDF67700F0EDACCA5D00231D7516 {CARD16 elemType;CARD16 elemLength;xieTypPhototag src1;xieTypPhototag src2;INT32 domainOffsetX;INT32 domainOffsetY;xieTypPhototag domainPhototag;CARD8 operator;CARD8 bandMask;xieTypFloat constant0;xieTypFloat constant1;xieTypFloat constant2;};
struct $0B3F60258DFC6220FC64094458F7E57E {IS_serv_hdr_t Guar_serv_hdr;IS_parm_hdr_t Guar_Tspec_hdr;TB_Tsp_parms_t Guar_Tspec_parms;IS_parm_hdr_t Guar_Rspec_hdr;guar_Rspec_t Guar_Rspec;};
enum $0B9944DDAD0BA9038E29AF625CFDC62B {XawAsciiFile = 0x0,XawAsciiString = 0x1,};
struct $0C1A989C237847E9E0FEF5D20B714342 {CARD8 reqType;CARD8 nElts;CARD16 length;};
struct $0C1B5BCAAF944068AC8FDD3FF293BE49 {float match_limit;float gray_limit;};
struct $0C5828DF51A63AD83FD60D6E941E741B {CARD8 reqType;CARD8 opcode;CARD16 length;pexEnumTypeIndex fpFormat;CARD16 unused;pexPhigsWks wks;pexStructure sid;PEXFLOAT priority;};
struct $0C5B3DDBD9AAB3637C3C3A1D41E42158 {BYTE type;BYTE padb1;CARD16 sequenceNumber;CARD32 length;INT32 value;CARD32 padl4;CARD32 padl5;CARD32 padl6;CARD32 padl7;CARD32 padl8;};
struct $0C717C2A96F31E63806E7AEC00F2A098 {CARD8 reqType;CARD8 minor_opcode;CARD16 length;CARD16 protocol;CARD16 pad;};
struct $0CC2C7B5C742C31129BAD132CF836E30 {int reason;XEvent *event;XmString value;int length;};
struct $0D0114D795552F54A79F202DB3226B55 {CARD8 reqType;BYTE pad;CARD16 length;CARD32 gc;CARD32 mask;};
struct $0D158C80ECE88D73A8DF0C6BE4079214 {CARD8 reqType;CARD8 securityReqType;CARD16 length;CARD32 authId;};
struct $0D1FE74FEB921BFC360225FA926F7FBE {unsigned __int16 count;PEXEncodedTextData *encoded_text;};
struct $0DA2860FA9A69F203063D0028C53EA56 {BYTE swapped;BYTE detail;CARD16 sequenceNumber;Time time;Window root;Window event;Window child;INT16 rootX;INT16 rootY;INT16 eventX;INT16 eventY;KeyButMask state;BOOL sameScreen;};
struct $0DC76288B82173E0347A8AC4BDA9ABD1 {coff_ushort magic;coff_ushort vstamp;coff_int ilineMax;coff_int idnMax;coff_int ipdMax;coff_int isymMax;coff_int ioptMax;coff_int iauxMax;coff_int issMax;coff_int issExtMax;coff_int ifdMax;coff_int crfd;coff_int iextMax;coff_long cbLine;coff_off cbLineOffset;coff_off cbDnOffset;coff_off cbPdOffset;coff_off cbSymOffset;coff_off cbOptOffset;coff_off cbAuxOffset;coff_off cbSsOffset;coff_off cbSsExtOffset;coff_off cbFdOffset;coff_off cbRfdOffset;coff_off cbExtOffset;};
struct $0E3097AA2FBED02B33E6A3FF3D033D09 {unsigned __int8 dialog_type;unsigned __int8 default_type;Boolean internal_pixmap;Boolean minimize_buttons;unsigned __int8 message_alignment;XmString message_string;Widget message_wid;Pixmap symbol_pixmap;Widget symbol_wid;XmString ok_label_string;XtCallbackList ok_callback;Widget ok_button;XmString cancel_label_string;XtCallbackList cancel_callback;XmString help_label_string;Widget help_button;Widget separator;};
union $0E48C489052D3F6994034E9D4DCBE034 {int ival;char *str;};
struct $0E536A4A735E73BADC27E9D377D18348 {CARD8 type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD16 majorVersion;CARD16 minorVersion;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
enum $0E64F95F8B8660ABA7845ADD323C20B1 {PartialSuccess = 0x0,Failure = 0x1,ProtocolMismatch = 0x2,};
struct $0F2339B37783A905219D9D017A294EE4 {CARD16 oc_opcode;CARD16 oc_length;pexCullMode cullMode;CARD16 pad;};
struct $0F27B4D01012055D150552B99E49EC48 {int type;Display *display;XdbeBackBuffer buffer;unsigned __int64 serial;unsigned __int8 error_code;unsigned __int8 request_code;unsigned __int8 minor_code;};
struct $0F29DDDEB89067475B62F9102C286634 {PEXEnumTypeIndex style;PEXTypeOrTableIndex style_index;PEXEnumTypeIndex reflection_model;PEXEnumTypeIndex interp_method;PEXEnumTypeIndex bf_style;PEXTypeOrTableIndex bf_style_index;PEXEnumTypeIndex bf_reflection_model;PEXEnumTypeIndex bf_interp_method;PEXSurfaceApprox surface_approx;PEXColorSpecifier color;PEXReflectionAttributes reflection_attr;PEXColorSpecifier bf_color;PEXReflectionAttributes bf_reflection_attr;};
struct $0F2B39C4889BFBA0BBC9C66D38A1F5D3 {Elf32_Word sh_name;Elf32_Word sh_type;Elf32_Word sh_flags;Elf32_Addr sh_addr;Elf32_Off sh_offset;Elf32_Word sh_size;Elf32_Word sh_link;Elf32_Word sh_info;Elf32_Word sh_addralign;Elf32_Word sh_entsize;};
struct $0F4B06D36BC906735A699C1D59FCE038 {BYTE type;BOOL sameScreen;CARD16 sequenceNumber;CARD32 length;CARD32 child;INT16 dstX;INT16 dstY;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct $0F594ECE1246C9F530586CE66FD64559 {int type;unsigned __int64 serial;int send_event;Display *display;Drawable drawable;unsigned __int64 reason;XvPortID port_id;Time time;};
struct $0F63C52D50F31C01632B7951AEFCA4FD {BYTE type;BYTE request;CARD16 sequenceNumber;CARD32 length;fsTimestamp timestamp;CARD8 major_opcode;CARD8 minor_opcode;fsResolution resolution;};
struct $0FAE394FC492092BC5FFE693D0AA7D04 {CARD16 oc_opcode;CARD16 oc_length;};
struct $101ED56796A31C5C092EFC61C0F81522 {CARD8 majorOpcode;CARD8 minorOpcode;CARD8 unused[2];CARD32 length;};
struct $102722185F58948234AC650406FAE760 {unsigned int min;unsigned int max;unsigned int *tbl;};
struct $104E341BD21B9280B55F0EE66954F1D8 {ulong version;ulong operation;ulong action;ulong info_buf_size;void *info_buf;ulong spare[2];};
struct $10F8C4C81A02E8CC11279456BCE6E63F {xieTypInterleave interleave;xieTypOrientation bandOrder;CARD16 pad;};
enum $10FF06C071A5D3613F4C4523ECAD6E10 {CL_CONF_MAX_NONCONFORM_QUEUE = 0x0,CL_CONF_MAX_TOTAL_r = 0x1,CL_CONF_MAX_TOTAL_b = 0x2,CL_CONF_MAX_NR_FLOWS = 0x3,CL_CONF_LAST = 0x4,};
struct $113ADE3249D8CE9145901B23810AE272 {BYTE type;BYTE pad;CARD16 sequenceNumber;CARD32 length;CARD32 num_replies;CARD32 num_catalogues;};
struct $11A118BBBD9E10A128723536823DDEBF {__int64 ldr_data_magic;__int64 ldr_data_size;ldr_data *ldr_data_ptr;};
struct $11A8CC0B8E4BFFC971A7BD5642BC979A {ulong dl_primitive;ulong dl_correlation;ulong dl_resp_token;ulong dl_qos_length;ulong dl_qos_offset;ulong dl_growth;};
struct $11C63DB979B6BE10B413268C7E983714 {PEXSwitch mode;unsigned __int8 reserved[3];float front_plane;float back_plane;float front_scaling;float back_scaling;PEXColorSpecifier color;};
struct $1206FECF9ACD3192A71AF1264343EAEE {XawTextPosition left;XawTextPosition right;XawTextSelectType type;Atom *selections;int atom_count;int array_size;};
union $12139D15327A66BC6BD2CA276E233382 {fsGenericReply generic;fsListExtensionsReply extensions;fsGetResolutionReply getres;};
struct $122F0A93CA4F1B818359B08BB48D7A3D {Boolean reparented;};
enum $1245A1FB5F4A3D60B68851188167E7C1 {XSyncAbsolute = 0x0,XSyncRelative = 0x1,};
struct $126DE92285480F2C88BEBFF7139E63A8 {BYTE type;CARD8 what;CARD16 sequenceNumber;CARD32 length;CARD16 status;CARD16 unused;CARD32 foundOffset;BYTE pad[16];};
struct $1296C23E7EDA709A08D87BF116515624 {CARD8 reqType;BYTE pad;CARD16 length;CARD32 gc;CARD16 dashOffset;CARD16 nDashes;};
struct $12C70FB380D888247B65F57E99B647A7 {CARD32 encoding;CARD16 name_size;CARD16 width;CARD16 height;xvRational rate;CARD16 pad;};
union $12E233846E94494D17253A4C1AE1A04D {unsigned int n[1];const unsigned int *p;};
enum $12E524B91CF51C80381CF2D49C265A54 {XmSTATIC = 0x0,XmDYNAMIC = 0x1,};
struct $12F27D3D7D6F36D70F4985506E4EBDA8 {unsigned __int16 major_version;unsigned __int16 minor_version;unsigned __int64 release;unsigned __int64 subset_info;char *vendor_name;int major_opcode;int first_event;int first_error;};
struct $132E81131C35E6C61D5BC4522BA78C1E {CARD8 reqType;CARD8 opcode;CARD16 length;pexRenderer rdr;pexSwitch flushFlag;BYTE pad[3];};
struct $13470DA4B6A7AAE8ACC864F70C5FF73E {String type;Widget widget;XtPointer event_data;Cardinal num_event_data;};
struct $1355211EA81407642BD9D2D9A538CFC1 {pexEnumTypeIndex markerType;INT16 unused1;PEXFLOAT markerScale;pexColorType markerColorType;CARD16 unused2;};
struct $13586A680F7A8EA9124C7D56A4210D51 {CARD8 depth;CARD8 unused;CARD16 type;CARD32 visualID;};
struct $135D6FF18DA52839AD1E4765F6297AB3 {XtCallbackList report_callbacks;Boolean allow_off;Boolean resize_to_pref;Pixel foreground;Pixel shadow_color;Dimension shadow_thickness;Dimension default_scale;Dimension line_width;Dimension canvas_width;Dimension canvas_height;Position slider_x;Position slider_y;Dimension slider_width;Dimension slider_height;Dimension internal_border;String stipple_name;GC slider_gc;GC shadow_gc;GC xor_gc;double haspect;double vaspect;Boolean rubber_band;struct $135D6FF18DA52839AD1E4765F6297AB3::$33BBEBA79D8C3D381AA595E08C13178B tmp;Position knob_x;Position knob_y;Dimension knob_width;Dimension knob_height;Boolean shadow_valid;XRectangle shadow_rects[2];Position last_x;Position last_y;};
struct $135D6FF18DA52839AD1E4765F6297AB3::$33BBEBA79D8C3D381AA595E08C13178B {Boolean doing;Boolean showing;Position startx;Position starty;Position dx;Position dy;Position x;Position y;};
struct $136C5E14F7EE93C43105681EEDEA30CA {CARD8 reqType;CARD8 opcode;CARD16 length;pexNameSet ns;CARD16 action;CARD16 unused;};
struct $139D55FE8C88418352B74C39DE937D4F {int type;Display *display;XID resourceid;unsigned __int64 serial;unsigned __int8 error_code;unsigned __int8 request_code;unsigned __int8 minor_code;};
struct $13A9DBF3EA1FE7F1698AD8D67A77FD73 {CARD16 elemType;CARD16 elemLength;CARD32 drawable;INT16 srcX;INT16 srcY;CARD16 width;CARD16 height;CARD32 fill;CARD32 bitPlane;BOOL notify;CARD8 pad[3];};
struct $13C5E316447D80627E30BA16FBD8BA91 {CARD8 error;CARD8 code;CARD16 sequenceNum;CARD32 floID;CARD16 minorOpcode;CARD8 majorOpcode;CARD8 floErrorCode;CARD32 nameSpace;xieTypPhototag phototag;CARD16 type;xieTypPhototag domainSrc;CARD8 pad[10];};
struct $13C78DD7EDF1CF1C4AE9B0D54E891AA2 {__int16 x;__int16 y;};
enum $13E5897DDE4FE73267EC69E9B96C8548 {False = 0x0,True = 0x1,};
struct $14060919AF6FB1145096DBC123DE4EE9 {PEXPipelineContext pipeline_context;PEXStructurePath current_path;PEXLookupTable marker_bundle;PEXLookupTable text_bundle;PEXLookupTable line_bundle;PEXLookupTable interior_bundle;PEXLookupTable edge_bundle;PEXLookupTable view_table;PEXLookupTable color_table;PEXLookupTable depth_cue_table;PEXLookupTable light_table;PEXLookupTable color_approx_table;PEXLookupTable pattern_table;PEXLookupTable text_font_table;PEXNameSet highlight_incl;PEXNameSet highlight_excl;PEXNameSet invisibility_incl;PEXNameSet invisibility_excl;int renderer_state;PEXEnumTypeIndex hlhsr_mode;PEXNPCSubVolume npc_subvolume;PEXViewport viewport;PEXListOfClipRect clip_list;PEXNameSet pick_incl;PEXNameSet pick_excl;PEXStructurePath pick_start_path;PEXColorSpecifier background_color;int clear_image;int clear_z;int echo_mode;};
struct $142692922453F1D2D07D2ED98127C489 {CARD8 type;CARD8 errorCode;CARD16 sequenceNumber;CARD32 resourceId;CARD16 minorCode;CARD8 majorCode;CARD8 unused;CARD16 opcode;CARD16 numCommands;BYTE pad[16];};
enum $142CFC6DDCC083014C014320121AA9F9 {XmDROP_FAILURE = 0x0,XmDROP_SUCCESS = 0x1,};
struct $1439ADB501C666791651B9DAC694FFD6 {char ar_name[16];int ar_date;int ar_uid;int ar_gid;int ar_mode;int ar_size;};
struct $1463B1446DFC3BE3591F88FAF0B4315C {CARD8 reqType;BYTE pad;CARD16 length;CARD32 cursor;CARD16 foreRed;CARD16 foreGreen;CARD16 foreBlue;CARD16 backRed;CARD16 backGreen;CARD16 backBlue;};
struct $147D72C0203DF9CD1DFB82C7E7032794 {Boolean (*change_sensitive)();};
struct $149F28F052847359C6CBD46BA265755A {u_int yp_buf_len;char *yp_buf_val;};
struct $14C1E8498BC4B9406DA920D6EFBBCEDC {CARD16 oc_opcode;CARD16 oc_length;CARD16 alignment_vertical;CARD16 alignment_horizontal;};
struct $14C4DC63A35B6E2FD67711EA9BA1C1B3 {XID control;int length;};
struct $14F5AD9DDC5240A6786BD5C14149A533 {Font title_font;Font icon_font;int border_width;int title_height;int non_title_width;int icon_name_width;int iconify_width;int iconify_height;};
struct $14FB38E75927E3144F2B587F9DC76DB0 {unsigned __int8 pixel_stride[3];XieOrientation pixel_order;unsigned __int8 scanline_pad[3];XieOrientation fill_order;XieOrientation band_order;XieInterleave interleave;};
struct $15577552D961AFA6A1781997BEA7C9C8 {int type;unsigned __int64 serial;int send_event;Display *display;unsigned __int64 name_space;Time time;unsigned __int64 flo_id;XiePhototag src;unsigned int elem_type;unsigned int band_number;unsigned __int64 data[3];};
struct $156582BC64AB1AAF420D779DD65E4F37 {BYTE type;BOOL pad1;CARD16 sequence_number;CARD32 length;Window default_root;VisualID root_visual;Colormap default_colormap;CARD32 black_pixel;CARD32 white_pixel;BOOL single_screen;BOOL app_group_leader;CARD16 pad2;};
struct $15B26EF61FAF3427F660B22EA1DD1EB1 {CARD8 class;CARD8 id;CARD16 length;CARD8 percent;BYTE pad1;BYTE pad2;BYTE pad3;CARD16 pitch;CARD16 duration;};
struct $160641F2D897670075418D2E6B733231 {unsigned __int8 e_ident[16];Elf32_Half e_type;Elf32_Half e_machine;Elf32_Word e_version;Elf32_Addr e_entry;Elf32_Off e_phoff;Elf32_Off e_shoff;Elf32_Word e_flags;Elf32_Half e_ehsize;Elf32_Half e_phentsize;Elf32_Half e_phnum;Elf32_Half e_shentsize;Elf32_Half e_shnum;Elf32_Half e_shstrndx;};
struct $160BFFB979B4E4E895FB2627A5A1E75F {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD16 width;CARD16 height;CARD16 rx;CARD16 ry;CARD16 rwidth;CARD16 rheight;CARD32 pad1;CARD32 pad2;CARD32 pad3;};
struct $1643EA4171E7327ACC09A96188B3F1FC {_LC_weight_t ct_wgt;const _LC_collel_t *ct_collel;};
struct $16C2BD1F571C7039E16B45217B67C309 {u_int length;u_int type;tcntl_fhandle_t fhandle;union $16C2BD1F571C7039E16B45217B67C309::$470D7634D5D71AB942D66F3FF4A3198D filt_u;};
union $16C2BD1F571C7039E16B45217B67C309::$470D7634D5D71AB942D66F3FF4A3198D {struct $::$470D7634D5D71AB942D66F3FF4A3198D::$62965BBFE433B7BED58A83301C6118BB ip4;struct $::$470D7634D5D71AB942D66F3FF4A3198D::$79FEBD6BF2961C9F1E717E2B927C46A4 ip6;};
struct $16C75E8BEE365AEC2E406F5D0C322BCB {CARD16 oc_opcode;CARD16 oc_length;INT32 label;};
struct $16CFC57C4AEAAC7816B638D66FDFD80A {int vendor_specific;};
struct $16E48E418642334D45E0461DEC9DAADD {unsigned __int16 type;unsigned __int16 length;};
struct $16EBA84B087327616B04F244BC938485 {acl_perm_t user_obj_perm;acl_perm_t group_obj_perm;acl_perm_t other_obj_perm;uint_t pad;};
struct $16FF9A5400879BBC62C7CEBA17AF7CBD {PEXColorType type;unsigned __int16 reserved;PEXColor value;};
struct $1708D706B4D5E259989334EB96BED3C3 {int type;Display *display;unsigned __int64 flo_id;unsigned __int64 serial;unsigned __int8 error_code;unsigned __int8 request_code;unsigned __int8 minor_code;unsigned int flo_error_code;unsigned __int64 name_space;XiePhototag phototag;unsigned int elem_type;unsigned int technique_number;unsigned int num_tech_params;XieTechniqueGroup tech_group;};
struct $174015526638B6775FF90FE128CCEA7F {int type;unsigned __int64 serial;int send_event;Display *display;Window window;XID deviceid;Window root;Window subwindow;Time time;int x;int y;int x_root;int y_root;unsigned int state;unsigned int button;int same_screen;unsigned int device_state;unsigned __int8 axes_count;unsigned __int8 first_axis;int axis_data[6];};
enum $17522E38E9E30379809C0F60C7B013EC {XmSTRING_COMPONENT_UNKNOWN = 0x0,XmSTRING_COMPONENT_CHARSET = 0x1,XmSTRING_COMPONENT_TEXT = 0x2,XmSTRING_COMPONENT_DIRECTION = 0x3,XmSTRING_COMPONENT_SEPARATOR = 0x4,XmSTRING_COMPONENT_LOCALE_TEXT = 0x5,};
enum $17DC033B3C2AE84FB8F187DC408B09AC {XmTOP_LEVEL_ENTER = 0x0,XmTOP_LEVEL_LEAVE = 0x1,XmDRAG_MOTION = 0x2,XmDROP_SITE_ENTER = 0x3,XmDROP_SITE_LEAVE = 0x4,XmDROP_START = 0x5,XmDROP_FINISH = 0x6,XmDRAG_DROP_FINISH = 0x7,XmOPERATION_CHANGED = 0x8,};
struct $185EA91A4AF029CAEEB69A58077AAFAD {CARD16 oc_opcode;CARD16 oc_length;pexColorType colorType;pexBitmaskShort facetAttribs;pexBitmaskShort vertexAttribs;CARD16 unused;CARD32 numVertices;};
struct $1862A6A58DA65AFA2A748980F9D5B3C0 {int (*proc)(XComposeStatus *, KeySym, ComposeRtrn *);XComposeStatus *sanity;ComposeTbl *table;void *state;};
struct $18654165D8B17DA3E357B0DE9180FFF7 {CARD8 reqType;CARD8 opcode;CARD16 length;CARD32 nameSpace;CARD32 floID;xieTypPhototag element;BOOL final;CARD8 bandNumber;CARD32 byteCount;};
enum $190C3184BA7AC20E926F5102B254E542 {XmMAX_ON_TOP = 0x0,XmMAX_ON_BOTTOM = 0x1,XmMAX_ON_LEFT = 0x2,XmMAX_ON_RIGHT = 0x3,};
struct $1960B4B7E6B71DFE8C07CC30EAA9E7F8 {ulong dl_primitive;ulong dl_dest_addr_length;ulong dl_dest_addr_offset;dl_priority_t dl_priority;};
struct $19693695DDDB2418BB239CA625D4A495 {BYTE type;BYTE bpad0;CARD16 sequenceNumber;CARD32 length;CARD32 status;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct $196A900E1F8FC6D65F3C04EA8B9471C8 {float red;float green;float blue;};
struct $19958847318214F780EFE5EAB3B1A0C9 {CARD8 repType;CARD8 RepType;CARD16 sequenceNumber;CARD32 length;CARD8 num_classes;BYTE pad0;CARD16 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct $19CDB3AF2B83FECC9ADEAFCB41606FBB {int enabled;int datum_flags;unsigned __int64 nclients;XRecordClientInfo **client_info;};
struct $19CE7C819EA69A97B546F997958C8C17 {CARD16 oc_opcode;CARD16 oc_length;pexEnumTypeIndex style;CARD16 pad;};
struct $1A0B911CFFDF458B39198AE378BEA8E2 {void *__hdr;void *__attrobj;void *__state;};
struct $1A3559000C526E1E4ABA732489243BCE {XtGrabKind grab_kind;Position old_x;Position old_y;unsigned __int8 fit_to_screen_policy;unsigned __int8 dxm_layout_direction;};
struct $1A669B82059DE4CB2E4065120B43A549 {CARD8 class;CARD8 id;CARD16 length;CARD8 pad1;CARD8 pad2;CARD16 accelNum;CARD16 accelDenom;CARD16 threshold;};
struct $1A68CE477B37BE31DCB043B6F4664E49 {CARD8 reqType;BYTE num_auths;CARD16 length;CARD32 acid;};
struct $1A75A2DB0C5B85809EBF2664AB4B3690 {CARD16 oc_opcode;CARD16 oc_length;pexColorType colorType;pexBitmaskShort vertexAttribs;CARD32 numLists;};
struct $1A75DE7C91D4A60723CEFBFCC5E29E67 {acl_tag_t entry_type;acl_perm_t entry_perm;uint_t idsize;uint_t pad;};
struct $1A9858AACCCCA8E72719BF196EF9BC84 {PEXEnumTypeIndex method;unsigned __int16 reserved;float tolerance;};
struct $1AA6B00D5359D5BC539F09B83E701119 {ulong dl_primitive;ulong dl_originator;ulong dl_reason;ulong dl_correlation;};
struct $1AA7F1335C4C6CFF07A82EACE5F12A97 {int in_use;int my_opcode;_IceProtocol *protocol;IcePointer client_data;int accept_flag;union $1AA7F1335C4C6CFF07A82EACE5F12A97::$334616D58205B64CBDE7625544988388 process_msg_proc;};
union $1AA7F1335C4C6CFF07A82EACE5F12A97::$334616D58205B64CBDE7625544988388 {IcePaProcessMsgProc accept_client;IcePoProcessMsgProc orig_client;};
enum $1AACE834562D811C51DF77A95A3A7B4D {NXM_SLOT_AVAIL = 0x0,NXM_SLOT_BOUND = 0x1,NXM_SLOT_UNBOUND = 0x2,NXM_SLOT_EMPTY = 0x3,};
struct $1B017AC3620941E612639F23B92A9141 {xieTypOrientation encodedOrder;BOOL alignEol;BOOL radiometric;CARD8 pad;};
struct $1B25F028D599AD6042D2472447206E6C {u_int fhandle3_len;char *fhandle3_val;};
enum $1B378CA7E6769DBA655D66EA16101D09 {XmSYNTHETIC_NONE = 0x0,XmSYNTHETIC_LOAD = 0x1,};
struct $1BAE1FE6DB6FC78B3C7B94C189E05017 {CARD8 class;CARD8 id;CARD16 length;CARD8 key;CARD8 auto_repeat_mode;INT8 click;INT8 percent;INT16 pitch;INT16 duration;CARD32 led_mask;CARD32 led_values;};
struct $1BB85DE3512B339811D8B67FC16B212D {BYTE type;CARD8 deviceid;CARD16 sequenceNumber;KeyButMask device_state;CARD8 num_valuators;CARD8 first_valuator;INT32 valuator0;INT32 valuator1;INT32 valuator2;INT32 valuator3;INT32 valuator4;INT32 valuator5;};
struct $1BE3AC7E389F4E6123B24645B06E06D7 {ulong dl_primitive;ulong dl_token;};
struct $1BE3EF8FAEFD838E59DA61E46CB3832E {Window swap_window;XdbeSwapAction swap_action;};
struct $1C6A793BF493D396318DB3967AB943CB {BYTE type;CARD8 what;CARD16 sequenceNumber;CARD32 length;CARD32 numInfo;BYTE pad[20];};
struct $1C989109A1E2AFEC30347169F1D74F63 {XcmsFloat u_prime;XcmsFloat v_prime;XcmsFloat Y;};
struct $1CEE194B9996542B8791ADC986A9024D {PEXCoord point;PEXVector normal;};
struct $1CFFE104D7DFB51E74C0A01BE327DA92 {CARD8 reqType;BOOL range;CARD16 length;CARD32 fid;fsBitmapFormat format;CARD32 num_ranges;};
struct $1D2BE68F971B32FE39D701D3B79827D1 {XieMatrix matrix;XieWhiteAdjustTechnique white_adjust_tech;XiePointer white_adjust_param;};
struct $1D4F7230B22579A4FD715C0E003DAA6E {CARD8 majorOpcode;CARD8 minorOpcode;CARD8 protocolOpcode;CARD8 mustAuthenticate;CARD32 length;CARD8 versionCount;CARD8 authCount;CARD8 unused[6];};
struct $1DA914B8AB142FCB959C2D9AF0891F55 {int my_opcode;int my_auth_count;int *my_auth_indices;int auth_active;char my_auth_index;IcePointer my_auth_state;};
struct $1DAEF4E0AC04FD56FF7D132BB7465CF9 {size_t we_wordc;char **we_wordv;size_t we_offs;int we_sflags;size_t we_soffs;};
enum $1DE54D510EDF3035FFC59F913B1ED7DD {RAPI_PATH_EVENT = 0x1,RAPI_RESV_EVENT = 0x2,RAPI_PATH_ERROR = 0x3,RAPI_RESV_ERROR = 0x4,RAPI_RESV_CONFIRM = 0x5,RAPI_PATH_STATUS = 0x9,RAPI_RESV_STATUS = 0xA,};
enum $1E01C87E393912919412648BB92B1744 {ADVFS_WO_ASYNC_WRITE = 0x0,ADVFS_WO_RESERVED = 0x1,ADVFS_WO_DATA_LOGGING = 0x2,ADVFS_WO_SYNC_WRITE = 0x3,};
struct $1E0AC79C276BFECF5B852A2587846162 {unsigned __int16 character_set;unsigned __int8 character_set_width;unsigned __int8 encoding_state;unsigned __int16 reserved;unsigned __int16 length;char *ch;};
struct $1E2A6A9B5EC919B5C597AB6887935210 {String name;String type;XtArgVal value;int size;};
struct $1E42E411FAE309B90570872BD6DA89F0 {BYTE type;CARD8 pad1;CARD16 sequenceNumber;CARD32 length;CARD32 width;CARD32 height;CARD32 window;CARD32 screen;CARD32 pad2;CARD32 pad3;};
struct $1E4927A029C92C0FD595CCC76CE8B139 {CARD8 header;CARD8 pad1;CARD16 pad2;CARD32 delay_time;};
struct $1E68C84E6BE3B673D767CBEC47B3DECA {BYTE type;CARD8 depth;CARD16 sequenceNumber;CARD32 length;CARD32 visual;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct $1E98688865EA8C1912B4736759A34ED4 {unsigned __int16 length;char *ch;};
enum $1EB735D257737D1C193CE2CC582D75C3 {XmPARENT_PROCESS_ANY = 0x0,XmINPUT_ACTION = 0x1,};
struct $1F1AC3FACFBF0931A43D0CD999C4D927 {CARD8 reqType;CARD8 depth;CARD16 length;CARD32 pid;CARD32 drawable;CARD16 width;CARD16 height;};
struct $1F4B2514A14933A71BA9296C89FDE736 {unsigned __int8 class;unsigned __int8 length;__int16 num_buttons;char buttons[32];};
struct $1F4DB4D2F425C11871D405C5200D2C0C {unsigned int server_major_rev;unsigned int server_minor_rev;XieServiceClass service_class;XieAlignment alignment;int uncnst_mantissa;int uncnst_min_exp;int uncnst_max_exp;int n_cnst_levels;unsigned __int64 *cnst_levels;int major_opcode;int first_event;int first_error;};
struct $1F50C144209B837DAB7C5290DC848E2E {int type;unsigned __int64 serial;int send_event;Display *display;Window window;XID deviceid;Window root;Window subwindow;Time time;int x;int y;int x_root;int y_root;unsigned int state;int same_screen;unsigned int device_state;unsigned __int8 axes_count;unsigned __int8 first_axis;int axis_data[6];};
union $1FF45F353514EEB46E2B132E985977DC {PEXCoord2D *point_2d;PEXCoord *point;PEXCoord4D *point_4d;};
struct $2017A4559BD8DFB36CC7B04C7F93BD32 {CARD8 reqType;CARD8 opcode;CARD16 length;xieTypPhotomap photomap;};
struct $20505914DF6138F7281CD6AEA85C4A3E {XtPointer next_extension;XrmQuark record_type;__int64 version;Cardinal record_size;Boolean accepts_objects;Boolean allows_change_managed_set;};
struct $206232A1F4DF974AC8674D33D98F259E {int empty;};
enum $20B43CE35CA63D467D88D706C39B67FF {XmDIALOG_WORK_AREA = 0x0,XmDIALOG_PROMPT = 0x1,XmDIALOG_SELECTION = 0x2,XmDIALOG_COMMAND = 0x3,XmDIALOG_FILE_SELECTION = 0x4,};
struct $20DCAE5A496E101E8DAF2A83C10B6474 {int hardware_type;int axis_count;caddr_t device_handle;char *name;int (*ioctl)();void (*init_device)();void (*reset_device)();void (*enable_device)();void (*disable_device)();void (*set_device_mode)();void (*get_device_info)();};
enum $21559D167E09D153A2BED9C0416C486B {XmLAST_POSITION = 0xFFFFFFFF,XmFIRST_POSITION = 0x0,};
struct $216A9F1C1CB18296D79DECC5D8B8E2C3 {Window window;int screen;int State;int width;int height;int ScreenCount;XID eventMask;};
struct $217442FD761A7019DD79093749C072C4 {CARD8 reqType;CARD8 opcode;CARD16 length;pexStructure src;pexStructure dst;};
struct $2176D4AF4AEA8E9BE77B2438781E5DBC {unsigned __int8 e_ident[16];coff_ushort e_type;coff_ushort e_machine;coff_uint e_version;coff_addr e_entry;coff_off e_phoff;coff_off e_shoff;coff_uint e_flags;coff_ushort e_ehsize;coff_ushort e_phentsize;coff_ushort e_phnum;coff_ushort e_shentsize;coff_ushort e_shnum;coff_ushort e_shstrndx;};
struct $2178B426BC8C8AE0F5D29E93EB059F03 {CARD8 reqType;BYTE pad;CARD16 length;CARD32 maxNames;CARD16 nbytes;CARD16 pad2;};
struct $21AD2773B4EF3639ECA7EA03A86E1290 {Time time;int *data;};
struct $21D657DCC1893F76B039DFDE7FFD89EE {CARD16 oc_opcode;CARD16 oc_length;pexSwitch distinguish;BYTE pad[3];};
struct $2211593FD7C5E562CDCE5CEB5429C782 {msg_type_t msg_type_header;unsigned __int16 msg_type_long_name;unsigned __int16 msg_type_long_size;unsigned int msg_type_long_number;};
struct $221FB40353091864D31474CD79EAAEF6 {CARD8 reqType;CARD8 XTestReqType;CARD16 length;CARD32 ack;CARD8 action_list[64];};
enum $22290B8E2C6A05087E308339D4352906 {XawsdLeft = 0x0,XawsdRight = 0x1,};
enum $223FFC458C10D7E132B773948B7A6063 {XctUnspecified = 0x0,XctLeftToRight = 0x1,XctRightToLeft = 0x2,};
struct $229C0DE00A42B0680B1DACB04ABD6EC3 {__lc_type_id_t type_id;unsigned __int16 magic;unsigned __int16 format;unsigned __int64 version;unsigned __int64 size;};
struct $22DD3C11A6774D6C25B32DE300762746 {int process_type;XEvent *event;int action;String *params;Cardinal *num_params;};
struct $22F6F47B07BBB5F9E32E4811707DBE39 {BYTE type;CARD8 what;CARD16 sequenceNumber;CARD32 length;CARD16 unused;CARD16 definableEntries;CARD16 numPredefined;CARD16 predefinedMin;CARD16 predefinedMax;BYTE pad[14];};
enum $2305C92ABFBD7FF576E80BDDBAD2E755 {XmWINDOW = 0x0,XmCURSOR = 0x2,};
struct $23528D99DB311AE570394A3CCFCAFAB2 {XETrapRepHdr hdr;CARD32 data_last_time;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct $23AA629CEBB8A7A46528512A96FC50F0 {XieOrientation encoded_order;int normal;};
struct $23D39CEB96D177F7D0B7BFAD0D72AB23 {char *res_name;char *res_class;};
struct $23F7EE8294FB9DF80516FD4A31AD78F8 {BYTE type;CARD8 what;CARD16 sequenceNumber;CARD32 length;CARD32 escapeID;CARD8 escape_specific[20];};
struct $2498D641C268CFCC969901131795A7D6 {uint8_t isph_parm_num;uint8_t isph_flags;uint16_t isph_len32b;};
struct $24B457447694156ACAE248300D57FA49 {CARD8 class;CARD8 event_type_base;};
struct $251130EF0ACC65274B801D43EFB900B9 {char name[1];};
struct $2520325224AFAD0311F021063A0B3716 {pFDR pfd;pSYMR psym;int csymMax;pAUXU paux;int cauxMax;char *pss;__int64 cbssMax;pOPTR popt;int coptMax;pLINER pline;int clineMax;pRFDT prfd;int crfdMax;pPDR ppd;int cpdMax;int freadin;};
struct $257708480E694070BE2FEFA543B5E05B {XID class;int length;XID id;int led_mask;int led_values;};
struct $25C1B8FCFFEDAD0642B60535CC806A0F {__int16 drawable_update;int visual_state;int drawable_surface;int view_update;PEXListOfView defined_views;int wks_update;PEXNPCSubVolume req_npc_subvolume;PEXNPCSubVolume cur_npc_subvolume;PEXViewport req_workstation_viewport;PEXViewport cur_workstation_viewport;int hlhsr_update;PEXEnumTypeIndex req_hlhsr_mode;PEXEnumTypeIndex cur_hlhsr_mode;Drawable drawable;PEXLookupTable marker_bundle;PEXLookupTable text_bundle;PEXLookupTable line_bundle;PEXLookupTable interior_bundle;PEXLookupTable edge_bundle;PEXLookupTable color_table;PEXLookupTable depth_cue_table;PEXLookupTable light_table;PEXLookupTable color_approx_table;PEXLookupTable pattern_table;PEXLookupTable text_font_table;PEXNameSet highlight_incl;PEXNameSet highlight_excl;PEXNameSet invisibility_incl;PEXNameSet invisibility_excl;PEXListOfPostedStructure posted_structures;unsigned __int64 count_priorities;int buffer_update;int req_buffer_mode;int cur_buffer_mode;};
struct $25D0D8CCEC98ADDB4521E2BA148959A7 {Widget widget;XmTextPosition insert_pos;int num_chars;Time timestamp;Boolean move;};
struct $2602B731D6A573E1FC5C185DF19F2A61 {int kernel_size;};
struct $26BC012D24128E3336766C52F10E0B0D {EQTime time;unsigned __int8 screen;unsigned __int8 device;unsigned __int8 device_type;unsigned __int8 type;union $26BC012D24128E3336766C52F10E0B0D::$3EE7B06A270C04578BB8E913655EF387 e;};
union $26BC012D24128E3336766C52F10E0B0D::$3EE7B06A270C04578BB8E913655EF387 {struct $::$3EE7B06A270C04578BB8E913655EF387::$D059A4519AB20C6AB21F2D2ADEC08E5C key;struct $::$3EE7B06A270C04578BB8E913655EF387::$73B7D680272959B17FABABEE500ED8A8 button;struct $::$3EE7B06A270C04578BB8E913655EF387::$9F305630A89BCB81B98C380477E18E28 pointer;};
struct $26E851949BDE2473590BDE12DE36451F {CARD8 reqType;CARD8 opcode;CARD16 length;xieTypLUT lut;};
struct $26F1D6D56207344432074B51DE844734 {ulong dl_primitive;ulong dl_flag;ulong dl_dest_addr_length;ulong dl_dest_addr_offset;ulong dl_src_addr_length;ulong dl_src_addr_offset;};
struct $26F23E21FE3C115D149F20D47AE6B974 {CARD8 reqType;CARD8 opcode;CARD16 length;pexEnumTypeIndex fpFormat;CARD16 unused;pexPhigsWks wks;CARD32 numCoords;};
struct $26F73497F4CB46505328DAABF2BFD175 {CARD32 numFonts;};
struct $27012E1913B84130F58F820F1C74F43D {CARD8 type;BYTE state;CARD16 sequenceNumber;CARD32 length;CARD32 window;CARD32 tilOrSince;CARD32 si_idle;CARD32 eventMask;BYTE kind;CARD8 pad0;CARD16 pad1;CARD32 pad2;};
struct $272B86F1CC556AC2FE1FEA8F3F6F9065 {CARD8 reqType;CARD8 opcode;CARD16 length;xieTypColorList colorList;};
enum $273F9245AF4031A58D8B6B8D9D4CC35E {XmPUSHBUTTON = 0x1,XmTOGGLEBUTTON = 0x2,XmRADIOBUTTON = 0x3,XmCASCADEBUTTON = 0x4,XmSEPARATOR = 0x5,XmDOUBLE_SEPARATOR = 0x6,XmTITLE = 0x7,};
struct $27AC02CFF97A742F93959B98FA171589 {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;BYTE map[32];};
struct $27CF644397FD5A20F451D9B4452FA519 {CARD8 reqType;CARD8 opcode;CARD16 length;pexEnumTypeIndex fpFormat;CARD16 unused;pexStructure sid;CARD16 position1_whence;CARD16 unused1;INT32 position1_offset;CARD16 position2_whence;CARD16 unused2;INT32 position2_offset;};
struct $28183F13DB7442E77993ED2BEDDC9E43 {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD8 deviceid;CARD8 firstKeyCode;CARD8 keySymsPerKeyCode;CARD8 keyCodes;};
struct $284506C979FEDDB504B5CAD235C82ADC {BYTE type;BYTE data1;CARD16 sequenceNumber;CARD32 length;CARD32 status;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct $285F0FADE91E5A658C218520A75CA52C {struct in6_addr sender;uint32_t gpi;};
struct $286685DE7481B1DFAAFD94C57C4D4578 {int proto_version;unsigned int flags;char username[64];char reserved[232];};
struct $286A111ACEDB435E271A47289B65D34E {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD32 owner;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
enum $2893428BD927CDFCCAACC59ACD2F737F {XmSHADOW_IN = 0x7,XmSHADOW_OUT = 0x8,};
struct $28B66B4EFFBFED5B388B1B96F1A4FD3D {unsigned __int16 count;PEXListOfUShort *lists;};
enum $28C8A916C7103946A5DCC8FD950343DA {_XM_IS_DEST_CTX = 0x0,_XM_IS_GC_DATA_CTX = 0x1,_XM_IS_PIXMAP_CTX = 0x2,};
struct $28DBCFF2F5EB26695C388B23D6931809 {int type;unsigned __int64 serial;int send_event;Display *display;Window window;};
struct $292923DDD4ED46EE83D974C820DC3932 {CARD8 reqType;BYTE pad;CARD16 length;CARD16 maxNames;CARD16 nbytes;};
struct $29720D4B1372A72A8E922F3C51907D2B {void *data;size_t size;};
struct $29759B8970C1DA10DE8D43838461D9CA {CARD16 oc_opcode;CARD16 oc_length;pexColorType colorType;CARD16 mPts;CARD16 nPts;pexBitmaskShort facetAttribs;pexBitmaskShort vertexAttribs;CARD16 shape;};
struct $29C593C589279C3E7D511580F3E78129 {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD8 deviceid;CARD8 first_valuator;CARD8 num_valuators;BYTE pad1;};
struct $29DBA087DFE16744A29CB8F8CD68D43B {CARD32 length;CARD16 status;CARD16 pad;};
struct $2A100A9CF6EEF850F01D07ABF5CD8FF1 {CARD16 oc_opcode;CARD16 oc_length;PEXFLOAT point1_x;PEXFLOAT point1_y;PEXFLOAT point1_z;PEXFLOAT point2_x;PEXFLOAT point2_y;PEXFLOAT point2_z;PEXFLOAT point3_x;PEXFLOAT point3_y;PEXFLOAT point3_z;CARD32 dx;CARD32 dy;};
struct $2A2BB2E6A1A637B547E2DF81ADC3376A {BYTE type;BYTE errorCode;CARD16 sequenceNumber;CARD32 resourceID;CARD16 minorCode;CARD8 majorCode;BYTE pad1;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct $2A5DFF74EC698EEE5063958975E2158B {ulong dl_primitive;ulong dl_addr_type;};
struct $2A5F331BE8D13DBE7F0EFE2DE0745FC4 {CARD8 type;CARD8 pad0;CARD16 sequenceNumber;CARD32 length;CARD32 authId;CARD16 dataLength;CARD16 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct $2A62C6A6514F00B57AA484199B50E365 {BYTE type;CARD8 what;CARD16 sequenceNumber;CARD32 length;CARD32 numIndices;BYTE pad[20];};
struct $2A73BF0E4CA9808D683BEEEFEEB2900C {BYTE type;BYTE request;CARD16 sequenceNumber;CARD32 length;fsTimestamp timestamp;CARD8 major_opcode;CARD8 minor_opcode;CARD16 pad;CARD32 event_mask;};
struct $2A836C4928CD984F3FFB6D650DD9269A {pexTableIndex strchr;CARD16 pad;};
struct $2A859DA02CD5E3593B5918B42FA7FFEB {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD32 destination;CARD8 deviceid;BOOL propagate;CARD16 count;CARD8 num_events;BYTE pad1;BYTE pad2;BYTE pad3;};
enum $2A9A0AD3137DAC1E7C7E9C93534584E8 {LayoutPending = 0x0,LayoutInProgress = 0x1,LayoutDone = 0x2,};
enum $2ADC401C2E21ED1A63A0FE0B868E544D {XOMOrientation_LTR_TTB = 0x0,XOMOrientation_RTL_TTB = 0x1,XOMOrientation_TTB_LTR = 0x2,XOMOrientation_TTB_RTL = 0x3,XOMOrientation_Context = 0x4,};
struct $2AE07F4A994C5FC6C65BC46898F1D740 {int present;__int16 major_version;__int16 minor_version;};
struct $2B0172CE0AF913C9F21F980DF2CB4B9A {int type;unsigned __int64 serial;int send_event;Display *display;Window window;XID deviceid;Time time;int request;int first_keycode;int count;};
struct $2B06E042F96B7E1B4B7C5FE172128D1C {PEXCoord2D point;PEXVector2D vector;};
struct $2B0C7BC237EA785081DC8BB3BF49058B {CARD8 type;CARD8 detail;CARD16 sequenceNumber;CARD32 length;};
struct $2B0FE3CE97643252456137D89C9199E9 {CARD16 elemType;CARD16 elemLength;CARD32 rectangles;};
enum $2B17190EDB43F17974ABDA2F217A89F1 {XawselectNull = 0x0,XawselectPosition = 0x1,XawselectChar = 0x2,XawselectWord = 0x3,XawselectLine = 0x4,XawselectParagraph = 0x5,XawselectAll = 0x6,};
struct $2B28F023E44E807B69CBD6D694D8FE1D {xieTypOrientation encodedOrder;CARD8 pad[3];};
struct $2B2D277CB94E3786AC978CB982FDCC47 {struct $2B2D277CB94E3786AC978CB982FDCC47::$400BA39E42047056CF99A3263FA31D4C register_client;struct $2B2D277CB94E3786AC978CB982FDCC47::$73418DF873F0AEAE72664EE28475962B interact_request;struct $2B2D277CB94E3786AC978CB982FDCC47::$F3FCB5F8AADE779F0358406CD1E720C8 interact_done;struct $2B2D277CB94E3786AC978CB982FDCC47::$85517BA59E6BA55FB4735AB48AC251E7 save_yourself_request;struct $2B2D277CB94E3786AC978CB982FDCC47::$0DD87E7D5067AFA6367924F4350962B4 save_yourself_phase2_request;struct $2B2D277CB94E3786AC978CB982FDCC47::$F5F34547B09E0E11024B1056985C8E5F save_yourself_done;struct $2B2D277CB94E3786AC978CB982FDCC47::$9C9DDB14D1D289A980AAF2B4D6C80B7E close_connection;struct $2B2D277CB94E3786AC978CB982FDCC47::$EC5C984D1ABB44D79E844BA1925B0F8F set_properties;struct $2B2D277CB94E3786AC978CB982FDCC47::$57292DFCF470BDC3494EA7118CBCC8BD delete_properties;struct $2B2D277CB94E3786AC978CB982FDCC47::$376D00C7E1B7A5ED22C80CA26753DCCE get_properties;};
struct $2B2D277CB94E3786AC978CB982FDCC47::$0DD87E7D5067AFA6367924F4350962B4 {SmsSaveYourselfPhase2RequestProc callback;SmPointer manager_data;};
struct $2B2D277CB94E3786AC978CB982FDCC47::$376D00C7E1B7A5ED22C80CA26753DCCE {SmsGetPropertiesProc callback;SmPointer manager_data;};
struct $2B2D277CB94E3786AC978CB982FDCC47::$400BA39E42047056CF99A3263FA31D4C {SmsRegisterClientProc callback;SmPointer manager_data;};
struct $2B2D277CB94E3786AC978CB982FDCC47::$57292DFCF470BDC3494EA7118CBCC8BD {SmsDeletePropertiesProc callback;SmPointer manager_data;};
struct $2B2D277CB94E3786AC978CB982FDCC47::$73418DF873F0AEAE72664EE28475962B {SmsInteractRequestProc callback;SmPointer manager_data;};
struct $2B2D277CB94E3786AC978CB982FDCC47::$85517BA59E6BA55FB4735AB48AC251E7 {SmsSaveYourselfRequestProc callback;SmPointer manager_data;};
struct $2B2D277CB94E3786AC978CB982FDCC47::$9C9DDB14D1D289A980AAF2B4D6C80B7E {SmsCloseConnectionProc callback;SmPointer manager_data;};
struct $2B2D277CB94E3786AC978CB982FDCC47::$EC5C984D1ABB44D79E844BA1925B0F8F {SmsSetPropertiesProc callback;SmPointer manager_data;};
struct $2B2D277CB94E3786AC978CB982FDCC47::$F3FCB5F8AADE779F0358406CD1E720C8 {SmsInteractDoneProc callback;SmPointer manager_data;};
struct $2B2D277CB94E3786AC978CB982FDCC47::$F5F34547B09E0E11024B1056985C8E5F {SmsSaveYourselfDoneProc callback;SmPointer manager_data;};
struct $2B4C97E383E567F029CDA6243F5AAF9B {CARD16 elemType;CARD16 elemLength;xieTypPhotomap photomap;BOOL notify;CARD8 pad[3];};
struct $2B6C11629D4FEDD0D62560CB169B6CB3 {INT32 offsetX;INT32 offsetY;xieTypPhototag domain;};
struct $2BC1F1B8D826A2B7246049888B898D44 {unsigned __int16 clip_flags;unsigned __int16 reserved;PEXNPCSubVolume clip_limits;PEXMatrix orientation;PEXMatrix mapping;};
struct $2BF13069EBDEE5493612AD0930AE3BF3 {CARD16 elemType;CARD16 elemLength;xieTypPhototag src;CARD16 pad1;INT32 domainOffsetX;INT32 domainOffsetY;xieTypPhototag domainPhototag;CARD16 pad2;xieTypHistogramShape shape;CARD16 lenParams;};
struct $2C268D9809C6E9DE2B818A0BB7518C2E {CARD16 control;CARD16 length;CARD32 num_valuators;};
struct $2CBEA6D71FAD1672A184D54827ABF8BA {CARD8 reqType;CARD8 opcode;CARD16 length;pexEnumTypeIndex fpFormat;CARD16 unused;CARD32 drawable;CARD32 numNames;};
struct $2CF4E60400BF6C180C38BA5BABB9C6FD {int type;unsigned __int64 serial;int send_event;Display *display;XvPortID port_id;Time time;Atom attribute;__int64 value;};
struct $2D0C20B301ADA5F52D6F367B663BBC22 {CARD16 elemType;CARD16 elemLength;xieTypPhototag src;CARD16 pad;xieTypROI roi;};
struct $2D364C288F00F24F9FAD5331C4ED7B4F {CARD8 reqType;CARD8 opcode;CARD16 length;pexNameSet src;pexNameSet dst;};
struct $2D593AC5DE5855BD6529B561E79A2DF8 {Widget widget;XtPointer radio_data;RadioGroup *radio_group;};
struct $2D59FDEE4261500A2FE9AC0FF5270F5C {CARD8 type;CARD8 category;CARD16 sequenceNumber;CARD32 length;CARD8 elementHeader;BOOL clientSwapped;CARD16 pad1;CARD32 idBase;CARD32 serverTime;CARD32 recordedSequenceNumber;CARD32 pad3;CARD32 pad4;};
struct $2D61994FD46097B273F1AE1ABC29F4D1 {int type;unsigned __int64 serial;int send_event;Display *display;XSyncCounter counter;XSyncValue wait_value;XSyncValue counter_value;Time time;int count;int destroyed;};
struct $2D6D05448839E8D39EF22D0A7A7B9E49 {BYTE type;CARD8 present;CARD16 sequenceNumber;CARD32 length;CARD16 major_version;CARD16 minor_version;CARD8 major_opcode;CARD8 first_event;CARD8 num_events;CARD8 first_error;CARD8 num_errors;CARD8 pad1;CARD16 pad2;};
struct $2DC198841459E87F3FD1246E7A993624 {__int16 rt_pri;ulong_t rt_tqsecs;__int64 rt_tqnsecs;};
struct $2DCD0F1E9CC07C591B62016D8BFDD080 {pexSwitch edges;CARD8 unused1;pexEnumTypeIndex edgeType;PEXFLOAT edgeWidth;pexColorType edgeColorType;CARD16 unused2;};
struct $2DFE04FA474C787A00BCDC32AEB81E8F {int type;Display *display;unsigned __int64 flo_id;unsigned __int64 serial;unsigned __int8 error_code;unsigned __int8 request_code;unsigned __int8 minor_code;unsigned int flo_error_code;unsigned __int64 name_space;XiePhototag phototag;unsigned int elem_type;unsigned __int64 bad_value;};
struct $2E0E2C12F04118C9E52BAE749EE378FF {XExtData *ext_data;int depth;int bits_per_pixel;int scanline_pad;};
struct $2E22270806C47E05D9B4938893A6CA7A {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD16 nPixels;CARD16 nMasks;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
enum $2E2E66AB16B6733286DFB227364D15C8 {XMT_NIL = 0x0,XMT_SIMPLE = 0x1,XMT_RESERVED = 0x2,XMT_STRIPE = 0x3,};
struct $2E381990D243D58AF2A1DAAABF4281C8 {BYTE type;CARD8 backingStore;CARD16 sequenceNumber;CARD32 length;CARD32 visualID;CARD16 class;CARD8 bitGravity;CARD8 winGravity;CARD32 backingBitPlanes;CARD32 backingPixel;BOOL saveUnder;BOOL mapInstalled;CARD8 mapState;BOOL override;CARD32 colormap;CARD32 allEventMasks;CARD32 yourEventMask;CARD16 doNotPropagateMask;CARD16 pad;};
struct $2E55BACA418C7D9DC01173D7FC9AB491 {CARD8 reqType;CARD8 xvReqType;CARD16 length;CARD32 port;CARD16 vid_w;CARD16 vid_h;CARD16 drw_w;CARD16 drw_h;CARD8 motion;CARD8 pad1;CARD16 pad2;};
struct $2E56E956F88F593FE24676E86AAE3518 {unsigned __int16 count_values;char **supported_values;};
struct $2E7DDE8AB55005F1D7D9A8CD8F9DA480 {unsigned __int16 count;PEXTableIndex *indices;};
struct $2EF0E303BAAC00B5C587DB3702F187EB {INT16 fpFormat;CARD8 unused[2];CARD32 rdr;};
struct $2EF3B7A505F6297B4E68C64FB7023BBF {XID id_base;Time server_time;unsigned __int64 client_seq;int category;int client_swapped;unsigned __int8 *data;unsigned __int64 data_len;};
struct $2F468BC709214AC07C55BDB409DB2612 {int vmin;int vmax;int vOrigin;int vExtent;int hmin;int hmax;int hOrigin;int hExtent;Position hsbX;Position hsbY;Dimension hsbWidth;Dimension hsbHeight;Position vsbX;Position vsbY;Dimension vsbWidth;Dimension vsbHeight;Dimension GivenHeight;Dimension GivenWidth;Dimension AreaWidth;Dimension AreaHeight;Dimension WidthPad;Dimension HeightPad;Position XOffset;Position YOffset;Dimension pad;Boolean hasHSB;Boolean hasVSB;Boolean InInit;Boolean FromResize;unsigned __int8 VisualPolicy;unsigned __int8 ScrollPolicy;unsigned __int8 ScrollBarPolicy;unsigned __int8 Placement;XmScrollBarWidget hScrollBar;XmScrollBarWidget vScrollBar;XmDrawingAreaWidget ClipWindow;Widget WorkWindow;XtCallbackList traverseObscuredCallback;};
struct $2F5E0288A063535AE9E1AFEFB32DBF94 {PEXTableIndex strchr;unsigned __int16 reserved;PEXViewEntry view;};
struct $2F6E771888829A51D9160AC35D02FBD9 {PEXFLOAT origin_x;PEXFLOAT origin_y;PEXFLOAT origin_z;PEXFLOAT direction_x;PEXFLOAT direction_y;PEXFLOAT direction_z;CARD16 numberIntersections;CARD16 pad;};
struct $2FDB4F6B8F6F19972B61C0DBC5A8E397 {XtCallbackList report_callbacks;};
struct $302B25F756BB244E094BD511B92C6034 {char name[30];uchar type;uchar operation;uint status;__int64 index;union $302B25F756BB244E094BD511B92C6034::$27F2196C01C5C9EEF5AC09572627F38C attr;};
union $302B25F756BB244E094BD511B92C6034::$27F2196C01C5C9EEF5AC09572627F38C {struct $::$27F2196C01C5C9EEF5AC09572627F38C::$235C8FBA2DE0C674500C94FFAD6D84EA bin;struct $::$27F2196C01C5C9EEF5AC09572627F38C::$0D3FD1629CBEFCB3E216DB303040F48D str;struct $::$27F2196C01C5C9EEF5AC09572627F38C::$F5EF242307EFAD87F5BC72EA7929B143 num;struct $::$27F2196C01C5C9EEF5AC09572627F38C::$754A66FCA3EC32945A92F3755A6D4346 arr;};
struct $3069520C01748D65963A1DD1AEA3B642 {INT32 state;};
struct $30B70AE4F294613C62268FE45513ED13 {int type;unsigned __int64 serial;int send_event;Display *display;Window event;Window window;int from_configure;};
enum $30B9A4A173392B5D482C29C97080B247 {TCNTL_E_POLICE_FLAG = 0x1,TCNTL_M_POLICE_FLAG = 0x2,TCNTL_B_POLICE_FLAG = 0x4,};
struct $30BCA89C202854D1029D857BF2BAD2C0 {PEXCoord point;PEXColorHLS hls;PEXVector normal;unsigned int edge;};
struct $30D7FFF54E3B0918828B4363E7A35B26 {_LC_object_t hdr;char *(*nl_langinfo)(__nl_item, struct _LC_resp_t *);int (*rpmatch)(const char *, struct _LC_resp_t *);struct _LC_resp_t *(*init)(struct _LC_locale_t *);void *data;};
enum $3117C89E8107AE9270BADC6F61C8CFBE {XmARROW_UP = 0x0,XmARROW_DOWN = 0x1,XmARROW_LEFT = 0x2,XmARROW_RIGHT = 0x3,};
struct $31397966837D66AE1047198855EC3C73 {unsigned int msg_type_unused;};
struct $31463F47AE2D877187E6B8319EF31FC9 {CARD16 composition;CARD16 unused;pexMatrix3X3 matrix;};
struct $31922ACD1CFB99982B39C63C8B167B10 {ulong dl_primitive;ulong dl_level;};
struct $3208E1BA8126707DC1A488F29A0DED72 {CARD8 type;BOOL enabled;CARD16 sequenceNumber;CARD32 length;CARD8 elementHeader;CARD8 pad;CARD16 pad0;CARD32 nClients;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct $3224684BD501E054CF1A67297C7290FB {int type;unsigned __int64 serial;int send_event;Display *display;Window parent;Window window;};
struct $3229C80152E2A53E9C46A6EDD2E45AEF {CARD16 oc_opcode;CARD16 oc_length;pexEnumTypeIndex reflectionModel;CARD16 pad;};
struct $32453B3EC12C1083BBBEA47A258ADABA {CARD8 reqType;BYTE pad;CARD16 length;CARD16 nbytes;BYTE pad1;BYTE pad2;};
struct $326076F7099E6F08FACB2F19F051A23E {CARD8 reqType;CARD8 minor_opcode;CARD16 length;CARD8 config_flags_valid[4];CARD8 config_flags_data[4];ReqFlags config_flags_req;EventFlags config_flags_event;CARD16 config_max_pkt_size;CARD8 config_cmd_key;CARD8 config_pad[1];CARD32 pad;};
struct $32814486483B74398EA3D6D6C36E06C2 {BYTE type;BYTE data1;CARD16 sequenceNumber;CARD32 length;};
struct $3281815EF510FB5432D1AC4F74C6C79F {xieTypInterleave interleave;xieTypOrientation bandOrder;CARD16 lenTable;CARD8 predictor[3];CARD8 pad;};
struct $32BEEC00F4BCB3FF9C360DE7DA7F467E {CARD8 reqType;CARD8 opcode;CARD16 length;pexEnumTypeIndex fpFormat;pexEnumTypeIndex method;CARD8 sendEvent;CARD8 unused[3];pexRenderer rdr;CARD32 drawable;INT32 sid;CARD32 pickMaxHits;};
struct $33211E192AB127B684F8E5E0E97B7294 {BYTE type;CARD8 what;CARD16 sequenceNumber;CARD32 length;CARD32 numElements;BYTE pad[20];};
struct $332DAF04ECBC04920B62E656819721B6 {PEXSwitch edge_flag;unsigned __int8 reserved;PEXEnumTypeIndex type;float width;PEXColorSpecifier color;};
struct $335EDB02744B103283B800FF919FC940 {__int16 x1;__int16 y1;__int16 x2;__int16 y2;};
struct $3369594E17BD6DC3517892D04DD0216E {CARD8 reqType;CARD8 XTestReqType;CARD16 length;CARD32 mode;};
struct $338644C2278094D31E58DDA0CC7454C7 {char *icon_name;Boolean iconic;Atom icon_name_encoding;};
enum $33979EF12F27A31BA16073A8A9087BAD {XmCOMMAND_ABOVE_WORKSPACE = 0x0,XmCOMMAND_BELOW_WORKSPACE = 0x1,};
struct $33AF8112BACFF99F66629433CE03587D {CARD32 flags;CARD8 char_range_min_char_high;CARD8 char_range_min_char_low;CARD8 char_range_max_char_high;CARD8 char_range_max_char_low;CARD8 draw_direction;CARD8 pad;CARD8 default_char_high;CARD8 default_char_low;INT16 min_bounds_left;INT16 min_bounds_right;INT16 min_bounds_width;INT16 min_bounds_ascent;INT16 min_bounds_descent;CARD16 min_bounds_attributes;INT16 max_bounds_left;INT16 max_bounds_right;INT16 max_bounds_width;INT16 max_bounds_ascent;INT16 max_bounds_descent;CARD16 max_bounds_attributes;INT16 font_ascent;INT16 font_descent;};
struct $33E0BD21BC9E25CB376AFEED9A297D0A {BYTE type;BYTE data1;CARD16 sequenceNumber;CARD32 length;CARD32 data00;CARD32 data01;CARD32 data02;CARD32 data03;CARD32 data04;CARD32 data05;};
struct $34548B7CB167799CAEAA22832C93FB03 {PEXCoord point;PEXColorHSV hsv;PEXVector normal;};
struct $34681C3D6FB58953006C9844DC50C14F {BYTE type;BYTE map[31];};
struct $346B3FD68C26438FA8B69D57DEBF0D40 {ShmSeg shmseg;int shmid;char *shmaddr;int readOnly;};
struct $34A12E12B64B689AEBAE9E53027472C2 {CARD8 reqType;CARD8 opcode;CARD16 length;pexEnumTypeIndex fpFormat;pexEnumTypeIndex method;pexRenderer rdr;CARD32 drawable;pexStructure sid;};
struct $34ED46E58DBFFB45D3F1A07588A6DE09 {unsigned int value_mask;Pixmap iconify_pixmap;int icon_box_x;int icon_box_y;Boolean tiled;Boolean sticky;Boolean no_iconify_button;Boolean no_lower_button;Boolean no_resize_button;};
struct $34FF148B61EF6B7E2B02848F84D564A1 {coff_addr r_offset;coff_uint r_info;coff_uint reserved;};
struct $350BC2B23F9B41AFEB7D1AE3E404670A {CARD8 majorOpcode;CARD8 minorOpcode;CARD8 versionIndex;CARD8 unused;CARD32 length;};
struct $3518B1C16AD615E8887B1326F3EF5649 {CARD16 elemType;CARD16 elemLength;xieTypPhototag src;xieTypExportNotify notify;CARD8 pad;xieTypEncodeTechnique encodeTechnique;CARD16 lenParams;};
enum $3554E9F53AAF9A4A0C1CB35FF6413EF3 {XmDIALOG_TEMPLATE = 0x0,XmDIALOG_ERROR = 0x1,XmDIALOG_INFORMATION = 0x2,XmDIALOG_MESSAGE = 0x3,XmDIALOG_QUESTION = 0x4,XmDIALOG_WARNING = 0x5,XmDIALOG_WORKING = 0x6,};
struct $355FFBAADB08B4CAA5BBFAF829DED10A {RECORD_RANGE8 majorCode;RECORD_RANGE16 minorCode;};
enum $35A689336FE0D24D3433A45C728BDA9A {IceConnectPending = 0x0,IceConnectAccepted = 0x1,IceConnectRejected = 0x2,IceConnectIOError = 0x3,};
struct $36766FCE469C1674D0D4B7F9C0004007 {PEXEnumTypeIndex type;PEXEnumTypeIndex interp_method;PEXCurveApprox curve_approx;float width;PEXColorSpecifier color;};
struct $368F1E0A185F41AC2CF8F5888E31D674 {unsigned __int8 keycode;unsigned __int8 modbits;};
struct $3696947288DD42492044D329A84A4A03 {int foo;};
struct $36DE37CB51FE5E11DEB44C8315B704E8 {BYTE type;CARD8 deltaTime;INT8 deltaX;INT8 deltaY;};
struct $36FE493A927D2BBEEB27F8ADBD5DE70B {__int16 screen;__int16 which_depth;__int16 fb_width;__int16 fb_height;__int16 depth;__int16 bits_per_pixel;__int16 scanline_pad;caddr_t physaddr;caddr_t pixmap;caddr_t plane_mask_phys;caddr_t plane_mask;};
struct $3716CA43F375A83D6075273D18F05604 {BYTE type;CARD8 what;CARD16 sequenceNumber;CARD32 length;CARD8 unused[8];CARD32 numStructures;BYTE pad[12];};
struct $373F2802832B6C372257024CF4E83DA3 {coff_uint sh_name;coff_uint sh_type;coff_uint sh_flags;coff_addr sh_addr;coff_off sh_offset;coff_uint sh_size;coff_uint sh_link;coff_uint sh_info;coff_uint sh_addralign;coff_uint sh_entsize;};
enum $3756B01F7090A8EC304464AC2079666C {XmCR_NONE = 0x0,XmCR_HELP = 0x1,XmCR_VALUE_CHANGED = 0x2,XmCR_INCREMENT = 0x3,XmCR_DECREMENT = 0x4,XmCR_PAGE_INCREMENT = 0x5,XmCR_PAGE_DECREMENT = 0x6,XmCR_TO_TOP = 0x7,XmCR_TO_BOTTOM = 0x8,XmCR_DRAG = 0x9,XmCR_ACTIVATE = 0xA,XmCR_ARM = 0xB,XmCR_DISARM = 0xC,XmCR_MAP = 0x10,XmCR_UNMAP = 0x11,XmCR_FOCUS = 0x12,XmCR_LOSING_FOCUS = 0x13,XmCR_MODIFYING_TEXT_VALUE = 0x14,XmCR_MOVING_INSERT_CURSOR = 0x15,XmCR_EXECUTE = 0x16,XmCR_SINGLE_SELECT = 0x17,XmCR_MULTIPLE_SELECT = 0x18,XmCR_EXTENDED_SELECT = 0x19,XmCR_BROWSE_SELECT = 0x1A,XmCR_DEFAULT_ACTION = 0x1B,XmCR_CLIPBOARD_DATA_REQUEST = 0x1C,XmCR_CLIPBOARD_DATA_DELETE = 0x1D,XmCR_CASCADING = 0x1E,XmCR_OK = 0x1F,XmCR_CANCEL = 0x20,XmCR_APPLY = 0x22,XmCR_NO_MATCH = 0x23,XmCR_COMMAND_ENTERED = 0x24,XmCR_COMMAND_CHANGED = 0x25,XmCR_EXPOSE = 0x26,XmCR_RESIZE = 0x27,XmCR_INPUT = 0x28,XmCR_GAIN_PRIMARY = 0x29,XmCR_LOSE_PRIMARY = 0x2A,XmCR_CREATE = 0x2B,XmCR_TEAR_OFF_ACTIVATE = 0x2C,XmCR_TEAR_OFF_DEACTIVATE = 0x2D,XmCR_OBSCURED_TRAVERSAL = 0x2E,XmCR_PROTOCOLS = 0x2F,};
struct $37650F220AC0903949A382F68D80E2E0 {CARD8 class;CARD8 id;CARD16 length;CARD32 resolution;INT32 min_value;INT32 max_value;};
struct $37926C5A30BA4F8362B7B2DB97DA413B {PEXColorType color_type;unsigned __int16 row_count;unsigned __int16 col_count;PEXArrayOfColor colors;};
struct $37A9DB4B311662424B6FA129E06762F1 {CARD8 reqType;CARD8 button;CARD16 length;CARD32 grabWindow;CARD16 modifiers;CARD16 pad;};
struct $37BE2491590EE7EB76B44447C3CB76CA {BYTE type;CARD8 depth;CARD16 sequenceNumber;CARD32 length;CARD32 root;INT16 x;INT16 y;CARD16 width;CARD16 height;CARD16 borderWidth;CARD16 pad1;CARD32 pad2;CARD32 pad3;};
struct $37CF6FD3D8604C440825361FBCF768B5 {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD32 grabWindow;CARD16 event_count;CARD16 modifiers;CARD8 modifier_device;CARD8 grabbed_device;CARD8 key;BYTE this_device_mode;BYTE other_devices_mode;BOOL ownerEvents;BYTE pad1;BYTE pad2;};
struct $3873B2DA9B3CAF6B20E0ED2D9A646759 {int type;unsigned __int64 serial;int send_event;struct _XDisplay *display;};
struct $389F741C4688F992C1DDC28AB9B68F46 {XcmsFloat red;XcmsFloat green;XcmsFloat blue;};
struct $38AB55CADF3218184FF2A828A7079C62 {CARD8 repType;CARD8 RepType;CARD16 sequenceNumber;CARD32 length;CARD32 nEvents;CARD8 axes;CARD8 mode;BYTE pad1;BYTE pad2;CARD32 pad01;CARD32 pad02;CARD32 pad03;CARD32 pad04;};
struct $38BC431CF83E096863532D796A6E7F77 {CARD8 repType;CARD8 RepType;CARD16 sequenceNumber;CARD32 length;CARD8 ndevices;CARD8 pad1;CARD8 pad2;CARD8 pad3;CARD32 pad01;CARD32 pad02;CARD32 pad03;CARD32 pad04;CARD32 pad05;};
struct $38C3DEC81229B66F67FB6D350D75FF5A {float x;float y;};
struct $38F7D1267E1957DAFC9112F1DC09DAC9 {PEXDeviceCoord2D position;float distance;};
struct $3913C70C468BB9A18134EB7A3B84657F {uint_t bsize;uint_t ffactor;uint_t nelem;uint_t cachesize;u_int32_t (*hash)(const void *, size_t);int lorder;};
enum $3916BF5E8CEDB8D71F3B98BB138E1D94 {CMFM_COPY = 0x0,CMFM_DELETE = 0x1,CMFM_ERROR = 0x2,};
struct $392B27E1A8FD319BEA48DA7B223FEC2D {PEXFLOAT red;PEXFLOAT green;PEXFLOAT blue;};
struct $3934EB209CD783CC2D4F68C3A60FD027 {CARD16 oc_opcode;CARD16 oc_length;PEXFLOAT origin_x;PEXFLOAT origin_y;CARD16 numEncodings;CARD16 unused;};
struct $393C16A032292777F0C3725FFB2C0008 {float x;float y;float z;};
struct $3962543319D6B0C0D2551C7AFB5C58EC {BYTE type;CARD8 what;CARD16 sequenceNumber;CARD32 length;CARD32 numPicked;pexEnumTypeIndex pickStatus;pexEnumTypeIndex morePicks;BYTE pad[16];};
struct $39758171791F2D896E6188A3F6878FCF {unsigned __int64 element_count;unsigned __int64 size;int has_refs;unsigned __int16 edit_mode;unsigned __int64 element_pointer;};
struct $39772637685CB5673CB65BCFE258A572 {unsigned __int64 value;unsigned __int64 count;};
struct $39A4136BB030D7809586100094537552 {CorePart core;CompositePart composite;ShellPart shell;OverrideShellPart override;};
struct $39AC6BDC8150FC3B5F593027BA6D2C88 {uint8_t ismh_version;uint8_t ismh_unused;uint16_t ismh_len32b;};
struct $39CFF7C6C04AC270946B2C47C30F8E5E {CARD16 oc_opcode;CARD16 oc_length;PEXFLOAT up_x;PEXFLOAT up_y;};
struct $39D86218829C645F9016AE787AE70914 {pexEnumTypeIndex approxMethod;CARD16 unused;PEXFLOAT uTolerance;PEXFLOAT vTolerance;};
struct $39DC38FE6F9D9CB7A4182EA2E1F19530 {INT32 x;INT32 y;CARD32 width;CARD32 height;};
struct $3A0CE8C42414E7B91A96672A3CA81959 {_LC_object_t hdr;wint_t (*towupper)(wint_t, struct _LC_ctype_t *);wint_t (*towlower)(wint_t, struct _LC_ctype_t *);wctype_t (*wctype)(char *, struct _LC_ctype_t *);int (*iswctype)(wint_t, wctype_t, struct _LC_ctype_t *);struct _LC_ctype_t *(*init)(struct _LC_locale_t *);void *data;};
struct $3A2AE62BCE225AF536516145E4F61430 {int reason;XEvent *event;XmString item;int item_length;int item_position;XmString *selected_items;int selected_item_count;int *selected_item_positions;char selection_type;};
enum $3A62C614979A92BEB5F3FA9C72B43E27 {XtGrabNone = 0x0,XtGrabNonexclusive = 0x1,XtGrabExclusive = 0x2,};
struct $3ACF1F82BEC6DEE83FE33E625399BBD7 {__int16 x;__int16 y;unsigned __int16 width;unsigned __int16 height;__int16 angle1;__int16 angle2;};
struct $3AD473A9924D2058FA4FA6E47C9E79DE {XRecordRange8 ext_major;XRecordRange16 ext_minor;};
struct $3AFF259FB5915F31DE3264913FDD68F1 {Boolean done_status;Boolean success_status;XmSelectType select_type;XSelectionRequestEvent *event;};
struct $3B00234C5998E2ECB70FFF97A8C8B026 {CARD8 depth;CARD8 pad1;CARD16 nVisuals;CARD32 pad2;};
struct $3B80496DCDE561EAC81E803683D00588 {CARD8 majorOpcode;CARD8 minorOpcode;CARD8 authIndex;CARD8 unused1;CARD32 length;CARD16 authDataLength;CARD8 unused2[6];};
struct $3B81704CAFF80915670BCDC93E5E5502 {CARD8 reqType;BYTE pad;CARD16 length;CARD32 srcDrawable;CARD32 dstDrawable;CARD32 gc;INT16 srcX;INT16 srcY;INT16 dstX;INT16 dstY;CARD16 width;CARD16 height;};
struct $3B895FF4AB049C141C5F7C25E8036379 {CARD16 control;CARD16 length;CARD8 first_valuator;CARD8 num_valuators;CARD8 pad1;CARD8 pad2;};
struct $3B8E4E23B9740784A6100A2DE9D445C8 {int type;unsigned __int64 serial;int send_event;Display *display;Window parent;Window window;int place;};
struct $3BE25E7CC08F2245A091500E0AFB6500 {Boolean end;XmGeoSegmentFixUpProc fix_up;Dimension even_height;Dimension even_width;Dimension min_width;Boolean stretch_width;Boolean uniform_border;Dimension border;unsigned __int8 fill_mode;unsigned __int8 fit_mode;Boolean sticky_end;Dimension space_left;Dimension space_end;Dimension space_between;Dimension max_box_width;Dimension boxes_height;Dimension fill_height;Dimension box_count;};
struct $3BE679DC1FFA371624A790DBC1F4853A {BYTE type;BYTE request;CARD16 sequenceNumber;CARD32 length;fsTimestamp timestamp;CARD8 major_opcode;CARD8 minor_opcode;CARD16 pad;CARD32 fontid;};
struct $3BEEF239534EE9E2D4AD58999E56F197 {CARD8 reqType;CARD8 ReqType;CARD16 length;};
struct $3C2DEEF62D6941960EED4B235F12B9FE {__int16 rt_maxpri;};
struct $3C4C38FC10522588E30AD31A846C8E7D {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD16 nColors;CARD16 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct $3C57A176DA13593CE98DBC4E12CE23DD {int type;unsigned __int64 serial;int send_event;Display *display;Window window;Window root;Window subwindow;Time time;int x;int y;int x_root;int y_root;unsigned int state;unsigned int keycode;int same_screen;};
struct $3C68DE36615A2A96935F4E8A62136411 {CARD8 reqType;BYTE pad;CARD16 length;CARD32 window;CARD32 selection;CARD32 time;};
struct $3CBBABF2DF729BA840419D28F3BEFDCF {id_t pc_cid;char pc_clname[8];__int64 pc_clinfo[8];};
struct $3CFE8A507A6CA455771B45BEC8FB5D0E {int type;unsigned __int64 serial;int send_event;Display *display;Multibuffer buffer;};
struct $3D21FB1102582F3AF8C30D15C03CBCDD {char *resource;};
struct $3D2747B906FBDDB46B196214774699C1 {CARD32 clientResource;CARD32 nRanges;};
struct $3D4A26743286481CAEF9451FC80F9AE7 {CARD16 elemType;CARD16 elemLength;xieTypROI roi;};
struct $3D6C9E6FC2A1930EF06F70ECE24ED2E6 {BYTE type;CARD8 nameLength;CARD16 sequenceNumber;CARD32 length;CARD32 nReplies;CARD32 font_header_flags;CARD8 font_hdr_char_range_min_char_high;CARD8 font_hdr_char_range_min_char_low;CARD8 font_hdr_char_range_max_char_high;CARD8 font_hdr_char_range_max_char_low;CARD8 font_header_draw_direction;CARD8 font_header_pad;CARD8 font_header_default_char_high;CARD8 font_header_default_char_low;INT16 font_header_min_bounds_left;INT16 font_header_min_bounds_right;INT16 font_header_min_bounds_width;INT16 font_header_min_bounds_ascent;INT16 font_header_min_bounds_descent;CARD16 font_header_min_bounds_attributes;INT16 font_header_max_bounds_left;INT16 font_header_max_bounds_right;INT16 font_header_max_bounds_width;INT16 font_header_max_bounds_ascent;INT16 font_header_max_bounds_descent;CARD16 font_header_max_bounds_attributes;INT16 font_header_font_ascent;INT16 font_header_font_descent;};
struct $3D86DAB88F294E28AB745B656712EB07 {Pixel foreground;Pixel background;Position *tabs;__int16 *char_tabs;int tab_count;};
struct $3DDB46D984C469553E00D9B3BEA3349C {XcmsFloat x;XcmsFloat y;XcmsFloat Y;};
enum $3E13AB1AE3EB517EC8E207F624474D4A {XmDROP = 0x0,XmDROP_HELP = 0x1,XmDROP_CANCEL = 0x2,XmDROP_INTERRUPT = 0x3,};
enum $3E17E73D3615670C5AA600E0ACAAD822 {TCNTL_ERR_OK = 0x0,TCNTL_ERR_NSCONFP = 0x1,TCNTL_ERR_NOMEM = 0x2,TCNTL_ERR_ADSPEC = 0x3,TCNTL_ERR_COPYOUTF = 0x4,TCNTL_ERR_NO_NET_RESOURCES = 0x5,TCNTL_ERR_FLOWSPEC = 0x6,TCNTL_ERR_INVARG = 0x7,TCNTL_ERR_TCNE = 0x8,TCNTL_ERR_BADTABLEI = 0x9,TCNTL_ERR_NSFLT = 0xA,TCNTL_ERR_TABTOOSMALL = 0xB,TCNTL_ERR_NSFIT = 0xC,TCNTL_ERR_RESINP = 0xD,TCNTL_ERR_FLNFND = 0xE,TCNTL_ERR_FLMFDEL = 0xF,TCNTL_ERR_TRESIZED = 0x10,TCNTL_ERR_INVSLOT = 0x11,TCNTL_ERR_NSLASTFI = 0x12,TCNTL_ERR_FLTOVERF = 0x13,TCNTL_ERR_TOUTDATED = 0x14,TCNTL_ERR_FITOVERF = 0x15,TCNTL_ERR_DUPFILT = 0x16,TCNTL_ERR_FINFND = 0x17,TCNTL_ERR_ATCNTL = 0x18,TCNTL_ERR_BUFTOOSMALL = 0x19,TCNTL_ERR_POLICY_REJECT = 0x1A,TCNTL_ERR_BADFTAG = 0x1B,};
struct $3E18A7AAF5D17F3F11EB968C0A78AED4 {BYTE type;CARD8 pad0;CARD16 sequenceNumber;CARD32 length;CARD32 font_header_flags;CARD8 font_hdr_char_range_min_char_high;CARD8 font_hdr_char_range_min_char_low;CARD8 font_hdr_char_range_max_char_high;CARD8 font_hdr_char_range_max_char_low;CARD8 font_header_draw_direction;CARD8 font_header_pad;CARD8 font_header_default_char_high;CARD8 font_header_default_char_low;INT16 font_header_min_bounds_left;INT16 font_header_min_bounds_right;INT16 font_header_min_bounds_width;INT16 font_header_min_bounds_ascent;INT16 font_header_min_bounds_descent;CARD16 font_header_min_bounds_attributes;INT16 font_header_max_bounds_left;INT16 font_header_max_bounds_right;INT16 font_header_max_bounds_width;INT16 font_header_max_bounds_ascent;INT16 font_header_max_bounds_descent;CARD16 font_header_max_bounds_attributes;INT16 font_header_font_ascent;INT16 font_header_font_descent;};
struct $3E42998FDDC5C684862E73CB30E5D264 {CARD8 reqType;CARD8 minor_opcode;CARD16 length;CARD32 mode;};
struct $3E4EA4C9BF2904B29D73725F23DCA801 {uid_t euid;gid_t egid;};
struct $3E84D1386F10E26A4E3E4F22FDD3C8B8 {int num_font;XFontStruct **font_struct_list;char **font_name_list;};
enum $3EACBFB1F6A69D9CA6E99CE3BA7C8589 {res_goahead = 0x0,res_nextns = 0x1,res_modified = 0x2,res_done = 0x3,res_error = 0x4,};
struct $3ED4349315ED2E34C219EF97C5E4C846 {XieInterleave interleave;XieOrientation band_order;};
struct $3F14E3E276E1BF8D07BF782EB53EE4F4 {PEXCoord point;PEXColorHSV hsv;unsigned int edge;};
struct $3F1DF86B3ED4ACB765D0831995228012 {u_char vers;u_char type;u_char answer;u_char pad;u_int id_num;struct sockaddr addr;};
struct $3F34AB9906293F0308C7392603E69CAC {int version;int ir_length;uchar_t ir[4];};
enum $3FD2CD758B4508E9872F8BD2F0A27490 {IS_GUAR_RSPEC = 0x82,GUAR_ADSPARM_C = 0x83,GUAR_ADSPARM_D = 0x84,GUAR_ADSPARM_Ctot = 0x85,GUAR_ADSPARM_Dtot = 0x86,GUAR_ADSPARM_Csum = 0x87,GUAR_ADSPARM_Dsum = 0x88,};
enum $405C8636DEE5D8D2C9F0466394C3E3EA {XrmoptionNoArg = 0x0,XrmoptionIsArg = 0x1,XrmoptionStickyArg = 0x2,XrmoptionSepArg = 0x3,XrmoptionResArg = 0x4,XrmoptionSkipArg = 0x5,XrmoptionSkipLine = 0x6,XrmoptionSkipNArgs = 0x7,};
struct $406DF191E6ADB1788294ED4DF895F08B {__int16 device_number;__int16 flags;__int16 click;__int16 bell;__int16 bell_pitch;__int16 bell_duration;__int16 auto_repeat;unsigned int autorepeats[8];unsigned int leds;};
struct $40A8640879409487CC655CBB9B1A193A {u_int n_entries;u_int n_insertions;u_int n_failures;u_int n_deletions;u_int n_matches;u_int max_n_entries;};
struct $40D12B33886549BA307B7AD93661C6CF {int dbm_dirf;int dbm_pagf;int dbm_flags;int dbm_pblksiz;__int64 dbm_maxbno;__int64 dbm_bitno;__int64 dbm_hmask;__int64 dbm_blkptr;int dbm_keyptr;__int64 dbm_blkno;__int64 dbm_pagbno;char dbm_pagbuf[1024];__int64 dbm_dirbno;char dbm_dirbuf[4096];void *dbm_lock;};
enum $40DDC86762D4922A231DE7BCE40E1602 {XmFONT_IS_FONT = 0x0,XmFONT_IS_FONTSET = 0x1,};
struct $410711789B9EDACF4D452D952EAA038F {int type;unsigned __int64 serial;int send_event;Display *display;unsigned __int64 name_space;Time time;unsigned __int64 flo_id;XiePhototag src;unsigned int elem_type;XieDecodeTechnique decode_technique;int aborted;unsigned int band_number;unsigned __int64 width;unsigned __int64 height;};
struct $415DA74186ECF69417C93EB1FA2EC6D4 {WINDOW *_win;wchar_t _ldis[16][9];char _lval[16][9];wchar_t _wval[16][9];__int16 _labx[16];__int16 _num;__int16 _len;bool _changed;bool _lch[16];};
struct $41836031DF6414D5D7D6CBA6C43D37BD {int status;void (*callback[4])();Opaque *stream;Opaque *stream_context;int memory_length;Opaque *memory;Opaque *memory_context;unsigned __int8 direction;unsigned __int8 *charset;int byte_length;unsigned __int8 *text;int nest_level;int version;};
struct $419D850E958B0F42F8B9D5E0BB3E2ED8 {CorePart core;CompositePart composite;ShellPart shell;WMShellPart wm;VendorShellPart vendor;TransientShellPart transient;};
struct $429599F7FB1F59952975B123E06D5503 {int type;unsigned __int64 serial;int send_event;Display *display;XPContext context;int detail;};
struct $42AB50CCE4DA10B1F65C2C09D80E775D {XID class;int length;XID id;int led_values;int led_mask;};
struct $42C4F57D7B4134782AEFE3C2B923A11A {CARD8 reqType;CARD8 opcode;CARD16 length;pexPhigsWks wks;pexTableIndex index1;pexTableIndex index2;CARD16 priority;CARD16 pad;};
struct $431023746282E83C34446CE1DCC859AA {BYTE type;BYTE padb1;CARD16 sequenceNumber;CARD32 length;CARD16 actual_width;CARD16 actual_height;CARD32 padl4;CARD32 padl5;CARD32 padl6;CARD32 padl7;CARD32 padl8;};
struct $431497C136870E9873948068EF0F03D8 {CARD8 reqType;BYTE pad;CARD16 length;CARD32 fid;CARD16 nbytes;BYTE pad1;BYTE pad2;};
struct $431927D121A472D7E8E49D39256862BD {PEXColorRGB rgb;PEXVector normal;};
struct $434B3255D002B67E7352AD09968BC579 {int type;unsigned __int64 serial;int send_event;Display *display;Window window;Window root;Window subwindow;Time time;int x;int y;int x_root;int y_root;unsigned int state;char is_hint;int same_screen;};
struct $4361408BED2235647FC2AC23AD3C77FE {CARD8 type;CARD8 detail;CARD16 sequenceNumber;CARD32 idx;CARD8 data[24];};
enum $439B6CC11D067694C5AE104EBD065164 {XawisOn = 0x0,XawisOff = 0x1,};
struct $43A14E5221FE3192342C11BFA2DB216B {CARD8 reqType;CARD8 opcode;CARD16 length;CARD16 maxNames;CARD16 numChars;};
struct $43F413DFE76D84785171E4F932967C4F {CARD16 elemType;CARD16 elemLength;xieTypPhototag src;CARD8 merge;CARD8 pad;xieTypLUT lut;CARD32 start0;CARD32 start1;CARD32 start2;};
struct $43F66B9FAB512FEC0C912857172689FE {CARD32 fill;};
struct $441A7E7FE5D08EFBF53E24081FE65BA0 {CARD16 oc_opcode;CARD16 oc_length;CARD16 numElements;CARD16 unused;};
struct $4425769459ED4D02F39F849992AF4AF1 {Atom selection;Atom target;};
struct $447FC71AB694A71F5F8338F97A6324BE {int auth_active;char my_auth_index;IcePointer my_auth_state;};
struct $44989FB912D962B2DEA21D74F6F43DAE {BYTE byteOrder;CARD8 num_auths;CARD16 major_version;CARD16 minor_version;CARD16 auth_len;};
struct $44DBA8761062EA5D0E0445C058A5F0FB {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD16 nPixels;CARD16 pad2;CARD32 redMask;CARD32 greenMask;CARD32 blueMask;CARD32 pad3;CARD32 pad4;};
struct $44E50AEC2878F8A6376C06FA64195504 {__int16 x1;__int16 x2;__int16 y1;__int16 y2;};
struct $452B50667C26CE7D018DF24891B25CAA {ulong dl_qos_type;dl_transdelay_t dl_trans_delay;dl_priority_t dl_priority;dl_protect_t dl_protection;__int64 dl_residual_error;};
struct $45331FD382D3B76DE50383933A2C35C9 {CARD8 reqType;BYTE pad;CARD16 length;CARD32 srcDrawable;CARD32 dstDrawable;CARD32 gc;INT16 srcX;INT16 srcY;INT16 dstX;INT16 dstY;CARD16 width;CARD16 height;CARD32 bitPlane;};
struct $4543C93AEA47F6ED8C90F8F964657E96 {CARD32 num_offsets;CARD32 data_len;};
struct $4581608EB282A4CD84CF9A6FF906DD32 {int type;unsigned __int64 serial;int send_event;Display *display;Window window;char key_vector[32];};
struct $459D1EAC2FA75EFF30D628B27AE51C95 {CARD8 reqType;CARD8 opcode;CARD16 length;pexStructure sid;CARD16 position_whence;CARD16 unused;INT32 position_offset;INT32 label;};
struct $45C3D3B24187DA1E651A3EFB4AA4B15F {uid_t uid;gid_t gid;mode_t mode;};
union $45D3800369E9F466ED3C6A1362FEE91C {PEXColorIndexed *indexed;PEXColorRGB *rgb;PEXColorHSV *hsv;PEXColorHLS *hls;PEXColorCIE *cie;PEXColorRGB8 *rgb8;PEXColorRGB16 *rgb16;};
struct $45D688CB45E801EDDCD39001FBABF3CD {xieTypInterleave interleave;xieTypOrientation bandOrder;CARD8 horizontalSamples[3];CARD8 verticalSamples[3];CARD16 lenQtable;CARD16 lenACtable;CARD16 lenDCtable;CARD16 pad;};
struct $45DCCDFC0525EE913BAEBC241F6FB2DF {CARD32 name;CARD32 value;};
struct $45E7993263F85A2D9E889806A5DE9E15 {PEXEnumTypeIndex type;__int16 reserved;float scale;PEXColorSpecifier color;};
struct $45F1E0828B80E7030BA1207BF76A2813 {Dimension margin_width;Dimension margin_height;Widget default_button;Widget dynamic_default_button;Widget cancel_button;Widget dynamic_cancel_button;XtCallbackList focus_callback;XtCallbackList map_callback;XtCallbackList unmap_callback;XtTranslations text_translations;XmFontList button_font_list;XmFontList label_font_list;XmFontList text_font_list;Boolean allow_overlap;Boolean default_position;Boolean auto_unmanage;unsigned __int8 resize_policy;Dimension old_width;Dimension old_height;Dimension old_shadow_thickness;unsigned __int8 shadow_type;Boolean in_set_values;Boolean initial_focus;Boolean no_resize;unsigned __int8 dialog_style;XmString dialog_title;Widget shell;Widget _UNUSED;XmGeoMatrix geo_cache;Boolean dxm_auto_unrealize;};
struct $460190B2881C302C92432D96CF83F9D2 {struct sockaddr_in sender;};
struct $4611845834F1A683F43198CA8D99A490 {float sigma;float normalize;unsigned int radius;int simple;};
enum $4645114C080423A315BE3A0EE193A9B2 {XmAUTOMATIC = 0x0,XmAPPLICATION_DEFINED = 0x1,};
struct $4674EB9E4136EBD6C3A84874FC613571 {int hardware_type;int axis_count;caddr_t pointer_handle;char *name;int (*ioctl)();int (*init_pointer)();void (*reset_pointer)();void (*enable_pointer)();void (*disable_pointer)();void (*set_pointer_mode)();void (*get_pointer_info)();void (*get_position_report)();int (*process_tablet_event)();int (*process_mouse_event)();void (*set_tablet_overhang)();int mswitches;int num_buttons;int rel_abs_mode;ws_pointer_control pr;ws_cursor_position position;ws_cursor_data cursor;ws_pointer_box suppress;ws_pointer_box constrain;int tablet_scale_x;int tablet_scale_y;unsigned int tablet_overhang;__int16 tablet_max_x;__int16 tablet_max_y;char tablet_x_axis;char tablet_y_axis;char tablet_new_screen;int (*pointer_private)();caddr_t private1;caddr_t private2;int unused;};
struct $4684C501B475E331C6F045D36C80F840 {CARD8 reqType;CARD8 opcode;CARD16 length;pexEnumTypeIndex fpFormat;CARD16 unused;pexPhigsWks wks;PEXFLOAT npcSubvolume_xmin;PEXFLOAT npcSubvolume_ymin;PEXFLOAT npcSubvolume_zmin;PEXFLOAT npcSubvolume_xmax;PEXFLOAT npcSubvolume_ymax;PEXFLOAT npcSubvolume_zmax;};
struct $468504E0172D6445E03F4E98BA249C85 {int state;};
struct $468E3F20F7462D23787414BB7174F8B3 {XEvent *event;String *params;Cardinal *num_params;};
struct $46D157C3B2262130CAD8633945DA87DB {CARD8 reqType;CARD8 opcode;CARD16 length;xieTypPhotospace nameSpace;CARD32 floID;CARD16 numElements;BOOL notify;CARD8 pad;};
struct $46F1A320ADC1A16D83880B1FB8D4BCA3 {_XmString name;Dimension height;Dimension width;Dimension CumHeight;Boolean selected;Boolean last_selected;Boolean LastTimeDrawn;unsigned __int16 NumLines;int length;};
struct $470449F8043B0E95436C3AE3811CEA11 {int depth;int nvisuals;Visual *visuals;};
struct $47089E63379DB1872B48665921C4055F {ulong dl_qos_type;__int64 dl_rcv_throughput;__int64 dl_rcv_trans_delay;__int64 dl_xmt_throughput;__int64 dl_xmt_trans_delay;__int64 dl_priority;__int64 dl_protection;__int64 dl_residual_error;dl_resilience_t dl_resilience;};
enum $475DA77725480EAC0616D0046F2D149B {XawstPositions = 0x0,XawstWhiteSpace = 0x1,XawstEOL = 0x2,XawstParagraph = 0x3,XawstAll = 0x4,};
struct $476054893965215BC30A46A434D1D847 {int reason;XEvent *event;int value;int pixel;};
struct $4765C1F51897B418A8E425F31FA3A750 {ulong_t flags;uint_t cachesize;int maxkeypage;int minkeypage;uint_t psize;int (*compare)(const DBT *, const DBT *);size_t (*prefix)(const DBT *, const DBT *);int lorder;};
struct $47687EDD1469965A559AF2323D217289 {unsigned __int64 event_mask;};
struct $4788A0C65CEF1424AE2DE816674E1913 {Elf32_Word p_type;Elf32_Off p_offset;Elf32_Addr p_vaddr;Elf32_Addr p_paddr;Elf32_Word p_filesz;Elf32_Word p_memsz;Elf32_Word p_flags;Elf32_Word p_align;};
struct $47AD942C1E13FA5A28931850B3F33088 {CARD8 reqType;CARD8 opcode;CARD16 length;pexStructure src;CARD16 srcPosition1_whence;CARD16 unused1;INT32 srcPosition1_offset;CARD16 srcPosition2_whence;CARD16 unused2;INT32 srcPosition2_offset;pexStructure dst;CARD16 dstPosition_whence;CARD16 unused3;INT32 dstPosition_offset;};
struct $47DAAB86EBF09131080EDB83B3644219 {int type;unsigned __int64 serial;int send_event;Display *display;Window parent;Window window;int x;int y;int width;int height;int border_width;int override_redirect;};
enum $4805655BE88EF9DDFB1A0EBC191B4778 {XmPARENT_ACTIVATE = 0x0,XmPARENT_CANCEL = 0x1,};
enum $4805EAB0B223F78A463BBC8BA0A6D5FF {IceAcceptSuccess = 0x0,IceAcceptFailure = 0x1,IceAcceptBadMalloc = 0x2,};
struct $48618F58206D45CA025FC75E2ABD1A5F {unsigned __int64 count;PEXArrayOfVertex vertices;};
struct $4861D9BFE2A7E5E384D09A595EEA31C4 {CARD8 tc_flags[2];XETrapCfg v;XETrapCB *req_cb;XETrapCB *evt_cb;CARD32 last_time;};
struct $488EF114463850BAC9987E879A5DF652 {XID device_id;int num_classes;XInputClassInfo *classes;};
struct $48974C792553FBFA318CEC22C625F222 {unsigned int size;XPointer addr;};
struct $48A0BCBFBE5BF4DD1FF757783C127908 {int reason;XEvent *event;int click_count;};
struct $48A5AC1E440CE609E026CA4EC554DC68 {CARD16 placementType;CARD16 unused;CARD16 numUcurves;CARD16 numVcurves;};
struct $48A6A373861130075F8524D5C353FEE6 {CARD32 pixel;CARD16 red;CARD16 green;CARD16 blue;CARD8 flags;CARD8 pad;};
struct $48AD93219D69C082A7FA7555BF967BAD {unsigned __int8 class;unsigned __int8 length;__int16 num_keys;char keys[32];};
struct $490A9E92B52CC6FBCDB41BC1E6677AC1 {unsigned __int64 count;PEXCoord *points;};
struct $49142964154B892EF7651BF5C6725D33 {CARD16 oc_opcode;CARD16 oc_length;PEXFLOAT spacing;};
struct $491ECD72E815BE4155E050EA9E29E31E {XawTextEditType edit_mode;XrmQuark text_format;};
struct $498D65FA687D063192E2A9ABE1CAA259 {__int64 x;__int64 y;unsigned __int64 width;unsigned __int64 height;};
struct $4A093DABF1EBC225441005B58E53F5A7 {PEXCoord point;unsigned int edge;};
enum $4A130DCDE97F329D07F4532896FFD2F9 {XmDROP_SITE_SIMPLE = 0x0,XmDROP_SITE_COMPOSITE = 0x1,XmDROP_SITE_SIMPLE_CLIP_ONLY = 0x80,XmDROP_SITE_COMPOSITE_CLIP_ONLY = 0x81,};
struct $4A1B9D76092A64E84CBC4D8EC852D53E {XvEncodingID encoding_id;char *name;unsigned __int64 width;unsigned __int64 height;XvRational rate;unsigned __int64 num_encodings;};
enum $4A29676AAA734113BCAB025ECBEC3878 {XmNO_LINE = 0x0,XmSINGLE_LINE = 0x1,XmDOUBLE_LINE = 0x2,XmSINGLE_DASHED_LINE = 0x3,XmDOUBLE_DASHED_LINE = 0x4,XmSHADOW_ETCHED_IN = 0x5,XmSHADOW_ETCHED_OUT = 0x6,XmSHADOW_ETCHED_IN_DASH = 0x7,XmSHADOW_ETCHED_OUT_DASH = 0x8,XmINVALID_SEPARATOR_TYPE = 0x9,};
struct $4A647C60455AE07B29957B156A9865A4 {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD16 imageRes;CARD16 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct $4ADBCAB7A61B5E3CC2B2B905B6ABF4BA {IS_serv_hdr_t mads_hdr;};
enum $4B428208B782ABE99A767087F20FFBB9 {XmSELECT_POSITION = 0x0,XmSELECT_WHITESPACE = 0x1,XmSELECT_WORD = 0x2,XmSELECT_LINE = 0x3,XmSELECT_ALL = 0x4,XmSELECT_PARAGRAPH = 0x5,XmSELECT_COMPSEQ = 0x6,};
struct $4B5A668A60E7040394A6BED954C677E5 {Pixel foreground;XtOrientation orientation;XtCallbackList scrollProc;XtCallbackList thumbProc;XtCallbackList jumpProc;Pixmap thumb;Cursor upCursor;Cursor downCursor;Cursor leftCursor;Cursor rightCursor;Cursor verCursor;Cursor horCursor;float top;float shown;Dimension length;Dimension thickness;Dimension min_thumb;Cursor inactiveCursor;char direction;GC gc;Position topLoc;Dimension shownLength;};
struct $4B6069307D1FCD665AA366F421E59ACD {IS_serv_hdr_t gen_Tspec_serv_hdr;IS_parm_hdr_t gen_Tspec_parm_hdr;TB_Tsp_parms_t gen_Tspec_parms;};
struct $4BDA116E141BAFF47F6709874A5B141F {CARD16 length;};
struct $4C0A166D0FCB5B830093FB9F7D7DFC34 {CARD8 reqType;CARD8 pad;CARD16 length;CARD32 drawable;CARD32 gc;INT16 x;INT16 y;};
struct $4C2068F4FA5FD804D09687C78D10F64A {CARD16 elemType;CARD16 elemLength;xieTypPhototag src;xieTypExportNotify notify;CARD8 pad1;INT32 domainOffsetX;INT32 domainOffsetY;xieTypPhototag domainPhototag;CARD16 pad2;};
struct $4C65BE1067297C4FADB11C7C25C29C00 {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD32 stringLen;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct $4C8CC24838C6E639697F367B1749F6DD {CARD8 reqType;CARD8 opcode;CARD16 length;pexPickMeasure pm;pexBitmask itemMask;};
struct $4C9FC87DA575F754989D5BFCDDDAE424 {Colormap colormap;unsigned __int64 red_max;unsigned __int64 red_mult;unsigned __int64 green_max;unsigned __int64 green_mult;unsigned __int64 blue_max;unsigned __int64 blue_mult;unsigned __int64 base_pixel;VisualID visualid;XID killid;};
struct $4CBE8E77F7F7B04FDA810848BC99B27A {unsigned int num;unsigned int seq;};
struct $4CEA7C0856663FB37AE47FD9F99BB511 {CARD8 reqType;CARD8 opcode;CARD16 length;xieTypTechniqueGroup techniqueGroup;CARD8 pad[3];};
struct $4CF2A723A8F4F5EA6EDE16F5794DEA22 {xieTypOrientation encodedOrder;BOOL normal;CARD16 pad;};
struct $4D26A5DBA4EA4251461280DA7EC20496 {CARD8 reqType;CARD8 opcode;CARD16 length;pexStructure sid;CARD16 position_whence;CARD16 unused;INT32 position_offset;CARD32 direction;CARD32 numIncls;CARD32 numExcls;};
struct $4D3DBF947D992ECBBC409CB8927D044E {XtActionProc popdownOne;XtActionProc popdownEveryone;XtActionProc popdownDone;XmMenuPopupProc popupSharedMenupane;XtPointer extension;};
struct $4D4DA87B9B0BE3071AFC68AFEDCFEBC4 {unsigned __int16 count;PEXTrimCurve *curves;};
struct $4D69B6347F056FE268056727CEA155AA {wchar_t *chars;int nchars;int delta;XFontSet font_set;};
struct $4D6CF402BE6604EF49AB6A1F1F900B99 {char match;String substitution;};
struct $4DAB985EC804DF06DE833983110A4312 {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD32 printContext;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct $4DC1B4F273766CB284E2F1711BB230F1 {CARD16 oc_opcode;CARD16 oc_length;pexMatrix3X3 matrix3X3;};
struct $4DCAC2088B3F168EF4BFBCEA383ECFD2 {CARD8 reqType;CARD8 format;CARD16 length;CARD32 drawable;INT16 x;INT16 y;CARD16 width;CARD16 height;CARD32 planeMask;};
struct $4DDB248A89871713B25DC329FBB14C64 {ulong dl_primitive;ulong dl_sap;ulong dl_addr_length;ulong dl_addr_offset;ulong dl_max_conind;ulong dl_xidtest_flg;};
union $4DE226F9B44EBBD1EF7A8B9F155EFB38 {TIR ti;RNDXR rndx;coff_int dnLow;coff_int dnHigh;coff_int isym;coff_int iss;coff_int width;coff_int count;coff_int slice;};
struct $4E034CF603E977B1C171CF8061167D87 {int type;unsigned __int64 serial;int send_event;Display *display;Window event;Window window;int override_redirect;};
struct $4E230DA965C384CCE937FCE2A8CE1FCC {CorePart core;CompositePart composite;ShellPart shell;WMShellPart wm;VendorShellPart vendor;TopLevelShellPart topLevel;ApplicationShellPart application;SessionShellPart session;};
struct $4E2DFB9F6290197309D31FB10928FA58 {CARD8 reqType;BYTE pad;CARD16 length;CARD32 cmap;CARD16 nbytes;BYTE pad1;BYTE pad2;};
struct $4E78C26E658CAF0AD1368496874A57C9 {XETrapRepHdr hdr;XETrapGetAvailRep data;};
struct $4E8A4C7FC2C9452EEDB2A455AEE467A8 {int update_hint;};
struct $4F59F244C8BC41CE3BBA04F63BC4AC24 {CARD8 reqType;CARD8 opcode;CARD16 length;CARD32 drawableExample;pexTableType tableType;CARD16 unused;};
struct $4F65BF1D323DF98CE7AB4A4E486FE4A1 {PEXCoord point;PEXColorHLS hls;};
struct $4F763A7D3653D2254F75B054CBA6F0C5 {CARD8 class;CARD8 id;CARD16 length;CARD16 pitch;CARD16 duration;CARD32 led_mask;CARD32 led_values;BOOL global_auto_repeat;CARD8 click;CARD8 percent;BYTE pad;BYTE auto_repeats[32];};
struct $4FA67FD0121DE61C8BBE74D0ECEE2878 {XRecordRange8 core_requests;XRecordRange8 core_replies;XRecordExtRange ext_requests;XRecordExtRange ext_replies;XRecordRange8 delivered_events;XRecordRange8 device_events;XRecordRange8 errors;int client_started;int client_died;};
struct $4FD488DE8E284B20604676A3AA0F9F29 {CARD32 firstGlyph;CARD32 lastGlyph;CARD32 defaultGlyph;pexSwitch allExist;pexSwitch strokeFont;CARD16 unused;CARD32 numProps;};
struct $4FE54840E357208BB1087AA93F026F9F {XieOrientation fill_order;XieOrientation pixel_order;unsigned int pixel_stride;unsigned int scanline_pad;};
struct $4FFA9527088137D66D8D180D61C68358 {int family;int length;char *address;};
struct $5008F01E628E3FC0ECEEA6F34DE755A1 {unsigned __int16 vertical;unsigned __int16 horizontal;};
struct $50389ABAE10CC71ADF32F220767ABB54 {unsigned __int64 count;PEXCoord2D *points;};
struct $503FC1073CA088AD2DC628ADD3D067B5 {int type;unsigned __int64 serial;int synthetic;Display *display;int detail;unsigned __int64 idx;unsigned __int8 data[24];};
struct $504B016FD037AF4CEAA065367FBF726A {CARD8 event;CARD8 bandNumber;CARD16 sequenceNum;CARD32 time;CARD32 instanceNameSpace;CARD32 instanceFloID;xieTypPhototag src;CARD16 type;xieTypDecodeTechnique decodeTechnique;BOOL aborted;CARD8 pad;CARD32 width;CARD32 height;};
struct $50772DE75AF019132AD1D3E995EADF5D {__int64 DataId;__int64 PrivateId;};
struct $5077D3CC3DD590AF02C9E55403D17F9F {int type;unsigned __int64 serial;int send_event;Display *display;Window window;Atom message_type;int format;union $5077D3CC3DD590AF02C9E55403D17F9F::$7DEDE306671FD382A7675926A9A7F037 data;};
union $5077D3CC3DD590AF02C9E55403D17F9F::$7DEDE306671FD382A7675926A9A7F037 {char b[20];__int16 s[10];__int64 l[5];};
enum $5082B94BDE211399AF6F85937D2B1C0A {XmCR_TOP_LEVEL_ENTER = 0x0,XmCR_TOP_LEVEL_LEAVE = 0x1,XmCR_DRAG_MOTION = 0x2,XmCR_DROP_SITE_ENTER = 0x3,XmCR_DROP_SITE_LEAVE = 0x4,XmCR_DROP_START = 0x5,XmCR_DROP_FINISH = 0x6,XmCR_DRAG_DROP_FINISH = 0x7,XmCR_OPERATION_CHANGED = 0x8,_XmNUMBER_DND_CB_REASONS = 0x9,};
struct $50A8F2CBF9209E81C59E0189B8E8717A {const char *ce_sym;_LC_weight_t ce_wgt;};
struct $50D2B38DA8D5F7F9D092D3B0069535E8 {SmcConn connection;String session_id;String *restart_command;String *clone_command;String *discard_command;String *resign_command;String *shutdown_command;String *environment;String current_dir;String program_path;unsigned __int8 restart_style;unsigned __int8 checkpoint_state;Boolean join_session;XtCallbackList save_callbacks;XtCallbackList interact_callbacks;XtCallbackList cancel_callbacks;XtCallbackList save_complete_callbacks;XtCallbackList die_callbacks;XtCallbackList error_callbacks;XtSaveYourself save;XtInputId input_id;XtPointer ses20;XtPointer ses19;XtPointer ses18;XtPointer ses17;XtPointer ses16;XtPointer ses15;XtPointer ses14;XtPointer ses13;XtPointer ses12;XtPointer ses11;XtPointer ses10;XtPointer ses9;XtPointer ses8;XtPointer ses7;XtPointer ses6;XtPointer ses5;XtPointer ses4;XtPointer ses3;XtPointer ses2;XtPointer ses1;};
enum $51029A804AB5230DF66495289C243640 {XmALIGNMENT_CONTENTS_TOP = 0x3,XmALIGNMENT_CONTENTS_BOTTOM = 0x4,};
struct $51068917AA5D318D8FA7A60BE15ADF1A {CARD16 oc_opcode;CARD16 oc_length;pexTableIndex strchr;CARD16 pad;};
struct $510FB59E31EC2DCA58C34F27FA32E28B {pexSwitch visibility;CARD8 unused;CARD16 order;pexCoordType type;INT16 approxMethod;PEXFLOAT tolerance;PEXFLOAT tMin;PEXFLOAT tMax;CARD32 numKnots;CARD32 numCoord;};
struct $515E86E3CDE4804C27E8EB5835C739ED {uid_t cuid;gid_t cgid;uid_t uid;gid_t gid;mode_t mode;};
struct $51749B1CBB08500DC0A3C077F7082133 {CARD8 reqType;CARD8 opcode;CARD16 length;xieTypPhotospace nameSpace;};
struct $518F0DEC427BFC57A6F8B4A0E681A1CE {CARD32 count;CARD32 timestamp;CARD8 type;CARD8 screen;INT16 win_x;INT16 win_y;CARD16 client;};
enum $51AD691829D8B52D9185C4E5F8346768 {XmFRAME_GENERIC_CHILD = 0x0,XmFRAME_WORKAREA_CHILD = 0x1,XmFRAME_TITLE_CHILD = 0x2,};
struct $51B346F0FD56B8F6A0022EA8D20F467C {ws_screen_descriptor *$30;ws_visual_descriptor *vp;ws_depth_descriptor *dp;ws_screen_functions *f;ws_color_map_functions *cmf;ws_cursor_functions *cf;ws_screen_box adj_screens;struct controller *ctlr;};
struct $5209941CB7D0C10FD4F27E8B15AD14E1 {Widget list_label;XmString list_label_string;Widget list;XmString *list_items;int list_item_count;int list_visible_item_count;int list_selected_item_position;Widget selection_label;XmString selection_label_string;Widget text;XmString text_string;__int16 text_columns;Widget work_area;Widget separator;Widget ok_button;XmString ok_label_string;Widget apply_button;XmString apply_label_string;XmString cancel_label_string;Widget help_button;XmString help_label_string;XtCallbackList ok_callback;XtCallbackList apply_callback;XtCallbackList cancel_callback;XtCallbackList no_match_callback;XtAccelerators text_accelerators;Boolean must_match;Boolean adding_sel_widgets;Boolean minimize_buttons;unsigned __int8 dialog_type;unsigned __int8 child_placement;};
enum $524C077D957471F3061D228C9C236D67 {IceClosedNow = 0x0,IceClosedASAP = 0x1,IceConnectionInUse = 0x2,IceStartedShutdownNegotiation = 0x3,};
enum $5252AF58AF7525DA13AA82FD1F51B9F5 {TK_ANCHOR_N = 0x0,TK_ANCHOR_NE = 0x1,TK_ANCHOR_E = 0x2,TK_ANCHOR_SE = 0x3,TK_ANCHOR_S = 0x4,TK_ANCHOR_SW = 0x5,TK_ANCHOR_W = 0x6,TK_ANCHOR_NW = 0x7,TK_ANCHOR_CENTER = 0x8,};
struct $52F2074E7DD96990D6ABF23BD388763B {ws_event ws;__int16 axis_data[2];};
struct $5342985482DA4551756A03BE632E6931 {XExtData *ext_data;struct _XDisplay *display;Window root;int width;int height;int mwidth;int mheight;int ndepths;Depth *depths;int root_depth;Visual *root_visual;GC default_gc;Colormap cmap;unsigned __int64 white_pixel;unsigned __int64 black_pixel;int max_maps;int min_maps;int backing_store;int save_unders;__int64 root_input_mask;};
struct $53791A33E2911636F452B242C84B4B8B {CARD8 reqType;CARD8 opcode;CARD16 length;CARD32 nameSpace;CARD32 floID;CARD32 maxBytes;xieTypPhototag element;BOOL terminate;CARD8 bandNumber;};
struct $537A2702615B7A9FDB0E43F3335D48EF {pexColorType colorType;CARD16 unused;};
struct $538026D6D814696035C959CCF36B9804 {CARD16 oc_opcode;CARD16 oc_length;CARD16 shape;pexColorType colorType;CARD16 FAS_Attributes;CARD16 vertexAttributes;CARD16 edgeAttributes;CARD8 contourHint;pexSwitch contourCountsFlag;CARD16 numFAS;CARD16 numVertices;CARD16 numEdges;CARD16 numContours;};
struct $53996C97E395EF20FC508697C3EEF92C {__int16 lbearing;__int16 rbearing;__int16 width;__int16 ascent;__int16 descent;unsigned __int16 attributes;};
struct $53A371D93AFA762A16435064A7495B18 {CARD16 elemType;CARD16 elemLength;xieTypPhototag src1;xieTypPhototag src2;INT32 domainOffsetX;INT32 domainOffsetY;xieTypPhototag domainPhototag;xieTypArithmeticOp operator;CARD8 bandMask;xieTypFloat constant0;xieTypFloat constant1;xieTypFloat constant2;};
struct $53A84E5818A8BF56A6CBC41177A9FFE2 {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD32 nEvents;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct $53B2C5E872CF4691EFE90F887D66B7FD {CARD8 reqType;BOOL exposures;CARD16 length;CARD32 window;INT16 x;INT16 y;CARD16 width;CARD16 height;};
struct $53C9126E4B810B5CAE2D85D2D296486D {PEXFLOAT hue;PEXFLOAT lightness;PEXFLOAT saturation;};
enum $53D85B5D788E52D277529232F64946A1 {XmNOT_NAVIGABLE = 0x0,XmCONTROL_NAVIGABLE = 0x1,XmTAB_NAVIGABLE = 0x2,XmDESCENDANTS_NAVIGABLE = 0x3,XmDESCENDANTS_TAB_NAVIGABLE = 0x4,};
struct $53ECFE89C89D8C03C24F6E293B8BEAFC {Visual *visual;VisualID visualid;int screen;int depth;int class;unsigned __int64 red_mask;unsigned __int64 green_mask;unsigned __int64 blue_mask;int colormap_size;int bits_per_rgb;};
struct $542723AFB6E36EC8067FBC55C1BF5843 {char *option;apOptionKind argKind;apValueType type;void *defValue;void *value;};
struct $5447248DB8CC2599D00069FFCC5655BA {CARD16 oc_opcode;CARD16 oc_length;pexEnumTypeIndex edgeType;CARD16 pad;};
struct $54527827121C21F3031526454FE9C7A8 {CARD8 reqType;BYTE pad;CARD16 length;CARD32 fid;fsBitmapFormatMask format_mask;fsBitmapFormat format_hint;};
struct $548F59098DBA4939E643BBEF2AD26EEA {int type;unsigned __int64 serial;int send_event;Display *display;Window owner;Window requestor;Atom selection;Atom target;Atom property;Time time;};
struct $552C52AB05687DD02B6759D4331D5B07 {CARD8 error;CARD8 code;CARD16 sequenceNum;CARD32 floID;CARD16 minorOpcode;CARD8 majorOpcode;CARD8 floErrorCode;CARD32 nameSpace;CARD8 pad[16];};
struct $5532C1654B9EF34861D348BF0E72BD7A {unsigned __int8 class;unsigned __int8 length;unsigned __int8 num_valuators;unsigned __int8 mode;int *valuators;};
struct $555515E43BC9CF64AF390C3AB1002B52 {XETrapRepHdr hdr;CARD8 data_state_flags[2];CARD16 data_pad0;CARD8 data_config_flags_valid[4];CARD8 data_config_flags_data[4];ReqFlags data_config_flags_req;EventFlags data_config_flags_event;CARD16 data_config_max_pkt_size;CARD8 data_config_cmd_key;CARD8 data_config_pad[1];CARD32 pad1;};
struct $557A30854A566BD7F7B6D0FD7BDE46E8 {int type;unsigned __int64 serial;int send_event;Display *display;Window event;Window root;Window subwindow;Time time;int x;int y;int x_root;int y_root;unsigned int state;Tk_Uid name;int same_screen;};
struct $557B668BFC9AD2B47E0C3158C53F3D82 {XieConstant white_point;};
struct $557B855E86A279D2F17D2D74EDC487F1 {pexEnumTypeIndex approxMethod;CARD16 unused;PEXFLOAT tolerance;};
struct $55C4BAE65683A06129AA1262EA0CD4D4 {__int64 flags;int input;int initial_state;Pixmap icon_pixmap;Window icon_window;int icon_x;int icon_y;Pixmap icon_mask;XID window_group;};
struct $55E5FD3CD940068B4EF67AAE284651A9 {CARD16 elemType;CARD16 elemLength;xieTypPhototag src;xieTypExportNotify notify;CARD8 pad;};
enum $5619CCF50B7A6021E29EA9A230F1DFA1 {XmVARIABLE = 0x0,XmCONSTANT = 0x1,XmRESIZE_IF_POSSIBLE = 0x2,};
struct $56236F995320E9550D01648098F1E75E {CARD8 reqType;CARD8 mode;CARD16 length;CARD32 window;CARD32 property;CARD32 type;CARD8 format;BYTE pad[3];CARD32 nUnits;};
struct $565D6F59CBF69882217F7D4D7763F843 {__int64 xrm_name;__int64 xrm_class;__int64 xrm_type;Cardinal xrm_size;int xrm_offset;__int64 xrm_default_type;XtPointer xrm_default_addr;};
struct $56876A3CF1ED32735E0999A0D66A4738 {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD16 nColormaps;CARD16 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct $5699101927A414A19412931A739DFF3E {msg_header_t Head;msg_type_t RetCodeType;kern_return_t RetCode;};
struct $56A12B5EAAC94119434B83113CED938E {PEXCoord point;PEXColorHLS hls;PEXVector normal;};
struct $56F59331F03F8FDAB1249A71F6343C1C {CARD16 elemType;CARD16 elemLength;xieTypPhototag src;CARD16 pad;};
struct $56F965C4CB1B37CA1C9344E914749FD8 {CARD8 reqType;CARD8 direction;CARD16 length;CARD32 window;};
union $57072F0E80F3EFB6D2CCD723BAAFA0BA {PEXPSCIsoparametricCurves iso_curves;PEXPSCLevelCurves level_curves;PEXPSCImpDepData imp_dep;};
struct $574CAC262D45A25569DDBEEFAB473CD5 {Dimension margin_width;Dimension margin_height;XtCallbackList resize_callback;XtCallbackList expose_callback;XtCallbackList input_callback;unsigned __int8 resize_policy;};
struct $5763F2EC7349805D26B2ED34581CC2B6 {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD32 grabWindow;CARD8 grabbed_device;CARD8 modifier_device;CARD16 event_count;CARD16 modifiers;BYTE this_device_mode;BYTE other_devices_mode;CARD8 button;BOOL ownerEvents;BYTE pad1;BYTE pad2;};
struct $57642C20A930BC40CC56BFA51EFC45F8 {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD16 nFonts;CARD16 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct $576F8F1D853142FEE79A3EA73FDE4304 {XieOrientation fill_order;XieOrientation pixel_order;unsigned int pixel_stride;unsigned int left_pad;unsigned int scanline_pad;};
struct $57A765EA942AE9D5162F8EADA05AB765 {CARD8 type;CARD8 state;CARD16 sequenceNum;CARD32 length;CARD16 expectedCount;CARD16 availableCount;CARD8 pad[20];};
struct $57E6A23A76D16D83EF023BCC9C7B7628 {CARD8 reqType;CARD8 pad;CARD16 length;CARD32 window;CARD16 mask;CARD16 pad2;};
struct $58058F4C4926147A1BF935BBE1E04307 {Time time;__int16 x;__int16 y;};
enum $58172E3AE644E0EF92BC4EE75D925FE0 {TCNTL_FLOW_TABLE_TX = 0x0,TCNTL_FLOW_TABLE_RX = 0x1,TCNTL_FLOW_TABLE_LAST = 0x2,};
struct $5839A676696C7FEF053705892893D362 {CARD8 reqType;CARD8 opcode;CARD16 length;pexPhigsWks wks;CARD32 drawable;pexLookupTable markerBundle;pexLookupTable textBundle;pexLookupTable lineBundle;pexLookupTable interiorBundle;pexLookupTable edgeBundle;pexLookupTable colorTable;pexLookupTable depthCueTable;pexLookupTable lightTable;pexLookupTable colorApproxTable;pexLookupTable patternTable;pexLookupTable textFontTable;pexNameSet highlightIncl;pexNameSet highlightExcl;pexNameSet invisIncl;pexNameSet invisExcl;CARD16 bufferMode;CARD16 pad;};
struct $5844B3F658E992D348A8DA77109E2376 {CARD16 elemType;CARD16 elemLength;xieTypPhototag src1;xieTypPhototag src2;xieTypPhototag src3;CARD16 pad;};
struct $586CBC0EC33709906F5B6EA510EDE79F {int type;unsigned __int64 serial;int send_event;Display *display;Drawable drawable;int x;int y;int width;int height;int count;int major_code;int minor_code;};
union $587A922E888105E596C23B848004C618 {_LC_coltbl_v1_t ct_v1;_LC_coltbl_v2_t ct_v2;};
struct $58964FFE81FF7A5F550F9B44561E3FD1 {CARD8 reqType;CARD8 opcode;CARD16 length;xieTypPhotoflo floID;CARD16 numElements;CARD16 pad;};
struct $58C3F68DE6E766EC315A68C29D87018F {CARD8 reqType;BYTE nbytes;CARD16 length;};
struct $58FAD93ADC8A41E6E41FB2BF3A4FCE08 {CARD8 reqType;CARD8 opcode;CARD16 length;CARD32 nameSpace;CARD32 floID;};
struct $59351FDCD0841299E6F657798DC5AE28 {xieTypFloat inputLow0;xieTypFloat inputLow1;xieTypFloat inputLow2;xieTypFloat inputHigh0;xieTypFloat inputHigh1;xieTypFloat inputHigh2;CARD32 outputLow0;CARD32 outputLow1;CARD32 outputLow2;CARD32 outputHigh0;CARD32 outputHigh1;CARD32 outputHigh2;};
struct $596A7D13087A077E44146BEC2FAB15D1 {int dummy;};
struct $5991DEED6233F978BFE8C5C0EA8D4E55 {char x[8];};
struct $5A307DF360730881CAAA92A530376925 {CARD16 oc_opcode;CARD16 oc_length;pexEnumTypeIndex interiorStyle;CARD16 pad;};
struct $5A4A2C5171B7551FC7DFD26565D5B467 {CARD16 definableEntries;CARD16 numPredefined;CARD16 predefinedMin;CARD16 predefinedMax;};
struct $5A5A8022479C7FA798EEBCC50DCBBBAE {int type;unsigned __int64 serial;int send_event;Display *display;Window window;XID deviceid;Window root;Window subwindow;Time time;int x;int y;int x_root;int y_root;unsigned int state;char is_hint;int same_screen;unsigned int device_state;unsigned __int8 axes_count;unsigned __int8 first_axis;int axis_data[6];};
struct $5A70ABBFC870346A31B5EA378AAD44D0 {lock_data_t bucket_lock;ir_entry_t *ir_slot;bucket_stats_t stats;};
enum $5A773820A0D67B4336D2749C8D45D255 {XrmBindTightly = 0x0,XrmBindLoosely = 0x1,};
struct $5AAB2D7C83120C7EBD5FA0920634E90C {Boolean (*layout)();};
struct $5ABE36EBD1D953BDF555AC83E9B81362 {CARD8 reqType;CARD8 opcode;CARD16 length;pexEnumTypeIndex fpFormat;CARD16 unused;CARD32 drawableExample;pexTableType tableType;pexTableIndex start;CARD16 count;CARD16 pad;};
struct $5AD81BB1BC598F149BFF9BA2F89E92B1 {ulong dl_primitive;};
struct $5AE2068BF65A8B923C3A883B0FDD40FC {CARD16 oc_opcode;CARD16 oc_length;PEXFLOAT ambient;PEXFLOAT diffuse;PEXFLOAT specular;PEXFLOAT specularConc;PEXFLOAT transmission;pexColorType specular_colorType;CARD16 unused;};
struct $5B0B69E4533447D310F7EA13EBFB5AE7 {__int64 dl_min;__int64 dl_max;};
struct $5B5ABE49D87092922D5AFA5A6EC6FBAE {INT16 characterSet;CARD8 characterSetWidth;CARD8 encodingState;CARD16 unused;CARD16 numChars;};
struct $5B942A0C1E0725CBDF5A67D0E6C433D7 {unsigned int len;rapi_format_t form;union $5B942A0C1E0725CBDF5A67D0E6C433D7::$ED06450A711ABC8821931C32F86569FE filt_u;};
union $5B942A0C1E0725CBDF5A67D0E6C433D7::$ED06450A711ABC8821931C32F86569FE {rapi_filter_base_t base;rapi_filter_gpi_t gpi;rapi_filter_base6_t base6;rapi_filter_gpi6_t gpi6;};
struct $5BB888AFAE3DA1AF86E88EEDAEBE9855 {char *protocol_name;unsigned __int16 protocol_data_length;char *protocol_data;char *network_id;char *auth_name;unsigned __int16 auth_data_length;char *auth_data;};
enum $5BC141063E07A2854A710E771DE9E012 {on = 0x0,off = 0x1,};
struct $5BCE8D43E3309B3E87EE9BF368687B2D {Pixel fgpixel;Pixel hipixel;GC fgGC;GC hiGC;int update;int scale;int min_scale;int interval;XPoint *points;double max_value;double valuedata[2048];XtIntervalId interval_id;XtCallbackList get_value;int jump_val;};
struct $5C0DD3C4E70CCCC9965B24A6BE5ED8FB {CARD8 depth;CARD8 bitsPerPixel;CARD8 scanLinePad;CARD8 pad1;CARD32 pad2;};
struct $5C2B60FA26E73A1BF39A96E97412C65C {CARD8 reqType;BOOL contiguous;CARD16 length;CARD32 cmap;CARD16 colors;CARD16 planes;};
struct $5C351856992B7BF8131AF26B859DEFDF {char *scn_praw;char *rlc_ptr;char *cur_rlc_ptr;int rlc_no;int cur_rlc_no;unsigned __int64 last_base;struct full_rlc rlc_entry;};
struct $5C41C718BCBFD6CC2A68DF59D547D717 {CARD8 majorOpcode;CARD8 minorOpcode;CARD8 versionCount;CARD8 authCount;CARD32 length;CARD8 mustAuthenticate;CARD8 unused[7];};
struct $5C63C3EAD6EA7346B4E1C98717DA778E {uint8_t xaspec_flags;uint16_t xaspec_hopcnt;float32_t xaspec_path_bw;uint32_t xaspec_min_latency;uint32_t xaspec_composed_MTU;uint8_t xClaspec_flags;uint8_t xClaspec_override;uint16_t xClaspec_hopcnt;float32_t xClaspec_path_bw;uint32_t xClaspec_min_latency;uint32_t xClaspec_composed_MTU;uint8_t xGaspec_flags;uint32_t xGaspec_Ctot;uint32_t xGaspec_Dtot;uint32_t xGaspec_Csum;uint32_t xGaspec_Dsum;uint8_t xGaspec_override;uint16_t xGaspec_hopcnt;float32_t xGaspec_path_bw;uint32_t xGaspec_min_latency;uint32_t xGaspec_composed_MTU;};
struct $5C77EF0AC279F82FD3878286F57E4FF3 {struct sockaddr_in6 sender;};
struct $5C7A236BA0562DB05D77CA85FA8CD202 {BYTE type;CARD8 pad0;CARD16 sequenceNumber;CARD32 length;CARD32 replies_hint;CARD32 num_chars;CARD32 nbytes;};
enum $5CCAAB17D7B51A2C8AD8B4D8359CAFAA {XmDRAG_UNDER_NONE = 0x0,XmDRAG_UNDER_PIXMAP = 0x1,XmDRAG_UNDER_SHADOW_IN = 0x2,XmDRAG_UNDER_SHADOW_OUT = 0x3,XmDRAG_UNDER_HIGHLIGHT = 0x4,};
struct $5CD0DDA75FC8A64FD62E45433429A157 {CARD8 reqType;CARD8 XTestReqType;CARD16 length;};
struct $5D25D8BAB0FBE84273D7F26A74EBE8C0 {XawTextPosition top;int lines;XawTextLineTableEntry *info;};
struct $5D605798B949FE2847BA0CD5F658BE18 {CARD8 class;CARD8 id;CARD16 length;CARD16 max_symbols;CARD16 num_syms_supported;};
struct $5D8B4C88FE874254192A5C2673EF8027 {CARD8 error;CARD8 code;CARD16 sequenceNum;CARD32 resourceID;CARD16 minorOpcode;CARD8 majorOpcode;CARD8 pad[21];};
struct $5DA36550A295051746AB00BE33CC6E26 {PEXCoord position;float distance;unsigned __int16 ceiling;int model_clip_flag;PEXStructurePath start_path;PEXListOfNameSetPair normal;PEXListOfNameSetPair inverted;};
struct $5DBACEAB92966C603C98F59DF949BD43 {PEXFLOAT x;PEXFLOAT y;PEXFLOAT z;};
struct $5DD49376C74765CB7E96286DDB46181E {String type;Widget widget;XtGeometryMask changeMask;XWindowChanges changes;};
struct $5E04D711070F28523D4888D880E8635D {CARD8 reqType;CARD8 opcode;CARD16 length;xieTypROI roi;};
struct $5E29C5FF94304EAD83140C47151323A4 {CARD8 reqType;BYTE ordering;CARD16 length;CARD32 gc;INT16 xOrigin;INT16 yOrigin;};
struct $5E771194B47AF17C9267085CABF953C3 {CARD32 last_time;};
struct $5E8F645B7662834A694E868B27EBBB24 {BYTE type;CARD8 nExtensions;CARD16 sequenceNumber;CARD32 length;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct $5ECB12B79CABF575ACE1DCD82DC596AC {Atom name;CARD32 value;};
struct $5F1426FF167D9E06CE7F137AEA610D0C {CARD8 repType;CARD8 RepType;CARD16 sequenceNumber;CARD32 length;CARD8 success;CARD8 pad0;CARD16 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct $5F1D1C367F851FDE7EA3DDE22527B9A9 {int type;unsigned __int64 serial;int send_event;Display *display;Window event;Window window;int place;};
struct $5F6538F229DF2A668AF1107A23D3D1BB {CARD8 reqType;CARD8 opcode;CARD16 length;CARD32 drawable;};
struct $5FA74F1E1B3BE3F65FDF204A59A0D981 {PEXFLOAT ambient;PEXFLOAT diffuse;PEXFLOAT specular;PEXFLOAT specularConc;PEXFLOAT transmission;pexColorType specular_colorType;CARD16 unused;};
struct $6008D8CFFC87EA385696829714C44A6E {Boolean refiguremode;Boolean separator_on;Dimension margin_width;Dimension margin_height;Dimension spacing;Dimension sash_width;Dimension sash_height;Dimension sash_shadow_thickness;Position sash_indent;int starty;__int16 increment_count;__int16 pane_count;__int16 num_slots;__int16 num_managed_children;Boolean recursively_called;Boolean resize_at_realize;XmPanedWindowConstraintPtr top_pane;XmPanedWindowConstraintPtr bottom_pane;GC flipgc;WidgetList managed_children;};
struct $600CE1F1415CC4FBB5A956C0A4B10C91 {CARD16 elemType;CARD16 elemLength;xieTypPhototag src;CARD16 pad;INT32 domainOffsetX;INT32 domainOffsetY;xieTypPhototag domainPhototag;CARD8 bandMask;CARD8 kernelSize;xieTypConvolveTechnique convolve;CARD16 lenParams;};
struct $603DBFA11DE2EC77704AC2D2BE78752D {CARD16 elemType;CARD16 elemLength;xieTypPhototag src1;xieTypPhototag src2;xieTypPhototag alpha;CARD16 pad1;INT32 domainOffsetX;INT32 domainOffsetY;xieTypPhototag domainPhototag;CARD8 bandMask;CARD8 pad2;xieTypFloat constant0;xieTypFloat constant1;xieTypFloat constant2;xieTypFloat alphaConst;};
enum $6044DFAE8AB1695FEF8277F39C5596FC {I18NNOUN = 0x0,I18NVERB = 0x1,I18NADJECTIVE = 0x2,I18NADVERB = 0x3,I18NLABEL = 0x10,I18NBUTTON = 0x20,I18NMENU = 0x30,I18NLIST = 0x40,};
struct $608B1754CFD502A11A23B4E0486886E2 {PEXCoord point;PEXColorRGB rgb;unsigned int edge;};
struct $6091004A02C5B6DFDF6C8E41411B68A2 {int service_type;int unused;TB_Tsp_parms_t tb;u_long bitrate;u_long policed_packets;u_long policed_bytes;u_long dropped_packets;u_long dropped_bytes;u_long good_packets;u_long good_bytes;union tcntl_sockaddr dst;};
struct $60B2006344CEB6187E4861DDCB0EB328 {PEXCoord point;PEXColorCIE cie;PEXVector normal;unsigned int edge;};
struct $60FD28E41E68D30D206D9EC072DAC7C8 {CARD8 reqType;CARD8 revertTo;CARD16 length;CARD32 focus;CARD32 time;};
struct $6152C517BB9EBA8136E2E2CC34C2F373 {unsigned __int64 count;PEXElementRef *elements;};
struct $616DFE8EE921B679729534094133FEFF {BYTE type;BOOL sameScreen;CARD16 sequenceNumber;CARD32 length;CARD32 root;CARD32 child;INT16 rootX;INT16 rootY;INT16 winX;INT16 winY;CARD16 mask;CARD16 pad1;CARD32 pad;};
struct $6175075C8C71D0DDF9D83C934C4190B3 {unsigned __int64 word[2];};
struct $6180D9D3CA56B1110646E5C5D8270DC5 {String rep_type_name;String *value_names;unsigned __int8 *values;unsigned __int8 num_values;Boolean reverse_installed;XmRepTypeId rep_type_id;};
struct $61ABC0BA638790D6FE8B525E20E3EE79 {CARD8 reqType;CARD8 opcode;CARD16 length;xieTypPhotoflo floID;xieTypPhototag start;CARD16 numElements;};
struct $61D94195C5377432757C9CB67F09E051 {PEXColorHSV hsv;PEXVector normal;};
struct $621D16500987A711CC39A0AD4484DBF8 {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD16 timeout;CARD16 interval;BOOL preferBlanking;BOOL allowExposures;CARD16 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct $62310D9A7DE8EE6E6A442F084635BBB3 {aclenthead_t acl_common;acl_id_type acl_id;};
struct $624041EF38A3D722ECC431A5F82DF930 {BYTE type;CARD8 auth_index;CARD16 sequenceNumber;CARD32 length;CARD16 status;CARD16 pad;};
struct $625B72EC204AD184FA367A67F4C8645C {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD32 window;};
struct $625DD72E42D2E4120693244DFAAD3348 {CARD8 reqType;CARD8 dpmsReqType;CARD16 length;};
struct $62A7E637BF46904E5D1712DD40ACBF8F {id_t pc_cid;__int64 pc_clparms[8];};
struct $62C51647002A165043A9AFBD102E20FC {CARD16 oc_opcode;CARD16 oc_length;pexEnumTypeIndex modelClipOperator;CARD16 numHalfSpaces;};
union $62C62690197EE8635B2E0F18FBF9AEEA {PEXColorIndexed indexed;PEXColorRGB rgb;PEXColorHSV hsv;PEXColorHLS hls;PEXColorCIE cie;PEXColorRGB8 rgb8;PEXColorRGB16 rgb16;};
enum $62D23D4C9FF5CF3197FBB82C4CE39A6E {XmMULTICLICK_DISCARD = 0x0,XmMULTICLICK_KEEP = 0x1,};
struct $62EBEB3D9AC22832125CBC67D0451230 {PEXCoord point;PEXColorHLS hls;unsigned int edge;};
struct $6313E54CC161B7E5C4F7C30B4DF21654 {CARD8 low;CARD8 high;};
union $631CC30EFEC4B33894376812689B691E {caddr_t o_file;pid_t o_pid;int o_semid;int o_shmid;int o_msgid;int o_fdes;};
struct $632FCC76A12788D9E06A5D44275BFCFA {int reason;XEvent *event;Widget widget;char *data;char *callbackstruct;};
struct $636E06EF14FC653C9FA755BCE21D4A3F {char *chars;int nchars;int delta;Font font;};
struct $63AF34F92436E0E20A119355607DCC44 {xieTypOrientation fillOrder;xieTypOrientation pixelOrder;CARD8 pixelStride;CARD8 leftPad;CARD8 scanlinePad;CARD8 pad[3];};
enum $6433742F7159E2D9C73691EBE15B918D {XmALIGNMENT_BEGINNING = 0x0,XmALIGNMENT_CENTER = 0x1,XmALIGNMENT_END = 0x2,};
struct $64419251F3172C7227A52AC30EAD3C9D {int max_keypermod;KeyCode *modifiermap;};
struct $6443E8FBF4986486147FC608008F36FD {BYTE type;CARD8 what;CARD16 sequenceNumber;CARD32 length;CARD16 editMode;CARD16 unused;CARD32 elementPtr;CARD32 numElements;CARD32 lengthStructure;CARD16 hasRefs;BYTE pad[6];};
struct $647FE789D073DDA1115A25D9160A600C {_LC_weight_t ss_act;const char *ss_src;const char *ss_tgt;};
struct $648D5B97A5A1D2D2729A4C51B6643734 {XChar2b *chars;int nchars;int delta;Font font;};
struct $65881570D1BE40B63EE4A0C2B392A1BC {char *key;int type;char *src;char *dst;char *help;};
struct $65A7BC70F11250CC66A1AAC499DD4DF0 {char *geometry;XtCreatePopupChildProc create_popup_child_proc;XtGrabKind grab_kind;Boolean spring_loaded;Boolean popped_up;Boolean allow_shell_resize;Boolean client_specified;Boolean save_under;Boolean override_redirect;XtCallbackList popup_callback;XtCallbackList popdown_callback;Visual *visual;};
struct $65B902F391CFF156201AD47DA98B3D7B {BOOL shapeFactor;CARD8 pad[3];xieTypFloat constant;};
struct $665F1ADE1952A58E13B5D78D0B8A3255 {VisualID visual;int depth;int perflevel;};
struct $666210E100F3CB5D4A75782C69E711A8 {CARD8 header;CARD8 pad1;CARD16 jumpx;CARD16 jumpy;CARD16 delay_time;};
struct $66669466698BDB410095AFB1AF18F4BC {int type;unsigned __int64 serial;int send_event;Display *display;Window window;int width;int height;};
struct $667A80580C2B27C0BD2A5ACA896720B8 {XFontStruct *font;Boolean echo;Boolean display_nonprinting;GC normgc;GC invgc;GC xorgc;Pixmap insertCursorOn;XawTextInsertState laststate;__int16 cursor_x;__int16 cursor_y;};
struct $66CD60CBEEE2B24DB10775537F0935AB {Pixel foreground;Pixmap stipple;Dimension line_width;GC gc;};
struct $66DA73451B2C91DDB1D8B91FCC8B26BF {xieTypOrientation encodedOrder;BOOL radiometric;CARD16 pad;};
struct $673C2418D27F51C92BEB50600278BE8D {float ambient;float diffuse;float specular;float specular_conc;float transmission;PEXColorSpecifier specular_color;};
struct $676D60C33FEF0A0B0A4C99269E1D83CF {uid_t cuid;gid_t cgid;};
struct $67E052DBE3D4216490A6D8B2745BB149 {CARD8 majorOpcode;CARD8 minorOpcode;CARD8 data[2];CARD32 length;};
struct $67EBA5382CDD7137EE0248176DBBF5F3 {CARD8 reqType;CARD8 opcode;CARD16 length;pexEnumTypeIndex fpFormat;CARD16 valueType;pexLookupTable lut;pexTableIndex strchr;CARD16 pad;};
enum $67EED6FD6AC99B85FCDEED243BE785D8 {TCNTL_ADSPEC_NON_RSVP_HOP = 0x1,};
struct $6891B45CD5C184FEB200E38CDC4FE1A6 {XID control;int length;int first_valuator;int num_valuators;int *resolutions;};
struct $68A090D2D4C46EBB7CD3F7D9EA1243B2 {PEXStructure sid;unsigned __int64 offset;unsigned __int64 pick_id;};
struct $68BCAAD9BABFC19D1B420336AA17E982 {ulong dl_primitive;ulong dl_error_primitive;ulong dl_errno;ulong dl_unix_errno;};
struct $68BE656924C43E465EAB0504C26903EC {BYTE type;BYTE bpad0;CARD16 sequenceNumber;CARD32 length;CARD16 majorVersion;CARD16 minorVersion;CARD16 uid;CARD16 gid;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;};
struct $68F3F62AFAA5AAF6F6A834E7D09A0F7B {unsigned __int8 view_rep;unsigned __int8 marker_bundle;unsigned __int8 text_bundle;unsigned __int8 line_bundle;unsigned __int8 interior_bundle;unsigned __int8 edge_bundle;unsigned __int8 color_table;unsigned __int8 pattern_table;unsigned __int8 wks_transform;unsigned __int8 highlight_filter;unsigned __int8 invisibility_filter;unsigned __int8 hlhsr_mode;unsigned __int8 structure_modify;unsigned __int8 post_structure;unsigned __int8 unpost_structure;unsigned __int8 delete_structure;unsigned __int8 reference_modify;unsigned __int8 buffer_modify;unsigned __int8 light_table;unsigned __int8 depth_cue_table;unsigned __int8 color_approx_table;};
struct $691123D744001B8BE68B84780CEE447C {unsigned __int8 byte1;unsigned __int8 byte2;};
enum $692DA98D37C8EDEB497D2EE5804C196B {apOptionNoArg = 0x0,apOptionIsArg = 0x1,apOptionStickyArg = 0x2,apOptionSepArg = 0x3,apOptionSkipArg = 0x4,apOptionSkipLine = 0x5,apOptionSkipNArgs = 0x6,};
struct $694E7AF0BC9EE95CDB6E54249E923D7E {CARD8 majorOpcode;CARD8 minorOpcode;CARD8 byteOrder;CARD8 unused;CARD32 length;};
struct $6971C49ED543898CFDE2AB3CD1189B70 {CARD16 elemType;CARD16 elemLength;xieTypPhototag src;INT16 dstX;INT16 dstY;CARD16 pad;CARD32 drawable;CARD32 gc;};
struct $697B32D3B5D3093ACC810617F93D908A {unsigned __int8 first;unsigned __int8 last;};
struct $6999C5F45A7509ACAEE4435BC7D6BE11 {CARD8 majorOpcode;CARD8 minorOpcode;CARD16 authLen;CARD32 length;};
enum $69A85461EA42125C0C0C9DE2AB77B296 {MLD_all = 0x0,MLD_pre = 0x1,MLD_post = 0x2,};
struct $69AF41EBDA657EE1FC7AC417361C4229 {int type;unsigned __int64 serial;int send_event;Display *display;Window window;int request;int first_keycode;int count;};
enum $69B919E8893968F0F88511FED2EFE8F8 {XmATTACH_NORTH_WEST = 0x0,XmATTACH_NORTH = 0x1,XmATTACH_NORTH_EAST = 0x2,XmATTACH_EAST = 0x3,XmATTACH_SOUTH_EAST = 0x4,XmATTACH_SOUTH = 0x5,XmATTACH_SOUTH_WEST = 0x6,XmATTACH_WEST = 0x7,XmATTACH_CENTER = 0x8,XmATTACH_HOT = 0x9,};
struct $69EBDB3A774B1AFC7F282884D9B780FC {BYTE type;BYTE request;CARD16 sequenceNumber;CARD32 length;fsTimestamp timestamp;CARD8 major_opcode;CARD8 minor_opcode;CARD16 pad;CARD32 bad_length;};
struct $6A1E68C5A198D57F5F76A65BA6AE762A {unsigned __int64 pixel;unsigned __int16 red;unsigned __int16 green;unsigned __int16 blue;char flags;char pad;};
enum $6A2461C961810504B9341ECA48C51707 {TCNTL_CONF_OP_GET = 0x1,TCNTL_CONF_OP_GETNEXT = 0x2,TCNTL_CONF_OP_SET = 0x3,};
struct $6ABAD3232C9CF4340065F865AFA64EEA {pexEnumTypeIndex interiorStyle;INT16 interiorStyleIndex;pexEnumTypeIndex reflectionModel;pexEnumTypeIndex surfaceInterp;pexEnumTypeIndex bfInteriorStyle;INT16 bfInteriorStyleIndex;pexEnumTypeIndex bfReflectionModel;pexEnumTypeIndex bfSurfaceInterp;pexEnumTypeIndex surfaceApprox_method;CARD16 unused;PEXFLOAT surfaceApproxuTolerance;PEXFLOAT surfaceApproxvTolerance;};
struct $6AD1C0C303B7C98984BF80315D836E89 {CARD8 class;CARD8 id;CARD16 length;CARD8 pad1;CARD8 pad2;CARD16 num_keysyms;};
struct $6ADBCD68715E63A04CE80712B11C9E38 {BYTE type;CARD8 what;CARD16 sequenceNumber;CARD32 length;CARD32 numLists;BYTE pad[20];};
struct $6AE5D21AAEA04E1B024F0DA11C966966 {CARD32 levels0;CARD32 levels1;CARD32 levels2;xieTypFloat lumaRed;xieTypFloat lumaGreen;xieTypFloat lumaBlue;xieTypFloat bias0;xieTypFloat bias1;xieTypFloat bias2;};
struct $6B1106A64659663BF4BA9950E3F10E4F {int charset_count;char **charset_list;};
enum $6B7EBACD75708F75DFC04DB2E733742F {XmTEAR_OFF_ENABLED = 0x0,XmTEAR_OFF_DISABLED = 0x1,};
struct $6BA9BAD34CD581FCA2A7610248080448 {XRectangle max_ink_extent;XRectangle max_logical_extent;};
struct $6BAE8AC6C2E6EF04B701C3F9CD3D4D29 {xieTypFloat matchLimit;xieTypFloat grayLimit;};
struct $6BBCC49B474232F6903A86C4EDBD1760 {Window window;int state;int kind;XID til_or_since;XID si_idle;XID eventMask;};
struct $6BC94B9DA2A62B07B82C2A2991E2CFBB {XtPointer next_extension;XrmQuark record_type;__int64 version;Cardinal record_size;XtArgsProc get_values_hook;};
struct $6BFA51CDE87C18887CF0E894D99FEF51 {ulong dl_primitive;ulong dl_addr_length;ulong dl_addr_offset;};
struct $6C0DBE15692AB0301FA41806B271F811 {CARD8 majorOpcode;CARD8 minorOpcode;CARD8 cancelShutdown;CARD8 unused;CARD32 length;};
struct $6C1E1BB9653D0488EEBD4494DC269AA4 {ulong dl_qos_type;__int64 dl_trans_delay;__int64 dl_priority;__int64 dl_protection;__int64 dl_residual_error;};
struct $6C531080E0330861B126A2833D727845 {CARD8 reqType;BYTE pad;CARD16 length;CARD32 cid;CARD32 source;CARD32 mask;CARD16 sourceChar;CARD16 maskChar;CARD16 foreRed;CARD16 foreGreen;CARD16 foreBlue;CARD16 backRed;CARD16 backGreen;CARD16 backBlue;};
struct $6C8DA88AE0F795AA91A7651F5464995D {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD8 deviceid;CARD8 firstKeyCode;CARD8 count;BYTE pad1;};
struct $6CA79B54BE0B8C15E4B81B027FF362F3 {CARD8 reqType;CARD8 opcode;CARD16 length;CARD16 majorVersion;CARD16 minorVersion;};
struct $6CB937557CD15AF182DEEE7E833AC7C1 {_LC_object_t hdr;char *(*nl_langinfo)(__nl_item, struct _LC_charmap_t *);int (*mbtowc)(wchar_t *, const char *, size_t, struct _LC_charmap_t *);size_t (*mbstowcs)(wchar_t *, const char *, size_t, struct _LC_charmap_t *);int (*wctomb)(char *, wchar_t, struct _LC_charmap_t *);size_t (*wcstombs)(char *, const wchar_t *, size_t, struct _LC_charmap_t *);int (*mblen)(const char *, size_t, struct _LC_charmap_t *);int (*wcswidth)(const wchar_t *, size_t, struct _LC_charmap_t *);int (*wcwidth)(const wchar_t, struct _LC_charmap_t *);int (*__mbtopc)(wchar_t *, char *, size_t, int *, struct _LC_charmap_t *);int (*__mbstopcs)(wchar_t *, size_t, char *, size_t, int, char **, int *, struct _LC_charmap_t *);int (*__pctomb)(char *, wchar_t *, size_t, int *, struct _LC_charmap_t *);int (*__pcstombs)(char *, size_t, wchar_t *, size_t, char **, int *, struct _LC_charmap_t *);struct _LC_charmap_t *(*init)(struct _LC_locale_t *);void *data;};
struct $6CDBBC56673808DBC2DA2091B1C251E0 {XcmsFloat X;XcmsFloat Y;XcmsFloat Z;};
struct $6D34DC3E0698CAC04ED6FF84D24B158F {__int16 unshifted;__int16 shifted;};
struct $6D6F9D012998C18FB9B59DB7A6C42C6D {int type;unsigned __int64 serial;int send_event;Display *display;unsigned __int64 name_space;Time time;unsigned __int64 flo_id;XiePhotofloOutcome outcome;};
struct $6DC10CFFA94DA978AABC1A085F692023 {Pixmap background_pixmap;unsigned __int64 background_pixel;Pixmap border_pixmap;unsigned __int64 border_pixel;int bit_gravity;int win_gravity;int backing_store;unsigned __int64 backing_planes;unsigned __int64 backing_pixel;int save_under;__int64 event_mask;__int64 do_not_propagate_mask;int override_redirect;Colormap colormap;Cursor cursor;};
struct $6DCB0A2FC14FCF53A68992826C593A71 {Cursor cursor;Pixmap insensitive_border;String cursor_name;Pixel pointer_fg;Pixel pointer_bg;Boolean international;};
struct $6E10C588F65FE1827DABA3A077EC5424 {uchar_t code;ushort_t ir_length;caddr_t ir;};
struct $6E58DE7E5977316D543695706C282257 {CARD8 reqType;CARD8 xvReqType;CARD16 length;CARD32 port;BOOL onoff;CARD8 pad1;CARD16 pad2;};
struct $6E603A4D6E053F4C38E194015FCDFC50 {Widget transient_for;};
struct $6EB75DCF57D6784EE27228E47E167564 {BYTE type;BYTE lbxType;INT8 deltaX;INT8 deltaY;CARD16 deltaTime;CARD16 deltaSequence;};
struct $6EBEF47CA2CEF34EFBF958C97554E99C {unsigned __int16 count;float *floats;};
struct $6ECE5F7C46F37A2EF909042FBC6F3E21 {CARD8 reqType;CARD8 recordReqType;CARD16 length;CARD32 context;};
struct $6EF26E53794972BE8CF37E7A46EF3D5C {int key_click_percent;int bell_percent;unsigned int bell_pitch;unsigned int bell_duration;unsigned __int64 led_mask;int global_auto_repeat;char auto_repeats[32];};
struct $6EFA6E9CEDB0A623992FF50962BB32AE {unsigned __int64 count;PEXPickElementRef *elements;};
struct $6F3B6EE1A86AB005D2DEBAB1CDF27F6A {ulong dl_primitive;ulong dl_ppa;};
struct $6F5CA88FA5D44A4BEDF321A100838BF3 {size_t re_nsub;void *re_comp;int re_cflags;size_t re_erroff;size_t re_len;wchar_t re_ucoll[2];uchar_t **re_lsub;uchar_t **re_esub;void *re_filler[8];uchar_t re_map[256];};
struct $6F769F3251074F30549E39033985F8DC {CARD16 elemType;CARD16 elemLength;xieTypPhototag src;CARD8 bandMask;CARD8 pad;CARD32 levels0;CARD32 levels1;CARD32 levels2;xieTypDitherTechnique dither;CARD16 lenParams;};
enum $6F9A534032C3FA39E6E0F9F540CB117B {XmNO_PACKING = 0x0,XmPACK_TIGHT = 0x1,XmPACK_COLUMN = 0x2,XmPACK_NONE = 0x3,};
struct $6FA9C15AF3974CA3A341A1191B3752B4 {int type;unsigned __int64 serial;int send_event;Display *display;Window window;int x;int y;int width;int height;int count;};
struct $6FB552EA524F38554FA8528F506D34FD {CARD8 reqType;BYTE pad;CARD16 length;CARD32 cid;CARD32 source;CARD32 mask;CARD16 foreRed;CARD16 foreGreen;CARD16 foreBlue;CARD16 backRed;CARD16 backGreen;CARD16 backBlue;CARD16 x;CARD16 y;};
struct $6FBDDC749A304B2851D845F180589FFE {CARD16 oc_opcode;CARD16 oc_length;CARD16 curveOrder;pexCoordType coordType;PEXFLOAT tmin;PEXFLOAT tmax;CARD32 numKnots;CARD32 numPoints;};
struct $70BF9668B37A862A4362A7E237230266 {pexElementPos position1;pexElementPos position2;};
struct $70CE1F4DEFC5497CE8C11192756BA8B3 {PEXCoord point;PEXColorRGB8 rgb8;PEXVector normal;};
struct $70E4CC7E54BA43D6E5622AB555079691 {CARD8 reqType;BYTE pad;CARD16 length;CARD32 cmap;CARD16 red;CARD16 green;CARD16 blue;CARD16 pad2;};
struct $714ECB015488F571062DF73447960E43 {CARD16 oc_opcode;CARD16 oc_length;PEXFLOAT refPt_x;PEXFLOAT refPt_y;PEXFLOAT refPt_z;PEXFLOAT vector1_x;PEXFLOAT vector1_y;PEXFLOAT vector1_z;PEXFLOAT vector2_x;PEXFLOAT vector2_y;PEXFLOAT vector2_z;};
struct $715278DC56732B37E2BDDF8431464358 {__int16 xmin;__int16 ymin;__int16 xmax;__int16 ymax;};
union $715C7995AE2D3887AAC9924B8BE4E345 {u_long u_;__int64 s_;};
struct $71952FA70F8A38CF7B3A6C590B8CECBF {XieConstant constant;};
struct $71FFB46601ED87C93BE808E8F4C7A378 {unsigned __int16 oc_type;union $71FFB46601ED87C93BE808E8F4C7A378::$D05FC820B70C6DD4085C13BA0A0FB353 data;};
union $71FFB46601ED87C93BE808E8F4C7A378::$D05FC820B70C6DD4085C13BA0A0FB353 {struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$9B4EDCEF630B8BE304CBC0EFFB312D92 AddToNameSet;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$CD7CAB1E524B79FEA634B2E53CEF566E ApplicationData;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$2BA772D1E0A7F78EDD0A8F8C9B02C070 CellArray;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$2723F661DF5C178A1122C59BF686E14A CellArray2D;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$0B0FE514379F70C0805538897B98D3E2 EncodedAnnoText;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$47101692C522502040C738CF4F411559 EncodedAnnoText2D;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$CE51DDD1EF277EE1E81BBF7435453E8D EncodedText;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$F09B918875B219F4FF9F459C40A35182 EncodedText2D;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$4BB0F9D66721BFA9BA08771D7D9A49C9 ExecuteStructure;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$4A81ABAA6690EA5709E641E252FF04FD ExtendedCellArray;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$1508DF3E1DE3705BDCA798C585B67F6E FillArea;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$A1A951BBAC7A258F8D3E5CAF44CA13DC FillArea2D;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$E46FF02D5E2EFC1AA963D5679DC55369 FillAreaSet;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$9A30DDBC7A812902BB630E66E4F494B2 FillAreaSet2D;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$579AE3389BA4D2CFC7E19AC97609B22E FillAreaSetWithData;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$6E786597BAC0EA09A7DB2775139266C7 FillAreaWithData;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$F052BBDC33769DFE7204C99C9F1C03B7 GDP;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$999DE591DB5521057EC5FD3EFB8ECDDE GDP2D;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$E0C4DA393A0950219C5F1F288D11C3BF GSE;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$46175D2478F989F8BB112B3C833C6934 Label;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$333A3A15141DDE89E0ED45D85955249D Markers;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$304D0CF02F21DEA5A6079CE187623BB0 Markers2D;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$7B8AF634BCA89047C35D50A9F69A7671 NURBCurve;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$2B8E5C098ACE646E11112CD3CE0BCAAD NURBSurface;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$333A3A15141DDE89E0ED45D85955249D Polyline;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$304D0CF02F21DEA5A6079CE187623BB0 Polyline2D;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$963E73514EC2CC394A1F00F1226439AA PolylineSetWithData;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$226200557F05E698789C202324F2C9E8 QuadrilateralMesh;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$9B4EDCEF630B8BE304CBC0EFFB312D92 RemoveFromNameSet;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$D8EF4F335967B6AFDF8B62D6AF4EC97A SetATextAlignment;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$9086F2EF88FD92765D387CC68E4B2FAC SetATextHeight;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$EE80A4EE4E89D4C8BD20C41B452C0266 SetATextPath;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$0E11D43C89F29A3873908CCAE31E9443 SetATextStyle;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$2081C489A8A523DF06D21B8685AE3FA3 SetATextUpVector;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$0E11D43C89F29A3873908CCAE31E9443 SetBFInteriorStyle;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$07CD0E19291CDD9D07F8B2E1B2F7F26A SetBFInteriorStyleIndex;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$65D65A0CC02CF28DF3594B7E3D077A3A SetBFReflectionAttributes;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$7AAF9EC2F322E71A76FD27F8DEB646FE SetBFReflectionModel;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$ED09EDC4CBF61A696C6DC7A61219022F SetBFSurfaceColor;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$5072C9968289CE30F56087028DDE74C3 SetBFSurfaceColorIndex;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$F55F5F1BBE43504FA60225D395271D24 SetBFSurfaceInterpMethod;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$647675DF0C666D8E1C0EA033762D37D9 SetCharExpansion;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$9086F2EF88FD92765D387CC68E4B2FAC SetCharHeight;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$07EBA61882DBE1BD552748650F3369B3 SetCharSpacing;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$2081C489A8A523DF06D21B8685AE3FA3 SetCharUpVector;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$5072C9968289CE30F56087028DDE74C3 SetColorApproxIndex;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$2C24CAE01802F2AC62CF6E363B0D34E7 SetCurveApprox;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$5072C9968289CE30F56087028DDE74C3 SetDepthCueIndex;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$5072C9968289CE30F56087028DDE74C3 SetEdgeBundleIndex;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$B96A613F1536C198D996C2E4441DCF71 SetFacetCullingMode;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$B4F62F9D1B398810864CEDBC17CBADE4 SetFacetDistinguishFlag;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$981A3AE94910FCCB9B7872B58D565283 SetGlobalTransform;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$5CCDE299F18D4FC0523710CC23FF0A21 SetGlobalTransform2D;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$840FBA41368AEF2B64881263F7A6574C SetHLHSRID;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$A0E42DD09A8A398654BA3B7BBF72F814 SetIndividualASF;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$5072C9968289CE30F56087028DDE74C3 SetInteriorBundleIndex;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$0E11D43C89F29A3873908CCAE31E9443 SetInteriorStyle;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$07CD0E19291CDD9D07F8B2E1B2F7F26A SetInteriorStyleIndex;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$8AE6CEDB91EFDC12D0ECA08E19BD1920 SetLightSourceState;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$5072C9968289CE30F56087028DDE74C3 SetLineBundleIndex;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$ED09EDC4CBF61A696C6DC7A61219022F SetLineColor;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$5072C9968289CE30F56087028DDE74C3 SetLineColorIndex;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$D92D218FCBA7D099D9D00CBA4297A9EB SetLineType;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$0E3878D6394C0832B6C7C61CDB3A0B68 SetLineWidth;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$160D7237BFCC7116163618E0243C68A5 SetLocalTransform;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$5BD1EB34476C845946834FCCCC5117B1 SetLocalTransform2D;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$5072C9968289CE30F56087028DDE74C3 SetMarkerBundleIndex;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$ED09EDC4CBF61A696C6DC7A61219022F SetMarkerColor;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$5072C9968289CE30F56087028DDE74C3 SetMarkerColorIndex;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$284E75FC49BDDCFCC5EEE97F317C161C SetMarkerScale;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$0211E4E0A7A361B697B4545D8BCDDFDB SetMarkerType;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$B4F62F9D1B398810864CEDBC17CBADE4 SetModelClipFlag;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$42659D25CB7352E0FB20CF99951D1476 SetModelClipVolume;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$F02FB4C016F3C9B1A38F0C69DFC1432E SetModelClipVolume2D;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$4B04C3F68F08475DACAE5D57C99EE0AC SetOfFillAreaSets;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$061FB20684348664DDFEBA1AA0B53223 SetParaSurfCharacteristics;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$9A36196354243FD6D68903F6CD00FA22 SetPatternAttributes;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$E41C7850E50367D77D929A2CB97C69D9 SetPatternAttributes2D;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$D4775485B13497D55C4F339E01923D43 SetPatternSize;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$B4EA3D09F4D82E6CBD1459ED300DCF74 SetPickID;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$F55F5F1BBE43504FA60225D395271D24 SetPolylineInterpMethod;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$65D65A0CC02CF28DF3594B7E3D077A3A SetReflectionAttributes;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$7AAF9EC2F322E71A76FD27F8DEB646FE SetReflectionModel;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$7AAF9EC2F322E71A76FD27F8DEB646FE SetRenderingColorModel;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$74218C7218826287EE94DF9EF6BE0F42 SetSurfaceApprox;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$ED09EDC4CBF61A696C6DC7A61219022F SetSurfaceColor;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$5072C9968289CE30F56087028DDE74C3 SetSurfaceColorIndex;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$ED09EDC4CBF61A696C6DC7A61219022F SetSurfaceEdgeColor;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$5072C9968289CE30F56087028DDE74C3 SetSurfaceEdgeColorIndex;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$B4F62F9D1B398810864CEDBC17CBADE4 SetSurfaceEdgeFlag;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$628EDDA3B6349AC1B79276EF33A93B25 SetSurfaceEdgeType;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$0E3878D6394C0832B6C7C61CDB3A0B68 SetSurfaceEdgeWidth;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$F55F5F1BBE43504FA60225D395271D24 SetSurfaceInterpMethod;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$D8EF4F335967B6AFDF8B62D6AF4EC97A SetTextAlignment;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$5072C9968289CE30F56087028DDE74C3 SetTextBundleIndex;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$ED09EDC4CBF61A696C6DC7A61219022F SetTextColor;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$5072C9968289CE30F56087028DDE74C3 SetTextColorIndex;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$5072C9968289CE30F56087028DDE74C3 SetTextFontIndex;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$EE80A4EE4E89D4C8BD20C41B452C0266 SetTextPath;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$36B4861D739E77E55E066B922A2265A6 SetTextPrecision;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$5072C9968289CE30F56087028DDE74C3 SetViewIndex;struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$B36FC4C29C141D7951F14F1EEFF89B3C TriangleStrip;};
struct $7215FCA21C9177221950E694BDF162F7 {XID class;int length;XID id;int percent;int pitch;int duration;};
struct $7223AFE63A8123EF6F49E197890FAA10 {CARD8 reqType;BOOL range;CARD16 length;CARD32 fid;CARD32 num_ranges;};
struct $7228480D3079CE2808B81A1C1362B902 {CARD32 levels0;CARD32 levels1;CARD32 levels2;xieTypFloat lumaRed;xieTypFloat lumaGreen;xieTypFloat lumaBlue;xieTypFloat scale;};
struct $724CF3B74FBFB640DA26FB108EE83E8D {attr_t _a;wchar_t _c;wchar_t _z[5];};
struct $7250734D77F79F0949305E641023FE62 {CARD8 reqType;BOOL propagate;CARD16 length;CARD32 destination;CARD32 eventMask;xEvent event;};
enum $72730EF3D3FAE5AA2AA0E430D56A4D43 {CMFC_APPEND = 0x0,CMFC_CHOOSE = 0x1,CMFC_DELETE = 0x2,CMFC_ERRMULT = 0x3,CMFC_ERROR = 0x4,};
struct $7286F01C0F25CC9697D9D7CFCD5C4B3B {BYTE type;CARD8 pad0;CARD16 sequenceNumber;CARD32 length;CARD16 standby;CARD16 suspend;CARD16 off;CARD16 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct $7299039E045E3F9B8439FDAE89E52E77 {CARD16 oc_opcode;CARD16 oc_length;pexComposition compType;CARD16 unused;pexMatrix matrix;};
struct $735C3716122317809AD8BB5A186A1FBE {XID class;int length;XID id;int num_keysyms;KeySym *syms_to_display;};
union $736CD47A376FE6BEB28EF999843A2D8B {struct $736CD47A376FE6BEB28EF999843A2D8B::$CE9B67A69E988A71D3BB4E92F459F79E inf_parts;struct $736CD47A376FE6BEB28EF999843A2D8B::$B9A8B404AE5244B8884AE02A7405473B nan_parts;double d;};
struct $736CD47A376FE6BEB28EF999843A2D8B::$B9A8B404AE5244B8884AE02A7405473B {unsigned int fraction_low;unsigned int sign;};
struct $736CD47A376FE6BEB28EF999843A2D8B::$CE9B67A69E988A71D3BB4E92F459F79E {unsigned int fraction_low;unsigned int sign;};
struct $73B1B1C6D59EDCEAE4160EDF73D1CA05 {Pixel foreground;Dimension internal_width;Dimension internal_height;Dimension column_space;Dimension row_space;int default_cols;Boolean force_cols;Boolean paste;Boolean vertical_cols;int longest;int nitems;XFontStruct *font;XFontSet fontset;String *list;XtCallbackList callback;int is_highlighted;int highlight;int col_width;int row_height;int nrows;int ncols;GC normgc;GC revgc;GC graygc;int freedoms;};
struct $73B2556C90F6484D7441C896F70C955A {ulong dl_primitive;ulong dl_stat_length;ulong dl_stat_offset;};
struct $73B4058B96DB787648F70BEB3765CE40 {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD32 pixel;CARD16 exactRed;CARD16 exactGreen;CARD16 exactBlue;CARD16 screenRed;CARD16 screenGreen;CARD16 screenBlue;CARD32 pad2;CARD32 pad3;};
struct $748E6396DB81A71CC67026C5868B0A61 {CARD8 repType;CARD8 RepType;CARD16 sequenceNumber;CARD32 length;CARD8 status;BYTE pad0;CARD16 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct $749257863A78ACF83BA10F9F553F4560 {BYTE type;BYTE deviceid;CARD16 sequenceNumber;CARD8 request;CARD8 firstKeyCode;CARD8 count;BYTE pad1;CARD32 time;CARD32 pad00;CARD32 pad01;CARD32 pad02;CARD32 pad03;CARD32 pad04;};
enum $74B1213069A442AA4F809B3DD5A5FADF {XmGEO_PROPORTIONAL = 0x0,XmGEO_AVERAGING = 0x1,XmGEO_WRAP = 0x2,};
struct $74C0290E199C117012DFA083CCBB8B51 {ulong dl_primitive;ulong dl_correlation;ulong dl_called_addr_length;ulong dl_called_addr_offset;ulong dl_calling_addr_length;ulong dl_calling_addr_offset;ulong dl_qos_length;ulong dl_qos_offset;ulong dl_growth;};
struct $74F473584FBEEE22607318AA08113DD7 {XtCallbackList callback;XtCallbackList value_changed_callback;int history_max_items;Boolean error;};
struct $7501B521F09A6EDD43C68106808E09A6 {int displayed_index;int update_action;int update_hint;int window_mode;int nbuffers;Multibuffer *buffers;};
struct $751A4B90941D2162C7D8D47FB414FF8C {ulong dl_primitive;ulong dl_originator;ulong dl_reason;};
struct $754E82352BACFD73AE933254C0FF8B10 {XEvent *event;String *params;Cardinal num_params;};
struct $758719D696A47A3B45663A4074A17653 {IS_serv_hdr_t CL_spec_serv_hdr;IS_parm_hdr_t CL_spec_parm_hdr;TB_Tsp_parms_t CL_spec_parms;};
struct $75A587EC71D839727FF00E499DB42A24 {CARD16 elemType;CARD16 elemLength;xieTypPhototag src;CARD16 pad;CARD32 levels0;CARD32 levels1;CARD32 levels2;xieTypConstrainTechnique constrain;CARD16 lenParams;};
struct $75B1FCDE70FC6D9B0320B22818DFF60E {unsigned int ra;unsigned int ancount;unsigned int arcount;};
enum $75C8E7CA27BE1E0F4E6BF64D1993A788 {TCL_INT = 0x0,TCL_DOUBLE = 0x1,TCL_EITHER = 0x2,};
struct $75E019FCB4A579099C3FEBED6B229425 {CARD8 class;CARD8 length;CARD8 num_valuators;CARD8 mode;};
struct $75F7E626134BF34BF20657FC27D19BCE {char *title;int wm_timeout;Boolean wait_for_wm;Boolean transient;Boolean urgency;Widget client_leader;String window_role;struct $75F7E626134BF34BF20657FC27D19BCE::_OldXSizeHints size_hints;XWMHints wm_hints;int base_width;int base_height;int win_gravity;Atom title_encoding;};
struct $75F7E626134BF34BF20657FC27D19BCE::_OldXSizeHints {__int64 flags;int x;int y;int width;int height;int min_width;int min_height;int max_width;int max_height;int width_inc;int height_inc;struct $::_OldXSizeHints::$CDF557A927ED2BFF93B09908D4EFCA76 min_aspect;struct $::_OldXSizeHints::$CDF557A927ED2BFF93B09908D4EFCA76 max_aspect;};
struct $7632AA8F19CB8AF724198E208337AAF8 {CARD8 type;BOOL populated;CARD16 sequenceNum;CARD32 length;xieTypDataClass dataClass;xieTypDataType dataType;xieTypDecodeTechnique decodeTechnique;CARD32 width0;CARD32 width1;CARD32 width2;CARD32 height0;CARD32 height1;CARD32 height2;CARD32 levels0;CARD32 levels1;CARD32 levels2;};
enum $768BDCC75D13E7259F2BAD34DCA3191B {DXmNONE = 0x0,DXmAS_NEEDED = 0x1,};
struct $7690689C8995BA18C259F15C2E17CAA0 {CARD16 oc_opcode;CARD16 oc_length;PEXFLOAT width;};
struct $76C432023C30A60D6F0CA03B71EF1A2A {CARD8 repType;CARD8 RepType;CARD16 sequenceNumber;CARD32 length;CARD32 focus;CARD32 time;CARD8 revertTo;BYTE pad1;BYTE pad2;BYTE pad3;CARD32 pad01;CARD32 pad02;CARD32 pad03;};
struct $76F84264A28D1A02352D769030AADCCD {CARD16 oc_opcode;CARD16 oc_length;pexMatrix matrix;};
struct $7768503639F77374B09C8CE2FF45E7E1 {Widget shell_widget;Widget enable_widget;};
struct $77B5DA89F8222E8D6D7C1ABF47542A30 {CARD8 reqType;BYTE pad;CARD16 length;CARD32 drawable;CARD32 gc;};
struct $77BBECB7BEBA0550DE1594CCD5BD4184 {ulong dl_qos_type;dl_through_t dl_rcv_throughput;dl_transdelay_t dl_rcv_trans_delay;dl_through_t dl_xmt_throughput;dl_transdelay_t dl_xmt_trans_delay;dl_priority_t dl_priority;dl_protect_t dl_protection;__int64 dl_residual_error;dl_resilience_t dl_resilience;};
struct $77BCF32EDCE867EAF5B70A654CA700DE {PEXFLOAT x;PEXFLOAT y;};
enum $77F4E97EC64EB764A006B2CB38EEE544 {Normal = 0x0,Selected = 0x1,};
struct $77F664D03ADE3D590F095E54D295E163 {XID class;int length;XID id;int accelNum;int accelDenom;int threshold;};
struct $7801A91C37AF2AAC45BD7DD78FEE34EA {BYTE type;BYTE result;CARD16 sequenceNumber;CARD32 length;CARD32 padl3;CARD32 padl4;CARD32 padl5;CARD32 padl6;CARD32 padl7;CARD32 padl8;};
struct $78587EBAF47C7D4EAE70335A8633B794 {acl_unix_perm_t unix_perms;acle_t acl_entries;};
struct $78618D9CB1AB8194EEFA681585FF29A6 {CARD16 oc_opcode;CARD16 oc_length;pexEnumTypeIndex surfaceInterp;CARD16 pad;};
struct $786884C59B8460C39A9F20EFE8931D61 {int type;unsigned __int64 serial;int send_event;Display *display;Window event;Window window;Window parent;int x;int y;int override_redirect;};
struct $789D9E0FE1A5A9BA2492EBFE8B3FBB59 {unsigned int index;};
struct $78B46019F679C5E70AAD7C2ED28277AC {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD32 mask;CARD8 deviceid;CARD8 feedbackid;BYTE pad1;BYTE pad2;};
struct $78BCCEBB7D351EDED281010DB00F670D {pexColorType colorType;CARD16 numx;CARD16 numy;CARD16 unused;};
struct $78C1BFF707415BC31C18D6AF92D2EABD {CARD8 reqType;CARD8 opcode;CARD16 length;pexEnumTypeIndex fpFormat;CARD16 unused;pexRenderer rdr;CARD32 numCommands;};
enum $78DDDB14FA44845ABB8298E040479BD0 {XmTRAVERSE_CURRENT = 0x0,XmTRAVERSE_NEXT = 0x1,XmTRAVERSE_PREV = 0x2,XmTRAVERSE_HOME = 0x3,XmTRAVERSE_NEXT_TAB_GROUP = 0x4,XmTRAVERSE_PREV_TAB_GROUP = 0x5,XmTRAVERSE_UP = 0x6,XmTRAVERSE_DOWN = 0x7,XmTRAVERSE_LEFT = 0x8,XmTRAVERSE_RIGHT = 0x9,};
struct $7905F1106D6192C786F48B3D63EB8F32 {CARD8 reqType;BYTE pad;CARD16 length;CARD32 cmap;};
struct $791AF81D366397FAE28AFC7E5E3FF4B5 {CARD8 reqType;CARD8 recordReqType;CARD16 length;CARD32 context;CARD8 elementHeader;CARD8 pad;CARD16 pad0;CARD32 nClients;CARD32 nRanges;};
struct $797907A242F94DB9200676D3A724828B {CARD8 reqType;CARD8 ext_opcode;CARD16 length;};
struct $79D3745B39F9E71262BFBA7985E1C7DE {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD16 exactRed;CARD16 exactGreen;CARD16 exactBlue;CARD16 screenRed;CARD16 screenGreen;CARD16 screenBlue;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct $79EF5C51E2072BDF172C6215CB0138B1 {CARD16 oc_opcode;CARD16 oc_length;PEXFLOAT expansion;};
struct $79FC17A0C7A3F31E1105D33CC8C2AA30 {CARD8 reqType;BOOL ownerEvents;CARD16 length;CARD32 grabWindow;CARD16 eventMask;BYTE pointerMode;BYTE keyboardMode;CARD32 confineTo;CARD32 cursor;CARD32 time;};
struct $7A342258A1A020710FB4B07A80D1815D {int type;Display *display;XSyncCounter counter;unsigned __int64 serial;unsigned __int8 error_code;unsigned __int8 request_code;unsigned __int8 minor_code;};
struct $7A455DB3BD331D79AF16B3231F86E0C5 {CARD8 reqType;BOOL onlyIfExists;CARD16 length;CARD16 nbytes;CARD16 pad;};
enum $7A6D1403076F33F26AB38429B1986DDD {XtGeometryYes = 0x0,XtGeometryNo = 0x1,XtGeometryAlmost = 0x2,XtGeometryDone = 0x3,};
struct $7A953307C4CBF8DC3B970A060657095E {XmTextPosition start;Boolean changed;XmTextPosition changed_position;Boolean past_end;LineTableExtra extra;};
struct $7AD7C9D6992D7D59BE750871F513A4E7 {CARD8 reqType;CARD8 opcode;CARD16 length;pexRenderer rdr;CARD32 drawable;};
struct $7B1AACD52ED53B3363F77B2C48FE4393 {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD32 window;CARD16 count;CARD8 mode;BYTE pad;};
struct $7B203B1D6B17DB4D229BE0C85CFA6293 {INT16 leftSideBearing;INT16 rightSideBearing;INT16 characterWidth;INT16 ascent;INT16 descent;CARD16 attributes;};
struct $7B44642C0B26E972D25A29993171BE3B {CARD8 reqType;CARD8 opcode;CARD16 length;xieTypPhotoflo floID;BOOL notify;CARD8 pad[3];};
struct $7B79F208CCCDEC19725F0DA124D139EB {float32_t TB_Tspec_r;float32_t TB_Tspec_b;float32_t TB_Tspec_p;uint32_t TB_Tspec_m;uint32_t TB_Tspec_M;};
struct $7B884385C9B34F9BF1E347FECD869B6E {unsigned __int8 class;unsigned __int8 length;};
struct $7BDACCE6E93DF8E6ADBB258A595CFD05 {CARD8 radius;BOOL simple;CARD16 pad;xieTypFloat sigma;xieTypFloat normalize;};
struct $7C0193CACD5E2992F63533D0F1598B1A {CARD8 type;CARD8 pad1;CARD16 sequenceNumber;CARD32 length;CARD16 majorVersion;CARD16 minorVersion;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct $7C850634F0DF27D39C75B0CDF2A5AF87 {CARD8 reqType;CARD8 opcode;CARD16 length;pexEnumTypeIndex fpFormat;CARD16 unused;pexRenderer rdr;CARD32 drawable;pexBitmask itemMask;};
struct $7CA3BFA0E2ACF16B623A64955922766D {CARD8 reqType;BYTE alloc;CARD16 length;CARD32 mid;CARD32 window;CARD32 visual;};
struct $7D1B644A0EEA2B09DD88F0E6B7E788D2 {XtAddressMode address_mode;XtPointer address_id;Cardinal size;};
struct $7D401D100935DA07A6E61738AE960D73 {CARD8 reqType;CARD8 opcode;CARD16 length;pexEnumTypeIndex fpFormat;CARD16 unused;pexPC pc;pexBitmask itemMask0;pexBitmask itemMask1;pexBitmask itemMask2;};
struct $7D48FB069274B8266BC6A86B88B69299 {int type;unsigned __int64 serial;int send_event;Display *display;Window window;XID deviceid;Time time;int request;};
struct $7DBE86895C9FAEA11C6FA571DFE5C5A7 {XmTextPosition position;XmHighlightMode mode;};
enum $7DE6A019FB8D510204474F438D93B845 {TCL_QUEUE_TAIL = 0x0,TCL_QUEUE_HEAD = 0x1,TCL_QUEUE_MARK = 0x2,};
struct $7E67FD4F3DB69CB7DBA92A468D15DC0A {CARD8 event;CARD8 pad;CARD16 sequenceNum;CARD32 time;CARD32 instanceNameSpace;CARD32 instanceFloID;xieTypPhototag src;CARD16 type;Window window;INT16 x;INT16 y;CARD16 width;CARD16 height;};
struct $7E7454A81A9E236B40E0A2AAAA8E6BAD {char host[257];int in_fd;int out_fd;int pid;char reserved[40];};
struct $7E88FA62BA52C085679B63B7DAF35F4C {CARD16 oc_opcode;CARD16 oc_length;PEXFLOAT point1_x;PEXFLOAT point1_y;PEXFLOAT point2_x;PEXFLOAT point2_y;CARD32 dx;CARD32 dy;};
struct $7E91C3ED5EB1D6D19AB2A444A78B2392 {PEXCoord point;PEXColorRGB rgb;};
struct $7EBD2259EECAE0CB0997A6FA7D75D1E8 {CARD16 oc_opcode;CARD16 oc_length;pexEnumTypeIndex lineType;CARD16 pad;};
enum $7EBEEDDF242EDAD10BF7B0EEC4B6EA48 {I18NWORDSELECT = 0x0,I18NTEXTWRAP = 0x1,I18NCOMPSEQ = 0x2,};
struct $7EE8581451248D554BBB7B3E11784C24 {PEXCoord point;PEXColorIndexed strchr;};
struct $7F1B0634D03F6FC40C24BD5FD3770500 {int pi_state;char pi_processor_type[32];char pi_fputypes[32];int pi_clock;};
enum $7F2B51D7BA6B441FB87F459A5B295871 {XmNONE = 0x0,XmTAB_GROUP = 0x1,XmSTICKY_TAB_GROUP = 0x2,XmEXCLUSIVE_TAB_GROUP = 0x3,};
struct $7F33531A03A03EE4E90C25564CBF6F6D {unsigned __int16 placement_type;unsigned __int16 reserved;unsigned __int16 u_count;unsigned __int16 v_count;};
struct $7F79EDEFC3CE5D4824B190E83A46D022 {INT32 numerator;INT32 denominator;};
struct $7FC160C5B833FEAD50AFA5F9700D5F2C {__int16 device_number;__int16 keysyms_per_keycode;__int16 keysyms_present;__int16 modifier_keycode_count;__int16 lock_key_led;};
struct $7FC9C14D430F064E54CF3EF22C03C30F {XmFontList default_font_list;unsigned __int8 focus_policy;XmFocusData focus_data;unsigned __int8 delete_response;unsigned __int8 unit_type;MwmHints mwm_hints;MwmInfo mwm_info;String mwm_menu;XtCallbackList focus_moved_callback;Widget old_managed;Position xAtMap;Position yAtMap;Position xOffset;Position yOffset;unsigned __int64 lastOffsetSerial;unsigned __int64 lastMapRequest;Boolean externalReposition;unsigned __int8 mapStyle;XtCallbackList realize_callback;XtGrabKind grab_kind;Boolean audible_warning;XmFontList button_font_list;XmFontList label_font_list;XmFontList text_font_list;String input_method_string;String preedit_type_string;unsigned int light_threshold;unsigned int dark_threshold;unsigned int foreground_threshold;unsigned int im_height;XtPointer im_info;Boolean im_vs_height_set;};
struct $7FE28531FE31ADDD93C7790591CFBAC8 {CARD8 reqType;CARD8 opcode;CARD16 length;pexEnumTypeIndex fpFormat;CARD16 unused;pexStructure sid;CARD32 numCommands;};
struct $7FECA4B39C985734260975A2CFDAAF0D {PEXEnumTypeIndex method;unsigned __int16 reserved;float u_tolerance;float v_tolerance;};
struct $7FF1C340C04B1FA877121AD4AA98CED6 {ulong dl_primitive;ulong dl_qos_length;ulong dl_qos_offset;};
struct $801F83CB04C22E52C720D7D622E0E540 {int type;unsigned __int64 serial;int send_event;Display *display;Window parent;Window window;int x;int y;int width;int height;int border_width;Window above;int detail;unsigned __int64 value_mask;};
struct $80262239D5DEFAC7F5C75EBAC6CCD93C {CARD8 repType;CARD8 RepType;CARD16 sequenceNumber;CARD32 length;CARD8 num_classes;BYTE pad1;BYTE pad2;BYTE pad3;CARD32 pad00;CARD32 pad01;CARD32 pad02;CARD32 pad03;CARD32 pad04;};
union $804F2EFC3E52A8BECE5080A3D33AAE9A {struct arpcom *p1;struct arptab *p2;struct mbuf *p3;struct ifnet *p4;struct route *p5;struct sockaddr *p6;struct sockaddr_in *p7;struct socket *p8;struct in_addr *p9;struct in_ifaddr *p10;struct inpcb *p11;struct ipq *p12;struct ip *p13;struct $804F2EFC3E52A8BECE5080A3D33AAE9A::tcpcb *p14;struct $804F2EFC3E52A8BECE5080A3D33AAE9A::tcpiphdr *p15;struct ipasfrag *p16;struct ipoption *p17;struct in_multi *p18;struct $804F2EFC3E52A8BECE5080A3D33AAE9A::ip_moptions *p19;struct trn_header *p20;struct icmp *p21;struct in_afilt *p22;struct __inpcb_hashbucket *p23;struct $804F2EFC3E52A8BECE5080A3D33AAE9A::pmtu_rtentry *p24;struct $804F2EFC3E52A8BECE5080A3D33AAE9A::tcphdr *p25;struct in6_addr *p26;struct sockaddr_in6 *p27;struct icmpstat *p28;struct mrtstat *p29;struct rtstat *p30;struct rtentry *p31;struct $804F2EFC3E52A8BECE5080A3D33AAE9A::ifqueue *p32;struct uio *p33;struct in_route *p34;};
struct $808EA0A767ABACCBD96646A8EAE3059A {CARD8 type;CARD8 data;CARD16 sequenceNum;CARD32 length;CARD32 colormap;CARD8 pad[20];};
struct $80BF1CA6AF87AF0DC64498AC611B3C23 {CARD8 valid[4];CARD8 data[4];ReqFlags req;EventFlags event;};
struct $80D9CC9AAA3B60A0B8515286554E0C47 {coff_int d_tag;coff_uint reserved;union $80D9CC9AAA3B60A0B8515286554E0C47::$CD512F2816A7B47A3639033DE8779CCC d_un;};
union $80D9CC9AAA3B60A0B8515286554E0C47::$CD512F2816A7B47A3639033DE8779CCC {coff_uint d_val;coff_addr d_ptr;};
struct $81227E6A2E975B2588700A3A20196845 {BYTE type;CARD8 pad0;CARD16 sequenceNumber;CARD32 length;CARD16 power_level;BOOL state;CARD8 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct $8154A6DB863DC5D0F08C1C8AD691C4FD {int needs_param;XieTechniqueGroup group;unsigned int number;unsigned int speed;char *name;};
struct $819D62649EAF67B78691543FCA1EE6A8 {CARD8 reqType;CARD8 xvReqType;CARD16 length;CARD32 port;CARD32 attribute;};
struct $81AF895D5A7FC7AA97C511D95D41010E {void *dptr;size_t dsize;};
struct $81B59567895AAF3A77A23A0FE7526C59 {int type;unsigned __int64 serial;int send_event;Display *display;Multibuffer buffer;int state;};
struct $81BFA6A9491AE6CE5B332944DC694A15 {__int16 device_number;__int16 hardware_type;__int16 buttons;char rel_abs;char unused;};
enum $81C5AE8457262FB4B2176DCA5350B614 {XmMULTI_LINE_EDIT = 0x0,XmSINGLE_LINE_EDIT = 0x1,};
enum $81CB9C9397203DD8391907B26844B7B6 {IceProcessMessagesSuccess = 0x0,IceProcessMessagesIOError = 0x1,IceProcessMessagesConnectionClosed = 0x2,};
struct $81D7D797DB059171D379A5B7433A85BC {XExtData *ext_data;VisualID visualid;int class;unsigned __int64 red_mask;unsigned __int64 green_mask;unsigned __int64 blue_mask;int bits_per_rgb;int map_entries;};
struct $8215DDD75066012239D919FF6D1C96FC {CARD8 reqType;BYTE num_catalogues;CARD16 length;};
struct $82207ABABC4EB421AD27F9EAB2AF6BD5 {VisualID visualid;int max_buffers;int depth;};
struct $8228A4E020B1E30661682C262A950172 {unsigned __int64 count;PEXCoord4D *points;};
enum $82A9E3393572D16D504BD2822273F634 {RAPI_RSTYLE_WILDCARD = 0x1,RAPI_RSTYLE_FIXED = 0x2,RAPI_RSTYLE_SE = 0x3,};
struct $82D86B5B3C9D9E6A7BE98808A956EE82 {CARD8 reqType;BYTE coordMode;CARD16 length;CARD32 drawable;CARD32 gc;};
struct $82E097767125B3AF2E9A279F52FE60E6 {__int64 dl_target_value;__int64 dl_accept_value;};
struct $82EEF83FACFC8220E9483994E0DE4841 {XID class;int length;XID id;int int_to_display;};
struct $83A9560127C5CA1AF601DD4E7C3B278F {CARD32 time;INT16 x;INT16 y;};
struct $83C128D3CC4481507991F35AE35ABA63 {unsigned int index;unsigned __int16 red;unsigned __int16 green;unsigned __int16 blue;unsigned __int16 pad;};
struct $83EEA3C65D511D134E63BC4C078678EA {unsigned __int64 max_cells;};
enum $844194616ADAB7F78352BD9EFCC8C976 {XmDROP_SITE_ACTIVE = 0x0,XmDROP_SITE_INACTIVE = 0x1,};
enum $849ECB4057725C5E606311FBE77D1A87 {TCNTL_CMD_ADDFLOWSPEC = 0x1,TCNTL_CMD_MODFLOWSPEC = 0x2,TCNTL_CMD_DELFLOWSPEC = 0x3,TCNTL_CMD_ADDFILTER = 0x4,TCNTL_CMD_DELFILTER = 0x5,TCNTL_CMD_LISTFLOW_HANDLES = 0x6,TCNTL_CMD_LISTFLOW_HTH = 0x7,TCNTL_CMD_LISTFLOW_SLOT = 0x8,TCNTL_CMD_LISTFILT_HTH = 0x9,TCNTL_CMD_LISTFILT_SLOT = 0xA,};
struct $84B87B2778AF496FDD4E89829249E3ED {PEXCoord point;PEXVector vector;};
struct $85356F6A5463C8185FD263BF4DBCCC67 {__int16 screen;__int16 x;__int16 y;};
enum $8550641B0259C0F145DDEEFF69F64B1F {XmGET_ACTUAL_SIZE = 0x1,XmGET_PREFERRED_SIZE = 0x2,XmGEO_PRE_SET = 0x3,XmGEO_POST_SET = 0x4,};
enum $859212F894AD081D1D25ADC4B1130DC3 {XmBASELINE_GET = 0x0,XmBASELINE_SET = 0x1,};
struct $85BD4541E4D2ADE44F6EE7868018A164 {INT16 xmin;INT16 ymin;PEXFLOAT zmin;INT16 xmax;INT16 ymax;PEXFLOAT zmax;pexSwitch useDrawable;BYTE pad[3];};
struct $85C20FF9889ECD98CC9E4806604D9811 {CARD16 oc_opcode;CARD16 oc_length;PEXFLOAT height;};
struct $85D2B0DCC0B34905116BAAFA62D8EB6A {unsigned __int16 status;PEXPickPath pick_path;};
struct $86115E384CDA3DB0102B675F968DDCF3 {XiePhototag src;int dst_x;int dst_y;};
enum $86142F77BB0C999E4FDA022A0761FC03 {XmDIALOG_NONE = 0x0,XmDIALOG_APPLY_BUTTON = 0x1,XmDIALOG_CANCEL_BUTTON = 0x2,XmDIALOG_DEFAULT_BUTTON = 0x3,XmDIALOG_OK_BUTTON = 0x4,XmDIALOG_FILTER_LABEL = 0x5,XmDIALOG_FILTER_TEXT = 0x6,XmDIALOG_HELP_BUTTON = 0x7,XmDIALOG_LIST = 0x8,XmDIALOG_LIST_LABEL = 0x9,XmDIALOG_MESSAGE_LABEL = 0xA,XmDIALOG_SELECTION_LABEL = 0xB,XmDIALOG_SYMBOL_LABEL = 0xC,XmDIALOG_TEXT = 0xD,XmDIALOG_SEPARATOR = 0xE,XmDIALOG_DIR_LIST = 0xF,XmDIALOG_DIR_LIST_LABEL = 0x10,};
struct $8639730F0F017B4F8046B7637743F27B {PEXCoord min;PEXCoord max;};
struct $86549870A56B750901787CF4B94C9DDE {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD32 valueLen;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct $86BCEEF34780F6AF2028C23CDB754DC3 {int type;unsigned __int64 serial;int send_event;Display *display;Window window;XID deviceid;Window root;Window subwindow;Time time;int x;int y;int x_root;int y_root;unsigned int state;unsigned int keycode;int same_screen;unsigned int device_state;unsigned __int8 axes_count;unsigned __int8 first_axis;int axis_data[6];};
struct $873989352E2697A1AEEAE6DD5F2AF6D9 {int type;unsigned __int64 serial;int send_event;Display *display;Window window;Window root;Window subwindow;Time time;int x;int y;int x_root;int y_root;unsigned int state;unsigned int button;int same_screen;};
struct $875800A09C817D61F833D1479DE8ED86 {CARD16 status;CARD16 major_version;CARD16 minor_version;CARD8 num_alternates;CARD8 auth_index;CARD16 alternate_len;CARD16 auth_len;};
struct $8768C721D59A1CE73A9564C36C656042 {XawTextPosition position;Position y;Dimension textWidth;};
struct $8774CE79C234090F3428DE59DE9845D2 {BYTE type;CARD8 what;CARD16 sequenceNumber;CARD32 length;CARD32 unused;CARD32 numItems;BYTE pad[16];};
struct $8790A95C9089D47EA8D4BDC2F4BAD9F8 {CARD16 xtrap_release;CARD16 xtrap_version;CARD16 xtrap_revision;CARD16 xtrap_protocol;};
struct $87D722ECD21497B94ED1D7223FEC05F4 {String type;Widget widget;};
struct $87E061934EE6919F8EE4F5F65571C106 {xieTypInterleave interleave;xieTypOrientation bandOrder;BOOL upSample;CARD8 pad;};
struct $882FE5A4C0CBB7F7E24FD2B31110FD1E {XtPointer next_extension;XrmQuark record_type;__int64 version;Cardinal record_size;XmTraversalChildrenProc traversal_children;};
enum $8848EA370873ADDFC4367852D3779278 {CMFS_KEEP = 0x0,CMFS_STRIP = 0x1,CMFS_LSTRIP = 0x2,};
struct $884E74C734502FDAE5886BDFF852D3B6 {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD16 majorVersion;CARD16 minorVersion;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct $88CB499CEF7C95AB64991FDC4A8C267A {CARD8 repType;CARD8 RepType;CARD16 sequenceNumber;CARD32 length;CARD8 keySymsPerKeyCode;CARD8 pad0;CARD16 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct $88FB39CD3802D019F63911908A8052EF {int type;Display *display;Window window;};
struct $8918E64302E34A875EC7CDE3CAA7010F {_LC_object_t hdr;char *(*nl_langinfo)(__nl_item, struct _LC_locale_t *);struct lconv *(*localeconv)(struct _LC_locale_t *);struct _LC_locale_t *(*init)(struct _LC_locale_t *);void *data;};
struct $8935C5F58D9CE77E45A87720AFB3227F {PEXCoord point;PEXColorRGB16 rgb16;};
enum $8955F610BCE94AAE8676F9CC0150C756 {XmDEST_SELECT = 0x0,XmPRIM_SELECT = 0x1,};
struct $896FD2EFE27D37E3F44DDE5693F51658 {int type;unsigned __int64 serial;int send_event;Display *display;XPContext context;int cancel;int detail;};
struct $8973D72E68A3D7427BDE924AB847E810 {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD8 deviceid;BYTE pad1;BYTE pad2;BYTE pad3;};
struct $89CD6F3E3DD209540077C297BE20292F {INT16 xmin;INT16 ymin;INT16 xmax;INT16 ymax;};
enum $89FC1B20F172ACED79941DFC60097C46 {XmNO_ORIENTATION = 0x0,XmVERTICAL = 0x1,XmHORIZONTAL = 0x2,};
enum $8A0B1F50D160EB8C12640B4C27785CB0 {DXmLAYOUT_LEFT_DOWN = 0x1,DXmLAYOUT_LEFT_UP = 0x2,DXmLAYOUT_RIGHT_DOWN = 0x3,DXmLAYOUT_RIGHT_UP = 0x4,};
struct $8A52654D24E42D3905926E1FC7E9ABF6 {Dimension margin_width;Dimension margin_height;unsigned __int8 shadow_type;Dimension old_width;Dimension old_height;Dimension old_shadow_thickness;Position old_shadow_x;Position old_shadow_y;Widget work_area;Widget title_area;Boolean processing_constraints;};
struct $8AB35179F05D6EDB2CCB681589242432 {char depth;unsigned __int64 visual_id;};
struct $8AB510C5B77638AABE0930026E6C5B0E {ulong dl_primitive;ulong dl_subs_sap_offset;ulong dl_subs_sap_len;ulong dl_subs_bind_class;};
struct $8AC915922B7872008F9FA0F659707AB7 {CARD8 type;CARD8 pad1;CARD16 sequenceNumber;CARD32 length;CARD32 size_return;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
enum $8ACB7C61C0AD89FF227C23D1B4598563 {XmATTACH_NONE = 0x0,XmATTACH_FORM = 0x1,XmATTACH_OPPOSITE_FORM = 0x2,XmATTACH_WIDGET = 0x3,XmATTACH_OPPOSITE_WIDGET = 0x4,XmATTACH_POSITION = 0x5,XmATTACH_SELF = 0x6,};
struct $8ACD24E0FCE486F0E55577826775AC1E {BYTE type;CARD8 what;CARD16 sequenceNumber;CARD32 length;CARD16 viewUpdate;BYTE pad[22];};
struct $8AE613A18B7427E854A96FDED82C075E {unsigned __int64 cm_tag;union $8AE613A18B7427E854A96FDED82C075E::$ECDDA2E8C45311B19ACFF546D9F4A4A6 cm_un;};
union $8AE613A18B7427E854A96FDED82C075E::$ECDDA2E8C45311B19ACFF546D9F4A4A6 {unsigned __int64 cm_val;unsigned __int64 cm_ptr;};
struct $8AEBD99EA8232519F601DB522AD44E1E {Boolean mwmPresent;unsigned __int16 numReparented;int darkThreshold;int foregroundThreshold;int lightThreshold;XmDragIconObject defaultNoneCursorIcon;XmDragIconObject defaultValidCursorIcon;XmDragIconObject defaultInvalidCursorIcon;XmDragIconObject defaultMoveCursorIcon;XmDragIconObject defaultCopyCursorIcon;XmDragIconObject defaultLinkCursorIcon;XmDragIconObject defaultSourceCursorIcon;Cursor nullCursor;XmDragCursorRec *cursorCache;Cardinal maxCursorWidth;Cardinal maxCursorHeight;Cursor menuCursor;unsigned __int8 unpostBehavior;XFontStruct *font_struct;int h_unit;int v_unit;XmScratchPixmap scratchPixmaps;unsigned __int8 moveOpaque;XmDragIconObject xmStateCursorIcon;XmDragIconObject xmMoveCursorIcon;XmDragIconObject xmCopyCursorIcon;XmDragIconObject xmLinkCursorIcon;XmDragIconObject xmSourceCursorIcon;GC imageGC;int imageGCDepth;Pixel imageForeground;Pixel imageBackground;XtPointer screenInfo;};
struct $8B1EAF7AAA57F33F38F96E94C6EE2E44 {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD16 nameLength;CARD16 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct $8B33727AD960289F5C449D9866A7300E {CARD16 oc_opcode;CARD16 oc_length;PEXFLOAT origin_x;PEXFLOAT origin_y;PEXFLOAT offset_x;PEXFLOAT offset_y;CARD16 numEncodings;CARD16 unused;};
struct $8B405FDA37E627A06C3D21FFB3C136C9 {int type;Display *display;unsigned __int64 flo_id;unsigned __int64 serial;unsigned __int8 error_code;unsigned __int8 request_code;unsigned __int8 minor_code;unsigned int flo_error_code;unsigned __int64 name_space;XiePhototag phototag;unsigned int elem_type;unsigned int operator;};
struct $8B7611559FC3583744BC038C25BD686C {XieInterleave interleave;XieOrientation band_order;unsigned __int8 horizontal_samples[3];unsigned __int8 vertical_samples[3];char *q_table;unsigned int q_size;char *ac_table;unsigned int ac_size;char *dc_table;unsigned int dc_size;};
enum $8B82F0E1C56011458915D67932773AAA {MC_TRANSPORT_TYPE = 0x0,MC_SLOT_TYPE = 0x1,MC_PORT_TYPE = 0x2,MC_DRIVE_TYPE = 0x3,MC_ELEMENT_TYPE = 0x4,MC_NUM_ADDR_TYPES = 0x5,};
struct $8BD856D0EABB45DC0AE6203B505E4C05 {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD32 window;CARD16 count;CARD16 pad00;};
struct $8BD90099CDB57D887F6A7D996A06A579 {int simple;};
struct $8BE617EABEB75C8FAB9CB9A4A240FEE3 {CARD8 reqType;CARD8 ext_opcode;CARD16 length;CARD32 event_mask;};
enum $8C3F6FFEEEA4FDE62323156E011FAD74 {XStringStyle = 0x0,XCompoundTextStyle = 0x1,XTextStyle = 0x2,XStdICCTextStyle = 0x3,};
struct $8C544AC6C871408AE6573DA61B3B8C70 {BYTE type;BYTE status;CARD16 sequenceNumber;CARD32 length;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct $8C606E8C629293621C4597F91F88DAA0 {int type;unsigned __int64 serial;int send_event;Display *display;Drawable drawable;int major_code;int minor_code;};
struct $8C749379D7EEF7D1FBD30CDCFD79F5DB {CARD8 reqType;CARD8 opcode;CARD16 length;pexStructure sid;CARD16 mode;CARD16 pad;};
struct $8CAD7BDDA71EDC7DB2A64D55137A8267 {CARD8 reqType;CARD8 opcode;CARD16 length;pexPhigsWks wks;CARD32 numRects;};
struct $8D000675938487DA85F6AF4E6146E483 {PEXCoord point;PEXColorCIE cie;unsigned int edge;};
struct $8D40AFF1B9E22FA7C8F5AE4180774535 {u_int val_len;char *val_val;};
struct $8D464BF992019D1DA7B2EE769B420964 {CARD16 oc_opcode;CARD16 oc_length;CARD32 pickId;};
struct $8D5227D256EF5B5AEB1F500684CBE9EC {CARD16 elemType;CARD16 elemLength;xieTypPhototag src;CARD8 bandMask;CARD8 pad;CARD32 width;CARD32 height;xieTypFloat a;xieTypFloat b;xieTypFloat c;xieTypFloat d;xieTypFloat tx;xieTypFloat ty;xieTypFloat constant0;xieTypFloat constant1;xieTypFloat constant2;xieTypGeometryTechnique sample;CARD16 lenParams;};
struct $8D66564F98126883EE28AC7CFF4C7324 {CARD8 majorOpcode;CARD8 minorOpcode;CARD16 errorClass;CARD32 length;CARD8 offendingMinorOpcode;CARD8 severity;CARD16 unused;CARD32 offendingSequenceNum;};
struct $8DDC7EA093C1315834F4EBDF0AEDD58E {PEXColorHLS hls;PEXVector normal;};
struct $8DE4D3787CB17674EC1600CC378BF3ED {__int16 screen;__int16 which_depth;__int16 map_unmap;};
struct $8E1349AD4AC8D9A4F1DC84C54B0BE169 {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD16 nPaths;CARD16 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct $8E2941579199B80013AB035AF46D9BEA {int type;unsigned __int64 serial;int send_event;Display *display;Drawable drawable;int major_code;int minor_code;ShmSeg shmseg;unsigned __int64 offset;};
struct $8E6586170DFE7430E9F1E720E7EE4924 {CARD16 oc_opcode;CARD16 oc_length;pexEnumTypeIndex markerType;CARD16 pad;};
struct $8E967F7BF7D653C298E7010DBC578B10 {XmTextPosition from;XmTextPosition to;};
struct $8E9D6FDA341A5CD3E2BA41AECEFC8DB5 {BYTE type;CARD8 revertTo;CARD16 sequenceNumber;CARD32 length;CARD32 focus;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct $8EA7A0D2C6C155A9C144BE737FA9135D {CARD16 elemType;CARD16 elemLength;xieTypDataClass class;xieTypOrientation bandOrder;CARD16 pad;CARD32 length0;CARD32 length1;CARD32 length2;CARD32 levels0;CARD32 levels1;CARD32 levels2;};
struct $8F03D2DA5AF6E21A6EF56A5D6E316A3F {union $8F03D2DA5AF6E21A6EF56A5D6E316A3F::$52714CACCE3C5278EA278BFABED0DCA7 format;};
union $8F03D2DA5AF6E21A6EF56A5D6E316A3F::$52714CACCE3C5278EA278BFABED0DCA7 {pexIndexedColor indexed;pexRgb8Color rgb8;pexRgb16Color rgb16;pexRgbFloatColor rgbFloat;pexHsvColor hsvFloat;pexHlsColor hlsFloat;pexCieColor cieFloat;};
struct $8F2C7EBD5F5C00EC145265832DC3A795 {Boolean end;XmGeoSegmentFixUpProc fix_up;Dimension even_width;Dimension even_height;Dimension min_height;Boolean stretch_height;Boolean uniform_border;Dimension border;unsigned __int8 fill_mode;unsigned __int8 fit_mode;Boolean sticky_end;Dimension space_above;Dimension space_end;Dimension space_between;Dimension max_box_height;Dimension boxes_width;Dimension fill_width;Dimension box_count;};
struct $8F38FA1882FD1CDA04507844DB5B7464 {XETrapFlags flags;CARD16 max_pkt_size;CARD8 cmd_key;CARD8 pad[1];};
struct $8F45B6188928CD01F0FDE0FF1AAE7BC1 {CARD8 error;CARD8 code;CARD16 sequenceNum;CARD32 floID;CARD16 minorOpcode;CARD8 majorOpcode;CARD8 floErrorCode;CARD32 nameSpace;xieTypPhototag phototag;CARD16 type;CARD32 badValue;CARD8 pad[8];};
struct $8F46F47918C9B5A0B3A9BC26D821254C {IS_serv_hdr_t gen_parm_hdr;IS_parm_hdr_t gen_parm_hopcnt_hdr;uint32_t gen_parm_hopcnt;IS_parm_hdr_t gen_parm_pathbw_hdr;float32_t gen_parm_path_bw;IS_parm_hdr_t gen_parm_minlat_hdr;uint32_t gen_parm_min_latency;IS_parm_hdr_t gen_parm_compmtu_hdr;uint32_t gen_parm_composed_MTU;};
enum $8F8E6D9517AB45AA51A20D9C7A3335AA {XmTEXT_FORWARD = 0x0,XmTEXT_BACKWARD = 0x1,};
struct $8FA1AEF6CCD04E4BA4DF0F44219AFDE7 {CARD8 reqType;CARD8 opcode;CARD16 length;pexPhigsWks wks;CARD16 bufferMode;CARD16 pad;};
struct $8FDAAB4B707DEB409D6D96C66936D9CD {__int16 device_number;};
struct $900F77A02661737FF1F7A40ED34FB854 {__int16 screen;__int16 device_number;__int16 enable;ws_screen_box box;};
struct $90B0CF3FB4D6E3DF758C531B060A7611 {float hue;float saturation;float value;};
struct $90B3239242A1E7B072ABC9D9983310BF {CARD8 repType;CARD8 RepType;CARD16 sequenceNumber;CARD32 length;CARD16 this_client_count;CARD16 all_clients_count;CARD32 pad01;CARD32 pad02;CARD32 pad03;CARD32 pad04;CARD32 pad05;};
struct $90D6D9B7F8A561501EF54326BDFCDF65 {int strpool_idx;unsigned int ce_wgt[1];};
struct $90E70BB8598364AAEAF6E156E433A864 {BYTE type;CARD8 num_resolutions;CARD16 sequenceNumber;CARD32 length;};
struct $90E8D3FA0E37CF99376412B163D592B9 {Dimension highlight_thickness;XtCallbackList callbacks;Pixmap gray_pixmap;GC normal_GC;GC inverse_GC;Boolean set;XtCommandHighlight highlighted;int shape_style;Dimension corner_round;};
struct $90F4279CED75C32CE4133781567FE5DA {Window window;};
struct $91220B58EDEB553793259B81A7288E35 {CARD8 reqType;CARD8 opcode;CARD16 length;pexPhigsWks wks;pexEnumTypeIndex mode;CARD16 pad;};
struct $91814F7EF02B13F9FE228F0B2E3BE051 {CARD8 reqType;CARD8 opcode;CARD16 length;CARD32 escapeID;};
struct $91B464B64FBA6267CC5058765F552BCD {uint8_t issh_service;uint8_t issh_flags;uint16_t issh_len32b;};
struct $91B6CB490464A345E007449761AA48F2 {CARD8 reqType;BOOL contiguous;CARD16 length;CARD32 cmap;CARD16 colors;CARD16 red;CARD16 green;CARD16 blue;};
struct $91D1B2149FAC90180ECB9AC277F76009 {float x;float y;float z;float w;};
struct $92276D725373BB3B16F8CB5C6778E662 {BYTE type;CARD8 nameLength;CARD16 sequenceNumber;CARD32 length;xCharInfo minBounds;CARD32 walign1;xCharInfo maxBounds;CARD32 walign2;CARD16 minCharOrByte2;CARD16 maxCharOrByte2;CARD16 defaultChar;CARD16 nFontProps;CARD8 drawDirection;CARD8 minByte1;CARD8 maxByte1;BOOL allCharsExist;INT16 fontAscent;INT16 fontDescent;CARD32 nReplies;};
enum $924322573C6CAB618BBD90F5076C3820 {XmDIALOG_MODELESS = 0x0,XmDIALOG_PRIMARY_APPLICATION_MODAL = 0x1,XmDIALOG_FULL_APPLICATION_MODAL = 0x2,XmDIALOG_SYSTEM_MODAL = 0x3,};
struct $925C5E9ADF13AF08F8E4BE2898EADC8C {CARD8 reqType;BYTE pad;CARD16 length;CARD32 mask;};
struct $925D3B71EB59752478F4626DAF3C7511 {PEXColorRGB8 rgb8;PEXVector normal;};
struct $9260E9DF4F900591ED372CA82BEE9A23 {BYTE type;BYTE request;CARD16 sequenceNumber;CARD32 length;fsTimestamp timestamp;CARD8 major_opcode;CARD8 minor_opcode;CARD16 pad;CARD32 acid;};
struct $927F401B27F2876D054E6625E491BF29 {CARD32 levels0;CARD32 levels1;CARD32 levels2;xieTypFloat lumaRed;xieTypFloat lumaGreen;xieTypFloat lumaBlue;xieTypFloat bias0;xieTypFloat bias1;xieTypFloat bias2;xieTypGamutTechnique gamutCompress;CARD16 lenGamutParams;};
struct $9281A16BE3ADF5B041CAA43F31749092 {CARD8 red;CARD8 green;CARD8 blue;CARD8 pad;};
struct $928F96912A4716BD0FD130073F46C097 {__int16 version;__int16 reserved1;__int16 num_screens_exist;__int16 num_devices_exist;__int16 reserved2;__int16 console_keyboard;__int16 console_pointer;};
struct $931DBA82A19B61CA267B848FC88C1541 {int major_version;int minor_version;IcePaProcessMsgProc process_msg_proc;};
struct $933A36EE691D194FA132289C1144F4D8 {Dimension h_space;Dimension v_space;XtOrientation orientation;Dimension preferred_width;Dimension preferred_height;Dimension last_query_width;Dimension last_query_height;XtGeometryMask last_query_mode;};
struct $933BE1AB5DCAC6C391237CA0391008DA {CARD8 reqType;CARD8 opcode;CARD16 length;pexStructure sid;CARD16 position_whence;CARD16 unused;INT32 position_offset;};
struct $93448E48748F8400997BDD02B10E5A80 {int x;int y;int width;int height;int border_width;int depth;Visual *visual;Window root;int class;int bit_gravity;int win_gravity;int backing_store;unsigned __int64 backing_planes;unsigned __int64 backing_pixel;int save_under;Colormap colormap;int map_installed;int map_state;__int64 all_event_masks;__int64 your_event_mask;__int64 do_not_propagate_mask;int override_redirect;Screen *screen;};
struct $9375A326D5D02800B5E28ACECE8480CB {int num_orientation;XOrientation *orientation;};
enum $937D1D6B5AFD4B22B25268EA94F00445 {apChar = 0x0,apShort = 0x1,apInt = 0x2,apLong = 0x3,apPointer = 0x4,};
struct $937DB4F83893A6A1F82E1079494CB89A {XID class;int length;XID id;int click;int percent;int pitch;int duration;int led_mask;int global_auto_repeat;char auto_repeats[32];};
struct $938BD55C3C0E857A33C3981E95130004 {CARD8 reqType;CARD8 opcode;CARD16 length;pexStructure sid;CARD16 which;CARD16 pad;};
struct $938D63FCF31665F8756BDAC9031C3485 {unsigned __int8 focus_policy;XmFocusData focus_data;Boolean private_shell;XmFontList default_font_list;XmFontList button_font_list;XmFontList label_font_list;};
struct $943AB0B592E650DAB46B44D9AD05F1F0 {struct in_addr sender;uint32_t gpi;};
struct $945CB40499A6C274AE2947D5A626DBC5 {CARD16 oc_opcode;CARD16 oc_length;pexCoordType type;CARD16 uOrder;CARD16 vOrder;CARD16 unused;CARD32 numUknots;CARD32 numVknots;CARD16 mPts;CARD16 nPts;CARD32 numLists;};
struct $945E992F186701F49541543A34AD82BA {CARD8 reqType;CARD8 opcode;CARD16 length;CARD32 numStructures;};
struct $94A7408767E31F393C3FA75946CED60F {rapi_qos_service_t spec_type;rapi_qos_Tspec_body xtspec_Tspec;};
struct $94B6BB2CA433A719FA3DF4B093FD2460 {XtCallbackList sash_action;Boolean has_focus;};
struct $94C04A488373DB802AA4CC07AF27941B {CARD8 reqType;INT8 percent;CARD16 length;};
struct $94FA839E2A2E2CDB2FF04022E6E0CAA1 {CARD8 reqType;BOOL ownerEvents;CARD16 length;CARD32 grabWindow;CARD32 time;BYTE pointerMode;BYTE keyboardMode;CARD16 pad;};
struct $95075738660B9B4CB06892FEACB5FF67 {ws_motion_history *motion;__int16 size;__int16 axis_count;__int16 entry_size;__int16 next;};
struct $95316FB0E037E5BEDA277A6691A89583 {PEXColorRGB16 rgb16;PEXVector normal;};
struct $955E56087392B65FCBDE8CC6E20D02B0 {PEXEnumTypeIndex type;unsigned __int16 reserved;PEXVector direction;PEXCoord point;float concentration;float spread_angle;float attenuation1;float attenuation2;PEXColorSpecifier color;};
struct $95D90088441391B9D13BDE635D76FEBC {ulong dl_primitive;ulong dl_dest_addr_length;ulong dl_dest_addr_offset;ulong dl_src_addr_length;ulong dl_src_addr_offset;ulong dl_group_address;};
struct $95F29F2E23B7A5AB14053F1397D65335 {int device_type;union $95F29F2E23B7A5AB14053F1397D65335::$33A58254B8BB997153147B86F0F0FD97 p;};
union $95F29F2E23B7A5AB14053F1397D65335::$33A58254B8BB997153147B86F0F0FD97 {ws_input_device *dp;ws_keyboard *kp;ws_pointer *pp;};
struct $95F74D7453875C15752E25CB7F1BF0CB {BYTE type;BYTE detail;CARD16 sequenceNumber;CARD32 time;CARD32 window;BYTE mode;CARD8 deviceid;BYTE pad1;BYTE pad2;CARD32 pad00;CARD32 pad01;CARD32 pad02;CARD32 pad03;};
struct $95FA76242027CA03F9C53902C97D80C2 {CARD8 class;CARD8 id;CARD16 length;CARD32 led_mask;CARD32 led_values;};
struct $96503EDF7296EF31DB8BFCA02F4893DF {ulong dl_primitive;ulong dl_dest_addr_length;ulong dl_dest_addr_offset;ulong dl_src_addr_length;ulong dl_src_addr_offset;ulong dl_priority;ulong dl_service_class;};
struct $9714CBFF61C1A63A7C36677752AEAE35 {unsigned __int64 flags;unsigned __int64 functions;unsigned __int64 decorations;__int64 inputMode;unsigned __int64 status;};
struct $971A307052A09CEBE8EA06EFC96239F4 {PEXCoord origin;PEXVector direction;unsigned __int16 count;unsigned __int16 reserved;float *parameters;};
struct $971F84B72BD3F707C381B321ECE37D29 {ws_event w;__int16 axis_data[8];};
struct $9750BD37C04375AEAD857CD1AEBC6ACD {char *protocol_name;char *network_id;char *auth_name;unsigned __int16 auth_data_length;char *auth_data;};
struct $9781CF45113C82D4A145A3BD405D900E {unsigned int threshold_order;};
struct $97E1DE8F9347FE39409AFDCF961CF54E {PEXFLOAT x;PEXFLOAT y;PEXFLOAT z;PEXFLOAT w;};
struct $98323091350E194A207706249D489A8A {CARD16 oc_opcode;CARD16 oc_length;CARD16 shape;pexSwitch ignoreEdges;CARD8 contourHint;CARD32 numLists;};
struct $984028CEBAA862490ACFAD72BCDE57E1 {CorePart core;CompositePart composite;ShellPart shell;};
struct $9862706C0A5BB87114D8D1264CC215A3 {CARD8 majorOpcode;CARD8 minorOpcode;CARD16 unused;CARD32 length;};
struct $988632284A71C49D1170FC4598DEA165 {CARD8 repType;CARD8 RepType;CARD16 sequenceNumber;CARD32 length;CARD16 count;CARD16 pad00;CARD32 pad01;CARD32 pad02;CARD32 pad03;CARD32 pad04;CARD32 pad05;};
struct $988B929A856EDB090BD4DB7B25868BD7 {unsigned int len;rapi_format_t form;union $988B929A856EDB090BD4DB7B25868BD7::$11CA95BB91AE82BD715441FE079F60CD tspecbody_u;};
union $988B929A856EDB090BD4DB7B25868BD7::$11CA95BB91AE82BD715441FE079F60CD {rapi_qos_tspecx_t qosxt;IS_tspbody_t ISt;};
struct $98AA837ABBCCC1B7351149D0F74847DA {XieOrientation encoded_order;};
enum $98AACC45B526BF8E56A46567C8EC9FBB {EditDone = 0x0,EditError = 0x1,EditReject = 0x2,};
struct $98E996A0970E8A2E0A60510A6CBAEECA {_LC_object_t hdr;char *(*nl_langinfo)(__nl_item, struct _LC_numeric_t *);struct _LC_numeric_t *(*init)(struct _LC_locale_t *);void *data;};
struct $9917E19D8B3D4E8031BD38F2DA53C01F {u_int ir_cache_buckets;u_int hash_max;u_int max_cache_size;u_int max_ir_size;};
struct $991DB0B5CB0892F70B164889AA9E2739 {CARD16 first;CARD16 last;};
struct $996AFA363EA033F77FC336ED8A97035E {CARD8 reqType;CARD8 opcode;CARD16 length;pexEnumTypeIndex fpFormat;CARD16 textPath;pexTableIndex fontGroupIndex;CARD16 unused;CARD32 id;PEXFLOAT charExpansion;PEXFLOAT charSpacing;PEXFLOAT charHeight;CARD16 alignment_vertical;CARD16 alignment_horizontal;CARD32 numStrings;};
struct $99800163638C6A1BFA9FE38BFEE3E130 {CARD16 oc_opcode;CARD16 oc_length;CARD16 precision;CARD16 pad;};
struct $9990F7522FA29648C94CCC0846165B95 {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD16 width;CARD16 height;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct $9994C5E3500D4B492A708363DBC1D083 {INT32 title_font;INT32 icon_font;INT32 border_width;INT32 title_height;INT32 non_title_width;INT32 icon_name_width;INT32 iconify_width;INT32 iconify_height;};
struct $99B5CC9F29D8CCB1C212F39D02E9DF25 {struct ldfile ldfile;pOBJ obj;int arfd;off_t aroffset;archdr archdr;};
struct $99BDE9127DD313DAAA88C0590E201DA9 {PEXFLOAT point_x;PEXFLOAT point_y;PEXFLOAT point_z;PEXFLOAT vector_x;PEXFLOAT vector_y;PEXFLOAT vector_z;};
struct $99C954413A17768447BF0852A4562C6B {int type;unsigned __int64 serial;int send_event;Display *display;Window window;Window root;Window subwindow;Time time;int x;int y;int x_root;int y_root;int mode;int detail;int same_screen;int focus;unsigned int state;};
struct $99EC62E442FF2EB58DF6D0B6F7134087 {CARD8 reqType;CARD8 opcode;CARD16 length;pexPC src;pexPC dst;pexBitmask itemMask0;pexBitmask itemMask1;pexBitmask itemMask2;};
struct $9A02475B75BDC9A6C1FC81F46F9E4217 {CARD8 reqType;CARD8 xvReqType;CARD16 length;CARD32 port;};
struct $9A231DBDEFAF4839DC9D8D20B6CD75A5 {int reason;XEvent *event;XmString value;int length;XmString mask;int mask_length;XmString dir;int dir_length;XmString pattern;int pattern_length;};
struct $9A4171A2E09D9BDDB64FBFF4E702414F {pexStructure sid;CARD32 offset;CARD32 pickid;};
struct $9A4AAE6A7007213335882EBC22A75B48 {__int16 screen;__int16 which_visual;__int16 screen_class;__int16 depth;unsigned __int64 red_mask;unsigned __int64 green_mask;unsigned __int64 blue_mask;__int16 bits_per_rgb;int color_map_entries;};
struct $9A67910CF765C38819EFD71866036684 {BYTE type;CARD8 what;CARD16 sequenceNumber;CARD32 length;CARD32 numPickElRefs;pexEnumTypeIndex pickStatus;CARD8 betterPick;BYTE pad[17];};
struct $9A6CB8BD360D5EFF014093FD3394BE40 {int type;unsigned __int64 serial;int send_event;Display *display;PEXRenderer renderer;};
struct $9A784CA7D6C0E1FBB246C8E9B53C24C1 {CARD16 oc_opcode;CARD16 oc_length;PEXFLOAT size_x;PEXFLOAT size_y;};
struct $9A79A86C67FC8B79D589DEFE9BCD3BC9 {CARD8 reqType;BYTE pad;CARD16 length;CARD8 firstKeyCode;CARD8 count;CARD16 pad1;};
struct $9A7B13471624AF49EBC2FC2C06B8FE16 {CARD8 reqType;CARD8 class;CARD16 length;CARD32 drawable;CARD16 width;CARD16 height;};
struct $9A95D2D738A6604438676059B54BB69F {XieOrientation encoded_order;int radiometric;};
struct $9AD92D66A9B7FE2D16898D79F4A40DAD {char *protocol_name;_IcePoProtocol *orig_client;_IcePaProtocol *accept_client;};
struct $9ADB35CC19CE691D0031EBD1B03A7BD9 {ulong dl_primitive;ulong dl_correct_primitive;};
struct $9B1F774B27C392ED22A779C9E7386C0C {__int16 ldr_tag;union $9B1F774B27C392ED22A779C9E7386C0C::$491029955188A1F66BDA244B07320C79 ldr_un;};
union $9B1F774B27C392ED22A779C9E7386C0C::$491029955188A1F66BDA244B07320C79 {__int64 ldr_val;void *ldr_ptr;};
struct $9B215D7B412F7706499A9C5F7AE2BF48 {CARD32 pf_ident;CARD16 xtrap_release;CARD16 xtrap_version;CARD16 xtrap_revision;CARD16 max_pkt_size;CARD8 valid[4];CARD32 major_opcode;CARD32 event_base;CARD32 pad0;CARD16 pad1;CARD16 pad2;CARD16 pad3;CARD16 xtrap_protocol;INT16 cur_x;INT16 cur_y;};
struct $9B2BA16EFD6C8F08FE429D5BCB530166 {unsigned __int16 red;unsigned __int16 green;unsigned __int16 blue;unsigned __int16 reserved;};
struct $9B4395DE66E8574EC0897BBFC5E468E1 {CARD8 family;BYTE pad;CARD16 length;};
struct $9B6DE42DFC0BE749FCDBD18B5A574DFA {int reason;XEvent *event;Window window;};
struct $9B6EF9E13112E3205299C25BAD468425 {unsigned __int16 length;char *record;};
struct $9BD11453D851B840D226BDE30A5759A2 {int flags;int functions;int decorations;int input_mode;int status;};
struct $9C05987122A935634D9A0959094DDFFC {XAssoc *buckets;int size;};
struct $9C224668B7E64BE6AE9499E6FD772938 {char *chars;int nchars;int delta;XFontSet font_set;};
struct $9C384A9E423E8568FC322ED8773458C9 {CARD8 thresholdOrder;CARD8 pad[3];};
struct $9C3ADE2830E8678457F509D6BD2904ED {PEXFLOAT point_x;PEXFLOAT point_y;PEXFLOAT point_z;};
struct $9C8855C5416F841FBC956426CB420C87 {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD32 grabWindow;CARD16 modifiers;CARD8 modifier_device;CARD8 key;CARD8 grabbed_device;BYTE pad1;BYTE pad2;BYTE pad3;};
struct $9C9793AFB485CBCDC1723AA9DA7467C7 {CARD8 reqType;CARD8 xvReqType;CARD16 length;CARD32 drawable;BOOL onoff;CARD8 pad1;CARD16 pad2;};
struct $9CB99F55F4760567A5B7FA05D1482C33 {CARD8 error;CARD8 code;CARD16 sequenceNum;CARD32 floID;CARD16 minorOpcode;CARD8 majorOpcode;CARD8 floErrorCode;CARD32 nameSpace;xieTypPhototag phototag;CARD16 type;CARD8 pad[12];};
enum $9CF57B51EE7F5AA4F23AA2AD25F2CCDA {XmBLEND_ALL = 0x0,XmBLEND_STATE_SOURCE = 0x1,XmBLEND_JUST_SOURCE = 0x2,XmBLEND_NONE = 0x3,};
struct $9D18CDF79BA48AD59BDC9EBC3E358440 {CARD8 reqType;CARD8 opcode;CARD16 length;pexEnumTypeIndex fpFormat;CARD16 unused;pexPhigsWks wks;pexEnumTypeIndex devType;CARD16 unused2;pexBitmask itemMask;};
struct $9D27B91CE16DA3CD2ECB22AEF02B7B1E {char subsys[16];int operation;cfg_status_t result;__int64 data_size;};
enum $9D27BE50877F516FCF81DCF55C201B01 {SEDACChange = 0x0,SEDACFail = 0x1,SEPrivUsed = 0x2,SEPrivFail = 0x3,SESLSet = 0x4,SEMACFail = 0x5,SESubjILFloat = 0x6,SEObjILFloat = 0x7,SEObjILReset = 0x8,SESymLinkUsed = 0x9,};
struct $9D6FB564ED57422FFB268B9144C446E8 {CARD8 type;CARD8 pad00;CARD16 sequenceNumber;CARD8 actions[28];};
struct $9D83F5AC197B6EEDC5264D55D54DC38E {CARD16 oc_opcode;CARD16 oc_length;pexColorType colorType;CARD16 unused;};
struct $9D856B837113E1B9C553BEF8F42066D9 {CARD8 reqType;CARD8 xvReqType;CARD16 length;CARD32 port;CARD32 drawable;CARD32 gc;INT16 vid_x;INT16 vid_y;CARD16 vid_w;CARD16 vid_h;INT16 drw_x;INT16 drw_y;CARD16 drw_w;CARD16 drw_h;};
struct $9D9264AC2C58E1070C07EC2D7CA4D108 {PEXCoord point;PEXColorRGB16 rgb16;unsigned int edge;};
struct $9D9F8CC524C7DD4F9704759512315B2D {String type;Widget widget;ArgList args;Cardinal num_args;};
struct $9DA379BEA803EBF33FD429DDCADF26DD {ulong dl_primitive;ulong dl_dest_addr_length;ulong dl_dest_addr_offset;ulong dl_unix_errno;ulong dl_errno;};
struct $9DC1427BFA5A30405B067C9596620D04 {CARD32 length;CARD16 max_request_len;CARD16 vendor_len;CARD32 release_number;};
struct $9DF5225FB79C7EC3237B4B73EEC9C169 {CARD8 reqType;CARD8 key;CARD16 length;CARD32 grabWindow;CARD16 modifiers;CARD16 pad;};
enum $9E1DF9A61974C4C1C54DE3F5F4FAD665 {XawsmTextSelect = 0x0,XawsmTextExtend = 0x1,};
struct $9E389EF8DB18C75445DC45CE7C2FFB9B {Elf32_Sword d_tag;union $9E389EF8DB18C75445DC45CE7C2FFB9B::$2798575F521600C1E26DD161E22996D8 d_un;};
union $9E389EF8DB18C75445DC45CE7C2FFB9B::$2798575F521600C1E26DD161E22996D8 {Elf32_Word d_val;Elf32_Addr d_ptr;};
struct $9E547439B10E1F44156DCF6309E9ADBF {CARD8 class;CARD8 length;CARD8 num_buttons;BYTE pad1;CARD8 buttons[32];};
struct $9E6A7A2F5B8444BF3F540E884EB664C9 {union $9E6A7A2F5B8444BF3F540E884EB664C9::$1C1E9EA25555F3A04518B10EE9DF4602 u;};
union $9E6A7A2F5B8444BF3F540E884EB664C9::$1C1E9EA25555F3A04518B10EE9DF4602 {struct $::$1C1E9EA25555F3A04518B10EE9DF4602::$CB6A6FBD4AABDC204CA09785462A5EAC u;struct $::$1C1E9EA25555F3A04518B10EE9DF4602::$5BEEE552B0DC6B217341171DE42CA55F videoNotify;struct $::$1C1E9EA25555F3A04518B10EE9DF4602::$FA18AEC49CDA3F922B926DB83731E944 portNotify;};
struct $9E6AFD3F610E739A7AC12834FF3A90B2 {xieTypOrientation fillOrder;xieTypOrientation pixelOrder;CARD8 pixelStride;CARD8 scanlinePad;};
enum $9E6EF2627F09602E7A6BA7313AAD8029 {XmBELL = 0x1,};
struct $9EBEE5732934E798190927254B0CA2D3 {XID class;int length;XID id;int max_symbols;int num_syms_supported;KeySym *syms_supported;};
struct $9EDEC9CDD32BA2E5983B8867B401ABD1 {int numerator;int denominator;};
struct $9F04DD83E3BDF3388BB7A774DEAF06E9 {PEXCoord point;PEXColorRGB rgb;PEXVector normal;};
struct $9F8767F2C6ABC0015F4095E8DC7064F8 {CARD8 reqType;CARD8 opcode;CARD16 length;pexEnumTypeIndex fpFormat;CARD16 strchr;pexPhigsWks wks;CARD32 numCoords;};
struct $9FED812B80655AE33F3AD93E5626D145 {XtGeometryMask request_mode;Position x;Position y;Dimension width;Dimension height;Dimension border_width;Widget sibling;int stack_mode;};
struct $::$1C1E9EA25555F3A04518B10EE9DF4602::$5BEEE552B0DC6B217341171DE42CA55F {BYTE type;BYTE reason;CARD16 sequenceNumber;CARD32 time;CARD32 drawable;CARD32 port;CARD32 padl5;CARD32 padl6;CARD32 padl7;CARD32 padl8;};
struct $::$1C1E9EA25555F3A04518B10EE9DF4602::$CB6A6FBD4AABDC204CA09785462A5EAC {BYTE type;BYTE detail;CARD16 sequenceNumber;};
struct $::$1C1E9EA25555F3A04518B10EE9DF4602::$FA18AEC49CDA3F922B926DB83731E944 {BYTE type;BYTE padb1;CARD16 sequenceNumber;CARD32 time;CARD32 port;CARD32 attribute;INT32 value;CARD32 padl6;CARD32 padl7;CARD32 padl8;};
struct $::$27F2196C01C5C9EEF5AC09572627F38C::$0D3FD1629CBEFCB3E216DB303040F48D {caddr_t val;ulong min_len;ulong max_len;void (*disposal)(void *, int);ulong property;};
struct $::$27F2196C01C5C9EEF5AC09572627F38C::$235C8FBA2DE0C674500C94FFAD6D84EA {caddr_t val;ulong min_size;ulong max_size;void (*disposal)(void *, int);ulong val_size;};
struct $::$27F2196C01C5C9EEF5AC09572627F38C::$754A66FCA3EC32945A92F3755A6D4346 {ulong val;ulong min_val;ulong max_val;void (*disposal)(void *, int);ulong elements;};
struct $::$27F2196C01C5C9EEF5AC09572627F38C::$F5EF242307EFAD87F5BC72EA7929B143 {ulong val;ulong min_val;ulong max_val;ulong unused;ulong property;};
struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$03DD5DCA6449017DC6F7C211FEB78E60 {XieLut lut;};
struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$116BE80B6E09DB698B37E3A3AFF808C9 {XiePhototag src;XieProcessDomain domain;XieMathOp operator;unsigned int band_mask;};
struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$119B7C6B6023A524E6CC33A5E64200BF {XiePhototag src;XieRoi roi;};
struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$25D62B1618370FD1B44908C34C5FF8DC {XiePhototag src;XieProcessDomain domain;XieExportNotify notify;};
struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$334C83914DC2E61A1D14B2F868C0C080 {unsigned int rectangles;};
struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$34447E2805643CBE295B6F6466FFE577 {XiePhototag src;unsigned int width;unsigned int height;float coefficients[6];XieConstant constant;unsigned int band_mask;XieGeometryTechnique sample_tech;XiePointer sample_param;};
struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$3665A6BE36BEC64057D7585B222CAB27 {XiePhototag src1;XiePhototag src2;XieProcessDomain domain;XieConstant constant;XieCompareOp operator;int combine;unsigned int band_mask;};
struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$3C1CE69ED4E7D8CD80724A71703E97D1 {XiePhototag src1;XiePhototag src2;XieConstant src_constant;XiePhototag alpha;float alpha_constant;XieProcessDomain domain;unsigned int band_mask;};
struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$43422FB0CEC5EFAABA4C872DE28592B5 {XiePhototag src;Colormap colormap;XieColorList color_list;int notify;XieColorAllocTechnique color_alloc_tech;XiePointer color_alloc_param;};
struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$48EB0AD06A0E3A0EED8FB89389CC4F15 {XiePhototag src;XieLevels levels;XieConstrainTechnique constrain_tech;XiePointer constrain_param;};
struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$4C00012B5CC2C6089B481585818F1AF6 {XiePhototag src;Drawable drawable;GC gc;int dst_x;int dst_y;};
struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$5623E924A4CAD8B3281CBD447F6D9F5E {XiePhototag src1;XiePhototag src2;XieProcessDomain domain;XieConstant constant;XieArithmeticOp operator;unsigned int band_mask;};
struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$58439DE84D4F3B75FF20C37DCB52D9CE {XieDataClass data_class;XieOrientation band_order;XieLTriplet length;XieLevels levels;};
struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$5A8784420EB85C6574E762430555C212 {XiePhototag src;unsigned int levels;float bias;XieConstant coefficients;};
struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$63C5652A255FDFBF00944E6D58546EA9 {XiePhototag src;XieExportNotify notify;XieEncodeTechnique encode_tech;XiePointer encode_param;};
struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$6C78BD8FB29F0B3892AA21E371D4B37F {XieRoi roi;};
struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$6DA4D20C69AE84CCE6CBAE589B7F141F {XiePhototag src1;XiePhototag src2;XiePhototag src3;};
struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$6E295906D6D694784BD7F69868811658 {XiePhotomap photomap;int notify;};
struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$8830C00DA2FD7D2C1C461EA4AB004769 {XiePhototag src;XiePhotomap photomap;XieEncodeTechnique encode_tech;XiePointer encode_param;};
struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$8BF0A030473096386937960DA70A11C8 {XieDataClass data_class;XieLTriplet width;XieLTriplet height;XieLevels levels;int notify;XieDecodeTechnique decode_tech;XiePointer decode_param;};
struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$9B6147CBAF9717D780DDA7E63FA35D83 {XiePhototag src;XieLut lut;int merge;XieLTriplet start;};
struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$AF246CBD17757EBB8021F6497E7D5EF8 {Drawable drawable;int src_x;int src_y;unsigned int width;unsigned int height;unsigned __int64 fill;unsigned __int64 bit_plane;int notify;};
struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$B0962B86DD5E169933ED7138BAE01787 {XiePhototag src;XieColorspace color_space;XiePointer color_param;};
struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$B59F6BF549B2093775BC11EB9E7A0B6C {unsigned int width;unsigned int height;XieConstant constant;XieTile *tiles;unsigned int tile_count;};
struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$BD68C39BEA56A0C7A9BF9E02BA15F6A8 {XiePhototag src;};
struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$D524E97F465C106D8B2D830B6709FF42 {XiePhototag src;XieLevels levels;unsigned int band_mask;XieDitherTechnique dither_tech;XiePointer dither_param;};
struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$DA4768CA6490F60EB402BA8549A071DF {XiePhototag src;XieProcessDomain domain;XieHistogramShape shape;XiePointer shape_param;};
struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$E951BD98A29E225972C590207876304A {XiePhototag src;XieOrientation band_order;XieExportNotify notify;XieLTriplet start;XieLTriplet length;};
struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$EB0EAD8FD0C9A2A1750B45C61EAC6638 {XiePhototag src1;XiePhototag src2;XieProcessDomain domain;XieConstant constant;int operator;unsigned int band_mask;};
struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$F2B9B11AF5CE8EFB589A785A82FD510E {XiePhototag src;XieExportNotify notify;};
struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$F2F2B62192AB2F6F848D023B568841B1 {XiePhototag src;unsigned int band_number;};
struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$F46A2D467D2EE11D1585EDC2081DA972 {XiePhototag src;XieProcessDomain domain;float *kernel;int kernel_size;unsigned int band_mask;XieConvolveTechnique convolve_tech;XiePointer convolve_param;};
struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$F4EDC7CC740795D2106D398F9B5A18FE {XiePhototag src;XieProcessDomain domain;XiePhototag lut;unsigned int band_mask;};
struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$F9A036E9B3C1F4616D25422F889615FD {Drawable drawable;int src_x;int src_y;unsigned int width;unsigned int height;unsigned __int64 fill;int notify;};
struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$FA3B3AD42FB7CC5DF7C5E4DC4F36D168 {XiePhototag src;Colormap colormap;XieDataClass data_class;unsigned int precision;};
struct $::$3EE7B06A270C04578BB8E913655EF387::$73B7D680272959B17FABABEE500ED8A8 {unsigned __int8 button;unsigned __int8 pad;__int16 x;__int16 y;};
struct $::$3EE7B06A270C04578BB8E913655EF387::$9F305630A89BCB81B98C380477E18E28 {unsigned __int8 buttons;unsigned __int8 pad;__int16 x;__int16 y;};
struct $::$3EE7B06A270C04578BB8E913655EF387::$D059A4519AB20C6AB21F2D2ADEC08E5C {unsigned __int8 key;unsigned __int8 pad;__int16 x;__int16 y;};
struct $::$470D7634D5D71AB942D66F3FF4A3198D::$62965BBFE433B7BED58A83301C6118BB {struct in_addr src;struct in_addr dest;u_short src_port;u_short dest_port;u_char proto;};
struct $::$470D7634D5D71AB942D66F3FF4A3198D::$79FEBD6BF2961C9F1E717E2B927C46A4 {struct in6_addr src;struct in6_addr dest;u_int flowlabel;u_short src_port;u_short dest_port;u_char proto;u_char unused[7];};
struct $::$8EC6181D8B9DD75E93A3F03BDB3AE7B9::$4C6FB0D3D05B024993036982D23BB6FB {u_short X;};
struct $::$8EC6181D8B9DD75E93A3F03BDB3AE7B9::$F9F310ACDF50672F3981321B5F1E4855 {u_char L;u_char H;};
struct $::$A46E883B39A63C4EC4A922C85CF23D6B::$45B314D309058A4EE65C712D679F5776 {xieTypPhotospace nameSpace;CARD32 floID;};
struct $::$A46E883B39A63C4EC4A922C85CF23D6B::$8A0E21D870C19C6340201A4DE96B0898 {CARD32 nameSpace;xieTypPhotoflo floID;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$0211E4E0A7A361B697B4545D8BCDDFDB {int marker_type;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$061FB20684348664DDFEBA1AA0B53223 {int psc_type;PEXPSCData characteristics;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$07CD0E19291CDD9D07F8B2E1B2F7F26A {int strchr;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$07EBA61882DBE1BD552748650F3369B3 {double spacing;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$0B0FE514379F70C0805538897B98D3E2 {PEXCoord origin;PEXCoord offset;unsigned int count;PEXEncodedTextData *encoded_text;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$0E11D43C89F29A3873908CCAE31E9443 {int style;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$0E3878D6394C0832B6C7C61CDB3A0B68 {double width;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$1508DF3E1DE3705BDCA798C585B67F6E {int shape_hint;int ignore_edges;unsigned int count;PEXCoord *points;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$160D7237BFCC7116163618E0243C68A5 {int composition;PEXMatrix transform;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$2081C489A8A523DF06D21B8685AE3FA3 {PEXVector2D vector;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$226200557F05E698789C202324F2C9E8 {int shape_hint;unsigned int facet_attributes;unsigned int vertex_attributes;int color_type;PEXArrayOfFacetData facet_data;unsigned int col_count;unsigned int row_count;PEXArrayOfVertex vertices;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$2723F661DF5C178A1122C59BF686E14A {PEXCoord2D point1;PEXCoord2D point2;unsigned int col_count;unsigned int row_count;PEXTableIndex *color_indices;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$284E75FC49BDDCFCC5EEE97F317C161C {double scale;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$2B8E5C098ACE646E11112CD3CE0BCAAD {int rationality;int uorder;int vorder;float *uknots;float *vknots;unsigned int col_count;unsigned int row_count;PEXArrayOfCoord points;unsigned int curve_count;PEXListOfTrimCurve *trim_curves;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$2BA772D1E0A7F78EDD0A8F8C9B02C070 {PEXCoord point1;PEXCoord point2;PEXCoord point3;unsigned int col_count;unsigned int row_count;PEXTableIndex *color_indices;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$2C24CAE01802F2AC62CF6E363B0D34E7 {int method;double tolerance;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$304D0CF02F21DEA5A6079CE187623BB0 {unsigned int count;PEXCoord2D *points;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$333A3A15141DDE89E0ED45D85955249D {unsigned int count;PEXCoord *points;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$36B4861D739E77E55E066B922A2265A6 {int precision;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$42659D25CB7352E0FB20CF99951D1476 {int op;unsigned int count;PEXHalfSpace *half_spaces;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$46175D2478F989F8BB112B3C833C6934 {__int64 label;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$47101692C522502040C738CF4F411559 {PEXCoord2D origin;PEXCoord2D offset;unsigned int count;PEXEncodedTextData *encoded_text;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$4A81ABAA6690EA5709E641E252FF04FD {PEXCoord point1;PEXCoord point2;PEXCoord point3;unsigned int col_count;unsigned int row_count;int color_type;PEXArrayOfColor colors;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$4B04C3F68F08475DACAE5D57C99EE0AC {int shape_hint;unsigned int facet_attributes;unsigned int vertex_attributes;unsigned int edge_attributes;int contour_hint;int contours_all_one;int color_type;unsigned int set_count;PEXArrayOfFacetData facet_data;unsigned int vertex_count;PEXArrayOfVertex vertices;unsigned int index_count;PEXSwitch *edge_flags;PEXConnectivityData *connectivity;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$4BB0F9D66721BFA9BA08771D7D9A49C9 {PEXStructure structure;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$5072C9968289CE30F56087028DDE74C3 {unsigned int strchr;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$579AE3389BA4D2CFC7E19AC97609B22E {int shape_hint;int ignore_edges;int contour_hint;unsigned int facet_attributes;unsigned int vertex_attributes;int color_type;unsigned int count;PEXFacetData facet_data;PEXListOfVertex *vertex_lists;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$5BD1EB34476C845946834FCCCC5117B1 {int composition;PEXMatrix3x3 transform;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$5CCDE299F18D4FC0523710CC23FF0A21 {PEXMatrix3x3 transform;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$628EDDA3B6349AC1B79276EF33A93B25 {int edge_type;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$647675DF0C666D8E1C0EA033762D37D9 {double expansion;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$65D65A0CC02CF28DF3594B7E3D077A3A {PEXReflectionAttributes attributes;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$6E786597BAC0EA09A7DB2775139266C7 {int shape_hint;int ignore_edges;unsigned int facet_attributes;unsigned int vertex_attributes;int color_type;PEXFacetData facet_data;unsigned int count;PEXArrayOfVertex vertices;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$74218C7218826287EE94DF9EF6BE0F42 {int method;double utolerance;double vtolerance;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$7AAF9EC2F322E71A76FD27F8DEB646FE {int model;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$7B8AF634BCA89047C35D50A9F69A7671 {int rationality;int order;float *knots;unsigned int count;PEXArrayOfCoord points;double tmin;double tmax;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$840FBA41368AEF2B64881263F7A6574C {unsigned __int64 hlhsr_id;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$8AE6CEDB91EFDC12D0ECA08E19BD1920 {unsigned int enable_count;PEXTableIndex *enable;unsigned int disable_count;PEXTableIndex *disable;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$9086F2EF88FD92765D387CC68E4B2FAC {double height;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$963E73514EC2CC394A1F00F1226439AA {unsigned int vertex_attributes;int color_type;unsigned int count;PEXListOfVertex *vertex_lists;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$981A3AE94910FCCB9B7872B58D565283 {PEXMatrix transform;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$999DE591DB5521057EC5FD3EFB8ECDDE {__int64 gdp_id;unsigned int count;PEXCoord2D *points;unsigned __int64 length;char *data;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$9A30DDBC7A812902BB630E66E4F494B2 {int shape_hint;int ignore_edges;int contour_hint;unsigned int count;PEXListOfCoord2D *point_lists;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$9A36196354243FD6D68903F6CD00FA22 {PEXCoord ref_point;PEXVector vector1;PEXVector vector2;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$9B4EDCEF630B8BE304CBC0EFFB312D92 {unsigned __int64 count;PEXName *names;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$A0E42DD09A8A398654BA3B7BBF72F814 {unsigned __int64 attribute;int asf;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$A1A951BBAC7A258F8D3E5CAF44CA13DC {int shape_hint;int ignore_edges;unsigned int count;PEXCoord2D *points;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$B36FC4C29C141D7951F14F1EEFF89B3C {unsigned int facet_attributes;unsigned int vertex_attributes;int color_type;PEXArrayOfFacetData facet_data;unsigned int count;PEXArrayOfVertex vertices;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$B4EA3D09F4D82E6CBD1459ED300DCF74 {unsigned __int64 pick_id;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$B4F62F9D1B398810864CEDBC17CBADE4 {int flag;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$B96A613F1536C198D996C2E4441DCF71 {int mode;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$CD7CAB1E524B79FEA634B2E53CEF566E {int length;char *data;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$CE51DDD1EF277EE1E81BBF7435453E8D {PEXCoord origin;PEXVector vector1;PEXVector vector2;unsigned int count;PEXEncodedTextData *encoded_text;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$D4775485B13497D55C4F339E01923D43 {double width;double height;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$D8EF4F335967B6AFDF8B62D6AF4EC97A {int halignment;int valignment;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$D92D218FCBA7D099D9D00CBA4297A9EB {int line_type;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$E0C4DA393A0950219C5F1F288D11C3BF {__int64 id;int length;char *data;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$E41C7850E50367D77D929A2CB97C69D9 {PEXCoord2D ref_point;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$E46FF02D5E2EFC1AA963D5679DC55369 {int shape_hint;int ignore_edges;int contour_hint;unsigned int count;PEXListOfCoord *point_lists;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$ED09EDC4CBF61A696C6DC7A61219022F {int color_type;PEXColor color;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$EE80A4EE4E89D4C8BD20C41B452C0266 {int path;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$F02FB4C016F3C9B1A38F0C69DFC1432E {int op;unsigned int count;PEXHalfSpace2D *half_spaces;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$F052BBDC33769DFE7204C99C9F1C03B7 {__int64 gdp_id;unsigned int count;PEXCoord *points;unsigned __int64 length;char *data;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$F09B918875B219F4FF9F459C40A35182 {PEXCoord2D origin;unsigned int count;PEXEncodedTextData *encoded_text;};
struct $::$D05FC820B70C6DD4085C13BA0A0FB353::$F55F5F1BBE43504FA60225D395271D24 {int method;};
struct $::_OldXSizeHints::$CDF557A927ED2BFF93B09908D4EFCA76 {int x;int y;};
struct $A02A59C49A68940E162F3D6545A6687B {CARD8 error;CARD8 code;CARD16 sequenceNum;CARD32 floID;CARD16 minorOpcode;CARD8 majorOpcode;CARD8 floErrorCode;CARD32 nameSpace;xieTypPhototag phototag;CARD16 type;CARD32 resourceID;CARD8 pad[8];};
struct $A06AF73261543B69A785AD9B5C737D11 {int depth;int bits_per_pixel;int scanline_pad;};
struct $A0776C2A9657CE88DE35474E3085EF5B {XieInterleave interleave;XieOrientation band_order;int up_sample;};
enum $A07DB15FC3F9C76A4500090AF467BC3A {XawactionStart = 0x0,XawactionAdjust = 0x1,XawactionEnd = 0x2,};
struct $A084E1F86B6372FCC6C14CDE4263A0F0 {CARD8 reqType;CARD8 opcode;CARD16 length;pexEnumTypeIndex fpFormat;CARD16 itemMask;pexStructure sid;};
struct $A0A2823B84FDBEE4258EE638566D3DD8 {unsigned int msg_simple;msg_size_t msg_size;int msg_type;port_t msg_local_port;port_t msg_remote_port;int msg_id;};
struct $A0C7E3A5A810FD3BF4087852A9D616F8 {int type;unsigned __int64 serial;int send_event;Display *display;Window event;Window window;};
struct $A139F5C23E4C0799A30BDE721D46880D {CARD8 event;CARD8 bandNumber;CARD16 sequenceNum;CARD32 time;CARD32 instanceNameSpace;CARD32 instanceFloID;xieTypPhototag src;CARD16 type;CARD32 data0;CARD32 data1;CARD32 data2;};
struct $A145BC600EED1A472B5CFB66AAA6D9D9 {Boolean always_install_accelerators;XmGeoCreateProc geo_matrix_create;XmFocusMovedProc focus_moved_proc;XtPointer extension;};
struct $A1765675892D2506ACB61835FEF0F776 {CARD8 reqType;CARD8 opcode;CARD16 length;pexEnumTypeIndex fpFormat;CARD16 unused;pexRenderer rdr;pexBitmask itemMask;};
enum $A1D044C5C6C9A35768D52A463A253A1B {VPS_OPEN = 0x0,VPS_CLOSE = 0x1,VPS_MAP = 0x2,};
struct $A1D5C74DF8765FD9CC260A09F6DD3C34 {CARD16 oc_opcode;CARD16 oc_length;CARD16 path;CARD16 pad;};
struct $A1E1C4876F7B4B8EFD713F49F668C581 {BOOL needsParam;xieTypTechniqueGroup group;CARD16 number;CARD8 speed;CARD8 nameLength;CARD16 pad;};
struct $A1E1CD086B71954ED0C94A8A26B6C32D {xieTypFloat matrix00;xieTypFloat matrix01;xieTypFloat matrix02;xieTypFloat matrix10;xieTypFloat matrix11;xieTypFloat matrix12;xieTypFloat matrix20;xieTypFloat matrix21;xieTypFloat matrix22;xieTypWhiteAdjustTechnique whiteAdjusted;CARD16 lenWhiteParams;xieTypGamutTechnique gamutCompress;CARD16 lenGamutParams;};
struct $A1E5AB63EF81B7775B1479667B4E6AE4 {PEXDeviceCoord min;PEXDeviceCoord max;PEXSwitch use_drawable;unsigned __int8 reserved[3];};
struct $A1F6453E7DD120CA7ED5711A4386CED6 {ulong dl_primitive;ulong dl_dest_addr_length;ulong dl_dest_addr_offset;ulong dl_qos_length;ulong dl_qos_offset;ulong dl_growth;};
struct $A1FF3E4A410D43047E8695E29D7CC7B1 {int reason;XEvent *event;int value;};
struct $A20792E4BC1C181E68916B2D92A9B2C9 {pexEnumTypeIndex pickType;CARD16 unused;};
struct $A225CBB957C38A09A08E4BE4D4316542 {CARD16 oc_opcode;CARD16 oc_length;pexStructure id;};
struct $A23F2D0A331F720D631E2B6171CC3ECA {CARD8 reqType;BYTE pad;CARD16 length;CARD32 id;};
struct $A27389B7F44473FD8046F73BDABEA635 {xieTypOrientation encodedOrder;BOOL radiometric;BOOL uncompressed;CARD8 pad;};
struct $A27B2EF13B029B6AC017266492BED372 {CARD8 reqType;BYTE pad;CARD16 length;INT16 timeout;INT16 interval;BYTE preferBlank;BYTE allowExpose;CARD16 pad2;};
struct $A294230BF0A95EA495C5F77EDF28DA69 {_SHORT icfixed;_SHORT dcfixed;_SHORT Insert_character;_SHORT Delete_character;_SHORT Cursor_home;_SHORT Cursor_to_ll;_SHORT Cursor_left;_SHORT Cursor_right;_SHORT Cursor_down;_SHORT Cursor_up;_SHORT Carriage_return;_SHORT Tab;_SHORT Back_tab;_SHORT Clr_eol;_SHORT Clr_bol;_SHORT Parm_ich;_SHORT Parm_dch;_SHORT Parm_left_cursor;_SHORT Parm_up_cursor;_SHORT Parm_down_cursor;_SHORT Parm_right_cursor;_SHORT Cursor_address;_SHORT Row_address;};
struct $A2980305BF6C068125012765295EC449 {PEXCoord2D lower_left;PEXCoord2D upper_right;PEXCoord2D concat_point;};
struct $A2FB221EC01549407EDCF016C4C0632F {CARD8 repType;CARD8 RepType;CARD16 sequenceNumber;CARD32 length;CARD8 status;BYTE pad1;BYTE pad2;BYTE pad3;CARD32 pad01;CARD32 pad02;CARD32 pad03;CARD32 pad04;CARD32 pad05;};
struct $A35F2E1A5E531ECFC152E2BA15F78A6A {BYTE type;BOOL globalAutoRepeat;CARD16 sequenceNumber;CARD32 length;CARD32 ledMask;CARD8 keyClickPercent;CARD8 bellPercent;CARD16 bellPitch;CARD16 bellDuration;CARD16 pad;BYTE map[32];};
enum $A3665E69DB87D7B6ED44928954CD85F4 {IcePoAuthHaveReply = 0x0,IcePoAuthRejected = 0x1,IcePoAuthFailed = 0x2,IcePoAuthDoneCleanup = 0x3,};
struct $A386896A7A6A8667CB6DAB8066B01EA8 {int min_width;int min_height;int max_width;int max_height;int width_inc;int height_inc;};
struct $A38AB1DC10BE37D6B74E3A62DF3167E7 {CARD16 elemType;CARD16 elemLength;CARD16 numTiles;CARD16 pad;CARD32 width;CARD32 height;xieTypFloat constant0;xieTypFloat constant1;xieTypFloat constant2;};
struct $A392485AEA3A70CB744C42CEA40D73D1 {CARD8 reqType;CARD8 opcode;CARD16 length;pexPhigsWks wks;pexPickMeasure pm;pexEnumTypeIndex devType;CARD16 pad;};
struct $A3A52DF93420AAFEDBDE6964318C6B0E {XtCallbackList callbacks;Boolean international;};
enum $A3E7C5F72761EBC037D2D2A236AE02A1 {XawtextRead = 0x0,XawtextAppend = 0x1,XawtextEdit = 0x2,};
struct $A400BCBF43F87F2088946A887ADD242F {BYTE type;CARD8 nExtensions;CARD16 sequenceNumber;CARD32 length;};
struct $A40644D2F1A87C4812B9EB1F4A779BAC {unsigned __int16 count;unsigned __int16 *shorts;};
struct $A467143AA6DED7F9A689DDE9D5460EF6 {int length;SmPointer value;};
struct $A47B1BB0C7BE6B3A30FDB4F7B0959433 {char state;__int16 dx;__int16 dy;char bytcnt;};
struct $A47C75AE74EA14FC2F54815F4A8813BA {String type;Widget widget;XtWidgetGeometry *request;XtWidgetGeometry *reply;XtGeometryResult result;};
struct $A494F9C2DF2ABFE05D86DEF6DF3E823A {unsigned __int16 count;PEXNameSetPair *pairs;};
enum $A4C507EE3209778ECF0B9DDC8BD963BA {INACTIVE_MEM = 0x0,INITING_MEM = 0x1,TESTING_MEM = 0x2,BAD_MEM = 0x3,};
struct $A4DBC252F7392490EC4C7D58273D4CD1 {CARD8 reqType;CARD8 securityReqType;CARD16 length;CARD16 majorVersion;CARD16 minorVersion;};
struct $A4EF4A77E40471EF410BD1BFBD9E090A {BYTE type;BYTE detail;CARD16 sequenceNumber;CARD32 time;CARD32 root;CARD32 event;CARD32 child;INT16 root_x;INT16 root_y;INT16 event_x;INT16 event_y;KeyButMask state;BOOL same_screen;CARD8 deviceid;};
struct $A4FCA5194E85EFF54308206891FEE164 {CARD8 reqType;CARD8 opcode;CARD16 length;CARD32 id;};
struct $A545D31055C82AF5215FB86F909CA367 {CARD8 reqType;BYTE num_resolutions;CARD16 length;};
struct $A556726339174AF4A052C1DB3ED032E6 {__int16 r;__int16 g;__int16 b;};
struct $A55E8F963C5B6AC40AFF9FD81070CC8F {BYTE type;BYTE deviceid;CARD16 sequenceNumber;CARD32 time;CARD8 num_keys;CARD8 num_buttons;CARD8 num_valuators;CARD8 classes_reported;CARD8 buttons[4];CARD8 keys[4];INT32 valuator0;INT32 valuator1;INT32 valuator2;};
struct $A56011F2097EBD62321318BF15F58404 {__int16 screen;__int16 control;};
struct $A56827FA99728A529A1C213E34F0D83D {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD32 time;CARD8 mode;CARD8 deviceid;BYTE pad1;BYTE pad2;};
struct $A572CE7E5663FCA9F137B2D1D40B04E1 {void_function func;BYTE *data;};
struct $A59C8FA6101490B6FA0BAC9DC8127B03 {CARD8 reqType;CARD8 opcode;CARD16 length;pexEnumTypeIndex fpFormat;CARD16 unused1;pexPhigsWks wks;pexTableIndex strchr;CARD16 unused2;CARD16 clipFlags;CARD16 unused3;PEXFLOAT clipLimits_xmin;PEXFLOAT clipLimits_ymin;PEXFLOAT clipLimits_zmin;PEXFLOAT clipLimits_xmax;PEXFLOAT clipLimits_ymax;PEXFLOAT clipLimits_zmax;pexMatrix view_orientation;pexMatrix view_mapping;};
struct $A643C6B696305ADD15FAF1E413BF0072 {__int16 type;PEXPSCData psc;};
struct $A64E5FDBC99443F3D6ECB2BCB6D30607 {unsigned __int8 *value;Atom encoding;int format;unsigned __int64 nitems;};
struct $A64F8D3D6B191631532ACB24F2A67271 {unsigned __int64 count;PEXPostedStructure *structures;};
struct $A6524737EEF8C4DE9F2A62890C064223 {CorePart core;CompositePart composite;ShellPart shell;WMShellPart wm;VendorShellPart vendor;TopLevelShellPart topLevel;};
struct $A66634CAD7B95962E094A16D3D5C00F3 {int process_type;};
struct $A72D5FE34FE1565D7A5E27361D12995E {CARD8 reqType;CARD8 opcode;CARD16 length;};
struct $A773303EC658E8007585349DBF7CB2DA {struct controller *ctlr;char protocol[40];char unitnm[16];u_int remoteid;u_int unit;};
struct $A7F47A749AAF3AD66E1BEA6C9E8ABB9D {CARD16 oc_opcode;CARD16 oc_length;pexColorType colorType;CARD16 unused;PEXFLOAT point1_x;PEXFLOAT point1_y;PEXFLOAT point1_z;PEXFLOAT point2_x;PEXFLOAT point2_y;PEXFLOAT point2_z;PEXFLOAT point3_x;PEXFLOAT point3_y;PEXFLOAT point3_z;CARD32 dx;CARD32 dy;};
enum $A829E30ADE25BA100BED3372F6628FC3 {CLUCALL_SUCCESS = 0x0,CLUCALL_DLOPEN = 0x1,CLUCALL_DLSYM = 0x2,CLUCALL_NOTCONFIG = 0x3,};
struct $A88F82F3855C63B78A51C35CB747714F {Modifiers mod;char *key;char *action;};
struct $A8C26958E47A670C8BA111DF3C373603 {xieTypOrientation encodedOrder;BOOL alignEol;BOOL radiometric;BOOL uncompressed;CARD32 kFactor;};
enum $A8D0F53DAD5F2C5279C43A82FD30866F {XmABOVE = 0x0,XmBELOW = 0x1,};
struct $A8F356DBB4E9B212C01AA7944686DAC0 {pexEnumTypeIndex lightType;INT16 unused1;PEXFLOAT direction_x;PEXFLOAT direction_y;PEXFLOAT direction_z;PEXFLOAT point_x;PEXFLOAT point_y;PEXFLOAT point_z;PEXFLOAT concentration;PEXFLOAT spreadAngle;PEXFLOAT attenuation1;PEXFLOAT attenuation2;pexColorType lightColorType;CARD16 unused2;};
struct $A93EAEE21B7814F89C1FE7A8D7922196 {Pixel fg;Pixel bg;Pixel ts;Pixel bs;Pixel sc;};
struct $A9429A734A24E6AA93342D0A902F5447 {CARD8 event;xieTypPhotofloOutcome outcome;CARD16 sequenceNum;CARD32 time;CARD32 instanceNameSpace;CARD32 instanceFloID;CARD8 pad[16];};
struct $A94EB43F2838EBEBCA936AD6F7EBA6B5 {RECORD_RANGE8 coreRequests;RECORD_RANGE8 coreReplies;RECORD_EXTRANGE extRequests;RECORD_EXTRANGE extReplies;RECORD_RANGE8 deliveredEvents;RECORD_RANGE8 deviceEvents;RECORD_RANGE8 errors;BOOL clientStarted;BOOL clientDied;};
struct $A99853248DDDD96578ECD8091E72BC6E {__int64 flags;Window wmWindow;};
struct $AA0B1CFBEDD820C1AEF4E3D97A4389C7 {int type;unsigned __int64 serial;int send_event;Display *display;XSyncAlarm alarm;XSyncValue counter_value;XSyncValue alarm_value;Time time;XSyncAlarmState state;};
struct $AA1A19B97C4266B2BC3AEB2743D64DB3 {XmTextPosition position;Atom target;Time time;int num_chars;int ref_count;};
struct $AA36C8E7DB8AA2A0E49686543A793549 {BYTE type;CARD8 what;CARD16 sequenceNumber;CARD32 length;CARD32 unused;CARD32 numCoords;BYTE pad[16];};
union $AA6CFCD35600EC0D1F51E6E9EC73AC89 {unsigned __int64 val;const void *ptr;};
struct $AA853AB1DC093FD89B72D7BCF384FA3A {coff_addr r_offset;coff_uint r_info;coff_int r_addend;};
struct $AAA5532226BFEC93AB8B8FBABECEF692 {XID class;int length;XID id;int resolution;int minVal;int maxVal;};
struct $AAC926B0114B176D0DFEF021CC145D64 {CARD16 oc_opcode;CARD16 oc_length;pexEnumTypeIndex model;CARD16 pad;};
struct $AACB5CE1DD77EC8BA8E6E904FB4AFD30 {__int16 screen;__int16 device_number;};
struct $AAD257271AAA9A190B14D3482C45D035 {CARD8 reqType;CARD8 recordReqType;CARD16 length;CARD16 majorVersion;CARD16 minorVersion;};
enum $AADEBA943FF3A93C50619AA4AE6B36F1 {TCNTL_FILT_TABLE_IP4_WF = 0x0,TCNTL_FILT_TABLE_IP4_PORT = 0x1,TCNTL_FILT_TABLE_IP6_FLOW = 0x2,TCNTL_FILT_TABLE_IP4_WF_RX = 0x3,TCNTL_FILT_TABLE_IP4_PORT_RX = 0x4,TCNTL_FILT_TABLE_IP6_FLOW_RX = 0x5,TCNTL_FILT_TABLE_LAST = 0x6,};
struct $AAE697DBB680FA56FA0287F43EBE48E2 {ulong_t flags;uint_t cachesize;uint_t psize;int lorder;size_t reclen;uchar_t bval;char *bfname;};
struct $AAEBCAB8890427597964C9E75891DEB7 {__int16 screen;ws_monitor monitor_type;};
struct $AAECD496E21460385AB9540869BF9C78 {Elf32_Addr r_offset;Elf32_Word r_info;Elf32_Sword r_addend;};
union $AB1F85878E44D1F7A7EC5BB0A3FA30DB {PEXPDNPCHitVolume volume;PEXPDDCHitBox box;PEXPickDataRecord data;};
struct $AB255CA75AAFC751F0AA636C79A973EF {__int16 device_number;ws_keycode_modifiers *modifiers;unsigned int *keysyms;unsigned __int8 *keycodes;};
struct $AB75B6B8BFB14D364765DCBD336CD019 {XtCallbackList grip_action;};
struct $ABA396D28A226614C54536A344D671C2 {ulong dl_primitive;ulong dl_correlation;ulong dl_src_addr_length;ulong dl_src_addr_offset;};
struct $ABE60368F0168DDE4E32B527D5287C6B {CARD8 reqType;CARD8 dpmsReqType;CARD16 length;CARD16 level;CARD16 pad0;};
struct $ABF6181591815B38C95F565E639E1EE0 {XRecordClientSpec client;unsigned __int64 nranges;XRecordRange **ranges;};
struct $AC2DF2923031B514585E1A7E5D8CF6A3 {pexTableIndex strchr;CARD16 unused1;CARD16 clipFlags;CARD16 unused2;PEXFLOAT clipLimits_xmin;PEXFLOAT clipLimits_ymin;PEXFLOAT clipLimits_zmin;PEXFLOAT clipLimits_xmax;PEXFLOAT clipLimits_ymax;PEXFLOAT clipLimits_zmax;pexMatrix orientation;pexMatrix mapping;};
struct $AC30A779F0124870026B9E7625809E9B {SYMR asym;unsigned int reserved;coff_int ifd;};
struct $AC5C9E6D1F0E0913CA2851FF4338E565 {CARD16 elemType;CARD16 elemLength;BOOL notify;xieTypDataClass class;CARD16 pad;CARD32 width0;CARD32 width1;CARD32 width2;CARD32 height0;CARD32 height1;CARD32 height2;CARD32 levels0;CARD32 levels1;CARD32 levels2;xieTypDecodeTechnique decodeTechnique;CARD16 lenParams;};
struct $AC652D9067E774D123652036D02EB90E {unsigned __int16 count;PEXTableIndex *views;};
struct $AC76AD227EAB8DE7D81601D384404B42 {coff_uint c_index;};
struct $AC7EE4B12331F0F59BD217F1B47E10FC {__int16 screen;int int86;X86_REG A;X86_REG B;X86_REG C;X86_REG D;u_short SP;u_short BP;u_short SI;u_short DI;u_short CS;u_short DS;u_short SS;u_short ES;u_short flags;u_short IP;u_int pad1;};
struct $AC93509FFB6B9C1B98C9154A5D973C79 {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD32 grabWindow;CARD16 modifiers;CARD8 modifier_device;CARD8 button;CARD8 grabbed_device;BYTE pad1;BYTE pad2;BYTE pad3;};
struct $AC9491411C1381EE1D3534B37CEC23E4 {unsigned __int64 first_glyph;unsigned __int64 last_glyph;unsigned __int64 default_glyph;int all_exist;int stroke;unsigned __int16 count;PEXFontProp *props;};
struct $ACA20A28C2E2C5341712D35B9B2BDC2C {Boolean echo;Boolean display_nonprinting;GC normgc;GC invgc;GC xorgc;Pixmap insertCursorOn;XawTextInsertState laststate;__int16 cursor_x;__int16 cursor_y;XFontSet fontset;};
struct $ACF034D5104D0F5B8D12F5FF38C4FBA5 {xieTypOrientation encodedOrder;BOOL normal;BOOL radiometric;CARD8 pad;};
struct $AD58CDA99C93F34C31A743157D5C3E5C {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD8 xaxis;CARD8 yaxis;CARD8 deviceid;BYTE pad1;};
struct $AD6358E986BFA8D7843831D8D238B4B5 {ulong dl_primitive;ulong dl_max_sdu;ulong dl_min_sdu;ulong dl_addr_length;ulong dl_mac_type;ulong dl_reserved;ulong dl_current_state;__int64 dl_sap_length;ulong dl_service_mode;ulong dl_qos_length;ulong dl_qos_offset;ulong dl_qos_range_length;ulong dl_qos_range_offset;ulong dl_provider_style;ulong dl_addr_offset;ulong dl_version;ulong dl_brdcst_addr_length;ulong dl_brdcst_addr_offset;ulong dl_growth;};
struct $AD6EAC895D1A3B8A33A2B5BDA8B88753 {XExtData *ext_data;struct _XPrivate *private1;int fd;int private2;int proto_major_version;int proto_minor_version;char *vendor;XID private3;XID private4;XID private5;int private6;XID (*resource_alloc)();int byte_order;int bitmap_unit;int bitmap_pad;int bitmap_bit_order;int nformats;ScreenFormat *pixmap_format;int private8;int release;struct _XPrivate *private9;struct _XPrivate *private10;int qlen;unsigned __int64 last_request_read;unsigned __int64 request;XPointer private11;XPointer private12;XPointer private13;XPointer private14;unsigned int max_request_size;struct _XrmHashBucketRec *db;int (*private15)();char *display_name;int default_screen;int nscreens;Screen *screens;unsigned __int64 motion_buffer;unsigned __int64 private16;int min_keycode;int max_keycode;XPointer private17;XPointer private18;int private19;char *xdefaults;};
struct $AD97566547E5F77323709B4B3562439C {CARD16 elemType;CARD16 elemLength;xieTypPhototag src;CARD8 bandNumber;CARD8 pad;};
struct $ADE7CE5A9629DB6098454FD49D8B8476 {PEXSwitch visibility;unsigned __int8 reserved;unsigned __int16 order;PEXCoordType rationality;PEXEnumTypeIndex approx_method;float tolerance;float tmin;float tmax;PEXListOfFloat knots;unsigned __int16 count;PEXArrayOfCoord control_points;};
struct $AE9E187A01B4028B24F1B3B575111C79 {PEXEnumTypeIndex strchr;char *descriptor;};
enum $AEA1FBBE7726CEC77267A27B4B646D95 {XmSINGLE_SELECT = 0x0,XmMULTIPLE_SELECT = 0x1,XmEXTENDED_SELECT = 0x2,XmBROWSE_SELECT = 0x3,};
enum $AEEDBE257A0664EDA892534EE275891B {XawtextWrapNever = 0x0,XawtextWrapLine = 0x1,XawtextWrapWord = 0x2,};
struct $AF5FB4080A51E8992C2DCC85F9B13FAA {CARD8 header;CARD8 keycode;CARD16 delay_time;};
struct $AF66E5B05A2313DCCC13207016396621 {XtCallbackList activate_callback;XtCallbackList cascade_callback;Widget submenu;Pixmap cascade_pixmap;int map_delay;Boolean armed;XRectangle cascade_rect;XtIntervalId timer;Pixmap armed_pixmap;};
struct $AFFAACB4BEFEB7AAFDD2F11710DDB870 {BYTE type;CARD8 what;CARD16 sequenceNumber;CARD32 length;CARD32 lengthFontInfo;CARD8 pad[20];};
struct $B0016BD267CD063743F8025D1EF2F885 {CARD8 reqType;CARD8 opcode;CARD16 length;pexEnumTypeIndex fpFormat;pexEnumTypeIndex method;pexRenderer rdr;CARD32 drawable;CARD32 pickMaxHits;};
struct $B011A326D3A42EEEADED9F4719276A90 {unsigned __int8 red;unsigned __int8 green;unsigned __int8 blue;unsigned __int8 reserved;};
struct $B13117368063F44AF47DD7A9B3CFBB2F {CARD8 reqType;CARD8 opcode;CARD16 length;pexRenderer rdr;CARD32 drawable;pexStructure sid;};
struct $B14254D28BF0250FBBF3FE8FC6D3C393 {unsigned __int64 sequence_of_request;int major_opcode_of_request;int minor_opcode_of_request;IcePointer reply;};
struct $B1675587FF9CAEC4430A5BA2877852BF {XieLevels levels;float luma_red;float luma_green;float luma_blue;XieConstant bias;};
struct $B16FC8566897364FB8F68A61B8D500EB {CARD8 type;CARD8 pad0;CARD16 sequenceNumber;CARD32 length;CARD16 majorVersion;CARD16 minorVersion;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct $B17A026830C769E803D493B7F2598A70 {BYTE type;BYTE request;CARD16 sequenceNumber;CARD32 length;fsTimestamp timestamp;CARD8 major_opcode;CARD8 minor_opcode;CARD16 pad;fsBitmapFormat format;};
enum $B182F73AE0810C509E52E7A5D6327869 {XmEXPLICIT = 0x0,XmPOINTER = 0x1,};
struct $B1BB4607B75CFFBC9D91E675F4E88C61 {Widget parent;Widget *children;Cardinal num_children;Cardinal num_slots;};
union $B20031452D9C70A13D819C8DDA3A0BA9 {xGenericReply generic;xGetGeometryReply geom;xQueryTreeReply tree;xInternAtomReply atom;xGetAtomNameReply atomName;xGetPropertyReply property;xListPropertiesReply listProperties;xGetSelectionOwnerReply selection;xGrabPointerReply grabPointer;xGrabKeyboardReply grabKeyboard;xQueryPointerReply pointer;xGetMotionEventsReply motionEvents;xTranslateCoordsReply coords;xGetInputFocusReply inputFocus;xQueryTextExtentsReply textExtents;xListFontsReply fonts;xGetFontPathReply fontPath;xGetImageReply image;xListInstalledColormapsReply colormaps;xAllocColorReply allocColor;xAllocNamedColorReply allocNamedColor;xAllocColorCellsReply colorCells;xAllocColorPlanesReply colorPlanes;xQueryColorsReply colors;xLookupColorReply lookupColor;xQueryBestSizeReply bestSize;xQueryExtensionReply extension;xListExtensionsReply extensions;xSetModifierMappingReply setModifierMapping;xGetModifierMappingReply getModifierMapping;xSetPointerMappingReply setPointerMapping;xGetKeyboardMappingReply getKeyboardMapping;xGetPointerMappingReply getPointerMapping;xGetPointerControlReply pointerControl;xGetScreenSaverReply screenSaver;xListHostsReply hosts;xError error;xEvent event;};
struct $B20AD2F0BD1721D150AA087D56307684 {CARD16 textFontIndex;CARD16 textPrecision;PEXFLOAT charExpansion;PEXFLOAT charSpacing;pexColorType textColorType;CARD16 unused;};
enum $B20E073856E03551C4B45F4AB360DDE0 {XmALIGNMENT_BASELINE_TOP = 0x0,XmALIGNMENT_BASELINE_BOTTOM = 0x2,XmALIGNMENT_WIDGET_TOP = 0x3,XmALIGNMENT_WIDGET_BOTTOM = 0x4,};
struct $B2802A53FD56D8ACC9A4AC03015C713C {CARD8 reqType;CARD8 opcode;CARD16 length;CARD32 drawableExample;pexLookupTable lut;pexTableType tableType;CARD16 unused;};
struct $B29B9FE84B7739E1FA46EBF1C4FF2A7F {char *class;XrmClass xrm_class;int argc;char **argv;};
struct $B29BCE60366642B331908CB2277C4399 {CARD16 oc_opcode;CARD16 oc_length;pexEnumTypeIndex approxMethod;CARD16 unused;PEXFLOAT tolerance;};
enum $B2A44DC877B17F2021CE46A73658A10E {DB_BTREE = 0x0,DB_HASH = 0x1,DB_RECNO = 0x2,};
struct $B2D1347A7314B3F7BD8A6C26E40DE0B3 {BYTE type;BYTE deviceid;CARD16 sequenceNumber;CARD8 keys[28];};
struct $B32090F8F7240FC94A31BFF29291E0A4 {Atom name;unsigned __int64 value;};
struct $B36C03EE0DB03800CDBEDA1CF8CFFD5F {XExtData *ext_data;Font fid;unsigned int direction;unsigned int min_char_or_byte2;unsigned int max_char_or_byte2;unsigned int min_byte1;unsigned int max_byte1;int all_chars_exist;unsigned int default_char;int n_properties;XFontProp *properties;XCharStruct min_bounds;XCharStruct max_bounds;XCharStruct *per_char;int ascent;int descent;};
struct $B3807A7E298580816B8893D27A6B40D0 {XEventClass event_type;XID device;};
struct $B38E47E0523AE2397AD97CE90D3CF30A {XieLevels levels;float luma_red;float luma_green;float luma_blue;float scale;XieGamutTechnique gamut_tech;XiePointer gamut_param;};
struct $B39098462B639082E0671084A834106B {INT16 approxType;INT16 approxModel;CARD16 max1;CARD16 max2;CARD16 max3;CARD8 dither;CARD8 unused;CARD32 mult1;CARD32 mult2;CARD32 mult3;PEXFLOAT weight1;PEXFLOAT weight2;PEXFLOAT weight3;CARD32 basePixel;};
struct $B39400A659C1078B091D331E19541038 {BYTE type;BOOL pad1;CARD16 sequence_number;CARD32 length;CARD32 app_group;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct $B3D91B724481B367826B30A56EC102CC {INT16 position_x;INT16 position_y;PEXFLOAT distance;};
enum $B3EE7E070A91A7478A9093983E000B1C {XmDESTROY = 0x0,XmUNMAP = 0x1,XmDO_NOTHING = 0x2,};
struct $B4B73E7BD388D94F4601F616B0AE9AD3 {CARD8 reqType;CARD8 opcode;CARD16 length;pexEnumTypeIndex fpFormat;pexEnumTypeIndex method;pexRenderer rdr;CARD32 drawable;INT32 sid;};
struct $B4BB359F5FD4B795B03A0EF6AA6F9BE6 {coff_uint st_name;coff_uint reserved;coff_addr st_value;coff_uint st_size;coff_ubyte st_info;coff_ubyte st_other;coff_ushort st_shndx;};
struct $B4C1C2BF3CBDE8391A1A91801C77FE53 {BYTE type;CARD8 what;CARD16 sequenceNumber;CARD32 length;CARD16 status;CARD16 tableType;BYTE pad[20];};
struct $B4F2C86EC2AFA3B90E8AE0EA0F71367B {CARD8 reqType;BYTE pad;CARD16 length;};
struct $B4FA891B630887EC538EB91F019A9C2C {CARD8 state_flags[2];CARD16 pad0;XETrapCfg config;CARD32 pad1;};
struct $B511218BDE8923632D5391031F827DC7 {int type;unsigned __int64 serial;int send_event;Display *display;Window event;Window window;int x;int y;int width;int height;int border_width;Window above;int override_redirect;};
enum $B539734676A04848B68060D6D483E0A0 {XIMTextType = 0x0,XIMBitmapType = 0x1,};
struct $B5463EC62BF92F8298BCB7B7274FD8F4 {unsigned int preference;};
struct $B551B8E75181E5CEB472A1448B118F87 {int (*getcolval)(_LC_collate_t *, unsigned int *, unsigned int, const char *, int);};
struct $B56F5A956E40882BF4E2B48AE1B509C2 {Window window;unsigned __int64 event_mask;int buffer_index;int side;};
struct $B5792B8FF616BF2DDED6AE0C91064772 {PEXCoord point;PEXColorRGB16 rgb16;PEXVector normal;};
struct $B584FC37E760C222478B879BC253DCF4 {int function;unsigned __int64 plane_mask;unsigned __int64 foreground;unsigned __int64 background;int line_width;int line_style;int cap_style;int join_style;int fill_style;int fill_rule;int arc_mode;Pixmap tile;Pixmap stipple;int ts_x_origin;int ts_y_origin;Font font;int subwindow_mode;int graphics_exposures;int clip_x_origin;int clip_y_origin;Pixmap clip_mask;int dash_offset;char dashes;};
struct $B5C17C29786A1BB82FE488E3D86A8C43 {size_t gl_pathc;char **gl_pathv;size_t gl_offs;void *gl_padr;void *gl_ptx;};
struct $B5C5FFF84FB7F3832F5458E87FB3817C {BYTE type;CARD8 what;CARD16 sequenceNumber;CARD32 length;pexDynamicType viewRep;pexDynamicType markerBundle;pexDynamicType textBundle;pexDynamicType lineBundle;pexDynamicType interiorBundle;pexDynamicType edgeBundle;pexDynamicType colorTable;pexDynamicType patternTable;pexDynamicType wksTransform;pexDynamicType highlightFilter;pexDynamicType invisibilityFilter;pexDynamicType HlhsrMode;pexDynamicType structureModify;pexDynamicType postStructure;pexDynamicType unpostStructure;pexDynamicType deleteStructure;pexDynamicType referenceModify;pexDynamicType bufferModify;pexDynamicType lightTable;pexDynamicType depthCueTable;pexDynamicType colorApproxTable;CARD8 pad[3];};
struct $B5CF7BA2901ABDB4A7D5E18D4AD5B79B {CARD16 elemType;CARD16 elemLength;xieTypPhototag src;CARD16 pad;xieTypConvertToRGBTechnique convert;CARD16 lenParams;};
struct $B5E8E02F7A52D99CF4C865E96F59C543 {CARD8 reqType;CARD8 xvReqType;CARD16 length;CARD32 port;CARD32 attribute;INT32 value;};
struct $B61CB2720769E6DAC3F14C3B2E6265E6 {__int16 x;__int16 y;float z;};
enum $B64C39E2ADABB22C50C1D912F1D253CC {XIMIsInvisible = 0x0,XIMIsPrimary = 0x1,XIMIsSecondary = 0x2,};
struct $B661844E4DD166A431053E2B2F63C927 {char *_sends;__int16 _keyval;};
struct $B6A8EBEB815553007114A887B4B2E7C6 {ulong dl_primitive;ulong dl_resp_addr_length;ulong dl_resp_addr_offset;ulong dl_qos_length;ulong dl_qos_offset;ulong dl_growth;};
struct $B6C2B50A2126E272B3960EB4DC4F6604 {BYTE type;CARD8 pad0;CARD16 sequenceNumber;CARD32 length;BOOL capable;CARD8 pad1;CARD16 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct $B71EADFB06BE795E36436A7CA877F388 {__int64 r[1];};
struct $B73E16D481CC06015184D41F6368AD16 {CARD32 value;CARD32 count;};
struct $B73EDC06E5F96D72A248778E8B0A1933 {Dimension margin;unsigned __int8 orientation;unsigned __int8 separator_type;GC separator_GC;};
struct $B76BD181BFDAF7E9381A1626C6C45722 {CARD8 reqType;CARD8 depth;CARD16 length;CARD32 wid;CARD32 parent;INT16 x;INT16 y;CARD16 width;CARD16 height;CARD16 borderWidth;CARD16 class;CARD32 visual;CARD32 mask;};
enum $B78841CC15384C7642A852FC286464A6 {false = 0x0,true = 0x1,};
struct $B801AC14F91E36208C367A2BD41CD62B {int type;Display *display;unsigned __int64 flo_id;unsigned __int64 serial;unsigned __int8 error_code;unsigned __int8 request_code;unsigned __int8 minor_code;unsigned int flo_error_code;unsigned __int64 name_space;XiePhototag phototag;unsigned int elem_type;XID resource_id;};
struct $B8300209D9D4BFB558086C2A72800CC2 {CARD16 oc_opcode;CARD16 oc_length;PEXFLOAT origin_x;PEXFLOAT origin_y;PEXFLOAT origin_z;PEXFLOAT offset_x;PEXFLOAT offset_y;PEXFLOAT offset_z;CARD16 numEncodings;CARD16 unused;};
struct $B8340C644CDB6E95F3781F01B22F6B41 {BYTE type;CARD8 num_catalogues;CARD16 sequenceNumber;CARD32 length;};
struct $B874138C81AAAC24C65D5B7A6CAE0C97 {ulong dl_primitive;ulong dl_subs_sap_offset;ulong dl_subs_sap_len;};
struct $B88A4CA2F1F645428AB97EBD99B32A47 {CARD8 reqType;CARD8 minor_opcode;CARD16 length;CARD32 pad;};
struct $B8BE427FC8694D49638950F9AF5F05C2 {CARD8 majorOpcode;CARD8 minorOpcode;CARD8 success;CARD8 unused;CARD32 length;};
struct $B8C9ABBC5E5586E5AEF8CC874FEDB1BE {CARD8 reqType;CARD8 opcode;CARD16 length;pexStructure sid;CARD16 position1_whence;CARD16 unused1;INT32 position1_offset;CARD16 position2_whence;CARD16 unused2;INT32 position2_offset;};
struct $B8D4EC0F2109AB37F43A2670CB214DE3 {char **_a0;int _offset;};
struct $B91987CD365E539796DE78D87241D671 {unsigned __int8 class;unsigned __int8 length;unsigned __int8 num_valuators;unsigned __int8 mode;int valuators[6];};
struct $B936D129F4E3C4271617856E3E287966 {char *name;unsigned int mask;};
struct $B97998A4C74A35781EC5FBA5E3D13B33 {CARD16 oc_opcode;CARD16 oc_length;pexEnumTypeIndex polylineInterp;CARD16 pad;};
enum $B9867847443BB25721460208505189B7 {XtCallbackNoList = 0x0,XtCallbackHasNone = 0x1,XtCallbackHasSome = 0x2,};
enum $B9B1E3761F7AC9C80FCB354FC1070F12 {SmcClosedNow = 0x0,SmcClosedASAP = 0x1,SmcConnectionInUse = 0x2,};
struct $B9DE48622BE1A30E91ED1262299F48A0 {CARD8 class;CARD8 id;CARD16 length;INT32 int_to_display;};
struct $B9E3AF8662A601EE31B872B99C1BC9C5 {int reason;XEvent *event;Boolean doit;__int64 currInsert;__int64 newInsert;__int64 startPos;__int64 endPos;XmTextBlockWcs text;};
struct $BA021C9E98B12E79B733DF8F1A0CE5B1 {CARD16 elemType;CARD16 elemLength;xieTypPhototag src;CARD16 pad;xieTypPhotomap photomap;xieTypEncodeTechnique encodeTechnique;CARD16 lenParams;};
struct $BA1C9873524F37DFA28FC6E8B2A0BC7B {int x;int y;int width;int height;int border_width;Window sibling;int stack_mode;};
struct $BA3BC151FA826CD0885676DC609737ED {int type;unsigned __int64 serial;int send_event;Display *display;Window window;int mode;int detail;};
struct $BA4C9A7C8B0DBB286EB1091873441956 {CARD8 reqType;CARD8 opcode;CARD16 length;pexPhigsWks wks;pexEnumTypeIndex displayUpdate;CARD16 pad;};
struct $BACF50A2794925434A2FB058E0438A94 {char char1;char char2;__int16 result;};
struct $BB279EA07E8836E412716D1B8B41E21D {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD8 deviceid;CARD8 numKeyPerModifier;CARD16 pad1;};
struct $BBDCCFC8AD59C4B5263DC5763E93416D {__int16 screen;};
struct $BBE89DCF5B2B5370EBA03B3532FF6AB9 {unsigned __int8 left_pad[3];XieOrientation fill_order;unsigned __int8 pixel_stride[3];XieOrientation pixel_order;unsigned __int8 scanline_pad[3];XieOrientation band_order;XieInterleave interleave;};
enum $BBF51B68E199C550B4BD602DD9A27574 {XawtextResizeNever = 0x0,XawtextResizeWidth = 0x1,XawtextResizeHeight = 0x2,XawtextResizeBoth = 0x3,};
struct $BC0C03DE100E0ADBA9BE7AF77D01715A {CARD8 reqType;BYTE pad;CARD16 length;CARD32 srcWid;CARD32 dstWid;INT16 srcX;INT16 srcY;};
enum $BC1225400C03E76ABCA8FB74177B074B {XmHIGHLIGHT_NORMAL = 0x0,XmHIGHLIGHT_SELECTED = 0x1,XmHIGHLIGHT_SECONDARY_SELECTED = 0x2,};
struct $BC21E3DCA2DEF6CD8EB07ED07E074597 {CARD8 majorOpcode;CARD8 minorOpcode;CARD8 status;CARD8 unused;CARD32 length;};
struct $BC5DA2CDBFE0FD6DC6B7A0DA7456A2F1 {int type;unsigned __int64 serial;int send_event;Display *display;unsigned __int64 name_space;Time time;unsigned __int64 flo_id;XiePhototag src;unsigned int elem_type;Window window;int x;int y;unsigned int width;unsigned int height;};
struct $BC9F0C0545087BE05760F1130ACADBAF {unsigned __int64 pc;pRUNTIME_FUNCTION functionTable;CONTEXT originating_context;exc_address establisher_frame;unsigned __int64 collide_info;PCONTEXT current_context;unsigned __int64 magic;unsigned __int64 reserved5;};
struct $BCAE7384F079FDFA9DD5F4EFBAB29817 {CARD8 majorOpcode;CARD8 minorOpcode;CARD8 unused1[2];CARD32 length;CARD16 authDataLength;CARD8 unused2[6];};
struct $BCBC142657F91A737E770A1501BA1906 {int fappend;pCFDR pcfd;pFDR pfd;int cfd;int cfdMax;pSYMR psym;pEXTR pext;int cext;int cextMax;char *pssext;__int64 cbssext;__int64 cbssextMax;pAUXU paux;char *pss;pDNR pdn;int cdn;int cdnMax;pOPTR popt;pLINER pline;pRFDT prfd;pPDR ppd;int flags;int fswap;HDRR hdr;};
enum $BCBFBEF9B4DBDCBDB019F39924A8EC6D {XmWORK_AREA = 0x0,XmMENU_BAR = 0x1,XmMENU_PULLDOWN = 0x2,XmMENU_POPUP = 0x3,XmMENU_OPTION = 0x4,};
struct $BCDE0020825236A8F8A72B60AFA7374C {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD16 control;CARD8 deviceid;BYTE pad0;};
struct $BD0CD7113069CF1296E061F976B1B743 {CARD8 reqType;CARD8 data;CARD16 length;CARD32 maxNames;CARD16 nbytes;CARD16 pad2;};
struct $BD2C716F10DB95031F526D8F604B25D1 {CARD8 modify;CARD8 pad[3];};
struct $BD577CFD808EB4E77A4E3752FBFBD993 {XSyncTrigger trigger;XSyncValue delta;int events;XSyncAlarmState state;};
struct $BD619B2F7AFF7BA6F06506AA27210664 {regoff_t rm_so;regoff_t rm_eo;};
enum $BD94187AB2581C6A16F17507A67D7799 {XmRESIZE_NONE = 0x0,XmRESIZE_GROW = 0x1,XmRESIZE_ANY = 0x2,};
struct $BD96F4C520841110C237EF8D06FD9BEE {int his_opcode;int my_opcode;int his_version_index;int my_version_index;char *his_vendor;char *his_release;char my_auth_index;IcePointer my_auth_state;int must_authenticate;};
struct $BDA7F7EC09C455D172B8FEBDBF052954 {CARD8 class;CARD8 id;CARD16 length;};
struct $BDC2BC4E1FC4E3665C531F87A904F1CB {BYTE type;BYTE deviceid;CARD16 sequenceNumber;CARD32 time;CARD8 request;BYTE pad1;BYTE pad2;BYTE pad3;CARD32 pad00;CARD32 pad01;CARD32 pad02;CARD32 pad03;CARD32 pad04;};
struct $BDC81D2701FE6C6C5F306559378E29B0 {BYTE type;CARD8 what;CARD16 sequenceNumber;CARD32 length;CARD16 viewIndex;CARD16 unused;CARD32 numCoords;BYTE pad[16];};
struct $BDD53916B9F6E52421B422566B0D5D70 {BYTE type;CARD8 what;CARD16 sequenceNumber;CARD32 rdr;BYTE pad[24];};
enum $BE043CC66BC9A68312F52FD64117B1F0 {XmCACHE_EXTENSION = 0x1,XmDESKTOP_EXTENSION = 0x2,XmSHELL_EXTENSION = 0x3,XmPROTOCOL_EXTENSION = 0x4,XmDEFAULT_EXTENSION = 0x5,};
struct $BE58583FCD7344D2421A54A7E98FFEA4 {union $BE58583FCD7344D2421A54A7E98FFEA4::$A46E883B39A63C4EC4A922C85CF23D6B u;};
union $BE58583FCD7344D2421A54A7E98FFEA4::$A46E883B39A63C4EC4A922C85CF23D6B {struct $::$A46E883B39A63C4EC4A922C85CF23D6B::$45B314D309058A4EE65C712D679F5776 immed;struct $::$A46E883B39A63C4EC4A922C85CF23D6B::$8A0E21D870C19C6340201A4DE96B0898 stored;};
struct $BE87D764618B07893DE67EDA20AE5310 {INT32 value_mask;INT32 iconify_pixmap;INT32 icon_box_x;INT32 icon_box_y;INT32 tiled;INT32 sticky;INT32 no_iconify_button;INT32 no_lower_button;INT32 no_resize_button;};
struct $BE90B4AC206CC1F52CC4D15D587652C4 {CARD8 min_char_high;CARD8 min_char_low;CARD8 max_char_high;CARD8 max_char_low;};
struct $BE99E8C6AA65192BABFBDCE9E4A9EC98 {int type;Display *display;unsigned __int64 flo_id;unsigned __int64 serial;unsigned __int8 error_code;unsigned __int8 request_code;unsigned __int8 minor_code;unsigned int flo_error_code;unsigned __int64 name_space;XiePhototag phototag;unsigned int elem_type;XiePhototag domain_src;};
struct $BEA3E970906BDE5578391186783FC521 {int extension;int major_opcode;int first_event;int first_error;};
struct $BEAFA497989C37845B506D0913AA8541 {caddr_t acl_attr[3];lock_data_t secattr_lock;int ref_count;int flag;};
struct $BEC1EAA441431C411FB6095FD63B6F3B {__int16 bottom;__int16 right;__int16 left;__int16 top;};
struct $BF0D31C48B8F0690903112E729B5439D {unsigned __int16 count;PEXHalfSpace *half_spaces;};
struct $BF14F8B1DC989B7C10F8F8C5A8AFBAFB {PEXCoord point;PEXColorRGB16 rgb16;PEXVector normal;unsigned int edge;};
struct $BF288F93331E061F3C0A4EDE42918C22 {CARD16 oc_opcode;CARD16 oc_length;pexSwitch onoff;BYTE pad[3];};
enum $BF80F9984B1E4861D7CC4C2F234406C0 {SPEC_ACTION_RAISE = 0x0,SPEC_ACTION_IGNORE = 0x1,SPEC_ACTION_CALL_HANDLER = 0x2,SPEC_ACTION_INITIALIZE = 0x3,SPEC_FAULT_IGNORE = 0x4,SPEC_FAULT_RAISE = 0x5,SPEC_ACTION_INITIALIZE_FB_FIXUP = 0x6,};
struct $BFB970BD49ED9B406D7CBF54A76D57DD {int key_click_percent;int bell_percent;int bell_pitch;int bell_duration;int led;int led_mode;int key;int auto_repeat_mode;};
struct $BFFD79EDBD15B54973AE71A15D9BA72D {int type;unsigned __int64 serial;int send_event;Display *display;Window window;int kind;int x;int y;unsigned int width;unsigned int height;Time time;int shaped;};
struct $C00C0DA83216725D22F9B6B75E95FFE0 {CARD8 type;CARD8 data;CARD16 sequenceNum;CARD32 length;CARD16 majorVersion;CARD16 minorVersion;xieTypServiceClass serviceClass;xieTypAlignment alignment;CARD16 unconstrainedMantissa;INT32 unconstrainedMaxExp;INT32 unconstrainedMinExp;CARD8 pad2[8];};
struct $C01B768C719C076F1885128ECB0E2F3B {CARD16 elemType;CARD16 elemLength;xieTypPhototag src;xieTypDataClass class;CARD8 precision;CARD32 colormap;};
struct $C08104BD47142265B42A3F745A07258E {CARD8 leftPad[3];xieTypOrientation fillOrder;CARD8 pixelStride[3];xieTypOrientation pixelOrder;CARD8 scanlinePad[3];xieTypOrientation bandOrder;xieTypInterleave interleave;CARD8 pad[3];};
struct $C08EB97F95DBE201B07D804A019DEBC7 {XID class;int length;XID id;};
struct $C090E207437B9AD10DF8C9251F56A5C3 {BYTE type;CARD8 what;CARD16 sequenceNumber;CARD32 length;CARD32 numNames;BYTE pad[20];};
struct $C091F8996EF5667AFF510FF5B2E0143E {char *vendor;char *release;int version_count;IcePoVersionRec *version_recs;int auth_count;char **auth_names;IcePoAuthProc *auth_procs;IceIOErrorProc io_error_proc;};
struct $C091FE37BE48B57F0C9CC52C5BCAFCD1 {int offset_x;int offset_y;XiePhototag phototag;};
struct $C0CF6D5FED3C9B9727D7B5E4FF32FB5D {XmDisplayGetDisplayProc GetDisplay;XtPointer extension;};
struct $C0DFA4F5A1F13C29E08CE65D1EE1C98E {XieLevels levels;float luma_red;float luma_green;float luma_blue;float scale;};
struct $C0DFFD4AC779B92FFB10B5245DFA6449 {String menu_name;};
struct $C16308A46254792F555119C61B977CA2 {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD16 control;CARD8 deviceid;BYTE pad2;};
struct $C19E6F380814408DFD31968534DDA3C5 {CARD8 reqType;BYTE pad;CARD16 length;INT16 accelNum;INT16 accelDenum;INT16 threshold;BOOL doAccel;BOOL doThresh;};
struct $C1A851173DD816DDF7F0E0D062CEFEE2 {CARD8 reqType;BYTE pad;CARD16 length;CARD32 cursor;CARD32 time;CARD16 eventMask;CARD16 pad2;};
struct $C1B4A013CC5F946450FAD8622ABE0A9E {wchar_t *wcsptr;int length;};
struct $C1BC45A60F843B4624B9FAA35BF87512 {CARD32 requests[256];CARD32 events[7];CARD32 pad;};
struct $C1D1DCE5A0B9F389C9FAA487FACA5708 {CARD16 elemType;CARD16 elemLength;xieTypPhototag src;BOOL notify;CARD8 pad;CARD32 colormap;xieTypColorList colorList;xieTypColorAllocTechnique colorAlloc;CARD16 lenParams;};
struct $C201FB0F2222C07B40D490F1CBB06D58 {BYTE type;BYTE ScreenCount;CARD16 sequenceNumber;CARD32 length;CARD32 window;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
enum $C25EDA2AFA4331EE1194B950D24C90A5 {XSyncAlarmActive = 0x0,XSyncAlarmInactive = 0x1,XSyncAlarmDestroyed = 0x2,};
struct $C27349E911C05D67A3CDE5223EF63BE9 {char foo;};
struct $C277BFB7EDBCB4B16FDC5D70401A7F72 {xieTypFloat constant0;xieTypFloat constant1;xieTypFloat constant2;};
struct $C2A18E44A509FAD040F54243FD2340D8 {XETrapHeader hdr;union $C2A18E44A509FAD040F54243FD2340D8::$778EFE577D72BDC72296C1BA4B0B2E9A u;};
union $C2A18E44A509FAD040F54243FD2340D8::$778EFE577D72BDC72296C1BA4B0B2E9A {xEvent event;xResourceReq req;xGenericReply reply;};
struct $C2A8757161DECB1C750354EA1474746B {coff_addr g_index;};
union $C2AC089C8A0A3EEE32541B34B8446472 {int _preempt[2];__int64 _preempt_long;};
struct $C2BA31F69307069900F0490354E56872 {unsigned int timeout;unsigned int trust_level;XID group;__int64 event_mask;};
struct $C3050A07FC68EF0DFEC519C70DF21366 {INT16 x;INT16 y;PEXFLOAT z;};
struct $C30FF1240D2A8075F6967DECC9305E3F {BYTE type;CARD8 drawDirection;CARD16 sequenceNumber;CARD32 length;INT16 fontAscent;INT16 fontDescent;INT16 overallAscent;INT16 overallDescent;INT32 overallWidth;INT32 overallLeft;INT32 overallRight;CARD32 pad;};
struct $C321E20701936BDF5E3979B890BB8411 {BYTE type;CARD8 what;CARD16 sequenceNumber;CARD32 length;CARD16 tableType;CARD16 unused;CARD32 numEntries;BYTE pad[16];};
struct $C32D75228195D08F6D42072DC87ED14F {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;BOOL present;CARD8 major_opcode;CARD8 first_event;CARD8 first_error;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct $C4CC29E7084D77F4FCDCDB27F0EDE2A2 {PEXNameSet inclusion;PEXNameSet exclusion;};
struct $C4D830AACD6CA9C030EA39190076ECCB {String name;XtArgVal value;};
struct $C4DC01CDDDF5A53B120EAA56060806A9 {struct $C4DC01CDDDF5A53B120EAA56060806A9::$EAF5EEBD71EE8006EF9C111F1CEF53E0 save_yourself;struct $C4DC01CDDDF5A53B120EAA56060806A9::$E2AA81D64E46956BF76D69C9998515AC die;struct $C4DC01CDDDF5A53B120EAA56060806A9::$864F4118F25B9F87A90D9A329FD28BAF save_complete;struct $C4DC01CDDDF5A53B120EAA56060806A9::$EBB8E7C0FA976B86CC5F6009BBD5451F shutdown_cancelled;};
struct $C4DC01CDDDF5A53B120EAA56060806A9::$864F4118F25B9F87A90D9A329FD28BAF {SmcSaveCompleteProc callback;SmPointer client_data;};
struct $C4DC01CDDDF5A53B120EAA56060806A9::$E2AA81D64E46956BF76D69C9998515AC {SmcDieProc callback;SmPointer client_data;};
struct $C4DC01CDDDF5A53B120EAA56060806A9::$EAF5EEBD71EE8006EF9C111F1CEF53E0 {SmcSaveYourselfProc callback;SmPointer client_data;};
struct $C4DC01CDDDF5A53B120EAA56060806A9::$EBB8E7C0FA976B86CC5F6009BBD5451F {SmcShutdownCancelledProc callback;SmPointer client_data;};
struct $C501B637C9D373C8193961C468F52341 {CARD16 elemType;CARD16 elemLength;CARD32 drawable;INT16 srcX;INT16 srcY;CARD16 width;CARD16 height;CARD32 fill;BOOL notify;CARD8 pad[3];};
struct $C525EC60A2238B39F1BB586D029D6BB4 {float mean;float sigma;};
struct $C57BD7F5DCE57DB37ADE21A2BF85D666 {XieOrientation encoded_order;int normal;int radiometric;};
struct $C5BFDD7B5C2A1BD26A0FB255FC0EFDAC {XieInterleave interleave;XieOrientation band_order;unsigned __int8 predictor[3];char *table;unsigned int table_size;};
enum $C5F64CB5D867F350BA974582962FEC30 {XmUNPOST = 0x0,XmUNPOST_AND_REPLAY = 0x1,};
struct $C600AE186EDCEC66CF8E0A4837161E56 {CARD8 reqType;CARD8 opcode;CARD16 length;pexRenderer rdr;CARD32 numElRefs;};
struct $C61F878E5DD6D9A462D542BE0FF7BC7F {ulong dl_primitive;ulong dl_reason;ulong dl_correlation;};
struct $C625268042D4F371D3219D96CB6FA81E {CARD8 reqType;CARD8 opcode;CARD16 length;pexStructure sid;INT32 label1;INT32 label2;};
struct $C62BD96E3AD00AC0AC34EE73241191B1 {CARD16 oc_opcode;CARD16 oc_length;pexEnumTypeIndex approxMethod;CARD16 unused;PEXFLOAT uTolerance;PEXFLOAT vTolerance;};
struct $C65DFB72B3FBEEE777E9E71274DF712D {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD16 nProperties;CARD16 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct $C6945E03756C0EFF0E3D4BF179417A01 {XETrapRepHdr hdr;XETrapGetVersRep data;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;};
struct $C6A406722EA2D83639EB3FB477FE133D {String label;int vert_space;Pixmap left_bitmap;Pixmap right_bitmap;Dimension left_margin;Dimension right_margin;Pixel foreground;XFontStruct *font;XFontSet fontset;XtJustify justify;Boolean set_values_area_cleared;GC norm_gc;GC rev_gc;GC norm_gray_gc;GC invert_gc;Dimension left_bitmap_width;Dimension left_bitmap_height;Dimension right_bitmap_width;Dimension right_bitmap_height;};
struct $C6B80DDC7E014D805232C0BED8F85FC6 {XieConstant input_low;XieConstant input_high;XieLTriplet output_low;XieLTriplet output_high;};
enum $C6DE0E8AF8221E8B7722BED8F4800537 {XtListHead = 0x0,XtListTail = 0x1,};
struct $C6DF17FEFDED3C62C035491F44E93B01 {int dd_fd;__int64 dd_loc;__int64 dd_size;char *dd_buf;int dd_bufsiz;int dd_len;__int64 dd_seek;void *dd_lock;};
struct $C735D198080D0544DA6E87E89A47BA62 {CARD16 elemType;CARD16 elemLength;xieTypPhototag src;xieTypPhototag lut;INT32 domainOffsetX;INT32 domainOffsetY;xieTypPhototag domainPhototag;CARD8 bandMask;CARD8 pad;};
struct $C7406CB336B739A87F2A2E6FB42BC742 {CARD8 reqType;CARD8 flags;CARD16 length;CARD32 cmap;CARD32 pixel;CARD16 nbytes;BYTE pad1;BYTE pad2;};
struct $C772EEB8BDF2D9B03BC2113DCD14FF9B {Elf32_Addr r_offset;Elf32_Word r_info;};
struct $C785CF6C4EEFEB89ECBC9FAC0351909D {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD8 deviceid;CARD8 map_length;BYTE pad1;BYTE pad2;};
enum $C7AEFA5450A6E3B6EAAFAEEC8106EDCC {XmAS_NEEDED = 0x1,};
struct $C7E0EF91B036783D288945FBDA519E2F {CARD16 oc_opcode;CARD16 oc_length;CARD16 shape;pexSwitch ignoreEdges;CARD8 pad;};
struct $C8022F0EE9A6B1EF592F16F71323721F {XmString directory;XmString pattern;Widget dir_list_label;XmString dir_list_label_string;Widget dir_list;XmString *dir_list_items;int dir_list_item_count;int dir_list_selected_item_position;Widget filter_label;XmString filter_label_string;Widget filter_text;XmString dir_mask;XmString no_match_string;XmQualifyProc qualify_search_data_proc;XmSearchProc dir_search_proc;XmSearchProc file_search_proc;unsigned __int8 file_type_mask;Boolean list_updated;Boolean directory_valid;unsigned __int8 state_flags;};
struct $C8A40039767768A6490F61C7EA87ECA9 {__int64 dl_disc_prob;__int64 dl_reset_prob;};
struct $C8EFCC306AECCBEA533C2EEC8A587562 {caddr_t (*init_cursor_handle)();int (*load_cursor)();int (*recolor_cursor)();int (*set_cursor_position)();int (*cursor_on_off)();caddr_t cursor_handle;int (*cursor_private)();};
struct $C8FFDA76EF0ACB060AB87BF45E0F0EB8 {PEXCoord point;PEXColorCIE cie;};
enum $C9547D9B9E214CE5EBD681A7EEC38B08 {IceProtocolSetupSuccess = 0x0,IceProtocolSetupFailure = 0x1,IceProtocolSetupIOError = 0x2,IceProtocolAlreadyActive = 0x3,};
struct $C9F171AE0A278C39B483C218A7E93882 {PEXStructure structure;unsigned __int64 offset;};
struct $CA1B8E85F8BC45E89F5EAEE3872ACCE2 {XieMatrix matrix;XieWhiteAdjustTechnique white_adjust_tech;XiePointer white_adjust_param;XieGamutTechnique gamut_tech;XiePointer gamut_param;};
struct $CA1CD5B08005403884A7641019451813 {__int16 x;__int16 y;unsigned __int16 width;unsigned __int16 height;};
struct $CA24C908E5A10E126A873BEF1204E884 {unsigned __int64 blkHLimit;unsigned __int64 blkSLimit;unsigned __int64 fileHLimit;unsigned __int64 fileSLimit;int reserved1;int reserved2;int reserved3;int reserved4;int reserved5;int reserved6;int reserved7;int reserved8;};
enum $CAA3FD00411B0A7D7F1344282CDE0D9F {XtJustifyLeft = 0x0,XtJustifyCenter = 0x1,XtJustifyRight = 0x2,};
struct $CB0632EF2409CFA4902D18F029698548 {CARD32 visualID;CARD8 class;CARD8 bitsPerRGB;CARD16 colormapEntries;CARD32 redMask;CARD32 greenMask;CARD32 blueMask;CARD32 pad;};
struct $CB41E086A121ACADA0862E42B6739E9A {int hardware_type;int axis_count;caddr_t keyboard_handle;char *name;int (*ioctl)();void (*init_keyboard)();void (*reset_keyboard)();void (*enable_keyboard)();void (*disable_keyboard)();int (*set_keyboard_control)();void (*get_keyboard_info)();void (*ring_bell)();void (*process_keyboard_event)();void (*process_keyboard_char)(caddr_t, unsigned __int16);ws_keyboard_control control;ws_keyboard_definition *definition;ws_keycode_modifiers *modifiers;unsigned int *keysyms;unsigned __int8 *keycodes;int (*keyboard_private)();caddr_t private1;caddr_t private2;int unused;};
enum $CB86C33E4C099BDD4888D4811E9329EE {XmDRAG_NONE = 0x0,XmDRAG_DROP_ONLY = 0x1,XmDRAG_PREFER_PREREGISTER = 0x2,XmDRAG_PREREGISTER = 0x3,XmDRAG_PREFER_DYNAMIC = 0x4,XmDRAG_DYNAMIC = 0x5,XmDRAG_PREFER_RECEIVER = 0x6,};
struct $CB86ED79A67F464A5E5DD7E35915D8C3 {char *option;char *specifier;XrmOptionKind argKind;XPointer value;};
enum $CB8A8D6C0EBCF16D23EA6CE4962585C1 {XmN_OF_MANY = 0x1,XmONE_OF_MANY = 0x2,};
struct $CBA5F02AFFC4EA4A3305BB276E7E8CDE {CARD16 red;CARD16 green;CARD16 blue;CARD16 pad;};
struct $CC029EE2801424412B933EF9795F5046 {union $CC029EE2801424412B933EF9795F5046::$199E9548C3C848AC2EFDDFCE03257421 spec;unsigned __int64 pixel;XcmsColorFormat format;};
union $CC029EE2801424412B933EF9795F5046::$199E9548C3C848AC2EFDDFCE03257421 {XcmsRGB RGB;XcmsRGBi RGBi;XcmsCIEXYZ CIEXYZ;XcmsCIEuvY CIEuvY;XcmsCIExyY CIExyY;XcmsCIELab CIELab;XcmsCIELuv CIELuv;XcmsTekHVC TekHVC;XcmsPad Pad;};
struct $CC08BA722D5B00BE9609FAC7D5A48382 {CARD8 reqType;CARD8 opcode;CARD16 length;pexEnumTypeIndex fpFormat;CARD16 unused;pexLookupTable lut;pexTableIndex start;CARD16 count;};
struct $CC1BC89F17F8E2D162EA4A62A1B63DC5 {int type;unsigned __int64 serial;int send_event;Display *display;Window window;int state;};
struct $CC1DD6906528A61FFED82CA68DCDB091 {EQTime time;ws_event *events;int size;volatile int head;volatile int tail;int event_size;ws_motion_buffer *mb;};
struct $CC5173B0475A2B9BC22526AA70E33964 {PEXCoord point;PEXVector normal;unsigned int edge;};
struct $CC78F669F0DBA968A431F75955111B70 {PEXCoord point;PEXColorRGB rgb;PEXVector normal;unsigned int edge;};
struct $CC9CB7E336EEB9C8B38770A3248C8F6D {CARD16 elemType;CARD16 elemLength;xieTypPhototag src;CARD16 pad;CARD32 levels;xieTypFloat bias;xieTypFloat constant0;xieTypFloat constant1;xieTypFloat constant2;};
struct $CCAEDA52B750854C25441FD25B4DA915 {XcmsFloat L_star;XcmsFloat a_star;XcmsFloat b_star;};
struct $CCAFB83A0FC0BF591DA5D736B6BAF8AE {INT16 left;INT16 right;INT16 width;INT16 ascent;INT16 descent;CARD16 attributes;};
struct $CCD8519E9DA348E05183A0C5A6B0F051 {int type;Display *display;XSyncAlarm alarm;unsigned __int64 serial;unsigned __int8 error_code;unsigned __int8 request_code;unsigned __int8 minor_code;};
struct $CDF16A86A8F26461BBAB0EFF6BD548DC {pexStructure structure;CARD32 offset;};
struct $CDF557A927ED2BFF93B09908D4EFCA76 {int x;int y;};
struct $CE2CC21A8DF6496E4E3BA1994C658522 {XSyncTrigger trigger;XSyncValue event_threshold;};
struct $CE366FE051068AE4B5DAF48358622BF9 {XID class;int length;XID id;int click;int percent;int pitch;int duration;int led_mask;int led_value;int key;int auto_repeat_mode;};
struct $CE4F591F9E1174A1F540D4577FAC94EA {__int16 word_flag;union $CE4F591F9E1174A1F540D4577FAC94EA::$8EC6181D8B9DD75E93A3F03BDB3AE7B9 reg;};
union $CE4F591F9E1174A1F540D4577FAC94EA::$8EC6181D8B9DD75E93A3F03BDB3AE7B9 {struct $::$8EC6181D8B9DD75E93A3F03BDB3AE7B9::$F9F310ACDF50672F3981321B5F1E4855 b;struct $::$8EC6181D8B9DD75E93A3F03BDB3AE7B9::$4C6FB0D3D05B024993036982D23BB6FB w;};
struct $CE6D7C2E7A4B6B8EE3CC26E1C4C11797 {CARD16 oc_opcode;CARD16 oc_length;PEXFLOAT point_x;PEXFLOAT point_y;};
struct $CE866585EA90BEF8E1777B84F5242003 {CARD8 high;CARD8 low;};
struct $CEAAF0C10A18AB001F583EF77F84C96A {int depth;int type;Visual *visual;};
struct $CEBF0A3380E34CA7D192D32F0B21F5A4 {Cardinal depth;Pixmap pixmap;Dimension width;Dimension height;Pixmap mask;Position hot_x;Position hot_y;Position offset_x;Position offset_y;unsigned __int8 attachment;Boolean isDirty;Region region;Region restore_region;Position x_offset;Position y_offset;};
struct $CED7C2589F0C077CAC0462AE73D32A26 {Widget parent;XawImPart im;XawIcPart ic;};
struct $CF21BF511DA95282A30B8B98D36704FA {CARD8 reqType;CARD8 opcode;CARD16 length;pexStructure sid;CARD16 pathOrder;CARD16 unused;CARD32 pathDepth;};
struct $CF91FEEC29390B2E3A7754517937B585 {XID device_id;int num_classes;XInputClass *data;};
struct $CFC98DDC8C48D7D4D5B40C9CE62D3BBC {CorePart core;CompositePart composite;ShellPart shell;WMShellPart wm;VendorShellPart vendor;TopLevelShellPart topLevel;ApplicationShellPart application;};
struct $CFD68B7ADBC82BE7EABF4FDEA780590F {CARD8 repType;CARD8 RepType;CARD16 sequenceNumber;CARD32 length;CARD16 major_version;CARD16 minor_version;BOOL present;CARD8 pad1;CARD8 pad2;CARD8 pad3;CARD32 pad01;CARD32 pad02;CARD32 pad03;CARD32 pad04;};
struct $D02EAB9A83A44F8B7E99D2C5E0BC2BB4 {CARD8 reqType;CARD8 opcode;CARD16 length;pexRenderer rdr;pexStructure sid;};
struct $D0301171F0D4E221BC2F6A2BDD984AC3 {PEXCoord point;PEXColorIndexed strchr;PEXVector normal;unsigned int edge;};
enum $D06503B10BF0E4ACB2E829F55AF9893F {XmLABEL_FONTLIST = 0x1,XmBUTTON_FONTLIST = 0x2,XmTEXT_FONTLIST = 0x3,};
struct $D08E3E427138D596819F8CEF4AEF4F32 {char *vendor;char *release;int version_count;IcePaVersionRec *version_recs;IceProtocolSetupProc protocol_setup_proc;IceProtocolActivateProc protocol_activate_proc;int auth_count;char **auth_names;IcePaAuthProc *auth_procs;IceHostBasedAuthProc host_based_auth_proc;IceIOErrorProc io_error_proc;};
struct $D0A230E2822E6F114388A4393E99A918 {CARD8 repType;CARD8 RepType;CARD16 sequenceNumber;CARD32 length;CARD8 numKeyPerModifier;CARD8 pad0;CARD16 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct $D0B9E86B5121D9CE10E8E5EE9BDD9E9B {PEXFLOAT xmin;PEXFLOAT ymin;PEXFLOAT zmin;PEXFLOAT xmax;PEXFLOAT ymax;PEXFLOAT zmax;};
struct $D0BF9774D4A82986A5A63FCC2C6E5647 {XtCallbackProc list_callback;XtPointer extension;};
struct $D0F4880E5E163BC8F27E9DD5F5B3C82C {CARD8 reqType;CARD8 opcode;CARD16 length;xieTypPhotoflo floID;};
struct $D0F732F65C44B5672B29FFE38726918A {CARD32 base_id;CARD16 name_size;CARD16 num_ports;CARD16 num_formats;CARD8 type;CARD8 pad;};
struct $D0FB49A2660D0A12B9EC6B30D71AC69A {ulong dl_primitive;ulong dl_correlation;ulong dl_dest_addr_length;ulong dl_dest_addr_offset;ulong dl_src_addr_length;ulong dl_src_addr_offset;ulong dl_priority;ulong dl_service_class;};
union $D12D45534FBF49378D3CA75A3BE2DA71 {unsigned __int64 integer;float flt_point;};
struct $D14CA9F2C40E9D75D49C7FD5AB893FCE {CARD16 elemType;CARD16 elemLength;xieTypPhototag src;CARD16 pad;INT32 domainOffsetX;INT32 domainOffsetY;xieTypPhototag domainPhototag;xieTypMathOp operator;CARD8 bandMask;};
struct $D1A99149F7DEF10F5C1917DF5D27BC53 {unsigned __int8 input_class;unsigned __int8 event_type_base;};
struct $D20D275EAB1226EC1C38DFF3333DCDF2 {xieTypFloat matrix00;xieTypFloat matrix01;xieTypFloat matrix02;xieTypFloat matrix10;xieTypFloat matrix11;xieTypFloat matrix12;xieTypFloat matrix20;xieTypFloat matrix21;xieTypFloat matrix22;xieTypWhiteAdjustTechnique whiteAdjusted;CARD16 lenParams;};
struct $D2124A1175651D2E1AA61E03F6ED9B92 {int type;unsigned __int64 serial;int send_event;Display *display;Window window;Window root;int state;int kind;int forced;Time time;};
enum $D2243AD3EB27BF4C7B926A762B95DD44 {TCNTL_DEXT_ETHER_STD = 0x0,TCNTL_DEXT_USER_WRITTEN = 0x1,};
enum $D2435FF4F3AAF25C455EAA2CA1747697 {XtAddress = 0x0,XtBaseOffset = 0x1,XtImmediate = 0x2,XtResourceString = 0x3,XtResourceQuark = 0x4,XtWidgetBaseOffset = 0x5,XtProcedureArg = 0x6,};
struct $D2445A5B9D7BF131D6E505C53638663F {CARD16 oc_opcode;CARD16 oc_length;CARD32 hlhsrID;};
struct $D293DB0BD17AE7654E9C3A224EBA1B54 {BYTE type;CARD8 pad0;CARD16 sequenceNumber;CARD32 length;CARD32 num_extents;};
struct $D2A436EA22C40B91455F5B9FAC22C559 {Screen *screen;XContext context;unsigned __int8 type;};
struct $D33BD252587094186D62977081F79B51 {msg__msg *msgtabp;msg__ins *instabp;int num_msg;int num_ins;char uniq[4];};
struct $D367C62101267596B6623720C0A3DAE6 {unsigned __int16 definable_entries;unsigned __int16 predefined_count;unsigned __int16 predefined_min;unsigned __int16 predefined_max;};
struct $D379431B13F78A36F2202C5AA386190E {char *dptr;int dsize;};
struct $D3A9F4977F1B841582E53D8492BF1DBD {pexEnumTypeIndex strchr;CARD16 descriptor_length;};
struct $D3BD8D5467099E62AC519BE3BD77B02F {INT16 simple;CARD16 pad;};
enum $D44E3C4FF335410EC7120A246FFC2300 {BROADCAST_QUERY = 0x1,QUERY = 0x2,INDIRECT_QUERY = 0x3,FORWARD_QUERY = 0x4,WILLING = 0x5,UNWILLING = 0x6,REQUEST = 0x7,ACCEPT = 0x8,DECLINE = 0x9,MANAGE = 0xA,REFUSE = 0xB,X11_FAILED = 0xC,KEEPALIVE = 0xD,ALIVE = 0xE,};
enum $D45638E099C8A1BF7CD7A46D1A631838 {ST_OTYPE_UNKNOWN = 0x0,ST_ARCHIVE = 0x1,ST_OMAGIC = 0x2,ST_NMAGIC = 0x3,ST_ZMAGIC = 0x4,};
struct $D467916C3587874006E0A38FD04B2C07 {BYTE type;BYTE state;CARD16 sequenceNumber;CARD32 length;CARD32 window;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct $D484A87E94E3DD0BB42E942E2185E2EE {XcmsFloat H;XcmsFloat V;XcmsFloat C;};
struct $D48E303D757DCA6A33314F9D46E85301 {char *name;uid_t uid;int unused;struct passwd *result;char *buffer;int len;int pkgind;};
struct $D498926E8696BF91244D867CE73FD66E {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD32 eventMask;CARD32 allEventsMask;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
enum $D4AC8D0F670D6DA0C7CB30777785B82A {PSHARED_HOLDER_BAD = 0x0,PSHARED_HOLDER_MUTEX = 0x1,PSHARED_HOLDER_READ = 0x2,PSHARED_HOLDER_WRITE = 0x3,PSHARED_HOLDER_MUTEXWAIT = 0x4,PSHARED_HOLDER_READWAIT = 0x5,PSHARED_HOLDER_WRITEWAIT = 0x6,PSHARED_HOLDER_CONDWAIT = 0x7,};
struct $D4B7CCBA990A156E447947BB060E0786 {CARD8 reqType;BYTE pad;CARD16 length;CARD32 srcGC;CARD32 dstGC;CARD32 mask;};
struct $D4C8F552392F5332BDD78714AF7AFE61 {CARD8 type;CARD8 detail;CARD8 screen;CARD8 pad;INT16 x;INT16 y;};
struct $D4FB496F61D4660631FE604D96639DD9 {int his_version_index;int my_version_index;char *his_vendor;char *his_release;char my_auth_index;IcePointer my_auth_state;int must_authenticate;};
struct $D50A70D0E3F027C6430054674F5D7982 {Dimension AreaWidth;Dimension AreaHeight;Dimension margin_width;Dimension margin_height;Widget CommandWindow;Widget MenuBar;Widget Message;unsigned __int8 CommandLoc;XmSeparatorGadget Sep1;XmSeparatorGadget Sep2;XmSeparatorGadget Sep3;Boolean ManagingSep;Boolean ShowSep;};
struct $D53EE25F80C41C95CC04B700465E64D8 {CARD8 reqType;BYTE nChars;CARD16 length;CARD32 drawable;CARD32 gc;INT16 x;INT16 y;};
enum $D57089EDE54FD93EA7906B88CC189786 {XmPIXELS = 0x0,Xm100TH_MILLIMETERS = 0x1,Xm1000TH_INCHES = 0x2,Xm100TH_POINTS = 0x3,Xm100TH_FONT_UNITS = 0x4,};
struct $D60B59C14E4F896E4A7591EB7765B14B {CARD8 success;BYTE lengthReason;CARD16 majorVersion;CARD16 minorVersion;CARD16 length;};
struct $D635E78B625EBD67ED9AD78D34936B41 {CARD16 oc_opcode;CARD16 oc_length;PEXFLOAT scale;};
enum $D6648E7C00A5D72C8804EAE47C88934A {HighlightNone = 0x0,HighlightWhenUnset = 0x1,HighlightAlways = 0x2,};
struct $D6748EB526E1102704242669BF7BE67C {IS_serv_hdr_t Gads_serv_hdr;IS_parm_hdr_t Gads_Ctot_hdr;uint32_t Gads_Ctot;IS_parm_hdr_t Gads_Dtot_hdr;uint32_t Gads_Dtot;IS_parm_hdr_t Gads_Csum_hdr;uint32_t Gads_Csum;IS_parm_hdr_t Gads_Dsum_hdr;uint32_t Gads_Dsum;};
struct $D674F4D338C61D0ED8D9CD38769561E7 {PEXTableIndex strchr;unsigned __int16 reserved;};
struct $D70593ABB97D9ADE4A069324C98D63AE {BYTE type;CARD8 format;CARD16 sequenceNumber;CARD32 length;CARD32 propertyType;CARD32 bytesAfter;CARD32 nItems;CARD32 pad1;CARD32 pad2;CARD32 pad3;};
enum $D75A9F50BEFC37ED2CAAB9E825B0AC13 {TK_JUSTIFY_LEFT = 0x0,TK_JUSTIFY_RIGHT = 0x1,TK_JUSTIFY_CENTER = 0x2,};
struct $D769135999DFEE6143DE1D9CD80B3AD5 {Widget old;Widget req;ArgList args;Cardinal num_args;};
struct $D7F0CB1571AAC0714CF3A2A9DC0827E7 {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD32 following;CARD32 nFonts;};
union $D8231012D0728EC3472C30FA3109CEFA {Display *display;GC gc;Visual *visual;Screen *screen;ScreenFormat *pixmap_format;XFontStruct *font;};
struct $D843708B701233E347EA43C5F5C70A8D {float constant;int shape_factor;};
struct $D89EFC9908B2BD8436006F18C8B3A23A {__int16 keycode;__int16 unshifted;__int16 shifted;};
struct $D8B2DFFDFB4D75E37E8EFAD1CD2C8306 {pexSwitch mode;CARD8 unused1;CARD16 unused2;PEXFLOAT frontPlane;PEXFLOAT backPlane;PEXFLOAT frontScaling;PEXFLOAT backScaling;pexColorType depthCueColorType;CARD16 unused3;};
struct $D8ED41CC77C8ECDBEAE12EF98913EB66 {Dimension hpad;Dimension vpad;Dimension line_width;Pixel foreground;XtGravity gravity;Boolean auto_reconfigure;GC gc;Widget tree_root;Dimension *largest;int n_largest;Dimension maxwidth;Dimension maxheight;};
struct $D92C2BF2561A7EC65876555C79CE686A {CARD8 reqType;CARD8 opcode;CARD16 length;pexFont font;};
struct $D964271DD6A251005E25C3AAAE129019 {unsigned int eventType;KeySym keysym;KeyCode key;unsigned int modifiers;Widget component;Boolean needGrab;Boolean isMnemonic;};
struct $DA281B2671CC902347C407C338E5A352 {CARD8 reqType;CARD8 opcode;CARD16 length;pexSC src;pexSC dst;pexBitmask itemMask;};
struct $DA4C8A7C662E901D031392A43A7446A0 {int count;XdbeVisualInfo *visinfo;};
struct $DA732864DAD897F0B587BCCAD8E078EE {BYTE type;CARD8 pad0;CARD16 sequenceNumber;CARD32 length;CARD16 majorVersion;CARD16 minorVersion;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct $DADF6A2FE8C0A56005FBE2ABB9EBEBA9 {int type;unsigned __int64 serial;int send_event;Display *display;Window window;XID deviceid;int mode;int detail;Time time;};
struct $DAE83A2F61144F2AD912252480DFF25D {unsigned int tq3;};
struct $DAEBDFCF6641BEDF5371E5E95CD6FE55 {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD32 listCount;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct $DAEE883EEEE28A583262B4A6FD239CBF {ulong dl_primitive;ulong dl_flag;ulong dl_dest_addr_length;ulong dl_dest_addr_offset;};
struct $DB0E3B2132CB3BCDB478CD47716D7AA6 {CARD8 reqType;BYTE pad;CARD16 length;CARD32 window;CARD32 start;CARD32 stop;};
enum $DB2348CA056F0BEB72603AE306051379 {TCNTL_TAGS_ANY = 0x0,TCNTL_TAGS_RSVP_SOCKET = 0x1,TCNTL_TAGS_SOCKET_PTR = 0x2,TCNTL_TAGS_RSVP_BASEFLOW = 0x3,};
enum $DB4B60BC3E5D47BB5823C48350265A79 {XIMForwardChar = 0x0,XIMBackwardChar = 0x1,XIMForwardWord = 0x2,XIMBackwardWord = 0x3,XIMCaretUp = 0x4,XIMCaretDown = 0x5,XIMNextLine = 0x6,XIMPreviousLine = 0x7,XIMLineStart = 0x8,XIMLineEnd = 0x9,XIMAbsolutePosition = 0xA,XIMDontChange = 0xB,};
struct $DB64A8459715AF3CEFE23597C08B5967 {CARD16 control;CARD16 length;};
struct $DB6B31C995A9BE8AC988B1FAFFAE1D6F {XtPointer next_extension;XrmQuark record_type;__int64 version;Cardinal record_size;int (*Input)();};
struct $DBA51B39F712616BEE79D72DF56F69D6 {IS_main_hdr_t adspec_mh;genparm_parms_t adspec_genparms;};
struct $DBE3D025CF6B61E7535360E73F7BAA3C {CARD8 type;CARD8 detail;CARD16 sequenceNumber;CARD32 length;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;XETrapGetStatsRep data;};
struct $DC1682303935489FD3065EEC966FE929 {CARD8 reqType;CARD8 opcode;CARD16 length;pexFont font;CARD32 numBytes;};
struct $DC1F4185A69167B259A83E436A7DD097 {CARD8 reqType;CARD8 xvReqType;CARD16 length;CARD32 window;};
struct $DC32A0924BDC2649CEA8C5E8AC72EF13 {CARD8 reqType;BYTE pad;CARD16 length;CARD32 mid;CARD32 srcCmap;};
struct $DC4D1089D25E9E473EA9E8C73460A48E {caddr_t (*init_screen_handle)();int (*init_screen)();int (*clear_screen)();int (*scroll_screen)();int (*blitc)();int (*map_unmap_screen)();int (*ioctl)();void (*close)();caddr_t screen_handle;int (*set_get_power_level)();int (*screen_private)();int (*screen_private2)();};
struct $DD1A60F664AD301361B26C5800787B5E {unsigned __int16 count_styles;XIMStyle *supported_styles;};
struct $DD232241810C7B936211642930A8D251 {__int16 ts_maxupri;};
struct $DD43D8CABB66A19A2E980F6986CCC925 {int reason;XEvent *event;};
struct $DD591F75FA5831C579709DD6A55AAB95 {CARD8 reqType;CARD8 opcode;CARD16 length;pexEnumTypeIndex fpFormat;pexEnumTypeIndex devType;pexPhigsWks wks;pexBitmask itemMask;};
enum $DD7C7A6F7774314680C00686808A9C69 {IcePaAuthContinue = 0x0,IcePaAuthAccepted = 0x1,IcePaAuthRejected = 0x2,IcePaAuthFailed = 0x3,};
struct $DDAC1D07D44FFC2E5C65864F60CCE1DF {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD32 root;CARD32 parent;CARD16 nChildren;CARD16 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct $DDB4B2A360148BFABFF14FB09BC2E756 {caddr_t (*init_colormap_handle)();int (*init_color_map)();int (*load_color_map_entry)();void (*clean_color_map)();int (*video_on)();int (*video_off)();caddr_t colormap_handle;int (*cmap_private)();};
struct $DDC886CE58B08A3828A7006540E329D9 {xieTypFloat whitePoint0;xieTypFloat whitePoint1;xieTypFloat whitePoint2;};
enum $DDE587BC9507421E24019D1CDC2018E8 {XawtextScrollNever = 0x0,XawtextScrollWhenNeeded = 0x1,XawtextScrollAlways = 0x2,};
struct $DDEAC4200641A838164224E9436A69A8 {int type;unsigned __int64 serial;int send_event;Display *display;Window window;XID deviceid;Time time;int num_classes;char data[64];};
struct $DDFFB976286AF3DF94249CFAF202E0BA {unsigned int;};
struct $DE03FEBE0723D674E0B03ED2FA28B106 {int type;Display *display;XID resourceid;unsigned __int64 serial;unsigned __int8 error_code;unsigned __int8 request_code;unsigned __int8 minor_code;unsigned __int16 op_code;unsigned __int16 count;};
struct $DE186F16E7B21B4F63B6FFA448A2AD3A {XtPointer next_extension;XrmQuark record_type;__int64 version;Cardinal record_size;XtAllocateProc allocate;XtDeallocateProc deallocate;};
struct $DE3BCFA7F6F640490A26D997FC1738C7 {char *method_name;int (*instance[3])();char *c_symbol[3];char *package[3];char *lib_name[3];char *meth_proto;};
struct $DE5295A524AE5E785ED4C88469459F67 {CARD8 reqType;CARD8 xvReqType;CARD16 length;CARD32 port;CARD32 drawable;};
struct $DE6418E754BFD463104F6B232F15D486 {coff_uint p_type;coff_off p_offset;coff_addr p_vaddr;coff_addr p_paddr;coff_uint p_filesz;coff_uint p_memsz;coff_uint p_flags;coff_uint p_align;};
struct $DE6FC4BA8FEF076E2518FD7678F6A61F {PEXCoord point;PEXColorRGB8 rgb8;unsigned int edge;};
struct $DEA6EB3579BA90947BB8CFA4C4EC84A1 {int major_version;int minor_version;IcePoProcessMsgProc process_msg_proc;};
struct $DEB6ED3E3E48801FAB6806704D963455 {CorePart core;CompositePart composite;ShellPart shell;WMShellPart wm;};
struct $DEEBBF9E678AFA2413B9A4D363D90472 {CARD8 reqType;CARD8 xvReqType;CARD16 length;CARD32 port;CARD32 time;};
struct $DF21E726BD65398407620C5BBBA9E08C {CARD8 reqType;BYTE pad;CARD16 length;CARD32 window;CARD32 property;};
struct $DF35D159A1509306ACCF933DCAD10C10 {CARD8 majorOpcode;CARD8 minorOpcode;CARD8 versionIndex;CARD8 protocolOpcode;CARD32 length;};
struct $DF5D362420C7F69D31EBAC9DE98C4F23 {CARD8 reqType;CARD8 opcode;CARD16 length;pexEnumTypeIndex fpFormat;CARD16 valueType;pexLookupTable lut;pexTableIndex start;CARD16 count;};
struct $DF789568FEE96C5BA584B8DD97BCF57D {unsigned __int16 status;PEXPickPath path;int path_order;PEXNameSet inclusion;PEXNameSet exclusion;PEXPickRecord pick_record;PEXEnumTypeIndex prompt_echo_type;PEXViewport echo_volume;int echo_switch;};
struct $DF7EA5483316055E5EF5E87F4B5E1B9A {unsigned __int64 word[9];};
struct $DF8DA3DE4803EFF7CEBBF110DF4EA6AF {int type;unsigned __int64 serial;int send_event;Display *display;XPContext context;unsigned __int64 available;};
struct $DFC468A573BED393F8C22B677D1D24EF {XcmsFloat pad0;XcmsFloat pad1;XcmsFloat pad2;XcmsFloat pad3;};
struct $DFCC977DF00F58347288DFBB1C9465DA {XmDSMCreateInfoProc createInfo;XmDSMDestroyInfoProc destroyInfo;XmDSMStartUpdateProc startUpdate;XmDSMRetrieveInfoProc retrieveInfo;XmDSMUpdateInfoProc updateInfo;XmDSMEndUpdateProc endUpdate;XmDSMUpdateProc updateDSM;XmDSMProcessMotionProc processMotion;XmDSMProcessDropProc processDrop;XmDSMOperationChangedProc operationChanged;XmDSMChangeRootProc changeRoot;XmDSMInsertInfoProc insertInfo;XmDSMRemoveInfoProc removeInfo;XmDSMSyncTreeProc syncTree;XmDSMGetTreeFromDSMProc getTreeFromDSM;XmDSMCreateDSInfoTable createTable;XmDSMDestroyDSInfoTable destroyTable;XmDSMRegisterInfoProc registerInfo;XmDSMWidgetToInfoProc widgetToInfo;XmDSMUnregisterInfoProc unregisterInfo;XtPointer extension;};
struct $E005195AE7F2F7B0796FC6C384F6178C {CARD16 clipFlags;CARD16 unused;PEXFLOAT clipLimits_xmin;PEXFLOAT clipLimits_ymin;PEXFLOAT clipLimits_zmin;PEXFLOAT clipLimits_xmax;PEXFLOAT clipLimits_ymax;PEXFLOAT clipLimits_zmax;pexMatrix orientation;pexMatrix mapping;};
struct $E019DD19C3E276A39E4768CCE95A0FD0 {int frabjous;};
enum $E03C6446F0CC9859628A2051D308D0DD {MC_NO_ERROR = 0x0,MC_UNKNOWN = 0x1,MC_ERR_OFFLINE = 0x2,MC_NOT_SUPPORTED = 0x3,MC_ENOMEM = 0x4,MC_ENXIO = 0x5,MC_ENODEV = 0x6,MC_SRC_EMPTY = 0x7,MC_DEST_FULL = 0x8,MC_BAD_ADDR = 0x9,MC_INTERNAL = 0xA,MC_PERM = 0xB,MC_ACCES = 0xC,MC_BAD_DRIVE_EJECT = 0xD,MC_NO_CHANGER_ENTRY = 0xE,MC_NO_INTERFACE = 0xF,MC_USAGE_ERROR = 0x10,MC_INTERFACE_ERROR = 0x11,MC_BAD_MCICAP = 0x12,MC_MCICAP_OPEN_FAILED = 0x13,MC_NO_ENTRY = 0x14,MC_LAST_ERROR = 0x15,};
struct $E0457597E4167E07E7B544A574F8E386 {Widget logicalParent;unsigned __int8 extensionType;};
struct $E06305A3A63243FBC84E6476D67FA237 {BYTE type;CARD8 what;CARD16 sequenceNumber;CARD32 length;CARD32 numStrings;BYTE pad[20];};
struct $E0AC4DED47AA205E49DDDE5338F7871C {_LC_object_t hdr;char *(*nl_langinfo)(__nl_item, struct _LC_monetary_t *);ssize_t (*strfmon)(char *, size_t, const char *, va_list, struct _LC_monetary_t *);struct _LC_monetary_t *(*init)(struct _LC_locale_t *);void *data;};
struct $E0D258F3248B038EE90F289455DE9392 {CARD8 type;CARD8 newState;CARD16 sequenceNum;CARD32 length;CARD32 byteCount;CARD8 pad[20];};
struct $E0DBFADDF3652E8CE621A72BDA30F8A3 {int elemType;union $E0DBFADDF3652E8CE621A72BDA30F8A3::$3690EAC5930ABB4257DE54E8AA78B3D3 data;};
union $E0DBFADDF3652E8CE621A72BDA30F8A3::$3690EAC5930ABB4257DE54E8AA78B3D3 {struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$58439DE84D4F3B75FF20C37DCB52D9CE ImportClientLUT;struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$8BF0A030473096386937960DA70A11C8 ImportClientPhoto;struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$334C83914DC2E61A1D14B2F868C0C080 ImportClientROI;struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$F9A036E9B3C1F4616D25422F889615FD ImportDrawable;struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$AF246CBD17757EBB8021F6497E7D5EF8 ImportDrawablePlane;struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$03DD5DCA6449017DC6F7C211FEB78E60 ImportLUT;struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$6E295906D6D694784BD7F69868811658 ImportPhotomap;struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$6C78BD8FB29F0B3892AA21E371D4B37F ImportROI;struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$5623E924A4CAD8B3281CBD447F6D9F5E Arithmetic;struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$6DA4D20C69AE84CCE6CBAE589B7F141F BandCombine;struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$5A8784420EB85C6574E762430555C212 BandExtract;struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$F2F2B62192AB2F6F848D023B568841B1 BandSelect;struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$3C1CE69ED4E7D8CD80724A71703E97D1 Blend;struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$3665A6BE36BEC64057D7585B222CAB27 Compare;struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$48EB0AD06A0E3A0EED8FB89389CC4F15 Constrain;struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$FA3B3AD42FB7CC5DF7C5E4DC4F36D168 ConvertFromIndex;struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$B0962B86DD5E169933ED7138BAE01787 ConvertFromRGB;struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$43422FB0CEC5EFAABA4C872DE28592B5 ConvertToIndex;struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$B0962B86DD5E169933ED7138BAE01787 ConvertToRGB;struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$F46A2D467D2EE11D1585EDC2081DA972 Convolve;struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$D524E97F465C106D8B2D830B6709FF42 Dither;struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$34447E2805643CBE295B6F6466FFE577 Geometry;struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$EB0EAD8FD0C9A2A1750B45C61EAC6638 Logical;struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$DA4768CA6490F60EB402BA8549A071DF MatchHistogram;struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$116BE80B6E09DB698B37E3A3AFF808C9 Math;struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$B59F6BF549B2093775BC11EB9E7A0B6C PasteUp;struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$F4EDC7CC740795D2106D398F9B5A18FE Point;struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$BD68C39BEA56A0C7A9BF9E02BA15F6A8 Unconstrain;struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$25D62B1618370FD1B44908C34C5FF8DC ExportClientHistogram;struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$E951BD98A29E225972C590207876304A ExportClientLUT;struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$63C5652A255FDFBF00944E6D58546EA9 ExportClientPhoto;struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$F2B9B11AF5CE8EFB589A785A82FD510E ExportClientROI;struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$4C00012B5CC2C6089B481585818F1AF6 ExportDrawable;struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$4C00012B5CC2C6089B481585818F1AF6 ExportDrawablePlane;struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$9B6147CBAF9717D780DDA7E63FA35D83 ExportLUT;struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$8830C00DA2FD7D2C1C461EA4AB004769 ExportPhotomap;struct $::$3690EAC5930ABB4257DE54E8AA78B3D3::$119B7C6B6023A524E6CC33A5E64200BF ExportROI;};
struct $E0F65D5058ACC2BC5F9AF2EDFFAF29D1 {CARD32 windowId;CARD32 defaultColormap;CARD32 whitePixel;CARD32 blackPixel;CARD32 currentInputMask;CARD16 pixWidth;CARD16 pixHeight;CARD16 mmWidth;CARD16 mmHeight;CARD16 minInstalledMaps;CARD16 maxInstalledMaps;CARD32 rootVisualID;CARD8 backingStore;BOOL saveUnders;CARD8 rootDepth;CARD8 nDepths;};
struct $E1058C6CE9D10ECB65A245B878A205A2 {char *ptr;int length;XmTextFormat format;};
struct $E1655291D14CE59495117F42FECB583D {XPointer client_data;XIMProc callback;};
struct $E1CA6FCDCEF9A9C396CC3F3CDC444223 {CARD8 pixelStride[3];xieTypOrientation pixelOrder;CARD8 scanlinePad[3];xieTypOrientation fillOrder;xieTypOrientation bandOrder;xieTypInterleave interleave;CARD16 pad;};
enum $E203AC54CF4949A66D893C858D3FE04C {SendWidgetTree = 0x0,SetValues = 0x1,GetResources = 0x2,GetGeometry = 0x3,FindChild = 0x4,GetValues = 0x5,};
struct $E25F4BC7C332796EBC84527590582A42 {int type;unsigned __int64 serial;int send_event;Display *display;Window window;Colormap colormap;int new;int state;};
struct $E27231AA724DCAE1F187F811797F6BBB {CARD32 levels0;CARD32 levels1;CARD32 levels2;xieTypFloat lumaRed;xieTypFloat lumaGreen;xieTypFloat lumaBlue;xieTypFloat scale;xieTypGamutTechnique gamutCompress;CARD16 lenGamutParams;};
struct $E27AB856259AFDE14CC12970A9EBC018 {uid_t uid;gid_t gid;gid_t groups[32];};
struct $E295AA2FD640132E82D3349EDE822061 {__int16 screen;ws_color_cell foreground;ws_color_cell background;};
struct $E2AAF6ECEDE601F63A19E0C4A43CC947 {domainIdT dmnId;char dmnName[32];int reserved1;int reserved2;int reserved3;int reserved4;int reserved5;int reserved6;int reserved7;int reserved8;};
struct $E2D85E53E11D137C5C1A7F1A83598D67 {int uncompressed;int radiometric;XieOrientation encoded_order;};
struct $E32A7B8F021520E59B05D2002875B75A {CARD16 elemType;CARD16 elemLength;xieTypPhototag src;xieTypExportNotify notify;xieTypOrientation bandOrder;CARD32 start0;CARD32 start1;CARD32 start2;CARD32 length0;CARD32 length1;CARD32 length2;};
struct $E37A47A1B2D1B684050E8CBAC9BEB571 {unsigned __int64 fill;};
struct $E38835F7BAD1BFC0C9C26E3A0ADFAC78 {int _cnt;unsigned int _flag2;unsigned __int8 *_ptr;unsigned __int8 *_base;int _bufsiz;__int16 _flag;__int16 _file;char *__newbase;void *_lock;unsigned __int8 *_bufendp;};
struct $E38CC4C8385B7649E275253761B49FA9 {Atom name;unsigned __int64 card32;};
struct $E3CEA5E00043272B4ACE9DC01AD27A77 {unsigned int len;rapi_format_t form;union $E3CEA5E00043272B4ACE9DC01AD27A77::$991C9406144A3A8CFCB7FFC708B2C4E2 pol_u;};
union $E3CEA5E00043272B4ACE9DC01AD27A77::$991C9406144A3A8CFCB7FFC708B2C4E2 {rapi_policy_name_string_t name_string;};
enum $E47FF6462DC373F46302D1643C3110BA {XmMENU_POPDOWN = 0x0,XmMENU_PROCESS_TREE = 0x1,XmMENU_TRAVERSAL = 0x2,XmMENU_SHELL_POPDOWN = 0x3,XmMENU_CALLBACK = 0x4,XmMENU_BUTTON = 0x5,XmMENU_CASCADING = 0x6,XmMENU_SUBMENU = 0x7,XmMENU_ARM = 0x8,XmMENU_DISARM = 0x9,XmMENU_BAR_CLEANUP = 0xA,XmMENU_STATUS = 0xB,XmMENU_MEMWIDGET_UPDATE = 0xC,XmMENU_BUTTON_POPDOWN = 0xD,XmMENU_RESTORE_EXCLUDED_TEAROFF_TO_TOPLEVEL_SHELL = 0xE,XmMENU_RESTORE_TEAROFF_TO_TOPLEVEL_SHELL = 0xF,XmMENU_RESTORE_TEAROFF_TO_MENUSHELL = 0x10,XmMENU_GET_LAST_SELECT_TOPLEVEL = 0x11,XmMENU_TEAR_OFF_ARM = 0x12,};
struct $E4AC7511DCAB1B7ED5F95FA065B21662 {char *name;gid_t gid;int unused;struct group *result;char *buffer;int len;int pkgind;};
struct $E4B54CDAC268E0DDD69B76CAD39D67E7 {pexTextVAlignment vertical;pexTextHAlignment horizontal;};
struct $E4DF4A08C28A872114F4A72320158175 {CARD16 oc_opcode;CARD16 oc_length;CARD16 numEnable;CARD16 numDisable;};
enum $E5174C28E2C76F79C438E7F3C344BC7A {NormalResource = 0x0,ConstraintResource = 0x1,};
enum $E54E6D51CE7B5536353B8548369F9C7D {XtorientHorizontal = 0x0,XtorientVertical = 0x1,};
struct $E55328F014D59CB8D8C2D56824FBB3BE {char *name;char *desc;};
struct $E59953A36063650DE92A1957B98E4A1B {CARD8 header;CARD8 motion_data;CARD16 delay_time;};
struct $E5FCE84481A5DA4B542276D3CC112A29 {BYTE type;BYTE event_code;CARD16 sequenceNumber;CARD32 length;fsTimestamp timestamp;};
struct $E5FEC4B44082A4B8B21FC86BB58EB49C {BYTE type;CARD8 keySymsPerKeyCode;CARD16 sequenceNumber;CARD32 length;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct $E6051A7A276F3C62A8A22C549E449370 {CARD16 oc_opcode;CARD16 oc_length;pexEnumTypeIndex characteristics;CARD16 length;};
struct $E62B5AAF61A421D071E8F87B1ACD88C8 {CARD16 elemType;CARD16 elemLength;xieTypLUT lut;};
struct $E6C90395DB517D514C5E9B6CF76ABC78 {coff_uint ms_hash_value;coff_uint ms_info;};
struct $E6EABA4AA22781602E84D1DF4DA6148F {CARD16 elemType;CARD16 elemLength;xieTypPhototag src1;xieTypPhototag src2;INT32 domainOffsetX;INT32 domainOffsetY;xieTypPhototag domainPhototag;xieTypCompareOp operator;BOOL combine;xieTypFloat constant0;xieTypFloat constant1;xieTypFloat constant2;CARD8 bandMask;CARD8 pad[3];};
enum $E722F09ED1144D6F1CCBF34446B0F175 {PSHARED_BAD = 0x0,PSHARED_MUTEX = 0x1,PSHARED_CV = 0x2,PSHARED_RWL = 0x3,};
struct $E723A84E44CDA7473BF48272140C5975 {INT16 x;INT16 y;};
struct $E7527BD744297E99A547ACE68D4D18D5 {_LC_object_t hdr;char *(*nl_langinfo)(__nl_item, struct _LC_time_t *);size_t (*strftime)(char *, size_t, const char *, const struct tm *, struct _LC_time_t *);char *(*strptime)(const char *, const char *, struct tm *, struct _LC_time_t *);size_t (*wcsftime)(wchar_t *, size_t, const char *, const struct tm *, struct _LC_time_t *);struct _LC_time_t *(*init)(struct _LC_locale_t *);void *data;};
struct $E76DA6E4DEDA5761DD80AABA03E06984 {coff_uint cm_tag;coff_uint cm_len;coff_ulong cm_val;};
enum $E79595227F6BDA2C423673671FC4E348 {XmCHANGE_ALL = 0x0,XmCHANGE_NONE = 0x1,XmCHANGE_WIDTH = 0x2,XmCHANGE_HEIGHT = 0x3,};
struct $E7AA23F611FA24FC34569631C297DAAA {PEXColorIndexed strchr;PEXVector normal;};
struct $E7AFD6532C2786B1E1EBCA6ADECADE75 {CARD8 reqType;CARD8 xvReqType;CARD16 length;};
struct $E7E6C0CFFF448DC49689F38B487D47EE {CARD8 reqType;CARD8 opcode;CARD16 length;CARD32 drawable;pexBitmask itemMask;CARD32 numEnums;};
struct $E7EE88F20F725C9FEB06EE11AEF579C5 {filesetIdT filesetId;unsigned int cloneId;unsigned int hasClone;int isMounted;char setName[32];union $E7EE88F20F725C9FEB06EE11AEF579C5::$BBE517A9CF3D8087776F63945B66BA12 relatedSet;char mountPath[1024];int reserved1;int reserved2;int reserved3;int reserved4;int reserved5;int reserved6;int reserved7;int reserved8;};
union $E7EE88F20F725C9FEB06EE11AEF579C5::$BBE517A9CF3D8087776F63945B66BA12 {char cloneName[32];char origName[32];};
struct $E7F9FD2C37FD56671DBF7E32D3F10830 {int type;unsigned __int64 serial;int send_event;Display *display;Window window;Atom atom;Time time;int state;};
struct $E87A67B62710FC3E5EEA1F2EA7C46530 {CARD16 elemType;CARD16 elemLength;};
struct $E89CAE49E77FFA19927DB3E1B8EA1AFC {xieTypPhototag src;CARD16 pad;INT32 dstX;INT32 dstY;};
struct $E8A3AC8841591043E774CAD745C5EDE6 {CARD8 reqType;CARD8 opcode;CARD16 length;pexEnumTypeIndex fpFormat;CARD16 unused;pexSC sc;pexBitmask itemMask;};
struct $E8DAEF1823ED50AE42D45B1AAC385BA0 {PEXTableIndex font_index;PEXEnumTypeIndex precision;float char_expansion;float char_spacing;PEXColorSpecifier color;};
struct $E9462818A0BC0C67C7E517AB6B971B97 {CARD32 maxCells;};
struct $E979E361A2908732FE24CBF47752810D {BYTE type;CARD8 otherid_valid;CARD16 sequenceNumber;CARD32 length;CARD32 otherid;BYTE cachable;BYTE pad1;CARD16 pad2;};
struct $E97BFE069D0E69649C7DF89B8901896C {BYTE type;BYTE event_code;CARD16 sequenceNumber;CARD32 length;fsTimestamp timestamp;BOOL added;BOOL deleted;CARD16 pad;};
struct $E982230C7230B1D88907DFE2F20946CA {PEXFLOAT first;PEXFLOAT second;PEXFLOAT third;};
struct $E985CC5BCD47EAFD9A20CA5B2CDE74AE {CARD8 class;CARD8 length;CARD8 num_keys;BYTE pad1;CARD8 keys[32];};
struct $E997A7E9262D40FC83356A066D96F704 {CARD8 reqType;CARD8 recordReqType;CARD16 length;CARD32 context;CARD32 nClients;};
struct $E99BC90019053CAF4DC18DC60688EDEF {char *name;char *type;int num_vals;SmPropValue *vals;};
struct $E9D1A096C032AEF3D5FCFFE322D261C9 {int reason;XEvent *event;Boolean doit;__int64 currInsert;__int64 newInsert;__int64 startPos;__int64 endPos;XmTextBlock text;};
struct $E9D9387C3B11BC3046AC632B5B502F37 {int type;Display *display;Window window;CARD8 actions[28];};
struct $EA06689320989664A85B5DE3D411DA20 {int align_eol;int radiometric;XieOrientation encoded_order;};
enum $EA15948D1F9B99548B9F82A14FE7C2E2 {CLU_GET = 0x0,CLU_SET = 0x1,};
struct $EA67C4467E5D392AEC3890F142F1A94F {XtPointer extension;};
enum $EA694365A6418A3DD1577EF52309349E {XmGEO_EXPAND = 0x0,XmGEO_CENTER = 0x1,XmGEO_PACK = 0x2,};
union $EACB97323E62441420BFD417B0734C6F {struct $EACB97323E62441420BFD417B0734C6F::$5F0AB66A1C3164B6EDF05ACEB87494AB uid;};
struct $EACB97323E62441420BFD417B0734C6F::$5F0AB66A1C3164B6EDF05ACEB87494AB {uid_t id;};
struct $EB0A833BE2378946C8C415F8B835C892 {unsigned __int16 length;char *data;};
struct $EB1A61A200A34257E2C7F3D6B0AFEB97 {PEXFLOAT lowerLeft_x;PEXFLOAT lowerLeft_y;PEXFLOAT upperRight_x;PEXFLOAT upperRight_y;PEXFLOAT concatpoint_x;PEXFLOAT concatpoint_y;};
union $EB2535972657DA0245F770D5D18D2BD3 {XmParentProcessAnyRec any;XmParentInputActionRec input_action;};
struct $EB2AB6985A4B3B646A04BAA9FAF8BA6F {unsigned int len;rapi_format_t form;};
struct $EB42C1B9174C3C12EE27F86992F6AB4D {CARD8 reqType;CARD8 opcode;CARD16 length;pexLookupTable src;pexLookupTable dst;};
enum $EBA0A3D002EB22B329BE0C1D617FB8B6 {XDM_QUERY = 0x0,XDM_BROADCAST = 0x1,XDM_INDIRECT = 0x2,XDM_COLLECT_QUERY = 0x3,XDM_COLLECT_BROADCAST_QUERY = 0x4,XDM_COLLECT_INDIRECT_QUERY = 0x5,XDM_START_CONNECTION = 0x6,XDM_AWAIT_REQUEST_RESPONSE = 0x7,XDM_AWAIT_MANAGE_RESPONSE = 0x8,XDM_MANAGE = 0x9,XDM_RUN_SESSION = 0xA,XDM_OFF = 0xB,XDM_AWAIT_USER_INPUT = 0xC,XDM_KEEPALIVE = 0xD,XDM_AWAIT_ALIVE_RESPONSE = 0xE,};
struct $EBA30041B1367D967CE55670260EF592 {int type;unsigned __int64 serial;int send_event;Display *display;Window requestor;Atom selection;Atom target;Atom property;Time time;};
struct $EBB9AF1D533389C5629CCF05A3319239 {PEXFLOAT point_x;PEXFLOAT point_y;PEXFLOAT vector_x;PEXFLOAT vector_y;};
struct $EBCD544415DA81694FD11F76153DF44B {CARD8 reqType;CARD8 opcode;CARD16 length;pexPickMeasure pm;CARD32 numBytes;};
struct $EBCFF2DC44B193270B78015375263504 {unsigned int ce_tbl_bsize;unsigned int ce_tbl_cnt;unsigned int ce_strpool_cnt;unsigned int version_mask;_LC_strpool_t *ce_strpool;_LC_collel_tbl_t *ce_tbl;_LC_collel_qidx_t *ce_qidx;unsigned int *ct_wgt[1];};
struct $EBE355A101A506B8BB9BC1A4B6A6F5B0 {unsigned __int16 red;unsigned __int16 green;unsigned __int16 blue;};
struct $EBFCC0D8AA2B58B235FECAF898781E22 {CARD8 preference;CARD8 pad[3];};
struct $EC328A4BBD21D90F21E901FD1485AFBB {BYTE type;CARD8 what;CARD16 sequenceNumber;CARD32 length;pexBitmask tables;pexBitmask namesets;pexBitmask attributes;BYTE pad[12];};
struct $EC337E6D8A01B74126A3CB4A2BBD1689 {IS_main_hdr_t st_mh;union $EC337E6D8A01B74126A3CB4A2BBD1689::$346915B0289097E40E41981A7E04366D tspec_u;};
union $EC337E6D8A01B74126A3CB4A2BBD1689::$346915B0289097E40E41981A7E04366D {gen_Tspec_t gen_stspec;};
enum $EC4430DF07B90C5F659AF484C6831943 {XmPIXMAP = 0x1,XmSTRING = 0x2,};
struct $EC87D4E5EFECFC4D155F79244EABA9BB {CARD8 reqType;BYTE mode;CARD16 length;CARD32 window;};
struct $ECAEF0AC09FAAEF4471BF88EF418BB5F {unsigned __int8 dragInitiatorProtocolStyle;unsigned __int8 dragReceiverProtocolStyle;unsigned __int8 userGrabbed;WidgetClass dragContextClass;WidgetClass dropTransferClass;WidgetClass dropSiteManagerClass;XmDragContext activeDC;XmDropSiteManagerObject dsm;Time lastDragTime;Window proxyWindow;XmModalData modals;Cardinal numModals;Cardinal maxModals;XtPointer xmim_info;String bindingsString;XmKeyBindingRec *bindings;XKeyEvent *lastKeyEvent;unsigned __int8 keycode_tag[32];int shellCount;XtPointer displayInfo;};
struct $ECC0E2C5AD5080F3204655729300624A {CARD32 position;CARD32 length;};
struct $ECEE78C032EE5485C50D1889944D2C4D {__int16 screen;ws_monitor monitor_type;char moduleID[10];__int16 width;__int16 height;__int16 root_depth;__int16 allowed_depths;__int16 nvisuals;__int16 x;__int16 y;__int16 row;__int16 col;__int16 max_row;__int16 max_col;__int16 f_width;__int16 f_height;__int16 cursor_width;__int16 cursor_height;__int16 min_installed_maps;__int16 max_installed_maps;};
union $ED959A5A2BB10F5D26CE5DF948BCCD65 {PEXCoord *no_data;PEXVertexIndexed *strchr;PEXVertexRGB *rgb;PEXVertexHSV *hsv;PEXVertexHLS *hls;PEXVertexCIE *cie;PEXVertexRGB8 *rgb8;PEXVertexRGB16 *rgb16;PEXVertexNormal *normal;PEXVertexEdge *edge;PEXVertexIndexedNormal *index_normal;PEXVertexRGBNormal *rgb_normal;PEXVertexHSVNormal *hsv_normal;PEXVertexHLSNormal *hls_normal;PEXVertexCIENormal *cie_normal;PEXVertexRGB8Normal *rgb8_normal;PEXVertexRGB16Normal *rgb16_normal;PEXVertexIndexedEdge *index_edge;PEXVertexRGBEdge *rgb_edge;PEXVertexHSVEdge *hsv_edge;PEXVertexHLSEdge *hls_edge;PEXVertexCIEEdge *cie_edge;PEXVertexRGB8Edge *rgb8_edge;PEXVertexRGB16Edge *rgb16_edge;PEXVertexNormalEdge *normal_edge;PEXVertexIndexedNormalEdge *index_normal_edge;PEXVertexRGBNormalEdge *rgb_normal_edge;PEXVertexHSVNormalEdge *hsv_normal_edge;PEXVertexHLSNormalEdge *hls_normal_edge;PEXVertexCIENormalEdge *cie_normal_edge;PEXVertexRGB8NormalEdge *rgb8_normal_edge;PEXVertexRGB16NormalEdge *rgb16_normal_edge;};
struct $EDB1A22D9B31A401FCB33FE96D068C50 {xieTypFloat mean;xieTypFloat sigma;};
enum $EDBA1914F16BC538415B0E0A3A3FD3BB {FIND = 0x0,ENTER = 0x1,};
struct $EDBFEA5FE88B3074CBFB5933EC22B3A9 {PEXFLOAT hue;PEXFLOAT saturation;PEXFLOAT value;};
struct $EDCAE6FAA77F2844B16FB7E0B618EDD7 {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD8 deviceid;CARD8 mode;BYTE pad1;BYTE pad2;};
union $EDD630C58B1D6814C622F38D5D7997FF {PEXColorIndexed strchr;PEXColorRGB rgb;PEXColorHSV hsv;PEXColorHLS hls;PEXColorCIE cie;PEXColorRGB8 rgb8;PEXColorRGB16 rgb16;PEXVector normal;PEXColorIndexedNormal index_normal;PEXColorRGBNormal rgb_normal;PEXColorHSVNormal hsv_normal;PEXColorHLSNormal hls_normal;PEXColorCIENormal cie_normal;PEXColorRGB8Normal rgb8_normal;PEXColorRGB16Normal rgb16_normal;};
struct $EDDCB6AFAAF5409A3B2EA356C0FE1408 {pexStructure sid;PEXFLOAT priority;};
struct $EDE17C06FAF221A5878FFED27CF569B6 {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD32 grabWindow;CARD32 time;CARD16 event_count;CARD8 this_device_mode;CARD8 other_devices_mode;BOOL ownerEvents;CARD8 deviceid;CARD16 pad01;};
enum $EE526AEE819F68457CE89197307C431F {XctSegment = 0x0,XctC0Segment = 0x1,XctGLSegment = 0x2,XctC1Segment = 0x3,XctGRSegment = 0x4,XctExtendedSegment = 0x5,XctExtension = 0x6,XctHorizontal = 0x7,XctEndOfText = 0x8,XctError = 0x9,};
struct $EE866C64B9E084E52F8894370051FA3D {CARD8 repType;CARD8 RepType;CARD16 sequenceNumber;CARD32 length;CARD8 nElts;BYTE pad1;BYTE pad2;BYTE pad3;CARD32 pad01;CARD32 pad02;CARD32 pad03;CARD32 pad04;CARD32 pad05;};
struct $EE866E46B57D84E2A02F424C24BE7B31 {XmDragStartProc start;XmDragCancelProc cancel;XtPointer extension;};
union $EEB48C9D0E03107C23692DF5EF5FE974 {int type;XvVideoNotifyEvent xvvideo;XvPortNotifyEvent xvport;__int64 pad[24];};
struct $EEDF0D7A607DA38253FFDCB6603E99FB {__int16 screen;__int16 width;__int16 height;__int16 x_hot;__int16 y_hot;unsigned int *cursor;unsigned int *mask;};
struct $EEE62CE3C0884F607962095F7AAF335B {coff_uint ppode_tag;coff_uint ppode_len;coff_ulong ppode_val;};
struct $EF1440E4CA89662D977D4B051E2FFAB7 {XID control;int length;int num_valuators;int *resolutions;int *min_resolutions;int *max_resolutions;};
struct $EF15DCB28339270802C69A46485DD45C {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD16 nbytes;CARD8 pad1;CARD8 pad2;};
enum $EF45388F68EDF15F1284C14D8C9AFBF9 {XmsdLeft = 0x0,XmsdRight = 0x1,};
struct $EF54914952AB89C7E0EBAF949772487D {BYTE type;BOOL enabled;CARD16 sequenceNumber;CARD32 length;CARD16 nHosts;CARD16 pad1;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct $EF989712E4168030B91954E017CB311F {int type;unsigned __int64 serial;int send_event;FSServer *server;};
struct $EF9EB88531A8EDCB8F7F85794A2A028F {CARD16 elementType;CARD16 length;};
struct $EFA7684E65B999D8F13828663D8EDE30 {unsigned __int16 count;PEXDeviceRect *rectangles;};
struct $EFD6C7D4777DD13E0B1CDD145692A98C {BYTE type;BOOL pad1;CARD16 sequence_number;CARD32 length;CARD16 server_major_version;CARD16 server_minor_version;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct $F059149F541946541B5DFE9F6EB20E96 {fsOffset32 name;fsOffset32 value;CARD8 type;BYTE pad0;CARD16 pad1;};
enum $F06844F2AC23AB95160E7EDF77DFD72F {RAPI_EMPTY_OTYPE = 0x0,RAPI_FLOWSTYPE_Intserv = 0x2,RAPI_FLOWSTYPE_Simplified = 0x3,RAPI_TSPECTYPE_Intserv = 0x11,RAPI_TSPECTYPE_Simplified = 0x12,RAPI_ADSTYPE_Intserv = 0x21,RAPI_ADSTYPE_Simplified = 0x22,RAPI_FILTERFORM_RSVD1 = 0x101,RAPI_FILTERFORM_BASE = 0x102,RAPI_FILTERFORM_GPI = 0x103,RAPI_FILTERFORM_BASE6 = 0x104,RAPI_FILTERFORM_GPI6 = 0x105,};
struct $F07337DBFAD2F21A51680BA8BC66C5A1 {int uncompressed;int align_eol;int radiometric;XieOrientation encoded_order;unsigned __int64 k_factor;};
struct $F0B6F56018B35AE6D958AA393C56DA44 {CARD8 coreRequestsFirst;CARD8 coreRequestsLast;CARD8 coreRepliesFirst;CARD8 coreRepliesLast;CARD8 extRequestsMajorFirst;CARD8 extRequestsMajorLast;CARD16 extRequestsMinorFirst;CARD16 extRequestsMinorLast;CARD8 extRepliesMajorFirst;CARD8 extRepliesMajorLast;CARD16 extRepliesMinorFirst;CARD16 extRepliesMinorLast;CARD8 deliveredEventsFirst;CARD8 deliveredEventsLast;CARD8 deviceEventsFirst;CARD8 deviceEventsLast;CARD8 errorsFirst;CARD8 errorsLast;BOOL clientStarted;BOOL clientDied;};
struct $F0BCD3B7D048EDD7B2B99177E67B0491 {__int16 ts_uprilim;__int16 ts_upri;};
struct $F0BD037E525ACFEA0C1F272EFA8FD580 {CARD8 reqType;BOOL delete;CARD16 length;CARD32 window;CARD32 property;CARD32 type;CARD32 longOffset;CARD32 longLength;};
struct $F0D1009415F4F398C0AA24385D596C1B {CARD8 reqType;CARD8 data;CARD16 length;};
enum $F13520DA388FBF9068488013F4B2A591 {cnx_unknown_state = 0x0,cnx_new_node = 0x1,cnx_potential_member = 0x2,cnx_member = 0x3,cnx_partitioned_member = 0x4,cnx_member_removed = 0x5,cnx_invalid_state = 0x6,};
struct $F13911897449B4F8991BC40BBBE3CC48 {coff_uint rfd;coff_uint index;};
struct $F1472F09D9F4F4B2B771740E265DAEF8 {CARD8 reqType;CARD8 numKeyPerModifier;CARD16 length;};
struct $F172F94299C982F5FEAF6C4E72460A72 {XSyncCounter counter;XSyncValueType value_type;XSyncValue wait_value;XSyncTestType test_type;};
struct $F1925969AB71A5A17E413FE84AB88904 {CARD8 reqType;CARD8 opcode;CARD16 length;CARD32 drawable;CARD8 depth;CARD8 unused;CARD16 type;CARD32 visualID;CARD32 maxTriplets;};
struct $F19CD3A20937CEF33F3E2EF5E2D906EF {CARD32 release;CARD32 ridBase;CARD32 ridMask;CARD32 motionBufferSize;CARD16 nbytesVendor;CARD16 maxRequestSize;CARD8 numRoots;CARD8 numFormats;CARD8 imageByteOrder;CARD8 bitmapBitOrder;CARD8 bitmapScanlineUnit;CARD8 bitmapScanlinePad;CARD8 minKeyCode;CARD8 maxKeyCode;CARD32 pad2;};
enum $F1BD9F0A1A3AD97A054FAC600A5CBCD3 {XmCASCADE_BUTTON_BIT = 0x1,XmCASCADE_BUTTON_GADGET_BIT = 0x2,XmCOMMAND_BOX_BIT = 0x3,XmDIALOG_SHELL_BIT = 0x4,XmLIST_BIT = 0x5,XmFORM_BIT = 0x6,XmTEXT_FIELD_BIT = 0x7,XmGADGET_BIT = 0x8,XmLABEL_BIT = 0x9,XmLABEL_GADGET_BIT = 0xA,XmMAIN_WINDOW_BIT = 0xB,XmMANAGER_BIT = 0xC,XmMENU_SHELL_BIT = 0xD,XmDRAWN_BUTTON_BIT = 0xE,XmPRIMITIVE_BIT = 0xF,XmPUSH_BUTTON_BIT = 0x10,XmPUSH_BUTTON_GADGET_BIT = 0x11,XmROW_COLUMN_BIT = 0x12,XmSCROLL_BAR_BIT = 0x13,XmSCROLLED_WINDOW_BIT = 0x14,XmSELECTION_BOX_BIT = 0x15,XmSEPARATOR_BIT = 0x16,XmSEPARATOR_GADGET_BIT = 0x17,XmTEXT_BIT = 0x18,XmTOGGLE_BUTTON_BIT = 0x19,XmTOGGLE_BUTTON_GADGET_BIT = 0x1A,XmDROP_TRANSFER_BIT = 0x1B,XmDROP_SITE_MANAGER_BIT = 0x1C,XmDISPLAY_BIT = 0x1D,XmSCREEN_BIT = 0x1E,XmARROW_BUTTON_BIT = 0x20,XmARROW_BUTTON_GADGET_BIT = 0x21,XmBULLETIN_BOARD_BIT = 0x22,XmDRAWING_AREA_BIT = 0x23,XmFILE_SELECTION_BOX_BIT = 0x24,XmFRAME_BIT = 0x25,XmMESSAGE_BOX_BIT = 0x26,XmSASH_BIT = 0x27,XmSCALE_BIT = 0x28,XmPANED_WINDOW_BIT = 0x29,XmVENDOR_SHELL_BIT = 0x2A,XmCLIP_WINDOW_BIT = 0x2B,XmDRAG_ICON_BIT = 0x2C,XmTEAROFF_BUTTON_BIT = 0x2D,XmDRAG_OVER_SHELL_BIT = 0x2E,XmDRAG_CONTEXT_BIT = 0x2F,XmFAST_SUBCLASS_TAIL_BIT = 0x30,};
struct $F1C455A40F8068619788DEC05B45D2AF {int reason;XEvent *event;Window window;int click_count;};
struct $F1D5D2FEA615795AC1E5DD0F3D89527E {XieLevels levels;float luma_red;float luma_green;float luma_blue;XieConstant bias;XieGamutTechnique gamut_tech;XiePointer gamut_param;};
struct $F1DC5359840258F1056D6AC9280CBC0A {CARD8 len;INT8 delta;};
struct $F1FFDF0E76C6F940FFACBA8A13B33CEB {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD32 focus;CARD32 time;CARD8 revertTo;CARD8 device;CARD16 pad01;};
enum $F2011E9C2552B036D6D2F02AACD7A7DD {PAL = 0x0,OP = 0x1,FOP = 0x2,MEM = 0x3,MEM1 = 0x4,FMEM = 0x5,JSR = 0x6,BRA = 0x7,FBRA = 0x8,ILL = 0x9,};
struct $F214F0AF1C93EA1431E8CE2CBA00144B {int firstPos;int length;char *ptr;unsigned __int64 format;};
struct $F21D8018CF145B47A329D27C35E96B99 {CARD8 reqType;BOOL oddLength;CARD16 length;CARD32 fid;};
enum $F28B36ADFFCBF05BF68859CF29BA8C42 {WOBJ_INFO_ILINEMAX = 0x0,};
struct $F2C3184CEEDD49A7FB665043E59AF1F0 {XcmsFloat L_star;XcmsFloat u_star;XcmsFloat v_star;};
struct $F2ECD6480817AB9433FAAAFCD2A3757B {CARD8 reqType;CARD8 securityReqType;CARD16 length;CARD16 nbytesAuthProto;CARD16 nbytesAuthData;CARD32 valueMask;};
struct $F2F68253C9272520B7115D75148C961A {unsigned int len;rapi_format_t form;union $F2F68253C9272520B7115D75148C961A::$D1140D2CF673DD2222FE8529E115D83B adsbody_u;};
union $F2F68253C9272520B7115D75148C961A::$D1140D2CF673DD2222FE8529E115D83B {qos_adspecx_t adsx;IS_adsbody_t ISa;};
struct $F300B49C7821C4D9EE0174AC70A46F26 {BYTE type;CARD8 what;CARD16 sequenceNumber;CARD32 length;CARD8 unused[12];CARD32 numPaths;BYTE pad[8];};
struct $F31C3FA128807C4E1C8A16E645E8E9B0 {CARD8 reqType;CARD8 opcode;CARD16 length;pexEnumTypeIndex fpFormat;CARD16 unused;pexPhigsWks wks;pexBitmask itemMask0;pexBitmask itemMask1;};
enum $F31EAA3A8460C669313F2AF0A352AAF2 {XmGEO_ROW_MAJOR = 0x0,XmGEO_COLUMN_MAJOR = 0x1,};
enum $F32EAA3B37BA8577B56522F9C3DD088B {RAPI_QOS_TSPEC = 0x1,RAPI_QOS_CNTR_LOAD = 0x2,RAPI_QOS_GUARANTEED = 0x3,};
struct $F3865DA4DAB27EA9EE192F5975BA54C3 {CARD8 error;CARD8 code;CARD16 sequenceNum;CARD32 floID;CARD16 minorOpcode;CARD8 majorOpcode;CARD8 floErrorCode;CARD32 nameSpace;xieTypPhototag phototag;CARD16 type;CARD8 operator;CARD8 pad[11];};
struct $F38DCD124B444AE28722F96474B80F5D {BYTE type;CARD8 nElts;CARD16 sequenceNumber;CARD32 length;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct $F39F3704E07D4C1E979E708C92BB34C7 {unsigned __int64 lastConfigureRequest;Boolean useAsyncGeometry;};
struct $F3EFAA27463B93CC96181BFE5F29A4C5 {CARD8 reqType;CARD8 mode;CARD16 length;CARD32 time;};
struct $F3F3BF8BE106A877DE7FC4D65D49358E {CARD8 class;CARD8 id;CARD16 length;INT8 percent;BYTE pad1;BYTE pad2;BYTE pad3;INT16 pitch;INT16 duration;};
struct $F41003F3EB873DD80AB5DD20097CFB12 {CARD16 oc_opcode;CARD16 oc_length;CARD16 shape;pexSwitch ignoreEdges;CARD8 unused;pexColorType colorType;pexBitmaskShort facetAttribs;pexBitmaskShort vertexAttribs;CARD16 unused2;};
enum $F413FB130807CE2045080C3C00838D77 {TK_DEFER_EVENT = 0x0,TK_PROCESS_EVENT = 0x1,TK_DISCARD_EVENT = 0x2,};
struct $F45EAA3ACE353930A02675094AE49F50 {CARD8 event;CARD8 pad1;CARD16 sequenceNum;CARD32 time;CARD32 instanceNameSpace;CARD32 instanceFloID;xieTypPhototag src;CARD16 type;xieTypColorList colorList;xieTypColorAllocTechnique colorAllocTechnique;CARD16 pad2;CARD32 data;};
struct $F464FEA7A4E5B570917C7E6E5C96B7A9 {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD32 statusCode;CARD32 finishedFlag;CARD32 dataLen;CARD32 pad1;CARD32 pad2;CARD32 pad3;};
struct $F466B234F46A211DC597B6DC6FDB33CA {CARD8 type;CARD8 pad00;CARD16 sequenceNumber;CARD32 pad02;CARD32 pad03;CARD32 pad04;CARD32 pad05;CARD32 pad06;CARD32 pad07;CARD32 pad08;};
struct $F468653D871AA8B3B8DDCC9FD42507EA {pexNameSet incl;pexNameSet excl;};
struct $F50E754B3FE25A5F36C91CED3CCA3FAC {unsigned __int64 count;struct $F50E754B3FE25A5F36C91CED3CCA3FAC::$0C74B2D7818E1FF043323789D3B39785 scope_record[1];};
struct $F50E754B3FE25A5F36C91CED3CCA3FAC::$0C74B2D7818E1FF043323789D3B39785 {unsigned __int64 begin_address;unsigned __int64 end_address;unsigned __int64 handle_address;unsigned __int64 jmp_target;};
struct $F52D9FC92091A8183F87E95DDBDC622D {CARD8 reqType;BYTE pad;CARD16 length;CARD32 srcWid;CARD32 dstWid;INT16 srcX;INT16 srcY;CARD16 srcWidth;CARD16 srcHeight;INT16 dstX;INT16 dstY;};
struct $F571D10236F18BD99A11DF3B50D0C123 {CARD8 reqType;CARD8 dpmsReqType;CARD16 length;CARD16 standby;CARD16 suspend;CARD16 off;CARD16 pad0;};
struct $F57445CCAF99E2554B974CAECD301767 {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD32 time;CARD8 deviceid;BYTE pad1;BYTE pad2;BYTE pad3;};
struct $F59D04B0C8CB7EEEB0B4D7B3465C3DC6 {unsigned int modify;};
struct $F5CE2AC708A5E5FB8EE969C783D694D1 {BYTE type;CARD8 what;CARD16 sequenceNumber;CARD32 length;CARD16 majorVersion;CARD16 minorVersion;CARD32 release;CARD32 lengthName;CARD32 subsetInfo;BYTE pad[8];};
struct $F5D530A8B9C8144C513F035766B8BD9F {Elf32_Word st_name;Elf32_Addr st_value;Elf32_Word st_size;unsigned __int8 st_info;unsigned __int8 st_other;Elf32_Half st_shndx;};
struct $F64623C8F0FC842A7325FB19F91FB4EA {__int16 screen;ws_screen_box adj_screens;};
struct $F6748E39AC4CFC0C9859EECCA2609F48 {PEXCoord point;PEXColorCIE cie;PEXVector normal;};
struct $F675BDF53526FE111F90F6AA3162BBE6 {PEXCoord point;PEXColorHSV hsv;PEXVector normal;unsigned int edge;};
struct $F683121DA6B0B811B23B9D483FF7482A {CARD8 reqType;BYTE pad;CARD16 length;CARD32 requestor;CARD32 selection;CARD32 target;CARD32 property;CARD32 time;};
struct $F693157FC14BE125AA101C7D6E91496D {float hue;float lightness;float saturation;};
enum $F6A1388A541021B5B6B649D33F41010C {XmSTRING_DIRECTION_L_TO_R = 0x0,XmSTRING_DIRECTION_R_TO_L = 0x1,XmSTRING_DIRECTION_REVERT = 0x2,XmSTRING_DIRECTION_DEFAULT = 0xFF,};
struct $F6ADA265534CFADF890687EBC6C724DD {CARD8 reqType;CARD8 opcode;CARD16 length;pexRenderer rdr;pexStructure sid;CARD16 position1_whence;CARD16 unused1;INT32 position1_offset;CARD16 position2_whence;CARD16 unused2;INT32 position2_offset;};
struct $F6C009117E8AD953F2A233F42B8BDE73 {XvPortID base_id;unsigned __int64 num_ports;char type;char *name;unsigned __int64 num_formats;XvFormat *formats;unsigned __int64 num_adaptors;};
struct $F6C3BF0B1FCDB347DB52C56391A2DECC {CARD16 oc_opcode;CARD16 oc_length;CARD16 shape;pexSwitch ignoreEdges;CARD8 contourHint;pexColorType colorType;pexBitmaskShort facetAttribs;pexBitmaskShort vertexAttribs;CARD16 unused2;CARD32 numLists;};
struct $F6C3C1B525E5D9083992CA7BC940FFA7 {__int64 flags;Window wm_window;};
struct $F6FE87F77CDBCE6AEFBEBE5715A64548 {PEXCoord point;PEXColorRGB8 rgb8;PEXVector normal;unsigned int edge;};
enum $F6FEA3F178599BC0F45BECAF27371307 {WOBJ_SYM_LINE = 0x0,WOBJ_SYM_DNR = 0x1,WOBJ_SYM_PDR = 0x2,WOBJ_SYM_LSYM = 0x3,WOBJ_SYM_OPT = 0x4,WOBJ_SYM_AUX = 0x5,WOBJ_SYM_LSS = 0x6,WOBJ_SYM_ESS = 0x7,WOBJ_SYM_FDR = 0x8,WOBJ_SYM_RFD = 0x9,WOBJ_SYM_ESYM = 0xA,};
struct $F7142754C0787A485CC65A74C3199286 {char name[30];uchar type;uchar operation;caddr_t addr;ulong min_val;ulong max_val;ulong val_size;};
struct $F7446975C55749A71CEAB0EBF4BA1233 {CARD16 oc_opcode;CARD16 oc_length;INT32 gdpId;CARD32 numPoints;CARD32 numBytes;};
struct $F74C58FB87560BF9B04D2E458E104A4F {coff_uint l_name;coff_uint l_time_stamp;coff_uint l_checksum;coff_uint l_version;coff_uint l_flags;};
struct $F74CA432E7D03616834F5337BAB60276 {unsigned int len;rapi_format_t form;union $F74CA432E7D03616834F5337BAB60276::$3C94EF05FF19415CBB432B7CB2E2CE9F specbody_u;};
union $F74CA432E7D03616834F5337BAB60276::$3C94EF05FF19415CBB432B7CB2E2CE9F {rapi_qos_flowspecx_t qosx;IS_specbody_t IS;};
struct $F7930C5E39C3A0E822EC3E3932879963 {CARD8 reqType;CARD8 opcode;CARD16 length;pexStructure sid;INT32 label;INT32 offset;};
struct $F7C4AF0C299213A9A4902C0AE54D7168 {EQTime time;__int16 device;__int16 screen;__int16 axis[2];};
struct $F7C58847402F98512A3CECB471924E15 {BYTE type;CARD8 what;CARD16 sequenceNumber;CARD32 length;CARD32 unused;CARD32 numEntries;BYTE pad[16];};
struct $F8053EE2B7682B2915A9050257DB66E9 {PEXStructure sid;float priority;};
struct $F80E3F154E69694439090B67229FB6AA {CARD8 reqType;CARD8 keyCodes;CARD16 length;CARD8 firstKeyCode;CARD8 keySymsPerKeyCode;CARD16 pad1;};
struct $F832CFFAF2818E9C726579BA4E827438 {CARD16 oc_opcode;CARD16 oc_length;CARD32 id;CARD16 numElements;CARD16 unused;};
struct $F8536B884003ADBD90188302B8AD267C {CARD8 reqType;BYTE pad;CARD16 length;CARD32 window;CARD16 nAtoms;INT16 nPositions;};
struct $F87A538C433C2C2FB670457A634B5AF2 {__int16 x;__int16 y;unsigned __int16 flags;};
struct $F88DFF0D39F146217256B482FD360ACC {CARD8 reqType;BYTE mode;CARD16 length;};
struct $F89A167C1B0B0C57C5FF404376C1C5C6 {Cardinal number;Cardinal maximum;_XmHighlightRec *list;};
struct $F96993B2B44FAB3F477408FCA8DAD614 {__int16 screen;__int16 map;ws_color_cell *cells;__int16 start;__int16 ncells;};
struct $F990290BD86FA48CB8793CE0158E6C29 {CARD8 reqType;CARD8 opcode;CARD16 length;pexRenderer rdr;};
struct $F9A11BF5FCA53245437FD040CE8F0807 {CARD8 first;CARD8 last;};
struct $F9ED97278D4922C5DE254E13FEAC389D {int type;unsigned __int64 serial;int send_event;Display *display;Window event;Window window;int x;int y;};
struct $FA2B9565724F1937A519136AEB6F7A9B {int type;Display *display;unsigned __int64 flo_id;unsigned __int64 serial;unsigned __int8 error_code;unsigned __int8 request_code;unsigned __int8 minor_code;unsigned int flo_error_code;unsigned __int64 name_space;XiePhototag phototag;unsigned int elem_type;};
struct $FA3B14A7309A2578B5ECA45335F5CCCF {unsigned __int16 count;PEXFont *fonts;};
struct $FA3EEE6C60B55C95D527C391867C4F4E {int type;FSServer *server;FSID resourceid;unsigned __int64 serial;unsigned __int8 error_code;unsigned __int8 request_code;unsigned __int8 minor_code;};
struct $FA4FE0B2CA883E06053CBA1706060353 {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;CARD32 atom;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct $FA6EA66DC9648EA143E0BD3CB188364C {float32_t spec_Tspec_b;float32_t spec_Tspec_r;float32_t spec_Tspec_p;uint32_t spec_Tspec_m;uint32_t spec_Tspec_M;};
enum $FACF11112FF3C64C36F0038ED540F00E {SecSuspendAudit = 0x0,SecConfigAudit = 0x1,SecWriteAudit = 0x2,SecExecSUID = 0x3,SecChmodSUGID = 0x4,SecChown = 0x5,SecAcct = 0x6,SecLimit = 0x7,SecLock = 0x8,SecLinkDir = 0x9,SecMknod = 0xA,SecMount = 0xB,SecSysAttr = 0xC,SecProcIdent = 0xD,SecChroot = 0xE,SecDebug = 0xF,SecShutdown = 0x10,SecFilesys = 0x11,SecRemote = 0x12,SecKill = 0x13,SecOwner = 0x14,SecChpriv = 0x15,SecAllowDAC = 0x16,SecSUCompat = 0x17,SecSUPropagate = 0x18,SecDowngrade = 0x19,SecWriteupClrnce = 0x1A,SecWriteupSyshi = 0x1B,SecMultdir = 0x1C,SecAllowMAC = 0x1D,SecAllowILB = 0x1E,SecILNoFloat = 0x1F,SecAllowTpathAccess = 0x20,SecObjReuseOverride = 0x21,SecPrivSessionMgmt = 0x22,SecAllowWinDevAccess = 0x23,SecUseMach = 0x24,SecNetNoAuth = 0x25,SecNetPrivAddr = 0x26,SecNetBroadcast = 0x27,SecNetRawAccess = 0x28,SecNetSetId = 0x29,SecNetPrivSession = 0x2A,SecNetAllowNetAccess = 0x2B,SecMaxPriv = 0x2C,};
struct $FB072D968CB0AF5035597B3EA817C0B9 {ulong start;ulong end;ulong stride;ulong res0;};
struct $FB24926AE1EFC7E0BDF3D4F4D3C430D1 {char type[6];__int16 mm_width;__int16 mm_height;__int16 color_or_mono;__int16 phosphor_type;};
struct $FB619B5CE8E6B82A3D0938CCE57F62CA {CARD8 reqType;BYTE mode;CARD16 length;CARD8 hostFamily;BYTE pad;CARD16 hostLength;};
struct $FB998CC7814FFEB90CA8E529D9C8D308 {int type;unsigned __int64 serial;int send_event;Display *display;XSecurityAuthorization auth_id;};
union $FBD4101F087A04B0F54F996301A8D934 {PEXColorIndexed *strchr;PEXColorRGB *rgb;PEXColorHSV *hsv;PEXColorHLS *hls;PEXColorCIE *cie;PEXColorRGB8 *rgb8;PEXColorRGB16 *rgb16;PEXVector *normal;PEXColorIndexedNormal *index_normal;PEXColorRGBNormal *rgb_normal;PEXColorCIENormal *cie_normal;PEXColorHSVNormal *hsv_normal;PEXColorHLSNormal *hls_normal;PEXColorRGB8Normal *rgb8_normal;PEXColorRGB16Normal *rgb16_normal;};
struct $FC067DEDDE18A65B7B77DF0D808EC43F {unsigned int changed;Position slider_x;Position slider_y;Dimension slider_width;Dimension slider_height;Dimension canvas_width;Dimension canvas_height;};
struct $FC337C14BCBDECA00DCC27939432018D {pexEnumTypeIndex lineType;pexEnumTypeIndex polylineInterp;pexEnumTypeIndex curveApprox_method;CARD16 unused1;PEXFLOAT curveApprox_tolerance;PEXFLOAT lineWidth;pexColorType lineColorType;CARD16 unused2;};
struct $FC3BB1A81303FA005E7D17D8401F89AB {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD8 deviceid;CARD8 feedbackid;CARD8 feedbackclass;INT8 percent;};
struct $FCBEDAD8A539FBE868C0633AE68719B3 {BYTE type;CARD8 unused;CARD16 sequenceNumber;CARD32 length;CARD32 rootWindow;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct $FCC23D59EDC7C9AEBCA8416FDF631F7E {CARD8 reqType;BYTE pad;CARD16 length;CARD32 window;CARD32 valueMask;};
struct $FCD37105EE9C7A1110168FA8A75F7BD1 {XtPointer next_extension;XrmQuark record_type;__int64 version;Cardinal record_size;XtGeometryHandler root_geometry_manager;};
struct $FCE16AE268B388C13B857015D638E9ED {BYTE type;BYTE request;CARD16 sequenceNumber;CARD32 length;fsTimestamp timestamp;CARD8 major_opcode;CARD8 minor_opcode;CARD16 pad;};
enum $FCF7146F21D65165DF73AAE311CA591D {XawChainTop = 0x0,XawChainBottom = 0x1,XawChainLeft = 0x2,XawChainRight = 0x3,XawRubber = 0x4,};
struct $FD24C124EC918F75BF8194FC7995E204 {CARD8 majorOpcode;CARD8 minorOpcode;CARD8 dialogType;CARD8 unused;CARD32 length;};
struct $FD6C4FAF03DFC9FB76C7E4C6C4684DAE {__int16 helpindx;char sect_id[3];char msg_id[3];char *msgtextp;};
struct $FD8FCB430836D04139012301F63EB9C6 {CARD8 reqType;CARD8 ReqType;CARD16 length;CARD32 start;CARD32 stop;CARD8 deviceid;BYTE pad1;BYTE pad2;BYTE pad3;};
struct $FDD7DE25BC7A5BEEF6AF4C8CFC8ACEEC {int value;int maximum;int minimum;unsigned __int8 orientation;unsigned __int8 processing_direction;XmString title;XmFontList font_list;XFontStruct *font_struct;Boolean show_value;__int16 decimal_points;Dimension scale_width;Dimension scale_height;Dimension highlight_thickness;Boolean highlight_on_enter;XtCallbackList drag_callback;XtCallbackList value_changed_callback;int last_value;int slider_size;GC foreground_GC;int show_value_x;int show_value_y;int show_value_width;int show_value_height;int scale_multiple;};
struct $FDEF638EE31B74BBB9D41AD628E95644 {Window frame;Window window;Widget shell;unsigned __int8 flags;unsigned __int8 dragProtocolStyle;int xOrigin;int yOrigin;unsigned int width;unsigned int height;unsigned int depth;XtPointer iccInfo;};
struct $FDFBD601B4BD2833D8A740F2A9550A80 {CARD8 reqType;CARD8 data;CARD16 length;CARD32 pad;};
struct $FE8C559F4B68F5A3A5D9DBCE5E9919CF {BYTE type;CARD8 success;CARD16 sequenceNumber;CARD32 length;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct $FE9896265ABA69989620FFBB2F6B5FBF {CorePart core;CompositePart composite;ShellPart shell;WMShellPart wm;VendorShellPart vendor;};
struct $FEBFEE01B5FAFB8592D57D9F074EE903 {coff_long value;coff_int iss;unsigned int index;};
struct $FEC8B8888F3B689040694BF1F630E941 {CARD8 reqType;BOOL ownerEvents;CARD16 length;CARD32 grabWindow;CARD16 modifiers;CARD8 key;BYTE pointerMode;BYTE keyboardMode;BYTE pad1;BYTE pad2;BYTE pad3;};
struct $FED59B4CD78CD28406B031702718F8F9 {int type;unsigned __int64 serial;int send_event;Display *display;Window window;Atom selection;Time time;};
struct $FF07158C3282A916C3A4C5C72C8100CA {CARD8 reqType;CARD8 minor_opcode;CARD16 length;CARD32 pad;XETrapInputReq input;};
enum $FF1FF5DA5604B4B1711E513F8BAF3747 {XmFOCUS_IN = 0x0,XmFOCUS_OUT = 0x1,XmENTER = 0x2,XmLEAVE = 0x3,};
struct $FF2B271BD07173775CE163A4BE842405 {CARD8 reqType;BYTE pad;CARD16 length;CARD32 window;CARD32 parent;INT16 x;INT16 y;};
struct $FF56E9D6D5D7C441ED6112F694E94713 {CARD16 composition;CARD16 unused;pexMatrix matrix;};
struct $FF7AFAF63B51BBA04C101CD1E944BFE9 {CARD16 oc_opcode;CARD16 oc_length;PEXFLOAT origin_x;PEXFLOAT origin_y;PEXFLOAT origin_z;PEXFLOAT vector1_x;PEXFLOAT vector1_y;PEXFLOAT vector1_z;PEXFLOAT vector2_x;PEXFLOAT vector2_y;PEXFLOAT vector2_z;CARD16 numEncodings;CARD16 unused;};
struct $FF8B70C3EB5683862853208A738C6C2E {unsigned __int16 first;unsigned __int16 last;};
struct $FF9246841A32B78E17B3644398C154C0 {BYTE type;BYTE deviceid;CARD16 sequenceNumber;CARD8 buttons[28];};
struct $FF9B1DD50FB073539D263E5AEFD0C460 {__int16 foreground;__int16 background;bool init;};
struct $FF9E0829D4BFAF4C1169A90A8DBCD82A {IS_main_hdr_t spec_mh;union $FF9E0829D4BFAF4C1169A90A8DBCD82A::$C7FC5D63990ACB1006743399D40CD583 spec_u;};
union $FF9E0829D4BFAF4C1169A90A8DBCD82A::$C7FC5D63990ACB1006743399D40CD583 {CL_flowspec_t CL_spec;Guar_flowspec_t G_spec;};
struct $FFE7078D4C82F06150AB4DDF0854500B {CARD8 reqType;CARD8 opcode;CARD16 length;pexEnumTypeIndex fpFormat;pexTableIndex strchr;pexPhigsWks wks;};
struct ACCESS3args {nfs_fh3 object;uint32 access;};
struct ACCESS3res {nfsstat3 status;union ACCESS3res::$BCC91F14EA47E4565CA39B38A6B5ED84 res_u;};
union ACCESS3res::$BCC91F14EA47E4565CA39B38A6B5ED84 {ACCESS3resok ok;ACCESS3resfail fail;};
struct ACCESS3resfail {post_op_attr obj_attributes;};
struct ACCESS3resok {post_op_attr obj_attributes;uint32 access;};
typedef enum $EDBA1914F16BC538415B0E0A3A3FD3BB ACTION;
struct AFILE {FILE *AF_iop;int AF_maxsiz;int AF_maxatr;int AF_errs;char *AF_dflt;struct ENT AF_cent;struct ENT AF_dent;};
typedef struct AFILE *AFILE_t;
typedef struct aouthdr AOUTHDR;
typedef struct ar_hdr ARHDR;
typedef struct _ARRAY16 ARRAY16;
typedef struct _ARRAY16 *ARRAY16Ptr;
typedef struct _ARRAY32 ARRAY32;
typedef struct _ARRAY32 *ARRAY32Ptr;
typedef struct _ARRAY8 ARRAY8;
typedef struct _ARRAY8 *ARRAY8Ptr;
typedef struct _ARRAYofARRAY8 ARRAYofARRAY8;
typedef struct _ARRAYofARRAY8 *ARRAYofARRAY8Ptr;
struct ATTR {char *AT_name;char *AT_value;char *AT_nvalue;};
typedef struct ATTR *ATTR_t;
typedef struct __auth AUTH;
typedef enum AUTH_PW_funcs AUTH_PW_FUNC_T;
enum AUTH_PW_funcs {AUTH_pw_init = 0x0,AUTH_pw_okpassword = 0x1,AUTH_pw_genpassword = 0x2,AUTH_pw_encrypt = 0x3,AUTH_pw_numcrypts = 0x4,AUTH_pw_maxcryptlen = 0x5,AUTH_pw_cryptname = 0x6,AUTH_pw_nsymbols = 0x7,AUTH_pw_limit = 0x8,};
typedef union $4DE226F9B44EBBD1EF7A8B9F155EFB38 AUXU;
typedef int (*ActionProc)();
typedef void (*AddWidgetProc)(XmTextSource, XmTextWidget);
typedef struct _alternate AlternateServer;
typedef struct $EA67C4467E5D392AEC3890F142F1A94F ApplicationShellClassPart;
typedef struct _ApplicationShellClassRec ApplicationShellClassRec;
typedef struct $B29B9FE84B7739E1FA46EBF1C4FF2A7F ApplicationShellPart;
typedef struct $CFC98DDC8C48D7D4D5B40C9CE62D3BBC ApplicationShellRec;
typedef struct $CFC98DDC8C48D7D4D5B40C9CE62D3BBC *ApplicationShellWidget;
typedef struct _ApplicationShellClassRec *ApplicationShellWidgetClass;
typedef struct $C4D830AACD6CA9C030EA39190076ECCB Arg;
typedef struct $C4D830AACD6CA9C030EA39190076ECCB *ArgList;
typedef struct $206232A1F4DF974AC8674D33D98F259E AsciiClassPart;
typedef struct $C27349E911C05D67A3CDE5223EF63BE9 AsciiPart;
typedef struct _AsciiRec AsciiRec;
typedef struct _AsciiSinkClassPart AsciiSinkClassPart;
typedef struct _AsciiSinkClassRec AsciiSinkClassRec;
typedef struct _AsciiSinkRec *AsciiSinkObject;
typedef struct _AsciiSinkClassRec *AsciiSinkObjectClass;
typedef struct $667A80580C2B27C0BD2A5ACA896720B8 AsciiSinkPart;
typedef struct _AsciiSinkRec AsciiSinkRec;
typedef struct _AsciiSrcClassPart AsciiSrcClassPart;
typedef struct _AsciiSrcClassRec AsciiSrcClassRec;
typedef struct _AsciiSrcRec *AsciiSrcObject;
typedef struct _AsciiSrcClassRec *AsciiSrcObjectClass;
typedef struct _AsciiSrcPart AsciiSrcPart;
typedef struct _AsciiSrcRec AsciiSrcRec;
typedef struct _AsciiTextClassRec AsciiTextClassRec;
typedef struct _AsciiTextClassRec *AsciiTextWidgetClass;
typedef struct _AsciiRec *AsciiWidget;
typedef struct aentry Assign_entry;
typedef struct atable Assign_table;
typedef unsigned __int64 Atom;
typedef struct _AtomRec *AtomPtr;
typedef CARD16 BITS16;
typedef CARD32 BITS32;
typedef CARD64 BITS64;
typedef CARD8 BOOL;
typedef struct $4765C1F51897B418A8E425F31FA3A750 BTREEINFO;
typedef CARD8 BYTE;
typedef char Boolean;
typedef struct $206232A1F4DF974AC8674D33D98F259E BoxClassPart;
typedef struct _BoxClassRec BoxClassRec;
typedef struct $933A36EE691D194FA132289C1144F4D8 BoxPart;
typedef struct _BoxRec BoxRec;
typedef struct _BoxRec *BoxWidget;
typedef struct _BoxClassRec *BoxWidgetClass;
typedef struct _BufDesc BufDesc;
typedef struct _BufDesc *BufDescPtr;
typedef unsigned __int16 CARD16;
typedef CARD16 *CARD16Ptr;
typedef unsigned int CARD32;
typedef CARD32 *CARD32Ptr;
typedef unsigned __int64 CARD64;
typedef unsigned __int8 CARD8;
typedef CARD8 *CARD8Ptr;
typedef struct __catalog_descriptor CATD;
typedef struct cat_ent CAT_ENT;
typedef struct cat_ptr CAT_PTR;
typedef struct cat_rel CAT_REL;
typedef struct $2520325224AFAD0311F021063A0B3716 CFDR;
typedef struct $BCBC142657F91A737E770A1501BA1906 CHDRR;
typedef struct __client CLIENT;
typedef enum $EA15948D1F9B99548B9F82A14FE7C2E2 CLU_OP;
typedef struct $758719D696A47A3B45663A4074A17653 CL_flowspec_t;
typedef struct $8AE613A18B7427E854A96FDED82C075E CM;
struct CMA_T_ALERT_STATE {cma_t_integer state1;cma_t_integer state2;};
enum CMA_T_DBG_STATUS {cma_s_dbg_success = 0x0,cma_s_dbg_quit = 0x1,cma_s_dbg_nonesel = 0x2,cma_s_dbg_successpend = 0x3,cma_s_dbg_nopriv = 0xFFFFFFFF,cma_s_dbg_invparam = 0xFFFFFFFE,cma_s_dbg_invseq = 0xFFFFFFFD,cma_s_dbg_inconstate = 0xFFFFFFFC,cma_s_dbg_corrupt = 0xFFFFFFFB,cma_s_dbg_invoption = 0xFFFFFFFA,cma_s_dbg_noarg = 0xFFFFFFF9,cma_s_dbg_invaddr = 0xFFFFFFF8,cma_s_dbg_invcmd = 0xFFFFFFF7,cma_s_dbg_nullcmd = 0xFFFFFFF6,cma_s_dbg_conflict = 0xFFFFFFF5,cma_s_dbg_unimpl = 0xFFFFFFF4,};
enum CMA_T_DETACH_STATE {cma_c_create_joinable = 0x0,cma_c_create_detached = 0x1,};
enum CMA_T_EXIT_STATUS {cma_c_term_error = 0x0,cma_c_term_normal = 0x1,cma_c_term_alert = 0x2,};
struct CMA_T_HANDLE {cma_t_natural field1;cma_t_natural field2;};
enum CMA_T_MUTEX_KIND {cma_c_mutex_fast = 0x0,cma_c_mutex_recursive = 0x1,cma_c_mutex_nonrecursive = 0x2,};
struct CMA_T_ONCE {cma_t_integer field1;cma_t_integer field2;cma_t_integer field3;};
enum CMA_T_SCHED_INHERIT {cma_c_sched_inherit = 0x0,cma_c_sched_use_default = 0x1,};
typedef struct cmd_elem CMD_ELEM;
typedef struct $E76DA6E4DEDA5761DD80AABA03E06984 CMHDR;
struct COMMIT3args {nfs_fh3 file;offset3 offset;count3 count;};
struct COMMIT3res {nfsstat3 status;union COMMIT3res::$7375445B622BC480C38364347647FC7B res_u;};
union COMMIT3res::$7375445B622BC480C38364347647FC7B {COMMIT3resok ok;COMMIT3resfail fail;};
struct COMMIT3resfail {wcc_data file_wcc;};
struct COMMIT3resok {wcc_data file_wcc;writeverf3 verf;};
struct COMPACT_RELOC {signed __int64 del_vaddr;};
struct COMPACT_RELOC_BASE {struct COMPACT_RELOC _rlc;unsigned __int64 base;};
struct COMPACT_RELOC_C {struct COMPACT_RELOC _rlc;unsigned __int64 addend_const;};
struct COMPACT_RELOC_C_BASE {struct COMPACT_RELOC _rlc;unsigned __int64 addend_const;unsigned __int64 base;};
typedef struct sigcontext CONTEXT;
typedef exc_address CONTEXT_POINTERS[64];
typedef struct $A294230BF0A95EA495C5F77EDF28DA69 COSTS;
struct CREATE3args {diropargs3 where;createhow3 how;};
struct CREATE3res {nfsstat3 status;union CREATE3res::$1344BCDC3351BD45A414A34C7BEA0F35 res_u;};
union CREATE3res::$1344BCDC3351BD45A414A34C7BEA0F35 {CREATE3resok ok;CREATE3resfail fail;};
struct CREATE3resfail {wcc_data dir_wcc;};
struct CREATE3resok {post_op_fh3 obj;post_op_attr obj_attributes;wcc_data dir_wcc;};
typedef struct crypt_data CRYPTD;
typedef struct $0398E3E4100D21BFF643C40E8C2A6EB3 CTL_MSG;
typedef struct $3F1DF86B3ED4ACB765D0831995228012 CTL_RESPONSE;
typedef unsigned int Cardinal;
typedef struct _Channel Channel;
typedef struct _Channel *ChannelPtr;
typedef void *ClientData;
typedef XPointer CloseHook;
typedef struct $AC76AD227EAB8DE7D81601D384404B42 Coff_Conflict;
typedef struct $9E389EF8DB18C75445DC45CE7C2FFB9B Coff_Dyn;
typedef struct $C2A8757161DECB1C750354EA1474746B Coff_Got;
typedef struct $F74C58FB87560BF9B04D2E458E104A4F Coff_Lib;
typedef struct $E6C90395DB517D514C5E9B6CF76ABC78 Coff_Msym;
typedef struct $C772EEB8BDF2D9B03BC2113DCD14FF9B Coff_Rel;
typedef struct $F5D530A8B9C8144C513F035766B8BD9F Coff_Sym;
typedef struct _ColorObjRec *ColorObj;
typedef struct _ColorObjClassRec *ColorObjClass;
typedef struct _ColorObjClassPart ColorObjClassPart;
typedef struct _ColorObjClassRec ColorObjClassRec;
typedef struct _ColorObjPart ColorObjPart;
typedef struct _ColorObjRec ColorObjRec;
typedef XID Colormap;
typedef PixelSet Colors[8];
typedef struct _CommandClass CommandClassPart;
typedef struct _CommandClassRec CommandClassRec;
typedef struct $90E8D3FA0E37CF99376412B163D592B9 CommandPart;
typedef struct _CommandRec CommandRec;
typedef struct _CommandRec *CommandWidget;
typedef struct _CommandClassRec *CommandWidgetClass;
typedef struct _ComposeRtrn ComposeRtrn;
typedef struct $1862A6A58DA65AFA2A748980F9D5B3C0 ComposeState;
typedef struct _ComposeStringTbl ComposeStringTbl;
typedef struct _ComposeTbl ComposeTbl;
typedef struct _ComposeTree ComposeTree;
typedef struct _ComposeTreeNode ComposeTreeNode;
typedef struct _ComposeTreeShortcut ComposeTreeShortcut;
typedef struct $20505914DF6138F7281CD6AEA85C4A3E *CompositeClassExtension;
typedef struct $20505914DF6138F7281CD6AEA85C4A3E CompositeClassExtensionRec;
typedef struct _CompositeClassPart CompositeClassPart;
typedef struct _CompositeClassRec CompositeClassRec;
typedef struct _CompositePart CompositePart;
typedef struct _CompositeClassPart *CompositePartPtr;
typedef struct _CompositePart *CompositePtr;
typedef struct _CompositeRec CompositeRec;
typedef struct _CompositeRec *CompositeWidget;
typedef struct _CompositeClassRec *CompositeWidgetClass;
typedef struct $6BC94B9DA2A62B07B82C2A2991E2CFBB *ConstraintClassExtension;
typedef struct $6BC94B9DA2A62B07B82C2A2991E2CFBB ConstraintClassExtensionRec;
typedef struct _ConstraintClassPart ConstraintClassPart;
typedef struct _ConstraintClassRec ConstraintClassRec;
typedef struct _ConstraintPart ConstraintPart;
typedef struct _ConstraintRec ConstraintRec;
typedef struct _ConstraintRec *ConstraintWidget;
typedef struct _ConstraintClassRec *ConstraintWidgetClass;
typedef struct _CoreClassPart CoreClassPart;
typedef struct _WidgetClassRec CoreClassRec;
typedef struct _CorePart CorePart;
typedef struct _WidgetRec CoreRec;
typedef struct _WidgetRec *CoreWidget;
typedef struct _WidgetClassRec *CoreWidgetClass;
typedef int (*CountLinesProc)(XmTextSource, XmTextPosition, unsigned __int64);
typedef XID Cursor;
typedef struct __db DB;
typedef struct $40D12B33886549BA307B7AD93661C6CF DBM;
typedef struct $29720D4B1372A72A8E922F3C51907D2B DBT;
typedef enum $B2A44DC877B17F2021CE46A73658A10E DBTYPE;
typedef struct $34ED46E58DBFFB45D3F1A07588A6DE09 *DECWmHints;
typedef struct $34ED46E58DBFFB45D3F1A07588A6DE09 DECWmHintsRec;
typedef union devgeom DEVGEOMST;
typedef struct dev_eei_status DEV_EEI_STATUS;
typedef struct $C6DF17FEFDED3C62C035491F44E93B01 DIR;
typedef struct $BC9F0C0545087BE05760F1130ACADBAF DISPATCHER_CONTEXT;
union DL_primitives {ulong dl_primitive;dl_info_req_t info_req;dl_info_ack_t info_ack;dl_attach_req_t attach_req;dl_detach_req_t detach_req;dl_bind_req_t bind_req;dl_bind_ack_t bind_ack;dl_unbind_req_t unbind_req;dl_subs_bind_req_t subs_bind_req;dl_subs_bind_ack_t subs_bind_ack;dl_subs_unbind_req_t subs_unbind_req;dl_ok_ack_t ok_ack;dl_error_ack_t error_ack;dl_connect_req_t connect_req;dl_connect_ind_t connect_ind;dl_connect_res_t connect_res;dl_connect_con_t connect_con;dl_token_req_t token_req;dl_token_ack_t token_ack;dl_disconnect_req_t disconnect_req;dl_disconnect_ind_t disconnect_ind;dl_reset_req_t reset_req;dl_reset_ind_t reset_ind;dl_reset_res_t reset_res;dl_reset_con_t reset_con;dl_unitdata_req_t unitdata_req;dl_unitdata_ind_t unitdata_ind;dl_uderror_ind_t uderror_ind;dl_udqos_req_t udqos_req;dl_enabmulti_req_t enabmulti_req;dl_disabmulti_req_t disabmulti_req;dl_promiscon_req_t promiscon_req;dl_promiscoff_req_t promiscoff_req;dl_phys_addr_req_t physaddr_req;dl_phys_addr_ack_t physaddr_ack;dl_set_phys_addr_req_t set_physaddr_req;dl_get_statistics_req_t get_statistics_req;dl_get_statistics_ack_t get_statistics_ack;dl_test_req_t test_req;dl_test_ind_t test_ind;dl_test_res_t test_res;dl_test_con_t test_con;dl_xid_req_t xid_req;dl_xid_ind_t xid_ind;dl_xid_res_t xid_res;dl_xid_con_t xid_con;dl_data_ack_req_t data_ack_req;dl_data_ack_ind_t data_ack_ind;dl_data_ack_status_ind_t data_ack_status_ind;dl_reply_req_t reply_req;dl_reply_ind_t reply_ind;dl_reply_status_ind_t reply_status_ind;dl_reply_update_req_t reply_update_req;dl_reply_update_status_ind_t reply_update_status_ind;dl_x25data_req_t x25data_req;dl_x25data_ind_t x25data_ind;};
typedef struct $F13911897449B4F8991BC40BBBE3CC48 DNR;
typedef struct DXML_c_conv_corr_structure DXML_C_CONV_CORR_STRUCTURE;
typedef struct DXML_c_fft_structure DXML_C_FFT_STRUCTURE;
typedef struct DXML_c_fft_structure_2d DXML_C_FFT_STRUCTURE_2D;
typedef struct DXML_c_fft_structure_3d DXML_C_FFT_STRUCTURE_3D;
typedef struct DXML_c_grp_fft_structure DXML_C_GRP_FFT_STRUCTURE;
typedef struct DXML_d_conv_corr_structure DXML_D_CONV_CORR_STRUCTURE;
typedef struct DXML_d_fct_structure DXML_D_FCT_STRUCTURE;
typedef struct DXML_d_fft_structure DXML_D_FFT_STRUCTURE;
typedef struct DXML_d_fft_structure_2d DXML_D_FFT_STRUCTURE_2D;
typedef struct DXML_d_fft_structure_3d DXML_D_FFT_STRUCTURE_3D;
typedef struct DXML_d_fht_structure DXML_D_FHT_STRUCTURE;
typedef struct DXML_d_fst_structure DXML_D_FST_STRUCTURE;
typedef struct DXML_d_grp_fft_structure DXML_D_GRP_FFT_STRUCTURE;
typedef struct DXML_s_conv_corr_structure DXML_S_CONV_CORR_STRUCTURE;
typedef struct DXML_s_fct_structure DXML_S_FCT_STRUCTURE;
typedef struct DXML_s_fft_structure DXML_S_FFT_STRUCTURE;
typedef struct DXML_s_fft_structure_2d DXML_S_FFT_STRUCTURE_2D;
typedef struct DXML_s_fft_structure_3d DXML_S_FFT_STRUCTURE_3D;
typedef struct DXML_s_fht_structure DXML_S_FHT_STRUCTURE;
typedef struct DXML_s_fst_structure DXML_S_FST_STRUCTURE;
typedef struct DXML_s_grp_fft_structure DXML_S_GRP_FFT_STRUCTURE;
typedef struct DXML_z_conv_corr_structure DXML_Z_CONV_CORR_STRUCTURE;
typedef struct DXML_z_fft_structure DXML_Z_FFT_STRUCTURE;
typedef struct DXML_z_fft_structure_2d DXML_Z_FFT_STRUCTURE_2D;
typedef struct DXML_z_fft_structure_3d DXML_Z_FFT_STRUCTURE_3D;
typedef struct DXML_z_grp_fft_structure DXML_Z_GRP_FFT_STRUCTURE;
struct DXML_c_conv_corr_structure {int n_a;int n_b;int n_sig;int n_good_value;float *a_work_ptr;float *b_work_ptr;float *work_ptr;int work_size;DXML_S_FFT_STRUCTURE fft_struct;};
struct DXML_c_fft_structure {int n;int stride_1_flag;int n_ti[17];int n_k[17];int n_t[17];int type[17];int num_stages;float *rotation_vector;__int64 rotation_vector_size;float *temp_area;__int64 temp_area_size;int set_block_size;int num_non_special_radix;int non_special_radix[17];__int64 non_spec_rad_twiddle_size;float *non_spec_rad_twiddle_vec;float *non_special_radix_cos[17];float *non_special_radix_sin[17];int num_processors;int future_use[20];int gk[12];};
struct DXML_c_fft_structure_2d {DXML_C_FFT_STRUCTURE *x_structure_ptr;DXML_C_GRP_FFT_STRUCTURE *y_structure_ptr;int nx;int ny;char x_type[16];__int64 x_size;__int64 y_size;int stride_x_1_flag;float *temp_area;__int64 temp_area_size;int num_processors;int future_use[20];int gk[12];};
struct DXML_c_fft_structure_3d {DXML_C_FFT_STRUCTURE *x_structure_ptr;DXML_C_GRP_FFT_STRUCTURE *y_structure_ptr;DXML_C_GRP_FFT_STRUCTURE *z_structure_ptr;int nx;int ny;int nz;char x_type[16];__int64 x_size;__int64 y_size;__int64 z_size;int stride_x_1_flag;float *temp_area;__int64 temp_area_size;int num_processors;int future_use[20];int gk[12];};
struct DXML_c_grp_fft_structure {int n;int grp_stride_1_flag;int grp_block_size;int n_ti[17];int n_k[17];int n_t[17];int type[17];int num_stages;float *rotation_vector;__int64 rotation_vector_size;float *temp_area;__int64 temp_area_size;int num_non_special_radix;int non_special_radix[17];__int64 non_spec_rad_twiddle_size;float *non_spec_rad_twiddle_vec;float *non_special_radix_cos[17];float *non_special_radix_sin[17];int num_processors;int future_use[20];int gk[12];};
struct DXML_d_conv_corr_structure {int n_a;int n_b;int n_sig;int n_good_value;double *a_work_ptr;double *b_work_ptr;double *work_ptr;int work_size;DXML_D_FFT_STRUCTURE fft_struct;};
struct DXML_d_fct_structure {DXML_D_FHT_STRUCTURE fht_struct;int N;int type;int stride_1_flag;double *twiddle_pointer;__int64 twiddle_size;double *temp_array_ptr;int temp_array_size;int num_processors;int future_use[20];};
struct DXML_d_fft_structure {int n;int stride_1_flag;DXML_Z_FFT_STRUCTURE cv_struct;double *cos_recomb;double *sin_recomb;double *twiddle_recomb_pointer;__int64 twiddle_recomb_size;int num_processors;int future_use[20];};
struct DXML_d_fft_structure_2d {DXML_Z_FFT_STRUCTURE *x_structure_ptr;DXML_Z_GRP_FFT_STRUCTURE *y_structure_ptr;int nx;int ny;char x_type[16];int y_grp_block_size;int x_grp_block_size;__int64 x_size;__int64 y_size;int stride_x_1_flag;double *cos_recomb;double *sin_recomb;double *twiddle_recomb_pointer;__int64 twiddle_recomb_size;double *temp_area;__int64 temp_area_size;int num_processors;int future_use[20];int gk[12];};
struct DXML_d_fft_structure_3d {DXML_Z_FFT_STRUCTURE *x_structure_ptr;DXML_Z_GRP_FFT_STRUCTURE *y_structure_ptr;DXML_Z_GRP_FFT_STRUCTURE *z_structure_ptr;int nx;int ny;int nz;char x_type[16];int z_grp_block_size;int y_grp_block_size;int x_grp_block_size;__int64 x_size;__int64 y_size;__int64 z_size;int stride_x_1_flag;double *cos_recomb;double *sin_recomb;double *twiddle_recomb_pointer;__int64 twiddle_recomb_size;double *temp_area;__int64 temp_area_size;int num_processors;int future_use[20];int gk[12];};
struct DXML_d_fht_structure {int n;int stride_1_flag;int n_ti[17];int n_k[17];int n_t[17];int type[17];int num_stages;double *rotation_vector;__int64 rotation_vector_size;double *temp_area;__int64 temp_area_size;int set_block_size;int num_non_special_radix;int non_special_radix[17];__int64 non_spec_rad_twiddle_size;double *non_spec_rad_twiddle_vec;double *non_special_radix_cos[17];double *non_special_radix_sin[17];int num_processors;int future_use[20];int gk[12];};
struct DXML_d_fst_structure {DXML_D_FHT_STRUCTURE fht_struct;int N;int type;int stride_1_flag;double *twiddle_pointer;__int64 twiddle_size;double *temp_array_ptr;int temp_array_size;int num_processors;int future_use[20];};
struct DXML_d_grp_fft_structure {int n;int grp_stride_1_flag;DXML_Z_GRP_FFT_STRUCTURE cv_struct;double *cos_recomb;double *sin_recomb;double *twiddle_recomb_pointer;__int64 twiddle_recomb_size;int num_processors;int future_use[20];};
struct DXML_s_conv_corr_structure {int n_a;int n_b;int n_sig;int n_good_value;float *a_work_ptr;float *b_work_ptr;float *work_ptr;int work_size;DXML_S_FFT_STRUCTURE fft_struct;};
struct DXML_s_fct_structure {DXML_S_FHT_STRUCTURE fht_struct;int N;int type;int stride_1_flag;float *twiddle_pointer;__int64 twiddle_size;float *temp_array_ptr;int temp_array_size;int num_processors;int future_use[20];};
struct DXML_s_fft_structure {int n;int stride_1_flag;DXML_C_FFT_STRUCTURE cv_struct;float *cos_recomb;float *sin_recomb;float *twiddle_recomb_pointer;__int64 twiddle_recomb_size;int num_processors;int future_use[20];};
struct DXML_s_fft_structure_2d {DXML_C_FFT_STRUCTURE *x_structure_ptr;DXML_C_GRP_FFT_STRUCTURE *y_structure_ptr;int nx;int ny;char x_type[16];int y_grp_block_size;int x_grp_block_size;__int64 x_size;__int64 y_size;int stride_x_1_flag;float *cos_recomb;float *sin_recomb;float *twiddle_recomb_pointer;__int64 twiddle_recomb_size;float *temp_area;__int64 temp_area_size;int num_processors;int future_use[20];int gk[12];};
struct DXML_s_fft_structure_3d {DXML_C_FFT_STRUCTURE *x_structure_ptr;DXML_C_GRP_FFT_STRUCTURE *y_structure_ptr;DXML_C_GRP_FFT_STRUCTURE *z_structure_ptr;int nx;int ny;int nz;char x_type[16];int z_grp_block_size;int y_grp_block_size;int x_grp_block_size;__int64 x_size;__int64 y_size;__int64 z_size;int stride_x_1_flag;float *cos_recomb;float *sin_recomb;float *twiddle_recomb_pointer;__int64 twiddle_recomb_size;float *temp_area;__int64 temp_area_size;int num_processors;int future_use[20];int gk[12];};
struct DXML_s_fht_structure {int n;int stride_1_flag;int n_ti[17];int n_k[17];int n_t[17];int type[17];int num_stages;float *rotation_vector;__int64 rotation_vector_size;float *temp_area;__int64 temp_area_size;int set_block_size;int num_non_special_radix;int non_special_radix[17];__int64 non_spec_rad_twiddle_size;float *non_spec_rad_twiddle_vec;float *non_special_radix_cos[17];float *non_special_radix_sin[17];int num_processors;int future_use[20];int gk[12];};
struct DXML_s_fst_structure {DXML_S_FHT_STRUCTURE fht_struct;int N;int type;int stride_1_flag;float *twiddle_pointer;__int64 twiddle_size;float *temp_array_ptr;int temp_array_size;int num_processors;int future_use[20];};
struct DXML_s_grp_fft_structure {int n;int grp_stride_1_flag;DXML_C_GRP_FFT_STRUCTURE cv_struct;float *cos_recomb;float *sin_recomb;float *twiddle_recomb_pointer;__int64 twiddle_recomb_size;int num_processors;int future_use[20];};
struct DXML_z_conv_corr_structure {int n_a;int n_b;int n_sig;int n_good_value;double *a_work_ptr;double *b_work_ptr;double *work_ptr;int work_size;DXML_D_FFT_STRUCTURE fft_struct;};
struct DXML_z_fft_structure {int n;int stride_1_flag;int n_ti[17];int n_k[17];int n_t[17];int type[17];int num_stages;double *rotation_vector;__int64 rotation_vector_size;double *temp_area;__int64 temp_area_size;int set_block_size;int num_non_special_radix;int non_special_radix[17];__int64 non_spec_rad_twiddle_size;double *non_spec_rad_twiddle_vec;double *non_special_radix_cos[17];double *non_special_radix_sin[17];int num_processors;int future_use[20];int gk[12];};
struct DXML_z_fft_structure_2d {DXML_Z_FFT_STRUCTURE *x_structure_ptr;DXML_Z_GRP_FFT_STRUCTURE *y_structure_ptr;int nx;int ny;char x_type[16];__int64 x_size;__int64 y_size;int stride_x_1_flag;double *temp_area;__int64 temp_area_size;int num_processors;int future_use[20];int gk[12];};
struct DXML_z_fft_structure_3d {DXML_Z_FFT_STRUCTURE *x_structure_ptr;DXML_Z_GRP_FFT_STRUCTURE *y_structure_ptr;DXML_Z_GRP_FFT_STRUCTURE *z_structure_ptr;int nx;int ny;int nz;char x_type[16];__int64 x_size;__int64 y_size;__int64 z_size;int stride_x_1_flag;double *temp_area;__int64 temp_area_size;int num_processors;int future_use[20];int gk[12];};
struct DXML_z_grp_fft_structure {int n;int grp_stride_1_flag;int grp_block_size;int n_ti[17];int n_k[17];int n_t[17];int type[17];int num_stages;double *rotation_vector;__int64 rotation_vector_size;double *temp_area;__int64 temp_area_size;int num_non_special_radix;int non_special_radix[17];__int64 non_spec_rad_twiddle_size;double *non_spec_rad_twiddle_vec;double *non_special_radix_cos[17];double *non_special_radix_sin[17];int num_processors;int future_use[20];int gk[12];};
typedef struct $470449F8043B0E95436C3AE3811CEA11 Depth;
typedef struct $206232A1F4DF974AC8674D33D98F259E DialogClassPart;
typedef struct _DialogClassRec DialogClassRec;
typedef struct _DialogConstraintsRec *DialogConstraints;
typedef struct $206232A1F4DF974AC8674D33D98F259E DialogConstraintsPart;
typedef struct _DialogConstraintsRec DialogConstraintsRec;
typedef struct _DialogPart DialogPart;
typedef struct _DialogRec DialogRec;
typedef struct _DialogRec *DialogWidget;
typedef struct _DialogClassRec *DialogWidgetClass;
typedef unsigned __int16 Dimension;
typedef struct _XDisplay Display;
typedef void (*DrawInsertionPointProc)(XmTextWidget, XmTextPosition, OnOrOff);
typedef void (*DrawProc)(XmTextWidget, LineNum, XmTextPosition, XmTextPosition, XmHighlightMode);
typedef XID Drawable;
typedef struct enetn_s ENETN;
struct ENT {char *EN_name;char *EN_cbuf;ATTR_t EN_catr;ATTR_t EN_natr;};
typedef struct entry ENTRY;
typedef struct ENT *ENT_t;
typedef unsigned __int64 EQTime;
typedef struct _esnmp_allocation ESNMP_ALLOC;
typedef struct _esnmp_pdu ESNMP_PDU;
typedef struct _esnmp_registration ESNMP_REG;
typedef __pthreadExceptionObj_t EXCEPTION;
typedef enum _EXCEPTION_DISPOSITION EXCEPTION_DISPOSITION;
typedef int (*EXCEPTION_FILTER)(EXCEPTION_POINTERS *ExceptionPtr);
typedef struct _EXCEPTION_POINTERS EXCEPTION_POINTERS;
typedef struct $AC30A779F0124870026B9E7625809E9B EXTR;
typedef enum $0E64F95F8B8660ABA7845ADD323C20B1 EditResError;
typedef enum $E203AC54CF4949A66D893C858D3FE04C EditresCommand;
typedef struct $46F1A320ADC1A16D83880B1FB8D4BCA3 Element;
typedef struct $46F1A320ADC1A16D83880B1FB8D4BCA3 *ElementPtr;
typedef unsigned int Elf32_Addr;
typedef struct $160641F2D897670075418D2E6B733231 Elf32_Ehdr;
typedef union $04A2706E00298110DA579B11AD1FCB86 Elf32_Gptab;
typedef unsigned __int16 Elf32_Half;
typedef unsigned int Elf32_Off;
typedef struct $4788A0C65CEF1424AE2DE816674E1913 Elf32_Phdr;
typedef struct $000F54A3D2D1B2368C1E258AC0240D62 Elf32_RegInfo;
typedef struct $AAECD496E21460385AB9540869BF9C78 Elf32_Rela;
typedef struct $0F2B39C4889BFBA0BBC9C66D38A1F5D3 Elf32_Shdr;
typedef int Elf32_Sword;
typedef unsigned int Elf32_Word;
typedef CARD8 EventFlags[4];
typedef unsigned __int64 EventMask;
enum EvmBoolean_e {EvmFALSE = 0x0,EvmTRUE = 0x1,};
typedef enum EvmBoolean_e EvmBoolean_t;
typedef EvmOpaque_t EvmCallbackArg_t;
struct EvmCallbackData_s {EvmCallbackReason_t reason;EvmEvent_t event;EvmStatus_t status;EvmCallbackExtension_t extension;};
typedef struct EvmCallbackData_s EvmCallbackData_t;
struct EvmCallbackEventMissedData_s {EvmInt32_t missedCount;};
typedef struct EvmCallbackEventMissedData_s EvmCallbackEventMissedData_t;
typedef union EvmCallbackExtension_u EvmCallbackExtension_t;
union EvmCallbackExtension_u {EvmCallbackTemplateData_t templateData;EvmCallbackEventMissedData_t eventMissedData;EvmCallbackKBuffOverflowData_t kBuffOverflowData;};
struct EvmCallbackKBuffOverflowData_s {EvmInt32_t missedCount;};
typedef struct EvmCallbackKBuffOverflowData_s EvmCallbackKBuffOverflowData_t;
enum EvmCallbackReason_e {EvmREASON_POST_COMPLETE = 0x0,EvmREASON_EVENT_DELIVERED = 0x1,EvmREASON_SUBSCRIBE_COMPLETE = 0x2,EvmREASON_TEMPLATE_INFO_DELIVERED = 0x3,EvmREASON_REGISTRATION_DELIVERED = 0x4,EvmREASON_EVENTS_MISSED = 0x5,EvmREASON_KBUFF_OVERFLOW = 0x6,};
typedef enum EvmCallbackReason_e EvmCallbackReason_t;
struct EvmCallbackTemplateData_s {EvmPointer_t userArg;EvmBoolean_t resetToFirst;EvmPriority_t squelchLevel;};
typedef struct EvmCallbackTemplateData_s EvmCallbackTemplateData_t;
typedef void (*EvmCallback_t)(EvmConnection_t a_conn, EvmCallbackArg_t a_callbackArg, EvmCallbackData_t *a_callbackData);
typedef char EvmChar_t;
enum EvmConnControlRequest_e {EvmCONN_RCV_SZ_GET = 0x0,EvmCONN_RCV_SZ_SET = 0x1,EvmCONN_SND_SZ_GET = 0x2,EvmCONN_SND_SZ_SET = 0x3,EvmCONN_CHECKSUM_ENABLE = 0x4,EvmCONN_CHECKSUM_DISABLE = 0x5,EvmCONN_CHECKSUM_IS_ENABLED = 0x6,EvmCONN_IS_CLUSTER_ALIAS = 0x7,EvmCONN_REMOTE_IS_ON_CLUSTER = 0x8,EvmCONN_LOCAL_HOST_NAME_GET = 0x9,EvmCONN_LOCAL_IP_GET = 0xA,EvmCONN_REMOTE_HOST_NAME_GET = 0xB,EvmCONN_REMOTE_IP_GET = 0xC,EvmCONN_CLUSTER_LIST_GET = 0xD,EvmCONN_CLUSTER_HOST_IP_GET = 0xE,EvmCONN_POST_ITEM_MASK_SET = 0xF,EvmCONN_POST_ITEM_MASK_RESET = 0x10,EvmCONN_POST_NONBLOCK_SET = 0x11,};
typedef enum EvmConnControlRequest_e EvmConnControlRequest_t;
enum EvmConnectionType_e {EvmCONNECTION_POST = 0x0,EvmCONNECTION_LISTEN = 0x1,EvmCONNECTION_SERVICE = 0x2,};
typedef enum EvmConnectionType_e EvmConnectionType_t;
typedef struct EvmConnection_s *EvmConnection_t;
typedef const struct EvmEventHandle_s *EvmConstEvent_t;
typedef const EvmChar_t *EvmConstString_t;
typedef EvmUint32_t EvmCount_t;
struct EvmDomainSocketData_s {EvmString_t name;};
typedef double EvmDouble_t;
struct EvmEventHandle_s;
typedef EvmUint32_t EvmEventId_t;
typedef struct EvmEventHandle_s *EvmEvent_t;
typedef EvmInt32_t EvmFd_t;
typedef struct EvmFilterEval_s EvmFilterEval_c;
struct EvmFilterEval_s;
typedef EvmFilterEval_c *EvmFilter_t;
typedef float EvmFloat_t;
typedef char *EvmHandle_S_t;
typedef EvmString_t EvmI18NCatalog_t;
typedef EvmInt32_t EvmI18NMsgId_t;
typedef EvmInt32_t EvmI18NSetId_t;
typedef __int16 EvmInt16_t;
typedef int EvmInt32_t;
typedef __int64 EvmInt64_t;
typedef EvmUint32_t EvmIpAddress_t;
typedef EvmItemEntry_t *EvmItemEntryList_t;
struct EvmItemEntry_s {EvmItemId_t id;EvmItemValue_t value;};
typedef struct EvmItemEntry_s EvmItemEntry_t;
enum EvmItemId_e {EvmITEM_NONE = 0x0,EvmITEM_NAME = 0x1,EvmITEM_FIRST = 0x1,EvmITEM_UNUSED_1 = 0x2,EvmITEM_KERNEL_ONLY = 0x3,EvmITEM_CLUSTER_EVENT = 0x4,EvmITEM_PRIORITY = 0x5,EvmITEM_PID = 0x6,EvmITEM_PPID = 0x7,EvmITEM_EVENT_ID = 0x8,EvmITEM_MEMBER_ID = 0x9,EvmITEM_TIMESTAMP = 0xA,EvmITEM_HOST_IP = 0xB,EvmITEM_REPEAT_COUNT = 0xC,EvmITEM_LAST_TIMESTAMP = 0xD,EvmITEM_I18N_MSG_ID = 0xE,EvmITEM_I18N_SET_ID = 0xF,EvmITEM_I18N_CATALOG = 0x10,EvmITEM_CLUSTER_IP = 0x11,EvmITEM_HOST_NAME = 0x12,EvmITEM_CLUSTER_NAME = 0x13,EvmITEM_USER_NAME = 0x14,EvmITEM_FORMAT = 0x15,EvmITEM_REF = 0x16,EvmITEM_PREDEFINED_MAX = 0x16,EvmITEM_VAR = 0x17,EvmITEM_MAX = 0x17,EvmITEM_INTERNAL_USE_FIRST = 0x200,EvmITEM_HDR_EXT_SIZE = 0x200,};
typedef enum EvmItemId_e EvmItemId_t;
typedef EvmItemId_t *EvmItemList_t;
typedef unsigned __int64 EvmItemMask_t;
typedef union EvmItemValue_u EvmItemValue_t;
union EvmItemValue_u {EvmString_t NAME;EvmBoolean_t KERNEL_ONLY;EvmBoolean_t CLUSTER_EVENT;EvmPriority_t PRIORITY;EvmMemberId_t MEMBER_ID;EvmPid_t PID;EvmPid_t PPID;EvmEventId_t EVENT_ID;EvmTimestamp_t TIMESTAMP;EvmIpAddress_t HOST_IP;EvmI18NMsgId_t I18N_MSG_ID;EvmI18NSetId_t I18N_SET_ID;EvmI18NCatalog_t I18N_CATALOG;EvmCount_t REPEAT_COUNT;EvmTimestamp_t LAST_TIMESTAMP;EvmIpAddress_t CLUSTER_IP;EvmString_t HOST_NAME;EvmString_t CLUSTER_NAME;EvmString_t USER_NAME;EvmString_t FORMAT;EvmString_t REF;EvmVarStruct_t *VAR;};
typedef int EvmMemberId_t;
typedef void *EvmOpaque_t;
typedef pid_t EvmPid_t;
typedef void *EvmPointer_t;
typedef EvmUint16_t EvmPriority_t;
enum EvmResponseMode_e {EvmRESPONSE_WAIT = 0x0,EvmRESPONSE_CALLBACK = 0x1,EvmRESPONSE_IGNORE = 0x2,};
typedef enum EvmResponseMode_e EvmResponseMode_t;
typedef EvmUint32_t EvmSize_t;
enum EvmStatus_e {EvmERROR_NONE = 0x0,EvmERROR_NOT_IMPLEMENTED = 0x1,EvmERROR_INVALID_ARGUMENT = 0x2,EvmERROR_NOT_SET = 0x3,EvmERROR_NOT_PRESENT = 0x4,EvmERROR_PROTOCOL_MISMATCH = 0x5,EvmERROR_NO_MEMORY = 0x6,EvmERROR_INVALID_VARARGS_LIST = 0x7,EvmERROR_FILTER_NOT_VALID = 0x8,EvmERROR_INVALID_VALUE = 0x9,EvmERROR_NOT_INITIALIZED = 0xA,EvmERROR_SELECT = 0xB,EvmERROR_SERVICE_TERMINATED = 0xC,EvmERROR_CONNECT = 0xD,EvmERROR_READ = 0xE,EvmERROR_WRITE = 0xF,EvmERROR_OPEN = 0x10,EvmERROR_EVENT_REJECTED = 0x11,EvmERROR_RESOURCE = 0x12,EvmERROR_SEQUENCE = 0x13,EvmERROR_CONNECTION_LOST = 0x14,EvmERROR_INVALID_OPERATION = 0x15,EvmERROR_INVALID_MESSAGE = 0x16,EvmERROR_PARTIAL = 0x17,EvmERROR_WOULDBLOCK = 0x18,EvmERROR_TIMEOUT = 0x19,EvmERROR_QUEUE_FULL = 0x1A,EvmERROR_PROTOCOL = 0x1B,EvmERROR_INTERRUPT_LEVEL = 0x1C,EvmERROR_EOF = 0x1D,EvmERROR_SIGNAL = 0x1E,EvmERROR_SYNCHRONIZATION_FAILURE = 0x1F,EvmERROR_EVENT_NOT_VALID = 0x20,EvmERROR_QUEUED = 0x21,EvmERROR_CONNECTION_REFUSED = 0x22,EvmERROR_LAST = 0x23,};
typedef enum EvmStatus_e EvmStatus_t;
typedef EvmChar_t *EvmString_t;
struct EvmTcpipData_s {EvmInt32_t portNumber;EvmString_t hostName;};
typedef EvmUint32_t EvmTimestamp_t;
typedef union EvmTransportData_u EvmTransportData_t;
union EvmTransportData_u {struct EvmDomainSocketData_s domainSocket;struct EvmTcpipData_s tcpip;};
enum EvmTransportType_e {EvmTRANSPORT_DOMAIN_SOCKET = 0x0,EvmTRANSPORT_TCPIP = 0x1,};
typedef enum EvmTransportType_e EvmTransportType_t;
struct EvmTransport_s {EvmTransportType_t type;EvmTransportData_t data;};
typedef struct EvmTransport_s EvmTransport_t;
typedef unsigned __int16 EvmUint16_t;
typedef unsigned int EvmUint32_t;
typedef unsigned __int64 EvmUint64_t;
typedef unsigned __int8 EvmUint8_t;
typedef EvmVarName_t *EvmVarList_t;
typedef EvmConstString_t EvmVarName_t;
struct EvmVarStruct_s {EvmVarType_t type;EvmVarName_t name_p;EvmVarValue_t value;EvmSize_t length;EvmI18NMsgId_t msgId;};
typedef struct EvmVarStruct_s EvmVarStruct_t;
enum EvmVarType_e {EvmTYPE_NONE = 0x0,EvmTYPE_BOOLEAN = 0x1,EvmTYPE_FIRST = 0x1,EvmTYPE_CHAR = 0x2,EvmTYPE_INT16 = 0x3,EvmTYPE_INT32 = 0x4,EvmTYPE_INT64 = 0x5,EvmTYPE_UINT8 = 0x6,EvmTYPE_UINT16 = 0x7,EvmTYPE_UINT32 = 0x8,EvmTYPE_UINT64 = 0x9,EvmTYPE_FLOAT = 0xA,EvmTYPE_DOUBLE = 0xB,EvmTYPE_STRING = 0xC,EvmTYPE_OPAQUE = 0xD,EvmTYPE_MAX = 0xD,};
typedef enum EvmVarType_e EvmVarType_t;
typedef union EvmVarValue_u EvmVarValue_t;
union EvmVarValue_u {EvmBoolean_t BOOLEAN;EvmChar_t CHAR;EvmInt16_t INT16;EvmInt32_t INT32;EvmInt64_t INT64;EvmUint8_t UINT8;EvmUint16_t UINT16;EvmUint32_t UINT32;EvmUint64_t UINT64;EvmFloat_t FLOAT;EvmDouble_t DOUBLE;EvmString_t STRING;EvmOpaque_t OPAQUE;};
typedef struct _EXCEPTION_POINTERS *Exception_info_ptr;
typedef struct fblk *FBLKP;
typedef struct fdr FDR;
typedef struct $E38835F7BAD1BFC0C9C26E3A0ADFAC78 FILE;
typedef struct find_info FIND_INFO;
typedef coff_int FIT;
typedef struct $EF989712E4168030B91954E017CB311F FSAnyEvent;
typedef unsigned __int64 FSBitmapFormat;
typedef unsigned __int64 FSBitmapFormatMask;
typedef struct _FSChar2b FSChar2b;
typedef struct $FA3EEE6C60B55C95D527C391867C4F4E FSErrorEvent;
typedef union _FSEvent FSEvent;
typedef struct $BEA3E970906BDE5578391186783FC521 FSExtCodes;
typedef struct _FSExtData FSExtData;
typedef unsigned __int64 FSID;
struct FSINFO3args {nfs_fh3 fsroot;};
struct FSINFO3res {nfsstat3 status;union FSINFO3res::$6A2CEE5B34ED3E6D5EAD14FB19C2D2E6 res_u;};
union FSINFO3res::$6A2CEE5B34ED3E6D5EAD14FB19C2D2E6 {FSINFO3resok ok;FSINFO3resfail fail;};
struct FSINFO3resfail {post_op_attr obj_attributes;};
struct FSINFO3resok {post_op_attr obj_attributes;uint32 rtmax;uint32 rtpref;uint32 rtmult;uint32 wtmax;uint32 wtpref;uint32 wtmult;uint32 dtpref;size3 maxfilesize;nfstime3 time_delta;uint32 properties;};
typedef struct _FSOffset FSOffset;
typedef struct _FSPropInfo FSPropInfo;
typedef struct _FSPropOffset FSPropOffset;
typedef struct _FSRange FSRange;
struct FSSTAT3args {nfs_fh3 fsroot;};
struct FSSTAT3res {nfsstat3 status;union FSSTAT3res::$DAFC2B488956910F0828456CE719C50E res_u;};
union FSSTAT3res::$DAFC2B488956910F0828456CE719C50E {FSSTAT3resok ok;FSSTAT3resfail fail;};
struct FSSTAT3resfail {post_op_attr obj_attributes;};
struct FSSTAT3resok {post_op_attr obj_attributes;size3 tbytes;size3 fbytes;size3 abytes;size3 tfiles;size3 ffiles;size3 afiles;uint32 invarsec;};
typedef struct _FSServer FSServer;
typedef struct _FSXCharInfo FSXCharInfo;
typedef struct _FSXFontInfoHeader FSXFontInfoHeader;
struct FTW {int base;int level;};
typedef XID Font;
typedef struct $5AAB2D7C83120C7EBD5FA0920634E90C FormClassPart;
typedef struct _FormClassRec FormClassRec;
typedef struct _FormConstraintsRec *FormConstraints;
typedef struct _FormConstraintsPart FormConstraintsPart;
typedef struct _FormConstraintsRec FormConstraintsRec;
typedef struct _FormPart FormPart;
typedef struct _FormRec FormRec;
typedef struct _FormRec *FormWidget;
typedef struct _FormClassRec *FormWidgetClass;
typedef struct _XGC *GC;
typedef XID GContext;
struct GETATTR3args {nfs_fh3 object;};
struct GETATTR3res {nfsstat3 status;union GETATTR3res::$6654F6005606AAD973D4218EB1EDC6A8 res_u;};
union GETATTR3res::$6654F6005606AAD973D4218EB1EDC6A8 {GETATTR3resok ok;};
struct GETATTR3resok {fattr3 obj_attributes;};
typedef struct $D6748EB526E1102704242669BF7BE67C Gads_parms_t;
typedef void (*GetPreferredSizeProc)(Widget, Dimension *, Dimension *);
typedef Boolean (*GetSelectionProc)(XmTextSource, XmTextPosition *, XmTextPosition *);
typedef void (*GetValuesProc)(Widget, ArgList, Cardinal);
typedef struct _XawGripCallData *GripCallData;
typedef struct _XawGripCallData GripCallDataRec;
typedef struct $206232A1F4DF974AC8674D33D98F259E GripClassPart;
typedef struct _GripClassRec GripClassRec;
typedef struct $AB75B6B8BFB14D364765DCBD336CD019 GripPart;
typedef struct _GripRec GripRec;
typedef struct _GripRec *GripWidget;
typedef struct _GripClassRec *GripWidgetClass;
typedef struct $0B3F60258DFC6220FC64094458F7E57E Guar_flowspec_t;
typedef struct $3913C70C468BB9A18134EB7A3B84657F HASHINFO;
typedef struct $0DC76288B82173E0347A8AC4BDA9ABD1 HDRR;
typedef struct $75B1FCDE70FC6D9B0320B22818DFF60E HEADER;
typedef struct hier_ptr HIER_PTR;
typedef struct hier_rel HIER_REL;
struct HeaderInfo {char name[1024];int link;struct HeaderInfo *next;};
typedef struct _I18nContextRec *I18nContext;
typedef struct $41836031DF6414D5D7D6CBA6C43D37BD *I18nCvtContext;
typedef struct $41836031DF6414D5D7D6CBA6C43D37BD I18nCvtContextRec;
typedef struct _I18nFontListRec *I18nFontList;
typedef enum $7EBEEDDF242EDAD10BF7B0EEC4B6EA48 I18nScanType;
typedef enum $6044DFAE8AB1695FEF8277F39C5596FC I18nWordType;
typedef struct _I18nXlibBufferRec *I18nXlibBuffers;
typedef __int16 INT16;
typedef int INT32;
typedef __int64 INT64;
typedef signed __int8 INT8;
typedef unsigned int IPCard;
typedef unsigned __int8 IPCard8;
typedef unsigned int IPData;
typedef unsigned int *IPDataPtr;
typedef int (*IPcallbackProc)(struct _Channel *, int, char *);
typedef struct $DBA51B39F712616BEE79D72DF56F69D6 IS_adsbody_t;
typedef struct $39AC6BDC8150FC3B5F593027BA6D2C88 IS_main_hdr_t;
typedef struct $2498D641C268CFCC969901131795A7D6 IS_parm_hdr_t;
typedef struct $91B464B64FBA6267CC5058765F552BCD IS_serv_hdr_t;
typedef struct $FF9E0829D4BFAF4C1169A90A8DBCD82A IS_specbody_t;
typedef struct $EC337E6D8A01B74126A3CB4A2BBD1689 IS_tspbody_t;
typedef enum $4805EAB0B223F78A463BBC8BA0A6D5FF IceAcceptStatus;
typedef struct $9750BD37C04375AEAD857CD1AEBC6ACD IceAuthDataEntry;
typedef struct $5BB888AFAE3DA1AF86E88EEDAEBE9855 IceAuthFileEntry;
typedef enum $524C077D957471F3061D228C9C236D67 IceCloseStatus;
typedef struct _IceConn *IceConn;
typedef enum $35A689336FE0D24D3433A45C728BDA9A IceConnectStatus;
typedef void (*IceErrorHandler)(IceConn, int, int, unsigned __int64, int, int, IcePointer);
typedef int (*IceHostBasedAuthProc)(char *);
typedef void (*IceIOErrorHandler)(IceConn);
typedef void (*IceIOErrorProc)(IceConn);
typedef struct _IceListenObj *IceListenObj;
typedef IcePaAuthStatus (*IcePaAuthProc)(IceConn, IcePointer *, int, int, IcePointer, int *, IcePointer *, char **);
typedef enum $DD7C7A6F7774314680C00686808A9C69 IcePaAuthStatus;
typedef void (*IcePaProcessMsgProc)(IceConn, IcePointer, int, unsigned __int64, int);
typedef struct $931DBA82A19B61CA267B848FC88C1541 IcePaVersionRec;
typedef void (*IcePingReplyProc)(IceConn, IcePointer);
typedef IcePoAuthStatus (*IcePoAuthProc)(IceConn, IcePointer *, int, int, int, IcePointer, int *, IcePointer *, char **);
typedef enum $A3665E69DB87D7B6ED44928954CD85F4 IcePoAuthStatus;
typedef void (*IcePoProcessMsgProc)(IceConn, IcePointer, int, unsigned __int64, int, IceReplyWaitInfo *, int *);
typedef struct $DEA6EB3579BA90947BB8CFA4C4EC84A1 IcePoVersionRec;
typedef void *IcePointer;
typedef enum $81CB9C9397203DD8391907B26844B7B6 IceProcessMessagesStatus;
typedef void (*IceProtocolActivateProc)(IceConn, IcePointer);
typedef int (*IceProtocolSetupProc)(IceConn, int, int, char *, char *, IcePointer *, char **);
typedef enum $C9547D9B9E214CE5EBD681A7EEC38B08 IceProtocolSetupStatus;
typedef struct $B14254D28BF0250FBBF3FE8FC6D3C393 IceReplyWaitInfo;
typedef void (*IceWatchProc)(IceConn, IcePointer, int, IcePointer *);
typedef struct _InputRec *Input;
typedef void (*InputCreateProc)(Widget, ArgList, Cardinal);
typedef struct _InputDataRec *InputData;
typedef struct _InputDataRec InputDataRec;
typedef void (*InputGetSecResProc)(XmSecondaryResourceData *);
typedef void (*InputGetValuesProc)(Widget, ArgList, Cardinal);
typedef void (*InputInvalidateProc)(XmTextWidget, XmTextPosition, XmTextPosition, __int64);
typedef struct _InputRec InputRec;
typedef void (*InputSetValuesProc)(Widget, Widget, Widget, ArgList, Cardinal *);
typedef void (*InvalidateProc)(XmTextWidget, XmTextPosition, XmTextPosition, __int64);
typedef CARD8 KEYCODE;
typedef struct ksm_find_buf KSM_FIND_BUF;
typedef struct ksm_mem_req_buf KSM_MEM_REQ_BUF;
typedef struct ksm_name_buf KSM_NAME_BUF;
typedef struct ksm_reqbuf_hdr KSM_REQBUF_HDR;
typedef struct ksm_set_req_buf KSM_SET_REQ_BUF;
typedef struct _KdebugInfo KdebugInfo;
typedef CARD16 KeyButMask;
typedef unsigned __int8 KeyCode;
typedef unsigned int KeySym;
typedef struct _LBXDeltaElem *LBXDeltaElemPtr;
typedef struct _LBXDeltaElem LBXDeltaElemRec;
typedef struct _LBXDeltas *LBXDeltasPtr;
typedef struct _LBXDeltas LBXDeltasRec;
typedef coff_int LINER;
struct LINK3args {nfs_fh3 file;diropargs3 link;};
struct LINK3res {nfsstat3 status;union LINK3res::$127574E1D56DCEC597578398563C3456 res_u;};
union LINK3res::$127574E1D56DCEC597578398563C3456 {LINK3resok ok;LINK3resfail fail;};
struct LINK3resfail {post_op_attr file_attributes;wcc_data linkdir_wcc;};
struct LINK3resok {post_op_attr file_attributes;wcc_data linkdir_wcc;};
typedef struct _log_callback LOG_CALLBACK;
typedef void (*LOG_CALLBACK_ROUTINE)(LOG_CALLBACK *);
struct LOOKUP3args {diropargs3 what;};
struct LOOKUP3res {nfsstat3 status;union LOOKUP3res::$88DF73F2EA33FE7EB0040A420E6940DA res_u;};
union LOOKUP3res::$88DF73F2EA33FE7EB0040A420E6940DA {LOOKUP3resok ok;LOOKUP3resfail fail;};
struct LOOKUP3resfail {post_op_attr dir_attributes;};
struct LOOKUP3resok {nfs_fh3 object;post_op_attr obj_attributes;post_op_attr dir_attributes;};
struct LPRUDE {int status;int cresult;int tadapt;int npio;};
typedef struct $3696947288DD42492044D329A84A4A03 LabelClassPart;
typedef struct _LabelClassRec LabelClassRec;
typedef struct $0A17B52EADACEBEB1F7545E17FEE95BE LabelPart;
typedef struct _LabelRec LabelRec;
typedef struct _LabelRec *LabelWidget;
typedef struct _LabelClassRec *LabelWidgetClass;
typedef enum $2A9A0AD3137DAC1E7C7E9C93534584E8 LayoutState;
typedef struct _LbxBitmapCompMethod LbxBitmapCompMethod;
typedef struct _LbxPixmapCompMethod LbxPixmapCompMethod;
typedef struct $7A953307C4CBF8DC3B970A060657095E *Line;
typedef unsigned int LineNum;
typedef struct $7A953307C4CBF8DC3B970A060657095E LineRec;
typedef struct _LineTableExtraRec *LineTableExtra;
typedef struct _LineTableExtraRec LineTableExtraRec;
typedef struct $3696947288DD42492044D329A84A4A03 ListClassPart;
typedef struct _ListClassRec ListClassRec;
typedef struct $73B1B1C6D59EDCEAE4160EDF73D1CA05 ListPart;
typedef struct _ListRec ListRec;
typedef struct _ListRec *ListWidget;
typedef struct _ListClassRec *ListWidgetClass;
enum MACRO_A {A_INVIS = 0x400000,A_PROTECT = 0x800000,};
enum MACRO_ABORT_IF {ABORT_IF_TCBS = 1,};
enum MACRO_AC {AC_IPUP = 0x1,};
enum MACRO_ACC {ACC_IMMED = 0,ACC_DEFER = 1,};
enum MACRO_ACCESS3 {ACCESS3_READ = 0x1,ACCESS3_LOOKUP = 0x2,ACCESS3_MODIFY = 0x4,ACCESS3_EXTEND = 0x8,ACCESS3_DELETE = 0x10,ACCESS3_EXECUTE = 0x20,};
enum MACRO_ACC_SCAN {ACC_SCAN = 1,ACC_CLEAR = 2,ACC_REVEC = 3,ACC_UNPROTECT = 4,ACC_PRINT = 5,};
enum MACRO_ACDIRMIN {ACDIRMIN = 30,ACDIRMAX = 60,ACMINMAX = 3600,ACMAXMAX = 36000,};
enum MACRO_ACFL {ACFL_DCEANON = 0,ACFL_NFSREST = 1,ACFL_NFSPERM = 2,};
enum MACRO_ACFL_NFSMAX {ACFL_NFSMAX = 2,};
enum MACRO_ACFL_NONE {ACFL_NONE = 0,ACFL_NFSMIN = 0,};
enum MACRO_ACFT {ACFT_NUMIDS = 0x1,ACFT_SHORT = 0x2,ACFT_TERSE = 0x4,ACFT_WHITE = 0x8,ACFT_NPERM = 0x10,};
enum MACRO_ACL {ACL_TYPE_ACC = 0,ACL_TYPE_DEF = 1,ACL_TYPE_DEF_DIR = 2,NUM_ACL_IR_TYPES = 3,};
enum MACRO_ACLS {ACLS_ENABLED = 0,ACLS_NOT_LOADED = 1,ACLS_NOT_ENABLED = -1,};
enum MACRO_ACL_ADD {ACL_ADD_PERM = 0,ACL_DELETE_PERM = 1,ACL_SET_PERM = 2,ACL_GET_PERM = 3,};
enum MACRO_ACL_EXECUTE {ACL_EXECUTE = 0x1,ACL_WRITE = 0x2,ACL_READ = 0x4,};
enum MACRO_ACL_NOPERM {ACL_NOPERM = 0x0,ACL_PEXECUTE = 0x1,ACL_PWRITE = 0x2,ACL_PREAD = 0x4,ACL_PADD = 0x10,ACL_PREMOVE = 0x20,};
enum MACRO_ACL_OTHER {ACL_OTHER_OBJ = 2,DCE_USER = 3,DCE_GROUP = 4,FOREIGN_USER = 8,FOREIGN_GROUP = 9,FOREIGN_OTHER = 10,UNAUTH = 11,ANY_OTHER = 13,USER_OTHER = 23,GROUP_OTHER = 24,ACL_MASK_OBJ = 25,};
enum MACRO_ACL_PRDEX {ACL_PRDEX = 5,};
enum MACRO_ACL_PRDWR {ACL_PRDWR = 6,};
enum MACRO_ACL_PWREX {ACL_PWREX = 3,ACL_PRDWREX = 7,};
enum MACRO_ACL_TYPE {ACL_TYPE_ACC_MASK = 1,ACL_TYPE_DEF_MASK = 2,ACL_TYPE_DEF_DIR_MASK = 4,};
enum MACRO_ACL_TYPE_ACCESS {ACL_TYPE_ACCESS = 0,ACL_TYPE_DEFAULT = 1,ACL_TYPE_DEFAULT_DIR = 2,ACL_UNDEFINED_UID = -2,};
enum MACRO_ACL_UNDEFINED {ACL_UNDEFINED_GID = -2,};
enum MACRO_ACL_USER {ACL_USER_OBJ = 0,ACL_GROUP_OBJ = 1,ACL_OTHER = 2,ACL_DCE_USER = 3,ACL_DCE_GROUP = 4,ACL_DCE_FOREIGN_USER = 8,ACL_DCE_FOREIGN_GROUP = 9,ACL_DCE_FOREIGN_OTHER = 10,ACL_DCE_UNAUTH = 11,ACL_DCE_OTHER = 13,ACL_USER = 23,ACL_GROUP = 24,ACL_MASK = 25,};
enum MACRO_ACL_VERSION {ACL_VERSION = 1,ACL_MIN_ENTRIES = 3,};
enum MACRO_ACOMPAT {ACOMPAT = 0x4,ACORE = 0x8,AXSIG = 0x10,AMEAN = 0x20,AHZ = 0x40,};
enum MACRO_ACREGMIN {ACREGMIN = 3,ACREGMAX = 60,};
enum MACRO_AC_FIXED {AC_FIXED = 0x0,AC_FLOAT = 0x2,};
enum MACRO_AC_TEXT {AC_TEXT = 0,AC_DATA = 1,AC_BSS = 2,AC_STACK = 3,AC_LDR_TEXT = 4,AC_LDR_DATA = 5,AC_LDR_BSS = 6,AC_LDR_PRIV = 7,AC_LDR_GLB = 8,AC_LDR_PRELOAD = 9,AC_MMAP_TEXT = 10,AC_MMAP_DATA = 11,AC_MMAP_BSS = 12,AC_MMAP_STACK = 13,AC_N_AREAS = 14,};
enum MACRO_AC_UPWARD {AC_UPWARD = 0x0,AC_DOWNWARD = 0x1,};
enum MACRO_AD {AD_HALT = 0,AD_BOOT = 1,AD_IBOOT = 2,};
enum MACRO_ADD {ADD_PC = 1,ADD_LINE = 2,SET_COL = 3,SET_FILE = 4,SET_DATA_MODE = 5,ADD_LINE_PC = 6,ADD_LINE_PC_COL = 7,SET_LINE = 8,SET_LINE_COL = 9,CMD_MASK = 63,MASK7b = 127,};
enum MACRO_ADDEND {ADDEND_NOCONST = 0,ADDEND_CONST = 1,ADDEND_BASE = 2,};
enum MACRO_ADDRESS {ADDRESS_MASK = 2047,Kernel_virtual_start_32bit_console = -2147483648,Kernel_virtual_start = -508,};
enum MACRO_ADVFS {ADVFS_OP_CURR_VERSION = 1,};
enum MACRO_ADVFS_ACTIVATE {ADVFS_ACTIVATE = 0x1,ADVFS_DEACTIVATE = 0x2,ADVFS_GET_INFO = 0x4,};
enum MACRO_ADVFS_ASYNC {ADVFS_ASYNC_IO = 0x0,ADVFS_DATA_LOGGING_IO = 0x2,ADVFS_SYNC_IO = 0x3,F_GETMAP = 0x15,F_GRACE_START = 0x16,F_GRACE_END = 0x17,F_GETCACHEPOLICY = 0x18,F_SETCACHEPOLICY = 0x19,};
enum MACRO_ADVFS_AW {ADVFS_AW_DATA_LOGGING = 0x1,ADVFS_SYNC_WRITE = 0x2,};
enum MACRO_AF {AF_OK = 0x0,AF_SYNTAX = 0x1,AF_ERRCBUF = 0x2,AF_ERRCATR = 0x4,};
enum MACRO_AFORK {AFORK = 0x1,ASU = 0x2,ACCTF = 0xC0,};
enum MACRO_AFTER {AFTER = 0,OPEN = 1,};
enum MACRO_AF_OSI {AF_OSI = 7,AF_ECMA = 8,AF_DATAKIT = 9,AF_CCITT = 10,AF_SNA = 11,AF_DECnet = 12,AF_DLI = 13,AF_LAT = 14,AF_HYLINK = 15,AF_APPLETALK = 16,AF_ROUTE = 17,AF_LINK = 18,pseudo_AF_XTP = 19,AF_NETMAN = 20,AF_X25 = 21,AF_CTF = 22,AF_WAN = 23,AF_USER = 24,AF_LAST = 25,AF_INET6 = 26,AF_AAL = 27,AF_KEY = 28,AF_MAX = 35,};
enum MACRO_AF_UNSPEC {AF_UNSPEC = 0,AF_UNIX = 1,AF_INET = 2,AF_IMPLINK = 3,AF_PUP = 4,AF_CHAOS = 5,AF_NS = 6,AF_ISO = 7,};
enum MACRO_AI {AI_PASSIVE = 0x1,AI_CANONNAME = 0x2,AI_NUMERICHOST = 0x4,AI_ALL = 0x8,AI_V4MAPPED = 0x10,AI_ADDRCONFIG = 0x20,AI_DEFAULT = 0x30,};
enum MACRO_AIO {AIO_LISTIO_MAX = 64,};
enum MACRO_AIO_CANCELED {AIO_CANCELED = 0,AIO_NOTCANCELED = 1,AIO_ALLDONE = 2,};
enum MACRO_AIO_MAX {AIO_MAX = 64,AIO_PRIO_DFL = 5,};
enum MACRO_AIO_PRIO {AIO_PRIO_MAX = 9,AIO_PRIO_MIN = 0,};
enum MACRO_ALL {ALL_THREADS = 0,BIND_NO_INHERIT = 1,};
enum MACRO_ALPHA {ALPHA_THREAD_STATE = 1,ALPHA_FLOAT_STATE = 2,};
enum MACRO_ALPHA_PGSHIFT {ALPHA_PGSHIFT = 13,};
enum MACRO_ALV {ALV_FREE = 0x0,ALV_ALIVE = 0x1,ALV_PRES = 0x2,ALV_NOCNFG = 0x4,ALV_WONLY = 0x8,ALV_RONLY = 0x10,ALV_LOADABLE = 0x20,ALV_NOSIZER = 0x40,ALV_STATIC = 0x80,ALV_PERSIST = 0x100,ALV_REMAKE = 0x8000,NEXUS_NUMBER = 0xFFFFFFFF,};
enum MACRO_AMASK {AMASK_BWX = 0x1,AMASK_FIX = 0x2,AMASK_CIX = 0x4,AMASK_MVI = 0x100,AMASK_PRECISE = 0x200,};
enum MACRO_AMASK_BIT0 {AMASK_BIT0_BWLS = 0x1,ints_mskbl = 0x2,ints_extbl = 0x6,ints_insbl = 0xB,ints_mskwl = 0x12,ints_extwl = 0x16,ints_inswl = 0x1B,ints_mskll = 0x22,ints_extll = 0x26,ints_insll = 0x2B,ints_zap = 0x30,ints_zapnot = 0x31,ints_mskql = 0x32,ints_srl = 0x34,ints_extql = 0x36,ints_sll = 0x39,ints_insql = 0x3B,ints_sra = 0x3C,ints_mskwh = 0x52,ints_inswh = 0x57,ints_extwh = 0x5A,ints_msklh = 0x62,ints_inslh = 0x67,ints_extlh = 0x6A,ints_mskqh = 0x72,ints_insqh = 0x77,ints_extqh = 0x7A,};
enum MACRO_AMDWRMAGIC {AMDWRMAGIC = 0x159,AMDROMAGIC = 0x15C,};
enum MACRO_ANAMELEN {ANAMELEN = 80,};
enum MACRO_ANNOUNCE {ANNOUNCE = 3,};
enum MACRO_ANSWER {ANSWER_NO = 0,ANSWER_YES = 1,ANSWER_UNCHANGED = 2,};
enum MACRO_ANY {ANY_CPU = 1,};
enum MACRO_ANY2 {ANY_CHILD = 0,FIRST_BUTTON = 1,};
enum MACRO_ANYADDR {ANYADDR = 0,};
enum MACRO_ANYMARK {ANYMARK = 0x1,LASTMARK = 0x2,};
enum MACRO_APAR {APAR_SYSTEM = 0,APAR_NONE = -1,};
enum MACRO_AR {AR_SYMPREFLEN = 11,};
enum MACRO_ARCDENSITY {ARCDENSITY = 2,MINARCS = 50,MAXARCS = 65534,};
enum MACRO_AREGTYPE {AREGTYPE = 0,LNKTYPE = 49,SYMTYPE = 50,CHRTYPE = 51,BLKTYPE = 52,DIRTYPE = 53,FIFOTYPE = 54,CONTTYPE = 55,TSUID = 2048,};
enum MACRO_ARG {ARG_MAX = 38912,};
enum MACRO_ARP {ARP_SRT_NBCKS = 37,};
enum MACRO_ARPHRD {ARPHRD_ETHER = 1,ARPHRD_802 = 6,};
enum MACRO_ARPOP {ARPOP_REQUEST = 1,ARPOP_REPLY = 2,};
enum MACRO_ARRAY {ARRAY_TOKEN = 65,FUNCTION_TOKEN = 88,};
enum MACRO_ARTYPE {ARTYPE = 0xFF65,};
enum MACRO_AR_CODE {AR_CODE = 69,};
enum MACRO_AR_EB {AR_EB = 66,AR_UCODE = 85,};
enum MACRO_AR_EL {AR_EL = 76,};
enum MACRO_AR_IHASHSEX {AR_IHASHSEX = 11,AR_IUCODE = 12,AR_ITARGETSEX = 13,AR_IOUTOFDATE = 14,AR_OUTOFDATE = 88,};
enum MACRO_AR_TOOLVER {AR_TOOLVER = 0,};
enum MACRO_AT {AT_TYPE = 0x1,AT_MODE = 0x2,AT_UID = 0x4,AT_GID = 0x8,AT_FSID = 0x10,AT_NODEID = 0x20,AT_NLINK = 0x40,AT_SIZE = 0x80,AT_ATIME = 0x100,AT_MTIME = 0x200,AT_CTIME = 0x400,AT_RDEV = 0x800,AT_BLKSIZE = 0x1000,AT_NBLOCKS = 0x2000,AT_VCODE = 0x4000,AT_ALL = 0x7FFF,};
enum MACRO_ATF {ATF_INUSE = 0x1,ATF_COM = 0x2,ATF_PERM = 0x4,ATF_PUBL = 0x8,ATF_USETRAILERS = 0x10,ATF_USE802 = 0x20,ATF_STALE = 0x100,ATF_DEAD = 0x200,ATF_CANTCHANGE = 0xFF03,};
enum MACRO_ATOM {ATOM_TOOLVER = 0,};
enum MACRO_ATOMIC {ATOMIC_SET = 0,ATOMIC_CLEAR = 1,};
enum MACRO_ATTR {ATTR_NOTHING = 0,ATTR_RETRIEVE = 1,ATTR_SET = 2,ATTR_DELETE = 4,NO_ATTR = -1,};
enum MACRO_AT_EXEC {AT_EXEC_FD = 2,};
enum MACRO_AT_NULL {AT_NULL = 0,AT_IGNORE = 1,AT_EXECFD = 2,AT_PHDR = 3,AT_PHENT = 4,AT_PHNUM = 5,AT_PAGESZ = 6,AT_BASE = 7,AT_FLAGS = 8,AT_ENTRY = 9,AT_OSF_BASE = 1000,AT_EXEC_FILENAME = 1001,AT_EXEC_LOADER_FILENAME = 1002,AT_EXEC_LOADER_FLAGS = 1003,};
enum MACRO_AT_STAT {AT_STAT = 4094,};
enum MACRO_AT_TIMES {AT_TIMES = 1792,AT_NOSET = 30833,};
enum MACRO_AUD {AUD_EXEC_ARGP = 0x1,AUD_EXEC_ENVP = 0x2,AUD_LOGIN_UNAME = 0x4,AUD_OBJ_DESEL = 0x8,AUD_OBJ_SEL = 0x10,AUD_OBJ_MASK = 0x18,AUD_MAC_SL = 0x20,AUD_MAC_IL = 0x40,AUD_UCOMM = 0x80,AUD_OBJSEL_IPC = 0x100,AUD_STYLFLAGS = 0x1FF,AUD_PROPL_UNAVAIL = 0x80000000,};
enum MACRO_AUDIT {AUDIT_OR = 0x0,AUDIT_AND = 0x1,AUDIT_OFF = 0x2,AUDIT_USR = 0x4,AUDIT_CNTLMASK = 0x7,AUDIT_SYSCALL_OFF = 0x8,AUDIT_HABITAT_USR = 0x10,AUDIT_MACH_USR = 0x20,};
enum MACRO_AUDITD {AUDITD_RECSZ = 2048,AUD_BUF_SIZ = 4096,};
enum MACRO_AUDIT_START {AUDIT_START = 512,AUDIT_STOP = 513,AUDIT_SETUP = 514,AUDIT_SUSPEND = 515,AUDIT_LOG_CHANGE = 516,AUDIT_LOG_CREAT = 517,AUDIT_XMIT_FAIL = 518,AUDIT_REBOOT = 519,AUDIT_LOG_OVERWRITE = 520,AUDIT_DAEMON_EXIT = 521,LOGIN = 522,LOGOUT = 523,AUTH_EVENT = 524,AUDGEN8 = 525,SW_COMPATIBILITY = 526,DNSIX_AUDIT_EVENT = 527,AUTHORIZATION_USE = 528,NET_TCP_STRAY_PACKET = 529,NET_TCP_SYN_TIMEOUT = 530,NET_UDP_STRAY_PACKET = 531,NET_TCP_REJECTED_CONN = 532,DEBUG_LOG = 533,X_SERVER_STARTUP = 540,X_SERVER_SHUTDOWN = 541,X_CLIENT_STARTUP = 542,X_CLIENT_SHUTDOWN = 543,X_CLIENT_ATTR = 544,X_OBJECT_ATTR = 545,X_OBJECT_CREATE = 546,X_OBJECT_RENAME = 547,X_OBJECT_DESTROY = 548,X_DATA_MOVE = 549,X_OBJECT_READ = 550,X_OBJECT_WRITE = 551,X_SEC_CLEARANCE = 552,X_TPATH_HNDLR = 553,X_SELECTION_HNDLR = 554,X_WIN_MNGR = 555,LPR_EVENT = 573,};
enum MACRO_AUD_MAXEVENT {AUD_MAXEVENT_LEN = 64,N_SYSCALLS = 268,};
enum MACRO_AUD_MLS {AUD_MLS = 0x4000,};
enum MACRO_AUD_SELECT {AUD_SELECT = 0x1,AUD_DESELECT = 0x2,AUID_INVAL = 0xFFFFFFFF,};
enum MACRO_AUD_T {AUD_T_CHARP = 0x1,AUD_T_SOCK = 0x3,AUD_T_LOGIN = 0x4,AUD_T_HOMEDIR = 0x5,AUD_T_SHELL = 0x6,AUD_T_DEVNAME = 0x7,AUD_T_SERVICE = 0x8,AUD_T_HOSTNAME = 0x9,AUD_T_INTP = 0xA,AUD_T_SLABEL = 0xB,AUD_T_ILABEL = 0xC,AUD_T_PRIVMASK = 0xD,AUD_T_LSOCK = 0xE,AUD_T_RSOCK = 0xF,AUD_T_LHOSTNAME = 0x10,AUD_TOKEN_IOVEC_MIN = 0x18,};
enum MACRO_AUD_T_OPAQUE {AUD_T_OPAQUE = 0x18,AUD_T_INTARRAY = 0x19,AUD_T_GIDSET = 0x1A,AUD_T_XDATA = 0x1B,AUD_TOKEN_PTR_MAX = 0x1F,AUD_T_AUID = 0x20,AUD_T_RUID = 0x21,AUD_T_UID = 0x22,AUD_T_PID = 0x23,AUD_T_PPID = 0x24,AUD_T_GID = 0x25,AUD_T_EVENT = 0x26,AUD_T_SUBEVENT = 0x27,AUD_T_DEV = 0x28,AUD_T_ERRNO = 0x29,AUD_T_RESULT = 0x2A,AUD_T_MODE = 0x2B,AUD_T_HOSTADDR = 0x2C,AUD_T_INT = 0x2D,AUD_T_DESCRIP = 0x2E,AUD_T_HOSTID = 0x2F,AUD_T_X_ATOM = 0x30,AUD_T_X_CLIENT = 0x31,AUD_T_X_PROPERTY = 0x32,AUD_T_X_RES_CLASS = 0x33,AUD_T_X_RES_TYPE = 0x34,AUD_T_X_RES_ID = 0x35,AUD_T_TCPFLAGS = 0x36,AUD_T_SECEVENT = 0x7F,AUD_TP_ACCRGHT = 0x81,AUD_TP_MSGHDR = 0x82,AUD_TP_EVENTP = 0x83,AUD_TP_HABITAT = 0x84,AUD_TP_ADDRVEC = 0x85,AUD_TP_INTP = 0x86,AUD_TP_UCOMM = 0x87,AUD_TP_AUID = 0xA1,AUD_TP_RUID = 0xA2,AUD_TP_UID = 0xA3,AUD_TP_PID = 0xA4,AUD_TP_PPID = 0xA5,AUD_TP_HOSTADDR = 0xA6,AUD_TP_EVENT = 0xA7,AUD_TP_SUBEVENT = 0xA8,AUD_TP_NCPU = 0xA9,AUD_TP_DEV = 0xAA,AUD_TP_LENGTH = 0xAB,AUD_TP_IPC_GID = 0xAC,AUD_TP_IPC_MODE = 0xAD,AUD_TP_IPC_UID = 0xAE,AUD_TP_TV_SEC = 0xAF,AUD_TP_TV_USEC = 0xB0,AUD_TP_SHORT = 0xB1,AUD_TP_LONG = 0xB2,AUD_TP_VNODE_DEV = 0xB3,AUD_TP_VNODE_ID = 0xB4,AUD_TP_VNODE_MODE = 0xB5,AUD_TP_VERSION = 0xB6,AUD_TP_SET_UIDS = 0xB7,AUD_TP_CONT = 0xB8,AUD_TP_TID = 0xB9,AUD_TP_PRIV = 0xBA,MIN_TRUSTED_EVENT = 0x200,};
enum MACRO_AUD_VERSION {AUD_VERSION = 0x2,AUD_VERS_MASK = 0xFF,AUD_VERS_LONG = 0x8000,};
enum MACRO_AUD_VNOMAX {AUD_VNOMAX = 2,N_AUDTUPLES = 128,};
enum MACRO_AUD_XOBJ {AUD_XOBJ_CLIENT = 0x1,AUD_XOBJ_OBJECT = 0x2,};
enum MACRO_AUD_XOBJ_VERSION {AUD_XOBJ_VERSION = 0,};
enum MACRO_AUTH {AUTH_NONE = 0,AUTH_NULL = 0,};
enum MACRO_AUTH_CAPBUFSIZ {AUTH_CAPBUFSIZ = 10240,};
enum MACRO_AUTH_CLEARTEXT {AUTH_CLEARTEXT_SEG_CHARS = 8,AUTH_CIPHERTEXT_SEG_CHARS = 11,};
enum MACRO_AUTH_CPRIVVEC {AUTH_CPRIVVEC_SIZE = 1,};
enum MACRO_AUTH_CRYPT {AUTH_CRYPT_CRYPT16 = 1,AUTH_CRYPT_OLDCRYPT = 2,AUTH_CRYPT_C1CRYPT = 3,};
enum MACRO_AUTH_CRYPT_ {AUTH_CRYPT__MAX = 3,AUTH_TOD_SIZE = 50,};
enum MACRO_AUTH_D {AUTH_D = 0,AUTH_C1 = 1,AUTH_C2 = 2,AUTH_B1 = 3,AUTH_B2 = 4,AUTH_B3 = 5,AUTH_A1 = 6,};
enum MACRO_AUTH_DB {AUTH_DB_SL_RESET = 0,AUTH_DB_SL_SINGLE = -1,};
enum MACRO_AUTH_DEV {AUTH_DEV_PRINTER = 0,AUTH_DEV_TERMINAL = 1,AUTH_DEV_TAPE = 2,AUTH_DEV_REMOTE = 3,AUTH_DEV_XDISPLAY = 4,};
enum MACRO_AUTH_DEV_SINGLE {AUTH_DEV_SINGLE = 0,AUTH_DEV_MULTI = 1,AUTH_DEV_LABEL = 2,AUTH_DEV_NOLABEL = 3,AUTH_DEV_IMPORT = 4,AUTH_DEV_EXPORT = 5,AUTH_DEV_PASS = 6,AUTH_DEV_ILSINGLE = 7,AUTH_DEV_ILMULTI = 8,AUTH_MAX_DEV_ASSIGN = 10,};
enum MACRO_AUTH_ESCAP {AUTH_ESCAP_API_VER = 2,AUTH_SRC_LOCAL = 1,};
enum MACRO_AUTH_FUNCTAB {AUTH_FUNCTAB_RESET = 1,AUTH_FUNCTAB_SET = 2,AUTH_FUNCTAB_UPDATE = 3,AUTH_FUNCTAB_QUERY = 4,};
enum MACRO_AUTH_LOCK {AUTH_LOCK_ATTEMPTS = 100,AUTH_RETRY_DELAY = 1,};
enum MACRO_AUTH_LOCKED {AUTH_LOCKED_OUT_AUD_FLAG = 0x1,};
enum MACRO_AUTH_MAX {AUTH_MAX_PASSWD_LENGTH = 80,AUTH_SALT_SIZE = 2,};
enum MACRO_AUTH_MAX_AUDIT {AUTH_MAX_AUDIT_LENGTH = 4096,AUTH_CRYPT_BIGCRYPT = 0,};
enum MACRO_AUTH_MAX_CIPHERTEXT {AUTH_MAX_CIPHERTEXT_LENGTH = 113,};
enum MACRO_AUTH_MAX_DEV {AUTH_MAX_DEV_TYPE = 4,};
enum MACRO_AUTH_MAX_PASSWD {AUTH_MAX_PASSWD_DICT_DEPTH = 9,AUTH_MAX_PASSWD_DICT_SIZE = 1017,};
enum MACRO_AUTH_MAX_SECCLASS {AUTH_MAX_SECCLASS = 6,};
enum MACRO_AUTH_MAX_UNAME {AUTH_MAX_UNAME_SIZE = 9,};
enum MACRO_AUTH_MIN {AUTH_MIN_GEN_UID = 100,};
enum MACRO_AUTH_PSW {AUTH_PSW_PROMPT_ALWAYS = 0,AUTH_PSW_PROMPT_IFUSERSHELL = 1,AUTH_PSW_PROMPT_IFNOTEMPTY = 2,};
enum MACRO_AUTH_PSW_PROMPT {AUTH_PSW_PROMPT_MAXIMUM = 2,};
enum MACRO_AUTH_REWIND {AUTH_REWIND = 0,AUTH_CURPOS = 1,};
enum MACRO_AUTH_SILENT {AUTH_SILENT = 0,AUTH_LIMITED = 1,AUTH_VERBOSE = 2,};
enum MACRO_AUTH_SRC {AUTH_SRC_NIS = 2,AUTH_SRC_MAP = 4,};
enum MACRO_AUTH_TIME {AUTH_TIME_NOW_VALUE = -1,};
enum MACRO_AUTH_UNIX {AUTH_UNIX = 1,AUTH_SHORT = 2,AUTH_DES = 3,};
enum MACRO_AUTO {AUTO_ENB = 1,AUTO_DIS = 2,};
enum MACRO_AVAIL {AVAIL = 0,};
enum MACRO_A_CHARTEXT {A_CHARTEXT = 0xFFFF,A_COLOR = 0x7E000000,};
enum MACRO_A_NORMAL {A_NORMAL = 0x0,A_ATTRIBUTES = 0xFFFF0000,};
enum MACRO_A_REBOOT {A_REBOOT = 0x1,A_SHUTDOWN = 0x2,A_REMOUNT = 0x4,};
enum MACRO_Above {Above = 0,Below = 1,TopIf = 2,BottomIf = 3,Opposite = 4,};
enum MACRO_ActivateMask {ActivateMask = 536870912,};
enum MACRO_AddToList {AddToList = 0,DeleteFromList = 1,};
enum MACRO_AllPlanes {AllPlanes = -1,};
enum MACRO_AllTemporary {AllTemporary = 0,};
enum MACRO_AllocNone {AllocNone = 0,AllocAll = 1,};
enum MACRO_AnyButton {AnyButton = 0,};
enum MACRO_AnyKey {AnyKey = 0,};
enum MACRO_AnyPropertyType {AnyPropertyType = 0,};
enum MACRO_ApplicationShellIndex {ApplicationShellIndex = 9,XmDisplayIndex = 10,};
enum MACRO_ArcChord {ArcChord = 0,ArcPieSlice = 1,};
enum MACRO_AsyncPointer {AsyncPointer = 0,SyncPointer = 1,ReplayPointer = 2,AsyncKeyboard = 3,SyncKeyboard = 4,ReplayKeyboard = 5,AsyncBoth = 6,SyncBoth = 7,};
enum MACRO_AsyncThisDevice {AsyncThisDevice = 0,SyncThisDevice = 1,ReplayThisDevice = 2,AsyncOtherDevices = 3,AsyncAll = 4,SyncAll = 5,};
enum MACRO_AuthSuccess {AuthSuccess = 0,AuthContinue = 1,AuthBusy = 2,AuthDenied = 3,};
enum MACRO_AutoRepeatModeOff {AutoRepeatModeOff = 0,AutoRepeatModeOn = 1,AutoRepeatModeDefault = 2,};
enum MACRO_B {B_WRITE = 0x0,B_READ = 0x1,B_ERROR = 0x2,B_BUSY = 0x4,B_PHYS = 0x8,B_WANTED = 0x10,B_AGE = 0x20,B_ASYNC = 0x40,B_DELWRI = 0x80,B_TAPE = 0x100,B_REMAPPED = 0x200,B_FREE = 0x400,B_SWAP = 0x800,B_UBC = 0x1000,B_DIRTY = 0x2000,B_DONE = 0x4000,B_CACHE = 0x8000,B_INVAL = 0x10000,B_LOCKED = 0x20000,B_HEAD = 0x40000,B_USELESS = 0x80000,B_BAD = 0x100000,B_XFLAGS = 0x200000,B_RAW = 0x400000,B_NOCACHE = 0x800000,B_CHKERRORS = 0x1000000,B_JUSTFLUSH = 0x2000000,B_HWRELOC = 0x4000000,B_WANTFREE = 0x8000000,B_MSYNC = 0x10000000,B_ACTIVE = 0x20000000,B_SGIO = 0x40000000,B_DATAONLY = 0x80000000,};
enum MACRO_B0 {B0 = 0,B50 = 50,B75 = 75,B110 = 110,B134 = 134,B150 = 150,B200 = 200,B300 = 300,B600 = 600,B1200 = 1200,B1800 = 1800,B2400 = 2400,B4800 = 4800,B9600 = 9600,B19200 = 19200,B38400 = 38400,B57600 = 57600,B115200 = 115200,};
enum MACRO_B16MAGIC {B16MAGIC = 0x142,BTVMAGIC = 0x143,X86MAGIC = 0x148,XTVMAGIC = 0x149,I286SMAGIC = 0x14A,I286LMAGIC = 0x152,N3BMAGIC = 0x168,NTVMAGIC = 0x169,};
enum MACRO_B2 {B_W = 0,LOW_COLOR = 1,MEDIUM_COLOR = 2,HIGH_COLOR = 3,};
enum MACRO_BASIC {BASIC_OPERATOR_TOKEN = 0,BASIC_OPERATOR_STRING = 1,};
enum MACRO_BATT {BATT_NONE = 0,BATT_ENABLED = 1,BATT_HIGH = 2,BATT_OK = 3,BATT_SELFTEST = 4,BATT_CHARGING = 8,};
enum MACRO_BB {BB_SCALE = 2,};
enum MACRO_BBADDRS {BBADDRS_MAGIC = 0xF0E0010,BBCOUNTS_MAGIC = 0xF0E0A11,BBCOUNTS_MAGIC_EV5 = 0xF0E0A33,};
enum MACRO_BC {BC_BASE_MAX = 99,BC_DIM_MAX = 2048,};
enum MACRO_BC_GID {BC_GID = 0xFFFD,};
enum MACRO_BC_SCALE {BC_SCALE_MAX = 99,BC_STRING_MAX = 1000,};
enum MACRO_BC_UID {BC_UID = 0xFFFD,};
enum MACRO_BEFORE {BEFORE = 1,};
enum MACRO_BEGINNING {BEGINNING = 0,CURRENT = 1,};
enum MACRO_BH {BH_REG_DATA = 0x1,BH_DIRECTORY = 0x2,BH_INODE = 0x4,BH_INDIRECT = 0x8,BH_ADVFS_METADATA = 0x10,};
enum MACRO_BIGENDIAN {BIGENDIAN = 0,LITTLEENDIAN = 1,UNKNOWNENDIAN = 2,};
enum MACRO_BIND {BIND_INHERIT = 0,};
enum MACRO_BINLOG {BINLOG_ENABLE = 536887809,BINLOG_DISABLE = 536887810,BINLOG_ASCIIENABLE = 536887811,BINLOG_ASCIIDISABLE = 536887812,BINLOG_CLRCNTRS = 536887813,};
enum MACRO_BIOCFLUSH {BIOCFLUSH = 536887912,BIOCPROMISC = 536887913,};
enum MACRO_BITS {BITS_PER_BYTE = 8,};
enum MACRO_BITSPERBYTE {BITSPERBYTE = 8,};
enum MACRO_BLK {BLK_EOF = 0x40,BLK_ERRORS = 0x20,BLK_RESTART = 0x10,BLK_BYTECOUNT = 0x2,};
enum MACRO_BLKDEV {BLKDEV_IOSIZE = 2048,};
enum MACRO_BLK_FORMAT {BLK_FORMAT = 0x0,BFI_FORMAT = 0x4,PHY_FORMAT = 0x5,};
enum MACRO_BOGUS {BOGUS_UID = -2,};
enum MACRO_BOGUS_GID {BOGUS_GID = -2,};
enum MACRO_BOGUS_TYPE {BOGUS_TYPE = 0x0,BUS_TYPE = 0x1,CONTROLLER_TYPE = 0x2,DEVICE_TYPE = 0x4,};
enum MACRO_BOOL {BOOL_TOKEN = 98,LONG_DOUBLE128_TOKEN = 114,};
enum MACRO_BOOTPARAMPROC {BOOTPARAMPROC_WHOAMI = 1,BOOTPARAMPROC_GETFILE = 2,};
enum MACRO_BOOTPARAMVERS {BOOTPARAMVERS = 1,};
enum MACRO_BPBYTE {BPBYTE = 8,BPQUAD = 64,};
enum MACRO_BPF {BPF_MAXINSNS = 512,BPF_MAXBUFSIZE = 32768,};
enum MACRO_BPF_A {BPF_A = 0x10,};
enum MACRO_BPF_ADD {BPF_ADD = 0x0,BPF_SUB = 0x10,BPF_MUL = 0x20,BPF_DIV = 0x30,BPF_OR = 0x40,BPF_AND = 0x50,BPF_LSH = 0x60,BPF_RSH = 0x70,BPF_NEG = 0x80,};
enum MACRO_BPF_IMM {BPF_IMM = 0x0,BPF_ABS = 0x20,BPF_IND = 0x40,BPF_MEM = 0x60,BPF_LEN = 0x80,BPF_MSH = 0xA0,};
enum MACRO_BPF_JA {BPF_JA = 0x0,BPF_JEQ = 0x10,BPF_JGT = 0x20,BPF_JGE = 0x30,BPF_JSET = 0x40,};
enum MACRO_BPF_K {BPF_K = 0x0,BPF_X = 0x8,};
enum MACRO_BPF_LD {BPF_LD = 0x0,BPF_LDX = 0x1,BPF_ST = 0x2,BPF_STX = 0x3,BPF_ALU = 0x4,BPF_JMP = 0x5,BPF_RET = 0x6,BPF_MISC = 0x7,};
enum MACRO_BPF_MEMWORDS {BPF_MEMWORDS = 16,};
enum MACRO_BPF_MINBUFSIZE {BPF_MINBUFSIZE = 32,BPF_MAJOR_VERSION = 1,};
enum MACRO_BPF_MINOR {BPF_MINOR_VERSION = 1,};
enum MACRO_BPF_TAX {BPF_TAX = 0x0,BPF_TXA = 0x80,};
enum MACRO_BPF_W {BPF_W = 0x0,BPF_H = 0x8,BPF_B = 0x10,};
enum MACRO_BQ {BQ_LRU = 1,BQ_AGE = 2,BQ_EMPTY = 3,MINBUFHSZ = 16,};
enum MACRO_BQUEUES {BQUEUES = 4,BQ_LOCKED = 0,};
enum MACRO_BRK {BRK_USERBP = 0,BRK_KERNELBP = 1,BRK_ABORT = 2,BRK_BD_TAKEN = 3,BRK_BD_NOTTAKEN = 4,BRK_SSTEPBP = 5,BRK_OVERFLOW = 6,BRK_DIVZERO = 7,BRK_RANGE = 8,BRK_STACKOVERFLOW = 9,};
enum MACRO_BS0 {BS0 = 0x0,BS1 = 0x8000,VTDLY = 0x10000,};
enum MACRO_BSD {BSD = 198911,};
enum MACRO_BSD4 {BSD4_3 = 1,};
enum MACRO_BSD_CURRENT {BSD_CURRENT_VERSION = 1,};
enum MACRO_BSD_FOUND {BSD_FOUND_LOCAL = 1,BSD_FOUND_PLUS = 2,BSD_FOUND_NETGR = 3,BSD_FOUND_WILD = 4,BSD_FOUND_HOWMASK = 15,BSD_LOCAL_PASS = 16,BSD_LOCAL_MEMBERS = 32,BSD_LOCAL_GECOS = 64,BSD_LOCAL_HOMEDIR = 128,BSD_LOCAL_SHELL = 256,};
enum MACRO_BSD_MIN {BSD_MIN_BITS = 9,BSD_MAX_BITS = 15,CI_DEFLATE = 24,};
enum MACRO_BSD_NDADDR {BSD_NDADDR = 12,BSD_NIADDR = 3,};
enum MACRO_BSD_SIA {BSD_SIA_NUM = 1,};
enum MACRO_BSIZE {BSIZE = 1024,};
enum MACRO_BT {BT_SET_RECOV_MODE = 0x1,BT_SET_SIGNAL_LOSS = 0x2,BT_SET_BIT_STREAMING = 0x3,BT_SET_CONT_STREAMING = 0x4,};
enum MACRO_BT459 {BT459_MAXX = 1279,};
enum MACRO_BT459_HX {BT459_HX_TYPE = 1,BT459_SFBP_TYPE2 = 0,};
enum MACRO_BT459_MAXY {BT459_MAXY = 1023,BT459_CX_TYPE = 0,};
enum MACRO_BT459_TYPE2 {BT459_TYPE2_SETUP_WRITE = 0x0,BT459_TYPE2_SETUP_READ = 0x2,BT459_TYPE2_SETUP_C0_MASK = 0x4,BT459_TYPE2_SETUP_C1_MASK = 0x8,BT459_TYPE2_SETUP_C2_MASK = 0x10,};
enum MACRO_BT459_TYPE2_ADDR {BT459_TYPE2_ADDR_LOW = 0,BT459_TYPE2_ADDR_HIGH = 4,BT459_TYPE2_CMD_CURS = 8,BT459_TYPE2_CMD_CMAP = 12,};
enum MACRO_BT459_TYPE2_DATA {BT459_TYPE2_DATA_WRITE_SHIFT = 0,BT459_TYPE2_DATA_READ0_SHIFT = 8,BT459_TYPE2_DATA_READ1_SHIFT = 16,};
enum MACRO_BTREEVERSION {BTREEVERSION = 3,};
enum MACRO_BUCKETLNTH {BUCKETLNTH = 91,HASHSIZE = 256,};
enum MACRO_BUILD {BUILD_VERSION = 12,};
enum MACRO_BUILTIN {BUILTIN_VERS_ID_HIGH = 0x0,BUILTIN_VERS_ID_LOW = 0x85,};
enum MACRO_BUS {BUS_ADRALN = 1,BUS_ADRERR = 2,BUS_OBJERR = 3,};
enum MACRO_BUS_CONFIG {BUS_CONFIG_REV_V0 = 0,BUS_CONFIG_REV_V1 = 1,BUS_CONFIG_REV_V2 = 2,};
enum MACRO_BUS_IBUS {BUS_IBUS = 1,BUS_TC = 2,BUS_XMI = 3,BUS_BI = 4,BUS_UNIBUS = 5,BUS_QBUS = 6,BUS_VME = 7,BUS_MSI = 8,BUS_CI = 9,BUS_LSB = 10,BUS_IOP = 11,BUS_LAMB = 12,BUS_FLAG = 13,BUS_LBUS = 14,BUS_FBUS = 15,BUS_ISA = 16,BUS_EISA = 17,BUS_SCSI = 18,BUS_PCI = 19,BUS_PCMCIA = 20,BUS_MCBUS = 21,BUS_USB = 22,BUS_I2O = 23,CTLR_TYPE = -2147483648,};
enum MACRO_BUS_IO {BUS_IO = 1,DENSE_MEMORY = 2,};
enum MACRO_BUS_TV {BUS_TV = 99,BUS_MEMORY = 0,};
enum MACRO_BUTTON {BUTTON_RELEASED = 0,BUTTON_PRESSED = 1,BUTTON_CLICKED = 2,BUTTON_DOUBLE_CLICKED = 3,BUTTON_TRIPLE_CLICKED = 4,};
enum MACRO_BUTTON1 {BUTTON1_RELEASED = 0x1,BUTTON1_PRESSED = 0x2,BUTTON1_CLICKED = 0x4,BUTTON1_DOUBLE_CLICKED = 0x8,BUTTON1_TRIPLE_CLICKED = 0x10,BUTTON2_RELEASED = 0x20,BUTTON2_PRESSED = 0x40,BUTTON2_CLICKED = 0x80,BUTTON2_DOUBLE_CLICKED = 0x100,BUTTON2_TRIPLE_CLICKED = 0x200,BUTTON3_RELEASED = 0x400,BUTTON3_PRESSED = 0x800,BUTTON3_CLICKED = 0x1000,BUTTON3_DOUBLE_CLICKED = 0x2000,BUTTON3_TRIPLE_CLICKED = 0x4000,ALL_MOUSE_EVENTS = 0x7FFF,REPORT_MOUSE_POSITION = 0x8000,};
enum MACRO_BUTTON_UP {BUTTON_UP_TYPE = 0,BUTTON_DOWN_TYPE = 1,BUTTON_RAW_TYPE = 2,MOTION_TYPE = 3,PROXIMITY_IN = 4,PROXIMITY_OUT = 5,KBD_HOT_SWAP_TYPE = 6,MOUSE_HOT_SWAP_TYPE = 7,};
enum MACRO_BX {BX_RESTORE_DEV = 0x1,BX_LAYERED_IO = 0x2,};
enum MACRO_BYNAME {BYNAME = 100,BYINODE = 101,BYMD = 102,DONTCOUNT = -1,};
enum MACRO_BYTE {BYTE_ORDER = 1234,};
enum MACRO_BYTES {BYTES_PER_XDR_UNIT = 4,};
enum MACRO_BYTE_SIZE {BYTE_SIZE = 8,ALPHA_PGBYTES = 8192,};
enum MACRO_B_ADAPTORMASK {B_ADAPTORMASK = 0xF,B_UNITSHIFT = 0x10,B_UNITMASK = 0xFF,};
enum MACRO_B_ADAPTORSHIFT {B_ADAPTORSHIFT = 24,};
enum MACRO_B_DDIDKI {B_DDIDKI = 0x20000000,};
enum MACRO_B_DEVMAGIC {B_DEVMAGIC = 0xA0000000,};
enum MACRO_B_PARTITIONSHIFT {B_PARTITIONSHIFT = 8,B_PARTITIONMASK = 255,};
enum MACRO_B_TYPESHIFT {B_TYPESHIFT = 0,B_TYPEMASK = 255,B_MAGICMASK = -268435456,};
enum MACRO_BadIO {BadIO = 2,BadStatistics = 4,BadDevices = 5,BadScreen = 7,BadSwapReq = 8,XETrapNumErrors = 9,};
enum MACRO_BadPEXColorType {BadPEXColorType = 0,BadPEXRendererState = 1,BadPEXFloatingPointFormat = 2,BadPEXLabel = 3,BadPEXLookupTable = 4,BadPEXNameSet = 5,BadPEXPath = 6,BadPEXFont = 7,BadPEXWorkstation = 8,BadPEXPickMeasure = 9,BadPEXPipelineContext = 10,BadPEXRenderer = 11,BadPEXSearchContext = 12,BadPEXStructure = 13,BadPEXOutputCommand = 14,};
enum MACRO_BadShmSeg {BadShmSeg = 0,ShmNumberErrors = 1,};
enum MACRO_BitmapFormatBitOrderLSB {BitmapFormatBitOrderLSB = 0,BitmapFormatBitOrderMSB = 2,};
enum MACRO_BitmapFormatByteOrderLSB {BitmapFormatByteOrderLSB = 0,BitmapFormatByteOrderMSB = 1,};
enum MACRO_BitmapFormatByteOrderMask {BitmapFormatByteOrderMask = 1,BitmapFormatBitOrderMask = 2,BitmapFormatImageRectMask = 12,BitmapFormatScanlinePadMask = 768,BitmapFormatScanlineUnitMask = 12288,};
enum MACRO_BitmapFormatImageRectMin {BitmapFormatImageRectMin = 0,BitmapFormatImageRectMaxWidth = 4,BitmapFormatImageRectMax = 8,};
enum MACRO_BitmapFormatMaskByte {BitmapFormatMaskByte = 1,BitmapFormatMaskBit = 2,BitmapFormatMaskImageRectangle = 4,BitmapFormatMaskScanLinePad = 8,BitmapFormatMaskScanLineUnit = 16,};
enum MACRO_BitmapFormatScanlinePad8 {BitmapFormatScanlinePad8 = 0,BitmapFormatScanlinePad16 = 256,BitmapFormatScanlinePad32 = 512,BitmapFormatScanlinePad64 = 768,};
enum MACRO_BitmapFormatScanlineUnit8 {BitmapFormatScanlineUnit8 = 0,BitmapFormatScanlineUnit16 = 4096,BitmapFormatScanlineUnit32 = 8192,BitmapFormatScanlineUnit64 = 12288,};
enum MACRO_BitmapSuccess {BitmapSuccess = 0,BitmapOpenFailed = 1,BitmapFileInvalid = 2,BitmapNoMemory = 3,};
enum MACRO_BitsInByte {BitsInByte = 8,};
enum MACRO_Button1 {Button1 = 1,Button2 = 2,Button3 = 3,Button4 = 4,Button5 = 5,};
enum MACRO_C {C_IRUSR = 0x100,C_IWUSR = 0x80,C_IXUSR = 0x40,C_IRGRP = 0x20,C_IWGRP = 0x10,C_IXGRP = 0x8,C_IROTH = 0x4,C_IWOTH = 0x2,C_IXOTH = 0x1,};
enum MACRO_CAM {CAM_DT_CFCS = 536879361,};
enum MACRO_CANBSIZ {CANBSIZ = 255,NCARGS = 40958,};
enum MACRO_CANCEL {CANCEL_ON = 1,CANCEL_OFF = 0,};
enum MACRO_CARET {CARET_HEIGHT = 5,};
enum MACRO_CAT {CAT_MAGIC = 505,CATD_ERR = -1,};
enum MACRO_CAT_NOTINIT {CAT_NOTINIT = 0,CAT_NOSYM = -1,};
enum MACRO_CBELL {CBELL = 0x7,CESC = 0x5C,};
enum MACRO_CBLOCK {CBLOCK = 64,};
enum MACRO_CBQSIZE {CBQSIZE = 8,};
enum MACRO_CCP {CCP_CONFREQ = 1,CCP_CONFACK = 2,CCP_TERMREQ = 5,CCP_TERMACK = 6,CCP_RESETREQ = 14,CCP_RESETACK = 15,CCP_MAX_OPTION_LENGTH = 32,};
enum MACRO_CCP_HDRLEN {CCP_HDRLEN = 4,};
enum MACRO_CCP_OPT {CCP_OPT_MINLEN = 2,CI_BSD_COMPRESS = 21,};
enum MACRO_CCT {CCT_ID_LEN = 32,};
enum MACRO_CD {CD_MAXDMAP = 50,CD_SETDMAP = 0,};
enum MACRO_CDEL {CDEL = -1,};
enum MACRO_CDFS {CDFS_EXTENDED_ARGS_VERSION = 1,};
enum MACRO_CDISCARD {CDISCARD = 0xF,CWERASE = 0x17,};
enum MACRO_CD_DIRXAR {CD_DIRXAR = 1,CD_DIRRX = 2,};
enum MACRO_CD_EXIST {CD_EXIST = 0x1,CD_DIR = 0x2,CD_ASSOFILE = 0x4,CD_RECORD = 0x8,CD_PROTEC = 0x10,CD_MULTIEXT = 0x80,};
enum MACRO_CD_GETNMCONV {CD_GETNMCONV = 2,CD_NOCONV = 0,};
enum MACRO_CD_LOWER {CD_LOWER = 0x1,CD_NOVERSION = 0x2,};
enum MACRO_CD_MAXDRECL {CD_MAXDRECL = 255,};
enum MACRO_CD_MAXGMAP {CD_MAXGMAP = 50,CD_SETNMCONV = 1,};
enum MACRO_CD_MAXPTRECL {CD_MAXPTRECL = 40,};
enum MACRO_CD_SETDEFS {CD_SETDEFS = 1,CD_GETDEFS = 2,};
enum MACRO_CD_SETUMAP {CD_SETUMAP = 0x1,CD_SETGMAP = 0x2,CD_GETUMAP = 0x11,CD_GETGMAP = 0x12,CD_MAXUMAP = 0x32,};
enum MACRO_CD_UNSETDMAP {CD_UNSETDMAP = 1,};
enum MACRO_CD_XARFIXL {CD_XARFIXL = 250,CD_RSYS = 1,};
enum MACRO_CD_XSYS {CD_XSYS = 0x4,CD_RUSR = 0x10,CD_XUSR = 0x40,CD_RGRP = 0x100,CD_XGRP = 0x400,CD_ROTH = 0x1000,CD_XOTH = 0x4000,};
enum MACRO_CE {CE_CONT = 0x1,CE_NOTE = 0x2,CE_WARN = 0x3,CE_PANIC = 0x4,};
enum MACRO_CEOF {CEOF = 0x4,};
enum MACRO_CEOT {CEOT = 4,CERASE = 8,};
enum MACRO_CFG {CFG_OP_CONFIGURE = 1,CFG_OP_QUERY = 2,CFG_OP_UNCONFIGURE = 3,CFG_OP_RECONFIGURE = 4,CFG_OP_QUERY_DEFAULTS = 5,CFG_OP_SUBSYS_STATE = 6,CFG_HIDDEN_ATTR = 8,};
enum MACRO_CFG_ATTR {CFG_ATTR_STRTYPE = 1,CFG_ATTR_INTTYPE = 2,CFG_ATTR_UINTTYPE = 3,CFG_ATTR_LONGTYPE = 4,CFG_ATTR_ULONGTYPE = 5,CFG_ATTR_BINTYPE = 6,CFG_ATTR_UCHARTYPE = 8,CFG_ATTR_USHORTTYPE = 9,};
enum MACRO_CFG_ATTR_SUCCESS {CFG_ATTR_SUCCESS = 0,CFG_ATTR_EEXISTS = 1,CFG_ATTR_EOP = 2,CFG_ATTR_ESUBSYS = 3,CFG_ATTR_ESMALL = 4,CFG_ATTR_ELARGE = 5,CFG_ATTR_ETYPE = 6,CFG_ATTR_EINDEX = 7,CFG_ATTR_EMEM = 8,CFG_ATTR_ENOTNUMBER = 9,CFG_ATTR_EADDR = 10,};
enum MACRO_CFG_FLAG {CFG_FLAG_VERBOSE = 0x1,};
enum MACRO_CFG_FRAME {CFG_FRAME_SUCCESS = 0,CFG_FRAME_EEXISTS = 1,CFG_FRAME_EALREADY = 2,CFG_FRAME_ECONFIGURED = 3,CFG_FRAME_EPRIVS = 4,CFG_FRAME_EMEM = 5,CFG_FRAME_ECONNECT = 6,CFG_FRAME_ESIZE = 7,CFG_FRAME_ESUBSYS = 8,CFG_FRAME_ECOPY = 9,CFG_FRAME_ELOADREQ = 10,CFG_FRAME_ELOADER = 11,CFG_FRAME_ECFG_RTN = 12,CFG_FRAME_EATTR_TBL = 13,CFG_FRAME_EREGISTER = 14,CFG_FRAME_EMODULEID = 15,CFG_FRAME_EMETHOD_PRE = 16,CFG_FRAME_EMETHOD_POST = 17,CFG_FRAME_EATTR_LIST = 18,CFG_FRAME_ENOSYM = 19,CFG_FRAME_EREFCNT = 20,CFG_FRAME_EEXCEEDENTRY = 21,CFG_FRAME_EEXCEEDDEPTH = 22,CFG_FRAME_ENODEPEND = 23,CFG_FRAME_ESUBSYSNAME = 24,CFG_FRAME_ENOHOTSWAP = 50,CFG_FRAME_ETIMEOUT = 51,};
enum MACRO_CFG_OP {CFG_OP_CM_ADD_REG = 100,CFG_OP_CM_DEL_REG = 101,CFG_OP_CM_GET_REG = 102,CFG_OP_CM_GET_ATTRCNT = 103,CFG_OP_CM_GET_ATTRINFO = 104,CFG_OP_CM_GET_ATTRINFO_ALL = 105,};
enum MACRO_CFG_OP_KSM {CFG_OP_KSM_MIN = 3000,};
enum MACRO_CFG_OP_KSM_FIND {CFG_OP_KSM_FIND = 3001,CFG_OP_KSM_GETATTR = 3002,CFG_OP_KSM_GETALLATTR = 3003,CFG_OP_KSM_GETNAMES = 3004,CFG_OP_KSM_GETINFO = 3005,CFG_OP_KSM_SETOP = 3006,CFG_OP_KSM_MEMOP = 3007,CFG_OP_KSM_SETATTR = 3101,KSM_OP_NONPRIV_SYS_MIN = 3200,KSM_OP_NONPRIV_SYS_MAX = 3399,};
enum MACRO_CFG_OP_KSM_LIB {CFG_OP_KSM_LIB_MIN = 3000,CFG_OP_KSM_LIB_MAX = 3199,};
enum MACRO_CFG_OP_KSM_READ {CFG_OP_KSM_READ_MIN = 3000,CFG_OP_KSM_READ_MAX = 3099,CFG_OP_KSM_WRITE_MIN = 3100,CFG_OP_KSM_WRITE_MAX = 3199,};
enum MACRO_CFG_ORD {CFG_ORD_DONTCARE = 0,CFG_ORD_NOMINAL = 10000,};
enum MACRO_CFG_ORD_HAL {CFG_ORD_HAL_LATE = 5000,CFG_DEPTAB_ENTRIES = 20,};
enum MACRO_CFG_ORD_MAXIMUM {CFG_ORD_MAXIMUM = 5000,CFG_ORD_HAL_EARLY = -5000,};
enum MACRO_CFG_PROTO {CFG_PROTO_V1 = 1,CFG_PROTO_V2 = 2,CFG_PROTO_V3 = 3,};
enum MACRO_CFG_PROTO_VERSION {CFG_PROTO_VERSION = 3,CFG_FLAG_NOFLAGS = 0,};
enum MACRO_CFG_PT {CFG_PT_MIN = 1000,CFG_PT_MAX = 50000,};
enum MACRO_CFG_PT_CDB {CFG_PT_CDB_WR = 40050,CFG_PT_ROOTFS_WR = 40100,CFG_PT_MULTIUSER = 45000,};
enum MACRO_CFG_PT_CPU {CFG_PT_CPU_SHUTDOWN_1 = 10000,CFG_PT_CPU_SHUTDOWN_2 = 10001,CFG_PT_CPU_STARTUP_1 = 10002,CFG_PT_CPU_STARTUP_2 = 10003,CFG_PT_RUNTIME_USER_MIN = 40000,CFG_PT_RUNTIME_USER_MAX = 50000,};
enum MACRO_CFG_PT_POSTCONFIG {CFG_PT_POSTCONFIG = 6000,CFG_PT_CLU_CONF = 6800,CFG_PT_GLROOTFS_AVAIL = 6900,CFG_PT_ROOTFS_AVAIL = 7000,CFG_PT_ENTER_SUSER = 8000,CFG_PT_RUNTIME_KERN_MIN = 10000,CFG_PT_RUNTIME_KERN_MAX = 20000,};
enum MACRO_CFG_PT_PRECONFIG {CFG_PT_PRECONFIG = 2800,CFG_PT_TOPOLOGY_CONF = 4500,CFG_PT_PLATFORM_CONF = 5000,CFG_PT_OLD_CONF_ALL = 6000,};
enum MACRO_CFG_PT_UNIXTBL {CFG_PT_UNIXTBL_AVAIL = 1400,CFG_PT_HAL_INIT = 2000,CFG_PT_VM_AVAIL = 2500,CFG_PT_LOCK_AVAIL = 2800,};
enum MACRO_CFG_SET {CFG_SET_DEPEND = 1,CFG_REL_DEPEND = 2,};
enum MACRO_CFG_STATE {CFG_STATE_LOADED = 0x1,CFG_STATE_CONFIGURED = 0x2,CFG_STATE_DYNAMIC = 0x4,CFG_STATE_FOREIGN = 0x8,CFG_STATE_TYPE_OLD = 0x10,CFG_STATE_INIT_ERROR = 0x20,CFG_STATE_UNCONFIGURED = 0xFFFFFFFD,};
enum MACRO_CFG_SUBSYS {CFG_SUBSYS_SUCCESS = 0,CFG_SUBSYS_EINIT = 999,CFG_SUBSYS_ERESTART = -1,};
enum MACRO_CFG_SUCCESS {CFG_SUCCESS = 0,CFG_SUBSYS_NAME_SZ = 16,CFG_ATTR_NAME_SZ = 30,CFG_SUBSYS_MAXATTR = 500,};
enum MACRO_CFG_USER {CFG_USER_NAMELEN_V2 = 32,CFG_USER_NAMELEN = 64,};
enum MACRO_CFLUSH {CFLUSH = 15,};
enum MACRO_CFLUSHO {CFLUSHO = 15,};
enum MACRO_CFORM {CFORM = 0xC,};
enum MACRO_CFS {CFS_GOOD_RETURN = 0,CFS_CAN_NOT_OPEN_FILE = 1,CFS_NO_FILE_CONTROL_ENTRY = 2,CFS_CAN_NOT_CHG_MODE = 3,CFS_CAN_NOT_CHG_OWNER_GROUP = 4,CFS_CAN_NOT_CHG_ACL = 5,CFS_CAN_NOT_CHG_SL = 6,};
enum MACRO_CHAR {CHAR_BIT = 8,SCHAR_MIN = -128,};
enum MACRO_CHARCLASS {CHARCLASS_NAME_MAX = 255,};
enum MACRO_CHARMAP {CHARMAP___MBSTOPCS = 0x0,CHARMAP___MBTOPC = 0x1,CHARMAP___PCSTOMBS = 0x2,CHARMAP___PCTOMB = 0x3,CHARMAP_CHARMAP_INIT = 0x5,CHARMAP_MBLEN = 0x6,CHARMAP_MBSTOWCS = 0x7,CHARMAP_MBTOWC = 0x8,CHARMAP_NL_LANGINFO = 0x9,COLLATE_GETCOLVAL = 0xA,CHARMAP_WCSTOMBS = 0xB,CHARMAP_WCSWIDTH = 0xC,CHARMAP_WCTOMB = 0xD,CHARMAP_WCWIDTH = 0xE,COLLATE_FNMATCH = 0xF,COLLATE_REGCOMP = 0x10,COLLATE_REGERROR = 0x11,COLLATE_REGEXEC = 0x12,COLLATE_REGFREE = 0x13,COLLATE_STRCOLL = 0x14,COLLATE_STRXFRM = 0x15,COLLATE_WCSCOLL = 0x16,COLLATE_WCSXFRM = 0x17,COLLATE_COLLATE_INIT = 0x18,CTYPE_WCTYPE = 0x19,CTYPE_CTYPE_INIT = 0x1A,CTYPE_ISWCTYPE = 0x1B,CTYPE_TOWLOWER = 0x1C,CTYPE_TOWUPPER = 0x1D,LOCALE_LOCALE_INIT = 0x1E,LOCALE_LOCALECONV = 0x1F,LOCALE_NL_LANGINFO = 0x20,MONETARY_MONETARY_INIT = 0x21,MONETARY_NL_LANGINFO = 0x22,MONETARY_STRFMON = 0x23,NUMERIC_NUMERIC_INIT = 0x2B,NUMERIC_NL_LANGINFO = 0x2C,RESP_RESP_INIT = 0x2D,RESP_NL_LANGINFO = 0x2E,RESP_RPMATCH = 0x2F,TIME_TIME_INIT = 0x30,TIME_NL_LANGINFO = 0x31,TIME_STRFTIME = 0x32,TIME_STRPTIME = 0x33,TIME_WCSFTIME = 0x34,};
enum MACRO_CHAR_MAX {CHAR_MAX = 127,CHAR_MIN = -128,};
enum MACRO_CHAR_TOKEN {CHAR_TOKEN = 99,SHORT_TOKEN = 115,};
enum MACRO_CHGPASSWD {CHGPASSWD = 0x1,CHGSHELL = 0x2,CHGFINGER = 0x4,CHGENTITY = 0x8,CHGNEWVALUE = 0x10,};
enum MACRO_CHILD {CHILD_MAX = 64,LINK_MAX = 65533,};
enum MACRO_CI {CI_PREDICTOR_2 = 2,};
enum MACRO_CIICFocus {CIICFocus = 1,CIFontSet = 2,CIFg = 4,CIBg = 8,CIBgPixmap = 16,CICursorP = 32,CILineS = 64,};
enum MACRO_CILEN {CILEN_BSD_COMPRESS = 3,};
enum MACRO_CILEN_DEFLATE {CILEN_DEFLATE = 4,DEFLATE_MIN_SIZE = 8,DEFLATE_MAX_SIZE = 15,};
enum MACRO_CILEN_PREDICTOR {CILEN_PREDICTOR_2 = 2,};
enum MACRO_CINTR {CINTR = 0x3,CKILL = 0x15,};
enum MACRO_CL {CL_DEF_MAX_NONCONFORM = 24,CL_DEF_MAX_TOTAL_b = 1000000,};
enum MACRO_CLASS {CLASS_DEFAULT_INDEX = 1,CLASS_SCHED_EVENT_NONE = 0,};
enum MACRO_CLASS_FILE {CLASS_FILE_ID = 97,};
enum MACRO_CLASS_NAME {CLASS_NAME_LEN = 20,};
enum MACRO_CLASS_RESOURCE {CLASS_RESOURCE_SCHED_DISABLED = -1,};
enum MACRO_CLASS_RESOURCE_NO {CLASS_RESOURCE_NO_CHANGE = -2,};
enum MACRO_CLASS_SCHED {CLASS_SCHED_EVENT_RGID = 0x1,CLASS_SCHED_EVENT_RUID = 0x2,CLASS_SCHED_EVENT_PSET = 0x4,CLASS_SCHED_EVENT_ADD = 0x8,CLASS_SCHED_EVENT_DEL = 0x10,CLASS_SCHED_EVENT_ALL = 0x1F,};
enum MACRO_CLASS_SUCCESS {CLASS_SUCCESS = 1,CLASS_FILE_FAILURE = 2,CLASS_SHARED_MEM_FAILURE = 3,CLASS_SEMAPHORE_FAILURE = 4,CLASS_MEM_ALLOC_FAILURE = 5,CLASS_CLASS_NOT_EXIST = 6,CLASS_CLASS_NOT_EMPTY = 7,CLASS_MEMBER_ALREADY_IN_CLASS = 8,CLASS_MEMBER_IN_OTHER_CLASS = 9,CLASS_MEMBER_NOT_IN_CLASS = 10,CLASS_NO_SPACE = 11,CLASS_TOO_HIGH_PERCENT = 12,CLASS_INVAL_PERCENT = 13,CLASS_NAME_IN_USE = 14,CLASS_NAME_INVALID = 15,CLASS_ALREADY_ENABLED = 16,CLASS_NOT_ENABLED = 17,CLASS_DAEMON_FAIL = 18,CLASS_INVAL_RESOURCE_TYPE = 19,CLASS_NOT_SUSER = 20,CLASS_DEFAULT_CONFIGURED = 21,CLASS_RESERVED = 22,CLASS_DEFAULT_CLASS_OP = 23,CLASS_DATABASE_MODIFIED = 24,CLASS_NAME_TOO_LONG = 25,CLASS_INVAL_PARTITION = 26,CLASS_UNKNOWN_ERROR = 27,CLASS_LAST_ERROR = 28,};
enum MACRO_CLBYTES {CLBYTES = 8192,};
enum MACRO_CLD {CLD_EXITED = 1,CLD_KILLED = 2,CLD_DUMPED = 3,CLD_TRAPPED = 4,CLD_STOPPED = 5,CLD_CONTINUED = 6,CLD_SIGEXITING = 7,};
enum MACRO_CLIENT {CLIENT_REQ = 1,};
enum MACRO_CLK {CLK_TCK = 60,};
enum MACRO_CLNAME {CLNAME_SZ = 8,FNAME_SZ = 16,PSARGS_SZ = 80,PR_SSLEEP = 83,};
enum MACRO_CLOCK {CLOCK_REALTIME = 1,TIMELEN = 26,TMZNLEN = 50,};
enum MACRO_CLOCKS {CLOCKS_PER_SEC = 1000000,PID_MAX = 2147483647,UID_MAX = -3,USI_MAX = -1,};
enum MACRO_CLOFF {CLOFF = 8191,};
enum MACRO_CLOFSET {CLOFSET = 8191,};
enum MACRO_CLOSED {CLOSED = 1,};
enum MACRO_CLSET {CLSET_TIMEOUT = 1,CLGET_TIMEOUT = 2,CLGET_SERVER_ADDR = 3,CLGET_FD = 6,CLSET_FD_CLOSE = 8,CLSET_FD_NCLOSE = 9,};
enum MACRO_CLSET_RETRY {CLSET_RETRY_TIMEOUT = 4,CLGET_RETRY_TIMEOUT = 5,};
enum MACRO_CLSHIFT {CLSHIFT = 13,};
enum MACRO_CLSIZELOG2 {CLSIZELOG2 = 0,CLSIZE = 1,KVSTART_PFN = -254,};
enum MACRO_CLU {CLU_NOT_CONFIGURED = -1,};
enum MACRO_CLU_ADM {CLU_ADM_LOCK = 1,CLU_ADM_UNLOCK = 2,};
enum MACRO_CLU_INFO {CLU_INFO_GENERAL = 1,CLU_INFO_MEMBSTATE = 2,CLU_INFO_LIMITS = 3,CLU_INFO_MEMBER_BY_ID = 4,CLU_INFO_MEMBER_BY_NAME = 5,CLU_INFO_CLU_NAME = 6,CLU_INFO_INTERNAME_BY_ID = 7,CLU_INFO_INTERNAME_BY_NAME = 8,CLU_INFO_MEMBERID_BY_ID = 9,CLU_INFO_MEMBERID_BY_NAME = 10,CLU_INFO_HOSTNAME_BY_ID = 11,CLU_INFO_HOSTNAME_BY_NAME = 12,CLU_INFO_NODENAME_BY_ID = 13,CLU_INFO_NODENAME_BY_NAME = 14,CLU_INFO_MEMBLIST = 15,CLU_INFO_MY_ID = 16,};
enum MACRO_CLU_INFO_SUCCESS {CLU_INFO_SUCCESS = 0,CLU_NOT_MEMBER = 1,CLU_NO_CLUSTER_NAME = 2,CLU_NO_MEMBERID = 6,CLU_CNX_ERROR = 7,};
enum MACRO_CLU_MAXNAMELEN {CLU_MAXNAMELEN = 256,};
enum MACRO_CLU_MEMB {CLU_MEMB_CONF_DOWN = 0,CLU_MEMB_CONF_UP = 1,};
enum MACRO_CLU_MEMBER {CLU_MEMBER_ROOT_STRLEN = 17,};
enum MACRO_CLU_NO {CLU_NO_MEMORY = 3,};
enum MACRO_CLU_NO_MEMBERLIST {CLU_NO_MEMBERLIST = 3,CLU_BAD_MEMBERLIST = 4,CLU_NO_RC_CONFIG = 5,CLU_BAD_CLUINTER = 8,};
enum MACRO_CL_DEF {CL_DEF_MAX_NR_FLOWS = 500,};
enum MACRO_CL_OP {CL_OP_ENABLE = 0,CL_OP_DISABLE = 1,CL_OP_GET_CLASS_LIST = 2,CL_OP_ADD_TO_CLASS = 3,CL_OP_DEL_FROM_CLASS = 4,CL_OP_SET_CLASS_LIST = 5,CL_OP_DAEMON_ALIVE = 6,CL_OP_GET_PARTITION = 7,CL_OP_IS_ENABLED = 8,CL_OP_GET_PID_CLASS = 9,};
enum MACRO_CL_STATE {CL_STATE_DISABLED = 0,CL_STATE_ENABLED = 1,CL_STATE_DFLT_CLASS_INUSE = 2,CL_STATE_ENFORCE_WHEN_IDLE = 4,};
enum MACRO_CL_TYPE {CL_TYPE_RESERVED = 0,CL_TYPE_GID = 1,CL_TYPE_UID = 2,CL_TYPE_UNUSED = 3,CL_TYPE_ALL = 4,CL_TYPE_PGRP = 5,CL_TYPE_SESS = 6,CL_TYPE_PID = 7,};
enum MACRO_CL_TYPE_HIGHEST {CL_TYPE_HIGHEST = 7,};
enum MACRO_CM {CM_DEBUG = 1,CM_TRACE = 2,CM_STATIC = 4,CM_CONFIG = 8,CM_DYNAMIC = 16,CM_TRACE_THIS = 256,};
enum MACRO_CMASK {CMASK = 0x12,NODEV = 0xFFFFFFFF,};
enum MACRO_CMIN {CMIN = 1,CQUIT = 28,};
enum MACRO_CMPSNM {CMPSNM = 3,CMSCSZ = 16,};
enum MACRO_CM_CMSTAMP {CM_CMSTAMP = 3,CM_COMPACT_RLC = 4,CM_STRSPACE = 5,CM_TAGDESC = 6,CM_IDENT = 7,CM_TOOLVER = 8,CM_LOUSER = -2147483648,CM_HIUSER = -1,};
enum MACRO_CM_R {CM_R_TYPE_NULL = 0,CM_R_TYPE_ABS = 1,CM_R_TYPE_GPREL32 = 2,CM_R_TYPE_QUAD = 3,CM_R_TYPE_GPHI_LO = 4,CM_R_TYPE_WORD = 5,CM_R_TYPE_INITHI_LO = 7,CM_R_TYPE_SREL16 = 8,CM_R_TYPE_SREL32 = 9,CM_R_TYPE_SREL64 = 10,CM_R_TYPE_PUSHPSUB = 11,CM_R_TYPE_SHIFTSTORE = 12,CM_R_TYPE_GPVALUE = 13,CM_R_TYPE_EXTENDED_TYPE = 15,};
enum MACRO_CM_RELOC {CM_RELOC_NO = 1,CM_RELOC_PTR = 2,};
enum MACRO_CM_VERSION {CM_VERSION = 0,CM_NULL = 0,CM_END = 0,};
enum MACRO_CNUL {CNUL = 0,CVT = 11,CEOL = -1,};
enum MACRO_CNX {CNX_HAB_NO = 0x8000000,};
enum MACRO_CNXV11 {CNXV11 = 0x101,};
enum MACRO_COLL {COLL_WEIGHTS_MAX = 6,EXPR_NEST_MAX = 32,LINE_MAX = 2048,};
enum MACRO_COLOR {COLOR_BLACK = 0,COLOR_RED = 1,COLOR_GREEN = 2,COLOR_YELLOW = 3,COLOR_BLUE = 4,COLOR_MAGENTA = 5,COLOR_CYAN = 6,COLOR_WHITE = 7,};
enum MACRO_COLOR_MAP {COLOR_MAP_BASE = 0x0,OVERLAY_COLOR_BASE = 0x100,CURSOR_COLOR_1 = 0x181,CURSOR_COLOR_2 = 0x182,CURSOR_COLOR_3 = 0x183,ID_REG = 0x200,CMD_REG_0 = 0x201,CMD_REG_1 = 0x202,CMD_REG_2 = 0x203,PIXEL_READ_MASK = 0x204,PIXEL_BLINK_MASK = 0x206,OVERLAY_READ_MASK = 0x208,OVERLAY_BLINK_MASK = 0x209,INTERLEAVE_REG = 0x20A,TEST_REG = 0x20B,RED_SIGNATURE = 0x20C,GREEN_SIGNATURE = 0x20D,BLUE_SIGNATURE = 0x20E,CURSOR_CMD_REG = 0x300,CURSOR_X_LOW = 0x301,CURSOR_X_HIGH = 0x302,CURSOR_Y_LOW = 0x303,CURSOR_Y_HIGH = 0x304,WINDOW_X_LOW = 0x305,WINDOW_X_HIGH = 0x306,WINDOW_Y_LOW = 0x307,WINDOW_Y_HIGH = 0x308,WINDOW_WIDTH_LOW = 0x309,WINDOW_WIDTH_HIGH = 0x30A,WINDOW_HEIGHT_LOW = 0x30B,WINDOW_HEIGHT_HIGH = 0x30C,CURSOR_RAM_BASE = 0x400,};
enum MACRO_COMP {COMP_AC = 0x1,DECOMP_AC = 0x2,COMP_PROT = 0x4,DECOMP_PROT = 0x8,COMP_VJC = 0x10,COMP_VJCCID = 0x20,DECOMP_VJC = 0x40,DECOMP_VJCCID = 0x80,CCP_ISOPEN = 0x100,CCP_ISUP = 0x200,CCP_ERROR = 0x400,CCP_FATALERROR = 0x800,CCP_COMP_RUN = 0x1000,CCP_DECOMP_RUN = 0x2000,};
enum MACRO_COMPAT {COMPAT_LOGNAME = 12,MAXCOMLEN = 16,NOFILE_IN_U = 64,};
enum MACRO_COMPOSE {COMPOSE_H = 1,COMPOSE_ShortVoidSymbol = 65535,};
enum MACRO_COMPOSE_CAN {COMPOSE_CAN_FREE = 1,COMPOSE_INACTIVE = 2,};
enum MACRO_COMPOSE_IGNORE {COMPOSE_IGNORE = 0,COMPOSE_IN_PROGRESS = 1,COMPOSE_SUCCEED = 2,COMPOSE_FAIL = 3,};
enum MACRO_COMPOSE_INT {COMPOSE_INT_H = 1,};
enum MACRO_COMPOSE_MAX {COMPOSE_MAX_SYMS = 30,COMPOSE_SYMS_SIZE = 31,COMPOSE_MAX_CHARS = 100,COMPOSE_CHARS_SIZE = 101,COMPOSE_MAX_PRIVATE = 4095,};
enum MACRO_COMPOSE_TREE {COMPOSE_TREE = 1,COMPOSE_TREE_SHORTCUT = 2,COMPOSE_STRING = 3,NEXT_IS_UNDEFINED = 85,};
enum MACRO_CONCRETE {CONCRETE_WALL = -1,};
enum MACRO_CONFIG {CONFIG_PERSIST = 0x1,CONFIG_PREF_BUSNO = 0x10,};
enum MACRO_CONFIG_ALIVE {CONFIG_ALIVE = 1,};
enum MACRO_CONFIG_PREF {CONFIG_PREF_CTLRNO = 0x10,CONFIG_PREF_SLOTNO = 0x20,CONFIG_PREF_PBUS_INST = 0x40,};
enum MACRO_CONSOLE {CONSOLE_DTYPE = 0,QVSS_DTYPE = 1,QDSS_DTYPE = 2,SS_DTYPE = 3,SM_DTYPE = 4,SG_DTYPE = 5,LYNX_DTYPE = 6,FC_DTYPE = 7,FG_DTYPE = 8,PMM_DTYPE = 9,PMC_DTYPE = 10,CFB_DTYPE = 11,GA_DTYPE = 12,};
enum MACRO_CONTINUEb {CONTINUEb = 128,};
enum MACRO_CORD {CORD_TOOLVER = 0,};
enum MACRO_CORE {CORE_VERS = 2,};
enum MACRO_COUNT {COUNT = 0,CREATE = 1,};
enum MACRO_CP {CP_NICE = 1,CP_SYS = 2,CP_IDLE = 3,CP_WAIT = 4,RSTATPROG = 100001,};
enum MACRO_CPU {CPU_STATE_MAX = 5,CPU_STATE_USER = 0,};
enum MACRO_CPUSTATES {CPUSTATES = 5,CP_USER = 0,};
enum MACRO_CPU_MAX {CPU_MAX = 59,S_CORR_ERR = 1568,P_CORR_ERR = 1584,S_MCHECK = 1632,P_MCHECK = 1648,S_SRVMGMT_EVT = 1664,};
enum MACRO_CPU_NTIMES {CPU_NTIMES = 4,CPU_IDLE = 0,};
enum MACRO_CPU_STATE {CPU_STATE_NICE = 1,CPU_STATE_SYSTEM = 2,CPU_STATE_IDLE = 3,CPU_STATE_WAIT = 4,};
enum MACRO_CPU_SUBTYPE {CPU_SUBTYPE_VAX780 = 1,CPU_SUBTYPE_VAX785 = 2,CPU_SUBTYPE_VAX750 = 3,CPU_SUBTYPE_VAX730 = 4,CPU_SUBTYPE_UVAXI = 5,CPU_SUBTYPE_UVAXII = 6,CPU_SUBTYPE_VAX8200 = 7,CPU_SUBTYPE_VAX8500 = 8,CPU_SUBTYPE_VAX8600 = 9,CPU_SUBTYPE_VAX8650 = 10,CPU_SUBTYPE_VAX8800 = 11,CPU_SUBTYPE_UVAXIII = 12,};
enum MACRO_CPU_SUBTYPE_ALPHA {CPU_SUBTYPE_ALPHA_ADU = 1,CPU_SUBTYPE_DEC_4000 = 2,CPU_SUBTYPE_DEC_7000 = 3,CPU_SUBTYPE_DEC_3000_500 = 4,CPU_SUBTYPE_DEC_3000_400 = 5,CPU_SUBTYPE_DEC_10000 = 6,CPU_SUBTYPE_DEC_3000_300 = 7,CPU_SUBTYPE_DEC_2000_300 = 8,CPU_SUBTYPE_DEC_2100_A500 = 9,CPU_SUBTYPE_DEC_AXPVME_64 = 10,CPU_SUBTYPE_DEC_AXPPCI_33 = 11,CPU_SUBTYPE_DEC_AVANTI = 13,CPU_SUBTYPE_DEC_MUSTANG = 14,CPU_SUBTYPE_DEC_800_5 = 15,CPU_SUBTYPE_DEC_21000_800 = 16,CPU_SUBTYPE_DEC_1000 = 17,CPU_SUBTYPE_DEC_21000_900 = 18,CPU_SUBTYPE_EB66 = 19,CPU_SUBTYPE_EB64P = 20,CPU_SUBTYPE_ALPHABOOK = 21,CPU_SUBTYPE_DEC_4100 = 22,CPU_SUBTYPE_DEC_EV45_PBP = 23,CPU_SUBTYPE_DEC_2100A_A500 = 24,CPU_SUBTYPE_EB164 = 26,CPU_SUBTYPE_DEC_1000A = 27,CPU_SUBTYPE_DEC_ALPHAVME_224 = 28,CPU_SUBTYPE_DEC_550 = 30,CPU_SUBTYPE_DEC_EV56_PBP = 32,CPU_SUBTYPE_DEC_ALPHAVME_320 = 33,CPU_SUBTYPE_DEC_6600 = 34,CPU_SUBTYPE_ALPHA_WILDFIRE = 35,CPU_SUBTYPE_DMCC_EV6 = 37,};
enum MACRO_CPU_SUBTYPE_ARM {CPU_SUBTYPE_ARM_A500_ARCH = 1,CPU_SUBTYPE_ARM_A500 = 2,CPU_SUBTYPE_ARM_A440 = 3,CPU_SUBTYPE_ARM_M4 = 4,CPU_SUBTYPE_ARM_A680 = 5,};
enum MACRO_CPU_SUBTYPE_AT386 {CPU_SUBTYPE_AT386 = 1,CPU_SUBTYPE_EXL = 2,CPU_SUBTYPE_SQT86 = 3,};
enum MACRO_CPU_SUBTYPE_MIPS {CPU_SUBTYPE_MIPS_R2300 = 1,CPU_SUBTYPE_MIPS_R2600 = 2,CPU_SUBTYPE_MIPS_R2800 = 3,CPU_SUBTYPE_MIPS_R2000a = 4,CPU_SUBTYPE_MIPS_R3000a = 5,};
enum MACRO_CPU_SUBTYPE_MMAX {CPU_SUBTYPE_MMAX_DPC = 1,CPU_SUBTYPE_SQT = 2,CPU_SUBTYPE_MMAX_APC_FPU = 3,CPU_SUBTYPE_MMAX_APC_FPA = 4,CPU_SUBTYPE_MMAX_XPC_FPU = 5,CPU_SUBTYPE_MMAX_XPC_FPA = 6,};
enum MACRO_CPU_SUBTYPE_MMAX_JPC {CPU_SUBTYPE_MMAX_JPC = 1,};
enum MACRO_CPU_SUBTYPE_NeXT {CPU_SUBTYPE_NeXT = 1,CPU_SUBTYPE_HP_340 = 2,CPU_SUBTYPE_HP_360 = 3,CPU_SUBTYPE_HP_370 = 4,CPU_SUBTYPE_APOLLO_2500 = 5,CPU_SUBTYPE_APOLLO_3500 = 6,CPU_SUBTYPE_APOLLO_4500 = 7,};
enum MACRO_CPU_SUBTYPE_PA {CPU_SUBTYPE_PA_RISC_840 = 0x4,CPU_SUBTYPE_PA_RISC_825 = 0x8,CPU_SUBTYPE_PA_RISC_835 = 0xA,CPU_SUBTYPE_PA_RISC_850 = 0xC,CPU_SUBTYPE_PA_RISC_855 = 0x81,CPU_SUBTYPE_PA_RISC_810 = 0x100,CPU_SUBTYPE_PA_RISC_815 = 0x103,CPU_SUBTYPE_PA_RISC_710 = 0x300,};
enum MACRO_CPU_SUBTYPE_PA_RISC {CPU_SUBTYPE_PA_RISC_720 = 0x200,CPU_SUBTYPE_PA_RISC_730 = 0x202,};
enum MACRO_CPU_SUBTYPE_PA_RISC_750 {CPU_SUBTYPE_PA_RISC_750 = 0x201,};
enum MACRO_CPU_SUBTYPE_RT {CPU_SUBTYPE_RT_PC = 1,CPU_SUBTYPE_RT_APC = 2,CPU_SUBTYPE_RT_135 = 3,};
enum MACRO_CPU_SUBTYPE_SUN3 {CPU_SUBTYPE_SUN3_50 = 1,CPU_SUBTYPE_SUN3_160 = 2,CPU_SUBTYPE_SUN3_260 = 3,CPU_SUBTYPE_SUN3_110 = 4,CPU_SUBTYPE_SUN3_60 = 5,CPU_SUBTYPE_HP_320 = 6,CPU_SUBTYPE_HP_330 = 7,CPU_SUBTYPE_HP_350 = 8,CPU_SUBTYPE_APOLLO_3000 = 9,CPU_SUBTYPE_APOLLO_4000 = 10,};
enum MACRO_CPU_SUBTYPE_SUN4 {CPU_SUBTYPE_SUN4_260 = 1,CPU_SUBTYPE_SUN4_110 = 2,SIDBITS = 18,};
enum MACRO_CPU_TYPE {CPU_TYPE_VAX = 1,CPU_TYPE_ROMP = 2,CPU_TYPE_MC68020 = 3,CPU_TYPE_NS32032 = 4,CPU_TYPE_NS32332 = 5,CPU_TYPE_NS32532 = 6,CPU_TYPE_I386 = 7,CPU_TYPE_MIPS = 8,CPU_TYPE_MC68030 = 9,CPU_TYPE_MC68040 = 10,CPU_TYPE_PA_RISC = 11,CPU_TYPE_ARM = 12,CPU_TYPE_MC88000 = 13,CPU_TYPE_SPARC = 14,CPU_TYPE_ALPHA = 15,CPU_TYPE_I586 = 16,};
enum MACRO_CPU_USER {CPU_USER = 1,CPU_KERNEL = 2,CPU_WAIT = 3,};
enum MACRO_CR0 {CR0 = 0x0,CR1 = 0x1000,CR2 = 0x2000,CR3 = 0x3000,FFDLY = 0x4000,};
enum MACRO_CREPRINT {CREPRINT = 0x12,CBRK = 0xFFFFFFFF,};
enum MACRO_CRMOD {CRMOD = 0x10,RAW = 0x20,ODDP = 0x40,EVENP = 0x80,ANYP = 0xC0,NLDELAY = 0x300,TBDELAY = 0xC00,};
enum MACRO_CROUND {CROUND = 63,MSGMAX = 8192,MSGMNB = 16384,};
enum MACRO_CRPRNT {CRPRNT = 18,};
enum MACRO_CS {CS_CACHE = 0,CS_DIRECTIO = 1,};
enum MACRO_CS5 {CS5 = 0x0,CS6 = 0x100,CS7 = 0x200,CS8 = 0x300,CSTOPB = 0x400,CREAD = 0x800,PARENB = 0x1000,PARODD = 0x2000,HUPCL = 0x4000,CLOCAL = 0x8000,CRTSCTS = 0x10000,};
enum MACRO_CSIZE {CSIZE = 0x300,};
enum MACRO_CSTART {CSTART = 0x11,CSTOP = 0x13,CLNEXT = 0x16,};
enum MACRO_CSTATUS {CSTATUS = -1,};
enum MACRO_CSUSP {CSUSP = 0x1A,};
enum MACRO_CS_FORMAT {CS_FORMAT = 0xE,CS_GO = 0x1,};
enum MACRO_CS_HDMABUSY {CS_HDMABUSY = 0x1,};
enum MACRO_CS_IAP {CS_IAP = 0x4000,CS_IAPWC = 0x2000,CS_ONHALT = 0x1000,CS_ONZERO = 0x800,CS_ONAPRQ = 0x400,CS_FERR = 0x200,CS_DLATE = 0x100,CS_CC = 0x80,CS_DMAENB = 0x40,CS_APTOH = 0x20,CS_HTOAP = 0x0,};
enum MACRO_CTIME {CTIME = 0,CDSUSP = 25,};
enum MACRO_CTLR {CTLR_CONFIG_REV_V0 = 0,CTLR_CONFIG_REV_V1 = 1,CTLR_CONFIG_REV_V2 = 2,};
enum MACRO_CTLR_CONFIG {CTLR_CONFIG_REVISION = 2,};
enum MACRO_CTR {CTR_ETHER = 0,CTR_DDCMP = 1,CTR_FDDI = 2,FDDIMIB_SMT = 3,FDDIMIB_MAC = 4,FDDIMIB_PATH = 5,FDDIMIB_PORT = 6,FDDIMIB_ATTA = 7,FDDI_STATUS = 8,FDDISMT_MIB_SMT = 9,FDDISMT_MIB_MAC = 10,FDDISMT_MIB_PATH = 11,FDDISMT_MIB_PORT = 12,FDDIDECEXT_MIB = 13,CTR_TRN = 14,TRN_CHAR = 15,TRN_MIB_ENTRY = 16,TRN_MIB_STAT_ENTRY = 17,TRN_MIB_TIMER_ENTRY = 18,FDDIMIB_PORT_B = 19,FDDISMT_MIB_PORT_B = 20,DS1_CONFIG = 21,DS1_CURRENT = 22,DS1_INTERVAL = 23,DS1_TOTAL = 24,DS1_FAR_END_CURRENT = 25,DS1_FAR_END_INTERVAL = 26,DS1_FAR_END_TOTAL = 27,DS1_FRAC = 28,CTR_IPSTAT = 29,CTR_IPSTATBOOT = 30,CTR_ICMPSTAT = 31,CTR_ICMPSTATBOOT = 32,CTR_TCPSTAT = 33,CTR_TCPSTATBOOT = 34,CTR_UDPSTAT = 35,CTR_UDPSTATBOOT = 36,CTR_IGMPSTAT = 37,CTR_IGMPSTATBOOT = 38,CTR_RTSTAT = 39,CTR_RTSTATBOOT = 40,CTR_MRTSTAT = 41,CTR_MRTSTATBOOT = 42,};
enum MACRO_CTR_BUFUNAVAIL {CTR_BUFUNAVAIL = 0,};
enum MACRO_CTR_HDRCRC {CTR_HDRCRC = 0,CTR_DATCRC = 1,};
enum MACRO_CUNIT {CUNIT = 1024,};
enum MACRO_CURRENT {CURRENT_VALUES = 0,CHANGED_VALUES = 1,DEFAULT_VALUES = 2,SAVED_VALUES = 3,};
enum MACRO_CURS {CURS_STUPID = 1,CURS_UNKNOWN = 2,CURS_BAD_MALLOC = 3,CURS_DBG_BAD_MALLOC = 4,};
enum MACRO_CURSOR {CURSOR_ON = 1,CURSOR_OFF = 0,};
enum MACRO_CURS_ERR {CURS_ERR_SET = 1,};
enum MACRO_CVT {CVT_VAX_F = 1,CVT_VAX_D = 2,CVT_VAX_G = 3,CVT_VAX_H = 4,CVT_IEEE_S = 5,CVT_IEEE_T = 6,CVT_IEEE_X = 7,CVT_BIG_ENDIAN_IEEE_S = 8,CVT_BIG_ENDIAN_IEEE_T = 9,CVT_BIG_ENDIAN_IEEE_X = 10,CVT_IBM_SHORT = 11,CVT_IBM_LONG = 12,CVT_CRAY_SINGLE = 13,};
enum MACRO_CVT_NORMAL {CVT_NORMAL = 0,CVT_INVALID_INPUT_TYPE = 1,CVT_INVALID_OUTPUT_TYPE = 2,CVT_INVALID_OPTION = 4,CVT_RESULT_INFINITE = 8,CVT_RESULT_DENORMALIZED = 16,CVT_RESULT_OVERFLOW_RANGE = 32,CVT_RESULT_UNDERFLOW_RANGE = 64,CVT_RESULT_UNNORMALIZED = 128,CVT_RESULT_INVALID = 256,CVT_RESULT_OVERFLOW = 512,CVT_RESULT_UNDERFLOW = 1024,CVT_RESULT_INEXACT = 2048,};
enum MACRO_CVT_ROUND {CVT_ROUND_TO_NEAREST = 1,CVT_ROUND_TO_ZERO = 2,CVT_ROUND_TO_POS = 4,CVT_ROUND_TO_NEG = 8,CVT_BIASED_ROUNDING = 16,CVT_FORCE_INVALID_TO_ZERO = 32,CVT_FORCE_DENORM_TO_ZERO = 64,CVT_FORCE_INF_TO_MAX_FLOAT = 128,CVT_FORCE_ALL_SPECIAL_VALUES = 256,CVT_ALLOW_OVRFLW_RANGE_VALUES = 512,CVT_ALLOW_UDRFLW_RANGE_VALUES = 1024,CVT_ALLOW_UNNORMALIZED_VALUES = 2048,CVT_REPORT_ALL = 4096,};
enum MACRO_CWBackPixmap {CWBackPixmap = 1,CWBackPixel = 2,CWBorderPixmap = 4,CWBorderPixel = 8,CWBitGravity = 16,CWWinGravity = 32,CWBackingStore = 64,CWBackingPlanes = 128,CWBackingPixel = 256,CWOverrideRedirect = 512,CWSaveUnder = 1024,CWEventMask = 2048,CWDontPropagate = 4096,CWColormap = 8192,CWCursor = 16384,};
enum MACRO_CWX {CWX = 1,CWY = 2,CWWidth = 4,CWHeight = 8,CWBorderWidth = 16,CWSibling = 32,CWStackMode = 64,};
enum MACRO_C_DDIDKI {C_DDIDKI = 0x10000000,};
enum MACRO_C_ISCHR {C_ISCHR = 0x2000,C_ISCTG = 0x9000,C_ISLNK = 0xA000,C_ISSOCK = 0xC000,};
enum MACRO_C_ISDIR {C_ISDIR = 0x4000,C_ISFIFO = 0x1000,};
enum MACRO_C_ISREG {C_ISREG = 0x8000,C_ISBLK = 0x6000,};
enum MACRO_C_ISUID {C_ISUID = 0x800,C_ISGID = 0x400,C_ISVTX = 0x200,};
enum MACRO_CapNotLast {CapNotLast = 0,CapButt = 1,CapRound = 2,CapProjecting = 3,};
enum MACRO_CatalogueChangeNotifyMask {CatalogueChangeNotifyMask = 1,FontChangeNotifyMask = 2,FSSuccess = -1,};
enum MACRO_ClipByChildren {ClipByChildren = 0,IncludeInferiors = 1,};
enum MACRO_ClipboardFail {ClipboardFail = 0,ClipboardSuccess = 1,ClipboardTruncate = 2,ClipboardLocked = 4,ClipboardBadFormat = 5,ClipboardNoData = 6,};
enum MACRO_ColormapUninstalled {ColormapUninstalled = 0,ColormapInstalled = 1,};
enum MACRO_Complex {Complex = 0,Nonconvex = 1,Convex = 2,};
enum MACRO_CompositeIndex {CompositeIndex = 4,XmConstraintIndex = 5,};
enum MACRO_ConstraintIndex {ConstraintIndex = 5,};
enum MACRO_CoordModeOrigin {CoordModeOrigin = 0,CoordModePrevious = 1,};
enum MACRO_CopyFromParent {CopyFromParent = 0,};
enum MACRO_CoreIndex {CoreIndex = 0,XmCompositeIndex = 4,};
enum MACRO_CurrentTime {CurrentTime = 0,};
enum MACRO_CursorShape {CursorShape = 0,TileShape = 1,StippleShape = 2,};
enum MACRO_D {D_T_FMT = 1,D_FMT = 2,T_FMT = 3,AM_STR = 4,PM_STR = 5,ABDAY_1 = 6,ABDAY_2 = 7,ABDAY_3 = 8,ABDAY_4 = 9,ABDAY_5 = 10,ABDAY_6 = 11,ABDAY_7 = 12,DAY_1 = 13,DAY_2 = 14,DAY_3 = 15,DAY_4 = 16,DAY_5 = 17,DAY_6 = 18,DAY_7 = 19,ABMON_1 = 20,ABMON_2 = 21,ABMON_3 = 22,ABMON_4 = 23,ABMON_5 = 24,ABMON_6 = 25,ABMON_7 = 26,ABMON_8 = 27,ABMON_9 = 28,ABMON_10 = 29,ABMON_11 = 30,ABMON_12 = 31,MON_1 = 32,MON_2 = 33,MON_3 = 34,MON_4 = 35,MON_5 = 36,MON_6 = 37,MON_7 = 38,MON_8 = 39,MON_9 = 40,MON_10 = 41,MON_11 = 42,MON_12 = 43,RADIXCHAR = 44,THOUSEP = 45,YESSTR = 46,NOSTR = 47,CRNCYSTR = 48,CODESET = 49,_M_D_RECENT = 50,_M_D_OLD = 51,ERA = 52,ERA_D_FMT = 53,ERA_D_T_FMT = 54,ERA_T_FMT = 55,T_FMT_AMPM = 56,ALT_DIGITS = 57,NOEXPR = 58,YESEXPR = 59,__UNUSED_1 = 60,};
enum MACRO_DAEMON {DAEMON_LOG = 0x1,EXTERN_LOG = 0x2,};
enum MACRO_DAYS {DAYS_PER_WEEK = 7,DAYS_PER_NYEAR = 365,DAYS_PER_LYEAR = 366,SECS_PER_HOUR = 3600,SECS_PER_DAY = 86400,};
enum MACRO_DAYSPERWEEK {DAYSPERWEEK = 7,DAYSPERNYEAR = 365,DAYSPERLYEAR = 366,SECSPERHOUR = 3600,SECSPERDAY = 86400,};
enum MACRO_DBASE {DBASE_NAME_LEN = 80,};
enum MACRO_DBG {DBG_GENERAL = 0x1,DBG_WARNING = 0x2,DBG_ERROR = 0x4,DBG_BRKPT = 0x8,DBG_MEM = 0x10,DBG_IO = 0x20,DBG_RDEBUG = 0x40,DBG_PROTO = 0x80,};
enum MACRO_DBL {DBL_DIG = 15,};
enum MACRO_DBL_MAX {DBL_MAX_EXP = 1024,};
enum MACRO_DBL_MAX_10 {DBL_MAX_10_EXP = 308,};
enum MACRO_DBL_MIN {DBL_MIN_EXP = -1021,};
enum MACRO_DBL_MIN_10 {DBL_MIN_10_EXP = -307,};
enum MACRO_DBM {DBM_INSERT = 0,DBM_REPLACE = 1,};
enum MACRO_DBSHIFT {DBSHIFT = 9,};
enum MACRO_DBX {DBX_TOOLVER = 0,};
enum MACRO_DCE {DCE_NUM = 2,};
enum MACRO_DDIDKI {DDIDKI_VERSION_MAJOR = 5,DDIDKI_VERSION_MINOR = 0,DDIDKI_VERSION_REV = 0,};
enum MACRO_DEC {DEC_VERSION_TAG_VALUE = -1,};
enum MACRO_DECCTQ {DECCTQ = 0x40000000,};
enum MACRO_DECOMP {DECOMP_OK = 0,DECOMP_ERROR = 1,DECOMP_FATALERROR = 2,};
enum MACRO_DECWmIconifyPixmapMask {DECWmIconifyPixmapMask = 1,DECWmIconBoxXMask = 2,DECWmIconBoxYMask = 4,DECWmTiledMask = 8,DECWmStickyMask = 16,DECWmNoIconifyButtonMask = 32,DECWmNoLowerButtonMask = 64,DECWmNoResizeButtonMask = 128,};
enum MACRO_DEF {DEF_LEV = 57,A_WHILE = 150,};
enum MACRO_DEFAULT {DEFAULT_HAB_NO = 0,};
enum MACRO_DEFAULT2 {DEFAULT_GRIP_SIZE = 8,};
enum MACRO_DEFAULT_CLASS {DEFAULT_CLASS_IN_USE = 0,DEFAULT_IDLE_ENFORCE = 1,};
enum MACRO_DEFAULT_DAEMON {DEFAULT_DAEMON_RATE = 1,};
enum MACRO_DEFAULT_GRAPHICS {DEFAULT_GRAPHICS = 1,FORCE_NO_GRAPHICS = 2,FORCE_GENERIC_CONS = 3,USE_GENERIC_VGA = 4,FORCE_CALLBACK_CONS = 5,NUMSCREENS = 16,};
enum MACRO_DEFAULT_HASH {DEFAULT_HASH_MAX = 15,DEFAULT_BUCKETS = 64,};
enum MACRO_DEFAULT_HEIGHT {DEFAULT_HEIGHT = 20,};
enum MACRO_DEFAULT_JUMP {DEFAULT_JUMP = -1,};
enum MACRO_DEFAULT_LOGNAME {DEFAULT_LOGNAME = 12,};
enum MACRO_DEFAULT_THRESHOLD {DEFAULT_THRESHOLD = 32,DEFAULT_MAX_IR_SIZE = 512,DEFAULT_MAX_CACHE_SIZE = 512000,};
enum MACRO_DEFAULT_WIDTH {DEFAULT_WIDTH = 20,};
enum MACRO_DEFLATE {DEFLATE_METHOD_VAL = 8,};
enum MACRO_DEFLATE_CHK {DEFLATE_CHK_SEQUENCE = 0,CI_PREDICTOR_1 = 1,CILEN_PREDICTOR_1 = 2,};
enum MACRO_DEF_CLUSTER {DEF_CLUSTER = 100,DEF_TLEN = 4500,};
enum MACRO_DEF_TDEN {DEF_TDEN = 700,};
enum MACRO_DEL {DEL_VADDR_MASK = 0x0,};
enum MACRO_DELETETCB {DELETETCB = 12,};
enum MACRO_DEL_0 {DEL = 0x2,RNM = 0x4,};
enum MACRO_DEV {DEV_BSIZE = 512,DEV_BSHIFT = 9,};
enum MACRO_DEVGEOM {DEVGEOM_REMOVE = 0x1,DEVGEOM_DYNAMIC = 0x2,DEVGEOM_INVENTED = 0x4,THIRD_PARTY_DTYPE = 0x80,};
enum MACRO_DEVICE {DEVICE_CONFIG_REV_V0 = 0,DEVICE_CONFIG_REV_V1 = 1,BUS_CONFIG_REVISION = 2,};
enum MACRO_DEVICE2 {DEVICE_RESOLUTION = 1,};
enum MACRO_DEVICE_BITS {DEVICE_BITS = 0x7F,};
enum MACRO_DEVICE_CONFIG {DEVICE_CONFIG_REVISION = 1,NAME_SIZE_REG = 30,};
enum MACRO_DEVIO {DEVIO_INCLUDE = 1,DEV_SIZE = 8,};
enum MACRO_DEVPATHAVAIL {DEVPATHAVAIL = 536901129,};
enum MACRO_DEV_ARCH {DEV_ARCH_LEN = 32,};
enum MACRO_DEV_BOM {DEV_BOM = 0x1,DEV_EOM = 0x2,DEV_OFFLINE = 0x4,DEV_WRTLCK = 0x8,DEV_BLANK = 0x10,DEV_WRITTEN = 0x20,DEV_CSE = 0x40,DEV_SOFTERR = 0x80,DEV_HARDERR = 0x100,DEV_DONE = 0x200,DEV_RETRY = 0x400,DEV_ERASED = 0x800,DEV_RDONLY = 0x1000,DEV_TAPE_MARK = 0x2000,DEV_SHORT_REC = 0x4000,DEV_TPMRK_PEND = 0x8000,DEV_REWINDING = 0x10000,DEV_READ_OPP = 0x20000,DEV_BOOT = 0x40000,};
enum MACRO_DEV_CONSUNIT {DEV_CONSUNIT_LEN = 16,};
enum MACRO_DEV_DDMASK {DEV_DDMASK = 0xF0,DEV_MODEM = 0x1,};
enum MACRO_DEV_DPMASK {DEV_DPMASK = 0x7,DEV_MC_COUNT = 0x8,DEV_3_HD2S = 0x10,DEV_3_DD2S = 0x20,DEV_5_HD2S = 0x30,DEV_5_DD1S = 0x40,DEV_5_LD2S = 0x50,DEV_5_DD2S = 0x60,DEV_3_ED2S = 0x70,DEV_X_XXXX = 0xF0,};
enum MACRO_DEV_FUNNEL {DEV_FUNNEL_NULL = 0,DEV_FUNNEL = 1,};
enum MACRO_DEV_MODEM {DEV_MODEM_ON = 0x2,};
enum MACRO_DEV_STRING {DEV_STRING_SIZE = 24,DEV_PRIVATE_LEN = 128,};
enum MACRO_DEV_TAPE {DEV_TAPE = 0x0,DEV_DISK = 0x1,DEV_TERMINAL = 0x2,DEV_PRINTER = 0x3,DEV_SPECIAL = 0x4,};
enum MACRO_DEV_TPMARK {DEV_TPMARK = 0x1,DEV_SHRTREC = 0x2,DEV_RDOPP = 0x4,DEV_RWDING = 0x8,DEV_800BPI = 0x10,DEV_1600BPI = 0x20,DEV_6250BPI = 0x40,DEV_6666BPI = 0x80,DEV_10240BPI = 0x100,DEV_38000BPI = 0x200,DEV_LOADER = 0x400,DEV_38000_CP = 0x800,DEV_76000BPI = 0x1000,DEV_76000_CP = 0x2000,DEV_8000_BPI = 0x4000,DEV_10000_BPI = 0x8000,DEV_16000_BPI = 0x10000,DEV_61000_BPI = 0x20000,DEV_54000_BPI = 0x40000,DEV_42500_BPI = 0x80000,DEV_45434_BPI = 0x100000,DEV_62500_BPI = 0x200000,DEV_36000_BPI = 0x400000,DEV_40640_BPI = 0x800000,DEV_81630_BPI = 0x1000000,};
enum MACRO_DEV_UB {DEV_UB = 0x0,DEV_QB = 0x1,DEV_MB = 0x2,DEV_BI = 0x3,DEV_CI = 0x4,DEV_NB = 0x5,DEV_MSI = 0x6,DEV_SCSI = 0x7,DEV_XMI = 0x8,DEV_BICI = 0x9,DEV_XMICI = 0xA,DEV_ISA = 0xB,DEV_EISA = 0xC,DEV_PCI = 0xD,DEV_TC = 0xE,DEV_UNKBUS = 0xFF,};
enum MACRO_DFLRSS {DFLRSS = 100,};
enum MACRO_DFLSSIZ {DFLSSIZ = 8388608,};
enum MACRO_DI {DI_NAMESZ = 8,};
enum MACRO_DIRBLKSIZ {DIRBLKSIZ = 512,};
enum MACRO_DIS {DIS_TOOLVER = 0,};
enum MACRO_DISEOT {DISEOT = 0x1,DBSIZE = 0x20,};
enum MACRO_DISPATCHER {DISPATCHER_MAGIC = 0xBEED00,GPINFO_MAGIC = 0xADF00F00,GPINFO_LAST = 0xFFFFFFFF,};
enum MACRO_DKDEV {DKDEV_CLS_UNKNOWN = 0x0,DKDEV_CLS_HARDDISK = 0x1,DKDEV_CLS_FLPY_GENERIC = 0x2,DKDEV_CLS_FLPY_3_DD2S = 0x3,DKDEV_CLS_FLPY_3_HD2S = 0x4,DKDEV_CLS_FLPY_3_ED2S = 0x5,DKDEV_CLS_FLPY_5_LD2S = 0x6,DKDEV_CLS_FLPY_5_DD1S = 0x7,DKDEV_CLS_FLPY_5_DD2S = 0x8,DKDEV_CLS_FLPY_5_HD2S = 0x9,DKDEV_CLS_CDROM = 0xA,DKDEV_CLS_WORM = 0xB,};
enum MACRO_DKDEV_ASF {DKDEV_ASF_BBR = 0x1,DISK_CLASS_LEN = 0x20,};
enum MACRO_DKDEV_READY {DKDEV_READY = 0x1,DKDEV_OFFLINE = 0x2,DKDEV_WRTPROT = 0x4,DKDEV_RDONLY = 0x8,DKDEV_WRTCACHING = 0x10,DKDEV_RAID = 0x20,DKDEV_REMOVABLE = 0x40,DKDEV_BOOT = 0x80,};
enum MACRO_DKIOCHDR {DKIOCHDR = 536896513,};
enum MACRO_DL {DL_CURRENT_VERSION = 0x2,};
enum MACRO_DLE {DLE = 0x10,REXMIT_TIME = 0x186A0,};
enum MACRO_DLM {DLM_HAB_NO = 0x7000000,};
enum MACRO_DLMV11 {DLMV11 = 0x101,};
enum MACRO_DLT {DLT_NULL = 0,DLT_EN10MB = 1,DLT_EN3MB = 2,DLT_AX25 = 3,DLT_PRONET = 4,DLT_CHAOS = 5,DLT_IEEE802 = 6,DLT_ARCNET = 7,DLT_SLIP = 8,DLT_PPP = 9,DLT_FDDI = 10,DLT_TRN = 11,};
enum MACRO_DL_ACCESS {DL_ACCESS = 0x2,DL_BADADDR = 0x1,};
enum MACRO_DL_AUTO {DL_AUTO_XID = 0x1,DL_AUTO_TEST = 0x2,};
enum MACRO_DL_BADCORR {DL_BADCORR = 0x5,DL_BADDATA = 0x6,DL_BADPPA = 0x8,DL_BADPRIM = 0x9,DL_BADQOSPARAM = 0xA,DL_BADQOSTYPE = 0xB,};
enum MACRO_DL_BADSAP {DL_BADSAP = 0x0,DL_BADTOKEN = 0xC,DL_BOUND = 0xD,DL_INITFAILED = 0xE,DL_NOADDR = 0xF,DL_NOTINIT = 0x10,};
enum MACRO_DL_BIND {DL_BIND_REQ = 0x1,DL_BIND_ACK = 0x4,};
enum MACRO_DL_CMD {DL_CMD_MASK = 0xF,DL_CMD_OK = 0x0,};
enum MACRO_DL_CMD_RS {DL_CMD_RS = 0x1,DL_CMD_UE = 0x5,DL_CMD_PE = 0x6,DL_CMD_IP = 0x7,DL_CMD_UN = 0x9,DL_CMD_IT = 0xF,DL_RSP_MASK = 0xF0,};
enum MACRO_DL_CODLS {DL_CODLS = 0x1,DL_CLDLS = 0x2,DL_ACLDLS = 0x4,DL_STYLE1 = 0x500,DL_STYLE2 = 0x501,DL_PROVIDER = 0x700,DL_USER = 0x701,DL_CONREJ_DEST_UNKNOWN = 0x800,DL_CONREJ_DEST_UNREACH_PERMANENT = 0x801,DL_CONREJ_DEST_UNREACH_TRANSIENT = 0x802,DL_CONREJ_QOS_UNAVAIL_PERMANENT = 0x803,DL_CONREJ_QOS_UNAVAIL_TRANSIENT = 0x804,DL_CONREJ_PERMANENT_COND = 0x805,DL_CONREJ_TRANSIENT_COND = 0x806,DL_DISC_ABNORMAL_CONDITION = 0x807,DL_DISC_NORMAL_CONDITION = 0x808,DL_DISC_PERMANENT_CONDITION = 0x809,DL_DISC_TRANSIENT_CONDITION = 0x80A,DL_DISC_UNSPECIFIED = 0x80B,DL_RESET_FLOW_CONTROL = 0x900,DL_RESET_LINK_ERROR = 0x901,DL_RESET_RESYNCH = 0x902,};
enum MACRO_DL_COMMAND {DL_COMMAND = 0x0,DL_RESPONSE = 0x2,};
enum MACRO_DL_CSMACD {DL_CSMACD = 0x0,DL_TPB = 0x1,DL_TPR = 0x2,DL_METRO = 0x3,DL_ETHER = 0x4,DL_HDLC = 0x5,DL_CHAR = 0x6,DL_CTCA = 0x7,DL_FDDI = 0x8,DL_OTHER = 0x9,DL_ASYN = 0xA,};
enum MACRO_DL_DATA {DL_DATA_REQ = 80,DL_DATA_IND = 81,};
enum MACRO_DL_ERR {DL_ERR_EXT = 0x50,};
enum MACRO_DL_ERROR {DL_ERROR_ACK = 0x5,DL_SUBS_BIND_REQ = 0x1B,DL_SUBS_BIND_ACK = 0x1C,};
enum MACRO_DL_FACT {DL_FACT_PHYS_ADDR = 0x1,DL_CURR_PHYS_ADDR = 0x2,};
enum MACRO_DL_INFO {DL_INFO_ACK = 0x3,DL_ATTACH_REQ = 0xB,DL_DETACH_REQ = 0xC,};
enum MACRO_DL_INVADDR {DL_INVADDR = 80,DL_AUTO = 81,};
enum MACRO_DL_OUTSTATE {DL_OUTSTATE = 0x3,DL_SYSERR = 0x4,DL_UNSUPPORTED = 0x7,DL_UNDELIVERABLE = 0x11,DL_NOTSUPPORTED = 0x12,DL_TOOMANY = 0x13,DL_NOTENAB = 0x14,DL_BUSY = 0x15,DL_NOAUTO = 0x16,DL_NOXIDAUTO = 0x17,DL_NOTESTAUTO = 0x18,DL_XIDAUTO = 0x19,DL_TESTAUTO = 0x1A,DL_PENDING = 0x1B,DL_PRIMSZ_UDERR = 0x80,DL_ADDRSZ_UDERR = 0x81,DL_DATASZ_UDERR = 0x82,DL_HDRPAD_UDERR = 0x83,};
enum MACRO_DL_PEER {DL_PEER_BIND = 0x1,DL_HIERARCHICAL_BIND = 0x2,};
enum MACRO_DL_POLL {DL_POLL_FINAL = 0x1,};
enum MACRO_DL_PRIM {DL_PRIM_EXT = 0x50,};
enum MACRO_DL_PROMISC {DL_PROMISC_PHYS = 0x1,DL_PROMISC_SAP = 0x2,DL_PROMISC_MULTI = 0x3,DL_NONE = 0xB01,DL_MONITOR = 0xB02,DL_MAXIMUM = 0xB03,DL_UNKNOWN = 0xFFFFFFFF,};
enum MACRO_DL_QOS {DL_QOS_DONT_CARE = -2,};
enum MACRO_DL_QOS_CO {DL_QOS_CO_RANGE1 = 0x101,DL_QOS_CO_SEL1 = 0x102,DL_QOS_CL_RANGE1 = 0x103,DL_QOS_CL_SEL1 = 0x104,};
enum MACRO_DL_RQST {DL_RQST_RSP = 0x1,DL_RQST_NORSP = 0x2,};
enum MACRO_DL_RSP {DL_RSP_OK = 0x0,DL_RSP_RS = 0x10,DL_RSP_NE = 0x30,DL_RSP_NR = 0x40,DL_RSP_UE = 0x50,DL_RSP_IP = 0x70,DL_RSP_UN = 0x90,DL_RSP_IT = 0xF0,};
enum MACRO_DL_SUBS {DL_SUBS_UNBIND_REQ = 0x15,DL_ENABMULTI_REQ = 0x1D,DL_DISABMULTI_REQ = 0x1E,DL_PROMISCON_REQ = 0x1F,DL_PROMISCOFF_REQ = 0x20,};
enum MACRO_DL_UNATTACHED {DL_UNATTACHED = 0x4,DL_ATTACH_PENDING = 0x5,DL_DETACH_PENDING = 0x6,};
enum MACRO_DL_UNBIND {DL_UNBIND_REQ = 0x2,DL_OK_ACK = 0x6,};
enum MACRO_DL_UNBOUND {DL_UNBOUND = 0x0,DL_BIND_PENDING = 0x1,DL_UNBIND_PENDING = 0x2,DL_IDLE = 0x3,DL_UDQOS_PENDING = 0x7,DL_OUTCON_PENDING = 0x8,DL_INCON_PENDING = 0x9,DL_CONN_RES_PENDING = 0xA,DL_DATAXFER = 0xB,DL_USER_RESET_PENDING = 0xC,DL_PROV_RESET_PENDING = 0xD,DL_RESET_RES_PENDING = 0xE,DL_DISCON8_PENDING = 0xF,DL_DISCON9_PENDING = 0x10,DL_DISCON11_PENDING = 0x11,DL_DISCON12_PENDING = 0x12,DL_DISCON13_PENDING = 0x13,DL_SUBS_BIND_PND = 0x14,DL_SUBS_UNBIND_PND = 0x15,};
enum MACRO_DL_UNITDATA {DL_UNITDATA_REQ = 0x7,DL_UNITDATA_IND = 0x8,DL_UDERROR_IND = 0x9,DL_UDQOS_REQ = 0xA,DL_CONNECT_REQ = 0xD,DL_CONNECT_IND = 0xE,DL_CONNECT_RES = 0xF,DL_CONNECT_CON = 0x10,DL_TOKEN_REQ = 0x11,DL_TOKEN_ACK = 0x12,DL_DISCONNECT_REQ = 0x13,DL_DISCONNECT_IND = 0x14,DL_RESET_REQ = 0x17,DL_RESET_IND = 0x18,DL_RESET_RES = 0x19,DL_RESET_CON = 0x1A,DL_DATA_ACK_REQ = 0x21,DL_DATA_ACK_IND = 0x22,DL_DATA_ACK_STATUS_IND = 0x23,DL_REPLY_REQ = 0x24,DL_REPLY_IND = 0x25,DL_REPLY_STATUS_IND = 0x26,DL_REPLY_UPDATE_REQ = 0x27,DL_REPLY_UPDATE_STATUS_IND = 0x28,DL_XID_REQ = 0x29,DL_XID_IND = 0x2A,DL_XID_RES = 0x2B,DL_XID_CON = 0x2C,DL_TEST_REQ = 0x2D,DL_TEST_IND = 0x2E,DL_TEST_RES = 0x2F,DL_TEST_CON = 0x30,DL_PHYS_ADDR_REQ = 0x31,DL_PHYS_ADDR_ACK = 0x32,DL_SET_PHYS_ADDR_REQ = 0x33,DL_GET_STATISTICS_REQ = 0x34,DL_GET_STATISTICS_ACK = 0x35,DL_X25DATA_REQ = 0x99,DL_X25DATA_IND = 0x9A,};
enum MACRO_DL_VERSION {DL_VERSION_2 = 0x2,DL_INFO_REQ = 0x0,};
enum MACRO_DMA {DMA_WINDOW_TYPE_DIRECT = 0x1,DMA_WINDOW_TYPE_SG = 0x2,DMA_WINDOW_TYPE_64BIT = 0x10,};
enum MACRO_DMAXEXP {DMAXEXP = 1024,};
enum MACRO_DMA_RSVD {DMA_RSVD_PLTFRM = 0x4000,DMA_DIRECT_MAP = 0x8000,DMA_64BIT = 0x10000,};
enum MACRO_DMA_SLEEP {DMA_SLEEP = 0x1,DMA_RSVD_0002 = 0x2,DMA_RSVD_0004 = 0x4,DMA_HW_SG = 0x8,DMA_GUARD_UPPER = 0x10,DMA_GUARD_LOWER = 0x20,DMA_ALL = 0x40,DMA_RSVD_0080 = 0x80,DMA_IN = 0x100,DMA_OUT = 0x200,DMA_ADDR_LIMIT = 0x400,DMA_RSVD_0800 = 0x800,DMA_DEALLOC = 0x1000,DMA_CONTIG = 0x2000,DMA_RSVD_4000 = 0x4000,};
enum MACRO_DMSET {DMSET = 0,DMBIS = 1,DMBIC = 2,DMGET = 3,};
enum MACRO_DNOBJECT {DNOBJECT_FAL = 17,DNOBJECT_NICE = 19,DNOBJECT_DTERM = 23,DNOBJECT_MIRROR = 25,DNOBJECT_EVR = 26,DNOBJECT_MAIL11 = 27,DNOBJECT_PHONE = 29,DNOBJECT_CTERM = 42,DNOBJECT_DTR = 63,DNOBJECT_P5EVL = 82,};
enum MACRO_DNPROTO {DNPROTO_NSP = 1,DNPROTO_ROU = 2,DNPROTO_NML = 3,DNPROTO_EVL = 4,DNPROTO_EVR = 5,};
enum MACRO_DOMAIN {DOMAIN = 0x1,SING = 0x2,OVERFLOW = 0x3,UNDERFLOW = 0x4,TLOSS = 0x5,PLOSS = 0x6,};
enum MACRO_DOMAIN_NAME {DOMAIN_NAME_SZ = 32,};
enum MACRO_DOUBLE {DOUBLE_TOKEN = 100,LONG_DOUBLE_TOKEN = 114,};
enum MACRO_DO_BSD {DO_BSD_COMPRESS = 1,};
enum MACRO_DO_DEFLATE {DO_DEFLATE = 1,DO_PREDICTOR_1 = 0,DO_PREDICTOR_2 = 0,};
enum MACRO_DP {DP_SELF_TEST = 0x4,DP_PF_VALID = 0x10,};
enum MACRO_DPMS {DPMS_ON = 0x0,DPMS_STANDBY = 0x1,DPMS_SUSPEND = 0x2,DPMS_OFF = 0x3,WS_SHUTDOWN = 0x4,DPMS_NOT_SUPPORTED = 0xFFFFFFFF,};
enum MACRO_DPMSMinorVersion {DPMSMinorVersion = 1,};
enum MACRO_DPMSModeOn {DPMSModeOn = 0,DPMSModeStandby = 1,DPMSModeSuspend = 2,DPMSModeOff = 3,};
enum MACRO_DPMSNumberErrors {DPMSNumberErrors = 0,DPMSMajorVersion = 1,};
enum MACRO_DPMSNumberEvents {DPMSNumberEvents = 0,};
enum MACRO_DPMS_STATE {DPMS_STATE_ON = 1,DPMS_STATE_OFF = 0,};
enum MACRO_DRIVER {DRIVER_WILDNUM = -99,};
enum MACRO_DRVR {DRVR_REGISTER = 0x1,DRVR_UNREGISTER = 0x2,};
enum MACRO_DSC$K {DSC$K_DTYPE_Z = 0,DSC$K_DTYPE_BU = 2,DSC$K_DTYPE_WU = 3,DSC$K_DTYPE_LU = 4,DSC$K_DTYPE_QU = 5,DSC$K_DTYPE_OU = 25,};
enum MACRO_DSC$K_CLASS {DSC$K_CLASS_S = 1,DSC$K_CLASS_D = 2,DSC$K_CLASS_A = 4,DSC$K_CLASS_P = 5,DSC$K_CLASS_SD = 9,DSC$K_CLASS_NCA = 10,DSC$K_CLASS_VS = 11,DSC$K_CLASS_VSA = 12,DSC$K_CLASS_UBS = 13,DSC$K_CLASS_UBA = 14,};
enum MACRO_DSC$K_DTYPE {DSC$K_DTYPE_B = 6,DSC$K_DTYPE_W = 7,DSC$K_DTYPE_L = 8,DSC$K_DTYPE_Q = 9,DSC$K_DTYPE_O = 26,};
enum MACRO_DSC$K_DTYPE_F {DSC$K_DTYPE_F = 10,DSC$K_DTYPE_D = 11,DSC$K_DTYPE_G = 27,DSC$K_DTYPE_H = 28,};
enum MACRO_DSC$K_DTYPE_FC {DSC$K_DTYPE_FC = 12,DSC$K_DTYPE_DC = 13,DSC$K_DTYPE_GC = 29,DSC$K_DTYPE_HC = 30,DSC$K_DTYPE_CIT = 31,};
enum MACRO_DSC$K_DTYPE_NU {DSC$K_DTYPE_NU = 15,DSC$K_DTYPE_NL = 16,DSC$K_DTYPE_NLO = 17,DSC$K_DTYPE_NR = 18,DSC$K_DTYPE_NRO = 19,DSC$K_DTYPE_NZ = 20,DSC$K_DTYPE_P = 21,};
enum MACRO_DSC$K_DTYPE_T {DSC$K_DTYPE_T = 14,DSC$K_DTYPE_VT = 37,};
enum MACRO_DSC$K_DTYPE_V {DSC$K_DTYPE_V = 1,DSC$K_DTYPE_VU = 34,};
enum MACRO_DSC$K_DTYPE_ZI {DSC$K_DTYPE_ZI = 22,DSC$K_DTYPE_ZEM = 23,DSC$K_DTYPE_DSC = 24,DSC$K_DTYPE_BPV = 32,DSC$K_DTYPE_BLV = 33,DSC$K_DTYPE_ADT = 35,};
enum MACRO_DSO {DSO_CONDATA = 1,DSO_DISDATA = 2,DSO_CONACCESS = 3,DSO_ACCEPTMODE = 4,DSO_CONACCEPT = 5,DSO_CONREJECT = 6,DSO_LINKINFO = 7,DSO_STREAM = 8,DSO_SEQPACKET = 9,DSO_NODENAME = 10,};
enum MACRO_DSO_MAX {DSO_MAX = 10,};
enum MACRO_DST {DST_NONE = 0,DST_USA = 1,DST_AUST = 2,DST_WET = 3,DST_MET = 4,DST_EET = 5,DST_CAN = 6,};
enum MACRO_DT {DT_NULL = 0,DT_NEEDED = 1,DT_PLTRELSZ = 2,DT_PLTGOT = 3,DT_HASH = 4,DT_STRTAB = 5,DT_SYMTAB = 6,DT_RELA = 7,DT_RELASZ = 8,DT_RELAENT = 9,DT_STRSZ = 10,DT_SYMENT = 11,DT_INIT = 12,DT_FINI = 13,DT_SONAME = 14,DT_RPATH = 15,DT_SYMBOLIC = 16,DT_REL = 17,DT_RELSZ = 18,DT_RELENT = 19,DT_PLTREL = 20,DT_DEBUG = 21,DT_TEXTREL = 22,DT_JMPREL = 23,DT_LOPROC = 1879048192,DT_RLD_VERSION = 1879048193,DT_TIME_STAMP = 1879048194,DT_ICHECKSUM = 1879048195,DT_IVERSION = 1879048196,DT_FLAGS = 1879048197,DT_BASE_ADDRESS = 1879048198,DT_MSYM = 1879048199,DT_CONFLICT = 1879048200,DT_LIBLIST = 1879048201,DT_LOCAL_GOTNO = 1879048202,DT_CONFLICTNO = 1879048203,DT_LIBLISTNO = 1879048208,DT_SYMTABNO = 1879048209,DT_UNREFEXTNO = 1879048210,DT_GOTSYM = 1879048211,DT_HIPAGENO = 1879048212,DT_RLD_MAP = 1879048214,DT_SO_SUFFIX = 1879048215,DT_HIPROC = 2147483647,};
enum MACRO_DTYPE {DTYPE_SMD = 1,DTYPE_MSCP = 2,DTYPE_DEC = 3,DTYPE_SCSI = 4,DTYPE_ESDI = 5,DTYPE_ST506 = 6,DTYPE_IDE = 9,DTYPE_FLOPPY = 10,DTYPE_SWXCR = 11,};
enum MACRO_DT_GET {DT_GET_INFO = 1,DEV_CONSPROTO_LEN = 40,};
enum MACRO_DUMNAME {DUMNAME = 4,SIZSTR = 16,NAMESZ = 100,};
enum MACRO_DUMPINFO {DUMPINFO_MAX = 16,};
enum MACRO_DUMPREQ {DUMPREQ_BAD = 0x0,DUMPREQ_CHECK = 0x1,DUMPREQ_OPEN = 0x2,DUMPREQ_WRITE = 0x3,DUMPREQ_CLOSE = 0x4,};
enum MACRO_DXFILE {DXFILE = 0,DXDIR = 1,DXLINK = 2,};
enum MACRO_DXK {DXK_circumflex_accent = 0x1000FE5E,};
enum MACRO_DXK_acute {DXK_acute_accent = 0x1000FE27,DXK_grave_accent = 0x1000FE60,DXK_tilde = 0x1000FE7E,};
enum MACRO_DXK_cedilla {DXK_cedilla_accent = 0x1000FE2C,};
enum MACRO_DXK_diaeresis {DXK_diaeresis = 0x1000FE22,};
enum MACRO_D_REMOVABLE {D_REMOVABLE = 0x1,D_ECC = 0x2,D_BADSECT = 0x4,D_RAMDISK = 0x8,D_CHAIN = 0x10,D_DYNAM_GEOM = 0x20,D_INVENT_GEOM = 0x40,};
enum MACRO_D_SSE {D_SSE = 0x1,};
enum MACRO_DestroyAll {DestroyAll = 0,RetainPermanent = 1,RetainTemporary = 2,};
enum MACRO_DeviceMode {DeviceMode = 1,};
enum MACRO_DisableAccess {DisableAccess = 0,};
enum MACRO_DisableScreenInterval {DisableScreenInterval = 0,};
enum MACRO_DisableScreenSaver {DisableScreenSaver = 0,};
enum MACRO_DoRed {DoRed = 1,DoGreen = 2,DoBlue = 4,};
enum MACRO_Dont {Dont_Check = 0,XInput_Initial_Release = 1,XInput_Add_XDeviceBell = 2,XInput_Add_XSetDeviceValuators = 3,XInput_Add_XChangeDeviceControl = 4,};
enum MACRO_DontAllowExposures {DontAllowExposures = 0,AllowExposures = 1,DefaultExposures = 2,};
enum MACRO_DontCareState {DontCareState = 0,ZoomState = 2,InactiveState = 4,XNoMemory = -1,};
enum MACRO_DontPreferBlanking {DontPreferBlanking = 0,PreferBlanking = 1,DefaultBlanking = 2,};
enum MACRO_DvAccelNum {DvAccelNum = 1,DvAccelDenom = 2,DvThreshold = 4,};
enum MACRO_DvInteger {DvInteger = 1,};
enum MACRO_DvKeyClickPercent {DvKeyClickPercent = 1,DvPercent = 2,DvPitch = 4,DvDuration = 8,DvLed = 16,DvLedMode = 32,DvKey = 64,DvAutoRepeatMode = 128,};
enum MACRO_DvString {DvString = 1,};
enum MACRO_E {E_ACC = 0x0,};
enum MACRO_EA {EA_SIZE = 32,MAXDSIZ = 1073741824,};
enum MACRO_EAGAIN {EAGAIN = 35,EINPROGRESS = 36,EALREADY = 37,ENOTSOCK = 38,EDESTADDRREQ = 39,EMSGSIZE = 40,EPROTOTYPE = 41,ENOPROTOOPT = 42,EPROTONOSUPPORT = 43,ESOCKTNOSUPPORT = 44,EOPNOTSUPP = 45,EPFNOSUPPORT = 46,EAFNOSUPPORT = 47,EADDRINUSE = 48,EADDRNOTAVAIL = 49,ENETDOWN = 50,ENETUNREACH = 51,ENETRESET = 52,ECONNABORTED = 53,ECONNRESET = 54,ENOBUFS = 55,EISCONN = 56,ENOTCONN = 57,ESHUTDOWN = 58,ETOOMANYREFS = 59,ETIMEDOUT = 60,ECONNREFUSED = 61,ELOOP = 62,ENAMETOOLONG = 63,EHOSTDOWN = 64,EHOSTUNREACH = 65,ENOTEMPTY = 66,EPROCLIM = 67,EUSERS = 68,EDQUOT = 69,ESTALE = 70,EREMOTE = 71,EBADRPC = 72,ERPCMISMATCH = 73,EPROGUNAVAIL = 74,EPROGMISMATCH = 75,EPROCUNAVAIL = 76,ENOLCK = 77,ENOSYS = 78,EFTYPE = 79,ENOMSG = 80,EIDRM = 81,ENOSR = 82,ETIME = 83,EBADMSG = 84,EPROTO = 85,ENODATA = 86,ENOSTR = 87,ECLONEME = 88,EDIRTY = 89,EDUPPKG = 90,EVERSION = 91,ENOPKG = 92,ENOSYM = 93,ECANCELED = 94,EFAIL = 95,EINPROG = 97,EMTIMERS = 98,ENOTSUP = 99,EAIO = 100,EILSEQ = 116,ESOFT = 123,EMEDIA = 124,ERELOCATED = 125,};
enum MACRO_EAI {EAI_ADDRFAMILY = 1,EAI_AGAIN = 2,EAI_BADFLAGS = 3,EAI_FAIL = 4,EAI_FAMILY = 5,EAI_MEMORY = 6,EAI_NODATA = 7,EAI_NONAME = 8,EAI_SERVICE = 9,EAI_SOCKTYPE = 10,EAI_SYSTEM = 11,};
enum MACRO_ECC {ECC = 0,SSE = 1,BSE = 2,CONT = 3,};
enum MACRO_ECHOE {ECHOE = 0x2,ECHOK = 0x4,ECHO = 0x8,ECHONL = 0x10,ISIG = 0x80,ICANON = 0x100,IEXTEN = 0x400,NOFLSH = 0x80000000,};
enum MACRO_ECHOKE {ECHOKE = 0x1,ECHOPRT = 0x20,ECHOCTL = 0x40,ALTWERASE = 0x200,MDMBUF = 0x100000,FLUSHO = 0x800000,NOHANG = 0x1000000,PENDIN = 0x20000000,NOKERNINFO = 0x40000000,};
enum MACRO_EDITRES {EDITRES_IS_OBJECT = 2,EDITRES_IS_UNREALIZED = 0,};
enum MACRO_EDITRES_FORMAT {EDITRES_FORMAT = 8,EDITRES_SEND_EVENT_FORMAT = 32,};
enum MACRO_EEI {EEI_SUCCESS = 0x0,EEI_NO_STATUS = 0x0,};
enum MACRO_EEI_AM {EEI_AM_PATH_FAILURE = 0x1,EEI_AM_RESERVATION_RESET = 0x2,EEI_AM_RESERVATION_FAILURE = 0x4,EEI_AM_SOFT_DEV_ERROR = 0x8,EEI_AM_HARD_DEV_ERROR = 0x10,EEI_ARCH_FLAGS_MSK = 0xFF000000,};
enum MACRO_EEI_CAM {EEI_CAM_DATA_VALID = 0x1000000,EEI_CAM_FLAGS_MSK = 0xF,};
enum MACRO_EEI_CAM_STATUS {EEI_CAM_STATUS_VALID = 0x1,EEI_SCSI_STATUS_VALID = 0x2,EEI_SCSI_SENSE_VALID = 0x4,};
enum MACRO_EEI_UNCATEGORIZED {EEI_UNCATEGORIZED = 0x100,EEI_INVALID_PARAM = 0x200,EEI_MALLOC_FAILURE = 0x400,EEI_CNTBUSY_FAILURE = 0x600,EEI_GROSSSW_FAILURE = 0x800,EEI_BBR_DONE = 0x2000,EEI_DEVBUSY_FAILURE = 0x2200,EEI_DEVBIO_FAILURE = 0x2400,EEI_DEVSOFT_FAILURE = 0x2600,EEI_TAPE_POS_LOST = 0x2800,EEI_DEVREQ_FAILURE = 0x2A00,EEI_DEVSTATE_FAILURE = 0x3200,EEI_DEVHARD_FAILURE = 0x3400,EEI_ABORTIO_FAILURE = 0x3600,EEI_CNTRLR_FAILURE = 0x4200,EEI_CXALLOC_FAILURE = 0x4400,EEI_RESERVE_PENDING = 0x5200,EEI_DEVPATH_FAILURE = 0x6200,EEI_DEVPATH_RESET = 0x6400,EEI_DEVPATH_CONFLICT = 0x7200,};
enum MACRO_EEI_VERSION {EEI_VERSION = 0x2,EEI_ARCH_DATA_LEN = 0x200,};
enum MACRO_EF {EF_MIPS_NOREORDER = 0x1,EF_MIPS_PIC = 0x2,EF_MIPS_CPIC = 0x4,EF_MIPS_UGEN_ALLOC = 0x8,EF_MIPS_UGEN_RESERVED = 0x10,EF_MIPS_ARCH = 0xF0000000,};
enum MACRO_EF_MIPS {EF_MIPS_ARCH_2 = 0x10000000,EF_MIPS_ARCH_3 = 0x20000000,PT_MIPS_REGINFO = 0x70000000,};
enum MACRO_EF_V0 {EF_V0 = 0,EF_T0 = 1,EF_T1 = 2,EF_T2 = 3,EF_T3 = 4,EF_T4 = 5,EF_T5 = 6,EF_T6 = 7,EF_T7 = 8,EF_S0 = 9,EF_S1 = 10,EF_S2 = 11,EF_S3 = 12,EF_S4 = 13,EF_S5 = 14,EF_S6 = 15,EF_A3 = 16,EF_A4 = 17,EF_A5 = 18,EF_T8 = 19,EF_T9 = 20,EF_T10 = 21,EF_T11 = 22,EF_RA = 23,EF_T12 = 24,EF_AT = 25,EF_SP = 26,EF_PS = 27,EF_PC = 28,EF_GP = 29,EF_A0 = 30,EF_A1 = 31,EF_A2 = 32,EF_SIZE = 264,};
enum MACRO_EI {EI_MAG0 = 0,EI_MAG1 = 1,EI_MAG2 = 2,EI_MAG3 = 3,EI_CLASS = 4,EI_DATA = 5,EI_VERSION = 6,EI_PAD = 7,EI_NIDENT = 16,ELFMAG0 = 127,};
enum MACRO_EIOCFLUSH {EIOCFLUSH = 536888682,EIOCALLOCP = 536888683,EIOCDEALLOCP = 536888684,};
enum MACRO_EIOCINHS {EIOCINHS = 536888680,};
enum MACRO_ELF {ELF_AR_SYMTAB_NAME_LEN = 1,};
enum MACRO_ELF32 {ELF32_FSZ_HALF = 2,ELF32_FSZ_OFF = 8,};
enum MACRO_ELF32_FSZ {ELF32_FSZ_SWORD = 4,};
enum MACRO_ELF32_FSZ_WORD {ELF32_FSZ_WORD = 4,};
enum MACRO_ELFCLASSNONE {ELFCLASSNONE = 0,ELFCLASS32 = 1,ELFCLASS64 = 2,};
enum MACRO_ELFDATANONE {ELFDATANONE = 0,ELFDATA2LSB = 1,ELFDATA2MSB = 2,};
enum MACRO_ELFDATANUM {ELFDATANUM = 3,ET_NUM = 5,};
enum MACRO_ELFMAG1 {ELFMAG1 = 69,ELFMAG2 = 76,};
enum MACRO_ELFMAG3 {ELFMAG3 = 70,};
enum MACRO_ELF_AR {ELF_AR_STRTAB_NAME_LEN = 2,};
enum MACRO_ELF_HANDLE {ELF_HANDLE_MAGIC = 0xC0FFEE,};
enum MACRO_ELF_MAX {ELF_MAX_PHDRS = 128,};
enum MACRO_ELLIPSES {ELLIPSES_TOKEN = 101,};
enum MACRO_EM {EM_NONE = 0,EM_M32 = 1,EM_SPARC = 2,EM_386 = 3,EM_68K = 4,EM_88K = 5,EM_486 = 6,EM_860 = 7,EM_MIPS = 8,EM_NUM = 9,};
enum MACRO_EMPTY {EMPTY = 0,RUN_LVL = 1,BOOT_TIME = 2,OLD_TIME = 3,NEW_TIME = 4,INIT_PROCESS = 5,LOGIN_PROCESS = 6,USER_PROCESS = 7,DEAD_PROCESS = 8,ACCOUNTING = 9,PROCESSOR = 10,};
enum MACRO_EN {EN_MAX_ADDR_LEN = 8,};
enum MACRO_ENDEFWAITING {ENDEFWAITING = 2,ENPACKETS = 256,};
enum MACRO_ENDT {ENDT_3MB = 3,};
enum MACRO_ENDT_BS3MB {ENDT_BS3MB = 1,ENDT_10MB = 2,ENDT_FDDI = 4,ENDT_SLIP = 5,ENDT_PPP = 6,ENDT_LOOPBACK = 7,ENDT_HDLC = 8,ENDT_NULL = 9,ENDT_OTHER = 10,ENDT_IEEE802 = 11,ENDT_TRN = 12,};
enum MACRO_ENDT_MIN {ENDT_MIN = 1,ENDT_MAX = 12,};
enum MACRO_ENETN {ENETN_SIZE = 14,};
enum MACRO_ENF {ENF_NBPA = 10,};
enum MACRO_ENF_EQ {ENF_EQ = 1024,ENF_LT = 2048,ENF_LE = 3072,ENF_GT = 4096,ENF_GE = 5120,ENF_AND = 6144,ENF_OR = 7168,ENF_XOR = 8192,ENF_COR = 9216,ENF_CAND = 10240,ENF_CNOR = 11264,ENF_CNAND = 12288,ENF_NEQ = 13312,};
enum MACRO_ENF_NBPO {ENF_NBPO = 6,ENF_NOP = 0,};
enum MACRO_ENF_NOPUSH {ENF_NOPUSH = 0,ENF_PUSHLIT = 1,ENF_PUSHZERO = 2,ENF_PUSHONE = 3,ENF_PUSHFFFF = 4,ENF_PUSH00FF = 5,ENF_PUSHFF00 = 6,ENF_PUSHWORD = 16,};
enum MACRO_ENHIPRI {ENHIPRI = 2,ENMAXPRI = 255,};
enum MACRO_ENHOLDSIG {ENHOLDSIG = 0x1,ENBATCH = 0x2,ENTSTAMP = 0x4,ENPROMISC = 0x8,ENNONEXCL = 0x10,ENCOPYALL = 0x20,ENBPFHDR = 0x40,ENPRIVMODES = 0xFFFFFF80,};
enum MACRO_ENMAXFILTERS {ENMAXFILTERS = 40,};
enum MACRO_ENMAXINT {ENMAXINT = 0x7FFFFFFF,};
enum MACRO_ENMAXUNITS {ENMAXUNITS = 255,};
enum MACRO_ENMAXWAITING {ENMAXWAITING = 255,};
enum MACRO_ENMINSCAVENGE {ENMINSCAVENGE = 4,ENKERNEL = 32768,};
enum MACRO_ENNOTSUWAITING {ENNOTSUWAITING = 32,};
enum MACRO_ENSF {ENSF_PROMISC = 0x1,ENSF_BROADCAST = 0x2,ENSF_TRAILER = 0x4,ENSF_MULTICAST = 0x8,};
enum MACRO_ENV {ENV_STATUS_OK = 0,ENV_STATUS_FAIL = 1,ENV_TEMP_STATUS_OK = -1,};
enum MACRO_ENV_TEMP {ENV_TEMP_STATUS_FAIL = -2,};
enum MACRO_EPOCH {EPOCH_WDAY = 4,};
enum MACRO_ERR {ERR = -1,};
enum MACRO_ERROR {ERROR = 0x2000,};
enum MACRO_ES {ES_KERNEL_STARTUP = 32,ES_KERNEL_SHUTDOWN = 33,ES_LOGIN_LOCAL = 34,ES_LOGIN_REMOTE = 35,ES_LOGIN_FAILED = 36,ES_LOGOFF = 37,ES_AUTOLOG_TIMER = 38,ES_SESSION = 39,ES_TPLOGIN = 40,ES_TPLOGOFF = 41,ES_AUTOLOG_MULTI = 42,ES_MULTI_FAILED = 43,ES_2P_SUCCESS = 44,ES_2P_FAILED = 45,ES_LOGIN_MAX = 46,ES_PW_CHANGE = 47,ES_PW_CHANGE_FAILED = 48,ES_PW_CHANGE_NOPRIV = 49,ES_PW_MAX = 50,ES_USER_LOCK = 51,ES_TERM_LOCK = 52,ES_SET_USER_LOCK = 53,ES_SET_USER_UNLOCK = 54,ES_SET_TERM_LOCK = 55,ES_SET_TERM_UNLOCK = 56,ES_TIME_LOCK = 57,ES_LOCK_MAX = 58,ES_AUD_ENABLE = 59,ES_AUD_DISABLE = 60,ES_AUD_MODIFY = 61,ES_AUD_REPORT = 62,ES_AUD_ARCHIVE = 63,ES_AUD_DMN_INIT = 64,ES_AUD_DMN_END = 65,ES_AUD_SHUTDOWN = 66,ES_AUD_ERROR = 67,ES_AUD_MAX = 68,ES_DB_INTEGRITY = 69,ES_FS_INTEGRITY = 70,ES_DB_RESOURCE = 71,ES_SEC_FAILURE = 72,ES_DB_MAX = 73,ES_WS_DISPLAY_OPEN = 74,ES_WS_DISPLAY_CLOSED = 75,ES_WS_WINDOW_MANAGE = 76,ES_WS_WINDOW_UNMANAGE = 77,ES_WS_TP_MANAGE = 78,ES_WS_IL_CHANGE = 79,ES_WS_IL_FLOAT = 80,ES_WS_IIL_CHANGE = 81,ES_WS_SL_CHANGE = 82,ES_WS_RUN_LEVEL_CHANGE = 83,ES_WS_CUT_PASTE = 84,ES_WS_CUT_PASTE_ERROR = 85,ES_WS_FILE_IL_CHANGE = 86,ES_WS_FILE_IL_FAILED = 87,ES_WS_FILE_SL_CHANGE = 88,ES_WS_FILE_SL_FAILED = 89,ES_WS_FILE_BOTH_CHANGE = 90,ES_WS_FILE_BOTH_FAILED = 91,ES_WS_ROLE_ASSUMED = 92,ES_WS_ROLE_ENDED = 93,ES_WS_SL_DOWNGRADE = 94,ES_WS_IL_DOWNGRADE = 95,ES_WS_PW_CHANGE = 96,ES_WS_PW_CHANGE_FAILED = 97,ES_WS_PW_NO_AUTH = 98,ES_WS_CHANGE_CLRNCE = 99,ES_WS_ACCESS_DENIED = 100,ES_WS_INSUFF_PRIV = 101,ES_WS_SERVER_RESET = 102,ES_WS_MAX = 103,};
enum MACRO_ESEC {ESEC_MAC_CONFIG_FAILURE = 1,ESEC_WILDCARD_TAG = 2,ESEC_ACL_CONFIG_FAILURE = 3,ESEC_WILD_SUBJ_SL = 4,ESEC_WILD_DIR_SL = 5,ESEC_MAC_NOT_EQUAL = 6,ESEC_MAC_NEED_PRIVILEGE = 7,ESEC_NO_DECISION = 8,ESEC_MAC_SDOM = 9,ESEC_MAC_ODOM = 10,ESEC_MAC_NO_CLEARANCE = 11,ESEC_MAC_DOM_CLEARANCE = 12,ESEC_MAC_NO_SL = 13,ESEC_MAC_UP_CLEARANCE = 14,ESEC_MAC_IL_RELATION = 15,ESEC_MAC_FS_RELATION = 16,ESEC_MAC_NO_WRITE = 17,ESEC_NOT_OWNER = 18,ESEC_IS_MLD = 19,ESEC_DIR_NOT_EMPTY = 20,ESEC_MAC_IL_NOCOMB = 21,ESEC_UNEXT_FS = 22,ESEC_NOT_REG = 23,ESEC_SETATTR_FAIL = 24,ESEC_INVALID_IR = 25,ESEC_NCAV_CONFIG_FAILURE = 26,ESEC_NOT_MLD = 27,ESEC_EXT_FS = 28,};
enum MACRO_ESEC_MAX {ESEC_MAX_ERRNO = 28,};
enum MACRO_ESIZE {ESIZE = 512,};
enum MACRO_ESNMP {ESNMP_LIB_OK = 0,ESNMP_LIB_NO_CONNECTION = -1,};
enum MACRO_ESNMP_ACT {ESNMP_ACT_GET = 1,ESNMP_ACT_GETNEXT = 2,ESNMP_ACT_SET = 3,ESNMP_ACT_COMMIT = 10,ESNMP_ACT_UNDO = 11,ESNMP_ACT_GETBULK = 12,ESNMP_ACT_INFORM = 14,ESNMP_ACT_ARE_YOU_THERE = 15,ESNMP_ACT_CLEANUP = 16,};
enum MACRO_ESNMP_ALLOC {ESNMP_ALLOC_CLUSTER = 0x1,ESNMP_ALLOC_NEW_INDEX = 0x2,ESNMP_ALLOC_ANY_INDEX = 0x4,};
enum MACRO_ESNMP_ALLOC_STATE {ESNMP_ALLOC_STATE_PENDING = 0x1,ESNMP_ALLOC_STATE_SENT = 0x2,ESNMP_ALLOC_STATE_DONE = 0x4,ESNMP_ALLOC_STATE_ALLOCTYPE = 0x8,ESNMP_ALLOC_STATE_ALLOCINUSE = 0x10,ESNMP_ALLOC_STATE_ALLOCAVAIL = 0x20,ESNMP_ALLOC_STATE_ALLOCNOCLU = 0x40,ESNMP_ALLOC_STATE_DEALLOC_REJ = 0x80,ESNMP_ALLOC_STATE_REJ = 0x100,};
enum MACRO_ESNMP_FIRST {ESNMP_FIRST_IN_ROW = 0x80,ESNMP_LAST_IN_ROW = 0x40,};
enum MACRO_ESNMP_LIB {ESNMP_LIB_BAD_REG = -2,};
enum MACRO_ESNMP_LIB_BAD {ESNMP_LIB_BAD_ALLOC = -7,};
enum MACRO_ESNMP_LIB_BAD_DEALLOC {ESNMP_LIB_BAD_DEALLOC = -8,};
enum MACRO_ESNMP_LIB_CLOSE {ESNMP_LIB_CLOSE = -3,};
enum MACRO_ESNMP_LIB_DUPLICATE {ESNMP_LIB_DUPLICATE = -6,};
enum MACRO_ESNMP_LIB_LOST {ESNMP_LIB_LOST_CONNECTION = -4,};
enum MACRO_ESNMP_LIB_NOTOK {ESNMP_LIB_NOTOK = -5,};
enum MACRO_ESNMP_MTHD {ESNMP_MTHD_noError = 0,ESNMP_MTHD_genErr = 5,ESNMP_MTHD_noAccess = 6,ESNMP_MTHD_wrongType = 7,ESNMP_MTHD_wrongLength = 8,ESNMP_MTHD_wrongEncoding = 9,ESNMP_MTHD_wrongValue = 10,ESNMP_MTHD_noCreation = 11,ESNMP_MTHD_inconsistentValue = 12,ESNMP_MTHD_resourceUnavailable = 13,ESNMP_MTHD_commitFailed = 14,ESNMP_MTHD_undoFailed = 15,ESNMP_MTHD_notWritable = 17,ESNMP_MTHD_inconsistentName = 18,ESNMP_MTHD_noSuchInstance = 80,ESNMP_MTHD_noSuchObject = 81,};
enum MACRO_ESNMP_REG {ESNMP_REG_OPT_CLUSTER = 0x1,};
enum MACRO_ESNMP_REG_STATE {ESNMP_REG_STATE_PENDING = 0x1,ESNMP_REG_STATE_SENT = 0x2,ESNMP_REG_STATE_DONE = 0x4,ESNMP_REG_STATE_REGDUP = 0x8,ESNMP_REG_STATE_REGNOCLU = 0x10,ESNMP_REG_STATE_UNREG_REJ = 0x20,ESNMP_REG_STATE_REJ = 0x40,};
enum MACRO_ESNMP_SET {ESNMP_SET_UNKNOWN = 0x0,ESNMP_SET_CREATE = 0x1,ESNMP_SET_MODIFY = 0x2,ESNMP_SET_DELETE = 0x4,};
enum MACRO_ESNMP_TYPE {ESNMP_TYPE_Integer32 = 129,ESNMP_TYPE_OctetString = 2,};
enum MACRO_ESNMP_TYPE_Counter64 {ESNMP_TYPE_Counter64 = 13,ESNMP_TYPE_Opaque = 14,ESNMP_TYPE_noSuchObject = 15,ESNMP_TYPE_noSuchInstance = 16,ESNMP_TYPE_endOfMibView = 17,};
enum MACRO_ESNMP_TYPE_DisplayString {ESNMP_TYPE_DisplayString = 9,ESNMP_TYPE_NsapAddress = 11,ESNMP_TYPE_UInteger32 = 140,};
enum MACRO_ESNMP_TYPE_ObjectId {ESNMP_TYPE_ObjectId = 3,ESNMP_TYPE_NULL = 4,ESNMP_TYPE_IpAddress = 5,ESNMP_TYPE_Counter32 = 134,ESNMP_TYPE_Gauge32 = 135,ESNMP_TYPE_TimeTicks = 136,};
enum MACRO_ESUCCESS {ESUCCESS = 0,EPERM = 1,ENOENT = 2,ESRCH = 3,EINTR = 4,EIO = 5,ENXIO = 6,E2BIG = 7,ENOEXEC = 8,EBADF = 9,ECHILD = 10,EDEADLK = 11,ENOMEM = 12,EACCES = 13,EFAULT = 14,ENOTBLK = 15,EBUSY = 16,EEXIST = 17,EXDEV = 18,ENODEV = 19,ENOTDIR = 20,EISDIR = 21,EINVAL = 22,ENFILE = 23,EMFILE = 24,ENOTTY = 25,ETXTBSY = 26,EFBIG = 27,ENOSPC = 28,ESPIPE = 29,EROFS = 30,EMLINK = 31,EPIPE = 32,EDOM = 33,ERANGE = 34,EWOULDBLOCK = 35,};
enum MACRO_ES_MAX {ES_MAX_CODE = 103,};
enum MACRO_ET {ET_NONE = 0,ET_REL = 1,ET_EXEC = 2,ET_DYN = 3,ET_CORE = 4,ET_LOPROC = 65280,ET_HIPROC = 65535,};
enum MACRO_ETHERMIN {ETHERMIN = 46,ETHER_BANDWIDTH_10MB = 10000000,ETHER_BANDWIDTH_100MB = 100000000,};
enum MACRO_ETHERMTU {ETHERMTU = 1500,};
enum MACRO_ETHERSTATPROC {ETHERSTATPROC_GETDATA = 1,ETHERSTATPROC_ON = 2,ETHERSTATPROC_OFF = 3,ETHERSTATPROC_GETSRCDATA = 4,ETHERSTATPROC_GETDSTDATA = 5,ETHERSTATPROC_SELECTSRC = 6,ETHERSTATPROC_SELECTDST = 7,ETHERSTATPROC_SELECTPROTO = 8,ETHERSTATPROC_SELECTLNTH = 9,ETHERSTATPROG = 100010,};
enum MACRO_ETHERSTATVERS {ETHERSTATVERS = 1,};
enum MACRO_ETHERTYPE {ETHERTYPE_PUP = 0x200,ETHERTYPE_IP = 0x800,ETHERTYPE_ARP = 0x806,ETHERTYPE_LAT = 0x6004,};
enum MACRO_ETHERTYPE_DECnet {ETHERTYPE_DECnet = 0x6003,};
enum MACRO_ETHERTYPE_MOPDL {ETHERTYPE_MOPDL = 0x6001,ETHERTYPE_LBACK = 0x9000,};
enum MACRO_ETHERTYPE_MOPRC {ETHERTYPE_MOPRC = 0x6002,};
enum MACRO_ETHERTYPE_NS {ETHERTYPE_NS = 0x600,};
enum MACRO_ETHERTYPE_TRAIL {ETHERTYPE_TRAIL = 0x1000,ETHERTYPE_NTRAILER = 0x10,};
enum MACRO_ET_NOEVENT {ET_NOEVENT = 0,ET_BOOT_DOWN = 1,ET_LOGIN = 2,ET_PROCESS = 3,ET_OBJECT_AVAIL = 4,ET_OBJECT_MAP = 5,ET_OBJECT_MOD = 6,ET_OBJECT_UNAV = 7,ET_OBJECT_CREAT = 8,ET_OBJECT_DEL = 9,ET_DAC_CHANGE = 10,ET_ACCESS_DENIAL = 11,ET_SYS_ADMIN = 12,ET_INSUFF_PRIV = 13,ET_RES_DENIAL = 14,ET_IPC = 15,ET_PROCESS_MOD = 16,ET_AUDIT = 17,ET_SUBSYSTEM = 18,ET_PRIVILEGE = 19,ET_AUTHORIZATION = 20,ET_SEC_LEVEL = 21,ET_WINDOW_SYSTEM = 22,ET_WINDOW_SUBJECT = 23,ET_WINDOW_OBJECT = 24,ET_WINDOW_DATAMOVE = 25,};
enum MACRO_EUC {EUC_WSET = 0x20004A81,EUC_WGET = 0x20004A82,EUC_IXLON = 0x20004A83,EUC_IXLOFF = 0x20004A84,EUC_OXLON = 0x20004A85,EUC_OXLOFF = 0x20004A86,EUC_MSAVE = 0x20004A87,EUC_MREST = 0x20004A88,};
enum MACRO_EUNDEF {EUNDEF = 0,ENOTFOUND = 1,EACCESS = 2,ENOSPACE = 3,EBADOP = 4,EBADID = 5,EEXISTS = 6,ENOUSER = 7,};
enum MACRO_EV {EV_NONE = 0,EV_CURRENT = 1,ELF32_FSZ_ADDR = 8,};
enum MACRO_EV3 {EV3_CPU = 1,EV4_CPU = 2,LCA4_CPU = 4,EV5_CPU = 5,EV45_CPU = 6,EV56_CPU = 7,EV6_CPU = 8,PCA56_CPU = 9,PCA57_CPU = 10,EV67_CPU = 11,EV68CB_CPU = 12,EV68AL_CPU = 13,EV68CX_CPU = 14,};
enum MACRO_EVM {EVM_INT8_MIN = -128,EVM_INT8_MAX = 127,};
enum MACRO_EVM_INT16 {EVM_INT16_MIN = -32768,EVM_INT16_MAX = 32767,};
enum MACRO_EVM_INT32 {EVM_INT32_MIN = -2147483648,EVM_INT32_MAX = 2147483647,EVM_INT64_MIN = 0,};
enum MACRO_EVM_INT64 {EVM_INT64_MAX = -1,};
enum MACRO_EVM_UINT64 {EVM_UINT64_MAX = -1,};
enum MACRO_EVM_UINT8 {EVM_UINT8_MAX = 255,EVM_UINT16_MAX = 65535,EVM_UINT32_MAX = -1,};
enum MACRO_EV_NUM {EV_NUM = 2,PT_NUM = 7,SHT_NUM = 12,};
enum MACRO_EX {EX_OK = 0,EX__BASE = 64,};
enum MACRO_EXARG {EXARG_PREPEND = 0x1,EXARG_APPEND = 0x2,EXARG_MOD = 0x4,EXARG_ARGS = 0x10,EXARG_ENV = 0x20,EXARG_UFILE = 0x40,EXARG_LOADER = 0x80,EXARG_SHELL = 0x100,EXARG_SHARGS = 0x200,EXARG_AUXADD = 0x1000,EXARG_AUXDEL = 0x2000,EXARG_AUXMOD = 0x4000,};
enum MACRO_EXARG_ALIGN {EXARG_ALIGN = 1,EXARG_NO_ALIGN = 0,};
enum MACRO_EXC {EXC_HANDLING = 1,};
enum MACRO_EXCEPTION {EXCEPTION_UNWIND = 102,};
enum MACRO_EXCEPTION_CONTINUE {EXCEPTION_CONTINUE_EXCEPTION = -1,EXCEPTION_CONTINUE_SEARCH = 0,};
enum MACRO_EXCEPTION_EXECUTE {EXCEPTION_EXECUTE_HANDLER = 1,};
enum MACRO_EXC_ALPHA {EXC_ALPHA_SOFT_STK = 0x10003,EXC_ALPHA_SOFT_SEGV = 0x10004,EXC_ALPHA_INST_TRAP = 0x10005,};
enum MACRO_EXC_ALPHA_BPT {EXC_ALPHA_BPT = 1,EXC_ALPHA_TRACE = 2,};
enum MACRO_EXC_BAD {EXC_BAD_ACCESS = 1,EXC_BAD_INSTRUCTION = 2,EXC_ARITHMETIC = 3,EXC_EMULATION = 4,EXC_SOFTWARE = 5,EXC_BREAKPOINT = 6,EXC_AST = 7,};
enum MACRO_EXC_FALSE {EXC_FALSE = 0,EXCEPTION_NONCONTINUABLE = 1,EXCEPTION_UNWINDING = 2,EXCEPTION_EXIT_UNWIND = 4,EXCEPTION_STACK_INVALID = 8,EXCEPTION_NESTED_CALL = 16,EXCEPTION_TARGET_UNWIND = 32,EXCEPTION_COLLIDED_UNWIND = 64,EXCEPTION_NOSIGMASK = 128,};
enum MACRO_EXC_INTERNAL {EXC_INTERNAL = 268304384,EXC_FACILITY_END = 268304385,EXC_ALL = 268304386,EXC_SIGNAL = 268304387,EXC_ADA_USER = 268304388,EXC_PL1_USER = 268304389,EXC_CXX_USER = 268304390,EXC_CXX_EXIT = 268304391,EXC_CXX_OTHER = 268304392,EXC_C_USER = 268304393,EXC_DECTHREADS_USER = 268304394,EXC_JAVA_USER = 268304395,};
enum MACRO_EXC_STATUS {EXC_STATUS_UNWIND = 268304384,EXC_STATUS_NONCONTINUABLE_EXCEPTION = 268304385,EXC_STATUS_INVALID_DISPOSITION = 268304386,EXC_SIGNAL_EXPECTED = 268304387,EXC_RUNTIME_FUNCTION_NOT_FOUND = 268304388,EXC_INFINITE_LOOP_UNWIND = 268304389,EXC_INVALID_DISPATCHER_CONTEXT = 268304390,EXC_LOCK_ERROR = 268304391,EXC_INVALID_EXCEPTION_RECORD = 268304392,EXC_UNSUPPORTED = 268304393,EXC_STACK_OVERFLOW = 268304394,EXC_OUT_OF_MEMORY = 268304395,EXC_INVALID_ARGUMENT = 268304396,EXC_LONGJMP_UNWIND = 268304397,EXC_OTS_UNWIND = 268304398,};
enum MACRO_EXEC {EXEC_NEEDLDR = -1,};
enum MACRO_EXEC_FREEHDL {EXEC_FREEHDL = -3,};
enum MACRO_EXEC_RECOG {EXEC_RECOG = -2,};
enum MACRO_EXEC_VERSION {EXEC_VERSION = 1,};
enum MACRO_EXEC_WAIT {EXEC_WAIT = 0x1,};
enum MACRO_EXIT {EXIT_FAILURE = 1,EXIT_SUCCESS = 0,};
enum MACRO_EXPANDED {EXPANDED_BASIC1_TYPE = 12,EXPANDED_BASIC2_TYPE = 16,VOID_TOKEN = 118,};
enum MACRO_EXPANDED_BASIC3 {EXPANDED_BASIC3_SIZE = 3,};
enum MACRO_EXPORTFS {EXPORTFS_CREATE = 0x1,EXPORTFS_REMOVE = 0x2,EXPORTFS_READ = 0x3,EXPORTFS_CHECK = 0x4,EXMAXADDRS = 0x100,};
enum MACRO_EXPORTMAPPROC {EXPORTMAPPROC_READMAP = 1,};
enum MACRO_EXPORTMAPPROG {EXPORTMAPPROG = 200023,};
enum MACRO_EXPORTMAPVERS {EXPORTMAPVERS = 1,};
enum MACRO_EXTA {EXTA = 19200,EXTB = 38400,};
enum MACRO_EX_USAGE {EX_USAGE = 64,EX_DATAERR = 65,EX_NOINPUT = 66,EX_NOUSER = 67,EX_NOHOST = 68,EX_UNAVAILABLE = 69,EX_SOFTWARE = 70,EX_OSERR = 71,EX_OSFILE = 72,EX_CANTCREAT = 73,EX_IOERR = 74,EX_TEMPFAIL = 75,EX_PROTOCOL = 76,EX_NOPERM = 77,EX_CONFIG = 78,EX_DB = 79,};
enum MACRO_EnableAccess {EnableAccess = 1,};
enum MACRO_EvenOddRule {EvenOddRule = 0,WindingRule = 1,};
enum MACRO_EvmCallbackArgNULL {EvmCallbackArgNULL = 0,};
enum MACRO_EvmCallbackNULL {EvmCallbackNULL = 0,};
enum MACRO_EvmConnectionNULL {EvmConnectionNULL = 0,};
enum MACRO_EvmEXIT {EvmEXIT_OK = 0,EvmEXIT_USAGE = 1,EvmEXIT_ARGS = 2,EvmEXIT_ENV = 3,EvmEXIT_CONFIG = 4,EvmEXIT_OPEN_ERR = 5,EvmEXIT_IO_ERR = 6,EvmEXIT_TIMEOUT = 7,EvmEXIT_CONNECTION = 8,EvmEXIT_POST = 9,EvmEXIT_SUBSCRIBE = 10,EvmEXIT_SERVICE = 11,EvmEXIT_CHANNEL_ERR = 12,EvmEXIT_FILTER = 13,EvmEXIT_MEMORY = 14,EvmEXIT_ACCESS = 15,EvmEXIT_UNKNOWN_HOST = 16,EvmEXIT_ERROR = 99,};
enum MACRO_EvmEventNULL {EvmEventNULL = 0,};
enum MACRO_EvmFilterNULL {EvmFilterNULL = 0,};
enum MACRO_EvmI18N {EvmI18N_MSG_ID_NONE = 0,EvmI18N_SET_DEFAULT = 1,EvmIpAddress_UNDEFINED = -1,};
enum MACRO_EvmItemListNULL {EvmItemListNULL = 0,};
enum MACRO_EvmItemMaskALL {EvmItemMaskALL = -1,};
enum MACRO_EvmPRIO {EvmPRIO_EMERGENCY = 700,};
enum MACRO_EvmPRIO_ALERT {EvmPRIO_ALERT = 600,};
enum MACRO_EvmPRIO_CRITICAL {EvmPRIO_CRITICAL = 500,};
enum MACRO_EvmPRIO_ERROR {EvmPRIO_ERROR = 400,};
enum MACRO_EvmPRIO_INFORMATION {EvmPRIO_INFORMATION = 100,EvmPRIO_DEBUG = 0,};
enum MACRO_EvmPRIO_MAX {EvmPRIO_MAX = 700,};
enum MACRO_EvmPRIO_NOTICE {EvmPRIO_NOTICE = 200,};
enum MACRO_EvmPRIO_WARNING {EvmPRIO_WARNING = 300,};
enum MACRO_EvmTransportNULL {EvmTransportNULL = 0,};
enum MACRO_EvmVarListNULL {EvmVarListNULL = 0,};
enum MACRO_F {F_RDLCK = 1,F_WRLCK = 2,F_UNLCK = 8,};
enum MACRO_F1 {F1 = 0x101,F2 = 0x102,F3 = 0x103,F4 = 0x104,F5 = 0x105,F6 = 0x106,F7 = 0x107,F8 = 0x108,F9 = 0x109,F10 = 0x10A,LK_F11 = 0x1B,LK_F12 = 0x8,LK_F13 = 0xA,F14 = 0x10B,HELP = 0x10C,F17 = 0x10E,F18 = 0x10F,F19 = 0x110,F20 = 0x111,INS = 0x113,REMOVE = 0x114,PGUP = 0x116,PGDWN = 0x117,SELECT = 0x115,PREV = 0x116,NEXT = 0x117,KP_PF1 = 0x118,KP_PF2 = 0x119,KP_PF3 = 0x11A,KP_PF4 = 0x11B,LEFT = 0x11C,RIGHT = 0x11D,DOWN = 0x11E,KP_UP = 0x11F,KP_0 = 0x120,KP_PERIOD = 0x121,KP_ENTER = 0x122,KP_1 = 0x123,KP_2 = 0x124,KP_3 = 0x125,KP_4 = 0x126,KP_5 = 0x127,KP_6 = 0x128,KP_COMMA = 0x129,KP_7 = 0x12A,KP_8 = 0x12B,KP_9 = 0x12C,KP_MINUS = 0x12D,DELE = 0x7F,F11 = 0x130,F12 = 0x131,HOME = 0x132,MIDDLE = 0x133,PRTSC = 0x134,PAUSE = 0x135,HOME_NPAD = 0x332,UP_NPAD = 0x31F,PGUP_NPAD = 0x316,LEFT_NPAD = 0x31C,MIDDLE_NPAD = 0x333,RIGHT_NPAD = 0x31D,END_NPAD = 0x315,DOWN_NPAD = 0x31E,PGDWN_NPAD = 0x317,INS_NPAD = 0x313,DELE_NPAD = 0x27F,};
enum MACRO_FAILURE {FAILURE = 0,};
enum MACRO_FALSE {FALSE = 0,P_MYID = -1,};
enum MACRO_FAPPEND {FAPPEND = 8,FASYNC = 64,FCREAT = 512,FTRUNC = 1024,FSYNC = 16384,};
enum MACRO_FBOMAGIC {FBOMAGIC = 0x170,RBOMAGIC = 0x172,};
enum MACRO_FCACHE {FCACHE = 0,FDIRECTIO = 1,F_PURGESTART = 20,F_PURGEFINISH = 26,};
enum MACRO_FCNTLCANT {FCNTLCANT = 435,};
enum MACRO_FD {FD_MAX_NOFILE = 4096,};
enum MACRO_FDDIFC {FDDIFC_C = 0x80,FDDIFC_L = 0x40,FDDIFC_F = 0x30,FDDIFC_Z = 0xF,};
enum MACRO_FDDIFC_IMP {FDDIFC_IMP_ASYNC = 0x60,FDDIFC_IMP_SYNC = 0xE0,};
enum MACRO_FDDIFC_LLC {FDDIFC_LLC_ASYNC = 0x50,FDDIFC_LLC_SYNC = 0xD0,};
enum MACRO_FDDIFC_LLC_PRI0 {FDDIFC_LLC_PRI0 = 0x0,FDDIFC_LLC_PRI1 = 0x1,FDDIFC_LLC_PRI2 = 0x2,FDDIFC_LLC_PRI3 = 0x3,FDDIFC_LLC_PRI4 = 0x4,FDDIFC_LLC_PRI5 = 0x5,FDDIFC_LLC_PRI6 = 0x6,FDDIFC_LLC_PRI7 = 0x7,FDDIMTU = 0x1100,FDDIMEDIAMTU = 0x117E,FDDIMAX = 0x118F,};
enum MACRO_FDDIFC_SMT {FDDIFC_SMT_INFO = 0x41,FDDIFC_SMT_NSA = 0x4F,FDDIFC_MAC_BEACON = 0xC2,FDDIFC_MAC_CLAIM = 0xC3,};
enum MACRO_FDDIFC_SMT_0 {FDDIFC_SMT = 0x40,FDDIFC_MAC = 0xC0,};
enum MACRO_FDDILLCMIM {FDDILLCMIM = 20,FDDISMTMIM = 37,};
enum MACRO_FDDIMACMIM {FDDIMACMIM = 17,FDDI_BANDWIDTH_100MB = 100000000,};
enum MACRO_FDDIPH0 {FDDIPH0 = 0x20,FDDIPH1 = 0x38,};
enum MACRO_FDDIPH2 {FDDIPH2 = 0x0,FDDIFC_VOID = 0x40,FDDIFC_NRT = 0x80,FDDIFC_RT = 0xC0,};
enum MACRO_FDFS {FDFS_MAJOR = 12,};
enum MACRO_FDFS_DIRBLKSZ {FDFS_DIRBLKSZ = 1024,};
enum MACRO_FDSYNC {FDSYNC = 524288,FRSYNC = 1048576,};
enum MACRO_FDX {FDX_ENB = 1,FDX_DIS = 2,};
enum MACRO_FD_CLOEXEC {FD_CLOEXEC = 1,F_DUPFD = 0,};
enum MACRO_FD_SETSIZE {FD_SETSIZE = 4096,};
enum MACRO_FEXCL {FEXCL = 2048,};
enum MACRO_FF0 {FF0 = 0x0,FF1 = 0x4000,BSDLY = 0x8000,};
enum MACRO_FFM {FFM_FD = 0x1,FFM_CLONE = 0x2,};
enum MACRO_FHSIZE3 {FHSIZE3 = 64,};
enum MACRO_FILEHANDLE {FILEHANDLE_VERS = 1,};
enum MACRO_FILESET {FILESET_NAME_SZ = 32,};
enum MACRO_FIOCLEX {FIOCLEX = 536897025,FIONCLEX = 536897026,};
enum MACRO_FIRST {FIRST = 0,LAST = 266,};
enum MACRO_FIXSO {FIXSO_TOOLVER = 0,};
enum MACRO_FL {FL_STATMASK = 0xFF,};
enum MACRO_FLDUSED {FLDUSED = 21,IMGFLG = 1234567,};
enum MACRO_FLOAT {FLOAT_TOKEN = 102,};
enum MACRO_FLT {FLT_DIG = 6,};
enum MACRO_FLTFPE {FLTFPE = 16,};
enum MACRO_FLTILL {FLTILL = 68,};
enum MACRO_FLTIOVF {FLTIOVF = 16,FLTBOUNDS = 32,FLTACCESS = 33,FLTPAGE = 34,};
enum MACRO_FLTIZDIV {FLTIZDIV = 66,FLTOPDEC = 68,};
enum MACRO_FLTPRIV {FLTPRIV = 68,};
enum MACRO_FLTSET {FLTSET_SZ = 2,SYSSET_SZ = 9,PR_CMD_MASK = 255,};
enum MACRO_FLTSTACK {FLTSTACK = 32,FLTALIGN = 48,FLTBPT = 64,};
enum MACRO_FLTTRACE {FLTTRACE = 64,FLTBUGCK = 65,FLTGENT = 66,};
enum MACRO_FLT_MAX {FLT_MAX_EXP = 128,};
enum MACRO_FLT_MAX_10 {FLT_MAX_10_EXP = 38,DBL_MANT_DIG = 53,};
enum MACRO_FLT_MIN {FLT_MIN_EXP = -125,};
enum MACRO_FLT_MIN_10 {FLT_MIN_10_EXP = -37,};
enum MACRO_FLT_ROUNDS {FLT_ROUNDS = 1,FLT_RADIX = 2,FLT_MANT_DIG = 24,};
enum MACRO_FLUSHR {FLUSHR = 0x1,FLUSHW = 0x2,FLUSHRW = 0x3,FLUSHBAND = 0x40,};
enum MACRO_FMNAMESZ {FMNAMESZ = 16,};
enum MACRO_FMT16BIT {FMT16BIT = 2,};
enum MACRO_FN {FN_HALTED = 0x8000,FN_START = 0x4000,FN_CONT = 0x2000,FN_STEP = 0x1000,FN_RESET = 0x800,FN_EXAM = 0x400,FN_DEPOS = 0x200,FN_BREAK = 0x100,FN_MAINC = 0x40,};
enum MACRO_FNDELAY {FNDELAY = 32768,};
enum MACRO_FNM {FNM_PATHNAME = 1,FNM_PERIOD = 2,FNM_QUOTE = 4,FNM_NOESCAPE = 8,};
enum MACRO_FNM_NOMATCH {FNM_NOMATCH = 1,FNM_ESLASH = 2,FNM_EPERIOD = 3,};
enum MACRO_FNONBLOCK {FNONBLOCK = 4,FDEFER = 32,FOPEN = -1,};
enum MACRO_FN_DPAINC {FN_DPAINC = 0x80,FN_TMAINC = 0xC0,};
enum MACRO_FN_Q1 {FN_Q1 = 0x0,FN_Q2 = 0x10,FN_Q3 = 0x20,FN_Q4 = 0x30,};
enum MACRO_FOPEN {FOPEN_MAX = 64,FILENAME_MAX = 255,BUFSIZ = 8192,};
enum MACRO_FOR {FOR_FPE_FLAGS = 1,FOR_K_FPE_CNT_UNDERFLOW = 0,};
enum MACRO_FORM {FORM_N = 1,FORM_T = 2,FORM_C = 3,};
enum MACRO_FOR_K {FOR_K_FPE_CNT_OVERFLOW = 1,FOR_K_FPE_CNT_DIVIDE0 = 2,FOR_K_FPE_CNT_INVALID = 3,};
enum MACRO_FOR_K_FPE {FOR_K_FPE_CNT_ARRAY_MAX = 3,};
enum MACRO_FP {FP_RND_RZ = 0,FP_RND_RN = 1,FP_RND_RP = 2,FP_RND_RM = 3,};
enum MACRO_FPE {FPE_INTDIV = 1,FPE_INTOVF = 2,FPE_FLTDIV = 3,FPE_FLTOVF = 4,FPE_FLTUND = 5,FPE_FLTRES = 6,FPE_FLTINV = 7,FPE_FLTSUB = 8,};
enum MACRO_FPE_INTOVF {FPE_INTOVF_TRAP = 0x1,FPE_INTDIV_TRAP = 0x2,FPE_FLTOVF_TRAP = 0x3,FPE_FLTDIV_TRAP = 0x4,FPE_FLTUND_TRAP = 0x5,FPE_DECOVF_TRAP = 0x6,FPE_SUBRNG_TRAP = 0x7,FPE_FLTOVF_FAULT = 0x8,FPE_FLTDIV_FAULT = 0x9,FPE_FLTUND_FAULT = 0xA,FPE_UNIMP_FAULT = 0xB,FPE_INVALID_FAULT = 0xC,FPE_INEXACT_FAULT = 0xD,FPE_HPARITH_TRAP = 0xE,FPE_INTOVF_FAULT = 0xF,FPE_ILLEGAL_SHADOW_TRAP = 0x10,FPE_GENTRAP = 0x11,};
enum MACRO_FPE_M {FPE_M_TRAP_UND = 1,FPE_M_TRAP_OVF = 2,FPE_M_TRAP_DIV0 = 4,FPE_M_TRAP_INV = 8,FPE_M_RESERVED_00 = 16,FPE_M_RESERVED_01 = 32,FPE_M_RESERVED_02 = 64,FPE_M_RESERVED_03 = 128,FPE_M_MSG_OVF = 256,FPE_M_MSG_UND = 512,FPE_M_MSG_DIV0 = 1024,FPE_M_MSG_INV = 2048,FPE_M_RESERVED_04 = 4096,FPE_M_RESERVED_05 = 8192,FPE_M_RESERVED_06 = 16384,FPE_M_RESERVED_07 = 32768,FPE_M_ABRUPT_UND = 65536,FPE_M_ABRUPT_OVF = 131072,FPE_M_ABRUPT_DIV0 = 262144,FPE_M_ABRUPT_INV = 524288,FPE_M_ABRUPT_DMZ = 1048576,FPE_M_RESERVED_09 = 2097152,FPE_M_RESERVED_10 = 4194304,FPE_M_RESERVED_11 = 8388608,FPE_M_RESERVED_12 = 16777216,FPE_M_RESERVED_13 = 33554432,FPE_M_RESERVED_14 = 67108864,FPE_M_RESERVED_15 = 134217728,FPE_M_RESERVED_16 = 268435456,FPE_M_RESERVED_17 = 536870912,FPE_M_RESERVED_18 = 1073741824,FPE_M_RESERVED_19 = -2147483648,};
enum MACRO_FPSFHIGH {FPSFHIGH = 0x0,FPSFLOW = 0x2,};
enum MACRO_FPSLOW {FPSLOW = 0x0,FPSHIGH = 0x4E,};
enum MACRO_FPSNREG {FPSNREG = 80,};
enum MACRO_FPSWC {FPSWC = 0x40,FPSHAD = 0x42,FPSCSR = 0x44,FPSAPAD = 0x46,FPSSWTCH = 0x48,FPSFN = 0x4A,FPSLITE = 0x4C,FPSRSET = 0x4E,};
enum MACRO_FP_PLUS {FP_PLUS_NORM = 4,FP_MINUS_NORM = 5,FP_PLUS_ZERO = 8,FP_MINUS_ZERO = 9,};
enum MACRO_FP_PLUS_INF {FP_PLUS_INF = 2,FP_MINUS_INF = 3,FP_PLUS_DENORM = 6,FP_MINUS_DENORM = 7,};
enum MACRO_FP_SNAN {FP_SNAN = 0,FP_QNAN = 1,FP_POS_INF = 2,FP_NEG_INF = 3,FP_POS_NORM = 4,FP_NEG_NORM = 5,FP_POS_DENORM = 6,FP_NEG_DENORM = 7,FP_POS_ZERO = 8,FP_NEG_ZERO = 9,};
enum MACRO_FRACTION {FRACTION = 0,TR_USRS = 16,};
enum MACRO_FREAD {FREAD = 0x1,FWRITE = 0x2,FWRITE_DATA = 0x4,FWRITE_METADATA = 0x8,FMARK = 0x10,FSHLOCK = 0x80,FEXLOCK = 0x100,FFCNTL = 0x18C04C,FMASK = 0x18C04F,};
enum MACRO_FS {FS_VOLUME = 0,FS_FINDEX = 1,FS_CLRI = 2,FS_BITS = 3,FS_OINODE = 4,FS_ONAME = 5,FS_VOLEND = 6,FS_END = 7,FS_DINODE = 8,FS_NAME = 9,FS_DS = 10,FXLEN = 80,};
enum MACRO_FS2 {FS_PROTOCOL = 2,FS_PROTOCOL_MINOR = 0,};
enum MACRO_FSBadRequest {FSBadRequest = 0,FSBadFormat = 1,FSBadFont = 2,FSBadRange = 3,FSBadEventMask = 4,FSBadAccessContext = 5,FSBadIDChoice = 6,FSBadName = 7,FSBadResolution = 8,FSBadAlloc = 9,FSBadLength = 10,FSBadImplementation = 11,};
enum MACRO_FSF3 {FSF3_LINK = 0x1,FSF3_SYMLINK = 0x2,FSF3_HOMOGENEOUS = 0x8,FSF3_CANSETTIME = 0x10,NFS3_PROGRAM = 0x186A3,};
enum MACRO_FSHIFT {FSHIFT = 11,FSCALE = 2048,};
enum MACRO_FSL {FSL_LSM_CDEV_LEN = 4,};
enum MACRO_FSL_DVNMDSK {FSL_DVNMDSK_CDEV_LEN = 5,};
enum MACRO_FSL_DVNMDSK_BDEV {FSL_DVNMDSK_BDEV_LEN = 4,OV_ERR_OPEN_OVERLAP = -1,};
enum MACRO_FSL_LSM {FSL_LSM_BDEV_LEN = 3,};
enum MACRO_FSTYPSZ {FSTYPSZ = 16,};
enum MACRO_FS_NMLN {FS_NMLN = 6,};
enum MACRO_FS_Noop {FS_Noop = 0,FS_ListExtensions = 1,FS_QueryExtension = 2,FS_ListCatalogues = 3,FS_SetCatalogues = 4,FS_GetCatalogues = 5,FS_SetEventMask = 6,FS_GetEventMask = 7,FS_CreateAC = 8,FS_FreeAC = 9,FS_SetAuthorization = 10,FS_SetResolution = 11,FS_GetResolution = 12,FS_ListFonts = 13,FS_ListFontsWithXInfo = 14,FS_OpenBitmapFont = 15,FS_QueryXInfo = 16,FS_QueryXExtents8 = 17,FS_QueryXExtents16 = 18,FS_QueryXBitmaps8 = 19,FS_QueryXBitmaps16 = 20,FS_CloseFont = 21,};
enum MACRO_FS_Reply {FS_Reply = 0,FS_Error = 1,FS_Event = 2,};
enum MACRO_FS_UNUSED {FS_UNUSED = 0,FS_SWAP = 1,FS_V6 = 2,FS_V7 = 3,FS_SYSV = 4,FS_V71K = 5,FS_V8 = 6,FS_BSDFFS = 7,FS_ADVFS = 16,FS_LSMpubl = 17,FS_LSMpriv = 18,FS_LSMsimp = 19,FS_LSMnopriv = 20,FS_DB = 21,FS_RAW = 22,FS_DRD = 23,FS_CNX = 24,FS_CDFS = 25,};
enum MACRO_FTLACT {FTLACT = 0x3F,};
enum MACRO_FTLCLN {FTLCLN = 0x4000,};
enum MACRO_FTLEXIT {FTLEXIT = 0x1,};
enum MACRO_FTLFUNC {FTLFUNC = 0x2000,};
enum MACRO_FTLJMP {FTLJMP = 0x2,};
enum MACRO_FTLRET {FTLRET = 0,};
enum MACRO_FTW {FTW_F = 0,FTW_D = 1,FTW_DNR = 2,FTW_NS = 3,FTW_SL = 4,};
enum MACRO_FTW_DP {FTW_DP = 5,};
enum MACRO_FTW_PHYS {FTW_PHYS = 0x1,FTW_MOUNT = 0x2,FTW_DEPTH = 0x4,FTW_CHDIR = 0x8,};
enum MACRO_F_80186 {F_80186 = 0x1000,F_80286 = 0x2000,};
enum MACRO_F_BM32MAU {F_BM32MAU = 0x4000,F_BM32B = 0x2000,F_BM32RST = 0x1000,};
enum MACRO_F_CDIR {F_CDIR = 0x1,F_RDIR = 0x2,F_PDIR = 0x4,F_OPEN = 0x8,F_TTY = 0x10,F_TRACE = 0x20,F_TEXT = 0x40,F_MMAP = 0x80,};
enum MACRO_F_FILE {F_FILE_ONLY = 0x1,F_CONTAINED = 0x2,F_NOLINK = 0x4,};
enum MACRO_F_GETFD {F_GETFD = 1,F_SETFD = 2,F_GETFL = 3,F_SETFL = 4,F_GETLK = 7,F_SETLK = 8,F_SETLKW = 9,};
enum MACRO_F_GETOWN {F_GETOWN = 5,F_SETOWN = 6,};
enum MACRO_F_LOMAP {F_LOMAP = 64,F_SHARE_MASK = 12288,};
enum MACRO_F_MIPS {F_MIPS_SHARE_MASK = 12288,};
enum MACRO_F_MIPS_NO {F_MIPS_NO_SHARED = 4096,F_MIPS_SHARABLE = 8192,F_MIPS_CALL_SHARED = 12288,F_MIPS_NO_REORG = 16384,F_MIPS_NO_REMOVE = 32768,};
enum MACRO_F_NO {F_NO_SHARED = 16,F_NO_CALL_SHARED = 32,IAPX16 = 324,IAPX16TV = 325,IAPX20 = 326,IAPX20TV = 327,};
enum MACRO_F_NODF {F_NODF = 0x400,F_64INT = 0x800,F_BM32ID = 0xE000,};
enum MACRO_F_NON {F_NON_SHARED = 0x1000,F_SHARABLE = 0x2000,F_CALL_SHARED = 0x3000,F_NO_REORG = 0x4000,F_NO_REMOVE = 0x8000,};
enum MACRO_F_OK {F_OK = 0x0,X_OK = 0x1,W_OK = 0x2,R_OK = 0x4,};
enum MACRO_F_RELFLG {F_RELFLG = 0x1,F_EXEC = 0x2,F_LNNO = 0x4,F_LSYMS = 0x8,F_MINMAL = 0x10,F_UPDATE = 0x20,F_SWABD = 0x40,F_AR16WR = 0x80,F_AR32WR = 0x100,F_AR32W = 0x200,F_PATCH = 0x400,};
enum MACRO_F_RGETLK {F_RGETLK = 10,F_RSETLK = 11,F_CNVT = 12,F_RSETLKW = 13,};
enum MACRO_F_ULOCK {F_ULOCK = 0,F_LOCK = 1,F_TLOCK = 2,F_TEST = 3,_SC_ATEXIT_MAX = 10,_SC_PAGE_SIZE = 11,_SC_PAGESIZE = 43,};
enum MACRO_F_UNLKSYS {F_UNLKSYS = 4,F_PURGEFS = 14,F_PURGENFS = 15,F_GETTIMES = 16,F_SETTIMES = 17,F_RWREFS = 18,F_ADVFS_OP = 19,};
enum MACRO_FamilyInternet {FamilyInternet = 0,FamilyDECnet = 1,FamilyChaos = 2,};
enum MACRO_FamilyKrb5Principal {FamilyKrb5Principal = 253,};
enum MACRO_FamilyLocal {FamilyLocal = 256,FamilyWild = 65535,};
enum MACRO_FamilyLocalHost {FamilyLocalHost = 252,};
enum MACRO_FamilyNetname {FamilyNetname = 254,};
enum MACRO_FillSolid {FillSolid = 0,FillTiled = 1,FillStippled = 2,FillOpaqueStippled = 3,};
enum MACRO_FollowKeyboard {FollowKeyboard = 3,};
enum MACRO_FontInfoAllCharsExist {FontInfoAllCharsExist = 1,FontInfoInkInside = 2,FontInfoHorizontalOverlap = 4,};
enum MACRO_FontLeftToRight {FontLeftToRight = 0,FontRightToLeft = 1,FontChange = 255,};
enum MACRO_ForgetGravity {ForgetGravity = 0,NorthWestGravity = 1,NorthGravity = 2,NorthEastGravity = 3,WestGravity = 4,CenterGravity = 5,EastGravity = 6,SouthWestGravity = 7,SouthGravity = 8,SouthEastGravity = 9,StaticGravity = 10,};
enum MACRO_G {G_ENT = 0,G_GID = 1,G_NAM = 2,G_SET = 3,G_END = 4,};
enum MACRO_GCFunction {GCFunction = 1,GCPlaneMask = 2,GCForeground = 4,GCBackground = 8,GCLineWidth = 16,GCLineStyle = 32,GCCapStyle = 64,GCJoinStyle = 128,GCFillStyle = 256,GCFillRule = 512,GCTile = 1024,GCStipple = 2048,GCTileStipXOrigin = 4096,GCTileStipYOrigin = 8192,GCFont = 16384,GCSubwindowMode = 32768,GCGraphicsExposures = 65536,GCClipXOrigin = 131072,GCClipYOrigin = 262144,GCClipMask = 524288,GCDashOffset = 1048576,GCDashList = 2097152,GCArcMode = 4194304,};
enum MACRO_GCLastBit {GCLastBit = 22,};
enum MACRO_GENERAL {GENERAL_INFO = 1,GUARANTEED_SERV = 2,PREDICTIVE_SERV = 3,CONTROLLED_DELAY_SERV = 4,CONTROLLED_LOAD_SERV = 5,INTSERV_VERS_MASK = 240,};
enum MACRO_GET {GET_SYS_AMASK = 0,SET_SYS_AMASK = 1,GET_TRUSTED_AMASK = 2,SET_TRUSTED_AMASK = 3,GET_PROC_AMASK = 4,SET_PROC_AMASK = 5,GET_PROC_ACNTL = 6,SET_PROC_ACNTL = 7,GET_AUDSWITCH = 8,SET_AUDSWITCH = 9,GETPAID = 10,SETPAID = 11,GET_AUDSTYLE = 12,SET_AUDSTYLE = 13,GET_SITEMASK = 14,SET_SITEMASK = 15,GET_OBJAUDBIT = 16,SET_OBJAUDBIT = 17,UPDEVENTS = 18,FLUSH_AUD_BUF = 19,GET_HABITAT_EVENT = 20,SET_HABITAT_EVENT = 21,GET_NSITEVENTS = 22,GET_AUDSIZE = 23,GET_SUBJ_AMASK = 24,GET_SUBJ_ACNTL = 25,GET_MACH_AMASK = 26,SET_MACH_AMASK = 27,GET_MACHIPC_AMASK = 28,SET_MACHIPC_AMASK = 29,GET_DATALEN = 30,GET_SLRANGE = 39,SET_SLRANGE = 40,};
enum MACRO_GETFSIND {GETFSIND = 1,GETFSTYP = 2,GETNFSTYP = 3,};
enum MACRO_GETNCNT {GETNCNT = 3,GETPID = 4,GETVAL = 5,GETALL = 6,GETZCNT = 7,SETVAL = 8,SETALL = 9,PSEMN = 28,};
enum MACRO_GETRHANDLE {GETRHANDLE = 1,};
enum MACRO_GIDHSZ {GIDHSZ = 128,};
enum MACRO_GLEVEL {GLEVEL_0 = 2,GLEVEL_1 = 1,GLEVEL_2 = 0,};
enum MACRO_GLEVEL_3 {GLEVEL_3 = 3,magicSym = 6546,};
enum MACRO_GLOB {GLOB_APPEND = 0x1,GLOB_DOOFFS = 0x2,GLOB_ERR = 0x4,GLOB_MARK = 0x8,GLOB_NOCHECK = 0x10,GLOB_NOSORT = 0x20,GLOB_QUOTE = 0x40,GLOB_NOESCAPE = 0x80,GLOB_ABORTED = 0x1000,GLOB_NOSPACE = 0x2000,GLOB_NOMATCH = 0x4000,GLOB_NOSYS = 0xFFFFFFFF,};
enum MACRO_GP {GP_PAD = 16,GP_DISP = 32752,GP_SIZE = 65519,};
enum MACRO_GPR2 {GPR_BASE = 0,FPR_BASE = 32,SPR_PS = 65,SPR_FPCR = 66,NPTRC_REGS = 67,};
enum MACRO_GPROF {GPROF_TOOLVER = 0,};
enum MACRO_GSI {GSI_PROG_ENV = 1,GSI_MAX_UPROCS = 2,GSI_TTYP = 3,GSI_BOOTDEV = 5,GSI_UACSYS = 6,GSI_UACPARNT = 7,GSI_UACPROC = 8,GSI_LMF = 9,GSI_MMAPALIGN = 12,GSI_BOOTTYPE = 13,GSI_VPTOTAL = 14,GSI_SCS = 15,GSI_IECSYS = 16,GSI_IECPARNT = 17,GSI_IECPROC = 18,GSI_PHYSMEM = 19,GSI_DNAUID = 20,GSI_ROOTDEV = 31,GSI_DUMPDEV = 32,GSI_SWAPDEV = 33,GSI_COMPAT_MOD = 35,GSI_STATIC_DEF = 41,GSI_CLK_TCK = 42,GSI_IPRSETUP = 48,GSI_DUMPINFO = 49,GSI_CURRENT_CPU = 54,GSI_CPUS_IN_BOX = 55,GSI_SIGQ_MAX = 58,GSI_VERSIONSTRING = 62,GSI_DBASE = 63,GSI_IPDEFTTL = 64,GSI_TIMER_MAX = 67,GSI_FD_NEWMAX = 68,GSI_PHYSMEM_START = 69,GSI_PARTIAL_DUMPPAGES = 70,GSI_LOGIN_NAME_MAX = 71,GSI_SYSTEM_ID = 72,GSI_CONSMEM_SIZE = 73,GSI_TNC = 999,};
enum MACRO_GXclear {GXclear = 0x0,GXand = 0x1,GXandReverse = 0x2,GXcopy = 0x3,GXandInverted = 0x4,GXnoop = 0x5,GXxor = 0x6,GXor = 0x7,GXnor = 0x8,GXequiv = 0x9,GXinvert = 0xA,GXorReverse = 0xB,GXcopyInverted = 0xC,GXorInverted = 0xD,GXnand = 0xE,GXset = 0xF,};
enum MACRO_GrabModeSync {GrabModeSync = 0,GrabModeAsync = 1,};
enum MACRO_GrabSuccess {GrabSuccess = 0,AlreadyGrabbed = 1,GrabInvalidTime = 2,GrabNotViewable = 3,GrabFrozen = 4,};
enum MACRO_HABITAT {HABITAT_SHIFT = 24,HABITAT_MASK = -16777216,};
enum MACRO_HABITAT_LOW {HABITAT_LOW = 0xFF,};
enum MACRO_HANDLE {HANDLE_BYTE = 0x1,HANDLE_WORD = 0x2,HANDLE_LONGWORD = 0x4,HANDLE_QUADWORD = 0x8,HANDLE_TRIBYTE = 0x10,HANDLE_DENSE_SPACE = 0x80000000,};
enum MACRO_HANDLE_SPARSE {HANDLE_SPARSE_SPACE = 0x40000000,HANDLE_BUSPHYS_ADDR = 0x20000000,HANDLE_LINEAR_SPACE = 0x10000000,};
enum MACRO_HAS {HAS_PC_SAMPLES = 1,HAS_INV_COUNTS = 2,HAS_BB_COUNTS = 4,HAS_INT_SAMPLES = 8,};
enum MACRO_HASHBITS {HASHBITS = 3,};
enum MACRO_HASHFRACTION {HASHFRACTION = 1,};
enum MACRO_HASHMASK {HASHMASK = 15,LMF_PRODUCT = 25,};
enum MACRO_HASHVERSION {HASHVERSION = 2,};
enum MACRO_HEADER {HEADER_SIZE = 6,};
enum MACRO_HEDLEN {HEDLEN = 1,CMPLEN = 3,CMPENM = 256,};
enum MACRO_HEXKEYBYTES {HEXKEYBYTES = 48,KEYSIZE = 192,};
enum MACRO_HFIXEDSZ {HFIXEDSZ = 12,};
enum MACRO_HI {HI_DENS = 0x2,AUX_DENS = 0x6,};
enum MACRO_HIPROF {HIPROF_TOOLVER = 0,};
enum MACRO_HISTFRACTION {HISTFRACTION = 2,};
enum MACRO_HOST {HOST_INFO_MAX = 1024,};
enum MACRO_HOSTNAMESZ {HOSTNAMESZ = 256,};
enum MACRO_HOST_BASIC {HOST_BASIC_INFO = 1,HOST_PROCESSOR_SLOTS = 2,HOST_SCHED_INFO = 3,HOST_PAGING_INFO = 4,};
enum MACRO_HOST_NOT {HOST_NOT_FOUND = 1,TRY_AGAIN = 2,NO_RECOVERY = 3,NO_DATA = 4,};
enum MACRO_HOURS {HOURS_PER_DAY = 24,};
enum MACRO_HOURSPERDAY {HOURSPERDAY = 24,};
enum MACRO_HS {HS_DEBUG_ON = 0x1,UCMD_DEBUG_ON = 0x2,HS_SRV_TIMEOUT_DEFAULT = 0x78,CFG_PT_DELETED = 0xFFFFFFFF,};
enum MACRO_HWCONFIG {HWCONFIG_CONTROLLER_ALL = 0x1,HWCONFIG_CONTROLLER_INSTANCE = 0x2,HWCONFIG_BUS = 0x4,};
enum MACRO_HWCONFIG_BUS {HWCONFIG_BUS_ALL = 0x4,HWCONFIG_BUS_INSTANCE = 0x80,};
enum MACRO_HWCONFIG_DEVICE {HWCONFIG_DEVICE_ALL = 0x10,HWCONFIG_DEVICE_INSTANCE = 0x20,HWCONFIG_UNLOAD_MODULE = 0x40,};
enum MACRO_HWCONFIG_LOAD {HWCONFIG_LOAD_MODULE = 0x8,};
enum MACRO_HWCONFIG_TYPE {HWCONFIG_TYPE_MASK = 0xFFF,HWCONFIG_CONFIGURE_REQUEST = 0x10000000,HWCONFIG_UNCONFIGURE_REQUEST = 0x20000000,HWCONFIG_UNLOAD_REQUEST = 0x40000000,};
enum MACRO_HWEF {HWEF_SIZE = 48,EF_SSIZE = 216,};
enum MACRO_HWSET {HWSET_VERSION_1 = 1,};
enum MACRO_HWSET_CURRENT {HWSET_CURRENT_VERSION = 1,};
enum MACRO_HostInsert {HostInsert = 0,HostDelete = 1,};
enum MACRO_I {I_NREAD = 536892161,I_PUSH = 536892162,I_POP = 536892163,I_LOOK = 536892164,I_FLUSH = 536892165,I_SRDOPT = 536892166,I_GRDOPT = 536892167,I_STR = 536892168,I_SETSIG = 536892169,I_GETSIG = 536892170,I_FIND = 536892171,I_LINK = 536892172,I_UNLINK = 536892173,I_ISASTREAM = 536892174,I_PEEK = 536892175,I_FDINSERT = 536892176,I_SENDFD = 536892177,I_RECVFD = 536892178,I_FLUSHBAND = 536892179,I_SWROPT = 536892180,I_GWROPT = 536892181,I_LIST = 536892182,I_ATMARK = 536892183,I_CKBAND = 536892184,I_GETBAND = 536892185,I_CANPUT = 536892186,I_SETCLTIME = 536892187,I_GETCLTIME = 536892188,I_PLINK = 536892189,I_PUNLINK = 536892190,I_GETMSG = 536892200,I_PUTMSG = 536892201,I_GETPMSG = 536892202,I_PUTPMSG = 536892203,I_PIPE = 536892204,I_FIFO = 536892205,};
enum MACRO_I18nCvtInitCallback {I18nCvtInitCallback = 0,I18nCvtEndCallback = 1,I18nCvtSegmentCallback = 2,I18nCvtLineCallback = 3,I18nCvtMaxCallback = 4,};
enum MACRO_I18nCvtStatusOK {I18nCvtStatusOK = 1,I18nCvtStatusDataLoss = 2,I18nCvtStatusFail = 3,};
enum MACRO_IAC {TELNET_IAC = 255,TELNET_DONT = 254,TELNET_DO = 253,TELNET_WONT = 252,TELNET_WILL = 251,TELNET_SB = 250,TELNET_GA = 249,TELNET_EL = 248,TELNET_EC = 247,TELNET_AYT = 246,TELNET_AO = 245,TELNET_IP = 244,TELNET_BREAK = 243,TELNET_DM = 242,TELNET_NOP = 241,TELNET_SE = 240,TELNET_EOR = 239,TELNET_ABORT = 238,TELNET_SUSP = 237,TELNET_xEOF = 236,TELNET_SYNCH = 242,};
enum MACRO_IBEAM {IBEAM_WIDTH = 3,CARET_WIDTH = 9,};
enum MACRO_IC {IC_FASTLINK = 0x1,IC_PROPLIST_FRAG = 0x2,IC_PROPLIST_BLOCK = 0x4,IC_PROPLIST = 0x6,IC_XUID = 0x20,IC_XGID = 0x40,};
enum MACRO_ICE {ICE_Error = 0,ICE_ByteOrder = 1,ICE_ConnectionSetup = 2,ICE_AuthRequired = 3,ICE_AuthReply = 4,ICE_AuthNextPhase = 5,ICE_ConnectionReply = 6,ICE_ProtocolSetup = 7,ICE_ProtocolReply = 8,ICE_Ping = 9,ICE_PingReply = 10,ICE_WantToClose = 11,ICE_NoClose = 12,};
enum MACRO_ICMP {ICMP_MINLEN = 8,};
enum MACRO_ICMPSTAT {ICMPSTAT_MAXTYPE = 18,};
enum MACRO_ICMP_ECHOREPLY {ICMP_ECHOREPLY = 0,ICMP_UNREACH = 3,};
enum MACRO_ICMP_MASKLEN {ICMP_MASKLEN = 12,};
enum MACRO_ICMP_MAXTYPE {ICMP_MAXTYPE = 18,};
enum MACRO_ICMP_PARAMPROB {ICMP_PARAMPROB_OPTABSENT = 1,};
enum MACRO_ICMP_PARAMPROB_MAXCODE {ICMP_PARAMPROB_MAXCODE = 1,ICMP_TSTAMP = 13,ICMP_TSTAMPREPLY = 14,ICMP_IREQ = 15,ICMP_IREQREPLY = 16,ICMP_MASKREQ = 17,ICMP_MASKREPLY = 18,};
enum MACRO_ICMP_REDIRECT {ICMP_REDIRECT_NET = 0,ICMP_REDIRECT_HOST = 1,ICMP_REDIRECT_TOSNET = 2,ICMP_REDIRECT_TOSHOST = 3,};
enum MACRO_ICMP_REDIRECT_MAXCODE {ICMP_REDIRECT_MAXCODE = 3,ICMP_ECHO = 8,ICMP_ROUTERADVERT = 9,ICMP_ROUTERSOLICIT = 10,ICMP_TIMXCEED = 11,};
enum MACRO_ICMP_SOURCEQUENCH {ICMP_SOURCEQUENCH = 4,ICMP_REDIRECT = 5,};
enum MACRO_ICMP_TIMXCEED {ICMP_TIMXCEED_INTRANS = 0,ICMP_TIMXCEED_REASS = 1,};
enum MACRO_ICMP_TIMXCEED_MAXCODE {ICMP_TIMXCEED_MAXCODE = 1,ICMP_PARAMPROB = 12,};
enum MACRO_ICMP_UNREACH {ICMP_UNREACH_NET = 0,ICMP_UNREACH_HOST = 1,ICMP_UNREACH_PROTOCOL = 2,ICMP_UNREACH_PORT = 3,ICMP_UNREACH_NEEDFRAG = 4,ICMP_UNREACH_SRCFAIL = 5,ICMP_UNREACH_NET_UNKNOWN = 6,ICMP_UNREACH_HOST_UNKNOWN = 7,ICMP_UNREACH_ISOLATED = 8,ICMP_UNREACH_NET_PROHIB = 9,ICMP_UNREACH_HOST_PROHIB = 10,ICMP_UNREACH_TOSNET = 11,ICMP_UNREACH_TOSHOST = 12,ICMP_UNREACH_ADM_PROHIB = 13,ICMP_UNREACH_PREC_VIOL = 14,ICMP_UNREACH_PREC_CUT = 15,};
enum MACRO_ICMP_UNREACH_MAXCODE {ICMP_UNREACH_MAXCODE = 15,};
enum MACRO_ICOUNTS {ICOUNTS_MAGIC = 0xF0E0012,};
enum MACRO_ID {ID_EFFECTIVE = 0x1,ID_REAL = 0x2,ID_SAVED = 0x4,ID_LOGIN = 0x8,ID_ACCT = 0x10,};
enum MACRO_IEC {IEC_NOFAT = 0x8000000,IEC_VERBOSE = 0x10000000,IEC_NOPRINT = 0x20000000,IEC_NOEMUL = 0x40000000,IEC_RSVD = 0x80000000,};
enum MACRO_IERRORS {IERRORS = 5,};
enum MACRO_IEXEC {IEXEC = 0x40,TP_BSIZE = 0x400,};
enum MACRO_IF {IF_NAMESIZE = 16,};
enum MACRO_IFAF {IFAF_PERMIT = 0x1,IFAF_DENY = 0x2,IFAF_DENYLOG = 0x4,IFAF_MAXBUFSIZE = 0x8000,};
enum MACRO_IFAF_MAXENTRIES {IFAF_MAXENTRIES = 0x331,};
enum MACRO_IFAH {IFAH_BROADCAST = 0x1,IFAH_ALIAS = 0x2,};
enum MACRO_IFE {IFE_NOTLAST = 0x0,IFE_LASTBLOCK = 0x1,};
enum MACRO_IFE_SUCCESS {IFE_SUCCESS = 0x0,IFE_RETRY = 0x1,IFE_FAIL = 0x2,};
enum MACRO_IFF {IFF_UP = 0x1,IFF_BROADCAST = 0x2,IFF_DEBUG = 0x4,IFF_LOOPBACK = 0x8,IFF_POINTOPOINT = 0x10,IFF_NOTRAILERS = 0x20,IFF_RUNNING = 0x40,IFF_NOARP = 0x80,IFF_PROMISC = 0x100,IFF_ALLMULTI = 0x200,IFF_MULTICAST = 0x400,IFF_SIMPLEX = 0x800,IFF_OACTIVE = 0x1000,IFF_PFCOPYALL = 0x2000,IFF_UIOMOVE = 0x10000,IFF_PKTOK = 0x20000,IFF_SOCKBUF = 0x40000,IFF_VAR_MTU = 0x80000,IFF_NOCHECKSUM = 0x100000,IFF_MULTINET = 0x200000,IFF_QUORUMLOSS = 0x400000,IFF_VMIFNET = 0x800000,IFF_CLUIF = 0x1000000,};
enum MACRO_IFF_D1 {IFF_D1 = 0x8000,IFF_D2 = 0x4000,};
enum MACRO_IFF_SNAP {IFF_SNAP = 32768,IFF_CANTCHANGE = 17767506,};
enum MACRO_IFG {IFG_ANY = 0x0,IFG_UNKNOWN = 0x1,IFG_INFRARED = 0x2,IFG_RED = 0x3,IFG_ORANGE = 0x4,IFG_YELLOW = 0x5,IFG_GREEN = 0x6,IFG_BLUE = 0x7,IFG_INDIGO = 0x8,IFG_VIOLET = 0x9,IFG_ULTRAVIOLET = 0xA,};
enum MACRO_IFG_MAX {IFG_MAX = 0xA,};
enum MACRO_IFIFO {IFIFO = 0x1000,IFCHR = 0x2000,IFDIR = 0x4000,IFBLK = 0x6000,IFREG = 0x8000,IFLNK = 0xA000,IFSOCK = 0xC000,IFBADSEC = 0xF000,};
enum MACRO_IFLOW {IFLOW = 512,ITANDEM = 1024,IMAXBEL = 8192,};
enum MACRO_IFMT {IFMT = 0xF000,};
enum MACRO_IFNAMSIZ {IFNAMSIZ = 16,};
enum MACRO_IFNET {IFNET_SLOWHZ = 1,};
enum MACRO_IFQ {IFQ_MAXLEN = 1024,};
enum MACRO_IFT {IFT_OTHER = 0x1,IFT_1822 = 0x2,IFT_HDH1822 = 0x3,IFT_X25DDN = 0x4,IFT_X25 = 0x5,IFT_ETHER = 0x6,IFT_ISO88023 = 0x7,IFT_ISO88024 = 0x8,IFT_ISO88025 = 0x9,IFT_ISO88026 = 0xA,IFT_STARLAN = 0xB,IFT_P10 = 0xC,IFT_P80 = 0xD,IFT_HY = 0xE,IFT_FDDI = 0xF,IFT_LAPB = 0x10,IFT_SDLC = 0x11,IFT_T1 = 0x12,IFT_CEPT = 0x13,IFT_ISDNBASIC = 0x14,IFT_ISDNPRIMARY = 0x15,IFT_PTPSERIAL = 0x16,IFT_PPP = 0x17,IFT_LOOP = 0x18,IFT_EON = 0x19,IFT_XETHER = 0x1A,IFT_NSIP = 0x1B,IFT_SLIP = 0x1C,IFT_ULTRA = 0x1D,IFT_DS3 = 0x1E,IFT_SIP = 0x1F,IFT_FRAMERELAY = 0x20,IFT_RS232 = 0x21,IFT_PARALLEL = 0x22,IFT_ARCNET = 0x23,IFT_ARCNET_PLUS = 0x24,IFT_ATM = 0x25,IFT_MIO25 = 0x26,IFT_SONET = 0x27,IFT_X25PLE = 0x28,IFT_ISO88022LLC = 0x29,IFT_LOCALTALK = 0x2A,IFT_SMDSDXI = 0x2B,IFT_FRAMERELAYS = 0x2C,IFT_V35 = 0x2D,IFT_HSSI = 0x2E,IFT_HPPI = 0x2F,IFT_MODEM = 0x30,IFT_AAL5 = 0x31,IFT_SONETPATH = 0x32,IFT_SOBETVI = 0x33,IFT_SMDSICIP = 0x34,IFT_PROPVIRT = 0x35,IFT_PROPMULTI = 0x36,IFT_IEEE80212 = 0x37,IFT_FIBRECHAN = 0x38,IFT_HPPI_I = 0x39,IFT_FRAMEREALYI = 0x3A,IFT_LANE8023 = 0x3B,IFT_LANE8025 = 0x3C,IFT_ATMECIR = 0x3D,IFT_FASTETHER = 0x3E,IFT_ISDNX25 = 0x3F,IFT_V11 = 0x40,IFT_V36 = 0x41,IFT_G70364K = 0x42,IFT_G7022MB = 0x43,IFT_QLLC = 0x44,IFT_WANDD = 0xC8,IFT_RM = 0xC9,IFT_SYNC = 0xCA,};
enum MACRO_IGMP {IGMP_MINLEN = 8,IGMP_HOST_MEMBERSHIP_QUERY = 17,IGMP_HOST_MEMBERSHIP_REPORT = 18,IGMP_DVMRP = 19,IGMP_PIM = 20,IGMP_HOST_NEW_MEMBERSHIP_REPORT = 22,IGMP_HOST_LEAVE_MESSAGE = 23,IGMP_MTRACE_RESP = 30,IGMP_MTRACE = 31,};
enum MACRO_IGMP_IDLE {IGMP_IDLE_MEMBER = 2,IGMP_LAZY_MEMBER = 3,IGMP_SLEEPING_MEMBER = 4,IGMP_AWAKENING_MEMBER = 5,};
enum MACRO_IGMP_MAX {IGMP_MAX_HOST_REPORT_DELAY = 10,};
enum MACRO_IGMP_OLD {IGMP_OLD_ROUTER = 0,IGMP_NEW_ROUTER = 1,IGMP_AGE_THRESHOLD = 540,};
enum MACRO_IGMP_TIMER {IGMP_TIMER_SCALE = 10,IGMP_DELAYING_MEMBER = 1,};
enum MACRO_IGNBRK {IGNBRK = 0x1,BRKINT = 0x2,IGNPAR = 0x4,PARMRK = 0x8,INPCK = 0x10,ISTRIP = 0x20,INLCR = 0x40,IGNCR = 0x80,ICRNL = 0x100,IXON = 0x200,IXOFF = 0x400,IXANY = 0x800,IUCLC = 0x1000,};
enum MACRO_ILL {ILL_ILLOPC = 1,ILL_ILLOPN = 2,ILL_ILLADR = 3,ILL_ILLTRP = 4,ILL_PRVOPC = 5,ILL_PRVREG = 6,ILL_COPROC = 7,ILL_BADSTK = 8,};
enum MACRO_ILL_RESAD {ILL_RESAD_FAULT = 0x0,ILL_PRIVIN_FAULT = 0x1,ILL_RESOP_FAULT = 0x2,ILL_INST_FAULT = 0x3,ILL_MODE_FAULT = 0x4,};
enum MACRO_IMPLVER {IMPLVER_VAR_LEN = 10,};
enum MACRO_IMPLVER_EV4 {IMPLVER_EV4_FAMILY = 0,IMPLVER_EV5_FAMILY = 1,IMPLVER_EV6_FAMILY = 2,};
enum MACRO_IMPLVER_VAL {IMPLVER_VAL_LEN = 9,};
enum MACRO_IMYRES {IMYRES = 78,};
enum MACRO_IN {IN_CLASSA_NET = 0xFF000000,IN_CLASSA_NSHIFT = 0x18,};
enum MACRO_IN6 {IN6_MSB16_SHIFT = 0,IN6_MSB32_SHIFT = 0,IN6_MSW32_SHIFT = 0,};
enum MACRO_IN6_BIT {IN6_BIT_ORDER = 1,IN6_MSB64_SHIFT = 0,IN6_MSW64_SHIFT = 0,IN6_MSL64_SHIFT = 0,};
enum MACRO_IN6_LSB16 {IN6_LSB16_SHIFT = 8,};
enum MACRO_IN6_LSB32 {IN6_LSB32_SHIFT = 24,};
enum MACRO_IN6_LSB64 {IN6_LSB64_SHIFT = 56,};
enum MACRO_IN6_LSL64 {IN6_LSL64_SHIFT = 32,};
enum MACRO_IN6_LSW32 {IN6_LSW32_SHIFT = 16,};
enum MACRO_IN6_LSW64 {IN6_LSW64_SHIFT = 48,};
enum MACRO_IN6_MCSCOPE {IN6_MCSCOPE_NODELOCAL = 0x1,IN6_MCSCOPE_LINKLOCAL = 0x2,IN6_MCSCOPE_SITELOCAL = 0x5,IN6_MCSCOPE_ORGLOCAL = 0x8,IN6_MCSCOPE_GLOBAL = 0xE,};
enum MACRO_INADDR {INADDR_ANY = 0x0,INADDR_BROADCAST = 0xFFFFFFFF,};
enum MACRO_INADDR_LOOPBACK {INADDR_LOOPBACK = 0x7F000001,INADDR_UNSPEC_GROUP = 0xE0000000,INADDR_ALLHOSTS_GROUP = 0xE0000001,INADDR_MAX_LOCAL_GROUP = 0xE00000FF,INADDR_NONE = 0xFFFFFFFF,};
enum MACRO_INBUFFER {INBUFFER_SIZE = 8192,};
enum MACRO_INCLUDE {INCLUDE_VERSION = 26,};
enum MACRO_INET {INET_TCP = 0x6,};
enum MACRO_INET6 {INET6_ADDRSTRLEN = 46,};
enum MACRO_INET_CONFIG {INET_CONFIG_VERSION_1 = 0x1091590,IN_DEFAULT_VALUE = 0xFFFFCFC7,};
enum MACRO_INET_IP {INET_IP = 0x0,T_IP_OPTIONS = 0x1,};
enum MACRO_INET_UDP {INET_UDP = 0x11,};
enum MACRO_INF {INF = 1000000,};
enum MACRO_INFINI {INFINI = -1,};
enum MACRO_INFINITY {INFINITY = 500,};
enum MACRO_INP {INP_RECVOPTS = 0x1,INP_RECVRETOPTS = 0x2,INP_RECVDSTADDR = 0x4,INP_PROXY = 0x20,INP_SRC_STATIC = 0x40,INP_DONTDETACH = 0x80,};
enum MACRO_INPLOOKUP {INPLOOKUP_WILDCARD = 1,INPLOOKUP_SETLOCAL = 2,INPLOOKUP_USECACHE = 4,INPLOOKUP_LOCKHELD = 8,INPLOOKUP_AVAILABLE = 16,};
enum MACRO_INP_CLUA {INP_CLUA_BITS = 1280,INP_AVAILABLE = 4096,INP_TIMOREQ = 8192,};
enum MACRO_INP_CONTROLOPTS {INP_CONTROLOPTS = 39,INP_PORT_LOCKED = 256,INP_PORT_CACHED = 512,INP_PORT_REGISTERED = 1024,INP_PORT_NOUNLOCK = 2048,};
enum MACRO_INT {INT_MAX = 2147483647,INT_MIN = -2147483648,LONG_MAX = -1,};
enum MACRO_INT16SZ {INT16SZ = 2,INADDRSZ = 4,IN6ADDRSZ = 16,INDIR_MASK = 192,};
enum MACRO_INT32SZ {INT32SZ = 4,};
enum MACRO_INT8 {INT8_TOKEN = 51,INT16_TOKEN = 52,INT32_TOKEN = 53,INT64_TOKEN = 54,};
enum MACRO_INTSERV {INTSERV_VERSION0 = 0,};
enum MACRO_INT_TOKEN {INT_TOKEN = 105,LONG_TOKEN = 108,};
enum MACRO_INVALID {INVALID_PROCESSOR_SET_ID = -500,};
enum MACRO_IN_CLASSA {IN_CLASSA_HOST = 0xFFFFFF,};
enum MACRO_IN_CLASSA_MAX {IN_CLASSA_MAX = 128,};
enum MACRO_IN_CLASSB {IN_CLASSB_NET = 0xFFFF0000,IN_CLASSB_NSHIFT = 0x10,};
enum MACRO_IN_CLASSB_HOST {IN_CLASSB_HOST = 0xFFFF,IN_CLASSB_MAX = 0x10000,};
enum MACRO_IN_CLASSC {IN_CLASSC_NET = 0xFFFFFF00,IN_CLASSC_NSHIFT = 0x8,};
enum MACRO_IN_CLASSC_HOST {IN_CLASSC_HOST = 0xFF,};
enum MACRO_IN_CLASSD {IN_CLASSD_NET = 0xF0000000,IN_CLASSD_NSHIFT = 0x1C,};
enum MACRO_IN_CLASSD_HOST {IN_CLASSD_HOST = 0xFFFFFFF,};
enum MACRO_IN_LINE {IN_LINE = 0x1,};
enum MACRO_IN_LOOPBACKNET {IN_LOOPBACKNET = 127,};
enum MACRO_IN_USEVALUE {IN_USEVALUE = 0x1,IN_USEDEFAULTS = 0x2,};
enum MACRO_IO {IO_UNIT = 0x1,IO_APPEND = 0x2,IO_SYNC = 0x4,IO_NODELOCKED = 0x8,IO_NDELAY = 0x10,IO_TRUNC = 0x20,IO_NONBLOCK = 0x80,IO_RSYNC = 0x100,IO_DSYNC = 0x200,IO_NOSTATUPDATE = 0x400,};
enum MACRO_IOC {IOC_S = 64,IOC_D = 128,};
enum MACRO_IOCPARM {IOCPARM_MASK = 0x1FFF,};
enum MACRO_IOCPARM_MAX {IOCPARM_MAX = 8192,IOC_VOID = 536870912,IOC_OUT = 1073741824,IOC_IN = -2147483648,IOC_INOUT = -1073741824,IOC_DIRMASK = -536870912,};
enum MACRO_IOC_READREG {IOC_READREG = 1,IOC_WRITEREG = 2,IOC_EXAM = 3,IOC_DEPOSIT = 4,IOC_PUT = 5,IOC_GET = 6,IOC_PSLOAD = 7,IOC_SPLOAD = 8,IOC_GO = 9,IOC_WD = 10,IOC_WR = 11,IOC_XCONT = 12,IOC_RMAE = 13,IOC_WMAE = 14,IOC_RAPMAE = 15,IOC_WAPMAE = 16,IOC_RMSK = 17,IOC_WMSK = 18,IOF_OUT = 127,};
enum MACRO_IOF {IOF_TWOSP = 0x10,IOF_THREESP = 0x20,};
enum MACRO_IOV {IOV_MAX = 1024,};
enum MACRO_IO_DATAONLY {IO_DATAONLY = 512,IO_DELAYDATA = 64,};
enum MACRO_IO_IMMEDIATE {IO_IMMEDIATE = 0x1,IO_LOAD_UNIT = 0x2,IO_RETENTION = 0x4,IO_POSITION_EOT = 0x8,};
enum MACRO_IP {IP_OPTIONS = 1,IP_HDRINCL = 2,IP_TOS = 3,IP_TTL = 4,IP_RECVOPTS = 5,IP_RECVRETOPTS = 6,IP_RECVDSTADDR = 7,IP_RETOPTS = 8,IP_MULTICAST_IF = 9,IP_MULTICAST_TTL = 10,IP_MULTICAST_LOOP = 11,IP_ADD_MEMBERSHIP = 12,IP_DROP_MEMBERSHIP = 13,IP_MULTICAST_VIF = 14,IP_RSVP_ON = 15,IP_RSVP_OFF = 16,IP_RSVP_VIF_ON = 17,IP_RSVP_VIF_OFF = 18,IP_PROXY = 19,};
enum MACRO_IP2 {IP_VERSION = 65536,};
enum MACRO_IPALLOC {IPALLOC_TIMEOUT = 86400,};
enum MACRO_IPALLOC_VERS {IPALLOC_VERS = 2,IP_ALLOC = 1,};
enum MACRO_IPC {IPC_CREAT = 0x200,IPC_EXCL = 0x400,IPC_NOWAIT = 0x800,};
enum MACRO_IPC_PRIVATE {IPC_PRIVATE = 0,IPC_RMID = 0,};
enum MACRO_IPC_R {IPC_R = 0x100,IPC_W = 0x80,IPC_MSG = 0x1,};
enum MACRO_IPC_SEM {IPC_SEM = 2,IPC_SHM = 3,SEM_UNDO = 4096,};
enum MACRO_IPC_SET {IPC_SET = 1,IPC_STAT_COMPAT = 2,IPC_STAT = 10,IPC_ALLOC = 32768,IPC_RESERVED = 65536,};
enum MACRO_IPFRAGTTL {IPFRAGTTL = 60,};
enum MACRO_IPOPT {IPOPT_CONTROL = 0x0,IPOPT_RESERVED1 = 0x20,IPOPT_DEBMEAS = 0x40,IPOPT_RESERVED2 = 0x60,};
enum MACRO_IPOPT_EOL {IPOPT_EOL = 0,IPOPT_NOP = 1,IPOPT_RR = 7,IPOPT_TS = 68,IPOPT_SECURITY = 130,IPOPT_LSRR = 131,IPOPT_SATID = 136,IPOPT_SSRR = 137,};
enum MACRO_IPOPT_OPTVAL {IPOPT_OPTVAL = 0,IPOPT_OLEN = 1,IPOPT_OFFSET = 2,IPOPT_MINOFF = 4,};
enum MACRO_IPOPT_SECUR {IPOPT_SECUR_UNCLASS = 0x0,IPOPT_SECUR_CONFID = 0xF135,};
enum MACRO_IPOPT_SECUR_EFTO {IPOPT_SECUR_EFTO = 0x789A,IPOPT_SECUR_MMMM = 0xBC4D,};
enum MACRO_IPOPT_SECUR_RESTR {IPOPT_SECUR_RESTR = 0xAF13,IPOPT_SECUR_SECRET = 0xD788,};
enum MACRO_IPOPT_SECUR_TOPSECRET {IPOPT_SECUR_TOPSECRET = 0x6BC5,};
enum MACRO_IPOPT_TS {IPOPT_TS_TSONLY = 0,IPOPT_TS_TSANDADDR = 1,IPOPT_TS_PRESPEC = 3,};
enum MACRO_IPPORT {IPPORT_TIMESERVER = 37,};
enum MACRO_IPPROTO {IPPROTO_IP = 0,IPPROTO_ICMP = 1,IPPROTO_IGMP = 2,IPPROTO_GGP = 3,IPPROTO_IPIP = 4,IPPROTO_TCP = 6,IPPROTO_EGP = 8,IPPROTO_PUP = 12,IPPROTO_UDP = 17,IPPROTO_IDP = 22,IPPROTO_TP = 29,IPPROTO_ESP = 50,IPPROTO_AH = 51,};
enum MACRO_IPPROTO_IPV6 {IPPROTO_IPV6 = 41,IPPROTO_RSVP = 46,IPPROTO_EON = 80,IPPROTO_IFMP = 101,IPPROTO_RAW = 255,IPPROTO_MAX = 256,IPPORT_RESERVED = 1024,IPPORT_USERRESERVED = 5000,};
enum MACRO_IPQ {IPQ_FLAGS_ALIAS = 0x1,IPFRAG_MFF = 0x10,MAX_IPOPTLEN = 0x28,};
enum MACRO_IPR {IPR_DEFAULT = 20,};
enum MACRO_IPTOS {IPTOS_LOWDELAY = 0x10,IPTOS_THROUGHPUT = 0x8,IPTOS_RELIABILITY = 0x4,};
enum MACRO_IPTOS_PREC {IPTOS_PREC_NETCONTROL = 0xE0,};
enum MACRO_IPTOS_PREC_CRITIC {IPTOS_PREC_CRITIC_ECP = 0xA0,};
enum MACRO_IPTOS_PREC_FLASHOVERRIDE {IPTOS_PREC_FLASHOVERRIDE = 0x80,IPTOS_PREC_FLASH = 0x60,};
enum MACRO_IPTOS_PREC_IMMEDIATE {IPTOS_PREC_IMMEDIATE = 0x40,IPTOS_PREC_PRIORITY = 0x20,IPTOS_PREC_ROUTINE = 0x10,};
enum MACRO_IPTOS_PREC_INTERNETCONTROL {IPTOS_PREC_INTERNETCONTROL = 0xC0,};
enum MACRO_IPTTLDEC {IPTTLDEC = 1,IP_MSS = 576,};
enum MACRO_IPV6 {IPV6_UNICAST_HOPS = 104,};
enum MACRO_IPV6_DEFAULT {IPV6_DEFAULT_UNICAST_HOPLIMIT = 64,};
enum MACRO_IPVERSION {IPVERSION = 4,IP_DF = 16384,};
enum MACRO_IP_ABORT {IP_ABORT = -8,};
enum MACRO_IP_ADDR {IP_ADDR_TYPE = 1,BOOTPARAMPROG = 100026,};
enum MACRO_IP_ALIVE {IP_ALIVE = 1,IP_DEAD = 0,};
enum MACRO_IP_BADMODE {IP_BADMODE = -3,};
enum MACRO_IP_BADSIZE {IP_BADSIZE = -6,};
enum MACRO_IP_BADTYPE {IP_BADTYPE = -2,};
enum MACRO_IP_BROADCAST {IP_BROADCAST = 18,};
enum MACRO_IP_CREATOR {IP_CREATOR = 0,IP_ATTACHER = 1,};
enum MACRO_IP_DEFAULT {IP_DEFAULT_MULTICAST_TTL = 1,};
enum MACRO_IP_DEFAULT_MULTICAST {IP_DEFAULT_MULTICAST_LOOP = 1,IP_MAX_MEMBERSHIPS = 20,};
enum MACRO_IP_DONTROUTE {IP_DONTROUTE = 17,T_IP_BROADCAST = 18,};
enum MACRO_IP_EITHER {IP_EITHER = 0,IP_SENDER = 1,IP_RECEIVER = 2,IP_BOTH = 3,};
enum MACRO_IP_FULLDUP {IP_FULLDUP = 0,IP_HALFDUP = 1,};
enum MACRO_IP_MF {IP_MF = 0x2000,IP_MAXPACKET = 0xFFFF,};
enum MACRO_IP_NOPRIVATE {IP_NOPRIVATE = -9,};
enum MACRO_IP_RETRY {IP_RETRY = -7,};
enum MACRO_IP_REUSEADDR {IP_REUSEADDR = 16,T_IP_DONTROUTE = 17,};
enum MACRO_IP_SHMERR {IP_SHMERR = -5,};
enum MACRO_IP_SHUTDOWN {IP_SHUTDOWN = -4,};
enum MACRO_IP_SUCCESS {IP_SUCCESS = 1,IP_BADCHAN = -1,};
enum MACRO_IP_TONAME {IP_TONAME = 2,IP_FREE = 3,};
enum MACRO_IREAD {IREAD = 0x100,};
enum MACRO_IRG {IRG = 1,};
enum MACRO_ISGID {ISGID = 0x400,};
enum MACRO_ISO {ISO_TP = 0x100,};
enum MACRO_ISO_SAP {ISO_SAP = 0x0,MAX_ISO_SAP = 0x5DC,XNS_SAP = 0x600,DOD_SAP = 0x800,ARP_SAP = 0x806,RARP_SAP = 0x8035,};
enum MACRO_ISPH {ISPH_FLG_INV = 0x80,};
enum MACRO_ISPTM {ISPTM = 536900679,UNLKPT = 536900681,ISPTS = 536900682,};
enum MACRO_ISRF {ISRF_INCHDR = 1,};
enum MACRO_ISSH {ISSH_BREAK_BIT = 0x80,};
enum MACRO_ISUID {ISUID = 0x800,};
enum MACRO_ISVTX {ISVTX = 0x200,};
enum MACRO_ITIMER {ITIMER_REAL = 0,ITIMER_VIRTUAL = 1,ITIMER_PROF = 2,TOD_MAX_SECONDS = 100000000,};
enum MACRO_IWRITE {IWRITE = 0x80,};
enum MACRO_I_STR {I_STR_ATTR = 536892220,I_PEEK_ATTR = 536892221,I_FDINSERT_ATTR = 536892222,I_SENDFD_ATTR = 536892223,I_RECVFD_ATTR = 536892224,I_GETMSG_ATTR = 536892225,I_PUTMSG_ATTR = 536892226,I_GETPMSG_ATTR = 536892227,I_PUTPMSG_ATTR = 536892228,};
enum MACRO_I_TILDE {I_TILDE = 536892197,};
enum MACRO_I_TRCLOG {I_TRCLOG = 1,I_ERRLOG = 2,LOGMSGSZ = 128,};
enum MACRO_IceAuthLockSuccess {IceAuthLockSuccess = 0,IceAuthLockError = 1,IceAuthLockTimeout = 2,};
enum MACRO_IceBadMajor {IceBadMajor = 0,IceNoAuth = 1,IceNoVersion = 2,IceSetupFailed = 3,IceAuthRejected = 4,IceAuthFailed = 5,IceProtocolDuplicate = 6,IceMajorOpcodeDuplicate = 7,IceUnknownProtocol = 8,};
enum MACRO_IceCanContinue {IceCanContinue = 0,IceFatalToProtocol = 1,IceFatalToConnection = 2,IceBadMinor = 32768,IceBadState = 32769,IceBadLength = 32770,IceBadValue = 32771,};
enum MACRO_IceLSBfirst {IceLSBfirst = 0,IceMSBfirst = 1,};
enum MACRO_IceProtoMajor {IceProtoMajor = 1,};
enum MACRO_IceProtoMinor {IceProtoMinor = 0,};
enum MACRO_InProximity {InProximity = 0,OutOfProximity = 2,};
enum MACRO_InputClassBits {InputClassBits = 0x3F,};
enum MACRO_InputHint {InputHint = 1,StateHint = 2,IconPixmapHint = 4,IconWindowHint = 8,IconPositionHint = 16,IconMaskHint = 32,WindowGroupHint = 64,AllHints = 127,XUrgencyHint = 256,};
enum MACRO_InputOutput {InputOutput = 1,InputOnly = 2,};
enum MACRO_IsUnmapped {IsUnmapped = 0,IsUnviewable = 1,IsViewable = 2,};
enum MACRO_IsXPointer {IsXPointer = 0,IsXKeyboard = 1,IsXExtensionDevice = 2,};
enum MACRO_JB {JB_S0 = 0,JB_S1 = 1,JB_S2 = 2,JB_S3 = 3,JB_S4 = 4,JB_S5 = 5,JB_S6 = 6,JB_SP = 7,JB_PC = 8,JB_PS = 9,NJBREGS = 10,};
enum MACRO_JoinMiter {JoinMiter = 0,JoinRound = 1,JoinBevel = 2,};
enum MACRO_KB {KB_UNK = 0,KB_LK201 = 1,KB_LK401 = 2,KB_PCXAL = 3,KB_LK443 = 4,KB_LK421 = 5,KB_LK411 = 6,KB_PCXAL_SET2 = 7,};
enum MACRO_KBKeyClickPercent {KBKeyClickPercent = 1,KBBellPercent = 2,KBBellPitch = 4,KBBellDuration = 8,KBLed = 16,KBLedMode = 32,KBKey = 64,KBAutoRepeatMode = 128,};
enum MACRO_KBModeSwitchSuccess {KBModeSwitchSuccess = 0,KBModeSwitchFailure = 1,KBModeSwitchInvalidCmd = 2,KBModeSwitchNoop = 3,};
enum MACRO_KB_STATUS {KB_STATUS_SHIFT = 1,};
enum MACRO_KB_STATUS_ALT {KB_STATUS_ALT_L = 512,KB_STATUS_WAIT = 1024,KB_STATUS_COMPOSE = 2048,};
enum MACRO_KB_STATUS_CNTRL {KB_STATUS_CNTRL_L = 2,KB_STATUS_CAPSLOCK = 4,KB_STATUS_HOLD = 8,KB_STATUS_NUMLOCK = 16,KB_STATUS_INRESET = 32,KB_STATUS_UPDNMODE = 64,KB_STATUS_REPEATING = 128,KB_STATUS_PREFIX = 256,KB_STATUS_ALT = 512,};
enum MACRO_KB_STATUS_COMPOSE {KB_STATUS_COMPOSE_L = 2048,KB_STATUS_SHIFT_R = 4096,KB_STATUS_CNTRL_R = 8192,KB_STATUS_ALT_R = 16384,KB_STATUS_COMPOSE_R = 32768,KB_STATUS_PREFIX1 = 65536,KB_STATUS_PREFIX2 = 131072,};
enum MACRO_KB_STATUS_SHIFT {KB_STATUS_SHIFT_L = 1,KB_STATUS_CNTRL = 2,};
enum MACRO_KB_STATUS_SHIFT_ANY {KB_STATUS_SHIFT_ANY = 4097,KB_STATUS_CNTRL_ANY = 8194,KB_STATUS_ALT_ANY = 16896,KB_STATUS_COMPOSE_ANY = 34816,};
enum MACRO_KDBX {KDBX_TOOLVER = 0,};
enum MACRO_KDEBUG {KDEBUG_DISABLED = 0x0,KDEBUG_ENABLED = 0x1,KDEBUG_BRK = 0x2,KDEBUG_MAGIC = 0xFEEDFACE,};
enum MACRO_KDEBUG_REQ {KDEBUG_REQ_INIT = 1,KDEBUG_REQ_BRKPT = 2,KDEBUG_REQ_MEM = 3,};
enum MACRO_KERN {KERN_SUCCESS = 0,KERN_INVALID_ADDRESS = 1,KERN_PROTECTION_FAILURE = 2,KERN_NO_SPACE = 3,KERN_INVALID_ARGUMENT = 4,KERN_FAILURE = 5,KERN_RESOURCE_SHORTAGE = 6,KERN_NOT_RECEIVER = 7,KERN_NO_ACCESS = 8,KERN_MEMORY_FAILURE = 9,KERN_MEMORY_ERROR = 10,KERN_ALREADY_IN_SET = 11,KERN_NOT_IN_SET = 12,KERN_NAME_EXISTS = 13,KERN_ABORTED = 14,KERN_PAGELOCKED = 15,KERN_SEGHOLE = 16,};
enum MACRO_KERNEL {KERNEL_PARAMETERS = 0,PGSHIFT = 13,NBPG = 8192,};
enum MACRO_KERNEL_MAJOR {KERNEL_MAJOR_VERSION = 1,KERNEL_MINOR_VERSION = 0,};
enum MACRO_KERNEL_STACK {KERNEL_STACK_SIZE = 32768,};
enum MACRO_KERNEL_VERSION {KERNEL_VERSION_MAX = 512,};
enum MACRO_KERN_INTERRUPTED {KERN_INTERRUPTED = 19,KERN_RESTART = 20,KERN_RM_ENTRY_CONTAINS = 250,KERN_RM_BREAK_UP = 251,KERN_RM_UNMAP_OVERLAP = 252,KERN_RM_NOT_SUPPORTED = 253,KERN_RM_INVALID_UNMAP = 254,};
enum MACRO_KERN_STK {KERN_STK_SHRUNK = 16,KERN_LIMIT_EXCEEDED = 17,KERN_MAPENTRIES_LIMIT = 18,KERN_STACK_GROW = 19,KERN_STACK_YELLOW_ZONE = 20,};
enum MACRO_KEY {KEY_CODE_YES = 0xFF,KEY_MIN = 0x101,};
enum MACRO_KEYBYTES {KEYBYTES = 24,};
enum MACRO_KEYCHECKSUMSIZE {KEYCHECKSUMSIZE = 16,};
enum MACRO_KEY_BREAK {KEY_BREAK = 0x101,KEY_DOWN = 0x102,KEY_UP = 0x103,KEY_LEFT = 0x104,KEY_RIGHT = 0x105,KEY_HOME = 0x106,KEY_BACKSPACE = 0x107,KEY_F0 = 0x108,};
enum MACRO_KEY_DL {KEY_DL = 0x148,KEY_IL = 0x149,KEY_DC = 0x14A,KEY_IC = 0x14B,KEY_EIC = 0x14C,KEY_CLEAR = 0x14D,KEY_EOS = 0x14E,KEY_EOL = 0x14F,KEY_SF = 0x150,KEY_SR = 0x151,KEY_NPAGE = 0x152,KEY_PPAGE = 0x153,KEY_STAB = 0x154,KEY_CTAB = 0x155,KEY_CATAB = 0x156,KEY_ENTER = 0x157,KEY_SRESET = 0x158,KEY_RESET = 0x159,KEY_PRINT = 0x15A,KEY_LL = 0x15B,KEY_A1 = 0x15C,KEY_A3 = 0x15D,KEY_B2 = 0x15E,KEY_C1 = 0x15F,KEY_C3 = 0x160,KEY_ACTION = 0x161,KEY_BEG = 0x162,KEY_CANCEL = 0x163,KEY_CLOSE = 0x164,KEY_COMMAND = 0x165,KEY_COPY = 0x166,KEY_CREATE = 0x167,KEY_END = 0x168,KEY_EXIT = 0x169,KEY_FIND = 0x16A,KEY_HELP = 0x16B,KEY_MARK = 0x16C,KEY_MESSAGE = 0x16D,KEY_MOVE = 0x16E,KEY_NEXT = 0x16F,KEY_OPEN = 0x170,KEY_OPTIONS = 0x171,KEY_PREVIOUS = 0x172,KEY_REDO = 0x173,KEY_REFERENCE = 0x174,KEY_REFRESH = 0x175,KEY_REPLACE = 0x176,KEY_RESTART = 0x177,KEY_RESUME = 0x178,KEY_SAVE = 0x179,KEY_SBEG = 0x17A,KEY_SCANCEL = 0x17B,KEY_SCOMMAND = 0x17C,KEY_SCOPY = 0x17D,KEY_SCREATE = 0x17E,KEY_SDC = 0x17F,KEY_SDL = 0x180,KEY_SELECT = 0x181,KEY_SEND = 0x182,KEY_SEOL = 0x183,KEY_SEXIT = 0x184,KEY_SFIND = 0x185,KEY_SHELP = 0x186,KEY_SHOME = 0x187,KEY_SIC = 0x188,KEY_SLEFT = 0x189,KEY_SMESSAGE = 0x18A,KEY_SMOVE = 0x18B,KEY_SNEXT = 0x18C,KEY_SOPTIONS = 0x18D,KEY_SPREVIOUS = 0x18E,KEY_SPRINT = 0x18F,KEY_SREDO = 0x190,KEY_SREPLACE = 0x191,KEY_SRIGHT = 0x192,KEY_SRSUME = 0x193,KEY_SSAVE = 0x194,KEY_SSUSPEND = 0x195,KEY_SUNDO = 0x196,KEY_SUSPEND = 0x197,KEY_UNDO = 0x198,KEY_MOUSE = 0x199,KEY_BTAB = 0x19A,KEY_MAX = 0x1FF,A_STANDOUT = 0x10000,};
enum MACRO_KEY_PROG {KEY_PROG = 100029,};
enum MACRO_KEY_SET {KEY_SET = 1,KEY_ENCRYPT = 2,KEY_DECRYPT = 3,KEY_GEN = 4,KEY_GETCRED = 5,};
enum MACRO_KEY_VERS {KEY_VERS = 1,};
enum MACRO_KINFO {KINFO_ID = 5020,};
enum MACRO_KINFO_GET {KINFO_GET_SYSTEM = 1,KINFO_GET_INTERFACES = 2,KINFO_GET_ICMP = 3,KINFO_GET_TCP = 4,KINFO_GET_IP = 5,KINFO_GET_UDP = 8,KINFO_GET_IF_NAMES = 9,KINFO_GET_ONE_IP_ADDR = 12,KINFO_GET_ONE_TCP_CONN = 13,KINFO_GET_ONE_UDP_LIST = 14,KINFO_GET_ONE_IP_ROUTE = 15,KINFO_GET_ARP = 16,KINFO_GET_ATM_ARP = 17,KINFO_GET_ONE_PROC = 18,};
enum MACRO_KINFO_HI {KINFO_HI_MARK = 2048,KINFO_LO_MARK = 128,};
enum MACRO_KINFO_VERSION {KINFO_VERSION = 1,KINFO_GET_STR_CFG = 100,KINFO_GET_ID = 101,KINFO_GET_STR_STATS = 102,MAX_KBUF = 4096,};
enum MACRO_KLC {KLC_VM_ALLOCATE = 1,KLC_VM_DEALLOCATE = 2,KLC_VM_READ = 3,KLC_VM_WRITE = 4,KLC_VM_PROTECT = 5,KLC_VM_ALLOCATE_WIRED = 6,KLC_CALL_FUNCTION = 100,KLC_SET_STATE = 101,KLC_GET_BOOTLINK_SYMTAB = 102,};
enum MACRO_KLOADSRV {KLOADSRV_TOOLVER = 0,};
enum MACRO_KMEBADREQUEST {KMEBADREQUEST = 2,X_KMEDoKBModeSwitch = 10,};
enum MACRO_KMEMNAMSZ {KMEMNAMSZ = 12,};
enum MACRO_KSM {KSM_CMD_NAME_SIZE = 32,};
enum MACRO_KSM_CLU {KSM_CLU_OP_UNKNOWN = 0,KSM_CLU_OP_SAME = 1,KSM_CLU_OP_DIFFERENT = 2,KSM_CLU_OP_ADD = 3,KSM_CLU_OP_OR = 4,};
enum MACRO_KSM_CURRENT {KSM_CURRENT_VERSION = 1,};
enum MACRO_KSM_FIND {KSM_FIND_NEXT = 1,KSM_FIND_INST = 2,KSM_FIND_PARENT = 3,KSM_FIND_CHILD = 4,KSM_FIND_PEER = 5,KSM_FIND_THIS = 6,};
enum MACRO_KSM_FLAG {KSM_FLAG_SIZING = 0x2,KSM_FLAG_QUERYING = 0x4,};
enum MACRO_KSM_MEM {KSM_MEM_REGISTERED = 0x1,KSM_MEM_REGISTERED_CAT_REL = 0x2,KSM_MEM_REGISTERED_HIER_REL = 0x4,KSM_MEM_REGISTERED_MIB_REL = 0x8,KSM_CAT_NAME_SIZE = 0x20,};
enum MACRO_KSM_OP {KSM_OP_FIND_CATEGORY = 3201,KSM_OP_FIND_HIERARCHY = 3202,KSM_OP_FIND_MIBID = 3203,KSM_OP_MREQ_GETCATTR = 3241,KSM_OP_MREQ_GETDATTR = 3242,KSM_OP_MREQ_GETSATTR = 3243,KSM_OP_MREQ_GETCATTR_ALL = 3244,KSM_OP_MREQ_GETDATTR_ALL = 3245,KSM_OP_MREQ_GETSATTR_ALL = 3246,KSM_OP_MREQ_GETCOMM = 3247,KSM_OP_MREQ_OTHER = 3248,KSM_OP_SREQ_GETCAT_NAMES = 3291,KSM_OP_SREQ_GETINFO = 3292,KSM_OP_NONPRIV_SET_MIN = 3400,KSM_OP_NONPRIV_SET_MAX = 3499,KSM_OP_NONPRIV_MEM_MIN = 3500,KSM_OP_NONPRIV_MEM_MAX = 3599,KSM_OP_PRIV_SYS_MIN = 3600,KSM_OP_PRIV_SYS_MAX = 3799,};
enum MACRO_KSM_OP_PRIV {KSM_OP_PRIV_MREQ_SETCATTR = 3601,KSM_OP_PRIV_MREQ_SETSATTR = 3602,KSM_OP_PRIV_SET_MIN = 3800,KSM_OP_PRIV_SET_MAX = 3899,KSM_OP_PRIV_MEM_MIN = 3900,KSM_OP_PRIV_MEM_MAX = 3999,};
enum MACRO_KSM_SET {KSM_SET_NAME_SIZE = 16,KSM_FLAG_ROOT_VERIFIED = 1,};
enum MACRO_KSM_TYPE {KSM_TYPE_DEFAULT = 0,KSM_TYPE_COUNTER = 1,KSM_TYPE_TIME_STAMP = 2,};
enum MACRO_KSM_VERSION {KSM_VERSION_1 = 1,};
enum MACRO_KSTKPGS {KSTKPGS = 1,UPAGES = 2,KERNELSTACK = -32768,};
enum MACRO_KbdFeedbackClass {KbdFeedbackClass = 0,PtrFeedbackClass = 1,StringFeedbackClass = 2,IntegerFeedbackClass = 3,LedFeedbackClass = 4,BellFeedbackClass = 5,};
enum MACRO_KeepAlive {KeepAlive = 0,CatalogueChangeNotify = 1,FontChangeNotify = 2,FSLASTEvent = 3,};
enum MACRO_KeyClass {KeyClass = 0,ButtonClass = 1,ValuatorClass = 2,FeedbackClass = 3,ProximityClass = 4,FocusClass = 5,OtherClass = 6,};
enum MACRO_KeyPress {KeyPress = 2,KeyRelease = 3,ButtonPress = 4,ButtonRelease = 5,MotionNotify = 6,EnterNotify = 7,LeaveNotify = 8,FocusIn = 9,FocusOut = 10,KeymapNotify = 11,Expose = 12,GraphicsExpose = 13,NoExpose = 14,VisibilityNotify = 15,CreateNotify = 16,DestroyNotify = 17,UnmapNotify = 18,MapNotify = 19,MapRequest = 20,ReparentNotify = 21,ConfigureNotify = 22,ConfigureRequest = 23,GravityNotify = 24,ResizeRequest = 25,CirculateNotify = 26,CirculateRequest = 27,PropertyNotify = 28,SelectionClear = 29,SelectionRequest = 30,SelectionNotify = 31,ColormapNotify = 32,ClientMessage = 33,MappingNotify = 34,LASTEvent = 35,};
enum MACRO_L {L_ctermid = 9,};
enum MACRO_L001000 {L001000 = 0x2000000,CRTKIL = 0x4000000,PASS8 = 0x8000000,CTLECH = 0x10000000,};
enum MACRO_LABEL {LABEL_ACC_PAD = 15,};
enum MACRO_LABELG {LABELG_ACC_PAD = 15,};
enum MACRO_LABELSECTOR {LABELSECTOR = 0,LABELOFFSET = 64,DISKMAGIC = -2108275369,};
enum MACRO_LABLEN {LABLEN = 8,};
enum MACRO_LABMAX {LABMAX = 16,};
enum MACRO_LARGECOST {LARGECOST = 500,_NOHASH = -1,};
enum MACRO_LAST {LAST_NUM = 6,};
enum MACRO_LAST_METHOD {LAST_METHOD = 0x34,};
enum MACRO_LAST_RENDITION {LAST_RENDITION = 6,};
enum MACRO_LBX {LBX_MAX_DEPTHS = 5,LBX_IMAGE_COMPRESS_SUCCESS = 0,};
enum MACRO_LBX_IMAGE {LBX_IMAGE_COMPRESS_NO_SUPPORT = 1,LBX_IMAGE_COMPRESS_BAD_MALLOC = 2,LBX_IMAGE_COMPRESS_NOT_WORTH_IT = 3,};
enum MACRO_LC {LC_ALL = 0xFFFF,LC_COLLATE = 0x0,};
enum MACRO_LCRTBS {LCRTBS = 1,LPRTERA = 2,LCRTERA = 4,LTILDE = 8,LMDMBUF = 16,LLITOUT = 32,LTOSTOP = 64,LFLUSHO = 128,LNOHANG = 256,LCRTKIL = 1024,LPASS8 = 2048,LCTLECH = 4096,LPENDIN = 8192,LDECCTQ = 16384,LNOFLSH = -32768,};
enum MACRO_LC_CTYPE {LC_CTYPE = 1,LC_MONETARY = 2,LC_NUMERIC = 3,LC_TIME = 4,LC_MESSAGES = 5,};
enum MACRO_LD {LD_NO_SYM = 0x1,LD_SYM_ONLY = 0x2,LD_FORCE = 0x4,LD_REPORT = 0x8,};
enum MACRO_LDBL {LDBL_MANT_DIG = 53,};
enum MACRO_LDBL_DIG {LDBL_DIG = 15,LDBL_MIN_EXP = -1021,};
enum MACRO_LDBL_MAX {LDBL_MAX_EXP = 1024,};
enum MACRO_LDBL_MAX_10 {LDBL_MAX_10_EXP = 308,};
enum MACRO_LDBL_MIN {LDBL_MIN_10_EXP = -307,};
enum MACRO_LDBL_WILDNUM {LDBL_WILDNUM = -99,};
enum MACRO_LDIOC {LDIOC = 17408,};
enum MACRO_LDOPEN {LDOPEN = 17408,LDCLOSE = 17409,LDCHG = 17410,LDGETT = 17416,LDSETT = 17417,};
enum MACRO_LDR {LDR_REGION_NAME_MAX = 64,LDR_NOFLAGS = 0,};
enum MACRO_LDR_EXEC {LDR_EXEC_SYSTEM_MASK = 0xFFFF0000,LDR_EXEC_USER_MASK = 0xFFFF,};
enum MACRO_LDR_EXEC_SETUID {LDR_EXEC_SETUID_F = 0x80000000,LDR_EXEC_SETGID_F = 0x40000000,LDR_EXEC_PTRACE_F = 0x20000000,LDR_EXEC_NOPRIVS_F = 0x10000000,};
enum MACRO_LDR_FLAGS {LDR_FLAGS_PROPAGATE = 7,LDR_NULL_MODULE = 0,};
enum MACRO_LDR_NOINIT {LDR_NOINIT = 0x1,LDR_WIRE = 0x2,LDR_NOUNREFS = 0x4,LDR_NOPREXIST = 0x8,LDR_EXPORTONLY = 0x10,LDR_NOUNLOAD = 0x20,LDR_PREXIST = 0x40,LDR_MAIN = 0x80,LDR_VERBOSE = 0x100,};
enum MACRO_LDR_R {LDR_R = 0x1,LDR_W = 0x2,LDR_X = 0x4,};
enum MACRO_LD_TOOLVER {LD_TOOLVER = 0,};
enum MACRO_LEAVE {LEAVE_INVITE = 0,LOOK_UP = 1,};
enum MACRO_LEVEL {LEVEL_TOKEN = 76,};
enum MACRO_LF {LF_RECWRITE = 0x7,LF_WRITE = 0x20,LF_READ_SLEEPING = 0x40,};
enum MACRO_LFTORG {LFTORG = 0,BOTTOP = 1,RGTOLF = 2,TOPBOT = 3,IMXRES = 78,};
enum MACRO_LIM {LIM_NORAISE = 0,LIM_CPU = 1,LIM_FSIZE = 2,LIM_DATA = 3,LIM_STACK = 4,LIM_CORE = 5,LIM_MAXRSS = 6,};
enum MACRO_LINESZ {LINESZ = 6,};
enum MACRO_LIO {LIO_WAIT = 1,LIO_SUSPEND = 2,LIO_NOWAIT = 3,LIO_READ = 4,LIO_WRITE = 5,LIO_GROUP = 6,LIO_FDATASYNC = 7,LIO_FSYNC = 8,};
enum MACRO_LIO_NOP {LIO_NOP = 0,};
enum MACRO_LIST {LIST_BEGINNING = 0,LIST_END = 1,LIST_ADD_BEFORE = 2,LIST_ADD_AFTER = 3,LIST_DELETE = 4,LIST_REPLACE = 5,};
enum MACRO_LITOUT {LITOUT = 0x200000,};
enum MACRO_LITTLE {LITTLE_ENDIAN = 1234,BIG_ENDIAN = 4321,};
enum MACRO_LL {LL_NONE = 0,LL_EXACT_MATCH = 1,LL_IGNORE_INT_VER = 2,LL_USE_SO_SUFFIX = 4,LL_NO_LOAD = 8,};
enum MACRO_LLC {LLC_UI = 0x3,LLC_UI_P = 0x13,LLC_XID = 0xAF,LLC_XID_P = 0xBF,LLC_TEST = 0xE3,LLC_TEST_P = 0xF3,LLC_ISO_LSAP = 0xFE,};
enum MACRO_LLC_SNAP {LLC_SNAP_LSAP = 0xAA,};
enum MACRO_LLC_SNAPSAP {LLC_SNAPSAP_DATA = 0x3AAAA,LLC_SNAPSAP_MASK = 0xFFFFFF,};
enum MACRO_LLC_SNAPSAP2 {LLC_SNAPSAP2_ETHER_DATA = 0x0,LLC_SNAPSAP2_ETHER_MASK = 0xFFFF,LLC_ISOSAP_DATA = 0x3FEFE,LLC_ISOSAP_MASK = 0xFFFFFF,};
enum MACRO_LLC_TEST {LLC_TEST_LEN = 3,};
enum MACRO_LLC_UICMD {LLC_UICMD_LEN = 3,LLC_SNAP_LEN = 8,LLC_SNAPSAP1_ETHER_DATA = 240298,};
enum MACRO_LLC_XID {LLC_XID_LEN = 3,};
enum MACRO_LL_INACTIVE {LL_INACTIVE = 0,LL_CONNECTING = 1,LL_RUNNING = 2,LL_DISCONNECTING = 3,};
enum MACRO_LL_LINELEN {LL_LINELEN = 32,LL_HOSTLEN = 256,};
enum MACRO_LM {LM_MODE = 1,LM_FORWARDMASK = 2,LM_SLC = 3,};
enum MACRO_LMF {LMF_FAMILY = -2,};
enum MACRO_LMFF {LMFF_MORE = 65536,LMF_ACTIVITY = -1,};
enum MACRO_LMF_GETSERV {LMF_GETSERV = 1,LMF_GETSMM = 2,LMF_GETLIC = 3,};
enum MACRO_LMF_HARDWARE {LMF_HARDWARE = 32,};
enum MACRO_LMF_PRODUCER {LMF_PRODUCER = 25,};
enum MACRO_LMF_SETSERV {LMF_SETSERV = 1,LMF_SETLIC = 2,LMF_ADJLIC = 3,LMF_GETAUTH = 4,LMF_RELAUTH = 5,LMF_SETSMM = 6,MAX_SMMD = 12,LMF_CMASK = 65535,LMFF_COPY = 131072,LMFF_CLR_RESTRICTED = 262144,};
enum MACRO_LMF_TOKEN {LMF_TOKEN = 32,};
enum MACRO_LOADER {LOADER_TOOLVER = 0,};
enum MACRO_LOCAL {LOCAL_P_SAP = -3,};
enum MACRO_LOCALDOMAINPARTS {LOCALDOMAINPARTS = 2,RES_TIMEOUT = 5,MAXRESOLVSORT = 10,RES_MAXNDOTS = 15,};
enum MACRO_LOCK {LOCK_SH = 1,LOCK_EX = 2,LOCK_NB = 4,LOCK_UN = 8,O_DEFER = 32,O_NDELAY = 32768,};
enum MACRO_LOCK2 {LOCK_SUCCESS = 0,LOCK_ERROR = 1,LOCK_TIMEOUT = 2,};
enum MACRO_LOCKINFO {LOCKINFO_SHIFT = 4,LI_SPLMASK = 7,LI_RWS = 8,LI_ORDERED = 16,LI_ORDNEXT = 32,LI_DOHIER = 64,LI_VALID = 128,LI_PROBE = 4096,};
enum MACRO_LOCKSTATS {LOCKSTATS_SHIFT = 6,};
enum MACRO_LOG {LOG_EMERG = 0,LOG_ALERT = 1,LOG_CRIT = 2,LOG_ERR = 3,LOG_WARNING = 4,LOG_NOTICE = 5,LOG_INFO = 6,LOG_DEBUG = 7,};
enum MACRO_LOG2BPQUAD {LOG2BPQUAD = 6,};
enum MACRO_LOGBPW {LOGBPW = 3,};
enum MACRO_LOGIN {LOGIN_NAME_MAX = 64,};
enum MACRO_LOG_KERN {LOG_KERN = 0,LOG_USER = 8,LOG_MAIL = 16,LOG_DAEMON = 24,LOG_AUTH = 32,LOG_SYSLOG = 40,LOG_LPR = 48,LOG_NEWS = 56,LOG_UUCP = 64,LOG_CRON = 72,LOG_MEGASAFE = 80,LOG_LOCAL0 = 128,LOG_LOCAL1 = 136,LOG_LOCAL2 = 144,LOG_LOCAL3 = 152,LOG_LOCAL4 = 160,LOG_LOCAL5 = 168,LOG_LOCAL6 = 176,LOG_LOCAL7 = 184,DUMP_FILE = 800,};
enum MACRO_LOG_NFACILITIES {LOG_NFACILITIES = 24,LOG_FACMASK = 1016,};
enum MACRO_LOG_PID {LOG_PID = 0x1,LOG_CONS = 0x2,LOG_ODELAY = 0x4,LOG_NDELAY = 0x8,LOG_NOWAIT = 0x10,LOG_PERROR = 0x20,};
enum MACRO_LOG_PRIMASK {LOG_PRIMASK = 0x7,};
enum MACRO_LONG {LONG_MIN = 0,UCHAR_MAX = 255,USHRT_MAX = 65535,UINT_MAX = -1,};
enum MACRO_LONG_LONG {LONG_LONG_TOKEN = 76,};
enum MACRO_LOW {LOW_DENS = 0x0,MED_DENS = 0x4,};
enum MACRO_LPRPARALLEL {LPRPARALLEL = 0x1,LPRSERIAL = 0x2,};
enum MACRO_LPRPOUT {LPRPOUT = 0x1,LPRPTIM = 0x100,LPRPERR = 0x200,LPRTERR = 0x400,LPRINIT = 0x800,LPRADAP = 0x1000,LPRSOFT = 0x2000,LPRREAD = 0x4000,};
enum MACRO_LPRSYNC {LPRSYNC = 0x1,LPRALLERR = 0x2,LPRFONTINIT = 0x4,SLOWPRNT = 0x8,};
enum MACRO_LSBFirst {LSBFirst = 0,MSBFirst = 1,};
enum MACRO_LT {LT_NULL = 0,LT_NEWLIB_BP_ADDR = 1,LDR_DATA_MAGIC = 2145234394,};
enum MACRO_LTYPE {LTYPE_FS_START = 0,LTYPE_DEFAULT_UNI = 1,LTYPE_FILE_IO = 2,LTYPE_SPECH = 3,LTYPE_MOUNT_LOOKUP = 4,LTYPE_VNODE_AUX = 5,LTYPE_BUF = 6,LTYPE_INODE_IO = 7,LTYPE_HOSTNAME = 8,LTYPE_PTY = 9,LTYPE_SCC_TTY = 10,LTYPE_FICHAIN = 11,LTYPE_VFSSW = 12,LTYPE_NFSNODE_IO = 13,LTYPE_CDEVSW = 14,LTYPE_BDEVSW = 15,LTYPE_NFSD = 16,LTYPE_DQUOT = 17,LTYPE_UMPQ = 18,};
enum MACRO_LTYPE_FS {LTYPE_FS_LAST = 18,};
enum MACRO_LTYPE_INTR {LTYPE_INTR_START = 18,LTYPE_SWINTR = 19,};
enum MACRO_LTYPE_NET {LTYPE_NET_LAST = 138,};
enum MACRO_LTYPE_PROC {LTYPE_PROC_START = 19,LTYPE_PROCREL = 20,LTYPE_PGHASH = 21,LTYPE_PGRP = 22,LTYPE_UADDR = 23,};
enum MACRO_LTYPE_PROC_LAST {LTYPE_PROC_LAST = 23,LTYPE_NET_START = 128,};
enum MACRO_LTYPE_SWINTR {LTYPE_SWINTR_LAST = 19,};
enum MACRO_LTYPE_TCP {LTYPE_TCP = 128,LTYPE_INPCB = 129,LTYPE_SOCKET = 130,LTYPE_UDP = 131,LTYPE_IP = 132,LTYPE_RAW = 133,LTYPE_ROUTE = 134,LTYPE_ARP = 135,LTYPE_SOCKBUF = 136,LTYPE_DOMAIN = 137,LTYPE_NFSREQ = 138,};
enum MACRO_LWC {LWC_PRI_MAX = 16,};
enum MACRO_L_SET {L_SET = 0,L_INCR = 1,L_XTND = 2,};
enum MACRO_LedModeOff {LedModeOff = 0,LedModeOn = 1,};
enum MACRO_LeftToRightDrawDirection {LeftToRightDrawDirection = 0,RightToLeftDrawDirection = 1,};
enum MACRO_LineSolid {LineSolid = 0,LineOnOffDash = 1,LineDoubleDash = 2,};
enum MACRO_LockDownModeSwitch {LockDownModeSwitch = 1,UnlockModeSwitch = 2,};
enum MACRO_M {M_MXFAST = 1,M_NLBLKS = 2,M_GRAIN = 3,M_KEEP = 4,};
enum MACRO_M68MAGIC {M68MAGIC = 0x88,M68TVMAGIC = 0x89,U370WRMAGIC = 0x158,U370ROMAGIC = 0x15D,};
enum MACRO_MA {MA_READ = 0x1,MA_WRITE = 0x2,MA_EXEC = 0x4,MA_SHARED = 0x8,MA_BREAK = 0x10,MA_STACK = 0x20,};
enum MACRO_MAC {MAC_ADDR_LEN = 6,SR_RD_SIZE = 8,};
enum MACRO_MADV {MADV_NORMAL = 0,MADV_RANDOM = 1,MADV_SEQUENTIAL = 2,MADV_WILLNEED = 3,MADV_DONTNEED_COMPAT = 4,MADV_SPACEAVAIL = 5,MADV_DONTNEED = 6,};
enum MACRO_MAGIC {MAGIC_ARCH_MASK = 0xFF,MAGIC_ARCH_SHFT = 0x0,};
enum MACRO_MAGIC2 {MAGIC_VALUE = -1,};
enum MACRO_MAGIC_MIPS1 {MAGIC_MIPS1 = 0x62,MAGIC_MIPS2 = 0x66,};
enum MACRO_MAGIC_MIPS3 {MAGIC_MIPS3 = 0x42,ALPHAMAGIC = 0x183,ALPHAMAGICZ = 0x188,ALPHAUMAGIC = 0x18F,};
enum MACRO_MAGIC_S {MAGIC_S_ARCH_MASK = 0xFF00,MAGIC_S_ARCH_SHFT = 0x8,};
enum MACRO_MAGNUM {MAGNUM = 0x11A,SVR2_DUMP_MAGIC_NUMBER = 0x11B,SVR3_DUMP_MAGIC_NUMBER = 0x11C,DUMP_MAGIC_NUMBER = 0x11D,};
enum MACRO_MAJ {MAJ_OBJ_STAMP = 3,MIN_OBJ_STAMP = 13,OBJ_STAMP = 781,};
enum MACRO_MAJ_SYM {MAJ_SYM_STAMP = 3,MIN_SYM_STAMP = 13,SYM_STAMP = 781,};
enum MACRO_MAP {MAP_SHARED = 0x1,MAP_PRIVATE = 0x2,};
enum MACRO_MAPSIZE {MAPSIZE = 256,};
enum MACRO_MAP_ANON {MAP_ANON = 0x10,MAP_TYPE = 0xF0,};
enum MACRO_MAP_FILE {MAP_FILE = 0x0,MAP_ANONYMOUS = 0x10,};
enum MACRO_MAP_FOLDCZONE {MAP_FOLDCZONE = 0x10,MAP_PRECOMPOSED = 0x20,MAP_COMPOSITE = 0x40,MAP_FOLDDIGITS = 0x80,UCS_NULL_TERMINATED = 0xFFFFFFFF,};
enum MACRO_MAP_VARIABLE {MAP_VARIABLE = 0x0,MAP_FIXED = 0x100,MAP_HASSEMAPHORE = 0x200,MAP_INHERIT = 0x400,MAP_UNALIGNED = 0x800,MAP_TEXT = 0x1000,MAP_MBUF = 0x2000,};
enum MACRO_MARK {MARK_FLG_PRESENT = 0x1,MARK_FLG_CREATE = 0x2,MARK_FLG_MODIFY = 0x4,MARK_FLG_DELETE = 0x8,};
enum MACRO_MARK_PRESENT {MARK_PRESENT = 1,};
enum MACRO_MARKb {MARKb = 128,};
enum MACRO_MASK {MASK_OBJ = 25,};
enum MACRO_MATCH {MATCH_CHAR = 80,};
enum MACRO_MATTR {MATTR_CACHE = 1,MATTR_MIGRATE = 2,MATTR_REPLICATE = 4,};
enum MACRO_MATTR_VAL {MATTR_VAL_OFF = 0,MATTR_VAL_ON = 1,MATTR_VAL_GET = 2,MATTR_VAL_CACHE_FLUSH = 6,MATTR_VAL_DCACHE_FLUSH = 7,MATTR_VAL_ICACHE_FLUSH = 8,};
enum MACRO_MAX {MAX_CANON = 255,MAX_INPUT = 512,};
enum MACRO_MAX2 {MAX_NUM_COLORS = 8,};
enum MACRO_MAXAPUSH {MAXAPUSH = 8,SAD_SAP = 536887553,SAD_GAP = 536887554,SAD_VML = 536887555,};
enum MACRO_MAXCDNAME {MAXCDNAME = 255,};
enum MACRO_MAXCUT {MAXCUT = 30000,};
enum MACRO_MAXDEFECTS {MAXDEFECTS = 256,};
enum MACRO_MAXDFLSRCH {MAXDFLSRCH = 3,MAXDNSRCH = 6,};
enum MACRO_MAXDIMENSION {MAXDIMENSION = 2147483647,};
enum MACRO_MAXDOMNAMELEN {MAXDOMNAMELEN = 256,};
enum MACRO_MAXERRMSGLEN {MAXERRMSGLEN = 255,YPU_PROG = 100028,};
enum MACRO_MAXEXECBUF {MAXEXECBUF = 1025,};
enum MACRO_MAXFLDS {MAXFLDS = 50,};
enum MACRO_MAXFRAG {MAXFRAG = 8,};
enum MACRO_MAXGIDS {MAXGIDS = 16,};
enum MACRO_MAXHABITATS {MAXHABITATS = 16,};
enum MACRO_MAXHABSYSCALL {MAXHABSYSCALL_LEN = 128,};
enum MACRO_MAXINTERP {MAXINTERP = 1025,};
enum MACRO_MAXLABEL {MAXLABEL = 63,};
enum MACRO_MAXLOGNAME {MAXLOGNAME = 64,};
enum MACRO_MAXMAPNAMELEN {MAXMAPNAMELEN = 255,MAXYPDATALEN = 1023,};
enum MACRO_MAXNAMELEN {MAXNAMELEN = 1024,};
enum MACRO_MAXNAMLEN {MAXNAMLEN = 255,};
enum MACRO_MAXNETNAMELEN {MAXNETNAMELEN = 255,};
enum MACRO_MAXNS {MAXNS = 3,};
enum MACRO_MAXPARTITIONS {MAXPARTITIONS = 8,};
enum MACRO_MAXPHASE {MAXPHASE = 512000,MAXFREQ = 33554432,};
enum MACRO_MAXPS {MAXPS = 32768,};
enum MACRO_MAXQUOTAS {MAXQUOTAS = 2,};
enum MACRO_MAXREVSZ {MAXREVSZ = 16,};
enum MACRO_MAXRSS {MAXRSS = 100,DFLDSIZ = 134217728,};
enum MACRO_MAXSELFD {MAXSELFD = 4096,};
enum MACRO_MAXSSIZ {MAXSSIZ = 33554432,};
enum MACRO_MAXSTANZANAMSZ {MAXSTANZANAMSZ = 16,};
enum MACRO_MAXSTATICMODS {MAXSTATICMODS = 16,};
enum MACRO_MAXSYMLINKS {MAXSYMLINKS = 64,};
enum MACRO_MAXTTL {MAXTTL = 255,};
enum MACRO_MAXVIFS {MAXVIFS = 32,ALL_VIFS = -1,};
enum MACRO_MAX_ARCHLEN {MAX_ARCHLEN = 5,};
enum MACRO_MAX_ASCII {MAX_ASCII_ORDER_NUMBER_LENGTH = 10,};
enum MACRO_MAX_AUTH {MAX_AUTH_BYTES = 400,};
enum MACRO_MAX_BATTERIES {MAX_BATTERIES = 8,};
enum MACRO_MAX_DOMAINLEN {MAX_DOMAINLEN = 256,MAX_ENVSTRING = 128,};
enum MACRO_MAX_DQ {MAX_DQ_TIME = 604800,};
enum MACRO_MAX_EXEC {MAX_EXEC_AUXV = 5,};
enum MACRO_MAX_IFNAME {MAX_IFNAME_LEN = 12,MAX_IFVER_LEN = 100,};
enum MACRO_MAX_IQ {MAX_IQ_TIME = 604800,};
enum MACRO_MAX_KINFO {MAX_KINFO_BUF = 4096,};
enum MACRO_MAX_KINFO_STREAMS {MAX_KINFO_STREAMS = 10,MAX_BUF = 4096,};
enum MACRO_MAX_LANGS {MAX_LANGS = 18,MIN_LANG_CODE = 48,MAX_LANG_CODE = 82,MOD_MASK = 128,};
enum MACRO_MAX_LOCK {MAX_LOCK = 16,MAX_SLOCK = 32,};
enum MACRO_MAX_MACHINE {MAX_MACHINE_NAME = 255,};
enum MACRO_MAX_MACHINELEN {MAX_MACHINELEN = 256,IPALLOC_PROG = 100042,};
enum MACRO_MAX_MASTER {MAX_MASTER_NAME = 256,};
enum MACRO_MAX_METHOD {MAX_METHOD_NAME = 32,};
enum MACRO_MAX_MNT {MAX_MNT_PATHLEN = 90,M_VISFLAGMASK = 65535,};
enum MACRO_MAX_NAME {MAX_NAME = 100,};
enum MACRO_MAX_NETOBJ {MAX_NETOBJ_SZ = 1024,};
enum MACRO_MAX_NUM {MAX_NUM_PARTITIONS = 100,};
enum MACRO_MAX_NUM_CLASSES {MAX_NUM_CLASSES = 100,MAX_NUM_MEMBERS = 2500,};
enum MACRO_MAX_PAGE {MAX_PAGE_OFFSET = 65535,MAX_REC_NUMBER = -1,};
enum MACRO_MAX_PASS {MAX_PASS = 80,};
enum MACRO_MAX_PATH {MAX_PATH_LEN = 1024,MAX_FILEID = 32,};
enum MACRO_MAX_PER {MAX_PER_LIST = 8,MIN_HASHSZ = 128,MAX_HASHSZ = 2048,};
enum MACRO_MAX_PROMPTS {MAX_PROMPTS = 8,};
enum MACRO_MAX_R {MAX_R_SN = 18,};
enum MACRO_MAX_RAPI {MAX_RAPI_SESS = 100,};
enum MACRO_MAX_S5BSIZE {MAX_S5BSIZE = 2048,};
enum MACRO_MAX_SECONDS {MAX_SECONDS = -1,};
enum MACRO_MAX_STATES {MAX_STATES = 16,};
enum MACRO_MAX_UPCALLS {MAX_UPCALLS = 50,};
enum MACRO_MAX_VFSOPS {MAX_VFSOPS_FSNAME = 16,};
enum MACRO_MB {MB_LEN_MAX = 4,_POSIX_ARG_MAX = 4096,};
enum MACRO_MBMAXLEN {MBMAXLEN = 4,};
enum MACRO_MC {MC_SYNC = 1,MC_LOCK = 2,MC_UNLOCK = 3,MC_LOCKAS = 4,MC_UNLOCKAS = 5,SHARED = 16,PRIVATE = 32,};
enum MACRO_MC68KROMAGIC {MC68KROMAGIC = 0x151,MC68KPGMAGIC = 0x152,};
enum MACRO_MC68KWRMAGIC {MC68KWRMAGIC = 0x150,MC68TVMAGIC = 0x151,};
enum MACRO_MC68MAGIC {MC68MAGIC = 0x150,};
enum MACRO_MCL2KBYTES {MCL2KBYTES = 2048,};
enum MACRO_MCS {MCS_TOOLVER = 0,};
enum MACRO_MDSIZE {MDSIZE = 8192,};
enum MACRO_MEM {MEM_NOAUTOGROW = 0x1,MEM_SHARED = 0x4,};
enum MACRO_MEMBER {MEMBER_VAR_LEN = 7,MEMBER_VAL_LEN = 10,};
enum MACRO_MEMORY {MEMORY_OBJECT_COPY_NONE = 0,MEMORY_OBJECT_COPY_DELAY = 2,};
enum MACRO_MEMORY_OBJECT {MEMORY_OBJECT_NULL = 0,};
enum MACRO_MIB1231 {MIB1231_COMM_NO_OP = 1,MIB1231_COMM_OPEN = 2,MIB1231_COMM_RESET = 3,MIB1231_COMM_CLOSE = 4,};
enum MACRO_MIB1231_ACTMON {MIB1231_ACTMON_TRUE = 1,MIB1231_ACTMON_FALSE = 2,};
enum MACRO_MIB1231_ROSTATUS {MIB1231_ROSTATUS_NOOPEN = 1,MIB1231_ROSTATUS_BADPARM = 2,MIB1231_ROSTATUS_LOBEFAILED = 3,MIB1231_ROSTATUS_SIG_LOSS = 4,MIB1231_ROSTATUS_INS_TIMEOUT = 5,MIB1231_ROSTATUS_RING_FAILED = 6,MIB1231_ROSTATUS_BEACONING = 7,MIB1231_ROSTATUS_DUPLICATE_MAC = 8,MIB1231_ROSTATUS_REQ_FAILED = 9,MIB1231_ROSTATUS_REM_RECVD = 10,MIB1231_ROSTATUS_OPEN = 11,};
enum MACRO_MIB1231_RSPEED {MIB1231_RSPEED_UNKNOWN = 1,MIB1231_RSPEED_1_MEG = 2,MIB1231_RSPEED_4_MEG = 3,MIB1231_RSPEED_16_MEG = 4,};
enum MACRO_MIB1231_RSTATE {MIB1231_RSTATE_OPENED = 1,MIB1231_RSTATE_CLOSED = 2,MIB1231_RSTATE_OPENING = 3,MIB1231_RSTATE_CLOSING = 4,MIB1231_RSTATE_OPEN_FAILURE = 5,MIB1231_RSTATE_RING_FAILURE = 6,};
enum MACRO_MIB1231_RSTATUS {MIB1231_RSTATUS_NO_PROB = 0x0,MIB1231_RSTATUS_RING_RECOVERY = 0x20,MIB1231_RSTATUS_SINGLE_STATION = 0x40,MIB1231_RSTATUS_REMOVE_RCVD = 0x100,MIB1231_RSTATUS_RESERVED = 0x200,MIB1231_RSTATUS_AUTO_REM_ERROR = 0x400,MIB1231_RSTATUS_LOBE_WIRE_FAULT = 0x800,MIB1231_RSTATUS_TRANSMIT_BEACON = 0x1000,MIB1231_RSTATUS_SOFT_ERROR = 0x2000,MIB1231_RSTATUS_HARD_ERROR = 0x4000,MIB1231_RSTATUS_SIGNAL_LOSS = 0x8000,MIB1231_RSTATUS_NO_STATUS = 0x20000,};
enum MACRO_MIF {MIF_NETRAIN = 0x1,MIF_QUORUMLOSS = 0x2,};
enum MACRO_MIG {MIG_SND_VS_RCV_PORT = 100,};
enum MACRO_MIG_ARRAY {MIG_ARRAY_TOO_LARGE = -307,};
enum MACRO_MIG_BAD {MIG_BAD_ID = -303,};
enum MACRO_MIG_BAD_ARGUMENTS {MIG_BAD_ARGUMENTS = -304,};
enum MACRO_MIG_EXCEPTION {MIG_EXCEPTION = -306,};
enum MACRO_MIG_NO {MIG_NO_REPLY = -305,};
enum MACRO_MIG_REMOTE {MIG_REMOTE_ERROR = -302,};
enum MACRO_MIG_REPLY {MIG_REPLY_MISMATCH = -301,};
enum MACRO_MIG_TYPE {MIG_TYPE_ERROR = -300,};
enum MACRO_MIN {MIN_HAB_NO = 0,MAX_HAB_NO = 134217728,};
enum MACRO_MIN2 {MIN_SLIDER_THICKNESS = 1,MIN_SLIDER_LENGTH = 6,};
enum MACRO_MINPHYS {MINPHYS = 61440,};
enum MACRO_MINS {MINS_PER_HOUR = 60,};
enum MACRO_MINSEC {MINSEC = 16,MAXSEC = 1200,};
enum MACRO_MINSPERHOUR {MINSPERHOUR = 60,};
enum MACRO_MINTTL {MINTTL = 1,DEFTTL = 64,};
enum MACRO_MIN_CACHEABLE {MIN_CACHEABLE_LEN = 8,};
enum MACRO_MIPSEBMAGIC {MIPSEBMAGIC = 0x160,MIPSELMAGIC = 0x162,SMIPSEBMAGIC = 0x6001,SMIPSELMAGIC = 0x6201,};
enum MACRO_MIPSEBMAGIC_2 {MIPSEBMAGIC_2 = 0x163,MIPSELMAGIC_2 = 0x166,SMIPSEBMAGIC_2 = 0x6301,SMIPSELMAGIC_2 = 0x6601,};
enum MACRO_MIPSEBMAGIC_3 {MIPSEBMAGIC_3 = 0x140,MIPSELMAGIC_3 = 0x142,SMIPSEBMAGIC_3 = 0x4001,SMIPSELMAGIC_3 = 0x4201,};
enum MACRO_MIPSEBUMAGIC {MIPSEBUMAGIC = 0x180,MIPSELUMAGIC = 0x182,};
enum MACRO_MITMiscNumberErrors {MITMiscNumberErrors = 0,};
enum MACRO_MITMiscNumberEvents {MITMiscNumberEvents = 0,};
enum MACRO_MLD {MLD_SHOW_MANGLED_NAME = 0x1,MLD_SHOW_INFO = 0x2,MLD_NO_SPACES = 0x4,MLD_SHOW_DEMANGLED_NAME = 0x8,MLD_DUMP = 0x10,MLD_MEMCHECK = 0x20,};
enum MACRO_MLD_ADDRESS {MLD_ADDRESS_NIL = -3,WOBJ_SCNNO_SYMTAB = -1,};
enum MACRO_MLD_ERROR {MLD_ERROR = -1,};
enum MACRO_MLD_FALSE {MLD_FALSE = 0,MLD_TRUE = 1,MLD_NUMBER_OF_INTERNAL_SYMBOLS = 22,};
enum MACRO_MLD_INADEQUATE {MLD_INADEQUATE_ARRAY_SIZE = -2,};
enum MACRO_MLD_SOMETHING {MLD_SOMETHING_RECOGNIZED = 1,MLD_NOTHING_RECOGNIZED = 0,};
enum MACRO_MM {MM_HARD = 0x1,MM_SOFT = 0x2,MM_FIRM = 0x4,MM_APPL = 0x100,MM_UTIL = 0x200,MM_OPSYS = 0x400,MM_PRINT = 0x10000,MM_CONSOLE = 0x20000,MM_RECOVER = 0x1000000,MM_NRECOV = 0x2000000,};
enum MACRO_MM_NOSEV {MM_NOSEV = 0,MM_HALT = 1,MM_ERROR = 2,MM_WARNING = 3,MM_INFO = 4,};
enum MACRO_MM_NULLLBL {MM_NULLLBL = 0,MM_NULLSEV = 0,MM_NULLMC = 0,MM_NULLTXT = 0,MM_NULLACT = 0,MM_NULLTAG = 0,};
enum MACRO_MM_OK {MM_OK = 1,MM_NOTOK = 2,MM_NOMSG = 3,MM_NOCON = 4,};
enum MACRO_MNT {MNT_FORCE = 0x1,MNT_NOFORCE = 0x2,MNT_SKIPSYSTEM = 0x4,};
enum MACRO_MNT_NUMTYPES {MNT_NUMTYPES = 128,};
enum MACRO_MNT_WAIT {MNT_WAIT = 0x1,MNT_NOWAIT = 0x2,};
enum MACRO_MOD {MOD_MIN = 0x80,MOD_MAX = 0x9F,};
enum MACRO_MODE {MODE_S = 1,MODE_B = 2,MODE_C = 3,REC_ESC = -1,};
enum MACRO_MODEM {MODEM_CD = 0x1,MODEM_DSR = 0x2,MODEM_CTS = 0x4,MODEM_DSR_START = 0x8,MODEM_BADCALL = 0x10,};
enum MACRO_MODE_EDIT {MODE_EDIT = 0x1,MODE_TRAPSIG = 0x2,MODE_ACK = 0x4,MODE_SOFT_TAB = 0x8,MODE_LIT_ECHO = 0x10,MODE_MASK = 0x1F,MODE_FLOW = 0x100,MODE_ECHO = 0x200,MODE_INBIN = 0x400,MODE_OUTBIN = 0x800,MODE_FORCE = 0x1000,};
enum MACRO_MODULE {MODULE_ID_LEN = 10,};
enum MACRO_MOD_ALT {MOD_ALT_L = 0x80,MOD_ALT_R = 0x81,MOD_CTRL_L = 0x82,MOD_CTRL_R = 0x83,MOD_SHFT_L = 0x84,MOD_SHFT_R = 0x85,MOD_COMP_L = 0x86,MOD_COMP_R = 0x87,MOD_CAPS = 0x88,MOD_NUML = 0x89,MOD_SCROLL = 0x8A,};
enum MACRO_MOD_OFFSET {MOD_OFFSET = 0x1,MOD_FREQUENCY = 0x2,MOD_MAXERROR = 0x4,MOD_ESTERROR = 0x8,MOD_STATUS = 0x10,MOD_TIMECONST = 0x20,MOD_CLKB = 0x4000,MOD_CLKA = 0x8000,};
enum MACRO_MONOCHROME {MONOCHROME = 0,COLOR = 1,};
enum MACRO_MONS {MONS_PER_YEAR = 12,};
enum MACRO_MONSPERYEAR {MONSPERYEAR = 12,};
enum MACRO_MORE {MORE_EVENTS = 0x80,};
enum MACRO_MORECTL {MORECTL = 0x1,MOREDATA = 0x2,};
enum MACRO_MOTION {MOTION_BUFFER_SIZE = 100,};
enum MACRO_MOUNT {MOUNT_NONE = 0,MOUNT_UFS = 1,MOUNT_NFS = 2,MOUNT_MFS = 3,MOUNT_PC = 4,MOUNT_S5FS = 5,MOUNT_CDFS = 6,MOUNT_DFS = 7,MOUNT_EFS = 8,MOUNT_PROCFS = 9,MOUNT_MSFS = 10,MOUNT_FFM = 11,MOUNT_FDFS = 12,MOUNT_ADDON = 13,MOUNT_NFS3 = 14,MOUNT_CFS = 15,MOUNT_CSPEC = 16,MOUNT_DVDFS = 17,};
enum MACRO_MOUNTPROC {MOUNTPROC_MNT = 1,MOUNTPROC_DUMP = 2,MOUNTPROC_UMNT = 3,MOUNTPROC_UMNTALL = 4,MOUNTPROC_EXPORT = 5,MOUNTPROC_EXPORTALL = 6,};
enum MACRO_MOUNTPROG {MOUNTPROG = 100005,};
enum MACRO_MOUNTVERS {MOUNTVERS_ORIG = 1,};
enum MACRO_MOUNTVERS3 {MOUNTVERS3 = 3,};
enum MACRO_MOUNTVERS_0 {MOUNTVERS = 1,};
enum MACRO_MOUNT_MAXTYPE {MOUNT_MAXTYPE = 17,MOUNT_NUMTYPES = 18,MNAMELEN = 90,};
enum MACRO_MOUSE {MOUSE_ID = 0x2,TABLET_ID = 0x4,CSS_DEVICE_TYPE = 0x80,CUSTOMER_DEVICE_TYPE = 0x100,};
enum MACRO_MPSG {MPSG_HAB_NO = 0x6000000,};
enum MACRO_MPSGV11 {MPSGV11 = 0x101,};
enum MACRO_MQ {MQ_OPEN_MAX = 64,MQ_PRIO_MAX = 256,};
enum MACRO_MQ_NAME {MQ_NAME_MAX = 255,};
enum MACRO_MRT {MRT_INIT = 100,MRT_DONE = 101,MRT_ADD_VIF = 102,MRT_DEL_VIF = 103,MRT_ADD_MFC = 104,MRT_DEL_MFC = 105,MRT_VERSION = 106,MRT_ASSERT = 107,};
enum MACRO_MS {MS_ALIAS = 0x1,};
enum MACRO_MSEM {MSEM_UNLOCKED = 0,MSEM_LOCKED = 1,MSEM_IF_NOWAIT = 2,MSEM_IF_WAITERS = 3,};
enum MACRO_MSG {MSG_SIZE_MAX = 8192,MSG_TYPE_NORMAL = 0,};
enum MACRO_MSGFLTIM {MSGFLTIM = 0x1,MSGFLSEV = 0x2,MSGFLERR = 0x4,MSGFLFIL = 0x8,MSGFLMSG = 0x10,MSGFLHLP = 0x20,MSGFLTAB = 0x40,};
enum MACRO_MSGINFO {MSGINFO_MAX = 0,MSGINFO_MNB = 1,MSGINFO_MNI = 2,MSGINFO_TQL = 3,MSGINFO_SAR = 4,};
enum MACRO_MSGMNI {MSGMNI = 50,};
enum MACRO_MSGTQL {MSGTQL = 40,};
enum MACRO_MSG_ALLO {MSG_ALLO = -9013,};
enum MACRO_MSG_BADP {MSG_BADP = -9015,};
enum MACRO_MSG_COMP {MSG_COMP = -9001,};
enum MACRO_MSG_CPID {MSG_CPID = -9010,};
enum MACRO_MSG_EXEC {MSG_EXEC = -9016,};
enum MACRO_MSG_HIPRI {MSG_HIPRI = 1,MSG_BAND = 2,MSG_ANY = 4,};
enum MACRO_MSG_INDX {MSG_INDX = -9011,};
enum MACRO_MSG_INVL {MSG_INVL = -9002,};
enum MACRO_MSG_MAXIOVLEN {MSG_MAXIOVLEN = 16,MSG_OOB = 1,};
enum MACRO_MSG_MTCH {MSG_MTCH = -9003,};
enum MACRO_MSG_NOERROR {MSG_NOERROR = 0x1000,MSG_TAG = 0x2000,};
enum MACRO_MSG_NONE {MSG_NONE = -9004,};
enum MACRO_MSG_OPTION {MSG_OPTION_NONE = 0x0,SEND_TIMEOUT = 0x1,SEND_NOTIFY = 0x2,SEND_INTERRUPT = 0x4,RCV_TIMEOUT = 0x100,RCV_NO_SENDERS = 0x200,RCV_INTERRUPT = 0x400,};
enum MACRO_MSG_PEEK {MSG_PEEK = 0x2,MSG_DONTROUTE = 0x4,MSG_EOR = 0x8,MSG_TRUNC = 0x10,MSG_CTRUNC = 0x20,MSG_WAITALL = 0x40,MSG_WIRE = 0x80,MSG_AIO = 0x2000,MSG_NONBLOCK = 0x4000,MSG_COMPAT = 0x8000,MSG_SENDFILE = 0x10000,};
enum MACRO_MSG_QMSG {MSG_QMSG = -9017,};
enum MACRO_MSG_REFN {MSG_REFN = -9005,};
enum MACRO_MSG_SREG {MSG_SREG = -9014,};
enum MACRO_MSG_TABI {MSG_TABI = -9009,};
enum MACRO_MSG_TABP {MSG_TABP = -9012,};
enum MACRO_MSG_TYPE {MSG_TYPE_EMERGENCY = 1,MSG_TYPE_UNSTRUCTURED = 0,MSG_TYPE_BIT = 0,MSG_TYPE_BOOLEAN = 0,};
enum MACRO_MSG_TYPE_CAMELOT {MSG_TYPE_CAMELOT = 64,MSG_TYPE_ENCRYPTED = 128,MSG_TYPE_RPC = 256,};
enum MACRO_MSG_TYPE_INTEGER {MSG_TYPE_INTEGER_16 = 1,MSG_TYPE_INTEGER_32 = 2,MSG_TYPE_PORT_OWNERSHIP = 3,MSG_TYPE_PORT_RECEIVE = 4,MSG_TYPE_PORT_ALL = 5,MSG_TYPE_PORT = 6,MSG_TYPE_CHAR = 8,MSG_TYPE_BYTE = 9,};
enum MACRO_MSG_TYPE_INTEGER_8 {MSG_TYPE_INTEGER_8 = 9,MSG_TYPE_REAL = 10,MSG_TYPE_STRING = 12,};
enum MACRO_MSG_TYPE_INTERNAL {MSG_TYPE_INTERNAL_MEMORY = 9,MSG_TYPE_PORT_NAME = 15,MSG_TYPE_INTEGER_64 = 16,MSG_TYPE_LAST = 17,MSG_TYPE_POLYMORPHIC = -1,};
enum MACRO_MSG_TYPE_STRING {MSG_TYPE_STRING_C = 12,};
enum MACRO_MSG_W {MSG_W = 128,MSG_RWAIT = 512,MSG_WWAIT = 1024,};
enum MACRO_MSIZ {MSIZ = 8192,};
enum MACRO_MSIZE {MSIZE = 256,MCLBYTES = 8192,};
enum MACRO_MSS {MSS_FLAG_CALL_SUPT_RTN = 0x1,};
enum MACRO_MSWAPX {MSWAPX = 128,NEW_OPEN_MAX_SYSTEM = 65536,};
enum MACRO_MS_ASYNC {MS_ASYNC = 1,MS_SYNC = 2,MS_INVALIDATE = 4,MCL_CURRENT = 8192,MCL_FUTURE = 16384,MCL_FUTURE_SELECTIVE = 32768,};
enum MACRO_MS_DATA {MS_DATA = 0x20,MS_RDONLY = 0x1,};
enum MACRO_MS_NOSUID {MS_NOSUID = 8,MS_REMOUNT = 65536,};
enum MACRO_MS_STAMP {MS_STAMP = 3,LS_STAMP = 11,};
enum MACRO_MS_UNK {MS_UNK = 0,MS_VSXXX = 2,MS_VSTAB = 4,MS_PCXAS = 6,};
enum MACRO_MT {MT_FREE = 0,MT_DATA = 1,MT_HEADER = 82,};
enum MACRO_MTHN {MTHN = 3,MTAN = 7,};
enum MACRO_MTHR {MTHR = 2,MTAR = 6,};
enum MACRO_MTLN {MTLN = 1,MTMN = 5,};
enum MACRO_MTLR {MTLR = 0,MTMR = 4,};
enum MACRO_MTVMAGIC {MTVMAGIC = 0x171,VAXWRMAGIC = 0x178,VAXROMAGIC = 0x17D,};
enum MACRO_MTWEOF {MTWEOF = 0x0,MTFSF = 0x1,MTBSF = 0x2,MTFSR = 0x3,MTBSR = 0x4,MTREW = 0x5,MTOFFL = 0x6,MTNOP = 0x7,MTCACHE = 0x8,MTNOCACHE = 0x9,MTCSE = 0xA,MTCLX = 0xB,MTCLS = 0xC,MTENAEOT = 0xD,MTDISEOT = 0xE,MTFLUSH = 0xF,MTGTON = 0x10,MTGTOFF = 0x11,MTRETEN = 0x12,MTSEOD = 0x13,MTERASE = 0x14,MTONLINE = 0x15,MTLOAD = 0x16,MTUNLOAD = 0x17,MTENASGIO = 0x18,MTDISSGIO = 0x19,MTDISINT = 0x1A,MTENAINT = 0x1B,MTSEEK = 0x1C,MTSEEKDS = 0x1D,};
enum MACRO_MTX0 {MTX0 = 0x0,MTX1 = 0x1,};
enum MACRO_MT_IFADDR {MT_IFADDR = 7,MT_CONTROL = 86,MT_OOBDATA = 87,};
enum MACRO_MT_ISTS {MT_ISTS = 0x1,MT_ISHT = 0x2,MT_ISTM = 0x3,MT_ISMT = 0x4,MT_ISUT = 0x5,MT_ISTMSCP = 0x6,MT_ISST = 0x7,MT_ISSCSI = 0x8,};
enum MACRO_MT_MAX {MT_MAX = 16,};
enum MACRO_MT_RIGHTS {MT_RIGHTS = 85,};
enum MACRO_MT_SOCKET {MT_SOCKET = 3,MT_PCB = 4,MT_RTABLE = 5,MT_HTABLE = 83,MT_ATABLE = 84,};
enum MACRO_MT_SONAME {MT_SONAME = 9,MT_MRTABLE = 37,};
enum MACRO_MT_SOOPTS {MT_SOOPTS = 8,MT_FTABLE = 6,};
enum MACRO_MULTIBUFFER {MULTIBUFFER_MAJOR_VERSION = 1,};
enum MACRO_MULTIBUFFER_MINOR {MULTIBUFFER_MINOR_VERSION = 1,};
enum MACRO_MULTIPLE {MULTIPLE_ATTRS = -3,};
enum MACRO_MV {MV_RESPONSE = 0x0,MV_BEACON = 0x2,MV_CLAIM_TOKEN = 0x3,MV_RING_PURGE = 0x4,MV_ACTIVE_MON_PRES = 0x5,MV_STANDBY_MON_PRES = 0x6,MV_DUP_ADDR_TEST = 0x7,MV_LOBE_MEDIA_TEST = 0x8,MV_TRANSMIT_FORW = 0x9,MV_RMV_RING_STATION = 0xB,MV_CHANGE_PARM = 0xC,MV_INIT_RING_STN = 0xD,MV_REQ_STN_ADDR = 0xE,MV_REQ_STN_STATE = 0xF,MV_REQ_STN_ATTACH = 0x10,MV_REQ_INIT = 0x20,MV_REPORT_STN_ADDR = 0x22,MV_REPORT_STN_STATE = 0x23,MV_REPORT_STN_ATTACH = 0x24,MV_REPORT_NEW_MONITOR = 0x25,MV_REPORT_SUA_CHANGE = 0x26,MV_REPORT_RNG_POLL_FAIL = 0x27,MV_REPORT_MONTIOR_ERR = 0x28,MV_REPORT_ERR = 0x29,MV_REPORT_TRANSMIT_FORW = 0x2A,};
enum MACRO_MWM {MWM_HINTS_FUNCTIONS = 1,MWM_HINTS_DECORATIONS = 2,MWM_HINTS_INPUT_MODE = 4,MWM_HINTS_STATUS = 8,};
enum MACRO_MWM_DECOR {MWM_DECOR_ALL = 1,MWM_DECOR_BORDER = 2,MWM_DECOR_RESIZEH = 4,MWM_DECOR_TITLE = 8,MWM_DECOR_MENU = 16,MWM_DECOR_MINIMIZE = 32,MWM_DECOR_MAXIMIZE = 64,};
enum MACRO_MWM_FUNC {MWM_FUNC_ALL = 1,MWM_FUNC_RESIZE = 2,MWM_FUNC_MOVE = 4,MWM_FUNC_MINIMIZE = 8,MWM_FUNC_MAXIMIZE = 16,MWM_FUNC_CLOSE = 32,};
enum MACRO_MWM_INFO {MWM_INFO_STARTUP_STANDARD = 1,MWM_INFO_STARTUP_CUSTOM = 2,PROP_MOTIF_WM_HINTS_ELEMENTS = 5,};
enum MACRO_MWM_INPUT {MWM_INPUT_MODELESS = 0,MWM_INPUT_PRIMARY_APPLICATION_MODAL = 1,MWM_INPUT_SYSTEM_MODAL = 2,MWM_INPUT_FULL_APPLICATION_MODAL = 3,};
enum MACRO_MWM_INPUT_APPLICATION {MWM_INPUT_APPLICATION_MODAL = 1,};
enum MACRO_MWM_TEAROFF {MWM_TEAROFF_WINDOW = 1,};
enum MACRO_M_COPYALL {M_COPYALL = 1000000000,};
enum MACRO_M_COPYFLAGS {M_COPYFLAGS = 1543942,};
enum MACRO_M_DELAYED {M_DELAYED = 0x400,M_SECURE = 0x800,M_LOCAL = 0x1000,M_QUOTA = 0x2000,M_GRPID = 0x4000,M_THROTTLE = 0x8000,M_UPDATE = 0x10000,M_MPBUSY = 0x20000,M_FMOUNT = 0x40000,M_MSFS_MOUNT = 0x80000,M_IOERROR = 0x200000,M_PRECIOUS = 0x400000,M_NEWRDDIR = 0x800000,M_MPWANT = 0x1000000,M_DUAL = 0x2000000,M_CFSONTOP = 0x4000000,M_FAILOVER = 0x8000000,M_LOCAL_ROOT = 0x10000000,M_GLOBAL_ROOT = 0x20000000,M_THROTTLED = 0x40000000,M_UNTHROTTLED = 0x80000000,};
enum MACRO_M_DINTR {M_DINTR = 0x1,M_NOCHK = 0x2,M_HSDREGIO = 0x20,M_HSDBUSY = 0x40,M_WAPINT = 0x80,M_PSLOAD = 0x100,M_WAITING = 0x200,M_WHALTINT = 0x400,M_WDMAINT = 0x800,M_DMABUSY = 0x1000,M_DMAWAIT = 0x2000,M_INTLEVEL = 0x4000,};
enum MACRO_M_EXRDMOSTLY {M_EXRDMOSTLY = 0x400,M_EXPUBLIC = 0x800,M_EXPUBINDEX = 0x1000,};
enum MACRO_M_EXT {M_EXT = 0x1,M_PKTHDR = 0x2,M_EOR = 0x4,M_FASTFREE = 0x8,M_UIOMOVE = 0x10,M_HDRRSVD = 0x20,M_BCAST = 0x100,M_MCAST = 0x200,M_WCARD = 0x400,M_PROTOCOL_SUM = 0x800,M_ATM_CLP = 0x1000,M_REQUE_OK = 0x2000,M_REQUED_ONCE = 0x4000,M_PROXY = 0x8000,M_ALIAS = 0x10000,M_RHANDLE = 0x20000,M_CHECKSUM = 0x40000,M_IPPREPROCESS = 0x80000,M_NOCHECKSUM = 0x100000,};
enum MACRO_M_FREE {M_FREE = 0,M_MBUF = 1,M_CLUSTER = 2,M_SOCKET = 3,M_PCB = 4,M_RTABLE = 5,M_FTABLE = 6,M_IFADDR = 7,M_SOOPTS = 8,M_SONAME = 9,M_MBLK = 10,M_MBDATA = 11,M_STRHEAD = 12,M_STRQUEUE = 13,M_STRQBAND = 14,M_STRMODSW = 15,M_STRSIGS = 16,M_STRPOLLS = 17,M_STROSR = 18,M_STRSQ = 19,M_STREAMS = 20,M_IOV = 21,M_FHANDLE = 22,M_NFSREQ = 23,M_NFSMNT = 24,M_FILE = 25,M_FILEDESC = 26,M_IOCTLOPS = 27,M_SELPOLL = 28,M_DEVBUF = 29,M_PATHNAME = 30,M_KTABLE = 31,M_UFSMNT = 32,M_ADVFS = 33,M_IPMOPTS = 34,M_IPMADDR = 35,M_IFMADDR = 36,M_MRTABLE = 37,M_VNODE = 38,M_IOBUF = 39,M_PRESTO = 40,M_DMASG = 41,M_SIGQ = 42,M_ATMMEM = 43,M_DRD = 44,M_DLM = 45,M_CNX = 46,M_ESS = 47,M_KALLOC = 48,M_TEMP = 49,M_RM = 50,M_PMAP = 51,M_CRED = 52,M_TASK = 53,M_THREAD = 54,M_AIO = 55,M_SELQ = 56,M_RTTIME = 57,M_SVIPC = 58,M_FILEBUF = 59,M_MOUNT = 60,M_NAMEI = 61,M_MIPC = 62,M_VMOBJ = 63,M_VMANON = 64,M_VMSEG = 65,M_VMLOCK = 66,M_VMMAP = 67,M_VMENTRY = 68,M_VMCOPY = 69,M_FLOCK = 70,M_THCALL = 71,M_FIFO = 72,M_ZONE = 73,M_ANON = 74,M_VMVPAGE = 75,M_NCALLOUT = 76,M_WS = 77,M_TGEC = 78,M_HWINTR = 79,M_SIGACT = 80,M_THREADLOCK = 81,M_HEADER = 82,M_HTABLE = 83,M_ATABLE = 84,M_RIGHTS = 85,M_CONTROL = 86,M_OOBDATA = 87,M_DNA = 88,M_WAN = 89,M_X25 = 90,M_CTF = 91,M_SEC_COMM = 92,M_MBATTR = 93,M_DLI = 94,M_VMSWAP = 95,M_IORSRC = 96,M_SEC = 97,M_PCI = 98,M_HAL = 99,M_INIT = 100,M_LMF = 101,M_CDFS = 102,M_IO = 103,M_NET = 104,M_LAT = 105,M_LVM = 106,M_NFS = 107,M_KERN = 108,M_DQUOT = 109,M_UFS = 110,M_SUPERBLK = 111,M_KEVM = 112,M_METADATA = 113,M_PPP = 114,M_CLUA = 115,M_TCNTL = 116,M_TCFLOW = 117,M_TCFILT = 118,M_SAR = 119,M_VMKANON = 120,M_DT = 121,M_NXM = 122,M_KCH = 123,M_CFS_GENERAL = 124,M_CFS_SERVER = 125,M_CFS_CLIENT = 126,M_CFS_SVRTOK = 127,M_CFS_CLITOK = 128,M_CFS_ACCESS = 129,M_CFS_BLKRSRV = 130,M_ICS_HL = 131,M_ICS_LL = 132,M_CMS = 133,M_IFNET = 134,M_PFILT = 135,M_DYNCFG = 136,M_USB = 137,M_ICS_LLMCT = 138,M_CLSM = 139,M_UBC = 140,M_RDG = 141,M_ICSNET = 142,M_LAST = 143,M_LAST_KL_COMP = 175,};
enum MACRO_M_IGNOREEND {M_IGNOREEND = 0x1000,};
enum MACRO_M_NO {M_NO_ERROR = 0x0,M_MON_ERROR = 0x1,M_DUPLICATE_MON = 0x2,M_DUPLICATE_ADDR = 0x3,};
enum MACRO_M_RDONLY {M_RDONLY = 0x1,M_SYNCHRONOUS = 0x2,M_NOEXEC = 0x4,M_NOSUID = 0x8,M_NODEV = 0x10,M_DIRECTIO = 0x20,M_NOATIMES = 0x40,M_SMSYNC2 = 0x80,M_EXPORTED = 0x100,M_EXRDONLY = 0x200,M_MLSD = 0x400,};
enum MACRO_M_USERBITS {M_USERBITS = 0x1F,M_WANYINT = 0xC00,};
enum MACRO_M_V0 {M_V0 = 0x1,M_T0 = 0x2,M_T1 = 0x4,M_T2 = 0x8,M_T3 = 0x10,M_T4 = 0x20,M_T5 = 0x40,M_T6 = 0x80,M_T7 = 0x100,M_S0 = 0x200,M_S1 = 0x400,M_S2 = 0x800,M_S3 = 0x1000,M_S4 = 0x2000,M_S5 = 0x4000,M_S6 = 0x8000,M_A0 = 0x10000,M_A1 = 0x20000,M_A2 = 0x40000,M_A3 = 0x80000,M_A4 = 0x100000,M_A5 = 0x200000,M_T8 = 0x400000,M_T9 = 0x800000,M_T10 = 0x1000000,M_T11 = 0x2000000,M_RA = 0x4000000,M_T12 = 0x8000000,M_AT = 0x10000000,M_GP = 0x20000000,M_SP = 0x40000000,M_EXCFRM = 0x80000000,};
enum MACRO_MappingModifier {MappingModifier = 0,MappingKeyboard = 1,MappingPointer = 2,};
enum MACRO_MappingSuccess {MappingSuccess = 0,MappingBusy = 1,MappingFailed = 2,};
enum MACRO_ModeBitsShift {ModeBitsShift = 6,numInputClasses = 7,IEVENTS = 15,};
enum MACRO_MultibufferBadBuffer {MultibufferBadBuffer = 0,MultibufferNumberErrors = 1,};
enum MACRO_MultibufferBufferEventMask {MultibufferBufferEventMask = 1,};
enum MACRO_MultibufferClobberNotify {MultibufferClobberNotify = 0,MultibufferUpdateNotify = 1,MultibufferNumberEvents = 2,};
enum MACRO_MultibufferModeMono {MultibufferModeMono = 0,MultibufferModeStereo = 1,};
enum MACRO_MultibufferSideMono {MultibufferSideMono = 0,MultibufferSideLeft = 1,MultibufferSideRight = 2,};
enum MACRO_MultibufferUnclobbered {MultibufferUnclobbered = 0,MultibufferPartiallyClobbered = 1,MultibufferFullyClobbered = 2,MultibufferClobberNotifyMask = 33554432,MultibufferUpdateNotifyMask = 67108864,};
enum MACRO_MultibufferUpdateActionUndefined {MultibufferUpdateActionUndefined = 0,MultibufferUpdateActionBackground = 1,MultibufferUpdateActionUntouched = 2,MultibufferUpdateActionCopied = 3,};
enum MACRO_MultibufferUpdateHintFrequent {MultibufferUpdateHintFrequent = 0,MultibufferUpdateHintIntermittent = 1,MultibufferUpdateHintStatic = 2,};
enum MACRO_MultibufferWindowUpdateHint {MultibufferWindowUpdateHint = 1,};
enum MACRO_N {N_UNDF = 0x0,};
enum MACRO_NAK {NAK = 0x15,INIT_ALL = 0x20,DEVICE_PRESENT = 0x24,THRESHSMOOTH = 0x51,LEDS = 0x75,};
enum MACRO_NAME {NAME_MAX = 255,};
enum MACRO_NAMESERVER {NAMESERVER_PORT = 53,};
enum MACRO_NAME_SIZE {NAME_SIZE = 12,TTY_SIZE = 16,};
enum MACRO_NBBY {NBBY = 8,MAX_NOFILE = 4096,};
enum MACRO_NBRA {NBRA = 9,};
enum MACRO_NCC {NCC = 8,};
enum MACRO_NCHNAMLEN {NCHNAMLEN = 31,};
enum MACRO_ND {ND_MAXNODE = 6,ND_VOLATILE = 0,};
enum MACRO_NDADDR {NDADDR = 12,};
enum MACRO_NDDATA {NDDATA = 5,};
enum MACRO_NDEPTHS {NDEPTHS = 1,};
enum MACRO_NDPROTO {NDPROTO = 0,ICMPPROTO = 1,UDPPROTO = 2,TCPPROTO = 3,ARPPROTO = 4,OTHERPROTO = 5,NBUCKETS = 16,MINPACKETLEN = 60,MAXPACKETLEN = 1514,};
enum MACRO_ND_PERMANENT {ND_PERMANENT = 1,};
enum MACRO_ND_VERSION {ND_VERSION = 1,};
enum MACRO_NEGb {NEGb = 0x40,ESCAPEb = 0x80,};
enum MACRO_NET {NET_CFG_VMAC = 100,};
enum MACRO_NETDB {NETDB_INTERNAL = -1,NETDB_SUCCESS = 0,};
enum MACRO_NETISR {NETISR_WILD = 0,NETISR_OTHER = 1,NETISR_ARP = 2,NETISR_IP = 3,NETISR_RTMSG = 4,NETISR_ISO = 5,NETISR_MB = 6,NETISR_STREAMS = 7,NETISR_ATMRTUPT = 8,NETISR_STRWELD = 9,NETISR_PFFAST = 10,NETISR_PFSLOW = 11,NETISR_IFSLOW = 12,NETISR_ARPTMO = 13,NETISR_EVL = 14,NETISR_DLO = 15,NETISR_DN = 16,NETISR_DLI = 17,NETISR_LAT = 18,NETISR_WDD = 19,NETISR_NFSTMO = 20,NETISR_SRTMO = 21,NETISR_X25 = 22,NETISR_HDLC = 23,NETISR_CTF = 24,NETISR_AAL = 25,NETISR_IPV6 = 26,NETISR_NETRAIN = 27,NETISR_NETDEV = 28,NETISR_MAX = 40,};
enum MACRO_NEW {NEW_WA_ATTRS = 0x3F,OLD_VID_ATTRS = 0x1FF0000,};
enum MACRO_NEW_ENV {NEW_ENV_VAR = 0,NEW_ENV_VALUE = 1,ENV_ESC = 2,ENV_USERVAR = 3,};
enum MACRO_NEW_I {NEW_I = 0x20,NEW_S = 0x8,NEW_A = 0x4,NEW_W = 0x2,NEW_U = 0x1,};
enum MACRO_NEXT {NEXT_N_TYPES_ARE_SAME_AS_NTH_TYPE_TOKEN = 78,};
enum MACRO_NEXT2 {NEXT_IS_NODE = 78,NEXT_IS_RESULT = 82,};
enum MACRO_NFP {NFP_REGS = 32,};
enum MACRO_NFPREGS {NFPREGS = 32,};
enum MACRO_NFS {NFS_FHSIZE = 32,};
enum MACRO_NFS3 {NFS3_MAXUDPSIZE = 49152,};
enum MACRO_NFS3_CREATEVERFSIZE {NFS3_CREATEVERFSIZE = 8,};
enum MACRO_NFS3_FHSIZE {NFS3_FHSIZE = 64,NFS3_COOKIEVERFSIZE = 8,};
enum MACRO_NFS3_WRITEVERFSIZE {NFS3_WRITEVERFSIZE = 8,};
enum MACRO_NFSMNT {NFSMNT_SOFT = 0x1,NFSMNT_WSIZE = 0x2,NFSMNT_RSIZE = 0x4,NFSMNT_TIMEO = 0x8,NFSMNT_RETRANS = 0x10,NFSMNT_HOSTNAME = 0x20,NFSMNT_INT = 0x40,NFSMNT_NOCONN = 0x80,NFSMNT_NOAC = 0x100,NFSMNT_ACREGMIN = 0x200,NFSMNT_ACREGMAX = 0x400,NFSMNT_ACDIRMIN = 0x800,NFSMNT_ACDIRMAX = 0x1000,NFSMNT_NOCTO = 0x2000,NFSMNT_POSIX = 0x4000,NFSMNT_AUTO = 0x8000,NFSMNT_SEC = 0x10000,NFSMNT_TCP = 0x20000,NFSMNT_PROPLIST = 0x40000,NFSMNT_CLUSTER = 0x80000,NFSMNT_MAXTIMO = 0x100000,};
enum MACRO_NFSPROC3 {NFSPROC3_NULL = 0,NFSPROC3_GETATTR = 1,NFSPROC3_SETATTR = 2,NFSPROC3_LOOKUP = 3,NFSPROC3_ACCESS = 4,NFSPROC3_READLINK = 5,NFSPROC3_READ = 6,NFSPROC3_WRITE = 7,NFSPROC3_CREATE = 8,NFSPROC3_MKDIR = 9,NFSPROC3_SYMLINK = 10,NFSPROC3_MKNOD = 11,NFSPROC3_REMOVE = 12,NFSPROC3_RMDIR = 13,NFSPROC3_RENAME = 14,NFSPROC3_LINK = 15,NFSPROC3_READDIR = 16,NFSPROC3_READDIRPLUS = 17,NFSPROC3_FSSTAT = 18,NFSPROC3_FSINFO = 19,NFSPROC3_PATHCONF = 20,NFSPROC3_COMMIT = 21,};
enum MACRO_NFS_CALLTYPES {NFS_CALLTYPES = 3,ENFS_TRYAGAIN = 999,};
enum MACRO_NFS_FIFO {NFS_FIFO_MODE = 8192,NFS_FIFO_DEV = -1,};
enum MACRO_NFS_MAXASYNCDAEMON {NFS_MAXASYNCDAEMON = 64,};
enum MACRO_NFS_MAXPATHLEN {NFS_MAXPATHLEN = 1024,NFS_FABLKSIZE = 512,};
enum MACRO_NFS_MAXREADDIR {NFS_MAXREADDIR = 8192,NFS_MAXNAMLEN = 255,};
enum MACRO_NFS_MAXTIMO {NFS_MAXTIMO = 20,MAXNFSDS = 128,};
enum MACRO_NFS_PROGRAM {NFS_PROGRAM = 100003,};
enum MACRO_NFS_TIMEO {NFS_TIMEO = 11,NFS_RETRIES = 4,};
enum MACRO_NFS_V3 {NFS_V3 = 3,};
enum MACRO_NFS_VERSION {NFS_VERSION = 2,NFS_PORT = 2049,NFS_MAXDATA = 8192,NFS3_MAXDATA = 65536,};
enum MACRO_NFS_VERSMIN {NFS_VERSMIN = 2,NFS_VERSMAX = 3,};
enum MACRO_NGROUPS {NGROUPS_MAX = 32,SSIZE_MAX = -1,};
enum MACRO_NGROUPS_0 {NGROUPS = 32,MAXHOSTNAMELEN = 256,NOGROUP = 65535,};
enum MACRO_NGRPS {NGRPS = 32,};
enum MACRO_NI {NI_DGRAM = 0x1,NI_NAMEREQD = 0x2,NI_NOFQDN = 0x4,NI_NUMERICHOST = 0x8,NI_NUMERICSERV = 0x10,NI_MAXHOST = 0x401,};
enum MACRO_NIADDR {NIADDR = 3,};
enum MACRO_NICFREE {NICFREE = 178,};
enum MACRO_NICINOD {NICINOD = 100,};
enum MACRO_NIS {NIS_NUM = 5,};
enum MACRO_NISAPS {NISAPS = 128,};
enum MACRO_NI_MAXSERV {NI_MAXSERV = 32,};
enum MACRO_NL {NL_CAT_LOCALE = 1,};
enum MACRO_NL0 {NL0 = 0x0,NL1 = 0x100,NL2 = 0x200,NL3 = 0x300,TABDLY = 0xC00,};
enum MACRO_NLIMITS {NLIMITS = 6,};
enum MACRO_NLINES {NLINES = 56,};
enum MACRO_NLTBMAX {NLTBMAX = 64,};
enum MACRO_NL_ARGMAX {NL_ARGMAX = 9,NL_MSGMAX = 65535,};
enum MACRO_NL_CAT {NL_CAT_MSGID = 2,};
enum MACRO_NL_MAXOPEN {NL_MAXOPEN = 10,};
enum MACRO_NL_NMAX {NL_NMAX = 10,LONG_BIT = 64,};
enum MACRO_NL_SETD {NL_SETD = 1,};
enum MACRO_NL_SETMAX {NL_SETMAX = 65535,};
enum MACRO_NL_TEXTMAX {NL_TEXTMAX = 8192,};
enum MACRO_NM {NM_TOOLVER = 0,};
enum MACRO_NMOUNT {NMOUNT = 128,};
enum MACRO_NNETISR {NNETISR = 40,};
enum MACRO_NO {NO_ACC = 0x0,EFF_ONLY_OK = 0x8,};
enum MACRO_NO2 {NO_HIGHLIGHT = -1,};
enum MACRO_NOCLOSE {NOCLOSE = 0,BADINDEX = -1,};
enum MACRO_NOFILE {NOFILE = 64,MIN_FREE_VNODES = 150,};
enum MACRO_NOGID {NOGID = -1,};
enum MACRO_NOLINE {NOLINE = 30000,PASTENDPOS = 2147483647,};
enum MACRO_NOMSYM {NOMSYM = 0,};
enum MACRO_NON {NON_REENTRANT = 0,};
enum MACRO_NONE {NONE = 0,BITONE = 1,CONTONE = 2,RGB = 3,YIQ = 4,HSV = 5,LANDSAT = 6,};
enum MACRO_NONTYPE {NONTYPE_TEMPLATE_TOKEN = 90,};
enum MACRO_NOSYNC {NOSYNC = 0,};
enum MACRO_NOT {NOT_HERE = 1,FAILED = 2,MACHINE_UNKNOWN = 3,PERMISSION_DENIED = 4,UNKNOWN_REQUEST = 5,BADVERSION = 6,BADADDR = 7,BADCTLADDR = 8,MAX_LIFE = 60,};
enum MACRO_NOTIME {NOTIME = 0,};
enum MACRO_NOT_SUPPORTED {NOT_SUPPORTED = 0x0,INFO_RETURNED = 0x1,};
enum MACRO_NOT_USED {NOT_USED = 0,};
enum MACRO_NOUID {NOUID = -1,};
enum MACRO_NO_0 {NO = 0,};
enum MACRO_NO_ACCESS {NO_ACCESS = -13,};
enum MACRO_NO_ADDRESS {NO_ADDRESS = 4,};
enum MACRO_NO_ERROR {NO_ERROR = 0,SOFT_ERROR = 1,HARD_ERROR = 2,FATAL_ERROR = 3,ATTN_ERROR = 4,};
enum MACRO_NO_GCS {NO_GCS = 0,FOREGROUND = 1,HIGHLIGHT = 2,ALL_GCS = 3,};
enum MACRO_NPOLLFILE {NPOLLFILE = 20,};
enum MACRO_NPROTOS {NPROTOS = 6,};
enum MACRO_NPRUHASH {NPRUHASH = 8,};
enum MACRO_NPTYL {NPTYL = 5,};
enum MACRO_NS {NS_PACKETSZ = 512,NS_MAXDNAME = 1025,};
enum MACRO_NSEC {NSEC_PER_USEC = 1000,NSEC_PER_SEC = 1000000000,};
enum MACRO_NSIGBUS {NSIGBUS = 3,};
enum MACRO_NSIGCLD {NSIGCLD = 7,};
enum MACRO_NSIGFPE {NSIGFPE = 8,};
enum MACRO_NSIGILL {NSIGILL = 8,};
enum MACRO_NSIGPOLL {NSIGPOLL = 6,};
enum MACRO_NSIGSEGV {NSIGSEGV = 3,};
enum MACRO_NSIGTRAP {NSIGTRAP = 2,};
enum MACRO_NSLC {NSLC = 18,};
enum MACRO_NSP {NSP_IN_ABORT = 0x1,NSP_RAWIN = 0x2,NSP_RAWOUT = 0x4,NSP_ALL_PACKETS = 0x8,};
enum MACRO_NSPARE {NSPARE = 5,};
enum MACRO_NSPEEDS {NSPEEDS = 16,};
enum MACRO_NSPORT {NSPORT_RI = 1,NSPORT_ECHO = 2,NSPORT_RE = 3,NSPORT_RESERVED = 3000,};
enum MACRO_NSPROTO {NSPROTO_RI = 1,NSPROTO_ECHO = 2,NSPROTO_ERROR = 3,NSPROTO_PE = 4,NSPROTO_SPP = 5,NSPROTO_RAW = 255,NSPROTO_MAX = 256,};
enum MACRO_NSRCVQ {NSRCVQ = 2048,};
enum MACRO_NSSNDQ {NSSNDQ = 2048,};
enum MACRO_NS_ALG {NS_ALG_EXPIRE_ONLY = 253,NS_ALG_PRIVATE_OID = 254,NS_MD5RSA_MIN_BITS = 512,NS_MD5RSA_MAX_BITS = 2552,NS_MD5RSA_MAX_BYTES = 5107,NS_MD5RSA_MAX_BASE64 = 6812,};
enum MACRO_NS_CONFIG {NS_CONFIG_VERSION_1 = 0x2091590,NS_DEFAULT_VALUE = 0xFFFFCFC7,};
enum MACRO_NS_DEFAULTPORT {NS_DEFAULTPORT = 53,};
enum MACRO_NS_ERR {NS_ERR_UNSPEC = 0,NS_ERR_BADSUM = 1,NS_ERR_NOSOCK = 2,NS_ERR_FULLUP = 3,NS_ERR_UNSPEC_T = 512,NS_ERR_BADSUM_T = 513,NS_ERR_UNREACH_HOST = 514,NS_ERR_TOO_OLD = 515,NS_ERR_TOO_BIG = 516,};
enum MACRO_NS_ERR_MAX {NS_ERR_MAX = 20,};
enum MACRO_NS_FORWARDING {NS_FORWARDING = 0x1,NS_ROUTETOIF = 0x10,NS_ALLOWBROADCAST = 0x20,};
enum MACRO_NS_HFIXEDSZ {NS_HFIXEDSZ = 12,};
enum MACRO_NS_INADDRSZ {NS_INADDRSZ = 4,NS_IN6ADDRSZ = 16,NS_CMPRSFLGS = 192,};
enum MACRO_NS_INT32SZ {NS_INT32SZ = 4,NS_INT16SZ = 2,NS_INT8SZ = 1,};
enum MACRO_NS_KEY {NS_KEY_TYPEMASK = 0xC000,NS_KEY_TYPE_AUTH_CONF = 0x0,};
enum MACRO_NS_KEY_NO {NS_KEY_NO_AUTH = 0x8000,NS_KEY_NO_CONF = 0x4000,NS_KEY_EXPERIMENTAL = 0x2000,NS_KEY_RESERVED3 = 0x1000,NS_KEY_RESERVED4 = 0x800,NS_KEY_USERACCOUNT = 0x400,NS_KEY_ENTITY = 0x200,NS_KEY_ZONEKEY = 0x100,NS_KEY_IPSEC = 0x80,NS_KEY_EMAIL = 0x40,NS_KEY_RESERVED10 = 0x20,NS_KEY_RESERVED11 = 0x10,NS_KEY_SIGNATORYMASK = 0xF,};
enum MACRO_NS_KEY_RESERVED {NS_KEY_RESERVED_BITMASK = 6192,NS_ALG_MD5RSA = 1,};
enum MACRO_NS_KEY_TYPE {NS_KEY_TYPE_CONF_ONLY = 0x8000,NS_KEY_TYPE_AUTH_ONLY = 0x4000,};
enum MACRO_NS_KEY_TYPE_NO {NS_KEY_TYPE_NO_KEY = 0xC000,};
enum MACRO_NS_MAXCDNAME {NS_MAXCDNAME = 255,};
enum MACRO_NS_MAXHOPS {NS_MAXHOPS = 15,};
enum MACRO_NS_MAXLABEL {NS_MAXLABEL = 63,};
enum MACRO_NS_NXT {NS_NXT_BITS = 8,};
enum MACRO_NS_QFIXEDSZ {NS_QFIXEDSZ = 4,NS_RRFIXEDSZ = 10,};
enum MACRO_NS_SIG {NS_SIG_TYPE = 0,NS_SIG_ALG = 2,NS_SIG_LABELS = 3,NS_SIG_OTTL = 4,NS_SIG_EXPIR = 8,NS_SIG_SIGNED = 12,NS_SIG_FOOT = 16,NS_SIG_SIGNER = 18,};
enum MACRO_NS_USEVALUE {NS_USEVALUE = 0x1,NS_USEDEFAULTS = 0x2,};
enum MACRO_NS_WILDCARD {NS_WILDCARD = 1,};
enum MACRO_NTBS {NTBS = 16,TBMAXREC = 17,};
enum MACRO_NTELOPTS {NTELOPTS = 46,};
enum MACRO_NTH {NTH_TYPE_TOKEN = 84,};
enum MACRO_NTRACKS {NTRACKS = 1,};
enum MACRO_NTREC {NTREC = 10,HIGHDENSITYTREC = 32,TP_NINDIR = 512,};
enum MACRO_NULL {NULL = 0,TRUE = 1,};
enum MACRO_NULLPROC {NULLPROC = 0,FEEDBACK_REXMIT1 = 1,FEEDBACK_OK = 2,UDPMSGSIZE = 8800,};
enum MACRO_NULLQUARK {NULLQUARK = 0,};
enum MACRO_NULLSTRING {NULLSTRING = 0,};
enum MACRO_NULL_DEVICE {NULL_DEVICE = 0,MOUSE_DEVICE = 1,KEYBOARD_DEVICE = 2,TABLET_DEVICE = 3,TOUCHSCREEN_DEVICE = 4,CONSOLE_DEVICE = 5,BUTTONBOX_DEVICE = 6,BARCODE_DEVICE = 7,KNOBBOX_DEVICE = 8,JOYSTICK_DEVICE = 9,TRACKBALL_DEVICE = 10,QUADRATURE_DEVICE = 11,SPACEBALL_DEVICE = 12,DATAGLOVE_DEVICE = 13,EYETRACKER_DEVICE = 14,CURSORKEYS_DEVICE = 15,FOOTMOUSE_DEVICE = 16,ID_MODULE_DEVICE = 17,ONE_KNOB_DEVICE = 18,NINE_KNOB_DEVICE = 19,STABLET_DEVICE = 20,};
enum MACRO_NULL_TOOLVER {NULL_TOOLVER = -1,};
enum MACRO_NULL_xdrproc {NULL_xdrproc_t = 0,};
enum MACRO_NUM {NUM_ATTRIBUTES = 9,WNUM_ATTRIBUTES = 15,};
enum MACRO_NUM2 {NUM_COLORS = 8,};
enum MACRO_NUMB {NUMB_IR_CHARS = 4,};
enum MACRO_NUMBER {NUMBER_OF_BASIC_TYPES = 20,};
enum MACRO_NUMBER_OF {NUMBER_OF_BASIC3_TYPES = 2,};
enum MACRO_NUMBER_OF_BASIC {NUMBER_OF_BASIC_OPERATORS = 42,};
enum MACRO_NUMBER_OF_TYPE {NUMBER_OF_TYPE_MODIFIERS = 4,CONST_TOKEN = 67,SIGNED_TOKEN = 83,UNSIGNED_TOKEN = 85,VOLATILE_TOKEN = 86,UNALIGNED_TOKEN = 98,};
enum MACRO_NUMBER_SP {NUMBER_SP_ATTRS = 3,};
enum MACRO_NUMSYSCALLARGS {NUMSYSCALLARGS = 6,MAXCOMPATNAMSZ = 16,};
enum MACRO_NUM_TAG {NUM_TAG_TYPES = 25,ACL_UNDEFINED_TAG = 26,};
enum MACRO_NUM_TM {NUM_TM_ENUM = 10,};
enum MACRO_NVABITS {NVABITS = 43,SEG1_BASE = -512,};
enum MACRO_NVISUALS {NVISUALS = 1,};
enum MACRO_NVRAM {NVRAM_BAD = 0,NVRAM_RDWR = 1,NVRAM_RDONLY = 2,BATTCNT = 4,};
enum MACRO_NXM {NXM_SCHED_ANY = -1,};
enum MACRO_NXM_ACTION {NXM_ACTION_NONE = 0,NXM_ACTION_SIGNAL = 1,NXM_ACTION_SIGEV = 2,NXM_ACTION_SIGFORCE = 3,NXM_ACTION_PSET_ADJUST = 4,};
enum MACRO_NXM_BLOCK {NXM_BLOCK_FAULT = 0x1,NXM_BLOCK_SYSCALL = 0x2,NXM_BLOCKED_PENDING = 0x4,};
enum MACRO_NXM_KILL {NXM_KILL_UNBOUND = 0x1,NXM_KILL_BOUND = 0x2,};
enum MACRO_NXM_QUANTUM {NXM_QUANTUM_EXPIRE = 1,NXM_SCHED_THREAD_UT_BLOCKED = 2,NXM_THREAD_UNBLOCK_NO_SID = 3,NXM_SIGNAL_BLOCKED = 4,NXM_SPECULATIVE_EXECUTION = 5,NXM_THREAD_INTERRUPTED = 6,NXM_VP_RESCHED = 7,NXM_GENTRAP_HANDLER = 8,NXM_STACK_OVERFLOW = 9,NXM_FB_FIXUP = 10,NXM_VP_UNBOUND = 11,_thread_self = 13,_thread_destroy = 29,_task_init = 33,_idle = 35,_wakeup_idle = 36,_set_pthid = 37,_thread_kill = 38,_thread_block = 39,_thread_wakeup = 40,_get_binding = 42,_resched = 44,_set_cancel = 45,_set_binding = 46,_stack_create = 47,_get_state = 48,_signal_check = 51,_pshared_init = 63,_pshared_block = 64,_pshared_unblock = 65,_pshared_destroy = 66,_switch_pri = 67,};
enum MACRO_NXM_SHARED {NXM_SHARED_SAVED = 0x1,NXM_FAST_RESTORE = 0x2,NXM_FP_ACTIVE = 0x4,NXM_UPCALL_FRAME = 0x10,NXM_STACK_UNBLOCK = 0x20,};
enum MACRO_NXM_SIGNAL {NXM_SIGNAL_EXPLICIT = 0x0,NXM_SIGNAL_INHERIT = 0x1,};
enum MACRO_NXM_SUSPEND {NXM_SUSPEND_COUNT = 0x2,NXM_SUSPEND_FORCE = 0x4,};
enum MACRO_NXM_TASK {NXM_TASK_INIT_SCS = 0x1,NXM_TASK_INIT_VP = 0x2,};
enum MACRO_NXM_THREAD {NXM_THREAD_STACK = 0x7ABAFAFA,NXM_SUSPEND_NOCOUNT = 0x1,};
enum MACRO_NXM_TYPE {NXM_TYPE_SCS = 0x0,NXM_TYPE_VP = 0x1,NXM_TYPE_MANAGER = 0x2,};
enum MACRO_NXM_VERSION {NXM_VERSION = 300001,NXM_THREAD_CANCEL = 2063252154,};
enum MACRO_NZERO {NZERO = 20,ATEXIT_MAX = 2048,};
enum MACRO_N_GSYM {N_GSYM = 0x20,N_FNAME = 0x22,N_FUN = 0x24,N_STSYM = 0x26,N_LCSYM = 0x28,N_RSYM = 0x40,N_SLINE = 0x44,N_SSYM = 0x60,N_SO = 0x64,N_LSYM = 0x80,N_SOL = 0x84,N_PSYM = 0xA0,N_ENTRY = 0xA4,N_LBRAC = 0xC0,N_RBRAC = 0xE0,N_BCOMM = 0xE2,N_ECOMM = 0xE4,N_ECOML = 0xE8,N_LENG = 0xFE,};
enum MACRO_N_PC {N_PC = 0x30,};
enum MACRO_N_RMASK {N_RMASK = 0xC4,N_VFP = 0xD4,};
enum MACRO_N_TRUSTED {N_TRUSTED_EVENTS = 64,MIN_SITE_EVENT = 2048,};
enum MACRO_NeedFunctionPrototypes {NeedFunctionPrototypes = 1,};
enum MACRO_NeedNestedPrototypes {NeedNestedPrototypes = 1,};
enum MACRO_NeedVarargsPrototypes {NeedVarargsPrototypes = 1,};
enum MACRO_NeedWidePrototypes {NeedWidePrototypes = 1,};
enum MACRO_NewPointer {NewPointer = 0,NewKeyboard = 1,};
enum MACRO_NoEventMask {NoEventMask = 0,KeyPressMask = 1,KeyReleaseMask = 2,ButtonPressMask = 4,ButtonReleaseMask = 8,EnterWindowMask = 16,LeaveWindowMask = 32,PointerMotionMask = 64,PointerMotionHintMask = 128,Button1MotionMask = 256,Button2MotionMask = 512,Button3MotionMask = 1024,Button4MotionMask = 2048,Button5MotionMask = 4096,ButtonMotionMask = 8192,KeymapStateMask = 16384,ExposureMask = 32768,VisibilityChangeMask = 65536,StructureNotifyMask = 131072,ResizeRedirectMask = 262144,SubstructureNotifyMask = 524288,SubstructureRedirectMask = 1048576,FocusChangeMask = 2097152,PropertyChangeMask = 4194304,ColormapChangeMask = 8388608,OwnerGrabButtonMask = 16777216,};
enum MACRO_NoSuchExtension {NoSuchExtension = 1,};
enum MACRO_NoSymbol {NoSymbol = 0,};
enum MACRO_NoValue {NoValue = 0x0,XValue = 0x1,YValue = 0x2,WidthValue = 0x4,HeightValue = 0x8,AllValues = 0xF,XNegative = 0x10,YNegative = 0x20,};
enum MACRO_None {None = 0,ParentRelative = 1,};
enum MACRO_NotUseful {NotUseful = 0,WhenMapped = 1,Always = 2,};
enum MACRO_NotifyAncestor {NotifyAncestor = 0,NotifyVirtual = 1,NotifyInferior = 2,NotifyNonlinear = 3,NotifyNonlinearVirtual = 4,NotifyPointer = 5,NotifyPointerRoot = 6,NotifyDetailNone = 7,};
enum MACRO_NotifyHint {NotifyHint = 1,};
enum MACRO_NotifyNormal {NotifyNormal = 0,NotifyGrab = 1,NotifyUngrab = 2,NotifyWhileGrabbed = 3,};
enum MACRO_O {O_NONBLOCK = 0x4,O_APPEND = 0x8,};
enum MACRO_OB {OB_MAXNAME = 16,OB_MAXUSER = 20,};
enum MACRO_OBJ {OBJ_CONTINUE = -1,};
enum MACRO_OBJ_FAIL {OBJ_FAIL = -1,};
enum MACRO_ODUMP {ODUMP_TOOLVER = 0,};
enum MACRO_OF {OF_NONE = 0x0,OF_MAPPED = 0x1,OF_MODIFIED = 0x2,OF_TSTMPCHG = 0x4,OF_CHKSUMCHG = 0x8,OF_MOVED = 0x10,OF_POSTTST = 0x20,OF_POSTCSUM = 0x40,OF_POSTMOVED = 0x80,FOREIGN_OBJ = 0xFFFFFFFF,};
enum MACRO_OFF {OFF = 0,ON = 1,PIDS = 2,UIDS = 4,SYSC = 8,PGRP = 16,ALL = 32768,GET = 1073741824,SET = -2147483648,};
enum MACRO_OF_DEFER {OF_DEFER = 0x1,OF_STREAM = 0x2,OB_MAXFILE = 0x80,};
enum MACRO_OK {OK = 0,_CSMAX = 4,};
enum MACRO_OKAY {OKAY = 0,};
enum MACRO_OKFSEEK {OKFSEEK = 0,};
enum MACRO_OLD {OLD_ENV_VAR = 1,OLD_ENV_VALUE = 0,};
enum MACRO_OM {OM_READ = 1,OM_EXECUTE = 2,OM_WRITE = 3,};
enum MACRO_OMAGIC {OMAGIC = 0x107,NMAGIC = 0x108,ZMAGIC = 0x10B,};
enum MACRO_OM_TOOLVER {OM_TOOLVER = 0,};
enum MACRO_ONLCRNL {ONLCRNL = 2,OXTABS = 262144,ONOEOT = 524288,};
enum MACRO_ONSIG {ONSIG = 32,};
enum MACRO_OPEN {OPEN_MAX_SYSTEM = 4096,};
enum MACRO_OPENMSG {OPENMSG = 1,CLOSEMSG = 2,STATEMSG = 3,IOCTLMSG = 4,WRITEMSG = 5,CCMSG = 6,ATTACHMSG = 7,OPENREPLY = 50,CLOSEREPLY = 51,IOCTLREPLY = 52,IOCTLDATA = 75,READDATA = 76,};
enum MACRO_OPEN_MAX {OPEN_MAX_HARD = 4096,};
enum MACRO_OPEN_MAX_SOFT {OPEN_MAX_SOFT = 4096,};
enum MACRO_OPOST {OPOST = 0x1,ONLCR = 0x2,OLCUC = 0x4,OCRNL = 0x8,ONOCR = 0x10,ONLRET = 0x20,OFILL = 0x40,OFDEL = 0x80,NLDLY = 0x300,};
enum MACRO_OPROCESSOR {OPROCESSOR_BASIC_INFO = 1,};
enum MACRO_OPROCESSOR_SET {OPROCESSOR_SET_BASIC_INFO = 1,PROCESSOR_SET_BASIC_INFO = 3,PROCESSOR_SET_BASIC_INFO_MASK_SZ = 64,LOAD_SCALE = 1000,};
enum MACRO_OPT {OPT_DONT_FORCE = 1,OPT_FORCE = 2,OPT_EXTERNAL = 4,};
enum MACRO_ORDINARY {ORDINARY = 0,CONTROL = 1,BACKSPACE = 2,NEWLINE = 3,TAB = 4,VTAB = 5,RETURN = 6,FF = 7,TTY_CHARMASK = 255,TTY_QUOTE = 256,TTY_ERRORMASK = -16777216,};
enum MACRO_OSCNRND {OSCNRND = 8,};
enum MACRO_OSF1 {OSF1_HAB_NO = 0x0,};
enum MACRO_OSFC2 {OSFC2_NUM = 4,};
enum MACRO_OSTRIP {OSTRIP_TOOLVER = 0,};
enum MACRO_OT {OT_NONE = 1,OT_MIPS_COFF = 2,OT_MIPS_ELF = 3,};
enum MACRO_OTHER {OTHER_PFN = -256,};
enum MACRO_OTTYDISC {OTTYDISC = 0x0,NETLDISC = 0x1,NTTYDISC = 0x2,NTABLDISC = 0x4,HCLDISC = 0x5,TERMIODISC = 0x6,SLPDISC = 0x7,PCMDISC = 0x8,REXPROG = 0x186B1,};
enum MACRO_OTYP {OTYP_MNT = 0x10000000,OTYP_BLK = 0x6000,};
enum MACRO_OTYP_CHAR {OTYP_CHAR = 8192,OTYP_LYR = 1,};
enum MACRO_OT_FILE {OT_FILE_NAME = 29,};
enum MACRO_OT_REGULAR {OT_REGULAR = 1,OT_DIRECTORY = 2,OT_DEVICE = 3,OT_PIPE = 4,OT_PROCESS = 5,OT_MEMORY = 6,OT_STREAM = 7,OT_SOCKET = 8,OT_SHARED_MEMORY = 9,OT_SEMAPHORE = 10,OT_MESSAGE_QUEUE = 11,OT_FILE_DESCR = 12,OT_SYMLINK = 13,OT_PWD = 14,OT_GRP = 15,OT_PRPWD = 16,OT_TERM_CNTL = 17,OT_FILE_CNTL = 18,OT_DFLT_CNTL = 19,OT_SUBSYS = 20,OT_DEV_ASG = 21,OT_LP_CNTL = 22,OT_WINDOW = 23,OT_OVERRIDE_WINDOW = 24,OT_PIXMAP = 25,OT_COLORMAP = 26,OT_PROPERTY = 27,OT_ATOM = 28,OT_GC = 30,OT_FONT = 32,OT_FONT_PATH = 33,OT_SELECTION = 34,OT_INPUT_FOCUS = 35,OT_CURSOR = 36,OT_HOST_ACCESS_LIST = 37,};
enum MACRO_OUT {OUT_OF_RANGE = -1,};
enum MACRO_OUTBUFFER {OUTBUFFER_SIZE = 4096,};
enum MACRO_OUTPUT {OUTPUT_PACKET = 1,SLIP_PACKET = 2,PPP_PACKET = 4,PF_NOCOPY = 8,PF_ETHER_NOLLCSNAP = 16,PF_ETHER_STRIPLLCSNAP = 32,};
enum MACRO_OV {OV_CHECK_ALL = 0,OV_CHECK_EXACT = 1,};
enum MACRO_OV_ERR {OV_ERR_INVALID_DEV = -2,};
enum MACRO_OV_ERR_FSTYPE {OV_ERR_FSTYPE_OVERLAP = 256,OV_ERR_MULT_FSTYPE_OVERLAP = 257,OV_ERR_INVALID_DSKLBL = 258,OV_ERR_ADVFS_CHECK = 259,OV_ERR_SWAP_CHECK = 260,OV_ERR_DSKLBL_UPD = 261,};
enum MACRO_OV_ERR_MAX {OV_ERR_MAX = 261,};
enum MACRO_O_ACCMODE {O_ACCMODE = 3,O_RDONLY = 0,};
enum MACRO_O_BLKINUSE {O_BLKINUSE = 2,DELAY_FLAG = 15,TS_ISUSP = 16,};
enum MACRO_O_WRONLY {O_WRONLY = 0x1,O_RDWR = 0x2,O_CREAT = 0x200,O_TRUNC = 0x400,O_EXCL = 0x800,O_NOCTTY = 0x1000,O_DRD = 0x8000,O_DIRECTIO = 0x10000,O_CACHE = 0x20000,};
enum MACRO_ObjectIndex {ObjectIndex = 0,XmRectObjIndex = 1,};
enum MACRO_Othermap {Othermap = -512,};
enum MACRO_OverrideShellIndex {OverrideShellIndex = 6,};
enum MACRO_P {P_ENT = 0,};
enum MACRO_P4 {P4 = 1,PW = 2,PVRE = 3,SONY = 4,MAT = 5,PHILLIPS = 6,HITACHI = 7,};
enum MACRO_PACKED {PACKED_MAGIC = 60012,XIX_MAGIC = 60013,CHECKSUM = 84446,};
enum MACRO_PACKETSZ {PACKETSZ = 512,MAXDNAME = 1025,};
enum MACRO_PAGE {PAGE_SIZE = 8192,PAGE_MASK = 8191,};
enum MACRO_PAGE_SHIFT {PAGE_SHIFT = 13,};
enum MACRO_PAL {PAL_clrfen = 174,};
enum MACRO_PAL_bpt {PAL_bpt = 128,PAL_bugchk = 129,PAL_chmk = 131,};
enum MACRO_PAL_callsys {PAL_callsys = 131,PAL_imb = 134,};
enum MACRO_PAL_cflush {PAL_cflush = 1,PAL_rti = 63,};
enum MACRO_PAL_cobratt {PAL_cobratt = 9,};
enum MACRO_PAL_cserve {PAL_cserve = 9,PAL_ipir = 13,};
enum MACRO_PAL_gentrap {PAL_gentrap = 170,};
enum MACRO_PAL_halt {PAL_halt = 0,PAL_draina = 2,PAL_nphalt = 190,};
enum MACRO_PAL_jtopal {PAL_jtopal = 46,};
enum MACRO_PAL_mtpr {PAL_mtpr_mces = 17,};
enum MACRO_PAL_rdmces {PAL_rdmces = 16,PAL_swppal = 10,};
enum MACRO_PAL_rdps {PAL_rdps = 54,};
enum MACRO_PAL_rduniq {PAL_rduniq = 158,PAL_wruniq = 159,};
enum MACRO_PAL_rdusp {PAL_rdusp = 58,};
enum MACRO_PAL_rdval {PAL_rdval = 50,};
enum MACRO_PAL_rtsys {PAL_rtsys = 61,};
enum MACRO_PAL_swpctx {PAL_swpctx = 48,};
enum MACRO_PAL_swpipl {PAL_swpipl = 53,};
enum MACRO_PAL_tbi {PAL_tbi = 51,};
enum MACRO_PAL_urti {PAL_urti = 146,};
enum MACRO_PAL_whami {PAL_whami = 60,};
enum MACRO_PAL_wrent {PAL_wrent = 52,};
enum MACRO_PAL_wrfen {PAL_wrfen = 43,};
enum MACRO_PAL_wrkgp {PAL_wrkgp = 55,};
enum MACRO_PAL_wrperfmon {PAL_wrperfmon = 57,};
enum MACRO_PAL_wrusp {PAL_wrusp = 56,};
enum MACRO_PAL_wrval {PAL_wrval = 49,};
enum MACRO_PAL_wrvptptr {PAL_wrvptptr = 45,};
enum MACRO_PAL_wtint {PAL_wtint = 62,};
enum MACRO_PANED {PANED_ASK_CHILD = 0,PANED_GRIP_SIZE = 0,};
enum MACRO_PANNER {PANNER_DEFAULT_SCALE = 8,PANNER_OUTOFRANGE = -30000,};
enum MACRO_PANORAMIX {PANORAMIX_MAJOR_VERSION = 1,PANORAMIX_MINOR_VERSION = 0,};
enum MACRO_PASS {PASS_MAX = 80,NL_LANGMAX = 1023,};
enum MACRO_PAllHints {PAllHints = 252,};
enum MACRO_PBIND {PBIND_QUERY = -2,};
enum MACRO_PBLKSIZ {PBLKSIZ = 1024,DBLKSIZ = 4096,};
enum MACRO_PC {PC_CLNULL = -1,};
enum MACRO_PCB {PCB_V0 = 0,PCB_T0 = 1,PCB_T1 = 2,PCB_T2 = 3,PCB_T3 = 4,PCB_T4 = 5,PCB_T5 = 6,PCB_T6 = 7,PCB_T7 = 8,PCB_S0 = 9,PCB_S1 = 10,PCB_S2 = 11,PCB_S3 = 12,PCB_S4 = 13,PCB_S5 = 14,PCB_S6 = 15,PCB_A3 = 16,PCB_A4 = 17,PCB_A5 = 18,PCB_T8 = 19,PCB_T9 = 20,PCB_T10 = 21,PCB_T11 = 22,PCB_RA = 23,PCB_T12 = 24,PCB_AT = 25,PCB_SP = 26,PCB_PS = 27,PCB_PC = 28,PCB_GP = 29,PCB_A0 = 30,PCB_A1 = 31,PCB_A2 = 32,PCB_NREGS = 33,};
enum MACRO_PCM {PCM = 0,CCITT_1 = 1,CCITT_2 = 2,CCITT_3 = 3,MODMOD = 4,};
enum MACRO_PCNTOPENMASK {PCNTOPENMASK = 0x18000,};
enum MACRO_PCNTOPENONE {PCNTOPENONE = 0x8000,PCNTOPENEACH = 0x10000,PCNTOPENALL = 0x18000,};
enum MACRO_PC_CLINFOSZ {PC_CLINFOSZ = 8,};
enum MACRO_PC_CLNMSZ {PC_CLNMSZ = 8,};
enum MACRO_PC_CLPARMSZ {PC_CLPARMSZ = 8,PC_GETCID = 1,};
enum MACRO_PC_GETCLINFO {PC_GETCLINFO = 2,PC_SETPARMS = 3,PC_GETPARMS = 4,PC_ADMIN = 5,};
enum MACRO_PDP {PDP_ENDIAN = 3412,};
enum MACRO_PDSC {PDSC_EXC_MASK = 0xB0,PDSC_EXC_SILENT = 0x0,};
enum MACRO_PDSC_CRD {PDSC_CRD_OFFSET_MASK = -4,PDSC_CRD_NO_PROLOG_MASK = 1,};
enum MACRO_PDSC_CRD_MEMORY {PDSC_CRD_MEMORY_SPECULATION_MASK = 0x2,};
enum MACRO_PDSC_DEFAULT {PDSC_DEFAULT_ENTRY_RA = 26,};
enum MACRO_PDSC_EXC {PDSC_EXC_SIGNAL = 0x10,PDSC_EXC_SIGNAL_ALL = 0x20,PDSC_EXC_IEEE = 0x30,PDSC_EXC_CALLER = 0x80,};
enum MACRO_PDSC_FLAGS {PDSC_FLAGS_SHORT = 0x1,PDSC_FLAGS_REGISTER_FRAME = 0x2,PDSC_FLAGS_BASE_REG_IS_FP = 0x4,PDSC_FLAGS_HANDLER_VALID = 0x8,PDSC_FLAGS_EXC_TYPE_1 = 0x10,PDSC_FLAGS_EXC_TYPE_2 = 0x20,PDSC_FLAGS_EXCEPTION_FRAME = 0x40,PDSC_FLAGS_EXC_TYPE_3 = 0x80,PDSC_FLAGS_ARITHMETIC_SPECULATION = 0x100,PDSC_FLAGS_RESERVED2 = 0x200,PDSC_FLAGS_EXTENDER = 0x400,};
enum MACRO_PDSC_INST {PDSC_INST_OFFSET_SHIFT = 2,PDSC_FRAME_SIZE_SHIFT = 3,PDSC_SHORT_RPD_IMASK_SHIFT = 8,};
enum MACRO_PDSC_SHORT {PDSC_SHORT_RPD_FMASK_SHIFT = 2,EXC_OSF = 268304384,};
enum MACRO_PE {PE_PGRP = 0x1,PE_SESS = 0x2,PE_BLOCKED = 0x4,PE_UNBLOCK = 0x8,};
enum MACRO_PERM {PERM_CTRL = 0x8,PERM_INSERT = 0x10,PERM_DELETE = 0x20,PERM_MODIFY = 0x40,PERM_LOOKUP = 0x80,PERM_EXTEND = 0x100,MAX_ACL_PERM = 0x1FF,};
enum MACRO_PERMMASK {PERMMASK = 0x1FF,VNOVAL = 0xFFFFFFFF,};
enum MACRO_PERSISTENCE {PERSISTENCE_STRUCT_VERSION = 0,PERSISTENCE_REQUEST_STORE = 0,};
enum MACRO_PERSISTENCE_REQUEST {PERSISTENCE_REQUEST_FETCH = 1,PERSISTENCE_REQUEST_DELETE = 2,PERSISTENCE_STRUCT_MAX_KEY_LENGTH = 64,};
enum MACRO_PEX {PEX_PROTO_MAJOR = 5,};
enum MACRO_PEXASFMarkerType {PEXASFMarkerType = 1,PEXASFMarkerScale = 2,PEXASFMarkerColor = 4,PEXASFTextFontIndex = 8,PEXASFTextPrec = 16,PEXASFCharExpansion = 32,PEXASFCharSpacing = 64,PEXASFTextColor = 128,PEXASFLineType = 256,PEXASFLineWidth = 512,PEXASFLineColor = 1024,PEXASFCurveApprox = 2048,PEXASFPolylineInterp = 4096,PEXASFInteriorStyle = 8192,PEXASFInteriorStyleIndex = 16384,PEXASFSurfaceColor = 32768,PEXASFSurfaceInterp = 65536,PEXASFReflectionModel = 131072,PEXASFReflectionAttr = 262144,PEXASFBFInteriorStyle = 524288,PEXASFBFInteriorStyleIndex = 1048576,PEXASFBFSurfaceColor = 2097152,PEXASFBFSurfaceInterp = 4194304,PEXASFBFReflectionModel = 8388608,PEXASFBFReflectionAttr = 16777216,PEXASFSurfaceApprox = 33554432,PEXASFSurfaceEdges = 67108864,PEXASFSurfaceEdgeType = 134217728,PEXASFSurfaceEdgeWidth = 268435456,PEXASFSurfaceEdgeColor = 536870912,};
enum MACRO_PEXATextNotConnected {PEXATextNotConnected = 1,PEXATextConnected = 2,};
enum MACRO_PEXAll {PEXAll = 0,PEXOrphans = 1,};
enum MACRO_PEXAlreadyFreed {PEXAlreadyFreed = 1,};
enum MACRO_PEXAnyDrawable {PEXAnyDrawable = 0,PEXWindowDrawable = 1,PEXPixmapDrawable = 2,PEXBufferDrawable = 3,};
enum MACRO_PEXApproxImpDep {PEXApproxImpDep = 1,PEXApproxConstantBetweenKnots = 2,PEXApproxWCChordalSize = 3,PEXApproxNPCChordalSize = 4,PEXApproxDCChordalSize = 5,PEXCurveApproxWCChordalDev = 6,PEXCurveApproxNPCChordalDev = 7,PEXCurveApproxDCChordalDev = 8,};
enum MACRO_PEXBadExtension {PEXBadExtension = 1,PEXBadProtocolVersion = 2,PEXBadFloatConversion = 3,PEXBadLocalAlloc = 4,PEXErrorStringLength = 80,};
enum MACRO_PEXBadVector {PEXBadVector = 1,PEXBadVectors = 2,PEXBadLimits = 3,PEXBadViewport = 4,PEXBadPlanes = 5,PEXBadPRP = 6,PEXBadMatrix = 7,PEXBadPrimitive = 8,PEXBadDistance = 9,PEXBadAxis = 10,PEXBadHomoCoord = 11,PEXBadSubVolume = 12,};
enum MACRO_PEXBeginning {PEXBeginning = 0,PEXCurrent = 1,PEXEnd = 2,};
enum MACRO_PEXBundled {PEXBundled = 0,PEXIndividual = 1,};
enum MACRO_PEXCSByte {PEXCSByte = 0,PEXCSShort = 1,PEXCSLong = 2,};
enum MACRO_PEXClip {PEXClip = 0,PEXNoClip = 1,};
enum MACRO_PEXClipXY {PEXClipXY = 1,PEXClipBack = 2,PEXClipFront = 4,PEXClippingAll = 7,};
enum MACRO_PEXColorApproxAnyValues {PEXColorApproxAnyValues = 0,PEXColorApproxPowersOf2 = 1,};
enum MACRO_PEXColorApproxRGB {PEXColorApproxRGB = 1,PEXColorApproxCIE = 2,PEXColorApproxHSV = 3,PEXColorApproxHLS = 4,PEXColorApproxYIQ = 5,};
enum MACRO_PEXColorSpace {PEXColorSpace = 1,PEXColorRange = 2,};
enum MACRO_PEXColorTypeIndexed {PEXColorTypeIndexed = 0,PEXColorTypeRGB = 1,PEXColorTypeCIE = 2,PEXColorTypeHSV = 3,PEXColorTypeHLS = 4,PEXColorTypeRGB8 = 5,PEXColorTypeRGB16 = 6,};
enum MACRO_PEXCompleteImplementation {PEXCompleteImplementation = 0,PEXImmediateMode = 1,PEXWorkstationOnly = 2,PEXStructureMode = 4,};
enum MACRO_PEXContourDisjoint {PEXContourDisjoint = 0,PEXContourNested = 1,PEXContourIntersecting = 2,PEXContourUnknown = 3,};
enum MACRO_PEXCorrect {PEXCorrect = 0,PEXDeferred = 1,PEXSimulated = 2,};
enum MACRO_PEXDefaultEntry {PEXDefaultEntry = 0,PEXDefinedEntry = 1,};
enum MACRO_PEXDynamic {PEXDynamic = 0,PEXNotDynamic = 1,};
enum MACRO_PEXETCounts {PEXETCounts = 0,PEXETIndex = 1,PEXETMnemonic = 2,PEXETAll = 3,};
enum MACRO_PEXETMarkerType {PEXETMarkerType = 1,PEXETATextStyle = 2,PEXETInteriorStyle = 3,PEXETHatchStyle = 4,PEXETLineType = 5,PEXETSurfaceEdgeType = 6,PEXETPickDeviceType = 7,PEXETPolylineInterpMethod = 8,PEXETCurveApproxMethod = 9,PEXETReflectionModel = 10,PEXETSurfaceInterpMethod = 11,PEXETSurfaceApproxMethod = 12,PEXETModelClipOperator = 13,PEXETLightType = 14,PEXETColorType = 15,PEXETFloatFormat = 16,PEXETHLHSRMode = 17,PEXETPromptEchoType = 18,PEXETDisplayUpdateMode = 19,PEXETColorApproxType = 20,PEXETColorApproxModel = 21,PEXETGDP2D = 22,PEXETGDP = 23,PEXETGSE = 24,PEXETTrimCurveApproxMethod = 25,PEXETRenderingColorModel = 26,PEXETParaSurfCharacteristics = 27,PEXETEscape = 28,PEXETPickOneMethod = 29,PEXETPickAllMethod = 30,};
enum MACRO_PEXEchoPrimitive {PEXEchoPrimitive = 1,PEXEchoStructure = 2,PEXEchoNetwork = 3,};
enum MACRO_PEXElementPtr {PEXElementPtr = 1,PEXNumElements = 2,PEXLengthStructure = 4,PEXHasRefs = 8,PEXEditMode = 16,};
enum MACRO_PEXElementType {PEXElementType = 1,PEXElementSize = 2,PEXElementData = 4,};
enum MACRO_PEXEmpty {PEXEmpty = 0,PEXNotEmpty = 1,};
enum MACRO_PEXEscapeSetEchoColor {PEXEscapeSetEchoColor = 1,};
enum MACRO_PEXForward {PEXForward = 0,PEXBackward = 1,};
enum MACRO_PEXGANone {PEXGANone = 0,PEXGAColor = 1,PEXGANormal = 2,PEXGAEdges = 4,};
enum MACRO_PEXHAlignNormal {PEXHAlignNormal = 0,PEXHAlignLeft = 1,PEXHAlignCenter = 2,PEXHAlignRight = 3,};
enum MACRO_PEXHLHSRIDDisable {PEXHLHSRIDDisable = 0,PEXHLHSRIDEnable = 1,};
enum MACRO_PEXHLHSROff {PEXHLHSROff = 1,PEXHLHSRZBuffer = 2,PEXHLHSRPainters = 3,PEXHLHSRScanline = 4,PEXHLHSRHiddenLineOnly = 5,PEXHLHSRZBufferID = 6,};
enum MACRO_PEXHigher {PEXHigher = 0,PEXLower = 1,};
enum MACRO_PEXIDDitheringSupported {PEXIDDitheringSupported = 1,PEXIDMaxEdgeWidth = 2,PEXIDMaxLineWidth = 3,PEXIDMaxMarkerSize = 4,PEXIDMaxModelClipPlanes = 5,PEXIDMaxNameSetNames = 6,PEXIDMaxNonAmbientLights = 7,PEXIDMaxNURBOrder = 8,PEXIDMaxTrimCurveOrder = 9,PEXIDMinEdgeWidth = 10,PEXIDMinLineWidth = 11,PEXIDMinMarkerSize = 12,PEXIDNominalEdgeWidth = 13,PEXIDNominalLineWidth = 14,PEXIDNominalMarkerSize = 15,PEXIDNumSupportedEdgeWidths = 16,PEXIDNumSupportedLineWidths = 17,PEXIDNumSupportedMarkerSizes = 18,PEXIDBestColorApprox = 19,PEXIDTransparencySupported = 20,PEXIDDoubleBufferingSupported = 21,PEXIDChromaticityRedU = 22,PEXIDChromaticityRedV = 23,PEXIDLuminanceRed = 24,PEXIDChromaticityGreenU = 25,PEXIDChromaticityGreenV = 26,PEXIDLuminanceGreen = 27,PEXIDChromaticityBlueU = 28,PEXIDChromaticityBlueV = 29,PEXIDLuminanceBlue = 30,PEXIDChromaticityWhiteU = 31,PEXIDChromaticityWhiteV = 32,PEXIDLuminanceWhite = 33,PEXIDMaxHitsEventSupported = 34,};
enum MACRO_PEXIEEE {PEXIEEE_754_32 = 1,PEXDEC_F_Floating = 2,PEXIEEE_754_64 = 3,PEXDEC_D_Floating = 4,};
enum MACRO_PEXIMM {PEXIMM = 0,PEXIRG = 1,PEXCBS = 2,};
enum MACRO_PEXIdle {PEXIdle = 0,PEXRendering = 1,PEXPicking = 2,};
enum MACRO_PEXInteriorStyleHollow {PEXInteriorStyleHollow = 1,PEXInteriorStyleSolid = 2,PEXInteriorStylePattern = 3,PEXInteriorStyleHatch = 4,PEXInteriorStyleEmpty = 5,};
enum MACRO_PEXLUTLineBundle {PEXLUTLineBundle = 1,PEXLUTMarkerBundle = 2,PEXLUTTextBundle = 3,PEXLUTInteriorBundle = 4,PEXLUTEdgeBundle = 5,PEXLUTPattern = 6,PEXLUTTextFont = 7,PEXLUTColor = 8,PEXLUTView = 9,PEXLUTLight = 10,PEXLUTDepthCue = 11,PEXLUTColorApprox = 12,};
enum MACRO_PEXLightAmbient {PEXLightAmbient = 1,PEXLightWCVector = 2,PEXLightWCPoint = 3,PEXLightWCSpot = 4,};
enum MACRO_PEXLineTypeSolid {PEXLineTypeSolid = 1,PEXLineTypeDashed = 2,PEXLineTypeDotted = 3,PEXLineTypeDashDot = 4,};
enum MACRO_PEXMarkerDot {PEXMarkerDot = 1,PEXMarkerCross = 2,PEXMarkerAsterisk = 3,PEXMarkerCircle = 4,PEXMarkerX = 5,};
enum MACRO_PEXMaxError {PEXMaxError = 14,};
enum MACRO_PEXMaxEvent {PEXMaxEvent = 0,};
enum MACRO_PEXMaxHitsReached {PEXMaxHitsReached = 0,};
enum MACRO_PEXModelClipReplace {PEXModelClipReplace = 1,PEXModelClipIntersection = 2,};
enum MACRO_PEXMoreHits {PEXMoreHits = 0,PEXNoMoreHits = 1,PEXMayBeMoreHits = 2,};
enum MACRO_PEXNSAdd {PEXNSAdd = 0,PEXNSRemove = 1,PEXNSReplace = 2,};
enum MACRO_PEXNoEcho {PEXNoEcho = 0,PEXEcho = 1,PEXUnEcho = 2,};
enum MACRO_PEXNoPick {PEXNoPick = 0,PEXPick = 1,PEXAbortedPick = 2,};
enum MACRO_PEXNone {PEXNone = 0,PEXBackFaces = 1,PEXFrontFaces = 2,};
enum MACRO_PEXNotFound {PEXNotFound = 1,PEXFound = 2,};
enum MACRO_PEXNotPending {PEXNotPending = 0,PEXPending = 1,};
enum MACRO_PEXOCAll {PEXOCAll = 0,PEXOCMarkerType = 1,PEXOCMarkerScale = 2,PEXOCMarkerColorIndex = 3,PEXOCMarkerColor = 4,PEXOCMarkerBundleIndex = 5,PEXOCTextFontIndex = 6,PEXOCTextPrecision = 7,PEXOCCharExpansion = 8,PEXOCCharSpacing = 9,PEXOCTextColorIndex = 10,PEXOCTextColor = 11,PEXOCCharHeight = 12,PEXOCCharUpVector = 13,PEXOCTextPath = 14,PEXOCTextAlignment = 15,PEXOCATextHeight = 16,PEXOCATextUpVector = 17,PEXOCATextPath = 18,PEXOCATextAlignment = 19,PEXOCATextStyle = 20,PEXOCTextBundleIndex = 21,PEXOCLineType = 22,PEXOCLineWidth = 23,PEXOCLineColorIndex = 24,PEXOCLineColor = 25,PEXOCCurveApprox = 26,PEXOCPolylineInterpMethod = 27,PEXOCLineBundleIndex = 28,PEXOCInteriorStyle = 29,PEXOCInteriorStyleIndex = 30,PEXOCSurfaceColorIndex = 31,PEXOCSurfaceColor = 32,PEXOCReflectionAttributes = 33,PEXOCReflectionModel = 34,PEXOCSurfaceInterpMethod = 35,PEXOCBFInteriorStyle = 36,PEXOCBFInteriorStyleIndex = 37,PEXOCBFSurfaceColorIndex = 38,PEXOCBFSurfaceColor = 39,PEXOCBFReflectionAttributes = 40,PEXOCBFReflectionModel = 41,PEXOCBFSurfaceInterpMethod = 42,PEXOCSurfaceApprox = 43,PEXOCFacetCullingMode = 44,PEXOCFacetDistinguishFlag = 45,PEXOCPatternSize = 46,PEXOCPatternAttributes2D = 47,PEXOCPatternAttributes = 48,PEXOCInteriorBundleIndex = 49,PEXOCSurfaceEdgeFlag = 50,PEXOCSurfaceEdgeType = 51,PEXOCSurfaceEdgeWidth = 52,PEXOCSurfaceEdgeColorIndex = 53,PEXOCSurfaceEdgeColor = 54,PEXOCEdgeBundleIndex = 55,PEXOCIndividualASF = 56,PEXOCLocalTransform = 57,PEXOCLocalTransform2D = 58,PEXOCGlobalTransform = 59,PEXOCGlobalTransform2D = 60,PEXOCModelClipFlag = 61,PEXOCModelClipVolume = 62,PEXOCModelClipVolume2D = 63,PEXOCRestoreModelClipVolume = 64,PEXOCViewIndex = 65,PEXOCLightSourceState = 66,PEXOCDepthCueIndex = 67,PEXOCPickID = 68,PEXOCHLHSRID = 69,PEXOCColorApproxIndex = 70,PEXOCRenderingColorModel = 71,PEXOCParaSurfCharacteristics = 72,PEXOCAddToNameSet = 73,PEXOCRemoveFromNameSet = 74,PEXOCExecuteStructure = 75,PEXOCLabel = 76,PEXOCApplicationData = 77,PEXOCGSE = 78,PEXOCMarkers = 79,PEXOCMarkers2D = 80,PEXOCText = 81,PEXOCText2D = 82,PEXOCAnnotationText = 83,PEXOCAnnotationText2D = 84,PEXOCPolyline = 85,PEXOCPolyline2D = 86,PEXOCPolylineSetWithData = 87,PEXOCNURBCurve = 88,PEXOCFillArea = 89,PEXOCFillArea2D = 90,PEXOCFillAreaWithData = 91,PEXOCFillAreaSet = 92,PEXOCFillAreaSet2D = 93,PEXOCFillAreaSetWithData = 94,PEXOCTriangleStrip = 95,PEXOCQuadrilateralMesh = 96,PEXOCSetOfFillAreaSets = 97,PEXOCNURBSurface = 98,PEXOCCellArray = 99,PEXOCCellArray2D = 100,PEXOCExtendedCellArray = 101,PEXOCGDP = 102,PEXOCGDP2D = 103,PEXOCNoop = 104,PEXOCNil = 65535,};
enum MACRO_PEXOCRender {PEXOCRender = 0,PEXOCStore = 1,PEXOCRenderSingle = 2,PEXOCStoreSingle = 3,};
enum MACRO_PEXOff {PEXOff = 0,PEXOn = 1,};
enum MACRO_PEXPCMarkerType {PEXPCMarkerType = 0,PEXPCMarkerScale = 1,PEXPCMarkerColor = 2,PEXPCMarkerBundleIndex = 3,PEXPCTextFont = 4,PEXPCTextPrecision = 5,PEXPCCharExpansion = 6,PEXPCCharSpacing = 7,PEXPCTextColor = 8,PEXPCCharHeight = 9,PEXPCCharUpVector = 10,PEXPCTextPath = 11,PEXPCTextAlignment = 12,PEXPCATextHeight = 13,PEXPCATextUpVector = 14,PEXPCATextPath = 15,PEXPCATextAlignment = 16,PEXPCATextStyle = 17,PEXPCTextBundleIndex = 18,PEXPCLineType = 19,PEXPCLineWidth = 20,PEXPCLineColor = 21,PEXPCCurveApprox = 22,PEXPCPolylineInterp = 23,PEXPCLineBundleIndex = 24,PEXPCInteriorStyle = 25,PEXPCInteriorStyleIndex = 26,PEXPCSurfaceColor = 27,PEXPCReflectionAttr = 28,PEXPCReflectionModel = 29,PEXPCSurfaceInterp = 30,PEXPCBFInteriorStyle = 31,PEXPCBFInteriorStyleIndex = 32,PEXPCBFSurfaceColor = 33,PEXPCBFReflectionAttr = 34,PEXPCBFReflectionModel = 35,PEXPCBFSurfaceInterp = 36,PEXPCSurfaceApprox = 37,PEXPCCullingMode = 38,PEXPCDistinguishFlag = 39,PEXPCPatternSize = 40,PEXPCPatternRefPoint = 41,PEXPCPatternRefVec1 = 42,PEXPCPatternRefVec2 = 43,PEXPCInteriorBundleIndex = 44,PEXPCSurfaceEdgeFlag = 45,PEXPCSurfaceEdgeType = 46,PEXPCSurfaceEdgeWidth = 47,PEXPCSurfaceEdgeColor = 48,PEXPCEdgeBundleIndex = 49,PEXPCLocalTransform = 50,PEXPCGlobalTransform = 51,PEXPCModelClip = 52,PEXPCModelClipVolume = 53,PEXPCViewIndex = 54,PEXPCLightState = 55,PEXPCDepthCueIndex = 56,PEXPCASFValues = 57,PEXPCPickID = 58,PEXPCHLHSRIdentifier = 59,PEXPCNameSet = 60,PEXPCColorApproxIndex = 61,PEXPCRenderingColorModel = 62,PEXPCParaSurfCharacteristics = 63,};
enum MACRO_PEXPCMaxShift {PEXPCMaxShift = 63,};
enum MACRO_PEXPDMaxShift {PEXPDMaxShift = 8,};
enum MACRO_PEXPDPickStatus {PEXPDPickStatus = 1,PEXPDPickPath = 2,PEXPDPickPathOrder = 4,PEXPDPickIncl = 8,PEXPDPickExcl = 16,PEXPDPickDataRec = 32,PEXPDPromptEchoType = 64,PEXPDEchoVolume = 128,PEXPDEchoSwitch = 256,};
enum MACRO_PEXPMMaxShift {PEXPMMaxShift = 1,};
enum MACRO_PEXPMStatus {PEXPMStatus = 1,PEXPMPath = 2,};
enum MACRO_PEXPSCNone {PEXPSCNone = 1,PEXPSCImpDep = 2,PEXPSCIsoCurves = 3,PEXPSCMCLevelCurves = 4,PEXPSCWCLevelCurves = 5,};
enum MACRO_PEXPWDViewRep {PEXPWDViewRep = 0,PEXPWDMarkerBundle = 1,PEXPWDTextBundle = 2,PEXPWDLineBundle = 3,PEXPWDInteriorBundle = 4,PEXPWDEdgeBundle = 5,PEXPWDColorTable = 6,PEXPWDPatternTable = 7,PEXPWDWorkstationTransform = 8,PEXPWDHighlightFilter = 9,PEXPWDInvisibilityFilter = 10,PEXPWDHLHSRMode = 11,PEXPWDStructureModify = 12,PEXPWDPostStructure = 13,PEXPWDUnpostStructure = 14,PEXPWDDeleteStructure = 15,PEXPWDReferenceModify = 16,PEXPWDBufferModify = 17,PEXPWDLightTable = 18,PEXPWDDepthCueTable = 19,PEXPWDColorApproxTable = 20,};
enum MACRO_PEXPWDisplayUpdate {PEXPWDisplayUpdate = 0,PEXPWVisualState = 1,PEXPWDisplaySurface = 2,PEXPWViewUpdate = 3,PEXPWDefinedViews = 4,PEXPWWorkstationUpdate = 5,PEXPWReqNPCSubVolume = 6,PEXPWCurNPCSubVolume = 7,PEXPWReqViewport = 8,PEXPWCurViewport = 9,PEXPWHLHSRUpdate = 10,PEXPWReqHLHSRMode = 11,PEXPWCurHLHSRMode = 12,PEXPWDrawable = 13,PEXPWMarkerBundle = 14,PEXPWTextBundle = 15,PEXPWLineBundle = 16,PEXPWInteriorBundle = 17,PEXPWEdgeBundle = 18,PEXPWColorTable = 19,PEXPWDepthCueTable = 20,PEXPWLightTable = 21,PEXPWColorApproxTable = 22,PEXPWPatternTable = 23,PEXPWTextFontTable = 24,PEXPWHighlightIncl = 25,PEXPWHighlightExcl = 26,PEXPWInvisibilityIncl = 27,PEXPWInvisibilityExcl = 28,PEXPWPostedStructures = 29,PEXPWNumPriorities = 30,PEXPWBufferUpdate = 31,PEXPWReqBufferMode = 32,PEXPWCurBufferMode = 33,};
enum MACRO_PEXPWMaxShift {PEXPWMaxShift = 33,};
enum MACRO_PEXPathRight {PEXPathRight = 0,PEXPathLeft = 1,PEXPathUp = 2,PEXPathDown = 3,};
enum MACRO_PEXPickAllAll {PEXPickAllAll = 1,PEXPickAllVisible = 2,};
enum MACRO_PEXPickDeviceDCHitBox {PEXPickDeviceDCHitBox = 1,PEXPickDeviceNPCHitVolume = 2,};
enum MACRO_PEXPickLast {PEXPickLast = 1,PEXPickClosestZ = 2,PEXPickVisibleAny = 3,PEXPickVisibleClosest = 4,};
enum MACRO_PEXPolylineInterpNone {PEXPolylineInterpNone = 1,PEXPolylineInterpColor = 2,};
enum MACRO_PEXPreConcatenate {PEXPreConcatenate = 0,PEXPostConcatenate = 1,PEXReplace = 2,};
enum MACRO_PEXRAMaxShift {PEXRAMaxShift = 29,};
enum MACRO_PEXRAPipelineContext {PEXRAPipelineContext = 1,PEXRACurrentPath = 2,PEXRAMarkerBundle = 4,PEXRATextBundle = 8,PEXRALineBundle = 16,PEXRAInteriorBundle = 32,PEXRAEdgeBundle = 64,PEXRAViewTable = 128,PEXRAColorTable = 256,PEXRADepthCueTable = 512,PEXRALightTable = 1024,PEXRAColorApproxTable = 2048,PEXRAPatternTable = 4096,PEXRATextFontTable = 8192,PEXRAHighlightIncl = 16384,PEXRAHighlightExcl = 32768,PEXRAInvisibilityIncl = 65536,PEXRAInvisibilityExcl = 131072,PEXRARendererState = 262144,PEXRAHLHSRMode = 524288,PEXRANPCSubVolume = 1048576,PEXRAViewport = 2097152,PEXRAClipList = 4194304,PEXRAPickIncl = 8388608,PEXRAPickExcl = 16777216,PEXRAPickStartPath = 33554432,PEXRABackgroundColor = 67108864,PEXRAClearImage = 134217728,PEXRAClearZ = 268435456,PEXRAEchoMode = 536870912,};
enum MACRO_PEXRCGetExtensionInfo {PEXRCGetExtensionInfo = 1,PEXRCGetEnumTypeInfo = 2,PEXRCGetImpDepConstants = 3,PEXRCCreateLookupTable = 4,PEXRCCopyLookupTable = 5,PEXRCFreeLookupTable = 6,PEXRCGetTableInfo = 7,PEXRCGetPredefinedEntries = 8,PEXRCGetDefinedIndices = 9,PEXRCGetTableEntry = 10,PEXRCGetTableEntries = 11,PEXRCSetTableEntries = 12,PEXRCDeleteTableEntries = 13,PEXRCCreatePipelineContext = 14,PEXRCCopyPipelineContext = 15,PEXRCFreePipelineContext = 16,PEXRCGetPipelineContext = 17,PEXRCChangePipelineContext = 18,PEXRCCreateRenderer = 19,PEXRCFreeRenderer = 20,PEXRCChangeRenderer = 21,PEXRCGetRendererAttributes = 22,PEXRCGetRendererDynamics = 23,PEXRCBeginRendering = 24,PEXRCEndRendering = 25,PEXRCBeginStructure = 26,PEXRCEndStructure = 27,PEXRCRenderOutputCommands = 28,PEXRCRenderNetwork = 29,PEXRCCreateStructure = 30,PEXRCCopyStructure = 31,PEXRCDestroyStructures = 32,PEXRCGetStructureInfo = 33,PEXRCGetElementInfo = 34,PEXRCGetStructuresInNetwork = 35,PEXRCGetAncestors = 36,PEXRCGetDescendants = 37,PEXRCFetchElements = 38,PEXRCSetEditingMode = 39,PEXRCSetElementPointer = 40,PEXRCSetElementPointerAtLabel = 41,PEXRCElementSearch = 42,PEXRCStoreElements = 43,PEXRCDeleteElements = 44,PEXRCDeleteElementsToLabel = 45,PEXRCDeleteBetweenLabels = 46,PEXRCCopyElements = 47,PEXRCChangeStructureRefs = 48,PEXRCCreateNameSet = 49,PEXRCCopyNameSet = 50,PEXRCFreeNameSet = 51,PEXRCGetNameSet = 52,PEXRCChangeNameSet = 53,PEXRCCreateSearchContext = 54,PEXRCCopySearchContext = 55,PEXRCFreeSearchContext = 56,PEXRCGetSearchContext = 57,PEXRCChangeSearchContext = 58,PEXRCSearchNetwork = 59,PEXRCCreateWorkstation = 60,PEXRCFreeWorkstation = 61,PEXRCGetWorkstationAttributes = 62,PEXRCGetWorkstationDynamics = 63,PEXRCGetWorkstationViewRep = 64,PEXRCRedrawAllStructures = 65,PEXRCUpdateWorkstation = 66,PEXRCRedrawClipRegion = 67,PEXRCExecuteDeferredActions = 68,PEXRCSetWorkstationViewPriority = 69,PEXRCSetWorkstationDisplayUpdateMode = 70,PEXRCMapDCtoWC = 71,PEXRCMapWCtoDC = 72,PEXRCSetWorkstationViewRep = 73,PEXRCSetWorkstationWindow = 74,PEXRCSetWorkstationViewport = 75,PEXRCSetWorkstationHLHSRMode = 76,PEXRCSetWorkstationBufferMode = 77,PEXRCPostStructure = 78,PEXRCUnpostStructure = 79,PEXRCUnpostAllStructures = 80,PEXRCGetWorkstationPostings = 81,PEXRCGetPickDevice = 82,PEXRCChangePickDevice = 83,PEXRCCreatePickMeasure = 84,PEXRCFreePickMeasure = 85,PEXRCGetPickMeasure = 86,PEXRCUpdatePickMeasure = 87,PEXRCLoadFont = 88,PEXRCUnloadFont = 89,PEXRCQueryFont = 90,PEXRCListFonts = 91,PEXRCListFontsWithInfo = 92,PEXRCQueryTextExtents = 93,PEXRCMatchRenderingTargets = 94,PEXRCEscape = 95,PEXRCEscapeWithReply = 96,PEXRCRenderElements = 97,PEXRCAccumulateState = 98,PEXRCBeginPickOne = 99,PEXRCEndPickOne = 100,PEXRCPickOne = 101,PEXRCBeginPickAll = 102,PEXRCEndPickAll = 103,PEXRCPickAll = 104,};
enum MACRO_PEXRDAHLHSRMode {PEXRDAHLHSRMode = 1,PEXRDANPCSubVolume = 2,PEXRDAViewport = 4,PEXRDAClipList = 8,PEXRDAEchoMode = 16,};
enum MACRO_PEXRDNHighlightNameSet {PEXRDNHighlightNameSet = 1,PEXRDNInvisibilityNameSet = 2,PEXRDNPickNameSet = 4,PEXRDNHighlightNameSetContents = 65536,PEXRDNInvisibilityNameSetContents = 131072,PEXRDNPickNameSetContents = 262144,};
enum MACRO_PEXRDTMarkerBundle {PEXRDTMarkerBundle = 1,PEXRDTTextBundle = 2,PEXRDTLineBundle = 4,PEXRDTInteriorBundle = 8,PEXRDTEdgeBundle = 16,PEXRDTViewTable = 32,PEXRDTColorTable = 64,PEXRDTDepthCueTable = 128,PEXRDTLightTable = 256,PEXRDTColorApproxTable = 512,PEXRDTPatternTable = 1024,PEXRDTTextFontTable = 2048,PEXRDTMarkerBundleContents = 65536,PEXRDTTextBundleContents = 131072,PEXRDTLineBundleContents = 262144,PEXRDTInteriorBundleContents = 524288,PEXRDTEdgeBundleContents = 1048576,PEXRDTViewTableContents = 2097152,PEXRDTColorTableContents = 4194304,PEXRDTDepthCueTableContents = 8388608,PEXRDTLightTableContents = 16777216,PEXRDTColorApproxContents = 33554432,PEXRDTPatternTableContents = 67108864,PEXRDTTextFontTableContents = 134217728,};
enum MACRO_PEXRational {PEXRational = 0,PEXNonRational = 1,};
enum MACRO_PEXReflectionNone {PEXReflectionNone = 1,PEXReflectionAmbient = 2,PEXReflectionDiffuse = 3,PEXReflectionSpecular = 4,};
enum MACRO_PEXRenderingColorModelImpDep {PEXRenderingColorModelImpDep = 0,PEXRenderingColorModelRGB = 1,PEXRenderingColorModelCIE = 2,PEXRenderingColorModelHSV = 3,PEXRenderingColorModelHLS = 4,};
enum MACRO_PEXSCMaxShift {PEXSCMaxShift = 6,};
enum MACRO_PEXSCPosition {PEXSCPosition = 1,PEXSCDistance = 2,PEXSCCeiling = 4,PEXSCModelClipFlag = 8,PEXSCStartPath = 16,PEXSCNormalList = 32,PEXSCInvertedList = 64,};
enum MACRO_PEXSetValue {PEXSetValue = 0,PEXRealizedValue = 1,};
enum MACRO_PEXShapeComplex {PEXShapeComplex = 0,PEXShapeNonConvex = 1,PEXShapeConvex = 2,PEXShapeUnknown = 3,};
enum MACRO_PEXSingleBuffered {PEXSingleBuffered = 0,PEXDoubleBuffered = 1,};
enum MACRO_PEXStringPrecision {PEXStringPrecision = 0,PEXCharPrecision = 1,PEXStrokePrecision = 2,};
enum MACRO_PEXStructureInsert {PEXStructureInsert = 0,PEXStructureReplace = 1,};
enum MACRO_PEXSurfaceApproxWCPlanarDev {PEXSurfaceApproxWCPlanarDev = 6,PEXSurfaceApproxNPCPlanarDev = 7,PEXSurfaceApproxDCPlanarDev = 8,PEXApproxWCRelative = 9,PEXApproxNPCRelative = 10,PEXApproxDCRelative = 11,};
enum MACRO_PEXSurfaceEdgeSolid {PEXSurfaceEdgeSolid = 1,PEXSurfaceEdgeDashed = 2,PEXSurfaceEdgeDotted = 3,PEXSurfaceEdgeDashDot = 4,};
enum MACRO_PEXSurfaceInterpNone {PEXSurfaceInterpNone = 1,PEXSurfaceInterpColor = 2,PEXSurfaceInterpDotProduct = 3,PEXSurfaceInterpNormal = 4,};
enum MACRO_PEXTopFirst {PEXTopFirst = 0,PEXBottomFirst = 1,};
enum MACRO_PEXTopPart {PEXTopPart = 0,PEXBottomPart = 1,};
enum MACRO_PEXUniformPlacement {PEXUniformPlacement = 0,PEXNonUniformPlacement = 1,};
enum MACRO_PEXVAlignNormal {PEXVAlignNormal = 0,PEXVAlignTop = 1,PEXVAlignCap = 2,PEXVAlignHalf = 3,PEXVAlignBase = 4,PEXVAlignBottom = 5,};
enum MACRO_PEXVisualizeEach {PEXVisualizeEach = 1,PEXVisualizeEasy = 2,PEXVisualizeNone = 3,PEXSimulateSome = 4,PEXVisualizeWhenever = 5,};
enum MACRO_PEXXAxis {PEXXAxis = 1,PEXYAxis = 2,PEXZAxis = 3,};
enum MACRO_PEX_PROTO {PEX_PROTO_MINOR = 1,};
enum MACRO_PF {PF_X = 0x1,PF_W = 0x2,PF_R = 0x4,PF_MASKPROC = 0xF0000000,};
enum MACRO_PF2 {PF_Other = 0,PF_Apollo = 10,PF_ATT = 20,PF_Cray1 = 30,PF_Cray2 = 31,PF_DECUltrix = 40,PF_DECVMS = 41,PF_DECVT1000 = 42,PF_DECXTerm = 43,PF_DECELN = 44,PF_DECOSF1 = 45,PF_HP9000s800 = 50,PF_HP9000s300 = 51,PF_IBMAT = 60,PF_IBMRT = 61,PF_IBMPS2 = 62,PF_IBMRS = 63,PF_MacII = 70,PF_Pegasus = 80,PF_SGI = 90,PF_Sony = 100,PF_Sun3 = 110,PF_Sun386i = 111,PF_SunSparc = 112,};
enum MACRO_PF5 {PF5_CTXT_SEL_PROC = 1,PF5_CTXT_PME_THIS = 2,};
enum MACRO_PF5_C0 {PF5_C0_INT_EVERY_65536 = 0x200,PF5_C1_INT_EVERY_256 = 0xC0,};
enum MACRO_PF5_C1 {PF5_C1_INT_EVERY_65536 = 0x80,PF5_C2_INT_EVERY_256 = 0x30,};
enum MACRO_PF5_C2 {PF5_C2_INT_EVERY_16384 = 0x20,PF5_SEL_COUNTER_0 = 0x1,};
enum MACRO_PF5_CTXT {PF5_CTXT_ALL_PROC = 0,PF5_CTXT_THIS_PROC = 3,PF5_CTXT_NO_USER = 1073741824,};
enum MACRO_PF5_CTXT_ALL {PF5_CTXT_ALL_MODES = 0,PF5_CTXT_EXEC_AND_SUPER = 1073742592,};
enum MACRO_PF5_CTXT_NO {PF5_CTXT_NO_PAL = 0x200,PF5_CTXT_NO_KERNEL = 0x100,};
enum MACRO_PF5_CTXT_USER {PF5_CTXT_USER = 0x300,PF5_CTXT_PAL = 0x40000100,};
enum MACRO_PF5_CTXT_USER_AND {PF5_CTXT_USER_AND_PAL = 0x100,PF5_CTXT_KERNEL = 0x40000200,};
enum MACRO_PF5_CTXT_USER_AND_KERNEL {PF5_CTXT_USER_AND_KERNEL = 0x200,PF5_CTXT_PAL_AND_KERNEL = 0x40000000,};
enum MACRO_PF5_MUX0 {PF5_MUX0_CYCLES = 0,PF5_MUX0_ISSUES = -2147483648,};
enum MACRO_PF5_MUX1 {PF5_MUX1_NON_ISSUE_CYCLES = 0,PF5_MUX1_SPLIT_ISSUE_CYCLES = 16,PF5_MUX1_PIPELINE_DRY = 32,PF5_MUX1_REPLAY_TRAP = 48,PF5_MUX1_SINGLE_ISSUE_CYCLES = 64,PF5_MUX1_DUAL_ISSUE_CYCLES = 80,PF5_MUX1_TRIPLE_ISSUE_CYCLES = 96,PF5_MUX1_QUAD_ISSUE_CYCLES = 112,PF5_MUX1_FLOW_CHANGE = 128,PF5_MUX1_INTEGER_OPERATE = 144,PF5_MUX1_C_FP_INSTRUCTIONS = 160,PF5_MUX1_C_LOAD_INSTRUCTIONS = 176,PF5_MUX1_C_STORE_INSTRUCTIONS = 192,PF5_MUX1_C_ICACHE_ACCESS = 208,PF5_MUX1_C_DCACHE_ACCESS = 224,PF5_MUX1_C_BCACHE_VICTIM = 240,};
enum MACRO_PF5_MUX1_C {PF5_MUX1_C_SCACHE_ACCESS = 0xF0,};
enum MACRO_PF5_MUX1_C_BCACHE {PF5_MUX1_C_BCACHE_REF = 0xF0,};
enum MACRO_PF5_MUX1_C_BCACHE_CLN {PF5_MUX1_C_BCACHE_CLN_WRT_HIT = 0xF0,};
enum MACRO_PF5_MUX1_C_BCACHE_DREAD {PF5_MUX1_C_BCACHE_DREAD_HIT = 0xF0,};
enum MACRO_PF5_MUX1_C_BCACHE_DREAD_FILL {PF5_MUX1_C_BCACHE_DREAD_FILL = 0xF0,};
enum MACRO_PF5_MUX1_C_BCACHE_READ {PF5_MUX1_C_BCACHE_READ = 0xF0,};
enum MACRO_PF5_MUX1_C_BCACHE_WRITE {PF5_MUX1_C_BCACHE_WRITE = 0xF0,};
enum MACRO_PF5_MUX1_C_READ {PF5_MUX1_C_READ_MISS_2 = 0xF0,PF5_MUX2_C_LONG_STALLS = 0x0,};
enum MACRO_PF5_MUX1_C_SCACHE {PF5_MUX1_C_SCACHE_READ = 0xF0,};
enum MACRO_PF5_MUX1_C_SCACHE_VICTIM {PF5_MUX1_C_SCACHE_VICTIM = 0xF0,};
enum MACRO_PF5_MUX1_C_SCACHE_WRITE {PF5_MUX1_C_SCACHE_WRITE = 0xF0,};
enum MACRO_PF5_MUX1_C_SYS {PF5_MUX1_C_SYS_REQ = 0xF0,};
enum MACRO_PF5_MUX2 {PF5_MUX2_C_PC_MISPR = 2,PF5_MUX2_C_BRANCH_MISPREDICTS = 3,PF5_MUX2_C_ICACHE_MISSES = 4,PF5_MUX2_C_ITB_MISS = 5,PF5_MUX2_C_DCACHE_MISSES = 6,PF5_MUX2_C_DTB_MISS = 7,PF5_MUX2_C_LOADS_MERGED = 8,PF5_MUX2_C_LDU_REPLAYS = 9,PF5_MUX2_C_WB_MAF_FULL_REPLAYS = 10,PF5_MUX2_C_EXTERNAL = 11,PF5_MUX2_C_CYCLES = 12,PF5_MUX2_C_MEM_BARRIER = 13,PF5_MUX2_C_LOAD_LOCKED = 14,PF5_MUX2_C_SCACHE_MISS = 15,};
enum MACRO_PF5_MUX2_C {PF5_MUX2_C_SCACHE_READ_MISS = 0xF,};
enum MACRO_PF5_MUX2_C_BCACHE {PF5_MUX2_C_BCACHE_MISS = 0xF,};
enum MACRO_PF5_MUX2_C_BCACHE_DREAD {PF5_MUX2_C_BCACHE_DREAD = 0xF,};
enum MACRO_PF5_MUX2_C_BCACHE_READ {PF5_MUX2_C_BCACHE_READ_HIT = 0xF,};
enum MACRO_PF5_MUX2_C_BCACHE_READ_FILL {PF5_MUX2_C_BCACHE_READ_FILL = 0xF,};
enum MACRO_PF5_MUX2_C_BCACHE_WRITE {PF5_MUX2_C_BCACHE_WRITE_HIT = 0xF,};
enum MACRO_PF5_MUX2_C_BCACHE_WRITE_FILL {PF5_MUX2_C_BCACHE_WRITE_FILL = 0xF,};
enum MACRO_PF5_MUX2_C_READ {PF5_MUX2_C_READ_MISS_3 = 0xF,PF5_C0_INT_EVERY_256 = 0x300,};
enum MACRO_PF5_MUX2_C_SCACHE {PF5_MUX2_C_SCACHE_WRITE_MISS = 0xF,};
enum MACRO_PF5_MUX2_C_SCACHE_SH {PF5_MUX2_C_SCACHE_SH_WRITE = 0xF,};
enum MACRO_PF5_MUX2_C_SCACHE_WRITE {PF5_MUX2_C_SCACHE_WRITE = 0xF,};
enum MACRO_PF5_MUX2_C_SYS {PF5_MUX2_C_SYS_INV = 0xF,};
enum MACRO_PF5_MUX2_C_SYS_READ {PF5_MUX2_C_SYS_READ_REQ = 0xF,};
enum MACRO_PF5_MUX2_C_SYS_READ_FLUSH {PF5_MUX2_C_SYS_READ_FLUSH_HIT = 0xF,};
enum MACRO_PF5_MUX2_C_SYS_READ_FLUSH_MISS {PF5_MUX2_C_SYS_READ_FLUSH_MISS = 0xF,};
enum MACRO_PF5_SEL {PF5_SEL_COUNTER_1 = 2,PF5_SEL_COUNTER_2 = 4,};
enum MACRO_PF6 {PF6_MUX0_CYCLES = 0x0,PF6_MUX0_RET_INSTRUCTIONS = 0x10,};
enum MACRO_PF67 {PF67_RET_INST_AND_CYCLES = 0x0,PF67_CYCLES_AND_UNDEFINED = 0x4,PF67_RET_INST_AND_BCACHE_MISS = 0x8,PF67_CYCLES_AND_REPLAY_TRAPS = 0xC,};
enum MACRO_PF6_C0 {PF6_C0_INT_EVERY_1048576 = 0x0,PF6_C1_INT_EVERY_1048576 = 0x1,};
enum MACRO_PF6_MUX1 {PF6_MUX1_CYCLES = 0x0,PF6_MUX1_RET_COND_BRANCHES = 0x1,PF6_MUX1_RET_BRANCH_MISPREDICTS = 0x2,PF6_MUX1_RET_DTB_SINGLE_MISSES = 0x3,PF6_MUX1_RET_DTB_DOUBLE_MISSES = 0x4,PF6_MUX1_RET_ITB_MISSES = 0x5,PF6_MUX1_RET_UNALIGNED_TRAPS = 0x6,PF6_MUX1_REPLAY_TRAP = 0x7,};
enum MACRO_PF6_SEL {PF6_SEL_COUNTER_0 = 1,PF6_SEL_COUNTER_1 = 2,};
enum MACRO_PFM {PFM_COUNTERS = 1,PFM_IPL = 2,PFM_PROFILING = 4,PCNTRDISABLE = 536891392,PCNTRENABLE = 536891393,PCNTLOGALL = 536891395,PCNTLOGSELECT = 536891396,PCNTCLEARCNT = 536891397,PCNTCLEARPCBPME = 536891399,PCNTCALLER = 536891400,};
enum MACRO_PF_C0 {PF_C0_INT_EVERY_65536 = 0,PF_C0_INT_EVERY_4096 = 1,};
enum MACRO_PF_C1 {PF_C1_INT_EVERY_4096 = 0,PF_C1_INT_EVERY_256 = 1,};
enum MACRO_PF_DCACHE {PF_DCACHE = 0x0,PF_ICACHE = 0x1,PF_DUAL = 0x2,PF_BRANCHMISS = 0x3,PF_FPINST = 0x4,PF_INTOPS = 0x5,PF_STOREI = 0x6,PF_EXTPIN1 = 0x7,};
enum MACRO_PF_ISSUES {PF_ISSUES = 0x0,PF_PIPEDRY = 0x2,PF_LOADI = 0x4,PF_PIPEFROZEN = 0x6,PF_BRANCHI = 0x8,PF_CYCLES = 0xA,PF_PALMODE = 0xB,PF_NONISSUES = 0xC,PF_EXTPIN0 = 0xE,};
enum MACRO_PF_OSI {PF_OSI = 7,PF_ECMA = 8,PF_DATAKIT = 9,PF_CCITT = 10,PF_SNA = 11,PF_DECnet = 12,PF_DLI = 13,PF_LAT = 14,PF_HYLINK = 15,PF_APPLETALK = 16,PF_ROUTE = 17,PF_LINK = 18,PF_XTP = 19,PF_NETMAN = 20,PF_X25 = 21,PF_CTF = 22,PF_WAN = 23,PF_USER = 24,PF_LAST = 25,PF_INET6 = 26,PF_AAL = 27,PF_KEY = 28,PF_MAX = 35,SOMAXCONN = 1024,};
enum MACRO_PF_UNSPEC {PF_UNSPEC = 0,PF_UNIX = 1,PF_INET = 2,PF_IMPLINK = 3,PF_PUP = 4,PF_CHAOS = 5,PF_NS = 6,PF_ISO = 7,};
enum MACRO_PGOFSET {PGOFSET = 8191,};
enum MACRO_PGRPHSZ {PGRPHSZ = 128,};
enum MACRO_PI {PI_STRATEGY_CHAR = 0x1,PI_NO_PARTITION = 0x2,};
enum MACRO_PIOCCFAULT {PIOCCFAULT = 536888851,};
enum MACRO_PIOCDUMPCORE {PIOCDUMPCORE = 536888924,};
enum MACRO_PIOCRFORK {PIOCRFORK = 536888858,PIOCSFORK = 536888859,PIOCRRLC = 536888860,PIOCSRLC = 536888861,};
enum MACRO_PIOCRTINH {PIOCRTINH = 536888903,PIOCSTINH = 536888904,};
enum MACRO_PIOCSIM {PIOCSIM = 536891472,PIOCNOSIM = 536891488,PIOCCCMSG = 536891504,PIOCNOCCMSG = 536891520,};
enum MACRO_PIPSIZ {PIPSIZ = 8192,};
enum MACRO_PIXIE {PIXIE_TOOLVER = 0,};
enum MACRO_PI_EMPTY {PI_EMPTY = 0,PI_ACTIVE = 1,PI_EXITING = 2,PI_ZOMBIE = 3,};
enum MACRO_PI_FPUTYPE {PI_FPUTYPE = 32,PBIND_NONE = -1,};
enum MACRO_PI_VERSION {PI_VERSION_0 = 0,};
enum MACRO_PLE {PLE_PROPAGATE_ON_COPY = 0x1,};
enum MACRO_PLE_FLAG {PLE_FLAG_MASK = 0x1,PLE_FLAG_ALL = 0xFFFFFFFF,};
enum MACRO_PLOT {PLOT = 0x1,NOCL = 0x2,NOFF = 0x100,NONL = 0x200,NOTB = 0x400,NOBS = 0x800,NOCR = 0x1000,CAPS = 0x2000,WRAP = 0x4000,LPR = 0x6C00,LPRGET = 0x6C01,LPRSET = 0x6C02,LPRGETV = 0x6C05,LPRSETV = 0x6C06,LPRVRMG = 0x6C0A,LPRVRMS = 0x6C0B,LPRUGES = 0x6C0C,LPRUFLS = 0x6C0D,LPRURES = 0x6C0E,LPRGMOD = 0x6C0F,LPRSMOD = 0x6C10,LPRGETA = 0x6C11,LPRSETA = 0x6C12,LPRGTOV = 0x6C13,LPRSTOV = 0x6C14,};
enum MACRO_PM {PM_MAJOR_VERSION = 1,PM_MINOR_VERSION = 0,PM_Error = 0,};
enum MACRO_PMAPPORT {PMAPPORT = 111,PMAPPROG = 100000,};
enum MACRO_PMAPPROC {PMAPPROC_NULL = 0,PMAPPROC_SET = 1,PMAPPROC_UNSET = 2,PMAPPROC_GETPORT = 3,PMAPPROC_DUMP = 4,PMAPPROC_CALLIT = 5,};
enum MACRO_PMAPVERS {PMAPVERS = 2,};
enum MACRO_PMAPVERS_PROTO {PMAPVERS_PROTO = 2,PMAPVERS_ORIG = 1,};
enum MACRO_PMCTRS {PMCTRS_ALL_CPUS = 0xFF,};
enum MACRO_PMSG {PMSG = 27,MSG_R = 256,};
enum MACRO_PM_GetProxyAddr {PM_GetProxyAddr = 1,PM_GetProxyAddrReply = 2,PM_StartProxy = 3,};
enum MACRO_PM_Unable {PM_Unable = 0,PM_Success = 1,PM_Failure = 2,};
enum MACRO_PN {PN_STRIP = 0x0,PN_PEEK = 0x1,};
enum MACRO_PNP {PNP_POLLTIME = 20,};
enum MACRO_PNPD {PNPD_PROG = 100041,PNPD_VERS = 2,PNP_WHOAMI = 1,};
enum MACRO_PNP_ACQUIRE {PNP_ACQUIRE = 2,PNP_SETUP = 3,PNP_POLL = 4,};
enum MACRO_PNP_MISSEDPOLLS {PNP_MISSEDPOLLS = 6,};
enum MACRO_PO {PO_VERSION_0 = 0,};
enum MACRO_POINTER {POINTER_TOKEN = 80,REFERENCE_TOKEN = 82,};
enum MACRO_POINTER_TO {POINTER_TO_MEMBER_TOKEN = 77,};
enum MACRO_POLICY {POLICY_TIMESHARE = 1,POLICY_FIXEDPRI = 2,POLICY_FIFO = 4,POLICY_RR = 8,};
enum MACRO_POLICY_LAST {POLICY_LAST = 8,POLICY_SVID_RT = 16,};
enum MACRO_POLL {POLL_IN = 1,POLL_OUT = 2,POLL_MSG = 3,POLL_ERR = 4,POLL_PRI = 5,POLL_HUP = 6,};
enum MACRO_POLLIN {POLLIN = 1,POLLPRI = 2,INFTIM = -1,};
enum MACRO_POLLNORM {POLLNORM = 0x1,POLLOUT = 0x4,POLLERR = 0x8,POLLHUP = 0x10,POLLNVAL = 0x20,POLLRDNORM = 0x40,POLLRDBAND = 0x80,POLLWRNORM = 0x100,POLLWRBAND = 0x200,POLLMSG = 0x400,};
enum MACRO_PORT {PORT_TYPE_NONE = 0,PORT_TYPE_SEND = 1,PORT_TYPE_RECEIVE = 3,PORT_TYPE_OWN = 5,PORT_TYPE_RECEIVE_OWN = 7,PORT_TYPE_SET = 9,PORT_TYPE_LAST = 10,};
enum MACRO_PORT_NULL {PORT_NULL = 0,};
enum MACRO_PP {PP_NOIOCTL = 0x1,PP_NETBOOT = 0x2,};
enum MACRO_PPOD {PPOD_VERSION = 1,addressNil = -1,};
enum MACRO_PPODE {PPODE_STAMP = 1,PPODE_END = 2,PPODE_EXT_SRC = 3,PPODE_SEM_EVENT = 4,PPODE_SPLIT = 5,PPODE_DISCONTIG_SCOPE = 6,PPODE_INLINED_CALL = 7,PPODE_PROFILE_INFO = 8,};
enum MACRO_PPP {PPP_HDRLEN = 4,PPP_FCSLEN = 2,};
enum MACRO_PPPDBG {PPPDBG_LOG = 0x100,PPPDBG_DRIVER = 0x0,};
enum MACRO_PPPDBG_IF {PPPDBG_IF = 1,PPPDBG_COMP = 2,PPPDBG_AHDLC = 3,};
enum MACRO_PPPIO {PPPIO_NEWPPA = 28802,PPPIO_GETSTAT = 28803,PPPIO_GETCSTAT = 28804,PPPIO_MTU = 28805,PPPIO_MRU = 28806,PPPIO_CFLAGS = 28807,PPPIO_XCOMP = 28808,PPPIO_RCOMP = 28809,PPPIO_XACCM = 28810,PPPIO_RACCM = 28811,PPPIO_VJINIT = 28812,PPPIO_ATTACH = 28813,PPPIO_LASTMOD = 28814,PPPIO_GCLEAN = 28815,PPPIO_DEBUG = 28816,PPPIO_BIND = 28817,PPPIO_NPMODE = 28818,PPPIO_GIDLE = 28819,PPPIO_PASSFILT = 28820,PPPIO_ACTIVEFILT = 28821,};
enum MACRO_PPPIOCXFERUNIT {PPPIOCXFERUNIT = 536900686,};
enum MACRO_PPP_ALLSTATIONS {PPP_ALLSTATIONS = 0xFF,};
enum MACRO_PPP_CBCP {PPP_CBCP = 0xC029,PPP_INITFCS = 0xFFFF,};
enum MACRO_PPP_ESCAPE {PPP_ESCAPE = 0x7D,};
enum MACRO_PPP_GOODFCS {PPP_GOODFCS = 0xF0B8,};
enum MACRO_PPP_IP {PPP_IP = 0x21,PPP_AT = 0x29,PPP_IPX = 0x2B,PPP_VJC_COMP = 0x2D,PPP_VJC_UNCOMP = 0x2F,PPP_AT_EDDP = 0x39,PPP_AT_BUF = 0x3B,PPP_ML = 0x3D,PPP_NB = 0x3F,PPP_COMP = 0xFD,PPP_IPCP = 0x8021,PPP_ATCP = 0x8029,PPP_IPXCP = 0x802B,PPP_MLCP = 0x8039,PPP_NBCP = 0x803F,PPP_CCP = 0x80FD,PPP_LCP = 0xC021,PPP_PAP = 0xC023,PPP_LQR = 0xC025,PPP_CHAP = 0xC223,};
enum MACRO_PPP_MINMRU {PPP_MINMRU = 128,};
enum MACRO_PPP_MINMTU {PPP_MINMTU = 64,PPP_MRU = 1500,PPP_MAXMRU = 65000,};
enum MACRO_PPP_MTU {PPP_MTU = 1500,PPP_MAXMTU = 65529,};
enum MACRO_PPP_TRANS {PPP_TRANS = 0x20,PPP_PAD = 0x1,};
enum MACRO_PPP_UI {PPP_UI = 0x3,PPP_FLAG = 0x7E,};
enum MACRO_PR {PR_BOUNCEIO = 0x1,};
enum MACRO_PRBQUEUES {PRBQUEUES = 3,PR_DIRTY = 0,};
enum MACRO_PRBUFHSZ {PRBUFHSZ = 256,};
enum MACRO_PRC {PRC_NREGS = 46,};
enum MACRO_PRCO {PRCO_GETOPT = 0,PRCO_SETOPT = 1,PRCO_PIF = 2,PRCO_NWMGT = 3,PRCO_TRACE = 4,PRCO_NCMDS = 5,};
enum MACRO_PRCSIG {PRCSIG = 0x1,PRCFAULT = 0x2,PRSTRACE = 0x4,PRSHOLD = 0x8,PRSFAULT = 0x10,PRSVADDR = 0x20,PRSTEP = 0x40,PRSTOP = 0x80,PRSABORT = 0x100,PRRESCHED = 0x200,PRNOSTEP = 0x400,PRTOUCH = 0x800,PRDUMPCORE = 0x1000,};
enum MACRO_PRC_IFDOWN {PRC_IFDOWN = 0,PRC_ROUTEDEAD = 1,PRC_QUENCH2 = 3,PRC_QUENCH = 4,PRC_MSGSIZE = 5,PRC_HOSTDEAD = 6,PRC_HOSTUNREACH = 7,PRC_UNREACH_NET = 8,PRC_UNREACH_HOST = 9,PRC_UNREACH_PROTOCOL = 10,PRC_UNREACH_PORT = 11,PRC_UNREACH_SRCFAIL = 13,PRC_REDIRECT_NET = 14,PRC_REDIRECT_HOST = 15,PRC_REDIRECT_TOSNET = 16,PRC_REDIRECT_TOSHOST = 17,PRC_TIMXCEED_INTRANS = 18,PRC_TIMXCEED_REASS = 19,PRC_PARAMPROB = 20,PRC_NEWADDRSET = 21,PRC_EVENT = 22,PRC_NMADD = 23,PRC_IFADDED = 24,PRC_CTICONNRQST = 25,PRC_CTIFLOWCTLCHG = 26,PRC_CTIDISCONNRQST = 27,PRC_IFDETACHED = 28,PRC_NCMDS = 29,};
enum MACRO_PRELIM {PRELIM = 1,COMPLETE = 2,CONTINUE = 3,TRANSIENT = 4,};
enum MACRO_PRFLUSH {PRFLUSH = 536899595,};
enum MACRO_PRFS {PRFS_SCENTER = 0x1,PRFS_SCEXIT = 0x2,PRFS_FAULT = 0x4,PRFS_SIGNAL = 0x8,PRFS_ABORT = 0x10,PRFS_OPEN = 0x20,PRFS_FDINVLD = 0x40,PRFS_EXECED = 0x80,PRFS_TRACING = 0x100,PRFS_WASTRACED = 0x4000,PRFS_SWEXIT = 0x8000,};
enum MACRO_PRFS_STOPFORK {PRFS_STOPFORK = 512,PRFS_STOPEXEC = 1024,PRFS_STOPTERM = 2048,PRFS_STOPTCR = 4096,PRFS_STOPTTERM = 8192,PRFS_KOLC = 65536,};
enum MACRO_PRI {PRI_RR_MIN = 14,PRI_RR_MAX = 63,};
enum MACRO_PRIMARY {PRIMARY_CPU_NOT_FOUND = -505,};
enum MACRO_PRIO {PRIO_MIN = -20,};
enum MACRO_PRIO_MAX {PRIO_MAX = 20,PRIO_PROCESS = 0,};
enum MACRO_PRIO_PGRP {PRIO_PGRP = 1,PRIO_USER = 2,};
enum MACRO_PRIZERO {PRIZERO = 0,};
enum MACRO_PRI_BG {PRI_BG_MIN_NP = 0,PRI_BG_MAX_NP = 13,};
enum MACRO_PRI_FG {PRI_FG_MIN_NP = 14,PRI_FG_MAX_NP = 63,};
enum MACRO_PRI_LFI {PRI_LFI_MIN_NP = 0,PRI_LFI_MAX_NP = 13,};
enum MACRO_PRI_LRR {PRI_LRR_MIN_NP = 0,PRI_LRR_MAX_NP = 13,};
enum MACRO_PRI_OTHER {PRI_OTHER_MIN = 14,PRI_OTHER_MAX = 63,};
enum MACRO_PRNODEV {PRNODEV = -1,};
enum MACRO_PROC {PROC_TEXT = 5,};
enum MACRO_PROCESSOR {PROCESSOR_INFO_MAX = 1024,};
enum MACRO_PROCESSOR_BASIC {PROCESSOR_BASIC_INFO = 2,};
enum MACRO_PROCESSOR_SET {PROCESSOR_SET_INFO_MAX = 1024,};
enum MACRO_PROCESSOR_SET_ACTIVE {PROCESSOR_SET_ACTIVE = -501,};
enum MACRO_PROCESSOR_SET_EXCLUSIVE {PROCESSOR_SET_EXCLUSIVE_USE = -504,};
enum MACRO_PROCESSOR_SET_IN {PROCESSOR_SET_IN_USE = -503,};
enum MACRO_PROCESSOR_SET_SCHED {PROCESSOR_SET_SCHED_INFO = 2,};
enum MACRO_PROC_DATA {PROC_DATA = 3,};
enum MACRO_PROF {PROF_TOOLVER = 0,};
enum MACRO_PROFIL {PROFIL_MAX = 64,PROFIL_SCALE_TOTAL = 2,PROFIL_SCALE_STOP_1 = 1,PROFIL_SCALE_STOP = 0,};
enum MACRO_PROFIL_FLAGS {PROFIL_FLAGS_ALL_THREADS = 1,};
enum MACRO_PROMISC {PROMISC_SAP = -2,};
enum MACRO_PROOT {PROOT = 3,};
enum MACRO_PROP {PROP_LIST_MAGIC_VERS1 = 0x1B366,};
enum MACRO_PROP2 {PROP_MWM_HINTS_ELEMENTS = 5,};
enum MACRO_PROPLIST {PROPLIST_NAME_MAX = 255,};
enum MACRO_PROPLIST_NUM {PROPLIST_NUM_MAX = 127,};
enum MACRO_PROPLIST_PROGRAM {PROPLIST_PROGRAM = 300020,PROPLIST_VERSION2 = 2,};
enum MACRO_PROPLIST_VERSION3 {PROPLIST_VERSION3 = 3,};
enum MACRO_PROPROC {PROPROC_NULL = 0,PROPROC_GET = 1,PROPROC_SET = 2,PROPROC_DEL = 3,PROPROC_ACCESS = 4,PROPROC_GETATTR = 5,};
enum MACRO_PROPROC3 {PROPROC3_NULL = 0,PROPROC3_GET = 1,PROPROC3_SET = 2,PROPROC3_DEL = 3,};
enum MACRO_PROP_MOTIF {PROP_MOTIF_WM_INFO_ELEMENTS = 2,};
enum MACRO_PROP_MWM {PROP_MWM_INFO_ELEMENTS = 2,};
enum MACRO_PROT {PROT_NONE = 0,PROT_READ = 1,PROT_WRITE = 2,PROT_EXEC = 4,};
enum MACRO_PRPW {PRPW_PROC_PWCHG_FAIL = 1,PRPW_PROC_PWCHG_SUCC = 2,PRPW_PROC_LOGIN_FAIL = 3,PRPW_PROC_LOGIN_SUCC = 4,PRPW_PROC_VAC_UPDATE = 5,};
enum MACRO_PRPWPROG {PRPWPROG_NUM = 300632,LPRPWPROG_NUM = 300729,};
enum MACRO_PRPWPROG_VERS {PRPWPROG_VERS_V1 = 1,PRPWPROG_VERS_V2 = 2,PRPWPROG_VERS_V3 = 3,};
enum MACRO_PRPWPROG_VERS_0 {PRPWPROG_VERS = 3,PRPW_PROC_NULL = 0,};
enum MACRO_PRPW_ADMINT {PRPW_ADMINT_CREATE = 1,PRPW_ADMINT_REMOVE = 2,PRPW_ADMINT_UPDATE = 3,};
enum MACRO_PRPW_ERR {PRPW_ERR_NEW_PARSE = 1,PRPW_ERR_OLD_ENTRY = 2,PRPW_ERR_PW_UNCHANGED = 3,PRPW_ERR_NEW_FIELDS = 4,PRPW_ERR_UNK_05 = 5,PRPW_ERR_UNK_06 = 6,PRPW_ERR_OLD_PW = 7,PRPW_ERR_PTMP_BUSY = 8,PRPW_ERR_PTMP_OPEN = 9,PRPW_ERR_PTMP_FDOPEN = 10,PRPW_ERR_UNK_11 = 11,PRPW_ERR_PASSWD_OPEN = 12,PRPW_ERR_PTMP_PUT = 13,PRPW_ERR_PTMP_WRITE = 14,PRPW_ERR_UPDATE_REC = 15,PRPW_ERR_UNK_16 = 16,PRPW_ERR_PTMP_RENAME = 17,PRPW_ERR_UNK_18 = 18,PRPW_ERR_OLD_PASSWORD = 19,PRPW_ERR_FIELDSYNC = 20,};
enum MACRO_PRPW_OPTREQ {PRPW_OPTREQ_NEWPASS = 2,PRPW_OPTREQ_ORIGIN = 4,PRPW_OPTREQ_VACATION = 8,};
enum MACRO_PRPW_OPTREQ_SPECDATA {PRPW_OPTREQ_SPECDATA = 1,PRPW_OPTREQ_UBUFDATA = 2,PRPW_OPTREQ_MATCHDATA = 4,};
enum MACRO_PRPW_OPTRSP {PRPW_OPTRSP_ORDNUM = 1,};
enum MACRO_PRPW_OPTRSP_OBJTYP {PRPW_OPTRSP_OBJTYP = 2,PRPW_OPTRSP_FLEN = 4,};
enum MACRO_PRPW_PROC {PRPW_PROC_V1_MAX = 5,PRPW_PROC_LOGIN_FULL = 6,};
enum MACRO_PRPW_PROC_V2 {PRPW_PROC_V2_MAX = 6,PRPW_PROC_ADMIN_CHANGE = 7,PRPW_PROC_QUERY_FIELDS = 8,};
enum MACRO_PRPW_PROC_V3 {PRPW_PROC_V3_MAX = 8,PRPW_OPTREQ_OLDPASS = 1,};
enum MACRO_PRRESET {PRRESET = 536899588,};
enum MACRO_PRU {PRU_ATTACH = 0,PRU_DETACH = 1,PRU_BIND = 2,PRU_LISTEN = 3,PRU_CONNECT = 4,PRU_ACCEPT = 5,PRU_DISCONNECT = 6,PRU_SHUTDOWN = 7,PRU_RCVD = 8,PRU_SEND = 9,PRU_ABORT = 10,PRU_CONTROL = 11,PRU_SENSE = 12,PRU_RCVOOB = 13,PRU_SENDOOB = 14,PRU_SOCKADDR = 15,PRU_PEERADDR = 16,PRU_CONNECT2 = 17,PRU_FASTTIMO = 18,PRU_SLOWTIMO = 19,PRU_PROTORCV = 20,PRU_PROTOSEND = 21,};
enum MACRO_PRU_NREQ {PRU_NREQ = 21,};
enum MACRO_PRVERSION {PRVERSION = 0xE,PRMAGIC = 0x31758,PRESTO_DIRTY = 0xBD100248,};
enum MACRO_PR_ATOMIC {PR_ATOMIC = 0x1,PR_ADDR = 0x2,PR_CONNREQUIRED = 0x4,PR_WANTRCVD = 0x8,PR_RIGHTS = 0x10,PR_SEQPACKET = 0x20,PR_READZEROLEN = 0x40,};
enum MACRO_PR_CLEAN {PR_CLEAN = 1,PR_INVAL = 2,PRFSIZE = 1024,};
enum MACRO_PR_SETMASK {PR_SETMASK = 20840496,PR_REQUESTED = 1,};
enum MACRO_PR_SHFT {PR_SHFT = 6,PR_MSK = 63,};
enum MACRO_PR_SIDL {PR_SIDL = 73,PR_SZOMB = 90,};
enum MACRO_PR_SIGNALLED {PR_SIGNALLED = 2,PR_FAULTED = 3,PR_SYSENTRY = 4,PR_SYSEXIT = 5,PR_JOBCONTROL = 6,PR_FORKSTOP = 7,PR_TCRSTOP = 8,PR_TTSTOP = 9,PR_DEAD = 57005,};
enum MACRO_PR_SLOWHZ {PR_SLOWHZ = 2,PR_FASTHZ = 5,};
enum MACRO_PR_SRUN {PR_SRUN = 82,};
enum MACRO_PR_SSTOP {PR_SSTOP = 84,PR_SDEFAULT = 32,};
enum MACRO_PR_STOPPED {PR_STOPPED = 0x1,PR_ISTOP = 0x2,PR_DSTOP = 0x4,PR_ASLEEP = 0x8,PR_FORK = 0x10,PR_RLC = 0x20,PR_PTRACE = 0x40,PR_PCINVAL = 0x80,PR_ISSYS = 0x100,PR_ABORT = 0x8000,PR_TRACING = 0x10000,PR_STOPFORK = 0x20000,PR_STOPEXEC = 0x40000,PR_STOPTERM = 0x80000,PR_STOPTCR = 0x100000,PR_STOPTTERM = 0x200000,PR_ASYNC = 0x400000,PR_USCHED = 0x800000,PR_KLC = 0x1000000,PR_WASTRACED = 0x2000000,PR_TOUCHING = 0x4000000,};
enum MACRO_PR_TINH {PR_TINH = 0x200,PR_TSTOP = 0x400,PR_PNDSTOP = 0x800,PR_KILLSIG = 0x1000,PR_STRACE = 0x2000,PR_CONTSIG = 0x4000,};
enum MACRO_PSEMZ {PSEMZ = 27,SEM_A = 128,SEM_R = 256,};
enum MACRO_PSET {PSET_EXCLUSIVE = 1,PSET_NON_EXCLUSIVE = 2,PSET_RELEASE_THREADS = 4,};
enum MACRO_PSHARED {PSHARED_RWM_LOCK = 0x0,PSHARED_RWM_UNLOCK = 0x0,};
enum MACRO_PSHARED_CV {PSHARED_CV_WAIT = 0x0,PSHARED_CV_SIGNAL = 0x0,};
enum MACRO_PSHARED_CV_BROADCAST {PSHARED_CV_BROADCAST = 0x1,};
enum MACRO_PSHARED_MOD {PSHARED_MOD_ABSTIME = 0x1,PSHARED_MOD_FASTPATH = 0x2,PSHARED_MOD_RECURSIVE = 0x4,PSHARED_MOD_ERRORCHECK = 0x8,};
enum MACRO_PSHARED_RWM {PSHARED_RWM_TRY = 0x1,PSHARED_RWM_READ = 0x2,PSHARED_RWM_WRITE = 0x4,};
enum MACRO_PSIOP {PSIOP_810_BURST_DISABLE = 0x0,SLU_SCC_PCLK_16Mhz = 0xF42400,};
enum MACRO_PSL {PSL_FORMAT = 0,PSL_SIZEBOOT = 15,};
enum MACRO_PSL_START {PSL_START = 1,PSL_SYSSTART = 8,};
enum MACRO_PSSIZE {PSSIZE = 1536,ROMLOW = 2048,ROMHIGH = 2560,RAMLOW = 4096,RAMHIGH = 8192,};
enum MACRO_PSWP {PSWP = 0,PINOD = 10,PRIBIO = 20,PVFS = 22,PRIUBA = 24,PZERO = 25,PPIPE = 26,PWAIT = 30,PLOCK = 35,PSLEP = 40,PUSER = 50,PMASK = 127,PCATCH = 256,PSUSP = 512,};
enum MACRO_PSX4 {PSX4_LOCK_ENTRY = 1,PSX4_UNLOCK_ENTRY = 0,};
enum MACRO_PSX4_KEY {PSX4_KEY_VERSION_MAX = 65535,};
enum MACRO_PSX4_KEY_ENTRY {PSX4_KEY_ENTRY_NULL = 0,PSX4_KEY_TABLE_NULL = 0,};
enum MACRO_PSX4_KEY_STATE {PSX4_KEY_STATE_FREE = 0,PSX4_KEY_STATE_INUSE = 1,PSX4_KEY_STATE_MARKED_FOR_DELETE = 2,};
enum MACRO_PT {PT_NULL = 0,PT_LOAD = 1,PT_DYNAMIC = 2,PT_INTERP = 3,PT_NOTE = 4,PT_SHLIB = 5,PT_PHDR = 6,PT_LOPROC = 1879048192,PT_HIPROC = 2147483647,};
enum MACRO_PTHREAD {PTHREAD_TEB_VERSION = 1,};
enum MACRO_PTHREAD_CANCEL {PTHREAD_CANCEL_DISABLE = 0,PTHREAD_CANCEL_ENABLE = 1,};
enum MACRO_PTHREAD_CANCEL_DEFERRED {PTHREAD_CANCEL_DEFERRED = 0,PTHREAD_CANCEL_ASYNCHRONOUS = 1,PTHREAD_CANCELED = -1,};
enum MACRO_PTHREAD_CREATE {PTHREAD_CREATE_JOINABLE = 0,PTHREAD_CREATE_DETACHED = 1,PRI_FIFO_MIN = 14,PRI_FIFO_MAX = 63,};
enum MACRO_PTHREAD_DEBUG {PTHREAD_DEBUG_VERSION = 3,};
enum MACRO_PTHREAD_DEBUG_COND {PTHREAD_DEBUG_COND_NAME = 0x1,PTHREAD_DEBUG_COND_PEND = 0x2,PTHREAD_DEBUG_COND_WAITERS = 0x4,PTHREAD_DEBUG_COND_METERED = 0x8,PTHREAD_DEBUG_COND_INTERNAL = 0x10,PTHREAD_DEBUG_COND_PSHARED = 0x20,PTHREAD_DEBUG_COND_TRACED = 0x40,};
enum MACRO_PTHREAD_DEBUG_EVTRUN {PTHREAD_DEBUG_EVTRUN_PREEMPTED = 0x1,PTHREAD_DEBUG_EVTRUN_KERNEL = 0x2,};
enum MACRO_PTHREAD_DEBUG_EVTTRM {PTHREAD_DEBUG_EVTTRM_LOCKS = 0x1,};
enum MACRO_PTHREAD_DEBUG_EVTUBL {PTHREAD_DEBUG_EVTUBL_PEND = 0x1,};
enum MACRO_PTHREAD_DEBUG_KRNBFLG {PTHREAD_DEBUG_KRNBFLG_FAULT = 0x1,PTHREAD_DEBUG_KRNBFLG_SYSCALL = 0x2,};
enum MACRO_PTHREAD_DEBUG_KTD {PTHREAD_DEBUG_KTD_POLICY = 0x1,PTHREAD_DEBUG_KTD_BPRIO = 0x2,PTHREAD_DEBUG_KTD_CPRIO = 0x4,PTHREAD_DEBUG_KTD_SUSPCNT = 0x8,PTHREAD_DEBUG_KTD_SIGBLK = 0x10,PTHREAD_DEBUG_KTD_SIGPND = 0x20,PTHREAD_DEBUG_KTD_SLEEP = 0x40,PTHREAD_DEBUG_KTD_WAIT = 0x80,PTHREAD_DEBUG_KTD_USER = 0x100,PTHREAD_DEBUG_KTD_SYSTEM = 0x200,PTHREAD_DEBUG_KTD_SCHCLS = 0x400,};
enum MACRO_PTHREAD_DEBUG_MUT {PTHREAD_DEBUG_MUT_NAME = 0x1,PTHREAD_DEBUG_MUT_LOCKED = 0x2,PTHREAD_DEBUG_MUT_WAITERS = 0x4,PTHREAD_DEBUG_MUT_METERED = 0x8,PTHREAD_DEBUG_MUT_INTERNAL = 0x10,PTHREAD_DEBUG_MUT_PSHARED = 0x20,PTHREAD_DEBUG_MUT_TRACED = 0x40,};
enum MACRO_PTHREAD_DEBUG_RW {PTHREAD_DEBUG_RW_NAME = 0x1,PTHREAD_DEBUG_RW_RDLOCKED = 0x2,PTHREAD_DEBUG_RW_WRLOCKED = 0x4,PTHREAD_DEBUG_RW_RWAITERS = 0x8,PTHREAD_DEBUG_RW_WWAITERS = 0x10,PTHREAD_DEBUG_RW_INTERNAL = 0x20,PTHREAD_DEBUG_RW_PSHARED = 0x40,};
enum MACRO_PTHREAD_DEBUG_THD {PTHREAD_DEBUG_THD_CANCEL = 0x1,PTHREAD_DEBUG_THD_CAN_ENABLED = 0x2,PTHREAD_DEBUG_THD_CAN_ASYNC = 0x4,PTHREAD_DEBUG_THD_CAN_SYSTEM = 0x8,PTHREAD_DEBUG_THD_NAME = 0x10,PTHREAD_DEBUG_THD_SYS_SCOPE = 0x20,PTHREAD_DEBUG_THD_INTERNAL = 0x40,PTHREAD_DEBUG_THD_HOLD = 0x80,PTHREAD_DEBUG_THD_SUSPEND = 0x100,PTHREAD_DEBUG_THD_JOINER = 0x200,PTHREAD_DEBUG_THD_STACKADDR = 0x400,PTHREAD_DEBUG_THD_ESTACKADDR = 0x800,PTHREAD_DEBUG_THD_DETACH = 0x1000,};
enum MACRO_PTHREAD_DEBUG_TSD {PTHREAD_DEBUG_TSD_NAME = 0x1,PTHREAD_DEBUG_TSD_RESERVED = 0x2,PTHREAD_DEBUG_TSD_ALLTHREAD = 0x4,PTHREAD_DEBUG_TSD_EXTENDED = 0x8,};
enum MACRO_PTHREAD_DESTRUCTOR {PTHREAD_DESTRUCTOR_ITERATIONS = 4,_NFILE = 64,};
enum MACRO_PTHREAD_INHERIT {PTHREAD_INHERIT_SCHED = 0,PTHREAD_EXPLICIT_SCHED = 1,};
enum MACRO_PTHREAD_KEY {PTHREAD_KEY_INITIALIZER_NP = 0,PTHREAD_KEY_ALLTHREAD_NP = 1,};
enum MACRO_PTHREAD_KEYS {PTHREAD_KEYS_MAX = 255,PTHREAD_STACK_MIN = 8192,};
enum MACRO_PTHREAD_MUTEX {PTHREAD_MUTEX_NORMAL = 0,PTHREAD_MUTEX_RECURSIVE = 1,PTHREAD_MUTEX_ERRORCHECK = 2,};
enum MACRO_PTHREAD_MUTEX_DEFAULT {PTHREAD_MUTEX_DEFAULT = 0,PTHREAD_PROCESS_PRIVATE = 0,};
enum MACRO_PTHREAD_MUTEX_NORMAL {PTHREAD_MUTEX_NORMAL_NP = 0,PTHREAD_MUTEX_RECURSIVE_NP = 1,PTHREAD_MUTEX_ERRORCHECK_NP = 2,};
enum MACRO_PTHREAD_ONCE {PTHREAD_ONCE_UNINIT = 0,PTHREAD_ONCE_INITING = 1,PTHREAD_ONCE_INITED = 2,};
enum MACRO_PTHREAD_PROCESS {PTHREAD_PROCESS_SHARED = 1,_PTHREAD_MSTATE_CONFIG = 2097152,_PTHREAD_MSTATE_TYPE = 251658240,};
enum MACRO_PTHREAD_SCOPE {PTHREAD_SCOPE_PROCESS = 0,PTHREAD_SCOPE_SYSTEM = 1,};
enum MACRO_PTHREAD_TEB {PTHREAD_TEB_EFLG_USER = 0x1,PTHREAD_TEB_EFLG_INITIAL = 0x2,};
enum MACRO_PTHREAD_TEB_CREATOR {PTHREAD_TEB_CREATOR_PTHREAD = 1,PTHREAD_TEB_CREATOR_CMA = 2,PTHREAD_TEB_CREATOR_D4 = 3,PTHREAD_TEB_CREATOR_D4EXC = 4,};
enum MACRO_PTHREAD_TRACE {PTHREAD_TRACE_VERSION = 100,};
enum MACRO_PTHREAD_TRACE_COND {PTHREAD_TRACE_COND_NAME = 0x1,PTHREAD_TRACE_COND_INTERNAL = 0x2,PTHREAD_TRACE_COND_PSHARED = 0x4,PTHREAD_TRACE_COND_ERROR = 0x8,PTHREAD_TRACE_COND_INVATTR = 0x10,};
enum MACRO_PTHREAD_TRACE_ID {PTHREAD_TRACE_ID_OBJ_B = 0,PTHREAD_TRACE_ID_OP_B = 8,PTHREAD_TRACE_ID_STS_B = 24,};
enum MACRO_PTHREAD_TRACE_KEY {PTHREAD_TRACE_KEY_NAME = 0x1,PTHREAD_TRACE_KEY_RESERVED = 0x2,PTHREAD_TRACE_KEY_ALLTHREAD = 0x4,PTHREAD_TRACE_KEY_EXTENDED = 0x8,PTHREAD_TRACE_KEY_ERROR = 0x10,PTHREAD_TRACE_NATEXC_SIZE_MAX = 0x100,};
enum MACRO_PTHREAD_TRACE_LOG {PTHREAD_TRACE_LOG_VERSION = 7,PTHREAD_TRACE_LOG_BUFSIZE = 1048576,};
enum MACRO_PTHREAD_TRACE_MAXARGS {PTHREAD_TRACE_MAXARGS = 64,PTHREAD_TRACE_ID_OBJ_M = 255,PTHREAD_TRACE_ID_OP_M = 16776960,PTHREAD_TRACE_ID_STS_M = -16777216,};
enum MACRO_PTHREAD_TRACE_MUT {PTHREAD_TRACE_MUT_NAME = 0x1,PTHREAD_TRACE_MUT_INTERNAL = 0x2,PTHREAD_TRACE_MUT_PSHARED = 0x4,PTHREAD_TRACE_MUT_ERROR = 0x8,PTHREAD_TRACE_MUT_INVATTR = 0x10,};
enum MACRO_PTHREAD_TRACE_RW {PTHREAD_TRACE_RW_NAME = 0x1,PTHREAD_TRACE_RW_INTERNAL = 0x2,PTHREAD_TRACE_RW_PSHARED = 0x4,PTHREAD_TRACE_RW_ERROR = 0x8,PTHREAD_TRACE_RW_INVATTR = 0x10,};
enum MACRO_PTHREAD_TRACE_THD {PTHREAD_TRACE_THD_NAME = 0x1,PTHREAD_TRACE_THD_SYS_SCOPE = 0x2,PTHREAD_TRACE_THD_INTERNAL = 0x4,PTHREAD_TRACE_THD_ERROR = 0x8,PTHREAD_TRACE_THD_INVATTR = 0x10,PTHREAD_TRACE_THD_DETACH = 0x20,PTHREAD_TRACE_THD_STACKADDR = 0x40,PTHREAD_TRACE_THD_ESTACKADDR = 0x80,};
enum MACRO_PTYLBITS {PTYLBITS = 4,PTYLMASK = 15,PIOCXIOC = 536891392,PIOCSEOF = 536891408,};
enum MACRO_PTYNOIOCTL {PTYNOIOCTL = 0x100000,PTYDETHUP = 0x200000,PTYLOGGEDIN = 0x400000,PTYDETACHED = 0x800000,PTYNEWSIG = 0x1000000,PTYHOLDSIG = 0x2000000,PTYNOBLOCK = 0x4000000,PTYCCMSG = 0x8000000,PTYSIM = 0x10000000,};
enum MACRO_PT_TRACE {PT_TRACE_ME = 0,PT_READ_I = 1,PT_READ_D = 2,PT_READ_U = 3,PT_WRITE_I = 4,PT_WRITE_D = 5,PT_WRITE_U = 6,PT_CONTINUE = 7,PT_KILL = 8,PT_STEP = 9,PT_NOSTEP = 10,};
enum MACRO_PW {PW_NOCHECK = 0x1,PW_ADMCHG = 0x2,PW_ADMIN = 0x4,PW_PASSLEN = 0x8,PW_NAMELEN = 0x20,};
enum MACRO_PWDAUTH {PWDAUTH_PROG = 100036,PWDAUTH_VERS = 1,};
enum MACRO_PWDAUTHSRV {PWDAUTHSRV = 1,GRPAUTHSRV = 2,};
enum MACRO_PW_CRYPTLEN {PW_CRYPTLEN = 16,};
enum MACRO_PX {PX_DTYPE = 12,GQ_DTYPE = 13,};
enum MACRO_PXG {PXG_DTYPE = 13,WS_DTYPE = 14,PV_DTYPE = 15,VGA_DTYPE = 16,TGA_DTYPE = 17,};
enum MACRO_P_ACK {P_ACK = 42,P_ERROR = 101,};
enum MACRO_P_CONT {P_CONT = 99,P_STEP = 115,P_EXIT = 120,};
enum MACRO_P_DATA {P_DATA_WRITE = 68,P_THREAD_CNT = 116,};
enum MACRO_P_INIT {P_INIT = 98,};
enum MACRO_P_NAM {P_NAM = 2,P_SET = 3,P_END = 4,};
enum MACRO_P_OFFLINE {P_OFFLINE = 1,P_ONLINE = 2,P_QUERY = 3,};
enum MACRO_P_REG {P_REG_READ = 114,};
enum MACRO_P_REG_WRITE {P_REG_WRITE = 82,P_DATA_READ = 100,};
enum MACRO_P_STATUS {P_STATUS = 3,P_BAD = 4,PI_TYPELEN = 32,};
enum MACRO_P_THREAD {P_THREAD_LIST = 84,P_SET_PID = 112,};
enum MACRO_PlaceOnTop {PlaceOnTop = 0,PlaceOnBottom = 1,};
enum MACRO_PointerRoot {PointerRoot = 1,};
enum MACRO_PointerWindow {PointerWindow = 0,InputFocus = 1,};
enum MACRO_PropModeReplace {PropModeReplace = 0,PropModePrepend = 1,PropModeAppend = 2,};
enum MACRO_PropTypeString {PropTypeString = 0,PropTypeUnsigned = 1,PropTypeSigned = 2,};
enum MACRO_PropertyNewValue {PropertyNewValue = 0,PropertyDelete = 1,};
enum MACRO_Q {Q_QUOTAON = 0x100,Q_QUOTAOFF = 0x200,Q_GETQUOTA = 0x300,Q_SETQUOTA = 0x400,Q_SETUSE = 0x500,Q_SYNC = 0x600,Q_QUOTAINFO = 0x700,Q_GETQUOTA64 = 0x800,Q_SETQUOTA64 = 0x900,Q_SETUSE64 = 0xA00,};
enum MACRO_QDSS {QDSS = 3,};
enum MACRO_QFIXEDSZ {QFIXEDSZ = 4,RRFIXEDSZ = 10,};
enum MACRO_QSTS {QSTS_QUOTA_ON = 0x1,QSTS_USR_QUOTA_MT = 0x4,QSTS_GRP_QUOTA_MT = 0x8,QSTS_USR_QUOTA_EN = 0x10,QSTS_GRP_QUOTA_EN = 0x20,QSTS_LARGE_LIMITS = 0x400,};
enum MACRO_QUALIFIED {QUALIFIED_TOKEN = 81,TEMPLATE_TOKEN = 84,};
enum MACRO_QUOTA32 {QUOTA32 = 4,QUOTA64 = 8,QUOTA32_MAX = -1,};
enum MACRO_QVSS {QVSS = 1,LOCAL = 3,};
enum MACRO_QueuedAlready {QueuedAlready = 0,QueuedAfterReading = 1,QueuedAfterFlush = 2,};
enum MACRO_R {R_ACC = 0x4,};
enum MACRO_RAND {RAND_MAX = 32767,};
enum MACRO_RAPI {RAPI_XASPEC_FLG_BRK = 0x1,RAPI_XASPEC_FLG_IGN = 0x2,RAPI_XASPEC_FLG_PARM = 0x4,RAPI_VERSION = 0x1F6,};
enum MACRO_RAPI_ERR {RAPI_ERR_OK = 0,RAPI_ERR_INVAL = 1,RAPI_ERR_MAXSESS = 2,RAPI_ERR_BADSID = 3,RAPI_ERR_N_FFS = 4,RAPI_ERR_BADSTYLE = 5,RAPI_ERR_SYSCALL = 6,RAPI_ERR_OVERFLOW = 7,RAPI_ERR_MEMFULL = 8,RAPI_ERR_NORSVP = 9,RAPI_ERR_OBJTYPE = 10,RAPI_ERR_OBJLEN = 11,RAPI_ERR_NOTSPEC = 12,RAPI_ERR_INTSERV = 13,RAPI_ERR_GPI_CONFLICT = 14,RAPI_ERR_BADPROTO = 15,RAPI_ERR_BADVDPORT = 16,RAPI_ERR_GPISESS = 17,RAPI_ERR_BADSEND = 21,RAPI_ERR_BADRECV = 22,RAPI_ERR_BADSPORT = 23,RAPI_ERR_UNSUPPORTED = 254,RAPI_ERR_UNKNOWN = 255,};
enum MACRO_RAPI_ERRF {RAPI_ERRF_InPlace = 0x1,RAPI_ERRF_NotGuilty = 0x2,RAPI_USE_INTSERV = 0x10,};
enum MACRO_RAPI_ERR_MAXERROR {RAPI_ERR_MAXERROR = 255,};
enum MACRO_RAPI_GPI {RAPI_GPI_SESSION = 0x8,RAPI_REQ_CONFIRM = 0x20,};
enum MACRO_RAPI_RSTYLE {RAPI_RSTYLE_MAX = 3,RAPI_NULL_SID = 0,};
enum MACRO_RAWRCVQ {RAWRCVQ = 8192,};
enum MACRO_RAWSNDQ {RAWSNDQ = 8192,};
enum MACRO_RB {RB_AUTOBOOT = 0,RB_ASKNAME = 1,RB_SINGLE = 2,RB_NOSYNC = 4,};
enum MACRO_RB_KDB {RB_KDB = 0x4,RB_HALT = 0x8,RB_INITNAME = 0x10,RB_DFLTROOT = 0x20,RB_ALTBOOT = 0x40,RB_UNIPROC = 0x80,RB_PARAM = 0x100,RB_DUMP = 0x200,};
enum MACRO_RB_PANIC {RB_PANIC = 0,RB_BOOT = 1,RB_POWERDOWN = 1024,};
enum MACRO_RCV {RCV_SUCCESS = 0,RCV_ERRORS_START = -200,};
enum MACRO_RCV_B7 {RCV_B7_0 = 1,RCV_B7_1 = 2,RCV_EVNP = 4,RCV_ODDP = 8,PPPCTL_OERROR = 224,PPPCTL_IERROR = 225,PPPCTL_MTU = 226,PPPCTL_MRU = 227,PPPCTL_UNIT = 228,PPPDBG_DUMP = 65536,};
enum MACRO_RCV_ERRORS {RCV_ERRORS_END = -209,};
enum MACRO_RCV_INTERRUPTED {RCV_INTERRUPTED = -207,};
enum MACRO_RCV_INVALID {RCV_INVALID_MEMORY = -201,};
enum MACRO_RCV_INVALID_PORT {RCV_INVALID_PORT = -202,};
enum MACRO_RCV_NOT {RCV_NOT_ENOUGH_MEMORY = -205,};
enum MACRO_RCV_ONLY {RCV_ONLY_SENDER = -206,};
enum MACRO_RCV_PORT {RCV_PORT_CHANGE = -208,};
enum MACRO_RCV_TIMED {RCV_TIMED_OUT = -203,};
enum MACRO_RCV_TOO {RCV_TOO_LARGE = -204,};
enum MACRO_RDTMAX {RDTMAX = 1024,};
enum MACRO_RE {RE_DUP_MAX = 255,};
enum MACRO_REALTIMER {REALTIMER_CPU = 0xFF,REALTIMER_COE = 0x100,REALTIMER_ACTIVE = 0x200,REALTIMER_ABORT = 0x400,};
enum MACRO_REC {REC_EOR = 0x1,REC_EOF = 0x2,BLK_EOR = 0x80,};
enum MACRO_RECORD {RECORD_MAJOR_VERSION = 1,RECORD_MINOR_VERSION = 13,};
enum MACRO_RECORD_LOWEST {RECORD_LOWEST_MAJOR_VERSION = 1,RECORD_LOWEST_MINOR_VERSION = 12,};
enum MACRO_REENTRANT {REENTRANT = 1,};
enum MACRO_REG {REG_EXTENDED = 0x1,REG_ICASE = 0x2,REG_NEWLINE = 0x4,REG_NOSUB = 0x8,REG_WORD = 0x10,REG_NOTBOL = 0x100,REG_NOTEOL = 0x200,};
enum MACRO_REGLOCK {REGLOCK = 16,MAP_FAILED = -1,};
enum MACRO_REG_BASE {REG_BASE = 0,NGP_REGS = 32,};
enum MACRO_REG_NOMATCH {REG_NOMATCH = 1,REG_BADPAT = 2,REG_ECOLLATE = 3,REG_ECTYPE = 4,REG_EESCAPE = 5,REG_ESUBREG = 6,REG_EBRACK = 7,REG_EPAREN = 8,REG_EBRACE = 9,REG_BADBR = 10,REG_ERANGE = 11,REG_ESPACE = 12,REG_BADRPT = 13,REG_ECHAR = 14,REG_MPAREN = 15,REG_ENOSYS = 17,};
enum MACRO_REP {REP_DEF_DECAY = 5,REP_DEF_INITIAL_DELAY = 200,};
enum MACRO_REP_DEF {REP_DEF_MINIMUM_DELAY = 10,REP_DEF_REPEAT_DELAY = 50,};
enum MACRO_RES {RES_INIT = 0x1,RES_DEBUG = 0x2,RES_AAONLY = 0x4,RES_USEVC = 0x8,RES_PRIMARY = 0x10,RES_IGNTC = 0x20,RES_RECURSE = 0x40,RES_DEFNAMES = 0x80,RES_STAYOPEN = 0x100,RES_DNSRCH = 0x200,RES_INSECURE1 = 0x400,RES_INSECURE2 = 0x800,RES_NOALIASES = 0x1000,RES_ALLOW_ALL = 0x2000,RES_NOSYSLOG = 0x1000000,};
enum MACRO_RESUMEb {RESUMEb = 64,};
enum MACRO_RES_DEFAULT {RES_DEFAULT = 704,RES_PRF_STATS = 1,};
enum MACRO_RES_MEM {RES_MEM = 0,RES_IRQ = 1,RES_DMA = 2,RES_PORT = 3,};
enum MACRO_RES_PRF {RES_PRF_UPDATE = 0x2,RES_PRF_CLASS = 0x4,RES_PRF_CMD = 0x8,RES_PRF_QUES = 0x10,RES_PRF_ANS = 0x20,RES_PRF_AUTH = 0x40,RES_PRF_ADD = 0x80,RES_PRF_HEAD1 = 0x100,RES_PRF_HEAD2 = 0x200,RES_PRF_TTLID = 0x400,RES_PRF_HEADX = 0x800,RES_PRF_QUERY = 0x1000,RES_PRF_REPLY = 0x2000,RES_PRF_INIT = 0x4000,};
enum MACRO_RET {RET_ERROR = -1,RET_SUCCESS = 0,};
enum MACRO_RETURNADDR {RETURNADDR = 0,};
enum MACRO_RETURNOK {RETURNOK = 0,};
enum MACRO_RET_SPECIAL {RET_SPECIAL = 1,MAX_PAGE_NUMBER = -1,};
enum MACRO_REWIND {REWIND_DEV = 0x0,NO_REWIND = 0x1,DENS_MASK = 0x6,};
enum MACRO_REX {REX_INTERACTIVE = 1,};
enum MACRO_REXPROC {REXPROC_NULL = 0,REXPROC_START = 1,REXPROC_WAIT = 2,REXPROC_MODES = 3,REXPROC_WINCH = 4,REXPROC_SIGNAL = 5,};
enum MACRO_REXVERS {REXVERS = 1,};
enum MACRO_RFS {RFS_NULL = 0,RFS_GETATTR = 1,RFS_SETATTR = 2,RFS_ROOT = 3,RFS_LOOKUP = 4,RFS_READLINK = 5,RFS_READ = 6,RFS_WRITECACHE = 7,RFS_WRITE = 8,RFS_CREATE = 9,RFS_REMOVE = 10,RFS_RENAME = 11,RFS_LINK = 12,RFS_SYMLINK = 13,RFS_MKDIR = 14,RFS_RMDIR = 15,RFS_READDIR = 16,RFS_STATFS = 17,RFS_NPROC = 18,RFS_NULLPROPLIST = 19,RFS_GETPROPLIST = 20,RFS_SETPROPLIST = 21,RFS_DELPROPLIST = 22,};
enum MACRO_RFS3 {RFS3_NULL = 0,RFS3_GETATTR = 1,RFS3_SETATTR = 2,RFS3_LOOKUP = 3,RFS3_ACCESS = 4,RFS3_READLINK = 5,RFS3_READ = 6,RFS3_WRITE = 7,RFS3_CREATE = 8,RFS3_MKDIR = 9,RFS3_SYMLINK = 10,RFS3_MKNOD = 11,RFS3_REMOVE = 12,RFS3_RMDIR = 13,RFS3_RENAME = 14,RFS3_LINK = 15,RFS3_READDIR = 16,RFS3_READDIRPLUS = 17,RFS3_FSSTAT = 18,RFS3_FSINFO = 19,RFS3_PATHCONF = 20,RFS3_COMMIT = 21,RFS3_NULLPROPLIST = 22,RFS3_GETPROPLIST = 23,RFS3_SETPROPLIST = 24,RFS3_DELPROPLIST = 25,};
enum MACRO_RHF {RHF_NONE = 0x0,RHF_QUICKSTART = 0x1,RHF_NOTPOT = 0x2,RHF_NO_LIBRARY_REPLACEMENT = 0x4,RHF_NO_MOVE = 0x8,RHF_TLS = 0x4000000,RHF_BIND_NOW = 0x8000000,RHF_RING_SEARCH = 0x10000000,RHF_DEPTH_FIRST = 0x20000000,RHF_USE_31BIT_ADDRESSES = 0x40000000,RHF_RESERVED_SIGN_BIT = 0x80000000,};
enum MACRO_RIF {RIF_NOTUSE = 0,RIF_NOROUTE = 1,RIF_ONRING = 2,RIF_HAVEROUTE = 3,RIF_REDISCOVER = 4,RIF_STALE = 5,};
enum MACRO_RIIndicator {RIIndicator = 0x1,TRN4_RFC1042_IP_MTU = 0xFFC,TRN16_RFC1042_IP_MTU = 0x1FFC,};
enum MACRO_RING {RING_WAIT = 30,};
enum MACRO_RIPCMD {RIPCMD_REQUEST = 1,RIPCMD_RESPONSE = 2,RIPCMD_TRACEON = 3,RIPCMD_TRACEOFF = 4,RIPCMD_MAX = 5,HOPCNT_INFINITY = 16,MAXPACKETSIZE = 512,};
enum MACRO_RIPVERSION {RIPVERSION = 1,};
enum MACRO_RLD {RLD_VERSION = 3,};
enum MACRO_RLD_VERSION {RLD_VERSION_2 = 2,RLD_VERSION_ONE_GOT = 1,};
enum MACRO_RLIM {RLIM_NLIMITS = 8,};
enum MACRO_RLIMIT {RLIMIT_CPU = 0,RLIMIT_FSIZE = 1,RLIMIT_DATA = 2,RLIMIT_STACK = 3,RLIMIT_CORE = 4,RLIMIT_RSS = 5,RLIMIT_NOFILE = 6,RLIMIT_AS = 7,};
enum MACRO_RLIMIT_VMEM {RLIMIT_VMEM = 7,RLIM_INFINITY = -1,};
enum MACRO_RNF {RNF_NORMAL = 1,RNF_ROOT = 2,RNF_ACTIVE = 4,MAXKEYLEN = 32,};
enum MACRO_RNORM {RNORM = 0x1,RMSGD = 0x2,RMSGN = 0x4,RFILL = 0x8,RPROTNORM = 0x10,RPROTDIS = 0x20,RPROTDAT = 0x40,RPROTCOMPRESS = 0x80,};
enum MACRO_RPAUSE {RPAUSE_SAME = 0,RPAUSE_DISABLE = 1,RPAUSE_ENABLE = 2,RPAUSE_ALL = 2147483647,};
enum MACRO_RPCSMALLMSGSIZE {RPCSMALLMSGSIZE = 400,};
enum MACRO_RPCTEST {RPCTEST_PROGRAM = 1,};
enum MACRO_RPCTEST_VERSION {RPCTEST_VERSION = 1,RPCTEST_NULL_PROC = 2,RPCTEST_NULL_BATCH_PROC = 3,};
enum MACRO_RPC_ANYSOCK {RPC_ANYSOCK = -1,};
enum MACRO_RPC_MSG {RPC_MSG_VERSION = 2,RPC_SERVICE_PORT = 2048,};
enum MACRO_RQUOTAPROC {RQUOTAPROC_GETQUOTA = 1,RQUOTAPROC_GETACTIVEQUOTA = 2,};
enum MACRO_RQUOTAPROG {RQUOTAPROG = 100011,};
enum MACRO_RQUOTAVERS {RQUOTAVERS_ORIG = 1,};
enum MACRO_RQUOTAVERS_0 {RQUOTAVERS = 1,};
enum MACRO_RRIP {RRIP_SIG_PX_0 = 80,RRIP_SIG_PX_1 = 88,};
enum MACRO_RRIP_ER {RRIP_ER_IDENT_LEN = 10,};
enum MACRO_RRIP_ER_DESC {RRIP_ER_DESC_LEN = 84,};
enum MACRO_RRIP_ER_SRC {RRIP_ER_SRC_LEN = 135,};
enum MACRO_RRIP_NM {RRIP_NM_CONTINUE = 0x1,RRIP_NM_CURRENT = 0x2,RRIP_NM_PARENT = 0x4,RRIP_NM_RSVD1 = 0x8,RRIP_NM_RSVD2 = 0x10,RRIP_NM_HOST = 0x20,};
enum MACRO_RRIP_RR {RRIP_RR_PX_PRESENT = 0x1,RRIP_RR_PN_PRESENT = 0x2,RRIP_RR_SL_PRESENT = 0x4,RRIP_RR_NM_PRESENT = 0x8,RRIP_RR_CL_PRESENT = 0x10,RRIP_RR_PL_PRESENT = 0x20,RRIP_RR_RE_PRESENT = 0x40,RRIP_RR_TF_PRESENT = 0x80,};
enum MACRO_RRIP_RR_LARGEST {RRIP_RR_LARGEST = 128,RRIP_ER_VERSION = 1,};
enum MACRO_RRIP_SIG {RRIP_SIG_PN_0 = 80,};
enum MACRO_RRIP_SIG_CL {RRIP_SIG_CL_0 = 67,RRIP_SIG_CL_1 = 76,RRIP_SIG_PL_0 = 80,};
enum MACRO_RRIP_SIG_NM {RRIP_SIG_NM_1 = 77,};
enum MACRO_RRIP_SIG_PL {RRIP_SIG_PL_1 = 76,RRIP_SIG_RE_0 = 82,};
enum MACRO_RRIP_SIG_PN {RRIP_SIG_PN_1 = 78,RRIP_SIG_SL_0 = 83,};
enum MACRO_RRIP_SIG_RE {RRIP_SIG_RE_1 = 69,RRIP_SIG_TF_0 = 84,};
enum MACRO_RRIP_SIG_RR {RRIP_SIG_RR_1 = 82,};
enum MACRO_RRIP_SIG_SL {RRIP_SIG_SL_1 = 76,RRIP_SIG_NM_0 = 78,};
enum MACRO_RRIP_SIG_TF {RRIP_SIG_TF_1 = 70,RRIP_SIG_RR_0 = 82,};
enum MACRO_RRIP_SL {RRIP_SL_CONTINUE = 0x1,};
enum MACRO_RRIP_SLC {RRIP_SLC_CONTINUE = 0x1,RRIP_SLC_CURRENT = 0x2,RRIP_SLC_PARENT = 0x4,RRIP_SLC_ROOT = 0x8,RRIP_SLC_VOLROOT = 0x10,RRIP_SLC_HOST = 0x20,};
enum MACRO_RRIP_TF {RRIP_TF_CREATION = 0x1,RRIP_TF_MODIFY = 0x2,RRIP_TF_ACCESS = 0x4,RRIP_TF_ATTRIBUTES = 0x8,RRIP_TF_BACKUP = 0x10,RRIP_TF_EXPIRATION = 0x20,RRIP_TF_EFFECTIVE = 0x40,RRIP_TF_LONG_FORM = 0x80,};
enum MACRO_RRQ {RRQ = 0x1,WRQ = 0x2,DATA = 0x3,ACK = 0x4,};
enum MACRO_RS {RS_HIPRI = 0x1,};
enum MACRO_RSTATPROC {RSTATPROC_STATS = 1,RSTATPROC_HAVEDISK = 2,RSTATVERS_TIME = 3,RSTATVERS_VAR = 4,};
enum MACRO_RSTATVERS {RSTATVERS_SWTCH = 2,};
enum MACRO_RSVP {RSVP_Err_NONE = 0,RSVP_Err_ADMISSION = 1,RSVP_Err_POLICY = 2,RSVP_Err_NO_PATH = 3,RSVP_Err_NO_SENDER = 4,RSVP_Err_BAD_STYLE = 5,RSVP_Err_UNKNOWN_STYLE = 6,RSVP_Err_BAD_DSTPORT = 7,RSVP_Err_BAD_SNDPORT = 8,RSVP_Err_PREEMPTED = 12,RSVP_Err_UNKN_OBJ_CLASS = 13,RSVP_Err_UNKNOWN_CTYPE = 14,RSVP_Err_API_ERROR = 20,RSVP_Err_TC_ERROR = 21,RSVP_Err_TC_SYS_ERROR = 22,RSVP_Err_RSVP_STS_ERROR = 23,};
enum MACRO_RSVP_Err {RSVP_Err_MAXERROR = 23,};
enum MACRO_RT {RT_HAB_NO = 0x2000000,};
enum MACRO_RTA {RTA_DST = 0x1,RTA_GATEWAY = 0x2,RTA_NETMASK = 0x4,RTA_GENMASK = 0x8,RTA_IFP = 0x10,RTA_IFA = 0x20,RTA_AUTHOR = 0x40,RTA_BRD = 0x80,RTA_SRC = 0x100,RTA_BITMAP = 0x200,RTA_PRECEDENCE = 0x400,RTA_OLDGATEWAY = 0x800,RTA_OLDIFINDEX = 0x1000,};
enum MACRO_RTF {RTF_UP = 0x1,RTF_GATEWAY = 0x2,RTF_HOST = 0x4,RTF_REJECT = 0x8,RTF_DYNAMIC = 0x10,RTF_MODIFIED = 0x20,RTF_DONE = 0x40,RTF_MASK = 0x80,RTF_CLONING = 0x100,RTF_XRESOLVE = 0x200,RTF_LLINFO = 0x400,RTF_STATIC = 0x800,RTF_BLACKHOLE = 0x1000,RTF_PROTO3 = 0x2000,RTF_PROTO2 = 0x4000,RTF_PROTO1 = 0x8000,RTF_WASCLONED = 0x10000,RTF_BOGUSGW = 0x20000,RTF_ALLROUTES = 0x40000,RTF_LOOPBACK = 0x80000,RTF_CLUALIAS = 0x100000,RTF_NOT_MROUTING = 0x10000000,RTF_SND_USES_SHARED_TREE = 0x20000000,RTF_ALL_USE_SHARED_TREE = 0x40000000,};
enum MACRO_RTLD {RTLD_LAZY = 1,RTLD_NOW = 2,RTLD_GLOBAL = 4,RTLD_LOCAL = 8,RTLD_NEXT = -1,};
enum MACRO_RTLOCK {RTLOCK_LOCKED = 0,RTLOCK_UNLOCKED = 1,};
enum MACRO_RTM {RTM_RTTUNIT = 1000000,};
enum MACRO_RTM_DELETE {RTM_DELETE = 0x2,RTM_CHANGE = 0x3,RTM_GET = 0x4,RTM_LOSING = 0x5,RTM_REDIRECT = 0x6,RTM_MISS = 0x7,RTM_LOCK = 0x8,RTM_OLDADD = 0x9,RTM_OLDDEL = 0xA,RTM_RESOLVE = 0xB,RTM_NEWADDR = 0xC,RTM_DELADDR = 0xD,RTM_IFINFO = 0xE,RTM_VIFINFO = 0xF,RTM_MC_ADD = 0x10,RTM_MC_DELETE = 0x11,RTM_MC_CHANGE = 0x12,RTM_CONFIRM = 0x100,};
enum MACRO_RTM_VERSION {RTM_VERSION = 2,RTM_ADD = 1,};
enum MACRO_RTS {RTS_catchall = 0,RTS_donice = 1,RTS_setprio = 2,RTS_getprio = 3,RTS_setscheduler = 4,RTS_getscheduler = 5,RTS_yield = 6,RTS_kill = 7,RTS_autonice = 8,RTS_shutdown = 9,RTS_thast = 10,RTS_ast = 11,RTS_astcsw = 12,RTS_rqempty5 = 46,};
enum MACRO_RTSIG {RTSIG_MAX = 16,CLOCKDRIFT_MAX = 10000000,DELAYTIMER_MAX = 2147483647,};
enum MACRO_RTS_preempt {RTS_preempt = 14,RTS_sig = 15,RTS_rrqexp = 16,RTS_tsswitch = 17,RTS_await = 37,RTS_wake = 38,RTS_block = 39,};
enum MACRO_RTS_rqempty2 {RTS_rqempty2 = 27,RTS_rqempty3 = 28,RTS_rqlow = 29,RTS_rrqrest3 = 30,RTS_rqinvalid = 36,};
enum MACRO_RTS_rqempty4 {RTS_rqempty4 = 45,};
enum MACRO_RTS_rqmask {RTS_rqmask = 31,RTS_policy = 32,RTS_priority = 33,RTS_max_priority = 34,RTS_fork = 35,RTS_swapin = 49,RTS_swapout = 50,RTS_pth_setprio = 60,RTS_pth_getprio = 61,RTS_pth_setscheduler = 62,RTS_pth_getscheduler = 63,RTS_pth_yield = 64,};
enum MACRO_RTS_rrqsave1 {RTS_rrqsave1 = 18,RTS_rrqrest1 = 20,RTS_rqempty1 = 21,RTS_rrqsave2 = 22,RTS_rrqrest2 = 24,RTS_exec = 40,RTS_run = 42,RTS_totail1 = 43,};
enum MACRO_RTS_rrqsave3 {RTS_rrqsave3 = 19,RTS_rrqsave4 = 23,RTS_remq = 48,};
enum MACRO_RTS_tohead1 {RTS_tohead1 = 25,RTS_totail2 = 44,};
enum MACRO_RTS_tohead2 {RTS_tohead2 = 26,RTS_setrun = 41,};
enum MACRO_RTS_tspreempt {RTS_tspreempt = 13,RTS_rrqsave5 = 47,};
enum MACRO_RTV {RTV_MTU = 0x1,RTV_HOPCOUNT = 0x2,RTV_EXPIRE = 0x4,RTV_RPIPE = 0x8,RTV_SPIPE = 0x10,RTV_SSTHRESH = 0x20,RTV_RTT = 0x40,RTV_RTTVAR = 0x80,};
enum MACRO_RTV11 {RTV11 = 0x101,};
enum MACRO_RT_NOCHANGE {RT_NOCHANGE = -3,};
enum MACRO_RT_SCHED {RT_SCHED_MON = 1,};
enum MACRO_RT_SCHED_CTRL {RT_SCHED_CTRL_HISTORY = 0x80,RT_SCHED_CTRL_COUNTERS = 0x40,RT_SCHED_CTRL_MERGE = 0x20,RT_SCHED_CTRL_POLICY_TIMESHARE = 0x1,};
enum MACRO_RT_SCHED_CTRL_POLICY {RT_SCHED_CTRL_POLICY_FIXEDPRI = 2,RT_SCHED_CTRL_POLICY_FIFO = 4,RT_SCHED_CTRL_POLICY_RR = 8,RT_SCHED_CTRL_POLICY_RT = 12,RT_SCHED_CTRL_POLICY_FIXED = 14,RT_SCHED_CTRL_POLICY_ALL = 15,RT_SCHED_CTRL_DEFAULT = 238,};
enum MACRO_RT_SCHED_HIST {RT_SCHED_HIST_EVTS = 50,RTS_HIST_SIZE = 200,};
enum MACRO_RT_TQDEF {RT_TQDEF = -2,};
enum MACRO_RT_TQINF {RT_TQINF = -1,};
enum MACRO_RUN {RUN_AT_INSTALLED = 1,RUN_BELOW_INSTALLED = -1,};
enum MACRO_RUN_UNKNOWN {RUN_UNKNOWN = 0,CLU_MEMB_NOT_CONF = -1,};
enum MACRO_RUSAGE {RUSAGE_THREAD = 1,RUSAGE_SELF = 0,};
enum MACRO_RUSAGE_CHILDREN {RUSAGE_CHILDREN = -1,};
enum MACRO_RWS {RWS_BLOCK_SIZE_SHIFT = 6,};
enum MACRO_R_ABS {R_ABS = 0,R_REFLONG = 1,R_REFQUAD = 2,R_GPREL32 = 3,R_LITERAL = 4,R_LITUSE = 5,R_GPDISP = 6,R_BRADDR = 7,R_HINT = 8,R_SREL16 = 9,R_SREL32 = 10,R_SREL64 = 11,R_OP_PUSH = 12,R_OP_STORE = 13,R_OP_PSUB = 14,R_OP_PRSHIFT = 15,R_GPVALUE = 16,R_GPRELHIGH = 17,R_GPRELLOW = 18,R_IMMED = 19,R_TLS_LITERAL = 20,R_TLS_HIGH = 21,R_TLS_LOW = 22,MAX_R_TYPE = 23,};
enum MACRO_R_CURSOR {R_CURSOR = 1,__R_UNUSED = 2,R_FIRST = 3,R_IAFTER = 4,R_IBEFORE = 5,R_LAST = 6,R_NEXT = 7,R_NOOVERWRITE = 8,R_PREV = 9,R_SETCURSOR = 10,R_RECNOSYNC = 11,DB_LOCK = 8192,DB_SHMEM = 16384,DB_TXN = 32768,BTREEMAGIC = 340322,};
enum MACRO_R_DUP {R_DUP = 0x1,HASHMAGIC = 0x61561,};
enum MACRO_R_FIXEDLEN {R_FIXEDLEN = 0x1,R_NOKEY = 0x2,R_SNAPSHOT = 0x4,};
enum MACRO_R_IMMED {R_IMMED_GP_16 = 1,R_IMMED_GP_HI32 = 2,R_IMMED_SCN_HI32 = 3,R_IMMED_BR_HI32 = 4,R_IMMED_LO32 = 5,};
enum MACRO_R_LU {R_LU_BASE = 1,R_LU_BYTOFF = 2,R_LU_JSR = 3,};
enum MACRO_R_MIPS {R_MIPS_NONE = 0,R_MIPS_32 = 1,R_MIPS_64 = 2,R_MIPS_GPREL32 = 3,R_MIPS_LITERAL = 4,R_MIPS_LITUSE = 5,R_MIPS_GPDISP = 6,R_MIPS_BRADDR = 7,R_MIPS_HINT = 8,DT_MIPS_RLD_VERSION = 1879048193,DT_MIPS_TIME_STAMP = 1879048194,DT_MIPS_ICHECKSUM = 1879048195,DT_MIPS_IVERSION = 1879048196,DT_MIPS_FLAGS = 1879048197,DT_MIPS_BASE_ADDRESS = 1879048198,DT_MIPS_MSYM = 1879048199,DT_MIPS_CONFLICT = 1879048200,DT_MIPS_LIBLIST = 1879048201,DT_MIPS_LOCAL_GOTNO = 1879048202,DT_MIPS_CONFLICTNO = 1879048203,DT_MIPS_LIBLISTNO = 1879048208,DT_MIPS_SYMTABNO = 1879048209,DT_MIPS_UNREFEXTNO = 1879048210,DT_MIPS_GOTSYM = 1879048211,DT_MIPS_HIPAGENO = 1879048212,DT_MIPS_RLD_MAP = 1879048214,DT_MIPS_SO_SUFFIX = 1879048215,};
enum MACRO_R_R0 {R_R0 = 0,R_R1 = 1,R_R2 = 2,R_R3 = 3,R_R4 = 4,R_R5 = 5,R_R6 = 6,R_R7 = 7,R_R8 = 8,R_R9 = 9,R_R10 = 10,R_R11 = 11,R_R12 = 12,R_R13 = 13,R_R14 = 14,R_R15 = 15,R_R16 = 16,R_R17 = 17,R_R18 = 18,R_R19 = 19,R_R20 = 20,R_R21 = 21,R_R22 = 22,R_R23 = 23,R_R24 = 24,R_R25 = 25,R_R26 = 26,R_R27 = 27,R_R28 = 28,R_R29 = 29,R_R30 = 30,R_R31 = 31,R_F0 = 32,R_F1 = 33,R_F2 = 34,R_F3 = 35,R_F4 = 36,R_F5 = 37,R_F6 = 38,R_F7 = 39,R_F8 = 40,R_F9 = 41,R_F10 = 42,R_F11 = 43,R_F12 = 44,R_F13 = 45,R_F14 = 46,R_F15 = 47,R_F16 = 48,R_F17 = 49,R_F18 = 50,R_F19 = 51,R_F20 = 52,R_F21 = 53,R_F22 = 54,R_F23 = 55,R_F24 = 56,R_F25 = 57,R_F26 = 58,R_F27 = 59,R_F28 = 60,R_F29 = 61,R_F30 = 62,R_F31 = 63,R_EPC = 64,R_PS = 65,R_SR = 70,NREGS = 71,MAXPACKET = 1024,};
enum MACRO_R_SN {R_SN_NULL = 0,R_SN_TEXT = 1,R_SN_RDATA = 2,R_SN_DATA = 3,R_SN_SDATA = 4,R_SN_SBSS = 5,R_SN_BSS = 6,R_SN_INIT = 7,R_SN_LIT8 = 8,R_SN_LIT4 = 9,R_SN_XDATA = 10,R_SN_PDATA = 11,R_SN_FINI = 12,R_SN_LITA = 13,R_SN_ABS = 14,R_SN_RCONST = 15,R_SN_TLSDATA = 16,R_SN_TLSBSS = 17,R_SN_TLSINIT = 18,};
enum MACRO_R_V0 {R_V0 = 0,R_A0 = 16,R_A1 = 17,R_A2 = 18,R_A3 = 19,R_A4 = 20,R_A5 = 21,R_SP = 30,};
enum MACRO_RaiseLowest {RaiseLowest = 0,LowerHighest = 1,};
enum MACRO_RecordMaxCoreRequest {RecordMaxCoreRequest = 127,RecordMaxExtRequest = 255,};
enum MACRO_RecordMaxEvent {RecordMaxEvent = 127,};
enum MACRO_RecordMinDeviceEvent {RecordMinDeviceEvent = 2,RecordMaxDeviceEvent = 6,RecordMaxError = 255,};
enum MACRO_RecordMinExtRequest {RecordMinExtRequest = 128,};
enum MACRO_RecordNumErrors {RecordNumErrors = 1,};
enum MACRO_RecordNumEvents {RecordNumEvents = 0,sz_XRecordRange = 32,};
enum MACRO_RectObjIndex {RectObjIndex = 1,XmWindowObjIndex = 2,};
enum MACRO_RectangleOut {RectangleOut = 0,RectangleIn = 1,RectanglePart = 2,};
enum MACRO_Relative {Relative = 0,Absolute = 1,ProximityState = 2,};
enum MACRO_ReleaseByFreeingColormap {ReleaseByFreeingColormap = 1,};
enum MACRO_RevertToFollowKeyboard {RevertToFollowKeyboard = 3,};
enum MACRO_RevertToNone {RevertToNone = 0,RevertToPointerRoot = 1,RevertToParent = 2,};
enum MACRO_S {S_ISUID = 0x800,S_ISGID = 0x400,S_IRWXU = 0x1C0,};
enum MACRO_SA {SA_SIGINFO = 0x40,};
enum MACRO_SADF {SADF_DEVICE = 0x1,SADF_MODULE = 0x2,SADF_CLONE = 0x4,};
enum MACRO_SAP {SAP_ONE = 1,SAP_RANGE = 2,SAP_ALL = 3,SAP_CLEAR = 4,};
enum MACRO_SARMAG {SARMAG = 8,};
enum MACRO_SA_INPUT {SA_INPUT = 0,SA_OUTPUT = 1,SA_USER = 2,SA_RESPOND = 3,SA_DROP = 4,SPP_NDEBUG = 100,};
enum MACRO_SA_ONSTACK {SA_ONSTACK = 0x1,SA_RESTART = 0x2,SA_NODEFER = 0x8,SA_RESETHAND = 0x10,SA_NOCLDWAIT = 0x20,SA_CLDNOTIFY = 0x80,};
enum MACRO_SBI {SBI_SILOC = 0,SBI_CRDRDS = 1,SBI_ALERT = 2,SBI_FAULT = 3,SBI_TIMEO = 4,};
enum MACRO_SB_CODESET {SB_CODESET = 0,MB_CODESET = 1,USR_CODESET = 2,MX_METHOD_CLASS = 3,};
enum MACRO_SB_MAX {SB_MAX = 1048576,SB_LOCK = 1,};
enum MACRO_SB_WANT {SB_WANT = 0x2,SB_WAIT = 0x4,SB_SEL = 0x8,SB_ASYNC = 0x10,SB_NOTIFY = 0x1C,SB_COLL = 0x20,SB_NOINTR = 0x40,SB_WAKEONE = 0x80,SB_WAITING = 0x100,SB_SET_LOWAT = 0x200,SB_WIRE = 0x400,SB_INHERIT = 0x4C0,SB_DBMAX_DEF = 0x40000000,};
enum MACRO_SC {SC_COMP_PROT = 0x1,SC_COMP_AC = 0x2,SC_COMP_TCP = 0x4,SC_NO_TCP_CCID = 0x8,SC_REJ_COMP_AC = 0x10,SC_REJ_COMP_TCP = 0x20,SC_CCP_OPEN = 0x40,SC_CCP_UP = 0x80,SC_DEBUG = 0x10000,SC_LOG_INPKT = 0x20000,SC_LOG_OUTPKT = 0x40000,SC_LOG_RAWIN = 0x80000,SC_LOG_FLUSH = 0x100000,SC_RCV_B7_0 = 0x1000000,SC_RCV_B7_1 = 0x2000000,SC_RCV_EVNP = 0x4000000,SC_RCV_ODDP = 0x8000000,SC_MASK = 0xFFF00FF,};
enum MACRO_SCHAR {SCHAR_MAX = 127,};
enum MACRO_SCHED {SCHED_FIFO = 1,SCHED_RR = 2,SCHED_OTHER = 3,};
enum MACRO_SCHEDMON {SCHEDMON_GET_COUNTS = 1,SCHEDMON_GET_HISTORY = 2,SCHEDMON_GET_CTRL = 3,SCHEDMON_SET_CTRL = 4,SCHEDMON_CLR_CTRL = 5,};
enum MACRO_SCHED_FG {SCHED_FG_NP = 3,SCHED_BG_NP = 4,SCHED_LFI_NP = 5,SCHED_LRR_NP = 6,};
enum MACRO_SCHED_PRIO {SCHED_PRIO_RT_MIN = 32,SCHED_PRIO_SYSTEM_MAX = 31,};
enum MACRO_SCHED_PRIO_BG {SCHED_PRIO_BG_MAX = 13,};
enum MACRO_SCHED_PRIO_LFI {SCHED_PRIO_LFI_MAX = 13,};
enum MACRO_SCHED_PRIO_LRR {SCHED_PRIO_LRR_MAX = 13,};
enum MACRO_SCHED_PRIO_SYSTEM {SCHED_PRIO_SYSTEM_MIN = 20,};
enum MACRO_SCHED_PRIO_USER {SCHED_PRIO_USER_MAX = 19,SCHED_PRIO_USER_MIN = 0,};
enum MACRO_SCM {SCM_RIGHTS = 0x1,INET_ADDRSTRLEN = 0x14,};
enum MACRO_SCNROUND {SCNROUND = 16,};
enum MACRO_SCNTEXT {SCNTEXT = 1,SCNDATA = 2,SCNRGN = 3,SCNSTACK = 4,SCNREGS = 5,SCNOVFL = 6,};
enum MACRO_SCREEN {SCREEN_ACCEPT = 0x1,SCREEN_DROP = 0x0,};
enum MACRO_SCREENMODE {SCREENMODE_OFF = 0,SCREENMODE_ON = 1,SCREENMODE_NOCHANGE = 2,};
enum MACRO_SCREEN_MAXLEN {SCREEN_MAXLEN = 120,};
enum MACRO_SCREEN_NOTIFY {SCREEN_NOTIFY = 0x2,SCREEN_NONOTIFY = 0x0,};
enum MACRO_SCREEN_OFF {SCREEN_OFF = 0,SCREEN_ON = 1,};
enum MACRO_SCREEN_PROXY {SCREEN_PROXY = 0x8,SCREEN_CACHE = 0x10000,};
enum MACRO_SCS {SCS_START_SYSAPS = 0x1,MSCP_POLL_WAIT = 0x2,};
enum MACRO_SCSI {SCSI_STOP_UNIT = 536899599,SCSI_START_UNIT = 536899600,SCSI_ALLOW_REMOVAL = 536899601,SCSI_PREVENT_REMOVAL = 536899602,};
enum MACRO_SCSIBUS {SCSIBUS_NO_DISCON = 0x1,SCSIBUS_CMD_REORDER = 0x2,SCSIBUS_SYNC_XFR = 0x4,SCSIBUS_WIDE_16 = 0x8,DEV_SCSI_INQ_SZ = 0x24,DEV_BUS_LEN = 0x80,};
enum MACRO_SC_ADD {SC_ADD = 1,SC_LIST = 2,SC_REMOVE = 3,SC_GETNSWP = 4,};
enum MACRO_SC_NOSENSE {SC_NOSENSE = 0x0,SC_RECOVERR = 0x1,SC_NOTREADY = 0x2,SC_MEDIUMERR = 0x3,SC_HARDWARE = 0x4,SC_ILLEGALREQ = 0x5,SC_UNITATTEN = 0x6,SC_DATAPROTECT = 0x7,SC_BLANKCHK = 0x8,SC_VNDRUNIQUE = 0x9,SC_COPYABORTD = 0xA,SC_ABORTEDCMD = 0xB,SC_EQUAL = 0xC,SC_VOLUMEOVFL = 0xD,SC_MISCOMPARE = 0xE,SC_RESERVED = 0xF,};
enum MACRO_SC_TIMEOUT {SC_TIMEOUT = 0x400,SC_VJ_RESET = 0x800,SC_COMP_RUN = 0x1000,SC_DECOMP_RUN = 0x2000,SC_DC_ERROR = 0x4000,SC_DC_FERROR = 0x8000,SC_TBUSY = 0x10000000,SC_PKTLOST = 0x20000000,SC_FLUSH = 0x40000000,SC_ESCAPED = 0x80000000,};
enum MACRO_SDF {SDF_WILD = 0x1,SDF_PROXY = 0x2,SDF_UICPROXY = 0x4,SDF_COTS = 0x8,SDF_V3 = 0x10,DN_MAXADDL = 0x14,};
enum MACRO_SEC {SEC_GROUPS = 32,};
enum MACRO_SECS {SECS_PER_MIN = 60,};
enum MACRO_SECURITY {SECURITY_MAJOR_VERSION = 1,SECURITY_MINOR_VERSION = 0,};
enum MACRO_SEC_BSD {SEC_BSD = 0,SEC_UPGRADE = 1,SEC_ENHANCED = 22,MAX_PASSWORD_LENGTH = 80,};
enum MACRO_SEC_DEFAULT {SEC_DEFAULT_MODE = 0x1C0,SEC_EFFECTIVE_PRIV = 0x1,};
enum MACRO_SEC_ERRNO {SEC_ERRNO_MASK = 0xFF00,SEC_ERRNO_SHIFT = 0x8,};
enum MACRO_SEC_KERNEL {SEC_KERNEL_AUTHS = 2,};
enum MACRO_SEC_MAGIC {SEC_MAGIC_MAX = 61456,};
enum MACRO_SEC_MAXIMUM {SEC_MAXIMUM_PRIV = 2,SEC_BASE_PRIV = 3,SEC_POTENTIAL_PRIV = 4,SEC_GRANTED_PRIV = 5,SEC_RIGHTS_FDS = 44224,SEC_RIGHTS_PRIVS = 44225,SEC_EXTENDED_RIGHTS = 44227,};
enum MACRO_SEC_NEW {SEC_NEW_UID = 0x1,SEC_NEW_GID = 0x2,SEC_NEW_MODE = 0x4,SEC_NEW_GROUPS = 0x8,SP_DELETEACC = 0x1000,SP_CREATEACC = 0x2000,};
enum MACRO_SEC_NOCREATOR {SEC_NOCREATOR_GID = -3,};
enum MACRO_SEC_STOPIO {SEC_STOPIO = 1,SEC_GETLUID = 2,SEC_SETLUID = 3,SEC_STATPRIV = 4,SEC_CHPRIVSYS = 5,SEC_EACCESS = 6,SEC_MKMULTDIR = 7,SEC_RMMULTDIR = 8,SEC_ISMULTDIR = 9,SEC_GETLABEL = 10,SEC_SETLABEL = 11,SEC_LMOUNT = 12,SEC_ISLABELEDFS = 13,SEC_SWITCH_CALL = 19,SEC_EPROPLIST = 21,};
enum MACRO_SEC_SUBJECT {SEC_SUBJECT = 1,SEC_OBJECT = 2,SEC_IPC = 3,SEC_NOCREATOR_UID = -3,};
enum MACRO_SEC_SWITCH {SEC_SWITCH_STAT = 0,SEC_SWITCH_ON = 1,SEC_SWITCH_OFF = 2,SEC_SWITCH_CONF = 3,SEC_TAG_COUNT = 8,};
enum MACRO_SEC_WILDCARD {SEC_WILDCARD_TAG = 2,SEC_ACTUAL_TAG = 3,};
enum MACRO_SEEK {SEEK_SET = 0,SEEK_CUR = 1,SEEK_END = 2,_IOEOF = 16,_IOERR = 32,};
enum MACRO_SEGSIZE {SEGSIZE = 512,};
enum MACRO_SEGV {SEGV_MAPERR = 1,SEGV_ACCERR = 2,SEGV_STKOVF = 3,};
enum MACRO_SELF {SELF_PFN = -255,};
enum MACRO_SELFMAG {SELFMAG = 4,};
enum MACRO_SEM {SEM_NAME_MAX = 255,};
enum MACRO_SEMAEM {SEMAEM = 16384,};
enum MACRO_SEMINFO {SEMINFO_MNI = 0,SEMINFO_MSL = 1,SEMINFO_OPM = 2,SEMINFO_UME = 3,SEMINFO_VMX = 4,SEMINFO_AEM = 5,SEMINFO_OPT = 6,};
enum MACRO_SEMMNI {SEMMNI = 10,SEMMNS = 60,};
enum MACRO_SEMMSL {SEMMSL = 25,};
enum MACRO_SEMOPM {SEMOPM = 10,};
enum MACRO_SEMUME {SEMUME = 10,SEMVMX = 32767,};
enum MACRO_SEND {SEND_SUCCESS = 0,SEND_ERRORS_START = -100,};
enum MACRO_SEND_ERRORS {SEND_ERRORS_END = -111,};
enum MACRO_SEND_INTERRUPTED {SEND_INTERRUPTED = -108,};
enum MACRO_SEND_INVALID {SEND_INVALID_MEMORY = -101,};
enum MACRO_SEND_INVALID_PORT {SEND_INVALID_PORT = -102,};
enum MACRO_SEND_KERNEL {SEND_KERNEL_REFUSED = -107,};
enum MACRO_SEND_MSG {SEND_MSG_TOO_LARGE = -109,};
enum MACRO_SEND_MSG_TOO {SEND_MSG_TOO_SMALL = -110,};
enum MACRO_SEND_NOTIFY {SEND_NOTIFY_IN_PROGRESS = -106,};
enum MACRO_SEND_TIMED {SEND_TIMED_OUT = -103,};
enum MACRO_SEND_WILL {SEND_WILL_NOTIFY = -105,};
enum MACRO_SET {SET_PROPLIST_SYSCALL = 0x1,FSET_PROPLIST_SYSCALL = 0x2,GET_PROPLIST_SYSCALL = 0x3,FGET_PROPLIST_SYSCALL = 0x4,DEL_PROPLIST_SYSCALL = 0x5,FDEL_PROPLIST_SYSCALL = 0x6,};
enum MACRO_SF {SF_ACKNOW = 0x1,SF_DELACK = 0x2,SF_HI = 0x4,SF_HO = 0x8,SF_PI = 0x10,SF_WIN = 0x20,SF_RXT = 0x40,SF_RVD = 0x80,};
enum MACRO_SFBP {SFBP_SFBP_TYPE = 0,BT459_TYPE2_SETUP_HEAD_MASK = 1,};
enum MACRO_SF_SOOB {SF_SOOB = 0x8,SF_IOOB = 0x10,SF_NEWCALL = 0x100,};
enum MACRO_SHCOM {SHCOM_SUCCESS = 0,SHCOM_LOADER_FAILED = -1,};
enum MACRO_SHCOM_BAD {SHCOM_BAD_ADDRESS = -2,};
enum MACRO_SHCOM_BAD_FILE {SHCOM_BAD_FILE = -3,};
enum MACRO_SHCOM_INIT {SHCOM_INIT_FAILED = -5,};
enum MACRO_SHCOM_LOCK {SHCOM_LOCK_FAILED = -4,};
enum MACRO_SHCOM_MALLOC {SHCOM_MALLOC_FAILED = -8,};
enum MACRO_SHCOM_MAP {SHCOM_MAP_FAILED = -7,};
enum MACRO_SHCOM_UNMAP {SHCOM_UNMAP_FAILED = -6,};
enum MACRO_SHF {SHF_WRITE = 0x1,SHF_ALLOC = 0x2,SHF_EXECINSTR = 0x4,SHF_MASKPROC = 0xF0000000,};
enum MACRO_SHF_MIPS {SHF_MIPS_GPREL = 0x10000000,};
enum MACRO_SHIFT {SHIFT_KH = 2,MAXTC = 6,SHIFT_SCALE = 22,};
enum MACRO_SHIFT_UPDATE {SHIFT_UPDATE = 12,SHIFT_USEC = 16,FINEUSEC = 4194304,};
enum MACRO_SHM {SHM_RDONLY = 0x1000,SHM_RND = 0x2000,};
enum MACRO_SHMINFO {SHMINFO_MAX_COMPAT = 0,SHMINFO_MIN_COMPAT = 1,SHMINFO_MNI = 2,SHMINFO_SEG = 3,SHMINFO_MAX = 4,SHMINFO_MIN = 5,};
enum MACRO_SHMMIN {SHMMIN = 1,SHMMAX = 4194304,};
enum MACRO_SHMMNI {SHMMNI = 100,};
enum MACRO_SHMSEG {SHMSEG = 32,MAXBSIZE = 65536,};
enum MACRO_SHM_LOCK {SHM_LOCK = 3,SHM_UNLOCK = 4,SHM_R = 256,};
enum MACRO_SHM_W {SHM_W = 128,SHM_LOCKED = 512,SHM_REMOVED = 1024,};
enum MACRO_SHN {SHN_UNDEF = 0,SHN_LORESERVE = 65280,};
enum MACRO_SHN_ACOMMON {SHN_ACOMMON = 65280,SHN_TEXT = 65281,SHN_DATA = 65282,SHN_HIPROC = 65311,SHN_ABS = 65521,SHN_COMMON = 65522,SHN_HIRESERVE = 65535,};
enum MACRO_SHN_LOPROC {SHN_LOPROC = 0xFF00,};
enum MACRO_SHN_MIPS {SHN_MIPS_ACOMMON = 65280,SHN_MIPS_TEXT = 65281,SHN_MIPS_DATA = 65282,};
enum MACRO_SHOWFH {SHOWFH_SUCCESS = 0,SHOWFH_FAILED = 1,FHSIZE = 8,FILEHANDLE_PROG = 100043,};
enum MACRO_SHRT {SHRT_MAX = 32767,SHRT_MIN = -32768,};
enum MACRO_SHT {SHT_NULL = 0,SHT_PROGBITS = 1,SHT_SYMTAB = 2,SHT_STRTAB = 3,SHT_RELA = 4,SHT_HASH = 5,SHT_DYNAMIC = 6,SHT_NOTE = 7,SHT_NOBITS = 8,SHT_REL = 9,SHT_SHLIB = 10,SHT_DYNSYM = 11,SHT_LOPROC = 1879048192,SHT_HIPROC = 2147483647,SHT_LOUSER = -2147483648,SHT_HIUSER = -1,};
enum MACRO_SHT_MIPS {SHT_MIPS_LIBLIST = 1879048192,SHT_MIPS_MSYM = 1879048193,SHT_MIPS_CONFLICT = 1879048194,SHT_MIPS_GPTAB = 1879048195,SHT_MIPS_UCODE = 1879048196,SHT_MIPS_DEBUG = 1879048197,SHT_MIPS_REGINFO = 1879048198,};
enum MACRO_SHUT {SHUT_RD = 0,SHUT_WR = 1,SHUT_RDWR = 2,_SS_MAXSIZE = 128,};
enum MACRO_SI {SI_MAX_SIZE = 128,};
enum MACRO_SIA {SIA_BEU_CLEARENV = 0x1,SIA_BEU_SETLUID = 0x2,SIA_BEU_DOCHDIR = 0x4,SIA_BEU_OKROOTDIR = 0x8,SIA_BEU_REALLOGIN = 0x10,};
enum MACRO_SIAAUTHFREE {SIAAUTHFREE = 1,};
enum MACRO_SIABUFSIZ {SIABUFSIZ = 1024,};
enum MACRO_SIACOLSUCCESS {SIACOLSUCCESS = 1,SIACOLABORT = 2,SIACOLTIMOUT = 3,SIACOLPARAMS = 4,};
enum MACRO_SIADCAPMAX {SIADCAPMAX = 32,};
enum MACRO_SIADCONTINUE {SIADCONTINUE = 0,SIADSTOP = 2,};
enum MACRO_SIADFAIL {SIADFAIL = 0,};
enum MACRO_SIADSUCCESS {SIADSUCCESS = 1,};
enum MACRO_SIAFAIL {SIAFAIL = 0,SIASTOP = 2,};
enum MACRO_SIAFREEALL {SIAFREEALL = 0,};
enum MACRO_SIAGOOD {SIAGOOD = 1,};
enum MACRO_SIALIBNAMAX {SIALIBNAMAX = 64,};
enum MACRO_SIAMENUONE {SIAMENUONE = 1,SIAMENUANY = 2,SIAFORM = 3,SIAONELINER = 4,SIAINFO = 5,SIAWARNING = 6,};
enum MACRO_SIANAMEMIN {SIANAMEMIN = 16,};
enum MACRO_SIANEW {SIANEW = 0,SIABAD = -1,};
enum MACRO_SIAPKGNAMAX {SIAPKGNAMAX = 64,};
enum MACRO_SIARESINVIS {SIARESINVIS = 0x2,SIARESANY = 0x10,SIAPRINTABLE = 0x20,SIAALPHA = 0x40,SIANUMBER = 0x80,SIAALPHANUM = 0x100,FLAG_MAX = 0x200,};
enum MACRO_SIASUCCESS {SIASUCCESS = 1,};
enum MACRO_SIASWMAX {SIASWMAX = 4,SIAMUTMAX = 16,SIAMXACCTNAME = 64,SIAMXPASSWORD = 80,};
enum MACRO_SIAWAITFOREVER {SIAWAITFOREVER = 0,SIAONEMIN = 60,SIA_DEF_TIMEOUT = 120,};
enum MACRO_SIA_A {SIA_A_NONE = 0,SIA_A_AUTH = 1,SIA_A_REAUTH = 2,SIA_A_SUAUTH = 3,};
enum MACRO_SIA_CHG {SIA_CHG_FINGER = 8,};
enum MACRO_SIA_CHG_PASSWORD {SIA_CHG_PASSWORD = 9,};
enum MACRO_SIA_CHG_SHELL {SIA_CHG_SHELL = 10,};
enum MACRO_SIA_CHK {SIA_CHK_INVOKER = 1,};
enum MACRO_SIA_CHK_USER {SIA_CHK_USER = 22,};
enum MACRO_SIA_ENDGRENT {SIA_ENDGRENT = 20,};
enum MACRO_SIA_ENDPWENT {SIA_ENDPWENT = 15,};
enum MACRO_SIA_ENTITY {SIA_ENTITY_LOCK = 1,SIA_LOG_LOCK = 2,SIA_AUTHENT_LOCK = 3,SIA_ESTAB_LOCK = 4,SIA_LAUNCH_LOCK = 5,SIA_INIT_LOCK = 6,SIA_CHANGE_LOCK = 7,SIA_GROUP_LOCK = 8,SIA_PASSWD_LOCK = 9,SIA_SES_LOCK = 10,SIA_MAT_LOCK = 11,};
enum MACRO_SIA_GETGRENT {SIA_GETGRENT = 16,};
enum MACRO_SIA_GETGRGID {SIA_GETGRGID = 17,};
enum MACRO_SIA_GETGRNAM {SIA_GETGRNAM = 18,};
enum MACRO_SIA_GETPWENT {SIA_GETPWENT = 11,};
enum MACRO_SIA_GETPWNAM {SIA_GETPWNAM = 13,};
enum MACRO_SIA_GETPWUID {SIA_GETPWUID = 12,};
enum MACRO_SIA_INIT {SIA_INIT = 0,};
enum MACRO_SIA_SES {SIA_SES_INIT = 2,};
enum MACRO_SIA_SES_AUTHENT {SIA_SES_AUTHENT = 3,};
enum MACRO_SIA_SES_ESTAB {SIA_SES_ESTAB = 4,};
enum MACRO_SIA_SES_LAUNCH {SIA_SES_LAUNCH = 5,};
enum MACRO_SIA_SES_REAUTHENT {SIA_SES_REAUTHENT = 7,};
enum MACRO_SIA_SES_RELEASE {SIA_SES_RELEASE = 21,};
enum MACRO_SIA_SES_SUAUTHENT {SIA_SES_SUAUTHENT = 6,};
enum MACRO_SIA_SETGRENT {SIA_SETGRENT = 19,};
enum MACRO_SIA_SETPWENT {SIA_SETPWENT = 14,};
enum MACRO_SIG {SIG_DFL = 0,SIG_IGN = 1,SIG_HOLD = 2,SIG_CATCH = 3,};
enum MACRO_SIGAIO {SIGAIO = 23,};
enum MACRO_SIGCLD {SIGCLD = 20,};
enum MACRO_SIGEV {SIGEV_SIGNAL = 0,SIGEV_NONE = 1,SIGEV_THREAD = 2,SIGEV_MAX_SIZE = 64,};
enum MACRO_SIGFPS {SIGFPS = 16,EFPS = 100,};
enum MACRO_SIGHUP {SIGHUP = 1,SIGINT = 2,SIGQUIT = 3,SIGILL = 4,SIGTRAP = 5,SIGABRT = 6,SIGEMT = 7,SIGFPE = 8,SIGKILL = 9,SIGBUS = 10,SIGSEGV = 11,SIGSYS = 12,SIGPIPE = 13,SIGALRM = 14,SIGTERM = 15,SIGURG = 16,SIGSTOP = 17,SIGTSTP = 18,SIGCONT = 19,SIGCHLD = 20,SIGTTIN = 21,SIGTTOU = 22,SIGPOLL = 23,SIGXCPU = 24,SIGXFSZ = 25,SIGVTALRM = 26,SIGPROF = 27,SIGWINCH = 28,SIGINFO = 29,SIGUSR1 = 30,SIGUSR2 = 31,SIGRESV = 32,};
enum MACRO_SIGIOINT {SIGIOINT = 16,SIGIO = 23,};
enum MACRO_SIGIOT {SIGIOT = 6,};
enum MACRO_SIGLOST {SIGLOST = 6,SIGPWR = 29,SIG_ERR = -1,};
enum MACRO_SIGMAX {SIGMAX = 48,NSIG = 49,};
enum MACRO_SIGPTY {SIGPTY = 23,};
enum MACRO_SIGQUEUE {SIGQUEUE_MAX = 64,};
enum MACRO_SIG_BLOCK {SIG_BLOCK = 1,SIG_UNBLOCK = 2,SIG_SETMASK = 3,SA_NOCLDSTOP = 4,};
enum MACRO_SIG_STK {SIG_STK = 0x1,SIG_STD = 0x2,};
enum MACRO_SINCR {SINCR = 1,};
enum MACRO_SIOCTMTWALK {SIOCTMTWALK = 536897898,};
enum MACRO_SI_NOINFO {SI_NOINFO = 1,SI_TIMER = 16,SI_ASYNCIO = 32,SI_MESGQ = 64,};
enum MACRO_SI_QUEUE {SI_QUEUE = -1,SI_USER = 0,};
enum MACRO_SI_SET {SI_SET_SYSNAME = 259,};
enum MACRO_SI_SYSNAME {SI_SYSNAME = 1,SI_HOSTNAME = 2,SI_RELEASE = 3,SI_VERSION = 4,SI_MACHINE = 5,SI_ARCHITECTURE = 6,SI_HW_SERIAL = 7,SI_HW_PROVIDER = 8,SI_SRPC_DOMAIN = 9,SI_SET_HOSTNAME = 258,SI_SET_SRPC_DOMAIN = 265,};
enum MACRO_SL {SL_FATAL = 0x1,SL_NOTIFY = 0x2,SL_ERROR = 0x4,SL_TRACE = 0x8,SL_CONSOLE = 0x10,SL_WARN = 0x20,SL_NOTE = 0x40,};
enum MACRO_SLC {SLC_SYNCH = 1,SLC_BRK = 2,SLC_IP = 3,SLC_AO = 4,SLC_AYT = 5,SLC_EOR = 6,SLC_ABORT = 7,SLC_EOF = 8,SLC_SUSP = 9,SLC_EC = 10,SLC_EL = 11,SLC_EW = 12,SLC_RP = 13,SLC_LNEXT = 14,SLC_XON = 15,SLC_XOFF = 16,SLC_FORW1 = 17,SLC_FORW2 = 18,};
enum MACRO_SLC_FLAGS {SLC_FLAGS = 1,SLC_VALUE = 2,SLC_ACK = 128,};
enum MACRO_SLC_FLUSHIN {SLC_FLUSHIN = 0x40,SLC_FLUSHOUT = 0x20,};
enum MACRO_SLC_LEVELBITS {SLC_LEVELBITS = 0x3,SLC_FUNC = 0x0,};
enum MACRO_SLC_NOSUPPORT {SLC_NOSUPPORT = 0,SLC_CANTCHANGE = 1,SLC_VARIABLE = 2,SLC_DEFAULT = 3,};
enum MACRO_SLF {SLF_TOSS = 1,};
enum MACRO_SLIP {SLIP_HDRLEN = 16,};
enum MACRO_SLIPDIR {SLIPDIR_IN = 0,SLIPDIR_OUT = 1,};
enum MACRO_SLOAD {SLOAD = 0x1,SSYS = 0x2,SLOMAP = 0x4,SWNOTASK = 0x10,SNOTASK = 0x40,SWWAIT = 0x80,SOMASK = 0x200,SWEXIT = 0x400,SPHYSIO = 0x800,SVFORK = 0x1000,SPAGV = 0x8000,SSEQL = 0x10000,SUANOM = 0x20000,SCONTIGN = 0x40000,S1170 = 0x80000,SLOGIN = 0x400000,SCTTY = 0x800000,SXONLY = 0x2000000,SSIGEXIT = 0x4000000,SAIO = 0x8000000,SSWPKIL = 0x10000000,SNOCLDWAIT = 0x20000000,SNOCLDSTOP = 0x40000000,SEXEC = 0x80000000,};
enum MACRO_SLX {SLX_DIR = 0,SLX_CHDR = 1,CHDR_LEN = 15,};
enum MACRO_SM {SM_PROG = 100024,SM_VERS = 1,};
enum MACRO_SM2 {SM_Error = 0,SM_RegisterClient = 1,SM_RegisterClientReply = 2,SM_SaveYourself = 3,SM_SaveYourselfRequest = 4,SM_InteractRequest = 5,SM_Interact = 6,SM_InteractDone = 7,SM_SaveYourselfDone = 8,SM_Die = 9,SM_ShutdownCancelled = 10,SM_CloseConnection = 11,SM_SetProperties = 12,SM_DeleteProperties = 13,SM_GetProperties = 14,SM_PropertiesReply = 15,SM_SaveYourselfPhase2Request = 16,SM_SaveYourselfPhase2 = 17,SM_SaveComplete = 18,};
enum MACRO_SMAGIC {SMAGIC = 0x109,LIBMAGIC = 0x123,};
enum MACRO_SMT {SMT_REQ = 1,SMT_REP = 2,SMT_NEED_WAKEUP = 4,SMT_NEWVER = 8,};
enum MACRO_SMT_MAJOR {SMT_MAJOR_VERSION = 1,SMT_MINOR_VERSION = 2,sz_xSmtQueryVersionReq = 4,};
enum MACRO_SM_STAT {SM_STAT = 1,SM_MON = 2,SM_UNMON = 3,SM_UNMON_ALL = 4,SM_SIMU_CRASH = 5,SM_MAXSTRLEN = 1024,};
enum MACRO_SNDZERO {SNDZERO = 0x1,MUXID_ALL = 0xFFFFFFFF,};
enum MACRO_SNMP {SNMP_OP_GET = 1,SNMP_OP_GETNEXT = 2,SNMP_OP_GETBULK = 3,};
enum MACRO_SNMP_STS {SNMP_STS_SUCCESS = 0,SNMP_STS_FAILURE = 1,MAX_CPUNAME_LEN = 256,};
enum MACRO_SO {SO_DEBUG = 0x1,SO_ACCEPTCONN = 0x2,SO_REUSEADDR = 0x4,SO_KEEPALIVE = 0x8,SO_DONTROUTE = 0x10,SO_BROADCAST = 0x20,SO_USELOOPBACK = 0x40,SO_LINGER = 0x80,SO_OOBINLINE = 0x100,SO_REUSEPORT = 0x200,SO_PAIRABLE = 0x800,SO_UMC = 0x1000,SO_CLUA_IN_NOLOCAL = 0x10000,SO_REUSEALIASPORT = 0x20000,SO_CLUA_IN_NOALIAS = 0x40000,SO_CLUA_DEFAULT_SRC = 0x80000,SO_RESVPORT = 0x100000,};
enum MACRO_SOCK {SOCK_STREAM = 1,SOCK_DGRAM = 2,SOCK_RAW = 3,SOCK_RDM = 4,SOCK_SEQPACKET = 5,};
enum MACRO_SOE2 {SOE2_HAB_NO = 0x5000000,};
enum MACRO_SOE2V11 {SOE2V11 = 0x101,};
enum MACRO_SO_HEADERS {SO_HEADERS_ON_INPUT = 1,SO_HEADERS_ON_OUTPUT = 2,SO_DEFAULT_HEADERS = 3,SO_LAST_HEADER = 4,SO_NSIP_ROUTE = 5,SO_SEQNO = 6,SO_ALL_PACKETS = 7,SO_MTU = 8,};
enum MACRO_SO_NEWCALL {SO_NEWCALL = 10,};
enum MACRO_SO_SNDBUF {SO_SNDBUF = 0x1001,SO_RCVBUF = 0x1002,SO_SNDLOWAT = 0x1003,SO_RCVLOWAT = 0x1004,SO_SNDTIMEO = 0x1005,SO_RCVTIMEO = 0x1006,SO_ERROR = 0x1007,SO_TYPE = 0x1008,SO_STATE = 0x1009,SO_FAMILY = 0x100A,SO_XSE = 0x100B,SOL_SOCKET = 0xFFFF,};
enum MACRO_SP {SP_MALLOC = 1,SP_FREELIST = 2,PCB_PME_BIT = 1073741824,};
enum MACRO_SPBGNM {SPBGNM = 1,SPBYNM = 864,SPBXNM = 1024,};
enum MACRO_SPBNUM {SPBNUM = 1,};
enum MACRO_SPBZNM {SPBZNM = 8,SPBLEN = 1728,};
enum MACRO_SPEC {SPEC_MASK = 0x100,NPAD_MASK = 0x200,};
enum MACRO_SPECIAL {SPECIAL_INT_TOKEN = 105,};
enum MACRO_SPECIALS {SPECIALS_MASK = 15,TCP_PUSH_BIT = 16,};
enum MACRO_SPECIAL_I {SPECIAL_I = 11,SPECIAL_D = 15,};
enum MACRO_SPECIAL_TOKEN {SPECIAL_TOKEN = 83,};
enum MACRO_SPOLICY {SPOLICY_CNT = 1,SEC_PACL_MAGIC = 61456,};
enum MACRO_SPP {SPP_LINGERTIME = 120,};
enum MACRO_SPPT {SPPT_NTIMERS = 4,SPPT_REXMT = 0,};
enum MACRO_SPPTV {SPPTV_SRTTBASE = 0,};
enum MACRO_SPPT_PERSIST {SPPT_PERSIST = 1,SPPT_KEEP = 2,SPPT_2MSL = 3,SPP_TTL = 30,};
enum MACRO_SPP_ISSINCR {SPP_ISSINCR = 128,};
enum MACRO_SPP_MAXRXTSHIFT {SPP_MAXRXTSHIFT = 12,};
enum MACRO_SPRAYPROC {SPRAYPROC_SPRAY = 1,SPRAYPROC_GET = 2,SPRAYPROC_CLEAR = 3,};
enum MACRO_SPRAYPROG {SPRAYPROG = 100012,};
enum MACRO_SPRAYVERS {SPRAYVERS_ORIG = 1,};
enum MACRO_SPRAYVERS_0 {SPRAYVERS = 1,SPRAYOVERHEAD = 86,SPRAYMAX = 8845,};
enum MACRO_SP_INHERIT {SP_INHERIT = 783,};
enum MACRO_SP_PIPE {SP_PIPE = 0x1,SP_WATOMIC = 0x2,SP_NOUAREA = 0x4,SP_LOCKABLE = 0x8,SP_CLOSING = 0x10,SP_RWAKEUP = 0x20,SP_WWAKEUP = 0x40,SP_EXTPRIV = 0x80,SP_XSE = 0x100,SP_NBIO = 0x200,SP_FREEABLE = 0x8000,};
enum MACRO_SP_SP {SP_SP = 0x80,SP_SA = 0x40,SP_OB = 0x20,SP_EM = 0x10,};
enum MACRO_SQR {SQR = 0,HEXE = 1,HEXO = 2,};
enum MACRO_SR {SR_SPECIFIC_ROUTE = 0x0,SR_ALL_ROUTE_EXPLORE = 0x4,SR_SPAN_TREE_EXPLORE = 0x6,};
enum MACRO_SRT {SRT_NBCKTS = 256,};
enum MACRO_SRTAB {SRTAB_UNKNOWN = 0,SRTAB_ARP = 1,SRTAB_XID = 2,SRTAB_ETHER_LOOP = 3,};
enum MACRO_SR_RENT {SR_RENT = 1,SR_RATTR = 2,SR_ZATTR = 3,SR_SATTR = 4,SR_ISENAB = 5,SR_ENAB = 6,SR_DISAB = 7,SR_DELENT = 8,SR_DISENT = 9,};
enum MACRO_SS {SS_ONSTACK = 0x1,SS_DISABLE = 0x2,SS_NOMASK = 0x4,SS_UCONTEXT = 0x8,};
enum MACRO_SSEEK {SSEEK = 0x1,SIO = 0x2,SCOM = 0x3,SREW = 0x4,SERASE = 0x5,SERASED = 0x6,};
enum MACRO_SSI {SSI_NVPAIRS = 1,SSI_ZERO_STRUCT = 2,SSI_SET_STRUCT = 3,SSI_LMF = 7,SSI_LOGIN = 8,SSI_SLIMIT = 9,SSI_ULIMIT = 10,SSI_DUMPDEV = 11,SSI_IPRSETUP = 13,SSI_DBASE = 18,SSI_IPDEFTTL = 19,SSI_FD_NEWMAX = 24,};
enum MACRO_SSIN {SSIN_NFSPORTMON = 1,SSIN_NFSSETLOCK = 2,SSIN_PROG_ENV = 3,SSIN_UACSYS = 4,SSIN_UACPARNT = 5,SSIN_UACPROC = 6,SSIN_IECSYS = 7,SSIN_IECPARNT = 8,SSIN_IECPROC = 9,};
enum MACRO_SSIZE {SSIZE = 1,};
enum MACRO_SSI_COREDIR {SSI_COREDIR = 25,SSI_TNC = 999,};
enum MACRO_SSLEEP {SSLEEP = 1,SWAIT = 2,SRUN = 3,SIDL = 4,SZOMB = 5,SSTOP = 6,};
enum MACRO_SS_NOFDREF {SS_NOFDREF = 0x1,SS_ISCONNECTED = 0x2,SS_ISCONNECTING = 0x4,SS_ISDISCONNECTING = 0x8,SS_CANTSENDMORE = 0x10,SS_CANTRCVMORE = 0x20,SS_RCVATMARK = 0x40,SS_PRIV = 0x80,SS_NBIO = 0x100,SS_ASYNC = 0x200,SS_ISCONFIRMING = 0x400,};
enum MACRO_SS_STACKMAGIC {SS_STACKMAGIC = 0x0,_SSTACKFLAGS = 0xB,MINSIGSTKSZ = 0x1000,SIGSTKSZ = 0x4000,BADSIG = 0xFFFFFFFF,};
enum MACRO_ST {ST_FILESINIT = 25,ST_STRTABINIT = 512,};
enum MACRO_STA {STA_PLL = 0x1,STA_PPSFREQ = 0x2,STA_PPSTIME = 0x4,STA_FLL = 0x8,STA_INS = 0x10,STA_DEL = 0x20,STA_UNSYNC = 0x40,STA_FREQHOLD = 0x80,STA_PPSSIGNAL = 0x100,STA_PPSJITTER = 0x200,STA_PPSWANDER = 0x400,STA_PPSERROR = 0x800,STA_CLOCKERR = 0x1000,STA_RONLY = 0x1F00,};
enum MACRO_STB {STB_LOCAL = 0,STB_GLOBAL = 1,STB_WEAK = 2,STB_LOPROC = 13,};
enum MACRO_STB_DUPLICATE {STB_DUPLICATE = 13,STB_HIPROC = 15,};
enum MACRO_STB_NUM {STB_NUM = 3,STT_NUM = 5,};
enum MACRO_STDIN {STDIN_FILENO = 0,STDOUT_FILENO = 1,STDERR_FILENO = 2,_POSIX_VERSION = 199506,};
enum MACRO_STDOUT {STDOUT_FDES = 1,INFOSIZE = 52,};
enum MACRO_STDUMP {STDUMP_TOOLVER = 0,};
enum MACRO_STN {STN_UNDEF = 0,};
enum MACRO_STRIP {STRIP_TOOLVER = 0,};
enum MACRO_STRU {STRU_F = 1,STRU_R = 2,STRU_P = 3,};
enum MACRO_STT {STT_NOTYPE = 0,STT_OBJECT = 1,STT_FUNC = 2,STT_SECTION = 3,STT_FILE = 4,STT_LOPROC = 13,STT_HIPROC = 15,};
enum MACRO_STYP {STYP_REG = 0x0,STYP_DSECT = 0x1,STYP_NOLOAD = 0x2,STYP_GROUP = 0x4,STYP_PAD = 0x8,STYP_COPY = 0x10,STYP_TEXT = 0x20,STYP_DATA = 0x40,STYP_BSS = 0x80,STYP_RDATA = 0x100,STYP_SDATA = 0x200,STYP_SBSS = 0x400,STYP_UCODE = 0x800,STYP_GOT = 0x1000,STYP_DYNAMIC = 0x2000,STYP_DYNSYM = 0x4000,STYP_REL_DYN = 0x8000,STYP_DYNSTR = 0x10000,STYP_HASH = 0x20000,STYP_DSOLIST = 0x40000,STYP_RESERVED = 0x80000,STYP_CONFLICT = 0x100000,STYP_REGINFO = 0x200000,STYP_RESERVED2 = 0x400000,STYP_RESERVED3 = 0x800000,STYP_FINI = 0x1000000,STYP_EXTENDESC = 0x2000000,STYP_LITA = 0x4000000,STYP_LIT8 = 0x8000000,STYP_LIT4 = 0x10000000,S_NRELOC_OVFL = 0x20000000,STYP_LIB = 0x40000000,STYP_INIT = 0x80000000,};
enum MACRO_STYP_COMMENT {STYP_COMMENT = 0x2100000,STYP_RCONST = 0x2200000,STYP_MSYM = 0x2300000,STYP_XDATA = 0x2400000,STYP_TLSDATA = 0x2500000,STYP_TLSBSS = 0x2600000,STYP_TLSINIT = 0x2700000,STYP_PDATA = 0x2800000,};
enum MACRO_STYP_EXTMASK {STYP_EXTMASK = 0xFF00000,};
enum MACRO_ST_ADU {ST_ADU = 1,ST_DEC_4000 = 2,ST_DEC_7000 = 3,ST_DEC_3000_500 = 4,ST_JENSEN = 6,ST_DEC_3000_300 = 7,ST_SABLE = 9,ST_DEC_AXPVME_64 = 10,ST_DEC_AXPPCI_33 = 11,ST_DEC_21000 = 12,ST_DEC_2100_A50 = 13,ST_DEC_MUSTANG = 14,ST_DEC_KN20AA = 15,ST_DEC_1000 = 17,ST_EB66 = 19,ST_EB64P = 20,ST_ALPHABOOK1 = 21,ST_DEC_4100 = 22,ST_DEC_EV45_PBP = 23,ST_LYNX = 24,ST_EB164 = 26,ST_DEC_1000A = 27,ST_DEC_ALPHAVME_224 = 28,ST_DEC_550 = 30,ST_DEC_EV56_PBP = 32,ST_DEC_ALPHAVME_320 = 33,ST_DEC_6600 = 34,ST_ALPHA_WILDFIRE = 35,ST_DMCC_EV6 = 37,CBUFSIZE = 1024,};
enum MACRO_ST_AUX {ST_AUX_TIR = 0,ST_AUX_RNDXR = 1,ST_AUX_DNLOW = 2,ST_AUX_DNMAC = 3,ST_AUX_ISYM = 4,ST_AUX_ISS = 5,ST_AUX_WIDTH = 6,};
enum MACRO_ST_AUXINIT {ST_AUXINIT = 64,ST_LINEINIT = 512,};
enum MACRO_ST_DEC {ST_DEC_2000_300 = 6,};
enum MACRO_ST_DEC_2100 {ST_DEC_2100_A500 = 9,};
enum MACRO_ST_DEC_2100A {ST_DEC_2100A_A500 = 24,};
enum MACRO_ST_E {ST_E_FILE = -2,};
enum MACRO_ST_EXTINIT {ST_EXTINIT = 32,ST_SYMINIT = 64,};
enum MACRO_ST_E_ADDR {ST_E_ADDR_SECTION = -37,};
enum MACRO_ST_E_ADDR_LINE {ST_E_ADDR_LINE = -53,};
enum MACRO_ST_E_ADDR_OBJ {ST_E_ADDR_OBJ = -41,};
enum MACRO_ST_E_ADDR_PROC {ST_E_ADDR_PROC = -44,};
enum MACRO_ST_E_ALIGNMENT {ST_E_ALIGNMENT = -5,};
enum MACRO_ST_E_ALTERNATE {ST_E_ALTERNATE = -58,};
enum MACRO_ST_E_ARCHIVE {ST_E_ARCHIVE_NAME = -72,};
enum MACRO_ST_E_ARCHIVE_EMPTY {ST_E_ARCHIVE_EMPTY = -73,};
enum MACRO_ST_E_ARCHIVE_END {ST_E_ARCHIVE_END = -995,};
enum MACRO_ST_E_ARCHIVE_OP {ST_E_ARCHIVE_OP = -78,};
enum MACRO_ST_E_CHUNK {ST_E_CHUNK_TYPE = -82,};
enum MACRO_ST_E_CHUNK_INTERNAL {ST_E_CHUNK_INTERNAL = -94,};
enum MACRO_ST_E_CHUNK_OFFSET {ST_E_CHUNK_OFFSET = -83,};
enum MACRO_ST_E_CHUNK_OVERLAP {ST_E_CHUNK_OVERLAP = -92,};
enum MACRO_ST_E_CHUNK_UNSORTED {ST_E_CHUNK_UNSORTED = -91,};
enum MACRO_ST_E_CM {ST_E_CM_RANGE = -85,};
enum MACRO_ST_E_CMRLC {ST_E_CMRLC_SIZE = -48,};
enum MACRO_ST_E_CMRLC_VERSION {ST_E_CMRLC_VERSION = -49,};
enum MACRO_ST_E_CM_DATA {ST_E_CM_DATA = -103,};
enum MACRO_ST_E_CM_FLAGS {ST_E_CM_FLAGS = -87,};
enum MACRO_ST_E_CM_OPERATION {ST_E_CM_OPERATION = -86,};
enum MACRO_ST_E_CM_VER {ST_E_CM_VER = -102,};
enum MACRO_ST_E_COMMENT {ST_E_COMMENT_SECTION = -26,};
enum MACRO_ST_E_COMPRESSED {ST_E_COMPRESSED_OP = -97,};
enum MACRO_ST_E_DATA {ST_E_DATA_ADDR = -68,};
enum MACRO_ST_E_DATA_EXISTS {ST_E_DATA_EXISTS = -88,};
enum MACRO_ST_E_DATA_INDEX {ST_E_DATA_INDEX_RANGE = -69,};
enum MACRO_ST_E_DECOMPRESS {ST_E_DECOMPRESS = -4,};
enum MACRO_ST_E_DYN {ST_E_DYN_INFO = -7,};
enum MACRO_ST_E_FILE {ST_E_FILE_STRIPPED = -13,};
enum MACRO_ST_E_FILE_ACCESS {ST_E_FILE_ACCESS = -76,};
enum MACRO_ST_E_FILE_NAME {ST_E_FILE_NAME_LENGTH = -77,};
enum MACRO_ST_E_FILE_OBJ {ST_E_FILE_OBJ = -61,};
enum MACRO_ST_E_FILE_RANGE {ST_E_FILE_RANGE = -17,};
enum MACRO_ST_E_FILE_SYM {ST_E_FILE_SYM = -35,};
enum MACRO_ST_E_FRAME {ST_E_FRAME_OFFSET = -65,};
enum MACRO_ST_E_FRAME_OFFSET {ST_E_FRAME_OFFSET_RANGE = -66,};
enum MACRO_ST_E_INVALID {ST_E_INVALID_SYM = -29,};
enum MACRO_ST_E_INVALID_ADD {ST_E_INVALID_ADD = -90,};
enum MACRO_ST_E_INVALID_ADDR {ST_E_INVALID_ADDR = -60,};
enum MACRO_ST_E_INVALID_CHUNK {ST_E_INVALID_CHUNK = -93,};
enum MACRO_ST_E_INVALID_DELETE {ST_E_INVALID_DELETE = -89,};
enum MACRO_ST_E_INVALID_FRAME {ST_E_INVALID_FRAME_OFFSET = -67,};
enum MACRO_ST_E_INVALID_OBJ {ST_E_INVALID_OBJ = -80,};
enum MACRO_ST_E_INVALID_OBJLIST {ST_E_INVALID_OBJLIST_APPEND = -95,};
enum MACRO_ST_E_INVALID_REP {ST_E_INVALID_REP = -81,};
enum MACRO_ST_E_INVALID_TAG {ST_E_INVALID_TAG = -84,};
enum MACRO_ST_E_INVALID_WRITE {ST_E_INVALID_WRITE = -79,};
enum MACRO_ST_E_LIB {ST_E_LIB_NAMES = -8,};
enum MACRO_ST_E_LINE {ST_E_LINE_PROC = -51,};
enum MACRO_ST_E_LINE_ADDR {ST_E_LINE_ADDR = -54,};
enum MACRO_ST_E_MAJ {ST_E_MAJ_OBJ_VER = -98,};
enum MACRO_ST_E_MAJ_SYM {ST_E_MAJ_SYM_VER = -100,};
enum MACRO_ST_E_MIN {ST_E_MIN_OBJ_VER = -99,};
enum MACRO_ST_E_MIN_SYM {ST_E_MIN_SYM_VER = -101,};
enum MACRO_ST_E_NAME {ST_E_NAME_SYM = -36,};
enum MACRO_ST_E_NO {ST_E_NO_STRINGS = -14,};
enum MACRO_ST_E_NONSHARED {ST_E_NONSHARED = -9,};
enum MACRO_ST_E_NOT {ST_E_NOT_ARCHIVE = -75,};
enum MACRO_ST_E_NO_COMMENT {ST_E_NO_COMMENT_SECTION = -25,};
enum MACRO_ST_E_NO_END {ST_E_NO_END_SYM = -33,};
enum MACRO_ST_E_NO_FILE {ST_E_NO_FILE_PROCS = -24,};
enum MACRO_ST_E_NO_LINES {ST_E_NO_LINES = -52,};
enum MACRO_ST_E_NO_OBJLIST {ST_E_NO_OBJLIST_OBJ = -43,};
enum MACRO_ST_E_NO_PROC {ST_E_NO_PROC_SYM = -23,};
enum MACRO_ST_E_NO_PROCS {ST_E_NO_PROCS = -22,};
enum MACRO_ST_E_NO_RELOCS {ST_E_NO_RELOCS = -40,};
enum MACRO_ST_E_NULL {ST_E_NULL_PTR = -11,};
enum MACRO_ST_E_OBJ {ST_E_OBJ_NAME = -12,};
enum MACRO_ST_E_OBJECT {ST_E_OBJECT_TYPE = -10,};
enum MACRO_ST_E_OBJECT_INVALID {ST_E_OBJECT_INVALID = -74,};
enum MACRO_ST_E_OBJLIST {ST_E_OBJLIST_EMPTY = -42,};
enum MACRO_ST_E_OBJ_IN {ST_E_OBJ_IN_USE = -96,};
enum MACRO_ST_E_OBJ_LSTRIPPED {ST_E_OBJ_LSTRIPPED = -71,};
enum MACRO_ST_E_ORDER {ST_E_ORDER = -56,};
enum MACRO_ST_E_PROC {ST_E_PROC_RANGE = -18,};
enum MACRO_ST_E_PROC_FILE {ST_E_PROC_FILE = -47,};
enum MACRO_ST_E_PROC_ILINE {ST_E_PROC_ILINE = -55,};
enum MACRO_ST_E_PROC_OBJ {ST_E_PROC_OBJ = -62,};
enum MACRO_ST_E_PROC_PLINE {ST_E_PROC_PLINE = -57,};
enum MACRO_ST_E_PROC_SORTED {ST_E_PROC_SORTED = -59,};
enum MACRO_ST_E_RFD {ST_E_RFD_RANGE = -70,};
enum MACRO_ST_E_SECTION {ST_E_SECTION_RANGE = -21,};
enum MACRO_ST_E_SECTIONS {ST_E_SECTIONS_DIFFER = -45,};
enum MACRO_ST_E_SECTION_NAME {ST_E_SECTION_NAME = -50,};
enum MACRO_ST_E_SECTION_OBJ {ST_E_SECTION_OBJ = -64,};
enum MACRO_ST_E_SECTION_SIZE {ST_E_SECTION_SIZE = -39,};
enum MACRO_ST_E_SECTION_TYPE {ST_E_SECTION_TYPE = -38,};
enum MACRO_ST_E_SYM {ST_E_SYM_MAGIC = -6,};
enum MACRO_ST_E_SYMBOL {ST_E_SYMBOL_TABLE = -3,};
enum MACRO_ST_E_SYM_FILE {ST_E_SYM_FILE_INDEX = -15,};
enum MACRO_ST_E_SYM_FILE_0 {ST_E_SYM_FILE = -16,};
enum MACRO_ST_E_SYM_ISYM {ST_E_SYM_ISYM = -31,};
enum MACRO_ST_E_SYM_NAME {ST_E_SYM_NAME = -28,};
enum MACRO_ST_E_SYM_OBJ {ST_E_SYM_OBJ = -63,};
enum MACRO_ST_E_SYM_OUTER {ST_E_SYM_OUTER = -30,};
enum MACRO_ST_E_SYM_RANGE {ST_E_SYM_RANGE = -19,};
enum MACRO_ST_E_SYM_TYPE {ST_E_SYM_TYPE = -32,};
enum MACRO_ST_E_SYM_VALUE {ST_E_SYM_VALUE = -27,};
enum MACRO_ST_E_TYPE {ST_E_TYPE_RANGE = -20,};
enum MACRO_ST_E_TYPE_FILE {ST_E_TYPE_FILE = -46,};
enum MACRO_ST_E_TYPE_SYM {ST_E_TYPE_SYM = -34,};
enum MACRO_ST_FDISS {ST_FDISS = 1,ST_IDNINIT = 2,};
enum MACRO_ST_FOREACH {ST_FOREACH_CONTINUE = -999,};
enum MACRO_ST_INDEL {ST_INDEL = 0x1,ST_DOINGDEL = 0x2,ST_DELETED = 0x4,};
enum MACRO_ST_NOSUID {ST_NOSUID = 0x2,};
enum MACRO_ST_OBJ {ST_OBJ_END = -997,};
enum MACRO_ST_OVF {ST_OVF = 0x8000,ST_UNF = 0x4000,ST_DIVZ = 0x2000,ST_PERR = 0x80,ST_PENB = 0x40,ST_SRAO = 0x20,};
enum MACRO_ST_PDINIT {ST_PDINIT = 32,ST_DNINIT = 128,};
enum MACRO_ST_PEXTS {ST_PEXTS = 0x1,ST_PSYMS = 0x2,ST_PLINES = 0x4,ST_PHEADER = 0x8,ST_PDNS = 0x10,ST_POPTS = 0x20,ST_PRFDS = 0x40,ST_PSSS = 0x80,ST_PPDS = 0x100,ST_PFDS = 0x200,ST_PAUXS = 0x400,ST_PSSEXTS = 0x800,ST_PNOSMALL = 0x1000,ST_USEEXTSRC = 0x2000,};
enum MACRO_ST_PROC {ST_PROC_END = -996,};
enum MACRO_ST_PROCTIROFFSET {ST_PROCTIROFFSET = 1,};
enum MACRO_ST_RDONLY {ST_RDONLY = 0x1,ST_MANGLE_NAMES = 0x10,ST_FORCE = 0x80,ST_E_NULL_ARGUMENT = 0xFFFFFFFF,};
enum MACRO_ST_RELOC {ST_RELOC = 1,ST_EXTIFD = 2147483647,};
enum MACRO_ST_RFDESCAPE {ST_RFDESCAPE = 0xFFF,ST_ANONINDEX = 0xFFFFF,};
enum MACRO_ST_SECTION {ST_SECTION_END = -998,};
enum MACRO_SUBCMDMASK {SUBCMDMASK = 0xFF,};
enum MACRO_SUBCMDSHIFT {SUBCMDSHIFT = 8,};
enum MACRO_SUBSYSTEM {SUBSYSTEM_DYNAMICALLY_CONFIGURED = 0x1,SUBSYSTEM_STATICALLY_CONFIGURED = 0x2,SUBSYSTEM_KERN_SYSCONFIG_REGISTERED = 0x4,};
enum MACRO_SUC {SUC_LOGIN_DISP = 0x1,};
enum MACRO_SUF {SUF_CE_LEN = 28,SUF_CE_VERS = 1,};
enum MACRO_SUF_ER {SUF_ER_VERS = 1,};
enum MACRO_SUF_SP {SUF_SP_CHECK1 = 0xBE,SUF_SP_CHECK2 = 0xEF,};
enum MACRO_SUF_SP_LEN {SUF_SP_LEN = 7,};
enum MACRO_SUF_SP_VERS {SUF_SP_VERS = 1,SUF_ST_LEN = 4,};
enum MACRO_SUF_ST {SUF_ST_VERS = 1,};
enum MACRO_SUPERB {SUPERB = 1,};
enum MACRO_SUPERBOFF {SUPERBOFF = 512,};
enum MACRO_SUPPLY {SUPPLY_INTERVAL = 30,EXPIRE_TIME = 180,GARBAGE_TIME = 240,};
enum MACRO_SV {SV_ONSTACK = 1,SV_INTERRUPT = 2,};
enum MACRO_SVC {SVC_ALIASES = 0,SVC_AUTH = 1,SVC_GROUP = 2,SVC_HOSTS = 3,SVC_NETGROUP = 4,SVC_NETWORKS = 5,SVC_PASSWD = 6,SVC_PROTOCOLS = 7,SVC_RPC = 8,SVC_SERVICES = 9,};
enum MACRO_SVC_PATHSIZE {SVC_PATHSIZE = 8,SVC_LOCAL = 0,};
enum MACRO_SVC_RHDB {SVC_RHDB = 3,SVC_PRPASSWD = 6,SVC_DATABASES = 20,};
enum MACRO_SVC_YP {SVC_YP = 1,SVC_BIND = 2,SVC_LAST = 99,};
enum MACRO_SVID2 {SVID2_HAB_NO = 0x1000000,};
enum MACRO_SVID3 {SVID3_HAB_NO = 0x3000000,};
enum MACRO_SVID3V11 {SVID3V11 = 0x101,};
enum MACRO_SVR4 {SVR4_HAB_NO = 0x4000000,};
enum MACRO_SVR4V11 {SVR4V11 = 0x101,};
enum MACRO_SW {SW_TOP = 1,SW_BOTTOM = 0,};
enum MACRO_SW_LEFT {SW_LEFT = 2,SW_RIGHT = 0,};
enum MACRO_SYMTBL {SYMTBL = 0,};
enum MACRO_SYN {SYN = 0x16,};
enum MACRO_SYNC {SYNC_SYNCPOLICY = 0x1,SYNC_SMOOTHSYNCPOLICY = 0x2,};
enum MACRO_SYNC2 {SYNC_MAJOR_VERSION = 3,SYNC_MINOR_VERSION = 0,};
enum MACRO_SYS {SYS_syscall = 0,SYS_exit = 1,SYS_fork = 2,SYS_read = 3,SYS_write = 4,SYS_old_open = 5,SYS_close = 6,SYS_wait4 = 7,SYS_old_creat = 8,SYS_link = 9,SYS_unlink = 10,SYS_execv = 11,SYS_chdir = 12,SYS_fchdir = 13,SYS_mknod = 14,SYS_chmod = 15,SYS_chown = 16,SYS_obreak = 17,SYS_pre_F64_getfsstat = 18,SYS_lseek = 19,SYS_getpid = 20,SYS_mount = 21,SYS_unmount = 22,SYS_setuid = 23,SYS_getuid = 24,SYS_exec_with_loader = 25,SYS_ptrace = 26,SYS_recvmsg = 27,SYS_sendmsg = 28,SYS_recvfrom = 29,SYS_accept = 30,SYS_getpeername = 31,SYS_getsockname = 32,SYS_access = 33,SYS_chflags = 34,SYS_fchflags = 35,SYS_sync = 36,SYS_kill = 37,SYS_old_stat = 38,SYS_setpgid = 39,SYS_old_lstat = 40,SYS_dup = 41,SYS_pipe = 42,SYS_set_program_attributes = 43,SYS_profil = 44,SYS_open = 45,SYS_getgid = 47,SYS_sigprocmask = 48,SYS_getlogin = 49,SYS_setlogin = 50,SYS_acct = 51,SYS_sigpending = 52,SYS_classcntl = 53,SYS_ioctl = 54,SYS_reboot = 55,SYS_revoke = 56,SYS_symlink = 57,SYS_readlink = 58,SYS_execve = 59,SYS_umask = 60,SYS_chroot = 61,SYS_old_fstat = 62,SYS_getpgrp = 63,SYS_getpagesize = 64,SYS_mremap = 65,SYS_vfork = 66,SYS_pre_F64_stat = 67,SYS_pre_F64_lstat = 68,SYS_sbrk = 69,SYS_sstk = 70,SYS_mmap = 71,SYS_ovadvise = 72,SYS_munmap = 73,SYS_mprotect = 74,SYS_madvise = 75,SYS_old_vhangup = 76,SYS_kmodcall = 77,SYS_mincore = 78,SYS_getgroups = 79,SYS_setgroups = 80,SYS_old_getpgrp = 81,SYS_setpgrp = 82,SYS_setitimer = 83,SYS_old_wait = 84,SYS_table = 85,SYS_getitimer = 86,SYS_gethostname = 87,SYS_sethostname = 88,SYS_getdtablesize = 89,SYS_dup2 = 90,SYS_pre_F64_fstat = 91,SYS_fcntl = 92,SYS_select = 93,SYS_poll = 94,SYS_fsync = 95,SYS_setpriority = 96,SYS_socket = 97,SYS_connect = 98,SYS_old_accept = 99,SYS_getpriority = 100,SYS_old_send = 101,SYS_old_recv = 102,SYS_sigreturn = 103,SYS_bind = 104,SYS_setsockopt = 105,SYS_listen = 106,SYS_plock = 107,SYS_old_sigvec = 108,SYS_old_sigblock = 109,SYS_old_sigsetmask = 110,SYS_sigsuspend = 111,SYS_sigstack = 112,SYS_old_recvmsg = 113,SYS_old_sendmsg = 114,SYS_gettimeofday = 116,SYS_getrusage = 117,SYS_getsockopt = 118,SYS_readv = 120,SYS_writev = 121,SYS_settimeofday = 122,SYS_fchown = 123,SYS_fchmod = 124,SYS_old_recvfrom = 125,SYS_setreuid = 126,SYS_setregid = 127,SYS_rename = 128,SYS_truncate = 129,SYS_ftruncate = 130,SYS_flock = 131,SYS_setgid = 132,SYS_sendto = 133,SYS_shutdown = 134,SYS_socketpair = 135,SYS_mkdir = 136,SYS_rmdir = 137,SYS_utimes = 138,SYS_adjtime = 140,SYS_old_getpeername = 141,SYS_gethostid = 142,SYS_sethostid = 143,SYS_getrlimit = 144,SYS_setrlimit = 145,SYS_old_killpg = 146,SYS_setsid = 147,SYS_quotactl = 148,SYS_oldquota = 149,SYS_old_getsockname = 150,SYS_pread = 151,SYS_pwrite = 152,SYS_pid_block = 153,SYS_pid_unblock = 154,SYS_signal_urti = 155,SYS_sigaction = 156,SYS_sigwaitprim = 157,SYS_nfssvc = 158,SYS_getdirentries = 159,SYS_pre_F64_statfs = 160,SYS_pre_F64_fstatfs = 161,SYS_async_daemon = 163,SYS_getfh = 164,SYS_getdomainname = 165,SYS_setdomainname = 166,SYS_exportfs = 169,SYS_alt_plock = 181,SYS_getmnt = 184,SYS_alt_sigpending = 187,SYS_alt_setsid = 188,SYS_swapon = 199,SYS_msgctl = 200,SYS_msgget = 201,SYS_msgrcv = 202,SYS_msgsnd = 203,SYS_semctl = 204,SYS_semget = 205,SYS_semop = 206,SYS_uname = 207,SYS_lchown = 208,SYS_shmat = 209,SYS_shmctl = 210,SYS_shmdt = 211,SYS_shmget = 212,SYS_mvalid = 213,SYS_getaddressconf = 214,SYS_msleep = 215,SYS_mwakeup = 216,SYS_msync = 217,SYS_signal = 218,SYS_utc_gettime = 219,SYS_utc_adjtime = 220,SYS_security = 222,SYS_kloadcall = 223,SYS_stat = 224,SYS_lstat = 225,SYS_fstat = 226,SYS_statfs = 227,SYS_fstatfs = 228,SYS_getfsstat = 229,SYS_gettimeofday64 = 230,SYS_settimeofday64 = 231,SYS_getpgid = 233,SYS_getsid = 234,SYS_sigaltstack = 235,SYS_waitid = 236,SYS_priocntlset = 237,SYS_sigsendset = 238,SYS_set_speculative = 239,SYS_msfs_syscall = 240,SYS_sysinfo = 241,SYS_uadmin = 242,SYS_fuser = 243,SYS_proplist_syscall = 244,SYS_ntp_adjtime = 245,SYS_ntp_gettime = 246,SYS_pathconf = 247,SYS_fpathconf = 248,SYS_sync2 = 249,SYS_uswitch = 250,SYS_usleep_thread = 251,SYS_audcntl = 252,SYS_audgen = 253,SYS_sysfs = 254,SYS_subsys_info = 255,SYS_getsysinfo = 256,SYS_setsysinfo = 257,SYS_afs_syscall = 258,SYS_swapctl = 259,SYS_memcntl = 260,SYS_fdatasync = 261,SYS_oflock = 262,SYS__F64_readv = 263,SYS__F64_writev = 264,SYS_cdslxlate = 265,SYS_sendfile = 266,};
enum MACRO_SYSCALL {SYSCALL_MASK_LEN = 67,};
enum MACRO_SYSCALL_INTMASK {SYSCALL_INTMASK_LEN = 17,};
enum MACRO_SYSCONFIG {SYSCONFIG_CONFIGURE = 1,CFG_OP_SUBSYS_MIN = 100,CFG_OP_SUBSYS_MAX = 999,};
enum MACRO_SYSV {SYSV_HAB_NO = 16777216,};
enum MACRO_SYSVV11 {SYSVV11 = 0x101,};
enum MACRO_SYS_MP {SYS_MP = 0x1,};
enum MACRO_SYS_NMLN {SYS_NMLN = 32,};
enum MACRO_SYS_rt {SYS_rt_memlk = 0,SYS_rt_memunlk = 1,SYS_rt_psx4_get_todtimer = 2,SYS_rt_psx4_set_todtimer = 3,SYS_rt_psx4_time_drift = 4,SYS_rt_rt_getprio = 5,SYS_rt_rt_setprio = 6,SYS_rt_psx4_timer_create = 7,SYS_rt_psx4_timer_delete = 8,SYS_rt_psx4_sem_sleep = 9,SYS_rt_psx4_sem_wakeup = 10,SYS_rt_aio_init = 11,SYS_rt_aio_transfer_old = 12,SYS_rt_aio_transfer_done = 13,SYS_rt_aio_done = 15,SYS_rt_aio_transfer_cancel = 16,SYS_rt_aio_info = 17,SYS_rt_psx4_ipc_snd_sleep = 18,SYS_rt_psx4_ipc_rcv_sleep = 19,SYS_rt_psx4_ipc_wakeup_sender = 20,SYS_rt_psx4_ipc_wakeup_receiver = 21,SYS_rt_psx4_csem_sleep_wakeup = 22,SYS_rt_aio_wait = 23,SYS_rt_aioinit_lock_sleep = 24,SYS_rt_aioinit_lock_wakeup = 25,SYS_rt_psx4_ipc_notify = 26,SYS_rt_psx4_sigqueue = 27,SYS_rt_psx4_timer_overrun = 28,SYS_rt_aio_transfer = 29,SYS_rt_aio_group_init = 30,SYS_rt_aio_group_info = 31,};
enum MACRO_SYS_soe {SYS_soe_two_nosys = 0,};
enum MACRO_SYS_svid {SYS_svid_three_nosys = 0,};
enum MACRO_SYS_svr {SYS_svr_four_nosys = 0,};
enum MACRO_SYS_sysv {SYS_sysv_unlink = 0,SYS_sysv_open = 1,SYS_sysv_waitpid = 2,};
enum MACRO_SYS_ult {SYS_ult_syscall = 0,SYS_ult_exit = 1,SYS_ult_fork = 2,SYS_ult_read = 3,SYS_ult_write = 4,SYS_ult_open = 5,SYS_ult_close = 6,SYS_ult_creat = 8,SYS_ult_link = 9,SYS_ult_unlink = 10,SYS_ult_execv = 11,SYS_ult_chdir = 12,SYS_ult_mknod = 14,SYS_ult_chmod = 15,SYS_ult_chown = 16,SYS_ult_obreak = 17,SYS_ult_lseek = 19,SYS_ult_getpid = 20,SYS_ult_mount = 21,SYS_ult_umount = 22,SYS_ult_getuid = 24,SYS_ult_ptrace = 26,SYS_ult_access = 33,SYS_ult_sync = 36,SYS_ult_kill = 37,SYS_ult_stat = 38,SYS_ult_lstat = 40,SYS_ult_dup = 41,SYS_ult_pipe = 42,SYS_ult_profil = 44,SYS_ult_getgid = 47,SYS_ult_acct = 51,SYS_ult_ioctl = 54,SYS_ult_reboot = 55,SYS_ult_symlink = 57,SYS_ult_readlink = 58,SYS_ult_execve = 59,SYS_ult_umask = 60,SYS_ult_chroot = 61,SYS_ult_fstat = 62,SYS_ult_getpagesize = 64,SYS_ult_mremap = 65,SYS_ult_vfork = 66,SYS_ult_sbrk = 69,SYS_ult_sstk = 70,SYS_ult_mmap = 71,SYS_ult_vadvise = 72,SYS_ult_munmap = 73,SYS_ult_mprotect = 74,SYS_ult_madvise = 75,SYS_ult_vhangup = 76,SYS_ult_mincore = 78,SYS_ult_getgroups = 79,SYS_ult_setgroups = 80,SYS_ult_getpgrp = 81,SYS_ult_setpgrp = 82,SYS_ult_setitimer = 83,SYS_ult_wait3 = 84,SYS_ult_swapon = 85,SYS_ult_getitimer = 86,SYS_ult_gethostname = 87,SYS_ult_sethostname = 88,SYS_ult_getdtablesize = 89,SYS_ult_dup2 = 90,SYS_ult_fcntl = 92,SYS_ult_select = 93,SYS_ult_fsync = 95,SYS_ult_setpriority = 96,SYS_ult_socket = 97,SYS_ult_connect = 98,SYS_ult_accept = 99,SYS_ult_getpriority = 100,SYS_ult_send = 101,SYS_ult_recv = 102,SYS_ult_sigreturn = 103,SYS_ult_bind = 104,SYS_ult_setsockopt = 105,SYS_ult_listen = 106,SYS_ult_sigvec = 108,SYS_ult_sigblock = 109,SYS_ult_sigsetmask = 110,SYS_ult_sigpause = 111,SYS_ult_sigstack = 112,SYS_ult_recvmsg = 113,SYS_ult_sendmsg = 114,SYS_ult_gettimeofday = 116,SYS_ult_getrusage = 117,SYS_ult_getsockopt = 118,SYS_ult_readv = 120,SYS_ult_writev = 121,SYS_ult_settimeofday = 122,SYS_ult_fchown = 123,SYS_ult_fchmod = 124,SYS_ult_recvfrom = 125,SYS_ult_setreuid = 126,SYS_ult_setregid = 127,SYS_ult_rename = 128,SYS_ult_truncate = 129,SYS_ult_ftruncate = 130,SYS_ult_flock = 131,SYS_ult_sendto = 133,SYS_ult_shutdown = 134,SYS_ult_socketpair = 135,SYS_ult_mkdir = 136,SYS_ult_rmdir = 137,SYS_ult_utimes = 138,SYS_alt_ult_sigreturn = 139,SYS_ult_adjtime = 140,SYS_ult_getpeername = 141,SYS_ult_gethostid = 142,SYS_ult_sethostid = 143,SYS_ult_getrlimit = 144,SYS_ult_setrlimit = 145,SYS_ult_killpg = 146,SYS_ult_quota = 148,SYS_ult_qquota = 149,SYS_ult_getsockname = 150,SYS_ult_sysmips = 151,SYS_ult_cacheflush = 152,SYS_ult_atomic_op = 155,SYS_ult_nfs_svc = 158,SYS_ult_getdirentries = 159,SYS_ult_async_daemon = 163,SYS_ult_getfh = 164,SYS_ult_getdomainname = 165,SYS_ult_setdomainname = 166,SYS_ult_exportfs = 169,SYS_ult_msgctl = 172,SYS_ult_msgget = 173,SYS_ult_msgrcv = 174,SYS_ult_msgsnd = 175,SYS_ult_semctl = 176,SYS_ult_semget = 177,SYS_ult_semop = 178,SYS_ult_uname = 179,SYS_ult_shmsys = 180,SYS_ult_plock = 181,SYS_ult_getmnt = 184,SYS_ult_sigpending = 187,SYS_ult_setsid = 188,SYS_ult_waitpid = 189,SYS_ult_utc_gettime = 233,SYS_ult_utc_adjtime = 234,SYS_ult_getsysinfo = 256,SYS_ult_setsysinfo = 257,};
enum MACRO_S_BLKSIZE {S_BLKSIZE = 512,};
enum MACRO_S_DEFFILEMODE {S_DEFFILEMODE = 438,O_SYNC = 16384,O_DSYNC = 524288,O_RSYNC = 1048576,};
enum MACRO_S_IFBLK {S_IFBLK = 0x6000,};
enum MACRO_S_IFCHR {S_IFCHR = 0x2000,S_IFIFO = 0x1000,S_ISVTX = 0x200,};
enum MACRO_S_IFLNK {S_IFLNK = 0xA000,S_ENFMT = 0x400,S_IREAD = 0x100,S_IWRITE = 0x80,S_IEXEC = 0x40,};
enum MACRO_S_IFMT {S_IFMT = 0xF000,};
enum MACRO_S_IFREG {S_IFREG = 0x8000,S_IFDIR = 0x4000,};
enum MACRO_S_IFSOCK {S_IFSOCK = 0xC000,};
enum MACRO_S_INPUT {S_INPUT = 0x1,S_HIPRI = 0x2,S_OUTPUT = 0x4,S_MSG = 0x8,S_RDNORM = 0x10,S_RDBAND = 0x20,S_WRNORM = 0x40,S_WRBAND = 0x80,S_ERROR = 0x100,S_HANGUP = 0x200,S_BANDURG = 0x400,};
enum MACRO_S_IRGRP {S_IRGRP = 0x20,S_IWGRP = 0x10,S_IXGRP = 0x8,S_IRWXO = 0x7,};
enum MACRO_S_IROTH {S_IROTH = 0x4,S_IWOTH = 0x2,S_IXOTH = 0x1,};
enum MACRO_S_IRUSR {S_IRUSR = 0x100,S_IWUSR = 0x80,S_IXUSR = 0x40,S_IRWXG = 0x38,};
enum MACRO_S_LOGIN {S_LOGIN = 0x1,S_RLOGIN = 0x2,S_SU = 0x4,S_TSM = 0x8,S_DAEMON = 0x16,};
enum MACRO_S_PRIMARY {S_PRIMARY = 0x1,S_SECONDARY = 0x2,};
enum MACRO_S_PSA {S_PSA = 0x0,S_SPD = 0x1,S_MA = 0x2,S_TMA = 0x3,S_DPA = 0x4,S_SPRG = 0x5,S_STATUS = 0x6,S_DA = 0x7,S_PS = 0x8,S_DPX = 0xB,S_DPY = 0xC,S_MD = 0xD,S_SPFN = 0xE,S_TM = 0xF,S_MASK = 0xFF,CS_WCZERO = 0x8000,};
enum MACRO_S_SHRSEG {S_SHRSEG = 0x20,};
enum MACRO_ScreenSaverBlanked {ScreenSaverBlanked = 0,ScreenSaverInternal = 1,ScreenSaverExternal = 2,};
enum MACRO_ScreenSaverMajorVersion {ScreenSaverMajorVersion = 1,};
enum MACRO_ScreenSaverMinorVersion {ScreenSaverMinorVersion = 0,};
enum MACRO_ScreenSaverNotify {ScreenSaverNotify = 0,ScreenSaverNumberEvents = 1,};
enum MACRO_ScreenSaverNotifyMask {ScreenSaverNotifyMask = 0x1,ScreenSaverCycleMask = 0x2,};
enum MACRO_ScreenSaverOff {ScreenSaverOff = 0,ScreenSaverOn = 1,ScreenSaverCycle = 2,ScreenSaverDisabled = 3,};
enum MACRO_ScreenSaverReset {ScreenSaverReset = 0,ScreenSaverActive = 1,};
enum MACRO_SetModeInsert {SetModeInsert = 0,SetModeDelete = 1,};
enum MACRO_ShapeBounding {ShapeBounding = 0,ShapeClip = 1,};
enum MACRO_ShapeNotify {ShapeNotify = 0,ShapeNumberEvents = 1,};
enum MACRO_ShapeNotifyMask {ShapeNotifyMask = 1,};
enum MACRO_ShapeSet {ShapeSet = 0,ShapeUnion = 1,ShapeIntersect = 2,ShapeSubtract = 3,ShapeInvert = 4,};
enum MACRO_ShellIndex {ShellIndex = 5,XmOverrideShellIndex = 6,};
enum MACRO_ShiftMapIndex {ShiftMapIndex = 0,LockMapIndex = 1,ControlMapIndex = 2,Mod1MapIndex = 3,Mod2MapIndex = 4,Mod3MapIndex = 5,Mod4MapIndex = 6,Mod5MapIndex = 7,Button1Mask = 256,Button2Mask = 512,Button3Mask = 1024,Button4Mask = 2048,Button5Mask = 4096,AnyModifier = 32768,};
enum MACRO_ShiftMask {ShiftMask = 1,LockMask = 2,ControlMask = 4,Mod1Mask = 8,Mod2Mask = 16,Mod3Mask = 32,Mod4Mask = 64,Mod5Mask = 128,};
enum MACRO_ShmCompletion {ShmCompletion = 0,ShmNumberEvents = 1,};
enum MACRO_SmDialogError {SmDialogError = 0,SmDialogNormal = 1,};
enum MACRO_SmInteractStyleNone {SmInteractStyleNone = 0,SmInteractStyleErrors = 1,SmInteractStyleAny = 2,};
enum MACRO_SmProtoMajor {SmProtoMajor = 1,};
enum MACRO_SmProtoMinor {SmProtoMinor = 0,};
enum MACRO_SmRestartIfRunning {SmRestartIfRunning = 0,SmRestartAnyway = 1,SmRestartImmediately = 2,SmRestartNever = 3,};
enum MACRO_SmSaveGlobal {SmSaveGlobal = 0,SmSaveLocal = 1,SmSaveBoth = 2,};
enum MACRO_SmcSaveYourselfProcMask {SmcSaveYourselfProcMask = 1,SmcDieProcMask = 2,SmcSaveCompleteProcMask = 4,SmcShutdownCancelledProcMask = 8,};
enum MACRO_SmsRegisterClientProcMask {SmsRegisterClientProcMask = 1,SmsInteractRequestProcMask = 2,SmsInteractDoneProcMask = 4,SmsSaveYourselfRequestProcMask = 8,SmsSaveYourselfP2RequestProcMask = 16,SmsSaveYourselfDoneProcMask = 32,SmsCloseConnectionProcMask = 64,SmsSetPropertiesProcMask = 128,SmsDeletePropertiesProcMask = 256,SmsGetPropertiesProcMask = 512,};
enum MACRO_StaticGray {StaticGray = 0,GrayScale = 1,StaticColor = 2,PseudoColor = 3,TrueColor = 4,DirectColor = 5,};
enum MACRO_Success {Success = 0,BadRequest = 1,BadValue = 2,BadWindow = 3,BadPixmap = 4,BadAtom = 5,BadCursor = 6,BadFont = 7,BadMatch = 8,BadDrawable = 9,BadAccess = 10,BadAlloc = 11,BadColor = 12,BadGC = 13,BadIDChoice = 14,BadName = 15,BadLength = 16,BadImplementation = 17,FirstExtensionError = 128,LastExtensionError = 255,};
enum MACRO_SunXK {SunXK_FA_Grave = 0x1005FF00,SunXK_FA_Circum = 0x1005FF01,SunXK_FA_Tilde = 0x1005FF02,SunXK_FA_Acute = 0x1005FF03,SunXK_FA_Diaeresis = 0x1005FF04,SunXK_FA_Cedilla = 0x1005FF05,SunXK_F36 = 0x1005FF10,SunXK_F37 = 0x1005FF11,SunXK_Sys_Req = 0x1005FF60,};
enum MACRO_SunXK_Compose {SunXK_Compose = 0xFF20,SunXK_AltGraph = 0xFF7E,};
enum MACRO_SunXK_PageUp {SunXK_PageUp = 0xFF55,SunXK_PageDown = 0xFF56,SunXK_Undo = 0xFF65,SunXK_Again = 0xFF66,SunXK_Find = 0xFF68,SunXK_Stop = 0xFF69,SunXK_Props = 0x1005FF70,SunXK_Front = 0x1005FF71,SunXK_Copy = 0x1005FF72,SunXK_Open = 0x1005FF73,SunXK_Paste = 0x1005FF74,SunXK_Cut = 0x1005FF75,SunXK_PowerSwitch = 0x1005FF76,SunXK_AudioLowerVolume = 0x1005FF77,SunXK_AudioMute = 0x1005FF78,SunXK_AudioRaiseVolume = 0x1005FF79,SunXK_VideoDegauss = 0x1005FF7A,SunXK_VideoLowerBrightness = 0x1005FF7B,SunXK_VideoRaiseBrightness = 0x1005FF7C,SunXK_PowerSwitchShift = 0x1005FF7D,};
enum MACRO_SunXK_Print {SunXK_Print_Screen = 0xFF61,};
enum MACRO_T {T_ARITH = 0x10,T_MMANG = 0x20,T_ALIGN = 0x30,T_IFAULT = 0x40,};
enum MACRO_TA {TA_INPUT = 0,TA_OUTPUT = 1,TA_USER = 2,TA_RESPOND = 3,TA_DROP = 4,TCP_NDEBUG = 100,};
enum MACRO_TAB0 {TAB0 = 0x0,TAB1 = 0x400,TAB2 = 0x800,TAB3 = 0xC00,CRDLY = 0x3000,};
enum MACRO_TALK {TALK_VERSION = 1,};
enum MACRO_TANDEM {TANDEM = 0x1,CBREAK = 0x2,LCASE = 0x4,};
enum MACRO_TAR {TAR = 1,CPIO = 2,PAX = 3,XPAX = 4,CPIOEXTEND = 5,COMPRESS = 6,};
enum MACRO_TASK {TASK_INFO_MAX = 1024,TASK_BASIC_INFO = 1,};
enum MACRO_TASK_ALL {TASK_ALL_EVENTS_INFO = 3,};
enum MACRO_TASK_EVENTS {TASK_EVENTS_INFO = 2,};
enum MACRO_TASK_KERNEL {TASK_KERNEL_PORT = 1,TASK_NOTIFY_PORT = 2,TASK_EXCEPTION_PORT = 3,TASK_BOOTSTRAP_PORT = 4,};
enum MACRO_TB {TB_MIN_RATE = 1,};
enum MACRO_TBADADDR {TBADADDR = 1,TBADOPT = 2,TACCES = 3,TBADF = 4,TNOADDR = 5,TOUTSTATE = 6,TBADSEQ = 7,TSYSERR = 8,TLOOK = 9,TBADDATA = 10,TBUFOVFLW = 11,TFLOW = 12,TNODATA = 13,TNODIS = 14,TNOUDERR = 15,TBADFLAG = 16,TNOREL = 17,TNOTSUPPORT = 18,TSTATECHNG = 19,TNOSTRUCTYPE = 20,TBADNAME = 21,TBADQLEN = 22,TADDRBUSY = 23,TINDOUT = 24,TPROVMISMATCH = 25,TRESQLEN = 26,TRESADDR = 27,TQFULL = 28,TPROTO = 29,};
enum MACRO_TBEG {TBEG = 0,TEND = 1,TINS = 2,BPW = 8,};
enum MACRO_TBGO {TBGO = 0x0,TBBINDATA = 0x40,};
enum MACRO_TBINPROX {TBINPROX = 0x8000,};
enum MACRO_TBL {TBL_TTYLOC = 0,TBL_U_TTYD = 1,TBL_UAREA = 2,TBL_LOADAVG = 3,TBL_INCLUDE_VERSION = 4,TBL_FSPARAM = 5,TBL_ARGUMENTS = 6,TBL_MAXUPRC = 7,TBL_AID = 8,TBL_MODES = 9,TBL_PROCINFO = 10,TBL_ENVIRONMENT = 11,TBL_SYSINFO = 12,TBL_DKINFO = 13,TBL_TTYINFO = 14,TBL_MSGDS = 15,TBL_SEMDS = 16,TBL_SHMDS_COMPAT = 17,TBL_MSGINFO = 18,TBL_SEMINFO = 19,TBL_SHMINFO = 20,TBL_INTR = 21,TBL_SWAPINFO = 22,TBL_SCALLS = 23,TBL_FILEINFO = 24,TBL_TBLSTATS = 25,TBL_RUNQ = 26,TBL_BUFFER = 27,TBL_KMEM = 28,TBL_PAGING = 29,TBL_MALLOCT = 30,TBL_MAPINFO = 31,TBL_MALLOCBUCKETS = 32,TBL_MALLOCTYPES = 33,TBL_MALLOCNAMES = 34,TBL_KNLIST = 35,TBL_NETINFO = 36,TBL_MALLOCLEAK = 37,TBL_MALLOCLEAKCOUNT = 38,TBL_MALLOCNTYPES = 39,TBL_MALLOCNBUCKETS = 40,TBL_PMEMSTATS = 41,TBL_PMEMCLUSTERTYPE = 42,TBL_PMEMUSETYPE = 43,TBL_PMEMUSAGE = 44,TBL_PMEMCLUSTERS = 45,TBL_VMSTATS = 46,TBL_MALLOCMSTATS = 47,TBL_MACHINE_SLOT = 48,TBL_SYSINFO_MP = 49,TBL_BUFFER_MP = 50,TBL_SCALLS_MP = 51,TBL_FILEINFO_MP = 52,TBL_PAGING_MP = 53,TBL_INTR_MP = 54,TBL_TCPCONN = 55,TBL_UIDINFO = 56,TBL_THREADSTATES = 57,TBL_PROCESSOR_STATS_INFO = 58,TBL_SHMDS = 59,TBL_UMAST_INFO = 60,TBL_XCPU_INTR_MP = 61,TBL_PROCESSOR_INFO = 62,TBL_NCSTATS = 63,TBL_FDSTAT = 64,TBL_TASKINFO = 65,TBL_VNODESTATS = 66,};
enum MACRO_TBL_KNLIST {TBL_KNLIST_NAMSIZ = 24,MSTATS_REQUEST = 50,};
enum MACRO_TBMODE {TBMODE = 0xFFF0,};
enum MACRO_TBPOINT {TBPOINT = 0x10,};
enum MACRO_TBQUEUESIZE {TBQUEUESIZE = 5,};
enum MACRO_TBRUN {TBRUN = 0x0,TBSTOP = 0x20,};
enum MACRO_TBTYPE {TBTYPE = 0xF,};
enum MACRO_TBUNUSED {TBUNUSED = 0x0,TBHITACHI = 0x1,TBTIGER = 0x2,TBGTCO = 0x3,TBPOL = 0x4,TBHDG = 0x5,TBHDGHIRES = 0x6,CALCOMP_DISC = 0x7,PCMS_DISC = 0x8,PLANMS_DISC3 = 0x9,PLANMS_DISC2 = 0xA,};
enum MACRO_TB_MIN {TB_MIN_DEPTH = 1,};
enum MACRO_TCIFLUSH {TCIFLUSH = 0,TCOFLUSH = 1,TCIOFLUSH = 2,};
enum MACRO_TCL {TCL_MAJOR_VERSION = 7,};
enum MACRO_TCLX {TCLX_PATCHLEVEL = 0,};
enum MACRO_TCLX_CMDL {TCLX_CMDL_INTERACTIVE = 1,TCLX_CMDL_EXIT_ON_EOF = 2,};
enum MACRO_TCL_CHECKSUM {TCL_CHECKSUM = 1536,};
enum MACRO_TCL_DONT {TCL_DONT_USE_BRACES = 1,TCL_NO_EVAL = 65536,TCL_EVAL_GLOBAL = 131072,};
enum MACRO_TCL_DONT_WAIT {TCL_DONT_WAIT = 2,TCL_WINDOW_EVENTS = 4,TCL_FILE_EVENTS = 8,TCL_TIMER_EVENTS = 16,TCL_IDLE_EVENTS = 32,TCL_ALL_EVENTS = -3,};
enum MACRO_TCL_DSTRING {TCL_DSTRING_STATIC_SIZE = 200,};
enum MACRO_TCL_DYNAMIC {TCL_DYNAMIC = 3,};
enum MACRO_TCL_GLOBAL {TCL_GLOBAL_ONLY = 1,TCL_APPEND_VALUE = 2,TCL_LIST_ELEMENT = 4,TCL_TRACE_READS = 16,TCL_TRACE_WRITES = 32,TCL_TRACE_UNSETS = 64,TCL_TRACE_DESTROYED = 128,TCL_INTERP_DESTROYED = 256,TCL_LEAVE_ERR_MSG = 512,};
enum MACRO_TCL_LINK {TCL_LINK_INT = 1,TCL_LINK_DOUBLE = 2,TCL_LINK_BOOLEAN = 3,TCL_LINK_STRING = 4,TCL_LINK_READ_ONLY = 128,};
enum MACRO_TCL_MAX {TCL_MAX_PREC = 17,TCL_DOUBLE_SPACE = 27,};
enum MACRO_TCL_MINOR {TCL_MINOR_VERSION = 6,};
enum MACRO_TCL_MODE {TCL_MODE_BLOCKING = 0,TCL_MODE_NONBLOCKING = 1,};
enum MACRO_TCL_OK {TCL_OK = 0,TCL_ERROR = 1,TCL_RETURN = 2,TCL_BREAK = 3,TCL_CONTINUE = 4,TCL_RESULT_SIZE = 200,};
enum MACRO_TCL_ONE {TCL_ONE_WORD_KEYS = 1,};
enum MACRO_TCL_PRIORITY {TCL_PRIORITY = 11,T_TCO_LTPDU = 256,};
enum MACRO_TCL_PROTECTION {TCL_PROTECTION = 10,T_TCL_PRIORITY = 11,};
enum MACRO_TCL_READABLE {TCL_READABLE = 2,TCL_WRITABLE = 4,TCL_EXCEPTION = 8,};
enum MACRO_TCL_RELEASE {TCL_RELEASE_LEVEL = 2,};
enum MACRO_TCL_RELEASE_SERIAL {TCL_RELEASE_SERIAL = 2,};
enum MACRO_TCL_RESERRORRATE {TCL_RESERRORRATE = 3,T_TCL_PROTECTION = 10,};
enum MACRO_TCL_SMALL {TCL_SMALL_HASH_TABLE = 4,TCL_STRING_KEYS = 0,};
enum MACRO_TCL_STDIN {TCL_STDIN = 2,TCL_STDOUT = 4,TCL_STDERR = 8,TCL_ENFORCE_MODE = 16,};
enum MACRO_TCL_TRANSDEL {TCL_TRANSDEL = 0xD,};
enum MACRO_TCL_UNIX {TCL_UNIX_FD = 1,TCL_MAC_FILE = 2,TCL_MAC_SOCKET = 3,TCL_WIN_PIPE = 4,TCL_WIN_FILE = 5,TCL_WIN_SOCKET = 6,TCL_WIN_CONSOLE = 7,TCL_WIN32S_PIPE = 8,};
enum MACRO_TCL_VOLATILE {TCL_VOLATILE = 1,TCL_STATIC = 0,};
enum MACRO_TCNTL {TCNTL_ENABLE_INLINE = 1,};
enum MACRO_TCNTL_CONF {TCNTL_CONF_UNSIGNED = 0,TCNTL_CONF_SIGNED = 1,};
enum MACRO_TCNTL_FILT {TCNTL_FILT_IDBLOCK = 300,};
enum MACRO_TCNTL_INFO {TCNTL_INFO_VERSION = 2,TCNTL_CONF_PARAM_SIZE = 30,};
enum MACRO_TCNTL_M {TCNTL_M_XDEBUG = 1,TCNTL_M_YDEBUG = 2,TCNTL_M_ZDEBUG = 4,};
enum MACRO_TCNTL_XDEBUG {TCNTL_XDEBUG_ENABLED = 0,};
enum MACRO_TCO {TCO_THROUGHPUT = 0x1,T_TCO_TRANSDEL = 0x2,};
enum MACRO_TCOOFF {TCOOFF = 0,TCOON = 1,TCIOFF = 2,TCION = 3,};
enum MACRO_TCO_ACKTIME {TCO_ACKTIME = 0x200,T_TCO_REASTIME = 0x300,};
enum MACRO_TCO_ALTCLASS1 {TCO_ALTCLASS1 = 0xA00,T_TCO_ALTCLASS2 = 0xB00,};
enum MACRO_TCO_ALTCLASS2 {TCO_ALTCLASS2 = 0xB00,T_TCO_ALTCLASS3 = 0xC00,};
enum MACRO_TCO_ALTCLASS3 {TCO_ALTCLASS3 = 0xC00,T_TCO_ALTCLASS4 = 0xD00,};
enum MACRO_TCO_ALTCLASS4 {TCO_ALTCLASS4 = 0xD00,};
enum MACRO_TCO_CHECKSUM {TCO_CHECKSUM = 0x600,T_TCO_NETEXP = 0x700,};
enum MACRO_TCO_CONNRESIL {TCO_CONNRESIL = 0x9,T_TCO_PROTECTION = 0xA,};
enum MACRO_TCO_ESTDELAY {TCO_ESTDELAY = 0x7,T_TCO_RELDELAY = 0x8,};
enum MACRO_TCO_ESTFAILPROB {TCO_ESTFAILPROB = 0x5,T_TCO_RELFAILPROB = 0x6,};
enum MACRO_TCO_EXPD {TCO_EXPD = 0xC,T_TCL_TRANSDEL = 0xD,};
enum MACRO_TCO_EXTFORM {TCO_EXTFORM = 0x400,T_TCO_FLOWCTRL = 0x500,};
enum MACRO_TCO_FLOWCTRL {TCO_FLOWCTRL = 0x500,T_TCO_CHECKSUM = 0x600,};
enum MACRO_TCO_LTPDU {TCO_LTPDU = 0x100,T_TCO_ACKTIME = 0x200,};
enum MACRO_TCO_NETEXP {TCO_NETEXP = 0x700,T_TCO_NETRECPTCF = 0x800,};
enum MACRO_TCO_NETRECPTCF {TCO_NETRECPTCF = 0x800,T_TCO_PREFCLASS = 0x900,};
enum MACRO_TCO_PREFCLASS {TCO_PREFCLASS = 0x900,T_TCO_ALTCLASS1 = 0xA00,};
enum MACRO_TCO_PRIORITY {TCO_PRIORITY = 0xB,T_TCO_EXPD = 0xC,};
enum MACRO_TCO_PROTECTION {TCO_PROTECTION = 0xA,T_TCO_PRIORITY = 0xB,};
enum MACRO_TCO_REASTIME {TCO_REASTIME = 0x300,T_TCO_EXTFORM = 0x400,};
enum MACRO_TCO_RELDELAY {TCO_RELDELAY = 0x8,T_TCO_CONNRESIL = 0x9,};
enum MACRO_TCO_RELFAILPROB {TCO_RELFAILPROB = 0x6,T_TCO_ESTDELAY = 0x7,};
enum MACRO_TCO_RESERRORRATE {TCO_RESERRORRATE = 0x3,T_TCO_TRANSFFAILPROB = 0x4,};
enum MACRO_TCO_TRANSDEL {TCO_TRANSDEL = 0x2,T_TCO_RESERRORRATE = 0x3,};
enum MACRO_TCO_TRANSFFAILPROB {TCO_TRANSFFAILPROB = 0x4,T_TCO_ESTFAILPROB = 0x5,};
enum MACRO_TCP {TCP_NODELAY = 0x1,T_TCP_MAXSEG = 0x2,};
enum MACRO_TCPOOB {TCPOOB_HAVEDATA = 0x1,TCPOOB_HADDATA = 0x2,MAX_SACK_ENTRIES = 0x4,};
enum MACRO_TCPOPT {TCPOPT_EOL = 0,TCPOPT_NOP = 1,TCPOPT_MAXSEG = 2,TCPOPT_WINDOW = 3,TCPOPT_SACK_REQ = 4,TCPOPT_SACK = 5,TCPOPT_TS = 8,};
enum MACRO_TCPOPT_TS {TCPOPT_TS_LEN = 10,TCPOLEN_TSTAMP_APPA = 16844810,};
enum MACRO_TCPREXMTTHRESH {TCPREXMTTHRESH = 3,};
enum MACRO_TCPS {TCPS_CLOSED = 0,TCPS_LISTEN = 1,TCPS_SYN_SENT = 2,TCPS_SYN_RECEIVED = 3,TCPS_ESTABLISHED = 4,TCPS_CLOSE_WAIT = 5,TCPS_FIN_WAIT_1 = 6,TCPS_CLOSING = 7,TCPS_LAST_ACK = 8,TCPS_FIN_WAIT_2 = 9,TCPS_TIME_WAIT = 10,TCPS_FREE = 11,};
enum MACRO_TCPT {TCPT_NTIMERS = 4,TCPT_REXMT = 0,};
enum MACRO_TCPTV {TCPTV_SRTTBASE = 0,};
enum MACRO_TCPTV_KEEPCNT {TCPTV_KEEPCNT = 8,};
enum MACRO_TCPT_PERSIST {TCPT_PERSIST = 1,TCPT_KEEP = 2,TCPT_2MSL = 3,TCP_TTL = 60,};
enum MACRO_TCP_ISSINCR {TCP_ISSINCR = 128000,};
enum MACRO_TCP_KEEPALIVE {TCP_KEEPALIVE = 0x8,T_GARBAGE = 0x2,};
enum MACRO_TCP_LINGERTIME {TCP_LINGERTIME = 120,};
enum MACRO_TCP_MAX {TCP_MAX_WINSHIFT = 14,};
enum MACRO_TCP_MAXRXTSHIFT {TCP_MAXRXTSHIFT = 12,};
enum MACRO_TCP_MAXSEG {TCP_MAXSEG = 0x2,T_TCP_KEEPALIVE = 0x8,};
enum MACRO_TCP_MSS {TCP_MSS = 536,TCP_MAXWIN = 65535,};
enum MACRO_TCP_NSTATES {TCP_NSTATES = 12,};
enum MACRO_TCP_RECVSPACE {TCP_RECVSPACE = 32768,};
enum MACRO_TCP_RPTR2RXT {TCP_RPTR2RXT = 0x3,TCP_KEEPIDLE = 0x4,TCP_KEEPINTVL = 0x5,TCP_KEEPCNT = 0x6,TCP_KEEPINIT = 0x7,TCP_PUSH = 0x8,TCP_NODELACK = 0x9,TCP_TSOPTENA = 0x10,TCP_PAWS = 0x20,TCP_SACKENA = 0x40,};
enum MACRO_TCP_RTT {TCP_RTT_SCALE = 8,TCP_RTT_SHIFT = 3,};
enum MACRO_TCP_RTTVAR {TCP_RTTVAR_SCALE = 4,TCP_RTTVAR_SHIFT = 2,};
enum MACRO_TCP_SACK {TCP_SACK_ELEMENT_LEN = 8,};
enum MACRO_TCSANOW {TCSANOW = 0,TCSADRAIN = 1,TCSAFLUSH = 2,};
enum MACRO_TCSBREAK {TCSBREAK = 536900637,};
enum MACRO_TCSBRK {TCSBRK = 536900637,TCXONC = 536900638,TCFLSH = 536900639,};
enum MACRO_TCStatistics {TCStatistics = 1,TCRequests = 2,TCEvents = 4,TCMaxPacket = 8,TCCmdKey = 16,TCTimeStamps = 32,TCWinXY = 64,TCXInput = 128,TCReqCBs = 256,TCEvtCBs = 512,TCCursor = 1024,TCColorReplies = 2048,TCGrabServer = 4096,};
enum MACRO_TEGC {TEGC_SWITCH = 0x1,FBUS_INTREQ_REG = 0x2,MOP_SYSID = 0x3,GET_TC_SPEED = 0x4,CONSOLE_2_DEV = 0x5,DEV_2_CONSOLE = 0x6,DEV_2_USER = 0x7,GET_810_SPEED = 0x8,GET_SLU_SPEED = 0x9,GET_FLAGS = 0xA,GET_UNIQUE_SYSID = 0xB,CONSOLE_2_CTLR = 0xC,SECONDARY_CACHE_SIZE = 0xD,PWRMGR_CAPABLE = 0xE,BYTEWORD_IO_CAPABLE = 0xF,MP_EV_NEEDED = 0x10,GET_SYS_TEMP = 0x11,GET_FAN_STATUS = 0x12,GET_PS_STATUS = 0x13,HIGH_TEMP_THRESHOLD = 0x14,VERIFY_CONSOLE_EV = 0x15,OS_POWERDOWN = 0x16,GET_SG_FLUSHPTR = 0x17,GET_SGMAP_CTL = 0x18,GET_HW_BUGS = 0x19,GET_FIRMWARE_REV = 0x1A,GET_PALCODE_REV = 0x1B,CHECK_MOTHERBOARD_SLOT = 0x1C,CTLR_2_CONSOLE = 0x1D,PLATFORM_IO_BIT = 0x1E,SW_INTERLEAVE_REQUIRED = 0x20,GET_MEM_BANK_COUNT = 0x21,GET_MEM_BANK_SIZE = 0x22,GET_MEM_BANK_BASE_PA = 0x23,GET_BAD_PAGE_LIST = 0x24,GET_PLATFORM_RESET_PTR = 0x25,GET_HALT_AFTER_PANIC = 0x26,CHECK_IDE_LIMITS = 0x27,ACE_PIC_INT_MODE = 0x28,MEM_ADDR_ALIGN = 0x100,PEER_TO_PEER = 0x101,IS_32BIT_CONSOLE = 0x102,PSIOP_810_SCLK_25MHz = 0x9C4,PSIOP_810_SCLK_32MHz = 0xC80,PSIOP_810_SCLK_33MHz = 0xCE4,PSIOP_810_SCLK_40MHz = 0xFA0,};
enum MACRO_TELOPT {TELOPT_BINARY = 0,TELOPT_ECHO = 1,TELOPT_RCP = 2,TELOPT_SGA = 3,TELOPT_NAMS = 4,TELOPT_STATUS = 5,TELOPT_TM = 6,TELOPT_RCTE = 7,TELOPT_NAOL = 8,TELOPT_NAOP = 9,TELOPT_NAOCRD = 10,TELOPT_NAOHTS = 11,TELOPT_NAOHTD = 12,TELOPT_NAOFFD = 13,TELOPT_NAOVTS = 14,TELOPT_NAOVTD = 15,TELOPT_NAOLFD = 16,TELOPT_XASCII = 17,TELOPT_LOGOUT = 18,TELOPT_BM = 19,TELOPT_DET = 20,TELOPT_SUPDUP = 21,TELOPT_SUPDUPOUTPUT = 22,TELOPT_SNDLOC = 23,TELOPT_TTYPE = 24,TELOPT_EOR = 25,TELOPT_TUID = 26,TELOPT_OUTMRK = 27,TELOPT_TTYLOC = 28,TELOPT_3270REGIME = 29,TELOPT_X3PAD = 30,TELOPT_NAWS = 31,TELOPT_TSPEED = 32,TELOPT_LFLOW = 33,TELOPT_LINEMODE = 34,TELOPT_XDISPLOC = 35,TELOPT_OLD_ENVIRON = 36,TELOPT_NEW_ENVIRON = 39,TELOPT_AUTHENTICATION = 45,TELOPT_EXOPL = 255,};
enum MACRO_TELQUAL {TELQUAL_IS = 0,TELQUAL_SEND = 1,TELQUAL_INFO = 2,};
enum MACRO_TELQUAL_AUTHTYPE {TELQUAL_AUTHTYPE_NONE = 0,TELQUAL_AUTHTYPE_PRIVATE = 1,TELQUAL_AUTHTYPE_KERBEROS = 2,TELQUAL_AUTHTYPE_KERBEROS_V4 = 4,TELQUAL_AUTHTYPE_KERBEROS_V5 = 5,};
enum MACRO_TELQUAL_AUTHTYPE_KERBEROS {TELQUAL_AUTHTYPE_KERBEROS_USERNAME = 1,};
enum MACRO_TERM {TERM_ERR_SET = 2,INP_QSIZE = 32,};
enum MACRO_TERM_NONE {TERM_NONE = 0,TERM_TEC = 1,TERM_V61 = 2,TERM_V10 = 3,TERM_TEX = 4,TERM_D40 = 5,TERM_H45 = 6,TERM_D42 = 7,};
enum MACRO_TF {TF_ACKNOW = 0x1,TF_DELACK = 0x2,TF_NODELAY = 0x4,TF_NOOPT = 0x8,TF_SENTFIN = 0x10,TF_REQ_SCALE = 0x20,TF_RCVD_SCALE = 0x40,TF_UIOMOVED = 0x80,};
enum MACRO_TF2 {TF2_PUSH = 0x1,TF2_NODELACK = 0x2,TF2_TSOPTENA = 0x4,TF2_TSOPT = 0x8,TF2_PAWS = 0x10,TF2_CLUA_ALIAS = 0x20,TF2_CLUA_CNXQ = 0x40,TF2_CLUA_CNXR = 0x80,TF2_SACKENA = 0x100,TF2_SACK = 0x200,};
enum MACRO_TF2_INHERIT {TF2_INHERIT = 276,};
enum MACRO_TGEXEC {TGEXEC = 0x8,};
enum MACRO_TGREAD {TGREAD = 0x20,};
enum MACRO_TGWRITE {TGWRITE = 0x10,};
enum MACRO_TH {TH_USAGE_SCALE = 1000,TH_STATE_RUNNING = 1,};
enum MACRO_THIRD {THIRD_TOOLVER = 0,};
enum MACRO_THREAD {THREAD_STATE_MAX = 64,THREAD_STATE_FLAVOR_LIST = 0,};
enum MACRO_THREAD_EVENTS {THREAD_EVENTS_INFO = 3,};
enum MACRO_THREAD_INFO {THREAD_INFO_MAX = 1024,THREAD_BASIC_INFO = 1,};
enum MACRO_THREAD_KERNEL {THREAD_KERNEL_PORT = 1,THREAD_REPLY_PORT = 2,THREAD_EXCEPTION_PORT = 3,};
enum MACRO_THREAD_SCHED {THREAD_SCHED_INFO = 2,TH_BOUND_PROCESSOR = 1,};
enum MACRO_THREAD_SIGNAL {THREAD_SIGNAL_INFO = 4,};
enum MACRO_TH_BOUND {TH_BOUND_PSET = 0x2,};
enum MACRO_TH_FIN {TH_FIN = 0x1,TH_SYN = 0x2,TH_RST = 0x4,TH_PUSH = 0x8,TH_ACK = 0x10,TH_URG = 0x20,TCPOPT_MAX_LEN = 0x28,};
enum MACRO_TH_FLAGS {TH_FLAGS_SWAPPED = 0x1,TH_FLAGS_IDLE = 0x2,};
enum MACRO_TH_STATE {TH_STATE_STOPPED = 2,TH_STATE_WAITING = 3,TH_STATE_UNINTERRUPTIBLE = 4,TH_STATE_HALTED = 5,};
enum MACRO_TI {TI_NOT_QUEUED = 0x0,TI_INSWAPPED = 0x1,TI_OUTSWAPPED = 0x2,TI_COMING_IN = 0x3,TI_GOING_OUT = 0x4,TI_UNSWAPPABLE = 0x5,};
enum MACRO_TIME {TIME_MICROS_MAX = 1000000,};
enum MACRO_TIMEOFDAY {TIMEOFDAY = 1,};
enum MACRO_TIMER {TIMER_MAX = 32,};
enum MACRO_TIMER_ABS {TIMER_ABS = 1,};
enum MACRO_TIMER_ABSTIME {TIMER_ABSTIME = 0x1,};
enum MACRO_TIMER_RATE {TIMER_RATE = 30,};
enum MACRO_TIME_OK {TIME_OK = 0,TIME_INS = 1,TIME_DEL = 2,TIME_OOP = 3,TIME_WAIT = 4,TIME_ERROR = 5,};
enum MACRO_TIOCCBRK {TIOCCBRK = 536900730,};
enum MACRO_TIOCCDTR {TIOCCDTR = 536900728,};
enum MACRO_TIOCCMLB {TIOCCMLB = 536900708,};
enum MACRO_TIOCHPCL {TIOCHPCL = 536900610,};
enum MACRO_TIOCISATTY {TIOCISATTY = 536900702,};
enum MACRO_TIOCM {TIOCM_LE = 0x1,TIOCM_DTR = 0x2,TIOCM_RTS = 0x4,TIOCM_ST = 0x8,TIOCM_SR = 0x10,TIOCM_CTS = 0x20,TIOCM_CAR = 0x40,};
enum MACRO_TIOCM_CD {TIOCM_CD = 64,TIOCM_RNG = 128,};
enum MACRO_TIOCM_RI {TIOCM_RI = 128,TIOCM_DSR = 256,TIOCEXCL = 536900621,TIOCNXCL = 536900622,};
enum MACRO_TIOCNOTTY {TIOCNOTTY = 536900721,};
enum MACRO_TIOCPKT {TIOCPKT_DATA = 0x0,TIOCPKT_FLUSHREAD = 0x1,TIOCPKT_FLUSHWRITE = 0x2,TIOCPKT_STOP = 0x4,TIOCPKT_START = 0x8,TIOCPKT_NOSTOP = 0x10,TIOCPKT_DOSTOP = 0x20,TIOCSTOP = 0x2000746F,};
enum MACRO_TIOCSBRK {TIOCSBRK = 536900731,};
enum MACRO_TIOCSCTTY {TIOCSCTTY = 536900705,};
enum MACRO_TIOCSDTR {TIOCSDTR = 536900729,};
enum MACRO_TIOCSIG {TIOCSIG = 536900703,};
enum MACRO_TIOCSMLB {TIOCSMLB = 536900709,};
enum MACRO_TIOCSTART {TIOCSTART = 536900718,};
enum MACRO_TK {TK_MAJOR_VERSION = 4,TK_MINOR_VERSION = 2,};
enum MACRO_TK_3D {TK_3D_FLAT_GC = 1,TK_3D_LIGHT_GC = 2,TK_3D_DARK_GC = 3,TK_NOTIFY_SHARE = 20,};
enum MACRO_TK_ARGV {TK_ARGV_CONSTANT = 15,TK_ARGV_INT = 16,TK_ARGV_STRING = 17,TK_ARGV_UID = 18,TK_ARGV_REST = 19,TK_ARGV_FLOAT = 20,TK_ARGV_FUNC = 21,TK_ARGV_GENFUNC = 22,TK_ARGV_HELP = 23,TK_ARGV_CONST_OPTION = 24,TK_ARGV_OPTION_VALUE = 25,TK_ARGV_OPTION_NAME_VALUE = 26,TK_ARGV_END = 27,};
enum MACRO_TK_ARGV_NO {TK_ARGV_NO_DEFAULTS = 0x1,TK_ARGV_NO_LEFTOVERS = 0x2,TK_ARGV_NO_ABBREV = 0x4,TK_ARGV_DONT_SKIP_FIRST_ARG = 0x8,};
enum MACRO_TK_CONFIG {TK_CONFIG_BOOLEAN = 1,TK_CONFIG_INT = 2,TK_CONFIG_DOUBLE = 3,TK_CONFIG_STRING = 4,TK_CONFIG_UID = 5,TK_CONFIG_COLOR = 6,TK_CONFIG_FONT = 7,TK_CONFIG_BITMAP = 8,TK_CONFIG_BORDER = 9,TK_CONFIG_RELIEF = 10,TK_CONFIG_CURSOR = 11,TK_CONFIG_ACTIVE_CURSOR = 12,TK_CONFIG_JUSTIFY = 13,TK_CONFIG_ANCHOR = 14,TK_CONFIG_SYNONYM = 15,TK_CONFIG_CAP_STYLE = 16,TK_CONFIG_JOIN_STYLE = 17,TK_CONFIG_PIXELS = 18,TK_CONFIG_MM = 19,TK_CONFIG_WINDOW = 20,TK_CONFIG_CUSTOM = 21,TK_CONFIG_END = 22,};
enum MACRO_TK_CONFIG_ARGV {TK_CONFIG_ARGV_ONLY = 1,};
enum MACRO_TK_CONFIG_COLOR {TK_CONFIG_COLOR_ONLY = 1,TK_CONFIG_MONO_ONLY = 2,TK_CONFIG_NULL_OK = 4,TK_CONFIG_DONT_SET_DEFAULT = 8,TK_CONFIG_OPTION_SPECIFIED = 16,TK_CONFIG_USER_BIT = 256,};
enum MACRO_TK_DONT {TK_DONT_WAIT = 2,TK_X_EVENTS = 4,};
enum MACRO_TK_MAPPED {TK_MAPPED = 1,TK_TOP_LEVEL = 2,TK_ALREADY_DEAD = 4,TK_NEED_CONFIG_NOTIFY = 8,TK_GRAB_FLAG = 16,TK_CHECKED_IC = 32,TK_PARENT_DESTROYED = 64,TK_WM_COLORMAP_WINDOW = 128,};
enum MACRO_TK_READABLE {TK_READABLE = 2,TK_WRITABLE = 4,TK_EXCEPTION = 8,};
enum MACRO_TK_RELEASE {TK_RELEASE_LEVEL = 2,};
enum MACRO_TK_RELEASE_SERIAL {TK_RELEASE_SERIAL = 2,};
enum MACRO_TK_RELIEF {TK_RELIEF_RAISED = 1,TK_RELIEF_FLAT = 2,TK_RELIEF_SUNKEN = 4,TK_RELIEF_GROOVE = 8,TK_RELIEF_RIDGE = 16,TK_RELIEF_FLATLINE = 32,};
enum MACRO_TK_SCROLL {TK_SCROLL_MOVETO = 1,TK_SCROLL_PAGES = 2,TK_SCROLL_UNITS = 3,TK_SCROLL_ERROR = 4,VirtualEvent = 35,ActivateNotify = 36,DeactivateNotify = 37,TK_LASTEVENT = 38,VirtualEventMask = 1073741824,};
enum MACRO_TK_TAG {TK_TAG_SPACE = 3,};
enum MACRO_TK_WIDGET {TK_WIDGET_DEFAULT_PRIO = 20,TK_STARTUP_FILE_PRIO = 40,TK_USER_DEFAULT_PRIO = 60,TK_INTERACTIVE_PRIO = 80,TK_MAX_PRIO = 100,};
enum MACRO_TK_WINDOW {TK_WINDOW_EVENTS = 4,TK_FILE_EVENTS = 8,TK_TIMER_EVENTS = 16,TK_IDLE_EVENTS = 32,TK_ALL_EVENTS = -3,};
enum MACRO_TLC {TLC_FEHOST = -2147287297,TLC_SPECHOST = 0,};
enum MACRO_TLC_CONSOLE {TLC_CONSOLE = 0xFFFF,};
enum MACRO_TLC_DETACH {TLC_DETACH = -2,};
enum MACRO_TLC_DISPLAY {TLC_DISPLAY = 0xFFFE,TLC_UNKHOST = 0x0,};
enum MACRO_TLC_RANDOMTTY {TLC_RANDOMTTY = -4,};
enum MACRO_TLC_TACTTY {TLC_TACTTY = -3,};
enum MACRO_TLC_UNKTTY {TLC_UNKTTY = -1,};
enum MACRO_TLS {TLS_PTR_BIAS = 0x0,TLS_MAX_SIZE = 0x7FFF7FF0,};
enum MACRO_TM {TM_INPUT = 1,TM_OUTPUT = 2,TM_CLEAR = 4,TM_USE = 8,TM_LOAD = 16,TM_RELOAD = 32,TM_STICKY = 64,TM_DEFUNCT = 128,};
enum MACRO_TMAGLEN {TMAGLEN = 6,};
enum MACRO_TMP {TMP_MAX = 16384,};
enum MACRO_TM_JANUARY {TM_JANUARY = 0,TM_FEBRUARY = 1,TM_MARCH = 2,TM_APRIL = 3,TM_MAY = 4,TM_JUNE = 5,TM_JULY = 6,TM_AUGUST = 7,TM_SEPTEMBER = 8,TM_OCTOBER = 9,TM_NOVEMBER = 10,TM_DECEMBER = 11,TM_YEAR_BASE = 1900,EPOCH_YEAR = 1970,};
enum MACRO_TM_NONE {TM_NONE = 0x0,TM_SNL = 0x1,TM_ANL = 0x2,TM_LCF = 0x4,TM_CECHO = 0x8,TM_CINVIS = 0x10,TM_SET = 0x80,};
enum MACRO_TM_SUNDAY {TM_SUNDAY = 0,TM_MONDAY = 1,TM_TUESDAY = 2,TM_WEDNESDAY = 3,TM_THURSDAY = 4,TM_FRIDAY = 5,TM_SATURDAY = 6,};
enum MACRO_TOCSIZE {TOCSIZE = 32,};
enum MACRO_TOEXEC {TOEXEC = 0x1,};
enum MACRO_TOO {TOO_MANY_PROCESSORS = -502,};
enum MACRO_TOP {TOP_EDGE = 0x1,BOTTOM_EDGE = 0x2,LEFT_EDGE = 0x4,RIGHT_EDGE = 0x8,};
enum MACRO_TOREAD {TOREAD = 0x4,};
enum MACRO_TOSTOP {TOSTOP = 0x400000,};
enum MACRO_TOWRITE {TOWRITE = 0x2,};
enum MACRO_TPDEV {TPDEV_CLS_UNKNOWN = 0x0,TPDEV_CLS_DLT = 0x1,};
enum MACRO_TPDEV_BOM {TPDEV_BOM = 0x1,TPDEV_EOM = 0x2,TPDEV_RESERVED1 = 0x4,TPDEV_WRTPROT = 0x8,TPDEV_BLANK = 0x10,TPDEV_WRITTEN = 0x20,TPDEV_RESERVED2 = 0x40,TPDEV_SOFTERR = 0x80,TPDEV_HARDERR = 0x100,TPDEV_DONE = 0x200,TPDEV_RETRY = 0x400,TPDEV_ERASED = 0x800,TPDEV_TPMARK = 0x1000,TPDEV_SHRTREC = 0x2000,TPDEV_RDOPP = 0x4000,TPDEV_RWDING = 0x8000,TPDEV_POS_VALID = 0x10000,};
enum MACRO_TPDEV_CLASS {TPDEV_CLASS_LEN = 32,DEV_TYPE_LEN = 256,};
enum MACRO_TPDEV_CLS {TPDEV_CLS_TK = 1,TPDEV_CLS_RDAT = 2,TPDEV_CLS_9TRK = 3,TPDEV_CLS_QIC = 4,TPDEV_CLS_8MM = 5,TPDEV_CLS_3480 = 6,};
enum MACRO_TPDEV_READY {TPDEV_READY = 0x1,TPDEV_OFFLINE = 0x2,TPDEV_NO_EOM = 0x4,TPDEV_HAS_LOADER = 0x8,TPDEV_1FM_ONCLOSE = 0x10,TPDEV_REW_ONCLOSE = 0x20,TPDEV_COMPACTING = 0x40,TPDEV_COMPRESSING = 0x80,TPDEV_BUFFERED = 0x100,};
enum MACRO_TR {TR_BUFSIZE = 8192,};
enum MACRO_TRACE {TRACE = 0x80,};
enum MACRO_TRAP {TRAP_BRKPT = 1,TRAP_TRACE = 2,};
enum MACRO_TREE {TREE_INITIAL_DEPTH = 10,TREE_HORIZONTAL_DEFAULT_SPACING = 20,};
enum MACRO_TREE_VERTICAL {TREE_VERTICAL_DEFAULT_SPACING = 6,};
enum MACRO_TRLR {TRLR_SAP = 0x1001,MAX_TRLR_SAP = 0x1010,MAX_SAP = 0xFFFF,UNDEF_SAP = 0xFFFFFFFF,};
enum MACRO_TRN {TRN_LF_516 = 0x0,TRN_LF_1500 = 0x1,TRN_LF_2052 = 0x2,TRN_LF_4472 = 0x3,TRN_LF_8144 = 0x4,TRN_LF_11407 = 0x5,TRN_LF_17800 = 0x6,TRN_LF_65535 = 0x7,};
enum MACRO_TRN4 {TRN4_RFC1042_MAC_MTU = 4136,TRN16_RFC1042_MAC_MTU = 8232,};
enum MACRO_TRN4_MAX {TRN4_MAX_MTU = 4508,TRN16_MAX_MTU = 17836,};
enum MACRO_TRN4_MEDIA {TRN4_MEDIA_MTU = 4472,TRN16_MEDIA_MTU = 17800,};
enum MACRO_TRN_AC {TRN_AC = 0x0,TRN_FC = 0x40,};
enum MACRO_TRN_BANDWIDTH {TRN_BANDWIDTH_16MB = 16000000,};
enum MACRO_TRN_FRAME {TRN_FRAME = 0xE,TRN_BANDWIDTH_4MB = 0x2625A00,};
enum MACRO_TRN_NON {TRN_NON_BROADCAST = 0,TRN_ALL_BROADCAST = 4,TRN_SINGLE_BROADCAST = 6,};
enum MACRO_TRUSTED {TRUSTED_MASK_LEN = 16,AUDIT_MASK_LEN = 83,};
enum MACRO_TRUSTED_INTMASK {TRUSTED_INTMASK_LEN = 4,AUDIT_INTMASK_LEN = 21,};
enum MACRO_TR_BREADHIT {TR_BREADHIT = 0,TR_BREADMISS = 1,TR_BWRITE = 2,TR_BREADHITRA = 3,TR_BREADMISSRA = 4,TR_XFODMISS = 5,TR_XFODHIT = 6,TR_BRELSE = 7,TR_BREALLOC = 8,TR_MALL = 10,TR_INTRANS = 20,TR_EINTRANS = 21,TR_FRECLAIM = 22,TR_RECLAIM = 23,TR_XSFREC = 24,TR_XIFREC = 25,TR_WAITMEM = 26,TR_EWAITMEM = 27,TR_ZFOD = 28,TR_EXFOD = 29,TR_VRFOD = 30,TR_CACHEFOD = 31,TR_SWAPIN = 32,TR_PGINDONE = 33,TR_SWAPIO = 34,TR_VADVISE = 40,TR_STAMP = 45,TR_NFLAGS = 100,TRCSIZ = 4096,};
enum MACRO_TR_PGRP {TR_PGRP = 16,};
enum MACRO_TR_PIDS {TR_PIDS = 16,};
enum MACRO_TR_SYSC {TR_SYSC = 16,};
enum MACRO_TR_UIDS {TR_UIDS = 16,};
enum MACRO_TS {TS_TAPE = 1,TS_INODE = 2,TS_BITS = 3,TS_ADDR = 4,TS_END = 5,TS_CLRI = 6,OFS_MAGIC = 60011,NFS_MAGIC = 60012,};
enum MACRO_TSGID {TSGID = 0x400,};
enum MACRO_TSP {TSP_ANY = 0,TSP_ADJTIME = 1,TSP_ACK = 2,TSP_MASTERREQ = 3,TSP_MASTERACK = 4,TSP_SETTIME = 5,TSP_MASTERUP = 6,TSP_SLAVEUP = 7,TSP_ELECTION = 8,TSP_ACCEPT = 9,TSP_REFUSE = 10,TSP_CONFLICT = 11,TSP_RESOLVE = 12,TSP_QUIT = 13,TSP_DATE = 14,TSP_DATEREQ = 15,TSP_DATEACK = 16,TSP_TRACEON = 17,TSP_TRACEOFF = 18,TSP_MSITE = 19,TSP_MSITEREQ = 20,TSP_TEST = 21,TSP_SETDATE = 22,TSP_SETDATEREQ = 23,TSP_LOOP = 24,TSPTYPENUMBER = 25,};
enum MACRO_TSPVERSION {TSPVERSION = 1,};
enum MACRO_TSVTX {TSVTX = 0x200,};
enum MACRO_TS_BKSL {TS_BKSL = 0x10000,TS_ERASE = 0x40000,TS_LNCH = 0x80000,TS_TYPEN = 0x100000,TS_CNTTB = 0x200000,TS_INTIMEOUT = 0x2000000,};
enum MACRO_TS_LOCAL {TS_LOCAL = 3997696,};
enum MACRO_TS_NOCHANGE {TS_NOCHANGE = -32768,};
enum MACRO_TS_TIMEOUT {TS_TIMEOUT = 0x1,TS_WOPEN = 0x2,TS_ISOPEN = 0x4,TS_FLUSH = 0x8,TS_CARR_ON = 0x10,TS_BUSY = 0x20,TS_ASLEEP = 0x40,TS_XCLUDE = 0x80,TS_TTSTOP = 0x100,TS_HUPCLS = 0x200,TS_TBLOCK = 0x400,TS_NBIO = 0x2000,TS_ASYNC = 0x4000,TS_ONDELAY = 0x8000,TS_MODEM_ON = 0x400000,TS_CLOSING = 0x800000,TS_INUSE = 0x1000000,TS_NOFLOWCHARS = 0x2000000,TS_DRAIN_CL = 0x4000000,TS_NEED_PARAM = 0x20000000,};
enum MACRO_TTIPRI {TTIPRI = 28,TTOPRI = 29,};
enum MACRO_TTMAP {TTMAP_VERSION = 1,TTMAP_NAMELEN = 32,};
enum MACRO_TTMAP_BUFMAX {TTMAP_BUFMAX = 10,TTMAP_MAXSIZE = 131072,};
enum MACRO_TTMAP_PAT {TTMAP_PAT_SIZE = 10,TTMAP_REP_SIZE = 16,};
enum MACRO_TTMASK {TTMASK = 15,OBUFSIZ = 100,TTYHOG = 512,};
enum MACRO_TTY {TTY_NAME_MAX = 13,};
enum MACRO_TTYDEF {TTYDEF_IFLAG = 11010,};
enum MACRO_TTYDEF_OFLAG {TTYDEF_OFLAG = 3,TTYDEF_LFLAG = 1483,TTYDEF_CFLAG = 19200,};
enum MACRO_TTYDEF_SPEED {TTYDEF_SPEED = 9600,};
enum MACRO_TTYDISC {TTYDISC = 0,TABLDISC = 3,SLIPDISC = 4,DUDISC = 7,KJIDISC = 8,ASYDISC = 9,TSBDISC = 10,KDBDISC = 11,};
enum MACRO_TTY_FE {TTY_FE = 0x1000000,TTY_PE = 0x2000000,};
enum MACRO_TTY_ON {TTY_ON = 0x1,TTY_SECURE = 0x2,};
enum MACRO_TUEXEC {TUEXEC = 0x40,};
enum MACRO_TUREAD {TUREAD = 0x100,};
enum MACRO_TUWRITE {TUWRITE = 0x80,};
enum MACRO_TVERSLEN {TVERSLEN = 2,REGTYPE = 48,};
enum MACRO_TYPE {TYPE_A = 1,TYPE_E = 2,TYPE_I = 3,TYPE_L = 4,};
enum MACRO_TYPE_ERROR {TYPE_ERROR = 0x0,NEW_C = 0x40,};
enum MACRO_TYPE_IP {TYPE_IP = 0x40,TYPE_UNCOMPRESSED_TCP = 0x70,TYPE_COMPRESSED_TCP = 0x80,};
enum MACRO_TZ {TZ_MAX_TIMES = 370,};
enum MACRO_TZNAME {TZNAME_MAX = 255,PATH_MAX = 1023,PIPE_BUF = 4096,};
enum MACRO_TZ_MAX {TZ_MAX_TYPES = 20,TZ_MAX_CHARS = 255,};
enum MACRO_TZ_MAX_LEAPS {TZ_MAX_LEAPS = 50,SECSPERMIN = 60,};
enum MACRO_T_ABSREQ {T_ABSREQ = 0x8000,T_INFINITE = 0xFFFFFFFF,};
enum MACRO_T_ADDR {T_ADDR = 0x1,T_OPT = 0x2,T_UDATA = 0x4,T_ALL = 0xFFFF,};
enum MACRO_T_ALLOPT {T_ALLOPT = 0,};
enum MACRO_T_BIND {T_BIND = 1,T_OPTMGMT = 2,T_CALL = 3,T_DIS = 4,T_UNITDATA = 5,T_UDERROR = 6,T_INFO = 7,};
enum MACRO_T_BIND_STR {T_BIND_STR = 1,T_OPTMGMT_STR = 2,T_CALL_STR = 3,T_DIS_STR = 4,T_UNITDATA_STR = 5,T_UDERROR_STR = 6,T_INFO_STR = 7,};
enum MACRO_T_CLASS0 {T_CLASS0 = 0,T_CLASS1 = 1,T_CLASS2 = 2,T_CLASS3 = 3,T_CLASS4 = 4,};
enum MACRO_T_COTS {T_COTS_ORD = 0x2,T_CLTS = 0x3,};
enum MACRO_T_HITHRPT {T_HITHRPT = 8,T_HIREL = 4,};
enum MACRO_T_IFAULT {T_IFAULT_BPT = 0,T_IFAULT_BUGCK = 1,T_IFAULT_GENT = 2,T_IFAULT_FEN = 3,T_IFAULT_OPDEC = 4,T_IFAULT_ILLOP = 5,};
enum MACRO_T_INET {T_INET_TCP = 0x6,};
enum MACRO_T_INET_IP {T_INET_IP = 0x0,};
enum MACRO_T_INET_UDP {T_INET_UDP = 0x11,};
enum MACRO_T_INVALID {T_INVALID = -2,};
enum MACRO_T_IOV {T_IOV_MAX = 16,T_COTS = 1,};
enum MACRO_T_IP {T_IP_TOS = 3,};
enum MACRO_T_IP_REUSEADDR {T_IP_REUSEADDR = 16,};
enum MACRO_T_IP_TTL {T_IP_TTL = 4,};
enum MACRO_T_LISTEN {T_LISTEN = 0x1,T_CONNECT = 0x2,T_DATA = 0x4,T_EXDATA = 0x8,T_DISCONNECT = 0x10,T_UDERR = 0x40,T_ORDREL = 0x80,T_GODATA = 0x100,T_GOEXDATA = 0x200,T_EVENTS = 0x400,};
enum MACRO_T_MMANG {T_MMANG_TNV = 0,T_MMANG_ACV = 1,T_MMANG_FOR = 2,T_MMANG_FOE = 3,T_MMANG_FOW = 4,T_AST = 80,};
enum MACRO_T_MORE {T_MORE = 0x1,T_EXPEDITED = 0x2,T_NEGOTIATE = 0x4,T_CHECK = 0x8,T_DEFAULT = 0x10,T_SUCCESS = 0x20,T_FAILURE = 0x40,T_CURRENT = 0x80,T_PARTSUCCESS = 0x100,T_READONLY = 0x200,T_NOTSUPPORT = 0x400,};
enum MACRO_T_NOPROTECT {T_NOPROTECT = 1,T_PASSIVEPROTECT = 2,T_ACTIVEPROTECT = 4,T_LTPDUDFLT = 128,T_ISO_TP = 256,};
enum MACRO_T_NOTOS {T_NOTOS = 0,T_LDELAY = 16,};
enum MACRO_T_PRITOP {T_PRITOP = 0,T_PRIHIGH = 1,T_PRIMID = 2,T_PRILOW = 3,T_PRIDFLT = 4,};
enum MACRO_T_ROUTINE {T_ROUTINE = 0,T_PRIORITY = 1,T_IMMEDIATE = 2,T_FLASH = 3,T_OVERRIDEFLASH = 4,T_CRITIC_ECP = 5,T_INETCONTROL = 6,T_NETCONTROL = 7,};
enum MACRO_T_SENDZERO {T_SENDZERO = 0x1,T_ORDRELDATA = 0x2,T_XPG4_1 = 0x100,T_XPG5 = 0x200,};
enum MACRO_T_TCL {T_TCL_RESERRORRATE = 3,};
enum MACRO_T_TCL_CHECKSUM {T_TCL_CHECKSUM = 1536,};
enum MACRO_T_TCO {T_TCO_THROUGHPUT = 0x1,};
enum MACRO_T_TCP {T_TCP_NODELAY = 0x1,};
enum MACRO_T_UNINIT {T_UNINIT = 0,T_UNBND = 1,T_IDLE = 2,T_OUTCON = 3,T_INCON = 4,T_DATAXFER = 5,T_OUTREL = 6,T_INREL = 7,};
enum MACRO_T_UNUSED {T_UNUSED = -1,};
enum MACRO_T_YES {T_YES = 1,T_NO = 0,};
enum MACRO_TopLevelShellIndex {TopLevelShellIndex = 8,XmApplicationShellIndex = 9,};
enum MACRO_TransientShellIndex {TransientShellIndex = 8,};
enum MACRO_U {U_FE_ALLOC_SIZE = 8,};
enum MACRO_U64 {U64_MPN = -1,};
enum MACRO_UAC {UAC_BITMASK = 0x7,};
enum MACRO_UAC_NOPRINT {UAC_NOPRINT = 0x1,UAC_NOFIX = 0x2,UAC_SIGBUS = 0x4,IEC_BITMASK = 0x78000000,};
enum MACRO_UBSHIFT {UBSHIFT = 10,MAXPATHLEN = 1024,};
enum MACRO_UBSIZE {UBSIZE = 1024,};
enum MACRO_UDP {UDP_TTL = 30,UDP_SENDSPACE = 9216,};
enum MACRO_UF {UF_EXCLOSE = 0x1,UF_MAPPED = 0x2,};
enum MACRO_UIDHSZ {UIDHSZ = 128,};
enum MACRO_UIO {UIO_MAXIOV = 1024,UIO_SMALLIOV = 8,};
enum MACRO_UL {UL_TXTLOCK = 1,UL_DATLOCK = 2,};
enum MACRO_ULONG {ULONG_MAX = -1,};
enum MACRO_ULT42V11 {ULT42V11 = 0x101,};
enum MACRO_UL_GETFSIZE {UL_GETFSIZE = 1,UL_SETFSIZE = 2,UL_GETBREAK = 3,};
enum MACRO_UL_MPN {UL_MPN = -1,};
enum MACRO_UMODE {UMODE_P_GID = 0x1,UMODE_NOFOLLOW = 0x2,UMODE_NONICE = 0x4,PI_COMLEN = 0x13,};
enum MACRO_UNACCESSIBLE {UNACCESSIBLE = 1,NO_TERMINAL = 2,CORRUPTED = 3,ENTRY_TOO_LONG = 4,TERMINFO_TOO_LONG = 5,TERM_BAD_MALLOC = 6,NOT_READABLE = 7,TERM_DBG_BAD_MALLOC = 8,};
enum MACRO_UNITY {UNITY_BASE = -1024,};
enum MACRO_UNKN {UNKN_SYSTEM = 0,VAX_780 = 1,VAX_750 = 2,VAX_730 = 3,VAX_8600 = 4,VAX_8200 = 5,VAX_8800 = 6,MVAX_I = 7,MVAX_II = 8,V_VAX = 9,VAX_3600 = 10,VAX_6200 = 11,VAX_3400 = 12,C_VAXSTAR = 13,VAX_60 = 14,VAX_3900 = 15,DS_3100 = 16,VAX_8820 = 17,DS_5400 = 18,DS_5800 = 19,DS_5000 = 20,DS_CMAX = 21,VAX_6400 = 22,VAXSTAR = 23,DS_5500 = 24,DS_5100 = 25,VAX_9000 = 26,DS_5000_100 = 27,ALPHA_ADU = 28,DEC_4000 = 29,DEC_3000_500 = 30,DEC_7000 = 31,DS_5000_300 = 32,DEC_3000_300 = 33,DEC_2000_300 = 34,DEC_2100_A500 = 35,LCA_MUSTANG = 36,DEC_2100_A50 = 37,ALPHA_KN20AA = 38,DEC_21000 = 39,DEC_AXPVME_64 = 40,DEC_2100_C500 = 41,DEC_AXPPCI_33 = 42,DEC_1000 = 43,EB64_PLUS = 44,LCA_EB66 = 45,ALPHA_EB164 = 46,DEC_EV45_PBP = 47,DEC_1000A = 48,DEC_4100 = 49,DEC_ALPHAVME_224 = 50,DEC_1000_5 = 51,DEC_1000A_5 = 52,DEC_EV56_PBP = 53,ALPHABOOK_1 = 54,DEC_ALPHAVME_320 = 55,DEC_550 = 56,DEC_6600 = 57,DMCC_EV6 = 58,ALPHA_WILDFIRE = 59,};
enum MACRO_UNKNOWN {UNKNOWN_ATTR_VAL = -2,};
enum MACRO_UNLOCK {UNLOCK = 0,PROCLOCK = 1,TXTLOCK = 2,DATLOCK = 4,ATOMIC_LOCKBIT = 31,};
enum MACRO_UNMAP {UNMAP_SCREEN = 0,MAP_SCREEN = 1,};
enum MACRO_UNNAMED {UNNAMED_ENUM_TOKEN = 69,EXPANDED_TOKEN = 106,WCHAR_T_TOKEN = 119,};
enum MACRO_UNNAMED_TOKEN {UNNAMED_TOKEN_LEN = 3,NUMBER_OF_UNNAMED_TOKENS = 4,};
enum MACRO_UPAGECNT {UPAGECNT = 1,};
enum MACRO_UPD {UPD_CNTL = 0x1,UPD_MASK = 0x2,};
enum MACRO_URTI {URTI_GENTRAP = 1,URTI_EMULATE = 2,URTI_RESCHED = 3,};
enum MACRO_US {US_SIGSTACK = 0x1,US_ONSTACK = 0x2,US_PROFILE = 0x4,US_SYSCALL = 0x8,US_TRAP = 0x10,US_YELLOW = 0x20,US_YZONE = 0x40,US_FP_OWNED = 0x80,};
enum MACRO_USC {USC_GET = 1,USC_SET = 2,USW_NULLP = 256,USW_CORE = 512,};
enum MACRO_USED {USED = 1,NEW_ENTRY = 2,NO_CHANGE = 3,};
enum MACRO_USER {USER_OBJ = 0,GROUP_OBJ = 1,OTHER_OBJ = 2,};
enum MACRO_USERFAULT {USERFAULT = 0x1,FLTARITH = 0x10,};
enum MACRO_USPosition {USPosition = 1,USSize = 2,PPosition = 4,PSize = 8,PMinSize = 16,PMaxSize = 32,PResizeInc = 64,PAspect = 128,PBaseSize = 256,PWinGravity = 512,};
enum MACRO_USRQUOTA {USRQUOTA = 0,GRPQUOTA = 1,};
enum MACRO_USW {USW_MIN = 0,USW_MAX = 8,};
enum MACRO_USW_OFF {USW_OFF = 0,USW_ON = 1,};
enum MACRO_USW_OSF1 {USW_OSF1 = 0,USW_SVID2 = 1,USW_SVID3 = 3,USW_SVR4 = 4,USW_SOE2 = 5,USW_MPSG = 6,};
enum MACRO_US_CANCEL {US_CANCEL = 0x1,US_NOCANCEL = 0x2,US_SYS_NOCANCEL = 0x4,US_ASYNC_NOCANCEL = 0x8,US_CANCEL_BITS = 0xE,US_CANCEL_MASK = 0xF,};
enum MACRO_UTMAXTYPE {UTMAXTYPE = 10,__UT_LINESIZE = 32,__UT_NAMESIZE = 64,__UT_HOSTSIZE = 256,};
enum MACRO_U_FE {U_FE_ARRAY_SIZE = 8,U_FE_OF_ALLOC_SIZE = 256,};
enum MACRO_UnmapGravity {UnmapGravity = 0,};
enum MACRO_Unsorted {Unsorted = 0,YSorted = 1,YXSorted = 2,YXBanded = 3,};
enum MACRO_VA {VA_NORM = 0,VA_ANOM = 1,VA_SEQL = 2,VA_FLUSH = 3,};
enum MACRO_VALUE {VALUE_THRESHOLD = 225,};
enum MACRO_VAR {VAR_ID_BANNER = 0,VAR_ID_VENDOR = 1,VAR_ID_PRODUCT = 2,VAR_ID_RELEASE = 3,VAR_ID_AVENDOR = 4,};
enum MACRO_VAR_VAXFP {VAR_VAXFP = 0x1,VAR_IEEEFP = 0x2,};
enum MACRO_VDATA {VDATA = 1,TDATA = 2,CDATA = 3,PDATA = 4,RDATA = 5,DDATA = 6,GDATA = 7,ADATA = 8,LDATA = 9,EDATA = 10,WDATA = 11,XDATA = 12,YDATA = 13,BDATA = 14,HDATA = 15,SDATA = 16,VMM_ADATA = 18,VMM_PDATA = 19,VMM_MDATA = 20,VMM_IDATA = 21,VMM_XDATA = 22,VMM_TDATA = 23,FDATA = 24,UDATA = 25,NDATA = 26,N_NDATA = 27,N_ADATA = 28,N_MDATA = 29,N_EDATA = 30,N_EPDATA = 31,N_VDATA = 32,N_XDATA = 33,N_XPDATA = 34,N_XMDATA = 35,N_XMPDATA = 36,N_IPT2 = 37,IDATA = 100,JDATA = 101,};
enum MACRO_VENDOR {VENDOR_DEFECTS = 0,KNOWN_DEFECTS = 1,NO_DEFECTS = 2,};
enum MACRO_VEOF {VEOF = 0,VEOL = 1,VEOL2 = 2,VERASE = 3,VWERASE = 4,VKILL = 5,VREPRINT = 6,VINTR = 8,VQUIT = 9,VSUSP = 10,VDSUSP = 11,VSTART = 12,VSTOP = 13,VLNEXT = 14,VDISCARD = 15,};
enum MACRO_VERSION {VERSION = 1,};
enum MACRO_VERSION_1 {VERSION_1 = 1,};
enum MACRO_VERSW {VERSW_ENABLE = 0,VERSW_DISABLE = 1,VERSW_TRANSITION = 2,};
enum MACRO_VEXEC {VEXEC = 0x40,MODEMASK = 0xFFF,};
enum MACRO_VFLUSH {VFLUSH = 15,VMIN = 16,VTIME = 17,VSTATUS = 18,NCCS = 20,};
enum MACRO_VGA {VGA_STATE_MAPPED = 0x1,VGA_STATE_DIRTY_CURSOR = 0x2,VGA_STATE_DIRTY_CMAP = 0x4,VGA_STATE_CURSOR_ON = 0x8,VGA_STATE_SCREEN_ON = 0x10,VGA_STATE_6BIT_DAC = 0x20,};
enum MACRO_VGA_BUS {VGA_BUS_NONE = 0x0,VGA_BUS_ISA = 0x1,VGA_BUS_EISA = 0x2,VGA_BUS_PCI = 0x4,};
enum MACRO_VIDBITS {VIDBITS = 14,};
enum MACRO_VIFF {VIFF_TUNNEL = 0x1,VIFF_SRCRT = 0x2,VIFF_TIMEOUT = 0x4,};
enum MACRO_VM {VM_INHERIT_SHARE = 0,VM_INHERIT_COPY = 1,VM_INHERIT_NONE = 2,VM_INHERIT_DONATE_COPY = 3,};
enum MACRO_VMAC {VMAC_ADD = 1,VMAC_DELETE = 2,};
enum MACRO_VM_BEHAVIOR {VM_BEHAVIOR_DEFAULT = 0,VM_BEHAVIOR_RANDOM = 1,VM_BEHAVIOR_FSEQNTL = 2,VM_BEHAVIOR_RSEQNTL = 3,};
enum MACRO_VM_INHERIT {VM_INHERIT_DEFAULT = 1,};
enum MACRO_VM_MAX {VM_MAX_KERNEL_ADDRESS = 0xFF800000,};
enum MACRO_VM_MIN {VM_MIN_ADDRESS = 0x10000,VM_MAX_ADDRESS = 0x400,};
enum MACRO_VM_PROT {VM_PROT_NONE = 0x0,VM_PROT_READ = 0x1,VM_PROT_WRITE = 0x2,VM_PROT_EXECUTE = 0x4,VM_PROT_TRY = 0x8,};
enum MACRO_VM_PROT_ALL {VM_PROT_ALL = 7,};
enum MACRO_VM_PROT_DEFAULT {VM_PROT_DEFAULT = 7,};
enum MACRO_VNODE {VNODE_AGE = 120,MAXLINK = 65533,};
enum MACRO_VOUTWAIT {VOUTWAIT = 0x1,};
enum MACRO_VPRINT {VPRINT = 0x40,VPLOT = 0x80,VPRINTPLOT = 0x100,};
enum MACRO_VREAD {VREAD = 0x100,};
enum MACRO_VROOT {VROOT = 0x1,VTEXT = 0x2,VXLOCK = 0x4,VXWANT = 0x8,VEXLOCK = 0x10,VSHLOCK = 0x20,VLWAIT = 0x40,VMOUNTPOINT = 0x100,VINACTIVATING = 0x200,VFLOCK = 0x400,VFWAIT = 0x800,VSYSTEM = 0x1000,VENF_LOCK = 0x2000,VLOCKS = 0x4000,VSWAP = 0x8000,VCOBJECT = 0x10000,VCWAIT = 0x20000,V_PRIVATE = 0x40000,V_CONVERTED = 0x80000,V_AUD_VALID = 0x100000,VIOERROR = 0x200000,V_DELAYED = 0x400000,V_AUD_SELECT = 0x800000,V_AUD_DESELECT = 0x1000000,VDIRECTIO = 0x2000000,VMMAPPED = 0x4000000,VREVOKED = 0x8000000,VMLD = 0x10000000,VXENIX = 0x20000000,VDUP = 0x40000000,VCOVERED = 0x80000000,};
enum MACRO_VS {VS_FIB_FINITE = 1,VS_FIB_INFINITE = 2,};
enum MACRO_VSE {VSE_BUTTON = 0,VSE_MMOTION = 1,VSE_TMOTION = 2,};
enum MACRO_VSE_KBTUP {VSE_KBTUP = 0,VSE_KBTDOWN = 1,};
enum MACRO_VSE_MOUSE {VSE_MOUSE = 1,VSE_DKB = 2,VSE_TABLET = 3,VSE_AUX = 4,VSE_CONSOLE = 5,};
enum MACRO_VSGID {VSGID = 0x400,};
enum MACRO_VSIO {VSIO_OFF = 0,VSIO_ON = 1,};
enum MACRO_VSUID {VSUID = 0x800,};
enum MACRO_VSVTX {VSVTX = 0x200,};
enum MACRO_VSYNC {VSYNC = 1,};
enum MACRO_VT0 {VT0 = 0x0,VT1 = 0x10000,};
enum MACRO_VTR {VTR_ENABLE = 1,VTR_VALUE = 2,VTR_UALARM = 3,VTR_STAMP = 4,};
enum MACRO_VTRACE {VTRACE = 115,VTR_DISABLE = 0,};
enum MACRO_VWRITE {VWRITE = 0x80,};
enum MACRO_VendorShellIndex {VendorShellIndex = 7,XmTransientShellIndex = 8,};
enum MACRO_VertexRelative {VertexRelative = 0x1,VertexDontDraw = 0x2,VertexCurved = 0x4,VertexStartClosed = 0x8,VertexEndClosed = 0x10,};
enum MACRO_VisibilityUnobscured {VisibilityUnobscured = 0,VisibilityPartiallyObscured = 1,VisibilityFullyObscured = 2,};
enum MACRO_VisualNoMask {VisualNoMask = 0x0,VisualIDMask = 0x1,VisualScreenMask = 0x2,VisualDepthMask = 0x4,VisualClassMask = 0x8,VisualRedMaskMask = 0x10,VisualGreenMaskMask = 0x20,VisualBlueMaskMask = 0x40,VisualColormapSizeMask = 0x80,VisualBitsPerRGBMask = 0x100,VisualAllMask = 0x1FF,};
enum MACRO_W {W_ACC = 0x2,};
enum MACRO_WA {WA_STANDOUT = 65536,WA_UNDERLINE = 131072,WA_REVERSE = 262144,WA_BLINK = 524288,WA_DIM = 1048576,WA_BOLD = 2097152,WA_ALTCHARSET = 16777216,};
enum MACRO_WALLPROC {WALLPROC_WALL = 2,};
enum MACRO_WALLPROG {WALLPROG = 100008,};
enum MACRO_WALLVERS {WALLVERS_ORIG = 1,};
enum MACRO_WALLVERS_0 {WALLVERS = 1,};
enum MACRO_WARNING {WARNING = 0x1000,};
enum MACRO_WA_ATTRIBUTES {WA_ATTRIBUTES = 0xFFFF003F,};
enum MACRO_WA_INVIS {WA_INVIS = 4194304,WA_PROTECT = 8388608,};
enum MACRO_WA_NORMAL {WA_NORMAL = 0,WA_HORIZONTAL = 1,WA_LEFT = 2,WA_LOW = 4,WA_RIGHT = 8,WA_TOP = 16,WA_VERTICAL = 32,};
enum MACRO_WCHAR {WCHAR_MAX = -1,WCHAR_MIN = 0,};
enum MACRO_WCONTINUED {WCONTINUED = 0x4,WNOWAIT = 0x8,WTRAPPED = 0x10,WEXITED = 0x20,};
enum MACRO_WCOREFLAG {WCOREFLAG = 0x80,};
enum MACRO_WEOF {WEOF = -1,};
enum MACRO_WLOGINDEV {WLOGINDEV = 0x8000,};
enum MACRO_WMESGLEN {WMESGLEN = 7,};
enum MACRO_WMShellIndex {WMShellIndex = 6,XmVendorShellIndex = 7,};
enum MACRO_WNOHANG {WNOHANG = 0x1,WUNTRACED = 0x2,_WSTOPPED = 0x7F,};
enum MACRO_WOBJ {WOBJ_SCNNO_DONE = -2,};
enum MACRO_WORD {WORD_BIT = 32,};
enum MACRO_WRDE {WRDE_APPEND = 0x1,WRDE_DOOFFS = 0x2,WRDE_NOCMD = 0x4,WRDE_REUSE = 0x8,WRDE_SHOWERR = 0x10,WRDE_UNDEF = 0x20,};
enum MACRO_WRDE_BADCHAR {WRDE_BADCHAR = 1,WRDE_BADVAL = 2,WRDE_CMDSUB = 3,WRDE_NOSPACE = 4,WRDE_SYNTAX = 5,WRDE_EPOPEN = 6,WRDE_ESHELL = 7,WRDE_NOSYS = 8,};
enum MACRO_WS {WS_DvAccelNum = 1,WS_DvAccelDenom = 2,WS_DvThreshold = 4,};
enum MACRO_WSKBKeyClickPercent {WSKBKeyClickPercent = 1,WSKBBellPercent = 2,WSKBBellPitch = 4,WSKBBellDuration = 8,WSKBLed = 16,WSKBLedMode = 32,WSKBAutoRepeatMode = 128,WSKBAutoRepeats = 256,};
enum MACRO_WSKBLed {WSKBLed_Wait = 1,WSKBLed_Compose = 2,WSKBLed_CapsLock = 4,WSKBLed_ScrollLock = 8,WSKBLed_NumLock = 16,};
enum MACRO_WSPR {WSPR_RIGHT_BUTTON = 0x1,WSPR_MIDDLE_BUTTON = 0x2,WSPR_LEFT_BUTTON = 0x4,WSPR_Y_SIGN = 0x10,WSPR_X_SIGN = 0x20,};
enum MACRO_WSTOPPED {WSTOPPED = 2,_W_CONTINUED = 255,};
enum MACRO_WS_AddToList {WS_AddToList = 0,WS_DeleteFromList = 1,};
enum MACRO_WS_ButtonClass {WS_ButtonClass = 1,WS_ValuatorClass = 2,WS_FeedbackClass = 3,WS_ProximityClass = 4,WS_FocusClass = 5,WS_OtherClass = 6,};
enum MACRO_WS_DvInteger {WS_DvInteger = 1,WS_KeyClass = 0,};
enum MACRO_WS_DvKeyClickPercent {WS_DvKeyClickPercent = 1,WS_DvKey = 2,WS_DvAutoRepeatMode = 4,};
enum MACRO_WS_DvLed {WS_DvLed = 1,WS_DvLedMode = 2,};
enum MACRO_WS_DvString {WS_DvString = 1,};
enum MACRO_WS_KbdFeedbackClass {WS_KbdFeedbackClass = 0,WS_PtrFeedbackClass = 1,WS_StringFeedbackClass = 2,WS_IntegerFeedbackClass = 3,WS_LedFeedbackClass = 4,WS_BellFeedbackClass = 5,};
enum MACRO_WS_NOTIFY {WS_NOTIFY_KBD_HOT_SWAP = 0,WS_NOTIFY_MOUSE_HOT_SWAP = 1,NUMINPUTDEVICES = 4,};
enum MACRO_WS_Relative {WS_Relative = 0,WS_Absolute = 1,};
enum MACRO_WTMP {WTMP_FILE_OPEN_FAILED = -1,};
enum MACRO_WTMP_PSR {WTMP_PSR_TIME_RETURNED = 1,WTMP_BOOT_TIME_RETURNED = 2,WTMP_FILE_CORRUPT = 3,};
enum MACRO_W_IO {W_IO = 0,W_SWAP = 1,W_PIO = 2,};
enum MACRO_WindowObjIndex {WindowObjIndex = 2,};
enum MACRO_WithdrawnState {WithdrawnState = 0,NormalState = 1,IconicState = 3,};
enum MACRO_WmNormalState {WmNormalState = 0,WmIconicState = 1,};
enum MACRO_X {X_ACC = 0x1,};
enum MACRO_X2 {X_TCP_PORT = 6000,};
enum MACRO_XA {XA_PRIMARY = 1,XA_SECONDARY = 2,XA_ARC = 3,XA_ATOM = 4,XA_BITMAP = 5,XA_CARDINAL = 6,XA_COLORMAP = 7,XA_CURSOR = 8,XA_CUT_BUFFER0 = 9,XA_CUT_BUFFER1 = 10,XA_CUT_BUFFER2 = 11,XA_CUT_BUFFER3 = 12,XA_CUT_BUFFER4 = 13,XA_CUT_BUFFER5 = 14,XA_CUT_BUFFER6 = 15,XA_CUT_BUFFER7 = 16,XA_DRAWABLE = 17,XA_FONT = 18,XA_INTEGER = 19,XA_PIXMAP = 20,XA_POINT = 21,XA_RECTANGLE = 22,XA_RESOURCE_MANAGER = 23,XA_RGB_COLOR_MAP = 24,XA_RGB_BEST_MAP = 25,XA_RGB_BLUE_MAP = 26,XA_RGB_DEFAULT_MAP = 27,XA_RGB_GRAY_MAP = 28,XA_RGB_GREEN_MAP = 29,XA_RGB_RED_MAP = 30,XA_STRING = 31,XA_VISUALID = 32,XA_WINDOW = 33,XA_WM_COMMAND = 34,XA_WM_HINTS = 35,XA_WM_CLIENT_MACHINE = 36,XA_WM_ICON_NAME = 37,XA_WM_ICON_SIZE = 38,XA_WM_NAME = 39,XA_WM_NORMAL_HINTS = 40,XA_WM_SIZE_HINTS = 41,XA_WM_ZOOM_HINTS = 42,XA_MIN_SPACE = 43,XA_NORM_SPACE = 44,XA_MAX_SPACE = 45,XA_END_SPACE = 46,XA_SUPERSCRIPT_X = 47,XA_SUPERSCRIPT_Y = 48,XA_SUBSCRIPT_X = 49,XA_SUBSCRIPT_Y = 50,XA_UNDERLINE_POSITION = 51,XA_UNDERLINE_THICKNESS = 52,XA_STRIKEOUT_ASCENT = 53,XA_STRIKEOUT_DESCENT = 54,XA_ITALIC_ANGLE = 55,XA_X_HEIGHT = 56,XA_QUAD_WIDTH = 57,XA_WEIGHT = 58,XA_POINT_SIZE = 59,XA_RESOLUTION = 60,XA_COPYRIGHT = 61,XA_NOTICE = 62,XA_FONT_NAME = 63,XA_FAMILY_NAME = 64,XA_FULL_NAME = 65,XA_CAP_HEIGHT = 66,XA_WM_CLASS = 67,XA_WM_TRANSIENT_FOR = 68,};
enum MACRO_XAG {XAG_MAJOR_VERSION = 1,XAG_MINOR_VERSION = 0,};
enum MACRO_XALLOCA {XALLOCA_H = 1,};
enum MACRO_XATOM {XATOM_H = 1,};
enum MACRO_XAW {XAW_LIST_NONE = -1,};
enum MACRO_XA_LAST {XA_LAST_PREDEFINED = 68,};
enum MACRO_XBufferOverflow {XBufferOverflow = -1,};
enum MACRO_XC {XC_num_glyphs = 154,XC_X_cursor = 0,};
enum MACRO_XCASE {XCASE = 0x4000,};
enum MACRO_XCSUCCESS {XCSUCCESS = 0,XCNOMEM = 1,XCNOENT = 2,};
enum MACRO_XC_arrow {XC_arrow = 2,XC_based_arrow_down = 4,XC_based_arrow_up = 6,XC_boat = 8,XC_bogosity = 10,XC_bottom_left_corner = 12,XC_bottom_right_corner = 14,XC_bottom_side = 16,XC_bottom_tee = 18,XC_box_spiral = 20,XC_center_ptr = 22,XC_circle = 24,XC_clock = 26,XC_coffee_mug = 28,XC_cross = 30,XC_cross_reverse = 32,XC_crosshair = 34,XC_diamond_cross = 36,XC_dot = 38,XC_dotbox = 40,XC_double_arrow = 42,XC_draft_large = 44,XC_draft_small = 46,XC_draped_box = 48,XC_exchange = 50,XC_fleur = 52,XC_gobbler = 54,XC_gumby = 56,XC_hand1 = 58,XC_hand2 = 60,XC_heart = 62,XC_icon = 64,XC_iron_cross = 66,XC_left_ptr = 68,XC_left_side = 70,XC_left_tee = 72,XC_leftbutton = 74,XC_ll_angle = 76,XC_lr_angle = 78,XC_man = 80,XC_middlebutton = 82,XC_mouse = 84,XC_pencil = 86,XC_pirate = 88,XC_plus = 90,XC_question_arrow = 92,XC_right_ptr = 94,XC_right_side = 96,XC_right_tee = 98,XC_rightbutton = 100,XC_rtl_logo = 102,XC_sailboat = 104,XC_sb_down_arrow = 106,XC_sb_h_double_arrow = 108,XC_sb_left_arrow = 110,XC_sb_right_arrow = 112,XC_sb_up_arrow = 114,XC_sb_v_double_arrow = 116,XC_shuttle = 118,XC_sizing = 120,XC_spider = 122,XC_spraycan = 124,XC_star = 126,XC_target = 128,XC_tcross = 130,XC_top_left_arrow = 132,XC_top_left_corner = 134,XC_top_right_corner = 136,XC_top_side = 138,XC_top_tee = 140,XC_trek = 142,XC_ul_angle = 144,XC_umbrella = 146,XC_ur_angle = 148,XC_watch = 150,XC_xterm = 152,DXK_ring_accent = 268500656,};
enum MACRO_XConverterNotFound {XConverterNotFound = -3,};
enum MACRO_XDM {XDM_PROTOCOL_VERSION = 1,XDM_UDP_PORT = 177,XDM_MAX_MSGLEN = 8192,};
enum MACRO_XDM_KA {XDM_KA_RTX_LIMIT = 4,XDM_DEF_DORMANCY = 180,XDM_MAX_DORMANCY = 86400,};
enum MACRO_XDM_MIN {XDM_MIN_RTX = 2,XDM_MAX_RTX = 32,};
enum MACRO_XDM_RTX {XDM_RTX_LIMIT = 7,};
enum MACRO_XEKeyIsClear {XEKeyIsClear = 0,XEKeyIsEcho = 1,XEKeyIsOther = 2,};
enum MACRO_XER {XER_NBBY = 8,BYTE_MASK = 255,};
enum MACRO_XETCDeltaTimes {XETCDeltaTimes = 7,XETCTrapActive = 8,};
enum MACRO_XETrap {XETrap_Reset = 0,XETrap_GetAvailable = 1,XETrap_Config = 2,XETrap_StartTrap = 3,XETrap_StopTrap = 4,XETrap_GetCurrent = 5,XETrap_GetStatistics = 6,XETrap_SimulateXEvent = 7,XETrap_GetVersion = 8,XETrap_GetLastInpTime = 9,};
enum MACRO_XETrapCoreEvents {XETrapCoreEvents = 7,};
enum MACRO_XETrapData {XETrapData = 0,XETrapNumberEvents = 1,sz_EventData = 24,};
enum MACRO_XETrapDataStart {XETrapDataStart = 0,XETrapDataContinued = 1,XETrapDataLast = 2,};
enum MACRO_XETrapMaxEvent {XETrapMaxEvent = 4,};
enum MACRO_XETrapMaxRequest {XETrapMaxRequest = 32,};
enum MACRO_XETrapRelease {XETrapRelease = 3,XETrapVersion = 4,};
enum MACRO_XETrapRevision {XETrapRevision = 0,XETrapProtocol = 32,};
enum MACRO_XETrapTimestamp {XETrapTimestamp = 0,XETrapCmd = 1,XETrapCmdKeyMod = 2,XETrapRequest = 3,XETrapEvent = 4,XETrapMaxPacket = 5,XETrapTransOut = 6,XETrapStatistics = 7,XETrapWinXY = 8,XETrapTransIn = 9,XETrapCursor = 10,XETrapXInput = 11,XETrapVectorEvents = 12,XETrapColorReplies = 13,XETrapGrabServer = 14,};
enum MACRO_XETrapTrapActive {XETrapTrapActive = 0,};
enum MACRO_XFD {XFD_SETSIZE = 256,};
enum MACRO_XI {XI_Absent = 0,XI_Present = 1,};
enum MACRO_XIMHotKeyStateON {XIMHotKeyStateON = 0x1,XIMHotKeyStateOFF = 0x2,};
enum MACRO_XIMInitialState {XIMInitialState = 1,XIMPreserveState = 2,};
enum MACRO_XIMPreeditArea {XIMPreeditArea = 0x1,XIMPreeditCallbacks = 0x2,XIMPreeditPosition = 0x4,XIMPreeditNothing = 0x8,XIMPreeditNone = 0x10,XIMStatusArea = 0x100,XIMStatusCallbacks = 0x200,XIMStatusNothing = 0x400,XIMStatusNone = 0x800,};
enum MACRO_XIMPreeditUnKnown {XIMPreeditUnKnown = 0,XIMPreeditEnable = 1,XIMPreeditDisable = 2,};
enum MACRO_XIMReverse {XIMReverse = 1,XIMUnderline = 2,XIMHighlight = 4,XIMPrimary = 32,XIMSecondary = 64,XIMTertiary = 128,XIMVisibleToForward = 256,XIMVisibleToBackword = 512,XIMVisibleToCenter = 1024,};
enum MACRO_XIMStringConversionBuffer {XIMStringConversionBuffer = 0x1,XIMStringConversionLine = 0x2,XIMStringConversionWord = 0x3,XIMStringConversionChar = 0x4,};
enum MACRO_XIMStringConversionLeftEdge {XIMStringConversionLeftEdge = 0x1,XIMStringConversionRightEdge = 0x2,XIMStringConversionTopEdge = 0x4,XIMStringConversionBottomEdge = 0x8,XIMStringConversionConcealed = 0x10,XIMStringConversionWrapped = 0x20,};
enum MACRO_XIMStringConversionSubstitution {XIMStringConversionSubstitution = 0x1,XIMStringConversionRetrival = 0x2,};
enum MACRO_XI_Add {XI_Add_XDeviceBell_Major = 1,};
enum MACRO_XI_Add_XChangeDeviceControl {XI_Add_XChangeDeviceControl_Major = 1,XI_Add_XChangeDeviceControl_Minor = 3,};
enum MACRO_XI_Add_XDeviceBell {XI_Add_XDeviceBell_Minor = 1,};
enum MACRO_XI_Add_XSetDeviceValuators {XI_Add_XSetDeviceValuators_Major = 1,XI_Add_XSetDeviceValuators_Minor = 2,};
enum MACRO_XI_BadDevice {XI_BadDevice = 0,XI_BadEvent = 1,XI_BadMode = 2,XI_DeviceBusy = 3,XI_BadClass = 4,};
enum MACRO_XI_DeviceValuator {XI_DeviceValuator = 0,XI_DeviceKeyPress = 1,XI_DeviceKeyRelease = 2,XI_DeviceButtonPress = 3,XI_DeviceButtonRelease = 4,XI_DeviceMotionNotify = 5,XI_DeviceFocusIn = 6,XI_DeviceFocusOut = 7,XI_ProximityIn = 8,XI_ProximityOut = 9,XI_DeviceStateNotify = 10,XI_DeviceMappingNotify = 11,XI_ChangeDeviceNotify = 12,XI_DeviceKeystateNotify = 13,XI_DeviceButtonstateNotify = 14,};
enum MACRO_XI_Initial {XI_Initial_Release_Major = 1,XI_Initial_Release_Minor = 0,};
enum MACRO_XK {XK_F1 = 0xFFBE,XK_F2 = 0xFFBF,XK_F3 = 0xFFC0,XK_F4 = 0xFFC1,XK_F5 = 0xFFC2,XK_F6 = 0xFFC3,XK_F7 = 0xFFC4,XK_F8 = 0xFFC5,XK_F9 = 0xFFC6,XK_F10 = 0xFFC7,XK_F11 = 0xFFC8,};
enum MACRO_XK2 {XK_VoidSymbol = 0xFFFFFF,XK_Sys_Req = 0xFF15,XK_Codeinput = 0xFF37,XK_SingleCandidate = 0xFF3C,XK_MultipleCandidate = 0xFF3D,XK_PreviousCandidate = 0xFF3E,XK_Kanji_Bangou = 0xFF37,XK_Zen_Koho = 0xFF3D,XK_Mae_Koho = 0xFF3E,XK_Page_Up = 0xFF55,XK_Page_Down = 0xFF56,XK_Begin = 0xFF58,XK_Execute = 0xFF62,XK_Undo = 0xFF65,XK_Redo = 0xFF66,XK_Cancel = 0xFF69,XK_Break = 0xFF6B,XK_Mode_switch = 0xFF7E,XK_script_switch = 0xFF7E,};
enum MACRO_XKB {XKB_XLIB_MAP_MASK = 7,};
enum MACRO_XKB_FORCE {XKB_FORCE_INT_KEYSYM = 1,};
enum MACRO_XKM {XKM_H = 1,XkmFileVersion = 15,XkmIllegalFile = -1,};
enum MACRO_XK_AccessX {XK_AccessX_Enable = 0xFE70,XK_AccessX_Feedback_Enable = 0xFE71,XK_RepeatKeys_Enable = 0xFE72,XK_SlowKeys_Enable = 0xFE73,XK_BounceKeys_Enable = 0xFE74,XK_StickyKeys_Enable = 0xFE75,XK_MouseKeys_Enable = 0xFE76,XK_MouseKeys_Accel_Enable = 0xFE77,XK_Overlay1_Enable = 0xFE78,XK_Overlay2_Enable = 0xFE79,XK_AudibleBell_Enable = 0xFE7A,XK_Pointer_Left = 0xFEE0,XK_Pointer_Right = 0xFEE1,XK_Pointer_Up = 0xFEE2,XK_Pointer_Down = 0xFEE3,XK_Pointer_UpLeft = 0xFEE4,XK_Pointer_UpRight = 0xFEE5,XK_Pointer_DownLeft = 0xFEE6,XK_Pointer_DownRight = 0xFEE7,XK_Pointer_Button_Dflt = 0xFEE8,XK_Pointer_Button1 = 0xFEE9,XK_Pointer_Button2 = 0xFEEA,XK_Pointer_Button3 = 0xFEEB,XK_Pointer_Button4 = 0xFEEC,XK_Pointer_Button5 = 0xFEED,XK_Pointer_DblClick_Dflt = 0xFEEE,XK_Pointer_DblClick1 = 0xFEEF,XK_Pointer_DblClick2 = 0xFEF0,XK_Pointer_DblClick3 = 0xFEF1,XK_Pointer_DblClick4 = 0xFEF2,XK_Pointer_DblClick5 = 0xFEF3,XK_Pointer_Drag_Dflt = 0xFEF4,XK_Pointer_Drag1 = 0xFEF5,XK_Pointer_Drag2 = 0xFEF6,XK_Pointer_Drag3 = 0xFEF7,XK_Pointer_Drag4 = 0xFEF8,XK_Pointer_Drag5 = 0xFEFD,};
enum MACRO_XK_Aogonek {XK_Aogonek = 0x1A1,XK_breve = 0x1A2,XK_Lstroke = 0x1A3,XK_Lcaron = 0x1A5,XK_Sacute = 0x1A6,XK_Scaron = 0x1A9,XK_Scedilla = 0x1AA,XK_Tcaron = 0x1AB,XK_Zacute = 0x1AC,XK_Zcaron = 0x1AE,XK_Zabovedot = 0x1AF,XK_aogonek = 0x1B1,XK_ogonek = 0x1B2,XK_lstroke = 0x1B3,XK_lcaron = 0x1B5,XK_sacute = 0x1B6,XK_caron = 0x1B7,XK_scaron = 0x1B9,XK_scedilla = 0x1BA,XK_tcaron = 0x1BB,XK_zacute = 0x1BC,XK_doubleacute = 0x1BD,XK_zcaron = 0x1BE,XK_zabovedot = 0x1BF,XK_Racute = 0x1C0,XK_Abreve = 0x1C3,XK_Lacute = 0x1C5,XK_Cacute = 0x1C6,XK_Ccaron = 0x1C8,XK_Eogonek = 0x1CA,XK_Ecaron = 0x1CC,XK_Dcaron = 0x1CF,XK_Dstroke = 0x1D0,XK_Nacute = 0x1D1,XK_Ncaron = 0x1D2,XK_Odoubleacute = 0x1D5,XK_Rcaron = 0x1D8,XK_Uring = 0x1D9,XK_Udoubleacute = 0x1DB,XK_Tcedilla = 0x1DE,XK_racute = 0x1E0,XK_abreve = 0x1E3,XK_lacute = 0x1E5,XK_cacute = 0x1E6,XK_ccaron = 0x1E8,XK_eogonek = 0x1EA,XK_ecaron = 0x1EC,XK_dcaron = 0x1EF,XK_dstroke = 0x1F0,XK_nacute = 0x1F1,XK_ncaron = 0x1F2,XK_odoubleacute = 0x1F5,XK_udoubleacute = 0x1FB,};
enum MACRO_XK_EcuSign {XK_EcuSign = 0x20A0,XK_ColonSign = 0x20A1,XK_CruzeiroSign = 0x20A2,XK_FFrancSign = 0x20A3,XK_LiraSign = 0x20A4,XK_MillSign = 0x20A5,XK_NairaSign = 0x20A6,XK_PesetaSign = 0x20A7,XK_RupeeSign = 0x20A8,XK_WonSign = 0x20A9,XK_NewSheqelSign = 0x20AA,XK_DongSign = 0x20AB,XK_EuroSign = 0x20AC,};
enum MACRO_XK_Eth {XK_Eth = 0xD0,XK_Ntilde = 0xD1,XK_Ograve = 0xD2,XK_Oacute = 0xD3,XK_Ocircumflex = 0xD4,XK_Otilde = 0xD5,XK_Odiaeresis = 0xD6,XK_multiply = 0xD7,XK_Ooblique = 0xD8,XK_Ugrave = 0xD9,XK_Uacute = 0xDA,XK_Ucircumflex = 0xDB,XK_Udiaeresis = 0xDC,XK_Yacute = 0xDD,XK_THORN = 0xDE,};
enum MACRO_XK_F33 {XK_F33 = 0xFFDE,XK_F34 = 0xFFDF,};
enum MACRO_XK_Greek {XK_Greek_ALPHAaccent = 0x7A1,XK_Greek_EPSILONaccent = 0x7A2,XK_Greek_ETAaccent = 0x7A3,XK_Greek_IOTAaccent = 0x7A4,XK_Greek_IOTAdiaeresis = 0x7A5,XK_Greek_OMICRONaccent = 0x7A7,XK_Greek_UPSILONaccent = 0x7A8,XK_Greek_UPSILONdieresis = 0x7A9,XK_Greek_OMEGAaccent = 0x7AB,XK_Greek_accentdieresis = 0x7AE,XK_Greek_horizbar = 0x7AF,XK_Greek_alphaaccent = 0x7B1,XK_Greek_epsilonaccent = 0x7B2,XK_Greek_etaaccent = 0x7B3,XK_Greek_iotaaccent = 0x7B4,XK_Greek_iotadieresis = 0x7B5,XK_Greek_iotaaccentdieresis = 0x7B6,XK_Greek_omicronaccent = 0x7B7,XK_Greek_upsilonaccent = 0x7B8,XK_Greek_upsilondieresis = 0x7B9,XK_Greek_upsilonaccentdieresis = 0x7BA,XK_Greek_omegaaccent = 0x7BB,XK_Greek_ALPHA = 0x7C1,XK_Greek_BETA = 0x7C2,XK_Greek_GAMMA = 0x7C3,XK_Greek_DELTA = 0x7C4,XK_Greek_EPSILON = 0x7C5,XK_Greek_ZETA = 0x7C6,XK_Greek_ETA = 0x7C7,XK_Greek_THETA = 0x7C8,XK_Greek_IOTA = 0x7C9,XK_Greek_KAPPA = 0x7CA,XK_Greek_LAMDA = 0x7CB,};
enum MACRO_XK_Greek_LAMBDA {XK_Greek_LAMBDA = 0x7CB,XK_Greek_MU = 0x7CC,XK_Greek_NU = 0x7CD,XK_Greek_XI = 0x7CE,XK_Greek_OMICRON = 0x7CF,XK_Greek_PI = 0x7D0,XK_Greek_RHO = 0x7D1,XK_Greek_SIGMA = 0x7D2,XK_Greek_TAU = 0x7D4,XK_Greek_UPSILON = 0x7D5,XK_Greek_PHI = 0x7D6,XK_Greek_CHI = 0x7D7,XK_Greek_PSI = 0x7D8,XK_Greek_OMEGA = 0x7D9,XK_Greek_alpha = 0x7E1,XK_Greek_beta = 0x7E2,XK_Greek_gamma = 0x7E3,XK_Greek_delta = 0x7E4,XK_Greek_epsilon = 0x7E5,XK_Greek_zeta = 0x7E6,XK_Greek_eta = 0x7E7,XK_Greek_theta = 0x7E8,XK_Greek_iota = 0x7E9,XK_Greek_kappa = 0x7EA,XK_Greek_lamda = 0x7EB,};
enum MACRO_XK_Greek_lambda {XK_Greek_lambda = 0x7EB,XK_Greek_mu = 0x7EC,XK_Greek_nu = 0x7ED,XK_Greek_xi = 0x7EE,XK_Greek_omicron = 0x7EF,XK_Greek_pi = 0x7F0,XK_Greek_rho = 0x7F1,XK_Greek_sigma = 0x7F2,XK_Greek_finalsmallsigma = 0x7F3,XK_Greek_tau = 0x7F4,XK_Greek_upsilon = 0x7F5,XK_Greek_phi = 0x7F6,XK_Greek_chi = 0x7F7,XK_Greek_psi = 0x7F8,XK_Greek_omega = 0x7F9,XK_Greek_switch = 0xFF7E,};
enum MACRO_XK_Help {XK_Help = 0xFF6A,};
enum MACRO_XK_Henkan {XK_Henkan = 0xFF23,XK_Romaji = 0xFF24,XK_Hiragana = 0xFF25,XK_Katakana = 0xFF26,XK_Hiragana_Katakana = 0xFF27,XK_Zenkaku = 0xFF28,XK_Hankaku = 0xFF29,XK_Zenkaku_Hankaku = 0xFF2A,XK_Touroku = 0xFF2B,XK_Massyo = 0xFF2C,XK_Kana_Lock = 0xFF2D,XK_Kana_Shift = 0xFF2E,XK_Eisu_Shift = 0xFF2F,XK_Eisu_toggle = 0xFF30,};
enum MACRO_XK_Home {XK_Home = 0xFF50,XK_End = 0xFF57,XK_Num_Lock = 0xFF7F,XK_KP_Space = 0xFF80,XK_KP_Tab = 0xFF89,XK_KP_Enter = 0xFF8D,XK_KP_F1 = 0xFF91,XK_KP_F2 = 0xFF92,XK_KP_F3 = 0xFF93,XK_KP_F4 = 0xFF94,XK_KP_Equal = 0xFFBD,};
enum MACRO_XK_ISO {XK_ISO_Lock = 0xFE01,XK_ISO_Level2_Latch = 0xFE02,XK_ISO_Level3_Shift = 0xFE03,XK_ISO_Level3_Latch = 0xFE04,XK_ISO_Level3_Lock = 0xFE05,XK_ISO_Group_Shift = 0xFF7E,XK_ISO_Group_Latch = 0xFE06,XK_ISO_Group_Lock = 0xFE07,XK_ISO_Next_Group = 0xFE08,XK_ISO_Next_Group_Lock = 0xFE09,XK_ISO_Prev_Group = 0xFE0A,XK_ISO_Prev_Group_Lock = 0xFE0B,XK_ISO_First_Group = 0xFE0C,XK_ISO_First_Group_Lock = 0xFE0D,XK_ISO_Last_Group = 0xFE0E,XK_ISO_Last_Group_Lock = 0xFE0F,XK_ISO_Left_Tab = 0xFE20,XK_ISO_Move_Line_Up = 0xFE21,XK_ISO_Move_Line_Down = 0xFE22,XK_ISO_Partial_Line_Up = 0xFE23,XK_ISO_Partial_Line_Down = 0xFE24,XK_ISO_Partial_Space_Left = 0xFE25,XK_ISO_Partial_Space_Right = 0xFE26,XK_ISO_Set_Margin_Left = 0xFE27,XK_ISO_Set_Margin_Right = 0xFE28,XK_ISO_Release_Margin_Left = 0xFE29,XK_ISO_Release_Margin_Right = 0xFE2A,XK_ISO_Release_Both_Margins = 0xFE2B,XK_ISO_Fast_Cursor_Left = 0xFE2C,XK_ISO_Fast_Cursor_Right = 0xFE2D,XK_ISO_Fast_Cursor_Up = 0xFE2E,XK_ISO_Fast_Cursor_Down = 0xFE2F,XK_ISO_Continuous_Underline = 0xFE30,XK_ISO_Discontinuous_Underline = 0xFE31,XK_ISO_Emphasize = 0xFE32,XK_ISO_Center_Object = 0xFE33,XK_ISO_Enter = 0xFE34,XK_dead_grave = 0xFE50,XK_dead_acute = 0xFE51,XK_dead_circumflex = 0xFE52,XK_dead_tilde = 0xFE53,XK_dead_macron = 0xFE54,XK_dead_breve = 0xFE55,XK_dead_abovedot = 0xFE56,XK_dead_diaeresis = 0xFE57,XK_dead_abovering = 0xFE58,XK_dead_doubleacute = 0xFE59,XK_dead_caron = 0xFE5A,XK_dead_cedilla = 0xFE5B,XK_dead_ogonek = 0xFE5C,XK_dead_iota = 0xFE5D,XK_dead_voiced_sound = 0xFE5E,XK_dead_semivoiced_sound = 0xFE5F,XK_dead_belowdot = 0xFE60,XK_First_Virtual_Screen = 0xFED0,XK_Prev_Virtual_Screen = 0xFED1,XK_Next_Virtual_Screen = 0xFED2,XK_Last_Virtual_Screen = 0xFED4,XK_Terminate_Server = 0xFED5,};
enum MACRO_XK_Insert {XK_Insert = 0xFF63,DXK_Remove = 0x1000FF00,};
enum MACRO_XK_KP {XK_KP_Multiply = 0xFFAA,XK_KP_Add = 0xFFAB,XK_KP_Separator = 0xFFAC,XK_KP_Subtract = 0xFFAD,XK_KP_Decimal = 0xFFAE,XK_KP_Divide = 0xFFAF,XK_KP_0 = 0xFFB0,XK_KP_1 = 0xFFB1,XK_KP_2 = 0xFFB2,XK_KP_3 = 0xFFB3,XK_KP_4 = 0xFFB4,XK_KP_5 = 0xFFB5,XK_KP_6 = 0xFFB6,XK_KP_7 = 0xFFB7,XK_KP_8 = 0xFFB8,XK_KP_9 = 0xFFB9,};
enum MACRO_XK_KP2 {XK_KP_Home = 0xFF95,XK_KP_Left = 0xFF96,XK_KP_Up = 0xFF97,XK_KP_Right = 0xFF98,XK_KP_Down = 0xFF99,XK_KP_Prior = 0xFF9A,XK_KP_Page_Up = 0xFF9A,XK_KP_Next = 0xFF9B,XK_KP_Page_Down = 0xFF9B,XK_KP_End = 0xFF9C,XK_KP_Begin = 0xFF9D,XK_KP_Insert = 0xFF9E,XK_KP_Delete = 0xFF9F,};
enum MACRO_XK_L1 {XK_L1 = 0xFFC8,XK_F12 = 0xFFC9,};
enum MACRO_XK_L10 {XK_L10 = 0xFFD1,XK_F21 = 0xFFD2,};
enum MACRO_XK_L2 {XK_L2 = 0xFFC9,XK_F13 = 0xFFCA,};
enum MACRO_XK_L3 {XK_L3 = 0xFFCA,XK_F14 = 0xFFCB,};
enum MACRO_XK_L4 {XK_L4 = 0xFFCB,XK_F15 = 0xFFCC,};
enum MACRO_XK_L5 {XK_L5 = 0xFFCC,XK_F16 = 0xFFCD,};
enum MACRO_XK_L6 {XK_L6 = 0xFFCD,XK_F17 = 0xFFCE,};
enum MACRO_XK_L7 {XK_L7 = 0xFFCE,XK_F18 = 0xFFCF,};
enum MACRO_XK_L8 {XK_L8 = 0xFFCF,XK_F19 = 0xFFD0,};
enum MACRO_XK_L9 {XK_L9 = 0xFFD0,XK_F20 = 0xFFD1,};
enum MACRO_XK_Left {XK_Left = 0xFF51,XK_Up = 0xFF52,XK_Right = 0xFF53,XK_Down = 0xFF54,XK_Shift_L = 0xFFE1,XK_Shift_R = 0xFFE2,XK_Control_L = 0xFFE3,XK_Control_R = 0xFFE4,XK_Caps_Lock = 0xFFE5,XK_Shift_Lock = 0xFFE6,XK_Meta_L = 0xFFE7,XK_Meta_R = 0xFFE8,XK_Alt_L = 0xFFE9,XK_Alt_R = 0xFFEA,XK_Super_L = 0xFFEB,XK_Super_R = 0xFFEC,XK_Hyper_L = 0xFFED,XK_Hyper_R = 0xFFEE,};
enum MACRO_XK_Menu {XK_Menu = 0xFF67,XK_Find = 0xFF68,};
enum MACRO_XK_Multi {XK_Multi_key = 0xFF20,XK_Kanji = 0xFF21,XK_Muhenkan = 0xFF22,XK_Henkan_Mode = 0xFF23,};
enum MACRO_XK_Pointer {XK_Pointer_EnableKeys = 0xFEF9,XK_Pointer_Accelerate = 0xFEFA,XK_Pointer_DfltBtnNext = 0xFEFB,XK_Pointer_DfltBtnPrev = 0xFEFC,};
enum MACRO_XK_Prior {XK_Prior = 0xFF55,XK_Next = 0xFF56,XK_Print = 0xFF61,};
enum MACRO_XK_R1 {XK_R1 = 0xFFD2,XK_F22 = 0xFFD3,};
enum MACRO_XK_R10 {XK_R10 = 0xFFDB,XK_F31 = 0xFFDC,};
enum MACRO_XK_R11 {XK_R11 = 0xFFDC,XK_F32 = 0xFFDD,};
enum MACRO_XK_R12 {XK_R12 = 0xFFDD,XK_R13 = 0xFFDE,};
enum MACRO_XK_R14 {XK_R14 = 0xFFDF,XK_F35 = 0xFFE0,};
enum MACRO_XK_R15 {XK_R15 = 0xFFE0,};
enum MACRO_XK_R2 {XK_R2 = 0xFFD3,XK_F23 = 0xFFD4,};
enum MACRO_XK_R3 {XK_R3 = 0xFFD4,XK_F24 = 0xFFD5,};
enum MACRO_XK_R4 {XK_R4 = 0xFFD5,XK_F25 = 0xFFD6,};
enum MACRO_XK_R5 {XK_R5 = 0xFFD6,XK_F26 = 0xFFD7,};
enum MACRO_XK_R6 {XK_R6 = 0xFFD7,XK_F27 = 0xFFD8,};
enum MACRO_XK_R7 {XK_R7 = 0xFFD8,XK_F28 = 0xFFD9,};
enum MACRO_XK_R8 {XK_R8 = 0xFFD9,XK_F29 = 0xFFDA,};
enum MACRO_XK_R9 {XK_R9 = 0xFFDA,XK_F30 = 0xFFDB,};
enum MACRO_XK_Select {XK_Select = 0xFF60,};
enum MACRO_XK_Thorn {XK_Thorn = 0xDE,XK_ssharp = 0xDF,XK_agrave = 0xE0,XK_aacute = 0xE1,XK_acircumflex = 0xE2,XK_atilde = 0xE3,XK_adiaeresis = 0xE4,XK_aring = 0xE5,XK_ae = 0xE6,XK_ccedilla = 0xE7,XK_egrave = 0xE8,XK_eacute = 0xE9,XK_ecircumflex = 0xEA,XK_ediaeresis = 0xEB,XK_igrave = 0xEC,XK_iacute = 0xED,XK_icircumflex = 0xEE,XK_idiaeresis = 0xEF,XK_eth = 0xF0,XK_ntilde = 0xF1,XK_ograve = 0xF2,XK_oacute = 0xF3,XK_ocircumflex = 0xF4,XK_otilde = 0xF5,XK_odiaeresis = 0xF6,XK_division = 0xF7,XK_oslash = 0xF8,XK_ugrave = 0xF9,XK_uacute = 0xFA,XK_ucircumflex = 0xFB,XK_udiaeresis = 0xFC,XK_yacute = 0xFD,XK_thorn = 0xFE,XK_ydiaeresis = 0xFF,XK_BackSpace = 0xFF08,XK_Tab = 0xFF09,XK_Linefeed = 0xFF0A,XK_Clear = 0xFF0B,XK_Return = 0xFF0D,XK_Pause = 0xFF13,XK_Scroll_Lock = 0xFF14,XK_Escape = 0xFF1B,XK_Delete = 0xFFFF,};
enum MACRO_XK_kappa {XK_kappa = 0x3A2,XK_Rcedilla = 0x3A3,XK_Itilde = 0x3A5,XK_Lcedilla = 0x3A6,XK_Emacron = 0x3AA,XK_Gcedilla = 0x3AB,XK_Tslash = 0x3AC,XK_rcedilla = 0x3B3,XK_itilde = 0x3B5,XK_lcedilla = 0x3B6,XK_emacron = 0x3BA,XK_gcedilla = 0x3BB,XK_tslash = 0x3BC,XK_ENG = 0x3BD,XK_eng = 0x3BF,XK_Amacron = 0x3C0,XK_Iogonek = 0x3C7,XK_Eabovedot = 0x3CC,XK_Imacron = 0x3CF,XK_Ncedilla = 0x3D1,XK_Omacron = 0x3D2,XK_Kcedilla = 0x3D3,XK_Uogonek = 0x3D9,XK_Utilde = 0x3DD,XK_Umacron = 0x3DE,XK_amacron = 0x3E0,XK_iogonek = 0x3E7,XK_eabovedot = 0x3EC,XK_imacron = 0x3EF,XK_ncedilla = 0x3F1,XK_omacron = 0x3F2,XK_kcedilla = 0x3F3,XK_uogonek = 0x3F9,XK_utilde = 0x3FD,XK_umacron = 0x3FE,XK_OE = 0x13BC,XK_oe = 0x13BD,XK_Ydiaeresis = 0x13BE,};
enum MACRO_XK_quoteleft {XK_quoteleft = 0x60,XK_a = 0x61,XK_b = 0x62,XK_c = 0x63,XK_d = 0x64,XK_e = 0x65,XK_f = 0x66,XK_g = 0x67,XK_h = 0x68,XK_i = 0x69,XK_j = 0x6A,XK_k = 0x6B,XK_l = 0x6C,XK_m = 0x6D,XK_n = 0x6E,XK_o = 0x6F,XK_p = 0x70,XK_q = 0x71,XK_r = 0x72,XK_s = 0x73,XK_t = 0x74,XK_u = 0x75,XK_v = 0x76,XK_w = 0x77,XK_x = 0x78,XK_y = 0x79,XK_z = 0x7A,XK_braceleft = 0x7B,XK_bar = 0x7C,XK_braceright = 0x7D,XK_asciitilde = 0x7E,XK_nobreakspace = 0xA0,XK_exclamdown = 0xA1,XK_cent = 0xA2,XK_sterling = 0xA3,XK_currency = 0xA4,XK_yen = 0xA5,XK_brokenbar = 0xA6,XK_section = 0xA7,XK_diaeresis = 0xA8,XK_copyright = 0xA9,XK_ordfeminine = 0xAA,XK_guillemotleft = 0xAB,XK_notsign = 0xAC,XK_hyphen = 0xAD,XK_registered = 0xAE,XK_macron = 0xAF,XK_degree = 0xB0,XK_plusminus = 0xB1,XK_twosuperior = 0xB2,XK_threesuperior = 0xB3,XK_acute = 0xB4,XK_mu = 0xB5,XK_paragraph = 0xB6,XK_periodcentered = 0xB7,XK_cedilla = 0xB8,XK_onesuperior = 0xB9,XK_masculine = 0xBA,XK_guillemotright = 0xBB,XK_onequarter = 0xBC,XK_onehalf = 0xBD,XK_threequarters = 0xBE,XK_questiondown = 0xBF,XK_Agrave = 0xC0,XK_Aacute = 0xC1,XK_Acircumflex = 0xC2,XK_Atilde = 0xC3,XK_Adiaeresis = 0xC4,XK_Aring = 0xC5,XK_AE = 0xC6,XK_Ccedilla = 0xC7,XK_Egrave = 0xC8,XK_Eacute = 0xC9,XK_Ecircumflex = 0xCA,XK_Ediaeresis = 0xCB,XK_Igrave = 0xCC,XK_Iacute = 0xCD,XK_Icircumflex = 0xCE,XK_Idiaeresis = 0xCF,XK_ETH = 0xD0,};
enum MACRO_XK_quoteright {XK_quoteright = 0x27,XK_parenleft = 0x28,XK_parenright = 0x29,XK_asterisk = 0x2A,XK_plus = 0x2B,XK_comma = 0x2C,XK_minus = 0x2D,XK_period = 0x2E,XK_slash = 0x2F,XK_0 = 0x30,XK_1 = 0x31,XK_2 = 0x32,XK_3 = 0x33,XK_4 = 0x34,XK_5 = 0x35,XK_6 = 0x36,XK_7 = 0x37,XK_8 = 0x38,XK_9 = 0x39,XK_colon = 0x3A,XK_semicolon = 0x3B,XK_less = 0x3C,XK_equal = 0x3D,XK_greater = 0x3E,XK_question = 0x3F,XK_at = 0x40,XK_A = 0x41,XK_B = 0x42,XK_C = 0x43,XK_D = 0x44,XK_E = 0x45,XK_F = 0x46,XK_G = 0x47,XK_H = 0x48,XK_I = 0x49,XK_J = 0x4A,XK_K = 0x4B,XK_L = 0x4C,XK_M = 0x4D,XK_N = 0x4E,XK_O = 0x4F,XK_P = 0x50,XK_Q = 0x51,XK_R = 0x52,XK_S = 0x53,XK_T = 0x54,XK_U = 0x55,XK_V = 0x56,XK_W = 0x57,XK_X = 0x58,XK_Y = 0x59,XK_Z = 0x5A,XK_bracketleft = 0x5B,XK_backslash = 0x5C,XK_bracketright = 0x5D,XK_asciicircum = 0x5E,XK_underscore = 0x5F,XK_grave = 0x60,};
enum MACRO_XK_rcaron {XK_rcaron = 0x1F8,XK_uring = 0x1F9,XK_tcedilla = 0x1FE,XK_abovedot = 0x1FF,XK_Hstroke = 0x2A1,XK_Hcircumflex = 0x2A6,XK_Iabovedot = 0x2A9,XK_Gbreve = 0x2AB,XK_Jcircumflex = 0x2AC,XK_hstroke = 0x2B1,XK_hcircumflex = 0x2B6,XK_idotless = 0x2B9,XK_gbreve = 0x2BB,XK_jcircumflex = 0x2BC,XK_Cabovedot = 0x2C5,XK_Ccircumflex = 0x2C6,XK_Gabovedot = 0x2D5,XK_Gcircumflex = 0x2D8,XK_Ubreve = 0x2DD,XK_Scircumflex = 0x2DE,XK_cabovedot = 0x2E5,XK_ccircumflex = 0x2E6,XK_gabovedot = 0x2F5,XK_gcircumflex = 0x2F8,XK_ubreve = 0x2FD,XK_scircumflex = 0x2FE,XK_kra = 0x3A2,};
enum MACRO_XK_space {XK_space = 0x20,XK_exclam = 0x21,XK_quotedbl = 0x22,XK_numbersign = 0x23,XK_dollar = 0x24,XK_percent = 0x25,XK_ampersand = 0x26,XK_apostrophe = 0x27,};
enum MACRO_XLMAGIC {XLMAGIC = 0x160,WE32MAGIC = 0x170,};
enum MACRO_XLocaleNotSupported {XLocaleNotSupported = -2,};
enum MACRO_XLookupNone {XLookupNone = 1,XLookupChars = 2,XLookupKeySym = 3,XLookupBoth = 4,};
enum MACRO_XMD {XMD_H = 1,};
enum MACRO_XP {XP_DONT_CHECK = 0,XP_INITIAL_RELEASE = 1,};
enum MACRO_XPAttrReplace {XPAttrReplace = 1,XPAttrMerge = 2,};
enum MACRO_XPBadContext {XPBadContext = 0,XPBadSequence = 1,XPBadResourceID = 2,};
enum MACRO_XPDocNormal {XPDocNormal = 1,XPDocRaw = 2,};
enum MACRO_XPGetDocFinished {XPGetDocFinished = 0,XPGetDocSecondConsumer = 1,XPGetDocError = 2,};
enum MACRO_XPJobAttr {XPJobAttr = 1,XPDocAttr = 2,XPPageAttr = 3,XPPrinterAttr = 4,XPServerAttr = 5,XPMediumAttr = 6,XPFontAttr = 7,XPResAttr = 8,XPTransAttr = 9,XPDelAttr = 10,XPAuxSPkg = 11,XPAuxS = 12,XPFinishAttr = 13,XPOutputAttr = 14,XPImpAttr = 15,XPSchedAttr = 16,XPIntJobAttr = 17,XPIntDocAttr = 18,XPResConAttr = 19,};
enum MACRO_XPNoEventMask {XPNoEventMask = 0,XPPrintMask = 1,XPAttributeMask = 2,};
enum MACRO_XPOINTER {XPOINTER = 0,XKEYBOARD = 1,UseXKeyboard = 255,};
enum MACRO_XPPrintNotify {XPPrintNotify = 0,XPAttributeNotify = 1,};
enum MACRO_XPSpool {XPSpool = 1,XPGetData = 2,};
enum MACRO_XPStartJobNotify {XPStartJobNotify = 0,XPEndJobNotify = 1,XPStartDocNotify = 2,XPEndDocNotify = 3,XPStartPageNotify = 4,XPEndPageNotify = 5,};
enum MACRO_XP_ATTRIBUTES {XP_ATTRIBUTES = 5,};
enum MACRO_XP_EVENTS {XP_EVENTS = 2,};
enum MACRO_XP_MAJOR {XP_MAJOR_VERSION = 1,XP_MINOR_VERSION = 0,XP_ABSENT = 0,};
enum MACRO_XP_PRESENT {XP_PRESENT = 1,XP_ERRORS = 3,};
enum MACRO_XP_PROTO {XP_PROTO_MAJOR = 1,XP_PROTO_MINOR = 0,};
enum MACRO_XRecordBadContext {XRecordBadContext = 0,XRecordFromServerTime = 1,XRecordFromClientTime = 2,XRecordFromClientSequence = 4,};
enum MACRO_XRecordCurrentClients {XRecordCurrentClients = 1,XRecordFutureClients = 2,XRecordAllClients = 3,};
enum MACRO_XRecordFromServer {XRecordFromServer = 0,XRecordFromClient = 1,XRecordClientStarted = 2,XRecordClientDied = 3,XRecordStartOfData = 4,XRecordEndOfData = 5,};
enum MACRO_XSecurityAllEventMasks {XSecurityAllEventMasks = 1,};
enum MACRO_XSecurityAuthorizationNameLen {XSecurityAuthorizationNameLen = 19,};
enum MACRO_XSecurityAuthorizationRevoked {XSecurityAuthorizationRevoked = 0,};
enum MACRO_XSecurityAuthorizationRevokedMask {XSecurityAuthorizationRevokedMask = 1,};
enum MACRO_XSecurityBadAuthorization {XSecurityBadAuthorization = 0,XSecurityBadAuthorizationProtocol = 1,};
enum MACRO_XSecurityClientTrusted {XSecurityClientTrusted = 0,XSecurityClientUntrusted = 1,};
enum MACRO_XSecurityNumberEvents {XSecurityNumberEvents = 1,XSecurityNumberErrors = 2,};
enum MACRO_XSecurityTimeout {XSecurityTimeout = 1,XSecurityTrustLevel = 2,XSecurityGroup = 4,XSecurityEventMask = 8,XSecurityAllAuthorizationAttributes = 15,};
enum MACRO_XSmtBadSegment {XSmtBadSegment = 0,XSmtNumberOfErrors = 1,};
enum MACRO_XSmtWakeupNotify {XSmtWakeupNotify = 0,XSmtNumberOfEvents = 1,};
enum MACRO_XSyncBadCounter {XSyncBadCounter = 0,XSyncBadAlarm = 1,XSyncNumberErrors = 2,};
enum MACRO_XSyncCACounter {XSyncCACounter = 1,XSyncCAValueType = 2,XSyncCAValue = 4,XSyncCATestType = 8,XSyncCADelta = 16,XSyncCAEvents = 32,};
enum MACRO_XSyncCounterNotify {XSyncCounterNotify = 0,XSyncAlarmNotify = 1,XSyncAlarmNotifyMask = 2,};
enum MACRO_XSyncNumberEvents {XSyncNumberEvents = 2,};
enum MACRO_XT {XT_CONVERT_FAIL = 0x80000001,};
enum MACRO_XTABS {XTABS = 0xC00,CRDELAY = 0x3000,VTDELAY = 0x4000,BSDELAY = 0x8000,ALLDELAY = 0xFF00,CRTBS = 0x10000,PRTERA = 0x20000,CRTERA = 0x40000,TILDE = 0x80000,};
enum MACRO_XTI {XTI_GENERIC = 0xFFFF,};
enum MACRO_XTIOCGROUP {XTIOCGROUP_MASK = 0xF,};
enum MACRO_XTIOCPARM {XTIOCPARM_MASK = 0xFF,XTIOCLEN_MASK = 0x3FF,};
enum MACRO_XTI_DEBUG {XTI_DEBUG = 0x1,XTI_LINGER = 0x80,XTI_RCVBUF = 0x1002,XTI_RCVLOWAT = 0x1004,};
enum MACRO_XTI_ISSPEC1170 {XTI_ISSPEC1170 = 257,XTI_SETSTATE = 258,};
enum MACRO_XTI_SNDBUF {XTI_SNDBUF = 0x1001,XTI_SNDLOWAT = 0x1003,};
enum MACRO_XTI_SOSETOPT {XTI_SOSETOPT = 2049,XTI_SOGETOPT = 2050,};
enum MACRO_XT_REVISION {XT_REVISION = 6,XtVersion = 11006,};
enum MACRO_XT_VERSION {XT_VERSION = 11,};
enum MACRO_XTestACTION {XTestACTION_TYPE_MASK = 0x3,XTestKEY_STATE_MASK = 0x4,};
enum MACRO_XTestDELAY {XTestDELAY_ACTION = 0,XTestKEY_ACTION = 1,XTestMOTION_ACTION = 2,XTestJUMP_ACTION = 3,XTestKEY_UP = 4,};
enum MACRO_XTestDELAY_DEVICE {XTestDELAY_DEVICE_ID = 0xF,};
enum MACRO_XTestEVENT {XTestEVENT_COUNT = 2,X_TestFakeInput = 1,};
enum MACRO_XTestEXCLUSIVE {XTestEXCLUSIVE = 1,XTestPACKED_ACTIONS = 2,XTestPACKED_MOTION = 4,};
enum MACRO_XTestFAKE {XTestFAKE_ACK_NOT_NEEDED = 0,XTestFAKE_ACK_REQUEST = 1,};
enum MACRO_XTestKEY {XTestKEY_DOWN = 0x0,XTestMOTION_MAX = 0xF,XTestMOTION_MIN = 0xFFFFFFF1,};
enum MACRO_XTestMAX {XTestMAX_DEVICE_ID = 0xF,};
enum MACRO_XTestMinorVersion {XTestMinorVersion = 2,};
enum MACRO_XTestNumberErrors {XTestNumberErrors = 0,XTestMajorVersion = 2,};
enum MACRO_XTestNumberEvents {XTestNumberEvents = 0,};
enum MACRO_XTestPRESS {XTestPRESS = 1,XTestRELEASE = 2,XTestSTROKE = 4,XTestSTROKE_DELAY_TIME = 10,};
enum MACRO_XTestSHORT {XTestSHORT_DELAY_TIME = 0xFFFF,};
enum MACRO_XTestX {XTestX_SIGN_BIT_MASK = 0x4,XTestY_SIGN_BIT_MASK = 0x8,XTestDEVICE_ID_MASK = 0xF0,};
enum MACRO_XTestX_NEGATIVE {XTestX_NEGATIVE = 0x4,XTestY_NEGATIVE = 0x8,XTestX_MOTION_MASK = 0xF,XTestY_MOTION_MASK = 0xF0,};
enum MACRO_XWD {XWD_FILE_VERSION = 7,sz_XWDheader = 100,};
enum MACRO_XYBitmap {XYBitmap = 0,XYPixmap = 1,ZPixmap = 2,};
enum MACRO_X_509 {X_509_NUM = 3,};
enum MACRO_X_CreateWindow {X_CreateWindow = 1,X_ChangeWindowAttributes = 2,X_GetWindowAttributes = 3,X_DestroyWindow = 4,X_DestroySubwindows = 5,X_ChangeSaveSet = 6,X_ReparentWindow = 7,X_MapWindow = 8,X_MapSubwindows = 9,X_UnmapWindow = 10,X_UnmapSubwindows = 11,X_ConfigureWindow = 12,X_CirculateWindow = 13,X_GetGeometry = 14,X_QueryTree = 15,X_InternAtom = 16,X_GetAtomName = 17,X_ChangeProperty = 18,X_DeleteProperty = 19,X_GetProperty = 20,X_ListProperties = 21,X_SetSelectionOwner = 22,X_GetSelectionOwner = 23,X_ConvertSelection = 24,X_SendEvent = 25,X_GrabPointer = 26,X_UngrabPointer = 27,X_GrabButton = 28,X_UngrabButton = 29,X_ChangeActivePointerGrab = 30,X_GrabKeyboard = 31,X_UngrabKeyboard = 32,X_GrabKey = 33,X_UngrabKey = 34,X_AllowEvents = 35,X_GrabServer = 36,X_UngrabServer = 37,X_QueryPointer = 38,X_GetMotionEvents = 39,X_TranslateCoords = 40,X_WarpPointer = 41,X_SetInputFocus = 42,X_GetInputFocus = 43,X_QueryKeymap = 44,X_OpenFont = 45,X_CloseFont = 46,X_QueryFont = 47,X_QueryTextExtents = 48,X_ListFonts = 49,X_ListFontsWithInfo = 50,X_SetFontPath = 51,X_GetFontPath = 52,X_CreatePixmap = 53,X_FreePixmap = 54,X_CreateGC = 55,X_ChangeGC = 56,X_CopyGC = 57,X_SetDashes = 58,X_SetClipRectangles = 59,X_FreeGC = 60,X_ClearArea = 61,X_CopyArea = 62,X_CopyPlane = 63,X_PolyPoint = 64,X_PolyLine = 65,X_PolySegment = 66,X_PolyRectangle = 67,X_PolyArc = 68,X_FillPoly = 69,X_PolyFillRectangle = 70,X_PolyFillArc = 71,X_PutImage = 72,X_GetImage = 73,X_PolyText8 = 74,X_PolyText16 = 75,X_ImageText8 = 76,X_ImageText16 = 77,X_CreateColormap = 78,X_FreeColormap = 79,X_CopyColormapAndFree = 80,X_InstallColormap = 81,X_UninstallColormap = 82,X_ListInstalledColormaps = 83,X_AllocColor = 84,X_AllocNamedColor = 85,X_AllocColorCells = 86,X_AllocColorPlanes = 87,X_FreeColors = 88,X_StoreColors = 89,X_StoreNamedColor = 90,X_QueryColors = 91,X_LookupColor = 92,X_CreateCursor = 93,X_CreateGlyphCursor = 94,X_FreeCursor = 95,X_RecolorCursor = 96,X_QueryBestSize = 97,X_QueryExtension = 98,X_ListExtensions = 99,X_ChangeKeyboardMapping = 100,X_GetKeyboardMapping = 101,X_ChangeKeyboardControl = 102,X_GetKeyboardControl = 103,X_Bell = 104,X_ChangePointerControl = 105,X_GetPointerControl = 106,X_SetScreenSaver = 107,X_GetScreenSaver = 108,X_ChangeHosts = 109,X_ListHosts = 110,X_SetAccessControl = 111,X_SetCloseDownMode = 112,X_KillClient = 113,X_RotateProperties = 114,X_ForceScreenSaver = 115,X_SetPointerMapping = 116,X_GetPointerMapping = 117,X_SetModifierMapping = 118,X_GetModifierMapping = 119,X_NoOperation = 127,};
enum MACRO_X_DPMSGetVersion {X_DPMSGetVersion = 0,X_DPMSCapable = 1,X_DPMSGetTimeouts = 2,X_DPMSSetTimeouts = 3,X_DPMSEnable = 4,X_DPMSDisable = 5,X_DPMSForceLevel = 6,X_DPMSInfo = 7,};
enum MACRO_X_DUMPDEV {X_DUMPDEV = 0,X_DUMPLO = 1,X_TIME = 2,X_DUMPSIZE = 3,X_VERSION = 4,X_PANICSTR = 5,X_DUMPMAG = 6,X_MSGBUF = 7,X_BLBUFPADR = 8,X_BLBUF = 9,X_PARTDUMPMAG = 10,X_PARTDUMP = 11,X_BOOTEDFILE = 12,DUMP_NPIECE_MAX = 16,};
enum MACRO_X_GetExtensionVersion {X_GetExtensionVersion = 1,X_ListInputDevices = 2,X_OpenDevice = 3,X_CloseDevice = 4,X_SetDeviceMode = 5,X_SelectExtensionEvent = 6,X_GetSelectedExtensionEvents = 7,X_ChangeDeviceDontPropagateList = 8,X_GetDeviceDontPropagateList = 9,X_GetDeviceMotionEvents = 10,X_ChangeKeyboardDevice = 11,X_ChangePointerDevice = 12,X_GrabDevice = 13,X_UngrabDevice = 14,X_GrabDeviceKey = 15,X_UngrabDeviceKey = 16,X_GrabDeviceButton = 17,X_UngrabDeviceButton = 18,X_AllowDeviceEvents = 19,X_GetDeviceFocus = 20,X_SetDeviceFocus = 21,X_GetFeedbackControl = 22,X_ChangeFeedbackControl = 23,X_GetDeviceKeyMapping = 24,X_ChangeDeviceKeyMapping = 25,X_GetDeviceModifierMapping = 26,X_SetDeviceModifierMapping = 27,X_GetDeviceButtonMapping = 28,X_SetDeviceButtonMapping = 29,X_QueryDeviceState = 30,X_SendExtensionEvent = 31,X_DeviceBell = 32,X_SetDeviceValuators = 33,X_GetDeviceControl = 34,X_ChangeDeviceControl = 35,};
enum MACRO_X_MITSetBugMode {X_MITSetBugMode = 0,X_MITGetBugMode = 1,};
enum MACRO_X_MbufGetBufferVersion {X_MbufGetBufferVersion = 0,X_MbufCreateImageBuffers = 1,X_MbufDestroyImageBuffers = 2,X_MbufDisplayImageBuffers = 3,X_MbufSetMBufferAttributes = 4,X_MbufGetMBufferAttributes = 5,X_MbufSetBufferAttributes = 6,X_MbufGetBufferAttributes = 7,X_MbufGetBufferInfo = 8,X_MbufCreateStereoWindow = 9,X_MbufClearImageBufferArea = 10,};
enum MACRO_X_PROTOCOL {X_PROTOCOL = 11,X_PROTOCOL_REVISION = 0,};
enum MACRO_X_PanoramiXQueryVersion {X_PanoramiXQueryVersion = 0,X_PanoramiXGetState = 1,X_PanoramiXGetScreenCount = 2,X_PanoramiXGetScreenSize = 3,sz_xPanoramiXQueryVersionReq = 8,sz_xPanoramiXQueryVersionReply = 32,};
enum MACRO_X_PrintQueryVersion {X_PrintQueryVersion = 0,X_PrintGetPrinterList = 1,X_PrintCreateContext = 2,X_PrintSetContext = 3,X_PrintGetContext = 4,X_PrintDestroyContext = 5,X_PrintGetContextScreen = 6,X_PrintStartJob = 7,X_PrintEndJob = 8,X_PrintStartDoc = 9,X_PrintEndDoc = 10,X_PrintPutDocumentData = 11,X_PrintGetDocumentData = 12,X_PrintStartPage = 13,X_PrintEndPage = 14,X_PrintSelectInput = 15,X_PrintInputSelected = 16,X_PrintGetAttributes = 17,X_PrintSetAttributes = 18,X_PrintGetOneAttribute = 19,X_PrintRehashPrinterList = 20,X_PrintGetPageDimensions = 21,X_PrintQueryScreens = 22,X_PrintSetImageResolution = 23,X_PrintGetImageResolution = 24,};
enum MACRO_X_RecordQueryVersion {X_RecordQueryVersion = 0,X_RecordCreateContext = 1,X_RecordRegisterClients = 2,X_RecordUnregisterClients = 3,X_RecordGetContext = 4,X_RecordEnableContext = 5,X_RecordDisableContext = 6,X_RecordFreeContext = 7,};
enum MACRO_X_Reply {X_Reply = 1,X_Error = 0,};
enum MACRO_X_SERVER {X_SERVER_DAC = 544,X_CLIENT_IPC = 545,X_OBJECT_DAC = 549,};
enum MACRO_X_ScreenSaverQueryInfo {X_ScreenSaverQueryInfo = 1,sz_xScreenSaverQueryInfoReq = 8,sz_xScreenSaverQueryInfoReply = 32,};
enum MACRO_X_ScreenSaverQueryVersion {X_ScreenSaverQueryVersion = 0,sz_xScreenSaverQueryVersionReq = 8,sz_xScreenSaverQueryVersionReply = 32,};
enum MACRO_X_ScreenSaverSelectInput {X_ScreenSaverSelectInput = 2,sz_xScreenSaverSelectInputReq = 12,};
enum MACRO_X_ScreenSaverSetAttributes {X_ScreenSaverSetAttributes = 3,sz_xScreenSaverSetAttributesReq = 28,};
enum MACRO_X_ScreenSaverUnsetAttributes {X_ScreenSaverUnsetAttributes = 4,sz_xScreenSaverUnsetAttributesReq = 8,sz_xScreenSaverNotifyEvent = 32,};
enum MACRO_X_SecurityQueryVersion {X_SecurityQueryVersion = 0,X_SecurityGenerateAuthorization = 1,X_SecurityRevokeAuthorization = 2,sz_xSecurityQueryVersionReq = 8,sz_xSecurityQueryVersionReply = 32,};
enum MACRO_X_ShapeQueryVersion {X_ShapeQueryVersion = 0,X_ShapeRectangles = 1,X_ShapeMask = 2,X_ShapeCombine = 3,X_ShapeOffset = 4,X_ShapeQueryExtents = 5,X_ShapeSelectInput = 6,X_ShapeInputSelected = 7,X_ShapeGetRectangles = 8,};
enum MACRO_X_ShmQueryVersion {X_ShmQueryVersion = 0,X_ShmAttach = 1,X_ShmDetach = 2,X_ShmPutImage = 3,X_ShmGetImage = 4,X_ShmCreatePixmap = 5,};
enum MACRO_X_SmtQueryVersion {X_SmtQueryVersion = 0,X_SmtAttach = 1,X_SmtWakeupServer = 2,XSmtWakeupNotifyMask = 33554432,};
enum MACRO_X_SyncInitialize {X_SyncInitialize = 0,X_SyncListSystemCounters = 1,X_SyncCreateCounter = 2,X_SyncSetCounter = 3,X_SyncChangeCounter = 4,X_SyncQueryCounter = 5,X_SyncDestroyCounter = 6,X_SyncAwait = 7,X_SyncCreateAlarm = 8,X_SyncChangeAlarm = 9,X_SyncQueryAlarm = 10,X_SyncDestroyAlarm = 11,X_SyncSetPriority = 12,X_SyncGetPriority = 13,};
enum MACRO_X_TestGetInput {X_TestGetInput = 2,X_TestStopInput = 3,X_TestReset = 4,X_TestQueryInputSize = 5,XTestMAX_ACTION_LIST_SIZE = 64,sz_xTestFakeInputReq = 72,};
enum MACRO_X_XTestGetVersion {X_XTestGetVersion = 0,X_XTestCompareCursor = 1,X_XTestFakeInput = 2,X_XTestGrabControl = 3,};
enum MACRO_X_XagQueryVersion {X_XagQueryVersion = 0,X_XagCreate = 1,X_XagDestroy = 2,X_XagGetAttr = 3,X_XagQuery = 4,X_XagCreateAssoc = 5,X_XagDestroyAssoc = 6,};
enum MACRO_X_ieQueryImageExtension {X_ieQueryImageExtension = 1,X_ieQueryTechniques = 2,X_ieCreateColorList = 3,X_ieDestroyColorList = 4,X_iePurgeColorList = 5,X_ieQueryColorList = 6,X_ieCreateLUT = 7,X_ieDestroyLUT = 8,X_ieCreatePhotomap = 9,X_ieDestroyPhotomap = 10,X_ieQueryPhotomap = 11,X_ieCreateROI = 12,X_ieDestroyROI = 13,X_ieCreatePhotospace = 14,X_ieDestroyPhotospace = 15,X_ieExecuteImmediate = 16,X_ieCreatePhotoflo = 17,X_ieDestroyPhotoflo = 18,X_ieExecutePhotoflo = 19,X_ieModifyPhotoflo = 20,X_ieRedefinePhotoflo = 21,X_iePutClientData = 22,X_ieGetClientData = 23,X_ieQueryPhotoflo = 24,X_ieAwait = 25,X_ieAbort = 26,};
enum MACRO_X_kbUseExtension {X_kbUseExtension = 0,X_kbSelectEvents = 1,X_kbBell = 3,X_kbGetState = 4,X_kbLatchLockState = 5,X_kbGetControls = 6,X_kbSetControls = 7,X_kbGetMap = 8,X_kbSetMap = 9,X_kbGetCompatMap = 10,X_kbSetCompatMap = 11,X_kbGetIndicatorState = 12,X_kbGetIndicatorMap = 13,X_kbSetIndicatorMap = 14,X_kbGetNamedIndicator = 15,X_kbSetNamedIndicator = 16,X_kbGetNames = 17,X_kbSetNames = 18,X_kbGetGeometry = 19,X_kbSetGeometry = 20,X_kbPerClientFlags = 21,X_kbListComponents = 22,X_kbGetKbdByName = 23,X_kbGetDeviceInfo = 24,X_kbSetDeviceInfo = 25,X_kbSetDebuggingFlags = 101,};
enum MACRO_XagBadAppGroup {XagBadAppGroup = 0,XagNumberErrors = 1,};
enum MACRO_XagNsingleScreen {XagNsingleScreen = 0,XagNdefaultRoot = 1,XagNrootVisual = 2,XagNdefaultColormap = 3,XagNblackPixel = 4,XagNwhitePixel = 5,XagNappGroupLeader = 6,};
enum MACRO_XagSingleScreenMask {XagSingleScreenMask = 1,XagDefaultRootMask = 2,XagRootVisualMask = 4,XagDefaultColormapMask = 8,XagBlackPixelMask = 16,XagWhitePixelMask = 32,XagAppGroupLeaderMask = 64,};
enum MACRO_XagWindowTypeX11 {XagWindowTypeX11 = 0,XagWindowTypeMacintosh = 1,XagWindowTypeWin32 = 2,XagWindowTypeWin16 = 3,sz_xXagQueryVersionReq = 8,sz_xXagQueryVersionReply = 32,};
enum MACRO_XawBS {XawBS = 0x8,XawSP = 0x20,XawDEL = 0x7F,};
enum MACRO_XawESC {XawESC = 0x1B,XawBSLASH = 0x5C,DEFAULT_TEXT_HEIGHT = 0xFFFFFFFF,};
enum MACRO_XawEditDone {XawEditDone = 0,XawEditError = 1,XawPositionError = 2,};
enum MACRO_XawPRSliderX {XawPRSliderX = 1,XawPRSliderY = 2,XawPRSliderWidth = 4,XawPRSliderHeight = 8,XawPRCanvasWidth = 16,XawPRCanvasHeight = 32,XawPRAll = 63,};
enum MACRO_XawShapeRectangle {XawShapeRectangle = 1,XawShapeOval = 2,XawShapeEllipse = 3,XawShapeRoundedRectangle = 4,};
enum MACRO_XawTAB {XawTAB = 0x9,};
enum MACRO_XawTextEncoding8bit {XawTextEncoding8bit = 0,XawTextEncodingChar2b = 1,};
enum MACRO_XawTextReadError {XawTextReadError = -1,};
enum MACRO_XawTextScanError {XawTextScanError = -1,};
enum MACRO_XawTextSearchError {XawTextSearchError = -12345,XawReplaceError = -1,};
enum MACRO_XcmsFailure {XcmsFailure = 0,XcmsSuccess = 1,XcmsSuccessWithCompression = 2,};
enum MACRO_XcmsInitNone {XcmsInitNone = 0x0,XcmsInitSuccess = 0x1,XcmsInitFailure = 0xFF,};
enum MACRO_XctSingleSetSegments {XctSingleSetSegments = 0x1,XctProvideExtensions = 0x2,XctAcceptC0Extensions = 0x4,XctAcceptC1Extensions = 0x8,XctHideDirection = 0x10,XctFreeString = 0x20,XctShiftMultiGRToGL = 0x40,};
enum MACRO_XctVersion {XctVersion = 1,};
enum MACRO_XdbeBadBuffer {XdbeBadBuffer = 0,};
enum MACRO_XdbeUndefined {XdbeUndefined = 0,XdbeBackground = 1,XdbeUntouched = 2,XdbeCopied = 3,};
enum MACRO_XkbAX {XkbAX_SKPressFBMask = 1,XkbAX_SKAcceptFBMask = 2,XkbAX_FeatureFBMask = 4,XkbAX_SlowWarnFBMask = 8,XkbAX_IndicatorFBMask = 16,XkbAX_StickyKeysFBMask = 32,XkbAX_TwoKeysMask = 64,XkbAX_LatchToLockMask = 128,XkbAX_SKReleaseFBMask = 256,XkbAX_SKRejectFBMask = 512,XkbAX_BKRejectFBMask = 1024,XkbAX_DumbBellFBMask = 2048,XkbAX_FBOptionsMask = 3903,};
enum MACRO_XkbAXN {XkbAXN_SKPress = 0,XkbAXN_SKAccept = 1,XkbAXN_SKReject = 2,XkbAXN_SKRelease = 3,XkbAXN_BKAccept = 4,XkbAXN_BKReject = 5,XkbAXN_AXKWarning = 6,};
enum MACRO_XkbAXN_SKPressMask {XkbAXN_SKPressMask = 1,XkbAXN_SKAcceptMask = 2,XkbAXN_SKRejectMask = 4,XkbAXN_SKReleaseMask = 8,XkbAXN_BKAcceptMask = 16,XkbAXN_BKRejectMask = 32,XkbAXN_AXKWarningMask = 64,};
enum MACRO_XkbAX_SKOptionsMask {XkbAX_SKOptionsMask = 0xC0,XkbAX_AllOptionsMask = 0xFFF,};
enum MACRO_XkbActionMessageLength {XkbActionMessageLength = 6,};
enum MACRO_XkbAllAccessXEventsMask {XkbAllAccessXEventsMask = 0xF,};
enum MACRO_XkbAllActionMessagesMask {XkbAllActionMessagesMask = 1,};
enum MACRO_XkbAllBellEventsMask {XkbAllBellEventsMask = 1,};
enum MACRO_XkbAllBooleanCtrlsMask {XkbAllBooleanCtrlsMask = 0x1FFF,XkbAllControlsMask = 0xF8001FFF,};
enum MACRO_XkbAllClientInfoMask {XkbAllClientInfoMask = 7,XkbAllServerInfoMask = 248,XkbAllMapComponentsMask = 255,};
enum MACRO_XkbAllGroupsMask {XkbAllGroupsMask = 0xF,};
enum MACRO_XkbAnyActionDataSize {XkbAnyActionDataSize = 7,};
enum MACRO_XkbBI {XkbBI_Info = 0,XkbBI_Warning = 1,XkbBI_MinorError = 2,XkbBI_MajorError = 3,XkbBI_BadValue = 4,XkbBI_InvalidLocation = 5,XkbBI_Question = 6,XkbBI_Start = 7,XkbBI_End = 8,XkbBI_Success = 9,XkbBI_Failure = 10,XkbBI_Wait = 11,XkbBI_Proceed = 12,XkbBI_Ignore = 13,XkbBI_Iconify = 14,XkbBI_Deiconify = 15,XkbBI_Open = 16,XkbBI_Close = 17,XkbBI_TerminalBell = 18,XkbBI_MarginBell = 19,XkbBI_CursorStuck = 20,XkbBI_NewMail = 21,XkbBI_LaunchApp = 22,XkbBI_AppDeath = 23,XkbBI_ImAlive = 24,XkbBI_ClockChimeHour = 25,XkbBI_ClockChimeHalf = 26,XkbBI_ClockChimeQuarter = 27,XkbBI_RepeatingLastBell = 28,XkbBI_ComposeFail = 29,XkbBI_AX_FeatureOn = 30,XkbBI_AX_FeatureOff = 31,XkbBI_AX_FeatureChange = 32,XkbBI_AX_IndicatorOn = 33,XkbBI_AX_IndicatorOff = 34,XkbBI_AX_IndicatorChange = 35,XkbBI_AX_SlowKeysWarning = 36,XkbBI_AX_SlowKeyPress = 37,XkbBI_AX_SlowKeyAccept = 38,XkbBI_AX_SlowKeyReject = 39,XkbBI_AX_SlowKeyRelease = 40,XkbBI_AX_BounceKeyReject = 41,XkbBI_AX_StickyLatch = 42,XkbBI_AX_StickyLock = 43,XkbBI_AX_StickyUnlock = 44,XkbBI_NumBells = 45,};
enum MACRO_XkbCF {XkbCF_Check = 0,XkbCF_Apply = 1,XkbCF_CleanUp = 2,XkbCF_Destroy = 3,};
enum MACRO_XkbCF_InitialMods {XkbCF_InitialMods = 1,XkbCF_InternalMods = 2,XkbCF_IgnoreLockMods = 4,XkbCF_InitialCtrls = 8,XkbCF_AccessXTimeout = 16,XkbCF_AccessXTimeoutCtrlsOn = 32,XkbCF_AccessXTimeoutCtrlsOff = 64,XkbCF_AccessXTimeoutOptsOn = 128,XkbCF_AccessXTimeoutOptsOff = 256,XkbCF_GroupsWrap = 512,XkbCF_EOF = -1,};
enum MACRO_XkbCF_MergeSet {XkbCF_MergeSet = 0,XkbCF_MergeAdd = 1,XkbCF_MergeRemove = 2,};
enum MACRO_XkbCF_Unknown {XkbCF_Unknown = 0,XkbCF_EOL = 1,XkbCF_Semi = 2,XkbCF_Equals = 3,XkbCF_PlusEquals = 4,XkbCF_MinusEquals = 5,XkbCF_Plus = 6,XkbCF_Minus = 7,XkbCF_String = 10,XkbCF_Ident = 11,XkbCF_Integer = 12,XkbCF_UnterminatedString = 100,XkbCF_BadAlloc = 101,XkbCF_MissingIdent = 102,XkbCF_MissingEquals = 103,XkbCF_ExpectedEOS = 104,XkbCF_ExpectedBoolean = 105,XkbCF_ExpectedInteger = 106,XkbCF_ExpectedString = 107,XkbCF_ExpectedModifier = 108,XkbCF_ExpectedControl = 109,XkbCF_ExpectedAXOption = 110,XkbCF_ExpectedOperator = 111,XkbCF_ExpectedOORGroupBehavior = 112,};
enum MACRO_XkbClientMapMask {XkbClientMapMask = 1,XkbServerMapMask = 2,XkbCompatMapMask = 4,XkbIndicatorMapMask = 8,XkbNamesMask = 16,XkbGeometryMask = 32,XkbControlsMask = 64,XkbAllComponentsMask = 127,};
enum MACRO_XkbComponentNamesMask {XkbComponentNamesMask = 0x3F,XkbAllNamesMask = 0x3FFF,};
enum MACRO_XkbDF {XkbDF_DisableLocks = 1,};
enum MACRO_XkbErr {XkbErr_BadClass = 0xFE,};
enum MACRO_XkbErr_BadId {XkbErr_BadId = 0xFD,};
enum MACRO_XkbEventCode {XkbEventCode = 0,XkbNumberEvents = 1,};
enum MACRO_XkbExplicitKeyType1Mask {XkbExplicitKeyType1Mask = 1,XkbExplicitKeyType2Mask = 2,XkbExplicitKeyType3Mask = 4,XkbExplicitKeyType4Mask = 8,XkbExplicitInterpretMask = 16,XkbExplicitAutoRepeatMask = 32,XkbExplicitBehaviorMask = 64,XkbExplicitVModMapMask = 128,XkbAllExplicitMask = 255,};
enum MACRO_XkbGBN {XkbGBN_TypesMask = 1,XkbGBN_CompatMapMask = 2,XkbGBN_ClientSymbolsMask = 4,XkbGBN_ServerSymbolsMask = 8,XkbGBN_SymbolsMask = 12,XkbGBN_IndicatorMapMask = 16,XkbGBN_KeyNamesMask = 32,XkbGBN_GeometryMask = 64,XkbGBN_OtherNamesMask = 128,XkbGBN_AllComponentsMask = 255,};
enum MACRO_XkbGeomMaxLabelColors {XkbGeomMaxLabelColors = 3,XkbGeomMaxPriority = 255,};
enum MACRO_XkbGeomPropertiesMask {XkbGeomPropertiesMask = 1,XkbGeomColorsMask = 2,XkbGeomShapesMask = 4,XkbGeomSectionsMask = 8,XkbGeomDoodadsMask = 16,XkbGeomKeyAliasesMask = 32,XkbGeomAllMask = 63,};
enum MACRO_XkbGroup1Index {XkbGroup1Index = 0,XkbGroup2Index = 1,XkbGroup3Index = 2,XkbGroup4Index = 3,XkbAnyGroup = 254,XkbAllGroups = 255,};
enum MACRO_XkbGroup1Mask {XkbGroup1Mask = 1,XkbGroup2Mask = 2,XkbGroup3Mask = 4,XkbGroup4Mask = 8,XkbAnyGroupMask = 128,};
enum MACRO_XkbIM {XkbIM_NoAutomatic = 64,XkbIM_LEDDrivesKB = 32,XkbIM_UseBase = 1,};
enum MACRO_XkbIM_UseLatched {XkbIM_UseLatched = 2,XkbIM_UseLocked = 4,XkbIM_UseEffective = 8,XkbIM_UseCompat = 16,};
enum MACRO_XkbIM_UseNone {XkbIM_UseNone = 0,XkbIM_UseAnyGroup = 14,XkbIM_UseAnyMods = 31,};
enum MACRO_XkbKB {XkbKB_Permanent = 0x80,XkbKB_OpMask = 0x7F,XkbKB_Default = 0x0,};
enum MACRO_XkbKB_Lock {XkbKB_Lock = 0x1,XkbKB_RadioGroup = 0x2,XkbKB_Overlay1 = 0x3,XkbKB_Overlay2 = 0x4,XkbKB_RGAllowNone = 0x80,};
enum MACRO_XkbKeyNameLength {XkbKeyNameLength = 4,XkbMaxRedirectCount = 8,XkbGeomPtsPerMM = 10,XkbGeomMaxColors = 32,};
enum MACRO_XkbKeyTypesMask {XkbKeyTypesMask = 1,XkbKeySymsMask = 2,XkbModifierMapMask = 4,XkbExplicitComponentsMask = 8,XkbKeyActionsMask = 16,XkbKeyBehaviorsMask = 32,XkbVirtualModsMask = 64,XkbVirtualModMapMask = 128,};
enum MACRO_XkbKeyboard {XkbKeyboard = 0,XkbNumberErrors = 1,XkbErr_BadDevice = 255,};
enum MACRO_XkbKeycodesNameMask {XkbKeycodesNameMask = 1,XkbGeometryNameMask = 2,XkbSymbolsNameMask = 4,XkbPhysSymbolsNameMask = 8,XkbTypesNameMask = 16,XkbCompatNameMask = 32,XkbKeyTypeNamesMask = 64,XkbKTLevelNamesMask = 128,XkbIndicatorNamesMask = 256,XkbKeyNamesMask = 512,XkbKeyAliasesMask = 1024,XkbVirtualModNamesMask = 2048,XkbGroupNamesMask = 4096,XkbRGNamesMask = 8192,};
enum MACRO_XkbLC {XkbLC_Hidden = 1,XkbLC_Default = 2,XkbLC_Partial = 4,XkbLC_AlphanumericKeys = 256,XkbLC_ModifierKeys = 512,XkbLC_KeypadKeys = 1024,XkbLC_FunctionKeys = 2048,XkbLC_AlternateGroup = 4096,};
enum MACRO_XkbLC_ForceLatin1Lookup {XkbLC_ForceLatin1Lookup = 1,XkbLC_ConsumeLookupMods = 2,XkbLC_AlwaysConsumeShiftAndLock = 4,XkbLC_IgnoreNewKeyboards = 8,XkbLC_ControlFallback = 16,XkbLC_ConsumeKeysOnComposeFail = 536870912,XkbLC_ComposeLED = 1073741824,XkbLC_BeepOnComposeFail = -2147483648,XkbLC_AllComposeControls = -1073741824,XkbLC_AllControls = -1073741793,};
enum MACRO_XkbLastRequiredType {XkbLastRequiredType = 3,XkbNumRequiredTypes = 4,XkbMaxKeyTypes = 255,};
enum MACRO_XkbMajorVersion {XkbMajorVersion = 1,};
enum MACRO_XkbMapDefined {XkbMapDefined = 1,XkbStateDefined = 2,};
enum MACRO_XkbMapPending {XkbMapPending = 1,XkbXlibNewKeyboard = 2,};
enum MACRO_XkbMaxKbdGroup {XkbMaxKbdGroup = 3,XkbMaxMouseKeysBtn = 4,};
enum MACRO_XkbMaxKeyCount {XkbMaxKeyCount = 248,};
enum MACRO_XkbMaxRadioGroups {XkbMaxRadioGroups = 32,XkbAllRadioGroupsMask = -1,};
enum MACRO_XkbMaxShiftLevel {XkbMaxShiftLevel = 63,XkbMaxSymsPerKey = 252,};
enum MACRO_XkbMinLegalKeyCode {XkbMinLegalKeyCode = 8,XkbMaxLegalKeyCode = 255,};
enum MACRO_XkbMinorVersion {XkbMinorVersion = 0,XkbExplicitKeyTypesMask = 15,};
enum MACRO_XkbModifierStateMask {XkbModifierStateMask = 1,XkbModifierBaseMask = 2,XkbModifierLatchMask = 4,XkbModifierLockMask = 8,XkbGroupStateMask = 16,XkbGroupBaseMask = 32,XkbGroupLatchMask = 64,XkbGroupLockMask = 128,XkbCompatStateMask = 256,XkbGrabModsMask = 512,XkbCompatGrabModsMask = 1024,XkbLookupModsMask = 2048,XkbCompatLookupModsMask = 4096,XkbPointerButtonMask = 8192,XkbAllStateComponentsMask = 16383,};
enum MACRO_XkbNKN {XkbNKN_KeycodesMask = 1,XkbNKN_GeometryMask = 2,XkbNKN_DeviceIDMask = 4,XkbAllNewKeyboardEventsMask = 7,};
enum MACRO_XkbNewKeyboardNotify {XkbNewKeyboardNotify = 0,XkbMapNotify = 1,XkbStateNotify = 2,XkbControlsNotify = 3,XkbIndicatorStateNotify = 4,XkbIndicatorMapNotify = 5,XkbNamesNotify = 6,XkbCompatMapNotify = 7,XkbBellNotify = 8,XkbActionMessage = 9,XkbAccessXNotify = 10,XkbExtensionDeviceNotify = 11,};
enum MACRO_XkbNewKeyboardNotifyMask {XkbNewKeyboardNotifyMask = 1,XkbMapNotifyMask = 2,XkbStateNotifyMask = 4,XkbControlsNotifyMask = 8,XkbIndicatorStateNotifyMask = 16,XkbIndicatorMapNotifyMask = 32,XkbNamesNotifyMask = 64,XkbCompatMapNotifyMask = 128,XkbBellNotifyMask = 256,XkbActionMessageMask = 512,XkbAccessXNotifyMask = 1024,XkbExtensionDeviceNotifyMask = 2048,XkbAllEventsMask = 4095,};
enum MACRO_XkbNoIndicator {XkbNoIndicator = 0xFF,};
enum MACRO_XkbNoModifier {XkbNoModifier = 0xFF,};
enum MACRO_XkbNoModifierMask {XkbNoModifierMask = 0,XkbAllModifiersMask = 255,XkbAllVirtualModsMask = 65535,};
enum MACRO_XkbNoShape {XkbNoShape = 0xFF,};
enum MACRO_XkbNoShiftLevel {XkbNoShiftLevel = 0xFF,};
enum MACRO_XkbNumKbdGroups {XkbNumKbdGroups = 4,};
enum MACRO_XkbNumModifiers {XkbNumModifiers = 8,XkbNumVirtualMods = 16,XkbNumIndicators = 32,XkbAllIndicatorsMask = -1,};
enum MACRO_XkbOD {XkbOD_Success = 0,XkbOD_BadLibraryVersion = 1,XkbOD_ConnectionRefused = 2,XkbOD_NonXkbServer = 3,XkbOD_BadServerVersion = 4,};
enum MACRO_XkbOneLevelIndex {XkbOneLevelIndex = 0,XkbTwoLevelIndex = 1,XkbAlphabeticIndex = 2,XkbKeypadIndex = 3,};
enum MACRO_XkbOneLevelMask {XkbOneLevelMask = 1,XkbTwoLevelMask = 2,XkbAlphabeticMask = 4,XkbKeypadMask = 8,XkbAllRequiredTypes = 15,};
enum MACRO_XkbPCF {XkbPCF_DetectableAutoRepeatMask = 1,XkbPCF_GrabsUseXKBStateMask = 2,XkbPCF_AutoResetControlsMask = 4,XkbPCF_LookupStateWhenGrabbed = 8,XkbPCF_SendEventUsesXKBState = 16,XkbPCF_AllFlagsMask = 31,};
enum MACRO_XkbPerKeyBitArraySize {XkbPerKeyBitArraySize = 32,};
enum MACRO_XkbRGMaxMembers {XkbRGMaxMembers = 12,};
enum MACRO_XkbRepeatKeysMask {XkbRepeatKeysMask = 1,XkbSlowKeysMask = 2,XkbBounceKeysMask = 4,XkbStickyKeysMask = 8,XkbMouseKeysMask = 16,XkbMouseKeysAccelMask = 32,XkbAccessXKeysMask = 64,XkbAccessXTimeoutMask = 128,XkbAccessXFeedbackMask = 256,XkbAudibleBellMask = 512,XkbOverlay1Mask = 1024,XkbOverlay2Mask = 2048,XkbIgnoreGroupLockMask = 4096,XkbGroupsWrapMask = 134217728,XkbInternalModsMask = 268435456,XkbIgnoreLockModsMask = 536870912,XkbPerKeyRepeatMask = 1073741824,XkbControlsEnabledMask = -2147483648,};
enum MACRO_XkbSA {XkbSA_ClearLocks = 1,XkbSA_LatchToLock = 2,};
enum MACRO_XkbSA_AffectDfltBtn {XkbSA_AffectDfltBtn = 1,XkbSA_DfltBtnAbsolute = 4,};
enum MACRO_XkbSA_GroupAbsolute {XkbSA_GroupAbsolute = 4,XkbSA_UseDfltButton = 0,};
enum MACRO_XkbSA_ISOAffectMask {XkbSA_ISOAffectMask = 0x78,XkbSA_MessageOnPress = 0x1,};
enum MACRO_XkbSA_ISONoAffectMods {XkbSA_ISONoAffectMods = 64,XkbSA_ISONoAffectGroup = 32,XkbSA_ISONoAffectPtr = 16,XkbSA_ISONoAffectCtrls = 8,};
enum MACRO_XkbSA_IgnoreVal {XkbSA_IgnoreVal = 0x0,XkbSA_SetValMin = 0x10,XkbSA_SetValCenter = 0x20,XkbSA_SetValMax = 0x30,XkbSA_SetValRelative = 0x40,XkbSA_SetValAbsolute = 0x50,XkbSA_ValOpMask = 0x70,};
enum MACRO_XkbSA_LastAction {XkbSA_LastAction = 20,XkbSA_NumActions = 21,XkbSA_BreakLatch = 1045249,};
enum MACRO_XkbSA_LockNoLock {XkbSA_LockNoLock = 1,XkbSA_LockNoUnlock = 2,XkbSA_UseModMapMods = 4,};
enum MACRO_XkbSA_MessageOnRelease {XkbSA_MessageOnRelease = 2,XkbSA_MessageGenKeyEvent = 4,};
enum MACRO_XkbSA_NoAcceleration {XkbSA_NoAcceleration = 1,XkbSA_MoveAbsoluteX = 2,XkbSA_MoveAbsoluteY = 4,XkbSA_ISODfltIsGroup = 128,};
enum MACRO_XkbSA_NoAction {XkbSA_NoAction = 0x0,XkbSA_SetMods = 0x1,XkbSA_LatchMods = 0x2,XkbSA_LockMods = 0x3,XkbSA_SetGroup = 0x4,XkbSA_LatchGroup = 0x5,XkbSA_LockGroup = 0x6,XkbSA_MovePtr = 0x7,XkbSA_PtrBtn = 0x8,XkbSA_LockPtrBtn = 0x9,XkbSA_SetPtrDflt = 0xA,XkbSA_ISOLock = 0xB,XkbSA_Terminate = 0xC,XkbSA_SwitchScreen = 0xD,XkbSA_SetControls = 0xE,XkbSA_LockControls = 0xF,XkbSA_ActionMessage = 0x10,XkbSA_RedirectKey = 0x11,XkbSA_DeviceBtn = 0x12,XkbSA_LockDeviceBtn = 0x13,XkbSA_DeviceValuator = 0x14,};
enum MACRO_XkbSA_SwitchApplication {XkbSA_SwitchApplication = 1,XkbSA_SwitchAbsolute = 4,};
enum MACRO_XkbSA_ValScaleMask {XkbSA_ValScaleMask = 0x7,};
enum MACRO_XkbSI {XkbSI_AutoRepeat = 1,XkbSI_LockingKey = 2,XkbSI_LevelOneOnly = 128,};
enum MACRO_XkbSI_AnyOfOrNone {XkbSI_AnyOfOrNone = 1,XkbSI_AnyOf = 2,XkbSI_AllOf = 3,XkbSI_Exactly = 4,XkbIM_NoExplicit = 128,};
enum MACRO_XkbSI_OpMask {XkbSI_OpMask = 0x7F,XkbSI_NoneOf = 0x0,};
enum MACRO_XkbSetMapResizeTypes {XkbSetMapResizeTypes = 1,XkbSetMapRecomputeActions = 2,XkbSetMapAllFlags = 3,sz_xkbSetMapReq = 36,};
enum MACRO_XkbSymInterpMask {XkbSymInterpMask = 1,XkbGroupCompatMask = 2,XkbAllCompatMask = 3,};
enum MACRO_XkbUnknownDoodad {XkbUnknownDoodad = 0,XkbOutlineDoodad = 1,XkbSolidDoodad = 2,XkbTextDoodad = 3,XkbIndicatorDoodad = 4,XkbLogoDoodad = 5,};
enum MACRO_XkbUseCoreKbd {XkbUseCoreKbd = 0x100,XkbUseCorePtr = 0x200,XkbDfltXIClass = 0x300,XkbDfltXIId = 0x400,XkbAllXIClasses = 0x500,XkbAllXIIds = 0x600,XkbXINone = 0xFF00,};
enum MACRO_XkbWrapIntoRange {XkbWrapIntoRange = 0x0,XkbClampIntoRange = 0x40,XkbRedirectIntoRange = 0x80,};
enum MACRO_XkbXI {XkbXI_KeyboardsMask = 1,XkbXI_ButtonActionsMask = 2,XkbXI_IndicatorNamesMask = 4,XkbXI_IndicatorMapsMask = 8,XkbXI_IndicatorStateMask = 16,XkbXI_UnsupportedFeatureMask = 32768,};
enum MACRO_XkbXI_AllDeviceFeaturesMask {XkbXI_AllDeviceFeaturesMask = 0x1E,};
enum MACRO_XkbXI_AllFeaturesMask {XkbXI_AllFeaturesMask = 0x1F,};
enum MACRO_XkbXI_IndicatorsMask {XkbXI_IndicatorsMask = 0x1C,XkbAllExtensionDeviceEventsMask = 0x801F,};
enum MACRO_XkbXKMFile {XkbXKMFile = 0,XkbCFile = 1,XkbXKBFile = 2,XkbMessage = 3,};
enum MACRO_XkmAllIndicesMask {XkmAllIndicesMask = 0x7F,};
enum MACRO_XkmKeyHasGroup1Type {XkmKeyHasGroup1Type = 1,XkmKeyHasGroup2Type = 2,XkmKeyHasGroup3Type = 4,XkmKeyHasGroup4Type = 8,XkmKeyHasActions = 16,XkmKeyHasBehavior = 32,XkmRepeatingKey = 64,XkmNonRepeatingKey = 128,};
enum MACRO_XkmKeymapRequired {XkmKeymapRequired = 23,XkmKeymapOptional = 104,XkmKeymapLegal = 127,};
enum MACRO_XkmLastIndex {XkmLastIndex = 6,};
enum MACRO_XkmLayoutRequired {XkmLayoutRequired = 21,XkmLayoutOptional = 96,XkmLayoutLegal = 117,};
enum MACRO_XkmSemanticsFile {XkmSemanticsFile = 20,XkmLayoutFile = 21,XkmKeymapFile = 22,XkmGeometryFile = 23,};
enum MACRO_XkmSemanticsRequired {XkmSemanticsRequired = 2,XkmSemanticsOptional = 73,XkmSemanticsLegal = 75,};
enum MACRO_XkmTypesIndex {XkmTypesIndex = 0,XkmCompatMapIndex = 1,XkmSymbolsIndex = 2,XkmIndicatorsIndex = 3,XkmKeyNamesIndex = 4,XkmGeometryIndex = 5,XkmVirtualModsIndex = 6,};
enum MACRO_XkmTypesMask {XkmTypesMask = 1,XkmCompatMapMask = 2,XkmSymbolsMask = 4,XkmIndicatorsMask = 8,XkmKeyNamesMask = 16,XkmGeometryMask = 32,XkmVirtualModsMask = 64,XkmLegalIndexMask = 127,};
enum MACRO_XlibSpecificationRelease {XlibSpecificationRelease = 6,};
enum MACRO_Xm3D {Xm3D_ENHANCE_PIXEL = 2,};
enum MACRO_XmADD {XmADD = 0,XmDELETE = 1,XmREPLACE = 2,};
enum MACRO_XmArrowBGIndex {XmArrowBGIndex = 3,};
enum MACRO_XmArrowBIndex {XmArrowBIndex = 5,};
enum MACRO_XmArrowButtonGadgetIndex {XmArrowButtonGadgetIndex = 3,};
enum MACRO_XmArrowButtonIndex {XmArrowButtonIndex = 5,};
enum MACRO_XmBACKGROUND {XmBACKGROUND = 1,XmFOREGROUND = 2,XmTOP_SHADOW = 4,XmBOTTOM_SHADOW = 8,XmSELECT = 16,XmTAB_ANY = 255,};
enum MACRO_XmBOTTOM {XmBOTTOM_LEFT = 2,};
enum MACRO_XmBOTTOM_RIGHT {XmBOTTOM_RIGHT = 0,XmFMT_8_BIT = 31,};
enum MACRO_XmBaseClassExtVersion {XmBaseClassExtVersion = 2,};
enum MACRO_XmBulletinBoardIndex {XmBulletinBoardIndex = 7,};
enum MACRO_XmCB {XmCB_ARMED_BIT = 1,XmCB_TRAVERSE_BIT = 2,};
enum MACRO_XmCBG {XmCBG_ARMED_BIT = 1,XmCBG_TRAVERSE_BIT = 2,};
enum MACRO_XmCOPY {XmCOPY_FAILED = 0,XmCOPY_SUCCEEDED = 1,XmCOPY_TRUNCATED = 2,};
enum MACRO_XmCR {XmCR_DROP_SITE_LEAVE_MESSAGE = 1,XmCR_DROP_SITE_ENTER_MESSAGE = 2,XmCR_DROP_SITE_MOTION_MESSAGE = 3,XmCR_DROP_MESSAGE = 4,};
enum MACRO_XmCR_WM {XmCR_WM_PROTOCOLS = 6666,};
enum MACRO_XmCascadeButtonGadgetIndex {XmCascadeButtonGadgetIndex = 4,};
enum MACRO_XmCascadeButtonIndex {XmCascadeButtonIndex = 6,};
enum MACRO_XmClipboardFail {XmClipboardFail = 0,XmClipboardSuccess = 1,XmClipboardTruncate = 2,XmClipboardLocked = 4,XmClipboardBadFormat = 5,XmClipboardNoData = 6,};
enum MACRO_XmCoreIndex {XmCoreIndex = 0,};
enum MACRO_XmDEFAULT {XmDEFAULT_DARK_THRESHOLD = 15,XmDEFAULT_LIGHT_THRESHOLD = 77,};
enum MACRO_XmDEFAULT_FOREGROUND {XmDEFAULT_FOREGROUND_THRESHOLD = 35,XmSTRING_COMPONENT_END = 126,XmSTRING_COMPONENT_USER_BEGIN = 128,XmSTRING_COMPONENT_USER_END = 255,};
enum MACRO_XmDEFAULT_INDICATOR {XmDEFAULT_INDICATOR_DIM = 9,};
enum MACRO_XmDEFAULT_TOP {XmDEFAULT_TOP_MARGIN = 0,XmDEFAULT_BOTTOM_MARGIN = 0,};
enum MACRO_XmDIALOG {XmDIALOG_SUFFIX_SIZE = 6,};
enum MACRO_XmDROP {XmDROP_NOOP = 0,XmDROP_MOVE = 1,XmDROP_COPY = 2,XmDROP_LINK = 4,};
enum MACRO_XmDROP_SITE {XmDROP_SITE_INVALID = 2,XmDROP_SITE_VALID = 3,};
enum MACRO_XmDYNAMIC {XmDYNAMIC_DEFAULT_TAB_GROUP = 255,};
enum MACRO_XmDialogSIndex {XmDialogSIndex = 9,};
enum MACRO_XmDialogShellIndex {XmDialogShellIndex = 9,};
enum MACRO_XmDragContextIndex {XmDragContextIndex = 1,};
enum MACRO_XmDragIconIndex {XmDragIconIndex = 2,};
enum MACRO_XmDrawingAIndex {XmDrawingAIndex = 7,};
enum MACRO_XmDrawingAreaIndex {XmDrawingAreaIndex = 7,};
enum MACRO_XmDrawnBIndex {XmDrawnBIndex = 6,};
enum MACRO_XmDrawnButtonIndex {XmDrawnButtonIndex = 6,};
enum MACRO_XmDropSiteManagerIndex {XmDropSiteManagerIndex = 1,};
enum MACRO_XmDropTransferIndex {XmDropTransferIndex = 1,XmDragOverShellIndex = 8,};
enum MACRO_XmFILE {XmFILE_DIRECTORY = 1,XmFILE_REGULAR = 2,XmFILE_ANY_TYPE = 3,};
enum MACRO_XmFIRST {XmFIRST_APPLICATION_SUBCLASS_BIT = 192,};
enum MACRO_XmFMT {XmFMT_16_BIT = 2,};
enum MACRO_XmFS {XmFS_IN_FILE_SEARCH = 2,XmFS_DIR_SEARCH_PROC = 4,};
enum MACRO_XmFSB {XmFSB_MAX_WIDGETS_VERT = 10,XmFS_NO_MATCH = 1,};
enum MACRO_XmFileSBIndex {XmFileSBIndex = 9,};
enum MACRO_XmFileSelectionBoxIndex {XmFileSelectionBoxIndex = 9,};
enum MACRO_XmFrameIndex {XmFrameIndex = 7,};
enum MACRO_XmGadgetClassExtVersion {XmGadgetClassExtVersion = 1,};
enum MACRO_XmGadgetIndex {XmGadgetIndex = 2,XmPrimitiveIndex = 4,XmManagerIndex = 6,};
enum MACRO_XmHELP {XmHELP = 2,};
enum MACRO_XmIGNORE {XmIGNORE_EVENTTYPE = -1,};
enum MACRO_XmINITIAL {XmINITIAL = 0,XmADDITION = 1,XmMODIFICATION = 2,};
enum MACRO_XmINVALID {XmINVALID_DIMENSION = 0xFFFF,};
enum MACRO_XmKEYCODE {XmKEYCODE_TAG_SIZE = 32,};
enum MACRO_XmLOOK {XmLOOK_AT_SCREEN = 1,XmLOOK_AT_CMAP = 2,XmLOOK_AT_BACKGROUND = 4,XmLOOK_AT_FOREGROUND = 8,XmLOOK_AT_TOP_SHADOW = 16,XmLOOK_AT_BOTTOM_SHADOW = 32,XmLOOK_AT_SELECT = 64,};
enum MACRO_XmLabelGIndex {XmLabelGIndex = 3,};
enum MACRO_XmLabelGadgetIndex {XmLabelGadgetIndex = 3,};
enum MACRO_XmLabelIndex {XmLabelIndex = 5,};
enum MACRO_XmListIndex {XmListIndex = 5,};
enum MACRO_XmMENU {XmMENU_TORN_BIT = 1,XmMENU_TEAR_OFF_SHELL_DESCENDANT_BIT = 2,XmMENU_POPUP_POSTED_BIT = 4,};
enum MACRO_XmMENU_BEGIN {XmMENU_BEGIN = 0,XmMENU_MIDDLE = 1,XmMENU_END = 2,};
enum MACRO_XmMainWIndex {XmMainWIndex = 8,};
enum MACRO_XmMainWindowIndex {XmMainWindowIndex = 8,XmCommandIndex = 9,};
enum MACRO_XmManagerClassExtVersion {XmManagerClassExtVersion = 1,};
enum MACRO_XmMenuShellIndex {XmMenuShellIndex = 7,};
enum MACRO_XmMessageBIndex {XmMessageBIndex = 8,};
enum MACRO_XmMessageBoxIndex {XmMessageBoxIndex = 8,};
enum MACRO_XmNO {XmNO_EVENT = 0x0,XmENTER_EVENT = 0x1,XmLEAVE_EVENT = 0x2,XmFOCUS_IN_EVENT = 0x4,XmFOCUS_OUT_EVENT = 0x8,XmMOTION_EVENT = 0x10,XmARM_EVENT = 0x20,XmACTIVATE_EVENT = 0x40,XmHELP_EVENT = 0x80,XmKEY_EVENT = 0x100,XmMULTI_ARM_EVENT = 0x200,XmMULTI_ACTIVATE_EVENT = 0x400,XmBDRAG_EVENT = 0x800,XmALL_EVENT = 0xFFF,};
enum MACRO_XmNONE {XmNONE_OR_BC = 254,};
enum MACRO_XmNO_DROP {XmNO_DROP_SITE = 1,XmINVALID_DROP_SITE = 2,XmVALID_DROP_SITE = 3,};
enum MACRO_XmNUM {XmNUM_ELEMENTS = 4,XmNUM_BYTES = 99,};
enum MACRO_XmObjectIndex {XmObjectIndex = 0,};
enum MACRO_XmPanedWIndex {XmPanedWIndex = 7,};
enum MACRO_XmPanedWindowIndex {XmPanedWindowIndex = 7,};
enum MACRO_XmPrimitiveClassExtVersion {XmPrimitiveClassExtVersion = 1,};
enum MACRO_XmPushBGIndex {XmPushBGIndex = 4,};
enum MACRO_XmPushBIndex {XmPushBIndex = 6,};
enum MACRO_XmPushButtonGadgetIndex {XmPushButtonGadgetIndex = 4,};
enum MACRO_XmPushButtonIndex {XmPushButtonIndex = 6,};
enum MACRO_XmRC {XmRC_ARMED_BIT = 1,XmRC_BEING_ARMED_BIT = 2,XmRC_EXPOSE_BIT = 4,XmRC_WINDOW_MOVED_BIT = 8,XmRC_WIDGET_MOVED_BIT = 16,XmRC_POPPING_DOWN_BIT = 32,XmRC_FROM_RESIZE_BIT = 64,};
enum MACRO_XmREP {XmREP_TYPE_INVALID = 0x1FFF,};
enum MACRO_XmRESIZE {XmRESIZE_SWINDOW = 10,};
enum MACRO_XmSB {XmSB_MAX_WIDGETS_VERT = 8,};
enum MACRO_XmSashIndex {XmSashIndex = 5,XmRowColumnIndex = 7,};
enum MACRO_XmScaleIndex {XmScaleIndex = 7,};
enum MACRO_XmScrollBarIndex {XmScrollBarIndex = 5,};
enum MACRO_XmScrolledWIndex {XmScrolledWIndex = 7,};
enum MACRO_XmScrolledWindowIndex {XmScrolledWindowIndex = 7,XmFormIndex = 8,};
enum MACRO_XmSelectioBIndex {XmSelectioBIndex = 8,};
enum MACRO_XmSelectionBoxIndex {XmSelectionBoxIndex = 8,};
enum MACRO_XmSeparatoGIndex {XmSeparatoGIndex = 3,};
enum MACRO_XmSeparatorGadgetIndex {XmSeparatorGadgetIndex = 3,XmCascadeBGIndex = 4,};
enum MACRO_XmSeparatorIndex {XmSeparatorIndex = 5,};
enum MACRO_XmShellIndex {XmShellIndex = 5,};
enum MACRO_XmTEXT {XmTEXT_DRAG_ICON_WIDTH = 64,};
enum MACRO_XmTEXT_DRAG {XmTEXT_DRAG_ICON_HEIGHT = 64,XmTEXT_DRAG_ICON_X_HOT = 10,XmTEXT_DRAG_ICON_Y_HOT = 4,};
enum MACRO_XmTO {XmTO_TORN_OFF_BIT = 1,XmTO_FROM_INIT_BIT = 2,XmTO_VISUAL_DIRTY_BIT = 4,XmTO_ACTIVE_BIT = 8,};
enum MACRO_XmTOP {XmTOP_LEFT = 3,};
enum MACRO_XmTOP_RIGHT {XmTOP_RIGHT = 1,};
enum MACRO_XmTRANSFER {XmTRANSFER_FAILURE = 0,XmTRANSFER_SUCCESS = 1,};
enum MACRO_XmTextIndex {XmTextIndex = 5,XmCascadeBIndex = 6,};
enum MACRO_XmToggleBGIndex {XmToggleBGIndex = 4,};
enum MACRO_XmToggleBIndex {XmToggleBIndex = 6,};
enum MACRO_XmToggleButtonGadgetIndex {XmToggleButtonGadgetIndex = 4,XmBulletinBIndex = 7,};
enum MACRO_XmToggleButtonIndex {XmToggleButtonIndex = 6,XmTearOffButtonIndex = 7,};
enum MACRO_XmTopLevelShellIndex {XmTopLevelShellIndex = 8,};
enum MACRO_XmUNSPECIFIED {XmUNSPECIFIED_PIXMAP = 2,};
enum MACRO_XmUNSPECIFIED_0 {XmUNSPECIFIED = -1,};
enum MACRO_XmUNSPECIFIED_ICON {XmUNSPECIFIED_ICON_SIZE = 0,XmLARGE_ICON_SIZE = 1,XmMEDIUM_ICON_SIZE = 2,XmSMALL_ICON_SIZE = 3,XmTINY_ICON_SIZE = 4,};
enum MACRO_XmVERSION {XmVERSION = 1,XmREVISION = 2,XmUPDATE_LEVEL = 4,XmVersion = 1002,};
enum MACRO_XmWEAK {XmWEAK_CHECK = 1,XmMEDIUM_CHECK = 2,XmSTRONG_CHECK = 3,};
enum MACRO_XmWMShellIndex {XmWMShellIndex = 6,};
enum MACRO_XmuShapeRectangle {XmuShapeRectangle = 1,XmuShapeOval = 2,XmuShapeEllipse = 3,XmuShapeRoundedRectangle = 4,};
enum MACRO_XrmEnumAllLevels {XrmEnumAllLevels = 0,XrmEnumOneLevel = 1,XtSpecificationRelease = 6,};
enum MACRO_XtCWQueryOnly {XtCWQueryOnly = 128,};
enum MACRO_XtCacheNone {XtCacheNone = 0x1,XtCacheAll = 0x2,XtCacheByDisplay = 0x3,XtCacheRefCount = 0x100,};
enum MACRO_XtCompositeExtensionVersion {XtCompositeExtensionVersion = 2,};
enum MACRO_XtConstraintExtensionVersion {XtConstraintExtensionVersion = 1,};
enum MACRO_XtDragByPoll {XtDragByPoll = 0,XtDragByEvent = 1,};
enum MACRO_XtExposeNoCompress {XtExposeNoCompress = 0,XtExposeCompressSeries = 1,XtExposeCompressMultiple = 2,XtExposeCompressMaximal = 3,XtExposeGraphicsExpose = 16,XtExposeGraphicsExposeMerged = 32,XtExposeNoExpose = 64,XtExposeNoRegion = 128,};
enum MACRO_XtIMXEvent {XtIMXEvent = 1,XtIMTimer = 2,XtIMAlternateInput = 4,XtIMSignal = 8,XtIMAll = 15,};
enum MACRO_XtInputNoneMask {XtInputNoneMask = 0,XtInputReadMask = 1,XtInputWriteMask = 2,XtInputExceptMask = 4,XtAllEvents = -1,};
enum MACRO_XtObjectExtensionVersion {XtObjectExtensionVersion = 1,};
enum MACRO_XtSMDontChange {XtSMDontChange = 5,};
enum MACRO_XtShellExtensionVersion {XtShellExtensionVersion = 1,};
enum MACRO_XtTextSrcExtVersion {XtTextSrcExtVersion = 1,};
enum MACRO_XtUnspecifiedPixmap {XtUnspecifiedPixmap = 2,XtUnspecifiedShellInt = -1,};
enum MACRO_XtUnspecifiedWindow {XtUnspecifiedWindow = 2,XtUnspecifiedWindowGroup = 3,};
enum MACRO_XtVersionDontCheck {XtVersionDontCheck = 0,};
enum MACRO_XvBadExtension {XvBadExtension = 1,XvAlreadyGrabbed = 2,XvInvalidTime = 3,XvBadReply = 4,XvBadAlloc = 5,};
enum MACRO_XvBadPort {XvBadPort = 0,XvBadEncoding = 1,XvBadControl = 2,XvNumErrors = 3,};
enum MACRO_XvInput {XvInput = 0,XvOutput = 1,};
enum MACRO_XvInputMask {XvInputMask = 1,XvOutputMask = 2,};
enum MACRO_XvLastReason {XvLastReason = 4,XvNumReasons = 5,};
enum MACRO_XvNoReasonMask {XvNoReasonMask = 0,};
enum MACRO_XvNone {XvNone = 0,};
enum MACRO_XvRevision {XvRevision = 2,};
enum MACRO_XvStarted {XvStarted = 0,XvStopped = 1,XvBusy = 2,XvPreempted = 3,XvHardError = 4,};
enum MACRO_XvStartedMask {XvStartedMask = 1,XvStoppedMask = 2,XvBusyMask = 4,XvPreemptedMask = 8,XvHardErrorMask = 16,XvAnyReasonMask = 31,};
enum MACRO_XvVersion {XvVersion = 2,};
enum MACRO_XvVideoNotify {XvVideoNotify = 0,XvPortNotify = 1,XvNumEvents = 2,};
enum MACRO_YES {YES = 1,};
enum MACRO_YP {YP_TRUE = 1,YP_NOMORE = 2,};
enum MACRO_YPBIND {YPBIND_ERR_ERR = 1,YPBIND_ERR_NOSERV = 2,YPBIND_ERR_RESC = 3,};
enum MACRO_YPBINDOLDVERS {YPBINDOLDVERS = 1,YPINTERTRY_TIME = 10,YPTOTAL_TIME = 30,};
enum MACRO_YPBINDPROC {YPBINDPROC_NULL = 0,YPBINDPROC_DOMAIN = 1,YPBINDPROC_SETDOM = 2,};
enum MACRO_YPBINDPROG {YPBINDPROG = 100007,};
enum MACRO_YPBINDVERS {YPBINDVERS = 2,YPBINDVERS_ORIG = 1,};
enum MACRO_YPERR {YPERR_BADARGS = 1,YPERR_RPC = 2,YPERR_DOMAIN = 3,YPERR_MAP = 4,YPERR_KEY = 5,YPERR_YPERR = 6,YPERR_RESRC = 7,YPERR_NOMORE = 8,YPERR_PMAP = 9,YPERR_YPBIND = 10,YPERR_YPSERV = 11,YPERR_NODOM = 12,YPERR_BADDB = 13,YPERR_VERS = 14,YPERR_ACCESS = 15,YPERR_BUSY = 16,};
enum MACRO_YPMAXDOMAIN {YPMAXDOMAIN = 64,};
enum MACRO_YPMAXMAP {YPMAXMAP = 64,YPMAXPEER = 256,YPMSGSZ = 1600,};
enum MACRO_YPMAXRECORD {YPMAXRECORD = 1024,};
enum MACRO_YPNOPORT {YPNOPORT = 0,};
enum MACRO_YPOLDPROC {YPOLDPROC_NULL = 0,YPOLDPROC_DOMAIN = 1,YPOLDPROC_DOMAIN_NONACK = 2,YPOLDPROC_MATCH = 3,YPOLDPROC_FIRST = 4,YPOLDPROC_NEXT = 5,YPOLDPROC_POLL = 6,YPOLDPROC_PUSH = 7,YPOLDPROC_PULL = 8,YPOLDPROC_GET = 9,};
enum MACRO_YPOLDVERS {YPOLDVERS = 1,};
enum MACRO_YPOP {YPOP_CHANGE = 1,YPOP_INSERT = 2,YPOP_DELETE = 3,YPOP_STORE = 4,};
enum MACRO_YPPASSWDPROC {YPPASSWDPROC_UPDATE = 1,};
enum MACRO_YPPASSWDPROG {YPPASSWDPROG = 100009,};
enum MACRO_YPPASSWDVERS {YPPASSWDVERS_ORIG = 1,};
enum MACRO_YPPASSWDVERS_0 {YPPASSWDVERS = 1,};
enum MACRO_YPPROC {YPPROC_NULL = 0,YPPROC_DOMAIN = 1,YPPROC_DOMAIN_NONACK = 2,YPPROC_MATCH = 3,YPPROC_FIRST = 4,YPPROC_NEXT = 5,YPPROC_XFR = 6,YPPROC_CLEAR = 7,YPPROC_ALL = 8,YPPROC_MASTER = 9,YPPROC_ORDER = 10,YPPROC_MAPLIST = 11,};
enum MACRO_YPPROG {YPPROG = 100004,};
enum MACRO_YPPUSH {YPPUSH_SUCC = 1,YPPUSH_AGE = 2,YPPUSH_NOMAP = -1,};
enum MACRO_YPPUSHPROC {YPPUSHPROC_NULL = 0,YPPUSHPROC_XFRRESP = 1,};
enum MACRO_YPPUSHVERS {YPPUSHVERS = 1,};
enum MACRO_YPPUSHVERS_ORIG {YPPUSHVERS_ORIG = 1,};
enum MACRO_YPPUSH_BADARGS {YPPUSH_BADARGS = -7,};
enum MACRO_YPPUSH_CLEAR {YPPUSH_CLEAR = -11,};
enum MACRO_YPPUSH_DBM {YPPUSH_DBM = -8,};
enum MACRO_YPPUSH_FILE {YPPUSH_FILE = -9,};
enum MACRO_YPPUSH_FORCE {YPPUSH_FORCE = -12,};
enum MACRO_YPPUSH_MADDR {YPPUSH_MADDR = -5,};
enum MACRO_YPPUSH_NODOM {YPPUSH_NODOM = -2,};
enum MACRO_YPPUSH_REFUSED {YPPUSH_REFUSED = -14,};
enum MACRO_YPPUSH_RPC {YPPUSH_RPC = -4,};
enum MACRO_YPPUSH_RSRC {YPPUSH_RSRC = -3,};
enum MACRO_YPPUSH_SKEW {YPPUSH_SKEW = -10,};
enum MACRO_YPPUSH_XFRERR {YPPUSH_XFRERR = -13,};
enum MACRO_YPPUSH_YPERR {YPPUSH_YPERR = -6,};
enum MACRO_YPU {YPU_VERS = 1,};
enum MACRO_YPU_CHANGE {YPU_CHANGE = 1,YPU_INSERT = 2,YPU_DELETE = 3,YPU_STORE = 4,};
enum MACRO_YPVERS {YPVERS = 2,YPVERS_ORIG = 1,};
enum MACRO_YP_ACCESS {YP_ACCESS = -9,};
enum MACRO_YP_BADARGS {YP_BADARGS = -7,};
enum MACRO_YP_BADDB {YP_BADDB = -5,};
enum MACRO_YP_BADOP {YP_BADOP = -4,};
enum MACRO_YP_FALSE {YP_FALSE = 0,YP_NOMAP = -1,};
enum MACRO_YP_NODOM {YP_NODOM = -2,};
enum MACRO_YP_NOKEY {YP_NOKEY = -3,};
enum MACRO_YP_VERS {YP_VERS = -8,};
enum MACRO_YP_YPERR {YP_YPERR = -6,};
enum MACRO_ZERO {ZERO = 0,ONE = 1,TWO = 2,THREE = 3,FOUR = 4,FIVE = 5,SIX = 6,SEVEN = 7,EIGHT = 8,NINE = 9,TEN = 10,};
enum MACRO_ZLIB {ZLIB_STRCOMP_OPT_LEN = 7,};
enum MACRO_ZLIB_COMPRESS {ZLIB_COMPRESS_FLAG = 0x80,ZLIB_DATALEN_MASK = 0xF,};
enum MACRO_ZLIB_MAX {ZLIB_MAX_PLAIN = 270,ZLIB_MAX_OUTLEN = 540,};
enum MACRO_ZLIB_PACKET {ZLIB_PACKET_HDRLEN = 2,ZLIB_MAX_DATALEN = 4095,};
enum MACRO__ {__WCHAR_T_LEN = 4,};
enum MACRO__AES {_AES_OS_VERSION = 1,_SC_MAJ_NUM_SHIFT = 53,};
enum MACRO__APPID {_APPID_SZ = 128,};
enum MACRO__BLANK {_BLANK = -3,};
enum MACRO__BLNKCHAR {_BLNKCHAR = 32,};
enum MACRO__CDFS {_CDFS_RRIP_INCLUDE = 1,};
enum MACRO__CDFS_SUSP {_CDFS_SUSP_INCLUDE = 1,};
enum MACRO__CDFS_XCDR {_CDFS_XCDR_INCLUDE = 1,_STDID_SZ = 5,_SYSID_SZ = 32,};
enum MACRO__CMA {_CMA__CC = 1,_CMA__VAXC = 2,_CMA__DECC = 3,_CMA__CFRONT = 4,_CMA__GCC = 5,_CMA__DECCPLUS = 6,_CMA__GCPLUS = 7,_CMA__MSC = 8,};
enum MACRO__CMA_ {_CMA__MIPS = 1,_CMA__VAX = 2,_CMA__ALPHA = 3,_CMA__X86 = 4,_CMA__IA64 = 5,};
enum MACRO__CMA_COMPILER {_CMA_COMPILER_ = 1,};
enum MACRO__CMA_HARDWARE {_CMA_HARDWARE_ = 3,};
enum MACRO__CMA_OS {_CMA_OS_ = 1,};
enum MACRO__CMA_OSIMPL {_CMA_OSIMPL_ = 1,};
enum MACRO__CMA_POSIX {_CMA_POSIX_SCHED_ = 1,};
enum MACRO__CMA_PROTO {_CMA_PROTO_ = 1,};
enum MACRO__CMA_REENTRANT {_CMA_REENTRANT_CLIB_ = 1,};
enum MACRO__CMA_RT4 {_CMA_RT4_KTHREAD_ = 1,};
enum MACRO__CMA_TIS {_CMA_TIS__OSF = 1,_CMA_TIS__VMS = 2,};
enum MACRO__CMA_TIS_ {_CMA_TIS__ALPHA = 1,_CMA_TIS__VAX = 2,_CMA_TIS__X86 = 3,_CMA_TIS__IA64 = 4,};
enum MACRO__CMA_TIS_HARDWARE {_CMA_TIS_HARDWARE_ = 1,};
enum MACRO__CMA_TIS_OS {_CMA_TIS_OS_ = 1,};
enum MACRO__CMA_VOID {_CMA_VOID_ = 1,};
enum MACRO__CMA_VSSCANF {_CMA_VSSCANF_ = 0,};
enum MACRO__CMA__ALPHA {_CMA__ALPHA_NT = 6,_CMA__X86_WIN32 = 7,};
enum MACRO__CMA__IA64 {_CMA__IA64_NT = 9,_CMA_PLATFORM_ = 4,_CMA__OS_OSF = 1,};
enum MACRO__CMA__MIPS {_CMA__MIPS_UNIX = 1,_CMA__VAX_VMS = 2,_CMA__VAX_UNIX = 3,_CMA__ALPHA_UNIX = 4,_CMA__ALPHA_VMS = 5,_CMA__ALPHA_WIN32 = 6,};
enum MACRO__CMA__NONE {_CMA__NONE = 0,_CMA__MACH = 1,_CMA__NTTHREADS = 2,};
enum MACRO__CMA__NT {_CMA__NT = 3,};
enum MACRO__CMA__OS {_CMA__OS_BSD = 2,_CMA__OS_SYSV = 3,};
enum MACRO__CMA__UNIX {_CMA__UNIX = 1,_CMA__VMS = 2,_CMA__WIN32 = 3,};
enum MACRO__CMA__X86 {_CMA__X86_NT = 7,_CMA__IA64_UNIX = 8,_CMA__IA64_WIN32 = 9,};
enum MACRO__COLL {_COLL_COLELM_1ARRAY_MASK = 0x1,_COLL_COLELM_TRIE_MASK = 0x2,};
enum MACRO__COLL_FORWARD {_COLL_FORWARD_MASK = 0x1,_COLL_BACKWARD_MASK = 0x2,_COLL_NOSUBS_MASK = 0x4,_COLL_POSITION_MASK = 0x8,_COLL_CHAR_ORDER_MASK = 0x10,};
enum MACRO__COLL_VERSION {_COLL_VERSION = 0x1,};
enum MACRO__CS {_CS_PATH = 1,_CS_SYSTEM_BANNER = 2,_CS_VENDOR_NAME = 3,_CS_PRODUCT_NAME = 4,_CS_SYSTEM_VERSION = 5,_CS_VENDOR_ABBREV = 6,};
enum MACRO__CSEM {_CSEM_SLEEP = 1,_CSEM_WAKEUP = 2,_CSEM_TIMING0 = 3,_CSEM_TIMING1 = 4,_CSEM_TIMING2 = 5,_CSEM_TIMING3 = 6,};
enum MACRO__CTYPE {_CTYPE_MAX_CHARCLASSES = 255,};
enum MACRO__DBM {_DBM_RDONLY = 0x1,_DBM_IOERR = 0x2,};
enum MACRO__DECTHREADS {_DECTHREADS_ = 315000,};
enum MACRO__DECTHREADS_VERSION {_DECTHREADS_VERSION = 316023,};
enum MACRO__DIRID {_DIRID_SZ = 31,_DR_SYSUSE_SZ = 218,};
enum MACRO__DTPRE {_DTPRE_SZ = 128,};
enum MACRO__ESIZE {_ESIZE = 512,};
enum MACRO__FATAL {_FATAL_H_ = 1,FTLMSG = 32768,};
enum MACRO__FEXPLEN {_FEXPLEN = 8,};
enum MACRO__FILID {_FILID_SZ = 37,_APPUSE_SZ = 512,_RES2_SZ = 653,};
enum MACRO__HIDDENBIT {_HIDDENBIT = 1,};
enum MACRO__IEEE {_IEEE = 1,_DEXPLEN = 11,};
enum MACRO__INFINITY {_INFINITY = 16000,};
enum MACRO__INIFADDR {_INIFADDR_MAX_HEXP = 9,_INIFADDR_MIN_HEXP = 4,};
enum MACRO__INIFADDRHEXP {_INIFADDRHEXP = 5,};
enum MACRO__IOC {_IOC_VOID = 0x20000000,_IOC_OUT = 0x40000000,_IOC_IN = 0x80000000,_IOC_INOUT = 0xC0000000,_IOC_DIRMASK = 0xE0000000,};
enum MACRO__IOFBF {_IOFBF = 0x0,_IOLBF = 0x80,};
enum MACRO__IONBF {_IONBF = 0x4,EOF = 0xFFFFFFFF,};
enum MACRO__IONOFD {_IONOFD = 64,_IORW = 256,_IOUNGETC = 512,_IOINUSE = 1024,_IONONSTD = 2048,_IOCLOSE = 4096,_IOWINIT = 8192,_IOWSET = 16384,};
enum MACRO__IOREAD {_IOREAD = 0x1,_IOWRT = 0x2,_IOMYBUF = 0x8,_IOSTRG = 0x40,};
enum MACRO__ISALPHA {_ISALPHA = 0x1,_ISALNUM = 0x2,_ISBLANK = 0x4,_ISCNTRL = 0x8,_ISDIGIT = 0x10,_ISGRAPH = 0x20,_ISLOWER = 0x40,_ISPRINT = 0x80,_ISPUNCT = 0x100,_ISSPACE = 0x200,_ISUPPER = 0x400,_ISXDIGIT = 0x800,};
enum MACRO__ISO {_ISO_DTLEN = 17,CD_PVDLEN = 2048,};
enum MACRO__ISPAD {_ISPAD = 0x1,_WINCHANGED = 0x2,_WINMOVED = 0x4,_WINSDEL = 0x8,_CANT_BE_IMMED = 0x10,_WIN_ADD_ONE = 0x20,_WIN_INS_ONE = 0x64,};
enum MACRO__JBLEN {_JBLEN = 84,};
enum MACRO__KEY {_KEY = 0x1,_MACRO = 0x2,BUFMAX = 0x400,};
enum MACRO__LC {_LC_DENSE_FORMAT = 0x0,_LC_UCS4_FORMAT = 0x1,_LC_MAGIC = 0x5F1,};
enum MACRO__LC_ICONV {_LC_ICONV = 10,};
enum MACRO__LC_VERSION {_LC_VERSION = 0x2,};
enum MACRO__LIB {_LIB_MACH_ERROR_H_ = 1,};
enum MACRO__LIBDL {_LIBDL_RLD_DLOPEN = 1,_LIBDL_RLD_DLCLOSE = 2,_LIBDL_RLD_DLSYM = 3,_LIBDL_RLD_DLERROR = 4,};
enum MACRO__LINK {_LINK_MAX_V3 = 32767,};
enum MACRO__LastCategory {_LastCategory = 5,};
enum MACRO__MACH {_MACH_ALPHA_VM_TYPES_H_ = 1,};
enum MACRO__MACHINE {_MACHINE_VMPARAM_H_ = 1,};
enum MACRO__MACH_INIT {_MACH_INIT_H_ = 1,};
enum MACRO__MAX {_MAX_NUM_PT = 10,};
enum MACRO__MAXADDRS {_MAXADDRS = 35,_HOSTBUFSIZE = 8193,};
enum MACRO__MAXALIASES {_MAXALIASES = 35,_MAXLINELEN = 1024,};
enum MACRO__MIPS {_MIPS_NSCNS_MAX = 35,};
enum MACRO__NBRA {_NBRA = 9,_BIGRANGE = 11,_BADNUM = 16,_BIGDIGIT = 25,_NODELIM = 36,_NOMATCHSTR = 41,_BADPAREN = 42,_BIGPAREN = 43,_SYNBRACEFMT = 44,_NOCLOSEBRACE = 45,_SEMBRACEFMT = 46,_BADBRACKET = 49,_BIGREGEXP = 50,_ABNORMAL = 99,};
enum MACRO__NL {_NL_NUM_ITEMS = 61,};
enum MACRO__NL_OLD {_NL_OLD_SIZE = 55,_LC_MAX_OBJECTS = 256,};
enum MACRO__NSCNS {_NSCNS_MAX = 35,S_NEWFCN = 256,};
enum MACRO__NUM {_NUM_CLASSES = 12,};
enum MACRO__O {_O_L_cuserid = 9,L_cuserid = 64,};
enum MACRO__PC {_PC_CHOWN_RESTRICTED = 10,_PC_LINK_MAX = 11,_PC_MAX_CANON = 12,_PC_MAX_INPUT = 13,_PC_NAME_MAX = 14,_PC_NO_TRUNC = 15,_PC_PATH_MAX = 16,_PC_PIPE_BUF = 17,_PC_VDISABLE = 18,_PC_ASYNC_IO = 19,_PC_SYNC_IO = 20,_PC_PRIO_IO = -1,};
enum MACRO__PC_ERROR {_PC_ERROR = 0,};
enum MACRO__PC_LAST {_PC_LAST = 9,};
enum MACRO__POSIX {_POSIX_C_SOURCE = 199506,};
enum MACRO__POSIX2 {_POSIX2_BC_SCALE_MAX = 99,_POSIX2_BC_STRING_MAX = 1000,};
enum MACRO__POSIX2_C {_POSIX2_C_BIND = 1,};
enum MACRO__POSIX2_CHAR {_POSIX2_CHAR_TERM = 1,};
enum MACRO__POSIX2_COLL {_POSIX2_COLL_WEIGHTS_MAX = 2,_POSIX2_EXPR_NEST_MAX = 32,_POSIX2_LINE_MAX = 2048,};
enum MACRO__POSIX2_C_DEV {_POSIX2_C_DEV = 1,};
enum MACRO__POSIX2_LOCALEDEF {_POSIX2_LOCALEDEF = 1,};
enum MACRO__POSIX2_RE {_POSIX2_RE_DUP_MAX = 255,};
enum MACRO__POSIX2_SW {_POSIX2_SW_DEV = 1,};
enum MACRO__POSIX2_UPE {_POSIX2_UPE = 1,_POSIX2_C_VERSION = 199209,};
enum MACRO__POSIX2_VERSION {_POSIX2_VERSION = 199209,};
enum MACRO__POSIX_AIO {_POSIX_AIO_LISTIO_MAX = 2,_POSIX_AIO_MAX = 1,};
enum MACRO__POSIX_ASYNC {_POSIX_ASYNC_IO = 1,_POSIX_SYNC_IO = 2,_PC_ACL_EXTENDED = 23,};
enum MACRO__POSIX_CHILD {_POSIX_CHILD_MAX = 6,_POSIX_LINK_MAX = 8,_POSIX_MAX_CANON = 255,};
enum MACRO__POSIX_CHOWN {_POSIX_CHOWN_RESTRICTED = 0,_POSIX_NO_TRUNC = 0,};
enum MACRO__POSIX_CLOCKDRIFT {_POSIX_CLOCKDRIFT_MAX = 10000000,_POSIX_CLOCKRES_MIN = 20000000,};
enum MACRO__POSIX_DELAYTIMER {_POSIX_DELAYTIMER_MAX = 32,_POSIX_INTERVAL_MAX = 1092,};
enum MACRO__POSIX_JOB {_POSIX_JOB_CONTROL = 1,};
enum MACRO__POSIX_LOGIN {_POSIX_LOGIN_NAME_MAX = 9,};
enum MACRO__POSIX_MAX {_POSIX_MAX_INPUT = 255,};
enum MACRO__POSIX_MQ {_POSIX_MQ_PRIO_MAX = 32,};
enum MACRO__POSIX_NAME {_POSIX_NAME_MAX = 14,_POSIX_NGROUPS_MAX = 0,};
enum MACRO__POSIX_OPEN {_POSIX_OPEN_MAX = 16,_POSIX_PATH_MAX = 255,_POSIX_PIPE_BUF = 512,_POSIX_SSIZE_MAX = 32767,};
enum MACRO__POSIX_SAVED {_POSIX_SAVED_IDS = 1,};
enum MACRO__POSIX_SEM {_POSIX_SEM_NSEMS_MAX = 256,_POSIX_SEM_VALUE_MAX = 32767,};
enum MACRO__POSIX_SIGQUEUE {_POSIX_SIGQUEUE_MAX = 32,_POSIX_RTSIG_MAX = 8,_POSIX_THREAD_DESTRUCTOR_ITERATIONS = 4,};
enum MACRO__POSIX_STREAM {_POSIX_STREAM_MAX = 8,_POSIX_TZNAME_MAX = 3,};
enum MACRO__POSIX_THREAD {_POSIX_THREAD_KEYS_MAX = 128,_POSIX_THREAD_THREADS_MAX = 64,};
enum MACRO__POSIX_THREADS {_POSIX_THREADS_REALTIME_SCHEDULING = 1,};
enum MACRO__POSIX_THREADS_PER {_POSIX_THREADS_PER_PROCESS_SIGNALS_1 = 1,};
enum MACRO__POSIX_TIMER {_POSIX_TIMER_MAX = 32,_POSIX_MQ_OPEN_MAX = 8,};
enum MACRO__POSIX_TTY {_POSIX_TTY_NAME_MAX = 9,_POSIX2_BC_BASE_MAX = 99,_POSIX2_BC_DIM_MAX = 2048,};
enum MACRO__POSIX_VDISABLE {_POSIX_VDISABLE = 0xFF,};
enum MACRO__PROF {_PROF_TYPE_IS_P = -1,};
enum MACRO__PROF_TYPE {_PROF_TYPE_IS_PG = 1,_PROF_TYPE_IS_NONE = 0,};
enum MACRO__PSX4 {_PSX4_NSPACE_H_TS = 1,};
enum MACRO__PTHREAD {_PTHREAD_EXC_NEWMAGIC = 0x45586732,_PTHREAD_EXC_THDBASE = 0x45586733,};
enum MACRO__PTHREAD_CSTATE {_PTHREAD_CSTATE_SLOW = 0x200000,_PTHREAD_CVALID = 0x6FACBD1,};
enum MACRO__PTHREAD_CVF {_PTHREAD_CVF_STA = 0x8000000,};
enum MACRO__PTHREAD_EXC {_PTHREAD_EXC_VER_V2 = 2,_PTHREAD_EXC_VER_V3 = 3,_PTHREAD_EXC_VER_V4 = 4,};
enum MACRO__PTHREAD_EXC_CTX {_PTHREAD_EXC_CTX_V2 = 2,_PTHREAD_EXC_CTX_V3 = 3,_PTHREAD_EXC_CTX_V4 = 4,_PTHREAD_EXC_CTX_V5 = 5,};
enum MACRO__PTHREAD_EXC_CTX_CUR {_PTHREAD_EXC_CTX_CUR = 2,};
enum MACRO__PTHREAD_EXC_FLG {_PTHREAD_EXC_FLG_NATEXC = 0x1,_PTHREAD_EXC_FLG_HEAPARG = 0x2,_PTHREAD_EXC_ARGS = 0x5,};
enum MACRO__PTHREAD_EXC_VER {_PTHREAD_EXC_VER_CUR = 2,_PTHREAD_EXC_FACILITY = 394113024,};
enum MACRO__PTHREAD_MTYPE {_PTHREAD_MTYPE_NORMAL = 0x0,_PTHREAD_MTYPE_RECURS = 0x1000000,_PTHREAD_MTYPE_ERRCHK = 0x2000000,};
enum MACRO__PTHREAD_MVALID {_PTHREAD_MVALID = 0x5BCAFE1,_PTHREAD_PVALID = 0xDEADBEEF,};
enum MACRO__PTHREAD_MVF {_PTHREAD_MVF_STA = 0x8000000,_PTHREAD_MVF_INT = 0x10000000,_PTHREAD_MVF_PRE = 0x20000000,_PTHREAD_MVF_INL = 0x40000000,_PTHREAD_MVF_NAM = 0x80000000,};
enum MACRO__PTHREAD_RWVALID {_PTHREAD_RWVALID = 0x2BACAB1,_PTHREAD_CAVALID = 0xACEFACE1,_PTHREAD_MAVALID = 0xECAFECA1,};
enum MACRO__PTHREAD_RWVF {_PTHREAD_RWVF_STA = 0x8000000,_PTHREAD_RWVF_INT = 0x10000000,_PTHREAD_RWVF_PRE = 0x20000000,_PTHREAD_RWVF_INL = 0x40000000,_PTHREAD_RWVF_NAM = 0x80000000,};
enum MACRO__PTHREAD_TAVALID {_PTHREAD_TAVALID = 0xBEEFEED1,};
enum MACRO__PTHREAD_USE {_PTHREAD_USE_MANGLED_NAMES_ = 1,};
enum MACRO__PUBID {_PUBID_SZ = 128,};
enum MACRO__REDRAW {_REDRAW = -2,};
enum MACRO__REENTRANT {_REENTRANT = 1,};
enum MACRO__REG {_REG_SUBEXP_MAX = 49,};
enum MACRO__RLD {_RLD_OP_NONE = 0,_RLD_OP_INSERT = 1,_RLD_OP_ADD = 2,_RLD_OP_DELETE = 3,_RLD_OP_REPLACE = 4,};
enum MACRO__RLD_CONNECT {_RLD_CONNECT_VERSION1 = 1,_RLD_CONNECT_VERSION2 = 2,_RLD_CONNECT_VERSION3 = 3,_RLD_LDR_SBRK = -1,};
enum MACRO__RLD_CONNECT_STATIC {_RLD_CONNECT_STATIC = -18,};
enum MACRO__RLD_LDR {_RLD_LDR_BRK = -2,};
enum MACRO__RLD_LDR_CONTEXT {_RLD_LDR_CONTEXT_ATEXIT = -3,};
enum MACRO__RLD_LDR_CONTEXT_GET {_RLD_LDR_CONTEXT_GET_ENTRY_PT = -12,};
enum MACRO__RLD_LDR_CONTEXT_INQ {_RLD_LDR_CONTEXT_INQ_REGION = -6,};
enum MACRO__RLD_LDR_CONTEXT_INQ_MODULE {_RLD_LDR_CONTEXT_INQ_MODULE = -7,};
enum MACRO__RLD_LDR_CONTEXT_INSTALL {_RLD_LDR_CONTEXT_INSTALL = -5,};
enum MACRO__RLD_LDR_CONTEXT_LOAD {_RLD_LDR_CONTEXT_LOAD = -13,};
enum MACRO__RLD_LDR_CONTEXT_LOOKUP {_RLD_LDR_CONTEXT_LOOKUP_PACKAGE = -9,};
enum MACRO__RLD_LDR_CONTEXT_LOOKUP_0 {_RLD_LDR_CONTEXT_LOOKUP = -10,};
enum MACRO__RLD_LDR_CONTEXT_NEXT {_RLD_LDR_CONTEXT_NEXT_MODULE = -8,};
enum MACRO__RLD_LDR_CONTEXT_REMOVE {_RLD_LDR_CONTEXT_REMOVE = -4,};
enum MACRO__RLD_LDR_CONTEXT_UNLOAD {_RLD_LDR_CONTEXT_UNLOAD = -11,};
enum MACRO__RLD_LDR_DLCLOSE {_RLD_LDR_DLCLOSE = -17,};
enum MACRO__RLD_LDR_DLERROR {_RLD_LDR_DLERROR = -16,};
enum MACRO__RLD_LDR_DLOPEN {_RLD_LDR_DLOPEN = -14,};
enum MACRO__RLD_LDR_DLSYM {_RLD_LDR_DLSYM = -15,};
enum MACRO__RLD_SET {_RLD_SET_TLSKEY = -19,};
enum MACRO__SBFSIZ {_SBFSIZ = 8,};
enum MACRO__SC {_SC_4VERSION = 100,_SC_LISTIO_AIO_MAX = 101,_SC_AIO_MAX = 102,_SC_CLOCKDRIFT_MAX = 103,_SC_DELAYTIMER_MAX = 104,_SC_RTSIG_MAX = 105,_SC_SEM_NAME_MAX = 106,_SC_SEM_NSEMS_MAX = 107,_SC_TIMER_MAX = 109,_SC_ASYNCHRONOUS_IO = 110,_SC_FSYNC = 112,_SC_MAPPED_FILES = 113,_SC_MEMLOCK = 114,_SC_MEMLOCK_RANGE = 115,_SC_MEMORY_PROTECTION = 116,_SC_MESSAGE_PASSING = 117,_SC_PRIORITIZED_IO = 118,_SC_PRIORITY_SCHEDULING = 119,_SC_REALTIME_SIGNALS = 121,_SC_SHARED_MEMORY_OBJECTS = 122,_SC_SYNCHRONIZED_IO = 123,_SC_TIMERS = 124,_SC_SEMAPHORES = 125,_SC_SEM_VALUE_MAX = 126,_SC_MQ_OPEN_MAX = 127,_SC_MQ_PRIO_MAX = 128,_SC_SIGQUEUE_MAX = 130,_SC_RTSIG_LOW = 131,_SC_RTSIG_HI = 132,_SC_NPROC_CONF = 200,};
enum MACRO__SCHED {_SCHED_H_ = 1,};
enum MACRO__SCHED_MIN {_SCHED_MIN = 1,_SCHED_MAX = 6,SCHED_PRIO_RT_MAX = 63,};
enum MACRO__SC_AES {_SC_AES_OS_VERSION = 12,};
enum MACRO__SC_ARG {_SC_ARG_MAX = 1,_SC_CHILD_MAX = 2,_SC_CLK_TCK = 3,_SC_JOB_CONTROL = 4,_SC_NGROUPS_MAX = 5,_SC_OPEN_MAX = 6,_SC_SAVED_IDS = 8,_SC_VERSION = 9,_SC_STREAM_MAX = 13,_SC_TZNAME_MAX = 14,_SC_BC_BASE_MAX = 15,_SC_BC_DIM_MAX = 16,_SC_BC_SCALE_MAX = 17,_SC_BC_STRING_MAX = 18,_SC_COLL_WEIGHTS_MAX = 20,_SC_EXPR_NEST_MAX = 21,_SC_LINE_MAX = 22,_SC_2_C_DEV = 23,_SC_2_FORT_DEV = 24,_SC_2_FORT_RUN = 25,_SC_2_LOCALEDEF = 26,_SC_2_SW_DEV = 27,_SC_2_VERSION = 28,_SC_RE_DUP_MAX = 29,_SC_THREAD_MAX = 34,_SC_TASK_MAX = 35,_SC_MAXUTHREADS = 36,_SC_STACK_SIZE = 37,_SC_STACK_SIZE_MAX = 38,_SC_DATA_SIZE = 39,_SC_DATA_SIZE_MAX = 40,_SC_ADDR_SPACE = 41,_SC_ADDR_SPACE_MAX = 42,_SC_2_UPE = 47,_SC_XOPEN_CRYPT = 48,_SC_XOPEN_ENH_I18N = 49,_SC_XOPEN_SHM = 50,_SC_XOPEN_XCU_VERSION = 51,_SC_2_C_BIND = 52,_SC_2_C_VERSION = 53,_SC_2_CHAR_TERM = 54,_SC_XOPEN_UNIX = 55,_SC_IOV_MAX = 56,};
enum MACRO__SC_NPROCESSORS {_SC_NPROCESSORS_CONF = 200,_SC_NPROC_ONLN = 201,};
enum MACRO__SC_NPROCESSORS_ONLN {_SC_NPROCESSORS_ONLN = 201,_SC_THREAD_DESTRUCTOR_ITERATIONS = 210,_SC_THREAD_KEYS_MAX = 211,_SC_THREAD_STACK_MIN = 212,_SC_THREAD_THREADS_MAX = 213,_SC_THREADS = 214,_SC_THREAD_SAFE_FUNCTIONS = 215,_SC_THREAD_ATTR_STACKSIZE = 216,_SC_THREAD_PRIORITY_SCHEDULING = 217,_SC_GETGR_R_SIZE_MAX = 218,_SC_GETPW_R_SIZE_MAX = 219,_SC_LOGIN_NAME_MAX = 220,_SC_TTY_NAME_MAX = 221,_SC_THREAD_ATTR_STACKADDR = 222,_SC_THREAD_PRIO_INHERIT = 223,_SC_THREAD_PRIO_PROTECT = 224,_SC_THREAD_PROCESS_SHARED = 225,};
enum MACRO__SC_PASS {_SC_PASS_MAX = 7,_SC_XOPEN_VERSION = 19,};
enum MACRO__SC_T {_SC_T_IOV_MAX = 1,T_UNSPEC = -3,};
enum MACRO__SEMAPHORE {_SEMAPHORE_H = 1,};
enum MACRO__SHUT {_SHUT_DOWN = 0,_RLD_FIRST_PATHNAME = 1,_RLD_NEXT_PATHNAME = 2,_RLD_MODIFY_LIST = 3,_RLD_ADDR_TO_NAME = 4,_RLD_NAME_TO_ADDR = 5,};
enum MACRO__SIA {_SIA_MAX_REQUIRED = 22,SIA_GET_GROUPS = 23,};
enum MACRO__SIA_GET {_SIA_GET_GROUPS = 16,SIA_SES_TOGGLE_PRIVS = 24,};
enum MACRO__SIA_SES {_SIA_SES_TOGGLE_PRIVS = 2,SIA_SES_UPDATE_AUDIT_RECORD = 25,};
enum MACRO__SIA_SES_UPDATE {_SIA_SES_UPDATE_AUDIT_RECORD = 2,SIA_TEST_NEWPASS = 26,};
enum MACRO__SIA_TEST {_SIA_TEST_NEWPASS = 2,SIA_UPDATE_PASS = 27,};
enum MACRO__SIA_UPDATE {_SIA_UPDATE_PASS = 2,};
enum MACRO__STANDOUT {_STANDOUT = 65536,A_UNDERLINE = 131072,A_REVERSE = 262144,A_BLINK = 524288,A_DIM = 1048576,A_BOLD = 2097152,A_ALTCHARSET = 16777216,};
enum MACRO__SUBS {_SUBS_ACTIVE = 1,_SUBS_REGEXP = 2,_CTYPE_NUM_MASK_BITS = 28,_CTYPE_ROW_MASK = -268435456,};
enum MACRO__SYS {_SYS_NMLN = 32,};
enum MACRO__SYSUSE {_SYSUSE_SZ = 64,};
enum MACRO__SYS_CDROM {_SYS_CDROM_INCLUDE = 1,};
enum MACRO__SYS_TIMEX {_SYS_TIMEX_H_ = 1,SHIFT_KG = 6,SHIFT_KF = 16,};
enum MACRO__TCBHASHSIZE {_TCBHASHSIZE = 512,TCP_SENDSPACE = 32768,};
enum MACRO__THASH {_THASH = 123,};
enum MACRO__TIS {_TIS_VERSION = 315219,};
enum MACRO__TIS_ {_TIS__OSF = 1,_TIS__VMS = 2,};
enum MACRO__TIS_HARDWARE {_TIS_HARDWARE_ = 1,TIS_RWLOCK_VALID = -1091835199,};
enum MACRO__TIS_OS {_TIS_OS_ = 1,};
enum MACRO__TIS__ALPHA {_TIS__ALPHA = 1,_TIS__VAX = 2,_TIS__IA64 = 3,};
enum MACRO__USING {_USING_PROTOTYPES_ = 1,};
enum MACRO__VGAINFO {_VGAINFO_H_ = 1,};
enum MACRO__VOLID {_VOLID_SZ = 32,_ROOTDIR_SZ = 34,_VSID_SZ = 128,};
enum MACRO__WAITC {_WAITC_FREE = 0,_WAITC_IN = 1,_WAITC_ADD = 2,_WAITC_INS = 3,_NOCHANGE = -1,};
enum MACRO__XBS5 {_XBS5_LP64_OFF64 = 1,};
enum MACRO__XBS5_LPBIG {_XBS5_LPBIG_OFFBIG = 1,};
enum MACRO__XKB {_XKB_RF_NAMES_PROP_MAXLEN = 1024,};
enum MACRO__XKBBELLS {_XKBBELLS_H_ = 1,};
enum MACRO__XKBCONFIG {_XKBCONFIG_H_ = 1,};
enum MACRO__XKBFILE {_XKBFILE_H_ = 1,};
enum MACRO__XKBRULES {_XKBRULES_H_ = 1,XkbRF_PendingMatch = 2,XkbRF_Delayed = 4,XkbRF_Append = 8,XkbRF_Invalid = 16,};
enum MACRO__XKMFORMAT {_XKMFORMAT_H_ = 1,sz_xkmFileInfo = 8,};
enum MACRO__XOPEN {_XOPEN_SOURCE = 400,};
enum MACRO__XOPEN_ENH {_XOPEN_ENH_I18N = 1,};
enum MACRO__XOPEN_SHM {_XOPEN_SHM = 1,};
enum MACRO__XOPEN_UNIX {_XOPEN_UNIX = 1,};
enum MACRO__XOPEN_VERSION {_XOPEN_VERSION = 4,};
enum MACRO__XOPEN_XCU {_XOPEN_XCU_VERSION = 4,};
enum MACRO__XOPEN_XPG4 {_XOPEN_XPG4 = 4,_XOPEN_CRYPT = 1,};
enum MACRO__XkbKSLower {_XkbKSLower = 1,_XkbKSUpper = 2,};
enum MACRO__XkbSuccess {_XkbSuccess = 0,_XkbErrMissingNames = 1,_XkbErrMissingTypes = 2,_XkbErrMissingReqTypes = 3,_XkbErrMissingSymbols = 4,_XkbErrMissingVMods = 5,_XkbErrMissingIndicators = 6,_XkbErrMissingCompatMap = 7,_XkbErrMissingSymInterps = 8,_XkbErrMissingGeometry = 9,_XkbErrIllegalDoodad = 10,_XkbErrIllegalTOCType = 11,_XkbErrIllegalContents = 12,_XkbErrEmptyFile = 13,_XkbErrFileNotFound = 14,_XkbErrFileCannotOpen = 15,_XkbErrBadValue = 16,_XkbErrBadMatch = 17,_XkbErrBadTypeName = 18,_XkbErrBadTypeWidth = 19,_XkbErrBadFileType = 20,_XkbErrBadFileVersion = 21,_XkbErrBadFileFormat = 22,_XkbErrBadAlloc = 23,_XkbErrBadLength = 24,_XkbErrXReqFailure = 25,_XkbErrBadImplementation = 26,};
enum MACRO__XmRAW {_XmRAW_MAP = 0,_XmPOPUP_MAP = 1,_XmMANAGE_MAP = 2,};
enum MACRO__XtShellPositionValid {_XtShellPositionValid = 1,_XtShellNotReparented = 2,_XtShellPPositionOK = 4,_XtShellGeometryParsed = 8,};
enum MACRO__ZLC {_ZLC_MOD_MAX = 5,};
enum MACRO___AUDIT {__AUDIT__ = 1,};
enum MACRO___BIND {__BIND = 19950621,};
enum MACRO___NAMESER {__NAMESER = 19961001,};
enum MACRO___RES {__RES = 19960801,};
enum MACRO___SEC {__SEC_OBJECTS__ = 1,};
enum MACRO___UT {__UT_TMP_NAMESIZE = 64,__UT_TMP_HOSTSIZE = 256,};
enum MACRO___digital {__digital__ = 1,};
enum MACRO___dontcare {__dontcare__ = -1,};
enum MACRO__deviceButtonPress {_deviceButtonPress = 0,_deviceButtonRelease = 1,};
enum MACRO__deviceFocusIn {_deviceFocusIn = 0,_deviceFocusOut = 1,};
enum MACRO__deviceKeyPress {_deviceKeyPress = 0,_deviceKeyRelease = 1,};
enum MACRO__deviceMotionNotify {_deviceMotionNotify = 0,};
enum MACRO__devicePointerMotionHint {_devicePointerMotionHint = 0,_deviceButton1Motion = 1,_deviceButton2Motion = 2,_deviceButton3Motion = 3,_deviceButton4Motion = 4,_deviceButton5Motion = 5,_deviceButtonMotion = 6,_deviceButtonGrab = 7,_deviceOwnerGrabButton = 8,_noExtensionEvent = 9,};
enum MACRO__deviceStateNotify {_deviceStateNotify = 0,_deviceMappingNotify = 1,_changeDeviceNotify = 2,};
enum MACRO__proximityIn {_proximityIn = 0,_proximityOut = 1,};
enum MACRO_apXK {apXK_LineDel = 0x1000FF00,apXK_CharDel = 0x1000FF01,apXK_Copy = 0x1000FF02,apXK_Cut = 0x1000FF03,apXK_Paste = 0x1000FF04,apXK_Move = 0x1000FF05,apXK_Grow = 0x1000FF06,apXK_Cmd = 0x1000FF07,apXK_Shell = 0x1000FF08,apXK_LeftBar = 0x1000FF09,apXK_RightBar = 0x1000FF0A,apXK_LeftBox = 0x1000FF0B,apXK_RightBox = 0x1000FF0C,apXK_UpBox = 0x1000FF0D,apXK_DownBox = 0x1000FF0E,apXK_Pop = 0x1000FF0F,apXK_Read = 0x1000FF10,apXK_Edit = 0x1000FF11,apXK_Save = 0x1000FF12,apXK_Exit = 0x1000FF13,apXK_Repeat = 0x1000FF14,apXK_KP_parenleft = 0x1000FFA8,apXK_KP_parenright = 0x1000FFA9,};
enum MACRO_auxNil {auxNil = 0,iauxNil = -1,};
enum MACRO_btAdr {btAdr = 34,btInt64 = 35,btUInt64 = 36,btLDouble = 37,btInt8 = 38,btUInt8 = 39,btRange_64 = 41,btProc = 42,btChecksum = 63,btMax = 64,};
enum MACRO_btArrayDesc {btArrayDesc = 28,btClass = 29,btLong64 = 30,};
enum MACRO_btDecimal {btDecimal = 22,btString = 23,btBit = 24,btPicture = 25,btVoid = 26,btPtrMem = 27,};
enum MACRO_btFixedBin {btFixedBin = 21,btFloatDec = 22,};
enum MACRO_btInt {btInt = 6,btUInt32 = 7,};
enum MACRO_btLong {btLong = 30,btULong64 = 31,};
enum MACRO_btLongLong {btLongLong = 32,btULongLong64 = 33,};
enum MACRO_btNil {btNil = 0,btAdr32 = 1,btChar = 2,btUChar = 3,btShort = 4,btUShort = 5,btInt32 = 6,};
enum MACRO_btScaledBin {btScaledBin = 27,btVptr = 28,};
enum MACRO_btUInt {btUInt = 7,btLong32 = 8,btULong32 = 9,btFloat = 10,btDouble = 11,btStruct = 12,btUnion = 13,btEnum = 14,btTypedef = 15,btRange = 16,btSet = 17,btComplex = 18,btDComplex = 19,btIndirect = 20,btFixedDec = 21,};
enum MACRO_btULong {btULong = 31,btLongLong64 = 32,};
enum MACRO_btULongLong {btULongLong = 33,btAdr64 = 34,};
enum MACRO_cbOPTR {cbOPTR = 1,};
enum MACRO_cfdNil {cfdNil = 0,icfdNil = -1,};
enum MACRO_chdrNil {chdrNil = 0,ichdrNil = -1,};
enum MACRO_cma {cma_s_normal = 394113033,cma_s_alerted = 394113072,cma_s_exit_thread = 394113076,cma_s_stackovf = 394113081,cma_s_unimp = 394113085,};
enum MACRO_cma_c {cma_c_false = 0,cma_c_true = 1,};
enum MACRO_cma_c_null {cma_c_null_ptr = 0,cma_c_sched_fifo = 1,cma_c_sched_rr = 2,cma_c_sched_throughput = 3,cma_c_sched_background = 4,cma_c_sched_ada_low = 5,cma_c_sched_ada_rtb = 6,cma_c_prio_fifo_max = 21,};
enum MACRO_cma_c_prio {cma_c_prio_fifo_mid = 18,};
enum MACRO_cma_c_prio_ada {cma_c_prio_ada_low_max = 13,};
enum MACRO_cma_c_prio_ada_low {cma_c_prio_ada_low_mid = 8,cma_c_prio_ada_low_min = 0,};
enum MACRO_cma_c_prio_ada_rtb {cma_c_prio_ada_rtb_max = 13,};
enum MACRO_cma_c_prio_ada_rtb_mid {cma_c_prio_ada_rtb_mid = 8,cma_c_prio_ada_rtb_min = 0,};
enum MACRO_cma_c_prio_back {cma_c_prio_back_max = 13,};
enum MACRO_cma_c_prio_back_mid {cma_c_prio_back_mid = 8,cma_c_prio_back_min = 0,};
enum MACRO_cma_c_prio_fifo {cma_c_prio_fifo_min = 14,cma_c_prio_rr_max = 22,};
enum MACRO_cma_c_prio_rr {cma_c_prio_rr_mid = 19,};
enum MACRO_cma_c_prio_rr_min {cma_c_prio_rr_min = 15,cma_c_prio_through_max = 22,};
enum MACRO_cma_c_prio_through {cma_c_prio_through_mid = 19,};
enum MACRO_cma_c_prio_through_min {cma_c_prio_through_min = 15,};
enum MACRO_cma_c_sched {cma_c_sched_default = 3,};
enum MACRO_cma_c_sched_other {cma_c_sched_other = 3,cma_c_scope_process = 0,};
enum MACRO_cma_c_scope {cma_c_scope_system = 1,};
enum MACRO_cma_s {cma_s_assertion = 394113073,cma_s_badparam = 394113074,cma_s_bugcheck = 394113075,cma_s_existence = 394113077,cma_s_in_use = 394113078,cma_s_use_error = 394113079,cma_s_wrongmutex = 394113080,cma_s_nostackmem = 394113082,cma_s_notcmastack = 394113083,cma_s_timed_out = 394113084,cma_s_inialrpro = 394113086,cma_s_defer_q_full = 394113087,cma_s_signal_q_full = 394113088,cma_s_alert_nesting = 394113089,};
enum MACRO_code {code_emask = 0x3FFF,};
enum MACRO_decDecimal4 {decDecimal4 = 1,decDecimal8 = 2,};
enum MACRO_decw {decw_c_num_glyphs = 54,decw_c_select_cursor = 0,decw_c_leftselect_cursor = 0,};
enum MACRO_decw_c {decw_c_help_select_cursor = 2,decw_c_wait_cursor = 4,decw_c_inactive_cursor = 6,decw_c_resize_cursor = 8,decw_c_vpane_cursor = 10,decw_c_hpane_cursor = 12,decw_c_text_insertion_cursor = 14,decw_c_text_insertion_bl_cursor = 16,decw_c_cross_hair_cursor = 18,decw_c_draw_cursor = 20,decw_c_pencil_cursor = 22,};
enum MACRO_decw_c_rpencil {decw_c_rpencil_cursor = 22,decw_c_center_cursor = 24,decw_c_rightselect_cursor = 26,decw_c_wselect_cursor = 28,decw_c_eselect_cursor = 30,decw_c_x_cursor = 32,decw_c_circle_cursor = 34,decw_c_mouse_cursor = 36,decw_c_lpencil_cursor = 38,decw_c_leftgrab_cursor = 40,decw_c_grabhand_cursor = 42,decw_c_rightgrab_cursor = 44,decw_c_leftpointing_cursor = 46,decw_c_uppointing_cursor = 48,decw_c_rightpointing_cursor = 50,decw_c_check_cursor = 52,};
enum MACRO_dnNil {dnNil = 0,};
enum MACRO_err {err_kern = 0x0,err_us = 0x4000000,err_server = 0x8000000,err_ipc = 0xC000000,err_local = 0xF8000000,err_ipc_compat = 0xFC000000,};
enum MACRO_err_max {err_max_system = 0x3F,};
enum MACRO_exc {exc_newexc_c = 1163421490,};
enum MACRO_exc_curr {exc_curr_c = 2,exc_s_exception = 394113025,exc_s_exccop = 394113026,exc_s_uninitexc = 394113027,exc_s_unkstatus = 394113152,exc_s_exccoplos = 394113153,};
enum MACRO_exc_s {exc_s_illaddr = 394113029,exc_s_exquota = 394113030,exc_s_insfmem = 394113031,exc_s_nopriv = 394113032,exc_s_normal = 394113033,exc_s_illinstr = 394113034,exc_s_resaddr = 394113035,exc_s_privinst = 394113036,exc_s_resoper = 394113037,exc_s_SIGTRAP = 394113038,exc_s_SIGABRT = 394113039,exc_s_SIGEMT = 394113040,exc_s_aritherr = 394113041,exc_s_SIGSYS = 394113042,exc_s_SIGPIPE = 394113043,exc_s_excpu = 394113044,exc_s_exfilsiz = 394113045,exc_s_intovf = 394113046,exc_s_intdiv = 394113047,exc_s_fltovf = 394113048,exc_s_fltdiv = 394113049,exc_s_fltund = 394113050,exc_s_decovf = 394113051,exc_s_subrng = 394113052,};
enum MACRO_exc_s_SIGBUS {exc_s_SIGBUS = 394113029,};
enum MACRO_exc_s_SIGIOT {exc_s_SIGIOT = 394113039,};
enum MACRO_exc_s_SIGSEGV {exc_s_SIGSEGV = 394113029,exc_s_SIGXCPU = 394113044,exc_s_SIGXFSZ = 394113045,};
enum MACRO_exc_s_accvio {exc_s_accvio = 394113029,exc_s_SIGILL = 394113034,exc_s_SIGFPE = 394113041,};
enum MACRO_exc_v2exc {exc_v2exc_c = 2,exc_v3exc_c = 3,};
enum MACRO_extNil {extNil = 0,};
enum MACRO_fbinfo {fbinfo_DEFINED = 1,};
enum MACRO_fdNil {fdNil = 0,ifdNil = -1,};
enum MACRO_fiNil {fiNil = 0,};
enum MACRO_flti {flti_addsc = 0x0,flti_subsc = 0x1,flti_mulsc = 0x2,flti_divsc = 0x3,flti_addtc = 0x20,flti_subtc = 0x21,flti_multc = 0x22,flti_divtc = 0x23,flti_cvttsc = 0x2C,flti_cvttqc = 0x2F,flti_cvtqsc = 0x3C,flti_cvtqtc = 0x3E,flti_addsm = 0x40,flti_subsm = 0x41,flti_mulsm = 0x42,flti_divsm = 0x43,flti_addtm = 0x60,flti_subtm = 0x61,flti_multm = 0x62,flti_divtm = 0x63,flti_cvttsm = 0x6C,flti_cvttqm = 0x6F,flti_cvtqsm = 0x7C,flti_cvtqtm = 0x7E,flti_adds = 0x80,flti_subs = 0x81,flti_muls = 0x82,flti_divs = 0x83,flti_addt = 0xA0,flti_subt = 0xA1,flti_mult = 0xA2,flti_divt = 0xA3,flti_cmptun = 0xA4,flti_cmpteq = 0xA5,flti_cmptlt = 0xA6,flti_cmptle = 0xA7,flti_cvtts = 0xAC,flti_cvttq = 0xAF,flti_cvtqs = 0xBC,flti_cvtqt = 0xBE,flti_addsd = 0xC0,flti_subsd = 0xC1,flti_mulsd = 0xC2,flti_divsd = 0xC3,flti_addtd = 0xE0,flti_subtd = 0xE1,flti_multd = 0xE2,flti_divtd = 0xE3,flti_cvttsd = 0xEC,flti_cvttqd = 0xEF,flti_cvtqsd = 0xFC,flti_cvtqtd = 0xFE,flti_addsuc = 0x100,flti_subsuc = 0x101,flti_mulsuc = 0x102,flti_divsuc = 0x103,flti_addtuc = 0x120,flti_subtuc = 0x121,flti_multuc = 0x122,flti_divtuc = 0x123,flti_cvttsuc = 0x12C,flti_cvttqvc = 0x12F,flti_addsum = 0x140,flti_subsum = 0x141,flti_mulsum = 0x142,flti_divsum = 0x143,flti_addtum = 0x160,flti_subtum = 0x161,flti_multum = 0x162,flti_divtum = 0x163,flti_cvttsum = 0x16C,flti_cvttqvm = 0x16F,flti_addsu = 0x180,flti_subsu = 0x181,flti_mulsu = 0x182,flti_divsu = 0x183,flti_addtu = 0x1A0,flti_subtu = 0x1A1,flti_multu = 0x1A2,flti_divtu = 0x1A3,flti_cvttsu = 0x1AC,flti_cvttqv = 0x1AF,flti_addsud = 0x1C0,flti_subsud = 0x1C1,flti_mulsud = 0x1C2,flti_divsud = 0x1C3,flti_addtud = 0x1E0,flti_subtud = 0x1E1,flti_multud = 0x1E2,flti_divtud = 0x1E3,flti_cvttsud = 0x1EC,flti_cvttqvd = 0x1EF,flti_cvtst = 0x2AC,flti_cvtsts = 0x6AC,};
enum MACRO_flti_addssuc {flti_addssuc = 0x500,flti_subssuc = 0x501,flti_mulssuc = 0x502,flti_divssuc = 0x503,flti_addtsuc = 0x520,flti_subtsuc = 0x521,flti_multsuc = 0x522,flti_divtsuc = 0x523,flti_cvttssuc = 0x52C,flti_cvttqsvc = 0x52F,flti_addssum = 0x540,flti_subssum = 0x541,flti_mulssum = 0x542,flti_divssum = 0x543,flti_addtsum = 0x560,flti_subtsum = 0x561,flti_multsum = 0x562,flti_divtsum = 0x563,flti_cvttssum = 0x56C,flti_cvttqsvm = 0x56F,flti_addssu = 0x580,flti_subssu = 0x581,flti_mulssu = 0x582,flti_divssu = 0x583,flti_addtsu = 0x5A0,flti_subtsu = 0x5A1,flti_multsu = 0x5A2,flti_divtsu = 0x5A3,flti_cmptunsu = 0x5A4,flti_cmpteqsu = 0x5A5,flti_cmptltsu = 0x5A6,flti_cmptlesu = 0x5A7,flti_cvttssu = 0x5AC,flti_cvttqsv = 0x5AF,flti_addssud = 0x5C0,flti_subssud = 0x5C1,flti_mulssud = 0x5C2,flti_divssud = 0x5C3,flti_addtsud = 0x5E0,flti_subtsud = 0x5E1,flti_multsud = 0x5E2,flti_divtsud = 0x5E3,flti_cvttssud = 0x5EC,flti_cvttqsvd = 0x5EF,flti_cvttss = 0x6AC,flti_addssuic = 0x700,flti_subssuic = 0x701,flti_mulssuic = 0x702,flti_divssuic = 0x703,flti_addtsuic = 0x720,flti_subtsuic = 0x721,flti_multsuic = 0x722,flti_divtsuic = 0x723,flti_cvttssuic = 0x72C,flti_cvttqsvic = 0x72F,flti_cvtqssuic = 0x73C,flti_cvtqtsuic = 0x73E,flti_addssuim = 0x740,flti_subssuim = 0x741,flti_mulssuim = 0x742,flti_divssuim = 0x743,flti_addtsuim = 0x760,flti_subtsuim = 0x761,flti_multsuim = 0x762,flti_divtsuim = 0x763,flti_cvttssuim = 0x76C,flti_cvttqsvim = 0x76F,flti_cvtqssuim = 0x77C,flti_cvtqtsuim = 0x77E,flti_addssui = 0x780,flti_subssui = 0x781,flti_mulssui = 0x782,flti_divssui = 0x783,flti_addtsui = 0x7A0,flti_subtsui = 0x7A1,flti_multsui = 0x7A2,flti_divtsui = 0x7A3,flti_cvttssui = 0x7AC,flti_cvttqsvi = 0x7AF,flti_cvtqssui = 0x7BC,flti_cvtqtsui = 0x7BE,flti_addssuid = 0x7C0,flti_subssuid = 0x7C1,flti_mulssuid = 0x7C2,flti_divssuid = 0x7C3,flti_addtsuid = 0x7E0,flti_subtsuid = 0x7E1,flti_multsuid = 0x7E2,flti_divtsuid = 0x7E3,flti_cvttssuid = 0x7EC,flti_cvttqsvid = 0x7EF,flti_cvtqssuid = 0x7FC,flti_cvtqtsuid = 0x7FE,};
enum MACRO_fltl {fltl_cvtlq = 0x10,fltl_cpys = 0x20,fltl_cpysn = 0x21,fltl_cpyse = 0x22,fltl_mt_fpcr = 0x24,fltl_mf_fpcr = 0x25,fltl_fcmoveq = 0x2A,fltl_fcmovne = 0x2B,fltl_fcmovlt = 0x2C,fltl_fcmovge = 0x2D,fltl_fcmovle = 0x2E,fltl_fcmovgt = 0x2F,fltl_cvtql = 0x30,fltl_cvtqlv = 0x130,fltl_cvtqlsv = 0x530,};
enum MACRO_fltm {fltm_itofs = 0x4,fltm_itoff = 0x14,fltm_itoft = 0x24,fltm_sqrts = 0x8B,};
enum MACRO_fltm_sqrtf {fltm_sqrtf = 0x8A,};
enum MACRO_fltm_sqrtfc {fltm_sqrtfc = 0xA,fltm_sqrtfu = 0x18A,};
enum MACRO_fltm_sqrtfsc {fltm_sqrtfsc = 0x40A,fltm_sqrtfsu = 0x58A,};
enum MACRO_fltm_sqrtfsuc {fltm_sqrtfsuc = 0x50A,};
enum MACRO_fltm_sqrtfuc {fltm_sqrtfuc = 0x10A,fltm_sqrtfs = 0x48A,};
enum MACRO_fltm_sqrtg {fltm_sqrtg = 0xAA,};
enum MACRO_fltm_sqrtgc {fltm_sqrtgc = 0x2A,fltm_sqrtgu = 0x1AA,};
enum MACRO_fltm_sqrtgsc {fltm_sqrtgsc = 0x42A,fltm_sqrtgsu = 0x5AA,};
enum MACRO_fltm_sqrtgsuc {fltm_sqrtgsuc = 0x52A,};
enum MACRO_fltm_sqrtguc {fltm_sqrtguc = 0x12A,fltm_sqrtgs = 0x4AA,};
enum MACRO_fltm_sqrtsc {fltm_sqrtsc = 0xB,fltm_sqrtsm = 0x4B,fltm_sqrtsd = 0xCB,fltm_sqrtsu = 0x18B,};
enum MACRO_fltm_sqrtssuc {fltm_sqrtssuc = 0x50B,fltm_sqrtssum = 0x54B,fltm_sqrtssud = 0x5CB,fltm_sqrtssui = 0x78B,};
enum MACRO_fltm_sqrtssuic {fltm_sqrtssuic = 0x70B,fltm_sqrtssuim = 0x74B,fltm_sqrtssuid = 0x7CB,};
enum MACRO_fltm_sqrtsuc {fltm_sqrtsuc = 0x10B,fltm_sqrtsum = 0x14B,fltm_sqrtsud = 0x1CB,fltm_sqrtssu = 0x58B,};
enum MACRO_fltm_sqrtt {fltm_sqrtt = 0xAB,};
enum MACRO_fltm_sqrttc {fltm_sqrttc = 0x2B,fltm_sqrttm = 0x6B,fltm_sqrttd = 0xEB,fltm_sqrttu = 0x1AB,};
enum MACRO_fltm_sqrttsuc {fltm_sqrttsuc = 0x52B,fltm_sqrttsum = 0x56B,fltm_sqrttsud = 0x5EB,fltm_sqrttsui = 0x7AB,};
enum MACRO_fltm_sqrttsuic {fltm_sqrttsuic = 0x72B,fltm_sqrttsuim = 0x76B,fltm_sqrttsuid = 0x7EB,};
enum MACRO_fltm_sqrttuc {fltm_sqrttuc = 0x12B,fltm_sqrttum = 0x16B,fltm_sqrttud = 0x1EB,fltm_sqrttsu = 0x5AB,};
enum MACRO_fltv {fltv_addfc = 0x0,fltv_subfc = 0x1,fltv_mulfc = 0x2,fltv_divfc = 0x3,fltv_cvtdgc = 0x1E,fltv_addgc = 0x20,fltv_subgc = 0x21,fltv_mulgc = 0x22,fltv_divgc = 0x23,fltv_cvtgfc = 0x2C,fltv_cvtgdc = 0x2D,fltv_cvtgqc = 0x2F,fltv_cvtqfc = 0x3C,fltv_cvtqgc = 0x3E,fltv_addf = 0x80,fltv_subf = 0x81,fltv_mulf = 0x82,fltv_divf = 0x83,fltv_cvtdg = 0x9E,fltv_addg = 0xA0,fltv_subg = 0xA1,fltv_mulg = 0xA2,fltv_divg = 0xA3,fltv_cmpgeq = 0xA5,fltv_cmpglt = 0xA6,fltv_cmpgle = 0xA7,fltv_cvtgf = 0xAC,fltv_cvtgd = 0xAD,fltv_cvtgq = 0xAF,fltv_cvtqf = 0xBC,fltv_cvtqg = 0xBE,fltv_addfuc = 0x100,fltv_subfuc = 0x101,fltv_mulfuc = 0x102,fltv_divfuc = 0x103,fltv_cvtdguc = 0x11E,fltv_addguc = 0x120,fltv_subguc = 0x121,fltv_mulguc = 0x122,fltv_divguc = 0x123,fltv_cvtgfuc = 0x12C,fltv_cvtgduc = 0x12D,fltv_cvtgqvc = 0x12F,fltv_addfu = 0x180,fltv_subfu = 0x181,fltv_mulfu = 0x182,fltv_divfu = 0x183,fltv_cvtdgu = 0x19E,fltv_addgu = 0x1A0,fltv_subgu = 0x1A1,fltv_mulgu = 0x1A2,fltv_divgu = 0x1A3,fltv_cvtgfu = 0x1AC,fltv_cvtgdu = 0x1AD,fltv_cvtgqv = 0x1AF,fltv_addfsc = 0x400,fltv_subfsc = 0x401,fltv_mulfsc = 0x402,fltv_divfsc = 0x403,fltv_cvtdgsc = 0x41E,fltv_addgsc = 0x420,fltv_subgsc = 0x421,fltv_mulgsc = 0x422,fltv_divgsc = 0x423,fltv_cvtgfsc = 0x42C,fltv_cvtgdsc = 0x42D,fltv_cvtgqsc = 0x42F,fltv_addfs = 0x480,fltv_subfs = 0x481,fltv_mulfs = 0x482,fltv_divfs = 0x483,fltv_cvtdgs = 0x49E,fltv_addgs = 0x4A0,fltv_subgs = 0x4A1,fltv_mulgs = 0x4A2,fltv_divgs = 0x4A3,fltv_cmpgeqs = 0x4A5,fltv_cmpglts = 0x4A6,fltv_cmpgles = 0x4A7,fltv_cvtgfs = 0x4AC,fltv_cvtgds = 0x4AD,fltv_cvtgqs = 0x4AF,fltv_addfsuc = 0x500,fltv_subfsuc = 0x501,fltv_mulfsuc = 0x502,fltv_divfsuc = 0x503,fltv_cvtdgsuc = 0x51E,fltv_addgsuc = 0x520,fltv_subgsuc = 0x521,fltv_mulgsuc = 0x522,fltv_divgsuc = 0x523,fltv_cvtgfsuc = 0x52C,fltv_cvtgdsuc = 0x52D,fltv_cvtgqsvc = 0x52F,fltv_addfsu = 0x580,fltv_subfsu = 0x581,fltv_mulfsu = 0x582,fltv_divfsu = 0x583,fltv_cvtdgsu = 0x59E,fltv_addgsu = 0x5A0,fltv_subgsu = 0x5A1,fltv_mulgsu = 0x5A2,fltv_divgsu = 0x5A3,fltv_cvtgfsu = 0x5AC,fltv_cvtgdsu = 0x5AD,fltv_cvtgqsv = 0x5AF,};
enum MACRO_fsFalse {fsFalse = 0,};
enum MACRO_fsTrue {fsTrue = 1,};
enum MACRO_hdrNil {hdrNil = 0,};
enum MACRO_ifdTemp {ifdTemp = 0,ilnNil = -1,};
enum MACRO_ifiNil {ifiNil = -1,};
enum MACRO_ilineNil {ilineNil = -1,};
enum MACRO_indexNil {indexNil = 0xFFFFF,issNil = 0xFFFFFFFF,};
enum MACRO_initial {initial_value = 0,};
enum MACRO_inta {inta_addl = 0x0,inta_s4addl = 0x2,inta_subl = 0x9,inta_s4subl = 0xB,inta_cmpbge = 0xF,inta_s8addl = 0x12,inta_s8subl = 0x1B,inta_cmpult = 0x1D,inta_addq = 0x20,inta_s4addq = 0x22,inta_subq = 0x29,inta_s4subq = 0x2B,inta_cmpeq = 0x2D,inta_s8addq = 0x32,inta_s8subq = 0x3B,inta_cmpule = 0x3D,inta_addlv = 0x40,inta_sublv = 0x49,inta_cmplt = 0x4D,inta_addqv = 0x60,inta_subqv = 0x69,inta_cmple = 0x6D,};
enum MACRO_intl {intl_and = 0x0,intl_bic = 0x8,intl_cmovlbs = 0x14,intl_cmovlbc = 0x16,intl_bis = 0x20,intl_cmoveq = 0x24,intl_cmovne = 0x26,intl_ornot = 0x28,intl_xor = 0x40,intl_cmovlt = 0x44,intl_cmovge = 0x46,intl_eqv = 0x48,intl_amask = 0x61,intl_cmovle = 0x64,intl_cmovgt = 0x66,intl_implver = 0x6C,};
enum MACRO_intm {intm_mull = 0x0,intm_mulq = 0x20,intm_umulh = 0x30,intm_mullv = 0x40,intm_mulqv = 0x60,};
enum MACRO_intmisc {intmisc_sextb = 0x0,intmisc_sextw = 0x1,intmisc_ctpop = 0x30,intmisc_perr = 0x31,intmisc_ctlz = 0x32,intmisc_cttz = 0x33,intmisc_unpkbw = 0x34,intmisc_unpkbl = 0x35,intmisc_pkwb = 0x36,intmisc_pklb = 0x37,intmisc_minsb8 = 0x38,intmisc_minsw4 = 0x39,intmisc_minub8 = 0x3A,intmisc_minuw4 = 0x3B,intmisc_maxub8 = 0x3C,intmisc_maxuw4 = 0x3D,intmisc_maxsb8 = 0x3E,intmisc_maxsw4 = 0x3F,intmisc_ftoit = 0x70,intmisc_ftois = 0x78,};
enum MACRO_issNull {issNull = 0,};
enum MACRO_isymNil {isymNil = -1,};
enum MACRO_jsr {jsr_jmp = 0x0,jsr_jsr = 0x1,jsr_ret = 0x2,jsr_jsr_coroutine = 0x3,};
enum MACRO_langC {langC = 0,langPascal = 1,langFortran = 2,langAssembler = 3,langMachine = 4,langNil = 5,langAda = 6,langPl1 = 7,langCobol = 8,langStdc = 9,langMIPSCxx = 10,langDECCxx = 11,langCxx = 12,langFortran90 = 13,langBliss = 14,langMax = 32,};
enum MACRO_lineNil {lineNil = 0,};
enum MACRO_magicSym {magicSym_cia = 0x1957,};
enum MACRO_misc {misc_trapb = 0x0,misc_excb = 0x400,misc_mb = 0x4000,misc_wmb = 0x4400,misc_fetch = 0x8000,misc_fetch_m = 0xA000,misc_rpcc = 0xC000,misc_rc = 0xE000,misc_ecb = 0xE800,misc_rs = 0xF000,misc_wh64 = 0xF800,};
enum MACRO_mvOnly {mvOnly = 1,mvRename = 2,mvExcept = 3,};
enum MACRO_op {op_call_pal = 0x0,op_opc01 = 0x1,op_opc02 = 0x2,op_opc03 = 0x3,op_opc04 = 0x4,op_opc05 = 0x5,op_opc06 = 0x6,op_opc07 = 0x7,op_lda = 0x8,op_ldah = 0x9,op_ldbu = 0xA,op_ldq_u = 0xB,op_ldwu = 0xC,op_stw = 0xD,op_stb = 0xE,op_stq_u = 0xF,op_inta = 0x10,op_intl = 0x11,op_ints = 0x12,op_intm = 0x13,op_fltm = 0x14,};
enum MACRO_op_opc14 {op_opc14 = 0x14,op_fltv = 0x15,op_flti = 0x16,op_fltl = 0x17,op_misc = 0x18,op_pal19 = 0x19,op_jsr = 0x1A,op_pal1b = 0x1B,op_intmisc = 0x1C,op_pal1d = 0x1D,op_pal1e = 0x1E,op_pal1f = 0x1F,op_ldf = 0x20,op_ldg = 0x21,op_lds = 0x22,op_ldt = 0x23,op_stf = 0x24,op_stg = 0x25,op_sts = 0x26,op_stt = 0x27,op_ldl = 0x28,op_ldq = 0x29,op_ldl_l = 0x2A,op_ldq_l = 0x2B,op_stl = 0x2C,op_stq = 0x2D,op_stl_c = 0x2E,op_stq_c = 0x2F,op_br = 0x30,op_fbeq = 0x31,op_fblt = 0x32,op_fble = 0x33,op_bsr = 0x34,op_fbne = 0x35,op_fbge = 0x36,op_fbgt = 0x37,op_blbc = 0x38,op_beq = 0x39,op_blt = 0x3A,op_ble = 0x3B,op_blbs = 0x3C,op_bne = 0x3D,op_bge = 0x3E,op_bgt = 0x3F,};
enum MACRO_optNil {optNil = 0,ioptNil = -1,};
enum MACRO_osfXK {osfXK_BackSpace = 0x1004FF08,osfXK_Insert = 0x1004FF63,osfXK_Delete = 0x1004FFFF,};
enum MACRO_osfXK_Activate {osfXK_Activate = 0x1004FF44,osfXK_MenuBar = 0x1004FF45,};
enum MACRO_osfXK_Clear {osfXK_Clear = 0x1004FF0B,osfXK_Cancel = 0x1004FF69,osfXK_Help = 0x1004FF6A,};
enum MACRO_osfXK_Copy {osfXK_Copy = 0x1004FF02,osfXK_Cut = 0x1004FF03,osfXK_Paste = 0x1004FF04,osfXK_AddMode = 0x1004FF31,osfXK_PrimaryPaste = 0x1004FF32,osfXK_QuickPaste = 0x1004FF33,osfXK_PageLeft = 0x1004FF40,osfXK_PageUp = 0x1004FF41,osfXK_PageDown = 0x1004FF42,osfXK_PageRight = 0x1004FF43,osfXK_EndLine = 0x1004FF57,osfXK_BeginLine = 0x1004FF58,};
enum MACRO_osfXK_Left {osfXK_Left = 0x1004FF51,osfXK_Up = 0x1004FF52,osfXK_Right = 0x1004FF53,osfXK_Down = 0x1004FF54,};
enum MACRO_osfXK_Menu {osfXK_Menu = 0x1004FF67,};
enum MACRO_osfXK_Select {osfXK_Select = 0x1004FF60,osfXK_Undo = 0x1004FF65,};
enum MACRO_pdNil {pdNil = 0,ipdNil = -1,};
enum MACRO_pthread {pthread_exception_s = 394113025,pthread_exccop_s = 394113026,pthread_uninitexc_s = 394113027,pthread_unkstatus_s = 394113152,pthread_exccoplos_s = 394113153,pthread_noexcmem_s = 394113155,};
enum MACRO_pthread_SIGIOT {pthread_SIGIOT_s = 394113039,};
enum MACRO_pthread_SIGSEGV {pthread_SIGSEGV_s = 394113029,pthread_SIGBUS_s = 394113035,pthread_SIGFPE_s = 394113041,pthread_cancel_s = 394113072,pthread_exit_s = 394113076,};
enum MACRO_pthread_illaddr {pthread_illaddr_s = 394113029,pthread_exquota_s = 394113030,pthread_nopriv_s = 394113032,};
enum MACRO_pthread_insfmem {pthread_insfmem_s = 394113031,pthread_normal_s = 394113033,pthread_illinstr_s = 394113034,pthread_resaddr_s = 394113035,pthread_privinst_s = 394113036,pthread_resoper_s = 394113037,pthread_SIGTRAP_s = 394113038,pthread_SIGABRT_s = 394113039,pthread_SIGEMT_s = 394113040,pthread_aritherr_s = 394113041,pthread_SIGSYS_s = 394113042,pthread_SIGPIPE_s = 394113043,pthread_excpu_s = 394113044,pthread_exfilsiz_s = 394113045,pthread_intovf_s = 394113046,pthread_intdiv_s = 394113047,pthread_fltovf_s = 394113048,pthread_fltdiv_s = 394113049,pthread_fltund_s = 394113050,pthread_decovf_s = 394113051,pthread_subrng_s = 394113052,pthread_stackovf_s = 394113081,};
enum MACRO_rfdNil {rfdNil = -1,};
enum MACRO_rndxNil {rndxNil = 0,};
enum MACRO_rpdNil {rpdNil = 0,};
enum MACRO_rt {rt_FIRST = 0,rt_LAST = 31,};
enum MACRO_s5DIRSIZ {s5DIRSIZ = 14,};
enum MACRO_s5ROOTINO {s5ROOTINO = 2,};
enum MACRO_scCdbSystem {scCdbSystem = 9,};
enum MACRO_scDbx {scDbx = 9,};
enum MACRO_scFileDesc {scFileDesc = 20,scSUndefined = 21,scInit = 22,scBasedVar = 23,};
enum MACRO_scNil {scNil = 0,scText = 1,scData = 2,scBss = 3,scRegister = 4,scAbs = 5,scUndefined = 6,scCdbLocal = 7,};
enum MACRO_scReportDesc {scReportDesc = 23,scXData = 24,scPData = 25,scFini = 26,scRConst = 27,scSymRef = 28,scTlsCommon = 29,scTlsData = 30,scTlsBss = 31,scMax = 32,};
enum MACRO_scUnallocated {scUnallocated = 7,scBits = 8,scTlsUndefined = 9,scRegImage = 10,scInfo = 11,scUserStruct = 12,scSData = 13,scSBss = 14,scRData = 15,scVar = 16,scCommon = 17,scSCommon = 18,scVarRegister = 19,scVariant = 20,};
enum MACRO_signUnsigned {signUnsigned = 1,signLeadingOverpunch = 2,signTrailingOverpunch = 3,signLeadingSeparate = 4,signTrailingSeparate = 5,};
enum MACRO_soe {soe_two_FIRST = 0,soe_two_LAST = 0,};
enum MACRO_stNamespace {stNamespace = 22,stModview = 23,};
enum MACRO_stNil {stNil = 0,stGlobal = 1,stStatic = 2,stParam = 3,stLocal = 4,stLabel = 5,stProc = 6,stBlock = 7,stEnd = 8,stMember = 9,stTypedef = 10,stFile = 11,stRegReloc = 12,stForward = 13,stStaticProc = 14,stConstant = 15,stStaParam = 16,stBase = 17,stVirtBase = 18,stTag = 19,stInter = 20,stSplit = 21,stModule = 22,};
enum MACRO_stUsing {stUsing = 23,stAlias = 24,stStr = 60,stNumber = 61,stExpr = 62,stType = 63,stMax = 64,};
enum MACRO_sub {sub_emask = 0x3FFC000,};
enum MACRO_svid {svid_three_FIRST = 0,svid_three_LAST = 0,};
enum MACRO_svr {svr_four_FIRST = 0,svr_four_LAST = 0,};
enum MACRO_symNil {symNil = 0,};
enum MACRO_system {system_emask = 0xFC000000,};
enum MACRO_sysv {sysv_FIRST = 0,sysv_LAST = 2,};
enum MACRO_sz {sz_xSegment = 8,sz_xPoint = 4,};
enum MACRO_sz_CARD32 {sz_CARD32 = 4,sz_CARD8 = 1,};
enum MACRO_sz_RECORDRANGE {sz_RECORDRANGE = 24,};
enum MACRO_sz_XRecordClientInfo {sz_XRecordClientInfo = 12,sz_XRecordState = 16,sz_XRecordDatum = 32,};
enum MACRO_sz_XWDColor {sz_XWDColor = 12,};
enum MACRO_sz_fsBitmapFormat {sz_fsBitmapFormat = 4,};
enum MACRO_sz_fsChar2b {sz_fsChar2b = 2,};
enum MACRO_sz_fsChar2b_version1 {sz_fsChar2b_version1 = 2,sz_fsOffset32 = 8,};
enum MACRO_sz_fsConnClientPrefix {sz_fsConnClientPrefix = 8,sz_fsConnSetup = 12,};
enum MACRO_sz_fsConnSetupExtra {sz_fsConnSetupExtra = 8,sz_fsConnSetupAccept = 12,};
enum MACRO_sz_fsCreateACReply {sz_fsCreateACReply = 12,};
enum MACRO_sz_fsError {sz_fsError = 16,sz_fsEvent = 12,};
enum MACRO_sz_fsFreeACReq {sz_fsFreeACReq = 8,};
enum MACRO_sz_fsGenericReply {sz_fsGenericReply = 8,};
enum MACRO_sz_fsGetCataloguesReq {sz_fsGetCataloguesReq = 4,sz_fsSetEventMaskReq = 8,};
enum MACRO_sz_fsGetEventMaskReply {sz_fsGetEventMaskReply = 12,};
enum MACRO_sz_fsGetEventMaskReq {sz_fsGetEventMaskReq = 4,sz_fsCreateACReq = 8,};
enum MACRO_sz_fsGetResolutionReply {sz_fsGetResolutionReply = 8,sz_fsListFontsReply = 16,sz_fsListFontsWithXInfoReply = 52,};
enum MACRO_sz_fsGetResolutionReq {sz_fsGetResolutionReq = 4,sz_fsListFontsReq = 12,};
enum MACRO_sz_fsKeepAliveEvent {sz_fsKeepAliveEvent = 12,};
enum MACRO_sz_fsListCataloguesReply {sz_fsListCataloguesReply = 16,sz_fsGetCataloguesReply = 8,};
enum MACRO_sz_fsListExtensionReq {sz_fsListExtensionReq = 4,};
enum MACRO_sz_fsListExtensionsReply {sz_fsListExtensionsReply = 8,sz_fsQueryExtensionReply = 20,};
enum MACRO_sz_fsListExtensionsReq {sz_fsListExtensionsReq = 4,sz_fsResourceReq = 8,};
enum MACRO_sz_fsListFontsWithXInfoReq {sz_fsListFontsWithXInfoReq = 12,sz_fsOpenBitmapFontReq = 16,};
enum MACRO_sz_fsNoopReq {sz_fsNoopReq = 4,};
enum MACRO_sz_fsOpenBitmapFontReply {sz_fsOpenBitmapFontReply = 16,sz_fsQueryXInfoReply = 48,};
enum MACRO_sz_fsPropOffset {sz_fsPropOffset = 20,sz_fsPropInfo = 8,sz_fsResolution = 6,};
enum MACRO_sz_fsQueryExtensionReq {sz_fsQueryExtensionReq = 4,sz_fsListCataloguesReq = 12,};
enum MACRO_sz_fsQueryXBitmaps16Reply {sz_fsQueryXBitmaps16Reply = 20,};
enum MACRO_sz_fsQueryXBitmaps16Req {sz_fsQueryXBitmaps16Req = 16,sz_fsCloseReq = 8,};
enum MACRO_sz_fsQueryXExtents16Reply {sz_fsQueryXExtents16Reply = 12,sz_fsQueryXBitmaps8Reply = 20,};
enum MACRO_sz_fsQueryXExtents16Req {sz_fsQueryXExtents16Req = 12,sz_fsQueryXBitmaps8Req = 16,};
enum MACRO_sz_fsQueryXExtents8Reply {sz_fsQueryXExtents8Reply = 12,};
enum MACRO_sz_fsQueryXInfoReq {sz_fsQueryXInfoReq = 8,sz_fsQueryXExtents8Req = 12,};
enum MACRO_sz_fsRange {sz_fsRange = 4,sz_fsXCharInfo = 12,sz_fsXFontInfoHeader = 40,};
enum MACRO_sz_fsReply {sz_fsReply = 8,};
enum MACRO_sz_fsReq {sz_fsReq = 4,};
enum MACRO_sz_fsSetAuthorizationReq {sz_fsSetAuthorizationReq = 8,sz_fsSetResolutionReq = 4,};
enum MACRO_sz_fsSetCataloguesReq {sz_fsSetCataloguesReq = 4,};
enum MACRO_sz_iceAuthNextPhaseMsg {sz_iceAuthNextPhaseMsg = 16,sz_iceConnectionReplyMsg = 8,};
enum MACRO_sz_iceAuthReplyMsg {sz_iceAuthReplyMsg = 16,};
enum MACRO_sz_iceAuthRequiredMsg {sz_iceAuthRequiredMsg = 16,};
enum MACRO_sz_iceByteOrderMsg {sz_iceByteOrderMsg = 8,sz_iceConnectionSetupMsg = 16,};
enum MACRO_sz_iceMsg {sz_iceMsg = 8,sz_iceErrorMsg = 16,};
enum MACRO_sz_iceNoCloseMsg {sz_iceNoCloseMsg = 8,};
enum MACRO_sz_icePingMsg {sz_icePingMsg = 8,};
enum MACRO_sz_icePingReplyMsg {sz_icePingReplyMsg = 8,};
enum MACRO_sz_iceProtocolSetupMsg {sz_iceProtocolSetupMsg = 16,sz_iceProtocolReplyMsg = 8,};
enum MACRO_sz_iceWantToCloseMsg {sz_iceWantToCloseMsg = 8,};
enum MACRO_sz_lbxQuickMotionDeltaEvent {sz_lbxQuickMotionDeltaEvent = 4,sz_lbxMotionDeltaEvent = 8,};
enum MACRO_sz_pmGetProxyAddrMsg {sz_pmGetProxyAddrMsg = 8,};
enum MACRO_sz_pmGetProxyAddrReplyMsg {sz_pmGetProxyAddrReplyMsg = 8,};
enum MACRO_sz_pmStartProxyMsg {sz_pmStartProxyMsg = 8,};
enum MACRO_sz_smCloseConnectionMsg {sz_smCloseConnectionMsg = 8,};
enum MACRO_sz_smDeletePropertiesMsg {sz_smDeletePropertiesMsg = 8,};
enum MACRO_sz_smDieMsg {sz_smDieMsg = 8,};
enum MACRO_sz_smGetPropertiesMsg {sz_smGetPropertiesMsg = 8,};
enum MACRO_sz_smInteractDoneMsg {sz_smInteractDoneMsg = 8,};
enum MACRO_sz_smInteractMsg {sz_smInteractMsg = 8,};
enum MACRO_sz_smPropertiesReplyMsg {sz_smPropertiesReplyMsg = 8,};
enum MACRO_sz_smRegisterClientMsg {sz_smRegisterClientMsg = 8,};
enum MACRO_sz_smRegisterClientReplyMsg {sz_smRegisterClientReplyMsg = 8,sz_smSaveYourselfMsg = 16,};
enum MACRO_sz_smSaveCompleteMsg {sz_smSaveCompleteMsg = 8,};
enum MACRO_sz_smSaveYourselfDoneMsg {sz_smSaveYourselfDoneMsg = 8,};
enum MACRO_sz_smSaveYourselfPhase2Msg {sz_smSaveYourselfPhase2Msg = 8,};
enum MACRO_sz_smSaveYourselfPhase2RequestMsg {sz_smSaveYourselfPhase2RequestMsg = 8,};
enum MACRO_sz_smSaveYourselfRequestMsg {sz_smSaveYourselfRequestMsg = 16,sz_smInteractRequestMsg = 8,};
enum MACRO_sz_smSetPropertiesMsg {sz_smSetPropertiesMsg = 8,};
enum MACRO_sz_smShutdownCancelledMsg {sz_smShutdownCancelledMsg = 8,};
enum MACRO_sz_xAllocColorCellsReply {sz_xAllocColorCellsReply = 32,};
enum MACRO_sz_xAllocColorCellsReq {sz_xAllocColorCellsReq = 12,sz_xAllocColorPlanesReq = 16,};
enum MACRO_sz_xAllocColorPlanesReply {sz_xAllocColorPlanesReply = 32,};
enum MACRO_sz_xAllocColorReply {sz_xAllocColorReply = 32,};
enum MACRO_sz_xAllocColorReq {sz_xAllocColorReq = 16,sz_xAllocNamedColorReq = 12,};
enum MACRO_sz_xAllocNamedColorReply {sz_xAllocNamedColorReply = 32,};
enum MACRO_sz_xAllowEventsReq {sz_xAllowEventsReq = 8,sz_xGetMotionEventsReq = 16,};
enum MACRO_sz_xChangeDeviceControlReq {sz_xChangeDeviceControlReq = 8,sz_xChangeDeviceControlReply = 32,};
enum MACRO_sz_xChangeDeviceDontPropagateListReq {sz_xChangeDeviceDontPropagateListReq = 12,};
enum MACRO_sz_xChangeDeviceKeyMappingReq {sz_xChangeDeviceKeyMappingReq = 8,};
enum MACRO_sz_xChangeHostsReq {sz_xChangeHostsReq = 8,sz_xListHostsReq = 4,};
enum MACRO_sz_xChangeKeyboardControlReq {sz_xChangeKeyboardControlReq = 8,sz_xBellReq = 4,};
enum MACRO_sz_xChangeKeyboardDeviceReq {sz_xChangeKeyboardDeviceReq = 8,sz_xChangeKeyboardDeviceReply = 32,};
enum MACRO_sz_xChangeKeyboardMappingReq {sz_xChangeKeyboardMappingReq = 8,};
enum MACRO_sz_xChangeModeReq {sz_xChangeModeReq = 4,sz_xRotatePropertiesReq = 12,sz_xReply = 32,};
enum MACRO_sz_xChangePointerControlReq {sz_xChangePointerControlReq = 12,};
enum MACRO_sz_xChangePointerDeviceReq {sz_xChangePointerDeviceReq = 8,sz_xChangePointerDeviceReply = 32,};
enum MACRO_sz_xChangeSaveSetReq {sz_xChangeSaveSetReq = 8,sz_xReparentWindowReq = 16,};
enum MACRO_sz_xChangeWindowAttributesReq {sz_xChangeWindowAttributesReq = 12,};
enum MACRO_sz_xCharInfo {sz_xCharInfo = 12,};
enum MACRO_sz_xCirculateWindowReq {sz_xCirculateWindowReq = 8,};
enum MACRO_sz_xCloseDeviceReq {sz_xCloseDeviceReq = 8,};
enum MACRO_sz_xColorItem {sz_xColorItem = 12,};
enum MACRO_sz_xConfigureWindowReq {sz_xConfigureWindowReq = 12,};
enum MACRO_sz_xConnClientPrefix {sz_xConnClientPrefix = 12,};
enum MACRO_sz_xConnSetupPrefix {sz_xConnSetupPrefix = 8,sz_xConnSetup = 32,};
enum MACRO_sz_xCopyGCReq {sz_xCopyGCReq = 16,sz_xSetDashesReq = 12,};
enum MACRO_sz_xCreateColormapReq {sz_xCreateColormapReq = 16,sz_xCopyColormapAndFreeReq = 12,};
enum MACRO_sz_xCreateGCReq {sz_xCreateGCReq = 16,sz_xChangeGCReq = 12,};
enum MACRO_sz_xCreateGlyphCursorReq {sz_xCreateGlyphCursorReq = 32,sz_xRecolorCursorReq = 20,};
enum MACRO_sz_xDPMSCapableReq {sz_xDPMSCapableReq = 4,sz_xDPMSCapableReply = 32,};
enum MACRO_sz_xDPMSDisableReq {sz_xDPMSDisableReq = 4,sz_xDPMSForceLevelReq = 8,};
enum MACRO_sz_xDPMSEnableReq {sz_xDPMSEnableReq = 4,};
enum MACRO_sz_xDPMSGetTimeoutsReq {sz_xDPMSGetTimeoutsReq = 4,sz_xDPMSGetTimeoutsReply = 32,};
enum MACRO_sz_xDPMSGetVersionReq {sz_xDPMSGetVersionReq = 8,sz_xDPMSGetVersionReply = 32,};
enum MACRO_sz_xDPMSInfoReq {sz_xDPMSInfoReq = 4,sz_xDPMSInfoReply = 32,};
enum MACRO_sz_xDPMSSetTimeoutsReq {sz_xDPMSSetTimeoutsReq = 12,};
enum MACRO_sz_xDeletePropertyReq {sz_xDeletePropertyReq = 12,sz_xGetPropertyReq = 24,};
enum MACRO_sz_xDepth {sz_xDepth = 8,sz_xVisualType = 24,sz_xWindowRoot = 40,};
enum MACRO_sz_xError {sz_xError = 32,};
enum MACRO_sz_xEvent {sz_xEvent = 32,};
enum MACRO_sz_xFontProp {sz_xFontProp = 8,sz_xTextElt = 2,};
enum MACRO_sz_xForceScreenSaverReq {sz_xForceScreenSaverReq = 4,};
enum MACRO_sz_xFreeColorsReq {sz_xFreeColorsReq = 12,};
enum MACRO_sz_xGetAtomNameReply {sz_xGetAtomNameReply = 32,};
enum MACRO_sz_xGetDeviceButtonMappingReq {sz_xGetDeviceButtonMappingReq = 8,sz_xGetDeviceButtonMappingReply = 32,};
enum MACRO_sz_xGetDeviceControlReq {sz_xGetDeviceControlReq = 8,sz_xGetDeviceControlReply = 32,};
enum MACRO_sz_xGetDeviceDontPropagateListReq {sz_xGetDeviceDontPropagateListReq = 8,sz_xGetDeviceDontPropagateListReply = 32,};
enum MACRO_sz_xGetDeviceFocusReq {sz_xGetDeviceFocusReq = 8,sz_xGetDeviceFocusReply = 32,};
enum MACRO_sz_xGetDeviceKeyMappingReq {sz_xGetDeviceKeyMappingReq = 8,sz_xGetDeviceKeyMappingReply = 32,};
enum MACRO_sz_xGetDeviceModifierMappingReq {sz_xGetDeviceModifierMappingReq = 8,};
enum MACRO_sz_xGetDeviceMotionEventsReq {sz_xGetDeviceMotionEventsReq = 16,sz_xGetDeviceMotionEventsReply = 32,};
enum MACRO_sz_xGetExtensionVersionReq {sz_xGetExtensionVersionReq = 8,sz_xGetExtensionVersionReply = 32,};
enum MACRO_sz_xGetFeedbackControlReply {sz_xGetFeedbackControlReply = 32,sz_xChangeFeedbackControlReq = 12,};
enum MACRO_sz_xGetFontPathReply {sz_xGetFontPathReply = 32,};
enum MACRO_sz_xGetGeometryReply {sz_xGetGeometryReply = 32,};
enum MACRO_sz_xGetImageReply {sz_xGetImageReply = 32,};
enum MACRO_sz_xGetImageReq {sz_xGetImageReq = 20,};
enum MACRO_sz_xGetInputFocusReply {sz_xGetInputFocusReply = 32,sz_xQueryKeymapReply = 40,sz_xQueryFontReply = 60,};
enum MACRO_sz_xGetKeyboardMappingReply {sz_xGetKeyboardMappingReply = 32,};
enum MACRO_sz_xGetModifierMappingReply {sz_xGetModifierMappingReply = 32,sz_xListFontsWithInfoReq = 8,};
enum MACRO_sz_xGetMotionEventsReply {sz_xGetMotionEventsReply = 32,};
enum MACRO_sz_xGetPointerControlReply {sz_xGetPointerControlReply = 32,};
enum MACRO_sz_xGetPointerMappingReply {sz_xGetPointerMappingReply = 32,};
enum MACRO_sz_xGetPropertyReply {sz_xGetPropertyReply = 32,};
enum MACRO_sz_xGetScreenSaverReply {sz_xGetScreenSaverReply = 32,};
enum MACRO_sz_xGetSelectedExtensionEventsReq {sz_xGetSelectedExtensionEventsReq = 8,sz_xGetSelectedExtensionEventsReply = 32,};
enum MACRO_sz_xGetSelectionOwnerReply {sz_xGetSelectionOwnerReply = 32,};
enum MACRO_sz_xGrabButtonReq {sz_xGrabButtonReq = 24,};
enum MACRO_sz_xGrabDeviceReq {sz_xGrabDeviceReq = 20,sz_xGrabDeviceReply = 32,};
enum MACRO_sz_xGrabKeyReq {sz_xGrabKeyReq = 16,sz_xUngrabKeyReq = 12,};
enum MACRO_sz_xGrabKeyboardReply {sz_xGrabKeyboardReply = 32,sz_xListFontsWithInfoReply = 60,};
enum MACRO_sz_xGrabKeyboardReq {sz_xGrabKeyboardReq = 16,};
enum MACRO_sz_xGrabPointerReply {sz_xGrabPointerReply = 32,};
enum MACRO_sz_xGrabPointerReq {sz_xGrabPointerReq = 24,};
enum MACRO_sz_xImageText16Req {sz_xImageText16Req = 16,sz_xSetPointerMappingReq = 4,};
enum MACRO_sz_xImageText8Req {sz_xImageText8Req = 16,};
enum MACRO_sz_xImageTextReq {sz_xImageTextReq = 16,};
enum MACRO_sz_xInternAtomReply {sz_xInternAtomReply = 32,};
enum MACRO_sz_xInternAtomReq {sz_xInternAtomReq = 8,sz_xChangePropertyReq = 24,};
enum MACRO_sz_xKeymapEvent {sz_xKeymapEvent = 32,sz_xReq = 4,};
enum MACRO_sz_xListExtensionsReply {sz_xListExtensionsReply = 32,};
enum MACRO_sz_xListFontsReply {sz_xListFontsReply = 32,};
enum MACRO_sz_xListFontsReq {sz_xListFontsReq = 8,};
enum MACRO_sz_xListHostsReply {sz_xListHostsReply = 32,};
enum MACRO_sz_xListInputDevicesReq {sz_xListInputDevicesReq = 4,sz_xListInputDevicesReply = 32,};
enum MACRO_sz_xListInstalledColormapsReply {sz_xListInstalledColormapsReply = 32,};
enum MACRO_sz_xListPropertiesReply {sz_xListPropertiesReply = 32,};
enum MACRO_sz_xLookupColorReply {sz_xLookupColorReply = 32,};
enum MACRO_sz_xOpenDeviceReq {sz_xOpenDeviceReq = 8,sz_xOpenDeviceReply = 32,};
enum MACRO_sz_xOpenFontReq {sz_xOpenFontReq = 12,};
enum MACRO_sz_xPanoramiXGetScreenCountReq {sz_xPanoramiXGetScreenCountReq = 8,sz_panoramiXGetScreenCountReply = 32,};
enum MACRO_sz_xPanoramiXGetScreenSizeReq {sz_xPanoramiXGetScreenSizeReq = 12,sz_panoramiXGetScreenSizeReply = 32,};
enum MACRO_sz_xPanoramiXGetStateReq {sz_xPanoramiXGetStateReq = 8,sz_panoramiXGetStateReply = 32,};
enum MACRO_sz_xPixmapFormat {sz_xPixmapFormat = 8,};
enum MACRO_sz_xPolyArcReq {sz_xPolyArcReq = 12,};
enum MACRO_sz_xPolyFillArcReq {sz_xPolyFillArcReq = 12,sz_xPolyText8Req = 16,};
enum MACRO_sz_xPolyFillRectangleReq {sz_xPolyFillRectangleReq = 12,};
enum MACRO_sz_xPolyLineReq {sz_xPolyLineReq = 12,};
enum MACRO_sz_xPolyPointReq {sz_xPolyPointReq = 12,};
enum MACRO_sz_xPolyRectangleReq {sz_xPolyRectangleReq = 12,};
enum MACRO_sz_xPolySegmentReq {sz_xPolySegmentReq = 12,sz_xFillPolyReq = 16,sz_xPutImageReq = 24,};
enum MACRO_sz_xPolyText16Req {sz_xPolyText16Req = 16,};
enum MACRO_sz_xPolyTextReq {sz_xPolyTextReq = 16,};
enum MACRO_sz_xPrintEndDocReq {sz_xPrintEndDocReq = 8,sz_xPrintPutDocumentDataReq = 16,};
enum MACRO_sz_xPrintEndJobReq {sz_xPrintEndJobReq = 8,};
enum MACRO_sz_xPrintEndPageReq {sz_xPrintEndPageReq = 8,sz_xPrintSelectInputReq = 12,};
enum MACRO_sz_xPrintGetAttributesReq {sz_xPrintGetAttributesReq = 12,sz_xPrintGetAttributesReply = 32,};
enum MACRO_sz_xPrintGetContextReply {sz_xPrintGetContextReply = 32,sz_xPrintDestroyContextReq = 8,};
enum MACRO_sz_xPrintGetContextScreenReq {sz_xPrintGetContextScreenReq = 8,sz_xPrintGetContextScreenReply = 32,};
enum MACRO_sz_xPrintGetDocumentDataReq {sz_xPrintGetDocumentDataReq = 12,sz_xPrintGetDocumentDataReply = 32,};
enum MACRO_sz_xPrintGetImageResolutionReq {sz_xPrintGetImageResolutionReq = 8,sz_xPrintGetImageResolutionReply = 32,};
enum MACRO_sz_xPrintGetOneAttributeReq {sz_xPrintGetOneAttributeReq = 16,sz_xPrintGetOneAttributeReply = 32,};
enum MACRO_sz_xPrintGetPageDimensionsReq {sz_xPrintGetPageDimensionsReq = 8,sz_xPrintGetPageDimensionsReply = 32,};
enum MACRO_sz_xPrintGetPrinterListReq {sz_xPrintGetPrinterListReq = 12,sz_xPrintGetPrinterListReply = 32,};
enum MACRO_sz_xPrintInputSelectedReq {sz_xPrintInputSelectedReq = 8,sz_xPrintInputSelectedReply = 32,};
enum MACRO_sz_xPrintQueryScreensReq {sz_xPrintQueryScreensReq = 4,sz_xPrintQueryScreensReply = 32,};
enum MACRO_sz_xPrintQueryVersionReq {sz_xPrintQueryVersionReq = 4,sz_xPrintQueryVersionReply = 32,};
enum MACRO_sz_xPrintRehashPrinterListReq {sz_xPrintRehashPrinterListReq = 4,sz_xPrintCreateContextReq = 16,};
enum MACRO_sz_xPrintSetAttributesReq {sz_xPrintSetAttributesReq = 16,};
enum MACRO_sz_xPrintSetContextReq {sz_xPrintSetContextReq = 8,sz_xPrintGetContextReq = 4,};
enum MACRO_sz_xPrintSetImageResolutionReq {sz_xPrintSetImageResolutionReq = 12,sz_xPrintSetImageResolutionReply = 32,};
enum MACRO_sz_xPrintStartDocReq {sz_xPrintStartDocReq = 8,};
enum MACRO_sz_xPrintStartJobReq {sz_xPrintStartJobReq = 8,};
enum MACRO_sz_xPrintStartPageReq {sz_xPrintStartPageReq = 8,};
enum MACRO_sz_xQueryBestSizeReply {sz_xQueryBestSizeReply = 32,};
enum MACRO_sz_xQueryBestSizeReq {sz_xQueryBestSizeReq = 12,};
enum MACRO_sz_xQueryColorsReply {sz_xQueryColorsReply = 32,};
enum MACRO_sz_xQueryColorsReq {sz_xQueryColorsReq = 8,sz_xLookupColorReq = 12,sz_xCreateCursorReq = 32,};
enum MACRO_sz_xQueryDeviceStateReq {sz_xQueryDeviceStateReq = 8,sz_xQueryDeviceStateReply = 32,};
enum MACRO_sz_xQueryExtensionReply {sz_xQueryExtensionReply = 32,};
enum MACRO_sz_xQueryExtensionReq {sz_xQueryExtensionReq = 8,};
enum MACRO_sz_xQueryPointerReply {sz_xQueryPointerReply = 32,};
enum MACRO_sz_xQueryTextExtentsReply {sz_xQueryTextExtentsReply = 32,};
enum MACRO_sz_xQueryTextExtentsReq {sz_xQueryTextExtentsReq = 8,};
enum MACRO_sz_xQueryTreeReply {sz_xQueryTreeReply = 32,};
enum MACRO_sz_xRecordCreateContextReq {sz_xRecordCreateContextReq = 20,};
enum MACRO_sz_xRecordDisableContextReq {sz_xRecordDisableContextReq = 8,};
enum MACRO_sz_xRecordEnableContextReq {sz_xRecordEnableContextReq = 8,sz_xRecordEnableContextReply = 32,};
enum MACRO_sz_xRecordFreeContextReq {sz_xRecordFreeContextReq = 8,};
enum MACRO_sz_xRecordGetContextReq {sz_xRecordGetContextReq = 8,sz_xRecordGetContextReply = 32,};
enum MACRO_sz_xRecordQueryVersionReq {sz_xRecordQueryVersionReq = 8,sz_xRecordQueryVersionReply = 32,};
enum MACRO_sz_xRecordRange {sz_xRecordRange = 24,};
enum MACRO_sz_xRecordRegisterClientsReq {sz_xRecordRegisterClientsReq = 20,};
enum MACRO_sz_xRecordUnregisterClientsReq {sz_xRecordUnregisterClientsReq = 12,};
enum MACRO_sz_xRectangle {sz_xRectangle = 8,sz_xArc = 12,};
enum MACRO_sz_xResourceReq {sz_xResourceReq = 8,sz_xCreateWindowReq = 32,};
enum MACRO_sz_xSecurityGenerateAuthorizationReq {sz_xSecurityGenerateAuthorizationReq = 12,sz_xSecurityGenerateAuthorizationReply = 32,};
enum MACRO_sz_xSecurityRevokeAuthorizationReq {sz_xSecurityRevokeAuthorizationReq = 8,sz_xSecurityAuthorizationRevokedEvent = 32,};
enum MACRO_sz_xSelectExtensionEventReq {sz_xSelectExtensionEventReq = 12,};
enum MACRO_sz_xSendExtensionEventReq {sz_xSendExtensionEventReq = 16,sz_xDeviceBellReq = 8,};
enum MACRO_sz_xSetAccessControlReq {sz_xSetAccessControlReq = 4,sz_xGetKeyboardMappingReq = 8,};
enum MACRO_sz_xSetClipRectanglesReq {sz_xSetClipRectanglesReq = 12,sz_xCopyAreaReq = 28,sz_xCopyPlaneReq = 32,};
enum MACRO_sz_xSetCloseDownModeReq {sz_xSetCloseDownModeReq = 4,sz_xClearAreaReq = 16,};
enum MACRO_sz_xSetDeviceButtonMappingReq {sz_xSetDeviceButtonMappingReq = 8,sz_xSetDeviceButtonMappingReply = 32,};
enum MACRO_sz_xSetDeviceFocusReq {sz_xSetDeviceFocusReq = 16,sz_xGetFeedbackControlReq = 8,};
enum MACRO_sz_xSetDeviceModeReq {sz_xSetDeviceModeReq = 8,sz_xSetDeviceModeReply = 32,};
enum MACRO_sz_xSetDeviceModifierMappingReq {sz_xSetDeviceModifierMappingReq = 8,sz_xSetDeviceModifierMappingReply = 32,};
enum MACRO_sz_xSetDeviceValuatorsReq {sz_xSetDeviceValuatorsReq = 8,sz_xSetDeviceValuatorsReply = 32,};
enum MACRO_sz_xSetFontPathReq {sz_xSetFontPathReq = 8,sz_xCreatePixmapReq = 16,};
enum MACRO_sz_xSetInputFocusReq {sz_xSetInputFocusReq = 12,};
enum MACRO_sz_xSetMappingReply {sz_xSetMappingReply = 32,sz_xGetKeyboardControlReply = 52,};
enum MACRO_sz_xSetModifierMappingReply {sz_xSetModifierMappingReply = 32,};
enum MACRO_sz_xSetModifierMappingReq {sz_xSetModifierMappingReq = 4,sz_xPropIconSize = 24,};
enum MACRO_sz_xSetPointerMappingReply {sz_xSetPointerMappingReply = 32,};
enum MACRO_sz_xSetScreenSaverReq {sz_xSetScreenSaverReq = 12,};
enum MACRO_sz_xSetSelectionOwnerReq {sz_xSetSelectionOwnerReq = 16,sz_xConvertSelectionReq = 24,sz_xSendEventReq = 44,};
enum MACRO_sz_xSmtWakeupServerReq {sz_xSmtWakeupServerReq = 8,sz_xSmtWakeupEvent = 32,};
enum MACRO_sz_xStoreColorsReq {sz_xStoreColorsReq = 8,sz_xStoreNamedColorReq = 16,};
enum MACRO_sz_xTestGetInputReq {sz_xTestGetInputReq = 8,sz_xTestStopInputReq = 4,};
enum MACRO_sz_xTestQueryInputSizeReq {sz_xTestQueryInputSizeReq = 4,XTestACTIONS_SIZE = 28,};
enum MACRO_sz_xTestResetReq {sz_xTestResetReq = 4,};
enum MACRO_sz_xTimecoord {sz_xTimecoord = 8,sz_xHostEntry = 4,};
enum MACRO_sz_xTranslateCoordsReply {sz_xTranslateCoordsReply = 32,};
enum MACRO_sz_xTranslateCoordsReq {sz_xTranslateCoordsReq = 16,sz_xWarpPointerReq = 24,};
enum MACRO_sz_xUngrabButtonReq {sz_xUngrabButtonReq = 12,sz_xChangeActivePointerGrabReq = 16,};
enum MACRO_sz_xUngrabDeviceButtonReq {sz_xUngrabDeviceButtonReq = 16,sz_xAllowDeviceEventsReq = 12,};
enum MACRO_sz_xUngrabDeviceKeyReq {sz_xUngrabDeviceKeyReq = 16,sz_xGrabDeviceButtonReq = 20,sz_xGrabDeviceButtonReply = 32,};
enum MACRO_sz_xUngrabDeviceReq {sz_xUngrabDeviceReq = 12,sz_xGrabDeviceKeyReq = 20,sz_xGrabDeviceKeyReply = 32,};
enum MACRO_sz_xXTrapGetStatsReply {sz_xXTrapGetStatsReply = 1088,};
enum MACRO_sz_xXagCreateAssocReq {sz_xXagCreateAssocReq = 12,};
enum MACRO_sz_xXagCreateReq {sz_xXagCreateReq = 12,};
enum MACRO_sz_xXagDestroyAssocReq {sz_xXagDestroyAssocReq = 8,};
enum MACRO_sz_xXagDestroyReq {sz_xXagDestroyReq = 8,};
enum MACRO_sz_xXagGetAttrReq {sz_xXagGetAttrReq = 8,sz_xXagGetAttrReply = 32,};
enum MACRO_sz_xXagQueryReq {sz_xXagQueryReq = 8,sz_xXagQueryReply = 32,};
enum MACRO_sz_xieAbortReq {sz_xieAbortReq = 12,sz_xiePhotofloDoneEvn = 32,};
enum MACRO_sz_xieAwaitReq {sz_xieAwaitReq = 12,};
enum MACRO_sz_xieColorAllocEvn {sz_xieColorAllocEvn = 32,};
enum MACRO_sz_xieCreateColorListReq {sz_xieCreateColorListReq = 8,};
enum MACRO_sz_xieCreateLUTReq {sz_xieCreateLUTReq = 8,};
enum MACRO_sz_xieCreatePhotofloReq {sz_xieCreatePhotofloReq = 12,};
enum MACRO_sz_xieCreatePhotomapReq {sz_xieCreatePhotomapReq = 8,};
enum MACRO_sz_xieCreatePhotospaceReq {sz_xieCreatePhotospaceReq = 8,};
enum MACRO_sz_xieCreateROIReq {sz_xieCreateROIReq = 8,};
enum MACRO_sz_xieDecodeNotifyEvn {sz_xieDecodeNotifyEvn = 32,};
enum MACRO_sz_xieDestroyColorListReq {sz_xieDestroyColorListReq = 8,};
enum MACRO_sz_xieDestroyLUTReq {sz_xieDestroyLUTReq = 8,};
enum MACRO_sz_xieDestroyPhotofloReq {sz_xieDestroyPhotofloReq = 8,sz_xieExecutePhotofloReq = 12,};
enum MACRO_sz_xieDestroyPhotomapReq {sz_xieDestroyPhotomapReq = 8,};
enum MACRO_sz_xieDestroyPhotospaceReq {sz_xieDestroyPhotospaceReq = 8,sz_xieExecuteImmediateReq = 16,};
enum MACRO_sz_xieDestroyROIReq {sz_xieDestroyROIReq = 8,};
enum MACRO_sz_xieExportAvailableEvn {sz_xieExportAvailableEvn = 32,};
enum MACRO_sz_xieFloAccessErr {sz_xieFloAccessErr = 32,};
enum MACRO_sz_xieFloAllocErr {sz_xieFloAllocErr = 32,};
enum MACRO_sz_xieFloBandCombine {sz_xieFloBandCombine = 12,sz_xieFloBandExtract = 28,};
enum MACRO_sz_xieFloBandSelect {sz_xieFloBandSelect = 8,sz_xieFloBlend = 40,};
enum MACRO_sz_xieFloCompare {sz_xieFloCompare = 36,sz_xieFloConstrain = 24,};
enum MACRO_sz_xieFloConvertFromIndex {sz_xieFloConvertFromIndex = 12,};
enum MACRO_sz_xieFloConvertFromRGB {sz_xieFloConvertFromRGB = 12,sz_xieFloConvertToIndex = 20,};
enum MACRO_sz_xieFloConvertToRGB {sz_xieFloConvertToRGB = 12,sz_xieFloConvolve = 24,};
enum MACRO_sz_xieFloDither {sz_xieFloDither = 24,sz_xieFloGeometry = 56,};
enum MACRO_sz_xieFloDomainErr {sz_xieFloDomainErr = 32,};
enum MACRO_sz_xieFloElementErr {sz_xieFloElementErr = 32,};
enum MACRO_sz_xieFloErr {sz_xieFloErr = 32,};
enum MACRO_sz_xieFloEvn {sz_xieFloEvn = 32,};
enum MACRO_sz_xieFloExportClientHistogram {sz_xieFloExportClientHistogram = 20,sz_xieFloExportClientLUT = 32,};
enum MACRO_sz_xieFloExportClientPhoto {sz_xieFloExportClientPhoto = 12,};
enum MACRO_sz_xieFloExportClientROI {sz_xieFloExportClientROI = 8,sz_xieFloExportDrawable = 20,};
enum MACRO_sz_xieFloExportDrawablePlane {sz_xieFloExportDrawablePlane = 20,sz_xieFloExportLUT = 24,};
enum MACRO_sz_xieFloExportPhotomap {sz_xieFloExportPhotomap = 16,sz_xieFloExportROI = 12,};
enum MACRO_sz_xieFloIDErr {sz_xieFloIDErr = 32,};
enum MACRO_sz_xieFloImplementationErr {sz_xieFloImplementationErr = 32,};
enum MACRO_sz_xieFloImportClientROI {sz_xieFloImportClientROI = 8,sz_xieFloImportDrawable = 24,sz_xieFloImportDrawablePlane = 28,};
enum MACRO_sz_xieFloImportLUT {sz_xieFloImportLUT = 8,sz_xieFloImportPhotomap = 12,};
enum MACRO_sz_xieFloImportROI {sz_xieFloImportROI = 8,sz_xieFloArithmetic = 32,};
enum MACRO_sz_xieFloLengthErr {sz_xieFloLengthErr = 32,};
enum MACRO_sz_xieFloLogical {sz_xieFloLogical = 32,sz_xieFloMatchHistogram = 24,};
enum MACRO_sz_xieFloMatchErr {sz_xieFloMatchErr = 32,};
enum MACRO_sz_xieFloMath {sz_xieFloMath = 20,sz_xieFloPasteUp = 28,};
enum MACRO_sz_xieFloOperatorErr {sz_xieFloOperatorErr = 32,};
enum MACRO_sz_xieFloPoint {sz_xieFloPoint = 20,sz_xieFloUnconstrain = 8,};
enum MACRO_sz_xieFloSourceErr {sz_xieFloSourceErr = 32,};
enum MACRO_sz_xieFloTechniqueErr {sz_xieFloTechniqueErr = 32,};
enum MACRO_sz_xieFloValueErr {sz_xieFloValueErr = 32,};
enum MACRO_sz_xieGetClientDataReq {sz_xieGetClientDataReq = 20,sz_xieGetClientDataReply = 32,};
enum MACRO_sz_xieImportObscuredEvn {sz_xieImportObscuredEvn = 32,};
enum MACRO_sz_xieModifyPhotofloReq {sz_xieModifyPhotofloReq = 12,};
enum MACRO_sz_xiePurgeColorListReq {sz_xiePurgeColorListReq = 8,};
enum MACRO_sz_xieQueryColorListReq {sz_xieQueryColorListReq = 8,sz_xieQueryColorListReply = 32,};
enum MACRO_sz_xieQueryPhotofloReq {sz_xieQueryPhotofloReq = 12,sz_xieQueryPhotofloReply = 32,};
enum MACRO_sz_xieQueryPhotomapReq {sz_xieQueryPhotomapReq = 8,sz_xieQueryPhotomapReply = 48,};
enum MACRO_sz_xieQueryTechniquesReq {sz_xieQueryTechniquesReq = 8,sz_xieQueryTechniquesReply = 32,};
enum MACRO_sz_xieRedefinePhotofloReq {sz_xieRedefinePhotofloReq = 12,sz_xiePutClientDataReq = 20,};
enum MACRO_sz_xieReq {sz_xieReq = 4,sz_xieQueryImageExtensionReq = 8,sz_xieQueryImageExtensionReply = 32,};
enum MACRO_sz_xieResourceErr {sz_xieResourceErr = 32,};
enum MACRO_sz_xieTecCIEXYZToRGB {sz_xieTecCIEXYZToRGB = 44,};
enum MACRO_sz_xieTecColorAllocAll {sz_xieTecColorAllocAll = 4,sz_xieTecColorAllocMatch = 8,};
enum MACRO_sz_xieTecColorAllocRequantize {sz_xieTecColorAllocRequantize = 4,sz_xieTecClipScale = 48,};
enum MACRO_sz_xieTecConvolveConstant {sz_xieTecConvolveConstant = 12,sz_xieTecConvolveReplicate = 0,};
enum MACRO_sz_xieTecDecodeG31D {sz_xieTecDecodeG31D = 4,};
enum MACRO_sz_xieTecDecodeG32D {sz_xieTecDecodeG32D = 4,};
enum MACRO_sz_xieTecDecodeG42D {sz_xieTecDecodeG42D = 4,};
enum MACRO_sz_xieTecDecodeJPEGBaseline {sz_xieTecDecodeJPEGBaseline = 4,};
enum MACRO_sz_xieTecDecodeJPEGLossless {sz_xieTecDecodeJPEGLossless = 4,};
enum MACRO_sz_xieTecDecodeTIFF2 {sz_xieTecDecodeTIFF2 = 4,};
enum MACRO_sz_xieTecDecodeTIFFPackBits {sz_xieTecDecodeTIFFPackBits = 4,};
enum MACRO_sz_xieTecDecodeUncompressedSingle {sz_xieTecDecodeUncompressedSingle = 8,sz_xieTecDecodeUncompressedTriple = 16,};
enum MACRO_sz_xieTecDitherErrorDiffusion {sz_xieTecDitherErrorDiffusion = 4,};
enum MACRO_sz_xieTecDitherOrdered {sz_xieTecDitherOrdered = 4,};
enum MACRO_sz_xieTecEncodeG31D {sz_xieTecEncodeG31D = 4,sz_xieTecEncodeG32D = 8,};
enum MACRO_sz_xieTecEncodeG42D {sz_xieTecEncodeG42D = 4,sz_xieTecEncodeJPEGBaseline = 16,};
enum MACRO_sz_xieTecEncodeJPEGLossless {sz_xieTecEncodeJPEGLossless = 8,sz_xieTecEncodeTIFF2 = 4,};
enum MACRO_sz_xieTecEncodeServerChoice {sz_xieTecEncodeServerChoice = 4,};
enum MACRO_sz_xieTecEncodeTIFFPackBits {sz_xieTecEncodeTIFFPackBits = 4,sz_xieTecGamutNone = 0,sz_xieTecGamutClipRGB = 0,sz_xieTecGeomAntialias = 0,};
enum MACRO_sz_xieTecEncodeUncompressedSingle {sz_xieTecEncodeUncompressedSingle = 4,sz_xieTecEncodeUncompressedTriple = 12,};
enum MACRO_sz_xieTecGeomAntialiasByArea {sz_xieTecGeomAntialiasByArea = 4,};
enum MACRO_sz_xieTecGeomAntialiasByLowpass {sz_xieTecGeomAntialiasByLowpass = 4,sz_xieTecGeomBilinearInterpolation = 0,};
enum MACRO_sz_xieTecGeomGaussian {sz_xieTecGeomGaussian = 12,};
enum MACRO_sz_xieTecGeomNearestNeighbor {sz_xieTecGeomNearestNeighbor = 4,sz_xieTecHistogramFlat = 0,};
enum MACRO_sz_xieTecHardClip {sz_xieTecHardClip = 0,sz_xieTecRGBToCIELab = 40,};
enum MACRO_sz_xieTecHistogramGaussian {sz_xieTecHistogramGaussian = 8,};
enum MACRO_sz_xieTecHistogramHyperbolic {sz_xieTecHistogramHyperbolic = 8,sz_xieTecWhiteAdjustNone = 0,};
enum MACRO_sz_xieTecRGBToCIEXYZ {sz_xieTecRGBToCIEXYZ = 40,};
enum MACRO_sz_xieTecRGBToYCC {sz_xieTecRGBToYCC = 28,sz_xieTecYCbCrToRGB = 40,};
enum MACRO_sz_xieTecRGBToYCbCr {sz_xieTecRGBToYCbCr = 36,};
enum MACRO_sz_xieTecWhiteAdjustCIELabShift {sz_xieTecWhiteAdjustCIELabShift = 12,};
enum MACRO_sz_xieTecYCCToRGB {sz_xieTecYCCToRGB = 32,sz_xieTecCIELabToRGB = 44,};
enum MACRO_sz_xieTypAlignment {sz_xieTypAlignment = 1,};
enum MACRO_sz_xieTypArithmeticOp {sz_xieTypArithmeticOp = 1,sz_xieTypColorAllocTechnique = 2,sz_xieTypColorList = 4,};
enum MACRO_sz_xieTypCompareOp {sz_xieTypCompareOp = 1,sz_xieTypConstant = 12,};
enum MACRO_sz_xieTypConstrainTechnique {sz_xieTypConstrainTechnique = 2,};
enum MACRO_sz_xieTypConvertFromRGBTechnique {sz_xieTypConvertFromRGBTechnique = 2,};
enum MACRO_sz_xieTypConvertToRGBTechnique {sz_xieTypConvertToRGBTechnique = 2,};
enum MACRO_sz_xieTypConvolveTechnique {sz_xieTypConvolveTechnique = 2,sz_xieTypDataClass = 1,};
enum MACRO_sz_xieTypDataType {sz_xieTypDataType = 1,sz_xieTypDecodeTechnique = 2,};
enum MACRO_sz_xieTypDitherTechnique {sz_xieTypDitherTechnique = 2,};
enum MACRO_sz_xieTypEncodeTechnique {sz_xieTypEncodeTechnique = 2,sz_xieTypPhotospace = 4,};
enum MACRO_sz_xieTypExportNotify {sz_xieTypExportNotify = 1,};
enum MACRO_sz_xieTypExportState {sz_xieTypExportState = 1,sz_xieTypFloat = 4,};
enum MACRO_sz_xieTypGamutTechnique {sz_xieTypGamutTechnique = 2,};
enum MACRO_sz_xieTypGeometryTechnique {sz_xieTypGeometryTechnique = 2,sz_xieTypHistogramData = 8,};
enum MACRO_sz_xieTypHistogramShape {sz_xieTypHistogramShape = 2,sz_xieTypInterleave = 1,};
enum MACRO_sz_xieTypLUT {sz_xieTypLUT = 4,sz_xieTypMathOp = 1,};
enum MACRO_sz_xieTypLevels {sz_xieTypLevels = 12,};
enum MACRO_sz_xieTypMatrix {sz_xieTypMatrix = 36,sz_xieTypOrientation = 1,};
enum MACRO_sz_xieTypPhotoflo {sz_xieTypPhotoflo = 4,sz_xieTypExecutable = 8,};
enum MACRO_sz_xieTypPhotofloOutcome {sz_xieTypPhotofloOutcome = 1,};
enum MACRO_sz_xieTypPhotofloState {sz_xieTypPhotofloState = 1,sz_xieTypPhotomap = 4,};
enum MACRO_sz_xieTypPhototag {sz_xieTypPhototag = 2,sz_xieTypProcessDomain = 12,sz_xieTypRectangle = 16,};
enum MACRO_sz_xieTypROI {sz_xieTypROI = 4,sz_xieTypServiceClass = 1,};
enum MACRO_sz_xieTypTechniqueGroup {sz_xieTypTechniqueGroup = 1,sz_xieTypTechniqueRec = 8,sz_xieTypTile = 12,};
enum MACRO_sz_xieTypTripleofCARD8 {sz_xieTypTripleofCARD8 = 3,sz_xieTypTripleofCARD16 = 6,sz_xieTypTripleofCARD32 = 12,};
enum MACRO_sz_xieTypWhiteAdjustTechnique {sz_xieTypWhiteAdjustTechnique = 2,sz_xieFloImportClientLUT = 32,sz_xieFloImportClientPhoto = 48,};
enum MACRO_sz_xkbAccessXNotify {sz_xkbAccessXNotify = 32,};
enum MACRO_sz_xkbActionMessage {sz_xkbActionMessage = 32,};
enum MACRO_sz_xkbAnyDoodadWireDesc {sz_xkbAnyDoodadWireDesc = 20,};
enum MACRO_sz_xkbAnyEvent {sz_xkbAnyEvent = 32,};
enum MACRO_sz_xkbBehaviorWireDesc {sz_xkbBehaviorWireDesc = 4,sz_xkbActionWireDesc = 8,sz_xkbGetMapReq = 28,sz_xkbGetMapReply = 40,};
enum MACRO_sz_xkbBellNotify {sz_xkbBellNotify = 32,};
enum MACRO_sz_xkbCompatMapNotify {sz_xkbCompatMapNotify = 32,};
enum MACRO_sz_xkbControlsNotify {sz_xkbControlsNotify = 32,};
enum MACRO_sz_xkbDeviceLedsWireDesc {sz_xkbDeviceLedsWireDesc = 20,};
enum MACRO_sz_xkbDoodadWireDesc {sz_xkbDoodadWireDesc = 20,};
enum MACRO_sz_xkbEvent {sz_xkbEvent = 32,};
enum MACRO_sz_xkbExtensionDeviceNotify {sz_xkbExtensionDeviceNotify = 32,};
enum MACRO_sz_xkbGetCompatMapReply {sz_xkbGetCompatMapReply = 32,sz_xkbSetCompatMapReq = 16,sz_xkbGetIndicatorStateReq = 8,};
enum MACRO_sz_xkbGetControlsReply {sz_xkbGetControlsReply = 92,sz_xkbSetControlsReq = 100,};
enum MACRO_sz_xkbGetDeviceInfoReq {sz_xkbGetDeviceInfoReq = 16,sz_xkbGetDeviceInfoReply = 32,};
enum MACRO_sz_xkbGetGeometryReq {sz_xkbGetGeometryReq = 12,sz_xkbGetGeometryReply = 32,};
enum MACRO_sz_xkbGetIndicatorMapReply {sz_xkbGetIndicatorMapReply = 32,sz_xkbIndicatorMapWireDesc = 12,};
enum MACRO_sz_xkbGetIndicatorStateReply {sz_xkbGetIndicatorStateReply = 32,sz_xkbGetIndicatorMapReq = 12,};
enum MACRO_sz_xkbGetKbdByNameReq {sz_xkbGetKbdByNameReq = 12,sz_xkbGetKbdByNameReply = 32,};
enum MACRO_sz_xkbGetNamesReply {sz_xkbGetNamesReply = 32,sz_xkbSetNamesReq = 28,};
enum MACRO_sz_xkbGetStateReq {sz_xkbGetStateReq = 8,sz_xkbGetStateReply = 32,};
enum MACRO_sz_xkbIndicatorDoodadWireDesc {sz_xkbIndicatorDoodadWireDesc = 20,};
enum MACRO_sz_xkbIndicatorNotify {sz_xkbIndicatorNotify = 32,};
enum MACRO_sz_xkbKTMapEntryWireDesc {sz_xkbKTMapEntryWireDesc = 8,sz_xkbKTSetMapEntryWireDesc = 4,};
enum MACRO_sz_xkbKeyWireDesc {sz_xkbKeyWireDesc = 8,};
enum MACRO_sz_xkbLatchLockStateReq {sz_xkbLatchLockStateReq = 16,sz_xkbGetControlsReq = 8,};
enum MACRO_sz_xkbListComponentsReq {sz_xkbListComponentsReq = 8,sz_xkbListComponentsReply = 32,};
enum MACRO_sz_xkbLogoDoodadWireDesc {sz_xkbLogoDoodadWireDesc = 20,};
enum MACRO_sz_xkbMapNotify {sz_xkbMapNotify = 32,};
enum MACRO_sz_xkbModsWireDesc {sz_xkbModsWireDesc = 4,sz_xkbKeyTypeWireDesc = 8,};
enum MACRO_sz_xkbNamesNotify {sz_xkbNamesNotify = 32,};
enum MACRO_sz_xkbNewKeyboardNotify {sz_xkbNewKeyboardNotify = 32,};
enum MACRO_sz_xkbOutlineWireDesc {sz_xkbOutlineWireDesc = 4,sz_xkbShapeWireDesc = 8,sz_xkbSectionWireDesc = 20,};
enum MACRO_sz_xkbOverlayKeyWireDesc {sz_xkbOverlayKeyWireDesc = 8,sz_xkbShapeDoodadWireDesc = 20,};
enum MACRO_sz_xkbOverlayWireDesc {sz_xkbOverlayWireDesc = 8,sz_xkbOverlayRowWireDesc = 4,};
enum MACRO_sz_xkbPerClientFlagsReq {sz_xkbPerClientFlagsReq = 28,sz_xkbPerClientFlagsReply = 32,};
enum MACRO_sz_xkbPointWireDesc {sz_xkbPointWireDesc = 4,};
enum MACRO_sz_xkbRowWireDesc {sz_xkbRowWireDesc = 8,};
enum MACRO_sz_xkbSelectEventsReq {sz_xkbSelectEventsReq = 16,sz_xkbBellReq = 28,};
enum MACRO_sz_xkbSetDeviceInfoReq {sz_xkbSetDeviceInfoReq = 12,sz_xkbSetDebuggingFlagsReq = 24,sz_xkbSetDebuggingFlagsReply = 32,};
enum MACRO_sz_xkbSetGeometryReq {sz_xkbSetGeometryReq = 28,};
enum MACRO_sz_xkbSetIndicatorMapReq {sz_xkbSetIndicatorMapReq = 12,sz_xkbGetNamedIndicatorReq = 16,sz_xkbGetNamedIndicatorReply = 32,};
enum MACRO_sz_xkbSetNamedIndicatorReq {sz_xkbSetNamedIndicatorReq = 32,sz_xkbGetNamesReq = 12,};
enum MACRO_sz_xkbStateNotify {sz_xkbStateNotify = 32,};
enum MACRO_sz_xkbSymInterpretWireDesc {sz_xkbSymInterpretWireDesc = 16,sz_xkbGetCompatMapReq = 12,};
enum MACRO_sz_xkbSymMapWireDesc {sz_xkbSymMapWireDesc = 8,sz_xkbVModMapWireDesc = 4,};
enum MACRO_sz_xkbTextDoodadWireDesc {sz_xkbTextDoodadWireDesc = 20,};
enum MACRO_sz_xkbUseExtensionReq {sz_xkbUseExtensionReq = 8,sz_xkbUseExtensionReply = 32,};
enum MACRO_sz_xkmAnyDoodadDesc {sz_xkmAnyDoodadDesc = 16,};
enum MACRO_sz_xkmBehaviorDesc {sz_xkmBehaviorDesc = 4,sz_xkmActionDesc = 8,XkmKeyHasTypes = 15,};
enum MACRO_sz_xkmDoodadDesc {sz_xkmDoodadDesc = 16,};
enum MACRO_sz_xkmIndicatorDoodadDesc {sz_xkmIndicatorDoodadDesc = 16,};
enum MACRO_sz_xkmKeyDesc {sz_xkmKeyDesc = 8,sz_xkmOverlayDesc = 4,};
enum MACRO_sz_xkmKeySymMapDesc {sz_xkmKeySymMapDesc = 4,sz_xkmIndicatorMapDesc = 12,sz_xkmGeometryDesc = 20,};
enum MACRO_sz_xkmKeyTypeDesc {sz_xkmKeyTypeDesc = 8,sz_xkmKTMapEntryDesc = 4,};
enum MACRO_sz_xkmLogoDoodadDesc {sz_xkmLogoDoodadDesc = 16,};
enum MACRO_sz_xkmModsDesc {sz_xkmModsDesc = 4,};
enum MACRO_sz_xkmOutlineDesc {sz_xkmOutlineDesc = 4,};
enum MACRO_sz_xkmOverlayRowDesc {sz_xkmOverlayRowDesc = 4,sz_xkmOverlayKeyDesc = 8,sz_xkmShapeDoodadDesc = 16,};
enum MACRO_sz_xkmPointDesc {sz_xkmPointDesc = 4,};
enum MACRO_sz_xkmRowDesc {sz_xkmRowDesc = 8,};
enum MACRO_sz_xkmSectionInfo {sz_xkmSectionInfo = 8,};
enum MACRO_sz_xkmShapeDesc {sz_xkmShapeDesc = 4,sz_xkmSectionDesc = 16,};
enum MACRO_sz_xkmTextDoodadDesc {sz_xkmTextDoodadDesc = 16,};
enum MACRO_sz_xkmVModMapDesc {sz_xkmVModMapDesc = 4,sz_xkmSymInterpretDesc = 16,};
enum MACRO_sz_xrgb {sz_xrgb = 8,sz_xGenericReply = 32,sz_xGetWindowAttributesReply = 44,};
enum MACRO_sz_xvFormat {sz_xvFormat = 8,};
enum MACRO_sz_xvGetPortAttributeReply {sz_xvGetPortAttributeReply = 32,};
enum MACRO_sz_xvGetPortAttributeReq {sz_xvGetPortAttributeReq = 12,sz_xvQueryBestSizeReq = 20,sz_xvQueryExtensionReply = 32,};
enum MACRO_sz_xvGetStillReq {sz_xvGetStillReq = 32,sz_xvGrabPortReq = 12,};
enum MACRO_sz_xvGetVideoReq {sz_xvGetVideoReq = 32,};
enum MACRO_sz_xvGrabPortReply {sz_xvGrabPortReply = 32,};
enum MACRO_sz_xvPutStillReq {sz_xvPutStillReq = 32,};
enum MACRO_sz_xvQueryAdaptorsReply {sz_xvQueryAdaptorsReply = 32,};
enum MACRO_sz_xvQueryBestSizeReply {sz_xvQueryBestSizeReply = 32,};
enum MACRO_sz_xvQueryEncodingsReply {sz_xvQueryEncodingsReply = 32,};
enum MACRO_sz_xvQueryEncodingsReq {sz_xvQueryEncodingsReq = 8,sz_xvPutVideoReq = 32,};
enum MACRO_sz_xvQueryExtensionReq {sz_xvQueryExtensionReq = 4,sz_xvQueryAdaptorsReq = 8,};
enum MACRO_sz_xvRational {sz_xvRational = 8,sz_xvAdaptorInfo = 12,sz_xvEncodingInfo = 20,};
enum MACRO_sz_xvSelectPortNotifyReq {sz_xvSelectPortNotifyReq = 12,};
enum MACRO_sz_xvSelectVideoNotifyReq {sz_xvSelectVideoNotifyReq = 12,};
enum MACRO_sz_xvStopVideoReq {sz_xvStopVideoReq = 12,sz_xvSetPortAttributeReq = 16,};
enum MACRO_sz_xvUngrabPortReq {sz_xvUngrabPortReq = 12,};
enum MACRO_tiNil {tiNil = 0,itqMax = 6,};
enum MACRO_tqNil {tqNil = 0,tqPtr = 1,tqProc = 2,tqArray = 3,tqFar = 4,tqVol = 5,tqConst = 6,tqRef = 7,tqArray_64 = 8,tqShar = 10,tqSharArr_64 = 11,tqMax = 16,};
enum MACRO_ult {ult_FIRST = 0,ult_LAST = 257,};
enum MACRO_valueNil {valueNil = 0,};
enum MACRO_vm {vm_pager_null = 0,};
enum MACRO_xFalse {xFalse = 0,ELFlagFocus = 1,ELFlagSameScreen = 2,};
enum MACRO_xTrue {xTrue = 1,};
enum MACRO_xieEarliestMinorVersion {xieEarliestMinorVersion = 0,};
enum MACRO_xieElemImportClientLUT {xieElemImportClientLUT = 1,xieElemImportClientPhoto = 2,xieElemImportClientROI = 3,xieElemImportDrawable = 4,xieElemImportDrawablePlane = 5,xieElemImportLUT = 6,xieElemImportPhotomap = 7,xieElemImportROI = 8,xieElemArithmetic = 9,xieElemBandCombine = 10,xieElemBandExtract = 11,xieElemBandSelect = 12,xieElemBlend = 13,xieElemCompare = 14,xieElemConstrain = 15,xieElemConvertFromIndex = 16,xieElemConvertFromRGB = 17,xieElemConvertToIndex = 18,xieElemConvertToRGB = 19,xieElemConvolve = 20,xieElemDither = 21,xieElemGeometry = 22,xieElemLogical = 23,xieElemMatchHistogram = 24,xieElemMath = 25,xieElemPasteUp = 26,xieElemPoint = 27,xieElemUnconstrain = 28,xieElemExportClientHistogram = 29,xieElemExportClientLUT = 30,xieElemExportClientPhoto = 31,xieElemExportClientROI = 32,xieElemExportDrawable = 33,xieElemExportDrawablePlane = 34,xieElemExportLUT = 35,xieElemExportPhotomap = 36,xieElemExportROI = 37,};
enum MACRO_xieErrNoColorList {xieErrNoColorList = 0,xieErrNoLUT = 1,xieErrNoPhotoflo = 2,xieErrNoPhotomap = 3,xieErrNoPhotospace = 4,xieErrNoROI = 5,xieErrNoFlo = 6,xieNumErrors = 7,};
enum MACRO_xieErrNoFloAccess {xieErrNoFloAccess = 1,xieErrNoFloAlloc = 2,xieErrNoFloColormap = 3,xieErrNoFloColorList = 4,xieErrNoFloDomain = 5,xieErrNoFloDrawable = 6,xieErrNoFloElement = 7,xieErrNoFloGC = 8,xieErrNoFloID = 9,xieErrNoFloLength = 10,xieErrNoFloLUT = 11,xieErrNoFloMatch = 12,xieErrNoFloOperator = 13,xieErrNoFloPhotomap = 14,xieErrNoFloROI = 15,xieErrNoFloSource = 16,xieErrNoFloTechnique = 17,xieErrNoFloValue = 18,xieErrNoFloImplementation = 19,};
enum MACRO_xieEvnNoColorAlloc {xieEvnNoColorAlloc = 0,xieEvnNoDecodeNotify = 1,xieEvnNoExportAvailable = 2,xieEvnNoImportObscured = 3,xieEvnNoPhotofloDone = 4,xieNumEvents = 5,};
enum MACRO_xieLatestMinorVersion {xieLatestMinorVersion = 0,XIE_FULL = 1,};
enum MACRO_xieMajorVersion {xieMajorVersion = 5,};
enum MACRO_xieMaxElem {xieMaxElem = 37,};
enum MACRO_xieMinorVersion {xieMinorVersion = 0,};
enum MACRO_xieNumFloErrors {xieNumFloErrors = 19,};
enum MACRO_xieNumProtoReq {xieNumProtoReq = 26,};
enum MACRO_xieValAdd {xieValAdd = 1,xieValSub = 2,xieValSubRev = 3,xieValMul = 4,xieValDiv = 5,xieValDivRev = 6,xieValMin = 7,xieValMax = 8,xieValGamma = 9,};
enum MACRO_xieValAlignable {xieValAlignable = 1,xieValArbitrary = 2,};
enum MACRO_xieValBandByPixel {xieValBandByPixel = 1,xieValBandByPlane = 2,};
enum MACRO_xieValCIELabToRGB {xieValCIELabToRGB = 2,xieValCIEXYZToRGB = 4,xieValYCbCrToRGB = 6,xieValYCCToRGB = 8,};
enum MACRO_xieValColorAllocDefault {xieValColorAllocDefault = 0,xieValColorAllocAll = 2,xieValColorAllocMatch = 4,xieValColorAllocRequantize = 6,};
enum MACRO_xieValConstrainClipScale {xieValConstrainClipScale = 2,xieValConstrainHardClip = 4,};
enum MACRO_xieValConstrained {xieValConstrained = 1,xieValUnconstrained = 2,};
enum MACRO_xieValConvolveDefault {xieValConvolveDefault = 0,xieValConvolveConstant = 2,xieValConvolveReplicate = 4,};
enum MACRO_xieValDecodeUncompressedSingle {xieValDecodeUncompressedSingle = 2,xieValDecodeUncompressedTriple = 3,xieValDecodeG31D = 4,xieValDecodeG32D = 6,xieValDecodeG42D = 8,xieValDecodeJPEGBaseline = 10,xieValDecodeJPEGLossless = 12,xieValDecodeTIFF2 = 14,xieValDecodeTIFFPackBits = 16,};
enum MACRO_xieValDefault {xieValDefault = 0,xieValAll = 1,xieValColorAlloc = 2,xieValConstrain = 4,xieValConvertFromRGB = 6,xieValConvertToRGB = 8,xieValConvolve = 10,xieValDecode = 12,xieValDither = 14,xieValEncode = 16,xieValGamut = 18,xieValGeometry = 20,xieValHistogram = 22,xieValWhiteAdjust = 24,};
enum MACRO_xieValDisable {xieValDisable = 1,xieValFirstData = 2,xieValNewData = 3,};
enum MACRO_xieValDitherDefault {xieValDitherDefault = 0,xieValDitherErrorDiffusion = 2,xieValDitherOrdered = 4,};
enum MACRO_xieValEncodeServerChoice {xieValEncodeServerChoice = 1,xieValEncodeUncompressedSingle = 2,xieValEncodeUncompressedTriple = 3,xieValEncodeG31D = 4,xieValEncodeG32D = 6,xieValEncodeG42D = 8,xieValEncodeJPEGBaseline = 10,xieValEncodeJPEGLossless = 12,xieValEncodeTIFF2 = 14,xieValEncodeTIFFPackBits = 16,};
enum MACRO_xieValExp {xieValExp = 1,xieValLn = 2,xieValLog2 = 3,xieValLog10 = 4,xieValSquare = 5,xieValSqrt = 6,};
enum MACRO_xieValExportDone {xieValExportDone = 1,xieValExportMore = 2,xieValExportEmpty = 3,xieValExportError = 4,};
enum MACRO_xieValFavorDown {xieValFavorDown = 1,xieValFavorUp = 2,xieValRoundNW = 3,xieValRoundNE = 4,xieValRoundSE = 5,xieValRoundSW = 6,};
enum MACRO_xieValFloSuccess {xieValFloSuccess = 1,xieValFloAbort = 2,xieValFloError = 3,};
enum MACRO_xieValFull {xieValFull = 1,xieValDIS = 2,xieValMaxBands = 3,};
enum MACRO_xieValGamutDefault {xieValGamutDefault = 0,xieValGamutNone = 1,xieValGamutClipRGB = 2,};
enum MACRO_xieValGeomDefault {xieValGeomDefault = 0,xieValGeomAntialias = 2,xieValGeomAntialiasByArea = 4,xieValGeomAntialiasByLPF = 6,xieValGeomBilinearInterp = 8,xieValGeomGaussian = 10,xieValGeomNearestNeighbor = 12,};
enum MACRO_xieValHistogramFlat {xieValHistogramFlat = 2,xieValHistogramGaussian = 4,xieValHistogramHyperbolic = 6,};
enum MACRO_xieValInactive {xieValInactive = 1,xieValActive = 2,xieValNonexistent = 3,};
enum MACRO_xieValLSFirst {xieValLSFirst = 1,xieValMSFirst = 2,};
enum MACRO_xieValLT {xieValLT = 1,xieValLE = 2,xieValEQ = 3,xieValNE = 4,xieValGT = 5,xieValGE = 6,};
enum MACRO_xieValMaxTechGroup {xieValMaxTechGroup = 24,};
enum MACRO_xieValPredictorNone {xieValPredictorNone = 0,xieValPredictorA = 1,xieValPredictorB = 2,xieValPredictorC = 3,xieValPredictorABC = 4,xieValPredictorABC2 = 5,xieValPredictorBAC2 = 6,xieValPredictorAB2 = 7,};
enum MACRO_xieValPreferDefault {xieValPreferDefault = 0,xieValPreferSpace = 1,xieValPreferTime = 2,};
enum MACRO_xieValRGBToCIELab {xieValRGBToCIELab = 2,xieValRGBToCIEXYZ = 4,xieValRGBToYCbCr = 6,xieValRGBToYCC = 8,};
enum MACRO_xieValSingleBand {xieValSingleBand = 1,xieValTripleBand = 2,};
enum MACRO_xieValWhiteAdjustDefault {xieValWhiteAdjustDefault = 0,xieValWhiteAdjustNone = 1,xieValWhiteAdjustCIELabShift = 2,};
enum MACRO_xv {xv_QueryExtension = 0,xv_QueryAdaptors = 1,xv_QueryEncodings = 2,xv_GrabPort = 3,xv_UngrabPort = 4,xv_PutVideo = 5,xv_PutStill = 6,xv_GetVideo = 7,xv_GetStill = 8,xv_StopVideo = 9,xv_SelectVideoNotify = 10,xv_SelectPortNotify = 11,xv_QueryBestSize = 12,xv_SetPortAttribute = 13,xv_GetPortAttribute = 14,xv_LastRequest = 15,};
enum MACRO_xvNumRequests {xvNumRequests = 15,};
enum MACRO_zeroPosition {zeroPosition = 0,XawLF = 10,XawCR = 13,};
typedef int MC_BOOL;
typedef struct mc_changer MC_CHANGER;
typedef struct mc_diag_entry MC_DIAG_ENT;
typedef element_addr_t MC_ELEMENT_OBJ;
typedef enum $E03C6446F0CC9859628A2051D308D0DD MC_ERROR_CODE;
typedef struct mc_map MC_MAP;
typedef struct mc_stat MC_STAT;
typedef struct mc_stat_hdr MC_STAT_HDR;
typedef enum $8B82F0E1C56011458915D67932773AAA MC_TYPES;
typedef struct mem_desc MEM_DESC;
typedef struct _method METHOD;
typedef struct mib_ptr MIB_PTR;
typedef struct mib_rel MIB_REL;
typedef struct mint MINT;
struct MKDIR3args {diropargs3 where;sattr3 attributes;};
struct MKDIR3res {nfsstat3 status;union MKDIR3res::$7AAE3EB51BE7D5127C92F993C6C93453 res_u;};
union MKDIR3res::$7AAE3EB51BE7D5127C92F993C6C93453 {MKDIR3resok ok;MKDIR3resfail fail;};
struct MKDIR3resfail {wcc_data dir_wcc;};
struct MKDIR3resok {post_op_fh3 obj;post_op_attr obj_attributes;wcc_data dir_wcc;};
struct MKNOD3args {diropargs3 where;mknoddata3 what;};
struct MKNOD3res {nfsstat3 status;union MKNOD3res::$74BE56E58793F3A8CB87CC162DE62117 res_u;};
union MKNOD3res::$74BE56E58793F3A8CB87CC162DE62117 {MKNOD3resok ok;MKNOD3resfail fail;};
struct MKNOD3resfail {wcc_data dir_wcc;};
struct MKNOD3resok {post_op_fh3 obj;post_op_attr obj_attributes;wcc_data dir_wcc;};
enum MLD_INTERNAL_SYMS {MLD_INTER_INTERNAL_SYM = 0x0,MLD_BPTR_INTERNAL_SYM = 0x1,MLD_CONTROL_INTERNAL_SYM = 0x2,MLD_VPTR_INTERNAL_SYM = 0x3,MLD_BRACKETED_CONTROL_INTERNAL_SYM = 0x4,MLD_RESULT_POINTER_INTERNAL_SYM = 0x5,MLD_BRACKETED_RESULT_POINTER_INTERNAL_SYM = 0x6,MLD_BRACKETED_RESULT_INTERNAL_SYM = 0x7,MLD_RESULT_INTERNAL_SYM = 0x8,MLD_THIS_INTERNAL_SYM = 0x9,MLD_VTBL_INTERNAL_SYM = 0xA,MLD_BTBL_INTERNAL_SYM = 0xB,MLD_EVDW_INTERNAL_SYM = 0xC,MLD_EXTERNAL_DESTRUCTOR_FUNCTOR_LIST_INTERNAL_SYM = 0xD,MLD_FN_INTERNAL_SYM = 0xE,MLD_FW_INTERNAL_SYM = 0xF,MLD_INIT_INTERNAL_SYM = 0x10,MLD_IVIW_INTERNAL_SYM = 0x11,MLD_THUNK_INTERNAL_SYM = 0x12,MLD_CTYPE_INTERNAL_SYM = 0x13,MLD_T_INTERNAL_SYM = 0x14,MLD_ELLIPSES_INTERNAL_SYM = 0x15,};
struct MLD_address {struct MLD_qualification *qualifications;char *type_name;};
struct MLD_array {int dimension;struct MLD_type *type_modified;};
struct MLD_complex {int mangled_template_name;union MLD_complex::$FB4882CE685EC2156ECB03777CE93714 name;};
union MLD_complex::$FB4882CE685EC2156ECB03777CE93714 {char *structure_name;struct MLD_mangled_template_name *template_name;};
struct MLD_function {struct MLD_type *args;struct MLD_type *return_type;struct MLD_type_modifiers *tm_list;struct MLD_function *ptr_to_function_type;};
enum MLD_function_name_types {MLD_NO_FUNCTION_NAME = 0x0,MLD_NORMAL_FUNCTION_NAME = 0x1,MLD_OPERATOR_FUNCTION_NAME = 0x2,MLD_CONSTRUCTOR_FUNCTION_NAME = 0x3,MLD_DESTRUCTOR_FUNCTION_NAME = 0x4,MLD_CONVERSION_OPERATOR_FUNCTION_NAME = 0x5,};
struct MLD_internalNameEntry {char *s;MLD_internalPos ip;int arg;};
typedef enum $69A85461EA42125C0C0C9DE2AB77B296 MLD_internalPos;
struct MLD_mangled_function_name {enum MLD_function_name_types function_name_type;union MLD_mangled_function_name::$F08399792819661ABFEA1198F4CC3D39 id;struct MLD_type_modifiers *tm_list;struct MLD_qualification *qualifications;struct MLD_type *args;struct MLD_type *rtn;};
union MLD_mangled_function_name::$F08399792819661ABFEA1198F4CC3D39 {char *identifier;struct MLD_type *conversion_operator_type;};
struct MLD_mangled_name {enum MLD_mangled_name_types mangled_name_type;union MLD_mangled_name::$AE1BD726583AB4F4230813A6A9F1B909 name;};
union MLD_mangled_name::$AE1BD726583AB4F4230813A6A9F1B909 {struct MLD_mangled_function_name *funct_name;struct MLD_mangled_template_name *templ_name;struct MLD_mangled_variable_name *var_name;char *info;};
enum MLD_mangled_name_types {MLD_NO_MANGLED_NAME = 0x0,MLD_FUNCTION_MANGLED_NAME = 0x1,MLD_TEMPLATE_MANGLED_NAME = 0x2,MLD_VARIABLE_MANGLED_NAME = 0x3,MLD_VIRTUAL_TABLE_NAME = 0x4,MLD_PROMOTED_ENTITY_NAME = 0x5,MLD_RUNTIMETYPE_INFO_NAME = 0x6,MLD_INIT_INTERNAL_NAME = 0x7,MLD_FINI_INTERNAL_NAME = 0x8,};
struct MLD_mangled_template_name {char *identifier;struct MLD_type *args;};
struct MLD_mangled_variable_name {char *identifier;struct MLD_qualification *qualifications;};
struct MLD_nontype {int is_address;struct MLD_qualification *qualifications;char *nontype_name;};
struct MLD_pointer {struct MLD_type *type_modified;};
struct MLD_pointer_to_member {struct MLD_qualification *qualifications;struct MLD_type *type_modified;};
struct MLD_qualification {struct MLD_complex *q;struct MLD_qualification *next;};
struct MLD_reference {struct MLD_type *type_modified;};
struct MLD_type {struct MLD_type_modifiers *tm_list;struct MLD_unmodified_type *ut;struct MLD_type *repeat_type;int repeat_count;struct MLD_type *next;};
struct MLD_type_modifiers {int const_tm;int signed_tm;int unsigned_tm;int volatile_tm;int unaligned_tm;};
enum MLD_type_type {MLD_NO_TYPE = 0x0,MLD_BASIC_TYPE = 0x1,MLD_COMPLEX_TYPE = 0x2,MLD_POINTER_TYPE = 0x3,MLD_REFERENCE_TYPE = 0x4,MLD_ARRAY_TYPE = 0x5,MLD_FUNCTION_TYPE = 0x6,MLD_POINTER_TO_MEMBER_TYPE = 0x7,MLD_CONSTANT_TYPE = 0x8,MLD_ADDRESS_TYPE = 0x9,MLD_NONTYPE_TYPE = 0xA,};
struct MLD_unmodified_type {int type_of_type;union MLD_unmodified_type::$37F9411A806F07CDF53518413E83D872 the_type;};
union MLD_unmodified_type::$37F9411A806F07CDF53518413E83D872 {char *type_name;int basic;struct MLD_qualification *complex;struct MLD_unmodified_type::$37F9411A806F07CDF53518413E83D872::MLD_nontype *nontype;struct MLD_unmodified_type::$37F9411A806F07CDF53518413E83D872::MLD_address *address;struct MLD_pointer *pointer;struct MLD_reference *reference;struct MLD_array *array;struct MLD_function *function;struct MLD_pointer_to_member *ptr_to_member;};
typedef struct _Mouse MOUSE_STATUS;
typedef struct mss MSS;
typedef void (*MakePositionVisibleProc)(XmTextWidget, XmTextPosition);
typedef unsigned __int64 Mask;
typedef Boolean (*MeasureLineProc)(XmTextWidget, LineNum, XmTextPosition, XmTextPosition *, LineTableExtraRec **);
typedef struct _MemHdr MemHdr;
typedef struct _MemHdr *MemHdrPtr;
typedef struct _MenuButtonClass MenuButtonClassPart;
typedef struct _MenuButtonClassRec MenuButtonClassRec;
typedef struct $C0DFFD4AC779B92FFB10B5245DFA6449 MenuButtonPart;
typedef struct _MenuButtonRec MenuButtonRec;
typedef struct _MenuButtonRec *MenuButtonWidget;
typedef struct _MenuButtonClassRec *MenuButtonWidgetClass;
typedef struct $4ADBCAB7A61B5E3CC2B2B905B6ABF4BA Min_adspec_t;
typedef unsigned int Modifiers;
typedef struct $9BD11453D851B840D226BDE30A5759A2 MotifWmHints;
typedef struct $F6C3C1B525E5D9083992CA7BC940FFA7 MotifWmInfo;
typedef Boolean (*MoveLinesProc)(XmTextWidget, LineNum, LineNum, LineNum);
typedef struct _MultiPiece MultiPiece;
typedef struct _MultiSinkClassPart MultiSinkClassPart;
typedef struct _MultiSinkClassRec MultiSinkClassRec;
typedef struct _MultiSinkRec *MultiSinkObject;
typedef struct _MultiSinkClassRec *MultiSinkObjectClass;
typedef struct $ACA20A28C2E2C5341712D35B9B2BDC2C MultiSinkPart;
typedef struct _MultiSinkRec MultiSinkRec;
typedef struct _MultiSrcClassPart MultiSrcClassPart;
typedef struct _MultiSrcClassRec MultiSrcClassRec;
typedef struct _MultiSrcRec *MultiSrcObject;
typedef struct _MultiSrcClassRec *MultiSrcObjectClass;
typedef struct _MultiSrcPart MultiSrcPart;
typedef struct _MultiSrcRec MultiSrcRec;
typedef XID Multibuffer;
typedef MotifWmHints MwmHints;
typedef MotifWmInfo MwmInfo;
enum NPmode {NPMODE_PASS = 0x0,NPMODE_DROP = 0x1,NPMODE_ERROR = 0x2,NPMODE_QUEUE = 0x3,};
typedef struct obj OBJ;
typedef struct _object OBJECT;
typedef struct obj_type OBJ_TYPE;
typedef struct _oct OCT;
typedef struct _oid OID;
typedef coff_byte OPTR;
typedef struct _ObjectRec *Object;
typedef struct _ObjectClassRec *ObjectClass;
typedef struct $DE186F16E7B21B4F63B6FFA448A2AD3A *ObjectClassExtension;
typedef struct $DE186F16E7B21B4F63B6FFA448A2AD3A ObjectClassExtensionRec;
typedef struct _ObjectClassPart ObjectClassPart;
typedef struct _ObjectClassRec ObjectClassRec;
typedef struct _ObjectPart ObjectPart;
typedef struct _ObjectRec ObjectRec;
typedef enum $5BC141063E07A2854A710E771DE9E012 OnOrOff;
typedef struct _OnTheSpotData *OnTheSpotData;
typedef struct _OnTheSpotData OnTheSpotDataRec;
typedef struct _OnTheSpotDataTW OnTheSpotDataRecTW;
typedef struct _OnTheSpotDataTW *OnTheSpotDataTW;
typedef XtPointer Opaque;
typedef struct _OutputRec *Output;
typedef void (*OutputCreateProc)(Widget, ArgList, Cardinal);
typedef struct _OutputDataRec *OutputData;
typedef struct _OutputDataRec OutputDataRec;
typedef struct _OutputRec OutputRec;
typedef struct $EA67C4467E5D392AEC3890F142F1A94F OverrideShellClassPart;
typedef struct _OverrideShellClassRec OverrideShellClassRec;
typedef struct $E019DD19C3E276A39E4768CCE95A0FD0 OverrideShellPart;
typedef struct $39A4136BB030D7809586100094537552 OverrideShellRec;
typedef struct $39A4136BB030D7809586100094537552 *OverrideShellWidget;
typedef struct _OverrideShellClassRec *OverrideShellWidgetClass;
typedef union pad_u32 PAD_U32;
struct PATHCONF3args {nfs_fh3 object;};
struct PATHCONF3res {nfsstat3 status;union PATHCONF3res::$13536796C3FFAE43AF7BA7B43E22E21C res_u;};
union PATHCONF3res::$13536796C3FFAE43AF7BA7B43E22E21C {PATHCONF3resok ok;PATHCONF3resfail fail;};
struct PATHCONF3resfail {post_op_attr obj_attributes;};
struct PATHCONF3resok {post_op_attr obj_attributes;uint32 link_max;uint32 name_max;int no_trunc;int chown_restricted;int case_insensitive;int case_preserving;};
typedef struct sigcontext *PCONTEXT;
typedef CONTEXT_POINTERS *PCONTEXT_POINTERS;
typedef struct pdr PDR;
typedef union $45D3800369E9F466ED3C6A1362FEE91C PEXArrayOfColor;
typedef union $1FF45F353514EEB46E2B132E985977DC PEXArrayOfCoord;
typedef union $FBD4101F087A04B0F54F996301A8D934 PEXArrayOfFacetData;
typedef union $ED959A5A2BB10F5D26CE5DF948BCCD65 PEXArrayOfVertex;
typedef unsigned __int64 PEXBitmask;
typedef unsigned __int16 PEXBitmaskShort;
typedef struct _EXCEPTION_POINTERS *PEXCEPTION_POINTERS;
typedef union $62C62690197EE8635B2E0F18FBF9AEEA PEXColor;
typedef struct $0156C81EE6468A8027946F1322C9006F PEXColorApproxEntry;
typedef struct $393C16A032292777F0C3725FFB2C0008 PEXColorCIE;
typedef struct $010E2232FCDAF4D2B313A37D19ED5DA2 PEXColorCIENormal;
typedef PEXColorSpecifier PEXColorEntry;
typedef struct $F693157FC14BE125AA101C7D6E91496D PEXColorHLS;
typedef struct $8DDC7EA093C1315834F4EBDF0AEDD58E PEXColorHLSNormal;
typedef struct $90B0CF3FB4D6E3DF758C531B060A7611 PEXColorHSV;
typedef struct $61D94195C5377432757C9CB67F09E051 PEXColorHSVNormal;
typedef struct $D674F4D338C61D0ED8D9CD38769561E7 PEXColorIndexed;
typedef struct $E7AA23F611FA24FC34569631C297DAAA PEXColorIndexedNormal;
typedef struct $196A900E1F8FC6D65F3C04EA8B9471C8 PEXColorRGB;
typedef struct $9B2BA16EFD6C8F08FE429D5BCB530166 PEXColorRGB16;
typedef struct $95316FB0E037E5BEDA277A6691A89583 PEXColorRGB16Normal;
typedef struct $B011A326D3A42EEEADED9F4719276A90 PEXColorRGB8;
typedef struct $925D3B71EB59752478F4626DAF3C7511 PEXColorRGB8Normal;
typedef struct $431927D121A472D7E8E49D39256862BD PEXColorRGBNormal;
typedef struct $16FF9A5400879BBC62C7CEBA17AF7CBD PEXColorSpecifier;
typedef __int16 PEXColorType;
typedef __int16 PEXComposition;
typedef struct $28B66B4EFFBFED5B388B1B96F1A4FD3D PEXConnectivityData;
typedef unsigned __int8 PEXContourHint;
typedef struct $393C16A032292777F0C3725FFB2C0008 PEXCoord;
typedef struct $38C3DEC81229B66F67FB6D350D75FF5A PEXCoord2D;
typedef struct $91D1B2149FAC90180ECB9AC277F76009 PEXCoord4D;
typedef unsigned __int16 PEXCoordType;
typedef unsigned __int16 PEXCullMode;
typedef struct $1A9858AACCCCA8E72719BF196EF9BC84 PEXCurveApprox;
typedef struct $11C63DB979B6BE10B413268C7E983714 PEXDepthCueEntry;
typedef struct $B61CB2720769E6DAC3F14C3B2E6265E6 PEXDeviceCoord;
typedef struct $13C78DD7EDF1CF1C4AE9B0D54E891AA2 PEXDeviceCoord2D;
typedef struct $715278DC56732B37E2BDDF8431464358 PEXDeviceRect;
typedef unsigned __int8 PEXDynamicType;
typedef struct $332DAF04ECBC04920B62E656819721B6 PEXEdgeBundleEntry;
typedef struct $16E48E418642334D45E0461DEC9DAADD PEXElementInfo;
typedef struct $C9F171AE0A278C39B483C218A7E93882 PEXElementRef;
typedef struct $1E0AC79C276BFECF5B852A2587846162 PEXEncodedTextData;
typedef struct $AE9E187A01B4028B24F1B3B575111C79 PEXEnumTypeDesc;
typedef __int16 PEXEnumTypeIndex;
typedef struct $12F27D3D7D6F36D70F4985506E4EBDA8 PEXExtensionInfo;
typedef float PEXFLOAT;
typedef union $EDD630C58B1D6814C622F38D5D7997FF PEXFacetData;
typedef XID PEXFont;
typedef struct $AC9491411C1381EE1D3534B37CEC23E4 PEXFontInfo;
typedef struct $B32090F8F7240FC94A31BFF29291E0A4 PEXFontProp;
typedef struct $84B87B2778AF496FDD4E89829249E3ED PEXHalfSpace;
typedef struct $2B06E042F96B7E1B4B7C5FE172128D1C PEXHalfSpace2D;
typedef union $D12D45534FBF49378D3CA75A3BE2DA71 PEXImpDepConstant;
typedef struct $0F29DDDEB89067475B62F9102C286634 PEXInteriorBundleEntry;
typedef struct $955E56087392B65FCBDE8CC6E20D02B0 PEXLightEntry;
typedef struct $36766FCE469C1674D0D4B7F9C0004007 PEXLineBundleEntry;
typedef struct $EFA7684E65B999D8F13828663D8EDE30 PEXListOfClipRect;
typedef struct $490A9E92B52CC6FBCDB41BC1E6677AC1 PEXListOfCoord;
typedef struct $50389ABAE10CC71ADF32F220767ABB54 PEXListOfCoord2D;
typedef struct $8228A4E020B1E30661682C262A950172 PEXListOfCoord4D;
typedef struct $0D1FE74FEB921BFC360225FA926F7FBE PEXListOfEncodedText;
typedef struct $6EBEF47CA2CEF34EFBF958C97554E99C PEXListOfFloat;
typedef struct $2E7DDE8AB55005F1D7D9A8CD8F9DA480 PEXListOfLight;
typedef struct $A494F9C2DF2ABFE05D86DEF6DF3E823A PEXListOfNameSetPair;
typedef struct $A64F8D3D6B191631532ACB24F2A67271 PEXListOfPostedStructure;
typedef struct $4D4DA87B9B0BE3071AFC68AFEDCFEBC4 PEXListOfTrimCurve;
typedef struct $A40644D2F1A87C4812B9EB1F4A779BAC PEXListOfUShort;
typedef struct $48618F58206D45CA025FC75E2ABD1A5F PEXListOfVertex;
typedef struct $AC652D9067E774D123652036D02EB90E PEXListOfView;
typedef XID PEXLookupTable;
typedef struct $45E7993263F85A2D9E889806A5DE9E15 PEXMarkerBundleEntry;
typedef float PEXMatrix[4][4];
typedef float PEXMatrix3x3[3][3];
typedef struct $9A6CB8BD360D5EFF014093FD3394BE40 PEXMaxHitsReachedEvent;
typedef struct $BF0D31C48B8F0690903112E729B5439D PEXModelClipVolume;
typedef struct $8639730F0F017B4F8046B7637743F27B PEXNPCSubVolume;
typedef unsigned __int64 PEXName;
typedef XID PEXNameSet;
typedef struct $C4CC29E7084D77F4FCDCDB27F0EDE2A2 PEXNameSetPair;
typedef struct $71FFB46601ED87C93BE808E8F4C7A378 PEXOCData;
typedef struct $DE03FEBE0723D674E0B03ED2FA28B106 PEXOCErrorEvent;
typedef int PEXOCRequestType;
typedef struct $05D4B123D388DB951228551962F7FDB4 PEXPCAttributes;
typedef struct $DF789568FEE96C5BA584B8DD97BCF57D PEXPDAttributes;
typedef struct $38F7D1267E1957DAFC9112F1DC09DAC9 PEXPDDCHitBox;
typedef PEXNPCSubVolume PEXPDNPCHitVolume;
typedef struct $85D2B0DCC0B34905116BAAFA62D8EB6A PEXPMAttributes;
typedef union $57072F0E80F3EFB6D2CCD723BAAFA0BA PEXPSCData;
typedef struct $EB0A833BE2378946C8C415F8B835C892 PEXPSCImpDepData;
typedef struct $7F33531A03A03EE4E90C25564CBF6F6D PEXPSCIsoparametricCurves;
typedef struct $971A307052A09CEBE8EA06EFC96239F4 PEXPSCLevelCurves;
typedef struct $A643C6B696305ADD15FAF1E413BF0072 PEXPSCSpecifier;
typedef struct $37926C5A30BA4F8362B7B2DB97DA413B PEXPatternEntry;
typedef struct $9B6EF9E13112E3205299C25BAD468425 PEXPickDataRecord;
typedef struct $68A090D2D4C46EBB7CD3F7D9EA1243B2 PEXPickElementRef;
typedef XID PEXPickMeasure;
typedef struct $6EFA6E9CEDB0A623992FF50962BB32AE PEXPickPath;
typedef union $AB1F85878E44D1F7A7EC5BB0A3FA30DB PEXPickRecord;
typedef XID PEXPipelineContext;
typedef void *PEXPointer;
typedef struct $F8053EE2B7682B2915A9050257DB66E9 PEXPostedStructure;
typedef struct $673C2418D27F51C92BEB50600278BE8D PEXReflectionAttributes;
typedef XID PEXRenderer;
typedef struct $14060919AF6FB1145096DBC123DE4EE9 PEXRendererAttributes;
typedef struct $CEAAF0C10A18AB001F583EF77F84C96A PEXRenderingTarget;
typedef struct $5DA36550A295051746AB00BE33CC6E26 PEXSCAttributes;
typedef XID PEXSearchContext;
typedef unsigned __int16 PEXShapeHint;
typedef struct $1E98688865EA8C1912B4736759A34ED4 PEXStringData;
typedef XID PEXStructure;
typedef struct $39758171791F2D896E6188A3F6878FCF PEXStructureInfo;
typedef struct $6152C517BB9EBA8136E2E2CC34C2F373 PEXStructurePath;
typedef struct $7FECA4B39C985734260975A2CFDAAF0D PEXSurfaceApprox;
typedef unsigned __int8 PEXSwitch;
typedef unsigned __int16 PEXTableIndex;
typedef struct $D367C62101267596B6623720C0A3DAE6 PEXTableInfo;
typedef struct $5008F01E628E3FC0ECEEA6F34DE755A1 PEXTextAlignment;
typedef struct $E8DAEF1823ED50AE42D45B1AAC385BA0 PEXTextBundleEntry;
typedef struct $A2980305BF6C068125012765295EC449 PEXTextExtent;
typedef struct $FA3B14A7309A2578B5ECA45335F5CCCF PEXTextFontEntry;
typedef struct $ADE7CE5A9629DB6098454FD49D8B8476 PEXTrimCurve;
typedef unsigned __int16 PEXTypeOrTableIndex;
typedef struct $393C16A032292777F0C3725FFB2C0008 PEXVector;
typedef struct $38C3DEC81229B66F67FB6D350D75FF5A PEXVector2D;
typedef struct $C8FFDA76EF0ACB060AB87BF45E0F0EB8 PEXVertexCIE;
typedef struct $8D000675938487DA85F6AF4E6146E483 PEXVertexCIEEdge;
typedef struct $F6748E39AC4CFC0C9859EECCA2609F48 PEXVertexCIENormal;
typedef struct $60B2006344CEB6187E4861DDCB0EB328 PEXVertexCIENormalEdge;
typedef struct $4A093DABF1EBC225441005B58E53F5A7 PEXVertexEdge;
typedef struct $4F65BF1D323DF98CE7AB4A4E486FE4A1 PEXVertexHLS;
typedef struct $62EBEB3D9AC22832125CBC67D0451230 PEXVertexHLSEdge;
typedef struct $56A12B5EAAC94119434B83113CED938E PEXVertexHLSNormal;
typedef struct $30BCA89C202854D1029D857BF2BAD2C0 PEXVertexHLSNormalEdge;
typedef struct $09637314DB6CB928D71C16F96B805C44 PEXVertexHSV;
typedef struct $3F14E3E276E1BF8D07BF782EB53EE4F4 PEXVertexHSVEdge;
typedef struct $34548B7CB167799CAEAA22832C93FB03 PEXVertexHSVNormal;
typedef struct $F675BDF53526FE111F90F6AA3162BBE6 PEXVertexHSVNormalEdge;
typedef struct $7EE8581451248D554BBB7B3E11784C24 PEXVertexIndexed;
typedef struct $0A3657FDEACD4DE7EF7634442EEB5411 PEXVertexIndexedEdge;
typedef struct $043AED21A972E4A3F4A6099033AB1926 PEXVertexIndexedNormal;
typedef struct $D0301171F0D4E221BC2F6A2BDD984AC3 PEXVertexIndexedNormalEdge;
typedef struct $1CEE194B9996542B8791ADC986A9024D PEXVertexNormal;
typedef struct $CC5173B0475A2B9BC22526AA70E33964 PEXVertexNormalEdge;
typedef struct $7E91C3ED5EB1D6D19AB2A444A78B2392 PEXVertexRGB;
typedef struct $8935C5F58D9CE77E45A87720AFB3227F PEXVertexRGB16;
typedef struct $9D9264AC2C58E1070C07EC2D7CA4D108 PEXVertexRGB16Edge;
typedef struct $B5792B8FF616BF2DDED6AE0C91064772 PEXVertexRGB16Normal;
typedef struct $BF14F8B1DC989B7C10F8F8C5A8AFBAFB PEXVertexRGB16NormalEdge;
typedef struct $08CC88903709FBBAD024CFF75A3D43F0 PEXVertexRGB8;
typedef struct $DE6FC4BA8FEF076E2518FD7678F6A61F PEXVertexRGB8Edge;
typedef struct $70CE1F4DEFC5497CE8C11192756BA8B3 PEXVertexRGB8Normal;
typedef struct $F6FE87F77CDBCE6AEFBEBE5715A64548 PEXVertexRGB8NormalEdge;
typedef struct $608B1754CFD502A11A23B4E0486886E2 PEXVertexRGBEdge;
typedef struct $9F04DD83E3BDF3388BB7A774DEAF06E9 PEXVertexRGBNormal;
typedef struct $CC78F669F0DBA968A431F75955111B70 PEXVertexRGBNormalEdge;
typedef struct $2BC1F1B8D826A2B7246049888B898D44 PEXViewEntry;
typedef struct $2F5E0288A063535AE9E1AFEFB32DBF94 PEXViewRep;
typedef struct $A1E5AB63EF81B7775B1479667B4E6AE4 PEXViewport;
typedef XID PEXWorkstation;
typedef struct $25C1B8FCFFEDAD0642B60535CC806A0F PEXWorkstationAttributes;
typedef struct $68F3F62AFAA5AAF6F6A834E7D09A0F7B PEXWorkstationDynamics;
typedef int (*PFI)();
typedef int (*PFLI)();
typedef __int16 (*PFSI)();
typedef unsigned int (*PFU)();
typedef unsigned int (*PFULI)();
typedef unsigned __int16 (*PFUSI)();
typedef void (*PFV)();
typedef struct $EEE62CE3C0884F607962095F7AAF335B PPODHDR;
struct PROPACCESSargs {fhandle_t pa_fh;u_int pa_access;};
struct PROPACCESSres {propstat pa_status;union PROPACCESSres::$68E26B346A0D39CE8BE2AD26FA54B949 PROPACCESSres_u;};
union PROPACCESSres::$68E26B346A0D39CE8BE2AD26FA54B949 {u_int pa_access;};
struct PROPDEL3args {nfs_fh3 da_fh;prlistname_args da_name_args;};
struct PROPDELargs {fhandle_t da_fh;prlistname_args da_name_args;};
struct PROPGET3args {nfs_fh3 ga_fh;prlistname_args ga_name_args;};
struct PROPGETATTRres {propstat pga_status;union PROPGETATTRres::$76001559EDDE506C41B952AE8E0C446E PROPGETATTRres_u;};
union PROPGETATTRres::$76001559EDDE506C41B952AE8E0C446E {struct nfsfattr attributes;};
struct PROPGETargs {fhandle_t ga_fh;prlistname_args ga_name_args;};
struct PROPGETres {propstat gr_status;union PROPGETres::$F284557E9FD5BFDD622B908C3B1908D1 PROPGETres_u;};
union PROPGETres::$F284557E9FD5BFDD622B908C3B1908D1 {PROPGETresok pgres;};
struct PROPGETresok {u_int gr_ret;struct PROPGETresok::$FA91F00009CDF6B85DC5B09F6C4C74A1 gr_buf;};
struct PROPGETresok::$FA91F00009CDF6B85DC5B09F6C4C74A1 {u_int gr_buf_len;propattr *gr_buf_val;};
struct PROPSET3args {nfs_fh3 sa_fh;struct PROPSET3args::$88A76D6566B6EA4B7E54DAF91EA81578 sa_buf;};
struct PROPSET3args::$88A76D6566B6EA4B7E54DAF91EA81578 {u_int sa_buf_len;propattr *sa_buf_val;};
struct PROPSETargs {fhandle_t sa_fh;struct PROPSETargs::$88A76D6566B6EA4B7E54DAF91EA81578 sa_buf;};
struct PROPSETargs::$88A76D6566B6EA4B7E54DAF91EA81578 {u_int sa_buf_len;propattr *sa_buf_val;};
struct PROPSETres {propstat sr_status;union PROPSETres::$8A2B6C8193F4890CA54512369ED83B35 PROPSETres_u;};
union PROPSETres::$8A2B6C8193F4890CA54512369ED83B35 {u_int psres;};
typedef union pdsc_crd *PRUNTIME_FUNCTION;
typedef struct _PanedConstraintsPart *Pane;
typedef struct _PaneStack PaneStack;
typedef struct _PanedClassPart PanedClassPart;
typedef struct _PanedClassRec PanedClassRec;
typedef struct _PanedConstraintsRec *PanedConstraints;
typedef struct _PanedConstraintsPart PanedConstraintsPart;
typedef struct _PanedConstraintsRec PanedConstraintsRec;
typedef struct $02CBA2D7891D54F464303EC336D0C7F7 PanedPart;
typedef struct _PanedRec PanedRec;
typedef struct _PanedRec *PanedWidget;
typedef struct _PanedClassRec *PanedWidgetClass;
typedef struct $596A7D13087A077E44146BEC2FAB15D1 PannerClassPart;
typedef struct _PannerClassRec PannerClassRec;
typedef struct $135D6FF18DA52839AD1E4765F6297AB3 PannerPart;
typedef struct _PannerRec PannerRec;
typedef struct _PannerRec *PannerWidget;
typedef struct _PannerClassRec *PannerWidgetClass;
typedef struct HeaderInfo Paxinter_HeaderInfo;
typedef struct _Piece Piece;
typedef unsigned __int64 Pixel;
typedef struct $A93EAEE21B7814F89C1FE7A8D7922196 PixelSet;
typedef XID Pixmap;
typedef unsigned __int8 *Pointer;
typedef struct $596A7D13087A077E44146BEC2FAB15D1 PortholeClassPart;
typedef struct _PortholeClassRec PortholeClassRec;
typedef struct $2FDB4F6B8F6F19972B61C0DBC5A8E397 PortholePart;
typedef struct _PortholeRec PortholeRec;
typedef struct _PortholeRec *PortholeWidget;
typedef struct _PortholeClassRec *PortholeWidgetClass;
typedef Boolean (*PosToXYProc)(XmTextWidget, XmTextPosition, Position *, Position *);
typedef __int16 Position;
typedef struct _PrivDesc PrivDesc;
typedef struct _PrivDesc *PrivDescPtr;
typedef struct $9714CBFF61C1A63A7C36677752AEAE35 PropMotifWmHints;
typedef struct $A99853248DDDD96578ECD8091E72BC6E PropMotifWmInfo;
typedef PropMotifWmHints PropMwmHints;
typedef PropMotifWmInfo PropMwmInfo;
typedef struct _ProtocolStream ProtocolStream;
struct Queue {struct Queue *F;struct Queue *B;};
typedef struct random_data RANDOMD;
struct READ3args {nfs_fh3 file;offset3 offset;count3 count;};
struct READ3res {nfsstat3 status;union READ3res::$EBFFBF37F715F35896BDA07C9A2D80F4 res_u;};
union READ3res::$EBFFBF37F715F35896BDA07C9A2D80F4 {READ3resok ok;READ3resfail fail;};
struct READ3resfail {post_op_attr file_attributes;};
struct READ3resok {post_op_attr file_attributes;count3 count;int eof;struct read3data data;};
struct READDIR3args {nfs_fh3 dir;cookie3 cookie;cookieverf3 cookieverf;count3 count;};
struct READDIR3res {nfsstat3 status;union READDIR3res::$0CEAD80A95B6A8F5BBE6BAE222F64D18 res_u;};
union READDIR3res::$0CEAD80A95B6A8F5BBE6BAE222F64D18 {READDIR3resok ok;READDIR3resfail fail;};
struct READDIR3resfail {post_op_attr dir_attributes;};
struct READDIR3resok {post_op_attr dir_attributes;cookieverf3 cookieverf;dirlist3 reply;u_int size;u_int count;cookie3 cookie;off_t offset;caddr_t buffer;u_int buffersize;};
struct READDIRPLUS3args {nfs_fh3 dir;cookie3 cookie;cookieverf3 cookieverf;count3 dircount;count3 maxcount;};
struct READDIRPLUS3res {nfsstat3 status;union READDIRPLUS3res::$3D1E2784399C2722E4AD5035C7D7D261 res_u;};
union READDIRPLUS3res::$3D1E2784399C2722E4AD5035C7D7D261 {READDIRPLUS3resok ok;READDIRPLUS3resfail fail;};
struct READDIRPLUS3resfail {post_op_attr dir_attributes;};
struct READDIRPLUS3resok {post_op_attr dir_attributes;cookieverf3 cookieverf;dirlistplus3 reply;u_int size;u_int count;u_int maxcount;caddr_t xdr_data;u_int xdr_size;off_t offset;};
struct READLINK3args {nfs_fh3 symlink;};
struct READLINK3res {nfsstat3 status;union READLINK3res::$0806C2E1EA521BA65FFDD4738E23BA80 res_u;};
union READLINK3res::$0806C2E1EA521BA65FFDD4738E23BA80 {READLINK3resok ok;READLINK3resfail fail;};
struct READLINK3resfail {post_op_attr symlink_attributes;};
struct READLINK3resok {post_op_attr symlink_attributes;nfspath3 data;};
typedef struct $AAE697DBB680FA56FA0287F43EBE48E2 RECNOINFO;
typedef struct $A94EB43F2838EBEBCA936AD6F7EBA6B5 RECORDRANGE;
typedef struct $3D2747B906FBDDB46B196214774699C1 RECORD_CLIENT_INFO;
typedef struct $355FFBAADB08B4CAA5BBFAF829DED10A RECORD_EXTRANGE;
typedef struct $991DB0B5CB0892F70B164889AA9E2739 RECORD_RANGE16;
typedef struct $F9A11BF5FCA53245437FD040CE8F0807 RECORD_RANGE8;
typedef struct regex_data REGEXD;
struct REMOVE3args {diropargs3 object;};
struct REMOVE3res {nfsstat3 status;union REMOVE3res::$00486109FBB382E14288CE702A95D1DD res_u;};
union REMOVE3res::$00486109FBB382E14288CE702A95D1DD {REMOVE3resok ok;REMOVE3resfail fail;};
struct REMOVE3resfail {wcc_data dir_wcc;};
struct REMOVE3resok {wcc_data dir_wcc;};
struct RENAME3args {diropargs3 from;diropargs3 to;};
struct RENAME3res {nfsstat3 status;union RENAME3res::$0FECC924FDA7A4B020BD4BBCBF891F20 res_u;};
union RENAME3res::$0FECC924FDA7A4B020BD4BBCBF891F20 {RENAME3resok ok;RENAME3resfail fail;};
struct RENAME3resfail {wcc_data fromdir_wcc;wcc_data todir_wcc;};
struct RENAME3resok {wcc_data fromdir_wcc;wcc_data todir_wcc;};
typedef coff_int RFDT;
struct RMDIR3args {diropargs3 object;};
struct RMDIR3res {nfsstat3 status;union RMDIR3res::$90C320C3EFE33BF38799E3062F8F7E1F res_u;};
union RMDIR3res::$90C320C3EFE33BF38799E3062F8F7E1F {RMDIR3resok ok;RMDIR3resfail fail;};
struct RMDIR3resfail {wcc_data dir_wcc;};
struct RMDIR3resok {wcc_data dir_wcc;};
typedef struct $789D9E0FE1A5A9BA2492EBFE8B3FBB59 RNDXR;
typedef struct _row_context ROW_CONTEXT;
typedef struct runtime_pdr RPDR;
typedef union pdsc_crd RUNTIME_FUNCTION;
typedef struct _RadioGroup RadioGroup;
typedef struct $8E967F7BF7D653C298E7010DBC578B10 RangeRec;
typedef struct $03D5BB64BEC6FD91F45C473FB811595F Ranges;
typedef XmTextPosition (*ReadProc)(XmTextSource, XmTextPosition, XmTextPosition, XmTextBlock);
typedef CARD32 RecordClientSpec;
typedef CARD32 *RecordClientSpecPtr;
typedef struct _RectObjRec *RectObj;
typedef struct _RectObjClassRec *RectObjClass;
typedef struct _RectObjClassPart RectObjClassPart;
typedef struct _RectObjClassRec RectObjClassRec;
typedef struct _RectObjPart RectObjPart;
typedef struct _RectObjRec RectObjRec;
typedef struct _XRegion *Region;
typedef void (*RemoveWidgetProc)(XmTextSource, XmTextWidget);
typedef struct $596A7D13087A077E44146BEC2FAB15D1 RepeaterClassPart;
typedef struct _RepeaterClassRec RepeaterClassRec;
typedef struct $00DE07BDF9171D1E83970CD9B8CCE388 RepeaterPart;
typedef struct _RepeaterRec RepeaterRec;
typedef struct _RepeaterRec *RepeaterWidget;
typedef struct _RepeaterClassRec *RepeaterWidgetClass;
typedef XmTextStatus (*ReplaceProc)(XmTextWidget, XEvent *, XmTextPosition *, XmTextPosition *, XmTextBlock, int);
typedef CARD8 ReqFlags[32];
typedef unsigned __int8 ResIdent;
typedef enum $E5174C28E2C76F79C438E7F3C344BC7A ResourceType;
typedef struct _sad_blk SAD;
typedef struct _sad_hdr SAD_HDR;
typedef struct $F50E754B3FE25A5F36C91CED3CCA3FAC SCOPE_TABLE;
typedef struct _screen SCREEN;
enum SEC_CONF_bits {SEC_CONF_base = 0x0,SEC_CONF_priv = 0x1,SEC_CONF_mac_ob = 0x2,SEC_CONF_cmw = 0x3,SEC_CONF_shw = 0x4,SEC_CONF_acl_sware = 0x5,SEC_CONF_acl_posix = 0x6,SEC_CONF_ncav = 0x7,SEC_CONF_groups = 0x8,};
struct SETATTR3args {nfs_fh3 object;sattr3 new_attributes;sattrguard3 guard;};
struct SETATTR3res {nfsstat3 status;union SETATTR3res::$3F242C945E6791122D97917754CE34B9 res_u;};
union SETATTR3res::$3F242C945E6791122D97917754CE34B9 {SETATTR3resok ok;SETATTR3resfail fail;};
struct SETATTR3resfail {wcc_data obj_wcc;};
struct SETATTR3resok {wcc_data obj_wcc;};
typedef struct set_desc SET_DESC;
typedef struct termios SGTTY;
typedef struct siaentity SIAENTITY;
typedef struct siaentitytoo SIAENTITYTOO;
typedef struct $415DA74186ECF69417C93EB1FA2EC6D4 SLK_MAP;
typedef struct _str_cfg_blk STR_CFG;
typedef struct _subtree SUBTREE;
typedef struct __svcxprt SVCXPRT;
struct SYMLINK3args {diropargs3 where;symlinkdata3 symlink;};
struct SYMLINK3res {nfsstat3 status;union SYMLINK3res::$B5265A55B6FE6D7C72613D20EFCEC739 res_u;};
union SYMLINK3res::$B5265A55B6FE6D7C72613D20EFCEC739 {SYMLINK3resok ok;SYMLINK3resfail fail;};
struct SYMLINK3resfail {wcc_data dir_wcc;};
struct SYMLINK3resok {post_op_fh3 obj;post_op_attr obj_attributes;wcc_data dir_wcc;};
typedef struct $FEBFEE01B5FAFB8592D57D9F074EE903 SYMR;
typedef struct $754E82352BACFD73AE933254C0FF8B10 *SashCallData;
typedef struct $754E82352BACFD73AE933254C0FF8B10 SashCallDataRec;
typedef XmTextPosition (*ScanProc)(XmTextSource, XmTextPosition, XmTextScanType, XmTextScanDirection, int, int);
typedef struct $5342985482DA4551756A03BE632E6931 Screen;
typedef struct $2E0E2C12F04118C9E52BAE749EE378FF ScreenFormat;
typedef struct $206232A1F4DF974AC8674D33D98F259E ScrollbarClassPart;
typedef struct _ScrollbarClassRec ScrollbarClassRec;
typedef struct $4B5A668A60E7040394A6BED954C677E5 ScrollbarPart;
typedef struct _ScrollbarRec ScrollbarRec;
typedef struct _ScrollbarRec *ScrollbarWidget;
typedef struct _ScrollbarClassRec *ScrollbarWidgetClass;
struct SearchAndReplace {Boolean selection_changed;Widget search_popup;Widget label1;Widget label2;Widget left_toggle;Widget right_toggle;Widget rep_label;Widget rep_text;Widget search_text;Widget rep_one;Widget rep_all;};
typedef struct $CDF557A927ED2BFF93B09908D4EFCA76 SelectionHint;
typedef struct $EA67C4467E5D392AEC3890F142F1A94F SessionShellClassPart;
typedef struct _SessionShellClassRec SessionShellClassRec;
typedef struct $50D2B38DA8D5F7F9D092D3B0069535E8 SessionShellPart;
typedef struct $4E230DA965C384CCE937FCE2A8CE1FCC SessionShellRec;
typedef struct $4E230DA965C384CCE937FCE2A8CE1FCC *SessionShellWidget;
typedef struct _SessionShellClassRec *SessionShellWidgetClass;
typedef void (*SetSelectionProc)(XmTextSource, XmTextPosition, XmTextPosition, Time);
typedef Boolean (*SetValuesProc)(Widget, Widget, Widget, ArgList, Cardinal *);
typedef struct $FCD37105EE9C7A1110168FA8A75F7BD1 *ShellClassExtension;
typedef struct $FCD37105EE9C7A1110168FA8A75F7BD1 ShellClassExtensionRec;
typedef struct $EA67C4467E5D392AEC3890F142F1A94F ShellClassPart;
typedef struct _ShellClassRec ShellClassRec;
typedef struct $65A7BC70F11250CC66A1AAC499DD4DF0 ShellPart;
typedef struct $984028CEBAA862490ACFAD72BCDE57E1 ShellRec;
typedef struct $984028CEBAA862490ACFAD72BCDE57E1 *ShellWidget;
typedef struct _ShellClassRec *ShellWidgetClass;
typedef unsigned int ShmSeg;
typedef CARD16 ShortKeySym;
typedef struct $147D72C0203DF9CD1DFB82C7E7032794 SimpleClassPart;
typedef struct _SimpleClassRec SimpleClassRec;
typedef struct $EA67C4467E5D392AEC3890F142F1A94F SimpleMenuClassPart;
typedef struct _SimpleMenuClassRec SimpleMenuClassRec;
typedef struct _SimpleMenuPart SimpleMenuPart;
typedef struct _SimpleMenuRec SimpleMenuRec;
typedef struct _SimpleMenuRec *SimpleMenuWidget;
typedef struct _SimpleMenuClassRec *SimpleMenuWidgetClass;
typedef struct $6DCB0A2FC14FCF53A68992826C593A71 SimplePart;
typedef struct _SimpleRec SimpleRec;
typedef struct _SimpleRec *SimpleWidget;
typedef struct _SimpleClassRec *SimpleWidgetClass;
typedef IcePointer SmPointer;
typedef struct $E99BC90019053CAF4DC18DC60688EDEF SmProp;
typedef struct $A467143AA6DED7F9A689DDE9D5460EF6 SmPropValue;
typedef struct $C4DC01CDDDF5A53B120EAA56060806A9 SmcCallbacks;
typedef enum $B9B1E3761F7AC9C80FCB354FC1070F12 SmcCloseStatus;
typedef struct _SmcConn *SmcConn;
typedef void (*SmcDieProc)(SmcConn, SmPointer);
typedef void (*SmcErrorHandler)(SmcConn, int, int, unsigned __int64, int, int, SmPointer);
typedef void (*SmcInteractProc)(SmcConn, SmPointer);
typedef void (*SmcPropReplyProc)(SmcConn, SmPointer, int, SmProp **);
typedef void (*SmcSaveCompleteProc)(SmcConn, SmPointer);
typedef void (*SmcSaveYourselfPhase2Proc)(SmcConn, SmPointer);
typedef void (*SmcSaveYourselfProc)(SmcConn, SmPointer, int, int, int, int);
typedef void (*SmcShutdownCancelledProc)(SmcConn, SmPointer);
typedef struct _SmeBSBClassPart SmeBSBClassPart;
typedef struct _SmeBSBClassRec SmeBSBClassRec;
typedef struct _SmeBSBRec *SmeBSBObject;
typedef struct _SmeBSBClassRec *SmeBSBObjectClass;
typedef struct $C6A406722EA2D83639EB3FB477FE133D SmeBSBPart;
typedef struct _SmeBSBRec SmeBSBRec;
typedef struct _SmeClassPart SmeClassPart;
typedef struct _SmeClassRec SmeClassRec;
typedef struct _SmeLineClassPart SmeLineClassPart;
typedef struct _SmeLineClassRec SmeLineClassRec;
typedef struct _SmeLineRec *SmeLineObject;
typedef struct _SmeLineClassRec *SmeLineObjectClass;
typedef struct $66CD60CBEEE2B24DB10775537F0935AB SmeLinePart;
typedef struct _SmeLineRec SmeLineRec;
typedef struct _SmeRec *SmeObject;
typedef struct _SmeClassRec *SmeObjectClass;
typedef struct $A3A52DF93420AAFEDBDE6964318C6B0E SmePart;
typedef struct _SmeRec SmeRec;
typedef struct $2B2D277CB94E3786AC978CB982FDCC47 SmsCallbacks;
typedef void (*SmsCloseConnectionProc)(SmsConn, SmPointer, int, char **);
typedef struct _SmsConn *SmsConn;
typedef void (*SmsDeletePropertiesProc)(SmsConn, SmPointer, int, char **);
typedef void (*SmsErrorHandler)(SmsConn, int, int, unsigned __int64, int, int, SmPointer);
typedef void (*SmsGetPropertiesProc)(SmsConn, SmPointer);
typedef void (*SmsInteractDoneProc)(SmsConn, SmPointer, int);
typedef void (*SmsInteractRequestProc)(SmsConn, SmPointer, int);
typedef int (*SmsNewClientProc)(SmsConn, SmPointer, unsigned __int64 *, SmsCallbacks *, char **);
typedef int (*SmsRegisterClientProc)(SmsConn, SmPointer, char *);
typedef void (*SmsSaveYourselfDoneProc)(SmsConn, SmPointer, int);
typedef void (*SmsSaveYourselfPhase2RequestProc)(SmsConn, SmPointer);
typedef void (*SmsSaveYourselfRequestProc)(SmsConn, SmPointer, int, int, int, int, int);
typedef void (*SmsSetPropertiesProc)(SmsConn, SmPointer, int, SmProp **);
typedef struct _SmtPrivate SmtPrivate;
typedef struct _SmtPrivate *SmtPrivatePtr;
typedef struct _SmtProcInfo SmtProcInfo;
typedef struct _SmtProcInfo *SmtProcInfoPtr;
typedef char *String;
typedef struct $596A7D13087A077E44146BEC2FAB15D1 StripChartClassPart;
typedef struct _StripChartClassRec StripChartClassRec;
typedef struct $5BCE8D43E3309B3E87EE9BF368687B2D StripChartPart;
typedef struct _StripChartRec StripChartRec;
typedef struct _StripChartRec *StripChartWidget;
typedef struct _StripChartClassRec *StripChartWidgetClass;
typedef struct $4D6CF402BE6604EF49AB6A1F1F900B99 *Substitution;
typedef struct $4D6CF402BE6604EF49AB6A1F1F900B99 SubstitutionRec;
typedef struct $7B79F208CCCDEC19725F0DA124D139EB TB_Tsp_parms_t;
typedef struct term TERMINAL;
typedef void (*TERMINATION_HANDLER)(unsigned __int64 is_abnormal);
typedef enum TIMEOUT_TYPE TIMEOUT_FLAG;
enum TIMEOUT_TYPE {TM_INIT_ELEMENT = 0x1,TM_STATUS_ELEMENT = 0x2,TM_MOVE_MEDIA = 0x4,TM_EXCHANGE_MEDIA = 0x8,TM_POSITION_TO_ELEMENT = 0x10,TM_PREVENT_ALLOW = 0x20,TM_RESERVE = 0x40,TM_RELEASE = 0x80,TM_REQUEST_VOL = 0x100,TM_SEND_VOL = 0x200,};
typedef struct $DAE83A2F61144F2AD912252480DFF25D TIR;
typedef struct _trap TRAP_PDU;
typedef int (*TclX_AppSignalErrorHandler)(Tcl_Interp *interp, ClientData clientData, int background, int signalNum);
typedef int Tcl_AppInitProc(Tcl_Interp *interp);
typedef struct Tcl_AsyncHandler_ *Tcl_AsyncHandler;
typedef int Tcl_AsyncProc(ClientData clientData, Tcl_Interp *interp, int code);
typedef struct Tcl_Channel_ *Tcl_Channel;
typedef void Tcl_ChannelProc(ClientData clientData, int mask);
struct Tcl_ChannelType {char *typeName;Tcl_DriverBlockModeProc *blockModeProc;Tcl_DriverCloseProc *closeProc;Tcl_DriverInputProc *inputProc;Tcl_DriverOutputProc *outputProc;Tcl_DriverSeekProc *seekProc;Tcl_DriverSetOptionProc *setOptionProc;Tcl_DriverGetOptionProc *getOptionProc;Tcl_DriverWatchChannelProc *watchChannelProc;Tcl_DriverChannelReadyProc *channelReadyProc;Tcl_DriverGetFileProc *getFileProc;};
typedef void Tcl_CloseProc(ClientData data);
typedef void Tcl_CmdDeleteProc(ClientData clientData);
struct Tcl_CmdInfo {Tcl_CmdProc *proc;ClientData clientData;Tcl_CmdDeleteProc *deleteProc;ClientData deleteData;};
typedef int Tcl_CmdProc(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
typedef void Tcl_CmdTraceProc(ClientData clientData, Tcl_Interp *interp, int level, char *command, Tcl_CmdProc *proc, ClientData cmdClientData, int argc, char **argv);
typedef struct Tcl_Command_ *Tcl_Command;
struct Tcl_DString {char *string;int length;int spaceAvl;char staticSpace[200];};
typedef int Tcl_DriverBlockModeProc(ClientData instanceData, int mode);
typedef int Tcl_DriverChannelReadyProc(ClientData instanceData, int mask);
typedef int Tcl_DriverCloseProc(ClientData instanceData, Tcl_Interp *interp);
typedef Tcl_File Tcl_DriverGetFileProc(ClientData instanceData, int mask);
typedef int Tcl_DriverGetOptionProc(ClientData instanceData, char *optionName, Tcl_DString *dsPtr);
typedef int Tcl_DriverInputProc(ClientData instanceData, char *buf, int toRead, int *errorCodePtr);
typedef int Tcl_DriverOutputProc(ClientData instanceData, char *buf, int toWrite, int *errorCodePtr);
typedef int Tcl_DriverSeekProc(ClientData instanceData, __int64 offset, int mode, int *errorCodePtr);
typedef int Tcl_DriverSetOptionProc(ClientData instanceData, Tcl_Interp *interp, char *optionName, char *value);
typedef void Tcl_DriverWatchChannelProc(ClientData instanceData, int mask);
enum Tcl_EolTranslation {TCL_TRANSLATE_AUTO = 0x0,TCL_TRANSLATE_CR = 0x1,TCL_TRANSLATE_LF = 0x2,TCL_TRANSLATE_CRLF = 0x3,};
struct Tcl_Event {Tcl_EventProc *proc;struct Tcl_Event *nextPtr;};
typedef void Tcl_EventCheckProc(ClientData clientData, int flags);
typedef int Tcl_EventDeleteProc(Tcl_Event *evPtr, ClientData clientData);
typedef int Tcl_EventProc(Tcl_Event *evPtr, int flags);
typedef void Tcl_EventSetupProc(ClientData clientData, int flags);
typedef void Tcl_ExitProc(ClientData clientData);
typedef struct Tcl_File_ *Tcl_File;
typedef void Tcl_FileFreeProc(ClientData clientData);
typedef void Tcl_FileProc(ClientData clientData, int mask);
typedef void Tcl_FreeProc(char *blockPtr);
struct Tcl_HashEntry {struct Tcl_HashEntry *nextPtr;struct Tcl_HashEntry::Tcl_HashTable *tablePtr;struct Tcl_HashEntry **bucketPtr;ClientData clientData;union Tcl_HashEntry::$A1DAA63EE9F2E4530E7529E0A1E4E4E3 key;};
union Tcl_HashEntry::$A1DAA63EE9F2E4530E7529E0A1E4E4E3 {char *oneWordValue;int words[1];char string[4];};
struct Tcl_HashSearch {Tcl_HashTable *tablePtr;int nextIndex;Tcl_HashEntry *nextEntryPtr;};
struct Tcl_HashTable {Tcl_HashEntry **buckets;Tcl_HashEntry *staticBuckets[4];int numBuckets;int numEntries;int rebuildSize;int downShift;int mask;int keyType;Tcl_HashEntry *(*findProc)(struct Tcl_HashTable *tablePtr, char *key);Tcl_HashEntry *(*createProc)(struct Tcl_HashTable *tablePtr, char *key, int *newPtr);};
typedef void Tcl_IdleProc(ClientData clientData);
struct Tcl_Interp {char *result;void (*freeProc)(char *blockPtr);int errorLine;};
typedef void Tcl_InterpDeleteProc(ClientData clientData, Tcl_Interp *interp);
typedef int Tcl_MathProc(ClientData clientData, Tcl_Interp *interp, Tcl_Value *args, Tcl_Value *resultPtr);
typedef int Tcl_PackageInitProc(Tcl_Interp *interp);
enum Tcl_PathType {TCL_PATH_ABSOLUTE = 0x0,TCL_PATH_RELATIVE = 0x1,TCL_PATH_VOLUME_RELATIVE = 0x2,};
typedef enum $7DE6A019FB8D510204474F438D93B845 Tcl_QueuePosition;
typedef struct Tcl_RegExp_ *Tcl_RegExp;
typedef void Tcl_TcpAcceptProc(ClientData callbackData, Tcl_Channel chan, char *address, int port);
struct Tcl_Time {__int64 sec;__int64 usec;};
typedef void Tcl_TimerProc(ClientData clientData);
typedef struct Tcl_TimerToken_ *Tcl_TimerToken;
typedef struct Tcl_Trace_ *Tcl_Trace;
struct Tcl_Value {Tcl_ValueType type;__int64 intValue;double doubleValue;};
typedef enum $75C8E7CA27BE1E0F4E6BF64D1993A788 Tcl_ValueType;
typedef char *Tcl_VarTraceProc(ClientData clientData, Tcl_Interp *interp, char *part1, char *part2, int flags);
typedef struct $206232A1F4DF974AC8674D33D98F259E TemplateClassPart;
typedef struct _TemplateClassRec TemplateClassRec;
typedef struct $3D21FB1102582F3AF8C30D15C03CBCDD TemplatePart;
typedef struct _TemplateRec TemplateRec;
typedef struct _TemplateRec *TemplateWidget;
typedef struct _TemplateClassRec *TemplateWidgetClass;
typedef struct $206232A1F4DF974AC8674D33D98F259E TextClassPart;
typedef struct _TextClassRec TextClassRec;
typedef struct _TextPart TextPart;
typedef struct _TextRec TextRec;
typedef struct _TextSinkClassPart TextSinkClassPart;
typedef struct _TextSinkClassRec TextSinkClassRec;
typedef struct _TextSinkRec *TextSinkObject;
typedef struct _TextSinkClassRec *TextSinkObjectClass;
typedef struct $3D86DAB88F294E28AB745B656712EB07 TextSinkPart;
typedef struct _TextSinkRec TextSinkRec;
typedef struct _TextSrcClassPart TextSrcClassPart;
typedef struct _TextSrcClassRec TextSrcClassRec;
typedef struct $DB6B31C995A9BE8AC988B1FAFFAE1D6F *TextSrcExt;
typedef struct $DB6B31C995A9BE8AC988B1FAFFAE1D6F TextSrcExtRec;
typedef struct _TextSrcRec *TextSrcObject;
typedef struct _TextSrcClassRec *TextSrcObjectClass;
typedef struct $491ECD72E815BE4155E050EA9E29E31E TextSrcPart;
typedef struct _TextSrcRec TextSrcRec;
typedef struct _TextRec *TextWidget;
typedef struct _TextClassRec *TextWidgetClass;
typedef unsigned int Time;
typedef struct Tk_3DBorder_ *Tk_3DBorder;
typedef enum $5252AF58AF7525DA13AA82FD1F51B9F5 Tk_Anchor;
typedef struct $65881570D1BE40B63EE4A0C2B392A1BC Tk_ArgvInfo;
typedef struct Tk_BindingTable_ *Tk_BindingTable;
typedef struct Tk_Canvas_ *Tk_Canvas;
struct Tk_CanvasTextInfo {Tk_3DBorder selBorder;int selBorderWidth;XColor *selFgColorPtr;Tk_Item *selItemPtr;int selectFirst;int selectLast;Tk_Item *anchorItemPtr;int selectAnchor;Tk_3DBorder insertBorder;int insertWidth;int insertBorderWidth;Tk_Item *focusItemPtr;int gotFocus;int cursorOn;};
struct Tk_ConfigSpec {int type;char *argvName;char *dbName;char *dbClass;char *defValue;int offset;int specFlags;Tk_CustomOption *customPtr;};
typedef struct Tk_Cursor_ *Tk_Cursor;
struct Tk_CustomOption {Tk_OptionParseProc *parseProc;Tk_OptionPrintProc *printProc;ClientData clientData;};
typedef struct Tk_ErrorHandler_ *Tk_ErrorHandler;
typedef int Tk_ErrorProc(ClientData clientData, XErrorEvent *errEventPtr);
typedef void Tk_EventProc(ClientData clientData, XEvent *eventPtr);
struct Tk_FakeWin {Display *display;char *dummy1;int screenNum;Visual *visual;int depth;Window window;char *dummy2;char *dummy3;Tk_Window parentPtr;char *dummy4;char *dummy5;char *pathName;Tk_Uid nameUid;Tk_Uid classUid;XWindowChanges changes;unsigned int dummy6;XSetWindowAttributes atts;unsigned __int64 dummy7;unsigned int flags;char *dummy8;XIC dummy9;ClientData *dummy10;int dummy11;int dummy12;char *dummy13;char *dummy14;ClientData dummy15;int reqWidth;int reqHeight;int internalBorderWidth;char *dummy16;char *dummy17;};
typedef int Tk_GenericProc(ClientData clientData, XEvent *eventPtr);
typedef void Tk_GeomLostSlaveProc(ClientData clientData, Tk_Window tkwin);
struct Tk_GeomMgr {char *name;Tk_GeomRequestProc *requestProc;Tk_GeomLostSlaveProc *lostSlaveProc;};
typedef void Tk_GeomRequestProc(ClientData clientData, Tk_Window tkwin);
typedef int Tk_GetSelProc(ClientData clientData, Tcl_Interp *interp, char *portion);
typedef struct Tk_Image__ *Tk_Image;
typedef void Tk_ImageChangedProc(ClientData clientData, int x, int y, int width, int height, int imageWidth, int imageHeight);
typedef int Tk_ImageCreateProc(Tcl_Interp *interp, char *name, int argc, char **argv, Tk_ImageType *typePtr, Tk_ImageMaster master, ClientData *masterDataPtr);
typedef void Tk_ImageDeleteProc(ClientData masterData);
typedef void Tk_ImageDisplayProc(ClientData instanceData, Display *display, Drawable drawable, int imageX, int imageY, int width, int height, int drawableX, int drawableY);
typedef int Tk_ImageFileMatchProc(FILE *f, char *fileName, char *formatString, int *widthPtr, int *heightPtr);
typedef int Tk_ImageFileReadProc(Tcl_Interp *interp, FILE *f, char *fileName, char *formatString, Tk_PhotoHandle imageHandle, int destX, int destY, int width, int height, int srcX, int srcY);
typedef int Tk_ImageFileWriteProc(Tcl_Interp *interp, char *fileName, char *formatString, Tk_PhotoImageBlock *blockPtr);
typedef void Tk_ImageFreeProc(ClientData instanceData, Display *display);
typedef ClientData Tk_ImageGetProc(Tk_Window tkwin, ClientData masterData);
typedef struct Tk_ImageMaster_ *Tk_ImageMaster;
typedef int Tk_ImageStringMatchProc(char *string, char *formatString, int *widthPtr, int *heightPtr);
typedef int Tk_ImageStringReadProc(Tcl_Interp *interp, char *string, char *formatString, Tk_PhotoHandle imageHandle, int destX, int destY, int width, int height, int srcX, int srcY);
typedef int Tk_ImageStringWriteProc(Tcl_Interp *interp, Tcl_DString *dataPtr, char *formatString, Tk_PhotoImageBlock *blockPtr);
struct Tk_ImageType {char *name;Tk_ImageCreateProc *createProc;Tk_ImageGetProc *getProc;Tk_ImageDisplayProc *displayProc;Tk_ImageFreeProc *freeProc;Tk_ImageDeleteProc *deleteProc;struct Tk_ImageType *nextPtr;};
struct Tk_Item {int id;struct Tk_Item *nextPtr;Tk_Uid staticTagSpace[3];Tk_Uid *tagPtr;int tagSpace;int numTags;struct Tk_Item::Tk_ItemType *typePtr;int x1;int y1;int x2;int y2;};
typedef int Tk_ItemAreaProc(Tk_Canvas canvas, Tk_Item *itemPtr, double *rectPtr);
typedef int Tk_ItemConfigureProc(Tcl_Interp *interp, Tk_Canvas canvas, Tk_Item *itemPtr, int argc, char **argv, int flags);
typedef int Tk_ItemCoordProc(Tcl_Interp *interp, Tk_Canvas canvas, Tk_Item *itemPtr, int argc, char **argv);
typedef int Tk_ItemCreateProc(Tcl_Interp *interp, Tk_Canvas canvas, Tk_Item *itemPtr, int argc, char **argv);
typedef void Tk_ItemCursorProc(Tk_Canvas canvas, Tk_Item *itemPtr, int index);
typedef void Tk_ItemDCharsProc(Tk_Canvas canvas, Tk_Item *itemPtr, int first, int last);
typedef void Tk_ItemDeleteProc(Tk_Canvas canvas, Tk_Item *itemPtr, Display *display);
typedef void Tk_ItemDisplayProc(Tk_Canvas canvas, Tk_Item *itemPtr, Display *display, Drawable dst, int x, int y, int width, int height);
typedef int Tk_ItemIndexProc(Tcl_Interp *interp, Tk_Canvas canvas, Tk_Item *itemPtr, char *indexString, int *indexPtr);
typedef void Tk_ItemInsertProc(Tk_Canvas canvas, Tk_Item *itemPtr, int beforeThis, char *string);
typedef double Tk_ItemPointProc(Tk_Canvas canvas, Tk_Item *itemPtr, double *pointPtr);
typedef int Tk_ItemPostscriptProc(Tcl_Interp *interp, Tk_Canvas canvas, Tk_Item *itemPtr, int prepass);
typedef void Tk_ItemScaleProc(Tk_Canvas canvas, Tk_Item *itemPtr, double originX, double originY, double scaleX, double scaleY);
typedef int Tk_ItemSelectionProc(Tk_Canvas canvas, Tk_Item *itemPtr, int offset, char *buffer, int maxBytes);
typedef void Tk_ItemTranslateProc(Tk_Canvas canvas, Tk_Item *itemPtr, double deltaX, double deltaY);
struct Tk_ItemType {char *name;int itemSize;Tk_ItemCreateProc *createProc;Tk_ConfigSpec *configSpecs;Tk_ItemConfigureProc *configProc;Tk_ItemCoordProc *coordProc;Tk_ItemDeleteProc *deleteProc;Tk_ItemDisplayProc *displayProc;int alwaysRedraw;Tk_ItemPointProc *pointProc;Tk_ItemAreaProc *areaProc;Tk_ItemPostscriptProc *postscriptProc;Tk_ItemScaleProc *scaleProc;Tk_ItemTranslateProc *translateProc;Tk_ItemIndexProc *indexProc;Tk_ItemCursorProc *icursorProc;Tk_ItemSelectionProc *selectionProc;Tk_ItemInsertProc *insertProc;Tk_ItemDCharsProc *dCharsProc;struct Tk_ItemType *nextPtr;};
typedef enum $D75A9F50BEFC37ED2CAAB9E825B0AC13 Tk_Justify;
typedef void Tk_LostSelProc(ClientData clientData);
typedef int Tk_OptionParseProc(ClientData clientData, Tcl_Interp *interp, Tk_Window tkwin, char *value, char *widgRec, int offset);
typedef char *Tk_OptionPrintProc(ClientData clientData, Tk_Window tkwin, char *widgRec, int offset, Tcl_FreeProc **freeProcPtr);
typedef void *Tk_PhotoHandle;
struct Tk_PhotoImageBlock {unsigned __int8 *pixelPtr;int width;int height;int pitch;int pixelSize;int offset[3];};
struct Tk_PhotoImageFormat {char *name;Tk_ImageFileMatchProc *fileMatchProc;Tk_ImageStringMatchProc *stringMatchProc;Tk_ImageFileReadProc *fileReadProc;Tk_ImageStringReadProc *stringReadProc;Tk_ImageFileWriteProc *fileWriteProc;Tk_ImageStringWriteProc *stringWriteProc;struct Tk_PhotoImageFormat *nextPtr;};
typedef enum $F413FB130807CE2045080C3C00838D77 Tk_RestrictAction;
typedef Tk_RestrictAction Tk_RestrictProc(ClientData clientData, XEvent *eventPtr);
typedef int Tk_SelectionProc(ClientData clientData, int offset, char *buffer, int maxBytes);
typedef char *Tk_Uid;
typedef struct Tk_Window_ *Tk_Window;
typedef struct _ToggleClass ToggleClassPart;
typedef struct _ToggleClassRec ToggleClassRec;
typedef struct $2D593AC5DE5855BD6529B561E79A2DF8 TogglePart;
typedef struct _ToggleRec ToggleRec;
typedef struct _ToggleRec *ToggleWidget;
typedef struct _ToggleClassRec *ToggleWidgetClass;
typedef struct $EA67C4467E5D392AEC3890F142F1A94F TopLevelShellClassPart;
typedef struct _TopLevelShellClassRec TopLevelShellClassRec;
typedef struct $338644C2278094D31E58DDA0CC7454C7 TopLevelShellPart;
typedef struct $A6524737EEF8C4DE9F2A62890C064223 TopLevelShellRec;
typedef struct $A6524737EEF8C4DE9F2A62890C064223 *TopLevelShellWidget;
typedef struct _TopLevelShellClassRec *TopLevelShellWidgetClass;
typedef struct $EA67C4467E5D392AEC3890F142F1A94F TransientShellClassPart;
typedef struct _TransientShellClassRec TransientShellClassRec;
typedef struct $6E603A4D6E053F4C38E194015FCDFC50 TransientShellPart;
typedef struct $419D850E958B0F42F8B9D5E0BB3E2ED8 TransientShellRec;
typedef struct $419D850E958B0F42F8B9D5E0BB3E2ED8 *TransientShellWidget;
typedef struct _TransientShellClassRec *TransientShellWidgetClass;
typedef struct _TreeClassPart TreeClassPart;
typedef struct _TreeClassRec TreeClassRec;
typedef struct _TreeConstraintsRec *TreeConstraints;
typedef struct _TreeConstraintsPart TreeConstraintsPart;
typedef struct _TreeConstraintsRec TreeConstraintsRec;
typedef struct $D8ED41CC77C8ECDBEAE12EF98913EB66 TreePart;
typedef struct _TreeRec TreeRec;
typedef struct _TreeRec *TreeWidget;
typedef struct _TreeClassRec *TreeWidgetClass;
typedef unsigned __int8 *UByteP;
typedef struct _varbind VARBIND;
typedef enum $003F63A829E52477BDB4080710A1139D VISIT;
typedef struct $EA67C4467E5D392AEC3890F142F1A94F VendorShellClassPart;
typedef struct _VendorShellClassRec VendorShellClassRec;
typedef struct $16CFC57C4AEAAC7816B638D66FDFD80A VendorShellPart;
typedef struct $FE9896265ABA69989620FFBB2F6B5FBF VendorShellRec;
typedef struct $FE9896265ABA69989620FFBB2F6B5FBF *VendorShellWidget;
typedef struct _VendorShellClassRec *VendorShellWidgetClass;
typedef struct $F87A538C433C2C2FB670457A634B5AF2 Vertex;
typedef struct $206232A1F4DF974AC8674D33D98F259E ViewportClassPart;
typedef struct _ViewportClassRec ViewportClassRec;
typedef struct _ViewportConstraintsRec *ViewportConstraints;
typedef struct $122F0A93CA4F1B818359B08BB48D7A3D ViewportConstraintsPart;
typedef struct _ViewportConstraintsRec ViewportConstraintsRec;
typedef struct _ViewportPart ViewportPart;
typedef struct _ViewportRec ViewportRec;
typedef struct _ViewportRec *ViewportWidget;
typedef struct _ViewportClassRec *ViewportWidgetClass;
typedef struct $81D7D797DB059171D379A5B7433A85BC Visual;
typedef unsigned __int64 VisualID;
typedef void (*VoidProc)(Widget w, int *data_id, int *private_id, int *reason);
typedef struct _win_st WINDOW;
typedef struct $EA67C4467E5D392AEC3890F142F1A94F WMShellClassPart;
typedef struct _WMShellClassRec WMShellClassRec;
typedef struct $75F7E626134BF34BF20657FC27D19BCE WMShellPart;
typedef struct $DEB6ED3E3E48801FAB6806704D963455 WMShellRec;
typedef struct $DEB6ED3E3E48801FAB6806704D963455 *WMShellWidget;
typedef struct _WMShellClassRec *WMShellWidgetClass;
struct WRITE3args {nfs_fh3 file;offset3 offset;count3 count;stable_how stable;struct WRITE3args::$AFC49F3DDC721D255E386F75FFFD3991 data;int dupbusy;};
struct WRITE3args::$AFC49F3DDC721D255E386F75FFFD3991 {u_int data_len;char *data_val;struct mbuf *data_mbuf;struct write3data wdata;};
struct WRITE3res {nfsstat3 status;union WRITE3res::$EFCBE02989981C7512DF7D166CC51BEC res_u;};
union WRITE3res::$EFCBE02989981C7512DF7D166CC51BEC {WRITE3resok ok;WRITE3resfail fail;};
struct WRITE3resfail {wcc_data file_wcc;};
struct WRITE3resok {wcc_data file_wcc;count3 count;stable_how committed;writeverf3 verf;};
typedef struct _WidgetRec *Widget;
typedef struct _WidgetClassRec *WidgetClass;
typedef struct _WidgetClassRec WidgetClassRec;
typedef struct _WidgetInfo WidgetInfo;
typedef Widget *WidgetList;
typedef struct _WidgetRec WidgetRec;
typedef XID Window;
typedef struct $14F5AD9DDC5240A6786BD5C14149A533 *WmDecorationGeometry;
typedef struct $14F5AD9DDC5240A6786BD5C14149A533 WmDecorationGeometryRec;
typedef struct $468504E0172D6445E03F4E98BA249C85 *WmIconState;
typedef struct $468504E0172D6445E03F4E98BA249C85 WmIconStateRec;
typedef struct $CE4F591F9E1174A1F540D4577FAC94EA X86_REG;
typedef struct $28DBCFF2F5EB26695C388B23D6931809 XActivateDeactivateEvent;
typedef XActivateDeactivateEvent XActivateEvent;
typedef struct _XAnyClassinfo XAnyClassInfo;
typedef struct _XAnyClassinfo *XAnyClassPtr;
typedef struct $28DBCFF2F5EB26695C388B23D6931809 XAnyEvent;
typedef XID XAppGroup;
typedef struct $3ACF1F82BEC6DEE83FE33E625399BBD7 XArc;
typedef struct _XAssoc XAssoc;
typedef struct $9C05987122A935634D9A0959094DDFFC XAssocTable;
typedef struct _XAxisInfo XAxisInfo;
typedef struct _XAxisInfo *XAxisInfoPtr;
typedef struct $7215FCA21C9177221950E694BDF162F7 XBellFeedbackControl;
typedef struct $7215FCA21C9177221950E694BDF162F7 XBellFeedbackState;
typedef struct $873989352E2697A1AEEAE6DD5F2AF6D9 XButtonEvent;
typedef struct _XButtonInfo XButtonInfo;
typedef struct _XButtonInfo *XButtonInfoPtr;
typedef XButtonEvent XButtonPressedEvent;
typedef XButtonEvent XButtonReleasedEvent;
typedef struct $1F4B2514A14933A71BA9296C89FDE736 XButtonState;
typedef struct $1F4B2514A14933A71BA9296C89FDE736 XButtonStatus;
typedef struct $7D48FB069274B8266BC6A86B88B69299 XChangeDeviceNotifyEvent;
typedef struct $691123D744001B8BE68B84780CEE447C XChar2b;
typedef struct $53996C97E395EF20FC508697C3EEF92C XCharStruct;
typedef struct $5F1D1C367F851FDE7EA3DDE22527B9A9 XCirculateEvent;
typedef struct $3B8E4E23B9740784A6100A2DE9D445C8 XCirculateRequestEvent;
typedef struct $23D39CEB96D177F7D0B7BFAD0D72AB23 XClassHint;
typedef struct $5077D3CC3DD590AF02C9E55403D17F9F XClientMessageEvent;
typedef struct $6A1E68C5A198D57F5F76A65BA6AE762A XColor;
typedef struct $E25F4BC7C332796EBC84527590582A42 XColormapEvent;
typedef struct _XComposeStatus XComposeStatus;
typedef struct $B511218BDE8923632D5391031F827DC7 XConfigureEvent;
typedef struct $801F83CB04C22E52C720D7D622E0E540 XConfigureRequestEvent;
typedef void (*XConnectionWatchProc)(Display *, XPointer, int, int, XPointer *);
typedef int XContext;
typedef struct $47DAAB86EBF09131080EDB83B3644219 XCreateWindowEvent;
typedef struct $99C954413A17768447BF0852A4562C6B XCrossingEvent;
struct XDR {enum xdr_op x_op;struct XDR::xdr_ops *x_ops;caddr_t x_public;caddr_t x_private;caddr_t x_base;int x_handy;};
struct XDR::xdr_ops {int (*x_getlong)(struct XDR *, int *);int (*x_putlong)(struct XDR *, int *);int (*x_getbytes)(struct XDR *, caddr_t, int);int (*x_putbytes)(struct XDR *, caddr_t, int);u_int (*x_getpostn)(struct XDR *);int (*x_setpostn)(struct XDR *, u_int);int *(*x_inline)(struct XDR *, int);void (*x_destroy)(struct XDR *);};
typedef XActivateDeactivateEvent XDeactivateEvent;
typedef struct $A0C7E3A5A810FD3BF4087852A9D616F8 XDestroyWindowEvent;
typedef struct $488EF114463850BAC9987E879A5DF652 XDevice;
typedef struct $174015526638B6775FF90FE128CCEA7F XDeviceButtonEvent;
typedef XDeviceButtonEvent XDeviceButtonPressedEvent;
typedef XDeviceButtonEvent XDeviceButtonReleasedEvent;
typedef struct $14C4DC63A35B6E2FD67711EA9BA1C1B3 XDeviceControl;
typedef struct $DADF6A2FE8C0A56005FBE2ABB9EBEBA9 XDeviceFocusChangeEvent;
typedef XDeviceFocusChangeEvent XDeviceFocusInEvent;
typedef XDeviceFocusChangeEvent XDeviceFocusOutEvent;
typedef struct _XDeviceInfo XDeviceInfo;
typedef struct _XDeviceInfo *XDeviceInfoPtr;
typedef struct $86BCEEF34780F6AF2028C23CDB754DC3 XDeviceKeyEvent;
typedef XDeviceKeyEvent XDeviceKeyPressedEvent;
typedef XDeviceKeyEvent XDeviceKeyReleasedEvent;
typedef struct $2B0172CE0AF913C9F21F980DF2CB4B9A XDeviceMappingEvent;
typedef struct $5A5A8022479C7FA798EEBCC50DCBBBAE XDeviceMotionEvent;
typedef struct $6891B45CD5C184FEB200E38CDC4FE1A6 XDeviceResolutionControl;
typedef struct $EF1440E4CA89662D977D4B051E2FFAB7 XDeviceResolutionState;
typedef struct $CF91FEEC29390B2E3A7754517937B585 XDeviceState;
typedef struct $DDEAC4200641A838164224E9436A69A8 XDeviceStateNotifyEvent;
typedef struct $21AD2773B4EF3639ECA7EA03A86E1290 XDeviceTimeCoord;
typedef union $D8231012D0728EC3472C30FA3109CEFA XEDataObject;
typedef struct _XETC XETC;
typedef struct $4861D9BFE2A7E5E384D09A595EEA31C4 XETCValues;
typedef struct $A572CE7E5663FCA9F137B2D1D40B04E1 XETrapCB;
typedef struct $8F38FA1882FD1CDA04507844DB5B7464 XETrapCfg;
typedef struct $503FC1073CA088AD2DC628ADD3D067B5 XETrapDataEvent;
typedef struct $C2A18E44A509FAD040F54243FD2340D8 XETrapDatum;
typedef struct $80BF1CA6AF87AF0DC64498AC611B3C23 XETrapFlags;
typedef struct $9B215D7B412F7706499A9C5F7AE2BF48 XETrapGetAvailRep;
typedef struct $B4FA891B630887EC538EB91F019A9C2C XETrapGetCurRep;
typedef struct $5E771194B47AF17C9267085CABF953C3 XETrapGetLastInpTimeRep;
typedef struct $C1BC45A60F843B4624B9FAA35BF87512 XETrapGetStatsRep;
typedef struct $8790A95C9089D47EA8D4BDC2F4BAD9F8 XETrapGetVersRep;
typedef struct $518F0DEC427BFC57A6F8B4A0E681A1CE XETrapHeader;
typedef struct $D4C8F552392F5332BDD78714AF7AFE61 XETrapInputReq;
typedef struct $2B0C7BC237EA785081DC8BB3BF49058B XETrapRepHdr;
typedef XCrossingEvent XEnterWindowEvent;
typedef struct $139D55FE8C88418352B74C39DE937D4F XErrorEvent;
typedef int (*XErrorHandler)(Display *, XErrorEvent *);
typedef union _XEvent XEvent;
typedef unsigned __int64 XEventClass;
typedef struct $B3807A7E298580816B8893D27A6B40D0 XEventList;
typedef struct $6FA9C15AF3974CA3A341A1191B3752B4 XExposeEvent;
typedef struct $BEA3E970906BDE5578391186783FC521 XExtCodes;
typedef struct _XExtData XExtData;
typedef struct _XExtEventInfo XExtEventInfo;
typedef struct $2AE07F4A994C5FC6C65BC46898F1D740 XExtensionVersion;
typedef struct $C08EB97F95DBE201B07D804A019DEBC7 XFeedbackControl;
typedef struct $C08EB97F95DBE201B07D804A019DEBC7 XFeedbackState;
typedef struct $BA3BC151FA826CD0885676DC609737ED XFocusChangeEvent;
typedef XFocusChangeEvent XFocusInEvent;
typedef XFocusChangeEvent XFocusOutEvent;
typedef struct $E38CC4C8385B7649E275253761B49FA9 XFontProp;
typedef struct _XOC *XFontSet;
typedef struct $6BA9BAD34CD581FCA2A7610248080448 XFontSetExtents;
typedef struct $B36C03EE0DB03800CDBEDA1CF8CFFD5F XFontStruct;
typedef struct $B584FC37E760C222478B879BC253DCF4 XGCValues;
typedef struct $586CBC0EC33709906F5B6EA510EDE79F XGraphicsExposeEvent;
typedef struct $F9ED97278D4922C5DE254E13FEAC389D XGravityEvent;
typedef struct $4FFA9527088137D66D8D180D61C68358 XHostAddress;
typedef struct _XIC *XIC;
typedef enum $8C3F6FFEEEA4FDE62323156E011FAD74 XICCEncodingStyle;
typedef unsigned __int64 XID;
typedef struct _XIM *XIM;
typedef struct $E1655291D14CE59495117F42FECB583D XIMCallback;
typedef enum $DB4B60BC3E5D47BB5823C48350265A79 XIMCaretDirection;
typedef enum $B64C39E2ADABB22C50C1D912F1D253CC XIMCaretStyle;
typedef unsigned __int64 XIMFeedback;
typedef unsigned __int64 XIMHotKeyState;
typedef struct _XIMHotKeyTrigger XIMHotKeyTrigger;
typedef struct _XIMHotKeyTriggers XIMHotKeyTriggers;
typedef struct _XIMPreeditCaretCallbackStruct XIMPreeditCaretCallbackStruct;
typedef struct _XIMPreeditDrawCallbackStruct XIMPreeditDrawCallbackStruct;
typedef unsigned __int64 XIMPreeditState;
typedef struct _XIMPreeditStateNotifyCallbackStruct XIMPreeditStateNotifyCallbackStruct;
typedef void (*XIMProc)();
typedef unsigned __int64 XIMResetState;
typedef enum $B539734676A04848B68060D6D483E0A0 XIMStatusDataType;
typedef struct _XIMStatusDrawCallbackStruct XIMStatusDrawCallbackStruct;
typedef struct _XIMStringConversionCallbackStruct XIMStringConversionCallbackStruct;
typedef unsigned __int64 XIMStringConversionFeedback;
typedef unsigned __int16 XIMStringConversionOperation;
typedef unsigned __int16 XIMStringConversionPosition;
typedef struct _XIMStringConversionText XIMStringConversionText;
typedef unsigned __int16 XIMStringConversionType;
typedef unsigned __int64 XIMStyle;
typedef struct $DD1A60F664AD301361B26C5800787B5E XIMStyles;
typedef struct _XIMText XIMText;
typedef struct $2E56E956F88F593FE24676E86AAE3518 XIMValuesList;
typedef int (*XIOErrorHandler)(Display *);
typedef struct $A386896A7A6A8667CB6DAB8066B01EA8 XIconSize;
typedef struct _XImage XImage;
typedef struct $7B884385C9B34F9BF1E347FECD869B6E XInputClass;
typedef struct $D1A99149F7DEF10F5C1917DF5D27BC53 XInputClassInfo;
typedef struct $82EEF83FACFC8220E9483994E0DE4841 XIntegerFeedbackControl;
typedef struct $AAA5532226BFEC93AB8B8FBABECEF692 XIntegerFeedbackState;
typedef struct $CE366FE051068AE4B5DAF48358622BF9 XKbdFeedbackControl;
typedef struct $937DB4F83893A6A1F82E1079494CB89A XKbdFeedbackState;
typedef struct $3C57A176DA13593CE98DBC4E12CE23DD XKeyEvent;
typedef struct _XKeyInfo XKeyInfo;
typedef struct _XKeyInfo *XKeyInfoPtr;
typedef XKeyEvent XKeyPressedEvent;
typedef XKeyEvent XKeyReleasedEvent;
typedef struct $48AD93219D69C082A7FA7555BF967BAD XKeyState;
typedef struct $48AD93219D69C082A7FA7555BF967BAD XKeyStatus;
typedef struct $BFB970BD49ED9B406D7CBF54A76D57DD XKeyboardControl;
typedef struct $6EF26E53794972BE8CF37E7A46EF3D5C XKeyboardState;
typedef struct $4581608EB282A4CD84CF9A6FF906DD32 XKeymapEvent;
typedef XCrossingEvent XLeaveWindowEvent;
typedef struct $257708480E694070BE2FEFA543B5E05B XLedFeedbackControl;
typedef struct $42AB50CCE4DA10B1F65C2C09D80E775D XLedFeedbackState;
typedef struct $4E034CF603E977B1C171CF8061167D87 XMapEvent;
typedef struct $3224684BD501E054CF1A67297C7290FB XMapRequestEvent;
typedef struct $69AF41EBDA657EE1FC7AC417361C4229 XMappingEvent;
typedef struct $64419251F3172C7227A52AC30EAD3C9D XModifierKeymap;
typedef struct $434B3255D002B67E7352AD09968BC579 XMotionEvent;
typedef struct $8C606E8C629293621C4597F91F88DAA0 XNoExposeEvent;
typedef struct _XOC *XOC;
typedef struct _XOM *XOM;
typedef struct $6B1106A64659663BF4BA9950E3F10E4F XOMCharSetList;
typedef struct $3E84D1386F10E26A4E3E4F22FDD3C8B8 XOMFontInfo;
typedef struct $9375A326D5D02800B5E28ACECE8480CB XOMOrientation;
typedef void (*XOMProc)();
typedef enum $2ADC401C2E21ED1A63A0FE0B868E544D XOrientation;
typedef unsigned __int8 XPAttrReplacement;
typedef struct $429599F7FB1F59952975B123E06D5503 XPAttributeEvent;
typedef unsigned __int8 XPAttributes;
typedef XID XPContext;
typedef struct $DF8DA3DE4803EFF7CEBBF110DF4EA6AF XPDataReadyEvent;
typedef unsigned __int8 XPDocumentType;
typedef void (*XPFinishProc)(Display *display, XPContext context, XPGetDocStatus status, XPointer client_data);
typedef unsigned __int8 XPGetDocStatus;
typedef char *(*XPHinterProc)();
typedef struct $896FD2EFE27D37E3F44DDE5693F51658 XPPrintEvent;
typedef struct $E55328F014D59CB8D8C2D56824FBB3BE *XPPrinterList;
typedef struct $E55328F014D59CB8D8C2D56824FBB3BE XPPrinterRec;
typedef unsigned __int8 XPSaveData;
typedef void (*XPSaveProc)(Display *display, XPContext context, unsigned __int8 *data, unsigned int data_len, XPointer client_data);
typedef struct $216A9F1C1CB18296D79DECC5D8B8E2C3 XPanoramiXInfo;
typedef struct $A06AF73261543B69A785AD9B5C737D11 XPixmapFormatValues;
typedef struct $13C78DD7EDF1CF1C4AE9B0D54E891AA2 XPoint;
typedef char *XPointer;
typedef XMotionEvent XPointerMovedEvent;
typedef struct $E7F9FD2C37FD56671DBF7E32D3F10830 XPropertyEvent;
typedef XProximityNotifyEvent XProximityInEvent;
typedef struct $1F50C144209B837DAB7C5290DC848E2E XProximityNotifyEvent;
typedef XProximityNotifyEvent XProximityOutEvent;
typedef struct $77F664D03ADE3D590F095E54D295E163 XPtrFeedbackControl;
typedef struct $77F664D03ADE3D590F095E54D295E163 XPtrFeedbackState;
typedef struct $ABF6181591815B38C95F565E639E1EE0 XRecordClientInfo;
typedef unsigned __int64 XRecordClientSpec;
typedef unsigned __int64 XRecordContext;
typedef struct $3AD473A9924D2058FA4FA6E47C9E79DE XRecordExtRange;
typedef struct $2EF3B7A505F6297B4E68C64FB7023BBF XRecordInterceptData;
typedef void (*XRecordInterceptProc)(XPointer, XRecordInterceptData *);
typedef struct $4FA67FD0121DE61C8BBE74D0ECEE2878 XRecordRange;
typedef struct $FF8B70C3EB5683862853208A738C6C2E XRecordRange16;
typedef struct $697B32D3B5D3093ACC810617F93D908A XRecordRange8;
typedef struct $19CDB3AF2B83FECC9ADEAFCB41606FBB XRecordState;
typedef struct $CA1CD5B08005403884A7641019451813 XRectangle;
typedef struct $786884C59B8460C39A9F20EFE8931D61 XReparentEvent;
typedef struct $66669466698BDB410095AFB1AF18F4BC XResizeRequestEvent;
typedef struct $6BBCC49B474232F6903A86C4EDBD1760 XScreenSaverInfo;
typedef struct $D2124A1175651D2E1AA61E03F6ED9B92 XScreenSaverNotifyEvent;
typedef unsigned __int64 XSecurityAuthorization;
typedef struct $C2BA31F69307069900F0490354E56872 XSecurityAuthorizationAttributes;
typedef struct $FB998CC7814FFEB90CA8E529D9C8D308 XSecurityAuthorizationRevokedEvent;
typedef struct $335EDB02744B103283B800FF919FC940 XSegment;
typedef struct $FED59B4CD78CD28406B031702718F8F9 XSelectionClearEvent;
typedef struct $EBA30041B1367D967CE55670260EF592 XSelectionEvent;
typedef struct $548F59098DBA4939E643BBEF2AD26EEA XSelectionRequestEvent;
typedef struct $6DC10CFFA94DA978AABC1A085F692023 XSetWindowAttributes;
typedef struct $BFFD79EDBD15B54973AE71A15D9BA72D XShapeEvent;
typedef struct $8E2941579199B80013AB035AF46D9BEA XShmCompletionEvent;
typedef struct $346B3FD68C26438FA8B69D57DEBF0D40 XShmSegmentInfo;
typedef struct $095E04B97CE84C59083222C7D172F70D XSizeHints;
typedef XID XSmt;
typedef struct $3873B2DA9B3CAF6B20E0ED2D9A646759 XSmtWakeupEvent;
typedef struct $4C9FC87DA575F754989D5BFCDDDAE424 XStandardColormap;
typedef struct $735C3716122317809AD8BB5A186A1FBE XStringFeedbackControl;
typedef struct $9EBEE5732934E798190927254B0CA2D3 XStringFeedbackState;
typedef XID XSyncAlarm;
typedef struct $BD577CFD808EB4E77A4E3752FBFBD993 XSyncAlarmAttributes;
typedef struct $CCD8519E9DA348E05183A0C5A6B0F051 XSyncAlarmError;
typedef struct $AA0B1CFBEDD820C1AEF4E3D97A4389C7 XSyncAlarmNotifyEvent;
typedef enum $C25EDA2AFA4331EE1194B950D24C90A5 XSyncAlarmState;
typedef XID XSyncCounter;
typedef struct $7A342258A1A020710FB4B07A80D1815D XSyncCounterError;
typedef struct $2D61994FD46097B273F1AE1ABC29F4D1 XSyncCounterNotifyEvent;
typedef struct _XSyncSystemCounter XSyncSystemCounter;
typedef enum $0112955827FC2F1F3D73B2DA97E42271 XSyncTestType;
typedef struct $F172F94299C982F5FEAF6C4E72460A72 XSyncTrigger;
typedef struct _XSyncValue XSyncValue;
typedef enum $1245A1FB5F4A3D60B68851188167E7C1 XSyncValueType;
typedef struct $CE2CC21A8DF6496E4E3BA1994C658522 XSyncWaitCondition;
typedef struct $1E4927A029C92C0FD595CCC76CE8B139 XTestDelayInfo;
typedef struct $88FB39CD3802D019F63911908A8052EF XTestFakeAckEvent;
typedef struct $E9D9387C3B11BC3046AC632B5B502F37 XTestInputActionEvent;
typedef struct $666210E100F3CB5D4A75782C69E711A8 XTestJumpInfo;
typedef struct $AF5FB4080A51E8992C2DCC85F9B13FAA XTestKeyInfo;
typedef struct $E59953A36063650DE92A1957B98E4A1B XTestMotionInfo;
typedef struct $636E06EF14FC653C9FA755BCE21D4A3F XTextItem;
typedef struct $648D5B97A5A1D2D2729A4C51B6643734 XTextItem16;
typedef struct $A64E5FDBC99443F3D6ECB2BCB6D30607 XTextProperty;
typedef struct $58058F4C4926147A1BF935BBE1E04307 XTimeCoord;
typedef struct $30B70AE4F294613C62268FE45513ED13 XUnmapEvent;
typedef void *XVaNestedList;
typedef struct _XValuatorInfo XValuatorInfo;
typedef struct _XValuatorInfo *XValuatorInfoPtr;
typedef struct $5532C1654B9EF34861D348BF0E72BD7A XValuatorState;
typedef struct $B91987CD365E539796DE78D87241D671 XValuatorStatus;
typedef struct $557A30854A566BD7F7B6D0FD7BDE46E8 XVirtualEvent;
typedef struct $CC1BC89F17F8E2D162EA4A62A1B63DC5 XVisibilityEvent;
typedef struct $53ECFE89C89D8C03C24F6E293B8BEAFC XVisualInfo;
typedef struct $48A6A373861130075F8524D5C353FEE6 XWDColor;
typedef struct _xwd_file_header XWDFileHeader;
typedef struct $55C4BAE65683A06129AA1262EA0CD4D4 XWMHints;
typedef struct $93448E48748F8400997BDD02B10E5A80 XWindowAttributes;
typedef struct $BA1C9873524F37DFA28FC6E8B2A0BC7B XWindowChanges;
typedef XmTextPosition (*XYToPosProc)(XmTextWidget, int, int);
typedef struct xauth Xauth;
typedef enum $0B9944DDAD0BA9038E29AF625CFDC62B XawAsciiType;
typedef enum $FCF7146F21D65165DF73AAE311CA591D XawEdgeType;
typedef struct _XawGripCallData *XawGripCallData;
typedef struct _XawGripCallData XawGripCallDataRec;
typedef struct _XawIcPart XawIcPart;
typedef struct _XawIcTablePart *XawIcTableList;
typedef struct _XawIcTablePart XawIcTablePart;
typedef struct _XawImPart XawImPart;
typedef struct _XawListReturnStruct XawListReturnStruct;
typedef struct $FC067DEDDE18A65B7B77DF0D808EC43F XawPannerReport;
typedef struct $F214F0AF1C93EA1431E8CE2CBA00144B XawTextBlock;
typedef struct $F214F0AF1C93EA1431E8CE2CBA00144B *XawTextBlockPtr;
typedef enum $A3E7C5F72761EBC037D2D2A236AE02A1 XawTextEditType;
typedef enum $439B6CC11D067694C5AE104EBD065164 XawTextInsertState;
typedef struct $5D25D8BAB0FBE84273D7F26A74EBE8C0 XawTextLineTable;
typedef struct $8768C721D59A1CE73A9564C36C656042 XawTextLineTableEntry;
typedef struct $8768C721D59A1CE73A9564C36C656042 *XawTextLineTableEntryPtr;
typedef struct $5D25D8BAB0FBE84273D7F26A74EBE8C0 *XawTextLineTablePtr;
typedef struct _XawTextMargin XawTextMargin;
typedef __int64 XawTextPosition;
typedef enum $BBF51B68E199C550B4BD602DD9A27574 XawTextResizeMode;
typedef enum $22290B8E2C6A05087E308339D4352906 XawTextScanDirection;
typedef enum $475DA77725480EAC0616D0046F2D149B XawTextScanType;
typedef enum $DDE587BC9507421E24019D1CDC2018E8 XawTextScrollMode;
typedef enum $2B17190EDB43F17974ABDA2F217A89F1 XawTextSelectType;
typedef struct $1206FECF9ACD3192A71AF1264343EAEE XawTextSelection;
typedef enum $A07DB15FC3F9C76A4500090AF467BC3A XawTextSelectionAction;
typedef enum $9E1DF9A61974C4C1C54DE3F5F4FAD665 XawTextSelectionMode;
typedef struct _XawTextSelectionSalt XawTextSelectionSalt;
typedef enum $AEEDBE257A0664EDA892534EE275891B XawTextWrapMode;
typedef struct $EA67C4467E5D392AEC3890F142F1A94F XawVendorShellExtClassPart;
typedef struct _VendorShellExtClassRec XawVendorShellExtClassRec;
typedef struct $CED7C2589F0C077CAC0462AE73D32A26 XawVendorShellExtPart;
struct XawVendorShellExtRec {ObjectPart object;XawVendorShellExtPart vendor_ext;};
typedef struct XawVendorShellExtRec *XawVendorShellExtWidget;
typedef struct _XcmsCCC *XcmsCCC;
typedef struct _XcmsCCC XcmsCCCRec;
typedef struct $CCAEDA52B750854C25441FD25B4DA915 XcmsCIELab;
typedef struct $F2C3184CEEDD49A7FB665043E59AF1F0 XcmsCIELuv;
typedef struct $6CDBBC56673808DBC2DA2091B1C251E0 XcmsCIEXYZ;
typedef struct $1C989109A1E2AFEC30347169F1D74F63 XcmsCIEuvY;
typedef struct $3DDB46D984C469553E00D9B3BEA3349C XcmsCIExyY;
typedef struct $CC029EE2801424412B933EF9795F5046 XcmsColor;
typedef unsigned __int64 XcmsColorFormat;
typedef struct _XcmsColorSpace XcmsColorSpace;
typedef int (*XcmsCompressionProc)(XcmsCCC, XcmsColor *, unsigned int, unsigned int, int *);
typedef int (*XcmsConversionProc)();
typedef double XcmsFloat;
typedef XcmsConversionProc *XcmsFuncListPtr;
typedef struct _XcmsFunctionSet XcmsFunctionSet;
typedef struct $DFC468A573BED393F8C22B677D1D24EF XcmsPad;
typedef int (*XcmsParseStringProc)(char *, XcmsColor *);
typedef struct _XcmsPerScrnInfo XcmsPerScrnInfo;
typedef struct $EBE355A101A506B8BB9BC1A4B6A6F5B0 XcmsRGB;
typedef struct $389F741C4688F992C1DDC28AB9B68F46 XcmsRGBi;
typedef void (*XcmsScreenFreeProc)(XPointer);
typedef int (*XcmsScreenInitProc)(Display *, int, XcmsPerScrnInfo *);
typedef struct $D484A87E94E3DD0BB42E942E2185E2EE XcmsTekHVC;
typedef int (*XcmsWhiteAdjustProc)(XcmsCCC, XcmsColor *, XcmsColor *, XcmsColorFormat, XcmsColor *, unsigned int, int *);
typedef struct _XctRec *XctData;
typedef unsigned __int64 XctFlags;
typedef enum $223FFC458C10D7E132B773948B7A6063 XctHDirection;
typedef enum $EE526AEE819F68457CE89197307C431F XctResult;
typedef unsigned __int8 *XctString;
typedef Drawable XdbeBackBuffer;
typedef struct $90F4279CED75C32CE4133781567FE5DA XdbeBackBufferAttributes;
typedef struct $0F27B4D01012055D150552B99E49EC48 XdbeBufferError;
typedef struct $DA4C8A7C662E901D031392A43A7446A0 XdbeScreenVisualInfo;
typedef unsigned __int8 XdbeSwapAction;
typedef struct $1BE3EF8FAEFD838E59DA61E46CB3832E XdbeSwapInfo;
typedef struct $665F1ADE1952A58E13B5D78D0B8A3255 XdbeVisualInfo;
typedef struct _XdmAuthKey *XdmAuthKeyPtr;
typedef struct _XdmAuthKey XdmAuthKeyRec;
typedef struct _XdmcpBuffer XdmcpBuffer;
typedef struct _XdmcpBuffer *XdmcpBufferPtr;
typedef struct _XdmcpHeader XdmcpHeader;
typedef struct _XdmcpHeader *XdmcpHeaderPtr;
typedef char *XdmcpNetaddr;
typedef unsigned int XieAlignment;
typedef unsigned int XieArithmeticOp;
typedef struct $CA1B8E85F8BC45E89F5EAEE3872ACCE2 XieCIELabToRGBParam;
typedef struct $CA1B8E85F8BC45E89F5EAEE3872ACCE2 XieCIEXYZToRGBParam;
typedef struct $C6B80DDC7E014D805232C0BED8F85FC6 XieClipScaleParam;
typedef struct $E37A47A1B2D1B684050E8CBAC9BEB571 XieColorAllocAllParam;
typedef struct $0943ACAEA05D0ED4F3B13BBB6DC4F621 XieColorAllocEvent;
typedef struct $0C1B5BCAAF944068AC8FDD3FF293BE49 XieColorAllocMatchParam;
typedef struct $83EEA3C65D511D134E63BC4C078678EA XieColorAllocRequantizeParam;
typedef unsigned int XieColorAllocTechnique;
typedef XID XieColorList;
typedef unsigned int XieColorspace;
typedef unsigned int XieCompareOp;
typedef float XieConstant[3];
typedef unsigned int XieConstrainTechnique;
typedef struct $71952FA70F8A38CF7B3A6C590B8CECBF XieConvolveConstantParam;
typedef unsigned int XieConvolveTechnique;
typedef unsigned int XieDataClass;
typedef unsigned int XieDataType;
typedef struct $C57BD7F5DCE57DB37ADE21A2BF85D666 XieDecodeG31DParam;
typedef struct $C57BD7F5DCE57DB37ADE21A2BF85D666 XieDecodeG32DParam;
typedef struct $C57BD7F5DCE57DB37ADE21A2BF85D666 XieDecodeG42DParam;
typedef struct $A0776C2A9657CE88DE35474E3085EF5B XieDecodeJPEGBaselineParam;
typedef struct $3ED4349315ED2E34C219EF97C5E4C846 XieDecodeJPEGLosslessParam;
typedef struct $410711789B9EDACF4D452D952EAA038F XieDecodeNotifyEvent;
typedef struct $C57BD7F5DCE57DB37ADE21A2BF85D666 XieDecodeTIFF2Param;
typedef struct $23AA629CEBB8A7A46528512A96FC50F0 XieDecodeTIFFPackBitsParam;
typedef unsigned int XieDecodeTechnique;
typedef struct $576F8F1D853142FEE79A3EA73FDE4304 XieDecodeUncompressedSingleParam;
typedef struct $BBE89DCF5B2B5370EBA03B3532FF6AB9 XieDecodeUncompressedTripleParam;
typedef struct $9781CF45113C82D4A145A3BD405D900E XieDitherOrderedParam;
typedef unsigned int XieDitherTechnique;
typedef struct $EA06689320989664A85B5DE3D411DA20 XieEncodeG31DParam;
typedef struct $F07337DBFAD2F21A51680BA8BC66C5A1 XieEncodeG32DParam;
typedef struct $E2D85E53E11D137C5C1A7F1A83598D67 XieEncodeG42DParam;
typedef struct $8B7611559FC3583744BC038C25BD686C XieEncodeJPEGBaselineParam;
typedef struct $C5BFDD7B5C2A1BD26A0FB255FC0EFDAC XieEncodeJPEGLosslessParam;
typedef struct $B5463EC62BF92F8298BCB7B7274FD8F4 XieEncodeServerChoiceParam;
typedef struct $9A95D2D738A6604438676059B54BB69F XieEncodeTIFF2Param;
typedef struct $98AA837ABBCCC1B7351149D0F74847DA XieEncodeTIFFPackBitsParam;
typedef unsigned int XieEncodeTechnique;
typedef struct $4FE54840E357208BB1087AA93F026F9F XieEncodeUncompressedSingleParam;
typedef struct $14FB38E75927E3144F2B587F9DC76DB0 XieEncodeUncompressedTripleParam;
typedef struct $15577552D961AFA6A1781997BEA7C9C8 XieExportAvailableEvent;
typedef unsigned int XieExportNotify;
typedef unsigned int XieExportState;
typedef struct $1F4DB4D2F425C11871D405C5200D2C0C XieExtensionInfo;
typedef struct $FA2B9565724F1937A519136AEB6F7A9B XieFloAccessError;
typedef struct $FA2B9565724F1937A519136AEB6F7A9B XieFloAllocError;
typedef struct $BE99E8C6AA65192BABFBDCE9E4A9EC98 XieFloDomainError;
typedef struct $FA2B9565724F1937A519136AEB6F7A9B XieFloElementError;
typedef struct $FA2B9565724F1937A519136AEB6F7A9B XieFloIDError;
typedef struct $FA2B9565724F1937A519136AEB6F7A9B XieFloLengthError;
typedef struct $FA2B9565724F1937A519136AEB6F7A9B XieFloMatchError;
typedef struct $8B405FDA37E627A06C3D21FFB3C136C9 XieFloOperatorError;
typedef struct $B801AC14F91E36208C367A2BD41CD62B XieFloResourceError;
typedef struct $FA2B9565724F1937A519136AEB6F7A9B XieFloSourceError;
typedef struct $1708D706B4D5E259989334EB96BED3C3 XieFloTechniqueError;
typedef struct $2DFE04FA474C787A00BCDC32AEB81E8F XieFloValueError;
typedef float XieFloat;
typedef unsigned int XieGamutTechnique;
typedef struct $8BD90099CDB57D887F6A7D996A06A579 XieGeomAntialiasByAreaParam;
typedef struct $2602B731D6A573E1FC5C185DF19F2A61 XieGeomAntialiasByLowpassParam;
typedef struct $4611845834F1A683F43198CA8D99A490 XieGeomGaussianParam;
typedef struct $F59D04B0C8CB7EEEB0B4D7B3465C3DC6 XieGeomNearestNeighborParam;
typedef unsigned int XieGeometryTechnique;
typedef struct $39772637685CB5673CB65BCFE258A572 XieHistogramData;
typedef struct $C525EC60A2238B39F1BB586D029D6BB4 XieHistogramGaussianParam;
typedef struct $D843708B701233E347EA43C5F5C70A8D XieHistogramHyperbolicParam;
typedef unsigned int XieHistogramShape;
typedef struct $BC5DA2CDBFE0FD6DC6B7A0DA7456A2F1 XieImportObscuredEvent;
typedef unsigned int XieInterleave;
typedef unsigned __int64 XieLTriplet[3];
typedef unsigned __int64 XieLevels[3];
typedef XID XieLut;
typedef unsigned int XieMathOp;
typedef float XieMatrix[9];
typedef unsigned int XieOrientation;
typedef struct $E0DBFADDF3652E8CE621A72BDA30F8A3 XiePhotoElement;
typedef XID XiePhotoflo;
typedef struct $6D6F9D012998C18FB9B59DB7A6C42C6D XiePhotofloDoneEvent;
typedef XiePhotoElement *XiePhotofloGraph;
typedef unsigned int XiePhotofloOutcome;
typedef unsigned int XiePhotofloState;
typedef XID XiePhotomap;
typedef XID XiePhotospace;
typedef unsigned int XiePhototag;
typedef void *XiePointer;
typedef struct $C091FE37BE48B57F0C9CC52C5BCAFCD1 XieProcessDomain;
typedef struct $1D2BE68F971B32FE39D701D3B79827D1 XieRGBToCIELabParam;
typedef struct $1D2BE68F971B32FE39D701D3B79827D1 XieRGBToCIEXYZParam;
typedef struct $C0DFA4F5A1F13C29E08CE65D1EE1C98E XieRGBToYCCParam;
typedef struct $B1675587FF9CAEC4430A5BA2877852BF XieRGBToYCbCrParam;
typedef struct $498D65FA687D063192E2A9ABE1CAA259 XieRectangle;
typedef XID XieRoi;
typedef unsigned int XieServiceClass;
typedef struct $8154A6DB863DC5D0F08C1C8AD691C4FD XieTechnique;
typedef unsigned int XieTechniqueGroup;
typedef struct $86115E384CDA3DB0102B675F968DDCF3 XieTile;
typedef struct $557B668BFC9AD2B47E0C3158C53F3D82 XieWhiteAdjustCIELabShiftParam;
typedef unsigned int XieWhiteAdjustTechnique;
typedef struct $B38E47E0523AE2397AD97CE90D3CF30A XieYCCToRGBParam;
typedef struct $F1D5D2FEA615795AC1E5DD0F3D89527E XieYCbCrToRGBParam;
typedef struct _XkbAccessXNotify XkbAccessXNotifyEvent;
typedef union _XkbAction XkbAction;
typedef struct _XkbActionMessage XkbActionMessageEvent;
typedef struct _XkbAnyAction XkbAnyAction;
typedef struct _XkbAnyDoodad *XkbAnyDoodadPtr;
typedef struct _XkbAnyDoodad XkbAnyDoodadRec;
typedef struct _XkbAnyEvent XkbAnyEvent;
typedef struct _XkbBehavior XkbBehavior;
typedef struct _XkbBellNotify XkbBellNotifyEvent;
typedef struct _XkbBounds *XkbBoundsPtr;
typedef struct _XkbBounds XkbBoundsRec;
typedef union $0E48C489052D3F6994034E9D4DCBE034 *XkbCFScanResultPtr;
typedef union $0E48C489052D3F6994034E9D4DCBE034 XkbCFScanResultRec;
typedef struct _XkbChanges *XkbChangesPtr;
typedef struct _XkbChanges XkbChangesRec;
typedef struct _XkbClientMapRec *XkbClientMapPtr;
typedef struct _XkbClientMapRec XkbClientMapRec;
typedef struct _XkbColor *XkbColorPtr;
typedef struct _XkbColor XkbColorRec;
typedef struct _XkbCompatChanges *XkbCompatChangesPtr;
typedef struct _XkbCompatChanges XkbCompatChangesRec;
typedef struct _XkbCompatMapNotify XkbCompatMapNotifyEvent;
typedef struct _XkbCompatMapRec *XkbCompatMapPtr;
typedef struct _XkbCompatMapRec XkbCompatMapRec;
typedef struct _XkbComponentList *XkbComponentListPtr;
typedef struct _XkbComponentList XkbComponentListRec;
typedef struct _XkbComponentName *XkbComponentNamePtr;
typedef struct _XkbComponentName XkbComponentNameRec;
typedef struct _XkbComponentNames *XkbComponentNamesPtr;
typedef struct _XkbComponentNames XkbComponentNamesRec;
typedef struct _XkbConfigField *XkbConfigFieldPtr;
typedef struct _XkbConfigField XkbConfigFieldRec;
typedef struct _XkbConfigFields *XkbConfigFieldsPtr;
typedef struct _XkbConfigFields XkbConfigFieldsRec;
typedef int (*XkbConfigFinishFunc)(XkbConfigFieldsPtr, XkbDescPtr, XkbConfigRtrnPtr, int);
typedef struct _XkbConfigModInfo *XkbConfigModInfoPtr;
typedef struct _XkbConfigModInfo XkbConfigModInfoRec;
typedef int (*XkbConfigParseFunc)(FILE *, XkbConfigFieldsPtr, XkbConfigFieldPtr, XkbDescPtr, XkbConfigRtrnPtr);
typedef struct _XkbConfigRtrnPriv *XkbConfigRtrnPrivPtr;
typedef struct _XkbConfigRtrnPriv XkbConfigRtrnPrivRec;
typedef struct _XkbConfigRtrn *XkbConfigRtrnPtr;
typedef struct _XkbConfigRtrn XkbConfigRtrnRec;
typedef struct _XkbConfigUnboundMod *XkbConfigUnboundModPtr;
typedef struct _XkbConfigUnboundMod XkbConfigUnboundModRec;
typedef struct _XkbControlsChanges *XkbControlsChangesPtr;
typedef struct _XkbControlsChanges XkbControlsChangesRec;
typedef struct _XkbControlsNotify XkbControlsNotifyEvent;
typedef struct _XkbControls *XkbControlsPtr;
typedef struct _XkbControls XkbControlsRec;
typedef struct _XkbConverters XkbConverters;
typedef struct _XkbCtrlsAction XkbCtrlsAction;
typedef struct _XkbDesc *XkbDescPtr;
typedef struct _XkbDesc XkbDescRec;
typedef struct _XkbDeviceBtnAction XkbDeviceBtnAction;
typedef struct _XkbDeviceChanges *XkbDeviceChangesPtr;
typedef struct _XkbDeviceChanges XkbDeviceChangesRec;
typedef struct _XkbDeviceInfo *XkbDeviceInfoPtr;
typedef struct _XkbDeviceInfo XkbDeviceInfoRec;
typedef struct _XkbDeviceLedChanges *XkbDeviceLedChangesPtr;
typedef struct _XkbDeviceLedChanges XkbDeviceLedChangesRec;
typedef struct _XkbDeviceLedInfo *XkbDeviceLedInfoPtr;
typedef struct _XkbDeviceLedInfo XkbDeviceLedInfoRec;
typedef struct _XkbDeviceValuatorAction XkbDeviceValuatorAction;
typedef union _XkbDoodad *XkbDoodadPtr;
typedef union _XkbDoodad XkbDoodadRec;
typedef union _XkbEvent XkbEvent;
typedef struct _XkbExtensionDeviceNotify XkbExtensionDeviceNotifyEvent;
typedef void (*XkbFileAddOnFunc)(FILE *, XkbFileInfo *, int, int, int, void *);
typedef struct _XkbFileInfo XkbFileInfo;
typedef struct _XkbFileInfo *XkbFileInfoPtr;
typedef struct _XkbGeometry *XkbGeometryPtr;
typedef struct _XkbGeometry XkbGeometryRec;
typedef struct _XkbGeometrySizes *XkbGeometrySizesPtr;
typedef struct _XkbGeometrySizes XkbGeometrySizesRec;
typedef char *(*XkbGetAtomNameFunc)(Display *, Atom);
typedef struct _XkbGroupAction XkbGroupAction;
typedef struct _XkbISOAction XkbISOAction;
typedef struct _XkbIndicatorChanges *XkbIndicatorChangesPtr;
typedef struct _XkbIndicatorChanges XkbIndicatorChangesRec;
typedef struct _XkbIndicatorDoodad *XkbIndicatorDoodadPtr;
typedef struct _XkbIndicatorDoodad XkbIndicatorDoodadRec;
typedef struct _XkbIndicatorMapRec *XkbIndicatorMapPtr;
typedef struct _XkbIndicatorMapRec XkbIndicatorMapRec;
typedef struct _XkbIndicatorNotify XkbIndicatorNotifyEvent;
typedef struct _XkbIndicatorRec *XkbIndicatorPtr;
typedef struct _XkbIndicatorRec XkbIndicatorRec;
typedef struct _XkbInfoRec *XkbInfoPtr;
typedef struct _XkbInfoRec XkbInfoRec;
typedef Atom (*XkbInternAtomFunc)(Display *, const char *, int);
typedef int (*XkbKSToMBFunc)(XPointer, KeySym, char *, int, int *);
typedef struct _XkbKTMapEntry *XkbKTMapEntryPtr;
typedef struct _XkbKTMapEntry XkbKTMapEntryRec;
typedef struct _XkbKbdDpyState *XkbKbdDpyStatePtr;
typedef struct _XkbKbdDpyState XkbKbdDpyStateRec;
typedef struct _XkbKeyAliasRec *XkbKeyAliasPtr;
typedef struct _XkbKeyAliasRec XkbKeyAliasRec;
typedef struct _XkbKeyNameRec *XkbKeyNamePtr;
typedef struct _XkbKeyNameRec XkbKeyNameRec;
typedef struct _XkbKey *XkbKeyPtr;
typedef struct _XkbKey XkbKeyRec;
typedef struct _XkbKeyType *XkbKeyTypePtr;
typedef struct _XkbKeyType XkbKeyTypeRec;
typedef struct _XkbLogoDoodad *XkbLogoDoodadPtr;
typedef struct _XkbLogoDoodad XkbLogoDoodadRec;
typedef KeySym (*XkbMBToKSFunc)(XPointer, char *, int, int *);
typedef struct _XkbMapChanges *XkbMapChangesPtr;
typedef struct _XkbMapChanges XkbMapChangesRec;
typedef struct _XkbMapNotifyEvent XkbMapNotifyEvent;
typedef struct _XkbMessageAction XkbMessageAction;
typedef struct _XkbModAction XkbModAction;
typedef struct _XkbMods *XkbModsPtr;
typedef struct _XkbMods XkbModsRec;
typedef struct _XkbNameChanges *XkbNameChangesPtr;
typedef struct _XkbNameChanges XkbNameChangesRec;
typedef struct _XkbNamesNotify XkbNamesNotifyEvent;
typedef struct _XkbNamesRec *XkbNamesPtr;
typedef struct _XkbNamesRec XkbNamesRec;
typedef struct _XkbNewKeyboardNotify XkbNewKeyboardNotifyEvent;
typedef struct _XkbOutline *XkbOutlinePtr;
typedef struct _XkbOutline XkbOutlineRec;
typedef struct _XkbOverlayKey *XkbOverlayKeyPtr;
typedef struct _XkbOverlayKey XkbOverlayKeyRec;
typedef struct _XkbOverlay *XkbOverlayPtr;
typedef struct _XkbOverlay XkbOverlayRec;
typedef struct _XkbOverlayRow *XkbOverlayRowPtr;
typedef struct _XkbOverlayRow XkbOverlayRowRec;
typedef struct _XkbPoint *XkbPointPtr;
typedef struct _XkbPoint XkbPointRec;
typedef struct _XkbProperty *XkbPropertyPtr;
typedef struct _XkbProperty XkbPropertyRec;
typedef struct _XkbPtrAction XkbPtrAction;
typedef struct _XkbPtrBtnAction XkbPtrBtnAction;
typedef struct _XkbPtrDfltAction XkbPtrDfltAction;
typedef struct _XkbRF_DescribeVars *XkbRF_DescribeVarsPtr;
typedef struct _XkbRF_DescribeVars XkbRF_DescribeVarsRec;
typedef struct _XkbRF_Rule *XkbRF_RulePtr;
typedef struct _XkbRF_Rule XkbRF_RuleRec;
typedef struct _XkbRF_Rules *XkbRF_RulesPtr;
typedef struct _XkbRF_Rules XkbRF_RulesRec;
typedef struct _XkbRF_VarDefs *XkbRF_VarDefsPtr;
typedef struct _XkbRF_VarDefs XkbRF_VarDefsRec;
typedef struct _XkbRF_VarDesc *XkbRF_VarDescPtr;
typedef struct _XkbRF_VarDesc XkbRF_VarDescRec;
typedef struct _XkbReadBuffer *XkbReadBufferPtr;
typedef struct _XkbReadBuffer XkbReadBufferRec;
typedef struct _XkbRedirectKeyAction XkbRedirectKeyAction;
typedef struct _XkbRow *XkbRowPtr;
typedef struct _XkbRow XkbRowRec;
typedef struct _XkbSection *XkbSectionPtr;
typedef struct _XkbSection XkbSectionRec;
typedef struct _XkbServerMapRec *XkbServerMapPtr;
typedef struct _XkbServerMapRec XkbServerMapRec;
typedef struct _XkbShapeDoodad *XkbShapeDoodadPtr;
typedef struct _XkbShapeDoodad XkbShapeDoodadRec;
typedef struct _XkbShape *XkbShapePtr;
typedef struct _XkbShape XkbShapeRec;
typedef struct _XkbStateNotifyEvent XkbStateNotifyEvent;
typedef struct _XkbStateRec *XkbStatePtr;
typedef struct _XkbStateRec XkbStateRec;
typedef struct _XkbSwitchScreenAction XkbSwitchScreenAction;
typedef struct _XkbSymInterpretRec *XkbSymInterpretPtr;
typedef struct _XkbSymInterpretRec XkbSymInterpretRec;
typedef struct _XkbSymMapRec *XkbSymMapPtr;
typedef struct _XkbSymMapRec XkbSymMapRec;
typedef struct _XkbTextDoodad *XkbTextDoodadPtr;
typedef struct _XkbTextDoodad XkbTextDoodadRec;
typedef KeySym (*XkbToUpperFunc)(KeySym);
typedef struct _XmAllProtocolsMgrRec *XmAllProtocolsMgr;
typedef struct _XmAllProtocolsMgrRec XmAllProtocolsMgrRec;
typedef struct $DD43D8CABB66A19A2E980F6986CCC925 XmAnyCallbackStruct;
typedef struct _XmAnyICCCallbackStruct *XmAnyICCCallback;
typedef struct _XmAnyICCCallbackStruct XmAnyICCCallbackStruct;
typedef struct $48A0BCBFBE5BF4DD1FF757783C127908 XmArrowButtonCallbackStruct;
typedef struct _XmArrowButtonClassPart XmArrowButtonClassPart;
typedef struct _XmArrowButtonClassRec XmArrowButtonClassRec;
typedef struct _XmArrowButtonGadgetRec *XmArrowButtonGadget;
typedef struct _XmArrowButtonGadgetClassRec *XmArrowButtonGadgetClass;
typedef struct _XmArrowButtonGadgetClassPart XmArrowButtonGadgetClassPart;
typedef struct _XmArrowButtonGadgetClassRec XmArrowButtonGadgetClassRec;
typedef struct _XmArrowButtonGadgetPart XmArrowButtonGadgetPart;
typedef struct _XmArrowButtonGadgetRec XmArrowButtonGadgetRec;
typedef struct _XmArrowButtonPart XmArrowButtonPart;
typedef struct _XmArrowButtonRec XmArrowButtonRec;
typedef struct _XmArrowButtonRec *XmArrowButtonWidget;
typedef struct _XmArrowButtonClassRec *XmArrowButtonWidgetClass;
typedef struct _XmArrowPixmap XmArrowPixmap;
typedef struct _XmBackingRec *XmBacking;
typedef struct _XmBackingRec XmBackingRec;
typedef struct _XmBaseClassExtRec *XmBaseClassExt;
typedef struct _XmBaseClassExtRec XmBaseClassExtRec;
typedef struct _XmBaselineMargins XmBaselineMargins;
typedef struct $A145BC600EED1A472B5CFB66AAA6D9D9 XmBulletinBoardClassPart;
typedef struct _XmBulletinBoardClassRec XmBulletinBoardClassRec;
typedef struct _XmBulletinBoardConstraintPart *XmBulletinBoardConstraint;
typedef struct _XmBulletinBoardConstraintPart XmBulletinBoardConstraintPart;
typedef struct $45F1E0828B80E7030BA1207BF76A2813 XmBulletinBoardPart;
typedef struct _XmBulletinBoardRec XmBulletinBoardRec;
typedef struct _XmBulletinBoardRec *XmBulletinBoardWidget;
typedef struct _XmBulletinBoardClassRec *XmBulletinBoardWidgetClass;
typedef struct _XmButtonEventStatusRec XmButtonEventStatusRec;
typedef unsigned __int8 XmButtonType;
typedef XmButtonType *XmButtonTypeTable;
typedef struct _XmCacheClassPart XmCacheClassPart;
typedef struct _XmCacheClassPart *XmCacheClassPartPtr;
typedef int (*XmCacheCompareProc)(XtPointer, XtPointer);
typedef void (*XmCacheCopyProc)(XtPointer, XtPointer, size_t);
typedef struct $EA67C4467E5D392AEC3890F142F1A94F XmCascadeButtonClassPart;
typedef struct _XmCascadeButtonClassRec XmCascadeButtonClassRec;
typedef struct _XmCascadeButtonGCacheObjClassPart XmCascadeButtonGCacheObjClassPart;
typedef struct _XmCascadeButtonGCacheObjClassRec XmCascadeButtonGCacheObjClassRec;
typedef struct _XmCascadeButtonGCacheObjPart XmCascadeButtonGCacheObjPart;
typedef struct _XmCascadeButtonGCacheObjRec XmCascadeButtonGCacheObjRec;
typedef struct _XmCascadeButtonGCacheObjRec *XmCascadeButtonGCacheObject;
typedef struct _XmCascadeButtonGadgetRec *XmCascadeButtonGadget;
typedef struct _XmCascadeButtonGadgetClassRec *XmCascadeButtonGadgetClass;
typedef struct $EA67C4467E5D392AEC3890F142F1A94F XmCascadeButtonGadgetClassPart;
typedef struct _XmCascadeButtonGadgetClassRec XmCascadeButtonGadgetClassRec;
typedef struct _XmCascadeButtonGadgetPart XmCascadeButtonGadgetPart;
typedef struct _XmCascadeButtonGadgetRec XmCascadeButtonGadgetRec;
typedef struct $AF66E5B05A2313DCCC13207016396621 XmCascadeButtonPart;
typedef struct _XmCascadeButtonRec XmCascadeButtonRec;
typedef struct _XmCascadeButtonRec *XmCascadeButtonWidget;
typedef struct _XmCascadeButtonClassRec *XmCascadeButtonWidgetClass;
typedef struct _XmCascadeButtonWidgetRec XmCascadeButtonWidgetRec;
typedef struct $50772DE75AF019132AD1D3E995EADF5D *XmClipboardPendingList;
typedef struct $50772DE75AF019132AD1D3E995EADF5D XmClipboardPendingRec;
typedef void (*XmCloneVisualProc)(XmDragIconObject, Widget, Widget);
typedef struct _XmColorData XmColorData;
typedef void (*XmColorProc)(XColor *bg_color, XColor *fg_color, XColor *sel_color, XColor *ts_color, XColor *bs_color);
typedef struct $0CC2C7B5C742C31129BAD132CF836E30 XmCommandCallbackStruct;
typedef struct $EA67C4467E5D392AEC3890F142F1A94F XmCommandClassPart;
typedef struct _XmCommandClassRec XmCommandClassRec;
typedef struct _XmCommandConstraintPart *XmCommandConstraint;
typedef struct _XmCommandConstraintPart XmCommandConstraintPart;
typedef struct $74F473584FBEEE22607318AA08113DD7 XmCommandPart;
typedef struct _XmCommandRec XmCommandRec;
typedef struct _XmCommandRec *XmCommandWidget;
typedef struct _XmCommandClassRec *XmCommandWidgetClass;
typedef union _XmConvertSelectionRec XmConvertSelectionRec;
typedef void (*XmCutPasteProc)(Widget w, __int64 *data_id, __int64 *private_id, int *reason);
typedef void (*XmDSMChangeRootProc)(XmDropSiteManagerObject, XtPointer, XtPointer);
typedef void (*XmDSMCreateDSInfoTable)(XmDropSiteManagerObject);
typedef void (*XmDSMCreateInfoProc)(XmDropSiteManagerObject, Widget, ArgList, Cardinal);
typedef void (*XmDSMDestroyDSInfoTable)(XmDropSiteManagerObject);
typedef void (*XmDSMDestroyInfoProc)(XmDropSiteManagerObject, Widget);
typedef void (*XmDSMEndUpdateProc)(XmDropSiteManagerObject, Widget);
typedef int (*XmDSMGetTreeFromDSMProc)(XmDropSiteManagerObject, Widget, XtPointer);
typedef void (*XmDSMInsertInfoProc)(XmDropSiteManagerObject, XtPointer, XtPointer);
typedef void (*XmDSMOperationChangedProc)(XmDropSiteManagerObject, XtPointer, XtPointer);
typedef void (*XmDSMProcessDropProc)(XmDropSiteManagerObject, XtPointer, XtPointer);
typedef void (*XmDSMProcessMotionProc)(XmDropSiteManagerObject, XtPointer, XtPointer);
typedef void (*XmDSMRegisterInfoProc)(XmDropSiteManagerObject, Widget, XtPointer);
typedef void (*XmDSMRemoveInfoProc)(XmDropSiteManagerObject, XtPointer);
typedef void (*XmDSMRetrieveInfoProc)(XmDropSiteManagerObject, Widget, ArgList, Cardinal);
typedef void (*XmDSMStartUpdateProc)(XmDropSiteManagerObject, Widget);
typedef void (*XmDSMSyncTreeProc)(XmDropSiteManagerObject, Widget);
typedef void (*XmDSMUnregisterInfoProc)(XmDropSiteManagerObject, XtPointer);
typedef void (*XmDSMUpdateInfoProc)(XmDropSiteManagerObject, Widget, ArgList, Cardinal);
typedef void (*XmDSMUpdateProc)(XmDropSiteManagerObject, XtPointer, XtPointer);
typedef XtPointer (*XmDSMWidgetToInfoProc)(XmDropSiteManagerObject, Widget);
typedef struct _XmDefaultBindingStringRec *XmDefaultBindingString;
typedef struct _XmDefaultBindingStringRec XmDefaultBindingStringRec;
typedef struct _XmDesktopClassPart XmDesktopClassPart;
typedef struct _XmDesktopClassPart *XmDesktopClassPartPtr;
typedef struct _XmDesktopClassRec XmDesktopClassRec;
typedef struct _XmDesktopRec *XmDesktopObject;
typedef struct _XmDesktopClassRec *XmDesktopObjectClass;
typedef struct $B1BB4607B75CFFBC9D91E675F4E88C61 XmDesktopPart;
typedef struct $B1BB4607B75CFFBC9D91E675F4E88C61 *XmDesktopPartPtr;
typedef struct _XmDesktopRec XmDesktopRec;
typedef struct $EA67C4467E5D392AEC3890F142F1A94F XmDialogShellClassPart;
typedef struct _XmDialogShellClassRec XmDialogShellClassRec;
typedef struct _XmDialogShellExtClassPart XmDialogShellExtClassPart;
typedef struct _XmDialogShellExtClassPart *XmDialogShellExtClassPartPtr;
typedef struct _XmDialogShellExtClassRec XmDialogShellExtClassRec;
typedef struct _XmDialogShellExtRec *XmDialogShellExtObject;
typedef struct _XmDialogShellExtClassRec *XmDialogShellExtObjectClass;
typedef struct _XmDialogShellExtPart XmDialogShellExtPart;
typedef struct _XmDialogShellExtRec XmDialogShellExtRec;
typedef struct $1A3559000C526E1E4ABA732489243BCE XmDialogShellPart;
typedef struct _XmDialogShellRec XmDialogShellRec;
typedef struct _XmDialogShellRec *XmDialogShellWidget;
typedef struct _XmDialogShellClassRec *XmDialogShellWidgetClass;
typedef struct _XmDialogShellWidgetRec XmDialogShellWidgetRec;
typedef struct _XmDisplayRec *XmDisplay;
typedef struct _XmDisplayClassRec *XmDisplayClass;
typedef struct $C0CF6D5FED3C9B9727D7B5E4FF32FB5D XmDisplayClassPart;
typedef struct _XmDisplayClassRec XmDisplayClassRec;
typedef Widget (*XmDisplayGetDisplayProc)(Display *);
typedef struct _XmDisplayInfo XmDisplayInfo;
typedef struct $ECAEF0AC09FAAEF4471BF88EF418BB5F XmDisplayPart;
typedef struct $ECAEF0AC09FAAEF4471BF88EF418BB5F *XmDisplayPartPtr;
typedef struct _XmDisplayRec XmDisplayRec;
typedef void (*XmDragCancelProc)(XmDragContext);
typedef struct _XmDragContextRec *XmDragContext;
typedef struct _XmDragContextClassRec *XmDragContextClass;
typedef struct $EE866E46B57D84E2A02F424C24BE7B31 XmDragContextClassPart;
typedef struct _XmDragContextClassRec XmDragContextClassRec;
typedef struct _XmDragContextPart XmDragContextPart;
typedef struct _XmDragContextRec XmDragContextRec;
typedef struct _XmDragCursorRec *XmDragCursorCache;
typedef struct _XmDragCursorRec XmDragCursorRec;
typedef struct _XmDragDropFinishCallbackStruct *XmDragDropFinishCallback;
typedef struct _XmDragDropFinishCallbackStruct XmDragDropFinishCallbackStruct;
typedef struct $EA67C4467E5D392AEC3890F142F1A94F XmDragIconClassPart;
typedef struct _XmDragIconClassRec XmDragIconClassRec;
typedef struct _XmDragIconRec *XmDragIconObject;
typedef struct _XmDragIconClassRec *XmDragIconObjectClass;
typedef struct $CEBF0A3380E34CA7D192D32F0B21F5A4 XmDragIconPart;
typedef struct $CEBF0A3380E34CA7D192D32F0B21F5A4 *XmDragIconPartPtr;
typedef struct _XmDragIconRec XmDragIconRec;
typedef struct _XmDragMotionCallbackStruct *XmDragMotionCallback;
typedef struct _XmDragMotionCallbackStruct XmDragMotionCallbackStruct;
typedef struct _XmDragOverBlendRec *XmDragOverBlend;
typedef struct _XmDragOverBlendRec XmDragOverBlendRec;
typedef struct $EA67C4467E5D392AEC3890F142F1A94F XmDragOverShellClassPart;
typedef struct _XmDragOverShellClassRec XmDragOverShellClassRec;
typedef struct _XmDragOverShellPart XmDragOverShellPart;
typedef struct _XmDragOverShellRec XmDragOverShellRec;
typedef struct _XmDragOverShellRec *XmDragOverShellWidget;
typedef struct _XmDragOverShellClassRec *XmDragOverShellWidgetClass;
typedef struct _XmDragProcCallbackStruct *XmDragProcCallback;
typedef struct _XmDragProcCallbackStruct XmDragProcCallbackStruct;
typedef struct $FDEF638EE31B74BBB9D41AD628E95644 *XmDragReceiverInfo;
typedef struct $FDEF638EE31B74BBB9D41AD628E95644 XmDragReceiverInfoStruct;
typedef void (*XmDragStartProc)(XmDragContext, Widget, XEvent *);
typedef struct $9B6DE42DFC0BE749FCDBD18B5A574DFA XmDrawingAreaCallbackStruct;
typedef struct $EA67C4467E5D392AEC3890F142F1A94F XmDrawingAreaClassPart;
typedef struct _XmDrawingAreaClassRec XmDrawingAreaClassRec;
typedef struct _XmDrawingAreaConstraintPart *XmDrawingAreaConstraint;
typedef struct _XmDrawingAreaConstraintPart XmDrawingAreaConstraintPart;
typedef struct $574CAC262D45A25569DDBEEFAB473CD5 XmDrawingAreaPart;
typedef struct _XmDrawingAreaRec XmDrawingAreaRec;
typedef struct _XmDrawingAreaRec *XmDrawingAreaWidget;
typedef struct _XmDrawingAreaClassRec *XmDrawingAreaWidgetClass;
typedef struct $F1C455A40F8068619788DEC05B45D2AF XmDrawnButtonCallbackStruct;
typedef struct _XmDrawnButtonClassPart XmDrawnButtonClassPart;
typedef struct _XmDrawnButtonClassRec XmDrawnButtonClassRec;
typedef struct _XmDrawnButtonPart XmDrawnButtonPart;
typedef struct _XmDrawnButtonRec XmDrawnButtonRec;
typedef struct _XmDrawnButtonRec *XmDrawnButtonWidget;
typedef struct _XmDrawnButtonClassRec *XmDrawnButtonWidgetClass;
typedef struct _XmDropFinishCallbackStruct *XmDropFinishCallback;
typedef struct _XmDropFinishCallbackStruct XmDropFinishCallbackStruct;
typedef struct _XmDropProcCallbackStruct *XmDropProcCallback;
typedef struct _XmDropProcCallbackStruct XmDropProcCallbackStruct;
typedef struct _XmDropSiteEnterCallbackStruct *XmDropSiteEnterCallback;
typedef struct _XmDropSiteEnterCallbackStruct XmDropSiteEnterCallbackStruct;
typedef struct _XmDropSiteLeaveCallbackStruct *XmDropSiteLeaveCallback;
typedef struct _XmDropSiteLeaveCallbackStruct XmDropSiteLeaveCallbackStruct;
typedef struct $DFCC977DF00F58347288DFBB1C9465DA XmDropSiteManagerClassPart;
typedef struct _XmDropSiteManagerClassRec XmDropSiteManagerClassRec;
typedef struct _XmDropSiteManagerRec *XmDropSiteManagerObject;
typedef struct _XmDropSiteManagerClassRec *XmDropSiteManagerObjectClass;
typedef struct _XmDropSiteManagerPart XmDropSiteManagerPart;
typedef struct _XmDropSiteManagerPart *XmDropSiteManagerPartPtr;
typedef struct _XmDropSiteManagerRec XmDropSiteManagerRec;
typedef struct _XmDropSiteVisualsRec *XmDropSiteVisuals;
typedef struct _XmDropSiteVisualsRec XmDropSiteVisualsRec;
typedef struct _XmDropStartCallbackStruct *XmDropStartCallback;
typedef struct _XmDropStartCallbackStruct XmDropStartCallbackStruct;
typedef void (*XmDropTransferAddTransferProc)(Widget, XmDropTransferEntry, Cardinal);
typedef struct _XmDropTransferClassPart XmDropTransferClassPart;
typedef struct _XmDropTransferClassRec XmDropTransferClassRec;
typedef struct _XmDropTransferEntryRec *XmDropTransferEntry;
typedef struct _XmDropTransferEntryRec XmDropTransferEntryRec;
typedef struct _XmDropTransferListRec *XmDropTransferList;
typedef struct _XmDropTransferListRec XmDropTransferListRec;
typedef struct _XmDropTransferRec *XmDropTransferObject;
typedef struct _XmDropTransferClassRec *XmDropTransferObjectClass;
typedef struct _XmDropTransferPart XmDropTransferPart;
typedef struct _XmDropTransferRec XmDropTransferRec;
typedef Widget (*XmDropTransferStartTransferProc)(Widget, ArgList, Cardinal);
typedef struct _XmExcludedParentPaneRec XmExcludedParentPaneRec;
typedef void (*XmExportProc)(Widget, int, XtArgVal *);
typedef struct _XmExtCache XmExtCache;
typedef struct _XmExtClassPart XmExtClassPart;
typedef struct _XmExtClassPart *XmExtClassPartPtr;
typedef struct _XmExtClassRec XmExtClassRec;
typedef struct _XmExtRec *XmExtObject;
typedef struct _XmExtClassRec *XmExtObjectClass;
typedef struct $E0457597E4167E07E7B544A574F8E386 XmExtPart;
typedef struct $E0457597E4167E07E7B544A574F8E386 *XmExtPartPtr;
typedef struct _XmExtRec XmExtRec;
typedef struct $9A231DBDEFAF4839DC9D8D20B6CD75A5 XmFileSelectionBoxCallbackStruct;
typedef struct $EA67C4467E5D392AEC3890F142F1A94F XmFileSelectionBoxClassPart;
typedef struct _XmFileSelectionBoxClassRec XmFileSelectionBoxClassRec;
typedef struct _XmFileSelectionBoxConstraintPart *XmFileSelectionBoxConstraint;
typedef struct _XmFileSelectionBoxConstraintPart XmFileSelectionBoxConstraintPart;
typedef struct $C8022F0EE9A6B1EF592F16F71323721F XmFileSelectionBoxPart;
typedef struct _XmFileSelectionBoxRec XmFileSelectionBoxRec;
typedef struct _XmFileSelectionBoxRec *XmFileSelectionBoxWidget;
typedef struct _XmFileSelectionBoxClassRec *XmFileSelectionBoxWidgetClass;
typedef enum $FF1FF5DA5604B4B1711E513F8BAF3747 XmFocusChange;
typedef void (*XmFocusChangeProc)(Widget, XmFocusChange);
typedef struct _XmFocusDataRec *XmFocusData;
typedef struct _XmFocusMovedCallbackStruct *XmFocusMovedCallback;
typedef struct _XmFocusMovedCallbackStruct XmFocusMovedCallbackStruct;
typedef void (*XmFocusMovedProc)(Widget, XtPointer, XtPointer);
typedef struct _XmFontListContextRec *XmFontContext;
typedef struct _XmFontListRec *XmFontList;
typedef struct _XmFontListRec *XmFontListEntry;
typedef enum $40DDC86762D4922A231DE7BCE40E1602 XmFontType;
typedef struct _XmFormAttachmentRec *XmFormAttachment;
typedef struct _XmFormAttachmentRec XmFormAttachmentRec;
typedef struct _XmFormClassPart XmFormClassPart;
typedef struct _XmFormClassRec XmFormClassRec;
typedef struct _XmFormConstraintPart *XmFormConstraint;
typedef struct _XmFormConstraintPart XmFormConstraintPart;
typedef struct _XmFormConstraintRec *XmFormConstraintPtr;
typedef struct _XmFormConstraintRec XmFormConstraintRec;
typedef struct _XmFormPart XmFormPart;
typedef struct _XmFormRec XmFormRec;
typedef struct _XmFormRec *XmFormWidget;
typedef struct _XmFormClassRec *XmFormWidgetClass;
typedef struct $EA67C4467E5D392AEC3890F142F1A94F XmFrameClassPart;
typedef struct _XmFrameClassRec XmFrameClassRec;
typedef struct _XmFrameConstraintPart *XmFrameConstraint;
typedef struct _XmFrameConstraintPart XmFrameConstraintPart;
typedef struct _XmFrameConstraintRec *XmFrameConstraintPtr;
typedef struct _XmFrameConstraintRec XmFrameConstraintRec;
typedef struct $8A52654D24E42D3905926E1FC7E9ABF6 XmFramePart;
typedef struct _XmFrameRec XmFrameRec;
typedef struct _XmFrameRec *XmFrameWidget;
typedef struct _XmFrameClassRec *XmFrameWidgetClass;
typedef struct _XmGadgetRec *XmGadget;
typedef struct _XmGadgetCache XmGadgetCache;
typedef void (*XmGadgetCacheProc)(XtPointer);
typedef struct _XmGadgetCache *XmGadgetCachePtr;
typedef struct _XmGadgetCacheRef XmGadgetCacheRef;
typedef struct _XmGadgetCacheRef *XmGadgetCacheRefPtr;
typedef struct _XmGadgetClassRec *XmGadgetClass;
typedef struct _XmGadgetClassExtRec *XmGadgetClassExt;
typedef struct _XmGadgetClassExtRec XmGadgetClassExtRec;
typedef struct _XmGadgetClassPart XmGadgetClassPart;
typedef struct _XmGadgetClassRec XmGadgetClassRec;
typedef struct _XmGadgetPart XmGadgetPart;
typedef struct _XmGadgetRec XmGadgetRec;
typedef struct _XmGenericClassExtRec *XmGenericClassExt;
typedef struct _XmGenericClassExtRec XmGenericClassExtRec;
typedef void (*XmGeoArrangeProc)(XmGeoMatrix, int, int, Dimension *, Dimension *);
typedef struct $3BE25E7CC08F2245A091500E0AFB6500 *XmGeoColumnLayout;
typedef struct $3BE25E7CC08F2245A091500E0AFB6500 XmGeoColumnLayoutRec;
typedef XmGeoMatrix (*XmGeoCreateProc)(Widget, Widget, XtWidgetGeometry *);
typedef Boolean (*XmGeoExceptProc)(XmGeoMatrix);
typedef void (*XmGeoExtDestructorProc)(XtPointer);
typedef union _XmGeoMajorLayoutRec *XmGeoMajorLayout;
typedef union _XmGeoMajorLayoutRec XmGeoMajorLayoutRec;
typedef struct _XmGeoMatrixRec *XmGeoMatrix;
typedef struct _XmGeoMatrixRec XmGeoMatrixRec;
typedef struct $8F2C7EBD5F5C00EC145265832DC3A795 *XmGeoRowLayout;
typedef struct $8F2C7EBD5F5C00EC145265832DC3A795 XmGeoRowLayoutRec;
typedef void (*XmGeoSegmentFixUpProc)(XmGeoMatrix, int, XmGeoMajorLayout, XmKidGeometry);
typedef Cardinal (*XmGetSecResDataFunc)(WidgetClass, XmSecondaryResourceData **);
typedef enum $BC1225400C03E76ABCA8FB74177B074B XmHighlightMode;
typedef unsigned int XmID;
typedef enum $1B378CA7E6769DBA655D66EA16101D09 XmImportOperator;
typedef XmImportOperator (*XmImportProc)(Widget, int, XtArgVal *);
typedef struct _XmKeyBindingRec *XmKeyBinding;
typedef struct _XmKeyBindingRec XmKeyBindingRec;
typedef KeySym *XmKeySymTable;
typedef struct $D964271DD6A251005E25C3AAAE129019 XmKeyboardData;
typedef struct _XmKidGeometryRec *XmKidGeometry;
typedef struct _XmKidGeometryRec XmKidGeometryRec;
typedef struct _XmLabelClassPart XmLabelClassPart;
typedef struct _XmLabelClassRec XmLabelClassRec;
typedef struct _XmLabelGCacheObjClassPart XmLabelGCacheObjClassPart;
typedef struct _XmLabelGCacheObjClassRec XmLabelGCacheObjClassRec;
typedef struct _XmLabelGCacheObjPart XmLabelGCacheObjPart;
typedef struct _XmLabelGCacheObjRec XmLabelGCacheObjRec;
typedef struct _XmLabelGCacheObjRec *XmLabelGCacheObject;
typedef struct _XmLabelGadgetRec *XmLabelGadget;
typedef struct _XmLabelGadgetClassRec *XmLabelGadgetClass;
typedef struct _XmLabelGadgetClassPart XmLabelGadgetClassPart;
typedef struct _XmLabelGadgetClassRec XmLabelGadgetClassRec;
typedef struct _XmLabelGadgetPart XmLabelGadgetPart;
typedef struct _XmLabelGadgetRec XmLabelGadgetRec;
typedef struct _XmLabelPart XmLabelPart;
typedef struct _XmLabelRec XmLabelRec;
typedef struct _XmLabelRec *XmLabelWidget;
typedef struct _XmLabelClassRec *XmLabelWidgetClass;
typedef struct $3A2AE62BCE225AF536516145E4F61430 XmListCallbackStruct;
typedef struct _XmListClassPart XmListClassPart;
typedef struct _XmListClassRec XmListClassRec;
typedef struct _XmListDragConvertStruct XmListDragConvertStruct;
typedef struct _XmListPart XmListPart;
typedef struct _XmListRec XmListRec;
typedef struct _XmListRec *XmListWidget;
typedef struct _XmListClassRec *XmListWidgetClass;
typedef struct $EA67C4467E5D392AEC3890F142F1A94F XmMainWindowClassPart;
typedef struct _XmMainWindowClassRec XmMainWindowClassRec;
typedef struct _XmMainWindowConstraintPart *XmMainWindowConstraint;
typedef struct _XmMainWindowConstraintPart XmMainWindowConstraintPart;
typedef struct $D50A70D0E3F027C6430054674F5D7982 XmMainWindowPart;
typedef struct _XmMainWindowRec XmMainWindowRec;
typedef struct _XmMainWindowRec *XmMainWindowWidget;
typedef struct _XmMainWindowClassRec *XmMainWindowWidgetClass;
typedef struct $882FE5A4C0CBB7F7E24FD2B31110FD1E *XmManagerClassExt;
typedef struct $882FE5A4C0CBB7F7E24FD2B31110FD1E XmManagerClassExtRec;
typedef struct _XmManagerClassPart XmManagerClassPart;
typedef struct _XmManagerClassRec XmManagerClassRec;
typedef struct _XmManagerConstraintPart XmManagerConstraintPart;
typedef struct _XmManagerConstraintRec *XmManagerConstraintPtr;
typedef struct _XmManagerConstraintRec XmManagerConstraintRec;
typedef struct _XmManagerPart XmManagerPart;
typedef struct _XmManagerRec XmManagerRec;
typedef struct _XmManagerRec *XmManagerWidget;
typedef struct _XmManagerClassRec *XmManagerWidgetClass;
typedef struct _XmMenuFocusRec XmMenuFocusRec;
typedef void (*XmMenuPopupProc)(Widget, Widget, XEvent *);
typedef void (*XmMenuProc)(int, Widget, ...);
typedef struct $4D3DBF947D992ECBBC409CB8927D044E XmMenuShellClassPart;
typedef struct _XmMenuShellClassRec XmMenuShellClassRec;
typedef struct $938D63FCF31665F8756BDAC9031C3485 XmMenuShellPart;
typedef struct _XmMenuShellRec XmMenuShellRec;
typedef struct _XmMenuShellWidgetRec *XmMenuShellWidget;
typedef struct _XmMenuShellClassRec *XmMenuShellWidgetClass;
typedef struct _XmMenuShellWidgetRec XmMenuShellWidgetRec;
typedef struct _XmMenuStateRec *XmMenuState;
typedef struct _XmMenuStateRec XmMenuStateRec;
typedef void (*XmMenuTraversalProc)(Widget, Widget, XmTraversalDirection);
typedef struct $EA67C4467E5D392AEC3890F142F1A94F XmMessageBoxClassPart;
typedef struct _XmMessageBoxClassRec XmMessageBoxClassRec;
typedef struct _XmMessageBoxConstraintPart *XmMessageBoxConstraint;
typedef struct _XmMessageBoxConstraintPart XmMessageBoxConstraintPart;
typedef struct $0E3097AA2FBED02B33E6A3FF3D033D09 XmMessageBoxPart;
typedef struct _XmMessageBoxRec XmMessageBoxRec;
typedef struct _XmMessageBoxRec *XmMessageBoxWidget;
typedef struct _XmMessageBoxClassRec *XmMessageBoxWidgetClass;
typedef struct _XmModalDataRec *XmModalData;
typedef struct _XmModalDataRec XmModalDataRec;
typedef void (*XmMovePixmapProc)(XmDragIconObject, XmDragIconObject, XmDragIconObject, int, int);
typedef enum $53D85B5D788E52D277529232F64946A1 XmNavigability;
typedef unsigned __int8 XmNavigationType;
typedef struct _XmObjectClassExtRec *XmObjectClassExt;
typedef struct _XmObjectClassExtRec XmObjectClassExtRec;
typedef __int64 XmOffset;
typedef XmOffset *XmOffsetPtr;
typedef struct _XmOperationChangedCallbackStruct *XmOperationChangedCallback;
typedef struct _XmOperationChangedCallbackStruct XmOperationChangedCallbackStruct;
typedef struct _XmPanedWindowClassPart XmPanedWindowClassPart;
typedef struct _XmPanedWindowClassRec XmPanedWindowClassRec;
typedef struct _XmPanedWindowConstraintPart XmPanedWindowConstraintPart;
typedef struct _XmPanedWindowConstraintRec *XmPanedWindowConstraintPtr;
typedef struct _XmPanedWindowConstraintRec XmPanedWindowConstraintRec;
typedef struct $6008D8CFFC87EA385696829714C44A6E XmPanedWindowPart;
typedef struct _XmPanedWindowRec XmPanedWindowRec;
typedef struct _XmPanedWindowRec *XmPanedWindowWidget;
typedef struct _XmPanedWindowClassRec *XmPanedWindowWidgetClass;
typedef struct $22DD3C11A6774D6C25B32DE300762746 XmParentInputActionRec;
typedef struct $A66634CAD7B95962E094A16D3D5C00F3 XmParentProcessAnyRec;
typedef union $EB2535972657DA0245F770D5D18D2BD3 *XmParentProcessData;
typedef union $EB2535972657DA0245F770D5D18D2BD3 XmParentProcessDataRec;
typedef Boolean (*XmParentProcessProc)(Widget, XmParentProcessData);
typedef struct _XmPartResource XmPartResource;
typedef struct _XmPrimitiveClassExtRec *XmPrimitiveClassExt;
typedef struct _XmPrimitiveClassExtRec XmPrimitiveClassExtRec;
typedef struct _XmPrimitiveClassPart XmPrimitiveClassPart;
typedef struct _XmPrimitiveClassRec XmPrimitiveClassRec;
typedef struct _XmPrimitivePart XmPrimitivePart;
typedef struct _XmPrimitiveRec XmPrimitiveRec;
typedef struct _XmPrimitiveRec *XmPrimitiveWidget;
typedef struct _XmPrimitiveClassRec *XmPrimitiveWidgetClass;
typedef struct _XmProtocolRec *XmProtocol;
typedef struct _XmProtocolClassPart XmProtocolClassPart;
typedef struct _XmProtocolClassRec XmProtocolClassRec;
typedef struct _XmProtocolRec **XmProtocolList;
typedef struct _XmProtocolMgrRec *XmProtocolMgr;
typedef struct _XmProtocolMgrRec **XmProtocolMgrList;
typedef struct _XmProtocolMgrRec XmProtocolMgrRec;
typedef struct _XmProtocolClassRec *XmProtocolObjectClass;
typedef struct _XmProtocolPart XmProtocolPart;
typedef struct _XmProtocolPart *XmProtocolPartPtr;
typedef struct _XmProtocolRec XmProtocolRec;
typedef struct $48A0BCBFBE5BF4DD1FF757783C127908 XmPushButtonCallbackStruct;
typedef struct _XmPushButtonClassPart XmPushButtonClassPart;
typedef struct _XmPushButtonClassRec XmPushButtonClassRec;
typedef struct _XmPushButtonGCacheObjClassPart XmPushButtonGCacheObjClassPart;
typedef struct _XmPushButtonGCacheObjClassRec XmPushButtonGCacheObjClassRec;
typedef struct _XmPushButtonGCacheObjPart XmPushButtonGCacheObjPart;
typedef struct _XmPushButtonGCacheObjRec XmPushButtonGCacheObjRec;
typedef struct _XmPushButtonGCacheObjRec *XmPushButtonGCacheObject;
typedef struct _XmPushButtonGadgetRec *XmPushButtonGadget;
typedef struct _XmPushButtonGadgetClassRec *XmPushButtonGadgetClass;
typedef struct _XmPushButtonGadgetClassPart XmPushButtonGadgetClassPart;
typedef struct _XmPushButtonGadgetClassRec XmPushButtonGadgetClassRec;
typedef struct _XmPushButtonGadgetPart XmPushButtonGadgetPart;
typedef struct _XmPushButtonGadgetRec XmPushButtonGadgetRec;
typedef struct _XmPushButtonPart XmPushButtonPart;
typedef struct _XmPushButtonRec XmPushButtonRec;
typedef struct _XmPushButtonRec *XmPushButtonWidget;
typedef struct _XmPushButtonClassRec *XmPushButtonWidgetClass;
typedef void (*XmQualifyProc)(Widget, XtPointer, XtPointer);
typedef struct _XmRCKidGeometryRec *XmRCKidGeometry;
typedef struct _XmRCKidGeometryRec XmRCKidGeometryRec;
typedef void (*XmRealizeOutProc)(Widget, Mask *, XSetWindowAttributes *);
typedef struct _XmRegion *XmRegion;
typedef struct $44E50AEC2878F8A6376C06FA64195504 XmRegionBox;
typedef struct _XmRegion XmRegionRec;
typedef struct $6180D9D3CA56B1110646E5C5D8270DC5 *XmRepTypeEntry;
typedef struct $6180D9D3CA56B1110646E5C5D8270DC5 XmRepTypeEntryRec;
typedef unsigned __int64 XmRepTypeId;
typedef struct $6180D9D3CA56B1110646E5C5D8270DC5 *XmRepTypeList;
typedef struct $6180D9D3CA56B1110646E5C5D8270DC5 XmRepTypeListRec;
typedef struct _XmReplayInfoRec XmReplayInfoRec;
typedef void (*XmResizeFlagProc)(Widget, int);
typedef XtPointer (*XmResourceBaseProc)(Widget, XtPointer);
typedef struct $632FCC76A12788D9E06A5D44275BFCFA XmRowColumnCallbackStruct;
typedef struct _XmRowColumnClassPart XmRowColumnClassPart;
typedef struct _XmRowColumnClassRec XmRowColumnClassRec;
typedef struct _XmRowColumnConstraintPart XmRowColumnConstraintPart;
typedef struct _XmRowColumnConstraintRec XmRowColumnConstraintRec;
typedef struct _XmRowColumnPart XmRowColumnPart;
typedef struct _XmRowColumnRec XmRowColumnRec;
typedef struct _XmRowColumnRec *XmRowColumnWidget;
typedef struct _XmRowColumnClassRec *XmRowColumnWidgetClass;
typedef struct _XmRowColumnWidgetRec XmRowColumnWidgetRec;
typedef struct $EA67C4467E5D392AEC3890F142F1A94F XmSashClassPart;
typedef struct _XmSashClassRec XmSashClassRec;
typedef struct $94B6BB2CA433A719FA3DF4B093FD2460 XmSashPart;
typedef struct _XmSashRec XmSashRec;
typedef struct _XmSashRec *XmSashWidget;
typedef struct _XmSashClassRec *XmSashWidgetClass;
typedef struct $A1FF3E4A410D43047E8695E29D7CC7B1 XmScaleCallbackStruct;
typedef struct $EA67C4467E5D392AEC3890F142F1A94F XmScaleClassPart;
typedef struct _XmScaleClassRec XmScaleClassRec;
typedef struct _XmScaleConstraintPart *XmScaleConstraint;
typedef struct _XmScaleConstraintPart XmScaleConstraintPart;
typedef struct $FDD7DE25BC7A5BEEF6AF4C8CFC8ACEEC XmScalePart;
typedef struct _XmScaleRec XmScaleRec;
typedef struct _XmScaleRec *XmScaleWidget;
typedef struct _XmScaleClassRec *XmScaleWidgetClass;
typedef struct _XmScratchPixmapRec *XmScratchPixmap;
typedef struct _XmScratchPixmapRec XmScratchPixmapRec;
typedef struct _XmScreenRec *XmScreen;
typedef struct _XmScreenClassRec *XmScreenClass;
typedef struct _XmScreenClassPart XmScreenClassPart;
typedef struct _XmScreenClassPart *XmScreenClassPartPtr;
typedef struct _XmScreenClassRec XmScreenClassRec;
typedef struct _XmScreenInfo XmScreenInfo;
typedef struct $8AEBD99EA8232519F601DB522AD44E1E XmScreenPart;
typedef struct $8AEBD99EA8232519F601DB522AD44E1E *XmScreenPartPtr;
typedef struct _XmScreenRec XmScreenRec;
typedef struct $476054893965215BC30A46A434D1D847 XmScrollBarCallbackStruct;
typedef struct _XmScrollBarClassPart XmScrollBarClassPart;
typedef struct _XmScrollBarClassRec XmScrollBarClassRec;
typedef struct _XmScrollBarPart XmScrollBarPart;
typedef struct _XmScrollBarRec XmScrollBarRec;
typedef struct _XmScrollBarRec *XmScrollBarWidget;
typedef struct _XmScrollBarClassRec *XmScrollBarWidgetClass;
typedef struct $EA67C4467E5D392AEC3890F142F1A94F XmScrolledWindowClassPart;
typedef struct _XmScrolledWindowClassRec XmScrolledWindowClassRec;
typedef struct _XmScrolledWindowConstraintPart *XmScrolledWindowConstraint;
typedef struct _XmScrolledWindowConstraintPart XmScrolledWindowConstraintPart;
typedef struct $2F468BC709214AC07C55BDB409DB2612 XmScrolledWindowPart;
typedef struct _XmScrolledWindowRec XmScrolledWindowRec;
typedef struct _XmScrolledWindowRec *XmScrolledWindowWidget;
typedef struct _XmScrolledWindowClassRec *XmScrolledWindowWidgetClass;
typedef void (*XmSearchProc)(Widget, XtPointer);
typedef struct _XmSecondaryResourceDataRec *XmSecondaryResourceData;
typedef struct _XmSecondaryResourceDataRec XmSecondaryResourceDataRec;
typedef enum $8955F610BCE94AAE8676F9CC0150C756 XmSelectType;
typedef struct $0CC2C7B5C742C31129BAD132CF836E30 XmSelectionBoxCallbackStruct;
typedef struct $D0BF9774D4A82986A5A63FCC2C6E5647 XmSelectionBoxClassPart;
typedef struct _XmSelectionBoxClassRec XmSelectionBoxClassRec;
typedef struct _XmSelectionBoxConstraintPart *XmSelectionBoxConstraint;
typedef struct _XmSelectionBoxConstraintPart XmSelectionBoxConstraintPart;
typedef struct $5209941CB7D0C10FD4F27E8B15AD14E1 XmSelectionBoxPart;
typedef struct _XmSelectionBoxRec XmSelectionBoxRec;
typedef struct _XmSelectionBoxRec *XmSelectionBoxWidget;
typedef struct _XmSelectionBoxClassRec *XmSelectionBoxWidgetClass;
typedef struct _XmSeparatorClassPart XmSeparatorClassPart;
typedef struct _XmSeparatorClassRec XmSeparatorClassRec;
typedef struct _XmSeparatorGCacheObjClassPart XmSeparatorGCacheObjClassPart;
typedef struct _XmSeparatorGCacheObjClassRec XmSeparatorGCacheObjClassRec;
typedef struct _XmSeparatorGCacheObjPart XmSeparatorGCacheObjPart;
typedef struct _XmSeparatorGCacheObjRec XmSeparatorGCacheObjRec;
typedef struct _XmSeparatorGCacheObjRec *XmSeparatorGCacheObject;
typedef struct _XmSeparatorGadgetRec *XmSeparatorGadget;
typedef struct _XmSeparatorGadgetClassRec *XmSeparatorGadgetClass;
typedef struct _XmSeparatorGadgetClassPart XmSeparatorGadgetClassPart;
typedef struct _XmSeparatorGadgetClassRec XmSeparatorGadgetClassRec;
typedef struct _XmSeparatorGadgetPart XmSeparatorGadgetPart;
typedef struct _XmSeparatorGadgetRec XmSeparatorGadgetRec;
typedef struct _XmSeparatorPart XmSeparatorPart;
typedef struct _XmSeparatorRec XmSeparatorRec;
typedef struct _XmSeparatorRec *XmSeparatorWidget;
typedef struct _XmSeparatorClassRec *XmSeparatorWidgetClass;
typedef struct _XmShellExtClassPart XmShellExtClassPart;
typedef struct _XmShellExtClassPart *XmShellExtClassPartPtr;
typedef struct _XmShellExtClassRec XmShellExtClassRec;
typedef struct _XmShellExtRec *XmShellExtObject;
typedef struct _XmShellExtClassRec *XmShellExtObjectClass;
typedef struct $F39F3704E07D4C1E979E708C92BB34C7 XmShellExtPart;
typedef struct $F39F3704E07D4C1E979E708C92BB34C7 *XmShellExtPartPtr;
typedef struct _XmShellExtRec XmShellExtRec;
typedef struct _XmSimpleMenuRec *XmSimpleMenu;
typedef struct _XmSimpleMenuRec XmSimpleMenuRec;
typedef struct _XmSourceDataRec *XmSourceData;
typedef struct _XmSourceDataRec XmSourceDataRec;
typedef unsigned __int8 *XmString;
typedef char *XmStringCharSet;
typedef XmStringCharSet *XmStringCharSetTable;
typedef unsigned __int8 XmStringComponentType;
typedef struct _XmtStringContextRec *XmStringContext;
typedef unsigned __int8 XmStringDirection;
typedef XmString *XmStringTable;
typedef struct _XmSyntheticResource XmSyntheticResource;
typedef struct _XmTearOffButtonClassPart XmTearOffButtonClassPart;
typedef struct _XmTearOffButtonClassRec XmTearOffButtonClassRec;
typedef struct $B73EDC06E5F96D72A248778E8B0A1933 XmTearOffButtonPart;
typedef struct _XmTearOffButtonRec XmTearOffButtonRec;
typedef struct _XmTearOffButtonRec *XmTearOffButtonWidget;
typedef struct _XmTearOffButtonClassRec *XmTearOffButtonWidgetClass;
typedef struct $E1058C6CE9D10ECB65A245B878A205A2 *XmTextBlock;
typedef struct $E1058C6CE9D10ECB65A245B878A205A2 XmTextBlockRec;
typedef struct $C1B4A013CC5F946450FAD8622ABE0A9E XmTextBlockRecWcs;
typedef struct $C1B4A013CC5F946450FAD8622ABE0A9E *XmTextBlockWcs;
typedef struct $EA67C4467E5D392AEC3890F142F1A94F XmTextClassPart;
typedef struct _XmTextClassRec XmTextClassRec;
typedef struct $D2A436EA22C40B91455F5B9FAC22C559 *XmTextContextData;
typedef struct $D2A436EA22C40B91455F5B9FAC22C559 XmTextContextDataRec;
typedef enum $8F8E6D9517AB45AA51A20D9C7A3335AA XmTextDirection;
typedef struct _XmTextFieldClassPart XmTextFieldClassPart;
typedef struct _XmTextFieldClassRec XmTextFieldClassRec;
typedef struct _XmTextFieldPart XmTextFieldPart;
typedef struct _XmTextFieldRec XmTextFieldRec;
typedef struct _XmTextFieldRec *XmTextFieldWidget;
typedef struct _XmTextFieldClassRec *XmTextFieldWidgetClass;
typedef Atom XmTextFormat;
typedef struct _XmTextLineTableRec *XmTextLineTable;
typedef struct _XmTextLineTableRec XmTextLineTableRec;
typedef struct _XmTextPart XmTextPart;
typedef __int64 XmTextPosition;
typedef struct _XmTextRec XmTextRec;
typedef enum $EF45388F68EDF15F1284C14D8C9AFBF9 XmTextScanDirection;
typedef enum $4B428208B782ABE99A767087F20FFBB9 XmTextScanType;
typedef struct _XmTextSourceRec *XmTextSource;
typedef struct _XmTextSourceRec XmTextSourceRec;
typedef enum $98AACC45B526BF8E56A46567C8EC9FBB XmTextStatus;
typedef struct $E9D1A096C032AEF3D5FCFFE322D261C9 XmTextVerifyCallbackStruct;
typedef struct $B9E3AF8662A601EE31B872B99C1BC9C5 XmTextVerifyCallbackStructWcs;
typedef struct $E9D1A096C032AEF3D5FCFFE322D261C9 *XmTextVerifyPtr;
typedef struct $B9E3AF8662A601EE31B872B99C1BC9C5 *XmTextVerifyPtrWcs;
typedef struct _XmTextRec *XmTextWidget;
typedef struct _XmTextClassRec *XmTextWidgetClass;
typedef struct $01593098553202BCB9DBD5F27E6226E8 XmToggleButtonCallbackStruct;
typedef struct _XmToggleButtonClassPart XmToggleButtonClassPart;
typedef struct _XmToggleButtonClassRec XmToggleButtonClassRec;
typedef struct _XmToggleButtonGCacheObjClassPart XmToggleButtonGCacheObjClassPart;
typedef struct _XmToggleButtonGCacheObjClassRec XmToggleButtonGCacheObjClassRec;
typedef struct _XmToggleButtonGCacheObjPart XmToggleButtonGCacheObjPart;
typedef struct _XmToggleButtonGCacheObjRec XmToggleButtonGCacheObjRec;
typedef struct _XmToggleButtonGCacheObjRec *XmToggleButtonGCacheObject;
typedef struct _XmToggleButtonGadgetRec *XmToggleButtonGadget;
typedef struct _XmToggleButtonGadgetClassRec *XmToggleButtonGadgetClass;
typedef struct _XmToggleButtonGadgetClassPart XmToggleButtonGadgetClassPart;
typedef struct _XmToggleButtonGadgetClassRec XmToggleButtonGadgetClassRec;
typedef struct _XmToggleButtonGadgetPart XmToggleButtonGadgetPart;
typedef struct _XmToggleButtonGadgetRec XmToggleButtonGadgetRec;
typedef struct _XmToggleButtonPart XmToggleButtonPart;
typedef struct _XmToggleButtonRec XmToggleButtonRec;
typedef struct _XmToggleButtonRec *XmToggleButtonWidget;
typedef struct _XmToggleButtonClassRec *XmToggleButtonWidgetClass;
typedef struct _XmTopLevelEnterCallbackStruct *XmTopLevelEnterCallback;
typedef struct _XmTopLevelEnterCallbackStruct XmTopLevelEnterCallbackStruct;
typedef struct _XmTopLevelLeaveCallbackStruct *XmTopLevelLeaveCallback;
typedef struct _XmTopLevelLeaveCallbackStruct XmTopLevelLeaveCallbackStruct;
typedef Boolean (*XmTraversalChildrenProc)(Widget, Widget **, Cardinal *);
typedef enum $78DDDB14FA44845ABB8298E040479BD0 XmTraversalDirection;
typedef void (*XmTraversalProc)(Widget, XtPointer, XtPointer, int);
typedef struct _XmTraverseObscuredCallbackStruct XmTraverseObscuredCallbackStruct;
typedef struct _XmVendorShellExtClassPart XmVendorShellExtClassPart;
typedef struct _XmVendorShellExtClassPart *XmVendorShellExtClassPartPtr;
typedef struct _XmVendorShellExtClassRec XmVendorShellExtClassRec;
typedef struct _XmVendorShellExtRec *XmVendorShellExtObject;
typedef struct _XmVendorShellExtClassRec *XmVendorShellExtObjectClass;
typedef struct $7FC9C14D430F064E54CF3EF22C03C30F XmVendorShellExtPart;
typedef struct $7FC9C14D430F064E54CF3EF22C03C30F *XmVendorShellExtPartPtr;
typedef struct _XmVendorShellExtRec XmVendorShellExtRec;
typedef struct _XmVendorShellRec *XmVendorShellWidget;
typedef struct _XmVendorShellClassRec *XmVendorShellWidgetClass;
typedef struct _XmVirtualKeysymRec *XmVirtualKeysym;
typedef struct _XmVirtualKeysymRec XmVirtualKeysymRec;
typedef enum $02B2F3591FEAEB4334C5D9D93533B7DF XmVisibility;
typedef Boolean (*XmVisualChangeProc)(Widget, Widget, Widget);
typedef Boolean (*XmWidgetBaselineProc)(Widget, Dimension **, int *);
typedef void (*XmWidgetDispatchProc)(Widget, XEvent *, Mask);
typedef Boolean (*XmWidgetDisplayRectProc)(Widget, XRectangle *);
typedef struct _XmWidgetExtDataRec *XmWidgetExtData;
typedef struct _XmWidgetExtDataRec XmWidgetExtDataRec;
typedef void (*XmWidgetMarginsProc)(Widget, XmBaselineMargins *);
typedef XmNavigability (*XmWidgetNavigableProc)(Widget);
typedef struct _XmWorldClassPart XmWorldClassPart;
typedef struct _XmWorldClassPart *XmWorldClassPartPtr;
typedef struct _XmWorldClassRec XmWorldClassRec;
typedef struct _XmWorldRec *XmWorldObject;
typedef struct _XmWorldClassRec *XmWorldObjectClass;
typedef struct $3696947288DD42492044D329A84A4A03 XmWorldPart;
typedef struct $3696947288DD42492044D329A84A4A03 *XmWorldPartPtr;
typedef struct _XmWorldRec XmWorldRec;
typedef struct _XmWrapperDataRec *XmWrapperData;
typedef struct _XmWrapperDataRec XmWrapperDataRec;
typedef struct $9C224668B7E64BE6AE9499E6FD772938 XmbTextItem;
typedef struct $B56F5A956E40882BF4E2B48AE1B509C2 XmbufBufferAttributes;
typedef struct $82207ABABC4EB421AD27F9EAB2AF6BD5 XmbufBufferInfo;
typedef struct $81B59567895AAF3A77A23A0FE7526C59 XmbufClobberNotifyEvent;
typedef struct $47687EDD1469965A559AF2323D217289 XmbufSetBufferAttributes;
typedef struct $4E8A4C7FC2C9452EEDB2A455AEE467A8 XmbufSetWindowAttributes;
typedef struct $3CFE8A507A6CA455771B45BEC8FB5D0E XmbufUpdateNotifyEvent;
typedef struct $7501B521F09A6EDD43C68106808E09A6 XmbufWindowAttributes;
typedef int (*XmuCloseDisplayQueueProc)(XmuDisplayQueue *, XmuDisplayQueueEntry *);
typedef int (*XmuCloseHookProc)(Display *, XPointer);
typedef struct _XmuCvtCache XmuCvtCache;
typedef struct _XmuDisplayQueue XmuDisplayQueue;
typedef struct _XmuDisplayQueueEntry XmuDisplayQueueEntry;
typedef int (*XmuFreeDisplayQueueProc)(XmuDisplayQueue *);
typedef void (*XmuInitializerProc)(XtAppContext, XPointer);
typedef struct _XmuWidgetNode XmuWidgetNode;
typedef enum $5A773820A0D67B4336D2749C8D45D255 XrmBinding;
typedef enum $5A773820A0D67B4336D2749C8D45D255 *XrmBindingList;
typedef XrmQuark XrmClass;
typedef XrmQuarkList XrmClassList;
typedef struct _XrmHashBucketRec *XrmDatabase;
typedef struct _XrmHashBucketRec *XrmHashBucket;
typedef XrmHashBucket *XrmHashTable;
typedef XrmQuark XrmName;
typedef XrmQuarkList XrmNameList;
typedef struct $CB86ED79A67F464A5E5DD7E35915D8C3 *XrmOptionDescList;
typedef struct $CB86ED79A67F464A5E5DD7E35915D8C3 XrmOptionDescRec;
typedef enum $405C8636DEE5D8D2C9F0466394C3E3EA XrmOptionKind;
typedef __int64 XrmQuark;
typedef __int64 *XrmQuarkList;
typedef XrmQuark XrmRepresentation;
typedef struct $565D6F59CBF69882217F7D4D7763F843 XrmResource;
typedef struct $565D6F59CBF69882217F7D4D7763F843 *XrmResourceList;
typedef XrmHashTable XrmSearchList[];
typedef char *XrmString;
typedef struct $48974C792553FBFA318CEC22C625F222 XrmValue;
typedef struct $48974C792553FBFA318CEC22C625F222 *XrmValuePtr;
typedef struct _TranslationData *XtAccelerators;
typedef Boolean (*XtAcceptFocusProc)(Widget, Time *);
typedef Opaque XtActionHookId;
typedef void (*XtActionHookProc)(Widget, XtPointer, String, XEvent *, String *, Cardinal *);
typedef struct _XtActionsRec *XtActionList;
typedef void (*XtActionProc)(Widget, XEvent *, String *, Cardinal *);
typedef struct _XtActionsRec XtActionsRec;
typedef enum $D2435FF4F3AAF25C455EAA2CA1747697 XtAddressMode;
typedef void (*XtAllocateProc)(WidgetClass, Cardinal *, Cardinal *, ArgList, Cardinal *, XtTypedArgList, Cardinal *, Widget *, XtPointer *);
typedef void (*XtAlmostProc)(Widget, Widget, XtWidgetGeometry *, XtWidgetGeometry *);
typedef struct _XtAppStruct *XtAppContext;
typedef __int64 XtArgVal;
typedef Boolean (*XtArgsFunc)(Widget, ArgList, Cardinal *);
typedef void (*XtArgsProc)(Widget, ArgList, Cardinal *);
typedef unsigned __int64 XtBlockHookId;
typedef void (*XtBlockHookProc)(XtPointer);
typedef XtActionProc *XtBoundActions;
typedef Opaque XtCacheRef;
typedef int XtCacheType;
typedef struct _XtCallbackRec *XtCallbackList;
typedef void (*XtCallbackProc)(Widget, XtPointer, XtPointer);
typedef struct _XtCallbackRec XtCallbackRec;
typedef enum $B9867847443BB25721460208505189B7 XtCallbackStatus;
typedef void (*XtCancelConvertSelectionProc)(Widget, Atom *, Atom *, XtRequestId *, XtPointer);
typedef void (*XtCaseProc)(Display *, KeySym, KeySym *, KeySym *);
typedef struct $13470DA4B6A7AAE8ACC864F70C5FF73E *XtChangeHookData;
typedef struct $13470DA4B6A7AAE8ACC864F70C5FF73E XtChangeHookDataRec;
typedef struct $D769135999DFEE6143DE1D9CD80B3AD5 *XtChangeHookSetValuesData;
typedef struct $D769135999DFEE6143DE1D9CD80B3AD5 XtChangeHookSetValuesDataRec;
typedef struct _XtCheckpointTokenRec *XtCheckpointToken;
typedef struct _XtCheckpointTokenRec XtCheckpointTokenRec;
typedef enum $D6648E7C00A5D72C8804EAE47C88934A XtCommandHighlight;
typedef struct $5DD49376C74765CB7E96286DDB46181E *XtConfigureHookData;
typedef struct $5DD49376C74765CB7E96286DDB46181E XtConfigureHookDataRec;
typedef struct $7D1B644A0EEA2B09DD88F0E6B7E788D2 *XtConvertArgList;
typedef void (*XtConvertArgProc)(Widget, Cardinal *, XrmValue *);
typedef struct $7D1B644A0EEA2B09DD88F0E6B7E788D2 XtConvertArgRec;
typedef Boolean (*XtConvertSelectionIncrProc)(Widget, Atom *, Atom *, Atom *, XtPointer *, unsigned __int64 *, int *, unsigned __int64 *, XtPointer, XtRequestId *);
typedef Boolean (*XtConvertSelectionProc)(Widget, Atom *, Atom *, Atom *, XtPointer *, unsigned __int64 *, int *);
typedef void (*XtConverter)(XrmValue *, Cardinal *, XrmValue *, XrmValue *);
typedef struct $9D9F8CC524C7DD4F9704759512315B2D *XtCreateHookData;
typedef struct $9D9F8CC524C7DD4F9704759512315B2D XtCreateHookDataRec;
typedef void (*XtCreatePopupChildProc)(Widget);
typedef void (*XtDeallocateProc)(Widget, XtPointer);
typedef struct $87D722ECD21497B94ED1D7223FEC05F4 *XtDestroyHookData;
typedef struct $87D722ECD21497B94ED1D7223FEC05F4 XtDestroyHookDataRec;
typedef void (*XtDestructor)(XtAppContext, XrmValue *, XtPointer, XrmValue *, Cardinal *);
typedef void (*XtDoChangeProc)(Widget, WidgetList, Cardinal *, WidgetList, Cardinal *, XtPointer);
typedef unsigned __int8 XtEnum;
typedef void (*XtErrorHandler)(String);
typedef void (*XtErrorMsgHandler)(String, String, String, String, String *, Cardinal *);
typedef Boolean (*XtEventDispatchProc)(XEvent *);
typedef void (*XtEventHandler)(Widget, XtPointer, XEvent *, Boolean *);
typedef struct _XtEventRec *XtEventTable;
typedef void (*XtExposeProc)(Widget, XEvent *, Region);
typedef void (*XtExtensionSelectProc)(Widget, int *, XtPointer *, int, XtPointer);
typedef Boolean (*XtFilePredicate)(String);
typedef unsigned __int64 XtGCMask;
typedef XtGeometryResult (*XtGeometryHandler)(Widget, XtWidgetGeometry *, XtWidgetGeometry *);
typedef struct $A47C75AE74EA14FC2F54815F4A8813BA *XtGeometryHookData;
typedef struct $A47C75AE74EA14FC2F54815F4A8813BA XtGeometryHookDataRec;
typedef unsigned int XtGeometryMask;
typedef enum $7A6D1403076F33F26AB38429B1986DDD XtGeometryResult;
typedef enum $3A62C614979A92BEB5F3FA9C72B43E27 XtGrabKind;
typedef int XtGravity;
typedef void (*XtInitProc)(Widget, Widget, ArgList, Cardinal *);
typedef void (*XtInputCallbackProc)(XtPointer, int *, XtInputId *);
typedef unsigned __int64 XtInputId;
typedef unsigned __int64 XtInputMask;
typedef unsigned __int64 XtIntervalId;
typedef enum $CAA3FD00411B0A7D7F1344282CDE0D9F XtJustify;
typedef void (*XtKeyProc)(Display *, unsigned int, Modifiers, Modifiers *, KeySym *);
typedef String (*XtLanguageProc)(Display *, String, XtPointer);
typedef enum $C6DE0E8AF8221E8B7722BED8F4800537 XtListPosition;
typedef void (*XtLoseSelectionIncrProc)(Widget, Atom *, XtPointer);
typedef void (*XtLoseSelectionProc)(Widget, Atom *);
typedef Cardinal (*XtOrderProc)(Widget);
typedef enum $E54E6D51CE7B5536353B8548369F9C7D XtOrientation;
typedef void *XtPointer;
typedef struct $7768503639F77374B09C8CE2FF45E7E1 *XtPopdownID;
typedef struct $7768503639F77374B09C8CE2FF45E7E1 XtPopdownIDRec;
typedef void (*XtProc)(void);
typedef void (*XtRealizeProc)(Widget, XtValueMask *, XSetWindowAttributes *);
typedef XtPointer XtRequestId;
typedef struct _XtResource XtResource;
typedef void (*XtResourceDefaultProc)(Widget, int, XrmValue *);
typedef struct _XtResource *XtResourceList;
typedef struct _XtSaveYourselfRec *XtSaveYourself;
typedef void (*XtSelectionCallbackProc)(Widget, XtPointer, Atom *, Atom *, XtPointer, unsigned __int64 *, int *);
typedef void (*XtSelectionDoneIncrProc)(Widget, Atom *, Atom *, XtRequestId *, XtPointer);
typedef void (*XtSelectionDoneProc)(Widget, Atom *, Atom *);
typedef Boolean (*XtSetValuesFunc)(Widget, Widget, Widget, ArgList, Cardinal *);
typedef void (*XtSignalCallbackProc)(XtPointer, XtSignalId *);
typedef unsigned __int64 XtSignalId;
typedef void (*XtStringProc)(Widget, String);
typedef struct _XtTMRec *XtTM;
typedef struct _XtTMRec XtTMRec;
typedef void (*XtTimerCallbackProc)(XtPointer, XtIntervalId *);
typedef struct _TranslationData *XtTranslations;
typedef Boolean (*XtTypeConverter)(Display *, XrmValue *, Cardinal *, XrmValue *, XrmValue *, XtPointer *);
typedef struct $1E2A6A9B5EC919B5C597AB6887935210 XtTypedArg;
typedef struct $1E2A6A9B5EC919B5C597AB6887935210 *XtTypedArgList;
typedef unsigned __int64 XtValueMask;
typedef XtPointer XtVarArgsList;
typedef unsigned __int64 XtVersionType;
typedef void (*XtWidgetClassProc)(WidgetClass);
typedef struct $9FED812B80655AE33F3AD93E5626D145 XtWidgetGeometry;
typedef void (*XtWidgetProc)(Widget);
typedef Boolean (*XtWorkProc)(XtPointer);
typedef unsigned __int64 XtWorkProcId;
typedef struct $F6C009117E8AD953F2A233F42B8BDE73 XvAdaptorInfo;
typedef XID XvEncodingID;
typedef struct $4A1B9D76092A64E84CBC4D8EC852D53E XvEncodingInfo;
typedef union $EEB48C9D0E03107C23692DF5EF5FE974 XvEvent;
typedef struct $8AB35179F05D6EDB2CCB681589242432 XvFormat;
typedef XID XvPortID;
typedef struct $2CF4E60400BF6C180C38BA5BABB9C6FD XvPortNotifyEvent;
typedef struct $9EDEC9CDD32BA2E5983B8867B401ABD1 XvRational;
typedef struct $0F594ECE1246C9F530586CE66FD64559 XvVideoNotifyEvent;
typedef struct $4D69B6347F056FE268056727CEA155AA XwcTextItem;
typedef struct _zlibbuffer ZlibBuffer;
typedef struct _zlibbuffer *ZlibBufferPtr;
struct _ARRAY16 {CARD8 length;CARD16Ptr data;};
struct _ARRAY32 {CARD8 length;CARD32Ptr data;};
struct _ARRAY8 {CARD16 length;CARD8Ptr data;};
struct _ARRAYofARRAY8 {CARD8 length;ARRAY8Ptr data;};
struct _ApplicationShellClassRec {CoreClassPart core_class;CompositeClassPart composite_class;ShellClassPart shell_class;WMShellClassPart wm_shell_class;VendorShellClassPart vendor_shell_class;TopLevelShellClassPart top_level_shell_class;ApplicationShellClassPart application_shell_class;};
struct _AsciiRec {CorePart core;SimplePart simple;TextPart text;AsciiPart ascii;};
struct _AsciiSinkClassPart {int foo;};
struct _AsciiSinkClassRec {ObjectClassPart object_class;TextSinkClassPart text_sink_class;AsciiSinkClassPart ascii_sink_class;};
struct _AsciiSinkRec {ObjectPart object;TextSinkPart text_sink;AsciiSinkPart ascii_sink;};
struct _AsciiSrcClassPart {char foo;};
struct _AsciiSrcClassRec {ObjectClassPart object_class;TextSrcClassPart text_src_class;AsciiSrcClassPart ascii_src_class;};
struct _AsciiSrcPart {char *string;XawAsciiType type;XawTextPosition piece_size;Boolean data_compression;XtCallbackList callback;Boolean use_string_in_place;int ascii_length;Boolean is_tempfile;Boolean changes;Boolean allocated_string;XawTextPosition length;Piece *first_piece;};
struct _AsciiSrcRec {ObjectPart object;TextSrcPart text_src;AsciiSrcPart ascii_src;};
struct _AsciiTextClassRec {CoreClassPart core_class;SimpleClassPart simple_class;TextClassPart text_class;AsciiClassPart ascii_class;};
struct _BoxClassRec {CoreClassPart core_class;CompositeClassPart composite_class;BoxClassPart box_class;};
struct _BoxRec {CorePart core;CompositePart composite;BoxPart box;};
struct _BufDesc {int size;int offset;IPCard version;IPCard8 turn;IPCard8 usingBuf[2];IPCard8 unused;int nextRead;int lastWritten;int lastRead;int lastReserved;int highWater;};
struct _Channel {int whoami;int size;int type;int mode;int smid;MemHdrPtr base;IPDataPtr pbuf0;IPDataPtr pbuf1;IPDataPtr privateData;BufDescPtr sendBd;BufDescPtr receiveBd;IPDataPtr sendBuf;IPDataPtr receiveBuf;IPcallbackProc allocFail;char *allocFailParam;IPcallbackProc receiveFail;char *receiveFailParam;};
typedef struct $A556726339174AF4A052C1DB3ED032E6 _Color;
struct _ColorObjClassPart {XtPointer extension;};
struct _ColorObjClassRec {CoreClassPart core_class;CompositeClassPart composite_class;ShellClassPart shell_class;WMShellClassPart wm_shell_class;ColorObjClassPart color_obj_class;};
struct _ColorObjPart {XtArgsProc RowColInitHook;PixelSet *myColors;int myScreen;Display *display;Colors *colors;int numScreens;Atom *atoms;Boolean colorIsRunning;Boolean done;int *colorUse;int primary;int secondary;int text;int active;int inactive;Boolean useColorObj;Boolean useText;Boolean useTextForList;Boolean useMask;Boolean useMultiColorIcons;Boolean useIconFileCache;};
struct _ColorObjRec {CorePart core;CompositePart composite;ShellPart shell;WMShellPart wm;ColorObjPart color_obj;};
typedef struct $FF9B1DD50FB073539D263E5AEFD0C460 _Color_pair;
struct _CommandClass {int makes_compiler_happy;};
struct _CommandClassRec {CoreClassPart core_class;SimpleClassPart simple_class;LabelClassPart label_class;CommandClassPart command_class;};
struct _CommandRec {CorePart core;SimplePart simple;LabelPart label;CommandPart command;};
struct _ComposeRtrn {ComposeTbl *tbl;KeySym matchSym;KeySym sym[31];char str[101];};
struct _ComposeStringTbl {ComposeTbl common;int maxLen;int nSequence;ShortKeySym **sequence;CARD32 *yields;KeySym *terminators;};
struct _ComposeTbl {CARD8 type;CARD8 keycode;CARD16 useFlags;CARD16 kindFlags;CARD16 szResultStr;KeySym introducer;KeySym *privateSyms;CARD8 *resultStr;KeySym *ignore;char *name;char *charset;void *next;void *appPriv;};
struct _ComposeTree {ComposeTbl common;ComposeTreeNode *node;int nNodes;};
struct _ComposeTreeNode {CARD16 back;ShortKeySym sym;CARD16 str;ShortKeySym *nextSym;CARD32 *next;char *what;};
struct _ComposeTreeShortcut {ComposeTbl common;ComposeTree *tbl;ComposeTreeNode *node;};
struct _CompositeClassPart {XtGeometryHandler geometry_manager;XtWidgetProc change_managed;XtWidgetProc insert_child;XtWidgetProc delete_child;XtPointer extension;};
struct _CompositeClassRec {CoreClassPart core_class;CompositeClassPart composite_class;};
struct _CompositePart {WidgetList children;Cardinal num_children;Cardinal num_slots;XtOrderProc insert_position;};
struct _CompositeRec {CorePart core;CompositePart composite;};
struct _ConstraintClassPart {XtResourceList resources;Cardinal num_resources;Cardinal constraint_size;XtInitProc initialize;XtWidgetProc destroy;XtSetValuesFunc set_values;XtPointer extension;};
struct _ConstraintClassRec {CoreClassPart core_class;CompositeClassPart composite_class;ConstraintClassPart constraint_class;};
struct _ConstraintPart {XtPointer mumble;};
struct _ConstraintRec {CorePart core;CompositePart composite;ConstraintPart constraint;};
struct _CoreClassPart {WidgetClass superclass;String class_name;Cardinal widget_size;XtProc class_initialize;XtWidgetClassProc class_part_initialize;XtEnum class_inited;XtInitProc initialize;XtArgsProc initialize_hook;XtRealizeProc realize;XtActionList actions;Cardinal num_actions;XtResourceList resources;Cardinal num_resources;XrmClass xrm_class;Boolean compress_motion;XtEnum compress_exposure;Boolean compress_enterleave;Boolean visible_interest;XtWidgetProc destroy;XtWidgetProc resize;XtExposeProc expose;XtSetValuesFunc set_values;XtArgsFunc set_values_hook;XtAlmostProc set_values_almost;XtArgsProc get_values_hook;XtAcceptFocusProc accept_focus;XtVersionType version;XtPointer callback_private;String tm_table;XtGeometryHandler query_geometry;XtStringProc display_accelerator;XtPointer extension;};
struct _CorePart {Widget self;WidgetClass widget_class;Widget parent;XrmName xrm_name;Boolean being_destroyed;XtCallbackList destroy_callbacks;XtPointer constraints;Position x;Position y;Dimension width;Dimension height;Dimension border_width;Boolean managed;Boolean sensitive;Boolean ancestor_sensitive;XtEventTable event_table;XtTMRec tm;XtTranslations accelerators;Pixel border_pixel;Pixmap border_pixmap;WidgetList popup_list;Cardinal num_popups;String name;Screen *screen;Colormap colormap;Window window;Cardinal depth;Pixel background_pixel;Pixmap background_pixmap;Boolean visible;Boolean mapped_when_managed;};
struct _DialogClassRec {CoreClassPart core_class;CompositeClassPart composite_class;ConstraintClassPart constraint_class;FormClassPart form_class;DialogClassPart dialog_class;};
struct _DialogConstraintsRec {FormConstraintsPart form;DialogConstraintsPart dialog;};
struct _DialogPart {String label;String value;Pixmap icon;Widget iconW;Widget labelW;Widget valueW;};
struct _DialogRec {CorePart core;CompositePart composite;ConstraintPart constraint;FormPart form;DialogPart dialog;};
enum _EXCEPTION_DISPOSITION {ExceptionContinueExecution = 0x0,ExceptionContinueSearch = 0x1,ExceptionNestedException = 0x2,ExceptionCollidedUnwind = 0x3,};
struct _EXCEPTION_POINTERS {system_exrec_type *ExceptionRecord;PCONTEXT ContextRecord;EXCEPTION_DISPOSITION Disposition;DISPATCHER_CONTEXT *DispatcherContext;};
struct _FSChar2b {unsigned __int8 high;unsigned __int8 low;};
union _FSEvent {int type;FSAnyEvent fsany;};
struct _FSExtData {int number;struct _FSExtData *next;int (*free_private)();char *private_data;};
typedef struct _FSExtent _FSExtension;
struct _FSExtent {struct _FSExtent *next;FSExtCodes codes;int (*close_server)();int (*error)();int (*error_string)();char *name;};
struct _FSOffset {unsigned int position;unsigned int length;};
struct _FSPropInfo {unsigned int num_offsets;unsigned int data_len;};
struct _FSPropOffset {FSOffset name;FSOffset value;unsigned __int8 type;};
struct _FSQEvent {struct _FSQEvent *next;FSEvent event;};
struct _FSRange {FSChar2b min_char;FSChar2b max_char;};
struct _FSServer {struct _FSServer *next;int fd;int proto_version;char *vendor;int byte_order;int vnumber;int release;int resource_id;struct _FSServer::_FSQEvent *head;struct _FSServer::_FSQEvent *tail;int qlen;unsigned __int64 last_request_read;unsigned __int64 request;char *last_req;char *buffer;char *bufptr;char *bufmax;unsigned int max_request_size;char *server_name;char *auth_data;AlternateServer *alternate_servers;int num_alternates;FSExtData *ext_data;_FSExtension *ext_procs;int ext_number;int (*event_vec[132])();int (*wire_vec[132])();char *scratch_buffer;unsigned __int64 scratch_length;int (*synchandler)();unsigned __int64 flags;struct _FSServer::_XtransConnInfo *trans_conn;};
struct _FSXCharInfo {__int16 left;__int16 right;__int16 width;__int16 ascent;__int16 descent;unsigned __int16 attributes;};
struct _FSXFontInfoHeader {int flags;FSRange char_range;unsigned int draw_direction;FSChar2b default_char;FSXCharInfo min_bounds;FSXCharInfo max_bounds;__int16 font_ascent;__int16 font_descent;};
struct _FillPolyReq {CARD8 reqType;BYTE pad;CARD16 length;CARD32 drawable;CARD32 gc;BYTE shape;BYTE coordMode;CARD16 pad1;};
struct _FormClassRec {CoreClassPart core_class;CompositeClassPart composite_class;ConstraintClassPart constraint_class;FormClassPart form_class;};
struct _FormConstraintsPart {XawEdgeType top;XawEdgeType bottom;XawEdgeType left;XawEdgeType right;int dx;int dy;Widget horiz_base;Widget vert_base;Boolean allow_resize;__int16 virtual_width;__int16 virtual_height;Position new_x;Position new_y;LayoutState layout_state;Boolean deferred_resize;};
struct _FormConstraintsRec {FormConstraintsPart form;};
struct _FormPart {int default_spacing;Dimension old_width;Dimension old_height;int no_refigure;Boolean needs_relayout;Boolean resize_in_layout;Dimension preferred_width;Dimension preferred_height;Boolean resize_is_no_op;};
struct _FormRec {CorePart core;CompositePart composite;ConstraintPart constraint;FormPart form;};
struct _GripClassRec {CoreClassPart core_class;SimpleClassPart simple_class;GripClassPart grip_class;};
struct _GripRec {CorePart core;SimplePart simple;GripPart grip;};
struct _IceConn {unsigned int unused2;IceConnectStatus connection_status;unsigned __int8 my_ice_version_index;struct _IceConn::_XtransConnInfo *trans_conn;unsigned __int64 send_sequence;unsigned __int64 receive_sequence;char *connection_string;char *vendor;char *release;char *inbuf;char *inbufptr;char *inbufmax;char *outbuf;char *outbufptr;char *outbufmax;char *scratch;unsigned __int64 scratch_size;int dispatch_level;IcePointer context;_IceProcessMsgInfo *process_msg_info;char his_min_opcode;char his_max_opcode;unsigned __int8 open_ref_count;unsigned __int8 proto_ref_count;IceListenObj listen_obj;_IceSavedReplyWait *saved_reply_waits;_IcePingWait *ping_waits;_IceConnectToYouInfo *connect_to_you;_IceProtoSetupToYouInfo *protosetup_to_you;_IceConnectToMeInfo *connect_to_me;_IceProtoSetupToMeInfo *protosetup_to_me;};
typedef struct $D4FB496F61D4660631FE604D96639DD9 _IceConnectToMeInfo;
typedef struct $447FC71AB694A71F5F8338F97A6324BE _IceConnectToYouInfo;
typedef struct $D08E3E427138D596819F8CEF4AEF4F32 _IcePaProtocol;
struct _IcePingWait {IcePingReplyProc ping_reply_proc;IcePointer client_data;struct _IcePingWait *next;};
typedef struct $C091F8996EF5667AFF510FF5B2E0143E _IcePoProtocol;
typedef struct $1AA7F1335C4C6CFF07A82EACE5F12A97 _IceProcessMsgInfo;
typedef struct $BD96F4C520841110C237EF8D06FD9BEE _IceProtoSetupToMeInfo;
typedef struct $1DA914B8AB142FCB959C2D9AF0891F55 _IceProtoSetupToYouInfo;
typedef struct $9AD92D66A9B7FE2D16898D79F4A40DAD _IceProtocol;
struct _IceSavedReplyWait {IceReplyWaitInfo *reply_wait;int reply_ready;struct _IceSavedReplyWait *next;};
struct _InputDataRec {XmTextWidget widget;XmTextScanType *sarray;int sarraycount;int new_sel_length;int threshold;SelectionHint selectionHint;SelectionHint Sel2Hint;XtIntervalId select_id;XmTextScanType stype;XmTextScanDirection extendDir;XmTextScanDirection Sel2ExtendDir;XmTextPosition origLeft;XmTextPosition origRight;XmTextPosition Sel2OrigLeft;XmTextPosition Sel2OrigRight;XmTextPosition stuffpos;XmTextPosition sel2Left;XmTextPosition sel2Right;XmTextPosition anchor;Position select_pos_x;Position select_pos_y;Boolean pendingdelete;Boolean syncing;Boolean extending;Boolean Sel2Extending;Boolean hasSel2;Boolean has_destination;Boolean selectionMove;Boolean cancel;Boolean overstrike;Boolean sel_start;Time dest_time;Time sec_time;Time lasttime;};
struct _InputRec {struct _InputDataRec *data;InputInvalidateProc Invalidate;InputGetValuesProc GetValues;InputSetValuesProc SetValues;XtWidgetProc destroy;InputGetSecResProc GetSecResData;};
typedef struct $B661844E4DD166A431053E2B2F63C927 _KEY_MAP;
struct _KdebugInfo {volatile u_long state;u_long magic;u_long debug;u_long *exc_frame;u_int lock;u_int nofault;int brkpt_ipl;int cpu_num;};
struct _LBXDeltaElem {int length;unsigned __int8 *buf;};
struct _LBXDeltas {unsigned __int16 nDeltas;unsigned __int16 maxDeltasize;LBXDeltaElemPtr deltas;unsigned __int16 nextDelta;unsigned __int16 activeDeltas;};
struct _LC_charmap_t {_LC_core_charmap_t core;char *cm_csname;unsigned __int64 cm_mb_cur_max;unsigned __int64 cm_mb_cur_min;unsigned __int8 cm_max_disp_width;};
typedef struct $B936D129F4E3C4271617856E3E287966 _LC_classnm_t;
typedef struct $B551B8E75181E5CEB472A1448B118F87 _LC_coll_methods_t;
struct _LC_collate_t {_LC_core_collate_t core;unsigned __int8 co_nord;unsigned __int8 version;unsigned __int8 ce_defined;_LC_weight_t co_sort;unsigned int co_wc_min;unsigned int co_wc_max;unsigned int co_hbound;unsigned int co_col_min;unsigned int co_col_max;const _LC_coltbl_t *co_coltbl;unsigned __int8 co_nsubs;const _LC_subs_t *co_subs;const _LC_coll_methods_t *methods;};
typedef _LC_collel_qidx_v2_t _LC_collel_qidx_t;
typedef struct $102722185F58948234AC650406FAE760 _LC_collel_qidx_v2_t;
typedef struct $50A8F2CBF9209E81C59E0189B8E8717A _LC_collel_t;
typedef _LC_collel_tbl_v2_t _LC_collel_tbl_t;
typedef struct $90D6D9B7F8A561501EF54326BDFCDF65 _LC_collel_tbl_v2_t;
typedef union $587A922E888105E596C23B848004C618 _LC_coltbl_t;
typedef struct $1643EA4171E7327ACC09A96188B3F1FC _LC_coltbl_v1_t;
typedef struct $EBCFF2DC44B193270B78015375263504 _LC_coltbl_v2_t;
typedef struct $6CB937557CD15AF182DEEE7E833AC7C1 _LC_core_charmap_t;
typedef struct $0394D367A99981B9C7C3F01397962FB0 _LC_core_collate_t;
typedef struct $3A0CE8C42414E7B91A96672A3CA81959 _LC_core_ctype_t;
typedef struct _LC_core_iconv_type _LC_core_iconv_t;
struct _LC_core_iconv_type {_LC_object_t hdr;_LC_core_iconv_t *(*init)();size_t (*exec)();void (*close)();};
typedef struct $8918E64302E34A875EC7CDE3CAA7010F _LC_core_locale_t;
typedef struct $E0AC4DED47AA205E49DDDE5338F7871C _LC_core_monetary_t;
typedef struct $98E996A0970E8A2E0A60510A6CBAEECA _LC_core_numeric_t;
typedef struct $30D7FFF54E3B0918828B4363E7A35B26 _LC_core_resp_t;
typedef struct $E7527BD744297E99A547ACE68D4D18D5 _LC_core_time_t;
struct _LC_ctype_t {_LC_core_ctype_t core;unsigned int min_wc;unsigned int max_wc;unsigned int max_upper;unsigned int max_lower;const unsigned int *_upper;const unsigned int *_lower;const unsigned int *_mask;const unsigned int *qmask;const unsigned __int8 *qidx;unsigned int qidx_hbound;unsigned __int8 nclasses;const _LC_classnm_t *classnms;unsigned int num_rows;unsigned int num_qmasks;};
struct _LC_locale_t {_LC_core_locale_t core;char *nl_info[55];struct lconv *nl_lconv;_LC_charmap_t *lc_charmap;_LC_collate_t *lc_collate;_LC_ctype_t *lc_ctype;_LC_monetary_t *lc_monetary;_LC_numeric_t *lc_numeric;_LC_resp_t *lc_resp;_LC_time_t *lc_time;char *nl_info2[6];};
struct _LC_monetary_t {_LC_core_monetary_t core;char *int_curr_symbol;char *currency_symbol;char *mon_decimal_point;char *mon_thousands_sep;char *mon_grouping;char *positive_sign;char *negative_sign;signed __int8 int_frac_digits;signed __int8 frac_digits;signed __int8 p_cs_precedes;signed __int8 p_sep_by_space;signed __int8 n_cs_precedes;signed __int8 n_sep_by_space;signed __int8 p_sign_posn;signed __int8 n_sign_posn;char *debit_sign;char *credit_sign;char *left_parenthesis;char *right_parenthesis;};
struct _LC_numeric_t {_LC_core_numeric_t core;char *decimal_point;char *thousands_sep;unsigned __int8 *grouping;};
typedef struct $229C0DE00A42B0680B1DACB04ABD6EC3 _LC_object_t;
struct _LC_resp_t {_LC_core_resp_t core;char *yesexpr;char *noexpr;char *yesstr;char *nostr;};
typedef char *_LC_strpool_ptr_t;
typedef char _LC_strpool_t;
typedef struct $647FE789D073DDA1115A25D9160A600C _LC_subs_t;
struct _LC_time_t {_LC_core_time_t core;char *d_fmt;char *t_fmt;char *d_t_fmt;char *t_fmt_ampm;char *abday[7];char *day[7];char *abmon[12];char *mon[12];char *am_pm[2];char **era;char *era_year;char *era_d_fmt;char *alt_digits;char *m_d_recent;char *m_d_old;char *era_d_t_fmt;char *era_t_fmt;};
typedef union $12E233846E94494D17253A4C1AE1A04D _LC_weight_t;
struct _LabelClassRec {CoreClassPart core_class;SimpleClassPart simple_class;LabelClassPart label_class;};
struct _LabelRec {CorePart core;SimplePart simple;LabelPart label;};
struct _LbxBitmapCompMethod {char *methodName;int inited;int methodOpCode;int (*compInit)(void);int (*compFunc)(unsigned __int8 *, unsigned __int8 *, int, int, int, int, int, int *);int (*decompFunc)(unsigned __int8 *, unsigned __int8 *, int, int, int, int);};
struct _LbxPixmapCompMethod {char *methodName;unsigned int formatMask;int depthCount;int depths[5];int inited;int methodOpCode;int (*compInit)(void);int (*compFunc)(char *, char *, int, int, int, int, int, int *);int (*decompFunc)(char *, char *, int, int);};
struct _LineTableExtraRec {Dimension width;Boolean wrappedbychar;};
struct _ListClassRec {CoreClassPart core_class;SimpleClassPart simple_class;ListClassPart list_class;};
struct _ListRec {CorePart core;SimplePart simple;ListPart list;};
struct _MemHdr {int cStatus;int aStatus;BufDesc bd0;BufDesc bd1;PrivDesc privd;};
struct _MenuButtonClass {int makes_compiler_happy;};
struct _MenuButtonClassRec {CoreClassPart core_class;SimpleClassPart simple_class;LabelClassPart label_class;CommandClassPart command_class;MenuButtonClassPart menuButton_class;};
struct _MenuButtonRec {CorePart core;SimplePart simple;LabelPart label;CommandPart command;MenuButtonPart menu_button;};
struct _Mouse {int _x;int _y;_SHORT _button[3];int _changes;};
struct _MultiPiece {wchar_t *text;XawTextPosition used;struct _MultiPiece *prev;struct _MultiPiece *next;};
struct _MultiSinkClassPart {int foo;};
struct _MultiSinkClassRec {ObjectClassPart object_class;TextSinkClassPart text_sink_class;MultiSinkClassPart multi_sink_class;};
struct _MultiSinkRec {ObjectPart object;TextSinkPart text_sink;MultiSinkPart multi_sink;};
struct _MultiSrcClassPart {char foo;};
struct _MultiSrcClassRec {ObjectClassPart object_class;TextSrcClassPart text_src_class;MultiSrcClassPart multi_src_class;};
struct _MultiSrcPart {XIC ic;XtPointer string;XawAsciiType type;XawTextPosition piece_size;Boolean data_compression;XtCallbackList callback;Boolean use_string_in_place;int multi_length;Boolean is_tempfile;Boolean changes;Boolean allocated_string;XawTextPosition length;MultiPiece *first_piece;};
struct _MultiSrcRec {ObjectPart object;TextSrcPart text_src;MultiSrcPart multi_src;};
struct _ObjectClassPart {WidgetClass superclass;String class_name;Cardinal widget_size;XtProc class_initialize;XtWidgetClassProc class_part_initialize;XtEnum class_inited;XtInitProc initialize;XtArgsProc initialize_hook;XtProc obj1;XtPointer obj2;Cardinal obj3;XtResourceList resources;Cardinal num_resources;XrmClass xrm_class;Boolean obj4;XtEnum obj5;Boolean obj6;Boolean obj7;XtWidgetProc destroy;XtProc obj8;XtProc obj9;XtSetValuesFunc set_values;XtArgsFunc set_values_hook;XtProc obj10;XtArgsProc get_values_hook;XtProc obj11;XtVersionType version;XtPointer callback_private;String obj12;XtProc obj13;XtProc obj14;XtPointer extension;};
struct _ObjectClassRec {ObjectClassPart object_class;};
struct _ObjectPart {Widget self;WidgetClass widget_class;Widget parent;XrmName xrm_name;Boolean being_destroyed;XtCallbackList destroy_callbacks;XtPointer constraints;};
struct _ObjectRec {ObjectPart object;};
struct _OnTheSpotData {XmTextPosition start;XmTextPosition end;XmTextPosition cursor;int over_len;int over_maxlen;char *over_str;int under_preedit;int pad;};
struct _OnTheSpotDataTW {XmTextPosition start;XmTextPosition end;XmTextPosition cursor;XmTextPosition over_len;XmTextPosition over_maxlen;char *over_str;int under_preedit;int pad;};
struct _OutputDataRec {XmFontList fontlist;unsigned int blinkrate;Boolean wordwrap;Boolean cursor_position_visible;Boolean autoshowinsertpoint;Boolean hasfocus;Boolean has_rect;Boolean handlingexposures;Boolean exposevscroll;Boolean exposehscroll;Boolean resizewidth;Boolean resizeheight;Boolean scrollvertical;Boolean scrollhorizontal;Boolean scrollleftside;Boolean scrolltopside;Boolean ignorevbar;Boolean ignorehbar;__int16 cursor_on;Boolean refresh_ibeam_off;Boolean suspend_hoffset;Boolean use_fontset;Boolean have_inverted_image_gc;OnOrOff blinkstate;Position insertx;Position inserty;int number_lines;int leftmargin;int rightmargin;int topmargin;int bottommargin;int scrollwidth;int vsliderSize;int hoffset;int averagecharwidth;int tabwidth;__int16 columns;__int16 rows;Dimension lineheight;Dimension minwidth;Dimension minheight;Dimension prevW;Dimension prevH;Dimension cursorwidth;Dimension cursorheight;Dimension font_ascent;Dimension font_descent;XtIntervalId timerid;Pixmap cursor;Pixmap add_mode_cursor;Pixmap ibeam_off;Pixmap stipple_tile;GC gc;GC imagegc;Widget vbar;Widget hbar;XFontStruct *font;GC save_gc;__int16 columns_set;__int16 rows_set;};
struct _OutputRec {struct _OutputDataRec *data;XYToPosProc XYToPos;PosToXYProc PosToXY;MeasureLineProc MeasureLine;DrawProc Draw;DrawInsertionPointProc DrawInsertionPoint;MakePositionVisibleProc MakePositionVisible;MoveLinesProc MoveLines;InvalidateProc Invalidate;GetPreferredSizeProc GetPreferredSize;GetValuesProc GetValues;SetValuesProc SetValues;XmRealizeOutProc realize;XtWidgetProc destroy;XmResizeFlagProc resize;XtExposeProc expose;};
struct _OverrideShellClassRec {CoreClassPart core_class;CompositeClassPart composite_class;ShellClassPart shell_class;OverrideShellClassPart override_shell_class;};
struct _PaneStack {struct _PaneStack *next;Pane pane;int start_size;};
struct _PanedClassPart {int foo;};
struct _PanedClassRec {CoreClassPart core_class;CompositeClassPart composite_class;ConstraintClassPart constraint_class;PanedClassPart paned_class;};
struct _PanedConstraintsPart {Dimension min;Dimension max;Boolean allow_resize;Boolean show_grip;Boolean skip_adjust;int position;Dimension preferred_size;Boolean resize_to_pref;Position delta;Position olddelta;Boolean paned_adjusted_me;Dimension wp_size;int size;Widget grip;};
struct _PanedConstraintsRec {PanedConstraintsPart paned;};
struct _PanedRec {CorePart core;CompositePart composite;ConstraintPart constraint;PanedPart paned;};
struct _PannerClassRec {CoreClassPart core_class;SimpleClassPart simple_class;PannerClassPart panner_class;};
struct _PannerRec {CorePart core;SimplePart simple;PannerPart panner;};
struct _PanoramiXGetScreenCount {CARD8 reqType;CARD8 panoramiXReqType;CARD16 length;CARD32 window;};
struct _PanoramiXGetScreenSize {CARD8 reqType;CARD8 panoramiXReqType;CARD16 length;CARD32 window;CARD32 screen;};
struct _PanoramiXGetState {CARD8 reqType;CARD8 panoramiXReqType;CARD16 length;CARD32 window;};
struct _PanoramiXQueryVersion {CARD8 reqType;CARD8 panoramiXReqType;CARD16 length;CARD8 clientMajor;CARD8 clientMinor;CARD16 unused;};
struct _Piece {char *text;XawTextPosition used;struct _Piece *prev;struct _Piece *next;};
struct _PortholeClassRec {CoreClassPart core_class;CompositeClassPart composite_class;PortholeClassPart porthole_class;};
struct _PortholeRec {CorePart core;CompositePart composite;PortholePart porthole;};
struct _PrintCreateContext {CARD8 reqType;CARD8 printReqType;CARD16 length;CARD32 contextID;CARD32 printerNameLen;CARD32 localeLen;};
struct _PrintDestroyContext {CARD8 reqType;CARD8 printReqType;CARD16 length;CARD32 printContext;};
struct _PrintEndDoc {CARD8 reqType;CARD8 printReqType;CARD16 length;BOOL cancel;CARD8 pad1;CARD16 pad2;};
struct _PrintEndJob {CARD8 reqType;CARD8 printReqType;CARD16 length;BOOL cancel;CARD8 pad1;CARD16 pad2;};
struct _PrintEndPage {CARD8 reqType;CARD8 printReqType;CARD16 length;BOOL cancel;CARD8 pad1;CARD16 pad2;};
struct _PrintGetAttributes {CARD8 reqType;CARD8 printReqType;CARD16 length;CARD32 printContext;CARD8 type;CARD8 pad1;CARD16 pad2;};
struct _PrintGetContext {CARD8 reqType;CARD8 printReqType;CARD16 length;};
struct _PrintGetContextScreen {CARD8 reqType;CARD8 printReqType;CARD16 length;CARD32 printContext;};
struct _PrintGetDocumentData {CARD8 reqType;CARD8 printReqType;CARD16 length;CARD32 printContext;CARD32 maxBufferSize;};
struct _PrintGetImageResolution {CARD8 reqType;CARD8 printReqType;CARD16 length;CARD32 printContext;};
struct _PrintGetOneAttribute {CARD8 reqType;CARD8 printReqType;CARD16 length;CARD32 printContext;CARD32 nameLen;CARD8 type;CARD8 pad1;CARD16 pad2;};
struct _PrintGetPageDimensions {CARD8 reqType;CARD8 printReqType;CARD16 length;CARD32 printContext;};
struct _PrintGetPrinterList {CARD8 reqType;CARD8 printReqType;CARD16 length;CARD32 printerNameLen;CARD32 localeLen;};
struct _PrintInputSelected {CARD8 reqType;CARD8 printReqType;CARD16 length;CARD32 printContext;};
struct _PrintPutDocumentData {CARD8 reqType;CARD8 printReqType;CARD16 length;CARD32 drawable;CARD32 len_data;CARD16 len_fmt;CARD16 len_options;};
struct _PrintQueryScreens {CARD8 reqType;CARD8 printReqType;CARD16 length;};
struct _PrintQueryVersion {CARD8 reqType;CARD8 printReqType;CARD16 length;};
struct _PrintRehashPrinterList {CARD8 reqType;CARD8 printReqType;CARD16 length;};
struct _PrintSelectInput {CARD8 reqType;CARD8 printReqType;CARD16 length;CARD32 printContext;CARD32 eventMask;};
struct _PrintSetAttributes {CARD8 reqType;CARD8 printReqType;CARD16 length;CARD32 printContext;CARD32 stringLen;CARD8 type;CARD8 rule;CARD16 pad1;};
struct _PrintSetContext {CARD8 reqType;CARD8 printReqType;CARD16 length;CARD32 printContext;};
struct _PrintSetImageResolution {CARD8 reqType;CARD8 printReqType;CARD16 length;CARD32 printContext;CARD16 imageRes;CARD16 pad1;};
struct _PrintStartDoc {CARD8 reqType;CARD8 printReqType;CARD16 length;CARD8 type;CARD8 pad1;CARD16 pad2;};
struct _PrintStartJob {CARD8 reqType;CARD8 printReqType;CARD16 length;CARD8 saveData;CARD8 pad1;CARD16 pad2;};
struct _PrintStartPage {CARD8 reqType;CARD8 printReqType;CARD16 length;CARD32 window;};
struct _PrivDesc {int size;int offset;};
struct _ProtocolStream {unsigned __int64 size;unsigned __int64 alloc;unsigned __int8 *real_top;unsigned __int8 *top;unsigned __int8 *current;};
struct _PutImageReq {CARD8 reqType;CARD8 format;CARD16 length;CARD32 drawable;CARD32 gc;CARD16 width;CARD16 height;INT16 dstX;INT16 dstY;CARD8 leftPad;CARD8 depth;CARD16 pad;};
struct _QueryAdaptorsReply {BYTE type;CARD8 padb1;CARD16 sequenceNumber;CARD32 length;CARD16 num_adaptors;CARD16 pads3;CARD32 padl4;CARD32 padl5;CARD32 padl6;CARD32 padl7;CARD32 padl8;};
struct _QueryEncodingsReply {BYTE type;CARD8 padb1;CARD16 sequenceNumber;CARD32 length;CARD16 num_encodings;CARD32 padl3;CARD32 padl4;CARD32 padl5;CARD32 padl6;CARD32 padl7;CARD32 padl8;};
struct _QueryExtensionReply {BYTE type;CARD8 padb1;CARD16 sequenceNumber;CARD32 length;CARD16 version;CARD16 revision;CARD32 padl4;CARD32 padl5;CARD32 padl6;CARD32 padl7;CARD32 padl8;};
struct _RadioGroup {struct _RadioGroup *prev;struct _RadioGroup *next;Widget widget;};
struct _RectObjClassPart {WidgetClass superclass;String class_name;Cardinal widget_size;XtProc class_initialize;XtWidgetClassProc class_part_initialize;XtEnum class_inited;XtInitProc initialize;XtArgsProc initialize_hook;XtProc rect1;XtPointer rect2;Cardinal rect3;XtResourceList resources;Cardinal num_resources;XrmClass xrm_class;Boolean rect4;XtEnum rect5;Boolean rect6;Boolean rect7;XtWidgetProc destroy;XtWidgetProc resize;XtExposeProc expose;XtSetValuesFunc set_values;XtArgsFunc set_values_hook;XtAlmostProc set_values_almost;XtArgsProc get_values_hook;XtProc rect9;XtVersionType version;XtPointer callback_private;String rect10;XtGeometryHandler query_geometry;XtProc rect11;XtPointer extension;};
struct _RectObjClassRec {RectObjClassPart rect_class;};
struct _RectObjPart {Position x;Position y;Dimension width;Dimension height;Dimension border_width;Boolean managed;Boolean sensitive;Boolean ancestor_sensitive;};
struct _RectObjRec {ObjectPart object;RectObjPart rectangle;};
struct _RepeaterClassRec {CoreClassPart core_class;SimpleClassPart simple_class;LabelClassPart label_class;CommandClassPart command_class;RepeaterClassPart repeater_class;};
struct _RepeaterRec {CorePart core;SimplePart simple;LabelPart label;CommandPart command;RepeaterPart repeater;};
typedef int _SHORT;
struct _ScreenSaverNotify {CARD8 type;BYTE state;CARD16 sequenceNumber;CARD32 timestamp;CARD32 root;CARD32 window;BYTE kind;BYTE forced;CARD16 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;};
struct _ScreenSaverQueryInfo {CARD8 reqType;CARD8 saverReqType;CARD16 length;CARD32 drawable;};
struct _ScreenSaverQueryVersion {CARD8 reqType;CARD8 saverReqType;CARD16 length;CARD8 clientMajor;CARD8 clientMinor;CARD16 unused;};
struct _ScreenSaverSelectInput {CARD8 reqType;CARD8 saverReqType;CARD16 length;CARD32 drawable;CARD32 eventMask;};
struct _ScreenSaverSetAttributes {CARD8 reqType;CARD8 saverReqType;CARD16 length;CARD32 drawable;INT16 x;INT16 y;CARD16 width;CARD16 height;CARD16 borderWidth;BYTE c_class;CARD8 depth;CARD32 visualID;CARD32 mask;};
struct _ScreenSaverUnsetAttributes {CARD8 reqType;CARD8 saverReqType;CARD16 length;CARD32 drawable;};
struct _ScrollbarClassRec {CoreClassPart core_class;SimpleClassPart simple_class;ScrollbarClassPart scrollbar_class;};
struct _ScrollbarRec {CorePart core;SimplePart simple;ScrollbarPart scrollbar;};
struct _SessionShellClassRec {CoreClassPart core_class;CompositeClassPart composite_class;ShellClassPart shell_class;WMShellClassPart wm_shell_class;VendorShellClassPart vendor_shell_class;TopLevelShellClassPart top_level_shell_class;ApplicationShellClassPart application_shell_class;SessionShellClassPart session_shell_class;};
struct _ShellClassRec {CoreClassPart core_class;CompositeClassPart composite_class;ShellClassPart shell_class;};
struct _SimpleClassRec {CoreClassPart core_class;SimpleClassPart simple_class;};
struct _SimpleMenuClassRec {CoreClassPart core_class;CompositeClassPart composite_class;ShellClassPart shell_class;OverrideShellClassPart override_shell_class;SimpleMenuClassPart simpleMenu_class;};
struct _SimpleMenuPart {String label_string;SmeObject label;WidgetClass label_class;Dimension top_margin;Dimension bottom_margin;Dimension row_height;Cursor cursor;SmeObject popup_entry;Boolean menu_on_screen;int backing_store;Boolean recursive_set_values;Boolean menu_width;Boolean menu_height;SmeObject entry_set;};
struct _SimpleMenuRec {CorePart core;CompositePart composite;ShellPart shell;OverrideShellPart override;SimpleMenuPart simple_menu;};
struct _SimpleRec {CorePart core;SimplePart simple;};
struct _SmeBSBClassPart {XtPointer extension;};
struct _SmeBSBClassRec {RectObjClassPart rect_class;SmeClassPart sme_class;SmeBSBClassPart sme_bsb_class;};
struct _SmeBSBRec {ObjectPart object;RectObjPart rectangle;SmePart sme;SmeBSBPart sme_bsb;};
struct _SmeClassPart {void (*highlight)();void (*unhighlight)();void (*notify)();XtPointer extension;};
struct _SmeClassRec {RectObjClassPart rect_class;SmeClassPart sme_class;};
struct _SmeLineClassPart {XtPointer extension;};
struct _SmeLineClassRec {RectObjClassPart rect_class;SmeClassPart sme_class;SmeLineClassPart sme_line_class;};
struct _SmeLineRec {ObjectPart object;RectObjPart rectangle;SmePart sme;SmeLinePart sme_line;};
struct _SmeRec {ObjectPart object;RectObjPart rectangle;SmePart sme;};
struct _SmtAttach {CARD8 reqType;CARD8 smtReqType;CARD16 length;CARD16 flags;CARD8 majorVersion;CARD8 minorVersion;Channel chan;};
struct _SmtPrivate {SmtProcInfo server;SmtProcInfo client;};
struct _SmtProcInfo {int whoami;int status;int pid;};
struct _SmtQueryVersion {CARD8 reqType;CARD8 smtReqType;CARD16 length;};
struct _SmtWakeup {BYTE type;BYTE bpad0;CARD16 sequenceNumber;CARD32 flags;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _SmtWakeupServer {CARD8 reqType;CARD8 smtReqType;CARD16 length;CARD32 flags;};
struct _StripChartClassRec {CoreClassPart core_class;SimpleClassPart simple_class;StripChartClassPart strip_chart_class;};
struct _StripChartRec {CorePart core;SimplePart simple;StripChartPart strip_chart;};
struct _TemplateClassRec {CoreClassPart core_class;TemplateClassPart template_class;};
struct _TemplateRec {CorePart core;TemplatePart template;};
struct _TextClassRec {CoreClassPart core_class;SimpleClassPart simple_class;TextClassPart text_class;};
struct _TextPart {Widget source;Widget sink;XawTextPosition insertPos;XawTextSelection s;XawTextSelectType *sarray;XawTextSelectionSalt *salt;int options;int dialog_horiz_offset;int dialog_vert_offset;Boolean display_caret;Boolean auto_fill;XawTextScrollMode scroll_vert;XawTextScrollMode scroll_horiz;XawTextWrapMode wrap;XawTextResizeMode resize;XawTextMargin r_margin;XtCallbackList unrealize_callbacks;XawTextMargin margin;XawTextLineTable lt;XawTextScanDirection extendDir;XawTextSelection origSel;Time lasttime;Time time;Position ev_x;Position ev_y;Widget vbar;Widget hbar;struct SearchAndReplace *search;Widget file_insert;XawTextPosition *updateFrom;XawTextPosition *updateTo;int numranges;int maxranges;XawTextPosition lastPos;GC gc;Boolean showposition;Boolean hasfocus;Boolean update_disabled;Boolean single_char;XawTextPosition old_insert;__int16 mult;struct text_move *copy_area_offsets;Boolean redisplay_needed;XawTextSelectionSalt *salt2;};
struct _TextRec {CorePart core;SimplePart simple;TextPart text;};
struct _TextSinkClassPart {void (*DisplayText)();void (*InsertCursor)();void (*ClearToBackground)();void (*FindPosition)();void (*FindDistance)();void (*Resolve)();int (*MaxLines)();int (*MaxHeight)();void (*SetTabs)();void (*GetCursorBounds)();};
struct _TextSinkClassRec {ObjectClassPart object_class;TextSinkClassPart text_sink_class;};
struct _TextSinkRec {ObjectPart object;TextSinkPart text_sink;};
struct _TextSrcClassPart {XawTextPosition (*Read)();int (*Replace)();XawTextPosition (*Scan)();XawTextPosition (*Search)();void (*SetSelection)();Boolean (*ConvertSelection)();};
struct _TextSrcClassRec {ObjectClassPart object_class;TextSrcClassPart textSrc_class;};
struct _TextSrcRec {ObjectPart object;TextSrcPart textSrc;};
struct _ToggleClass {XtActionProc Set;XtActionProc Unset;XtPointer extension;};
struct _ToggleClassRec {CoreClassPart core_class;SimpleClassPart simple_class;LabelClassPart label_class;CommandClassPart command_class;ToggleClassPart toggle_class;};
struct _ToggleRec {CorePart core;SimplePart simple;LabelPart label;CommandPart command;TogglePart toggle;};
struct _TopLevelShellClassRec {CoreClassPart core_class;CompositeClassPart composite_class;ShellClassPart shell_class;WMShellClassPart wm_shell_class;VendorShellClassPart vendor_shell_class;TopLevelShellClassPart top_level_shell_class;};
struct _TransientShellClassRec {CoreClassPart core_class;CompositeClassPart composite_class;ShellClassPart shell_class;WMShellClassPart wm_shell_class;VendorShellClassPart vendor_shell_class;TransientShellClassPart transient_shell_class;};
struct _TreeClassPart {int ignore;};
struct _TreeClassRec {CoreClassPart core_class;CompositeClassPart composite_class;ConstraintClassPart constraint_class;TreeClassPart tree_class;};
struct _TreeConstraintsPart {Widget parent;GC gc;Widget *children;int n_children;int max_children;Dimension bbsubwidth;Dimension bbsubheight;Dimension bbwidth;Dimension bbheight;Position x;Position y;};
struct _TreeConstraintsRec {TreeConstraintsPart tree;};
struct _TreeRec {CorePart core;CompositePart composite;ConstraintPart constraint;TreePart tree;};
struct _VendorShellClassRec {CoreClassPart core_class;CompositeClassPart composite_class;ShellClassPart shell_class;WMShellClassPart wm_shell_class;VendorShellClassPart vendor_shell_class;};
struct _VendorShellExtClassRec {ObjectClassPart object_class;XawVendorShellExtClassPart vendor_shell_ext_class;};
struct _ViewportClassRec {CoreClassPart core_class;CompositeClassPart composite_class;ConstraintClassPart constraint_class;FormClassPart form_class;ViewportClassPart viewport_class;};
struct _ViewportConstraintsRec {FormConstraintsPart form;ViewportConstraintsPart viewport;};
struct _ViewportPart {Boolean forcebars;Boolean allowhoriz;Boolean allowvert;Boolean usebottom;Boolean useright;XtCallbackList report_callbacks;Widget clip;Widget child;Widget horiz_bar;Widget vert_bar;};
struct _ViewportRec {CorePart core;CompositePart composite;ConstraintPart constraint;FormPart form;ViewportPart viewport;};
struct _WMShellClassRec {CoreClassPart core_class;CompositeClassPart composite_class;ShellClassPart shell_class;WMShellClassPart wm_shell_class;};
struct _WidgetClassRec {CoreClassPart core_class;};
struct _WidgetInfo {unsigned __int16 num_widgets;unsigned __int64 *ids;Widget real_widget;};
struct _WidgetRec {CorePart core;};
struct _XAnyClassinfo {XID class;int length;};
struct _XAssoc {struct _XAssoc *next;struct _XAssoc *prev;Display *display;XID x_id;char *data;};
struct _XAxisInfo {int resolution;int min_value;int max_value;};
struct _XButtonInfo {XID class;int length;__int16 num_buttons;};
struct _XComposeStatus {XPointer compose_ptr;int chars_matched;};
struct _XDeviceInfo {XID id;Atom type;char *name;int num_classes;int use;XAnyClassPtr inputclassinfo;};
struct _XDisplay;
struct _XETC {struct _XETC *next;Display *dpy;INT32 eventBase;INT32 errorBase;INT32 extOpcode;BYTE *xbuff;CARD16 xmax_size;XExtData *ext_data;CARD16 release;CARD16 version;CARD16 revision;CARD16 protocol;unsigned int dirty;XETCValues values;Boolean (*eventFunc[1])();};
union _XEvent {int type;XAnyEvent xany;XKeyEvent xkey;XButtonEvent xbutton;XMotionEvent xmotion;XCrossingEvent xcrossing;XFocusChangeEvent xfocus;XExposeEvent xexpose;XGraphicsExposeEvent xgraphicsexpose;XNoExposeEvent xnoexpose;XVisibilityEvent xvisibility;XCreateWindowEvent xcreatewindow;XDestroyWindowEvent xdestroywindow;XUnmapEvent xunmap;XMapEvent xmap;XMapRequestEvent xmaprequest;XReparentEvent xreparent;XConfigureEvent xconfigure;XGravityEvent xgravity;XResizeRequestEvent xresizerequest;XConfigureRequestEvent xconfigurerequest;XCirculateEvent xcirculate;XCirculateRequestEvent xcirculaterequest;XPropertyEvent xproperty;XSelectionClearEvent xselectionclear;XSelectionRequestEvent xselectionrequest;XSelectionEvent xselection;XColormapEvent xcolormap;XClientMessageEvent xclient;XMappingEvent xmapping;XErrorEvent xerror;XKeymapEvent xkeymap;__int64 pad[24];};
struct _XExtData {int number;struct _XExtData *next;int (*free_private)();XPointer private_data;};
struct _XExtEventInfo {Mask mask;BYTE type;BYTE word;};
struct _XIMHotKeyTrigger {KeySym keysym;int modifier;int modifier_mask;};
struct _XIMHotKeyTriggers {int num_hot_key;XIMHotKeyTrigger *key;};
struct _XIMPreeditCaretCallbackStruct {int position;XIMCaretDirection direction;XIMCaretStyle style;};
struct _XIMPreeditDrawCallbackStruct {int caret;int chg_first;int chg_length;XIMText *text;};
struct _XIMPreeditStateNotifyCallbackStruct {XIMPreeditState state;};
struct _XIMStatusDrawCallbackStruct {XIMStatusDataType type;union _XIMStatusDrawCallbackStruct::$D9A2F521BD917AA4B9408853DE8DEFA7 data;};
union _XIMStatusDrawCallbackStruct::$D9A2F521BD917AA4B9408853DE8DEFA7 {XIMText *text;Pixmap bitmap;};
struct _XIMStringConversionCallbackStruct {XIMStringConversionPosition position;XIMCaretDirection direction;XIMStringConversionOperation operation;unsigned __int16 factor;XIMStringConversionText *text;};
struct _XIMStringConversionText {unsigned __int16 length;XIMStringConversionFeedback *feedback;int encoding_is_wchar;union _XIMStringConversionText::$DE48A4CD3A06187C4ACE99002CF90FB4 string;};
union _XIMStringConversionText::$DE48A4CD3A06187C4ACE99002CF90FB4 {char *mbs;wchar_t *wcs;};
struct _XIMText {unsigned __int16 length;XIMFeedback *feedback;int encoding_is_wchar;union _XIMText::$8281806D2C2C5E9220BA18F83AF5F330 string;};
union _XIMText::$8281806D2C2C5E9220BA18F83AF5F330 {char *multi_byte;wchar_t *wide_char;};
struct _XImage {int width;int height;int xoffset;int format;char *data;int byte_order;int bitmap_unit;int bitmap_bit_order;int bitmap_pad;int depth;int bytes_per_line;int bits_per_pixel;unsigned __int64 red_mask;unsigned __int64 green_mask;unsigned __int64 blue_mask;XPointer obdata;struct _XImage::funcs f;};
struct _XImage::funcs {struct _XImage *(*create_image)();int (*destroy_image)(struct _XImage *);unsigned __int64 (*get_pixel)(struct _XImage *, int, int);int (*put_pixel)(struct _XImage *, int, int, unsigned __int64);struct _XImage *(*sub_image)(struct _XImage *, int, int, unsigned int, unsigned int);int (*add_pixel)(struct _XImage *, __int64);};
struct _XKeyInfo {XID class;int length;unsigned __int16 min_keycode;unsigned __int16 max_keycode;unsigned __int16 num_keys;};
typedef struct $AD6EAC895D1A3B8A33A2B5BDA8B88753 *_XPrivDisplay;
struct _XPrivate;
struct _XSyncSystemCounter {char *name;XSyncCounter counter;XSyncValue resolution;};
struct _XSyncValue {int hi;unsigned int lo;};
struct _XValuatorInfo {XID class;int length;unsigned __int8 num_axes;unsigned __int8 mode;unsigned __int64 motion_buffer;XAxisInfoPtr axes;};
struct _XagCreate {CARD8 reqType;CARD8 xagReqType;CARD16 length;CARD32 app_group;CARD32 attrib_mask;};
struct _XagCreateAssoc {CARD8 reqType;CARD8 xagReqType;CARD16 length;Window window;CARD16 window_type;CARD16 system_window_len;};
struct _XagDestroy {CARD8 reqType;CARD8 xagReqType;CARD16 length;CARD32 app_group;};
struct _XagDestroyAssoc {CARD8 reqType;CARD8 xagReqType;CARD16 length;Window window;};
struct _XagGetAttr {CARD8 reqType;CARD8 xagReqType;CARD16 length;CARD32 app_group;};
struct _XagQuery {CARD8 reqType;CARD8 xagReqType;CARD16 length;CARD32 resource;};
struct _XagQueryVersion {CARD8 reqType;CARD8 xagReqType;CARD16 length;CARD16 client_major_version;CARD16 client_minor_version;};
typedef Boolean (*_XawBooleanFunc)();
typedef void (*_XawEntryVoidFunc)();
struct _XawGripCallData {XEvent *event;String *params;Cardinal num_params;};
struct _XawIcPart {XIMStyle input_style;Boolean shared_ic;XawIcTableList shared_ic_table;XawIcTableList current_ic_table;XawIcTableList ic_table;};
struct _XawIcTablePart {Widget widget;XIC xic;XIMStyle input_style;unsigned __int64 flg;unsigned __int64 prev_flg;Boolean ic_focused;XFontSet font_set;Pixel foreground;Pixel background;Pixmap bg_pixmap;XawTextPosition cursor_position;unsigned __int64 line_spacing;Boolean openic_error;struct _XawIcTablePart *next;};
struct _XawImPart {XIM xim;XrmResourceList resources;Cardinal num_resources;Boolean open_im;Boolean initialized;Dimension area_height;String input_method;String preedit_type;};
typedef int (*_XawIntFunc)();
struct _XawListReturnStruct {String string;int list_index;};
typedef int (*_XawSinkIntFunc)();
typedef void (*_XawSinkVoidFunc)();
struct _XawTextMargin {Position left;Position right;Position top;Position bottom;};
typedef XawTextPosition (*_XawTextPositionFunc)();
struct _XawTextSelectionSalt {struct _XawTextSelectionSalt *next;XawTextSelection s;char *contents;int length;};
typedef void (*_XawTextVoidFunc)();
struct _XcmsCCC {Display *dpy;int screenNumber;Visual *visual;XcmsColor clientWhitePt;XcmsCompressionProc gamutCompProc;XPointer gamutCompClientData;XcmsWhiteAdjustProc whitePtAdjProc;XPointer whitePtAdjClientData;XcmsPerScrnInfo *pPerScrnInfo;};
struct _XcmsColorSpace {char *prefix;XcmsColorFormat id;XcmsParseStringProc parseString;XcmsFuncListPtr to_CIEXYZ;XcmsFuncListPtr from_CIEXYZ;int inverse_flag;};
struct _XcmsFunctionSet {XcmsColorSpace **DDColorSpaces;XcmsScreenInitProc screenInitProc;XcmsScreenFreeProc screenFreeProc;};
struct _XcmsPerScrnInfo {XcmsColor screenWhitePt;XPointer functionSet;XPointer screenData;unsigned __int8 state;char pad[3];};
struct _XctRec {XctString total_string;int total_length;XctFlags flags;int version;int can_ignore_exts;XctString item;int item_length;int char_size;char *encoding;XctHDirection horizontal;int horz_depth;char *GL;char *GL_encoding;int GL_set_size;int GL_char_size;char *GR;char *GR_encoding;int GR_set_size;int GR_char_size;char *GLGR_encoding;struct _XctRec::_XctPriv *priv;};
struct _XdmAuthKey {BYTE data[8];};
struct _XdmcpBuffer {BYTE *data;int size;int pointer;int count;};
struct _XdmcpHeader {CARD16 version;CARD16 opcode;CARD16 length;};
struct _XkbAccessXNotify {int type;unsigned __int64 serial;int send_event;Display *display;Time time;int xkb_type;int device;int detail;int keycode;int sk_delay;int debounce_delay;};
union _XkbAction {XkbAnyAction any;XkbModAction mods;XkbGroupAction group;XkbISOAction iso;XkbPtrAction ptr;XkbPtrBtnAction btn;XkbPtrDfltAction dflt;XkbSwitchScreenAction screen;XkbCtrlsAction ctrls;XkbMessageAction msg;XkbRedirectKeyAction redirect;XkbDeviceBtnAction devbtn;XkbDeviceValuatorAction devval;unsigned __int8 type;};
struct _XkbActionMessage {int type;unsigned __int64 serial;int send_event;Display *display;Time time;int xkb_type;int device;KeyCode keycode;int press;int key_event_follows;int group;unsigned int mods;char message[7];};
struct _XkbAnyAction {unsigned __int8 type;unsigned __int8 data[7];};
struct _XkbAnyDoodad {Atom name;unsigned __int8 type;unsigned __int8 priority;__int16 top;__int16 left;__int16 angle;};
struct _XkbAnyEvent {int type;unsigned __int64 serial;int send_event;Display *display;Time time;int xkb_type;unsigned int device;};
struct _XkbBehavior {unsigned __int8 type;unsigned __int8 data;};
struct _XkbBellNotify {int type;unsigned __int64 serial;int send_event;Display *display;Time time;int xkb_type;int device;int percent;int pitch;int duration;int bell_class;int bell_id;Atom name;Window window;int event_only;};
struct _XkbBounds {__int16 x1;__int16 y1;__int16 x2;__int16 y2;};
struct _XkbChanges {unsigned __int16 device_spec;unsigned __int16 state_changes;XkbMapChangesRec map;XkbControlsChangesRec ctrls;XkbIndicatorChangesRec indicators;XkbNameChangesRec names;XkbCompatChangesRec compat;};
struct _XkbClientMapRec {unsigned __int8 size_types;unsigned __int8 num_types;XkbKeyTypePtr types;unsigned __int16 size_syms;unsigned __int16 num_syms;KeySym *syms;XkbSymMapPtr key_sym_map;unsigned __int8 *modmap;};
struct _XkbColor {unsigned int pixel;char *spec;};
struct _XkbCompatChanges {unsigned __int8 changed_groups;unsigned __int16 first_si;unsigned __int16 num_si;};
struct _XkbCompatMapNotify {int type;unsigned __int64 serial;int send_event;Display *display;Time time;int xkb_type;int device;unsigned int changed_groups;int first_si;int num_si;int num_total_si;};
struct _XkbCompatMapRec {XkbSymInterpretPtr sym_interpret;XkbModsRec groups[4];unsigned __int16 num_si;unsigned __int16 size_si;};
struct _XkbComponentList {int num_keymaps;int num_keycodes;int num_types;int num_compat;int num_symbols;int num_geometry;XkbComponentNamePtr keymaps;XkbComponentNamePtr keycodes;XkbComponentNamePtr types;XkbComponentNamePtr compat;XkbComponentNamePtr symbols;XkbComponentNamePtr geometry;};
struct _XkbComponentName {unsigned __int16 flags;char *name;};
struct _XkbComponentNames {char *keymap;char *keycodes;char *types;char *compat;char *symbols;char *geometry;};
struct _XkbConfigField {char *field;unsigned __int8 field_id;};
struct _XkbConfigFields {unsigned __int16 cfg_id;unsigned __int16 num_fields;XkbConfigFieldPtr fields;XkbConfigParseFunc parser;XkbConfigFinishFunc finish;XPointer priv;struct _XkbConfigFields *next;};
struct _XkbConfigModInfo {int replace;unsigned __int8 mods;unsigned __int8 mods_clear;unsigned __int16 vmods;unsigned __int16 vmods_clear;};
struct _XkbConfigRtrn {unsigned int defined;int error;int line;int click_volume;int bell_volume;int bell_pitch;int bell_duration;int repeat_delay;int repeat_interval;char *rules_file;char *model;char *layout;char *variant;char *options;char *keymap;char *keycodes;char *geometry;char *phys_symbols;char *symbols;char *types;char *compat;int replace_initial_ctrls;unsigned __int64 initial_ctrls;unsigned __int64 initial_ctrls_clear;XkbConfigModInfoRec initial_mods;XkbConfigModInfoRec internal_mods;XkbConfigModInfoRec ignore_lock_mods;__int16 num_unbound_mods;__int16 sz_unbound_mods;XkbConfigUnboundModPtr unbound_mods;int groups_wrap;int slow_keys_delay;int debounce_delay;int mk_delay;int mk_interval;int mk_time_to_max;int mk_max_speed;int mk_curve;int ax_timeout;int replace_axt_ctrls_on;int replace_axt_ctrls_off;unsigned __int64 axt_ctrls_on;unsigned __int64 axt_ctrls_off;unsigned __int64 axt_ctrls_ignore;int replace_axt_opts_off;int replace_axt_opts_on;unsigned __int16 axt_opts_off;unsigned __int16 axt_opts_on;unsigned __int16 axt_opts_ignore;XkbConfigRtrnPrivPtr priv;};
struct _XkbConfigRtrnPriv {int cfg_id;XPointer priv;struct _XkbConfigRtrnPriv *next;};
struct _XkbConfigUnboundMod {unsigned __int8 what;unsigned __int8 mods;unsigned __int16 vmods;__int16 merge;char *name;};
struct _XkbControls {unsigned __int8 mk_dflt_btn;unsigned __int8 num_groups;unsigned __int8 groups_wrap;XkbModsRec internal;XkbModsRec ignore_lock;unsigned int enabled_ctrls;unsigned __int16 repeat_delay;unsigned __int16 repeat_interval;unsigned __int16 slow_keys_delay;unsigned __int16 debounce_delay;unsigned __int16 mk_delay;unsigned __int16 mk_interval;unsigned __int16 mk_time_to_max;unsigned __int16 mk_max_speed;__int16 mk_curve;unsigned __int16 ax_options;unsigned __int16 ax_timeout;unsigned __int16 axt_opts_mask;unsigned __int16 axt_opts_values;unsigned int axt_ctrls_mask;unsigned int axt_ctrls_values;unsigned __int8 per_key_repeat[32];};
struct _XkbControlsChanges {unsigned int changed_ctrls;unsigned int enabled_ctrls_changes;int num_groups_changed;};
struct _XkbControlsNotify {int type;unsigned __int64 serial;int send_event;Display *display;Time time;int xkb_type;int device;unsigned int changed_ctrls;unsigned int enabled_ctrls;unsigned int enabled_ctrl_changes;int num_groups;KeyCode keycode;char event_type;char req_major;char req_minor;};
struct _XkbConverters {XkbKSToMBFunc KSToMB;XPointer KSToMBPriv;XkbMBToKSFunc MBToKS;XPointer MBToKSPriv;XkbToUpperFunc KSToUpper;};
struct _XkbCtrlsAction {unsigned __int8 type;unsigned __int8 flags;unsigned __int8 ctrls3;unsigned __int8 ctrls2;unsigned __int8 ctrls1;unsigned __int8 ctrls0;};
struct _XkbDesc {struct _XDisplay *dpy;unsigned __int16 flags;unsigned __int16 device_spec;KeyCode min_key_code;KeyCode max_key_code;XkbControlsPtr ctrls;XkbServerMapPtr server;XkbClientMapPtr map;XkbIndicatorPtr indicators;XkbNamesPtr names;XkbCompatMapPtr compat;XkbGeometryPtr geom;};
struct _XkbDeviceBtnAction {unsigned __int8 type;unsigned __int8 flags;unsigned __int8 count;unsigned __int8 button;unsigned __int8 device;};
struct _XkbDeviceChanges {unsigned int changed;unsigned __int16 first_btn;unsigned __int16 num_btns;XkbDeviceLedChangesRec leds;};
struct _XkbDeviceInfo {char *name;Atom type;unsigned __int16 device_spec;int has_own_state;unsigned __int16 supported;unsigned __int16 unsupported;unsigned __int16 num_btns;XkbAction *btn_acts;unsigned __int16 sz_leds;unsigned __int16 num_leds;unsigned __int16 dflt_kbd_fb;unsigned __int16 dflt_led_fb;XkbDeviceLedInfoPtr leds;};
struct _XkbDeviceLedChanges {unsigned __int16 led_class;unsigned __int16 led_id;unsigned int defined;struct _XkbDeviceLedChanges *next;};
struct _XkbDeviceLedInfo {unsigned __int16 led_class;unsigned __int16 led_id;unsigned int phys_indicators;unsigned int maps_present;unsigned int names_present;unsigned int state;Atom names[32];XkbIndicatorMapRec maps[32];};
struct _XkbDeviceValuatorAction {unsigned __int8 type;unsigned __int8 device;unsigned __int8 v1_what;unsigned __int8 v1_ndx;unsigned __int8 v1_value;unsigned __int8 v2_what;unsigned __int8 v2_ndx;unsigned __int8 v2_value;};
union _XkbDoodad {XkbAnyDoodadRec any;XkbShapeDoodadRec shape;XkbTextDoodadRec text;XkbIndicatorDoodadRec indicator;XkbLogoDoodadRec logo;};
union _XkbEvent {int type;XkbAnyEvent any;XkbNewKeyboardNotifyEvent new_kbd;XkbMapNotifyEvent map;XkbStateNotifyEvent state;XkbControlsNotifyEvent ctrls;XkbIndicatorNotifyEvent indicators;XkbNamesNotifyEvent names;XkbCompatMapNotifyEvent compat;XkbBellNotifyEvent bell;XkbActionMessageEvent message;XkbAccessXNotifyEvent accessx;XkbExtensionDeviceNotifyEvent device;XEvent core;};
struct _XkbExtensionDeviceNotify {int type;unsigned __int64 serial;int send_event;Display *display;Time time;int xkb_type;int device;unsigned int reason;unsigned int supported;unsigned int unsupported;int first_btn;int num_btns;unsigned int leds_defined;unsigned int led_state;int led_class;int led_id;};
struct _XkbFileInfo {unsigned int type;unsigned int defined;XkbDescPtr xkb;};
struct _XkbGeometry {Atom name;unsigned __int16 width_mm;unsigned __int16 height_mm;char *label_font;XkbColorPtr label_color;XkbColorPtr base_color;unsigned __int16 sz_properties;unsigned __int16 sz_colors;unsigned __int16 sz_shapes;unsigned __int16 sz_sections;unsigned __int16 sz_doodads;unsigned __int16 sz_key_aliases;unsigned __int16 num_properties;unsigned __int16 num_colors;unsigned __int16 num_shapes;unsigned __int16 num_sections;unsigned __int16 num_doodads;unsigned __int16 num_key_aliases;XkbPropertyPtr properties;XkbColorPtr colors;XkbShapePtr shapes;XkbSectionPtr sections;XkbDoodadPtr doodads;XkbKeyAliasPtr key_aliases;};
struct _XkbGeometrySizes {unsigned int which;unsigned __int16 num_properties;unsigned __int16 num_colors;unsigned __int16 num_shapes;unsigned __int16 num_sections;unsigned __int16 num_doodads;unsigned __int16 num_key_aliases;};
struct _XkbGroupAction {unsigned __int8 type;unsigned __int8 flags;char group_XXX;};
struct _XkbISOAction {unsigned __int8 type;unsigned __int8 flags;unsigned __int8 mask;unsigned __int8 real_mods;char group_XXX;unsigned __int8 affect;unsigned __int8 vmods1;unsigned __int8 vmods2;};
struct _XkbIndicatorChanges {unsigned int state_changes;unsigned int map_changes;};
struct _XkbIndicatorDoodad {Atom name;unsigned __int8 type;unsigned __int8 priority;__int16 top;__int16 left;__int16 angle;unsigned __int16 shape_ndx;unsigned __int16 on_color_ndx;unsigned __int16 off_color_ndx;};
struct _XkbIndicatorMapRec {unsigned __int8 flags;unsigned __int8 which_groups;unsigned __int8 groups;unsigned __int8 which_mods;XkbModsRec mods;unsigned int ctrls;};
struct _XkbIndicatorNotify {int type;unsigned __int64 serial;int send_event;Display *display;Time time;int xkb_type;int device;unsigned int changed;unsigned int state;};
struct _XkbIndicatorRec {unsigned __int64 phys_indicators;XkbIndicatorMapRec maps[32];};
struct _XkbInfoRec {unsigned int flags;unsigned int xlib_ctrls;XExtCodes *codes;int srv_major;int srv_minor;unsigned int selected_events;unsigned __int16 selected_nkn_details;unsigned __int16 selected_map_details;XkbDescRec *desc;XkbMapChangesRec changes;Atom composeLED;XkbConverters cvt;};
struct _XkbKTMapEntry {int active;unsigned __int8 level;XkbModsRec mods;};
struct _XkbKbdDpyState;
struct _XkbKey {XkbKeyNameRec name;__int16 gap;unsigned __int8 shape_ndx;unsigned __int8 color_ndx;};
struct _XkbKeyAliasRec {char real[4];char alias[4];};
struct _XkbKeyNameRec {char name[4];};
struct _XkbKeyType {XkbModsRec mods;unsigned __int8 num_levels;unsigned __int8 map_count;XkbKTMapEntryPtr map;XkbModsPtr preserve;Atom name;Atom *level_names;};
struct _XkbLogoDoodad {Atom name;unsigned __int8 type;unsigned __int8 priority;__int16 top;__int16 left;__int16 angle;unsigned __int16 color_ndx;unsigned __int16 shape_ndx;char *logo_name;};
struct _XkbMapChanges {unsigned __int16 changed;KeyCode min_key_code;KeyCode max_key_code;unsigned __int8 first_type;unsigned __int8 num_types;KeyCode first_key_sym;unsigned __int8 num_key_syms;KeyCode first_key_act;unsigned __int8 num_key_acts;KeyCode first_key_behavior;unsigned __int8 num_key_behaviors;KeyCode first_key_explicit;unsigned __int8 num_key_explicit;KeyCode first_modmap_key;unsigned __int8 num_modmap_keys;KeyCode first_vmodmap_key;unsigned __int8 num_vmodmap_keys;unsigned __int8 pad;unsigned __int16 vmods;};
struct _XkbMapNotifyEvent {int type;unsigned __int64 serial;int send_event;Display *display;Time time;int xkb_type;int device;unsigned int changed;unsigned int flags;int first_type;int num_types;KeyCode min_key_code;KeyCode max_key_code;KeyCode first_key_sym;KeyCode first_key_act;KeyCode first_key_behavior;KeyCode first_key_explicit;KeyCode first_modmap_key;KeyCode first_vmodmap_key;int num_key_syms;int num_key_acts;int num_key_behaviors;int num_key_explicit;int num_modmap_keys;int num_vmodmap_keys;unsigned int vmods;};
struct _XkbMessageAction {unsigned __int8 type;unsigned __int8 flags;unsigned __int8 message[6];};
struct _XkbModAction {unsigned __int8 type;unsigned __int8 flags;unsigned __int8 mask;unsigned __int8 real_mods;unsigned __int8 vmods1;unsigned __int8 vmods2;};
struct _XkbMods {unsigned __int8 mask;unsigned __int8 real_mods;unsigned __int16 vmods;};
struct _XkbNameChanges {unsigned int changed;unsigned __int8 first_type;unsigned __int8 num_types;unsigned __int8 first_lvl;unsigned __int8 num_lvls;unsigned __int8 num_aliases;unsigned __int8 num_rg;unsigned __int8 first_key;unsigned __int8 num_keys;unsigned __int16 changed_vmods;unsigned __int64 changed_indicators;unsigned __int8 changed_groups;};
struct _XkbNamesNotify {int type;unsigned __int64 serial;int send_event;Display *display;Time time;int xkb_type;int device;unsigned int changed;int first_type;int num_types;int first_lvl;int num_lvls;int num_aliases;int num_radio_groups;unsigned int changed_vmods;unsigned int changed_groups;unsigned int changed_indicators;int first_key;int num_keys;};
struct _XkbNamesRec {Atom keycodes;Atom geometry;Atom symbols;Atom types;Atom compat;Atom vmods[16];Atom indicators[32];Atom groups[4];XkbKeyNamePtr keys;XkbKeyAliasPtr key_aliases;Atom *radio_groups;Atom phys_symbols;unsigned __int8 num_keys;unsigned __int8 num_key_aliases;unsigned __int16 num_rg;};
struct _XkbNewKeyboardNotify {int type;unsigned __int64 serial;int send_event;Display *display;Time time;int xkb_type;int device;int old_device;int min_key_code;int max_key_code;int old_min_key_code;int old_max_key_code;unsigned int changed;char req_major;char req_minor;};
struct _XkbOutline {unsigned __int16 num_points;unsigned __int16 sz_points;unsigned __int16 corner_radius;XkbPointPtr points;};
struct _XkbOverlay {Atom name;XkbSectionPtr section_under;unsigned __int16 num_rows;unsigned __int16 sz_rows;XkbOverlayRowPtr rows;XkbBoundsPtr bounds;};
struct _XkbOverlayKey {XkbKeyNameRec over;XkbKeyNameRec under;};
struct _XkbOverlayRow {unsigned __int16 row_under;unsigned __int16 num_keys;unsigned __int16 sz_keys;XkbOverlayKeyPtr keys;};
struct _XkbPoint {__int16 x;__int16 y;};
struct _XkbProperty {char *name;char *value;};
struct _XkbPtrAction {unsigned __int8 type;unsigned __int8 flags;unsigned __int8 high_XXX;unsigned __int8 low_XXX;unsigned __int8 high_YYY;unsigned __int8 low_YYY;};
struct _XkbPtrBtnAction {unsigned __int8 type;unsigned __int8 flags;unsigned __int8 count;unsigned __int8 button;};
struct _XkbPtrDfltAction {unsigned __int8 type;unsigned __int8 flags;unsigned __int8 affect;char valueXXX;};
struct _XkbRF_DescribeVars {int sz_desc;int num_desc;XkbRF_VarDescPtr desc;};
struct _XkbRF_Rule {char *model;char *layout;char *variant;char *option;char *keycodes;char *symbols;char *types;char *compat;char *geometry;char *keymap;unsigned int flags;};
struct _XkbRF_Rules {XkbRF_DescribeVarsRec models;XkbRF_DescribeVarsRec layouts;XkbRF_DescribeVarsRec variants;XkbRF_DescribeVarsRec options;unsigned __int16 sz_extra;unsigned __int16 num_extra;char **extra_names;XkbRF_DescribeVarsPtr extra;unsigned __int16 sz_rules;unsigned __int16 num_rules;XkbRF_RulePtr rules;};
struct _XkbRF_VarDefs {char *model;char *layout;char *variant;char *options;unsigned __int16 sz_extra;unsigned __int16 num_extra;char *extra_names;char **extra_values;};
struct _XkbRF_VarDesc {char *name;char *desc;};
struct _XkbReadBuffer {int error;int size;char *start;char *data;};
struct _XkbRedirectKeyAction {unsigned __int8 type;unsigned __int8 new_key;unsigned __int8 mods_mask;unsigned __int8 mods;unsigned __int8 vmods_mask0;unsigned __int8 vmods_mask1;unsigned __int8 vmods0;unsigned __int8 vmods1;};
struct _XkbRow {__int16 top;__int16 left;unsigned __int16 num_keys;unsigned __int16 sz_keys;int vertical;XkbKeyPtr keys;XkbBoundsRec bounds;};
struct _XkbSection {Atom name;unsigned __int8 priority;__int16 top;__int16 left;unsigned __int16 width;unsigned __int16 height;__int16 angle;unsigned __int16 num_rows;unsigned __int16 num_doodads;unsigned __int16 num_overlays;unsigned __int16 sz_rows;unsigned __int16 sz_doodads;unsigned __int16 sz_overlays;XkbRowPtr rows;XkbDoodadPtr doodads;XkbBoundsRec bounds;struct _XkbSection::_XkbOverlay *overlays;};
struct _XkbServerMapRec {unsigned __int16 num_acts;unsigned __int16 size_acts;XkbAction *acts;XkbBehavior *behaviors;unsigned __int16 *key_acts;unsigned __int8 *explicit;unsigned __int8 vmods[16];unsigned __int16 *vmodmap;};
struct _XkbShape {Atom name;unsigned __int16 num_outlines;unsigned __int16 sz_outlines;XkbOutlinePtr outlines;XkbOutlinePtr approx;XkbOutlinePtr primary;XkbBoundsRec bounds;};
struct _XkbShapeDoodad {Atom name;unsigned __int8 type;unsigned __int8 priority;__int16 top;__int16 left;__int16 angle;unsigned __int16 color_ndx;unsigned __int16 shape_ndx;};
struct _XkbStateNotifyEvent {int type;unsigned __int64 serial;int send_event;Display *display;Time time;int xkb_type;int device;unsigned int changed;int group;int base_group;int latched_group;int locked_group;unsigned int mods;unsigned int base_mods;unsigned int latched_mods;unsigned int locked_mods;int compat_state;unsigned __int8 grab_mods;unsigned __int8 compat_grab_mods;unsigned __int8 lookup_mods;unsigned __int8 compat_lookup_mods;int ptr_buttons;KeyCode keycode;char event_type;char req_major;char req_minor;};
struct _XkbStateRec {unsigned __int8 group;unsigned __int8 locked_group;unsigned __int16 base_group;unsigned __int16 latched_group;unsigned __int8 mods;unsigned __int8 base_mods;unsigned __int8 latched_mods;unsigned __int8 locked_mods;unsigned __int8 compat_state;unsigned __int8 grab_mods;unsigned __int8 compat_grab_mods;unsigned __int8 lookup_mods;unsigned __int8 compat_lookup_mods;unsigned __int16 ptr_buttons;};
struct _XkbSwitchScreenAction {unsigned __int8 type;unsigned __int8 flags;char screenXXX;};
struct _XkbSymInterpretRec {KeySym sym;unsigned __int8 flags;unsigned __int8 match;unsigned __int8 mods;unsigned __int8 virtual_mod;XkbAnyAction act;};
struct _XkbSymMapRec {unsigned __int8 kt_index[4];unsigned __int8 group_info;unsigned __int8 width;unsigned __int16 offset;};
struct _XkbTextDoodad {Atom name;unsigned __int8 type;unsigned __int8 priority;__int16 top;__int16 left;__int16 angle;__int16 width;__int16 height;unsigned __int16 color_ndx;char *text;char *font;};
struct _XmAllProtocolsMgrRec {XmProtocolMgrList protocol_mgrs;Cardinal num_protocol_mgrs;Cardinal max_protocol_mgrs;Widget shell;};
struct _XmAnyICCCallbackStruct {int reason;XEvent *event;Time timeStamp;};
struct _XmArrowButtonClassPart {XtPointer extension;};
struct _XmArrowButtonClassRec {CoreClassPart core_class;XmPrimitiveClassPart primitive_class;XmArrowButtonClassPart arrowbutton_class;};
struct _XmArrowButtonGadgetClassPart {XtPointer extension;};
struct _XmArrowButtonGadgetClassRec {RectObjClassPart rect_class;XmGadgetClassPart gadget_class;XmArrowButtonGadgetClassPart arrow_button_class;};
struct _XmArrowButtonGadgetPart {XtCallbackList activate_callback;XtCallbackList arm_callback;XtCallbackList disarm_callback;unsigned __int8 direction;Boolean selected;__int16 top_count;__int16 cent_count;__int16 bot_count;XRectangle *top;XRectangle *cent;XRectangle *bot;Position old_x;Position old_y;GC arrow_GC;XtIntervalId timer;unsigned __int8 multiClick;int click_count;GC insensitive_GC;};
struct _XmArrowButtonGadgetRec {ObjectPart object;RectObjPart rectangle;XmGadgetPart gadget;XmArrowButtonGadgetPart arrowbutton;};
struct _XmArrowButtonPart {XtCallbackList activate_callback;XtCallbackList arm_callback;XtCallbackList disarm_callback;unsigned __int8 direction;Boolean selected;__int16 top_count;__int16 cent_count;__int16 bot_count;XRectangle *top;XRectangle *cent;XRectangle *bot;GC arrow_GC;XtIntervalId timer;unsigned __int8 multiClick;int click_count;Time armTimeStamp;GC insensitive_GC;};
struct _XmArrowButtonRec {CorePart core;XmPrimitivePart primitive;XmArrowButtonPart arrowbutton;};
struct _XmArrowPixmap {Dimension height;Dimension width;unsigned int depth;unsigned __int8 direction;Pixel top_shadow_color;Pixel bottom_shadow_color;Pixel foreground_color;Display *display;Screen *screen;Pixmap pixmap;};
struct _XmBackingRec {Position x;Position y;Pixmap pixmap;};
struct _XmBaseClassExtRec {XtPointer next_extension;XrmQuark record_type;__int64 version;Cardinal record_size;XtInitProc initializePrehook;XtSetValuesFunc setValuesPrehook;XtInitProc initializePosthook;XtSetValuesFunc setValuesPosthook;WidgetClass secondaryObjectClass;XtInitProc secondaryObjectCreate;XmGetSecResDataFunc getSecResData;unsigned __int8 flags[32];XtArgsProc getValuesPrehook;XtArgsProc getValuesPosthook;XtWidgetClassProc classPartInitPrehook;XtWidgetClassProc classPartInitPosthook;XtResourceList ext_resources;XtResourceList compiled_ext_resources;Cardinal num_ext_resources;Boolean use_sub_resources;XmWidgetNavigableProc widgetNavigable;XmFocusChangeProc focusChange;XmWrapperData wrapperData;};
struct _XmBaselineMargins {unsigned __int8 get_or_set;Dimension margin_top;Dimension margin_bottom;Dimension shadow;Dimension highlight;Dimension text_height;Dimension margin_height;};
typedef struct $A88F82F3855C63B78A51C35CB747714F _XmBuildVirtualKeyStruct;
struct _XmBulletinBoardClassRec {CoreClassPart core_class;CompositeClassPart composite_class;ConstraintClassPart constraint_class;XmManagerClassPart manager_class;XmBulletinBoardClassPart bulletin_board_class;};
struct _XmBulletinBoardConstraintPart {char unused;};
struct _XmBulletinBoardRec {CorePart core;CompositePart composite;ConstraintPart constraint;XmManagerPart manager;XmBulletinBoardPart bulletin_board;};
struct _XmButtonEventStatusRec {Time time;Boolean verified;Boolean waiting_to_be_managed;XButtonEvent event;};
struct _XmCacheClassPart {XmGadgetCache cache_head;XmCacheCopyProc cache_copy;XmGadgetCacheProc cache_delete;XmCacheCompareProc cache_compare;};
struct _XmCascadeButtonClassRec {CoreClassPart core_class;XmPrimitiveClassPart primitive_class;XmLabelClassPart label_class;XmCascadeButtonClassPart cascade_button_class;};
struct _XmCascadeButtonGCacheObjClassPart {int foo;};
struct _XmCascadeButtonGCacheObjClassRec {ObjectClassPart object_class;XmExtClassPart ext_class;XmLabelGCacheObjClassPart label_class_cache;XmCascadeButtonGCacheObjClassPart cascade_button_class_cache;};
struct _XmCascadeButtonGCacheObjPart {Pixmap cascade_pixmap;int map_delay;Pixmap armed_pixmap;};
struct _XmCascadeButtonGCacheObjRec {ObjectPart object;XmExtPart ext;XmLabelGCacheObjPart label_cache;XmCascadeButtonGCacheObjPart cascade_button_cache;};
struct _XmCascadeButtonGadgetClassRec {RectObjClassPart rect_class;XmGadgetClassPart gadget_class;XmLabelGadgetClassPart label_class;XmCascadeButtonGadgetClassPart cascade_button_class;};
struct _XmCascadeButtonGadgetPart {Widget submenu;XtCallbackList activate_callback;XtCallbackList cascade_callback;Boolean armed;XRectangle cascade_rect;XtIntervalId timer;XmCascadeButtonGCacheObjPart *cache;};
struct _XmCascadeButtonGadgetRec {ObjectPart object;RectObjPart rectangle;XmGadgetPart gadget;XmLabelGadgetPart label;XmCascadeButtonGadgetPart cascade_button;};
struct _XmCascadeButtonRec {CorePart core;XmPrimitivePart primitive;XmLabelPart label;XmCascadeButtonPart cascade_button;};
struct _XmCascadeButtonWidgetRec {CorePart core;XmPrimitivePart primitive;XmLabelPart label;XmCascadeButtonPart cascade_button;};
struct _XmColorData {Screen *screen;Colormap color_map;unsigned __int8 allocated;XColor background;XColor foreground;XColor top_shadow;XColor bottom_shadow;XColor select;};
struct _XmCommandClassRec {CoreClassPart core_class;CompositeClassPart composite_class;ConstraintClassPart constraint_class;XmManagerClassPart manager_class;XmBulletinBoardClassPart bulletin_board_class;XmSelectionBoxClassPart selection_box_class;XmCommandClassPart command_class;};
struct _XmCommandConstraintPart {char unused;};
struct _XmCommandRec {CorePart core;CompositePart composite;ConstraintPart constraint;XmManagerPart manager;XmBulletinBoardPart bulletin_board;XmSelectionBoxPart selection_box;XmCommandPart command;};
union _XmConvertSelectionRec {XtConvertSelectionIncrProc sel_incr;XtConvertSelectionProc sel;};
struct _XmDefaultBindingStringRec {String vendorName;String defaults;};
struct _XmDesktopClassPart {WidgetClass child_class;XtWidgetProc insert_child;XtWidgetProc delete_child;XtPointer extension;};
struct _XmDesktopClassRec {ObjectClassPart object_class;XmExtClassPart ext_class;XmDesktopClassPart desktop_class;};
struct _XmDesktopRec {ObjectPart object;XmExtPart ext;XmDesktopPart desktop;};
struct _XmDialogShellClassRec {CoreClassPart core_class;CompositeClassPart composite_class;ShellClassPart shell_class;WMShellClassPart wm_shell_class;VendorShellClassPart vendor_shell_class;TransientShellClassPart transient_shell_class;XmDialogShellClassPart dialog_shell_part;};
struct _XmDialogShellExtClassPart {XtPointer extension;};
struct _XmDialogShellExtClassRec {ObjectClassPart object_class;XmExtClassPart ext_class;XmDesktopClassPart desktop_class;XmShellExtClassPart shell_class;XmVendorShellExtClassPart vendor_class;XmDialogShellExtClassPart dialog_class;};
struct _XmDialogShellExtPart {int empty;};
struct _XmDialogShellExtRec {ObjectPart object;XmExtPart ext;XmDesktopPart desktop;XmShellExtPart shell;XmVendorShellExtPart vendor;XmDialogShellExtPart dialog;};
struct _XmDialogShellRec {CorePart core;CompositePart composite;ShellPart shell;WMShellPart wm;VendorShellPart vendor;TransientShellPart transient;XmDialogShellPart dialog;};
struct _XmDialogShellWidgetRec {CorePart core;CompositePart composite;ShellPart shell;WMShellPart wm;VendorShellPart vendor;TransientShellPart transient;XmDialogShellPart dialog;};
struct _XmDisplayClassRec {CoreClassPart core_class;CompositeClassPart composite_class;ShellClassPart shell_class;WMShellClassPart wm_shell_class;VendorShellClassPart vendor_shell_class;TopLevelShellClassPart top_level_shell_class;ApplicationShellClassPart application_shell_class;XmDisplayClassPart display_class;};
struct _XmDisplayInfo {Cursor SashCursor;Widget destinationWidget;Cursor TearOffCursor;XtPointer UniqueStamp;Pixmap ToggleBCheckPixmaps[4];};
struct _XmDisplayRec {CorePart core;CompositePart composite;ShellPart shell;WMShellPart wm;VendorShellPart vendor;TopLevelShellPart topLevel;ApplicationShellPart application;XmDisplayPart display;};
struct _XmDragContextClassRec {CoreClassPart core_class;XmDragContextClassPart drag_class;};
struct _XmDragContextPart {Atom *exportTargets;Cardinal numExportTargets;XmConvertSelectionRec convertProc;XtPointer clientData;XmDragIconObject sourceCursorIcon;XmDragIconObject stateCursorIcon;XmDragIconObject operationCursorIcon;XmDragIconObject sourcePixmapIcon;Pixel cursorBackground;Pixel cursorForeground;Pixel validCursorForeground;Pixel invalidCursorForeground;Pixel noneCursorForeground;XtCallbackList dragMotionCallback;XtCallbackList operationChangedCallback;XtCallbackList siteEnterCallback;XtCallbackList siteLeaveCallback;XtCallbackList topLevelEnterCallback;XtCallbackList topLevelLeaveCallback;XtCallbackList dropStartCallback;XtCallbackList dropFinishCallback;XtCallbackList dragDropFinishCallback;unsigned __int8 dragOperations;Boolean incremental;unsigned __int8 blendModel;Window srcWindow;Time dragStartTime;Atom iccHandle;Widget sourceWidget;Boolean sourceIsExternal;Boolean topWindowsFetched;unsigned __int8 commType;unsigned __int8 animationType;unsigned __int8 operation;unsigned __int8 operations;unsigned int lastEventState;unsigned __int8 dragCompletionStatus;unsigned __int8 dragDropCompletionStatus;Boolean forceIPC;Boolean serverGrabbed;Boolean useLocal;Boolean inDropSite;XtIntervalId dragTimerId;Time roundOffTime;Time lastChangeTime;Time crossingTime;Time dragFinishTime;Time dropFinishTime;Atom dropSelection;Widget srcShell;Position startX;Position startY;XmID siteID;Screen *currScreen;Window currWmRoot;XmDragOverShellWidget curDragOver;XmDragOverShellWidget origDragOver;XmDragReceiverInfoStruct *currReceiverInfo;XmDragReceiverInfoStruct *rootReceiverInfo;XmDragReceiverInfoStruct *receiverInfos;Cardinal numReceiverInfos;Cardinal maxReceiverInfos;unsigned __int8 trackingMode;unsigned __int8 activeProtocolStyle;unsigned __int8 activeBlendModel;Boolean dragDropCancelEffect;};
struct _XmDragContextRec {CorePart core;XmDragContextPart drag;};
struct _XmDragCursorRec {struct _XmDragCursorRec *next;Cursor cursor;XmDragIconObject stateIcon;XmDragIconObject opIcon;XmDragIconObject sourceIcon;Boolean dirty;};
struct _XmDragDropFinishCallbackStruct {int reason;XEvent *event;Time timeStamp;};
struct _XmDragIconClassRec {RectObjClassPart rectangle_class;XmDragIconClassPart dragIcon_class;};
struct _XmDragIconRec {ObjectPart object;RectObjPart rectangle;XmDragIconPart drag;};
struct _XmDragMotionCallbackStruct {int reason;XEvent *event;Time timeStamp;unsigned __int8 operation;unsigned __int8 operations;unsigned __int8 dropSiteStatus;Position x;Position y;};
struct _XmDragOverBlendRec {XmDragIconObject sourceIcon;Position sourceX;Position sourceY;XmDragIconObject mixedIcon;GC gc;};
struct _XmDragOverShellClassRec {CoreClassPart core_class;CompositeClassPart composite_class;ShellClassPart shell_class;WMShellClassPart wm_shell_class;VendorShellClassPart vendor_shell_class;XmDragOverShellClassPart dragOver_shell_class;};
struct _XmDragOverShellPart {Position hotX;Position hotY;unsigned __int8 cursorState;unsigned __int8 mode;unsigned __int8 activeMode;Position initialX;Position initialY;XmDragIconObject stateIcon;XmDragIconObject opIcon;XmDragOverBlendRec cursorBlend;XmDragOverBlendRec rootBlend;Pixel cursorForeground;Pixel cursorBackground;Cursor ncCursor;Cursor activeCursor;XmBackingRec backing;Pixmap tmpPix;Pixmap tmpBit;Boolean isVisible;};
struct _XmDragOverShellRec {CorePart core;CompositePart composite;ShellPart shell;WMShellPart wm;VendorShellPart vendor;XmDragOverShellPart drag;};
struct _XmDragProcCallbackStruct {int reason;XEvent *event;Time timeStamp;Widget dragContext;Position x;Position y;unsigned __int8 dropSiteStatus;unsigned __int8 operation;unsigned __int8 operations;Boolean animate;};
struct _XmDrawingAreaClassRec {CoreClassPart core_class;CompositeClassPart composite_class;ConstraintClassPart constraint_class;XmManagerClassPart manager_class;XmDrawingAreaClassPart drawing_area_class;};
struct _XmDrawingAreaConstraintPart {char unused;};
struct _XmDrawingAreaRec {CorePart core;CompositePart composite;ConstraintPart constraint;XmManagerPart manager;XmDrawingAreaPart drawing_area;};
struct _XmDrawnButtonClassPart {XtPointer extension;};
struct _XmDrawnButtonClassRec {CoreClassPart core_class;XmPrimitiveClassPart primitive_class;XmLabelClassPart label_class;XmDrawnButtonClassPart drawnbutton_class;};
struct _XmDrawnButtonPart {Boolean pushbutton_enabled;unsigned __int8 shadow_type;XtCallbackList activate_callback;XtCallbackList arm_callback;XtCallbackList disarm_callback;XtCallbackList expose_callback;XtCallbackList resize_callback;Boolean armed;Dimension old_width;Dimension old_height;Dimension old_shadow_thickness;Dimension old_highlight_thickness;XtIntervalId timer;unsigned __int8 multiClick;int click_count;Time armTimeStamp;};
struct _XmDrawnButtonRec {CorePart core;XmPrimitivePart primitive;XmLabelPart label;XmDrawnButtonPart drawnbutton;};
struct _XmDropFinishCallbackStruct {int reason;XEvent *event;Time timeStamp;unsigned __int8 operation;unsigned __int8 operations;unsigned __int8 dropSiteStatus;unsigned __int8 dropAction;unsigned __int8 completionStatus;};
struct _XmDropProcCallbackStruct {int reason;XEvent *event;Time timeStamp;Widget dragContext;Position x;Position y;unsigned __int8 dropSiteStatus;unsigned __int8 operation;unsigned __int8 operations;unsigned __int8 dropAction;};
struct _XmDropSiteEnterCallbackStruct {int reason;XEvent *event;Time timeStamp;unsigned __int8 operation;unsigned __int8 operations;unsigned __int8 dropSiteStatus;Position x;Position y;};
struct _XmDropSiteLeaveCallbackStruct {int reason;XEvent *event;Time timeStamp;};
struct _XmDropSiteManagerClassRec {ObjectClassPart object_class;XmDropSiteManagerClassPart dropManager_class;};
struct _XmDropSiteManagerPart {XtCallbackProc notifyProc;XtCallbackProc treeUpdateProc;XtPointer client_data;XtPointer dragUnderData;XtPointer curInfo;Time curTime;Position curX;Position curY;Position oldX;Position oldY;unsigned __int8 curDropSiteStatus;Widget curDragContext;Boolean curAnimate;unsigned __int8 curOperations;unsigned __int8 curOperation;XmRegion curAncestorClipRegion;XmRegion newAncestorClipRegion;XtPointer dsTable;XtPointer dsRoot;Position rootX;Position rootY;Dimension rootW;Dimension rootH;XtPointer clipperList;_XmDropSiteUpdateInfo updateInfo;};
struct _XmDropSiteManagerRec {ObjectPart object;XmDropSiteManagerPart dropManager;};
typedef struct __XmDropSiteUpdateInfoRec *_XmDropSiteUpdateInfo;
typedef struct __XmDropSiteUpdateInfoRec _XmDropSiteUpdateInfoRec;
struct _XmDropSiteVisualsRec {Pixel background;Pixel foreground;Pixel topShadowColor;Pixmap topShadowPixmap;Pixel bottomShadowColor;Pixmap bottomShadowPixmap;Dimension shadowThickness;Pixel highlightColor;Pixmap highlightPixmap;Dimension highlightThickness;Dimension borderWidth;};
struct _XmDropStartCallbackStruct {int reason;XEvent *event;Time timeStamp;unsigned __int8 operation;unsigned __int8 operations;unsigned __int8 dropSiteStatus;unsigned __int8 dropAction;Position x;Position y;Window window;Atom iccHandle;};
struct _XmDropTransferClassPart {XmDropTransferStartTransferProc start_drop_transfer;XmDropTransferAddTransferProc add_drop_transfer;XtPointer extension;};
struct _XmDropTransferClassRec {ObjectClassPart object_class;XmDropTransferClassPart dropTransfer_class;};
struct _XmDropTransferEntryRec {XtPointer client_data;Atom target;};
struct _XmDropTransferListRec {XmDropTransferEntry transfer_list;Cardinal num_transfers;};
struct _XmDropTransferPart {XmDropTransferEntry drop_transfers;Cardinal num_drop_transfers;Atom selection;Widget dragContext;Time timestamp;Boolean incremental;Window source_window;unsigned int tag;XtSelectionCallbackProc transfer_callback;unsigned __int8 transfer_status;Atom motif_drop_atom;XmDropTransferList drop_transfer_lists;Cardinal num_drop_transfer_lists;Cardinal cur_drop_transfer_list;Cardinal cur_xfer;Atom *cur_targets;XtPointer *cur_client_data;};
struct _XmDropTransferRec {ObjectPart object;XmDropTransferPart dropTransfer;};
struct _XmExcludedParentPaneRec {__int16 pane_list_size;Widget *pane;__int16 num_panes;};
struct _XmExtCache {char data[99];Boolean inuse;};
struct _XmExtClassPart {XmSyntheticResource *syn_resources;int num_syn_resources;XtPointer extension;};
struct _XmExtClassRec {ObjectClassPart object_class;XmExtClassPart ext_class;};
struct _XmExtRec {ObjectPart object;XmExtPart ext;};
struct _XmFileSelectionBoxClassRec {CoreClassPart core_class;CompositeClassPart composite_class;ConstraintClassPart constraint_class;XmManagerClassPart manager_class;XmBulletinBoardClassPart bulletin_board_class;XmSelectionBoxClassPart selection_box_class;XmFileSelectionBoxClassPart file_selection_box_class;};
struct _XmFileSelectionBoxConstraintPart {char unused;};
struct _XmFileSelectionBoxRec {CorePart core;CompositePart composite;ConstraintPart constraint;XmManagerPart manager;XmBulletinBoardPart bulletin_board;XmSelectionBoxPart selection_box;XmFileSelectionBoxPart file_selection_box;};
struct _XmFocusMovedCallbackStruct {int reason;XEvent *event;Boolean cont;Widget old_focus;Widget new_focus;unsigned __int8 focus_policy;};
struct _XmFormAttachmentRec {unsigned __int8 type;Widget w;int percent;int offset;int value;int tempValue;};
struct _XmFormClassPart {XtPointer extension;};
struct _XmFormClassRec {CoreClassPart core_class;CompositeClassPart composite_class;ConstraintClassPart constraint_class;XmManagerClassPart manager_class;XmBulletinBoardClassPart bulletin_board_class;XmFormClassPart form_class;};
struct _XmFormConstraintPart {XmFormAttachmentRec att[4];Widget next_sibling;Boolean sorted;Boolean resizable;Dimension preferred_width;Dimension preferred_height;};
struct _XmFormConstraintRec {XmManagerConstraintPart manager;XmFormConstraintPart form;};
struct _XmFormPart {Dimension horizontal_spacing;Dimension vertical_spacing;int fraction_base;Boolean rubber_positioning;Widget first_child;Boolean initial_width;Boolean initial_height;Boolean processing_constraints;};
struct _XmFormRec {CorePart core;CompositePart composite;ConstraintPart constraint;XmManagerPart manager;XmBulletinBoardPart bulletin_board;XmFormPart form;};
struct _XmFrameClassRec {CoreClassPart core_class;CompositeClassPart composite_class;ConstraintClassPart constraint_class;XmManagerClassPart manager_class;XmFrameClassPart frame_class;};
struct _XmFrameConstraintPart {int unused;unsigned __int8 child_type;unsigned __int8 child_h_alignment;Dimension child_h_spacing;unsigned __int8 child_v_alignment;};
struct _XmFrameConstraintRec {XmManagerConstraintPart manager;XmFrameConstraintPart frame;};
struct _XmFrameRec {CorePart core;CompositePart composite;ConstraintPart constraint;XmManagerPart manager;XmFramePart frame;};
struct _XmGadgetCache {struct _XmGadgetCache *next;struct _XmGadgetCache *prev;int ref_count;};
struct _XmGadgetCacheRef {XmGadgetCache cache;XtArgVal data;};
struct _XmGadgetClassExtRec {XtPointer next_extension;XrmQuark record_type;__int64 version;Cardinal record_size;XmWidgetBaselineProc widget_baseline;XmWidgetDisplayRectProc widget_display_rect;};
struct _XmGadgetClassPart {XtWidgetProc border_highlight;XtWidgetProc border_unhighlight;XtActionProc arm_and_activate;XmWidgetDispatchProc input_dispatch;XmVisualChangeProc visual_change;XmSyntheticResource *syn_resources;int num_syn_resources;XmCacheClassPartPtr cache_part;XtPointer extension;};
struct _XmGadgetClassRec {RectObjClassPart rect_class;XmGadgetClassPart gadget_class;};
struct _XmGadgetPart {Dimension shadow_thickness;Dimension highlight_thickness;XtCallbackList help_callback;XtPointer user_data;Boolean traversal_on;Boolean highlight_on_enter;Boolean have_traversal;unsigned __int8 unit_type;XmNavigationType navigation_type;Boolean highlight_drawn;Boolean highlighted;Boolean visible;Mask event_mask;unsigned __int8 dxm_layout_direction;};
struct _XmGadgetRec {ObjectPart object;RectObjPart rectangle;XmGadgetPart gadget;};
struct _XmGenericClassExtRec {XtPointer next_extension;XrmQuark record_type;__int64 version;Cardinal record_size;};
union _XmGeoMajorLayoutRec {XmGeoRowLayoutRec row;XmGeoColumnLayoutRec col;};
struct _XmGeoMatrixRec {Widget composite;Widget instigator;XtWidgetGeometry instig_request;XtWidgetGeometry parent_request;XtWidgetGeometry *in_layout;XmKidGeometry boxes;XmGeoMajorLayout layouts;Dimension margin_w;Dimension margin_h;Boolean stretch_boxes;Boolean uniform_border;Dimension border;Dimension max_major;Dimension boxes_minor;Dimension fill_minor;Dimension width;Dimension height;XmGeoExceptProc set_except;XmGeoExceptProc almost_except;XmGeoExceptProc no_geo_request;XtPointer extension;XmGeoExtDestructorProc ext_destructor;XmGeoArrangeProc arrange_boxes;unsigned __int8 major_order;};
typedef struct $F89A167C1B0B0C57C5FF404376C1C5C6 _XmHighlightData;
typedef struct $7DBE86895C9FAEA11C6FA571DFE5C5A7 _XmHighlightRec;
typedef struct $3AFF259FB5915F31DE3264913FDD68F1 _XmInsertSelect;
struct _XmKeyBindingRec {KeySym keysym;unsigned int modifiers;};
struct _XmKidGeometryRec {Widget kid;XtWidgetGeometry box;};
struct _XmLabelClassPart {XtWidgetProc setOverrideCallback;XmMenuProc menuProcs;String translations;XtPointer extension;};
struct _XmLabelClassRec {CoreClassPart core_class;XmPrimitiveClassPart primitive_class;XmLabelClassPart label_class;};
struct _XmLabelGCacheObjClassPart {int foo;};
struct _XmLabelGCacheObjClassRec {ObjectClassPart object_class;XmExtClassPart ext_class;XmLabelGCacheObjClassPart label_class_cache;};
struct _XmLabelGCacheObjPart {unsigned __int8 label_type;unsigned __int8 alignment;unsigned __int8 string_direction;Dimension margin_height;Dimension margin_width;Dimension margin_left;Dimension margin_right;Dimension margin_top;Dimension margin_bottom;Boolean recompute_size;Boolean skipCallback;unsigned __int8 menu_type;};
struct _XmLabelGCacheObjRec {ObjectPart object;XmExtPart ext;XmLabelGCacheObjPart label_cache;};
struct _XmLabelGadgetClassPart {XtWidgetProc setOverrideCallback;XmMenuProc menuProcs;XtPointer extension;};
struct _XmLabelGadgetClassRec {RectObjClassPart rect_class;XmGadgetClassPart gadget_class;XmLabelGadgetClassPart label_class;};
struct _XmLabelGadgetPart {_XmString _label;_XmString _acc_text;KeySym mnemonic;XmStringCharSet mnemonicCharset;char *accelerator;XmFontList font;Pixmap pixmap;Pixmap pixmap_insen;GC normal_GC;GC insensitive_GC;XRectangle TextRect;XRectangle acc_TextRect;XmLabelGCacheObjPart *cache;};
struct _XmLabelGadgetRec {ObjectPart object;RectObjPart rectangle;XmGadgetPart gadget;XmLabelGadgetPart label;};
struct _XmLabelPart {_XmString _label;_XmString _acc_text;KeySym mnemonic;XmStringCharSet mnemonicCharset;char *accelerator;unsigned __int8 label_type;unsigned __int8 alignment;unsigned __int8 string_direction;XmFontList font;Dimension margin_height;Dimension margin_width;Dimension margin_left;Dimension margin_right;Dimension margin_top;Dimension margin_bottom;Boolean recompute_size;Pixmap pixmap;Pixmap pixmap_insen;GC normal_GC;GC insensitive_GC;XRectangle TextRect;XRectangle acc_TextRect;Boolean skipCallback;unsigned __int8 menu_type;};
struct _XmLabelRec {CorePart core;XmPrimitivePart primitive;XmLabelPart label;};
struct _XmListClassPart {XtPointer extension;};
struct _XmListClassRec {CoreClassPart core_class;XmPrimitiveClassPart primitive_class;XmListClassPart list_class;};
struct _XmListDragConvertStruct {Widget w;XmString *strings;int num_strings;};
struct _XmListPart {Dimension spacing;__int16 ItemSpacing;Dimension margin_width;Dimension margin_height;XmFontList font;XmString *items;int itemCount;XmString *selectedItems;int *selectedIndices;int selectedItemCount;int visibleItemCount;int LastSetVizCount;unsigned __int8 SelectionPolicy;unsigned __int8 ScrollBarDisplayPolicy;unsigned __int8 SizePolicy;XmStringDirection StrDir;Boolean AutoSelect;Boolean DidSelection;Boolean FromSetSB;Boolean FromSetNewSize;Boolean AddMode;unsigned __int8 LeaveDir;unsigned __int8 HighlightThickness;int ClickInterval;XtIntervalId DragID;XtCallbackList SingleCallback;XtCallbackList MultipleCallback;XtCallbackList ExtendCallback;XtCallbackList BrowseCallback;XtCallbackList DefaultCallback;GC NormalGC;GC InverseGC;GC HighlightGC;Pixmap DashTile;ElementPtr *InternalList;int LastItem;int FontHeight;int top_position;char Event;int LastHLItem;int StartItem;int OldStartItem;int EndItem;int OldEndItem;Position BaseX;Position BaseY;Boolean MouseMoved;Boolean AppendInProgress;Boolean Traversing;Boolean KbdSelection;__int16 DownCount;Time DownTime;int CurrentKbdItem;unsigned __int8 SelectionType;GC InsensitiveGC;int vmin;int vmax;int vOrigin;int vExtent;int hmin;int hmax;int hOrigin;int hExtent;Dimension MaxWidth;Dimension CharWidth;Position XOrigin;XmScrollBarWidget hScrollBar;XmScrollBarWidget vScrollBar;XmScrolledWindowWidget Mom;Dimension MaxItemHeight;};
struct _XmListRec {CorePart core;XmPrimitivePart primitive;XmListPart list;};
struct _XmMainWindowClassRec {CoreClassPart core_class;CompositeClassPart composite_class;ConstraintClassPart constraint_class;XmManagerClassPart manager_class;XmScrolledWindowClassPart swindow_class;XmMainWindowClassPart mwindow_class;};
struct _XmMainWindowConstraintPart {char unused;};
struct _XmMainWindowRec {CorePart core;CompositePart composite;ConstraintPart constraint;XmManagerPart manager;XmScrolledWindowPart swindow;XmMainWindowPart mwindow;};
struct _XmManagerClassPart {String translations;XmSyntheticResource *syn_resources;int num_syn_resources;XmSyntheticResource *syn_constraint_resources;int num_syn_constraint_resources;XmParentProcessProc parent_process;XtPointer extension;};
struct _XmManagerClassRec {CoreClassPart core_class;CompositeClassPart composite_class;ConstraintClassPart constraint_class;XmManagerClassPart manager_class;};
struct _XmManagerConstraintPart {int unused;};
struct _XmManagerConstraintRec {XmManagerConstraintPart manager;};
struct _XmManagerPart {Pixel foreground;Dimension shadow_thickness;Pixel top_shadow_color;Pixmap top_shadow_pixmap;Pixel bottom_shadow_color;Pixmap bottom_shadow_pixmap;Pixel highlight_color;Pixmap highlight_pixmap;XtCallbackList help_callback;XtPointer user_data;Boolean traversal_on;unsigned __int8 unit_type;XmNavigationType navigation_type;Boolean event_handler_added;Widget active_child;Widget highlighted_widget;Widget accelerator_widget;Boolean has_focus;XmStringDirection string_direction;XmKeyboardData *keyboard_list;__int16 num_keyboard_entries;__int16 size_keyboard_list;XmGadget selected_gadget;XmGadget eligible_for_multi_button_event;GC background_GC;GC highlight_GC;GC top_shadow_GC;GC bottom_shadow_GC;Widget initial_focus;unsigned __int8 dxm_layout_direction;};
struct _XmManagerRec {CorePart core;CompositePart composite;ConstraintPart constraint;XmManagerPart manager;};
struct _XmMenuFocusRec {Widget oldWidget;Window oldFocus;int oldRevert;};
struct _XmMenuShellClassRec {CoreClassPart core_class;CompositeClassPart composite_class;ShellClassPart shell_class;OverrideShellClassPart override_shell_class;XmMenuShellClassPart menu_shell_class;};
struct _XmMenuShellRec {CorePart core;CompositePart composite;ShellPart shell;OverrideShellPart override;XmMenuShellPart menu_shell;};
struct _XmMenuShellWidgetRec {CorePart core;CompositePart composite;ShellPart shell;OverrideShellPart override;XmMenuShellPart menu_shell;};
struct _XmMenuStateRec {Widget RC_LastSelectToplevel;XmButtonEventStatusRec RC_ButtonEventStatus;XmReplayInfoRec RC_ReplayInfo;Widget RC_activeItem;XmMenuFocusRec RC_menuFocus;Boolean RC_allowAcceleratedInsensitiveUnmanagedMenuItems;Time MS_LastManagedMenuTime;Boolean MU_InDragMode;Widget MU_CurrentMenuChild;Boolean MU_InPMMode;};
struct _XmMessageBoxClassRec {CoreClassPart core_class;CompositeClassPart composite_class;ConstraintClassPart constraint_class;XmManagerClassPart manager_class;XmBulletinBoardClassPart bulletin_board_class;XmMessageBoxClassPart message_box_class;};
struct _XmMessageBoxConstraintPart {char unused;};
struct _XmMessageBoxRec {CorePart core;CompositePart composite;ConstraintPart constraint;XmManagerPart manager;XmBulletinBoardPart bulletin_board;XmMessageBoxPart message_box;};
struct _XmModalDataRec {Widget wid;XmVendorShellExtObject ve;XmVendorShellExtObject grabber;Boolean exclusive;Boolean springLoaded;};
struct _XmObjectClassExtRec {XtPointer next_extension;XrmQuark record_type;__int64 version;Cardinal record_size;};
struct _XmOperationChangedCallbackStruct {int reason;XEvent *event;Time timeStamp;unsigned __int8 operation;unsigned __int8 operations;unsigned __int8 dropSiteStatus;};
struct _XmPanedWindowClassPart {XtPointer extension;};
struct _XmPanedWindowClassRec {CoreClassPart core_class;CompositeClassPart composite_class;ConstraintClassPart constraint_class;XmManagerClassPart manager_class;XmPanedWindowClassPart paned_window_class;};
struct _XmPanedWindowConstraintPart {int position;int dheight;Position dy;Position olddy;Dimension min;Dimension max;Boolean isPane;Boolean allow_resize;Boolean skip_adjust;Widget sash;Widget separator;__int16 position_index;};
struct _XmPanedWindowConstraintRec {XmManagerConstraintPart manager;XmPanedWindowConstraintPart panedw;};
struct _XmPanedWindowRec {CorePart core;CompositePart composite;ConstraintPart constraint;XmManagerPart manager;XmPanedWindowPart paned_window;};
struct _XmPartResource {String resource_name;String resource_class;String resource_type;Cardinal resource_size;Cardinal resource_offset;String default_type;XtPointer default_addr;};
struct _XmPrimitiveClassExtRec {XtPointer next_extension;XrmQuark record_type;__int64 version;Cardinal record_size;XmWidgetBaselineProc widget_baseline;XmWidgetDisplayRectProc widget_display_rect;XmWidgetMarginsProc widget_margins;};
struct _XmPrimitiveClassPart {XtWidgetProc border_highlight;XtWidgetProc border_unhighlight;String translations;XtActionProc arm_and_activate;XmSyntheticResource *syn_resources;int num_syn_resources;XtPointer extension;};
struct _XmPrimitiveClassRec {CoreClassPart core_class;XmPrimitiveClassPart primitive_class;};
struct _XmPrimitivePart {Pixel foreground;Dimension shadow_thickness;Pixel top_shadow_color;Pixmap top_shadow_pixmap;Pixel bottom_shadow_color;Pixmap bottom_shadow_pixmap;Dimension highlight_thickness;Pixel highlight_color;Pixmap highlight_pixmap;XtCallbackList help_callback;XtPointer user_data;Boolean traversal_on;Boolean highlight_on_enter;Boolean have_traversal;unsigned __int8 unit_type;XmNavigationType navigation_type;Boolean highlight_drawn;Boolean highlighted;GC highlight_GC;GC top_shadow_GC;GC bottom_shadow_GC;unsigned __int8 dxm_layout_direction;};
struct _XmPrimitiveRec {CorePart core;XmPrimitivePart primitive;};
struct _XmProtocolClassPart {XtPointer extension;};
struct _XmProtocolClassRec {ObjectClassPart object_class;XmExtClassPart ext_class;XmProtocolClassPart protocol_class;};
struct _XmProtocolMgrRec {Atom property;XmProtocolList protocols;Cardinal num_protocols;Cardinal max_protocols;};
struct _XmProtocolPart {XtCallbackRec pre_hook;XtCallbackRec post_hook;XtCallbackList callbacks;Atom atom;Boolean active;};
struct _XmProtocolRec {ObjectPart object;XmExtPart ext;XmProtocolPart protocol;};
struct _XmPushButtonClassPart {XtPointer extension;};
struct _XmPushButtonClassRec {CoreClassPart core_class;XmPrimitiveClassPart primitive_class;XmLabelClassPart label_class;XmPushButtonClassPart pushbutton_class;};
struct _XmPushButtonGCacheObjClassPart {int foo;};
struct _XmPushButtonGCacheObjClassRec {ObjectClassPart object_class;XmExtClassPart ext_class;XmLabelGCacheObjClassPart label_class_cache;XmPushButtonGCacheObjClassPart pushbutton_class_cache;};
struct _XmPushButtonGCacheObjPart {Boolean fill_on_arm;Pixel arm_color;Pixmap arm_pixmap;Pixmap unarm_pixmap;unsigned __int8 multiClick;Dimension default_button_shadow_thickness;GC fill_gc;GC background_gc;XtIntervalId timer;};
struct _XmPushButtonGCacheObjRec {ObjectPart object;XmExtPart ext;XmLabelGCacheObjPart label_cache;XmPushButtonGCacheObjPart pushbutton_cache;};
struct _XmPushButtonGadgetClassPart {XtPointer extension;};
struct _XmPushButtonGadgetClassRec {RectObjClassPart rect_class;XmGadgetClassPart gadget_class;XmLabelGadgetClassPart label_class;XmPushButtonGadgetClassPart pushbutton_class;};
struct _XmPushButtonGadgetPart {XtCallbackList activate_callback;XtCallbackList arm_callback;XtCallbackList disarm_callback;Dimension show_as_default;Boolean armed;int click_count;Boolean compatible;XmPushButtonGCacheObjPart *cache;};
struct _XmPushButtonGadgetRec {ObjectPart object;RectObjPart rectangle;XmGadgetPart gadget;XmLabelGadgetPart label;XmPushButtonGadgetPart pushbutton;};
struct _XmPushButtonPart {Boolean fill_on_arm;Dimension show_as_default;Pixel arm_color;Pixmap arm_pixmap;XtCallbackList activate_callback;XtCallbackList arm_callback;XtCallbackList disarm_callback;Boolean armed;Pixmap unarm_pixmap;GC fill_gc;GC background_gc;XtIntervalId timer;unsigned __int8 multiClick;int click_count;Time armTimeStamp;Boolean compatible;Dimension default_button_shadow_thickness;};
struct _XmPushButtonRec {CorePart core;XmPrimitivePart primitive;XmLabelPart label;XmPushButtonPart pushbutton;};
struct _XmRCKidGeometryRec {Widget kid;XtWidgetGeometry box;Dimension margin_top;Dimension margin_bottom;Dimension baseline;};
struct _XmRegion {__int64 size;__int64 numRects;XmRegionBox *rects;XmRegionBox extents;};
struct _XmReplayInfoRec {Time time;Widget toplevel_menu;};
struct _XmRowColumnClassPart {XmMenuProc menuProcedures;XtActionProc armAndActivate;XmMenuTraversalProc traversalHandler;XtPointer extension;};
struct _XmRowColumnClassRec {CoreClassPart core_class;CompositeClassPart composite_class;ConstraintClassPart constraint_class;XmManagerClassPart manager_class;XmRowColumnClassPart row_column_class;};
struct _XmRowColumnConstraintPart {Boolean was_managed;Dimension margin_top;Dimension margin_bottom;Dimension baseline;__int16 position_index;};
struct _XmRowColumnConstraintRec {XmManagerConstraintPart manager;XmRowColumnConstraintPart row_column;};
struct _XmRowColumnPart {Dimension margin_height;Dimension margin_width;Dimension spacing;Dimension entry_border;Widget help_pushbutton;Widget cascadeBtn;XmString option_label;Widget option_submenu;XmRCKidGeometry boxes;WidgetClass entry_class;XtCallbackList entry_callback;XtCallbackList map_callback;XtCallbackList unmap_callback;Widget memory_subwidget;__int16 num_columns;String menuPost;unsigned int postButton;int postEventType;unsigned int postModifiers;String menu_accelerator;KeySym mnemonic;XmStringCharSet mnemonicCharSet;unsigned __int8 entry_alignment;unsigned __int8 packing;unsigned __int8 type;unsigned __int8 orientation;Boolean armed;Boolean adjust_margin;Boolean adjust_last;Boolean do_alignment;Boolean radio;Boolean radio_one;Boolean homogeneous;Boolean resize_width;Boolean resize_height;Boolean popup_enabled;Dimension old_width;Dimension old_height;Dimension old_shadow_thickness;Widget *postFromList;int postFromCount;int postFromListSize;Widget lastSelectToplevel;Widget popupPosted;unsigned __int8 oldFocusPolicy;unsigned __int8 TearOffModel;Widget ParentShell;Widget tear_off_control;Boolean to_state;XtCallbackList tear_off_activated_callback;XtCallbackList tear_off_deactivated_callback;Widget tear_off_lastSelectToplevel;Widget tear_off_focus_item;unsigned __int8 entry_vertical_alignment;unsigned __int8 popup_menu_click;XtIntervalId popup_timeout_timer;};
struct _XmRowColumnRec {CorePart core;CompositePart composite;ConstraintPart constraint;XmManagerPart manager;XmRowColumnPart row_column;};
struct _XmRowColumnWidgetRec {CorePart core;CompositePart composite;ConstraintPart constraint;XmManagerPart manager;XmRowColumnPart row_column;};
struct _XmSashClassRec {CoreClassPart core_class;XmPrimitiveClassPart primitive_class;XmSashClassPart sash_class;};
struct _XmSashRec {CorePart core;XmPrimitivePart primitive;XmSashPart sash;};
struct _XmScaleClassRec {CoreClassPart core_class;CompositeClassPart composite_class;ConstraintClassPart constraint_class;XmManagerClassPart manager_class;XmScaleClassPart scale_class;};
struct _XmScaleConstraintPart {char unused;};
struct _XmScaleRec {CorePart core;CompositePart composite;ConstraintPart constraint;XmManagerPart manager;XmScalePart scale;};
struct _XmScratchPixmapRec {XmScratchPixmap next;Pixmap pixmap;Cardinal depth;Dimension width;Dimension height;Boolean inUse;};
struct _XmScreenClassPart {XtPointer extension;};
struct _XmScreenClassRec {CoreClassPart core_class;XmDesktopClassPart desktop_class;XmScreenClassPart screen_class;};
struct _XmScreenInfo {XtPointer menu_state;Boolean destroyCallbackAdded;};
struct _XmScreenRec {CorePart core;XmDesktopPart desktop;XmScreenPart screen;};
struct _XmScrollBarClassPart {XtPointer extension;};
struct _XmScrollBarClassRec {CoreClassPart core_class;XmPrimitiveClassPart primitive_class;XmScrollBarClassPart scrollBar_class;};
struct _XmScrollBarPart {int value;int minimum;int maximum;int slider_size;unsigned __int8 orientation;unsigned __int8 processing_direction;Boolean show_arrows;int increment;int page_increment;int initial_delay;int repeat_delay;XtCallbackList value_changed_callback;XtCallbackList increment_callback;XtCallbackList decrement_callback;XtCallbackList page_increment_callback;XtCallbackList page_decrement_callback;XtCallbackList to_top_callback;XtCallbackList to_bottom_callback;XtCallbackList drag_callback;GC unhighlight_GC;GC foreground_GC;Pixel trough_color;Drawable pixmap;Boolean sliding_on;Boolean etched_slider;int saved_value;unsigned __int8 flags;unsigned __int8 change_type;XtIntervalId timer;__int16 initial_x;__int16 initial_y;__int16 separation_x;__int16 separation_y;__int16 slider_x;__int16 slider_y;__int16 slider_width;__int16 slider_height;__int16 slider_area_x;__int16 slider_area_y;__int16 slider_area_width;__int16 slider_area_height;__int16 arrow1_x;__int16 arrow1_y;unsigned __int8 arrow1_orientation;Boolean arrow1_selected;__int16 arrow2_x;__int16 arrow2_y;unsigned __int8 arrow2_orientation;Boolean arrow2_selected;__int16 arrow_width;__int16 arrow_height;__int16 arrow1_top_count;__int16 arrow1_cent_count;__int16 arrow1_bot_count;XRectangle *arrow1_top;XRectangle *arrow1_cent;XRectangle *arrow1_bot;__int16 arrow2_top_count;__int16 arrow2_cent_count;__int16 arrow2_bot_count;XRectangle *arrow2_top;XRectangle *arrow2_cent;XRectangle *arrow2_bot;GC unavailable_GC;};
struct _XmScrollBarRec {CorePart core;XmPrimitivePart primitive;XmScrollBarPart scrollBar;};
struct _XmScrolledWindowClassRec {CoreClassPart core_class;CompositeClassPart composite_class;ConstraintClassPart constraint_class;XmManagerClassPart manager_class;XmScrolledWindowClassPart swindow_class;};
struct _XmScrolledWindowConstraintPart {unsigned __int8 child_type;};
struct _XmScrolledWindowRec {CorePart core;CompositePart composite;ConstraintPart constraint;XmManagerPart manager;XmScrolledWindowPart swindow;};
struct _XmSecondaryResourceDataRec {XmResourceBaseProc base_proc;XtPointer client_data;String name;String res_class;XtResourceList resources;Cardinal num_resources;};
struct _XmSelectionBoxClassRec {CoreClassPart core_class;CompositeClassPart composite_class;ConstraintClassPart constraint_class;XmManagerClassPart manager_class;XmBulletinBoardClassPart bulletin_board_class;XmSelectionBoxClassPart selection_box_class;};
struct _XmSelectionBoxConstraintPart {char unused;};
struct _XmSelectionBoxRec {CorePart core;CompositePart composite;ConstraintPart constraint;XmManagerPart manager;XmBulletinBoardPart bulletin_board;XmSelectionBoxPart selection_box;};
struct _XmSeparatorClassPart {XtPointer extension;};
struct _XmSeparatorClassRec {CoreClassPart core_class;XmPrimitiveClassPart primitive_class;XmSeparatorClassPart separator_class;};
struct _XmSeparatorGCacheObjClassPart {int foo;};
struct _XmSeparatorGCacheObjClassRec {ObjectClassPart object_class;XmExtClassPart ext_class;XmSeparatorGCacheObjClassPart separator_class_cache;};
struct _XmSeparatorGCacheObjPart {Dimension margin;unsigned __int8 orientation;unsigned __int8 separator_type;GC separator_GC;};
struct _XmSeparatorGCacheObjRec {ObjectPart object;XmExtPart ext;XmSeparatorGCacheObjPart separator_cache;};
struct _XmSeparatorGadgetClassPart {XtPointer extension;};
struct _XmSeparatorGadgetClassRec {RectObjClassPart rect_class;XmGadgetClassPart gadget_class;XmSeparatorGadgetClassPart separator_class;};
struct _XmSeparatorGadgetPart {XmSeparatorGCacheObjPart *cache;};
struct _XmSeparatorGadgetRec {ObjectPart object;RectObjPart rectangle;XmGadgetPart gadget;XmSeparatorGadgetPart separator;};
struct _XmSeparatorPart {Dimension margin;unsigned __int8 orientation;unsigned __int8 separator_type;GC separator_GC;};
struct _XmSeparatorRec {CorePart core;XmPrimitivePart primitive;XmSeparatorPart separator;};
struct _XmShellExtClassPart {XtEventHandler structureNotifyHandler;XtPointer extension;};
struct _XmShellExtClassRec {ObjectClassPart object_class;XmExtClassPart ext_class;XmDesktopClassPart desktop_class;XmShellExtClassPart shell_class;};
struct _XmShellExtRec {ObjectPart object;XmExtPart ext;XmDesktopPart desktop;XmShellExtPart shell;};
struct _XmSimpleMenuRec {int count;int post_from_button;XtCallbackProc callback;XmStringTable label_string;String *accelerator;XmStringTable accelerator_text;XmKeySymTable mnemonic;XmStringCharSetTable mnemonic_charset;XmButtonTypeTable button_type;int button_set;XmString option_label;KeySym option_mnemonic;};
struct _XmSourceDataRec {XmTextSource source;XmTextWidget *widgets;XmTextPosition left;XmTextPosition right;char *ptr;char *value;char *gap_start;char *gap_end;char *PSWC_NWLN;int length;int maxlength;int old_length;int numwidgets;int maxallowed;Time prim_time;Boolean hasselection;Boolean editable;};
typedef struct __XmStringRec *_XmString;
typedef struct __XmStringContextRec *_XmStringContext;
struct _XmSyntheticResource {String resource_name;Cardinal resource_size;Cardinal resource_offset;XmExportProc export_proc;XmImportProc import_proc;};
struct _XmTearOffButtonClassPart {String translations;};
struct _XmTearOffButtonClassRec {CoreClassPart core_class;XmPrimitiveClassPart primitive_class;XmLabelClassPart label_class;XmPushButtonClassPart pushbutton_class;XmTearOffButtonClassPart tearoffbutton_class;};
struct _XmTearOffButtonRec {CorePart core;XmPrimitivePart primitive;XmLabelPart label;XmPushButtonPart pushbutton;XmTearOffButtonPart tear_off_button;};
typedef struct $468E3F20F7462D23787414BB7174F8B3 _XmTextActionRec;
struct _XmTextClassRec {CoreClassPart core_class;XmPrimitiveClassPart primitive_class;XmTextClassPart text_class;};
typedef struct $25D0D8CCEC98ADDB4521E2BA148959A7 _XmTextDropTransferRec;
struct _XmTextFieldClassPart {XtPointer extension;};
struct _XmTextFieldClassRec {CoreClassPart core_class;XmPrimitiveClassPart primitive_class;XmTextFieldClassPart text_class;};
struct _XmTextFieldPart {XtCallbackList activate_callback;XtCallbackList focus_callback;XtCallbackList losing_focus_callback;XtCallbackList modify_verify_callback;XtCallbackList wcs_modify_verify_callback;XtCallbackList motion_verify_callback;XtCallbackList gain_primary_callback;XtCallbackList lose_primary_callback;XtCallbackList value_changed_callback;char *value;wchar_t *wc_value;XmFontList font_list;XFontStruct *font;XmTextScanType *selection_array;_XmHighlightData highlight;GC gc;GC image_gc;GC save_gc;Pixmap ibeam_off;Pixmap add_mode_cursor;Pixmap cursor;Pixmap putback;Pixmap stipple_tile;Pixmap image_clip;XmTextPosition cursor_position;XmTextPosition new_h_offset;XmTextPosition h_offset;XmTextPosition orig_left;XmTextPosition orig_right;XmTextPosition prim_pos_left;XmTextPosition prim_pos_right;XmTextPosition prim_anchor;XmTextPosition sec_pos_left;XmTextPosition sec_pos_right;XmTextPosition sec_anchor;XmTextPosition stuff_pos;Position select_pos_x;Time prim_time;Time dest_time;Time sec_time;Time last_time;XtIntervalId timer_id;XtIntervalId select_id;int blink_rate;int selection_array_count;int threshold;int size_allocd;int string_length;int cursor_height;int cursor_width;int sarray_index;int max_length;int max_char_size;__int16 columns;Dimension margin_width;Dimension margin_height;Dimension average_char_width;Dimension margin_top;Dimension margin_bottom;Dimension font_ascent;Dimension font_descent;Boolean resize_width;Boolean pending_delete;Boolean editable;Boolean verify_bell;Boolean cursor_position_visible;Boolean traversed;Boolean add_mode;Boolean has_focus;Boolean blink_on;__int16 cursor_on;Boolean refresh_ibeam_off;Boolean have_inverted_image_gc;Boolean has_primary;Boolean has_secondary;Boolean has_destination;Boolean sec_drag;Boolean selection_move;Boolean pending_off;Boolean fontlist_created;Boolean has_rect;Boolean do_drop;Boolean cancel;Boolean extending;Boolean sec_extending;Boolean changed_visible;Boolean have_fontset;Boolean in_setvalues;Boolean do_resize;Boolean redisplay;Boolean overstrike;Boolean sel_start;XtPointer extension;OnTheSpotData onthespot;};
struct _XmTextFieldRec {CorePart core;XmPrimitivePart primitive;XmTextFieldPart text;};
typedef struct $4425769459ED4D02F39F849992AF4AF1 _XmTextInsertPair;
struct _XmTextLineTableRec {unsigned int virt_line;};
struct _XmTextPart {XmTextSource source;XtCallbackList activate_callback;XtCallbackList focus_callback;XtCallbackList losing_focus_callback;XtCallbackList value_changed_callback;XtCallbackList modify_verify_callback;XtCallbackList wcs_modify_verify_callback;XtCallbackList motion_verify_callback;XtCallbackList gain_primary_callback;XtCallbackList lose_primary_callback;char *value;wchar_t *wc_value;Dimension margin_height;Dimension margin_width;Position cursor_position_x;OutputCreateProc output_create;InputCreateProc input_create;XmTextPosition top_character;XmTextPosition bottom_position;XmTextPosition cursor_position;int max_length;int edit_mode;Boolean auto_show_cursor_position;Boolean editable;Boolean verify_bell;Boolean add_mode;Boolean traversed;Boolean in_redisplay;Boolean needs_redisplay;Boolean in_refigure_lines;Boolean needs_refigure_lines;Boolean in_setvalues;Boolean in_resize;Boolean in_expose;Boolean highlight_changed;Boolean pendingoff;char char_size;OnOrOff on_or_off;Output output;Input input;XmTextPosition first_position;XmTextPosition last_position;XmTextPosition forget_past;XmTextPosition force_display;XmTextPosition new_top;XmTextPosition last_top_char;XmTextPosition dest_position;int disable_depth;int pending_scroll;int total_lines;int top_line;int vsbar_scrolling;Cardinal number_lines;Cardinal maximum_lines;Line line;Ranges repaint;_XmHighlightData highlight;_XmHighlightData old_highlight;Widget inner_widget;XmTextLineTable line_table;unsigned int table_size;unsigned int table_index;OnTheSpotDataTW onthespot;};
typedef struct $AA1A19B97C4266B2BC3AEB2743D64DB3 _XmTextPrimSelect;
struct _XmTextRec {CorePart core;XmPrimitivePart primitive;XmTextPart text;};
struct _XmTextSourceRec {struct _XmSourceDataRec *data;AddWidgetProc AddWidget;CountLinesProc CountLines;RemoveWidgetProc RemoveWidget;ReadProc ReadSource;ReplaceProc Replace;ScanProc Scan;GetSelectionProc GetSelection;SetSelectionProc SetSelection;};
struct _XmToggleButtonClassPart {XtPointer extension;};
struct _XmToggleButtonClassRec {CoreClassPart core_class;XmPrimitiveClassPart primitive_class;XmLabelClassPart label_class;XmToggleButtonClassPart toggle_class;};
struct _XmToggleButtonGCacheObjClassPart {int foo;};
struct _XmToggleButtonGCacheObjClassRec {ObjectClassPart object_class;XmExtClassPart ext_class;XmLabelGCacheObjClassPart label_class_cache;XmToggleButtonGCacheObjClassPart toggle_class_cache;};
struct _XmToggleButtonGCacheObjPart {unsigned __int8 ind_type;Boolean visible;Dimension spacing;Dimension indicator_dim;Pixmap on_pixmap;Pixmap insen_pixmap;Boolean ind_on;Boolean fill_on_select;Pixel select_color;GC select_GC;GC background_gc;};
struct _XmToggleButtonGCacheObjRec {ObjectPart object;XmExtPart ext;XmLabelGCacheObjPart label_cache;XmToggleButtonGCacheObjPart toggle_cache;};
struct _XmToggleButtonGadgetClassPart {XtPointer extension;};
struct _XmToggleButtonGadgetClassRec {RectObjClassPart rect_class;XmGadgetClassPart gadget_class;XmLabelGadgetClassPart label_class;XmToggleButtonGadgetClassPart toggle_class;};
struct _XmToggleButtonGadgetPart {Boolean indicator_set;Boolean set;Boolean visual_set;Boolean Armed;XtCallbackList value_changed_CB;XtCallbackList arm_CB;XtCallbackList disarm_CB;XmToggleButtonGCacheObjPart *cache;};
struct _XmToggleButtonGadgetRec {ObjectPart object;RectObjPart rectangle;XmGadgetPart gadget;XmLabelGadgetPart label;XmToggleButtonGadgetPart toggle;};
struct _XmToggleButtonPart {unsigned __int8 ind_type;Boolean visible;Dimension spacing;Dimension indicator_dim;Boolean indicator_set;Pixmap on_pixmap;Pixmap insen_pixmap;Boolean set;Boolean visual_set;Boolean ind_on;Boolean fill_on_select;Pixel select_color;GC select_GC;GC background_gc;XtCallbackList value_changed_CB;XtCallbackList arm_CB;XtCallbackList disarm_CB;Boolean Armed;};
struct _XmToggleButtonRec {CorePart core;XmPrimitivePart primitive;XmLabelPart label;XmToggleButtonPart toggle;};
struct _XmTopLevelEnterCallbackStruct {int reason;XEvent *event;Time timeStamp;Screen *screen;Window window;Position x;Position y;unsigned __int8 dragProtocolStyle;Atom iccHandle;};
struct _XmTopLevelLeaveCallbackStruct {int reason;XEvent *event;Time timeStamp;Screen *screen;Window window;};
struct _XmTranslRec {XtTranslations translations;struct _XmTranslRec *next;};
struct _XmTraverseObscuredCallbackStruct {int reason;XEvent *event;Widget traversal_destination;XmTraversalDirection direction;};
struct _XmVendorShellExtClassPart {XtCallbackProc delete_window_handler;XtCallbackProc offset_handler;XtPointer extension;};
struct _XmVendorShellExtClassRec {ObjectClassPart object_class;XmExtClassPart ext_class;XmDesktopClassPart desktop_class;XmShellExtClassPart shell_class;XmVendorShellExtClassPart vendor_class;};
struct _XmVendorShellExtRec {ObjectPart object;XmExtPart ext;XmDesktopPart desktop;XmShellExtPart shell;XmVendorShellExtPart vendor;};
struct _XmVirtualKeysymRec {String name;KeySym keysym;};
struct _XmWidgetExtDataRec {Widget widget;Widget reqWidget;Widget oldWidget;};
struct _XmWorldClassPart {XtPointer extension;};
struct _XmWorldClassRec {ObjectClassPart object_class;XmExtClassPart ext_class;XmDesktopClassPart desktop_class;XmWorldClassPart world_class;};
struct _XmWorldRec {ObjectPart object;XmExtPart ext;XmDesktopPart desktop;XmWorldPart world;};
struct _XmWrapperDataRec {struct _XmWrapperDataRec *next;WidgetClass widgetClass;XtInitProc initializeLeaf;XtSetValuesFunc setValuesLeaf;XtArgsProc getValuesLeaf;XtRealizeProc realize;XtWidgetClassProc classPartInitLeaf;XtWidgetProc resize;XtGeometryHandler geometry_manager;Cardinal init_depth;};
struct _XmuCvtCache {struct _XmuCvtCache::$A3950F211C81DD2EE7118AB39C575077 string_to_bitmap;};
struct _XmuCvtCache::$A3950F211C81DD2EE7118AB39C575077 {char **bitmapFilePath;};
struct _XmuDisplayQueue {int nentries;XmuDisplayQueueEntry *head;XmuDisplayQueueEntry *tail;XmuCloseDisplayQueueProc closefunc;XmuFreeDisplayQueueProc freefunc;XPointer data;};
struct _XmuDisplayQueueEntry {struct _XmuDisplayQueueEntry *prev;struct _XmuDisplayQueueEntry *next;Display *display;CloseHook closehook;XPointer data;};
struct _XmuWidgetNode {char *label;WidgetClass *widget_class_ptr;struct _XmuWidgetNode *superclass;struct _XmuWidgetNode *children;struct _XmuWidgetNode *siblings;char *lowered_label;char *lowered_classname;int have_resources;XtResourceList resources;struct _XmuWidgetNode **resourcewn;Cardinal nresources;XtResourceList constraints;struct _XmuWidgetNode **constraintwn;Cardinal nconstraints;XtPointer data;};
struct _XrmHashBucketRec;
struct _XtActionsRec {String string;XtActionProc proc;};
struct _XtCallbackRec {XtCallbackProc callback;XtPointer closure;};
struct _XtCheckpointTokenRec {int save_type;int interact_style;Boolean shutdown;Boolean fast;Boolean cancel_shutdown;int phase;int interact_dialog_type;Boolean request_cancel;Boolean request_next_phase;Boolean save_success;int type;Widget widget;};
struct _XtResource {String resource_name;String resource_class;String resource_type;Cardinal resource_size;Cardinal resource_offset;String default_type;XtPointer default_addr;};
struct _XtStateRec;
struct _XtTMRec {XtTranslations translations;XtBoundActions proc_table;struct _XtStateRec *current_state;unsigned __int64 lastEventTime;};
struct __Oiovec {caddr_t iov_base;int iov_len;};
struct __Ouio {struct iovec *uio_iov;off_t uio_offset;int uio_iovcnt;int uio_resid;enum uio_seg uio_segflg;enum uio_rw uio_rw;int uio_fmode;daddr_t uio_limit;};
struct __XmDropSiteUpdateInfoRec {XmDropSiteManagerObject dsm;Widget refWidget;struct __XmDropSiteUpdateInfoRec *next;};
struct __auth {struct opaque_auth ah_cred;struct opaque_auth ah_verf;des_block ah_key;struct __auth::auth_ops *ah_ops;caddr_t ah_private;};
struct __auth::auth_ops {void (*ah_nextverf)(struct __auth *);int (*ah_marshal)(struct __auth *, XDR *);int (*ah_validate)(struct __auth *, struct opaque_auth *);int (*ah_refresh)(struct __auth *);void (*ah_destroy)(struct __auth *);};
typedef char *__caddr_t;
struct __catalog_descriptor {char *_mem;char *_name;char *_lc_message;char *_nlspath;struct _header *_hd;struct _catset *_set;struct _attrib *_setattrib;void *_iconv;char *_symstr;char *_midfmt;int _fd;int _catlen;int _setmax;int _count;int _magic;int _n_sets;int _sets_expanded;int _midflag;};
struct __client {AUTH *cl_auth;struct __client::clnt_ops *cl_ops;caddr_t cl_private;};
struct __client::clnt_ops {enum clnt_stat (*cl_call)(struct __client *, u_long, xdrproc_t, char *, xdrproc_t, char *, struct timeval);void (*cl_abort)(void);void (*cl_geterr)(struct __client *, struct rpc_err *);int (*cl_freeres)(struct __client *, xdrproc_t, char *);void (*cl_destroy)(struct __client *);int (*cl_control)(struct __client *, int, char *);};
struct __db {DBTYPE type;int (*close)(struct __db *);int (*del)(const struct __db *, const DBT *, uint_t);int (*get)(const struct __db *, const DBT *, DBT *, uint_t);int (*put)(const struct __db *, DBT *, const DBT *, uint_t);int (*seq)(const struct __db *, DBT *, DBT *, uint_t);int (*sync)(const struct __db *, uint_t);void *internal;int (*fd)(const struct __db *);};
struct __iconv_rec {_LC_object_t hdr;iconv_t (*open)(const char *, const char *);size_t (*exec)(iconv_t, char **, size_t *, char **, size_t *);void (*close)(iconv_t);};
struct __inpcb_hashbucket {struct inpcb *inphb_first;struct inpcb *inphb_last;int inphb_delack;int inphb_slowtimerchange;int inphb_slowtimerlastrunat;int inphb_slowtimernextrun;};
enum __lc_type_id_t {_LC_CAR = 0x1,_LC_LOCALE = 0x2,_LC_CHARMAP = 0x3,_LC_CTYPE = 0x4,_LC_COLLATE = 0x5,_LC_NUMERIC = 0x6,_LC_MONETARY = 0x7,_LC_TIME = 0x8,_LC_RESP = 0x9,};
typedef int __nl_item;
enum __ns_class {ns_c_in = 0x1,ns_c_chaos = 0x3,ns_c_hs = 0x4,ns_c_none = 0xFE,ns_c_any = 0xFF,ns_c_max = 0x10000,};
enum __ns_flag {ns_f_qr = 0x0,ns_f_opcode = 0x1,ns_f_aa = 0x2,ns_f_tc = 0x3,ns_f_rd = 0x4,ns_f_ra = 0x5,ns_f_z = 0x6,ns_f_ad = 0x7,ns_f_cd = 0x8,ns_f_rcode = 0x9,ns_f_max = 0xA,};
struct __ns_msg {const u_char *_msg;const u_char *_eom;u_short _id;u_short _flags;u_short _counts[4];const u_char *_sections[4];ns_sect _sect;int _rrnum;const u_char *_ptr;};
enum __ns_opcode {ns_o_query = 0x0,ns_o_iquery = 0x1,ns_o_status = 0x2,ns_o_notify = 0x4,ns_o_update = 0x5,ns_o_max = 0x6,};
enum __ns_rcode {ns_r_noerror = 0x0,ns_r_formerr = 0x1,ns_r_servfail = 0x2,ns_r_nxdomain = 0x3,ns_r_notimpl = 0x4,ns_r_refused = 0x5,ns_r_yxdomain = 0x6,ns_r_yxrrset = 0x7,ns_r_nxrrset = 0x8,ns_r_notauth = 0x9,ns_r_notzone = 0xA,ns_r_max = 0xB,};
struct __ns_rr {char name[1025];u_short type;u_short rr_class;u_int ttl;u_short rdlength;const u_char *rdata;};
enum __ns_sect {ns_s_qd = 0x0,ns_s_zn = 0x0,ns_s_an = 0x1,ns_s_pr = 0x1,ns_s_ns = 0x2,ns_s_ud = 0x2,ns_s_ar = 0x3,ns_s_max = 0x4,};
enum __ns_type {ns_t_a = 0x1,ns_t_ns = 0x2,ns_t_md = 0x3,ns_t_mf = 0x4,ns_t_cname = 0x5,ns_t_soa = 0x6,ns_t_mb = 0x7,ns_t_mg = 0x8,ns_t_mr = 0x9,ns_t_null = 0xA,ns_t_wks = 0xB,ns_t_ptr = 0xC,ns_t_hinfo = 0xD,ns_t_minfo = 0xE,ns_t_mx = 0xF,ns_t_txt = 0x10,ns_t_rp = 0x11,ns_t_afsdb = 0x12,ns_t_x25 = 0x13,ns_t_isdn = 0x14,ns_t_rt = 0x15,ns_t_nsap = 0x16,ns_t_nsap_ptr = 0x17,ns_t_sig = 0x18,ns_t_key = 0x19,ns_t_px = 0x1A,ns_t_gpos = 0x1B,ns_t_aaaa = 0x1C,ns_t_loc = 0x1D,ns_t_nxt = 0x1E,ns_t_eid = 0x1F,ns_t_nimloc = 0x20,ns_t_srv = 0x21,ns_t_atma = 0x22,ns_t_naptr = 0x23,ns_t_ixfr = 0xFB,ns_t_axfr = 0xFC,ns_t_mailb = 0xFD,ns_t_maila = 0xFE,ns_t_any = 0xFF,ns_t_max = 0x10000,};
enum __ns_update_operation {ns_uop_delete = 0x0,ns_uop_add = 0x1,ns_uop_max = 0x2,};
typedef void *__pthreadConstructorFunc_t(pthread_key_t, pthread_t);
typedef __pthreadConstructorFunc_t *__pthreadConstructor_t;
typedef void __pthreadDestructorFunc_t(void *);
typedef __pthreadDestructorFunc_t *__pthreadDestructor_t;
typedef void **__pthreadExcAddr_p;
typedef void *__pthreadExcAddr_t;
typedef __int64 *__pthreadExcArg_p;
typedef __int64 __pthreadExcArg_t;
struct __pthreadExcCtx {__pthreadExcJumpBuf_t __jmp;volatile struct __pthreadExcCtx *__link;volatile __pthreadExceptionObj_t __cur_exception;volatile __pthreadExcState_t __exc_state;unsigned int __reserved0;__pthreadExcLong_t __sentinel;__pthreadExcLong_t __version;__pthreadExcNative_t __exrec_copy;};
typedef struct __pthreadExcCtx *__pthreadExcCtx_p;
typedef struct __pthreadExcCtx __pthreadExcCtx_t;
struct __pthreadExcExt {__pthreadExcLong_t __sentinel;__pthreadExcShort_t __version;__pthreadExcShort_t __flags;unsigned int __reserved0;__pthreadExcAddr_t __extend;__pthreadExcArg_p __args;};
typedef struct __pthreadExcExt __pthreadExcExt_t;
typedef sigjmp_buf __pthreadExcJumpBuf_t;
struct __pthreadExcKindAddr {__pthreadExcKind_t __kind;unsigned int __reserved0;__pthreadExcAddr_t __address;__pthreadExcExt_t __ext;};
typedef struct __pthreadExcKindAddr __pthreadExcKindAddr_t;
struct __pthreadExcKindStatus {__pthreadExcKind_t __kind;unsigned int __reserved0;__pthreadStatus_t __status;__pthreadExcExt_t __ext;};
typedef struct __pthreadExcKindStatus __pthreadExcKindStatus_t;
struct __pthreadExcKindV1Addr {__pthreadExcKind_t __kind;unsigned int __reserved0;__pthreadExcAddr_t __address;__pthreadExcUns_t __filler[6];};
typedef struct __pthreadExcKindV1Addr __pthreadExcKindV1Addr_t;
struct __pthreadExcKindV1Status {__pthreadExcKind_t __kind;unsigned int __reserved0;__pthreadExcUns_t __status;__pthreadExcUns_t __filler[6];};
typedef struct __pthreadExcKindV1Status __pthreadExcKindV1Status_t;
enum __pthreadExcKind_t {_PTHREAD_EXC_KIND_NONE = 0x0,_PTHREAD_EXC_KIND_ADDR = 0x2130455,_PTHREAD_EXC_KIND_STATUS = 0x2130456,};
typedef __int64 *__pthreadExcLong_p;
typedef __int64 __pthreadExcLong_t;
struct __pthreadExcNative {__int64 __exceptionCode;__pthreadExcUns_t __exceptionFlags;void *__exceptionRecord;void *__exceptionAddress;__pthreadExcUns_t __numberParameters;__pthreadExcUns_t __exceptionInformation[5];};
typedef struct __pthreadExcNative __pthreadExcNative_t;
typedef __int16 *__pthreadExcShort_p;
typedef __int16 __pthreadExcShort_t;
enum __pthreadExcState_t {_PTHREAD_EXC_STATE_ACTIVE = 0x0,_PTHREAD_EXC_STATE_NONE = 0x1,_PTHREAD_EXC_STATE_HANDLED = 0x2,_PTHREAD_EXC_STATE_POPPED = 0x3,};
typedef unsigned __int64 *__pthreadExcUns_p;
typedef unsigned __int64 __pthreadExcUns_t;
union __pthreadExceptionObj {__pthreadExcKind_t __kind;__pthreadExcKindV1Status_t __v1status;__pthreadExcKindV1Addr_t __v1address;__pthreadExcKindStatus_t __status;__pthreadExcKindAddr_t __address;};
typedef union __pthreadExceptionObj *__pthreadExceptionObj_p;
typedef union __pthreadExceptionObj __pthreadExceptionObj_t;
typedef void __pthreadExtDestructorFunc_t(void *, pthread_t, pthread_key_t);
typedef __pthreadExtDestructorFunc_t *__pthreadExtDestructor_t;
typedef __pthreadLongAddr_t *__pthreadLongAddr_p;
typedef void *__pthreadLongAddr_t;
typedef __int64 __pthreadLongInt_t;
typedef char *__pthreadLongString_t;
typedef unsigned __int64 __pthreadLongUint_t;
typedef void __pthreadOnceFunc_t(void);
typedef __pthreadOnceFunc_t *__pthreadOnce_t;
typedef __pthreadLongAddr_t *__pthreadShortAddr_p;
typedef void *__pthreadShortAddr_t;
typedef char *__pthreadShortString_t;
typedef void *__pthreadStartFunc_t(void *);
typedef __pthreadStartFunc_t *__pthreadStart_t;
typedef unsigned __int64 __pthreadStatus_t;
typedef __pthreadLongAddr_p __pthreadTsd_t;
struct __pthread_attr_t {__int64 __valid;char *__name;unsigned __int64 __arg;unsigned __int64 __reserved[19];};
struct __pthread_cond_t {unsigned int __state;unsigned int __valid;char *__name;unsigned int __arg;unsigned int __reserved1;unsigned __int64 __sequence;void *__block;};
struct __pthread_condattr_t {__int64 __valid;unsigned __int64 __reserved[13];};
struct __pthread_mutex_t {unsigned int __lock;unsigned int __valid;char *__name;unsigned int __arg;unsigned int __depth;unsigned __int64 __sequence;unsigned __int64 __owner;void *__block;};
struct __pthread_mutexattr_t {__int64 __valid;unsigned __int64 __reserved[15];};
struct __pthread_once_t {__int64 __state;__int64 __reserved[10];};
struct __pthread_paddock_t {__pthreadLongUint_t __valid;__pthreadLongString_t __name;__pthreadLongUint_t __arg;__pthreadLongUint_t __reserved[19];};
struct __pthread_paddockattr_t {__pthreadLongUint_t __valid;__pthreadLongUint_t __reserved[15];};
struct __pthread_rwlock_t {unsigned int __valid;unsigned int __flags;char *__name;unsigned int __arg;unsigned int __readers;unsigned int __rwaits;unsigned int __wwaits;unsigned __int64 __sequence;unsigned __int64 __wrid;void *__block;unsigned __int64 __reserved1;};
struct __pthread_rwlockattr_t {__int64 __valid;unsigned __int64 __reserved[15];};
struct __pthread_t {void *__reserved1;void *__reserved2;unsigned __int16 __size;unsigned __int8 __version;unsigned __int8 __reserved3;unsigned __int8 __external;unsigned __int8 __reserved4[2];unsigned __int8 __creator;unsigned __int64 __sequence;unsigned __int64 __reserved5[2];void *__per_kt_area;void *__stack_base;void *__stack_reserve;void *__stack_yellow;void *__stack_guard;unsigned __int64 __stack_size;void **__tsd_values;unsigned __int64 __tsd_count;unsigned int __reserved6;unsigned int __reserved7;unsigned int __thread_flags;int __thd_errno;void *__stack_hiwater;};
typedef struct $6F5CA88FA5D44A4BEDF321A100838BF3 __regex_t;
typedef struct $BD619B2F7AFF7BA6F06506AA27210664 __regmatch_t;
struct __res_state {int retrans;int retry;u_long options;int nscount;struct sockaddr_in nsaddr_list[3];u_short id;char defdname[256];char *dnsrch[7];u_long pfcode;unsigned int nsort;char unused[3];struct __res_state::$88D0602C329B0B4E1EDE7A5D1EE15EF0 sort_list[10];};
struct __res_state::$88D0602C329B0B4E1EDE7A5D1EE15EF0 {struct in_addr addr;u_int mask;};
typedef void (*__sigfp)(int);
struct __svcxprt {int xp_sock;u_short xp_port;struct __svcxprt::xp_ops *__svcxprt::xp_ops;int xp_addrlen;struct sockaddr_in xp_raddr;struct opaque_auth xp_verf;caddr_t xp_p1;caddr_t xp_p2;caddr_t xp_p3;};
struct __svcxprt::xp_ops {int (*xp_recv)(struct __svcxprt *, struct rpc_msg *);enum xprt_stat (*xp_stat)(struct __svcxprt *);int (*xp_getargs)(struct __svcxprt *, xdrproc_t, caddr_t);int (*xp_reply)(struct __svcxprt *, struct rpc_msg *);int (*xp_freeargs)(struct __svcxprt *, xdrproc_t, caddr_t);void (*xp_destroy)(struct __svcxprt *);};
struct __ut_timeval {__int64 tv_sec;int tv_usec;int __reserved;};
struct _alternate {int subset;char *name;};
struct _arp_blk {struct arp_hdr hdr;struct arp_info_blk info[145];};
struct _attrib {int _n_records;struct _attrib_rec *_attribs;char *_buftop;};
struct _attrib_hdr {int _magic;int _n_records;int _size;int _unused;};
struct _attrib_rec {unsigned __int16 _set;unsigned __int16 _key;unsigned int _bufoff;};
struct _authcap_functab {int ot_index;int (*setent)(int);int (*endent)(int);int (*getent)(int, char **);int (*findent)(int, const char *, char **);int (*putent)(int, const char *, const char *, const void *, int (*)(FILE *, const char *, const void *));int (*delent)(int, const char *, const char *);};
struct _bool_struct {char _auto_left_margin;char _auto_right_margin;char _no_esc_ctlc;char _ceol_standout_glitch;char _eat_newline_glitch;char _erase_overstrike;char _generic_type;char _hard_copy;char _has_meta_key;char _has_status_line;char _ins_null_glitch;char _mem_above;char _mem_below;char _move_insert_mode;char _move_standout_mode;char _over_strike;char _status_line_esc_ok;char _dest_tabs_magic_smso;char _tilde_glitch;char _transparent_underline;char _xon_xoff;char _back_color_erase;char _can_change;char _col_addr_glitch;char _cpi_changes_res;char _cr_cancels_micro_mode;char _hard_cursor;char _has_print_wheel;char _hue_lightness_saturation;char _lpi_changes_res;char _needs_xon_xoff;char _non_dest_scroll_region;char _non_rev_rmcup;char _no_pad_char;char _prtr_silent;char _row_addr_glitch;char _semi_auto_right_margin;char Sentinel;};
struct _catset {unsigned __int16 _setno;unsigned __int16 _n_msgs;struct _msgptr *_mp;int _msgs_expanded;};
struct _cd_cdrec_getarg {int fsec;char *drec;};
struct _cd_cptrec {unsigned __int8 di_len;unsigned __int8 xar_len;unsigned __int8 extent[4];unsigned __int8 parent[2];unsigned __int8 dir_id[2];};
struct _cd_cxar_getarg {int fsec;char *xar;int xarlen;int retlen;};
struct _cd_getptblock {char block[40];};
struct _cd_idmap_getarg {int cmd;struct cd_idmap *maps;int nmaps;};
struct _cd_nmconv_getarg {int cmd;int flag;};
struct _contextDataRec {Widget parent;Widget ve;};
struct _contextErrDataRec {Widget widget;XIM xim;};
union _ds1Entries {dsx1KernGetConfigEntry dsx1Config;dsx1KernGetCurrentEntry dsx1Current;dsx1KernGetIntervalEntry dsx1Interval;dsx1KernGetTotalEntry dsx1Total;dsx1KernGetFarEndCurrentEntry dsx1FarEndCurrent;dsx1KernGetFarEndIntervalEntry dsx1FarEndInterval;dsx1KernGetFarEndTotalEntry dsx1FarEndTotal;dsx1KernGetFracEntry dsx1Frac;};
struct _dsx1KernGetConfigEntry {int dsx1LineIndex;int dsx1IfIndex;int dsx1TimeElapsed;int dsx1ValidIntervals;int dsx1LineType;int dsx1LineCoding;int dsx1SendCode;u_char dsx1CircuitIdentifier[32];int dsx1LoopbackConfig;int dsx1LineStatus;int dsx1SignalMode;int dsx1TransmitClockSource;int dsx1Fdl;};
struct _dsx1KernGetCurrentEntry {int dsx1CurrentIndex;unsigned int dsx1CurrentESs;unsigned int dsx1CurrentSESs;unsigned int dsx1CurrentSEFSs;unsigned int dsx1CurrentUASs;unsigned int dsx1CurrentCSSs;unsigned int dsx1CurrentPCVs;unsigned int dsx1CurrentLESs;unsigned int dsx1CurrentBESs;unsigned int dsx1CurrentDMs;unsigned int dsx1CurrentLCVs;};
struct _dsx1KernGetFarEndCurrentEntry {int dsx1FarEndCurrentIndex;int dsx1FarEndTimeElapsed;int dsx1FarEndValidIntervals;unsigned int dsx1FarEndCurrentESs;unsigned int dsx1FarEndCurrentSESs;unsigned int dsx1FarEndCurrentSEFSs;unsigned int dsx1FarEndCurrentUASs;unsigned int dsx1FarEndCurrentCSSs;unsigned int dsx1FarEndCurrentLESs;unsigned int dsx1FarEndCurrentPCVs;unsigned int dsx1FarEndCurrentBESs;unsigned int dsx1FarEndCurrentDMs;};
struct _dsx1KernGetFarEndIntervalEntry {int dsx1FarEndIntervalIndex;int dsx1FarEndIntervalNumber;unsigned int dsx1FarEndIntervalESs;unsigned int dsx1FarEndIntervalSESs;unsigned int dsx1FarEndIntervalSEFSs;unsigned int dsx1FarEndIntervalUASs;unsigned int dsx1FarEndIntervalCSSs;unsigned int dsx1FarEndIntervalLESs;unsigned int dsx1FarEndIntervalPCVs;unsigned int dsx1FarEndIntervalBESs;unsigned int dsx1FarEndIntervalDMs;};
struct _dsx1KernGetFarEndTotalEntry {int dsx1FarEndTotalIndex;unsigned int dsx1FarEndTotalESs;unsigned int dsx1FarEndTotalSESs;unsigned int dsx1FarEndTotalSEFSs;unsigned int dsx1FarEndTotalUASs;unsigned int dsx1FarEndTotalCSSs;unsigned int dsx1FarEndTotalLESs;unsigned int dsx1FarEndTotalPCVs;unsigned int dsx1FarEndTotalBESs;unsigned int dsx1FarEndTotalDMs;};
struct _dsx1KernGetFracEntry {int dsx1FracIndex;int dsx1FracNumber;int dsx1FracIfIndex;};
struct _dsx1KernGetIntervalEntry {int dsx1IntervalIndex;int dsx1IntervalNumber;unsigned int dsx1IntervalESs;unsigned int dsx1IntervalSESs;unsigned int dsx1IntervalSEFSs;unsigned int dsx1IntervalUASs;unsigned int dsx1IntervalCSSs;unsigned int dsx1IntervalPCVs;unsigned int dsx1IntervalLESs;unsigned int dsx1IntervalBESs;unsigned int dsx1IntervalDMs;unsigned int dsx1IntervalLCVs;};
struct _dsx1KernGetTotalEntry {int dsx1TotalIndex;unsigned int dsx1TotalESs;unsigned int dsx1TotalSESs;unsigned int dsx1TotalSEFSs;unsigned int dsx1TotalUASs;unsigned int dsx1TotalCSSs;unsigned int dsx1TotalPCVs;unsigned int dsx1TotalLESs;unsigned int dsx1TotalBESs;unsigned int dsx1TotalDMs;unsigned int dsx1TotalLCVs;};
struct _dsx1KernSetConfigEntry {int dsx1LineIndex;int dsx1LineType;int dsx1LineCoding;int dsx1SendCode;u_char dsx1CircuitIdentifier[32];int dsx1LoopbackConfig;int dsx1SignalMode;int dsx1TransmitClockSource;int dsx1Fdl;char dsx1LineIndex_mark;char dsx1LineType_mark;char dsx1LineCoding_mark;char dsx1SendCode_mark;char dsx1CircuitIdentifier_mark;char dsx1LoopbackConfig_mark;char dsx1SignalMode_mark;char dsx1TransmitClockSource_mark;char dsx1Fdl_mark;};
struct _dsx1KernSetFracEntry {int dsx1FracIndex;int dsx1FracNumber;int dsx1FracIfIndex;char dsx1FracIndex_mark;char dsx1FracNumber_mark;char dsx1FracIfIndex_mark;};
struct _esnmp_allocation {VARBIND *vb;u_int options;u_int status;u_int error_index;};
struct _esnmp_pdu {int epdu_id;int epdu_op;int epdu_err_status;int epdu_err_index;int reserved[4];VARBIND *epdu_vblist;};
struct _esnmp_registration {SUBTREE *subtree;u_int priority;u_int timeout;u_int range_subid;u_int range_upper_bound;int options;u_int state;OID *instance;};
struct _for_fpe_flags {unsigned int FPE_V_RESERVED_19;};
struct _header {int _magic;unsigned __int16 _n_sets;unsigned __int16 _setmax;char _filler[16];unsigned int _offattrib;};
struct _icmp_blk {int in_msgs;int in_icmp_errors;int in_unreach;int in_timeexcds;int in_parmprobs;int in_srcquenchs;int in_redirects;int in_echos;int in_echoreps;int in_tstamps;int in_tstampreply;int in_maskreqs;int in_maskreps;int out_msgs;int out_errors;int out_unreach;int out_timeexcds;int out_parmprobs;int out_srcquenchs;int out_redirects;int out_echos;int out_echoreps;int out_tstamps;int out_tstampreply;int out_maskreqs;int out_maskreps;};
struct _id_blk {char name[100];int version;};
struct _if_blk {struct if_blk_hdr hdr;struct if_info_blk info[20];};
struct _if_names_blk {struct if_names_hdr hdr;struct if_names_info_blk info[255];};
struct _ip_blk {int forwarding;int default_ttl;int in_receives;int in_hdr_errors;int in_addr_errors;int forw_datagrams;int in_delivers;int out_requests;int out_discards;int out_noroutes;int reasm_tout;int reasm_reqds;int reasm_OKs;int reasm_fails;int frag_OKs;int frag_fails;int frag_creates;};
struct _ip_routing_blk {struct ip_routing_hdr hdr;struct ip_routing_info_blk info[170];};
struct _log_callback {int log_level;char *text;};
struct _method {int action;int serial_num;int flags;int repeat_cnt;int max_repetitions;VARBIND *varbind;OBJECT *object;void *security;ROW_CONTEXT *row;struct _method *prev;struct _method *next;};
struct _msgptr {unsigned __int16 _msgno;unsigned __int16 _msglen;unsigned int _offset;};
struct _ns_flagdata {int mask;int shift;};
struct _num_struct {__int16 _columns;__int16 _init_tabs;__int16 _lines;__int16 _lines_of_memory;__int16 _magic_cookie_glitch;__int16 _padding_baud_rate;__int16 _virtual_terminal;__int16 _width_status_line;__int16 _bit_image_entwining;__int16 _bit_image_type;__int16 _buffer_capacity;__int16 _buttons;__int16 _dot_vert_spacing;__int16 _dot_horz_spacing;__int16 _labl_height;__int16 _labl_width;__int16 _max_attributes;__int16 _max_colors;__int16 _max_micro_address;__int16 _max_micro_jump;__int16 _max_pairs;__int16 _maximum_windows;__int16 _micro_col_size;__int16 _micro_line_size;__int16 _no_color_video;__int16 _number_of_pins;__int16 _num_labels;__int16 _output_res_char;__int16 _output_res_line;__int16 _output_res_horz_inch;__int16 _output_res_vert_inch;__int16 _print_rate;__int16 _wide_char_size;__int16 Sentinel;};
struct _object {int object_index;OID oid;int type;int (*getfunc)(METHOD *);int (*setfunc)(METHOD *);};
struct _oct {int len;unsigned __int8 *ptr;};
struct _oid {int nelem;unsigned int *elements;};
struct _one_ip_route_blk {int snmp_op;int snmp_sts;struct ip_routing_info_blk info;};
struct _one_ipaddr_blk {int snmp_op;int snmp_sts;struct ipaddr_info_blk info;};
struct _one_proc_blk {int snmp_op;int snmp_sts;pid_t pid;};
struct _one_tcp_blk {int snmp_op;int snmp_sts;struct tcp_info_blk info;};
struct _one_udp_blk {int snmp_op;int snmp_sts;struct udp_info_blk info;};
enum _pthreadDebugTraceDetail_tag {PTHREAD_DEBUG_TRACE_DETAIL_NONE = 0x0,PTHREAD_DEBUG_TRACE_DETAIL_BRIEF = 0x1,PTHREAD_DEBUG_TRACE_DETAIL_MID = 0x2,PTHREAD_DEBUG_TRACE_DETAIL_NORMAL = 0x3,PTHREAD_DEBUG_TRACE_DETAIL_FULL = 0x4,};
enum _pthreadDebugTraceFmt_tag {PTHREAD_DEBUG_TRACE_FMT_TIME = 0x1,PTHREAD_DEBUG_TRACE_FMT_CYCLE = 0x2,PTHREAD_DEBUG_TRACE_FMT_SIZE = 0x4,PTHREAD_DEBUG_TRACE_FMT_STACK = 0x8,};
enum _pthreadDebugTraceSetHow_tag {PTHREAD_DEBUG_TRACE_SETHOW_REPLACE = 0x0,PTHREAD_DEBUG_TRACE_SETHOW_SET = 0x1,PTHREAD_DEBUG_TRACE_SETHOW_CLEAR = 0x2,};
struct _quad {int val[2];};
struct _row_context {void *context;void *save;unsigned int *instance;int instance_len;int state;};
struct _sad_blk {SAD_HDR sad_blkhdr;STR_CFG sad_cfg[145];};
struct _sad_hdr {int sad_cnt;dev_t sad_clonedev;};
struct _screen {unsigned int phys_irm;__int64 baud;__int16 kp_state;__int16 Yabove;__int16 lsize;__int16 csize;__int16 tsize;WINDOW *std_scr;WINDOW *cur_scr;WINDOW *virt_scr;int *cur_hash;int *virt_hash;TERMINAL *tcap;FILE *term_file;FILE *input_file;SLK_MAP *slk;char **_mks;COSTS term_costs;SGTTY save_tty_buf;char **_color_mks;unsigned __int64 _trap_mbe;unsigned __int64 _map_mbe_to_key;};
struct _smtDisplay {Channel chan;char *buffer;char *bufptr;char *bufmax;SmtPrivatePtr pPriv;__int16 majorVersion;__int16 minorVersion;};
struct _str_cfg_blk {dev_t scb_device;int scb_flags;ushort scb_mid;char scb_name[17];};
struct _str_struct {struct strs strs;struct strs2 strs2;struct strs3 strs3;struct strs4 strs4;};
struct _subtree {char *name;char *dots;OID oid;OBJECT *object_tbl;int last;};
struct _system_blk {char hostname[256];int hostnamelen;char cputype[256];char kernel_version[512];struct timeval bootime;};
struct _tcp_blk {struct tcp_blk_hdr hdr;struct tcp_info_blk info[202];};
struct _trap {OID *enterprise;int generic_trap;int specific_trap;unsigned int time_ticks;VARBIND *varbind;};
struct _udp_blk {struct udp_hdr hdr;struct udp_info_blk info[508];};
struct _varbind {OID name;int type;union _varbind::_value value;struct _varbind *next;};
union _varbind::_value {unsigned int ul;unsigned __int64 ul64;int sl;OID oid;OCT oct;};
struct _vsIoAddr {__int16 *ioreg;__int16 status;caddr_t obuff;int obufflen;int reloc;vsEvent *ibuff;int iqsize;int ihead;int itail;vsCursor mouse;vsBox mbox;};
struct _vsStats {int errors;int unsolIntr;int overruns;int flashes;int ignites;int douses;int linkErrors;};
struct _vs_box {__int16 bottom;__int16 right;__int16 left;__int16 top;};
struct _vs_cursor {__int16 x;__int16 y;};
struct _vs_event {u_short vse_x;u_short vse_y;u_short vse_time;char vse_type;u_char vse_key;char vse_direction;char vse_device;};
struct _win_st {_SHORT _cury;_SHORT _curx;_SHORT _maxy;_SHORT _maxx;_SHORT _begy;_SHORT _begx;char _flags;_SHORT _yoffset;bool _clear;bool _leave_;bool _immed;bool _sync;WINDOW *_padwin;_SHORT *_firstch;_SHORT *_lastch;_SHORT _tmarg;_SHORT _bmarg;unsigned int _use_idc;attr_t _attrs;cchar_t _bkgd;int _delay;_SHORT _ndescs;_SHORT _parx;_SHORT _pary;WINDOW *_parent;cchar_t **_y;unsigned __int8 _waitc[5];char _index;char _inuse;};
struct _xAnyClassinfo {CARD8 class;CARD8 length;};
struct _xArc {INT16 x;INT16 y;CARD16 width;CARD16 height;INT16 angle1;INT16 angle2;};
struct _xAxisInfo {CARD32 resolution;CARD32 min_value;CARD32 max_value;};
struct _xButtonInfo {CARD8 class;CARD8 length;CARD16 num_buttons;};
struct _xDeviceInfo {CARD32 type;CARD8 id;CARD8 num_classes;CARD8 use;CARD8 pad1;};
struct _xEvent {union _xEvent::$4579D2F02645DC5461CD7DF0223F4600 u;};
union _xEvent::$4579D2F02645DC5461CD7DF0223F4600 {struct _xEvent::$4579D2F02645DC5461CD7DF0223F4600::$CB6A6FBD4AABDC204CA09785462A5EAC u;struct _xEvent::$4579D2F02645DC5461CD7DF0223F4600::$06CC3EE1C785FF4C65A358F81D4770E3 keyButtonPointer;struct _xEvent::$4579D2F02645DC5461CD7DF0223F4600::$B652DCB1C62512FA77E4252B8A422175 enterLeave;struct _xEvent::$4579D2F02645DC5461CD7DF0223F4600::$D4E6015299E8C3BAFA52E0C7400AB6A6 focus;struct _xEvent::$4579D2F02645DC5461CD7DF0223F4600::$99F5A2754EC45011AB028BB1CC2CE3C7 expose;struct _xEvent::$4579D2F02645DC5461CD7DF0223F4600::$316B218C709051C178B3BB07E6B18196 graphicsExposure;struct _xEvent::$4579D2F02645DC5461CD7DF0223F4600::$E3E63ACF9DBDF6C56161A285CC120760 noExposure;struct _xEvent::$4579D2F02645DC5461CD7DF0223F4600::$0F73BC087B0175F837E61BF86166AB84 visibility;struct _xEvent::$4579D2F02645DC5461CD7DF0223F4600::$F0EDD24BB588AB1974F0CC5CC47343A0 createNotify;struct _xEvent::$4579D2F02645DC5461CD7DF0223F4600::$3F936A3A9A06092B5B70BD26A7DFD789 destroyNotify;struct _xEvent::$4579D2F02645DC5461CD7DF0223F4600::$674F3E4AE65A41A1BBF2ACE37596CB1B unmapNotify;struct _xEvent::$4579D2F02645DC5461CD7DF0223F4600::$3284E488B37AEC742A022E833068D497 mapNotify;struct _xEvent::$4579D2F02645DC5461CD7DF0223F4600::$210E680417EC90CA260E4854A6751754 mapRequest;struct _xEvent::$4579D2F02645DC5461CD7DF0223F4600::$C927E5D571B5CC43049437141E992D5C reparent;struct _xEvent::$4579D2F02645DC5461CD7DF0223F4600::$F0E773388BCCF7D4D022A846E01785CC configureNotify;struct _xEvent::$4579D2F02645DC5461CD7DF0223F4600::$CF45A70F1381AC3E41639336F8DCFD08 configureRequest;struct _xEvent::$4579D2F02645DC5461CD7DF0223F4600::$9C75AB6DDEADA42926A4005EFC1B4241 gravity;struct _xEvent::$4579D2F02645DC5461CD7DF0223F4600::$5A60174FC6A07BE0049C674473C6C1C3 resizeRequest;struct _xEvent::$4579D2F02645DC5461CD7DF0223F4600::$EDE3B33B7AF26E05A2A60AEE6589519E circulate;struct _xEvent::$4579D2F02645DC5461CD7DF0223F4600::$40ECE1105C1C479EC11371480E0EAEEE property;struct _xEvent::$4579D2F02645DC5461CD7DF0223F4600::$B56843D1A807D13D0FEC0C0069626892 selectionClear;struct _xEvent::$4579D2F02645DC5461CD7DF0223F4600::$0782806FB5FEE125636C30F93EC424E5 selectionRequest;struct _xEvent::$4579D2F02645DC5461CD7DF0223F4600::$9E59406F0409BDE74EEED2CE1F683A76 selectionNotify;struct _xEvent::$4579D2F02645DC5461CD7DF0223F4600::$3C1A322C1CF5978F8E7C805C02DD70C8 colormap;struct _xEvent::$4579D2F02645DC5461CD7DF0223F4600::$4D6B1C2E2FE6C1124CAB2311E897D1AB mappingNotify;struct _xEvent::$4579D2F02645DC5461CD7DF0223F4600::$F60DFC41729ECCA7C121C44CBFE60E95 clientMessage;};
struct _xEvent::$4579D2F02645DC5461CD7DF0223F4600::$06CC3EE1C785FF4C65A358F81D4770E3 {CARD32 pad00;CARD32 time;CARD32 root;CARD32 event;CARD32 child;INT16 rootX;INT16 rootY;INT16 eventX;INT16 eventY;KeyButMask state;BOOL sameScreen;BYTE pad1;};
struct _xEvent::$4579D2F02645DC5461CD7DF0223F4600::$0782806FB5FEE125636C30F93EC424E5 {CARD32 pad00;CARD32 time;CARD32 owner;CARD32 requestor;CARD32 selection;CARD32 target;CARD32 property;};
struct _xEvent::$4579D2F02645DC5461CD7DF0223F4600::$0F73BC087B0175F837E61BF86166AB84 {CARD32 pad00;CARD32 window;CARD8 state;BYTE pad1;BYTE pad2;BYTE pad3;};
struct _xEvent::$4579D2F02645DC5461CD7DF0223F4600::$210E680417EC90CA260E4854A6751754 {CARD32 pad00;CARD32 parent;CARD32 window;};
struct _xEvent::$4579D2F02645DC5461CD7DF0223F4600::$316B218C709051C178B3BB07E6B18196 {CARD32 pad00;CARD32 drawable;CARD16 x;CARD16 y;CARD16 width;CARD16 height;CARD16 minorEvent;CARD16 count;BYTE majorEvent;BYTE pad1;BYTE pad2;BYTE pad3;};
struct _xEvent::$4579D2F02645DC5461CD7DF0223F4600::$3284E488B37AEC742A022E833068D497 {CARD32 pad00;CARD32 event;CARD32 window;BOOL override;BYTE pad1;BYTE pad2;BYTE pad3;};
struct _xEvent::$4579D2F02645DC5461CD7DF0223F4600::$3C1A322C1CF5978F8E7C805C02DD70C8 {CARD32 pad00;CARD32 window;CARD32 colormap;BOOL new;BYTE state;BYTE pad1;BYTE pad2;};
struct _xEvent::$4579D2F02645DC5461CD7DF0223F4600::$3F936A3A9A06092B5B70BD26A7DFD789 {CARD32 pad00;CARD32 event;CARD32 window;};
struct _xEvent::$4579D2F02645DC5461CD7DF0223F4600::$40ECE1105C1C479EC11371480E0EAEEE {CARD32 pad00;CARD32 window;CARD32 atom;CARD32 time;BYTE state;BYTE pad1;CARD16 pad2;};
struct _xEvent::$4579D2F02645DC5461CD7DF0223F4600::$4D6B1C2E2FE6C1124CAB2311E897D1AB {CARD32 pad00;CARD8 request;CARD8 firstKeyCode;CARD8 count;BYTE pad1;};
struct _xEvent::$4579D2F02645DC5461CD7DF0223F4600::$5A60174FC6A07BE0049C674473C6C1C3 {CARD32 pad00;CARD32 window;CARD16 width;CARD16 height;};
struct _xEvent::$4579D2F02645DC5461CD7DF0223F4600::$674F3E4AE65A41A1BBF2ACE37596CB1B {CARD32 pad00;CARD32 event;CARD32 window;BOOL fromConfigure;BYTE pad1;BYTE pad2;BYTE pad3;};
struct _xEvent::$4579D2F02645DC5461CD7DF0223F4600::$99F5A2754EC45011AB028BB1CC2CE3C7 {CARD32 pad00;CARD32 window;CARD16 x;CARD16 y;CARD16 width;CARD16 height;CARD16 count;CARD16 pad2;};
struct _xEvent::$4579D2F02645DC5461CD7DF0223F4600::$9C75AB6DDEADA42926A4005EFC1B4241 {CARD32 pad00;CARD32 event;CARD32 window;INT16 x;INT16 y;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct _xEvent::$4579D2F02645DC5461CD7DF0223F4600::$9E59406F0409BDE74EEED2CE1F683A76 {CARD32 pad00;CARD32 time;CARD32 requestor;CARD32 selection;CARD32 target;CARD32 property;};
struct _xEvent::$4579D2F02645DC5461CD7DF0223F4600::$B56843D1A807D13D0FEC0C0069626892 {CARD32 pad00;CARD32 time;CARD32 window;CARD32 atom;};
struct _xEvent::$4579D2F02645DC5461CD7DF0223F4600::$B652DCB1C62512FA77E4252B8A422175 {CARD32 pad00;CARD32 time;CARD32 root;CARD32 event;CARD32 child;INT16 rootX;INT16 rootY;INT16 eventX;INT16 eventY;KeyButMask state;BYTE mode;BYTE flags;};
struct _xEvent::$4579D2F02645DC5461CD7DF0223F4600::$C927E5D571B5CC43049437141E992D5C {CARD32 pad00;CARD32 event;CARD32 window;CARD32 parent;INT16 x;INT16 y;BOOL override;BYTE pad1;BYTE pad2;BYTE pad3;};
struct _xEvent::$4579D2F02645DC5461CD7DF0223F4600::$CB6A6FBD4AABDC204CA09785462A5EAC {BYTE type;BYTE detail;CARD16 sequenceNumber;};
struct _xEvent::$4579D2F02645DC5461CD7DF0223F4600::$CF45A70F1381AC3E41639336F8DCFD08 {CARD32 pad00;CARD32 parent;CARD32 window;CARD32 sibling;INT16 x;INT16 y;CARD16 width;CARD16 height;CARD16 borderWidth;CARD16 valueMask;CARD32 pad1;};
struct _xEvent::$4579D2F02645DC5461CD7DF0223F4600::$D4E6015299E8C3BAFA52E0C7400AB6A6 {CARD32 pad00;CARD32 window;BYTE mode;BYTE pad1;BYTE pad2;BYTE pad3;};
struct _xEvent::$4579D2F02645DC5461CD7DF0223F4600::$E3E63ACF9DBDF6C56161A285CC120760 {CARD32 pad00;CARD32 drawable;CARD16 minorEvent;BYTE majorEvent;BYTE bpad;};
struct _xEvent::$4579D2F02645DC5461CD7DF0223F4600::$EDE3B33B7AF26E05A2A60AEE6589519E {CARD32 pad00;CARD32 event;CARD32 window;CARD32 parent;BYTE place;BYTE pad1;BYTE pad2;BYTE pad3;};
struct _xEvent::$4579D2F02645DC5461CD7DF0223F4600::$F0E773388BCCF7D4D022A846E01785CC {CARD32 pad00;CARD32 event;CARD32 window;CARD32 aboveSibling;INT16 x;INT16 y;CARD16 width;CARD16 height;CARD16 borderWidth;BOOL override;BYTE bpad;};
struct _xEvent::$4579D2F02645DC5461CD7DF0223F4600::$F0EDD24BB588AB1974F0CC5CC47343A0 {CARD32 pad00;CARD32 parent;CARD32 window;INT16 x;INT16 y;CARD16 width;CARD16 height;CARD16 borderWidth;BOOL override;BYTE bpad;};
struct _xEvent::$4579D2F02645DC5461CD7DF0223F4600::$F60DFC41729ECCA7C121C44CBFE60E95 {CARD32 pad00;CARD32 window;union _xEvent::$::$F60DFC41729ECCA7C121C44CBFE60E95::$82F47A5C57D4899F304609D6061CA549 u;};
struct _xEvent::$::$::$82F47A5C57D4899F304609D6061CA549::$B8AD833485FADDB6F1E0494B45611EC6 {CARD32 type;INT16 shorts0;INT16 shorts1;INT16 shorts2;INT16 shorts3;INT16 shorts4;INT16 shorts5;INT16 shorts6;INT16 shorts7;INT16 shorts8;INT16 shorts9;};
struct _xEvent::$::$::$82F47A5C57D4899F304609D6061CA549::$FB6660946ED728575FB5339601D7D5BE {CARD32 type;INT8 bytes[20];};
struct _xEvent::$::$::$82F47A5C57D4899F304609D6061CA549::$FD3E7DCAA1FA6D37E77316D970071F0A {CARD32 type;INT32 longs0;INT32 longs1;INT32 longs2;INT32 longs3;INT32 longs4;};
union _xEvent::$::$F60DFC41729ECCA7C121C44CBFE60E95::$82F47A5C57D4899F304609D6061CA549 {struct _xEvent::$::$::$82F47A5C57D4899F304609D6061CA549::$FD3E7DCAA1FA6D37E77316D970071F0A l;struct _xEvent::$::$::$82F47A5C57D4899F304609D6061CA549::$B8AD833485FADDB6F1E0494B45611EC6 s;struct _xEvent::$::$::$82F47A5C57D4899F304609D6061CA549::$FB6660946ED728575FB5339601D7D5BE b;};
struct _xKeyInfo {CARD8 class;CARD8 length;CARD8 min_keycode;CARD8 max_keycode;CARD16 num_keys;CARD8 pad1;CARD8 pad2;};
struct _xPoint {INT16 x;INT16 y;};
struct _xPrintAttributeEvent {BYTE type;BYTE detail;CARD16 sequenceNumber;CARD32 printContext;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;};
struct _xPrintPrintEvent {BYTE type;BYTE detail;CARD16 sequenceNumber;CARD32 printContext;BOOL cancel;CARD8 pad1;CARD16 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct _xQueryFontReply {BYTE type;BYTE pad1;CARD16 sequenceNumber;CARD32 length;xCharInfo minBounds;CARD32 walign1;xCharInfo maxBounds;CARD32 walign2;CARD16 minCharOrByte2;CARD16 maxCharOrByte2;CARD16 defaultChar;CARD16 nFontProps;CARD8 drawDirection;CARD8 minByte1;CARD8 maxByte1;BOOL allCharsExist;INT16 fontAscent;INT16 fontDescent;CARD32 nCharInfos;};
struct _xRectangle {INT16 x;INT16 y;CARD16 width;CARD16 height;};
struct _xReq {CARD8 reqType;CARD8 data;CARD16 length;};
struct _xSecurityAuthorizationRevokedEvent {BYTE type;BYTE detail;CARD16 sequenceNumber;CARD32 authId;CARD32 pad0;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _xSegment {INT16 x1;INT16 y1;INT16 x2;INT16 y2;};
struct _xValuatorInfo {CARD8 class;CARD8 length;CARD8 num_axes;CARD8 mode;CARD32 motion_buffer_size;};
struct _xkbAccessXNotify {BYTE type;BYTE xkbType;CARD16 sequenceNumber;CARD32 time;CARD8 deviceID;CARD8 keycode;CARD16 detail;CARD16 slowKeysDelay;CARD16 debounceDelay;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct _xkbActionMessage {BYTE type;BYTE xkbType;CARD16 sequenceNumber;CARD32 time;CARD8 deviceID;CARD8 keycode;BOOL press;BOOL keyEventFollows;CARD8 mods;CARD8 group;CARD8 message[8];CARD16 pad1;CARD32 pad2;CARD32 pad3;};
struct _xkbActionWireDesc {CARD8 type;CARD8 data[7];};
struct _xkbAnyDoodadWireDesc {CARD32 name;CARD8 type;CARD8 priority;INT16 top;INT16 left;INT16 angle;CARD32 pad2;CARD32 pad3;};
struct _xkbAnyEvent {BYTE type;BYTE xkbType;CARD16 sequenceNumber;CARD32 time;CARD8 deviceID;CARD8 pad1;CARD16 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;CARD32 pad6;CARD32 pad7;};
struct _xkbBehaviorWireDesc {CARD8 key;CARD8 type;CARD8 data;CARD8 pad;};
struct _xkbBell {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD16 bellClass;CARD16 bellID;INT8 percent;BOOL forceSound;BOOL eventOnly;CARD8 pad1;INT16 pitch;INT16 duration;CARD16 pad2;CARD32 name;CARD32 window;};
struct _xkbBellNotify {BYTE type;BYTE xkbType;CARD16 sequenceNumber;CARD32 time;CARD8 deviceID;CARD8 bellClass;CARD8 bellID;CARD8 percent;CARD16 pitch;CARD16 duration;CARD32 name;CARD32 window;BOOL eventOnly;CARD8 pad1;CARD16 pad2;CARD32 pad3;};
struct _xkbCompatMapNotify {BYTE type;BYTE xkbType;CARD16 sequenceNumber;CARD32 time;CARD8 deviceID;CARD8 changedGroups;CARD16 firstSI;CARD16 nSI;CARD16 nTotalSI;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct _xkbControlsNotify {BYTE type;BYTE xkbType;CARD16 sequenceNumber;CARD32 time;CARD8 deviceID;CARD8 numGroups;CARD16 pad1;CARD32 changedControls;CARD32 enabledControls;CARD32 enabledControlChanges;CARD8 keycode;CARD8 eventType;CARD8 requestMajor;CARD8 requestMinor;CARD32 pad2;};
struct _xkbDeviceLedsWireDesc {CARD16 ledClass;CARD16 ledID;CARD32 namesPresent;CARD32 mapsPresent;CARD32 physIndicators;CARD32 state;};
union _xkbDoodadWireDesc {xkbAnyDoodadWireDesc any;xkbShapeDoodadWireDesc shape;xkbTextDoodadWireDesc text;xkbIndicatorDoodadWireDesc indicator;xkbLogoDoodadWireDesc logo;};
struct _xkbEvent {union _xkbEvent::$1A318C185F777B9ECB86573CC964DEF2 u;};
union _xkbEvent::$1A318C185F777B9ECB86573CC964DEF2 {xkbAnyEvent any;xkbNewKeyboardNotify new_kbd;xkbMapNotify map;xkbStateNotify state;xkbControlsNotify ctrls;xkbIndicatorNotify indicators;xkbNamesNotify names;xkbCompatMapNotify compat;xkbBellNotify bell;xkbActionMessage message;xkbAccessXNotify accessx;xkbExtensionDeviceNotify device;};
struct _xkbExtensionDeviceNotify {BYTE type;BYTE xkbType;CARD16 sequenceNumber;CARD32 time;CARD8 deviceID;CARD8 pad1;CARD16 reason;CARD16 ledClass;CARD16 ledID;CARD32 ledsDefined;CARD32 ledState;CARD8 firstBtn;CARD8 nBtns;CARD16 supported;CARD16 unsupported;CARD16 pad3;};
struct _xkbGetCompatMap {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD8 groups;BOOL getAllSI;CARD16 firstSI;CARD16 nSI;};
struct _xkbGetCompatMapReply {CARD8 type;CARD8 deviceID;CARD16 sequenceNumber;CARD32 length;CARD8 groups;CARD8 pad1;CARD16 firstSI;CARD16 nSI;CARD16 nTotalSI;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _xkbGetControls {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD16 pad;};
struct _xkbGetControlsReply {BYTE type;CARD8 deviceID;CARD16 sequenceNumber;CARD32 length;CARD8 mkDfltBtn;CARD8 numGroups;CARD8 groupsWrap;CARD8 internalMods;CARD8 ignoreLockMods;CARD8 internalRealMods;CARD8 ignoreLockRealMods;CARD8 pad1;CARD16 internalVMods;CARD16 ignoreLockVMods;CARD16 repeatDelay;CARD16 repeatInterval;CARD16 slowKeysDelay;CARD16 debounceDelay;CARD16 mkDelay;CARD16 mkInterval;CARD16 mkTimeToMax;CARD16 mkMaxSpeed;INT16 mkCurve;CARD16 axOptions;CARD16 axTimeout;CARD16 axtOptsMask;CARD16 axtOptsValues;CARD16 pad2;CARD32 axtCtrlsMask;CARD32 axtCtrlsValues;CARD32 enabledCtrls;BYTE perKeyRepeat[32];};
struct _xkbGetDeviceInfo {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD16 wanted;BOOL allBtns;CARD8 firstBtn;CARD8 nBtns;CARD8 pad;CARD16 ledClass;CARD16 ledID;};
struct _xkbGetDeviceInfoReply {CARD8 type;CARD8 deviceID;CARD16 sequenceNumber;CARD32 length;CARD16 present;CARD16 supported;CARD16 unsupported;CARD16 nDeviceLedFBs;CARD8 firstBtnWanted;CARD8 nBtnsWanted;CARD8 firstBtnRtrn;CARD8 nBtnsRtrn;CARD8 totalBtns;BOOL hasOwnState;CARD16 dfltKbdFB;CARD16 dfltLedFB;CARD16 pad;CARD32 devType;};
struct _xkbGetGeometry {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD16 pad;CARD32 name;};
struct _xkbGetGeometryReply {CARD8 type;CARD8 deviceID;CARD16 sequenceNumber;CARD32 length;CARD32 name;BOOL found;CARD8 pad;CARD16 widthMM;CARD16 heightMM;CARD16 nProperties;CARD16 nColors;CARD16 nShapes;CARD16 nSections;CARD16 nDoodads;CARD16 nKeyAliases;CARD8 baseColorNdx;CARD8 labelColorNdx;};
struct _xkbGetIndicatorMap {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD16 pad;CARD32 which;};
struct _xkbGetIndicatorMapReply {CARD8 type;CARD8 deviceID;CARD16 sequenceNumber;CARD32 length;CARD32 which;CARD32 realIndicators;CARD8 nIndicators;CARD8 pad1;CARD16 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _xkbGetIndicatorState {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD16 pad1;};
struct _xkbGetIndicatorStateReply {CARD8 type;CARD8 deviceID;CARD16 sequenceNumber;CARD32 length;CARD32 state;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _xkbGetKbdByName {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD16 need;CARD16 want;BOOL load;CARD8 pad;};
struct _xkbGetKbdByNameReply {CARD8 type;CARD8 deviceID;CARD16 sequenceNumber;CARD32 length;CARD8 minKeyCode;CARD8 maxKeyCode;BOOL loaded;BOOL newKeyboard;CARD16 found;CARD16 reported;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct _xkbGetMap {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD16 full;CARD16 partial;CARD8 firstType;CARD8 nTypes;CARD8 firstKeySym;CARD8 nKeySyms;CARD8 firstKeyAct;CARD8 nKeyActs;CARD8 firstKeyBehavior;CARD8 nKeyBehaviors;CARD16 virtualMods;CARD8 firstKeyExplicit;CARD8 nKeyExplicit;CARD8 firstModMapKey;CARD8 nModMapKeys;CARD8 firstVModMapKey;CARD8 nVModMapKeys;CARD16 pad1;};
struct _xkbGetMapReply {CARD8 type;CARD8 deviceID;CARD16 sequenceNumber;CARD32 length;CARD16 pad1;CARD8 minKeyCode;CARD8 maxKeyCode;CARD16 present;CARD8 firstType;CARD8 nTypes;CARD8 totalTypes;CARD8 firstKeySym;CARD16 totalSyms;CARD8 nKeySyms;CARD8 firstKeyAct;CARD16 totalActs;CARD8 nKeyActs;CARD8 firstKeyBehavior;CARD8 nKeyBehaviors;CARD8 totalKeyBehaviors;CARD8 firstKeyExplicit;CARD8 nKeyExplicit;CARD8 totalKeyExplicit;CARD8 firstModMapKey;CARD8 nModMapKeys;CARD8 totalModMapKeys;CARD8 firstVModMapKey;CARD8 nVModMapKeys;CARD8 totalVModMapKeys;CARD8 pad2;CARD16 virtualMods;};
struct _xkbGetNamedIndicator {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD16 ledClass;CARD16 ledID;CARD16 pad1;CARD32 indicator;};
struct _xkbGetNamedIndicatorReply {BYTE type;BYTE deviceID;CARD16 sequenceNumber;CARD32 length;CARD32 indicator;BOOL found;BOOL on;BOOL realIndicator;CARD8 ndx;CARD8 flags;CARD8 whichGroups;CARD8 groups;CARD8 whichMods;CARD8 mods;CARD8 realMods;CARD16 virtualMods;CARD32 ctrls;BOOL supported;CARD8 pad1;CARD16 pad2;};
struct _xkbGetNames {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD16 pad;CARD32 which;};
struct _xkbGetNamesReply {BYTE type;BYTE deviceID;CARD16 sequenceNumber;CARD32 length;CARD32 which;CARD8 minKeyCode;CARD8 maxKeyCode;CARD8 nTypes;CARD8 groupNames;CARD16 virtualMods;CARD8 firstKey;CARD8 nKeys;CARD32 indicators;CARD8 nRadioGroups;CARD8 nKeyAliases;CARD16 nKTLevels;CARD32 pad3;};
struct _xkbGetState {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD16 pad;};
struct _xkbGetStateReply {BYTE type;BYTE deviceID;CARD16 sequenceNumber;CARD32 length;CARD8 mods;CARD8 baseMods;CARD8 latchedMods;CARD8 lockedMods;CARD8 group;CARD8 lockedGroup;INT16 baseGroup;INT16 latchedGroup;CARD8 compatState;CARD8 grabMods;CARD8 compatGrabMods;CARD8 lookupMods;CARD8 compatLookupMods;CARD8 pad1;CARD16 ptrBtnState;CARD16 pad2;CARD32 pad3;};
struct _xkbIndicatorDoodadWireDesc {CARD32 name;CARD8 type;CARD8 priority;INT16 top;INT16 left;INT16 angle;CARD8 shapeNdx;CARD8 onColorNdx;CARD8 offColorNdx;CARD8 pad1;CARD32 pad2;};
struct _xkbIndicatorMapWireDesc {CARD8 flags;CARD8 whichGroups;CARD8 groups;CARD8 whichMods;CARD8 mods;CARD8 realMods;CARD16 virtualMods;CARD32 ctrls;};
struct _xkbIndicatorNotify {BYTE type;BYTE xkbType;CARD16 sequenceNumber;CARD32 time;CARD8 deviceID;CARD8 pad1;CARD16 pad2;CARD32 state;CARD32 changed;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _xkbKTMapEntryWireDesc {BOOL active;CARD8 mask;CARD8 level;CARD8 realMods;CARD16 virtualMods;CARD16 pad;};
struct _xkbKTSetMapEntryWireDesc {CARD8 level;CARD8 realMods;CARD16 virtualMods;};
struct _xkbKeyTypeWireDesc {CARD8 mask;CARD8 realMods;CARD16 virtualMods;CARD8 numLevels;CARD8 nMapEntries;BOOL preserve;CARD8 pad;};
struct _xkbKeyWireDesc {CARD8 name[4];INT16 gap;CARD8 shapeNdx;CARD8 colorNdx;};
struct _xkbLatchLockState {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD8 affectModLocks;CARD8 modLocks;BOOL lockGroup;CARD8 groupLock;CARD8 affectModLatches;CARD8 modLatches;CARD8 pad;BOOL latchGroup;INT16 groupLatch;};
struct _xkbListComponents {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD16 maxNames;};
struct _xkbListComponentsReply {CARD8 type;CARD8 deviceID;CARD16 sequenceNumber;CARD32 length;CARD16 nKeymaps;CARD16 nKeycodes;CARD16 nTypes;CARD16 nCompatMaps;CARD16 nSymbols;CARD16 nGeometries;CARD16 extra;CARD16 pad1;CARD32 pad2;CARD32 pad3;};
struct _xkbLogoDoodadWireDesc {CARD32 name;CARD8 type;CARD8 priority;INT16 top;INT16 left;INT16 angle;CARD8 colorNdx;CARD8 shapeNdx;CARD16 pad1;CARD32 pad2;};
struct _xkbMapNotify {BYTE type;BYTE xkbType;CARD16 sequenceNumber;CARD32 time;CARD8 deviceID;CARD8 ptrBtnActions;CARD16 changed;CARD8 minKeyCode;CARD8 maxKeyCode;CARD8 firstType;CARD8 nTypes;CARD8 firstKeySym;CARD8 nKeySyms;CARD8 firstKeyAct;CARD8 nKeyActs;CARD8 firstKeyBehavior;CARD8 nKeyBehaviors;CARD8 firstKeyExplicit;CARD8 nKeyExplicit;CARD8 firstModMapKey;CARD8 nModMapKeys;CARD8 firstVModMapKey;CARD8 nVModMapKeys;CARD16 virtualMods;CARD16 pad1;};
struct _xkbModsWireDesc {CARD8 mask;CARD8 realMods;CARD16 virtualMods;};
struct _xkbNamesNotify {BYTE type;BYTE xkbType;CARD16 sequenceNumber;CARD32 time;CARD8 deviceID;CARD8 pad1;CARD16 changed;CARD8 firstType;CARD8 nTypes;CARD8 firstLevelName;CARD8 nLevelNames;CARD8 pad2;CARD8 nRadioGroups;CARD8 nAliases;CARD8 changedGroupNames;CARD16 changedVirtualMods;CARD8 firstKey;CARD8 nKeys;CARD32 changedIndicators;CARD32 pad3;};
struct _xkbNewKeyboardNotify {BYTE type;BYTE xkbType;CARD16 sequenceNumber;CARD32 time;CARD8 deviceID;CARD8 oldDeviceID;CARD8 minKeyCode;CARD8 maxKeyCode;CARD8 oldMinKeyCode;CARD8 oldMaxKeyCode;CARD8 requestMajor;CARD8 requestMinor;CARD16 changed;CARD8 detail;CARD8 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;};
struct _xkbOutlineWireDesc {CARD8 nPoints;CARD8 cornerRadius;CARD16 pad;};
struct _xkbOverlayKeyWireDesc {CARD8 over[4];CARD8 under[4];};
struct _xkbOverlayRowWireDesc {CARD8 rowUnder;CARD8 nKeys;CARD16 pad1;};
struct _xkbOverlayWireDesc {CARD32 name;CARD8 nRows;CARD8 pad1;CARD16 pad2;};
struct _xkbPerClientFlags {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD16 pad1;CARD32 change;CARD32 value;CARD32 ctrlsToChange;CARD32 autoCtrls;CARD32 autoCtrlValues;};
struct _xkbPerClientFlagsReply {CARD8 type;CARD8 deviceID;CARD16 sequenceNumber;CARD32 length;CARD32 supported;CARD32 value;CARD32 autoCtrls;CARD32 autoCtrlValues;CARD32 pad1;CARD32 pad2;};
struct _xkbPointWireDesc {INT16 x;INT16 y;};
struct _xkbRowWireDesc {INT16 top;INT16 left;CARD8 nKeys;BOOL vertical;CARD16 pad;};
struct _xkbSectionWireDesc {CARD32 name;INT16 top;INT16 left;CARD16 width;CARD16 height;INT16 angle;CARD8 priority;CARD8 nRows;CARD8 nDoodads;CARD8 nOverlays;CARD16 pad;};
struct _xkbSelectEvents {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD16 affectWhich;CARD16 clear;CARD16 selectAll;CARD16 affectMap;CARD16 map;};
struct _xkbSetCompatMap {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD8 pad1;BOOL recomputeActions;BOOL truncateSI;CARD8 groups;CARD16 firstSI;CARD16 nSI;CARD16 pad2;};
struct _xkbSetControls {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD8 affectInternalMods;CARD8 internalMods;CARD8 affectIgnoreLockMods;CARD8 ignoreLockMods;CARD16 affectInternalVMods;CARD16 internalVMods;CARD16 affectIgnoreLockVMods;CARD16 ignoreLockVMods;CARD8 mkDfltBtn;CARD8 groupsWrap;CARD16 axOptions;CARD16 pad1;CARD32 affectEnabledCtrls;CARD32 enabledCtrls;CARD32 changeCtrls;CARD16 repeatDelay;CARD16 repeatInterval;CARD16 slowKeysDelay;CARD16 debounceDelay;CARD16 mkDelay;CARD16 mkInterval;CARD16 mkTimeToMax;CARD16 mkMaxSpeed;INT16 mkCurve;CARD16 axTimeout;CARD32 axtCtrlsMask;CARD32 axtCtrlsValues;CARD16 axtOptsMask;CARD16 axtOptsValues;BYTE perKeyRepeat[32];};
struct _xkbSetDebuggingFlags {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 msgLength;CARD16 pad;CARD32 affectFlags;CARD32 flags;CARD32 affectCtrls;CARD32 ctrls;};
struct _xkbSetDebuggingFlagsReply {BYTE type;CARD8 pad0;CARD16 sequenceNumber;CARD32 length;CARD32 currentFlags;CARD32 currentCtrls;CARD32 supportedFlags;CARD32 supportedCtrls;CARD32 pad1;CARD32 pad2;};
struct _xkbSetDeviceInfo {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD8 firstBtn;CARD8 nBtns;CARD16 change;CARD16 nDeviceLedFBs;};
struct _xkbSetGeometry {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD8 nShapes;CARD8 nSections;CARD32 name;CARD16 widthMM;CARD16 heightMM;CARD16 nProperties;CARD16 nColors;CARD16 nDoodads;CARD16 nKeyAliases;CARD8 baseColorNdx;CARD8 labelColorNdx;CARD16 pad;};
struct _xkbSetIndicatorMap {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD16 pad1;CARD32 which;};
struct _xkbSetMap {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD16 present;CARD16 flags;CARD8 minKeyCode;CARD8 maxKeyCode;CARD8 firstType;CARD8 nTypes;CARD8 firstKeySym;CARD8 nKeySyms;CARD16 totalSyms;CARD8 firstKeyAct;CARD8 nKeyActs;CARD16 totalActs;CARD8 firstKeyBehavior;CARD8 nKeyBehaviors;CARD8 totalKeyBehaviors;CARD8 firstKeyExplicit;CARD8 nKeyExplicit;CARD8 totalKeyExplicit;CARD8 firstModMapKey;CARD8 nModMapKeys;CARD8 totalModMapKeys;CARD8 firstVModMapKey;CARD8 nVModMapKeys;CARD8 totalVModMapKeys;CARD16 virtualMods;};
struct _xkbSetNamedIndicator {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD16 ledClass;CARD16 ledID;CARD16 pad1;CARD32 indicator;BOOL setState;BOOL on;BOOL setMap;BOOL createMap;CARD8 pad2;CARD8 flags;CARD8 whichGroups;CARD8 groups;CARD8 whichMods;CARD8 realMods;CARD16 virtualMods;CARD32 ctrls;};
struct _xkbSetNames {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 deviceSpec;CARD16 virtualMods;CARD32 which;CARD8 firstType;CARD8 nTypes;CARD8 firstKTLevel;CARD8 nKTLevels;CARD32 indicators;CARD8 groupNames;CARD8 nRadioGroups;CARD8 firstKey;CARD8 nKeys;CARD8 nKeyAliases;CARD8 pad1;CARD16 totalKTLevelNames;};
struct _xkbShapeDoodadWireDesc {CARD32 name;CARD8 type;CARD8 priority;INT16 top;INT16 left;INT16 angle;CARD8 colorNdx;CARD8 shapeNdx;CARD16 pad1;CARD32 pad2;};
struct _xkbShapeWireDesc {CARD32 name;CARD8 nOutlines;CARD8 primaryNdx;CARD8 approxNdx;CARD8 pad;};
struct _xkbStateNotify {BYTE type;BYTE xkbType;CARD16 sequenceNumber;CARD32 time;CARD8 deviceID;CARD8 mods;CARD8 baseMods;CARD8 latchedMods;CARD8 lockedMods;CARD8 group;INT16 baseGroup;INT16 latchedGroup;CARD8 lockedGroup;CARD8 compatState;CARD8 grabMods;CARD8 compatGrabMods;CARD8 lookupMods;CARD8 compatLookupMods;CARD16 ptrBtnState;CARD16 changed;CARD8 keycode;CARD8 eventType;CARD8 requestMajor;CARD8 requestMinor;};
struct _xkbSymInterpretWireDesc {CARD32 sym;CARD8 mods;CARD8 match;CARD8 virtualMod;CARD8 flags;xkbActionWireDesc act;};
struct _xkbSymMapWireDesc {CARD8 ktIndex[4];CARD8 groupInfo;CARD8 width;CARD16 nSyms;};
struct _xkbTextDoodadWireDesc {CARD32 name;CARD8 type;CARD8 priority;INT16 top;INT16 left;INT16 angle;CARD16 width;CARD16 height;CARD8 colorNdx;CARD8 pad1;CARD16 pad2;};
struct _xkbUseExtension {CARD8 reqType;CARD8 xkbReqType;CARD16 length;CARD16 wantedMajor;CARD16 wantedMinor;};
struct _xkbUseExtensionReply {BYTE type;BOOL supported;CARD16 sequenceNumber;CARD32 length;CARD16 serverMajor;CARD16 serverMinor;CARD32 pad1;CARD32 pad2;CARD32 pad3;CARD32 pad4;CARD32 pad5;};
struct _xkbVModMapWireDesc {CARD8 key;CARD8 pad;CARD16 vmods;};
struct _xkmActionDesc {CARD8 type;CARD8 data[7];};
struct _xkmAnyDoodadDesc {CARD8 type;CARD8 priority;INT16 top;INT16 left;CARD16 pad1;CARD32 pad2;CARD32 pad3;};
struct _xkmBehaviorDesc {CARD8 type;CARD8 data;CARD16 pad;};
union _xkmDoodadDesc {xkmAnyDoodadDesc any;xkmShapeDoodadDesc shape;xkmTextDoodadDesc text;xkmIndicatorDoodadDesc indicator;xkmLogoDoodadDesc logo;};
struct _xkmFileInfo {CARD8 type;CARD8 min_kc;CARD8 max_kc;CARD8 num_toc;CARD16 present;CARD16 pad;};
struct _xkmGeometryDesc {CARD16 width_mm;CARD16 height_mm;CARD8 base_color_ndx;CARD8 label_color_ndx;CARD16 num_properties;CARD16 num_colors;CARD16 num_shapes;CARD16 num_sections;CARD16 num_doodads;CARD16 num_key_aliases;CARD16 pad1;};
struct _xkmIndicatorDoodadDesc {CARD8 type;CARD8 priority;INT16 top;INT16 left;CARD8 shape_ndx;CARD8 on_color_ndx;CARD8 off_color_ndx;CARD8 pad1;CARD16 pad2;CARD32 pad3;};
struct _xkmIndicatorMapDesc {CARD8 indicator;CARD8 flags;CARD8 which_mods;CARD8 real_mods;CARD16 vmods;CARD8 which_groups;CARD8 groups;CARD32 ctrls;};
struct _xkmKTMapEntryDesc {CARD8 level;CARD8 realMods;CARD16 virtualMods;};
struct _xkmKeyDesc {CARD8 name[4];INT16 gap;CARD8 shape_ndx;CARD8 color_ndx;};
struct _xkmKeySymMapDesc {CARD8 width;CARD8 num_groups;CARD8 modifier_map;CARD8 flags;};
struct _xkmKeyTypeDesc {CARD8 realMods;CARD8 numLevels;CARD16 virtualMods;CARD8 nMapEntries;CARD8 nLevelNames;CARD8 preserve;CARD8 pad;};
struct _xkmLogoDoodadDesc {CARD8 type;CARD8 priority;INT16 top;INT16 left;INT16 angle;CARD8 color_ndx;CARD8 shape_ndx;CARD16 pad;CARD32 pad1;};
struct _xkmModsDesc {CARD8 realMods;CARD8 pad;CARD16 virtualMods;};
struct _xkmOutlineDesc {CARD8 num_points;CARD8 corner_radius;CARD16 pad;};
struct _xkmOverlayDesc {CARD8 num_rows;CARD8 pad1;CARD16 pad2;};
struct _xkmOverlayKeyDesc {char over[4];char under[4];};
struct _xkmOverlayRowDesc {CARD8 row_under;CARD8 num_keys;CARD16 pad;};
struct _xkmPointDesc {INT16 x;INT16 y;};
struct _xkmRowDesc {INT16 top;INT16 left;CARD8 num_keys;BOOL vertical;CARD16 pad;};
struct _xkmSectionDesc {INT16 top;INT16 left;CARD16 width;CARD16 height;INT16 angle;CARD8 priority;CARD8 num_rows;CARD8 num_doodads;CARD8 num_overlays;CARD16 pad2;};
struct _xkmSectionInfo {CARD16 type;CARD16 format;CARD16 size;CARD16 offset;};
struct _xkmShapeDesc {CARD8 num_outlines;CARD8 primary_ndx;CARD8 approx_ndx;CARD8 pad;};
struct _xkmShapeDoodadDesc {CARD8 type;CARD8 priority;INT16 top;INT16 left;INT16 angle;CARD8 color_ndx;CARD8 shape_ndx;CARD16 pad;CARD32 pad1;};
struct _xkmSymInterpretDesc {CARD32 sym;CARD8 mods;CARD8 match;CARD8 virtualMod;CARD8 flags;CARD8 actionType;CARD8 actionData[7];};
struct _xkmTextDoodadDesc {CARD8 type;CARD8 priority;INT16 top;INT16 left;INT16 angle;CARD16 width;CARD16 height;CARD8 color_ndx;CARD8 pad1;CARD16 pad2;};
struct _xkmVModMapDesc {CARD8 key;CARD8 pad;CARD16 vmods;};
struct _xwd_file_header {CARD32 header_size;CARD32 file_version;CARD32 pixmap_format;CARD32 pixmap_depth;CARD32 pixmap_width;CARD32 pixmap_height;CARD32 xoffset;CARD32 byte_order;CARD32 bitmap_unit;CARD32 bitmap_bit_order;CARD32 bitmap_pad;CARD32 bits_per_pixel;CARD32 bytes_per_line;CARD32 visual_class;CARD32 red_mask;CARD32 green_mask;CARD32 blue_mask;CARD32 bits_per_rgb;CARD32 colormap_entries;CARD32 ncolors;CARD32 window_width;CARD32 window_height;CARD32 window_x;CARD32 window_y;CARD32 window_bdrwidth;};
struct _zlibbuffer {char *bufbase;char *bufend;char *bufptr;int bufcnt;};
struct abort_inps {struct inpcb *abortinp;};
enum accept_stat {SUCCESS = 0x0,PROG_UNAVAIL = 0x1,PROG_MISMATCH = 0x2,PROC_UNAVAIL = 0x3,GARBAGE_ARGS = 0x4,SYSTEM_ERR = 0x5,};
struct accepted_reply {struct opaque_auth ar_verf;enum accept_stat ar_stat;union accepted_reply::$2CD25CFA8BA17FB153F710010E0036F6 ru;};
union accepted_reply::$2CD25CFA8BA17FB153F710010E0036F6 {struct accepted_reply::$2CD25CFA8BA17FB153F710010E0036F6::$7876EA82F4E6B7A53E0A8033DA8F05A4 AR_versions;struct accepted_reply::$2CD25CFA8BA17FB153F710010E0036F6::$BFD7413E14FC21CAB05150D69A0647C0 AR_results;};
struct accepted_reply::$2CD25CFA8BA17FB153F710010E0036F6::$7876EA82F4E6B7A53E0A8033DA8F05A4 {u_int low;u_int high;};
struct accepted_reply::$2CD25CFA8BA17FB153F710010E0036F6::$BFD7413E14FC21CAB05150D69A0647C0 {caddr_t where;xdrproc_t proc;};
struct accessdata_dn {unsigned __int16 acc_accl;unsigned __int8 acc_acc[40];unsigned __int16 acc_passl;unsigned __int8 acc_pass[40];unsigned __int16 acc_userl;unsigned __int8 acc_user[40];};
struct acct {char ac_comm[8];comp_t ac_io;comp_t ac_utime;comp_t ac_stime;comp_t ac_etime;time_t ac_btime;uid_t ac_uid;gid_t ac_gid;comp_t ac_mem;comp_t ac_rw;dev_t ac_tty;char ac_flag;char ac_stat;};
struct acl {int acl_magic;int acl_num;int acl_alloc_size;acl_entry_t acl_current;acl_entry_t acl_first;attribute_t *attr_data;};
struct acl_entry {acle_t *entry;void *head;struct acl_entry *next;struct acl_entry *prev;int acl_magic;int size;};
typedef struct acl_entry *acl_entry_t;
typedef acl_tag_t acl_entry_type;
typedef union $EACB97323E62441420BFD417B0734C6F acl_id_type;
typedef struct $78587EBAF47C7D4EAE70335A8633B794 acl_ir_t;
typedef uint_t acl_perm_t;
typedef acl_perm_t *acl_permset_t;
typedef struct acl *acl_t;
typedef uint_t acl_tag_t;
typedef acl_tag_t acl_tag_type;
typedef uint_t acl_type_t;
typedef struct $16EBA84B087327616B04F244BC938485 acl_unix_perm_t;
typedef struct $62310D9A7DE8EE6E6A442F084635BBB3 acle_t;
typedef struct $1A75DE7C91D4A60723CEFBFCC5E29E67 aclenthead_t;
struct addr_range {ulong start;ulong end;};
typedef struct $FB072D968CB0AF5035597B3EA817C0B9 addr_range_t;
typedef char *addr_t;
struct addressconf {caddr_t ac_base;unsigned int ac_flags;};
struct addrinfo {int ai_flags;int ai_family;int ai_socktype;int ai_protocol;size_t ai_addrlen;char *ai_canonname;struct sockaddr *ai_addr;struct addrinfo *ai_next;};
struct addrmask {int a_addr;int a_mask;};
struct adspecreq {char ifr_name[16];u_long version;tcntl_error_code_t error;u_int adspec_len;};
struct advfs_args {char *fspec;int exflags;uid_t exroot;unsigned int fsid;};
typedef struct $104E341BD21B9280B55F0EE66954F1D8 advfs_opT;
struct aentry {char config_name[80];char bc[2];int mode;char username[80];uid_t user;char groupname[80];gid_t group;char dirname[80];int ae_major;int ae_minor;char dev_name[80];};
struct aio_completion {struct aiocb *aio_aiocb;ssize_t aio_result;int aio_error;};
struct aio_completion_data {struct aiocb *aio_aiocb;ssize_t aio_result;int aio_error;};
typedef struct aio_completion_data aio_completion_t;
struct aio_cpu {int aio_start;int aio_next;int aio_h2o;int aio_maxi;};
typedef struct aio_cpu *aio_cpu_p;
typedef struct aio_cpu aio_cpu_t;
struct aio_group {union aio_group::$559EFC9A3C49AE460F66AFC488D58F7A _aio_preempt_un;union aio_group::$382959F916BFF545D0468CC92BD3F13A _aio_unk;union aio_group::$83AD89DC6B51F72A445C2F3A74B00EB8 _aio_unu;aio_completion_t aio_results[1];};
union aio_group::$382959F916BFF545D0468CC92BD3F13A {volatile int _kindex;char _pad1[64];};
union aio_group::$559EFC9A3C49AE460F66AFC488D58F7A {aio_preempt_t _preempt_un;char _pad1[64];};
union aio_group::$83AD89DC6B51F72A445C2F3A74B00EB8 {struct aio_group::$83AD89DC6B51F72A445C2F3A74B00EB8::$9B0F3F8D2B180CE573B9F12FFFB7E20F _aio_unu_s;volatile __int64 _udata;char _pad2[64];};
struct aio_group::$83AD89DC6B51F72A445C2F3A74B00EB8::$9B0F3F8D2B180CE573B9F12FFFB7E20F {volatile int _uindex;volatile int _ugen;};
typedef struct aio_group aio_group_t;
typedef unsigned int aio_key_t;
typedef union $C2AC089C8A0A3EEE32541B34B8446472 aio_preempt_t;
struct aio_result_block {int rb_idx;volatile aio_key_t rb_key;int rb_fd;pid_t rb_pid;volatile int rb_errno;volatile size_t rb_result;__int64 pad[2];int rb_driver;unsigned int rb_time;void *rb_proc;void *rb_test_list;void *rb_thdr;};
typedef struct aio_result_block *aio_result_t;
struct aiocb {int aio_fildes;aio_key_t aio_key;off_t aio_offset;volatile void *aio_buf;size_t aio_nbytes;int aio_reqprio;int aio_lio_opcode;struct aiocb *aio_next;__int64 aio_reserved;struct sigevent aio_sigevent;};
typedef struct aiocb aiocb_t;
struct aiolock {int semstate;int semncnt;};
typedef struct aiolock aiolock_t;
struct alpha_float_state {__int64 r0;__int64 r1;__int64 r2;__int64 r3;__int64 r4;__int64 r5;__int64 r6;__int64 r7;__int64 r8;__int64 r9;__int64 r10;__int64 r11;__int64 r12;__int64 r13;__int64 r14;__int64 r15;__int64 r16;__int64 r17;__int64 r18;__int64 r19;__int64 r20;__int64 r21;__int64 r22;__int64 r23;__int64 r24;__int64 r25;__int64 r26;__int64 r27;__int64 r28;__int64 r29;__int64 r30;__int64 r31;};
union alpha_instruction {unsigned int word;unsigned __int8 byte[4];struct alpha_instruction::$DE8A0820C36E0FEAC3B6D11576034885 common;struct alpha_instruction::$8F821C846863ED49BCECC5C3AF200576 m_format;struct alpha_instruction::$35B9382C8D4F8F0CCE4B1B3B1D5FF6A6 b_format;struct alpha_instruction::$18930EF372DE1C89B810D4090F99D06D o_format;struct alpha_instruction::$6F146C33BE532BFF18DB8F8E374CCEC2 l_format;struct alpha_instruction::$88D206A712C8662A2113021DA31483D5 f_format;struct alpha_instruction::$7F6F828E684FA16F69F686A3DA081325 pal_format;struct alpha_instruction::$501F05BD27F80C9F2B26F47447E4EE1B j_format;};
struct alpha_instruction::$18930EF372DE1C89B810D4090F99D06D {unsigned int opcode;};
struct alpha_instruction::$35B9382C8D4F8F0CCE4B1B3B1D5FF6A6 {unsigned int opcode;};
struct alpha_instruction::$501F05BD27F80C9F2B26F47447E4EE1B {unsigned int opcode;};
struct alpha_instruction::$6F146C33BE532BFF18DB8F8E374CCEC2 {unsigned int opcode;};
struct alpha_instruction::$7F6F828E684FA16F69F686A3DA081325 {unsigned int opcode;};
struct alpha_instruction::$88D206A712C8662A2113021DA31483D5 {unsigned int opcode;};
struct alpha_instruction::$8F821C846863ED49BCECC5C3AF200576 {unsigned int opcode;};
struct alpha_instruction::$DE8A0820C36E0FEAC3B6D11576034885 {unsigned int opcode;};
struct alpha_saved_state {__int64 r0;__int64 r1;__int64 r2;__int64 r3;__int64 r4;__int64 r5;__int64 r6;__int64 r7;__int64 r8;__int64 r9;__int64 r10;__int64 r11;__int64 r12;__int64 r13;__int64 r14;__int64 r15;__int64 r19;__int64 r20;__int64 r21;__int64 r22;__int64 r23;__int64 r24;__int64 r25;__int64 r26;__int64 r27;__int64 r28;__int64 r30;__int64 ps;__int64 pc;__int64 r29;__int64 r16;__int64 r17;__int64 r18;};
struct alpha_thread_state {__int64 r0;__int64 r1;__int64 r2;__int64 r3;__int64 r4;__int64 r5;__int64 r6;__int64 r7;__int64 r8;__int64 r9;__int64 r10;__int64 r11;__int64 r12;__int64 r13;__int64 r14;__int64 r15;__int64 r16;__int64 r17;__int64 r18;__int64 r19;__int64 r20;__int64 r21;__int64 r22;__int64 r23;__int64 r24;__int64 r25;__int64 r26;__int64 r27;__int64 r28;__int64 r29;__int64 r30;__int64 pc;__int64 ps;};
struct aouthdr {coff_ushort magic;coff_ushort vstamp;coff_ushort bldrev;coff_ushort padcell;coff_long tsize;coff_long dsize;coff_long bsize;coff_addr entry;coff_addr text_start;coff_addr data_start;coff_addr bss_start;coff_uint gprmask;coff_uint fprmask;coff_long gp_value;};
typedef struct $542723AFB6E36EC8067FBC55C1BF5843 *apOptionDescList;
typedef struct $542723AFB6E36EC8067FBC55C1BF5843 apOptionDescRec;
typedef enum $692DA98D37C8EDEB497D2EE5804C196B apOptionKind;
typedef enum $937D1D6B5AFD4B22B25268EA94F00445 apValueType;
typedef int apar_t;
struct ar_hdr {char ar_name[16];char ar_date[12];char ar_uid[6];char ar_gid[6];char ar_mode[8];char ar_size[10];char ar_fmag[2];};
typedef struct $1439ADB501C666791651B9DAC694FFD6 archdr;
typedef struct _arp_blk arp_blk;
struct arp_hdr {int total_cnt;int curr_cnt;int more;int if_index;};
struct arp_info_blk {u_char hw_addr[20];struct in_addr inet_addr;int arp_flags;};
struct arpcom {struct ifnet ac_if;u_char ac_hwaddr[14];u_short ac_arphrd;u_char *ac_bcastaddr;u_int ac_flag;struct arpcom::dli_ifnet *ac_dlif;};
struct arphdr {u_short ar_hrd;u_short ar_pro;u_char ar_hln;u_char ar_pln;u_short ar_op;};
struct arpreq {struct sockaddr arp_pa;struct sockaddr arp_ha;int arp_flags;};
struct arpsrtab {struct ifnet *srt_ifp;struct in_addr srt_ip_addr;struct arpsrtab *srt_next_hash;__int16 srt_aging_timer;u_char srt_status;};
struct arptab {struct in_addr at_iaddr;struct ifnet *at_if;u_char at_hwaddr[14];u_short at_flags;__int16 at_timer;__int16 at_valid;__int16 at_retry;__int16 at_sent;struct mbuf *at_hold;};
struct atable {char config_name[80];char bc[2];int mode;char username[80];uid_t user;char groupname[80];gid_t group;char dirname[80];int at_major;int *at_minor;char *dev_name;};
struct attr_info {uchar type;uchar clu_op;uchar Rsvd[6];};
typedef struct attr_info attr_info_t;
typedef ulong_t attr_mask_t;
typedef unsigned __int64 attr_t;
struct attr_timbuf {struct timeval atime;struct timeval mtime;struct timeval ctime;};
typedef struct $3F34AB9906293F0308C7392603E69CAC attribute_t;
typedef __int16 attrtype_t;
struct aud_xdata {u_short version;u_short flags;uid_t auid;uid_t euid;gid_t egid;int gidsetsize;gid_t gidset[32];pid_t pid;mode_t mode;int client_id;int objtyp;u_int atom;u_int res_id;char info_string[80];char hdr_string[80];};
struct audiocp {u_int size;u_int offset;u_int nbytes;};
enum auth_stat {AUTH_OK = 0x0,AUTH_BADCRED = 0x1,AUTH_REJECTEDCRED = 0x2,AUTH_BADVERF = 0x3,AUTH_REJECTEDVERF = 0x4,AUTH_TOOWEAK = 0x5,AUTH_INVALIDRESP = 0x6,AUTH_FAILED = 0x7,};
typedef int auth_xxx_putent_cback(FILE *, const char *, const void *);
typedef auth_xxx_putent_cback *auth_xxx_putent_cback_ptr;
typedef struct _authcap_functab *authcap_functab_list;
typedef struct _authcap_functab authcap_functab_type;
struct authunix_parms {u_int aup_time;char *aup_machname;uid_t aup_uid;gid_t aup_gid;u_int aup_len;gid_t *aup_gids;};
struct auxv {int a_type;union auxv_data a_un;};
union auxv_data {__int64 a_val;void *a_ptr;void (*a_fcn)();};
typedef struct auxv auxv_t;
typedef __int16 axis_datum;
struct bandinfo {unsigned __int8 bi_pri;int bi_flag;};
enum basic_types {MLD_VOID_BASIC_TYPE = 0x0,MLD_CHAR_BASIC_TYPE = 0x1,MLD_SHORT_BASIC_TYPE = 0x2,MLD_INT_BASIC_TYPE = 0x3,MLD_LONG_BASIC_TYPE = 0x4,MLD_FLOAT_BASIC_TYPE = 0x5,MLD_DOUBLE_BASIC_TYPE = 0x6,MLD_LONG_DOUBLE_BASIC_TYPE = 0x7,MLD_ELLIPSES_BASIC_TYPE = 0x8,};
enum battery {BAT_GOOD = 0x0,BAT_LOW = 0x1,BAT_DISABLED = 0x2,BAT_IGNORE = 0x3,BAT_SELFTEST = 0x4,BAT_CHARGING = 0x5,};
enum battery_modes {BAT_MODE_NONE = 0x0,BAT_MODE_BAD = 0x1,BAT_MODE_FAKE = 0x2,BAT_MODE_REAL = 0x3,};
struct bdevsw {int (*d_open)();int (*d_close)();int (*d_strategy)();int (*d_dump)();int (*d_psize)();int d_flags;int (*d_ioctl)();int d_funnel;};
struct blkpids {pid_t blkpid;pid_t blkrpid;u_int blkrsys;struct blkpids *next;};
struct block_descriptor {u_char density_code;u_char nblks2;u_char nblks1;u_char nblks0;u_char reserved;u_char blklen2;u_char blklen1;u_char blklen0;};
struct block_format {u_char lba3;u_char lba2;u_char lba1;u_char lba0;};
typedef char bool;
typedef enum $B78841CC15384C7642A852FC286464A6 boolean;
typedef int boolean_t;
struct bp_address {int address_type;union bp_address::$3B940BBAFE206A608BBBF7EC1987BA49 bp_address;};
union bp_address::$3B940BBAFE206A608BBBF7EC1987BA49 {ip_addr_t ip_addr;};
typedef char *bp_fileid_t;
struct bp_getfile_arg {bp_machine_name_t client_name;bp_fileid_t file_id;};
struct bp_getfile_res {bp_machine_name_t server_name;bp_address server_address;bp_path_t server_path;};
typedef char *bp_machine_name_t;
typedef char *bp_path_t;
struct bp_whoami_arg {bp_address client_address;};
struct bp_whoami_res {bp_machine_name_t client_name;bp_machine_name_t domain_name;bp_address router_address;};
struct bpf_hdr {struct timeval bh_tstamp;u_int bh_caplen;u_int bh_datalen;u_short bh_hdrlen;};
struct bpf_insn {u_short code;u_char jt;u_char jf;int k;};
struct bpf_program {u_int bf_len;struct bpf_program::bpf_insn *bf_insns;};
struct bpf_stat {u_int bs_recv;u_int bs_drop;};
struct bpf_version {u_short bv_major;u_short bv_minor;};
struct bsd_dinode {union bsd_dinode::$274320C5051DB54B62FCA6F4150F5301 di_un;};
union bsd_dinode::$274320C5051DB54B62FCA6F4150F5301 {struct icommon di_icom;char di_qsize[128];};
struct bt459 {volatile u_int addr_low;volatile u_int addr_high;volatile u_int bt_reg;volatile u_int color_map;};
struct bt459_color_cell {unsigned __int8 dirty_cell;unsigned __int8 red;unsigned __int8 green;unsigned __int8 blue;};
struct bt459info {volatile struct bt459 *btaddr;__int16 fb_xoffset;__int16 fb_yoffset;__int16 min_dirty;__int16 max_dirty;caddr_t reset;u_int mask;u_int unit;char screen_on;char on_off;char dirty_cursor;char dirty_colormap;__int16 x_hot;__int16 y_hot;ws_color_cell cursor_fg;ws_color_cell cursor_bg;void (*enable_interrupt)();u_long bits[256];struct bt459_color_cell cells[256];};
struct bt459info2 {volatile unsigned int *setup;volatile unsigned int *data;unsigned int head_mask;__int16 fb_xoffset;__int16 fb_yoffset;__int16 min_dirty;__int16 max_dirty;caddr_t reset;u_int mask;u_int unit;char screen_on;char on_off;char dirty_cursor;char dirty_colormap;__int16 x_hot;__int16 y_hot;ws_color_cell cursor_fg;ws_color_cell cursor_bg;void (*enable_interrupt)();u_long bits[256];struct bt459_color_cell cells[256];};
struct bt459type {volatile struct bt459 *btaddr;__int16 fb_xoffset;__int16 fb_yoffset;__int16 min_dirty;__int16 max_dirty;caddr_t reset;u_int mask;};
struct bt459type2 {volatile unsigned int *setup;volatile unsigned int *data;unsigned int head_mask;__int16 fb_xoffset;__int16 fb_yoffset;__int16 min_dirty;__int16 max_dirty;caddr_t reset;u_int mask;};
typedef struct $40A8640879409487CC655CBB9B1A193A bucket_stats_t;
struct buf {int b_flags;int b_hints;struct buf *b_forw;struct buf *b_back;struct buf *av_forw;struct buf *av_back;struct buf *b_blockf;struct buf **b_blockb;int b_bcount;int b_bufsize;__int16 b_error;__int16 b_eei;dev_t b_dev;union buf::$0F1DB3A006AB6576E1AAE19DB7F32C17 b_un;daddr_t b_lblkno;daddr_t b_blkno;int b_resid;struct buf::proc *b_proc;struct buf *b_hash_chain;void (*b_iodone)(struct buf *);struct buf::vm_page *b_pagelist;struct buf::vnode *b_vp;struct buf::vnode *b_rvp;struct buf::ucred *b_rcred;struct buf::ucred *b_wcred;int b_dirtyoff;int b_dirtyend;union buf::$CA4FB8FE318C585F687B42F928F14D2F b_driver_un_1;union buf::$CA4FB8FE318C585F687B42F928F14D2F b_driver_un_2;};
union buf::$0F1DB3A006AB6576E1AAE19DB7F32C17 {caddr_t b_addr;int *b_words;struct buf::$0F1DB3A006AB6576E1AAE19DB7F32C17::fs *b_fs;struct filsys *b_s5fs;struct buf::$0F1DB3A006AB6576E1AAE19DB7F32C17::csum *b_cs;struct buf::$0F1DB3A006AB6576E1AAE19DB7F32C17::cg *b_cg;struct buf::$0F1DB3A006AB6576E1AAE19DB7F32C17::dinode *b_dino;struct s5dinode *b_s5dino;daddr_t *b_daddr;};
union buf::$CA4FB8FE318C585F687B42F928F14D2F {__int64 longvalue;void *pointvalue;daddr_t diskaddr;time_t timevalue;};
struct bufhd {int b_flags;struct bufhd::buf *b_forw;struct bufhd::buf *b_back;u_long bhd_stamp;};
struct bus {u_long *bus_mbox;struct bus *nxt_bus;struct bus::controller *ctlr_list;struct bus *bus_hd;struct bus *bus_list;int bus_type;char *bus_name;int bus_num;int slot;char *connect_bus;int connect_num;int (*confl1)();int (*confl2)();char *pname;struct bus::port *port;int (**intr)();int alive;struct bus::bus_framework *framework;char *driver_name;void *private[8];void *conn_priv[8];void *bus_bridge_dma;void *bus_sw;void *bus_slot;int (*unconfl1)();u_int phys_bus_num;u_int phys_subbus_num;void *bus_ehm_config_ptr;void *rsvd[2];};
typedef char *bus_addr_t;
struct bus_config {__int64 revision;char subsystem_name[30];char bus_name[30];int (*confl1)();int (*confl2)();int (*unconfl1)();ulong flags;__int64 bus_num;__int64 slot_num;__int64 parent_instance;};
struct bus_ctlr_common {u_long *mbox;struct bus_ctlr_common::bus *bus_hd;u_long pad1;u_long pad2;u_long pad3;int type;};
typedef struct bus_ctlr_common *bus_ctlr_common_t;
struct bus_funcs {void (*do_config)();int (*get_config)();void (*enable_option)();void (*disable_option)();io_handle_t (*busphys_to_iohandle)();dma_map_info_t (*dma_get_maps)();};
struct bus_info_hdr {struct common_bus_info *common_infop;};
struct bytes_from_index_format {u_char cyl2;u_char cyl1;u_char cyl0;u_char head;u_char bfi3;u_char bfi2;u_char bfi1;u_char bfi0;};
typedef struct $9917E19D8B3D4E8031BD38F2DA53C01F cache_policy_config_t;
typedef char *caddr_t;
struct call_body {u_int cb_rpcvers;u_int cb_prog;u_int cb_vers;u_int cb_proc;struct opaque_auth cb_cred;struct opaque_auth cb_verf;};
struct callback {void (*func)(int, int, ulong, ulong);int point;int order;ulong arg;};
struct callout {__int64 c_time;caddr_t c_arg;int (*c_func)();struct callout *c_next;};
struct cat_ent {char cat_name[32];CAT_PTR *next;simple_lock_data_t slock;__int64 prev_mem_id;CAT_PTR *prev;};
struct cat_ptr {struct cat_ptr *next;MEM_DESC *member;};
struct cat_rel {FIND_INFO find_info;CAT_ENT *categories;uint count;simple_lock_data_t slock;__int64 member_id;CAT_PTR *prev;};
typedef unsigned __int8 cc_t;
typedef struct $724CF3B74FBFB640DA26FB108EE83E8D cchar_t;
struct cd_defs {uid_t def_uid;gid_t def_gid;mode_t def_fperm;mode_t def_dperm;int dirsperm;};
struct cd_idmap {unsigned __int16 from_id;uid_t to_uid;gid_t to_gid;};
struct cd_suf_ce {struct cd_suf_header hdr;unsigned __int8 cont_lbn_lsb[4];unsigned __int8 cont_lbn_msb[4];unsigned __int8 cont_offset_lsb[4];unsigned __int8 cont_offset_msb[4];unsigned __int8 cont_len_lsb[4];unsigned __int8 cont_len_msb[4];};
struct cd_suf_er {struct cd_suf_header hdr;unsigned __int8 er_len_id;unsigned __int8 er_len_des;unsigned __int8 er_len_src;unsigned __int8 er_ext_ver;unsigned __int8 er_data[1];};
struct cd_suf_header {unsigned __int8 suf_sig_word[2];unsigned __int8 suf_length;unsigned __int8 suf_version;};
struct cd_suf_sp {struct cd_suf_header hdr;unsigned __int8 sp_checkbytes[2];unsigned __int8 sp_len_skp;};
struct cd_suf_st {struct cd_suf_header hdr;};
typedef struct $676D60C33FEF0A0B0A4C99269E1D83CF cdac_t;
struct cdevsw {int (*d_open)();int (*d_close)();int (*d_read)();int (*d_write)();int (*d_ioctl)();int (*d_stop)();int (*d_reset)();struct cdevsw::tty *d_ttys;int (*d_select)();int (*d_mmap)();int d_funnel;int (*d_segmap)();int d_flags;};
struct cdfs_args {char *fspec;int exflags;uid_t exroot;int flags;int version;uid_t default_uid;gid_t default_gid;mode_t default_fmode;mode_t default_dmode;int map_uid_ct;map_id *map_uid;int map_gid_ct;map_id *map_gid;};
typedef struct $302B25F756BB244E094BD511B92C6034 cfg_attr_t;
typedef int (*cfg_deprtn_t)(char *subsys, int op, ulong arg);
struct cfg_deptab_elem {char name[16];unsigned int count;};
typedef int (*cfg_entrypt_t)(cfg_op_t, caddr_t, ulong, caddr_t, ulong);
typedef struct $7E7454A81A9E236B40E0A2AAAA8E6BAD cfg_handle_t;
typedef struct $286685DE7481B1DFAAFD94C57C4D4578 cfg_init_pack_t;
typedef int cfg_op_t;
typedef struct $9D27B91CE16DA3CD2ECB22AEF02B7B1E cfg_pack_t;
typedef int cfg_status_t;
typedef struct $F7142754C0787A485CC65A74C3199286 cfg_subsys_attr_t;
typedef int chan_t;
typedef struct $BDC2BC4E1FC4E3665C531F87A904F1CB changeDeviceNotify;
typedef char *charptr;
struct chtab;
typedef unsigned __int64 chtype;
typedef struct $6091004A02C5B6DFDF6C8E41411B68A2 cl_flowinfo_t;
typedef struct partition_handle *class_apar_handle_t;
struct class_cpu_list {int class_clock_ticks;int class_percent;};
struct class_info {char name[20];struct resource_limits limits;int num_members;};
struct class_member {__int16 type;__int16 external;int id;int next_member;int prev_member;};
struct class_member_info {__int16 type;int id;};
struct class_param {char name[20];struct resource_limits limits;int num_members;int first_member;int last_member;int future_expansion[6];};
enum clnt_stat {RPC_SUCCESS = 0x0,RPC_CANTENCODEARGS = 0x1,RPC_CANTDECODERES = 0x2,RPC_CANTSEND = 0x3,RPC_CANTRECV = 0x4,RPC_TIMEDOUT = 0x5,RPC_INTR = 0x12,RPC_VERSMISMATCH = 0x6,RPC_AUTHERROR = 0x7,RPC_PROGUNAVAIL = 0x8,RPC_PROGVERSMISMATCH = 0x9,RPC_PROCUNAVAIL = 0xA,RPC_CANTDECODEARGS = 0xB,RPC_SYSTEMERROR = 0xC,RPC_UNKNOWNHOST = 0xD,RPC_UNKNOWNPROTO = 0x11,RPC_PMAPFAILURE = 0xE,RPC_PROGNOTREGISTERED = 0xF,RPC_FAILED = 0x10,};
typedef int clock_t;
typedef int clockid_t;
struct clu_gen_info {int clu_num_of_members;memberid_t my_memberid;char *clu_name;u_long incarn;int spare;__int64 current_votes;dev_t qdisk;int qdisk_votes;char *qdisk_name;__int64 cev;struct clu_member_info *memblist;};
struct clu_info_resp {int num_clu_items;struct clu_item *itemlist;};
struct clu_item {int type;void *ptr;};
struct clu_limits {memberid_t min_membid;memberid_t max_membid;int max_sup_memb;};
struct clu_member_info {char *hostname;char *cluintername;char *cluinteraddr;char *base_version;char *clu_version;char *cnx_nodename;memberid_t memberid;int running_vers;int state;int cnx_state;int comm_state;u_long incarn;u_int csid;int expected_votes;int votes;u_int vers;u_long mtime;u_long spare[9];};
typedef enum $A829E30ADE25BA100BED3372F6628FC3 clucall_stat;
struct clucall_vector {char *name;void *ptr_to_vector;};
typedef struct $DDFFB976286AF3DF94249CFAF202E0BA cm_flags_t;
union cm_rlc {struct COMPACT_RELOC r;struct COMPACT_RELOC_C_BASE cb;struct COMPACT_RELOC_C c;struct COMPACT_RELOC_BASE b;};
typedef struct $5C351856992B7BF8131AF26B859DEFDF cm_struct;
struct cm_td {coff_uint tag;cm_flags_t flags;};
typedef struct cm_td cm_td_t;
struct cm_valid {char *cm_name;int cm_rev;};
typedef cma_t_handle cma_lib_t_attr;
typedef cma_t_handle cma_lib_t_queue;
typedef void *cma_t_address;
typedef struct CMA_T_ALERT_STATE cma_t_alert_state;
typedef cma_t_handle cma_t_attr;
typedef cma_t_natural cma_t_boolean;
typedef cma_t_handle cma_t_cond;
typedef struct timeval cma_t_date_time;
typedef enum CMA_T_DBG_STATUS cma_t_dbg_status;
typedef void (*cma_t_destructor)(cma_t_address ctx_value);
typedef enum CMA_T_DETACH_STATE cma_t_detach_state;
typedef int cma_t_errno;
typedef enum CMA_T_EXIT_STATUS cma_t_exit_status;
typedef struct CMA_T_HANDLE cma_t_handle;
typedef void (*cma_t_init_routine)(cma_t_address arg);
typedef __int64 cma_t_integer;
typedef float cma_t_interval;
typedef cma_t_natural cma_t_key;
typedef cma_t_handle cma_t_mutex;
typedef enum CMA_T_MUTEX_KIND cma_t_mutex_kind;
typedef unsigned __int64 cma_t_natural;
typedef struct CMA_T_ONCE cma_t_once;
typedef cma_t_integer cma_t_priority;
typedef enum CMA_T_SCHED_INHERIT cma_t_sched_inherit;
typedef cma_t_integer cma_t_sched_policy;
typedef cma_t_integer cma_t_scope;
typedef cma_t_address (*cma_t_start_routine)(cma_t_address arg);
typedef cma_t_integer cma_t_status;
typedef cma_t_handle cma_t_thread;
typedef void *cma_tis_addr_t;
typedef cma_tis_addr_t cma_tis_cond_t;
typedef void (*cma_tis_destructor_t)(cma_tis_addr_t value);
typedef __int64 cma_tis_key_t;
typedef cma_tis_addr_t cma_tis_mutex_t;
typedef struct cma_tis_once_tag cma_tis_once_t;
struct cma_tis_once_tag {__int64 field1;__int64 field2;__int64 field3;};
typedef cma_tis_addr_t cma_tis_thread_t;
struct cmd_arguments {char *buffer;__int64 max_buf_size;};
typedef struct cmd_arguments cmd_arguments_t;
struct cmd_elem {char cmd_name[32];int prot;int unused;};
typedef enum $72730EF3D3FAE5AA2AA0E430D56A4D43 cmfc_t;
typedef enum $3916BF5E8CEDB8D71F3B98BB138E1D94 cmfm_t;
typedef enum $8848EA370873ADDFC4367852D3779278 cmfs_t;
struct cmrlc_info;
struct cmsghdr {unsigned int cmsg_len;int cmsg_level;int cmsg_type;};
typedef __int16 cnt_t;
typedef unsigned __int64 coff_addr;
typedef char coff_byte;
typedef int coff_int;
typedef __int64 coff_long;
typedef unsigned __int64 coff_off;
typedef __int16 coff_short;
typedef unsigned __int8 coff_ubyte;
typedef unsigned int coff_uint;
typedef unsigned __int64 coff_ulong;
typedef unsigned __int16 coff_ushort;
struct colmap {unsigned __int16 color[256][3];};
struct common_bus_info {int (**intr)();io_handle_t sparse_io_base;io_handle_t sparse_mem_base;vm_offset_t dense_mem_base;};
typedef ushort comp_t;
struct compat_mod {struct compat_mod *cm_next;char cm_name[16];char cm_ld_name[16];char cm_rev[16];int cm_revision;int (*cm_configure)(int, ...);struct compat_mod *(*cm_recognizer)(struct filehdr *, ...);struct sysent *(*cm_syscall)(int, ...);char **call_name;int cm_habitat;int cm_base;int cm_nsysent;int cm_refcount;int cm_totalcount;int cm_skipcount;int cm_nsyscalls;int cm_flags;unsigned int *cm_auditmask;int *cm_stats;char *cm_trace;};
struct compat_operate {int on_flgs;int off_flgs;int skip;char svc[32];};
struct compat_query {int next;int svc;int count;int trace;char name[32];};
struct compstat {unsigned int unc_bytes;unsigned int unc_packets;unsigned int comp_bytes;unsigned int comp_packets;unsigned int inc_bytes;unsigned int inc_packets;unsigned int ratio;};
struct config_adpt {char *p_name;int p_num;char *c_name;int c_num;char c_type;char *c_ptr;__int16 c_bus_num;__int16 c_nexus_num;};
struct config_entry {struct config_entry *e_next;char e_name[100];int e_type;union config_entry::$DC6CACF6DADCEFD7590308D9DCA32B70 e_str;char e_nm_1[100];char e_nm_2[100];char e_nm_3[100];char e_nm_4[100];};
union config_entry::$DC6CACF6DADCEFD7590308D9DCA32B70 {struct bus e_bus;struct controller e_controller;struct device e_device;};
struct console_device {char protocol[20];int hose;int slot;int channel;int remote_addr;int unit;char *boot_dev_type;char *ctlr_dev_type;caddr_t srm_suffix;};
typedef struct _contextDataRec contextDataRec;
typedef struct _contextErrDataRec contextErrDataRec;
struct controller {u_long *ctlr_mbox;struct controller *nxt_ctlr;struct controller::device *dev_list;struct bus *bus_hd;struct controller::driver *driver;int ctlr_type;char *ctlr_name;int ctlr_num;char *bus_name;int bus_num;int rctlr;int slot;int alive;char *pname;struct controller::port *port;int (**intr)();caddr_t addr;caddr_t addr2;int flags;int bus_priority;int ivnum;int priority;int cmd;caddr_t physaddr;caddr_t physaddr2;void *private[8];void *conn_priv[8];void *rsvd[8];};
struct controller_config {__int64 revision;char subsystem_name[30];char bus_name[30];struct driver *devdriver;ulong flags;__int64 ctlr_num;__int64 slot_num;__int64 parent_instance;};
typedef uint64 cookie3;
typedef char cookieverf3[8];
struct core_filehdr {char magic[4];ushort_t version;ushort_t nscns;port_t tid;uint_t nthreads;int signo;char name[17];};
typedef void core_offset_t;
typedef uint_t core_prot_t;
struct core_regs {ulong_t ef_regs[33];ulong_t fp_regs[32];ulong_t fp_fpcr;};
struct core_scnhdr {ushort_t scntype;union core_scnhdr::$5F780BF330BEBCB8F39A2B4989D67284 c_u;core_offset_t *vaddr;core_size_t size;unsigned __int64 scnptr;};
union core_scnhdr::$5F780BF330BEBCB8F39A2B4989D67284 {port_t tid;core_prot_t prot;};
typedef ulong_t core_size_t;
typedef uint32 count3;
union cpid {struct cpid::$F138EC6D788A87698263B26FFDC91113 cluster_fields;pid_t ipid;};
struct cpid::$F138EC6D788A87698263B26FFDC91113 {unsigned int signbit;};
typedef union cpid cpid_t;
typedef int cpu_subtype_t;
typedef int cpu_type_t;
struct createhow3 {createmode3 mode;union createhow3::$8A6FCB6AE8ABF4547E3A1B416D5A1A41 createhow3_u;};
union createhow3::$8A6FCB6AE8ABF4547E3A1B416D5A1A41 {sattr3 obj_attributes;createverf3 verf;};
enum createmode3 {UNCHECKED = 0x0,GUARDED = 0x1,EXCLUSIVE = 0x2,};
typedef char createverf3[8];
typedef struct ucred cred_t;
struct crypt_data {char C[28];char D[28];char E[48];char KS[16][48];char block[66];char iobuf[16];};
struct cryptkeyarg {netnamestr remotename;des_block deskey;};
struct cryptkeyres {keystatus status;union cryptkeyres::$EF36972044157FC290EE2FE4EF835697 cryptkeyres_u;};
union cryptkeyres::$EF36972044157FC290EE2FE4EF835697 {des_block deskey;};
struct cstate {struct cstate *cs_next;u_short cs_hlen;u_char cs_id;u_char cs_filler;union cstate::$C1ECA9B423EC5B7361A4655A59E4E09D slcs_u;};
union cstate::$C1ECA9B423EC5B7361A4655A59E4E09D {char csu_hdr[188];struct ip csu_ip;};
typedef struct $A773303EC658E8007585349DBF7CB2DA ctlr_console_t;
struct ctrreq {char ctr_name[16];char ctr_type;union ctrreq::$5C309D6C06C2A7A8E4A31BD8C0211797 ctr_ctrs;};
union ctrreq::$5C309D6C06C2A7A8E4A31BD8C0211797 {struct estat ctrc_ether;struct dstat ctrc_ddcmp;struct fstat ctrc_fddi;struct fstatus status_fddi;struct fddiDNA_status dna_status_fddi;struct fddismt smt_fddi;struct fddimac mac_fddi;struct fddipath path_fddi;struct fddiport port_fddi;struct fddiatta atta_fddi;struct smtmib_smt smt_smt;struct smtmib_mac smt_mac;struct smtmib_path smt_path;struct smtmib_port smt_port;struct decext_mib dec_ext;struct trnchar trnchar;struct trncount trncount;struct dot5Entry dot5Entry;struct dot5StatsEntry dot5StatsEntry;struct dot5TimerEntry dot5TimerEntry;unsigned __int8 protos[512];};
struct dQBlk32 {u_int dqb_bhardlimit;u_int dqb_bsoftlimit;u_int dqb_curblocks;u_int dqb_ihardlimit;u_int dqb_isoftlimit;u_int dqb_curinodes;time_t dqb_btime;time_t dqb_itime;};
struct dQBlk64 {u_long dqb_bhardlimit;u_long dqb_bsoftlimit;u_long dqb_curblocks;u_int dqb_ihardlimit;u_int dqb_isoftlimit;u_int dqb_curinodes;u_int dqb_unused1;time_t dqb_btime;u_int dqb_unused2;time_t dqb_itime;u_int dqb_unused3;u_long dqb_unused4;};
struct d_info {char abend[8];char year;char month;char day;char hour;char minutes;char seconds;char admy;char bdmy;__int64 mod_iocn;__int64 mod_addr;__int64 mod_offa;char mod_vern[8];__int64 tocptr;__int64 len_dump;__int64 len_toc;__int64 d_flag;__int64 len_info;__int64 ab_addr;__int64 c_start;char mod_name[8];};
struct d_table {__int64 t_len;struct dt_enty ta_en;};
struct d_toc {__int64 pbn;char dname[8];__int64 dlength;};
typedef struct $45C3D3B24187DA1E651A3EFB4AA4B15F dac_t;
typedef struct $E27AB856259AFDE14CC12970A9EBC018 dacid_t;
typedef int daddr_t;
typedef struct $D379431B13F78A36F2202C5AA386190E datum;
struct db_version {unsigned __int16 vs_esiz;unsigned __int16 vrsn_number;unsigned __int16 reserved;};
typedef struct $054E83D9D1F7A4F12D5A0F144010C432 dbx_proctbl;
typedef struct $5699101927A414A19412931A739DFF3E death_pill_t;
struct dec_partid {dev_t lsm_dev;__int16 bus;__int16 adpt_num;__int16 nexus_num;__int16 bus_num;__int16 ctlr_num;__int16 rctlr_num;__int16 slave_num;__int16 unit_num;__int64 category_stat;struct dec_partid::partid_pt pt_part[8];};
struct dec_partid::partid_pt {__int64 part_blkoff;__int64 part_nblocks;int part_fstype;};
struct decext_mib {u_int esmt_station_type;u_int emac_link_state;u_int emac_ring_purger_state;u_int emac_ring_purger_enable;u_int emac_frame_strip_mode;u_int emac_ring_error_reason;u_int emac_up_nbr_dup_addr_flag;u_int emac_restricted_token_timeout;u_int eport_pmd_type[2];u_int eport_phy_state[2];u_int eport_reject_reason[2];u_int efdx_enable;u_int efdx_op;u_int efdx_state;};
typedef struct $6E10C588F65FE1827DABA3A077EC5424 decsec_ir_type;
struct defect_descriptors {union defect_descriptors::$BE4D91C3AD01BD2812F80109FBAFC410 dd_header;union defect_descriptors::$81DCCEA9BA9AC20D647849EFEB75DA1F dd_defects;};
union defect_descriptors::$81DCCEA9BA9AC20D647849EFEB75DA1F {struct bytes_from_index_format bfi[256];struct block_format blk[256];struct physical_sector_format phy[256];};
union defect_descriptors::$BE4D91C3AD01BD2812F80109FBAFC410 {struct form1_defect_list_header rdd_hdr;struct form2_defect_list_header fu_hdr;};
struct delargs {char *path;__int64 follow;struct proplistname_args *name_args;};
union des_block {struct des_block::$E577A72923D02C4B0C353C58593774EC key;char c[8];};
struct des_block::$E577A72923D02C4B0C353C58593774EC {u_int32 high;u_int32 low;};
struct dev_asg {struct dev_field ufld;struct dev_flag uflg;struct dev_field sfld;struct dev_flag sflg;};
struct dev_console {struct device *device;char protocol[40];char unitnm[16];u_int remoteid;u_int unit;caddr_t srm_suffix;};
typedef struct dev_console dev_console_t;
struct dev_eei_status {__int64 version;u_int status;u_int flags;union dev_eei_status::$2E5A8D213B8A91838A9C45C1A67E1048 arch;};
union dev_eei_status::$2E5A8D213B8A91838A9C45C1A67E1048 {struct dev_eei_status::$2E5A8D213B8A91838A9C45C1A67E1048::$DC59FFBB2DA359231E867B99EFED0580 cam;u_char data[512];};
struct dev_eei_status::$2E5A8D213B8A91838A9C45C1A67E1048::$DC59FFBB2DA359231E867B99EFED0580 {u_int cam_status;u_int scsi_status;u_char scsi_sense[504];};
struct dev_field {char *fd_name;char **fd_devs;mask_t fd_type[1];char **fd_users;};
struct dev_flag {unsigned int fg_users;};
struct dev_ioctl_req {struct console_device *consdevice;char *dsf_name;__int64 hw_id;dev_t ldevt;};
typedef struct dev_ioctl_req dev_ioctl_req_t;
typedef int dev_t;
struct dev_trans_req {int dt_version;int dt_flags;int dt_opcode;dev_t dt_ldevt;char *dt_console_str;char *dt_dsf_name;__int64 dt_hw_id;};
typedef struct dev_trans_req dev_trans_req_t;
union devgeom {struct devgeom::$19400401A9807A93F2287943D3E0B184 geom_info;unsigned __int8 pad[108];};
struct devgeom::$19400401A9807A93F2287943D3E0B184 {unsigned __int64 dev_size;unsigned __int16 ntracks;unsigned __int16 nsectors;unsigned __int16 ncylinders;unsigned __int64 attributes;unsigned __int64 sector_size;unsigned __int64 min_trans;unsigned __int64 max_trans;unsigned __int64 prefer_trans;unsigned int headswitch;unsigned int trkseek;unsigned int acylinders;unsigned __int16 rpm;unsigned __int16 interleave;unsigned __int16 trackskew;unsigned __int16 sparespertrack;unsigned __int16 sparespercyl;unsigned __int16 cylskew;};
struct devget {__int16 category;__int16 bus;char interface[8];char device[8];__int16 adpt_num;__int16 nexus_num;__int16 bus_num;__int16 ctlr_num;__int16 rctlr_num;__int16 slave_num;char dev_name[8];__int16 unit_num;unsigned int soft_count;unsigned int hard_count;__int64 stat;__int64 category_stat;};
struct device {struct device *nxt_dev;struct controller *ctlr_hd;char *dev_type;char *dev_name;int logunit;int unit;char *ctlr_name;int ctlr_num;int alive;void *private[8];void *conn_priv[8];void *rsvd[8];};
typedef struct $FF9246841A32B78E17B3644398C154C0 deviceButtonStateNotify;
typedef struct $95F74D7453875C15752E25CB7F1BF0CB deviceFocus;
typedef struct $A4EF4A77E40471EF410BD1BFBD9E090A deviceKeyButtonPointer;
typedef struct $B2D1347A7314B3F7BD8A6C26E40DE0B3 deviceKeyStateNotify;
typedef struct $749257863A78ACF83BA10F9F553F4560 deviceMappingNotify;
typedef struct $A55E8F963C5B6AC40AFF9FD81070CC8F deviceStateNotify;
typedef struct $1BB85DE3512B339811D8B67FC16B212D deviceValuator;
struct device_buf {char *db_in;char *db_out;char db_buf[1024];};
struct device_config {__int64 revision;char device_type[30];char device_name[30];char controller_name[30];int phys_unit_num;int logical_unit_number;int controller_num;ulong flags;};
union device_info {int version;v1_device_info_t v1;uchar_t pad[1024];};
typedef union device_info device_info_t;
struct device_table {__int64 (*dt_init)(unsigned __int64);unsigned __int8 (*dt_rx_read)(void);__int64 (*dt_tx_write)(unsigned __int8);__int64 (*dt_rx_rdy)(void);__int64 (*dt_tx_rdy)(void);};
struct devicedata3 {sattr3 dev_attributes;specdata3 spec;};
typedef uint_t devs_t;
struct diagnostic_params {unsigned __int8;u_char dp_test;u_char dp_mode;u_char dp_id;u_long dp_lba;u_long dp_offset;u_long dp_length;caddr_t dp_buffer;};
struct dial_control {unsigned __int8 smoothing;unsigned __int8 threshold;};
typedef struct $971F84B72BD3F707C381B321ECE37D29 dial_event;
struct dinode {u_short di_mode;u_short di_nlink;u_short di_bcuid;u_short di_bcgid;__int64 di_qsize;time_t di_atime;int di_atspare;time_t di_mtime;int di_mtspare;time_t di_ctime;int di_ctspare;union dinode::$A48CBB58858232B73197EF559205E989 di_Mun;int di_flags;u_int di_blocks;int di_gen;int di_proplb;uid_t di_uid;gid_t di_gid;int di_spare[1];};
union dinode::$A48CBB58858232B73197EF559205E989 {struct dinode::$A48CBB58858232B73197EF559205E989::$941CBDF258D39F8F2C067478BF8A84FB di_Mb;char di_Msymlink[60];};
struct dinode::$A48CBB58858232B73197EF559205E989::$941CBDF258D39F8F2C067478BF8A84FB {daddr_t Mb_db[12];daddr_t Mb_ib[3];};
struct dirent {ino_t d_ino;ushort_t d_reclen;ushort_t d_namlen;char d_name[256];};
struct dirlist3 {entry3 *entries;int eof;};
struct dirlistplus3 {entryplus3 *entries;int eof;};
struct diropargs3 {nfs_fh3 dir;filename3 name;};
struct disklabel {u_int d_magic;__int16 d_type;__int16 d_subtype;char d_typename[16];union disklabel::$6166B1FB95699BA2C66546FC4248179F d_un;u_int d_secsize;u_int d_nsectors;u_int d_ntracks;u_int d_ncylinders;u_int d_secpercyl;u_int d_secperunit;u_short d_sparespertrack;u_short d_sparespercyl;u_int d_acylinders;u_short d_rpm;u_short d_interleave;u_short d_trackskew;u_short d_cylskew;u_int d_headswitch;u_int d_trkseek;u_int d_flags;u_int d_drivedata[5];u_int d_spare[5];u_int d_magic2;u_short d_checksum;u_short d_npartitions;u_int d_bbsize;u_int d_sbsize;struct partition d_partitions[8];};
union disklabel::$6166B1FB95699BA2C66546FC4248179F {char un_d_packname[16];struct disklabel::$6166B1FB95699BA2C66546FC4248179F::$92EBF5BC2658A7548750D664F561A810 un_b;};
struct disklabel::$6166B1FB95699BA2C66546FC4248179F::$92EBF5BC2658A7548750D664F561A810 {char *un_d_boot0;char *un_d_boot1;};
struct dispatch {unsigned __int16 addr;__int16 nbytes;char up;char down;char left;char right;__int16 width;};
struct div_t {int quot;int rem;};
struct dkacc {__int16 dk_opcode;__int64 dk_lbn;__int64 dk_length;unsigned int dk_status;unsigned int dk_flags;};
struct dkbad {int bt_csn;u_short bt_mbz;u_short bt_flag;struct dkbad::bt_bad bt_bad[126];};
struct dkbad::bt_bad {u_short bt_cyl;u_short bt_trksec;};
struct dkget {__int16 dk_type;__int16 dk_dsreg;__int16 dk_erreg;__int16 dk_resid;};
struct dkop {__int16 dk_op;daddr_t dk_count;};
typedef struct $6F3B6EE1A86AB005D2DEBAB1CDF27F6A dl_attach_req_t;
typedef struct $4DDB248A89871713B25DC329FBB14C64 dl_bind_ack_t;
typedef struct $064D8376BF0C95A3A86F0FEB3567FA41 dl_bind_req_t;
typedef struct $B6A8EBEB815553007114A887B4B2E7C6 dl_connect_con_t;
typedef struct $74C0290E199C117012DFA083CCBB8B51 dl_connect_ind_t;
typedef struct $A1F6453E7DD120CA7ED5711A4386CED6 dl_connect_req_t;
typedef struct $11A8CC0B8E4BFFC971A7BD5642BC979A dl_connect_res_t;
typedef struct $96503EDF7296EF31DB8BFCA02F4893DF dl_data_ack_ind_t;
typedef struct $D0FB49A2660D0A12B9EC6B30D71AC69A dl_data_ack_req_t;
typedef struct $07DA1A18C479E9B164BC5DAA3FF0707A dl_data_ack_status_ind_t;
typedef struct $5AD81BB1BC598F149BFF9BA2F89E92B1 dl_data_ind_t;
typedef struct $5AD81BB1BC598F149BFF9BA2F89E92B1 dl_data_req_t;
typedef struct $5AD81BB1BC598F149BFF9BA2F89E92B1 dl_detach_req_t;
typedef struct $6BFA51CDE87C18887CF0E894D99FEF51 dl_disabmulti_req_t;
typedef struct $1AA6B00D5359D5BC539F09B83E701119 dl_disconnect_ind_t;
typedef struct $C61F878E5DD6D9A462D542BE0FF7BC7F dl_disconnect_req_t;
typedef struct $6BFA51CDE87C18887CF0E894D99FEF51 dl_enabmulti_req_t;
typedef struct $68BCAAD9BABFC19D1B420336AA17E982 dl_error_ack_t;
typedef struct $73B2556C90F6484D7441C896F70C955A dl_get_statistics_ack_t;
typedef struct $5AD81BB1BC598F149BFF9BA2F89E92B1 dl_get_statistics_req_t;
typedef struct $AD6358E986BFA8D7843831D8D238B4B5 dl_info_ack_t;
typedef struct $5AD81BB1BC598F149BFF9BA2F89E92B1 dl_info_req_t;
typedef struct $9ADB35CC19CE691D0031EBD1B03A7BD9 dl_ok_ack_t;
typedef struct $6BFA51CDE87C18887CF0E894D99FEF51 dl_phys_addr_ack_t;
typedef struct $2A5DFF74EC698EEE5063958975E2158B dl_phys_addr_req_t;
typedef struct $5B0B69E4533447D310F7EA13EBFB5AE7 dl_priority_t;
typedef struct $31922ACD1CFB99982B39C63C8B167B10 dl_promiscoff_req_t;
typedef struct $31922ACD1CFB99982B39C63C8B167B10 dl_promiscon_req_t;
typedef struct $5B0B69E4533447D310F7EA13EBFB5AE7 dl_protect_t;
typedef struct $452B50667C26CE7D018DF24891B25CAA dl_qos_cl_range1_t;
typedef struct $6C1E1BB9653D0488EEBD4494DC269AA4 dl_qos_cl_sel1_t;
typedef struct $77BBECB7BEBA0550DE1594CCD5BD4184 dl_qos_co_range1_t;
typedef struct $47089E63379DB1872B48665921C4055F dl_qos_co_sel1_t;
typedef struct $96503EDF7296EF31DB8BFCA02F4893DF dl_reply_ind_t;
typedef struct $D0FB49A2660D0A12B9EC6B30D71AC69A dl_reply_req_t;
typedef struct $07DA1A18C479E9B164BC5DAA3FF0707A dl_reply_status_ind_t;
typedef struct $ABA396D28A226614C54536A344D671C2 dl_reply_update_req_t;
typedef struct $07DA1A18C479E9B164BC5DAA3FF0707A dl_reply_update_status_ind_t;
typedef struct $5AD81BB1BC598F149BFF9BA2F89E92B1 dl_reset_con_t;
typedef struct $751A4B90941D2162C7D8D47FB414FF8C dl_reset_ind_t;
typedef struct $5AD81BB1BC598F149BFF9BA2F89E92B1 dl_reset_req_t;
typedef struct $5AD81BB1BC598F149BFF9BA2F89E92B1 dl_reset_res_t;
typedef struct $C8A40039767768A6490F61C7EA87ECA9 dl_resilience_t;
typedef struct $6BFA51CDE87C18887CF0E894D99FEF51 dl_set_phys_addr_req_t;
typedef struct $B874138C81AAAC24C65D5B7A6CAE0C97 dl_subs_bind_ack_t;
typedef struct $8AB510C5B77638AABE0930026E6C5B0E dl_subs_bind_req_t;
typedef struct $B874138C81AAAC24C65D5B7A6CAE0C97 dl_subs_unbind_req_t;
typedef struct $26F1D6D56207344432074B51DE844734 dl_test_con_t;
typedef struct $26F1D6D56207344432074B51DE844734 dl_test_ind_t;
typedef struct $DAEE883EEEE28A583262B4A6FD239CBF dl_test_req_t;
typedef struct $DAEE883EEEE28A583262B4A6FD239CBF dl_test_res_t;
typedef struct $82E097767125B3AF2E9A279F52FE60E6 dl_through_t;
typedef struct $1BE3AC7E389F4E6123B24645B06E06D7 dl_token_ack_t;
typedef struct $5AD81BB1BC598F149BFF9BA2F89E92B1 dl_token_req_t;
typedef struct $82E097767125B3AF2E9A279F52FE60E6 dl_transdelay_t;
typedef struct $9DA379BEA803EBF33FD429DDCADF26DD dl_uderror_ind_t;
typedef struct $7FF1C340C04B1FA877121AD4AA98CED6 dl_udqos_req_t;
typedef struct $5AD81BB1BC598F149BFF9BA2F89E92B1 dl_unbind_req_t;
typedef struct $95D90088441391B9D13BDE635D76FEBC dl_unitdata_ind_t;
typedef struct $1960B4B7E6B71DFE8C07CC30EAA9E7F8 dl_unitdata_req_t;
typedef struct $034953B446088FAEEEC9E3F04F4B28E0 dl_x25data_ind_t;
typedef struct $034953B446088FAEEEC9E3F04F4B28E0 dl_x25data_req_t;
typedef struct $26F1D6D56207344432074B51DE844734 dl_xid_con_t;
typedef struct $26F1D6D56207344432074B51DE844734 dl_xid_ind_t;
typedef struct $DAEE883EEEE28A583262B4A6FD239CBF dl_xid_req_t;
typedef struct $DAEE883EEEE28A583262B4A6FD239CBF dl_xid_res_t;
typedef struct sglist *dma_handle_t;
struct dma_map_info {vm_offset_t phys_base;bus_addr_t ba_base;u_int map_size;u_int type;struct dma_map_info *next;};
typedef struct dma_map_info *dma_map_info_t;
struct dn_addr {unsigned __int16 dna_family;union etheraddress dna_netaddr;};
struct dn_naddr {unsigned __int16 a_len;unsigned __int8 a_addr[20];};
typedef union $736CD47A376FE6BEB28EF999843A2D8B dnan;
struct dnet_nodeent {unsigned __int16 dn_esiz;unsigned __int16 dn_addr;char dn_name[6];};
struct dnet_objectent {unsigned __int16 do_flags;unsigned __int8 do_objnum;char do_objname[17];char do_defuser[21];char do_file[129];};
struct dom_binding {struct dom_binding *dom_pnext;char dom_domain[65];struct sockaddr_in dom_server_addr;unsigned __int16 dom_server_port;int dom_socket;CLIENT *dom_client;unsigned __int16 dom_local_port;int dom_vers;};
struct domain {int dom_family;char *dom_name;void (*dom_init)();int (*dom_externalize)();void (*dom_dispose)();const struct domain::protosw *dom_protosw;const struct domain::protosw *dom_protoswNPROTOSW;struct domain *dom_next;int dom_refcnt;void (*dom_funnel)();void (*dom_funfrc)();};
typedef struct timeval domainIdT;
typedef struct $E2AAF6ECEDE601F63A19E0C4A43CC947 domainInfoT;
struct domain_funnel {void (*unfunnel)();union domain_funnel::$853002D12F4FBDCEFD8D1BE1E6C79653 object;};
union domain_funnel::$853002D12F4FBDCEFD8D1BE1E6C79653 {int spl;caddr_t other;};
struct dot5Entry {int dot5TrnNumber;int dot5IfIndex;int dot5Commands;int dot5RingStatus;int dot5RingState;int dot5RingOpenStatus;int dot5RingSpeed;u_char dot5UpStream[6];int dot5ActMonParticipate;u_char dot5Functional[6];};
struct dot5StatsEntry {int dot5StatsIfIndex;int dot5StatsLineErrors;int dot5StatsBurstErrors;int dot5StatsACErrors;int dot5StatsAbortTransErrors;int dot5StatsInternalErrors;int dot5StatsLostFrameErrors;int dot5StatsReceiveCongestions;int dot5StatsFrameCopiedErrors;int dot5StatsTokenErrors;int dot5StatsSoftErrors;int dot5StatsHardErrors;int dot5StatsSignalLoss;int dot5StatsTransmitBeacons;int dot5StatsRecoverys;int dot5StatsLobeWires;int dot5StatsRemoves;int dot5StatsSingles;int dot5StatsFreqErrors;};
struct dot5TimerEntry {int dot5TimerIfIndex;int dot5TimerReturnRepeat;int dot5TimerHolding;int dot5TimerQueuePDU;int dot5TimerValidTransmit;int dot5TimerNoToken;int dot5TimerActiveMon;int dot5TimerStandbyMon;int dot5TimerErrorReport;int dot5TimerBeaconTransmit;int dot5TimerBeaconReceive;};
struct dqblk {u_int dqb_bhardlimit;u_int dqb_bsoftlimit;u_int dqb_curblocks;u_int dqb_ihardlimit;u_int dqb_isoftlimit;u_int dqb_curinodes;time_t dqb_btime;time_t dqb_itime;};
struct driver {int (*probe)();int (*slave)();int (*cattach)();int (*dattach)();int (*go)();caddr_t *addr_list;char *dev_name;struct device **dev_list;char *ctlr_name;struct controller **ctlr_list;__int16 xclu;int addr1_size;int addr1_atype;int addr2_size;int addr2_atype;int (*ctlr_unattach)();int (*dev_unattach)();};
struct drvr_shut {struct drvr_shut *next;void (*callback)();caddr_t param;};
typedef union _ds1Entries ds1Entries;
struct ds1_ifdata {int req_type;union ds1_ifdata::_data data;};
union ds1_ifdata::_data {dsx1KernSetConfigEntry configEntry;dsx1KernSetFracEntry fracEntry;};
struct dsc$descriptor {unsigned __int16 dsc$w_length;unsigned __int8 dsc$b_dtype;unsigned __int8 dsc$b_class;char *dsc$a_pointer;};
struct dsc$descriptor_s {unsigned __int16 dsc$w_length;unsigned __int8 dsc$b_dtype;unsigned __int8 dsc$b_class;char *dsc$a_pointer;};
struct dsent {int (*d_open)();int (*d_close)();int (*d_strategy)();int (*d_read)();int (*d_write)();int (*d_ioctl)();int (*d_dump)();int (*d_psize)();int (*d_stop)();int (*d_reset)();int (*d_select)();int (*d_mmap)();int (*d_segmap)();struct dsent::tty *d_ttys;int d_funnel;int d_bflags;int d_cflags;};
struct dstat {u_short dst_seconds;u_int dst_bytercvd;u_int dst_bytesent;u_int dst_blockrcvd;u_int dst_blocksent;u_short dst_inbound_bm;u_char dst_inbound;u_short dst_outbound_bm;u_char dst_outbound;u_char dst_remotetmo;u_char dst_localtmo;u_short dst_remotebuf_bm;u_char dst_remotebuf;u_short dst_localbuf_bm;u_char dst_localbuf;u_char dst_select;u_short dst_selecttmo_bm;u_char dst_selecttmo;u_short dst_remotesta_bm;u_char dst_remotesta;u_short dst_localsta_bm;u_char dst_localsta;};
typedef struct _dsx1KernGetConfigEntry dsx1KernGetConfigEntry;
typedef struct _dsx1KernGetCurrentEntry dsx1KernGetCurrentEntry;
typedef struct _dsx1KernGetFarEndCurrentEntry dsx1KernGetFarEndCurrentEntry;
typedef struct _dsx1KernGetFarEndIntervalEntry dsx1KernGetFarEndIntervalEntry;
typedef struct _dsx1KernGetFarEndTotalEntry dsx1KernGetFarEndTotalEntry;
typedef struct _dsx1KernGetFracEntry dsx1KernGetFracEntry;
typedef struct _dsx1KernGetIntervalEntry dsx1KernGetIntervalEntry;
typedef struct _dsx1KernGetTotalEntry dsx1KernGetTotalEntry;
typedef struct _dsx1KernSetConfigEntry dsx1KernSetConfigEntry;
typedef struct _dsx1KernSetFracEntry dsx1KernSetFracEntry;
typedef struct ds1_ifdata dsx1ManReq_type;
struct dt_enty {__int64 dt_len;char dtname[8];__int64 *dt_ptr;__int64 resv;};
struct dte {char name[8];__int64 len;__int64 dptr;__int64 resv;};
struct dump_request {vm_offset_t vaddr;struct device *device;daddr_t part_offset;daddr_t part_size;dev_t dev;u_int count;u_int blk_offset;u_int limit;u_int remoteid;u_int unit;u_short command;u_char cur_piece;u_char pri_piece;char device_name[80];char protocol[40];caddr_t srm_suffix;};
struct dumpinfo {__int64 partial_dump;char signature[12];int csum;void *addr[16];struct dumpinfo::dump_piece piece[16];};
struct dumpinfo::dump_piece {dev_t dev;u_int offset;u_int size;};
typedef struct $5991DEED6233F978BFE8C5C0EA8D4E55 dword;
typedef struct $3E4EA4C9BF2904B29D73725F23DCA801 edac_t;
struct eflock {__int16 l_type;__int16 l_whence;off_t l_start;off_t l_len;pid_t l_pid;pid_t l_rpid;int l_rsys;__int16 l_xxx;int l_cb;};
struct element_addr {int elo_id;MC_TYPES elo_type;};
typedef struct element_addr element_addr_t;
typedef struct $99B5CC9F29D8CCB1C212F39D02E9DF25 elf32_LDFILE;
struct elf_handle {__int64 magic;Elf32_Ehdr ehdr;Elf32_Phdr *phdr;memory_object_t pager;char *interpreter;};
struct elist {int size;elist_member_t *list;};
struct elist_member {int count;element_addr_t element;};
typedef struct elist_member elist_member_t;
typedef struct elist elist_t;
struct enOpenDescriptor {struct Queue enOD_Link;struct enWaitQueue enOD_Waiting;struct proc *enOD_SigProc;pid_t enOD_SigPid;int enOD_SigNumb;int enOD_Timeout;struct enfilter enOD_OpenFilter;enum enStates enOD_RecvState;__int16 enOD_Flag;int enOD_SelColl;struct proc *enOD_SelProc;struct queue_entry enOD_selq;unsigned __int64 enOD_RecvCount;int enOD_Truncation;unsigned __int16 *enOD_FiltEnd;unsigned int enOD_Drops;unsigned int enOD_DropCount;unsigned int enOD_FlushRecv;unsigned int enOD_FlushDrop;char *enOD_dummy1;int enOD_dummy2;};
struct enPacket {struct Queue enP_Link;u_short enP_RefCount;struct mbuf *enP_mbuf;struct enstamp enP_Stamp;};
struct enQueue {struct Queue enQ_Head;__int16 enQ_NumQueued;};
struct enState {unsigned __int64 ens_Rcnt;unsigned __int64 ens_Xcnt;unsigned __int64 ens_Rdrops;unsigned __int64 ens_Xdrops;unsigned __int64 ens_Rmissed;unsigned __int64 ens_Runwanted;struct enQueue ens_Desq;struct endevp ens_DevParams;boolean ens_AllowPromisc;int ens_PromiscCount;int ens_UserMaxWaiting;boolean ens_AllowCopyAll;int ens_CopyAllCount;boolean ens_Attached;};
enum enStates {ENRECVIDLE = 0x0,ENRECVTIMING = 0x1,ENRECVTIMEDOUT = 0x2,};
struct enWaitQueue {struct enPacket *enWQ_Packets[255];__int16 enWQ_Head;__int16 enWQ_Tail;__int16 enWQ_NumQueued;__int16 enWQ_MaxWaiting;};
struct endevp {u_char end_dev_type;u_char end_addr_len;u_short end_hdr_len;u_short end_MTU;u_char end_addr[8];u_char end_broadaddr[8];};
struct enetn_s {char enetn_dst[6];char enetn_src[6];char enetn_type[2];};
struct enfilter {u_char enf_Priority;u_char enf_FilterLen;u_short enf_Filter[40];};
struct eniocb {u_char en_addr;u_char en_maxfilters;u_char en_maxwaiting;u_char en_maxpriority;int en_rtout;};
struct enstamp {u_short ens_stamplen;u_short ens_flags;u_short ens_count;u_short ens_dropped;u_int ens_ifoverflows;struct timeval ens_tstamp;};
struct entry {char *key;char *data;};
struct entry3 {fileid3 fileid;filename3 name;cookie3 cookie;struct entry3 *nextentry;};
struct entryplus3 {fileid3 fileid;filename3 name;cookie3 cookie;post_op_attr name_attributes;post_op_fh3 name_handle;struct entryplus3 *nextentry;};
typedef char *env_string;
struct es_default {int version;int source;char *ibuf;char *ubuf;char *dd_name;int dg_name;size_t esprof_flen;struct espw_field *prd;struct espw_flag *prg;size_t estc_flen;struct estc_field *tcd;struct estc_flag *tcg;size_t esdev_flen;struct esdev_field *devd;struct esdev_flag *devg;size_t fieldlen;struct es_default_fields *sfld;struct es_default_flags *sflg;};
struct es_default_fields {char *fd_name;time_t fd_inactivity_timeout;time_t fd_pw_expire_warning;char *fd_pw_site_callout;mand_ir_t *fd_single_user_sl;mask_t *fd_secclass;char fd_boot_authenticate;char fd_audit_enable;char fd_preexpire;char fd_skip_ttys_update;char fd_auto_migrate_u;time_t fd_max_vac_future;time_t fd_max_vac_len;char fd_accept_vouch;char fd_skip_slogin_log;char fd_skip_flogin_log;uchar_t fd_null_psw_prompt;};
struct es_default_flags {unsigned int fg_null_psw_prompt;};
struct es_file {int version;int source;char *ibuf;char *ubuf;size_t fieldlen;struct esfi_field *ufld;struct esfi_flag *uflg;};
struct es_lp {int version;int source;char *ibuf;char *ubuf;size_t fieldlen;struct eslp_field *ufld;struct eslp_flag *uflg;struct eslp_field *sfld;struct eslp_flag *sflg;};
struct es_passwd {int version;int source;char *ibuf;char *ubuf;size_t fieldlen;struct espw_field *ufld;struct espw_flag *uflg;struct espw_field *sfld;struct espw_flag *sflg;};
typedef struct es_passwd es_profile;
struct es_term {int version;int source;char *ibuf;char *ubuf;size_t fieldlen;struct estc_field *ufld;struct estc_flag *uflg;struct estc_field *sfld;struct estc_flag *sflg;};
struct escap_pad {char *area;char *next;char *aend;size_t size;};
struct escap_parse {const char *fname;int ptype;uint_t fmax;size_t where;size_t nmlen;};
struct esdev_asg {int version;int source;char *ibuf;char *ubuf;size_t fieldlen;struct esdev_field *ufld;struct esdev_flag *uflg;struct esdev_field *sfld;struct esdev_flag *sflg;};
struct esdev_field {char *fd_name;char **fd_devs;mask_t *fd_type;mand_ir_t *fd_max_sl;mand_ir_t *fd_min_sl;mand_ir_t *fd_cur_sl;ilb_ir_t *fd_cur_il;mask_t *fd_assign;char **fd_users;};
struct esdev_flag {unsigned int fg_users;};
struct esfi_field {char *fd_name;uid_t fd_uid;gid_t fd_gid;mode_t fd_mode;char *fd_type;mand_ir_t *fd_slevel;acle_t *fd_acl;int fd_acllen;priv_t *fd_pprivs;priv_t *fd_gprivs;};
struct esfi_flag {unsigned int fg_gprivs;};
struct eslp_field {char *fd_name;char *fd_initseq;char *fd_termseq;char *fd_emph;char *fd_deemph;char *fd_chrs;size_t fd_chrslen;char *fd_escs;size_t fd_escslen;int fd_linelen;int fd_pagelen;char fd_truncline;};
struct eslp_flag {unsigned int fg_truncline;};
struct espw_field {char *fd_name;uid_t fd_uid;char *fd_encrypt;char *fd_owner;int fd_nice;mask_t *fd_cprivs;priv_t *fd_sprivs;priv_t *fd_bprivs;char *fd_auditdisp;uint_t fd_auditcntl;time_t fd_min;int fd_minlen;int fd_maxlen;time_t fd_expire;time_t fd_lifetime;time_t fd_schange;time_t fd_uchange;char fd_pick_pwd;char fd_gen_pwd;char fd_restrict;char fd_policy;char fd_nullpw;uid_t fd_pwchanger;char fd_gen_chars;char fd_gen_letters;int fd_pwdepth;char *fd_pwdict;char fd_oldcrypt;char fd_newcrypt;mand_ir_t *fd_clearance;time_t fd_slogin;time_t fd_ulogin;char *fd_suctty;int fd_nlogins;char *fd_unsuctty;char *fd_tod;int fd_max_tries;time_t fd_unlockint;char fd_retired;char fd_lock;time_t fd_expdate;char fd_istemplate;char *fd_template;time_t fd_vac_start;time_t fd_vac_end;ulong_t fd_rlim_cpu;ulong_t fd_rlim_fsize;ulong_t fd_rlim_data;ulong_t fd_rlim_stack;ulong_t fd_rlim_core;ulong_t fd_rlim_rss;ulong_t fd_rlim_nofile;ulong_t fd_rlim_vmem;time_t fd_max_login_int;time_t fd_grace_limit;char fd_psw_chg_reqd;char fd_gen_site;uchar_t fd_minchosen;uchar_t fd_maxchosen;int fd_flogins;};
struct espw_flag {unsigned int fg_suctty;unsigned int fg_maxchosen;};
struct estat {u_short est_seconds;u_int est_bytercvd;u_int est_bytesent;u_int est_blokrcvd;u_int est_bloksent;u_int est_mbytercvd;u_int est_mblokrcvd;u_int est_deferred;u_int est_single;u_int est_multiple;u_short est_sendfail_bm;u_short est_sendfail;u_short est_collis;u_short est_recvfail_bm;u_short est_recvfail;u_short est_unrecog;u_short est_overrun;u_short est_sysbuf;u_short est_userbuf;u_int est_mbytesent;u_int est_mbloksent;};
struct estc_field {char *fd_devname;uid_t fd_uid;time_t fd_slogin;uid_t fd_uuid;time_t fd_ulogin;uid_t fd_loutuid;time_t fd_louttime;int fd_nlogins;int fd_max_tries;time_t fd_logdelay;time_t fd_unlockint;char fd_lock;char fd_xdisp;time_t fd_login_timeout;};
struct estc_flag {unsigned int fg_xdisp;};
struct ether_addr {u_char ether_addr_octet[6];};
struct ether_arp {struct arphdr ea_hdr;u_char arp_sha[6];u_char arp_spa[4];u_char arp_tha[6];u_char arp_tpa[4];};
struct ether_driver {struct arpcom ess_ac;struct estat ess_ctrblk;int ess_ztime;__int16 ess_enetunit;int ess_missed;};
struct ether_header {u_char ether_dhost[6];u_char ether_shost[6];u_short ether_type;};
union etheraddress {unsigned __int8 dne_addr[6];struct etheraddress::$583B32B97AFEE88D1418021DA298AC8C dne_remote;};
struct etheraddress::$583B32B97AFEE88D1418021DA298AC8C {unsigned __int8 dne_hiord[4];unsigned __int8 dne_nodeaddr[2];};
struct etheraddrs {struct timeval e_time;unsigned __int64 e_bytes;unsigned __int64 e_packets;unsigned __int64 e_bcast;struct etherhmem **e_addrs;};
struct etherhmem {int ht_addr;unsigned int ht_cnt;struct etherhmem *ht_nxt;};
struct etherstat {struct timeval e_time;unsigned __int64 e_bytes;unsigned __int64 e_packets;unsigned __int64 e_bcast;unsigned __int64 e_size[16];unsigned __int64 e_proto[6];};
struct eucioc {unsigned __int8 eucw[4];unsigned __int8 scrw[4];};
typedef struct eucioc eucioc_t;
struct events_info {__int64 faults;__int64 zero_fills;__int64 reactivations;__int64 pageins;__int64 cow_faults;__int64 messages_sent;__int64 messages_received;};
typedef struct events_info events_info_data_t;
typedef struct events_info *events_info_t;
struct exaddrlist {unsigned int naddrs;struct sockaddr *addrvec;};
struct exaddrtbl {struct exaddrlist list;struct sockaddr **table;u_int tblsize;u_int fib_prev;};
typedef unsigned __int64 exc_address;
typedef __pthreadExcAddr_t exc_address_t;
typedef __pthreadExcCtx_t exc_context_t;
typedef __pthreadExcExt_t exc_ext_t;
typedef __int64 exc_int_t;
typedef __pthreadExcKindAddr_t exc_kind_address_t;
typedef __pthreadExcKindStatus_t exc_kind_status_t;
typedef __pthreadExcKind_t exc_kind_t;
typedef __pthreadExcKindV1Addr_t exc_kind_v1addr_t;
typedef __pthreadExcKindV1Status_t exc_kind_v1status_t;
typedef __pthreadExcState_t exc_state_t;
struct exception {int type;char *name;double arg1;double arg2;double retval;};
union exception_code {unsigned __int64 code_quad;struct exception_code::$14E0471BAA13EED0097A0844F34468E9 exception_code_base;struct exception_code::$D277ABD15005ADBC0C3A0E6508188DAA exception_code_osf;struct exception_code::$C8645EF45BCBACCB3264C37EFA5C3E59 exception_code_nt;struct exception_code::$DD6D1D35EF94420049AEBB33A07D9AC8 exception_code_vms;};
struct exception_code::$14E0471BAA13EED0097A0844F34468E9 {unsigned int facility_dependent_2;pdsc_uint_32 facility_dependent_3;};
struct exception_code::$C8645EF45BCBACCB3264C37EFA5C3E59 {unsigned int severity;pdsc_uint_32 reserved;};
struct exception_code::$D277ABD15005ADBC0C3A0E6508188DAA {pdsc_uint_32 osf_facility;pdsc_uint_32 code;};
struct exception_code::$DD6D1D35EF94420049AEBB33A07D9AC8 {unsigned int control;pdsc_uint_32 reserved;};
typedef EXCEPTION_DISPOSITION (*exception_handler_type)(system_exrec_type *exceptionRecord, void *EstablisherFrame, CONTEXT *contextRecord, DISPATCHER_CONTEXT *dispatcherContext);
struct exception_info;
struct exec {struct filehdr ex_f;struct aouthdr ex_o;};
struct exec_pagelist {vm_offset_t *pl_fill;vm_offset_t *pl_current_plpage;int pl_count_in_current_plpage;vm_offset_t *pl_first_plpage;};
struct execargs {vm_offset_t argsmem;vm_offset_t args;int na;int ne;unsigned int nc;int ni;int cc;char *ufile;char *loader;char *interp;char *interp_offset;kauxv_t *auxv;vm_offset_t envp;unsigned int nac;int align;struct exec_pagelist argv_pl;struct exec_pagelist strings_pl;vm_offset_t *argv_p;vm_offset_t *argv_current_page_start;unsigned __int8 *strings_p;unsigned __int8 *strings_offset;vm_offset_t *strings_current_page_start;vm_offset_t *argc_p;int argv_current_page_remaining;int strings_current_page_remaining;unsigned __int8 *shell_args_p;int argc;int using_pagelist;int argv_page_count;int strings_page_count;unsigned __int8 *ufile_userspace;unsigned __int8 *loader_userspace;unsigned __int8 *loader_string;int audit_char_count;int permit_retry;};
struct execbuf {char exec[1025];};
struct execops {int (*recognize)();int (*getloader)();int (*getxfile)();int (*ungetxfile)();int (*setregs)();int (*reference)();int refcount;int flag;int id;struct execops *next;struct execops *prev;};
struct exportfsaddrlist {unsigned int naddrs;struct sockaddr addrvec[256];};
struct exportfsdata {dev_t e_dev;ino_t e_ino;uint_t e_gen;char e_path[1024];int e_flags;uid_t e_rootmap;uid_t e_anon;struct exportfsaddrlist e_rootaddrs;struct exportfsaddrlist e_writeaddrs;int e_more;};
struct exports {dev_t ex_dev;ino_t ex_ino;uint_t ex_gen;char *ex_name;int ex_flags;uid_t ex_rootmap;uid_t ex_anon;struct exaddrlist ex_rootaddrs;struct exaddrlist ex_writeaddrs;struct groups *ex_groups;struct exports *ex_next;struct exports *ex_devptr;};
typedef struct system_exrec *exrec_ptr;
typedef u_int32_t ext_accm[8];
struct extended_sense {unsigned __int8 valid;u_char segnum;unsigned __int8 filmrk;u_char infobyte3;u_char infobyte2;u_char infobyte1;u_char infobyte0;u_char asl;u_char rb1[4];u_char asc;u_char rb2;u_char fur;u_char bp;u_char fp1;u_char fp0;};
struct extentmap {unsigned __int64 arraysize;unsigned __int64 numextents;unsigned __int64 offset;struct extentmapentry *extent;};
struct extentmapentry {unsigned __int64 offset;unsigned __int64 size;};
struct f_field {char *fd_name;uid_t fd_uid;gid_t fd_gid;mode_t fd_mode;char fd_type[2];};
struct f_flag {unsigned int fg_type;};
struct f_user {pid_t fu_pid;int fu_flags;uid_t fu_uid;};
typedef struct f_user f_user_t;
struct fattr3 {ftype3 type;mode3 mode;uint32 nlink;uid3 uid;gid3 gid;size3 size;size3 used;specdata3 rdev;uint64 fsid;fileid3 fileid;nfstime3 atime;nfstime3 mtime;nfstime3 ctime;};
struct fb_info {ws_screen_descriptor screen;ws_depth_descriptor depth[1];ws_visual_descriptor visual[1];ws_screen_functions sf;ws_color_map_functions cmf;ws_cursor_functions cf;int (*attach)();void (*fb_info_interrupt)();void (*bot)();};
struct fblk {int df_nfree;daddr_t df_free[178];};
typedef int fd_mask;
struct fd_set {fd_mask fds_bits[128];};
struct fddiDNA_status {struct fddi_dna_attributes attr;struct fddi_dna_status stat;};
struct fddi_dna_attributes {u_char stationid[8];__int16 stationtype;u_short opversionid;u_short hiversionid;u_short loversionid;u_char link_addr[6];u_int t_req;u_int tvx;u_int rtoken_timeout;__int16 ring_purge_enable;u_char phy_type;u_char pmd_type;u_int lem_threshold;};
struct fddi_dna_status {__int16 station_state;u_char laststationid[8];u_char station_uid[8];__int16 link_state;u_char link_uid[8];u_int neg_trt;__int16 dup_add_flag;u_char upstream[6];u_char oldupstream[6];__int16 upstreamdaf;u_char downstream[6];u_char olddownstream[6];__int16 ring_purge_state;u_char frame_strip_mode;u_char ring_error;__int16 loopback;__int16 ring_latency;u_char ring_purge_addr[6];u_char phy_state;u_char phy_uid[8];u_char neighbor_phy_type;u_int phy_link_error;u_char broken_reason;u_char rej_reason;};
struct fddi_header {u_char fddi_ph[3];u_char fddi_fc;u_char fddi_dhost[6];u_char fddi_shost[6];};
struct fddiatta {__int16 atta_number;__int16 atta_smt_index;__int16 atta_index;__int16 atta_class;__int16 atta_bypass;__int16 atta_IMaxExpiration;__int16 atta_InsertedStatus;__int16 atta_InsertPolicy;};
struct fddimac {__int16 mac_number;__int16 mac_smt_index;__int16 mac_index;__int16 mac_fsc;u_int mac_gltmax;u_int mac_gltvx;__int16 mac_paths;__int16 mac_current;u_char mac_upstream[6];u_char mac_oldupstream[6];__int16 mac_dupaddrtest;__int16 mac_pathsreq;__int16 mac_downstreamtype;u_char mac_smtaddress[6];u_int mac_treq;u_int mac_tneg;u_int mac_tmax;u_int mac_tvx;u_int mac_tmin;__int16 mac_framestatus;int mac_counter;int mac_error;int mac_lost;__int16 mac_rmtstate;__int16 mac_dupaddr;__int16 mac_condition;__int16 mac_action;__int16 mac_updupaddr;__int16 mac_frame_error_thresh;__int16 mac_frame_error_ratio;__int16 mac_chip_set;};
struct fddipath {__int16 path_configindex;__int16 path_type;__int16 path_portorder;u_int path_sba;__int16 path_sbaoverhead;__int16 path_status;};
struct fddiport {__int16 port_number;__int16 port_smt_index;__int16 port_index;__int16 port_pctype;__int16 port_pcneighbor;__int16 port_connpolicy;__int16 port_remoteind;__int16 port_CEstate;__int16 port_pathreq;u_short port_placement;__int16 port_availpaths;u_int port_looptime;u_int port_TBmax;__int16 port_BSflag;u_int port_LCTfail;__int16 port_LerrEst;u_int port_Lemreject;u_int port_Lem;__int16 port_baseLerEst;u_int port_baseLerrej;u_int port_baseLer;u_char port_baseLerTime[8];__int16 port_Lercutoff;__int16 port_alarm;__int16 port_connectstate;__int16 port_PCMstate;__int16 port_PCwithhold;__int16 port_Lercondition;__int16 port_action;__int16 port_chip_set;};
struct fddismt {__int16 smt_number;__int16 smt_index;u_char smt_stationid[8];u_short smt_opversionid;u_short smt_hiversionid;u_short smt_loversionid;__int16 smt_macct;__int16 smt_nonmasterct;__int16 smt_masterct;__int16 smt_pathsavail;__int16 smt_configcap;__int16 smt_configpolicy;u_short smt_connectpolicy;u_short smt_timenotify;__int16 smt_statusreport;__int16 smt_ecmstate;__int16 smt_cfstate;__int16 smt_holdstate;__int16 smt_remotedisconn;u_char smt_msgtimestamp[8];u_char smt_trantimestamp[8];u_char smt_setinfo[12];u_char smt_lastsetid[8];__int16 smt_action;};
struct fdelargs {__int64 fd;struct proplistname_args *name_args;};
struct fdfs_dirent {ino_t d_ino;ushort_t d_reclen;ushort_t d_namlen;char d_name[4];};
struct fdr {coff_addr adr;coff_long cbLineOffset;coff_long cbLine;coff_long cbSs;coff_int rss;coff_int issBase;coff_int isymBase;coff_int csym;coff_int ilineBase;coff_int cline;coff_int ioptBase;coff_int copt;coff_int ipdFirst;coff_int cpd;coff_int iauxBase;coff_int caux;coff_int rfdBase;coff_int crfd;unsigned int reserved;coff_ushort vstamp;coff_uint reserved2;};
struct ffm_args {int ffm_flags;union ffm_args::$30AE216C481C6F488BE11A58F26596AA f_un;};
union ffm_args::$30AE216C481C6F488BE11A58F26596AA {char *ffm_pname;int ffm_fdesc;};
struct fgetargs {__int64 fd;struct proplistname_args *name_args;__int64 nbytes;char *buf;int *min_buf_size;};
typedef struct $1B25F028D599AD6042D2472447206E6C fhandle3;
typedef struct nfssvcfh fhandle_t;
struct fhstatus {int fhs_status;fhandle_t fhs_fh;};
struct fid {u_short fid_len;u_short fid_reserved;char fid_data[8];};
typedef struct fid fid_t;
struct fifonode;
struct fileAttributes {int reserved1;fileWriteOrderT writeOrder;int reserved2;int reserved3;int reserved4;int reserved5;fileXtntMapTypeT mapType;stripeParamsT stripe;int reserved6;int reserved7;int reserved8;int reserved9;int reserved10;int reserved11;int reserved12;int reserved13;int reserved14;int reserved15;int reserved16;int reserved17;int fill1;int fill2;};
typedef struct fileAttributes fileAttributesT;
typedef struct $4CBE8E77F7F7B04FDA810848BC99B27A fileTagT;
typedef enum $1E01C87E393912919412648BB92B1744 fileWriteOrderT;
typedef enum $2E2E66AB16B6733286DFB227364D15C8 fileXtntMapTypeT;
struct filehdr {coff_ushort f_magic;coff_ushort f_nscns;coff_int f_timdat;coff_off f_symptr;coff_int f_nsyms;coff_ushort f_opthdr;coff_ushort f_flags;};
typedef uint64 fileid3;
typedef char *filename3;
struct filesetId {domainIdT domainId;fileTagT setTag;};
typedef struct filesetId filesetIdT;
typedef struct $E7EE88F20F725C9FEB06EE11AEF579C5 filesetInfoT;
typedef struct $CA24C908E5A10E126A873BEF1204E884 filesetQuotasT;
struct filock {struct eflock set;struct filock *prev;struct filock *next;struct filock::flino *flip;int class;struct vnode *vp;struct blkpids *blkpids;};
struct filsys {unsigned __int16 s_isize;daddr_t s_fsize;__int16 s_nfree;daddr_t s_free[178];__int16 s_ninode;u_short s_inode[100];char s_flock;char s_ilock;char s_xfmod;char s_xronly;time_t s_time;daddr_t s_tfree;u_short s_tinode;__int16 s_dinfo[2];char s_fsmnt[12];u_short s_lasti;u_short s_nbehind;};
struct filtreq {char ifr_name[16];u_long version;int cmd;tcntl_error_code_t error;tcntl_rhandle_t rhandle;u_int tag_scope;tcntl_fhandle_t fhandle;u_int flow_table;u_int nr_filters;};
struct find_info {struct find_info *next;int find_type;int (*find_rtn)(SET_DESC *sptr, KSM_FIND_BUF *req, size_t size, struct find_info *ptr, MEM_DESC **m);__int64 reserved[2];};
typedef u_long fixpt_t;
struct flag_field {int fi_flag;simple_lock_data_t *fi_lock;};
struct flckinfo {int recmax;int filmax;int reccnt;int filcnt;int rectot;int filtot;simple_lock_data_t flckinfo_lock;};
struct flino {simple_lock_data_t flino_lock;int fl_refcnt;struct flino *next;struct flino *prev;lock_data_t fichain_lock;struct filock *fl_flck;struct vnode *vp;};
typedef float float32_t;
struct flock {__int16 l_type;__int16 l_whence;off_t l_start;off_t l_len;pid_t l_pid;};
struct flowreq {char ifr_name[16];u_long version;int cmd;tcntl_error_code_t error;tcntl_rhandle_t rhandle;u_int tag_scope;u_int flow_table;u_int nhop_len;u_int IS_objects_len;struct sockaddr dst;};
typedef struct $6175075C8C71D0DDF9D83C934C4190B3 fltset_t;
typedef struct _for_fpe_flags for_fpe_flags;
struct form1_defect_list_header {u_char reserved;unsigned __int8;u_char defect_len1;u_char defect_len0;};
struct form2_defect_list_header {u_char reserved;unsigned __int8 fov;u_char defect_len1;u_char defect_len0;};
struct form3_defect_list_header {u_char reserved1;u_char reserved2;u_char defect_len1;u_char defect_len0;};
struct format_op {char *df_buf;int df_count;daddr_t df_startblk;int df_reg[8];};
struct format_params {u_char fp_format;u_char fp_pattern;u_char fp_interleave;u_char fp_length;u_char fp_defects;u_char *fp_addr;};
typedef __int64 fpos_t;
struct fpregset {__int64 regs[46];};
typedef struct fpregset fpregset_t;
struct fps_iopb {char pb_cmd;char pb_fmt;u_short pb_apad;caddr_t pb_had;u_short pb_dcnt;};
struct frefs {u_short readers;u_short writers;};
typedef struct $9260E9DF4F900591ED372CA82BEE9A23 fsAccessContextError;
typedef struct $FCE16AE268B388C13B857015D638E9ED fsAllocError;
typedef CARD32 fsBitmapFormat;
typedef CARD32 fsBitmapFormatMask;
typedef struct $E97BFE069D0E69649C7DF89B8901896C fsCatalogueChangeNotifyEvent;
typedef struct $CE866585EA90BEF8E1777B84F5242003 fsChar2b;
typedef struct $6313E54CC161B7E5C4F7C30B4DF21654 fsChar2b_version1;
typedef fsResourceReq fsCloseReq;
typedef struct $44989FB912D962B2DEA21D74F6F43DAE fsConnClientPrefix;
typedef struct $875800A09C817D61F833D1479DE8ED86 fsConnSetup;
typedef struct $9DC1427BFA5A30405B067C9596620D04 fsConnSetupAccept;
typedef struct $29DBA087DFE16744A29CB8F8CD68D43B fsConnSetupExtra;
typedef struct $29DBA087DFE16744A29CB8F8CD68D43B fsCreateACExtraReply;
typedef struct $624041EF38A3D722ECC431A5F82DF930 fsCreateACReply;
typedef struct $1A68CE477B37BE31DCB043B6F4664E49 fsCreateACReq;
typedef struct $FCE16AE268B388C13B857015D638E9ED fsError;
typedef fsCatalogueChangeNotifyEvent fsEvent;
typedef struct $2A73BF0E4CA9808D683BEEEFEEB2900C fsEventMaskError;
typedef struct $FDFBD601B4BD2833D8A740F2A9550A80 fsFakeReq;
typedef fsCatalogueChangeNotifyEvent fsFontChangeNotifyEvent;
typedef struct $3BE679DC1FFA371624A790DBC1F4853A fsFontError;
typedef struct $B17A026830C769E803D493B7F2598A70 fsFormatError;
typedef fsResourceReq fsFreeACReq;
typedef struct $32814486483B74398EA3D6D6C36E06C2 fsGenericReply;
typedef struct $B8340C644CDB6E95F3781F01B22F6B41 fsGetCataloguesReply;
typedef fsReq fsGetCataloguesReq;
typedef struct $0733D28D39B544C0D1FF9AB5A89F168E fsGetEventMaskReply;
typedef struct $797907A242F94DB9200676D3A724828B fsGetEventMaskReq;
typedef struct $90E70BB8598364AAEAF6E156E433A864 fsGetResolutionReply;
typedef fsReq fsGetResolutionReq;
typedef struct $3BE679DC1FFA371624A790DBC1F4853A fsIDChoiceError;
typedef struct $FCE16AE268B388C13B857015D638E9ED fsImplementationError;
typedef struct $E5FCE84481A5DA4B542276D3CC112A29 fsKeepAliveEvent;
typedef struct $69EBDB3A774B1AFC7F282884D9B780FC fsLengthError;
typedef struct $113ADE3249D8CE9145901B23810AE272 fsListCataloguesReply;
typedef struct $BD0CD7113069CF1296E061F976B1B743 fsListCataloguesReq;
typedef struct $A400BCBF43F87F2088946A887ADD242F fsListExtensionsReply;
typedef fsReq fsListExtensionsReq;
typedef struct $D7F0CB1571AAC0714CF3A2A9DC0827E7 fsListFontsReply;
typedef struct $2178B426BC8C8AE0F5D29E93EB059F03 fsListFontsReq;
typedef struct $3D6C9E6FC2A1930EF06F70ECE24ED2E6 fsListFontsWithXInfoReply;
typedef fsListFontsReq fsListFontsWithXInfoReq;
typedef struct $FCE16AE268B388C13B857015D638E9ED fsNameError;
typedef fsReq fsNoopReq;
typedef struct $ECC0E2C5AD5080F3204655729300624A fsOffset32;
typedef struct $E979E361A2908732FE24CBF47752810D fsOpenBitmapFontReply;
typedef struct $54527827121C21F3031526454FE9C7A8 fsOpenBitmapFontReq;
typedef struct $4543C93AEA47F6ED8C90F8F964657E96 fsPropInfo;
typedef struct $F059149F541946541B5DFE9F6EB20E96 fsPropOffset;
typedef struct $2D6D05448839E8D39EF22D0A7A7B9E49 fsQueryExtensionReply;
typedef struct $58C3F68DE6E766EC315A68C29D87018F fsQueryExtensionReq;
typedef fsQueryXBitmaps8Reply fsQueryXBitmaps16Reply;
typedef fsQueryXBitmaps8Req fsQueryXBitmaps16Req;
typedef struct $5C7A236BA0562DB05D77CA85FA8CD202 fsQueryXBitmaps8Reply;
typedef struct $1CFFE104D7DFB51E74C0A01BE327DA92 fsQueryXBitmaps8Req;
typedef fsQueryXExtents8Reply fsQueryXExtents16Reply;
typedef fsQueryXExtents8Req fsQueryXExtents16Req;
typedef struct $D293DB0BD17AE7654E9C3A224EBA1B54 fsQueryXExtents8Reply;
typedef struct $7223AFE63A8123EF6F49E197890FAA10 fsQueryXExtents8Req;
typedef struct $3E18A7AAF5D17F3F11EB968C0A78AED4 fsQueryXInfoReply;
typedef fsResourceReq fsQueryXInfoReq;
typedef struct $BE90B4AC206CC1F52CC4D15D587652C4 fsRange;
typedef struct $050D667D91EB5E6EF621582721732C5C fsRangeError;
typedef union $12139D15327A66BC6BD2CA276E233382 fsReply;
typedef struct $F0D1009415F4F398C0AA24385D596C1B fsReq;
typedef struct $FCE16AE268B388C13B857015D638E9ED fsRequestError;
typedef struct $048EDDC221AC6C2316AA6C5DA748547D fsResolution;
typedef struct $0F63C52D50F31C01632B7951AEFCA4FD fsResolutionError;
typedef struct $A23F2D0A331F720D631E2B6171CC3ECA fsResourceReq;
typedef fsResourceReq fsSetAuthorizationReq;
typedef struct $8215DDD75066012239D919FF6D1C96FC fsSetCataloguesReq;
typedef struct $8BE617EABEB75C8FAB9CB9A4A240FEE3 fsSetEventMaskReq;
typedef struct $A545D31055C82AF5215FB86F909CA367 fsSetResolutionReq;
typedef CARD32 fsTimestamp;
typedef struct $CCAFB83A0FC0BF591DA5D736B6BAF8AE fsXCharInfo;
typedef struct $33AF8112BACFF99F66629433CE03587D fsXFontInfoHeader;
union fs_rec {struct hdr h;struct fs_rec::$EF32476DB27280E695EC4D1F1F5873A3 v;struct fs_rec::$3A458412AE632E8ACA42CF05AFDD44A8 x;struct fs_rec::$682847209A03402CDFB4CC50A9C6B83C b;struct fs_rec::$2312EC92505ECEDB15B31235B952BB78 oi;struct fs_rec::$76B51BB9F87E7781FDAE1ECF6BECE07C i;struct fs_rec::$ADDA6015CC39C716586D276E181D09F6 on;struct fs_rec::$BB62CD39164CEE6F5A5C580F8E3E00FE n;struct fs_rec::$5627AD88435D19D9FD164814D1A9108C e;struct fs_rec::$C611B0494CE6E6646D168445ABB5CB53 ds;};
struct fs_rec::$2312EC92505ECEDB15B31235B952BB78 {struct hdr h;ushort ino;ushort mode;ushort nlink;ushort uid;ushort gid;off_t size;time_t atime;time_t mtime;time_t ctime;ushort dev;ushort rdev;off_t dsize;};
struct fs_rec::$3A458412AE632E8ACA42CF05AFDD44A8 {struct hdr h;ushort dummy;ushort ino[80];daddr_t addr[80];daddr_t link;};
struct fs_rec::$5627AD88435D19D9FD164814D1A9108C {struct hdr h;};
struct fs_rec::$682847209A03402CDFB4CC50A9C6B83C {struct hdr h;ushort nwds;};
struct fs_rec::$76B51BB9F87E7781FDAE1ECF6BECE07C {struct hdr h;ushort ino;ushort mode;ushort nlink;ushort uid;ushort gid;off_t size;time_t atime;time_t mtime;time_t ctime;ushort devmaj;ushort devmin;ushort rdevmaj;ushort rdevmin;off_t dsize;__int64 pad;};
struct fs_rec::$ADDA6015CC39C716586D276E181D09F6 {struct hdr h;ushort ino;ushort mode;ushort nlink;ushort uid;ushort gid;off_t size;time_t atime;time_t mtime;time_t ctime;ushort dev;ushort rdev;off_t dsize;char name[4];};
struct fs_rec::$BB62CD39164CEE6F5A5C580F8E3E00FE {struct hdr h;ushort ino;ushort mode;ushort nlink;ushort uid;ushort gid;off_t size;time_t atime;time_t mtime;time_t ctime;ushort devmaj;ushort devmin;ushort rdevmaj;ushort rdevmin;off_t dsize;__int64 pad;char name[4];};
struct fs_rec::$C611B0494CE6E6646D168445ABB5CB53 {struct hdr h;char nid[8];char qdir[2];};
struct fs_rec::$EF32476DB27280E695EC4D1F1F5873A3 {struct hdr h;ushort volnum;time_t date;time_t dumpdate;daddr_t numwds;char disk[16];char fsname[16];char user[16];__int16 incno;};
struct fsetargs {__int64 fd;__int64 nbytes;char *buf;};
typedef quad fsid_t;
struct fstab {char *fs_spec;char *fs_file;char *fs_type;int fs_freq;int fs_passno;char *fs_vfstype;char *fs_mntops;};
struct fstat {u_short fst_second;u_int fst_frame;u_int fst_error;u_int fst_lost;u_int fst_bytercvd;u_int fst_bytesent;u_int fst_pdurcvd;u_int fst_pdusent;u_int fst_mbytercvd;u_int fst_mpdurcvd;u_int fst_mbytesent;u_int fst_mpdusent;u_short fst_underrun;u_short fst_sendfail;u_short fst_fcserror;u_short fst_fseerror;u_short fst_pdualig;u_short fst_pdulen;u_short fst_pduunrecog;u_short fst_mpduunrecog;u_short fst_overrun;u_short fst_sysbuf;u_short fst_userbuf;u_short fst_ringinit;u_short fst_ringinitrcv;u_short fst_ringbeacon;u_short fst_ringbeaconrecv;u_short fst_duptoken;u_short fst_dupaddfail;u_short fst_ringpurge;u_short fst_bridgestrip;u_short fst_traceinit;u_short fst_tracerecv;u_short fst_lem_rej;u_short fst_lem_events;u_short fst_lct_rej;u_short fst_tne_exp_rej;u_short fst_connection;u_short fst_ebf_error;};
struct fstatus {__int16 led_state;__int16 rmt_state;__int16 link_state;__int16 dup_add_test;__int16 ring_purge_state;u_int neg_trt;u_char upstream[6];u_char downstream[6];u_char una_timed_out;u_char frame_strip_mode;u_char claim_token_mode;u_char phy_state;u_char neighbor_phy_type;u_char rej_reason;u_int phy_link_error;u_char ring_error;u_int t_req;u_int tvx;u_int t_max;u_int lem_threshold;u_int rtoken_timeout;u_char fw_rev[4];u_char phy_rev[4];u_char pmd_type;u_char dir_beacon[6];__int16 smt_version;__int16 state;u_char dir_beacon_una[6];__int16 cnt_interval;__int16 full_duplex_mode;__int16 full_duplex_state;};
enum ftype3 {NF3REG = 0x1,NF3DIR = 0x2,NF3BLK = 0x3,NF3CHR = 0x4,NF3LNK = 0x5,NF3SOCK = 0x6,NF3FIFO = 0x7,};
struct full_rlc {int type;unsigned __int64 konst;unsigned __int64 vaddr;unsigned __int64 dist2lo;};
struct fullstat {dev_t st_dev;ino_t st_ino;mode_t st_mode;nlink_t st_nlink;uid_t st_uid;gid_t st_gid;dev_t st_rdev;off_t st_size;time_t st_atime;int st_uatime;time_t st_mtime;int st_umtime;time_t st_ctime;int st_uctime;uint_t st_blksize;uint_t st_blocks;int st_vfstype;uint_t st_vfs;uint_t st_type;uint_t st_gen;uint_t st_flag;uid_t st_uid_raw;gid_t st_gid_raw;ushort_t st_access;uint_t st_spare4[5];};
typedef struct $4B6069307D1FCD665AA366F421E59ACD gen_Tspec_t;
typedef struct $8F46F47918C9B5A0B3A9BC26D821254C genparm_parms_t;
struct getargs {char *path;__int64 follow;struct proplistname_args *name_args;__int64 nbytes;char *buf;int *min_buf_size;};
struct getcredres {keystatus status;union getcredres::$C5134A0BDA290BA80D31944F899AB902 getcredres_u;};
union getcredres::$C5134A0BDA290BA80D31944F899AB902 {unixcred cred;};
struct getioinfo {int pi_version;int pi_flags;union getioinfo::$AABFD47C540D297D98FC8DED9E735A67 pi_un;};
union getioinfo::$AABFD47C540D297D98FC8DED9E735A67 {struct getioinfo::$AABFD47C540D297D98FC8DED9E735A67::$308FDDD16B91F1F677AC4092A9965C77 pi_v0;char pi_reserved[250];};
struct getioinfo::$AABFD47C540D297D98FC8DED9E735A67::$308FDDD16B91F1F677AC4092A9965C77 {struct partition pi_part;__int64 pi_max_xfer;};
typedef struct getioinfo getioinfo_t;
struct getquota_args {char *gqa_pathp;u_int gqa_uid;};
struct getquota_rslt {enum gqr_status gqr_status;struct rquota gqr_rquota;};
typedef uint32 gid3;
typedef uint_t gid_t;
typedef struct $B5C17C29786A1BB82FE488E3D86A8C43 glob_t;
union gp_table {struct gp_table::$DBAE1C0E6EBEF0CD763001986F50AE8C header;struct gp_table::$18694E7549AD5EA391A6A3BE0C90F579 entry;};
struct gp_table::$18694E7549AD5EA391A6A3BE0C90F579 {int g_value;int bytes;};
struct gp_table::$DBAE1C0E6EBEF0CD763001986F50AE8C {int current_g_value;int unused;};
struct gpdirect {u_long d_ino;u_short d_reclen;u_short d_namlen;char d_name[14];u_short d_padding;};
enum gqr_status {Q_OK = 0x1,Q_NOQUOTA = 0x2,Q_EPERM = 0x3,};
struct gregset {__int64 regs[46];};
typedef struct gregset gregset_t;
struct group {char *gr_name;char *gr_passwd;gid_t gr_gid;char **gr_mem;};
typedef struct $E4AC7511DCAB1B7ED5F95FA065B21662 group_params;
struct groups {char *g_name;struct groups *g_next;int g_hbit;};
struct gtcopos {int xpos;int ypos;__int16 status;__int16 scount;__int16 xtilt;__int16 ytilt;__int16 pressure;__int16 pad;};
typedef struct $00AADC3DD05FECE689336ECE4990DEE4 guar_Rspec_t;
struct hashreq {char ifr_name[16];u_long version;int cmd;tcntl_error_code_t error;unsigned int varlen;void *lookup_ctx;union hashreq::$641FA8AA21CD10724C2B7ECF99A03C59 spec;};
union hashreq::$641FA8AA21CD10724C2B7ECF99A03C59 {struct hashreq::$641FA8AA21CD10724C2B7ECF99A03C59::$0C6CC0D705E7F5750F3066412C201AB3 list_flows;struct hashreq::$641FA8AA21CD10724C2B7ECF99A03C59::$FA3974285980AF9E00191A3E98CA430C list_flow_hth;struct hashreq::$641FA8AA21CD10724C2B7ECF99A03C59::$C94FE3014CA5ECEC7AE9A61BD1D99821 e_flow_slot;struct hashreq::$641FA8AA21CD10724C2B7ECF99A03C59::$FCF64A006B8FEE8D8580DA6F32F9FC1B list_filt_hth;struct hashreq::$641FA8AA21CD10724C2B7ECF99A03C59::$1791A7A6C9E28BA8E9E2A8D57E3D7AE3 e_filt_slot;};
struct hashreq::$641FA8AA21CD10724C2B7ECF99A03C59::$0C6CC0D705E7F5750F3066412C201AB3 {unsigned int tag_scope;unsigned int flow_bucket;unsigned int actual_handles;tcntl_rhandle_t last_handle;};
struct hashreq::$641FA8AA21CD10724C2B7ECF99A03C59::$1791A7A6C9E28BA8E9E2A8D57E3D7AE3 {unsigned int filter_bucket;unsigned int filter_slot;unsigned int filter_count;unsigned int bucket_flags;unsigned __int64 hit_count;unsigned __int64 miss_count;unsigned __int64 colission_count;};
struct hashreq::$641FA8AA21CD10724C2B7ECF99A03C59::$C94FE3014CA5ECEC7AE9A61BD1D99821 {unsigned int flow_bucket;unsigned int flow_slot;unsigned int flow_count;unsigned int bucket_flags;unsigned __int64 hit_count;unsigned __int64 miss_count;unsigned __int64 colission_count;};
struct hashreq::$641FA8AA21CD10724C2B7ECF99A03C59::$FA3974285980AF9E00191A3E98CA430C {unsigned int flow_bucket;unsigned int table_slots;unsigned int max_entries;unsigned int curr_entries;unsigned int flags;};
struct hashreq::$641FA8AA21CD10724C2B7ECF99A03C59::$FCF64A006B8FEE8D8580DA6F32F9FC1B {unsigned int filter_bucket;unsigned int table_slots;unsigned int max_entries;unsigned int curr_entries;unsigned int flags;};
struct hdr {unsigned __int8 len;unsigned __int8 type;ushort magic;ushort checksum;};
struct header {__int16 magic;unsigned __int16 size;__int16 maxx;__int16 maxy;__int16 xtend;};
struct hier_ptr {struct hier_ptr *parent;struct hier_ptr *peer;struct hier_ptr *child;MEM_DESC *member;int instance;};
struct hier_rel {FIND_INFO find_info;HIER_PTR *hierarchy;simple_lock_data_t slock;__int64 prev_mem_id;int prev_inst;HIER_PTR *prev;};
typedef enum $77F4E97EC64EB764A006B2CB38EEE544 highlightType;
struct host_basic_info {int max_cpus;int avail_cpus;vm_size_t memory_size;cpu_type_t cpu_type;cpu_subtype_t cpu_subtype;};
typedef struct host_basic_info host_basic_info_data_t;
typedef struct host_basic_info *host_basic_info_t;
typedef __int64 host_info_data_t[1024];
typedef __int64 *host_info_t;
struct host_paging_info {time_value_t sample_time;time_value_t reset_time;__int64 pagesize;__int64 free_count;__int64 active_count;__int64 inactive_count;__int64 wire_count;__int64 faults;__int64 zero_fill_count;__int64 pageins;__int64 pages_pagedin;__int64 cow_faults;__int64 reactivations;__int64 lookups;__int64 hits;__int64 pageouts;__int64 pages_pagedout;};
typedef struct host_paging_info host_paging_info_data_t;
typedef struct host_paging_info *host_paging_info_t;
typedef port_t host_priv_t;
struct host_sched_info {int min_timeout;int min_quantum;};
typedef struct host_sched_info host_sched_info_data_t;
typedef struct host_sched_info *host_sched_info_t;
typedef port_t host_t;
struct hostent {char *h_name;char **h_aliases;int h_addrtype;int h_length;char **h_addr_list;};
struct hostent_data {struct in_addr host_addr;char *h_addr_ptrs[36];char hostaddr[35];char hostbuf[8193];char *host_aliases[35];char *host_addrs[2];FILE *hostf;int svc_gethostflag;int svc_gethostbind;};
enum how_to_boot {b_diskless = 0x0,b_diskful = 0x1,b_diskful_client = 0x2,b_boot_server = 0x3,b_gateway = 0x4,b_tellme = 0x5,b_install_disk = 0x6,};
struct hs_req {char subsys[16];cfg_op_t op;uint flags;};
typedef struct hs_req hs_req_t;
struct hs_rply {char subsys[16];cfg_op_t op;cfg_status_t status;__int64 magic;};
typedef struct hs_rply hs_rply_t;
struct hsearch_data {void *table;uint_t length;uint_t dim;uint_t prcnt;uint_t count;};
struct hw_addr {net_type hw;union hw_addr::$534C4C64D2F0C5DF6C9F3C95D2133858 hw_addr_u;};
union hw_addr::$534C4C64D2F0C5DF6C9F3C95D2133858 {char enetaddr[6];char lanaddr[2];char *nbpid;};
struct hw_sg_table_control {u_int index;u_int num;vm_offset_t table_base;};
struct hwconfig {ulong type;char *parent_bus;__int64 parent_bus_instance;char *driver_name;__int64 instance_info;struct hwconfig::driver *driver_struct;char *target_name;int target_num;struct hwconfig::bus *bus_ptr;char *module_list;ulong rsvd[3];};
struct iccsr {unsigned __int64 iccsr_ign3;};
typedef struct $BCAE7384F079FDFA9DD5F4EFBAB29817 iceAuthNextPhaseMsg;
typedef struct $BCAE7384F079FDFA9DD5F4EFBAB29817 iceAuthReplyMsg;
typedef struct $3B80496DCDE561EAC81E803683D00588 iceAuthRequiredMsg;
typedef struct $694E7AF0BC9EE95CDB6E54249E923D7E iceByteOrderMsg;
typedef struct $350BC2B23F9B41AFEB7D1AE3E404670A iceConnectionReplyMsg;
typedef struct $5C41C718BCBFD6CC2A68DF59D547D717 iceConnectionSetupMsg;
typedef struct $8D66564F98126883EE28AC7CFF4C7324 iceErrorMsg;
typedef struct $67E052DBE3D4216490A6D8B2745BB149 iceMsg;
typedef iceMsg iceNoCloseMsg;
typedef iceMsg icePingMsg;
typedef iceMsg icePingReplyMsg;
typedef struct $DF35D159A1509306ACCF933DCAD10C10 iceProtocolReplyMsg;
typedef struct $1D4F7230B22579A4FD715C0E003DAA6E iceProtocolSetupMsg;
typedef iceMsg iceWantToCloseMsg;
struct icmp {u_char icmp_type;u_char icmp_code;u_short icmp_cksum;union icmp::$19FEA8A5B78A1D8C9A7FA9CF77025A2A icmp_hun;union icmp::$3595841833E5DC58254DA70F0DE0B6E8 icmp_dun;};
union icmp::$19FEA8A5B78A1D8C9A7FA9CF77025A2A {u_char ih_pptr;struct in_addr ih_gwaddr;struct icmp::$19FEA8A5B78A1D8C9A7FA9CF77025A2A::ih_idseq ih_idseq;int ih_void;struct icmp::$19FEA8A5B78A1D8C9A7FA9CF77025A2A::ih_pmtu ih_pmtu;};
struct icmp::$19FEA8A5B78A1D8C9A7FA9CF77025A2A::ih_idseq {n_short icd_id;n_short icd_seq;};
struct icmp::$19FEA8A5B78A1D8C9A7FA9CF77025A2A::ih_pmtu {n_short ipm_void;n_short ipm_nextmtu;};
union icmp::$3595841833E5DC58254DA70F0DE0B6E8 {struct icmp::$3595841833E5DC58254DA70F0DE0B6E8::id_ts id_ts;struct icmp::$3595841833E5DC58254DA70F0DE0B6E8::id_ip id_ip;u_int id_mask;char id_data[1];};
struct icmp::$3595841833E5DC58254DA70F0DE0B6E8::id_ip {struct ip idi_ip;};
struct icmp::$3595841833E5DC58254DA70F0DE0B6E8::id_ts {n_time its_otime;n_time its_rtime;n_time its_ttime;};
typedef struct _icmp_blk icmp_blk;
struct icmpstat {time_t time;u_long icps_error;u_long icps_oldshort;u_long icps_oldicmp;u_long icps_outhist[19];u_long icps_badcode;u_long icps_tooshort;u_long icps_checksum;u_long icps_badlen;u_long icps_reflect;u_long icps_inhist[19];};
struct icommon {u_short ic_mode;nlink_t ic_nlink;ushort ic_uid;ushort ic_gid;quad ic_size;time_t ic_atime;__int64 ic_atspare;time_t ic_mtime;__int64 ic_mtspare;time_t ic_ctime;__int64 ic_ctspare;daddr_t ic_db[12];daddr_t ic_ib[3];__int64 ic_flags;__int64 ic_blocks;__int64 ic_spare[5];};
typedef struct __iconv_rec *iconv_t;
typedef struct _id_blk id_blk;
typedef pid_t id_t;
struct idates {char id_name[258];char id_incno;time_t id_ddate;};
enum idop {POP_DIFF = 0x0,POP_AND = 0x1,POP_OR = 0x2,POP_XOR = 0x3,};
typedef enum idop idop_t;
struct idp {u_short idp_sum;u_short idp_len;u_char idp_tc;u_char idp_pt;struct ns_addr idp_dna;struct ns_addr idp_sna;};
struct idpstat {int idps_badsum;int idps_tooshort;int idps_toosmall;int idps_badhlen;int idps_badlen;};
enum idtype {P_PID = 0x0,P_PPID = 0x1,P_PGID = 0x2,P_SID = 0x3,P_CID = 0x4,P_UID = 0x5,P_GID = 0x6,P_ALL = 0x7,};
typedef enum idtype idtype_t;
typedef struct _if_blk if_blk;
struct if_blk_hdr {int total_cnt;int curr_cnt;int more;};
struct if_info_blk {char if_name[12];char if_version[100];u_char if_type;int if_index;int if_unit;int if_mtu;int if_operstatus;int if_speed;struct timeval if_lastchange;int if_inoctets;int if_indiscards;int if_inerrors;int if_inmcasts;int if_inucasts;int if_outmcasts;int if_outucasts;int if_noproto;int if_outoctets;int if_outerrors;int if_outqlen;int if_outdiscards;int if_nr;int if_nrnext;};
struct if_nameindex {unsigned int if_index;char *if_name;};
typedef struct _if_names_blk if_names_blk;
struct if_names_hdr {int total_cnt;int curr_cnt;int more;};
struct if_names_info_blk {char if_name[12];int if_unit;};
struct if_nrset {char nr_name[16];int nr_len;int nr_cnt;nrset_t *nr_buf;};
struct ifaddr {struct sockaddr *ifa_addr;struct sockaddr *ifa_dstaddr;struct sockaddr *ifa_netmask;struct ifnet *ifa_ifp;struct ifaddr *ifa_next;void (*ifa_rtrequest)(int, struct rtentry *, struct sockaddr *);struct rtentry *ifa_rt;u_short ifa_flags;u_short ifa_llinfolen;u_int ifa_refcnt;};
struct ifafilt {struct sockaddr ifaf_addr;struct sockaddr ifaf_mask;u_int ifaf_action;u_int ifaf_cnt;};
struct ifafiltreq {char ifafr_name[16];u_int ifafr_cnt;struct ifafilt *ifafr_filt;};
struct ifaliasreq {char ifra_name[16];struct sockaddr ifra_addr;struct sockaddr ifra_broadaddr;struct sockaddr ifra_mask;};
struct ifchar {char ifc_name[16];u_int ifc_treq;u_int ifc_tvx;u_int ifc_lem;u_int ifc_rtoken;u_int ifc_ring_purger;u_int ifc_cnt_interval;int ifc_full_duplex_mode;int ifc_media_speed;int ifc_media_type;int ifc_auto_sense;};
struct ifconf {int ifc_len;union ifconf::$28C87C5ACD364976D94B96E40062B553 ifc_ifcu;};
union ifconf::$28C87C5ACD364976D94B96E40062B553 {caddr_t ifcu_buf;struct ifreq *ifcu_req;};
struct ifdevea {char ifr_name[16];u_char default_pa[6];u_char current_pa[6];};
struct ifeeprom {char ife_name[16];u_char ife_data[64];u_int ife_offset;u_int ife_blklen;u_int ife_lastblk;};
struct ifmulti {u_char ifm_addrlo[6];u_char ifm_addrhi[6];struct ifnet *ifm_ifnet;u_int ifm_refcount;struct ifmulti *ifm_next;};
struct ifnet {struct ifnet *if_next;char *if_name;char *if_version;struct sockaddr if_addr;int if_flags;int if_pfactive;__int16 if_unit;u_short if_mtu;u_short if_mediamtu;__int16 if_timer;int if_metric;int pad_a[1];struct ifaddr *if_addrlist;struct ifmulti *if_multiaddrs;int if_multicnt;int if_allmulticnt;int (*if_init)(int);int (*if_output)(struct ifnet *, struct mbuf *, struct sockaddr *, struct rtentry *);int (*if_start)(struct ifnet *);int (*if_done)(struct ifnet *);int (*if_ioctl)(struct ifnet *, unsigned int, caddr_t);int (*if_reset)(int, int);int (*if_watchdog)(int);__int64 if_reserved[6];u_long if_ipackets;u_long if_ierrors;u_long if_opackets;u_long if_oerrors;u_long if_collisions;u_long if_sysid_type;struct timeval if_lastchange;u_long if_ibytes;u_long if_obytes;u_long if_imcasts;u_long if_omcasts;u_long if_iqdrops;u_long if_noproto;u_long if_baudrate;__int64 if_reserved2[2];u_char if_type;u_char if_addrlen;u_char if_hdrlen;u_char old_if_index;u_int if_index;int if_trustgrp;int if_affinity;struct ifafilt *if_afilt;struct ifnet *if_nrnext;struct ifnet *if_nrif;u_short if_alloc_size;u_short if_padb[1];u_int if_padc[5];struct ifnet::ifqueue if_snd;int (*if_uiomove)();int (*if_xmtbufalloc)();int (*if_pktok)();void (*if_sockbuf)();int if_buflen;};
struct ifnet::ifqueue {struct mbuf *ifq_head;struct mbuf *ifq_tail;int ifq_len;int ifq_maxlen;int ifq_drops;};
struct ifnet_en;
struct ifpppcstatsreq {char ifr_name[16];struct ppp_comp_stats stats;};
struct ifpppstatsreq {char ifr_name[16];struct ppp_stats stats;};
struct ifreq {char ifr_name[16];union ifreq::$3DF14F42C1F9AB9C95ACB942FF93B7E3 ifr_ifru;};
union ifreq::$3DF14F42C1F9AB9C95ACB942FF93B7E3 {struct sockaddr ifru_addr;struct sockaddr ifru_dstaddr;struct sockaddr ifru_broadaddr;int ifru_flags;int ifru_metric;caddr_t ifru_data;int ifru_value;u_int ifru_index;};
enum ifstate {NIFF_INIT = 0x0,NIFF_GREEN = 0x1,NIFF_YELLOW = 0x2,NIFF_ORANGE = 0x3,NIFF_RED = 0x4,NIFF_DEAD = 0x5,NIFF_IF_DOWN = 0x6,};
typedef enum ifstate ifstate_t;
struct igmp {u_char igmp_type;u_char igmp_code;u_short igmp_cksum;struct in_addr igmp_group;};
struct igmpstat {time_t time;u_long igps_rcv_total;u_long igps_rcv_tooshort;u_long igps_rcv_badsum;u_long igps_rcv_queries;u_long igps_rcv_badqueries;u_long igps_rcv_reports;u_long igps_rcv_badreports;u_long igps_rcv_ourreports;u_long igps_snd_reports;};
typedef void ilb_ir_t;
struct imghdr {int imgflg;int format;int grdtyp;int coding;int hedlen;int cmplen;int cmpenm;int cmpsnm;int cmscsz;int spbgnm;int spblen;int spbnum;int spbynm;int spbxnm;int spbznm;int orient;int imxres;int imyres;int imxpos;int imypos;int timgap;int reserve[29];char inform[312];};
struct in6_addr {union in6_addr::$4F517FFE62EF4B146A81C14A19DB1E7A s6_un;};
union in6_addr::$4F517FFE62EF4B146A81C14A19DB1E7A {uint8_t sa6_addr[16];uint16_t sa6_waddr[8];uint32_t sa6_laddr[4];uint64_t sa6_qaddr[2];};
struct in_addr {unsigned int s_addr;};
typedef unsigned int in_addr_t;
struct in_afilt {struct sockaddr_in ifaf_addr;struct sockaddr_in ifaf_mask;u_int ifaf_action;u_int ifaf_cnt;};
struct in_afiltreq {char ifafr_name[16];u_int ifafr_cnt;struct in_afiltreq::in_afilt *ifafr_filt;};
struct in_aliasreq {char ifra_name[16];struct sockaddr_in ifra_addr;struct sockaddr_in ifra_broadaddr;struct sockaddr_in ifra_mask;};
struct in_ifaddr {struct ifaddr ia_ifa;u_int ia_net;u_int ia_netmask;u_int ia_subnet;u_int ia_subnetmask;struct in_addr ia_netbroadcast;struct in_ifaddr *ia_next;struct sockaddr_in ia_addr;struct sockaddr_in ia_dstaddr;struct sockaddr_in ia_sockmask;struct in_ifaddr::in_multi *ia_multiaddrs;};
struct in_ifaddrh {struct in_addr ipa;u_int ref;u_short flags;struct ifnet *ifp;struct in_ifaddrh *inh_next;};
struct in_multi {struct in_addr inm_addr;struct ifnet *inm_ifp;struct in_ifaddr *inm_ia;u_int inm_refcount;u_int inm_timer;struct in_multi *inm_next;u_int inm_state;struct router_info *inm_rti;};
typedef unsigned __int16 in_port_t;
struct in_route {struct rtentry *in_ro_rt;union in_route::$EC3B7231CB6CA3A877F37F42AE823579 in_ro_dst_un;u_long in_ro_timestamp;__int64 in_ro_reserved[1];};
union in_route::$EC3B7231CB6CA3A877F37F42AE823579 {struct sockaddr in_ro_dst_un_dst;struct sockaddr_in in_ro_dst_un_dst4;struct sockaddr_in6 in_ro_dst_un_dst6;};
typedef u_int16_t indx_t;
struct inet_config {int version;int errcode;int flags;int inetprintfs;int useloopback;int ipgateway;int ipforwarding;int ipsendredirects;int ipdirected_broadcast;int ipsrcroute;int subnetsarelocal;int ipqmaxlen;int tcpttl;int tcpmssdflt;int tcprttdflt;int tcpkeepidle;int tcpkeepintvl;int tcpcompat_42;int tcprexmtthresh;int tcpconsdebug;u_int tcp_sendspace;u_int tcp_recvspace;int udpttl;int udpcksum;u_int udp_sendspace;u_int udp_recvspace;int arpkillc;int arpkilli;int arprefresh;int arphold;int arplost;int arpdead;int arpqmaxlen;int arptabbsiz;int arptabnb;};
typedef struct inet_config inet_config_t;
struct inetstats {struct ipstat ipstat;u_long spares_a[10];struct tcpstat tcpstat;u_long spares_b[10];struct udpstat udpstat;u_long spares_c[10];struct igmpstat igmpstat;u_long spares_d[10];struct icmpstat icmpstat;u_long spares_e[10];struct mrtstat mrtstat;u_long spares_f[10];struct rtstat rtstat;u_long spares_g[10];};
struct inifaddr_hstat {int iacompared;int iamatched;int iaentry;int iarefentry;};
typedef uint_t ino_t;
struct inpcb {struct inpcb *inp_next;struct inpcb *inp_prev;struct inpcb *inp_head;int inp_api;struct socket *inp_socket;caddr_t inp_ppcb;int inp_flags;int pad_a[2];struct in_route inp_route;__int64 pad_b[1];struct mbuf *inp_options;struct inpcb::ip_moptions *inp_moptions;struct inpcb::__inpcb_hashbucket *inp_hb;struct inpcb *inp_fasttimo_next;struct inpcb *inp_slowtimo_next;__int64 pad_c[3];char inp_tos;char inp_ttl;u_short inp_pcksum;int inp_proto;int inp_fflow;int inp_lflow;int inp_netlayer;int inp_refcnt;u_short inp_fport;u_short inp_lport;struct in6_addr inp_faddr;struct in6_addr inp_laddr;__int64 inp_reserved[8];};
struct inquiry_info {u_char perfdt;unsigned __int8 rmb;u_char version;unsigned __int8;u_char addlen;u_char rsvd[3];u_char vndrid[8];u_char prodid[16];u_char revlvl[4];u_char revdata[8];};
typedef signed __int16 int16_t;
typedef signed __int16 int16m_t;
typedef int int32;
typedef signed int int32_t;
typedef signed int int32m_t;
typedef __int64 int64;
typedef signed __int64 int64_t;
typedef signed __int64 int64m_t;
typedef signed __int8 int8_t;
typedef signed __int8 int8m_t;
typedef int (*int_function)();
enum int_serv_wkp {IS_WKP_HOP_CNT = 0x4,IS_WKP_PATH_BW = 0x6,IS_WKP_MIN_LATENCY = 0x8,IS_WKP_COMPOSED_MTU = 0xA,IS_WKP_TB_TSPEC = 0x7F,};
typedef struct $BE87D764618B07893DE67EDA20AE5310 *internalDECWmHints;
typedef struct $BE87D764618B07893DE67EDA20AE5310 internalDECWmHintsRec;
typedef struct $9994C5E3500D4B492A708363DBC1D083 *internalDecorationGeometry;
typedef struct $9994C5E3500D4B492A708363DBC1D083 internalDecorationGeometryRec;
typedef struct $3069520C01748D65963A1DD1AEA3B642 *internalWmIconState;
typedef struct $3069520C01748D65963A1DD1AEA3B642 internalWmIconStateRec;
typedef signed __int64 intptr_t;
struct io {u_int total;u_int hitclean;u_int hitdirty;u_int pass;u_int alloc;};
typedef unsigned __int64 io_handle_t;
struct io_uxfer {int io_cnt;u_char *io_addr;u_char io_cdb[12];};
struct iovec {void *iov_base;size_t iov_len;};
typedef struct iovec iovec_t;
struct ip {unsigned __int8 ip_v;u_char ip_tos;u_short ip_len;u_short ip_id;u_short ip_off;u_char ip_ttl;u_char ip_p;u_short ip_sum;struct in_addr ip_src;struct in_addr ip_dst;};
struct ip4_rtgetreq {struct sockaddr_in dst;struct sockaddr_in src;struct sockaddr_in gateway;struct in_addr forw_ifc_addr;vifbitmap_t vif_mask;};
struct ip6_rtgetreq {struct sockaddr_in6 dst;struct sockaddr_in6 src;struct sockaddr_in6 gateway;struct in6_addr forw_ifc_addr;int unused;int nr;unsigned __int64 ifc_mask[1];};
struct ip_addr_arg {u_long ipaddr;};
struct ip_addr_t {char net;char host;char lh;char impno;};
struct ip_alloc_arg {char etheraddr[6];u_long netnum;u_long subnetmask;};
struct ip_alloc_res {ip_status status;union ip_alloc_res::$521C326385B0A16B8A21C9E9B3279526 ip_alloc_res_u;};
union ip_alloc_res::$521C326385B0A16B8A21C9E9B3279526 {u_long ipaddr;};
typedef struct _ip_blk ip_blk;
struct ip_mreq {struct in_addr imr_multiaddr;struct in_addr imr_interface;};
struct ip_opts {struct in_addr ip_dst;char ip_opts[40];};
typedef struct _ip_routing_blk ip_routing_blk;
struct ip_routing_hdr {int total_cnt;int curr_cnt;int more;};
struct ip_routing_info_blk {struct in_addr rt_dst;struct in_addr rt_next_hop;struct in_addr rt_maskx;struct in_addr interface_ipaddr;int rt_flags;int if_index;};
struct ip_srcrt {struct in_addr dst;char nop;char srcopt[3];struct in_addr route[10];};
enum ip_status {ip_success = 0x0,ip_failure = 0x1,ip_rpc = 0x2,ip_no_addresses = 0x3,ip_no_system = 0x4,ip_no_priv = 0x5,};
struct ip_timestamp {u_char ipt_code;u_char ipt_len;u_char ipt_ptr;unsigned __int8 ipt_oflw;union ip_timestamp::ipt_timestamp ipt_timestamp;};
union ip_timestamp::ipt_timestamp {n_long ipt_time[1];struct ip_timestamp::ipt_timestamp::ipt_ta ipt_ta[1];};
struct ip_timestamp::ipt_timestamp::ipt_ta {struct in_addr ipt_addr;n_long ipt_time;};
struct ip_toname_res {ip_status status;union ip_toname_res::$CBF905A79662A93B1A496280DB3EEDDC ip_toname_res_u;};
union ip_toname_res::$CBF905A79662A93B1A496280DB3EEDDC {char *name;};
struct ipaddr_info_blk {struct in_addr ip_addr;struct in_addr mask_addr;struct in_addr bcast_addr;int if_index;};
struct ipasfrag {struct ip *xxx;struct ip *ipf_ip;struct ipasfrag *ipf_next;struct ipasfrag *ipf_prev;};
struct ipc_perm {uid_t uid;gid_t gid;uid_t cuid;gid_t cgid;mode_t mode;ushort_t seq;key_t key;};
struct ipoption {union ipoption::$BC7DD1100F10302510EC11F3692235D0 ipopt;char ipopt_list[40];};
union ipoption::$BC7DD1100F10302510EC11F3692235D0 {struct in_addr ipopt_dest;int ipopt_len;};
struct ipovly {u_int fill[2];u_char ih_x1;u_char ih_pr;u_short ih_len;struct in_addr ih_src;struct in_addr ih_dst;};
struct ipq {struct ipq *next;struct ipq *prev;struct ipq::ipasfrag *ipq_next;struct ipq::ipasfrag *ipq_prev;u_char ipq_ttl;u_char ipq_p;u_short ipq_id;struct in_addr ipq_src;struct in_addr ipq_dst;int ipq_flags;};
struct ipreass {int ipr_percent;unsigned __int64 ipr_max;unsigned __int64 ipr_inuse;int ipr_drops;};
struct ipstat {time_t time;u_long ips_total;u_long ips_badsum;u_long ips_tooshort;u_long ips_toosmall;u_long ips_badhlen;u_long ips_badlen;u_long ips_fragments;u_long ips_fragdropped;u_long ips_fragtimeout;u_long ips_forward;u_long ips_cantforward;u_long ips_redirectsent;u_long ips_noproto;u_long ips_delivered;u_long ips_localout;u_long ips_odropped;u_long ips_reassembled;u_long ips_fragmented;u_long ips_ofragments;u_long ips_cantfrag;u_long ips_accessdeny;u_long ips_linklevelbroadcast;u_long ips_onetdown;u_long ips_onetunreach;u_long ips_ohostunreach;u_long ips_onobroadcast;u_long ips_onomulticast;u_long ips_ocantfrag;u_long ips_onotsupported;u_long ips_oioerror;u_long ips_onobufs;};
typedef struct $5A70ABBFC870346A31B5EA378AAD44D0 ir_bucket_t;
struct ir_entry {attribute_t *ir_rep;struct ir_entry *next_slot;struct ir_entry *prev_slot;simple_lock_data_t slot_lock;int slot_ref;u_int hash_value;};
typedef struct ir_entry ir_entry_t;
struct iso9660_drec {unsigned __int8 drec_len;unsigned __int8 xar_len;unsigned int locext;unsigned int data_len;time_t rec_time;unsigned __int8 file_flags;unsigned __int8 file_usize;unsigned __int8 ileav_gsize;unsigned __int16 volseqno;unsigned __int8 fileid_len;unsigned __int8 file_id[37];unsigned __int8 sysuse_len;unsigned __int8 sys_use[218];};
struct iso9660_ptrec {unsigned __int8 dirid_len;unsigned __int8 xar_len;unsigned int loc_ext;unsigned __int16 pdirno;unsigned __int8 dir_id[31];};
struct iso9660_pvd {unsigned __int8 voldestype;unsigned __int8 std_id[5];unsigned __int8 voldesvers;unsigned __int8 not_used_1;unsigned __int8 sys_id[32];unsigned __int8 vol_id[32];unsigned __int8 not_used_2[8];unsigned int volspcsize;unsigned __int16 volsetsize;unsigned __int16 volseqno;unsigned __int16 lblksize;unsigned int ptsize;unsigned int locpt_l;unsigned int locptopt_l;unsigned int locpt_m;unsigned int locptopt_m;unsigned __int8 rootdir[34];unsigned __int8 volset_id[128];unsigned __int8 pub_id[128];unsigned __int8 dtpre_id[128];unsigned __int8 app_id[128];unsigned __int8 cpfile_id[37];unsigned __int8 abfile_id[37];unsigned __int8 bgfile_id[37];time_t cre_time;time_t mod_time;time_t exp_time;time_t eff_time;unsigned __int8 filestrver;unsigned __int8 res1;unsigned __int8 appuse[512];unsigned __int8 res2[653];};
struct iso9660_xar {unsigned __int16 own_id;unsigned __int16 grp_id;unsigned __int16 permissions;time_t cre_time;time_t mod_time;time_t exp_time;time_t eff_time;unsigned __int8 rec_form;unsigned __int8 rec_attr;unsigned __int16 rec_len;unsigned __int8 sys_id[32];unsigned __int8 sys_use[64];unsigned __int8 xar_vers;unsigned __int8 esc_len;unsigned __int8 resv[64];unsigned __int8 appuse_len;unsigned __int8 *app_use;unsigned __int8 *esc_seq;};
struct item_list {u_long function;u_int out_flags;u_int in_flags;u_long rtn_status;struct item_list *next_function;u_long input_data;u_long output_data;};
struct itimerspec {struct timespec it_interval;struct timespec it_value;};
struct itimerval {struct timeval it_interval;struct timeval it_value;};
typedef __int64 jmp_buf[84];
typedef struct kernel_auxv kauxv_t;
struct kdebug_cpusw {unsigned __int64 system_type;char *system_string;struct kdebug_cpusw::device_table *tty_dev;unsigned __int64 tty_base;void (*delay)();};
typedef int kern_return_t;
struct kernel_auxv {struct kernel_auxv *next;struct kernel_auxv *prev;auxv_t a;};
struct kernel_parameters {struct kernel_parameters::vm_parameters vm;};
struct kernel_parameters::vm_parameters {__int64 nbpg;__int64 pgofset;__int64 pgshift;__int64 nvabits;unsigned __int64 seg1_base;unsigned __int64 unity_base;unsigned __int64 address_mask;pt_entry_t *selfmap;pt_entry_t *othermap;};
typedef char kernel_version_t[512];
typedef int key_t;
typedef char keybuf[48];
enum keystatus {KEY_SUCCESS = 0x0,KEY_NOSECRET = 0x1,KEY_UNKNOWN = 0x2,KEY_SYSTEMERR = 0x3,};
typedef struct lmf_klicense klic_t;
struct kmem_leak_user {__int64 timestamp;vm_offset_t caller;vm_offset_t addr;vm_size_t size;int type;};
typedef struct kmem_leak_user *kmem_leak_user_t;
struct ksm_bin_data_ds {ulong size;caddr_t addr;};
struct ksm_find_buf {struct ksm_reqbuf_hdr hdr;int find_subtype;int unused;char cat_name[32];__int64 member_id;__int64 parent_id;int member_inst;int parent_inst;__int64 mib_id;__int64 reserved[4];};
struct ksm_mem_req_buf {struct ksm_reqbuf_hdr hdr;__int64 member_id;union ksm_mem_req_buf::$71AE5E0B3D872F06C549656CE13ECC97 cmd;__int64 reserved[4];};
union ksm_mem_req_buf::$71AE5E0B3D872F06C549656CE13ECC97 {struct ksm_mem_req_buf::$71AE5E0B3D872F06C549656CE13ECC97::$4BA190788BC617474A775D5BE9F3C41F exe;struct ksm_mem_req_buf::$71AE5E0B3D872F06C549656CE13ECC97::$3A4CFAF8F77FAF6BBAA7EB006435CEAA get;struct ksm_mem_req_buf::$71AE5E0B3D872F06C549656CE13ECC97::$6E76AA8D446EE81312B85CF9A3A8DF60 user;};
struct ksm_mem_req_buf::$71AE5E0B3D872F06C549656CE13ECC97::$3A4CFAF8F77FAF6BBAA7EB006435CEAA {CMD_ELEM *cmds;int count;};
struct ksm_mem_req_buf::$71AE5E0B3D872F06C549656CE13ECC97::$4BA190788BC617474A775D5BE9F3C41F {char cmdname[32];int status;int reserved[3];};
struct ksm_mem_req_buf::$71AE5E0B3D872F06C549656CE13ECC97::$6E76AA8D446EE81312B85CF9A3A8DF60 {caddr_t data;int datasize;};
struct ksm_name_buf {char *names;int count;uint attrs;__int64 reserved;};
struct ksm_reqbuf_hdr {ulong flags;int opcode;int version;char setname[16];int ksm_version;int reserved[7];};
struct ksm_set_req_buf {struct ksm_reqbuf_hdr hdr;int set_version;int unused;KSM_NAME_BUF namebuf;__int64 reserved[4];};
struct l_field {char fd_name[15];char fd_initseq[256];char fd_termseq[256];char fd_emph[256];char fd_deemph[256];char fd_chrs[130];ushort fd_chrslen;char fd_escs[256];ushort fd_escslen;int fd_linelen;int fd_pagelen;char fd_truncline;};
struct l_flag {unsigned int fg_truncline;};
struct label_t {__int64 val[10];};
struct labelerror {__int16 error;__int16 eei;};
struct lastlog {time_t ll_time;char ll_line[32];char ll_host[256];};
typedef struct $0DA2860FA9A69F203063D0028C53EA56 lbxMotionCache;
typedef struct $6EB75DCF57D6784EE27228E47E167564 lbxMotionDeltaEvent;
typedef struct $36DE37CB51FE5E11DEB44C8315B704E8 lbxQuickMotionDeltaEvent;
struct lconv {char *decimal_point;char *thousands_sep;char *grouping;char *int_curr_symbol;char *currency_symbol;char *mon_decimal_point;char *mon_thousands_sep;char *mon_grouping;char *positive_sign;char *negative_sign;char int_frac_digits;char frac_digits;char p_cs_precedes;char p_sep_by_space;char n_cs_precedes;char n_sep_by_space;char p_sign_posn;char n_sign_posn;char *left_parenthesis;char *right_parenthesis;};
struct ldfile {int _fnum_;FILE *ioptr;__int64 offset;struct filehdr header;pCHDRR pchdr;int lastindex;unsigned __int16 type;unsigned int fBigendian;};
struct ldiv_t {__int64 quot;__int64 rem;};
typedef struct $9B1F774B27C392ED22A779C9E7386C0C ldr_data;
typedef struct $11A118BBBD9E10A128723536823DDEBF ldr_data_hdr;
typedef int (*ldr_entry_pt_t)();
typedef unsigned int ldr_load_flags_t;
struct ldr_module_info_t {ldr_module_t lmi_modid;int lmi_nregion;ldr_load_flags_t lmi_flags;char lmi_name[1023];};
typedef unsigned __int64 ldr_module_t;
typedef int ldr_process_t;
typedef unsigned int ldr_prot_t;
struct ldr_region_info_t {ldr_region_t lri_region_no;ldr_prot_t lri_prot;void *lri_vaddr;void *lri_mapaddr;size_t lri_size;char lri_name[64];};
typedef __int64 ldr_region_t;
typedef int level_t;
struct lib_data_functions {int (*data_hdl)(void **);void *(*data_ref)(void *);};
typedef struct lib_data_functions lib_data_functions_t;
struct libscn {int size;int offset;__int64 tsize;__int64 dsize;__int64 bsize;__int64 text_start;__int64 data_start;__int64 bss_start;};
struct lineno {union lineno::$B6D761DE21821713D84F7E83C80075AE l_addr;unsigned __int16 l_lnno;};
union lineno::$B6D761DE21821713D84F7E83C80075AE {__int64 l_symndx;__int64 l_paddr;};
struct linesw {int (*l_open)();int (*l_close)();int (*l_read)();int (*l_write)();int (*l_ioctl)();int (*l_rint)();int (*l_rend)();int (*l_meta)();int (*l_start)();int (*l_modem)();};
struct linger {int l_onoff;int l_linger;};
struct linkinfo_dn {unsigned __int16 idn_segsize;unsigned __int8 idn_linkstate;};
struct listfiltreq {char ifr_name[16];u_long version;tcntl_rhandle_t rhandle;unsigned int flow_bucket;tcntl_fhandle_t last_filter;unsigned int max_output;tcntl_filtspec_t *fv;unsigned int actual_olen;tcntl_error_code_t error;};
struct listflowreq {char ifr_name[16];u_long version;tcntl_rhandle_t rhandle;unsigned int flow_bucket;unsigned __int8 *device_data;unsigned int max_output;unsigned int actual_olen;tcntl_error_code_t error;unsigned int tag_scope;void *tag;unsigned int flow_class;unsigned __int64 refc;};
struct llc {u_char llc_dsap;u_char llc_ssap;union llc::$805787432C18CF587FCD9E2100BD6FA6 llc_un;};
union llc::$805787432C18CF587FCD9E2100BD6FA6 {struct llc::$805787432C18CF587FCD9E2100BD6FA6::$006E2A234B384D7422DE609276097B1E type_u;struct llc::$805787432C18CF587FCD9E2100BD6FA6::$029AB92B999B371AF6AE32CE328A08E3 type_i;struct llc::$805787432C18CF587FCD9E2100BD6FA6::$D619825BBD89C59DD7E12ADA974C8102 type_s;struct llc::$805787432C18CF587FCD9E2100BD6FA6::$54D752C39E6C5C953B5254AC41054BA7 type_is;struct llc::$805787432C18CF587FCD9E2100BD6FA6::$715722D32E6D0E046A2311D964D93C44 type_snap;};
struct llc::$805787432C18CF587FCD9E2100BD6FA6::$006E2A234B384D7422DE609276097B1E {u_char control;u_char format_id;u_char xid_class;u_char window_x2;};
struct llc::$805787432C18CF587FCD9E2100BD6FA6::$029AB92B999B371AF6AE32CE328A08E3 {u_char num_snd_x2;u_char num_rcv_x2;};
struct llc::$805787432C18CF587FCD9E2100BD6FA6::$54D752C39E6C5C953B5254AC41054BA7 {u_short control;};
struct llc::$805787432C18CF587FCD9E2100BD6FA6::$715722D32E6D0E046A2311D964D93C44 {u_char control;u_char org_code[3];u_short ether_type;};
struct llc::$805787432C18CF587FCD9E2100BD6FA6::$D619825BBD89C59DD7E12ADA974C8102 {u_char control;u_char num_rcv_x2;};
struct lmf_klicense {struct lmf_klicense *kl_next;time_t kl_release_date;time_t kl_termination;ver_t kl_version;int kl_act_charge;int kl_locked_units;int kl_usable_units;int kl_total_units;unsigned __int16 kl_max_cpus;unsigned __int16 kl_pad_s1;struct lmf_klicense::$9B350C76B5D4AFC9612A2063085C672B kl_flags;char kl_product_name[25];char kl_producer[25];char kl_product_token[32];char kl_hardware_id[32];};
struct lmf_klicense::$9B350C76B5D4AFC9612A2063085C672B {unsigned int fl_status;};
struct lock {simple_lock_data_t l_lock;void *next;void *prev;unsigned int l_caller;int l_wait_writers;int l_readers;unsigned __int8 l_flags;unsigned __int8 l_lifms;unsigned __int16 l_info;struct thread *l_lastlocker;};
typedef struct lock lock_data_t;
struct lock_read_rec_list {struct lock *l;int rec_count;};
typedef struct lock *lock_t;
struct lockinfo {char *li_name;int li_count;int li_flgspl;};
struct lockstats {unsigned __int64 ls_tries;unsigned __int64 ls_reads;unsigned __int64 ls_trmax;unsigned __int64 ls_misses;unsigned __int64 ls_sleeps;unsigned __int64 ls_waitmax;unsigned __int64 ls_waitmin;unsigned __int64 ls_waitsum;};
struct log_ctl {__int16 mid;__int16 sid;char level;__int16 flags;__int64 ltime;__int64 ttime;int seq_no;};
typedef __int64 longlong_t;
struct lpr232 {unsigned int c_cflag;};
struct lprio {int ind;int col;int line;};
struct lprmode {int modes;};
struct lptimer {unsigned int v_timout;};
struct ltchars {char t_suspc;char t_dsuspc;char t_rprntc;char t_flushc;char t_werasc;char t_lnextc;};
struct lwc {void (*lwc_ctxt)();};
typedef vm_offset_t lwc_id_t;
typedef int lwc_pri_t;
typedef struct lwc *lwc_t;
struct m_ext {caddr_t ext_buf;void (*ext_free)();u_int ext_size;caddr_t ext_arg;struct m_ext::ext_refq ext_ref;int (*uiomove_f)();int protocolSum;int bytesSummed;unsigned __int16 (*checksum)();};
struct m_ext::ext_refq {struct m_ext::ext_refq *forw;struct m_ext::ext_refq *back;};
struct m_hdr {struct mbuf *mh_next;struct mbuf *mh_nextpkt;caddr_t mh_data;int mh_len;int mh_type;int mh_flags;union m_hdr::$49014D0F19C8D796FBF8790D8CEFFD86 mh_un1;};
union m_hdr::$49014D0F19C8D796FBF8790D8CEFFD86 {caddr_t *mun1_ipq[4];caddr_t *mun1_ihp[4];};
union mac_addr {u_short saddr[3];u_char caddr[6];};
typedef mach_error_t (*mach_error_fn_t)(void);
typedef kern_return_t mach_error_t;
struct machine_info {int major_version;int minor_version;int max_cpus;int avail_cpus;vm_size_t memory_size;};
typedef struct machine_info machine_info_data_t;
typedef struct machine_info *machine_info_t;
struct machine_slot {boolean_t is_cpu;cpu_type_t cpu_type;cpu_subtype_t cpu_subtype;boolean_t running;__int64 cpu_ticks[5];int clock_freq;boolean_t error_restart;char *cpu_panicstr;struct thread *cpu_panic_thread;};
typedef struct machine_slot machine_slot_data_t;
typedef struct machine_slot *machine_slot_t;
typedef uint_t major_t;
struct mallinfo {int arena;int ordblks;int smblks;int hblks;int hblkhd;int usmblks;int fsmblks;int uordblks;int fordblks;int keepcost;};
struct malloc_stats {int request_size;int bucket_size;__int64 nmalloc;};
typedef void mand_ir_t;
struct map {struct mapent *m_limit;char *m_name;};
struct map_id {ushort old_id;uid_t new_id;};
struct mapent {__int64 m_size;__int64 m_addr;};
typedef ulong_t mask_t;
typedef unsigned int mbchar_t;
typedef enum $F13520DA388FBF9068488013F4B2A591 mbr_state;
struct mbstat {u_long m_mbufs;u_long m_clusters;u_long m_drops;u_long m_drain;u_int m_mtypes[16];};
typedef struct $1A0B911CFFDF458B39198AE378BEA8E2 mbstate_t;
struct mbuf {struct m_hdr m_hdr;union mbuf::$FB1191F76B4EEC94BC1E7A3F9FA69D83 M_dat;};
union mbuf::$::$AC428738F7DE9F14507AE45A77BF3F0B::$29C322D285C742AB9B8F455023B73C5B {struct m_ext MH_ext;char MH_databuf[172];};
union mbuf::$FB1191F76B4EEC94BC1E7A3F9FA69D83 {struct mbuf::$FB1191F76B4EEC94BC1E7A3F9FA69D83::$AC428738F7DE9F14507AE45A77BF3F0B MH;char M_databuf[188];};
struct mbuf::$FB1191F76B4EEC94BC1E7A3F9FA69D83::$AC428738F7DE9F14507AE45A77BF3F0B {struct pkthdr MH_pkthdr;union mbuf::$::$AC428738F7DE9F14507AE45A77BF3F0B::$29C322D285C742AB9B8F455023B73C5B MH_dat;};
typedef struct mbuf mbuf_t;
struct mc_changer;
struct mc_diag_entry;
struct mc_map;
struct mc_stat;
struct mc_stat_hdr;
typedef struct sigcontext mcontext_t;
struct mech_contexts {void *value;void (*destructor)();};
struct mem_desc {int category;char *unique_name;__int64 member_id;lock_data_t lock;MSS *mss_list;int last_instance;struct mem_desc *next;int flags;int (*cmn_support_rtn)(KSM_MEM_REQ_BUF *memreq, caddr_t indata, size_t inlen, caddr_t outdata, size_t outlen, ulong arg);ulong cmn_arg;int cfg[4];int set_spec1;int reserved[3];};
typedef int memberid_t;
typedef port_t memory_object_control_t;
typedef int memory_object_copy_strategy_t;
typedef port_t memory_object_name_t;
typedef port_t memory_object_t;
typedef enum $A4C507EE3209778ECF0B9DDC8BD963BA memtest_t;
typedef struct $DE3BCFA7F6F640490A26D997FC1738C7 method_t;
struct mfcctl {struct in_addr mfcc_origin;struct in_addr mfcc_mcastgrp;vifi_t mfcc_parent;u_char mfcc_ttls[32];};
struct mfs_args {char *name;caddr_t base;__int64 size;};
struct mib_ptr {struct mib_ptr *next;MEM_DESC *member;__int64 mib_id;};
struct mib_rel {FIND_INFO find_info;MIB_PTR *first_mib;__int64 last_mib_id;simple_lock_data_t slock;__int64 prev_mib_id;MIB_PTR *prev;};
typedef void *mid_t;
typedef struct monitored_interface_prev_state mif_prev_state_t;
typedef struct monitored_interface mif_t;
struct mig_symtab {char *ms_routine_name;int ms_routine_number;int (*ms_routine)(void);};
typedef struct mig_symtab mig_symtab_t;
typedef uint_t minor_t;
struct mint {int len;__int16 *val;};
struct mknoddata3 {ftype3 type;union mknoddata3::$FC3C3F7D5DC5FC9EABD2DCD2E16DDF69 mknoddata3_u;};
union mknoddata3::$FC3C3F7D5DC5FC9EABD2DCD2E16DDF69 {devicedata3 device;sattr3 pipe_attributes;};
struct mntinfo {struct sockaddr_in mi_addr;struct vnode *mi_rootvp;unsigned int mi_want;int mi_refct;int mi_tsize;int mi_stsize;int mi_bsize;int mi_mntno;int mi_timeo;int mi_maxtimo;int mi_retrans;char mi_hostname[256];char *mi_netname;int mi_netnamelen;int mi_authflavor;u_int mi_acregmin;u_int mi_acregmax;u_int mi_acdirmin;u_int mi_acdirmax;struct rpc_timers mi_timers[4];int mi_curread;int mi_curwrite;uint32 mi_dirtsize;struct pathcnf *mi_pathconf;int mi_flags;u_int mi_prog;u_int mi_vers;u_int mi_propdport;char **mi_rfsnames;char *mi_call_type;char *mi_timer_type;struct chtab *mi_chtab;struct chtab *mi_phtab;struct mntinfo::tcp_sock *mi_tsp;};
typedef uint32 mode3;
struct mode_sel_sns_data {struct mode_sel_sns_header ms_hdr;struct block_descriptor ms_desc;u_char ms_pages[243];};
struct mode_sel_sns_header {u_char sense_len;u_char medium_type;unsigned __int8 wp;u_char blk_des_len;};
struct mode_sel_sns_params {caddr_t msp_addr;u_char msp_pgcode;u_char msp_pgctrl;u_char msp_length;u_char msp_setps;};
typedef uint_t mode_t;
struct module_load {struct module_load *nextptr;char *driver_name;char *module_list;int type;char *parent_bus;__int64 parent_bus_instance;__int64 instance_info;struct module_load::bus *bus_ptr;};
struct module_stat {__int64 ms_pcnt;__int64 ms_scnt;__int64 ms_ocnt;__int64 ms_ccnt;__int64 ms_acnt;char *ms_xptr;__int16 ms_xsize;};
struct mon {struct mon_id mon_id;char priv[16];};
struct mon_id {char *mon_name;struct my_id my_id;};
struct monitor_args {caddr_t lowpc;caddr_t highpc;unsigned int *buffer;size_t bufsiz;};
typedef port_t monitor_t;
struct monitored_interface {char name[20];ifstate_t current_state;niffstate_t status;niffstate_t event;int $2;int dt;int $3;int flags;int next_time;int current_interval;int time_to_dead;u_int pcount;pid_t pid;mif_prev_state_t prev_state;struct monitored_interface *next;};
struct monitored_interface_prev_state {ifstate_t current_state;niffstate_t status;niffstate_t event;int next_time;int current_interval;int time_to_dead;};
struct mount {simple_lock_data_t m_lock;int m_flag;int m_funnel;struct mount *m_nxt;struct mount *m_prev;struct vfsops *m_op;struct vnode *m_vnodecovered;struct vnode *m_mounth;simple_lock_data_t m_vlist_lock;uid_t m_exroot;uid_t m_uid;struct nstatfs m_stat;qaddr_t m_info;struct mount::$217F7A696CF770B1CF3058E70470F668 m_nfs_errmsginfo;lock_data_t m_unmount_lock;__int64 m_lbolt;u_int m_iocntr;u_int m_iocnt;u_int m_iocnt_max;};
struct mount::$217F7A696CF770B1CF3058E70470F668 {int n_noexport;int last_noexport;int n_stalefh;int last_stalefh;};
union mount_info {struct ufs_args ufs_args;struct nfs_args nfs_args;struct mfs_args mfs_args;struct cdfs_args cdfs_args;struct procfs_args procfs_args;struct msfs_args msfs_args;struct ffm_args ffm_args;};
struct mountlist {char *ml_name;char *ml_path;struct mountlist *ml_nxt;};
struct mountres3 {mountstat3 fhs_status;union mountres3::$3D7A0CB925F6CF28B22A74AF5DF0F9CE mountres3_u;};
union mountres3::$3D7A0CB925F6CF28B22A74AF5DF0F9CE {mountres3_ok mountinfo;};
struct mountres3_ok {fhandle3 fhandle;struct mountres3_ok::$F1D97EB055E5AF8E573F495D2D3F20C5 auth_flavors;};
struct mountres3_ok::$F1D97EB055E5AF8E573F495D2D3F20C5 {u_int auth_flavors_len;int *auth_flavors_val;};
enum mountstat3 {MNT_OK = 0x0,MNT3ERR_PERM = 0x1,MNT3ERR_NOENT = 0x2,MNT3ERR_IO = 0x5,MNT3ERR_ACCES = 0xD,MNT3ERR_NOTDIR = 0x14,MNT3ERR_INVAL = 0x16,MNT3ERR_NAMETOOLONG = 0x3F,MNT3ERR_NOTSUPP = 0x2714,MNT3ERR_SERVERFAULT = 0x2716,};
struct mq_attr {__int64 mq_maxmsg;__int64 mq_msgsize;__int64 mq_flags;__int64 mq_curmsgs;};
typedef struct mq_attr mq_attr_t;
typedef int mqd_t;
struct mrtstat {time_t time;u_long mrts_mfc_lookups;u_long mrts_mfc_misses;u_long mrts_upcalls;u_long mrts_no_route;u_long mrts_bad_tunnel;u_long mrts_cant_tunnel;u_long mrts_wrong_if;u_long mrts_upq_ovflw;u_long mrts_cache_cleanups;u_long mrts_drop_sel;u_long mrts_q_overflow;u_long mrts_pkt2large;u_long mrts_upq_sockfull;};
struct msemaphore {int msem_state;int msem_wanted;};
struct msfs_args {struct msfs_id id;};
struct msfs_id {int id1;int id2;int tag;};
struct msg {struct msg *msg_next;__int64 msg_type;__int64 msg_ts;caddr_t msg_addr;};
typedef char *msg__ins;
typedef struct $FD6C4FAF03DFC9FB76C7E4C6C4684DAE msg__msg;
typedef struct $D33BD252587094186D62977081F79B51 msg__table;
typedef struct $A0A2823B84FDBEE4258EE638566D3DD8 msg_header_t;
typedef int msg_option_t;
typedef int msg_return_t;
typedef unsigned int msg_size_t;
typedef unsigned int msg_timeout_t;
enum msg_type {CALL = 0x0,REPLY = 0x1,};
typedef struct $2211593FD7C5E562CDCE5CEB5429C782 msg_type_long_t;
typedef struct $31397966837D66AE1047198855EC3C73 msg_type_t;
struct msg_wait {struct msg_wait *msg_wait_next;__int64 msg_wait_type;__int64 msg_wait_cnt;};
struct msgbuf {mtyp_t mtype;char mtext[1];};
struct msghdr {caddr_t msg_name;int msg_namelen;struct iovec *msg_iov;int msg_iovlen;caddr_t msg_accrights;int msg_accrightslen;};
struct msginfo {int msgmax;int msgmnb;int msgmni;int msgtql;__int64 msg;};
typedef ulong_t msglen_t;
typedef ulong_t msgqnum_t;
struct msqid_ds {struct ipc_perm msg_perm;struct msg *msg_first;struct msg *msg_last;msglen_t msg_cbytes;msgqnum_t msg_qnum;msglen_t msg_qbytes;pid_t msg_lspid;pid_t msg_lrpid;time_t msg_stime;time_t msg_rtime;time_t msg_ctime;struct msg_wait *msg_wait_list;};
struct mss {struct mss *next;cfg_subsys_attr_t *attr_table;char *owner_name;void *owner_ds;void **default_val;void **current_val;void **saved_val;CMD_ELEM *commands;int (*support_rtn)(int op, caddr_t indata, size_t inlen, caddr_t outdata, size_t olen, KSM_MEM_REQ_BUF *memreq, ulong arg, struct mss *mssptr);ulong flags;ulong arg;__int64 reserved;};
struct mtab {char m_path[32];char m_dname[32];char m_type[4];};
struct mtget {__int16 mt_type;__int16 mt_dsreg;__int16 mt_erreg;u_int mt_resid;__int64 mt_fileno;__int64 mt_blkno;DEV_EEI_STATUS eei;};
struct mtop {__int16 mt_op;daddr_t mt_count;};
struct mtrdpos {unsigned __int8;union mtrdpos::$83029CF3B609CE6EC455560C265CA194 un;};
union mtrdpos::$83029CF3B609CE6EC455560C265CA194 {struct mtrdposs s;struct mtrdposl l;};
struct mtrdposl {unsigned __int8 bop;u_long blk_num;u_long file_num;};
struct mtrdposs {unsigned __int8 bop;u_int first_blk;u_int last_blk;u_int num_blks;u_int num_bytes;};
typedef __int64 mtyp_t;
struct my_id {char *my_name;int my_prog;int my_vers;int my_proc;};
typedef u_int n_long;
typedef u_short n_short;
typedef u_int n_time;
struct namecache {struct namecache *nc_forw;struct namecache *nc_back;struct namecache *nc_nxt;struct namecache **nc_prev;struct vnode *nc_dvp;u_long nc_dvpid;struct vnode *nc_vp;u_long nc_vpid;u_long nc_time;char nc_nlen;char nc_name[31];struct nchash *nc_hash_chain;u_int nc_lru_dist;};
struct nameidata {caddr_t ni_dirp;enum uio_seg ni_segflg;int ni_nameiop;struct vnode *ni_cdir;struct vnode *ni_rdir;struct ucred *ni_cred;caddr_t ni_pnbuf;char *ni_ptr;char *ni_next;u_int ni_pathlen;u_long ni_hash;__int16 ni_namelen;__int16 ni_loopcnt;char ni_makeentry;char ni_isdotdot;struct vnode *ni_vp;struct vnode *ni_dvp;union nameidata::$0611F5CD589DEE0E745D10F55310ED2A ni_dir;off_t ni_endoff;struct nameidata::ndirinfo ni_nd;__int64 ni_dirstamp;int ni_nchtimestamp;u_long ni_vpid;int (*ni_lookup)(struct vnode *, struct nameidata *);__int64 ni_xid;};
union nameidata::$0611F5CD589DEE0E745D10F55310ED2A {struct ufs_od_dirent ni_ufsdirent;struct gpdirect ni_gpfsdent;struct dirent ni_gendirent;};
struct nameidata::ndirinfo {struct iovec nd_iovec;struct uio nd_uio;};
struct namepair {char *name;ulong value;};
typedef char *nameptr;
struct nchash;
struct nchstats {u_long ncs_goodhits;u_long ncs_neghits;u_long ncs_badhits;u_long ncs_falsehits;u_long ncs_miss;u_long ncs_long;u_long ncs_badtimehits;u_long ncs_collisions;u_long ncs_unequaldups;u_long ncs_cleaned_some;u_long ncs_cleaned_none;u_long ncs_pad[3];};
enum net_type {ethernet = 0x0,ieee802_16 = 0x1,ptp = 0x2,atalk = 0x3,};
struct netbuf {unsigned int maxlen;unsigned int len;char *buf;};
struct netent {char *n_name;char **n_aliases;int n_addrtype;in_addr_t n_net;};
struct netent_data {FILE *net_fp;char line[1024];char *net_aliases[35];int _net_stayopen;int svc_getnetflag;};
struct netinfo {struct sockaddr rip_dst;int rip_metric;};
struct netisr {struct netisr *next;struct netisr *prev;int active;int pending;void (*isr)(void);struct netisr::ifqueue *ifq;struct netisr::domain *dom;u_short flags;u_short use;__int16 unit;int id;u_int events;u_int wakeups;u_int extras;u_int noserver;u_int block;u_int maxactive;};
typedef char *netnamestr;
struct netobj {u_int n_len;char *n_bytes;};
typedef unsigned int nfds_t;
struct nfs3_client_stats {int num_stable_writes;int num_unstable_writes;int num_partial_writes;int num_cache_purges;int readdirplus_not_caching_entry;int readdirplus_found_entry_cached;int readdirplus_cache_enters;int num_getnewvnode_calls;};
struct nfs_args {struct sockaddr_in *addr;caddr_t fh;int flags;int wsize;int rsize;int timeo;int retrans;int maxtimo;char *hostname;int acregmin;int acregmax;int acdirmin;int acdirmax;char *netname;struct pathcnf *pathconf;};
struct nfs_fh3 {u_int fh3_length;union nfs_fh3::nfs_fh3_u fh3_u;};
union nfs_fh3::nfs_fh3_u {struct nfs_fh3::nfs_fh3_u::nfs_fh3_i nfs_fh3_i;u_char data[64];};
struct nfs_fh3::nfs_fh3_u::nfs_fh3_i {struct nfssvcfh fh3_i;};
struct nfs_handle {struct nfs_handle::$A5FEC315E74EB3828F926FADBBB951A3 cookie;};
struct nfs_handle::$A5FEC315E74EB3828F926FADBBB951A3 {u_int cookie_len;u_int *cookie_val;};
struct nfsattrstat {enum nfsstat ns_status;union nfsattrstat::$B6E4C4804F8B4E61D83A908BE84CFFC2 ns_u;};
union nfsattrstat::$B6E4C4804F8B4E61D83A908BE84CFFC2 {struct nfsfattr ns_attr_u;};
struct nfscreatargs {struct nfsdiropargs ca_da;struct nfssattr ca_sa;};
struct nfsdiropargs {fhandle_t da_fhandle;char *da_name;int da_len;};
struct nfsdiropres {enum nfsstat dr_status;union nfsdiropres::$C6DD0A424400D28F5D0F3991578B73A6 dr_u;};
union nfsdiropres::$C6DD0A424400D28F5D0F3991578B73A6 {struct nfsdrok dr_drok_u;};
struct nfsdrok {fhandle_t drok_fhandle;struct nfsfattr drok_attr;};
struct nfsfattr {enum nfsftype na_type;u_int na_mode;u_int na_nlink;u_int na_uid;u_int na_gid;u_int na_size;u_int na_blocksize;u_int na_rdev;u_int na_blocks;u_int na_fsid;u_int na_nodeid;struct timeval na_atime;struct timeval na_mtime;struct timeval na_ctime;};
struct nfsfhsize {fsid_t f1;u_short f2;u_short f3;char f4[4];u_short f5;u_short f6;char f7[4];};
enum nfsftype {NFNON = 0x0,NFREG = 0x1,NFDIR = 0x2,NFBLK = 0x3,NFCHR = 0x4,NFLNK = 0x5,};
struct nfslinkargs {fhandle_t la_from;struct nfsdiropargs la_to;};
typedef char *nfspath3;
struct nfsrddirargs {fhandle_t rda_fh;u_int rda_offset;u_int rda_count;};
struct nfsrddirres {u_int rd_bufsize;u_int rd_origreqsize;enum nfsstat rd_status;union nfsrddirres::$58E4E4C17AE20109EAEABA6611F00FE4 rd_u;};
union nfsrddirres::$58E4E4C17AE20109EAEABA6611F00FE4 {struct nfsrdok rd_rdok_u;};
struct nfsrdlnres {enum nfsstat rl_status;union nfsrdlnres::$659D09B361D701D0D66EB16B547B6A97 rl_u;};
union nfsrdlnres::$659D09B361D701D0D66EB16B547B6A97 {struct nfssrok rl_srok_u;};
struct nfsrdok {u_int rdok_offset;u_int rdok_size;int rdok_eof;struct dirent *rdok_entries;};
struct nfsrdresult {enum nfsstat rr_status;union nfsrdresult::$6A35507E6474F6D0336B5312E06C8FBF rr_u;};
union nfsrdresult::$6A35507E6474F6D0336B5312E06C8FBF {struct nfsrrok rr_ok_u;};
struct nfsreadargs {fhandle_t ra_fhandle;u_int ra_offset;u_int ra_count;u_int ra_totcount;};
struct nfsrnmargs {struct nfsdiropargs rna_from;struct nfsdiropargs rna_to;};
struct nfsrrok {struct nfsfattr rrok_attr;char *rrok_data;u_int rrok_count;u_int rrok_allocsize;struct buf *rrok_bp;struct vnode *rrok_vp;};
struct nfssaargs {fhandle_t saa_fh;struct nfssattr saa_sa;};
struct nfssattr {u_int sa_mode;u_int sa_uid;u_int sa_gid;u_int sa_size;struct timeval sa_atime;struct timeval sa_mtime;};
struct nfsslargs {struct nfsdiropargs sla_from;char *sla_tnm;struct nfssattr sla_sa;};
struct nfssrok {u_int srok_count;char *srok_data;};
enum nfsstat {NFS_OK = 0x0,NFSERR_PERM = 0x1,NFSERR_NOENT = 0x2,NFSERR_IO = 0x5,NFSERR_NXIO = 0x6,NFSERR_ACCES = 0xD,NFSERR_EXIST = 0x11,NFSERR_NODEV = 0x13,NFSERR_NOTDIR = 0x14,NFSERR_ISDIR = 0x15,NFSERR_FBIG = 0x1B,NFSERR_NOSPC = 0x1C,NFSERR_ROFS = 0x1E,NFSERR_NAMETOOLONG = 0x3F,NFSERR_NOTEMPTY = 0x42,NFSERR_DQUOT = 0x45,NFSERR_STALE = 0x46,NFSERR_WFLUSH = 0x47,};
enum nfsstat3 {NFS3_OK = 0x0,NFS3ERR_PERM = 0x1,NFS3ERR_NOENT = 0x2,NFS3ERR_IO = 0x5,NFS3ERR_NXIO = 0x6,NFS3ERR_ACCES = 0xD,NFS3ERR_EXIST = 0x11,NFS3ERR_XDEV = 0x12,NFS3ERR_NODEV = 0x13,NFS3ERR_NOTDIR = 0x14,NFS3ERR_ISDIR = 0x15,NFS3ERR_INVAL = 0x16,NFS3ERR_FBIG = 0x1B,NFS3ERR_NOSPC = 0x1C,NFS3ERR_ROFS = 0x1E,NFS3ERR_MLINK = 0x1F,NFS3ERR_NAMETOOLONG = 0x3F,NFS3ERR_NOTEMPTY = 0x42,NFS3ERR_DQUOT = 0x45,NFS3ERR_STALE = 0x46,NFS3ERR_REMOTE = 0x47,NFS3ERR_BADHANDLE = 0x2711,NFS3ERR_NOT_SYNC = 0x2712,NFS3ERR_BAD_COOKIE = 0x2713,NFS3ERR_NOTSUPP = 0x2714,NFS3ERR_TOOSMALL = 0x2715,NFS3ERR_SERVERFAULT = 0x2716,NFS3ERR_BADTYPE = 0x2717,NFS3ERR_JUKEBOX = 0x2718,};
struct nfsstatfs {enum nfsstat fs_status;union nfsstatfs::$08C78D7C851FA76173109663D8432C36 fs_u;};
union nfsstatfs::$08C78D7C851FA76173109663D8432C36 {struct nfsstatfsok fs_fsok_u;};
struct nfsstatfsok {u_int fsok_tsize;u_int fsok_bsize;u_int fsok_blocks;u_int fsok_bfree;u_int fsok_bavail;};
struct nfssvcfh {union nfssvcfh::nfssvcfh_u svcfh_u;};
union nfssvcfh::nfssvcfh_u {struct svcfh svcfh_i;u_char data[32];};
struct nfstime3 {uint32 seconds;uint32 nseconds;};
union nfsv2fh {fhandle_t fh_generic;u_char fh_bytes[32];};
typedef union nfsv2fh nfsv2fh_t;
struct nfswriteargs {fhandle_t wa_fhandle;u_int wa_begoff;u_int wa_offset;u_int wa_totcount;u_int wa_count;int wa_dupbusy;char *wa_data;struct mbuf *wa_mbuf;};
enum niffstate {NIFF_UNKNOWN = 0x0,NIFF_UP = 0x1,NIFF_ALERT = 0x2,NIFF_DOWN = 0x3,};
typedef enum niffstate niffstate_t;
typedef struct __catalog_descriptor *nl_catd;
typedef __nl_item nl_item;
typedef ushort_t nlink_t;
struct nlist {char *n_name;unsigned __int64 n_value;__int16 n_type;__int16 reserved;};
typedef memberid_t node_t;
struct nodeent {char *n_name;char *n_synonym;int n_addrtype;int n_numaddrs;struct nodeent::nodeentaddr *n_addrlist;unsigned __int8 *n_params;};
struct nodeent::nodeentaddr {int na_length;char *na_addr;};
struct npioctl {int protocol;enum NPmode mode;};
struct nrset_t {char name[16];};
struct ns_addr {union ns_net x_net;union ns_host x_host;u_short x_port;};
struct ns_aliasreq {char ifra_name[16];struct sockaddr_ns ifra_addr;struct sockaddr_ns ifra_broadaddr;};
typedef enum __ns_class ns_class;
struct ns_config {int version;int errcode;int flags;};
typedef struct ns_config ns_config_t;
struct ns_epidp {struct idp ns_ep_idp;struct ns_errp ns_ep_errp;};
struct ns_errp {u_short ns_err_num;u_short ns_err_param;struct idp ns_err_idp;u_char ns_err_lev2[12];};
struct ns_errstat {int ns_es_error;int ns_es_oldshort;int ns_es_oldns_err;int ns_es_outhist[20];int ns_es_badcode;int ns_es_tooshort;int ns_es_checksum;int ns_es_badlen;int ns_es_reflect;int ns_es_inhist[20];u_short ns_es_codes[20];};
typedef enum __ns_flag ns_flag;
union ns_host {u_char c_host[6];u_short s_host[3];};
struct ns_ifaddr {struct ifaddr ia_ifa;struct ns_ifaddr *ia_next;struct sockaddr_ns ia_addr;struct sockaddr_ns ia_dstaddr;struct sockaddr_ns ia_netmask;};
typedef struct __ns_msg ns_msg;
union ns_net {u_char c_net[4];u_short s_net[2];};
union ns_net_u {union ns_net net_e;u_long long_e;};
typedef enum __ns_opcode ns_opcode;
typedef enum __ns_rcode ns_rcode;
typedef struct __ns_rr ns_rr;
typedef enum __ns_sect ns_sect;
typedef enum __ns_type ns_type;
typedef enum __ns_update_operation ns_update_operation;
struct ns_updrec {struct ns_updrec *r_prev;struct ns_updrec *r_next;u_char r_section;char *r_dname;u_short r_class;u_short r_type;u_int r_ttl;u_char *r_data;u_short r_size;int r_opcode;struct ns_updrec *r_grpnext;struct ns_updrec::databuf *r_dp;struct ns_updrec::databuf *r_deldp;__int16 r_zone;};
struct nspcb {struct nspcb *nsp_next;struct nspcb *nsp_prev;struct nspcb *nsp_head;struct socket *nsp_socket;struct ns_addr nsp_faddr;struct ns_addr nsp_laddr;caddr_t nsp_pcb;struct route nsp_route;struct ns_addr nsp_lastdst;__int64 nsp_notify_param;__int16 nsp_flags;u_char nsp_dpt;u_char nsp_rpt;};
struct nstatfs {__int16 f_type;__int16 f_flags;__int64 f_fsize;__int64 f_bsize;__int64 f_blocks;__int64 f_bfree;__int64 f_bavail;__int64 f_files;__int64 f_ffree;fsid_t f_fsid;__int64 f_spare[3];char *f_mntonname;char *f_mntfromname;union mount_info mount_info;};
struct ntptimeval {struct timeval time;__int64 maxerror;__int64 esterror;};
struct nv {struct nvh nv_nvh;int nv_nvbs;struct nvbuf *nv_bufs;int nv_nscratch;char *nv_scratch;int nv_nchk;char *nv_data;};
struct nvbuf {int nb_flags;daddr_t nb_blkno;dev_t nb_dev;u_short nb_bcount;};
struct nvh {u_int nvh_dirty;u_int nvh_magic;u_int nvh_size;u_int nvh_version;u_int nvh_bsize;u_int nvh_fsize;u_int nvh_machineid;u_int nvh_nbufs;};
struct nvram_battery_info {int nv_nbatteries;int nv_test_retries;int nv_minimum_ok;int nv_primary_mandatory;int nv_status[4];};
struct nxm_action {__int64 nxm_action_type;void *nxm_action_data;__int64 space[6];};
typedef struct nxm_action *nxm_action_t;
struct nxm_block_event {union nxm_block_event::$4C0B02AC7466737F03821B6A364BB1A1 _nxm_event_un;};
union nxm_block_event::$4C0B02AC7466737F03821B6A364BB1A1 {struct nxm_block_event::$4C0B02AC7466737F03821B6A364BB1A1::$8F0B2A7CE6814700A99EA9E5BF32FC80 _nxm_event_s;unsigned __int64 _nxm_event_total;};
struct nxm_block_event::$4C0B02AC7466737F03821B6A364BB1A1::$8F0B2A7CE6814700A99EA9E5BF32FC80 {unsigned __int64 _nxm_event_kid;};
struct nxm_config_info {int nxm_nslots_per_rad;int nxm_nrads;nxm_slot_state_t *nxm_slot_state;struct nxm_shared *nxm_rad[1];};
typedef struct nxm_config_info *nxm_config_info_p;
typedef struct nxm_config_info nxm_config_info_t;
typedef struct nxm_block_event nxm_event_t;
typedef struct nxm_pshared_data_tag *nxm_pshared_data_p;
typedef struct nxm_pshared_data_tag nxm_pshared_data_t;
struct nxm_pshared_data_tag {unsigned __int8 type;unsigned __int8 op;unsigned __int16 offset;unsigned int modifiers;};
struct nxm_pshared_debugdata {vm_offset_t object_address;pshared_type_t object_type;int waiter_count;int recursion_count;pshared_owner_t owner;__int64 filler[4];};
struct nxm_pshared_lock {union nxm_pshared_lock::$BB4C4E986B98882384146F2596F9664B _lock_state_un;};
union nxm_pshared_lock::$BB4C4E986B98882384146F2596F9664B {__int64 _lock_state;struct nxm_pshared_lock::$BB4C4E986B98882384146F2596F9664B::$E7B14645F394DC907753E27088A6D161 _mutex_s;struct nxm_pshared_lock::$BB4C4E986B98882384146F2596F9664B::$C0F9B46ECE19B255EC3DB3F3A4B1A7A6 _rwl_s;};
struct nxm_pshared_lock::$BB4C4E986B98882384146F2596F9664B::$C0F9B46ECE19B255EC3DB3F3A4B1A7A6 {unsigned __int64 _read_lockers;};
struct nxm_pshared_lock::$BB4C4E986B98882384146F2596F9664B::$E7B14645F394DC907753E27088A6D161 {unsigned __int64 _waiters;};
typedef struct nxm_pshared_lock *nxm_pshared_lock_p;
typedef struct nxm_pshared_lock nxm_pshared_lock_t;
struct nxm_pshared_owner {pid_t owner_pid;pshared_holder_t owner_type;pthread_t owner_id;};
struct nxm_pshared_waiter {__int64 waiter_count;vm_offset_t object_address;__int64 filler[4];pshared_owner_t waiter_list;};
struct nxm_pth_state {u_long fpregs[32];u_long fpcr;stack_t altstack;struct uuprof prof;struct nxm_pth_state::nxm_ieee_state nxm_ieee_state;int sigforce;int stack_event;__int64 pad[9];};
struct nxm_pth_state::nxm_ieee_state {__int64 ieee_fp_control;__int64 ieee_set_state_at_signal;__int64 ieee_fp_control_at_signal;__int64 ieee_fpcr_at_signal;};
struct nxm_sched_bits {unsigned int _nxm_unused;unsigned __int16 _nxm_slotnum;};
typedef struct nxm_sched_bits nxm_sched_bits_t;
struct nxm_sched_state {struct ushared_state nxm_u;nxm_sched_bits_t nxm_bits;int nxm_quantum;int nxm_set_quantum;int nxm_sysevent;struct nxm_upcall *nxm_uc_ret;void *nxm_tid;__int64 nxm_va;struct nxm_pth_state *nxm_pthid;unsigned __int64 nxm_bound_pcs_count;__int64 pad[2];};
struct nxm_shared {__int64 nxm_callback;unsigned int nxm_version;unsigned __int16 nxm_uniq_offset;unsigned __int16 pad1;__int64 space[2];struct nxm_sched_state nxm_ss[1];};
struct nxm_sigev_action {void (*nxm_sigev_func)(sigval_t);sigval_t nxm_sigev_argument;};
typedef struct nxm_sigev_action *nxm_sigev_action_t;
typedef enum $1AACE834562D811C51DF77A95A3A7B4D nxm_slot_state_t;
struct nxm_task_attr {__int64 nxm_callback;unsigned int nxm_version;unsigned __int16 nxm_uniq_offset;unsigned __int16 flags;int nxm_quantum;int pad1;__int64 pad2;};
typedef struct nxm_task_attr *nxm_task_attr_p;
typedef struct nxm_task_attr nxm_task_attr_t;
struct nxm_thread_attr {int version;int type;int cancel_flags;int priority;int policy;int signal_type;void *pthid;sigset_t sigmask;struct nxm_thread_attr::$D29ED6D235971ACF0C2F14AD4D0543FA registers;__int64 pad2[2];};
struct nxm_thread_attr::$D29ED6D235971ACF0C2F14AD4D0543FA {__int64 pc;__int64 $30;__int64 $16;};
typedef struct nxm_thread_attr *nxm_thread_attr_p;
typedef struct nxm_thread_attr nxm_thread_attr_t;
struct nxm_upcall {int usaved;int pad;struct ushared_state u_state;struct alpha_saved_state reg_state;};
typedef enum nxm_wake_vals nxm_wake_val_t;
enum nxm_wake_vals {NXM_SCHED_IDLE = 0x0,NXM_SCHED_ACTIVE = 0x1,NXM_SCHED_PENDING = 0x2,};
struct obj {int o_target_swapped;char o_arch;struct stat o_statb;unsigned __int64 o_type;struct filehdr *o_pfilehdr;AOUTHDR *o_paouthdr;struct scnhdr *o_pscnhdr;pHDRR o_phdrr;pFDR o_pfdr;pPDR o_ppdr;pSYMR o_psymr;pEXTR o_pextr;char *o_pssext;char *o_pss;char *o_pline;pRFDT o_prfd;pAUXU o_pauxu;char *o_praw;unsigned __int64 o_type_base;unsigned __int64 o_symbol_base;unsigned __int64 o_file_base;unsigned __int64 o_procedure_base;unsigned __int64 o_external_base;char *o_name;Elf32_Ehdr *o_pelfhdr;Elf32_Phdr *o_pproghdr;Elf32_Shdr *o_psecthdr;char *o_path;char *o_soname;int o_fd;unsigned __int64 o_base_address;unsigned __int64 o_text_start;unsigned __int64 o_text_size;unsigned __int64 o_data_start;unsigned __int64 o_bss_start;unsigned __int64 o_bss_size;coff_addr o_entry;coff_addr *o_base;coff_uint *o_hash;char *o_str;Coff_Sym *o_dsym;Coff_Msym *o_msym;Coff_Got **o_gots;Coff_Got **o_extgots;Coff_Rel *o_rel;Coff_Lib *o_libl;Coff_Conflict *o_conf;coff_uint o_dyflags;coff_uint o_ngots;coff_uint o_mgotsym;char *o_rpath;coff_uint o_rldver;coff_uint o_tstamp;coff_uint o_ichksum;coff_uint o_iversion;coff_uint o_symcount;coff_uint o_syent;coff_uint o_stsize;coff_uint o_rlsize;coff_uint o_rlent;coff_uint o_llcount;coff_uint o_htsize;coff_uint o_cfcount;coff_uint o_rldflag;coff_uint o_flag;coff_uint o_mode;coff_addr o_init;coff_addr o_fini;coff_uint o_unrefextno;coff_uint o_gotsym;unsigned __int64 o_rld_map;dbx_proctbl *o_dbx_ptbl;unsigned __int64 o_data_base_address;struct cmrlc_info *o_cmrlc_info;__int64 free_required;};
typedef struct obj_list objList;
struct obj_list {unsigned __int64 data;struct obj_list *next;struct obj_list *prev;};
typedef union $631CC30EFEC4B33894376812689B691E obj_t;
struct obj_type {struct obj *obj;unsigned __int64 init;__int64 type;TIR ti;unsigned __int64 skip;__int64 bt_symbol;__int64 bt_type;unsigned __int64 bt_low;unsigned __int64 bt_high;unsigned __int64 tq;unsigned __int64 tq_index;unsigned __int64 tq_save;__int64 symbol;__int64 low;__int64 high;unsigned __int64 stride;unsigned __int64 width;unsigned __int64 slice;unsigned __int64 dimension;unsigned __int64 dimcount;unsigned __int64 offset;unsigned __int64 precision;unsigned __int64 isproc;__int64 nodesym;unsigned int language;};
struct objectent {unsigned __int16 o_flags;unsigned __int8 o_objnum;char *o_objname;char *o_defuser;char *o_file;};
typedef __int64 off_t;
typedef uint64 offset3;
typedef struct _one_ip_route_blk one_ip_route_blk;
typedef struct _one_ipaddr_blk one_ipaddr_blk;
typedef struct _one_proc_blk one_proc_blk;
typedef struct _one_tcp_blk one_tcp_blk;
typedef struct _one_udp_blk one_udp_blk;
struct opaque_auth {int oa_flavor;caddr_t oa_base;u_int oa_length;};
struct oprmode {int flags;};
struct oprocessor_basic_info {cpu_type_t cpu_type;cpu_subtype_t cpu_subtype;boolean_t running;int slot_num;boolean_t is_master;int pset_id;};
typedef struct oprocessor_basic_info oprocessor_basic_info_data_t;
typedef struct oprocessor_basic_info *oprocessor_basic_info_t;
struct oprocessor_set_basic_info {int processor_count;int processor_mask;int task_count;int thread_count;int load_average;int mach_factor;int pset_id;int state;};
typedef struct oprocessor_set_basic_info oprocessor_set_basic_info_data_t;
typedef struct oprocessor_set_basic_info *oprocessor_set_basic_info_t;
struct optdata_dn {unsigned __int16 opt_status;unsigned __int16 opt_optl;unsigned __int8 opt_data[16];};
struct ortentry {u_int rt_hash;struct sockaddr rt_dst;struct sockaddr rt_gateway;__int16 rt_flags;__int16 rt_refcnt;u_int rt_use;struct ifnet *rt_ifp;};
struct ovrhd {struct controller *cntrlrp;vm_offset_t va;struct hw_sg_table_control hw_sg;u_long private_data;struct proc *procp;};
struct ovtcphdr {caddr_t ti_next;caddr_t ti_prev;struct tcphdr *ti_ipovly;struct mbuf *ti_rmb;};
typedef psx4_key_entry_t p4csemdes_entry_t;
typedef psx4_key_table_t p4csemdes_table_t;
struct p4csemid {int semval;int semcnt;char semname[255];};
typedef struct p4csemid p4csemid_t;
typedef union $4DE226F9B44EBBD1EF7A8B9F155EFB38 *pAUXU;
typedef struct $2520325224AFAD0311F021063A0B3716 *pCFDR;
typedef struct $BCBC142657F91A737E770A1501BA1906 *pCHDRR;
typedef struct $F13911897449B4F8991BC40BBBE3CC48 *pDNR;
typedef struct $AC30A779F0124870026B9E7625809E9B *pEXTR;
typedef struct fdr *pFDR;
typedef coff_int *pFIT;
typedef struct $0DC76288B82173E0347A8AC4BDA9ABD1 *pHDRR;
typedef coff_int *pLINER;
typedef struct obj *pOBJ;
typedef struct obj_type *pOBJ_TYPE;
typedef coff_byte *pOPTR;
typedef struct pdr *pPDR;
typedef struct $EEE62CE3C0884F607962095F7AAF335B *pPPODHDR;
typedef coff_int *pRFDT;
typedef struct $789D9E0FE1A5A9BA2492EBFE8B3FBB59 *pRNDXR;
typedef struct runtime_pdr *pRPDR;
typedef union pdsc_crd *pRUNTIME_FUNCTION;
typedef struct $FEBFEE01B5FAFB8592D57D9F074EE903 *pSYMR;
typedef struct $DAE83A2F61144F2AD912252480DFF25D *pTIR;
union pad_u32 {unsigned int reg;unsigned __int64 padding;};
typedef int paddr_t;
struct page_code_1 {unsigned __int8 ps;u_char pglength;u_char flags;u_char retry_count;u_char correct_span;u_char head_offset;u_char data_strobe;u_char recovery_time;};
struct page_code_2 {unsigned __int8 ps;u_char pglength;u_char bus_fratio;u_char bus_eratio;u_char bus_inactive1;u_char bus_inactive0;u_char disconn_time1;u_char disconn_time0;u_char conn_time1;u_char conn_time0;u_char reserved1;u_char reserved2;};
struct page_code_3 {unsigned __int8 ps;u_char pglength;u_char tpz1;u_char tpz0;u_char aspz1;u_char aspz0;u_char atpz1;u_char atpz0;u_char atpv1;u_char atpv0;u_char spt1;u_char spt0;u_char bps1;u_char bps0;u_char interleave1;u_char interleave0;u_char track_skew1;u_char track_skew0;u_char cylinder_skew1;u_char cylinder_skew0;unsigned __int8 flags;u_char reserved1;u_char reserved2;u_char reserved3;};
struct page_code_37 {unsigned __int8 ps;u_char pglength;unsigned __int8;u_char reserved[22];};
struct page_code_4 {unsigned __int8 ps;u_char pglength;u_char ncyl2;u_char ncyl1;u_char ncyl0;u_char nheads;u_char wprecomp2;u_char wprecomp1;u_char wprecomp0;u_char rwc2;u_char rwc1;u_char rwc0;u_char dsr1;u_char dsr0;u_char lzc2;u_char lzc1;u_char lzc0;u_char reserved1;u_char reserved2;u_char reserved3;};
struct page_code_5 {unsigned __int8 ps;u_char pglength;u_char xfer_rate1;u_char xfer_rate0;u_char num_heads;u_char sec_per_trk;u_char db_per_physec1;u_char db_per_physec0;u_char num_cyl1;u_char num_cyl0;u_char swpc1;u_char swpc0;u_char srwcc1;u_char srwcc0;u_char drv_stp_rate1;u_char drv_stp_rate0;u_char drv_sp_width;u_char hd_stl_del1;u_char hd_stl_del0;u_char mtr_on_del;u_char mtr_off_del;unsigned __int8 trdy;unsigned __int8 rsrv4;u_char wpc_lvl;u_char hl_del;u_char hul_del;unsigned __int8 p34_def;unsigned __int8 p4_def;u_char med_rr1;u_char med_rr0;u_char reserved1;u_char reserved2;};
struct page_code_8 {unsigned __int8 ps;u_char pglength;unsigned __int8;unsigned __int8 drrp;u_char dpftl1;u_char dpftl0;u_char minpf1;u_char minpf0;u_char maxpf1;u_char maxpf0;u_char maxpfc1;u_char maxpfc0;};
struct page_header {unsigned __int8 ps;u_char pglength;};
typedef port_t paging_object_t;
struct partinfo {struct disklabel *disklab;struct partition *part;};
struct partition {u_int p_size;u_int p_offset;u_int p_fsize;u_char p_fstype;u_char p_frag;u_short p_cpg;};
struct partition_dbase {int version;int part_id;int sem_id;struct sembuf sops;int database_modified;int future_expansion[10];int database_configured;int default_class_in_use;int daemon_rate;int enforce_when_idle;int first_class_in_use;int last_class_in_use;int first_member_empty;int last_member_empty;char dbase_name[80];struct class_param class[100];struct class_member member[2500];};
struct partition_handle {struct partition_dbase *shared_dbase;struct partition_dbase local_copy;};
struct passwd {char *pw_name;char *pw_passwd;uid_t pw_uid;gid_t pw_gid;int pw_quota;char *pw_comment;char *pw_gecos;char *pw_dir;char *pw_shell;};
typedef struct $D48E303D757DCA6A33314F9D46E85301 passwd_params;
struct pathcnf {int pc_link_max;__int16 pc_max_canon;__int16 pc_max_input;__int16 pc_name_max;__int16 pc_path_max;__int16 pc_pipe_buf;u_char pc_vdisable;char pc_xxx;__int16 pc_mask[1];};
struct pathname {char *pn_buf;char *pn_path;u_int pn_pathlen;};
struct pcb {u_long pcb_ksp;u_long pcb_usp;u_long pcb_ptbr;u_int pcb_cc;u_int pcb_asn;u_long pcb_proc_uniq;u_long pcb_fen;u_long pcb_palscr[2];u_long pcb_sig_tmp;u_long pcb_regs[33];u_long pcb_fpregs[32];u_long pcb_fpcr;struct pcb *pcb_paddr;int pcb_stack_type;int pcb_space_for_rent0;__int64 *pcb_stack_ptr;__int64 pcb_sstep;struct ssi pcb_ssi;__int64 pcb_ownedfp;__int64 pcb_nofault;__int64 pcb_nofault_cause;__int64 pcb_nofault_badvaddr;u_long pcb_traparg_a0;u_long pcb_traparg_a1;u_long pcb_traparg_a2;u_long pcb_space_for_rent1;union pcb::$464EE42C94661C2FFCDA074F66AACDAF pcb_ast;__int64 pcb_space_for_rent2;int pcb_slock_count;int pcb_slock_hierarchy;int pcb_slock_unordered;int pcb_atintr_level;};
union pcb::$464EE42C94661C2FFCDA074F66AACDAF {__int64 test_ast_lwc;struct pcb::$464EE42C94661C2FFCDA074F66AACDAF::$19E3D56C92D6A18E9177BDFB8E1A8345 flags;};
struct pcb::$464EE42C94661C2FFCDA074F66AACDAF::$19E3D56C92D6A18E9177BDFB8E1A8345 {int need_ast;int lwc_pending;};
typedef struct $3CBBABF2DF729BA840419D28F3BEFDCF pcinfo_t;
typedef struct $62A7E637BF46904E5D1712DD40ACBF8F pcparms_t;
struct pdr {coff_addr adr;coff_long cbLineOffset;coff_int isym;coff_int iline;coff_uint regmask;coff_int regoffset;coff_int iopt;coff_uint fregmask;coff_int fregoffset;coff_int frameoffset;coff_int lnLow;coff_int lnHigh;unsigned int localoff;coff_ushort framereg;coff_ushort pcreg;};
typedef unsigned __int64 pdsc_address;
typedef unsigned int pdsc_count;
union pdsc_crd {struct pdsc_crd::$0FB92DA11B981F24EFA6F491ADD4865F words;struct pdsc_crd::$F39ACF7ACB55877EF00817A2C3D900B3 fields;};
struct pdsc_crd::$0FB92DA11B981F24EFA6F491ADD4865F {pdsc_offset begin_address;pdsc_offset rpd_offset;};
struct pdsc_crd::$F39ACF7ACB55877EF00817A2C3D900B3 {int shifted_begin_address;int shifted_rpd_offset;};
typedef unsigned int pdsc_mask;
typedef int pdsc_offset;
typedef unsigned int pdsc_register;
typedef unsigned __int64 pdsc_register_value;
union pdsc_rpd {struct pdsc_rpd::pdsc_short_stack_rpd short_stack_rpd;struct pdsc_rpd::pdsc_short_reg_rpd short_reg_rpd;struct pdsc_rpd::pdsc_long_stack_rpd long_stack_rpd;struct pdsc_rpd::pdsc_long_reg_rpd long_reg_rpd;struct pdsc_rpd::pdsc_short_with_handler short_with_handler;struct pdsc_rpd::pdsc_long_with_handler long_with_handler;};
struct pdsc_rpd::pdsc_long_reg_rpd {unsigned int reserved1;unsigned int entry_length;pdsc_count frame_size;pdsc_space reserved2;pdsc_mask imask;pdsc_mask fmask;};
struct pdsc_rpd::pdsc_long_stack_rpd {unsigned int entry_ra;pdsc_ushort_offset rsa_offset;unsigned int entry_length;pdsc_count frame_size;pdsc_space reserved;pdsc_mask imask;pdsc_mask fmask;};
struct pdsc_rpd::pdsc_long_with_handler {union pdsc_rpd::pdsc_long_with_handler::$ECB523387B29975274DD56AD31FB3312 stack_or_reg;pdsc_address handler;pdsc_address handler_data;};
union pdsc_rpd::pdsc_long_with_handler::$ECB523387B29975274DD56AD31FB3312 {struct pdsc_rpd::pdsc_long_stack_rpd long_stack_rpd;struct pdsc_rpd::pdsc_long_reg_rpd long_reg_rpd;};
struct pdsc_rpd::pdsc_short_reg_rpd {unsigned int reserved2;unsigned int entry_length;};
struct pdsc_rpd::pdsc_short_stack_rpd {unsigned int flags;pdsc_uchar_offset rsa_offset;unsigned int frame_size;unsigned int entry_length;};
struct pdsc_rpd::pdsc_short_with_handler {union pdsc_rpd::pdsc_short_with_handler::$6754C085F1BF44317DA426DE4E66DB5A stack_or_reg;pdsc_address handler;pdsc_address handler_data;};
union pdsc_rpd::pdsc_short_with_handler::$6754C085F1BF44317DA426DE4E66DB5A {struct pdsc_rpd::pdsc_short_stack_rpd short_stack_rpd;struct pdsc_rpd::pdsc_short_reg_rpd short_reg_rpd;};
typedef const __int64 pdsc_sconst;
typedef __int16 pdsc_sint_16;
typedef int pdsc_sint_32;
typedef unsigned int pdsc_space;
typedef unsigned __int8 pdsc_uchar_mask;
typedef unsigned __int8 pdsc_uchar_offset;
typedef const unsigned __int64 pdsc_uconst;
typedef unsigned __int16 pdsc_uint_16;
typedef unsigned int pdsc_uint_32;
typedef unsigned __int16 pdsc_ushort_offset;
struct persistence_request {int version;int command;int instance;int reserved1;char *name;char *key;ulong data_field1;ulong data_field2;ulong data_field3;ulong reserved2;};
typedef pexTextAlignment pexATextAlignment;
typedef pexCharHeight pexATextHeight;
typedef pexTextPath pexATextPath;
typedef struct $19CE7C819EA69A97B546F997958C8C17 pexATextStyle;
typedef pexCharUpVector pexATextUpVector;
typedef struct $C600AE186EDCEC66CF8E0A4837161E56 pexAccumulateStateReq;
typedef struct $0FAE394FC492092BC5FFE693D0AA7D04 pexAddToNameSet;
typedef struct $B8300209D9D4BFB558086C2A72800CC2 pexAnnotationText;
typedef struct $8B33727AD960289F5C449D9866A7300E pexAnnotationText2D;
typedef struct $441A7E7FE5D08EFBF53E24081FE65BA0 pexApplicationData;
typedef CARD32 pexAsfAttribute;
typedef CARD8 pexAsfValue;
typedef pexInteriorStyle pexBFInteriorStyle;
typedef pexMarkerBundleIndex pexBFInteriorStyleIndex;
typedef pexReflectionAttributes pexBFReflectionAttributes;
typedef pexReflectionModel pexBFReflectionModel;
typedef pexMarkerColor pexBFSurfaceColor;
typedef pexMarkerBundleIndex pexBFSurfaceColorIndex;
typedef pexSurfaceInterpMethod pexBFSurfaceInterpMethod;
typedef struct $32BEEC00F4BCB3FF9C360DE7DA7F467E pexBeginPickAllReq;
typedef struct $B4B73E7BD388D94F4601F616B0AE9AD3 pexBeginPickOneReq;
typedef struct $7AD7C9D6992D7D59BE750871F513A4E7 pexBeginRenderingReq;
typedef struct $D02EAB9A83A44F8B7E99D2C5E0BC2BB4 pexBeginStructureReq;
typedef CARD32 pexBitmask;
typedef CARD16 pexBitmaskShort;
typedef struct $2A100A9CF6EEF850F01D07ABF5CD8FF1 pexCellArray;
typedef struct $7E88FA62BA52C085679B63B7DAF35F4C pexCellArray2D;
typedef struct $136C5E14F7EE93C43105681EEDEA30CA pexChangeNameSetReq;
typedef struct $9D18CDF79BA48AD59BDC9EBC3E358440 pexChangePickDeviceReq;
typedef struct $7D401D100935DA07A6E61738AE960D73 pexChangePipelineContextReq;
typedef struct $A1765675892D2506ACB61835FEF0F776 pexChangeRendererReq;
typedef struct $E8A3AC8841591043E774CAD745C5EDE6 pexChangeSearchContextReq;
typedef struct $03F6C202096B59F76F9B2BDC64B4BC9A pexChangeStructureRefsReq;
typedef struct $79EF5C51E2072BDF172C6215CB0138B1 pexCharExpansion;
typedef struct $85C20FF9889ECD98CC9E4806604D9811 pexCharHeight;
typedef struct $49142964154B892EF7651BF5C6725D33 pexCharSpacing;
typedef struct $39CFF7C6C04AC270946B2C47C30F8E5E pexCharUpVector;
typedef struct $5DBACEAB92966C603C98F59DF949BD43 pexCieColor;
typedef struct $8F03D2DA5AF6E21A6EF56A5D6E316A3F pexColor;
typedef struct $B39098462B639082E0671084A834106B pexColorApproxEntry;
typedef pexMarkerBundleIndex pexColorApproxIndex;
typedef struct $537A2702615B7A9FDB0E43F3335D48EF pexColorSpecifier;
typedef pexEnumTypeIndex pexColorType;
typedef CARD16 pexComposition;
typedef struct $77BCF32EDCE867EAF5B70A654CA700DE pexCoord2D;
typedef struct $5DBACEAB92966C603C98F59DF949BD43 pexCoord3D;
typedef struct $97E1DE8F9347FE39409AFDCF961CF54E pexCoord4D;
typedef CARD16 pexCoordType;
typedef struct $47AD942C1E13FA5A28931850B3F33088 pexCopyElementsReq;
typedef struct $EB42C1B9174C3C12EE27F86992F6AB4D pexCopyLookupTableReq;
typedef struct $2D364C288F00F24F9FAD5331C4ED7B4F pexCopyNameSetReq;
typedef struct $99EC62E442FF2EB58DF6D0B6F7134087 pexCopyPipelineContextReq;
typedef struct $DA281B2671CC902347C407C338E5A352 pexCopySearchContextReq;
typedef struct $217442FD761A7019DD79093749C072C4 pexCopyStructureReq;
typedef struct $B2802A53FD56D8ACC9A4AC03015C713C pexCreateLookupTableReq;
typedef pexResourceReq pexCreateNameSetReq;
typedef struct $A392485AEA3A70CB744C42CEA40D73D1 pexCreatePickMeasureReq;
typedef struct $7D401D100935DA07A6E61738AE960D73 pexCreatePipelineContextReq;
typedef struct $7C850634F0DF27D39C75B0CDF2A5AF87 pexCreateRendererReq;
typedef struct $E8A3AC8841591043E774CAD745C5EDE6 pexCreateSearchContextReq;
typedef pexResourceReq pexCreateStructureReq;
typedef struct $5839A676696C7FEF053705892893D362 pexCreateWorkstationReq;
typedef CARD16 pexCullMode;
typedef struct $B29BCE60366642B331908CB2277C4399 pexCurveApprox;
typedef struct $557B855E86A279D2F17D2D74EDC487F1 pexCurveApproxData;
typedef struct $C625268042D4F371D3219D96CB6FA81E pexDeleteBetweenLabelsReq;
typedef struct $B8C9ABBC5E5586E5AEF8CC874FEDB1BE pexDeleteElementsReq;
typedef struct $459D1EAC2FA75EFF30D628B27AE51C95 pexDeleteElementsToLabelReq;
typedef struct $0310B9E1E152DD159D8B60AA90E9FD8C pexDeleteTableEntriesReq;
typedef struct $D8B2DFFDFB4D75E37E8EFAD1CD2C8306 pexDepthCueEntry;
typedef pexMarkerBundleIndex pexDepthCueIndex;
typedef struct $945E992F186701F49541543A34AD82BA pexDestroyStructuresReq;
typedef struct $C3050A07FC68EF0DFEC519C70DF21366 pexDeviceCoord;
typedef struct $E723A84E44CDA7473BF48272140C5975 pexDeviceCoord2D;
typedef struct $89CD6F3E3DD209540077C297BE20292F pexDeviceRect;
typedef BYTE pexDynamicType;
typedef struct $2DCD0F1E9CC07C591B62016D8BFDD080 pexEdgeBundleEntry;
typedef pexMarkerBundleIndex pexEdgeBundleIndex;
typedef struct $EF9EB88531A8EDCB8F7F85794A2A028F pexElementInfo;
typedef struct $053B2B0CA6E771FE5ADC34D9A21D155E pexElementPos;
typedef struct $70BF9668B37A862A4362A7E237230266 pexElementRange;
typedef struct $CDF16A86A8F26461BBAB0EFF6BD548DC pexElementRef;
typedef struct $126DE92285480F2C88BEBFF7139E63A8 pexElementSearchReply;
typedef struct $4D26A5DBA4EA4251461280DA7EC20496 pexElementSearchReq;
typedef struct $3962543319D6B0C0D2551C7AFB5C58EC pexEndPickAllReply;
typedef struct $F990290BD86FA48CB8793CE0158E6C29 pexEndPickAllReq;
typedef struct $9A67910CF765C38819EFD71866036684 pexEndPickOneReply;
typedef struct $F990290BD86FA48CB8793CE0158E6C29 pexEndPickOneReq;
typedef struct $132E81131C35E6C61D5BC4522BA78C1E pexEndRenderingReq;
typedef pexResourceReq pexEndStructureReq;
typedef struct $D3A9F4977F1B841582E53D8492BF1DBD pexEnumTypeDesc;
typedef INT16 pexEnumTypeIndex;
typedef struct $91814F7EF02B13F9FE228F0B2E3BE051 pexEscapeReq;
typedef struct $2EF0E303BAAC00B5C587DB3702F187EB pexEscapeSetEchoColorData;
typedef struct $23F7EE8294FB9DF80516FD4A31AD78F8 pexEscapeWithReplyReply;
typedef pexEscapeReq pexEscapeWithReplyReq;
typedef pexResourceReq pexExecuteDeferredActionsReq;
typedef struct $A225CBB957C38A09A08E4BE4D4316542 pexExecuteStructure;
typedef struct $A7F47A749AAF3AD66E1BEA6C9E8ABB9D pexExtendedCellArray;
typedef struct $EB1A61A200A34257E2C7F3D6B0AFEB97 pexExtentInfo;
typedef struct $0F2339B37783A905219D9D017A294EE4 pexFacetCullingMode;
typedef struct $21D657DCC1893F76B039DFDE7FFD89EE pexFacetDistinguishFlag;
typedef struct $33211E192AB127B684F8E5E0E97B7294 pexFetchElementsReply;
typedef struct $27CF644397FD5A20F451D9B4452FA519 pexFetchElementsReq;
typedef struct $C7E0EF91B036783D288945FBDA519E2F pexFillArea;
typedef struct $00C97D723519BB9A2C9FAEFA4C57CC85 pexFillArea2D;
typedef struct $98323091350E194A207706249D489A8A pexFillAreaSet;
typedef struct $98323091350E194A207706249D489A8A pexFillAreaSet2D;
typedef struct $F6C3BF0B1FCDB347DB52C56391A2DECC pexFillAreaSetWithData;
typedef struct $F41003F3EB873DD80AB5DD20097CFB12 pexFillAreaWithData;
typedef struct $E982230C7230B1D88907DFE2F20946CA pexFloatColor;
typedef CARD32 pexFont;
typedef struct $4FD488DE8E284B20604676A3AA0F9F29 pexFontInfo;
typedef struct $5ECB12B79CABF575ACE1DCD82DC596AC pexFontProp;
typedef pexResourceReq pexFreeLookupTableReq;
typedef pexResourceReq pexFreeNameSetReq;
typedef pexResourceReq pexFreePickMeasureReq;
typedef pexResourceReq pexFreePipelineContextReq;
typedef pexResourceReq pexFreeRendererReq;
typedef pexResourceReq pexFreeSearchContextReq;
typedef pexResourceReq pexFreeWorkstationReq;
typedef struct $F7446975C55749A71CEAB0EBF4BA1233 pexGDP;
typedef struct $F7446975C55749A71CEAB0EBF4BA1233 pexGDP2D;
typedef struct $F832CFFAF2818E9C726579BA4E827438 pexGSE;
typedef struct $F300B49C7821C4D9EE0174AC70A46F26 pexGetAncestorsReply;
typedef struct $CF21BF511DA95282A30B8B98D36704FA pexGetAncestorsReq;
typedef struct $2A62C6A6514F00B57AA484199B50E365 pexGetDefinedIndicesReply;
typedef pexResourceReq pexGetDefinedIndicesReq;
typedef pexGetAncestorsReply pexGetDescendantsReply;
typedef pexGetAncestorsReq pexGetDescendantsReq;
typedef struct $1C6A793BF493D396318DB3967AB943CB pexGetElementInfoReply;
typedef struct $27CF644397FD5A20F451D9B4452FA519 pexGetElementInfoReq;
typedef struct $6ADBCD68715E63A04CE80712B11C9E38 pexGetEnumTypeInfoReply;
typedef struct $E7E6C0CFFF448DC49689F38B487D47EE pexGetEnumTypeInfoReq;
typedef struct $F5CE2AC708A5E5FB8EE969C783D694D1 pexGetExtensionInfoReply;
typedef struct $04693A94417938523F8F08AD466EE7BF pexGetExtensionInfoReq;
typedef struct $0A5C89641A93CB3ACF06CDFC9D8A23B0 pexGetImpDepConstantsReply;
typedef struct $2CBEA6D71FAD1672A184D54827ABF8BA pexGetImpDepConstantsReq;
typedef struct $C090E207437B9AD10DF8C9251F56A5C3 pexGetNameSetReply;
typedef pexResourceReq pexGetNameSetReq;
typedef struct $0A5C89641A93CB3ACF06CDFC9D8A23B0 pexGetPickDeviceReply;
typedef struct $DD591F75FA5831C579709DD6A55AAB95 pexGetPickDeviceReq;
typedef struct $0A5C89641A93CB3ACF06CDFC9D8A23B0 pexGetPickMeasureReply;
typedef struct $4C8CC24838C6E639697F367B1749F6DD pexGetPickMeasureReq;
typedef struct $0A5C89641A93CB3ACF06CDFC9D8A23B0 pexGetPipelineContextReply;
typedef struct $7D401D100935DA07A6E61738AE960D73 pexGetPipelineContextReq;
typedef struct $F7C58847402F98512A3CECB471924E15 pexGetPredefinedEntriesReply;
typedef struct $5ABE36EBD1D953BDF555AC83E9B81362 pexGetPredefinedEntriesReq;
typedef struct $0A5C89641A93CB3ACF06CDFC9D8A23B0 pexGetRendererAttributesReply;
typedef struct $A1765675892D2506ACB61835FEF0F776 pexGetRendererAttributesReq;
typedef struct $EC328A4BBD21D90F21E901FD1485AFBB pexGetRendererDynamicsReply;
typedef pexResourceReq pexGetRendererDynamicsReq;
typedef struct $0A5C89641A93CB3ACF06CDFC9D8A23B0 pexGetSearchContextReply;
typedef struct $E8A3AC8841591043E774CAD745C5EDE6 pexGetSearchContextReq;
typedef struct $6443E8FBF4986486147FC608008F36FD pexGetStructureInfoReply;
typedef struct $A084E1F86B6372FCC6C14CDE4263A0F0 pexGetStructureInfoReq;
typedef struct $3716CA43F375A83D6075273D18F05604 pexGetStructuresInNetworkReply;
typedef struct $938BD55C3C0E857A33C3981E95130004 pexGetStructuresInNetworkReq;
typedef struct $C321E20701936BDF5E3979B890BB8411 pexGetTableEntriesReply;
typedef struct $DF5D362420C7F69D31EBAC9DE98C4F23 pexGetTableEntriesReq;
typedef struct $B4C1C2BF3CBDE8391A1A91801C77FE53 pexGetTableEntryReply;
typedef struct $67EBA5382CDD7137EE0248176DBBF5F3 pexGetTableEntryReq;
typedef struct $22F6F47B07BBB5F9E32E4811707DBE39 pexGetTableInfoReply;
typedef struct $4F59F244C8BC41CE3BBA04F63BC4AC24 pexGetTableInfoReq;
typedef struct $0A5C89641A93CB3ACF06CDFC9D8A23B0 pexGetWorkstationAttributesReply;
typedef struct $F31C3FA128807C4E1C8A16E645E8E9B0 pexGetWorkstationAttributesReq;
typedef struct $B5C5FFF84FB7F3832F5458E87FB3817C pexGetWorkstationDynamicsReply;
typedef struct $5F6538F229DF2A668AF1107A23D3D1BB pexGetWorkstationDynamicsReq;
typedef struct $0A5C89641A93CB3ACF06CDFC9D8A23B0 pexGetWorkstationPostingsReply;
typedef pexResourceReq pexGetWorkstationPostingsReq;
typedef struct $8ACD24E0FCE486F0E55577826775AC1E pexGetWorkstationViewRepReply;
typedef struct $FFE7078D4C82F06150AB4DDF0854500B pexGetWorkstationViewRepReq;
typedef struct $76F84264A28D1A02352D769030AADCCD pexGlobalTransform;
typedef struct $4DC1B4F273766CB284E2F1711BB230F1 pexGlobalTransform2D;
typedef struct $D2445A5B9D7BF131D6E505C53638663F pexHLHSRID;
typedef struct $99BDE9127DD313DAAA88C0590E201DA9 pexHalfSpace;
typedef struct $EBB9AF1D533389C5629CCF05A3319239 pexHalfSpace2D;
typedef struct $53C9126E4B810B5CAE2D85D2D296486D pexHlsColor;
typedef struct $EDBFEA5FE88B3074CBFB5933EC22B3A9 pexHsvColor;
typedef struct $2A836C4928CD984F3FFB6D650DD9269A pexIndexedColor;
typedef struct $04F0974705EEA07D2ED3E56C2753EC67 pexIndividualASF;
typedef struct $6ABAD3232C9CF4340065F865AFA64EEA pexInteriorBundleEntry;
typedef pexMarkerBundleIndex pexInteriorBundleIndex;
typedef struct $5A307DF360730881CAAA92A530376925 pexInteriorStyle;
typedef pexMarkerBundleIndex pexInteriorStyleIndex;
typedef struct $16C75E8BEE365AEC2E406F5D0C322BCB pexLabel;
typedef struct $A8F356DBB4E9B212C01AA7944686DAC0 pexLightEntry;
typedef struct $E4DF4A08C28A872114F4A72320158175 pexLightSourceState;
typedef struct $FC337C14BCBDECA00DCC27939432018D pexLineBundleEntry;
typedef pexMarkerBundleIndex pexLineBundleIndex;
typedef pexMarkerColor pexLineColor;
typedef pexMarkerBundleIndex pexLineColorIndex;
typedef struct $7EBD2259EECAE0CB0997A6FA7D75D1E8 pexLineType;
typedef struct $7690689C8995BA18C259F15C2E17CAA0 pexLineWidth;
typedef struct $E06305A3A63243FBC84E6476D67FA237 pexListFontsReply;
typedef struct $43A14E5221FE3192342C11BFA2DB216B pexListFontsReq;
typedef struct $E06305A3A63243FBC84E6476D67FA237 pexListFontsWithInfoReply;
typedef struct $086797AA123EC279514825093732CF07 pexListFontsWithInfoReq;
typedef struct $DC1682303935489FD3065EEC966FE929 pexLoadFontReq;
typedef struct $7299039E045E3F9B8439FDAE89E52E77 pexLocalTransform;
typedef struct $02BD538092AE8CCFADB9D5F5F231A029 pexLocalTransform2D;
typedef struct $31463F47AE2D877187E6B8319EF31FC9 pexLocalTransform2DData;
typedef struct $FF56E9D6D5D7C441ED6112F694E94713 pexLocalTransform3DData;
typedef CARD32 pexLookupTable;
typedef struct $BDC81D2701FE6C6C5F306559378E29B0 pexMapDCtoWCReply;
typedef struct $26F23E21FE3C115D149F20D47AE6B974 pexMapDCtoWCReq;
typedef struct $AA36C8E7DB8AA2A0E49686543A793549 pexMapWCtoDCReply;
typedef struct $9F8767F2C6ABC0015F4095E8DC7064F8 pexMapWCtoDCReq;
typedef struct $1355211EA81407642BD9D2D9A538CFC1 pexMarkerBundleEntry;
typedef struct $51068917AA5D318D8FA7A60BE15ADF1A pexMarkerBundleIndex;
typedef struct $9D83F5AC197B6EEDC5264D55D54DC38E pexMarkerColor;
typedef pexMarkerBundleIndex pexMarkerColorIndex;
typedef struct $D635E78B625EBD67ED9AD78D34936B41 pexMarkerScale;
typedef struct $8E6586170DFE7430E9F1E720E7EE4924 pexMarkerType;
typedef struct $0FAE394FC492092BC5FFE693D0AA7D04 pexMarkers;
typedef struct $0FAE394FC492092BC5FFE693D0AA7D04 pexMarkers2D;
typedef struct $0A5C89641A93CB3ACF06CDFC9D8A23B0 pexMatchRenderingTargetsReply;
typedef struct $F1925969AB71A5A17E413FE84AB88904 pexMatchRenderingTargetsReq;
typedef PEXFLOAT pexMatrix[4][4];
typedef PEXFLOAT pexMatrix3X3[3][3];
typedef struct $BDD53916B9F6E52421B422566B0D5D70 pexMaxHitsReachedEvent;
typedef struct $BF288F93331E061F3C0A4EDE42918C22 pexModelClipFlag;
typedef struct $62C51647002A165043A9AFBD102E20FC pexModelClipVolume;
typedef struct $62C51647002A165043A9AFBD102E20FC pexModelClipVolume2D;
typedef struct $5B5ABE49D87092922D5AFA5A6EC6FBAE pexMonoEncoding;
typedef struct $6FBDDC749A304B2851D845F180589FFE pexNURBCurve;
typedef struct $945CB40499A6C274AE2947D5A626DBC5 pexNURBSurface;
typedef CARD32 pexName;
typedef CARD32 pexNameSet;
typedef struct $F468653D871AA8B3B8DDCC9FD42507EA pexNameSetPair;
typedef struct $0FAE394FC492092BC5FFE693D0AA7D04 pexNoop;
typedef struct $D0B9E86B5121D9CE10E8E5EE9BDD9E9B pexNpcSubvolume;
typedef struct $142692922453F1D2D07D2ED98127C489 pexOutputCommandError;
typedef CARD32 pexPC;
typedef struct $B3D91B724481B367826B30A56EC102CC pexPD_DC_HitBox;
typedef pexNpcSubvolume pexPD_NPC_HitVolume;
typedef struct $48A5AC1E440CE609E026CA4EC554DC68 pexPSC_IsoparametricCurves;
typedef struct $2F6E771888829A51D9160AC35D02FBD9 pexPSC_LevelCurves;
typedef struct $E6051A7A276F3C62A8A22C549E449370 pexParaSurfCharacteristics;
typedef struct $714ECB015488F571062DF73447960E43 pexPatternAttributes;
typedef struct $CE6D7C2E7A4B6B8EE3CC26E1C4C11797 pexPatternAttributes2D;
typedef struct $78BCCEBB7D351EDED281010DB00F670D pexPatternEntry;
typedef struct $9A784CA7D6C0E1FBB246C8E9B53C24C1 pexPatternSize;
typedef CARD32 pexPhigsWks;
typedef struct $3962543319D6B0C0D2551C7AFB5C58EC pexPickAllReply;
typedef struct $B0016BD267CD063743F8025D1EF2F885 pexPickAllReq;
typedef struct $9A4171A2E09D9BDDB64FBFF4E702414F pexPickElementRef;
typedef struct $8D464BF992019D1DA7B2EE769B420964 pexPickID;
typedef CARD32 pexPickMeasure;
typedef struct $9A67910CF765C38819EFD71866036684 pexPickOneReply;
typedef struct $34A12E12B64B689AEBAE9E53027472C2 pexPickOneReq;
typedef pexPickElementRef pexPickPath;
typedef struct $A20792E4BC1C181E68916B2D92A9B2C9 pexPickRecord;
typedef struct $0FAE394FC492092BC5FFE693D0AA7D04 pexPolyline;
typedef struct $0FAE394FC492092BC5FFE693D0AA7D04 pexPolyline2D;
typedef struct $B97998A4C74A35781EC5FBA5E3D13B33 pexPolylineInterpMethod;
typedef struct $1A75A2DB0C5B85809EBF2664AB4B3690 pexPolylineSetWithData;
typedef struct $0C5828DF51A63AD83FD60D6E941E741B pexPostStructureReq;
typedef struct $29759B8970C1DA10DE8D43838461D9CA pexQuadrilateralMesh;
typedef struct $AFFAACB4BEFEB7AAFDD2F11710DDB870 pexQueryFontReply;
typedef struct $D92C2BF2561A7EC65876555C79CE686A pexQueryFontReq;
typedef struct $0A5C89641A93CB3ACF06CDFC9D8A23B0 pexQueryTextExtentsReply;
typedef struct $996AFA363EA033F77FC336ED8A97035E pexQueryTextExtentsReq;
typedef pexResourceReq pexRedrawAllStructuresReq;
typedef struct $8CAD7BDDA71EDC7DB2A64D55137A8267 pexRedrawClipRegionReq;
typedef struct $5FA74F1E1B3BE3F65FDF204A59A0D981 pexReflectionAttr;
typedef struct $5AE2068BF65A8B923C3A883B0FDD40FC pexReflectionAttributes;
typedef struct $3229C80152E2A53E9C46A6EDD2E45AEF pexReflectionModel;
typedef pexAddToNameSet pexRemoveFromNameSet;
typedef struct $F6ADA265534CFADF890687EBC6C724DD pexRenderElementsReq;
typedef struct $B13117368063F44AF47DD7A9B3CFBB2F pexRenderNetworkReq;
typedef struct $78C1BFF707415BC31C18D6AF92D2EABD pexRenderOutputCommandsReq;
typedef CARD32 pexRenderer;
typedef struct $13586A680F7A8EA9124C7D56A4210D51 pexRendererTarget;
typedef struct $AAC926B0114B176D0DFEF021CC145D64 pexRenderingColorModel;
typedef struct $A72D5FE34FE1565D7A5E27361D12995E pexReq;
typedef struct $A4FCA5194E85EFF54308206891FEE164 pexResourceReq;
typedef struct $0FAE394FC492092BC5FFE693D0AA7D04 pexRestoreModelClipVolume;
typedef struct $CBA5F02AFFC4EA4A3305BB276E7E8CDE pexRgb16Color;
typedef struct $9281A16BE3ADF5B041CAA43F31749092 pexRgb8Color;
typedef struct $392B27E1A8FD319BEA48DA7B223FEC2D pexRgbFloatColor;
typedef CARD32 pexSC;
typedef struct $8774CE79C234090F3428DE59DE9845D2 pexSearchNetworkReply;
typedef pexResourceReq pexSearchNetworkReq;
typedef struct $8C749379D7EEF7D1FBD30CDCFD79F5DB pexSetEditingModeReq;
typedef struct $F7930C5E39C3A0E822EC3E3932879963 pexSetElementPointerAtLabelReq;
typedef struct $933BE1AB5DCAC6C391237CA0391008DA pexSetElementPointerReq;
typedef struct $538026D6D814696035C959CCF36B9804 pexSetOfFillAreaSets;
typedef struct $CC08BA722D5B00BE9609FAC7D5A48382 pexSetTableEntriesReq;
typedef struct $8FA1AEF6CCD04E4BA4DF0F44219AFDE7 pexSetWorkstationBufferModeReq;
typedef struct $BA4C9A7C8B0DBB286EB1091873441956 pexSetWorkstationDisplayUpdateModeReq;
typedef struct $91220B58EDEB553793259B81A7288E35 pexSetWorkstationHLHSRModeReq;
typedef struct $42C4F57D7B4134782AEFE3C2B923A11A pexSetWorkstationViewPriorityReq;
typedef struct $A59C8FA6101490B6FA0BAC9DC8127B03 pexSetWorkstationViewRepReq;
typedef struct $03A62E6745AE8117684158C8FB6651D9 pexSetWorkstationViewportReq;
typedef struct $4684C501B475E331C6F045D36C80F840 pexSetWorkstationWindowReq;
typedef struct $7FE28531FE31ADDD93C7790591CFBAC8 pexStoreElementsReq;
typedef struct $4BDA116E141BAFF47F6709874A5B141F pexString;
typedef CARD32 pexStructure;
typedef struct $EDDCB6AFAAF5409A3B2EA356C0FE1408 pexStructureInfo;
typedef struct $C62BD96E3AD00AC0AC34EE73241191B1 pexSurfaceApprox;
typedef struct $39D86218829C645F9016AE787AE70914 pexSurfaceApproxData;
typedef pexMarkerColor pexSurfaceColor;
typedef pexMarkerBundleIndex pexSurfaceColorIndex;
typedef pexMarkerColor pexSurfaceEdgeColor;
typedef pexMarkerBundleIndex pexSurfaceEdgeColorIndex;
typedef struct $BF288F93331E061F3C0A4EDE42918C22 pexSurfaceEdgeFlag;
typedef struct $5447248DB8CC2599D00069FFCC5655BA pexSurfaceEdgeType;
typedef pexLineWidth pexSurfaceEdgeWidth;
typedef struct $78618D9CB1AB8194EEFA681585FF29A6 pexSurfaceInterpMethod;
typedef CARD8 pexSwitch;
typedef CARD16 pexTableIndex;
typedef struct $5A4A2C5171B7551FC7DFD26565D5B467 pexTableInfo;
typedef CARD16 pexTableType;
typedef struct $FF7AFAF63B51BBA04C101CD1E944BFE9 pexText;
typedef struct $3934EB209CD783CC2D4F68C3A60FD027 pexText2D;
typedef struct $14C1E8498BC4B9406DA920D6EFBBCEDC pexTextAlignment;
typedef struct $E4B54CDAC268E0DDD69B76CAD39D67E7 pexTextAlignmentData;
typedef struct $B20AD2F0BD1721D150AA087D56307684 pexTextBundleEntry;
typedef pexMarkerBundleIndex pexTextBundleIndex;
typedef pexMarkerColor pexTextColor;
typedef pexMarkerBundleIndex pexTextColorIndex;
typedef struct $26F73497F4CB46505328DAABF2BFD175 pexTextFontEntry;
typedef pexMarkerBundleIndex pexTextFontIndex;
typedef CARD16 pexTextHAlignment;
typedef struct $A1D5C74DF8765FD9CC260A09F6DD3C34 pexTextPath;
typedef struct $99800163638C6A1BFA9FE38BFEE3E130 pexTextPrecision;
typedef CARD16 pexTextVAlignment;
typedef struct $185EA91A4AF029CAEEB69A58077AAFAD pexTriangleStrip;
typedef struct $510FB59E31EC2DCA58C34F27FA32E28B pexTrimCurve;
typedef CARD16 pexTypeOrTableIndex;
typedef pexResourceReq pexUnloadFontReq;
typedef pexResourceReq pexUnpostAllStructuresReq;
typedef struct $07DF049C92EFA72E1E8152C1F763FF30 pexUnpostStructureReq;
typedef struct $EBCD544415DA81694FD11F76153DF44B pexUpdatePickMeasureReq;
typedef pexResourceReq pexUpdateWorkstationReq;
typedef struct $77BCF32EDCE867EAF5B70A654CA700DE pexVector2D;
typedef struct $5DBACEAB92966C603C98F59DF949BD43 pexVector3D;
typedef struct $9C3ADE2830E8678457F509D6BD2904ED pexVertex;
typedef struct $E005195AE7F2F7B0796FC6C384F6178C pexViewEntry;
typedef pexMarkerBundleIndex pexViewIndex;
typedef struct $AC2DF2923031B514585E1A7E5D8CF6A3 pexViewRep;
typedef struct $85BD4541E4D2ADE44F6EE7868018A164 pexViewport;
struct pfcntrs {ulong pf_cntr0;ulong pf_cntr1;ulong pr_cycle;};
struct pfcntrs_ev5 {ulong pr_cycle;ulong pf_cntr0;ulong pf_cntr1;ulong pf_cntr2;};
typedef u_int32_t pgno_t;
struct pgrp {simple_lock_data_t pg_ref_lock;u_int pg_refcnt;struct proc *pg_mem;struct session *pg_session;struct pgrp *pg_sessnxt;struct pgrp *pg_hforw;lock_data_t pg_lock;pid_t pg_id;u_int pg_jobc;};
struct phdr {char *lpc;char *hpc;int ncnt;};
typedef physadr_t physadr;
typedef struct $B71EADFB06BE795E36436A7CA877F388 *physadr_t;
struct physical_sector_format {u_char cyl2;u_char cyl1;u_char cyl0;u_char head;u_char sector3;u_char sector2;u_char sector1;u_char sector0;};
struct pid_entry {pid_t pe_pid;unsigned __int16 pe_gen;unsigned __int8 pe_ibn;unsigned __int8 pe_flag;struct proc *pe_proc;struct pid_entry *pe_link;simple_lock_data_t pe_lock;};
typedef int pid_t;
struct pkthdr {int len;int protocolSum;struct ifnet *rcvif;};
typedef struct $6999C5F45A7509ACAEE4435BC7D6BE11 pmGetProxyAddrMsg;
typedef struct $BC21E3DCA2DEF6CD8EB07ED07E074597 pmGetProxyAddrReplyMsg;
typedef struct $9862706C0A5BB87114D8D1264CC215A3 pmStartProxyMsg;
struct pmap {unsigned int pm_prog;unsigned int pm_vers;unsigned int pm_prot;unsigned int pm_port;};
struct pmap_statistics {int resident_count;int max_resident_count;int wired_count;int resident_text;};
typedef struct pmap_statistics *pmap_statistics_t;
struct pmaplist {struct pmap pml_map;struct pmaplist *pml_next;};
union pmctrs_ev5 {ulong pmctrs_ev5_long;struct pmctrs_ev5::$AA223052B6E202265D97D63B9A5930C5 pmctrs_ev5_struct;};
struct pmctrs_ev5::$AA223052B6E202265D97D63B9A5930C5 {unsigned __int64 pmctrs_ev5_s_c0;};
union pmctrs_ev6 {ulong pmctrs_ev6_long;struct pmctrs_ev6::$C48B39E4556A2CFF872833A5CFFFF1AF pmctrs_ev6_struct;};
struct pmctrs_ev6::$C48B39E4556A2CFF872833A5CFFFF1AF {unsigned __int64 pmctrs_ev6_s_cpu;};
struct pnp_acquire_arg {hw_addr linkaddr;__int64 inetaddr;char *arch;how_to_boot how;__int64 memsize;__int64 disksize;char *hostid;};
enum pnp_errcode {pnp_success = 0x0,pnp_failure = 0x1,pnp_wrong_address = 0x2,pnp_no_software = 0x3,pnp_no_diskspace = 0x4,pnp_nomore_clients = 0x5,pnp_do_bootserver = 0x6,pnp_do_askuser = 0x7,pnp_do_bootclient = 0x8,pnp_do_localboot = 0x9,pnp_busy_retry = 0xA,pnp_in_progress = 0xB,pnp_wait = 0xC,pnp_unknown_client = 0xD,pnp_database_error = 0xE,};
struct pnp_setup_arg {pnp_acquire_arg pa;char *name;char *keydata;};
struct pnp_whoami_arg {hw_addr linkaddr;__int64 inetaddr;};
struct pnp_whoami_ret {pnp_errcode status;char *name;char *domain;struct pnp_whoami_ret::$9EE77415209DDF090ED4CB69F2FE1167 extension;};
struct pnp_whoami_ret::$9EE77415209DDF090ED4CB69F2FE1167 {u_int extension_len;env_string *extension_val;};
typedef vm_offset_t pointer_t;
struct pollfd {int fd;__int16 events;__int16 revents;};
typedef struct queue_entry pollhead;
struct polpos {__int16 p_x;__int16 p_y;__int16 p_z;__int16 p_azi;__int16 p_pit;__int16 p_rol;__int16 p_stat;char p_key;};
struct port {int (*conf)();};
typedef port_t port_all_t;
typedef port_t *port_array_t;
typedef port_name_t *port_name_array_t;
typedef __int64 port_name_t;
typedef port_t port_own_t;
typedef port_t port_rcv_t;
typedef port_name_t port_set_name_t;
typedef port_name_t port_t;
typedef port_type_t *port_type_array_t;
typedef int port_type_t;
struct post_op_attr {int attributes;fattr3 attr;};
struct post_op_fh3 {int handle_follows;nfs_fh3 handle;};
struct ppp_comp_stats {struct compstat c;struct compstat d;};
struct ppp_idle {time_t xmit_idle;time_t recv_idle;};
struct ppp_option_data {u_char *ptr;u_int length;int transmit;};
struct ppp_stats {struct pppstat p;struct vjstat vj;};
struct pppstat {unsigned int ppp_ibytes;unsigned int ppp_ipackets;unsigned int ppp_ierrors;unsigned int ppp_obytes;unsigned int ppp_opackets;unsigned int ppp_oerrors;};
struct pr_default {char dd_name[20];char dg_name;struct pr_field prd;struct pr_flag prg;struct t_field tcd;struct t_flag tcg;struct dev_field devd;struct dev_flag devg;struct system_default_fields sfld;struct system_default_flags sflg;};
struct pr_field {char fd_name[9];uid_t fd_uid;char fd_encrypt[113];char fd_owner[9];int fd_nice;mask_t fd_cprivs[1];privvec_t fd_sprivs;privvec_t fd_bprivs;char fd_auditdisp[4096];uchar_t fd_auditcntl;time_t fd_min;int fd_minlen;int fd_maxlen;time_t fd_expire;time_t fd_lifetime;time_t fd_schange;time_t fd_uchange;char fd_pick_pwd;char fd_gen_pwd;char fd_restrict;char fd_policy;char fd_nullpw;uid_t fd_pwchanger;char fd_gen_chars;char fd_gen_letters;char fd_pwdepth;char fd_pwdict[1017];uchar_t fd_oldcrypt;uchar_t fd_newcrypt;time_t fd_slogin;time_t fd_ulogin;char fd_suctty[14];__int16 fd_nlogins;char fd_unsuctty[14];char fd_tod[50];ushort fd_max_tries;time_t fd_unlockint;char fd_retired;char fd_lock;time_t fd_expdate;char fd_istemplate;char fd_template[9];};
struct pr_file {struct f_field ufld;struct f_flag uflg;};
struct pr_flag {unsigned int fg_unsuctty;unsigned int fg_template;};
struct pr_lp {struct l_field ufld;struct l_flag uflg;struct l_field sfld;struct l_flag sflg;};
struct pr_passwd {struct pr_field ufld;struct pr_flag uflg;struct pr_field sfld;struct pr_flag sflg;};
struct pr_term {struct t_field ufld;struct t_flag uflg;struct t_field sfld;struct t_flag sflg;};
struct prabrun {__int64 pr_count;tid_t pr_error_thread;prrun_t pr_run;char pr_data[1];};
typedef struct prabrun prabrun_t;
struct prbits {unsigned __int8 bits[8];};
struct prcred {uid_t pr_euid;uid_t pr_ruid;uid_t pr_suid;gid_t pr_egid;gid_t pr_rgid;gid_t pr_sgid;u_int pr_ngroups;};
typedef struct prcred prcred_t;
struct pre_op_attr {int attributes;wcc_attr attr;};
struct presto_interface {int (*nvram_status)();int (*nvram_battery_enable)();int (*nvram_battery_disable)();int (*nvram_battery_status)();void (*nvram_ioreg_read)();void (*nvram_ioreg_write)();void (*nvram_block_read)();void (*nvram_block_write)();void (*nvram_ioreg_zero)();void (*nvram_block_zero)();int nvram_min_ioreg;u_int nvram_ioreg_align;int nvram_min_block;u_int nvram_block_align;};
struct presto_modstat {int ps_status;union presto_modstat::$588EEB3D212C8D7D69EF2873F7B4345C presto_modstat_u;};
union presto_modstat::$588EEB3D212C8D7D69EF2873F7B4345C {char *ps_errmsg;struct presto_status ps_new;};
struct presto_status {prstates pr_state;u_int pr_battcnt;battery pr_batt[8];u_int pr_maxsize;u_int pr_cursize;u_int pr_ndirty;u_int pr_nclean;u_int pr_ninval;u_int pr_nactive;io pr_rdstats;io pr_wrstats;u_int pr_seconds;};
typedef ulong_t priv_t;
typedef ulong_t privvec_t[1];
struct prlistname_args {u_int pl_mask;struct prlistname_args::$57129CB99D9816C5E12A77354B68A437 pl_names;};
struct prlistname_args::$57129CB99D9816C5E12A77354B68A437 {u_int pl_names_len;nameptr *pl_names_val;};
struct prmap {caddr_t pr_vaddr;u_long pr_size;off_t pr_off;__int64 pr_mflags;__int64 filler[4];};
typedef struct prmap prmap_t;
struct proc {struct pid_entry *p_pe;int p_flag;int p_nice;pid_t p_pid;pid_t p_ppid;uid_t p_ruid;gid_t p_rgid;uid_t p_svuid;gid_t p_svgid;struct pgrp *p_pgrp;struct ucred *p_rcred;size_t p_maxrss;int p_stat;u_int p_refcnt;sigset_t p_sig;sigset_t p_gsig;sigset_t p_sigignore;sigset_t p_sigcatch;sigset_t p_siginfo;sigset_t p_sigwaitmask;sigset_t p_sigrestart;queue_head_t p_sigqueue;queue_head_t p_sigwaitq;queue_head_t p_sigauxq;struct proc::sigacthdr *p_sigact;struct sigaction *p_sigcache;queue_head_t p_strsigs;int p_sigqcnt;boolean_t p_sig_wait;__int64 spare1;int spare2;u_int p_forkcnt;u_int p_xstat;int p_wcode;struct rusage *p_ru;struct thread *p_end_thread;lock_data_t proc_relation_lock;struct proc *p_pptr;struct proc *p_cptr;struct proc *p_osptr;struct proc *p_ysptr;struct proc *p_pgrpprv;struct proc *p_pgrpnxt;queue_chain_t p_uidlinks;queue_chain_t p_gidlinks;volatile int p_realtimer_flags;int spare3;simple_lock_data_t p_timer_lock;struct itimerval p_timer[3];struct proc::psx4_tblock_struct *p_psx4_timer;struct thread *p_ptrace_thread;struct vnode *p_tracep;int p_trcf;uid_t p_auid;__int64 p_habitat;int p_uac;u_int p_aiocount;void *p_aiogp;__int64 spare4;__int64 p_aio_completion[3];__int64 spare5[5];};
typedef struct $7F1B0634D03F6FC40C24BD5FD3770500 proc_info_t;
typedef port_t *processor_array_t;
struct processor_basic_info {cpu_type_t cpu_type;cpu_subtype_t cpu_subtype;boolean_t running;int slot_num;boolean_t is_master;int pset_id;struct timeval start_stop_time;struct timeval pset_assign_time;char reserved[984];};
typedef struct processor_basic_info processor_basic_info_data_t;
typedef struct processor_basic_info *processor_basic_info_t;
typedef int processor_info_data_t[1024];
typedef __int64 *processor_info_t;
typedef port_t processor_name_t;
typedef port_t *processor_set_array_t;
struct processor_set_basic_info {int processor_count;int reserved1;int task_count;int thread_count;int load_average;int mach_factor;int pset_id;int state;struct timeval pset_create_time;unsigned __int64 processor_mask[64];char reserved2[468];};
typedef struct processor_set_basic_info processor_set_basic_info_data_t;
typedef struct processor_set_basic_info *processor_set_basic_info_t;
typedef int processor_set_info_data_t[1024];
typedef __int64 *processor_set_info_t;
typedef port_t *processor_set_name_array_t;
typedef port_t processor_set_name_t;
struct processor_set_sched_info {int policies;int max_priority;};
typedef struct processor_set_sched_info processor_set_sched_info_data_t;
typedef struct processor_set_sched_info *processor_set_sched_info_t;
typedef port_t processor_set_t;
typedef port_t processor_t;
typedef int processorid_t;
struct procfs_args {char *fspec;int exflags;uid_t exroot;};
struct procset {idop_t p_op;idtype_t p_lidtype;id_t p_lid;idtype_t p_ridtype;id_t p_rid;};
typedef struct procset procset_t;
struct proctrace {sigset_t pr_sigtrace;fltset_t pr_flttrace;sysset_t pr_sysenter;sysset_t pr_sysexit;};
struct prof_header {unsigned __int64 low_pc;unsigned __int64 high_pc;int p_opt_value;int pc_buf_size;int count_buf_size;};
struct profil_args {unsigned int *buffer;void *highpc;void *lowpc;unsigned __int64 scale;};
struct prompt_t {unsigned __int8 *prompt;unsigned __int8 *result;int max_result_length;int min_result_length;int control_flags;};
struct propattr {nameptr attr_name;val attr_val;u_int attr_mask;};
enum propflags {PROPAGATE_ON_COPY = 0x1,};
struct proplist_buf {u_int pl_entrysize;u_int pl_flags;u_int pl_namelen;u_int pl_valuelen;char pl_name[1];char pl_value[1];};
struct proplist_desc1 {u_long pl_nextentry;u_long pl_magic;u_long pl_entrysize;daddr_t pl_nextfsb;int pad;u_int pl_flags;ino_t pl_ino;u_long pl_valuelen;u_long pl_valuelen_entry;u_long pl_namelen;};
struct proplist_head {u_int pl_entrysize;u_int pl_flags;u_int pl_namelen;u_int pl_valuelen;char pl_name[256];};
struct proplistname_args {u_int pl_mask;u_int pl_numnames;char **pl_names;};
enum propstat {PROP_OK = 0x0,PROPERR_PERM = 0x1,PROPERR_NOENT = 0x2,PROPERR_INTR = 0x4,PROPERR_IO = 0x5,PROPERR_NXIO = 0x6,PROPERR_NOMEM = 0xC,PROPERR_ACCES = 0xD,PROPERR_FAULT = 0xE,PROPERR_BUSY = 0x10,PROPERR_EXIST = 0x11,PROPERR_NOTDIR = 0x14,PROPERR_INVAL = 0x16,PROPERR_NFILE = 0x17,PROPERR_MFILE = 0x18,PROPERR_NOSPC = 0x1C,PROPERR_ROFS = 0x1E,PROPERR_AGAIN = 0x23,PROPERR_OPNOTSUPP = 0x2D,PROPERR_NETUNREACH = 0x33,PROPERR_TIMEDOUT = 0x3C,PROPERR_LOOP = 0x3E,PROPERR_NAMETOOLONG = 0x3F,PROPERR_DQUOT = 0x45,PROPERR_STALE = 0x46,PROPERR_REMOTE = 0x47,PROPERR_NOTSUP = 0x63,PROPERR_SERVERFAULT = 0x2716,PROPERR_GET = 0x2719,};
typedef union $804F2EFC3E52A8BECE5080A3D33AAE9A proto_inet_union_t;
struct protocol_struct {char protocol_name[16];char dsf_name[8];uint major;int flags;struct protocol_struct *next_protocol;};
struct protoent {char *p_name;char **p_aliases;int p_proto;};
struct protoent_data {FILE *proto_fp;char line[1024];char *proto_aliases[35];int _proto_stayopen;int svc_getprotoflag;};
struct protosw {__int16 pr_type;struct domain *pr_domain;__int16 pr_protocol;__int16 pr_flags;void (*pr_input)();int (*pr_output)();void (*pr_ctlinput)();int (*pr_ctloutput)();int (*pr_usrreq)();void (*pr_init)();void (*pr_fasttimo)();void (*pr_slowtimo)();void (*pr_drain)();};
struct prpsinfo {char pr_state;char pr_sname;char pr_zomb;char pr_nice;u_long pr_flag;uid_t pr_uid;gid_t pr_gid;pid_t pr_pid;pid_t pr_ppid;pid_t pr_pgrp;pid_t pr_sid;caddr_t pr_addr;__int64 pr_size;__int64 pr_rssize;caddr_t pr_wchan;timestruc_t pr_start;timestruc_t pr_time;__int64 pr_pri;char pr_oldpri;char pr_cpu;dev_t pr_ttydev;char pr_clname[8];char pr_fname[16];char pr_psargs[80];int pr_onpro;int pr_bindpro;int pr_bindpset;int pr_exbindpset;__int64 pr_filler[18];};
typedef struct prpsinfo prpsinfo_t;
struct prpw_admin_change_req_v3 {char *fd_name;timeval_wide_t tstamp;uint32 ot_type;uint32 subtype;uint32 optmask;char *fd_specdata;char *fd_ubufdata;char *fd_matchdata;};
struct prpw_query_fields_req_v3 {timeval_wide_t tstamp;uint32 ot_type;uint32 optmask;};
struct prpw_update_req_v1 {char *fd_name;timeval_narrow_t fd_tstamp;uint32 fd_options;char *fd_oldpass;char *fd_encrypt;char *fd_origin;int fd_vac_start;int fd_vac_end;};
struct prpw_update_req_v3 {char *fd_name;timeval_wide_t tstamp;uint32 fd_options;char *fd_oldpass;char *fd_encrypt;char *fd_origin;__int64 fd_vac_start;__int64 fd_vac_end;};
struct prpw_update_rsp_v1 {uint32 status;uint32 optmask;uint32 min_ordnum;};
struct prpw_update_rsp_v3 {uint32 status;uint32 optmask;uint32 min_ordnum;uint32 ot_type;uint32 numfields;};
struct prrun {__int64 pr_flags;sigset_t pr_trace;sigset_t pr_sighold;fltset_t pr_fault;caddr_t pr_vaddr;void *pr_touch;__int64 filler[7];tid_t pr_tid;};
typedef struct prrun prrun_t;
enum prstates {PRDOWN = 0x0,PRUP = 0x1,PRERROR = 0x2,};
struct prstatus {__int64 pr_flags;__int16 pr_why;__int64 pr_what;siginfo_t pr_info;__int16 pr_cursig;sigset_t pr_sigpend;sigset_t pr_sighold;struct sigaltstack pr_altstack;struct sigaction pr_action;pid_t pr_pid;pid_t pr_ppid;gid_t pr_pgrp;pid_t pr_sid;timestruc_t pr_utime;timestruc_t pr_stime;timestruc_t pr_cutime;timestruc_t pr_cstime;char pr_clname[8];__int64 pr_teb;__int64 pr_filler[19];__int64 pr_instr;gregset_t pr_reg;u_long pr_subcode;__int64 pr_nthreads;struct vnode *pr_exvp;tid_t pr_tid;};
typedef struct prstatus prstatus_t;
struct prtab {major_t pt_major;struct dsent *pt_dsent;char *pt_driver_name;int pt_rinstance;struct prtab::prunit *pt_unit;struct prtab::prunit *pt_hunit[8];};
struct prthreads {__int64 pr_count;tid_t pr_error_thread;char pr_data[1];};
typedef struct prthreads prthreads_t;
struct prunit {struct prunit *pu_next;struct prunit *pu_hnext;unit_t pu_unit;struct prbits pu_enabled;struct prbits pu_error;struct prbits pu_flushing;__int64 pu_max_clusterio;};
struct prusage {timestruc_t pr_tstamp;timestruc_t pr_create;timestruc_t pr_term;timestruc_t pr_rtime;timestruc_t pr_utime;timestruc_t pr_stime;timestruc_t pr_ttime;timestruc_t pr_tftime;timestruc_t pr_dftime;timestruc_t pr_kftime;timestruc_t pr_ltime;timestruc_t pr_slptime;timestruc_t pr_wtime;timestruc_t pr_stoptime;u_long pr_minf;u_long pr_majf;u_long pr_nswap;u_long pr_inblk;u_long pr_oublk;u_long pr_msnd;u_long pr_mrcv;u_long pr_sigs;u_long pr_vctx;u_long pr_ictx;u_long pr_sysc;u_long pr_ioch;tid_t tid;};
typedef struct prusage prusage_t;
typedef struct nxm_pshared_debugdata *pshared_debug_p;
typedef struct nxm_pshared_debugdata pshared_debug_t;
typedef enum $D4AC8D0F670D6DA0C7CB30777785B82A pshared_holder_t;
typedef struct nxm_pshared_owner *pshared_owner_p;
typedef struct nxm_pshared_owner pshared_owner_t;
typedef enum $E722F09ED1144D6F1CCBF34446B0F175 pshared_type_t;
typedef struct nxm_pshared_waiter *pshared_waiter_p;
typedef struct nxm_pshared_waiter pshared_waiter_t;
struct psx4_key {psx4_key_index_t index;psx4_key_version_t version;};
struct psx4_key_entry {char *name;void *object;psx4_key_t key;pid_t pid;int state;dev_t st_dev;ino_t st_ino;rtlock_t entry_lock;int in_use_cnt;int access;psx4_key_t sem_usemdes;uint_t st_gen;};
typedef struct psx4_key_entry psx4_key_entry_t;
typedef unsigned __int16 psx4_key_index_t;
typedef struct psx4_key psx4_key_t;
struct psx4_key_table {unsigned __int16 entry_cnt;unsigned __int16 entry_size;void *entry;};
typedef struct psx4_key_table psx4_key_table_t;
typedef unsigned __int16 psx4_key_version_t;
struct psx4_mycsem {int semval;int semcnt;char semname[255];};
typedef struct psx4_mycsem psx4_mycsem_t;
typedef __int64 pt_entry_t;
struct pt_tbl {struct partition d_partitions[8];};
enum pthreadDbgStatus_t {PTHREAD_DBG_SUCCESS = 0x0,PTHREAD_DBG_QUIT = 0x1,PTHREAD_DBG_NONESEL = 0x2,PTHREAD_DBG_SUCCESSPEND = 0x3,PTHREAD_DBG_NOPRIV = 0xFFFFFFFF,PTHREAD_DBG_INVPARAM = 0xFFFFFFFE,PTHREAD_DBG_INVSEQ = 0xFFFFFFFD,PTHREAD_DBG_INCONSTATE = 0xFFFFFFFC,PTHREAD_DBG_CORRUPT = 0xFFFFFFFB,PTHREAD_DBG_INVOPTION = 0xFFFFFFFA,PTHREAD_DBG_NOARG = 0xFFFFFFF9,PTHREAD_DBG_INVADDR = 0xFFFFFFF8,PTHREAD_DBG_INVCMD = 0xFFFFFFF7,PTHREAD_DBG_NULLCMD = 0xFFFFFFF6,PTHREAD_DBG_CONFLICT = 0xFFFFFFF5,PTHREAD_DBG_UNIMPL = 0xFFFFFFF4,};
typedef struct pthreadDebugCallbacks_tag *pthreadDebugCallbacks_p;
typedef struct pthreadDebugCallbacks_tag pthreadDebugCallbacks_t;
struct pthreadDebugCallbacks_tag {unsigned __int64 version;pthreadDebugGetMemRtn_t read_callback;pthreadDebugSetMemRtn_t write_callback;pthreadDebugSuspendRtn_t suspend_callback;pthreadDebugResumeRtn_t resume_callback;pthreadDebugKthdInfoRtn_t kthdinfo_callback;pthreadDebugHoldRtn_t hold_callback;pthreadDebugUnholdRtn_t unhold_callback;pthreadDebugGetFregRtn_t getfreg_callback;pthreadDebugSetFregRtn_t setfreg_callback;pthreadDebugGetRegRtn_t getreg_callback;pthreadDebugSetRegRtn_t setreg_callback;pthreadDebugOutputRtn_t output_callback;pthreadDebugOutputRtn_t error_callback;pthreadDebugMallocRtn_t malloc_callback;pthreadDebugFreeRtn_t free_callback;pthreadDebugSpecKthdRtn_t speckthd_callback;};
typedef void *pthreadDebugClient_t;
typedef struct pthreadDebugCondInfo_tag *pthreadDebugCondInfo_p;
typedef struct pthreadDebugCondInfo_tag pthreadDebugCondInfo_t;
struct pthreadDebugCondInfo_tag {unsigned __int64 flags;pthreadDebugId_t sequence;pthread_cond_t *address;pthreadDebugId_t mutex;__int64 reserved[10];char name[32];};
typedef void **pthreadDebugContext_p;
typedef void *pthreadDebugContext_t;
typedef int (*pthreadDebugErrorRtn_t)(pthreadDebugClient_t, const char *);
typedef void (*pthreadDebugEventActivating_t)(pthreadDebugEvent_t, pthreadDebugId_t, void *(*)(void *), void *, void *, unsigned __int64);
typedef void (*pthreadDebugEventBlocking_t)(pthreadDebugEvent_t, pthreadDebugId_t, pthreadDebugSubstate_t, pthreadDebugId_t, void *, unsigned __int64);
typedef void (*pthreadDebugEventBugcheck_t)(pthreadDebugEvent_t, pthreadDebugId_t, char *, void *, void *, unsigned __int64);
typedef void (*pthreadDebugEventCreating_t)(pthreadDebugEvent_t, pthreadDebugId_t, pthreadDebugId_t, void *(*)(void *), void *, unsigned __int64);
typedef void (*pthreadDebugEventFreeing_t)(pthreadDebugEvent_t, pthreadDebugId_t, pthreadDebugId_t, void *, void *, unsigned __int64);
typedef void (*pthreadDebugEventInitialized_t)(pthreadDebugEvent_t, pthreadDebugId_t, void *, void *, void *, unsigned __int64);
typedef void (*pthreadDebugEventLastchance_t)(pthreadDebugEvent_t, pthreadDebugId_t, void *, void *, void *, unsigned __int64);
typedef unsigned int *pthreadDebugEventMask_p;
typedef unsigned int pthreadDebugEventMask_t;
typedef void (*pthreadDebugEventRunning_t)(pthreadDebugEvent_t, pthreadDebugId_t, pthreadDebugSubstate_t, pthreadDebugId_t, void *, unsigned __int64);
typedef void (*pthreadDebugEventTerminating_t)(pthreadDebugEvent_t, pthreadDebugId_t, pthreadDebugSubstate_t, void *, void *, unsigned __int64);
typedef void (*pthreadDebugEventToolReport_t)(pthreadDebugEvent_t, pthreadDebugId_t, char *, char *, void *, unsigned __int64);
typedef void (*pthreadDebugEventUnblock_t)(pthreadDebugEvent_t, pthreadDebugId_t, pthreadDebugSubstate_t, pthreadDebugId_t, void *, unsigned __int64);
typedef enum pthreadDebugEvent_tag pthreadDebugEvent_t;
enum pthreadDebugEvent_tag {PTHREAD_DEBUG_EVENT_NONE = 0x0,PTHREAD_DEBUG_EVENT_ACTIVATING = 0x1,PTHREAD_DEBUG_EVENT_BLOCKING = 0x2,PTHREAD_DEBUG_EVENT_CREATING = 0x3,PTHREAD_DEBUG_EVENT_RUNNING = 0x4,PTHREAD_DEBUG_EVENT_TERMINATING = 0x5,PTHREAD_DEBUG_EVENT_INITIALIZED = 0x6,PTHREAD_DEBUG_EVENT_FREEING = 0x7,PTHREAD_DEBUG_EVENT_UNBLOCK = 0x8,PTHREAD_DEBUG_EVENT_BUGCHECK = 0x9,PTHREAD_DEBUG_EVENT_LASTCHANCE = 0xA,PTHREAD_DEBUG_EVENT_TOOLREPORT = 0xB,};
typedef void (*pthreadDebugFreeRtn_t)(pthreadDebugClient_t, void *);
typedef __pthreadLongUint_t pthreadDebugFregsArray_t[33];
typedef struct pthreadDebugFregs_tag *pthreadDebugFregs_p;
typedef struct pthreadDebugFregs_tag pthreadDebugFregs_t;
struct pthreadDebugFregs_tag {__pthreadLongUint_t f0;__pthreadLongUint_t f1;__pthreadLongUint_t f2;__pthreadLongUint_t f3;__pthreadLongUint_t f4;__pthreadLongUint_t f5;__pthreadLongUint_t f6;__pthreadLongUint_t f7;__pthreadLongUint_t f8;__pthreadLongUint_t f9;__pthreadLongUint_t f10;__pthreadLongUint_t f11;__pthreadLongUint_t f12;__pthreadLongUint_t f13;__pthreadLongUint_t f14;__pthreadLongUint_t f15;__pthreadLongUint_t f16;__pthreadLongUint_t f17;__pthreadLongUint_t f18;__pthreadLongUint_t f19;__pthreadLongUint_t f20;__pthreadLongUint_t f21;__pthreadLongUint_t f22;__pthreadLongUint_t f23;__pthreadLongUint_t f24;__pthreadLongUint_t f25;__pthreadLongUint_t f26;__pthreadLongUint_t f27;__pthreadLongUint_t f28;__pthreadLongUint_t f29;__pthreadLongUint_t f30;__pthreadLongUint_t fpcr;__pthreadLongUint_t fp_control;};
typedef int (*pthreadDebugGetFregRtn_t)(pthreadDebugClient_t, pthreadDebugFregs_p, pthreadDebugKId_t);
typedef int (*pthreadDebugGetMemRtn_t)(pthreadDebugClient_t, pthreadDebugTargetAddr_t, void *, size_t);
typedef int (*pthreadDebugGetRegRtn_t)(pthreadDebugClient_t, pthreadDebugRegs_p, pthreadDebugKId_t);
typedef int (*pthreadDebugHoldRtn_t)(pthreadDebugClient_t, pthreadDebugKId_t);
typedef void (*pthreadDebugHookActivating_t)(pthreadDebugEvent_t, pthread_t, void *(*)(void *), void *, void *, unsigned __int64);
typedef void (*pthreadDebugHookBlocking_t)(pthreadDebugEvent_t, pthread_t, pthreadDebugSubstate_t, void *, void *, unsigned __int64);
typedef void (*pthreadDebugHookBugcheck_t)(pthreadDebugEvent_t, pthread_t, char *, void *, void *, unsigned __int64);
typedef void (*pthreadDebugHookCreating_t)(pthreadDebugEvent_t, pthread_t, pthread_t, void *(*)(void *), void *, unsigned __int64);
typedef void (*pthreadDebugHookFreeing_t)(pthreadDebugEvent_t, pthread_t, pthread_t, void *, void *, unsigned __int64);
typedef void (*pthreadDebugHookInitialized_t)(pthreadDebugEvent_t, pthread_t, void *, void *, void *, unsigned __int64);
typedef void (*pthreadDebugHookLastchance_t)(pthreadDebugEvent_t, pthread_t, void *, void *, void *, unsigned __int64);
typedef void (*pthreadDebugHookRunning_t)(pthreadDebugEvent_t, pthread_t, pthreadDebugSubstate_t, pthread_t, void *, unsigned __int64);
typedef void (*pthreadDebugHookTerminating_t)(pthreadDebugEvent_t, pthread_t, pthreadDebugSubstate_t, void *, void *, unsigned __int64);
typedef void (*pthreadDebugHookUnblock_t)(pthreadDebugEvent_t, pthread_t, pthreadDebugSubstate_t, pthread_t, void *, unsigned __int64);
typedef __int64 pthreadDebugId_t;
typedef enum pthreadDebugInitFlag_tag pthreadDebugInitFlag_t;
enum pthreadDebugInitFlag_tag {PTHREAD_DEBUG_FLAG_PASSIVE = 0x1000000,PTHREAD_DEBUG_FLAG_NOUPDATE = 0x2000000,PTHREAD_DEBUG_FLAG_UPCALLS = 0x4000000,};
typedef void *pthreadDebugKId_t;
typedef enum pthreadDebugKState_tag pthreadDebugKState_t;
enum pthreadDebugKState_tag {PTHREAD_DEBUG_KSTATE_UNKNOWN = 0x0,PTHREAD_DEBUG_KSTATE_RUNNING = 0x1,PTHREAD_DEBUG_KSTATE_STOPPED = 0x2,PTHREAD_DEBUG_KSTATE_WAITING = 0x3,PTHREAD_DEBUG_KSTATE_UINT_WAITING = 0x4,PTHREAD_DEBUG_KSTATE_HALTED = 0x5,};
typedef struct pthreadDebugKThreadInfo_tag *pthreadDebugKThreadInfo_p;
typedef struct pthreadDebugKThreadInfo_tag pthreadDebugKThreadInfo_t;
struct pthreadDebugKThreadInfo_tag {unsigned __int64 flags;pthreadDebugKState_t state;pthread_t teb;int sched_policy;int base_priority;int cur_priority;int suspend_count;sigset_t sig_block;sigset_t sig_pend;__int64 sleep_time;__int64 wait_event;pthreadDebugTimespec_t user_time;pthreadDebugTimespec_t system_time;char sched_class[8];__int64 reserved[10];};
typedef int (*pthreadDebugKthdInfoRtn_t)(pthreadDebugClient_t, pthreadDebugKId_t, pthreadDebugKThreadInfo_p);
typedef void *(*pthreadDebugMallocRtn_t)(pthreadDebugClient_t, size_t);
typedef struct pthreadDebugMutexInfo_tag *pthreadDebugMutexInfo_p;
typedef struct pthreadDebugMutexInfo_tag pthreadDebugMutexInfo_t;
struct pthreadDebugMutexInfo_tag {unsigned __int64 flags;pthreadDebugMutexType_t type;pthreadDebugId_t owner;pthreadDebugId_t sequence;pthread_mutex_t *address;unsigned int depth;pthreadDebugMutexProtocol_t protocol;int prioceiling;int priority;char name[32];};
typedef enum pthreadDebugMutexProtocol_tag pthreadDebugMutexProtocol_t;
enum pthreadDebugMutexProtocol_tag {PTHREAD_DEBUG_MUT_PROTO_NONE = 0x1,PTHREAD_DEBUG_MUT_PROTO_PROTECT = 0x2,PTHREAD_DEBUG_MUT_PROTO_INHERIT = 0x3,};
typedef enum pthreadDebugMutexType_tag pthreadDebugMutexType_t;
enum pthreadDebugMutexType_tag {PTHREAD_DEBUG_MUT_TYPE_NORMAL = 0x1,PTHREAD_DEBUG_MUT_TYPE_RECURSIVE = 0x2,PTHREAD_DEBUG_MUT_TYPE_ERRORCHECK = 0x3,};
typedef int (*pthreadDebugOutputRtn_t)(pthreadDebugClient_t, const char *);
typedef __pthreadLongUint_t pthreadDebugRegsArray_t[33];
typedef struct pthreadDebugRegs_tag *pthreadDebugRegs_p;
typedef struct pthreadDebugRegs_tag pthreadDebugRegs_t;
struct pthreadDebugRegs_tag {__pthreadLongUint_t r0;__pthreadLongUint_t r1;__pthreadLongUint_t r2;__pthreadLongUint_t r3;__pthreadLongUint_t r4;__pthreadLongUint_t r5;__pthreadLongUint_t r6;__pthreadLongUint_t r7;__pthreadLongUint_t r8;__pthreadLongUint_t r9;__pthreadLongUint_t r10;__pthreadLongUint_t r11;__pthreadLongUint_t r12;__pthreadLongUint_t r13;__pthreadLongUint_t r14;__pthreadLongUint_t r15;__pthreadLongUint_t r16;__pthreadLongUint_t r17;__pthreadLongUint_t r18;__pthreadLongUint_t r19;__pthreadLongUint_t r20;__pthreadLongUint_t r21;__pthreadLongUint_t r22;__pthreadLongUint_t r23;__pthreadLongUint_t r24;__pthreadLongUint_t r25;__pthreadLongUint_t r26;__pthreadLongUint_t r27;__pthreadLongUint_t r28;__pthreadLongUint_t r29;__pthreadLongUint_t r30;__pthreadLongUint_t pc;__pthreadLongUint_t ps;};
typedef int (*pthreadDebugResumeRtn_t)(pthreadDebugClient_t);
typedef struct pthreadDebugRwlockInfo_tag *pthreadDebugRwlockInfo_p;
typedef struct pthreadDebugRwlockInfo_tag pthreadDebugRwlockInfo_t;
struct pthreadDebugRwlockInfo_tag {unsigned __int64 flags;pthreadDebugId_t sequence;pthread_rwlock_t *address;pthreadDebugId_t wrid;unsigned __int64 rcount;char name[32];};
typedef int (*pthreadDebugSetFregRtn_t)(pthreadDebugClient_t, const pthreadDebugFregs_t *, pthreadDebugKId_t);
typedef int (*pthreadDebugSetMemRtn_t)(pthreadDebugClient_t, pthreadDebugTargetAddr_t, const void *, size_t);
typedef int (*pthreadDebugSetRegRtn_t)(pthreadDebugClient_t, const pthreadDebugRegs_t *, pthreadDebugKId_t);
typedef int (*pthreadDebugSpecKthdRtn_t)(pthreadDebugClient_t, pthreadDebugSpecialType_t, pthreadDebugKId_t *);
typedef enum pthreadDebugSpecialType_tag pthreadDebugSpecialType_t;
enum pthreadDebugSpecialType_tag {PTHREAD_DEBUG_SPECIAL_TYPE_CURRENT = 0x1,PTHREAD_DEBUG_SPECIAL_TYPE_TRAP = 0x2,};
typedef enum pthreadDebugState_tag pthreadDebugState_t;
enum pthreadDebugState_tag {PTHREAD_DEBUG_STATE_UNKNOWN = 0x0,PTHREAD_DEBUG_STATE_RUNNING = 0x1,PTHREAD_DEBUG_STATE_READY = 0x2,PTHREAD_DEBUG_STATE_BLOCKED = 0x3,PTHREAD_DEBUG_STATE_NEW = 0x4,PTHREAD_DEBUG_STATE_SORTING = 0x5,PTHREAD_DEBUG_STATE_TERMINATED = 0x6,PTHREAD_DEBUG_STATE_ZOMBIE = 0x7,};
typedef enum pthreadDebugSubstate_tag pthreadDebugSubstate_t;
enum pthreadDebugSubstate_tag {PTHREAD_DEBUG_SUBSTATE_UNKNOWN = 0x0,PTHREAD_DEBUG_SUBSTATE_NORMAL = 0x1,PTHREAD_DEBUG_SUBSTATE_UNBLOCK_PEND = 0x2,PTHREAD_DEBUG_SUBSTATE_KERNEL = 0x3,PTHREAD_DEBUG_SUBSTATE_MUTEX = 0x4,PTHREAD_DEBUG_SUBSTATE_CV = 0x5,PTHREAD_DEBUG_SUBSTATE_TIMED_CV = 0x6,PTHREAD_DEBUG_SUBSTATE_TERM_CANCEL = 0x7,PTHREAD_DEBUG_SUBSTATE_TERM_EXIT = 0x8,PTHREAD_DEBUG_SUBSTATE_DELAY = 0x9,PTHREAD_DEBUG_SUBSTATE_JOIN = 0xA,PTHREAD_DEBUG_SUBSTATE_START = 0xB,PTHREAD_DEBUG_SUBSTATE_SYNCSUSP = 0xC,PTHREAD_DEBUG_SUBSTATE_READLOCK = 0xD,PTHREAD_DEBUG_SUBSTATE_WRITELOCK = 0xE,};
typedef int (*pthreadDebugSuspendRtn_t)(pthreadDebugClient_t);
typedef void *pthreadDebugTargetAddr_t;
typedef union pthreadDebugThdBlkInfo_tag *pthreadDebugThdBlkInfo_p;
typedef union pthreadDebugThdBlkInfo_tag pthreadDebugThdBlkInfo_t;
union pthreadDebugThdBlkInfo_tag {pthreadDebugThdBlkType_t type;struct pthreadDebugThdBlkInfo_tag::$12855ED5D01BF05A408801C0F9C1580E mutex;struct pthreadDebugThdBlkInfo_tag::$B344F5FD4AA247484328C5B94EDD5AAA cond;struct pthreadDebugThdBlkInfo_tag::$95878DFB628461F981F845E5B1944336 delay;struct pthreadDebugThdBlkInfo_tag::$8B554DF78DDEE16EFC47E7750CB08AAE rwlock;struct pthreadDebugThdBlkInfo_tag::$09EDA2C5E742A6A0E8BD2194F9C348AF join;struct pthreadDebugThdBlkInfo_tag::$09EDA2C5E742A6A0E8BD2194F9C348AF suspsync;pthreadDebugThdKrnBlk_t kernel;};
struct pthreadDebugThdBlkInfo_tag::$09EDA2C5E742A6A0E8BD2194F9C348AF {pthreadDebugThdBlkType_t type;pthreadDebugId_t thread;};
struct pthreadDebugThdBlkInfo_tag::$12855ED5D01BF05A408801C0F9C1580E {pthreadDebugThdBlkType_t type;pthreadDebugId_t mutex;};
struct pthreadDebugThdBlkInfo_tag::$8B554DF78DDEE16EFC47E7750CB08AAE {pthreadDebugThdBlkType_t type;pthreadDebugId_t rwlock;};
struct pthreadDebugThdBlkInfo_tag::$95878DFB628461F981F845E5B1944336 {pthreadDebugThdBlkType_t type;pthreadDebugTimespec_t timeout;};
struct pthreadDebugThdBlkInfo_tag::$B344F5FD4AA247484328C5B94EDD5AAA {pthreadDebugThdBlkType_t type;pthreadDebugId_t cond;pthreadDebugId_t mutex;pthreadDebugTimespec_t timeout;};
typedef enum pthreadDebugThdBlkType_tag pthreadDebugThdBlkType_t;
enum pthreadDebugThdBlkType_tag {PTHREAD_DEBUG_THDBLK_BADVALUE = 0x0,PTHREAD_DEBUG_THDBLK_NONE = 0x1,PTHREAD_DEBUG_THDBLK_MUTEX = 0x2,PTHREAD_DEBUG_THDBLK_COND = 0x3,PTHREAD_DEBUG_THDBLK_DELAY = 0x4,PTHREAD_DEBUG_THDBLK_RWL = 0x5,PTHREAD_DEBUG_THDBLK_JOIN = 0x6,PTHREAD_DEBUG_THDBLK_SUSPSYNC = 0x7,PTHREAD_DEBUG_THDBLK_KERNEL = 0x8,};
typedef struct pthreadDebugThdKrnBlk_tag *pthreadDebugThdKrnBlk_p;
typedef struct pthreadDebugThdKrnBlk_tag pthreadDebugThdKrnBlk_t;
struct pthreadDebugThdKrnBlk_tag {pthreadDebugThdBlkType_t type;__int64 flags;__int64 habitat;__int64 syscall;pthreadDebugTargetAddr_t va;char habitat_nm[8];char syscall_nm[24];};
typedef enum pthreadDebugThreadCreator_tag pthreadDebugThreadCreator_t;
enum pthreadDebugThreadCreator_tag {PTHREAD_DEBUG_THD_CREATOR_POSIX = 0x1,PTHREAD_DEBUG_THD_CREATOR_CMA = 0x2,PTHREAD_DEBUG_THD_CREATOR_DCE = 0x3,PTHREAD_DEBUG_THD_CREATOR_DCEEXC = 0x4,PTHREAD_DEBUG_THD_CREATOR_TIS = 0x5,};
typedef struct pthreadDebugThreadInfo_tag *pthreadDebugThreadInfo_p;
typedef struct pthreadDebugThreadInfo_tag pthreadDebugThreadInfo_t;
struct pthreadDebugThreadInfo_tag {unsigned __int64 flags;pthreadDebugState_t state;pthreadDebugSubstate_t substate;pthreadDebugThreadKind_t kind;pthreadDebugThreadCreator_t creator;int sched_policy;int base_priority;int cur_priority;pthreadDebugId_t sequence;pthread_t teb;pthread_t *handle;void *stack_base;void *stack_reserve;void *stack_yellow;void *stack_guard;void *stack_hiwater;unsigned __int64 stack_size;pthreadDebugThdBlkInfo_t block;void *(*start)(void *);void *start_arg;void *result;pthreadDebugTimespec_t cpu_time;unsigned __int64 sig_block;unsigned __int64 sig_pend;int locks;int thd_errno;char name[32];};
typedef enum pthreadDebugThreadKind_tag pthreadDebugThreadKind_t;
enum pthreadDebugThreadKind_tag {PTHREAD_DEBUG_THD_KIND_INITIAL = 0x1,PTHREAD_DEBUG_THD_KIND_NORMAL = 0x2,PTHREAD_DEBUG_THD_KIND_NULL = 0x3,PTHREAD_DEBUG_THD_KIND_MGR = 0x4,PTHREAD_DEBUG_THD_KIND_FOREIGN = 0x5,PTHREAD_DEBUG_THD_KIND_EXITHAND = 0x6,};
typedef struct pthreadDebugTimespec_tag *pthreadDebugTimespec_p;
typedef struct pthreadDebugTimespec_tag pthreadDebugTimespec_t;
struct pthreadDebugTimespec_tag {__int64 tv_sec;unsigned __int64 tv_nsec;};
typedef enum _pthreadDebugTraceDetail_tag pthreadDebugTraceDetail_t;
typedef enum _pthreadDebugTraceFmt_tag pthreadDebugTraceFmt_t;
typedef void **pthreadDebugTraceHandle_p;
typedef void *pthreadDebugTraceHandle_t;
typedef struct pthreadDebugTraceHead_tag *pthreadDebugTraceHead_p;
typedef struct pthreadDebugTraceHead_tag pthreadDebugTraceHead_t;
struct pthreadDebugTraceHead_tag {pthreadTraceEvent_t event;pthreadTraceId_t thread;__pthreadLongUint_t sequence;pthreadTraceTimestamp_t timestamp;unsigned __int8 flags;unsigned __int8 frames;unsigned __int8 argc;const unsigned __int8 *argt;const void *argp;const void *const *pc;char name[32];char evtname[32];};
typedef enum _pthreadDebugTraceSetHow_tag pthreadDebugTraceSetHow_t;
typedef struct pthreadDebugTsdInfo_tag *pthreadDebugTsdInfo_p;
typedef struct pthreadDebugTsdInfo_tag pthreadDebugTsdInfo_t;
struct pthreadDebugTsdInfo_tag {unsigned __int64 flags;pthread_key_t key;pthread_key_t *address;__pthreadConstructor_t constructor;union pthreadDebugTsdInfo_tag::$AE84C5277646F29AA95EC4D6695E776B destructor;char name[32];};
union pthreadDebugTsdInfo_tag::$AE84C5277646F29AA95EC4D6695E776B {__pthreadDestructor_t standard;__pthreadExtDestructor_t extended;};
typedef int (*pthreadDebugUnholdRtn_t)(pthreadDebugClient_t, pthreadDebugKId_t);
typedef struct __pthread_t pthreadTeb_t;
typedef union pthreadTraceBlockReason_tag *pthreadTraceBlockReason_p;
typedef union pthreadTraceBlockReason_tag pthreadTraceBlockReason_t;
union pthreadTraceBlockReason_tag {pthreadTraceBlockVariant_t variant;struct pthreadTraceBlockReason_tag::$07652E04A5AC3C755A648682C982ACBC sync;struct pthreadTraceBlockReason_tag::$1D4CEC09D03493C32342AACB32D416C6 wfl;struct pthreadTraceBlockReason_tag::$6624807CB04D8DB075B23CB943AC8289 ims;struct pthreadTraceBlockReason_tag::$E6D944C799806A8B52272FBE52405E39 pfw;struct pthreadTraceBlockReason_tag::$DC0F556B4D458C239A768F5A87EFBCB4 syscall;__pthreadLongUint_t reserved[9];};
struct pthreadTraceBlockReason_tag::$07652E04A5AC3C755A648682C982ACBC {pthreadTraceBlockVariant_t type;int efn;unsigned __int16 *iosb;unsigned __int16 status;};
struct pthreadTraceBlockReason_tag::$1D4CEC09D03493C32342AACB32D416C6 {pthreadTraceBlockVariant_t type;int and;unsigned int efm[2];};
struct pthreadTraceBlockReason_tag::$6624807CB04D8DB075B23CB943AC8289 {pthreadTraceBlockVariant_t type;int padding;__pthreadLongUint_t seq;};
struct pthreadTraceBlockReason_tag::$DC0F556B4D458C239A768F5A87EFBCB4 {pthreadTraceBlockVariant_t type;unsigned __int8 fault;unsigned __int8 habitat;unsigned __int16 number;void *va;};
struct pthreadTraceBlockReason_tag::$E6D944C799806A8B52272FBE52405E39 {pthreadTraceBlockVariant_t type;int collided;void *va;};
typedef enum pthreadTraceBlockVariant_tag pthreadTraceBlockVariant_t;
enum pthreadTraceBlockVariant_tag {PTHREAD_TRACE_BLKVAR_OTHER = 0x0,PTHREAD_TRACE_BLKVAR_UNIX = 0x1,PTHREAD_TRACE_BLKVAR_OPENVMS = 0x2,PTHREAD_TRACE_BLKVAR_NONE = 0x3,PTHREAD_TRACE_BLKVAR_SYNC = 0x4,PTHREAD_TRACE_BLKVAR_WFL = 0x5,PTHREAD_TRACE_BLKVAR_HIBER = 0x6,PTHREAD_TRACE_BLKVAR_IMS = 0x7,PTHREAD_TRACE_BLKVAR_PFW = 0x8,PTHREAD_TRACE_BLKVAR_WAIT = 0x9,PTHREAD_TRACE_BLKVAR_SETAST = 0xA,PTHREAD_TRACE_BLKVAR_SYSCALL = 0xB,};
typedef enum pthreadTraceCancel_tag pthreadTraceCancel_t;
enum pthreadTraceCancel_tag {PTHREAD_TRACE_CANCEL_PENDING = 0x1,PTHREAD_TRACE_CANCEL_STATE = 0x2,PTHREAD_TRACE_CANCEL_SYSTEM = 0x4,PTHREAD_TRACE_CANCEL_TYPE = 0x8,};
typedef enum pthreadTraceClass_tag pthreadTraceClass_t;
enum pthreadTraceClass_tag {PTHREAD_TRACE_CLASS_COND = 0x1,PTHREAD_TRACE_CLASS_ERROR = 0x2,PTHREAD_TRACE_CLASS_KEY = 0x4,PTHREAD_TRACE_CLASS_LOCK = 0x8,PTHREAD_TRACE_CLASS_MUTEX = 0x10,PTHREAD_TRACE_CLASS_ONCE = 0x20,PTHREAD_TRACE_CLASS_SCHED = 0x40,PTHREAD_TRACE_CLASS_THREAD = 0x80,PTHREAD_TRACE_CLASS_USER = 0x100,PTHREAD_TRACE_CLASS_ICOND = 0x10000,PTHREAD_TRACE_CLASS_ILOCK = 0x20000,PTHREAD_TRACE_CLASS_IMUTEX = 0x40000,PTHREAD_TRACE_CLASS_ITHREAD = 0x80000,PTHREAD_TRACE_CLASS_ISCHED = 0x100000,PTHREAD_TRACE_CLASS_IUPCALL = 0x200000,PTHREAD_TRACE_CLASS_IVP = 0x400000,PTHREAD_TRACE_CLASS_IKERNEL = 0x800000,PTHREAD_TRACE_CLASS_IVPC = 0x1000000,PTHREAD_TRACE_CLASS_IMISC = 0x40000000,};
typedef struct pthreadTraceCondInit_tag *pthreadTraceCondInit_p;
typedef struct pthreadTraceCondInit_tag pthreadTraceCondInit_t;
struct pthreadTraceCondInit_tag {unsigned int flags;int padding;pthread_cond_t *address;pthread_condattr_t *attributes;};
typedef enum pthreadTraceCreator_tag pthreadTraceCreator_t;
enum pthreadTraceCreator_tag {PTHREAD_TRACE_CREATOR_NONE = 0x0,PTHREAD_TRACE_CREATOR_POSIX = 0x1,PTHREAD_TRACE_CREATOR_CMA = 0x2,PTHREAD_TRACE_CREATOR_DCE = 0x3,PTHREAD_TRACE_CREATOR_DCEEXC = 0x4,PTHREAD_TRACE_CREATOR_TIS = 0x5,};
typedef enum pthreadTraceDebugInfoFlags_tag pthreadTraceDebugInfoFlags_t;
enum pthreadTraceDebugInfoFlags_tag {PTHREAD_TRACE_INFO_DEBUGGER = 0x1,PTHREAD_TRACE_INFO_MULTIPLE = 0x2,};
typedef struct pthreadTraceDebugInfo_tag *pthreadTraceDebugInfo_p;
typedef struct pthreadTraceDebugInfo_tag pthreadTraceDebugInfo_t;
struct pthreadTraceDebugInfo_tag {__pthreadLongUint_t flags;__pthreadLongUint_t events;};
typedef int (*pthreadTraceEngineFini_t)(pthreadTraceFiniCode_t);
typedef __pthreadLongUint_t (*pthreadTraceEngineHandshake_t)(__pthreadLongUint_t);
typedef int (*pthreadTraceEngineInit_t)(pthreadTraceEnvironment_p, int, char **);
typedef int (*pthreadTraceEngineReinit_t)(pthreadTraceForkCode_t);
typedef int (*pthreadTraceEngineSetClass_t)(int);
typedef int (*pthreadTraceEngineVersion_t)(void);
typedef int (*pthreadTraceEngineWrite_t)(pthreadTraceEvent_t, const char *, pthread_t, int, va_list);
typedef struct pthreadTraceEnvironment_tag *pthreadTraceEnvironment_p;
typedef struct pthreadTraceEnvironment_tag pthreadTraceEnvironment_t;
struct pthreadTraceEnvironment_tag {__pthreadLongUint_t bin_version;char thread_version[32];char os_name[32];char os_release[32];char os_version[32];char hw_name[32];char chip_name[32];int cpu_speed;int cpus_online;int cpus_active;int padding;__pthreadLongUint_t memory;};
typedef struct pthreadTraceEventStruct_tag pthreadTraceEventStruct_t;
struct pthreadTraceEventStruct_tag {unsigned int flags;};
typedef union pthreadTraceEventUnion_tag pthreadTraceEventUnion_t;
union pthreadTraceEventUnion_tag {pthreadTraceEvent_t mask;pthreadTraceEventStruct_t fields;};
typedef int pthreadTraceEvent_t;
typedef enum pthreadTraceFiniCode_tag pthreadTraceFiniCode_t;
enum pthreadTraceFiniCode_tag {PTHREAD_TRACE_FINI_FLUSH = 0x0,PTHREAD_TRACE_FINI_DESIST = 0x1,PTHREAD_TRACE_FINI_TERMINATE = 0x2,};
typedef enum pthreadTraceForkCode_tag pthreadTraceForkCode_t;
enum pthreadTraceForkCode_tag {PTHREAD_TRACE_REINIT_PREPARE = 0x0,PTHREAD_TRACE_REINIT_PARENT = 0x1,PTHREAD_TRACE_REINIT_CHILD = 0x2,};
typedef __pthreadLongInt_t pthreadTraceId_t;
typedef struct pthreadTraceKeyInit_tag *pthreadTraceKeyInit_p;
typedef struct pthreadTraceKeyInit_tag pthreadTraceKeyInit_t;
struct pthreadTraceKeyInit_tag {unsigned int flags;int padding;pthread_key_t *address;__pthreadConstructor_t constructor;union pthreadTraceKeyInit_tag::$AE84C5277646F29AA95EC4D6695E776B destructor;};
union pthreadTraceKeyInit_tag::$AE84C5277646F29AA95EC4D6695E776B {__pthreadDestructor_t standard;__pthreadExtDestructor_t extended;};
typedef enum pthreadTraceLockState_tag pthreadTraceLockState_t;
enum pthreadTraceLockState_tag {PTHREAD_TRACE_LOCK_ALL = 0x1,PTHREAD_TRACE_LOCK_CANCEL = 0x2,PTHREAD_TRACE_LOCK_RESTORE = 0x10,PTHREAD_TRACE_LOCK_NEST = 0x20,};
typedef struct pthreadTraceLogBufEvt_tag *pthreadTraceLogBufEvt_p;
typedef struct pthreadTraceLogBufEvt_tag pthreadTraceLogBufEvt_t;
struct pthreadTraceLogBufEvt_tag {pthreadTraceEvent_t event;unsigned int size;__pthreadLongUint_t sequence;pthreadTraceLogCompress_t compression;unsigned int fullsize;};
typedef enum pthreadTraceLogCompress_tag pthreadTraceLogCompress_t;
enum pthreadTraceLogCompress_tag {PTHREAD_TRACE_LOG_COMPRESS_NONE = 0x0,PTHREAD_TRACE_LOG_COMPRESS_ZIP = 0x1,};
typedef struct pthreadTraceLogFilHdr_tag *pthreadTraceLogFilHdr_p;
typedef struct pthreadTraceLogFilHdr_tag pthreadTraceLogFilHdr_t;
struct pthreadTraceLogFilHdr_tag {char traceMagic[4];char engine[8];char version[2];char reserved[2];};
typedef enum pthreadTraceLogHeadFlags_tag pthreadTraceLogHeadFlags_t;
enum pthreadTraceLogHeadFlags_tag {PTHREAD_TRACE_HEAD_SYNC = 0x1,PTHREAD_TRACE_HEAD_NAME = 0x2,PTHREAD_TRACE_HEAD_MOREFRAMES = 0x4,};
typedef struct pthreadTraceLogHead_tag *pthreadTraceLogHead_p;
typedef struct pthreadTraceLogHead_tag pthreadTraceLogHead_t;
struct pthreadTraceLogHead_tag {pthreadTraceEvent_t event;unsigned int size;pthreadTraceId_t thread;__pthreadLongUint_t sequence;pthreadTraceTimestamp_t timestamp;unsigned __int8 flags;unsigned __int8 frames;unsigned __int8 argc;unsigned __int8 argt[1];};
typedef struct pthreadTraceMutexInit_tag *pthreadTraceMutexInit_p;
typedef struct pthreadTraceMutexInit_tag pthreadTraceMutexInit_t;
struct pthreadTraceMutexInit_tag {unsigned int flags;pthreadTraceMutexType_t type;pthread_mutex_t *address;pthread_mutexattr_t *attributes;pthreadTraceMutexProtocol_t protocol;int prioceiling;int priority;};
typedef enum pthreadTraceMutexProtocol_tag pthreadTraceMutexProtocol_t;
enum pthreadTraceMutexProtocol_tag {PTHREAD_TRACE_MUT_PROTO_NONE = 0x1,PTHREAD_TRACE_MUT_PROTO_PROTECT = 0x2,PTHREAD_TRACE_MUT_PROTO_INHERIT = 0x3,};
typedef enum pthreadTraceMutexType_tag pthreadTraceMutexType_t;
enum pthreadTraceMutexType_tag {PTHREAD_TRACE_MUT_TYPE_NORMAL = 0x1,PTHREAD_TRACE_MUT_TYPE_RECURSIVE = 0x2,PTHREAD_TRACE_MUT_TYPE_ERRORCHECK = 0x3,};
typedef enum pthreadTraceNatExcVariant_tag pthreadTraceNatExcVariant_t;
enum pthreadTraceNatExcVariant_tag {PTHREAD_TRACE_NATEXC_OTHER = 0x0,PTHREAD_TRACE_NATEXC_UNIX = 0x1,PTHREAD_TRACE_NATEXC_OPENVMS = 0x2,};
typedef struct pthreadTraceNatExc_tag *pthreadTraceNatExc_p;
typedef struct pthreadTraceNatExc_tag pthreadTraceNatExc_t;
struct pthreadTraceNatExc_tag {int size;pthreadTraceNatExcVariant_t variant;char os[256];};
typedef enum pthreadTraceObject_tag pthreadTraceObject_t;
enum pthreadTraceObject_tag {PTHREAD_TRACE_OBJ_ANALYZE = 0x41,PTHREAD_TRACE_OBJ_INTERRUPT = 0x42,PTHREAD_TRACE_OBJ_COND = 0x43,PTHREAD_TRACE_OBJ_KERNEL = 0x44,PTHREAD_TRACE_OBJ_EVENT = 0x45,PTHREAD_TRACE_OBJ_EF = 0x46,PTHREAD_TRACE_OBJ_DEBUG = 0x47,PTHREAD_TRACE_OBJ_HIBER = 0x48,PTHREAD_TRACE_OBJ_IMS = 0x49,PTHREAD_TRACE_OBJ_KEY = 0x4B,PTHREAD_TRACE_OBJ_LOCK = 0x4C,PTHREAD_TRACE_OBJ_MUTEX = 0x4D,PTHREAD_TRACE_OBJ_ONCE = 0x4F,PTHREAD_TRACE_OBJ_PRIVATE = 0x50,PTHREAD_TRACE_OBJ_SYSTEM = 0x53,PTHREAD_TRACE_OBJ_THREAD = 0x54,PTHREAD_TRACE_OBJ_USER = 0x55,PTHREAD_TRACE_OBJ_VP = 0x56,PTHREAD_TRACE_OBJ_EXIT = 0x58,PTHREAD_TRACE_OBJ_PGFLT = 0x59,PTHREAD_TRACE_OBJ_notused = 0x0,};
typedef enum pthreadTraceOperation_tag pthreadTraceOperation_t;
enum pthreadTraceOperation_tag {PTHREAD_TRACE_OP_APPLICATION = 0x4941,PTHREAD_TRACE_OP_ASSERT = 0x4153,PTHREAD_TRACE_OP_BLOCK = 0x424C,PTHREAD_TRACE_OP_CANCEL = 0x4341,PTHREAD_TRACE_OP_CATCH = 0x4345,PTHREAD_TRACE_OP_CREATE = 0x494E,PTHREAD_TRACE_OP_DESTROY = 0x4445,PTHREAD_TRACE_OP_DETACH = 0x4454,PTHREAD_TRACE_OP_ENTER = 0x4E54,PTHREAD_TRACE_OP_EXCEPT = 0x4558,PTHREAD_TRACE_OP_EXIT = 0x5854,PTHREAD_TRACE_OP_GETPROP = 0x4750,PTHREAD_TRACE_OP_HEADER = 0x4844,PTHREAD_TRACE_OP_IMAGE = 0x4949,PTHREAD_TRACE_OP_INIT = 0x494E,PTHREAD_TRACE_OP_JOIN = 0x4A4E,PTHREAD_TRACE_OP_KILL = 0x4B49,PTHREAD_TRACE_OP_LOCK = 0x4C4B,PTHREAD_TRACE_OP_NULL = 0x4E4C,PTHREAD_TRACE_OP_ONCE = 0x4F4E,PTHREAD_TRACE_OP_PREEMPT = 0x5052,PTHREAD_TRACE_OP_PROCESS = 0x4950,PTHREAD_TRACE_OP_READY = 0x5244,PTHREAD_TRACE_OP_RESUME = 0x5245,PTHREAD_TRACE_OP_RUN = 0x524E,PTHREAD_TRACE_OP_SETCAN = 0x5343,PTHREAD_TRACE_OP_SETNAME = 0x4E41,PTHREAD_TRACE_OP_SETPROP = 0x5350,PTHREAD_TRACE_OP_SETSCHED = 0x5344,PTHREAD_TRACE_OP_SIGINT = 0x5349,PTHREAD_TRACE_OP_SIGNAL = 0x5347,PTHREAD_TRACE_OP_SIGWAIT = 0x5357,PTHREAD_TRACE_OP_SEARCH = 0x5345,PTHREAD_TRACE_OP_STACKHIGH = 0x5348,PTHREAD_TRACE_OP_START = 0x5354,PTHREAD_TRACE_OP_SUSPEND = 0x5355,PTHREAD_TRACE_OP_SYSTEM = 0x4953,PTHREAD_TRACE_OP_TERM = 0x5452,PTHREAD_TRACE_OP_UNBLOCK = 0x5542,PTHREAD_TRACE_OP_UNLOCK = 0x554C,PTHREAD_TRACE_OP_WAIT = 0x5741,PTHREAD_TRACE_OP_WRITE = 0x5752,PTHREAD_TRACE_OP_YIELD = 0x5945,};
typedef struct pthreadTraceRwlockInit_tag *pthreadTraceRwlockInit_p;
typedef struct pthreadTraceRwlockInit_tag pthreadTraceRwlockInit_t;
struct pthreadTraceRwlockInit_tag {unsigned int flags;int padding;pthread_rwlock_t *address;pthread_rwlockattr_t *attributes;};
typedef enum pthreadTraceStatus_tag pthreadTraceStatus_t;
enum pthreadTraceStatus_tag {PTHREAD_TRACE_STAT_FAIL = 0x1,PTHREAD_TRACE_STAT_MULTIPLE = 0x2,PTHREAD_TRACE_STAT_NONBLOCK = 0x4,PTHREAD_TRACE_STAT_TIMED = 0x8,PTHREAD_TRACE_STAT_USER = 0x10,PTHREAD_TRACE_STAT_PRIVATE = 0x20,PTHREAD_TRACE_STAT_CANCEL = 0x40,PTHREAD_TRACE_STAT_REQUEST = 0x80,};
typedef struct pthreadTraceThreadInit_tag *pthreadTraceThreadInit_p;
typedef struct pthreadTraceThreadInit_tag pthreadTraceThreadInit_t;
struct pthreadTraceThreadInit_tag {unsigned int flags;pthreadTraceThreadKind_t kind;pthread_t teb;pthread_t *handle;pthread_attr_t *attributes;int policy;int priority;void *stack_base;void *stack_reserve;void *stack_yellow;void *stack_guard;__pthreadLongUint_t stack_size;void *(*start)(void *);void *start_arg;__pthreadLongUint_t cpu_mask;pthreadTraceCreator_t creator;unsigned int cancel;};
typedef enum pthreadTraceThreadKind_tag pthreadTraceThreadKind_t;
enum pthreadTraceThreadKind_tag {PTHREAD_TRACE_THD_KIND_INITIAL = 0x1,PTHREAD_TRACE_THD_KIND_NORMAL = 0x2,PTHREAD_TRACE_THD_KIND_NULL = 0x3,PTHREAD_TRACE_THD_KIND_MGR = 0x4,PTHREAD_TRACE_THD_KIND_FOREIGN = 0x5,PTHREAD_TRACE_THD_KIND_EXITHAND = 0x6,};
typedef struct pthreadTraceTimespec_tag *pthreadTraceTimespec_p;
typedef struct pthreadTraceTimespec_tag pthreadTraceTimespec_t;
struct pthreadTraceTimespec_tag {__pthreadLongInt_t tv_sec;__pthreadLongUint_t tv_nsec;};
typedef struct pthreadTraceTimestamp_tag *pthreadTraceTimestamp_p;
typedef struct pthreadTraceTimestamp_tag pthreadTraceTimestamp_t;
struct pthreadTraceTimestamp_tag {pthreadTraceTimespec_t time;int toffset;unsigned int cycles;};
typedef enum pthreadTraceType_tag *pthreadTraceType_p;
typedef enum pthreadTraceType_tag pthreadTraceType_t;
enum pthreadTraceType_tag {PTHREAD_TRACE_TYPE_UNUSED = 0x0,PTHREAD_TRACE_TYPE_CHAR = 0x1,PTHREAD_TRACE_TYPE_BOOL = 0x2,PTHREAD_TRACE_TYPE_SHORT = 0x3,PTHREAD_TRACE_TYPE_INT = 0x4,PTHREAD_TRACE_TYPE_LONG = 0x5,PTHREAD_TRACE_TYPE_THREADID = 0x6,PTHREAD_TRACE_TYPE_MUTEXID = 0x7,PTHREAD_TRACE_TYPE_LOCKID = 0x8,PTHREAD_TRACE_TYPE_CONDID = 0x9,PTHREAD_TRACE_TYPE_POINTER = 0xA,PTHREAD_TRACE_TYPE_ERRNO = 0xB,PTHREAD_TRACE_TYPE_EXCADDR = 0xC,PTHREAD_TRACE_TYPE_EXCSTAT = 0xD,PTHREAD_TRACE_TYPE_THDARG = 0xE,PTHREAD_TRACE_TYPE_STRING = 0xF,PTHREAD_TRACE_TYPE_NAME = 0x10,PTHREAD_TRACE_TYPE_BINARY = 0x11,PTHREAD_TRACE_TYPE_MUTEX = 0x12,PTHREAD_TRACE_TYPE_COND = 0x13,PTHREAD_TRACE_TYPE_THREAD = 0x14,PTHREAD_TRACE_TYPE_KEY = 0x15,PTHREAD_TRACE_TYPE_LOCK = 0x16,PTHREAD_TRACE_TYPE_TIME = 0x17,PTHREAD_TRACE_TYPE_SCHED = 0x18,PTHREAD_TRACE_TYPE_MINIT = 0x19,PTHREAD_TRACE_TYPE_CINIT = 0x1A,PTHREAD_TRACE_TYPE_TINIT = 0x1B,PTHREAD_TRACE_TYPE_KINIT = 0x1C,PTHREAD_TRACE_TYPE_LINIT = 0x1D,PTHREAD_TRACE_TYPE_CANCEL = 0x1E,PTHREAD_TRACE_TYPE_OBJECT = 0x1F,PTHREAD_TRACE_TYPE_OPERATION = 0x20,PTHREAD_TRACE_TYPE_BLOCK_REASON = 0x21,PTHREAD_TRACE_TYPE_ENVIRONMENT = 0x22,PTHREAD_TRACE_TYPE_LABEL = 0x23,PTHREAD_TRACE_TYPE_JAVA_STACK = 0x24,PTHREAD_TRACE_TYPE_VP = 0x25,PTHREAD_TRACE_TYPE_EXCNATIVE = 0x26,PTHREAD_TRACE_TYPE_AID = 0x30,PTHREAD_TRACE_TYPE_MAX = 0x31,};
typedef struct __pthread_attr_t pthread_attr_t;
typedef struct __pthread_cond_t pthread_cond_t;
typedef struct __pthread_condattr_t pthread_condattr_t;
typedef unsigned int pthread_key_t;
typedef struct __pthread_mutex_t pthread_mutex_t;
typedef struct __pthread_mutexattr_t pthread_mutexattr_t;
typedef struct __pthread_once_t pthread_once_t;
typedef struct __pthread_paddock_t pthread_paddock_t;
typedef struct __pthread_paddockattr_t pthread_paddockattr_t;
typedef struct __pthread_rwlock_t pthread_rwlock_t;
typedef struct __pthread_rwlockattr_t pthread_rwlockattr_t;
typedef struct __pthread_t *pthread_t;
typedef signed __int64 ptrdiff_t;
struct ptymsg {unsigned __int8 pt_msg;unsigned __int8 pt_arg;unsigned __int8 pt_aux;unsigned __int8 pt_line;};
struct ptyreply {unsigned __int8 pt_reply;unsigned __int8 pt_error;unsigned __int8 pt_len;unsigned __int8 pt_line;};
struct pwdnm {char *name;char *password;};
typedef __int64 *qaddr_t;
typedef struct $5C63C3EAD6EA7346B4E1C98717DA778E qos_adspecx_t;
typedef struct _quad quad;
typedef struct queue_entry queue_chain_t;
struct queue_entry {struct queue_entry *next;struct queue_entry *prev;};
typedef struct queue_entry *queue_entry_t;
typedef struct queue_entry queue_head_t;
typedef struct queue_entry *queue_t;
struct radix_mask {__int16 rm_b;char rm_unused;u_char rm_flags;struct radix_mask *rm_mklist;caddr_t rm_mask;int rm_refs;};
struct radix_node {struct radix_node::radix_mask *rn_mklist;struct radix_node *rn_p;__int16 rn_b;char rn_bmask;u_char rn_flags;union radix_node::$F04CDB6BED489167FCAB2FB9616A514F rn_u;};
union radix_node::$F04CDB6BED489167FCAB2FB9616A514F {struct radix_node::$F04CDB6BED489167FCAB2FB9616A514F::$99E817D13894714EF3BBC853DE16C44F rn_leaf;struct radix_node::$F04CDB6BED489167FCAB2FB9616A514F::$3D28B538370CD61C9EE90B4E66F060A1 rn_node;};
struct radix_node::$F04CDB6BED489167FCAB2FB9616A514F::$3D28B538370CD61C9EE90B4E66F060A1 {int rn_Off;struct radix_node *rn_L;struct radix_node *rn_R;};
struct radix_node::$F04CDB6BED489167FCAB2FB9616A514F::$99E817D13894714EF3BBC853DE16C44F {caddr_t rn_Key;caddr_t rn_Mask;struct radix_node *rn_Dupedkey;};
struct radix_node_head {struct radix_node_head *rnh_next;struct radix_node *rnh_treetop;int rnh_af;struct radix_node rnh_nodes[3];};
struct random_data {int *fptr;int *rptr;int *state;int rand_type;int rand_deg;int rand_sep;int *end_ptr;};
struct ranlib {union ranlib::$CEF8481A904346521BE8EF5FED8F13AE ran_un;int ran_off;};
union ranlib::$CEF8481A904346521BE8EF5FED8F13AE {int ran_strx;};
typedef struct sockaddr rapi_addr_t;
typedef struct $F2F68253C9272520B7115D75148C961A rapi_adspec_t;
typedef void rapi_event_rtn_t(rapi_sid_t Sid, rapi_eventinfo_t EventType, rapi_styleid_t Style, int ErrorCode, int ErrorValue, rapi_addr_t *ErrorNode, unsigned int ErrorFlags, int FilterSpecNo, rapi_filter_t *FilterSpec_list, int FlowspecNo, rapi_flowspec_t *Flowspec_list, int AdspecNo, rapi_adspec_t *Adspec_list, void *Event_arg);
typedef enum $1DE54D510EDF3035FFC59F913B1ED7DD rapi_eventinfo_t;
typedef struct $5C77EF0AC279F82FD3878286F57E4FF3 rapi_filter_base6_t;
typedef struct $460190B2881C302C92432D96CF83F9D2 rapi_filter_base_t;
typedef struct $285F0FADE91E5A658C218520A75CA52C rapi_filter_gpi6_t;
typedef struct $943AB0B592E650DAB46B44D9AD05F1F0 rapi_filter_gpi_t;
typedef struct $5B942A0C1E0725CBDF5A67D0E6C433D7 rapi_filter_t;
typedef struct $F74CA432E7D03616834F5337BAB60276 rapi_flowspec_t;
typedef enum $F06844F2AC23AB95160E7EDF77DFD72F rapi_format_t;
typedef struct $EB2AB6985A4B3B646A04BAA9FAF8BA6F rapi_hdr_t;
typedef struct $251130EF0ACC65274B801D43EFB900B9 rapi_policy_name_string_t;
typedef struct $E3CEA5E00043272B4ACE9DC01AD27A77 rapi_policy_t;
typedef struct $FA6EA66DC9648EA143E0BD3CB188364C rapi_qos_Tspec_body;
typedef struct $070EDC20FCF7E4426EF727EAB9741C68 rapi_qos_flowspecx_t;
typedef enum $F32EAA3B37BA8577B56522F9C3DD088B rapi_qos_service_t;
typedef struct $94A7408767E31F393C3FA75946CED60F rapi_qos_tspecx_t;
typedef unsigned int rapi_sid_t;
typedef enum $82A9E3393572D16D504BD2822273F634 rapi_styleid_t;
typedef void rapi_stylex_t;
typedef struct $988B929A856EDB090BD4DB7B25868BD7 rapi_tspec_t;
struct rate {__int64 targetvalue;__int64 minacceptvalue;};
struct rawarc {unsigned __int64 raw_frompc;unsigned __int64 raw_selfpc;__int64 raw_count;};
struct rawcb {struct rawcb *rcb_next;struct rawcb *rcb_prev;struct socket *rcb_socket;struct sockaddr *rcb_faddr;struct sockaddr *rcb_laddr;struct sockproto rcb_proto;};
struct read3data {struct vnode *data_vp;struct iovec iov[9];struct buf *data_bp[9];u_int size;};
struct read_capacity {u_char max_lba_3;u_char max_lba_2;u_char max_lba_1;u_char max_lba_0;u_char block_len_3;u_char block_len_2;u_char block_len_1;u_char block_len_0;};
struct read_defect_params {u_char rdp_format;u_short rdp_alclen;u_char *rdp_addr;};
struct reassign_params {struct form3_defect_list_header rp_header;u_char rp_lbn3;u_char rp_lbn2;u_char rp_lbn1;u_char rp_lbn0;};
typedef u_int32_t recno_t;
struct regex_data {char expbuf[512];char *braslist[9];char *braelist[9];char circf;};
typedef __regex_t regex_t;
struct regexp_data {char *loc1;char *loc2;char *locs;int circf;};
typedef __regmatch_t regmatch_t;
typedef off_t regoff_t;
enum reject_stat {RPC_MISMATCH = 0x0,AUTH_ERROR = 0x1,};
struct rejected_reply {enum reject_stat rj_stat;union rejected_reply::$A9791A3C11977E00C869649B207DB354 ru;};
union rejected_reply::$A9791A3C11977E00C869649B207DB354 {struct rejected_reply::$A9791A3C11977E00C869649B207DB354::$7876EA82F4E6B7A53E0A8033DA8F05A4 RJ_versions;enum auth_stat RJ_why;};
struct rejected_reply::$A9791A3C11977E00C869649B207DB354::$7876EA82F4E6B7A53E0A8033DA8F05A4 {u_int low;u_int high;};
struct reloc {coff_addr r_vaddr;coff_uint r_symndx;unsigned int r_size;};
struct reply_body {enum reply_stat rp_stat;union reply_body::$3176F759A4E4A0B30BE44C0FA3C218CC ru;};
union reply_body::$3176F759A4E4A0B30BE44C0FA3C218CC {struct accepted_reply RP_ar;struct rejected_reply RP_dr;};
enum reply_stat {MSG_ACCEPTED = 0x0,MSG_DENIED = 0x1,};
struct reqvalue {struct rate called;struct rate calling;};
enum res {stat_succ = 0x0,stat_fail = 0x1,};
struct res_handle {char *file_there;int result;};
typedef res_sendhookact (*res_send_qhook)(struct sockaddr_in *const *ns, const u_char **query, int *querylen, u_char *ans, int anssiz, int *resplen);
typedef res_sendhookact (*res_send_rhook)(const struct sockaddr_in *ns, const u_char *query, int querylen, u_char *ans, int anssiz, int *resplen);
typedef enum $3EACBFB1F6A69D9CA6E99CE3BA7C8589 res_sendhookact;
struct res_sym {int number;char *name;char *humanname;};
struct resource_limits {int cpu_target_percent;union resource_limits::$A65B6DDEA0BF9B2DC9733A4AF8920627 cpu;int mem_target_percent;union resource_limits::$A65B6DDEA0BF9B2DC9733A4AF8920627 mem;int io_target_percent;union resource_limits::$A65B6DDEA0BF9B2DC9733A4AF8920627 io;int net_target_percent;union resource_limits::$A65B6DDEA0BF9B2DC9733A4AF8920627 net;__int64 future_expansion[10];};
union resource_limits::$A65B6DDEA0BF9B2DC9733A4AF8920627 {int actual_percent;int available_percent;};
struct rex_result {int rlt_stat;char *rlt_message;};
struct rex_start {char **rst_cmd;char *rst_host;char *rst_fsname;char *rst_dirwithin;char **rst_env;u_short rst_port0;u_short rst_port1;u_short rst_port2;u_long rst_flags;};
struct rex_ttymode {struct sgttyb basic;struct tchars more;struct ltchars yetmore;u_long andmore;};
struct rip {u_char rip_cmd;u_char rip_vers;u_char rip_res1[2];union rip::$AFFF135AAACB9FA320A59FAF8451ECA8 ripun;};
union rip::$AFFF135AAACB9FA320A59FAF8451ECA8 {struct netinfo ru_nets[1];char ru_tracefile[1];};
typedef unsigned __int64 rlim_t;
struct rlimit {rlim_t rlim_cur;rlim_t rlim_max;};
struct rmtcallargs {u_int prog;u_int vers;u_int proc;u_int arglen;caddr_t args_ptr;xdrproc_t xdr_args;};
struct rmtcallres {u_int *port_ptr;u_int resultslen;caddr_t results_ptr;xdrproc_t xdr_results;};
struct route {struct rtentry *ro_rt;struct sockaddr ro_dst;};
struct route_cb {int count[35];};
struct router_info {struct ifnet *ifp;int type;int time;struct router_info *next;};
struct rpc_createerr {enum clnt_stat cf_stat;struct rpc_err cf_error;};
struct rpc_err {enum clnt_stat re_status;union rpc_err::$2D0906B0591D2A742C52B73BB901DA12 ru;};
union rpc_err::$2D0906B0591D2A742C52B73BB901DA12 {int RE_errno;enum auth_stat RE_why;struct rpc_err::$2D0906B0591D2A742C52B73BB901DA12::$7876EA82F4E6B7A53E0A8033DA8F05A4 RE_vers;struct rpc_err::$2D0906B0591D2A742C52B73BB901DA12::$BF7AC7AAFAE2A9D4F26CD1E6B816F6B2 RE_lb;};
struct rpc_err::$2D0906B0591D2A742C52B73BB901DA12::$7876EA82F4E6B7A53E0A8033DA8F05A4 {u_int low;u_int high;};
struct rpc_err::$2D0906B0591D2A742C52B73BB901DA12::$BF7AC7AAFAE2A9D4F26CD1E6B816F6B2 {int s1;int s2;};
struct rpc_msg {u_int rm_xid;enum msg_type rm_direction;union rpc_msg::$7D774571B4FAB0E4BBD540829030FA52 ru;};
union rpc_msg::$7D774571B4FAB0E4BBD540829030FA52 {struct call_body RM_cmb;struct reply_body RM_rmb;};
struct rpc_timers {u_short rt_srtt;u_short rt_deviate;u_int rt_rtxcur;};
struct rpcent {char *r_name;char **r_aliases;int r_number;};
struct rquota {int rq_bsize;int rq_active;u_int rq_bhardlimit;u_int rq_bsoftlimit;u_int rq_curblocks;u_int rq_fhardlimit;u_int rq_fsoftlimit;u_int rq_curfiles;u_int rq_btimeleft;u_int rq_ftimeleft;};
struct rrip_cl {struct cd_suf_header hdr;unsigned __int8 cl_child_lbn_lsb[4];unsigned __int8 cl_child_lbn_msb[4];};
struct rrip_map_arg {int major;int minor;char *path;};
struct rrip_map_idx_arg {int major;int minor;char *path;int index;int pathlen;};
struct rrip_nm {struct cd_suf_header hdr;unsigned __int8 nm_flags;unsigned __int8 nm_component[1];};
struct rrip_pl {struct cd_suf_header hdr;unsigned __int8 pl_parent_lbn_lsb[4];unsigned __int8 pl_parent_lbn_msb[4];};
struct rrip_pn {struct cd_suf_header hdr;unsigned __int8 pn_dev_t_high_lsb[4];unsigned __int8 pn_dev_t_high_msb[4];unsigned __int8 pn_dev_t_low_lsb[4];unsigned __int8 pn_dev_t_low_msb[4];};
struct rrip_px {struct cd_suf_header hdr;unsigned __int8 px_mode_lsb[4];unsigned __int8 px_mode_msb[4];unsigned __int8 px_nlink_lsb[4];unsigned __int8 px_nlink_msb[4];unsigned __int8 px_uid_lsb[4];unsigned __int8 px_uid_msb[4];unsigned __int8 px_gid_lsb[4];unsigned __int8 px_gid_msb[4];};
struct rrip_re {struct cd_suf_header hdr;};
struct rrip_rr {struct cd_suf_header hdr;unsigned __int8 rr_present;};
struct rrip_sl {struct cd_suf_header hdr;unsigned __int8 sl_flags;unsigned __int8 sl_components[1];};
struct rrip_sl_component {unsigned __int8 slc_flags;unsigned __int8 slc_len;unsigned __int8 slc_component[1];};
struct rrip_suf_arg {int fsec;unsigned int sig_index;char *buf;char *path;int buflen;char sig[2];char sigok;};
struct rrip_tf {struct cd_suf_header hdr;unsigned __int8 tf_flags;unsigned __int8 tf_timestamps[1];};
struct rt_metrics {u_int rmx_locks;u_int rmx_mtu;u_int rmx_hopcount;u_int rmx_expire;u_int rmx_recvpipe;u_int rmx_sendpipe;u_int rmx_ssthresh;u_int rmx_rtt;u_int rmx_rttvar;};
struct rt_msghdr {u_short rtm_msglen;u_char rtm_version;u_char rtm_type;u_short rtm_index;int rtm_pid;int rtm_addrs;int rtm_seq;int rtm_errno;int rtm_flags;int rtm_use;u_int rtm_inits;struct rt_metrics rtm_rmx;};
typedef unsigned __int8 rt_sched_ctrl_t;
typedef int *rt_sched_hist_counts_t[50];
struct rt_sched_hist_entry {unsigned __int8 event;unsigned __int8 policy;unsigned __int8 duplicates;unsigned __int8 d3;int th;int d1;int d2;};
typedef struct rt_sched_hist_entry *rt_sched_hist_entry_t;
struct rtentry {struct radix_node rt_nodes[2];struct sockaddr *rt_gateway;int rt_flags;int rt_refcnt;u_long rt_use;struct ifnet *rt_ifp;struct ifaddr *rt_ifa;struct sockaddr *rt_genmask;caddr_t rt_llinfo;struct rt_metrics rt_rmx;__int16 rt_idle;__int16 rt_aliasid;struct rtentry *rt_gwroute;u_int rt_precedence;u_long rt_reserved[4];};
struct rtgetreq {int flags;int forw_ifc;int exp_inc_ifc;int prefix;union rtgetreq::$3CA32649ADB474C6DB3DE62445EA0A64 rtget_u;};
union rtgetreq::$3CA32649ADB474C6DB3DE62445EA0A64 {struct sockaddr dst;struct ip4_rtgetreq ip4;struct ip6_rtgetreq ip6;};
typedef struct $3C2DEEF62D6941960EED4B235F12B9FE rtinfo_t;
typedef struct psx4_mycsem rtlock_t;
typedef struct $2DC198841459E87F3FD1246E7A993624 rtparms_t;
struct rtstat {u_long time;u_long rts_badredirect;u_long rts_dynamic;u_long rts_newgateway;u_long rts_unreach;u_long rts_wildcard;};
struct run_dump_next_included_pages {u_long n;__int64 pfn;__int64 spfn;};
struct run_dumpinfo {int dumpsize;__int64 physmem;u_long bootedfile;u_long panicstr;u_long nopanicmsg;__int64 realdumpsize;};
struct runtime_pdr {coff_addr adr;coff_uint regmask;coff_int regoffset;coff_uint fregmask;coff_int fregoffset;coff_int frameoffset;coff_ushort framereg;coff_ushort pcreg;coff_int irpss;coff_uint reserved;struct exception_info *exception_info;};
struct rusage {struct timeval ru_utime;struct timeval ru_stime;__int64 ru_maxrss;__int64 ru_ixrss;__int64 ru_idrss;__int64 ru_isrss;__int64 ru_minflt;__int64 ru_majflt;__int64 ru_nswap;__int64 ru_inblock;__int64 ru_oublock;__int64 ru_msgsnd;__int64 ru_msgrcv;__int64 ru_nsignals;__int64 ru_nvcsw;__int64 ru_nivcsw;};
struct rusage_dev {struct rusage ru_rusage;dev_t ru_dev;};
struct rws_lock {simple_lock_data_t rws_writer_mutex[8];simple_lock_data_t rws_reader_mutex[1][8];};
typedef struct rws_lock *rws_lock_t;
union rzdisk_params {struct mode_sel_sns_params rp_ms;struct reassign_params rp_rb;struct format_params rp_fp;struct read_defect_params rp_rd;struct verify_params rp_vp;struct diagnostic_params rp_dp;};
struct s5dinode {ushort di_mode;__int16 di_nlink;ushort di_uid;ushort di_gid;__int64 di_size;char di_addr[40];time_t di_atime;time_t di_mtime;time_t di_ctime;};
struct s5direct {s5ino_t d_ino;char d_name[14];};
struct s5dirtemp {s5ino_t dot_ino;char dot_name[14];s5ino_t dotdot_ino;char dotdot_name[14];};
struct s5fs_args {char *fspec;int exflags;uid_t exroot;};
typedef ushort s5ino_t;
struct s_head {__int64 t_len;__int64 st_len;};
typedef unsigned __int8 sa_family_t;
typedef struct _sad_blk sad_blk;
typedef struct _sad_hdr sad_hdr;
struct sattr3 {set_mode3 mode;set_uid3 uid;set_gid3 gid;set_size3 size;set_atime atime;set_mtime mtime;};
struct sattrguard3 {int check;nfstime3 obj_ctime;};
typedef struct lock *sb_lock_t;
struct sched_param {int sched_priority;};
struct scnhdr {char s_name[8];coff_addr s_paddr;coff_addr s_vaddr;coff_long s_size;coff_off s_scnptr;coff_off s_relptr;coff_ulong s_lnnoptr;coff_ushort s_nreloc;coff_ushort s_nlnno;coff_uint s_flags;};
struct screen_data {struct screen_data_hdr sd_hdr;char sd_data[88];int sd_ingrp;int sd_outgrp;};
struct screen_data_hdr {__int16 sdh_count;__int16 sdh_dlen;u_int sdh_xid;struct timeval sdh_arrival;__int16 sdh_family;int sdh_action;};
struct screen_stats {u_long ss_packets;u_long ss_nobuffer;u_long ss_accept;u_long ss_reject;u_long ss_badsync;u_long ss_stale;};
typedef struct $01476E97539DE0A8F6B3890F5B84B008 sec_cache_t;
typedef ulong_t sec_eventvec_t[1];
typedef struct $BEAFA497989C37845B506D0913AA8541 secinfo_t;
struct sem {ushort_t semval;pid_t sempid;ushort_t semncnt;ushort_t semzcnt;};
typedef psx4_key_t sem_t;
struct sem_undo {struct sem_undo *un_nextp;__int16 un_cnt;struct sem_undo::undo_entry *un_entp;};
struct sembuf {ushort_t sem_num;__int16 sem_op;__int16 sem_flg;};
struct semid_ds {struct ipc_perm sem_perm;struct sem *sem_base;ushort_t sem_nsems;time_t sem_otime;time_t sem_ctime;};
struct seminfo {int semmni;int semmsl;int semopm;int semume;int semvmx;int semaem;__int64 sema;};
struct servent {char *s_name;char **s_aliases;int s_port;char *s_proto;};
struct servent_data {FILE *serv_fp;char line[1024];char *serv_aliases[35];int _serv_stayopen;int svc_getservflag;};
struct session {simple_lock_data_t s_lock;int s_count;pid_t s_id;struct session::pgrp *s_pgrps;struct vnode *s_ttyvp;simple_lock_data_t s_fpgrp_lock;struct session::pgrp **s_fpgrpp;struct proc *s_leader;};
struct set_atime {time_how set_it;nfstime3 atime;};
struct set_desc {struct set_desc *next;char setname[16];lock_data_t lock;FIND_INFO *find_list;CAT_REL *category;HIER_REL *hierarchy;MIB_REL *mib_rel;simple_lock_data_t slock;MEM_DESC *member;__int64 member_id;caddr_t hash;MEM_DESC *mem_list;int (*set_support_rtn)(KSM_REQBUF_HDR *reqbuf, caddr_t indata, size_t inlen, caddr_t outdata, size_t outlen);int version;int reserved[7];};
struct set_gid3 {int set_it;gid3 gid;};
struct set_mode3 {int set_it;mode3 mode;};
struct set_mtime {time_how set_it;nfstime3 mtime;};
struct set_size3 {int set_it;size3 size;};
struct set_uid3 {int set_it;uid3 uid;};
struct setargs {char *path;__int64 follow;__int64 nbytes;char *buf;};
struct setioinfo {int po_version;int po_flags;union setioinfo::$BAA48B44D872A69EDC7C8DB3F1EB464F po_un;};
union setioinfo::$BAA48B44D872A69EDC7C8DB3F1EB464F {struct setioinfo::$BAA48B44D872A69EDC7C8DB3F1EB464F::$AC1D6230F559F4E4B368F0FDB264D724 po_v0;char po_reserved[250];};
struct setioinfo::$BAA48B44D872A69EDC7C8DB3F1EB464F::$AC1D6230F559F4E4B368F0FDB264D724 {struct partition po_part;};
typedef struct setioinfo setioinfo_t;
struct sfbp_curs_info {volatile unsigned int *xy_reg;volatile unsigned int *valid;__int16 fb_xoffset;__int16 fb_yoffset;u_int unit;char on_off;char dirty_cursor;char dirty_cursormap;__int16 x_hot;__int16 y_hot;__int16 last_row;ws_color_cell cursor_fg;ws_color_cell cursor_bg;void (*enable_interrupt)();unsigned int bits[256];};
struct sg_entry {bus_addr_t ba;u_long bc;};
typedef struct sg_entry *sg_entry_t;
struct sglist {sg_entry_t sgp;int val_ents;int num_ents;int index;int flags;struct sglist *next;};
typedef struct sglist *sglist_t;
struct sgttyb {char sg_ispeed;char sg_ospeed;char sg_erase;char sg_kill;__int16 sg_flags;};
typedef ulong_t shmatt_t;
struct shmid_ds {struct ipc_perm shm_perm;time_t shm_atime;time_t shm_dtime;time_t shm_ctime;int shm_segsz;pid_t shm_lpid;pid_t shm_cpid;shmatt_t shm_nattch;};
struct shminfo {size_t shmmax;size_t shmmin;int shmmni;int shmseg;};
struct short_hand_verf {struct opaque_auth new_cred;};
typedef int sia_collect_func_t(int, int, unsigned __int8 *, int, prompt_t *);
struct sia_context {FILE *$15;union sia_context::$29AD5A31E052551A2E2BCD30490CC892 value;int pkgind;unsigned int buflen;char *buffer;void *rsrv1;void *rsrv2;struct mech_contexts mech_contexts[4];};
union sia_context::$29AD5A31E052551A2E2BCD30490CC892 {struct group *group;struct passwd *pass;};
union sia_get_params {group_params group;passwd_params passwd;struct sia_get_params::$26772B3E296688560175D9CD1FEAD6E9 context;};
struct sia_get_params::$26772B3E296688560175D9CD1FEAD6E9 {void *ct_ent_id;void *ct_nam;};
struct sia_matrix_ent {char *libnam;char *pkgnam;int (*$15)();};
struct sia_matrix_t {time_t matrix_date;sia_matrix_ent **matrix_ent;struct stat matstat;};
struct siaentity {char *name;char *password;char *acctname;char **argv;int argc;uid_t ouid;char *hostname;char *tty;int colinput;int error;int authcount;int authtype;struct passwd *pwd;char *gssapi;SIAENTITYTOO *siaetoo;int *mech[4];};
struct siaentitytoo {unsigned __int8 *orig_amask;int orig_acntl;};
typedef int sig_atomic_t;
typedef void (*sig_t)(int, void (*)(int));
struct sigaction {union sigaction::$F3BB312F2BBEFDB5AAD6303F1228BECD _sa_un;sigset_t sa_mask;int sa_flags;int sa_signo;};
union sigaction::$F3BB312F2BBEFDB5AAD6303F1228BECD {void (*_handler)(int);void (*_sigaction)(int, siginfo_t *, void *);};
struct sigaltstack {caddr_t ss_sp;int ss_flags;size_t ss_size;};
struct sigcontext {__int64 sc_onstack;__int64 sc_mask;__int64 sc_pc;__int64 sc_ps;__int64 sc_regs[32];__int64 sc_ownedfp;__int64 sc_fpregs[32];unsigned __int64 sc_fpcr;unsigned __int64 sc_fp_control;__int64 sc_reserved1;int sc_kreserved1;int sc_kreserved2;size_t sc_ssize;caddr_t sc_sbase;unsigned __int64 sc_traparg_a0;unsigned __int64 sc_traparg_a1;unsigned __int64 sc_traparg_a2;unsigned __int64 sc_fp_trap_pc;unsigned __int64 sc_fp_trigger_sum;unsigned __int64 sc_fp_trigger_inst;};
struct sigevent {sigevent_event_t _sigev_sigevent;union sigevent::$B8B8E7E80CBF134DC9679630431D8E7E _sigev_un;};
union sigevent::$B8B8E7E80CBF134DC9679630431D8E7E {int _sigev[12];struct sigevent::$B8B8E7E80CBF134DC9679630431D8E7E::$118F6323188A8723B7F85FF33958440C _sigev_un_s;};
struct sigevent::$B8B8E7E80CBF134DC9679630431D8E7E::$118F6323188A8723B7F85FF33958440C {void (*_sigev_notify_function)(sigval_t);pthread_attr_t *_sigev_notify_attributes;};
struct sigevent_event {union sigval _sigev_value;int _sigev_signo;int _sigev_notify;};
typedef struct sigevent_event sigevent_event_t;
typedef struct sigevent sigevent_t;
struct siginfo {int si_signo;int si_errno;int si_code;union siginfo::$FC88E65EFF13D9A250F2FE7CD37A99BE _sifields;};
struct siginfo::$::$::$D16BC7DAAE05F09BB679EF760AD948F6::$0D4B74555FB291702116CC98437F2805 {int _status;clock_t _utime;clock_t _stime;};
struct siginfo::$::$::$D16BC7DAAE05F09BB679EF760AD948F6::$B529103EEC9DD7B181AB3EFFED8C6125 {uid_t _uid;};
struct siginfo::$::$F6125269A89CCEA4A18CF13BDD535681::$4D3FD1F5E48C2FD16BCABCDD8B69AC4A {sigval_t _sigval;};
union siginfo::$::$F6125269A89CCEA4A18CF13BDD535681::$D16BC7DAAE05F09BB679EF760AD948F6 {struct siginfo::$::$::$D16BC7DAAE05F09BB679EF760AD948F6::$B529103EEC9DD7B181AB3EFFED8C6125 _kill;struct siginfo::$::$::$D16BC7DAAE05F09BB679EF760AD948F6::$0D4B74555FB291702116CC98437F2805 _sigchld;};
union siginfo::$FC88E65EFF13D9A250F2FE7CD37A99BE {int _sipad[28];struct siginfo::$FC88E65EFF13D9A250F2FE7CD37A99BE::$F6125269A89CCEA4A18CF13BDD535681 _sigproc;struct siginfo::$FC88E65EFF13D9A250F2FE7CD37A99BE::$E93096404FD99BF5CA773B49D4AB2447 _sigfault;struct siginfo::$FC88E65EFF13D9A250F2FE7CD37A99BE::$B9B6628F51B16DCE593F87C04ABDB9F7 _sigpoll;struct siginfo::$FC88E65EFF13D9A250F2FE7CD37A99BE::$A8FC0FC992FA4F23068234B22FDA49F3 _siganon;};
struct siginfo::$FC88E65EFF13D9A250F2FE7CD37A99BE::$A8FC0FC992FA4F23068234B22FDA49F3 {sigval_t _siganonval;};
struct siginfo::$FC88E65EFF13D9A250F2FE7CD37A99BE::$B9B6628F51B16DCE593F87C04ABDB9F7 {__int64 _band;int _fd;};
struct siginfo::$FC88E65EFF13D9A250F2FE7CD37A99BE::$E93096404FD99BF5CA773B49D4AB2447 {caddr_t _addr;};
struct siginfo::$FC88E65EFF13D9A250F2FE7CD37A99BE::$F6125269A89CCEA4A18CF13BDD535681 {pid_t _pid;union siginfo::$::$F6125269A89CCEA4A18CF13BDD535681::$D16BC7DAAE05F09BB679EF760AD948F6 _pinfo;struct siginfo::$::$F6125269A89CCEA4A18CF13BDD535681::$4D3FD1F5E48C2FD16BCABCDD8B69AC4A _sigrt;};
typedef struct siginfo siginfo_t;
typedef __int64 sigjmp_buf[84];
typedef unsigned __int64 sigset_t;
struct sigstack {char *ss_sp;int ss_onstack;};
union sigval {int sival_int;void *sival_ptr;};
typedef union sigval sigval_t;
struct sigvec {void (*sv_handler)(int);int sv_mask;int sv_flags;};
typedef unsigned __int64 simple_lock_data_t;
typedef unsigned __int64 *simple_lock_t;
struct sioc_sg_req {struct in_addr src;struct in_addr grp;u_int pktcnt;u_int bytecnt;u_int wrong_if;};
struct sioc_vif_req {vifi_t vifi;u_int icount;u_int ocount;u_int ibytes;u_int obytes;};
typedef uint64 size3;
typedef unsigned __int64 size_t;
typedef char slab_t[12];
struct slcompress {struct cstate *last_cs;u_char last_recv;u_char last_xmit;u_short flags;int sls_packets;int sls_compressed;int sls_searches;int sls_misses;int sls_uncompressedin;int sls_compressedin;int sls_errorin;int sls_tossed;struct cstate tstate[16];struct cstate rstate[16];};
struct slock {unsigned __int64 sl_data;};
struct slock_debug {simple_lock_t sd_addr[32];unsigned __int64 sd_time[32];};
typedef struct $101ED56796A31C5C092EFC61C0F81522 smCloseConnectionMsg;
typedef struct $101ED56796A31C5C092EFC61C0F81522 smDeletePropertiesMsg;
typedef struct $101ED56796A31C5C092EFC61C0F81522 smDieMsg;
typedef struct $101ED56796A31C5C092EFC61C0F81522 smGetPropertiesMsg;
typedef struct $6C0DBE15692AB0301FA41806B271F811 smInteractDoneMsg;
typedef struct $101ED56796A31C5C092EFC61C0F81522 smInteractMsg;
typedef struct $FD24C124EC918F75BF8194FC7995E204 smInteractRequestMsg;
typedef struct $101ED56796A31C5C092EFC61C0F81522 smPropertiesReplyMsg;
typedef struct $101ED56796A31C5C092EFC61C0F81522 smRegisterClientMsg;
typedef struct $101ED56796A31C5C092EFC61C0F81522 smRegisterClientReplyMsg;
typedef struct $101ED56796A31C5C092EFC61C0F81522 smSaveCompleteMsg;
typedef struct $B8BE427FC8694D49638950F9AF5F05C2 smSaveYourselfDoneMsg;
typedef struct $0A132E968BCCC0DBF60AFD92D1AD913D smSaveYourselfMsg;
typedef struct $101ED56796A31C5C092EFC61C0F81522 smSaveYourselfPhase2Msg;
typedef struct $101ED56796A31C5C092EFC61C0F81522 smSaveYourselfPhase2RequestMsg;
typedef struct $05D4C060AE1EF11C848698CCD73DFF37 smSaveYourselfRequestMsg;
typedef struct $101ED56796A31C5C092EFC61C0F81522 smSetPropertiesMsg;
typedef struct $101ED56796A31C5C092EFC61C0F81522 smShutdownCancelledMsg;
struct sm_name {char *mon_name;};
struct sm_stat {int state;};
struct sm_stat_res {res res_stat;int state;};
typedef struct _smtDisplay smtDisplay;
typedef struct _smtDisplay *smtDisplayPtr;
struct smtmib_mac {u_int mac_frame_status_functions;u_int mac_t_max_capability;u_int mac_tvx_capability;u_int mac_available_paths;u_int mac_current_path;u_char mac_upstream_nbr[8];u_char mac_downstream_nbr[8];u_char mac_old_upstream_nbr[8];u_char mac_old_downstream_nbr[8];u_int mac_dup_address_test;u_int mac_requested_paths;u_int mac_downstream_port_type;u_char mac_smt_address[8];u_int mac_t_req;u_int mac_t_neg;u_int mac_t_max;u_int mac_tvx_value;u_int mac_frame_error_threshold;u_int mac_frame_error_ratio;u_int mac_rmt_state;u_int mac_da_flag;u_int mac_unda_flag;u_int mac_frame_error_flag;u_int mac_ma_unitdata_available;u_int mac_hw_present;u_int mac_ma_unitdata_enable;};
struct smtmib_path {u_char path_configuration[32];u_int path_tvx_lower_bound;u_int path_t_max_lower_bound;u_int path_max_t_req;};
struct smtmib_port {u_int port_my_type[2];u_int port_neighbor_type[2];u_int port_connection_policies[2];u_int port_mac_indicated[2];u_int port_current_path[2];u_int port_requested_paths[2];u_int port_mac_placement[2];u_int port_available_paths[2];u_int port_pmd_class[2];u_int port_connection_capabilities[2];u_int port_bs_flag[2];u_int port_ler_estimate[2];u_int port_ler_cutoff[2];u_int port_ler_alarm[2];u_int port_connect_state[2];u_int port_pcm_state[2];u_int port_pc_withhold[2];u_int port_ler_flag[2];u_int port_hardware_present[2];};
struct smtmib_smt {u_char smt_station_id[8];u_int smt_op_version_id;u_int smt_hi_version_id;u_int smt_lo_version_id;u_char smt_user_data[32];u_int smt_mib_version_id;u_int smt_mac_ct;u_int smt_non_master_ct;u_int smt_master_ct;u_int smt_available_paths;u_int smt_config_capabilities;u_int smt_config_policy;u_int smt_connection_policy;u_int smt_t_notify;u_int smt_stat_rpt_policy;u_int smt_trace_max_expiration;u_int smt_bypass_present;u_int smt_ecm_state;u_int smt_cf_state;u_int smt_remote_disconnect_flag;u_int smt_station_status;u_int smt_peer_wrap_flag;u_long smt_msg_time_stamp;u_long smt_transition_time_stamp;};
struct sockaddr {unsigned __int16 sa_family;char sa_data[14];};
struct sockaddr_dl {u_char sdl_len;u_char sdl_family;u_short sdl_index;u_char sdl_type;u_char sdl_nlen;u_char sdl_alen;u_char sdl_slen;char sdl_data[16];};
struct sockaddr_dn {unsigned __int8 sdn_len;unsigned __int8 sdn_family;unsigned __int8 sdn_flags;unsigned __int8 sdn_objnum;unsigned __int16 sdn_objnamel;char sdn_objname[16];struct dn_naddr sdn_add;};
struct sockaddr_in {unsigned __int16 sin_family;unsigned __int16 sin_port;struct in_addr sin_addr;char sin_zero[8];};
struct sockaddr_in6 {u_short sin6_family;in_port_t sin6_port;uint32_t sin6_flowinfo;struct in6_addr sin6_addr;uint32_t sin6_scope_id;};
struct sockaddr_ns {u_char sns_len;u_char sns_family;struct ns_addr sns_addr;char sns_zero[2];};
struct sockaddr_storage {unsigned __int16 __ss_family;char __ss_pad1[6];ulong_t __ss_align;char __ss_pad2[112];};
struct sockaddr_un {unsigned __int8 sun_len;sa_family_t sun_family;char sun_path[104];};
struct socket {int so_type;int so_options;__int16 so_linger;__int16 so_timeo;int so_state;caddr_t so_pcb;struct socket::protosw *so_proto;struct socket::socklocks *so_lock;int pad_a[6];struct socket *so_head;struct socket *so_q0;struct socket *so_q;struct socket *so_dq;unsigned __int16 so_q0len;unsigned __int16 so_qlen;unsigned __int16 so_qlimit;__int16 so_dqlen;int so_error;int so_special;pid_t so_pgid;u_int so_oobmark;int pad_b[1];struct socket::sockbuf so_rcv;struct socket::sockbuf so_snd;struct socket *so_q0_prev;struct socket *so_q_prev;int pad_e[4];};
struct socket::sockbuf {u_int sb_cc;u_int sb_hiwat;u_int sb_mbcnt;u_int sb_mbmax;u_int sb_dbcnt;u_int sb_dbmax;int sb_lowat;int sb_sel;struct mbuf *sb_mb;struct socket::sockbuf::sbselque sb_selq;int sb_flags;int pad_c[1];struct timeval sb_timeo;void (*sb_wakeup)();caddr_t sb_wakearg;sb_lock_t sb_lock;int pad_d[8];};
struct socket::sockbuf::sbselque {struct socket::sockbuf::sbselque *next;struct socket::sockbuf::sbselque *prev;};
struct sockproto {unsigned __int16 sp_family;unsigned __int16 sp_protocol;};
typedef enum $BF80F9984B1E4861D7CC4C2F234406C0 spec_action;
struct spec_trap_args {u_long trap_a0;u_long trap_a1;u_long trap_a2;};
struct specdata3 {uint32 specdata1;uint32 specdata2;};
struct specinfo;
typedef unsigned int speed_t;
struct sphdr {u_char sp_cc;u_char sp_dt;u_short sp_sid;u_short sp_did;u_short sp_seq;u_short sp_ack;u_short sp_alo;};
struct spidp {struct idp si_i;struct sphdr si_s;};
struct spidp_q {struct spidp_q *si_next;struct spidp_q *si_prev;};
struct spp_debug {u_long sd_time;__int16 sd_act;__int16 sd_ostate;caddr_t sd_cb;__int16 sd_req;struct spidp sd_si;struct sppcb sd_sp;};
struct spp_istat {__int16 hdrops;__int16 badsum;__int16 badlen;__int16 slotim;__int16 fastim;__int16 nonucn;__int16 noconn;__int16 notme;__int16 wrncon;__int16 bdreas;__int16 gonawy;__int16 notyet;__int16 lstdup;struct sppstat newstats;};
struct sppcb {struct spidp_q s_q;struct nspcb *s_nspcb;u_char s_state;u_char s_flags;u_short s_mtu;struct idp *s_idp;struct sphdr s_shdr;struct sphdr s_rhdr;u_short s_rack;u_short s_ralo;u_short s_smax;u_short s_snxt;int s_cwnd;__int16 s_swnd;__int16 s_smxw;u_short s_swl1;u_short s_swl2;int s_cwmx;int s_ssthresh;__int16 s_idle;__int16 s_timer[4];__int16 s_rxtshift;__int16 s_rxtcur;u_short s_rtseq;__int16 s_rtt;__int16 s_srtt;__int16 s_rttvar;char s_force;char s_dupacks;char s_oobflags;char s_iobc;u_short s_want;char s_outx;char s_inx;u_short s_flags2;};
struct sppstat {__int64 spps_connattempt;__int64 spps_accepts;__int64 spps_connects;__int64 spps_drops;__int64 spps_conndrops;__int64 spps_closed;__int64 spps_segstimed;__int64 spps_rttupdated;__int64 spps_delack;__int64 spps_timeoutdrop;__int64 spps_rexmttimeo;__int64 spps_persisttimeo;__int64 spps_keeptimeo;__int64 spps_keepprobe;__int64 spps_keepdrops;__int64 spps_sndtotal;__int64 spps_sndpack;__int64 spps_sndbyte;__int64 spps_sndrexmitpack;__int64 spps_sndrexmitbyte;__int64 spps_sndacks;__int64 spps_sndprobe;__int64 spps_sndurg;__int64 spps_sndwinup;__int64 spps_sndctrl;__int64 spps_sndvoid;__int64 spps_rcvtotal;__int64 spps_rcvpack;__int64 spps_rcvbyte;__int64 spps_rcvbadsum;__int64 spps_rcvbadoff;__int64 spps_rcvshort;__int64 spps_rcvduppack;__int64 spps_rcvdupbyte;__int64 spps_rcvpartduppack;__int64 spps_rcvpartdupbyte;__int64 spps_rcvoopack;__int64 spps_rcvoobyte;__int64 spps_rcvpackafterwin;__int64 spps_rcvbyteafterwin;__int64 spps_rcvafterclose;__int64 spps_rcvwinprobe;__int64 spps_rcvdupack;__int64 spps_rcvacktoomuch;__int64 spps_rcvackpack;__int64 spps_rcvackbyte;__int64 spps_rcvwinupd;};
struct sprayarr {int *data;int lnth;};
struct spraycumul {unsigned int counter;struct timeval clock;};
struct srreq {char srreq_type;union srreq::$8C3093F33B4603603C88F7EC223EAF5B srreq_data;};
union srreq::$8C3093F33B4603603C88F7EC223EAF5B {struct srreq_tb srtab;struct srt_attr attrs;};
struct srreq_tb {struct in_addr srt_ip_addr;u_char srt_mac_addr[6];struct trn_rif srtab_rif;__int16 srt_aging_timer;u_char srt_status;u_char srt_discovery_type;struct srt_attr srt_attrs;};
struct srt_attr {int SR_aging_timer;u_short SRDT_local;u_short SRDT_extended;int srt_bcktsize;int SR_table_size;int srt_kcentry_timer;int srt_kientry_timer;u_size64 ARE_sent;u_size64 ARE_rcvd;u_size64 SR_discover_fail;u_size64 srt_crt_entry_fail;};
struct srt_context {int tab_element;char *entry_value;};
struct srtab {struct ifnet *srt_ifp;struct in_addr srt_ip_addr;u_char srt_mac_addr[6];struct srtab *srt_next_hash;struct trn_rif srtab_rif;__int16 srt_aging_timer;u_char srt_status;u_char srt_discovery_type;};
struct ss_head {__int64 su_len;};
struct ssi {int ssi_cnt;struct ssi::ssi_bp ssi_bp[2];};
struct ssi::ssi_bp {unsigned int *bp_addr;unsigned int bp_inst;};
typedef __int64 ssize_t;
typedef unsigned __int64 st_addr_t;
typedef unsigned __int64 st_any_t;
typedef enum $13E5897DDE4FE73267EC69E9B96C8548 st_bool_t;
typedef char st_char_t;
typedef unsigned int st_cm_sscn_t;
typedef unsigned __int64 st_cmscn_t;
typedef unsigned __int64 st_file_t;
typedef int st_line_t;
struct st_obj;
typedef struct st_obj st_obj_t;
typedef enum $D45638E099C8A1BF7CD7A46D1A631838 st_object_type_t;
struct st_objlist;
typedef struct st_objlist st_objlist_t;
typedef unsigned __int64 st_proc_t;
typedef int st_status_t;
typedef unsigned __int64 st_sym_t;
enum stable_how {UNSTABLE = 0x0,DATA_SYNC = 0x1,FILE_SYNC = 0x2,};
typedef struct sigaltstack stack_t;
struct stat {dev_t st_dev;int st_retired1;mode_t st_mode;nlink_t st_nlink;__int16 st_nlink_reserved;uid_t st_uid;gid_t st_gid;dev_t st_rdev;dev_t st_ldev;off_t st_size;time_t st_retired2;int st_uatime;time_t st_retired3;int st_umtime;time_t st_retired4;int st_uctime;int st_retired5;int st_retired6;uint_t st_flags;uint_t st_gen;__int64 st_spare[4];ino_t st_ino;int st_ino_reserved;time_t st_atime;int st_atime_reserved;time_t st_mtime;int st_mtime_reserved;time_t st_ctime;int st_ctime_reserved;__int64 st_blksize;__int64 st_blocks;};
struct statfs {__int16 f_type;__int16 f_flags;int f_retired1;int f_retired2;int f_retired3;int f_retired4;int f_retired5;int f_retired6;int f_retired7;fsid_t f_fsid;int f_spare[9];char f_retired8[90];char f_retired9[90];union mount_info mount_info;__int64 f_spare2[15];__int64 f_fsize;__int64 f_bsize;__int64 f_blocks;__int64 f_bfree;__int64 f_bavail;__int64 f_files;__int64 f_ffree;char f_mntonname[1024];char f_mntfromname[1024];};
struct stats {int cp_time[4];int dk_xfer[4];u_int v_pgpgin;u_int pageouts;u_int v_pswpin;u_int v_pswpout;u_int v_intr;int if_ipackets;int if_ierrors;int if_opackets;int if_oerrors;int if_collisions;};
struct statsswtch {int cp_time[4];int dk_xfer[4];u_int v_pgpgin;u_int pageouts;u_int v_pswpin;u_int v_pswpout;u_int v_intr;int if_ipackets;int if_ierrors;int if_opackets;int if_oerrors;int if_collisions;u_int v_swtch;__int64 avenrun[3];struct timeval boottime;};
struct statstime {int cp_time[4];int dk_xfer[4];u_int v_pgpgin;u_int pageouts;u_int v_pswpin;u_int v_pswpout;u_int v_intr;int if_ipackets;int if_ierrors;int if_opackets;int if_oerrors;int if_collisions;u_int v_swtch;__int64 avenrun[3];struct timeval boottime;struct timeval curtime;};
struct statsvar {struct statsvar::$7FCA211C9072D2949954B3DB78BFDDCD cp_time;struct statsvar::$BB7C6D2B3C1E1AB741C949E9CDEFD86D dk_xfer;u_int v_pgpgin;u_int pageouts;u_int v_pswpin;u_int v_pswpout;u_int v_intr;int if_ipackets;int if_ierrors;int if_opackets;int if_oerrors;int if_collisions;u_int v_swtch;__int64 avenrun[3];struct timeval boottime;struct timeval curtime;};
struct statsvar::$7FCA211C9072D2949954B3DB78BFDDCD {u_int cp_time_len;int *cp_time_val;};
struct statsvar::$BB7C6D2B3C1E1AB741C949E9CDEFD86D {u_int dk_xfer_len;int *dk_xfer_val;};
struct status {char *mon_name;int state;char priv[16];};
struct statvfs {unsigned __int64 f_bsize;unsigned __int64 f_frsize;unsigned __int64 f_blocks;unsigned __int64 f_bfree;unsigned __int64 f_bavail;unsigned __int64 f_files;unsigned __int64 f_ffree;unsigned __int64 f_favail;unsigned __int64 f_fsid;char f_basetype[16];unsigned __int64 f_flag;unsigned __int64 f_namemax;char f_fstr[32];};
typedef struct statvfs statvfs_t;
typedef struct _str_cfg_blk str_cfg_blk;
struct str_list {int sl_nmods;struct str_mlist *sl_modlist;};
struct str_mlist {char l_name[17];};
struct strapush {uint sap_cmd;__int64 sap_major;__int64 sap_minor;__int64 sap_lastminor;__int64 sap_npush;char sap_list[8][17];};
struct strbuf {int maxlen;int len;char *buf;};
struct strfdinsert {struct strbuf ctlbuf;struct strbuf databuf;__int64 flags;int fildes;int offset;};
struct strfdinsert_attr {struct strbuf ctlbuf;struct strbuf databuf;__int64 flags;int fildes;int offset;struct strbuf attrbuf;};
struct strioctl {int ic_cmd;int ic_timout;int ic_len;char *ic_dp;};
struct strioctl_attr {int ic_cmd;int ic_timout;int ic_len;char *ic_dp;struct strbuf attrbuf;};
struct stripeParams {int segmentCnt;int reserved;};
typedef struct stripeParams stripeParamsT;
struct strpeek {struct strbuf ctlbuf;struct strbuf databuf;__int64 flags;};
struct strpeek_attr {struct strbuf ctlbuf;struct strbuf databuf;__int64 flags;struct strbuf attrbuf;};
struct strpmsg {struct strbuf ctlbuf;struct strbuf databuf;int band;__int64 flags;};
struct strpmsg_attr {struct strbuf ctlbuf;struct strbuf databuf;int band;__int64 flags;struct strbuf attrbuf;};
struct strrecvfd {int fd;uid_t uid;gid_t gid;char fill[8];};
struct strrecvfd_attr {int fd;uid_t uid;gid_t gid;struct strbuf attrbuf;};
struct strs {charptr _back_tab;charptr _bell;charptr _carriage_return;charptr _change_scroll_region;charptr _clear_all_tabs;charptr _clear_screen;charptr _clr_eol;charptr _clr_eos;charptr _column_address;charptr _command_character;charptr _crsr_address;charptr _crsr_down;charptr _crsr_home;charptr _crsr_invisible;charptr _crsr_left;charptr _crsr_mem_address;charptr _crsr_normal;charptr _crsr_right;charptr _crsr_to_ll;charptr _crsr_up;charptr _crsr_visible;charptr _dlt_character;charptr _dlt_line;charptr _dis_status_line;charptr _down_half_line;charptr _entr_alt_charset_mode;charptr _entr_blink_mode;charptr _entr_bold_mode;charptr _entr_ca_mode;charptr _entr_delete_mode;charptr _entr_dim_mode;charptr _entr_insert_mode;charptr _entr_secure_mode;charptr _entr_protected_mode;charptr _entr_reverse_mode;charptr _entr_standout_mode;charptr _entr_underline_mode;charptr _erase_chars;charptr _exit_alt_charset_mode;charptr _exit_attribute_mode;charptr _exit_ca_mode;charptr _exit_delete_mode;charptr _exit_insert_mode;charptr _exit_standout_mode;charptr _exit_underline_mode;charptr _flash_screen;charptr _form_feed;charptr _from_status_line;charptr _init_1string;charptr _init_2string;charptr _init_3string;charptr _init_file;charptr _ins_character;charptr _ins_line;charptr _ins_padding;charptr _ky_backspace;charptr _ky_catab;charptr _ky_clear;charptr _ky_ctab;charptr _ky_dc;charptr _ky_dl;charptr _ky_down;charptr _ky_eic;charptr _ky_eol;charptr _ky_eos;charptr _ky_f0;charptr _ky_f1;charptr _ky_f10;charptr _ky_f2;charptr _ky_f3;charptr _ky_f4;charptr _ky_f5;charptr _ky_f6;charptr _ky_f7;charptr _ky_f8;charptr _ky_f9;charptr _ky_home;charptr _ky_ic;charptr _ky_il;charptr _ky_left;charptr _ky_ll;charptr _ky_npage;charptr _ky_ppage;charptr _ky_right;charptr _ky_sf;charptr _ky_sr;charptr _ky_stab;charptr _ky_up;charptr _kpad_local;charptr _kpad_xmit;charptr _lab_f0;charptr _lab_f1;charptr _lab_f10;charptr _lab_f2;charptr _lab_f3;charptr _lab_f4;charptr _lab_f5;charptr _lab_f6;charptr _lab_f7;charptr _lab_f8;};
struct strs2 {charptr _lab_f9;charptr _meta_off;charptr _meta_on;charptr _newline;charptr _pad_char;charptr _prm_dch;charptr _prm_delete_line;charptr _prm_down_cursor;charptr _prm_ich;charptr _prm_index;charptr _prm_insert_line;charptr _prm_left_cursor;charptr _prm_right_cursor;charptr _prm_rindex;charptr _prm_up_cursor;charptr _pkey_key;charptr _pkey_local;charptr _pkey_xmit;charptr _print_screen;charptr _prtr_off;charptr _prtr_on;charptr _repeat_char;charptr _reset_1string;charptr _reset_2string;charptr _reset_3string;charptr _reset_file;charptr _restore_cursor;charptr _row_address;charptr _save_cursor;charptr _scrll_forward;charptr _scrll_reverse;charptr _set_attributes;charptr _set_tab;charptr _set_window;charptr _tab;charptr _to_status_line;charptr _underline_char;charptr _up_half_line;charptr _init_prog;charptr _ky_a1;charptr _ky_a3;charptr _ky_b2;charptr _ky_c1;charptr _ky_c3;charptr _prtr_non;charptr _box_chars_1;charptr _box_chars_2;charptr _box_attr_1;charptr _box_attr_2;charptr _color_bg_0;charptr _color_bg_1;charptr _color_bg_2;charptr _color_bg_3;charptr _color_bg_4;charptr _color_bg_5;charptr _color_bg_6;charptr _color_bg_7;charptr _color_fg_0;charptr _color_fg_1;charptr _color_fg_2;charptr _color_fg_3;charptr _color_fg_4;charptr _color_fg_5;charptr _color_fg_6;charptr _color_fg_7;charptr _font_0;charptr _font_1;charptr _font_2;charptr _font_3;charptr _font_4;charptr _font_5;charptr _font_6;charptr _font_7;charptr _ky_back_tab;charptr _ky_do;charptr _ky_command;charptr _ky_command_pane;charptr _ky_end;charptr _ky_help;charptr _ky_newline;charptr _ky_next_pane;charptr _ky_prev_cmd;charptr _ky_prev_pane;charptr _ky_quit;charptr _ky_select;charptr _ky_scroll_left;charptr _ky_scroll_right;charptr _ky_tab;charptr _ky_smap_in1;charptr _ky_smap_out1;charptr _ky_smap_in2;charptr _ky_smap_out2;charptr _ky_smap_in3;charptr _ky_smap_out3;charptr _ky_smap_in4;charptr _ky_smap_out4;charptr _ky_smap_in5;charptr _ky_smap_out5;charptr _appl_defined_str;charptr _ky_smap_in6;};
struct strs3 {charptr _ky_smap_out6;charptr _ky_smap_in7;charptr _ky_smap_out7;charptr _ky_smap_in8;charptr _ky_smap_out8;charptr _ky_smap_in9;charptr _ky_smap_out9;charptr _ky_sf1;charptr _ky_sf2;charptr _ky_sf3;charptr _ky_sf4;charptr _ky_sf5;charptr _ky_sf6;charptr _ky_sf7;charptr _ky_sf8;charptr _ky_sf9;charptr _ky_sf10;charptr _ky_f11;charptr _ky_f12;charptr _ky_f13;charptr _ky_f14;charptr _ky_f15;charptr _ky_f16;charptr _ky_f17;charptr _ky_f18;charptr _ky_f19;charptr _ky_f20;charptr _ky_f21;charptr _ky_f22;charptr _ky_f23;charptr _ky_f24;charptr _ky_f25;charptr _ky_f26;charptr _ky_f27;charptr _ky_f28;charptr _ky_f29;charptr _ky_f30;charptr _ky_f31;charptr _ky_f32;charptr _ky_f33;charptr _ky_f34;charptr _ky_f35;charptr _ky_f36;charptr _ky_action;charptr _acs_chars;charptr _alt_scancode_esc;charptr _bit_image_repeat;charptr _bit_image_newline;charptr _bit_image_carriage_return;charptr _change_char_pitch;charptr _change_line_pitch;charptr _change_res_horz;charptr _change_res_vert;charptr _char_padding;charptr _char_set_names;charptr _clear_margins;charptr _clr_bol;charptr _code_set_init;charptr _color_names;charptr _create_window;charptr _define_bit_image_region;charptr _define_char;charptr _device_type;charptr _dial_phone;charptr _display_clock;charptr _display_pc_char;charptr _ena_acs;charptr _end_bit_image_region;charptr _entr_am_mode;charptr _entr_doublewide_mode;charptr _entr_draft_quality;charptr _entr_italics_mode;charptr _entr_leftward_mode;charptr _entr_micro_mode;charptr _entr_near_letter_quality;charptr _entr_normal_quality;charptr _entr_pc_charset_mode;charptr _entr_scancode_mode;charptr _entr_shadow_mode;charptr _entr_subscript_mode;charptr _entr_superscript_mode;charptr _entr_upward_mode;charptr _entr_xon_mode;charptr _exit_am_mode;charptr _exit_doublewide_mode;charptr _exit_italics_mode;charptr _exit_leftward_mode;charptr _exit_micro_mode;charptr _exit_pc_charset_mode;charptr _exit_scancode_mode;charptr _exit_shadow_mode;charptr _exit_subscript_mode;charptr _exit_superscript_mode;charptr _exit_upward_mode;charptr _exit_xon_mode;charptr _fixed_pause;charptr _flash_hook;charptr _get_mouse;charptr _goto_window;charptr _hangup;};
struct strs4 {charptr _initialize_color;charptr _initialize_pair;charptr _ky_beg;charptr _ky_btab;charptr _ky_cancel;charptr _ky_close;charptr _ky_copy;charptr _ky_create;charptr _ky_enter;charptr _ky_exit;charptr _ky_f37;charptr _ky_f38;charptr _ky_f39;charptr _ky_f40;charptr _ky_f41;charptr _ky_f42;charptr _ky_f43;charptr _ky_f44;charptr _ky_f45;charptr _ky_f46;charptr _ky_f47;charptr _ky_f48;charptr _ky_f49;charptr _ky_f50;charptr _ky_f51;charptr _ky_f52;charptr _ky_f53;charptr _ky_f54;charptr _ky_f55;charptr _ky_f56;charptr _ky_f57;charptr _ky_f58;charptr _ky_f59;charptr _ky_f60;charptr _ky_f61;charptr _ky_f62;charptr _ky_f63;charptr _ky_find;charptr _ky_mark;charptr _ky_message;charptr _ky_mouse;charptr _ky_move;charptr _ky_next;charptr _ky_open;charptr _ky_options;charptr _ky_previous;charptr _ky_print;charptr _ky_redo;charptr _ky_reference;charptr _ky_refresh;charptr _ky_replace;charptr _ky_restart;charptr _ky_resume;charptr _ky_save;charptr _ky_sbeg;charptr _ky_scancel;charptr _ky_scommand;charptr _ky_scopy;charptr _ky_screate;charptr _ky_sdc;charptr _ky_sdl;charptr _ky_send;charptr _ky_seol;charptr _ky_sexit;charptr _ky_sfind;charptr _ky_shelp;charptr _ky_shome;charptr _ky_sic;charptr _ky_sleft;charptr _ky_smessage;charptr _ky_smove;charptr _ky_snext;charptr _ky_soptions;charptr _ky_sprevious;charptr _ky_sprint;charptr _ky_sredo;charptr _ky_sreplace;charptr _ky_sright;charptr _ky_srsume;charptr _ky_ssave;charptr _ky_ssuspend;charptr _ky_sundo;charptr _ky_suspend;charptr _ky_undo;charptr _labl_format;charptr _labl_off;charptr _labl_on;charptr _micro_column_address;charptr _micro_down;charptr _micro_left;charptr _micro_right;charptr _micro_row_address;charptr _micro_up;charptr _mouse_info;charptr _order_of_pins;charptr _orig_colors;charptr _orig_pair;charptr _prm_down_micro;charptr _prm_left_micro;charptr _prm_right_micro;charptr _prm_up_micro;charptr _pc_term_options;charptr _pkey_plab;charptr _plab_norm;charptr _pulse;charptr _quick_dial;charptr _req_for_input;charptr _req_mouse_pos;charptr _remove_clock;charptr _scancode_escape;charptr _select_char_set;charptr _set0_des_seq;charptr _set1_des_seq;charptr _set2_des_seq;charptr _set3_des_seq;charptr _set_a_background;charptr _set_a_foreground;charptr _set_background;charptr _set_bottom_margin;charptr _set_bottom_margin_parm;charptr _set_clock;charptr _set_color_band;charptr _set_color_pair;charptr _set_foreground;charptr _set_left_margin;charptr _set_left_margin_parm;charptr _set_lr_margin;charptr _set_page_length;charptr _set_right_margin;charptr _set_right_margin_parm;charptr _set_tb_margin;charptr _set_top_margin;charptr _set_top_margin_parm;charptr _start_bit_image;charptr _start_char_set_def;charptr _stop_bit_image;charptr _stop_char_set_def;charptr _subscript_characters;charptr _superscript_characters;charptr _these_cause_cr;charptr _tone;charptr _user0;charptr _user1;charptr _user2;charptr _user3;charptr _user4;charptr _user5;charptr _user6;charptr _user7;charptr _user8;charptr _user9;charptr _wait_tone;charptr _xoff_character;charptr _xon_character;charptr _zero_motion;charptr _set_pglen_inch;charptr _entr_horizontal_hl_mode;charptr _entr_left_hl_mode;charptr _entr_low_hl_mode;charptr _entr_right_hl_mode;charptr _entr_top_hl_mode;charptr _entr_vertical_hl_mode;charptr _set_a_attributes;charptr Sentinel;};
struct strsendfd_attr {int fd;struct strbuf attrbuf;};
struct subsys_info {ulong module_id;cfg_entrypt_t entrypt;uint state;char name[16];cfg_subsys_attr_t *attributes;lock_data_t subsys_lock;lock_data_t attrs_lock;int refcnt;cfg_deprtn_t deprtn;struct subsys_info *next;};
typedef struct subsys_info subsys_info_t;
struct svc_req {u_int rq_prog;u_int rq_vers;u_int rq_proc;struct opaque_auth rq_cred;caddr_t rq_clntcred;SVCXPRT *rq_xprt;};
struct svcfh {fsid_t fh_fsid;fid_t fh_fid;fid_t fh_efid;};
struct svcinfo {int svcdate;int svcpath[20][8];struct svcinfo::$C92EAEE75A3F096540C7E35BC982F739 svcauth;};
struct svcinfo::$C92EAEE75A3F096540C7E35BC982F739 {int passlenmin;int passlenmax;int softexp;int seclevel;};
struct swapent {char *ste_path;off_t ste_start;off_t ste_length;__int64 ste_pages;__int64 ste_free;__int64 ste_flags;};
typedef struct swapent swapent_t;
struct swapres {char *sr_name;off_t sr_start;off_t sr_length;};
typedef struct swapres swapres_t;
struct swaptable {int swt_n;struct swapent swt_ent[1];};
typedef struct swaptable swaptbl_t;
typedef __int64 swblk_t;
struct swdevt {dev_t sw_dev;int sw_freed;int sw_nblks;int sw_type;int *sw_gnodeptr;int (*sw_strat)();int sw_priority;int sw_nio;};
struct symlinkdata3 {sattr3 symlink_attributes;nfspath3 symlink_data;};
typedef int sysconfig_op_t;
struct sysent {int sy_narg;int sy_parallel;int (*sy_call)(struct proc *, ...);unsigned __int8 aud_param[7];};
struct syserr {__int64 inodeovf;__int64 fileovf;__int64 textovf;__int64 procovf;__int64 sbi[5];};
struct sysinfo {time_t cpu[4];time_t wait[3];__int64 bread;__int64 bwrite;__int64 lread;__int64 lwrite;__int64 phread;__int64 phwrite;__int64 pswitch;__int64 syscall;__int64 sysread;__int64 syswrite;__int64 sysfork;__int64 sysexec;__int64 runque;__int64 runocc;__int64 swpque;__int64 swpocc;__int64 iget;__int64 namei;__int64 dirblk;__int64 readch;__int64 writech;__int64 rcvint;__int64 xmtint;__int64 mdmint;__int64 rawch;__int64 canch;__int64 outch;__int64 msg;__int64 sema;__int64 ksched;__int64 koverf;__int64 kexit;__int64 rbread;__int64 rcread;__int64 rbwrt;__int64 rcwrt;};
struct syslog_data {int log_file;int log_stat;char *log_tag;int log_mask;int log_facility;struct sockaddr syslog_addr;};
typedef struct $DF7EA5483316055E5EF5E87F4B5E1B9A sysset_t;
typedef struct _system_blk system_blk;
struct system_default_fields {time_t fd_inactivity_timeout;time_t fd_pw_expire_warning;char fd_pw_site_callout[1024];mask_t fd_secclass[1];char fd_boot_authenticate;char fd_audit_enable;};
struct system_default_flags {unsigned int fg_secclass;};
struct system_exrec {__int64 ExceptionCode;unsigned __int64 ExceptionFlags;exrec_ptr ExceptionRecord;void *ExceptionAddress;unsigned __int64 NumberParameters;unsigned __int64 ExceptionInformation[1];};
typedef struct system_exrec system_exrec_type;
struct syswait {__int16 iowait;__int16 physio;};
struct t_bind {struct netbuf addr;unsigned int qlen;};
struct t_call {struct netbuf addr;struct netbuf opt;struct netbuf udata;int sequence;};
struct t_discon {struct netbuf udata;int reason;int sequence;};
struct t_field {char fd_devname[14];uid_t fd_uid;time_t fd_slogin;uid_t fd_uuid;time_t fd_ulogin;uid_t fd_loutuid;time_t fd_louttime;ushort fd_nlogins;ushort fd_max_tries;time_t fd_logdelay;time_t fd_unlockint;char fd_lock;char fd_xdisp;ushort fd_login_timeout;};
struct t_flag {unsigned int fg_xdisp;};
struct t_info {__int64 addr;__int64 options;__int64 tsdu;__int64 etsdu;__int64 connect;__int64 discon;__int64 servtype;__int64 flags;};
struct t_iovec {void *iov_base;size_t iov_len;};
struct t_kpalive {__int64 kp_onoff;__int64 kp_timeout;};
struct t_linger {__int64 l_onoff;__int64 l_linger;};
struct t_opthdr {unsigned __int64 len;unsigned __int64 level;unsigned __int64 name;unsigned __int64 status;};
struct t_optmgmt {struct netbuf opt;__int64 flags;};
typedef __int64 t_scalar_t;
struct t_uderr {struct netbuf addr;struct netbuf opt;__int64 error;};
struct t_unitdata {struct netbuf addr;struct netbuf opt;struct netbuf udata;};
typedef unsigned __int64 t_uscalar_t;
typedef struct $52F2074E7DD96990D6ABF23BD388763B tablet_event;
typedef uint_t tag_t;
typedef port_t *task_array_t;
struct task_basic_info {int suspend_count;int base_priority;vm_size_t virtual_size;vm_size_t resident_size;time_value_t user_time;time_value_t system_time;};
typedef struct task_basic_info task_basic_info_data_t;
typedef struct task_basic_info *task_basic_info_t;
struct task_events_info {__int64 faults;__int64 zero_fills;__int64 reactivations;__int64 pageins;__int64 cow_faults;__int64 messages_sent;__int64 messages_received;};
typedef events_info_data_t task_events_info_data_t;
typedef events_info_data_t *task_events_info_t;
typedef __int64 task_info_data_t[1024];
typedef __int64 *task_info_t;
typedef port_t task_t;
struct tb {int tbflags;char cbuf[17];union tb::$1EAEF137804EAC3C4539F96792501929 rets;};
union tb::$1EAEF137804EAC3C4539F96792501929 {struct tbmspos tbpos;struct gtcopos gtcopos;struct polpos polpos;};
struct tbl_buffer {__int64 bread;__int64 bwrite;__int64 lread;__int64 lwrite;__int64 phread;__int64 phwrite;};
struct tbl_dkinfo {int di_ndrive;int di_busy;__int64 di_time;__int64 di_seek;__int64 di_xfer;__int64 di_wds;__int64 di_wpms;int di_unit;char di_name[9];__int64 di_avque;__int64 di_avwait;__int64 di_avserv;__int64 di_usec;__int64 di_initial_busy;__int64 di_ref_cnt;__int64 di_num_req_initiated;__int64 di_num_req_completed;__int64 di_pxfer;};
struct tbl_file {__int64 iget;__int64 namei;__int64 dirblk;};
struct tbl_fsparam {__int64 tf_used;__int64 tf_iused;__int64 tf_size;__int64 tf_isize;};
struct tbl_intr {__int64 in_devintr;__int64 in_context;__int64 in_syscalls;__int64 in_forks;__int64 in_vforks;};
struct tbl_kmem {ulong kmem_avail;ulong kmem_alloc;__int64 kmem_fail;};
struct tbl_knlist {void *kn_addr;char kn_name[24];};
struct tbl_loadavg {union tbl_loadavg::$A3D6908855EDA82442EC5F71EACBA5DA tl_avenrun;int tl_lscale;__int64 tl_mach_factor[3];};
union tbl_loadavg::$A3D6908855EDA82442EC5F71EACBA5DA {__int64 l[3];double d[3];};
struct tbl_mallocb {void *kb_next;__int64 kb_indx;__int64 kb_size;__int64 kb_free;__int64 kb_total;__int64 kb_failed;};
struct tbl_malloct {__int64 kt_memuse;__int64 kt_limit;__int64 kt_wait;__int64 kt_limblocks;__int64 kt_failed;__int64 kt_maxused;};
struct tbl_ncstats {u_long nc_goodhits;u_long nc_neghits;u_long nc_badhits;u_long nc_falsehits;u_long nc_miss;u_long nc_long;u_long nc_badtimehits;u_long nc_collisions;u_long nc_unequaldups;u_long nc_pad[3];};
struct tbl_netinfo {int nt_nthreads;int nt_maxactive;};
struct tbl_paging {__int64 v_pgpgin;__int64 v_sftlock;__int64 v_pgout;__int64 v_dfree;__int64 v_scan;__int64 v_s5ifp;__int64 freeswap;};
struct tbl_pmemcluster {vm_offset_t start;vm_offset_t end;int type;};
struct tbl_pmemstats {__int64 pagesize;__int64 physmem;__int64 npmem_clusters;__int64 npmem_cluster_type;__int64 npmem_usage;__int64 npmem_use_type;__int64 pmem_typesize;};
struct tbl_pmemuse {vm_offset_t start;vm_offset_t end;int type;struct tbl_pmemuse *next;};
struct tbl_processor {__int64 desired_load;__int64 load_avg;__int64 int_load_avg;__int64 rt_load_avg;struct timeval start_stop_time;struct timeval pset_assign_time;__int64 spare[50];};
struct tbl_procinfo {uid_t pi_uid;pid_t pi_pid;pid_t pi_ppid;pid_t pi_pgrp;dev_t pi_ttyd;int pi_status;int pi_flag;char pi_comm[20];uid_t pi_ruid;uid_t pi_svuid;gid_t pi_rgid;gid_t pi_svgid;pid_t pi_session;pid_t pi_tpgrp;pid_t pi_tsession;u_int pi_jobc;int pi_cursig;sigset_t pi_sig;sigset_t pi_sigmask;sigset_t pi_sigignore;sigset_t pi_sigcatch;};
struct tbl_runq {__int64 runque;__int64 runocc;};
struct tbl_scalls {__int64 syscall;__int64 sysread;__int64 sysfork;__int64 syswrite;__int64 sysexec;ulong readch;ulong writech;};
struct tbl_swapinfo {int flags;int size;int free;dev_t dev;ino_t ino;};
struct tbl_sysinfo {__int64 si_user;__int64 si_nice;__int64 si_sys;__int64 si_idle;__int64 si_hz;__int64 si_phz;__int64 si_boottime;__int64 wait;};
struct tbl_taskinfo {int ti_suspend_count;int ti_base_priority;vm_size_t ti_virtual_size;vm_size_t ti_resident_size;time_value_t ti_user_time;time_value_t ti_system_time;int ti_swap_state;int ti_pad1;unsigned __int64 ti_pad2;unsigned __int64 ti_pad3;};
struct tbl_tblstats {__int64 tb_procu;__int64 tb_proca;__int64 tb_inodu;__int64 tb_inoda;__int64 tb_fileu;__int64 tb_filea;__int64 tb_procov;__int64 tb_inodov;__int64 tb_fileov;__int64 tb_locku;__int64 tb_locka;};
struct tbl_tcpconn {int state;struct in_addr local_addr;u_short local_port;struct in_addr rem_addr;u_short rem_port;};
struct tbl_threadstates {int runqueue;int waiting;int unintr;int stopped;};
struct tbl_ttyinfo {__int64 ti_nin;__int64 ti_nout;__int64 ti_cancc;__int64 ti_rawcc;__int64 rcvin;__int64 xmtin;__int64 mdmin;};
struct tbl_umast_info {int umast_calls;int umast_to_master;int umast_block;int umast_release;int umast_rel_cpu;int umast_rel_block;};
struct tbl_vmstats {__int64 pagesize;__int64 free_count;__int64 active_count;__int64 inactive_count;__int64 wire_count;__int64 zero_fill_count;__int64 reactivations;__int64 pageins;__int64 pageouts;__int64 faults;__int64 cow_faults;__int64 lookups;__int64 hits;__int64 user_ptepages;__int64 kernel_ptepages;__int64 free_ptepages;__int64 ubc_pages;__int64 contig_pages;__int64 malloc_pages;__int64 vm_wired_count;__int64 ubc_wired_count;__int64 meta_data_count;__int64 task_swapins;__int64 task_swapouts;__int64 task_inswap_count;__int64 task_outswap_count;};
struct tbl_vnodestats {u_long vn_allocations;u_long vn_recycled;u_long vn_getnewcalls;u_long vn_getlock;u_long vn_vgetcalls;u_long vn_vgetfree;u_long vn_freecalls;u_long vn_failget;u_long vn_waitvxlock;u_long vn_inactivating;u_long vn_transitioning;u_long vn_prim_deallocs;u_long vn_sec_deallocs;u_long vn_failed_prim_deallocs;u_long vn_failed_sec_deallocs;u_long vn_pad[9];};
struct tbmspos {int xpos;int ypos;__int16 status;__int16 scount;};
typedef unsigned int tcflag_t;
struct tchars {char t_intrc;char t_quitc;char t_startc;char t_stopc;char t_eofc;char t_brkc;};
typedef union $715C7995AE2D3887AAC9924B8BE4E345 tcntl_conf_value_t;
typedef enum $3E17E73D3615670C5AA600E0ACAAD822 tcntl_error_code_t;
typedef u_int64_t tcntl_fhandle_t;
typedef struct $16C2BD1F571C7039E16B45217B67C309 tcntl_filtspec_t;
typedef u_int64_t tcntl_rhandle_t;
union tcntl_sockaddr {struct sockaddr sa;struct sockaddr_in sin;struct sockaddr_in6 sin6;};
struct tcntlconfreq {char ifr_name[16];u_int version;char parameter[30];tcntl_error_code_t error;char operation;char sign;tcntl_conf_value_t cur;tcntl_conf_value_t min;tcntl_conf_value_t max;tcntl_conf_value_t def;};
typedef struct _tcp_blk tcp_blk;
struct tcp_blk_hdr {int active_opens;int passive_opens;int attempt_fails;int estab_resets;int curr_estab;int in_segs;int out_segs;int retrans_segs;int in_errors;int out_rsts;int total_cnt;int curr_cnt;int more;};
struct tcp_debug {n_time td_time;__int16 td_act;__int16 td_ostate;caddr_t td_tcb;struct in6_addr td_src;struct in6_addr td_dst;struct tcphdr td_th;u_int td_len;__int16 td_req;struct tcpcb td_cb;};
struct tcp_info_blk {int state;struct in_addr local_addr;int local_port;struct in_addr rem_addr;int rem_port;};
struct tcp_sack_field {__int16 number;struct tcp_sack_field::$B8FD331A52AD3BE35E515D94130A0A82 entries[4];};
struct tcp_sack_field::$B8FD331A52AD3BE35E515D94130A0A82 {int ledge;int redge;};
typedef u_int tcp_seq;
struct tcpcb {struct ovtcphdr *seg_next;struct ovtcphdr *seg_prev;__int16 t_dupacks;__int16 t_softerror;__int16 t_rxtshift;__int16 t_rxtcur;u_char t_flags;u_short t_flags2;int pad_a[8];struct inpcb *t_inpcb;unsigned int t_lastaction;tcp_seq snd_wnd;tcp_seq snd_cwnd;tcp_seq snd_max;tcp_seq snd_una;tcp_seq snd_nxt;tcp_seq snd_up;tcp_seq snd_wl1;tcp_seq snd_wl2;tcp_seq iss;tcp_seq max_sndwnd;tcp_seq snd_ssthresh;u_char snd_scale;u_char request_r_scale;u_char requested_s_scale;char pad_b[1];int pad_c[1];tcp_seq rcv_wnd;tcp_seq rcv_adv;tcp_seq rcv_nxt;tcp_seq rcv_up;tcp_seq max_rcvd;tcp_seq irs;u_short t_maxseg;u_char rcv_scale;unsigned int t_TSRecent;unsigned int t_TSEcr;tcp_seq Last_ACK_sent;struct tcpcb::tcp_sack_field *t_sack;int pad_d[4];tcp_seq t_rtseq;__int16 t_srtt;__int16 t_rttvar;u_short t_rttmin;u_short t_msslimit;int t_rptr2rxt;int t_rptr2cur;char t_oobflags;char t_iobc;char t_force;char pad_e[1];u_short t_peermss;__int16 t_persistcntr;__int16 t_keepidle;__int16 t_keepintvl;__int16 t_keepcnt;__int16 t_keepinit;__int16 t_state;__int16 pad_f[1];__int64 pad_g[3];unsigned int t_startrtt;tcp_seq t_timestamp;unsigned int t_timer[4];int clua_seq_wrap_guard;};
struct tcphdr {u_short th_sport;u_short th_dport;tcp_seq th_seq;tcp_seq th_ack;unsigned __int8 th_off;u_char th_flags;u_short th_win;u_short th_sum;u_short th_urp;};
struct tcpiphdr {struct ipovly ti_i;struct tcphdr ti_t;};
struct tcpstat {time_t time;u_long tcps_connattempt;u_long tcps_accepts;u_long tcps_connects;u_long tcps_drops;u_long tcps_conndrops;u_long tcps_closed;u_long tcps_segstimed;u_long tcps_rttupdated;u_long tcps_delack;u_long tcps_timeoutdrop;u_long tcps_rexmttimeo;u_long tcps_persisttimeo;u_long tcps_keeptimeo;u_long tcps_keepprobe;u_long tcps_keepdrops;u_long tcps_sndtotal;u_long tcps_sndpack;u_long tcps_sndbyte;u_long tcps_sndrexmitpack;u_long tcps_sndrexmitbyte;u_long tcps_sndacks;u_long tcps_sndprobe;u_long tcps_sndurg;u_long tcps_sndwinup;u_long tcps_sndctrl;u_long tcps_rcvtotal;u_long tcps_rcvpack;u_long tcps_rcvbyte;u_long tcps_rcvbadsum;u_long tcps_rcvbadoff;u_long tcps_rcvshort;u_long tcps_rcvduppack;u_long tcps_rcvdupbyte;u_long tcps_rcvpartduppack;u_long tcps_rcvpartdupbyte;u_long tcps_rcvoopack;u_long tcps_rcvoobyte;u_long tcps_rcvpackafterwin;u_long tcps_rcvbyteafterwin;u_long tcps_rcvafterclose;u_long tcps_rcvwinprobe;u_long tcps_rcvdupack;u_long tcps_rcvacktoomuch;u_long tcps_rcvackpack;u_long tcps_rcvackbyte;u_long tcps_rcvwinupd;u_long tcps_nooutputbuffs;u_long tcps_skipchecksum;u_long tcps_pendingconnectiondropped;u_long tcp_ignored_tsopt;u_long tcp_processing_tsopt;u_long tcps_recycled_tps;};
struct term {__int16 Filedes;struct termios Ottyb;struct termios Nttyb;struct _bool_struct *_bools;struct _num_struct *_nums;struct _str_struct *_strs;char *_strtab;__int64 timeout;attr_t sgr_mode;attr_t sgr_faked;int _delay;int _inputfd;int _check_fd;_KEY_MAP **_keys;_KEY_MAP *internal_keys;__int16 _ksz;__int16 _lastkey_ordered;__int16 _lastmacro_ordered;__int16 _first_macro;bool funckeystarter[256];bool _fl_rawmode;bool fl_typeahdok;bool _cursorstate;bool _iwait;__int16 _regs[26];int _input_queue[32];__int16 _ungotten;char _chars_on_queue;cchar_t *_acsmap;char *turn_on_seq[15];attr_t bit_vector;char *cursor_seq[3];char _termname[15];char *turn_off_seq[3];attr_t check_turn_off;_Color_pair _cur_pair;_Color_pair *_pairs_tbl;_Color *_color_tbl;};
struct termcb {char st_flgs;char st_termt;char st_crow;char st_ccol;char st_vrow;char st_lrow;};
struct termio {unsigned __int16 c_iflag;unsigned __int16 c_oflag;unsigned __int16 c_cflag;unsigned __int16 c_lflag;char c_line;unsigned __int8 c_cc[8];};
struct termios {tcflag_t c_iflag;tcflag_t c_oflag;tcflag_t c_cflag;tcflag_t c_lflag;cc_t c_cc[20];int c_ispeed;int c_ospeed;};
struct text_move {int h;int v;struct text_move *next;};
struct tfltset {fltset_t pr_flttrace;tid_t pr_tid;};
typedef struct tfltset tfltset_t;
struct tfpcr {__int64 fpcr;tid_t tid;};
typedef struct tfpcr tfpcr_t;
struct tfpregset {fpregset_t pr_fpregs;tid_t tid;};
typedef struct tfpregset tfpregset_t;
struct tftphdr {__int16 th_opcode;union tftphdr::$1F0BBB626003677CBC854074A52C6B52 th_u;char th_data[1];};
union tftphdr::$1F0BBB626003677CBC854074A52C6B52 {u_short tu_block;__int16 tu_code;char tu_stuff[1];};
struct tgregset {gregset_t pr_regs;tid_t tid;};
typedef struct tgregset tgregset_t;
struct thread;
typedef thread_t *thread_array_t;
struct thread_basic_info {time_value_t user_time;time_value_t system_time;int cpu_usage;int base_priority;int cur_priority;int run_state;int flags;int suspend_count;__int64 sleep_time;__int64 wait_event;char wait_mesg[8];};
typedef struct thread_basic_info thread_basic_info_data_t;
typedef struct thread_basic_info *thread_basic_info_t;
typedef events_info_data_t thread_events_info_data_t;
typedef events_info_data_t *thread_events_info_t;
typedef __int64 thread_info_data_t[1024];
typedef __int64 *thread_info_t;
struct thread_sched_info {int policy;int data;int base_priority;int max_priority;int cur_priority;boolean_t depressed;int depress_priority;int cpu;int bound;int pset;};
typedef struct thread_sched_info thread_sched_info_data_t;
typedef struct thread_sched_info *thread_sched_info_t;
struct thread_signal_info {int cursig;sigset_t sigpending;sigset_t sigmask;};
typedef struct thread_signal_info thread_signal_info_data_t;
typedef struct thread_signal_info *thread_signal_info_t;
typedef __int64 thread_state_data_t[64];
typedef __int64 *thread_state_t;
typedef port_t thread_t;
struct thrpt {struct reqvalue maxthrpt;struct reqvalue avgthrpt;};
typedef unsigned __int64 tid_t;
enum time_how {DONT_CHANGE = 0x0,SET_TO_SERVER_TIME = 0x1,SET_TO_CLIENT_TIME = 0x2,};
typedef int time_t;
struct time_value {__int64 seconds;__int64 microseconds;};
typedef struct time_value time_value_t;
struct timeb {time_t time;unsigned __int16 millitm;__int16 timezone;__int16 dstflag;};
typedef __int64 timer_t;
struct timespec {time_t tv_sec;__int64 tv_nsec;};
typedef struct timespec timespec_t;
typedef struct timestruct timestruc_t;
struct timestruct {__int64 tv_sec;__int64 tv_nsec;};
struct timeval {time_t tv_sec;int tv_usec;};
struct timeval_narrow {int tv_sec;int tv_usec;};
typedef struct timeval_narrow timeval_narrow_t;
struct timeval_wide {__int64 tv_sec;int tv_usec;};
typedef struct timeval_wide timeval_wide_t;
struct timex {unsigned int modes;__int64 offset;__int64 freq;__int64 maxerror;__int64 esterror;int status;__int64 constant;__int64 precision;__int64 tolerance;__int64 ppsfreq;__int64 jitter;int shift;__int64 stabil;__int64 jitcnt;__int64 calcnt;__int64 errcnt;__int64 stbcnt;};
struct timezone {int tz_minuteswest;int tz_dsttime;};
typedef enum tis_alloc_mflags_tag tis_alloc_mflags_t;
enum tis_alloc_mflags_tag {TIS_ALLOC_MUTEX_PSHARED = 0x1,TIS_ALLOC_MUTEX_NOALLOC = 0x2,TIS_ALLOC_MUTEX_RECURSIVE = 0x4,};
typedef enum tis_mflags_tag tis_mflags_t;
enum tis_mflags_tag {TIS_MINIT_RECURSIVE = 0x1,};
struct tis_rwlock {int valid;int readers;int rwaits;int writer;int wwaits;pthread_mutex_t mutex;pthread_cond_t Wreaders;pthread_cond_t Wwriters;};
typedef struct tis_rwlock *tis_rwlock_p;
typedef struct tis_rwlock tis_rwlock_t;
struct tm {int tm_sec;int tm_min;int tm_hour;int tm_mday;int tm_mon;int tm_year;int tm_wday;int tm_yday;int tm_isdst;__int64 tm_gmtoff;char *tm_zone;};
struct tmask {Mask mask;Pointer dev;};
struct tms {clock_t tms_utime;clock_t tms_stime;clock_t tms_cutime;clock_t tms_cstime;};
struct tostruct {char *selfpc;__int64 count;unsigned __int16 link;};
struct trace_ids {__int16 ti_mid;__int16 ti_sid;char ti_level;__int16 ti_flags;};
struct transdel {struct reqvalue maxdel;struct reqvalue avgdel;};
typedef struct proctrace trcbmap;
typedef struct proctrace *trcbmap_t;
struct trn_header {u_char trn_ac;u_char trn_fc;u_char trn_dhost[6];u_char trn_shost[6];struct trn_rif trn_hdr_rif;};
struct trn_preamble {u_char trn_ac;u_char trn_fc;u_char trn_dhost[6];u_char trn_shost[6];};
struct trn_rif {unsigned __int8 rif_rt;unsigned __int8 rif_dir;u_short rif_rd[8];};
struct trnchar {u_char mac_addr[6];u_char grp_addr[6];u_char func_addr[6];u_short drop_numb;u_char upstream_nbr[6];u_short upstream_drop_numb;u_short transmit_access_pri;u_short last_major_vector;u_short ring_status;u_short interface_state;u_short monitor_contd;u_short soft_error_timer;u_short ring_number;u_short monitor_error_code;u_short beacon_receive_type;u_short beacon_transmit_type;u_char beacon_una[6];u_short beacon_stn_drop_numb;u_short ring_speed;u_short etr;u_short open_status;u_char token_ring_chip[16];};
struct trncount {u_long trn_second;u_long trn_bytercvd;u_long trn_bytesent;u_long trn_pdurcvd;u_long trn_pdusent;u_long trn_mbytercvd;u_long trn_mpdurcvd;u_long trn_mbytesent;u_long trn_mpdusent;u_long trn_pduunrecog;u_long trn_mpduunrecog;u_short trn_nosysbuf;u_short trn_xmit_fail;u_short trn_xmit_underrun;u_short trn_line_error;u_short trn_internal_error;u_short trn_burst_error;u_short trn_ari_fci_error;u_short trn_ad_trans;u_short trn_lost_frame_error;u_short trn_rcv_congestion_error;u_short trn_frame_copied_error;u_short trn_frequency_error;u_short trn_token_error;u_short trn_hard_error;u_short trn_soft_error;u_short trn_adapter_reset;u_short trn_signal_loss;u_short trn_xmit_beacon;u_short trn_ring_recovery;u_short trn_lobe_wire_fault;u_short trn_remove_received;u_short trn_single_station;u_short trn_selftest_fail;};
struct tsigaction {struct sigaction pr_sigaction[32];tid_t pr_tid;};
typedef struct tsigaction tsigaction_t;
struct tsiginfo {siginfo_t pr_siginfo;tid_t pr_tid;};
typedef struct tsiginfo tsiginfo_t;
struct tsignal {int pr_signal;tid_t pr_tid;};
typedef struct tsignal tsignal_t;
struct tsigset {sigset_t pr_sigtrace;tid_t pr_tid;};
typedef struct tsigset tsigset_t;
typedef struct $DD232241810C7B936211642930A8D251 tsinfo_t;
struct tsp {u_char tsp_type;u_char tsp_vers;u_short tsp_seq;union tsp::$E78A65B7E52D74DB905DCAA7AEC02B40 tsp_u;char tsp_name[256];};
union tsp::$E78A65B7E52D74DB905DCAA7AEC02B40 {struct timeval tspu_time;char tspu_hopcnt;};
typedef struct $F0BCD3B7D048EDD7B2B99177E67B0491 tsparms_t;
struct tsysset {sysset_t pr_systrace;tid_t pr_tid;};
typedef struct tsysset tsysset_t;
struct ttmap {struct ttmap *tm_next;int tm_len;char tm_count;unsigned __int8 tm_flags;__int16 tm_num_rules;__int16 tm_default;__int16 tm_first_wild;char tm_mapname[32];__int16 tm_hash[256];struct ttrule tm_rule[1];};
struct ttmapinfo {struct ttmap *tm_map;char tm_state;char tm_bufindx;__int16 tm_rulindx;char tm_buffer[10];};
struct ttrule {__int16 tm_next;char tm_pattern[11];char tm_replace[17];};
struct tty_map {char tm_version;unsigned __int8 tm_flags;char tm_mapname[32];char *tm_addr;int tm_len;};
struct ttychars {char tc_erase;char tc_kill;char tc_intrc;char tc_quitc;char tc_startc;char tc_stopc;char tc_eofc;char tc_brkc;char tc_suspc;char tc_dsuspc;char tc_rprntc;char tc_flushc;char tc_werasc;char tc_lnextc;};
struct ttyent {char *ty_name;char *ty_getty;char *ty_type;int ty_status;char *ty_window;char *ty_comment;};
struct ttyloc {int tlc_hostid;int tlc_ttyid;};
struct ttysize {unsigned __int16 ts_lines;unsigned __int16 ts_cols;unsigned __int16 ts_xxx;unsigned __int16 ts_yyy;};
struct tzhead {char tzh_reserved[20];char tzh_ttisgmtcnt[4];char tzh_ttisstdcnt[4];char tzh_leapcnt[4];char tzh_timecnt[4];char tzh_typecnt[4];char tzh_charcnt[4];};
typedef uchar_t u_char;
typedef uint_t u_int;
typedef unsigned __int16 u_int16_t;
typedef unsigned __int16 u_int16m_t;
typedef u_int u_int32;
typedef unsigned int u_int32_t;
typedef unsigned int u_int32m_t;
typedef unsigned __int64 u_int64_t;
typedef unsigned __int64 u_int64m_t;
typedef unsigned __int8 u_int8_t;
typedef unsigned __int8 u_int8m_t;
typedef ulong_t u_long;
typedef unsigned __int64 u_longlong_t;
typedef ushort_t u_short;
typedef unsigned __int64 u_size64;
union u_spcl {char dummy[1024];struct u_spcl::s_spcl s_spcl;};
struct u_spcl::s_spcl {int c_type;time_t c_date;time_t c_ddate;int c_volume;daddr_t c_tapea;u_long c_inumber;int c_magic;int c_checksum;struct bsd_dinode bsd_c_dinode;int c_count;char c_addr[512];int xix_flag;struct dinode xix_dinode;};
typedef uchar_t uchar;
typedef unsigned __int8 uchar_t;
struct ucontext {unsigned __int64 uc_flags;struct ucontext *uc_link;sigset_t uc_sigmask;stack_t uc_stack;mcontext_t uc_mcontext;__int64 uc_filler[5];};
typedef struct ucontext ucontext_t;
struct ucred {u_short cr_ref;u_short cr_ngroups;uid_t cr_uid;gid_t cr_gid;u_long cr_pag;__int64 cr_sia_proc_cred_val;gid_t cr_groups[32];uid_t cr_ruid;uid_t _cr_ruid;gid_t _cr_rgid;uid_t _cr_suid;gid_t _cr_sgid;};
typedef struct $515E86E3CDE4804C27E8EB5835C739ED udac_t;
typedef struct _udp_blk udp_blk;
struct udp_hdr {int in_datagrams;int no_ports;int in_errors;int out_datagrams;int total_cnt;int curr_cnt;int more;};
struct udp_info_blk {struct in_addr local_addr;int local_port;};
struct udphdr {u_short uh_sport;u_short uh_dport;u_short uh_ulen;u_short uh_sum;};
struct udpiphdr {struct ipovly ui_i;struct udphdr ui_u;};
struct udpstat {time_t time;u_long udps_ipackets;u_long udps_hdrops;u_long udps_badsum;u_long udps_badlen;u_long udps_noport;u_long udps_noportbcast;u_long udps_noportmcast;u_long udps_fullsock;u_long udpps_pcbcachemiss;u_long udps_opackets;};
struct ufs_args {char *fspec;int exflags;uid_t exroot;};
struct ufs_od_dirent {struct dirent dent;};
typedef uint32 uid3;
typedef uint_t uid_t;
typedef uint_t uint;
typedef unsigned __int16 uint16_t;
typedef unsigned int uint32;
typedef unsigned int uint32_t;
typedef unsigned __int64 uint64;
typedef unsigned __int64 uint64_t;
typedef unsigned __int8 uint8_t;
typedef unsigned int uint_t;
typedef unsigned __int64 uintptr_t;
struct uio {struct iovec *uio_iov;off_t uio_offset;int uio_iovcnt;ssize_t uio_resid;enum uio_seg uio_segflg;enum uio_rw uio_rw;int uio_fmode;daddr_t uio_limit;};
enum uio_rw {UIO_READ = 0x0,UIO_WRITE = 0x1,UIO_AIORW = 0x2,};
typedef enum uio_rw uio_rw_t;
enum uio_seg {UIO_USERSPACE = 0x0,UIO_SYSSPACE = 0x1,UIO_USERISPACE = 0x2,UIO_PHYSSPACE = 0x3,UIO_TNCICSSPACE = 0x4,};
typedef struct uio uio_t;
typedef ulong_t ulong;
typedef unsigned __int64 ulong_t;
struct undo_entry {struct undo_entry *uent_nextp;__int16 uent_aoe;__int16 uent_num;int uent_id;};
typedef uint_t unit_t;
struct unixcred {int uid;int gid;struct unixcred::$77E8FF756E3D716B1DE7CEE76191E96A gids;};
struct unixcred::$77E8FF756E3D716B1DE7CEE76191E96A {u_int gids_len;int *gids_val;};
struct unpcb {struct socket *unp_socket;struct vnode *unp_vnode;ino_t unp_vno;struct unpcb *unp_conn;struct unpcb *unp_refs;struct unpcb *unp_nextref;struct mbuf *unp_addr;int unp_cc;int unp_mbcnt;time_t unp_atime;time_t unp_mtime;time_t unp_ctime;struct unpcb::unpq unp_queue;struct mbuf *unp_oob;};
struct unpcb::unpq {struct unpcb::unpq *next;struct unpcb::unpq *prev;};
struct uprtab {major_t upt_bmajordev;unit_t upt_unit;struct prbits upt_enabled;struct prbits upt_bounceio;};
typedef unsigned int useconds_t;
struct user {struct pcb u_pcb;struct proc *u_procp;__int64 *u_ar0;char u_comm[17];int u_arg[8];char u_logname[64];size_t u_tsize;size_t u_dsize;size_t u_ssize;caddr_t u_text_start;caddr_t u_data_start;caddr_t u_stack_start;caddr_t u_stack_end;int u_stack_grows_up;time_t u_outime;sig_t u_signal[33];sigset_t u_sasigmask[33];sigset_t u_sigonstack;sigset_t u_sigintr;sigset_t u_oldmask;int u_code;stack_t u_sigstack;struct user::file *u_ofile[64];char u_pofile[64];int u_lastfile;u_int u_of_count;struct user::file **u_ofile_of;char *u_pofile_of;struct vnode *u_cdir;struct vnode *u_rdir;__int16 u_cmask;struct rusage u_ru;struct rusage u_cru;struct itimerval u_timer[3];int u_XXX[3];struct timeval u_start;struct flag_field u_acflag;struct uuprof u_prof;u_short u_maxuprc;struct rlimit u_rlimit[8];struct user::nameicache u_ncache;struct nameidata u_nd;struct compat_mod *u_compat_mod;struct user::exit_actn *u_exitp;int u_stack[1];};
struct user::nameicache {int nc_prevoffset;ino_t nc_inumber;dev_t nc_dev;time_t nc_time;};
struct userpw {char upw_name[32];char *upw_passwd;ulong upw_flags;ulong upw_lastupdate;};
struct ushared_state {sigset_t sigmask;sigset_t sig;struct nxm_pth_state *pth_id;int flags;int cancel_state;int nxm_ssig;int reserved1;__int64 nxm_active;__int64 reserved2;};
typedef ushort_t ushort;
typedef unsigned __int16 ushort_t;
struct ustat {daddr_t f_tfree;ino_t f_tinode;char f_fname[6];char f_fpack[6];};
struct utimbuf {time_t actime;time_t modtime;};
struct utmp {char ut_user[64];char ut_id[14];char ut_line[32];__int16 ut_type;pid_t ut_pid;struct utmp::exit_status ut_exit;struct __ut_timeval ut_tv;char ut_host[256];};
struct utmp::exit_status {__int16 e_termination;__int16 e_exit;};
struct utmp_data {int ut_fd;__int64 loc_utmp;struct utmp ubuf;};
struct utmpx {char ut_user[64];char ut_id[14];char ut_line[32];__int16 ut_type;pid_t ut_pid;struct utmpx::$B0E97A9E7B708B18DD72E05A568E13E0 ut_exit;struct timeval ut_tv;char ut_host[256];};
struct utmpx::$B0E97A9E7B708B18DD72E05A568E13E0 {__int16 ut_termination;__int16 ut_exit;};
struct utsname {char sysname[32];char nodename[32];char release[32];char version[32];char machine[32];};
struct uuprof {__int16 *pr_base;unsigned __int64 pr_size;unsigned __int64 pr_off;unsigned __int64 pr_scale;};
struct uuspeculative {int sp_version;spec_action sp_segv_action;spec_action sp_fpe_action;vm_offset_t sp_handler_addr;};
struct v1_bustype_info {int adpt_num;int nexus_num;int bus_num;int ctlr_num;int rctlr_num;int slave_num;int unit_num;int pad0;union v1_bustype_info::$11874C4D2FE1633F5F0ABB9FF6D9D9AB bus;};
union v1_bustype_info::$11874C4D2FE1633F5F0ABB9FF6D9D9AB {v1_scsi_bus_info_t scsi;uchar_t busdata[128];};
typedef struct v1_bustype_info v1_bustype_info_t;
struct v1_device_info {int version;__int16 category;__int16 bus;char interface[24];char device[24];char dev_name[24];ulong_t soft_count;ulong_t hard_count;v1_devtype_info_t devinfo;v1_bustype_info_t businfo;uchar_t private[128];};
typedef struct v1_device_info v1_device_info_t;
union v1_devtype_info {v1_disk_dev_info_t disk;v1_tape_dev_info_t tape;v1_term_dev_info_t term;uchar_t devdata[256];};
typedef union v1_devtype_info v1_devtype_info_t;
struct v1_disk_dev_info {ulong_t status;ulong_t capacity;ulong_t blocksz;uchar_t class;uchar_t part_num;uchar_t raid_level;uchar_t pad0;ushort_t media_changes;ushort_t pad1;union v1_disk_dev_info::$0CF8B069F7D0580FC326C10F2AD8BE25 arch;};
union v1_disk_dev_info::$0CF8B069F7D0580FC326C10F2AD8BE25 {struct v1_disk_dev_info::$0CF8B069F7D0580FC326C10F2AD8BE25::$5C4054F6E53CAABEB085F52092B185BB scsi;uchar_t archdata[32];};
struct v1_disk_dev_info::$0CF8B069F7D0580FC326C10F2AD8BE25::$5C4054F6E53CAABEB085F52092B185BB {uchar_t density_code;uchar_t flags;};
typedef struct v1_disk_dev_info v1_disk_dev_info_t;
struct v1_scsi_bus_info {ulong_t bus_num;ulong_t tgt_id;ulong_t lun;ulong_t flags;ushort_t sync_period;uchar_t sync_offset;uchar_t tag_q_depth;uchar_t inq_data[36];};
typedef struct v1_scsi_bus_info v1_scsi_bus_info_t;
struct v1_tape_dev_info {uint_t media_status;uint_t unit_status;__int64 recordsz;__int64 density_bpi;__int64 density_bpi_wrt;__int64 position;__int64 fm_cnt;uchar_t class;uchar_t pad[7];union v1_tape_dev_info::$7B5030DFF60F699A063E0191F4972D96 arch;};
union v1_tape_dev_info::$7B5030DFF60F699A063E0191F4972D96 {struct v1_tape_dev_info::$7B5030DFF60F699A063E0191F4972D96::$231BBD7B41EBD0E5428AD8E06F5A7019 scsi;uchar_t archdata[32];};
struct v1_tape_dev_info::$7B5030DFF60F699A063E0191F4972D96::$231BBD7B41EBD0E5428AD8E06F5A7019 {uint_t blocking_factor;uchar_t valid_flags;uchar_t density_code;uchar_t buffered_mode;uchar_t speed;uchar_t compression_code;};
typedef struct v1_tape_dev_info v1_tape_dev_info_t;
struct v1_term_dev_info {ulong_t state_flags;ulong_t category_flags;};
typedef struct v1_term_dev_info v1_term_dev_info_t;
typedef struct $B8D4EC0F2109AB37F43A2670CB214DE3 va_list;
typedef struct $8D40AFF1B9E22FA7C8F5AE4180774535 val;
struct vattr {int va_mask;enum vtype va_type;u_short va_mode;nlink_t va_nlink;uid_t va_uid;gid_t va_gid;int va_fsid;int va_fileid;u_short va_rawmode;u_long va_qsize;int va_blocksize;struct timeval va_atime;struct timeval va_mtime;struct timeval va_ctime;u_int va_gen;u_int va_flags;dev_t va_rdev;u_long va_qbytes;union vattr::$B14D7836808D69B48AA5429E4269BB8B va_un;};
union vattr::$B14D7836808D69B48AA5429E4269BB8B {char *vau_symlink;char *vau_socket;};
typedef struct vattr vattr_t;
typedef struct version ver_t;
struct verify_params {u_long vp_lbn;u_short vp_length;};
struct version {__int16 v_major;__int16 v_minor;};
struct vfsops {int (*vfs_mount)(struct mount *, char *, caddr_t, struct nameidata *);int (*vfs_start)(struct mount *, int flags);int (*vfs_unmount)(struct mount *, int);int (*vfs_root)(struct mount *, struct vnode **);int (*vfs_quotactl)(struct mount *, int, uid_t, caddr_t);int (*vfs_statfs)(struct mount *);int (*vfs_sync)(struct mount *, int);int (*vfs_fhtovp)(struct mount *, struct fid *, struct vnode **);int (*vfs_vptofh)(struct vnode *, struct fid *);int (*vfs_init)();int (*vfs_mountroot)(struct mount *, struct vnode **);int (*vfs_swapvp)();int (*vfs_smoothsync)(struct mount *, u_int, u_int);};
struct vfsops_fsname_args {char fsname[16];int ret_index;};
struct vfsops_with_fsname {struct vfsops *vops_ptr;char fsname[16];};
struct vga_color_cell {unsigned __int8 dirty_cell;unsigned __int8 red;unsigned __int8 green;unsigned __int8 blue;};
struct vga_info {ws_screen_descriptor screen;ws_depth_descriptor depth[1];ws_visual_descriptor visual[1];ws_screen_functions sf;ws_color_map_functions cmf;ws_cursor_functions cf;unsigned int state;__int16 ctlr_type;__int16 bus_type;pid_t mapped_pid;unsigned __int16 attribute;unsigned __int16 unit;unsigned __int16 board_id;__int16 min_dirty;__int16 max_dirty;__int16 x_hot;__int16 y_hot;ws_color_cell cursor_fg;ws_color_cell cursor_bg;unsigned __int64 mem_phys;io_handle_t mem_handle;unsigned __int64 cursor_offset;unsigned int mem_size;u_int bits[256];struct vga_color_cell cells[256];};
struct vga_type {ws_screen_descriptor screen;ws_depth_descriptor depth[1];ws_visual_descriptor visual[1];int screen_type;ws_cursor_functions cf;int cursor_type;ws_color_map_functions cmf;int color_map_type;ws_screen_functions sf;int bus_type;};
typedef u_int vifbitmap_t;
struct vifconf {unsigned int nr_vifs;unsigned int flags;struct vifinfo *vif_buf;};
struct vifctl {vifi_t vifc_vifi;u_char vifc_flags;u_char vifc_threshold;u_int vifc_rate_limit;struct in_addr vifc_lcl_addr;struct in_addr vifc_rmt_addr;};
typedef u_short vifi_t;
struct vifinfo {struct vifctl vifctl;unsigned int status;unsigned int ifc_index;};
struct vjstat {unsigned int vjs_packets;unsigned int vjs_compressed;unsigned int vjs_searches;unsigned int vjs_misses;unsigned int vjs_uncompressedin;unsigned int vjs_compressedin;unsigned int vjs_errorin;unsigned int vjs_tossed;};
typedef vm_offset_t vm_address_t;
typedef int vm_behavior_t;
typedef int vm_inherit_t;
typedef unsigned int vm_machine_attribute_t;
typedef int vm_machine_attribute_val_t;
struct vm_map;
struct vm_map_entry;
struct vm_object;
typedef unsigned __int64 vm_offset_t;
struct vm_page;
typedef char vm_page_data_t[4096];
typedef port_t vm_pager_request_t;
typedef port_t vm_pager_t;
typedef int vm_prot_t;
typedef vm_region_t *vm_region_array_t;
typedef unsigned int vm_region_t;
typedef unsigned __int64 vm_size_t;
struct vm_stack {void *address;size_t rsize;size_t ysize;size_t gsize;size_t swap;size_t incr;ulong_t align;__int64 flags;__int64 reserved1;__int64 reserved2;};
typedef struct vm_stack *vm_stack_p;
typedef struct vm_stack vm_stack_t;
struct vm_statistics {__int64 pagesize;__int64 free_count;__int64 active_count;__int64 inactive_count;__int64 wire_count;__int64 zero_fill_count;__int64 reactivations;__int64 pageins;__int64 pageouts;__int64 faults;__int64 cow_faults;__int64 lookups;__int64 hits;};
typedef struct vm_statistics vm_statistics_data_t;
typedef struct vm_statistics *vm_statistics_t;
typedef task_t vm_task_t;
struct vm_ubc_object;
struct vmac_ifnet {struct vmac_ifnet *vmif_next;char *vmif_name;char *vmif_version;struct sockaddr vmif_hwaddr;int vmif_flags;int vmif_refcnt;struct vmac_ifnet::ifnet *vmif_ifnet;struct sockaddr vmif_paddr;};
struct vmacreq {int cmd;struct ifreq vmr_ifreq_pa;struct ifreq vmr_ifreq_mac;};
struct vnode {simple_lock_data_t v_lock;u_int v_flag;uint_t v_usecount;u_int v_aux_lockers;u_short v_shlockc;u_short v_exlockc;off_t v_lastr;u_long v_id;enum vtype v_type;enum vtagtype v_tag;struct mount *v_mount;struct mount *v_mountedhere;struct vnodeops *v_op;struct vnode *v_freef;struct vnode **v_freeb;struct vnode *v_mountf;struct vnode **v_mountb;simple_lock_data_t v_buflists_lock;struct buf *v_cleanblkhd;struct buf *v_dirtyblkhd;u_int v_ncache_time;u_int v_free_time;simple_lock_data_t v_output_lock;int v_numoutput;u_int v_outflag;u_int v_cache_lookup_refs;u_int v_rdcnt;u_int v_wrcnt;u_int v_dirtyblkcnt;u_int v_dirtyblkpush;union vnode::$14D9C7F2C741DE5EEBD2F3565FE4BAC3 v_un;struct vm_ubc_object *v_object;secinfo_t *v_secattr;char v_data[1];};
union vnode::$14D9C7F2C741DE5EEBD2F3565FE4BAC3 {struct socket *vu_socket;struct specinfo *vu_specinfo;struct fifonode *vu_fifonode;};
typedef struct vnode vnode_t;
struct vnodeops {int (*vn_lookup)(struct vnode *, struct nameidata *);int (*vn_create)(struct nameidata *, struct vattr *);int (*vn_mknod)(struct nameidata *, struct vattr *, struct ucred *);int (*vn_open)(struct vnode **, int, struct ucred *);int (*vn_close)(struct vnode *, int, struct ucred *);int (*vn_access)(struct vnode *, int, struct ucred *);int (*vn_getattr)(struct vnode *, struct vattr *, struct ucred *);int (*vn_setattr)(struct vnode *, struct vattr *, struct ucred *);int (*vn_read)(struct vnode *, struct uio *, int, struct ucred *);int (*vn_write)(struct vnode *, struct uio *, int, struct ucred *);int (*vn_ioctl)(struct vnode *, int, caddr_t, int, struct ucred *, int *);int (*vn_select)(struct vnode *, int *, int *, int, struct ucred *);int (*vn_mmap)(struct vnode *, vm_offset_t, struct vm_map *, vm_offset_t *, vm_size_t, vm_prot_t, vm_prot_t, int, struct ucred *);int (*vn_fsync)(struct vnode *, int, struct ucred *, int);int (*vn_seek)(struct vnode *, off_t, off_t, struct ucred *);int (*vn_remove)(struct nameidata *);int (*vn_link)(struct vnode *, struct nameidata *);int (*vn_rename)(struct nameidata *, struct nameidata *);int (*vn_mkdir)(struct nameidata *, struct vattr *);int (*vn_rmdir)(struct nameidata *);int (*vn_symlink)(struct nameidata *, struct vattr *, char *);int (*vn_readdir)(struct vnode *, struct uio *, struct ucred *, int *);int (*vn_readlink)(struct vnode *, struct uio *, struct ucred *);int (*vn_abortop)(struct nameidata *);int (*vn_inactive)(struct vnode *);int (*vn_reclaim)(struct vnode *, int);int (*vn_bmap)(struct vnode *, daddr_t, struct vnode **, daddr_t *);int (*vn_strategy)(struct buf *);int (*vn_print)(struct vnode *);int (*vn_pgrd)(struct vnode *, struct uio *, struct ucred *);int (*vn_pgwr)(struct vnode *, struct uio *, struct ucred *, memory_object_t, vm_offset_t);int (*vn_swap)(struct vnode *, vp_swap_op_t, vm_offset_t, struct ucred *);int (*vn_bread)(struct vnode *, off_t, struct buf **, struct ucred *);int (*vn_brelse)(struct vnode *, struct buf *);int (*vn_lockctl)(struct vnode *, struct eflock *, int, struct ucred *, pid_t, off_t);int (*vn_syncdata)(struct vnode *, int, vm_offset_t, vm_size_t, struct ucred *);int (*vn_lock)(struct vnode *, int, struct ucred *);int (*vn_unlock)(struct vnode *, int, struct ucred *);int (*vn_getproplist)(struct vnode *, char **, struct uio *, int *, int, struct ucred *);int (*vn_setproplist)(struct vnode *, struct uio *, struct ucred *);int (*vn_delproplist)(struct vnode *, char **, int, struct ucred *, __int64);int (*vn_pathconf)(struct vnode *, int, __int64 *);};
typedef void (*void_function)();
typedef void *void_pt;
typedef enum $A1D044C5C6C9A35768D52A463A253A1B vp_swap_op_t;
typedef struct _vs_box vsBox;
typedef struct _vs_cursor vsCursor;
typedef struct _vs_event vsEvent;
typedef struct _vsIoAddr vsIoAddr;
typedef vsIoAddr *vsIoAddrAddr;
typedef struct _vsStats vsStats;
enum vtagtype {VT_NON = 0x0,VT_UFS = 0x1,VT_NFS = 0x2,VT_MFS = 0x3,VT_S5FS = 0x4,VT_CDFS = 0x5,VT_DFS = 0x6,VT_EFS = 0x7,VT_PRFS = 0x8,VT_MSFS = 0x9,VT_FFM = 0xA,VT_FDFS = 0xB,VT_ADDON = 0xC,VT_CFS = 0xD,VT_CSPECFS = 0xE,};
struct vtimes {int vm_utime;int vm_stime;unsigned int vm_idsrss;unsigned int vm_ixrss;int vm_maxrss;int vm_majflt;int vm_minflt;int vm_nswap;int vm_inblk;int vm_oublk;};
enum vtype {VNON = 0x0,VREG = 0x1,VDIR = 0x2,VBLK = 0x3,VCHR = 0x4,VLNK = 0x5,VSOCK = 0x6,VFIFO = 0x7,VBAD = 0x8,};
typedef enum vtype vtype_t;
typedef vuchar_t vu_char;
typedef vuint_t vu_int;
typedef vulong_t vu_long;
typedef vushort_t vu_short;
typedef volatile unsigned __int8 vuchar_t;
typedef volatile unsigned int vuint_t;
typedef volatile unsigned __int64 vulong_t;
typedef volatile unsigned __int16 vushort_t;
union wait;
struct wcc_attr {size3 size;nfstime3 mtime;nfstime3 ctime;};
struct wcc_data {pre_op_attr before;post_op_attr after;};
typedef unsigned int wchar_t;
typedef unsigned __int64 wctrans_t;
typedef unsigned int wctype_t;
struct winsize {unsigned __int16 ws_row;unsigned __int16 ws_col;unsigned __int16 ws_xpixel;unsigned __int16 ws_ypixel;};
typedef unsigned int wint_t;
struct wobj;
typedef union $AA6CFCD35600EC0D1F51E6E9EC73AC89 wobj_info_t;
typedef enum $F28B36ADFFCBF05BF68859CF29BA8C42 wobj_info_type_t;
typedef enum $F6FEA3F178599BC0F45BECAF27371307 wobj_symscn_t;
typedef struct $1DAEF4E0AC04FD56FF7D132BB7465CF9 wordexp_t;
struct write3data {struct vnode *data_vp;struct iovec iov[1];struct buf *data_bp[1];u_int size;};
typedef char writeverf3[8];
typedef struct $AC7EE4B12331F0F59BD217F1B47E10FC ws_bios_call;
typedef struct $83C128D3CC4481507991F35AE35ABA63 ws_color_cell;
typedef struct $F96993B2B44FAB3F477408FCA8DAD614 ws_color_map_data;
typedef struct $DDB4B2A360148BFABFF14FB09BC2E756 ws_color_map_functions;
typedef struct $E295AA2FD640132E82D3349EDE822061 ws_cursor_color;
typedef struct $A56011F2097EBD62321318BF15F58404 ws_cursor_control;
typedef struct $EEDF0D7A607DA38253FFDCB6603E99FB ws_cursor_data;
typedef struct $C8EFCC306AECCBEA533C2EEC8A587562 ws_cursor_functions;
typedef struct $85356F6A5463C8185FD263BF4DBCCC67 ws_cursor_position;
typedef struct $36FE493A927D2BBEEB27F8ADBD5DE70B ws_depth_descriptor;
typedef struct $928F96912A4716BD0FD130073F46C097 ws_descriptor;
typedef struct $8FDAAB4B707DEB409D6D96C66936D9CD ws_device_ioctl;
typedef struct $090B61DB237F41A79AEED49C48161BFD ws_device_mode;
typedef struct $95F29F2E23B7A5AB14053F1397D65335 ws_devices;
typedef struct $F64623C8F0FC842A7325FB19F91FB4EA ws_edge_connection;
typedef struct $26BC012D24128E3336766C52F10E0B0D ws_event;
typedef struct $CC1DD6906528A61FFED82CA68DCDB091 ws_event_queue;
typedef struct $81BFA6A9491AE6CE5B332944DC694A15 ws_hardware_type;
typedef struct $20DCAE5A496E101E8DAF2A83C10B6474 ws_input_device;
typedef struct $CB41E086A121ACADA0862E42B6739E9A ws_keyboard;
typedef struct $406DF191E6ADB1788294ED4DF895F08B ws_keyboard_control;
typedef struct $7FC160C5B833FEAD50AFA5F9700D5F2C ws_keyboard_definition;
typedef struct $004508BAB182CC3DFE4E4DE2605F69B0 ws_keyboard_state;
typedef struct $368F1E0A185F41AC2CF8F5888E31D674 ws_keycode_modifiers;
typedef struct $AB255CA75AAFC751F0AA636C79A973EF ws_keysyms_and_modifiers;
typedef struct $8DE4D3787CB17674EC1600CC378BF3ED ws_map_control;
typedef struct $FB24926AE1EFC7E0BDF3D4F4D3C430D1 ws_monitor;
typedef struct $AAEBCAB8890427597964C9E75891DEB7 ws_monitor_type;
typedef struct $95075738660B9B4CB06892FEACB5FF67 ws_motion_buffer;
typedef struct $F7C4AF0C299213A9A4902C0AE54D7168 ws_motion_history;
typedef struct $4674EB9E4136EBD6C3A84874FC613571 ws_pointer;
typedef struct $900F77A02661737FF1F7A40ED34FB854 ws_pointer_box;
typedef struct $0A340C8DACCDB841363CF5B63EC45822 ws_pointer_control;
typedef struct $002B57C8BB4B43007E200F40CE367FF9 ws_pointer_position;
typedef struct $A47B1BB0C7BE6B3A30FDB4F7B0959433 ws_pointer_report;
typedef struct $00F7B8E09565AD18E354C8D48A946CAE ws_power_mgt;
typedef struct $AACB5CE1DD77EC8BA8E6E904FB4AFD30 ws_screen_and_device_ioctl;
typedef struct $BEC1EAA441431C411FB6095FD63B6F3B ws_screen_box;
typedef struct $ECEE78C032EE5485C50D1889944D2C4D ws_screen_descriptor;
typedef struct $DC4D1089D25E9E473EA9E8C73460A48E ws_screen_functions;
typedef struct $BBDCCFC8AD59C4B5263DC5763E93416D ws_screen_ioctl;
typedef struct $51B346F0FD56B8F6A0022EA8D20F467C ws_screens;
typedef struct $01658B32220AFC536C48BC6A907CE1A2 ws_tablet_control;
typedef struct $A56011F2097EBD62321318BF15F58404 ws_video_control;
typedef struct $9A4AAE6A7007213335882EBC22A75B48 ws_visual_descriptor;
typedef struct $2E22270806C47E05D9B4938893A6CA7A xAllocColorCellsReply;
typedef struct $5C2B60FA26E73A1BF39A96E97412C65C xAllocColorCellsReq;
typedef struct $44DBA8761062EA5D0E0445C058A5F0FB xAllocColorPlanesReply;
typedef struct $91B6CB490464A345E007449761AA48F2 xAllocColorPlanesReq;
typedef struct $0A270F69B196F9EFA6F2CD4624EE5655 xAllocColorReply;
typedef struct $70E4CC7E54BA43D6E5622AB555079691 xAllocColorReq;
typedef struct $73B4058B96DB787648F70BEB3765CE40 xAllocNamedColorReply;
typedef struct $4E2DFB9F6290197309D31FB10928FA58 xAllocNamedColorReq;
typedef struct $A56827FA99728A529A1C213E34F0D83D xAllowDeviceEventsReq;
typedef struct $F3EFAA27463B93CC96181BFE5F29A4C5 xAllowEventsReq;
typedef struct _xAnyClassinfo xAnyClassInfo;
typedef struct _xAnyClassinfo *xAnyClassPtr;
typedef struct _xArc xArc;
typedef struct _xAxisInfo xAxisInfo;
typedef struct _xAxisInfo *xAxisInfoPtr;
typedef struct $F3F3BF8BE106A877DE7FC4D65D49358E xBellFeedbackCtl;
typedef struct $15B26EF61FAF3427F660B22EA1DD1EB1 xBellFeedbackState;
typedef struct $94C04A488373DB802AA4CC07AF27941B xBellReq;
typedef struct _xButtonInfo xButtonInfo;
typedef struct _xButtonInfo *xButtonInfoPtr;
typedef struct $9E547439B10E1F44156DCF6309E9ADBF xButtonState;
typedef struct $C1A851173DD816DDF7F0E0D062CEFEE2 xChangeActivePointerGrabReq;
typedef struct $A2FB221EC01549407EDCF016C4C0632F xChangeDeviceControlReply;
typedef struct $BCDE0020825236A8F8A72B60AFA7374C xChangeDeviceControlReq;
typedef struct $7B1AACD52ED53B3363F77B2C48FE4393 xChangeDeviceDontPropagateListReq;
typedef struct $28183F13DB7442E77993ED2BEDDC9E43 xChangeDeviceKeyMappingReq;
typedef struct $78B46019F679C5E70AAD7C2ED28277AC xChangeFeedbackControlReq;
typedef struct $0D0114D795552F54A79F202DB3226B55 xChangeGCReq;
typedef struct $FB619B5CE8E6B82A3D0938CCE57F62CA xChangeHostsReq;
typedef struct $925C5E9ADF13AF08F8E4BE2898EADC8C xChangeKeyboardControlReq;
typedef struct $A2FB221EC01549407EDCF016C4C0632F xChangeKeyboardDeviceReply;
typedef struct $8973D72E68A3D7427BDE924AB847E810 xChangeKeyboardDeviceReq;
typedef struct $F80E3F154E69694439090B67229FB6AA xChangeKeyboardMappingReq;
typedef struct $F88DFF0D39F146217256B482FD360ACC xChangeModeReq;
typedef struct $C19E6F380814408DFD31968534DDA3C5 xChangePointerControlReq;
typedef struct $A2FB221EC01549407EDCF016C4C0632F xChangePointerDeviceReply;
typedef struct $AD58CDA99C93F34C31A743157D5C3E5C xChangePointerDeviceReq;
typedef struct $56236F995320E9550D01648098F1E75E xChangePropertyReq;
typedef struct $EC87D4E5EFECFC4D155F79244EABA9BB xChangeSaveSetReq;
typedef struct $FCC23D59EDC7C9AEBCA8416FDF631F7E xChangeWindowAttributesReq;
typedef struct $7B203B1D6B17DB4D229BE0C85CFA6293 xCharInfo;
typedef struct $56F965C4CB1B37CA1C9344E914749FD8 xCirculateWindowReq;
typedef struct $53B2C5E872CF4691EFE90F887D66B7FD xClearAreaReq;
typedef struct $8973D72E68A3D7427BDE924AB847E810 xCloseDeviceReq;
typedef struct $48A6A373861130075F8524D5C353FEE6 xColorItem;
typedef struct $57E6A23A76D16D83EF023BCC9C7B7628 xConfigureWindowReq;
typedef struct $07A0BBE0F3D6D0E97B5A30869B6D39C4 xConnClientPrefix;
typedef struct $F19CD3A20937CEF33F3E2EF5E2D906EF xConnSetup;
typedef struct $D60B59C14E4F896E4A7591EB7765B14B xConnSetupPrefix;
typedef struct $F683121DA6B0B811B23B9D483FF7482A xConvertSelectionReq;
typedef struct $3B81704CAFF80915670BCDC93E5E5502 xCopyAreaReq;
typedef struct $DC32A0924BDC2649CEA8C5E8AC72EF13 xCopyColormapAndFreeReq;
typedef struct $D4B7CCBA990A156E447947BB060E0786 xCopyGCReq;
typedef struct $45331FD382D3B76DE50383933A2C35C9 xCopyPlaneReq;
typedef struct $7CA3BFA0E2ACF16B623A64955922766D xCreateColormapReq;
typedef struct $6FB552EA524F38554FA8528F506D34FD xCreateCursorReq;
typedef struct $0340F183E3D57BA98D278D6E8F4BBAEC xCreateGCReq;
typedef struct $6C531080E0330861B126A2833D727845 xCreateGlyphCursorReq;
typedef struct $1F1AC3FACFBF0931A43D0CD999C4D927 xCreatePixmapReq;
typedef struct $B76BD181BFDAF7E9381A1626C6C45722 xCreateWindowReq;
typedef struct $B6C2B50A2126E272B3960EB4DC4F6604 xDPMSCapableReply;
typedef struct $625DD72E42D2E4120693244DFAAD3348 xDPMSCapableReq;
typedef struct $625DD72E42D2E4120693244DFAAD3348 xDPMSDisableReq;
typedef struct $625DD72E42D2E4120693244DFAAD3348 xDPMSEnableReq;
typedef struct $ABE60368F0168DDE4E32B527D5287C6B xDPMSForceLevelReq;
typedef struct $7286F01C0F25CC9697D9D7CFCD5C4B3B xDPMSGetTimeoutsReply;
typedef struct $625DD72E42D2E4120693244DFAAD3348 xDPMSGetTimeoutsReq;
typedef struct $DA732864DAD897F0B587BCCAD8E078EE xDPMSGetVersionReply;
typedef struct $02B7C110B96F422043FD747664A5A945 xDPMSGetVersionReq;
typedef struct $81227E6A2E975B2588700A3A20196845 xDPMSInfoReply;
typedef struct $625DD72E42D2E4120693244DFAAD3348 xDPMSInfoReq;
typedef struct $F571D10236F18BD99A11DF3B50D0C123 xDPMSSetTimeoutsReq;
typedef struct $DF21E726BD65398407620C5BBBA9E08C xDeletePropertyReq;
typedef struct $3B00234C5998E2ECB70FFF97A8C8B026 xDepth;
typedef struct $FC3BB1A81303FA005E7D17D8401F89AB xDeviceBellReq;
typedef struct $DB64A8459715AF3CEFE23597C08B5967 xDeviceCtl;
typedef struct _xDeviceInfo xDeviceInfo;
typedef struct _xDeviceInfo *xDeviceInfoPtr;
typedef struct $3B895FF4AB049C141C5F7C25E8036379 xDeviceResolutionCtl;
typedef struct $2C268D9809C6E9DE2B818A0BB7518C2E xDeviceResolutionState;
typedef struct $DB64A8459715AF3CEFE23597C08B5967 xDeviceState;
typedef struct $4361408BED2235647FC2AC23AD3C77FE xETrapDataEvent;
typedef struct $2A2BB2E6A1A637B547E2DF81ADC3376A xError;
typedef struct _xEvent xEvent;
typedef struct $BDA7F7EC09C455D172B8FEBDBF052954 xFeedbackCtl;
typedef struct $BDA7F7EC09C455D172B8FEBDBF052954 xFeedbackState;
typedef struct _FillPolyReq xFillPolyReq;
typedef struct $45DCCDFC0525EE913BAEBC241F6FB2DF xFontProp;
typedef xChangeModeReq xForceScreenSaverReq;
typedef struct $091A8121C3C792D8858188DBB434C01C xFreeColorsReq;
typedef struct $33E0BD21BC9E25CB376AFEED9A297D0A xGenericReply;
typedef struct $8B1EAF7AAA57F33F38F96E94C6EE2E44 xGetAtomNameReply;
typedef struct $EE866C64B9E084E52F8894370051FA3D xGetDeviceButtonMappingReply;
typedef struct $8973D72E68A3D7427BDE924AB847E810 xGetDeviceButtonMappingReq;
typedef struct $A2FB221EC01549407EDCF016C4C0632F xGetDeviceControlReply;
typedef struct $C16308A46254792F555119C61B977CA2 xGetDeviceControlReq;
typedef struct $988632284A71C49D1170FC4598DEA165 xGetDeviceDontPropagateListReply;
typedef struct $625B72EC204AD184FA367A67F4C8645C xGetDeviceDontPropagateListReq;
typedef struct $76C432023C30A60D6F0CA03B71EF1A2A xGetDeviceFocusReply;
typedef struct $8973D72E68A3D7427BDE924AB847E810 xGetDeviceFocusReq;
typedef struct $88CB499CEF7C95AB64991FDC4A8C267A xGetDeviceKeyMappingReply;
typedef struct $6C8DA88AE0F795AA91A7651F5464995D xGetDeviceKeyMappingReq;
typedef struct $D0A230E2822E6F114388A4393E99A918 xGetDeviceModifierMappingReply;
typedef struct $8973D72E68A3D7427BDE924AB847E810 xGetDeviceModifierMappingReq;
typedef struct $38AB55CADF3218184FF2A828A7079C62 xGetDeviceMotionEventsReply;
typedef struct $FD8FCB430836D04139012301F63EB9C6 xGetDeviceMotionEventsReq;
typedef struct $CFD68B7ADBC82BE7EABF4FDEA780590F xGetExtensionVersionReply;
typedef struct $EF15DCB28339270802C69A46485DD45C xGetExtensionVersionReq;
typedef struct $092DD72AC6B9BBA1C79AF097B6F8E844 xGetFeedbackControlReply;
typedef struct $8973D72E68A3D7427BDE924AB847E810 xGetFeedbackControlReq;
typedef struct $8E1349AD4AC8D9A4F1DC84C54B0BE169 xGetFontPathReply;
typedef struct $37BE2491590EE7EB76B44447C3CB76CA xGetGeometryReply;
typedef struct $1E68C84E6BE3B673D767CBEC47B3DECA xGetImageReply;
typedef struct $4DCAC2088B3F168EF4BFBCEA383ECFD2 xGetImageReq;
typedef struct $8E9D6FDA341A5CD3E2BA41AECEFC8DB5 xGetInputFocusReply;
typedef struct $A35F2E1A5E531ECFC152E2BA15F78A6A xGetKeyboardControlReply;
typedef struct $E5FEC4B44082A4B8B21FC86BB58EB49C xGetKeyboardMappingReply;
typedef struct $9A79A86C67FC8B79D589DEFE9BCD3BC9 xGetKeyboardMappingReq;
typedef struct $0702AFAE85E523028461380896C86760 xGetModifierMappingReply;
typedef struct $53A84E5818A8BF56A6CBC41177A9FFE2 xGetMotionEventsReply;
typedef struct $DB0E3B2132CB3BCDB478CD47716D7AA6 xGetMotionEventsReq;
typedef struct $019CECDD6753AAB6598130682127E88A xGetPointerControlReply;
typedef struct $F38DCD124B444AE28722F96474B80F5D xGetPointerMappingReply;
typedef struct $D70593ABB97D9ADE4A069324C98D63AE xGetPropertyReply;
typedef struct $F0BD037E525ACFEA0C1F272EFA8FD580 xGetPropertyReq;
typedef struct $621D16500987A711CC39A0AD4484DBF8 xGetScreenSaverReply;
typedef struct $90B3239242A1E7B072ABC9D9983310BF xGetSelectedExtensionEventsReply;
typedef struct $625B72EC204AD184FA367A67F4C8645C xGetSelectedExtensionEventsReq;
typedef struct $286A111ACEDB435E271A47289B65D34E xGetSelectionOwnerReply;
typedef struct $2E381990D243D58AF2A1DAAABF4281C8 xGetWindowAttributesReply;
typedef struct $03C803DDC9061B143F519D4D73BD5571 xGrabButtonReq;
typedef struct $5763F2EC7349805D26B2ED34581CC2B6 xGrabDeviceButtonReq;
typedef struct $37CF6FD3D8604C440825361FBCF768B5 xGrabDeviceKeyReq;
typedef struct $A2FB221EC01549407EDCF016C4C0632F xGrabDeviceReply;
typedef struct $EDE17C06FAF221A5878FFED27CF569B6 xGrabDeviceReq;
typedef struct $FEC8B8888F3B689040694BF1F630E941 xGrabKeyReq;
typedef xGrabPointerReply xGrabKeyboardReply;
typedef struct $94FA839E2A2E2CDB2FF04022E6E0CAA1 xGrabKeyboardReq;
typedef struct $8C544AC6C871408AE6573DA61B3B8C70 xGrabPointerReply;
typedef struct $79FC17A0C7A3F31E1105D33CC8C2AA30 xGrabPointerReq;
typedef struct $9B4395DE66E8574EC0897BBFC5E468E1 xHostEntry;
typedef xImageTextReq xImageText16Req;
typedef xImageTextReq xImageText8Req;
typedef struct $D53EE25F80C41C95CC04B700465E64D8 xImageTextReq;
typedef struct $24B457447694156ACAE248300D57FA49 xInputClassInfo;
typedef struct $B9DE48622BE1A30E91ED1262299F48A0 xIntegerFeedbackCtl;
typedef struct $37650F220AC0903949A382F68D80E2E0 xIntegerFeedbackState;
typedef struct $FA4FE0B2CA883E06053CBA1706060353 xInternAtomReply;
typedef struct $7A455DB3BD331D79AF16B3231F86E0C5 xInternAtomReq;
typedef struct $284506C979FEDDB504B5CAD235C82ADC xKMEDoKBModeSwitchRep;
typedef struct $3E42998FDDC5C684862E73CB30E5D264 xKMEDoKBModeSwitchReq;
typedef struct $1BAE1FE6DB6FC78B3C7B94C189E05017 xKbdFeedbackCtl;
typedef struct $4F763A7D3653D2254F75B054CBA6F0C5 xKbdFeedbackState;
typedef struct _xKeyInfo xKeyInfo;
typedef struct _xKeyInfo *xKeyInfoPtr;
typedef struct $E985CC5BCD47EAFD9A20CA5B2CDE74AE xKeyState;
typedef struct $34681C3D6FB58953006C9844DC50C14F xKeymapEvent;
typedef struct $95FA76242027CA03F9C53902C97D80C2 xLedFeedbackCtl;
typedef struct $95FA76242027CA03F9C53902C97D80C2 xLedFeedbackState;
typedef struct $5E8F645B7662834A694E868B27EBBB24 xListExtensionsReply;
typedef struct $57642C20A930BC40CC56BFA51EFC45F8 xListFontsReply;
typedef struct $292923DDD4ED46EE83D974C820DC3932 xListFontsReq;
typedef struct $92276D725373BB3B16F8CB5C6778E662 xListFontsWithInfoReply;
typedef xListFontsReq xListFontsWithInfoReq;
typedef struct $EF54914952AB89C7E0EBAF949772487D xListHostsReply;
typedef struct $B4F2C86EC2AFA3B90E8AE0EA0F71367B xListHostsReq;
typedef struct $38BC431CF83E096863532D796A6E7F77 xListInputDevicesReply;
typedef struct $3BEEF239534EE9E2D4AD58999E56F197 xListInputDevicesReq;
typedef struct $56876A3CF1ED32735E0999A0D66A4738 xListInstalledColormapsReply;
typedef struct $C65DFB72B3FBEEE777E9E71274DF712D xListPropertiesReply;
typedef struct $79D3745B39F9E71262BFBA7985E1C7DE xLookupColorReply;
typedef struct $4E2DFB9F6290197309D31FB10928FA58 xLookupColorReq;
typedef struct $80262239D5DEFAC7F5C75EBAC6CCD93C xOpenDeviceReply;
typedef struct $8973D72E68A3D7427BDE924AB847E810 xOpenDeviceReq;
typedef struct $431497C136870E9873948068EF0F03D8 xOpenFontReq;
typedef struct $C201FB0F2222C07B40D490F1CBB06D58 xPanoramiXGetScreenCountReply;
typedef struct _PanoramiXGetScreenCount xPanoramiXGetScreenCountReq;
typedef struct $1E42E411FAE309B90570872BD6DA89F0 xPanoramiXGetScreenSizeReply;
typedef struct _PanoramiXGetScreenSize xPanoramiXGetScreenSizeReq;
typedef struct $D467916C3587874006E0A38FD04B2C07 xPanoramiXGetStateReply;
typedef struct _PanoramiXGetState xPanoramiXGetStateReq;
typedef struct $7C0193CACD5E2992F63533D0F1598B1A xPanoramiXQueryVersionReply;
typedef struct _PanoramiXQueryVersion xPanoramiXQueryVersionReq;
typedef struct $5C0DD3C4E70CCCC9965B24A6BE5ED8FB xPixmapFormat;
typedef struct _xPoint xPoint;
typedef xPolySegmentReq xPolyArcReq;
typedef xPolySegmentReq xPolyFillArcReq;
typedef xPolySegmentReq xPolyFillRectangleReq;
typedef xPolyPointReq xPolyLineReq;
typedef struct $82D86B5B3C9D9E6A7BE98808A956EE82 xPolyPointReq;
typedef xPolySegmentReq xPolyRectangleReq;
typedef struct $77B5DA89F8222E8D6D7C1ABF47542A30 xPolySegmentReq;
typedef xPolyTextReq xPolyText16Req;
typedef xPolyTextReq xPolyText8Req;
typedef struct $4C0A166D0FCB5B830093FB9F7D7DFC34 xPolyTextReq;
typedef struct _xPrintAttributeEvent xPrintAttributeEvent;
typedef struct _PrintCreateContext xPrintCreateContextReq;
typedef struct _PrintDestroyContext xPrintDestroyContextReq;
typedef struct _PrintEndDoc xPrintEndDocReq;
typedef struct _PrintEndJob xPrintEndJobReq;
typedef struct _PrintEndPage xPrintEndPageReq;
typedef struct $4C65BE1067297C4FADB11C7C25C29C00 xPrintGetAttributesReply;
typedef struct _PrintGetAttributes xPrintGetAttributesReq;
typedef struct $4DAB985EC804DF06DE833983110A4312 xPrintGetContextReply;
typedef struct _PrintGetContext xPrintGetContextReq;
typedef struct $FCBEDAD8A539FBE868C0633AE68719B3 xPrintGetContextScreenReply;
typedef struct _PrintGetContextScreen xPrintGetContextScreenReq;
typedef struct $F464FEA7A4E5B570917C7E6E5C96B7A9 xPrintGetDocumentDataReply;
typedef struct _PrintGetDocumentData xPrintGetDocumentDataReq;
typedef struct $4A647C60455AE07B29957B156A9865A4 xPrintGetImageResolutionReply;
typedef struct _PrintGetImageResolution xPrintGetImageResolutionReq;
typedef struct $86549870A56B750901787CF4B94C9DDE xPrintGetOneAttributeReply;
typedef struct _PrintGetOneAttribute xPrintGetOneAttributeReq;
typedef struct $160BFFB979B4E4E895FB2627A5A1E75F xPrintGetPageDimensionsReply;
typedef struct _PrintGetPageDimensions xPrintGetPageDimensionsReq;
typedef struct $DAEBDFCF6641BEDF5371E5E95CD6FE55 xPrintGetPrinterListReply;
typedef struct _PrintGetPrinterList xPrintGetPrinterListReq;
typedef struct $D498926E8696BF91244D867CE73FD66E xPrintInputSelectedReply;
typedef struct _PrintInputSelected xPrintInputSelectedReq;
typedef struct _xPrintPrintEvent xPrintPrintEvent;
typedef struct _PrintPutDocumentData xPrintPutDocumentDataReq;
typedef struct $DAEBDFCF6641BEDF5371E5E95CD6FE55 xPrintQueryScreensReply;
typedef struct _PrintQueryScreens xPrintQueryScreensReq;
typedef struct $884E74C734502FDAE5886BDFF852D3B6 xPrintQueryVersionReply;
typedef struct _PrintQueryVersion xPrintQueryVersionReq;
typedef struct _PrintRehashPrinterList xPrintRehashPrinterListReq;
typedef struct _PrintSelectInput xPrintSelectInputReq;
typedef struct _PrintSetAttributes xPrintSetAttributesReq;
typedef struct _PrintSetContext xPrintSetContextReq;
typedef struct $0938F46EF6BF1A288D23C461D10040B7 xPrintSetImageResolutionReply;
typedef struct _PrintSetImageResolution xPrintSetImageResolutionReq;
typedef struct _PrintStartDoc xPrintStartDocReq;
typedef struct _PrintStartJob xPrintStartJobReq;
typedef struct _PrintStartPage xPrintStartPageReq;
typedef struct $08E7BB45AF45164209AD32D6030ECBA7 xPtrFeedbackCtl;
typedef struct $1A669B82059DE4CB2E4065120B43A549 xPtrFeedbackState;
typedef struct _PutImageReq xPutImageReq;
typedef struct $9990F7522FA29648C94CCC0846165B95 xQueryBestSizeReply;
typedef struct $9A7B13471624AF49EBC2FC2C06B8FE16 xQueryBestSizeReq;
typedef struct $3C4C38FC10522588E30AD31A846C8E7D xQueryColorsReply;
typedef struct $7905F1106D6192C786F48B3D63EB8F32 xQueryColorsReq;
typedef struct $19958847318214F780EFE5EAB3B1A0C9 xQueryDeviceStateReply;
typedef struct $8973D72E68A3D7427BDE924AB847E810 xQueryDeviceStateReq;
typedef struct $C32D75228195D08F6D42072DC87ED14F xQueryExtensionReply;
typedef struct $32453B3EC12C1083BBBEA47A258ADABA xQueryExtensionReq;
typedef struct _xQueryFontReply xQueryFontReply;
typedef struct $27AC02CFF97A742F93959B98FA171589 xQueryKeymapReply;
typedef struct $616DFE8EE921B679729534094133FEFF xQueryPointerReply;
typedef struct $C30FF1240D2A8075F6967DECC9305E3F xQueryTextExtentsReply;
typedef struct $F21D8018CF145B47A329D27C35E96B99 xQueryTextExtentsReq;
typedef struct $DDAC1D07D44FFC2E5C65864F60CCE1DF xQueryTreeReply;
typedef struct $1463B1446DFC3BE3591F88FAF0B4315C xRecolorCursorReq;
typedef RECORD_CLIENT_INFO xRecordClientInfo;
typedef struct $791AF81D366397FAE28AFC7E5E3FF4B5 xRecordCreateContextReq;
typedef struct $6ECE5F7C46F37A2EF909042FBC6F3E21 xRecordDisableContextReq;
typedef struct $2D59FDEE4261500A2FE9AC0FF5270F5C xRecordEnableContextReply;
typedef struct $6ECE5F7C46F37A2EF909042FBC6F3E21 xRecordEnableContextReq;
typedef struct $6ECE5F7C46F37A2EF909042FBC6F3E21 xRecordFreeContextReq;
typedef struct $3208E1BA8126707DC1A488F29A0DED72 xRecordGetContextReply;
typedef struct $6ECE5F7C46F37A2EF909042FBC6F3E21 xRecordGetContextReq;
typedef struct $B16FC8566897364FB8F68A61B8D500EB xRecordQueryVersionReply;
typedef struct $AAD257271AAA9A190B14D3482C45D035 xRecordQueryVersionReq;
typedef struct $F0B6F56018B35AE6D958AA393C56DA44 xRecordRange;
typedef struct $791AF81D366397FAE28AFC7E5E3FF4B5 xRecordRegisterClientsReq;
typedef struct $E997A7E9262D40FC83356A066D96F704 xRecordUnregisterClientsReq;
typedef struct _xRectangle xRectangle;
typedef struct $FF2B271BD07173775CE163A4BE842405 xReparentWindowReq;
typedef union $B20031452D9C70A13D819C8DDA3A0BA9 xReply;
typedef struct _xReq xReq;
typedef struct $A23F2D0A331F720D631E2B6171CC3ECA xResourceReq;
typedef struct $F8536B884003ADBD90188302B8AD267C xRotatePropertiesReq;
typedef struct _ScreenSaverNotify xScreenSaverNotifyEvent;
typedef struct $27012E1913B84130F58F820F1C74F43D xScreenSaverQueryInfoReply;
typedef struct _ScreenSaverQueryInfo xScreenSaverQueryInfoReq;
typedef struct $0E536A4A735E73BADC27E9D377D18348 xScreenSaverQueryVersionReply;
typedef struct _ScreenSaverQueryVersion xScreenSaverQueryVersionReq;
typedef struct _ScreenSaverSelectInput xScreenSaverSelectInputReq;
typedef struct _ScreenSaverSetAttributes xScreenSaverSetAttributesReq;
typedef struct _ScreenSaverUnsetAttributes xScreenSaverUnsetAttributesReq;
typedef struct _xSecurityAuthorizationRevokedEvent xSecurityAuthorizationRevokedEvent;
typedef struct $2A5F331BE8D13DBE7F0EFE2DE0745FC4 xSecurityGenerateAuthorizationReply;
typedef struct $F2ECD6480817AB9433FAAAFCD2A3757B xSecurityGenerateAuthorizationReq;
typedef struct $B16FC8566897364FB8F68A61B8D500EB xSecurityQueryVersionReply;
typedef struct $A4DBC252F7392490EC4C7D58273D4CD1 xSecurityQueryVersionReq;
typedef struct $0D158C80ECE88D73A8DF0C6BE4079214 xSecurityRevokeAuthorizationReq;
typedef struct _xSegment xSegment;
typedef struct $8BD856D0EABB45DC0AE6203B505E4C05 xSelectExtensionEventReq;
typedef struct $7250734D77F79F0949305E641023FE62 xSendEventReq;
typedef struct $2A859DA02CD5E3593B5918B42FA7FFEB xSendExtensionEventReq;
typedef xChangeModeReq xSetAccessControlReq;
typedef struct $5E29C5FF94304EAD83140C47151323A4 xSetClipRectanglesReq;
typedef xChangeModeReq xSetCloseDownModeReq;
typedef struct $1296C23E7EDA709A08D87BF116515624 xSetDashesReq;
typedef struct $748E6396DB81A71CC67026C5868B0A61 xSetDeviceButtonMappingReply;
typedef struct $C785CF6C4EEFEB89ECBC9FAC0351909D xSetDeviceButtonMappingReq;
typedef struct $F1FFDF0E76C6F940FFACBA8A13B33CEB xSetDeviceFocusReq;
typedef struct $A2FB221EC01549407EDCF016C4C0632F xSetDeviceModeReply;
typedef struct $EDCAE6FAA77F2844B16FB7E0B618EDD7 xSetDeviceModeReq;
typedef struct $5F1426FF167D9E06CE7F137AEA610D0C xSetDeviceModifierMappingReply;
typedef struct $BB279EA07E8836E412716D1B8B41E21D xSetDeviceModifierMappingReq;
typedef struct $A2FB221EC01549407EDCF016C4C0632F xSetDeviceValuatorsReply;
typedef struct $29C593C589279C3E7D511580F3E78129 xSetDeviceValuatorsReq;
typedef struct $069CA722659D31B5E21E1ACEADA10473 xSetFontPathReq;
typedef struct $60FD28E41E68D30D206D9EC072DAC7C8 xSetInputFocusReq;
typedef struct $FE8C559F4B68F5A3A5D9DBCE5E9919CF xSetMappingReply;
typedef xSetMappingReply xSetModifierMappingReply;
typedef struct $F1472F09D9F4F4B2B771740E265DAEF8 xSetModifierMappingReq;
typedef xSetMappingReply xSetPointerMappingReply;
typedef struct $0C1A989C237847E9E0FEF5D20B714342 xSetPointerMappingReq;
typedef struct $A27B2EF13B029B6AC017266492BED372 xSetScreenSaverReq;
typedef struct $3C68DE36615A2A96935F4E8A62136411 xSetSelectionOwnerReq;
typedef struct $19693695DDDB2418BB239CA625D4A495 xSmtAttachReply;
typedef struct _SmtAttach xSmtAttachReq;
typedef struct $68BE656924C43E465EAB0504C26903EC xSmtQueryVersionReply;
typedef struct _SmtQueryVersion xSmtQueryVersionReq;
typedef struct _SmtWakeup xSmtWakeupEvent;
typedef struct _SmtWakeupServer xSmtWakeupServerReq;
typedef struct $7905F1106D6192C786F48B3D63EB8F32 xStoreColorsReq;
typedef struct $C7406CB336B739A87F2A2E6FB42BC742 xStoreNamedColorReq;
typedef struct $6AD1C0C303B7C98984BF80315D836E89 xStringFeedbackCtl;
typedef struct $5D605798B949FE2847BA0CD5F658BE18 xStringFeedbackState;
typedef struct $F466B234F46A211DC597B6DC6FDB33CA xTestFakeAckEvent;
typedef struct $221FB40353091864D31474CD79EAAEF6 xTestFakeInputReq;
typedef struct $3369594E17BD6DC3517892D04DD0216E xTestGetInputReq;
typedef struct $9D6FB564ED57422FFB268B9144C446E8 xTestInputActionEvent;
typedef struct $8AC915922B7872008F9FA0F659707AB7 xTestQueryInputSizeReply;
typedef struct $5CD0DDA75FC8A64FD62E45433429A157 xTestQueryInputSizeReq;
typedef struct $5CD0DDA75FC8A64FD62E45433429A157 xTestResetReq;
typedef struct $5CD0DDA75FC8A64FD62E45433429A157 xTestStopInputReq;
typedef struct $F1DC5359840258F1056D6AC9280CBC0A xTextElt;
typedef struct $83A9560127C5CA1AF601DD4E7C3B278F xTimecoord;
typedef struct $0F4B06D36BC906735A699C1D59FCE038 xTranslateCoordsReply;
typedef struct $BC0C03DE100E0ADBA9BE7AF77D01715A xTranslateCoordsReq;
typedef struct $37A9DB4B311662424B6FA129E06762F1 xUngrabButtonReq;
typedef struct $AC93509FFB6B9C1B98C9154A5D973C79 xUngrabDeviceButtonReq;
typedef struct $9C8855C5416F841FBC956426CB420C87 xUngrabDeviceKeyReq;
typedef struct $F57445CCAF99E2554B974CAECD301767 xUngrabDeviceReq;
typedef struct $9DF5225FB79C7EC3237B4B73EEC9C169 xUngrabKeyReq;
typedef struct _xValuatorInfo xValuatorInfo;
typedef struct _xValuatorInfo *xValuatorInfoPtr;
typedef struct $75E019FCB4A579099C3FEBED6B229425 xValuatorState;
typedef struct $CB0632EF2409CFA4902D18F029698548 xVisualType;
typedef struct $F52D9FC92091A8183F87E95DDBDC622D xWarpPointerReq;
typedef struct $E0F65D5058ACC2BC5F9AF2EDFFAF29D1 xWindowRoot;
typedef struct $326076F7099E6F08FACB2F19F051A23E xXTrapConfigReq;
typedef struct $4E78C26E658CAF0AD1368496874A57C9 xXTrapGetAvailReply;
typedef struct $555515E43BC9CF64AF390C3AB1002B52 xXTrapGetCurReply;
typedef struct $23528D99DB311AE570394A3CCFCAFAB2 xXTrapGetLITimReply;
typedef struct $0C717C2A96F31E63806E7AEC00F2A098 xXTrapGetReq;
typedef struct $DBE3D025CF6B61E7535360E73F7BAA3C xXTrapGetStatsReply;
typedef struct $C6945E03756C0EFF0E3D4BF179417A01 xXTrapGetVersReply;
typedef struct $FF07158C3282A916C3A4C5C72C8100CA xXTrapInputReq;
typedef struct $B88A4CA2F1F645428AB97EBD99B32A47 xXTrapReq;
typedef struct _XagCreateAssoc xXagCreateAssocReq;
typedef struct _XagCreate xXagCreateReq;
typedef struct _XagDestroyAssoc xXagDestroyAssocReq;
typedef struct _XagDestroy xXagDestroyReq;
typedef struct $156582BC64AB1AAF420D779DD65E4F37 xXagGetAttrReply;
typedef struct _XagGetAttr xXagGetAttrReq;
typedef struct $B39400A659C1078B091D331E19541038 xXagQueryReply;
typedef struct _XagQuery xXagQueryReq;
typedef struct $EFD6C7D4777DD13E0B1CDD145692A98C xXagQueryVersionReply;
typedef struct _XagQueryVersion xXagQueryVersionReq;
struct xauth {unsigned __int16 family;unsigned __int16 address_length;char *address;unsigned __int16 number_length;char *number;unsigned __int16 name_length;char *name;unsigned __int16 data_length;char *data;};
typedef struct $BACF50A2794925434A2FB058E0438A94 xcomp_t;
typedef pthread_cond_t xcondition_rec;
typedef xcondition_rec *xcondition_t;
typedef enum $D44E3C4FF335410EC7120A246FFC2300 xdmOpCode;
typedef enum $EBA0A3D002EB22B329BE0C1D617FB8B6 xdmcp_states;
struct xdr_discrim {int value;xdrproc_t proc;};
enum xdr_op {XDR_ENCODE = 0x0,XDR_DECODE = 0x1,XDR_FREE = 0x2,};
typedef int (*xdrproc_t)();
typedef struct $58FAD93ADC8A41E6E41FB2BF3A4FCE08 xieAbortReq;
typedef struct $58FAD93ADC8A41E6E41FB2BF3A4FCE08 xieAwaitReq;
typedef struct $F45EAA3ACE353930A02675094AE49F50 xieColorAllocEvn;
typedef struct $272B86F1CC556AC2FE1FEA8F3F6F9065 xieCreateColorListReq;
typedef struct $26E851949BDE2473590BDE12DE36451F xieCreateLUTReq;
typedef struct $58964FFE81FF7A5F550F9B44561E3FD1 xieCreatePhotofloReq;
typedef struct $2017A4559BD8DFB36CC7B04C7F93BD32 xieCreatePhotomapReq;
typedef struct $51749B1CBB08500DC0A3C077F7082133 xieCreatePhotospaceReq;
typedef struct $5E04D711070F28523D4888D880E8635D xieCreateROIReq;
typedef struct $504B016FD037AF4CEAA065367FBF726A xieDecodeNotifyEvn;
typedef struct $272B86F1CC556AC2FE1FEA8F3F6F9065 xieDestroyColorListReq;
typedef struct $26E851949BDE2473590BDE12DE36451F xieDestroyLUTReq;
typedef struct $D0F4880E5E163BC8F27E9DD5F5B3C82C xieDestroyPhotofloReq;
typedef struct $2017A4559BD8DFB36CC7B04C7F93BD32 xieDestroyPhotomapReq;
typedef struct $51749B1CBB08500DC0A3C077F7082133 xieDestroyPhotospaceReq;
typedef struct $5E04D711070F28523D4888D880E8635D xieDestroyROIReq;
typedef struct $46D157C3B2262130CAD8633945DA87DB xieExecuteImmediateReq;
typedef struct $7B44642C0B26E972D25A29993171BE3B xieExecutePhotofloReq;
typedef struct $A139F5C23E4C0799A30BDE721D46880D xieExportAvailableEvn;
typedef struct $E87A67B62710FC3E5EEA1F2EA7C46530 xieFlo;
typedef struct $9CB99F55F4760567A5B7FA05D1482C33 xieFloAccessErr;
typedef struct $9CB99F55F4760567A5B7FA05D1482C33 xieFloAllocErr;
typedef struct $53A371D93AFA762A16435064A7495B18 xieFloArithmetic;
typedef struct $5844B3F658E992D348A8DA77109E2376 xieFloBandCombine;
typedef struct $CC9CB7E336EEB9C8B38770A3248C8F6D xieFloBandExtract;
typedef struct $AD97566547E5F77323709B4B3562439C xieFloBandSelect;
typedef struct $603DBFA11DE2EC77704AC2D2BE78752D xieFloBlend;
typedef struct $E6EABA4AA22781602E84D1DF4DA6148F xieFloCompare;
typedef struct $75A587EC71D839727FF00E499DB42A24 xieFloConstrain;
typedef struct $C01B768C719C076F1885128ECB0E2F3B xieFloConvertFromIndex;
typedef struct $04BE85DF42EB3710F3E3DA7E472F659C xieFloConvertFromRGB;
typedef struct $C1D1DCE5A0B9F389C9FAA487FACA5708 xieFloConvertToIndex;
typedef struct $B5CF7BA2901ABDB4A7D5E18D4AD5B79B xieFloConvertToRGB;
typedef struct $600CE1F1415CC4FBB5A956C0A4B10C91 xieFloConvolve;
typedef struct $6F769F3251074F30549E39033985F8DC xieFloDither;
typedef struct $13C5E316447D80627E30BA16FBD8BA91 xieFloDomainErr;
typedef struct $9CB99F55F4760567A5B7FA05D1482C33 xieFloElementErr;
typedef struct $9CB99F55F4760567A5B7FA05D1482C33 xieFloErr;
typedef struct $0816025FBD9D05C7C86BC1E774A2CFFD xieFloEvn;
typedef struct $4C2068F4FA5FD804D09687C78D10F64A xieFloExportClientHistogram;
typedef struct $E32A7B8F021520E59B05D2002875B75A xieFloExportClientLUT;
typedef struct $3518B1C16AD615E8887B1326F3EF5649 xieFloExportClientPhoto;
typedef struct $55E5FD3CD940068B4EF67AAE284651A9 xieFloExportClientROI;
typedef struct $6971C49ED543898CFDE2AB3CD1189B70 xieFloExportDrawable;
typedef struct $6971C49ED543898CFDE2AB3CD1189B70 xieFloExportDrawablePlane;
typedef struct $43F413DFE76D84785171E4F932967C4F xieFloExportLUT;
typedef struct $BA021C9E98B12E79B733DF8F1A0CE5B1 xieFloExportPhotomap;
typedef struct $2D0C20B301ADA5F52D6F367B663BBC22 xieFloExportROI;
typedef struct $8D5227D256EF5B5AEB1F500684CBE9EC xieFloGeometry;
typedef struct $552C52AB05687DD02B6759D4331D5B07 xieFloIDErr;
typedef struct $9CB99F55F4760567A5B7FA05D1482C33 xieFloImplementationErr;
typedef struct $8EA7A0D2C6C155A9C144BE737FA9135D xieFloImportClientLUT;
typedef struct $AC5C9E6D1F0E0913CA2851FF4338E565 xieFloImportClientPhoto;
typedef struct $2B0FE3CE97643252456137D89C9199E9 xieFloImportClientROI;
typedef struct $C501B637C9D373C8193961C468F52341 xieFloImportDrawable;
typedef struct $13A9DBF3EA1FE7F1698AD8D67A77FD73 xieFloImportDrawablePlane;
typedef struct $E62B5AAF61A421D071E8F87B1ACD88C8 xieFloImportLUT;
typedef struct $2B4C97E383E567F029CDA6243F5AAF9B xieFloImportPhotomap;
typedef struct $3D4A26743286481CAEF9451FC80F9AE7 xieFloImportROI;
typedef struct $9CB99F55F4760567A5B7FA05D1482C33 xieFloLengthErr;
typedef struct $0A94BDF67700F0EDACCA5D00231D7516 xieFloLogical;
typedef struct $9CB99F55F4760567A5B7FA05D1482C33 xieFloMatchErr;
typedef struct $2BF13069EBDEE5493612AD0930AE3BF3 xieFloMatchHistogram;
typedef struct $D14CA9F2C40E9D75D49C7FD5AB893FCE xieFloMath;
typedef struct $F3865DA4DAB27EA9EE192F5975BA54C3 xieFloOperatorErr;
typedef struct $A38AB1DC10BE37D6B74E3A62DF3167E7 xieFloPasteUp;
typedef struct $C735D198080D0544DA6E87E89A47BA62 xieFloPoint;
typedef struct $A02A59C49A68940E162F3D6545A6687B xieFloResourceErr;
typedef struct $9CB99F55F4760567A5B7FA05D1482C33 xieFloSourceErr;
typedef struct $08D1E73019D0DDEC0EBB545A043C5282 xieFloTechniqueErr;
typedef struct $56F59331F03F8FDAB1249A71F6343C1C xieFloUnconstrain;
typedef struct $8F45B6188928CD01F0FDE0FF1AAE7BC1 xieFloValueErr;
typedef struct $E0D258F3248B038EE90F289455DE9392 xieGetClientDataReply;
typedef struct $53791A33E2911636F452B242C84B4B8B xieGetClientDataReq;
typedef struct $7E67FD4F3DB69CB7DBA92A468D15DC0A xieImportObscuredEvn;
typedef struct $61ABC0BA638790D6FE8B525E20E3EE79 xieModifyPhotofloReq;
typedef struct $A9429A734A24E6AA93342D0A902F5447 xiePhotofloDoneEvn;
typedef struct $272B86F1CC556AC2FE1FEA8F3F6F9065 xiePurgeColorListReq;
typedef struct $18654165D8B17DA3E357B0DE9180FFF7 xiePutClientDataReq;
typedef struct $808EA0A767ABACCBD96646A8EAE3059A xieQueryColorListReply;
typedef struct $272B86F1CC556AC2FE1FEA8F3F6F9065 xieQueryColorListReq;
typedef struct $C00C0DA83216725D22F9B6B75E95FFE0 xieQueryImageExtensionReply;
typedef struct $6CA79B54BE0B8C15E4B81B027FF362F3 xieQueryImageExtensionReq;
typedef struct $57A765EA942AE9D5162F8EADA05AB765 xieQueryPhotofloReply;
typedef struct $58FAD93ADC8A41E6E41FB2BF3A4FCE08 xieQueryPhotofloReq;
typedef struct $7632AA8F19CB8AF724198E208337AAF8 xieQueryPhotomapReply;
typedef struct $2017A4559BD8DFB36CC7B04C7F93BD32 xieQueryPhotomapReq;
typedef struct $0A62F3378E7EE0C32D1AC7B808E76453 xieQueryTechniquesReply;
typedef struct $4CEA7C0856663FB37AE47FD9F99BB511 xieQueryTechniquesReq;
typedef struct $58964FFE81FF7A5F550F9B44561E3FD1 xieRedefinePhotofloReq;
typedef struct $A72D5FE34FE1565D7A5E27361D12995E xieReq;
typedef struct $5D8B4C88FE874254192A5C2673EF8027 xieResourceErr;
typedef struct $A1E1CD086B71954ED0C94A8A26B6C32D xieTecCIELabToRGB;
typedef struct $A1E1CD086B71954ED0C94A8A26B6C32D xieTecCIEXYZToRGB;
typedef struct $59351FDCD0841299E6F657798DC5AE28 xieTecClipScale;
typedef struct $43F66B9FAB512FEC0C912857172689FE xieTecColorAllocAll;
typedef struct $6BAE8AC6C2E6EF04B701C3F9CD3D4D29 xieTecColorAllocMatch;
typedef struct $E9462818A0BC0C67C7E517AB6B971B97 xieTecColorAllocRequantize;
typedef struct $C277BFB7EDBCB4B16FDC5D70401A7F72 xieTecConvolveConstant;
typedef struct $ACF034D5104D0F5B8D12F5FF38C4FBA5 xieTecDecodeG31D;
typedef struct $ACF034D5104D0F5B8D12F5FF38C4FBA5 xieTecDecodeG32D;
typedef struct $ACF034D5104D0F5B8D12F5FF38C4FBA5 xieTecDecodeG42D;
typedef struct $87E061934EE6919F8EE4F5F65571C106 xieTecDecodeJPEGBaseline;
typedef struct $10F8C4C81A02E8CC11279456BCE6E63F xieTecDecodeJPEGLossless;
typedef struct $ACF034D5104D0F5B8D12F5FF38C4FBA5 xieTecDecodeTIFF2;
typedef struct $4CF2A723A8F4F5EA6EDE16F5794DEA22 xieTecDecodeTIFFPackBits;
typedef struct $63AF34F92436E0E20A119355607DCC44 xieTecDecodeUncompressedSingle;
typedef struct $C08104BD47142265B42A3F745A07258E xieTecDecodeUncompressedTriple;
typedef struct $9C384A9E423E8568FC322ED8773458C9 xieTecDitherOrdered;
typedef struct $1B017AC3620941E612639F23B92A9141 xieTecEncodeG31D;
typedef struct $A8C26958E47A670C8BA111DF3C373603 xieTecEncodeG32D;
typedef struct $A27389B7F44473FD8046F73BDABEA635 xieTecEncodeG42D;
typedef struct $45D688CB45E801EDDCD39001FBABF3CD xieTecEncodeJPEGBaseline;
typedef struct $3281815EF510FB5432D1AC4F74C6C79F xieTecEncodeJPEGLossless;
typedef struct $EBFCC0D8AA2B58B235FECAF898781E22 xieTecEncodeServerChoice;
typedef struct $66DA73451B2C91DDB1D8B91FCC8B26BF xieTecEncodeTIFF2;
typedef struct $2B28F023E44E807B69CBD6D694D8FE1D xieTecEncodeTIFFPackBits;
typedef struct $9E6AFD3F610E739A7AC12834FF3A90B2 xieTecEncodeUncompressedSingle;
typedef struct $E1CA6FCDCEF9A9C396CC3F3CDC444223 xieTecEncodeUncompressedTriple;
typedef struct $D3BD8D5467099E62AC519BE3BD77B02F xieTecGeomAntialiasByArea;
typedef struct $064F821DAAD25287F43010D2D1702E84 xieTecGeomAntialiasByLowpass;
typedef struct $7BDACCE6E93DF8E6ADBB258A595CFD05 xieTecGeomGaussian;
typedef struct $BD2C716F10DB95031F526D8F604B25D1 xieTecGeomNearestNeighbor;
typedef struct $EDB1A22D9B31A401FCB33FE96D068C50 xieTecHistogramGaussian;
typedef struct $65B902F391CFF156201AD47DA98B3D7B xieTecHistogramHyperbolic;
typedef struct $D20D275EAB1226EC1C38DFF3333DCDF2 xieTecRGBToCIELab;
typedef struct $D20D275EAB1226EC1C38DFF3333DCDF2 xieTecRGBToCIEXYZ;
typedef struct $7228480D3079CE2808B81A1C1362B902 xieTecRGBToYCC;
typedef struct $6AE5D21AAEA04E1B024F0DA11C966966 xieTecRGBToYCbCr;
typedef struct $DDC886CE58B08A3828A7006540E329D9 xieTecWhiteAdjustCIELabShift;
typedef struct $E27231AA724DCAE1F187F811797F6BBB xieTecYCCToRGB;
typedef struct $927F401B27F2876D054E6625E491BF29 xieTecYCbCrToRGB;
typedef CARD8 xieTypAlignment;
typedef CARD8 xieTypArithmeticOp;
typedef CARD16 xieTypColorAllocTechnique;
typedef CARD32 xieTypColorList;
typedef CARD8 xieTypCompareOp;
typedef xieTypFloat xieTypConstant[3];
typedef CARD16 xieTypConstrainTechnique;
typedef CARD16 xieTypConvertFromRGBTechnique;
typedef CARD16 xieTypConvertToRGBTechnique;
typedef CARD16 xieTypConvolveTechnique;
typedef CARD8 xieTypDataClass;
typedef CARD8 xieTypDataType;
typedef CARD16 xieTypDecodeTechnique;
typedef CARD16 xieTypDitherTechnique;
typedef CARD16 xieTypEncodeTechnique;
typedef struct $BE58583FCD7344D2421A54A7E98FFEA4 xieTypExecutable;
typedef CARD8 xieTypExportNotify;
typedef CARD8 xieTypExportState;
typedef CARD32 xieTypFloat;
typedef CARD16 xieTypGamutTechnique;
typedef CARD16 xieTypGeometryTechnique;
typedef struct $B73E16D481CC06015184D41F6368AD16 xieTypHistogramData;
typedef CARD16 xieTypHistogramShape;
typedef CARD8 xieTypInterleave;
typedef CARD32 xieTypLUT;
typedef CARD32 xieTypLevels[3];
typedef CARD8 xieTypMathOp;
typedef xieTypFloat xieTypMatrix[9];
typedef CARD8 xieTypOrientation;
typedef CARD32 xieTypPhotoflo;
typedef CARD8 xieTypPhotofloOutcome;
typedef CARD8 xieTypPhotofloState;
typedef CARD32 xieTypPhotomap;
typedef CARD32 xieTypPhotospace;
typedef CARD16 xieTypPhototag;
typedef struct $2B6C11629D4FEDD0D62560CB169B6CB3 xieTypProcessDomain;
typedef CARD32 xieTypROI;
typedef struct $39DC38FE6F9D9CB7A4182EA2E1F19530 xieTypRectangle;
typedef CARD8 xieTypServiceClass;
typedef CARD8 xieTypTechniqueGroup;
typedef struct $A1E1C4876F7B4B8EFD713F49F668C581 xieTypTechniqueRec;
typedef struct $E89CAE49E77FFA19927DB3E1B8EA1AFC xieTypTile;
typedef CARD16 xieTypTripleofCARD16[3];
typedef CARD32 xieTypTripleofCARD32[3];
typedef CARD8 xieTypTripleofCARD8[3];
typedef CARD16 xieTypWhiteAdjustTechnique;
typedef struct _xkbAccessXNotify xkbAccessXNotify;
typedef struct _xkbActionMessage xkbActionMessage;
typedef struct _xkbActionWireDesc xkbActionWireDesc;
typedef struct _xkbAnyDoodadWireDesc xkbAnyDoodadWireDesc;
typedef struct _xkbAnyEvent xkbAnyEvent;
typedef struct _xkbBehaviorWireDesc xkbBehaviorWireDesc;
typedef struct _xkbBellNotify xkbBellNotify;
typedef struct _xkbBell xkbBellReq;
typedef struct _xkbCompatMapNotify xkbCompatMapNotify;
typedef struct _xkbControlsNotify xkbControlsNotify;
typedef struct _xkbDeviceLedsWireDesc xkbDeviceLedsWireDesc;
typedef union _xkbDoodadWireDesc xkbDoodadWireDesc;
typedef struct _xkbEvent xkbEvent;
typedef struct _xkbExtensionDeviceNotify xkbExtensionDeviceNotify;
typedef struct _xkbGetCompatMapReply xkbGetCompatMapReply;
typedef struct _xkbGetCompatMap xkbGetCompatMapReq;
typedef struct _xkbGetControlsReply xkbGetControlsReply;
typedef struct _xkbGetControls xkbGetControlsReq;
typedef struct _xkbGetDeviceInfoReply xkbGetDeviceInfoReply;
typedef struct _xkbGetDeviceInfo xkbGetDeviceInfoReq;
typedef struct _xkbGetGeometryReply xkbGetGeometryReply;
typedef struct _xkbGetGeometry xkbGetGeometryReq;
typedef struct _xkbGetIndicatorMapReply xkbGetIndicatorMapReply;
typedef struct _xkbGetIndicatorMap xkbGetIndicatorMapReq;
typedef struct _xkbGetIndicatorStateReply xkbGetIndicatorStateReply;
typedef struct _xkbGetIndicatorState xkbGetIndicatorStateReq;
typedef struct _xkbGetKbdByNameReply xkbGetKbdByNameReply;
typedef struct _xkbGetKbdByName xkbGetKbdByNameReq;
typedef struct _xkbGetMapReply xkbGetMapReply;
typedef struct _xkbGetMap xkbGetMapReq;
typedef struct _xkbGetNamedIndicatorReply xkbGetNamedIndicatorReply;
typedef struct _xkbGetNamedIndicator xkbGetNamedIndicatorReq;
typedef struct _xkbGetNamesReply xkbGetNamesReply;
typedef struct _xkbGetNames xkbGetNamesReq;
typedef struct _xkbGetStateReply xkbGetStateReply;
typedef struct _xkbGetState xkbGetStateReq;
typedef struct _xkbIndicatorDoodadWireDesc xkbIndicatorDoodadWireDesc;
typedef struct _xkbIndicatorMapWireDesc xkbIndicatorMapWireDesc;
typedef struct _xkbIndicatorNotify xkbIndicatorNotify;
typedef struct _xkbKTMapEntryWireDesc xkbKTMapEntryWireDesc;
typedef struct _xkbKTSetMapEntryWireDesc xkbKTSetMapEntryWireDesc;
typedef struct _xkbKeyTypeWireDesc xkbKeyTypeWireDesc;
typedef struct _xkbKeyWireDesc xkbKeyWireDesc;
typedef struct _xkbLatchLockState xkbLatchLockStateReq;
typedef struct _xkbListComponentsReply xkbListComponentsReply;
typedef struct _xkbListComponents xkbListComponentsReq;
typedef struct _xkbLogoDoodadWireDesc xkbLogoDoodadWireDesc;
typedef struct _xkbMapNotify xkbMapNotify;
typedef struct _xkbModsWireDesc xkbModsWireDesc;
typedef struct _xkbNamesNotify xkbNamesNotify;
typedef struct _xkbNewKeyboardNotify xkbNewKeyboardNotify;
typedef struct _xkbOutlineWireDesc xkbOutlineWireDesc;
typedef struct _xkbOverlayKeyWireDesc xkbOverlayKeyWireDesc;
typedef struct _xkbOverlayRowWireDesc xkbOverlayRowWireDesc;
typedef struct _xkbOverlayWireDesc xkbOverlayWireDesc;
typedef struct _xkbPerClientFlagsReply xkbPerClientFlagsReply;
typedef struct _xkbPerClientFlags xkbPerClientFlagsReq;
typedef struct _xkbPointWireDesc xkbPointWireDesc;
typedef struct _xkbRowWireDesc xkbRowWireDesc;
typedef struct _xkbSectionWireDesc xkbSectionWireDesc;
typedef struct _xkbSelectEvents xkbSelectEventsReq;
typedef struct _xkbSetCompatMap xkbSetCompatMapReq;
typedef struct _xkbSetControls xkbSetControlsReq;
typedef struct _xkbSetDebuggingFlagsReply xkbSetDebuggingFlagsReply;
typedef struct _xkbSetDebuggingFlags xkbSetDebuggingFlagsReq;
typedef struct _xkbSetDeviceInfo xkbSetDeviceInfoReq;
typedef struct _xkbSetGeometry xkbSetGeometryReq;
typedef struct _xkbSetIndicatorMap xkbSetIndicatorMapReq;
typedef struct _xkbSetMap xkbSetMapReq;
typedef struct _xkbSetNamedIndicator xkbSetNamedIndicatorReq;
typedef struct _xkbSetNames xkbSetNamesReq;
typedef struct _xkbShapeDoodadWireDesc xkbShapeDoodadWireDesc;
typedef struct _xkbShapeWireDesc xkbShapeWireDesc;
typedef struct _xkbStateNotify xkbStateNotify;
typedef struct _xkbSymInterpretWireDesc xkbSymInterpretWireDesc;
typedef struct _xkbSymMapWireDesc xkbSymMapWireDesc;
typedef struct _xkbTextDoodadWireDesc xkbTextDoodadWireDesc;
typedef struct _xkbUseExtensionReply xkbUseExtensionReply;
typedef struct _xkbUseExtension xkbUseExtensionReq;
typedef struct _xkbVModMapWireDesc xkbVModMapWireDesc;
typedef struct $D89EFC9908B2BD8436006F18C8B3A23A xkey_t;
typedef struct _xkmActionDesc xkmActionDesc;
typedef struct _xkmAnyDoodadDesc xkmAnyDoodadDesc;
typedef struct _xkmBehaviorDesc xkmBehaviorDesc;
typedef union _xkmDoodadDesc xkmDoodadDesc;
typedef struct _xkmFileInfo xkmFileInfo;
typedef struct _xkmGeometryDesc xkmGeometryDesc;
typedef struct _xkmIndicatorDoodadDesc xkmIndicatorDoodadDesc;
typedef struct _xkmIndicatorMapDesc xkmIndicatorMapDesc;
typedef struct _xkmKTMapEntryDesc xkmKTMapEntryDesc;
typedef struct _xkmKeyDesc xkmKeyDesc;
typedef struct _xkmKeySymMapDesc xkmKeySymMapDesc;
typedef struct _xkmKeyTypeDesc xkmKeyTypeDesc;
typedef struct _xkmLogoDoodadDesc xkmLogoDoodadDesc;
typedef struct _xkmModsDesc xkmModsDesc;
typedef struct _xkmOutlineDesc xkmOutlineDesc;
typedef struct _xkmOverlayDesc xkmOverlayDesc;
typedef struct _xkmOverlayKeyDesc xkmOverlayKeyDesc;
typedef struct _xkmOverlayRowDesc xkmOverlayRowDesc;
typedef struct _xkmPointDesc xkmPointDesc;
typedef struct _xkmRowDesc xkmRowDesc;
typedef struct _xkmSectionDesc xkmSectionDesc;
typedef struct _xkmSectionInfo xkmSectionInfo;
typedef struct _xkmShapeDesc xkmShapeDesc;
typedef struct _xkmShapeDoodadDesc xkmShapeDoodadDesc;
typedef struct _xkmSymInterpretDesc xkmSymInterpretDesc;
typedef struct _xkmTextDoodadDesc xkmTextDoodadDesc;
typedef struct _xkmVModMapDesc xkmVModMapDesc;
typedef struct $6D34DC3E0698CAC04ED6FF84D24B158F xlate_t;
typedef pthread_mutex_t xmutex_rec;
typedef xmutex_rec *xmutex_t;
enum xprt_stat {XPRT_DIED = 0x0,XPRT_MOREREQS = 0x1,XPRT_IDLE = 0x2,};
typedef struct $CBA5F02AFFC4EA4A3305BB276E7E8CDE xrgb;
typedef pthread_key_t xthread_key_t;
typedef pthread_t xthread_t;
struct xtisoioctl {int level;int optname;struct netbuf opt;};
typedef struct $D0F732F65C44B5672B29FFE38726918A xvAdaptorInfo;
typedef struct $12C70FB380D888247B65F57E99B647A7 xvEncodingInfo;
typedef struct $9E6A7A2F5B8444BF3F540E884EB664C9 xvEvent;
typedef struct $09E69E0556021A33BB43607C87C36B45 xvFormat;
typedef struct $0C5B3DDBD9AAB3637C3C3A1D41E42158 xvGetPortAttributeReply;
typedef struct $819D62649EAF67B78691543FCA1EE6A8 xvGetPortAttributeReq;
typedef struct $9D856B837113E1B9C553BEF8F42066D9 xvGetStillReq;
typedef struct $9D856B837113E1B9C553BEF8F42066D9 xvGetVideoReq;
typedef struct $7801A91C37AF2AAC45BD7DD78FEE34EA xvGrabPortReply;
typedef struct $DEEBBF9E678AFA2413B9A4D363D90472 xvGrabPortReq;
typedef struct $9D856B837113E1B9C553BEF8F42066D9 xvPutStillReq;
typedef struct $9D856B837113E1B9C553BEF8F42066D9 xvPutVideoReq;
typedef struct _QueryAdaptorsReply xvQueryAdaptorsReply;
typedef struct $DC1F4185A69167B259A83E436A7DD097 xvQueryAdaptorsReq;
typedef struct $431023746282E83C34446CE1DCC859AA xvQueryBestSizeReply;
typedef struct $2E55BACA418C7D9DC01173D7FC9AB491 xvQueryBestSizeReq;
typedef struct _QueryEncodingsReply xvQueryEncodingsReply;
typedef struct $9A02475B75BDC9A6C1FC81F46F9E4217 xvQueryEncodingsReq;
typedef struct _QueryExtensionReply xvQueryExtensionReply;
typedef struct $E7AFD6532C2786B1E1EBCA6ADECADE75 xvQueryExtensionReq;
typedef struct $7F79EDEFC3CE5D4824B190E83A46D022 xvRational;
typedef struct $6E58DE7E5977316D543695706C282257 xvSelectPortNotifyReq;
typedef struct $9C9793AFB485CBCDC1723AA9DA7467C7 xvSelectVideoNotifyReq;
typedef struct $B5E8E02F7A52D99CF4C865E96F59C543 xvSetPortAttributeReq;
typedef struct $DE5295A524AE5E785ED4C88469459F67 xvStopVideoReq;
typedef struct $DEEBBF9E678AFA2413B9A4D363D90472 xvUngrabPortReq;
typedef CARD32 xwdval;
typedef struct $149F28F052847359C6CBD46BA265755A yp_buf;
struct ypall_callback {int (*foreach)(int, char *, int, char *, int, char *);char *data;};
struct ypbind_binding {struct in_addr ypbind_binding_addr;unsigned __int16 ypbind_binding_port;};
struct ypbind_oldsetdom {char ypoldsetdom_domain[65];struct ypbind_binding ypoldsetdom_binding;};
struct ypbind_resp {enum ypbind_resptype ypbind_status;union ypbind_resp::$A7E004FE80EA1256ECF8A9E646436398 ypbind_respbody;};
union ypbind_resp::$A7E004FE80EA1256ECF8A9E646436398 {unsigned int ypbind_error;struct ypbind_binding ypbind_bindinfo;};
enum ypbind_resptype {YPBIND_SUCC_VAL = 0x1,YPBIND_FAIL_VAL = 0x2,};
struct ypbind_setdom {char ypsetdom_domain[65];struct ypbind_binding ypsetdom_binding;unsigned __int16 ypsetdom_vers;};
struct ypdelete_args {char *mapname;yp_buf key;};
struct ypmap_parms {char *domain;char *map;unsigned int ordernum;char *owner;};
struct ypmaplist {char ypml_name[65];struct ypmaplist *ypml_next;};
struct yppasswd {char *oldpass;struct passwd newpw;};
struct yppushresp_xfr {unsigned int transid;unsigned int status;};
struct ypreq_key {char *domain;char *map;datum keydat;};
struct ypreq_nokey {char *domain;char *map;};
struct ypreq_xfr {struct ypmap_parms map_parms;unsigned int transid;unsigned int proto;unsigned __int16 port;};
enum ypreqtype {YPREQ_KEY = 0x1,YPREQ_NOKEY = 0x2,YPREQ_MAP_PARMS = 0x3,};
struct yprequest {enum ypreqtype yp_reqtype;union yprequest::$DEB989A88767ED55A1FBB16B6C8D997A yp_reqbody;};
union yprequest::$DEB989A88767ED55A1FBB16B6C8D997A {struct ypreq_key yp_req_keytype;struct ypreq_nokey yp_req_nokeytype;struct ypmap_parms yp_req_map_parmstype;};
struct ypresp_key_val {unsigned int status;datum keydat;datum valdat;};
struct ypresp_maplist {unsigned int status;struct ypmaplist *list;};
struct ypresp_master {unsigned int status;char *master;};
struct ypresp_order {unsigned int status;unsigned int ordernum;};
struct ypresp_val {unsigned int status;datum valdat;};
struct ypresponse {enum ypresptype yp_resptype;union ypresponse::$941A5461F0E0B639BD3DE282E3990A90 yp_respbody;};
union ypresponse::$941A5461F0E0B639BD3DE282E3990A90 {struct ypresp_val yp_resp_valtype;struct ypresp_key_val yp_resp_key_valtype;struct ypmap_parms yp_resp_map_parmstype;};
enum ypresptype {YPRESP_VAL = 0x1,YPRESP_KEY_VAL = 0x2,YPRESP_MAP_PARMS = 0x3,};
struct ypupdate_args {char *mapname;yp_buf key;yp_buf datum;};

MACRO_D ABDAY_1;
MACRO_D ABDAY_2;
MACRO_D ABDAY_3;
MACRO_D ABDAY_4;
MACRO_D ABDAY_5;
MACRO_D ABDAY_6;
MACRO_D ABDAY_7;
MACRO_D ABMON_1;
MACRO_D ABMON_10;
MACRO_D ABMON_11;
MACRO_D ABMON_12;
MACRO_D ABMON_2;
MACRO_D ABMON_3;
MACRO_D ABMON_4;
MACRO_D ABMON_5;
MACRO_D ABMON_6;
MACRO_D ABMON_7;
MACRO_D ABMON_8;
MACRO_D ABMON_9;
MACRO_ABORT_IF ABORT_IF_TCBS;
$D44E3C4FF335410EC7120A246FFC2300 ACCEPT;
MACRO_ACCESS3 ACCESS3_DELETE;
MACRO_ACCESS3 ACCESS3_EXECUTE;
MACRO_ACCESS3 ACCESS3_EXTEND;
MACRO_ACCESS3 ACCESS3_LOOKUP;
MACRO_ACCESS3 ACCESS3_MODIFY;
MACRO_ACCESS3 ACCESS3_READ;
MACRO_EMPTY ACCOUNTING;
MACRO_AFORK ACCTF;
MACRO_ACC_SCAN ACC_CLEAR;
MACRO_ACC ACC_DEFER;
MACRO_ACC ACC_IMMED;
MACRO_ACC_SCAN ACC_PRINT;
MACRO_ACC_SCAN ACC_REVEC;
MACRO_ACC_SCAN ACC_SCAN;
MACRO_ACC_SCAN ACC_UNPROTECT;
MACRO_ACDIRMIN ACDIRMAX;
MACRO_ACDIRMIN ACDIRMIN;
MACRO_TEGC ACE_PIC_INT_MODE;
MACRO_ACFL ACFL_DCEANON;
MACRO_ACFL_NFSMAX ACFL_NFSMAX;
MACRO_ACFL_NONE ACFL_NFSMIN;
MACRO_ACFL ACFL_NFSPERM;
MACRO_ACFL ACFL_NFSREST;
MACRO_ACFL_NONE ACFL_NONE;
MACRO_ACFT ACFT_NPERM;
MACRO_ACFT ACFT_NUMIDS;
MACRO_ACFT ACFT_SHORT;
MACRO_ACFT ACFT_TERSE;
MACRO_ACFT ACFT_WHITE;
MACRO_RRQ ACK;
MACRO_ACLS ACLS_ENABLED;
MACRO_ACLS ACLS_NOT_ENABLED;
MACRO_ACLS ACLS_NOT_LOADED;
MACRO_ACL_ADD ACL_ADD_PERM;
MACRO_ACL_USER ACL_DCE_FOREIGN_GROUP;
MACRO_ACL_USER ACL_DCE_FOREIGN_OTHER;
MACRO_ACL_USER ACL_DCE_FOREIGN_USER;
MACRO_ACL_USER ACL_DCE_GROUP;
MACRO_ACL_USER ACL_DCE_OTHER;
MACRO_ACL_USER ACL_DCE_UNAUTH;
MACRO_ACL_USER ACL_DCE_USER;
MACRO_ACL_ADD ACL_DELETE_PERM;
MACRO_ACL_EXECUTE ACL_EXECUTE;
MACRO_ACL_ADD ACL_GET_PERM;
MACRO_ACL_USER ACL_GROUP;
MACRO_ACL_USER ACL_GROUP_OBJ;
MACRO_ACL_USER ACL_MASK;
MACRO_ACL_OTHER ACL_MASK_OBJ;
MACRO_ACL_VERSION ACL_MIN_ENTRIES;
MACRO_ACL_NOPERM ACL_NOPERM;
MACRO_ACL_USER ACL_OTHER;
MACRO_ACL_OTHER ACL_OTHER_OBJ;
MACRO_ACL_NOPERM ACL_PADD;
MACRO_ACL_NOPERM ACL_PEXECUTE;
MACRO_ACL_PRDEX ACL_PRDEX;
MACRO_ACL_PRDWR ACL_PRDWR;
MACRO_ACL_PWREX ACL_PRDWREX;
MACRO_ACL_NOPERM ACL_PREAD;
MACRO_ACL_NOPERM ACL_PREMOVE;
MACRO_ACL_PWREX ACL_PWREX;
MACRO_ACL_NOPERM ACL_PWRITE;
MACRO_ACL_EXECUTE ACL_READ;
MACRO_ACL_ADD ACL_SET_PERM;
MACRO_ACL ACL_TYPE_ACC;
MACRO_ACL_TYPE_ACCESS ACL_TYPE_ACCESS;
MACRO_ACL_TYPE ACL_TYPE_ACC_MASK;
MACRO_ACL ACL_TYPE_DEF;
MACRO_ACL_TYPE_ACCESS ACL_TYPE_DEFAULT;
MACRO_ACL_TYPE_ACCESS ACL_TYPE_DEFAULT_DIR;
MACRO_ACL ACL_TYPE_DEF_DIR;
MACRO_ACL_TYPE ACL_TYPE_DEF_DIR_MASK;
MACRO_ACL_TYPE ACL_TYPE_DEF_MASK;
MACRO_ACL_UNDEFINED ACL_UNDEFINED_GID;
MACRO_NUM_TAG ACL_UNDEFINED_TAG;
MACRO_ACL_TYPE_ACCESS ACL_UNDEFINED_UID;
MACRO_ACL_USER ACL_USER;
MACRO_ACL_USER ACL_USER_OBJ;
MACRO_ACL_VERSION ACL_VERSION;
MACRO_ACL_EXECUTE ACL_WRITE;
MACRO_ACDIRMIN ACMAXMAX;
MACRO_ACDIRMIN ACMINMAX;
MACRO_ACOMPAT ACOMPAT;
MACRO_ACOMPAT ACORE;
MACRO_ACREGMIN ACREGMAX;
MACRO_ACREGMIN ACREGMIN;
MACRO_AC_TEXT AC_BSS;
MACRO_AC_TEXT AC_DATA;
MACRO_AC_UPWARD AC_DOWNWARD;
MACRO_AC_FIXED AC_FIXED;
MACRO_AC_FIXED AC_FLOAT;
MACRO_AC AC_IPUP;
MACRO_AC_TEXT AC_LDR_BSS;
MACRO_AC_TEXT AC_LDR_DATA;
MACRO_AC_TEXT AC_LDR_GLB;
MACRO_AC_TEXT AC_LDR_PRELOAD;
MACRO_AC_TEXT AC_LDR_PRIV;
MACRO_AC_TEXT AC_LDR_TEXT;
MACRO_AC_TEXT AC_MMAP_BSS;
MACRO_AC_TEXT AC_MMAP_DATA;
MACRO_AC_TEXT AC_MMAP_STACK;
MACRO_AC_TEXT AC_MMAP_TEXT;
MACRO_AC_TEXT AC_N_AREAS;
MACRO_AC_TEXT AC_STACK;
MACRO_AC_TEXT AC_TEXT;
MACRO_AC_UPWARD AC_UPWARD;
MACRO_VDATA ADATA;
MACRO_ADDEND ADDEND_BASE;
MACRO_ADDEND ADDEND_CONST;
MACRO_ADDEND ADDEND_NOCONST;
MACRO_ADDRESS ADDRESS_MASK;
MACRO_ADD ADD_LINE;
MACRO_ADD ADD_LINE_PC;
MACRO_ADD ADD_LINE_PC_COL;
MACRO_ADD ADD_PC;
MACRO_ADVFS_ACTIVATE ADVFS_ACTIVATE;
MACRO_ADVFS_ASYNC ADVFS_ASYNC_IO;
MACRO_ADVFS_AW ADVFS_AW_DATA_LOGGING;
MACRO_ADVFS_ASYNC ADVFS_DATA_LOGGING_IO;
MACRO_ADVFS_ACTIVATE ADVFS_DEACTIVATE;
MACRO_ADVFS_ACTIVATE ADVFS_GET_INFO;
MACRO_ADVFS ADVFS_OP_CURR_VERSION;
MACRO_ADVFS_ASYNC ADVFS_SYNC_IO;
MACRO_ADVFS_AW ADVFS_SYNC_WRITE;
$1E01C87E393912919412648BB92B1744 ADVFS_WO_ASYNC_WRITE;
$1E01C87E393912919412648BB92B1744 ADVFS_WO_DATA_LOGGING;
$1E01C87E393912919412648BB92B1744 ADVFS_WO_RESERVED;
$1E01C87E393912919412648BB92B1744 ADVFS_WO_SYNC_WRITE;
MACRO_AD AD_BOOT;
MACRO_AD AD_HALT;
MACRO_AD AD_IBOOT;
MACRO_AFORK AFORK;
MACRO_AFTER AFTER;
MACRO_AF_OSI AF_AAL;
MACRO_AF_OSI AF_APPLETALK;
MACRO_AF_OSI AF_CCITT;
MACRO_AF_UNSPEC AF_CHAOS;
MACRO_AF_OSI AF_CTF;
MACRO_AF_OSI AF_DATAKIT;
MACRO_AF_OSI AF_DECnet;
MACRO_AF_OSI AF_DLI;
MACRO_AF_OSI AF_ECMA;
MACRO_AF AF_ERRCATR;
MACRO_AF AF_ERRCBUF;
MACRO_AF_OSI AF_HYLINK;
MACRO_AF_UNSPEC AF_IMPLINK;
MACRO_AF_UNSPEC AF_INET;
MACRO_AF_OSI AF_INET6;
MACRO_AF_UNSPEC AF_ISO;
MACRO_AF_OSI AF_KEY;
MACRO_AF_OSI AF_LAST;
MACRO_AF_OSI AF_LAT;
MACRO_AF_OSI AF_LINK;
MACRO_AF_OSI AF_MAX;
MACRO_AF_OSI AF_NETMAN;
MACRO_AF_UNSPEC AF_NS;
MACRO_AF AF_OK;
MACRO_AF_OSI AF_OSI;
MACRO_AF_UNSPEC AF_PUP;
MACRO_AF_OSI AF_ROUTE;
MACRO_AF_OSI AF_SNA;
MACRO_AF AF_SYNTAX;
MACRO_AF_UNSPEC AF_UNIX;
MACRO_AF_UNSPEC AF_UNSPEC;
MACRO_AF_OSI AF_USER;
MACRO_AF_OSI AF_WAN;
MACRO_AF_OSI AF_X25;
void AFclose(AFILE_t af);
ATTR_t AFgetatr(ENT_t entry, char *name);
ENT_t AFgetent(AFILE_t af, char *name);
char *AFgetval(ATTR_t attr);
ATTR_t AFnxtatr(ENT_t entry);
ENT_t AFnxtent(AFILE_t af);
char *AFnxtval(ATTR_t attr);
AFILE_t AFopen(char *filename, int maxrecsiz, int maxnumatr);
void AFrewind(AFILE_t af);
void AFsetdflt(AFILE_t af, char *dflt);
MACRO_ACOMPAT AHZ;
MACRO_AIO_CANCELED AIO_ALLDONE;
MACRO_AIO_CANCELED AIO_CANCELED;
MACRO_AIO AIO_LISTIO_MAX;
MACRO_AIO_MAX AIO_MAX;
MACRO_AIO_CANCELED AIO_NOTCANCELED;
MACRO_AIO_MAX AIO_PRIO_DFL;
MACRO_AIO_PRIO AIO_PRIO_MAX;
MACRO_AIO_PRIO AIO_PRIO_MIN;
MACRO_AI AI_ADDRCONFIG;
MACRO_AI AI_ALL;
MACRO_AI AI_CANONNAME;
MACRO_AI AI_DEFAULT;
MACRO_AI AI_NUMERICHOST;
MACRO_AI AI_PASSIVE;
MACRO_AI AI_V4MAPPED;
char *AL;
$D44E3C4FF335410EC7120A246FFC2300 ALIVE;
MACRO_OFF ALL;
MACRO_XTABS ALLDELAY;
MACRO_NO_GCS ALL_GCS;
MACRO_BUTTON1 ALL_MOUSE_EVENTS;
MACRO_ALL ALL_THREADS;
MACRO_MAXVIFS ALL_VIFS;
MACRO_UNKN ALPHABOOK_1;
MACRO_MAGIC_MIPS3 ALPHAMAGIC;
MACRO_MAGIC_MIPS3 ALPHAMAGICZ;
MACRO_MAGIC_MIPS3 ALPHAUMAGIC;
MACRO_UNKN ALPHA_ADU;
MACRO_UNKN ALPHA_EB164;
MACRO_ALPHA ALPHA_FLOAT_STATE;
MACRO_UNKN ALPHA_KN20AA;
MACRO_BYTE_SIZE ALPHA_PGBYTES;
MACRO_ALPHA_PGSHIFT ALPHA_PGSHIFT;
MACRO_ALPHA ALPHA_THREAD_STATE;
MACRO_UNKN ALPHA_WILDFIRE;
MACRO_ECHOKE ALTWERASE;
MACRO_D ALT_DIGITS;
MACRO_ALV ALV_ALIVE;
MACRO_ALV ALV_FREE;
MACRO_ALV ALV_LOADABLE;
MACRO_ALV ALV_NOCNFG;
MACRO_ALV ALV_NOSIZER;
MACRO_ALV ALV_PERSIST;
MACRO_ALV ALV_PRES;
MACRO_ALV ALV_REMAKE;
MACRO_ALV ALV_RONLY;
MACRO_ALV ALV_STATIC;
MACRO_ALV ALV_WONLY;
char *AL_PARM;
bool AM;
MACRO_AMASK_BIT0 AMASK_BIT0_BWLS;
MACRO_AMASK AMASK_BWX;
MACRO_AMASK AMASK_CIX;
MACRO_AMASK AMASK_FIX;
MACRO_AMASK AMASK_MVI;
MACRO_AMASK AMASK_PRECISE;
MACRO_AMDWRMAGIC AMDROMAGIC;
MACRO_AMDWRMAGIC AMDWRMAGIC;
MACRO_ACOMPAT AMEAN;
MACRO_D AM_STR;
MACRO_ANAMELEN ANAMELEN;
MACRO_ANNOUNCE ANNOUNCE;
MACRO_ANSWER ANSWER_NO;
MACRO_ANSWER ANSWER_UNCHANGED;
MACRO_ANSWER ANSWER_YES;
MACRO_ANYADDR ANYADDR;
MACRO_ANYMARK ANYMARK;
MACRO_CRMOD ANYP;
MACRO_ANY2 ANY_CHILD;
MACRO_ANY ANY_CPU;
MACRO_ACL_OTHER ANY_OTHER;
MACRO_APAR APAR_NONE;
MACRO_APAR APAR_SYSTEM;
MACRO_ARCDENSITY ARCDENSITY;
MACRO_AREGTYPE AREGTYPE;
MACRO_ARG ARG_MAX;
MACRO_ARPHRD ARPHRD_802;
MACRO_ARPHRD ARPHRD_ETHER;
MACRO_ARPOP ARPOP_REPLY;
MACRO_ARPOP ARPOP_REQUEST;
MACRO_NDPROTO ARPPROTO;
MACRO_ISO_SAP ARP_SAP;
MACRO_ARP ARP_SRT_NBCKS;
MACRO_ARRAY ARRAY_TOKEN;
MACRO_ARTYPE ARTYPE;
MACRO_AR_CODE AR_CODE;
MACRO_AR_EB AR_EB;
MACRO_AR_EL AR_EL;
MACRO_AR_IHASHSEX AR_IHASHSEX;
MACRO_AR_IHASHSEX AR_IOUTOFDATE;
MACRO_AR_IHASHSEX AR_ITARGETSEX;
MACRO_AR_IHASHSEX AR_IUCODE;
MACRO_AR_IHASHSEX AR_OUTOFDATE;
MACRO_AR AR_SYMPREFLEN;
MACRO_AR_TOOLVER AR_TOOLVER;
MACRO_AR_EB AR_UCODE;
MACRO_AFORK ASU;
MACRO_TTYDISC ASYDISC;
MACRO_NZERO ATEXIT_MAX;
MACRO_ATF ATF_CANTCHANGE;
MACRO_ATF ATF_COM;
MACRO_ATF ATF_DEAD;
MACRO_ATF ATF_INUSE;
MACRO_ATF ATF_PERM;
MACRO_ATF ATF_PUBL;
MACRO_ATF ATF_STALE;
MACRO_ATF ATF_USE802;
MACRO_ATF ATF_USETRAILERS;
MACRO_ATOMIC ATOMIC_CLEAR;
MACRO_UNLOCK ATOMIC_LOCKBIT;
MACRO_ATOMIC ATOMIC_SET;
MACRO_ATOM ATOM_TOOLVER;
MACRO_OPENMSG ATTACHMSG;
MACRO_NO_ERROR ATTN_ERROR;
MACRO_ATTR ATTR_DELETE;
MACRO_ATTR ATTR_NOTHING;
MACRO_ATTR ATTR_RETRIEVE;
MACRO_ATTR ATTR_SET;
MACRO_AT AT_ALL;
MACRO_AT AT_ATIME;
MACRO_AT_NULL AT_BASE;
MACRO_AT AT_BLKSIZE;
MACRO_AT AT_CTIME;
MACRO_AT_NULL AT_ENTRY;
MACRO_AT_NULL AT_EXECFD;
MACRO_AT_EXEC AT_EXEC_FD;
MACRO_AT_NULL AT_EXEC_FILENAME;
MACRO_AT_NULL AT_EXEC_LOADER_FILENAME;
MACRO_AT_NULL AT_EXEC_LOADER_FLAGS;
MACRO_AT_NULL AT_FLAGS;
MACRO_AT AT_FSID;
MACRO_AT AT_GID;
MACRO_AT_NULL AT_IGNORE;
MACRO_AT AT_MODE;
MACRO_AT AT_MTIME;
MACRO_AT AT_NBLOCKS;
MACRO_AT AT_NLINK;
MACRO_AT AT_NODEID;
MACRO_AT_TIMES AT_NOSET;
MACRO_AT_NULL AT_NULL;
MACRO_AT_NULL AT_OSF_BASE;
MACRO_AT_NULL AT_PAGESZ;
MACRO_AT_NULL AT_PHDR;
MACRO_AT_NULL AT_PHENT;
MACRO_AT_NULL AT_PHNUM;
MACRO_AT AT_RDEV;
MACRO_AT AT_SIZE;
MACRO_AT_STAT AT_STAT;
MACRO_AT_TIMES AT_TIMES;
MACRO_AT AT_TYPE;
MACRO_AT AT_UID;
MACRO_AT AT_VCODE;
MACRO_AUDIT_START AUDGEN8;
MACRO_AUDITD AUDITD_RECSZ;
MACRO_AUDIT AUDIT_AND;
MACRO_AUDIT AUDIT_CNTLMASK;
MACRO_AUDIT_START AUDIT_DAEMON_EXIT;
MACRO_AUDIT AUDIT_HABITAT_USR;
MACRO_TRUSTED_INTMASK AUDIT_INTMASK_LEN;
MACRO_AUDIT_START AUDIT_LOG_CHANGE;
MACRO_AUDIT_START AUDIT_LOG_CREAT;
MACRO_AUDIT_START AUDIT_LOG_OVERWRITE;
MACRO_AUDIT AUDIT_MACH_USR;
MACRO_TRUSTED AUDIT_MASK_LEN;
MACRO_AUDIT AUDIT_OFF;
MACRO_AUDIT AUDIT_OR;
MACRO_AUDIT_START AUDIT_REBOOT;
MACRO_AUDIT_START AUDIT_SETUP;
MACRO_AUDIT_START AUDIT_START;
MACRO_AUDIT_START AUDIT_STOP;
MACRO_AUDIT_START AUDIT_SUSPEND;
MACRO_AUDIT AUDIT_SYSCALL_OFF;
MACRO_AUDIT AUDIT_USR;
MACRO_AUDIT_START AUDIT_XMIT_FAIL;
MACRO_AUDITD AUD_BUF_SIZ;
MACRO_AUD_SELECT AUD_DESELECT;
MACRO_AUD AUD_EXEC_ARGP;
MACRO_AUD AUD_EXEC_ENVP;
MACRO_AUD AUD_LOGIN_UNAME;
MACRO_AUD AUD_MAC_IL;
MACRO_AUD AUD_MAC_SL;
MACRO_AUD_MAXEVENT AUD_MAXEVENT_LEN;
MACRO_AUD_MLS AUD_MLS;
MACRO_AUD AUD_OBJSEL_IPC;
MACRO_AUD AUD_OBJ_DESEL;
MACRO_AUD AUD_OBJ_MASK;
MACRO_AUD AUD_OBJ_SEL;
MACRO_AUD AUD_PROPL_UNAVAIL;
MACRO_AUD_SELECT AUD_SELECT;
MACRO_AUD AUD_STYLFLAGS;
MACRO_AUD_T AUD_TOKEN_IOVEC_MIN;
MACRO_AUD_T_OPAQUE AUD_TOKEN_PTR_MAX;
MACRO_AUD_T_OPAQUE AUD_TP_ACCRGHT;
MACRO_AUD_T_OPAQUE AUD_TP_ADDRVEC;
MACRO_AUD_T_OPAQUE AUD_TP_AUID;
MACRO_AUD_T_OPAQUE AUD_TP_CONT;
MACRO_AUD_T_OPAQUE AUD_TP_DEV;
MACRO_AUD_T_OPAQUE AUD_TP_EVENT;
MACRO_AUD_T_OPAQUE AUD_TP_EVENTP;
MACRO_AUD_T_OPAQUE AUD_TP_HABITAT;
MACRO_AUD_T_OPAQUE AUD_TP_HOSTADDR;
MACRO_AUD_T_OPAQUE AUD_TP_INTP;
MACRO_AUD_T_OPAQUE AUD_TP_IPC_GID;
MACRO_AUD_T_OPAQUE AUD_TP_IPC_MODE;
MACRO_AUD_T_OPAQUE AUD_TP_IPC_UID;
MACRO_AUD_T_OPAQUE AUD_TP_LENGTH;
MACRO_AUD_T_OPAQUE AUD_TP_LONG;
MACRO_AUD_T_OPAQUE AUD_TP_MSGHDR;
MACRO_AUD_T_OPAQUE AUD_TP_NCPU;
MACRO_AUD_T_OPAQUE AUD_TP_PID;
MACRO_AUD_T_OPAQUE AUD_TP_PPID;
MACRO_AUD_T_OPAQUE AUD_TP_PRIV;
MACRO_AUD_T_OPAQUE AUD_TP_RUID;
MACRO_AUD_T_OPAQUE AUD_TP_SET_UIDS;
MACRO_AUD_T_OPAQUE AUD_TP_SHORT;
MACRO_AUD_T_OPAQUE AUD_TP_SUBEVENT;
MACRO_AUD_T_OPAQUE AUD_TP_TID;
MACRO_AUD_T_OPAQUE AUD_TP_TV_SEC;
MACRO_AUD_T_OPAQUE AUD_TP_TV_USEC;
MACRO_AUD_T_OPAQUE AUD_TP_UCOMM;
MACRO_AUD_T_OPAQUE AUD_TP_UID;
MACRO_AUD_T_OPAQUE AUD_TP_VERSION;
MACRO_AUD_T_OPAQUE AUD_TP_VNODE_DEV;
MACRO_AUD_T_OPAQUE AUD_TP_VNODE_ID;
MACRO_AUD_T_OPAQUE AUD_TP_VNODE_MODE;
MACRO_AUD_T_OPAQUE AUD_T_AUID;
MACRO_AUD_T AUD_T_CHARP;
MACRO_AUD_T_OPAQUE AUD_T_DESCRIP;
MACRO_AUD_T_OPAQUE AUD_T_DEV;
MACRO_AUD_T AUD_T_DEVNAME;
MACRO_AUD_T_OPAQUE AUD_T_ERRNO;
MACRO_AUD_T_OPAQUE AUD_T_EVENT;
MACRO_AUD_T_OPAQUE AUD_T_GID;
MACRO_AUD_T_OPAQUE AUD_T_GIDSET;
MACRO_AUD_T AUD_T_HOMEDIR;
MACRO_AUD_T_OPAQUE AUD_T_HOSTADDR;
MACRO_AUD_T_OPAQUE AUD_T_HOSTID;
MACRO_AUD_T AUD_T_HOSTNAME;
MACRO_AUD_T AUD_T_ILABEL;
MACRO_AUD_T_OPAQUE AUD_T_INT;
MACRO_AUD_T_OPAQUE AUD_T_INTARRAY;
MACRO_AUD_T AUD_T_INTP;
MACRO_AUD_T AUD_T_LHOSTNAME;
MACRO_AUD_T AUD_T_LOGIN;
MACRO_AUD_T AUD_T_LSOCK;
MACRO_AUD_T_OPAQUE AUD_T_MODE;
MACRO_AUD_T_OPAQUE AUD_T_OPAQUE;
MACRO_AUD_T_OPAQUE AUD_T_PID;
MACRO_AUD_T_OPAQUE AUD_T_PPID;
MACRO_AUD_T AUD_T_PRIVMASK;
MACRO_AUD_T_OPAQUE AUD_T_RESULT;
MACRO_AUD_T AUD_T_RSOCK;
MACRO_AUD_T_OPAQUE AUD_T_RUID;
MACRO_AUD_T_OPAQUE AUD_T_SECEVENT;
MACRO_AUD_T AUD_T_SERVICE;
MACRO_AUD_T AUD_T_SHELL;
MACRO_AUD_T AUD_T_SLABEL;
MACRO_AUD_T AUD_T_SOCK;
MACRO_AUD_T_OPAQUE AUD_T_SUBEVENT;
MACRO_AUD_T_OPAQUE AUD_T_TCPFLAGS;
MACRO_AUD_T_OPAQUE AUD_T_UID;
MACRO_AUD_T_OPAQUE AUD_T_XDATA;
MACRO_AUD_T_OPAQUE AUD_T_X_ATOM;
MACRO_AUD_T_OPAQUE AUD_T_X_CLIENT;
MACRO_AUD_T_OPAQUE AUD_T_X_PROPERTY;
MACRO_AUD_T_OPAQUE AUD_T_X_RES_CLASS;
MACRO_AUD_T_OPAQUE AUD_T_X_RES_ID;
MACRO_AUD_T_OPAQUE AUD_T_X_RES_TYPE;
MACRO_AUD AUD_UCOMM;
MACRO_AUD_VERSION AUD_VERSION;
MACRO_AUD_VERSION AUD_VERS_LONG;
MACRO_AUD_VERSION AUD_VERS_MASK;
MACRO_AUD_VNOMAX AUD_VNOMAX;
MACRO_AUD_XOBJ AUD_XOBJ_CLIENT;
MACRO_AUD_XOBJ AUD_XOBJ_OBJECT;
MACRO_AUD_XOBJ_VERSION AUD_XOBJ_VERSION;
MACRO_AUD_SELECT AUID_INVAL;
MACRO_AUDIT_START AUTHORIZATION_USE;
MACRO_AUTH_D AUTH_A1;
MACRO_AUTH_D AUTH_B1;
MACRO_AUTH_D AUTH_B2;
MACRO_AUTH_D AUTH_B3;
auth_stat AUTH_BADCRED;
auth_stat AUTH_BADVERF;
MACRO_AUTH_D AUTH_C1;
MACRO_AUTH_D AUTH_C2;
MACRO_AUTH_CAPBUFSIZ AUTH_CAPBUFSIZ;
MACRO_AUTH_CLEARTEXT AUTH_CIPHERTEXT_SEG_CHARS;
MACRO_AUTH_CLEARTEXT AUTH_CLEARTEXT_SEG_CHARS;
MACRO_AUTH_CPRIVVEC AUTH_CPRIVVEC_SIZE;
MACRO_AUTH_MAX_AUDIT AUTH_CRYPT_BIGCRYPT;
MACRO_AUTH_CRYPT AUTH_CRYPT_C1CRYPT;
MACRO_AUTH_CRYPT AUTH_CRYPT_CRYPT16;
MACRO_AUTH_CRYPT AUTH_CRYPT_OLDCRYPT;
MACRO_AUTH_CRYPT_ AUTH_CRYPT__MAX;
MACRO_AUTH_REWIND AUTH_CURPOS;
MACRO_AUTH_D AUTH_D;
MACRO_AUTH_DB AUTH_DB_SL_RESET;
MACRO_AUTH_DB AUTH_DB_SL_SINGLE;
MACRO_AUTH_UNIX AUTH_DES;
MACRO_AUTH_DEV_SINGLE AUTH_DEV_EXPORT;
MACRO_AUTH_DEV_SINGLE AUTH_DEV_ILMULTI;
MACRO_AUTH_DEV_SINGLE AUTH_DEV_ILSINGLE;
MACRO_AUTH_DEV_SINGLE AUTH_DEV_IMPORT;
MACRO_AUTH_DEV_SINGLE AUTH_DEV_LABEL;
MACRO_AUTH_DEV_SINGLE AUTH_DEV_MULTI;
MACRO_AUTH_DEV_SINGLE AUTH_DEV_NOLABEL;
MACRO_AUTH_DEV_SINGLE AUTH_DEV_PASS;
MACRO_AUTH_DEV AUTH_DEV_PRINTER;
MACRO_AUTH_DEV AUTH_DEV_REMOTE;
MACRO_AUTH_DEV_SINGLE AUTH_DEV_SINGLE;
MACRO_AUTH_DEV AUTH_DEV_TAPE;
MACRO_AUTH_DEV AUTH_DEV_TERMINAL;
MACRO_AUTH_DEV AUTH_DEV_XDISPLAY;
reject_stat AUTH_ERROR;
MACRO_AUTH_ESCAP AUTH_ESCAP_API_VER;
MACRO_AUDIT_START AUTH_EVENT;
auth_stat AUTH_FAILED;
MACRO_AUTH_FUNCTAB AUTH_FUNCTAB_QUERY;
MACRO_AUTH_FUNCTAB AUTH_FUNCTAB_RESET;
MACRO_AUTH_FUNCTAB AUTH_FUNCTAB_SET;
MACRO_AUTH_FUNCTAB AUTH_FUNCTAB_UPDATE;
auth_stat AUTH_INVALIDRESP;
MACRO_AUTH_SILENT AUTH_LIMITED;
MACRO_AUTH_LOCKED AUTH_LOCKED_OUT_AUD_FLAG;
MACRO_AUTH_LOCK AUTH_LOCK_ATTEMPTS;
MACRO_AUTH_MAX_AUDIT AUTH_MAX_AUDIT_LENGTH;
MACRO_AUTH_MAX_CIPHERTEXT AUTH_MAX_CIPHERTEXT_LENGTH;
MACRO_AUTH_DEV_SINGLE AUTH_MAX_DEV_ASSIGN;
MACRO_AUTH_MAX_DEV AUTH_MAX_DEV_TYPE;
MACRO_AUTH_MAX_PASSWD AUTH_MAX_PASSWD_DICT_DEPTH;
MACRO_AUTH_MAX_PASSWD AUTH_MAX_PASSWD_DICT_SIZE;
MACRO_AUTH_MAX AUTH_MAX_PASSWD_LENGTH;
MACRO_AUTH_MAX_SECCLASS AUTH_MAX_SECCLASS;
MACRO_AUTH_MAX_UNAME AUTH_MAX_UNAME_SIZE;
MACRO_AUTH_MIN AUTH_MIN_GEN_UID;
MACRO_AUTH AUTH_NONE;
MACRO_AUTH AUTH_NULL;
auth_stat AUTH_OK;
MACRO_AUTH_PSW AUTH_PSW_PROMPT_ALWAYS;
MACRO_AUTH_PSW AUTH_PSW_PROMPT_IFNOTEMPTY;
MACRO_AUTH_PSW AUTH_PSW_PROMPT_IFUSERSHELL;
MACRO_AUTH_PSW_PROMPT AUTH_PSW_PROMPT_MAXIMUM;
auth_stat AUTH_REJECTEDCRED;
auth_stat AUTH_REJECTEDVERF;
MACRO_AUTH_LOCK AUTH_RETRY_DELAY;
MACRO_AUTH_REWIND AUTH_REWIND;
MACRO_AUTH_MAX AUTH_SALT_SIZE;
MACRO_AUTH_UNIX AUTH_SHORT;
MACRO_AUTH_SILENT AUTH_SILENT;
MACRO_AUTH_ESCAP AUTH_SRC_LOCAL;
MACRO_AUTH_SRC AUTH_SRC_MAP;
MACRO_AUTH_SRC AUTH_SRC_NIS;
MACRO_AUTH_TIME AUTH_TIME_NOW_VALUE;
MACRO_AUTH_CRYPT_ AUTH_TOD_SIZE;
auth_stat AUTH_TOOWEAK;
MACRO_AUTH_UNIX AUTH_UNIX;
MACRO_AUTH_SILENT AUTH_VERBOSE;
AUTH_PW_funcs AUTH_pw_cryptname;
AUTH_PW_funcs AUTH_pw_encrypt;
AUTH_PW_funcs AUTH_pw_genpassword;
AUTH_PW_funcs AUTH_pw_init;
AUTH_PW_funcs AUTH_pw_limit;
AUTH_PW_funcs AUTH_pw_maxcryptlen;
AUTH_PW_funcs AUTH_pw_nsymbols;
AUTH_PW_funcs AUTH_pw_numcrypts;
AUTH_PW_funcs AUTH_pw_okpassword;
MACRO_AUTO AUTO_DIS;
MACRO_AUTO AUTO_ENB;
MACRO_HI AUX_DENS;
MACRO_AVAIL AVAIL;
MACRO_ACOMPAT AXSIG;
MACRO__STANDOUT A_ALTCHARSET;
MACRO_A_NORMAL A_ATTRIBUTES;
MACRO__STANDOUT A_BLINK;
MACRO__STANDOUT A_BOLD;
MACRO_A_CHARTEXT A_CHARTEXT;
MACRO_A_CHARTEXT A_COLOR;
MACRO__STANDOUT A_DIM;
MACRO_A A_INVIS;
MACRO_A_NORMAL A_NORMAL;
MACRO_A A_PROTECT;
MACRO_A_REBOOT A_REBOOT;
MACRO_A_REBOOT A_REMOUNT;
MACRO__STANDOUT A_REVERSE;
MACRO_A_REBOOT A_SHUTDOWN;
MACRO_KEY_DL A_STANDOUT;
MACRO__STANDOUT A_UNDERLINE;
MACRO_DEF A_WHILE;
MACRO_Above Above;
MACRO_Relative Absolute;
MACRO_ActivateMask ActivateMask;
MACRO_TK_SCROLL ActivateNotify;
MACRO_AddToList AddToList;
MACRO_InputHint AllHints;
MACRO_AllPlanes AllPlanes;
MACRO_AllTemporary AllTemporary;
MACRO_NoValue AllValues;
MACRO_AllocNone AllocAll;
MACRO_AllocNone AllocNone;
MACRO_DontAllowExposures AllowExposures;
MACRO_GrabSuccess AlreadyGrabbed;
MACRO_NotUseful Always;
MACRO_AnyButton AnyButton;
MACRO_AnyKey AnyKey;
MACRO_ShiftMapIndex AnyModifier;
MACRO_AnyPropertyType AnyPropertyType;
MACRO_ApplicationShellIndex ApplicationShellIndex;
MACRO_ArcChord ArcChord;
MACRO_ArcChord ArcPieSlice;
MACRO_AsyncThisDevice AsyncAll;
MACRO_AsyncPointer AsyncBoth;
MACRO_AsyncPointer AsyncKeyboard;
MACRO_AsyncThisDevice AsyncOtherDevices;
MACRO_AsyncPointer AsyncPointer;
MACRO_AsyncThisDevice AsyncThisDevice;
MACRO_AuthSuccess AuthBusy;
MACRO_AuthSuccess AuthContinue;
MACRO_AuthSuccess AuthDenied;
MACRO_AuthSuccess AuthSuccess;
MACRO_AutoRepeatModeOff AutoRepeatModeDefault;
MACRO_AutoRepeatModeOff AutoRepeatModeOff;
MACRO_AutoRepeatModeOff AutoRepeatModeOn;
MACRO_B0 B0;
MACRO_B0 B110;
MACRO_B0 B115200;
MACRO_B0 B1200;
MACRO_B0 B134;
MACRO_B0 B150;
MACRO_B16MAGIC B16MAGIC;
MACRO_B0 B1800;
MACRO_B0 B19200;
MACRO_B0 B200;
MACRO_B0 B2400;
MACRO_B0 B300;
MACRO_B0 B38400;
MACRO_B0 B4800;
MACRO_B0 B50;
MACRO_B0 B57600;
MACRO_B0 B600;
MACRO_B0 B75;
MACRO_B0 B9600;
MACRO_ORDINARY BACKSPACE;
MACRO_NOT BADADDR;
MACRO_NOT BADCTLADDR;
MACRO_NOCLOSE BADINDEX;
MACRO_SS_STACKMAGIC BADSIG;
MACRO_NOT BADVERSION;
$A4C507EE3209778ECF0B9DDC8BD963BA BAD_MEM;
MACRO_NULL_DEVICE BARCODE_DEVICE;
MACRO_BASIC BASIC_OPERATOR_STRING;
MACRO_BASIC BASIC_OPERATOR_TOKEN;
MACRO_NVRAM BATTCNT;
MACRO_BATT BATT_CHARGING;
MACRO_BATT BATT_ENABLED;
MACRO_BATT BATT_HIGH;
MACRO_BATT BATT_NONE;
MACRO_BATT BATT_OK;
MACRO_BATT BATT_SELFTEST;
battery BAT_CHARGING;
battery BAT_DISABLED;
battery BAT_GOOD;
battery BAT_IGNORE;
battery BAT_LOW;
battery_modes BAT_MODE_BAD;
battery_modes BAT_MODE_FAKE;
battery_modes BAT_MODE_NONE;
battery_modes BAT_MODE_REAL;
battery BAT_SELFTEST;
MACRO_BBADDRS BBADDRS_MAGIC;
MACRO_BBADDRS BBCOUNTS_MAGIC;
MACRO_BBADDRS BBCOUNTS_MAGIC_EV5;
MACRO_BB BB_SCALE;
char *BC;
MACRO_BC BC_BASE_MAX;
MACRO_BC BC_DIM_MAX;
MACRO_BC_GID BC_GID;
MACRO_BC_SCALE BC_SCALE_MAX;
MACRO_BC_SCALE BC_STRING_MAX;
MACRO_BC_UID BC_UID;
MACRO_VDATA BDATA;
MACRO_BEFORE BEFORE;
MACRO_BEGINNING BEGINNING;
MACRO_BLK_FORMAT BFI_FORMAT;
MACRO_BH BH_ADVFS_METADATA;
MACRO_BH BH_DIRECTORY;
MACRO_BH BH_INDIRECT;
MACRO_BH BH_INODE;
MACRO_BH BH_REG_DATA;
MACRO_BIGENDIAN BIGENDIAN;
MACRO_LITTLE BIG_ENDIAN;
MACRO_BIND BIND_INHERIT;
MACRO_ALL BIND_NO_INHERIT;
MACRO_BINLOG BINLOG_ASCIIDISABLE;
MACRO_BINLOG BINLOG_ASCIIENABLE;
MACRO_BINLOG BINLOG_CLRCNTRS;
MACRO_BINLOG BINLOG_DISABLE;
MACRO_BINLOG BINLOG_ENABLE;
MACRO_BIOCFLUSH BIOCFLUSH;
MACRO_BIOCFLUSH BIOCPROMISC;
MACRO_NONE BITONE;
MACRO_BITSPERBYTE BITSPERBYTE;
MACRO_BITS BITS_PER_BYTE;
MACRO_BLKDEV BLKDEV_IOSIZE;
MACRO_AREGTYPE BLKTYPE;
MACRO_BLK BLK_BYTECOUNT;
MACRO_BLK BLK_EOF;
MACRO_REC BLK_EOR;
MACRO_BLK BLK_ERRORS;
MACRO_BLK_FORMAT BLK_FORMAT;
MACRO_BLK BLK_RESTART;
MACRO_COLOR_MAP BLUE_SIGNATURE;
MACRO_BOGUS_GID BOGUS_GID;
MACRO_BOGUS_TYPE BOGUS_TYPE;
MACRO_BOGUS BOGUS_UID;
MACRO_BOOL BOOL_TOKEN;
MACRO_BOOTPARAMPROC BOOTPARAMPROC_GETFILE;
MACRO_BOOTPARAMPROC BOOTPARAMPROC_WHOAMI;
MACRO_IP_ADDR BOOTPARAMPROG;
MACRO_BOOTPARAMVERS BOOTPARAMVERS;
MACRO_EMPTY BOOT_TIME;
MACRO_TOP BOTTOM_EDGE;
MACRO_LFTORG BOTTOP;
MACRO_BPBYTE BPBYTE;
MACRO_BPF_A BPF_A;
MACRO_BPF_IMM BPF_ABS;
MACRO_BPF_ADD BPF_ADD;
MACRO_BPF_LD BPF_ALU;
MACRO_BPF_ADD BPF_AND;
MACRO_BPF_W BPF_B;
MACRO_BPF_ADD BPF_DIV;
MACRO_BPF_W BPF_H;
MACRO_BPF_IMM BPF_IMM;
MACRO_BPF_IMM BPF_IND;
MACRO_BPF_JA BPF_JA;
MACRO_BPF_JA BPF_JEQ;
MACRO_BPF_JA BPF_JGE;
MACRO_BPF_JA BPF_JGT;
MACRO_BPF_LD BPF_JMP;
MACRO_BPF_JA BPF_JSET;
MACRO_BPF_K BPF_K;
MACRO_BPF_LD BPF_LD;
MACRO_BPF_LD BPF_LDX;
MACRO_BPF_IMM BPF_LEN;
MACRO_BPF_ADD BPF_LSH;
MACRO_BPF_MINBUFSIZE BPF_MAJOR_VERSION;
MACRO_BPF BPF_MAXBUFSIZE;
MACRO_BPF BPF_MAXINSNS;
MACRO_BPF_IMM BPF_MEM;
MACRO_BPF_MEMWORDS BPF_MEMWORDS;
MACRO_BPF_MINBUFSIZE BPF_MINBUFSIZE;
MACRO_BPF_MINOR BPF_MINOR_VERSION;
MACRO_BPF_LD BPF_MISC;
MACRO_BPF_IMM BPF_MSH;
MACRO_BPF_ADD BPF_MUL;
MACRO_BPF_ADD BPF_NEG;
MACRO_BPF_ADD BPF_OR;
MACRO_BPF_LD BPF_RET;
MACRO_BPF_ADD BPF_RSH;
MACRO_BPF_LD BPF_ST;
MACRO_BPF_LD BPF_STX;
MACRO_BPF_ADD BPF_SUB;
MACRO_BPF_TAX BPF_TAX;
MACRO_BPF_TAX BPF_TXA;
MACRO_BPF_W BPF_W;
MACRO_BPF_K BPF_X;
MACRO_BPBYTE BPQUAD;
MACRO_TBEG BPW;
MACRO_BQUEUES BQUEUES;
MACRO_BQ BQ_AGE;
MACRO_BQ BQ_EMPTY;
MACRO_BQUEUES BQ_LOCKED;
MACRO_BQ BQ_LRU;
$F2011E9C2552B036D6D2F02AACD7A7DD BRA;
MACRO_IGNBRK BRKINT;
MACRO_BRK BRK_ABORT;
MACRO_BRK BRK_BD_NOTTAKEN;
MACRO_BRK BRK_BD_TAKEN;
MACRO_BRK BRK_DIVZERO;
MACRO_BRK BRK_KERNELBP;
MACRO_BRK BRK_OVERFLOW;
MACRO_BRK BRK_RANGE;
MACRO_BRK BRK_SSTEPBP;
MACRO_BRK BRK_STACKOVERFLOW;
MACRO_BRK BRK_USERBP;
$D44E3C4FF335410EC7120A246FFC2300 BROADCAST_QUERY;
bool BS;
MACRO_BS0 BS0;
MACRO_BS0 BS1;
MACRO_BSD BSD;
MACRO_BSD4 BSD4_3;
MACRO_XTABS BSDELAY;
MACRO_FF0 BSDLY;
MACRO_BSD_CURRENT BSD_CURRENT_VERSION;
MACRO_BSD_FOUND BSD_FOUND_HOWMASK;
MACRO_BSD_FOUND BSD_FOUND_LOCAL;
MACRO_BSD_FOUND BSD_FOUND_NETGR;
MACRO_BSD_FOUND BSD_FOUND_PLUS;
MACRO_BSD_FOUND BSD_FOUND_WILD;
MACRO_BSD_FOUND BSD_LOCAL_GECOS;
MACRO_BSD_FOUND BSD_LOCAL_HOMEDIR;
MACRO_BSD_FOUND BSD_LOCAL_MEMBERS;
MACRO_BSD_FOUND BSD_LOCAL_PASS;
MACRO_BSD_FOUND BSD_LOCAL_SHELL;
MACRO_BSD_MIN BSD_MAX_BITS;
MACRO_BSD_MIN BSD_MIN_BITS;
MACRO_BSD_NDADDR BSD_NDADDR;
MACRO_BSD_NDADDR BSD_NIADDR;
MACRO_BSD_SIA BSD_SIA_NUM;
MACRO_ECC BSE;
MACRO_BSIZE BSIZE;
char *BT;
MACRO_BT459_MAXY BT459_CX_TYPE;
MACRO_BT459_HX BT459_HX_TYPE;
MACRO_BT459 BT459_MAXX;
MACRO_BT459_MAXY BT459_MAXY;
MACRO_BT459_HX BT459_SFBP_TYPE2;
MACRO_BT459_TYPE2_ADDR BT459_TYPE2_ADDR_HIGH;
MACRO_BT459_TYPE2_ADDR BT459_TYPE2_ADDR_LOW;
MACRO_BT459_TYPE2_ADDR BT459_TYPE2_CMD_CMAP;
MACRO_BT459_TYPE2_ADDR BT459_TYPE2_CMD_CURS;
MACRO_BT459_TYPE2_DATA BT459_TYPE2_DATA_READ0_SHIFT;
MACRO_BT459_TYPE2_DATA BT459_TYPE2_DATA_READ1_SHIFT;
MACRO_BT459_TYPE2_DATA BT459_TYPE2_DATA_WRITE_SHIFT;
MACRO_BT459_TYPE2 BT459_TYPE2_SETUP_C0_MASK;
MACRO_BT459_TYPE2 BT459_TYPE2_SETUP_C1_MASK;
MACRO_BT459_TYPE2 BT459_TYPE2_SETUP_C2_MASK;
MACRO_SFBP BT459_TYPE2_SETUP_HEAD_MASK;
MACRO_BT459_TYPE2 BT459_TYPE2_SETUP_READ;
MACRO_BT459_TYPE2 BT459_TYPE2_SETUP_WRITE;
MACRO_R_CURSOR BTREEMAGIC;
MACRO_BTREEVERSION BTREEVERSION;
MACRO_B16MAGIC BTVMAGIC;
MACRO_BT BT_SET_BIT_STREAMING;
MACRO_BT BT_SET_CONT_STREAMING;
MACRO_BT BT_SET_RECOV_MODE;
MACRO_BT BT_SET_SIGNAL_LOSS;
MACRO_BUCKETLNTH BUCKETLNTH;
MACRO__KEY BUFMAX;
MACRO_FOPEN BUFSIZ;
MACRO_BUILD BUILD_VERSION;
MACRO_BUILTIN BUILTIN_VERS_ID_HIGH;
MACRO_BUILTIN BUILTIN_VERS_ID_LOW;
MACRO_BUS BUS_ADRALN;
MACRO_BUS BUS_ADRERR;
MACRO_BUS_IBUS BUS_BI;
MACRO_BUS_IBUS BUS_CI;
MACRO_DEVICE BUS_CONFIG_REVISION;
MACRO_BUS_CONFIG BUS_CONFIG_REV_V0;
MACRO_BUS_CONFIG BUS_CONFIG_REV_V1;
MACRO_BUS_CONFIG BUS_CONFIG_REV_V2;
MACRO_BUS_IBUS BUS_EISA;
MACRO_BUS_IBUS BUS_FBUS;
MACRO_BUS_IBUS BUS_FLAG;
MACRO_BUS_IBUS BUS_I2O;
MACRO_BUS_IBUS BUS_IBUS;
MACRO_BUS_IO BUS_IO;
MACRO_BUS_IBUS BUS_IOP;
MACRO_BUS_IBUS BUS_ISA;
MACRO_BUS_IBUS BUS_LAMB;
MACRO_BUS_IBUS BUS_LBUS;
MACRO_BUS_IBUS BUS_LSB;
MACRO_BUS_IBUS BUS_MCBUS;
MACRO_BUS_TV BUS_MEMORY;
MACRO_BUS_IBUS BUS_MSI;
MACRO_BUS BUS_OBJERR;
MACRO_BUS_IBUS BUS_PCI;
MACRO_BUS_IBUS BUS_PCMCIA;
MACRO_BUS_IBUS BUS_QBUS;
MACRO_BUS_IBUS BUS_SCSI;
MACRO_BUS_IBUS BUS_TC;
MACRO_BUS_TV BUS_TV;
MACRO_BOGUS_TYPE BUS_TYPE;
MACRO_BUS_IBUS BUS_UNIBUS;
MACRO_BUS_IBUS BUS_USB;
MACRO_BUS_IBUS BUS_VME;
MACRO_BUS_IBUS BUS_XMI;
MACRO_BUTTON1 BUTTON1_CLICKED;
MACRO_BUTTON1 BUTTON1_DOUBLE_CLICKED;
MACRO_BUTTON1 BUTTON1_PRESSED;
MACRO_BUTTON1 BUTTON1_RELEASED;
MACRO_BUTTON1 BUTTON1_TRIPLE_CLICKED;
MACRO_BUTTON1 BUTTON2_CLICKED;
MACRO_BUTTON1 BUTTON2_DOUBLE_CLICKED;
MACRO_BUTTON1 BUTTON2_PRESSED;
MACRO_BUTTON1 BUTTON2_RELEASED;
MACRO_BUTTON1 BUTTON2_TRIPLE_CLICKED;
MACRO_BUTTON1 BUTTON3_CLICKED;
MACRO_BUTTON1 BUTTON3_DOUBLE_CLICKED;
MACRO_BUTTON1 BUTTON3_PRESSED;
MACRO_BUTTON1 BUTTON3_RELEASED;
MACRO_BUTTON1 BUTTON3_TRIPLE_CLICKED;
MACRO_NULL_DEVICE BUTTONBOX_DEVICE;
MACRO_BUTTON BUTTON_CLICKED;
MACRO_BUTTON BUTTON_DOUBLE_CLICKED;
MACRO_BUTTON_UP BUTTON_DOWN_TYPE;
MACRO_BUTTON BUTTON_PRESSED;
MACRO_BUTTON_UP BUTTON_RAW_TYPE;
MACRO_BUTTON BUTTON_RELEASED;
MACRO_BUTTON BUTTON_TRIPLE_CLICKED;
MACRO_BUTTON_UP BUTTON_UP_TYPE;
MACRO_BX BX_LAYERED_IO;
MACRO_BX BX_RESTORE_DEV;
MACRO_BYNAME BYINODE;
MACRO_BYNAME BYMD;
MACRO_BYNAME BYNAME;
MACRO_BYTES BYTES_PER_XDR_UNIT;
MACRO_TEGC BYTEWORD_IO_CAPABLE;
MACRO_XER BYTE_MASK;
MACRO_BYTE BYTE_ORDER;
MACRO_BYTE_SIZE BYTE_SIZE;
MACRO_B B_ACTIVE;
MACRO_B_ADAPTORMASK B_ADAPTORMASK;
MACRO_B_ADAPTORSHIFT B_ADAPTORSHIFT;
MACRO_B B_AGE;
MACRO_B B_ASYNC;
MACRO_B B_BAD;
MACRO_B B_BUSY;
MACRO_B B_CACHE;
MACRO_B B_CHKERRORS;
MACRO_B B_DATAONLY;
MACRO_B_DDIDKI B_DDIDKI;
MACRO_B B_DELWRI;
MACRO_B_DEVMAGIC B_DEVMAGIC;
MACRO_B B_DIRTY;
MACRO_B B_DONE;
MACRO_B B_ERROR;
MACRO_B B_FREE;
MACRO_B B_HEAD;
MACRO_B B_HWRELOC;
MACRO_B B_INVAL;
MACRO_B B_JUSTFLUSH;
MACRO_B B_LOCKED;
MACRO_B_TYPESHIFT B_MAGICMASK;
MACRO_B B_MSYNC;
MACRO_B B_NOCACHE;
MACRO_B_PARTITIONSHIFT B_PARTITIONMASK;
MACRO_B_PARTITIONSHIFT B_PARTITIONSHIFT;
MACRO_B B_PHYS;
MACRO_B B_RAW;
MACRO_B B_READ;
MACRO_B B_REMAPPED;
MACRO_B B_SGIO;
MACRO_B B_SWAP;
MACRO_B B_TAPE;
MACRO_B_TYPESHIFT B_TYPEMASK;
MACRO_B_TYPESHIFT B_TYPESHIFT;
MACRO_B B_UBC;
MACRO_B_ADAPTORMASK B_UNITMASK;
MACRO_B_ADAPTORMASK B_UNITSHIFT;
MACRO_B B_USELESS;
MACRO_B2 B_W;
MACRO_B B_WANTED;
MACRO_B B_WANTFREE;
MACRO_B B_WRITE;
MACRO_B B_XFLAGS;
MACRO_Success BadAccess;
MACRO_Success BadAlloc;
MACRO_Success BadAtom;
MACRO_Success BadColor;
MACRO_Success BadCursor;
MACRO_BadIO BadDevices;
MACRO_Success BadDrawable;
MACRO_Success BadFont;
MACRO_Success BadGC;
MACRO_Success BadIDChoice;
MACRO_BadIO BadIO;
MACRO_Success BadImplementation;
MACRO_Success BadLength;
MACRO_Success BadMatch;
MACRO_Success BadName;
MACRO_BadPEXColorType BadPEXColorType;
MACRO_BadPEXColorType BadPEXFloatingPointFormat;
MACRO_BadPEXColorType BadPEXFont;
MACRO_BadPEXColorType BadPEXLabel;
MACRO_BadPEXColorType BadPEXLookupTable;
MACRO_BadPEXColorType BadPEXNameSet;
MACRO_BadPEXColorType BadPEXOutputCommand;
MACRO_BadPEXColorType BadPEXPath;
MACRO_BadPEXColorType BadPEXPickMeasure;
MACRO_BadPEXColorType BadPEXPipelineContext;
MACRO_BadPEXColorType BadPEXRenderer;
MACRO_BadPEXColorType BadPEXRendererState;
MACRO_BadPEXColorType BadPEXSearchContext;
MACRO_BadPEXColorType BadPEXStructure;
MACRO_BadPEXColorType BadPEXWorkstation;
MACRO_Success BadPixmap;
MACRO_Success BadRequest;
MACRO_BadIO BadScreen;
MACRO_BadShmSeg BadShmSeg;
MACRO_BadIO BadStatistics;
MACRO_BadIO BadSwapReq;
MACRO_Success BadValue;
MACRO_Success BadWindow;
MACRO_KbdFeedbackClass BellFeedbackClass;
MACRO_Above Below;
MACRO_BitmapSuccess BitmapFileInvalid;
MACRO_BitmapFormatBitOrderLSB BitmapFormatBitOrderLSB;
MACRO_BitmapFormatBitOrderLSB BitmapFormatBitOrderMSB;
MACRO_BitmapFormatByteOrderMask BitmapFormatBitOrderMask;
MACRO_BitmapFormatByteOrderLSB BitmapFormatByteOrderLSB;
MACRO_BitmapFormatByteOrderLSB BitmapFormatByteOrderMSB;
MACRO_BitmapFormatByteOrderMask BitmapFormatByteOrderMask;
MACRO_BitmapFormatByteOrderMask BitmapFormatImageRectMask;
MACRO_BitmapFormatImageRectMin BitmapFormatImageRectMax;
MACRO_BitmapFormatImageRectMin BitmapFormatImageRectMaxWidth;
MACRO_BitmapFormatImageRectMin BitmapFormatImageRectMin;
MACRO_BitmapFormatMaskByte BitmapFormatMaskBit;
MACRO_BitmapFormatMaskByte BitmapFormatMaskByte;
MACRO_BitmapFormatMaskByte BitmapFormatMaskImageRectangle;
MACRO_BitmapFormatMaskByte BitmapFormatMaskScanLinePad;
MACRO_BitmapFormatMaskByte BitmapFormatMaskScanLineUnit;
MACRO_BitmapFormatScanlinePad8 BitmapFormatScanlinePad16;
MACRO_BitmapFormatScanlinePad8 BitmapFormatScanlinePad32;
MACRO_BitmapFormatScanlinePad8 BitmapFormatScanlinePad64;
MACRO_BitmapFormatScanlinePad8 BitmapFormatScanlinePad8;
MACRO_BitmapFormatByteOrderMask BitmapFormatScanlinePadMask;
MACRO_BitmapFormatScanlineUnit8 BitmapFormatScanlineUnit16;
MACRO_BitmapFormatScanlineUnit8 BitmapFormatScanlineUnit32;
MACRO_BitmapFormatScanlineUnit8 BitmapFormatScanlineUnit64;
MACRO_BitmapFormatScanlineUnit8 BitmapFormatScanlineUnit8;
MACRO_BitmapFormatByteOrderMask BitmapFormatScanlineUnitMask;
MACRO_BitmapSuccess BitmapNoMemory;
MACRO_BitmapSuccess BitmapOpenFailed;
MACRO_BitmapSuccess BitmapSuccess;
MACRO_BitsInByte BitsInByte;
MACRO_Above BottomIf;
MACRO_Button1 Button1;
MACRO_ShiftMapIndex Button1Mask;
MACRO_NoEventMask Button1MotionMask;
MACRO_Button1 Button2;
MACRO_ShiftMapIndex Button2Mask;
MACRO_NoEventMask Button2MotionMask;
MACRO_Button1 Button3;
MACRO_ShiftMapIndex Button3Mask;
MACRO_NoEventMask Button3MotionMask;
MACRO_Button1 Button4;
MACRO_ShiftMapIndex Button4Mask;
MACRO_NoEventMask Button4MotionMask;
MACRO_Button1 Button5;
MACRO_ShiftMapIndex Button5Mask;
MACRO_NoEventMask Button5MotionMask;
MACRO_KeyClass ButtonClass;
MACRO_NoEventMask ButtonMotionMask;
MACRO_KeyPress ButtonPress;
MACRO_NoEventMask ButtonPressMask;
MACRO_KeyPress ButtonRelease;
MACRO_NoEventMask ButtonReleaseMask;
bool CA;
MACRO_TBUNUSED CALCOMP_DISC;
msg_type CALL;
MACRO_CAM CAM_DT_CFCS;
MACRO_CANBSIZ CANBSIZ;
MACRO_CANCEL CANCEL_OFF;
MACRO_CANCEL CANCEL_ON;
MACRO_PLOT CAPS;
MACRO_CARET CARET_HEIGHT;
MACRO_IBEAM CARET_WIDTH;
MACRO_CAT CATD_ERR;
MACRO_CAT CAT_MAGIC;
MACRO_CAT_NOTINIT CAT_NOSYM;
MACRO_CAT_NOTINIT CAT_NOTINIT;
MACRO_CBELL CBELL;
MACRO_CBLOCK CBLOCK;
MACRO_CBQSIZE CBQSIZE;
MACRO_TANDEM CBREAK;
MACRO_CREPRINT CBRK;
MACRO_ST_ADU CBUFSIZE;
MACRO_PCM CCITT_1;
MACRO_PCM CCITT_2;
MACRO_PCM CCITT_3;
MACRO_OPENMSG CCMSG;
MACRO_COMP CCP_COMP_RUN;
MACRO_CCP CCP_CONFACK;
MACRO_CCP CCP_CONFREQ;
MACRO_COMP CCP_DECOMP_RUN;
MACRO_COMP CCP_ERROR;
MACRO_COMP CCP_FATALERROR;
MACRO_CCP_HDRLEN CCP_HDRLEN;
MACRO_COMP CCP_ISOPEN;
MACRO_COMP CCP_ISUP;
MACRO_CCP CCP_MAX_OPTION_LENGTH;
MACRO_CCP_OPT CCP_OPT_MINLEN;
MACRO_CCP CCP_RESETACK;
MACRO_CCP CCP_RESETREQ;
MACRO_CCP CCP_TERMACK;
MACRO_CCP CCP_TERMREQ;
MACRO_CCT CCT_ID_LEN;
char *CD;
MACRO_VDATA CDATA;
MACRO_CDEL CDEL;
MACRO_CDFS CDFS_EXTENDED_ARGS_VERSION;
MACRO_CDISCARD CDISCARD;
MACRO_CTIME CDSUSP;
MACRO_CD_EXIST CD_ASSOFILE;
MACRO_CD_EXIST CD_DIR;
MACRO_CD_DIRXAR CD_DIRRX;
MACRO_CD_DIRXAR CD_DIRXAR;
MACRO_CD_EXIST CD_EXIST;
MACRO_CD_SETDEFS CD_GETDEFS;
MACRO_CD_SETUMAP CD_GETGMAP;
MACRO_CD_GETNMCONV CD_GETNMCONV;
MACRO_CD_SETUMAP CD_GETUMAP;
MACRO_CD_LOWER CD_LOWER;
MACRO_CD CD_MAXDMAP;
MACRO_CD_MAXDRECL CD_MAXDRECL;
MACRO_CD_MAXGMAP CD_MAXGMAP;
MACRO_CD_MAXPTRECL CD_MAXPTRECL;
MACRO_CD_SETUMAP CD_MAXUMAP;
MACRO_CD_EXIST CD_MULTIEXT;
MACRO_CD_GETNMCONV CD_NOCONV;
MACRO_CD_LOWER CD_NOVERSION;
MACRO_CD_EXIST CD_PROTEC;
MACRO__ISO CD_PVDLEN;
MACRO_CD_EXIST CD_RECORD;
MACRO_CD_XSYS CD_RGRP;
MACRO_CD_XSYS CD_ROTH;
MACRO_CD_XARFIXL CD_RSYS;
MACRO_CD_XSYS CD_RUSR;
MACRO_CD_SETDEFS CD_SETDEFS;
MACRO_CD CD_SETDMAP;
MACRO_CD_SETUMAP CD_SETGMAP;
MACRO_CD_MAXGMAP CD_SETNMCONV;
MACRO_CD_SETUMAP CD_SETUMAP;
MACRO_CD_UNSETDMAP CD_UNSETDMAP;
MACRO_CD_XARFIXL CD_XARFIXL;
MACRO_CD_XSYS CD_XGRP;
MACRO_CD_XSYS CD_XOTH;
MACRO_CD_XSYS CD_XSYS;
MACRO_CD_XSYS CD_XUSR;
char *CE;
MACRO_CEOF CEOF;
MACRO_CNUL CEOL;
MACRO_CEOT CEOT;
MACRO_CEOT CERASE;
MACRO_CBELL CESC;
MACRO_CE CE_CONT;
MACRO_CE CE_NOTE;
MACRO_CE CE_PANIC;
MACRO_CE CE_WARN;
MACRO_CONSOLE CFB_DTYPE;
MACRO_CFG_ATTR CFG_ATTR_BINTYPE;
MACRO_CFG_ATTR_SUCCESS CFG_ATTR_EADDR;
MACRO_CFG_ATTR_SUCCESS CFG_ATTR_EEXISTS;
MACRO_CFG_ATTR_SUCCESS CFG_ATTR_EINDEX;
MACRO_CFG_ATTR_SUCCESS CFG_ATTR_ELARGE;
MACRO_CFG_ATTR_SUCCESS CFG_ATTR_EMEM;
MACRO_CFG_ATTR_SUCCESS CFG_ATTR_ENOTNUMBER;
MACRO_CFG_ATTR_SUCCESS CFG_ATTR_EOP;
MACRO_CFG_ATTR_SUCCESS CFG_ATTR_ESMALL;
MACRO_CFG_ATTR_SUCCESS CFG_ATTR_ESUBSYS;
MACRO_CFG_ATTR_SUCCESS CFG_ATTR_ETYPE;
MACRO_CFG_ATTR CFG_ATTR_INTTYPE;
MACRO_CFG_ATTR CFG_ATTR_LONGTYPE;
MACRO_CFG_SUCCESS CFG_ATTR_NAME_SZ;
MACRO_CFG_ATTR CFG_ATTR_STRTYPE;
MACRO_CFG_ATTR_SUCCESS CFG_ATTR_SUCCESS;
MACRO_CFG_ATTR CFG_ATTR_UCHARTYPE;
MACRO_CFG_ATTR CFG_ATTR_UINTTYPE;
MACRO_CFG_ATTR CFG_ATTR_ULONGTYPE;
MACRO_CFG_ATTR CFG_ATTR_USHORTTYPE;
MACRO_CFG_ORD_HAL CFG_DEPTAB_ENTRIES;
MACRO_CFG_PROTO_VERSION CFG_FLAG_NOFLAGS;
MACRO_CFG_FLAG CFG_FLAG_VERBOSE;
MACRO_CFG_FRAME CFG_FRAME_EALREADY;
MACRO_CFG_FRAME CFG_FRAME_EATTR_LIST;
MACRO_CFG_FRAME CFG_FRAME_EATTR_TBL;
MACRO_CFG_FRAME CFG_FRAME_ECFG_RTN;
MACRO_CFG_FRAME CFG_FRAME_ECONFIGURED;
MACRO_CFG_FRAME CFG_FRAME_ECONNECT;
MACRO_CFG_FRAME CFG_FRAME_ECOPY;
MACRO_CFG_FRAME CFG_FRAME_EEXCEEDDEPTH;
MACRO_CFG_FRAME CFG_FRAME_EEXCEEDENTRY;
MACRO_CFG_FRAME CFG_FRAME_EEXISTS;
MACRO_CFG_FRAME CFG_FRAME_ELOADER;
MACRO_CFG_FRAME CFG_FRAME_ELOADREQ;
MACRO_CFG_FRAME CFG_FRAME_EMEM;
MACRO_CFG_FRAME CFG_FRAME_EMETHOD_POST;
MACRO_CFG_FRAME CFG_FRAME_EMETHOD_PRE;
MACRO_CFG_FRAME CFG_FRAME_EMODULEID;
MACRO_CFG_FRAME CFG_FRAME_ENODEPEND;
MACRO_CFG_FRAME CFG_FRAME_ENOHOTSWAP;
MACRO_CFG_FRAME CFG_FRAME_ENOSYM;
MACRO_CFG_FRAME CFG_FRAME_EPRIVS;
MACRO_CFG_FRAME CFG_FRAME_EREFCNT;
MACRO_CFG_FRAME CFG_FRAME_EREGISTER;
MACRO_CFG_FRAME CFG_FRAME_ESIZE;
MACRO_CFG_FRAME CFG_FRAME_ESUBSYS;
MACRO_CFG_FRAME CFG_FRAME_ESUBSYSNAME;
MACRO_CFG_FRAME CFG_FRAME_ETIMEOUT;
MACRO_CFG_FRAME CFG_FRAME_SUCCESS;
MACRO_CFG CFG_HIDDEN_ATTR;
MACRO_CFG_OP CFG_OP_CM_ADD_REG;
MACRO_CFG_OP CFG_OP_CM_DEL_REG;
MACRO_CFG_OP CFG_OP_CM_GET_ATTRCNT;
MACRO_CFG_OP CFG_OP_CM_GET_ATTRINFO;
MACRO_CFG_OP CFG_OP_CM_GET_ATTRINFO_ALL;
MACRO_CFG_OP CFG_OP_CM_GET_REG;
MACRO_CFG CFG_OP_CONFIGURE;
MACRO_CFG_OP_KSM_FIND CFG_OP_KSM_FIND;
MACRO_CFG_OP_KSM_FIND CFG_OP_KSM_GETALLATTR;
MACRO_CFG_OP_KSM_FIND CFG_OP_KSM_GETATTR;
MACRO_CFG_OP_KSM_FIND CFG_OP_KSM_GETINFO;
MACRO_CFG_OP_KSM_FIND CFG_OP_KSM_GETNAMES;
MACRO_CFG_OP_KSM_LIB CFG_OP_KSM_LIB_MAX;
MACRO_CFG_OP_KSM_LIB CFG_OP_KSM_LIB_MIN;
MACRO_CFG_OP_KSM_FIND CFG_OP_KSM_MEMOP;
MACRO_CFG_OP_KSM CFG_OP_KSM_MIN;
MACRO_CFG_OP_KSM_READ CFG_OP_KSM_READ_MAX;
MACRO_CFG_OP_KSM_READ CFG_OP_KSM_READ_MIN;
MACRO_CFG_OP_KSM_FIND CFG_OP_KSM_SETATTR;
MACRO_CFG_OP_KSM_FIND CFG_OP_KSM_SETOP;
MACRO_CFG_OP_KSM_READ CFG_OP_KSM_WRITE_MAX;
MACRO_CFG_OP_KSM_READ CFG_OP_KSM_WRITE_MIN;
MACRO_CFG CFG_OP_QUERY;
MACRO_CFG CFG_OP_QUERY_DEFAULTS;
MACRO_CFG CFG_OP_RECONFIGURE;
MACRO_SYSCONFIG CFG_OP_SUBSYS_MAX;
MACRO_SYSCONFIG CFG_OP_SUBSYS_MIN;
MACRO_CFG CFG_OP_SUBSYS_STATE;
MACRO_CFG CFG_OP_UNCONFIGURE;
MACRO_CFG_ORD CFG_ORD_DONTCARE;
MACRO_CFG_ORD_MAXIMUM CFG_ORD_HAL_EARLY;
MACRO_CFG_ORD_HAL CFG_ORD_HAL_LATE;
MACRO_CFG_ORD_MAXIMUM CFG_ORD_MAXIMUM;
MACRO_CFG_ORD CFG_ORD_NOMINAL;
MACRO_CFG_PROTO CFG_PROTO_V1;
MACRO_CFG_PROTO CFG_PROTO_V2;
MACRO_CFG_PROTO CFG_PROTO_V3;
MACRO_CFG_PROTO_VERSION CFG_PROTO_VERSION;
MACRO_CFG_PT_CDB CFG_PT_CDB_WR;
MACRO_CFG_PT_POSTCONFIG CFG_PT_CLU_CONF;
MACRO_CFG_PT_CPU CFG_PT_CPU_SHUTDOWN_1;
MACRO_CFG_PT_CPU CFG_PT_CPU_SHUTDOWN_2;
MACRO_CFG_PT_CPU CFG_PT_CPU_STARTUP_1;
MACRO_CFG_PT_CPU CFG_PT_CPU_STARTUP_2;
MACRO_HS CFG_PT_DELETED;
MACRO_CFG_PT_POSTCONFIG CFG_PT_ENTER_SUSER;
MACRO_CFG_PT_POSTCONFIG CFG_PT_GLROOTFS_AVAIL;
MACRO_CFG_PT_UNIXTBL CFG_PT_HAL_INIT;
MACRO_CFG_PT_UNIXTBL CFG_PT_LOCK_AVAIL;
MACRO_CFG_PT CFG_PT_MAX;
MACRO_CFG_PT CFG_PT_MIN;
MACRO_CFG_PT_CDB CFG_PT_MULTIUSER;
MACRO_CFG_PT_PRECONFIG CFG_PT_OLD_CONF_ALL;
MACRO_CFG_PT_PRECONFIG CFG_PT_PLATFORM_CONF;
MACRO_CFG_PT_POSTCONFIG CFG_PT_POSTCONFIG;
MACRO_CFG_PT_PRECONFIG CFG_PT_PRECONFIG;
MACRO_CFG_PT_POSTCONFIG CFG_PT_ROOTFS_AVAIL;
MACRO_CFG_PT_CDB CFG_PT_ROOTFS_WR;
MACRO_CFG_PT_POSTCONFIG CFG_PT_RUNTIME_KERN_MAX;
MACRO_CFG_PT_POSTCONFIG CFG_PT_RUNTIME_KERN_MIN;
MACRO_CFG_PT_CPU CFG_PT_RUNTIME_USER_MAX;
MACRO_CFG_PT_CPU CFG_PT_RUNTIME_USER_MIN;
MACRO_CFG_PT_PRECONFIG CFG_PT_TOPOLOGY_CONF;
MACRO_CFG_PT_UNIXTBL CFG_PT_UNIXTBL_AVAIL;
MACRO_CFG_PT_UNIXTBL CFG_PT_VM_AVAIL;
MACRO_CFG_SET CFG_REL_DEPEND;
MACRO_CFG_SET CFG_SET_DEPEND;
MACRO_CFG_STATE CFG_STATE_CONFIGURED;
MACRO_CFG_STATE CFG_STATE_DYNAMIC;
MACRO_CFG_STATE CFG_STATE_FOREIGN;
MACRO_CFG_STATE CFG_STATE_INIT_ERROR;
MACRO_CFG_STATE CFG_STATE_LOADED;
MACRO_CFG_STATE CFG_STATE_TYPE_OLD;
MACRO_CFG_STATE CFG_STATE_UNCONFIGURED;
MACRO_CFG_SUBSYS CFG_SUBSYS_EINIT;
MACRO_CFG_SUBSYS CFG_SUBSYS_ERESTART;
MACRO_CFG_SUCCESS CFG_SUBSYS_MAXATTR;
MACRO_CFG_SUCCESS CFG_SUBSYS_NAME_SZ;
MACRO_CFG_SUBSYS CFG_SUBSYS_SUCCESS;
MACRO_CFG_SUCCESS CFG_SUCCESS;
MACRO_CFG_USER CFG_USER_NAMELEN;
MACRO_CFG_USER CFG_USER_NAMELEN_V2;
MACRO_CFLUSH CFLUSH;
MACRO_CFLUSHO CFLUSHO;
MACRO_CFORM CFORM;
MACRO_CFS CFS_CAN_NOT_CHG_ACL;
MACRO_CFS CFS_CAN_NOT_CHG_MODE;
MACRO_CFS CFS_CAN_NOT_CHG_OWNER_GROUP;
MACRO_CFS CFS_CAN_NOT_CHG_SL;
MACRO_CFS CFS_CAN_NOT_OPEN_FILE;
MACRO_CFS CFS_GOOD_RETURN;
MACRO_CFS CFS_NO_FILE_CONTROL_ENTRY;
MACRO_CURRENT CHANGED_VALUES;
MACRO_CHARCLASS CHARCLASS_NAME_MAX;
MACRO_CHARMAP CHARMAP_CHARMAP_INIT;
MACRO_CHARMAP CHARMAP_MBLEN;
MACRO_CHARMAP CHARMAP_MBSTOWCS;
MACRO_CHARMAP CHARMAP_MBTOWC;
MACRO_CHARMAP CHARMAP_NL_LANGINFO;
MACRO_CHARMAP CHARMAP_WCSTOMBS;
MACRO_CHARMAP CHARMAP_WCSWIDTH;
MACRO_CHARMAP CHARMAP_WCTOMB;
MACRO_CHARMAP CHARMAP_WCWIDTH;
MACRO_CHARMAP CHARMAP___MBSTOPCS;
MACRO_CHARMAP CHARMAP___MBTOPC;
MACRO_CHARMAP CHARMAP___PCSTOMBS;
MACRO_CHARMAP CHARMAP___PCTOMB;
MACRO_CHAR CHAR_BIT;
MACRO_CHAR_MAX CHAR_MAX;
MACRO_CHAR_MAX CHAR_MIN;
MACRO_CHAR_TOKEN CHAR_TOKEN;
MACRO_SLX CHDR_LEN;
MACRO_PACKED CHECKSUM;
MACRO_TEGC CHECK_IDE_LIMITS;
MACRO_TEGC CHECK_MOTHERBOARD_SLOT;
MACRO_CHGPASSWD CHGENTITY;
MACRO_CHGPASSWD CHGFINGER;
MACRO_CHGPASSWD CHGNEWVALUE;
MACRO_CHGPASSWD CHGPASSWD;
MACRO_CHGPASSWD CHGSHELL;
MACRO_CHILD CHILD_MAX;
MACRO_AREGTYPE CHRTYPE;
MACRO_CIICFocus CIBg;
MACRO_CIICFocus CIBgPixmap;
MACRO_CIICFocus CICursorP;
MACRO_CIICFocus CIFg;
MACRO_CIICFocus CIFontSet;
MACRO_CIICFocus CIICFocus;
MACRO_CILEN CILEN_BSD_COMPRESS;
MACRO_CILEN_DEFLATE CILEN_DEFLATE;
MACRO_DEFLATE_CHK CILEN_PREDICTOR_1;
MACRO_CILEN_PREDICTOR CILEN_PREDICTOR_2;
MACRO_CIICFocus CILineS;
MACRO_CINTR CINTR;
MACRO_CCP_OPT CI_BSD_COMPRESS;
MACRO_BSD_MIN CI_DEFLATE;
MACRO_DEFLATE_CHK CI_PREDICTOR_1;
MACRO_CI CI_PREDICTOR_2;
MACRO_CINTR CKILL;
char *CL;
MACRO_CLASS_SUCCESS CLASS_ALREADY_ENABLED;
MACRO_CLASS_SUCCESS CLASS_CLASS_NOT_EMPTY;
MACRO_CLASS_SUCCESS CLASS_CLASS_NOT_EXIST;
MACRO_CLASS_SUCCESS CLASS_DAEMON_FAIL;
MACRO_CLASS_SUCCESS CLASS_DATABASE_MODIFIED;
MACRO_CLASS_SUCCESS CLASS_DEFAULT_CLASS_OP;
MACRO_CLASS_SUCCESS CLASS_DEFAULT_CONFIGURED;
MACRO_CLASS CLASS_DEFAULT_INDEX;
MACRO_CLASS_SUCCESS CLASS_FILE_FAILURE;
MACRO_CLASS_FILE CLASS_FILE_ID;
MACRO_CLASS_SUCCESS CLASS_INVAL_PARTITION;
MACRO_CLASS_SUCCESS CLASS_INVAL_PERCENT;
MACRO_CLASS_SUCCESS CLASS_INVAL_RESOURCE_TYPE;
MACRO_CLASS_SUCCESS CLASS_LAST_ERROR;
MACRO_CLASS_SUCCESS CLASS_MEMBER_ALREADY_IN_CLASS;
MACRO_CLASS_SUCCESS CLASS_MEMBER_IN_OTHER_CLASS;
MACRO_CLASS_SUCCESS CLASS_MEMBER_NOT_IN_CLASS;
MACRO_CLASS_SUCCESS CLASS_MEM_ALLOC_FAILURE;
MACRO_CLASS_SUCCESS CLASS_NAME_INVALID;
MACRO_CLASS_SUCCESS CLASS_NAME_IN_USE;
MACRO_CLASS_NAME CLASS_NAME_LEN;
MACRO_CLASS_SUCCESS CLASS_NAME_TOO_LONG;
MACRO_CLASS_SUCCESS CLASS_NOT_ENABLED;
MACRO_CLASS_SUCCESS CLASS_NOT_SUSER;
MACRO_CLASS_SUCCESS CLASS_NO_SPACE;
MACRO_CLASS_SUCCESS CLASS_RESERVED;
MACRO_CLASS_RESOURCE_NO CLASS_RESOURCE_NO_CHANGE;
MACRO_CLASS_RESOURCE CLASS_RESOURCE_SCHED_DISABLED;
MACRO_CLASS_SCHED CLASS_SCHED_EVENT_ADD;
MACRO_CLASS_SCHED CLASS_SCHED_EVENT_ALL;
MACRO_CLASS_SCHED CLASS_SCHED_EVENT_DEL;
MACRO_CLASS CLASS_SCHED_EVENT_NONE;
MACRO_CLASS_SCHED CLASS_SCHED_EVENT_PSET;
MACRO_CLASS_SCHED CLASS_SCHED_EVENT_RGID;
MACRO_CLASS_SCHED CLASS_SCHED_EVENT_RUID;
MACRO_CLASS_SUCCESS CLASS_SEMAPHORE_FAILURE;
MACRO_CLASS_SUCCESS CLASS_SHARED_MEM_FAILURE;
MACRO_CLASS_SUCCESS CLASS_SUCCESS;
MACRO_CLASS_SUCCESS CLASS_TOO_HIGH_PERCENT;
MACRO_CLASS_SUCCESS CLASS_UNKNOWN_ERROR;
MACRO_CLBYTES CLBYTES;
MACRO_CLD CLD_CONTINUED;
MACRO_CLD CLD_DUMPED;
MACRO_CLD CLD_EXITED;
MACRO_CLD CLD_KILLED;
MACRO_CLD CLD_SIGEXITING;
MACRO_CLD CLD_STOPPED;
MACRO_CLD CLD_TRAPPED;
MACRO_CLSET CLGET_FD;
MACRO_CLSET_RETRY CLGET_RETRY_TIMEOUT;
MACRO_CLSET CLGET_SERVER_ADDR;
MACRO_CLSET CLGET_TIMEOUT;
MACRO_CLIENT CLIENT_REQ;
MACRO_CLK CLK_TCK;
MACRO_CLNAME CLNAME_SZ;
MACRO_CSTART CLNEXT;
MACRO_CS5 CLOCAL;
MACRO_RTSIG CLOCKDRIFT_MAX;
MACRO_CLOCKS CLOCKS_PER_SEC;
MACRO_CLOCK CLOCK_REALTIME;
MACRO_CLOFF CLOFF;
MACRO_CLOFSET CLOFSET;
MACRO_CLOSED CLOSED;
MACRO_OPENMSG CLOSEMSG;
MACRO_OPENMSG CLOSEREPLY;
MACRO_CLSET CLSET_FD_CLOSE;
MACRO_CLSET CLSET_FD_NCLOSE;
MACRO_CLSET_RETRY CLSET_RETRY_TIMEOUT;
MACRO_CLSET CLSET_TIMEOUT;
MACRO_CLSHIFT CLSHIFT;
MACRO_CLSIZELOG2 CLSIZE;
MACRO_CLSIZELOG2 CLSIZELOG2;
$A829E30ADE25BA100BED3372F6628FC3 CLUCALL_DLOPEN;
$A829E30ADE25BA100BED3372F6628FC3 CLUCALL_DLSYM;
$A829E30ADE25BA100BED3372F6628FC3 CLUCALL_NOTCONFIG;
$A829E30ADE25BA100BED3372F6628FC3 CLUCALL_SUCCESS;
MACRO_CLU_ADM CLU_ADM_LOCK;
MACRO_CLU_ADM CLU_ADM_UNLOCK;
MACRO_CLU_NO_MEMBERLIST CLU_BAD_CLUINTER;
MACRO_CLU_NO_MEMBERLIST CLU_BAD_MEMBERLIST;
MACRO_CLU_INFO_SUCCESS CLU_CNX_ERROR;
$EA15948D1F9B99548B9F82A14FE7C2E2 CLU_GET;
MACRO_CLU_INFO CLU_INFO_CLU_NAME;
MACRO_CLU_INFO CLU_INFO_GENERAL;
MACRO_CLU_INFO CLU_INFO_HOSTNAME_BY_ID;
MACRO_CLU_INFO CLU_INFO_HOSTNAME_BY_NAME;
MACRO_CLU_INFO CLU_INFO_INTERNAME_BY_ID;
MACRO_CLU_INFO CLU_INFO_INTERNAME_BY_NAME;
MACRO_CLU_INFO CLU_INFO_LIMITS;
MACRO_CLU_INFO CLU_INFO_MEMBERID_BY_ID;
MACRO_CLU_INFO CLU_INFO_MEMBERID_BY_NAME;
MACRO_CLU_INFO CLU_INFO_MEMBER_BY_ID;
MACRO_CLU_INFO CLU_INFO_MEMBER_BY_NAME;
MACRO_CLU_INFO CLU_INFO_MEMBLIST;
MACRO_CLU_INFO CLU_INFO_MEMBSTATE;
MACRO_CLU_INFO CLU_INFO_MY_ID;
MACRO_CLU_INFO CLU_INFO_NODENAME_BY_ID;
MACRO_CLU_INFO CLU_INFO_NODENAME_BY_NAME;
MACRO_CLU_INFO_SUCCESS CLU_INFO_SUCCESS;
MACRO_CLU_MAXNAMELEN CLU_MAXNAMELEN;
MACRO_CLU_MEMBER CLU_MEMBER_ROOT_STRLEN;
MACRO_CLU_MEMB CLU_MEMB_CONF_DOWN;
MACRO_CLU_MEMB CLU_MEMB_CONF_UP;
MACRO_RUN_UNKNOWN CLU_MEMB_NOT_CONF;
MACRO_CLU CLU_NOT_CONFIGURED;
MACRO_CLU_INFO_SUCCESS CLU_NOT_MEMBER;
MACRO_CLU_INFO_SUCCESS CLU_NO_CLUSTER_NAME;
MACRO_CLU_INFO_SUCCESS CLU_NO_MEMBERID;
MACRO_CLU_NO_MEMBERLIST CLU_NO_MEMBERLIST;
MACRO_CLU_NO CLU_NO_MEMORY;
MACRO_CLU_NO_MEMBERLIST CLU_NO_RC_CONFIG;
$EA15948D1F9B99548B9F82A14FE7C2E2 CLU_SET;
$10FF06C071A5D3613F4C4523ECAD6E10 CL_CONF_LAST;
$10FF06C071A5D3613F4C4523ECAD6E10 CL_CONF_MAX_NONCONFORM_QUEUE;
$10FF06C071A5D3613F4C4523ECAD6E10 CL_CONF_MAX_NR_FLOWS;
$10FF06C071A5D3613F4C4523ECAD6E10 CL_CONF_MAX_TOTAL_b;
$10FF06C071A5D3613F4C4523ECAD6E10 CL_CONF_MAX_TOTAL_r;
MACRO_CL CL_DEF_MAX_NONCONFORM;
MACRO_CL_DEF CL_DEF_MAX_NR_FLOWS;
MACRO_CL CL_DEF_MAX_TOTAL_b;
MACRO_CL_OP CL_OP_ADD_TO_CLASS;
MACRO_CL_OP CL_OP_DAEMON_ALIVE;
MACRO_CL_OP CL_OP_DEL_FROM_CLASS;
MACRO_CL_OP CL_OP_DISABLE;
MACRO_CL_OP CL_OP_ENABLE;
MACRO_CL_OP CL_OP_GET_CLASS_LIST;
MACRO_CL_OP CL_OP_GET_PARTITION;
MACRO_CL_OP CL_OP_GET_PID_CLASS;
MACRO_CL_OP CL_OP_IS_ENABLED;
MACRO_CL_OP CL_OP_SET_CLASS_LIST;
MACRO_CL_STATE CL_STATE_DFLT_CLASS_INUSE;
MACRO_CL_STATE CL_STATE_DISABLED;
MACRO_CL_STATE CL_STATE_ENABLED;
MACRO_CL_STATE CL_STATE_ENFORCE_WHEN_IDLE;
MACRO_CL_TYPE CL_TYPE_ALL;
MACRO_CL_TYPE CL_TYPE_GID;
MACRO_CL_TYPE_HIGHEST CL_TYPE_HIGHEST;
MACRO_CL_TYPE CL_TYPE_PGRP;
MACRO_CL_TYPE CL_TYPE_PID;
MACRO_CL_TYPE CL_TYPE_RESERVED;
MACRO_CL_TYPE CL_TYPE_SESS;
MACRO_CL_TYPE CL_TYPE_UID;
MACRO_CL_TYPE CL_TYPE_UNUSED;
char *CM;
MACRO_CMASK CMASK;
MACRO_ADD CMD_MASK;
MACRO_COLOR_MAP CMD_REG_0;
MACRO_COLOR_MAP CMD_REG_1;
MACRO_COLOR_MAP CMD_REG_2;
$72730EF3D3FAE5AA2AA0E430D56A4D43 CMFC_APPEND;
$72730EF3D3FAE5AA2AA0E430D56A4D43 CMFC_CHOOSE;
$72730EF3D3FAE5AA2AA0E430D56A4D43 CMFC_DELETE;
$72730EF3D3FAE5AA2AA0E430D56A4D43 CMFC_ERRMULT;
$72730EF3D3FAE5AA2AA0E430D56A4D43 CMFC_ERROR;
$3916BF5E8CEDB8D71F3B98BB138E1D94 CMFM_COPY;
$3916BF5E8CEDB8D71F3B98BB138E1D94 CMFM_DELETE;
$3916BF5E8CEDB8D71F3B98BB138E1D94 CMFM_ERROR;
$8848EA370873ADDFC4367852D3779278 CMFS_KEEP;
$8848EA370873ADDFC4367852D3779278 CMFS_LSTRIP;
$8848EA370873ADDFC4367852D3779278 CMFS_STRIP;
MACRO_CMIN CMIN;
MACRO_HEDLEN CMPENM;
MACRO_HEDLEN CMPLEN;
MACRO_CMPSNM CMPSNM;
MACRO_CMPSNM CMSCSZ;
MACRO_CM_CMSTAMP CM_CMSTAMP;
MACRO_CM_CMSTAMP CM_COMPACT_RLC;
MACRO_CM CM_CONFIG;
MACRO_CM CM_DEBUG;
MACRO_CM CM_DYNAMIC;
MACRO_CM_VERSION CM_END;
MACRO_CM_CMSTAMP CM_HIUSER;
MACRO_CM_CMSTAMP CM_IDENT;
MACRO_CM_CMSTAMP CM_LOUSER;
MACRO_CM_VERSION CM_NULL;
MACRO_CM_RELOC CM_RELOC_NO;
MACRO_CM_RELOC CM_RELOC_PTR;
MACRO_CM_R CM_R_TYPE_ABS;
MACRO_CM_R CM_R_TYPE_EXTENDED_TYPE;
MACRO_CM_R CM_R_TYPE_GPHI_LO;
MACRO_CM_R CM_R_TYPE_GPREL32;
MACRO_CM_R CM_R_TYPE_GPVALUE;
MACRO_CM_R CM_R_TYPE_INITHI_LO;
MACRO_CM_R CM_R_TYPE_NULL;
MACRO_CM_R CM_R_TYPE_PUSHPSUB;
MACRO_CM_R CM_R_TYPE_QUAD;
MACRO_CM_R CM_R_TYPE_SHIFTSTORE;
MACRO_CM_R CM_R_TYPE_SREL16;
MACRO_CM_R CM_R_TYPE_SREL32;
MACRO_CM_R CM_R_TYPE_SREL64;
MACRO_CM_R CM_R_TYPE_WORD;
MACRO_CM CM_STATIC;
MACRO_CM_CMSTAMP CM_STRSPACE;
MACRO_CM_CMSTAMP CM_TAGDESC;
MACRO_CM_CMSTAMP CM_TOOLVER;
MACRO_CM CM_TRACE;
MACRO_CM CM_TRACE_THIS;
MACRO_CM_VERSION CM_VERSION;
MACRO_CNUL CNUL;
MACRO_CNXV11 CNXV11;
MACRO_CNX CNX_HAB_NO;
MACRO_D CODESET;
MACRO_CHARMAP COLLATE_COLLATE_INIT;
MACRO_CHARMAP COLLATE_FNMATCH;
MACRO_CHARMAP COLLATE_GETCOLVAL;
MACRO_CHARMAP COLLATE_REGCOMP;
MACRO_CHARMAP COLLATE_REGERROR;
MACRO_CHARMAP COLLATE_REGEXEC;
MACRO_CHARMAP COLLATE_REGFREE;
MACRO_CHARMAP COLLATE_STRCOLL;
MACRO_CHARMAP COLLATE_STRXFRM;
MACRO_CHARMAP COLLATE_WCSCOLL;
MACRO_CHARMAP COLLATE_WCSXFRM;
MACRO_COLL COLL_WEIGHTS_MAX;
MACRO_MONOCHROME COLOR;
int COLORS;
MACRO_COLOR COLOR_BLACK;
MACRO_COLOR COLOR_BLUE;
MACRO_COLOR COLOR_CYAN;
MACRO_COLOR COLOR_GREEN;
MACRO_COLOR COLOR_MAGENTA;
MACRO_COLOR_MAP COLOR_MAP_BASE;
int COLOR_PAIRS;
MACRO_COLOR COLOR_RED;
MACRO_COLOR COLOR_WHITE;
MACRO_COLOR COLOR_YELLOW;
int COLS;
MACRO_COMPAT COMPAT_LOGNAME;
MACRO_PRELIM COMPLETE;
MACRO_COMPOSE_CAN COMPOSE_CAN_FREE;
MACRO_COMPOSE_MAX COMPOSE_CHARS_SIZE;
MACRO_COMPOSE_IGNORE COMPOSE_FAIL;
MACRO_COMPOSE COMPOSE_H;
MACRO_COMPOSE_IGNORE COMPOSE_IGNORE;
MACRO_COMPOSE_CAN COMPOSE_INACTIVE;
MACRO_COMPOSE_INT COMPOSE_INT_H;
MACRO_COMPOSE_IGNORE COMPOSE_IN_PROGRESS;
MACRO_COMPOSE_MAX COMPOSE_MAX_CHARS;
MACRO_COMPOSE_MAX COMPOSE_MAX_PRIVATE;
MACRO_COMPOSE_MAX COMPOSE_MAX_SYMS;
MACRO_COMPOSE_TREE COMPOSE_STRING;
MACRO_COMPOSE_IGNORE COMPOSE_SUCCEED;
MACRO_COMPOSE_MAX COMPOSE_SYMS_SIZE;
MACRO_COMPOSE COMPOSE_ShortVoidSymbol;
MACRO_COMPOSE_TREE COMPOSE_TREE;
MACRO_COMPOSE_TREE COMPOSE_TREE_SHORTCUT;
MACRO_TAR COMPRESS;
MACRO_COMP COMP_AC;
MACRO_COMP COMP_PROT;
MACRO_COMP COMP_VJC;
MACRO_COMP COMP_VJCCID;
MACRO_CONCRETE CONCRETE_WALL;
MACRO_CONFIG_ALIVE CONFIG_ALIVE;
MACRO_CONFIG CONFIG_PERSIST;
MACRO_CONFIG CONFIG_PREF_BUSNO;
MACRO_CONFIG_PREF CONFIG_PREF_CTLRNO;
MACRO_CONFIG_PREF CONFIG_PREF_PBUS_INST;
MACRO_CONFIG_PREF CONFIG_PREF_SLOTNO;
MACRO_TEGC CONSOLE_2_CTLR;
MACRO_TEGC CONSOLE_2_DEV;
MACRO_NULL_DEVICE CONSOLE_DEVICE;
MACRO_CONSOLE CONSOLE_DTYPE;
MACRO_NUMBER_OF_TYPE CONST_TOKEN;
MACRO_ECC CONT;
MACRO_PRELIM CONTINUE;
MACRO_CONTINUEb CONTINUEb;
MACRO_NONE CONTONE;
MACRO_ORDINARY CONTROL;
MACRO_GENERAL CONTROLLED_DELAY_SERV;
MACRO_GENERAL CONTROLLED_LOAD_SERV;
MACRO_BOGUS_TYPE CONTROLLER_TYPE;
MACRO_AREGTYPE CONTTYPE;
MACRO_CORD CORD_TOOLVER;
MACRO_CORE CORE_VERS;
MACRO_UNACCESSIBLE CORRUPTED;
MACRO_COUNT COUNT;
MACRO_TAR CPIO;
MACRO_TAR CPIOEXTEND;
MACRO_CPUSTATES CPUSTATES;
MACRO_CPU_NTIMES CPU_IDLE;
MACRO_CPU_USER CPU_KERNEL;
MACRO_CPU_MAX CPU_MAX;
MACRO_CPU_NTIMES CPU_NTIMES;
MACRO_CPU_STATE CPU_STATE_IDLE;
MACRO_CPU CPU_STATE_MAX;
MACRO_CPU_STATE CPU_STATE_NICE;
MACRO_CPU_STATE CPU_STATE_SYSTEM;
MACRO_CPU CPU_STATE_USER;
MACRO_CPU_STATE CPU_STATE_WAIT;
MACRO_CPU_SUBTYPE_ALPHA CPU_SUBTYPE_ALPHABOOK;
MACRO_CPU_SUBTYPE_ALPHA CPU_SUBTYPE_ALPHA_ADU;
MACRO_CPU_SUBTYPE_ALPHA CPU_SUBTYPE_ALPHA_WILDFIRE;
MACRO_CPU_SUBTYPE_NeXT CPU_SUBTYPE_APOLLO_2500;
MACRO_CPU_SUBTYPE_SUN3 CPU_SUBTYPE_APOLLO_3000;
MACRO_CPU_SUBTYPE_NeXT CPU_SUBTYPE_APOLLO_3500;
MACRO_CPU_SUBTYPE_SUN3 CPU_SUBTYPE_APOLLO_4000;
MACRO_CPU_SUBTYPE_NeXT CPU_SUBTYPE_APOLLO_4500;
MACRO_CPU_SUBTYPE_ARM CPU_SUBTYPE_ARM_A440;
MACRO_CPU_SUBTYPE_ARM CPU_SUBTYPE_ARM_A500;
MACRO_CPU_SUBTYPE_ARM CPU_SUBTYPE_ARM_A500_ARCH;
MACRO_CPU_SUBTYPE_ARM CPU_SUBTYPE_ARM_A680;
MACRO_CPU_SUBTYPE_ARM CPU_SUBTYPE_ARM_M4;
MACRO_CPU_SUBTYPE_AT386 CPU_SUBTYPE_AT386;
MACRO_CPU_SUBTYPE_ALPHA CPU_SUBTYPE_DEC_1000;
MACRO_CPU_SUBTYPE_ALPHA CPU_SUBTYPE_DEC_10000;
MACRO_CPU_SUBTYPE_ALPHA CPU_SUBTYPE_DEC_1000A;
MACRO_CPU_SUBTYPE_ALPHA CPU_SUBTYPE_DEC_2000_300;
MACRO_CPU_SUBTYPE_ALPHA CPU_SUBTYPE_DEC_21000_800;
MACRO_CPU_SUBTYPE_ALPHA CPU_SUBTYPE_DEC_21000_900;
MACRO_CPU_SUBTYPE_ALPHA CPU_SUBTYPE_DEC_2100A_A500;
MACRO_CPU_SUBTYPE_ALPHA CPU_SUBTYPE_DEC_2100_A500;
MACRO_CPU_SUBTYPE_ALPHA CPU_SUBTYPE_DEC_3000_300;
MACRO_CPU_SUBTYPE_ALPHA CPU_SUBTYPE_DEC_3000_400;
MACRO_CPU_SUBTYPE_ALPHA CPU_SUBTYPE_DEC_3000_500;
MACRO_CPU_SUBTYPE_ALPHA CPU_SUBTYPE_DEC_4000;
MACRO_CPU_SUBTYPE_ALPHA CPU_SUBTYPE_DEC_4100;
MACRO_CPU_SUBTYPE_ALPHA CPU_SUBTYPE_DEC_550;
MACRO_CPU_SUBTYPE_ALPHA CPU_SUBTYPE_DEC_6600;
MACRO_CPU_SUBTYPE_ALPHA CPU_SUBTYPE_DEC_7000;
MACRO_CPU_SUBTYPE_ALPHA CPU_SUBTYPE_DEC_800_5;
MACRO_CPU_SUBTYPE_ALPHA CPU_SUBTYPE_DEC_ALPHAVME_224;
MACRO_CPU_SUBTYPE_ALPHA CPU_SUBTYPE_DEC_ALPHAVME_320;
MACRO_CPU_SUBTYPE_ALPHA CPU_SUBTYPE_DEC_AVANTI;
MACRO_CPU_SUBTYPE_ALPHA CPU_SUBTYPE_DEC_AXPPCI_33;
MACRO_CPU_SUBTYPE_ALPHA CPU_SUBTYPE_DEC_AXPVME_64;
MACRO_CPU_SUBTYPE_ALPHA CPU_SUBTYPE_DEC_EV45_PBP;
MACRO_CPU_SUBTYPE_ALPHA CPU_SUBTYPE_DEC_EV56_PBP;
MACRO_CPU_SUBTYPE_ALPHA CPU_SUBTYPE_DEC_MUSTANG;
MACRO_CPU_SUBTYPE_ALPHA CPU_SUBTYPE_DMCC_EV6;
MACRO_CPU_SUBTYPE_ALPHA CPU_SUBTYPE_EB164;
MACRO_CPU_SUBTYPE_ALPHA CPU_SUBTYPE_EB64P;
MACRO_CPU_SUBTYPE_ALPHA CPU_SUBTYPE_EB66;
MACRO_CPU_SUBTYPE_AT386 CPU_SUBTYPE_EXL;
MACRO_CPU_SUBTYPE_SUN3 CPU_SUBTYPE_HP_320;
MACRO_CPU_SUBTYPE_SUN3 CPU_SUBTYPE_HP_330;
MACRO_CPU_SUBTYPE_NeXT CPU_SUBTYPE_HP_340;
MACRO_CPU_SUBTYPE_SUN3 CPU_SUBTYPE_HP_350;
MACRO_CPU_SUBTYPE_NeXT CPU_SUBTYPE_HP_360;
MACRO_CPU_SUBTYPE_NeXT CPU_SUBTYPE_HP_370;
MACRO_CPU_SUBTYPE_MIPS CPU_SUBTYPE_MIPS_R2000a;
MACRO_CPU_SUBTYPE_MIPS CPU_SUBTYPE_MIPS_R2300;
MACRO_CPU_SUBTYPE_MIPS CPU_SUBTYPE_MIPS_R2600;
MACRO_CPU_SUBTYPE_MIPS CPU_SUBTYPE_MIPS_R2800;
MACRO_CPU_SUBTYPE_MIPS CPU_SUBTYPE_MIPS_R3000a;
MACRO_CPU_SUBTYPE_MMAX CPU_SUBTYPE_MMAX_APC_FPA;
MACRO_CPU_SUBTYPE_MMAX CPU_SUBTYPE_MMAX_APC_FPU;
MACRO_CPU_SUBTYPE_MMAX CPU_SUBTYPE_MMAX_DPC;
MACRO_CPU_SUBTYPE_MMAX_JPC CPU_SUBTYPE_MMAX_JPC;
MACRO_CPU_SUBTYPE_MMAX CPU_SUBTYPE_MMAX_XPC_FPA;
MACRO_CPU_SUBTYPE_MMAX CPU_SUBTYPE_MMAX_XPC_FPU;
MACRO_CPU_SUBTYPE_NeXT CPU_SUBTYPE_NeXT;
MACRO_CPU_SUBTYPE_PA CPU_SUBTYPE_PA_RISC_710;
MACRO_CPU_SUBTYPE_PA_RISC CPU_SUBTYPE_PA_RISC_720;
MACRO_CPU_SUBTYPE_PA_RISC CPU_SUBTYPE_PA_RISC_730;
MACRO_CPU_SUBTYPE_PA_RISC_750 CPU_SUBTYPE_PA_RISC_750;
MACRO_CPU_SUBTYPE_PA CPU_SUBTYPE_PA_RISC_810;
MACRO_CPU_SUBTYPE_PA CPU_SUBTYPE_PA_RISC_815;
MACRO_CPU_SUBTYPE_PA CPU_SUBTYPE_PA_RISC_825;
MACRO_CPU_SUBTYPE_PA CPU_SUBTYPE_PA_RISC_835;
MACRO_CPU_SUBTYPE_PA CPU_SUBTYPE_PA_RISC_840;
MACRO_CPU_SUBTYPE_PA CPU_SUBTYPE_PA_RISC_850;
MACRO_CPU_SUBTYPE_PA CPU_SUBTYPE_PA_RISC_855;
MACRO_CPU_SUBTYPE_RT CPU_SUBTYPE_RT_135;
MACRO_CPU_SUBTYPE_RT CPU_SUBTYPE_RT_APC;
MACRO_CPU_SUBTYPE_RT CPU_SUBTYPE_RT_PC;
MACRO_CPU_SUBTYPE_MMAX CPU_SUBTYPE_SQT;
MACRO_CPU_SUBTYPE_AT386 CPU_SUBTYPE_SQT86;
MACRO_CPU_SUBTYPE_SUN3 CPU_SUBTYPE_SUN3_110;
MACRO_CPU_SUBTYPE_SUN3 CPU_SUBTYPE_SUN3_160;
MACRO_CPU_SUBTYPE_SUN3 CPU_SUBTYPE_SUN3_260;
MACRO_CPU_SUBTYPE_SUN3 CPU_SUBTYPE_SUN3_50;
MACRO_CPU_SUBTYPE_SUN3 CPU_SUBTYPE_SUN3_60;
MACRO_CPU_SUBTYPE_SUN4 CPU_SUBTYPE_SUN4_110;
MACRO_CPU_SUBTYPE_SUN4 CPU_SUBTYPE_SUN4_260;
MACRO_CPU_SUBTYPE CPU_SUBTYPE_UVAXI;
MACRO_CPU_SUBTYPE CPU_SUBTYPE_UVAXII;
MACRO_CPU_SUBTYPE CPU_SUBTYPE_UVAXIII;
MACRO_CPU_SUBTYPE CPU_SUBTYPE_VAX730;
MACRO_CPU_SUBTYPE CPU_SUBTYPE_VAX750;
MACRO_CPU_SUBTYPE CPU_SUBTYPE_VAX780;
MACRO_CPU_SUBTYPE CPU_SUBTYPE_VAX785;
MACRO_CPU_SUBTYPE CPU_SUBTYPE_VAX8200;
MACRO_CPU_SUBTYPE CPU_SUBTYPE_VAX8500;
MACRO_CPU_SUBTYPE CPU_SUBTYPE_VAX8600;
MACRO_CPU_SUBTYPE CPU_SUBTYPE_VAX8650;
MACRO_CPU_SUBTYPE CPU_SUBTYPE_VAX8800;
MACRO_CPU_TYPE CPU_TYPE_ALPHA;
MACRO_CPU_TYPE CPU_TYPE_ARM;
MACRO_CPU_TYPE CPU_TYPE_I386;
MACRO_CPU_TYPE CPU_TYPE_I586;
MACRO_CPU_TYPE CPU_TYPE_MC68020;
MACRO_CPU_TYPE CPU_TYPE_MC68030;
MACRO_CPU_TYPE CPU_TYPE_MC68040;
MACRO_CPU_TYPE CPU_TYPE_MC88000;
MACRO_CPU_TYPE CPU_TYPE_MIPS;
MACRO_CPU_TYPE CPU_TYPE_NS32032;
MACRO_CPU_TYPE CPU_TYPE_NS32332;
MACRO_CPU_TYPE CPU_TYPE_NS32532;
MACRO_CPU_TYPE CPU_TYPE_PA_RISC;
MACRO_CPU_TYPE CPU_TYPE_ROMP;
MACRO_CPU_TYPE CPU_TYPE_SPARC;
MACRO_CPU_TYPE CPU_TYPE_VAX;
MACRO_CPU_USER CPU_USER;
MACRO_CPU_USER CPU_WAIT;
MACRO_CP CP_IDLE;
MACRO_CP CP_NICE;
MACRO_CP CP_SYS;
MACRO_CPUSTATES CP_USER;
MACRO_CP CP_WAIT;
MACRO_CMIN CQUIT;
char *CR;
MACRO_CR0 CR0;
MACRO_CR0 CR1;
MACRO_CR0 CR2;
MACRO_CR0 CR3;
MACRO_XTABS CRDELAY;
MACRO_TAB0 CRDLY;
MACRO_CS5 CREAD;
MACRO_COUNT CREATE;
MACRO_CREPRINT CREPRINT;
MACRO_CRMOD CRMOD;
MACRO_D CRNCYSTR;
MACRO_CROUND CROUND;
MACRO_CRPRNT CRPRNT;
MACRO_XTABS CRTBS;
MACRO_XTABS CRTERA;
MACRO_L001000 CRTKIL;
MACRO_CS5 CRTSCTS;
char *CS;
MACRO_CS5 CS5;
MACRO_CS5 CS6;
MACRO_CS5 CS7;
MACRO_CS5 CS8;
MACRO_CSIZE CSIZE;
MACRO_MOUSE CSS_DEVICE_TYPE;
MACRO_CSTART CSTART;
MACRO_CSTATUS CSTATUS;
MACRO_CSTART CSTOP;
MACRO_CS5 CSTOPB;
MACRO_CSUSP CSUSP;
MACRO_CS_IAP CS_APTOH;
MACRO_CS CS_CACHE;
MACRO_CS_IAP CS_CC;
MACRO_CS CS_DIRECTIO;
MACRO_CS_IAP CS_DLATE;
MACRO_CS_IAP CS_DMAENB;
MACRO_CS_IAP CS_FERR;
MACRO_CS_FORMAT CS_FORMAT;
MACRO_CS_FORMAT CS_GO;
MACRO_CS_HDMABUSY CS_HDMABUSY;
MACRO_CS_IAP CS_HTOAP;
MACRO_CS_IAP CS_IAP;
MACRO_CS_IAP CS_IAPWC;
MACRO_CS_IAP CS_ONAPRQ;
MACRO_CS_IAP CS_ONHALT;
MACRO_CS_IAP CS_ONZERO;
MACRO_S_PSA CS_WCZERO;
int CTGetNodeResult(ComposeTreeNode *pNode, int ndx, KeySym *sym, void *str);
MACRO_CTIME CTIME;
MACRO_L001000 CTLECH;
MACRO_TEGC CTLR_2_CONSOLE;
MACRO_CTLR_CONFIG CTLR_CONFIG_REVISION;
MACRO_CTLR CTLR_CONFIG_REV_V0;
MACRO_CTLR CTLR_CONFIG_REV_V1;
MACRO_CTLR CTLR_CONFIG_REV_V2;
MACRO_BUS_IBUS CTLR_TYPE;
MACRO_CTR_BUFUNAVAIL CTR_BUFUNAVAIL;
MACRO_CTR_HDRCRC CTR_DATCRC;
MACRO_CTR CTR_DDCMP;
MACRO_CTR CTR_ETHER;
MACRO_CTR CTR_FDDI;
MACRO_CTR_HDRCRC CTR_HDRCRC;
MACRO_CTR CTR_ICMPSTAT;
MACRO_CTR CTR_ICMPSTATBOOT;
MACRO_CTR CTR_IGMPSTAT;
MACRO_CTR CTR_IGMPSTATBOOT;
MACRO_CTR CTR_IPSTAT;
MACRO_CTR CTR_IPSTATBOOT;
MACRO_CTR CTR_MRTSTAT;
MACRO_CTR CTR_MRTSTATBOOT;
MACRO_CTR CTR_RTSTAT;
MACRO_CTR CTR_RTSTATBOOT;
MACRO_CTR CTR_TCPSTAT;
MACRO_CTR CTR_TCPSTATBOOT;
MACRO_CTR CTR_TRN;
MACRO_CTR CTR_UDPSTAT;
MACRO_CTR CTR_UDPSTATBOOT;
int CTSetNodeResult(ComposeTreeNode *pNode, int ndx, KeySym sym, void *str);
MACRO_CHARMAP CTYPE_CTYPE_INIT;
MACRO_CHARMAP CTYPE_ISWCTYPE;
MACRO_CHARMAP CTYPE_TOWLOWER;
MACRO_CHARMAP CTYPE_TOWUPPER;
MACRO_CHARMAP CTYPE_WCTYPE;
MACRO_CUNIT CUNIT;
MACRO_BEGINNING CURRENT;
MACRO_CURRENT CURRENT_VALUES;
MACRO_NULL_DEVICE CURSORKEYS_DEVICE;
MACRO_COLOR_MAP CURSOR_CMD_REG;
MACRO_COLOR_MAP CURSOR_COLOR_1;
MACRO_COLOR_MAP CURSOR_COLOR_2;
MACRO_COLOR_MAP CURSOR_COLOR_3;
MACRO_CURSOR CURSOR_OFF;
MACRO_CURSOR CURSOR_ON;
MACRO_COLOR_MAP CURSOR_RAM_BASE;
MACRO_COLOR_MAP CURSOR_X_HIGH;
MACRO_COLOR_MAP CURSOR_X_LOW;
MACRO_COLOR_MAP CURSOR_Y_HIGH;
MACRO_COLOR_MAP CURSOR_Y_LOW;
MACRO_CURS CURS_BAD_MALLOC;
MACRO_CURS CURS_DBG_BAD_MALLOC;
MACRO_CURS_ERR CURS_ERR_SET;
MACRO_CURS CURS_STUPID;
MACRO_CURS CURS_UNKNOWN;
MACRO_MOUSE CUSTOMER_DEVICE_TYPE;
MACRO_CNUL CVT;
MACRO_CVT_ROUND CVT_ALLOW_OVRFLW_RANGE_VALUES;
MACRO_CVT_ROUND CVT_ALLOW_UDRFLW_RANGE_VALUES;
MACRO_CVT_ROUND CVT_ALLOW_UNNORMALIZED_VALUES;
MACRO_CVT_ROUND CVT_BIASED_ROUNDING;
MACRO_CVT CVT_BIG_ENDIAN_IEEE_S;
MACRO_CVT CVT_BIG_ENDIAN_IEEE_T;
MACRO_CVT CVT_BIG_ENDIAN_IEEE_X;
MACRO_CVT CVT_CRAY_SINGLE;
MACRO_CVT_ROUND CVT_FORCE_ALL_SPECIAL_VALUES;
MACRO_CVT_ROUND CVT_FORCE_DENORM_TO_ZERO;
MACRO_CVT_ROUND CVT_FORCE_INF_TO_MAX_FLOAT;
MACRO_CVT_ROUND CVT_FORCE_INVALID_TO_ZERO;
MACRO_CVT CVT_IBM_LONG;
MACRO_CVT CVT_IBM_SHORT;
MACRO_CVT CVT_IEEE_S;
MACRO_CVT CVT_IEEE_T;
MACRO_CVT CVT_IEEE_X;
MACRO_CVT_NORMAL CVT_INVALID_INPUT_TYPE;
MACRO_CVT_NORMAL CVT_INVALID_OPTION;
MACRO_CVT_NORMAL CVT_INVALID_OUTPUT_TYPE;
MACRO_CVT_NORMAL CVT_NORMAL;
MACRO_CVT_ROUND CVT_REPORT_ALL;
MACRO_CVT_NORMAL CVT_RESULT_DENORMALIZED;
MACRO_CVT_NORMAL CVT_RESULT_INEXACT;
MACRO_CVT_NORMAL CVT_RESULT_INFINITE;
MACRO_CVT_NORMAL CVT_RESULT_INVALID;
MACRO_CVT_NORMAL CVT_RESULT_OVERFLOW;
MACRO_CVT_NORMAL CVT_RESULT_OVERFLOW_RANGE;
MACRO_CVT_NORMAL CVT_RESULT_UNDERFLOW;
MACRO_CVT_NORMAL CVT_RESULT_UNDERFLOW_RANGE;
MACRO_CVT_NORMAL CVT_RESULT_UNNORMALIZED;
MACRO_CVT_ROUND CVT_ROUND_TO_NEAREST;
MACRO_CVT_ROUND CVT_ROUND_TO_NEG;
MACRO_CVT_ROUND CVT_ROUND_TO_POS;
MACRO_CVT_ROUND CVT_ROUND_TO_ZERO;
MACRO_CVT CVT_VAX_D;
MACRO_CVT CVT_VAX_F;
MACRO_CVT CVT_VAX_G;
MACRO_CVT CVT_VAX_H;
MACRO_CWBackPixmap CWBackPixel;
MACRO_CWBackPixmap CWBackPixmap;
MACRO_CWBackPixmap CWBackingPixel;
MACRO_CWBackPixmap CWBackingPlanes;
MACRO_CWBackPixmap CWBackingStore;
MACRO_CWBackPixmap CWBitGravity;
MACRO_CWBackPixmap CWBorderPixel;
MACRO_CWBackPixmap CWBorderPixmap;
MACRO_CWX CWBorderWidth;
MACRO_CWBackPixmap CWColormap;
MACRO_CWBackPixmap CWCursor;
MACRO_CWBackPixmap CWDontPropagate;
MACRO_CDISCARD CWERASE;
MACRO_CWBackPixmap CWEventMask;
MACRO_CWX CWHeight;
MACRO_CWBackPixmap CWOverrideRedirect;
MACRO_CWBackPixmap CWSaveUnder;
MACRO_CWX CWSibling;
MACRO_CWX CWStackMode;
MACRO_CWX CWWidth;
MACRO_CWBackPixmap CWWinGravity;
MACRO_CWX CWX;
MACRO_CWX CWY;
MACRO_C_DDIDKI C_DDIDKI;
MACRO_C C_IRGRP;
MACRO_C C_IROTH;
MACRO_C C_IRUSR;
MACRO_C_ISREG C_ISBLK;
MACRO_C_ISCHR C_ISCHR;
MACRO_C_ISCHR C_ISCTG;
MACRO_C_ISDIR C_ISDIR;
MACRO_C_ISDIR C_ISFIFO;
MACRO_C_ISUID C_ISGID;
MACRO_C_ISCHR C_ISLNK;
MACRO_C_ISREG C_ISREG;
MACRO_C_ISCHR C_ISSOCK;
MACRO_C_ISUID C_ISUID;
MACRO_C_ISUID C_ISVTX;
MACRO_C C_IWGRP;
MACRO_C C_IWOTH;
MACRO_C C_IWUSR;
MACRO_C C_IXGRP;
MACRO_C C_IXOTH;
MACRO_C C_IXUSR;
MACRO_UNKN C_VAXSTAR;
MACRO_CapNotLast CapButt;
MACRO_CapNotLast CapNotLast;
MACRO_CapNotLast CapProjecting;
MACRO_CapNotLast CapRound;
MACRO_KeepAlive CatalogueChangeNotify;
MACRO_CatalogueChangeNotifyMask CatalogueChangeNotifyMask;
MACRO_ForgetGravity CenterGravity;
void CheckDisjointSelection(Widget w, XmTextPosition position, Time sel_time);
MACRO_KeyPress CirculateNotify;
MACRO_KeyPress CirculateRequest;
MACRO_KeyPress ClientMessage;
MACRO_ClipByChildren ClipByChildren;
MACRO_ClipboardFail ClipboardBadFormat;
MACRO_ClipboardFail ClipboardFail;
MACRO_ClipboardFail ClipboardLocked;
MACRO_ClipboardFail ClipboardNoData;
MACRO_ClipboardFail ClipboardSuccess;
MACRO_ClipboardFail ClipboardTruncate;
MACRO_NoEventMask ColormapChangeMask;
MACRO_ColormapUninstalled ColormapInstalled;
MACRO_KeyPress ColormapNotify;
MACRO_ColormapUninstalled ColormapUninstalled;
MACRO_Complex Complex;
int ComposeEnableTable(ComposeTbl *, int enable);
ComposeTbl *ComposeFreeTables(ComposeTbl *);
ComposeTbl *ComposeGetTables(void);
void ComposeInitTables(void);
ComposeTbl *ComposeReadTables(char *path);
int ComposeUseTables(ComposeTbl *, ComposeTbl **);
MACRO_CompositeIndex CompositeIndex;
MACRO_KeyPress ConfigureNotify;
MACRO_KeyPress ConfigureRequest;
MACRO_ConstraintIndex ConstraintIndex;
$E5174C28E2C76F79C438E7F3C344BC7A ConstraintResource;
MACRO_ShiftMapIndex ControlMapIndex;
MACRO_ShiftMask ControlMask;
MACRO_Complex Convex;
MACRO_CoordModeOrigin CoordModeOrigin;
MACRO_CoordModeOrigin CoordModePrevious;
MACRO_CopyFromParent CopyFromParent;
MACRO_CoreIndex CoreIndex;
MACRO_KeyPress CreateNotify;
MACRO_CurrentTime CurrentTime;
MACRO_CursorShape CursorShape;
bool DA;
MACRO_DAEMON DAEMON_LOG;
MACRO_RRQ DATA;
MACRO_NULL_DEVICE DATAGLOVE_DEVICE;
stable_how DATA_SYNC;
MACRO_UNLOCK DATLOCK;
MACRO_DAYSPERWEEK DAYSPERLYEAR;
MACRO_DAYSPERWEEK DAYSPERNYEAR;
MACRO_DAYSPERWEEK DAYSPERWEEK;
MACRO_DAYS DAYS_PER_LYEAR;
MACRO_DAYS DAYS_PER_NYEAR;
MACRO_DAYS DAYS_PER_WEEK;
MACRO_D DAY_1;
MACRO_D DAY_2;
MACRO_D DAY_3;
MACRO_D DAY_4;
MACRO_D DAY_5;
MACRO_D DAY_6;
MACRO_D DAY_7;
bool DB;
MACRO_DBASE DBASE_NAME_LEN;
MACRO_DBG DBG_BRKPT;
MACRO_DBG DBG_ERROR;
MACRO_DBG DBG_GENERAL;
MACRO_DBG DBG_IO;
MACRO_DBG DBG_MEM;
MACRO_DBG DBG_PROTO;
MACRO_DBG DBG_RDEBUG;
MACRO_DBG DBG_WARNING;
MACRO_PBLKSIZ DBLKSIZ;
MACRO_DBL DBL_DIG;
MACRO_FLT_MAX_10 DBL_MANT_DIG;
MACRO_DBL_MAX_10 DBL_MAX_10_EXP;
MACRO_DBL_MAX DBL_MAX_EXP;
MACRO_DBL_MIN_10 DBL_MIN_10_EXP;
MACRO_DBL_MIN DBL_MIN_EXP;
MACRO_DBM DBM_INSERT;
MACRO_DBM DBM_REPLACE;
MACRO_DBSHIFT DBSHIFT;
MACRO_DISEOT DBSIZE;
MACRO_DBX DBX_TOOLVER;
$B2A44DC877B17F2021CE46A73658A10E DB_BTREE;
$B2A44DC877B17F2021CE46A73658A10E DB_HASH;
MACRO_R_CURSOR DB_LOCK;
$B2A44DC877B17F2021CE46A73658A10E DB_RECNO;
MACRO_R_CURSOR DB_SHMEM;
MACRO_R_CURSOR DB_TXN;
char *DC;
MACRO_ACL_OTHER DCE_GROUP;
MACRO_DCE DCE_NUM;
MACRO_ACL_OTHER DCE_USER;
MACRO_VDATA DDATA;
MACRO_DDIDKI DDIDKI_VERSION_MAJOR;
MACRO_DDIDKI DDIDKI_VERSION_MINOR;
MACRO_DDIDKI DDIDKI_VERSION_REV;
MACRO_EMPTY DEAD_PROCESS;
MACRO_AUDIT_START DEBUG_LOG;
MACRO_DECCTQ DECCTQ;
$D44E3C4FF335410EC7120A246FFC2300 DECLINE;
MACRO_COMP DECOMP_AC;
MACRO_DECOMP DECOMP_ERROR;
MACRO_DECOMP DECOMP_FATALERROR;
MACRO_DECOMP DECOMP_OK;
MACRO_COMP DECOMP_PROT;
MACRO_COMP DECOMP_VJC;
MACRO_COMP DECOMP_VJCCID;
MACRO_DECWmIconifyPixmapMask DECWmIconBoxXMask;
MACRO_DECWmIconifyPixmapMask DECWmIconBoxYMask;
MACRO_DECWmIconifyPixmapMask DECWmIconifyPixmapMask;
MACRO_DECWmIconifyPixmapMask DECWmNoIconifyButtonMask;
MACRO_DECWmIconifyPixmapMask DECWmNoLowerButtonMask;
MACRO_DECWmIconifyPixmapMask DECWmNoResizeButtonMask;
MACRO_DECWmIconifyPixmapMask DECWmStickyMask;
MACRO_DECWmIconifyPixmapMask DECWmTiledMask;
MACRO_UNKN DEC_1000;
MACRO_UNKN DEC_1000A;
MACRO_UNKN DEC_1000A_5;
MACRO_UNKN DEC_1000_5;
MACRO_UNKN DEC_2000_300;
MACRO_UNKN DEC_21000;
MACRO_UNKN DEC_2100_A50;
MACRO_UNKN DEC_2100_A500;
MACRO_UNKN DEC_2100_C500;
MACRO_UNKN DEC_3000_300;
MACRO_UNKN DEC_3000_500;
MACRO_UNKN DEC_4000;
MACRO_UNKN DEC_4100;
MACRO_UNKN DEC_550;
MACRO_UNKN DEC_6600;
MACRO_UNKN DEC_7000;
MACRO_UNKN DEC_ALPHAVME_224;
MACRO_UNKN DEC_ALPHAVME_320;
MACRO_UNKN DEC_AXPPCI_33;
MACRO_UNKN DEC_AXPVME_64;
MACRO_UNKN DEC_EV45_PBP;
MACRO_UNKN DEC_EV56_PBP;
MACRO_DEC DEC_VERSION_TAG_VALUE;
void DEC_XTRAPInit();
MACRO_DEFAULT_HASH DEFAULT_BUCKETS;
MACRO_DEFAULT_CLASS DEFAULT_CLASS_IN_USE;
MACRO_DEFAULT_DAEMON DEFAULT_DAEMON_RATE;
MACRO_DEFAULT_GRAPHICS DEFAULT_GRAPHICS;
MACRO_DEFAULT2 DEFAULT_GRIP_SIZE;
MACRO_DEFAULT DEFAULT_HAB_NO;
MACRO_DEFAULT_HASH DEFAULT_HASH_MAX;
MACRO_DEFAULT_HEIGHT DEFAULT_HEIGHT;
MACRO_DEFAULT_CLASS DEFAULT_IDLE_ENFORCE;
MACRO_DEFAULT_JUMP DEFAULT_JUMP;
MACRO_DEFAULT_LOGNAME DEFAULT_LOGNAME;
MACRO_DEFAULT_THRESHOLD DEFAULT_MAX_CACHE_SIZE;
MACRO_DEFAULT_THRESHOLD DEFAULT_MAX_IR_SIZE;
MACRO_XawESC DEFAULT_TEXT_HEIGHT;
MACRO_DEFAULT_THRESHOLD DEFAULT_THRESHOLD;
MACRO_CURRENT DEFAULT_VALUES;
MACRO_DEFAULT_WIDTH DEFAULT_WIDTH;
MACRO_DEFLATE_CHK DEFLATE_CHK_SEQUENCE;
MACRO_CILEN_DEFLATE DEFLATE_MAX_SIZE;
MACRO_DEFLATE DEFLATE_METHOD_VAL;
MACRO_CILEN_DEFLATE DEFLATE_MIN_SIZE;
MACRO_MINTTL DEFTTL;
MACRO_DEF_CLUSTER DEF_CLUSTER;
MACRO_DEF DEF_LEV;
MACRO_DEF_TDEN DEF_TDEN;
MACRO_DEF_CLUSTER DEF_TLEN;
MACRO_DEL_0 DEL;
MACRO_RTSIG DELAYTIMER_MAX;
MACRO_O_BLKINUSE DELAY_FLAG;
MACRO_F1 DELE;
MACRO_DELETETCB DELETETCB;
MACRO_F1 DELE_NPAD;
MACRO_SET DEL_PROPLIST_SYSCALL;
MACRO_DEL DEL_VADDR_MASK;
MACRO_BUS_IO DENSE_MEMORY;
MACRO_REWIND DENS_MASK;
MACRO_DEVGEOM DEVGEOM_DYNAMIC;
MACRO_DEVGEOM DEVGEOM_INVENTED;
MACRO_DEVGEOM DEVGEOM_REMOVE;
MACRO_DEVICE_BITS DEVICE_BITS;
MACRO_DEVICE_CONFIG DEVICE_CONFIG_REVISION;
MACRO_DEVICE DEVICE_CONFIG_REV_V0;
MACRO_DEVICE DEVICE_CONFIG_REV_V1;
MACRO_NAK DEVICE_PRESENT;
MACRO_DEVICE2 DEVICE_RESOLUTION;
MACRO_BOGUS_TYPE DEVICE_TYPE;
MACRO_DEVIO DEVIO_INCLUDE;
MACRO_DEVPATHAVAIL DEVPATHAVAIL;
MACRO_DEV_TPMARK DEV_10000_BPI;
MACRO_DEV_TPMARK DEV_10240BPI;
MACRO_DEV_TPMARK DEV_16000_BPI;
MACRO_DEV_TPMARK DEV_1600BPI;
MACRO_TEGC DEV_2_CONSOLE;
MACRO_TEGC DEV_2_USER;
MACRO_DEV_TPMARK DEV_36000_BPI;
MACRO_DEV_TPMARK DEV_38000BPI;
MACRO_DEV_TPMARK DEV_38000_CP;
MACRO_DEV_DPMASK DEV_3_DD2S;
MACRO_DEV_DPMASK DEV_3_ED2S;
MACRO_DEV_DPMASK DEV_3_HD2S;
MACRO_DEV_TPMARK DEV_40640_BPI;
MACRO_DEV_TPMARK DEV_42500_BPI;
MACRO_DEV_TPMARK DEV_45434_BPI;
MACRO_DEV_TPMARK DEV_54000_BPI;
MACRO_DEV_DPMASK DEV_5_DD1S;
MACRO_DEV_DPMASK DEV_5_DD2S;
MACRO_DEV_DPMASK DEV_5_HD2S;
MACRO_DEV_DPMASK DEV_5_LD2S;
MACRO_DEV_TPMARK DEV_61000_BPI;
MACRO_DEV_TPMARK DEV_62500_BPI;
MACRO_DEV_TPMARK DEV_6250BPI;
MACRO_DEV_TPMARK DEV_6666BPI;
MACRO_DEV_TPMARK DEV_76000BPI;
MACRO_DEV_TPMARK DEV_76000_CP;
MACRO_DEV_TPMARK DEV_8000_BPI;
MACRO_DEV_TPMARK DEV_800BPI;
MACRO_DEV_TPMARK DEV_81630_BPI;
MACRO_DEV_ARCH DEV_ARCH_LEN;
MACRO_DEV_UB DEV_BI;
MACRO_DEV_UB DEV_BICI;
MACRO_DEV_BOM DEV_BLANK;
MACRO_DEV_BOM DEV_BOM;
MACRO_DEV_BOM DEV_BOOT;
MACRO_DEV DEV_BSHIFT;
MACRO_DEV DEV_BSIZE;
MACRO_SCSIBUS DEV_BUS_LEN;
MACRO_DEV_UB DEV_CI;
MACRO_DT_GET DEV_CONSPROTO_LEN;
MACRO_DEV_CONSUNIT DEV_CONSUNIT_LEN;
MACRO_DEV_BOM DEV_CSE;
MACRO_DEV_DDMASK DEV_DDMASK;
MACRO_DEV_TAPE DEV_DISK;
MACRO_DEV_BOM DEV_DONE;
MACRO_DEV_DPMASK DEV_DPMASK;
MACRO_DEV_UB DEV_EISA;
MACRO_DEV_BOM DEV_EOM;
MACRO_DEV_BOM DEV_ERASED;
MACRO_DEV_FUNNEL DEV_FUNNEL;
MACRO_DEV_FUNNEL DEV_FUNNEL_NULL;
MACRO_DEV_BOM DEV_HARDERR;
MACRO_DEV_UB DEV_ISA;
MACRO_DEV_TPMARK DEV_LOADER;
MACRO_DEV_UB DEV_MB;
MACRO_DEV_DPMASK DEV_MC_COUNT;
MACRO_DEV_DDMASK DEV_MODEM;
MACRO_DEV_MODEM DEV_MODEM_ON;
MACRO_DEV_UB DEV_MSI;
MACRO_DEV_UB DEV_NB;
MACRO_DEV_BOM DEV_OFFLINE;
MACRO_DEV_UB DEV_PCI;
MACRO_DEV_TAPE DEV_PRINTER;
MACRO_DEV_STRING DEV_PRIVATE_LEN;
MACRO_DEV_UB DEV_QB;
MACRO_DEV_BOM DEV_RDONLY;
MACRO_DEV_TPMARK DEV_RDOPP;
MACRO_DEV_BOM DEV_READ_OPP;
MACRO_DEV_BOM DEV_RETRY;
MACRO_DEV_BOM DEV_REWINDING;
MACRO_DEV_TPMARK DEV_RWDING;
MACRO_DEV_UB DEV_SCSI;
MACRO_SCSIBUS DEV_SCSI_INQ_SZ;
MACRO_DEV_BOM DEV_SHORT_REC;
MACRO_DEV_TPMARK DEV_SHRTREC;
MACRO_DEVIO DEV_SIZE;
MACRO_DEV_BOM DEV_SOFTERR;
MACRO_DEV_TAPE DEV_SPECIAL;
MACRO_DEV_STRING DEV_STRING_SIZE;
MACRO_DEV_TAPE DEV_TAPE;
MACRO_DEV_BOM DEV_TAPE_MARK;
MACRO_DEV_UB DEV_TC;
MACRO_DEV_TAPE DEV_TERMINAL;
MACRO_DEV_TPMARK DEV_TPMARK;
MACRO_DEV_BOM DEV_TPMRK_PEND;
MACRO_TPDEV_CLASS DEV_TYPE_LEN;
MACRO_DEV_UB DEV_UB;
MACRO_DEV_UB DEV_UNKBUS;
MACRO_DEV_BOM DEV_WRITTEN;
MACRO_DEV_BOM DEV_WRTLCK;
MACRO_DEV_UB DEV_XMI;
MACRO_DEV_UB DEV_XMICI;
MACRO_DEV_DPMASK DEV_X_XXXX;
MACRO_MAXRSS DFLDSIZ;
MACRO_DFLRSS DFLRSS;
MACRO_DFLSSIZ DFLSSIZ;
unsigned int DINFINITY[2];
MACRO_DIRBLKSIZ DIRBLKSIZ;
MACRO_AREGTYPE DIRTYPE;
MACRO_DISEOT DISEOT;
MACRO_LABELSECTOR DISKMAGIC;
MACRO_DKDEV_ASF DISK_CLASS_LEN;
MACRO_DISPATCHER DISPATCHER_MAGIC;
MACRO_DIS DIS_TOOLVER;
MACRO_DI DI_NAMESZ;
MACRO_DKDEV_ASF DKDEV_ASF_BBR;
MACRO_DKDEV_READY DKDEV_BOOT;
MACRO_DKDEV DKDEV_CLS_CDROM;
MACRO_DKDEV DKDEV_CLS_FLPY_3_DD2S;
MACRO_DKDEV DKDEV_CLS_FLPY_3_ED2S;
MACRO_DKDEV DKDEV_CLS_FLPY_3_HD2S;
MACRO_DKDEV DKDEV_CLS_FLPY_5_DD1S;
MACRO_DKDEV DKDEV_CLS_FLPY_5_DD2S;
MACRO_DKDEV DKDEV_CLS_FLPY_5_HD2S;
MACRO_DKDEV DKDEV_CLS_FLPY_5_LD2S;
MACRO_DKDEV DKDEV_CLS_FLPY_GENERIC;
MACRO_DKDEV DKDEV_CLS_HARDDISK;
MACRO_DKDEV DKDEV_CLS_UNKNOWN;
MACRO_DKDEV DKDEV_CLS_WORM;
MACRO_DKDEV_READY DKDEV_OFFLINE;
MACRO_DKDEV_READY DKDEV_RAID;
MACRO_DKDEV_READY DKDEV_RDONLY;
MACRO_DKDEV_READY DKDEV_READY;
MACRO_DKDEV_READY DKDEV_REMOVABLE;
MACRO_DKDEV_READY DKDEV_WRTCACHING;
MACRO_DKDEV_READY DKDEV_WRTPROT;
MACRO_DKIOCHDR DKIOCHDR;
char *DL;
MACRO_DLE DLE;
MACRO_DLMV11 DLMV11;
MACRO_DLM DLM_HAB_NO;
MACRO_DLT DLT_ARCNET;
MACRO_DLT DLT_AX25;
MACRO_DLT DLT_CHAOS;
MACRO_DLT DLT_EN10MB;
MACRO_DLT DLT_EN3MB;
MACRO_DLT DLT_FDDI;
MACRO_DLT DLT_IEEE802;
MACRO_DLT DLT_NULL;
MACRO_DLT DLT_PPP;
MACRO_DLT DLT_PRONET;
MACRO_DLT DLT_SLIP;
MACRO_DLT DLT_TRN;
MACRO_DL_ACCESS DL_ACCESS;
MACRO_DL_CODLS DL_ACLDLS;
MACRO_DL_OUTSTATE DL_ADDRSZ_UDERR;
MACRO_DL_CSMACD DL_ASYN;
MACRO_DL_UNATTACHED DL_ATTACH_PENDING;
MACRO_DL_INFO DL_ATTACH_REQ;
MACRO_DL_INVADDR DL_AUTO;
MACRO_DL_AUTO DL_AUTO_TEST;
MACRO_DL_AUTO DL_AUTO_XID;
MACRO_DL_ACCESS DL_BADADDR;
MACRO_DL_BADCORR DL_BADCORR;
MACRO_DL_BADCORR DL_BADDATA;
MACRO_DL_BADCORR DL_BADPPA;
MACRO_DL_BADCORR DL_BADPRIM;
MACRO_DL_BADCORR DL_BADQOSPARAM;
MACRO_DL_BADCORR DL_BADQOSTYPE;
MACRO_DL_BADSAP DL_BADSAP;
MACRO_DL_BADSAP DL_BADTOKEN;
MACRO_DL_BIND DL_BIND_ACK;
MACRO_DL_UNBOUND DL_BIND_PENDING;
MACRO_DL_BIND DL_BIND_REQ;
MACRO_DL_BADSAP DL_BOUND;
MACRO_DL_OUTSTATE DL_BUSY;
MACRO_DL_CSMACD DL_CHAR;
MACRO_DL_CODLS DL_CLDLS;
MACRO_DL_CMD_RS DL_CMD_IP;
MACRO_DL_CMD_RS DL_CMD_IT;
MACRO_DL_CMD DL_CMD_MASK;
MACRO_DL_CMD DL_CMD_OK;
MACRO_DL_CMD_RS DL_CMD_PE;
MACRO_DL_CMD_RS DL_CMD_RS;
MACRO_DL_CMD_RS DL_CMD_UE;
MACRO_DL_CMD_RS DL_CMD_UN;
MACRO_DL_CODLS DL_CODLS;
MACRO_DL_COMMAND DL_COMMAND;
MACRO_DL_UNITDATA DL_CONNECT_CON;
MACRO_DL_UNITDATA DL_CONNECT_IND;
MACRO_DL_UNITDATA DL_CONNECT_REQ;
MACRO_DL_UNITDATA DL_CONNECT_RES;
MACRO_DL_UNBOUND DL_CONN_RES_PENDING;
MACRO_DL_CODLS DL_CONREJ_DEST_UNKNOWN;
MACRO_DL_CODLS DL_CONREJ_DEST_UNREACH_PERMANENT;
MACRO_DL_CODLS DL_CONREJ_DEST_UNREACH_TRANSIENT;
MACRO_DL_CODLS DL_CONREJ_PERMANENT_COND;
MACRO_DL_CODLS DL_CONREJ_QOS_UNAVAIL_PERMANENT;
MACRO_DL_CODLS DL_CONREJ_QOS_UNAVAIL_TRANSIENT;
MACRO_DL_CODLS DL_CONREJ_TRANSIENT_COND;
MACRO_DL_CSMACD DL_CSMACD;
MACRO_DL_CSMACD DL_CTCA;
MACRO_DL DL_CURRENT_VERSION;
MACRO_DL_FACT DL_CURR_PHYS_ADDR;
MACRO_DL_OUTSTATE DL_DATASZ_UDERR;
MACRO_DL_UNBOUND DL_DATAXFER;
MACRO_DL_UNITDATA DL_DATA_ACK_IND;
MACRO_DL_UNITDATA DL_DATA_ACK_REQ;
MACRO_DL_UNITDATA DL_DATA_ACK_STATUS_IND;
MACRO_DL_DATA DL_DATA_IND;
MACRO_DL_DATA DL_DATA_REQ;
MACRO_DL_UNATTACHED DL_DETACH_PENDING;
MACRO_DL_INFO DL_DETACH_REQ;
MACRO_DL_SUBS DL_DISABMULTI_REQ;
MACRO_DL_UNBOUND DL_DISCON11_PENDING;
MACRO_DL_UNBOUND DL_DISCON12_PENDING;
MACRO_DL_UNBOUND DL_DISCON13_PENDING;
MACRO_DL_UNBOUND DL_DISCON8_PENDING;
MACRO_DL_UNBOUND DL_DISCON9_PENDING;
MACRO_DL_UNITDATA DL_DISCONNECT_IND;
MACRO_DL_UNITDATA DL_DISCONNECT_REQ;
MACRO_DL_CODLS DL_DISC_ABNORMAL_CONDITION;
MACRO_DL_CODLS DL_DISC_NORMAL_CONDITION;
MACRO_DL_CODLS DL_DISC_PERMANENT_CONDITION;
MACRO_DL_CODLS DL_DISC_TRANSIENT_CONDITION;
MACRO_DL_CODLS DL_DISC_UNSPECIFIED;
MACRO_DL_SUBS DL_ENABMULTI_REQ;
MACRO_DL_ERROR DL_ERROR_ACK;
MACRO_DL_ERR DL_ERR_EXT;
MACRO_DL_CSMACD DL_ETHER;
MACRO_DL_FACT DL_FACT_PHYS_ADDR;
MACRO_DL_CSMACD DL_FDDI;
MACRO_DL_UNITDATA DL_GET_STATISTICS_ACK;
MACRO_DL_UNITDATA DL_GET_STATISTICS_REQ;
MACRO_DL_CSMACD DL_HDLC;
MACRO_DL_OUTSTATE DL_HDRPAD_UDERR;
MACRO_DL_PEER DL_HIERARCHICAL_BIND;
MACRO_DL_UNBOUND DL_IDLE;
MACRO_DL_UNBOUND DL_INCON_PENDING;
MACRO_DL_INFO DL_INFO_ACK;
MACRO_DL_VERSION DL_INFO_REQ;
MACRO_DL_BADSAP DL_INITFAILED;
MACRO_DL_INVADDR DL_INVADDR;
MACRO_DL_PROMISC DL_MAXIMUM;
MACRO_DL_CSMACD DL_METRO;
MACRO_DL_PROMISC DL_MONITOR;
MACRO_DL_BADSAP DL_NOADDR;
MACRO_DL_OUTSTATE DL_NOAUTO;
MACRO_DL_PROMISC DL_NONE;
MACRO_DL_OUTSTATE DL_NOTENAB;
MACRO_DL_OUTSTATE DL_NOTESTAUTO;
MACRO_DL_BADSAP DL_NOTINIT;
MACRO_DL_OUTSTATE DL_NOTSUPPORTED;
MACRO_DL_OUTSTATE DL_NOXIDAUTO;
MACRO_DL_UNBIND DL_OK_ACK;
MACRO_DL_CSMACD DL_OTHER;
MACRO_DL_UNBOUND DL_OUTCON_PENDING;
MACRO_DL_OUTSTATE DL_OUTSTATE;
char *DL_PARM;
MACRO_DL_PEER DL_PEER_BIND;
MACRO_DL_OUTSTATE DL_PENDING;
MACRO_DL_UNITDATA DL_PHYS_ADDR_ACK;
MACRO_DL_UNITDATA DL_PHYS_ADDR_REQ;
MACRO_DL_POLL DL_POLL_FINAL;
MACRO_DL_OUTSTATE DL_PRIMSZ_UDERR;
MACRO_DL_PRIM DL_PRIM_EXT;
MACRO_DL_SUBS DL_PROMISCOFF_REQ;
MACRO_DL_SUBS DL_PROMISCON_REQ;
MACRO_DL_PROMISC DL_PROMISC_MULTI;
MACRO_DL_PROMISC DL_PROMISC_PHYS;
MACRO_DL_PROMISC DL_PROMISC_SAP;
MACRO_DL_CODLS DL_PROVIDER;
MACRO_DL_UNBOUND DL_PROV_RESET_PENDING;
MACRO_DL_QOS_CO DL_QOS_CL_RANGE1;
MACRO_DL_QOS_CO DL_QOS_CL_SEL1;
MACRO_DL_QOS_CO DL_QOS_CO_RANGE1;
MACRO_DL_QOS_CO DL_QOS_CO_SEL1;
MACRO_DL_QOS DL_QOS_DONT_CARE;
MACRO_DL_UNITDATA DL_REPLY_IND;
MACRO_DL_UNITDATA DL_REPLY_REQ;
MACRO_DL_UNITDATA DL_REPLY_STATUS_IND;
MACRO_DL_UNITDATA DL_REPLY_UPDATE_REQ;
MACRO_DL_UNITDATA DL_REPLY_UPDATE_STATUS_IND;
MACRO_DL_UNITDATA DL_RESET_CON;
MACRO_DL_CODLS DL_RESET_FLOW_CONTROL;
MACRO_DL_UNITDATA DL_RESET_IND;
MACRO_DL_CODLS DL_RESET_LINK_ERROR;
MACRO_DL_UNITDATA DL_RESET_REQ;
MACRO_DL_UNITDATA DL_RESET_RES;
MACRO_DL_CODLS DL_RESET_RESYNCH;
MACRO_DL_UNBOUND DL_RESET_RES_PENDING;
MACRO_DL_COMMAND DL_RESPONSE;
MACRO_DL_RQST DL_RQST_NORSP;
MACRO_DL_RQST DL_RQST_RSP;
MACRO_DL_RSP DL_RSP_IP;
MACRO_DL_RSP DL_RSP_IT;
MACRO_DL_CMD_RS DL_RSP_MASK;
MACRO_DL_RSP DL_RSP_NE;
MACRO_DL_RSP DL_RSP_NR;
MACRO_DL_RSP DL_RSP_OK;
MACRO_DL_RSP DL_RSP_RS;
MACRO_DL_RSP DL_RSP_UE;
MACRO_DL_RSP DL_RSP_UN;
MACRO_DL_UNITDATA DL_SET_PHYS_ADDR_REQ;
MACRO_DL_CODLS DL_STYLE1;
MACRO_DL_CODLS DL_STYLE2;
MACRO_DL_ERROR DL_SUBS_BIND_ACK;
MACRO_DL_UNBOUND DL_SUBS_BIND_PND;
MACRO_DL_ERROR DL_SUBS_BIND_REQ;
MACRO_DL_UNBOUND DL_SUBS_UNBIND_PND;
MACRO_DL_SUBS DL_SUBS_UNBIND_REQ;
MACRO_DL_OUTSTATE DL_SYSERR;
MACRO_DL_OUTSTATE DL_TESTAUTO;
MACRO_DL_UNITDATA DL_TEST_CON;
MACRO_DL_UNITDATA DL_TEST_IND;
MACRO_DL_UNITDATA DL_TEST_REQ;
MACRO_DL_UNITDATA DL_TEST_RES;
MACRO_DL_UNITDATA DL_TOKEN_ACK;
MACRO_DL_UNITDATA DL_TOKEN_REQ;
MACRO_DL_OUTSTATE DL_TOOMANY;
MACRO_DL_CSMACD DL_TPB;
MACRO_DL_CSMACD DL_TPR;
MACRO_DL_UNITDATA DL_UDERROR_IND;
MACRO_DL_UNBOUND DL_UDQOS_PENDING;
MACRO_DL_UNITDATA DL_UDQOS_REQ;
MACRO_DL_UNATTACHED DL_UNATTACHED;
MACRO_DL_UNBOUND DL_UNBIND_PENDING;
MACRO_DL_UNBIND DL_UNBIND_REQ;
MACRO_DL_UNBOUND DL_UNBOUND;
MACRO_DL_OUTSTATE DL_UNDELIVERABLE;
MACRO_DL_UNITDATA DL_UNITDATA_IND;
MACRO_DL_UNITDATA DL_UNITDATA_REQ;
MACRO_DL_PROMISC DL_UNKNOWN;
MACRO_DL_OUTSTATE DL_UNSUPPORTED;
MACRO_DL_CODLS DL_USER;
MACRO_DL_UNBOUND DL_USER_RESET_PENDING;
MACRO_DL_VERSION DL_VERSION_2;
MACRO_DL_UNITDATA DL_X25DATA_IND;
MACRO_DL_UNITDATA DL_X25DATA_REQ;
MACRO_DL_OUTSTATE DL_XIDAUTO;
MACRO_DL_UNITDATA DL_XID_CON;
MACRO_DL_UNITDATA DL_XID_IND;
MACRO_DL_UNITDATA DL_XID_REQ;
MACRO_DL_UNITDATA DL_XID_RES;
char *DM;
MACRO_DMAXEXP DMAXEXP;
MACRO_DMA_RSVD DMA_64BIT;
MACRO_DMA_SLEEP DMA_ADDR_LIMIT;
MACRO_DMA_SLEEP DMA_ALL;
MACRO_DMA_SLEEP DMA_CONTIG;
MACRO_DMA_SLEEP DMA_DEALLOC;
MACRO_DMA_RSVD DMA_DIRECT_MAP;
MACRO_DMA_SLEEP DMA_GUARD_LOWER;
MACRO_DMA_SLEEP DMA_GUARD_UPPER;
MACRO_DMA_SLEEP DMA_HW_SG;
MACRO_DMA_SLEEP DMA_IN;
MACRO_DMA_SLEEP DMA_OUT;
MACRO_DMA_SLEEP DMA_RSVD_0002;
MACRO_DMA_SLEEP DMA_RSVD_0004;
MACRO_DMA_SLEEP DMA_RSVD_0080;
MACRO_DMA_SLEEP DMA_RSVD_0800;
MACRO_DMA_SLEEP DMA_RSVD_4000;
MACRO_DMA_RSVD DMA_RSVD_PLTFRM;
MACRO_DMA_SLEEP DMA_SLEEP;
MACRO_DMA DMA_WINDOW_TYPE_64BIT;
MACRO_DMA DMA_WINDOW_TYPE_DIRECT;
MACRO_DMA DMA_WINDOW_TYPE_SG;
MACRO_DMSET DMBIC;
MACRO_DMSET DMBIS;
MACRO_UNKN DMCC_EV6;
MACRO_DMSET DMGET;
MACRO_DMSET DMSET;
MACRO_DNOBJECT DNOBJECT_CTERM;
MACRO_DNOBJECT DNOBJECT_DTERM;
MACRO_DNOBJECT DNOBJECT_DTR;
MACRO_DNOBJECT DNOBJECT_EVR;
MACRO_DNOBJECT DNOBJECT_FAL;
MACRO_DNOBJECT DNOBJECT_MAIL11;
MACRO_DNOBJECT DNOBJECT_MIRROR;
MACRO_DNOBJECT DNOBJECT_NICE;
MACRO_DNOBJECT DNOBJECT_P5EVL;
MACRO_DNOBJECT DNOBJECT_PHONE;
MACRO_DNPROTO DNPROTO_EVL;
MACRO_DNPROTO DNPROTO_EVR;
MACRO_DNPROTO DNPROTO_NML;
MACRO_DNPROTO DNPROTO_NSP;
MACRO_DNPROTO DNPROTO_ROU;
MACRO_AUDIT_START DNSIX_AUDIT_EVENT;
MACRO_SDF DN_MAXADDL;
char *DO;
MACRO_ISO_SAP DOD_SAP;
MACRO_DOMAIN DOMAIN;
MACRO_DOMAIN_NAME DOMAIN_NAME_SZ;
MACRO_BYNAME DONTCOUNT;
time_how DONT_CHANGE;
MACRO_DOUBLE DOUBLE_TOKEN;
MACRO_F1 DOWN;
MACRO_F1 DOWN_NPAD;
char *DOWN_PARM;
MACRO_DO_BSD DO_BSD_COMPRESS;
MACRO_DO_DEFLATE DO_DEFLATE;
MACRO_DO_DEFLATE DO_PREDICTOR_1;
MACRO_DO_DEFLATE DO_PREDICTOR_2;
MACRO_DPMSNumberErrors DPMSMajorVersion;
MACRO_DPMSMinorVersion DPMSMinorVersion;
MACRO_DPMSModeOn DPMSModeOff;
MACRO_DPMSModeOn DPMSModeOn;
MACRO_DPMSModeOn DPMSModeStandby;
MACRO_DPMSModeOn DPMSModeSuspend;
MACRO_DPMSNumberErrors DPMSNumberErrors;
MACRO_DPMSNumberEvents DPMSNumberEvents;
MACRO_DPMS DPMS_NOT_SUPPORTED;
MACRO_DPMS DPMS_OFF;
MACRO_DPMS DPMS_ON;
MACRO_DPMS DPMS_STANDBY;
MACRO_DPMS_STATE DPMS_STATE_OFF;
MACRO_DPMS_STATE DPMS_STATE_ON;
MACRO_DPMS DPMS_SUSPEND;
MACRO_DP DP_PF_VALID;
MACRO_DP DP_SELF_TEST;
unsigned int DQNAN[2];
MACRO_DRIVER DRIVER_WILDNUM;
MACRO_DRVR DRVR_REGISTER;
MACRO_DRVR DRVR_UNREGISTER;
MACRO_CTR DS1_CONFIG;
MACRO_CTR DS1_CURRENT;
MACRO_CTR DS1_FAR_END_CURRENT;
MACRO_CTR DS1_FAR_END_INTERVAL;
MACRO_CTR DS1_FAR_END_TOTAL;
MACRO_CTR DS1_FRAC;
MACRO_CTR DS1_INTERVAL;
MACRO_CTR DS1_TOTAL;
MACRO_DSC$K_CLASS DSC$K_CLASS_A;
MACRO_DSC$K_CLASS DSC$K_CLASS_D;
MACRO_DSC$K_CLASS DSC$K_CLASS_NCA;
MACRO_DSC$K_CLASS DSC$K_CLASS_P;
MACRO_DSC$K_CLASS DSC$K_CLASS_S;
MACRO_DSC$K_CLASS DSC$K_CLASS_SD;
MACRO_DSC$K_CLASS DSC$K_CLASS_UBA;
MACRO_DSC$K_CLASS DSC$K_CLASS_UBS;
MACRO_DSC$K_CLASS DSC$K_CLASS_VS;
MACRO_DSC$K_CLASS DSC$K_CLASS_VSA;
MACRO_DSC$K_DTYPE_ZI DSC$K_DTYPE_ADT;
MACRO_DSC$K_DTYPE DSC$K_DTYPE_B;
MACRO_DSC$K_DTYPE_ZI DSC$K_DTYPE_BLV;
MACRO_DSC$K_DTYPE_ZI DSC$K_DTYPE_BPV;
MACRO_DSC$K DSC$K_DTYPE_BU;
MACRO_DSC$K_DTYPE_FC DSC$K_DTYPE_CIT;
MACRO_DSC$K_DTYPE_F DSC$K_DTYPE_D;
MACRO_DSC$K_DTYPE_FC DSC$K_DTYPE_DC;
MACRO_DSC$K_DTYPE_ZI DSC$K_DTYPE_DSC;
MACRO_DSC$K_DTYPE_F DSC$K_DTYPE_F;
MACRO_DSC$K_DTYPE_FC DSC$K_DTYPE_FC;
MACRO_DSC$K_DTYPE_F DSC$K_DTYPE_G;
MACRO_DSC$K_DTYPE_FC DSC$K_DTYPE_GC;
MACRO_DSC$K_DTYPE_F DSC$K_DTYPE_H;
MACRO_DSC$K_DTYPE_FC DSC$K_DTYPE_HC;
MACRO_DSC$K_DTYPE DSC$K_DTYPE_L;
MACRO_DSC$K DSC$K_DTYPE_LU;
MACRO_DSC$K_DTYPE_NU DSC$K_DTYPE_NL;
MACRO_DSC$K_DTYPE_NU DSC$K_DTYPE_NLO;
MACRO_DSC$K_DTYPE_NU DSC$K_DTYPE_NR;
MACRO_DSC$K_DTYPE_NU DSC$K_DTYPE_NRO;
MACRO_DSC$K_DTYPE_NU DSC$K_DTYPE_NU;
MACRO_DSC$K_DTYPE_NU DSC$K_DTYPE_NZ;
MACRO_DSC$K_DTYPE DSC$K_DTYPE_O;
MACRO_DSC$K DSC$K_DTYPE_OU;
MACRO_DSC$K_DTYPE_NU DSC$K_DTYPE_P;
MACRO_DSC$K_DTYPE DSC$K_DTYPE_Q;
MACRO_DSC$K DSC$K_DTYPE_QU;
MACRO_DSC$K_DTYPE_T DSC$K_DTYPE_T;
MACRO_DSC$K_DTYPE_V DSC$K_DTYPE_V;
MACRO_DSC$K_DTYPE_T DSC$K_DTYPE_VT;
MACRO_DSC$K_DTYPE_V DSC$K_DTYPE_VU;
MACRO_DSC$K_DTYPE DSC$K_DTYPE_W;
MACRO_DSC$K DSC$K_DTYPE_WU;
MACRO_DSC$K DSC$K_DTYPE_Z;
MACRO_DSC$K_DTYPE_ZI DSC$K_DTYPE_ZEM;
MACRO_DSC$K_DTYPE_ZI DSC$K_DTYPE_ZI;
unsigned int DSNAN[2];
MACRO_DSO DSO_ACCEPTMODE;
MACRO_DSO DSO_CONACCEPT;
MACRO_DSO DSO_CONACCESS;
MACRO_DSO DSO_CONDATA;
MACRO_DSO DSO_CONREJECT;
MACRO_DSO DSO_DISDATA;
MACRO_DSO DSO_LINKINFO;
MACRO_DSO_MAX DSO_MAX;
MACRO_DSO DSO_NODENAME;
MACRO_DSO DSO_SEQPACKET;
MACRO_DSO DSO_STREAM;
MACRO_DST DST_AUST;
MACRO_DST DST_CAN;
MACRO_DST DST_EET;
MACRO_DST DST_MET;
MACRO_DST DST_NONE;
MACRO_DST DST_USA;
MACRO_DST DST_WET;
MACRO_UNKN DS_3100;
MACRO_UNKN DS_5000;
MACRO_UNKN DS_5000_100;
MACRO_UNKN DS_5000_300;
MACRO_UNKN DS_5100;
MACRO_UNKN DS_5400;
MACRO_UNKN DS_5500;
MACRO_UNKN DS_5800;
MACRO_UNKN DS_CMAX;
MACRO_DTYPE DTYPE_DEC;
MACRO_DTYPE DTYPE_ESDI;
MACRO_DTYPE DTYPE_FLOPPY;
MACRO_DTYPE DTYPE_IDE;
MACRO_DTYPE DTYPE_MSCP;
MACRO_DTYPE DTYPE_SCSI;
MACRO_DTYPE DTYPE_SMD;
MACRO_DTYPE DTYPE_ST506;
MACRO_DTYPE DTYPE_SWXCR;
MACRO_DT DT_BASE_ADDRESS;
MACRO_DT DT_CONFLICT;
MACRO_DT DT_CONFLICTNO;
MACRO_DT DT_DEBUG;
MACRO_DT DT_FINI;
MACRO_DT DT_FLAGS;
MACRO_DT_GET DT_GET_INFO;
MACRO_DT DT_GOTSYM;
MACRO_DT DT_HASH;
MACRO_DT DT_HIPAGENO;
MACRO_DT DT_HIPROC;
MACRO_DT DT_ICHECKSUM;
MACRO_DT DT_INIT;
MACRO_DT DT_IVERSION;
MACRO_DT DT_JMPREL;
MACRO_DT DT_LIBLIST;
MACRO_DT DT_LIBLISTNO;
MACRO_DT DT_LOCAL_GOTNO;
MACRO_DT DT_LOPROC;
MACRO_R_MIPS DT_MIPS_BASE_ADDRESS;
MACRO_R_MIPS DT_MIPS_CONFLICT;
MACRO_R_MIPS DT_MIPS_CONFLICTNO;
MACRO_R_MIPS DT_MIPS_FLAGS;
MACRO_R_MIPS DT_MIPS_GOTSYM;
MACRO_R_MIPS DT_MIPS_HIPAGENO;
MACRO_R_MIPS DT_MIPS_ICHECKSUM;
MACRO_R_MIPS DT_MIPS_IVERSION;
MACRO_R_MIPS DT_MIPS_LIBLIST;
MACRO_R_MIPS DT_MIPS_LIBLISTNO;
MACRO_R_MIPS DT_MIPS_LOCAL_GOTNO;
MACRO_R_MIPS DT_MIPS_MSYM;
MACRO_R_MIPS DT_MIPS_RLD_MAP;
MACRO_R_MIPS DT_MIPS_RLD_VERSION;
MACRO_R_MIPS DT_MIPS_SO_SUFFIX;
MACRO_R_MIPS DT_MIPS_SYMTABNO;
MACRO_R_MIPS DT_MIPS_TIME_STAMP;
MACRO_R_MIPS DT_MIPS_UNREFEXTNO;
MACRO_DT DT_MSYM;
MACRO_DT DT_NEEDED;
MACRO_DT DT_NULL;
MACRO_DT DT_PLTGOT;
MACRO_DT DT_PLTREL;
MACRO_DT DT_PLTRELSZ;
MACRO_DT DT_REL;
MACRO_DT DT_RELA;
MACRO_DT DT_RELAENT;
MACRO_DT DT_RELASZ;
MACRO_DT DT_RELENT;
MACRO_DT DT_RELSZ;
MACRO_DT DT_RLD_MAP;
MACRO_DT DT_RLD_VERSION;
MACRO_DT DT_RPATH;
MACRO_DT DT_SONAME;
MACRO_DT DT_SO_SUFFIX;
MACRO_DT DT_STRSZ;
MACRO_DT DT_STRTAB;
MACRO_DT DT_SYMBOLIC;
MACRO_DT DT_SYMENT;
MACRO_DT DT_SYMTAB;
MACRO_DT DT_SYMTABNO;
MACRO_DT DT_TEXTREL;
MACRO_DT DT_TIME_STAMP;
MACRO_DT DT_UNREFEXTNO;
MACRO_TTYDISC DUDISC;
MACRO_DUMNAME DUMNAME;
MACRO_DUMPINFO DUMPINFO_MAX;
MACRO_DUMPREQ DUMPREQ_BAD;
MACRO_DUMPREQ DUMPREQ_CHECK;
MACRO_DUMPREQ DUMPREQ_CLOSE;
MACRO_DUMPREQ DUMPREQ_OPEN;
MACRO_DUMPREQ DUMPREQ_WRITE;
MACRO_LOG_KERN DUMP_FILE;
MACRO_MAGNUM DUMP_MAGIC_NUMBER;
MACRO_X_DUMPDEV DUMP_NPIECE_MAX;
MACRO_DXFILE DXDIR;
MACRO_DXFILE DXFILE;
MACRO_XK_Insert DXK_Remove;
MACRO_DXK_acute DXK_acute_accent;
MACRO_DXK_cedilla DXK_cedilla_accent;
MACRO_DXK DXK_circumflex_accent;
MACRO_DXK_diaeresis DXK_diaeresis;
MACRO_DXK_acute DXK_grave_accent;
MACRO_XC_arrow DXK_ring_accent;
MACRO_DXK_acute DXK_tilde;
MACRO_DXFILE DXLINK;
$768BDCC75D13E7259F2BAD34DCA3191B DXmAS_NEEDED;
void DXmActivateWidget(Widget widget);
Boolean DXmCSContainsStringCharSet(XmString string);
void DXmCSTextClearSelection(Widget widget, Time time);
Boolean DXmCSTextCopy(Widget widget, Time time);
Boolean DXmCSTextCut(Widget widget, Time time);
void DXmCSTextDisableRedisplay(Widget widget);
void DXmCSTextEnableRedisplay(Widget widget);
Boolean DXmCSTextGetEditable(Widget widget);
int DXmCSTextGetMaxLength(Widget widget);
XmString DXmCSTextGetSelection(Widget widget);
XmString DXmCSTextGetString(Widget widget);
Boolean DXmCSTextHasSelection(Widget widget);
void DXmCSTextHorizontalScroll(Widget widget, int n);
int DXmCSTextNumLines(Widget widget);
Boolean DXmCSTextPaste(Widget widget);
Boolean DXmCSTextRemove(Widget widget);
void DXmCSTextSetAddMode(Widget widget, Boolean state);
void DXmCSTextSetEditable(Widget widget, Boolean editable);
void DXmCSTextSetMaxLength(Widget widget, int max_length);
void DXmCSTextSetString(Widget widget, XmString value);
void DXmCSTextVerticalScroll(Widget widget, int n);
WidgetList DXmChildren(Widget widget);
Widget DXmCreateColorMix(Widget parent, String name, ArgList arglist, Cardinal argcount);
Widget DXmCreateColorMixDialog(Widget parent, String name, ArgList arglist, Cardinal argcount);
Cursor DXmCreateCursor(Widget widget, int cursorkind);
Widget DXmCreateSvn(Widget parent, char *name, Arg *arglist, int argcount);
Opaque DXmCvtCStoFC(XmString cs, __int64 *byte_count, __int64 *status);
Opaque DXmCvtCStoOS(XmString cs, __int64 *byte_count, __int64 *status);
XmString DXmCvtFCtoCS(Opaque fc, __int64 *byte_count, __int64 *status);
XmString DXmCvtOStoCS(Opaque os_string, __int64 *byte_count, __int64 *status);
Widget DXmDisplayCSMessage(Widget parent_widget, char *name, Boolean default_position, Position x, Position y, unsigned __int8 style, int *message_vector, Widget *widget, int *convert_proc, XtCallbackList ok_callback, XtCallbackList help_callback);
char *DXmFindFontFallback(char *fontname);
void DXmFormSpaceButtonsEqually(Widget parent, Widget *widget_list, Cardinal num_widgets);
XmString DXmGetLocaleString(I18nContext context, char *string, I18nWordType word_type);
void DXmHelpOnContext(Widget widget, Boolean confine);
void DXmHelpSystemClose(Opaque help_context, void (*routine)(), Opaque tag);
void DXmHelpSystemDisplay(Opaque help_context, char *help_file, char *keyword, char *name, void (*routine)(), Opaque tag);
void DXmHelpSystemOpen(Opaque *help_context, Widget main_window, char *help_file, void (*routine)(), Opaque tag);
$8A0B1F50D160EB8C12640B4C27785CB0 DXmLAYOUT_LEFT_DOWN;
$8A0B1F50D160EB8C12640B4C27785CB0 DXmLAYOUT_LEFT_UP;
$8A0B1F50D160EB8C12640B4C27785CB0 DXmLAYOUT_RIGHT_DOWN;
$8A0B1F50D160EB8C12640B4C27785CB0 DXmLAYOUT_RIGHT_UP;
XFontStruct *DXmLoadQueryFont(Display *d, char *fontname);
$768BDCC75D13E7259F2BAD34DCA3191B DXmNONE;
Cardinal DXmNumChildren(Widget widget);
unsigned __int64 DXmPrintWgtAugmentList(Widget pw, int list, XtPointer data);
unsigned __int64 DXmPrintWgtPrintJob(Widget print_widget, XmStringTable filenames, int filename_count);
void DXmSvnAddEntries(Widget widget, int after, int count, int level, XtPointer *(*tags)(), Boolean index);
int DXmSvnAutoScrollCheck(Widget widget, int x, int y);
void DXmSvnAutoScrollDisplay(Widget widget, int x, int y);
void DXmSvnClearHighlight(Widget widget, int entry);
void DXmSvnClearHighlighting(Widget widget);
void DXmSvnClearSelection(Widget widget, int entry);
void DXmSvnClearSelections(Widget widget);
void DXmSvnDeleteEntries(Widget widget, int after, int count);
void DXmSvnDisableDisplay(Widget widget);
void DXmSvnEnableDisplay(Widget widget);
void DXmSvnFlushEntry(Widget widget, int entry);
int DXmSvnGetComponentNumber(Widget widget, XtPointer tag);
XtPointer DXmSvnGetComponentTag(Widget widget, unsigned int comp_number);
XmString DXmSvnGetComponentText(Widget widget, int entry_number, int comp_number);
int DXmSvnGetComponentWidth(Widget widget, int comp_number);
void DXmSvnGetDisplayed(Widget widget, int *(*entries)(), XtPointer *(*tags)(), int *(*ys)(), int len);
int DXmSvnGetEntryLevel(Widget widget, int entry);
int DXmSvnGetEntryNumber(Widget widget, XtPointer tag);
void DXmSvnGetEntryPosition(Widget widget, int entry, Boolean mode, int *x, int *y);
int DXmSvnGetEntrySensitivity(Widget widget, int entry);
XtPointer DXmSvnGetEntryTag(Widget widget, int entry);
void DXmSvnGetHighlighted(Widget widget, int *(*entries)(), XtPointer *(*tags)(), int len);
int DXmSvnGetNumDisplayed(Widget widget);
int DXmSvnGetNumHighlighted(Widget widget);
int DXmSvnGetNumSelections(Widget widget);
Widget DXmSvnGetPrimaryWorkWidget(Widget widget);
Widget DXmSvnGetSecondaryWorkWidget(Widget widget);
void DXmSvnGetSelections(Widget widget, int *(*entries)(), int *(*comps)(), XtPointer *(*tags)(), int len);
void DXmSvnGetTreePosition(Widget widget, int *x, int *y);
void DXmSvnHideHighlighting(Widget widget);
void DXmSvnHideSelections(Widget widget);
void DXmSvnHighlightAll(Widget widget);
void DXmSvnHighlightEntry(Widget widget, int entry);
void DXmSvnInsertComponent(Widget widget, int comp_number, Dimension width, XtPointer tag);
void DXmSvnInvalidateEntry(Widget widget, int entry);
void DXmSvnMapPosition(Widget widget, int x, int y, int *entry, int *comp_number, XtPointer *tag);
int DXmSvnPositionDisplay(Widget widget, int entry, int position);
void DXmSvnSelectAll(Widget widget);
void DXmSvnSelectComponent(Widget widget, int entry, int comp_number);
void DXmSvnSelectEntry(Widget widget, int entry);
void DXmSvnSetApplDragging(Widget widget, int on_off);
void DXmSvnSetComponentHidden(Widget widget, int entry, int comp_number, int mode);
void DXmSvnSetComponentPixmap(Widget widget, int entry, int comp_number, int x, int y, Pixmap pixmap, int width, int height);
void DXmSvnSetComponentTag(Widget widget, int comp_number, XtPointer tag);
void DXmSvnSetComponentText(Widget widget, int entry, int comp_number, int x, int y, XmString text, XmFontList font);
void DXmSvnSetComponentWidget(Widget widget, int entry, int comp_number, int x, int y, Widget subw);
void DXmSvnSetComponentWidth(Widget widget, int comp_number, Dimension width);
void DXmSvnSetEntry(Widget widget, int entry, int width, int height, int number, Boolean sens, XtPointer tag, Boolean index);
void DXmSvnSetEntryIndexWindow(Widget widget, int entry, Boolean index);
void DXmSvnSetEntryNumComponents(Widget widget, int entry, int number);
void DXmSvnSetEntrySensitivity(Widget widget, int entry, Boolean sens);
void DXmSvnSetEntryTag(Widget widget, int entry, XtPointer tag);
void DXmSvnSetTreePosition(Widget widget, int x, int y);
void DXmSvnShowHighlighting(Widget widget);
void DXmSvnShowSelections(Widget widget);
void DXmSvnValidateAll(Widget widget);
MACRO_D_REMOVABLE D_BADSECT;
MACRO_D_REMOVABLE D_CHAIN;
MACRO_D_REMOVABLE D_DYNAM_GEOM;
MACRO_D_REMOVABLE D_ECC;
MACRO_D D_FMT;
MACRO_D_REMOVABLE D_INVENT_GEOM;
MACRO_D_REMOVABLE D_RAMDISK;
MACRO_D_REMOVABLE D_REMOVABLE;
MACRO_D_SSE D_SSE;
MACRO_D D_T_FMT;
MACRO_TK_SCROLL DeactivateNotify;
char *Def_term;
MACRO_DontPreferBlanking DefaultBlanking;
MACRO_DontAllowExposures DefaultExposures;
MACRO_AddToList DeleteFromList;
MACRO_DestroyAll DestroyAll;
MACRO_KeyPress DestroyNotify;
MACRO_DeviceMode DeviceMode;
MACRO_StaticGray DirectColor;
MACRO_DisableAccess DisableAccess;
MACRO_DisableScreenInterval DisableScreenInterval;
MACRO_DisableScreenSaver DisableScreenSaver;
MACRO_DoRed DoBlue;
MACRO_DoRed DoGreen;
MACRO_DoRed DoRed;
MACRO_DontAllowExposures DontAllowExposures;
MACRO_DontCareState DontCareState;
MACRO_DontPreferBlanking DontPreferBlanking;
MACRO_Dont Dont_Check;
MACRO_DvAccelNum DvAccelDenom;
MACRO_DvAccelNum DvAccelNum;
MACRO_DvKeyClickPercent DvAutoRepeatMode;
MACRO_DvKeyClickPercent DvDuration;
MACRO_DvInteger DvInteger;
MACRO_DvKeyClickPercent DvKey;
MACRO_DvKeyClickPercent DvKeyClickPercent;
MACRO_DvKeyClickPercent DvLed;
MACRO_DvKeyClickPercent DvLedMode;
MACRO_DvKeyClickPercent DvPercent;
MACRO_DvKeyClickPercent DvPitch;
MACRO_DvString DvString;
MACRO_DvAccelNum DvThreshold;
MACRO_ESUCCESS E2BIG;
MACRO_ESUCCESS EACCES;
MACRO_EUNDEF EACCESS;
MACRO_EAGAIN EADDRINUSE;
MACRO_EAGAIN EADDRNOTAVAIL;
MACRO_EAGAIN EAFNOSUPPORT;
MACRO_EAGAIN EAGAIN;
MACRO_EAGAIN EAIO;
MACRO_EAI EAI_ADDRFAMILY;
MACRO_EAI EAI_AGAIN;
MACRO_EAI EAI_BADFLAGS;
MACRO_EAI EAI_FAIL;
MACRO_EAI EAI_FAMILY;
MACRO_EAI EAI_MEMORY;
MACRO_EAI EAI_NODATA;
MACRO_EAI EAI_NONAME;
MACRO_EAI EAI_SERVICE;
MACRO_EAI EAI_SOCKTYPE;
MACRO_EAI EAI_SYSTEM;
MACRO_EAGAIN EALREADY;
MACRO_EA EA_SIZE;
MACRO_UNKN EB64_PLUS;
MACRO_ESUCCESS EBADF;
MACRO_EUNDEF EBADID;
MACRO_EAGAIN EBADMSG;
MACRO_EUNDEF EBADOP;
MACRO_EAGAIN EBADRPC;
MACRO_ESUCCESS EBUSY;
MACRO_EAGAIN ECANCELED;
MACRO_ECC ECC;
MACRO_ESUCCESS ECHILD;
MACRO_ECHOE ECHO;
MACRO_ECHOKE ECHOCTL;
MACRO_ECHOE ECHOE;
MACRO_ECHOE ECHOK;
MACRO_ECHOKE ECHOKE;
MACRO_ECHOE ECHONL;
MACRO_ECHOKE ECHOPRT;
MACRO_EAGAIN ECLONEME;
MACRO_EAGAIN ECONNABORTED;
MACRO_EAGAIN ECONNREFUSED;
MACRO_EAGAIN ECONNRESET;
char *ED;
MACRO_VDATA EDATA;
MACRO_ESUCCESS EDEADLK;
MACRO_EAGAIN EDESTADDRREQ;
MACRO_EAGAIN EDIRTY;
MACRO_EDITRES_FORMAT EDITRES_FORMAT;
MACRO_EDITRES EDITRES_IS_OBJECT;
MACRO_EDITRES EDITRES_IS_UNREALIZED;
MACRO_EDITRES_FORMAT EDITRES_SEND_EVENT_FORMAT;
MACRO_ESUCCESS EDOM;
MACRO_EAGAIN EDQUOT;
MACRO_EAGAIN EDUPPKG;
MACRO_EEI_UNCATEGORIZED EEI_ABORTIO_FAILURE;
MACRO_EEI_AM EEI_AM_HARD_DEV_ERROR;
MACRO_EEI_AM EEI_AM_PATH_FAILURE;
MACRO_EEI_AM EEI_AM_RESERVATION_FAILURE;
MACRO_EEI_AM EEI_AM_RESERVATION_RESET;
MACRO_EEI_AM EEI_AM_SOFT_DEV_ERROR;
MACRO_EEI_VERSION EEI_ARCH_DATA_LEN;
MACRO_EEI_AM EEI_ARCH_FLAGS_MSK;
MACRO_EEI_UNCATEGORIZED EEI_BBR_DONE;
MACRO_EEI_CAM EEI_CAM_DATA_VALID;
MACRO_EEI_CAM EEI_CAM_FLAGS_MSK;
MACRO_EEI_CAM_STATUS EEI_CAM_STATUS_VALID;
MACRO_EEI_UNCATEGORIZED EEI_CNTBUSY_FAILURE;
MACRO_EEI_UNCATEGORIZED EEI_CNTRLR_FAILURE;
MACRO_EEI_UNCATEGORIZED EEI_CXALLOC_FAILURE;
MACRO_EEI_UNCATEGORIZED EEI_DEVBIO_FAILURE;
MACRO_EEI_UNCATEGORIZED EEI_DEVBUSY_FAILURE;
MACRO_EEI_UNCATEGORIZED EEI_DEVHARD_FAILURE;
MACRO_EEI_UNCATEGORIZED EEI_DEVPATH_CONFLICT;
MACRO_EEI_UNCATEGORIZED EEI_DEVPATH_FAILURE;
MACRO_EEI_UNCATEGORIZED EEI_DEVPATH_RESET;
MACRO_EEI_UNCATEGORIZED EEI_DEVREQ_FAILURE;
MACRO_EEI_UNCATEGORIZED EEI_DEVSOFT_FAILURE;
MACRO_EEI_UNCATEGORIZED EEI_DEVSTATE_FAILURE;
MACRO_EEI_UNCATEGORIZED EEI_GROSSSW_FAILURE;
MACRO_EEI_UNCATEGORIZED EEI_INVALID_PARAM;
MACRO_EEI_UNCATEGORIZED EEI_MALLOC_FAILURE;
MACRO_EEI EEI_NO_STATUS;
MACRO_EEI_UNCATEGORIZED EEI_RESERVE_PENDING;
MACRO_EEI_CAM_STATUS EEI_SCSI_SENSE_VALID;
MACRO_EEI_CAM_STATUS EEI_SCSI_STATUS_VALID;
MACRO_EEI EEI_SUCCESS;
MACRO_EEI_UNCATEGORIZED EEI_TAPE_POS_LOST;
MACRO_EEI_UNCATEGORIZED EEI_UNCATEGORIZED;
MACRO_EEI_VERSION EEI_VERSION;
MACRO_ESUCCESS EEXIST;
MACRO_EUNDEF EEXISTS;
MACRO_EAGAIN EFAIL;
MACRO_ESUCCESS EFAULT;
MACRO_ESUCCESS EFBIG;
MACRO_NO EFF_ONLY_OK;
MACRO_SIGFPS EFPS;
MACRO_EAGAIN EFTYPE;
MACRO_EF_V0 EF_A0;
MACRO_EF_V0 EF_A1;
MACRO_EF_V0 EF_A2;
MACRO_EF_V0 EF_A3;
MACRO_EF_V0 EF_A4;
MACRO_EF_V0 EF_A5;
MACRO_EF_V0 EF_AT;
MACRO_EF_V0 EF_GP;
MACRO_EF EF_MIPS_ARCH;
MACRO_EF_MIPS EF_MIPS_ARCH_2;
MACRO_EF_MIPS EF_MIPS_ARCH_3;
MACRO_EF EF_MIPS_CPIC;
MACRO_EF EF_MIPS_NOREORDER;
MACRO_EF EF_MIPS_PIC;
MACRO_EF EF_MIPS_UGEN_ALLOC;
MACRO_EF EF_MIPS_UGEN_RESERVED;
MACRO_EF_V0 EF_PC;
MACRO_EF_V0 EF_PS;
MACRO_EF_V0 EF_RA;
MACRO_EF_V0 EF_S0;
MACRO_EF_V0 EF_S1;
MACRO_EF_V0 EF_S2;
MACRO_EF_V0 EF_S3;
MACRO_EF_V0 EF_S4;
MACRO_EF_V0 EF_S5;
MACRO_EF_V0 EF_S6;
MACRO_EF_V0 EF_SIZE;
MACRO_EF_V0 EF_SP;
MACRO_HWEF EF_SSIZE;
MACRO_EF_V0 EF_T0;
MACRO_EF_V0 EF_T1;
MACRO_EF_V0 EF_T10;
MACRO_EF_V0 EF_T11;
MACRO_EF_V0 EF_T12;
MACRO_EF_V0 EF_T2;
MACRO_EF_V0 EF_T3;
MACRO_EF_V0 EF_T4;
MACRO_EF_V0 EF_T5;
MACRO_EF_V0 EF_T6;
MACRO_EF_V0 EF_T7;
MACRO_EF_V0 EF_T8;
MACRO_EF_V0 EF_T9;
MACRO_EF_V0 EF_V0;
MACRO_EAGAIN EHOSTDOWN;
MACRO_EAGAIN EHOSTUNREACH;
char *EI;
MACRO_EAGAIN EIDRM;
MACRO_ZERO EIGHT;
MACRO_EAGAIN EILSEQ;
MACRO_EAGAIN EINPROG;
MACRO_EAGAIN EINPROGRESS;
MACRO_ESUCCESS EINTR;
MACRO_ESUCCESS EINVAL;
MACRO_ESUCCESS EIO;
MACRO_EIOCFLUSH EIOCALLOCP;
MACRO_EIOCFLUSH EIOCDEALLOCP;
MACRO_EIOCFLUSH EIOCFLUSH;
MACRO_EIOCINHS EIOCINHS;
MACRO_EAGAIN EISCONN;
MACRO_ESUCCESS EISDIR;
MACRO_EI EI_CLASS;
MACRO_EI EI_DATA;
MACRO_EI EI_MAG0;
MACRO_EI EI_MAG1;
MACRO_EI EI_MAG2;
MACRO_EI EI_MAG3;
MACRO_EI EI_NIDENT;
MACRO_EI EI_PAD;
MACRO_EI EI_VERSION;
MACRO_EV ELF32_FSZ_ADDR;
MACRO_ELF32 ELF32_FSZ_HALF;
MACRO_ELF32 ELF32_FSZ_OFF;
MACRO_ELF32_FSZ ELF32_FSZ_SWORD;
MACRO_ELF32_FSZ_WORD ELF32_FSZ_WORD;
MACRO_ELFCLASSNONE ELFCLASS32;
MACRO_ELFCLASSNONE ELFCLASS64;
MACRO_ELFCLASSNONE ELFCLASSNONE;
MACRO_ELFDATANONE ELFDATA2LSB;
MACRO_ELFDATANONE ELFDATA2MSB;
MACRO_ELFDATANONE ELFDATANONE;
MACRO_ELFDATANUM ELFDATANUM;
MACRO_EI ELFMAG0;
MACRO_ELFMAG1 ELFMAG1;
MACRO_ELFMAG1 ELFMAG2;
MACRO_ELFMAG3 ELFMAG3;
MACRO_ELF_AR ELF_AR_STRTAB_NAME_LEN;
MACRO_ELF ELF_AR_SYMTAB_NAME_LEN;
MACRO_ELF_HANDLE ELF_HANDLE_MAGIC;
MACRO_ELF_MAX ELF_MAX_PHDRS;
MACRO_xFalse ELFlagFocus;
MACRO_xFalse ELFlagSameScreen;
MACRO_ELLIPSES ELLIPSES_TOKEN;
MACRO_EAGAIN ELOOP;
MACRO_EAGAIN EMEDIA;
MACRO_ESUCCESS EMFILE;
MACRO_ESUCCESS EMLINK;
MACRO_EMPTY EMPTY;
MACRO_EAGAIN EMSGSIZE;
MACRO_EAGAIN EMTIMERS;
MACRO_EM EM_386;
MACRO_EM EM_486;
MACRO_EM EM_68K;
MACRO_EM EM_860;
MACRO_EM EM_88K;
MACRO_EM EM_M32;
MACRO_EM EM_MIPS;
MACRO_EM EM_NONE;
MACRO_EM EM_NUM;
MACRO_EM EM_SPARC;
MACRO_EAGAIN ENAMETOOLONG;
MACRO_ENHOLDSIG ENBATCH;
MACRO_ENHOLDSIG ENBPFHDR;
MACRO_ENHOLDSIG ENCOPYALL;
MACRO_ENDEFWAITING ENDEFWAITING;
MACRO_ENDT_BS3MB ENDT_10MB;
MACRO_ENDT ENDT_3MB;
MACRO_ENDT_BS3MB ENDT_BS3MB;
MACRO_ENDT_BS3MB ENDT_FDDI;
MACRO_ENDT_BS3MB ENDT_HDLC;
MACRO_ENDT_BS3MB ENDT_IEEE802;
MACRO_ENDT_BS3MB ENDT_LOOPBACK;
MACRO_ENDT_MIN ENDT_MAX;
MACRO_ENDT_MIN ENDT_MIN;
MACRO_ENDT_BS3MB ENDT_NULL;
MACRO_ENDT_BS3MB ENDT_OTHER;
MACRO_ENDT_BS3MB ENDT_PPP;
MACRO_ENDT_BS3MB ENDT_SLIP;
MACRO_ENDT_BS3MB ENDT_TRN;
MACRO_F1 END_NPAD;
MACRO_EAGAIN ENETDOWN;
MACRO_ENETN ENETN_SIZE;
MACRO_EAGAIN ENETRESET;
MACRO_EAGAIN ENETUNREACH;
MACRO_ESUCCESS ENFILE;
MACRO_NFS_CALLTYPES ENFS_TRYAGAIN;
MACRO_ENF_EQ ENF_AND;
MACRO_ENF_EQ ENF_CAND;
MACRO_ENF_EQ ENF_CNAND;
MACRO_ENF_EQ ENF_CNOR;
MACRO_ENF_EQ ENF_COR;
MACRO_ENF_EQ ENF_EQ;
MACRO_ENF_EQ ENF_GE;
MACRO_ENF_EQ ENF_GT;
MACRO_ENF_EQ ENF_LE;
MACRO_ENF_EQ ENF_LT;
MACRO_ENF ENF_NBPA;
MACRO_ENF_NBPO ENF_NBPO;
MACRO_ENF_EQ ENF_NEQ;
MACRO_ENF_NBPO ENF_NOP;
MACRO_ENF_NOPUSH ENF_NOPUSH;
MACRO_ENF_EQ ENF_OR;
MACRO_ENF_NOPUSH ENF_PUSH00FF;
MACRO_ENF_NOPUSH ENF_PUSHFF00;
MACRO_ENF_NOPUSH ENF_PUSHFFFF;
MACRO_ENF_NOPUSH ENF_PUSHLIT;
MACRO_ENF_NOPUSH ENF_PUSHONE;
MACRO_ENF_NOPUSH ENF_PUSHWORD;
MACRO_ENF_NOPUSH ENF_PUSHZERO;
MACRO_ENF_EQ ENF_XOR;
MACRO_ENHIPRI ENHIPRI;
MACRO_ENHOLDSIG ENHOLDSIG;
MACRO_ENMINSCAVENGE ENKERNEL;
MACRO_ENMAXFILTERS ENMAXFILTERS;
MACRO_ENMAXINT ENMAXINT;
MACRO_ENHIPRI ENMAXPRI;
MACRO_ENMAXUNITS ENMAXUNITS;
MACRO_ENMAXWAITING ENMAXWAITING;
MACRO_ENMINSCAVENGE ENMINSCAVENGE;
MACRO_ENHOLDSIG ENNONEXCL;
MACRO_ENNOTSUWAITING ENNOTSUWAITING;
MACRO_EAGAIN ENOBUFS;
MACRO_EAGAIN ENODATA;
MACRO_ESUCCESS ENODEV;
MACRO_ESUCCESS ENOENT;
MACRO_ESUCCESS ENOEXEC;
MACRO_EAGAIN ENOLCK;
MACRO_ESUCCESS ENOMEM;
MACRO_EAGAIN ENOMSG;
MACRO_EAGAIN ENOPKG;
MACRO_EAGAIN ENOPROTOOPT;
MACRO_EUNDEF ENOSPACE;
MACRO_ESUCCESS ENOSPC;
MACRO_EAGAIN ENOSR;
MACRO_EAGAIN ENOSTR;
MACRO_EAGAIN ENOSYM;
MACRO_EAGAIN ENOSYS;
MACRO_ESUCCESS ENOTBLK;
MACRO_EAGAIN ENOTCONN;
MACRO_ESUCCESS ENOTDIR;
MACRO_EAGAIN ENOTEMPTY;
MACRO_EUNDEF ENOTFOUND;
MACRO_EAGAIN ENOTSOCK;
MACRO_EAGAIN ENOTSUP;
MACRO_ESUCCESS ENOTTY;
MACRO_EUNDEF ENOUSER;
MACRO_ENDEFWAITING ENPACKETS;
MACRO_ENHOLDSIG ENPRIVMODES;
MACRO_ENHOLDSIG ENPROMISC;
enStates ENRECVIDLE;
enStates ENRECVTIMEDOUT;
enStates ENRECVTIMING;
MACRO_ENSF ENSF_BROADCAST;
MACRO_ENSF ENSF_MULTICAST;
MACRO_ENSF ENSF_PROMISC;
MACRO_ENSF ENSF_TRAILER;
$EDBA1914F16BC538415B0E0A3A3FD3BB ENTER;
MACRO_UNACCESSIBLE ENTRY_TOO_LONG;
MACRO_ENHOLDSIG ENTSTAMP;
MACRO_NEW_ENV ENV_ESC;
MACRO_ENV ENV_STATUS_FAIL;
MACRO_ENV ENV_STATUS_OK;
MACRO_ENV_TEMP ENV_TEMP_STATUS_FAIL;
MACRO_ENV ENV_TEMP_STATUS_OK;
MACRO_NEW_ENV ENV_USERVAR;
MACRO_ESUCCESS ENXIO;
MACRO_EN EN_MAX_ADDR_LEN;
bool EO;
MACRO__IONBF EOF;
MACRO_EAGAIN EOPNOTSUPP;
MACRO_ESUCCESS EPERM;
MACRO_EAGAIN EPFNOSUPPORT;
MACRO_ESUCCESS EPIPE;
MACRO_EPOCH EPOCH_WDAY;
MACRO_TM_JANUARY EPOCH_YEAR;
MACRO_EAGAIN EPROCLIM;
MACRO_EAGAIN EPROCUNAVAIL;
MACRO_EAGAIN EPROGMISMATCH;
MACRO_EAGAIN EPROGUNAVAIL;
MACRO_EAGAIN EPROTO;
MACRO_EAGAIN EPROTONOSUPPORT;
MACRO_EAGAIN EPROTOTYPE;
MACRO_D ERA;
MACRO_ESUCCESS ERANGE;
MACRO_D ERA_D_FMT;
MACRO_D ERA_D_T_FMT;
MACRO_D ERA_T_FMT;
MACRO_EAGAIN ERELOCATED;
MACRO_EAGAIN EREMOTE;
MACRO_ESUCCESS EROFS;
MACRO_EAGAIN ERPCMISMATCH;
MACRO_ERR ERR;
MACRO_ERROR ERROR;
MACRO_NEGb ESCAPEb;
MACRO_ESEC ESEC_ACL_CONFIG_FAILURE;
MACRO_ESEC ESEC_DIR_NOT_EMPTY;
MACRO_ESEC ESEC_EXT_FS;
MACRO_ESEC ESEC_INVALID_IR;
MACRO_ESEC ESEC_IS_MLD;
MACRO_ESEC ESEC_MAC_CONFIG_FAILURE;
MACRO_ESEC ESEC_MAC_DOM_CLEARANCE;
MACRO_ESEC ESEC_MAC_FS_RELATION;
MACRO_ESEC ESEC_MAC_IL_NOCOMB;
MACRO_ESEC ESEC_MAC_IL_RELATION;
MACRO_ESEC ESEC_MAC_NEED_PRIVILEGE;
MACRO_ESEC ESEC_MAC_NOT_EQUAL;
MACRO_ESEC ESEC_MAC_NO_CLEARANCE;
MACRO_ESEC ESEC_MAC_NO_SL;
MACRO_ESEC ESEC_MAC_NO_WRITE;
MACRO_ESEC ESEC_MAC_ODOM;
MACRO_ESEC ESEC_MAC_SDOM;
MACRO_ESEC ESEC_MAC_UP_CLEARANCE;
MACRO_ESEC_MAX ESEC_MAX_ERRNO;
MACRO_ESEC ESEC_NCAV_CONFIG_FAILURE;
MACRO_ESEC ESEC_NOT_MLD;
MACRO_ESEC ESEC_NOT_OWNER;
MACRO_ESEC ESEC_NOT_REG;
MACRO_ESEC ESEC_NO_DECISION;
MACRO_ESEC ESEC_SETATTR_FAIL;
MACRO_ESEC ESEC_UNEXT_FS;
MACRO_ESEC ESEC_WILDCARD_TAG;
MACRO_ESEC ESEC_WILD_DIR_SL;
MACRO_ESEC ESEC_WILD_SUBJ_SL;
MACRO_EAGAIN ESHUTDOWN;
MACRO_ESIZE ESIZE;
MACRO_ESNMP_ACT ESNMP_ACT_ARE_YOU_THERE;
MACRO_ESNMP_ACT ESNMP_ACT_CLEANUP;
MACRO_ESNMP_ACT ESNMP_ACT_COMMIT;
MACRO_ESNMP_ACT ESNMP_ACT_GET;
MACRO_ESNMP_ACT ESNMP_ACT_GETBULK;
MACRO_ESNMP_ACT ESNMP_ACT_GETNEXT;
MACRO_ESNMP_ACT ESNMP_ACT_INFORM;
MACRO_ESNMP_ACT ESNMP_ACT_SET;
MACRO_ESNMP_ACT ESNMP_ACT_UNDO;
MACRO_ESNMP_ALLOC ESNMP_ALLOC_ANY_INDEX;
MACRO_ESNMP_ALLOC ESNMP_ALLOC_CLUSTER;
MACRO_ESNMP_ALLOC ESNMP_ALLOC_NEW_INDEX;
MACRO_ESNMP_ALLOC_STATE ESNMP_ALLOC_STATE_ALLOCAVAIL;
MACRO_ESNMP_ALLOC_STATE ESNMP_ALLOC_STATE_ALLOCINUSE;
MACRO_ESNMP_ALLOC_STATE ESNMP_ALLOC_STATE_ALLOCNOCLU;
MACRO_ESNMP_ALLOC_STATE ESNMP_ALLOC_STATE_ALLOCTYPE;
MACRO_ESNMP_ALLOC_STATE ESNMP_ALLOC_STATE_DEALLOC_REJ;
MACRO_ESNMP_ALLOC_STATE ESNMP_ALLOC_STATE_DONE;
MACRO_ESNMP_ALLOC_STATE ESNMP_ALLOC_STATE_PENDING;
MACRO_ESNMP_ALLOC_STATE ESNMP_ALLOC_STATE_REJ;
MACRO_ESNMP_ALLOC_STATE ESNMP_ALLOC_STATE_SENT;
MACRO_ESNMP_FIRST ESNMP_FIRST_IN_ROW;
MACRO_ESNMP_FIRST ESNMP_LAST_IN_ROW;
MACRO_ESNMP_LIB_BAD ESNMP_LIB_BAD_ALLOC;
MACRO_ESNMP_LIB_BAD_DEALLOC ESNMP_LIB_BAD_DEALLOC;
MACRO_ESNMP_LIB ESNMP_LIB_BAD_REG;
MACRO_ESNMP_LIB_CLOSE ESNMP_LIB_CLOSE;
MACRO_ESNMP_LIB_DUPLICATE ESNMP_LIB_DUPLICATE;
MACRO_ESNMP_LIB_LOST ESNMP_LIB_LOST_CONNECTION;
MACRO_ESNMP_LIB_NOTOK ESNMP_LIB_NOTOK;
MACRO_ESNMP ESNMP_LIB_NO_CONNECTION;
MACRO_ESNMP ESNMP_LIB_OK;
MACRO_ESNMP_MTHD ESNMP_MTHD_commitFailed;
MACRO_ESNMP_MTHD ESNMP_MTHD_genErr;
MACRO_ESNMP_MTHD ESNMP_MTHD_inconsistentName;
MACRO_ESNMP_MTHD ESNMP_MTHD_inconsistentValue;
MACRO_ESNMP_MTHD ESNMP_MTHD_noAccess;
MACRO_ESNMP_MTHD ESNMP_MTHD_noCreation;
MACRO_ESNMP_MTHD ESNMP_MTHD_noError;
MACRO_ESNMP_MTHD ESNMP_MTHD_noSuchInstance;
MACRO_ESNMP_MTHD ESNMP_MTHD_noSuchObject;
MACRO_ESNMP_MTHD ESNMP_MTHD_notWritable;
MACRO_ESNMP_MTHD ESNMP_MTHD_resourceUnavailable;
MACRO_ESNMP_MTHD ESNMP_MTHD_undoFailed;
MACRO_ESNMP_MTHD ESNMP_MTHD_wrongEncoding;
MACRO_ESNMP_MTHD ESNMP_MTHD_wrongLength;
MACRO_ESNMP_MTHD ESNMP_MTHD_wrongType;
MACRO_ESNMP_MTHD ESNMP_MTHD_wrongValue;
MACRO_ESNMP_REG ESNMP_REG_OPT_CLUSTER;
MACRO_ESNMP_REG_STATE ESNMP_REG_STATE_DONE;
MACRO_ESNMP_REG_STATE ESNMP_REG_STATE_PENDING;
MACRO_ESNMP_REG_STATE ESNMP_REG_STATE_REGDUP;
MACRO_ESNMP_REG_STATE ESNMP_REG_STATE_REGNOCLU;
MACRO_ESNMP_REG_STATE ESNMP_REG_STATE_REJ;
MACRO_ESNMP_REG_STATE ESNMP_REG_STATE_SENT;
MACRO_ESNMP_REG_STATE ESNMP_REG_STATE_UNREG_REJ;
MACRO_ESNMP_SET ESNMP_SET_CREATE;
MACRO_ESNMP_SET ESNMP_SET_DELETE;
MACRO_ESNMP_SET ESNMP_SET_MODIFY;
MACRO_ESNMP_SET ESNMP_SET_UNKNOWN;
MACRO_ESNMP_TYPE_ObjectId ESNMP_TYPE_Counter32;
MACRO_ESNMP_TYPE_Counter64 ESNMP_TYPE_Counter64;
MACRO_ESNMP_TYPE_DisplayString ESNMP_TYPE_DisplayString;
MACRO_ESNMP_TYPE_ObjectId ESNMP_TYPE_Gauge32;
MACRO_ESNMP_TYPE ESNMP_TYPE_Integer32;
MACRO_ESNMP_TYPE_ObjectId ESNMP_TYPE_IpAddress;
MACRO_ESNMP_TYPE_ObjectId ESNMP_TYPE_NULL;
MACRO_ESNMP_TYPE_DisplayString ESNMP_TYPE_NsapAddress;
MACRO_ESNMP_TYPE_ObjectId ESNMP_TYPE_ObjectId;
MACRO_ESNMP_TYPE ESNMP_TYPE_OctetString;
MACRO_ESNMP_TYPE_Counter64 ESNMP_TYPE_Opaque;
MACRO_ESNMP_TYPE_ObjectId ESNMP_TYPE_TimeTicks;
MACRO_ESNMP_TYPE_DisplayString ESNMP_TYPE_UInteger32;
MACRO_ESNMP_TYPE_Counter64 ESNMP_TYPE_endOfMibView;
MACRO_ESNMP_TYPE_Counter64 ESNMP_TYPE_noSuchInstance;
MACRO_ESNMP_TYPE_Counter64 ESNMP_TYPE_noSuchObject;
MACRO_EAGAIN ESOCKTNOSUPPORT;
MACRO_EAGAIN ESOFT;
MACRO_ESUCCESS ESPIPE;
MACRO_ESUCCESS ESRCH;
MACRO_EAGAIN ESTALE;
MACRO_ESUCCESS ESUCCESS;
MACRO_ES ES_2P_FAILED;
MACRO_ES ES_2P_SUCCESS;
MACRO_ES ES_AUD_ARCHIVE;
MACRO_ES ES_AUD_DISABLE;
MACRO_ES ES_AUD_DMN_END;
MACRO_ES ES_AUD_DMN_INIT;
MACRO_ES ES_AUD_ENABLE;
MACRO_ES ES_AUD_ERROR;
MACRO_ES ES_AUD_MAX;
MACRO_ES ES_AUD_MODIFY;
MACRO_ES ES_AUD_REPORT;
MACRO_ES ES_AUD_SHUTDOWN;
MACRO_ES ES_AUTOLOG_MULTI;
MACRO_ES ES_AUTOLOG_TIMER;
MACRO_ES ES_DB_INTEGRITY;
MACRO_ES ES_DB_MAX;
MACRO_ES ES_DB_RESOURCE;
MACRO_ES ES_FS_INTEGRITY;
MACRO_ES ES_KERNEL_SHUTDOWN;
MACRO_ES ES_KERNEL_STARTUP;
MACRO_ES ES_LOCK_MAX;
MACRO_ES ES_LOGIN_FAILED;
MACRO_ES ES_LOGIN_LOCAL;
MACRO_ES ES_LOGIN_MAX;
MACRO_ES ES_LOGIN_REMOTE;
MACRO_ES ES_LOGOFF;
MACRO_ES_MAX ES_MAX_CODE;
MACRO_ES ES_MULTI_FAILED;
MACRO_ES ES_PW_CHANGE;
MACRO_ES ES_PW_CHANGE_FAILED;
MACRO_ES ES_PW_CHANGE_NOPRIV;
MACRO_ES ES_PW_MAX;
MACRO_ES ES_SEC_FAILURE;
MACRO_ES ES_SESSION;
MACRO_ES ES_SET_TERM_LOCK;
MACRO_ES ES_SET_TERM_UNLOCK;
MACRO_ES ES_SET_USER_LOCK;
MACRO_ES ES_SET_USER_UNLOCK;
MACRO_ES ES_TERM_LOCK;
MACRO_ES ES_TIME_LOCK;
MACRO_ES ES_TPLOGIN;
MACRO_ES ES_TPLOGOFF;
MACRO_ES ES_USER_LOCK;
MACRO_ES ES_WS_ACCESS_DENIED;
MACRO_ES ES_WS_CHANGE_CLRNCE;
MACRO_ES ES_WS_CUT_PASTE;
MACRO_ES ES_WS_CUT_PASTE_ERROR;
MACRO_ES ES_WS_DISPLAY_CLOSED;
MACRO_ES ES_WS_DISPLAY_OPEN;
MACRO_ES ES_WS_FILE_BOTH_CHANGE;
MACRO_ES ES_WS_FILE_BOTH_FAILED;
MACRO_ES ES_WS_FILE_IL_CHANGE;
MACRO_ES ES_WS_FILE_IL_FAILED;
MACRO_ES ES_WS_FILE_SL_CHANGE;
MACRO_ES ES_WS_FILE_SL_FAILED;
MACRO_ES ES_WS_IIL_CHANGE;
MACRO_ES ES_WS_IL_CHANGE;
MACRO_ES ES_WS_IL_DOWNGRADE;
MACRO_ES ES_WS_IL_FLOAT;
MACRO_ES ES_WS_INSUFF_PRIV;
MACRO_ES ES_WS_MAX;
MACRO_ES ES_WS_PW_CHANGE;
MACRO_ES ES_WS_PW_CHANGE_FAILED;
MACRO_ES ES_WS_PW_NO_AUTH;
MACRO_ES ES_WS_ROLE_ASSUMED;
MACRO_ES ES_WS_ROLE_ENDED;
MACRO_ES ES_WS_RUN_LEVEL_CHANGE;
MACRO_ES ES_WS_SERVER_RESET;
MACRO_ES ES_WS_SL_CHANGE;
MACRO_ES ES_WS_SL_DOWNGRADE;
MACRO_ES ES_WS_TP_MANAGE;
MACRO_ES ES_WS_WINDOW_MANAGE;
MACRO_ES ES_WS_WINDOW_UNMANAGE;
MACRO_ETHERMIN ETHERMIN;
MACRO_ETHERMTU ETHERMTU;
MACRO_ETHERSTATPROC ETHERSTATPROC_GETDATA;
MACRO_ETHERSTATPROC ETHERSTATPROC_GETDSTDATA;
MACRO_ETHERSTATPROC ETHERSTATPROC_GETSRCDATA;
MACRO_ETHERSTATPROC ETHERSTATPROC_OFF;
MACRO_ETHERSTATPROC ETHERSTATPROC_ON;
MACRO_ETHERSTATPROC ETHERSTATPROC_SELECTDST;
MACRO_ETHERSTATPROC ETHERSTATPROC_SELECTLNTH;
MACRO_ETHERSTATPROC ETHERSTATPROC_SELECTPROTO;
MACRO_ETHERSTATPROC ETHERSTATPROC_SELECTSRC;
MACRO_ETHERSTATPROC ETHERSTATPROG;
MACRO_ETHERSTATVERS ETHERSTATVERS;
MACRO_ETHERTYPE ETHERTYPE_ARP;
MACRO_ETHERTYPE_DECnet ETHERTYPE_DECnet;
MACRO_ETHERTYPE ETHERTYPE_IP;
MACRO_ETHERTYPE ETHERTYPE_LAT;
MACRO_ETHERTYPE_MOPDL ETHERTYPE_LBACK;
MACRO_ETHERTYPE_MOPDL ETHERTYPE_MOPDL;
MACRO_ETHERTYPE_MOPRC ETHERTYPE_MOPRC;
MACRO_ETHERTYPE_NS ETHERTYPE_NS;
MACRO_ETHERTYPE_TRAIL ETHERTYPE_NTRAILER;
MACRO_ETHERTYPE ETHERTYPE_PUP;
MACRO_ETHERTYPE_TRAIL ETHERTYPE_TRAIL;
MACRO_ETHERMIN ETHER_BANDWIDTH_100MB;
MACRO_ETHERMIN ETHER_BANDWIDTH_10MB;
MACRO_EAGAIN ETIME;
MACRO_EAGAIN ETIMEDOUT;
MACRO_EAGAIN ETOOMANYREFS;
MACRO_ESUCCESS ETXTBSY;
MACRO_ET_NOEVENT ET_ACCESS_DENIAL;
MACRO_ET_NOEVENT ET_AUDIT;
MACRO_ET_NOEVENT ET_AUTHORIZATION;
MACRO_ET_NOEVENT ET_BOOT_DOWN;
MACRO_ET ET_CORE;
MACRO_ET_NOEVENT ET_DAC_CHANGE;
MACRO_ET ET_DYN;
MACRO_ET ET_EXEC;
MACRO_ET ET_HIPROC;
MACRO_ET_NOEVENT ET_INSUFF_PRIV;
MACRO_ET_NOEVENT ET_IPC;
MACRO_ET_NOEVENT ET_LOGIN;
MACRO_ET ET_LOPROC;
MACRO_ET_NOEVENT ET_NOEVENT;
MACRO_ET ET_NONE;
MACRO_ELFDATANUM ET_NUM;
MACRO_ET_NOEVENT ET_OBJECT_AVAIL;
MACRO_ET_NOEVENT ET_OBJECT_CREAT;
MACRO_ET_NOEVENT ET_OBJECT_DEL;
MACRO_ET_NOEVENT ET_OBJECT_MAP;
MACRO_ET_NOEVENT ET_OBJECT_MOD;
MACRO_ET_NOEVENT ET_OBJECT_UNAV;
MACRO_ET_NOEVENT ET_PRIVILEGE;
MACRO_ET_NOEVENT ET_PROCESS;
MACRO_ET_NOEVENT ET_PROCESS_MOD;
MACRO_ET ET_REL;
MACRO_ET_NOEVENT ET_RES_DENIAL;
MACRO_ET_NOEVENT ET_SEC_LEVEL;
MACRO_ET_NOEVENT ET_SUBSYSTEM;
MACRO_ET_NOEVENT ET_SYS_ADMIN;
MACRO_ET_NOEVENT ET_WINDOW_DATAMOVE;
MACRO_ET_NOEVENT ET_WINDOW_OBJECT;
MACRO_ET_NOEVENT ET_WINDOW_SUBJECT;
MACRO_ET_NOEVENT ET_WINDOW_SYSTEM;
MACRO_EUC EUC_IXLOFF;
MACRO_EUC EUC_IXLON;
MACRO_EUC EUC_MREST;
MACRO_EUC EUC_MSAVE;
MACRO_EUC EUC_OXLOFF;
MACRO_EUC EUC_OXLON;
MACRO_EUC EUC_WGET;
MACRO_EUC EUC_WSET;
MACRO_EUNDEF EUNDEF;
MACRO_EAGAIN EUSERS;
MACRO_EV3 EV3_CPU;
MACRO_EV3 EV45_CPU;
MACRO_EV3 EV4_CPU;
MACRO_EV3 EV56_CPU;
MACRO_EV3 EV5_CPU;
MACRO_EV3 EV67_CPU;
MACRO_EV3 EV68AL_CPU;
MACRO_EV3 EV68CB_CPU;
MACRO_EV3 EV68CX_CPU;
MACRO_EV3 EV6_CPU;
MACRO_CRMOD EVENP;
MACRO_EAGAIN EVERSION;
MACRO_EVM_INT16 EVM_INT16_MAX;
MACRO_EVM_INT16 EVM_INT16_MIN;
MACRO_EVM_INT32 EVM_INT32_MAX;
MACRO_EVM_INT32 EVM_INT32_MIN;
MACRO_EVM_INT64 EVM_INT64_MAX;
MACRO_EVM_INT32 EVM_INT64_MIN;
MACRO_EVM EVM_INT8_MAX;
MACRO_EVM EVM_INT8_MIN;
MACRO_EVM_UINT8 EVM_UINT16_MAX;
MACRO_EVM_UINT8 EVM_UINT32_MAX;
MACRO_EVM_UINT64 EVM_UINT64_MAX;
MACRO_EVM_UINT8 EVM_UINT8_MAX;
MACRO_EV EV_CURRENT;
MACRO_EV EV_NONE;
MACRO_EV_NUM EV_NUM;
MACRO_ESUCCESS EWOULDBLOCK;
MACRO_EXARG_ALIGN EXARG_ALIGN;
MACRO_EXARG EXARG_APPEND;
MACRO_EXARG EXARG_ARGS;
MACRO_EXARG EXARG_AUXADD;
MACRO_EXARG EXARG_AUXDEL;
MACRO_EXARG EXARG_AUXMOD;
MACRO_EXARG EXARG_ENV;
MACRO_EXARG EXARG_LOADER;
MACRO_EXARG EXARG_MOD;
MACRO_EXARG_ALIGN EXARG_NO_ALIGN;
MACRO_EXARG EXARG_PREPEND;
MACRO_EXARG EXARG_SHARGS;
MACRO_EXARG EXARG_SHELL;
MACRO_EXARG EXARG_UFILE;
MACRO_EXC_FALSE EXCEPTION_COLLIDED_UNWIND;
MACRO_EXCEPTION_CONTINUE EXCEPTION_CONTINUE_EXCEPTION;
MACRO_EXCEPTION_CONTINUE EXCEPTION_CONTINUE_SEARCH;
MACRO_EXCEPTION_EXECUTE EXCEPTION_EXECUTE_HANDLER;
MACRO_EXC_FALSE EXCEPTION_EXIT_UNWIND;
MACRO_EXC_FALSE EXCEPTION_NESTED_CALL;
MACRO_EXC_FALSE EXCEPTION_NONCONTINUABLE;
MACRO_EXC_FALSE EXCEPTION_NOSIGMASK;
MACRO_EXC_FALSE EXCEPTION_STACK_INVALID;
MACRO_EXC_FALSE EXCEPTION_TARGET_UNWIND;
MACRO_EXCEPTION EXCEPTION_UNWIND;
MACRO_EXC_FALSE EXCEPTION_UNWINDING;
createmode3 EXCLUSIVE;
MACRO_EXC_INTERNAL EXC_ADA_USER;
MACRO_EXC_INTERNAL EXC_ALL;
MACRO_EXC_ALPHA_BPT EXC_ALPHA_BPT;
MACRO_EXC_ALPHA EXC_ALPHA_INST_TRAP;
MACRO_EXC_ALPHA EXC_ALPHA_SOFT_SEGV;
MACRO_EXC_ALPHA EXC_ALPHA_SOFT_STK;
MACRO_EXC_ALPHA_BPT EXC_ALPHA_TRACE;
MACRO_EXC_BAD EXC_ARITHMETIC;
MACRO_EXC_BAD EXC_AST;
MACRO_EXC_BAD EXC_BAD_ACCESS;
MACRO_EXC_BAD EXC_BAD_INSTRUCTION;
MACRO_EXC_BAD EXC_BREAKPOINT;
MACRO_EXC_INTERNAL EXC_CXX_EXIT;
MACRO_EXC_INTERNAL EXC_CXX_OTHER;
MACRO_EXC_INTERNAL EXC_CXX_USER;
MACRO_EXC_INTERNAL EXC_C_USER;
MACRO_EXC_INTERNAL EXC_DECTHREADS_USER;
MACRO_EXC_BAD EXC_EMULATION;
MACRO_EXC_INTERNAL EXC_FACILITY_END;
MACRO_EXC_FALSE EXC_FALSE;
MACRO_EXC EXC_HANDLING;
MACRO_EXC_STATUS EXC_INFINITE_LOOP_UNWIND;
MACRO_EXC_INTERNAL EXC_INTERNAL;
MACRO_EXC_STATUS EXC_INVALID_ARGUMENT;
MACRO_EXC_STATUS EXC_INVALID_DISPATCHER_CONTEXT;
MACRO_EXC_STATUS EXC_INVALID_EXCEPTION_RECORD;
MACRO_EXC_INTERNAL EXC_JAVA_USER;
MACRO_EXC_STATUS EXC_LOCK_ERROR;
MACRO_EXC_STATUS EXC_LONGJMP_UNWIND;
MACRO_PDSC_SHORT EXC_OSF;
MACRO_EXC_STATUS EXC_OTS_UNWIND;
MACRO_EXC_STATUS EXC_OUT_OF_MEMORY;
MACRO_EXC_INTERNAL EXC_PL1_USER;
MACRO_EXC_STATUS EXC_RUNTIME_FUNCTION_NOT_FOUND;
MACRO_EXC_INTERNAL EXC_SIGNAL;
MACRO_EXC_STATUS EXC_SIGNAL_EXPECTED;
MACRO_EXC_BAD EXC_SOFTWARE;
MACRO_EXC_STATUS EXC_STACK_OVERFLOW;
MACRO_EXC_STATUS EXC_STATUS_INVALID_DISPOSITION;
MACRO_EXC_STATUS EXC_STATUS_NONCONTINUABLE_EXCEPTION;
MACRO_EXC_STATUS EXC_STATUS_UNWIND;
MACRO_EXC_STATUS EXC_UNSUPPORTED;
MACRO_ESUCCESS EXDEV;
MACRO_EXEC_FREEHDL EXEC_FREEHDL;
MACRO_EXEC EXEC_NEEDLDR;
MACRO_EXEC_RECOG EXEC_RECOG;
MACRO_EXEC_VERSION EXEC_VERSION;
MACRO_EXEC_WAIT EXEC_WAIT;
MACRO_EXIT EXIT_FAILURE;
MACRO_EXIT EXIT_SUCCESS;
MACRO_EXPORTFS EXMAXADDRS;
MACRO_EXPANDED EXPANDED_BASIC1_TYPE;
MACRO_EXPANDED EXPANDED_BASIC2_TYPE;
MACRO_EXPANDED_BASIC3 EXPANDED_BASIC3_SIZE;
MACRO_UNNAMED EXPANDED_TOKEN;
MACRO_SUPPLY EXPIRE_TIME;
MACRO_EXPORTFS EXPORTFS_CHECK;
MACRO_EXPORTFS EXPORTFS_CREATE;
MACRO_EXPORTFS EXPORTFS_READ;
MACRO_EXPORTFS EXPORTFS_REMOVE;
MACRO_EXPORTMAPPROC EXPORTMAPPROC_READMAP;
MACRO_EXPORTMAPPROG EXPORTMAPPROG;
MACRO_EXPORTMAPVERS EXPORTMAPVERS;
MACRO_COLL EXPR_NEST_MAX;
MACRO_EXTA EXTA;
MACRO_EXTA EXTB;
MACRO_DAEMON EXTERN_LOG;
MACRO_EX_USAGE EX_CANTCREAT;
MACRO_EX_USAGE EX_CONFIG;
MACRO_EX_USAGE EX_DATAERR;
MACRO_EX_USAGE EX_DB;
MACRO_EX_USAGE EX_IOERR;
MACRO_EX_USAGE EX_NOHOST;
MACRO_EX_USAGE EX_NOINPUT;
MACRO_EX_USAGE EX_NOPERM;
MACRO_EX_USAGE EX_NOUSER;
MACRO_EX EX_OK;
MACRO_EX_USAGE EX_OSERR;
MACRO_EX_USAGE EX_OSFILE;
MACRO_EX_USAGE EX_PROTOCOL;
MACRO_EX_USAGE EX_SOFTWARE;
MACRO_EX_USAGE EX_TEMPFAIL;
MACRO_EX_USAGE EX_UNAVAILABLE;
MACRO_EX_USAGE EX_USAGE;
MACRO_EX EX__BASE;
MACRO_NULL_DEVICE EYETRACKER_DEVICE;
MACRO_E E_ACC;
MACRO_ForgetGravity EastGravity;
$98AACC45B526BF8E56A46567C8EC9FBB EditDone;
$98AACC45B526BF8E56A46567C8EC9FBB EditError;
$98AACC45B526BF8E56A46567C8EC9FBB EditReject;
MACRO_EnableAccess EnableAccess;
MACRO_KeyPress EnterNotify;
MACRO_NoEventMask EnterWindowMask;
char Error[128];
MACRO_EvenOddRule EvenOddRule;
EvmConnectionType_e EvmCONNECTION_LISTEN;
EvmConnectionType_e EvmCONNECTION_POST;
EvmConnectionType_e EvmCONNECTION_SERVICE;
EvmConnControlRequest_e EvmCONN_CHECKSUM_DISABLE;
EvmConnControlRequest_e EvmCONN_CHECKSUM_ENABLE;
EvmConnControlRequest_e EvmCONN_CHECKSUM_IS_ENABLED;
EvmConnControlRequest_e EvmCONN_CLUSTER_HOST_IP_GET;
EvmConnControlRequest_e EvmCONN_CLUSTER_LIST_GET;
EvmConnControlRequest_e EvmCONN_IS_CLUSTER_ALIAS;
EvmConnControlRequest_e EvmCONN_LOCAL_HOST_NAME_GET;
EvmConnControlRequest_e EvmCONN_LOCAL_IP_GET;
EvmConnControlRequest_e EvmCONN_POST_ITEM_MASK_RESET;
EvmConnControlRequest_e EvmCONN_POST_ITEM_MASK_SET;
EvmConnControlRequest_e EvmCONN_POST_NONBLOCK_SET;
EvmConnControlRequest_e EvmCONN_RCV_SZ_GET;
EvmConnControlRequest_e EvmCONN_RCV_SZ_SET;
EvmConnControlRequest_e EvmCONN_REMOTE_HOST_NAME_GET;
EvmConnControlRequest_e EvmCONN_REMOTE_IP_GET;
EvmConnControlRequest_e EvmCONN_REMOTE_IS_ON_CLUSTER;
EvmConnControlRequest_e EvmCONN_SND_SZ_GET;
EvmConnControlRequest_e EvmCONN_SND_SZ_SET;
MACRO_EvmCallbackArgNULL EvmCallbackArgNULL;
MACRO_EvmCallbackNULL EvmCallbackNULL;
EvmStatus_t EvmConnCheck(EvmConnection_t connection, EvmBoolean_t *IOWaiting);
EvmStatus_t EvmConnControl(EvmConnection_t connection, EvmInt32_t request);
EvmStatus_t EvmConnCreate(EvmConnectionType_t type, EvmResponseMode_t responseMode, const EvmTransport_t transport, EvmCallback_t callback, EvmCallbackArg_t callbackArg, EvmConnection_t *connection);
EvmStatus_t EvmConnCreateStep(EvmConnectionType_t a_type, EvmResponseMode_t a_responseMode, const EvmTransport_t *a_transport, const EvmCallback_t a_callback, const EvmCallbackArg_t a_callbackArg, EvmConnection_t *a_conn_p, EvmBoolean_t a_stepwise);
EvmStatus_t EvmConnDestroy(EvmConnection_t connection);
EvmStatus_t EvmConnDispatch(EvmConnection_t connection);
EvmStatus_t EvmConnFdGet(EvmConnection_t connection, EvmFd_t *fd);
EvmStatus_t EvmConnFlush(EvmConnection_t connection);
EvmStatus_t EvmConnRegistrationGet(EvmConnection_t connection, const EvmString_t event_class, EvmPointer_t user_arg);
EvmStatus_t EvmConnSubscribe(EvmConnection_t connection, void *unused, EvmString_t filter_string);
EvmStatus_t EvmConnTemplateScan(EvmConnection_t connection, const EvmString_t filter_string, EvmPointer_t user_arg);
EvmStatus_t EvmConnWait(EvmConnection_t connection, const struct timeval *timeout);
MACRO_EvmConnectionNULL EvmConnectionNULL;
EvmStatus_e EvmERROR_CONNECT;
EvmStatus_e EvmERROR_CONNECTION_LOST;
EvmStatus_e EvmERROR_CONNECTION_REFUSED;
EvmStatus_e EvmERROR_EOF;
EvmStatus_e EvmERROR_EVENT_NOT_VALID;
EvmStatus_e EvmERROR_EVENT_REJECTED;
EvmStatus_e EvmERROR_FILTER_NOT_VALID;
EvmStatus_e EvmERROR_INTERRUPT_LEVEL;
EvmStatus_e EvmERROR_INVALID_ARGUMENT;
EvmStatus_e EvmERROR_INVALID_MESSAGE;
EvmStatus_e EvmERROR_INVALID_OPERATION;
EvmStatus_e EvmERROR_INVALID_VALUE;
EvmStatus_e EvmERROR_INVALID_VARARGS_LIST;
EvmStatus_e EvmERROR_LAST;
EvmStatus_e EvmERROR_NONE;
EvmStatus_e EvmERROR_NOT_IMPLEMENTED;
EvmStatus_e EvmERROR_NOT_INITIALIZED;
EvmStatus_e EvmERROR_NOT_PRESENT;
EvmStatus_e EvmERROR_NOT_SET;
EvmStatus_e EvmERROR_NO_MEMORY;
EvmStatus_e EvmERROR_OPEN;
EvmStatus_e EvmERROR_PARTIAL;
EvmStatus_e EvmERROR_PROTOCOL;
EvmStatus_e EvmERROR_PROTOCOL_MISMATCH;
EvmStatus_e EvmERROR_QUEUED;
EvmStatus_e EvmERROR_QUEUE_FULL;
EvmStatus_e EvmERROR_READ;
EvmStatus_e EvmERROR_RESOURCE;
EvmStatus_e EvmERROR_SELECT;
EvmStatus_e EvmERROR_SEQUENCE;
EvmStatus_e EvmERROR_SERVICE_TERMINATED;
EvmStatus_e EvmERROR_SIGNAL;
EvmStatus_e EvmERROR_SYNCHRONIZATION_FAILURE;
EvmStatus_e EvmERROR_TIMEOUT;
EvmStatus_e EvmERROR_WOULDBLOCK;
EvmStatus_e EvmERROR_WRITE;
MACRO_EvmEXIT EvmEXIT_ACCESS;
MACRO_EvmEXIT EvmEXIT_ARGS;
MACRO_EvmEXIT EvmEXIT_CHANNEL_ERR;
MACRO_EvmEXIT EvmEXIT_CONFIG;
MACRO_EvmEXIT EvmEXIT_CONNECTION;
MACRO_EvmEXIT EvmEXIT_ENV;
MACRO_EvmEXIT EvmEXIT_ERROR;
MACRO_EvmEXIT EvmEXIT_FILTER;
MACRO_EvmEXIT EvmEXIT_IO_ERR;
MACRO_EvmEXIT EvmEXIT_MEMORY;
MACRO_EvmEXIT EvmEXIT_OK;
MACRO_EvmEXIT EvmEXIT_OPEN_ERR;
MACRO_EvmEXIT EvmEXIT_POST;
MACRO_EvmEXIT EvmEXIT_SERVICE;
MACRO_EvmEXIT EvmEXIT_SUBSCRIBE;
MACRO_EvmEXIT EvmEXIT_TIMEOUT;
MACRO_EvmEXIT EvmEXIT_UNKNOWN_HOST;
MACRO_EvmEXIT EvmEXIT_USAGE;
EvmStatus_t EvmEventCreate(EvmEvent_t *event);
EvmStatus_t EvmEventCreateFromList(EvmEvent_t *a_ev_p, EvmItemEntryList_t a_ivlist_p, EvmCount_t a_number);
EvmStatus_t EvmEventCreateVa(EvmEvent_t *a_ev_p, ...);
EvmStatus_t EvmEventDataSizeGet(EvmConstEvent_t a_event, EvmSize_t *a_size);
EvmStatus_t EvmEventDestroy(EvmEvent_t event);
EvmStatus_t EvmEventDump(EvmConstEvent_t event, FILE *fd);
EvmStatus_t EvmEventDup(EvmEvent_t *dupev, EvmEvent_t event);
EvmStatus_t EvmEventFormat(char *buffer, size_t length, EvmString_t show_template, EvmEvent_t event);
EvmStatus_t EvmEventFormatFromTemplate(char *a_buff, size_t a_bufflen, EvmString_t a_template, EvmConstEvent_t a_ev);
MACRO_EvmEventNULL EvmEventNULL;
EvmStatus_t EvmEventNameMatch(const char *pattern, EvmEvent_t event, EvmBoolean_t *match);
EvmStatus_t EvmEventNameMatchStr(const char *pattern, const char *candidate, EvmBoolean_t *match);
EvmStatus_t EvmEventPost(EvmConnection_t connection, const EvmEvent_t event);
EvmStatus_t EvmEventRead(EvmFd_t fd, EvmEvent_t *event);
EvmStatus_t EvmEventValidate(EvmEvent_t event);
EvmStatus_t EvmEventWrite(EvmFd_t fd, const EvmEvent_t event);
EvmBoolean_e EvmFALSE;
EvmStatus_t EvmFilterCreate(EvmFilter_t *filter_evaluator);
EvmStatus_t EvmFilterDestroy(EvmFilter_t filter_evaluator);
EvmStatus_t EvmFilterDirSet(EvmFilter_t a_filter, EvmConstString_t a_directory);
EvmBoolean_t EvmFilterIsFile(const char *filter_string);
MACRO_EvmFilterNULL EvmFilterNULL;
char *EvmFilterReadFile(const char *filter_string);
EvmStatus_t EvmFilterSet(EvmFilter_t filter_evaluator, const EvmString_t filter_string);
EvmStatus_t EvmFilterTest(EvmFilter_t filter_evaluator, EvmEvent_t event, EvmBoolean_t *matchFlag);
MACRO_EvmI18N EvmI18N_MSG_ID_NONE;
MACRO_EvmI18N EvmI18N_SET_DEFAULT;
EvmItemId_e EvmITEM_CLUSTER_EVENT;
EvmItemId_e EvmITEM_CLUSTER_IP;
EvmItemId_e EvmITEM_CLUSTER_NAME;
EvmItemId_e EvmITEM_EVENT_ID;
EvmItemId_e EvmITEM_FIRST;
EvmItemId_e EvmITEM_FORMAT;
EvmItemId_e EvmITEM_HDR_EXT_SIZE;
EvmItemId_e EvmITEM_HOST_IP;
EvmItemId_e EvmITEM_HOST_NAME;
EvmItemId_e EvmITEM_I18N_CATALOG;
EvmItemId_e EvmITEM_I18N_MSG_ID;
EvmItemId_e EvmITEM_I18N_SET_ID;
EvmItemId_e EvmITEM_INTERNAL_USE_FIRST;
EvmItemId_e EvmITEM_KERNEL_ONLY;
EvmItemId_e EvmITEM_LAST_TIMESTAMP;
EvmItemId_e EvmITEM_MAX;
EvmItemId_e EvmITEM_MEMBER_ID;
EvmItemId_e EvmITEM_NAME;
EvmItemId_e EvmITEM_NONE;
EvmItemId_e EvmITEM_PID;
EvmItemId_e EvmITEM_PPID;
EvmItemId_e EvmITEM_PREDEFINED_MAX;
EvmItemId_e EvmITEM_PRIORITY;
EvmItemId_e EvmITEM_REF;
EvmItemId_e EvmITEM_REPEAT_COUNT;
EvmItemId_e EvmITEM_TIMESTAMP;
EvmItemId_e EvmITEM_UNUSED_1;
EvmItemId_e EvmITEM_USER_NAME;
EvmItemId_e EvmITEM_VAR;
MACRO_EvmI18N EvmIpAddress_UNDEFINED;
EvmConstString_t EvmItemDescription(EvmItemId_t a_itemid);
EvmStatus_t EvmItemEntryListSet(EvmEvent_t a_ev_p, EvmItemEntryList_t a_ivlist_p, EvmCount_t a_number);
EvmStatus_t EvmItemGet(EvmEvent_t event, EvmItemId_t item_id, EvmItemValue_t *item_value);
EvmStatus_t EvmItemIdFromName(EvmConstString_t a_itemname, EvmItemId_t *a_itemid);
void EvmItemListFree(EvmItemList_t itemList);
EvmStatus_t EvmItemListGet(EvmEvent_t event, EvmCount_t *item_count, EvmItemList_t *itemList);
MACRO_EvmItemListNULL EvmItemListNULL;
MACRO_EvmItemMaskALL EvmItemMaskALL;
EvmStatus_t EvmItemNameFromId(EvmItemId_t a_itemid, EvmConstString_t *a_name);
EvmStatus_t EvmItemRelease(EvmItemId_t item_id, EvmItemValue_t item_value);
EvmStatus_t EvmItemSet(EvmEvent_t event, EvmItemId_t item_id, EvmItemValue_t item_value);
EvmStatus_t EvmItemSetVa(EvmEvent_t a_ev_p, ...);
MACRO_EvmPRIO_ALERT EvmPRIO_ALERT;
MACRO_EvmPRIO_CRITICAL EvmPRIO_CRITICAL;
MACRO_EvmPRIO_INFORMATION EvmPRIO_DEBUG;
MACRO_EvmPRIO EvmPRIO_EMERGENCY;
MACRO_EvmPRIO_ERROR EvmPRIO_ERROR;
MACRO_EvmPRIO_INFORMATION EvmPRIO_INFORMATION;
MACRO_EvmPRIO_MAX EvmPRIO_MAX;
MACRO_EvmPRIO_NOTICE EvmPRIO_NOTICE;
MACRO_EvmPRIO_WARNING EvmPRIO_WARNING;
EvmCallbackReason_e EvmREASON_EVENTS_MISSED;
EvmCallbackReason_e EvmREASON_EVENT_DELIVERED;
EvmCallbackReason_e EvmREASON_KBUFF_OVERFLOW;
EvmCallbackReason_e EvmREASON_POST_COMPLETE;
EvmCallbackReason_e EvmREASON_REGISTRATION_DELIVERED;
EvmCallbackReason_e EvmREASON_SUBSCRIBE_COMPLETE;
EvmCallbackReason_e EvmREASON_TEMPLATE_INFO_DELIVERED;
EvmResponseMode_e EvmRESPONSE_CALLBACK;
EvmResponseMode_e EvmRESPONSE_IGNORE;
EvmResponseMode_e EvmRESPONSE_WAIT;
EvmStatus_t EvmSrvMessageGet(EvmConnection_t connection, EvmEvent_t *event, char **msg, char **errmsg, EvmInt32_t *info);
EvmStatus_t EvmSrvStart(char *service_name, char *arg_string, EvmTransport_t *transport, EvmConnection_t *connection);
EvmStatus_t EvmStatusTextGet(EvmStatus_t evm_status, EvmString_t buffer, EvmSize_t nBytes);
EvmTransportType_e EvmTRANSPORT_DOMAIN_SOCKET;
EvmTransportType_e EvmTRANSPORT_TCPIP;
EvmBoolean_e EvmTRUE;
EvmVarType_e EvmTYPE_BOOLEAN;
EvmVarType_e EvmTYPE_CHAR;
EvmVarType_e EvmTYPE_DOUBLE;
EvmVarType_e EvmTYPE_FIRST;
EvmVarType_e EvmTYPE_FLOAT;
EvmVarType_e EvmTYPE_INT16;
EvmVarType_e EvmTYPE_INT32;
EvmVarType_e EvmTYPE_INT64;
EvmVarType_e EvmTYPE_MAX;
EvmVarType_e EvmTYPE_NONE;
EvmVarType_e EvmTYPE_OPAQUE;
EvmVarType_e EvmTYPE_STRING;
EvmVarType_e EvmTYPE_UINT16;
EvmVarType_e EvmTYPE_UINT32;
EvmVarType_e EvmTYPE_UINT64;
EvmVarType_e EvmTYPE_UINT8;
MACRO_EvmTransportNULL EvmTransportNULL;
EvmStatus_t EvmVarGet(EvmEvent_t event, EvmVarName_t v_name, EvmVarStruct_t *var);
EvmStatus_t EvmVarInit(struct EvmVarStruct_s *a_var_p, EvmVarName_t a_name_p, EvmVarType_t a_type, const EvmVarValue_t a_value, EvmI18NMsgId_t a_msgId, EvmSize_t a_valLen);
EvmStatus_t EvmVarListFree(EvmVarList_t varlist);
EvmStatus_t EvmVarListGet(EvmEvent_t event, EvmCount_t *var_count, EvmVarList_t *varList);
MACRO_EvmVarListNULL EvmVarListNULL;
EvmStatus_t EvmVarRelease(EvmVarStruct_t *var);
EvmStatus_t EvmVarSet(EvmEvent_t event, EvmVarName_t v_name, EvmVarType_t type, EvmVarValue_t item_value, EvmI18NMsgId_t msg_id, EvmSize_t size);
_EXCEPTION_DISPOSITION ExceptionCollidedUnwind;
_EXCEPTION_DISPOSITION ExceptionContinueExecution;
_EXCEPTION_DISPOSITION ExceptionContinueSearch;
_EXCEPTION_DISPOSITION ExceptionNestedException;
MACRO_KeyPress Expose;
MACRO_NoEventMask ExposureMask;
MACRO_F1 F1;
MACRO_F1 F10;
MACRO_F1 F11;
MACRO_F1 F12;
MACRO_F1 F14;
MACRO_F1 F17;
MACRO_F1 F18;
MACRO_F1 F19;
MACRO_F1 F2;
MACRO_F1 F20;
MACRO_F1 F3;
MACRO_F1 F4;
MACRO_F1 F5;
MACRO_F1 F6;
MACRO_F1 F7;
MACRO_F1 F8;
MACRO_F1 F9;
MACRO_NOT FAILED;
MACRO_FAILURE FAILURE;
MACRO_FALSE FALSE;
MACRO_FAPPEND FAPPEND;
MACRO_FAPPEND FASYNC;
MACRO_NO_ERROR FATAL_ERROR;
MACRO_FBOMAGIC FBOMAGIC;
$F2011E9C2552B036D6D2F02AACD7A7DD FBRA;
MACRO_TEGC FBUS_INTREQ_REG;
MACRO_FCACHE FCACHE;
MACRO_FCNTLCANT FCNTLCANT;
MACRO_FAPPEND FCREAT;
MACRO_CONSOLE FC_DTYPE;
MACRO_VDATA FDATA;
MACRO_CTR FDDIDECEXT_MIB;
MACRO_FDDIFC FDDIFC_C;
MACRO_FDDIFC FDDIFC_F;
MACRO_FDDIFC_IMP FDDIFC_IMP_ASYNC;
MACRO_FDDIFC_IMP FDDIFC_IMP_SYNC;
MACRO_FDDIFC FDDIFC_L;
MACRO_FDDIFC_LLC FDDIFC_LLC_ASYNC;
MACRO_FDDIFC_LLC_PRI0 FDDIFC_LLC_PRI0;
MACRO_FDDIFC_LLC_PRI0 FDDIFC_LLC_PRI1;
MACRO_FDDIFC_LLC_PRI0 FDDIFC_LLC_PRI2;
MACRO_FDDIFC_LLC_PRI0 FDDIFC_LLC_PRI3;
MACRO_FDDIFC_LLC_PRI0 FDDIFC_LLC_PRI4;
MACRO_FDDIFC_LLC_PRI0 FDDIFC_LLC_PRI5;
MACRO_FDDIFC_LLC_PRI0 FDDIFC_LLC_PRI6;
MACRO_FDDIFC_LLC_PRI0 FDDIFC_LLC_PRI7;
MACRO_FDDIFC_LLC FDDIFC_LLC_SYNC;
MACRO_FDDIFC_SMT_0 FDDIFC_MAC;
MACRO_FDDIFC_SMT FDDIFC_MAC_BEACON;
MACRO_FDDIFC_SMT FDDIFC_MAC_CLAIM;
MACRO_FDDIPH2 FDDIFC_NRT;
MACRO_FDDIPH2 FDDIFC_RT;
MACRO_FDDIFC_SMT_0 FDDIFC_SMT;
MACRO_FDDIFC_SMT FDDIFC_SMT_INFO;
MACRO_FDDIFC_SMT FDDIFC_SMT_NSA;
MACRO_FDDIPH2 FDDIFC_VOID;
MACRO_FDDIFC FDDIFC_Z;
MACRO_FDDILLCMIM FDDILLCMIM;
MACRO_FDDIMACMIM FDDIMACMIM;
MACRO_FDDIFC_LLC_PRI0 FDDIMAX;
MACRO_FDDIFC_LLC_PRI0 FDDIMEDIAMTU;
MACRO_CTR FDDIMIB_ATTA;
MACRO_CTR FDDIMIB_MAC;
MACRO_CTR FDDIMIB_PATH;
MACRO_CTR FDDIMIB_PORT;
MACRO_CTR FDDIMIB_PORT_B;
MACRO_CTR FDDIMIB_SMT;
MACRO_FDDIFC_LLC_PRI0 FDDIMTU;
MACRO_FDDIPH0 FDDIPH0;
MACRO_FDDIPH0 FDDIPH1;
MACRO_FDDIPH2 FDDIPH2;
MACRO_FDDILLCMIM FDDISMTMIM;
MACRO_CTR FDDISMT_MIB_MAC;
MACRO_CTR FDDISMT_MIB_PATH;
MACRO_CTR FDDISMT_MIB_PORT;
MACRO_CTR FDDISMT_MIB_PORT_B;
MACRO_CTR FDDISMT_MIB_SMT;
MACRO_FDDIMACMIM FDDI_BANDWIDTH_100MB;
MACRO_CTR FDDI_STATUS;
MACRO_FNONBLOCK FDEFER;
MACRO_SET FDEL_PROPLIST_SYSCALL;
MACRO_FDFS_DIRBLKSZ FDFS_DIRBLKSZ;
MACRO_FDFS FDFS_MAJOR;
MACRO_FCACHE FDIRECTIO;
MACRO_FDSYNC FDSYNC;
MACRO_FDX FDX_DIS;
MACRO_FDX FDX_ENB;
MACRO_FD_CLOEXEC FD_CLOEXEC;
void FD_CLR(int fd, fd_set *fdset);
int FD_ISSET(int fd, fd_set *fdset);
MACRO_FD FD_MAX_NOFILE;
void FD_SET(int fd, fd_set *fdset);
MACRO_FD_SETSIZE FD_SETSIZE;
void FD_ZERO(fd_set *fdset);
MACRO_NULLPROC FEEDBACK_OK;
MACRO_NULLPROC FEEDBACK_REXMIT1;
MACRO_FEXCL FEXCL;
MACRO_FREAD FEXLOCK;
MACRO_ORDINARY FF;
MACRO_FF0 FF0;
MACRO_FF0 FF1;
MACRO_FREAD FFCNTL;
MACRO_CR0 FFDLY;
MACRO_FFM FFM_CLONE;
MACRO_FFM FFM_FD;
MACRO_SET FGET_PROPLIST_SYSCALL;
MACRO_CONSOLE FG_DTYPE;
MACRO_SHOWFH FHSIZE;
MACRO_FHSIZE3 FHSIZE3;
MACRO_AREGTYPE FIFOTYPE;
MACRO_SHOWFH FILEHANDLE_PROG;
MACRO_FILEHANDLE FILEHANDLE_VERS;
MACRO_FOPEN FILENAME_MAX;
MACRO_FILESET FILESET_NAME_SZ;
stable_how FILE_SYNC;
$EDBA1914F16BC538415B0E0A3A3FD3BB FIND;
MACRO_SHIFT_UPDATE FINEUSEC;
MACRO_FIOCLEX FIOCLEX;
MACRO_FIOCLEX FIONCLEX;
MACRO_FIRST FIRST;
MACRO_ANY2 FIRST_BUTTON;
MACRO_ZERO FIVE;
MACRO_FIXSO FIXSO_TOOLVER;
MACRO_SIARESINVIS FLAG_MAX;
MACRO_FLDUSED FLDUSED;
MACRO_FLOAT FLOAT_TOKEN;
MACRO_FLTIOVF FLTACCESS;
MACRO_FLTSTACK FLTALIGN;
MACRO_USERFAULT FLTARITH;
MACRO_FLTIOVF FLTBOUNDS;
MACRO_FLTSTACK FLTBPT;
MACRO_FLTTRACE FLTBUGCK;
MACRO_FLTFPE FLTFPE;
MACRO_FLTTRACE FLTGENT;
MACRO_FLTILL FLTILL;
MACRO_FLTIOVF FLTIOVF;
MACRO_FLTIZDIV FLTIZDIV;
MACRO_FLTIZDIV FLTOPDEC;
MACRO_FLTIOVF FLTPAGE;
MACRO_FLTPRIV FLTPRIV;
MACRO_FLTSET FLTSET_SZ;
MACRO_FLTSTACK FLTSTACK;
MACRO_FLTTRACE FLTTRACE;
MACRO_FLT FLT_DIG;
MACRO_FLT_ROUNDS FLT_MANT_DIG;
MACRO_FLT_MAX_10 FLT_MAX_10_EXP;
MACRO_FLT_MAX FLT_MAX_EXP;
MACRO_FLT_MIN_10 FLT_MIN_10_EXP;
MACRO_FLT_MIN FLT_MIN_EXP;
MACRO_FLT_ROUNDS FLT_RADIX;
MACRO_FLT_ROUNDS FLT_ROUNDS;
MACRO_FLUSHR FLUSHBAND;
MACRO_ECHOKE FLUSHO;
MACRO_FLUSHR FLUSHR;
MACRO_FLUSHR FLUSHRW;
MACRO_FLUSHR FLUSHW;
MACRO_GET FLUSH_AUD_BUF;
MACRO_FL FL_STATMASK;
MACRO_FREAD FMARK;
MACRO_FREAD FMASK;
$F2011E9C2552B036D6D2F02AACD7A7DD FMEM;
MACRO_FMNAMESZ FMNAMESZ;
MACRO_FMT16BIT FMT16BIT;
unsigned __int64 FMT8BIT;
MACRO_CLNAME FNAME_SZ;
MACRO_FNDELAY FNDELAY;
MACRO_FNM_NOMATCH FNM_EPERIOD;
MACRO_FNM_NOMATCH FNM_ESLASH;
MACRO_FNM FNM_NOESCAPE;
MACRO_FNM_NOMATCH FNM_NOMATCH;
MACRO_FNM FNM_PATHNAME;
MACRO_FNM FNM_PERIOD;
MACRO_FNM FNM_QUOTE;
MACRO_FNONBLOCK FNONBLOCK;
MACRO_FN FN_BREAK;
MACRO_FN FN_CONT;
MACRO_FN FN_DEPOS;
MACRO_FN_DPAINC FN_DPAINC;
MACRO_FN FN_EXAM;
MACRO_FN FN_HALTED;
MACRO_FN FN_MAINC;
MACRO_FN_Q1 FN_Q1;
MACRO_FN_Q1 FN_Q2;
MACRO_FN_Q1 FN_Q3;
MACRO_FN_Q1 FN_Q4;
MACRO_FN FN_RESET;
MACRO_FN FN_START;
MACRO_FN FN_STEP;
MACRO_FN_DPAINC FN_TMAINC;
MACRO_NULL_DEVICE FOOTMOUSE_DEVICE;
$F2011E9C2552B036D6D2F02AACD7A7DD FOP;
MACRO_FNONBLOCK FOPEN;
MACRO_FOPEN FOPEN_MAX;
MACRO_DEFAULT_GRAPHICS FORCE_CALLBACK_CONS;
MACRO_DEFAULT_GRAPHICS FORCE_GENERIC_CONS;
MACRO_DEFAULT_GRAPHICS FORCE_NO_GRAPHICS;
MACRO_NO_GCS FOREGROUND;
MACRO_ACL_OTHER FOREIGN_GROUP;
MACRO_OF FOREIGN_OBJ;
MACRO_ACL_OTHER FOREIGN_OTHER;
MACRO_ACL_OTHER FOREIGN_USER;
MACRO_FORM FORM_C;
MACRO_FORM FORM_N;
MACRO_FORM FORM_T;
$D44E3C4FF335410EC7120A246FFC2300 FORWARD_QUERY;
MACRO_FOR FOR_FPE_FLAGS;
MACRO_FOR_K_FPE FOR_K_FPE_CNT_ARRAY_MAX;
MACRO_FOR_K FOR_K_FPE_CNT_DIVIDE0;
MACRO_FOR_K FOR_K_FPE_CNT_INVALID;
MACRO_FOR_K FOR_K_FPE_CNT_OVERFLOW;
MACRO_FOR FOR_K_FPE_CNT_UNDERFLOW;
MACRO_ZERO FOUR;
MACRO_FPE_INTOVF FPE_DECOVF_TRAP;
MACRO_FPE FPE_FLTDIV;
MACRO_FPE_INTOVF FPE_FLTDIV_FAULT;
MACRO_FPE_INTOVF FPE_FLTDIV_TRAP;
MACRO_FPE FPE_FLTINV;
MACRO_FPE FPE_FLTOVF;
MACRO_FPE_INTOVF FPE_FLTOVF_FAULT;
MACRO_FPE_INTOVF FPE_FLTOVF_TRAP;
MACRO_FPE FPE_FLTRES;
MACRO_FPE FPE_FLTSUB;
MACRO_FPE FPE_FLTUND;
MACRO_FPE_INTOVF FPE_FLTUND_FAULT;
MACRO_FPE_INTOVF FPE_FLTUND_TRAP;
MACRO_FPE_INTOVF FPE_GENTRAP;
MACRO_FPE_INTOVF FPE_HPARITH_TRAP;
MACRO_FPE_INTOVF FPE_ILLEGAL_SHADOW_TRAP;
MACRO_FPE_INTOVF FPE_INEXACT_FAULT;
MACRO_FPE FPE_INTDIV;
MACRO_FPE_INTOVF FPE_INTDIV_TRAP;
MACRO_FPE FPE_INTOVF;
MACRO_FPE_INTOVF FPE_INTOVF_FAULT;
MACRO_FPE_INTOVF FPE_INTOVF_TRAP;
MACRO_FPE_INTOVF FPE_INVALID_FAULT;
MACRO_FPE_M FPE_M_ABRUPT_DIV0;
MACRO_FPE_M FPE_M_ABRUPT_DMZ;
MACRO_FPE_M FPE_M_ABRUPT_INV;
MACRO_FPE_M FPE_M_ABRUPT_OVF;
MACRO_FPE_M FPE_M_ABRUPT_UND;
MACRO_FPE_M FPE_M_MSG_DIV0;
MACRO_FPE_M FPE_M_MSG_INV;
MACRO_FPE_M FPE_M_MSG_OVF;
MACRO_FPE_M FPE_M_MSG_UND;
MACRO_FPE_M FPE_M_RESERVED_00;
MACRO_FPE_M FPE_M_RESERVED_01;
MACRO_FPE_M FPE_M_RESERVED_02;
MACRO_FPE_M FPE_M_RESERVED_03;
MACRO_FPE_M FPE_M_RESERVED_04;
MACRO_FPE_M FPE_M_RESERVED_05;
MACRO_FPE_M FPE_M_RESERVED_06;
MACRO_FPE_M FPE_M_RESERVED_07;
MACRO_FPE_M FPE_M_RESERVED_09;
MACRO_FPE_M FPE_M_RESERVED_10;
MACRO_FPE_M FPE_M_RESERVED_11;
MACRO_FPE_M FPE_M_RESERVED_12;
MACRO_FPE_M FPE_M_RESERVED_13;
MACRO_FPE_M FPE_M_RESERVED_14;
MACRO_FPE_M FPE_M_RESERVED_15;
MACRO_FPE_M FPE_M_RESERVED_16;
MACRO_FPE_M FPE_M_RESERVED_17;
MACRO_FPE_M FPE_M_RESERVED_18;
MACRO_FPE_M FPE_M_RESERVED_19;
MACRO_FPE_M FPE_M_TRAP_DIV0;
MACRO_FPE_M FPE_M_TRAP_INV;
MACRO_FPE_M FPE_M_TRAP_OVF;
MACRO_FPE_M FPE_M_TRAP_UND;
MACRO_FPE_INTOVF FPE_SUBRNG_TRAP;
MACRO_FPE_INTOVF FPE_UNIMP_FAULT;
MACRO_GPR2 FPR_BASE;
MACRO_FPSWC FPSAPAD;
MACRO_FPSWC FPSCSR;
MACRO_FPSFHIGH FPSFHIGH;
MACRO_FPSFHIGH FPSFLOW;
MACRO_FPSWC FPSFN;
MACRO_FPSWC FPSHAD;
MACRO_FPSLOW FPSHIGH;
MACRO_FPSWC FPSLITE;
MACRO_FPSLOW FPSLOW;
MACRO_FPSNREG FPSNREG;
MACRO_FPSWC FPSRSET;
MACRO_FPSWC FPSSWTCH;
MACRO_FPSWC FPSWC;
MACRO_FP_PLUS_INF FP_MINUS_DENORM;
MACRO_FP_PLUS_INF FP_MINUS_INF;
MACRO_FP_PLUS FP_MINUS_NORM;
MACRO_FP_PLUS FP_MINUS_ZERO;
MACRO_FP_SNAN FP_NEG_DENORM;
MACRO_FP_SNAN FP_NEG_INF;
MACRO_FP_SNAN FP_NEG_NORM;
MACRO_FP_SNAN FP_NEG_ZERO;
MACRO_FP_PLUS_INF FP_PLUS_DENORM;
MACRO_FP_PLUS_INF FP_PLUS_INF;
MACRO_FP_PLUS FP_PLUS_NORM;
MACRO_FP_PLUS FP_PLUS_ZERO;
MACRO_FP_SNAN FP_POS_DENORM;
MACRO_FP_SNAN FP_POS_INF;
MACRO_FP_SNAN FP_POS_NORM;
MACRO_FP_SNAN FP_POS_ZERO;
MACRO_FP_SNAN FP_QNAN;
MACRO_FP FP_RND_RM;
MACRO_FP FP_RND_RN;
MACRO_FP FP_RND_RP;
MACRO_FP FP_RND_RZ;
MACRO_FP_SNAN FP_SNAN;
MACRO_FRACTION FRACTION;
MACRO_FREAD FREAD;
MACRO_FDSYNC FRSYNC;
MACRO_FSBadRequest FSBadAccessContext;
MACRO_FSBadRequest FSBadAlloc;
MACRO_FSBadRequest FSBadEventMask;
MACRO_FSBadRequest FSBadFont;
MACRO_FSBadRequest FSBadFormat;
MACRO_FSBadRequest FSBadIDChoice;
MACRO_FSBadRequest FSBadImplementation;
MACRO_FSBadRequest FSBadLength;
MACRO_FSBadRequest FSBadName;
MACRO_FSBadRequest FSBadRange;
MACRO_FSBadRequest FSBadRequest;
MACRO_FSBadRequest FSBadResolution;
MACRO_FSHIFT FSCALE;
MACRO_SET FSET_PROPLIST_SYSCALL;
MACRO_FSF3 FSF3_CANSETTIME;
MACRO_FSF3 FSF3_HOMOGENEOUS;
MACRO_FSF3 FSF3_LINK;
MACRO_FSF3 FSF3_SYMLINK;
char **FSGetCatalogues();
MACRO_FSHIFT FSHIFT;
MACRO_FREAD FSHLOCK;
MACRO_KeepAlive FSLASTEvent;
MACRO_FSL_DVNMDSK_BDEV FSL_DVNMDSK_BDEV_LEN;
MACRO_FSL_DVNMDSK FSL_DVNMDSK_CDEV_LEN;
MACRO_FSL_LSM FSL_LSM_BDEV_LEN;
MACRO_FSL FSL_LSM_CDEV_LEN;
char **FSListCatalogues();
char **FSListExtensions();
char **FSListFonts();
char **FSListFontsWithXInfo();
__int64 FSMaxRequestSize();
Font FSOpenBitmapFont();
FSServer *FSOpenServer();
int FSQueryExtension();
char *FSServerName();
int (*FSSetAfterFunction())();
MACRO_CatalogueChangeNotifyMask FSSuccess;
int (*FSSynchronize())();
MACRO_FSTYPSZ FSTYPSZ;
MACRO_FAPPEND FSYNC;
MACRO_FS_UNUSED FS_ADVFS;
MACRO_FS FS_BITS;
MACRO_FS_UNUSED FS_BSDFFS;
MACRO_FS_UNUSED FS_CDFS;
MACRO_FS FS_CLRI;
MACRO_FS_UNUSED FS_CNX;
MACRO_FS_Noop FS_CloseFont;
MACRO_FS_Noop FS_CreateAC;
MACRO_FS_UNUSED FS_DB;
MACRO_FS FS_DINODE;
MACRO_FS_UNUSED FS_DRD;
MACRO_FS FS_DS;
MACRO_FS FS_END;
MACRO_FS_Reply FS_Error;
MACRO_FS_Reply FS_Event;
MACRO_FS FS_FINDEX;
MACRO_FS_Noop FS_FreeAC;
MACRO_FS_Noop FS_GetCatalogues;
MACRO_FS_Noop FS_GetEventMask;
MACRO_FS_Noop FS_GetResolution;
MACRO_FS_UNUSED FS_LSMnopriv;
MACRO_FS_UNUSED FS_LSMpriv;
MACRO_FS_UNUSED FS_LSMpubl;
MACRO_FS_UNUSED FS_LSMsimp;
MACRO_FS_Noop FS_ListCatalogues;
MACRO_FS_Noop FS_ListExtensions;
MACRO_FS_Noop FS_ListFonts;
MACRO_FS_Noop FS_ListFontsWithXInfo;
MACRO_FS FS_NAME;
MACRO_FS_NMLN FS_NMLN;
MACRO_FS_Noop FS_Noop;
MACRO_FS FS_OINODE;
MACRO_FS FS_ONAME;
MACRO_FS_Noop FS_OpenBitmapFont;
MACRO_FS2 FS_PROTOCOL;
MACRO_FS2 FS_PROTOCOL_MINOR;
MACRO_FS_Noop FS_QueryExtension;
MACRO_FS_Noop FS_QueryXBitmaps16;
MACRO_FS_Noop FS_QueryXBitmaps8;
MACRO_FS_Noop FS_QueryXExtents16;
MACRO_FS_Noop FS_QueryXExtents8;
MACRO_FS_Noop FS_QueryXInfo;
MACRO_FS_UNUSED FS_RAW;
MACRO_FS_Reply FS_Reply;
MACRO_FS_UNUSED FS_SWAP;
MACRO_FS_UNUSED FS_SYSV;
MACRO_FS_Noop FS_SetAuthorization;
MACRO_FS_Noop FS_SetCatalogues;
MACRO_FS_Noop FS_SetEventMask;
MACRO_FS_Noop FS_SetResolution;
MACRO_FS_UNUSED FS_UNUSED;
MACRO_FS_UNUSED FS_V6;
MACRO_FS_UNUSED FS_V7;
MACRO_FS_UNUSED FS_V71K;
MACRO_FS_UNUSED FS_V8;
MACRO_FS FS_VOLEND;
MACRO_FS FS_VOLUME;
MACRO_FTLACT FTLACT;
MACRO_FTLCLN FTLCLN;
MACRO_FTLEXIT FTLEXIT;
MACRO_FTLFUNC FTLFUNC;
MACRO_FTLJMP FTLJMP;
MACRO__FATAL FTLMSG;
MACRO_FTLRET FTLRET;
MACRO_FAPPEND FTRUNC;
MACRO_FTW_PHYS FTW_CHDIR;
MACRO_FTW FTW_D;
MACRO_FTW_PHYS FTW_DEPTH;
MACRO_FTW FTW_DNR;
MACRO_FTW_DP FTW_DP;
MACRO_FTW FTW_F;
MACRO_FTW_PHYS FTW_MOUNT;
MACRO_FTW FTW_NS;
MACRO_FTW_PHYS FTW_PHYS;
MACRO_FTW FTW_SL;
MACRO_ARRAY FUNCTION_TOKEN;
MACRO_FREAD FWRITE;
MACRO_FREAD FWRITE_DATA;
MACRO_FREAD FWRITE_METADATA;
MACRO_FS FXLEN;
MACRO_F_NODF F_64INT;
MACRO_F_80186 F_80186;
MACRO_F_80186 F_80286;
MACRO_F_UNLKSYS F_ADVFS_OP;
MACRO_F_RELFLG F_AR16WR;
MACRO_F_RELFLG F_AR32W;
MACRO_F_RELFLG F_AR32WR;
MACRO_F_BM32MAU F_BM32B;
MACRO_F_NODF F_BM32ID;
MACRO_F_BM32MAU F_BM32MAU;
MACRO_F_BM32MAU F_BM32RST;
MACRO_F_NON F_CALL_SHARED;
MACRO_F_CDIR F_CDIR;
MACRO_F_RGETLK F_CNVT;
MACRO_F_FILE F_CONTAINED;
MACRO_FD_CLOEXEC F_DUPFD;
MACRO_F_RELFLG F_EXEC;
MACRO_F_FILE F_FILE_ONLY;
MACRO_ADVFS_ASYNC F_GETCACHEPOLICY;
MACRO_F_GETFD F_GETFD;
MACRO_F_GETFD F_GETFL;
MACRO_F_GETFD F_GETLK;
MACRO_ADVFS_ASYNC F_GETMAP;
MACRO_F_GETOWN F_GETOWN;
MACRO_F_UNLKSYS F_GETTIMES;
MACRO_ADVFS_ASYNC F_GRACE_END;
MACRO_ADVFS_ASYNC F_GRACE_START;
MACRO_F_RELFLG F_LNNO;
MACRO_F_ULOCK F_LOCK;
MACRO_F_LOMAP F_LOMAP;
MACRO_F_RELFLG F_LSYMS;
MACRO_F_RELFLG F_MINMAL;
MACRO_F_MIPS_NO F_MIPS_CALL_SHARED;
MACRO_F_MIPS_NO F_MIPS_NO_REMOVE;
MACRO_F_MIPS_NO F_MIPS_NO_REORG;
MACRO_F_MIPS_NO F_MIPS_NO_SHARED;
MACRO_F_MIPS_NO F_MIPS_SHARABLE;
MACRO_F_MIPS F_MIPS_SHARE_MASK;
MACRO_F_CDIR F_MMAP;
MACRO_F_NODF F_NODF;
MACRO_F_FILE F_NOLINK;
MACRO_F_NON F_NON_SHARED;
MACRO_F_NO F_NO_CALL_SHARED;
MACRO_F_NON F_NO_REMOVE;
MACRO_F_NON F_NO_REORG;
MACRO_F_NO F_NO_SHARED;
MACRO_F_OK F_OK;
MACRO_F_CDIR F_OPEN;
MACRO_F_RELFLG F_PATCH;
MACRO_F_CDIR F_PDIR;
MACRO_FCACHE F_PURGEFINISH;
MACRO_F_UNLKSYS F_PURGEFS;
MACRO_F_UNLKSYS F_PURGENFS;
MACRO_FCACHE F_PURGESTART;
MACRO_F_CDIR F_RDIR;
MACRO_F F_RDLCK;
MACRO_F_RELFLG F_RELFLG;
MACRO_F_RGETLK F_RGETLK;
MACRO_F_RGETLK F_RSETLK;
MACRO_F_RGETLK F_RSETLKW;
MACRO_F_UNLKSYS F_RWREFS;
MACRO_ADVFS_ASYNC F_SETCACHEPOLICY;
MACRO_F_GETFD F_SETFD;
MACRO_F_GETFD F_SETFL;
MACRO_F_GETFD F_SETLK;
MACRO_F_GETFD F_SETLKW;
MACRO_F_GETOWN F_SETOWN;
MACRO_F_UNLKSYS F_SETTIMES;
MACRO_F_NON F_SHARABLE;
MACRO_F_LOMAP F_SHARE_MASK;
MACRO_F_RELFLG F_SWABD;
MACRO_F_ULOCK F_TEST;
MACRO_F_CDIR F_TEXT;
MACRO_F_ULOCK F_TLOCK;
MACRO_F_CDIR F_TRACE;
MACRO_F_CDIR F_TTY;
MACRO_F_ULOCK F_ULOCK;
MACRO_F F_UNLCK;
MACRO_F_UNLKSYS F_UNLKSYS;
MACRO_F_RELFLG F_UPDATE;
MACRO_F F_WRLCK;
$0E64F95F8B8660ABA7845ADD323C20B1 Failure;
$13E5897DDE4FE73267EC69E9B96C8548 False;
MACRO_FamilyInternet FamilyChaos;
MACRO_FamilyInternet FamilyDECnet;
MACRO_FamilyInternet FamilyInternet;
MACRO_FamilyKrb5Principal FamilyKrb5Principal;
MACRO_FamilyLocal FamilyLocal;
MACRO_FamilyLocalHost FamilyLocalHost;
MACRO_FamilyNetname FamilyNetname;
MACRO_FamilyLocal FamilyWild;
MACRO_KeyClass FeedbackClass;
char *Ffile;
int Fflags;
int (*Ffunc)(char *);
MACRO_FillSolid FillOpaqueStippled;
MACRO_FillSolid FillSolid;
MACRO_FillSolid FillStippled;
MACRO_FillSolid FillTiled;
$E203AC54CF4949A66D893C858D3FE04C FindChild;
MACRO_Success FirstExtensionError;
jmp_buf Fjmp;
MACRO_NoEventMask FocusChangeMask;
MACRO_KeyClass FocusClass;
MACRO_KeyPress FocusIn;
MACRO_KeyPress FocusOut;
MACRO_FollowKeyboard FollowKeyboard;
MACRO_FontLeftToRight FontChange;
MACRO_KeepAlive FontChangeNotify;
MACRO_CatalogueChangeNotifyMask FontChangeNotifyMask;
MACRO_FontInfoAllCharsExist FontInfoAllCharsExist;
MACRO_FontInfoAllCharsExist FontInfoHorizontalOverlap;
MACRO_FontInfoAllCharsExist FontInfoInkInside;
MACRO_FontLeftToRight FontLeftToRight;
MACRO_FontLeftToRight FontRightToLeft;
MACRO_ForgetGravity ForgetGravity;
void FreeZlibBuffer();
int Fvalue;
accept_stat GARBAGE_ARGS;
MACRO_SUPPLY GARBAGE_TIME;
MACRO_CONSOLE GA_DTYPE;
MACRO_GCFunction GCArcMode;
MACRO_GCFunction GCBackground;
MACRO_GCFunction GCCapStyle;
MACRO_GCFunction GCClipMask;
MACRO_GCFunction GCClipXOrigin;
MACRO_GCFunction GCClipYOrigin;
MACRO_GCFunction GCDashList;
MACRO_GCFunction GCDashOffset;
MACRO_GCFunction GCFillRule;
MACRO_GCFunction GCFillStyle;
MACRO_GCFunction GCFont;
MACRO_GCFunction GCForeground;
MACRO_GCFunction GCFunction;
MACRO_GCFunction GCGraphicsExposures;
MACRO_GCFunction GCJoinStyle;
MACRO_GCLastBit GCLastBit;
MACRO_GCFunction GCLineStyle;
MACRO_GCFunction GCLineWidth;
MACRO_GCFunction GCPlaneMask;
MACRO_GCFunction GCStipple;
MACRO_GCFunction GCSubwindowMode;
MACRO_GCFunction GCTile;
MACRO_GCFunction GCTileStipXOrigin;
MACRO_GCFunction GCTileStipYOrigin;
MACRO_VDATA GDATA;
MACRO_GENERAL GENERAL_INFO;
MACRO_OFF GET;
MACRO_GETNCNT GETALL;
MACRO_GETFSIND GETFSIND;
MACRO_GETFSIND GETFSTYP;
MACRO_GETNCNT GETNCNT;
MACRO_GETFSIND GETNFSTYP;
MACRO_GET GETPAID;
MACRO_GETNCNT GETPID;
MACRO_GETRHANDLE GETRHANDLE;
MACRO_GETNCNT GETVAL;
MACRO_GETNCNT GETZCNT;
MACRO_TEGC GET_810_SPEED;
MACRO_GET GET_AUDSIZE;
MACRO_GET GET_AUDSTYLE;
MACRO_GET GET_AUDSWITCH;
MACRO_TEGC GET_BAD_PAGE_LIST;
MACRO_GET GET_DATALEN;
MACRO_TEGC GET_FAN_STATUS;
MACRO_TEGC GET_FIRMWARE_REV;
MACRO_TEGC GET_FLAGS;
MACRO_GET GET_HABITAT_EVENT;
MACRO_TEGC GET_HALT_AFTER_PANIC;
MACRO_TEGC GET_HW_BUGS;
MACRO_GET GET_MACHIPC_AMASK;
MACRO_GET GET_MACH_AMASK;
MACRO_TEGC GET_MEM_BANK_BASE_PA;
MACRO_TEGC GET_MEM_BANK_COUNT;
MACRO_TEGC GET_MEM_BANK_SIZE;
MACRO_GET GET_NSITEVENTS;
MACRO_GET GET_OBJAUDBIT;
MACRO_TEGC GET_PALCODE_REV;
MACRO_TEGC GET_PLATFORM_RESET_PTR;
MACRO_GET GET_PROC_ACNTL;
MACRO_GET GET_PROC_AMASK;
MACRO_SET GET_PROPLIST_SYSCALL;
MACRO_TEGC GET_PS_STATUS;
MACRO_TEGC GET_SGMAP_CTL;
MACRO_TEGC GET_SG_FLUSHPTR;
MACRO_GET GET_SITEMASK;
MACRO_GET GET_SLRANGE;
MACRO_TEGC GET_SLU_SPEED;
MACRO_GET GET_SUBJ_ACNTL;
MACRO_GET GET_SUBJ_AMASK;
MACRO_GET GET_SYS_AMASK;
MACRO_TEGC GET_SYS_TEMP;
MACRO_TEGC GET_TC_SPEED;
MACRO_GET GET_TRUSTED_AMASK;
MACRO_TEGC GET_UNIQUE_SYSID;
MACRO_GIDHSZ GIDHSZ;
MACRO_GLEVEL GLEVEL_0;
MACRO_GLEVEL GLEVEL_1;
MACRO_GLEVEL GLEVEL_2;
MACRO_GLEVEL_3 GLEVEL_3;
MACRO_GLOB GLOB_ABORTED;
MACRO_GLOB GLOB_APPEND;
MACRO_GLOB GLOB_DOOFFS;
MACRO_GLOB GLOB_ERR;
MACRO_GLOB GLOB_MARK;
MACRO_GLOB GLOB_NOCHECK;
MACRO_GLOB GLOB_NOESCAPE;
MACRO_GLOB GLOB_NOMATCH;
MACRO_GLOB GLOB_NOSORT;
MACRO_GLOB GLOB_NOSPACE;
MACRO_GLOB GLOB_NOSYS;
MACRO_GLOB GLOB_QUOTE;
MACRO_DISPATCHER GPINFO_LAST;
MACRO_DISPATCHER GPINFO_MAGIC;
MACRO_GPROF GPROF_TOOLVER;
MACRO_GPR2 GPR_BASE;
MACRO_GP GP_DISP;
MACRO_GP GP_PAD;
MACRO_GP GP_SIZE;
MACRO_PX GQ_DTYPE;
MACRO_COLOR_MAP GREEN_SIGNATURE;
MACRO_USER GROUP_OBJ;
MACRO_ACL_OTHER GROUP_OTHER;
MACRO_PWDAUTHSRV GRPAUTHSRV;
MACRO_USRQUOTA GRPQUOTA;
MACRO_GSI GSI_BOOTDEV;
MACRO_GSI GSI_BOOTTYPE;
MACRO_GSI GSI_CLK_TCK;
MACRO_GSI GSI_COMPAT_MOD;
MACRO_GSI GSI_CONSMEM_SIZE;
MACRO_GSI GSI_CPUS_IN_BOX;
MACRO_GSI GSI_CURRENT_CPU;
MACRO_GSI GSI_DBASE;
MACRO_GSI GSI_DNAUID;
MACRO_GSI GSI_DUMPDEV;
MACRO_GSI GSI_DUMPINFO;
MACRO_GSI GSI_FD_NEWMAX;
MACRO_GSI GSI_IECPARNT;
MACRO_GSI GSI_IECPROC;
MACRO_GSI GSI_IECSYS;
MACRO_GSI GSI_IPDEFTTL;
MACRO_GSI GSI_IPRSETUP;
MACRO_GSI GSI_LMF;
MACRO_GSI GSI_LOGIN_NAME_MAX;
MACRO_GSI GSI_MAX_UPROCS;
MACRO_GSI GSI_MMAPALIGN;
MACRO_GSI GSI_PARTIAL_DUMPPAGES;
MACRO_GSI GSI_PHYSMEM;
MACRO_GSI GSI_PHYSMEM_START;
MACRO_GSI GSI_PROG_ENV;
MACRO_GSI GSI_ROOTDEV;
MACRO_GSI GSI_SCS;
MACRO_GSI GSI_SIGQ_MAX;
MACRO_GSI GSI_STATIC_DEF;
MACRO_GSI GSI_SWAPDEV;
MACRO_GSI GSI_SYSTEM_ID;
MACRO_GSI GSI_TIMER_MAX;
MACRO_GSI GSI_TNC;
MACRO_GSI GSI_TTYP;
MACRO_GSI GSI_UACPARNT;
MACRO_GSI GSI_UACPROC;
MACRO_GSI GSI_UACSYS;
MACRO_GSI GSI_VERSIONSTRING;
MACRO_GSI GSI_VPTOTAL;
MACRO_GENERAL GUARANTEED_SERV;
createmode3 GUARDED;
$3FD2CD758B4508E9872F8BD2F0A27490 GUAR_ADSPARM_C;
$3FD2CD758B4508E9872F8BD2F0A27490 GUAR_ADSPARM_Csum;
$3FD2CD758B4508E9872F8BD2F0A27490 GUAR_ADSPARM_Ctot;
$3FD2CD758B4508E9872F8BD2F0A27490 GUAR_ADSPARM_D;
$3FD2CD758B4508E9872F8BD2F0A27490 GUAR_ADSPARM_Dsum;
$3FD2CD758B4508E9872F8BD2F0A27490 GUAR_ADSPARM_Dtot;
MACRO_GXclear GXand;
MACRO_GXclear GXandInverted;
MACRO_GXclear GXandReverse;
MACRO_GXclear GXclear;
MACRO_GXclear GXcopy;
MACRO_GXclear GXcopyInverted;
MACRO_GXclear GXequiv;
MACRO_GXclear GXinvert;
MACRO_GXclear GXnand;
MACRO_GXclear GXnoop;
MACRO_GXclear GXnor;
MACRO_GXclear GXor;
MACRO_GXclear GXorInverted;
MACRO_GXclear GXorReverse;
MACRO_GXclear GXset;
MACRO_GXclear GXxor;
MACRO_G G_END;
MACRO_G G_ENT;
MACRO_G G_GID;
MACRO_G G_NAM;
MACRO_G G_SET;
$E203AC54CF4949A66D893C858D3FE04C GetGeometry;
int GetPreedit(XComposeStatus *status, ComposeRtrn *pRtrn);
$E203AC54CF4949A66D893C858D3FE04C GetResources;
$E203AC54CF4949A66D893C858D3FE04C GetValues;
MACRO_GrabSuccess GrabFrozen;
MACRO_GrabSuccess GrabInvalidTime;
MACRO_GrabModeSync GrabModeAsync;
MACRO_GrabModeSync GrabModeSync;
MACRO_GrabSuccess GrabNotViewable;
MACRO_GrabSuccess GrabSuccess;
MACRO_KeyPress GraphicsExpose;
MACRO_KeyPress GravityNotify;
MACRO_StaticGray GrayScale;
MACRO_HABITAT_LOW HABITAT_LOW;
MACRO_HABITAT HABITAT_MASK;
MACRO_HABITAT HABITAT_SHIFT;
MACRO_HANDLE_SPARSE HANDLE_BUSPHYS_ADDR;
MACRO_HANDLE HANDLE_BYTE;
MACRO_HANDLE HANDLE_DENSE_SPACE;
MACRO_HANDLE_SPARSE HANDLE_LINEAR_SPACE;
MACRO_HANDLE HANDLE_LONGWORD;
MACRO_HANDLE HANDLE_QUADWORD;
MACRO_HANDLE_SPARSE HANDLE_SPARSE_SPACE;
MACRO_HANDLE HANDLE_TRIBYTE;
MACRO_HANDLE HANDLE_WORD;
MACRO_NO_ERROR HARD_ERROR;
MACRO_HASHBITS HASHBITS;
MACRO_HASHFRACTION HASHFRACTION;
MACRO_R_DUP HASHMAGIC;
MACRO_HASHMASK HASHMASK;
MACRO_BUCKETLNTH HASHSIZE;
MACRO_HASHVERSION HASHVERSION;
MACRO_HAS HAS_BB_COUNTS;
MACRO_HAS HAS_INT_SAMPLES;
MACRO_HAS HAS_INV_COUNTS;
MACRO_HAS HAS_PC_SAMPLES;
bool HC;
MACRO_OTTYDISC HCLDISC;
MACRO_VDATA HDATA;
MACRO_HEADER HEADER_SIZE;
MACRO_HEDLEN HEDLEN;
MACRO_F1 HELP;
MACRO_SQR HEXE;
MACRO_HEXKEYBYTES HEXKEYBYTES;
MACRO_SQR HEXO;
MACRO_HFIXEDSZ HFIXEDSZ;
MACRO_NTREC HIGHDENSITYTREC;
MACRO_NO_GCS HIGHLIGHT;
MACRO_B2 HIGH_COLOR;
MACRO_TEGC HIGH_TEMP_THRESHOLD;
MACRO_HIPROF HIPROF_TOOLVER;
MACRO_HISTFRACTION HISTFRACTION;
MACRO_P4 HITACHI;
MACRO_HI HI_DENS;
char *HO;
MACRO_F1 HOME;
MACRO_F1 HOME_NPAD;
MACRO_RIPCMD HOPCNT_INFINITY;
MACRO_HOSTNAMESZ HOSTNAMESZ;
MACRO_HOST_BASIC HOST_BASIC_INFO;
MACRO_HOST HOST_INFO_MAX;
MACRO_HOST_NOT HOST_NOT_FOUND;
MACRO_HOST_BASIC HOST_PAGING_INFO;
MACRO_HOST_BASIC HOST_PROCESSOR_SLOTS;
MACRO_HOST_BASIC HOST_SCHED_INFO;
MACRO_HOURSPERDAY HOURSPERDAY;
MACRO_HOURS HOURS_PER_DAY;
MACRO_NONE HSV;
MACRO_HS HS_DEBUG_ON;
MACRO_HS HS_SRV_TIMEOUT_DEFAULT;
MACRO_CS5 HUPCL;
MACRO_HWCONFIG HWCONFIG_BUS;
MACRO_HWCONFIG_BUS HWCONFIG_BUS_ALL;
MACRO_HWCONFIG_BUS HWCONFIG_BUS_INSTANCE;
MACRO_HWCONFIG_TYPE HWCONFIG_CONFIGURE_REQUEST;
MACRO_HWCONFIG HWCONFIG_CONTROLLER_ALL;
MACRO_HWCONFIG HWCONFIG_CONTROLLER_INSTANCE;
MACRO_HWCONFIG_DEVICE HWCONFIG_DEVICE_ALL;
MACRO_HWCONFIG_DEVICE HWCONFIG_DEVICE_INSTANCE;
MACRO_HWCONFIG_LOAD HWCONFIG_LOAD_MODULE;
MACRO_HWCONFIG_TYPE HWCONFIG_TYPE_MASK;
MACRO_HWCONFIG_TYPE HWCONFIG_UNCONFIGURE_REQUEST;
MACRO_HWCONFIG_DEVICE HWCONFIG_UNLOAD_MODULE;
MACRO_HWCONFIG_TYPE HWCONFIG_UNLOAD_REQUEST;
MACRO_HWEF HWEF_SIZE;
MACRO_HWSET_CURRENT HWSET_CURRENT_VERSION;
MACRO_HWSET HWSET_VERSION_1;
bool HZ;
MACRO_NoValue HeightValue;
$D6648E7C00A5D72C8804EAE47C88934A HighlightAlways;
$D6648E7C00A5D72C8804EAE47C88934A HighlightNone;
$D6648E7C00A5D72C8804EAE47C88934A HighlightWhenUnset;
MACRO_HostInsert HostDelete;
MACRO_HostInsert HostInsert;
$6044DFAE8AB1695FEF8277F39C5596FC I18NADJECTIVE;
$6044DFAE8AB1695FEF8277F39C5596FC I18NADVERB;
$6044DFAE8AB1695FEF8277F39C5596FC I18NBUTTON;
$7EBEEDDF242EDAD10BF7B0EEC4B6EA48 I18NCOMPSEQ;
$6044DFAE8AB1695FEF8277F39C5596FC I18NLABEL;
$6044DFAE8AB1695FEF8277F39C5596FC I18NLIST;
$6044DFAE8AB1695FEF8277F39C5596FC I18NMENU;
$6044DFAE8AB1695FEF8277F39C5596FC I18NNOUN;
$7EBEEDDF242EDAD10BF7B0EEC4B6EA48 I18NTEXTWRAP;
$6044DFAE8AB1695FEF8277F39C5596FC I18NVERB;
$7EBEEDDF242EDAD10BF7B0EEC4B6EA48 I18NWORDSELECT;
MACRO_I18nCvtInitCallback I18nCvtEndCallback;
MACRO_I18nCvtInitCallback I18nCvtInitCallback;
MACRO_I18nCvtInitCallback I18nCvtLineCallback;
MACRO_I18nCvtInitCallback I18nCvtMaxCallback;
MACRO_I18nCvtInitCallback I18nCvtSegmentCallback;
MACRO_I18nCvtStatusOK I18nCvtStatusDataLoss;
MACRO_I18nCvtStatusOK I18nCvtStatusFail;
MACRO_I18nCvtStatusOK I18nCvtStatusOK;
MACRO_B16MAGIC I286LMAGIC;
MACRO_B16MAGIC I286SMAGIC;
MACRO_F_NO IAPX16;
MACRO_F_NO IAPX16TV;
MACRO_F_NO IAPX20;
MACRO_F_NO IAPX20TV;
MACRO_IBEAM IBEAM_WIDTH;
char *IC;
MACRO_ECHOE ICANON;
MACRO_ICE ICE_AuthNextPhase;
MACRO_ICE ICE_AuthReply;
MACRO_ICE ICE_AuthRequired;
MACRO_ICE ICE_ByteOrder;
MACRO_ICE ICE_ConnectionReply;
MACRO_ICE ICE_ConnectionSetup;
MACRO_ICE ICE_Error;
MACRO_ICE ICE_NoClose;
MACRO_ICE ICE_Ping;
MACRO_ICE ICE_PingReply;
MACRO_ICE ICE_ProtocolReply;
MACRO_ICE ICE_ProtocolSetup;
MACRO_ICE ICE_WantToClose;
MACRO_NDPROTO ICMPPROTO;
MACRO_ICMPSTAT ICMPSTAT_MAXTYPE;
MACRO_ICMP_REDIRECT_MAXCODE ICMP_ECHO;
MACRO_ICMP_ECHOREPLY ICMP_ECHOREPLY;
MACRO_ICMP_PARAMPROB_MAXCODE ICMP_IREQ;
MACRO_ICMP_PARAMPROB_MAXCODE ICMP_IREQREPLY;
MACRO_ICMP_MASKLEN ICMP_MASKLEN;
MACRO_ICMP_PARAMPROB_MAXCODE ICMP_MASKREPLY;
MACRO_ICMP_PARAMPROB_MAXCODE ICMP_MASKREQ;
MACRO_ICMP_MAXTYPE ICMP_MAXTYPE;
MACRO_ICMP ICMP_MINLEN;
MACRO_ICMP_TIMXCEED_MAXCODE ICMP_PARAMPROB;
MACRO_ICMP_PARAMPROB_MAXCODE ICMP_PARAMPROB_MAXCODE;
MACRO_ICMP_PARAMPROB ICMP_PARAMPROB_OPTABSENT;
MACRO_ICMP_SOURCEQUENCH ICMP_REDIRECT;
MACRO_ICMP_REDIRECT ICMP_REDIRECT_HOST;
MACRO_ICMP_REDIRECT_MAXCODE ICMP_REDIRECT_MAXCODE;
MACRO_ICMP_REDIRECT ICMP_REDIRECT_NET;
MACRO_ICMP_REDIRECT ICMP_REDIRECT_TOSHOST;
MACRO_ICMP_REDIRECT ICMP_REDIRECT_TOSNET;
MACRO_ICMP_REDIRECT_MAXCODE ICMP_ROUTERADVERT;
MACRO_ICMP_REDIRECT_MAXCODE ICMP_ROUTERSOLICIT;
MACRO_ICMP_SOURCEQUENCH ICMP_SOURCEQUENCH;
MACRO_ICMP_REDIRECT_MAXCODE ICMP_TIMXCEED;
MACRO_ICMP_TIMXCEED ICMP_TIMXCEED_INTRANS;
MACRO_ICMP_TIMXCEED_MAXCODE ICMP_TIMXCEED_MAXCODE;
MACRO_ICMP_TIMXCEED ICMP_TIMXCEED_REASS;
MACRO_ICMP_PARAMPROB_MAXCODE ICMP_TSTAMP;
MACRO_ICMP_PARAMPROB_MAXCODE ICMP_TSTAMPREPLY;
MACRO_ICMP_ECHOREPLY ICMP_UNREACH;
MACRO_ICMP_UNREACH ICMP_UNREACH_ADM_PROHIB;
MACRO_ICMP_UNREACH ICMP_UNREACH_HOST;
MACRO_ICMP_UNREACH ICMP_UNREACH_HOST_PROHIB;
MACRO_ICMP_UNREACH ICMP_UNREACH_HOST_UNKNOWN;
MACRO_ICMP_UNREACH ICMP_UNREACH_ISOLATED;
MACRO_ICMP_UNREACH_MAXCODE ICMP_UNREACH_MAXCODE;
MACRO_ICMP_UNREACH ICMP_UNREACH_NEEDFRAG;
MACRO_ICMP_UNREACH ICMP_UNREACH_NET;
MACRO_ICMP_UNREACH ICMP_UNREACH_NET_PROHIB;
MACRO_ICMP_UNREACH ICMP_UNREACH_NET_UNKNOWN;
MACRO_ICMP_UNREACH ICMP_UNREACH_PORT;
MACRO_ICMP_UNREACH ICMP_UNREACH_PREC_CUT;
MACRO_ICMP_UNREACH ICMP_UNREACH_PREC_VIOL;
MACRO_ICMP_UNREACH ICMP_UNREACH_PROTOCOL;
MACRO_ICMP_UNREACH ICMP_UNREACH_SRCFAIL;
MACRO_ICMP_UNREACH ICMP_UNREACH_TOSHOST;
MACRO_ICMP_UNREACH ICMP_UNREACH_TOSNET;
MACRO_ICOUNTS ICOUNTS_MAGIC;
MACRO_IGNBRK ICRNL;
MACRO_IC IC_FASTLINK;
MACRO_IC IC_PROPLIST;
MACRO_IC IC_PROPLIST_BLOCK;
MACRO_IC IC_PROPLIST_FRAG;
MACRO_IC IC_XGID;
MACRO_IC IC_XUID;
MACRO_VDATA IDATA;
MACRO_ID ID_ACCT;
MACRO_ID ID_EFFECTIVE;
MACRO_ID ID_LOGIN;
MACRO_NULL_DEVICE ID_MODULE_DEVICE;
MACRO_ID ID_REAL;
MACRO_COLOR_MAP ID_REG;
MACRO_ID ID_SAVED;
MACRO_UAC_NOPRINT IEC_BITMASK;
MACRO_IEC IEC_NOEMUL;
MACRO_IEC IEC_NOFAT;
MACRO_IEC IEC_NOPRINT;
MACRO_IEC IEC_RSVD;
MACRO_IEC IEC_VERBOSE;
MACRO_IERRORS IERRORS;
MACRO_ModeBitsShift IEVENTS;
MACRO_IEXEC IEXEC;
MACRO_ECHOE IEXTEN;
MACRO_IFAF IFAF_DENY;
MACRO_IFAF IFAF_DENYLOG;
MACRO_IFAF IFAF_MAXBUFSIZE;
MACRO_IFAF_MAXENTRIES IFAF_MAXENTRIES;
MACRO_IFAF IFAF_PERMIT;
MACRO_IFAH IFAH_ALIAS;
MACRO_IFAH IFAH_BROADCAST;
MACRO_IFIFO IFBADSEC;
MACRO_IFIFO IFBLK;
MACRO_IFIFO IFCHR;
MACRO_IFIFO IFDIR;
MACRO_IFE_SUCCESS IFE_FAIL;
MACRO_IFE IFE_LASTBLOCK;
MACRO_IFE IFE_NOTLAST;
MACRO_IFE_SUCCESS IFE_RETRY;
MACRO_IFE_SUCCESS IFE_SUCCESS;
MACRO_IFF IFF_ALLMULTI;
MACRO_IFF IFF_BROADCAST;
MACRO_IFF_SNAP IFF_CANTCHANGE;
MACRO_IFF IFF_CLUIF;
MACRO_IFF_D1 IFF_D1;
MACRO_IFF_D1 IFF_D2;
MACRO_IFF IFF_DEBUG;
MACRO_IFF IFF_LOOPBACK;
MACRO_IFF IFF_MULTICAST;
MACRO_IFF IFF_MULTINET;
MACRO_IFF IFF_NOARP;
MACRO_IFF IFF_NOCHECKSUM;
MACRO_IFF IFF_NOTRAILERS;
MACRO_IFF IFF_OACTIVE;
MACRO_IFF IFF_PFCOPYALL;
MACRO_IFF IFF_PKTOK;
MACRO_IFF IFF_POINTOPOINT;
MACRO_IFF IFF_PROMISC;
MACRO_IFF IFF_QUORUMLOSS;
MACRO_IFF IFF_RUNNING;
MACRO_IFF IFF_SIMPLEX;
MACRO_IFF_SNAP IFF_SNAP;
MACRO_IFF IFF_SOCKBUF;
MACRO_IFF IFF_UIOMOVE;
MACRO_IFF IFF_UP;
MACRO_IFF IFF_VAR_MTU;
MACRO_IFF IFF_VMIFNET;
MACRO_IFG IFG_ANY;
MACRO_IFG IFG_BLUE;
MACRO_IFG IFG_GREEN;
MACRO_IFG IFG_INDIGO;
MACRO_IFG IFG_INFRARED;
MACRO_IFG_MAX IFG_MAX;
MACRO_IFG IFG_ORANGE;
MACRO_IFG IFG_RED;
MACRO_IFG IFG_ULTRAVIOLET;
MACRO_IFG IFG_UNKNOWN;
MACRO_IFG IFG_VIOLET;
MACRO_IFG IFG_YELLOW;
MACRO_IFIFO IFIFO;
MACRO_IFIFO IFLNK;
MACRO_IFLOW IFLOW;
MACRO_IFMT IFMT;
MACRO_IFNAMSIZ IFNAMSIZ;
MACRO_IFNET IFNET_SLOWHZ;
MACRO_IFQ IFQ_MAXLEN;
MACRO_IFIFO IFREG;
MACRO_IFIFO IFSOCK;
MACRO_IFT IFT_1822;
MACRO_IFT IFT_AAL5;
MACRO_IFT IFT_ARCNET;
MACRO_IFT IFT_ARCNET_PLUS;
MACRO_IFT IFT_ATM;
MACRO_IFT IFT_ATMECIR;
MACRO_IFT IFT_CEPT;
MACRO_IFT IFT_DS3;
MACRO_IFT IFT_EON;
MACRO_IFT IFT_ETHER;
MACRO_IFT IFT_FASTETHER;
MACRO_IFT IFT_FDDI;
MACRO_IFT IFT_FIBRECHAN;
MACRO_IFT IFT_FRAMEREALYI;
MACRO_IFT IFT_FRAMERELAY;
MACRO_IFT IFT_FRAMERELAYS;
MACRO_IFT IFT_G7022MB;
MACRO_IFT IFT_G70364K;
MACRO_IFT IFT_HDH1822;
MACRO_IFT IFT_HPPI;
MACRO_IFT IFT_HPPI_I;
MACRO_IFT IFT_HSSI;
MACRO_IFT IFT_HY;
MACRO_IFT IFT_IEEE80212;
MACRO_IFT IFT_ISDNBASIC;
MACRO_IFT IFT_ISDNPRIMARY;
MACRO_IFT IFT_ISDNX25;
MACRO_IFT IFT_ISO88022LLC;
MACRO_IFT IFT_ISO88023;
MACRO_IFT IFT_ISO88024;
MACRO_IFT IFT_ISO88025;
MACRO_IFT IFT_ISO88026;
MACRO_IFT IFT_LANE8023;
MACRO_IFT IFT_LANE8025;
MACRO_IFT IFT_LAPB;
MACRO_IFT IFT_LOCALTALK;
MACRO_IFT IFT_LOOP;
MACRO_IFT IFT_MIO25;
MACRO_IFT IFT_MODEM;
MACRO_IFT IFT_NSIP;
MACRO_IFT IFT_OTHER;
MACRO_IFT IFT_P10;
MACRO_IFT IFT_P80;
MACRO_IFT IFT_PARALLEL;
MACRO_IFT IFT_PPP;
MACRO_IFT IFT_PROPMULTI;
MACRO_IFT IFT_PROPVIRT;
MACRO_IFT IFT_PTPSERIAL;
MACRO_IFT IFT_QLLC;
MACRO_IFT IFT_RM;
MACRO_IFT IFT_RS232;
MACRO_IFT IFT_SDLC;
MACRO_IFT IFT_SIP;
MACRO_IFT IFT_SLIP;
MACRO_IFT IFT_SMDSDXI;
MACRO_IFT IFT_SMDSICIP;
MACRO_IFT IFT_SOBETVI;
MACRO_IFT IFT_SONET;
MACRO_IFT IFT_SONETPATH;
MACRO_IFT IFT_STARLAN;
MACRO_IFT IFT_SYNC;
MACRO_IFT IFT_T1;
MACRO_IFT IFT_ULTRA;
MACRO_IFT IFT_V11;
MACRO_IFT IFT_V35;
MACRO_IFT IFT_V36;
MACRO_IFT IFT_WANDD;
MACRO_IFT IFT_X25;
MACRO_IFT IFT_X25DDN;
MACRO_IFT IFT_X25PLE;
MACRO_IFT IFT_XETHER;
MACRO_IF IF_NAMESIZE;
MACRO_IGMP_OLD IGMP_AGE_THRESHOLD;
MACRO_IGMP_IDLE IGMP_AWAKENING_MEMBER;
MACRO_IGMP_TIMER IGMP_DELAYING_MEMBER;
MACRO_IGMP IGMP_DVMRP;
MACRO_IGMP IGMP_HOST_LEAVE_MESSAGE;
MACRO_IGMP IGMP_HOST_MEMBERSHIP_QUERY;
MACRO_IGMP IGMP_HOST_MEMBERSHIP_REPORT;
MACRO_IGMP IGMP_HOST_NEW_MEMBERSHIP_REPORT;
MACRO_IGMP_IDLE IGMP_IDLE_MEMBER;
MACRO_IGMP_IDLE IGMP_LAZY_MEMBER;
MACRO_IGMP_MAX IGMP_MAX_HOST_REPORT_DELAY;
MACRO_IGMP IGMP_MINLEN;
MACRO_IGMP IGMP_MTRACE;
MACRO_IGMP IGMP_MTRACE_RESP;
MACRO_IGMP_OLD IGMP_NEW_ROUTER;
MACRO_IGMP_OLD IGMP_OLD_ROUTER;
MACRO_IGMP IGMP_PIM;
MACRO_IGMP_IDLE IGMP_SLEEPING_MEMBER;
MACRO_IGMP_TIMER IGMP_TIMER_SCALE;
MACRO_IGNBRK IGNBRK;
MACRO_IGNBRK IGNCR;
MACRO_IGNBRK IGNPAR;
$F2011E9C2552B036D6D2F02AACD7A7DD ILL;
MACRO_ILL ILL_BADSTK;
MACRO_ILL ILL_COPROC;
MACRO_ILL ILL_ILLADR;
MACRO_ILL ILL_ILLOPC;
MACRO_ILL ILL_ILLOPN;
MACRO_ILL ILL_ILLTRP;
MACRO_ILL_RESAD ILL_INST_FAULT;
MACRO_ILL_RESAD ILL_MODE_FAULT;
MACRO_ILL_RESAD ILL_PRIVIN_FAULT;
MACRO_ILL ILL_PRVOPC;
MACRO_ILL ILL_PRVREG;
MACRO_ILL_RESAD ILL_RESAD_FAULT;
MACRO_ILL_RESAD ILL_RESOP_FAULT;
char *IM;
MACRO_IFLOW IMAXBEL;
MACRO_FLDUSED IMGFLG;
MACRO_IMPLVER_EV4 IMPLVER_EV4_FAMILY;
MACRO_IMPLVER_EV4 IMPLVER_EV5_FAMILY;
MACRO_IMPLVER_EV4 IMPLVER_EV6_FAMILY;
MACRO_IMPLVER_VAL IMPLVER_VAL_LEN;
MACRO_IMPLVER IMPLVER_VAR_LEN;
MACRO_LFTORG IMXRES;
MACRO_IMYRES IMYRES;
bool IN;
MACRO_INT16SZ IN6ADDRSZ;
MACRO_IN6_BIT IN6_BIT_ORDER;
MACRO_IN6_LSB16 IN6_LSB16_SHIFT;
MACRO_IN6_LSB32 IN6_LSB32_SHIFT;
MACRO_IN6_LSB64 IN6_LSB64_SHIFT;
MACRO_IN6_LSL64 IN6_LSL64_SHIFT;
MACRO_IN6_LSW32 IN6_LSW32_SHIFT;
MACRO_IN6_LSW64 IN6_LSW64_SHIFT;
MACRO_IN6_MCSCOPE IN6_MCSCOPE_GLOBAL;
MACRO_IN6_MCSCOPE IN6_MCSCOPE_LINKLOCAL;
MACRO_IN6_MCSCOPE IN6_MCSCOPE_NODELOCAL;
MACRO_IN6_MCSCOPE IN6_MCSCOPE_ORGLOCAL;
MACRO_IN6_MCSCOPE IN6_MCSCOPE_SITELOCAL;
MACRO_IN6 IN6_MSB16_SHIFT;
MACRO_IN6 IN6_MSB32_SHIFT;
MACRO_IN6_BIT IN6_MSB64_SHIFT;
MACRO_IN6_BIT IN6_MSL64_SHIFT;
MACRO_IN6 IN6_MSW32_SHIFT;
MACRO_IN6_BIT IN6_MSW64_SHIFT;
$A4C507EE3209778ECF0B9DDC8BD963BA INACTIVE_MEM;
MACRO_INT16SZ INADDRSZ;
MACRO_INADDR_LOOPBACK INADDR_ALLHOSTS_GROUP;
MACRO_INADDR INADDR_ANY;
MACRO_INADDR INADDR_BROADCAST;
MACRO_INADDR_LOOPBACK INADDR_LOOPBACK;
MACRO_INADDR_LOOPBACK INADDR_MAX_LOCAL_GROUP;
MACRO_INADDR_LOOPBACK INADDR_NONE;
MACRO_INADDR_LOOPBACK INADDR_UNSPEC_GROUP;
MACRO_INBUFFER INBUFFER_SIZE;
MACRO_INCLUDE INCLUDE_VERSION;
$D44E3C4FF335410EC7120A246FFC2300 INDIRECT_QUERY;
MACRO_INT16SZ INDIR_MASK;
MACRO_INET6 INET6_ADDRSTRLEN;
MACRO_SCM INET_ADDRSTRLEN;
MACRO_INET_CONFIG INET_CONFIG_VERSION_1;
MACRO_INET_IP INET_IP;
MACRO_INET INET_TCP;
MACRO_INET_UDP INET_UDP;
MACRO_INF INF;
MACRO_INFINI INFINI;
MACRO_INFINITY INFINITY;
MACRO_STDOUT INFOSIZE;
MACRO_NOT_SUPPORTED INFO_RETURNED;
MACRO_POLLIN INFTIM;
$A4C507EE3209778ECF0B9DDC8BD963BA INITING_MEM;
MACRO_NAK INIT_ALL;
MACRO_EMPTY INIT_PROCESS;
MACRO_IGNBRK INLCR;
MACRO_IGNBRK INPCK;
MACRO_INPLOOKUP INPLOOKUP_AVAILABLE;
MACRO_INPLOOKUP INPLOOKUP_LOCKHELD;
MACRO_INPLOOKUP INPLOOKUP_SETLOCAL;
MACRO_INPLOOKUP INPLOOKUP_USECACHE;
MACRO_INPLOOKUP INPLOOKUP_WILDCARD;
MACRO_INP_CLUA INP_AVAILABLE;
MACRO_INP_CLUA INP_CLUA_BITS;
MACRO_INP_CONTROLOPTS INP_CONTROLOPTS;
MACRO_INP INP_DONTDETACH;
MACRO_INP_CONTROLOPTS INP_PORT_CACHED;
MACRO_INP_CONTROLOPTS INP_PORT_LOCKED;
MACRO_INP_CONTROLOPTS INP_PORT_NOUNLOCK;
MACRO_INP_CONTROLOPTS INP_PORT_REGISTERED;
MACRO_INP INP_PROXY;
MACRO_TERM INP_QSIZE;
MACRO_INP INP_RECVDSTADDR;
MACRO_INP INP_RECVOPTS;
MACRO_INP INP_RECVRETOPTS;
MACRO_INP INP_SRC_STATIC;
MACRO_INP_CLUA INP_TIMOREQ;
MACRO_F1 INS;
MACRO_F1 INS_NPAD;
MACRO_INT16SZ INT16SZ;
MACRO_INT8 INT16_TOKEN;
MACRO_INT32SZ INT32SZ;
MACRO_INT8 INT32_TOKEN;
MACRO_INT8 INT64_TOKEN;
MACRO_INT8 INT8_TOKEN;
MACRO_COLOR_MAP INTERLEAVE_REG;
MACRO_INTSERV INTSERV_VERSION0;
MACRO_GENERAL INTSERV_VERS_MASK;
MACRO_INT INT_MAX;
MACRO_INT INT_MIN;
MACRO_INT_TOKEN INT_TOKEN;
MACRO_INVALID INVALID_PROCESSOR_SET_ID;
MACRO_IN_CLASSA IN_CLASSA_HOST;
MACRO_IN_CLASSA_MAX IN_CLASSA_MAX;
MACRO_IN IN_CLASSA_NET;
MACRO_IN IN_CLASSA_NSHIFT;
MACRO_IN_CLASSB_HOST IN_CLASSB_HOST;
MACRO_IN_CLASSB_HOST IN_CLASSB_MAX;
MACRO_IN_CLASSB IN_CLASSB_NET;
MACRO_IN_CLASSB IN_CLASSB_NSHIFT;
MACRO_IN_CLASSC_HOST IN_CLASSC_HOST;
MACRO_IN_CLASSC IN_CLASSC_NET;
MACRO_IN_CLASSC IN_CLASSC_NSHIFT;
MACRO_IN_CLASSD_HOST IN_CLASSD_HOST;
MACRO_IN_CLASSD IN_CLASSD_NET;
MACRO_IN_CLASSD IN_CLASSD_NSHIFT;
MACRO_INET_CONFIG IN_DEFAULT_VALUE;
MACRO_IN_LINE IN_LINE;
MACRO_IN_LOOPBACKNET IN_LOOPBACKNET;
MACRO_IN_USEVALUE IN_USEDEFAULTS;
MACRO_IN_USEVALUE IN_USEVALUE;
MACRO_IOCPARM IOCPARM_MASK;
MACRO_IOCPARM_MAX IOCPARM_MAX;
MACRO_OPENMSG IOCTLDATA;
MACRO_OPENMSG IOCTLMSG;
MACRO_OPENMSG IOCTLREPLY;
MACRO_IOC IOC_D;
MACRO_IOC_READREG IOC_DEPOSIT;
MACRO_IOCPARM_MAX IOC_DIRMASK;
MACRO_IOC_READREG IOC_EXAM;
MACRO_IOC_READREG IOC_GET;
MACRO_IOC_READREG IOC_GO;
MACRO_IOCPARM_MAX IOC_IN;
MACRO_IOCPARM_MAX IOC_INOUT;
MACRO_IOCPARM_MAX IOC_OUT;
MACRO_IOC_READREG IOC_PSLOAD;
MACRO_IOC_READREG IOC_PUT;
MACRO_IOC_READREG IOC_RAPMAE;
MACRO_IOC_READREG IOC_READREG;
MACRO_IOC_READREG IOC_RMAE;
MACRO_IOC_READREG IOC_RMSK;
MACRO_IOC IOC_S;
MACRO_IOC_READREG IOC_SPLOAD;
MACRO_IOCPARM_MAX IOC_VOID;
MACRO_IOC_READREG IOC_WAPMAE;
MACRO_IOC_READREG IOC_WD;
MACRO_IOC_READREG IOC_WMAE;
MACRO_IOC_READREG IOC_WMSK;
MACRO_IOC_READREG IOC_WR;
MACRO_IOC_READREG IOC_WRITEREG;
MACRO_IOC_READREG IOC_XCONT;
MACRO_IOC_READREG IOF_OUT;
MACRO_IOF IOF_THREESP;
MACRO_IOF IOF_TWOSP;
MACRO_IOV IOV_MAX;
MACRO_IO IO_APPEND;
MACRO_IO_DATAONLY IO_DATAONLY;
MACRO_IO_DATAONLY IO_DELAYDATA;
MACRO_IO IO_DSYNC;
MACRO_IO_IMMEDIATE IO_IMMEDIATE;
MACRO_IO_IMMEDIATE IO_LOAD_UNIT;
MACRO_IO IO_NDELAY;
MACRO_IO IO_NODELOCKED;
MACRO_IO IO_NONBLOCK;
MACRO_IO IO_NOSTATUPDATE;
MACRO_IO_IMMEDIATE IO_POSITION_EOT;
MACRO_IO_IMMEDIATE IO_RETENTION;
MACRO_IO IO_RSYNC;
MACRO_IO IO_SYNC;
MACRO_IO IO_TRUNC;
MACRO_IO IO_UNIT;
char *IP;
MACRO_MAX_MACHINELEN IPALLOC_PROG;
MACRO_IPALLOC IPALLOC_TIMEOUT;
MACRO_IPALLOC_VERS IPALLOC_VERS;
MACRO_IPC_SET IPC_ALLOC;
MACRO_IPC IPC_CREAT;
MACRO_IPC IPC_EXCL;
MACRO_IPC_R IPC_MSG;
MACRO_IPC IPC_NOWAIT;
MACRO_IPC_PRIVATE IPC_PRIVATE;
MACRO_IPC_R IPC_R;
MACRO_IPC_SET IPC_RESERVED;
MACRO_IPC_PRIVATE IPC_RMID;
MACRO_IPC_SEM IPC_SEM;
MACRO_IPC_SET IPC_SET;
MACRO_IPC_SEM IPC_SHM;
MACRO_IPC_SET IPC_STAT;
MACRO_IPC_SET IPC_STAT_COMPAT;
MACRO_IPC_R IPC_W;
MACRO_IPFRAGTTL IPFRAGTTL;
MACRO_IPQ IPFRAG_MFF;
MACRO_IPOPT IPOPT_CONTROL;
MACRO_IPOPT IPOPT_DEBMEAS;
MACRO_IPOPT_EOL IPOPT_EOL;
MACRO_IPOPT_EOL IPOPT_LSRR;
MACRO_IPOPT_OPTVAL IPOPT_MINOFF;
MACRO_IPOPT_EOL IPOPT_NOP;
MACRO_IPOPT_OPTVAL IPOPT_OFFSET;
MACRO_IPOPT_OPTVAL IPOPT_OLEN;
MACRO_IPOPT_OPTVAL IPOPT_OPTVAL;
MACRO_IPOPT IPOPT_RESERVED1;
MACRO_IPOPT IPOPT_RESERVED2;
MACRO_IPOPT_EOL IPOPT_RR;
MACRO_IPOPT_EOL IPOPT_SATID;
MACRO_IPOPT_EOL IPOPT_SECURITY;
MACRO_IPOPT_SECUR IPOPT_SECUR_CONFID;
MACRO_IPOPT_SECUR_EFTO IPOPT_SECUR_EFTO;
MACRO_IPOPT_SECUR_EFTO IPOPT_SECUR_MMMM;
MACRO_IPOPT_SECUR_RESTR IPOPT_SECUR_RESTR;
MACRO_IPOPT_SECUR_RESTR IPOPT_SECUR_SECRET;
MACRO_IPOPT_SECUR_TOPSECRET IPOPT_SECUR_TOPSECRET;
MACRO_IPOPT_SECUR IPOPT_SECUR_UNCLASS;
MACRO_IPOPT_EOL IPOPT_SSRR;
MACRO_IPOPT_EOL IPOPT_TS;
MACRO_IPOPT_TS IPOPT_TS_PRESPEC;
MACRO_IPOPT_TS IPOPT_TS_TSANDADDR;
MACRO_IPOPT_TS IPOPT_TS_TSONLY;
MACRO_IPPROTO_IPV6 IPPORT_RESERVED;
MACRO_IPPORT IPPORT_TIMESERVER;
MACRO_IPPROTO_IPV6 IPPORT_USERRESERVED;
MACRO_IPPROTO IPPROTO_AH;
MACRO_IPPROTO IPPROTO_EGP;
MACRO_IPPROTO_IPV6 IPPROTO_EON;
MACRO_IPPROTO IPPROTO_ESP;
MACRO_IPPROTO IPPROTO_GGP;
MACRO_IPPROTO IPPROTO_ICMP;
MACRO_IPPROTO IPPROTO_IDP;
MACRO_IPPROTO_IPV6 IPPROTO_IFMP;
MACRO_IPPROTO IPPROTO_IGMP;
MACRO_IPPROTO IPPROTO_IP;
MACRO_IPPROTO IPPROTO_IPIP;
MACRO_IPPROTO_IPV6 IPPROTO_IPV6;
MACRO_IPPROTO_IPV6 IPPROTO_MAX;
MACRO_IPPROTO IPPROTO_PUP;
MACRO_IPPROTO_IPV6 IPPROTO_RAW;
MACRO_IPPROTO_IPV6 IPPROTO_RSVP;
MACRO_IPPROTO IPPROTO_TCP;
MACRO_IPPROTO IPPROTO_TP;
MACRO_IPPROTO IPPROTO_UDP;
MACRO_IPQ IPQ_FLAGS_ALIAS;
MACRO_IPR IPR_DEFAULT;
MACRO_IPTOS IPTOS_LOWDELAY;
MACRO_IPTOS_PREC_CRITIC IPTOS_PREC_CRITIC_ECP;
MACRO_IPTOS_PREC_FLASHOVERRIDE IPTOS_PREC_FLASH;
MACRO_IPTOS_PREC_FLASHOVERRIDE IPTOS_PREC_FLASHOVERRIDE;
MACRO_IPTOS_PREC_IMMEDIATE IPTOS_PREC_IMMEDIATE;
MACRO_IPTOS_PREC_INTERNETCONTROL IPTOS_PREC_INTERNETCONTROL;
MACRO_IPTOS_PREC IPTOS_PREC_NETCONTROL;
MACRO_IPTOS_PREC_IMMEDIATE IPTOS_PREC_PRIORITY;
MACRO_IPTOS_PREC_IMMEDIATE IPTOS_PREC_ROUTINE;
MACRO_IPTOS IPTOS_RELIABILITY;
MACRO_IPTOS IPTOS_THROUGHPUT;
MACRO_IPTTLDEC IPTTLDEC;
MACRO_IPV6_DEFAULT IPV6_DEFAULT_UNICAST_HOPLIMIT;
MACRO_IPV6 IPV6_UNICAST_HOPS;
MACRO_IPVERSION IPVERSION;
MACRO_IP_ABORT IP_ABORT;
MACRO_IP_ADDR IP_ADDR_TYPE;
MACRO_IP IP_ADD_MEMBERSHIP;
MACRO_IP_ALIVE IP_ALIVE;
MACRO_IPALLOC_VERS IP_ALLOC;
MACRO_IP_CREATOR IP_ATTACHER;
MACRO_IP_SUCCESS IP_BADCHAN;
MACRO_IP_BADMODE IP_BADMODE;
MACRO_IP_BADSIZE IP_BADSIZE;
MACRO_IP_BADTYPE IP_BADTYPE;
MACRO_IP_EITHER IP_BOTH;
MACRO_IP_BROADCAST IP_BROADCAST;
MACRO_IP_CREATOR IP_CREATOR;
MACRO_IP_ALIVE IP_DEAD;
MACRO_IP_DEFAULT_MULTICAST IP_DEFAULT_MULTICAST_LOOP;
MACRO_IP_DEFAULT IP_DEFAULT_MULTICAST_TTL;
MACRO_IPVERSION IP_DF;
MACRO_IP_DONTROUTE IP_DONTROUTE;
MACRO_IP IP_DROP_MEMBERSHIP;
MACRO_IP_EITHER IP_EITHER;
MACRO_IP_TONAME IP_FREE;
MACRO_IP_FULLDUP IP_FULLDUP;
MACRO_IP_FULLDUP IP_HALFDUP;
MACRO_IP IP_HDRINCL;
MACRO_IP_MF IP_MAXPACKET;
MACRO_IP_DEFAULT_MULTICAST IP_MAX_MEMBERSHIPS;
MACRO_IP_MF IP_MF;
MACRO_IPTTLDEC IP_MSS;
MACRO_IP IP_MULTICAST_IF;
MACRO_IP IP_MULTICAST_LOOP;
MACRO_IP IP_MULTICAST_TTL;
MACRO_IP IP_MULTICAST_VIF;
MACRO_IP_NOPRIVATE IP_NOPRIVATE;
MACRO_IP IP_OPTIONS;
MACRO_IP IP_PROXY;
MACRO_IP_EITHER IP_RECEIVER;
MACRO_IP IP_RECVDSTADDR;
MACRO_IP IP_RECVOPTS;
MACRO_IP IP_RECVRETOPTS;
MACRO_IP IP_RETOPTS;
MACRO_IP_RETRY IP_RETRY;
MACRO_IP_REUSEADDR IP_REUSEADDR;
MACRO_IP IP_RSVP_OFF;
MACRO_IP IP_RSVP_ON;
MACRO_IP IP_RSVP_VIF_OFF;
MACRO_IP IP_RSVP_VIF_ON;
MACRO_IP_EITHER IP_SENDER;
MACRO_IP_SHMERR IP_SHMERR;
MACRO_IP_SHUTDOWN IP_SHUTDOWN;
MACRO_IP_SUCCESS IP_SUCCESS;
MACRO_IP_TONAME IP_TONAME;
MACRO_IP IP_TOS;
MACRO_IP IP_TTL;
MACRO_IP2 IP_VERSION;
MACRO_IREAD IREAD;
MACRO_IRG IRG;
MACRO_ISGID ISGID;
MACRO_ECHOE ISIG;
MACRO_ISO_SAP ISO_SAP;
MACRO_ISO ISO_TP;
MACRO_ISPH ISPH_FLG_INV;
MACRO_ISPTM ISPTM;
MACRO_ISPTM ISPTS;
MACRO_ISRF ISRF_INCHDR;
MACRO_ISSH ISSH_BREAK_BIT;
MACRO_IGNBRK ISTRIP;
MACRO_ISUID ISUID;
MACRO_ISVTX ISVTX;
MACRO_TEGC IS_32BIT_CONSOLE;
$3FD2CD758B4508E9872F8BD2F0A27490 IS_GUAR_RSPEC;
int_serv_wkp IS_WKP_COMPOSED_MTU;
int_serv_wkp IS_WKP_HOP_CNT;
int_serv_wkp IS_WKP_MIN_LATENCY;
int_serv_wkp IS_WKP_PATH_BW;
int_serv_wkp IS_WKP_TB_TSPEC;
MACRO_IFLOW ITANDEM;
MACRO_ITIMER ITIMER_PROF;
MACRO_ITIMER ITIMER_REAL;
MACRO_ITIMER ITIMER_VIRTUAL;
MACRO_IGNBRK IUCLC;
MACRO_IWRITE IWRITE;
MACRO_IGNBRK IXANY;
MACRO_IGNBRK IXOFF;
MACRO_IGNBRK IXON;
MACRO_I I_ATMARK;
MACRO_I I_CANPUT;
MACRO_I I_CKBAND;
MACRO_I_TRCLOG I_ERRLOG;
MACRO_I I_FDINSERT;
MACRO_I_STR I_FDINSERT_ATTR;
MACRO_I I_FIFO;
MACRO_I I_FIND;
MACRO_I I_FLUSH;
MACRO_I I_FLUSHBAND;
MACRO_I I_GETBAND;
MACRO_I I_GETCLTIME;
MACRO_I I_GETMSG;
MACRO_I_STR I_GETMSG_ATTR;
MACRO_I I_GETPMSG;
MACRO_I_STR I_GETPMSG_ATTR;
MACRO_I I_GETSIG;
MACRO_I I_GRDOPT;
MACRO_I I_GWROPT;
MACRO_I I_ISASTREAM;
MACRO_I I_LINK;
MACRO_I I_LIST;
MACRO_I I_LOOK;
MACRO_I I_NREAD;
MACRO_I I_PEEK;
MACRO_I_STR I_PEEK_ATTR;
MACRO_I I_PIPE;
MACRO_I I_PLINK;
MACRO_I I_POP;
MACRO_I I_PUNLINK;
MACRO_I I_PUSH;
MACRO_I I_PUTMSG;
MACRO_I_STR I_PUTMSG_ATTR;
MACRO_I I_PUTPMSG;
MACRO_I_STR I_PUTPMSG_ATTR;
MACRO_I I_RECVFD;
MACRO_I_STR I_RECVFD_ATTR;
MACRO_I I_SENDFD;
MACRO_I_STR I_SENDFD_ATTR;
MACRO_I I_SETCLTIME;
MACRO_I I_SETSIG;
MACRO_I I_SRDOPT;
MACRO_I I_STR;
MACRO_I_STR I_STR_ATTR;
MACRO_I I_SWROPT;
MACRO_I_TILDE I_TILDE;
MACRO_I_TRCLOG I_TRCLOG;
MACRO_I I_UNLINK;
$4805EAB0B223F78A463BBC8BA0A6D5FF IceAcceptBadMalloc;
IceConn IceAcceptConnection(IceListenObj, IceAcceptStatus *);
$4805EAB0B223F78A463BBC8BA0A6D5FF IceAcceptFailure;
$4805EAB0B223F78A463BBC8BA0A6D5FF IceAcceptSuccess;
int IceAddConnectionWatch(IceWatchProc, IcePointer);
char *IceAllocScratch(IceConn, unsigned __int64);
void IceAppLockConn(IceConn);
void IceAppUnlockConn(IceConn);
MACRO_IceBadMajor IceAuthFailed;
char *IceAuthFileName(void);
MACRO_IceAuthLockSuccess IceAuthLockError;
MACRO_IceAuthLockSuccess IceAuthLockSuccess;
MACRO_IceAuthLockSuccess IceAuthLockTimeout;
MACRO_IceBadMajor IceAuthRejected;
MACRO_IceCanContinue IceBadLength;
MACRO_IceBadMajor IceBadMajor;
MACRO_IceCanContinue IceBadMinor;
MACRO_IceCanContinue IceBadState;
MACRO_IceCanContinue IceBadValue;
MACRO_IceCanContinue IceCanContinue;
int IceCheckShutdownNegotiation(IceConn);
IceCloseStatus IceCloseConnection(IceConn);
$524C077D957471F3061D228C9C236D67 IceClosedASAP;
$524C077D957471F3061D228C9C236D67 IceClosedNow;
char *IceComposeNetworkIdList(int, IceListenObj *);
$35A689336FE0D24D3433A45C728BDA9A IceConnectAccepted;
$35A689336FE0D24D3433A45C728BDA9A IceConnectIOError;
$35A689336FE0D24D3433A45C728BDA9A IceConnectPending;
$35A689336FE0D24D3433A45C728BDA9A IceConnectRejected;
$524C077D957471F3061D228C9C236D67 IceConnectionInUse;
int IceConnectionNumber(IceConn);
IceConnectStatus IceConnectionStatus(IceConn);
char *IceConnectionString(IceConn);
MACRO_IceCanContinue IceFatalToConnection;
MACRO_IceCanContinue IceFatalToProtocol;
int IceFlush(IceConn);
void IceFreeAuthFileEntry(IceAuthFileEntry *);
void IceFreeListenObjs(int, IceListenObj *);
char *IceGenerateMagicCookie(int);
IceAuthFileEntry *IceGetAuthFileEntry(char *, char *, char *);
IcePointer IceGetConnectionContext(IceConn);
int IceGetInBufSize(IceConn);
int IceGetListenConnectionNumber(IceListenObj);
char *IceGetListenConnectionString(IceListenObj);
int IceGetOutBufSize(IceConn);
int IceInitThreads(void);
MACRO_IceLSBfirst IceLSBfirst;
unsigned __int64 IceLastReceivedSequenceNumber(IceConn);
unsigned __int64 IceLastSentSequenceNumber(IceConn);
int IceListenForConnections(int *, IceListenObj **, int, char *);
int IceListenForWellKnownConnections(char *, int *, IceListenObj **, int, char *);
int IceLockAuthFile(char *, int, int, __int64);
MACRO_IceLSBfirst IceMSBfirst;
MACRO_IceBadMajor IceMajorOpcodeDuplicate;
MACRO_IceBadMajor IceNoAuth;
MACRO_IceBadMajor IceNoVersion;
IceConn IceOpenConnection(char *, IcePointer, int, int, int, char *);
$DD7C7A6F7774314680C00686808A9C69 IcePaAuthAccepted;
$DD7C7A6F7774314680C00686808A9C69 IcePaAuthContinue;
$DD7C7A6F7774314680C00686808A9C69 IcePaAuthFailed;
$DD7C7A6F7774314680C00686808A9C69 IcePaAuthRejected;
int IcePing(IceConn, IcePingReplyProc, IcePointer);
$A3665E69DB87D7B6ED44928954CD85F4 IcePoAuthDoneCleanup;
$A3665E69DB87D7B6ED44928954CD85F4 IcePoAuthFailed;
$A3665E69DB87D7B6ED44928954CD85F4 IcePoAuthHaveReply;
$A3665E69DB87D7B6ED44928954CD85F4 IcePoAuthRejected;
IceProcessMessagesStatus IceProcessMessages(IceConn, IceReplyWaitInfo *, int *);
$81CB9C9397203DD8391907B26844B7B6 IceProcessMessagesConnectionClosed;
$81CB9C9397203DD8391907B26844B7B6 IceProcessMessagesIOError;
$81CB9C9397203DD8391907B26844B7B6 IceProcessMessagesSuccess;
MACRO_IceProtoMajor IceProtoMajor;
MACRO_IceProtoMinor IceProtoMinor;
$C9547D9B9E214CE5EBD681A7EEC38B08 IceProtocolAlreadyActive;
MACRO_IceBadMajor IceProtocolDuplicate;
int IceProtocolRevision(IceConn);
IceProtocolSetupStatus IceProtocolSetup(IceConn, int, IcePointer, int, int *, int *, char **, char **, int, char *);
$C9547D9B9E214CE5EBD681A7EEC38B08 IceProtocolSetupFailure;
$C9547D9B9E214CE5EBD681A7EEC38B08 IceProtocolSetupIOError;
$C9547D9B9E214CE5EBD681A7EEC38B08 IceProtocolSetupSuccess;
int IceProtocolShutdown(IceConn, int);
int IceProtocolVersion(IceConn);
IceAuthFileEntry *IceReadAuthFileEntry(FILE *);
int IceRegisterForProtocolReply(char *, char *, char *, int, IcePaVersionRec *, int, char **, IcePaAuthProc *, IceHostBasedAuthProc, IceProtocolSetupProc, IceProtocolActivateProc, IceIOErrorProc);
int IceRegisterForProtocolSetup(char *, char *, char *, int, IcePoVersionRec *, int, char **, IcePoAuthProc *, IceIOErrorProc);
char *IceRelease(IceConn);
void IceRemoveConnectionWatch(IceWatchProc, IcePointer);
IceErrorHandler IceSetErrorHandler(IceErrorHandler);
void IceSetHostBasedAuthProc(IceListenObj, IceHostBasedAuthProc);
IceIOErrorHandler IceSetIOErrorHandler(IceIOErrorHandler);
void IceSetPaAuthData(int, IceAuthDataEntry *);
void IceSetShutdownNegotiation(IceConn, int);
MACRO_IceBadMajor IceSetupFailed;
$524C077D957471F3061D228C9C236D67 IceStartedShutdownNegotiation;
int IceSwapping(IceConn);
MACRO_IceBadMajor IceUnknownProtocol;
void IceUnlockAuthFile(char *);
char *IceVendor(IceConn);
int IceWriteAuthFileEntry(FILE *, IceAuthFileEntry *);
MACRO_InputHint IconMaskHint;
MACRO_InputHint IconPixmapHint;
MACRO_InputHint IconPositionHint;
MACRO_InputHint IconWindowHint;
MACRO_WithdrawnState IconicState;
MACRO_InProximity InProximity;
MACRO_DontCareState InactiveState;
MACRO_ClipByChildren IncludeInferiors;
int InitZlibBuffer();
MACRO_InputClassBits InputClassBits;
MACRO_PointerWindow InputFocus;
MACRO_InputHint InputHint;
MACRO_InputOutput InputOnly;
MACRO_InputOutput InputOutput;
MACRO_KbdFeedbackClass IntegerFeedbackClass;
int IsComposeKey(KeySym sym, int keycode, XComposeStatus *status);
MACRO_IsUnmapped IsUnmapped;
MACRO_IsUnmapped IsUnviewable;
MACRO_IsUnmapped IsViewable;
MACRO_IsXPointer IsXExtensionDevice;
MACRO_IsXPointer IsXKeyboard;
MACRO_IsXPointer IsXPointer;
MACRO_JB JB_PC;
MACRO_JB JB_PS;
MACRO_JB JB_S0;
MACRO_JB JB_S1;
MACRO_JB JB_S2;
MACRO_JB JB_S3;
MACRO_JB JB_S4;
MACRO_JB JB_S5;
MACRO_JB JB_S6;
MACRO_JB JB_SP;
MACRO_VDATA JDATA;
MACRO_NULL_DEVICE JOYSTICK_DEVICE;
$F2011E9C2552B036D6D2F02AACD7A7DD JSR;
MACRO_JoinMiter JoinBevel;
MACRO_JoinMiter JoinMiter;
MACRO_JoinMiter JoinRound;
char *K0;
char *K1;
char *K2;
char *K3;
char *K4;
char *K5;
char *K6;
char *K7;
char *K8;
char *K9;
MACRO_KBKeyClickPercent KBAutoRepeatMode;
MACRO_KBKeyClickPercent KBBellDuration;
MACRO_KBKeyClickPercent KBBellPercent;
MACRO_KBKeyClickPercent KBBellPitch;
MACRO_BUTTON_UP KBD_HOT_SWAP_TYPE;
MACRO_KBKeyClickPercent KBKey;
MACRO_KBKeyClickPercent KBKeyClickPercent;
MACRO_KBKeyClickPercent KBLed;
MACRO_KBKeyClickPercent KBLedMode;
MACRO_KBModeSwitchSuccess KBModeSwitchFailure;
MACRO_KBModeSwitchSuccess KBModeSwitchInvalidCmd;
MACRO_KBModeSwitchSuccess KBModeSwitchNoop;
MACRO_KBModeSwitchSuccess KBModeSwitchSuccess;
MACRO_KB KB_LK201;
MACRO_KB KB_LK401;
MACRO_KB KB_LK411;
MACRO_KB KB_LK421;
MACRO_KB KB_LK443;
MACRO_KB KB_PCXAL;
MACRO_KB KB_PCXAL_SET2;
MACRO_KB_STATUS_CNTRL KB_STATUS_ALT;
MACRO_KB_STATUS_SHIFT_ANY KB_STATUS_ALT_ANY;
MACRO_KB_STATUS_ALT KB_STATUS_ALT_L;
MACRO_KB_STATUS_COMPOSE KB_STATUS_ALT_R;
MACRO_KB_STATUS_CNTRL KB_STATUS_CAPSLOCK;
MACRO_KB_STATUS_SHIFT KB_STATUS_CNTRL;
MACRO_KB_STATUS_SHIFT_ANY KB_STATUS_CNTRL_ANY;
MACRO_KB_STATUS_CNTRL KB_STATUS_CNTRL_L;
MACRO_KB_STATUS_COMPOSE KB_STATUS_CNTRL_R;
MACRO_KB_STATUS_ALT KB_STATUS_COMPOSE;
MACRO_KB_STATUS_SHIFT_ANY KB_STATUS_COMPOSE_ANY;
MACRO_KB_STATUS_COMPOSE KB_STATUS_COMPOSE_L;
MACRO_KB_STATUS_COMPOSE KB_STATUS_COMPOSE_R;
MACRO_KB_STATUS_CNTRL KB_STATUS_HOLD;
MACRO_KB_STATUS_CNTRL KB_STATUS_INRESET;
MACRO_KB_STATUS_CNTRL KB_STATUS_NUMLOCK;
MACRO_KB_STATUS_CNTRL KB_STATUS_PREFIX;
MACRO_KB_STATUS_COMPOSE KB_STATUS_PREFIX1;
MACRO_KB_STATUS_COMPOSE KB_STATUS_PREFIX2;
MACRO_KB_STATUS_CNTRL KB_STATUS_REPEATING;
MACRO_KB_STATUS KB_STATUS_SHIFT;
MACRO_KB_STATUS_SHIFT_ANY KB_STATUS_SHIFT_ANY;
MACRO_KB_STATUS_SHIFT KB_STATUS_SHIFT_L;
MACRO_KB_STATUS_COMPOSE KB_STATUS_SHIFT_R;
MACRO_KB_STATUS_CNTRL KB_STATUS_UPDNMODE;
MACRO_KB_STATUS_ALT KB_STATUS_WAIT;
MACRO_KB KB_UNK;
char *KD;
MACRO_TTYDISC KDBDISC;
MACRO_KDBX KDBX_TOOLVER;
MACRO_KDEBUG KDEBUG_BRK;
MACRO_KDEBUG KDEBUG_DISABLED;
MACRO_KDEBUG KDEBUG_ENABLED;
MACRO_KDEBUG KDEBUG_MAGIC;
MACRO_KDEBUG_REQ KDEBUG_REQ_BRKPT;
MACRO_KDEBUG_REQ KDEBUG_REQ_INIT;
MACRO_KDEBUG_REQ KDEBUG_REQ_MEM;
char *KE;
$D44E3C4FF335410EC7120A246FFC2300 KEEPALIVE;
MACRO_KSTKPGS KERNELSTACK;
MACRO_KERNEL_MAJOR KERNEL_MAJOR_VERSION;
MACRO_KERNEL_MAJOR KERNEL_MINOR_VERSION;
MACRO_KERNEL KERNEL_PARAMETERS;
MACRO_KERNEL_STACK KERNEL_STACK_SIZE;
MACRO_KERNEL_VERSION KERNEL_VERSION_MAX;
MACRO_KERN KERN_ABORTED;
MACRO_KERN KERN_ALREADY_IN_SET;
MACRO_KERN KERN_FAILURE;
MACRO_KERN_INTERRUPTED KERN_INTERRUPTED;
MACRO_KERN KERN_INVALID_ADDRESS;
MACRO_KERN KERN_INVALID_ARGUMENT;
MACRO_KERN_STK KERN_LIMIT_EXCEEDED;
MACRO_KERN_STK KERN_MAPENTRIES_LIMIT;
MACRO_KERN KERN_MEMORY_ERROR;
MACRO_KERN KERN_MEMORY_FAILURE;
MACRO_KERN KERN_NAME_EXISTS;
MACRO_KERN KERN_NOT_IN_SET;
MACRO_KERN KERN_NOT_RECEIVER;
MACRO_KERN KERN_NO_ACCESS;
MACRO_KERN KERN_NO_SPACE;
MACRO_KERN KERN_PAGELOCKED;
MACRO_KERN KERN_PROTECTION_FAILURE;
MACRO_KERN KERN_RESOURCE_SHORTAGE;
MACRO_KERN_INTERRUPTED KERN_RESTART;
MACRO_KERN_INTERRUPTED KERN_RM_BREAK_UP;
MACRO_KERN_INTERRUPTED KERN_RM_ENTRY_CONTAINS;
MACRO_KERN_INTERRUPTED KERN_RM_INVALID_UNMAP;
MACRO_KERN_INTERRUPTED KERN_RM_NOT_SUPPORTED;
MACRO_KERN_INTERRUPTED KERN_RM_UNMAP_OVERLAP;
MACRO_KERN KERN_SEGHOLE;
MACRO_KERN_STK KERN_STACK_GROW;
MACRO_KERN_STK KERN_STACK_YELLOW_ZONE;
MACRO_KERN_STK KERN_STK_SHRUNK;
MACRO_KERN KERN_SUCCESS;
MACRO_NULL_DEVICE KEYBOARD_DEVICE;
MACRO_KEYBYTES KEYBYTES;
MACRO_KEYCHECKSUMSIZE KEYCHECKSUMSIZE;
MACRO_HEXKEYBYTES KEYSIZE;
MACRO_KEY_DL KEY_A1;
MACRO_KEY_DL KEY_A3;
MACRO_KEY_DL KEY_ACTION;
MACRO_KEY_DL KEY_B2;
MACRO_KEY_BREAK KEY_BACKSPACE;
MACRO_KEY_DL KEY_BEG;
MACRO_KEY_BREAK KEY_BREAK;
MACRO_KEY_DL KEY_BTAB;
MACRO_KEY_DL KEY_C1;
MACRO_KEY_DL KEY_C3;
MACRO_KEY_DL KEY_CANCEL;
MACRO_KEY_DL KEY_CATAB;
MACRO_KEY_DL KEY_CLEAR;
MACRO_KEY_DL KEY_CLOSE;
MACRO_KEY KEY_CODE_YES;
MACRO_KEY_DL KEY_COMMAND;
MACRO_KEY_DL KEY_COPY;
MACRO_KEY_DL KEY_CREATE;
MACRO_KEY_DL KEY_CTAB;
MACRO_KEY_DL KEY_DC;
MACRO_KEY_SET KEY_DECRYPT;
MACRO_KEY_DL KEY_DL;
MACRO_KEY_BREAK KEY_DOWN;
MACRO_KEY_DL KEY_EIC;
MACRO_KEY_SET KEY_ENCRYPT;
MACRO_KEY_DL KEY_END;
MACRO_KEY_DL KEY_ENTER;
MACRO_KEY_DL KEY_EOL;
MACRO_KEY_DL KEY_EOS;
MACRO_KEY_DL KEY_EXIT;
MACRO_KEY_BREAK KEY_F0;
MACRO_KEY_DL KEY_FIND;
MACRO_KEY_SET KEY_GEN;
MACRO_KEY_SET KEY_GETCRED;
MACRO_KEY_DL KEY_HELP;
MACRO_KEY_BREAK KEY_HOME;
MACRO_KEY_DL KEY_IC;
MACRO_KEY_DL KEY_IL;
MACRO_KEY_BREAK KEY_LEFT;
MACRO_KEY_DL KEY_LL;
MACRO_KEY_DL KEY_MARK;
MACRO_KEY_DL KEY_MAX;
MACRO_KEY_DL KEY_MESSAGE;
MACRO_KEY KEY_MIN;
MACRO_KEY_DL KEY_MOUSE;
MACRO_KEY_DL KEY_MOVE;
MACRO_KEY_DL KEY_NEXT;
keystatus KEY_NOSECRET;
MACRO_KEY_DL KEY_NPAGE;
MACRO_KEY_DL KEY_OPEN;
MACRO_KEY_DL KEY_OPTIONS;
MACRO_KEY_DL KEY_PPAGE;
MACRO_KEY_DL KEY_PREVIOUS;
MACRO_KEY_DL KEY_PRINT;
MACRO_KEY_PROG KEY_PROG;
MACRO_KEY_DL KEY_REDO;
MACRO_KEY_DL KEY_REFERENCE;
MACRO_KEY_DL KEY_REFRESH;
MACRO_KEY_DL KEY_REPLACE;
MACRO_KEY_DL KEY_RESET;
MACRO_KEY_DL KEY_RESTART;
MACRO_KEY_DL KEY_RESUME;
MACRO_KEY_BREAK KEY_RIGHT;
MACRO_KEY_DL KEY_SAVE;
MACRO_KEY_DL KEY_SBEG;
MACRO_KEY_DL KEY_SCANCEL;
MACRO_KEY_DL KEY_SCOMMAND;
MACRO_KEY_DL KEY_SCOPY;
MACRO_KEY_DL KEY_SCREATE;
MACRO_KEY_DL KEY_SDC;
MACRO_KEY_DL KEY_SDL;
MACRO_KEY_DL KEY_SELECT;
MACRO_KEY_DL KEY_SEND;
MACRO_KEY_DL KEY_SEOL;
MACRO_KEY_SET KEY_SET;
MACRO_KEY_DL KEY_SEXIT;
MACRO_KEY_DL KEY_SF;
MACRO_KEY_DL KEY_SFIND;
MACRO_KEY_DL KEY_SHELP;
MACRO_KEY_DL KEY_SHOME;
MACRO_KEY_DL KEY_SIC;
MACRO_KEY_DL KEY_SLEFT;
MACRO_KEY_DL KEY_SMESSAGE;
MACRO_KEY_DL KEY_SMOVE;
MACRO_KEY_DL KEY_SNEXT;
MACRO_KEY_DL KEY_SOPTIONS;
MACRO_KEY_DL KEY_SPREVIOUS;
MACRO_KEY_DL KEY_SPRINT;
MACRO_KEY_DL KEY_SR;
MACRO_KEY_DL KEY_SREDO;
MACRO_KEY_DL KEY_SREPLACE;
MACRO_KEY_DL KEY_SRESET;
MACRO_KEY_DL KEY_SRIGHT;
MACRO_KEY_DL KEY_SRSUME;
MACRO_KEY_DL KEY_SSAVE;
MACRO_KEY_DL KEY_SSUSPEND;
MACRO_KEY_DL KEY_STAB;
keystatus KEY_SUCCESS;
MACRO_KEY_DL KEY_SUNDO;
MACRO_KEY_DL KEY_SUSPEND;
keystatus KEY_SYSTEMERR;
MACRO_KEY_DL KEY_UNDO;
keystatus KEY_UNKNOWN;
MACRO_KEY_BREAK KEY_UP;
MACRO_KEY_VERS KEY_VERS;
char *KH;
MACRO_KINFO_GET KINFO_GET_ARP;
MACRO_KINFO_GET KINFO_GET_ATM_ARP;
MACRO_KINFO_GET KINFO_GET_ICMP;
MACRO_KINFO_VERSION KINFO_GET_ID;
MACRO_KINFO_GET KINFO_GET_IF_NAMES;
MACRO_KINFO_GET KINFO_GET_INTERFACES;
MACRO_KINFO_GET KINFO_GET_IP;
MACRO_KINFO_GET KINFO_GET_ONE_IP_ADDR;
MACRO_KINFO_GET KINFO_GET_ONE_IP_ROUTE;
MACRO_KINFO_GET KINFO_GET_ONE_PROC;
MACRO_KINFO_GET KINFO_GET_ONE_TCP_CONN;
MACRO_KINFO_GET KINFO_GET_ONE_UDP_LIST;
MACRO_KINFO_VERSION KINFO_GET_STR_CFG;
MACRO_KINFO_VERSION KINFO_GET_STR_STATS;
MACRO_KINFO_GET KINFO_GET_SYSTEM;
MACRO_KINFO_GET KINFO_GET_TCP;
MACRO_KINFO_GET KINFO_GET_UDP;
MACRO_KINFO_HI KINFO_HI_MARK;
MACRO_KINFO KINFO_ID;
MACRO_KINFO_HI KINFO_LO_MARK;
MACRO_KINFO_VERSION KINFO_VERSION;
MACRO_TTYDISC KJIDISC;
char *KL;
MACRO_KLC KLC_CALL_FUNCTION;
MACRO_KLC KLC_GET_BOOTLINK_SYMTAB;
MACRO_KLC KLC_SET_STATE;
MACRO_KLC KLC_VM_ALLOCATE;
MACRO_KLC KLC_VM_ALLOCATE_WIRED;
MACRO_KLC KLC_VM_DEALLOCATE;
MACRO_KLC KLC_VM_PROTECT;
MACRO_KLC KLC_VM_READ;
MACRO_KLC KLC_VM_WRITE;
MACRO_KLOADSRV KLOADSRV_TOOLVER;
MACRO_KMEBADREQUEST KMEBADREQUEST;
MACRO_KMEMNAMSZ KMEMNAMSZ;
MACRO_NULL_DEVICE KNOBBOX_DEVICE;
MACRO_VENDOR KNOWN_DEFECTS;
MACRO_F1 KP_0;
MACRO_F1 KP_1;
MACRO_F1 KP_2;
MACRO_F1 KP_3;
MACRO_F1 KP_4;
MACRO_F1 KP_5;
MACRO_F1 KP_6;
MACRO_F1 KP_7;
MACRO_F1 KP_8;
MACRO_F1 KP_9;
MACRO_F1 KP_COMMA;
MACRO_F1 KP_ENTER;
MACRO_F1 KP_MINUS;
MACRO_F1 KP_PERIOD;
MACRO_F1 KP_PF1;
MACRO_F1 KP_PF2;
MACRO_F1 KP_PF3;
MACRO_F1 KP_PF4;
MACRO_F1 KP_UP;
char *KR;
char *KS;
MACRO_KSM_MEM KSM_CAT_NAME_SIZE;
MACRO_KSM_CLU KSM_CLU_OP_ADD;
MACRO_KSM_CLU KSM_CLU_OP_DIFFERENT;
MACRO_KSM_CLU KSM_CLU_OP_OR;
MACRO_KSM_CLU KSM_CLU_OP_SAME;
MACRO_KSM_CLU KSM_CLU_OP_UNKNOWN;
MACRO_KSM KSM_CMD_NAME_SIZE;
MACRO_KSM_CURRENT KSM_CURRENT_VERSION;
MACRO_KSM_FIND KSM_FIND_CHILD;
MACRO_KSM_FIND KSM_FIND_INST;
MACRO_KSM_FIND KSM_FIND_NEXT;
MACRO_KSM_FIND KSM_FIND_PARENT;
MACRO_KSM_FIND KSM_FIND_PEER;
MACRO_KSM_FIND KSM_FIND_THIS;
MACRO_KSM_FLAG KSM_FLAG_QUERYING;
MACRO_KSM_SET KSM_FLAG_ROOT_VERIFIED;
MACRO_KSM_FLAG KSM_FLAG_SIZING;
MACRO_KSM_MEM KSM_MEM_REGISTERED;
MACRO_KSM_MEM KSM_MEM_REGISTERED_CAT_REL;
MACRO_KSM_MEM KSM_MEM_REGISTERED_HIER_REL;
MACRO_KSM_MEM KSM_MEM_REGISTERED_MIB_REL;
MACRO_KSM_OP KSM_OP_FIND_CATEGORY;
MACRO_KSM_OP KSM_OP_FIND_HIERARCHY;
MACRO_KSM_OP KSM_OP_FIND_MIBID;
MACRO_KSM_OP KSM_OP_MREQ_GETCATTR;
MACRO_KSM_OP KSM_OP_MREQ_GETCATTR_ALL;
MACRO_KSM_OP KSM_OP_MREQ_GETCOMM;
MACRO_KSM_OP KSM_OP_MREQ_GETDATTR;
MACRO_KSM_OP KSM_OP_MREQ_GETDATTR_ALL;
MACRO_KSM_OP KSM_OP_MREQ_GETSATTR;
MACRO_KSM_OP KSM_OP_MREQ_GETSATTR_ALL;
MACRO_KSM_OP KSM_OP_MREQ_OTHER;
MACRO_KSM_OP KSM_OP_NONPRIV_MEM_MAX;
MACRO_KSM_OP KSM_OP_NONPRIV_MEM_MIN;
MACRO_KSM_OP KSM_OP_NONPRIV_SET_MAX;
MACRO_KSM_OP KSM_OP_NONPRIV_SET_MIN;
MACRO_CFG_OP_KSM_FIND KSM_OP_NONPRIV_SYS_MAX;
MACRO_CFG_OP_KSM_FIND KSM_OP_NONPRIV_SYS_MIN;
MACRO_KSM_OP_PRIV KSM_OP_PRIV_MEM_MAX;
MACRO_KSM_OP_PRIV KSM_OP_PRIV_MEM_MIN;
MACRO_KSM_OP_PRIV KSM_OP_PRIV_MREQ_SETCATTR;
MACRO_KSM_OP_PRIV KSM_OP_PRIV_MREQ_SETSATTR;
MACRO_KSM_OP_PRIV KSM_OP_PRIV_SET_MAX;
MACRO_KSM_OP_PRIV KSM_OP_PRIV_SET_MIN;
MACRO_KSM_OP KSM_OP_PRIV_SYS_MAX;
MACRO_KSM_OP KSM_OP_PRIV_SYS_MIN;
MACRO_KSM_OP KSM_OP_SREQ_GETCAT_NAMES;
MACRO_KSM_OP KSM_OP_SREQ_GETINFO;
MACRO_KSM_SET KSM_SET_NAME_SIZE;
MACRO_KSM_TYPE KSM_TYPE_COUNTER;
MACRO_KSM_TYPE KSM_TYPE_DEFAULT;
MACRO_KSM_TYPE KSM_TYPE_TIME_STAMP;
MACRO_KSM_VERSION KSM_VERSION_1;
MACRO_KSTKPGS KSTKPGS;
ShortKeySym KSToShortKS(KeySym sym, KeySym *private, int create);
char *KU;
MACRO_CLSIZELOG2 KVSTART_PFN;
MACRO_KbdFeedbackClass KbdFeedbackClass;
MACRO_KeepAlive KeepAlive;
MACRO_ADDRESS Kernel_virtual_start;
MACRO_ADDRESS Kernel_virtual_start_32bit_console;
unsigned int Key;
MACRO_KeyClass KeyClass;
MACRO_KeyPress KeyPress;
MACRO_NoEventMask KeyPressMask;
MACRO_KeyPress KeyRelease;
MACRO_NoEventMask KeyReleaseMask;
MACRO_KeyPress KeymapNotify;
MACRO_NoEventMask KeymapStateMask;
MACRO_L001000 L001000;
MACRO_LABELG LABELG_ACC_PAD;
MACRO_LABELSECTOR LABELOFFSET;
MACRO_LABELSECTOR LABELSECTOR;
MACRO_LABEL LABEL_ACC_PAD;
MACRO_LABLEN LABLEN;
MACRO_LABMAX LABMAX;
MACRO_NONE LANDSAT;
MACRO_LARGECOST LARGECOST;
MACRO_FIRST LAST;
MACRO_KeyPress LASTEvent;
MACRO_ANYMARK LASTMARK;
MACRO_LAST_METHOD LAST_METHOD;
MACRO_LAST LAST_NUM;
MACRO_LAST_RENDITION LAST_RENDITION;
MACRO_LBX_IMAGE LBX_IMAGE_COMPRESS_BAD_MALLOC;
MACRO_LBX_IMAGE LBX_IMAGE_COMPRESS_NOT_WORTH_IT;
MACRO_LBX_IMAGE LBX_IMAGE_COMPRESS_NO_SUPPORT;
MACRO_LBX LBX_IMAGE_COMPRESS_SUCCESS;
MACRO_LBX LBX_MAX_DEPTHS;
MACRO_EV3 LCA4_CPU;
MACRO_TANDEM LCASE;
MACRO_UNKN LCA_EB66;
MACRO_UNKN LCA_MUSTANG;
MACRO_LCRTBS LCRTBS;
MACRO_LCRTBS LCRTERA;
MACRO_LCRTBS LCRTKIL;
MACRO_LCRTBS LCTLECH;
MACRO_LC LC_ALL;
MACRO_LC LC_COLLATE;
MACRO_LC_CTYPE LC_CTYPE;
MACRO_LC_CTYPE LC_MESSAGES;
MACRO_LC_CTYPE LC_MONETARY;
MACRO_LC_CTYPE LC_NUMERIC;
MACRO_LC_CTYPE LC_TIME;
MACRO_VDATA LDATA;
MACRO_LDBL_DIG LDBL_DIG;
MACRO_LDBL LDBL_MANT_DIG;
MACRO_LDBL_MAX_10 LDBL_MAX_10_EXP;
MACRO_LDBL_MAX LDBL_MAX_EXP;
MACRO_LDBL_MIN LDBL_MIN_10_EXP;
MACRO_LDBL_DIG LDBL_MIN_EXP;
MACRO_LDBL_WILDNUM LDBL_WILDNUM;
MACRO_LDOPEN LDCHG;
MACRO_LDOPEN LDCLOSE;
MACRO_LCRTBS LDECCTQ;
MACRO_LDOPEN LDGETT;
MACRO_LDIOC LDIOC;
MACRO_LDOPEN LDOPEN;
MACRO_LT LDR_DATA_MAGIC;
MACRO_LDR_EXEC_SETUID LDR_EXEC_NOPRIVS_F;
MACRO_LDR_EXEC_SETUID LDR_EXEC_PTRACE_F;
MACRO_LDR_EXEC_SETUID LDR_EXEC_SETGID_F;
MACRO_LDR_EXEC_SETUID LDR_EXEC_SETUID_F;
MACRO_LDR_EXEC LDR_EXEC_SYSTEM_MASK;
MACRO_LDR_EXEC LDR_EXEC_USER_MASK;
MACRO_LDR_NOINIT LDR_EXPORTONLY;
MACRO_LDR_FLAGS LDR_FLAGS_PROPAGATE;
MACRO_LDR_NOINIT LDR_MAIN;
MACRO_LDR LDR_NOFLAGS;
MACRO_LDR_NOINIT LDR_NOINIT;
MACRO_LDR_NOINIT LDR_NOPREXIST;
MACRO_LDR_NOINIT LDR_NOUNLOAD;
MACRO_LDR_NOINIT LDR_NOUNREFS;
MACRO_LDR_FLAGS LDR_NULL_MODULE;
MACRO_LDR_NOINIT LDR_PREXIST;
MACRO_LDR_R LDR_R;
MACRO_LDR LDR_REGION_NAME_MAX;
MACRO_LDR_NOINIT LDR_VERBOSE;
MACRO_LDR_R LDR_W;
MACRO_LDR_NOINIT LDR_WIRE;
MACRO_LDR_R LDR_X;
MACRO_LDOPEN LDSETT;
MACRO_LD LD_FORCE;
MACRO_LD LD_NO_SYM;
MACRO_LD LD_REPORT;
MACRO_LD LD_SYM_ONLY;
MACRO_LD_TOOLVER LD_TOOLVER;
MACRO_LEAVE LEAVE_INVITE;
MACRO_NAK LEDS;
MACRO_F1 LEFT;
MACRO_TOP LEFT_EDGE;
MACRO_F1 LEFT_NPAD;
char *LEFT_PARM;
MACRO_LEVEL LEVEL_TOKEN;
MACRO_LCRTBS LFLUSHO;
MACRO_LFTORG LFTORG;
MACRO_LF LF_READ_SLEEPING;
MACRO_LF LF_RECWRITE;
MACRO_LF LF_WRITE;
MACRO_SMAGIC LIBMAGIC;
MACRO_LIM LIM_CORE;
MACRO_LIM LIM_CPU;
MACRO_LIM LIM_DATA;
MACRO_LIM LIM_FSIZE;
MACRO_LIM LIM_MAXRSS;
MACRO_LIM LIM_NORAISE;
MACRO_LIM LIM_STACK;
int LINES;
MACRO_LINESZ LINESZ;
MACRO_COLL LINE_MAX;
MACRO_CHILD LINK_MAX;
MACRO_LIO LIO_FDATASYNC;
MACRO_LIO LIO_FSYNC;
MACRO_LIO LIO_GROUP;
MACRO_LIO_NOP LIO_NOP;
MACRO_LIO LIO_NOWAIT;
MACRO_LIO LIO_READ;
MACRO_LIO LIO_SUSPEND;
MACRO_LIO LIO_WAIT;
MACRO_LIO LIO_WRITE;
MACRO_LIST LIST_ADD_AFTER;
MACRO_LIST LIST_ADD_BEFORE;
MACRO_LIST LIST_BEGINNING;
MACRO_LIST LIST_DELETE;
MACRO_LIST LIST_END;
MACRO_LIST LIST_REPLACE;
MACRO_LITOUT LITOUT;
MACRO_BIGENDIAN LITTLEENDIAN;
MACRO_LITTLE LITTLE_ENDIAN;
MACRO_LOCKINFO LI_DOHIER;
MACRO_LOCKINFO LI_ORDERED;
MACRO_LOCKINFO LI_ORDNEXT;
MACRO_LOCKINFO LI_PROBE;
MACRO_LOCKINFO LI_RWS;
MACRO_LOCKINFO LI_SPLMASK;
MACRO_LOCKINFO LI_VALID;
MACRO_F1 LK_F11;
MACRO_F1 LK_F12;
MACRO_F1 LK_F13;
char *LL;
MACRO_LLC_SNAPSAP2 LLC_ISOSAP_DATA;
MACRO_LLC_SNAPSAP2 LLC_ISOSAP_MASK;
MACRO_LLC LLC_ISO_LSAP;
MACRO_LLC_UICMD LLC_SNAPSAP1_ETHER_DATA;
MACRO_LLC_SNAPSAP2 LLC_SNAPSAP2_ETHER_DATA;
MACRO_LLC_SNAPSAP2 LLC_SNAPSAP2_ETHER_MASK;
MACRO_LLC_SNAPSAP LLC_SNAPSAP_DATA;
MACRO_LLC_SNAPSAP LLC_SNAPSAP_MASK;
MACRO_LLC_UICMD LLC_SNAP_LEN;
MACRO_LLC_SNAP LLC_SNAP_LSAP;
MACRO_LLC LLC_TEST;
MACRO_LLC_TEST LLC_TEST_LEN;
MACRO_LLC LLC_TEST_P;
MACRO_LLC LLC_UI;
MACRO_LLC_UICMD LLC_UICMD_LEN;
MACRO_LLC LLC_UI_P;
MACRO_LLC LLC_XID;
MACRO_LLC_XID LLC_XID_LEN;
MACRO_LLC LLC_XID_P;
MACRO_LCRTBS LLITOUT;
MACRO_LL_INACTIVE LL_CONNECTING;
MACRO_LL_INACTIVE LL_DISCONNECTING;
MACRO_LL LL_EXACT_MATCH;
MACRO_LL_LINELEN LL_HOSTLEN;
MACRO_LL LL_IGNORE_INT_VER;
MACRO_LL_INACTIVE LL_INACTIVE;
MACRO_LL_LINELEN LL_LINELEN;
MACRO_LL LL_NONE;
MACRO_LL LL_NO_LOAD;
MACRO_LL_INACTIVE LL_RUNNING;
MACRO_LL LL_USE_SO_SUFFIX;
MACRO_LCRTBS LMDMBUF;
MACRO_LMF_SETSERV LMFF_CLR_RESTRICTED;
MACRO_LMF_SETSERV LMFF_COPY;
MACRO_LMFF LMFF_MORE;
MACRO_LMFF LMF_ACTIVITY;
MACRO_LMF_SETSERV LMF_ADJLIC;
MACRO_LMF_SETSERV LMF_CMASK;
MACRO_LMF LMF_FAMILY;
MACRO_LMF_SETSERV LMF_GETAUTH;
MACRO_LMF_GETSERV LMF_GETLIC;
MACRO_LMF_GETSERV LMF_GETSERV;
MACRO_LMF_GETSERV LMF_GETSMM;
MACRO_LMF_HARDWARE LMF_HARDWARE;
MACRO_LMF_PRODUCER LMF_PRODUCER;
MACRO_HASHMASK LMF_PRODUCT;
MACRO_LMF_SETSERV LMF_RELAUTH;
MACRO_LMF_SETSERV LMF_SETLIC;
MACRO_LMF_SETSERV LMF_SETSERV;
MACRO_LMF_SETSERV LMF_SETSMM;
MACRO_LMF_TOKEN LMF_TOKEN;
MACRO_LM LM_FORWARDMASK;
MACRO_LM LM_MODE;
MACRO_LM LM_SLC;
MACRO_AREGTYPE LNKTYPE;
MACRO_LCRTBS LNOFLSH;
MACRO_LCRTBS LNOHANG;
MACRO_LOADER LOADER_TOOLVER;
MACRO_OPROCESSOR_SET LOAD_SCALE;
MACRO_QVSS LOCAL;
MACRO_LOCALDOMAINPARTS LOCALDOMAINPARTS;
MACRO_CHARMAP LOCALE_LOCALECONV;
MACRO_CHARMAP LOCALE_LOCALE_INIT;
MACRO_CHARMAP LOCALE_NL_LANGINFO;
MACRO_LOCAL LOCAL_P_SAP;
MACRO_LOCKINFO LOCKINFO_SHIFT;
MACRO_LOCKSTATS LOCKSTATS_SHIFT;
MACRO_LOCK2 LOCK_ERROR;
MACRO_LOCK LOCK_EX;
MACRO_LOCK LOCK_NB;
MACRO_LOCK LOCK_SH;
MACRO_LOCK2 LOCK_SUCCESS;
MACRO_LOCK2 LOCK_TIMEOUT;
MACRO_LOCK LOCK_UN;
MACRO_LOG2BPQUAD LOG2BPQUAD;
MACRO_LOGBPW LOGBPW;
MACRO_AUDIT_START LOGIN;
MACRO_LOGIN LOGIN_NAME_MAX;
MACRO_EMPTY LOGIN_PROCESS;
MACRO_I_TRCLOG LOGMSGSZ;
MACRO_AUDIT_START LOGOUT;
MACRO_LOG LOG_ALERT;
MACRO_LOG_KERN LOG_AUTH;
MACRO_LOG_PID LOG_CONS;
MACRO_LOG LOG_CRIT;
MACRO_LOG_KERN LOG_CRON;
MACRO_LOG_KERN LOG_DAEMON;
MACRO_LOG LOG_DEBUG;
MACRO_LOG LOG_EMERG;
MACRO_LOG LOG_ERR;
MACRO_LOG_NFACILITIES LOG_FACMASK;
MACRO_LOG LOG_INFO;
MACRO_LOG_KERN LOG_KERN;
MACRO_LOG_KERN LOG_LOCAL0;
MACRO_LOG_KERN LOG_LOCAL1;
MACRO_LOG_KERN LOG_LOCAL2;
MACRO_LOG_KERN LOG_LOCAL3;
MACRO_LOG_KERN LOG_LOCAL4;
MACRO_LOG_KERN LOG_LOCAL5;
MACRO_LOG_KERN LOG_LOCAL6;
MACRO_LOG_KERN LOG_LOCAL7;
MACRO_LOG_KERN LOG_LPR;
MACRO_LOG_KERN LOG_MAIL;
MACRO_LOG_KERN LOG_MEGASAFE;
MACRO_LOG_PID LOG_NDELAY;
MACRO_LOG_KERN LOG_NEWS;
MACRO_LOG_NFACILITIES LOG_NFACILITIES;
MACRO_LOG LOG_NOTICE;
MACRO_LOG_PID LOG_NOWAIT;
MACRO_LOG_PID LOG_ODELAY;
MACRO_LOG_PID LOG_PERROR;
MACRO_LOG_PID LOG_PID;
MACRO_LOG_PRIMASK LOG_PRIMASK;
MACRO_LOG_KERN LOG_SYSLOG;
MACRO_LOG_KERN LOG_USER;
MACRO_LOG_KERN LOG_UUCP;
MACRO_LOG LOG_WARNING;
MACRO_NL_NMAX LONG_BIT;
MACRO_BOOL LONG_DOUBLE128_TOKEN;
MACRO_DOUBLE LONG_DOUBLE_TOKEN;
MACRO_LONG_LONG LONG_LONG_TOKEN;
MACRO_INT LONG_MAX;
MACRO_LONG LONG_MIN;
MACRO_INT_TOKEN LONG_TOKEN;
MACRO_LEAVE LOOK_UP;
MACRO_B2 LOW_COLOR;
MACRO_LOW LOW_DENS;
MACRO_LCRTBS LPASS8;
MACRO_LCRTBS LPENDIN;
MACRO_PLOT LPR;
MACRO_LPRPOUT LPRADAP;
MACRO_LPRSYNC LPRALLERR;
MACRO_LPRSYNC LPRFONTINIT;
MACRO_PLOT LPRGET;
MACRO_PLOT LPRGETA;
MACRO_PLOT LPRGETV;
MACRO_PLOT LPRGMOD;
MACRO_PLOT LPRGTOV;
MACRO_LPRPOUT LPRINIT;
MACRO_LPRPARALLEL LPRPARALLEL;
MACRO_LPRPOUT LPRPERR;
MACRO_LPRPOUT LPRPOUT;
MACRO_LPRPOUT LPRPTIM;
MACRO_PRPWPROG LPRPWPROG_NUM;
MACRO_LPRPOUT LPRREAD;
MACRO_LPRPARALLEL LPRSERIAL;
MACRO_PLOT LPRSET;
MACRO_PLOT LPRSETA;
MACRO_PLOT LPRSETV;
MACRO_PLOT LPRSMOD;
MACRO_LPRPOUT LPRSOFT;
MACRO_PLOT LPRSTOV;
MACRO_LPRSYNC LPRSYNC;
MACRO_LCRTBS LPRTERA;
MACRO_LPRPOUT LPRTERR;
MACRO_PLOT LPRUFLS;
MACRO_PLOT LPRUGES;
MACRO_PLOT LPRURES;
MACRO_PLOT LPRVRMG;
MACRO_PLOT LPRVRMS;
MACRO_AUDIT_START LPR_EVENT;
MACRO_LSBFirst LSBFirst;
MACRO_MS_STAMP LS_STAMP;
MACRO_LCRTBS LTILDE;
MACRO_LCRTBS LTOSTOP;
MACRO_LTYPE_TCP LTYPE_ARP;
MACRO_LTYPE LTYPE_BDEVSW;
MACRO_LTYPE LTYPE_BUF;
MACRO_LTYPE LTYPE_CDEVSW;
MACRO_LTYPE LTYPE_DEFAULT_UNI;
MACRO_LTYPE_TCP LTYPE_DOMAIN;
MACRO_LTYPE LTYPE_DQUOT;
MACRO_LTYPE LTYPE_FICHAIN;
MACRO_LTYPE LTYPE_FILE_IO;
MACRO_LTYPE_FS LTYPE_FS_LAST;
MACRO_LTYPE LTYPE_FS_START;
MACRO_LTYPE LTYPE_HOSTNAME;
MACRO_LTYPE LTYPE_INODE_IO;
MACRO_LTYPE_TCP LTYPE_INPCB;
MACRO_LTYPE_INTR LTYPE_INTR_START;
MACRO_LTYPE_TCP LTYPE_IP;
MACRO_LTYPE LTYPE_MOUNT_LOOKUP;
MACRO_LTYPE_NET LTYPE_NET_LAST;
MACRO_LTYPE_PROC_LAST LTYPE_NET_START;
MACRO_LTYPE LTYPE_NFSD;
MACRO_LTYPE LTYPE_NFSNODE_IO;
MACRO_LTYPE_TCP LTYPE_NFSREQ;
MACRO_LTYPE_PROC LTYPE_PGHASH;
MACRO_LTYPE_PROC LTYPE_PGRP;
MACRO_LTYPE_PROC LTYPE_PROCREL;
MACRO_LTYPE_PROC_LAST LTYPE_PROC_LAST;
MACRO_LTYPE_PROC LTYPE_PROC_START;
MACRO_LTYPE LTYPE_PTY;
MACRO_LTYPE_TCP LTYPE_RAW;
MACRO_LTYPE_TCP LTYPE_ROUTE;
MACRO_LTYPE LTYPE_SCC_TTY;
MACRO_LTYPE_TCP LTYPE_SOCKBUF;
MACRO_LTYPE_TCP LTYPE_SOCKET;
MACRO_LTYPE LTYPE_SPECH;
MACRO_LTYPE_INTR LTYPE_SWINTR;
MACRO_LTYPE_SWINTR LTYPE_SWINTR_LAST;
MACRO_LTYPE_TCP LTYPE_TCP;
MACRO_LTYPE_PROC LTYPE_UADDR;
MACRO_LTYPE_TCP LTYPE_UDP;
MACRO_LTYPE LTYPE_UMPQ;
MACRO_LTYPE LTYPE_VFSSW;
MACRO_LTYPE LTYPE_VNODE_AUX;
MACRO_LT LT_NEWLIB_BP_ADDR;
MACRO_LT LT_NULL;
MACRO_LWC LWC_PRI_MAX;
MACRO_CONSOLE LYNX_DTYPE;
MACRO_L_SET L_INCR;
MACRO_L_SET L_SET;
MACRO_L_SET L_XTND;
MACRO_L L_ctermid;
MACRO__O L_cuserid;
XcmsFloat L_star;
MACRO_Success LastExtensionError;
$2A9A0AD3137DAC1E7C7E9C93534584E8 LayoutDone;
$2A9A0AD3137DAC1E7C7E9C93534584E8 LayoutInProgress;
$2A9A0AD3137DAC1E7C7E9C93534584E8 LayoutPending;
int LbxImageDecodeFaxG42D(unsigned __int8 *, unsigned __int8 *, int, int, int, int);
int LbxImageDecodePackBits(char *, char *, int, int);
int LbxImageEncodeFaxG42D(unsigned __int8 *, unsigned __int8 *, int, int, int, int, int, int *);
int LbxImageEncodePackBits(char *, char *, int, int, int, int, int, int *);
MACRO_KeyPress LeaveNotify;
MACRO_NoEventMask LeaveWindowMask;
MACRO_KbdFeedbackClass LedFeedbackClass;
MACRO_LedModeOff LedModeOff;
MACRO_LedModeOff LedModeOn;
MACRO_LeftToRightDrawDirection LeftToRightDrawDirection;
MACRO_LineSolid LineDoubleDash;
MACRO_LineSolid LineOnOffDash;
MACRO_LineSolid LineSolid;
MACRO_LockDownModeSwitch LockDownModeSwitch;
MACRO_ShiftMapIndex LockMapIndex;
MACRO_ShiftMask LockMask;
MACRO_RaiseLowest LowerHighest;
MACRO_M68MAGIC M68MAGIC;
MACRO_M68MAGIC M68TVMAGIC;
char *MA;
MACRO_NOT MACHINE_UNKNOWN;
MACRO_MAC MAC_ADDR_LEN;
MACRO_MADV MADV_DONTNEED;
MACRO_MADV MADV_DONTNEED_COMPAT;
MACRO_MADV MADV_NORMAL;
MACRO_MADV MADV_RANDOM;
MACRO_MADV MADV_SEQUENTIAL;
MACRO_MADV MADV_SPACEAVAIL;
MACRO_MADV MADV_WILLNEED;
MACRO_MAGIC MAGIC_ARCH_MASK;
MACRO_MAGIC MAGIC_ARCH_SHFT;
MACRO_MAGIC_MIPS1 MAGIC_MIPS1;
MACRO_MAGIC_MIPS1 MAGIC_MIPS2;
MACRO_MAGIC_MIPS3 MAGIC_MIPS3;
MACRO_MAGIC_S MAGIC_S_ARCH_MASK;
MACRO_MAGIC_S MAGIC_S_ARCH_SHFT;
MACRO_MAGIC2 MAGIC_VALUE;
MACRO_MAGNUM MAGNUM;
MACRO_MAJ MAJ_OBJ_STAMP;
MACRO_MAJ_SYM MAJ_SYM_STAMP;
$D44E3C4FF335410EC7120A246FFC2300 MANAGE;
MACRO_MAPSIZE MAPSIZE;
MACRO_MAP_ANON MAP_ANON;
MACRO_MAP_FILE MAP_ANONYMOUS;
MACRO_MAP_FOLDCZONE MAP_COMPOSITE;
MACRO_REGLOCK MAP_FAILED;
MACRO_MAP_FILE MAP_FILE;
MACRO_MAP_VARIABLE MAP_FIXED;
MACRO_MAP_FOLDCZONE MAP_FOLDCZONE;
MACRO_MAP_FOLDCZONE MAP_FOLDDIGITS;
MACRO_MAP_VARIABLE MAP_HASSEMAPHORE;
MACRO_MAP_VARIABLE MAP_INHERIT;
MACRO_MAP_VARIABLE MAP_MBUF;
MACRO_MAP_FOLDCZONE MAP_PRECOMPOSED;
MACRO_MAP MAP_PRIVATE;
MACRO_UNMAP MAP_SCREEN;
MACRO_MAP MAP_SHARED;
MACRO_MAP_VARIABLE MAP_TEXT;
MACRO_MAP_ANON MAP_TYPE;
MACRO_MAP_VARIABLE MAP_UNALIGNED;
MACRO_MAP_VARIABLE MAP_VARIABLE;
MACRO_MARK MARK_FLG_CREATE;
MACRO_MARK MARK_FLG_DELETE;
MACRO_MARK MARK_FLG_MODIFY;
MACRO_MARK MARK_FLG_PRESENT;
MACRO_MARK_PRESENT MARK_PRESENT;
MACRO_MARKb MARKb;
MACRO_ADD MASK7b;
MACRO_MASK MASK_OBJ;
MACRO_P4 MAT;
MACRO_MATCH MATCH_CHAR;
MACRO_MATTR MATTR_CACHE;
MACRO_MATTR MATTR_MIGRATE;
MACRO_MATTR MATTR_REPLICATE;
MACRO_MATTR_VAL MATTR_VAL_CACHE_FLUSH;
MACRO_MATTR_VAL MATTR_VAL_DCACHE_FLUSH;
MACRO_MATTR_VAL MATTR_VAL_GET;
MACRO_MATTR_VAL MATTR_VAL_ICACHE_FLUSH;
MACRO_MATTR_VAL MATTR_VAL_OFF;
MACRO_MATTR_VAL MATTR_VAL_ON;
MACRO_MAXAPUSH MAXAPUSH;
MACRO_ARCDENSITY MAXARCS;
MACRO_SHMSEG MAXBSIZE;
MACRO_MAXCDNAME MAXCDNAME;
MACRO_COMPAT MAXCOMLEN;
MACRO_NUMSYSCALLARGS MAXCOMPATNAMSZ;
MACRO_MAXCUT MAXCUT;
MACRO_MAXDEFECTS MAXDEFECTS;
MACRO_MAXDFLSRCH MAXDFLSRCH;
MACRO_MAXDIMENSION MAXDIMENSION;
MACRO_PACKETSZ MAXDNAME;
MACRO_MAXDFLSRCH MAXDNSRCH;
MACRO_MAXDOMNAMELEN MAXDOMNAMELEN;
MACRO_EA MAXDSIZ;
MACRO_MAXERRMSGLEN MAXERRMSGLEN;
MACRO_MAXEXECBUF MAXEXECBUF;
MACRO_MAXFLDS MAXFLDS;
MACRO_MAXFRAG MAXFRAG;
MACRO_MAXPHASE MAXFREQ;
MACRO_MAXGIDS MAXGIDS;
MACRO_MAXHABITATS MAXHABITATS;
MACRO_MAXHABSYSCALL MAXHABSYSCALL_LEN;
MACRO_NGROUPS_0 MAXHOSTNAMELEN;
MACRO_MAXINTERP MAXINTERP;
MACRO_RNF MAXKEYLEN;
MACRO_MAXLABEL MAXLABEL;
MACRO_VNODE MAXLINK;
MACRO_MAXLOGNAME MAXLOGNAME;
MACRO_MAXMAPNAMELEN MAXMAPNAMELEN;
MACRO_MAXNAMELEN MAXNAMELEN;
MACRO_MAXNAMLEN MAXNAMLEN;
MACRO_MAXNETNAMELEN MAXNETNAMELEN;
MACRO_NFS_MAXTIMO MAXNFSDS;
MACRO_MAXNS MAXNS;
MACRO_R_R0 MAXPACKET;
MACRO_NDPROTO MAXPACKETLEN;
MACRO_RIPCMD MAXPACKETSIZE;
MACRO_MAXPARTITIONS MAXPARTITIONS;
MACRO_UBSHIFT MAXPATHLEN;
MACRO_MAXPHASE MAXPHASE;
MACRO_MAXPS MAXPS;
MACRO_MAXQUOTAS MAXQUOTAS;
MACRO_LOCALDOMAINPARTS MAXRESOLVSORT;
MACRO_MAXREVSZ MAXREVSZ;
MACRO_MAXRSS MAXRSS;
MACRO_MINSEC MAXSEC;
MACRO_MAXSELFD MAXSELFD;
MACRO_MAXSSIZ MAXSSIZ;
MACRO_MAXSTANZANAMSZ MAXSTANZANAMSZ;
MACRO_MAXSTATICMODS MAXSTATICMODS;
MACRO_MAXSYMLINKS MAXSYMLINKS;
MACRO_SHIFT MAXTC;
MACRO_MAXTTL MAXTTL;
MACRO_MAXVIFS MAXVIFS;
MACRO_MAXMAPNAMELEN MAXYPDATALEN;
MACRO_PERM MAX_ACL_PERM;
MACRO_MAX_ARCHLEN MAX_ARCHLEN;
MACRO_MAX_ASCII MAX_ASCII_ORDER_NUMBER_LENGTH;
MACRO_MAX_AUTH MAX_AUTH_BYTES;
MACRO_MAX_BATTERIES MAX_BATTERIES;
MACRO_MAX_KINFO_STREAMS MAX_BUF;
MACRO_MAX MAX_CANON;
MACRO_SNMP_STS MAX_CPUNAME_LEN;
MACRO_MAX_DOMAINLEN MAX_DOMAINLEN;
MACRO_MAX_DQ MAX_DQ_TIME;
MACRO_MAX_DOMAINLEN MAX_ENVSTRING;
MACRO_MAX_EXEC MAX_EXEC_AUXV;
MACRO_MAX_PATH MAX_FILEID;
MACRO_MIN MAX_HAB_NO;
MACRO_MAX_PER MAX_HASHSZ;
MACRO_MAX_IFNAME MAX_IFNAME_LEN;
MACRO_MAX_IFNAME MAX_IFVER_LEN;
MACRO_MAX MAX_INPUT;
MACRO_IPQ MAX_IPOPTLEN;
MACRO_MAX_IQ MAX_IQ_TIME;
MACRO_ISO_SAP MAX_ISO_SAP;
MACRO_KINFO_VERSION MAX_KBUF;
MACRO_MAX_KINFO MAX_KINFO_BUF;
MACRO_MAX_KINFO_STREAMS MAX_KINFO_STREAMS;
MACRO_MAX_LANGS MAX_LANGS;
MACRO_MAX_LANGS MAX_LANG_CODE;
MACRO_NOT MAX_LIFE;
MACRO_MAX_LOCK MAX_LOCK;
MACRO_MAX_MACHINELEN MAX_MACHINELEN;
MACRO_MAX_MACHINE MAX_MACHINE_NAME;
MACRO_MAX_MASTER MAX_MASTER_NAME;
MACRO_MAX_METHOD MAX_METHOD_NAME;
MACRO_MAX_MNT MAX_MNT_PATHLEN;
MACRO_MAX_NAME MAX_NAME;
MACRO_MAX_NETOBJ MAX_NETOBJ_SZ;
MACRO_NBBY MAX_NOFILE;
MACRO_MAX_NUM_CLASSES MAX_NUM_CLASSES;
MACRO_MAX2 MAX_NUM_COLORS;
MACRO_MAX_NUM_CLASSES MAX_NUM_MEMBERS;
MACRO_MAX_NUM MAX_NUM_PARTITIONS;
MACRO_RET_SPECIAL MAX_PAGE_NUMBER;
MACRO_MAX_PAGE MAX_PAGE_OFFSET;
MACRO_MAX_PASS MAX_PASS;
MACRO_SEC_BSD MAX_PASSWORD_LENGTH;
MACRO_MAX_PATH MAX_PATH_LEN;
MACRO_MAX_PER MAX_PER_LIST;
MACRO_MAX_PROMPTS MAX_PROMPTS;
MACRO_MAX_RAPI MAX_RAPI_SESS;
MACRO_MAX_PAGE MAX_REC_NUMBER;
MACRO_MAX_R MAX_R_SN;
MACRO_R_ABS MAX_R_TYPE;
MACRO_MAX_S5BSIZE MAX_S5BSIZE;
MACRO_TCPOOB MAX_SACK_ENTRIES;
MACRO_TRLR MAX_SAP;
MACRO_MAX_SECONDS MAX_SECONDS;
MACRO_MAX_LOCK MAX_SLOCK;
MACRO_LMF_SETSERV MAX_SMMD;
MACRO_MAX_STATES MAX_STATES;
MACRO_TRLR MAX_TRLR_SAP;
MACRO_MAX_UPCALLS MAX_UPCALLS;
MACRO_MAX_VFSOPS MAX_VFSOPS_FSNAME;
MACRO_MA MA_BREAK;
MACRO_MA MA_EXEC;
MACRO_MA MA_READ;
MACRO_MA MA_SHARED;
MACRO_MA MA_STACK;
MACRO_MA MA_WRITE;
MACRO_MBMAXLEN MBMAXLEN;
MACRO_SB_CODESET MB_CODESET;
MACRO_MB MB_LEN_MAX;
MACRO_MC68KROMAGIC MC68KPGMAGIC;
MACRO_MC68KROMAGIC MC68KROMAGIC;
MACRO_MC68KWRMAGIC MC68KWRMAGIC;
MACRO_MC68MAGIC MC68MAGIC;
MACRO_MC68KWRMAGIC MC68TVMAGIC;
MACRO_MCL2KBYTES MCL2KBYTES;
MACRO_MSIZE MCLBYTES;
MACRO_MS_ASYNC MCL_CURRENT;
MACRO_MS_ASYNC MCL_FUTURE;
MACRO_MS_ASYNC MCL_FUTURE_SELECTIVE;
MACRO_MCS MCS_TOOLVER;
$E03C6446F0CC9859628A2051D308D0DD MC_ACCES;
$E03C6446F0CC9859628A2051D308D0DD MC_BAD_ADDR;
$E03C6446F0CC9859628A2051D308D0DD MC_BAD_DRIVE_EJECT;
$E03C6446F0CC9859628A2051D308D0DD MC_BAD_MCICAP;
$E03C6446F0CC9859628A2051D308D0DD MC_DEST_FULL;
$8B82F0E1C56011458915D67932773AAA MC_DRIVE_TYPE;
$8B82F0E1C56011458915D67932773AAA MC_ELEMENT_TYPE;
$E03C6446F0CC9859628A2051D308D0DD MC_ENODEV;
$E03C6446F0CC9859628A2051D308D0DD MC_ENOMEM;
$E03C6446F0CC9859628A2051D308D0DD MC_ENXIO;
$E03C6446F0CC9859628A2051D308D0DD MC_ERR_OFFLINE;
$E03C6446F0CC9859628A2051D308D0DD MC_INTERFACE_ERROR;
$E03C6446F0CC9859628A2051D308D0DD MC_INTERNAL;
$E03C6446F0CC9859628A2051D308D0DD MC_LAST_ERROR;
MACRO_MC MC_LOCK;
MACRO_MC MC_LOCKAS;
$E03C6446F0CC9859628A2051D308D0DD MC_MCICAP_OPEN_FAILED;
$E03C6446F0CC9859628A2051D308D0DD MC_NOT_SUPPORTED;
$E03C6446F0CC9859628A2051D308D0DD MC_NO_CHANGER_ENTRY;
$E03C6446F0CC9859628A2051D308D0DD MC_NO_ENTRY;
$E03C6446F0CC9859628A2051D308D0DD MC_NO_ERROR;
$E03C6446F0CC9859628A2051D308D0DD MC_NO_INTERFACE;
$8B82F0E1C56011458915D67932773AAA MC_NUM_ADDR_TYPES;
$E03C6446F0CC9859628A2051D308D0DD MC_PERM;
$8B82F0E1C56011458915D67932773AAA MC_PORT_TYPE;
$8B82F0E1C56011458915D67932773AAA MC_SLOT_TYPE;
$E03C6446F0CC9859628A2051D308D0DD MC_SRC_EMPTY;
MACRO_MC MC_SYNC;
$8B82F0E1C56011458915D67932773AAA MC_TRANSPORT_TYPE;
$E03C6446F0CC9859628A2051D308D0DD MC_UNKNOWN;
MACRO_MC MC_UNLOCK;
MACRO_MC MC_UNLOCKAS;
$E03C6446F0CC9859628A2051D308D0DD MC_USAGE_ERROR;
MACRO_ECHOKE MDMBUF;
MACRO_MDSIZE MDSIZE;
MACRO_B2 MEDIUM_COLOR;
MACRO_LOW MED_DENS;
$F2011E9C2552B036D6D2F02AACD7A7DD MEM;
$F2011E9C2552B036D6D2F02AACD7A7DD MEM1;
MACRO_MEMBER MEMBER_VAL_LEN;
MACRO_MEMBER MEMBER_VAR_LEN;
MACRO_MEMORY MEMORY_OBJECT_COPY_DELAY;
MACRO_MEMORY MEMORY_OBJECT_COPY_NONE;
MACRO_MEMORY_OBJECT MEMORY_OBJECT_NULL;
MACRO_TEGC MEM_ADDR_ALIGN;
MACRO_MEM MEM_NOAUTOGROW;
MACRO_MEM MEM_SHARED;
bool MI;
MACRO_MIB1231_ACTMON MIB1231_ACTMON_FALSE;
MACRO_MIB1231_ACTMON MIB1231_ACTMON_TRUE;
MACRO_MIB1231 MIB1231_COMM_CLOSE;
MACRO_MIB1231 MIB1231_COMM_NO_OP;
MACRO_MIB1231 MIB1231_COMM_OPEN;
MACRO_MIB1231 MIB1231_COMM_RESET;
MACRO_MIB1231_ROSTATUS MIB1231_ROSTATUS_BADPARM;
MACRO_MIB1231_ROSTATUS MIB1231_ROSTATUS_BEACONING;
MACRO_MIB1231_ROSTATUS MIB1231_ROSTATUS_DUPLICATE_MAC;
MACRO_MIB1231_ROSTATUS MIB1231_ROSTATUS_INS_TIMEOUT;
MACRO_MIB1231_ROSTATUS MIB1231_ROSTATUS_LOBEFAILED;
MACRO_MIB1231_ROSTATUS MIB1231_ROSTATUS_NOOPEN;
MACRO_MIB1231_ROSTATUS MIB1231_ROSTATUS_OPEN;
MACRO_MIB1231_ROSTATUS MIB1231_ROSTATUS_REM_RECVD;
MACRO_MIB1231_ROSTATUS MIB1231_ROSTATUS_REQ_FAILED;
MACRO_MIB1231_ROSTATUS MIB1231_ROSTATUS_RING_FAILED;
MACRO_MIB1231_ROSTATUS MIB1231_ROSTATUS_SIG_LOSS;
MACRO_MIB1231_RSPEED MIB1231_RSPEED_16_MEG;
MACRO_MIB1231_RSPEED MIB1231_RSPEED_1_MEG;
MACRO_MIB1231_RSPEED MIB1231_RSPEED_4_MEG;
MACRO_MIB1231_RSPEED MIB1231_RSPEED_UNKNOWN;
MACRO_MIB1231_RSTATE MIB1231_RSTATE_CLOSED;
MACRO_MIB1231_RSTATE MIB1231_RSTATE_CLOSING;
MACRO_MIB1231_RSTATE MIB1231_RSTATE_OPENED;
MACRO_MIB1231_RSTATE MIB1231_RSTATE_OPENING;
MACRO_MIB1231_RSTATE MIB1231_RSTATE_OPEN_FAILURE;
MACRO_MIB1231_RSTATE MIB1231_RSTATE_RING_FAILURE;
MACRO_MIB1231_RSTATUS MIB1231_RSTATUS_AUTO_REM_ERROR;
MACRO_MIB1231_RSTATUS MIB1231_RSTATUS_HARD_ERROR;
MACRO_MIB1231_RSTATUS MIB1231_RSTATUS_LOBE_WIRE_FAULT;
MACRO_MIB1231_RSTATUS MIB1231_RSTATUS_NO_PROB;
MACRO_MIB1231_RSTATUS MIB1231_RSTATUS_NO_STATUS;
MACRO_MIB1231_RSTATUS MIB1231_RSTATUS_REMOVE_RCVD;
MACRO_MIB1231_RSTATUS MIB1231_RSTATUS_RESERVED;
MACRO_MIB1231_RSTATUS MIB1231_RSTATUS_RING_RECOVERY;
MACRO_MIB1231_RSTATUS MIB1231_RSTATUS_SIGNAL_LOSS;
MACRO_MIB1231_RSTATUS MIB1231_RSTATUS_SINGLE_STATION;
MACRO_MIB1231_RSTATUS MIB1231_RSTATUS_SOFT_ERROR;
MACRO_MIB1231_RSTATUS MIB1231_RSTATUS_TRANSMIT_BEACON;
MACRO_F1 MIDDLE;
MACRO_F1 MIDDLE_NPAD;
MACRO_MIF MIF_NETRAIN;
MACRO_MIF MIF_QUORUMLOSS;
MACRO_MIG_ARRAY MIG_ARRAY_TOO_LARGE;
MACRO_MIG_BAD_ARGUMENTS MIG_BAD_ARGUMENTS;
MACRO_MIG_BAD MIG_BAD_ID;
MACRO_MIG_EXCEPTION MIG_EXCEPTION;
MACRO_MIG_NO MIG_NO_REPLY;
MACRO_MIG_REMOTE MIG_REMOTE_ERROR;
MACRO_MIG_REPLY MIG_REPLY_MISMATCH;
MACRO_MIG MIG_SND_VS_RCV_PORT;
MACRO_MIG_TYPE MIG_TYPE_ERROR;
MACRO_ARCDENSITY MINARCS;
MACRO_BQ MINBUFHSZ;
MACRO_NDPROTO MINPACKETLEN;
MACRO_MINPHYS MINPHYS;
MACRO_MINSEC MINSEC;
MACRO_SS_STACKMAGIC MINSIGSTKSZ;
MACRO_MINSPERHOUR MINSPERHOUR;
MACRO_MINS MINS_PER_HOUR;
MACRO_MINTTL MINTTL;
MACRO_MIN_CACHEABLE MIN_CACHEABLE_LEN;
MACRO_NOFILE MIN_FREE_VNODES;
MACRO_MIN MIN_HAB_NO;
MACRO_MAX_PER MIN_HASHSZ;
MACRO_MAX_LANGS MIN_LANG_CODE;
MACRO_MAJ MIN_OBJ_STAMP;
MACRO_N_TRUSTED MIN_SITE_EVENT;
MACRO_MIN2 MIN_SLIDER_LENGTH;
MACRO_MIN2 MIN_SLIDER_THICKNESS;
MACRO_MAJ_SYM MIN_SYM_STAMP;
MACRO_AUD_T_OPAQUE MIN_TRUSTED_EVENT;
MACRO_MIPSEBMAGIC MIPSEBMAGIC;
MACRO_MIPSEBMAGIC_2 MIPSEBMAGIC_2;
MACRO_MIPSEBMAGIC_3 MIPSEBMAGIC_3;
MACRO_MIPSEBUMAGIC MIPSEBUMAGIC;
MACRO_MIPSEBMAGIC MIPSELMAGIC;
MACRO_MIPSEBMAGIC_2 MIPSELMAGIC_2;
MACRO_MIPSEBMAGIC_3 MIPSELMAGIC_3;
MACRO_MIPSEBUMAGIC MIPSELUMAGIC;
MACRO_MITMiscNumberErrors MITMiscNumberErrors;
MACRO_MITMiscNumberEvents MITMiscNumberEvents;
MACRO_MLD_ADDRESS MLD_ADDRESS_NIL;
MLD_type_type MLD_ADDRESS_TYPE;
MLD_type_type MLD_ARRAY_TYPE;
MLD_type_type MLD_BASIC_TYPE;
MLD_INTERNAL_SYMS MLD_BPTR_INTERNAL_SYM;
MLD_INTERNAL_SYMS MLD_BRACKETED_CONTROL_INTERNAL_SYM;
MLD_INTERNAL_SYMS MLD_BRACKETED_RESULT_INTERNAL_SYM;
MLD_INTERNAL_SYMS MLD_BRACKETED_RESULT_POINTER_INTERNAL_SYM;
MLD_INTERNAL_SYMS MLD_BTBL_INTERNAL_SYM;
basic_types MLD_CHAR_BASIC_TYPE;
MLD_type_type MLD_COMPLEX_TYPE;
MLD_type_type MLD_CONSTANT_TYPE;
MLD_function_name_types MLD_CONSTRUCTOR_FUNCTION_NAME;
MLD_INTERNAL_SYMS MLD_CONTROL_INTERNAL_SYM;
MLD_function_name_types MLD_CONVERSION_OPERATOR_FUNCTION_NAME;
MLD_INTERNAL_SYMS MLD_CTYPE_INTERNAL_SYM;
MLD_function_name_types MLD_DESTRUCTOR_FUNCTION_NAME;
basic_types MLD_DOUBLE_BASIC_TYPE;
MACRO_MLD MLD_DUMP;
basic_types MLD_ELLIPSES_BASIC_TYPE;
MLD_INTERNAL_SYMS MLD_ELLIPSES_INTERNAL_SYM;
MACRO_MLD_ERROR MLD_ERROR;
MLD_INTERNAL_SYMS MLD_EVDW_INTERNAL_SYM;
MLD_INTERNAL_SYMS MLD_EXTERNAL_DESTRUCTOR_FUNCTOR_LIST_INTERNAL_SYM;
MACRO_MLD_FALSE MLD_FALSE;
MLD_mangled_name_types MLD_FINI_INTERNAL_NAME;
basic_types MLD_FLOAT_BASIC_TYPE;
MLD_INTERNAL_SYMS MLD_FN_INTERNAL_SYM;
MLD_mangled_name_types MLD_FUNCTION_MANGLED_NAME;
MLD_type_type MLD_FUNCTION_TYPE;
MLD_INTERNAL_SYMS MLD_FW_INTERNAL_SYM;
MACRO_MLD_INADEQUATE MLD_INADEQUATE_ARRAY_SIZE;
MLD_mangled_name_types MLD_INIT_INTERNAL_NAME;
MLD_INTERNAL_SYMS MLD_INIT_INTERNAL_SYM;
MLD_INTERNAL_SYMS MLD_INTER_INTERNAL_SYM;
basic_types MLD_INT_BASIC_TYPE;
MLD_INTERNAL_SYMS MLD_IVIW_INTERNAL_SYM;
basic_types MLD_LONG_BASIC_TYPE;
basic_types MLD_LONG_DOUBLE_BASIC_TYPE;
MACRO_MLD MLD_MEMCHECK;
MLD_type_type MLD_NONTYPE_TYPE;
MLD_function_name_types MLD_NORMAL_FUNCTION_NAME;
MACRO_MLD_SOMETHING MLD_NOTHING_RECOGNIZED;
MLD_function_name_types MLD_NO_FUNCTION_NAME;
MLD_mangled_name_types MLD_NO_MANGLED_NAME;
MACRO_MLD MLD_NO_SPACES;
MLD_type_type MLD_NO_TYPE;
MACRO_MLD_FALSE MLD_NUMBER_OF_INTERNAL_SYMBOLS;
MLD_function_name_types MLD_OPERATOR_FUNCTION_NAME;
MLD_type_type MLD_POINTER_TO_MEMBER_TYPE;
MLD_type_type MLD_POINTER_TYPE;
MLD_mangled_name_types MLD_PROMOTED_ENTITY_NAME;
MLD_type_type MLD_REFERENCE_TYPE;
MLD_INTERNAL_SYMS MLD_RESULT_INTERNAL_SYM;
MLD_INTERNAL_SYMS MLD_RESULT_POINTER_INTERNAL_SYM;
MLD_mangled_name_types MLD_RUNTIMETYPE_INFO_NAME;
basic_types MLD_SHORT_BASIC_TYPE;
MACRO_MLD MLD_SHOW_DEMANGLED_NAME;
MACRO_MLD MLD_SHOW_INFO;
MACRO_MLD MLD_SHOW_MANGLED_NAME;
MACRO_MLD_SOMETHING MLD_SOMETHING_RECOGNIZED;
MLD_mangled_name_types MLD_TEMPLATE_MANGLED_NAME;
MLD_INTERNAL_SYMS MLD_THIS_INTERNAL_SYM;
MLD_INTERNAL_SYMS MLD_THUNK_INTERNAL_SYM;
MACRO_MLD_FALSE MLD_TRUE;
MLD_INTERNAL_SYMS MLD_T_INTERNAL_SYM;
MLD_mangled_name_types MLD_VARIABLE_MANGLED_NAME;
MLD_mangled_name_types MLD_VIRTUAL_TABLE_NAME;
basic_types MLD_VOID_BASIC_TYPE;
MLD_INTERNAL_SYMS MLD_VPTR_INTERNAL_SYM;
MLD_INTERNAL_SYMS MLD_VTBL_INTERNAL_SYM;
$69A85461EA42125C0C0C9DE2AB77B296 MLD_all;
void MLD_concat_mangled_function_name_identifier(struct MLD_mangled_function_name *mfn, char *s, int max_s, int flags);
void MLD_concat_mangled_name(struct MLD_mangled_name *mn, char *s, int max_s, int flags);
void MLD_concat_mangled_template_name(struct MLD_mangled_template_name *mtn, char *s, int max_s, int flags);
void MLD_delete_mangled_name(struct MLD_mangled_name *mn);
int MLD_demangle_string(const char *, char *, int, int);
struct MLD_internalNameEntry MLD_internalNameTable[];
int MLD_internal_symbol(const char *s, int start, int *symbol);
int MLD_parse_mangled_name(const char *s, int start, int *end, struct MLD_mangled_name **mn, char *str_before_name, char *str_replaced_by_name, char *str_after_name, int size_of_string);
$69A85461EA42125C0C0C9DE2AB77B296 MLD_post;
$69A85461EA42125C0C0C9DE2AB77B296 MLD_pre;
MACRO_MM MM_APPL;
MACRO_MM MM_CONSOLE;
MACRO_MM_NOSEV MM_ERROR;
MACRO_MM MM_FIRM;
MACRO_MM_NOSEV MM_HALT;
MACRO_MM MM_HARD;
MACRO_MM_NOSEV MM_INFO;
MACRO_MM_OK MM_NOCON;
MACRO_MM_OK MM_NOMSG;
MACRO_MM_NOSEV MM_NOSEV;
MACRO_MM_OK MM_NOTOK;
MACRO_MM MM_NRECOV;
MACRO_MM_NULLLBL MM_NULLACT;
MACRO_MM_NULLLBL MM_NULLLBL;
MACRO_MM_NULLLBL MM_NULLMC;
MACRO_MM_NULLLBL MM_NULLSEV;
MACRO_MM_NULLLBL MM_NULLTAG;
MACRO_MM_NULLLBL MM_NULLTXT;
MACRO_MM_OK MM_OK;
MACRO_MM MM_OPSYS;
MACRO_MM MM_PRINT;
MACRO_MM MM_RECOVER;
MACRO_MM MM_SOFT;
MACRO_MM MM_UTIL;
MACRO_MM_NOSEV MM_WARNING;
MACRO_MOUNT_MAXTYPE MNAMELEN;
mountstat3 MNT3ERR_ACCES;
mountstat3 MNT3ERR_INVAL;
mountstat3 MNT3ERR_IO;
mountstat3 MNT3ERR_NAMETOOLONG;
mountstat3 MNT3ERR_NOENT;
mountstat3 MNT3ERR_NOTDIR;
mountstat3 MNT3ERR_NOTSUPP;
mountstat3 MNT3ERR_PERM;
mountstat3 MNT3ERR_SERVERFAULT;
MACRO_MNT MNT_FORCE;
MACRO_MNT MNT_NOFORCE;
MACRO_MNT_WAIT MNT_NOWAIT;
MACRO_MNT_NUMTYPES MNT_NUMTYPES;
mountstat3 MNT_OK;
MACRO_MNT MNT_SKIPSYSTEM;
MACRO_MNT_WAIT MNT_WAIT;
MACRO_VEXEC MODEMASK;
MACRO_MODEM MODEM_BADCALL;
MACRO_MODEM MODEM_CD;
MACRO_MODEM MODEM_CTS;
MACRO_MODEM MODEM_DSR;
MACRO_MODEM MODEM_DSR_START;
MACRO_MODE_EDIT MODE_ACK;
MACRO_MODE MODE_B;
MACRO_MODE MODE_C;
MACRO_MODE_EDIT MODE_ECHO;
MACRO_MODE_EDIT MODE_EDIT;
MACRO_MODE_EDIT MODE_FLOW;
MACRO_MODE_EDIT MODE_FORCE;
MACRO_MODE_EDIT MODE_INBIN;
MACRO_MODE_EDIT MODE_LIT_ECHO;
MACRO_MODE_EDIT MODE_MASK;
MACRO_MODE_EDIT MODE_OUTBIN;
MACRO_MODE MODE_S;
MACRO_MODE_EDIT MODE_SOFT_TAB;
MACRO_MODE_EDIT MODE_TRAPSIG;
MACRO_PCM MODMOD;
MACRO_MODULE MODULE_ID_LEN;
MACRO_MOD_ALT MOD_ALT_L;
MACRO_MOD_ALT MOD_ALT_R;
MACRO_MOD_ALT MOD_CAPS;
MACRO_MOD_OFFSET MOD_CLKA;
MACRO_MOD_OFFSET MOD_CLKB;
MACRO_MOD_ALT MOD_COMP_L;
MACRO_MOD_ALT MOD_COMP_R;
MACRO_MOD_ALT MOD_CTRL_L;
MACRO_MOD_ALT MOD_CTRL_R;
MACRO_MOD_OFFSET MOD_ESTERROR;
MACRO_MOD_OFFSET MOD_FREQUENCY;
MACRO_MAX_LANGS MOD_MASK;
MACRO_MOD MOD_MAX;
MACRO_MOD_OFFSET MOD_MAXERROR;
MACRO_MOD MOD_MIN;
MACRO_MOD_ALT MOD_NUML;
MACRO_MOD_OFFSET MOD_OFFSET;
MACRO_MOD_ALT MOD_SCROLL;
MACRO_MOD_ALT MOD_SHFT_L;
MACRO_MOD_ALT MOD_SHFT_R;
MACRO_MOD_OFFSET MOD_STATUS;
MACRO_MOD_OFFSET MOD_TIMECONST;
MACRO_CHARMAP MONETARY_MONETARY_INIT;
MACRO_CHARMAP MONETARY_NL_LANGINFO;
MACRO_CHARMAP MONETARY_STRFMON;
MACRO_MONOCHROME MONOCHROME;
MACRO_MONSPERYEAR MONSPERYEAR;
MACRO_MONS MONS_PER_YEAR;
MACRO_D MON_1;
MACRO_D MON_10;
MACRO_D MON_11;
MACRO_D MON_12;
MACRO_D MON_2;
MACRO_D MON_3;
MACRO_D MON_4;
MACRO_D MON_5;
MACRO_D MON_6;
MACRO_D MON_7;
MACRO_D MON_8;
MACRO_D MON_9;
MACRO_TEGC MOP_SYSID;
MACRO_MORECTL MORECTL;
MACRO_MORECTL MOREDATA;
MACRO_MORE MORE_EVENTS;
MACRO_MOTION MOTION_BUFFER_SIZE;
MACRO_BUTTON_UP MOTION_TYPE;
MACRO_MOUNTPROC MOUNTPROC_DUMP;
MACRO_MOUNTPROC MOUNTPROC_EXPORT;
MACRO_MOUNTPROC MOUNTPROC_EXPORTALL;
MACRO_MOUNTPROC MOUNTPROC_MNT;
MACRO_MOUNTPROC MOUNTPROC_UMNT;
MACRO_MOUNTPROC MOUNTPROC_UMNTALL;
MACRO_MOUNTPROG MOUNTPROG;
MACRO_MOUNTVERS_0 MOUNTVERS;
MACRO_MOUNTVERS3 MOUNTVERS3;
MACRO_MOUNTVERS MOUNTVERS_ORIG;
MACRO_MOUNT MOUNT_ADDON;
MACRO_MOUNT MOUNT_CDFS;
MACRO_MOUNT MOUNT_CFS;
MACRO_MOUNT MOUNT_CSPEC;
MACRO_MOUNT MOUNT_DFS;
MACRO_MOUNT MOUNT_DVDFS;
MACRO_MOUNT MOUNT_EFS;
MACRO_MOUNT MOUNT_FDFS;
MACRO_MOUNT MOUNT_FFM;
MACRO_MOUNT_MAXTYPE MOUNT_MAXTYPE;
MACRO_MOUNT MOUNT_MFS;
MACRO_MOUNT MOUNT_MSFS;
MACRO_MOUNT MOUNT_NFS;
MACRO_MOUNT MOUNT_NFS3;
MACRO_MOUNT MOUNT_NONE;
MACRO_MOUNT_MAXTYPE MOUNT_NUMTYPES;
MACRO_MOUNT MOUNT_PC;
MACRO_MOUNT MOUNT_PROCFS;
MACRO_MOUNT MOUNT_S5FS;
MACRO_MOUNT MOUNT_UFS;
MACRO_NULL_DEVICE MOUSE_DEVICE;
MACRO_BUTTON_UP MOUSE_HOT_SWAP_TYPE;
MACRO_MOUSE MOUSE_ID;
MACRO_MPSGV11 MPSGV11;
MACRO_MPSG MPSG_HAB_NO;
MACRO_TEGC MP_EV_NEEDED;
MACRO_MQ_NAME MQ_NAME_MAX;
MACRO_MQ MQ_OPEN_MAX;
MACRO_MQ MQ_PRIO_MAX;
MACRO_MRT MRT_ADD_MFC;
MACRO_MRT MRT_ADD_VIF;
MACRO_MRT MRT_ASSERT;
MACRO_MRT MRT_DEL_MFC;
MACRO_MRT MRT_DEL_VIF;
MACRO_MRT MRT_DONE;
MACRO_MRT MRT_INIT;
MACRO_MRT MRT_VERSION;
bool MS;
MACRO_LSBFirst MSBFirst;
MACRO_SCS MSCP_POLL_WAIT;
MACRO_MSEM MSEM_IF_NOWAIT;
MACRO_MSEM MSEM_IF_WAITERS;
MACRO_MSEM MSEM_LOCKED;
MACRO_MSEM MSEM_UNLOCKED;
MACRO_MSGFLTIM MSGFLERR;
MACRO_MSGFLTIM MSGFLFIL;
MACRO_MSGFLTIM MSGFLHLP;
MACRO_MSGFLTIM MSGFLMSG;
MACRO_MSGFLTIM MSGFLSEV;
MACRO_MSGFLTIM MSGFLTAB;
MACRO_MSGFLTIM MSGFLTIM;
MACRO_MSGINFO MSGINFO_MAX;
MACRO_MSGINFO MSGINFO_MNB;
MACRO_MSGINFO MSGINFO_MNI;
MACRO_MSGINFO MSGINFO_SAR;
MACRO_MSGINFO MSGINFO_TQL;
MACRO_CROUND MSGMAX;
MACRO_CROUND MSGMNB;
MACRO_MSGMNI MSGMNI;
MACRO_MSGTQL MSGTQL;
reply_stat MSG_ACCEPTED;
MACRO_MSG_PEEK MSG_AIO;
MACRO_MSG_ALLO MSG_ALLO;
MACRO_MSG_HIPRI MSG_ANY;
MACRO_MSG_BADP MSG_BADP;
MACRO_MSG_HIPRI MSG_BAND;
MACRO_MSG_COMP MSG_COMP;
MACRO_MSG_PEEK MSG_COMPAT;
MACRO_MSG_CPID MSG_CPID;
MACRO_MSG_PEEK MSG_CTRUNC;
reply_stat MSG_DENIED;
MACRO_MSG_PEEK MSG_DONTROUTE;
MACRO_MSG_PEEK MSG_EOR;
MACRO_MSG_EXEC MSG_EXEC;
MACRO_MSG_HIPRI MSG_HIPRI;
MACRO_MSG_INDX MSG_INDX;
MACRO_MSG_INVL MSG_INVL;
MACRO_MSG_MAXIOVLEN MSG_MAXIOVLEN;
MACRO_MSG_MTCH MSG_MTCH;
MACRO_MSG_NOERROR MSG_NOERROR;
MACRO_MSG_PEEK MSG_NONBLOCK;
MACRO_MSG_NONE MSG_NONE;
MACRO_MSG_MAXIOVLEN MSG_OOB;
MACRO_MSG_OPTION MSG_OPTION_NONE;
MACRO_MSG_PEEK MSG_PEEK;
MACRO_MSG_QMSG MSG_QMSG;
MACRO_PMSG MSG_R;
MACRO_MSG_REFN MSG_REFN;
MACRO_MSG_W MSG_RWAIT;
MACRO_MSG_PEEK MSG_SENDFILE;
MACRO_MSG MSG_SIZE_MAX;
MACRO_MSG_SREG MSG_SREG;
MACRO_MSG_TABI MSG_TABI;
MACRO_MSG_TABP MSG_TABP;
MACRO_MSG_NOERROR MSG_TAG;
MACRO_MSG_PEEK MSG_TRUNC;
MACRO_MSG_TYPE MSG_TYPE_BIT;
MACRO_MSG_TYPE MSG_TYPE_BOOLEAN;
MACRO_MSG_TYPE_INTEGER MSG_TYPE_BYTE;
MACRO_MSG_TYPE_CAMELOT MSG_TYPE_CAMELOT;
MACRO_MSG_TYPE_INTEGER MSG_TYPE_CHAR;
MACRO_MSG_TYPE MSG_TYPE_EMERGENCY;
MACRO_MSG_TYPE_CAMELOT MSG_TYPE_ENCRYPTED;
MACRO_MSG_TYPE_INTEGER MSG_TYPE_INTEGER_16;
MACRO_MSG_TYPE_INTEGER MSG_TYPE_INTEGER_32;
MACRO_MSG_TYPE_INTERNAL MSG_TYPE_INTEGER_64;
MACRO_MSG_TYPE_INTEGER_8 MSG_TYPE_INTEGER_8;
MACRO_MSG_TYPE_INTERNAL MSG_TYPE_INTERNAL_MEMORY;
MACRO_MSG_TYPE_INTERNAL MSG_TYPE_LAST;
MACRO_MSG MSG_TYPE_NORMAL;
MACRO_MSG_TYPE_INTERNAL MSG_TYPE_POLYMORPHIC;
MACRO_MSG_TYPE_INTEGER MSG_TYPE_PORT;
MACRO_MSG_TYPE_INTEGER MSG_TYPE_PORT_ALL;
MACRO_MSG_TYPE_INTERNAL MSG_TYPE_PORT_NAME;
MACRO_MSG_TYPE_INTEGER MSG_TYPE_PORT_OWNERSHIP;
MACRO_MSG_TYPE_INTEGER MSG_TYPE_PORT_RECEIVE;
MACRO_MSG_TYPE_INTEGER_8 MSG_TYPE_REAL;
MACRO_MSG_TYPE_CAMELOT MSG_TYPE_RPC;
MACRO_MSG_TYPE_INTEGER_8 MSG_TYPE_STRING;
MACRO_MSG_TYPE_STRING MSG_TYPE_STRING_C;
MACRO_MSG_TYPE MSG_TYPE_UNSTRUCTURED;
MACRO_MSG_W MSG_W;
MACRO_MSG_PEEK MSG_WAITALL;
MACRO_MSG_PEEK MSG_WIRE;
MACRO_MSG_W MSG_WWAIT;
MACRO_MSIZ MSIZ;
MACRO_MSIZE MSIZE;
MACRO_MSS MSS_FLAG_CALL_SUPT_RTN;
MACRO_TBL_KNLIST MSTATS_REQUEST;
MACRO_MSWAPX MSWAPX;
MACRO_MS MS_ALIAS;
MACRO_MS_ASYNC MS_ASYNC;
MACRO_MS_DATA MS_DATA;
MACRO_MS_ASYNC MS_INVALIDATE;
MACRO_MS_NOSUID MS_NOSUID;
MACRO_MS_UNK MS_PCXAS;
MACRO_MS_DATA MS_RDONLY;
MACRO_MS_NOSUID MS_REMOUNT;
MACRO_MS_STAMP MS_STAMP;
MACRO_MS_ASYNC MS_SYNC;
MACRO_MS_UNK MS_UNK;
MACRO_MS_UNK MS_VSTAB;
MACRO_MS_UNK MS_VSXXX;
MACRO_MTHN MTAN;
MACRO_MTHR MTAR;
MACRO_MTWEOF MTBSF;
MACRO_MTWEOF MTBSR;
MACRO_MTWEOF MTCACHE;
MACRO_MTWEOF MTCLS;
MACRO_MTWEOF MTCLX;
MACRO_MTWEOF MTCSE;
MACRO_MTWEOF MTDISEOT;
MACRO_MTWEOF MTDISINT;
MACRO_MTWEOF MTDISSGIO;
MACRO_MTWEOF MTENAEOT;
MACRO_MTWEOF MTENAINT;
MACRO_MTWEOF MTENASGIO;
MACRO_MTWEOF MTERASE;
MACRO_MTWEOF MTFLUSH;
MACRO_MTWEOF MTFSF;
MACRO_MTWEOF MTFSR;
MACRO_MTWEOF MTGTOFF;
MACRO_MTWEOF MTGTON;
MACRO_MTHN MTHN;
MACRO_MTHR MTHR;
MACRO_MTLN MTLN;
MACRO_MTWEOF MTLOAD;
MACRO_MTLR MTLR;
MACRO_MTLN MTMN;
MACRO_MTLR MTMR;
MACRO_MTWEOF MTNOCACHE;
MACRO_MTWEOF MTNOP;
MACRO_MTWEOF MTOFFL;
MACRO_MTWEOF MTONLINE;
MACRO_MTWEOF MTRETEN;
MACRO_MTWEOF MTREW;
MACRO_MTWEOF MTSEEK;
MACRO_MTWEOF MTSEEKDS;
MACRO_MTWEOF MTSEOD;
MACRO_MTWEOF MTUNLOAD;
MACRO_MTVMAGIC MTVMAGIC;
MACRO_MTWEOF MTWEOF;
MACRO_MTX0 MTX0;
MACRO_MTX0 MTX1;
MACRO_MT_SOCKET MT_ATABLE;
MACRO_MT_IFADDR MT_CONTROL;
MACRO_MT MT_DATA;
MACRO_MT MT_FREE;
MACRO_MT_SOOPTS MT_FTABLE;
MACRO_MT MT_HEADER;
MACRO_MT_SOCKET MT_HTABLE;
MACRO_MT_IFADDR MT_IFADDR;
MACRO_MT_ISTS MT_ISHT;
MACRO_MT_ISTS MT_ISMT;
MACRO_MT_ISTS MT_ISSCSI;
MACRO_MT_ISTS MT_ISST;
MACRO_MT_ISTS MT_ISTM;
MACRO_MT_ISTS MT_ISTMSCP;
MACRO_MT_ISTS MT_ISTS;
MACRO_MT_ISTS MT_ISUT;
MACRO_MT_MAX MT_MAX;
MACRO_MT_SONAME MT_MRTABLE;
MACRO_MT_IFADDR MT_OOBDATA;
MACRO_MT_SOCKET MT_PCB;
MACRO_MT_RIGHTS MT_RIGHTS;
MACRO_MT_SOCKET MT_RTABLE;
MACRO_MT_SOCKET MT_SOCKET;
MACRO_MT_SONAME MT_SONAME;
MACRO_MT_SOOPTS MT_SOOPTS;
MACRO_MULTIBUFFER MULTIBUFFER_MAJOR_VERSION;
MACRO_MULTIBUFFER_MINOR MULTIBUFFER_MINOR_VERSION;
MACRO_MULTIPLE MULTIPLE_ATTRS;
MACRO_SNDZERO MUXID_ALL;
MACRO_UNKN MVAX_I;
MACRO_UNKN MVAX_II;
MACRO_MV MV_ACTIVE_MON_PRES;
MACRO_MV MV_BEACON;
MACRO_MV MV_CHANGE_PARM;
MACRO_MV MV_CLAIM_TOKEN;
MACRO_MV MV_DUP_ADDR_TEST;
MACRO_MV MV_INIT_RING_STN;
MACRO_MV MV_LOBE_MEDIA_TEST;
MACRO_MV MV_REPORT_ERR;
MACRO_MV MV_REPORT_MONTIOR_ERR;
MACRO_MV MV_REPORT_NEW_MONITOR;
MACRO_MV MV_REPORT_RNG_POLL_FAIL;
MACRO_MV MV_REPORT_STN_ADDR;
MACRO_MV MV_REPORT_STN_ATTACH;
MACRO_MV MV_REPORT_STN_STATE;
MACRO_MV MV_REPORT_SUA_CHANGE;
MACRO_MV MV_REPORT_TRANSMIT_FORW;
MACRO_MV MV_REQ_INIT;
MACRO_MV MV_REQ_STN_ADDR;
MACRO_MV MV_REQ_STN_ATTACH;
MACRO_MV MV_REQ_STN_STATE;
MACRO_MV MV_RESPONSE;
MACRO_MV MV_RING_PURGE;
MACRO_MV MV_RMV_RING_STATION;
MACRO_MV MV_STANDBY_MON_PRES;
MACRO_MV MV_TRANSMIT_FORW;
MACRO_MWM_DECOR MWM_DECOR_ALL;
MACRO_MWM_DECOR MWM_DECOR_BORDER;
MACRO_MWM_DECOR MWM_DECOR_MAXIMIZE;
MACRO_MWM_DECOR MWM_DECOR_MENU;
MACRO_MWM_DECOR MWM_DECOR_MINIMIZE;
MACRO_MWM_DECOR MWM_DECOR_RESIZEH;
MACRO_MWM_DECOR MWM_DECOR_TITLE;
MACRO_MWM_FUNC MWM_FUNC_ALL;
MACRO_MWM_FUNC MWM_FUNC_CLOSE;
MACRO_MWM_FUNC MWM_FUNC_MAXIMIZE;
MACRO_MWM_FUNC MWM_FUNC_MINIMIZE;
MACRO_MWM_FUNC MWM_FUNC_MOVE;
MACRO_MWM_FUNC MWM_FUNC_RESIZE;
MACRO_MWM MWM_HINTS_DECORATIONS;
MACRO_MWM MWM_HINTS_FUNCTIONS;
MACRO_MWM MWM_HINTS_INPUT_MODE;
MACRO_MWM MWM_HINTS_STATUS;
MACRO_MWM_INFO MWM_INFO_STARTUP_CUSTOM;
MACRO_MWM_INFO MWM_INFO_STARTUP_STANDARD;
MACRO_MWM_INPUT_APPLICATION MWM_INPUT_APPLICATION_MODAL;
MACRO_MWM_INPUT MWM_INPUT_FULL_APPLICATION_MODAL;
MACRO_MWM_INPUT MWM_INPUT_MODELESS;
MACRO_MWM_INPUT MWM_INPUT_PRIMARY_APPLICATION_MODAL;
MACRO_MWM_INPUT MWM_INPUT_SYSTEM_MODAL;
MACRO_MWM_TEAROFF MWM_TEAROFF_WINDOW;
MACRO_SB_CODESET MX_METHOD_CLASS;
MACRO_M_V0 M_A0;
MACRO_M_V0 M_A1;
MACRO_M_V0 M_A2;
MACRO_M_V0 M_A3;
MACRO_M_V0 M_A4;
MACRO_M_V0 M_A5;
MACRO_M_FREE M_ADVFS;
MACRO_M_FREE M_AIO;
MACRO_M_EXT M_ALIAS;
MACRO_M_FREE M_ANON;
MACRO_M_V0 M_AT;
MACRO_M_FREE M_ATABLE;
MACRO_M_FREE M_ATMMEM;
MACRO_M_EXT M_ATM_CLP;
MACRO_M_EXT M_BCAST;
MACRO_M_FREE M_CDFS;
MACRO_M_DELAYED M_CFSONTOP;
MACRO_M_FREE M_CFS_ACCESS;
MACRO_M_FREE M_CFS_BLKRSRV;
MACRO_M_FREE M_CFS_CLIENT;
MACRO_M_FREE M_CFS_CLITOK;
MACRO_M_FREE M_CFS_GENERAL;
MACRO_M_FREE M_CFS_SERVER;
MACRO_M_FREE M_CFS_SVRTOK;
MACRO_M_EXT M_CHECKSUM;
MACRO_M_FREE M_CLSM;
MACRO_M_FREE M_CLUA;
MACRO_M_FREE M_CLUSTER;
MACRO_M_FREE M_CMS;
MACRO_M_FREE M_CNX;
MACRO_M_FREE M_CONTROL;
MACRO_M_COPYALL M_COPYALL;
MACRO_M_COPYFLAGS M_COPYFLAGS;
MACRO_M_FREE M_CRED;
MACRO_M_FREE M_CTF;
MACRO_M_DELAYED M_DELAYED;
MACRO_M_FREE M_DEVBUF;
MACRO_M_DINTR M_DINTR;
MACRO_M_RDONLY M_DIRECTIO;
MACRO_M_FREE M_DLI;
MACRO_M_FREE M_DLM;
MACRO_M_DINTR M_DMABUSY;
MACRO_M_FREE M_DMASG;
MACRO_M_DINTR M_DMAWAIT;
MACRO_M_FREE M_DNA;
MACRO_M_FREE M_DQUOT;
MACRO_M_FREE M_DRD;
MACRO_M_FREE M_DT;
MACRO_M_DELAYED M_DUAL;
MACRO_M_NO M_DUPLICATE_ADDR;
MACRO_M_NO M_DUPLICATE_MON;
MACRO_M_FREE M_DYNCFG;
MACRO_M_EXT M_EOR;
MACRO_M_FREE M_ESS;
MACRO_M_V0 M_EXCFRM;
MACRO_M_RDONLY M_EXPORTED;
MACRO_M_EXRDMOSTLY M_EXPUBINDEX;
MACRO_M_EXRDMOSTLY M_EXPUBLIC;
MACRO_M_EXRDMOSTLY M_EXRDMOSTLY;
MACRO_M_RDONLY M_EXRDONLY;
MACRO_M_EXT M_EXT;
MACRO_M_DELAYED M_FAILOVER;
MACRO_M_EXT M_FASTFREE;
MACRO_M_FREE M_FHANDLE;
MACRO_M_FREE M_FIFO;
MACRO_M_FREE M_FILE;
MACRO_M_FREE M_FILEBUF;
MACRO_M_FREE M_FILEDESC;
MACRO_M_FREE M_FLOCK;
MACRO_M_DELAYED M_FMOUNT;
MACRO_M_FREE M_FREE;
MACRO_M_FREE M_FTABLE;
MACRO_M_DELAYED M_GLOBAL_ROOT;
MACRO_M_V0 M_GP;
MACRO_M M_GRAIN;
MACRO_M_DELAYED M_GRPID;
MACRO_M_FREE M_HAL;
MACRO_M_EXT M_HDRRSVD;
MACRO_M_FREE M_HEADER;
MACRO_M_DINTR M_HSDBUSY;
MACRO_M_DINTR M_HSDREGIO;
MACRO_M_FREE M_HTABLE;
MACRO_M_FREE M_HWINTR;
MACRO_M_FREE M_ICSNET;
MACRO_M_FREE M_ICS_HL;
MACRO_M_FREE M_ICS_LL;
MACRO_M_FREE M_ICS_LLMCT;
MACRO_M_FREE M_IFADDR;
MACRO_M_FREE M_IFMADDR;
MACRO_M_FREE M_IFNET;
MACRO_M_IGNOREEND M_IGNOREEND;
MACRO_M_FREE M_INIT;
MACRO_M_DINTR M_INTLEVEL;
MACRO_M_FREE M_IO;
MACRO_M_FREE M_IOBUF;
MACRO_M_FREE M_IOCTLOPS;
MACRO_M_DELAYED M_IOERROR;
MACRO_M_FREE M_IORSRC;
MACRO_M_FREE M_IOV;
MACRO_M_FREE M_IPMADDR;
MACRO_M_FREE M_IPMOPTS;
MACRO_M_EXT M_IPPREPROCESS;
MACRO_M_FREE M_KALLOC;
MACRO_M_FREE M_KCH;
MACRO_M M_KEEP;
MACRO_M_FREE M_KERN;
MACRO_M_FREE M_KEVM;
MACRO_M_FREE M_KTABLE;
MACRO_M_FREE M_LAST;
MACRO_M_FREE M_LAST_KL_COMP;
MACRO_M_FREE M_LAT;
MACRO_M_FREE M_LMF;
MACRO_M_DELAYED M_LOCAL;
MACRO_M_DELAYED M_LOCAL_ROOT;
MACRO_M_FREE M_LVM;
MACRO_M_FREE M_MBATTR;
MACRO_M_FREE M_MBDATA;
MACRO_M_FREE M_MBLK;
MACRO_M_FREE M_MBUF;
MACRO_M_EXT M_MCAST;
MACRO_M_FREE M_METADATA;
MACRO_M_FREE M_MIPC;
MACRO_M_RDONLY M_MLSD;
MACRO_M_NO M_MON_ERROR;
MACRO_M_FREE M_MOUNT;
MACRO_M_DELAYED M_MPBUSY;
MACRO_M_DELAYED M_MPWANT;
MACRO_M_FREE M_MRTABLE;
MACRO_M_DELAYED M_MSFS_MOUNT;
MACRO_M M_MXFAST;
MACRO_M_FREE M_NAMEI;
MACRO_M_FREE M_NCALLOUT;
MACRO_M_FREE M_NET;
MACRO_M_DELAYED M_NEWRDDIR;
MACRO_M_FREE M_NFS;
MACRO_M_FREE M_NFSMNT;
MACRO_M_FREE M_NFSREQ;
MACRO_M M_NLBLKS;
MACRO_M_RDONLY M_NOATIMES;
MACRO_M_EXT M_NOCHECKSUM;
MACRO_M_DINTR M_NOCHK;
MACRO_M_RDONLY M_NODEV;
MACRO_M_RDONLY M_NOEXEC;
MACRO_M_RDONLY M_NOSUID;
MACRO_M_NO M_NO_ERROR;
MACRO_M_FREE M_NXM;
MACRO_M_FREE M_OOBDATA;
MACRO_M_FREE M_PATHNAME;
MACRO_M_FREE M_PCB;
MACRO_M_FREE M_PCI;
MACRO_M_FREE M_PFILT;
MACRO_M_EXT M_PKTHDR;
MACRO_M_FREE M_PMAP;
MACRO_M_FREE M_PPP;
MACRO_M_DELAYED M_PRECIOUS;
MACRO_M_FREE M_PRESTO;
MACRO_M_EXT M_PROTOCOL_SUM;
MACRO_M_EXT M_PROXY;
MACRO_M_DINTR M_PSLOAD;
MACRO_M_DELAYED M_QUOTA;
MACRO_M_V0 M_RA;
MACRO_M_FREE M_RDG;
MACRO_M_RDONLY M_RDONLY;
MACRO_M_EXT M_REQUED_ONCE;
MACRO_M_EXT M_REQUE_OK;
MACRO_M_EXT M_RHANDLE;
MACRO_M_FREE M_RIGHTS;
MACRO_M_FREE M_RM;
MACRO_M_FREE M_RTABLE;
MACRO_M_FREE M_RTTIME;
MACRO_M_V0 M_S0;
MACRO_M_V0 M_S1;
MACRO_M_V0 M_S2;
MACRO_M_V0 M_S3;
MACRO_M_V0 M_S4;
MACRO_M_V0 M_S5;
MACRO_M_V0 M_S6;
MACRO_M_FREE M_SAR;
MACRO_M_FREE M_SEC;
MACRO_M_DELAYED M_SECURE;
MACRO_M_FREE M_SEC_COMM;
MACRO_M_FREE M_SELPOLL;
MACRO_M_FREE M_SELQ;
MACRO_M_FREE M_SIGACT;
MACRO_M_FREE M_SIGQ;
MACRO_M_RDONLY M_SMSYNC2;
MACRO_M_FREE M_SOCKET;
MACRO_M_FREE M_SONAME;
MACRO_M_FREE M_SOOPTS;
MACRO_M_V0 M_SP;
MACRO_M_FREE M_STREAMS;
MACRO_M_FREE M_STRHEAD;
MACRO_M_FREE M_STRMODSW;
MACRO_M_FREE M_STROSR;
MACRO_M_FREE M_STRPOLLS;
MACRO_M_FREE M_STRQBAND;
MACRO_M_FREE M_STRQUEUE;
MACRO_M_FREE M_STRSIGS;
MACRO_M_FREE M_STRSQ;
MACRO_M_FREE M_SUPERBLK;
MACRO_M_FREE M_SVIPC;
MACRO_M_RDONLY M_SYNCHRONOUS;
MACRO_M_V0 M_T0;
MACRO_M_V0 M_T1;
MACRO_M_V0 M_T10;
MACRO_M_V0 M_T11;
MACRO_M_V0 M_T12;
MACRO_M_V0 M_T2;
MACRO_M_V0 M_T3;
MACRO_M_V0 M_T4;
MACRO_M_V0 M_T5;
MACRO_M_V0 M_T6;
MACRO_M_V0 M_T7;
MACRO_M_V0 M_T8;
MACRO_M_V0 M_T9;
MACRO_M_FREE M_TASK;
MACRO_M_FREE M_TCFILT;
MACRO_M_FREE M_TCFLOW;
MACRO_M_FREE M_TCNTL;
MACRO_M_FREE M_TEMP;
MACRO_M_FREE M_TGEC;
MACRO_M_FREE M_THCALL;
MACRO_M_FREE M_THREAD;
MACRO_M_FREE M_THREADLOCK;
MACRO_M_DELAYED M_THROTTLE;
MACRO_M_DELAYED M_THROTTLED;
MACRO_M_FREE M_UBC;
MACRO_M_FREE M_UFS;
MACRO_M_FREE M_UFSMNT;
MACRO_M_EXT M_UIOMOVE;
MACRO_M_DELAYED M_UNTHROTTLED;
MACRO_M_DELAYED M_UPDATE;
MACRO_M_FREE M_USB;
MACRO_M_USERBITS M_USERBITS;
MACRO_M_V0 M_V0;
MACRO_MAX_MNT M_VISFLAGMASK;
MACRO_M_FREE M_VMANON;
MACRO_M_FREE M_VMCOPY;
MACRO_M_FREE M_VMENTRY;
MACRO_M_FREE M_VMKANON;
MACRO_M_FREE M_VMLOCK;
MACRO_M_FREE M_VMMAP;
MACRO_M_FREE M_VMOBJ;
MACRO_M_FREE M_VMSEG;
MACRO_M_FREE M_VMSWAP;
MACRO_M_FREE M_VMVPAGE;
MACRO_M_FREE M_VNODE;
MACRO_M_DINTR M_WAITING;
MACRO_M_FREE M_WAN;
MACRO_M_USERBITS M_WANYINT;
MACRO_M_DINTR M_WAPINT;
MACRO_M_EXT M_WCARD;
MACRO_M_DINTR M_WDMAINT;
MACRO_M_DINTR M_WHALTINT;
MACRO_M_FREE M_WS;
MACRO_M_FREE M_X25;
MACRO_M_FREE M_ZONE;
MACRO_KeyPress MapNotify;
MACRO_KeyPress MapRequest;
MACRO_MappingSuccess MappingBusy;
MACRO_MappingSuccess MappingFailed;
MACRO_MappingModifier MappingKeyboard;
MACRO_MappingModifier MappingModifier;
MACRO_KeyPress MappingNotify;
MACRO_MappingModifier MappingPointer;
MACRO_MappingSuccess MappingSuccess;
MACRO_ShiftMapIndex Mod1MapIndex;
MACRO_ShiftMask Mod1Mask;
MACRO_ShiftMapIndex Mod2MapIndex;
MACRO_ShiftMask Mod2Mask;
MACRO_ShiftMapIndex Mod3MapIndex;
MACRO_ShiftMask Mod3Mask;
MACRO_ShiftMapIndex Mod4MapIndex;
MACRO_ShiftMask Mod4Mask;
MACRO_ShiftMapIndex Mod5MapIndex;
MACRO_ShiftMask Mod5Mask;
MACRO_ModeBitsShift ModeBitsShift;
MACRO_KeyPress MotionNotify;
MOUSE_STATUS Mouse_status;
MACRO_MultibufferBadBuffer MultibufferBadBuffer;
MACRO_MultibufferBufferEventMask MultibufferBufferEventMask;
MACRO_MultibufferClobberNotify MultibufferClobberNotify;
MACRO_MultibufferUnclobbered MultibufferClobberNotifyMask;
MACRO_MultibufferUnclobbered MultibufferFullyClobbered;
MACRO_MultibufferModeMono MultibufferModeMono;
MACRO_MultibufferModeMono MultibufferModeStereo;
MACRO_MultibufferBadBuffer MultibufferNumberErrors;
MACRO_MultibufferClobberNotify MultibufferNumberEvents;
MACRO_MultibufferUnclobbered MultibufferPartiallyClobbered;
MACRO_MultibufferSideMono MultibufferSideLeft;
MACRO_MultibufferSideMono MultibufferSideMono;
MACRO_MultibufferSideMono MultibufferSideRight;
MACRO_MultibufferUnclobbered MultibufferUnclobbered;
MACRO_MultibufferUpdateActionUndefined MultibufferUpdateActionBackground;
MACRO_MultibufferUpdateActionUndefined MultibufferUpdateActionCopied;
MACRO_MultibufferUpdateActionUndefined MultibufferUpdateActionUndefined;
MACRO_MultibufferUpdateActionUndefined MultibufferUpdateActionUntouched;
MACRO_MultibufferUpdateHintFrequent MultibufferUpdateHintFrequent;
MACRO_MultibufferUpdateHintFrequent MultibufferUpdateHintIntermittent;
MACRO_MultibufferUpdateHintFrequent MultibufferUpdateHintStatic;
MACRO_MultibufferClobberNotify MultibufferUpdateNotify;
MACRO_MultibufferUnclobbered MultibufferUpdateNotifyMask;
MACRO_MultibufferWindowUpdateHint MultibufferWindowUpdateHint;
MACRO_B16MAGIC N3BMAGIC;
MACRO_NAK NAK;
MACRO_NAMESERVER NAMESERVER_PORT;
MACRO_DUMNAME NAMESZ;
MACRO_NAME NAME_MAX;
MACRO_NAME_SIZE NAME_SIZE;
MACRO_DEVICE_CONFIG NAME_SIZE_REG;
MACRO_NBBY NBBY;
MACRO_KERNEL NBPG;
MACRO_NBRA NBRA;
MACRO_NDPROTO NBUCKETS;
bool NC;
MACRO_CANBSIZ NCARGS;
MACRO_NCC NCC;
MACRO_VFLUSH NCCS;
MACRO_NCHNAMLEN NCHNAMLEN;
char *ND;
MACRO_NDADDR NDADDR;
MACRO_VDATA NDATA;
MACRO_NDDATA NDDATA;
MACRO_NDEPTHS NDEPTHS;
MACRO_NDPROTO NDPROTO;
MACRO_ND ND_MAXNODE;
MACRO_ND_PERMANENT ND_PERMANENT;
MACRO_ND_VERSION ND_VERSION;
MACRO_ND ND_VOLATILE;
MACRO_NEGb NEGb;
MACRO_NETDB NETDB_INTERNAL;
MACRO_NETDB NETDB_SUCCESS;
MACRO_NETISR NETISR_AAL;
MACRO_NETISR NETISR_ARP;
MACRO_NETISR NETISR_ARPTMO;
MACRO_NETISR NETISR_ATMRTUPT;
MACRO_NETISR NETISR_CTF;
MACRO_NETISR NETISR_DLI;
MACRO_NETISR NETISR_DLO;
MACRO_NETISR NETISR_DN;
MACRO_NETISR NETISR_EVL;
MACRO_NETISR NETISR_HDLC;
MACRO_NETISR NETISR_IFSLOW;
MACRO_NETISR NETISR_IP;
MACRO_NETISR NETISR_IPV6;
MACRO_NETISR NETISR_ISO;
MACRO_NETISR NETISR_LAT;
MACRO_NETISR NETISR_MAX;
MACRO_NETISR NETISR_MB;
MACRO_NETISR NETISR_NETDEV;
MACRO_NETISR NETISR_NETRAIN;
MACRO_NETISR NETISR_NFSTMO;
MACRO_NETISR NETISR_OTHER;
MACRO_NETISR NETISR_PFFAST;
MACRO_NETISR NETISR_PFSLOW;
MACRO_NETISR NETISR_RTMSG;
MACRO_NETISR NETISR_SRTMO;
MACRO_NETISR NETISR_STREAMS;
MACRO_NETISR NETISR_STRWELD;
MACRO_NETISR NETISR_WDD;
MACRO_NETISR NETISR_WILD;
MACRO_NETISR NETISR_X25;
MACRO_OTTYDISC NETLDISC;
MACRO_NET NET_CFG_VMAC;
MACRO_AUDIT_START NET_TCP_REJECTED_CONN;
MACRO_AUDIT_START NET_TCP_STRAY_PACKET;
MACRO_AUDIT_START NET_TCP_SYN_TIMEOUT;
MACRO_AUDIT_START NET_UDP_STRAY_PACKET;
MACRO_ORDINARY NEWLINE;
MACRO_NEW_I NEW_A;
MACRO_TYPE_ERROR NEW_C;
MACRO_USED NEW_ENTRY;
MACRO_NEW_ENV NEW_ENV_VALUE;
MACRO_NEW_ENV NEW_ENV_VAR;
MACRO_NEW_I NEW_I;
MACRO_MSWAPX NEW_OPEN_MAX_SYSTEM;
MACRO_NEW_I NEW_S;
MACRO_EMPTY NEW_TIME;
MACRO_NEW_I NEW_U;
MACRO_NEW_I NEW_W;
MACRO_NEW NEW_WA_ATTRS;
MACRO_F1 NEXT;
MACRO_NEXT2 NEXT_IS_NODE;
MACRO_NEXT2 NEXT_IS_RESULT;
MACRO_COMPOSE_TREE NEXT_IS_UNDEFINED;
MACRO_NEXT NEXT_N_TYPES_ARE_SAME_AS_NTH_TYPE_TOKEN;
MACRO_ALV NEXUS_NUMBER;
ftype3 NF3BLK;
ftype3 NF3CHR;
ftype3 NF3DIR;
ftype3 NF3FIFO;
ftype3 NF3LNK;
ftype3 NF3REG;
ftype3 NF3SOCK;
nfsftype NFBLK;
nfsftype NFCHR;
nfsftype NFDIR;
nfsftype NFLNK;
nfsftype NFNON;
MACRO_NFPREGS NFPREGS;
MACRO_NFP NFP_REGS;
nfsftype NFREG;
nfsstat3 NFS3ERR_ACCES;
nfsstat3 NFS3ERR_BADHANDLE;
nfsstat3 NFS3ERR_BADTYPE;
nfsstat3 NFS3ERR_BAD_COOKIE;
nfsstat3 NFS3ERR_DQUOT;
nfsstat3 NFS3ERR_EXIST;
nfsstat3 NFS3ERR_FBIG;
nfsstat3 NFS3ERR_INVAL;
nfsstat3 NFS3ERR_IO;
nfsstat3 NFS3ERR_ISDIR;
nfsstat3 NFS3ERR_JUKEBOX;
nfsstat3 NFS3ERR_MLINK;
nfsstat3 NFS3ERR_NAMETOOLONG;
nfsstat3 NFS3ERR_NODEV;
nfsstat3 NFS3ERR_NOENT;
nfsstat3 NFS3ERR_NOSPC;
nfsstat3 NFS3ERR_NOTDIR;
nfsstat3 NFS3ERR_NOTEMPTY;
nfsstat3 NFS3ERR_NOTSUPP;
nfsstat3 NFS3ERR_NOT_SYNC;
nfsstat3 NFS3ERR_NXIO;
nfsstat3 NFS3ERR_PERM;
nfsstat3 NFS3ERR_REMOTE;
nfsstat3 NFS3ERR_ROFS;
nfsstat3 NFS3ERR_SERVERFAULT;
nfsstat3 NFS3ERR_STALE;
nfsstat3 NFS3ERR_TOOSMALL;
nfsstat3 NFS3ERR_XDEV;
MACRO_NFS3_FHSIZE NFS3_COOKIEVERFSIZE;
MACRO_NFS3_CREATEVERFSIZE NFS3_CREATEVERFSIZE;
MACRO_NFS3_FHSIZE NFS3_FHSIZE;
MACRO_NFS_VERSION NFS3_MAXDATA;
MACRO_NFS3 NFS3_MAXUDPSIZE;
nfsstat3 NFS3_OK;
MACRO_FSF3 NFS3_PROGRAM;
MACRO_NFS3_WRITEVERFSIZE NFS3_WRITEVERFSIZE;
nfsstat NFSERR_ACCES;
nfsstat NFSERR_DQUOT;
nfsstat NFSERR_EXIST;
nfsstat NFSERR_FBIG;
nfsstat NFSERR_IO;
nfsstat NFSERR_ISDIR;
nfsstat NFSERR_NAMETOOLONG;
nfsstat NFSERR_NODEV;
nfsstat NFSERR_NOENT;
nfsstat NFSERR_NOSPC;
nfsstat NFSERR_NOTDIR;
nfsstat NFSERR_NOTEMPTY;
nfsstat NFSERR_NXIO;
nfsstat NFSERR_PERM;
nfsstat NFSERR_ROFS;
nfsstat NFSERR_STALE;
nfsstat NFSERR_WFLUSH;
MACRO_NFSMNT NFSMNT_ACDIRMAX;
MACRO_NFSMNT NFSMNT_ACDIRMIN;
MACRO_NFSMNT NFSMNT_ACREGMAX;
MACRO_NFSMNT NFSMNT_ACREGMIN;
MACRO_NFSMNT NFSMNT_AUTO;
MACRO_NFSMNT NFSMNT_CLUSTER;
MACRO_NFSMNT NFSMNT_HOSTNAME;
MACRO_NFSMNT NFSMNT_INT;
MACRO_NFSMNT NFSMNT_MAXTIMO;
MACRO_NFSMNT NFSMNT_NOAC;
MACRO_NFSMNT NFSMNT_NOCONN;
MACRO_NFSMNT NFSMNT_NOCTO;
MACRO_NFSMNT NFSMNT_POSIX;
MACRO_NFSMNT NFSMNT_PROPLIST;
MACRO_NFSMNT NFSMNT_RETRANS;
MACRO_NFSMNT NFSMNT_RSIZE;
MACRO_NFSMNT NFSMNT_SEC;
MACRO_NFSMNT NFSMNT_SOFT;
MACRO_NFSMNT NFSMNT_TCP;
MACRO_NFSMNT NFSMNT_TIMEO;
MACRO_NFSMNT NFSMNT_WSIZE;
MACRO_NFSPROC3 NFSPROC3_ACCESS;
MACRO_NFSPROC3 NFSPROC3_COMMIT;
MACRO_NFSPROC3 NFSPROC3_CREATE;
MACRO_NFSPROC3 NFSPROC3_FSINFO;
MACRO_NFSPROC3 NFSPROC3_FSSTAT;
MACRO_NFSPROC3 NFSPROC3_GETATTR;
MACRO_NFSPROC3 NFSPROC3_LINK;
MACRO_NFSPROC3 NFSPROC3_LOOKUP;
MACRO_NFSPROC3 NFSPROC3_MKDIR;
MACRO_NFSPROC3 NFSPROC3_MKNOD;
MACRO_NFSPROC3 NFSPROC3_NULL;
MACRO_NFSPROC3 NFSPROC3_PATHCONF;
MACRO_NFSPROC3 NFSPROC3_READ;
MACRO_NFSPROC3 NFSPROC3_READDIR;
MACRO_NFSPROC3 NFSPROC3_READDIRPLUS;
MACRO_NFSPROC3 NFSPROC3_READLINK;
MACRO_NFSPROC3 NFSPROC3_REMOVE;
MACRO_NFSPROC3 NFSPROC3_RENAME;
MACRO_NFSPROC3 NFSPROC3_RMDIR;
MACRO_NFSPROC3 NFSPROC3_SETATTR;
MACRO_NFSPROC3 NFSPROC3_SYMLINK;
MACRO_NFSPROC3 NFSPROC3_WRITE;
MACRO_NFS_CALLTYPES NFS_CALLTYPES;
MACRO_NFS_MAXPATHLEN NFS_FABLKSIZE;
MACRO_NFS NFS_FHSIZE;
MACRO_NFS_FIFO NFS_FIFO_DEV;
MACRO_NFS_FIFO NFS_FIFO_MODE;
MACRO_TS NFS_MAGIC;
MACRO_NFS_MAXASYNCDAEMON NFS_MAXASYNCDAEMON;
MACRO_NFS_VERSION NFS_MAXDATA;
MACRO_NFS_MAXREADDIR NFS_MAXNAMLEN;
MACRO_NFS_MAXPATHLEN NFS_MAXPATHLEN;
MACRO_NFS_MAXREADDIR NFS_MAXREADDIR;
MACRO_NFS_MAXTIMO NFS_MAXTIMO;
nfsstat NFS_OK;
MACRO_NFS_VERSION NFS_PORT;
MACRO_NFS_PROGRAM NFS_PROGRAM;
MACRO_NFS_TIMEO NFS_RETRIES;
MACRO_NFS_TIMEO NFS_TIMEO;
MACRO_NFS_V3 NFS_V3;
MACRO_NFS_VERSION NFS_VERSION;
MACRO_NFS_VERSMIN NFS_VERSMAX;
MACRO_NFS_VERSMIN NFS_VERSMIN;
MACRO_REG_BASE NGP_REGS;
MACRO_NGROUPS_0 NGROUPS;
MACRO_NGROUPS NGROUPS_MAX;
MACRO_NGRPS NGRPS;
MACRO_NIADDR NIADDR;
MACRO_NICFREE NICFREE;
MACRO_NICINOD NICINOD;
niffstate NIFF_ALERT;
ifstate NIFF_DEAD;
niffstate NIFF_DOWN;
ifstate NIFF_GREEN;
ifstate NIFF_IF_DOWN;
ifstate NIFF_INIT;
ifstate NIFF_ORANGE;
ifstate NIFF_RED;
niffstate NIFF_UNKNOWN;
niffstate NIFF_UP;
ifstate NIFF_YELLOW;
MACRO_ZERO NINE;
MACRO_NULL_DEVICE NINE_KNOB_DEVICE;
MACRO_NISAPS NISAPS;
MACRO_NIS NIS_NUM;
MACRO_NI NI_DGRAM;
MACRO_NI NI_MAXHOST;
MACRO_NI_MAXSERV NI_MAXSERV;
MACRO_NI NI_NAMEREQD;
MACRO_NI NI_NOFQDN;
MACRO_NI NI_NUMERICHOST;
MACRO_NI NI_NUMERICSERV;
MACRO_JB NJBREGS;
char *NL;
MACRO_NL0 NL0;
MACRO_NL0 NL1;
MACRO_NL0 NL2;
MACRO_NL0 NL3;
MACRO_CRMOD NLDELAY;
MACRO_OPOST NLDLY;
MACRO_NLIMITS NLIMITS;
MACRO_NLINES NLINES;
MACRO_NLTBMAX NLTBMAX;
MACRO_NL_ARGMAX NL_ARGMAX;
MACRO_NL NL_CAT_LOCALE;
MACRO_NL_CAT NL_CAT_MSGID;
MACRO_PASS NL_LANGMAX;
MACRO_NL_MAXOPEN NL_MAXOPEN;
MACRO_NL_ARGMAX NL_MSGMAX;
MACRO_NL_NMAX NL_NMAX;
MACRO_NL_SETD NL_SETD;
MACRO_NL_SETMAX NL_SETMAX;
MACRO_NL_TEXTMAX NL_TEXTMAX;
MACRO_OMAGIC NMAGIC;
MACRO_NMOUNT NMOUNT;
MACRO_NM NM_TOOLVER;
MACRO_NNETISR NNETISR;
MACRO_NO_0 NO;
MACRO_PLOT NOBS;
MACRO_PLOT NOCL;
MACRO_NOCLOSE NOCLOSE;
MACRO_PLOT NOCR;
MACRO_CMASK NODEV;
MACRO_D NOEXPR;
MACRO_PLOT NOFF;
MACRO_NOFILE NOFILE;
MACRO_COMPAT NOFILE_IN_U;
MACRO_ECHOE NOFLSH;
MACRO_NOGID NOGID;
MACRO_NGROUPS_0 NOGROUP;
MACRO_ECHOKE NOHANG;
MACRO_ECHOKE NOKERNINFO;
MACRO_NOLINE NOLINE;
MACRO_NOMSYM NOMSYM;
MACRO_NONE NONE;
MACRO_PLOT NONL;
MACRO_NONTYPE NONTYPE_TEMPLATE_TOKEN;
MACRO_NON NON_REENTRANT;
MACRO_D NOSTR;
MACRO_NOSYNC NOSYNC;
MACRO_PLOT NOTB;
MACRO_NOTIME NOTIME;
MACRO_NOT NOT_HERE;
MACRO_UNACCESSIBLE NOT_READABLE;
MACRO_NOT_SUPPORTED NOT_SUPPORTED;
MACRO_NOT_USED NOT_USED;
MACRO_NOUID NOUID;
MACRO_NO NO_ACC;
MACRO_NO_ACCESS NO_ACCESS;
MACRO_NO_ADDRESS NO_ADDRESS;
MACRO_ATTR NO_ATTR;
MACRO_USED NO_CHANGE;
MACRO_HOST_NOT NO_DATA;
MACRO_VENDOR NO_DEFECTS;
MACRO_NO_ERROR NO_ERROR;
MACRO_NO_GCS NO_GCS;
MACRO_NO2 NO_HIGHLIGHT;
MACRO_HOST_NOT NO_RECOVERY;
MACRO_REWIND NO_REWIND;
MACRO_UNACCESSIBLE NO_TERMINAL;
MACRO_SPEC NPAD_MASK;
NPmode NPMODE_DROP;
NPmode NPMODE_ERROR;
NPmode NPMODE_PASS;
NPmode NPMODE_QUEUE;
MACRO_NPOLLFILE NPOLLFILE;
MACRO_NPROTOS NPROTOS;
MACRO_NPRUHASH NPRUHASH;
MACRO_GPR2 NPTRC_REGS;
MACRO_NPTYL NPTYL;
MACRO_R_R0 NREGS;
bool NS;
MACRO_NSEC NSEC_PER_SEC;
MACRO_NSEC NSEC_PER_USEC;
MACRO_SIGMAX NSIG;
MACRO_NSIGBUS NSIGBUS;
MACRO_NSIGCLD NSIGCLD;
MACRO_NSIGFPE NSIGFPE;
MACRO_NSIGILL NSIGILL;
MACRO_NSIGPOLL NSIGPOLL;
MACRO_NSIGSEGV NSIGSEGV;
MACRO_NSIGTRAP NSIGTRAP;
MACRO_NSLC NSLC;
MACRO_NSPARE NSPARE;
MACRO_NSPEEDS NSPEEDS;
MACRO_NSPORT NSPORT_ECHO;
MACRO_NSPORT NSPORT_RE;
MACRO_NSPORT NSPORT_RESERVED;
MACRO_NSPORT NSPORT_RI;
MACRO_NSPROTO NSPROTO_ECHO;
MACRO_NSPROTO NSPROTO_ERROR;
MACRO_NSPROTO NSPROTO_MAX;
MACRO_NSPROTO NSPROTO_PE;
MACRO_NSPROTO NSPROTO_RAW;
MACRO_NSPROTO NSPROTO_RI;
MACRO_NSPROTO NSPROTO_SPP;
MACRO_NSP NSP_ALL_PACKETS;
MACRO_NSP NSP_IN_ABORT;
MACRO_NSP NSP_RAWIN;
MACRO_NSP NSP_RAWOUT;
MACRO_NSRCVQ NSRCVQ;
MACRO_NSSNDQ NSSNDQ;
MACRO_NS_ALG NS_ALG_EXPIRE_ONLY;
MACRO_NS_KEY_RESERVED NS_ALG_MD5RSA;
MACRO_NS_ALG NS_ALG_PRIVATE_OID;
MACRO_NS_FORWARDING NS_ALLOWBROADCAST;
MACRO_NS_INADDRSZ NS_CMPRSFLGS;
MACRO_NS_CONFIG NS_CONFIG_VERSION_1;
MACRO_NS_DEFAULTPORT NS_DEFAULTPORT;
MACRO_NS_CONFIG NS_DEFAULT_VALUE;
MACRO_NS_ERR NS_ERR_BADSUM;
MACRO_NS_ERR NS_ERR_BADSUM_T;
MACRO_NS_ERR NS_ERR_FULLUP;
MACRO_NS_ERR_MAX NS_ERR_MAX;
MACRO_NS_ERR NS_ERR_NOSOCK;
MACRO_NS_ERR NS_ERR_TOO_BIG;
MACRO_NS_ERR NS_ERR_TOO_OLD;
MACRO_NS_ERR NS_ERR_UNREACH_HOST;
MACRO_NS_ERR NS_ERR_UNSPEC;
MACRO_NS_ERR NS_ERR_UNSPEC_T;
MACRO_NS_FORWARDING NS_FORWARDING;
MACRO_NS_HFIXEDSZ NS_HFIXEDSZ;
MACRO_NS_INADDRSZ NS_IN6ADDRSZ;
MACRO_NS_INADDRSZ NS_INADDRSZ;
MACRO_NS_INT32SZ NS_INT16SZ;
MACRO_NS_INT32SZ NS_INT32SZ;
MACRO_NS_INT32SZ NS_INT8SZ;
MACRO_NS_KEY_NO NS_KEY_EMAIL;
MACRO_NS_KEY_NO NS_KEY_ENTITY;
MACRO_NS_KEY_NO NS_KEY_EXPERIMENTAL;
MACRO_NS_KEY_NO NS_KEY_IPSEC;
MACRO_NS_KEY_NO NS_KEY_NO_AUTH;
MACRO_NS_KEY_NO NS_KEY_NO_CONF;
MACRO_NS_KEY_NO NS_KEY_RESERVED10;
MACRO_NS_KEY_NO NS_KEY_RESERVED11;
MACRO_NS_KEY_NO NS_KEY_RESERVED3;
MACRO_NS_KEY_NO NS_KEY_RESERVED4;
MACRO_NS_KEY_RESERVED NS_KEY_RESERVED_BITMASK;
MACRO_NS_KEY_NO NS_KEY_SIGNATORYMASK;
MACRO_NS_KEY NS_KEY_TYPEMASK;
MACRO_NS_KEY NS_KEY_TYPE_AUTH_CONF;
MACRO_NS_KEY_TYPE NS_KEY_TYPE_AUTH_ONLY;
MACRO_NS_KEY_TYPE NS_KEY_TYPE_CONF_ONLY;
MACRO_NS_KEY_TYPE_NO NS_KEY_TYPE_NO_KEY;
MACRO_NS_KEY_NO NS_KEY_USERACCOUNT;
MACRO_NS_KEY_NO NS_KEY_ZONEKEY;
MACRO_NS_MAXCDNAME NS_MAXCDNAME;
MACRO_NS NS_MAXDNAME;
MACRO_NS_MAXHOPS NS_MAXHOPS;
MACRO_NS_MAXLABEL NS_MAXLABEL;
MACRO_NS_ALG NS_MD5RSA_MAX_BASE64;
MACRO_NS_ALG NS_MD5RSA_MAX_BITS;
MACRO_NS_ALG NS_MD5RSA_MAX_BYTES;
MACRO_NS_ALG NS_MD5RSA_MIN_BITS;
MACRO_NS_NXT NS_NXT_BITS;
MACRO_NS NS_PACKETSZ;
MACRO_NS_QFIXEDSZ NS_QFIXEDSZ;
MACRO_NS_FORWARDING NS_ROUTETOIF;
MACRO_NS_QFIXEDSZ NS_RRFIXEDSZ;
MACRO_NS_SIG NS_SIG_ALG;
MACRO_NS_SIG NS_SIG_EXPIR;
MACRO_NS_SIG NS_SIG_FOOT;
MACRO_NS_SIG NS_SIG_LABELS;
MACRO_NS_SIG NS_SIG_OTTL;
MACRO_NS_SIG NS_SIG_SIGNED;
MACRO_NS_SIG NS_SIG_SIGNER;
MACRO_NS_SIG NS_SIG_TYPE;
MACRO_NS_USEVALUE NS_USEDEFAULTS;
MACRO_NS_USEVALUE NS_USEVALUE;
MACRO_NS_WILDCARD NS_WILDCARD;
MACRO_OTTYDISC NTABLDISC;
MACRO_NTBS NTBS;
MACRO_NTELOPTS NTELOPTS;
MACRO_NTH NTH_TYPE_TOKEN;
MACRO_NTRACKS NTRACKS;
MACRO_NTREC NTREC;
MACRO_OTTYDISC NTTYDISC;
MACRO_B16MAGIC NTVMAGIC;
MACRO_NULL NULL;
MACRO_NULLPROC NULLPROC;
MACRO_NULLQUARK NULLQUARK;
MACRO_NULLSTRING NULLSTRING;
MACRO_NULL_DEVICE NULL_DEVICE;
MACRO_NULL_TOOLVER NULL_TOOLVER;
MACRO_NULL_xdrproc NULL_xdrproc_t;
MACRO_NUMBER_OF NUMBER_OF_BASIC3_TYPES;
MACRO_NUMBER_OF_BASIC NUMBER_OF_BASIC_OPERATORS;
MACRO_NUMBER NUMBER_OF_BASIC_TYPES;
MACRO_NUMBER_OF_TYPE NUMBER_OF_TYPE_MODIFIERS;
MACRO_UNNAMED_TOKEN NUMBER_OF_UNNAMED_TOKENS;
MACRO_NUMBER_SP NUMBER_SP_ATTRS;
MACRO_NUMB NUMB_IR_CHARS;
MACRO_CHARMAP NUMERIC_NL_LANGINFO;
MACRO_CHARMAP NUMERIC_NUMERIC_INIT;
MACRO_WS_NOTIFY NUMINPUTDEVICES;
MACRO_DEFAULT_GRAPHICS NUMSCREENS;
MACRO_NUMSYSCALLARGS NUMSYSCALLARGS;
MACRO_ACL NUM_ACL_IR_TYPES;
MACRO_NUM NUM_ATTRIBUTES;
MACRO_NUM2 NUM_COLORS;
MACRO_NUM_TAG NUM_TAG_TYPES;
MACRO_NUM_TM NUM_TM_ENUM;
MACRO_NVABITS NVABITS;
MACRO_NVISUALS NVISUALS;
MACRO_NVRAM NVRAM_BAD;
MACRO_NVRAM NVRAM_RDONLY;
MACRO_NVRAM NVRAM_RDWR;
MACRO_NXM_ACTION NXM_ACTION_NONE;
MACRO_NXM_ACTION NXM_ACTION_PSET_ADJUST;
MACRO_NXM_ACTION NXM_ACTION_SIGEV;
MACRO_NXM_ACTION NXM_ACTION_SIGFORCE;
MACRO_NXM_ACTION NXM_ACTION_SIGNAL;
MACRO_NXM_BLOCK NXM_BLOCKED_PENDING;
MACRO_NXM_BLOCK NXM_BLOCK_FAULT;
MACRO_NXM_BLOCK NXM_BLOCK_SYSCALL;
MACRO_NXM_SHARED NXM_FAST_RESTORE;
MACRO_NXM_QUANTUM NXM_FB_FIXUP;
MACRO_NXM_SHARED NXM_FP_ACTIVE;
MACRO_NXM_QUANTUM NXM_GENTRAP_HANDLER;
MACRO_NXM_KILL NXM_KILL_BOUND;
MACRO_NXM_KILL NXM_KILL_UNBOUND;
MACRO_NXM_QUANTUM NXM_QUANTUM_EXPIRE;
nxm_wake_vals NXM_SCHED_ACTIVE;
MACRO_NXM NXM_SCHED_ANY;
nxm_wake_vals NXM_SCHED_IDLE;
nxm_wake_vals NXM_SCHED_PENDING;
MACRO_NXM_QUANTUM NXM_SCHED_THREAD_UT_BLOCKED;
MACRO_NXM_SHARED NXM_SHARED_SAVED;
MACRO_NXM_QUANTUM NXM_SIGNAL_BLOCKED;
MACRO_NXM_SIGNAL NXM_SIGNAL_EXPLICIT;
MACRO_NXM_SIGNAL NXM_SIGNAL_INHERIT;
$1AACE834562D811C51DF77A95A3A7B4D NXM_SLOT_AVAIL;
$1AACE834562D811C51DF77A95A3A7B4D NXM_SLOT_BOUND;
$1AACE834562D811C51DF77A95A3A7B4D NXM_SLOT_EMPTY;
$1AACE834562D811C51DF77A95A3A7B4D NXM_SLOT_UNBOUND;
MACRO_NXM_QUANTUM NXM_SPECULATIVE_EXECUTION;
MACRO_NXM_QUANTUM NXM_STACK_OVERFLOW;
MACRO_NXM_SHARED NXM_STACK_UNBLOCK;
MACRO_NXM_SUSPEND NXM_SUSPEND_COUNT;
MACRO_NXM_SUSPEND NXM_SUSPEND_FORCE;
MACRO_NXM_THREAD NXM_SUSPEND_NOCOUNT;
MACRO_NXM_TASK NXM_TASK_INIT_SCS;
MACRO_NXM_TASK NXM_TASK_INIT_VP;
MACRO_NXM_VERSION NXM_THREAD_CANCEL;
MACRO_NXM_QUANTUM NXM_THREAD_INTERRUPTED;
MACRO_NXM_THREAD NXM_THREAD_STACK;
MACRO_NXM_QUANTUM NXM_THREAD_UNBLOCK_NO_SID;
MACRO_NXM_TYPE NXM_TYPE_MANAGER;
MACRO_NXM_TYPE NXM_TYPE_SCS;
MACRO_NXM_TYPE NXM_TYPE_VP;
MACRO_NXM_SHARED NXM_UPCALL_FRAME;
MACRO_NXM_VERSION NXM_VERSION;
MACRO_NXM_QUANTUM NXM_VP_RESCHED;
MACRO_NXM_QUANTUM NXM_VP_UNBOUND;
MACRO_NZERO NZERO;
MACRO_VDATA N_ADATA;
MACRO_AUD_VNOMAX N_AUDTUPLES;
MACRO_N_GSYM N_BCOMM;
MACRO_N_GSYM N_ECOML;
MACRO_N_GSYM N_ECOMM;
MACRO_VDATA N_EDATA;
MACRO_N_GSYM N_ENTRY;
MACRO_VDATA N_EPDATA;
MACRO_N_GSYM N_FNAME;
MACRO_N_GSYM N_FUN;
MACRO_N_GSYM N_GSYM;
MACRO_VDATA N_IPT2;
MACRO_N_GSYM N_LBRAC;
MACRO_N_GSYM N_LCSYM;
MACRO_N_GSYM N_LENG;
MACRO_N_GSYM N_LSYM;
MACRO_VDATA N_MDATA;
MACRO_VDATA N_NDATA;
MACRO_N_PC N_PC;
MACRO_N_GSYM N_PSYM;
MACRO_N_GSYM N_RBRAC;
MACRO_N_RMASK N_RMASK;
MACRO_N_GSYM N_RSYM;
MACRO_N_GSYM N_SLINE;
MACRO_N_GSYM N_SO;
MACRO_N_GSYM N_SOL;
MACRO_N_GSYM N_SSYM;
MACRO_N_GSYM N_STSYM;
MACRO_AUD_MAXEVENT N_SYSCALLS;
MACRO_N_TRUSTED N_TRUSTED_EVENTS;
MACRO_N N_UNDF;
MACRO_VDATA N_VDATA;
MACRO_N_RMASK N_VFP;
MACRO_VDATA N_XDATA;
MACRO_VDATA N_XMDATA;
MACRO_VDATA N_XMPDATA;
MACRO_VDATA N_XPDATA;
MACRO_NeedFunctionPrototypes NeedFunctionPrototypes;
MACRO_NeedNestedPrototypes NeedNestedPrototypes;
MACRO_NeedVarargsPrototypes NeedVarargsPrototypes;
MACRO_NeedWidePrototypes NeedWidePrototypes;
Boolean NeedsPendingDeleteDisjoint(XmTextWidget tw, XmTextPosition *left, XmTextPosition *right, int check_add_mode);
MACRO_NewPointer NewKeyboard;
MACRO_NewPointer NewPointer;
MACRO_NoEventMask NoEventMask;
MACRO_KeyPress NoExpose;
MACRO_NoSuchExtension NoSuchExtension;
MACRO_NoSymbol NoSymbol;
MACRO_NoValue NoValue;
MACRO_Complex Nonconvex;
MACRO_None None;
$77F4E97EC64EB764A006B2CB38EEE544 Normal;
$E5174C28E2C76F79C438E7F3C344BC7A NormalResource;
MACRO_WithdrawnState NormalState;
MACRO_ForgetGravity NorthEastGravity;
MACRO_ForgetGravity NorthGravity;
MACRO_ForgetGravity NorthWestGravity;
void NotImplemented();
MACRO_NotUseful NotUseful;
MACRO_NotifyAncestor NotifyAncestor;
MACRO_NotifyAncestor NotifyDetailNone;
MACRO_NotifyNormal NotifyGrab;
MACRO_NotifyHint NotifyHint;
MACRO_NotifyAncestor NotifyInferior;
MACRO_NotifyAncestor NotifyNonlinear;
MACRO_NotifyAncestor NotifyNonlinearVirtual;
MACRO_NotifyNormal NotifyNormal;
MACRO_NotifyAncestor NotifyPointer;
MACRO_NotifyAncestor NotifyPointerRoot;
MACRO_NotifyNormal NotifyUngrab;
MACRO_NotifyAncestor NotifyVirtual;
MACRO_NotifyNormal NotifyWhileGrabbed;
char Null[1];
MACRO_OBJ OBJ_CONTINUE;
MACRO_OBJ_FAIL OBJ_FAIL;
MACRO_MAJ OBJ_STAMP;
MACRO_TTMASK OBUFSIZ;
MACRO_OF_DEFER OB_MAXFILE;
MACRO_OB OB_MAXNAME;
MACRO_OB OB_MAXUSER;
MACRO_OPOST OCRNL;
MACRO_CRMOD ODDP;
MACRO_ODUMP ODUMP_TOOLVER;
MACRO_OPOST OFDEL;
MACRO_OFF OFF;
MACRO_OPOST OFILL;
MACRO_TS OFS_MAGIC;
MACRO_OF OF_CHKSUMCHG;
MACRO_OF_DEFER OF_DEFER;
MACRO_OF OF_MAPPED;
MACRO_OF OF_MODIFIED;
MACRO_OF OF_MOVED;
MACRO_OF OF_NONE;
MACRO_OF OF_POSTCSUM;
MACRO_OF OF_POSTMOVED;
MACRO_OF OF_POSTTST;
MACRO_OF_DEFER OF_STREAM;
MACRO_OF OF_TSTMPCHG;
MACRO_OK OK;
MACRO_OKAY OKAY;
MACRO_OKFSEEK OKFSEEK;
MACRO_OPOST OLCUC;
MACRO_OLD OLD_ENV_VALUE;
MACRO_OLD OLD_ENV_VAR;
MACRO_EMPTY OLD_TIME;
MACRO_NEW OLD_VID_ATTRS;
void OLDendnodeent(void);
struct nodeent *OLDgetnodebyaddr(const char *, int, int);
struct nodeent *OLDgetnodebyname(const char *);
struct nodeent *OLDgetnodeent(void);
int OLDsetnodeent(int);
MACRO_OMAGIC OMAGIC;
MACRO_OM OM_EXECUTE;
MACRO_OM OM_READ;
MACRO_OM_TOOLVER OM_TOOLVER;
MACRO_OM OM_WRITE;
MACRO_OFF ON;
MACRO_ZERO ONE;
MACRO_NULL_DEVICE ONE_KNOB_DEVICE;
MACRO_OPOST ONLCR;
MACRO_ONLCRNL ONLCRNL;
MACRO_OPOST ONLRET;
MACRO_OPOST ONOCR;
MACRO_ONLCRNL ONOEOT;
MACRO_ONSIG ONSIG;
$F2011E9C2552B036D6D2F02AACD7A7DD OP;
MACRO_AFTER OPEN;
MACRO_OPENMSG OPENMSG;
MACRO_OPENMSG OPENREPLY;
MACRO_OPEN_MAX OPEN_MAX_HARD;
MACRO_OPEN_MAX_SOFT OPEN_MAX_SOFT;
MACRO_OPEN OPEN_MAX_SYSTEM;
MACRO_OPOST OPOST;
MACRO_OPROCESSOR OPROCESSOR_BASIC_INFO;
MACRO_OPROCESSOR_SET OPROCESSOR_SET_BASIC_INFO;
MACRO_OPT OPT_DONT_FORCE;
MACRO_OPT OPT_EXTERNAL;
MACRO_OPT OPT_FORCE;
MACRO_ORDINARY ORDINARY;
bool OS;
MACRO_OSCNRND OSCNRND;
MACRO_OSF1 OSF1_HAB_NO;
MACRO_OSFC2 OSFC2_NUM;
MACRO_OSTRIP OSTRIP_TOOLVER;
MACRO_TEGC OS_POWERDOWN;
MACRO_NDPROTO OTHERPROTO;
MACRO_USER OTHER_OBJ;
MACRO_OTHER OTHER_PFN;
MACRO_OTTYDISC OTTYDISC;
MACRO_OTYP OTYP_BLK;
MACRO_OTYP_CHAR OTYP_CHAR;
MACRO_OTYP_CHAR OTYP_LYR;
MACRO_OTYP OTYP_MNT;
MACRO_OT_REGULAR OT_ATOM;
MACRO_OT_REGULAR OT_COLORMAP;
MACRO_OT_REGULAR OT_CURSOR;
MACRO_OT_REGULAR OT_DEVICE;
MACRO_OT_REGULAR OT_DEV_ASG;
MACRO_OT_REGULAR OT_DFLT_CNTL;
MACRO_OT_REGULAR OT_DIRECTORY;
MACRO_OT_REGULAR OT_FILE_CNTL;
MACRO_OT_REGULAR OT_FILE_DESCR;
MACRO_OT_FILE OT_FILE_NAME;
MACRO_OT_REGULAR OT_FONT;
MACRO_OT_REGULAR OT_FONT_PATH;
MACRO_OT_REGULAR OT_GC;
MACRO_OT_REGULAR OT_GRP;
MACRO_OT_REGULAR OT_HOST_ACCESS_LIST;
MACRO_OT_REGULAR OT_INPUT_FOCUS;
MACRO_OT_REGULAR OT_LP_CNTL;
MACRO_OT_REGULAR OT_MEMORY;
MACRO_OT_REGULAR OT_MESSAGE_QUEUE;
MACRO_OT OT_MIPS_COFF;
MACRO_OT OT_MIPS_ELF;
MACRO_OT OT_NONE;
MACRO_OT_REGULAR OT_OVERRIDE_WINDOW;
MACRO_OT_REGULAR OT_PIPE;
MACRO_OT_REGULAR OT_PIXMAP;
MACRO_OT_REGULAR OT_PROCESS;
MACRO_OT_REGULAR OT_PROPERTY;
MACRO_OT_REGULAR OT_PRPWD;
MACRO_OT_REGULAR OT_PWD;
MACRO_OT_REGULAR OT_REGULAR;
MACRO_OT_REGULAR OT_SELECTION;
MACRO_OT_REGULAR OT_SEMAPHORE;
MACRO_OT_REGULAR OT_SHARED_MEMORY;
MACRO_OT_REGULAR OT_SOCKET;
MACRO_OT_REGULAR OT_STREAM;
MACRO_OT_REGULAR OT_SUBSYS;
MACRO_OT_REGULAR OT_SYMLINK;
MACRO_OT_REGULAR OT_TERM_CNTL;
MACRO_OT_REGULAR OT_WINDOW;
MACRO_OUTBUFFER OUTBUFFER_SIZE;
MACRO_OUTPUT OUTPUT_PACKET;
MACRO_OUT OUT_OF_RANGE;
MACRO_DOMAIN OVERFLOW;
MACRO_COLOR_MAP OVERLAY_BLINK_MASK;
MACRO_COLOR_MAP OVERLAY_COLOR_BASE;
MACRO_COLOR_MAP OVERLAY_READ_MASK;
MACRO_OV OV_CHECK_ALL;
MACRO_OV OV_CHECK_EXACT;
MACRO_OV_ERR_FSTYPE OV_ERR_ADVFS_CHECK;
MACRO_OV_ERR_FSTYPE OV_ERR_DSKLBL_UPD;
MACRO_OV_ERR_FSTYPE OV_ERR_FSTYPE_OVERLAP;
MACRO_OV_ERR OV_ERR_INVALID_DEV;
MACRO_OV_ERR_FSTYPE OV_ERR_INVALID_DSKLBL;
MACRO_OV_ERR_MAX OV_ERR_MAX;
MACRO_OV_ERR_FSTYPE OV_ERR_MULT_FSTYPE_OVERLAP;
MACRO_FSL_DVNMDSK_BDEV OV_ERR_OPEN_OVERLAP;
MACRO_OV_ERR_FSTYPE OV_ERR_SWAP_CHECK;
MACRO_ONLCRNL OXTABS;
MACRO_O_ACCMODE O_ACCMODE;
MACRO_O O_APPEND;
MACRO_O_BLKINUSE O_BLKINUSE;
MACRO_O_WRONLY O_CACHE;
MACRO_O_WRONLY O_CREAT;
MACRO_LOCK O_DEFER;
MACRO_O_WRONLY O_DIRECTIO;
MACRO_O_WRONLY O_DRD;
MACRO_S_DEFFILEMODE O_DSYNC;
MACRO_O_WRONLY O_EXCL;
MACRO_LOCK O_NDELAY;
MACRO_O_WRONLY O_NOCTTY;
MACRO_O O_NONBLOCK;
MACRO_O_ACCMODE O_RDONLY;
MACRO_O_WRONLY O_RDWR;
MACRO_S_DEFFILEMODE O_RSYNC;
MACRO_S_DEFFILEMODE O_SYNC;
MACRO_O_WRONLY O_TRUNC;
MACRO_O_WRONLY O_WRONLY;
MACRO_ObjectIndex ObjectIndex;
MACRO_Above Opposite;
MACRO_KeyClass OtherClass;
MACRO_Othermap Othermap;
MACRO_InProximity OutOfProximity;
MACRO_OverrideShellIndex OverrideShellIndex;
MACRO_NoEventMask OwnerGrabButtonMask;
MACRO_P4 P4;
MACRO_PACKED PACKED_MAGIC;
MACRO_PACKETSZ PACKETSZ;
MACRO_PAGE PAGE_MASK;
MACRO_PAGE_SHIFT PAGE_SHIFT;
MACRO_PAGE PAGE_SIZE;
$F2011E9C2552B036D6D2F02AACD7A7DD PAL;
MACRO_PAL_bpt PAL_bpt;
MACRO_PAL_bpt PAL_bugchk;
MACRO_PAL_callsys PAL_callsys;
MACRO_PAL_cflush PAL_cflush;
MACRO_PAL_bpt PAL_chmk;
MACRO_PAL PAL_clrfen;
MACRO_PAL_cobratt PAL_cobratt;
MACRO_PAL_cserve PAL_cserve;
MACRO_PAL_halt PAL_draina;
MACRO_PAL_gentrap PAL_gentrap;
MACRO_PAL_halt PAL_halt;
MACRO_PAL_callsys PAL_imb;
MACRO_PAL_cserve PAL_ipir;
MACRO_PAL_jtopal PAL_jtopal;
MACRO_PAL_mtpr PAL_mtpr_mces;
MACRO_PAL_halt PAL_nphalt;
MACRO_PAL_rdmces PAL_rdmces;
MACRO_PAL_rdps PAL_rdps;
MACRO_PAL_rduniq PAL_rduniq;
MACRO_PAL_rdusp PAL_rdusp;
MACRO_PAL_rdval PAL_rdval;
MACRO_PAL_cflush PAL_rti;
MACRO_PAL_rtsys PAL_rtsys;
MACRO_PAL_swpctx PAL_swpctx;
MACRO_PAL_swpipl PAL_swpipl;
MACRO_PAL_rdmces PAL_swppal;
MACRO_PAL_tbi PAL_tbi;
MACRO_PAL_urti PAL_urti;
MACRO_PAL_whami PAL_whami;
MACRO_PAL_wrent PAL_wrent;
MACRO_PAL_wrfen PAL_wrfen;
MACRO_PAL_wrkgp PAL_wrkgp;
MACRO_PAL_wrperfmon PAL_wrperfmon;
MACRO_PAL_rduniq PAL_wruniq;
MACRO_PAL_wrusp PAL_wrusp;
MACRO_PAL_wrval PAL_wrval;
MACRO_PAL_wrvptptr PAL_wrvptptr;
MACRO_PAL_wtint PAL_wtint;
MACRO_PANED PANED_ASK_CHILD;
MACRO_PANED PANED_GRIP_SIZE;
MACRO_PANNER PANNER_DEFAULT_SCALE;
MACRO_PANNER PANNER_OUTOFRANGE;
MACRO_PANORAMIX PANORAMIX_MAJOR_VERSION;
MACRO_PANORAMIX PANORAMIX_MINOR_VERSION;
MACRO_CS5 PARENB;
MACRO_IGNBRK PARMRK;
MACRO_CS5 PARODD;
MACRO_L001000 PASS8;
MACRO_PASS PASS_MAX;
MACRO_NOLINE PASTENDPOS;
MACRO_TZNAME PATH_MAX;
MACRO_F1 PAUSE;
MACRO_TAR PAX;
MACRO_PAllHints PAllHints;
MACRO_USPosition PAspect;
MACRO_PI_FPUTYPE PBIND_NONE;
MACRO_PBIND PBIND_QUERY;
MACRO_PBLKSIZ PBLKSIZ;
MACRO_USPosition PBaseSize;
char PC;
MACRO_EV3 PCA56_CPU;
MACRO_EV3 PCA57_CPU;
MACRO_PSWP PCATCH;
MACRO_PCB PCB_A0;
MACRO_PCB PCB_A1;
MACRO_PCB PCB_A2;
MACRO_PCB PCB_A3;
MACRO_PCB PCB_A4;
MACRO_PCB PCB_A5;
MACRO_PCB PCB_AT;
MACRO_PCB PCB_GP;
MACRO_PCB PCB_NREGS;
MACRO_PCB PCB_PC;
MACRO_SP PCB_PME_BIT;
MACRO_PCB PCB_PS;
MACRO_PCB PCB_RA;
MACRO_PCB PCB_S0;
MACRO_PCB PCB_S1;
MACRO_PCB PCB_S2;
MACRO_PCB PCB_S3;
MACRO_PCB PCB_S4;
MACRO_PCB PCB_S5;
MACRO_PCB PCB_S6;
MACRO_PCB PCB_SP;
MACRO_PCB PCB_T0;
MACRO_PCB PCB_T1;
MACRO_PCB PCB_T10;
MACRO_PCB PCB_T11;
MACRO_PCB PCB_T12;
MACRO_PCB PCB_T2;
MACRO_PCB PCB_T3;
MACRO_PCB PCB_T4;
MACRO_PCB PCB_T5;
MACRO_PCB PCB_T6;
MACRO_PCB PCB_T7;
MACRO_PCB PCB_T8;
MACRO_PCB PCB_T9;
MACRO_PCB PCB_V0;
MACRO_PCM PCM;
MACRO_OTTYDISC PCMDISC;
MACRO_TBUNUSED PCMS_DISC;
MACRO_PFM PCNTCALLER;
MACRO_PFM PCNTCLEARCNT;
MACRO_PFM PCNTCLEARPCBPME;
MACRO_PFM PCNTLOGALL;
MACRO_PFM PCNTLOGSELECT;
MACRO_PCNTOPENONE PCNTOPENALL;
MACRO_PCNTOPENONE PCNTOPENEACH;
MACRO_PCNTOPENMASK PCNTOPENMASK;
MACRO_PCNTOPENONE PCNTOPENONE;
MACRO_PFM PCNTRDISABLE;
MACRO_PFM PCNTRENABLE;
MACRO_PC_GETCLINFO PC_ADMIN;
MACRO_PC_CLINFOSZ PC_CLINFOSZ;
MACRO_PC_CLNMSZ PC_CLNMSZ;
MACRO_PC PC_CLNULL;
MACRO_PC_CLPARMSZ PC_CLPARMSZ;
MACRO_PC_CLPARMSZ PC_GETCID;
MACRO_PC_GETCLINFO PC_GETCLINFO;
MACRO_PC_GETCLINFO PC_GETPARMS;
MACRO_PC_GETCLINFO PC_SETPARMS;
MACRO_VDATA PDATA;
MACRO_PDP PDP_ENDIAN;
MACRO_PDSC_CRD_MEMORY PDSC_CRD_MEMORY_SPECULATION_MASK;
MACRO_PDSC_CRD PDSC_CRD_NO_PROLOG_MASK;
MACRO_PDSC_CRD PDSC_CRD_OFFSET_MASK;
MACRO_PDSC_DEFAULT PDSC_DEFAULT_ENTRY_RA;
MACRO_PDSC_EXC PDSC_EXC_CALLER;
MACRO_PDSC_EXC PDSC_EXC_IEEE;
MACRO_PDSC PDSC_EXC_MASK;
MACRO_PDSC_EXC PDSC_EXC_SIGNAL;
MACRO_PDSC_EXC PDSC_EXC_SIGNAL_ALL;
MACRO_PDSC PDSC_EXC_SILENT;
MACRO_PDSC_FLAGS PDSC_FLAGS_ARITHMETIC_SPECULATION;
MACRO_PDSC_FLAGS PDSC_FLAGS_BASE_REG_IS_FP;
MACRO_PDSC_FLAGS PDSC_FLAGS_EXCEPTION_FRAME;
MACRO_PDSC_FLAGS PDSC_FLAGS_EXC_TYPE_1;
MACRO_PDSC_FLAGS PDSC_FLAGS_EXC_TYPE_2;
MACRO_PDSC_FLAGS PDSC_FLAGS_EXC_TYPE_3;
MACRO_PDSC_FLAGS PDSC_FLAGS_EXTENDER;
MACRO_PDSC_FLAGS PDSC_FLAGS_HANDLER_VALID;
MACRO_PDSC_FLAGS PDSC_FLAGS_REGISTER_FRAME;
MACRO_PDSC_FLAGS PDSC_FLAGS_RESERVED2;
MACRO_PDSC_FLAGS PDSC_FLAGS_SHORT;
MACRO_PDSC_INST PDSC_FRAME_SIZE_SHIFT;
MACRO_PDSC_INST PDSC_INST_OFFSET_SHIFT;
MACRO_PDSC_SHORT PDSC_SHORT_RPD_FMASK_SHIFT;
MACRO_PDSC_INST PDSC_SHORT_RPD_IMASK_SHIFT;
MACRO_TEGC PEER_TO_PEER;
MACRO_ECHOKE PENDIN;
MACRO_NOT PERMISSION_DENIED;
MACRO_PERMMASK PERMMASK;
MACRO_PERM PERM_CTRL;
MACRO_PERM PERM_DELETE;
MACRO_PERM PERM_EXTEND;
MACRO_PERM PERM_INSERT;
MACRO_PERM PERM_LOOKUP;
MACRO_PERM PERM_MODIFY;
MACRO_PERSISTENCE_REQUEST PERSISTENCE_REQUEST_DELETE;
MACRO_PERSISTENCE_REQUEST PERSISTENCE_REQUEST_FETCH;
MACRO_PERSISTENCE PERSISTENCE_REQUEST_STORE;
MACRO_PERSISTENCE_REQUEST PERSISTENCE_STRUCT_MAX_KEY_LENGTH;
MACRO_PERSISTENCE PERSISTENCE_STRUCT_VERSION;
MACRO_PEXASFMarkerType PEXASFBFInteriorStyle;
MACRO_PEXASFMarkerType PEXASFBFInteriorStyleIndex;
MACRO_PEXASFMarkerType PEXASFBFReflectionAttr;
MACRO_PEXASFMarkerType PEXASFBFReflectionModel;
MACRO_PEXASFMarkerType PEXASFBFSurfaceColor;
MACRO_PEXASFMarkerType PEXASFBFSurfaceInterp;
MACRO_PEXASFMarkerType PEXASFCharExpansion;
MACRO_PEXASFMarkerType PEXASFCharSpacing;
MACRO_PEXASFMarkerType PEXASFCurveApprox;
MACRO_PEXASFMarkerType PEXASFInteriorStyle;
MACRO_PEXASFMarkerType PEXASFInteriorStyleIndex;
MACRO_PEXASFMarkerType PEXASFLineColor;
MACRO_PEXASFMarkerType PEXASFLineType;
MACRO_PEXASFMarkerType PEXASFLineWidth;
MACRO_PEXASFMarkerType PEXASFMarkerColor;
MACRO_PEXASFMarkerType PEXASFMarkerScale;
MACRO_PEXASFMarkerType PEXASFMarkerType;
MACRO_PEXASFMarkerType PEXASFPolylineInterp;
MACRO_PEXASFMarkerType PEXASFReflectionAttr;
MACRO_PEXASFMarkerType PEXASFReflectionModel;
MACRO_PEXASFMarkerType PEXASFSurfaceApprox;
MACRO_PEXASFMarkerType PEXASFSurfaceColor;
MACRO_PEXASFMarkerType PEXASFSurfaceEdgeColor;
MACRO_PEXASFMarkerType PEXASFSurfaceEdgeType;
MACRO_PEXASFMarkerType PEXASFSurfaceEdgeWidth;
MACRO_PEXASFMarkerType PEXASFSurfaceEdges;
MACRO_PEXASFMarkerType PEXASFSurfaceInterp;
MACRO_PEXASFMarkerType PEXASFTextColor;
MACRO_PEXASFMarkerType PEXASFTextFontIndex;
MACRO_PEXASFMarkerType PEXASFTextPrec;
MACRO_PEXATextNotConnected PEXATextConnected;
MACRO_PEXATextNotConnected PEXATextNotConnected;
MACRO_PEXNoPick PEXAbortedPick;
void PEXAccumulateState(Display *, PEXRenderer, unsigned __int64, PEXElementRef *);
void PEXAddToNameSet(Display *, XID, PEXOCRequestType, unsigned __int64, PEXName *);
MACRO_PEXAll PEXAll;
MACRO_PEXAlreadyFreed PEXAlreadyFreed;
void PEXAnnotationText(Display *, XID, PEXOCRequestType, PEXCoord *, PEXCoord *, int, char *);
void PEXAnnotationText2D(Display *, XID, PEXOCRequestType, PEXCoord2D *, PEXCoord2D *, int, char *);
MACRO_PEXAnyDrawable PEXAnyDrawable;
void PEXApplicationData(Display *, XID, PEXOCRequestType, int, char *);
MACRO_PEXApproxImpDep PEXApproxConstantBetweenKnots;
MACRO_PEXApproxImpDep PEXApproxDCChordalSize;
MACRO_PEXSurfaceApproxWCPlanarDev PEXApproxDCRelative;
MACRO_PEXApproxImpDep PEXApproxImpDep;
MACRO_PEXApproxImpDep PEXApproxNPCChordalSize;
MACRO_PEXSurfaceApproxWCPlanarDev PEXApproxNPCRelative;
MACRO_PEXApproxImpDep PEXApproxWCChordalSize;
MACRO_PEXSurfaceApproxWCPlanarDev PEXApproxWCRelative;
MACRO_PEXNone PEXBackFaces;
MACRO_PEXForward PEXBackward;
MACRO_PEXBadVector PEXBadAxis;
MACRO_PEXBadVector PEXBadDistance;
MACRO_PEXBadExtension PEXBadExtension;
MACRO_PEXBadExtension PEXBadFloatConversion;
MACRO_PEXBadVector PEXBadHomoCoord;
MACRO_PEXBadVector PEXBadLimits;
MACRO_PEXBadExtension PEXBadLocalAlloc;
MACRO_PEXBadVector PEXBadMatrix;
MACRO_PEXBadVector PEXBadPRP;
MACRO_PEXBadVector PEXBadPlanes;
MACRO_PEXBadVector PEXBadPrimitive;
MACRO_PEXBadExtension PEXBadProtocolVersion;
MACRO_PEXBadVector PEXBadSubVolume;
MACRO_PEXBadVector PEXBadVector;
MACRO_PEXBadVector PEXBadVectors;
MACRO_PEXBadVector PEXBadViewport;
void PEXBeginPickAll(Display *, Drawable, PEXRenderer, __int64, int, int, int, int, PEXPickRecord *);
void PEXBeginPickOne(Display *, Drawable, PEXRenderer, __int64, int, int, PEXPickRecord *);
void PEXBeginRendering(Display *, Drawable, PEXRenderer);
void PEXBeginStructure(Display *, PEXRenderer, __int64);
MACRO_PEXBeginning PEXBeginning;
MACRO_PEXTopFirst PEXBottomFirst;
MACRO_PEXTopPart PEXBottomPart;
MACRO_PEXAnyDrawable PEXBufferDrawable;
void PEXBuildTransform(PEXCoord *, PEXVector *, double, double, double, PEXVector *, PEXMatrix);
void PEXBuildTransform2D(PEXCoord2D *, PEXVector2D *, double, PEXVector2D *, PEXMatrix3x3);
MACRO_PEXBundled PEXBundled;
MACRO_PEXIMM PEXCBS;
MACRO_PEXCSByte PEXCSByte;
MACRO_PEXCSByte PEXCSLong;
MACRO_PEXCSByte PEXCSShort;
void PEXCellArray(Display *, XID, PEXOCRequestType, PEXCoord *, PEXCoord *, PEXCoord *, unsigned int, unsigned int, PEXTableIndex *);
void PEXCellArray2D(Display *, XID, PEXOCRequestType, PEXCoord2D *, PEXCoord2D *, unsigned int, unsigned int, PEXTableIndex *);
void PEXChangeNameSet(Display *, PEXNameSet, int, unsigned __int64, PEXName *);
void PEXChangePickDevice(Display *, PEXWorkstation, int, unsigned __int64, PEXPDAttributes *);
void PEXChangePipelineContext(Display *, PEXPipelineContext, unsigned __int64 *, PEXPCAttributes *);
void PEXChangeRenderer(Display *, PEXRenderer, unsigned __int64, PEXRendererAttributes *);
void PEXChangeSearchContext(Display *, PEXSearchContext, unsigned __int64, PEXSCAttributes *);
void PEXChangeStructureRefs(Display *, PEXStructure, PEXStructure);
MACRO_PEXStringPrecision PEXCharPrecision;
MACRO_PEXClip PEXClip;
MACRO_PEXClipXY PEXClipBack;
MACRO_PEXClipXY PEXClipFront;
MACRO_PEXClipXY PEXClipXY;
MACRO_PEXClipXY PEXClippingAll;
MACRO_PEXColorApproxAnyValues PEXColorApproxAnyValues;
MACRO_PEXColorApproxRGB PEXColorApproxCIE;
MACRO_PEXColorApproxRGB PEXColorApproxHLS;
MACRO_PEXColorApproxRGB PEXColorApproxHSV;
MACRO_PEXColorApproxAnyValues PEXColorApproxPowersOf2;
MACRO_PEXColorApproxRGB PEXColorApproxRGB;
MACRO_PEXColorApproxRGB PEXColorApproxYIQ;
MACRO_PEXColorSpace PEXColorRange;
MACRO_PEXColorSpace PEXColorSpace;
MACRO_PEXColorTypeIndexed PEXColorTypeCIE;
MACRO_PEXColorTypeIndexed PEXColorTypeHLS;
MACRO_PEXColorTypeIndexed PEXColorTypeHSV;
MACRO_PEXColorTypeIndexed PEXColorTypeIndexed;
MACRO_PEXColorTypeIndexed PEXColorTypeRGB;
MACRO_PEXColorTypeIndexed PEXColorTypeRGB16;
MACRO_PEXColorTypeIndexed PEXColorTypeRGB8;
MACRO_PEXCompleteImplementation PEXCompleteImplementation;
MACRO_PEXContourDisjoint PEXContourDisjoint;
MACRO_PEXContourDisjoint PEXContourIntersecting;
MACRO_PEXContourDisjoint PEXContourNested;
MACRO_PEXContourDisjoint PEXContourUnknown;
void PEXCopyBytesToOC(Display *, int, char *);
void PEXCopyElements(Display *, PEXStructure, int, __int64, int, __int64, PEXStructure, int, __int64);
void PEXCopyLookupTable(Display *, PEXLookupTable, PEXLookupTable);
void PEXCopyNameSet(Display *, PEXNameSet, PEXNameSet);
void PEXCopyPipelineContext(Display *, unsigned __int64 *, PEXPipelineContext, PEXPipelineContext);
void PEXCopySearchContext(Display *, unsigned __int64, PEXSearchContext, PEXSearchContext);
void PEXCopyStructure(Display *, PEXStructure, PEXStructure);
MACRO_PEXCorrect PEXCorrect;
unsigned __int64 PEXCountOCs(int, unsigned __int64, char *);
PEXLookupTable PEXCreateLookupTable(Display *, Drawable, int);
PEXNameSet PEXCreateNameSet(Display *);
PEXPickMeasure PEXCreatePickMeasure(Display *, PEXWorkstation, int);
PEXPipelineContext PEXCreatePipelineContext(Display *, unsigned __int64 *, PEXPCAttributes *);
PEXRenderer PEXCreateRenderer(Display *, Drawable, unsigned __int64, PEXRendererAttributes *);
PEXSearchContext PEXCreateSearchContext(Display *, unsigned __int64, PEXSCAttributes *);
PEXStructure PEXCreateStructure(Display *);
PEXWorkstation PEXCreateWorkstation(Display *, Drawable, PEXLookupTable, PEXLookupTable, PEXLookupTable, PEXLookupTable, PEXLookupTable, PEXLookupTable, PEXLookupTable, PEXLookupTable, PEXLookupTable, PEXLookupTable, PEXLookupTable, PEXNameSet, PEXNameSet, PEXNameSet, PEXNameSet, int);
MACRO_PEXBeginning PEXCurrent;
MACRO_PEXApproxImpDep PEXCurveApproxDCChordalDev;
MACRO_PEXApproxImpDep PEXCurveApproxNPCChordalDev;
MACRO_PEXApproxImpDep PEXCurveApproxWCChordalDev;
MACRO_PEXIEEE PEXDEC_D_Floating;
MACRO_PEXIEEE PEXDEC_F_Floating;
PEXOCData *PEXDecodeOCs(int, unsigned __int64, unsigned __int64, char *);
MACRO_PEXDefaultEntry PEXDefaultEntry;
MACRO_PEXCorrect PEXDeferred;
MACRO_PEXDefaultEntry PEXDefinedEntry;
void PEXDeleteBetweenLabels(Display *, PEXStructure, __int64, __int64);
void PEXDeleteElements(Display *, PEXStructure, int, __int64, int, __int64);
void PEXDeleteTableEntries(Display *, PEXLookupTable, unsigned int, unsigned int);
void PEXDeleteToLabel(Display *, PEXStructure, int, __int64, __int64);
void PEXDestroyStructures(Display *, unsigned __int64, PEXStructure *);
MACRO_PEXSingleBuffered PEXDoubleBuffered;
MACRO_PEXDynamic PEXDynamic;
MACRO_PEXETMarkerType PEXETATextStyle;
MACRO_PEXETCounts PEXETAll;
MACRO_PEXETMarkerType PEXETColorApproxModel;
MACRO_PEXETMarkerType PEXETColorApproxType;
MACRO_PEXETMarkerType PEXETColorType;
MACRO_PEXETCounts PEXETCounts;
MACRO_PEXETMarkerType PEXETCurveApproxMethod;
MACRO_PEXETMarkerType PEXETDisplayUpdateMode;
MACRO_PEXETMarkerType PEXETEscape;
MACRO_PEXETMarkerType PEXETFloatFormat;
MACRO_PEXETMarkerType PEXETGDP;
MACRO_PEXETMarkerType PEXETGDP2D;
MACRO_PEXETMarkerType PEXETGSE;
MACRO_PEXETMarkerType PEXETHLHSRMode;
MACRO_PEXETMarkerType PEXETHatchStyle;
MACRO_PEXETCounts PEXETIndex;
MACRO_PEXETMarkerType PEXETInteriorStyle;
MACRO_PEXETMarkerType PEXETLightType;
MACRO_PEXETMarkerType PEXETLineType;
MACRO_PEXETMarkerType PEXETMarkerType;
MACRO_PEXETCounts PEXETMnemonic;
MACRO_PEXETMarkerType PEXETModelClipOperator;
MACRO_PEXETMarkerType PEXETParaSurfCharacteristics;
MACRO_PEXETMarkerType PEXETPickAllMethod;
MACRO_PEXETMarkerType PEXETPickDeviceType;
MACRO_PEXETMarkerType PEXETPickOneMethod;
MACRO_PEXETMarkerType PEXETPolylineInterpMethod;
MACRO_PEXETMarkerType PEXETPromptEchoType;
MACRO_PEXETMarkerType PEXETReflectionModel;
MACRO_PEXETMarkerType PEXETRenderingColorModel;
MACRO_PEXETMarkerType PEXETSurfaceApproxMethod;
MACRO_PEXETMarkerType PEXETSurfaceEdgeType;
MACRO_PEXETMarkerType PEXETSurfaceInterpMethod;
MACRO_PEXETMarkerType PEXETTrimCurveApproxMethod;
MACRO_PEXNoEcho PEXEcho;
MACRO_PEXEchoPrimitive PEXEchoNetwork;
MACRO_PEXEchoPrimitive PEXEchoPrimitive;
MACRO_PEXEchoPrimitive PEXEchoStructure;
MACRO_PEXElementPtr PEXEditMode;
MACRO_PEXElementType PEXElementData;
MACRO_PEXElementPtr PEXElementPtr;
int PEXElementSearch(Display *, PEXStructure, int, __int64, int, unsigned __int64, unsigned __int16 *, unsigned __int64, unsigned __int16 *, unsigned __int64 *);
MACRO_PEXElementType PEXElementSize;
MACRO_PEXElementType PEXElementType;
MACRO_PEXEmpty PEXEmpty;
char *PEXEncodeOCs(int, unsigned __int64, PEXOCData *, unsigned __int64 *);
void PEXEncodedAnnoText(Display *, XID, PEXOCRequestType, PEXCoord *, PEXCoord *, unsigned int, PEXEncodedTextData *);
void PEXEncodedAnnoText2D(Display *, XID, PEXOCRequestType, PEXCoord2D *, PEXCoord2D *, unsigned int, PEXEncodedTextData *);
void PEXEncodedText(Display *, XID, PEXOCRequestType, PEXCoord *, PEXVector *, PEXVector *, unsigned int, PEXEncodedTextData *);
void PEXEncodedText2D(Display *, XID, PEXOCRequestType, PEXCoord2D *, unsigned int, PEXEncodedTextData *);
MACRO_PEXBeginning PEXEnd;
PEXPickPath *PEXEndPickAll(Display *, PEXRenderer, int *, int *, unsigned __int64 *);
PEXPickPath *PEXEndPickOne(Display *, PEXRenderer, int *, int *);
void PEXEndRendering(Display *, PEXRenderer, int);
void PEXEndStructure(Display *, PEXRenderer);
MACRO_PEXBadExtension PEXErrorStringLength;
void PEXEscape(Display *, unsigned __int64, int, char *);
MACRO_PEXEscapeSetEchoColor PEXEscapeSetEchoColor;
char *PEXEscapeWithReply(Display *, unsigned __int64, int, char *, unsigned __int64 *);
void PEXExecuteDeferredActions(Display *, PEXWorkstation);
void PEXExecuteStructure(Display *, XID, PEXOCRequestType, PEXStructure);
void PEXExtendedCellArray(Display *, XID, PEXOCRequestType, PEXCoord *, PEXCoord *, PEXCoord *, unsigned int, unsigned int, int, PEXArrayOfColor);
int PEXFetchElements(Display *, PEXStructure, int, __int64, int, __int64, int, unsigned __int64 *, unsigned __int64 *, char **);
int PEXFetchElementsAndSend(Display *, PEXStructure, int, __int64, int, __int64, Display *, XID, PEXOCRequestType);
void PEXFillArea(Display *, XID, PEXOCRequestType, int, int, unsigned int, PEXCoord *);
void PEXFillArea2D(Display *, XID, PEXOCRequestType, int, int, unsigned int, PEXCoord2D *);
void PEXFillAreaSet(Display *, XID, PEXOCRequestType, int, int, int, unsigned int, PEXListOfCoord *);
void PEXFillAreaSet2D(Display *, XID, PEXOCRequestType, int, int, int, unsigned int, PEXListOfCoord2D *);
void PEXFillAreaSetWithData(Display *, XID, PEXOCRequestType, int, int, int, unsigned int, unsigned int, int, unsigned int, PEXFacetData *, PEXListOfVertex *);
void PEXFillAreaWithData(Display *, XID, PEXOCRequestType, int, int, unsigned int, unsigned int, int, PEXFacetData *, unsigned int, PEXArrayOfVertex);
void PEXFinishOCs(Display *);
MACRO_PEXForward PEXForward;
MACRO_PEXNotFound PEXFound;
void PEXFreeEnumInfo(unsigned __int64, unsigned __int64 *, PEXEnumTypeDesc *);
void PEXFreeFontInfo(unsigned __int64, PEXFontInfo *);
void PEXFreeFontNames(unsigned __int64, char **);
void PEXFreeLookupTable(Display *, PEXLookupTable);
void PEXFreeNameSet(Display *, PEXNameSet);
void PEXFreeOCData(unsigned __int64, PEXOCData *);
void PEXFreePCAttributes(PEXPCAttributes *);
void PEXFreePDAttributes(PEXPDAttributes *);
void PEXFreePMAttributes(PEXPMAttributes *);
void PEXFreePickMeasure(Display *, PEXPickMeasure);
void PEXFreePickPaths(unsigned __int64, PEXPickPath *);
void PEXFreePipelineContext(Display *, PEXPipelineContext);
void PEXFreeRenderer(Display *, PEXRenderer);
void PEXFreeRendererAttributes(PEXRendererAttributes *);
void PEXFreeSCAttributes(PEXSCAttributes *);
void PEXFreeSearchContext(Display *, PEXSearchContext);
void PEXFreeStructurePaths(unsigned __int64, PEXStructurePath *);
void PEXFreeTableEntries(int, unsigned int, PEXPointer);
void PEXFreeWorkstation(Display *, PEXWorkstation);
void PEXFreeWorkstationAttributes(PEXWorkstationAttributes *);
MACRO_PEXNone PEXFrontFaces;
MACRO_PEXGANone PEXGAColor;
MACRO_PEXGANone PEXGAEdges;
MACRO_PEXGANone PEXGANone;
MACRO_PEXGANone PEXGANormal;
void PEXGDP(Display *, XID, PEXOCRequestType, __int64, unsigned int, PEXCoord *, unsigned __int64, char *);
void PEXGDP2D(Display *, XID, PEXOCRequestType, __int64, unsigned int, PEXCoord2D *, unsigned __int64, char *);
void PEXGSE(Display *, XID, PEXOCRequestType, __int64, int, char *);
int PEXGeoNormFillArea(unsigned int, unsigned int, int, PEXFacetData *, unsigned int, PEXArrayOfVertex);
int PEXGeoNormFillAreaSet(unsigned int, unsigned int, int, unsigned int, PEXFacetData *, PEXListOfVertex *);
int PEXGeoNormQuadrilateralMesh(unsigned int, unsigned int, int, PEXArrayOfFacetData, unsigned int, unsigned int, PEXArrayOfVertex);
int PEXGeoNormSetOfFillAreaSets(unsigned int, unsigned int, int, unsigned int, PEXArrayOfFacetData, unsigned int, PEXArrayOfVertex, unsigned int, PEXConnectivityData *);
int PEXGeoNormTriangleStrip(unsigned int, unsigned int, int, PEXArrayOfFacetData, unsigned int, PEXArrayOfVertex);
PEXStructurePath *PEXGetAncestors(Display *, PEXStructure, int, unsigned __int64, unsigned __int64 *);
int PEXGetDefinedIndices(Display *, PEXLookupTable, unsigned __int64 *, PEXTableIndex **);
PEXStructurePath *PEXGetDescendants(Display *, PEXStructure, int, unsigned __int64, unsigned __int64 *);
int PEXGetElementInfo(Display *, PEXStructure, int, __int64, int, __int64, int, unsigned __int64 *, PEXElementInfo **);
int PEXGetEnumTypeInfo(Display *, Drawable, unsigned __int64, int *, unsigned __int64, unsigned __int64 **, PEXEnumTypeDesc **);
PEXExtensionInfo *PEXGetExtensionInfo(Display *);
int PEXGetImpDepConstants(Display *, Drawable, unsigned __int64, unsigned __int16 *, PEXImpDepConstant **);
int PEXGetNameSet(Display *, PEXNameSet, unsigned __int64 *, PEXName **);
char *PEXGetOCAddr(Display *, int);
PEXPDAttributes *PEXGetPickDevice(Display *, PEXWorkstation, int, unsigned __int64);
PEXPMAttributes *PEXGetPickMeasure(Display *, PEXPickMeasure, unsigned __int64);
PEXPCAttributes *PEXGetPipelineContext(Display *, PEXPipelineContext, unsigned __int64 *);
int PEXGetPredefinedEntries(Display *, Drawable, int, unsigned int, unsigned int, PEXPointer *);
int PEXGetProtocolFloatFormat(Display *);
PEXRendererAttributes *PEXGetRendererAttributes(Display *, PEXRenderer, unsigned __int64);
int PEXGetRendererDynamics(Display *, PEXRenderer, unsigned __int64 *, unsigned __int64 *, unsigned __int64 *);
PEXSCAttributes *PEXGetSearchContext(Display *, PEXSearchContext, unsigned __int64);
int PEXGetSizeOCs(int, int, PEXOCData *);
int PEXGetStructureInfo(Display *, PEXStructure, int, unsigned __int64, PEXStructureInfo *);
PEXStructure *PEXGetStructuresInNetwork(Display *, PEXStructure, int, unsigned __int64 *);
int PEXGetTableEntries(Display *, PEXLookupTable, unsigned int, unsigned int, int, int *, PEXPointer *);
PEXPointer PEXGetTableEntry(Display *, PEXLookupTable, unsigned int, int, int *, int *);
int PEXGetTableInfo(Display *, Drawable, int, PEXTableInfo *);
PEXWorkstationAttributes *PEXGetWorkstationAttributes(Display *, PEXWorkstation, unsigned __int64 *);
int PEXGetWorkstationDynamics(Display *, Drawable, PEXWorkstationDynamics *);
int PEXGetWorkstationPostings(Display *, PEXStructure, unsigned __int64 *, PEXWorkstation **);
int PEXGetWorkstationViewRep(Display *, PEXWorkstation, unsigned int, int *, PEXViewRep *, PEXViewRep *);
MACRO_PEXHAlignNormal PEXHAlignCenter;
MACRO_PEXHAlignNormal PEXHAlignLeft;
MACRO_PEXHAlignNormal PEXHAlignNormal;
MACRO_PEXHAlignNormal PEXHAlignRight;
MACRO_PEXHLHSROff PEXHLHSRHiddenLineOnly;
MACRO_PEXHLHSRIDDisable PEXHLHSRIDDisable;
MACRO_PEXHLHSRIDDisable PEXHLHSRIDEnable;
MACRO_PEXHLHSROff PEXHLHSROff;
MACRO_PEXHLHSROff PEXHLHSRPainters;
MACRO_PEXHLHSROff PEXHLHSRScanline;
MACRO_PEXHLHSROff PEXHLHSRZBuffer;
MACRO_PEXHLHSROff PEXHLHSRZBufferID;
MACRO_PEXElementPtr PEXHasRefs;
MACRO_PEXHigher PEXHigher;
MACRO_PEXIDDitheringSupported PEXIDBestColorApprox;
MACRO_PEXIDDitheringSupported PEXIDChromaticityBlueU;
MACRO_PEXIDDitheringSupported PEXIDChromaticityBlueV;
MACRO_PEXIDDitheringSupported PEXIDChromaticityGreenU;
MACRO_PEXIDDitheringSupported PEXIDChromaticityGreenV;
MACRO_PEXIDDitheringSupported PEXIDChromaticityRedU;
MACRO_PEXIDDitheringSupported PEXIDChromaticityRedV;
MACRO_PEXIDDitheringSupported PEXIDChromaticityWhiteU;
MACRO_PEXIDDitheringSupported PEXIDChromaticityWhiteV;
MACRO_PEXIDDitheringSupported PEXIDDitheringSupported;
MACRO_PEXIDDitheringSupported PEXIDDoubleBufferingSupported;
MACRO_PEXIDDitheringSupported PEXIDLuminanceBlue;
MACRO_PEXIDDitheringSupported PEXIDLuminanceGreen;
MACRO_PEXIDDitheringSupported PEXIDLuminanceRed;
MACRO_PEXIDDitheringSupported PEXIDLuminanceWhite;
MACRO_PEXIDDitheringSupported PEXIDMaxEdgeWidth;
MACRO_PEXIDDitheringSupported PEXIDMaxHitsEventSupported;
MACRO_PEXIDDitheringSupported PEXIDMaxLineWidth;
MACRO_PEXIDDitheringSupported PEXIDMaxMarkerSize;
MACRO_PEXIDDitheringSupported PEXIDMaxModelClipPlanes;
MACRO_PEXIDDitheringSupported PEXIDMaxNURBOrder;
MACRO_PEXIDDitheringSupported PEXIDMaxNameSetNames;
MACRO_PEXIDDitheringSupported PEXIDMaxNonAmbientLights;
MACRO_PEXIDDitheringSupported PEXIDMaxTrimCurveOrder;
MACRO_PEXIDDitheringSupported PEXIDMinEdgeWidth;
MACRO_PEXIDDitheringSupported PEXIDMinLineWidth;
MACRO_PEXIDDitheringSupported PEXIDMinMarkerSize;
MACRO_PEXIDDitheringSupported PEXIDNominalEdgeWidth;
MACRO_PEXIDDitheringSupported PEXIDNominalLineWidth;
MACRO_PEXIDDitheringSupported PEXIDNominalMarkerSize;
MACRO_PEXIDDitheringSupported PEXIDNumSupportedEdgeWidths;
MACRO_PEXIDDitheringSupported PEXIDNumSupportedLineWidths;
MACRO_PEXIDDitheringSupported PEXIDNumSupportedMarkerSizes;
MACRO_PEXIDDitheringSupported PEXIDTransparencySupported;
MACRO_PEXIEEE PEXIEEE_754_32;
MACRO_PEXIEEE PEXIEEE_754_64;
MACRO_PEXIMM PEXIMM;
MACRO_PEXIMM PEXIRG;
void PEXIdentityMatrix(PEXMatrix);
void PEXIdentityMatrix2D(PEXMatrix3x3);
MACRO_PEXIdle PEXIdle;
MACRO_PEXCompleteImplementation PEXImmediateMode;
MACRO_PEXBundled PEXIndividual;
int PEXInitialize(Display *, PEXExtensionInfo **, int, char *);
MACRO_PEXInteriorStyleHollow PEXInteriorStyleEmpty;
MACRO_PEXInteriorStyleHollow PEXInteriorStyleHatch;
MACRO_PEXInteriorStyleHollow PEXInteriorStyleHollow;
MACRO_PEXInteriorStyleHollow PEXInteriorStylePattern;
MACRO_PEXInteriorStyleHollow PEXInteriorStyleSolid;
int PEXInvertMatrix(PEXMatrix, PEXMatrix);
int PEXInvertMatrix2D(PEXMatrix3x3, PEXMatrix3x3);
MACRO_PEXLUTLineBundle PEXLUTColor;
MACRO_PEXLUTLineBundle PEXLUTColorApprox;
MACRO_PEXLUTLineBundle PEXLUTDepthCue;
MACRO_PEXLUTLineBundle PEXLUTEdgeBundle;
MACRO_PEXLUTLineBundle PEXLUTInteriorBundle;
MACRO_PEXLUTLineBundle PEXLUTLight;
MACRO_PEXLUTLineBundle PEXLUTLineBundle;
MACRO_PEXLUTLineBundle PEXLUTMarkerBundle;
MACRO_PEXLUTLineBundle PEXLUTPattern;
MACRO_PEXLUTLineBundle PEXLUTTextBundle;
MACRO_PEXLUTLineBundle PEXLUTTextFont;
MACRO_PEXLUTLineBundle PEXLUTView;
void PEXLabel(Display *, XID, PEXOCRequestType, __int64);
MACRO_PEXElementPtr PEXLengthStructure;
MACRO_PEXLightAmbient PEXLightAmbient;
MACRO_PEXLightAmbient PEXLightWCPoint;
MACRO_PEXLightAmbient PEXLightWCSpot;
MACRO_PEXLightAmbient PEXLightWCVector;
MACRO_PEXLineTypeSolid PEXLineTypeDashDot;
MACRO_PEXLineTypeSolid PEXLineTypeDashed;
MACRO_PEXLineTypeSolid PEXLineTypeDotted;
MACRO_PEXLineTypeSolid PEXLineTypeSolid;
char **PEXListFonts(Display *, char *, unsigned int, unsigned __int64 *);
char **PEXListFontsWithInfo(Display *, char *, unsigned int, unsigned __int64 *, PEXFontInfo **);
PEXFont PEXLoadFont(Display *, char *);
int PEXLookAtViewMatrix(PEXCoord *, PEXCoord *, PEXVector *, PEXMatrix);
MACRO_PEXHigher PEXLower;
int PEXMapDCToWC(Display *, PEXWorkstation, unsigned __int64, PEXDeviceCoord *, unsigned int *, unsigned __int64 *, PEXCoord **);
int PEXMapWCToDC(Display *, PEXWorkstation, unsigned __int64, PEXCoord *, unsigned int, unsigned __int64 *, PEXDeviceCoord **);
int PEXMapXCToNPC(int, PEXDeviceCoord2D *, unsigned int, double, PEXDeviceCoord *, PEXNPCSubVolume *, int, PEXViewEntry *, int *, int *, PEXCoord *);
int PEXMapXCToNPC2D(int, PEXDeviceCoord2D *, unsigned int, PEXDeviceCoord2D *, PEXNPCSubVolume *, int, PEXViewEntry *, int *, int *, PEXCoord2D *);
MACRO_PEXMarkerDot PEXMarkerAsterisk;
MACRO_PEXMarkerDot PEXMarkerCircle;
MACRO_PEXMarkerDot PEXMarkerCross;
MACRO_PEXMarkerDot PEXMarkerDot;
MACRO_PEXMarkerDot PEXMarkerX;
void PEXMarkers(Display *, XID, PEXOCRequestType, unsigned int, PEXCoord *);
void PEXMarkers2D(Display *, XID, PEXOCRequestType, unsigned int, PEXCoord2D *);
int PEXMatchRenderingTargets(Display *, Drawable, int, int, Visual *, unsigned __int64, unsigned __int64 *, PEXRenderingTarget **);
void PEXMatrixMult(PEXMatrix, PEXMatrix, PEXMatrix);
void PEXMatrixMult2D(PEXMatrix3x3, PEXMatrix3x3, PEXMatrix3x3);
MACRO_PEXMaxError PEXMaxError;
MACRO_PEXMaxEvent PEXMaxEvent;
MACRO_PEXMaxHitsReached PEXMaxHitsReached;
MACRO_PEXMoreHits PEXMayBeMoreHits;
MACRO_PEXModelClipReplace PEXModelClipIntersection;
MACRO_PEXModelClipReplace PEXModelClipReplace;
MACRO_PEXMoreHits PEXMoreHits;
int PEXNPCToXCTransform(PEXNPCSubVolume *, PEXDeviceCoord *, unsigned int, PEXMatrix);
int PEXNPCToXCTransform2D(PEXNPCSubVolume *, PEXDeviceCoord2D *, unsigned int, PEXMatrix3x3);
MACRO_PEXNSAdd PEXNSAdd;
MACRO_PEXNSAdd PEXNSRemove;
MACRO_PEXNSAdd PEXNSReplace;
void PEXNURBCurve(Display *, XID, PEXOCRequestType, int, int, float *, unsigned int, PEXArrayOfCoord, double, double);
void PEXNURBSurface(Display *, XID, PEXOCRequestType, int, int, int, float *, float *, unsigned int, unsigned int, PEXArrayOfCoord, unsigned int, PEXListOfTrimCurve *);
MACRO_PEXClip PEXNoClip;
MACRO_PEXNoEcho PEXNoEcho;
MACRO_PEXMoreHits PEXNoMoreHits;
MACRO_PEXNoPick PEXNoPick;
MACRO_PEXRational PEXNonRational;
MACRO_PEXUniformPlacement PEXNonUniformPlacement;
MACRO_PEXNone PEXNone;
void PEXNoop(Display *, XID, PEXOCRequestType);
int PEXNormalizeVectors(int, PEXVector *, PEXVector *);
int PEXNormalizeVectors2D(int, PEXVector2D *, PEXVector2D *);
MACRO_PEXDynamic PEXNotDynamic;
MACRO_PEXEmpty PEXNotEmpty;
MACRO_PEXNotFound PEXNotFound;
MACRO_PEXNotPending PEXNotPending;
MACRO_PEXElementPtr PEXNumElements;
MACRO_PEXOCAll PEXOCATextAlignment;
MACRO_PEXOCAll PEXOCATextHeight;
MACRO_PEXOCAll PEXOCATextPath;
MACRO_PEXOCAll PEXOCATextStyle;
MACRO_PEXOCAll PEXOCATextUpVector;
MACRO_PEXOCAll PEXOCAddToNameSet;
MACRO_PEXOCAll PEXOCAll;
MACRO_PEXOCAll PEXOCAnnotationText;
MACRO_PEXOCAll PEXOCAnnotationText2D;
MACRO_PEXOCAll PEXOCApplicationData;
MACRO_PEXOCAll PEXOCBFInteriorStyle;
MACRO_PEXOCAll PEXOCBFInteriorStyleIndex;
MACRO_PEXOCAll PEXOCBFReflectionAttributes;
MACRO_PEXOCAll PEXOCBFReflectionModel;
MACRO_PEXOCAll PEXOCBFSurfaceColor;
MACRO_PEXOCAll PEXOCBFSurfaceColorIndex;
MACRO_PEXOCAll PEXOCBFSurfaceInterpMethod;
MACRO_PEXOCAll PEXOCCellArray;
MACRO_PEXOCAll PEXOCCellArray2D;
MACRO_PEXOCAll PEXOCCharExpansion;
MACRO_PEXOCAll PEXOCCharHeight;
MACRO_PEXOCAll PEXOCCharSpacing;
MACRO_PEXOCAll PEXOCCharUpVector;
MACRO_PEXOCAll PEXOCColorApproxIndex;
MACRO_PEXOCAll PEXOCCurveApprox;
MACRO_PEXOCAll PEXOCDepthCueIndex;
MACRO_PEXOCAll PEXOCEdgeBundleIndex;
MACRO_PEXOCAll PEXOCExecuteStructure;
MACRO_PEXOCAll PEXOCExtendedCellArray;
MACRO_PEXOCAll PEXOCFacetCullingMode;
MACRO_PEXOCAll PEXOCFacetDistinguishFlag;
MACRO_PEXOCAll PEXOCFillArea;
MACRO_PEXOCAll PEXOCFillArea2D;
MACRO_PEXOCAll PEXOCFillAreaSet;
MACRO_PEXOCAll PEXOCFillAreaSet2D;
MACRO_PEXOCAll PEXOCFillAreaSetWithData;
MACRO_PEXOCAll PEXOCFillAreaWithData;
MACRO_PEXOCAll PEXOCGDP;
MACRO_PEXOCAll PEXOCGDP2D;
MACRO_PEXOCAll PEXOCGSE;
MACRO_PEXOCAll PEXOCGlobalTransform;
MACRO_PEXOCAll PEXOCGlobalTransform2D;
MACRO_PEXOCAll PEXOCHLHSRID;
MACRO_PEXOCAll PEXOCIndividualASF;
MACRO_PEXOCAll PEXOCInteriorBundleIndex;
MACRO_PEXOCAll PEXOCInteriorStyle;
MACRO_PEXOCAll PEXOCInteriorStyleIndex;
MACRO_PEXOCAll PEXOCLabel;
MACRO_PEXOCAll PEXOCLightSourceState;
MACRO_PEXOCAll PEXOCLineBundleIndex;
MACRO_PEXOCAll PEXOCLineColor;
MACRO_PEXOCAll PEXOCLineColorIndex;
MACRO_PEXOCAll PEXOCLineType;
MACRO_PEXOCAll PEXOCLineWidth;
MACRO_PEXOCAll PEXOCLocalTransform;
MACRO_PEXOCAll PEXOCLocalTransform2D;
MACRO_PEXOCAll PEXOCMarkerBundleIndex;
MACRO_PEXOCAll PEXOCMarkerColor;
MACRO_PEXOCAll PEXOCMarkerColorIndex;
MACRO_PEXOCAll PEXOCMarkerScale;
MACRO_PEXOCAll PEXOCMarkerType;
MACRO_PEXOCAll PEXOCMarkers;
MACRO_PEXOCAll PEXOCMarkers2D;
MACRO_PEXOCAll PEXOCModelClipFlag;
MACRO_PEXOCAll PEXOCModelClipVolume;
MACRO_PEXOCAll PEXOCModelClipVolume2D;
MACRO_PEXOCAll PEXOCNURBCurve;
MACRO_PEXOCAll PEXOCNURBSurface;
MACRO_PEXOCAll PEXOCNil;
MACRO_PEXOCAll PEXOCNoop;
MACRO_PEXOCAll PEXOCParaSurfCharacteristics;
MACRO_PEXOCAll PEXOCPatternAttributes;
MACRO_PEXOCAll PEXOCPatternAttributes2D;
MACRO_PEXOCAll PEXOCPatternSize;
MACRO_PEXOCAll PEXOCPickID;
MACRO_PEXOCAll PEXOCPolyline;
MACRO_PEXOCAll PEXOCPolyline2D;
MACRO_PEXOCAll PEXOCPolylineInterpMethod;
MACRO_PEXOCAll PEXOCPolylineSetWithData;
MACRO_PEXOCAll PEXOCQuadrilateralMesh;
MACRO_PEXOCAll PEXOCReflectionAttributes;
MACRO_PEXOCAll PEXOCReflectionModel;
MACRO_PEXOCAll PEXOCRemoveFromNameSet;
MACRO_PEXOCRender PEXOCRender;
MACRO_PEXOCRender PEXOCRenderSingle;
MACRO_PEXOCAll PEXOCRenderingColorModel;
MACRO_PEXOCAll PEXOCRestoreModelClipVolume;
MACRO_PEXOCAll PEXOCSetOfFillAreaSets;
MACRO_PEXOCRender PEXOCStore;
MACRO_PEXOCRender PEXOCStoreSingle;
MACRO_PEXOCAll PEXOCSurfaceApprox;
MACRO_PEXOCAll PEXOCSurfaceColor;
MACRO_PEXOCAll PEXOCSurfaceColorIndex;
MACRO_PEXOCAll PEXOCSurfaceEdgeColor;
MACRO_PEXOCAll PEXOCSurfaceEdgeColorIndex;
MACRO_PEXOCAll PEXOCSurfaceEdgeFlag;
MACRO_PEXOCAll PEXOCSurfaceEdgeType;
MACRO_PEXOCAll PEXOCSurfaceEdgeWidth;
MACRO_PEXOCAll PEXOCSurfaceInterpMethod;
MACRO_PEXOCAll PEXOCText;
MACRO_PEXOCAll PEXOCText2D;
MACRO_PEXOCAll PEXOCTextAlignment;
MACRO_PEXOCAll PEXOCTextBundleIndex;
MACRO_PEXOCAll PEXOCTextColor;
MACRO_PEXOCAll PEXOCTextColorIndex;
MACRO_PEXOCAll PEXOCTextFontIndex;
MACRO_PEXOCAll PEXOCTextPath;
MACRO_PEXOCAll PEXOCTextPrecision;
MACRO_PEXOCAll PEXOCTriangleStrip;
MACRO_PEXOCAll PEXOCViewIndex;
MACRO_PEXOff PEXOff;
MACRO_PEXOff PEXOn;
MACRO_PEXAll PEXOrphans;
int PEXOrthoProjMatrix(double, double, double, double, PEXMatrix);
MACRO_PEXPCMarkerType PEXPCASFValues;
MACRO_PEXPCMarkerType PEXPCATextAlignment;
MACRO_PEXPCMarkerType PEXPCATextHeight;
MACRO_PEXPCMarkerType PEXPCATextPath;
MACRO_PEXPCMarkerType PEXPCATextStyle;
MACRO_PEXPCMarkerType PEXPCATextUpVector;
MACRO_PEXPCMarkerType PEXPCBFInteriorStyle;
MACRO_PEXPCMarkerType PEXPCBFInteriorStyleIndex;
MACRO_PEXPCMarkerType PEXPCBFReflectionAttr;
MACRO_PEXPCMarkerType PEXPCBFReflectionModel;
MACRO_PEXPCMarkerType PEXPCBFSurfaceColor;
MACRO_PEXPCMarkerType PEXPCBFSurfaceInterp;
MACRO_PEXPCMarkerType PEXPCCharExpansion;
MACRO_PEXPCMarkerType PEXPCCharHeight;
MACRO_PEXPCMarkerType PEXPCCharSpacing;
MACRO_PEXPCMarkerType PEXPCCharUpVector;
MACRO_PEXPCMarkerType PEXPCColorApproxIndex;
MACRO_PEXPCMarkerType PEXPCCullingMode;
MACRO_PEXPCMarkerType PEXPCCurveApprox;
MACRO_PEXPCMarkerType PEXPCDepthCueIndex;
MACRO_PEXPCMarkerType PEXPCDistinguishFlag;
MACRO_PEXPCMarkerType PEXPCEdgeBundleIndex;
MACRO_PEXPCMarkerType PEXPCGlobalTransform;
MACRO_PEXPCMarkerType PEXPCHLHSRIdentifier;
MACRO_PEXPCMarkerType PEXPCInteriorBundleIndex;
MACRO_PEXPCMarkerType PEXPCInteriorStyle;
MACRO_PEXPCMarkerType PEXPCInteriorStyleIndex;
MACRO_PEXPCMarkerType PEXPCLightState;
MACRO_PEXPCMarkerType PEXPCLineBundleIndex;
MACRO_PEXPCMarkerType PEXPCLineColor;
MACRO_PEXPCMarkerType PEXPCLineType;
MACRO_PEXPCMarkerType PEXPCLineWidth;
MACRO_PEXPCMarkerType PEXPCLocalTransform;
MACRO_PEXPCMarkerType PEXPCMarkerBundleIndex;
MACRO_PEXPCMarkerType PEXPCMarkerColor;
MACRO_PEXPCMarkerType PEXPCMarkerScale;
MACRO_PEXPCMarkerType PEXPCMarkerType;
MACRO_PEXPCMaxShift PEXPCMaxShift;
MACRO_PEXPCMarkerType PEXPCModelClip;
MACRO_PEXPCMarkerType PEXPCModelClipVolume;
MACRO_PEXPCMarkerType PEXPCNameSet;
MACRO_PEXPCMarkerType PEXPCParaSurfCharacteristics;
MACRO_PEXPCMarkerType PEXPCPatternRefPoint;
MACRO_PEXPCMarkerType PEXPCPatternRefVec1;
MACRO_PEXPCMarkerType PEXPCPatternRefVec2;
MACRO_PEXPCMarkerType PEXPCPatternSize;
MACRO_PEXPCMarkerType PEXPCPickID;
MACRO_PEXPCMarkerType PEXPCPolylineInterp;
MACRO_PEXPCMarkerType PEXPCReflectionAttr;
MACRO_PEXPCMarkerType PEXPCReflectionModel;
MACRO_PEXPCMarkerType PEXPCRenderingColorModel;
MACRO_PEXPCMarkerType PEXPCSurfaceApprox;
MACRO_PEXPCMarkerType PEXPCSurfaceColor;
MACRO_PEXPCMarkerType PEXPCSurfaceEdgeColor;
MACRO_PEXPCMarkerType PEXPCSurfaceEdgeFlag;
MACRO_PEXPCMarkerType PEXPCSurfaceEdgeType;
MACRO_PEXPCMarkerType PEXPCSurfaceEdgeWidth;
MACRO_PEXPCMarkerType PEXPCSurfaceInterp;
MACRO_PEXPCMarkerType PEXPCTextAlignment;
MACRO_PEXPCMarkerType PEXPCTextBundleIndex;
MACRO_PEXPCMarkerType PEXPCTextColor;
MACRO_PEXPCMarkerType PEXPCTextFont;
MACRO_PEXPCMarkerType PEXPCTextPath;
MACRO_PEXPCMarkerType PEXPCTextPrecision;
MACRO_PEXPCMarkerType PEXPCViewIndex;
MACRO_PEXPDPickStatus PEXPDEchoSwitch;
MACRO_PEXPDPickStatus PEXPDEchoVolume;
MACRO_PEXPDMaxShift PEXPDMaxShift;
MACRO_PEXPDPickStatus PEXPDPickDataRec;
MACRO_PEXPDPickStatus PEXPDPickExcl;
MACRO_PEXPDPickStatus PEXPDPickIncl;
MACRO_PEXPDPickStatus PEXPDPickPath;
MACRO_PEXPDPickStatus PEXPDPickPathOrder;
MACRO_PEXPDPickStatus PEXPDPickStatus;
MACRO_PEXPDPickStatus PEXPDPromptEchoType;
MACRO_PEXPMMaxShift PEXPMMaxShift;
MACRO_PEXPMStatus PEXPMPath;
MACRO_PEXPMStatus PEXPMStatus;
MACRO_PEXPSCNone PEXPSCImpDep;
MACRO_PEXPSCNone PEXPSCIsoCurves;
MACRO_PEXPSCNone PEXPSCMCLevelCurves;
MACRO_PEXPSCNone PEXPSCNone;
MACRO_PEXPSCNone PEXPSCWCLevelCurves;
MACRO_PEXPWDisplayUpdate PEXPWBufferUpdate;
MACRO_PEXPWDisplayUpdate PEXPWColorApproxTable;
MACRO_PEXPWDisplayUpdate PEXPWColorTable;
MACRO_PEXPWDisplayUpdate PEXPWCurBufferMode;
MACRO_PEXPWDisplayUpdate PEXPWCurHLHSRMode;
MACRO_PEXPWDisplayUpdate PEXPWCurNPCSubVolume;
MACRO_PEXPWDisplayUpdate PEXPWCurViewport;
MACRO_PEXPWDViewRep PEXPWDBufferModify;
MACRO_PEXPWDViewRep PEXPWDColorApproxTable;
MACRO_PEXPWDViewRep PEXPWDColorTable;
MACRO_PEXPWDViewRep PEXPWDDeleteStructure;
MACRO_PEXPWDViewRep PEXPWDDepthCueTable;
MACRO_PEXPWDViewRep PEXPWDEdgeBundle;
MACRO_PEXPWDViewRep PEXPWDHLHSRMode;
MACRO_PEXPWDViewRep PEXPWDHighlightFilter;
MACRO_PEXPWDViewRep PEXPWDInteriorBundle;
MACRO_PEXPWDViewRep PEXPWDInvisibilityFilter;
MACRO_PEXPWDViewRep PEXPWDLightTable;
MACRO_PEXPWDViewRep PEXPWDLineBundle;
MACRO_PEXPWDViewRep PEXPWDMarkerBundle;
MACRO_PEXPWDViewRep PEXPWDPatternTable;
MACRO_PEXPWDViewRep PEXPWDPostStructure;
MACRO_PEXPWDViewRep PEXPWDReferenceModify;
MACRO_PEXPWDViewRep PEXPWDStructureModify;
MACRO_PEXPWDViewRep PEXPWDTextBundle;
MACRO_PEXPWDViewRep PEXPWDUnpostStructure;
MACRO_PEXPWDViewRep PEXPWDViewRep;
MACRO_PEXPWDViewRep PEXPWDWorkstationTransform;
MACRO_PEXPWDisplayUpdate PEXPWDefinedViews;
MACRO_PEXPWDisplayUpdate PEXPWDepthCueTable;
MACRO_PEXPWDisplayUpdate PEXPWDisplaySurface;
MACRO_PEXPWDisplayUpdate PEXPWDisplayUpdate;
MACRO_PEXPWDisplayUpdate PEXPWDrawable;
MACRO_PEXPWDisplayUpdate PEXPWEdgeBundle;
MACRO_PEXPWDisplayUpdate PEXPWHLHSRUpdate;
MACRO_PEXPWDisplayUpdate PEXPWHighlightExcl;
MACRO_PEXPWDisplayUpdate PEXPWHighlightIncl;
MACRO_PEXPWDisplayUpdate PEXPWInteriorBundle;
MACRO_PEXPWDisplayUpdate PEXPWInvisibilityExcl;
MACRO_PEXPWDisplayUpdate PEXPWInvisibilityIncl;
MACRO_PEXPWDisplayUpdate PEXPWLightTable;
MACRO_PEXPWDisplayUpdate PEXPWLineBundle;
MACRO_PEXPWDisplayUpdate PEXPWMarkerBundle;
MACRO_PEXPWMaxShift PEXPWMaxShift;
MACRO_PEXPWDisplayUpdate PEXPWNumPriorities;
MACRO_PEXPWDisplayUpdate PEXPWPatternTable;
MACRO_PEXPWDisplayUpdate PEXPWPostedStructures;
MACRO_PEXPWDisplayUpdate PEXPWReqBufferMode;
MACRO_PEXPWDisplayUpdate PEXPWReqHLHSRMode;
MACRO_PEXPWDisplayUpdate PEXPWReqNPCSubVolume;
MACRO_PEXPWDisplayUpdate PEXPWReqViewport;
MACRO_PEXPWDisplayUpdate PEXPWTextBundle;
MACRO_PEXPWDisplayUpdate PEXPWTextFontTable;
MACRO_PEXPWDisplayUpdate PEXPWViewUpdate;
MACRO_PEXPWDisplayUpdate PEXPWVisualState;
MACRO_PEXPWDisplayUpdate PEXPWWorkstationUpdate;
MACRO_PEXPathRight PEXPathDown;
MACRO_PEXPathRight PEXPathLeft;
MACRO_PEXPathRight PEXPathRight;
MACRO_PEXPathRight PEXPathUp;
MACRO_PEXNotPending PEXPending;
int PEXPerspProjMatrix(double, double, double, double, double, PEXMatrix);
MACRO_PEXNoPick PEXPick;
PEXPickPath *PEXPickAll(Display *, Drawable, PEXRenderer, int, int, int, PEXPickRecord *, int *, int *, unsigned __int64 *);
MACRO_PEXPickAllAll PEXPickAllAll;
MACRO_PEXPickAllAll PEXPickAllVisible;
MACRO_PEXPickLast PEXPickClosestZ;
MACRO_PEXPickDeviceDCHitBox PEXPickDeviceDCHitBox;
MACRO_PEXPickDeviceDCHitBox PEXPickDeviceNPCHitVolume;
MACRO_PEXPickLast PEXPickLast;
PEXPickPath *PEXPickOne(Display *, Drawable, PEXRenderer, PEXStructure, int, int, PEXPickRecord *, int *, int *);
MACRO_PEXPickLast PEXPickVisibleAny;
MACRO_PEXPickLast PEXPickVisibleClosest;
MACRO_PEXIdle PEXPicking;
MACRO_PEXAnyDrawable PEXPixmapDrawable;
int PEXPolarViewMatrix(PEXCoord *, double, double, double, double, PEXMatrix);
void PEXPolyline(Display *, XID, PEXOCRequestType, unsigned int, PEXCoord *);
void PEXPolyline2D(Display *, XID, PEXOCRequestType, unsigned int, PEXCoord2D *);
MACRO_PEXPolylineInterpNone PEXPolylineInterpColor;
MACRO_PEXPolylineInterpNone PEXPolylineInterpNone;
void PEXPolylineSetWithData(Display *, XID, PEXOCRequestType, unsigned int, int, unsigned int, PEXListOfVertex *);
MACRO_PEXPreConcatenate PEXPostConcatenate;
void PEXPostStructure(Display *, PEXWorkstation, PEXStructure, double);
MACRO_PEXPreConcatenate PEXPreConcatenate;
void PEXQuadrilateralMesh(Display *, XID, PEXOCRequestType, int, unsigned int, unsigned int, int, PEXArrayOfFacetData, unsigned int, unsigned int, PEXArrayOfVertex);
PEXTextExtent *PEXQueryEncodedTextExtents(Display *, XID, unsigned int, int, double, double, double, int, int, unsigned __int64, PEXListOfEncodedText *);
PEXFontInfo *PEXQueryFont(Display *, PEXFont);
PEXTextExtent *PEXQueryTextExtents(Display *, XID, unsigned int, int, double, double, double, int, int, unsigned __int64, PEXStringData *);
MACRO_PEXRAPipelineContext PEXRABackgroundColor;
MACRO_PEXRAPipelineContext PEXRAClearImage;
MACRO_PEXRAPipelineContext PEXRAClearZ;
MACRO_PEXRAPipelineContext PEXRAClipList;
MACRO_PEXRAPipelineContext PEXRAColorApproxTable;
MACRO_PEXRAPipelineContext PEXRAColorTable;
MACRO_PEXRAPipelineContext PEXRACurrentPath;
MACRO_PEXRAPipelineContext PEXRADepthCueTable;
MACRO_PEXRAPipelineContext PEXRAEchoMode;
MACRO_PEXRAPipelineContext PEXRAEdgeBundle;
MACRO_PEXRAPipelineContext PEXRAHLHSRMode;
MACRO_PEXRAPipelineContext PEXRAHighlightExcl;
MACRO_PEXRAPipelineContext PEXRAHighlightIncl;
MACRO_PEXRAPipelineContext PEXRAInteriorBundle;
MACRO_PEXRAPipelineContext PEXRAInvisibilityExcl;
MACRO_PEXRAPipelineContext PEXRAInvisibilityIncl;
MACRO_PEXRAPipelineContext PEXRALightTable;
MACRO_PEXRAPipelineContext PEXRALineBundle;
MACRO_PEXRAPipelineContext PEXRAMarkerBundle;
MACRO_PEXRAMaxShift PEXRAMaxShift;
MACRO_PEXRAPipelineContext PEXRANPCSubVolume;
MACRO_PEXRAPipelineContext PEXRAPatternTable;
MACRO_PEXRAPipelineContext PEXRAPickExcl;
MACRO_PEXRAPipelineContext PEXRAPickIncl;
MACRO_PEXRAPipelineContext PEXRAPickStartPath;
MACRO_PEXRAPipelineContext PEXRAPipelineContext;
MACRO_PEXRAPipelineContext PEXRARendererState;
MACRO_PEXRAPipelineContext PEXRATextBundle;
MACRO_PEXRAPipelineContext PEXRATextFontTable;
MACRO_PEXRAPipelineContext PEXRAViewTable;
MACRO_PEXRAPipelineContext PEXRAViewport;
MACRO_PEXRCGetExtensionInfo PEXRCAccumulateState;
MACRO_PEXRCGetExtensionInfo PEXRCBeginPickAll;
MACRO_PEXRCGetExtensionInfo PEXRCBeginPickOne;
MACRO_PEXRCGetExtensionInfo PEXRCBeginRendering;
MACRO_PEXRCGetExtensionInfo PEXRCBeginStructure;
MACRO_PEXRCGetExtensionInfo PEXRCChangeNameSet;
MACRO_PEXRCGetExtensionInfo PEXRCChangePickDevice;
MACRO_PEXRCGetExtensionInfo PEXRCChangePipelineContext;
MACRO_PEXRCGetExtensionInfo PEXRCChangeRenderer;
MACRO_PEXRCGetExtensionInfo PEXRCChangeSearchContext;
MACRO_PEXRCGetExtensionInfo PEXRCChangeStructureRefs;
MACRO_PEXRCGetExtensionInfo PEXRCCopyElements;
MACRO_PEXRCGetExtensionInfo PEXRCCopyLookupTable;
MACRO_PEXRCGetExtensionInfo PEXRCCopyNameSet;
MACRO_PEXRCGetExtensionInfo PEXRCCopyPipelineContext;
MACRO_PEXRCGetExtensionInfo PEXRCCopySearchContext;
MACRO_PEXRCGetExtensionInfo PEXRCCopyStructure;
MACRO_PEXRCGetExtensionInfo PEXRCCreateLookupTable;
MACRO_PEXRCGetExtensionInfo PEXRCCreateNameSet;
MACRO_PEXRCGetExtensionInfo PEXRCCreatePickMeasure;
MACRO_PEXRCGetExtensionInfo PEXRCCreatePipelineContext;
MACRO_PEXRCGetExtensionInfo PEXRCCreateRenderer;
MACRO_PEXRCGetExtensionInfo PEXRCCreateSearchContext;
MACRO_PEXRCGetExtensionInfo PEXRCCreateStructure;
MACRO_PEXRCGetExtensionInfo PEXRCCreateWorkstation;
MACRO_PEXRCGetExtensionInfo PEXRCDeleteBetweenLabels;
MACRO_PEXRCGetExtensionInfo PEXRCDeleteElements;
MACRO_PEXRCGetExtensionInfo PEXRCDeleteElementsToLabel;
MACRO_PEXRCGetExtensionInfo PEXRCDeleteTableEntries;
MACRO_PEXRCGetExtensionInfo PEXRCDestroyStructures;
MACRO_PEXRCGetExtensionInfo PEXRCElementSearch;
MACRO_PEXRCGetExtensionInfo PEXRCEndPickAll;
MACRO_PEXRCGetExtensionInfo PEXRCEndPickOne;
MACRO_PEXRCGetExtensionInfo PEXRCEndRendering;
MACRO_PEXRCGetExtensionInfo PEXRCEndStructure;
MACRO_PEXRCGetExtensionInfo PEXRCEscape;
MACRO_PEXRCGetExtensionInfo PEXRCEscapeWithReply;
MACRO_PEXRCGetExtensionInfo PEXRCExecuteDeferredActions;
MACRO_PEXRCGetExtensionInfo PEXRCFetchElements;
MACRO_PEXRCGetExtensionInfo PEXRCFreeLookupTable;
MACRO_PEXRCGetExtensionInfo PEXRCFreeNameSet;
MACRO_PEXRCGetExtensionInfo PEXRCFreePickMeasure;
MACRO_PEXRCGetExtensionInfo PEXRCFreePipelineContext;
MACRO_PEXRCGetExtensionInfo PEXRCFreeRenderer;
MACRO_PEXRCGetExtensionInfo PEXRCFreeSearchContext;
MACRO_PEXRCGetExtensionInfo PEXRCFreeWorkstation;
MACRO_PEXRCGetExtensionInfo PEXRCGetAncestors;
MACRO_PEXRCGetExtensionInfo PEXRCGetDefinedIndices;
MACRO_PEXRCGetExtensionInfo PEXRCGetDescendants;
MACRO_PEXRCGetExtensionInfo PEXRCGetElementInfo;
MACRO_PEXRCGetExtensionInfo PEXRCGetEnumTypeInfo;
MACRO_PEXRCGetExtensionInfo PEXRCGetExtensionInfo;
MACRO_PEXRCGetExtensionInfo PEXRCGetImpDepConstants;
MACRO_PEXRCGetExtensionInfo PEXRCGetNameSet;
MACRO_PEXRCGetExtensionInfo PEXRCGetPickDevice;
MACRO_PEXRCGetExtensionInfo PEXRCGetPickMeasure;
MACRO_PEXRCGetExtensionInfo PEXRCGetPipelineContext;
MACRO_PEXRCGetExtensionInfo PEXRCGetPredefinedEntries;
MACRO_PEXRCGetExtensionInfo PEXRCGetRendererAttributes;
MACRO_PEXRCGetExtensionInfo PEXRCGetRendererDynamics;
MACRO_PEXRCGetExtensionInfo PEXRCGetSearchContext;
MACRO_PEXRCGetExtensionInfo PEXRCGetStructureInfo;
MACRO_PEXRCGetExtensionInfo PEXRCGetStructuresInNetwork;
MACRO_PEXRCGetExtensionInfo PEXRCGetTableEntries;
MACRO_PEXRCGetExtensionInfo PEXRCGetTableEntry;
MACRO_PEXRCGetExtensionInfo PEXRCGetTableInfo;
MACRO_PEXRCGetExtensionInfo PEXRCGetWorkstationAttributes;
MACRO_PEXRCGetExtensionInfo PEXRCGetWorkstationDynamics;
MACRO_PEXRCGetExtensionInfo PEXRCGetWorkstationPostings;
MACRO_PEXRCGetExtensionInfo PEXRCGetWorkstationViewRep;
MACRO_PEXRCGetExtensionInfo PEXRCListFonts;
MACRO_PEXRCGetExtensionInfo PEXRCListFontsWithInfo;
MACRO_PEXRCGetExtensionInfo PEXRCLoadFont;
MACRO_PEXRCGetExtensionInfo PEXRCMapDCtoWC;
MACRO_PEXRCGetExtensionInfo PEXRCMapWCtoDC;
MACRO_PEXRCGetExtensionInfo PEXRCMatchRenderingTargets;
MACRO_PEXRCGetExtensionInfo PEXRCPickAll;
MACRO_PEXRCGetExtensionInfo PEXRCPickOne;
MACRO_PEXRCGetExtensionInfo PEXRCPostStructure;
MACRO_PEXRCGetExtensionInfo PEXRCQueryFont;
MACRO_PEXRCGetExtensionInfo PEXRCQueryTextExtents;
MACRO_PEXRCGetExtensionInfo PEXRCRedrawAllStructures;
MACRO_PEXRCGetExtensionInfo PEXRCRedrawClipRegion;
MACRO_PEXRCGetExtensionInfo PEXRCRenderElements;
MACRO_PEXRCGetExtensionInfo PEXRCRenderNetwork;
MACRO_PEXRCGetExtensionInfo PEXRCRenderOutputCommands;
MACRO_PEXRCGetExtensionInfo PEXRCSearchNetwork;
MACRO_PEXRCGetExtensionInfo PEXRCSetEditingMode;
MACRO_PEXRCGetExtensionInfo PEXRCSetElementPointer;
MACRO_PEXRCGetExtensionInfo PEXRCSetElementPointerAtLabel;
MACRO_PEXRCGetExtensionInfo PEXRCSetTableEntries;
MACRO_PEXRCGetExtensionInfo PEXRCSetWorkstationBufferMode;
MACRO_PEXRCGetExtensionInfo PEXRCSetWorkstationDisplayUpdateMode;
MACRO_PEXRCGetExtensionInfo PEXRCSetWorkstationHLHSRMode;
MACRO_PEXRCGetExtensionInfo PEXRCSetWorkstationViewPriority;
MACRO_PEXRCGetExtensionInfo PEXRCSetWorkstationViewRep;
MACRO_PEXRCGetExtensionInfo PEXRCSetWorkstationViewport;
MACRO_PEXRCGetExtensionInfo PEXRCSetWorkstationWindow;
MACRO_PEXRCGetExtensionInfo PEXRCStoreElements;
MACRO_PEXRCGetExtensionInfo PEXRCUnloadFont;
MACRO_PEXRCGetExtensionInfo PEXRCUnpostAllStructures;
MACRO_PEXRCGetExtensionInfo PEXRCUnpostStructure;
MACRO_PEXRCGetExtensionInfo PEXRCUpdatePickMeasure;
MACRO_PEXRCGetExtensionInfo PEXRCUpdateWorkstation;
MACRO_PEXRDAHLHSRMode PEXRDAClipList;
MACRO_PEXRDAHLHSRMode PEXRDAEchoMode;
MACRO_PEXRDAHLHSRMode PEXRDAHLHSRMode;
MACRO_PEXRDAHLHSRMode PEXRDANPCSubVolume;
MACRO_PEXRDAHLHSRMode PEXRDAViewport;
MACRO_PEXRDNHighlightNameSet PEXRDNHighlightNameSet;
MACRO_PEXRDNHighlightNameSet PEXRDNHighlightNameSetContents;
MACRO_PEXRDNHighlightNameSet PEXRDNInvisibilityNameSet;
MACRO_PEXRDNHighlightNameSet PEXRDNInvisibilityNameSetContents;
MACRO_PEXRDNHighlightNameSet PEXRDNPickNameSet;
MACRO_PEXRDNHighlightNameSet PEXRDNPickNameSetContents;
MACRO_PEXRDTMarkerBundle PEXRDTColorApproxContents;
MACRO_PEXRDTMarkerBundle PEXRDTColorApproxTable;
MACRO_PEXRDTMarkerBundle PEXRDTColorTable;
MACRO_PEXRDTMarkerBundle PEXRDTColorTableContents;
MACRO_PEXRDTMarkerBundle PEXRDTDepthCueTable;
MACRO_PEXRDTMarkerBundle PEXRDTDepthCueTableContents;
MACRO_PEXRDTMarkerBundle PEXRDTEdgeBundle;
MACRO_PEXRDTMarkerBundle PEXRDTEdgeBundleContents;
MACRO_PEXRDTMarkerBundle PEXRDTInteriorBundle;
MACRO_PEXRDTMarkerBundle PEXRDTInteriorBundleContents;
MACRO_PEXRDTMarkerBundle PEXRDTLightTable;
MACRO_PEXRDTMarkerBundle PEXRDTLightTableContents;
MACRO_PEXRDTMarkerBundle PEXRDTLineBundle;
MACRO_PEXRDTMarkerBundle PEXRDTLineBundleContents;
MACRO_PEXRDTMarkerBundle PEXRDTMarkerBundle;
MACRO_PEXRDTMarkerBundle PEXRDTMarkerBundleContents;
MACRO_PEXRDTMarkerBundle PEXRDTPatternTable;
MACRO_PEXRDTMarkerBundle PEXRDTPatternTableContents;
MACRO_PEXRDTMarkerBundle PEXRDTTextBundle;
MACRO_PEXRDTMarkerBundle PEXRDTTextBundleContents;
MACRO_PEXRDTMarkerBundle PEXRDTTextFontTable;
MACRO_PEXRDTMarkerBundle PEXRDTTextFontTableContents;
MACRO_PEXRDTMarkerBundle PEXRDTViewTable;
MACRO_PEXRDTMarkerBundle PEXRDTViewTableContents;
MACRO_PEXRational PEXRational;
MACRO_PEXSetValue PEXRealizedValue;
void PEXRedrawAllStructures(Display *, PEXWorkstation);
void PEXRedrawClipRegion(Display *, PEXWorkstation, unsigned __int64, PEXDeviceRect *);
MACRO_PEXReflectionNone PEXReflectionAmbient;
MACRO_PEXReflectionNone PEXReflectionDiffuse;
MACRO_PEXReflectionNone PEXReflectionNone;
MACRO_PEXReflectionNone PEXReflectionSpecular;
void PEXRemoveFromNameSet(Display *, XID, PEXOCRequestType, unsigned __int64, PEXName *);
void PEXRenderElements(Display *, PEXRenderer, PEXStructure, int, __int64, int, __int64);
void PEXRenderNetwork(Display *, Drawable, PEXRenderer, PEXStructure);
MACRO_PEXIdle PEXRendering;
MACRO_PEXRenderingColorModelImpDep PEXRenderingColorModelCIE;
MACRO_PEXRenderingColorModelImpDep PEXRenderingColorModelHLS;
MACRO_PEXRenderingColorModelImpDep PEXRenderingColorModelHSV;
MACRO_PEXRenderingColorModelImpDep PEXRenderingColorModelImpDep;
MACRO_PEXRenderingColorModelImpDep PEXRenderingColorModelRGB;
MACRO_PEXPreConcatenate PEXReplace;
void PEXRestoreModelClipVolume(Display *, XID, PEXOCRequestType);
int PEXRotate(int, double, PEXMatrix);
void PEXRotate2D(double, PEXMatrix3x3);
int PEXRotateGeneral(PEXCoord *, PEXCoord *, double, PEXMatrix);
MACRO_PEXSCPosition PEXSCCeiling;
MACRO_PEXSCPosition PEXSCDistance;
MACRO_PEXSCPosition PEXSCInvertedList;
MACRO_PEXSCMaxShift PEXSCMaxShift;
MACRO_PEXSCPosition PEXSCModelClipFlag;
MACRO_PEXSCPosition PEXSCNormalList;
MACRO_PEXSCPosition PEXSCPosition;
MACRO_PEXSCPosition PEXSCStartPath;
void PEXScale(PEXVector *, PEXMatrix);
void PEXScale2D(PEXVector2D *, PEXMatrix3x3);
int PEXSearchNetwork(Display *, PEXSearchContext, PEXStructurePath **);
void PEXSendOCs(Display *, XID, PEXOCRequestType, int, unsigned __int64, unsigned int, char *);
void PEXSetATextAlignment(Display *, XID, PEXOCRequestType, int, int);
void PEXSetATextHeight(Display *, XID, PEXOCRequestType, double);
void PEXSetATextPath(Display *, XID, PEXOCRequestType, int);
void PEXSetATextStyle(Display *, XID, PEXOCRequestType, int);
void PEXSetATextUpVector(Display *, XID, PEXOCRequestType, PEXVector2D *);
void PEXSetBFInteriorStyle(Display *, XID, PEXOCRequestType, int);
void PEXSetBFInteriorStyleIndex(Display *, XID, PEXOCRequestType, int);
void PEXSetBFReflectionAttributes(Display *, XID, PEXOCRequestType, PEXReflectionAttributes *);
void PEXSetBFReflectionModel(Display *, XID, PEXOCRequestType, int);
void PEXSetBFSurfaceColor(Display *, XID, PEXOCRequestType, int, PEXColor *);
void PEXSetBFSurfaceColorIndex(Display *, XID, PEXOCRequestType, unsigned int);
void PEXSetBFSurfaceInterpMethod(Display *, XID, PEXOCRequestType, int);
void PEXSetCharExpansion(Display *, XID, PEXOCRequestType, double);
void PEXSetCharHeight(Display *, XID, PEXOCRequestType, double);
void PEXSetCharSpacing(Display *, XID, PEXOCRequestType, double);
void PEXSetCharUpVector(Display *, XID, PEXOCRequestType, PEXVector2D *);
void PEXSetColorApproxIndex(Display *, XID, PEXOCRequestType, unsigned int);
void PEXSetCurveApprox(Display *, XID, PEXOCRequestType, int, double);
void PEXSetDepthCueIndex(Display *, XID, PEXOCRequestType, unsigned int);
void PEXSetEchoColor(Display *, PEXRenderer, int, PEXColor *);
void PEXSetEdgeBundleIndex(Display *, XID, PEXOCRequestType, unsigned int);
void PEXSetEditingMode(Display *, PEXStructure, int);
void PEXSetElementPtr(Display *, PEXStructure, int, __int64);
void PEXSetElementPtrAtLabel(Display *, PEXStructure, __int64, __int64);
void PEXSetFacetCullingMode(Display *, XID, PEXOCRequestType, int);
void PEXSetFacetDistinguishFlag(Display *, XID, PEXOCRequestType, int);
void PEXSetGlobalTransform(Display *, XID, PEXOCRequestType, PEXMatrix);
void PEXSetGlobalTransform2D(Display *, XID, PEXOCRequestType, PEXMatrix3x3);
void PEXSetHLHSRID(Display *, XID, PEXOCRequestType, unsigned __int64);
void PEXSetIndividualASF(Display *, XID, PEXOCRequestType, unsigned __int64, int);
void PEXSetInteriorBundleIndex(Display *, XID, PEXOCRequestType, unsigned int);
void PEXSetInteriorStyle(Display *, XID, PEXOCRequestType, int);
void PEXSetInteriorStyleIndex(Display *, XID, PEXOCRequestType, int);
void PEXSetLightSourceState(Display *, XID, PEXOCRequestType, unsigned int, PEXTableIndex *, unsigned int, PEXTableIndex *);
void PEXSetLineBundleIndex(Display *, XID, PEXOCRequestType, unsigned int);
void PEXSetLineColor(Display *, XID, PEXOCRequestType, int, PEXColor *);
void PEXSetLineColorIndex(Display *, XID, PEXOCRequestType, unsigned int);
void PEXSetLineType(Display *, XID, PEXOCRequestType, int);
void PEXSetLineWidth(Display *, XID, PEXOCRequestType, double);
void PEXSetLocalTransform(Display *, XID, PEXOCRequestType, int, PEXMatrix);
void PEXSetLocalTransform2D(Display *, XID, PEXOCRequestType, int, PEXMatrix3x3);
void PEXSetMarkerBundleIndex(Display *, XID, PEXOCRequestType, unsigned int);
void PEXSetMarkerColor(Display *, XID, PEXOCRequestType, int, PEXColor *);
void PEXSetMarkerColorIndex(Display *, XID, PEXOCRequestType, unsigned int);
void PEXSetMarkerScale(Display *, XID, PEXOCRequestType, double);
void PEXSetMarkerType(Display *, XID, PEXOCRequestType, int);
void PEXSetModelClipFlag(Display *, XID, PEXOCRequestType, int);
void PEXSetModelClipVolume(Display *, XID, PEXOCRequestType, int, unsigned int, PEXHalfSpace *);
void PEXSetModelClipVolume2D(Display *, XID, PEXOCRequestType, int, unsigned int, PEXHalfSpace2D *);
void PEXSetOfFillAreaSets(Display *, XID, PEXOCRequestType, int, unsigned int, unsigned int, unsigned int, int, int, int, unsigned int, PEXArrayOfFacetData, unsigned int, PEXArrayOfVertex, unsigned int, PEXSwitch *, PEXConnectivityData *);
void PEXSetParaSurfCharacteristics(Display *, XID, PEXOCRequestType, int, PEXPSCData *);
void PEXSetPatternAttributes(Display *, XID, PEXOCRequestType, PEXCoord *, PEXVector *, PEXVector *);
void PEXSetPatternAttributes2D(Display *, XID, PEXOCRequestType, PEXCoord2D *);
void PEXSetPatternSize(Display *, XID, PEXOCRequestType, double, double);
void PEXSetPickID(Display *, XID, PEXOCRequestType, unsigned __int64);
void PEXSetPolylineInterpMethod(Display *, XID, PEXOCRequestType, int);
void PEXSetReflectionAttributes(Display *, XID, PEXOCRequestType, PEXReflectionAttributes *);
void PEXSetReflectionModel(Display *, XID, PEXOCRequestType, int);
void PEXSetRenderingColorModel(Display *, XID, PEXOCRequestType, int);
void PEXSetSurfaceApprox(Display *, XID, PEXOCRequestType, int, double, double);
void PEXSetSurfaceColor(Display *, XID, PEXOCRequestType, int, PEXColor *);
void PEXSetSurfaceColorIndex(Display *, XID, PEXOCRequestType, unsigned int);
void PEXSetSurfaceEdgeColor(Display *, XID, PEXOCRequestType, int, PEXColor *);
void PEXSetSurfaceEdgeColorIndex(Display *, XID, PEXOCRequestType, unsigned int);
void PEXSetSurfaceEdgeFlag(Display *, XID, PEXOCRequestType, int);
void PEXSetSurfaceEdgeType(Display *, XID, PEXOCRequestType, int);
void PEXSetSurfaceEdgeWidth(Display *, XID, PEXOCRequestType, double);
void PEXSetSurfaceInterpMethod(Display *, XID, PEXOCRequestType, int);
void PEXSetTableEntries(Display *, PEXLookupTable, unsigned int, unsigned int, int, PEXPointer);
void PEXSetTextAlignment(Display *, XID, PEXOCRequestType, int, int);
void PEXSetTextBundleIndex(Display *, XID, PEXOCRequestType, unsigned int);
void PEXSetTextColor(Display *, XID, PEXOCRequestType, int, PEXColor *);
void PEXSetTextColorIndex(Display *, XID, PEXOCRequestType, unsigned int);
void PEXSetTextFontIndex(Display *, XID, PEXOCRequestType, unsigned int);
void PEXSetTextPath(Display *, XID, PEXOCRequestType, int);
void PEXSetTextPrecision(Display *, XID, PEXOCRequestType, int);
MACRO_PEXSetValue PEXSetValue;
void PEXSetViewIndex(Display *, XID, PEXOCRequestType, unsigned int);
void PEXSetWorkstationBufferMode(Display *, PEXWorkstation, int);
void PEXSetWorkstationDisplayUpdateMode(Display *, PEXWorkstation, int);
void PEXSetWorkstationHLHSRMode(Display *, PEXWorkstation, int);
void PEXSetWorkstationViewPriority(Display *, PEXWorkstation, unsigned int, unsigned int, int);
void PEXSetWorkstationViewRep(Display *, PEXWorkstation, unsigned int, PEXViewEntry *);
void PEXSetWorkstationViewport(Display *, PEXWorkstation, PEXViewport *);
void PEXSetWorkstationWindow(Display *, PEXWorkstation, PEXNPCSubVolume *);
MACRO_PEXShapeComplex PEXShapeComplex;
MACRO_PEXShapeComplex PEXShapeConvex;
MACRO_PEXShapeComplex PEXShapeNonConvex;
MACRO_PEXShapeComplex PEXShapeUnknown;
MACRO_PEXVisualizeEach PEXSimulateSome;
MACRO_PEXCorrect PEXSimulated;
MACRO_PEXSingleBuffered PEXSingleBuffered;
int PEXStartOCs(Display *, XID, PEXOCRequestType, int, int, int);
MACRO_PEXStringPrecision PEXStringPrecision;
MACRO_PEXStringPrecision PEXStrokePrecision;
MACRO_PEXStructureInsert PEXStructureInsert;
MACRO_PEXCompleteImplementation PEXStructureMode;
MACRO_PEXStructureInsert PEXStructureReplace;
MACRO_PEXSurfaceApproxWCPlanarDev PEXSurfaceApproxDCPlanarDev;
MACRO_PEXSurfaceApproxWCPlanarDev PEXSurfaceApproxNPCPlanarDev;
MACRO_PEXSurfaceApproxWCPlanarDev PEXSurfaceApproxWCPlanarDev;
MACRO_PEXSurfaceEdgeSolid PEXSurfaceEdgeDashDot;
MACRO_PEXSurfaceEdgeSolid PEXSurfaceEdgeDashed;
MACRO_PEXSurfaceEdgeSolid PEXSurfaceEdgeDotted;
MACRO_PEXSurfaceEdgeSolid PEXSurfaceEdgeSolid;
MACRO_PEXSurfaceInterpNone PEXSurfaceInterpColor;
MACRO_PEXSurfaceInterpNone PEXSurfaceInterpDotProduct;
MACRO_PEXSurfaceInterpNone PEXSurfaceInterpNone;
MACRO_PEXSurfaceInterpNone PEXSurfaceInterpNormal;
void PEXText(Display *, XID, PEXOCRequestType, PEXCoord *, PEXVector *, PEXVector *, int, char *);
void PEXText2D(Display *, XID, PEXOCRequestType, PEXCoord2D *, int, char *);
MACRO_PEXTopFirst PEXTopFirst;
MACRO_PEXTopPart PEXTopPart;
int PEXTransformPoints(PEXMatrix, int, PEXCoord *, PEXCoord *);
int PEXTransformPoints2D(PEXMatrix3x3, int, PEXCoord2D *, PEXCoord2D *);
void PEXTransformPoints2DH(PEXMatrix3x3, int, PEXCoord *, PEXCoord *);
void PEXTransformPoints4D(PEXMatrix, int, PEXCoord4D *, PEXCoord4D *);
void PEXTransformVectors(PEXMatrix, int, PEXVector *, PEXVector *);
void PEXTransformVectors2D(PEXMatrix3x3, int, PEXVector2D *, PEXVector2D *);
void PEXTranslate(PEXVector *, PEXMatrix);
void PEXTranslate2D(PEXVector2D *, PEXMatrix3x3);
void PEXTriangleStrip(Display *, XID, PEXOCRequestType, unsigned int, unsigned int, int, PEXArrayOfFacetData, unsigned int, PEXArrayOfVertex);
MACRO_PEXNoEcho PEXUnEcho;
MACRO_PEXUniformPlacement PEXUniformPlacement;
void PEXUnloadFont(Display *, PEXFont);
void PEXUnpostAllStructures(Display *, PEXWorkstation);
void PEXUnpostStructure(Display *, PEXWorkstation, PEXStructure);
void PEXUpdatePickMeasure(Display *, PEXPickMeasure, int, PEXPickRecord *);
void PEXUpdateWorkstation(Display *, PEXWorkstation);
MACRO_PEXVAlignNormal PEXVAlignBase;
MACRO_PEXVAlignNormal PEXVAlignBottom;
MACRO_PEXVAlignNormal PEXVAlignCap;
MACRO_PEXVAlignNormal PEXVAlignHalf;
MACRO_PEXVAlignNormal PEXVAlignNormal;
MACRO_PEXVAlignNormal PEXVAlignTop;
int PEXViewMappingMatrix(PEXCoord2D *, PEXNPCSubVolume *, int, PEXCoord *, double, double, double, PEXMatrix);
int PEXViewMappingMatrix2D(PEXCoord2D *, PEXCoord2D *, PEXMatrix3x3);
int PEXViewOrientationMatrix(PEXCoord *, PEXVector *, PEXVector *, PEXMatrix);
int PEXViewOrientationMatrix2D(PEXCoord2D *, PEXVector2D *, PEXMatrix3x3);
MACRO_PEXVisualizeEach PEXVisualizeEach;
MACRO_PEXVisualizeEach PEXVisualizeEasy;
MACRO_PEXVisualizeEach PEXVisualizeNone;
MACRO_PEXVisualizeEach PEXVisualizeWhenever;
MACRO_PEXAnyDrawable PEXWindowDrawable;
MACRO_PEXCompleteImplementation PEXWorkstationOnly;
MACRO_PEXXAxis PEXXAxis;
int PEXXCToNPCTransform(PEXNPCSubVolume *, PEXDeviceCoord *, unsigned int, PEXMatrix);
int PEXXCToNPCTransform2D(PEXNPCSubVolume *, PEXDeviceCoord2D *, unsigned int, PEXMatrix3x3);
MACRO_PEXXAxis PEXYAxis;
MACRO_PEXXAxis PEXZAxis;
MACRO_PEX PEX_PROTO_MAJOR;
MACRO_PEX_PROTO PEX_PROTO_MINOR;
MACRO_PE PE_BLOCKED;
MACRO_PE PE_PGRP;
MACRO_PE PE_SESS;
MACRO_PE PE_UNBLOCK;
MACRO_PF5_MUX2_C_READ PF5_C0_INT_EVERY_256;
MACRO_PF5_C0 PF5_C0_INT_EVERY_65536;
MACRO_PF5_C0 PF5_C1_INT_EVERY_256;
MACRO_PF5_C1 PF5_C1_INT_EVERY_65536;
MACRO_PF5_C2 PF5_C2_INT_EVERY_16384;
MACRO_PF5_C1 PF5_C2_INT_EVERY_256;
MACRO_PF5_CTXT_ALL PF5_CTXT_ALL_MODES;
MACRO_PF5_CTXT PF5_CTXT_ALL_PROC;
MACRO_PF5_CTXT_ALL PF5_CTXT_EXEC_AND_SUPER;
MACRO_PF5_CTXT_USER_AND PF5_CTXT_KERNEL;
MACRO_PF5_CTXT_NO PF5_CTXT_NO_KERNEL;
MACRO_PF5_CTXT_NO PF5_CTXT_NO_PAL;
MACRO_PF5_CTXT PF5_CTXT_NO_USER;
MACRO_PF5_CTXT_USER PF5_CTXT_PAL;
MACRO_PF5_CTXT_USER_AND_KERNEL PF5_CTXT_PAL_AND_KERNEL;
MACRO_PF5 PF5_CTXT_PME_THIS;
MACRO_PF5 PF5_CTXT_SEL_PROC;
MACRO_PF5_CTXT PF5_CTXT_THIS_PROC;
MACRO_PF5_CTXT_USER PF5_CTXT_USER;
MACRO_PF5_CTXT_USER_AND_KERNEL PF5_CTXT_USER_AND_KERNEL;
MACRO_PF5_CTXT_USER_AND PF5_CTXT_USER_AND_PAL;
MACRO_PF5_MUX0 PF5_MUX0_CYCLES;
MACRO_PF5_MUX0 PF5_MUX0_ISSUES;
MACRO_PF5_MUX1_C_BCACHE_CLN PF5_MUX1_C_BCACHE_CLN_WRT_HIT;
MACRO_PF5_MUX1_C_BCACHE_DREAD_FILL PF5_MUX1_C_BCACHE_DREAD_FILL;
MACRO_PF5_MUX1_C_BCACHE_DREAD PF5_MUX1_C_BCACHE_DREAD_HIT;
MACRO_PF5_MUX1_C_BCACHE_READ PF5_MUX1_C_BCACHE_READ;
MACRO_PF5_MUX1_C_BCACHE PF5_MUX1_C_BCACHE_REF;
MACRO_PF5_MUX1 PF5_MUX1_C_BCACHE_VICTIM;
MACRO_PF5_MUX1_C_BCACHE_WRITE PF5_MUX1_C_BCACHE_WRITE;
MACRO_PF5_MUX1 PF5_MUX1_C_DCACHE_ACCESS;
MACRO_PF5_MUX1 PF5_MUX1_C_FP_INSTRUCTIONS;
MACRO_PF5_MUX1 PF5_MUX1_C_ICACHE_ACCESS;
MACRO_PF5_MUX1 PF5_MUX1_C_LOAD_INSTRUCTIONS;
MACRO_PF5_MUX1_C_READ PF5_MUX1_C_READ_MISS_2;
MACRO_PF5_MUX1_C PF5_MUX1_C_SCACHE_ACCESS;
MACRO_PF5_MUX1_C_SCACHE PF5_MUX1_C_SCACHE_READ;
MACRO_PF5_MUX1_C_SCACHE_VICTIM PF5_MUX1_C_SCACHE_VICTIM;
MACRO_PF5_MUX1_C_SCACHE_WRITE PF5_MUX1_C_SCACHE_WRITE;
MACRO_PF5_MUX1 PF5_MUX1_C_STORE_INSTRUCTIONS;
MACRO_PF5_MUX1_C_SYS PF5_MUX1_C_SYS_REQ;
MACRO_PF5_MUX1 PF5_MUX1_DUAL_ISSUE_CYCLES;
MACRO_PF5_MUX1 PF5_MUX1_FLOW_CHANGE;
MACRO_PF5_MUX1 PF5_MUX1_INTEGER_OPERATE;
MACRO_PF5_MUX1 PF5_MUX1_NON_ISSUE_CYCLES;
MACRO_PF5_MUX1 PF5_MUX1_PIPELINE_DRY;
MACRO_PF5_MUX1 PF5_MUX1_QUAD_ISSUE_CYCLES;
MACRO_PF5_MUX1 PF5_MUX1_REPLAY_TRAP;
MACRO_PF5_MUX1 PF5_MUX1_SINGLE_ISSUE_CYCLES;
MACRO_PF5_MUX1 PF5_MUX1_SPLIT_ISSUE_CYCLES;
MACRO_PF5_MUX1 PF5_MUX1_TRIPLE_ISSUE_CYCLES;
MACRO_PF5_MUX2_C_BCACHE_DREAD PF5_MUX2_C_BCACHE_DREAD;
MACRO_PF5_MUX2_C_BCACHE PF5_MUX2_C_BCACHE_MISS;
MACRO_PF5_MUX2_C_BCACHE_READ_FILL PF5_MUX2_C_BCACHE_READ_FILL;
MACRO_PF5_MUX2_C_BCACHE_READ PF5_MUX2_C_BCACHE_READ_HIT;
MACRO_PF5_MUX2_C_BCACHE_WRITE_FILL PF5_MUX2_C_BCACHE_WRITE_FILL;
MACRO_PF5_MUX2_C_BCACHE_WRITE PF5_MUX2_C_BCACHE_WRITE_HIT;
MACRO_PF5_MUX2 PF5_MUX2_C_BRANCH_MISPREDICTS;
MACRO_PF5_MUX2 PF5_MUX2_C_CYCLES;
MACRO_PF5_MUX2 PF5_MUX2_C_DCACHE_MISSES;
MACRO_PF5_MUX2 PF5_MUX2_C_DTB_MISS;
MACRO_PF5_MUX2 PF5_MUX2_C_EXTERNAL;
MACRO_PF5_MUX2 PF5_MUX2_C_ICACHE_MISSES;
MACRO_PF5_MUX2 PF5_MUX2_C_ITB_MISS;
MACRO_PF5_MUX2 PF5_MUX2_C_LDU_REPLAYS;
MACRO_PF5_MUX2 PF5_MUX2_C_LOADS_MERGED;
MACRO_PF5_MUX2 PF5_MUX2_C_LOAD_LOCKED;
MACRO_PF5_MUX1_C_READ PF5_MUX2_C_LONG_STALLS;
MACRO_PF5_MUX2 PF5_MUX2_C_MEM_BARRIER;
MACRO_PF5_MUX2 PF5_MUX2_C_PC_MISPR;
MACRO_PF5_MUX2_C_READ PF5_MUX2_C_READ_MISS_3;
MACRO_PF5_MUX2 PF5_MUX2_C_SCACHE_MISS;
MACRO_PF5_MUX2_C PF5_MUX2_C_SCACHE_READ_MISS;
MACRO_PF5_MUX2_C_SCACHE_SH PF5_MUX2_C_SCACHE_SH_WRITE;
MACRO_PF5_MUX2_C_SCACHE_WRITE PF5_MUX2_C_SCACHE_WRITE;
MACRO_PF5_MUX2_C_SCACHE PF5_MUX2_C_SCACHE_WRITE_MISS;
MACRO_PF5_MUX2_C_SYS PF5_MUX2_C_SYS_INV;
MACRO_PF5_MUX2_C_SYS_READ_FLUSH PF5_MUX2_C_SYS_READ_FLUSH_HIT;
MACRO_PF5_MUX2_C_SYS_READ_FLUSH_MISS PF5_MUX2_C_SYS_READ_FLUSH_MISS;
MACRO_PF5_MUX2_C_SYS_READ PF5_MUX2_C_SYS_READ_REQ;
MACRO_PF5_MUX2 PF5_MUX2_C_WB_MAF_FULL_REPLAYS;
MACRO_PF5_C2 PF5_SEL_COUNTER_0;
MACRO_PF5_SEL PF5_SEL_COUNTER_1;
MACRO_PF5_SEL PF5_SEL_COUNTER_2;
MACRO_PF67 PF67_CYCLES_AND_REPLAY_TRAPS;
MACRO_PF67 PF67_CYCLES_AND_UNDEFINED;
MACRO_PF67 PF67_RET_INST_AND_BCACHE_MISS;
MACRO_PF67 PF67_RET_INST_AND_CYCLES;
MACRO_PF6_C0 PF6_C0_INT_EVERY_1048576;
MACRO_PF6_C0 PF6_C1_INT_EVERY_1048576;
MACRO_PF6 PF6_MUX0_CYCLES;
MACRO_PF6 PF6_MUX0_RET_INSTRUCTIONS;
MACRO_PF6_MUX1 PF6_MUX1_CYCLES;
MACRO_PF6_MUX1 PF6_MUX1_REPLAY_TRAP;
MACRO_PF6_MUX1 PF6_MUX1_RET_BRANCH_MISPREDICTS;
MACRO_PF6_MUX1 PF6_MUX1_RET_COND_BRANCHES;
MACRO_PF6_MUX1 PF6_MUX1_RET_DTB_DOUBLE_MISSES;
MACRO_PF6_MUX1 PF6_MUX1_RET_DTB_SINGLE_MISSES;
MACRO_PF6_MUX1 PF6_MUX1_RET_ITB_MISSES;
MACRO_PF6_MUX1 PF6_MUX1_RET_UNALIGNED_TRAPS;
MACRO_PF6_SEL PF6_SEL_COUNTER_0;
MACRO_PF6_SEL PF6_SEL_COUNTER_1;
MACRO_PFM PFM_COUNTERS;
MACRO_PFM PFM_IPL;
MACRO_PFM PFM_PROFILING;
MACRO_PF_OSI PF_AAL;
MACRO_PF_OSI PF_APPLETALK;
MACRO_PF2 PF_ATT;
MACRO_PF2 PF_Apollo;
MACRO_PF_ISSUES PF_BRANCHI;
MACRO_PF_DCACHE PF_BRANCHMISS;
MACRO_PF_C0 PF_C0_INT_EVERY_4096;
MACRO_PF_C0 PF_C0_INT_EVERY_65536;
MACRO_PF_C1 PF_C1_INT_EVERY_256;
MACRO_PF_C1 PF_C1_INT_EVERY_4096;
MACRO_PF_OSI PF_CCITT;
MACRO_PF_UNSPEC PF_CHAOS;
MACRO_PF_OSI PF_CTF;
MACRO_PF_ISSUES PF_CYCLES;
MACRO_PF2 PF_Cray1;
MACRO_PF2 PF_Cray2;
MACRO_PF_OSI PF_DATAKIT;
MACRO_PF_DCACHE PF_DCACHE;
MACRO_PF2 PF_DECELN;
MACRO_PF2 PF_DECOSF1;
MACRO_PF2 PF_DECUltrix;
MACRO_PF2 PF_DECVMS;
MACRO_PF2 PF_DECVT1000;
MACRO_PF2 PF_DECXTerm;
MACRO_PF_OSI PF_DECnet;
MACRO_PF_OSI PF_DLI;
MACRO_PF_DCACHE PF_DUAL;
MACRO_PF_OSI PF_ECMA;
MACRO_OUTPUT PF_ETHER_NOLLCSNAP;
MACRO_OUTPUT PF_ETHER_STRIPLLCSNAP;
MACRO_PF_ISSUES PF_EXTPIN0;
MACRO_PF_DCACHE PF_EXTPIN1;
MACRO_PF_DCACHE PF_FPINST;
MACRO_PF2 PF_HP9000s300;
MACRO_PF2 PF_HP9000s800;
MACRO_PF_OSI PF_HYLINK;
MACRO_PF2 PF_IBMAT;
MACRO_PF2 PF_IBMPS2;
MACRO_PF2 PF_IBMRS;
MACRO_PF2 PF_IBMRT;
MACRO_PF_DCACHE PF_ICACHE;
MACRO_PF_UNSPEC PF_IMPLINK;
MACRO_PF_UNSPEC PF_INET;
MACRO_PF_OSI PF_INET6;
MACRO_PF_DCACHE PF_INTOPS;
MACRO_PF_UNSPEC PF_ISO;
MACRO_PF_ISSUES PF_ISSUES;
MACRO_PF_OSI PF_KEY;
MACRO_PF_OSI PF_LAST;
MACRO_PF_OSI PF_LAT;
MACRO_PF_OSI PF_LINK;
MACRO_PF_ISSUES PF_LOADI;
MACRO_PF PF_MASKPROC;
MACRO_PF_OSI PF_MAX;
MACRO_PF2 PF_MacII;
MACRO_PF_OSI PF_NETMAN;
MACRO_OUTPUT PF_NOCOPY;
MACRO_PF_ISSUES PF_NONISSUES;
MACRO_PF_UNSPEC PF_NS;
MACRO_PF_OSI PF_OSI;
MACRO_PF2 PF_Other;
MACRO_PF_ISSUES PF_PALMODE;
MACRO_PF_ISSUES PF_PIPEDRY;
MACRO_PF_ISSUES PF_PIPEFROZEN;
MACRO_PF_UNSPEC PF_PUP;
MACRO_PF2 PF_Pegasus;
MACRO_PF PF_R;
MACRO_PF_OSI PF_ROUTE;
MACRO_PF2 PF_SGI;
MACRO_PF_OSI PF_SNA;
MACRO_PF_DCACHE PF_STOREI;
MACRO_PF2 PF_Sony;
MACRO_PF2 PF_Sun3;
MACRO_PF2 PF_Sun386i;
MACRO_PF2 PF_SunSparc;
MACRO_PF_UNSPEC PF_UNIX;
MACRO_PF_UNSPEC PF_UNSPEC;
MACRO_PF_OSI PF_USER;
MACRO_PF PF_W;
MACRO_PF_OSI PF_WAN;
MACRO_PF PF_X;
MACRO_PF_OSI PF_X25;
MACRO_PF_OSI PF_XTP;
MACRO_F1 PGDWN;
MACRO_F1 PGDWN_NPAD;
MACRO_PGOFSET PGOFSET;
MACRO_OFF PGRP;
MACRO_PGRPHSZ PGRPHSZ;
MACRO_KERNEL PGSHIFT;
MACRO_F1 PGUP;
MACRO_F1 PGUP_NPAD;
MACRO_P4 PHILLIPS;
MACRO_BLK_FORMAT PHY_FORMAT;
MACRO_OFF PIDS;
MACRO_CLOCKS PID_MAX;
MACRO_PSWP PINOD;
MACRO_PIOCSIM PIOCCCMSG;
MACRO_PIOCCFAULT PIOCCFAULT;
MACRO_PIOCDUMPCORE PIOCDUMPCORE;
MACRO_PIOCSIM PIOCNOCCMSG;
MACRO_PIOCSIM PIOCNOSIM;
MACRO_PIOCRFORK PIOCRFORK;
MACRO_PIOCRFORK PIOCRRLC;
MACRO_PIOCRTINH PIOCRTINH;
MACRO_PTYLBITS PIOCSEOF;
MACRO_PIOCRFORK PIOCSFORK;
MACRO_PIOCSIM PIOCSIM;
MACRO_PIOCRFORK PIOCSRLC;
MACRO_PIOCRTINH PIOCSTINH;
MACRO_PTYLBITS PIOCXIOC;
MACRO_TZNAME PIPE_BUF;
MACRO_PIPSIZ PIPSIZ;
MACRO_COLOR_MAP PIXEL_BLINK_MASK;
MACRO_COLOR_MAP PIXEL_READ_MASK;
MACRO_PIXIE PIXIE_TOOLVER;
MACRO_PI_EMPTY PI_ACTIVE;
MACRO_UMODE PI_COMLEN;
MACRO_PI_EMPTY PI_EMPTY;
MACRO_PI_EMPTY PI_EXITING;
MACRO_PI_FPUTYPE PI_FPUTYPE;
MACRO_PI PI_NO_PARTITION;
MACRO_PI PI_STRATEGY_CHAR;
MACRO_P_STATUS PI_TYPELEN;
MACRO_PI_VERSION PI_VERSION_0;
MACRO_PI_EMPTY PI_ZOMBIE;
MACRO_TBUNUSED PLANMS_DISC2;
MACRO_TBUNUSED PLANMS_DISC3;
MACRO_TEGC PLATFORM_IO_BIT;
MACRO_PLE_FLAG PLE_FLAG_ALL;
MACRO_PLE_FLAG PLE_FLAG_MASK;
MACRO_PLE PLE_PROPAGATE_ON_COPY;
MACRO_PSWP PLOCK;
MACRO_DOMAIN PLOSS;
MACRO_PLOT PLOT;
MACRO_PMAPPORT PMAPPORT;
MACRO_PMAPPROC PMAPPROC_CALLIT;
MACRO_PMAPPROC PMAPPROC_DUMP;
MACRO_PMAPPROC PMAPPROC_GETPORT;
MACRO_PMAPPROC PMAPPROC_NULL;
MACRO_PMAPPROC PMAPPROC_SET;
MACRO_PMAPPROC PMAPPROC_UNSET;
MACRO_PMAPPORT PMAPPROG;
MACRO_PMAPVERS PMAPVERS;
MACRO_PMAPVERS_PROTO PMAPVERS_ORIG;
MACRO_PMAPVERS_PROTO PMAPVERS_PROTO;
MACRO_PSWP PMASK;
MACRO_PMCTRS PMCTRS_ALL_CPUS;
MACRO_CONSOLE PMC_DTYPE;
MACRO_CONSOLE PMM_DTYPE;
MACRO_PMSG PMSG;
MACRO_PM PM_Error;
MACRO_PM_Unable PM_Failure;
MACRO_PM_GetProxyAddr PM_GetProxyAddr;
MACRO_PM_GetProxyAddr PM_GetProxyAddrReply;
MACRO_PM PM_MAJOR_VERSION;
MACRO_PM PM_MINOR_VERSION;
MACRO_D PM_STR;
MACRO_PM_GetProxyAddr PM_StartProxy;
MACRO_PM_Unable PM_Success;
MACRO_PM_Unable PM_Unable;
MACRO_USPosition PMaxSize;
MACRO_USPosition PMinSize;
MACRO_PNPD PNPD_PROG;
MACRO_PNPD PNPD_VERS;
MACRO_PNP_ACQUIRE PNP_ACQUIRE;
MACRO_PNP_MISSEDPOLLS PNP_MISSEDPOLLS;
MACRO_PNP_ACQUIRE PNP_POLL;
MACRO_PNP PNP_POLLTIME;
MACRO_PNP_ACQUIRE PNP_SETUP;
MACRO_PNPD PNP_WHOAMI;
MACRO_PN PN_PEEK;
MACRO_PN PN_STRIP;
MACRO_POINTER POINTER_TOKEN;
MACRO_POINTER_TO POINTER_TO_MEMBER_TOKEN;
MACRO_POLICY POLICY_FIFO;
MACRO_POLICY POLICY_FIXEDPRI;
MACRO_POLICY_LAST POLICY_LAST;
MACRO_POLICY POLICY_RR;
MACRO_POLICY_LAST POLICY_SVID_RT;
MACRO_POLICY POLICY_TIMESHARE;
MACRO_POLLNORM POLLERR;
MACRO_POLLNORM POLLHUP;
MACRO_POLLIN POLLIN;
MACRO_POLLNORM POLLMSG;
MACRO_POLLNORM POLLNORM;
MACRO_POLLNORM POLLNVAL;
MACRO_POLLNORM POLLOUT;
MACRO_POLLIN POLLPRI;
MACRO_POLLNORM POLLRDBAND;
MACRO_POLLNORM POLLRDNORM;
MACRO_POLLNORM POLLWRBAND;
MACRO_POLLNORM POLLWRNORM;
MACRO_POLL POLL_ERR;
MACRO_POLL POLL_HUP;
MACRO_POLL POLL_IN;
MACRO_POLL POLL_MSG;
MACRO_POLL POLL_OUT;
MACRO_POLL POLL_PRI;
idop POP_AND;
idop POP_DIFF;
idop POP_OR;
idop POP_XOR;
port_set_name_t PORT_ENABLED;
MACRO_PORT_NULL PORT_NULL;
MACRO_PORT PORT_TYPE_LAST;
MACRO_PORT PORT_TYPE_NONE;
MACRO_PORT PORT_TYPE_OWN;
MACRO_PORT PORT_TYPE_RECEIVE;
MACRO_PORT PORT_TYPE_RECEIVE_OWN;
MACRO_PORT PORT_TYPE_SEND;
MACRO_PORT PORT_TYPE_SET;
MACRO_PO PO_VERSION_0;
MACRO_PSWP PPIPE;
MACRO_PPODE PPODE_DISCONTIG_SCOPE;
MACRO_PPODE PPODE_END;
MACRO_PPODE PPODE_EXT_SRC;
MACRO_PPODE PPODE_INLINED_CALL;
MACRO_PPODE PPODE_PROFILE_INFO;
MACRO_PPODE PPODE_SEM_EVENT;
MACRO_PPODE PPODE_SPLIT;
MACRO_PPODE PPODE_STAMP;
MACRO_PPOD PPOD_VERSION;
MACRO_RCV_B7 PPPCTL_IERROR;
MACRO_RCV_B7 PPPCTL_MRU;
MACRO_RCV_B7 PPPCTL_MTU;
MACRO_RCV_B7 PPPCTL_OERROR;
MACRO_RCV_B7 PPPCTL_UNIT;
MACRO_PPPDBG_IF PPPDBG_AHDLC;
MACRO_PPPDBG_IF PPPDBG_COMP;
MACRO_PPPDBG PPPDBG_DRIVER;
MACRO_RCV_B7 PPPDBG_DUMP;
MACRO_PPPDBG_IF PPPDBG_IF;
MACRO_PPPDBG PPPDBG_LOG;
MACRO_PPPIOCXFERUNIT PPPIOCXFERUNIT;
MACRO_PPPIO PPPIO_ACTIVEFILT;
MACRO_PPPIO PPPIO_ATTACH;
MACRO_PPPIO PPPIO_BIND;
MACRO_PPPIO PPPIO_CFLAGS;
MACRO_PPPIO PPPIO_DEBUG;
MACRO_PPPIO PPPIO_GCLEAN;
MACRO_PPPIO PPPIO_GETCSTAT;
MACRO_PPPIO PPPIO_GETSTAT;
MACRO_PPPIO PPPIO_GIDLE;
MACRO_PPPIO PPPIO_LASTMOD;
MACRO_PPPIO PPPIO_MRU;
MACRO_PPPIO PPPIO_MTU;
MACRO_PPPIO PPPIO_NEWPPA;
MACRO_PPPIO PPPIO_NPMODE;
MACRO_PPPIO PPPIO_PASSFILT;
MACRO_PPPIO PPPIO_RACCM;
MACRO_PPPIO PPPIO_RCOMP;
MACRO_PPPIO PPPIO_VJINIT;
MACRO_PPPIO PPPIO_XACCM;
MACRO_PPPIO PPPIO_XCOMP;
MACRO_PPP_ALLSTATIONS PPP_ALLSTATIONS;
MACRO_PPP_IP PPP_AT;
MACRO_PPP_IP PPP_ATCP;
MACRO_PPP_IP PPP_AT_BUF;
MACRO_PPP_IP PPP_AT_EDDP;
MACRO_PPP_CBCP PPP_CBCP;
MACRO_PPP_IP PPP_CCP;
MACRO_PPP_IP PPP_CHAP;
MACRO_PPP_IP PPP_COMP;
MACRO_PPP_ESCAPE PPP_ESCAPE;
MACRO_PPP PPP_FCSLEN;
MACRO_PPP_UI PPP_FLAG;
MACRO_PPP_GOODFCS PPP_GOODFCS;
MACRO_PPP PPP_HDRLEN;
MACRO_PPP_CBCP PPP_INITFCS;
MACRO_PPP_IP PPP_IP;
MACRO_PPP_IP PPP_IPCP;
MACRO_PPP_IP PPP_IPX;
MACRO_PPP_IP PPP_IPXCP;
MACRO_PPP_IP PPP_LCP;
MACRO_PPP_IP PPP_LQR;
MACRO_PPP_MINMTU PPP_MAXMRU;
MACRO_PPP_MTU PPP_MAXMTU;
MACRO_PPP_MINMRU PPP_MINMRU;
MACRO_PPP_MINMTU PPP_MINMTU;
MACRO_PPP_IP PPP_ML;
MACRO_PPP_IP PPP_MLCP;
MACRO_PPP_MINMTU PPP_MRU;
MACRO_PPP_MTU PPP_MTU;
MACRO_PPP_IP PPP_NB;
MACRO_PPP_IP PPP_NBCP;
MACRO_OUTPUT PPP_PACKET;
MACRO_PPP_TRANS PPP_PAD;
MACRO_PPP_IP PPP_PAP;
MACRO_PPP_TRANS PPP_TRANS;
MACRO_PPP_UI PPP_UI;
MACRO_PPP_IP PPP_VJC_COMP;
MACRO_PPP_IP PPP_VJC_UNCOMP;
MACRO_PP PP_NETBOOT;
MACRO_PP PP_NOIOCTL;
MACRO_USPosition PPosition;
MACRO_PRBQUEUES PRBQUEUES;
MACRO_PRBUFHSZ PRBUFHSZ;
MACRO_PRCSIG PRCFAULT;
MACRO_PRCO PRCO_GETOPT;
MACRO_PRCO PRCO_NCMDS;
MACRO_PRCO PRCO_NWMGT;
MACRO_PRCO PRCO_PIF;
MACRO_PRCO PRCO_SETOPT;
MACRO_PRCO PRCO_TRACE;
MACRO_PRCSIG PRCSIG;
MACRO_PRC_IFDOWN PRC_CTICONNRQST;
MACRO_PRC_IFDOWN PRC_CTIDISCONNRQST;
MACRO_PRC_IFDOWN PRC_CTIFLOWCTLCHG;
MACRO_PRC_IFDOWN PRC_EVENT;
MACRO_PRC_IFDOWN PRC_HOSTDEAD;
MACRO_PRC_IFDOWN PRC_HOSTUNREACH;
MACRO_PRC_IFDOWN PRC_IFADDED;
MACRO_PRC_IFDOWN PRC_IFDETACHED;
MACRO_PRC_IFDOWN PRC_IFDOWN;
MACRO_PRC_IFDOWN PRC_MSGSIZE;
MACRO_PRC_IFDOWN PRC_NCMDS;
MACRO_PRC_IFDOWN PRC_NEWADDRSET;
MACRO_PRC_IFDOWN PRC_NMADD;
MACRO_PRC PRC_NREGS;
MACRO_PRC_IFDOWN PRC_PARAMPROB;
MACRO_PRC_IFDOWN PRC_QUENCH;
MACRO_PRC_IFDOWN PRC_QUENCH2;
MACRO_PRC_IFDOWN PRC_REDIRECT_HOST;
MACRO_PRC_IFDOWN PRC_REDIRECT_NET;
MACRO_PRC_IFDOWN PRC_REDIRECT_TOSHOST;
MACRO_PRC_IFDOWN PRC_REDIRECT_TOSNET;
MACRO_PRC_IFDOWN PRC_ROUTEDEAD;
MACRO_PRC_IFDOWN PRC_TIMXCEED_INTRANS;
MACRO_PRC_IFDOWN PRC_TIMXCEED_REASS;
MACRO_PRC_IFDOWN PRC_UNREACH_HOST;
MACRO_PRC_IFDOWN PRC_UNREACH_NET;
MACRO_PRC_IFDOWN PRC_UNREACH_PORT;
MACRO_PRC_IFDOWN PRC_UNREACH_PROTOCOL;
MACRO_PRC_IFDOWN PRC_UNREACH_SRCFAIL;
prstates PRDOWN;
MACRO_PRCSIG PRDUMPCORE;
MACRO_GENERAL PREDICTIVE_SERV;
MACRO_PRELIM PRELIM;
prstates PRERROR;
MACRO_PRVERSION PRESTO_DIRTY;
MACRO_F1 PREV;
MACRO_PRFLUSH PRFLUSH;
MACRO_PR_CLEAN PRFSIZE;
MACRO_PRFS PRFS_ABORT;
MACRO_PRFS PRFS_EXECED;
MACRO_PRFS PRFS_FAULT;
MACRO_PRFS PRFS_FDINVLD;
MACRO_PRFS_STOPFORK PRFS_KOLC;
MACRO_PRFS PRFS_OPEN;
MACRO_PRFS PRFS_SCENTER;
MACRO_PRFS PRFS_SCEXIT;
MACRO_PRFS PRFS_SIGNAL;
MACRO_PRFS_STOPFORK PRFS_STOPEXEC;
MACRO_PRFS_STOPFORK PRFS_STOPFORK;
MACRO_PRFS_STOPFORK PRFS_STOPTCR;
MACRO_PRFS_STOPFORK PRFS_STOPTERM;
MACRO_PRFS_STOPFORK PRFS_STOPTTERM;
MACRO_PRFS PRFS_SWEXIT;
MACRO_PRFS PRFS_TRACING;
MACRO_PRFS PRFS_WASTRACED;
MACRO_PSWP PRIBIO;
MACRO_PRIMARY PRIMARY_CPU_NOT_FOUND;
MACRO_PRIO_MAX PRIO_MAX;
MACRO_PRIO PRIO_MIN;
MACRO_PRIO_PGRP PRIO_PGRP;
MACRO_PRIO_MAX PRIO_PROCESS;
MACRO_PRIO_PGRP PRIO_USER;
MACRO_PSWP PRIUBA;
MACRO_MC PRIVATE;
MACRO_PRIZERO PRIZERO;
MACRO_PRI_BG PRI_BG_MAX_NP;
MACRO_PRI_BG PRI_BG_MIN_NP;
MACRO_PRI_FG PRI_FG_MAX_NP;
MACRO_PRI_FG PRI_FG_MIN_NP;
MACRO_PTHREAD_CREATE PRI_FIFO_MAX;
MACRO_PTHREAD_CREATE PRI_FIFO_MIN;
MACRO_PRI_LFI PRI_LFI_MAX_NP;
MACRO_PRI_LFI PRI_LFI_MIN_NP;
MACRO_PRI_LRR PRI_LRR_MAX_NP;
MACRO_PRI_LRR PRI_LRR_MIN_NP;
MACRO_PRI_OTHER PRI_OTHER_MAX;
MACRO_PRI_OTHER PRI_OTHER_MIN;
MACRO_PRI PRI_RR_MAX;
MACRO_PRI PRI_RR_MIN;
MACRO_PRVERSION PRMAGIC;
MACRO_PRNODEV PRNODEV;
MACRO_PRCSIG PRNOSTEP;
MACRO_EMPTY PROCESSOR;
MACRO_PROCESSOR_BASIC PROCESSOR_BASIC_INFO;
MACRO_PROCESSOR PROCESSOR_INFO_MAX;
MACRO_PROCESSOR_SET_ACTIVE PROCESSOR_SET_ACTIVE;
MACRO_OPROCESSOR_SET PROCESSOR_SET_BASIC_INFO;
MACRO_OPROCESSOR_SET PROCESSOR_SET_BASIC_INFO_MASK_SZ;
MACRO_PROCESSOR_SET_EXCLUSIVE PROCESSOR_SET_EXCLUSIVE_USE;
MACRO_PROCESSOR_SET PROCESSOR_SET_INFO_MAX;
MACRO_PROCESSOR_SET_IN PROCESSOR_SET_IN_USE;
MACRO_PROCESSOR_SET_SCHED PROCESSOR_SET_SCHED_INFO;
MACRO_UNLOCK PROCLOCK;
MACRO_PROC_DATA PROC_DATA;
MACRO_PROC PROC_TEXT;
accept_stat PROC_UNAVAIL;
MACRO_PROFIL_FLAGS PROFIL_FLAGS_ALL_THREADS;
MACRO_PROFIL PROFIL_MAX;
MACRO_PROFIL PROFIL_SCALE_STOP;
MACRO_PROFIL PROFIL_SCALE_STOP_1;
MACRO_PROFIL PROFIL_SCALE_TOTAL;
MACRO_PROF PROF_TOOLVER;
accept_stat PROG_MISMATCH;
accept_stat PROG_UNAVAIL;
MACRO_PROMISC PROMISC_SAP;
MACRO_PROOT PROOT;
propflags PROPAGATE_ON_COPY;
propstat PROPERR_ACCES;
propstat PROPERR_AGAIN;
propstat PROPERR_BUSY;
propstat PROPERR_DQUOT;
propstat PROPERR_EXIST;
propstat PROPERR_FAULT;
propstat PROPERR_GET;
propstat PROPERR_INTR;
propstat PROPERR_INVAL;
propstat PROPERR_IO;
propstat PROPERR_LOOP;
propstat PROPERR_MFILE;
propstat PROPERR_NAMETOOLONG;
propstat PROPERR_NETUNREACH;
propstat PROPERR_NFILE;
propstat PROPERR_NOENT;
propstat PROPERR_NOMEM;
propstat PROPERR_NOSPC;
propstat PROPERR_NOTDIR;
propstat PROPERR_NOTSUP;
propstat PROPERR_NXIO;
propstat PROPERR_OPNOTSUPP;
propstat PROPERR_PERM;
propstat PROPERR_REMOTE;
propstat PROPERR_ROFS;
propstat PROPERR_SERVERFAULT;
propstat PROPERR_STALE;
propstat PROPERR_TIMEDOUT;
MACRO_PROPLIST PROPLIST_NAME_MAX;
MACRO_PROPLIST_NUM PROPLIST_NUM_MAX;
MACRO_PROPLIST_PROGRAM PROPLIST_PROGRAM;
MACRO_PROPLIST_PROGRAM PROPLIST_VERSION2;
MACRO_PROPLIST_VERSION3 PROPLIST_VERSION3;
MACRO_PROPROC3 PROPROC3_DEL;
MACRO_PROPROC3 PROPROC3_GET;
MACRO_PROPROC3 PROPROC3_NULL;
MACRO_PROPROC3 PROPROC3_SET;
MACRO_PROPROC PROPROC_ACCESS;
MACRO_PROPROC PROPROC_DEL;
MACRO_PROPROC PROPROC_GET;
MACRO_PROPROC PROPROC_GETATTR;
MACRO_PROPROC PROPROC_NULL;
MACRO_PROPROC PROPROC_SET;
MACRO_PROP PROP_LIST_MAGIC_VERS1;
MACRO_MWM_INFO PROP_MOTIF_WM_HINTS_ELEMENTS;
MACRO_PROP_MOTIF PROP_MOTIF_WM_INFO_ELEMENTS;
MACRO_PROP2 PROP_MWM_HINTS_ELEMENTS;
MACRO_PROP_MWM PROP_MWM_INFO_ELEMENTS;
propstat PROP_OK;
MACRO_PROT PROT_EXEC;
MACRO_PROT PROT_NONE;
MACRO_PROT PROT_READ;
MACRO_PROT PROT_WRITE;
MACRO_BUTTON_UP PROXIMITY_IN;
MACRO_BUTTON_UP PROXIMITY_OUT;
MACRO_PRPWPROG PRPWPROG_NUM;
MACRO_PRPWPROG_VERS_0 PRPWPROG_VERS;
MACRO_PRPWPROG_VERS PRPWPROG_VERS_V1;
MACRO_PRPWPROG_VERS PRPWPROG_VERS_V2;
MACRO_PRPWPROG_VERS PRPWPROG_VERS_V3;
MACRO_PRPW_ADMINT PRPW_ADMINT_CREATE;
MACRO_PRPW_ADMINT PRPW_ADMINT_REMOVE;
MACRO_PRPW_ADMINT PRPW_ADMINT_UPDATE;
MACRO_PRPW_ERR PRPW_ERR_FIELDSYNC;
MACRO_PRPW_ERR PRPW_ERR_NEW_FIELDS;
MACRO_PRPW_ERR PRPW_ERR_NEW_PARSE;
MACRO_PRPW_ERR PRPW_ERR_OLD_ENTRY;
MACRO_PRPW_ERR PRPW_ERR_OLD_PASSWORD;
MACRO_PRPW_ERR PRPW_ERR_OLD_PW;
MACRO_PRPW_ERR PRPW_ERR_PASSWD_OPEN;
MACRO_PRPW_ERR PRPW_ERR_PTMP_BUSY;
MACRO_PRPW_ERR PRPW_ERR_PTMP_FDOPEN;
MACRO_PRPW_ERR PRPW_ERR_PTMP_OPEN;
MACRO_PRPW_ERR PRPW_ERR_PTMP_PUT;
MACRO_PRPW_ERR PRPW_ERR_PTMP_RENAME;
MACRO_PRPW_ERR PRPW_ERR_PTMP_WRITE;
MACRO_PRPW_ERR PRPW_ERR_PW_UNCHANGED;
MACRO_PRPW_ERR PRPW_ERR_UNK_05;
MACRO_PRPW_ERR PRPW_ERR_UNK_06;
MACRO_PRPW_ERR PRPW_ERR_UNK_11;
MACRO_PRPW_ERR PRPW_ERR_UNK_16;
MACRO_PRPW_ERR PRPW_ERR_UNK_18;
MACRO_PRPW_ERR PRPW_ERR_UPDATE_REC;
MACRO_PRPW_OPTREQ_SPECDATA PRPW_OPTREQ_MATCHDATA;
MACRO_PRPW_OPTREQ PRPW_OPTREQ_NEWPASS;
MACRO_PRPW_PROC_V3 PRPW_OPTREQ_OLDPASS;
MACRO_PRPW_OPTREQ PRPW_OPTREQ_ORIGIN;
MACRO_PRPW_OPTREQ_SPECDATA PRPW_OPTREQ_SPECDATA;
MACRO_PRPW_OPTREQ_SPECDATA PRPW_OPTREQ_UBUFDATA;
MACRO_PRPW_OPTREQ PRPW_OPTREQ_VACATION;
MACRO_PRPW_OPTRSP_OBJTYP PRPW_OPTRSP_FLEN;
MACRO_PRPW_OPTRSP_OBJTYP PRPW_OPTRSP_OBJTYP;
MACRO_PRPW_OPTRSP PRPW_OPTRSP_ORDNUM;
MACRO_PRPW_PROC_V2 PRPW_PROC_ADMIN_CHANGE;
MACRO_PRPW PRPW_PROC_LOGIN_FAIL;
MACRO_PRPW_PROC PRPW_PROC_LOGIN_FULL;
MACRO_PRPW PRPW_PROC_LOGIN_SUCC;
MACRO_PRPWPROG_VERS_0 PRPW_PROC_NULL;
MACRO_PRPW PRPW_PROC_PWCHG_FAIL;
MACRO_PRPW PRPW_PROC_PWCHG_SUCC;
MACRO_PRPW_PROC_V2 PRPW_PROC_QUERY_FIELDS;
MACRO_PRPW_PROC PRPW_PROC_V1_MAX;
MACRO_PRPW_PROC_V2 PRPW_PROC_V2_MAX;
MACRO_PRPW_PROC_V3 PRPW_PROC_V3_MAX;
MACRO_PRPW PRPW_PROC_VAC_UPDATE;
MACRO_PRCSIG PRRESCHED;
MACRO_PRRESET PRRESET;
MACRO_PRCSIG PRSABORT;
MACRO_PRCSIG PRSFAULT;
MACRO_PRCSIG PRSHOLD;
MACRO_PRCSIG PRSTEP;
MACRO_PRCSIG PRSTOP;
MACRO_PRCSIG PRSTRACE;
MACRO_PRCSIG PRSVADDR;
MACRO_XTABS PRTERA;
MACRO_PRCSIG PRTOUCH;
MACRO_F1 PRTSC;
prstates PRUP;
MACRO_PRU PRU_ABORT;
MACRO_PRU PRU_ACCEPT;
MACRO_PRU PRU_ATTACH;
MACRO_PRU PRU_BIND;
MACRO_PRU PRU_CONNECT;
MACRO_PRU PRU_CONNECT2;
MACRO_PRU PRU_CONTROL;
MACRO_PRU PRU_DETACH;
MACRO_PRU PRU_DISCONNECT;
MACRO_PRU PRU_FASTTIMO;
MACRO_PRU PRU_LISTEN;
MACRO_PRU_NREQ PRU_NREQ;
MACRO_PRU PRU_PEERADDR;
MACRO_PRU PRU_PROTORCV;
MACRO_PRU PRU_PROTOSEND;
MACRO_PRU PRU_RCVD;
MACRO_PRU PRU_RCVOOB;
MACRO_PRU PRU_SEND;
MACRO_PRU PRU_SENDOOB;
MACRO_PRU PRU_SENSE;
MACRO_PRU PRU_SHUTDOWN;
MACRO_PRU PRU_SLOWTIMO;
MACRO_PRU PRU_SOCKADDR;
MACRO_PRVERSION PRVERSION;
MACRO_PR_STOPPED PR_ABORT;
MACRO_PR_ATOMIC PR_ADDR;
MACRO_PR_STOPPED PR_ASLEEP;
MACRO_PR_STOPPED PR_ASYNC;
MACRO_PR_ATOMIC PR_ATOMIC;
MACRO_PR PR_BOUNCEIO;
MACRO_PR_CLEAN PR_CLEAN;
MACRO_FLTSET PR_CMD_MASK;
MACRO_PR_ATOMIC PR_CONNREQUIRED;
MACRO_PR_TINH PR_CONTSIG;
MACRO_PR_SIGNALLED PR_DEAD;
MACRO_PRBQUEUES PR_DIRTY;
MACRO_PR_STOPPED PR_DSTOP;
MACRO_PR_SLOWHZ PR_FASTHZ;
MACRO_PR_SIGNALLED PR_FAULTED;
MACRO_PR_STOPPED PR_FORK;
MACRO_PR_SIGNALLED PR_FORKSTOP;
MACRO_PR_CLEAN PR_INVAL;
MACRO_PR_STOPPED PR_ISSYS;
MACRO_PR_STOPPED PR_ISTOP;
MACRO_PR_SIGNALLED PR_JOBCONTROL;
MACRO_PR_TINH PR_KILLSIG;
MACRO_PR_STOPPED PR_KLC;
MACRO_PR_SHFT PR_MSK;
MACRO_PR_STOPPED PR_PCINVAL;
MACRO_PR_TINH PR_PNDSTOP;
MACRO_PR_STOPPED PR_PTRACE;
MACRO_PR_ATOMIC PR_READZEROLEN;
MACRO_PR_SETMASK PR_REQUESTED;
MACRO_PR_ATOMIC PR_RIGHTS;
MACRO_PR_STOPPED PR_RLC;
MACRO_PR_SSTOP PR_SDEFAULT;
MACRO_PR_ATOMIC PR_SEQPACKET;
MACRO_PR_SETMASK PR_SETMASK;
MACRO_PR_SHFT PR_SHFT;
MACRO_PR_SIDL PR_SIDL;
MACRO_PR_SIGNALLED PR_SIGNALLED;
MACRO_PR_SLOWHZ PR_SLOWHZ;
MACRO_PR_SRUN PR_SRUN;
MACRO_CLNAME PR_SSLEEP;
MACRO_PR_SSTOP PR_SSTOP;
MACRO_PR_STOPPED PR_STOPEXEC;
MACRO_PR_STOPPED PR_STOPFORK;
MACRO_PR_STOPPED PR_STOPPED;
MACRO_PR_STOPPED PR_STOPTCR;
MACRO_PR_STOPPED PR_STOPTERM;
MACRO_PR_STOPPED PR_STOPTTERM;
MACRO_PR_TINH PR_STRACE;
MACRO_PR_SIGNALLED PR_SYSENTRY;
MACRO_PR_SIGNALLED PR_SYSEXIT;
MACRO_PR_SIDL PR_SZOMB;
MACRO_PR_SIGNALLED PR_TCRSTOP;
MACRO_PR_TINH PR_TINH;
MACRO_PR_STOPPED PR_TOUCHING;
MACRO_PR_STOPPED PR_TRACING;
MACRO_PR_TINH PR_TSTOP;
MACRO_PR_SIGNALLED PR_TTSTOP;
MACRO_PR_STOPPED PR_USCHED;
MACRO_PR_ATOMIC PR_WANTRCVD;
MACRO_PR_STOPPED PR_WASTRACED;
MACRO_USPosition PResizeInc;
MACRO_CLNAME PSARGS_SZ;
MACRO_GETNCNT PSEMN;
MACRO_PSEMZ PSEMZ;
MACRO_PSET PSET_EXCLUSIVE;
MACRO_PSET PSET_NON_EXCLUSIVE;
MACRO_PSET PSET_RELEASE_THREADS;
$E722F09ED1144D6F1CCBF34446B0F175 PSHARED_BAD;
$E722F09ED1144D6F1CCBF34446B0F175 PSHARED_CV;
MACRO_PSHARED_CV_BROADCAST PSHARED_CV_BROADCAST;
MACRO_PSHARED_CV PSHARED_CV_SIGNAL;
MACRO_PSHARED_CV PSHARED_CV_WAIT;
$D4AC8D0F670D6DA0C7CB30777785B82A PSHARED_HOLDER_BAD;
$D4AC8D0F670D6DA0C7CB30777785B82A PSHARED_HOLDER_CONDWAIT;
$D4AC8D0F670D6DA0C7CB30777785B82A PSHARED_HOLDER_MUTEX;
$D4AC8D0F670D6DA0C7CB30777785B82A PSHARED_HOLDER_MUTEXWAIT;
$D4AC8D0F670D6DA0C7CB30777785B82A PSHARED_HOLDER_READ;
$D4AC8D0F670D6DA0C7CB30777785B82A PSHARED_HOLDER_READWAIT;
$D4AC8D0F670D6DA0C7CB30777785B82A PSHARED_HOLDER_WRITE;
$D4AC8D0F670D6DA0C7CB30777785B82A PSHARED_HOLDER_WRITEWAIT;
MACRO_PSHARED_MOD PSHARED_MOD_ABSTIME;
MACRO_PSHARED_MOD PSHARED_MOD_ERRORCHECK;
MACRO_PSHARED_MOD PSHARED_MOD_FASTPATH;
MACRO_PSHARED_MOD PSHARED_MOD_RECURSIVE;
$E722F09ED1144D6F1CCBF34446B0F175 PSHARED_MUTEX;
$E722F09ED1144D6F1CCBF34446B0F175 PSHARED_RWL;
MACRO_PSHARED PSHARED_RWM_LOCK;
MACRO_PSHARED_RWM PSHARED_RWM_READ;
MACRO_PSHARED_RWM PSHARED_RWM_TRY;
MACRO_PSHARED PSHARED_RWM_UNLOCK;
MACRO_PSHARED_RWM PSHARED_RWM_WRITE;
MACRO_PSIOP PSIOP_810_BURST_DISABLE;
MACRO_TEGC PSIOP_810_SCLK_25MHz;
MACRO_TEGC PSIOP_810_SCLK_32MHz;
MACRO_TEGC PSIOP_810_SCLK_33MHz;
MACRO_TEGC PSIOP_810_SCLK_40MHz;
MACRO_PSWP PSLEP;
MACRO_PSL PSL_FORMAT;
MACRO_PSL PSL_SIZEBOOT;
MACRO_PSL_START PSL_START;
MACRO_PSL_START PSL_SYSSTART;
MACRO_PSSIZE PSSIZE;
MACRO_PSWP PSUSP;
MACRO_PSWP PSWP;
MACRO_PSX4_KEY_ENTRY PSX4_KEY_ENTRY_NULL;
MACRO_PSX4_KEY_STATE PSX4_KEY_STATE_FREE;
MACRO_PSX4_KEY_STATE PSX4_KEY_STATE_INUSE;
MACRO_PSX4_KEY_STATE PSX4_KEY_STATE_MARKED_FOR_DELETE;
MACRO_PSX4_KEY_ENTRY PSX4_KEY_TABLE_NULL;
MACRO_PSX4_KEY PSX4_KEY_VERSION_MAX;
MACRO_PSX4 PSX4_LOCK_ENTRY;
MACRO_PSX4 PSX4_UNLOCK_ENTRY;
MACRO_USPosition PSize;
MACRO_PTHREAD_CANCEL_DEFERRED PTHREAD_CANCELED;
MACRO_PTHREAD_CANCEL_DEFERRED PTHREAD_CANCEL_ASYNCHRONOUS;
MACRO_PTHREAD_CANCEL_DEFERRED PTHREAD_CANCEL_DEFERRED;
MACRO_PTHREAD_CANCEL PTHREAD_CANCEL_DISABLE;
MACRO_PTHREAD_CANCEL PTHREAD_CANCEL_ENABLE;
MACRO_PTHREAD_CREATE PTHREAD_CREATE_DETACHED;
MACRO_PTHREAD_CREATE PTHREAD_CREATE_JOINABLE;
pthreadDbgStatus_t PTHREAD_DBG_CONFLICT;
pthreadDbgStatus_t PTHREAD_DBG_CORRUPT;
pthreadDbgStatus_t PTHREAD_DBG_INCONSTATE;
pthreadDbgStatus_t PTHREAD_DBG_INVADDR;
pthreadDbgStatus_t PTHREAD_DBG_INVCMD;
pthreadDbgStatus_t PTHREAD_DBG_INVOPTION;
pthreadDbgStatus_t PTHREAD_DBG_INVPARAM;
pthreadDbgStatus_t PTHREAD_DBG_INVSEQ;
pthreadDbgStatus_t PTHREAD_DBG_NOARG;
pthreadDbgStatus_t PTHREAD_DBG_NONESEL;
pthreadDbgStatus_t PTHREAD_DBG_NOPRIV;
pthreadDbgStatus_t PTHREAD_DBG_NULLCMD;
pthreadDbgStatus_t PTHREAD_DBG_QUIT;
pthreadDbgStatus_t PTHREAD_DBG_SUCCESS;
pthreadDbgStatus_t PTHREAD_DBG_SUCCESSPEND;
pthreadDbgStatus_t PTHREAD_DBG_UNIMPL;
MACRO_PTHREAD_DEBUG_COND PTHREAD_DEBUG_COND_INTERNAL;
MACRO_PTHREAD_DEBUG_COND PTHREAD_DEBUG_COND_METERED;
MACRO_PTHREAD_DEBUG_COND PTHREAD_DEBUG_COND_NAME;
MACRO_PTHREAD_DEBUG_COND PTHREAD_DEBUG_COND_PEND;
MACRO_PTHREAD_DEBUG_COND PTHREAD_DEBUG_COND_PSHARED;
MACRO_PTHREAD_DEBUG_COND PTHREAD_DEBUG_COND_TRACED;
MACRO_PTHREAD_DEBUG_COND PTHREAD_DEBUG_COND_WAITERS;
pthreadDebugEvent_tag PTHREAD_DEBUG_EVENT_ACTIVATING;
pthreadDebugEvent_tag PTHREAD_DEBUG_EVENT_BLOCKING;
pthreadDebugEvent_tag PTHREAD_DEBUG_EVENT_BUGCHECK;
pthreadDebugEvent_tag PTHREAD_DEBUG_EVENT_CREATING;
pthreadDebugEvent_tag PTHREAD_DEBUG_EVENT_FREEING;
pthreadDebugEvent_tag PTHREAD_DEBUG_EVENT_INITIALIZED;
pthreadDebugEvent_tag PTHREAD_DEBUG_EVENT_LASTCHANCE;
pthreadDebugEvent_tag PTHREAD_DEBUG_EVENT_NONE;
pthreadDebugEvent_tag PTHREAD_DEBUG_EVENT_RUNNING;
pthreadDebugEvent_tag PTHREAD_DEBUG_EVENT_TERMINATING;
pthreadDebugEvent_tag PTHREAD_DEBUG_EVENT_TOOLREPORT;
pthreadDebugEvent_tag PTHREAD_DEBUG_EVENT_UNBLOCK;
MACRO_PTHREAD_DEBUG_EVTRUN PTHREAD_DEBUG_EVTRUN_KERNEL;
MACRO_PTHREAD_DEBUG_EVTRUN PTHREAD_DEBUG_EVTRUN_PREEMPTED;
MACRO_PTHREAD_DEBUG_EVTTRM PTHREAD_DEBUG_EVTTRM_LOCKS;
MACRO_PTHREAD_DEBUG_EVTUBL PTHREAD_DEBUG_EVTUBL_PEND;
pthreadDebugInitFlag_tag PTHREAD_DEBUG_FLAG_NOUPDATE;
pthreadDebugInitFlag_tag PTHREAD_DEBUG_FLAG_PASSIVE;
pthreadDebugInitFlag_tag PTHREAD_DEBUG_FLAG_UPCALLS;
MACRO_PTHREAD_DEBUG_KRNBFLG PTHREAD_DEBUG_KRNBFLG_FAULT;
MACRO_PTHREAD_DEBUG_KRNBFLG PTHREAD_DEBUG_KRNBFLG_SYSCALL;
pthreadDebugKState_tag PTHREAD_DEBUG_KSTATE_HALTED;
pthreadDebugKState_tag PTHREAD_DEBUG_KSTATE_RUNNING;
pthreadDebugKState_tag PTHREAD_DEBUG_KSTATE_STOPPED;
pthreadDebugKState_tag PTHREAD_DEBUG_KSTATE_UINT_WAITING;
pthreadDebugKState_tag PTHREAD_DEBUG_KSTATE_UNKNOWN;
pthreadDebugKState_tag PTHREAD_DEBUG_KSTATE_WAITING;
MACRO_PTHREAD_DEBUG_KTD PTHREAD_DEBUG_KTD_BPRIO;
MACRO_PTHREAD_DEBUG_KTD PTHREAD_DEBUG_KTD_CPRIO;
MACRO_PTHREAD_DEBUG_KTD PTHREAD_DEBUG_KTD_POLICY;
MACRO_PTHREAD_DEBUG_KTD PTHREAD_DEBUG_KTD_SCHCLS;
MACRO_PTHREAD_DEBUG_KTD PTHREAD_DEBUG_KTD_SIGBLK;
MACRO_PTHREAD_DEBUG_KTD PTHREAD_DEBUG_KTD_SIGPND;
MACRO_PTHREAD_DEBUG_KTD PTHREAD_DEBUG_KTD_SLEEP;
MACRO_PTHREAD_DEBUG_KTD PTHREAD_DEBUG_KTD_SUSPCNT;
MACRO_PTHREAD_DEBUG_KTD PTHREAD_DEBUG_KTD_SYSTEM;
MACRO_PTHREAD_DEBUG_KTD PTHREAD_DEBUG_KTD_USER;
MACRO_PTHREAD_DEBUG_KTD PTHREAD_DEBUG_KTD_WAIT;
MACRO_PTHREAD_DEBUG_MUT PTHREAD_DEBUG_MUT_INTERNAL;
MACRO_PTHREAD_DEBUG_MUT PTHREAD_DEBUG_MUT_LOCKED;
MACRO_PTHREAD_DEBUG_MUT PTHREAD_DEBUG_MUT_METERED;
MACRO_PTHREAD_DEBUG_MUT PTHREAD_DEBUG_MUT_NAME;
pthreadDebugMutexProtocol_tag PTHREAD_DEBUG_MUT_PROTO_INHERIT;
pthreadDebugMutexProtocol_tag PTHREAD_DEBUG_MUT_PROTO_NONE;
pthreadDebugMutexProtocol_tag PTHREAD_DEBUG_MUT_PROTO_PROTECT;
MACRO_PTHREAD_DEBUG_MUT PTHREAD_DEBUG_MUT_PSHARED;
MACRO_PTHREAD_DEBUG_MUT PTHREAD_DEBUG_MUT_TRACED;
pthreadDebugMutexType_tag PTHREAD_DEBUG_MUT_TYPE_ERRORCHECK;
pthreadDebugMutexType_tag PTHREAD_DEBUG_MUT_TYPE_NORMAL;
pthreadDebugMutexType_tag PTHREAD_DEBUG_MUT_TYPE_RECURSIVE;
MACRO_PTHREAD_DEBUG_MUT PTHREAD_DEBUG_MUT_WAITERS;
MACRO_PTHREAD_DEBUG_RW PTHREAD_DEBUG_RW_INTERNAL;
MACRO_PTHREAD_DEBUG_RW PTHREAD_DEBUG_RW_NAME;
MACRO_PTHREAD_DEBUG_RW PTHREAD_DEBUG_RW_PSHARED;
MACRO_PTHREAD_DEBUG_RW PTHREAD_DEBUG_RW_RDLOCKED;
MACRO_PTHREAD_DEBUG_RW PTHREAD_DEBUG_RW_RWAITERS;
MACRO_PTHREAD_DEBUG_RW PTHREAD_DEBUG_RW_WRLOCKED;
MACRO_PTHREAD_DEBUG_RW PTHREAD_DEBUG_RW_WWAITERS;
pthreadDebugSpecialType_tag PTHREAD_DEBUG_SPECIAL_TYPE_CURRENT;
pthreadDebugSpecialType_tag PTHREAD_DEBUG_SPECIAL_TYPE_TRAP;
pthreadDebugState_tag PTHREAD_DEBUG_STATE_BLOCKED;
pthreadDebugState_tag PTHREAD_DEBUG_STATE_NEW;
pthreadDebugState_tag PTHREAD_DEBUG_STATE_READY;
pthreadDebugState_tag PTHREAD_DEBUG_STATE_RUNNING;
pthreadDebugState_tag PTHREAD_DEBUG_STATE_SORTING;
pthreadDebugState_tag PTHREAD_DEBUG_STATE_TERMINATED;
pthreadDebugState_tag PTHREAD_DEBUG_STATE_UNKNOWN;
pthreadDebugState_tag PTHREAD_DEBUG_STATE_ZOMBIE;
pthreadDebugSubstate_tag PTHREAD_DEBUG_SUBSTATE_CV;
pthreadDebugSubstate_tag PTHREAD_DEBUG_SUBSTATE_DELAY;
pthreadDebugSubstate_tag PTHREAD_DEBUG_SUBSTATE_JOIN;
pthreadDebugSubstate_tag PTHREAD_DEBUG_SUBSTATE_KERNEL;
pthreadDebugSubstate_tag PTHREAD_DEBUG_SUBSTATE_MUTEX;
pthreadDebugSubstate_tag PTHREAD_DEBUG_SUBSTATE_NORMAL;
pthreadDebugSubstate_tag PTHREAD_DEBUG_SUBSTATE_READLOCK;
pthreadDebugSubstate_tag PTHREAD_DEBUG_SUBSTATE_START;
pthreadDebugSubstate_tag PTHREAD_DEBUG_SUBSTATE_SYNCSUSP;
pthreadDebugSubstate_tag PTHREAD_DEBUG_SUBSTATE_TERM_CANCEL;
pthreadDebugSubstate_tag PTHREAD_DEBUG_SUBSTATE_TERM_EXIT;
pthreadDebugSubstate_tag PTHREAD_DEBUG_SUBSTATE_TIMED_CV;
pthreadDebugSubstate_tag PTHREAD_DEBUG_SUBSTATE_UNBLOCK_PEND;
pthreadDebugSubstate_tag PTHREAD_DEBUG_SUBSTATE_UNKNOWN;
pthreadDebugSubstate_tag PTHREAD_DEBUG_SUBSTATE_WRITELOCK;
pthreadDebugThdBlkType_tag PTHREAD_DEBUG_THDBLK_BADVALUE;
pthreadDebugThdBlkType_tag PTHREAD_DEBUG_THDBLK_COND;
pthreadDebugThdBlkType_tag PTHREAD_DEBUG_THDBLK_DELAY;
pthreadDebugThdBlkType_tag PTHREAD_DEBUG_THDBLK_JOIN;
pthreadDebugThdBlkType_tag PTHREAD_DEBUG_THDBLK_KERNEL;
pthreadDebugThdBlkType_tag PTHREAD_DEBUG_THDBLK_MUTEX;
pthreadDebugThdBlkType_tag PTHREAD_DEBUG_THDBLK_NONE;
pthreadDebugThdBlkType_tag PTHREAD_DEBUG_THDBLK_RWL;
pthreadDebugThdBlkType_tag PTHREAD_DEBUG_THDBLK_SUSPSYNC;
MACRO_PTHREAD_DEBUG_THD PTHREAD_DEBUG_THD_CANCEL;
MACRO_PTHREAD_DEBUG_THD PTHREAD_DEBUG_THD_CAN_ASYNC;
MACRO_PTHREAD_DEBUG_THD PTHREAD_DEBUG_THD_CAN_ENABLED;
MACRO_PTHREAD_DEBUG_THD PTHREAD_DEBUG_THD_CAN_SYSTEM;
pthreadDebugThreadCreator_tag PTHREAD_DEBUG_THD_CREATOR_CMA;
pthreadDebugThreadCreator_tag PTHREAD_DEBUG_THD_CREATOR_DCE;
pthreadDebugThreadCreator_tag PTHREAD_DEBUG_THD_CREATOR_DCEEXC;
pthreadDebugThreadCreator_tag PTHREAD_DEBUG_THD_CREATOR_POSIX;
pthreadDebugThreadCreator_tag PTHREAD_DEBUG_THD_CREATOR_TIS;
MACRO_PTHREAD_DEBUG_THD PTHREAD_DEBUG_THD_DETACH;
MACRO_PTHREAD_DEBUG_THD PTHREAD_DEBUG_THD_ESTACKADDR;
MACRO_PTHREAD_DEBUG_THD PTHREAD_DEBUG_THD_HOLD;
MACRO_PTHREAD_DEBUG_THD PTHREAD_DEBUG_THD_INTERNAL;
MACRO_PTHREAD_DEBUG_THD PTHREAD_DEBUG_THD_JOINER;
pthreadDebugThreadKind_tag PTHREAD_DEBUG_THD_KIND_EXITHAND;
pthreadDebugThreadKind_tag PTHREAD_DEBUG_THD_KIND_FOREIGN;
pthreadDebugThreadKind_tag PTHREAD_DEBUG_THD_KIND_INITIAL;
pthreadDebugThreadKind_tag PTHREAD_DEBUG_THD_KIND_MGR;
pthreadDebugThreadKind_tag PTHREAD_DEBUG_THD_KIND_NORMAL;
pthreadDebugThreadKind_tag PTHREAD_DEBUG_THD_KIND_NULL;
MACRO_PTHREAD_DEBUG_THD PTHREAD_DEBUG_THD_NAME;
MACRO_PTHREAD_DEBUG_THD PTHREAD_DEBUG_THD_STACKADDR;
MACRO_PTHREAD_DEBUG_THD PTHREAD_DEBUG_THD_SUSPEND;
MACRO_PTHREAD_DEBUG_THD PTHREAD_DEBUG_THD_SYS_SCOPE;
_pthreadDebugTraceDetail_tag PTHREAD_DEBUG_TRACE_DETAIL_BRIEF;
_pthreadDebugTraceDetail_tag PTHREAD_DEBUG_TRACE_DETAIL_FULL;
_pthreadDebugTraceDetail_tag PTHREAD_DEBUG_TRACE_DETAIL_MID;
_pthreadDebugTraceDetail_tag PTHREAD_DEBUG_TRACE_DETAIL_NONE;
_pthreadDebugTraceDetail_tag PTHREAD_DEBUG_TRACE_DETAIL_NORMAL;
_pthreadDebugTraceFmt_tag PTHREAD_DEBUG_TRACE_FMT_CYCLE;
_pthreadDebugTraceFmt_tag PTHREAD_DEBUG_TRACE_FMT_SIZE;
_pthreadDebugTraceFmt_tag PTHREAD_DEBUG_TRACE_FMT_STACK;
_pthreadDebugTraceFmt_tag PTHREAD_DEBUG_TRACE_FMT_TIME;
_pthreadDebugTraceSetHow_tag PTHREAD_DEBUG_TRACE_SETHOW_CLEAR;
_pthreadDebugTraceSetHow_tag PTHREAD_DEBUG_TRACE_SETHOW_REPLACE;
_pthreadDebugTraceSetHow_tag PTHREAD_DEBUG_TRACE_SETHOW_SET;
MACRO_PTHREAD_DEBUG_TSD PTHREAD_DEBUG_TSD_ALLTHREAD;
MACRO_PTHREAD_DEBUG_TSD PTHREAD_DEBUG_TSD_EXTENDED;
MACRO_PTHREAD_DEBUG_TSD PTHREAD_DEBUG_TSD_NAME;
MACRO_PTHREAD_DEBUG_TSD PTHREAD_DEBUG_TSD_RESERVED;
MACRO_PTHREAD_DEBUG PTHREAD_DEBUG_VERSION;
MACRO_PTHREAD_DESTRUCTOR PTHREAD_DESTRUCTOR_ITERATIONS;
MACRO_PTHREAD_INHERIT PTHREAD_EXPLICIT_SCHED;
MACRO_PTHREAD_INHERIT PTHREAD_INHERIT_SCHED;
MACRO_PTHREAD_KEYS PTHREAD_KEYS_MAX;
MACRO_PTHREAD_KEY PTHREAD_KEY_ALLTHREAD_NP;
MACRO_PTHREAD_KEY PTHREAD_KEY_INITIALIZER_NP;
MACRO_PTHREAD_MUTEX_DEFAULT PTHREAD_MUTEX_DEFAULT;
MACRO_PTHREAD_MUTEX PTHREAD_MUTEX_ERRORCHECK;
MACRO_PTHREAD_MUTEX_NORMAL PTHREAD_MUTEX_ERRORCHECK_NP;
MACRO_PTHREAD_MUTEX PTHREAD_MUTEX_NORMAL;
MACRO_PTHREAD_MUTEX_NORMAL PTHREAD_MUTEX_NORMAL_NP;
MACRO_PTHREAD_MUTEX PTHREAD_MUTEX_RECURSIVE;
MACRO_PTHREAD_MUTEX_NORMAL PTHREAD_MUTEX_RECURSIVE_NP;
MACRO_PTHREAD_ONCE PTHREAD_ONCE_INITED;
MACRO_PTHREAD_ONCE PTHREAD_ONCE_INITING;
MACRO_PTHREAD_ONCE PTHREAD_ONCE_UNINIT;
MACRO_PTHREAD_MUTEX_DEFAULT PTHREAD_PROCESS_PRIVATE;
MACRO_PTHREAD_PROCESS PTHREAD_PROCESS_SHARED;
MACRO_PTHREAD_SCOPE PTHREAD_SCOPE_PROCESS;
MACRO_PTHREAD_SCOPE PTHREAD_SCOPE_SYSTEM;
MACRO_PTHREAD_KEYS PTHREAD_STACK_MIN;
MACRO_PTHREAD_TEB_CREATOR PTHREAD_TEB_CREATOR_CMA;
MACRO_PTHREAD_TEB_CREATOR PTHREAD_TEB_CREATOR_D4;
MACRO_PTHREAD_TEB_CREATOR PTHREAD_TEB_CREATOR_D4EXC;
MACRO_PTHREAD_TEB_CREATOR PTHREAD_TEB_CREATOR_PTHREAD;
MACRO_PTHREAD_TEB PTHREAD_TEB_EFLG_INITIAL;
MACRO_PTHREAD_TEB PTHREAD_TEB_EFLG_USER;
MACRO_PTHREAD PTHREAD_TEB_VERSION;
pthreadTraceBlockVariant_tag PTHREAD_TRACE_BLKVAR_HIBER;
pthreadTraceBlockVariant_tag PTHREAD_TRACE_BLKVAR_IMS;
pthreadTraceBlockVariant_tag PTHREAD_TRACE_BLKVAR_NONE;
pthreadTraceBlockVariant_tag PTHREAD_TRACE_BLKVAR_OPENVMS;
pthreadTraceBlockVariant_tag PTHREAD_TRACE_BLKVAR_OTHER;
pthreadTraceBlockVariant_tag PTHREAD_TRACE_BLKVAR_PFW;
pthreadTraceBlockVariant_tag PTHREAD_TRACE_BLKVAR_SETAST;
pthreadTraceBlockVariant_tag PTHREAD_TRACE_BLKVAR_SYNC;
pthreadTraceBlockVariant_tag PTHREAD_TRACE_BLKVAR_SYSCALL;
pthreadTraceBlockVariant_tag PTHREAD_TRACE_BLKVAR_UNIX;
pthreadTraceBlockVariant_tag PTHREAD_TRACE_BLKVAR_WAIT;
pthreadTraceBlockVariant_tag PTHREAD_TRACE_BLKVAR_WFL;
pthreadTraceCancel_tag PTHREAD_TRACE_CANCEL_PENDING;
pthreadTraceCancel_tag PTHREAD_TRACE_CANCEL_STATE;
pthreadTraceCancel_tag PTHREAD_TRACE_CANCEL_SYSTEM;
pthreadTraceCancel_tag PTHREAD_TRACE_CANCEL_TYPE;
pthreadTraceClass_tag PTHREAD_TRACE_CLASS_COND;
pthreadTraceClass_tag PTHREAD_TRACE_CLASS_ERROR;
pthreadTraceClass_tag PTHREAD_TRACE_CLASS_ICOND;
pthreadTraceClass_tag PTHREAD_TRACE_CLASS_IKERNEL;
pthreadTraceClass_tag PTHREAD_TRACE_CLASS_ILOCK;
pthreadTraceClass_tag PTHREAD_TRACE_CLASS_IMISC;
pthreadTraceClass_tag PTHREAD_TRACE_CLASS_IMUTEX;
pthreadTraceClass_tag PTHREAD_TRACE_CLASS_ISCHED;
pthreadTraceClass_tag PTHREAD_TRACE_CLASS_ITHREAD;
pthreadTraceClass_tag PTHREAD_TRACE_CLASS_IUPCALL;
pthreadTraceClass_tag PTHREAD_TRACE_CLASS_IVP;
pthreadTraceClass_tag PTHREAD_TRACE_CLASS_IVPC;
pthreadTraceClass_tag PTHREAD_TRACE_CLASS_KEY;
pthreadTraceClass_tag PTHREAD_TRACE_CLASS_LOCK;
pthreadTraceClass_tag PTHREAD_TRACE_CLASS_MUTEX;
pthreadTraceClass_tag PTHREAD_TRACE_CLASS_ONCE;
pthreadTraceClass_tag PTHREAD_TRACE_CLASS_SCHED;
pthreadTraceClass_tag PTHREAD_TRACE_CLASS_THREAD;
pthreadTraceClass_tag PTHREAD_TRACE_CLASS_USER;
MACRO_PTHREAD_TRACE_COND PTHREAD_TRACE_COND_ERROR;
MACRO_PTHREAD_TRACE_COND PTHREAD_TRACE_COND_INTERNAL;
MACRO_PTHREAD_TRACE_COND PTHREAD_TRACE_COND_INVATTR;
MACRO_PTHREAD_TRACE_COND PTHREAD_TRACE_COND_NAME;
MACRO_PTHREAD_TRACE_COND PTHREAD_TRACE_COND_PSHARED;
pthreadTraceCreator_tag PTHREAD_TRACE_CREATOR_CMA;
pthreadTraceCreator_tag PTHREAD_TRACE_CREATOR_DCE;
pthreadTraceCreator_tag PTHREAD_TRACE_CREATOR_DCEEXC;
pthreadTraceCreator_tag PTHREAD_TRACE_CREATOR_NONE;
pthreadTraceCreator_tag PTHREAD_TRACE_CREATOR_POSIX;
pthreadTraceCreator_tag PTHREAD_TRACE_CREATOR_TIS;
pthreadTraceFiniCode_tag PTHREAD_TRACE_FINI_DESIST;
pthreadTraceFiniCode_tag PTHREAD_TRACE_FINI_FLUSH;
pthreadTraceFiniCode_tag PTHREAD_TRACE_FINI_TERMINATE;
pthreadTraceLogHeadFlags_tag PTHREAD_TRACE_HEAD_MOREFRAMES;
pthreadTraceLogHeadFlags_tag PTHREAD_TRACE_HEAD_NAME;
pthreadTraceLogHeadFlags_tag PTHREAD_TRACE_HEAD_SYNC;
MACRO_PTHREAD_TRACE_ID PTHREAD_TRACE_ID_OBJ_B;
MACRO_PTHREAD_TRACE_MAXARGS PTHREAD_TRACE_ID_OBJ_M;
MACRO_PTHREAD_TRACE_ID PTHREAD_TRACE_ID_OP_B;
MACRO_PTHREAD_TRACE_MAXARGS PTHREAD_TRACE_ID_OP_M;
MACRO_PTHREAD_TRACE_ID PTHREAD_TRACE_ID_STS_B;
MACRO_PTHREAD_TRACE_MAXARGS PTHREAD_TRACE_ID_STS_M;
pthreadTraceDebugInfoFlags_tag PTHREAD_TRACE_INFO_DEBUGGER;
pthreadTraceDebugInfoFlags_tag PTHREAD_TRACE_INFO_MULTIPLE;
MACRO_PTHREAD_TRACE_KEY PTHREAD_TRACE_KEY_ALLTHREAD;
MACRO_PTHREAD_TRACE_KEY PTHREAD_TRACE_KEY_ERROR;
MACRO_PTHREAD_TRACE_KEY PTHREAD_TRACE_KEY_EXTENDED;
MACRO_PTHREAD_TRACE_KEY PTHREAD_TRACE_KEY_NAME;
MACRO_PTHREAD_TRACE_KEY PTHREAD_TRACE_KEY_RESERVED;
pthreadTraceLockState_tag PTHREAD_TRACE_LOCK_ALL;
pthreadTraceLockState_tag PTHREAD_TRACE_LOCK_CANCEL;
pthreadTraceLockState_tag PTHREAD_TRACE_LOCK_NEST;
pthreadTraceLockState_tag PTHREAD_TRACE_LOCK_RESTORE;
MACRO_PTHREAD_TRACE_LOG PTHREAD_TRACE_LOG_BUFSIZE;
pthreadTraceLogCompress_tag PTHREAD_TRACE_LOG_COMPRESS_NONE;
pthreadTraceLogCompress_tag PTHREAD_TRACE_LOG_COMPRESS_ZIP;
MACRO_PTHREAD_TRACE_LOG PTHREAD_TRACE_LOG_VERSION;
MACRO_PTHREAD_TRACE_MAXARGS PTHREAD_TRACE_MAXARGS;
MACRO_PTHREAD_TRACE_MUT PTHREAD_TRACE_MUT_ERROR;
MACRO_PTHREAD_TRACE_MUT PTHREAD_TRACE_MUT_INTERNAL;
MACRO_PTHREAD_TRACE_MUT PTHREAD_TRACE_MUT_INVATTR;
MACRO_PTHREAD_TRACE_MUT PTHREAD_TRACE_MUT_NAME;
pthreadTraceMutexProtocol_tag PTHREAD_TRACE_MUT_PROTO_INHERIT;
pthreadTraceMutexProtocol_tag PTHREAD_TRACE_MUT_PROTO_NONE;
pthreadTraceMutexProtocol_tag PTHREAD_TRACE_MUT_PROTO_PROTECT;
MACRO_PTHREAD_TRACE_MUT PTHREAD_TRACE_MUT_PSHARED;
pthreadTraceMutexType_tag PTHREAD_TRACE_MUT_TYPE_ERRORCHECK;
pthreadTraceMutexType_tag PTHREAD_TRACE_MUT_TYPE_NORMAL;
pthreadTraceMutexType_tag PTHREAD_TRACE_MUT_TYPE_RECURSIVE;
pthreadTraceNatExcVariant_tag PTHREAD_TRACE_NATEXC_OPENVMS;
pthreadTraceNatExcVariant_tag PTHREAD_TRACE_NATEXC_OTHER;
MACRO_PTHREAD_TRACE_KEY PTHREAD_TRACE_NATEXC_SIZE_MAX;
pthreadTraceNatExcVariant_tag PTHREAD_TRACE_NATEXC_UNIX;
pthreadTraceObject_tag PTHREAD_TRACE_OBJ_ANALYZE;
pthreadTraceObject_tag PTHREAD_TRACE_OBJ_COND;
pthreadTraceObject_tag PTHREAD_TRACE_OBJ_DEBUG;
pthreadTraceObject_tag PTHREAD_TRACE_OBJ_EF;
pthreadTraceObject_tag PTHREAD_TRACE_OBJ_EVENT;
pthreadTraceObject_tag PTHREAD_TRACE_OBJ_EXIT;
pthreadTraceObject_tag PTHREAD_TRACE_OBJ_HIBER;
pthreadTraceObject_tag PTHREAD_TRACE_OBJ_IMS;
pthreadTraceObject_tag PTHREAD_TRACE_OBJ_INTERRUPT;
pthreadTraceObject_tag PTHREAD_TRACE_OBJ_KERNEL;
pthreadTraceObject_tag PTHREAD_TRACE_OBJ_KEY;
pthreadTraceObject_tag PTHREAD_TRACE_OBJ_LOCK;
pthreadTraceObject_tag PTHREAD_TRACE_OBJ_MUTEX;
pthreadTraceObject_tag PTHREAD_TRACE_OBJ_ONCE;
pthreadTraceObject_tag PTHREAD_TRACE_OBJ_PGFLT;
pthreadTraceObject_tag PTHREAD_TRACE_OBJ_PRIVATE;
pthreadTraceObject_tag PTHREAD_TRACE_OBJ_SYSTEM;
pthreadTraceObject_tag PTHREAD_TRACE_OBJ_THREAD;
pthreadTraceObject_tag PTHREAD_TRACE_OBJ_USER;
pthreadTraceObject_tag PTHREAD_TRACE_OBJ_VP;
pthreadTraceObject_tag PTHREAD_TRACE_OBJ_notused;
pthreadTraceOperation_tag PTHREAD_TRACE_OP_APPLICATION;
pthreadTraceOperation_tag PTHREAD_TRACE_OP_ASSERT;
pthreadTraceOperation_tag PTHREAD_TRACE_OP_BLOCK;
pthreadTraceOperation_tag PTHREAD_TRACE_OP_CANCEL;
pthreadTraceOperation_tag PTHREAD_TRACE_OP_CATCH;
pthreadTraceOperation_tag PTHREAD_TRACE_OP_CREATE;
pthreadTraceOperation_tag PTHREAD_TRACE_OP_DESTROY;
pthreadTraceOperation_tag PTHREAD_TRACE_OP_DETACH;
pthreadTraceOperation_tag PTHREAD_TRACE_OP_ENTER;
pthreadTraceOperation_tag PTHREAD_TRACE_OP_EXCEPT;
pthreadTraceOperation_tag PTHREAD_TRACE_OP_EXIT;
pthreadTraceOperation_tag PTHREAD_TRACE_OP_GETPROP;
pthreadTraceOperation_tag PTHREAD_TRACE_OP_HEADER;
pthreadTraceOperation_tag PTHREAD_TRACE_OP_IMAGE;
pthreadTraceOperation_tag PTHREAD_TRACE_OP_INIT;
pthreadTraceOperation_tag PTHREAD_TRACE_OP_JOIN;
pthreadTraceOperation_tag PTHREAD_TRACE_OP_KILL;
pthreadTraceOperation_tag PTHREAD_TRACE_OP_LOCK;
pthreadTraceOperation_tag PTHREAD_TRACE_OP_NULL;
pthreadTraceOperation_tag PTHREAD_TRACE_OP_ONCE;
pthreadTraceOperation_tag PTHREAD_TRACE_OP_PREEMPT;
pthreadTraceOperation_tag PTHREAD_TRACE_OP_PROCESS;
pthreadTraceOperation_tag PTHREAD_TRACE_OP_READY;
pthreadTraceOperation_tag PTHREAD_TRACE_OP_RESUME;
pthreadTraceOperation_tag PTHREAD_TRACE_OP_RUN;
pthreadTraceOperation_tag PTHREAD_TRACE_OP_SEARCH;
pthreadTraceOperation_tag PTHREAD_TRACE_OP_SETCAN;
pthreadTraceOperation_tag PTHREAD_TRACE_OP_SETNAME;
pthreadTraceOperation_tag PTHREAD_TRACE_OP_SETPROP;
pthreadTraceOperation_tag PTHREAD_TRACE_OP_SETSCHED;
pthreadTraceOperation_tag PTHREAD_TRACE_OP_SIGINT;
pthreadTraceOperation_tag PTHREAD_TRACE_OP_SIGNAL;
pthreadTraceOperation_tag PTHREAD_TRACE_OP_SIGWAIT;
pthreadTraceOperation_tag PTHREAD_TRACE_OP_STACKHIGH;
pthreadTraceOperation_tag PTHREAD_TRACE_OP_START;
pthreadTraceOperation_tag PTHREAD_TRACE_OP_SUSPEND;
pthreadTraceOperation_tag PTHREAD_TRACE_OP_SYSTEM;
pthreadTraceOperation_tag PTHREAD_TRACE_OP_TERM;
pthreadTraceOperation_tag PTHREAD_TRACE_OP_UNBLOCK;
pthreadTraceOperation_tag PTHREAD_TRACE_OP_UNLOCK;
pthreadTraceOperation_tag PTHREAD_TRACE_OP_WAIT;
pthreadTraceOperation_tag PTHREAD_TRACE_OP_WRITE;
pthreadTraceOperation_tag PTHREAD_TRACE_OP_YIELD;
pthreadTraceForkCode_tag PTHREAD_TRACE_REINIT_CHILD;
pthreadTraceForkCode_tag PTHREAD_TRACE_REINIT_PARENT;
pthreadTraceForkCode_tag PTHREAD_TRACE_REINIT_PREPARE;
MACRO_PTHREAD_TRACE_RW PTHREAD_TRACE_RW_ERROR;
MACRO_PTHREAD_TRACE_RW PTHREAD_TRACE_RW_INTERNAL;
MACRO_PTHREAD_TRACE_RW PTHREAD_TRACE_RW_INVATTR;
MACRO_PTHREAD_TRACE_RW PTHREAD_TRACE_RW_NAME;
MACRO_PTHREAD_TRACE_RW PTHREAD_TRACE_RW_PSHARED;
pthreadTraceStatus_tag PTHREAD_TRACE_STAT_CANCEL;
pthreadTraceStatus_tag PTHREAD_TRACE_STAT_FAIL;
pthreadTraceStatus_tag PTHREAD_TRACE_STAT_MULTIPLE;
pthreadTraceStatus_tag PTHREAD_TRACE_STAT_NONBLOCK;
pthreadTraceStatus_tag PTHREAD_TRACE_STAT_PRIVATE;
pthreadTraceStatus_tag PTHREAD_TRACE_STAT_REQUEST;
pthreadTraceStatus_tag PTHREAD_TRACE_STAT_TIMED;
pthreadTraceStatus_tag PTHREAD_TRACE_STAT_USER;
MACRO_PTHREAD_TRACE_THD PTHREAD_TRACE_THD_DETACH;
MACRO_PTHREAD_TRACE_THD PTHREAD_TRACE_THD_ERROR;
MACRO_PTHREAD_TRACE_THD PTHREAD_TRACE_THD_ESTACKADDR;
MACRO_PTHREAD_TRACE_THD PTHREAD_TRACE_THD_INTERNAL;
MACRO_PTHREAD_TRACE_THD PTHREAD_TRACE_THD_INVATTR;
pthreadTraceThreadKind_tag PTHREAD_TRACE_THD_KIND_EXITHAND;
pthreadTraceThreadKind_tag PTHREAD_TRACE_THD_KIND_FOREIGN;
pthreadTraceThreadKind_tag PTHREAD_TRACE_THD_KIND_INITIAL;
pthreadTraceThreadKind_tag PTHREAD_TRACE_THD_KIND_MGR;
pthreadTraceThreadKind_tag PTHREAD_TRACE_THD_KIND_NORMAL;
pthreadTraceThreadKind_tag PTHREAD_TRACE_THD_KIND_NULL;
MACRO_PTHREAD_TRACE_THD PTHREAD_TRACE_THD_NAME;
MACRO_PTHREAD_TRACE_THD PTHREAD_TRACE_THD_STACKADDR;
MACRO_PTHREAD_TRACE_THD PTHREAD_TRACE_THD_SYS_SCOPE;
pthreadTraceType_tag PTHREAD_TRACE_TYPE_AID;
pthreadTraceType_tag PTHREAD_TRACE_TYPE_BINARY;
pthreadTraceType_tag PTHREAD_TRACE_TYPE_BLOCK_REASON;
pthreadTraceType_tag PTHREAD_TRACE_TYPE_BOOL;
pthreadTraceType_tag PTHREAD_TRACE_TYPE_CANCEL;
pthreadTraceType_tag PTHREAD_TRACE_TYPE_CHAR;
pthreadTraceType_tag PTHREAD_TRACE_TYPE_CINIT;
pthreadTraceType_tag PTHREAD_TRACE_TYPE_COND;
pthreadTraceType_tag PTHREAD_TRACE_TYPE_CONDID;
pthreadTraceType_tag PTHREAD_TRACE_TYPE_ENVIRONMENT;
pthreadTraceType_tag PTHREAD_TRACE_TYPE_ERRNO;
pthreadTraceType_tag PTHREAD_TRACE_TYPE_EXCADDR;
pthreadTraceType_tag PTHREAD_TRACE_TYPE_EXCNATIVE;
pthreadTraceType_tag PTHREAD_TRACE_TYPE_EXCSTAT;
pthreadTraceType_tag PTHREAD_TRACE_TYPE_INT;
pthreadTraceType_tag PTHREAD_TRACE_TYPE_JAVA_STACK;
pthreadTraceType_tag PTHREAD_TRACE_TYPE_KEY;
pthreadTraceType_tag PTHREAD_TRACE_TYPE_KINIT;
pthreadTraceType_tag PTHREAD_TRACE_TYPE_LABEL;
pthreadTraceType_tag PTHREAD_TRACE_TYPE_LINIT;
pthreadTraceType_tag PTHREAD_TRACE_TYPE_LOCK;
pthreadTraceType_tag PTHREAD_TRACE_TYPE_LOCKID;
pthreadTraceType_tag PTHREAD_TRACE_TYPE_LONG;
pthreadTraceType_tag PTHREAD_TRACE_TYPE_MAX;
pthreadTraceType_tag PTHREAD_TRACE_TYPE_MINIT;
pthreadTraceType_tag PTHREAD_TRACE_TYPE_MUTEX;
pthreadTraceType_tag PTHREAD_TRACE_TYPE_MUTEXID;
pthreadTraceType_tag PTHREAD_TRACE_TYPE_NAME;
pthreadTraceType_tag PTHREAD_TRACE_TYPE_OBJECT;
pthreadTraceType_tag PTHREAD_TRACE_TYPE_OPERATION;
pthreadTraceType_tag PTHREAD_TRACE_TYPE_POINTER;
pthreadTraceType_tag PTHREAD_TRACE_TYPE_SCHED;
pthreadTraceType_tag PTHREAD_TRACE_TYPE_SHORT;
pthreadTraceType_tag PTHREAD_TRACE_TYPE_STRING;
pthreadTraceType_tag PTHREAD_TRACE_TYPE_THDARG;
pthreadTraceType_tag PTHREAD_TRACE_TYPE_THREAD;
pthreadTraceType_tag PTHREAD_TRACE_TYPE_THREADID;
pthreadTraceType_tag PTHREAD_TRACE_TYPE_TIME;
pthreadTraceType_tag PTHREAD_TRACE_TYPE_TINIT;
pthreadTraceType_tag PTHREAD_TRACE_TYPE_UNUSED;
pthreadTraceType_tag PTHREAD_TRACE_TYPE_VP;
MACRO_PTHREAD_TRACE PTHREAD_TRACE_VERSION;
MACRO_PTYNOIOCTL PTYCCMSG;
MACRO_PTYNOIOCTL PTYDETACHED;
MACRO_PTYNOIOCTL PTYDETHUP;
MACRO_PTYNOIOCTL PTYHOLDSIG;
MACRO_PTYLBITS PTYLBITS;
MACRO_PTYLBITS PTYLMASK;
MACRO_PTYNOIOCTL PTYLOGGEDIN;
MACRO_PTYNOIOCTL PTYNEWSIG;
MACRO_PTYNOIOCTL PTYNOBLOCK;
MACRO_PTYNOIOCTL PTYNOIOCTL;
MACRO_PTYNOIOCTL PTYSIM;
MACRO_PT_TRACE PT_CONTINUE;
MACRO_PT PT_DYNAMIC;
MACRO_PT PT_HIPROC;
MACRO_PT PT_INTERP;
MACRO_PT_TRACE PT_KILL;
MACRO_PT PT_LOAD;
MACRO_PT PT_LOPROC;
MACRO_EF_MIPS PT_MIPS_REGINFO;
MACRO_PT_TRACE PT_NOSTEP;
MACRO_PT PT_NOTE;
MACRO_PT PT_NULL;
MACRO_EV_NUM PT_NUM;
MACRO_PT PT_PHDR;
MACRO_PT_TRACE PT_READ_D;
MACRO_PT_TRACE PT_READ_I;
MACRO_PT_TRACE PT_READ_U;
MACRO_PT PT_SHLIB;
MACRO_PT_TRACE PT_STEP;
MACRO_PT_TRACE PT_TRACE_ME;
MACRO_PT_TRACE PT_WRITE_D;
MACRO_PT_TRACE PT_WRITE_I;
MACRO_PT_TRACE PT_WRITE_U;
MACRO_PSWP PUSER;
MACRO_PSWP PVFS;
MACRO_P4 PVRE;
MACRO_PXG PV_DTYPE;
MACRO_P4 PW;
MACRO_PSWP PWAIT;
MACRO_PWDAUTHSRV PWDAUTHSRV;
MACRO_PWDAUTH PWDAUTH_PROG;
MACRO_PWDAUTH PWDAUTH_VERS;
MACRO_TEGC PWRMGR_CAPABLE;
MACRO_PW PW_ADMCHG;
MACRO_PW PW_ADMIN;
MACRO_PW_CRYPTLEN PW_CRYPTLEN;
MACRO_PW PW_NAMELEN;
MACRO_PW PW_NOCHECK;
MACRO_PW PW_PASSLEN;
MACRO_USPosition PWinGravity;
MACRO_PXG PXG_DTYPE;
MACRO_PX PX_DTYPE;
MACRO_PSWP PZERO;
MACRO_P_ACK P_ACK;
idtype P_ALL;
MACRO_P_STATUS P_BAD;
idtype P_CID;
MACRO_P_CONT P_CONT;
MACRO_CPU_MAX P_CORR_ERR;
MACRO_P_REG_WRITE P_DATA_READ;
MACRO_P_DATA P_DATA_WRITE;
MACRO_P_NAM P_END;
MACRO_P P_ENT;
MACRO_P_ACK P_ERROR;
MACRO_P_CONT P_EXIT;
idtype P_GID;
MACRO_P_INIT P_INIT;
MACRO_CPU_MAX P_MCHECK;
MACRO_FALSE P_MYID;
MACRO_P_NAM P_NAM;
MACRO_P_OFFLINE P_OFFLINE;
MACRO_P_OFFLINE P_ONLINE;
idtype P_PGID;
idtype P_PID;
idtype P_PPID;
MACRO_P_OFFLINE P_QUERY;
MACRO_P_REG P_REG_READ;
MACRO_P_REG_WRITE P_REG_WRITE;
MACRO_P_NAM P_SET;
MACRO_P_THREAD P_SET_PID;
idtype P_SID;
MACRO_P_STATUS P_STATUS;
MACRO_P_CONT P_STEP;
MACRO_P_DATA P_THREAD_CNT;
MACRO_P_THREAD P_THREAD_LIST;
idtype P_UID;
MACRO_None ParentRelative;
$0E64F95F8B8660ABA7845ADD323C20B1 PartialSuccess;
MACRO_PlaceOnTop PlaceOnBottom;
MACRO_PlaceOnTop PlaceOnTop;
MACRO_NoEventMask PointerMotionHintMask;
MACRO_NoEventMask PointerMotionMask;
MACRO_PointerRoot PointerRoot;
MACRO_PointerWindow PointerWindow;
MACRO_DontPreferBlanking PreferBlanking;
int ProcBadRequest();
int ProcessComposeSym(XComposeStatus *status, KeySym sym, ComposeRtrn *rtrn);
MACRO_PropModeReplace PropModeAppend;
MACRO_PropModeReplace PropModePrepend;
MACRO_PropModeReplace PropModeReplace;
MACRO_PropTypeString PropTypeSigned;
MACRO_PropTypeString PropTypeString;
MACRO_PropTypeString PropTypeUnsigned;
MACRO_NoEventMask PropertyChangeMask;
MACRO_PropertyNewValue PropertyDelete;
MACRO_PropertyNewValue PropertyNewValue;
MACRO_KeyPress PropertyNotify;
$0E64F95F8B8660ABA7845ADD323C20B1 ProtocolMismatch;
MACRO_KeyClass ProximityClass;
MACRO_Relative ProximityState;
MACRO_StaticGray PseudoColor;
MACRO_KbdFeedbackClass PtrFeedbackClass;
MACRO_QDSS QDSS;
MACRO_CONSOLE QDSS_DTYPE;
MACRO_QFIXEDSZ QFIXEDSZ;
MACRO_QSTS QSTS_GRP_QUOTA_EN;
MACRO_QSTS QSTS_GRP_QUOTA_MT;
MACRO_QSTS QSTS_LARGE_LIMITS;
MACRO_QSTS QSTS_QUOTA_ON;
MACRO_QSTS QSTS_USR_QUOTA_EN;
MACRO_QSTS QSTS_USR_QUOTA_MT;
MACRO_NULL_DEVICE QUADRATURE_DEVICE;
MACRO_QUALIFIED QUALIFIED_TOKEN;
$D44E3C4FF335410EC7120A246FFC2300 QUERY;
MACRO_QUOTA32 QUOTA32;
MACRO_QUOTA32 QUOTA32_MAX;
MACRO_QUOTA32 QUOTA64;
MACRO_QVSS QVSS;
MACRO_CONSOLE QVSS_DTYPE;
gqr_status Q_EPERM;
MACRO_Q Q_GETQUOTA;
MACRO_Q Q_GETQUOTA64;
gqr_status Q_NOQUOTA;
gqr_status Q_OK;
MACRO_Q Q_QUOTAINFO;
MACRO_Q Q_QUOTAOFF;
MACRO_Q Q_QUOTAON;
MACRO_Q Q_SETQUOTA;
MACRO_Q Q_SETQUOTA64;
MACRO_Q Q_SETUSE;
MACRO_Q Q_SETUSE64;
MACRO_Q Q_SYNC;
MACRO_QueuedAlready QueuedAfterFlush;
MACRO_QueuedAlready QueuedAfterReading;
MACRO_QueuedAlready QueuedAlready;
MACRO_D RADIXCHAR;
MACRO_PSSIZE RAMHIGH;
MACRO_PSSIZE RAMLOW;
MACRO_RAND RAND_MAX;
$F06844F2AC23AB95160E7EDF77DFD72F RAPI_ADSTYPE_Intserv;
$F06844F2AC23AB95160E7EDF77DFD72F RAPI_ADSTYPE_Simplified;
$F06844F2AC23AB95160E7EDF77DFD72F RAPI_EMPTY_OTYPE;
MACRO_RAPI_ERRF RAPI_ERRF_InPlace;
MACRO_RAPI_ERRF RAPI_ERRF_NotGuilty;
MACRO_RAPI_ERR RAPI_ERR_BADPROTO;
MACRO_RAPI_ERR RAPI_ERR_BADRECV;
MACRO_RAPI_ERR RAPI_ERR_BADSEND;
MACRO_RAPI_ERR RAPI_ERR_BADSID;
MACRO_RAPI_ERR RAPI_ERR_BADSPORT;
MACRO_RAPI_ERR RAPI_ERR_BADSTYLE;
MACRO_RAPI_ERR RAPI_ERR_BADVDPORT;
MACRO_RAPI_ERR RAPI_ERR_GPISESS;
MACRO_RAPI_ERR RAPI_ERR_GPI_CONFLICT;
MACRO_RAPI_ERR RAPI_ERR_INTSERV;
MACRO_RAPI_ERR RAPI_ERR_INVAL;
MACRO_RAPI_ERR_MAXERROR RAPI_ERR_MAXERROR;
MACRO_RAPI_ERR RAPI_ERR_MAXSESS;
MACRO_RAPI_ERR RAPI_ERR_MEMFULL;
MACRO_RAPI_ERR RAPI_ERR_NORSVP;
MACRO_RAPI_ERR RAPI_ERR_NOTSPEC;
MACRO_RAPI_ERR RAPI_ERR_N_FFS;
MACRO_RAPI_ERR RAPI_ERR_OBJLEN;
MACRO_RAPI_ERR RAPI_ERR_OBJTYPE;
MACRO_RAPI_ERR RAPI_ERR_OK;
MACRO_RAPI_ERR RAPI_ERR_OVERFLOW;
MACRO_RAPI_ERR RAPI_ERR_SYSCALL;
MACRO_RAPI_ERR RAPI_ERR_UNKNOWN;
MACRO_RAPI_ERR RAPI_ERR_UNSUPPORTED;
$F06844F2AC23AB95160E7EDF77DFD72F RAPI_FILTERFORM_BASE;
$F06844F2AC23AB95160E7EDF77DFD72F RAPI_FILTERFORM_BASE6;
$F06844F2AC23AB95160E7EDF77DFD72F RAPI_FILTERFORM_GPI;
$F06844F2AC23AB95160E7EDF77DFD72F RAPI_FILTERFORM_GPI6;
$F06844F2AC23AB95160E7EDF77DFD72F RAPI_FILTERFORM_RSVD1;
$F06844F2AC23AB95160E7EDF77DFD72F RAPI_FLOWSTYPE_Intserv;
$F06844F2AC23AB95160E7EDF77DFD72F RAPI_FLOWSTYPE_Simplified;
MACRO_RAPI_GPI RAPI_GPI_SESSION;
MACRO_RAPI_RSTYLE RAPI_NULL_SID;
$1DE54D510EDF3035FFC59F913B1ED7DD RAPI_PATH_ERROR;
$1DE54D510EDF3035FFC59F913B1ED7DD RAPI_PATH_EVENT;
$1DE54D510EDF3035FFC59F913B1ED7DD RAPI_PATH_STATUS;
$F32EAA3B37BA8577B56522F9C3DD088B RAPI_QOS_CNTR_LOAD;
$F32EAA3B37BA8577B56522F9C3DD088B RAPI_QOS_GUARANTEED;
$F32EAA3B37BA8577B56522F9C3DD088B RAPI_QOS_TSPEC;
MACRO_RAPI_GPI RAPI_REQ_CONFIRM;
$1DE54D510EDF3035FFC59F913B1ED7DD RAPI_RESV_CONFIRM;
$1DE54D510EDF3035FFC59F913B1ED7DD RAPI_RESV_ERROR;
$1DE54D510EDF3035FFC59F913B1ED7DD RAPI_RESV_EVENT;
$1DE54D510EDF3035FFC59F913B1ED7DD RAPI_RESV_STATUS;
$82A9E3393572D16D504BD2822273F634 RAPI_RSTYLE_FIXED;
MACRO_RAPI_RSTYLE RAPI_RSTYLE_MAX;
$82A9E3393572D16D504BD2822273F634 RAPI_RSTYLE_SE;
$82A9E3393572D16D504BD2822273F634 RAPI_RSTYLE_WILDCARD;
$F06844F2AC23AB95160E7EDF77DFD72F RAPI_TSPECTYPE_Intserv;
$F06844F2AC23AB95160E7EDF77DFD72F RAPI_TSPECTYPE_Simplified;
MACRO_RAPI_ERRF RAPI_USE_INTSERV;
MACRO_RAPI RAPI_VERSION;
MACRO_RAPI RAPI_XASPEC_FLG_BRK;
MACRO_RAPI RAPI_XASPEC_FLG_IGN;
MACRO_RAPI RAPI_XASPEC_FLG_PARM;
MACRO_ISO_SAP RARP_SAP;
MACRO_CRMOD RAW;
MACRO_RAWRCVQ RAWRCVQ;
MACRO_RAWSNDQ RAWSNDQ;
MACRO_FBOMAGIC RBOMAGIC;
MACRO_RB_KDB RB_ALTBOOT;
MACRO_RB RB_ASKNAME;
MACRO_RB RB_AUTOBOOT;
MACRO_RB_PANIC RB_BOOT;
MACRO_RB_KDB RB_DFLTROOT;
MACRO_RB_KDB RB_DUMP;
MACRO_RB_KDB RB_HALT;
MACRO_RB_KDB RB_INITNAME;
MACRO_RB_KDB RB_KDB;
MACRO_RB RB_NOSYNC;
MACRO_RB_PANIC RB_PANIC;
MACRO_RB_KDB RB_PARAM;
MACRO_RB_PANIC RB_POWERDOWN;
MACRO_RB RB_SINGLE;
MACRO_RB_KDB RB_UNIPROC;
char *RC;
MACRO_RCV_B7 RCV_B7_0;
MACRO_RCV_B7 RCV_B7_1;
MACRO_RCV_ERRORS RCV_ERRORS_END;
MACRO_RCV RCV_ERRORS_START;
MACRO_RCV_B7 RCV_EVNP;
MACRO_MSG_OPTION RCV_INTERRUPT;
MACRO_RCV_INTERRUPTED RCV_INTERRUPTED;
MACRO_RCV_INVALID RCV_INVALID_MEMORY;
MACRO_RCV_INVALID_PORT RCV_INVALID_PORT;
MACRO_RCV_NOT RCV_NOT_ENOUGH_MEMORY;
MACRO_MSG_OPTION RCV_NO_SENDERS;
MACRO_RCV_B7 RCV_ODDP;
MACRO_RCV_ONLY RCV_ONLY_SENDER;
MACRO_RCV_PORT RCV_PORT_CHANGE;
MACRO_RCV RCV_SUCCESS;
MACRO_RCV_TIMED RCV_TIMED_OUT;
MACRO_MSG_OPTION RCV_TIMEOUT;
MACRO_RCV_TOO RCV_TOO_LARGE;
MACRO_VDATA RDATA;
MACRO_RDTMAX RDTMAX;
MACRO_OPENMSG READDATA;
MACRO_REALTIMER REALTIMER_ABORT;
MACRO_REALTIMER REALTIMER_ACTIVE;
MACRO_REALTIMER REALTIMER_COE;
MACRO_REALTIMER REALTIMER_CPU;
MACRO_RECORD_LOWEST RECORD_LOWEST_MAJOR_VERSION;
MACRO_RECORD_LOWEST RECORD_LOWEST_MINOR_VERSION;
MACRO_RECORD RECORD_MAJOR_VERSION;
MACRO_RECORD RECORD_MINOR_VERSION;
MACRO_REC REC_EOF;
MACRO_REC REC_EOR;
MACRO_MODE REC_ESC;
MACRO_COLOR_MAP RED_SIGNATURE;
MACRO_REENTRANT REENTRANT;
MACRO_POINTER REFERENCE_TOKEN;
$D44E3C4FF335410EC7120A246FFC2300 REFUSE;
MACRO_REGLOCK REGLOCK;
MACRO_TVERSLEN REGTYPE;
MACRO_REG_NOMATCH REG_BADBR;
MACRO_REG_NOMATCH REG_BADPAT;
MACRO_REG_NOMATCH REG_BADRPT;
MACRO_REG_BASE REG_BASE;
MACRO_REG_NOMATCH REG_EBRACE;
MACRO_REG_NOMATCH REG_EBRACK;
MACRO_REG_NOMATCH REG_ECHAR;
MACRO_REG_NOMATCH REG_ECOLLATE;
MACRO_REG_NOMATCH REG_ECTYPE;
MACRO_REG_NOMATCH REG_EESCAPE;
MACRO_REG_NOMATCH REG_ENOSYS;
MACRO_REG_NOMATCH REG_EPAREN;
MACRO_REG_NOMATCH REG_ERANGE;
MACRO_REG_NOMATCH REG_ESPACE;
MACRO_REG_NOMATCH REG_ESUBREG;
MACRO_REG REG_EXTENDED;
MACRO_REG REG_ICASE;
MACRO_REG_NOMATCH REG_MPAREN;
MACRO_REG REG_NEWLINE;
MACRO_REG_NOMATCH REG_NOMATCH;
MACRO_REG REG_NOSUB;
MACRO_REG REG_NOTBOL;
MACRO_REG REG_NOTEOL;
MACRO_REG REG_WORD;
MACRO_F1 REMOVE;
msg_type REPLY;
MACRO_BUTTON1 REPORT_MOUSE_POSITION;
MACRO_REP REP_DEF_DECAY;
MACRO_REP REP_DEF_INITIAL_DELAY;
MACRO_REP_DEF REP_DEF_MINIMUM_DELAY;
MACRO_REP_DEF REP_DEF_REPEAT_DELAY;
$D44E3C4FF335410EC7120A246FFC2300 REQUEST;
MACRO_CHARMAP RESP_NL_LANGINFO;
MACRO_CHARMAP RESP_RESP_INIT;
MACRO_CHARMAP RESP_RPMATCH;
MACRO_RESUMEb RESUMEb;
MACRO_RES RES_AAONLY;
MACRO_RES RES_ALLOW_ALL;
MACRO_RES RES_DEBUG;
MACRO_RES_DEFAULT RES_DEFAULT;
MACRO_RES RES_DEFNAMES;
MACRO_RES_MEM RES_DMA;
MACRO_RES RES_DNSRCH;
MACRO_RES RES_IGNTC;
MACRO_RES RES_INIT;
MACRO_RES RES_INSECURE1;
MACRO_RES RES_INSECURE2;
MACRO_RES_MEM RES_IRQ;
MACRO_LOCALDOMAINPARTS RES_MAXNDOTS;
MACRO_RES_MEM RES_MEM;
MACRO_RES RES_NOALIASES;
MACRO_RES RES_NOSYSLOG;
MACRO_RES_MEM RES_PORT;
MACRO_RES_PRF RES_PRF_ADD;
MACRO_RES_PRF RES_PRF_ANS;
MACRO_RES_PRF RES_PRF_AUTH;
MACRO_RES_PRF RES_PRF_CLASS;
MACRO_RES_PRF RES_PRF_CMD;
MACRO_RES_PRF RES_PRF_HEAD1;
MACRO_RES_PRF RES_PRF_HEAD2;
MACRO_RES_PRF RES_PRF_HEADX;
MACRO_RES_PRF RES_PRF_INIT;
MACRO_RES_PRF RES_PRF_QUERY;
MACRO_RES_PRF RES_PRF_QUES;
MACRO_RES_PRF RES_PRF_REPLY;
MACRO_RES_DEFAULT RES_PRF_STATS;
MACRO_RES_PRF RES_PRF_TTLID;
MACRO_RES_PRF RES_PRF_UPDATE;
MACRO_RES RES_PRIMARY;
MACRO_RES RES_RECURSE;
MACRO_RES RES_STAYOPEN;
MACRO_LOCALDOMAINPARTS RES_TIMEOUT;
MACRO_RES RES_USEVC;
MACRO_ORDINARY RETURN;
MACRO_RETURNADDR RETURNADDR;
MACRO_RETURNOK RETURNOK;
MACRO_RET RET_ERROR;
MACRO_RET_SPECIAL RET_SPECIAL;
MACRO_RET RET_SUCCESS;
MACRO_REWIND REWIND_DEV;
MACRO_DLE REXMIT_TIME;
MACRO_REXPROC REXPROC_MODES;
MACRO_REXPROC REXPROC_NULL;
MACRO_REXPROC REXPROC_SIGNAL;
MACRO_REXPROC REXPROC_START;
MACRO_REXPROC REXPROC_WAIT;
MACRO_REXPROC REXPROC_WINCH;
MACRO_OTTYDISC REXPROG;
MACRO_REXVERS REXVERS;
MACRO_REX REX_INTERACTIVE;
MACRO_RE RE_DUP_MAX;
MACRO_RNORM RFILL;
MACRO_RFS3 RFS3_ACCESS;
MACRO_RFS3 RFS3_COMMIT;
MACRO_RFS3 RFS3_CREATE;
MACRO_RFS3 RFS3_DELPROPLIST;
MACRO_RFS3 RFS3_FSINFO;
MACRO_RFS3 RFS3_FSSTAT;
MACRO_RFS3 RFS3_GETATTR;
MACRO_RFS3 RFS3_GETPROPLIST;
MACRO_RFS3 RFS3_LINK;
MACRO_RFS3 RFS3_LOOKUP;
MACRO_RFS3 RFS3_MKDIR;
MACRO_RFS3 RFS3_MKNOD;
MACRO_RFS3 RFS3_NULL;
MACRO_RFS3 RFS3_NULLPROPLIST;
MACRO_RFS3 RFS3_PATHCONF;
MACRO_RFS3 RFS3_READ;
MACRO_RFS3 RFS3_READDIR;
MACRO_RFS3 RFS3_READDIRPLUS;
MACRO_RFS3 RFS3_READLINK;
MACRO_RFS3 RFS3_REMOVE;
MACRO_RFS3 RFS3_RENAME;
MACRO_RFS3 RFS3_RMDIR;
MACRO_RFS3 RFS3_SETATTR;
MACRO_RFS3 RFS3_SETPROPLIST;
MACRO_RFS3 RFS3_SYMLINK;
MACRO_RFS3 RFS3_WRITE;
MACRO_RFS RFS_CREATE;
MACRO_RFS RFS_DELPROPLIST;
MACRO_RFS RFS_GETATTR;
MACRO_RFS RFS_GETPROPLIST;
MACRO_RFS RFS_LINK;
MACRO_RFS RFS_LOOKUP;
MACRO_RFS RFS_MKDIR;
MACRO_RFS RFS_NPROC;
MACRO_RFS RFS_NULL;
MACRO_RFS RFS_NULLPROPLIST;
MACRO_RFS RFS_READ;
MACRO_RFS RFS_READDIR;
MACRO_RFS RFS_READLINK;
MACRO_RFS RFS_REMOVE;
MACRO_RFS RFS_RENAME;
MACRO_RFS RFS_RMDIR;
MACRO_RFS RFS_ROOT;
MACRO_RFS RFS_SETATTR;
MACRO_RFS RFS_SETPROPLIST;
MACRO_RFS RFS_STATFS;
MACRO_RFS RFS_SYMLINK;
MACRO_RFS RFS_WRITE;
MACRO_RFS RFS_WRITECACHE;
MACRO_NONE RGB;
MACRO_LFTORG RGTOLF;
MACRO_RHF RHF_BIND_NOW;
MACRO_RHF RHF_DEPTH_FIRST;
MACRO_RHF RHF_NONE;
MACRO_RHF RHF_NOTPOT;
MACRO_RHF RHF_NO_LIBRARY_REPLACEMENT;
MACRO_RHF RHF_NO_MOVE;
MACRO_RHF RHF_QUICKSTART;
MACRO_RHF RHF_RESERVED_SIGN_BIT;
MACRO_RHF RHF_RING_SEARCH;
MACRO_RHF RHF_TLS;
MACRO_RHF RHF_USE_31BIT_ADDRESSES;
MACRO_RIF RIF_HAVEROUTE;
MACRO_RIF RIF_NOROUTE;
MACRO_RIF RIF_NOTUSE;
MACRO_RIF RIF_ONRING;
MACRO_RIF RIF_REDISCOVER;
MACRO_RIF RIF_STALE;
MACRO_F1 RIGHT;
MACRO_TOP RIGHT_EDGE;
MACRO_F1 RIGHT_NPAD;
char *RIGHT_PARM;
MACRO_RIIndicator RIIndicator;
MACRO_RING RING_WAIT;
MACRO_RIPCMD RIPCMD_MAX;
MACRO_RIPCMD RIPCMD_REQUEST;
MACRO_RIPCMD RIPCMD_RESPONSE;
MACRO_RIPCMD RIPCMD_TRACEOFF;
MACRO_RIPCMD RIPCMD_TRACEON;
MACRO_RIPVERSION RIPVERSION;
MACRO_RLD RLD_VERSION;
MACRO_RLD_VERSION RLD_VERSION_2;
MACRO_RLD_VERSION RLD_VERSION_ONE_GOT;
MACRO_RLIMIT RLIMIT_AS;
MACRO_RLIMIT RLIMIT_CORE;
MACRO_RLIMIT RLIMIT_CPU;
MACRO_RLIMIT RLIMIT_DATA;
MACRO_RLIMIT RLIMIT_FSIZE;
MACRO_RLIMIT RLIMIT_NOFILE;
MACRO_RLIMIT RLIMIT_RSS;
MACRO_RLIMIT RLIMIT_STACK;
MACRO_RLIMIT_VMEM RLIMIT_VMEM;
MACRO_RLIMIT_VMEM RLIM_INFINITY;
MACRO_RLIM RLIM_NLIMITS;
MACRO_RNORM RMSGD;
MACRO_RNORM RMSGN;
MACRO_RNF RNF_ACTIVE;
MACRO_RNF RNF_NORMAL;
MACRO_RNF RNF_ROOT;
MACRO_DEL_0 RNM;
MACRO_RNORM RNORM;
MACRO_PSSIZE ROMHIGH;
MACRO_PSSIZE ROMLOW;
MACRO_RPAUSE RPAUSE_ALL;
MACRO_RPAUSE RPAUSE_DISABLE;
MACRO_RPAUSE RPAUSE_ENABLE;
MACRO_RPAUSE RPAUSE_SAME;
MACRO_RPCSMALLMSGSIZE RPCSMALLMSGSIZE;
MACRO_RPCTEST_VERSION RPCTEST_NULL_BATCH_PROC;
MACRO_RPCTEST_VERSION RPCTEST_NULL_PROC;
MACRO_RPCTEST RPCTEST_PROGRAM;
MACRO_RPCTEST_VERSION RPCTEST_VERSION;
MACRO_RPC_ANYSOCK RPC_ANYSOCK;
clnt_stat RPC_AUTHERROR;
clnt_stat RPC_CANTDECODEARGS;
clnt_stat RPC_CANTDECODERES;
clnt_stat RPC_CANTENCODEARGS;
clnt_stat RPC_CANTRECV;
clnt_stat RPC_CANTSEND;
clnt_stat RPC_FAILED;
clnt_stat RPC_INTR;
reject_stat RPC_MISMATCH;
MACRO_RPC_MSG RPC_MSG_VERSION;
clnt_stat RPC_PMAPFAILURE;
clnt_stat RPC_PROCUNAVAIL;
clnt_stat RPC_PROGNOTREGISTERED;
clnt_stat RPC_PROGUNAVAIL;
clnt_stat RPC_PROGVERSMISMATCH;
MACRO_RPC_MSG RPC_SERVICE_PORT;
clnt_stat RPC_SUCCESS;
clnt_stat RPC_SYSTEMERROR;
clnt_stat RPC_TIMEDOUT;
clnt_stat RPC_UNKNOWNHOST;
clnt_stat RPC_UNKNOWNPROTO;
clnt_stat RPC_VERSMISMATCH;
MACRO_RNORM RPROTCOMPRESS;
MACRO_RNORM RPROTDAT;
MACRO_RNORM RPROTDIS;
MACRO_RNORM RPROTNORM;
MACRO_RQUOTAPROC RQUOTAPROC_GETACTIVEQUOTA;
MACRO_RQUOTAPROC RQUOTAPROC_GETQUOTA;
MACRO_RQUOTAPROG RQUOTAPROG;
MACRO_RQUOTAVERS_0 RQUOTAVERS;
MACRO_RQUOTAVERS RQUOTAVERS_ORIG;
MACRO_QFIXEDSZ RRFIXEDSZ;
MACRO_RRIP_ER_DESC RRIP_ER_DESC_LEN;
MACRO_RRIP_ER RRIP_ER_IDENT_LEN;
MACRO_RRIP_ER_SRC RRIP_ER_SRC_LEN;
MACRO_RRIP_RR_LARGEST RRIP_ER_VERSION;
MACRO_RRIP_NM RRIP_NM_CONTINUE;
MACRO_RRIP_NM RRIP_NM_CURRENT;
MACRO_RRIP_NM RRIP_NM_HOST;
MACRO_RRIP_NM RRIP_NM_PARENT;
MACRO_RRIP_NM RRIP_NM_RSVD1;
MACRO_RRIP_NM RRIP_NM_RSVD2;
MACRO_RRIP_RR RRIP_RR_CL_PRESENT;
MACRO_RRIP_RR_LARGEST RRIP_RR_LARGEST;
MACRO_RRIP_RR RRIP_RR_NM_PRESENT;
MACRO_RRIP_RR RRIP_RR_PL_PRESENT;
MACRO_RRIP_RR RRIP_RR_PN_PRESENT;
MACRO_RRIP_RR RRIP_RR_PX_PRESENT;
MACRO_RRIP_RR RRIP_RR_RE_PRESENT;
MACRO_RRIP_RR RRIP_RR_SL_PRESENT;
MACRO_RRIP_RR RRIP_RR_TF_PRESENT;
MACRO_RRIP_SIG_CL RRIP_SIG_CL_0;
MACRO_RRIP_SIG_CL RRIP_SIG_CL_1;
MACRO_RRIP_SIG_SL RRIP_SIG_NM_0;
MACRO_RRIP_SIG_NM RRIP_SIG_NM_1;
MACRO_RRIP_SIG_CL RRIP_SIG_PL_0;
MACRO_RRIP_SIG_PL RRIP_SIG_PL_1;
MACRO_RRIP_SIG RRIP_SIG_PN_0;
MACRO_RRIP_SIG_PN RRIP_SIG_PN_1;
MACRO_RRIP RRIP_SIG_PX_0;
MACRO_RRIP RRIP_SIG_PX_1;
MACRO_RRIP_SIG_PL RRIP_SIG_RE_0;
MACRO_RRIP_SIG_RE RRIP_SIG_RE_1;
MACRO_RRIP_SIG_TF RRIP_SIG_RR_0;
MACRO_RRIP_SIG_RR RRIP_SIG_RR_1;
MACRO_RRIP_SIG_PN RRIP_SIG_SL_0;
MACRO_RRIP_SIG_SL RRIP_SIG_SL_1;
MACRO_RRIP_SIG_RE RRIP_SIG_TF_0;
MACRO_RRIP_SIG_TF RRIP_SIG_TF_1;
MACRO_RRIP_SLC RRIP_SLC_CONTINUE;
MACRO_RRIP_SLC RRIP_SLC_CURRENT;
MACRO_RRIP_SLC RRIP_SLC_HOST;
MACRO_RRIP_SLC RRIP_SLC_PARENT;
MACRO_RRIP_SLC RRIP_SLC_ROOT;
MACRO_RRIP_SLC RRIP_SLC_VOLROOT;
MACRO_RRIP_SL RRIP_SL_CONTINUE;
MACRO_RRIP_TF RRIP_TF_ACCESS;
MACRO_RRIP_TF RRIP_TF_ATTRIBUTES;
MACRO_RRIP_TF RRIP_TF_BACKUP;
MACRO_RRIP_TF RRIP_TF_CREATION;
MACRO_RRIP_TF RRIP_TF_EFFECTIVE;
MACRO_RRIP_TF RRIP_TF_EXPIRATION;
MACRO_RRIP_TF RRIP_TF_LONG_FORM;
MACRO_RRIP_TF RRIP_TF_MODIFY;
MACRO_RRQ RRQ;
MACRO_RSTATPROC RSTATPROC_HAVEDISK;
MACRO_RSTATPROC RSTATPROC_STATS;
MACRO_CP RSTATPROG;
MACRO_RSTATVERS RSTATVERS_SWTCH;
MACRO_RSTATPROC RSTATVERS_TIME;
MACRO_RSTATPROC RSTATVERS_VAR;
MACRO_RSVP RSVP_Err_ADMISSION;
MACRO_RSVP RSVP_Err_API_ERROR;
MACRO_RSVP RSVP_Err_BAD_DSTPORT;
MACRO_RSVP RSVP_Err_BAD_SNDPORT;
MACRO_RSVP RSVP_Err_BAD_STYLE;
MACRO_RSVP_Err RSVP_Err_MAXERROR;
MACRO_RSVP RSVP_Err_NONE;
MACRO_RSVP RSVP_Err_NO_PATH;
MACRO_RSVP RSVP_Err_NO_SENDER;
MACRO_RSVP RSVP_Err_POLICY;
MACRO_RSVP RSVP_Err_PREEMPTED;
MACRO_RSVP RSVP_Err_RSVP_STS_ERROR;
MACRO_RSVP RSVP_Err_TC_ERROR;
MACRO_RSVP RSVP_Err_TC_SYS_ERROR;
MACRO_RSVP RSVP_Err_UNKNOWN_CTYPE;
MACRO_RSVP RSVP_Err_UNKNOWN_STYLE;
MACRO_RSVP RSVP_Err_UNKN_OBJ_CLASS;
MACRO_RS RS_HIPRI;
MACRO_RTA RTA_AUTHOR;
MACRO_RTA RTA_BITMAP;
MACRO_RTA RTA_BRD;
MACRO_RTA RTA_DST;
MACRO_RTA RTA_GATEWAY;
MACRO_RTA RTA_GENMASK;
MACRO_RTA RTA_IFA;
MACRO_RTA RTA_IFP;
MACRO_RTA RTA_NETMASK;
MACRO_RTA RTA_OLDGATEWAY;
MACRO_RTA RTA_OLDIFINDEX;
MACRO_RTA RTA_PRECEDENCE;
MACRO_RTA RTA_SRC;
MACRO_RTF RTF_ALLROUTES;
MACRO_RTF RTF_ALL_USE_SHARED_TREE;
MACRO_RTF RTF_BLACKHOLE;
MACRO_RTF RTF_BOGUSGW;
MACRO_RTF RTF_CLONING;
MACRO_RTF RTF_CLUALIAS;
MACRO_RTF RTF_DONE;
MACRO_RTF RTF_DYNAMIC;
MACRO_RTF RTF_GATEWAY;
MACRO_RTF RTF_HOST;
MACRO_RTF RTF_LLINFO;
MACRO_RTF RTF_LOOPBACK;
MACRO_RTF RTF_MASK;
MACRO_RTF RTF_MODIFIED;
MACRO_RTF RTF_NOT_MROUTING;
MACRO_RTF RTF_PROTO1;
MACRO_RTF RTF_PROTO2;
MACRO_RTF RTF_PROTO3;
MACRO_RTF RTF_REJECT;
MACRO_RTF RTF_SND_USES_SHARED_TREE;
MACRO_RTF RTF_STATIC;
MACRO_RTF RTF_UP;
MACRO_RTF RTF_WASCLONED;
MACRO_RTF RTF_XRESOLVE;
MACRO_RTLD RTLD_GLOBAL;
MACRO_RTLD RTLD_LAZY;
MACRO_RTLD RTLD_LOCAL;
MACRO_RTLD RTLD_NEXT;
MACRO_RTLD RTLD_NOW;
MACRO_RTLOCK RTLOCK_LOCKED;
MACRO_RTLOCK RTLOCK_UNLOCKED;
MACRO_RTM_VERSION RTM_ADD;
MACRO_RTM_DELETE RTM_CHANGE;
MACRO_RTM_DELETE RTM_CONFIRM;
MACRO_RTM_DELETE RTM_DELADDR;
MACRO_RTM_DELETE RTM_DELETE;
MACRO_RTM_DELETE RTM_GET;
MACRO_RTM_DELETE RTM_IFINFO;
MACRO_RTM_DELETE RTM_LOCK;
MACRO_RTM_DELETE RTM_LOSING;
MACRO_RTM_DELETE RTM_MC_ADD;
MACRO_RTM_DELETE RTM_MC_CHANGE;
MACRO_RTM_DELETE RTM_MC_DELETE;
MACRO_RTM_DELETE RTM_MISS;
MACRO_RTM_DELETE RTM_NEWADDR;
MACRO_RTM_DELETE RTM_OLDADD;
MACRO_RTM_DELETE RTM_OLDDEL;
MACRO_RTM_DELETE RTM_REDIRECT;
MACRO_RTM_DELETE RTM_RESOLVE;
MACRO_RTM RTM_RTTUNIT;
MACRO_RTM_VERSION RTM_VERSION;
MACRO_RTM_DELETE RTM_VIFINFO;
MACRO_RTSIG RTSIG_MAX;
MACRO_RT_SCHED_HIST RTS_HIST_SIZE;
MACRO_RTS RTS_ast;
MACRO_RTS RTS_astcsw;
MACRO_RTS RTS_autonice;
MACRO_RTS_preempt RTS_await;
MACRO_RTS_preempt RTS_block;
MACRO_RTS RTS_catchall;
MACRO_RTS RTS_donice;
MACRO_RTS_rrqsave1 RTS_exec;
MACRO_RTS_rqmask RTS_fork;
MACRO_RTS RTS_getprio;
MACRO_RTS RTS_getscheduler;
MACRO_RTS RTS_kill;
MACRO_RTS_rqmask RTS_max_priority;
MACRO_RTS_rqmask RTS_policy;
MACRO_RTS_preempt RTS_preempt;
MACRO_RTS_rqmask RTS_priority;
MACRO_RTS_rqmask RTS_pth_getprio;
MACRO_RTS_rqmask RTS_pth_getscheduler;
MACRO_RTS_rqmask RTS_pth_setprio;
MACRO_RTS_rqmask RTS_pth_setscheduler;
MACRO_RTS_rqmask RTS_pth_yield;
MACRO_RTS_rrqsave3 RTS_remq;
MACRO_RTS_rrqsave1 RTS_rqempty1;
MACRO_RTS_rqempty2 RTS_rqempty2;
MACRO_RTS_rqempty2 RTS_rqempty3;
MACRO_RTS_rqempty4 RTS_rqempty4;
MACRO_RTS RTS_rqempty5;
MACRO_RTS_rqempty2 RTS_rqinvalid;
MACRO_RTS_rqempty2 RTS_rqlow;
MACRO_RTS_rqmask RTS_rqmask;
MACRO_RTS_preempt RTS_rrqexp;
MACRO_RTS_rrqsave1 RTS_rrqrest1;
MACRO_RTS_rrqsave1 RTS_rrqrest2;
MACRO_RTS_rqempty2 RTS_rrqrest3;
MACRO_RTS_rrqsave1 RTS_rrqsave1;
MACRO_RTS_rrqsave1 RTS_rrqsave2;
MACRO_RTS_rrqsave3 RTS_rrqsave3;
MACRO_RTS_rrqsave3 RTS_rrqsave4;
MACRO_RTS_tspreempt RTS_rrqsave5;
MACRO_RTS_rrqsave1 RTS_run;
MACRO_RTS RTS_setprio;
MACRO_RTS_tohead2 RTS_setrun;
MACRO_RTS RTS_setscheduler;
MACRO_RTS RTS_shutdown;
MACRO_RTS_preempt RTS_sig;
MACRO_RTS_rqmask RTS_swapin;
MACRO_RTS_rqmask RTS_swapout;
MACRO_RTS RTS_thast;
MACRO_RTS_tohead1 RTS_tohead1;
MACRO_RTS_tohead2 RTS_tohead2;
MACRO_RTS_rrqsave1 RTS_totail1;
MACRO_RTS_tohead1 RTS_totail2;
MACRO_RTS_tspreempt RTS_tspreempt;
MACRO_RTS_preempt RTS_tsswitch;
MACRO_RTS_preempt RTS_wake;
MACRO_RTS RTS_yield;
MACRO_RTV11 RTV11;
MACRO_RTV RTV_EXPIRE;
MACRO_RTV RTV_HOPCOUNT;
MACRO_RTV RTV_MTU;
MACRO_RTV RTV_RPIPE;
MACRO_RTV RTV_RTT;
MACRO_RTV RTV_RTTVAR;
MACRO_RTV RTV_SPIPE;
MACRO_RTV RTV_SSTHRESH;
MACRO_RT RT_HAB_NO;
MACRO_RT_NOCHANGE RT_NOCHANGE;
MACRO_RT_SCHED_CTRL RT_SCHED_CTRL_COUNTERS;
MACRO_RT_SCHED_CTRL_POLICY RT_SCHED_CTRL_DEFAULT;
MACRO_RT_SCHED_CTRL RT_SCHED_CTRL_HISTORY;
MACRO_RT_SCHED_CTRL RT_SCHED_CTRL_MERGE;
MACRO_RT_SCHED_CTRL_POLICY RT_SCHED_CTRL_POLICY_ALL;
MACRO_RT_SCHED_CTRL_POLICY RT_SCHED_CTRL_POLICY_FIFO;
MACRO_RT_SCHED_CTRL_POLICY RT_SCHED_CTRL_POLICY_FIXED;
MACRO_RT_SCHED_CTRL_POLICY RT_SCHED_CTRL_POLICY_FIXEDPRI;
MACRO_RT_SCHED_CTRL_POLICY RT_SCHED_CTRL_POLICY_RR;
MACRO_RT_SCHED_CTRL_POLICY RT_SCHED_CTRL_POLICY_RT;
MACRO_RT_SCHED_CTRL RT_SCHED_CTRL_POLICY_TIMESHARE;
MACRO_RT_SCHED_HIST RT_SCHED_HIST_EVTS;
MACRO_RT_SCHED RT_SCHED_MON;
MACRO_RT_TQDEF RT_TQDEF;
MACRO_RT_TQINF RT_TQINF;
MACRO_RUN RUN_AT_INSTALLED;
MACRO_RUN RUN_BELOW_INSTALLED;
MACRO_EMPTY RUN_LVL;
MACRO_RUN_UNKNOWN RUN_UNKNOWN;
MACRO_RUSAGE_CHILDREN RUSAGE_CHILDREN;
MACRO_RUSAGE RUSAGE_SELF;
MACRO_RUSAGE RUSAGE_THREAD;
MACRO_RWS RWS_BLOCK_SIZE_SHIFT;
MACRO_R_V0 R_A0;
MACRO_R_V0 R_A1;
MACRO_R_V0 R_A2;
MACRO_R_V0 R_A3;
MACRO_R_V0 R_A4;
MACRO_R_V0 R_A5;
MACRO_R_ABS R_ABS;
MACRO_R R_ACC;
MACRO_R_ABS R_BRADDR;
MACRO_R_CURSOR R_CURSOR;
MACRO_R_DUP R_DUP;
MACRO_R_R0 R_EPC;
MACRO_R_R0 R_F0;
MACRO_R_R0 R_F1;
MACRO_R_R0 R_F10;
MACRO_R_R0 R_F11;
MACRO_R_R0 R_F12;
MACRO_R_R0 R_F13;
MACRO_R_R0 R_F14;
MACRO_R_R0 R_F15;
MACRO_R_R0 R_F16;
MACRO_R_R0 R_F17;
MACRO_R_R0 R_F18;
MACRO_R_R0 R_F19;
MACRO_R_R0 R_F2;
MACRO_R_R0 R_F20;
MACRO_R_R0 R_F21;
MACRO_R_R0 R_F22;
MACRO_R_R0 R_F23;
MACRO_R_R0 R_F24;
MACRO_R_R0 R_F25;
MACRO_R_R0 R_F26;
MACRO_R_R0 R_F27;
MACRO_R_R0 R_F28;
MACRO_R_R0 R_F29;
MACRO_R_R0 R_F3;
MACRO_R_R0 R_F30;
MACRO_R_R0 R_F31;
MACRO_R_R0 R_F4;
MACRO_R_R0 R_F5;
MACRO_R_R0 R_F6;
MACRO_R_R0 R_F7;
MACRO_R_R0 R_F8;
MACRO_R_R0 R_F9;
MACRO_R_CURSOR R_FIRST;
MACRO_R_FIXEDLEN R_FIXEDLEN;
MACRO_R_ABS R_GPDISP;
MACRO_R_ABS R_GPREL32;
MACRO_R_ABS R_GPRELHIGH;
MACRO_R_ABS R_GPRELLOW;
MACRO_R_ABS R_GPVALUE;
MACRO_R_ABS R_HINT;
MACRO_R_CURSOR R_IAFTER;
MACRO_R_CURSOR R_IBEFORE;
MACRO_R_ABS R_IMMED;
MACRO_R_IMMED R_IMMED_BR_HI32;
MACRO_R_IMMED R_IMMED_GP_16;
MACRO_R_IMMED R_IMMED_GP_HI32;
MACRO_R_IMMED R_IMMED_LO32;
MACRO_R_IMMED R_IMMED_SCN_HI32;
MACRO_R_CURSOR R_LAST;
MACRO_R_ABS R_LITERAL;
MACRO_R_ABS R_LITUSE;
MACRO_R_LU R_LU_BASE;
MACRO_R_LU R_LU_BYTOFF;
MACRO_R_LU R_LU_JSR;
MACRO_R_MIPS R_MIPS_32;
MACRO_R_MIPS R_MIPS_64;
MACRO_R_MIPS R_MIPS_BRADDR;
MACRO_R_MIPS R_MIPS_GPDISP;
MACRO_R_MIPS R_MIPS_GPREL32;
MACRO_R_MIPS R_MIPS_HINT;
MACRO_R_MIPS R_MIPS_LITERAL;
MACRO_R_MIPS R_MIPS_LITUSE;
MACRO_R_MIPS R_MIPS_NONE;
MACRO_R_CURSOR R_NEXT;
MACRO_R_FIXEDLEN R_NOKEY;
MACRO_R_CURSOR R_NOOVERWRITE;
MACRO_F_OK R_OK;
MACRO_R_ABS R_OP_PRSHIFT;
MACRO_R_ABS R_OP_PSUB;
MACRO_R_ABS R_OP_PUSH;
MACRO_R_ABS R_OP_STORE;
MACRO_R_CURSOR R_PREV;
MACRO_R_R0 R_PS;
MACRO_R_R0 R_R0;
MACRO_R_R0 R_R1;
MACRO_R_R0 R_R10;
MACRO_R_R0 R_R11;
MACRO_R_R0 R_R12;
MACRO_R_R0 R_R13;
MACRO_R_R0 R_R14;
MACRO_R_R0 R_R15;
MACRO_R_R0 R_R16;
MACRO_R_R0 R_R17;
MACRO_R_R0 R_R18;
MACRO_R_R0 R_R19;
MACRO_R_R0 R_R2;
MACRO_R_R0 R_R20;
MACRO_R_R0 R_R21;
MACRO_R_R0 R_R22;
MACRO_R_R0 R_R23;
MACRO_R_R0 R_R24;
MACRO_R_R0 R_R25;
MACRO_R_R0 R_R26;
MACRO_R_R0 R_R27;
MACRO_R_R0 R_R28;
MACRO_R_R0 R_R29;
MACRO_R_R0 R_R3;
MACRO_R_R0 R_R30;
MACRO_R_R0 R_R31;
MACRO_R_R0 R_R4;
MACRO_R_R0 R_R5;
MACRO_R_R0 R_R6;
MACRO_R_R0 R_R7;
MACRO_R_R0 R_R8;
MACRO_R_R0 R_R9;
MACRO_R_CURSOR R_RECNOSYNC;
MACRO_R_ABS R_REFLONG;
MACRO_R_ABS R_REFQUAD;
MACRO_R_CURSOR R_SETCURSOR;
MACRO_R_FIXEDLEN R_SNAPSHOT;
MACRO_R_SN R_SN_ABS;
MACRO_R_SN R_SN_BSS;
MACRO_R_SN R_SN_DATA;
MACRO_R_SN R_SN_FINI;
MACRO_R_SN R_SN_INIT;
MACRO_R_SN R_SN_LIT4;
MACRO_R_SN R_SN_LIT8;
MACRO_R_SN R_SN_LITA;
MACRO_R_SN R_SN_NULL;
MACRO_R_SN R_SN_PDATA;
MACRO_R_SN R_SN_RCONST;
MACRO_R_SN R_SN_RDATA;
MACRO_R_SN R_SN_SBSS;
MACRO_R_SN R_SN_SDATA;
MACRO_R_SN R_SN_TEXT;
MACRO_R_SN R_SN_TLSBSS;
MACRO_R_SN R_SN_TLSDATA;
MACRO_R_SN R_SN_TLSINIT;
MACRO_R_SN R_SN_XDATA;
MACRO_R_V0 R_SP;
MACRO_R_R0 R_SR;
MACRO_R_ABS R_SREL16;
MACRO_R_ABS R_SREL32;
MACRO_R_ABS R_SREL64;
MACRO_R_ABS R_TLS_HIGH;
MACRO_R_ABS R_TLS_LITERAL;
MACRO_R_ABS R_TLS_LOW;
MACRO_R_V0 R_V0;
MACRO_RaiseLowest RaiseLowest;
MACRO_RecordMaxCoreRequest RecordMaxCoreRequest;
MACRO_RecordMinDeviceEvent RecordMaxDeviceEvent;
MACRO_RecordMinDeviceEvent RecordMaxError;
MACRO_RecordMaxEvent RecordMaxEvent;
MACRO_RecordMaxCoreRequest RecordMaxExtRequest;
MACRO_RecordMinDeviceEvent RecordMinDeviceEvent;
MACRO_RecordMinExtRequest RecordMinExtRequest;
MACRO_RecordNumErrors RecordNumErrors;
MACRO_RecordNumEvents RecordNumEvents;
MACRO_RectObjIndex RectObjIndex;
MACRO_RectangleOut RectangleIn;
MACRO_RectangleOut RectangleOut;
MACRO_RectangleOut RectanglePart;
MACRO_Relative Relative;
MACRO_ReleaseByFreeingColormap ReleaseByFreeingColormap;
MACRO_KeyPress ReparentNotify;
MACRO_AsyncPointer ReplayKeyboard;
MACRO_AsyncPointer ReplayPointer;
MACRO_AsyncThisDevice ReplayThisDevice;
char *ReserveOutBuf();
void ResetComposeStatus(XComposeStatus *status);
MACRO_NoEventMask ResizeRedirectMask;
MACRO_KeyPress ResizeRequest;
MACRO_DestroyAll RetainPermanent;
MACRO_DestroyAll RetainTemporary;
MACRO_RevertToFollowKeyboard RevertToFollowKeyboard;
MACRO_RevertToNone RevertToNone;
MACRO_RevertToNone RevertToParent;
MACRO_RevertToNone RevertToPointerRoot;
MACRO_LeftToRightDrawDirection RightToLeftDrawDirection;
void RingBell(Widget w, XEvent *event, String *params, Cardinal *num_params);
void RtlUnwindRfp(void *TargetRealFrame, void *TargetIp, system_exrec_type *exceptionRecord, __int64 returnValue);
exc_address RtlVirtualUnwind(exc_address controlpc, PRUNTIME_FUNCTION prf, PCONTEXT pcontext, PCONTEXT_POINTERS ppointers);
MACRO_SLOAD S1170;
MACRO_SADF SADF_CLONE;
MACRO_SADF SADF_DEVICE;
MACRO_SADF SADF_MODULE;
MACRO_MAXAPUSH SAD_GAP;
MACRO_MAXAPUSH SAD_SAP;
MACRO_MAXAPUSH SAD_VML;
MACRO_SLOAD SAIO;
MACRO_SAP SAP_ALL;
MACRO_SAP SAP_CLEAR;
MACRO_SAP SAP_ONE;
MACRO_SAP SAP_RANGE;
MACRO_SARMAG SARMAG;
MACRO_CURRENT SAVED_VALUES;
MACRO_SA_ONSTACK SA_CLDNOTIFY;
MACRO_SA_INPUT SA_DROP;
MACRO_SA_INPUT SA_INPUT;
MACRO_SIG_BLOCK SA_NOCLDSTOP;
MACRO_SA_ONSTACK SA_NOCLDWAIT;
MACRO_SA_ONSTACK SA_NODEFER;
MACRO_SA_ONSTACK SA_ONSTACK;
MACRO_SA_INPUT SA_OUTPUT;
MACRO_SA_ONSTACK SA_RESETHAND;
MACRO_SA_INPUT SA_RESPOND;
MACRO_SA_ONSTACK SA_RESTART;
MACRO_SA SA_SIGINFO;
MACRO_SA_INPUT SA_USER;
MACRO_SBI SBI_ALERT;
MACRO_SBI SBI_CRDRDS;
MACRO_SBI SBI_FAULT;
MACRO_SBI SBI_SILOC;
MACRO_SBI SBI_TIMEO;
MACRO_SB_WANT SB_ASYNC;
MACRO_SB_CODESET SB_CODESET;
MACRO_SB_WANT SB_COLL;
MACRO_SB_WANT SB_DBMAX_DEF;
MACRO_SB_WANT SB_INHERIT;
MACRO_SB_MAX SB_LOCK;
MACRO_SB_MAX SB_MAX;
MACRO_SB_WANT SB_NOINTR;
MACRO_SB_WANT SB_NOTIFY;
MACRO_SB_WANT SB_SEL;
MACRO_SB_WANT SB_SET_LOWAT;
MACRO_SB_WANT SB_WAIT;
MACRO_SB_WANT SB_WAITING;
MACRO_SB_WANT SB_WAKEONE;
MACRO_SB_WANT SB_WANT;
MACRO_SB_WANT SB_WIRE;
char *SC;
MACRO_SCHAR SCHAR_MAX;
MACRO_CHAR SCHAR_MIN;
MACRO_SCHEDMON SCHEDMON_CLR_CTRL;
MACRO_SCHEDMON SCHEDMON_GET_COUNTS;
MACRO_SCHEDMON SCHEDMON_GET_CTRL;
MACRO_SCHEDMON SCHEDMON_GET_HISTORY;
MACRO_SCHEDMON SCHEDMON_SET_CTRL;
MACRO_SCHED_FG SCHED_BG_NP;
MACRO_SCHED_FG SCHED_FG_NP;
MACRO_SCHED SCHED_FIFO;
MACRO_SCHED_FG SCHED_LFI_NP;
MACRO_SCHED_FG SCHED_LRR_NP;
MACRO_SCHED SCHED_OTHER;
MACRO_SCHED_PRIO_BG SCHED_PRIO_BG_MAX;
MACRO_SCHED_PRIO_LFI SCHED_PRIO_LFI_MAX;
MACRO_SCHED_PRIO_LRR SCHED_PRIO_LRR_MAX;
MACRO__SCHED_MIN SCHED_PRIO_RT_MAX;
MACRO_SCHED_PRIO SCHED_PRIO_RT_MIN;
MACRO_SCHED_PRIO SCHED_PRIO_SYSTEM_MAX;
MACRO_SCHED_PRIO_SYSTEM SCHED_PRIO_SYSTEM_MIN;
MACRO_SCHED_PRIO_USER SCHED_PRIO_USER_MAX;
MACRO_SCHED_PRIO_USER SCHED_PRIO_USER_MIN;
MACRO_SCHED SCHED_RR;
MACRO_SCM SCM_RIGHTS;
MACRO_SCNTEXT SCNDATA;
MACRO_SCNTEXT SCNOVFL;
MACRO_SCNTEXT SCNREGS;
MACRO_SCNTEXT SCNRGN;
MACRO_SCNROUND SCNROUND;
MACRO_SCNTEXT SCNSTACK;
MACRO_SCNTEXT SCNTEXT;
MACRO_SSEEK SCOM;
MACRO_SLOAD SCONTIGN;
MACRO_SCREENMODE SCREENMODE_NOCHANGE;
MACRO_SCREENMODE SCREENMODE_OFF;
MACRO_SCREENMODE SCREENMODE_ON;
MACRO_SCREEN SCREEN_ACCEPT;
MACRO_SCREEN_PROXY SCREEN_CACHE;
MACRO_SCREEN SCREEN_DROP;
MACRO_SCREEN_MAXLEN SCREEN_MAXLEN;
MACRO_SCREEN_NOTIFY SCREEN_NONOTIFY;
MACRO_SCREEN_NOTIFY SCREEN_NOTIFY;
MACRO_SCREEN_OFF SCREEN_OFF;
MACRO_SCREEN_OFF SCREEN_ON;
MACRO_SCREEN_PROXY SCREEN_PROXY;
MACRO_SCSIBUS SCSIBUS_CMD_REORDER;
MACRO_SCSIBUS SCSIBUS_NO_DISCON;
MACRO_SCSIBUS SCSIBUS_SYNC_XFR;
MACRO_SCSIBUS SCSIBUS_WIDE_16;
MACRO_SCSI SCSI_ALLOW_REMOVAL;
MACRO_SCSI SCSI_PREVENT_REMOVAL;
MACRO_SCSI SCSI_START_UNIT;
MACRO_SCSI SCSI_STOP_UNIT;
MACRO_SCS SCS_START_SYSAPS;
MACRO_SLOAD SCTTY;
MACRO_SC_NOSENSE SC_ABORTEDCMD;
MACRO_SC_ADD SC_ADD;
MACRO_SC_NOSENSE SC_BLANKCHK;
MACRO_SC SC_CCP_OPEN;
MACRO_SC SC_CCP_UP;
MACRO_SC SC_COMP_AC;
MACRO_SC SC_COMP_PROT;
MACRO_SC_TIMEOUT SC_COMP_RUN;
MACRO_SC SC_COMP_TCP;
MACRO_SC_NOSENSE SC_COPYABORTD;
MACRO_SC_NOSENSE SC_DATAPROTECT;
MACRO_SC_TIMEOUT SC_DC_ERROR;
MACRO_SC_TIMEOUT SC_DC_FERROR;
MACRO_SC SC_DEBUG;
MACRO_SC_TIMEOUT SC_DECOMP_RUN;
MACRO_SC_NOSENSE SC_EQUAL;
MACRO_SC_TIMEOUT SC_ESCAPED;
MACRO_SC_TIMEOUT SC_FLUSH;
MACRO_SC_ADD SC_GETNSWP;
MACRO_SC_NOSENSE SC_HARDWARE;
MACRO_SC_NOSENSE SC_ILLEGALREQ;
MACRO_SC_ADD SC_LIST;
MACRO_SC SC_LOG_FLUSH;
MACRO_SC SC_LOG_INPKT;
MACRO_SC SC_LOG_OUTPKT;
MACRO_SC SC_LOG_RAWIN;
MACRO_SC SC_MASK;
MACRO_SC_NOSENSE SC_MEDIUMERR;
MACRO_SC_NOSENSE SC_MISCOMPARE;
MACRO_SC_NOSENSE SC_NOSENSE;
MACRO_SC_NOSENSE SC_NOTREADY;
MACRO_SC SC_NO_TCP_CCID;
MACRO_SC_TIMEOUT SC_PKTLOST;
MACRO_SC SC_RCV_B7_0;
MACRO_SC SC_RCV_B7_1;
MACRO_SC SC_RCV_EVNP;
MACRO_SC SC_RCV_ODDP;
MACRO_SC_NOSENSE SC_RECOVERR;
MACRO_SC SC_REJ_COMP_AC;
MACRO_SC SC_REJ_COMP_TCP;
MACRO_SC_ADD SC_REMOVE;
MACRO_SC_NOSENSE SC_RESERVED;
MACRO_SC_TIMEOUT SC_TBUSY;
MACRO_SC_TIMEOUT SC_TIMEOUT;
MACRO_SC_NOSENSE SC_UNITATTEN;
MACRO_SC_TIMEOUT SC_VJ_RESET;
MACRO_SC_NOSENSE SC_VNDRUNIQUE;
MACRO_SC_NOSENSE SC_VOLUMEOVFL;
MACRO_VDATA SDATA;
MACRO_SDF SDF_COTS;
MACRO_SDF SDF_PROXY;
MACRO_SDF SDF_UICPROXY;
MACRO_SDF SDF_V3;
MACRO_SDF SDF_WILD;
char *SE;
MACRO_TEGC SECONDARY_CACHE_SIZE;
MACRO_DAYSPERWEEK SECSPERDAY;
MACRO_DAYSPERWEEK SECSPERHOUR;
MACRO_TZ_MAX_LEAPS SECSPERMIN;
MACRO_DAYS SECS_PER_DAY;
MACRO_DAYS SECS_PER_HOUR;
MACRO_SECS SECS_PER_MIN;
MACRO_SECURITY SECURITY_MAJOR_VERSION;
MACRO_SECURITY SECURITY_MINOR_VERSION;
MACRO_SEC_WILDCARD SEC_ACTUAL_TAG;
MACRO_SEC_MAXIMUM SEC_BASE_PRIV;
MACRO_SEC_BSD SEC_BSD;
MACRO_SEC_STOPIO SEC_CHPRIVSYS;
SEC_CONF_bits SEC_CONF_acl_posix;
SEC_CONF_bits SEC_CONF_acl_sware;
SEC_CONF_bits SEC_CONF_base;
SEC_CONF_bits SEC_CONF_cmw;
SEC_CONF_bits SEC_CONF_groups;
SEC_CONF_bits SEC_CONF_mac_ob;
SEC_CONF_bits SEC_CONF_ncav;
SEC_CONF_bits SEC_CONF_priv;
SEC_CONF_bits SEC_CONF_shw;
MACRO_SEC_DEFAULT SEC_DEFAULT_MODE;
MACRO_SEC_STOPIO SEC_EACCESS;
MACRO_SEC_DEFAULT SEC_EFFECTIVE_PRIV;
MACRO_SEC_BSD SEC_ENHANCED;
MACRO_SEC_STOPIO SEC_EPROPLIST;
MACRO_SEC_ERRNO SEC_ERRNO_MASK;
MACRO_SEC_ERRNO SEC_ERRNO_SHIFT;
MACRO_SEC_MAXIMUM SEC_EXTENDED_RIGHTS;
MACRO_SEC_STOPIO SEC_GETLABEL;
MACRO_SEC_STOPIO SEC_GETLUID;
MACRO_SEC_MAXIMUM SEC_GRANTED_PRIV;
MACRO_SEC SEC_GROUPS;
MACRO_SEC_SUBJECT SEC_IPC;
MACRO_SEC_STOPIO SEC_ISLABELEDFS;
MACRO_SEC_STOPIO SEC_ISMULTDIR;
MACRO_SEC_KERNEL SEC_KERNEL_AUTHS;
MACRO_SEC_STOPIO SEC_LMOUNT;
MACRO_SEC_MAGIC SEC_MAGIC_MAX;
MACRO_SEC_MAXIMUM SEC_MAXIMUM_PRIV;
MACRO_SEC_STOPIO SEC_MKMULTDIR;
MACRO_SEC_NEW SEC_NEW_GID;
MACRO_SEC_NEW SEC_NEW_GROUPS;
MACRO_SEC_NEW SEC_NEW_MODE;
MACRO_SEC_NEW SEC_NEW_UID;
MACRO_SEC_NOCREATOR SEC_NOCREATOR_GID;
MACRO_SEC_SUBJECT SEC_NOCREATOR_UID;
MACRO_SEC_SUBJECT SEC_OBJECT;
MACRO_SPOLICY SEC_PACL_MAGIC;
MACRO_SEC_MAXIMUM SEC_POTENTIAL_PRIV;
MACRO_SEC_MAXIMUM SEC_RIGHTS_FDS;
MACRO_SEC_MAXIMUM SEC_RIGHTS_PRIVS;
MACRO_SEC_STOPIO SEC_RMMULTDIR;
MACRO_SEC_STOPIO SEC_SETLABEL;
MACRO_SEC_STOPIO SEC_SETLUID;
MACRO_SEC_STOPIO SEC_STATPRIV;
MACRO_SEC_STOPIO SEC_STOPIO;
MACRO_SEC_SUBJECT SEC_SUBJECT;
MACRO_SEC_STOPIO SEC_SWITCH_CALL;
MACRO_SEC_SWITCH SEC_SWITCH_CONF;
MACRO_SEC_SWITCH SEC_SWITCH_OFF;
MACRO_SEC_SWITCH SEC_SWITCH_ON;
MACRO_SEC_SWITCH SEC_SWITCH_STAT;
MACRO_SEC_SWITCH SEC_TAG_COUNT;
MACRO_SEC_BSD SEC_UPGRADE;
MACRO_SEC_WILDCARD SEC_WILDCARD_TAG;
$9D27BE50877F516FCF81DCF55C201B01 SEDACChange;
$9D27BE50877F516FCF81DCF55C201B01 SEDACFail;
MACRO_SEEK SEEK_CUR;
MACRO_SEEK SEEK_END;
MACRO_SEEK SEEK_SET;
MACRO_NVABITS SEG1_BASE;
MACRO_SEGSIZE SEGSIZE;
MACRO_SEGV SEGV_ACCERR;
MACRO_SEGV SEGV_MAPERR;
MACRO_SEGV SEGV_STKOVF;
MACRO_F1 SELECT;
MACRO_SELFMAG SELFMAG;
MACRO_SELF SELF_PFN;
$9D27BE50877F516FCF81DCF55C201B01 SEMACFail;
MACRO_SEMAEM SEMAEM;
MACRO_SEMINFO SEMINFO_AEM;
MACRO_SEMINFO SEMINFO_MNI;
MACRO_SEMINFO SEMINFO_MSL;
MACRO_SEMINFO SEMINFO_OPM;
MACRO_SEMINFO SEMINFO_OPT;
MACRO_SEMINFO SEMINFO_UME;
MACRO_SEMINFO SEMINFO_VMX;
MACRO_SEMMNI SEMMNI;
MACRO_SEMMNI SEMMNS;
MACRO_SEMMSL SEMMSL;
MACRO_SEMOPM SEMOPM;
MACRO_SEMUME SEMUME;
MACRO_SEMUME SEMVMX;
MACRO_PSEMZ SEM_A;
MACRO_SEM SEM_NAME_MAX;
MACRO_PSEMZ SEM_R;
MACRO_IPC_SEM SEM_UNDO;
MACRO_SEND_ERRORS SEND_ERRORS_END;
MACRO_SEND SEND_ERRORS_START;
MACRO_MSG_OPTION SEND_INTERRUPT;
MACRO_SEND_INTERRUPTED SEND_INTERRUPTED;
MACRO_SEND_INVALID SEND_INVALID_MEMORY;
MACRO_SEND_INVALID_PORT SEND_INVALID_PORT;
MACRO_SEND_KERNEL SEND_KERNEL_REFUSED;
MACRO_SEND_MSG SEND_MSG_TOO_LARGE;
MACRO_SEND_MSG_TOO SEND_MSG_TOO_SMALL;
MACRO_MSG_OPTION SEND_NOTIFY;
MACRO_SEND_NOTIFY SEND_NOTIFY_IN_PROGRESS;
MACRO_SEND SEND_SUCCESS;
MACRO_SEND_TIMED SEND_TIMED_OUT;
MACRO_MSG_OPTION SEND_TIMEOUT;
MACRO_SEND_WILL SEND_WILL_NOTIFY;
$9D27BE50877F516FCF81DCF55C201B01 SEObjILFloat;
$9D27BE50877F516FCF81DCF55C201B01 SEObjILReset;
$9D27BE50877F516FCF81DCF55C201B01 SEPrivFail;
$9D27BE50877F516FCF81DCF55C201B01 SEPrivUsed;
MACRO_SSEEK SERASE;
MACRO_SSEEK SERASED;
$9D27BE50877F516FCF81DCF55C201B01 SESLSet;
$9D27BE50877F516FCF81DCF55C201B01 SESubjILFloat;
$9D27BE50877F516FCF81DCF55C201B01 SESymLinkUsed;
MACRO_OFF SET;
MACRO_GETNCNT SETALL;
MACRO_GET SETPAID;
MACRO_GETNCNT SETVAL;
MACRO_GET SET_AUDSTYLE;
MACRO_GET SET_AUDSWITCH;
MACRO_ADD SET_COL;
MACRO_ADD SET_DATA_MODE;
MACRO_ADD SET_FILE;
MACRO_GET SET_HABITAT_EVENT;
MACRO_ADD SET_LINE;
MACRO_ADD SET_LINE_COL;
MACRO_GET SET_MACHIPC_AMASK;
MACRO_GET SET_MACH_AMASK;
MACRO_GET SET_OBJAUDBIT;
MACRO_GET SET_PROC_ACNTL;
MACRO_GET SET_PROC_AMASK;
MACRO_SET SET_PROPLIST_SYSCALL;
MACRO_GET SET_SITEMASK;
MACRO_GET SET_SLRANGE;
MACRO_GET SET_SYS_AMASK;
time_how SET_TO_CLIENT_TIME;
time_how SET_TO_SERVER_TIME;
MACRO_GET SET_TRUSTED_AMASK;
MACRO_ZERO SEVEN;
MACRO_SLOAD SEXEC;
char *SF;
MACRO_SFBP SFBP_SFBP_TYPE;
MACRO_SF SF_ACKNOW;
MACRO_SF SF_DELACK;
MACRO_SF SF_HI;
MACRO_SF SF_HO;
MACRO_SF_SOOB SF_IOOB;
MACRO_SF_SOOB SF_NEWCALL;
MACRO_SF SF_PI;
MACRO_SF SF_RVD;
MACRO_SF SF_RXT;
MACRO_SF_SOOB SF_SOOB;
MACRO_SF SF_WIN;
MACRO_CONSOLE SG_DTYPE;
MACRO_MC SHARED;
MACRO_SHCOM_BAD SHCOM_BAD_ADDRESS;
MACRO_SHCOM_BAD_FILE SHCOM_BAD_FILE;
MACRO_SHCOM_INIT SHCOM_INIT_FAILED;
MACRO_SHCOM SHCOM_LOADER_FAILED;
MACRO_SHCOM_LOCK SHCOM_LOCK_FAILED;
MACRO_SHCOM_MALLOC SHCOM_MALLOC_FAILED;
MACRO_SHCOM_MAP SHCOM_MAP_FAILED;
MACRO_SHCOM SHCOM_SUCCESS;
MACRO_SHCOM_UNMAP SHCOM_UNMAP_FAILED;
MACRO_SHF SHF_ALLOC;
MACRO_SHF SHF_EXECINSTR;
MACRO_SHF SHF_MASKPROC;
MACRO_SHF_MIPS SHF_MIPS_GPREL;
MACRO_SHF SHF_WRITE;
MACRO__SYS_TIMEX SHIFT_KF;
MACRO__SYS_TIMEX SHIFT_KG;
MACRO_SHIFT SHIFT_KH;
MACRO_SHIFT SHIFT_SCALE;
MACRO_SHIFT_UPDATE SHIFT_UPDATE;
MACRO_SHIFT_UPDATE SHIFT_USEC;
MACRO_SHMINFO SHMINFO_MAX;
MACRO_SHMINFO SHMINFO_MAX_COMPAT;
MACRO_SHMINFO SHMINFO_MIN;
MACRO_SHMINFO SHMINFO_MIN_COMPAT;
MACRO_SHMINFO SHMINFO_MNI;
MACRO_SHMINFO SHMINFO_SEG;
MACRO_SHMMIN SHMMAX;
MACRO_SHMMIN SHMMIN;
MACRO_SHMMNI SHMMNI;
MACRO_SHMSEG SHMSEG;
MACRO_SHM_LOCK SHM_LOCK;
MACRO_SHM_W SHM_LOCKED;
MACRO_SHM_LOCK SHM_R;
MACRO_SHM SHM_RDONLY;
MACRO_SHM_W SHM_REMOVED;
MACRO_SHM SHM_RND;
MACRO_SHM_LOCK SHM_UNLOCK;
MACRO_SHM_W SHM_W;
MACRO_SHN_ACOMMON SHN_ABS;
MACRO_SHN_ACOMMON SHN_ACOMMON;
MACRO_SHN_ACOMMON SHN_COMMON;
MACRO_SHN_ACOMMON SHN_DATA;
MACRO_SHN_ACOMMON SHN_HIPROC;
MACRO_SHN_ACOMMON SHN_HIRESERVE;
MACRO_SHN_LOPROC SHN_LOPROC;
MACRO_SHN SHN_LORESERVE;
MACRO_SHN_MIPS SHN_MIPS_ACOMMON;
MACRO_SHN_MIPS SHN_MIPS_DATA;
MACRO_SHN_MIPS SHN_MIPS_TEXT;
MACRO_SHN_ACOMMON SHN_TEXT;
MACRO_SHN SHN_UNDEF;
MACRO_CHAR_TOKEN SHORT_TOKEN;
MACRO_SHOWFH SHOWFH_FAILED;
MACRO_SHOWFH SHOWFH_SUCCESS;
MACRO_SHRT SHRT_MAX;
MACRO_SHRT SHRT_MIN;
MACRO_SHT SHT_DYNAMIC;
MACRO_SHT SHT_DYNSYM;
MACRO_SHT SHT_HASH;
MACRO_SHT SHT_HIPROC;
MACRO_SHT SHT_HIUSER;
MACRO_SHT SHT_LOPROC;
MACRO_SHT SHT_LOUSER;
MACRO_SHT_MIPS SHT_MIPS_CONFLICT;
MACRO_SHT_MIPS SHT_MIPS_DEBUG;
MACRO_SHT_MIPS SHT_MIPS_GPTAB;
MACRO_SHT_MIPS SHT_MIPS_LIBLIST;
MACRO_SHT_MIPS SHT_MIPS_MSYM;
MACRO_SHT_MIPS SHT_MIPS_REGINFO;
MACRO_SHT_MIPS SHT_MIPS_UCODE;
MACRO_SHT SHT_NOBITS;
MACRO_SHT SHT_NOTE;
MACRO_SHT SHT_NULL;
MACRO_EV_NUM SHT_NUM;
MACRO_SHT SHT_PROGBITS;
MACRO_SHT SHT_REL;
MACRO_SHT SHT_RELA;
MACRO_SHT SHT_SHLIB;
MACRO_SHT SHT_STRTAB;
MACRO_SHT SHT_SYMTAB;
MACRO_SHUT SHUT_RD;
MACRO_SHUT SHUT_RDWR;
MACRO_SHUT SHUT_WR;
MACRO_SIARESINVIS SIAALPHA;
MACRO_SIARESINVIS SIAALPHANUM;
MACRO_SIAAUTHFREE SIAAUTHFREE;
MACRO_SIANEW SIABAD;
MACRO_SIABUFSIZ SIABUFSIZ;
MACRO_SIACOLSUCCESS SIACOLABORT;
MACRO_SIACOLSUCCESS SIACOLPARAMS;
MACRO_SIACOLSUCCESS SIACOLSUCCESS;
MACRO_SIACOLSUCCESS SIACOLTIMOUT;
MACRO_SIADCAPMAX SIADCAPMAX;
MACRO_SIADCONTINUE SIADCONTINUE;
MACRO_SIADFAIL SIADFAIL;
MACRO_SIADCONTINUE SIADSTOP;
MACRO_SIADSUCCESS SIADSUCCESS;
MACRO_SIAFAIL SIAFAIL;
MACRO_SIAMENUONE SIAFORM;
MACRO_SIAFREEALL SIAFREEALL;
MACRO_SIAGOOD SIAGOOD;
MACRO_SIAMENUONE SIAINFO;
MACRO_SIALIBNAMAX SIALIBNAMAX;
MACRO_SIAMENUONE SIAMENUANY;
MACRO_SIAMENUONE SIAMENUONE;
MACRO_SIASWMAX SIAMUTMAX;
MACRO_SIASWMAX SIAMXACCTNAME;
MACRO_SIASWMAX SIAMXPASSWORD;
MACRO_SIANAMEMIN SIANAMEMIN;
MACRO_SIANEW SIANEW;
MACRO_SIARESINVIS SIANUMBER;
MACRO_SIAMENUONE SIAONELINER;
MACRO_SIAWAITFOREVER SIAONEMIN;
MACRO_SIAPKGNAMAX SIAPKGNAMAX;
MACRO_SIARESINVIS SIAPRINTABLE;
MACRO_SIARESINVIS SIARESANY;
MACRO_SIARESINVIS SIARESINVIS;
MACRO_SIAFAIL SIASTOP;
MACRO_SIASUCCESS SIASUCCESS;
MACRO_SIASWMAX SIASWMAX;
MACRO_SIAWAITFOREVER SIAWAITFOREVER;
MACRO_SIAMENUONE SIAWARNING;
MACRO_SIA_ENTITY SIA_AUTHENT_LOCK;
MACRO_SIA_A SIA_A_AUTH;
MACRO_SIA_A SIA_A_NONE;
MACRO_SIA_A SIA_A_REAUTH;
MACRO_SIA_A SIA_A_SUAUTH;
MACRO_SIA SIA_BEU_CLEARENV;
MACRO_SIA SIA_BEU_DOCHDIR;
MACRO_SIA SIA_BEU_OKROOTDIR;
MACRO_SIA SIA_BEU_REALLOGIN;
MACRO_SIA SIA_BEU_SETLUID;
MACRO_SIA_ENTITY SIA_CHANGE_LOCK;
MACRO_SIA_CHG SIA_CHG_FINGER;
MACRO_SIA_CHG_PASSWORD SIA_CHG_PASSWORD;
MACRO_SIA_CHG_SHELL SIA_CHG_SHELL;
MACRO_SIA_CHK SIA_CHK_INVOKER;
MACRO_SIA_CHK_USER SIA_CHK_USER;
MACRO_SIAWAITFOREVER SIA_DEF_TIMEOUT;
MACRO_SIA_ENDGRENT SIA_ENDGRENT;
MACRO_SIA_ENDPWENT SIA_ENDPWENT;
MACRO_SIA_ENTITY SIA_ENTITY_LOCK;
MACRO_SIA_ENTITY SIA_ESTAB_LOCK;
MACRO_SIA_GETGRENT SIA_GETGRENT;
MACRO_SIA_GETGRGID SIA_GETGRGID;
MACRO_SIA_GETGRNAM SIA_GETGRNAM;
MACRO_SIA_GETPWENT SIA_GETPWENT;
MACRO_SIA_GETPWNAM SIA_GETPWNAM;
MACRO_SIA_GETPWUID SIA_GETPWUID;
MACRO__SIA SIA_GET_GROUPS;
MACRO_SIA_ENTITY SIA_GROUP_LOCK;
MACRO_SIA_INIT SIA_INIT;
MACRO_SIA_ENTITY SIA_INIT_LOCK;
MACRO_SIA_ENTITY SIA_LAUNCH_LOCK;
MACRO_SIA_ENTITY SIA_LOG_LOCK;
MACRO_SIA_ENTITY SIA_MAT_LOCK;
MACRO_SIA_ENTITY SIA_PASSWD_LOCK;
MACRO_SIA_SES_AUTHENT SIA_SES_AUTHENT;
MACRO_SIA_SES_ESTAB SIA_SES_ESTAB;
MACRO_SIA_SES SIA_SES_INIT;
MACRO_SIA_SES_LAUNCH SIA_SES_LAUNCH;
MACRO_SIA_ENTITY SIA_SES_LOCK;
MACRO_SIA_SES_REAUTHENT SIA_SES_REAUTHENT;
MACRO_SIA_SES_RELEASE SIA_SES_RELEASE;
MACRO_SIA_SES_SUAUTHENT SIA_SES_SUAUTHENT;
MACRO__SIA_GET SIA_SES_TOGGLE_PRIVS;
MACRO__SIA_SES SIA_SES_UPDATE_AUDIT_RECORD;
MACRO_SIA_SETGRENT SIA_SETGRENT;
MACRO_SIA_SETPWENT SIA_SETPWENT;
MACRO__SIA_SES_UPDATE SIA_TEST_NEWPASS;
MACRO__SIA_TEST SIA_UPDATE_PASS;
MACRO_CPU_SUBTYPE_SUN4 SIDBITS;
MACRO_SSLEEP SIDL;
MACRO_SIGHUP SIGABRT;
MACRO_SIGAIO SIGAIO;
MACRO_SIGHUP SIGALRM;
MACRO_SIGHUP SIGBUS;
MACRO_SIGHUP SIGCHLD;
MACRO_SIGCLD SIGCLD;
MACRO_SIGHUP SIGCONT;
MACRO_SIGHUP SIGEMT;
MACRO_SIGEV SIGEV_MAX_SIZE;
MACRO_SIGEV SIGEV_NONE;
MACRO_SIGEV SIGEV_SIGNAL;
MACRO_SIGEV SIGEV_THREAD;
MACRO_SIGHUP SIGFPE;
MACRO_SIGFPS SIGFPS;
MACRO_SIGHUP SIGHUP;
MACRO_SIGHUP SIGILL;
MACRO_SIGHUP SIGINFO;
MACRO_SIGHUP SIGINT;
MACRO_SIGIOINT SIGIO;
MACRO_SIGIOINT SIGIOINT;
MACRO_SIGIOT SIGIOT;
MACRO_SIGHUP SIGKILL;
MACRO_SIGLOST SIGLOST;
MACRO_SIGMAX SIGMAX;
MACRO_NUMBER_OF_TYPE SIGNED_TOKEN;
MACRO_SIGHUP SIGPIPE;
MACRO_SIGHUP SIGPOLL;
MACRO_SIGHUP SIGPROF;
MACRO_SIGPTY SIGPTY;
MACRO_SIGLOST SIGPWR;
MACRO_SIGQUEUE SIGQUEUE_MAX;
MACRO_SIGHUP SIGQUIT;
MACRO_SIGHUP SIGRESV;
MACRO_SIGHUP SIGSEGV;
MACRO_SS_STACKMAGIC SIGSTKSZ;
MACRO_SIGHUP SIGSTOP;
MACRO_SIGHUP SIGSYS;
MACRO_SIGHUP SIGTERM;
MACRO_SIGHUP SIGTRAP;
MACRO_SIGHUP SIGTSTP;
MACRO_SIGHUP SIGTTIN;
MACRO_SIGHUP SIGTTOU;
MACRO_SIGHUP SIGURG;
MACRO_SIGHUP SIGUSR1;
MACRO_SIGHUP SIGUSR2;
MACRO_SIGHUP SIGVTALRM;
MACRO_SIGHUP SIGWINCH;
MACRO_SIGHUP SIGXCPU;
MACRO_SIGHUP SIGXFSZ;
MACRO_SIG_BLOCK SIG_BLOCK;
MACRO_SIG SIG_CATCH;
MACRO_SIG SIG_DFL;
MACRO_SIGLOST SIG_ERR;
MACRO_SIG SIG_HOLD;
MACRO_SIG SIG_IGN;
MACRO_SIG_BLOCK SIG_SETMASK;
MACRO_SIG_STK SIG_STD;
MACRO_SIG_STK SIG_STK;
MACRO_SIG_BLOCK SIG_UNBLOCK;
MACRO_SINCR SINCR;
unsigned int SINFINITY;
MACRO_DOMAIN SING;
MACRO_SSEEK SIO;
MACRO_SIOCTMTWALK SIOCTMTWALK;
MACRO_ZERO SIX;
MACRO_DUMNAME SIZSTR;
MACRO_SI_SYSNAME SI_ARCHITECTURE;
MACRO_SI_NOINFO SI_ASYNCIO;
MACRO_SI_SYSNAME SI_HOSTNAME;
MACRO_SI_SYSNAME SI_HW_PROVIDER;
MACRO_SI_SYSNAME SI_HW_SERIAL;
MACRO_SI_SYSNAME SI_MACHINE;
MACRO_SI SI_MAX_SIZE;
MACRO_SI_NOINFO SI_MESGQ;
MACRO_SI_NOINFO SI_NOINFO;
MACRO_SI_QUEUE SI_QUEUE;
MACRO_SI_SYSNAME SI_RELEASE;
MACRO_SI_SYSNAME SI_SET_HOSTNAME;
MACRO_SI_SYSNAME SI_SET_SRPC_DOMAIN;
MACRO_SI_SET SI_SET_SYSNAME;
MACRO_SI_SYSNAME SI_SRPC_DOMAIN;
MACRO_SI_SYSNAME SI_SYSNAME;
MACRO_SI_NOINFO SI_TIMER;
MACRO_SI_QUEUE SI_USER;
MACRO_SI_SYSNAME SI_VERSION;
MACRO_SLC SLC_ABORT;
MACRO_SLC_FLAGS SLC_ACK;
MACRO_SLC SLC_AO;
MACRO_SLC SLC_AYT;
MACRO_SLC SLC_BRK;
MACRO_SLC_NOSUPPORT SLC_CANTCHANGE;
MACRO_SLC_NOSUPPORT SLC_DEFAULT;
MACRO_SLC SLC_EC;
MACRO_SLC SLC_EL;
MACRO_SLC SLC_EOF;
MACRO_SLC SLC_EOR;
MACRO_SLC SLC_EW;
MACRO_SLC_FLAGS SLC_FLAGS;
MACRO_SLC_FLUSHIN SLC_FLUSHIN;
MACRO_SLC_FLUSHIN SLC_FLUSHOUT;
MACRO_SLC SLC_FORW1;
MACRO_SLC SLC_FORW2;
MACRO_SLC_LEVELBITS SLC_FUNC;
MACRO_SLC SLC_IP;
MACRO_SLC_LEVELBITS SLC_LEVELBITS;
MACRO_SLC SLC_LNEXT;
MACRO_SLC_NOSUPPORT SLC_NOSUPPORT;
MACRO_SLC SLC_RP;
MACRO_SLC SLC_SUSP;
MACRO_SLC SLC_SYNCH;
MACRO_SLC_FLAGS SLC_VALUE;
MACRO_SLC_NOSUPPORT SLC_VARIABLE;
MACRO_SLC SLC_XOFF;
MACRO_SLC SLC_XON;
MACRO_SLF SLF_TOSS;
MACRO_SLIPDIR SLIPDIR_IN;
MACRO_SLIPDIR SLIPDIR_OUT;
MACRO_TTYDISC SLIPDISC;
MACRO_SLIP SLIP_HDRLEN;
MACRO_OUTPUT SLIP_PACKET;
MACRO_SLOAD SLOAD;
MACRO_SLOAD SLOGIN;
MACRO_SLOAD SLOMAP;
MACRO_LPRSYNC SLOWPRNT;
MACRO_OTTYDISC SLPDISC;
MACRO_PSIOP SLU_SCC_PCLK_16Mhz;
MACRO_SLX SLX_CHDR;
MACRO_SLX SLX_DIR;
MACRO_SL SL_CONSOLE;
MACRO_SL SL_ERROR;
MACRO_SL SL_FATAL;
MACRO_SL SL_NOTE;
MACRO_SL SL_NOTIFY;
MACRO_SL SL_TRACE;
MACRO_SL SL_WARN;
MACRO_SMAGIC SMAGIC;
MACRO_MIPSEBMAGIC SMIPSEBMAGIC;
MACRO_MIPSEBMAGIC_2 SMIPSEBMAGIC_2;
MACRO_MIPSEBMAGIC_3 SMIPSEBMAGIC_3;
MACRO_MIPSEBMAGIC SMIPSELMAGIC;
MACRO_MIPSEBMAGIC_2 SMIPSELMAGIC_2;
MACRO_MIPSEBMAGIC_3 SMIPSELMAGIC_3;
MACRO_SMT_MAJOR SMT_MAJOR_VERSION;
MACRO_SMT_MAJOR SMT_MINOR_VERSION;
MACRO_SMT SMT_NEED_WAKEUP;
MACRO_SMT SMT_NEWVER;
MACRO_SMT SMT_REP;
MACRO_SMT SMT_REQ;
MACRO_SM2 SM_CloseConnection;
MACRO_CONSOLE SM_DTYPE;
MACRO_SM2 SM_DeleteProperties;
MACRO_SM2 SM_Die;
MACRO_SM2 SM_Error;
MACRO_SM2 SM_GetProperties;
MACRO_SM2 SM_Interact;
MACRO_SM2 SM_InteractDone;
MACRO_SM2 SM_InteractRequest;
MACRO_SM_STAT SM_MAXSTRLEN;
MACRO_SM_STAT SM_MON;
MACRO_SM SM_PROG;
MACRO_SM2 SM_PropertiesReply;
MACRO_SM2 SM_RegisterClient;
MACRO_SM2 SM_RegisterClientReply;
MACRO_SM_STAT SM_SIMU_CRASH;
MACRO_SM_STAT SM_STAT;
MACRO_SM2 SM_SaveComplete;
MACRO_SM2 SM_SaveYourself;
MACRO_SM2 SM_SaveYourselfDone;
MACRO_SM2 SM_SaveYourselfPhase2;
MACRO_SM2 SM_SaveYourselfPhase2Request;
MACRO_SM2 SM_SaveYourselfRequest;
MACRO_SM2 SM_SetProperties;
MACRO_SM2 SM_ShutdownCancelled;
MACRO_SM_STAT SM_UNMON;
MACRO_SM_STAT SM_UNMON_ALL;
MACRO_SM SM_VERS;
MACRO_SNDZERO SNDZERO;
MACRO_SNMP SNMP_OP_GET;
MACRO_SNMP SNMP_OP_GETBULK;
MACRO_SNMP SNMP_OP_GETNEXT;
MACRO_SNMP_STS SNMP_STS_FAILURE;
MACRO_SNMP_STS SNMP_STS_SUCCESS;
MACRO_SLOAD SNOCLDSTOP;
MACRO_SLOAD SNOCLDWAIT;
MACRO_SLOAD SNOTASK;
char *SO;
MACRO_SOCK SOCK_DGRAM;
MACRO_SOCK SOCK_RAW;
MACRO_SOCK SOCK_RDM;
MACRO_SOCK SOCK_SEQPACKET;
MACRO_SOCK SOCK_STREAM;
MACRO_SOE2V11 SOE2V11;
MACRO_SOE2 SOE2_HAB_NO;
MACRO_NO_ERROR SOFT_ERROR;
MACRO_SO_SNDBUF SOL_SOCKET;
MACRO_SLOAD SOMASK;
MACRO_PF_OSI SOMAXCONN;
MACRO_P4 SONY;
MACRO_SO SO_ACCEPTCONN;
MACRO_SO_HEADERS SO_ALL_PACKETS;
MACRO_SO SO_BROADCAST;
MACRO_SO SO_CLUA_DEFAULT_SRC;
MACRO_SO SO_CLUA_IN_NOALIAS;
MACRO_SO SO_CLUA_IN_NOLOCAL;
MACRO_SO SO_DEBUG;
MACRO_SO_HEADERS SO_DEFAULT_HEADERS;
MACRO_SO SO_DONTROUTE;
MACRO_SO_SNDBUF SO_ERROR;
MACRO_SO_SNDBUF SO_FAMILY;
MACRO_SO_HEADERS SO_HEADERS_ON_INPUT;
MACRO_SO_HEADERS SO_HEADERS_ON_OUTPUT;
MACRO_SO SO_KEEPALIVE;
MACRO_SO_HEADERS SO_LAST_HEADER;
MACRO_SO SO_LINGER;
MACRO_SO_HEADERS SO_MTU;
MACRO_SO_NEWCALL SO_NEWCALL;
MACRO_SO_HEADERS SO_NSIP_ROUTE;
MACRO_SO SO_OOBINLINE;
MACRO_SO SO_PAIRABLE;
MACRO_SO_SNDBUF SO_RCVBUF;
MACRO_SO_SNDBUF SO_RCVLOWAT;
MACRO_SO_SNDBUF SO_RCVTIMEO;
MACRO_SO SO_RESVPORT;
MACRO_SO SO_REUSEADDR;
MACRO_SO SO_REUSEALIASPORT;
MACRO_SO SO_REUSEPORT;
MACRO_SO_HEADERS SO_SEQNO;
MACRO_SO_SNDBUF SO_SNDBUF;
MACRO_SO_SNDBUF SO_SNDLOWAT;
MACRO_SO_SNDBUF SO_SNDTIMEO;
MACRO_SO_SNDBUF SO_STATE;
MACRO_SO_SNDBUF SO_TYPE;
MACRO_SO SO_UMC;
MACRO_SO SO_USELOOPBACK;
MACRO_SO_SNDBUF SO_XSE;
SCREEN *SP;
MACRO_NULL_DEVICE SPACEBALL_DEVICE;
MACRO_SLOAD SPAGV;
MACRO_SPBGNM SPBGNM;
MACRO_SPBZNM SPBLEN;
MACRO_SPBNUM SPBNUM;
MACRO_SPBGNM SPBXNM;
MACRO_SPBGNM SPBYNM;
MACRO_SPBZNM SPBZNM;
MACRO_SPECIALS SPECIALS_MASK;
MACRO_SPECIAL_I SPECIAL_D;
MACRO_SPECIAL_I SPECIAL_I;
MACRO_SPECIAL SPECIAL_INT_TOKEN;
MACRO_SPECIAL_TOKEN SPECIAL_TOKEN;
$BF80F9984B1E4861D7CC4C2F234406C0 SPEC_ACTION_CALL_HANDLER;
$BF80F9984B1E4861D7CC4C2F234406C0 SPEC_ACTION_IGNORE;
$BF80F9984B1E4861D7CC4C2F234406C0 SPEC_ACTION_INITIALIZE;
$BF80F9984B1E4861D7CC4C2F234406C0 SPEC_ACTION_INITIALIZE_FB_FIXUP;
$BF80F9984B1E4861D7CC4C2F234406C0 SPEC_ACTION_RAISE;
$BF80F9984B1E4861D7CC4C2F234406C0 SPEC_FAULT_IGNORE;
$BF80F9984B1E4861D7CC4C2F234406C0 SPEC_FAULT_RAISE;
MACRO_SPEC SPEC_MASK;
MACRO_SLOAD SPHYSIO;
MACRO_SPOLICY SPOLICY_CNT;
MACRO_SPPTV SPPTV_SRTTBASE;
MACRO_SPPT_PERSIST SPPT_2MSL;
MACRO_SPPT_PERSIST SPPT_KEEP;
MACRO_SPPT SPPT_NTIMERS;
MACRO_SPPT_PERSIST SPPT_PERSIST;
MACRO_SPPT SPPT_REXMT;
MACRO_SPP_ISSINCR SPP_ISSINCR;
MACRO_SPP SPP_LINGERTIME;
MACRO_SPP_MAXRXTSHIFT SPP_MAXRXTSHIFT;
MACRO_SA_INPUT SPP_NDEBUG;
MACRO_SPPT_PERSIST SPP_TTL;
MACRO_SPRAYVERS_0 SPRAYMAX;
MACRO_SPRAYVERS_0 SPRAYOVERHEAD;
MACRO_SPRAYPROC SPRAYPROC_CLEAR;
MACRO_SPRAYPROC SPRAYPROC_GET;
MACRO_SPRAYPROC SPRAYPROC_SPRAY;
MACRO_SPRAYPROG SPRAYPROG;
MACRO_SPRAYVERS_0 SPRAYVERS;
MACRO_SPRAYVERS SPRAYVERS_ORIG;
MACRO_GPR2 SPR_FPCR;
MACRO_GPR2 SPR_PS;
MACRO_SP_PIPE SP_CLOSING;
MACRO_SEC_NEW SP_CREATEACC;
MACRO_SEC_NEW SP_DELETEACC;
MACRO_SP_SP SP_EM;
MACRO_SP_PIPE SP_EXTPRIV;
MACRO_SP_PIPE SP_FREEABLE;
MACRO_SP SP_FREELIST;
MACRO_SP_INHERIT SP_INHERIT;
MACRO_SP_PIPE SP_LOCKABLE;
MACRO_SP SP_MALLOC;
MACRO_SP_PIPE SP_NBIO;
MACRO_SP_PIPE SP_NOUAREA;
MACRO_SP_SP SP_OB;
MACRO_SP_PIPE SP_PIPE;
MACRO_SP_PIPE SP_RWAKEUP;
MACRO_SP_SP SP_SA;
MACRO_SP_SP SP_SP;
MACRO_SP_PIPE SP_WATOMIC;
MACRO_SP_PIPE SP_WWAKEUP;
MACRO_SP_PIPE SP_XSE;
unsigned int SQNAN;
MACRO_SQR SQR;
char *SR;
MACRO_SSEEK SREW;
MACRO_SRTAB SRTAB_ARP;
MACRO_SRTAB SRTAB_ETHER_LOOP;
MACRO_SRTAB SRTAB_UNKNOWN;
MACRO_SRTAB SRTAB_XID;
MACRO_SRT SRT_NBCKTS;
MACRO_SSLEEP SRUN;
MACRO_SR SR_ALL_ROUTE_EXPLORE;
MACRO_SR_RENT SR_DELENT;
MACRO_SR_RENT SR_DISAB;
MACRO_SR_RENT SR_DISENT;
MACRO_SR_RENT SR_ENAB;
MACRO_SR_RENT SR_ISENAB;
MACRO_SR_RENT SR_RATTR;
MACRO_MAC SR_RD_SIZE;
MACRO_SR_RENT SR_RENT;
MACRO_SR_RENT SR_SATTR;
MACRO_SR SR_SPAN_TREE_EXPLORE;
MACRO_SR SR_SPECIFIC_ROUTE;
MACRO_SR_RENT SR_ZATTR;
MACRO_ECC SSE;
MACRO_SSEEK SSEEK;
MACRO_SLOAD SSEQL;
MACRO_SLOAD SSIGEXIT;
MACRO_SSIN SSIN_IECPARNT;
MACRO_SSIN SSIN_IECPROC;
MACRO_SSIN SSIN_IECSYS;
MACRO_SSIN SSIN_NFSPORTMON;
MACRO_SSIN SSIN_NFSSETLOCK;
MACRO_SSIN SSIN_PROG_ENV;
MACRO_SSIN SSIN_UACPARNT;
MACRO_SSIN SSIN_UACPROC;
MACRO_SSIN SSIN_UACSYS;
MACRO_SSIZE SSIZE;
MACRO_NGROUPS SSIZE_MAX;
MACRO_SSI_COREDIR SSI_COREDIR;
MACRO_SSI SSI_DBASE;
MACRO_SSI SSI_DUMPDEV;
MACRO_SSI SSI_FD_NEWMAX;
MACRO_SSI SSI_IPDEFTTL;
MACRO_SSI SSI_IPRSETUP;
MACRO_SSI SSI_LMF;
MACRO_SSI SSI_LOGIN;
MACRO_SSI SSI_NVPAIRS;
MACRO_SSI SSI_SET_STRUCT;
MACRO_SSI SSI_SLIMIT;
MACRO_SSI_COREDIR SSI_TNC;
MACRO_SSI SSI_ULIMIT;
MACRO_SSI SSI_ZERO_STRUCT;
MACRO_SSLEEP SSLEEP;
unsigned int SSNAN;
MACRO_SSLEEP SSTOP;
MACRO_SLOAD SSWPKIL;
MACRO_SLOAD SSYS;
MACRO_SS_NOFDREF SS_ASYNC;
MACRO_SS_NOFDREF SS_CANTRCVMORE;
MACRO_SS_NOFDREF SS_CANTSENDMORE;
MACRO_SS SS_DISABLE;
MACRO_CONSOLE SS_DTYPE;
MACRO_SS_NOFDREF SS_ISCONFIRMING;
MACRO_SS_NOFDREF SS_ISCONNECTED;
MACRO_SS_NOFDREF SS_ISCONNECTING;
MACRO_SS_NOFDREF SS_ISDISCONNECTING;
MACRO_SS_NOFDREF SS_NBIO;
MACRO_SS_NOFDREF SS_NOFDREF;
MACRO_SS SS_NOMASK;
MACRO_SS SS_ONSTACK;
MACRO_SS_NOFDREF SS_PRIV;
MACRO_SS_NOFDREF SS_RCVATMARK;
MACRO_SS_STACKMAGIC SS_STACKMAGIC;
MACRO_SS SS_UCONTEXT;
MACRO_NULL_DEVICE STABLET_DEVICE;
MACRO_OPENMSG STATEMSG;
MACRO_STA STA_CLOCKERR;
MACRO_STA STA_DEL;
MACRO_STA STA_FLL;
MACRO_STA STA_FREQHOLD;
MACRO_STA STA_INS;
MACRO_STA STA_PLL;
MACRO_STA STA_PPSERROR;
MACRO_STA STA_PPSFREQ;
MACRO_STA STA_PPSJITTER;
MACRO_STA STA_PPSSIGNAL;
MACRO_STA STA_PPSTIME;
MACRO_STA STA_PPSWANDER;
MACRO_STA STA_RONLY;
MACRO_STA STA_UNSYNC;
MACRO_STB_DUPLICATE STB_DUPLICATE;
MACRO_STB STB_GLOBAL;
MACRO_STB_DUPLICATE STB_HIPROC;
MACRO_STB STB_LOCAL;
MACRO_STB STB_LOPROC;
MACRO_STB_NUM STB_NUM;
MACRO_STB STB_WEAK;
MACRO_STDIN STDERR_FILENO;
MACRO_STDIN STDIN_FILENO;
MACRO_STDOUT STDOUT_FDES;
MACRO_STDIN STDOUT_FILENO;
MACRO_STDUMP STDUMP_TOOLVER;
MACRO_STN STN_UNDEF;
MACRO_STRIP STRIP_TOOLVER;
MACRO_STRU STRU_F;
MACRO_STRU STRU_P;
MACRO_STRU STRU_R;
MACRO_STT STT_FILE;
MACRO_STT STT_FUNC;
MACRO_STT STT_HIPROC;
MACRO_STT STT_LOPROC;
MACRO_STT STT_NOTYPE;
MACRO_STB_NUM STT_NUM;
MACRO_STT STT_OBJECT;
MACRO_STT STT_SECTION;
MACRO_STYP STYP_BSS;
MACRO_STYP_COMMENT STYP_COMMENT;
MACRO_STYP STYP_CONFLICT;
MACRO_STYP STYP_COPY;
MACRO_STYP STYP_DATA;
MACRO_STYP STYP_DSECT;
MACRO_STYP STYP_DSOLIST;
MACRO_STYP STYP_DYNAMIC;
MACRO_STYP STYP_DYNSTR;
MACRO_STYP STYP_DYNSYM;
MACRO_STYP STYP_EXTENDESC;
MACRO_STYP_EXTMASK STYP_EXTMASK;
MACRO_STYP STYP_FINI;
MACRO_STYP STYP_GOT;
MACRO_STYP STYP_GROUP;
MACRO_STYP STYP_HASH;
MACRO_STYP STYP_INIT;
MACRO_STYP STYP_LIB;
MACRO_STYP STYP_LIT4;
MACRO_STYP STYP_LIT8;
MACRO_STYP STYP_LITA;
MACRO_STYP_COMMENT STYP_MSYM;
MACRO_STYP STYP_NOLOAD;
MACRO_STYP STYP_PAD;
MACRO_STYP_COMMENT STYP_PDATA;
MACRO_STYP_COMMENT STYP_RCONST;
MACRO_STYP STYP_RDATA;
MACRO_STYP STYP_REG;
MACRO_STYP STYP_REGINFO;
MACRO_STYP STYP_REL_DYN;
MACRO_STYP STYP_RESERVED;
MACRO_STYP STYP_RESERVED2;
MACRO_STYP STYP_RESERVED3;
MACRO_STYP STYP_SBSS;
MACRO_STYP STYP_SDATA;
MACRO_STYP STYP_TEXT;
MACRO_STYP_COMMENT STYP_TLSBSS;
MACRO_STYP_COMMENT STYP_TLSDATA;
MACRO_STYP_COMMENT STYP_TLSINIT;
MACRO_STYP STYP_UCODE;
MACRO_STYP_COMMENT STYP_XDATA;
MACRO_ST_ADU ST_ADU;
MACRO_ST_ADU ST_ALPHABOOK1;
MACRO_ST_ADU ST_ALPHA_WILDFIRE;
MACRO_ST_RFDESCAPE ST_ANONINDEX;
$D45638E099C8A1BF7CD7A46D1A631838 ST_ARCHIVE;
MACRO_ST_AUXINIT ST_AUXINIT;
MACRO_ST_AUX ST_AUX_DNLOW;
MACRO_ST_AUX ST_AUX_DNMAC;
MACRO_ST_AUX ST_AUX_ISS;
MACRO_ST_AUX ST_AUX_ISYM;
MACRO_ST_AUX ST_AUX_RNDXR;
MACRO_ST_AUX ST_AUX_TIR;
MACRO_ST_AUX ST_AUX_WIDTH;
MACRO_ST_ADU ST_DEC_1000;
MACRO_ST_ADU ST_DEC_1000A;
MACRO_ST_DEC ST_DEC_2000_300;
MACRO_ST_ADU ST_DEC_21000;
MACRO_ST_DEC_2100A ST_DEC_2100A_A500;
MACRO_ST_ADU ST_DEC_2100_A50;
MACRO_ST_DEC_2100 ST_DEC_2100_A500;
MACRO_ST_ADU ST_DEC_3000_300;
MACRO_ST_ADU ST_DEC_3000_500;
MACRO_ST_ADU ST_DEC_4000;
MACRO_ST_ADU ST_DEC_4100;
MACRO_ST_ADU ST_DEC_550;
MACRO_ST_ADU ST_DEC_6600;
MACRO_ST_ADU ST_DEC_7000;
MACRO_ST_ADU ST_DEC_ALPHAVME_224;
MACRO_ST_ADU ST_DEC_ALPHAVME_320;
MACRO_ST_ADU ST_DEC_AXPPCI_33;
MACRO_ST_ADU ST_DEC_AXPVME_64;
MACRO_ST_ADU ST_DEC_EV45_PBP;
MACRO_ST_ADU ST_DEC_EV56_PBP;
MACRO_ST_ADU ST_DEC_KN20AA;
MACRO_ST_ADU ST_DEC_MUSTANG;
MACRO_ST_INDEL ST_DELETED;
MACRO_ST_OVF ST_DIVZ;
MACRO_ST_ADU ST_DMCC_EV6;
MACRO_ST_PDINIT ST_DNINIT;
MACRO_ST_INDEL ST_DOINGDEL;
MACRO_ST_ADU ST_EB164;
MACRO_ST_ADU ST_EB64P;
MACRO_ST_ADU ST_EB66;
MACRO_ST_RELOC ST_EXTIFD;
MACRO_ST_EXTINIT ST_EXTINIT;
MACRO_ST_E_ADDR_LINE ST_E_ADDR_LINE;
MACRO_ST_E_ADDR_OBJ ST_E_ADDR_OBJ;
MACRO_ST_E_ADDR_PROC ST_E_ADDR_PROC;
MACRO_ST_E_ADDR ST_E_ADDR_SECTION;
MACRO_ST_E_ALIGNMENT ST_E_ALIGNMENT;
MACRO_ST_E_ALTERNATE ST_E_ALTERNATE;
MACRO_ST_E_ARCHIVE_EMPTY ST_E_ARCHIVE_EMPTY;
MACRO_ST_E_ARCHIVE_END ST_E_ARCHIVE_END;
MACRO_ST_E_ARCHIVE ST_E_ARCHIVE_NAME;
MACRO_ST_E_ARCHIVE_OP ST_E_ARCHIVE_OP;
MACRO_ST_E_CHUNK_INTERNAL ST_E_CHUNK_INTERNAL;
MACRO_ST_E_CHUNK_OFFSET ST_E_CHUNK_OFFSET;
MACRO_ST_E_CHUNK_OVERLAP ST_E_CHUNK_OVERLAP;
MACRO_ST_E_CHUNK ST_E_CHUNK_TYPE;
MACRO_ST_E_CHUNK_UNSORTED ST_E_CHUNK_UNSORTED;
MACRO_ST_E_CMRLC ST_E_CMRLC_SIZE;
MACRO_ST_E_CMRLC_VERSION ST_E_CMRLC_VERSION;
MACRO_ST_E_CM_DATA ST_E_CM_DATA;
MACRO_ST_E_CM_FLAGS ST_E_CM_FLAGS;
MACRO_ST_E_CM_OPERATION ST_E_CM_OPERATION;
MACRO_ST_E_CM ST_E_CM_RANGE;
MACRO_ST_E_CM_VER ST_E_CM_VER;
MACRO_ST_E_COMMENT ST_E_COMMENT_SECTION;
MACRO_ST_E_COMPRESSED ST_E_COMPRESSED_OP;
MACRO_ST_E_DATA ST_E_DATA_ADDR;
MACRO_ST_E_DATA_EXISTS ST_E_DATA_EXISTS;
MACRO_ST_E_DATA_INDEX ST_E_DATA_INDEX_RANGE;
MACRO_ST_E_DECOMPRESS ST_E_DECOMPRESS;
MACRO_ST_E_DYN ST_E_DYN_INFO;
MACRO_ST_E ST_E_FILE;
MACRO_ST_E_FILE_ACCESS ST_E_FILE_ACCESS;
MACRO_ST_E_FILE_NAME ST_E_FILE_NAME_LENGTH;
MACRO_ST_E_FILE_OBJ ST_E_FILE_OBJ;
MACRO_ST_E_FILE_RANGE ST_E_FILE_RANGE;
MACRO_ST_E_FILE ST_E_FILE_STRIPPED;
MACRO_ST_E_FILE_SYM ST_E_FILE_SYM;
MACRO_ST_E_FRAME ST_E_FRAME_OFFSET;
MACRO_ST_E_FRAME_OFFSET ST_E_FRAME_OFFSET_RANGE;
MACRO_ST_E_INVALID_ADD ST_E_INVALID_ADD;
MACRO_ST_E_INVALID_ADDR ST_E_INVALID_ADDR;
MACRO_ST_E_INVALID_CHUNK ST_E_INVALID_CHUNK;
MACRO_ST_E_INVALID_DELETE ST_E_INVALID_DELETE;
MACRO_ST_E_INVALID_FRAME ST_E_INVALID_FRAME_OFFSET;
MACRO_ST_E_INVALID_OBJ ST_E_INVALID_OBJ;
MACRO_ST_E_INVALID_OBJLIST ST_E_INVALID_OBJLIST_APPEND;
MACRO_ST_E_INVALID_REP ST_E_INVALID_REP;
MACRO_ST_E_INVALID ST_E_INVALID_SYM;
MACRO_ST_E_INVALID_TAG ST_E_INVALID_TAG;
MACRO_ST_E_INVALID_WRITE ST_E_INVALID_WRITE;
MACRO_ST_E_LIB ST_E_LIB_NAMES;
MACRO_ST_E_LINE_ADDR ST_E_LINE_ADDR;
MACRO_ST_E_LINE ST_E_LINE_PROC;
MACRO_ST_E_MAJ ST_E_MAJ_OBJ_VER;
MACRO_ST_E_MAJ_SYM ST_E_MAJ_SYM_VER;
MACRO_ST_E_MIN ST_E_MIN_OBJ_VER;
MACRO_ST_E_MIN_SYM ST_E_MIN_SYM_VER;
MACRO_ST_E_NAME ST_E_NAME_SYM;
MACRO_ST_E_NONSHARED ST_E_NONSHARED;
MACRO_ST_E_NOT ST_E_NOT_ARCHIVE;
MACRO_ST_E_NO_COMMENT ST_E_NO_COMMENT_SECTION;
MACRO_ST_E_NO_END ST_E_NO_END_SYM;
MACRO_ST_E_NO_FILE ST_E_NO_FILE_PROCS;
MACRO_ST_E_NO_LINES ST_E_NO_LINES;
MACRO_ST_E_NO_OBJLIST ST_E_NO_OBJLIST_OBJ;
MACRO_ST_E_NO_PROCS ST_E_NO_PROCS;
MACRO_ST_E_NO_PROC ST_E_NO_PROC_SYM;
MACRO_ST_E_NO_RELOCS ST_E_NO_RELOCS;
MACRO_ST_E_NO ST_E_NO_STRINGS;
MACRO_ST_RDONLY ST_E_NULL_ARGUMENT;
MACRO_ST_E_NULL ST_E_NULL_PTR;
MACRO_ST_E_OBJECT_INVALID ST_E_OBJECT_INVALID;
MACRO_ST_E_OBJECT ST_E_OBJECT_TYPE;
MACRO_ST_E_OBJLIST ST_E_OBJLIST_EMPTY;
MACRO_ST_E_OBJ_IN ST_E_OBJ_IN_USE;
MACRO_ST_E_OBJ_LSTRIPPED ST_E_OBJ_LSTRIPPED;
MACRO_ST_E_OBJ ST_E_OBJ_NAME;
MACRO_ST_E_ORDER ST_E_ORDER;
MACRO_ST_E_PROC_FILE ST_E_PROC_FILE;
MACRO_ST_E_PROC_ILINE ST_E_PROC_ILINE;
MACRO_ST_E_PROC_OBJ ST_E_PROC_OBJ;
MACRO_ST_E_PROC_PLINE ST_E_PROC_PLINE;
MACRO_ST_E_PROC ST_E_PROC_RANGE;
MACRO_ST_E_PROC_SORTED ST_E_PROC_SORTED;
MACRO_ST_E_RFD ST_E_RFD_RANGE;
MACRO_ST_E_SECTIONS ST_E_SECTIONS_DIFFER;
MACRO_ST_E_SECTION_NAME ST_E_SECTION_NAME;
MACRO_ST_E_SECTION_OBJ ST_E_SECTION_OBJ;
MACRO_ST_E_SECTION ST_E_SECTION_RANGE;
MACRO_ST_E_SECTION_SIZE ST_E_SECTION_SIZE;
MACRO_ST_E_SECTION_TYPE ST_E_SECTION_TYPE;
MACRO_ST_E_SYMBOL ST_E_SYMBOL_TABLE;
MACRO_ST_E_SYM_FILE_0 ST_E_SYM_FILE;
MACRO_ST_E_SYM_FILE ST_E_SYM_FILE_INDEX;
MACRO_ST_E_SYM_ISYM ST_E_SYM_ISYM;
MACRO_ST_E_SYM ST_E_SYM_MAGIC;
MACRO_ST_E_SYM_NAME ST_E_SYM_NAME;
MACRO_ST_E_SYM_OBJ ST_E_SYM_OBJ;
MACRO_ST_E_SYM_OUTER ST_E_SYM_OUTER;
MACRO_ST_E_SYM_RANGE ST_E_SYM_RANGE;
MACRO_ST_E_SYM_TYPE ST_E_SYM_TYPE;
MACRO_ST_E_SYM_VALUE ST_E_SYM_VALUE;
MACRO_ST_E_TYPE_FILE ST_E_TYPE_FILE;
MACRO_ST_E_TYPE ST_E_TYPE_RANGE;
MACRO_ST_E_TYPE_SYM ST_E_TYPE_SYM;
MACRO_ST_FDISS ST_FDISS;
MACRO_ST ST_FILESINIT;
MACRO_ST_RDONLY ST_FORCE;
MACRO_ST_FOREACH ST_FOREACH_CONTINUE;
MACRO_ST_FDISS ST_IDNINIT;
MACRO_ST_INDEL ST_INDEL;
MACRO_ST_ADU ST_JENSEN;
MACRO_ST_AUXINIT ST_LINEINIT;
MACRO_ST_ADU ST_LYNX;
MACRO_ST_RDONLY ST_MANGLE_NAMES;
int ST_MAX_CPRIV;
$D45638E099C8A1BF7CD7A46D1A631838 ST_NMAGIC;
MACRO_ST_NOSUID ST_NOSUID;
MACRO_ST_OBJ ST_OBJ_END;
$D45638E099C8A1BF7CD7A46D1A631838 ST_OMAGIC;
$D45638E099C8A1BF7CD7A46D1A631838 ST_OTYPE_UNKNOWN;
MACRO_ST_OVF ST_OVF;
MACRO_ST_PEXTS ST_PAUXS;
MACRO_ST_PDINIT ST_PDINIT;
MACRO_ST_PEXTS ST_PDNS;
MACRO_ST_OVF ST_PENB;
MACRO_ST_OVF ST_PERR;
MACRO_ST_PEXTS ST_PEXTS;
MACRO_ST_PEXTS ST_PFDS;
MACRO_ST_PEXTS ST_PHEADER;
MACRO_ST_PEXTS ST_PLINES;
MACRO_ST_PEXTS ST_PNOSMALL;
MACRO_ST_PEXTS ST_POPTS;
MACRO_ST_PEXTS ST_PPDS;
MACRO_ST_PEXTS ST_PRFDS;
MACRO_ST_PROCTIROFFSET ST_PROCTIROFFSET;
MACRO_ST_PROC ST_PROC_END;
MACRO_ST_PEXTS ST_PSSEXTS;
MACRO_ST_PEXTS ST_PSSS;
MACRO_ST_PEXTS ST_PSYMS;
MACRO_ST_RDONLY ST_RDONLY;
MACRO_ST_RELOC ST_RELOC;
MACRO_ST_RFDESCAPE ST_RFDESCAPE;
MACRO_ST_ADU ST_SABLE;
MACRO_ST_SECTION ST_SECTION_END;
MACRO_ST_OVF ST_SRAO;
MACRO_ST ST_STRTABINIT;
MACRO_ST_EXTINIT ST_SYMINIT;
MACRO_ST_OVF ST_UNF;
MACRO_ST_PEXTS ST_USEEXTSRC;
$D45638E099C8A1BF7CD7A46D1A631838 ST_ZMAGIC;
MACRO_SLOAD SUANOM;
MACRO_SUBCMDMASK SUBCMDMASK;
MACRO_SUBCMDSHIFT SUBCMDSHIFT;
MACRO_SUBSYSTEM SUBSYSTEM_DYNAMICALLY_CONFIGURED;
MACRO_SUBSYSTEM SUBSYSTEM_KERN_SYSCONFIG_REGISTERED;
MACRO_SUBSYSTEM SUBSYSTEM_STATICALLY_CONFIGURED;
accept_stat SUCCESS;
MACRO_SUC SUC_LOGIN_DISP;
MACRO_SUF SUF_CE_LEN;
MACRO_SUF SUF_CE_VERS;
MACRO_SUF_ER SUF_ER_VERS;
MACRO_SUF_SP SUF_SP_CHECK1;
MACRO_SUF_SP SUF_SP_CHECK2;
MACRO_SUF_SP_LEN SUF_SP_LEN;
MACRO_SUF_SP_VERS SUF_SP_VERS;
MACRO_SUF_SP_VERS SUF_ST_LEN;
MACRO_SUF_ST SUF_ST_VERS;
MACRO_SUPERB SUPERB;
MACRO_SUPERBOFF SUPERBOFF;
MACRO_SUPPLY SUPPLY_INTERVAL;
MACRO_SVC SVC_ALIASES;
MACRO_SVC SVC_AUTH;
MACRO_SVC_YP SVC_BIND;
MACRO_SVC_RHDB SVC_DATABASES;
MACRO_SVC SVC_GROUP;
MACRO_SVC SVC_HOSTS;
MACRO_SVC_YP SVC_LAST;
MACRO_SVC_PATHSIZE SVC_LOCAL;
MACRO_SVC SVC_NETGROUP;
MACRO_SVC SVC_NETWORKS;
MACRO_SVC SVC_PASSWD;
MACRO_SVC_PATHSIZE SVC_PATHSIZE;
MACRO_SVC SVC_PROTOCOLS;
MACRO_SVC_RHDB SVC_PRPASSWD;
MACRO_SVC_RHDB SVC_RHDB;
MACRO_SVC SVC_RPC;
MACRO_SVC SVC_SERVICES;
MACRO_SVC_YP SVC_YP;
MACRO_SLOAD SVFORK;
MACRO_SVID2 SVID2_HAB_NO;
MACRO_SVID3V11 SVID3V11;
MACRO_SVID3 SVID3_HAB_NO;
MACRO_MAGNUM SVR2_DUMP_MAGIC_NUMBER;
MACRO_MAGNUM SVR3_DUMP_MAGIC_NUMBER;
MACRO_SVR4V11 SVR4V11;
MACRO_SVR4 SVR4_HAB_NO;
MACRO_SV SV_INTERRUPT;
MACRO_SV SV_ONSTACK;
MACRO_SSLEEP SWAIT;
MACRO_SLOAD SWEXIT;
MACRO_SLOAD SWNOTASK;
MACRO_SLOAD SWWAIT;
MACRO_SW SW_BOTTOM;
MACRO_AUDIT_START SW_COMPATIBILITY;
MACRO_TEGC SW_INTERLEAVE_REQUIRED;
MACRO_SW_LEFT SW_LEFT;
MACRO_SW_LEFT SW_RIGHT;
MACRO_SW SW_TOP;
MACRO_SLOAD SXONLY;
MACRO_SYMTBL SYMTBL;
MACRO_AREGTYPE SYMTYPE;
MACRO_MAJ_SYM SYM_STAMP;
MACRO_SYN SYN;
MACRO_SYNC2 SYNC_MAJOR_VERSION;
MACRO_SYNC2 SYNC_MINOR_VERSION;
MACRO_SYNC SYNC_SMOOTHSYNCPOLICY;
MACRO_SYNC SYNC_SYNCPOLICY;
MACRO_OFF SYSC;
MACRO_SYSCALL_INTMASK SYSCALL_INTMASK_LEN;
MACRO_SYSCALL SYSCALL_MASK_LEN;
MACRO_SYSCONFIG SYSCONFIG_CONFIGURE;
MACRO_FLTSET SYSSET_SZ;
accept_stat SYSTEM_ERR;
MACRO_SYSVV11 SYSVV11;
MACRO_SYSV SYSV_HAB_NO;
MACRO_SYS_MP SYS_MP;
MACRO_SYS_NMLN SYS_NMLN;
MACRO_SYS SYS__F64_readv;
MACRO_SYS SYS__F64_writev;
MACRO_SYS SYS_accept;
MACRO_SYS SYS_access;
MACRO_SYS SYS_acct;
MACRO_SYS SYS_adjtime;
MACRO_SYS SYS_afs_syscall;
MACRO_SYS SYS_alt_plock;
MACRO_SYS SYS_alt_setsid;
MACRO_SYS SYS_alt_sigpending;
MACRO_SYS_ult SYS_alt_ult_sigreturn;
MACRO_SYS SYS_async_daemon;
MACRO_SYS SYS_audcntl;
MACRO_SYS SYS_audgen;
MACRO_SYS SYS_bind;
MACRO_SYS SYS_cdslxlate;
MACRO_SYS SYS_chdir;
MACRO_SYS SYS_chflags;
MACRO_SYS SYS_chmod;
MACRO_SYS SYS_chown;
MACRO_SYS SYS_chroot;
MACRO_SYS SYS_classcntl;
MACRO_SYS SYS_close;
MACRO_SYS SYS_connect;
MACRO_SYS SYS_dup;
MACRO_SYS SYS_dup2;
MACRO_SYS SYS_exec_with_loader;
MACRO_SYS SYS_execv;
MACRO_SYS SYS_execve;
MACRO_SYS SYS_exit;
MACRO_SYS SYS_exportfs;
MACRO_SYS SYS_fchdir;
MACRO_SYS SYS_fchflags;
MACRO_SYS SYS_fchmod;
MACRO_SYS SYS_fchown;
MACRO_SYS SYS_fcntl;
MACRO_SYS SYS_fdatasync;
MACRO_SYS SYS_flock;
MACRO_SYS SYS_fork;
MACRO_SYS SYS_fpathconf;
MACRO_SYS SYS_fstat;
MACRO_SYS SYS_fstatfs;
MACRO_SYS SYS_fsync;
MACRO_SYS SYS_ftruncate;
MACRO_SYS SYS_fuser;
MACRO_SYS SYS_getaddressconf;
MACRO_SYS SYS_getdirentries;
MACRO_SYS SYS_getdomainname;
MACRO_SYS SYS_getdtablesize;
MACRO_SYS SYS_getfh;
MACRO_SYS SYS_getfsstat;
MACRO_SYS SYS_getgid;
MACRO_SYS SYS_getgroups;
MACRO_SYS SYS_gethostid;
MACRO_SYS SYS_gethostname;
MACRO_SYS SYS_getitimer;
MACRO_SYS SYS_getlogin;
MACRO_SYS SYS_getmnt;
MACRO_SYS SYS_getpagesize;
MACRO_SYS SYS_getpeername;
MACRO_SYS SYS_getpgid;
MACRO_SYS SYS_getpgrp;
MACRO_SYS SYS_getpid;
MACRO_SYS SYS_getpriority;
MACRO_SYS SYS_getrlimit;
MACRO_SYS SYS_getrusage;
MACRO_SYS SYS_getsid;
MACRO_SYS SYS_getsockname;
MACRO_SYS SYS_getsockopt;
MACRO_SYS SYS_getsysinfo;
MACRO_SYS SYS_gettimeofday;
MACRO_SYS SYS_gettimeofday64;
MACRO_SYS SYS_getuid;
MACRO_SYS SYS_ioctl;
MACRO_SYS SYS_kill;
MACRO_SYS SYS_kloadcall;
MACRO_SYS SYS_kmodcall;
MACRO_SYS SYS_lchown;
MACRO_SYS SYS_link;
MACRO_SYS SYS_listen;
MACRO_SYS SYS_lseek;
MACRO_SYS SYS_lstat;
MACRO_SYS SYS_madvise;
MACRO_SYS SYS_memcntl;
MACRO_SYS SYS_mincore;
MACRO_SYS SYS_mkdir;
MACRO_SYS SYS_mknod;
MACRO_SYS SYS_mmap;
MACRO_SYS SYS_mount;
MACRO_SYS SYS_mprotect;
MACRO_SYS SYS_mremap;
MACRO_SYS SYS_msfs_syscall;
MACRO_SYS SYS_msgctl;
MACRO_SYS SYS_msgget;
MACRO_SYS SYS_msgrcv;
MACRO_SYS SYS_msgsnd;
MACRO_SYS SYS_msleep;
MACRO_SYS SYS_msync;
MACRO_SYS SYS_munmap;
MACRO_SYS SYS_mvalid;
MACRO_SYS SYS_mwakeup;
MACRO_SYS SYS_nfssvc;
MACRO_SYS SYS_ntp_adjtime;
MACRO_SYS SYS_ntp_gettime;
MACRO_SYS SYS_obreak;
MACRO_SYS SYS_oflock;
MACRO_SYS SYS_old_accept;
MACRO_SYS SYS_old_creat;
MACRO_SYS SYS_old_fstat;
MACRO_SYS SYS_old_getpeername;
MACRO_SYS SYS_old_getpgrp;
MACRO_SYS SYS_old_getsockname;
MACRO_SYS SYS_old_killpg;
MACRO_SYS SYS_old_lstat;
MACRO_SYS SYS_old_open;
MACRO_SYS SYS_old_recv;
MACRO_SYS SYS_old_recvfrom;
MACRO_SYS SYS_old_recvmsg;
MACRO_SYS SYS_old_send;
MACRO_SYS SYS_old_sendmsg;
MACRO_SYS SYS_old_sigblock;
MACRO_SYS SYS_old_sigsetmask;
MACRO_SYS SYS_old_sigvec;
MACRO_SYS SYS_old_stat;
MACRO_SYS SYS_old_vhangup;
MACRO_SYS SYS_old_wait;
MACRO_SYS SYS_oldquota;
MACRO_SYS SYS_open;
MACRO_SYS SYS_ovadvise;
MACRO_SYS SYS_pathconf;
MACRO_SYS SYS_pid_block;
MACRO_SYS SYS_pid_unblock;
MACRO_SYS SYS_pipe;
MACRO_SYS SYS_plock;
MACRO_SYS SYS_poll;
MACRO_SYS SYS_pre_F64_fstat;
MACRO_SYS SYS_pre_F64_fstatfs;
MACRO_SYS SYS_pre_F64_getfsstat;
MACRO_SYS SYS_pre_F64_lstat;
MACRO_SYS SYS_pre_F64_stat;
MACRO_SYS SYS_pre_F64_statfs;
MACRO_SYS SYS_pread;
MACRO_SYS SYS_priocntlset;
MACRO_SYS SYS_profil;
MACRO_SYS SYS_proplist_syscall;
MACRO_SYS SYS_ptrace;
MACRO_SYS SYS_pwrite;
MACRO_SYS SYS_quotactl;
MACRO_SYS SYS_read;
MACRO_SYS SYS_readlink;
MACRO_SYS SYS_readv;
MACRO_SYS SYS_reboot;
MACRO_SYS SYS_recvfrom;
MACRO_SYS SYS_recvmsg;
MACRO_SYS SYS_rename;
MACRO_SYS SYS_revoke;
MACRO_SYS SYS_rmdir;
MACRO_SYS_rt SYS_rt_aio_done;
MACRO_SYS_rt SYS_rt_aio_group_info;
MACRO_SYS_rt SYS_rt_aio_group_init;
MACRO_SYS_rt SYS_rt_aio_info;
MACRO_SYS_rt SYS_rt_aio_init;
MACRO_SYS_rt SYS_rt_aio_transfer;
MACRO_SYS_rt SYS_rt_aio_transfer_cancel;
MACRO_SYS_rt SYS_rt_aio_transfer_done;
MACRO_SYS_rt SYS_rt_aio_transfer_old;
MACRO_SYS_rt SYS_rt_aio_wait;
MACRO_SYS_rt SYS_rt_aioinit_lock_sleep;
MACRO_SYS_rt SYS_rt_aioinit_lock_wakeup;
MACRO_SYS_rt SYS_rt_memlk;
MACRO_SYS_rt SYS_rt_memunlk;
MACRO_SYS_rt SYS_rt_psx4_csem_sleep_wakeup;
MACRO_SYS_rt SYS_rt_psx4_get_todtimer;
MACRO_SYS_rt SYS_rt_psx4_ipc_notify;
MACRO_SYS_rt SYS_rt_psx4_ipc_rcv_sleep;
MACRO_SYS_rt SYS_rt_psx4_ipc_snd_sleep;
MACRO_SYS_rt SYS_rt_psx4_ipc_wakeup_receiver;
MACRO_SYS_rt SYS_rt_psx4_ipc_wakeup_sender;
MACRO_SYS_rt SYS_rt_psx4_sem_sleep;
MACRO_SYS_rt SYS_rt_psx4_sem_wakeup;
MACRO_SYS_rt SYS_rt_psx4_set_todtimer;
MACRO_SYS_rt SYS_rt_psx4_sigqueue;
MACRO_SYS_rt SYS_rt_psx4_time_drift;
MACRO_SYS_rt SYS_rt_psx4_timer_create;
MACRO_SYS_rt SYS_rt_psx4_timer_delete;
MACRO_SYS_rt SYS_rt_psx4_timer_overrun;
MACRO_SYS_rt SYS_rt_rt_getprio;
MACRO_SYS_rt SYS_rt_rt_setprio;
MACRO_SYS SYS_sbrk;
MACRO_SYS SYS_security;
MACRO_SYS SYS_select;
MACRO_SYS SYS_semctl;
MACRO_SYS SYS_semget;
MACRO_SYS SYS_semop;
MACRO_SYS SYS_sendfile;
MACRO_SYS SYS_sendmsg;
MACRO_SYS SYS_sendto;
MACRO_SYS SYS_set_program_attributes;
MACRO_SYS SYS_set_speculative;
MACRO_SYS SYS_setdomainname;
MACRO_SYS SYS_setgid;
MACRO_SYS SYS_setgroups;
MACRO_SYS SYS_sethostid;
MACRO_SYS SYS_sethostname;
MACRO_SYS SYS_setitimer;
MACRO_SYS SYS_setlogin;
MACRO_SYS SYS_setpgid;
MACRO_SYS SYS_setpgrp;
MACRO_SYS SYS_setpriority;
MACRO_SYS SYS_setregid;
MACRO_SYS SYS_setreuid;
MACRO_SYS SYS_setrlimit;
MACRO_SYS SYS_setsid;
MACRO_SYS SYS_setsockopt;
MACRO_SYS SYS_setsysinfo;
MACRO_SYS SYS_settimeofday;
MACRO_SYS SYS_settimeofday64;
MACRO_SYS SYS_setuid;
MACRO_SYS SYS_shmat;
MACRO_SYS SYS_shmctl;
MACRO_SYS SYS_shmdt;
MACRO_SYS SYS_shmget;
MACRO_SYS SYS_shutdown;
MACRO_SYS SYS_sigaction;
MACRO_SYS SYS_sigaltstack;
MACRO_SYS SYS_signal;
MACRO_SYS SYS_signal_urti;
MACRO_SYS SYS_sigpending;
MACRO_SYS SYS_sigprocmask;
MACRO_SYS SYS_sigreturn;
MACRO_SYS SYS_sigsendset;
MACRO_SYS SYS_sigstack;
MACRO_SYS SYS_sigsuspend;
MACRO_SYS SYS_sigwaitprim;
MACRO_SYS SYS_socket;
MACRO_SYS SYS_socketpair;
MACRO_SYS_soe SYS_soe_two_nosys;
MACRO_SYS SYS_sstk;
MACRO_SYS SYS_stat;
MACRO_SYS SYS_statfs;
MACRO_SYS SYS_subsys_info;
MACRO_SYS_svid SYS_svid_three_nosys;
MACRO_SYS_svr SYS_svr_four_nosys;
MACRO_SYS SYS_swapctl;
MACRO_SYS SYS_swapon;
MACRO_SYS SYS_symlink;
MACRO_SYS SYS_sync;
MACRO_SYS SYS_sync2;
MACRO_SYS SYS_syscall;
MACRO_SYS SYS_sysfs;
MACRO_SYS SYS_sysinfo;
MACRO_SYS_sysv SYS_sysv_open;
MACRO_SYS_sysv SYS_sysv_unlink;
MACRO_SYS_sysv SYS_sysv_waitpid;
MACRO_SYS SYS_table;
MACRO_SYS SYS_truncate;
MACRO_SYS SYS_uadmin;
MACRO_SYS_ult SYS_ult_accept;
MACRO_SYS_ult SYS_ult_access;
MACRO_SYS_ult SYS_ult_acct;
MACRO_SYS_ult SYS_ult_adjtime;
MACRO_SYS_ult SYS_ult_async_daemon;
MACRO_SYS_ult SYS_ult_atomic_op;
MACRO_SYS_ult SYS_ult_bind;
MACRO_SYS_ult SYS_ult_cacheflush;
MACRO_SYS_ult SYS_ult_chdir;
MACRO_SYS_ult SYS_ult_chmod;
MACRO_SYS_ult SYS_ult_chown;
MACRO_SYS_ult SYS_ult_chroot;
MACRO_SYS_ult SYS_ult_close;
MACRO_SYS_ult SYS_ult_connect;
MACRO_SYS_ult SYS_ult_creat;
MACRO_SYS_ult SYS_ult_dup;
MACRO_SYS_ult SYS_ult_dup2;
MACRO_SYS_ult SYS_ult_execv;
MACRO_SYS_ult SYS_ult_execve;
MACRO_SYS_ult SYS_ult_exit;
MACRO_SYS_ult SYS_ult_exportfs;
MACRO_SYS_ult SYS_ult_fchmod;
MACRO_SYS_ult SYS_ult_fchown;
MACRO_SYS_ult SYS_ult_fcntl;
MACRO_SYS_ult SYS_ult_flock;
MACRO_SYS_ult SYS_ult_fork;
MACRO_SYS_ult SYS_ult_fstat;
MACRO_SYS_ult SYS_ult_fsync;
MACRO_SYS_ult SYS_ult_ftruncate;
MACRO_SYS_ult SYS_ult_getdirentries;
MACRO_SYS_ult SYS_ult_getdomainname;
MACRO_SYS_ult SYS_ult_getdtablesize;
MACRO_SYS_ult SYS_ult_getfh;
MACRO_SYS_ult SYS_ult_getgid;
MACRO_SYS_ult SYS_ult_getgroups;
MACRO_SYS_ult SYS_ult_gethostid;
MACRO_SYS_ult SYS_ult_gethostname;
MACRO_SYS_ult SYS_ult_getitimer;
MACRO_SYS_ult SYS_ult_getmnt;
MACRO_SYS_ult SYS_ult_getpagesize;
MACRO_SYS_ult SYS_ult_getpeername;
MACRO_SYS_ult SYS_ult_getpgrp;
MACRO_SYS_ult SYS_ult_getpid;
MACRO_SYS_ult SYS_ult_getpriority;
MACRO_SYS_ult SYS_ult_getrlimit;
MACRO_SYS_ult SYS_ult_getrusage;
MACRO_SYS_ult SYS_ult_getsockname;
MACRO_SYS_ult SYS_ult_getsockopt;
MACRO_SYS_ult SYS_ult_getsysinfo;
MACRO_SYS_ult SYS_ult_gettimeofday;
MACRO_SYS_ult SYS_ult_getuid;
MACRO_SYS_ult SYS_ult_ioctl;
MACRO_SYS_ult SYS_ult_kill;
MACRO_SYS_ult SYS_ult_killpg;
MACRO_SYS_ult SYS_ult_link;
MACRO_SYS_ult SYS_ult_listen;
MACRO_SYS_ult SYS_ult_lseek;
MACRO_SYS_ult SYS_ult_lstat;
MACRO_SYS_ult SYS_ult_madvise;
MACRO_SYS_ult SYS_ult_mincore;
MACRO_SYS_ult SYS_ult_mkdir;
MACRO_SYS_ult SYS_ult_mknod;
MACRO_SYS_ult SYS_ult_mmap;
MACRO_SYS_ult SYS_ult_mount;
MACRO_SYS_ult SYS_ult_mprotect;
MACRO_SYS_ult SYS_ult_mremap;
MACRO_SYS_ult SYS_ult_msgctl;
MACRO_SYS_ult SYS_ult_msgget;
MACRO_SYS_ult SYS_ult_msgrcv;
MACRO_SYS_ult SYS_ult_msgsnd;
MACRO_SYS_ult SYS_ult_munmap;
MACRO_SYS_ult SYS_ult_nfs_svc;
MACRO_SYS_ult SYS_ult_obreak;
MACRO_SYS_ult SYS_ult_open;
MACRO_SYS_ult SYS_ult_pipe;
MACRO_SYS_ult SYS_ult_plock;
MACRO_SYS_ult SYS_ult_profil;
MACRO_SYS_ult SYS_ult_ptrace;
MACRO_SYS_ult SYS_ult_qquota;
MACRO_SYS_ult SYS_ult_quota;
MACRO_SYS_ult SYS_ult_read;
MACRO_SYS_ult SYS_ult_readlink;
MACRO_SYS_ult SYS_ult_readv;
MACRO_SYS_ult SYS_ult_reboot;
MACRO_SYS_ult SYS_ult_recv;
MACRO_SYS_ult SYS_ult_recvfrom;
MACRO_SYS_ult SYS_ult_recvmsg;
MACRO_SYS_ult SYS_ult_rename;
MACRO_SYS_ult SYS_ult_rmdir;
MACRO_SYS_ult SYS_ult_sbrk;
MACRO_SYS_ult SYS_ult_select;
MACRO_SYS_ult SYS_ult_semctl;
MACRO_SYS_ult SYS_ult_semget;
MACRO_SYS_ult SYS_ult_semop;
MACRO_SYS_ult SYS_ult_send;
MACRO_SYS_ult SYS_ult_sendmsg;
MACRO_SYS_ult SYS_ult_sendto;
MACRO_SYS_ult SYS_ult_setdomainname;
MACRO_SYS_ult SYS_ult_setgroups;
MACRO_SYS_ult SYS_ult_sethostid;
MACRO_SYS_ult SYS_ult_sethostname;
MACRO_SYS_ult SYS_ult_setitimer;
MACRO_SYS_ult SYS_ult_setpgrp;
MACRO_SYS_ult SYS_ult_setpriority;
MACRO_SYS_ult SYS_ult_setregid;
MACRO_SYS_ult SYS_ult_setreuid;
MACRO_SYS_ult SYS_ult_setrlimit;
MACRO_SYS_ult SYS_ult_setsid;
MACRO_SYS_ult SYS_ult_setsockopt;
MACRO_SYS_ult SYS_ult_setsysinfo;
MACRO_SYS_ult SYS_ult_settimeofday;
MACRO_SYS_ult SYS_ult_shmsys;
MACRO_SYS_ult SYS_ult_shutdown;
MACRO_SYS_ult SYS_ult_sigblock;
MACRO_SYS_ult SYS_ult_sigpause;
MACRO_SYS_ult SYS_ult_sigpending;
MACRO_SYS_ult SYS_ult_sigreturn;
MACRO_SYS_ult SYS_ult_sigsetmask;
MACRO_SYS_ult SYS_ult_sigstack;
MACRO_SYS_ult SYS_ult_sigvec;
MACRO_SYS_ult SYS_ult_socket;
MACRO_SYS_ult SYS_ult_socketpair;
MACRO_SYS_ult SYS_ult_sstk;
MACRO_SYS_ult SYS_ult_stat;
MACRO_SYS_ult SYS_ult_swapon;
MACRO_SYS_ult SYS_ult_symlink;
MACRO_SYS_ult SYS_ult_sync;
MACRO_SYS_ult SYS_ult_syscall;
MACRO_SYS_ult SYS_ult_sysmips;
MACRO_SYS_ult SYS_ult_truncate;
MACRO_SYS_ult SYS_ult_umask;
MACRO_SYS_ult SYS_ult_umount;
MACRO_SYS_ult SYS_ult_uname;
MACRO_SYS_ult SYS_ult_unlink;
MACRO_SYS_ult SYS_ult_utc_adjtime;
MACRO_SYS_ult SYS_ult_utc_gettime;
MACRO_SYS_ult SYS_ult_utimes;
MACRO_SYS_ult SYS_ult_vadvise;
MACRO_SYS_ult SYS_ult_vfork;
MACRO_SYS_ult SYS_ult_vhangup;
MACRO_SYS_ult SYS_ult_wait3;
MACRO_SYS_ult SYS_ult_waitpid;
MACRO_SYS_ult SYS_ult_write;
MACRO_SYS_ult SYS_ult_writev;
MACRO_SYS SYS_umask;
MACRO_SYS SYS_uname;
MACRO_SYS SYS_unlink;
MACRO_SYS SYS_unmount;
MACRO_SYS SYS_usleep_thread;
MACRO_SYS SYS_uswitch;
MACRO_SYS SYS_utc_adjtime;
MACRO_SYS SYS_utc_gettime;
MACRO_SYS SYS_utimes;
MACRO_SYS SYS_vfork;
MACRO_SYS SYS_wait4;
MACRO_SYS SYS_waitid;
MACRO_SYS SYS_write;
MACRO_SYS SYS_writev;
MACRO_SSLEEP SZOMB;
MACRO_S_INPUT S_BANDURG;
MACRO_S_BLKSIZE S_BLKSIZE;
MACRO_CPU_MAX S_CORR_ERR;
MACRO_S_PSA S_DA;
MACRO_S_LOGIN S_DAEMON;
MACRO_S_DEFFILEMODE S_DEFFILEMODE;
MACRO_S_PSA S_DPA;
MACRO_S_PSA S_DPX;
MACRO_S_PSA S_DPY;
MACRO_S_IFLNK S_ENFMT;
MACRO_S_INPUT S_ERROR;
MACRO_S_INPUT S_HANGUP;
MACRO_S_INPUT S_HIPRI;
MACRO_S_IFLNK S_IEXEC;
MACRO_S_IFBLK S_IFBLK;
MACRO_S_IFCHR S_IFCHR;
MACRO_S_IFREG S_IFDIR;
MACRO_S_IFCHR S_IFIFO;
MACRO_S_IFLNK S_IFLNK;
MACRO_S_IFMT S_IFMT;
MACRO_S_IFREG S_IFREG;
MACRO_S_IFSOCK S_IFSOCK;
MACRO_S_INPUT S_INPUT;
MACRO_S_IFLNK S_IREAD;
MACRO_S_IRGRP S_IRGRP;
MACRO_S_IROTH S_IROTH;
MACRO_S_IRUSR S_IRUSR;
MACRO_S_IRUSR S_IRWXG;
MACRO_S_IRGRP S_IRWXO;
MACRO_S S_IRWXU;
MACRO_S S_ISGID;
MACRO_S S_ISUID;
MACRO_S_IFCHR S_ISVTX;
MACRO_S_IRGRP S_IWGRP;
MACRO_S_IROTH S_IWOTH;
MACRO_S_IFLNK S_IWRITE;
MACRO_S_IRUSR S_IWUSR;
MACRO_S_IRGRP S_IXGRP;
MACRO_S_IROTH S_IXOTH;
MACRO_S_IRUSR S_IXUSR;
MACRO_S_LOGIN S_LOGIN;
MACRO_S_PSA S_MA;
MACRO_S_PSA S_MASK;
MACRO_CPU_MAX S_MCHECK;
MACRO_S_PSA S_MD;
MACRO_S_INPUT S_MSG;
MACRO__NSCNS S_NEWFCN;
MACRO_STYP S_NRELOC_OVFL;
MACRO_S_INPUT S_OUTPUT;
MACRO_S_PRIMARY S_PRIMARY;
MACRO_S_PSA S_PS;
MACRO_S_PSA S_PSA;
MACRO_S_INPUT S_RDBAND;
MACRO_S_INPUT S_RDNORM;
MACRO_S_LOGIN S_RLOGIN;
MACRO_S_PRIMARY S_SECONDARY;
MACRO_S_SHRSEG S_SHRSEG;
MACRO_S_PSA S_SPD;
MACRO_S_PSA S_SPFN;
MACRO_S_PSA S_SPRG;
MACRO_CPU_MAX S_SRVMGMT_EVT;
MACRO_S_PSA S_STATUS;
MACRO_S_LOGIN S_SU;
MACRO_S_PSA S_TM;
MACRO_S_PSA S_TMA;
MACRO_S_LOGIN S_TSM;
MACRO_S_INPUT S_WRBAND;
MACRO_S_INPUT S_WRNORM;
MACRO_ScreenSaverReset ScreenSaverActive;
MACRO_ScreenSaverBlanked ScreenSaverBlanked;
MACRO_ScreenSaverOff ScreenSaverCycle;
MACRO_ScreenSaverNotifyMask ScreenSaverCycleMask;
MACRO_ScreenSaverOff ScreenSaverDisabled;
MACRO_ScreenSaverBlanked ScreenSaverExternal;
MACRO_ScreenSaverBlanked ScreenSaverInternal;
MACRO_ScreenSaverMajorVersion ScreenSaverMajorVersion;
MACRO_ScreenSaverMinorVersion ScreenSaverMinorVersion;
MACRO_ScreenSaverNotify ScreenSaverNotify;
MACRO_ScreenSaverNotifyMask ScreenSaverNotifyMask;
MACRO_ScreenSaverNotify ScreenSaverNumberEvents;
MACRO_ScreenSaverOff ScreenSaverOff;
MACRO_ScreenSaverOff ScreenSaverOn;
MACRO_ScreenSaverReset ScreenSaverReset;
$FACF11112FF3C64C36F0038ED540F00E SecAcct;
$FACF11112FF3C64C36F0038ED540F00E SecAllowDAC;
$FACF11112FF3C64C36F0038ED540F00E SecAllowILB;
$FACF11112FF3C64C36F0038ED540F00E SecAllowMAC;
$FACF11112FF3C64C36F0038ED540F00E SecAllowTpathAccess;
$FACF11112FF3C64C36F0038ED540F00E SecAllowWinDevAccess;
$FACF11112FF3C64C36F0038ED540F00E SecChmodSUGID;
$FACF11112FF3C64C36F0038ED540F00E SecChown;
$FACF11112FF3C64C36F0038ED540F00E SecChpriv;
$FACF11112FF3C64C36F0038ED540F00E SecChroot;
$FACF11112FF3C64C36F0038ED540F00E SecConfigAudit;
$FACF11112FF3C64C36F0038ED540F00E SecDebug;
$FACF11112FF3C64C36F0038ED540F00E SecDowngrade;
$FACF11112FF3C64C36F0038ED540F00E SecExecSUID;
$FACF11112FF3C64C36F0038ED540F00E SecFilesys;
$FACF11112FF3C64C36F0038ED540F00E SecILNoFloat;
$FACF11112FF3C64C36F0038ED540F00E SecKill;
$FACF11112FF3C64C36F0038ED540F00E SecLimit;
$FACF11112FF3C64C36F0038ED540F00E SecLinkDir;
$FACF11112FF3C64C36F0038ED540F00E SecLock;
$FACF11112FF3C64C36F0038ED540F00E SecMaxPriv;
$FACF11112FF3C64C36F0038ED540F00E SecMknod;
$FACF11112FF3C64C36F0038ED540F00E SecMount;
$FACF11112FF3C64C36F0038ED540F00E SecMultdir;
$FACF11112FF3C64C36F0038ED540F00E SecNetAllowNetAccess;
$FACF11112FF3C64C36F0038ED540F00E SecNetBroadcast;
$FACF11112FF3C64C36F0038ED540F00E SecNetNoAuth;
$FACF11112FF3C64C36F0038ED540F00E SecNetPrivAddr;
$FACF11112FF3C64C36F0038ED540F00E SecNetPrivSession;
$FACF11112FF3C64C36F0038ED540F00E SecNetRawAccess;
$FACF11112FF3C64C36F0038ED540F00E SecNetSetId;
$FACF11112FF3C64C36F0038ED540F00E SecObjReuseOverride;
$FACF11112FF3C64C36F0038ED540F00E SecOwner;
$FACF11112FF3C64C36F0038ED540F00E SecPrivSessionMgmt;
$FACF11112FF3C64C36F0038ED540F00E SecProcIdent;
$FACF11112FF3C64C36F0038ED540F00E SecRemote;
$FACF11112FF3C64C36F0038ED540F00E SecSUCompat;
$FACF11112FF3C64C36F0038ED540F00E SecSUPropagate;
$FACF11112FF3C64C36F0038ED540F00E SecShutdown;
$FACF11112FF3C64C36F0038ED540F00E SecSuspendAudit;
$FACF11112FF3C64C36F0038ED540F00E SecSysAttr;
$FACF11112FF3C64C36F0038ED540F00E SecUseMach;
$FACF11112FF3C64C36F0038ED540F00E SecWriteAudit;
$FACF11112FF3C64C36F0038ED540F00E SecWriteupClrnce;
$FACF11112FF3C64C36F0038ED540F00E SecWriteupSyshi;
$77F4E97EC64EB764A006B2CB38EEE544 Selected;
MACRO_KeyPress SelectionClear;
MACRO_KeyPress SelectionNotify;
MACRO_KeyPress SelectionRequest;
$E203AC54CF4949A66D893C858D3FE04C SendWidgetTree;
MACRO_SetModeInsert SetModeDelete;
MACRO_SetModeInsert SetModeInsert;
$E203AC54CF4949A66D893C858D3FE04C SetValues;
MACRO_ShapeBounding ShapeBounding;
MACRO_ShapeBounding ShapeClip;
MACRO_ShapeSet ShapeIntersect;
MACRO_ShapeSet ShapeInvert;
MACRO_ShapeNotify ShapeNotify;
MACRO_ShapeNotifyMask ShapeNotifyMask;
MACRO_ShapeNotify ShapeNumberEvents;
MACRO_ShapeSet ShapeSet;
MACRO_ShapeSet ShapeSubtract;
MACRO_ShapeSet ShapeUnion;
MACRO_ShellIndex ShellIndex;
MACRO_ShiftMapIndex ShiftMapIndex;
MACRO_ShiftMask ShiftMask;
MACRO_ShmCompletion ShmCompletion;
MACRO_BadShmSeg ShmNumberErrors;
MACRO_ShmCompletion ShmNumberEvents;
KeySym ShortKSToKS(ShortKeySym sym, KeySym *private);
MACRO_SmDialogError SmDialogError;
MACRO_SmDialogError SmDialogNormal;
void SmFreeProperty(SmProp *);
void SmFreeReasons(int, char **);
MACRO_SmInteractStyleNone SmInteractStyleAny;
MACRO_SmInteractStyleNone SmInteractStyleErrors;
MACRO_SmInteractStyleNone SmInteractStyleNone;
MACRO_SmProtoMajor SmProtoMajor;
MACRO_SmProtoMinor SmProtoMinor;
MACRO_SmRestartIfRunning SmRestartAnyway;
MACRO_SmRestartIfRunning SmRestartIfRunning;
MACRO_SmRestartIfRunning SmRestartImmediately;
MACRO_SmRestartIfRunning SmRestartNever;
MACRO_SmSaveGlobal SmSaveBoth;
MACRO_SmSaveGlobal SmSaveGlobal;
MACRO_SmSaveGlobal SmSaveLocal;
char *SmcClientID(SmcConn);
SmcCloseStatus SmcCloseConnection(SmcConn, int, char **);
$B9B1E3761F7AC9C80FCB354FC1070F12 SmcClosedASAP;
$B9B1E3761F7AC9C80FCB354FC1070F12 SmcClosedNow;
$B9B1E3761F7AC9C80FCB354FC1070F12 SmcConnectionInUse;
void SmcDeleteProperties(SmcConn, int, char **);
MACRO_SmcSaveYourselfProcMask SmcDieProcMask;
IceConn SmcGetIceConnection(SmcConn);
int SmcGetProperties(SmcConn, SmcPropReplyProc, SmPointer);
void SmcInteractDone(SmcConn, int);
int SmcInteractRequest(SmcConn, int, SmcInteractProc, SmPointer);
void SmcModifyCallbacks(SmcConn, unsigned __int64, SmcCallbacks *);
SmcConn SmcOpenConnection(char *, SmPointer, int, int, unsigned __int64, SmcCallbacks *, char *, char **, int, char *);
int SmcProtocolRevision(SmcConn);
int SmcProtocolVersion(SmcConn);
char *SmcRelease(SmcConn);
void SmcRequestSaveYourself(SmcConn, int, int, int, int, int);
int SmcRequestSaveYourselfPhase2(SmcConn, SmcSaveYourselfPhase2Proc, SmPointer);
MACRO_SmcSaveYourselfProcMask SmcSaveCompleteProcMask;
void SmcSaveYourselfDone(SmcConn, int);
MACRO_SmcSaveYourselfProcMask SmcSaveYourselfProcMask;
SmcErrorHandler SmcSetErrorHandler(SmcErrorHandler);
void SmcSetProperties(SmcConn, int, SmProp **);
MACRO_SmcSaveYourselfProcMask SmcShutdownCancelledProcMask;
char *SmcVendor(SmcConn);
void SmsCleanUp(SmsConn);
char *SmsClientHostName(SmsConn);
char *SmsClientID(SmsConn);
MACRO_SmsRegisterClientProcMask SmsCloseConnectionProcMask;
MACRO_SmsRegisterClientProcMask SmsDeletePropertiesProcMask;
void SmsDie(SmsConn);
char *SmsGenerateClientID(SmsConn);
IceConn SmsGetIceConnection(SmsConn);
MACRO_SmsRegisterClientProcMask SmsGetPropertiesProcMask;
int SmsInitialize(char *, char *, SmsNewClientProc, SmPointer, IceHostBasedAuthProc, int, char *);
void SmsInteract(SmsConn);
MACRO_SmsRegisterClientProcMask SmsInteractDoneProcMask;
MACRO_SmsRegisterClientProcMask SmsInteractRequestProcMask;
int SmsProtocolRevision(SmsConn);
int SmsProtocolVersion(SmsConn);
MACRO_SmsRegisterClientProcMask SmsRegisterClientProcMask;
int SmsRegisterClientReply(SmsConn, char *);
void SmsReturnProperties(SmsConn, int, SmProp **);
void SmsSaveComplete(SmsConn);
void SmsSaveYourself(SmsConn, int, int, int, int);
MACRO_SmsRegisterClientProcMask SmsSaveYourselfDoneProcMask;
MACRO_SmsRegisterClientProcMask SmsSaveYourselfP2RequestProcMask;
void SmsSaveYourselfPhase2(SmsConn);
MACRO_SmsRegisterClientProcMask SmsSaveYourselfRequestProcMask;
SmsErrorHandler SmsSetErrorHandler(SmsErrorHandler);
MACRO_SmsRegisterClientProcMask SmsSetPropertiesProcMask;
void SmsShutdownCancelled(SmsConn);
MACRO_ForgetGravity SouthEastGravity;
MACRO_ForgetGravity SouthGravity;
MACRO_ForgetGravity SouthWestGravity;
struct stat Statbuf;
MACRO_InputHint StateHint;
MACRO_StaticGray StaticColor;
MACRO_ForgetGravity StaticGravity;
MACRO_StaticGray StaticGray;
MACRO_CursorShape StippleShape;
MACRO_KbdFeedbackClass StringFeedbackClass;
MACRO_NoEventMask StructureNotifyMask;
MACRO_NoEventMask SubstructureNotifyMask;
MACRO_NoEventMask SubstructureRedirectMask;
MACRO_Success Success;
MACRO_SunXK_PageUp SunXK_Again;
MACRO_SunXK_Compose SunXK_AltGraph;
MACRO_SunXK_PageUp SunXK_AudioLowerVolume;
MACRO_SunXK_PageUp SunXK_AudioMute;
MACRO_SunXK_PageUp SunXK_AudioRaiseVolume;
MACRO_SunXK_Compose SunXK_Compose;
MACRO_SunXK_PageUp SunXK_Copy;
MACRO_SunXK_PageUp SunXK_Cut;
MACRO_SunXK SunXK_F36;
MACRO_SunXK SunXK_F37;
MACRO_SunXK SunXK_FA_Acute;
MACRO_SunXK SunXK_FA_Cedilla;
MACRO_SunXK SunXK_FA_Circum;
MACRO_SunXK SunXK_FA_Diaeresis;
MACRO_SunXK SunXK_FA_Grave;
MACRO_SunXK SunXK_FA_Tilde;
MACRO_SunXK_PageUp SunXK_Find;
MACRO_SunXK_PageUp SunXK_Front;
MACRO_SunXK_PageUp SunXK_Open;
MACRO_SunXK_PageUp SunXK_PageDown;
MACRO_SunXK_PageUp SunXK_PageUp;
MACRO_SunXK_PageUp SunXK_Paste;
MACRO_SunXK_PageUp SunXK_PowerSwitch;
MACRO_SunXK_PageUp SunXK_PowerSwitchShift;
MACRO_SunXK_Print SunXK_Print_Screen;
MACRO_SunXK_PageUp SunXK_Props;
MACRO_SunXK_PageUp SunXK_Stop;
MACRO_SunXK SunXK_Sys_Req;
MACRO_SunXK_PageUp SunXK_Undo;
MACRO_SunXK_PageUp SunXK_VideoDegauss;
MACRO_SunXK_PageUp SunXK_VideoLowerBrightness;
MACRO_SunXK_PageUp SunXK_VideoRaiseBrightness;
MACRO_AsyncThisDevice SyncAll;
MACRO_AsyncPointer SyncBoth;
MACRO_AsyncPointer SyncKeyboard;
MACRO_AsyncPointer SyncPointer;
MACRO_AsyncThisDevice SyncThisDevice;
char *TA;
MACRO_ORDINARY TAB;
MACRO_TAB0 TAB0;
MACRO_TAB0 TAB1;
MACRO_TAB0 TAB2;
MACRO_TAB0 TAB3;
MACRO_NL0 TABDLY;
MACRO_TTYDISC TABLDISC;
MACRO_NULL_DEVICE TABLET_DEVICE;
MACRO_MOUSE TABLET_ID;
int TABSIZE;
MACRO_TBADADDR TACCES;
MACRO_TBADADDR TADDRBUSY;
MACRO_TALK TALK_VERSION;
MACRO_TANDEM TANDEM;
MACRO_TAR TAR;
MACRO_TASK_ALL TASK_ALL_EVENTS_INFO;
MACRO_TASK TASK_BASIC_INFO;
MACRO_TASK_KERNEL TASK_BOOTSTRAP_PORT;
MACRO_TASK_EVENTS TASK_EVENTS_INFO;
MACRO_TASK_KERNEL TASK_EXCEPTION_PORT;
MACRO_TASK TASK_INFO_MAX;
MACRO_TASK_KERNEL TASK_KERNEL_PORT;
MACRO_TASK_KERNEL TASK_NOTIFY_PORT;
MACRO_TA TA_DROP;
MACRO_TA TA_INPUT;
MACRO_TA TA_OUTPUT;
MACRO_TA TA_RESPOND;
MACRO_TA TA_USER;
MACRO_TBADADDR TBADADDR;
MACRO_TBADADDR TBADDATA;
MACRO_TBADADDR TBADF;
MACRO_TBADADDR TBADFLAG;
MACRO_TBADADDR TBADNAME;
MACRO_TBADADDR TBADOPT;
MACRO_TBADADDR TBADQLEN;
MACRO_TBADADDR TBADSEQ;
MACRO_TBGO TBBINDATA;
MACRO_CRMOD TBDELAY;
MACRO_TBEG TBEG;
MACRO_TBGO TBGO;
MACRO_TBUNUSED TBGTCO;
MACRO_TBUNUSED TBHDG;
MACRO_TBUNUSED TBHDGHIRES;
MACRO_TBUNUSED TBHITACHI;
MACRO_TBINPROX TBINPROX;
MACRO_TBL TBL_AID;
MACRO_TBL TBL_ARGUMENTS;
MACRO_TBL TBL_BUFFER;
MACRO_TBL TBL_BUFFER_MP;
MACRO_TBL TBL_DKINFO;
MACRO_TBL TBL_ENVIRONMENT;
MACRO_TBL TBL_FDSTAT;
MACRO_TBL TBL_FILEINFO;
MACRO_TBL TBL_FILEINFO_MP;
MACRO_TBL TBL_FSPARAM;
MACRO_TBL TBL_INCLUDE_VERSION;
MACRO_TBL TBL_INTR;
MACRO_TBL TBL_INTR_MP;
MACRO_TBL TBL_KMEM;
MACRO_TBL TBL_KNLIST;
MACRO_TBL_KNLIST TBL_KNLIST_NAMSIZ;
MACRO_TBL TBL_LOADAVG;
MACRO_TBL TBL_MACHINE_SLOT;
MACRO_TBL TBL_MALLOCBUCKETS;
MACRO_TBL TBL_MALLOCLEAK;
MACRO_TBL TBL_MALLOCLEAKCOUNT;
MACRO_TBL TBL_MALLOCMSTATS;
MACRO_TBL TBL_MALLOCNAMES;
MACRO_TBL TBL_MALLOCNBUCKETS;
MACRO_TBL TBL_MALLOCNTYPES;
MACRO_TBL TBL_MALLOCT;
MACRO_TBL TBL_MALLOCTYPES;
MACRO_TBL TBL_MAPINFO;
MACRO_TBL TBL_MAXUPRC;
MACRO_TBL TBL_MODES;
MACRO_TBL TBL_MSGDS;
MACRO_TBL TBL_MSGINFO;
MACRO_TBL TBL_NCSTATS;
MACRO_TBL TBL_NETINFO;
MACRO_TBL TBL_PAGING;
MACRO_TBL TBL_PAGING_MP;
MACRO_TBL TBL_PMEMCLUSTERS;
MACRO_TBL TBL_PMEMCLUSTERTYPE;
MACRO_TBL TBL_PMEMSTATS;
MACRO_TBL TBL_PMEMUSAGE;
MACRO_TBL TBL_PMEMUSETYPE;
MACRO_TBL TBL_PROCESSOR_INFO;
MACRO_TBL TBL_PROCESSOR_STATS_INFO;
MACRO_TBL TBL_PROCINFO;
MACRO_TBL TBL_RUNQ;
MACRO_TBL TBL_SCALLS;
MACRO_TBL TBL_SCALLS_MP;
MACRO_TBL TBL_SEMDS;
MACRO_TBL TBL_SEMINFO;
MACRO_TBL TBL_SHMDS;
MACRO_TBL TBL_SHMDS_COMPAT;
MACRO_TBL TBL_SHMINFO;
MACRO_TBL TBL_SWAPINFO;
MACRO_TBL TBL_SYSINFO;
MACRO_TBL TBL_SYSINFO_MP;
MACRO_TBL TBL_TASKINFO;
MACRO_TBL TBL_TBLSTATS;
MACRO_TBL TBL_TCPCONN;
MACRO_TBL TBL_THREADSTATES;
MACRO_TBL TBL_TTYINFO;
MACRO_TBL TBL_TTYLOC;
MACRO_TBL TBL_UAREA;
MACRO_TBL TBL_UIDINFO;
MACRO_TBL TBL_UMAST_INFO;
MACRO_TBL TBL_U_TTYD;
MACRO_TBL TBL_VMSTATS;
MACRO_TBL TBL_VNODESTATS;
MACRO_TBL TBL_XCPU_INTR_MP;
MACRO_NTBS TBMAXREC;
MACRO_TBMODE TBMODE;
MACRO_TBPOINT TBPOINT;
MACRO_TBUNUSED TBPOL;
MACRO_TBQUEUESIZE TBQUEUESIZE;
MACRO_TBRUN TBRUN;
MACRO_TBRUN TBSTOP;
MACRO_TBUNUSED TBTIGER;
MACRO_TBTYPE TBTYPE;
MACRO_TBADADDR TBUFOVFLW;
MACRO_TBUNUSED TBUNUSED;
MACRO_TB_MIN TB_MIN_DEPTH;
MACRO_TB TB_MIN_RATE;
MACRO_TCStatistics TCCmdKey;
MACRO_TCStatistics TCColorReplies;
MACRO_TCStatistics TCCursor;
MACRO_TCStatistics TCEvents;
MACRO_TCStatistics TCEvtCBs;
MACRO_TCSBRK TCFLSH;
MACRO_TCStatistics TCGrabServer;
MACRO_TCIFLUSH TCIFLUSH;
MACRO_TCOOFF TCIOFF;
MACRO_TCIFLUSH TCIOFLUSH;
MACRO_TCOOFF TCION;
MACRO_TCLX_CMDL TCLX_CMDL_EXIT_ON_EOF;
MACRO_TCLX_CMDL TCLX_CMDL_INTERACTIVE;
MACRO_TCLX TCLX_PATCHLEVEL;
MACRO_TCL_DONT_WAIT TCL_ALL_EVENTS;
MACRO_TCL_GLOBAL TCL_APPEND_VALUE;
MACRO_TCL_OK TCL_BREAK;
MACRO_TCL_CHECKSUM TCL_CHECKSUM;
MACRO_TCL_OK TCL_CONTINUE;
MACRO_TCL_DONT TCL_DONT_USE_BRACES;
MACRO_TCL_DONT_WAIT TCL_DONT_WAIT;
$75C8E7CA27BE1E0F4E6BF64D1993A788 TCL_DOUBLE;
MACRO_TCL_MAX TCL_DOUBLE_SPACE;
MACRO_TCL_DSTRING TCL_DSTRING_STATIC_SIZE;
MACRO_TCL_DYNAMIC TCL_DYNAMIC;
$75C8E7CA27BE1E0F4E6BF64D1993A788 TCL_EITHER;
MACRO_TCL_STDIN TCL_ENFORCE_MODE;
MACRO_TCL_OK TCL_ERROR;
MACRO_TCL_DONT TCL_EVAL_GLOBAL;
MACRO_TCL_READABLE TCL_EXCEPTION;
MACRO_TCL_DONT_WAIT TCL_FILE_EVENTS;
MACRO_TCL_GLOBAL TCL_GLOBAL_ONLY;
MACRO_TCL_DONT_WAIT TCL_IDLE_EVENTS;
$75C8E7CA27BE1E0F4E6BF64D1993A788 TCL_INT;
MACRO_TCL_GLOBAL TCL_INTERP_DESTROYED;
MACRO_TCL_GLOBAL TCL_LEAVE_ERR_MSG;
MACRO_TCL_LINK TCL_LINK_BOOLEAN;
MACRO_TCL_LINK TCL_LINK_DOUBLE;
MACRO_TCL_LINK TCL_LINK_INT;
MACRO_TCL_LINK TCL_LINK_READ_ONLY;
MACRO_TCL_LINK TCL_LINK_STRING;
MACRO_TCL_GLOBAL TCL_LIST_ELEMENT;
MACRO_TCL_UNIX TCL_MAC_FILE;
MACRO_TCL_UNIX TCL_MAC_SOCKET;
MACRO_TCL TCL_MAJOR_VERSION;
MACRO_TCL_MAX TCL_MAX_PREC;
MACRO_TCL_MINOR TCL_MINOR_VERSION;
MACRO_TCL_MODE TCL_MODE_BLOCKING;
MACRO_TCL_MODE TCL_MODE_NONBLOCKING;
MACRO_TCL_DONT TCL_NO_EVAL;
MACRO_TCL_OK TCL_OK;
MACRO_TCL_ONE TCL_ONE_WORD_KEYS;
Tcl_PathType TCL_PATH_ABSOLUTE;
Tcl_PathType TCL_PATH_RELATIVE;
Tcl_PathType TCL_PATH_VOLUME_RELATIVE;
MACRO_TCL_PRIORITY TCL_PRIORITY;
MACRO_TCL_PROTECTION TCL_PROTECTION;
$7DE6A019FB8D510204474F438D93B845 TCL_QUEUE_HEAD;
$7DE6A019FB8D510204474F438D93B845 TCL_QUEUE_MARK;
$7DE6A019FB8D510204474F438D93B845 TCL_QUEUE_TAIL;
MACRO_TCL_READABLE TCL_READABLE;
MACRO_TCL_RELEASE TCL_RELEASE_LEVEL;
MACRO_TCL_RELEASE_SERIAL TCL_RELEASE_SERIAL;
MACRO_TCL_RESERRORRATE TCL_RESERRORRATE;
MACRO_TCL_OK TCL_RESULT_SIZE;
MACRO_TCL_OK TCL_RETURN;
MACRO_TCL_SMALL TCL_SMALL_HASH_TABLE;
MACRO_TCL_VOLATILE TCL_STATIC;
MACRO_TCL_STDIN TCL_STDERR;
MACRO_TCL_STDIN TCL_STDIN;
MACRO_TCL_STDIN TCL_STDOUT;
MACRO_TCL_SMALL TCL_STRING_KEYS;
MACRO_TCL_DONT_WAIT TCL_TIMER_EVENTS;
MACRO_TCL_GLOBAL TCL_TRACE_DESTROYED;
MACRO_TCL_GLOBAL TCL_TRACE_READS;
MACRO_TCL_GLOBAL TCL_TRACE_UNSETS;
MACRO_TCL_GLOBAL TCL_TRACE_WRITES;
MACRO_TCL_TRANSDEL TCL_TRANSDEL;
Tcl_EolTranslation TCL_TRANSLATE_AUTO;
Tcl_EolTranslation TCL_TRANSLATE_CR;
Tcl_EolTranslation TCL_TRANSLATE_CRLF;
Tcl_EolTranslation TCL_TRANSLATE_LF;
MACRO_TCL_UNIX TCL_UNIX_FD;
MACRO_TCL_VOLATILE TCL_VOLATILE;
MACRO_TCL_UNIX TCL_WIN32S_PIPE;
MACRO_TCL_DONT_WAIT TCL_WINDOW_EVENTS;
MACRO_TCL_UNIX TCL_WIN_CONSOLE;
MACRO_TCL_UNIX TCL_WIN_FILE;
MACRO_TCL_UNIX TCL_WIN_PIPE;
MACRO_TCL_UNIX TCL_WIN_SOCKET;
MACRO_TCL_READABLE TCL_WRITABLE;
MACRO_TCStatistics TCMaxPacket;
$67EED6FD6AC99B85FCDEED243BE785D8 TCNTL_ADSPEC_NON_RSVP_HOP;
$30B9A4A173392B5D482C29C97080B247 TCNTL_B_POLICE_FLAG;
$849ECB4057725C5E606311FBE77D1A87 TCNTL_CMD_ADDFILTER;
$849ECB4057725C5E606311FBE77D1A87 TCNTL_CMD_ADDFLOWSPEC;
$849ECB4057725C5E606311FBE77D1A87 TCNTL_CMD_DELFILTER;
$849ECB4057725C5E606311FBE77D1A87 TCNTL_CMD_DELFLOWSPEC;
$849ECB4057725C5E606311FBE77D1A87 TCNTL_CMD_LISTFILT_HTH;
$849ECB4057725C5E606311FBE77D1A87 TCNTL_CMD_LISTFILT_SLOT;
$849ECB4057725C5E606311FBE77D1A87 TCNTL_CMD_LISTFLOW_HANDLES;
$849ECB4057725C5E606311FBE77D1A87 TCNTL_CMD_LISTFLOW_HTH;
$849ECB4057725C5E606311FBE77D1A87 TCNTL_CMD_LISTFLOW_SLOT;
$849ECB4057725C5E606311FBE77D1A87 TCNTL_CMD_MODFLOWSPEC;
$6A2461C961810504B9341ECA48C51707 TCNTL_CONF_OP_GET;
$6A2461C961810504B9341ECA48C51707 TCNTL_CONF_OP_GETNEXT;
$6A2461C961810504B9341ECA48C51707 TCNTL_CONF_OP_SET;
MACRO_TCNTL_INFO TCNTL_CONF_PARAM_SIZE;
MACRO_TCNTL_CONF TCNTL_CONF_SIGNED;
MACRO_TCNTL_CONF TCNTL_CONF_UNSIGNED;
$D2243AD3EB27BF4C7B926A762B95DD44 TCNTL_DEXT_ETHER_STD;
$D2243AD3EB27BF4C7B926A762B95DD44 TCNTL_DEXT_USER_WRITTEN;
MACRO_TCNTL TCNTL_ENABLE_INLINE;
$3E17E73D3615670C5AA600E0ACAAD822 TCNTL_ERR_ADSPEC;
$3E17E73D3615670C5AA600E0ACAAD822 TCNTL_ERR_ATCNTL;
$3E17E73D3615670C5AA600E0ACAAD822 TCNTL_ERR_BADFTAG;
$3E17E73D3615670C5AA600E0ACAAD822 TCNTL_ERR_BADTABLEI;
$3E17E73D3615670C5AA600E0ACAAD822 TCNTL_ERR_BUFTOOSMALL;
$3E17E73D3615670C5AA600E0ACAAD822 TCNTL_ERR_COPYOUTF;
$3E17E73D3615670C5AA600E0ACAAD822 TCNTL_ERR_DUPFILT;
$3E17E73D3615670C5AA600E0ACAAD822 TCNTL_ERR_FINFND;
$3E17E73D3615670C5AA600E0ACAAD822 TCNTL_ERR_FITOVERF;
$3E17E73D3615670C5AA600E0ACAAD822 TCNTL_ERR_FLMFDEL;
$3E17E73D3615670C5AA600E0ACAAD822 TCNTL_ERR_FLNFND;
$3E17E73D3615670C5AA600E0ACAAD822 TCNTL_ERR_FLOWSPEC;
$3E17E73D3615670C5AA600E0ACAAD822 TCNTL_ERR_FLTOVERF;
$3E17E73D3615670C5AA600E0ACAAD822 TCNTL_ERR_INVARG;
$3E17E73D3615670C5AA600E0ACAAD822 TCNTL_ERR_INVSLOT;
$3E17E73D3615670C5AA600E0ACAAD822 TCNTL_ERR_NOMEM;
$3E17E73D3615670C5AA600E0ACAAD822 TCNTL_ERR_NO_NET_RESOURCES;
$3E17E73D3615670C5AA600E0ACAAD822 TCNTL_ERR_NSCONFP;
$3E17E73D3615670C5AA600E0ACAAD822 TCNTL_ERR_NSFIT;
$3E17E73D3615670C5AA600E0ACAAD822 TCNTL_ERR_NSFLT;
$3E17E73D3615670C5AA600E0ACAAD822 TCNTL_ERR_NSLASTFI;
$3E17E73D3615670C5AA600E0ACAAD822 TCNTL_ERR_OK;
$3E17E73D3615670C5AA600E0ACAAD822 TCNTL_ERR_POLICY_REJECT;
$3E17E73D3615670C5AA600E0ACAAD822 TCNTL_ERR_RESINP;
$3E17E73D3615670C5AA600E0ACAAD822 TCNTL_ERR_TABTOOSMALL;
$3E17E73D3615670C5AA600E0ACAAD822 TCNTL_ERR_TCNE;
$3E17E73D3615670C5AA600E0ACAAD822 TCNTL_ERR_TOUTDATED;
$3E17E73D3615670C5AA600E0ACAAD822 TCNTL_ERR_TRESIZED;
$30B9A4A173392B5D482C29C97080B247 TCNTL_E_POLICE_FLAG;
MACRO_TCNTL_FILT TCNTL_FILT_IDBLOCK;
$AADEBA943FF3A93C50619AA4AE6B36F1 TCNTL_FILT_TABLE_IP4_PORT;
$AADEBA943FF3A93C50619AA4AE6B36F1 TCNTL_FILT_TABLE_IP4_PORT_RX;
$AADEBA943FF3A93C50619AA4AE6B36F1 TCNTL_FILT_TABLE_IP4_WF;
$AADEBA943FF3A93C50619AA4AE6B36F1 TCNTL_FILT_TABLE_IP4_WF_RX;
$AADEBA943FF3A93C50619AA4AE6B36F1 TCNTL_FILT_TABLE_IP6_FLOW;
$AADEBA943FF3A93C50619AA4AE6B36F1 TCNTL_FILT_TABLE_IP6_FLOW_RX;
$AADEBA943FF3A93C50619AA4AE6B36F1 TCNTL_FILT_TABLE_LAST;
$58172E3AE644E0EF92BC4EE75D925FE0 TCNTL_FLOW_TABLE_LAST;
$58172E3AE644E0EF92BC4EE75D925FE0 TCNTL_FLOW_TABLE_RX;
$58172E3AE644E0EF92BC4EE75D925FE0 TCNTL_FLOW_TABLE_TX;
MACRO_TCNTL_INFO TCNTL_INFO_VERSION;
$30B9A4A173392B5D482C29C97080B247 TCNTL_M_POLICE_FLAG;
MACRO_TCNTL_M TCNTL_M_XDEBUG;
MACRO_TCNTL_M TCNTL_M_YDEBUG;
MACRO_TCNTL_M TCNTL_M_ZDEBUG;
$DB2348CA056F0BEB72603AE306051379 TCNTL_TAGS_ANY;
$DB2348CA056F0BEB72603AE306051379 TCNTL_TAGS_RSVP_BASEFLOW;
$DB2348CA056F0BEB72603AE306051379 TCNTL_TAGS_RSVP_SOCKET;
$DB2348CA056F0BEB72603AE306051379 TCNTL_TAGS_SOCKET_PTR;
MACRO_TCNTL_XDEBUG TCNTL_XDEBUG_ENABLED;
MACRO_TCIFLUSH TCOFLUSH;
MACRO_TCOOFF TCOOFF;
MACRO_TCOOFF TCOON;
MACRO_TCO_ACKTIME TCO_ACKTIME;
MACRO_TCO_ALTCLASS1 TCO_ALTCLASS1;
MACRO_TCO_ALTCLASS2 TCO_ALTCLASS2;
MACRO_TCO_ALTCLASS3 TCO_ALTCLASS3;
MACRO_TCO_ALTCLASS4 TCO_ALTCLASS4;
MACRO_TCO_CHECKSUM TCO_CHECKSUM;
MACRO_TCO_CONNRESIL TCO_CONNRESIL;
MACRO_TCO_ESTDELAY TCO_ESTDELAY;
MACRO_TCO_ESTFAILPROB TCO_ESTFAILPROB;
MACRO_TCO_EXPD TCO_EXPD;
MACRO_TCO_EXTFORM TCO_EXTFORM;
MACRO_TCO_FLOWCTRL TCO_FLOWCTRL;
MACRO_TCO_LTPDU TCO_LTPDU;
MACRO_TCO_NETEXP TCO_NETEXP;
MACRO_TCO_NETRECPTCF TCO_NETRECPTCF;
MACRO_TCO_PREFCLASS TCO_PREFCLASS;
MACRO_TCO_PRIORITY TCO_PRIORITY;
MACRO_TCO_PROTECTION TCO_PROTECTION;
MACRO_TCO_REASTIME TCO_REASTIME;
MACRO_TCO_RELDELAY TCO_RELDELAY;
MACRO_TCO_RELFAILPROB TCO_RELFAILPROB;
MACRO_TCO_RESERRORRATE TCO_RESERRORRATE;
MACRO_TCO TCO_THROUGHPUT;
MACRO_TCO_TRANSDEL TCO_TRANSDEL;
MACRO_TCO_TRANSFFAILPROB TCO_TRANSFFAILPROB;
MACRO_TCPOPT_TS TCPOLEN_TSTAMP_APPA;
MACRO_TCPOOB TCPOOB_HADDATA;
MACRO_TCPOOB TCPOOB_HAVEDATA;
MACRO_TCPOPT TCPOPT_EOL;
MACRO_TCPOPT TCPOPT_MAXSEG;
MACRO_TH_FIN TCPOPT_MAX_LEN;
MACRO_TCPOPT TCPOPT_NOP;
MACRO_TCPOPT TCPOPT_SACK;
MACRO_TCPOPT TCPOPT_SACK_REQ;
MACRO_TCPOPT TCPOPT_TS;
MACRO_TCPOPT_TS TCPOPT_TS_LEN;
MACRO_TCPOPT TCPOPT_WINDOW;
MACRO_NDPROTO TCPPROTO;
MACRO_TCPREXMTTHRESH TCPREXMTTHRESH;
MACRO_TCPS TCPS_CLOSED;
MACRO_TCPS TCPS_CLOSE_WAIT;
MACRO_TCPS TCPS_CLOSING;
MACRO_TCPS TCPS_ESTABLISHED;
MACRO_TCPS TCPS_FIN_WAIT_1;
MACRO_TCPS TCPS_FIN_WAIT_2;
MACRO_TCPS TCPS_FREE;
MACRO_TCPS TCPS_LAST_ACK;
MACRO_TCPS TCPS_LISTEN;
MACRO_TCPS TCPS_SYN_RECEIVED;
MACRO_TCPS TCPS_SYN_SENT;
MACRO_TCPS TCPS_TIME_WAIT;
MACRO_TCPTV_KEEPCNT TCPTV_KEEPCNT;
MACRO_TCPTV TCPTV_SRTTBASE;
MACRO_TCPT_PERSIST TCPT_2MSL;
MACRO_TCPT_PERSIST TCPT_KEEP;
MACRO_TCPT TCPT_NTIMERS;
MACRO_TCPT_PERSIST TCPT_PERSIST;
MACRO_TCPT TCPT_REXMT;
MACRO_TCP_ISSINCR TCP_ISSINCR;
MACRO_TCP_KEEPALIVE TCP_KEEPALIVE;
MACRO_TCP_RPTR2RXT TCP_KEEPCNT;
MACRO_TCP_RPTR2RXT TCP_KEEPIDLE;
MACRO_TCP_RPTR2RXT TCP_KEEPINIT;
MACRO_TCP_RPTR2RXT TCP_KEEPINTVL;
MACRO_TCP_LINGERTIME TCP_LINGERTIME;
MACRO_TCP_MAXRXTSHIFT TCP_MAXRXTSHIFT;
MACRO_TCP_MAXSEG TCP_MAXSEG;
MACRO_TCP_MSS TCP_MAXWIN;
MACRO_TCP_MAX TCP_MAX_WINSHIFT;
MACRO_TCP_MSS TCP_MSS;
MACRO_TA TCP_NDEBUG;
MACRO_TCP_RPTR2RXT TCP_NODELACK;
MACRO_TCP TCP_NODELAY;
MACRO_TCP_NSTATES TCP_NSTATES;
MACRO_TCP_RPTR2RXT TCP_PAWS;
MACRO_TCP_RPTR2RXT TCP_PUSH;
MACRO_SPECIALS TCP_PUSH_BIT;
MACRO_TCP_RECVSPACE TCP_RECVSPACE;
MACRO_TCP_RPTR2RXT TCP_RPTR2RXT;
MACRO_TCP_RTTVAR TCP_RTTVAR_SCALE;
MACRO_TCP_RTTVAR TCP_RTTVAR_SHIFT;
MACRO_TCP_RTT TCP_RTT_SCALE;
MACRO_TCP_RTT TCP_RTT_SHIFT;
MACRO_TCP_RPTR2RXT TCP_SACKENA;
MACRO_TCP_SACK TCP_SACK_ELEMENT_LEN;
MACRO__TCBHASHSIZE TCP_SENDSPACE;
MACRO_TCP_RPTR2RXT TCP_TSOPTENA;
MACRO_TCPT_PERSIST TCP_TTL;
MACRO_TCStatistics TCReqCBs;
MACRO_TCStatistics TCRequests;
MACRO_TCSANOW TCSADRAIN;
MACRO_TCSANOW TCSAFLUSH;
MACRO_TCSANOW TCSANOW;
MACRO_TCSBREAK TCSBREAK;
MACRO_TCSBRK TCSBRK;
MACRO_TCStatistics TCStatistics;
MACRO_TCStatistics TCTimeStamps;
MACRO_TCStatistics TCWinXY;
MACRO_TCStatistics TCXInput;
MACRO_TCSBRK TCXONC;
MACRO_VDATA TDATA;
char *TE;
MACRO_TEGC TEGC_SWITCH;
MACRO_IAC TELNET_ABORT;
MACRO_IAC TELNET_AO;
MACRO_IAC TELNET_AYT;
MACRO_IAC TELNET_BREAK;
MACRO_IAC TELNET_DM;
MACRO_IAC TELNET_DO;
MACRO_IAC TELNET_DONT;
MACRO_IAC TELNET_EC;
MACRO_IAC TELNET_EL;
MACRO_IAC TELNET_EOR;
MACRO_IAC TELNET_GA;
MACRO_IAC TELNET_IAC;
MACRO_IAC TELNET_IP;
MACRO_IAC TELNET_NOP;
MACRO_IAC TELNET_SB;
MACRO_IAC TELNET_SE;
MACRO_IAC TELNET_SUSP;
MACRO_IAC TELNET_SYNCH;
MACRO_IAC TELNET_WILL;
MACRO_IAC TELNET_WONT;
MACRO_IAC TELNET_xEOF;
MACRO_TELOPT TELOPT_3270REGIME;
MACRO_TELOPT TELOPT_AUTHENTICATION;
MACRO_TELOPT TELOPT_BINARY;
MACRO_TELOPT TELOPT_BM;
MACRO_TELOPT TELOPT_DET;
MACRO_TELOPT TELOPT_ECHO;
MACRO_TELOPT TELOPT_EOR;
MACRO_TELOPT TELOPT_EXOPL;
MACRO_TELOPT TELOPT_LFLOW;
MACRO_TELOPT TELOPT_LINEMODE;
MACRO_TELOPT TELOPT_LOGOUT;
MACRO_TELOPT TELOPT_NAMS;
MACRO_TELOPT TELOPT_NAOCRD;
MACRO_TELOPT TELOPT_NAOFFD;
MACRO_TELOPT TELOPT_NAOHTD;
MACRO_TELOPT TELOPT_NAOHTS;
MACRO_TELOPT TELOPT_NAOL;
MACRO_TELOPT TELOPT_NAOLFD;
MACRO_TELOPT TELOPT_NAOP;
MACRO_TELOPT TELOPT_NAOVTD;
MACRO_TELOPT TELOPT_NAOVTS;
MACRO_TELOPT TELOPT_NAWS;
MACRO_TELOPT TELOPT_NEW_ENVIRON;
MACRO_TELOPT TELOPT_OLD_ENVIRON;
MACRO_TELOPT TELOPT_OUTMRK;
MACRO_TELOPT TELOPT_RCP;
MACRO_TELOPT TELOPT_RCTE;
MACRO_TELOPT TELOPT_SGA;
MACRO_TELOPT TELOPT_SNDLOC;
MACRO_TELOPT TELOPT_STATUS;
MACRO_TELOPT TELOPT_SUPDUP;
MACRO_TELOPT TELOPT_SUPDUPOUTPUT;
MACRO_TELOPT TELOPT_TM;
MACRO_TELOPT TELOPT_TSPEED;
MACRO_TELOPT TELOPT_TTYLOC;
MACRO_TELOPT TELOPT_TTYPE;
MACRO_TELOPT TELOPT_TUID;
MACRO_TELOPT TELOPT_X3PAD;
MACRO_TELOPT TELOPT_XASCII;
MACRO_TELOPT TELOPT_XDISPLOC;
MACRO_TELQUAL_AUTHTYPE TELQUAL_AUTHTYPE_KERBEROS;
MACRO_TELQUAL_AUTHTYPE_KERBEROS TELQUAL_AUTHTYPE_KERBEROS_USERNAME;
MACRO_TELQUAL_AUTHTYPE TELQUAL_AUTHTYPE_KERBEROS_V4;
MACRO_TELQUAL_AUTHTYPE TELQUAL_AUTHTYPE_KERBEROS_V5;
MACRO_TELQUAL_AUTHTYPE TELQUAL_AUTHTYPE_NONE;
MACRO_TELQUAL_AUTHTYPE TELQUAL_AUTHTYPE_PRIVATE;
MACRO_TELQUAL TELQUAL_INFO;
MACRO_TELQUAL TELQUAL_IS;
MACRO_TELQUAL TELQUAL_SEND;
MACRO_QUALIFIED TEMPLATE_TOKEN;
MACRO_ZERO TEN;
MACRO_TBEG TEND;
MACRO_UNACCESSIBLE TERMINFO_TOO_LONG;
MACRO_OTTYDISC TERMIODISC;
MACRO_UNACCESSIBLE TERM_BAD_MALLOC;
MACRO_TERM_NONE TERM_D40;
MACRO_TERM_NONE TERM_D42;
MACRO_UNACCESSIBLE TERM_DBG_BAD_MALLOC;
MACRO_TERM TERM_ERR_SET;
MACRO_TERM_NONE TERM_H45;
MACRO_TERM_NONE TERM_NONE;
MACRO_TERM_NONE TERM_TEC;
MACRO_TERM_NONE TERM_TEX;
MACRO_TERM_NONE TERM_V10;
MACRO_TERM_NONE TERM_V61;
$A4C507EE3209778ECF0B9DDC8BD963BA TESTING_MEM;
MACRO_COLOR_MAP TEST_REG;
MACRO_TF2 TF2_CLUA_ALIAS;
MACRO_TF2 TF2_CLUA_CNXQ;
MACRO_TF2 TF2_CLUA_CNXR;
MACRO_TF2_INHERIT TF2_INHERIT;
MACRO_TF2 TF2_NODELACK;
MACRO_TF2 TF2_PAWS;
MACRO_TF2 TF2_PUSH;
MACRO_TF2 TF2_SACK;
MACRO_TF2 TF2_SACKENA;
MACRO_TF2 TF2_TSOPT;
MACRO_TF2 TF2_TSOPTENA;
MACRO_TBADADDR TFLOW;
MACRO_TF TF_ACKNOW;
MACRO_TF TF_DELACK;
MACRO_TF TF_NODELAY;
MACRO_TF TF_NOOPT;
MACRO_TF TF_RCVD_SCALE;
MACRO_TF TF_REQ_SCALE;
MACRO_TF TF_SENTFIN;
MACRO_TF TF_UIOMOVED;
MACRO_PXG TGA_DTYPE;
MACRO_TGEXEC TGEXEC;
MACRO_TGREAD TGREAD;
MACRO_TGWRITE TGWRITE;
MACRO_DEVGEOM THIRD_PARTY_DTYPE;
MACRO_THIRD THIRD_TOOLVER;
MACRO_D THOUSEP;
MACRO_THREAD_INFO THREAD_BASIC_INFO;
MACRO_THREAD_EVENTS THREAD_EVENTS_INFO;
MACRO_THREAD_KERNEL THREAD_EXCEPTION_PORT;
MACRO_THREAD_INFO THREAD_INFO_MAX;
MACRO_THREAD_KERNEL THREAD_KERNEL_PORT;
MACRO_THREAD_KERNEL THREAD_REPLY_PORT;
MACRO_THREAD_SCHED THREAD_SCHED_INFO;
MACRO_THREAD_SIGNAL THREAD_SIGNAL_INFO;
MACRO_THREAD THREAD_STATE_FLAVOR_LIST;
MACRO_THREAD THREAD_STATE_MAX;
MACRO_ZERO THREE;
MACRO_NAK THRESHSMOOTH;
MACRO_TH_FIN TH_ACK;
MACRO_THREAD_SCHED TH_BOUND_PROCESSOR;
MACRO_TH_BOUND TH_BOUND_PSET;
MACRO_TH_FIN TH_FIN;
MACRO_TH_FLAGS TH_FLAGS_IDLE;
MACRO_TH_FLAGS TH_FLAGS_SWAPPED;
MACRO_TH_FIN TH_PUSH;
MACRO_TH_FIN TH_RST;
MACRO_TH_STATE TH_STATE_HALTED;
MACRO_TH TH_STATE_RUNNING;
MACRO_TH_STATE TH_STATE_STOPPED;
MACRO_TH_STATE TH_STATE_UNINTERRUPTIBLE;
MACRO_TH_STATE TH_STATE_WAITING;
MACRO_TH_FIN TH_SYN;
MACRO_TH_FIN TH_URG;
MACRO_TH TH_USAGE_SCALE;
char *TI;
MACRO_XTABS TILDE;
MACRO_CLOCK TIMELEN;
MACRO_TIMEOFDAY TIMEOFDAY;
MACRO_TIMER_ABS TIMER_ABS;
MACRO_TIMER_ABSTIME TIMER_ABSTIME;
MACRO_TIMER TIMER_MAX;
MACRO_TIMER_RATE TIMER_RATE;
MACRO_TIME_OK TIME_DEL;
MACRO_TIME_OK TIME_ERROR;
MACRO_TIME_OK TIME_INS;
MACRO_TIME TIME_MICROS_MAX;
MACRO_CHARMAP TIME_NL_LANGINFO;
MACRO_TIME_OK TIME_OK;
MACRO_TIME_OK TIME_OOP;
MACRO_CHARMAP TIME_STRFTIME;
MACRO_CHARMAP TIME_STRPTIME;
MACRO_CHARMAP TIME_TIME_INIT;
MACRO_TIME_OK TIME_WAIT;
MACRO_CHARMAP TIME_WCSFTIME;
MACRO_TBADADDR TINDOUT;
MACRO_TBEG TINS;
MACRO_TIOCCBRK TIOCCBRK;
MACRO_TIOCCDTR TIOCCDTR;
MACRO_TIOCCMLB TIOCCMLB;
MACRO_TIOCM_RI TIOCEXCL;
MACRO_TIOCHPCL TIOCHPCL;
MACRO_TIOCISATTY TIOCISATTY;
MACRO_TIOCM TIOCM_CAR;
MACRO_TIOCM_CD TIOCM_CD;
MACRO_TIOCM TIOCM_CTS;
MACRO_TIOCM_RI TIOCM_DSR;
MACRO_TIOCM TIOCM_DTR;
MACRO_TIOCM TIOCM_LE;
MACRO_TIOCM_RI TIOCM_RI;
MACRO_TIOCM_CD TIOCM_RNG;
MACRO_TIOCM TIOCM_RTS;
MACRO_TIOCM TIOCM_SR;
MACRO_TIOCM TIOCM_ST;
MACRO_TIOCNOTTY TIOCNOTTY;
MACRO_TIOCM_RI TIOCNXCL;
MACRO_TIOCPKT TIOCPKT_DATA;
MACRO_TIOCPKT TIOCPKT_DOSTOP;
MACRO_TIOCPKT TIOCPKT_FLUSHREAD;
MACRO_TIOCPKT TIOCPKT_FLUSHWRITE;
MACRO_TIOCPKT TIOCPKT_NOSTOP;
MACRO_TIOCPKT TIOCPKT_START;
MACRO_TIOCPKT TIOCPKT_STOP;
MACRO_TIOCSBRK TIOCSBRK;
MACRO_TIOCSCTTY TIOCSCTTY;
MACRO_TIOCSDTR TIOCSDTR;
MACRO_TIOCSIG TIOCSIG;
MACRO_TIOCSMLB TIOCSMLB;
MACRO_TIOCSTART TIOCSTART;
MACRO_TIOCPKT TIOCSTOP;
tis_alloc_mflags_tag TIS_ALLOC_MUTEX_NOALLOC;
tis_alloc_mflags_tag TIS_ALLOC_MUTEX_PSHARED;
tis_alloc_mflags_tag TIS_ALLOC_MUTEX_RECURSIVE;
tis_mflags_tag TIS_MINIT_RECURSIVE;
MACRO__TIS_HARDWARE TIS_RWLOCK_VALID;
MACRO_TI TI_COMING_IN;
MACRO_TI TI_GOING_OUT;
MACRO_TI TI_INSWAPPED;
MACRO_TI TI_NOT_QUEUED;
MACRO_TI TI_OUTSWAPPED;
MACRO_TI TI_UNSWAPPABLE;
MACRO_TK_3D TK_3D_DARK_GC;
MACRO_TK_3D TK_3D_FLAT_GC;
MACRO_TK_3D TK_3D_LIGHT_GC;
MACRO_TK_WINDOW TK_ALL_EVENTS;
MACRO_TK_MAPPED TK_ALREADY_DEAD;
$5252AF58AF7525DA13AA82FD1F51B9F5 TK_ANCHOR_CENTER;
$5252AF58AF7525DA13AA82FD1F51B9F5 TK_ANCHOR_E;
$5252AF58AF7525DA13AA82FD1F51B9F5 TK_ANCHOR_N;
$5252AF58AF7525DA13AA82FD1F51B9F5 TK_ANCHOR_NE;
$5252AF58AF7525DA13AA82FD1F51B9F5 TK_ANCHOR_NW;
$5252AF58AF7525DA13AA82FD1F51B9F5 TK_ANCHOR_S;
$5252AF58AF7525DA13AA82FD1F51B9F5 TK_ANCHOR_SE;
$5252AF58AF7525DA13AA82FD1F51B9F5 TK_ANCHOR_SW;
$5252AF58AF7525DA13AA82FD1F51B9F5 TK_ANCHOR_W;
MACRO_TK_ARGV TK_ARGV_CONSTANT;
MACRO_TK_ARGV TK_ARGV_CONST_OPTION;
MACRO_TK_ARGV_NO TK_ARGV_DONT_SKIP_FIRST_ARG;
MACRO_TK_ARGV TK_ARGV_END;
MACRO_TK_ARGV TK_ARGV_FLOAT;
MACRO_TK_ARGV TK_ARGV_FUNC;
MACRO_TK_ARGV TK_ARGV_GENFUNC;
MACRO_TK_ARGV TK_ARGV_HELP;
MACRO_TK_ARGV TK_ARGV_INT;
MACRO_TK_ARGV_NO TK_ARGV_NO_ABBREV;
MACRO_TK_ARGV_NO TK_ARGV_NO_DEFAULTS;
MACRO_TK_ARGV_NO TK_ARGV_NO_LEFTOVERS;
MACRO_TK_ARGV TK_ARGV_OPTION_NAME_VALUE;
MACRO_TK_ARGV TK_ARGV_OPTION_VALUE;
MACRO_TK_ARGV TK_ARGV_REST;
MACRO_TK_ARGV TK_ARGV_STRING;
MACRO_TK_ARGV TK_ARGV_UID;
MACRO_TK_MAPPED TK_CHECKED_IC;
MACRO_TK_CONFIG TK_CONFIG_ACTIVE_CURSOR;
MACRO_TK_CONFIG TK_CONFIG_ANCHOR;
MACRO_TK_CONFIG_ARGV TK_CONFIG_ARGV_ONLY;
MACRO_TK_CONFIG TK_CONFIG_BITMAP;
MACRO_TK_CONFIG TK_CONFIG_BOOLEAN;
MACRO_TK_CONFIG TK_CONFIG_BORDER;
MACRO_TK_CONFIG TK_CONFIG_CAP_STYLE;
MACRO_TK_CONFIG TK_CONFIG_COLOR;
MACRO_TK_CONFIG_COLOR TK_CONFIG_COLOR_ONLY;
MACRO_TK_CONFIG TK_CONFIG_CURSOR;
MACRO_TK_CONFIG TK_CONFIG_CUSTOM;
MACRO_TK_CONFIG_COLOR TK_CONFIG_DONT_SET_DEFAULT;
MACRO_TK_CONFIG TK_CONFIG_DOUBLE;
MACRO_TK_CONFIG TK_CONFIG_END;
MACRO_TK_CONFIG TK_CONFIG_FONT;
MACRO_TK_CONFIG TK_CONFIG_INT;
MACRO_TK_CONFIG TK_CONFIG_JOIN_STYLE;
MACRO_TK_CONFIG TK_CONFIG_JUSTIFY;
MACRO_TK_CONFIG TK_CONFIG_MM;
MACRO_TK_CONFIG_COLOR TK_CONFIG_MONO_ONLY;
MACRO_TK_CONFIG_COLOR TK_CONFIG_NULL_OK;
MACRO_TK_CONFIG_COLOR TK_CONFIG_OPTION_SPECIFIED;
MACRO_TK_CONFIG TK_CONFIG_PIXELS;
MACRO_TK_CONFIG TK_CONFIG_RELIEF;
MACRO_TK_CONFIG TK_CONFIG_STRING;
MACRO_TK_CONFIG TK_CONFIG_SYNONYM;
MACRO_TK_CONFIG TK_CONFIG_UID;
MACRO_TK_CONFIG_COLOR TK_CONFIG_USER_BIT;
MACRO_TK_CONFIG TK_CONFIG_WINDOW;
$F413FB130807CE2045080C3C00838D77 TK_DEFER_EVENT;
$F413FB130807CE2045080C3C00838D77 TK_DISCARD_EVENT;
MACRO_TK_DONT TK_DONT_WAIT;
MACRO_TK_READABLE TK_EXCEPTION;
MACRO_TK_WINDOW TK_FILE_EVENTS;
MACRO_TK_MAPPED TK_GRAB_FLAG;
MACRO_TK_WINDOW TK_IDLE_EVENTS;
MACRO_TK_WIDGET TK_INTERACTIVE_PRIO;
$D75A9F50BEFC37ED2CAAB9E825B0AC13 TK_JUSTIFY_CENTER;
$D75A9F50BEFC37ED2CAAB9E825B0AC13 TK_JUSTIFY_LEFT;
$D75A9F50BEFC37ED2CAAB9E825B0AC13 TK_JUSTIFY_RIGHT;
MACRO_TK_SCROLL TK_LASTEVENT;
MACRO_TK TK_MAJOR_VERSION;
MACRO_TK_MAPPED TK_MAPPED;
MACRO_TK_WIDGET TK_MAX_PRIO;
MACRO_TK TK_MINOR_VERSION;
MACRO_TK_MAPPED TK_NEED_CONFIG_NOTIFY;
MACRO_TK_3D TK_NOTIFY_SHARE;
MACRO_TK_MAPPED TK_PARENT_DESTROYED;
$F413FB130807CE2045080C3C00838D77 TK_PROCESS_EVENT;
MACRO_TK_READABLE TK_READABLE;
MACRO_TK_RELEASE TK_RELEASE_LEVEL;
MACRO_TK_RELEASE_SERIAL TK_RELEASE_SERIAL;
MACRO_TK_RELIEF TK_RELIEF_FLAT;
MACRO_TK_RELIEF TK_RELIEF_FLATLINE;
MACRO_TK_RELIEF TK_RELIEF_GROOVE;
MACRO_TK_RELIEF TK_RELIEF_RAISED;
MACRO_TK_RELIEF TK_RELIEF_RIDGE;
MACRO_TK_RELIEF TK_RELIEF_SUNKEN;
MACRO_TK_SCROLL TK_SCROLL_ERROR;
MACRO_TK_SCROLL TK_SCROLL_MOVETO;
MACRO_TK_SCROLL TK_SCROLL_PAGES;
MACRO_TK_SCROLL TK_SCROLL_UNITS;
MACRO_TK_WIDGET TK_STARTUP_FILE_PRIO;
MACRO_TK_TAG TK_TAG_SPACE;
MACRO_TK_WINDOW TK_TIMER_EVENTS;
MACRO_TK_MAPPED TK_TOP_LEVEL;
MACRO_TK_WIDGET TK_USER_DEFAULT_PRIO;
MACRO_TK_WIDGET TK_WIDGET_DEFAULT_PRIO;
MACRO_TK_WINDOW TK_WINDOW_EVENTS;
MACRO_TK_MAPPED TK_WM_COLORMAP_WINDOW;
MACRO_TK_READABLE TK_WRITABLE;
MACRO_TK_DONT TK_X_EVENTS;
MACRO_TLC_CONSOLE TLC_CONSOLE;
MACRO_TLC_DETACH TLC_DETACH;
MACRO_TLC_DISPLAY TLC_DISPLAY;
MACRO_TLC TLC_FEHOST;
MACRO_TLC_RANDOMTTY TLC_RANDOMTTY;
MACRO_TLC TLC_SPECHOST;
MACRO_TLC_TACTTY TLC_TACTTY;
MACRO_TLC_DISPLAY TLC_UNKHOST;
MACRO_TLC_UNKTTY TLC_UNKTTY;
MACRO_TBADADDR TLOOK;
MACRO_DOMAIN TLOSS;
MACRO_TLS TLS_MAX_SIZE;
MACRO_TLS TLS_PTR_BIAS;
MACRO_TMAGLEN TMAGLEN;
MACRO_TMP TMP_MAX;
MACRO_CLOCK TMZNLEN;
MACRO_TM_NONE TM_ANL;
MACRO_TM_JANUARY TM_APRIL;
MACRO_TM_JANUARY TM_AUGUST;
MACRO_TM_NONE TM_CECHO;
MACRO_TM_NONE TM_CINVIS;
MACRO_TM TM_CLEAR;
MACRO_TM_JANUARY TM_DECEMBER;
MACRO_TM TM_DEFUNCT;
TIMEOUT_TYPE TM_EXCHANGE_MEDIA;
MACRO_TM_JANUARY TM_FEBRUARY;
MACRO_TM_SUNDAY TM_FRIDAY;
TIMEOUT_TYPE TM_INIT_ELEMENT;
MACRO_TM TM_INPUT;
MACRO_TM_JANUARY TM_JANUARY;
MACRO_TM_JANUARY TM_JULY;
MACRO_TM_JANUARY TM_JUNE;
MACRO_TM_NONE TM_LCF;
MACRO_TM TM_LOAD;
MACRO_TM_JANUARY TM_MARCH;
MACRO_TM_JANUARY TM_MAY;
MACRO_TM_SUNDAY TM_MONDAY;
TIMEOUT_TYPE TM_MOVE_MEDIA;
MACRO_TM_NONE TM_NONE;
MACRO_TM_JANUARY TM_NOVEMBER;
MACRO_TM_JANUARY TM_OCTOBER;
MACRO_TM TM_OUTPUT;
TIMEOUT_TYPE TM_POSITION_TO_ELEMENT;
TIMEOUT_TYPE TM_PREVENT_ALLOW;
TIMEOUT_TYPE TM_RELEASE;
MACRO_TM TM_RELOAD;
TIMEOUT_TYPE TM_REQUEST_VOL;
TIMEOUT_TYPE TM_RESERVE;
MACRO_TM_SUNDAY TM_SATURDAY;
TIMEOUT_TYPE TM_SEND_VOL;
MACRO_TM_JANUARY TM_SEPTEMBER;
MACRO_TM_NONE TM_SET;
MACRO_TM_NONE TM_SNL;
TIMEOUT_TYPE TM_STATUS_ELEMENT;
MACRO_TM TM_STICKY;
MACRO_TM_SUNDAY TM_SUNDAY;
MACRO_TM_SUNDAY TM_THURSDAY;
MACRO_TM_SUNDAY TM_TUESDAY;
MACRO_TM TM_USE;
MACRO_TM_SUNDAY TM_WEDNESDAY;
MACRO_TM_JANUARY TM_YEAR_BASE;
MACRO_TBADADDR TNOADDR;
MACRO_TBADADDR TNODATA;
MACRO_TBADADDR TNODIS;
MACRO_TBADADDR TNOREL;
MACRO_TBADADDR TNOSTRUCTYPE;
MACRO_TBADADDR TNOTSUPPORT;
MACRO_TBADADDR TNOUDERR;
MACRO_TOCSIZE TOCSIZE;
MACRO_ITIMER TOD_MAX_SECONDS;
MACRO_TOEXEC TOEXEC;
MACRO_TOO TOO_MANY_PROCESSORS;
MACRO_LFTORG TOPBOT;
MACRO_TOP TOP_EDGE;
MACRO_TOREAD TOREAD;
MACRO_TOSTOP TOSTOP;
MACRO_NULL_DEVICE TOUCHSCREEN_DEVICE;
MACRO_TBADADDR TOUTSTATE;
MACRO_TOWRITE TOWRITE;
MACRO_TPDEV_READY TPDEV_1FM_ONCLOSE;
MACRO_TPDEV_BOM TPDEV_BLANK;
MACRO_TPDEV_BOM TPDEV_BOM;
MACRO_TPDEV_READY TPDEV_BUFFERED;
MACRO_TPDEV_CLASS TPDEV_CLASS_LEN;
MACRO_TPDEV_CLS TPDEV_CLS_3480;
MACRO_TPDEV_CLS TPDEV_CLS_8MM;
MACRO_TPDEV_CLS TPDEV_CLS_9TRK;
MACRO_TPDEV TPDEV_CLS_DLT;
MACRO_TPDEV_CLS TPDEV_CLS_QIC;
MACRO_TPDEV_CLS TPDEV_CLS_RDAT;
MACRO_TPDEV_CLS TPDEV_CLS_TK;
MACRO_TPDEV TPDEV_CLS_UNKNOWN;
MACRO_TPDEV_READY TPDEV_COMPACTING;
MACRO_TPDEV_READY TPDEV_COMPRESSING;
MACRO_TPDEV_BOM TPDEV_DONE;
MACRO_TPDEV_BOM TPDEV_EOM;
MACRO_TPDEV_BOM TPDEV_ERASED;
MACRO_TPDEV_BOM TPDEV_HARDERR;
MACRO_TPDEV_READY TPDEV_HAS_LOADER;
MACRO_TPDEV_READY TPDEV_NO_EOM;
MACRO_TPDEV_READY TPDEV_OFFLINE;
MACRO_TPDEV_BOM TPDEV_POS_VALID;
MACRO_TPDEV_BOM TPDEV_RDOPP;
MACRO_TPDEV_READY TPDEV_READY;
MACRO_TPDEV_BOM TPDEV_RESERVED1;
MACRO_TPDEV_BOM TPDEV_RESERVED2;
MACRO_TPDEV_BOM TPDEV_RETRY;
MACRO_TPDEV_READY TPDEV_REW_ONCLOSE;
MACRO_TPDEV_BOM TPDEV_RWDING;
MACRO_TPDEV_BOM TPDEV_SHRTREC;
MACRO_TPDEV_BOM TPDEV_SOFTERR;
MACRO_TPDEV_BOM TPDEV_TPMARK;
MACRO_TPDEV_BOM TPDEV_WRITTEN;
MACRO_TPDEV_BOM TPDEV_WRTPROT;
MACRO_TBADADDR TPROTO;
MACRO_TBADADDR TPROVMISMATCH;
MACRO_IEXEC TP_BSIZE;
MACRO_NTREC TP_NINDIR;
MACRO_TBADADDR TQFULL;
MACRO_TRACE TRACE;
MACRO_NULL_DEVICE TRACKBALL_DEVICE;
MACRO_PRELIM TRANSIENT;
MACRO_TRAP TRAP_BRKPT;
MACRO_TRAP TRAP_TRACE;
MACRO_TR_BREADHIT TRCSIZ;
MACRO_TREE TREE_HORIZONTAL_DEFAULT_SPACING;
MACRO_TREE TREE_INITIAL_DEPTH;
MACRO_TREE_VERTICAL TREE_VERTICAL_DEFAULT_SPACING;
MACRO_TBADADDR TRESADDR;
MACRO_TBADADDR TRESQLEN;
MACRO_TRLR TRLR_SAP;
MACRO_TRN4_MAX TRN16_MAX_MTU;
MACRO_TRN4_MEDIA TRN16_MEDIA_MTU;
MACRO_RIIndicator TRN16_RFC1042_IP_MTU;
MACRO_TRN4 TRN16_RFC1042_MAC_MTU;
MACRO_TRN4_MAX TRN4_MAX_MTU;
MACRO_TRN4_MEDIA TRN4_MEDIA_MTU;
MACRO_RIIndicator TRN4_RFC1042_IP_MTU;
MACRO_TRN4 TRN4_RFC1042_MAC_MTU;
MACRO_TRN_AC TRN_AC;
MACRO_TRN_NON TRN_ALL_BROADCAST;
MACRO_TRN_BANDWIDTH TRN_BANDWIDTH_16MB;
MACRO_TRN_FRAME TRN_BANDWIDTH_4MB;
MACRO_CTR TRN_CHAR;
MACRO_TRN_AC TRN_FC;
MACRO_TRN_FRAME TRN_FRAME;
MACRO_TRN TRN_LF_11407;
MACRO_TRN TRN_LF_1500;
MACRO_TRN TRN_LF_17800;
MACRO_TRN TRN_LF_2052;
MACRO_TRN TRN_LF_4472;
MACRO_TRN TRN_LF_516;
MACRO_TRN TRN_LF_65535;
MACRO_TRN TRN_LF_8144;
MACRO_CTR TRN_MIB_ENTRY;
MACRO_CTR TRN_MIB_STAT_ENTRY;
MACRO_CTR TRN_MIB_TIMER_ENTRY;
MACRO_TRN_NON TRN_NON_BROADCAST;
MACRO_TRN_NON TRN_SINGLE_BROADCAST;
MACRO_NULL TRUE;
MACRO_TRUSTED_INTMASK TRUSTED_INTMASK_LEN;
MACRO_TRUSTED TRUSTED_MASK_LEN;
MACRO_HOST_NOT TRY_AGAIN;
MACRO_TR_BREADHIT TR_BREADHIT;
MACRO_TR_BREADHIT TR_BREADHITRA;
MACRO_TR_BREADHIT TR_BREADMISS;
MACRO_TR_BREADHIT TR_BREADMISSRA;
MACRO_TR_BREADHIT TR_BREALLOC;
MACRO_TR_BREADHIT TR_BRELSE;
MACRO_TR TR_BUFSIZE;
MACRO_TR_BREADHIT TR_BWRITE;
MACRO_TR_BREADHIT TR_CACHEFOD;
MACRO_TR_BREADHIT TR_EINTRANS;
MACRO_TR_BREADHIT TR_EWAITMEM;
MACRO_TR_BREADHIT TR_EXFOD;
MACRO_TR_BREADHIT TR_FRECLAIM;
MACRO_TR_BREADHIT TR_INTRANS;
MACRO_TR_BREADHIT TR_MALL;
MACRO_TR_BREADHIT TR_NFLAGS;
MACRO_TR_BREADHIT TR_PGINDONE;
MACRO_TR_PGRP TR_PGRP;
MACRO_TR_PIDS TR_PIDS;
MACRO_TR_BREADHIT TR_RECLAIM;
MACRO_TR_BREADHIT TR_STAMP;
MACRO_TR_BREADHIT TR_SWAPIN;
MACRO_TR_BREADHIT TR_SWAPIO;
MACRO_TR_SYSC TR_SYSC;
MACRO_TR_UIDS TR_UIDS;
MACRO_FRACTION TR_USRS;
MACRO_TR_BREADHIT TR_VADVISE;
MACRO_TR_BREADHIT TR_VRFOD;
MACRO_TR_BREADHIT TR_WAITMEM;
MACRO_TR_BREADHIT TR_XFODHIT;
MACRO_TR_BREADHIT TR_XFODMISS;
MACRO_TR_BREADHIT TR_XIFREC;
MACRO_TR_BREADHIT TR_XSFREC;
MACRO_TR_BREADHIT TR_ZFOD;
MACRO_TTYDISC TSBDISC;
MACRO_TSGID TSGID;
MACRO_TSP TSPTYPENUMBER;
MACRO_TSPVERSION TSPVERSION;
MACRO_TSP TSP_ACCEPT;
MACRO_TSP TSP_ACK;
MACRO_TSP TSP_ADJTIME;
MACRO_TSP TSP_ANY;
MACRO_TSP TSP_CONFLICT;
MACRO_TSP TSP_DATE;
MACRO_TSP TSP_DATEACK;
MACRO_TSP TSP_DATEREQ;
MACRO_TSP TSP_ELECTION;
MACRO_TSP TSP_LOOP;
MACRO_TSP TSP_MASTERACK;
MACRO_TSP TSP_MASTERREQ;
MACRO_TSP TSP_MASTERUP;
MACRO_TSP TSP_MSITE;
MACRO_TSP TSP_MSITEREQ;
MACRO_TSP TSP_QUIT;
MACRO_TSP TSP_REFUSE;
MACRO_TSP TSP_RESOLVE;
MACRO_TSP TSP_SETDATE;
MACRO_TSP TSP_SETDATEREQ;
MACRO_TSP TSP_SETTIME;
MACRO_TSP TSP_SLAVEUP;
MACRO_TSP TSP_TEST;
MACRO_TSP TSP_TRACEOFF;
MACRO_TSP TSP_TRACEON;
MACRO_TBADADDR TSTATECHNG;
MACRO_AREGTYPE TSUID;
MACRO_TSVTX TSVTX;
MACRO_TBADADDR TSYSERR;
MACRO_TS TS_ADDR;
MACRO_TS_TIMEOUT TS_ASLEEP;
MACRO_TS_TIMEOUT TS_ASYNC;
MACRO_TS TS_BITS;
MACRO_TS_BKSL TS_BKSL;
MACRO_TS_TIMEOUT TS_BUSY;
MACRO_TS_TIMEOUT TS_CARR_ON;
MACRO_TS_TIMEOUT TS_CLOSING;
MACRO_TS TS_CLRI;
MACRO_TS_BKSL TS_CNTTB;
MACRO_TS_TIMEOUT TS_DRAIN_CL;
MACRO_TS TS_END;
MACRO_TS_BKSL TS_ERASE;
MACRO_TS_TIMEOUT TS_FLUSH;
MACRO_TS_TIMEOUT TS_HUPCLS;
MACRO_TS TS_INODE;
MACRO_TS_BKSL TS_INTIMEOUT;
MACRO_TS_TIMEOUT TS_INUSE;
MACRO_TS_TIMEOUT TS_ISOPEN;
MACRO_O_BLKINUSE TS_ISUSP;
MACRO_TS_BKSL TS_LNCH;
MACRO_TS_LOCAL TS_LOCAL;
MACRO_TS_TIMEOUT TS_MODEM_ON;
MACRO_TS_TIMEOUT TS_NBIO;
MACRO_TS_TIMEOUT TS_NEED_PARAM;
MACRO_TS_NOCHANGE TS_NOCHANGE;
MACRO_TS_TIMEOUT TS_NOFLOWCHARS;
MACRO_TS_TIMEOUT TS_ONDELAY;
MACRO_TS TS_TAPE;
MACRO_TS_TIMEOUT TS_TBLOCK;
MACRO_TS_TIMEOUT TS_TIMEOUT;
MACRO_TS_TIMEOUT TS_TTSTOP;
MACRO_TS_BKSL TS_TYPEN;
MACRO_TS_TIMEOUT TS_WOPEN;
MACRO_TS_TIMEOUT TS_XCLUDE;
MACRO_TTIPRI TTIPRI;
MACRO_TTMAP_BUFMAX TTMAP_BUFMAX;
MACRO_TTMAP_BUFMAX TTMAP_MAXSIZE;
MACRO_TTMAP TTMAP_NAMELEN;
MACRO_TTMAP_PAT TTMAP_PAT_SIZE;
MACRO_TTMAP_PAT TTMAP_REP_SIZE;
MACRO_TTMAP TTMAP_VERSION;
MACRO_TTMASK TTMASK;
MACRO_TTIPRI TTOPRI;
MACRO_TTYDEF_OFLAG TTYDEF_CFLAG;
MACRO_TTYDEF TTYDEF_IFLAG;
MACRO_TTYDEF_OFLAG TTYDEF_LFLAG;
MACRO_TTYDEF_OFLAG TTYDEF_OFLAG;
MACRO_TTYDEF_SPEED TTYDEF_SPEED;
MACRO_TTYDISC TTYDISC;
MACRO_TTMASK TTYHOG;
MACRO_ORDINARY TTY_CHARMASK;
MACRO_ORDINARY TTY_ERRORMASK;
MACRO_TTY_FE TTY_FE;
MACRO_TTY TTY_NAME_MAX;
MACRO_TTY_ON TTY_ON;
MACRO_TTY_FE TTY_PE;
MACRO_ORDINARY TTY_QUOTE;
MACRO_TTY_ON TTY_SECURE;
MACRO_NAME_SIZE TTY_SIZE;
MACRO_TUEXEC TUEXEC;
MACRO_TUREAD TUREAD;
MACRO_TUWRITE TUWRITE;
MACRO_TVERSLEN TVERSLEN;
MACRO_ZERO TWO;
MACRO_UNLOCK TXTLOCK;
MACRO_TYPE TYPE_A;
MACRO_TYPE_IP TYPE_COMPRESSED_TCP;
MACRO_TYPE TYPE_E;
MACRO_TYPE_ERROR TYPE_ERROR;
MACRO_TYPE TYPE_I;
MACRO_TYPE_IP TYPE_IP;
MACRO_TYPE TYPE_L;
MACRO_TYPE_IP TYPE_UNCOMPRESSED_TCP;
MACRO_TZNAME TZNAME_MAX;
MACRO_TZ_MAX TZ_MAX_CHARS;
MACRO_TZ_MAX_LEAPS TZ_MAX_LEAPS;
MACRO_TZ TZ_MAX_TIMES;
MACRO_TZ_MAX TZ_MAX_TYPES;
MACRO_T_ABSREQ T_ABSREQ;
MACRO_T_NOPROTECT T_ACTIVEPROTECT;
MACRO_T_ADDR T_ADDR;
MACRO_T T_ALIGN;
MACRO_T_ADDR T_ALL;
MACRO_T_ALLOPT T_ALLOPT;
MACRO_T T_ARITH;
MACRO_T_MMANG T_AST;
MACRO_T_BIND T_BIND;
MACRO_T_BIND_STR T_BIND_STR;
MACRO_T_BIND T_CALL;
MACRO_T_BIND_STR T_CALL_STR;
MACRO_T_MORE T_CHECK;
MACRO_T_CLASS0 T_CLASS0;
MACRO_T_CLASS0 T_CLASS1;
MACRO_T_CLASS0 T_CLASS2;
MACRO_T_CLASS0 T_CLASS3;
MACRO_T_CLASS0 T_CLASS4;
MACRO_T_COTS T_CLTS;
MACRO_T_LISTEN T_CONNECT;
MACRO_T_IOV T_COTS;
MACRO_T_COTS T_COTS_ORD;
MACRO_T_ROUTINE T_CRITIC_ECP;
MACRO_T_MORE T_CURRENT;
MACRO_T_LISTEN T_DATA;
MACRO_T_UNINIT T_DATAXFER;
MACRO_T_MORE T_DEFAULT;
MACRO_T_BIND T_DIS;
MACRO_T_LISTEN T_DISCONNECT;
MACRO_T_BIND_STR T_DIS_STR;
MACRO_T_LISTEN T_EVENTS;
MACRO_T_LISTEN T_EXDATA;
MACRO_T_MORE T_EXPEDITED;
MACRO_T_MORE T_FAILURE;
MACRO_T_ROUTINE T_FLASH;
MACRO_D T_FMT;
MACRO_D T_FMT_AMPM;
MACRO_TCP_KEEPALIVE T_GARBAGE;
MACRO_T_LISTEN T_GODATA;
MACRO_T_LISTEN T_GOEXDATA;
MACRO_T_HITHRPT T_HIREL;
MACRO_T_HITHRPT T_HITHRPT;
MACRO_T_UNINIT T_IDLE;
MACRO_T T_IFAULT;
MACRO_T_IFAULT T_IFAULT_BPT;
MACRO_T_IFAULT T_IFAULT_BUGCK;
MACRO_T_IFAULT T_IFAULT_FEN;
MACRO_T_IFAULT T_IFAULT_GENT;
MACRO_T_IFAULT T_IFAULT_ILLOP;
MACRO_T_IFAULT T_IFAULT_OPDEC;
MACRO_T_ROUTINE T_IMMEDIATE;
MACRO_T_UNINIT T_INCON;
MACRO_T_ROUTINE T_INETCONTROL;
MACRO_T_INET_IP T_INET_IP;
MACRO_T_INET T_INET_TCP;
MACRO_T_INET_UDP T_INET_UDP;
MACRO_T_ABSREQ T_INFINITE;
MACRO_T_BIND T_INFO;
MACRO_T_BIND_STR T_INFO_STR;
MACRO_T_UNINIT T_INREL;
MACRO_T_INVALID T_INVALID;
MACRO_T_IOV T_IOV_MAX;
MACRO_IP_DONTROUTE T_IP_BROADCAST;
MACRO_IP_REUSEADDR T_IP_DONTROUTE;
MACRO_INET_IP T_IP_OPTIONS;
MACRO_T_IP_REUSEADDR T_IP_REUSEADDR;
MACRO_T_IP T_IP_TOS;
MACRO_T_IP_TTL T_IP_TTL;
MACRO_T_NOPROTECT T_ISO_TP;
MACRO_T_NOTOS T_LDELAY;
MACRO_T_LISTEN T_LISTEN;
MACRO_T_NOPROTECT T_LTPDUDFLT;
MACRO_T T_MMANG;
MACRO_T_MMANG T_MMANG_ACV;
MACRO_T_MMANG T_MMANG_FOE;
MACRO_T_MMANG T_MMANG_FOR;
MACRO_T_MMANG T_MMANG_FOW;
MACRO_T_MMANG T_MMANG_TNV;
MACRO_T_MORE T_MORE;
MACRO_T_MORE T_NEGOTIATE;
MACRO_T_ROUTINE T_NETCONTROL;
MACRO_T_YES T_NO;
MACRO_T_NOPROTECT T_NOPROTECT;
MACRO_T_NOTOS T_NOTOS;
MACRO_T_MORE T_NOTSUPPORT;
MACRO_T_ADDR T_OPT;
MACRO_T_BIND T_OPTMGMT;
MACRO_T_BIND_STR T_OPTMGMT_STR;
MACRO_T_LISTEN T_ORDREL;
MACRO_T_SENDZERO T_ORDRELDATA;
MACRO_T_UNINIT T_OUTCON;
MACRO_T_UNINIT T_OUTREL;
MACRO_T_ROUTINE T_OVERRIDEFLASH;
MACRO_T_MORE T_PARTSUCCESS;
MACRO_T_NOPROTECT T_PASSIVEPROTECT;
MACRO_T_PRITOP T_PRIDFLT;
MACRO_T_PRITOP T_PRIHIGH;
MACRO_T_PRITOP T_PRILOW;
MACRO_T_PRITOP T_PRIMID;
MACRO_T_ROUTINE T_PRIORITY;
MACRO_T_PRITOP T_PRITOP;
MACRO_T_MORE T_READONLY;
MACRO_T_ROUTINE T_ROUTINE;
MACRO_T_SENDZERO T_SENDZERO;
MACRO_T_MORE T_SUCCESS;
MACRO_T_TCL_CHECKSUM T_TCL_CHECKSUM;
MACRO_TCL_PROTECTION T_TCL_PRIORITY;
MACRO_TCL_RESERRORRATE T_TCL_PROTECTION;
MACRO_T_TCL T_TCL_RESERRORRATE;
MACRO_TCO_EXPD T_TCL_TRANSDEL;
MACRO_TCO_LTPDU T_TCO_ACKTIME;
MACRO_TCO_PREFCLASS T_TCO_ALTCLASS1;
MACRO_TCO_ALTCLASS1 T_TCO_ALTCLASS2;
MACRO_TCO_ALTCLASS2 T_TCO_ALTCLASS3;
MACRO_TCO_ALTCLASS3 T_TCO_ALTCLASS4;
MACRO_TCO_FLOWCTRL T_TCO_CHECKSUM;
MACRO_TCO_RELDELAY T_TCO_CONNRESIL;
MACRO_TCO_RELFAILPROB T_TCO_ESTDELAY;
MACRO_TCO_TRANSFFAILPROB T_TCO_ESTFAILPROB;
MACRO_TCO_PRIORITY T_TCO_EXPD;
MACRO_TCO_REASTIME T_TCO_EXTFORM;
MACRO_TCO_EXTFORM T_TCO_FLOWCTRL;
MACRO_TCL_PRIORITY T_TCO_LTPDU;
MACRO_TCO_CHECKSUM T_TCO_NETEXP;
MACRO_TCO_NETEXP T_TCO_NETRECPTCF;
MACRO_TCO_NETRECPTCF T_TCO_PREFCLASS;
MACRO_TCO_PROTECTION T_TCO_PRIORITY;
MACRO_TCO_CONNRESIL T_TCO_PROTECTION;
MACRO_TCO_ACKTIME T_TCO_REASTIME;
MACRO_TCO_ESTDELAY T_TCO_RELDELAY;
MACRO_TCO_ESTFAILPROB T_TCO_RELFAILPROB;
MACRO_TCO_TRANSDEL T_TCO_RESERRORRATE;
MACRO_T_TCO T_TCO_THROUGHPUT;
MACRO_TCO T_TCO_TRANSDEL;
MACRO_TCO_RESERRORRATE T_TCO_TRANSFFAILPROB;
MACRO_TCP_MAXSEG T_TCP_KEEPALIVE;
MACRO_TCP T_TCP_MAXSEG;
MACRO_T_TCP T_TCP_NODELAY;
MACRO_T_ADDR T_UDATA;
MACRO_T_LISTEN T_UDERR;
MACRO_T_BIND T_UDERROR;
MACRO_T_BIND_STR T_UDERROR_STR;
MACRO_T_UNINIT T_UNBND;
MACRO_T_UNINIT T_UNINIT;
MACRO_T_BIND T_UNITDATA;
MACRO_T_BIND_STR T_UNITDATA_STR;
MACRO__SC_T T_UNSPEC;
MACRO_T_UNUSED T_UNUSED;
MACRO_T_SENDZERO T_XPG4_1;
MACRO_T_SENDZERO T_XPG5;
MACRO_T_YES T_YES;
int TclX_AsyncCommandLoop(Tcl_Interp *interp, int options, char *endCommand, char *prompt1, char *prompt2);
int TclX_CommandLoop(Tcl_Interp *interp, int options, char *endCommand, char *prompt1, char *prompt2);
void TclX_ErrorExit(Tcl_Interp *interp, int exitCode);
void TclX_EvalRCFile(Tcl_Interp *interp);
void TclX_Main(int argc, char **argv, Tcl_AppInitProc *appInitProc);
void TclX_PrintResult(Tcl_Interp *interp, int intResult, char *checkCmd);
void TclX_SetAppInfo(int defaultValues, char *appName, char *appLongName, char *appVersion, int appPatchlevel);
void TclX_SetAppSignalErrorHandler(TclX_AppSignalErrorHandler errorFunc, ClientData clientData);
void TclX_SetupSigInt(void);
void TclX_SplitWinCmdLine(int *argcPtr, char ***argvPtr);
void Tcl_AddErrorInfo(Tcl_Interp *interp, char *message);
int Tcl_AfterCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
char *Tcl_Alloc(unsigned int size);
void Tcl_AllowExceptions(Tcl_Interp *interp);
int Tcl_AppInit(Tcl_Interp *interp);
void Tcl_AppendElement(Tcl_Interp *interp, char *string);
void Tcl_AppendResult(Tcl_Interp *interp, ...);
Tcl_AsyncHandler Tcl_AsyncCreate(Tcl_AsyncProc *proc, ClientData clientData);
void Tcl_AsyncDelete(Tcl_AsyncHandler async);
int Tcl_AsyncInvoke(Tcl_Interp *interp, int code);
void Tcl_AsyncMark(Tcl_AsyncHandler async);
int Tcl_AsyncReady(void);
void Tcl_BackgroundError(Tcl_Interp *interp);
char Tcl_Backslash(char *src, int *readPtr);
void Tcl_CallWhenDeleted(Tcl_Interp *interp, Tcl_InterpDeleteProc *proc, ClientData clientData);
void Tcl_CancelIdleCall(Tcl_IdleProc *idleProc, ClientData clientData);
int Tcl_Close(Tcl_Interp *interp, Tcl_Channel chan);
int Tcl_CommandComplete(char *cmd);
char *Tcl_Concat(int argc, char **argv);
int Tcl_ConvertElement(char *src, char *dst, int flags);
int Tcl_CreateAlias(Tcl_Interp *slave, char *slaveCmd, Tcl_Interp *target, char *targetCmd, int argc, char **argv);
Tcl_Channel Tcl_CreateChannel(Tcl_ChannelType *typePtr, char *chanName, ClientData instanceData, int mask);
void Tcl_CreateChannelHandler(Tcl_Channel chan, int mask, Tcl_ChannelProc *proc, ClientData clientData);
void Tcl_CreateCloseHandler(Tcl_Channel chan, Tcl_CloseProc *proc, ClientData clientData);
Tcl_Command Tcl_CreateCommand(Tcl_Interp *interp, char *cmdName, Tcl_CmdProc *proc, ClientData clientData, Tcl_CmdDeleteProc *deleteProc);
void Tcl_CreateEventSource(Tcl_EventSetupProc *setupProc, Tcl_EventCheckProc *checkProc, ClientData clientData);
void Tcl_CreateExitHandler(Tcl_ExitProc *proc, ClientData clientData);
void Tcl_CreateFileHandler(Tcl_File file, int mask, Tcl_FileProc *proc, ClientData clientData);
Tcl_Interp *Tcl_CreateInterp(void);
void Tcl_CreateMathFunc(Tcl_Interp *interp, char *name, int numArgs, Tcl_ValueType *argTypes, Tcl_MathProc *proc, ClientData clientData);
void Tcl_CreateModalTimeout(int milliseconds, Tcl_TimerProc *proc, ClientData clientData);
int Tcl_CreatePipeline(Tcl_Interp *interp, int argc, char **argv, int **pidArrayPtr, int *inPipePtr, int *outPipePtr, int *errFilePtr);
Tcl_Interp *Tcl_CreateSlave(Tcl_Interp *interp, char *slaveName, int isSafe);
Tcl_TimerToken Tcl_CreateTimerHandler(int milliseconds, Tcl_TimerProc *proc, ClientData clientData);
Tcl_Trace Tcl_CreateTrace(Tcl_Interp *interp, int level, Tcl_CmdTraceProc *proc, ClientData clientData);
char *Tcl_DStringAppend(Tcl_DString *dsPtr, char *string, int length);
char *Tcl_DStringAppendElement(Tcl_DString *dsPtr, char *string);
void Tcl_DStringEndSublist(Tcl_DString *dsPtr);
void Tcl_DStringFree(Tcl_DString *dsPtr);
void Tcl_DStringGetResult(Tcl_Interp *interp, Tcl_DString *dsPtr);
void Tcl_DStringInit(Tcl_DString *dsPtr);
void Tcl_DStringResult(Tcl_Interp *interp, Tcl_DString *dsPtr);
void Tcl_DStringSetLength(Tcl_DString *dsPtr, int length);
void Tcl_DStringStartSublist(Tcl_DString *dsPtr);
char *Tcl_DbCkalloc(unsigned int size, char *file, int line);
int Tcl_DbCkfree(char *ptr, char *file, int line);
char *Tcl_DbCkrealloc(char *ptr, unsigned int size, char *file, int line);
void Tcl_DeleteAssocData(Tcl_Interp *interp, char *name);
void Tcl_DeleteChannelHandler(Tcl_Channel chan, Tcl_ChannelProc *proc, ClientData clientData);
void Tcl_DeleteCloseHandler(Tcl_Channel chan, Tcl_CloseProc *proc, ClientData clientData);
int Tcl_DeleteCommand(Tcl_Interp *interp, char *cmdName);
void Tcl_DeleteEventSource(Tcl_EventSetupProc *setupProc, Tcl_EventCheckProc *checkProc, ClientData clientData);
void Tcl_DeleteEvents(Tcl_EventDeleteProc *proc, ClientData clientData);
void Tcl_DeleteExitHandler(Tcl_ExitProc *proc, ClientData clientData);
void Tcl_DeleteFileHandler(Tcl_File file);
void Tcl_DeleteHashEntry(Tcl_HashEntry *entryPtr);
void Tcl_DeleteHashTable(Tcl_HashTable *tablePtr);
void Tcl_DeleteInterp(Tcl_Interp *interp);
char *Tcl_DeleteKeyedListField(Tcl_Interp *interp, const char *fieldName, const char *keyedList);
void Tcl_DeleteModalTimeout(Tcl_TimerProc *proc, ClientData clientData);
void Tcl_DeleteTimerHandler(Tcl_TimerToken token);
void Tcl_DeleteTrace(Tcl_Interp *interp, Tcl_Trace trace);
void Tcl_DetachPids(int numPids, int *pidPtr);
int Tcl_DoOneEvent(int flags);
void Tcl_DoWhenIdle(Tcl_IdleProc *proc, ClientData clientData);
void Tcl_DontCallWhenDeleted(Tcl_Interp *interp, Tcl_InterpDeleteProc *proc, ClientData clientData);
char *Tcl_DownShift(char *targetStr, const char *sourceStr);
int Tcl_Eof(Tcl_Channel chan);
char *Tcl_ErrnoId(void);
char *Tcl_ErrnoMsg(int err);
int Tcl_Eval(Tcl_Interp *interp, char *cmd);
int Tcl_EvalFile(Tcl_Interp *interp, char *fileName);
void Tcl_EventuallyFree(ClientData clientData, Tcl_FreeProc *freeProc);
void Tcl_Exit(int status);
int Tcl_ExprBoolean(Tcl_Interp *interp, char *string, int *ptr);
int Tcl_ExprDouble(Tcl_Interp *interp, char *string, double *ptr);
int Tcl_ExprLong(Tcl_Interp *interp, char *string, __int64 *ptr);
int Tcl_ExprString(Tcl_Interp *interp, char *string);
int Tcl_FileReady(Tcl_File file, int mask);
void Tcl_FindExecutable(char *argv0);
Tcl_HashEntry *Tcl_FirstHashEntry(Tcl_HashTable *tablePtr, Tcl_HashSearch *searchPtr);
int Tcl_Flush(Tcl_Channel chan);
void Tcl_Free(char *ptr);
void Tcl_FreeFile(Tcl_File file);
int Tcl_GetAlias(Tcl_Interp *interp, char *slaveCmd, Tcl_Interp **targetInterpPtr, char **targetCmdPtr, int *argcPtr, char ***argvPtr);
ClientData Tcl_GetAssocData(Tcl_Interp *interp, char *name, Tcl_InterpDeleteProc **procPtr);
int Tcl_GetBoolean(Tcl_Interp *interp, char *string, int *boolPtr);
Tcl_Channel Tcl_GetChannel(Tcl_Interp *interp, char *chanName, int *modePtr);
int Tcl_GetChannelBufferSize(Tcl_Channel chan);
Tcl_File Tcl_GetChannelFile(Tcl_Channel chan, int direction);
ClientData Tcl_GetChannelInstanceData(Tcl_Channel chan);
int Tcl_GetChannelMode(Tcl_Channel chan);
char *Tcl_GetChannelName(Tcl_Channel chan);
int Tcl_GetChannelOption(Tcl_Channel chan, char *optionName, Tcl_DString *dsPtr);
Tcl_ChannelType *Tcl_GetChannelType(Tcl_Channel chan);
int Tcl_GetCommandInfo(Tcl_Interp *interp, char *cmdName, Tcl_CmdInfo *infoPtr);
char *Tcl_GetCommandName(Tcl_Interp *interp, Tcl_Command command);
char *Tcl_GetCwd(char *buf, int len);
int Tcl_GetDouble(Tcl_Interp *interp, char *string, double *doublePtr);
int Tcl_GetErrno(void);
Tcl_File Tcl_GetFile(ClientData fileData, int type);
ClientData Tcl_GetFileInfo(Tcl_File file, int *typePtr);
char *Tcl_GetHostName(void);
int Tcl_GetInt(Tcl_Interp *interp, char *string, int *intPtr);
int Tcl_GetInterpPath(Tcl_Interp *askInterp, Tcl_Interp *slaveInterp);
int Tcl_GetKeyedListField(Tcl_Interp *interp, const char *fieldName, const char *keyedList, char **fieldValuePtr);
int Tcl_GetKeyedListKeys(Tcl_Interp *interp, const char *subFieldName, const char *keyedList, int *keysArgcPtr, char ***keysArgvPtr);
int Tcl_GetLong(Tcl_Interp *interp, const char *string, __int64 *longPtr);
Tcl_Interp *Tcl_GetMaster(Tcl_Interp *interp);
ClientData Tcl_GetNotifierData(Tcl_File file, Tcl_FileFreeProc **freeProcPtr);
int Tcl_GetOpenFile(Tcl_Interp *interp, char *string, int write, int checkUsage, ClientData *filePtr);
Tcl_PathType Tcl_GetPathType(char *path);
Tcl_Interp *Tcl_GetSlave(Tcl_Interp *interp, char *slaveName);
Tcl_Channel Tcl_GetStdChannel(int type);
int Tcl_GetUnsigned(Tcl_Interp *interp, const char *string, unsigned int *unsignedPtr);
char *Tcl_GetVar(Tcl_Interp *interp, char *varName, int flags);
char *Tcl_GetVar2(Tcl_Interp *interp, char *part1, char *part2, int flags);
int Tcl_Gets(Tcl_Channel chan, Tcl_DString *dsPtr);
int Tcl_GlobalEval(Tcl_Interp *interp, char *command);
void_pt Tcl_HandleAlloc(void_pt headerPtr, char *handlePtr);
void Tcl_HandleFree(void_pt headerPtr, void_pt entryPtr);
void_pt Tcl_HandleTblInit(const char *handleBase, int entrySize, int initEntries);
void Tcl_HandleTblRelease(void_pt headerPtr);
int Tcl_HandleTblUseCount(void_pt headerPtr, int amount);
void_pt Tcl_HandleWalk(void_pt headerPtr, int *walkKeyPtr);
void_pt Tcl_HandleXlate(Tcl_Interp *interp, void_pt headerPtr, const char *handle);
char *Tcl_HashStats(Tcl_HashTable *tablePtr);
int Tcl_Init(Tcl_Interp *interp);
void Tcl_InitHashTable(Tcl_HashTable *tablePtr, int keyType);
void Tcl_InitMemory(Tcl_Interp *interp);
int Tcl_InputBlocked(Tcl_Channel chan);
int Tcl_InputBuffered(Tcl_Channel chan);
int Tcl_InterpDeleted(Tcl_Interp *interp);
int Tcl_IsSafe(Tcl_Interp *interp);
char *Tcl_JoinPath(int argc, char **argv, Tcl_DString *resultPtr);
int Tcl_LinkVar(Tcl_Interp *interp, char *varName, char *addr, int type);
void Tcl_Main(int argc, char **argv, Tcl_AppInitProc *appInitProc);
Tcl_Channel Tcl_MakeFileChannel(ClientData inFile, ClientData outFile, int mode);
int Tcl_MakeSafe(Tcl_Interp *interp);
Tcl_Channel Tcl_MakeTcpClientChannel(ClientData tcpSocket);
char *Tcl_Merge(int argc, char **argv);
Tcl_HashEntry *Tcl_NextHashEntry(Tcl_HashSearch *searchPtr);
Tcl_Channel Tcl_OpenCommandChannel(Tcl_Interp *interp, int argc, char **argv, int flags);
Tcl_Channel Tcl_OpenFileChannel(Tcl_Interp *interp, char *fileName, char *modeString, int permissions);
Tcl_Channel Tcl_OpenTcpClient(Tcl_Interp *interp, int port, char *address, char *myaddr, int myport, int async);
Tcl_Channel Tcl_OpenTcpServer(Tcl_Interp *interp, int port, char *host, Tcl_TcpAcceptProc *acceptProc, ClientData callbackData);
char *Tcl_ParseVar(Tcl_Interp *interp, char *string, char **termPtr);
int Tcl_PkgProvide(Tcl_Interp *interp, char *name, char *version);
char *Tcl_PkgRequire(Tcl_Interp *interp, char *name, char *version, int exact);
char *Tcl_PosixError(Tcl_Interp *interp);
void Tcl_Preserve(ClientData data);
void Tcl_PrintDouble(Tcl_Interp *interp, double value, char *dst);
int Tcl_PutEnv(const char *string);
void Tcl_QueueEvent(Tcl_Event *evPtr, Tcl_QueuePosition position);
int Tcl_Read(Tcl_Channel chan, char *bufPtr, int toRead);
char *Tcl_Realloc(char *ptr, unsigned int size);
void Tcl_ReapDetachedProcs(void);
int Tcl_RecordAndEval(Tcl_Interp *interp, char *cmd, int flags);
Tcl_RegExp Tcl_RegExpCompile(Tcl_Interp *interp, char *string);
int Tcl_RegExpExec(Tcl_Interp *interp, Tcl_RegExp regexp, char *string, char *start);
int Tcl_RegExpMatch(Tcl_Interp *interp, char *string, char *pattern);
void Tcl_RegExpRange(Tcl_RegExp regexp, int index, char **startPtr, char **endPtr);
void Tcl_RegisterChannel(Tcl_Interp *interp, Tcl_Channel chan);
void Tcl_Release(ClientData clientData);
void Tcl_ResetResult(Tcl_Interp *interp);
int Tcl_ScanElement(char *string, int *flagPtr);
int Tcl_Seek(Tcl_Channel chan, int offset, int mode);
void Tcl_SetAssocData(Tcl_Interp *interp, char *name, Tcl_InterpDeleteProc *proc, ClientData clientData);
void Tcl_SetChannelBufferSize(Tcl_Channel chan, int sz);
int Tcl_SetChannelOption(Tcl_Interp *interp, Tcl_Channel chan, char *optionName, char *newValue);
int Tcl_SetCommandInfo(Tcl_Interp *interp, char *cmdName, Tcl_CmdInfo *infoPtr);
void Tcl_SetErrno(int err);
void Tcl_SetErrorCode(Tcl_Interp *interp, ...);
char *Tcl_SetKeyedListField(Tcl_Interp *interp, const char *fieldName, const char *fieldvalue, const char *keyedList);
void Tcl_SetMaxBlockTime(Tcl_Time *timePtr);
void Tcl_SetNotifierData(Tcl_File file, Tcl_FileFreeProc *freeProcPtr, ClientData data);
void Tcl_SetPanicProc(void (*proc)(char *format, ...));
int Tcl_SetRecursionLimit(Tcl_Interp *interp, int depth);
void Tcl_SetResult(Tcl_Interp *interp, char *string, Tcl_FreeProc *freeProc);
void Tcl_SetStdChannel(Tcl_Channel channel, int type);
char *Tcl_SetVar(Tcl_Interp *interp, char *varName, char *newValue, int flags);
char *Tcl_SetVar2(Tcl_Interp *interp, char *part1, char *part2, char *newValue, int flags);
char *Tcl_SignalId(int sig);
char *Tcl_SignalMsg(int sig);
void Tcl_Sleep(int ms);
void Tcl_SourceRCFile(Tcl_Interp *interp);
int Tcl_SplitList(Tcl_Interp *interp, char *list, int *argcPtr, char ***argvPtr);
void Tcl_SplitPath(char *path, int *argcPtr, char ***argvPtr);
void Tcl_StaticPackage(Tcl_Interp *interp, char *pkgName, Tcl_PackageInitProc *initProc, Tcl_PackageInitProc *safeInitProc);
int Tcl_StrToDouble(const char *string, double *doublePtr);
int Tcl_StrToInt(const char *string, int base, int *intPtr);
int Tcl_StrToLong(const char *string, int base, __int64 *longPtr);
int Tcl_StrToUnsigned(const char *string, int base, unsigned int *unsignedPtr);
int Tcl_StringMatch(char *string, char *pattern);
int Tcl_Tell(Tcl_Channel chan);
int Tcl_TraceVar(Tcl_Interp *interp, char *varName, int flags, Tcl_VarTraceProc *proc, ClientData clientData);
int Tcl_TraceVar2(Tcl_Interp *interp, char *part1, char *part2, int flags, Tcl_VarTraceProc *proc, ClientData clientData);
char *Tcl_TranslateFileName(Tcl_Interp *interp, char *name, Tcl_DString *bufferPtr);
void Tcl_UnlinkVar(Tcl_Interp *interp, char *varName);
int Tcl_UnregisterChannel(Tcl_Interp *interp, Tcl_Channel chan);
int Tcl_UnsetVar(Tcl_Interp *interp, char *varName, int flags);
int Tcl_UnsetVar2(Tcl_Interp *interp, char *part1, char *part2, int flags);
void Tcl_UntraceVar(Tcl_Interp *interp, char *varName, int flags, Tcl_VarTraceProc *proc, ClientData clientData);
void Tcl_UntraceVar2(Tcl_Interp *interp, char *part1, char *part2, int flags, Tcl_VarTraceProc *proc, ClientData clientData);
char *Tcl_UpShift(char *targetStr, const char *sourceStr);
int Tcl_UpVar(Tcl_Interp *interp, char *frameName, char *varName, char *localName, int flags);
int Tcl_UpVar2(Tcl_Interp *interp, char *frameName, char *part1, char *part2, char *localName, int flags);
void Tcl_UpdateLinkedVar(Tcl_Interp *interp, char *varName);
int Tcl_VarEval(Tcl_Interp *interp, ...);
ClientData Tcl_VarTraceInfo(Tcl_Interp *interp, char *varName, int flags, Tcl_VarTraceProc *procPtr, ClientData prevClientData);
ClientData Tcl_VarTraceInfo2(Tcl_Interp *interp, char *part1, char *part2, int flags, Tcl_VarTraceProc *procPtr, ClientData prevClientData);
int Tcl_WaitForEvent(Tcl_Time *timePtr);
int Tcl_WaitPid(int pid, int *statPtr, int options);
void Tcl_WalkKeyToHandle(void_pt headerPtr, int walkKey, char *handlePtr);
void Tcl_WatchFile(Tcl_File file, int mask);
int Tcl_Write(Tcl_Channel chan, char *s, int slen);
int Tclx_Init(Tcl_Interp *interp);
int Tclx_SafeInit(Tcl_Interp *interp);
int Tclxcmd_Init(Tcl_Interp *interp);
int Tclxcmd_SafeInit(Tcl_Interp *interp);
int Tclxlib_Init(Tcl_Interp *interp);
MACRO_CursorShape TileShape;
int TkX_ConsoleInit(Tcl_Interp *interp);
void TkX_Main(int argc, char **argv, Tcl_AppInitProc *appInitProc);
void TkX_Panic(char *fmt, ...);
XColor *Tk_3DBorderColor(Tk_3DBorder border);
GC Tk_3DBorderGC(Tk_Window tkwin, Tk_3DBorder border, int which);
void Tk_3DHorizontalBevel(Tk_Window tkwin, Drawable drawable, Tk_3DBorder border, int x, int y, int width, int height, int leftIn, int rightIn, int topBevel, int relief);
void Tk_3DVerticalBevel(Tk_Window tkwin, Drawable drawable, Tk_3DBorder border, int x, int y, int width, int height, int leftBevel, int relief);
void Tk_AddOption(Tk_Window tkwin, char *name, char *value, int priority);
int Tk_BellCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tk_BindCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
void Tk_BindEvent(Tk_BindingTable bindingTable, XEvent *eventPtr, Tk_Window tkwin, int numObjects, ClientData *objectPtr);
int Tk_BindtagsCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tk_ButtonCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tk_CanvasCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
void Tk_CanvasDrawableCoords(Tk_Canvas canvas, double x, double y, __int16 *drawableXPtr, __int16 *drawableYPtr);
void Tk_CanvasEventuallyRedraw(Tk_Canvas canvas, int x1, int y1, int x2, int y2);
int Tk_CanvasGetCoord(Tcl_Interp *interp, Tk_Canvas canvas, char *string, double *doublePtr);
Tk_CanvasTextInfo *Tk_CanvasGetTextInfo(Tk_Canvas canvas);
int Tk_CanvasPsBitmap(Tcl_Interp *interp, Tk_Canvas canvas, Pixmap bitmap, int x, int y, int width, int height);
int Tk_CanvasPsColor(Tcl_Interp *interp, Tk_Canvas canvas, XColor *colorPtr);
int Tk_CanvasPsFont(Tcl_Interp *interp, Tk_Canvas canvas, XFontStruct *fontStructPtr);
void Tk_CanvasPsPath(Tcl_Interp *interp, Tk_Canvas canvas, double *coordPtr, int numPoints);
int Tk_CanvasPsStipple(Tcl_Interp *interp, Tk_Canvas canvas, Pixmap bitmap);
double Tk_CanvasPsY(Tk_Canvas canvas, double y);
void Tk_CanvasSetStippleOrigin(Tk_Canvas canvas, GC gc);
int Tk_CanvasTagsParseProc(ClientData clientData, Tcl_Interp *interp, Tk_Window tkwin, char *value, char *widgRec, int offset);
char *Tk_CanvasTagsPrintProc(ClientData clientData, Tk_Window tkwin, char *widgRec, int offset, Tcl_FreeProc **freeProcPtr);
Tk_Window Tk_CanvasTkwin(Tk_Canvas canvas);
void Tk_CanvasWindowCoords(Tk_Canvas canvas, double x, double y, __int16 *screenXPtr, __int16 *screenYPtr);
void Tk_ChangeWindowAttributes(Tk_Window tkwin, unsigned __int64 valueMask, XSetWindowAttributes *attsPtr);
int Tk_CheckbuttonCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tk_ChooseColorCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tk_ChooseFontCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
void Tk_ClearSelection(Tk_Window tkwin, Atom selection);
int Tk_ClipboardAppend(Tcl_Interp *interp, Tk_Window tkwin, Atom target, Atom format, char *buffer);
int Tk_ClipboardClear(Tcl_Interp *interp, Tk_Window tkwin);
int Tk_ClipboardCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tk_ConfigureInfo(Tcl_Interp *interp, Tk_Window tkwin, Tk_ConfigSpec *specs, char *widgRec, char *argvName, int flags);
int Tk_ConfigureValue(Tcl_Interp *interp, Tk_Window tkwin, Tk_ConfigSpec *specs, char *widgRec, char *argvName, int flags);
int Tk_ConfigureWidget(Tcl_Interp *interp, Tk_Window tkwin, Tk_ConfigSpec *specs, int argc, char **argv, char *widgRec, int flags);
void Tk_ConfigureWindow(Tk_Window tkwin, unsigned int valueMask, XWindowChanges *valuePtr);
Tk_Window Tk_CoordsToWindow(int rootX, int rootY, Tk_Window tkwin);
unsigned __int64 Tk_CreateBinding(Tcl_Interp *interp, Tk_BindingTable bindingTable, ClientData object, char *eventString, char *command, int append);
Tk_BindingTable Tk_CreateBindingTable(Tcl_Interp *interp);
Tk_ErrorHandler Tk_CreateErrorHandler(Display *display, int errNum, int request, int minorCode, Tk_ErrorProc *errorProc, ClientData clientData);
void Tk_CreateEventHandler(Tk_Window token, unsigned __int64 mask, Tk_EventProc *proc, ClientData clientData);
void Tk_CreateGenericHandler(Tk_GenericProc *proc, ClientData clientData);
void Tk_CreateImageType(Tk_ImageType *typePtr);
void Tk_CreateItemType(Tk_ItemType *typePtr);
void Tk_CreatePhotoImageFormat(Tk_PhotoImageFormat *formatPtr);
void Tk_CreateSelHandler(Tk_Window tkwin, Atom selection, Atom target, Tk_SelectionProc *proc, ClientData clientData, Atom format);
Tk_Window Tk_CreateWindow(Tcl_Interp *interp, Tk_Window parent, char *name, char *screenName);
Tk_Window Tk_CreateWindowFromPath(Tcl_Interp *interp, Tk_Window tkwin, char *pathName, char *screenName);
int Tk_DefineBitmap(Tcl_Interp *interp, Tk_Uid name, char *source, int width, int height);
void Tk_DefineCursor(Tk_Window window, Tk_Cursor cursor);
void Tk_DeleteAllBindings(Tk_BindingTable bindingTable, ClientData object);
int Tk_DeleteBinding(Tcl_Interp *interp, Tk_BindingTable bindingTable, ClientData object, char *eventString);
void Tk_DeleteBindingTable(Tk_BindingTable bindingTable);
void Tk_DeleteErrorHandler(Tk_ErrorHandler handler);
void Tk_DeleteEventHandler(Tk_Window token, unsigned __int64 mask, Tk_EventProc *proc, ClientData clientData);
void Tk_DeleteGenericHandler(Tk_GenericProc *proc, ClientData clientData);
void Tk_DeleteImage(Tcl_Interp *interp, char *name);
void Tk_DeleteSelHandler(Tk_Window tkwin, Atom selection, Atom target);
int Tk_DestroyCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
void Tk_DestroyWindow(Tk_Window tkwin);
char *Tk_DisplayName(Tk_Window tkwin);
void Tk_Draw3DPolygon(Tk_Window tkwin, Drawable drawable, Tk_3DBorder border, XPoint *pointPtr, int numPoints, int borderWidth, int leftRelief);
void Tk_Draw3DRectangle(Tk_Window tkwin, Drawable drawable, Tk_3DBorder border, int x, int y, int width, int height, int borderWidth, int relief);
void Tk_DrawFocusHighlight(Tk_Window tkwin, GC gc, int width, Drawable drawable);
int Tk_EntryCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tk_EventCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tk_FileeventCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
void Tk_Fill3DPolygon(Tk_Window tkwin, Drawable drawable, Tk_3DBorder border, XPoint *pointPtr, int numPoints, int borderWidth, int leftRelief);
void Tk_Fill3DRectangle(Tk_Window tkwin, Drawable drawable, Tk_3DBorder border, int x, int y, int width, int height, int borderWidth, int relief);
Tk_PhotoHandle Tk_FindPhoto(char *imageName);
int Tk_FocusCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tk_FrameCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
void Tk_Free3DBorder(Tk_3DBorder border);
void Tk_FreeBitmap(Display *display, Pixmap bitmap);
void Tk_FreeColor(XColor *colorPtr);
void Tk_FreeColormap(Display *display, Colormap colormap);
void Tk_FreeCursor(Display *display, Tk_Cursor cursor);
void Tk_FreeFontStruct(XFontStruct *fontStructPtr);
void Tk_FreeGC(Display *display, GC gc);
void Tk_FreeImage(Tk_Image image);
void Tk_FreeOptions(Tk_ConfigSpec *specs, char *widgRec, Display *display, int needFlags);
void Tk_FreePixmap(Display *display, Pixmap pixmap);
void Tk_FreeXId(Display *display, XID xid);
GC Tk_GCForColor(XColor *colorPtr, Drawable drawable);
void Tk_GeometryRequest(Tk_Window tkwin, int reqWidth, int reqHeight);
Tk_3DBorder Tk_Get3DBorder(Tcl_Interp *interp, Tk_Window tkwin, Tk_Uid colorName);
void Tk_GetAllBindings(Tcl_Interp *interp, Tk_BindingTable bindingTable, ClientData object);
int Tk_GetAnchor(Tcl_Interp *interp, char *string, Tk_Anchor *anchorPtr);
char *Tk_GetAtomName(Tk_Window tkwin, Atom atom);
char *Tk_GetBinding(Tcl_Interp *interp, Tk_BindingTable bindingTable, ClientData object, char *eventString);
Pixmap Tk_GetBitmap(Tcl_Interp *interp, Tk_Window tkwin, Tk_Uid string);
Pixmap Tk_GetBitmapFromData(Tcl_Interp *interp, Tk_Window tkwin, char *source, int width, int height);
int Tk_GetCapStyle(Tcl_Interp *interp, char *string, int *capPtr);
XColor *Tk_GetColor(Tcl_Interp *interp, Tk_Window tkwin, Tk_Uid name);
XColor *Tk_GetColorByValue(Tk_Window tkwin, XColor *colorPtr);
Colormap Tk_GetColormap(Tcl_Interp *interp, Tk_Window tkwin, char *string);
Tk_Cursor Tk_GetCursor(Tcl_Interp *interp, Tk_Window tkwin, Tk_Uid string);
Tk_Cursor Tk_GetCursorFromData(Tcl_Interp *interp, Tk_Window tkwin, char *source, char *mask, int width, int height, int xHot, int yHot, Tk_Uid fg, Tk_Uid bg);
XFontStruct *Tk_GetFontStruct(Tcl_Interp *interp, Tk_Window tkwin, Tk_Uid name);
GC Tk_GetGC(Tk_Window tkwin, unsigned __int64 valueMask, XGCValues *valuePtr);
Tk_Image Tk_GetImage(Tcl_Interp *interp, Tk_Window tkwin, char *name, Tk_ImageChangedProc *changeProc, ClientData clientData);
Tk_ItemType *Tk_GetItemTypes(void);
int Tk_GetJoinStyle(Tcl_Interp *interp, char *string, int *joinPtr);
int Tk_GetJustify(Tcl_Interp *interp, char *string, Tk_Justify *justifyPtr);
int Tk_GetNumMainWindows(void);
int Tk_GetOpenFileCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
Tk_Uid Tk_GetOption(Tk_Window tkwin, char *name, char *className);
int Tk_GetPixels(Tcl_Interp *interp, Tk_Window tkwin, char *string, int *intPtr);
Pixmap Tk_GetPixmap(Display *display, Drawable d, int width, int height, int depth);
int Tk_GetRelief(Tcl_Interp *interp, char *name, int *reliefPtr);
void Tk_GetRootCoords(Tk_Window tkwin, int *xPtr, int *yPtr);
int Tk_GetSaveFileCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tk_GetScreenMM(Tcl_Interp *interp, Tk_Window tkwin, char *string, double *doublePtr);
int Tk_GetScrollInfo(Tcl_Interp *interp, int argc, char **argv, double *dblPtr, int *intPtr);
int Tk_GetSelection(Tcl_Interp *interp, Tk_Window tkwin, Atom selection, Atom target, Tk_GetSelProc *proc, ClientData clientData);
Tk_Uid Tk_GetUid(char *string);
void Tk_GetVRootGeometry(Tk_Window tkwin, int *xPtr, int *yPtr, int *widthPtr, int *heightPtr);
Visual *Tk_GetVisual(Tcl_Interp *interp, Tk_Window tkwin, char *string, int *depthPtr, Colormap *colormapPtr);
int Tk_Grab(Tcl_Interp *interp, Tk_Window tkwin, int grabGlobal);
int Tk_GrabCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tk_GridCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
void Tk_HandleEvent(XEvent *eventPtr);
Tk_Window Tk_IdToWindow(Display *display, Window window);
void Tk_ImageChanged(Tk_ImageMaster master, int x, int y, int width, int height, int imageWidth, int imageHeight);
int Tk_ImageCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tk_Init(Tcl_Interp *interp);
Atom Tk_InternAtom(Tk_Window tkwin, char *name);
int Tk_LabelCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tk_ListboxCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tk_LowerCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
void Tk_Main(int argc, char **argv, Tcl_AppInitProc *appInitProc);
void Tk_MainLoop(void);
Tk_Window Tk_MainWindow(Tcl_Interp *interp);
void Tk_MaintainGeometry(Tk_Window slave, Tk_Window master, int x, int y, int width, int height);
void Tk_MakeWindowExist(Tk_Window tkwin);
void Tk_ManageGeometry(Tk_Window tkwin, Tk_GeomMgr *mgrPtr, ClientData clientData);
void Tk_MapWindow(Tk_Window tkwin);
int Tk_MenuCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tk_MenubuttonCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tk_MessageBoxCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tk_MessageCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
void Tk_MoveResizeWindow(Tk_Window tkwin, int x, int y, int width, int height);
void Tk_MoveToplevelWindow(Tk_Window tkwin, int x, int y);
void Tk_MoveWindow(Tk_Window tkwin, int x, int y);
char *Tk_NameOf3DBorder(Tk_3DBorder border);
char *Tk_NameOfAnchor(Tk_Anchor anchor);
char *Tk_NameOfBitmap(Display *display, Pixmap bitmap);
char *Tk_NameOfCapStyle(int cap);
char *Tk_NameOfColor(XColor *colorPtr);
char *Tk_NameOfCursor(Display *display, Tk_Cursor cursor);
char *Tk_NameOfFontStruct(XFontStruct *fontStructPtr);
char *Tk_NameOfImage(Tk_ImageMaster imageMaster);
char *Tk_NameOfJoinStyle(int join);
char *Tk_NameOfJustify(Tk_Justify justify);
char *Tk_NameOfRelief(int relief);
Tk_Window Tk_NameToWindow(Tcl_Interp *interp, char *pathName, Tk_Window tkwin);
int Tk_OptionCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
void Tk_OwnSelection(Tk_Window tkwin, Atom selection, Tk_LostSelProc *proc, ClientData clientData);
int Tk_PackCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tk_ParseArgv(Tcl_Interp *interp, Tk_Window tkwin, int *argcPtr, char **argv, Tk_ArgvInfo *argTable, int flags);
void Tk_PhotoBlank(Tk_PhotoHandle handle);
void Tk_PhotoExpand(Tk_PhotoHandle handle, int width, int height);
int Tk_PhotoGetImage(Tk_PhotoHandle handle, Tk_PhotoImageBlock *blockPtr);
void Tk_PhotoGetSize(Tk_PhotoHandle handle, int *widthPtr, int *heightPtr);
void Tk_PhotoPutBlock(Tk_PhotoHandle handle, Tk_PhotoImageBlock *blockPtr, int x, int y, int width, int height);
void Tk_PhotoPutZoomedBlock(Tk_PhotoHandle handle, Tk_PhotoImageBlock *blockPtr, int x, int y, int width, int height, int zoomX, int zoomY, int subsampleX, int subsampleY);
void Tk_PhotoSetSize(Tk_PhotoHandle handle, int width, int height);
int Tk_PlaceCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
void Tk_PreserveColormap(Display *display, Colormap colormap);
void Tk_QueueWindowEvent(XEvent *eventPtr, Tcl_QueuePosition position);
int Tk_RadiobuttonCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tk_RaiseCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
void Tk_RedrawImage(Tk_Image image, int imageX, int imageY, int width, int height, Drawable drawable, int drawableX, int drawableY);
void Tk_ResizeWindow(Tk_Window tkwin, int width, int height);
int Tk_RestackWindow(Tk_Window tkwin, int aboveBelow, Tk_Window other);
Tk_RestrictProc *Tk_RestrictEvents(Tk_RestrictProc *proc, ClientData arg, ClientData *prevArgPtr);
int Tk_ScaleCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tk_ScrollbarCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tk_SelectionCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tk_SendCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
char *Tk_SetAppName(Tk_Window tkwin, char *name);
void Tk_SetBackgroundFromBorder(Tk_Window tkwin, Tk_3DBorder border);
void Tk_SetClass(Tk_Window tkwin, char *className);
void Tk_SetGrid(Tk_Window tkwin, int reqWidth, int reqHeight, int gridWidth, int gridHeight);
void Tk_SetInternalBorder(Tk_Window tkwin, int width);
void Tk_SetWindowBackground(Tk_Window tkwin, unsigned __int64 pixel);
void Tk_SetWindowBackgroundPixmap(Tk_Window tkwin, Pixmap pixmap);
void Tk_SetWindowBorder(Tk_Window tkwin, unsigned __int64 pixel);
void Tk_SetWindowBorderPixmap(Tk_Window tkwin, Pixmap pixmap);
void Tk_SetWindowBorderWidth(Tk_Window tkwin, int width);
void Tk_SetWindowColormap(Tk_Window tkwin, Colormap colormap);
int Tk_SetWindowVisual(Tk_Window tkwin, Visual *visual, int depth, Colormap colormap);
void Tk_SizeOfBitmap(Display *display, Pixmap bitmap, int *widthPtr, int *heightPtr);
void Tk_SizeOfImage(Tk_Image image, int *widthPtr, int *heightPtr);
int Tk_StrictMotif(Tk_Window tkwin);
int Tk_TextCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tk_TkCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tk_TkwaitCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tk_ToplevelCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
void Tk_UndefineCursor(Tk_Window window);
void Tk_Ungrab(Tk_Window tkwin);
void Tk_UnmaintainGeometry(Tk_Window slave, Tk_Window master);
void Tk_UnmapWindow(Tk_Window tkwin);
void Tk_UnsetGrid(Tk_Window tkwin);
int Tk_UpdateCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tk_WinfoCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tk_WmCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tkx_Init(Tcl_Interp *interp);
void ToggleCursorGC(Widget widget, int state);
MACRO_Above TopIf;
MACRO_TopLevelShellIndex TopLevelShellIndex;
MACRO_TransientShellIndex TransientShellIndex;
$13E5897DDE4FE73267EC69E9B96C8548 True;
MACRO_StaticGray TrueColor;
MACRO_M68MAGIC U370ROMAGIC;
MACRO_M68MAGIC U370WRMAGIC;
MACRO_U64 U64_MPN;
MACRO_UAC UAC_BITMASK;
MACRO_UAC_NOPRINT UAC_NOFIX;
MACRO_UAC_NOPRINT UAC_NOPRINT;
MACRO_UAC_NOPRINT UAC_SIGBUS;
MACRO_UBSHIFT UBSHIFT;
MACRO_UBSIZE UBSIZE;
char *UC;
MACRO_LONG UCHAR_MAX;
MACRO_HS UCMD_DEBUG_ON;
MACRO_MAP_FOLDCZONE UCS_NULL_TERMINATED;
MACRO_VDATA UDATA;
MACRO_NULLPROC UDPMSGSIZE;
MACRO_NDPROTO UDPPROTO;
MACRO_UDP UDP_SENDSPACE;
MACRO_UDP UDP_TTL;
char *UE;
MACRO_UF UF_EXCLOSE;
MACRO_UF UF_MAPPED;
MACRO_UIDHSZ UIDHSZ;
MACRO_OFF UIDS;
MACRO_CLOCKS UID_MAX;
MACRO_LONG UINT_MAX;
uio_rw UIO_AIORW;
MACRO_UIO UIO_MAXIOV;
uio_seg UIO_PHYSSPACE;
uio_rw UIO_READ;
MACRO_UIO UIO_SMALLIOV;
uio_seg UIO_SYSSPACE;
uio_seg UIO_TNCICSSPACE;
uio_seg UIO_USERISPACE;
uio_seg UIO_USERSPACE;
uio_rw UIO_WRITE;
bool UL;
MACRO_ULONG ULONG_MAX;
MACRO_ULT42V11 ULT42V11;
MACRO_UL UL_DATLOCK;
MACRO_UL_GETFSIZE UL_GETBREAK;
MACRO_UL_GETFSIZE UL_GETFSIZE;
MACRO_UL_MPN UL_MPN;
MACRO_UL_GETFSIZE UL_SETFSIZE;
MACRO_UL UL_TXTLOCK;
MACRO_UMODE UMODE_NOFOLLOW;
MACRO_UMODE UMODE_NONICE;
MACRO_UMODE UMODE_P_GID;
MACRO_UNACCESSIBLE UNACCESSIBLE;
MACRO_NUMBER_OF_TYPE UNALIGNED_TOKEN;
MACRO_ACL_OTHER UNAUTH;
createmode3 UNCHECKED;
MACRO_TRLR UNDEF_SAP;
MACRO_DOMAIN UNDERFLOW;
MACRO_UNITY UNITY_BASE;
MACRO_BIGENDIAN UNKNOWNENDIAN;
MACRO_UNKNOWN UNKNOWN_ATTR_VAL;
MACRO_NOT UNKNOWN_REQUEST;
MACRO_UNKN UNKN_SYSTEM;
MACRO_ISPTM UNLKPT;
MACRO_UNLOCK UNLOCK;
MACRO_UNMAP UNMAP_SCREEN;
MACRO_UNNAMED UNNAMED_ENUM_TOKEN;
MACRO_UNNAMED_TOKEN UNNAMED_TOKEN_LEN;
MACRO_NUMBER_OF_TYPE UNSIGNED_TOKEN;
stable_how UNSTABLE;
$D44E3C4FF335410EC7120A246FFC2300 UNWILLING;
char *UP;
MACRO_UPAGECNT UPAGECNT;
MACRO_KSTKPGS UPAGES;
MACRO_GET UPDEVENTS;
MACRO_UPD UPD_CNTL;
MACRO_UPD UPD_MASK;
MACRO_F1 UP_NPAD;
char *UP_PARM;
MACRO_URTI URTI_EMULATE;
MACRO_URTI URTI_GENTRAP;
MACRO_URTI URTI_RESCHED;
char *US;
MACRO_USC USC_GET;
MACRO_USC USC_SET;
MACRO_USED USED;
MACRO_USERFAULT USERFAULT;
MACRO_USER USER_OBJ;
MACRO_ACL_OTHER USER_OTHER;
MACRO_EMPTY USER_PROCESS;
MACRO_DEFAULT_GRAPHICS USE_GENERIC_VGA;
MACRO_LONG USHRT_MAX;
MACRO_CLOCKS USI_MAX;
MACRO_USPosition USPosition;
MACRO_USRQUOTA USRQUOTA;
MACRO_SB_CODESET USR_CODESET;
MACRO_USPosition USSize;
MACRO_USC USW_CORE;
MACRO_USW USW_MAX;
MACRO_USW USW_MIN;
MACRO_USW_OSF1 USW_MPSG;
MACRO_USC USW_NULLP;
MACRO_USW_OFF USW_OFF;
MACRO_USW_OFF USW_ON;
MACRO_USW_OSF1 USW_OSF1;
MACRO_USW_OSF1 USW_SOE2;
MACRO_USW_OSF1 USW_SVID2;
MACRO_USW_OSF1 USW_SVID3;
MACRO_USW_OSF1 USW_SVR4;
MACRO_US_CANCEL US_ASYNC_NOCANCEL;
MACRO_US_CANCEL US_CANCEL;
MACRO_US_CANCEL US_CANCEL_BITS;
MACRO_US_CANCEL US_CANCEL_MASK;
MACRO_US US_FP_OWNED;
MACRO_US_CANCEL US_NOCANCEL;
MACRO_US US_ONSTACK;
MACRO_US US_PROFILE;
MACRO_US US_SIGSTACK;
MACRO_US US_SYSCALL;
MACRO_US_CANCEL US_SYS_NOCANCEL;
MACRO_US US_TRAP;
MACRO_US US_YELLOW;
MACRO_US US_YZONE;
MACRO_UTMAXTYPE UTMAXTYPE;
MACRO_U U_FE_ALLOC_SIZE;
MACRO_U_FE U_FE_ARRAY_SIZE;
MACRO_U_FE U_FE_OF_ALLOC_SIZE;
MACRO_LockDownModeSwitch UnlockModeSwitch;
MACRO_UnmapGravity UnmapGravity;
MACRO_KeyPress UnmapNotify;
MACRO_Unsorted Unsorted;
MACRO_XPOINTER UseXKeyboard;
MACRO_VALUE VALUE_THRESHOLD;
MACRO_VAR VAR_ID_AVENDOR;
MACRO_VAR VAR_ID_BANNER;
MACRO_VAR VAR_ID_PRODUCT;
MACRO_VAR VAR_ID_RELEASE;
MACRO_VAR VAR_ID_VENDOR;
MACRO_VAR_VAXFP VAR_IEEEFP;
MACRO_VAR_VAXFP VAR_VAXFP;
MACRO_MTVMAGIC VAXROMAGIC;
MACRO_UNKN VAXSTAR;
MACRO_MTVMAGIC VAXWRMAGIC;
MACRO_UNKN VAX_3400;
MACRO_UNKN VAX_3600;
MACRO_UNKN VAX_3900;
MACRO_UNKN VAX_60;
MACRO_UNKN VAX_6200;
MACRO_UNKN VAX_6400;
MACRO_UNKN VAX_730;
MACRO_UNKN VAX_750;
MACRO_UNKN VAX_780;
MACRO_UNKN VAX_8200;
MACRO_UNKN VAX_8600;
MACRO_UNKN VAX_8800;
MACRO_UNKN VAX_8820;
MACRO_UNKN VAX_9000;
MACRO_VA VA_ANOM;
MACRO_VA VA_FLUSH;
MACRO_VA VA_NORM;
MACRO_VA VA_SEQL;
char *VB;
vtype VBAD;
vtype VBLK;
vtype VCHR;
MACRO_VROOT VCOBJECT;
MACRO_VROOT VCOVERED;
MACRO_VROOT VCWAIT;
MACRO_VDATA VDATA;
vtype VDIR;
MACRO_VROOT VDIRECTIO;
MACRO_VEOF VDISCARD;
MACRO_VEOF VDSUSP;
MACRO_VROOT VDUP;
char *VE;
MACRO_VENDOR VENDOR_DEFECTS;
MACRO_VROOT VENF_LOCK;
MACRO_VEOF VEOF;
MACRO_VEOF VEOL;
MACRO_VEOF VEOL2;
MACRO_VEOF VERASE;
MACRO_TEGC VERIFY_CONSOLE_EV;
MACRO_VERSION VERSION;
MACRO_VERSION_1 VERSION_1;
int VERSW();
MACRO_VERSW VERSW_DISABLE;
MACRO_VERSW VERSW_ENABLE;
MACRO_VERSW VERSW_TRANSITION;
MACRO_VEXEC VEXEC;
MACRO_VROOT VEXLOCK;
vtype VFIFO;
MACRO_VROOT VFLOCK;
MACRO_VFLUSH VFLUSH;
MACRO_VROOT VFWAIT;
MACRO_VGA_BUS VGA_BUS_EISA;
MACRO_VGA_BUS VGA_BUS_ISA;
MACRO_VGA_BUS VGA_BUS_NONE;
MACRO_VGA_BUS VGA_BUS_PCI;
MACRO_PXG VGA_DTYPE;
MACRO_VGA VGA_STATE_6BIT_DAC;
MACRO_VGA VGA_STATE_CURSOR_ON;
MACRO_VGA VGA_STATE_DIRTY_CMAP;
MACRO_VGA VGA_STATE_DIRTY_CURSOR;
MACRO_VGA VGA_STATE_MAPPED;
MACRO_VGA VGA_STATE_SCREEN_ON;
MACRO_VIDBITS VIDBITS;
MACRO_VIFF VIFF_SRCRT;
MACRO_VIFF VIFF_TIMEOUT;
MACRO_VIFF VIFF_TUNNEL;
MACRO_VROOT VINACTIVATING;
MACRO_VEOF VINTR;
MACRO_VROOT VIOERROR;
MACRO_VEOF VKILL;
MACRO_VEOF VLNEXT;
vtype VLNK;
MACRO_VROOT VLOCKS;
MACRO_VROOT VLWAIT;
MACRO_VMAC VMAC_ADD;
MACRO_VMAC VMAC_DELETE;
MACRO_VFLUSH VMIN;
MACRO_VROOT VMLD;
MACRO_VROOT VMMAPPED;
MACRO_VDATA VMM_ADATA;
MACRO_VDATA VMM_IDATA;
MACRO_VDATA VMM_MDATA;
MACRO_VDATA VMM_PDATA;
MACRO_VDATA VMM_TDATA;
MACRO_VDATA VMM_XDATA;
MACRO_VROOT VMOUNTPOINT;
MACRO_VM_BEHAVIOR VM_BEHAVIOR_DEFAULT;
MACRO_VM_BEHAVIOR VM_BEHAVIOR_FSEQNTL;
MACRO_VM_BEHAVIOR VM_BEHAVIOR_RANDOM;
MACRO_VM_BEHAVIOR VM_BEHAVIOR_RSEQNTL;
MACRO_VM VM_INHERIT_COPY;
MACRO_VM_INHERIT VM_INHERIT_DEFAULT;
MACRO_VM VM_INHERIT_DONATE_COPY;
MACRO_VM VM_INHERIT_NONE;
MACRO_VM VM_INHERIT_SHARE;
MACRO_VM_MIN VM_MAX_ADDRESS;
MACRO_VM_MAX VM_MAX_KERNEL_ADDRESS;
MACRO_VM_MIN VM_MIN_ADDRESS;
MACRO_VM_PROT_ALL VM_PROT_ALL;
MACRO_VM_PROT_DEFAULT VM_PROT_DEFAULT;
MACRO_VM_PROT VM_PROT_EXECUTE;
MACRO_VM_PROT VM_PROT_NONE;
MACRO_VM_PROT VM_PROT_READ;
MACRO_VM_PROT VM_PROT_TRY;
MACRO_VM_PROT VM_PROT_WRITE;
MACRO_VNODE VNODE_AGE;
vtype VNON;
MACRO_PERMMASK VNOVAL;
MACRO_EXPANDED VOID_TOKEN;
MACRO_NUMBER_OF_TYPE VOLATILE_TOKEN;
MACRO_VOUTWAIT VOUTWAIT;
MACRO_VPRINT VPLOT;
MACRO_VPRINT VPRINT;
MACRO_VPRINT VPRINTPLOT;
$A1D044C5C6C9A35768D52A463A253A1B VPS_CLOSE;
$A1D044C5C6C9A35768D52A463A253A1B VPS_MAP;
$A1D044C5C6C9A35768D52A463A253A1B VPS_OPEN;
MACRO_VEOF VQUIT;
MACRO_VREAD VREAD;
vtype VREG;
MACRO_VEOF VREPRINT;
MACRO_VROOT VREVOKED;
MACRO_VROOT VROOT;
char *VS;
MACRO_VSE_MOUSE VSE_AUX;
MACRO_VSE VSE_BUTTON;
MACRO_VSE_MOUSE VSE_CONSOLE;
MACRO_VSE_MOUSE VSE_DKB;
MACRO_VSE_KBTUP VSE_KBTDOWN;
MACRO_VSE_KBTUP VSE_KBTUP;
MACRO_VSE VSE_MMOTION;
MACRO_VSE_MOUSE VSE_MOUSE;
MACRO_VSE_MOUSE VSE_TABLET;
MACRO_VSE VSE_TMOTION;
MACRO_VSGID VSGID;
MACRO_VROOT VSHLOCK;
MACRO_VSIO VSIO_OFF;
MACRO_VSIO VSIO_ON;
vtype VSOCK;
MACRO_VEOF VSTART;
MACRO_VFLUSH VSTATUS;
MACRO_VEOF VSTOP;
MACRO_VSUID VSUID;
MACRO_VEOF VSUSP;
MACRO_VSVTX VSVTX;
MACRO_VROOT VSWAP;
MACRO_VSYNC VSYNC;
MACRO_VROOT VSYSTEM;
MACRO_VS VS_FIB_FINITE;
MACRO_VS VS_FIB_INFINITE;
MACRO_VT0 VT0;
MACRO_VT0 VT1;
MACRO_ORDINARY VTAB;
MACRO_XTABS VTDELAY;
MACRO_BS0 VTDLY;
MACRO_VROOT VTEXT;
MACRO_VFLUSH VTIME;
MACRO_VTRACE VTRACE;
MACRO_VTRACE VTR_DISABLE;
MACRO_VTR VTR_ENABLE;
MACRO_VTR VTR_STAMP;
MACRO_VTR VTR_UALARM;
MACRO_VTR VTR_VALUE;
vtagtype VT_ADDON;
vtagtype VT_CDFS;
vtagtype VT_CFS;
vtagtype VT_CSPECFS;
vtagtype VT_DFS;
vtagtype VT_EFS;
vtagtype VT_FDFS;
vtagtype VT_FFM;
vtagtype VT_MFS;
vtagtype VT_MSFS;
vtagtype VT_NFS;
vtagtype VT_NON;
vtagtype VT_PRFS;
vtagtype VT_S5FS;
vtagtype VT_UFS;
MACRO_VEOF VWERASE;
MACRO_VWRITE VWRITE;
MACRO_VROOT VXENIX;
MACRO_VROOT VXLOCK;
MACRO_VROOT VXWANT;
MACRO_VROOT V_AUD_DESELECT;
MACRO_VROOT V_AUD_SELECT;
MACRO_VROOT V_AUD_VALID;
MACRO_VROOT V_CONVERTED;
MACRO_VROOT V_DELAYED;
MACRO_VROOT V_PRIVATE;
MACRO_UNKN V_VAX;
void Validate(XmTextPosition *start, XmTextPosition *end, int maxsize);
MACRO_KeyClass ValuatorClass;
MACRO_VendorShellIndex VendorShellIndex;
MACRO_VertexRelative VertexCurved;
MACRO_VertexRelative VertexDontDraw;
MACRO_VertexRelative VertexEndClosed;
MACRO_VertexRelative VertexRelative;
MACRO_VertexRelative VertexStartClosed;
MACRO_TK_SCROLL VirtualEvent;
MACRO_TK_SCROLL VirtualEventMask;
MACRO_NoEventMask VisibilityChangeMask;
MACRO_VisibilityUnobscured VisibilityFullyObscured;
MACRO_KeyPress VisibilityNotify;
MACRO_VisibilityUnobscured VisibilityPartiallyObscured;
MACRO_VisibilityUnobscured VisibilityUnobscured;
MACRO_VisualNoMask VisualAllMask;
MACRO_VisualNoMask VisualBitsPerRGBMask;
MACRO_VisualNoMask VisualBlueMaskMask;
MACRO_VisualNoMask VisualClassMask;
MACRO_VisualNoMask VisualColormapSizeMask;
MACRO_VisualNoMask VisualDepthMask;
MACRO_VisualNoMask VisualGreenMaskMask;
MACRO_VisualNoMask VisualIDMask;
MACRO_VisualNoMask VisualNoMask;
MACRO_VisualNoMask VisualRedMaskMask;
MACRO_VisualNoMask VisualScreenMask;
MACRO_WALLPROC WALLPROC_WALL;
MACRO_WALLPROG WALLPROG;
MACRO_WALLVERS_0 WALLVERS;
MACRO_WALLVERS WALLVERS_ORIG;
MACRO_WARNING WARNING;
MACRO_WA WA_ALTCHARSET;
MACRO_WA_ATTRIBUTES WA_ATTRIBUTES;
MACRO_WA WA_BLINK;
MACRO_WA WA_BOLD;
MACRO_WA WA_DIM;
MACRO_WA_NORMAL WA_HORIZONTAL;
MACRO_WA_INVIS WA_INVIS;
MACRO_WA_NORMAL WA_LEFT;
MACRO_WA_NORMAL WA_LOW;
MACRO_WA_NORMAL WA_NORMAL;
MACRO_WA_INVIS WA_PROTECT;
MACRO_WA WA_REVERSE;
MACRO_WA_NORMAL WA_RIGHT;
MACRO_WA WA_STANDOUT;
MACRO_WA_NORMAL WA_TOP;
MACRO_WA WA_UNDERLINE;
MACRO_WA_NORMAL WA_VERTICAL;
MACRO_WCHAR WCHAR_MAX;
MACRO_WCHAR WCHAR_MIN;
MACRO_UNNAMED WCHAR_T_TOKEN;
MACRO_WCONTINUED WCONTINUED;
MACRO_WCOREFLAG WCOREFLAG;
MACRO_VDATA WDATA;
MACRO_XLMAGIC WE32MAGIC;
MACRO_WEOF WEOF;
MACRO_WCONTINUED WEXITED;
$D44E3C4FF335410EC7120A246FFC2300 WILLING;
MACRO_COLOR_MAP WINDOW_HEIGHT_HIGH;
MACRO_COLOR_MAP WINDOW_HEIGHT_LOW;
MACRO_COLOR_MAP WINDOW_WIDTH_HIGH;
MACRO_COLOR_MAP WINDOW_WIDTH_LOW;
MACRO_COLOR_MAP WINDOW_X_HIGH;
MACRO_COLOR_MAP WINDOW_X_LOW;
MACRO_COLOR_MAP WINDOW_Y_HIGH;
MACRO_COLOR_MAP WINDOW_Y_LOW;
MACRO_WLOGINDEV WLOGINDEV;
MACRO_WMESGLEN WMESGLEN;
MACRO_WMShellIndex WMShellIndex;
MACRO_WNOHANG WNOHANG;
MACRO_WCONTINUED WNOWAIT;
MACRO_NUM WNUM_ATTRIBUTES;
$F28B36ADFFCBF05BF68859CF29BA8C42 WOBJ_INFO_ILINEMAX;
MACRO_WOBJ WOBJ_SCNNO_DONE;
MACRO_MLD_ADDRESS WOBJ_SCNNO_SYMTAB;
$F6FEA3F178599BC0F45BECAF27371307 WOBJ_SYM_AUX;
$F6FEA3F178599BC0F45BECAF27371307 WOBJ_SYM_DNR;
$F6FEA3F178599BC0F45BECAF27371307 WOBJ_SYM_ESS;
$F6FEA3F178599BC0F45BECAF27371307 WOBJ_SYM_ESYM;
$F6FEA3F178599BC0F45BECAF27371307 WOBJ_SYM_FDR;
$F6FEA3F178599BC0F45BECAF27371307 WOBJ_SYM_LINE;
$F6FEA3F178599BC0F45BECAF27371307 WOBJ_SYM_LSS;
$F6FEA3F178599BC0F45BECAF27371307 WOBJ_SYM_LSYM;
$F6FEA3F178599BC0F45BECAF27371307 WOBJ_SYM_OPT;
$F6FEA3F178599BC0F45BECAF27371307 WOBJ_SYM_PDR;
$F6FEA3F178599BC0F45BECAF27371307 WOBJ_SYM_RFD;
MACRO_WORD WORD_BIT;
MACRO_PLOT WRAP;
MACRO_WRDE WRDE_APPEND;
MACRO_WRDE_BADCHAR WRDE_BADCHAR;
MACRO_WRDE_BADCHAR WRDE_BADVAL;
MACRO_WRDE_BADCHAR WRDE_CMDSUB;
MACRO_WRDE WRDE_DOOFFS;
MACRO_WRDE_BADCHAR WRDE_EPOPEN;
MACRO_WRDE_BADCHAR WRDE_ESHELL;
MACRO_WRDE WRDE_NOCMD;
MACRO_WRDE_BADCHAR WRDE_NOSPACE;
MACRO_WRDE_BADCHAR WRDE_NOSYS;
MACRO_WRDE WRDE_REUSE;
MACRO_WRDE WRDE_SHOWERR;
MACRO_WRDE_BADCHAR WRDE_SYNTAX;
MACRO_WRDE WRDE_UNDEF;
MACRO_OPENMSG WRITEMSG;
MACRO_RRQ WRQ;
MACRO_WSKBKeyClickPercent WSKBAutoRepeatMode;
MACRO_WSKBKeyClickPercent WSKBAutoRepeats;
MACRO_WSKBKeyClickPercent WSKBBellDuration;
MACRO_WSKBKeyClickPercent WSKBBellPercent;
MACRO_WSKBKeyClickPercent WSKBBellPitch;
MACRO_WSKBKeyClickPercent WSKBKeyClickPercent;
MACRO_WSKBKeyClickPercent WSKBLed;
MACRO_WSKBKeyClickPercent WSKBLedMode;
MACRO_WSKBLed WSKBLed_CapsLock;
MACRO_WSKBLed WSKBLed_Compose;
MACRO_WSKBLed WSKBLed_NumLock;
MACRO_WSKBLed WSKBLed_ScrollLock;
MACRO_WSKBLed WSKBLed_Wait;
MACRO_WSPR WSPR_LEFT_BUTTON;
MACRO_WSPR WSPR_MIDDLE_BUTTON;
MACRO_WSPR WSPR_RIGHT_BUTTON;
MACRO_WSPR WSPR_X_SIGN;
MACRO_WSPR WSPR_Y_SIGN;
MACRO_WSTOPPED WSTOPPED;
MACRO_WS_Relative WS_Absolute;
MACRO_WS_AddToList WS_AddToList;
MACRO_WS_KbdFeedbackClass WS_BellFeedbackClass;
MACRO_WS_ButtonClass WS_ButtonClass;
MACRO_PXG WS_DTYPE;
MACRO_WS_AddToList WS_DeleteFromList;
MACRO_WS WS_DvAccelDenom;
MACRO_WS WS_DvAccelNum;
MACRO_WS_DvKeyClickPercent WS_DvAutoRepeatMode;
MACRO_WS_DvInteger WS_DvInteger;
MACRO_WS_DvKeyClickPercent WS_DvKey;
MACRO_WS_DvKeyClickPercent WS_DvKeyClickPercent;
MACRO_WS_DvLed WS_DvLed;
MACRO_WS_DvLed WS_DvLedMode;
MACRO_WS_DvString WS_DvString;
MACRO_WS WS_DvThreshold;
MACRO_WS_ButtonClass WS_FeedbackClass;
MACRO_WS_ButtonClass WS_FocusClass;
MACRO_WS_KbdFeedbackClass WS_IntegerFeedbackClass;
MACRO_WS_KbdFeedbackClass WS_KbdFeedbackClass;
MACRO_WS_DvInteger WS_KeyClass;
MACRO_WS_KbdFeedbackClass WS_LedFeedbackClass;
MACRO_WS_NOTIFY WS_NOTIFY_KBD_HOT_SWAP;
MACRO_WS_NOTIFY WS_NOTIFY_MOUSE_HOT_SWAP;
MACRO_WS_ButtonClass WS_OtherClass;
MACRO_WS_ButtonClass WS_ProximityClass;
MACRO_WS_KbdFeedbackClass WS_PtrFeedbackClass;
MACRO_WS_Relative WS_Relative;
MACRO_DPMS WS_SHUTDOWN;
MACRO_WS_KbdFeedbackClass WS_StringFeedbackClass;
MACRO_WS_ButtonClass WS_ValuatorClass;
MACRO_WTMP_PSR WTMP_BOOT_TIME_RETURNED;
MACRO_WTMP_PSR WTMP_FILE_CORRUPT;
MACRO_WTMP WTMP_FILE_OPEN_FAILED;
MACRO_WTMP_PSR WTMP_PSR_TIME_RETURNED;
MACRO_WCONTINUED WTRAPPED;
MACRO_WNOHANG WUNTRACED;
MACRO_W W_ACC;
MACRO_W_IO W_IO;
MACRO_F_OK W_OK;
MACRO_W_IO W_PIO;
MACRO_W_IO W_SWAP;
MACRO_ForgetGravity WestGravity;
MACRO_NotUseful WhenMapped;
MACRO_NoValue WidthValue;
MACRO_EvenOddRule WindingRule;
MACRO_InputHint WindowGroupHint;
MACRO_WindowObjIndex WindowObjIndex;
MACRO_WithdrawnState WithdrawnState;
int WmGetDECWmHints();
int WmGetDecorationGeoemtery();
int WmGetIconBoxName();
MACRO_WmNormalState WmIconicState;
MACRO_WmNormalState WmNormalState;
void WmSetDECWmHints();
void WmSetDecorationGeometry();
void WmSetIconBoxName();
$D44E3C4FF335410EC7120A246FFC2300 X11_FAILED;
MACRO_B16MAGIC X86MAGIC;
MACRO_XAG XAG_MAJOR_VERSION;
MACRO_XAG XAG_MINOR_VERSION;
MACRO_XALLOCA XALLOCA_H;
MACRO_XATOM XATOM_H;
MACRO_XAW XAW_LIST_NONE;
MACRO_XA XA_ARC;
MACRO_XA XA_ATOM;
MACRO_XA XA_BITMAP;
MACRO_XA XA_CAP_HEIGHT;
MACRO_XA XA_CARDINAL;
MACRO_XA XA_COLORMAP;
MACRO_XA XA_COPYRIGHT;
MACRO_XA XA_CURSOR;
MACRO_XA XA_CUT_BUFFER0;
MACRO_XA XA_CUT_BUFFER1;
MACRO_XA XA_CUT_BUFFER2;
MACRO_XA XA_CUT_BUFFER3;
MACRO_XA XA_CUT_BUFFER4;
MACRO_XA XA_CUT_BUFFER5;
MACRO_XA XA_CUT_BUFFER6;
MACRO_XA XA_CUT_BUFFER7;
MACRO_XA XA_DRAWABLE;
MACRO_XA XA_END_SPACE;
MACRO_XA XA_FAMILY_NAME;
MACRO_XA XA_FONT;
MACRO_XA XA_FONT_NAME;
MACRO_XA XA_FULL_NAME;
MACRO_XA XA_INTEGER;
MACRO_XA XA_ITALIC_ANGLE;
MACRO_XA_LAST XA_LAST_PREDEFINED;
MACRO_XA XA_MAX_SPACE;
MACRO_XA XA_MIN_SPACE;
MACRO_XA XA_NORM_SPACE;
MACRO_XA XA_NOTICE;
MACRO_XA XA_PIXMAP;
MACRO_XA XA_POINT;
MACRO_XA XA_POINT_SIZE;
MACRO_XA XA_PRIMARY;
MACRO_XA XA_QUAD_WIDTH;
MACRO_XA XA_RECTANGLE;
MACRO_XA XA_RESOLUTION;
MACRO_XA XA_RESOURCE_MANAGER;
MACRO_XA XA_RGB_BEST_MAP;
MACRO_XA XA_RGB_BLUE_MAP;
MACRO_XA XA_RGB_COLOR_MAP;
MACRO_XA XA_RGB_DEFAULT_MAP;
MACRO_XA XA_RGB_GRAY_MAP;
MACRO_XA XA_RGB_GREEN_MAP;
MACRO_XA XA_RGB_RED_MAP;
MACRO_XA XA_SECONDARY;
MACRO_XA XA_STRIKEOUT_ASCENT;
MACRO_XA XA_STRIKEOUT_DESCENT;
MACRO_XA XA_STRING;
MACRO_XA XA_SUBSCRIPT_X;
MACRO_XA XA_SUBSCRIPT_Y;
MACRO_XA XA_SUPERSCRIPT_X;
MACRO_XA XA_SUPERSCRIPT_Y;
MACRO_XA XA_UNDERLINE_POSITION;
MACRO_XA XA_UNDERLINE_THICKNESS;
MACRO_XA XA_VISUALID;
MACRO_XA XA_WEIGHT;
MACRO_XA XA_WINDOW;
MACRO_XA XA_WM_CLASS;
MACRO_XA XA_WM_CLIENT_MACHINE;
MACRO_XA XA_WM_COMMAND;
MACRO_XA XA_WM_HINTS;
MACRO_XA XA_WM_ICON_NAME;
MACRO_XA XA_WM_ICON_SIZE;
MACRO_XA XA_WM_NAME;
MACRO_XA XA_WM_NORMAL_HINTS;
MACRO_XA XA_WM_SIZE_HINTS;
MACRO_XA XA_WM_TRANSIENT_FOR;
MACRO_XA XA_WM_ZOOM_HINTS;
MACRO_XA XA_X_HEIGHT;
int XActivateScreenSaver(Display *);
int XAddConnectionWatch(Display *, XConnectionWatchProc, XPointer);
XExtCodes *XAddExtension(Display *);
int XAddHost(Display *, XHostAddress *);
int XAddHosts(Display *, XHostAddress *, int);
int XAddToExtensionList(struct _XExtData **, XExtData *);
int XAddToSaveSet(Display *, Window);
unsigned __int64 XAllPlanes(void);
XClassHint *XAllocClassHint(void);
int XAllocColor(Display *, Colormap, XColor *);
int XAllocColorCells(Display *, Colormap, int, unsigned __int64 *, unsigned int, unsigned __int64 *, unsigned int);
int XAllocColorPlanes(Display *, Colormap, int, unsigned __int64 *, int, int, int, int, unsigned __int64 *, unsigned __int64 *, unsigned __int64 *);
XIconSize *XAllocIconSize(void);
int XAllocNamedColor(Display *, Colormap, const char *, XColor *, XColor *);
XSizeHints *XAllocSizeHints(void);
XStandardColormap *XAllocStandardColormap(void);
XWMHints *XAllocWMHints(void);
int XAllowDeviceEvents(Display *, XDevice *, int, Time);
int XAllowEvents(Display *, int, Time);
int XAutoRepeatOff(Display *);
int XAutoRepeatOn(Display *);
bool XB;
char *XBaseFontNameListOfFontSet(XFontSet);
int XBell(Display *, int);
int XBitmapBitOrder(Display *);
int XBitmapPad(Display *);
int XBitmapUnit(Display *);
unsigned __int64 XBlackPixel(Display *, int);
unsigned __int64 XBlackPixelOfScreen(Screen *);
MACRO_XBufferOverflow XBufferOverflow;
MACRO_XCASE XCASE;
MACRO_XCSUCCESS XCNOENT;
MACRO_XCSUCCESS XCNOMEM;
MACRO_XCSUCCESS XCSUCCESS;
MACRO_XC XC_X_cursor;
MACRO_XC_arrow XC_arrow;
MACRO_XC_arrow XC_based_arrow_down;
MACRO_XC_arrow XC_based_arrow_up;
MACRO_XC_arrow XC_boat;
MACRO_XC_arrow XC_bogosity;
MACRO_XC_arrow XC_bottom_left_corner;
MACRO_XC_arrow XC_bottom_right_corner;
MACRO_XC_arrow XC_bottom_side;
MACRO_XC_arrow XC_bottom_tee;
MACRO_XC_arrow XC_box_spiral;
MACRO_XC_arrow XC_center_ptr;
MACRO_XC_arrow XC_circle;
MACRO_XC_arrow XC_clock;
MACRO_XC_arrow XC_coffee_mug;
MACRO_XC_arrow XC_cross;
MACRO_XC_arrow XC_cross_reverse;
MACRO_XC_arrow XC_crosshair;
MACRO_XC_arrow XC_diamond_cross;
MACRO_XC_arrow XC_dot;
MACRO_XC_arrow XC_dotbox;
MACRO_XC_arrow XC_double_arrow;
MACRO_XC_arrow XC_draft_large;
MACRO_XC_arrow XC_draft_small;
MACRO_XC_arrow XC_draped_box;
MACRO_XC_arrow XC_exchange;
MACRO_XC_arrow XC_fleur;
MACRO_XC_arrow XC_gobbler;
MACRO_XC_arrow XC_gumby;
MACRO_XC_arrow XC_hand1;
MACRO_XC_arrow XC_hand2;
MACRO_XC_arrow XC_heart;
MACRO_XC_arrow XC_icon;
MACRO_XC_arrow XC_iron_cross;
MACRO_XC_arrow XC_left_ptr;
MACRO_XC_arrow XC_left_side;
MACRO_XC_arrow XC_left_tee;
MACRO_XC_arrow XC_leftbutton;
MACRO_XC_arrow XC_ll_angle;
MACRO_XC_arrow XC_lr_angle;
MACRO_XC_arrow XC_man;
MACRO_XC_arrow XC_middlebutton;
MACRO_XC_arrow XC_mouse;
MACRO_XC XC_num_glyphs;
MACRO_XC_arrow XC_pencil;
MACRO_XC_arrow XC_pirate;
MACRO_XC_arrow XC_plus;
MACRO_XC_arrow XC_question_arrow;
MACRO_XC_arrow XC_right_ptr;
MACRO_XC_arrow XC_right_side;
MACRO_XC_arrow XC_right_tee;
MACRO_XC_arrow XC_rightbutton;
MACRO_XC_arrow XC_rtl_logo;
MACRO_XC_arrow XC_sailboat;
MACRO_XC_arrow XC_sb_down_arrow;
MACRO_XC_arrow XC_sb_h_double_arrow;
MACRO_XC_arrow XC_sb_left_arrow;
MACRO_XC_arrow XC_sb_right_arrow;
MACRO_XC_arrow XC_sb_up_arrow;
MACRO_XC_arrow XC_sb_v_double_arrow;
MACRO_XC_arrow XC_shuttle;
MACRO_XC_arrow XC_sizing;
MACRO_XC_arrow XC_spider;
MACRO_XC_arrow XC_spraycan;
MACRO_XC_arrow XC_star;
MACRO_XC_arrow XC_target;
MACRO_XC_arrow XC_tcross;
MACRO_XC_arrow XC_top_left_arrow;
MACRO_XC_arrow XC_top_left_corner;
MACRO_XC_arrow XC_top_right_corner;
MACRO_XC_arrow XC_top_side;
MACRO_XC_arrow XC_top_tee;
MACRO_XC_arrow XC_trek;
MACRO_XC_arrow XC_ul_angle;
MACRO_XC_arrow XC_umbrella;
MACRO_XC_arrow XC_ur_angle;
MACRO_XC_arrow XC_watch;
MACRO_XC_arrow XC_xterm;
int XCellsOfScreen(Screen *);
int XChangeActivePointerGrab(Display *, unsigned int, Cursor, Time);
int XChangeDeviceControl(Display *, XDevice *, int, XDeviceControl *);
int XChangeDeviceDontPropagateList(Display *, Window, int, XEventClass *, int);
int XChangeDeviceKeyMapping(Display *, XDevice *, int, int, KeySym *, int);
int XChangeFeedbackControl(Display *, XDevice *, unsigned __int64, XFeedbackControl *);
int XChangeGC(Display *, GC, unsigned __int64, XGCValues *);
int XChangeKeyboardControl(Display *, unsigned __int64, XKeyboardControl *);
int XChangeKeyboardDevice(Display *, XDevice *);
int XChangeKeyboardMapping(Display *, int, int, KeySym *, int);
int XChangePointerControl(Display *, int, int, int, int, int);
int XChangePointerDevice(Display *, XDevice *, int, int);
int XChangeProperty(Display *, Window, Atom, Atom, int, int, const unsigned __int8 *, int);
int XChangeSaveSet(Display *, Window, int);
int XChangeWindowAttributes(Display *, Window, unsigned __int64, XSetWindowAttributes *);
int XCheckIfEvent(Display *, XEvent *, int (*)(Display *, XEvent *, XPointer), XPointer);
int XCheckMaskEvent(Display *, __int64, XEvent *);
int XCheckTypedEvent(Display *, int, XEvent *);
int XCheckTypedWindowEvent(Display *, Window, int, XEvent *);
int XCheckWindowEvent(Display *, Window, __int64, XEvent *);
int XCirculateSubwindows(Display *, Window, int);
int XCirculateSubwindowsDown(Display *, Window);
int XCirculateSubwindowsUp(Display *, Window);
int XClearArea(Display *, Window, int, int, unsigned int, unsigned int, int);
int XClearWindow(Display *, Window);
int XClipBox(Region, XRectangle *);
int XCloseDevice(Display *, XDevice *);
int XCloseDisplay(Display *);
int XCloseIM(XIM);
int XCloseOM(XOM);
$8C3F6FFEEEA4FDE62323156E011FAD74 XCompoundTextStyle;
int XConfigureWindow(Display *, Window, unsigned int, XWindowChanges *);
int XConnectionNumber(Display *);
int XContextDependentDrawing(XFontSet);
int XContextualDrawing(XFontSet);
void XConvertCase(KeySym, KeySym *, KeySym *);
int XConvertSelection(Display *, Atom, Atom, Atom, Window, Time);
MACRO_XConverterNotFound XConverterNotFound;
int XCopyArea(Display *, Drawable, Drawable, GC, int, int, unsigned int, unsigned int, int, int);
Colormap XCopyColormapAndFree(Display *, Colormap);
int XCopyGC(Display *, GC, unsigned __int64, GC);
int XCopyPlane(Display *, Drawable, Drawable, GC, int, int, unsigned int, unsigned int, int, int, unsigned __int64);
XAssocTable *XCreateAssocTable();
Pixmap XCreateBitmapFromData(Display *, Drawable, const char *, unsigned int, unsigned int);
Colormap XCreateColormap(Display *, Window, Visual *, int);
Cursor XCreateFontCursor(Display *, unsigned int);
XFontSet XCreateFontSet(Display *, const char *, char ***, int *, char **);
GC XCreateGC(Display *, Drawable, unsigned __int64, XGCValues *);
Cursor XCreateGlyphCursor(Display *, Font, Font, unsigned int, unsigned int, XColor *, XColor *);
XIC XCreateIC(XIM, ...);
XImage *XCreateImage(Display *, Visual *, unsigned int, int, int, char *, unsigned int, unsigned int, int, int);
XOC XCreateOC(XOM, ...);
Pixmap XCreatePixmap(Display *, Drawable, unsigned int, unsigned int, unsigned int);
Cursor XCreatePixmapCursor(Display *, Pixmap, Pixmap, XColor *, XColor *, unsigned int, unsigned int);
Pixmap XCreatePixmapFromBitmapData(Display *, Drawable, char *, unsigned int, unsigned int, unsigned __int64, unsigned __int64, unsigned int);
Region XCreateRegion(void);
Window XCreateSimpleWindow(Display *, Window, int, int, unsigned int, unsigned int, unsigned int, unsigned __int64, unsigned __int64);
Window XCreateWindow(Display *, Window, int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, Visual *, unsigned __int64, XSetWindowAttributes *);
MACRO_VDATA XDATA;
$EBA0A3D002EB22B329BE0C1D617FB8B6 XDM_AWAIT_ALIVE_RESPONSE;
$EBA0A3D002EB22B329BE0C1D617FB8B6 XDM_AWAIT_MANAGE_RESPONSE;
$EBA0A3D002EB22B329BE0C1D617FB8B6 XDM_AWAIT_REQUEST_RESPONSE;
$EBA0A3D002EB22B329BE0C1D617FB8B6 XDM_AWAIT_USER_INPUT;
$EBA0A3D002EB22B329BE0C1D617FB8B6 XDM_BROADCAST;
$EBA0A3D002EB22B329BE0C1D617FB8B6 XDM_COLLECT_BROADCAST_QUERY;
$EBA0A3D002EB22B329BE0C1D617FB8B6 XDM_COLLECT_INDIRECT_QUERY;
$EBA0A3D002EB22B329BE0C1D617FB8B6 XDM_COLLECT_QUERY;
MACRO_XDM_KA XDM_DEF_DORMANCY;
$EBA0A3D002EB22B329BE0C1D617FB8B6 XDM_INDIRECT;
MACRO_XDM_KA XDM_KA_RTX_LIMIT;
$EBA0A3D002EB22B329BE0C1D617FB8B6 XDM_KEEPALIVE;
$EBA0A3D002EB22B329BE0C1D617FB8B6 XDM_MANAGE;
MACRO_XDM_KA XDM_MAX_DORMANCY;
MACRO_XDM XDM_MAX_MSGLEN;
MACRO_XDM_MIN XDM_MAX_RTX;
MACRO_XDM_MIN XDM_MIN_RTX;
$EBA0A3D002EB22B329BE0C1D617FB8B6 XDM_OFF;
MACRO_XDM XDM_PROTOCOL_VERSION;
$EBA0A3D002EB22B329BE0C1D617FB8B6 XDM_QUERY;
MACRO_XDM_RTX XDM_RTX_LIMIT;
$EBA0A3D002EB22B329BE0C1D617FB8B6 XDM_RUN_SESSION;
$EBA0A3D002EB22B329BE0C1D617FB8B6 XDM_START_CONNECTION;
MACRO_XDM XDM_UDP_PORT;
xdr_op XDR_DECODE;
xdr_op XDR_ENCODE;
xdr_op XDR_FREE;
Colormap XDefaultColormap(Display *, int);
Colormap XDefaultColormapOfScreen(Screen *);
int XDefaultDepth(Display *, int);
int XDefaultDepthOfScreen(Screen *);
GC XDefaultGC(Display *, int);
GC XDefaultGCOfScreen(Screen *);
Window XDefaultRootWindow(Display *);
int XDefaultScreen(Display *);
Screen *XDefaultScreenOfDisplay(Display *);
char *XDefaultString(void);
Visual *XDefaultVisual(Display *, int);
Visual *XDefaultVisualOfScreen(Screen *);
int XDefineCursor(Display *, Window, Cursor);
int XDeleteContext(Display *, XID, XContext);
XModifierKeymap *XDeleteModifiermapEntry(XModifierKeymap *, unsigned int, int);
int XDeleteProperty(Display *, Window, Atom);
void XDestroyIC(XIC);
void XDestroyOC(XOC);
int XDestroyRegion(Region);
int XDestroySubwindows(Display *, Window);
int XDestroyWindow(Display *, Window);
int XDeviceBell(Display *, XDevice *, XID, XID, int);
int XDirectionalDependentDrawing(XFontSet);
int XDisableAccessControl(Display *);
int XDisplayCells(Display *, int);
int XDisplayHeight(Display *, int);
int XDisplayHeightMM(Display *, int);
int XDisplayKeycodes(Display *, int *, int *);
unsigned __int64 XDisplayMotionBufferSize(Display *);
char *XDisplayName(const char *);
Display *XDisplayOfIM(XIM);
Display *XDisplayOfOM(XOM);
Display *XDisplayOfScreen(Screen *);
int XDisplayPlanes(Display *, int);
char *XDisplayString(Display *);
int XDisplayWidth(Display *, int);
int XDisplayWidthMM(Display *, int);
int XDoesBackingStore(Screen *);
int XDoesSaveUnders(Screen *);
int XDrawArc(Display *, Drawable, GC, int, int, unsigned int, unsigned int, int, int);
int XDrawArcs(Display *, Drawable, GC, XArc *, int);
int XDrawImageString(Display *, Drawable, GC, int, int, const char *, int);
int XDrawImageString16(Display *, Drawable, GC, int, int, const XChar2b *, int);
int XDrawLine(Display *, Drawable, GC, int, int, int, int);
int XDrawLines(Display *, Drawable, GC, XPoint *, int, int);
int XDrawPoint(Display *, Drawable, GC, int, int);
int XDrawPoints(Display *, Drawable, GC, XPoint *, int, int);
int XDrawRectangle(Display *, Drawable, GC, int, int, unsigned int, unsigned int);
int XDrawRectangles(Display *, Drawable, GC, XRectangle *, int);
int XDrawSegments(Display *, Drawable, GC, XSegment *, int);
int XDrawString(Display *, Drawable, GC, int, int, const char *, int);
int XDrawString16(Display *, Drawable, GC, int, int, const XChar2b *, int);
int XDrawText(Display *, Drawable, GC, int, int, XTextItem *, int);
int XDrawText16(Display *, Drawable, GC, int, int, XTextItem16 *, int);
int XEAddEventCB();
int XEAddEventCBs();
int XEAddRequestCB();
int XEAddRequestCBs();
int XEChangeTC();
int XEClearCtrlKeys();
XETC *XECreateTC();
int XEDeclExitHndlr();
int XEEnableCtrlC();
int XEEnableCtrlKeys();
int XEEnableCtrlY();
char *XEEventIDToString();
INT16 XEEventStringToID();
int XEFlushConfig();
void XEFreeTC();
int XEGetAvailableRequest();
int XEGetCurrentRequest();
int XEGetLastInpTimeRequest();
int XEGetStatisticsRequest();
int XEGetVersionRequest();
XExtData **XEHeadOfExtensionList(XEDataObject);
MACRO_XEKeyIsClear XEKeyIsClear;
MACRO_XEKeyIsClear XEKeyIsEcho;
MACRO_XEKeyIsClear XEKeyIsOther;
char *XEPlatformIDToString();
CARD32 XEPlatformStringToID();
void XEPrintAvail();
void XEPrintAvailFlags();
void XEPrintAvailPktSz();
void XEPrintCfgFlags();
void XEPrintCmdKey();
void XEPrintCurPktSz();
void XEPrintCurXY();
void XEPrintCurrent();
void XEPrintEvents();
void XEPrintEvtStats();
void XEPrintLastTime();
void XEPrintMajOpcode();
void XEPrintPlatform();
void XEPrintRelease();
void XEPrintReqStats();
void XEPrintRequests();
void XEPrintStateFlags();
void XEPrintStatistics();
void XEPrintTkFlags();
void XEPrintTkState();
MACRO_XER XER_NBBY;
char *XERequestIDToExtString();
char *XERequestIDToString();
INT16 XERequestStringToID();
int XEResetRequest();
int XESetCmdGateState();
int XESimulateXEventRequest();
int XEStartTrapRequest();
int XEStopTrapRequest();
MACRO_XETCDeltaTimes XETCDeltaTimes;
MACRO_XETCDeltaTimes XETCTrapActive;
void XETSwAllocColor();
void XETSwAllocColorCells();
void XETSwAllocColorPlanes();
void XETSwAllocNamedColor();
void XETSwChangeActivePointerGrab();
void XETSwChangeGC();
void XETSwChangeHosts();
void XETSwChangeKeyboardControl();
void XETSwChangeKeyboardMapping();
void XETSwChangePointerControl();
void XETSwChangeProperty();
void XETSwChangeWindowAttributes();
void XETSwClearToBackground();
void XETSwConfigureWindow();
void XETSwConvertSelection();
void XETSwCopyArea();
void XETSwCopyColormapAndFree();
void XETSwCopyGC();
void XETSwCopyPlane();
void XETSwCreateColormap();
void XETSwCreateCursor();
void XETSwCreateGC();
void XETSwCreateGlyphCursor();
void XETSwCreatePixmap();
void XETSwCreateWindow();
void XETSwDeleteProperty();
void XETSwFillPoly();
void XETSwFreeColors();
void XETSwGetImage();
void XETSwGetMotionEvents();
void XETSwGetProperty();
void XETSwGrabButton();
void XETSwGrabKey();
void XETSwGrabKeyboard();
void XETSwGrabPointer();
void XETSwImageText();
void XETSwInternAtom();
void XETSwListFonts();
void XETSwListFontsWithInfo();
void XETSwLookupColor();
void XETSwNoOperation();
void XETSwOpenFont();
void XETSwPoly();
void XETSwPolyText();
void XETSwPutImage();
void XETSwQueryBestSize();
void XETSwQueryColors();
void XETSwQueryExtension();
void XETSwRecolorCursor();
void XETSwReparentWindow();
void XETSwResourceReq();
void XETSwRotateProperties();
void XETSwSendEvent();
void XETSwSetClipRectangles();
void XETSwSetDashes();
void XETSwSetFontPath();
void XETSwSetInputFocus();
void XETSwSetScreenSaver();
void XETSwSetSelectionOwner();
void XETSwSimpleReq();
void XETSwStoreColors();
void XETSwStoreNamedColor();
void XETSwTranslateCoords();
void XETSwUngrabButton();
void XETSwUngrabKey();
void XETSwWarpPointer();
void XETrapAppMainLoop();
XtInputMask XETrapAppPending();
int XETrapAppWhileLoop();
void XETrapCloseDown();
MACRO_XETrapTimestamp XETrapCmd;
MACRO_XETrapTimestamp XETrapCmdKeyMod;
MACRO_XETrapTimestamp XETrapColorReplies;
int XETrapConfig();
MACRO_XETrapCoreEvents XETrapCoreEvents;
int XETrapCreateEnv();
MACRO_XETrapTimestamp XETrapCursor;
MACRO_XETrapData XETrapData;
MACRO_XETrapDataStart XETrapDataContinued;
MACRO_XETrapDataStart XETrapDataLast;
MACRO_XETrapDataStart XETrapDataStart;
int XETrapDestroyEnv();
int XETrapDispatch();
Boolean XETrapDispatchEvent();
void XETrapDispatchXLib();
MACRO_XETrapTimestamp XETrapEvent;
int XETrapGetAvailable();
int XETrapGetCurrent();
int XETrapGetLastInpTime();
int XETrapGetStatistics();
int XETrapGetVersion();
MACRO_XETrapTimestamp XETrapGrabServer;
int XETrapKeyboard();
MACRO_XETrapMaxEvent XETrapMaxEvent;
MACRO_XETrapTimestamp XETrapMaxPacket;
MACRO_XETrapMaxRequest XETrapMaxRequest;
MACRO_BadIO XETrapNumErrors;
MACRO_XETrapData XETrapNumberEvents;
void XETrapPlatformSetup();
int XETrapPointer();
MACRO_XETrapRevision XETrapProtocol;
int XETrapRedirectDevices();
MACRO_XETrapRelease XETrapRelease;
MACRO_XETrapTimestamp XETrapRequest;
int XETrapRequestVector();
int XETrapReset();
MACRO_XETrapRevision XETrapRevision;
int XETrapSetColorReplies();
int XETrapSetCommandKey();
int XETrapSetCursor();
int XETrapSetEvents();
int XETrapSetGrabServer();
int XETrapSetMaxPacket();
int XETrapSetRequests();
int XETrapSetStatistics();
int XETrapSetTimestamps();
int XETrapSetWinXY();
int XETrapSetXInput();
int XETrapSimulateXEvent();
void XETrapStampAndMail();
int XETrapStartTrap();
MACRO_XETrapTimestamp XETrapStatistics;
int XETrapStopTrap();
MACRO_XETrapTimestamp XETrapTimestamp;
MACRO_XETrapTimestamp XETrapTransIn;
MACRO_XETrapTimestamp XETrapTransOut;
MACRO_XETrapTrapActive XETrapTrapActive;
MACRO_XETrapTimestamp XETrapVectorEvents;
MACRO_XETrapRelease XETrapVersion;
int XETrapWaitForSomething();
MACRO_XETrapTimestamp XETrapWinXY;
int XETrapWriteXLib();
MACRO_XETrapTimestamp XETrapXInput;
MACRO_XETrap XETrap_Config;
MACRO_XETrap XETrap_GetAvailable;
MACRO_XETrap XETrap_GetCurrent;
MACRO_XETrap XETrap_GetLastInpTime;
MACRO_XETrap XETrap_GetStatistics;
MACRO_XETrap XETrap_GetVersion;
MACRO_XETrap XETrap_Reset;
MACRO_XETrap XETrap_SimulateXEvent;
MACRO_XETrap XETrap_StartTrap;
MACRO_XETrap XETrap_StopTrap;
int XEmptyRegion(Region);
int XEnableAccessControl(Display *);
int XEqualRegion(Region, Region);
__int64 XEventMaskOfScreen(Screen *);
int XEventsQueued(Display *, int);
__int64 XExtendedMaxRequestSize(Display *);
XFontSetExtents *XExtentsOfFontSet(XFontSet);
MACRO_XFD XFD_SETSIZE;
char *XFetchBuffer(Display *, int *, int);
char *XFetchBytes(Display *, int *);
int XFetchName(Display *, Window, char **);
int XFillArc(Display *, Drawable, GC, int, int, unsigned int, unsigned int, int, int);
int XFillArcs(Display *, Drawable, GC, XArc *, int);
int XFillPolygon(Display *, Drawable, GC, XPoint *, int, int, int);
int XFillRectangle(Display *, Drawable, GC, int, int, unsigned int, unsigned int);
int XFillRectangles(Display *, Drawable, GC, XRectangle *, int);
int XFilterEvent(XEvent *, Window);
int XFindContext(Display *, XID, XContext, XPointer *);
XExtData *XFindOnExtensionList(XExtData **, int);
int XFlush(Display *);
void XFlushGC(Display *, GC);
int XFontsOfFontSet(XFontSet, XFontStruct ***, char ***);
int XForceScreenSaver(Display *, int);
int XFree(void *);
int XFreeColormap(Display *, Colormap);
int XFreeColors(Display *, Colormap, unsigned __int64 *, int, unsigned __int64);
int XFreeCursor(Display *, Cursor);
void XFreeDeviceControl(XDeviceControl *);
void XFreeDeviceList(XDeviceInfo *);
void XFreeDeviceMotionEvents(XDeviceTimeCoord *);
void XFreeDeviceState(XDeviceState *);
int XFreeExtensionList(char **);
void XFreeFeedbackList(XFeedbackState *);
int XFreeFont(Display *, XFontStruct *);
int XFreeFontInfo(char **, XFontStruct *, int);
int XFreeFontNames(char **);
int XFreeFontPath(char **);
void XFreeFontSet(Display *, XFontSet);
int XFreeGC(Display *, GC);
int XFreeModifiermap(XModifierKeymap *);
int XFreePixmap(Display *, Pixmap);
void XFreeStringList(char **);
GContext XGContextFromGC(GC);
int XGeometry(Display *, int, const char *, const char *, unsigned int, unsigned int, unsigned int, int, int, int *, int *, int *, int *);
char *XGetAtomName(Display *, Atom);
int XGetAtomNames(Display *, Atom *, int, char **);
int XGetClassHint(Display *, Window, XClassHint *);
int XGetCommand(Display *, Window, char ***, int *);
char *XGetDefault(Display *, const char *, const char *);
int XGetDeviceButtonMapping(Display *, XDevice *, unsigned __int8 *, unsigned int);
XDeviceControl *XGetDeviceControl(Display *, XDevice *, int);
XEventClass *XGetDeviceDontPropagateList(Display *, Window, int *);
int XGetDeviceFocus(Display *, XDevice *, Window *, int *, Time *);
KeySym *XGetDeviceKeyMapping(Display *, XDevice *, unsigned int, int, int *);
XModifierKeymap *XGetDeviceModifierMapping(Display *, XDevice *);
XDeviceTimeCoord *XGetDeviceMotionEvents(Display *, XDevice *, Time, Time, int *, int *, int *);
int XGetErrorDatabaseText(Display *, const char *, const char *, const char *, char *, int);
int XGetErrorText(Display *, int, char *, int);
XExtensionVersion *XGetExtensionVersion(Display *, const char *);
XFeedbackState *XGetFeedbackControl(Display *, XDevice *, int *);
char **XGetFontPath(Display *, int *);
int XGetFontProperty(XFontStruct *, Atom, unsigned __int64 *);
int XGetGCValues(Display *, GC, unsigned __int64, XGCValues *);
int XGetGeometry(Display *, Drawable, Window *, int *, int *, unsigned int *, unsigned int *, unsigned int *, unsigned int *);
char *XGetICValues(XIC, ...);
char *XGetIMValues(XIM, ...);
int XGetIconName(Display *, Window, char **);
int XGetIconSizes(Display *, Window, XIconSize **, int *);
XImage *XGetImage(Display *, Drawable, int, int, unsigned int, unsigned int, unsigned __int64, int);
int XGetInputFocus(Display *, Window *, int *);
int XGetKeyboardControl(Display *, XKeyboardState *);
KeySym *XGetKeyboardMapping(Display *, unsigned int, int, int *);
XModifierKeymap *XGetModifierMapping(Display *);
XTimeCoord *XGetMotionEvents(Display *, Window, Time, Time, int *);
int XGetNormalHints(Display *, Window, XSizeHints *);
char *XGetOCValues(XOC, ...);
char *XGetOMValues(XOM, ...);
int XGetPointerControl(Display *, int *, int *, int *);
int XGetPointerMapping(Display *, unsigned __int8 *, int);
int XGetRGBColormaps(Display *, Window, XStandardColormap **, int *, Atom);
int XGetScreenSaver(Display *, int *, int *, int *, int *);
int XGetSelectedExtensionEvents(Display *, Window, int *, XEventClass **, int *, XEventClass **);
Window XGetSelectionOwner(Display *, Atom);
int XGetSizeHints(Display *, Window, XSizeHints *, Atom);
int XGetStandardColormap(Display *, Window, XStandardColormap *, Atom);
XImage *XGetSubImage(Display *, Drawable, int, int, unsigned int, unsigned int, unsigned __int64, int, XImage *, int, int);
int XGetTextProperty(Display *, Window, XTextProperty *, Atom);
int XGetTransientForHint(Display *, Window, Window *);
XVisualInfo *XGetVisualInfo(Display *, __int64, XVisualInfo *, int *);
int XGetWMClientMachine(Display *, Window, XTextProperty *);
int XGetWMColormapWindows(Display *, Window, Window **, int *);
XWMHints *XGetWMHints(Display *, Window);
int XGetWMIconName(Display *, Window, XTextProperty *);
int XGetWMName(Display *, Window, XTextProperty *);
int XGetWMNormalHints(Display *, Window, XSizeHints *, __int64 *);
int XGetWMProtocols(Display *, Window, Atom **, int *);
int XGetWMSizeHints(Display *, Window, XSizeHints *, __int64 *, Atom);
int XGetWindowAttributes(Display *, Window, XWindowAttributes *);
int XGetWindowProperty(Display *, Window, Atom, __int64, __int64, int, Atom, Atom *, int *, unsigned __int64 *, unsigned __int64 *, unsigned __int8 **);
int XGetZoomHints(Display *, Window, XSizeHints *);
int XGrabButton(Display *, unsigned int, unsigned int, Window, int, unsigned int, int, int, Window, Cursor);
int XGrabDevice(Display *, XDevice *, Window, int, int, XEventClass *, int, int, Time);
int XGrabDeviceButton(Display *, XDevice *, unsigned int, unsigned int, XDevice *, Window, int, unsigned int, XEventClass *, int, int);
int XGrabDeviceKey(Display *, XDevice *, unsigned int, unsigned int, XDevice *, Window, int, unsigned int, XEventClass *, int, int);
int XGrabKey(Display *, int, unsigned int, Window, int, int, int);
int XGrabKeyboard(Display *, Window, int, int, int, Time);
int XGrabPointer(Display *, Window, int, unsigned int, int, int, Window, Cursor, Time);
int XGrabServer(Display *);
int XHeightMMOfScreen(Screen *);
int XHeightOfScreen(Screen *);
MACRO_xieLatestMinorVersion XIE_FULL;
$DB4B60BC3E5D47BB5823C48350265A79 XIMAbsolutePosition;
$DB4B60BC3E5D47BB5823C48350265A79 XIMBackwardChar;
$DB4B60BC3E5D47BB5823C48350265A79 XIMBackwardWord;
$B539734676A04848B68060D6D483E0A0 XIMBitmapType;
$DB4B60BC3E5D47BB5823C48350265A79 XIMCaretDown;
$DB4B60BC3E5D47BB5823C48350265A79 XIMCaretUp;
$DB4B60BC3E5D47BB5823C48350265A79 XIMDontChange;
$DB4B60BC3E5D47BB5823C48350265A79 XIMForwardChar;
$DB4B60BC3E5D47BB5823C48350265A79 XIMForwardWord;
MACRO_XIMReverse XIMHighlight;
MACRO_XIMHotKeyStateON XIMHotKeyStateOFF;
MACRO_XIMHotKeyStateON XIMHotKeyStateON;
MACRO_XIMInitialState XIMInitialState;
$B64C39E2ADABB22C50C1D912F1D253CC XIMIsInvisible;
$B64C39E2ADABB22C50C1D912F1D253CC XIMIsPrimary;
$B64C39E2ADABB22C50C1D912F1D253CC XIMIsSecondary;
$DB4B60BC3E5D47BB5823C48350265A79 XIMLineEnd;
$DB4B60BC3E5D47BB5823C48350265A79 XIMLineStart;
$DB4B60BC3E5D47BB5823C48350265A79 XIMNextLine;
XIM XIMOfIC(XIC);
MACRO_XIMPreeditArea XIMPreeditArea;
MACRO_XIMPreeditArea XIMPreeditCallbacks;
MACRO_XIMPreeditUnKnown XIMPreeditDisable;
MACRO_XIMPreeditUnKnown XIMPreeditEnable;
MACRO_XIMPreeditArea XIMPreeditNone;
MACRO_XIMPreeditArea XIMPreeditNothing;
MACRO_XIMPreeditArea XIMPreeditPosition;
MACRO_XIMPreeditUnKnown XIMPreeditUnKnown;
MACRO_XIMInitialState XIMPreserveState;
$DB4B60BC3E5D47BB5823C48350265A79 XIMPreviousLine;
MACRO_XIMReverse XIMPrimary;
MACRO_XIMReverse XIMReverse;
MACRO_XIMReverse XIMSecondary;
MACRO_XIMPreeditArea XIMStatusArea;
MACRO_XIMPreeditArea XIMStatusCallbacks;
MACRO_XIMPreeditArea XIMStatusNone;
MACRO_XIMPreeditArea XIMStatusNothing;
MACRO_XIMStringConversionLeftEdge XIMStringConversionBottomEdge;
MACRO_XIMStringConversionBuffer XIMStringConversionBuffer;
MACRO_XIMStringConversionBuffer XIMStringConversionChar;
MACRO_XIMStringConversionLeftEdge XIMStringConversionConcealed;
MACRO_XIMStringConversionLeftEdge XIMStringConversionLeftEdge;
MACRO_XIMStringConversionBuffer XIMStringConversionLine;
MACRO_XIMStringConversionSubstitution XIMStringConversionRetrival;
MACRO_XIMStringConversionLeftEdge XIMStringConversionRightEdge;
MACRO_XIMStringConversionSubstitution XIMStringConversionSubstitution;
MACRO_XIMStringConversionLeftEdge XIMStringConversionTopEdge;
MACRO_XIMStringConversionBuffer XIMStringConversionWord;
MACRO_XIMStringConversionLeftEdge XIMStringConversionWrapped;
MACRO_XIMReverse XIMTertiary;
$B539734676A04848B68060D6D483E0A0 XIMTextType;
MACRO_XIMReverse XIMUnderline;
MACRO_XIMReverse XIMVisibleToBackword;
MACRO_XIMReverse XIMVisibleToCenter;
MACRO_XIMReverse XIMVisibleToForward;
MACRO_PACKED XIX_MAGIC;
MACRO_XI XI_Absent;
MACRO_XI_Add_XChangeDeviceControl XI_Add_XChangeDeviceControl_Major;
MACRO_XI_Add_XChangeDeviceControl XI_Add_XChangeDeviceControl_Minor;
MACRO_XI_Add XI_Add_XDeviceBell_Major;
MACRO_XI_Add_XDeviceBell XI_Add_XDeviceBell_Minor;
MACRO_XI_Add_XSetDeviceValuators XI_Add_XSetDeviceValuators_Major;
MACRO_XI_Add_XSetDeviceValuators XI_Add_XSetDeviceValuators_Minor;
MACRO_XI_BadDevice XI_BadClass;
MACRO_XI_BadDevice XI_BadDevice;
MACRO_XI_BadDevice XI_BadEvent;
MACRO_XI_BadDevice XI_BadMode;
MACRO_XI_DeviceValuator XI_ChangeDeviceNotify;
MACRO_XI_BadDevice XI_DeviceBusy;
MACRO_XI_DeviceValuator XI_DeviceButtonPress;
MACRO_XI_DeviceValuator XI_DeviceButtonRelease;
MACRO_XI_DeviceValuator XI_DeviceButtonstateNotify;
MACRO_XI_DeviceValuator XI_DeviceFocusIn;
MACRO_XI_DeviceValuator XI_DeviceFocusOut;
MACRO_XI_DeviceValuator XI_DeviceKeyPress;
MACRO_XI_DeviceValuator XI_DeviceKeyRelease;
MACRO_XI_DeviceValuator XI_DeviceKeystateNotify;
MACRO_XI_DeviceValuator XI_DeviceMappingNotify;
MACRO_XI_DeviceValuator XI_DeviceMotionNotify;
MACRO_XI_DeviceValuator XI_DeviceStateNotify;
MACRO_XI_DeviceValuator XI_DeviceValuator;
MACRO_XI_Initial XI_Initial_Release_Major;
MACRO_XI_Initial XI_Initial_Release_Minor;
MACRO_XI XI_Present;
MACRO_XI_DeviceValuator XI_ProximityIn;
MACRO_XI_DeviceValuator XI_ProximityOut;
int XIconifyWindow(Display *, Window, int);
int XIfEvent(Display *, XEvent *, int (*)(Display *, XEvent *, XPointer), XPointer);
int XImageByteOrder(Display *);
XExtCodes *XInitExtension(Display *, const char *);
int XInitImage(XImage *);
int XInitThreads(void);
MACRO_Dont XInput_Add_XChangeDeviceControl;
MACRO_Dont XInput_Add_XDeviceBell;
MACRO_Dont XInput_Add_XSetDeviceValuators;
MACRO_Dont XInput_Initial_Release;
XModifierKeymap *XInsertModifiermapEntry(XModifierKeymap *, unsigned int, int);
int XInstallColormap(Display *, Colormap);
Atom XInternAtom(Display *, const char *, int);
int XInternAtoms(Display *, char **, int, int, Atom *);
int XInternalConnectionNumbers(Display *, int **, int *);
int XIntersectRegion(Region, Region, Region);
MACRO_XKB_FORCE XKB_FORCE_INT_KEYSYM;
MACRO_XKB XKB_XLIB_MAP_MASK;
MACRO_XPOINTER XKEYBOARD;
MACRO_XKM XKM_H;
MACRO_XK_quoteright XK_0;
MACRO_XK_quoteright XK_1;
MACRO_XK_quoteright XK_2;
MACRO_XK_quoteright XK_3;
MACRO_XK_quoteright XK_4;
MACRO_XK_quoteright XK_5;
MACRO_XK_quoteright XK_6;
MACRO_XK_quoteright XK_7;
MACRO_XK_quoteright XK_8;
MACRO_XK_quoteright XK_9;
MACRO_XK_quoteright XK_A;
MACRO_XK_quoteleft XK_AE;
MACRO_XK_quoteleft XK_Aacute;
MACRO_XK_Aogonek XK_Abreve;
MACRO_XK_AccessX XK_AccessX_Enable;
MACRO_XK_AccessX XK_AccessX_Feedback_Enable;
MACRO_XK_quoteleft XK_Acircumflex;
MACRO_XK_quoteleft XK_Adiaeresis;
MACRO_XK_quoteleft XK_Agrave;
MACRO_XK_Left XK_Alt_L;
MACRO_XK_Left XK_Alt_R;
MACRO_XK_kappa XK_Amacron;
MACRO_XK_Aogonek XK_Aogonek;
MACRO_XK_quoteleft XK_Aring;
MACRO_XK_quoteleft XK_Atilde;
MACRO_XK_AccessX XK_AudibleBell_Enable;
MACRO_XK_quoteright XK_B;
MACRO_XK_Thorn XK_BackSpace;
MACRO_XK2 XK_Begin;
MACRO_XK_AccessX XK_BounceKeys_Enable;
MACRO_XK2 XK_Break;
MACRO_XK_quoteright XK_C;
MACRO_XK_rcaron XK_Cabovedot;
MACRO_XK_Aogonek XK_Cacute;
MACRO_XK2 XK_Cancel;
MACRO_XK_Left XK_Caps_Lock;
MACRO_XK_Aogonek XK_Ccaron;
MACRO_XK_quoteleft XK_Ccedilla;
MACRO_XK_rcaron XK_Ccircumflex;
MACRO_XK_Thorn XK_Clear;
MACRO_XK2 XK_Codeinput;
MACRO_XK_EcuSign XK_ColonSign;
MACRO_XK_Left XK_Control_L;
MACRO_XK_Left XK_Control_R;
MACRO_XK_EcuSign XK_CruzeiroSign;
MACRO_XK_quoteright XK_D;
MACRO_XK_Aogonek XK_Dcaron;
MACRO_XK_Thorn XK_Delete;
MACRO_XK_EcuSign XK_DongSign;
MACRO_XK_Left XK_Down;
MACRO_XK_Aogonek XK_Dstroke;
MACRO_XK_quoteright XK_E;
MACRO_XK_kappa XK_ENG;
MACRO_XK_quoteleft XK_ETH;
MACRO_XK_kappa XK_Eabovedot;
MACRO_XK_quoteleft XK_Eacute;
MACRO_XK_Aogonek XK_Ecaron;
MACRO_XK_quoteleft XK_Ecircumflex;
MACRO_XK_EcuSign XK_EcuSign;
MACRO_XK_quoteleft XK_Ediaeresis;
MACRO_XK_quoteleft XK_Egrave;
MACRO_XK_Henkan XK_Eisu_Shift;
MACRO_XK_Henkan XK_Eisu_toggle;
MACRO_XK_kappa XK_Emacron;
MACRO_XK_Home XK_End;
MACRO_XK_Aogonek XK_Eogonek;
MACRO_XK_Thorn XK_Escape;
MACRO_XK_Eth XK_Eth;
MACRO_XK_EcuSign XK_EuroSign;
MACRO_XK2 XK_Execute;
MACRO_XK_quoteright XK_F;
MACRO_XK XK_F1;
MACRO_XK XK_F10;
MACRO_XK XK_F11;
MACRO_XK_L1 XK_F12;
MACRO_XK_L2 XK_F13;
MACRO_XK_L3 XK_F14;
MACRO_XK_L4 XK_F15;
MACRO_XK_L5 XK_F16;
MACRO_XK_L6 XK_F17;
MACRO_XK_L7 XK_F18;
MACRO_XK_L8 XK_F19;
MACRO_XK XK_F2;
MACRO_XK_L9 XK_F20;
MACRO_XK_L10 XK_F21;
MACRO_XK_R1 XK_F22;
MACRO_XK_R2 XK_F23;
MACRO_XK_R3 XK_F24;
MACRO_XK_R4 XK_F25;
MACRO_XK_R5 XK_F26;
MACRO_XK_R6 XK_F27;
MACRO_XK_R7 XK_F28;
MACRO_XK_R8 XK_F29;
MACRO_XK XK_F3;
MACRO_XK_R9 XK_F30;
MACRO_XK_R10 XK_F31;
MACRO_XK_R11 XK_F32;
MACRO_XK_F33 XK_F33;
MACRO_XK_F33 XK_F34;
MACRO_XK_R14 XK_F35;
MACRO_XK XK_F4;
MACRO_XK XK_F5;
MACRO_XK XK_F6;
MACRO_XK XK_F7;
MACRO_XK XK_F8;
MACRO_XK XK_F9;
MACRO_XK_EcuSign XK_FFrancSign;
MACRO_XK_Menu XK_Find;
MACRO_XK_ISO XK_First_Virtual_Screen;
MACRO_XK_quoteright XK_G;
MACRO_XK_rcaron XK_Gabovedot;
MACRO_XK_rcaron XK_Gbreve;
MACRO_XK_kappa XK_Gcedilla;
MACRO_XK_rcaron XK_Gcircumflex;
MACRO_XK_Greek XK_Greek_ALPHA;
MACRO_XK_Greek XK_Greek_ALPHAaccent;
MACRO_XK_Greek XK_Greek_BETA;
MACRO_XK_Greek_LAMBDA XK_Greek_CHI;
MACRO_XK_Greek XK_Greek_DELTA;
MACRO_XK_Greek XK_Greek_EPSILON;
MACRO_XK_Greek XK_Greek_EPSILONaccent;
MACRO_XK_Greek XK_Greek_ETA;
MACRO_XK_Greek XK_Greek_ETAaccent;
MACRO_XK_Greek XK_Greek_GAMMA;
MACRO_XK_Greek XK_Greek_IOTA;
MACRO_XK_Greek XK_Greek_IOTAaccent;
MACRO_XK_Greek XK_Greek_IOTAdiaeresis;
MACRO_XK_Greek XK_Greek_KAPPA;
MACRO_XK_Greek_LAMBDA XK_Greek_LAMBDA;
MACRO_XK_Greek XK_Greek_LAMDA;
MACRO_XK_Greek_LAMBDA XK_Greek_MU;
MACRO_XK_Greek_LAMBDA XK_Greek_NU;
MACRO_XK_Greek_LAMBDA XK_Greek_OMEGA;
MACRO_XK_Greek XK_Greek_OMEGAaccent;
MACRO_XK_Greek_LAMBDA XK_Greek_OMICRON;
MACRO_XK_Greek XK_Greek_OMICRONaccent;
MACRO_XK_Greek_LAMBDA XK_Greek_PHI;
MACRO_XK_Greek_LAMBDA XK_Greek_PI;
MACRO_XK_Greek_LAMBDA XK_Greek_PSI;
MACRO_XK_Greek_LAMBDA XK_Greek_RHO;
MACRO_XK_Greek_LAMBDA XK_Greek_SIGMA;
MACRO_XK_Greek_LAMBDA XK_Greek_TAU;
MACRO_XK_Greek XK_Greek_THETA;
MACRO_XK_Greek_LAMBDA XK_Greek_UPSILON;
MACRO_XK_Greek XK_Greek_UPSILONaccent;
MACRO_XK_Greek XK_Greek_UPSILONdieresis;
MACRO_XK_Greek_LAMBDA XK_Greek_XI;
MACRO_XK_Greek XK_Greek_ZETA;
MACRO_XK_Greek XK_Greek_accentdieresis;
MACRO_XK_Greek_LAMBDA XK_Greek_alpha;
MACRO_XK_Greek XK_Greek_alphaaccent;
MACRO_XK_Greek_LAMBDA XK_Greek_beta;
MACRO_XK_Greek_lambda XK_Greek_chi;
MACRO_XK_Greek_LAMBDA XK_Greek_delta;
MACRO_XK_Greek_LAMBDA XK_Greek_epsilon;
MACRO_XK_Greek XK_Greek_epsilonaccent;
MACRO_XK_Greek_LAMBDA XK_Greek_eta;
MACRO_XK_Greek XK_Greek_etaaccent;
MACRO_XK_Greek_lambda XK_Greek_finalsmallsigma;
MACRO_XK_Greek_LAMBDA XK_Greek_gamma;
MACRO_XK_Greek XK_Greek_horizbar;
MACRO_XK_Greek_LAMBDA XK_Greek_iota;
MACRO_XK_Greek XK_Greek_iotaaccent;
MACRO_XK_Greek XK_Greek_iotaaccentdieresis;
MACRO_XK_Greek XK_Greek_iotadieresis;
MACRO_XK_Greek_LAMBDA XK_Greek_kappa;
MACRO_XK_Greek_lambda XK_Greek_lambda;
MACRO_XK_Greek_LAMBDA XK_Greek_lamda;
MACRO_XK_Greek_lambda XK_Greek_mu;
MACRO_XK_Greek_lambda XK_Greek_nu;
MACRO_XK_Greek_lambda XK_Greek_omega;
MACRO_XK_Greek XK_Greek_omegaaccent;
MACRO_XK_Greek_lambda XK_Greek_omicron;
MACRO_XK_Greek XK_Greek_omicronaccent;
MACRO_XK_Greek_lambda XK_Greek_phi;
MACRO_XK_Greek_lambda XK_Greek_pi;
MACRO_XK_Greek_lambda XK_Greek_psi;
MACRO_XK_Greek_lambda XK_Greek_rho;
MACRO_XK_Greek_lambda XK_Greek_sigma;
MACRO_XK_Greek_lambda XK_Greek_switch;
MACRO_XK_Greek_lambda XK_Greek_tau;
MACRO_XK_Greek_LAMBDA XK_Greek_theta;
MACRO_XK_Greek_lambda XK_Greek_upsilon;
MACRO_XK_Greek XK_Greek_upsilonaccent;
MACRO_XK_Greek XK_Greek_upsilonaccentdieresis;
MACRO_XK_Greek XK_Greek_upsilondieresis;
MACRO_XK_Greek_lambda XK_Greek_xi;
MACRO_XK_Greek_LAMBDA XK_Greek_zeta;
MACRO_XK_quoteright XK_H;
MACRO_XK_Henkan XK_Hankaku;
MACRO_XK_rcaron XK_Hcircumflex;
MACRO_XK_Help XK_Help;
MACRO_XK_Henkan XK_Henkan;
MACRO_XK_Multi XK_Henkan_Mode;
MACRO_XK_Henkan XK_Hiragana;
MACRO_XK_Henkan XK_Hiragana_Katakana;
MACRO_XK_Home XK_Home;
MACRO_XK_rcaron XK_Hstroke;
MACRO_XK_Left XK_Hyper_L;
MACRO_XK_Left XK_Hyper_R;
MACRO_XK_quoteright XK_I;
MACRO_XK_ISO XK_ISO_Center_Object;
MACRO_XK_ISO XK_ISO_Continuous_Underline;
MACRO_XK_ISO XK_ISO_Discontinuous_Underline;
MACRO_XK_ISO XK_ISO_Emphasize;
MACRO_XK_ISO XK_ISO_Enter;
MACRO_XK_ISO XK_ISO_Fast_Cursor_Down;
MACRO_XK_ISO XK_ISO_Fast_Cursor_Left;
MACRO_XK_ISO XK_ISO_Fast_Cursor_Right;
MACRO_XK_ISO XK_ISO_Fast_Cursor_Up;
MACRO_XK_ISO XK_ISO_First_Group;
MACRO_XK_ISO XK_ISO_First_Group_Lock;
MACRO_XK_ISO XK_ISO_Group_Latch;
MACRO_XK_ISO XK_ISO_Group_Lock;
MACRO_XK_ISO XK_ISO_Group_Shift;
MACRO_XK_ISO XK_ISO_Last_Group;
MACRO_XK_ISO XK_ISO_Last_Group_Lock;
MACRO_XK_ISO XK_ISO_Left_Tab;
MACRO_XK_ISO XK_ISO_Level2_Latch;
MACRO_XK_ISO XK_ISO_Level3_Latch;
MACRO_XK_ISO XK_ISO_Level3_Lock;
MACRO_XK_ISO XK_ISO_Level3_Shift;
MACRO_XK_ISO XK_ISO_Lock;
MACRO_XK_ISO XK_ISO_Move_Line_Down;
MACRO_XK_ISO XK_ISO_Move_Line_Up;
MACRO_XK_ISO XK_ISO_Next_Group;
MACRO_XK_ISO XK_ISO_Next_Group_Lock;
MACRO_XK_ISO XK_ISO_Partial_Line_Down;
MACRO_XK_ISO XK_ISO_Partial_Line_Up;
MACRO_XK_ISO XK_ISO_Partial_Space_Left;
MACRO_XK_ISO XK_ISO_Partial_Space_Right;
MACRO_XK_ISO XK_ISO_Prev_Group;
MACRO_XK_ISO XK_ISO_Prev_Group_Lock;
MACRO_XK_ISO XK_ISO_Release_Both_Margins;
MACRO_XK_ISO XK_ISO_Release_Margin_Left;
MACRO_XK_ISO XK_ISO_Release_Margin_Right;
MACRO_XK_ISO XK_ISO_Set_Margin_Left;
MACRO_XK_ISO XK_ISO_Set_Margin_Right;
MACRO_XK_rcaron XK_Iabovedot;
MACRO_XK_quoteleft XK_Iacute;
MACRO_XK_quoteleft XK_Icircumflex;
MACRO_XK_quoteleft XK_Idiaeresis;
MACRO_XK_quoteleft XK_Igrave;
MACRO_XK_kappa XK_Imacron;
MACRO_XK_Insert XK_Insert;
MACRO_XK_kappa XK_Iogonek;
MACRO_XK_kappa XK_Itilde;
MACRO_XK_quoteright XK_J;
MACRO_XK_rcaron XK_Jcircumflex;
MACRO_XK_quoteright XK_K;
MACRO_XK_KP XK_KP_0;
MACRO_XK_KP XK_KP_1;
MACRO_XK_KP XK_KP_2;
MACRO_XK_KP XK_KP_3;
MACRO_XK_KP XK_KP_4;
MACRO_XK_KP XK_KP_5;
MACRO_XK_KP XK_KP_6;
MACRO_XK_KP XK_KP_7;
MACRO_XK_KP XK_KP_8;
MACRO_XK_KP XK_KP_9;
MACRO_XK_KP XK_KP_Add;
MACRO_XK_KP2 XK_KP_Begin;
MACRO_XK_KP XK_KP_Decimal;
MACRO_XK_KP2 XK_KP_Delete;
MACRO_XK_KP XK_KP_Divide;
MACRO_XK_KP2 XK_KP_Down;
MACRO_XK_KP2 XK_KP_End;
MACRO_XK_Home XK_KP_Enter;
MACRO_XK_Home XK_KP_Equal;
MACRO_XK_Home XK_KP_F1;
MACRO_XK_Home XK_KP_F2;
MACRO_XK_Home XK_KP_F3;
MACRO_XK_Home XK_KP_F4;
MACRO_XK_KP2 XK_KP_Home;
MACRO_XK_KP2 XK_KP_Insert;
MACRO_XK_KP2 XK_KP_Left;
MACRO_XK_KP XK_KP_Multiply;
MACRO_XK_KP2 XK_KP_Next;
MACRO_XK_KP2 XK_KP_Page_Down;
MACRO_XK_KP2 XK_KP_Page_Up;
MACRO_XK_KP2 XK_KP_Prior;
MACRO_XK_KP2 XK_KP_Right;
MACRO_XK_KP XK_KP_Separator;
MACRO_XK_Home XK_KP_Space;
MACRO_XK_KP XK_KP_Subtract;
MACRO_XK_Home XK_KP_Tab;
MACRO_XK_KP2 XK_KP_Up;
MACRO_XK_Henkan XK_Kana_Lock;
MACRO_XK_Henkan XK_Kana_Shift;
MACRO_XK_Multi XK_Kanji;
MACRO_XK2 XK_Kanji_Bangou;
MACRO_XK_Henkan XK_Katakana;
MACRO_XK_kappa XK_Kcedilla;
MACRO_XK_quoteright XK_L;
MACRO_XK_L1 XK_L1;
MACRO_XK_L10 XK_L10;
MACRO_XK_L2 XK_L2;
MACRO_XK_L3 XK_L3;
MACRO_XK_L4 XK_L4;
MACRO_XK_L5 XK_L5;
MACRO_XK_L6 XK_L6;
MACRO_XK_L7 XK_L7;
MACRO_XK_L8 XK_L8;
MACRO_XK_L9 XK_L9;
MACRO_XK_Aogonek XK_Lacute;
MACRO_XK_ISO XK_Last_Virtual_Screen;
MACRO_XK_Aogonek XK_Lcaron;
MACRO_XK_kappa XK_Lcedilla;
MACRO_XK_Left XK_Left;
MACRO_XK_Thorn XK_Linefeed;
MACRO_XK_EcuSign XK_LiraSign;
MACRO_XK_Aogonek XK_Lstroke;
MACRO_XK_quoteright XK_M;
MACRO_XK2 XK_Mae_Koho;
MACRO_XK_Henkan XK_Massyo;
MACRO_XK_Menu XK_Menu;
MACRO_XK_Left XK_Meta_L;
MACRO_XK_Left XK_Meta_R;
MACRO_XK_EcuSign XK_MillSign;
MACRO_XK2 XK_Mode_switch;
MACRO_XK_AccessX XK_MouseKeys_Accel_Enable;
MACRO_XK_AccessX XK_MouseKeys_Enable;
MACRO_XK_Multi XK_Muhenkan;
MACRO_XK_Multi XK_Multi_key;
MACRO_XK2 XK_MultipleCandidate;
MACRO_XK_quoteright XK_N;
MACRO_XK_Aogonek XK_Nacute;
MACRO_XK_EcuSign XK_NairaSign;
MACRO_XK_Aogonek XK_Ncaron;
MACRO_XK_kappa XK_Ncedilla;
MACRO_XK_EcuSign XK_NewSheqelSign;
MACRO_XK_Prior XK_Next;
MACRO_XK_ISO XK_Next_Virtual_Screen;
MACRO_XK_Eth XK_Ntilde;
MACRO_XK_Home XK_Num_Lock;
MACRO_XK_quoteright XK_O;
MACRO_XK_kappa XK_OE;
MACRO_XK_Eth XK_Oacute;
MACRO_XK_Eth XK_Ocircumflex;
MACRO_XK_Eth XK_Odiaeresis;
MACRO_XK_Aogonek XK_Odoubleacute;
MACRO_XK_Eth XK_Ograve;
MACRO_XK_kappa XK_Omacron;
MACRO_XK_Eth XK_Ooblique;
MACRO_XK_Eth XK_Otilde;
MACRO_XK_AccessX XK_Overlay1_Enable;
MACRO_XK_AccessX XK_Overlay2_Enable;
MACRO_XK_quoteright XK_P;
MACRO_XK2 XK_Page_Down;
MACRO_XK2 XK_Page_Up;
MACRO_XK_Thorn XK_Pause;
MACRO_XK_EcuSign XK_PesetaSign;
MACRO_XK_Pointer XK_Pointer_Accelerate;
MACRO_XK_AccessX XK_Pointer_Button1;
MACRO_XK_AccessX XK_Pointer_Button2;
MACRO_XK_AccessX XK_Pointer_Button3;
MACRO_XK_AccessX XK_Pointer_Button4;
MACRO_XK_AccessX XK_Pointer_Button5;
MACRO_XK_AccessX XK_Pointer_Button_Dflt;
MACRO_XK_AccessX XK_Pointer_DblClick1;
MACRO_XK_AccessX XK_Pointer_DblClick2;
MACRO_XK_AccessX XK_Pointer_DblClick3;
MACRO_XK_AccessX XK_Pointer_DblClick4;
MACRO_XK_AccessX XK_Pointer_DblClick5;
MACRO_XK_AccessX XK_Pointer_DblClick_Dflt;
MACRO_XK_Pointer XK_Pointer_DfltBtnNext;
MACRO_XK_Pointer XK_Pointer_DfltBtnPrev;
MACRO_XK_AccessX XK_Pointer_Down;
MACRO_XK_AccessX XK_Pointer_DownLeft;
MACRO_XK_AccessX XK_Pointer_DownRight;
MACRO_XK_AccessX XK_Pointer_Drag1;
MACRO_XK_AccessX XK_Pointer_Drag2;
MACRO_XK_AccessX XK_Pointer_Drag3;
MACRO_XK_AccessX XK_Pointer_Drag4;
MACRO_XK_AccessX XK_Pointer_Drag5;
MACRO_XK_AccessX XK_Pointer_Drag_Dflt;
MACRO_XK_Pointer XK_Pointer_EnableKeys;
MACRO_XK_AccessX XK_Pointer_Left;
MACRO_XK_AccessX XK_Pointer_Right;
MACRO_XK_AccessX XK_Pointer_Up;
MACRO_XK_AccessX XK_Pointer_UpLeft;
MACRO_XK_AccessX XK_Pointer_UpRight;
MACRO_XK_ISO XK_Prev_Virtual_Screen;
MACRO_XK2 XK_PreviousCandidate;
MACRO_XK_Prior XK_Print;
MACRO_XK_Prior XK_Prior;
MACRO_XK_quoteright XK_Q;
MACRO_XK_quoteright XK_R;
MACRO_XK_R1 XK_R1;
MACRO_XK_R10 XK_R10;
MACRO_XK_R11 XK_R11;
MACRO_XK_R12 XK_R12;
MACRO_XK_R12 XK_R13;
MACRO_XK_R14 XK_R14;
MACRO_XK_R15 XK_R15;
MACRO_XK_R2 XK_R2;
MACRO_XK_R3 XK_R3;
MACRO_XK_R4 XK_R4;
MACRO_XK_R5 XK_R5;
MACRO_XK_R6 XK_R6;
MACRO_XK_R7 XK_R7;
MACRO_XK_R8 XK_R8;
MACRO_XK_R9 XK_R9;
MACRO_XK_Aogonek XK_Racute;
MACRO_XK_Aogonek XK_Rcaron;
MACRO_XK_kappa XK_Rcedilla;
MACRO_XK2 XK_Redo;
MACRO_XK_AccessX XK_RepeatKeys_Enable;
MACRO_XK_Thorn XK_Return;
MACRO_XK_Left XK_Right;
MACRO_XK_Henkan XK_Romaji;
MACRO_XK_EcuSign XK_RupeeSign;
MACRO_XK_quoteright XK_S;
MACRO_XK_Aogonek XK_Sacute;
MACRO_XK_Aogonek XK_Scaron;
MACRO_XK_Aogonek XK_Scedilla;
MACRO_XK_rcaron XK_Scircumflex;
MACRO_XK_Thorn XK_Scroll_Lock;
MACRO_XK_Select XK_Select;
MACRO_XK_Left XK_Shift_L;
MACRO_XK_Left XK_Shift_Lock;
MACRO_XK_Left XK_Shift_R;
MACRO_XK2 XK_SingleCandidate;
MACRO_XK_AccessX XK_SlowKeys_Enable;
MACRO_XK_AccessX XK_StickyKeys_Enable;
MACRO_XK_Left XK_Super_L;
MACRO_XK_Left XK_Super_R;
MACRO_XK2 XK_Sys_Req;
MACRO_XK_quoteright XK_T;
MACRO_XK_Eth XK_THORN;
MACRO_XK_Thorn XK_Tab;
MACRO_XK_Aogonek XK_Tcaron;
MACRO_XK_Aogonek XK_Tcedilla;
MACRO_XK_ISO XK_Terminate_Server;
MACRO_XK_Thorn XK_Thorn;
MACRO_XK_Henkan XK_Touroku;
MACRO_XK_kappa XK_Tslash;
MACRO_XK_quoteright XK_U;
MACRO_XK_Eth XK_Uacute;
MACRO_XK_rcaron XK_Ubreve;
MACRO_XK_Eth XK_Ucircumflex;
MACRO_XK_Eth XK_Udiaeresis;
MACRO_XK_Aogonek XK_Udoubleacute;
MACRO_XK_Eth XK_Ugrave;
MACRO_XK_kappa XK_Umacron;
MACRO_XK2 XK_Undo;
MACRO_XK_kappa XK_Uogonek;
MACRO_XK_Left XK_Up;
MACRO_XK_Aogonek XK_Uring;
MACRO_XK_kappa XK_Utilde;
MACRO_XK_quoteright XK_V;
MACRO_XK2 XK_VoidSymbol;
MACRO_XK_quoteright XK_W;
MACRO_XK_EcuSign XK_WonSign;
MACRO_XK_quoteright XK_X;
MACRO_XK_quoteright XK_Y;
MACRO_XK_Eth XK_Yacute;
MACRO_XK_kappa XK_Ydiaeresis;
MACRO_XK_quoteright XK_Z;
MACRO_XK_Aogonek XK_Zabovedot;
MACRO_XK_Aogonek XK_Zacute;
MACRO_XK_Aogonek XK_Zcaron;
MACRO_XK2 XK_Zen_Koho;
MACRO_XK_Henkan XK_Zenkaku;
MACRO_XK_Henkan XK_Zenkaku_Hankaku;
MACRO_XK_quoteleft XK_a;
MACRO_XK_Thorn XK_aacute;
MACRO_XK_rcaron XK_abovedot;
MACRO_XK_Aogonek XK_abreve;
MACRO_XK_Thorn XK_acircumflex;
MACRO_XK_quoteleft XK_acute;
MACRO_XK_Thorn XK_adiaeresis;
MACRO_XK_Thorn XK_ae;
MACRO_XK_Thorn XK_agrave;
MACRO_XK_kappa XK_amacron;
MACRO_XK_space XK_ampersand;
MACRO_XK_Aogonek XK_aogonek;
MACRO_XK_space XK_apostrophe;
MACRO_XK_Thorn XK_aring;
MACRO_XK_quoteright XK_asciicircum;
MACRO_XK_quoteleft XK_asciitilde;
MACRO_XK_quoteright XK_asterisk;
MACRO_XK_quoteright XK_at;
MACRO_XK_Thorn XK_atilde;
MACRO_XK_quoteleft XK_b;
MACRO_XK_quoteright XK_backslash;
MACRO_XK_quoteleft XK_bar;
MACRO_XK_quoteleft XK_braceleft;
MACRO_XK_quoteleft XK_braceright;
MACRO_XK_quoteright XK_bracketleft;
MACRO_XK_quoteright XK_bracketright;
MACRO_XK_Aogonek XK_breve;
MACRO_XK_quoteleft XK_brokenbar;
MACRO_XK_quoteleft XK_c;
MACRO_XK_rcaron XK_cabovedot;
MACRO_XK_Aogonek XK_cacute;
MACRO_XK_Aogonek XK_caron;
MACRO_XK_Aogonek XK_ccaron;
MACRO_XK_Thorn XK_ccedilla;
MACRO_XK_rcaron XK_ccircumflex;
MACRO_XK_quoteleft XK_cedilla;
MACRO_XK_quoteleft XK_cent;
MACRO_XK_quoteright XK_colon;
MACRO_XK_quoteright XK_comma;
MACRO_XK_quoteleft XK_copyright;
MACRO_XK_quoteleft XK_currency;
MACRO_XK_quoteleft XK_d;
MACRO_XK_Aogonek XK_dcaron;
MACRO_XK_ISO XK_dead_abovedot;
MACRO_XK_ISO XK_dead_abovering;
MACRO_XK_ISO XK_dead_acute;
MACRO_XK_ISO XK_dead_belowdot;
MACRO_XK_ISO XK_dead_breve;
MACRO_XK_ISO XK_dead_caron;
MACRO_XK_ISO XK_dead_cedilla;
MACRO_XK_ISO XK_dead_circumflex;
MACRO_XK_ISO XK_dead_diaeresis;
MACRO_XK_ISO XK_dead_doubleacute;
MACRO_XK_ISO XK_dead_grave;
MACRO_XK_ISO XK_dead_iota;
MACRO_XK_ISO XK_dead_macron;
MACRO_XK_ISO XK_dead_ogonek;
MACRO_XK_ISO XK_dead_semivoiced_sound;
MACRO_XK_ISO XK_dead_tilde;
MACRO_XK_ISO XK_dead_voiced_sound;
MACRO_XK_quoteleft XK_degree;
MACRO_XK_quoteleft XK_diaeresis;
MACRO_XK_Thorn XK_division;
MACRO_XK_space XK_dollar;
MACRO_XK_Aogonek XK_doubleacute;
MACRO_XK_Aogonek XK_dstroke;
MACRO_XK_quoteleft XK_e;
MACRO_XK_kappa XK_eabovedot;
MACRO_XK_Thorn XK_eacute;
MACRO_XK_Aogonek XK_ecaron;
MACRO_XK_Thorn XK_ecircumflex;
MACRO_XK_Thorn XK_ediaeresis;
MACRO_XK_Thorn XK_egrave;
MACRO_XK_kappa XK_emacron;
MACRO_XK_kappa XK_eng;
MACRO_XK_Aogonek XK_eogonek;
MACRO_XK_quoteright XK_equal;
MACRO_XK_Thorn XK_eth;
MACRO_XK_space XK_exclam;
MACRO_XK_quoteleft XK_exclamdown;
MACRO_XK_quoteleft XK_f;
MACRO_XK_quoteleft XK_g;
MACRO_XK_rcaron XK_gabovedot;
MACRO_XK_rcaron XK_gbreve;
MACRO_XK_kappa XK_gcedilla;
MACRO_XK_rcaron XK_gcircumflex;
MACRO_XK_quoteright XK_grave;
MACRO_XK_quoteright XK_greater;
MACRO_XK_quoteleft XK_guillemotleft;
MACRO_XK_quoteleft XK_guillemotright;
MACRO_XK_quoteleft XK_h;
MACRO_XK_rcaron XK_hcircumflex;
MACRO_XK_rcaron XK_hstroke;
MACRO_XK_quoteleft XK_hyphen;
MACRO_XK_quoteleft XK_i;
MACRO_XK_Thorn XK_iacute;
MACRO_XK_Thorn XK_icircumflex;
MACRO_XK_Thorn XK_idiaeresis;
MACRO_XK_rcaron XK_idotless;
MACRO_XK_Thorn XK_igrave;
MACRO_XK_kappa XK_imacron;
MACRO_XK_kappa XK_iogonek;
MACRO_XK_kappa XK_itilde;
MACRO_XK_quoteleft XK_j;
MACRO_XK_rcaron XK_jcircumflex;
MACRO_XK_quoteleft XK_k;
MACRO_XK_kappa XK_kappa;
MACRO_XK_kappa XK_kcedilla;
MACRO_XK_rcaron XK_kra;
MACRO_XK_quoteleft XK_l;
MACRO_XK_Aogonek XK_lacute;
MACRO_XK_Aogonek XK_lcaron;
MACRO_XK_kappa XK_lcedilla;
MACRO_XK_quoteright XK_less;
MACRO_XK_Aogonek XK_lstroke;
MACRO_XK_quoteleft XK_m;
MACRO_XK_quoteleft XK_macron;
MACRO_XK_quoteleft XK_masculine;
MACRO_XK_quoteright XK_minus;
MACRO_XK_quoteleft XK_mu;
MACRO_XK_Eth XK_multiply;
MACRO_XK_quoteleft XK_n;
MACRO_XK_Aogonek XK_nacute;
MACRO_XK_Aogonek XK_ncaron;
MACRO_XK_kappa XK_ncedilla;
MACRO_XK_quoteleft XK_nobreakspace;
MACRO_XK_quoteleft XK_notsign;
MACRO_XK_Thorn XK_ntilde;
MACRO_XK_space XK_numbersign;
MACRO_XK_quoteleft XK_o;
MACRO_XK_Thorn XK_oacute;
MACRO_XK_Thorn XK_ocircumflex;
MACRO_XK_Thorn XK_odiaeresis;
MACRO_XK_Aogonek XK_odoubleacute;
MACRO_XK_kappa XK_oe;
MACRO_XK_Aogonek XK_ogonek;
MACRO_XK_Thorn XK_ograve;
MACRO_XK_kappa XK_omacron;
MACRO_XK_quoteleft XK_onehalf;
MACRO_XK_quoteleft XK_onequarter;
MACRO_XK_quoteleft XK_onesuperior;
MACRO_XK_quoteleft XK_ordfeminine;
MACRO_XK_Thorn XK_oslash;
MACRO_XK_Thorn XK_otilde;
MACRO_XK_quoteleft XK_p;
MACRO_XK_quoteleft XK_paragraph;
MACRO_XK_quoteright XK_parenleft;
MACRO_XK_quoteright XK_parenright;
MACRO_XK_space XK_percent;
MACRO_XK_quoteright XK_period;
MACRO_XK_quoteleft XK_periodcentered;
MACRO_XK_quoteright XK_plus;
MACRO_XK_quoteleft XK_plusminus;
MACRO_XK_quoteleft XK_q;
MACRO_XK_quoteright XK_question;
MACRO_XK_quoteleft XK_questiondown;
MACRO_XK_space XK_quotedbl;
MACRO_XK_quoteleft XK_quoteleft;
MACRO_XK_quoteright XK_quoteright;
MACRO_XK_quoteleft XK_r;
MACRO_XK_Aogonek XK_racute;
MACRO_XK_rcaron XK_rcaron;
MACRO_XK_kappa XK_rcedilla;
MACRO_XK_quoteleft XK_registered;
MACRO_XK_quoteleft XK_s;
MACRO_XK_Aogonek XK_sacute;
MACRO_XK_Aogonek XK_scaron;
MACRO_XK_Aogonek XK_scedilla;
MACRO_XK_rcaron XK_scircumflex;
MACRO_XK2 XK_script_switch;
MACRO_XK_quoteleft XK_section;
MACRO_XK_quoteright XK_semicolon;
MACRO_XK_quoteright XK_slash;
MACRO_XK_space XK_space;
MACRO_XK_Thorn XK_ssharp;
MACRO_XK_quoteleft XK_sterling;
MACRO_XK_quoteleft XK_t;
MACRO_XK_Aogonek XK_tcaron;
MACRO_XK_rcaron XK_tcedilla;
MACRO_XK_Thorn XK_thorn;
MACRO_XK_quoteleft XK_threequarters;
MACRO_XK_quoteleft XK_threesuperior;
MACRO_XK_kappa XK_tslash;
MACRO_XK_quoteleft XK_twosuperior;
MACRO_XK_quoteleft XK_u;
MACRO_XK_Thorn XK_uacute;
MACRO_XK_rcaron XK_ubreve;
MACRO_XK_Thorn XK_ucircumflex;
MACRO_XK_Thorn XK_udiaeresis;
MACRO_XK_Aogonek XK_udoubleacute;
MACRO_XK_Thorn XK_ugrave;
MACRO_XK_kappa XK_umacron;
MACRO_XK_quoteright XK_underscore;
MACRO_XK_kappa XK_uogonek;
MACRO_XK_rcaron XK_uring;
MACRO_XK_kappa XK_utilde;
MACRO_XK_quoteleft XK_v;
MACRO_XK_quoteleft XK_w;
MACRO_XK_quoteleft XK_x;
MACRO_XK_quoteleft XK_y;
MACRO_XK_Thorn XK_yacute;
MACRO_XK_Thorn XK_ydiaeresis;
MACRO_XK_quoteleft XK_yen;
MACRO_XK_quoteleft XK_z;
MACRO_XK_Aogonek XK_zabovedot;
MACRO_XK_Aogonek XK_zacute;
MACRO_XK_Aogonek XK_zcaron;
KeySym XKeycodeToKeysym(Display *, unsigned int, int);
KeyCode XKeysymToKeycode(Display *, KeySym);
char *XKeysymToString(KeySym);
int XKillClient(Display *, XID);
MACRO_XLMAGIC XLMAGIC;
unsigned __int64 XLastKnownRequestProcessed(Display *);
int *XListDepths(Display *, int, int *);
char **XListExtensions(Display *, int *);
char **XListFonts(Display *, const char *, int, int *);
char **XListFontsWithInfo(Display *, const char *, int, int *, XFontStruct **);
XHostAddress *XListHosts(Display *, int *, int *);
XDeviceInfo *XListInputDevices(Display *, int *);
Colormap *XListInstalledColormaps(Display *, Window, int *);
XPixmapFormatValues *XListPixmapFormats(Display *, int *);
Atom *XListProperties(Display *, Window, int *);
Font XLoadFont(Display *, const char *);
XFontStruct *XLoadQueryFont(Display *, const char *);
MACRO_XLocaleNotSupported XLocaleNotSupported;
char *XLocaleOfFontSet(XFontSet);
char *XLocaleOfIM(XIM);
char *XLocaleOfOM(XOM);
void XLockDisplay(Display *);
char *XLookUpAssoc();
MACRO_XLookupNone XLookupBoth;
MACRO_XLookupNone XLookupChars;
int XLookupColor(Display *, Colormap, const char *, XColor *, XColor *);
MACRO_XLookupNone XLookupKeySym;
KeySym XLookupKeysym(XKeyEvent *, int);
MACRO_XLookupNone XLookupNone;
int XLookupString(XKeyEvent *, char *, int, KeySym *, XComposeStatus *);
int XLowerWindow(Display *, Window);
MACRO_XMD XMD_H;
int XMITMiscGetBugMode(Display *);
int XMITMiscQueryExtension(Display *, int *, int *);
int XMITMiscSetBugMode(Display *, int);
$2E2E66AB16B6733286DFB227364D15C8 XMT_NIL;
$2E2E66AB16B6733286DFB227364D15C8 XMT_RESERVED;
$2E2E66AB16B6733286DFB227364D15C8 XMT_SIMPLE;
$2E2E66AB16B6733286DFB227364D15C8 XMT_STRIPE;
int XMapRaised(Display *, Window);
int XMapSubwindows(Display *, Window);
int XMapWindow(Display *, Window);
int XMaskEvent(Display *, __int64, XEvent *);
int XMatchVisualInfo(Display *, int, int, int, XVisualInfo *);
int XMaxCmapsOfScreen(Screen *);
__int64 XMaxRequestSize(Display *);
int XMinCmapsOfScreen(Screen *);
int XMissingExtension(Display *, const char *);
int XMoveResizeWindow(Display *, Window, int, int, unsigned int, unsigned int);
int XMoveWindow(Display *, Window, int, int);
bool XN;
MACRO_ISO_SAP XNS_SAP;
MACRO_NoValue XNegative;
XModifierKeymap *XNewModifiermap(int);
int XNextEvent(Display *, XEvent *);
unsigned __int64 XNextRequest(Display *);
MACRO_DontCareState XNoMemory;
int XNoOp(Display *);
XOM XOMOfOC(XOC);
$2ADC401C2E21ED1A63A0FE0B868E544D XOMOrientation_Context;
$2ADC401C2E21ED1A63A0FE0B868E544D XOMOrientation_LTR_TTB;
$2ADC401C2E21ED1A63A0FE0B868E544D XOMOrientation_RTL_TTB;
$2ADC401C2E21ED1A63A0FE0B868E544D XOMOrientation_TTB_LTR;
$2ADC401C2E21ED1A63A0FE0B868E544D XOMOrientation_TTB_RTL;
int XOffsetRegion(Region, int, int);
XDevice *XOpenDevice(Display *, XID);
Display *XOpenDisplay(const char *);
XIM XOpenIM(Display *, struct _XrmHashBucketRec *, char *, char *);
XOM XOpenOM(Display *, struct _XrmHashBucketRec *, const char *, const char *);
MACRO_TAR XPAX;
MACRO_XPAttrReplace XPAttrMerge;
MACRO_XPAttrReplace XPAttrReplace;
MACRO_XPNoEventMask XPAttributeMask;
MACRO_XPPrintNotify XPAttributeNotify;
MACRO_XPJobAttr XPAuxS;
MACRO_XPJobAttr XPAuxSPkg;
MACRO_XPBadContext XPBadContext;
MACRO_XPBadContext XPBadResourceID;
MACRO_XPBadContext XPBadSequence;
MACRO_XPJobAttr XPDelAttr;
MACRO_XPJobAttr XPDocAttr;
MACRO_XPDocNormal XPDocNormal;
MACRO_XPDocNormal XPDocRaw;
MACRO_XPStartJobNotify XPEndDocNotify;
MACRO_XPStartJobNotify XPEndJobNotify;
MACRO_XPStartJobNotify XPEndPageNotify;
MACRO_XPJobAttr XPFinishAttr;
MACRO_XPJobAttr XPFontAttr;
MACRO_XPSpool XPGetData;
MACRO_XPGetDocFinished XPGetDocError;
MACRO_XPGetDocFinished XPGetDocFinished;
MACRO_XPGetDocFinished XPGetDocSecondConsumer;
MACRO_XPJobAttr XPImpAttr;
MACRO_XPJobAttr XPIntDocAttr;
MACRO_XPJobAttr XPIntJobAttr;
MACRO_XPJobAttr XPJobAttr;
MACRO_XPJobAttr XPMediumAttr;
MACRO_XPNoEventMask XPNoEventMask;
MACRO_XPOINTER XPOINTER;
MACRO_XPJobAttr XPOutputAttr;
MACRO_XPJobAttr XPPageAttr;
MACRO_XPNoEventMask XPPrintMask;
MACRO_XPPrintNotify XPPrintNotify;
MACRO_XPJobAttr XPPrinterAttr;
xprt_stat XPRT_DIED;
xprt_stat XPRT_IDLE;
xprt_stat XPRT_MOREREQS;
MACRO_XPJobAttr XPResAttr;
MACRO_XPJobAttr XPResConAttr;
MACRO_XPJobAttr XPSchedAttr;
MACRO_XPJobAttr XPServerAttr;
MACRO_XPSpool XPSpool;
MACRO_XPStartJobNotify XPStartDocNotify;
MACRO_XPStartJobNotify XPStartJobNotify;
MACRO_XPStartJobNotify XPStartPageNotify;
MACRO_XPJobAttr XPTransAttr;
MACRO_XP_MAJOR XP_ABSENT;
MACRO_XP_ATTRIBUTES XP_ATTRIBUTES;
MACRO_XP XP_DONT_CHECK;
MACRO_XP_PRESENT XP_ERRORS;
MACRO_XP_EVENTS XP_EVENTS;
MACRO_XP XP_INITIAL_RELEASE;
MACRO_XP_MAJOR XP_MAJOR_VERSION;
MACRO_XP_MAJOR XP_MINOR_VERSION;
MACRO_XP_PRESENT XP_PRESENT;
MACRO_XP_PROTO XP_PROTO_MAJOR;
MACRO_XP_PROTO XP_PROTO_MINOR;
XPanoramiXInfo *XPanoramiXAllocInfo(void);
int XParseColor(Display *, Colormap, const char *, XColor *);
int XParseGeometry(const char *, int *, int *, unsigned int *, unsigned int *);
int XPeekEvent(Display *, XEvent *);
int XPeekIfEvent(Display *, XEvent *, int (*)(Display *, XEvent *, XPointer), XPointer);
int XPending(Display *);
int XPlanesOfScreen(Screen *);
int XPointInRegion(Region, int, int);
Region XPolygonRegion(XPoint *, int, int);
void XProcessInternalConnection(Display *, int);
int XProtocolRevision(Display *);
int XProtocolVersion(Display *);
int XPutBackEvent(Display *, XEvent *);
int XPutImage(Display *, Drawable, GC, XImage *, int, int, int, int, unsigned int, unsigned int);
int XQLength(Display *);
int XQueryBestCursor(Display *, Drawable, unsigned int, unsigned int, unsigned int *, unsigned int *);
int XQueryBestSize(Display *, int, Drawable, unsigned int, unsigned int, unsigned int *, unsigned int *);
int XQueryBestStipple(Display *, Drawable, unsigned int, unsigned int, unsigned int *, unsigned int *);
int XQueryBestTile(Display *, Drawable, unsigned int, unsigned int, unsigned int *, unsigned int *);
int XQueryColor(Display *, Colormap, XColor *);
int XQueryColors(Display *, Colormap, XColor *, int);
XDeviceState *XQueryDeviceState(Display *, XDevice *);
int XQueryExtension(Display *, const char *, int *, int *, int *);
XFontStruct *XQueryFont(Display *, XID);
int XQueryKeymap(Display *, char *);
int XQueryPointer(Display *, Window, Window *, Window *, int *, int *, int *, int *, unsigned int *);
int XQueryTextExtents(Display *, XID, const char *, int, int *, int *, int *, XCharStruct *);
int XQueryTextExtents16(Display *, XID, const XChar2b *, int, int *, int *, int *, XCharStruct *);
int XQueryTree(Display *, Window, Window *, Window *, Window **, unsigned int *);
int XRaiseWindow(Display *, Window);
int XReadBitmapFile(Display *, Drawable, const char *, unsigned int *, unsigned int *, Pixmap *, int *, int *);
int XReadBitmapFileData(const char *, unsigned int *, unsigned int *, unsigned __int8 **, int *, int *);
int XRebindKeysym(Display *, KeySym, KeySym *, int, const unsigned __int8 *, int);
int XRecolorCursor(Display *, Cursor, XColor *, XColor *);
int XReconfigureWMWindow(Display *, Window, int, unsigned int, XWindowChanges *);
MACRO_XRecordCurrentClients XRecordAllClients;
XRecordRange *XRecordAllocRange(void);
MACRO_XRecordBadContext XRecordBadContext;
MACRO_XRecordFromServer XRecordClientDied;
MACRO_XRecordFromServer XRecordClientStarted;
XRecordContext XRecordCreateContext(Display *, int, XRecordClientSpec *, int, XRecordRange **, int);
MACRO_XRecordCurrentClients XRecordCurrentClients;
int XRecordDisableContext(Display *, XRecordContext);
int XRecordEnableContext(Display *, XRecordContext, XRecordInterceptProc, XPointer);
int XRecordEnableContextAsync(Display *, XRecordContext, XRecordInterceptProc, XPointer);
MACRO_XRecordFromServer XRecordEndOfData;
int XRecordFreeContext(Display *, XRecordContext);
void XRecordFreeData(XRecordInterceptData *);
void XRecordFreeState(XRecordState *);
MACRO_XRecordFromServer XRecordFromClient;
MACRO_XRecordBadContext XRecordFromClientSequence;
MACRO_XRecordBadContext XRecordFromClientTime;
MACRO_XRecordFromServer XRecordFromServer;
MACRO_XRecordBadContext XRecordFromServerTime;
MACRO_XRecordCurrentClients XRecordFutureClients;
int XRecordGetContext(Display *, XRecordContext, XRecordState **);
XID XRecordIdBaseMask(Display *dpy);
void XRecordProcessReplies(Display *);
int XRecordQueryVersion(Display *, int *, int *);
int XRecordRegisterClients(Display *, XRecordContext, int, XRecordClientSpec *, int, XRecordRange **, int);
MACRO_XRecordFromServer XRecordStartOfData;
int XRecordUnregisterClients(Display *, XRecordContext, XRecordClientSpec *, int);
int XRectInRegion(Region, int, int, unsigned int, unsigned int);
int XRefreshKeyboardMapping(XMappingEvent *);
int XRegisterIMInstantiateCallback(Display *, struct _XrmHashBucketRec *, char *, char *, XIMProc, XPointer *);
void XRemoveConnectionWatch(Display *, XConnectionWatchProc, XPointer);
int XRemoveFromSaveSet(Display *, Window);
int XRemoveHost(Display *, XHostAddress *);
int XRemoveHosts(Display *, XHostAddress *, int);
int XReparentWindow(Display *, Window, Window, int, int);
int XResetScreenSaver(Display *);
int XResizeWindow(Display *, Window, unsigned int, unsigned int);
char *XResourceManagerString(Display *);
int XRestackWindows(Display *, Window *, int);
Window XRootWindow(Display *, int);
Window XRootWindowOfScreen(Screen *);
int XRotateBuffers(Display *, int);
int XRotateWindowProperties(Display *, Window, Atom *, int, int);
bool XS;
int XSaveContext(Display *, XID, XContext, const char *);
int XScreenCount(Display *);
int XScreenNumberOfScreen(Screen *);
Screen *XScreenOfDisplay(Display *, int);
char *XScreenResourceString(Screen *);
XScreenSaverInfo *XScreenSaverAllocInfo(void);
int XScreenSaverGetRegistered(Display *, int, XID *, Atom *);
int XScreenSaverQueryExtension(Display *, int *, int *);
int XScreenSaverQueryInfo(Display *, Drawable, XScreenSaverInfo *);
int XScreenSaverQueryVersion(Display *, int *, int *);
int XScreenSaverRegister(Display *, int, XID, Atom);
void XScreenSaverSelectInput(Display *, Drawable, unsigned __int64);
void XScreenSaverSetAttributes(Display *, Drawable, int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, Visual *, unsigned __int64, XSetWindowAttributes *);
int XScreenSaverUnregister(Display *, int);
void XScreenSaverUnsetAttributes(Display *, Drawable);
MACRO_XSecurityTimeout XSecurityAllAuthorizationAttributes;
MACRO_XSecurityAllEventMasks XSecurityAllEventMasks;
Xauth *XSecurityAllocXauth(void);
MACRO_XSecurityAuthorizationNameLen XSecurityAuthorizationNameLen;
MACRO_XSecurityAuthorizationRevoked XSecurityAuthorizationRevoked;
MACRO_XSecurityAuthorizationRevokedMask XSecurityAuthorizationRevokedMask;
MACRO_XSecurityBadAuthorization XSecurityBadAuthorization;
MACRO_XSecurityBadAuthorization XSecurityBadAuthorizationProtocol;
MACRO_XSecurityClientTrusted XSecurityClientTrusted;
MACRO_XSecurityClientTrusted XSecurityClientUntrusted;
MACRO_XSecurityTimeout XSecurityEventMask;
void XSecurityFreeXauth(Xauth *auth);
Xauth *XSecurityGenerateAuthorization(Display *dpy, Xauth *auth_in, unsigned __int64 valuemask, XSecurityAuthorizationAttributes *attributes, XSecurityAuthorization *auth_id_return);
MACRO_XSecurityTimeout XSecurityGroup;
MACRO_XSecurityNumberEvents XSecurityNumberErrors;
MACRO_XSecurityNumberEvents XSecurityNumberEvents;
int XSecurityQueryExtension(Display *dpy, int *major_version_return, int *minor_version_return);
int XSecurityRevokeAuthorization(Display *dpy, XSecurityAuthorization auth_id);
MACRO_XSecurityTimeout XSecurityTimeout;
MACRO_XSecurityTimeout XSecurityTrustLevel;
int XSelectExtensionEvent(Display *, Window, XEventClass *, int);
int XSelectInput(Display *, Window, __int64);
int XSendEvent(Display *, Window, int, __int64, XEvent *);
int XSendExtensionEvent(Display *, XDevice *, Window, int, int, XEventClass *, XEvent *);
char *XServerVendor(Display *);
int XSetAccessControl(Display *, int);
int (*XSetAfterFunction(Display *, int (*)(Display *)))();
int XSetArcMode(Display *, GC, int);
int XSetBackground(Display *, GC, unsigned __int64);
int XSetClassHint(Display *, Window, XClassHint *);
int XSetClipMask(Display *, GC, Pixmap);
int XSetClipOrigin(Display *, GC, int, int);
int XSetClipRectangles(Display *, GC, int, int, XRectangle *, int, int);
int XSetCloseDownMode(Display *, int);
int XSetCommand(Display *, Window, char **, int);
int XSetDashes(Display *, GC, int, const char *, int);
int XSetDeviceButtonMapping(Display *, XDevice *, unsigned __int8 *, int);
int XSetDeviceFocus(Display *, XDevice *, Window, int, Time);
int XSetDeviceMode(Display *, XDevice *, int);
int XSetDeviceModifierMapping(Display *, XDevice *, XModifierKeymap *);
int XSetDeviceValuators(Display *, XDevice *, int *, int, int);
XErrorHandler XSetErrorHandler(XErrorHandler);
int (*XSetExtensionErrorHandler(int (*handler)(Display *, char *, char *)))();
int XSetFillRule(Display *, GC, int);
int XSetFillStyle(Display *, GC, int);
int XSetFont(Display *, GC, Font);
int XSetFontPath(Display *, char **, int);
int XSetForeground(Display *, GC, unsigned __int64);
int XSetFunction(Display *, GC, int);
int XSetGraphicsExposures(Display *, GC, int);
void XSetICFocus(XIC);
char *XSetICValues(XIC, ...);
XIOErrorHandler XSetIOErrorHandler(XIOErrorHandler);
int XSetIconName(Display *, Window, const char *);
int XSetIconSizes(Display *, Window, XIconSize *, int);
int XSetInputFocus(Display *, Window, int, Time);
int XSetLineAttributes(Display *, GC, unsigned int, int, int, int);
char *XSetLocaleModifiers(const char *);
int XSetModifierMapping(Display *, XModifierKeymap *);
int XSetNormalHints(Display *, Window, XSizeHints *);
char *XSetOCValues(XOC, ...);
char *XSetOMValues(XOM, ...);
int XSetPlaneMask(Display *, GC, unsigned __int64);
int XSetPointerMapping(Display *, const unsigned __int8 *, int);
void XSetRGBColormaps(Display *, Window, XStandardColormap *, int, Atom);
int XSetRegion(Display *, GC, Region);
int XSetScreenSaver(Display *, int, int, int, int);
int XSetSelectionOwner(Display *, Atom, Window, Time);
int XSetSizeHints(Display *, Window, XSizeHints *, Atom);
void XSetStandardColormap(Display *, Window, XStandardColormap *, Atom);
int XSetStandardProperties(Display *, Window, const char *, const char *, Pixmap, char **, int, XSizeHints *);
int XSetState(Display *, GC, unsigned __int64, unsigned __int64, int, unsigned __int64);
int XSetStipple(Display *, GC, Pixmap);
int XSetSubwindowMode(Display *, GC, int);
int XSetTSOrigin(Display *, GC, int, int);
void XSetTextProperty(Display *, Window, XTextProperty *, Atom);
int XSetTile(Display *, GC, Pixmap);
int XSetTransientForHint(Display *, Window, Window);
void XSetWMClientMachine(Display *, Window, XTextProperty *);
int XSetWMColormapWindows(Display *, Window, Window *, int);
int XSetWMHints(Display *, Window, XWMHints *);
void XSetWMIconName(Display *, Window, XTextProperty *);
void XSetWMName(Display *, Window, XTextProperty *);
void XSetWMNormalHints(Display *, Window, XSizeHints *);
void XSetWMProperties(Display *, Window, XTextProperty *, XTextProperty *, char **, int, XSizeHints *, XWMHints *, XClassHint *);
int XSetWMProtocols(Display *, Window, Atom *, int);
void XSetWMSizeHints(Display *, Window, XSizeHints *, Atom);
int XSetWindowBackground(Display *, Window, unsigned __int64);
int XSetWindowBackgroundPixmap(Display *, Window, Pixmap);
int XSetWindowBorder(Display *, Window, unsigned __int64);
int XSetWindowBorderPixmap(Display *, Window, Pixmap);
int XSetWindowBorderWidth(Display *, Window, unsigned int);
int XSetWindowColormap(Display *, Window, Colormap);
int XSetZoomHints(Display *, Window, XSizeHints *);
void XShapeCombineMask(Display *, Window, int, int, int, Pixmap, int);
void XShapeCombineRectangles(Display *, Window, int, int, int, XRectangle *, int, int, int);
void XShapeCombineRegion(Display *, Window, int, int, int, Region, int);
void XShapeCombineShape(Display *, Window, int, int, int, Window, int, int);
XRectangle *XShapeGetRectangles(Display *, Window, int, int *, int *);
unsigned __int64 XShapeInputSelected(Display *, Window);
void XShapeOffsetShape(Display *, Window, int, int, int);
int XShapeQueryExtension(Display *, int *, int *);
int XShapeQueryExtents(Display *, Window, int *, int *, int *, unsigned int *, unsigned int *, int *, int *, int *, unsigned int *, unsigned int *);
int XShapeQueryVersion(Display *, int *, int *);
void XShapeSelectInput(Display *, Window, unsigned __int64);
int XShmAttach(Display *, XShmSegmentInfo *);
XImage *XShmCreateImage(Display *, Visual *, unsigned int, int, char *, XShmSegmentInfo *, unsigned int, unsigned int);
Pixmap XShmCreatePixmap(Display *, Drawable, char *, XShmSegmentInfo *, unsigned int, unsigned int, unsigned int);
int XShmDetach(Display *, XShmSegmentInfo *);
int XShmGetImage(Display *, Drawable, XImage *, int, int, unsigned __int64);
int XShmPixmapFormat(Display *);
int XShmPutImage(Display *, Drawable, GC, XImage *, int, int, int, int, unsigned int, unsigned int, int);
int XShmQueryExtension(Display *);
int XShmQueryVersion(Display *, int *, int *, int *);
int XShrinkRegion(Region, int, int);
int XSmtAttach();
MACRO_XSmtBadSegment XSmtBadSegment;
MACRO_XSmtBadSegment XSmtNumberOfErrors;
MACRO_XSmtWakeupNotify XSmtNumberOfEvents;
int XSmtQueryVersion();
MACRO_XSmtWakeupNotify XSmtWakeupNotify;
MACRO_X_SmtQueryVersion XSmtWakeupNotifyMask;
$8C3F6FFEEEA4FDE62323156E011FAD74 XStdICCTextStyle;
int XStoreBuffer(Display *, const char *, int, int);
int XStoreBytes(Display *, const char *, int);
int XStoreColor(Display *, Colormap, XColor *);
int XStoreColors(Display *, Colormap, XColor *, int);
int XStoreName(Display *, Window, const char *);
int XStoreNamedColor(Display *, Colormap, const char *, unsigned __int64, int);
int XStringListToTextProperty(char **, int, XTextProperty *);
$8C3F6FFEEEA4FDE62323156E011FAD74 XStringStyle;
KeySym XStringToKeysym(const char *);
int XSubtractRegion(Region, Region, Region);
int XSupportsLocale(void);
int XSync(Display *, int);
$1245A1FB5F4A3D60B68851188167E7C1 XSyncAbsolute;
$C25EDA2AFA4331EE1194B950D24C90A5 XSyncAlarmActive;
$C25EDA2AFA4331EE1194B950D24C90A5 XSyncAlarmDestroyed;
$C25EDA2AFA4331EE1194B950D24C90A5 XSyncAlarmInactive;
MACRO_XSyncCounterNotify XSyncAlarmNotify;
MACRO_XSyncCounterNotify XSyncAlarmNotifyMask;
int XSyncAwait(Display *, XSyncWaitCondition *, int);
MACRO_XSyncBadCounter XSyncBadAlarm;
MACRO_XSyncBadCounter XSyncBadCounter;
MACRO_XSyncCACounter XSyncCACounter;
MACRO_XSyncCACounter XSyncCADelta;
MACRO_XSyncCACounter XSyncCAEvents;
MACRO_XSyncCACounter XSyncCATestType;
MACRO_XSyncCACounter XSyncCAValue;
MACRO_XSyncCACounter XSyncCAValueType;
int XSyncChangeAlarm(Display *, XSyncAlarm, unsigned __int64, XSyncAlarmAttributes *);
int XSyncChangeCounter(Display *, XSyncCounter, XSyncValue);
MACRO_XSyncCounterNotify XSyncCounterNotify;
XSyncAlarm XSyncCreateAlarm(Display *, unsigned __int64, XSyncAlarmAttributes *);
XSyncCounter XSyncCreateCounter(Display *, XSyncValue);
int XSyncDestroyAlarm(Display *, XSyncAlarm);
int XSyncDestroyCounter(Display *, XSyncCounter);
void XSyncFreeSystemCounterList(XSyncSystemCounter *);
int XSyncGetPriority(Display *, XID, int *);
int XSyncInitialize(Display *, int *, int *);
void XSyncIntToValue(XSyncValue *, int);
void XSyncIntsToValue(XSyncValue *, unsigned int, int);
XSyncSystemCounter *XSyncListSystemCounters(Display *, int *);
void XSyncMaxValue(XSyncValue *);
void XSyncMinValue(XSyncValue *);
$0112955827FC2F1F3D73B2DA97E42271 XSyncNegativeComparison;
$0112955827FC2F1F3D73B2DA97E42271 XSyncNegativeTransition;
MACRO_XSyncBadCounter XSyncNumberErrors;
MACRO_XSyncNumberEvents XSyncNumberEvents;
$0112955827FC2F1F3D73B2DA97E42271 XSyncPositiveComparison;
$0112955827FC2F1F3D73B2DA97E42271 XSyncPositiveTransition;
int XSyncQueryAlarm(Display *, XSyncAlarm, XSyncAlarmAttributes *);
int XSyncQueryCounter(Display *, XSyncCounter, XSyncValue *);
int XSyncQueryExtension(Display *, int *, int *);
$1245A1FB5F4A3D60B68851188167E7C1 XSyncRelative;
int XSyncSetCounter(Display *, XSyncCounter, XSyncValue);
int XSyncSetPriority(Display *, XID, int);
void XSyncValueAdd(XSyncValue *, XSyncValue, XSyncValue, int *);
int XSyncValueEqual(XSyncValue, XSyncValue);
int XSyncValueGreaterOrEqual(XSyncValue, XSyncValue);
int XSyncValueGreaterThan(XSyncValue, XSyncValue);
int XSyncValueHigh32(XSyncValue);
int XSyncValueIsNegative(XSyncValue);
int XSyncValueIsPositive(XSyncValue);
int XSyncValueIsZero(XSyncValue);
int XSyncValueLessOrEqual(XSyncValue, XSyncValue);
int XSyncValueLessThan(XSyncValue, XSyncValue);
unsigned int XSyncValueLow32(XSyncValue);
void XSyncValueSubtract(XSyncValue *, XSyncValue, XSyncValue, int *);
int (*XSynchronize(Display *, int))();
bool XT;
MACRO_XTABS XTABS;
MACRO_XTIOCGROUP XTIOCGROUP_MASK;
MACRO_XTIOCPARM XTIOCLEN_MASK;
MACRO_XTIOCPARM XTIOCPARM_MASK;
MACRO_XTI_DEBUG XTI_DEBUG;
MACRO_XTI XTI_GENERIC;
MACRO_XTI_ISSPEC1170 XTI_ISSPEC1170;
MACRO_XTI_DEBUG XTI_LINGER;
MACRO_XTI_DEBUG XTI_RCVBUF;
MACRO_XTI_DEBUG XTI_RCVLOWAT;
MACRO_XTI_ISSPEC1170 XTI_SETSTATE;
MACRO_XTI_SNDBUF XTI_SNDBUF;
MACRO_XTI_SNDBUF XTI_SNDLOWAT;
MACRO_XTI_SOSETOPT XTI_SOGETOPT;
MACRO_XTI_SOSETOPT XTI_SOSETOPT;
MACRO_B16MAGIC XTVMAGIC;
MACRO_XT XT_CONVERT_FAIL;
MACRO_XT_REVISION XT_REVISION;
MACRO_XT_VERSION XT_VERSION;
MACRO_sz_xTestQueryInputSizeReq XTestACTIONS_SIZE;
MACRO_XTestACTION XTestACTION_TYPE_MASK;
int XTestCompareCurrentCursorWithWindow(Display *, Window);
int XTestCompareCursorWithWindow(Display *, Window, Cursor);
MACRO_XTestDELAY XTestDELAY_ACTION;
MACRO_XTestDELAY_DEVICE XTestDELAY_DEVICE_ID;
MACRO_XTestX XTestDEVICE_ID_MASK;
int XTestDiscard(Display *);
MACRO_XTestEVENT XTestEVENT_COUNT;
MACRO_XTestEXCLUSIVE XTestEXCLUSIVE;
MACRO_XTestFAKE XTestFAKE_ACK_NOT_NEEDED;
MACRO_XTestFAKE XTestFAKE_ACK_REQUEST;
int XTestFakeButtonEvent(Display *, unsigned int, int, unsigned __int64);
int XTestFakeDeviceButtonEvent(Display *, XDevice *, unsigned int, int, int *, int, unsigned __int64);
int XTestFakeDeviceKeyEvent(Display *, XDevice *, unsigned int, int, int *, int, unsigned __int64);
int XTestFakeDeviceMotionEvent(Display *, XDevice *, int, int, int *, int, unsigned __int64);
int XTestFakeKeyEvent(Display *, unsigned int, int, unsigned __int64);
int XTestFakeMotionEvent(Display *, int, int, int, unsigned __int64);
int XTestFakeProximityEvent(Display *, XDevice *, int, int *, int, unsigned __int64);
int XTestFakeRelativeMotionEvent(Display *, int, int, unsigned __int64);
int XTestGrabControl(Display *, int);
MACRO_XTestDELAY XTestJUMP_ACTION;
MACRO_XTestDELAY XTestKEY_ACTION;
MACRO_XTestKEY XTestKEY_DOWN;
MACRO_XTestACTION XTestKEY_STATE_MASK;
MACRO_XTestDELAY XTestKEY_UP;
MACRO_X_TestGetInput XTestMAX_ACTION_LIST_SIZE;
MACRO_XTestMAX XTestMAX_DEVICE_ID;
MACRO_XTestDELAY XTestMOTION_ACTION;
MACRO_XTestKEY XTestMOTION_MAX;
MACRO_XTestKEY XTestMOTION_MIN;
MACRO_XTestNumberErrors XTestMajorVersion;
MACRO_XTestMinorVersion XTestMinorVersion;
MACRO_XTestNumberErrors XTestNumberErrors;
MACRO_XTestNumberEvents XTestNumberEvents;
MACRO_XTestEXCLUSIVE XTestPACKED_ACTIONS;
MACRO_XTestEXCLUSIVE XTestPACKED_MOTION;
MACRO_XTestPRESS XTestPRESS;
int XTestQueryExtension(Display *, int *, int *, int *, int *);
MACRO_XTestPRESS XTestRELEASE;
MACRO_XTestSHORT XTestSHORT_DELAY_TIME;
MACRO_XTestPRESS XTestSTROKE;
MACRO_XTestPRESS XTestSTROKE_DELAY_TIME;
void XTestSetGContextOfGC(GC, GContext);
void XTestSetVisualIDOfVisual(Visual *, VisualID);
MACRO_XTestX_NEGATIVE XTestX_MOTION_MASK;
MACRO_XTestX_NEGATIVE XTestX_NEGATIVE;
MACRO_XTestX XTestX_SIGN_BIT_MASK;
MACRO_XTestX_NEGATIVE XTestY_MOTION_MASK;
MACRO_XTestX_NEGATIVE XTestY_NEGATIVE;
MACRO_XTestX XTestY_SIGN_BIT_MASK;
int XTextExtents(XFontStruct *, const char *, int, int *, int *, int *, XCharStruct *);
int XTextExtents16(XFontStruct *, const XChar2b *, int, int *, int *, int *, XCharStruct *);
int XTextPropertyToStringList(XTextProperty *, char ***, int *);
$8C3F6FFEEEA4FDE62323156E011FAD74 XTextStyle;
int XTextWidth(XFontStruct *, const char *, int);
int XTextWidth16(XFontStruct *, const XChar2b *, int);
int XTranslateCoordinates(Display *, Window, Window, int, int, int *, int *, Window *);
int XUndefineCursor(Display *, Window);
int XUngrabButton(Display *, unsigned int, unsigned int, Window);
int XUngrabDevice(Display *, XDevice *, Time);
int XUngrabDeviceButton(Display *, XDevice *, unsigned int, unsigned int, XDevice *, Window);
int XUngrabDeviceKey(Display *, XDevice *, unsigned int, unsigned int, XDevice *, Window);
int XUngrabKey(Display *, int, unsigned int, Window);
int XUngrabKeyboard(Display *, Time);
int XUngrabPointer(Display *, Time);
int XUngrabServer(Display *);
int XUninstallColormap(Display *, Colormap);
int XUnionRectWithRegion(XRectangle *, Region, Region);
int XUnionRegion(Region, Region, Region);
int XUnloadFont(Display *, Font);
void XUnlockDisplay(Display *);
int XUnmapSubwindows(Display *, Window);
int XUnmapWindow(Display *, Window);
int XUnregisterIMInstantiateCallback(Display *, struct _XrmHashBucketRec *, char *, char *, XIMProc, XPointer *);
void XUnsetICFocus(XIC);
MACRO_InputHint XUrgencyHint;
XVaNestedList XVaCreateNestedList(int, ...);
MACRO_NoValue XValue;
int XVendorRelease(Display *);
VisualID XVisualIDFromVisual(Visual *);
MACRO_XWD XWD_FILE_VERSION;
int XWMGeometry(Display *, int, const char *, const char *, unsigned int, XSizeHints *, int *, int *, int *, int *, int *);
int XWakeupServer();
int XWarpPointer(Display *, Window, Window, int, int, unsigned int, unsigned int, int, int);
unsigned __int64 XWhitePixel(Display *, int);
unsigned __int64 XWhitePixelOfScreen(Screen *);
int XWidthMMOfScreen(Screen *);
int XWidthOfScreen(Screen *);
int XWindowEvent(Display *, Window, __int64, XEvent *);
int XWithdrawWindow(Display *, Window, int);
int XWriteBitmapFile(Display *, const char *, Pixmap, unsigned int, unsigned int, int, int);
bool XX;
int XXorRegion(Region, Region, Region);
MACRO_XYBitmap XYBitmap;
MACRO_XYBitmap XYPixmap;
MACRO_X_509 X_509_NUM;
MACRO_X X_ACC;
MACRO_X_CreateWindow X_AllocColor;
MACRO_X_CreateWindow X_AllocColorCells;
MACRO_X_CreateWindow X_AllocColorPlanes;
MACRO_X_CreateWindow X_AllocNamedColor;
MACRO_X_GetExtensionVersion X_AllowDeviceEvents;
MACRO_X_CreateWindow X_AllowEvents;
MACRO_X_DUMPDEV X_BLBUF;
MACRO_X_DUMPDEV X_BLBUFPADR;
MACRO_X_DUMPDEV X_BOOTEDFILE;
MACRO_X_CreateWindow X_Bell;
MACRO_AUDIT_START X_CLIENT_ATTR;
MACRO_X_SERVER X_CLIENT_IPC;
MACRO_AUDIT_START X_CLIENT_SHUTDOWN;
MACRO_AUDIT_START X_CLIENT_STARTUP;
MACRO_X_CreateWindow X_ChangeActivePointerGrab;
MACRO_X_GetExtensionVersion X_ChangeDeviceControl;
MACRO_X_GetExtensionVersion X_ChangeDeviceDontPropagateList;
MACRO_X_GetExtensionVersion X_ChangeDeviceKeyMapping;
MACRO_X_GetExtensionVersion X_ChangeFeedbackControl;
MACRO_X_CreateWindow X_ChangeGC;
MACRO_X_CreateWindow X_ChangeHosts;
MACRO_X_CreateWindow X_ChangeKeyboardControl;
MACRO_X_GetExtensionVersion X_ChangeKeyboardDevice;
MACRO_X_CreateWindow X_ChangeKeyboardMapping;
MACRO_X_CreateWindow X_ChangePointerControl;
MACRO_X_GetExtensionVersion X_ChangePointerDevice;
MACRO_X_CreateWindow X_ChangeProperty;
MACRO_X_CreateWindow X_ChangeSaveSet;
MACRO_X_CreateWindow X_ChangeWindowAttributes;
MACRO_X_CreateWindow X_CirculateWindow;
MACRO_X_CreateWindow X_ClearArea;
MACRO_X_GetExtensionVersion X_CloseDevice;
MACRO_X_CreateWindow X_CloseFont;
MACRO_X_CreateWindow X_ConfigureWindow;
MACRO_X_CreateWindow X_ConvertSelection;
MACRO_X_CreateWindow X_CopyArea;
MACRO_X_CreateWindow X_CopyColormapAndFree;
MACRO_X_CreateWindow X_CopyGC;
MACRO_X_CreateWindow X_CopyPlane;
MACRO_X_CreateWindow X_CreateColormap;
MACRO_X_CreateWindow X_CreateCursor;
MACRO_X_CreateWindow X_CreateGC;
MACRO_X_CreateWindow X_CreateGlyphCursor;
MACRO_X_CreateWindow X_CreatePixmap;
MACRO_X_CreateWindow X_CreateWindow;
MACRO_AUDIT_START X_DATA_MOVE;
MACRO_X_DPMSGetVersion X_DPMSCapable;
MACRO_X_DPMSGetVersion X_DPMSDisable;
MACRO_X_DPMSGetVersion X_DPMSEnable;
MACRO_X_DPMSGetVersion X_DPMSForceLevel;
MACRO_X_DPMSGetVersion X_DPMSGetTimeouts;
MACRO_X_DPMSGetVersion X_DPMSGetVersion;
MACRO_X_DPMSGetVersion X_DPMSInfo;
MACRO_X_DPMSGetVersion X_DPMSSetTimeouts;
MACRO_X_DUMPDEV X_DUMPDEV;
MACRO_X_DUMPDEV X_DUMPLO;
MACRO_X_DUMPDEV X_DUMPMAG;
MACRO_X_DUMPDEV X_DUMPSIZE;
MACRO_X_CreateWindow X_DeleteProperty;
MACRO_X_CreateWindow X_DestroySubwindows;
MACRO_X_CreateWindow X_DestroyWindow;
MACRO_X_GetExtensionVersion X_DeviceBell;
MACRO_X_Reply X_Error;
MACRO_X_CreateWindow X_FillPoly;
MACRO_X_CreateWindow X_ForceScreenSaver;
MACRO_X_CreateWindow X_FreeColormap;
MACRO_X_CreateWindow X_FreeColors;
MACRO_X_CreateWindow X_FreeCursor;
MACRO_X_CreateWindow X_FreeGC;
MACRO_X_CreateWindow X_FreePixmap;
MACRO_X_CreateWindow X_GetAtomName;
MACRO_X_GetExtensionVersion X_GetDeviceButtonMapping;
MACRO_X_GetExtensionVersion X_GetDeviceControl;
MACRO_X_GetExtensionVersion X_GetDeviceDontPropagateList;
MACRO_X_GetExtensionVersion X_GetDeviceFocus;
MACRO_X_GetExtensionVersion X_GetDeviceKeyMapping;
MACRO_X_GetExtensionVersion X_GetDeviceModifierMapping;
MACRO_X_GetExtensionVersion X_GetDeviceMotionEvents;
MACRO_X_GetExtensionVersion X_GetExtensionVersion;
MACRO_X_GetExtensionVersion X_GetFeedbackControl;
MACRO_X_CreateWindow X_GetFontPath;
MACRO_X_CreateWindow X_GetGeometry;
MACRO_X_CreateWindow X_GetImage;
MACRO_X_CreateWindow X_GetInputFocus;
MACRO_X_CreateWindow X_GetKeyboardControl;
MACRO_X_CreateWindow X_GetKeyboardMapping;
MACRO_X_CreateWindow X_GetModifierMapping;
MACRO_X_CreateWindow X_GetMotionEvents;
MACRO_X_CreateWindow X_GetPointerControl;
MACRO_X_CreateWindow X_GetPointerMapping;
MACRO_X_CreateWindow X_GetProperty;
MACRO_X_CreateWindow X_GetScreenSaver;
MACRO_X_GetExtensionVersion X_GetSelectedExtensionEvents;
MACRO_X_CreateWindow X_GetSelectionOwner;
MACRO_X_CreateWindow X_GetWindowAttributes;
MACRO_X_CreateWindow X_GrabButton;
MACRO_X_GetExtensionVersion X_GrabDevice;
MACRO_X_GetExtensionVersion X_GrabDeviceButton;
MACRO_X_GetExtensionVersion X_GrabDeviceKey;
MACRO_X_CreateWindow X_GrabKey;
MACRO_X_CreateWindow X_GrabKeyboard;
MACRO_X_CreateWindow X_GrabPointer;
MACRO_X_CreateWindow X_GrabServer;
MACRO_X_CreateWindow X_ImageText16;
MACRO_X_CreateWindow X_ImageText8;
MACRO_X_CreateWindow X_InstallColormap;
MACRO_X_CreateWindow X_InternAtom;
MACRO_KMEBADREQUEST X_KMEDoKBModeSwitch;
MACRO_X_CreateWindow X_KillClient;
MACRO_X_CreateWindow X_ListExtensions;
MACRO_X_CreateWindow X_ListFonts;
MACRO_X_CreateWindow X_ListFontsWithInfo;
MACRO_X_CreateWindow X_ListHosts;
MACRO_X_GetExtensionVersion X_ListInputDevices;
MACRO_X_CreateWindow X_ListInstalledColormaps;
MACRO_X_CreateWindow X_ListProperties;
MACRO_X_CreateWindow X_LookupColor;
MACRO_X_MITSetBugMode X_MITGetBugMode;
MACRO_X_MITSetBugMode X_MITSetBugMode;
MACRO_X_DUMPDEV X_MSGBUF;
MACRO_X_CreateWindow X_MapSubwindows;
MACRO_X_CreateWindow X_MapWindow;
MACRO_X_MbufGetBufferVersion X_MbufClearImageBufferArea;
MACRO_X_MbufGetBufferVersion X_MbufCreateImageBuffers;
MACRO_X_MbufGetBufferVersion X_MbufCreateStereoWindow;
MACRO_X_MbufGetBufferVersion X_MbufDestroyImageBuffers;
MACRO_X_MbufGetBufferVersion X_MbufDisplayImageBuffers;
MACRO_X_MbufGetBufferVersion X_MbufGetBufferAttributes;
MACRO_X_MbufGetBufferVersion X_MbufGetBufferInfo;
MACRO_X_MbufGetBufferVersion X_MbufGetBufferVersion;
MACRO_X_MbufGetBufferVersion X_MbufGetMBufferAttributes;
MACRO_X_MbufGetBufferVersion X_MbufSetBufferAttributes;
MACRO_X_MbufGetBufferVersion X_MbufSetMBufferAttributes;
MACRO_X_CreateWindow X_NoOperation;
MACRO_AUDIT_START X_OBJECT_ATTR;
MACRO_AUDIT_START X_OBJECT_CREATE;
MACRO_X_SERVER X_OBJECT_DAC;
MACRO_AUDIT_START X_OBJECT_DESTROY;
MACRO_AUDIT_START X_OBJECT_READ;
MACRO_AUDIT_START X_OBJECT_RENAME;
MACRO_AUDIT_START X_OBJECT_WRITE;
MACRO_F_OK X_OK;
MACRO_X_GetExtensionVersion X_OpenDevice;
MACRO_X_CreateWindow X_OpenFont;
MACRO_X_DUMPDEV X_PANICSTR;
MACRO_X_DUMPDEV X_PARTDUMP;
MACRO_X_DUMPDEV X_PARTDUMPMAG;
MACRO_X_PROTOCOL X_PROTOCOL;
MACRO_X_PROTOCOL X_PROTOCOL_REVISION;
MACRO_X_PanoramiXQueryVersion X_PanoramiXGetScreenCount;
MACRO_X_PanoramiXQueryVersion X_PanoramiXGetScreenSize;
MACRO_X_PanoramiXQueryVersion X_PanoramiXGetState;
MACRO_X_PanoramiXQueryVersion X_PanoramiXQueryVersion;
MACRO_X_CreateWindow X_PolyArc;
MACRO_X_CreateWindow X_PolyFillArc;
MACRO_X_CreateWindow X_PolyFillRectangle;
MACRO_X_CreateWindow X_PolyLine;
MACRO_X_CreateWindow X_PolyPoint;
MACRO_X_CreateWindow X_PolyRectangle;
MACRO_X_CreateWindow X_PolySegment;
MACRO_X_CreateWindow X_PolyText16;
MACRO_X_CreateWindow X_PolyText8;
MACRO_X_PrintQueryVersion X_PrintCreateContext;
MACRO_X_PrintQueryVersion X_PrintDestroyContext;
MACRO_X_PrintQueryVersion X_PrintEndDoc;
MACRO_X_PrintQueryVersion X_PrintEndJob;
MACRO_X_PrintQueryVersion X_PrintEndPage;
MACRO_X_PrintQueryVersion X_PrintGetAttributes;
MACRO_X_PrintQueryVersion X_PrintGetContext;
MACRO_X_PrintQueryVersion X_PrintGetContextScreen;
MACRO_X_PrintQueryVersion X_PrintGetDocumentData;
MACRO_X_PrintQueryVersion X_PrintGetImageResolution;
MACRO_X_PrintQueryVersion X_PrintGetOneAttribute;
MACRO_X_PrintQueryVersion X_PrintGetPageDimensions;
MACRO_X_PrintQueryVersion X_PrintGetPrinterList;
MACRO_X_PrintQueryVersion X_PrintInputSelected;
MACRO_X_PrintQueryVersion X_PrintPutDocumentData;
MACRO_X_PrintQueryVersion X_PrintQueryScreens;
MACRO_X_PrintQueryVersion X_PrintQueryVersion;
MACRO_X_PrintQueryVersion X_PrintRehashPrinterList;
MACRO_X_PrintQueryVersion X_PrintSelectInput;
MACRO_X_PrintQueryVersion X_PrintSetAttributes;
MACRO_X_PrintQueryVersion X_PrintSetContext;
MACRO_X_PrintQueryVersion X_PrintSetImageResolution;
MACRO_X_PrintQueryVersion X_PrintStartDoc;
MACRO_X_PrintQueryVersion X_PrintStartJob;
MACRO_X_PrintQueryVersion X_PrintStartPage;
MACRO_X_CreateWindow X_PutImage;
MACRO_X_CreateWindow X_QueryBestSize;
MACRO_X_CreateWindow X_QueryColors;
MACRO_X_GetExtensionVersion X_QueryDeviceState;
MACRO_X_CreateWindow X_QueryExtension;
MACRO_X_CreateWindow X_QueryFont;
MACRO_X_CreateWindow X_QueryKeymap;
MACRO_X_CreateWindow X_QueryPointer;
MACRO_X_CreateWindow X_QueryTextExtents;
MACRO_X_CreateWindow X_QueryTree;
MACRO_X_CreateWindow X_RecolorCursor;
MACRO_X_RecordQueryVersion X_RecordCreateContext;
MACRO_X_RecordQueryVersion X_RecordDisableContext;
MACRO_X_RecordQueryVersion X_RecordEnableContext;
MACRO_X_RecordQueryVersion X_RecordFreeContext;
MACRO_X_RecordQueryVersion X_RecordGetContext;
MACRO_X_RecordQueryVersion X_RecordQueryVersion;
MACRO_X_RecordQueryVersion X_RecordRegisterClients;
MACRO_X_RecordQueryVersion X_RecordUnregisterClients;
MACRO_X_CreateWindow X_ReparentWindow;
MACRO_X_Reply X_Reply;
MACRO_X_CreateWindow X_RotateProperties;
MACRO_AUDIT_START X_SEC_CLEARANCE;
MACRO_AUDIT_START X_SELECTION_HNDLR;
MACRO_X_SERVER X_SERVER_DAC;
MACRO_AUDIT_START X_SERVER_SHUTDOWN;
MACRO_AUDIT_START X_SERVER_STARTUP;
MACRO_X_ScreenSaverQueryInfo X_ScreenSaverQueryInfo;
MACRO_X_ScreenSaverQueryVersion X_ScreenSaverQueryVersion;
MACRO_X_ScreenSaverSelectInput X_ScreenSaverSelectInput;
MACRO_X_ScreenSaverSetAttributes X_ScreenSaverSetAttributes;
MACRO_X_ScreenSaverUnsetAttributes X_ScreenSaverUnsetAttributes;
MACRO_X_SecurityQueryVersion X_SecurityGenerateAuthorization;
MACRO_X_SecurityQueryVersion X_SecurityQueryVersion;
MACRO_X_SecurityQueryVersion X_SecurityRevokeAuthorization;
MACRO_X_GetExtensionVersion X_SelectExtensionEvent;
MACRO_X_CreateWindow X_SendEvent;
MACRO_X_GetExtensionVersion X_SendExtensionEvent;
MACRO_X_CreateWindow X_SetAccessControl;
MACRO_X_CreateWindow X_SetClipRectangles;
MACRO_X_CreateWindow X_SetCloseDownMode;
MACRO_X_CreateWindow X_SetDashes;
MACRO_X_GetExtensionVersion X_SetDeviceButtonMapping;
MACRO_X_GetExtensionVersion X_SetDeviceFocus;
MACRO_X_GetExtensionVersion X_SetDeviceMode;
MACRO_X_GetExtensionVersion X_SetDeviceModifierMapping;
MACRO_X_GetExtensionVersion X_SetDeviceValuators;
MACRO_X_CreateWindow X_SetFontPath;
MACRO_X_CreateWindow X_SetInputFocus;
MACRO_X_CreateWindow X_SetModifierMapping;
MACRO_X_CreateWindow X_SetPointerMapping;
MACRO_X_CreateWindow X_SetScreenSaver;
MACRO_X_CreateWindow X_SetSelectionOwner;
MACRO_X_ShapeQueryVersion X_ShapeCombine;
MACRO_X_ShapeQueryVersion X_ShapeGetRectangles;
MACRO_X_ShapeQueryVersion X_ShapeInputSelected;
MACRO_X_ShapeQueryVersion X_ShapeMask;
MACRO_X_ShapeQueryVersion X_ShapeOffset;
MACRO_X_ShapeQueryVersion X_ShapeQueryExtents;
MACRO_X_ShapeQueryVersion X_ShapeQueryVersion;
MACRO_X_ShapeQueryVersion X_ShapeRectangles;
MACRO_X_ShapeQueryVersion X_ShapeSelectInput;
MACRO_X_ShmQueryVersion X_ShmAttach;
MACRO_X_ShmQueryVersion X_ShmCreatePixmap;
MACRO_X_ShmQueryVersion X_ShmDetach;
MACRO_X_ShmQueryVersion X_ShmGetImage;
MACRO_X_ShmQueryVersion X_ShmPutImage;
MACRO_X_ShmQueryVersion X_ShmQueryVersion;
MACRO_X_SmtQueryVersion X_SmtAttach;
MACRO_X_SmtQueryVersion X_SmtQueryVersion;
MACRO_X_SmtQueryVersion X_SmtWakeupServer;
MACRO_X_CreateWindow X_StoreColors;
MACRO_X_CreateWindow X_StoreNamedColor;
MACRO_X_SyncInitialize X_SyncAwait;
MACRO_X_SyncInitialize X_SyncChangeAlarm;
MACRO_X_SyncInitialize X_SyncChangeCounter;
MACRO_X_SyncInitialize X_SyncCreateAlarm;
MACRO_X_SyncInitialize X_SyncCreateCounter;
MACRO_X_SyncInitialize X_SyncDestroyAlarm;
MACRO_X_SyncInitialize X_SyncDestroyCounter;
MACRO_X_SyncInitialize X_SyncGetPriority;
MACRO_X_SyncInitialize X_SyncInitialize;
MACRO_X_SyncInitialize X_SyncListSystemCounters;
MACRO_X_SyncInitialize X_SyncQueryAlarm;
MACRO_X_SyncInitialize X_SyncQueryCounter;
MACRO_X_SyncInitialize X_SyncSetCounter;
MACRO_X_SyncInitialize X_SyncSetPriority;
MACRO_X2 X_TCP_PORT;
MACRO_X_DUMPDEV X_TIME;
MACRO_AUDIT_START X_TPATH_HNDLR;
MACRO_XTestEVENT X_TestFakeInput;
MACRO_X_TestGetInput X_TestGetInput;
MACRO_X_TestGetInput X_TestQueryInputSize;
MACRO_X_TestGetInput X_TestReset;
MACRO_X_TestGetInput X_TestStopInput;
MACRO_X_CreateWindow X_TranslateCoords;
MACRO_X_CreateWindow X_UngrabButton;
MACRO_X_GetExtensionVersion X_UngrabDevice;
MACRO_X_GetExtensionVersion X_UngrabDeviceButton;
MACRO_X_GetExtensionVersion X_UngrabDeviceKey;
MACRO_X_CreateWindow X_UngrabKey;
MACRO_X_CreateWindow X_UngrabKeyboard;
MACRO_X_CreateWindow X_UngrabPointer;
MACRO_X_CreateWindow X_UngrabServer;
MACRO_X_CreateWindow X_UninstallColormap;
MACRO_X_CreateWindow X_UnmapSubwindows;
MACRO_X_CreateWindow X_UnmapWindow;
MACRO_X_DUMPDEV X_VERSION;
MACRO_AUDIT_START X_WIN_MNGR;
MACRO_X_CreateWindow X_WarpPointer;
MACRO_X_XTestGetVersion X_XTestCompareCursor;
MACRO_X_XTestGetVersion X_XTestFakeInput;
MACRO_X_XTestGetVersion X_XTestGetVersion;
MACRO_X_XTestGetVersion X_XTestGrabControl;
MACRO_X_XagQueryVersion X_XagCreate;
MACRO_X_XagQueryVersion X_XagCreateAssoc;
MACRO_X_XagQueryVersion X_XagDestroy;
MACRO_X_XagQueryVersion X_XagDestroyAssoc;
MACRO_X_XagQueryVersion X_XagGetAttr;
MACRO_X_XagQueryVersion X_XagQuery;
MACRO_X_XagQueryVersion X_XagQueryVersion;
MACRO_X_ieQueryImageExtension X_ieAbort;
MACRO_X_ieQueryImageExtension X_ieAwait;
MACRO_X_ieQueryImageExtension X_ieCreateColorList;
MACRO_X_ieQueryImageExtension X_ieCreateLUT;
MACRO_X_ieQueryImageExtension X_ieCreatePhotoflo;
MACRO_X_ieQueryImageExtension X_ieCreatePhotomap;
MACRO_X_ieQueryImageExtension X_ieCreatePhotospace;
MACRO_X_ieQueryImageExtension X_ieCreateROI;
MACRO_X_ieQueryImageExtension X_ieDestroyColorList;
MACRO_X_ieQueryImageExtension X_ieDestroyLUT;
MACRO_X_ieQueryImageExtension X_ieDestroyPhotoflo;
MACRO_X_ieQueryImageExtension X_ieDestroyPhotomap;
MACRO_X_ieQueryImageExtension X_ieDestroyPhotospace;
MACRO_X_ieQueryImageExtension X_ieDestroyROI;
MACRO_X_ieQueryImageExtension X_ieExecuteImmediate;
MACRO_X_ieQueryImageExtension X_ieExecutePhotoflo;
MACRO_X_ieQueryImageExtension X_ieGetClientData;
MACRO_X_ieQueryImageExtension X_ieModifyPhotoflo;
MACRO_X_ieQueryImageExtension X_iePurgeColorList;
MACRO_X_ieQueryImageExtension X_iePutClientData;
MACRO_X_ieQueryImageExtension X_ieQueryColorList;
MACRO_X_ieQueryImageExtension X_ieQueryImageExtension;
MACRO_X_ieQueryImageExtension X_ieQueryPhotoflo;
MACRO_X_ieQueryImageExtension X_ieQueryPhotomap;
MACRO_X_ieQueryImageExtension X_ieQueryTechniques;
MACRO_X_ieQueryImageExtension X_ieRedefinePhotoflo;
MACRO_X_kbUseExtension X_kbBell;
MACRO_X_kbUseExtension X_kbGetCompatMap;
MACRO_X_kbUseExtension X_kbGetControls;
MACRO_X_kbUseExtension X_kbGetDeviceInfo;
MACRO_X_kbUseExtension X_kbGetGeometry;
MACRO_X_kbUseExtension X_kbGetIndicatorMap;
MACRO_X_kbUseExtension X_kbGetIndicatorState;
MACRO_X_kbUseExtension X_kbGetKbdByName;
MACRO_X_kbUseExtension X_kbGetMap;
MACRO_X_kbUseExtension X_kbGetNamedIndicator;
MACRO_X_kbUseExtension X_kbGetNames;
MACRO_X_kbUseExtension X_kbGetState;
MACRO_X_kbUseExtension X_kbLatchLockState;
MACRO_X_kbUseExtension X_kbListComponents;
MACRO_X_kbUseExtension X_kbPerClientFlags;
MACRO_X_kbUseExtension X_kbSelectEvents;
MACRO_X_kbUseExtension X_kbSetCompatMap;
MACRO_X_kbUseExtension X_kbSetControls;
MACRO_X_kbUseExtension X_kbSetDebuggingFlags;
MACRO_X_kbUseExtension X_kbSetDeviceInfo;
MACRO_X_kbUseExtension X_kbSetGeometry;
MACRO_X_kbUseExtension X_kbSetIndicatorMap;
MACRO_X_kbUseExtension X_kbSetMap;
MACRO_X_kbUseExtension X_kbSetNamedIndicator;
MACRO_X_kbUseExtension X_kbSetNames;
MACRO_X_kbUseExtension X_kbUseExtension;
MACRO_XagSingleScreenMask XagAppGroupLeaderMask;
MACRO_XagBadAppGroup XagBadAppGroup;
MACRO_XagSingleScreenMask XagBlackPixelMask;
int XagCreateAssociation(Display *, Window *, void *);
int XagCreateEmbeddedApplicationGroup(Display *, VisualID, Colormap, unsigned __int64, unsigned __int64, XAppGroup *);
int XagCreateNonembeddedApplicationGroup(Display *, XAppGroup *);
MACRO_XagSingleScreenMask XagDefaultColormapMask;
MACRO_XagSingleScreenMask XagDefaultRootMask;
int XagDestroyApplicationGroup(Display *, XAppGroup);
int XagDestroyAssociation(Display *, Window);
int XagGetApplicationGroupAttributes(Display *, XAppGroup, ...);
MACRO_XagNsingleScreen XagNappGroupLeader;
MACRO_XagNsingleScreen XagNblackPixel;
MACRO_XagNsingleScreen XagNdefaultColormap;
MACRO_XagNsingleScreen XagNdefaultRoot;
MACRO_XagNsingleScreen XagNrootVisual;
MACRO_XagNsingleScreen XagNsingleScreen;
MACRO_XagBadAppGroup XagNumberErrors;
MACRO_XagNsingleScreen XagNwhitePixel;
int XagQueryApplicationGroup(Display *, XID, XAppGroup *);
int XagQueryVersion(Display *, int *, int *);
MACRO_XagSingleScreenMask XagRootVisualMask;
MACRO_XagSingleScreenMask XagSingleScreenMask;
MACRO_XagSingleScreenMask XagWhitePixelMask;
MACRO_XagWindowTypeX11 XagWindowTypeMacintosh;
MACRO_XagWindowTypeX11 XagWindowTypeWin16;
MACRO_XagWindowTypeX11 XagWindowTypeWin32;
MACRO_XagWindowTypeX11 XagWindowTypeX11;
__int64 *Xalloc();
void XauDisposeAuth(Xauth *);
char *XauFileName();
Xauth *XauGetAuthByAddr(unsigned int, unsigned int, const char *, unsigned int, const char *, unsigned int, const char *);
Xauth *XauGetAuthByName(const char *);
Xauth *XauGetBestAuthByAddr(unsigned int, unsigned int, const char *, unsigned int, const char *, int, char **, const int *);
int XauLockAuth(const char *, int, int, __int64);
Xauth *XauReadAuth(FILE *);
int XauUnlockAuth(const char *);
int XauWriteAuth(FILE *, Xauth *);
$0B9944DDAD0BA9038E29AF625CFDC62B XawAsciiFile;
Boolean XawAsciiSave(Widget);
Boolean XawAsciiSaveAsFile(Widget, const char *);
Boolean XawAsciiSourceChanged(Widget);
void XawAsciiSourceFreeString(Widget);
$0B9944DDAD0BA9038E29AF625CFDC62B XawAsciiString;
MACRO_XawBS XawBS;
MACRO_XawESC XawBSLASH;
MACRO_zeroPosition XawCR;
$FCF7146F21D65165DF73AAE311CA591D XawChainBottom;
$FCF7146F21D65165DF73AAE311CA591D XawChainLeft;
$FCF7146F21D65165DF73AAE311CA591D XawChainRight;
$FCF7146F21D65165DF73AAE311CA591D XawChainTop;
MACRO_XawBS XawDEL;
void XawDialogAddButton(Widget, const char *, XtCallbackProc, XtPointer);
char *XawDialogGetValueString(Widget);
MACRO_XawESC XawESC;
MACRO_XawEditDone XawEditDone;
MACRO_XawEditDone XawEditError;
unsigned __int64 XawFmt8Bit;
unsigned __int64 XawFmtWide;
void XawFormDoLayout(Widget, int);
void XawInitializeWidgetSet();
MACRO_zeroPosition XawLF;
void XawListChange(Widget, String *, int, int, int);
void XawListHighlight(Widget, int);
XawListReturnStruct *XawListShowCurrent(Widget);
void XawListUnhighlight(Widget);
void XawMultiSourceFreeString(Widget);
MACRO_XawPRSliderX XawPRAll;
MACRO_XawPRSliderX XawPRCanvasHeight;
MACRO_XawPRSliderX XawPRCanvasWidth;
MACRO_XawPRSliderX XawPRSliderHeight;
MACRO_XawPRSliderX XawPRSliderWidth;
MACRO_XawPRSliderX XawPRSliderX;
MACRO_XawPRSliderX XawPRSliderY;
void XawPanedAllowResize(Widget, int);
void XawPanedGetMinMax(Widget, int *, int *);
int XawPanedGetNumSub(Widget);
void XawPanedSetMinMax(Widget, int, int);
void XawPanedSetRefigureMode(Widget, int);
MACRO_XawEditDone XawPositionError;
MACRO_XawTextSearchError XawReplaceError;
$FCF7146F21D65165DF73AAE311CA591D XawRubber;
MACRO_XawBS XawSP;
void XawScrollbarSetThumb(Widget, double, double);
MACRO_XawShapeRectangle XawShapeEllipse;
MACRO_XawShapeRectangle XawShapeOval;
MACRO_XawShapeRectangle XawShapeRectangle;
MACRO_XawShapeRectangle XawShapeRoundedRectangle;
void XawSimpleMenuAddGlobalActions(XtAppContext);
void XawSimpleMenuClearActiveEntry(Widget);
Widget XawSimpleMenuGetActiveEntry(Widget);
MACRO_XawTAB XawTAB;
void XawTextDisableRedisplay(Widget);
void XawTextDisplay(Widget);
void XawTextDisplayCaret(Widget, int);
void XawTextEnableRedisplay(Widget);
MACRO_XawTextEncoding8bit XawTextEncoding8bit;
MACRO_XawTextEncoding8bit XawTextEncodingChar2b;
XawTextPosition XawTextGetInsertionPoint(Widget);
void XawTextGetSelectionPos(Widget, XawTextPosition *, XawTextPosition *);
Widget XawTextGetSource(Widget);
void XawTextInvalidate(Widget, XawTextPosition, XawTextPosition);
MACRO_XawTextReadError XawTextReadError;
int XawTextReplace(Widget, XawTextPosition, XawTextPosition, XawTextBlock *);
MACRO_XawTextScanError XawTextScanError;
XawTextPosition XawTextSearch(Widget, int, XawTextBlock *);
MACRO_XawTextSearchError XawTextSearchError;
void XawTextSetInsertionPoint(Widget, XawTextPosition);
void XawTextSetSelection(Widget, XawTextPosition, XawTextPosition);
void XawTextSetSelectionArray(Widget, XawTextSelectType *);
void XawTextSetSource(Widget, Widget, XawTextPosition);
void XawTextSinkClearToBackground(Widget, int, int, int, int);
void XawTextSinkDisplayText(Widget, int, int, XawTextPosition, XawTextPosition, int);
void XawTextSinkFindDistance(Widget, XawTextPosition, int, XawTextPosition, int *, XawTextPosition *, int *);
void XawTextSinkFindPosition(Widget, XawTextPosition, int, int, int, XawTextPosition *, int *, int *);
void XawTextSinkGetCursorBounds(Widget, XRectangle *);
void XawTextSinkInsertCursor(Widget, int, int, int);
int XawTextSinkMaxHeight(Widget, int);
int XawTextSinkMaxLines(Widget, int);
void XawTextSinkResolve(Widget, XawTextPosition, int, int, XawTextPosition *);
void XawTextSinkSetTabs(Widget, int, int *);
Boolean XawTextSourceConvertSelection(Widget, Atom *, Atom *, Atom *, XtPointer *, unsigned __int64 *, int *);
XawTextPosition XawTextSourceRead(Widget, XawTextPosition, XawTextBlock *, int);
int XawTextSourceReplace(Widget, XawTextPosition, XawTextPosition, XawTextBlock *);
XawTextPosition XawTextSourceScan(Widget, XawTextPosition, int, int, int, int);
XawTextPosition XawTextSourceSearch(Widget, XawTextPosition, int, XawTextBlock *);
void XawTextSourceSetSelection(Widget, XawTextPosition, XawTextPosition, Atom);
XawTextPosition XawTextTopPosition(Widget);
void XawTextUnsetSelection(Widget);
void XawToggleChangeRadioGroup(Widget, Widget);
XtPointer XawToggleGetCurrent(Widget);
void XawToggleSetCurrent(Widget, XtPointer);
void XawToggleUnsetCurrent(Widget);
void XawTreeForceLayout(Widget);
void XawViewportSetCoordinates(Widget, int, int);
void XawViewportSetLocation(Widget, double, double);
XmuWidgetNode XawWidgetArray[];
int XawWidgetCount;
$A07DB15FC3F9C76A4500090AF467BC3A XawactionAdjust;
$A07DB15FC3F9C76A4500090AF467BC3A XawactionEnd;
$A07DB15FC3F9C76A4500090AF467BC3A XawactionStart;
$439B6CC11D067694C5AE104EBD065164 XawisOff;
$439B6CC11D067694C5AE104EBD065164 XawisOn;
$22290B8E2C6A05087E308339D4352906 XawsdLeft;
$22290B8E2C6A05087E308339D4352906 XawsdRight;
$2B17190EDB43F17974ABDA2F217A89F1 XawselectAll;
$2B17190EDB43F17974ABDA2F217A89F1 XawselectChar;
$2B17190EDB43F17974ABDA2F217A89F1 XawselectLine;
$2B17190EDB43F17974ABDA2F217A89F1 XawselectNull;
$2B17190EDB43F17974ABDA2F217A89F1 XawselectParagraph;
$2B17190EDB43F17974ABDA2F217A89F1 XawselectPosition;
$2B17190EDB43F17974ABDA2F217A89F1 XawselectWord;
$9E1DF9A61974C4C1C54DE3F5F4FAD665 XawsmTextExtend;
$9E1DF9A61974C4C1C54DE3F5F4FAD665 XawsmTextSelect;
$475DA77725480EAC0616D0046F2D149B XawstAll;
$475DA77725480EAC0616D0046F2D149B XawstEOL;
$475DA77725480EAC0616D0046F2D149B XawstParagraph;
$475DA77725480EAC0616D0046F2D149B XawstPositions;
$475DA77725480EAC0616D0046F2D149B XawstWhiteSpace;
$A3E7C5F72761EBC037D2D2A236AE02A1 XawtextAppend;
$A3E7C5F72761EBC037D2D2A236AE02A1 XawtextEdit;
$A3E7C5F72761EBC037D2D2A236AE02A1 XawtextRead;
$BBF51B68E199C550B4BD602DD9A27574 XawtextResizeBoth;
$BBF51B68E199C550B4BD602DD9A27574 XawtextResizeHeight;
$BBF51B68E199C550B4BD602DD9A27574 XawtextResizeNever;
$BBF51B68E199C550B4BD602DD9A27574 XawtextResizeWidth;
$DDE587BC9507421E24019D1CDC2018E8 XawtextScrollAlways;
$DDE587BC9507421E24019D1CDC2018E8 XawtextScrollNever;
$DDE587BC9507421E24019D1CDC2018E8 XawtextScrollWhenNeeded;
$AEEDBE257A0664EDA892534EE275891B XawtextWrapLine;
$AEEDBE257A0664EDA892534EE275891B XawtextWrapNever;
$AEEDBE257A0664EDA892534EE275891B XawtextWrapWord;
int XcmsAddColorSpace(XcmsColorSpace *);
int XcmsAddFunctionSet(XcmsFunctionSet *);
int XcmsAllocColor(Display *, Colormap, XcmsColor *, XcmsColorFormat);
int XcmsAllocNamedColor(Display *, Colormap, const char *, XcmsColor *, XcmsColor *, XcmsColorFormat);
XcmsCCC XcmsCCCOfColormap(Display *, Colormap);
int XcmsCIELabClipL(XcmsCCC, XcmsColor *, unsigned int, unsigned int, int *);
int XcmsCIELabClipLab(XcmsCCC, XcmsColor *, unsigned int, unsigned int, int *);
int XcmsCIELabClipab(XcmsCCC, XcmsColor *, unsigned int, unsigned int, int *);
int XcmsCIELabQueryMaxC(XcmsCCC, XcmsFloat, XcmsFloat, XcmsColor *);
int XcmsCIELabQueryMaxL(XcmsCCC, XcmsFloat, XcmsFloat, XcmsColor *);
int XcmsCIELabQueryMaxLC(XcmsCCC, XcmsFloat, XcmsColor *);
int XcmsCIELabQueryMinL(XcmsCCC, XcmsFloat, XcmsFloat, XcmsColor *);
int XcmsCIELabToCIEXYZ(XcmsCCC, XcmsColor *, XcmsColor *, unsigned int);
int XcmsCIELabWhiteShiftColors(XcmsCCC, XcmsColor *, XcmsColor *, XcmsColorFormat, XcmsColor *, unsigned int, int *);
int XcmsCIELuvClipL(XcmsCCC, XcmsColor *, unsigned int, unsigned int, int *);
int XcmsCIELuvClipLuv(XcmsCCC, XcmsColor *, unsigned int, unsigned int, int *);
int XcmsCIELuvClipuv(XcmsCCC, XcmsColor *, unsigned int, unsigned int, int *);
int XcmsCIELuvQueryMaxC(XcmsCCC, XcmsFloat, XcmsFloat, XcmsColor *);
int XcmsCIELuvQueryMaxL(XcmsCCC, XcmsFloat, XcmsFloat, XcmsColor *);
int XcmsCIELuvQueryMaxLC(XcmsCCC, XcmsFloat, XcmsColor *);
int XcmsCIELuvQueryMinL(XcmsCCC, XcmsFloat, XcmsFloat, XcmsColor *);
int XcmsCIELuvToCIEuvY(XcmsCCC, XcmsColor *, XcmsColor *, unsigned int);
int XcmsCIELuvWhiteShiftColors(XcmsCCC, XcmsColor *, XcmsColor *, XcmsColorFormat, XcmsColor *, unsigned int, int *);
int XcmsCIEXYZToCIELab(XcmsCCC, XcmsColor *, XcmsColor *, unsigned int);
int XcmsCIEXYZToCIEuvY(XcmsCCC, XcmsColor *, XcmsColor *, unsigned int);
int XcmsCIEXYZToCIExyY(XcmsCCC, XcmsColor *, XcmsColor *, unsigned int);
int XcmsCIEXYZToRGBi(XcmsCCC, XcmsColor *, unsigned int, int *);
int XcmsCIEuvYToCIELuv(XcmsCCC, XcmsColor *, XcmsColor *, unsigned int);
int XcmsCIEuvYToCIEXYZ(XcmsCCC, XcmsColor *, XcmsColor *, unsigned int);
int XcmsCIEuvYToTekHVC(XcmsCCC, XcmsColor *, XcmsColor *, unsigned int);
int XcmsCIExyYToCIEXYZ(XcmsCCC, XcmsColor *, XcmsColor *, unsigned int);
XcmsColor *XcmsClientWhitePointOfCCC(XcmsCCC);
int XcmsConvertColors(XcmsCCC, XcmsColor *, unsigned int, XcmsColorFormat, int *);
XcmsCCC XcmsCreateCCC(Display *, int, Visual *, XcmsColor *, XcmsCompressionProc, XPointer, XcmsWhiteAdjustProc, XPointer);
XcmsCCC XcmsDefaultCCC(Display *, int);
Display *XcmsDisplayOfCCC(XcmsCCC);
MACRO_XcmsFailure XcmsFailure;
XcmsColorFormat XcmsFormatOfPrefix(char *);
void XcmsFreeCCC(XcmsCCC);
MACRO_XcmsInitNone XcmsInitFailure;
MACRO_XcmsInitNone XcmsInitNone;
MACRO_XcmsInitNone XcmsInitSuccess;
int XcmsLookupColor(Display *, Colormap, const char *, XcmsColor *, XcmsColor *, XcmsColorFormat);
char *XcmsPrefixOfFormat(XcmsColorFormat);
int XcmsQueryBlack(XcmsCCC, XcmsColorFormat, XcmsColor *);
int XcmsQueryBlue(XcmsCCC, XcmsColorFormat, XcmsColor *);
int XcmsQueryColor(Display *, Colormap, XcmsColor *, XcmsColorFormat);
int XcmsQueryColors(Display *, Colormap, XcmsColor *, unsigned int, XcmsColorFormat);
int XcmsQueryGreen(XcmsCCC, XcmsColorFormat, XcmsColor *);
int XcmsQueryRed(XcmsCCC, XcmsColorFormat, XcmsColor *);
int XcmsQueryWhite(XcmsCCC, XcmsColorFormat, XcmsColor *);
int XcmsRGBToRGBi(XcmsCCC, XcmsColor *, unsigned int, int *);
int XcmsRGBiToCIEXYZ(XcmsCCC, XcmsColor *, unsigned int, int *);
int XcmsRGBiToRGB(XcmsCCC, XcmsColor *, unsigned int, int *);
int XcmsScreenNumberOfCCC(XcmsCCC);
XcmsColor *XcmsScreenWhitePointOfCCC(XcmsCCC);
XcmsCCC XcmsSetCCCOfColormap(Display *, Colormap, XcmsCCC);
XcmsCompressionProc XcmsSetCompressionProc(XcmsCCC, XcmsCompressionProc, XPointer);
XcmsWhiteAdjustProc XcmsSetWhiteAdjustProc(XcmsCCC, XcmsWhiteAdjustProc, XPointer);
int XcmsSetWhitePoint(XcmsCCC, XcmsColor *);
int XcmsStoreColor(Display *, Colormap, XcmsColor *);
int XcmsStoreColors(Display *, Colormap, XcmsColor *, unsigned int, int *);
MACRO_XcmsFailure XcmsSuccess;
MACRO_XcmsFailure XcmsSuccessWithCompression;
int XcmsTekHVCClipC(XcmsCCC, XcmsColor *, unsigned int, unsigned int, int *);
int XcmsTekHVCClipV(XcmsCCC, XcmsColor *, unsigned int, unsigned int, int *);
int XcmsTekHVCClipVC(XcmsCCC, XcmsColor *, unsigned int, unsigned int, int *);
int XcmsTekHVCQueryMaxC(XcmsCCC, XcmsFloat, XcmsFloat, XcmsColor *);
int XcmsTekHVCQueryMaxV(XcmsCCC, XcmsFloat, XcmsFloat, XcmsColor *);
int XcmsTekHVCQueryMaxVC(XcmsCCC, XcmsFloat, XcmsColor *);
int XcmsTekHVCQueryMaxVSamples(XcmsCCC, XcmsFloat, XcmsColor *, unsigned int);
int XcmsTekHVCQueryMinV(XcmsCCC, XcmsFloat, XcmsFloat, XcmsColor *);
int XcmsTekHVCToCIEuvY(XcmsCCC, XcmsColor *, XcmsColor *, unsigned int);
int XcmsTekHVCWhiteShiftColors(XcmsCCC, XcmsColor *, XcmsColor *, XcmsColorFormat, XcmsColor *, unsigned int, int *);
Visual *XcmsVisualOfCCC(XcmsCCC);
MACRO_XctSingleSetSegments XctAcceptC0Extensions;
MACRO_XctSingleSetSegments XctAcceptC1Extensions;
$EE526AEE819F68457CE89197307C431F XctC0Segment;
$EE526AEE819F68457CE89197307C431F XctC1Segment;
XctData XctCreate(const unsigned __int8 *, int, XctFlags);
$EE526AEE819F68457CE89197307C431F XctEndOfText;
$EE526AEE819F68457CE89197307C431F XctError;
$EE526AEE819F68457CE89197307C431F XctExtendedSegment;
$EE526AEE819F68457CE89197307C431F XctExtension;
void XctFree(XctData);
MACRO_XctSingleSetSegments XctFreeString;
$EE526AEE819F68457CE89197307C431F XctGLSegment;
$EE526AEE819F68457CE89197307C431F XctGRSegment;
MACRO_XctSingleSetSegments XctHideDirection;
$EE526AEE819F68457CE89197307C431F XctHorizontal;
$223FFC458C10D7E132B773948B7A6063 XctLeftToRight;
XctResult XctNextItem(XctData);
MACRO_XctSingleSetSegments XctProvideExtensions;
void XctReset(XctData);
$223FFC458C10D7E132B773948B7A6063 XctRightToLeft;
$EE526AEE819F68457CE89197307C431F XctSegment;
MACRO_XctSingleSetSegments XctShiftMultiGRToGL;
MACRO_XctSingleSetSegments XctSingleSetSegments;
$223FFC458C10D7E132B773948B7A6063 XctUnspecified;
MACRO_XctVersion XctVersion;
XdbeBackBuffer XdbeAllocateBackBufferName(Display *, Window, XdbeSwapAction);
MACRO_XdbeUndefined XdbeBackground;
MACRO_XdbeBadBuffer XdbeBadBuffer;
int XdbeBeginIdiom(Display *);
MACRO_XdbeUndefined XdbeCopied;
int XdbeDeallocateBackBufferName(Display *, XdbeBackBuffer);
int XdbeEndIdiom(Display *);
void XdbeFreeVisualInfo(XdbeScreenVisualInfo *);
XdbeBackBufferAttributes *XdbeGetBackBufferAttributes(Display *, XdbeBackBuffer);
XdbeScreenVisualInfo *XdbeGetVisualInfo(Display *, Drawable *, int *);
int XdbeQueryExtension(Display *, int *, int *);
int XdbeSwapBuffers(Display *, XdbeSwapInfo *, int);
MACRO_XdbeUndefined XdbeUndefined;
MACRO_XdbeUndefined XdbeUntouched;
int XdmcpARRAY8Equal();
int XdmcpCopyARRAY8();
void XdmcpDisposeARRAY16();
void XdmcpDisposeARRAY32();
void XdmcpDisposeARRAY8();
void XdmcpDisposeARRAYofARRAY8();
int XdmcpFill();
int XdmcpFlush();
int XdmcpReadARRAY16();
int XdmcpReadARRAY32();
int XdmcpReadARRAY8();
int XdmcpReadARRAYofARRAY8();
int XdmcpReadCARD16();
int XdmcpReadCARD32();
int XdmcpReadCARD8();
int XdmcpReadHeader();
int XdmcpReadRemaining();
int XdmcpWriteARRAY16();
int XdmcpWriteARRAY32();
int XdmcpWriteARRAY8();
int XdmcpWriteARRAYofARRAY8();
int XdmcpWriteCARD16();
int XdmcpWriteCARD32();
int XdmcpWriteCARD8();
int XdmcpWriteHeader();
void Xfree();
void XieAbort(Display *, unsigned __int64, unsigned __int64);
XiePhotoElement *XieAllocatePhotofloGraph(unsigned int);
void XieAwait(Display *, unsigned __int64, unsigned __int64);
XieColorList XieCreateColorList(Display *);
XieLut XieCreateLUT(Display *);
XiePhotoflo XieCreatePhotoflo(Display *, XiePhotoElement *, int);
XiePhotomap XieCreatePhotomap(Display *);
XiePhotospace XieCreatePhotospace(Display *);
XieRoi XieCreateROI(Display *);
void XieDestroyColorList(Display *, XieColorList);
void XieDestroyLUT(Display *, XieLut);
void XieDestroyPhotoflo(Display *, XiePhotoflo);
void XieDestroyPhotomap(Display *, XiePhotomap);
void XieDestroyPhotospace(Display *, XiePhotospace);
void XieDestroyROI(Display *, XieRoi);
void XieExecuteImmediate(Display *, XiePhotospace, unsigned __int64, int, XiePhotoElement *, int);
void XieExecutePhotoflo(Display *, XiePhotoflo, int);
void XieFloArithmetic(XiePhotoElement *, XiePhototag, XiePhototag, XieProcessDomain *, XieConstant, XieArithmeticOp, unsigned int);
void XieFloBandCombine(XiePhotoElement *, XiePhototag, XiePhototag, XiePhototag);
void XieFloBandExtract(XiePhotoElement *, XiePhototag, unsigned int, double, XieConstant);
void XieFloBandSelect(XiePhotoElement *, XiePhototag, unsigned int);
void XieFloBlend(XiePhotoElement *, XiePhototag, XiePhototag, XieConstant, XiePhototag, double, XieProcessDomain *, unsigned int);
void XieFloCompare(XiePhotoElement *, XiePhototag, XiePhototag, XieProcessDomain *, XieConstant, XieCompareOp, int, unsigned int);
void XieFloConstrain(XiePhotoElement *, XiePhototag, XieLevels, XieConstrainTechnique, XiePointer);
void XieFloConvertFromIndex(XiePhotoElement *, XiePhototag, Colormap, XieDataClass, unsigned int);
void XieFloConvertFromRGB(XiePhotoElement *, XiePhototag, XieColorspace, XiePointer);
void XieFloConvertToIndex(XiePhotoElement *, XiePhototag, Colormap, XieColorList, int, XieColorAllocTechnique, XiePointer);
void XieFloConvertToRGB(XiePhotoElement *, XiePhototag, XieColorspace, XiePointer);
void XieFloConvolve(XiePhotoElement *, XiePhototag, XieProcessDomain *, float *, int, unsigned int, XieConvolveTechnique, XiePointer);
void XieFloDither(XiePhotoElement *, XiePhototag, unsigned int, XieLevels, XieDitherTechnique, XiePointer);
void XieFloExportClientHistogram(XiePhotoElement *, XiePhototag, XieProcessDomain *, XieExportNotify);
void XieFloExportClientLUT(XiePhotoElement *, XiePhototag, XieOrientation, XieExportNotify, XieLTriplet, XieLTriplet);
void XieFloExportClientPhoto(XiePhotoElement *, XiePhototag, XieExportNotify, XieEncodeTechnique, XiePointer);
void XieFloExportClientROI(XiePhotoElement *, XiePhototag, XieExportNotify);
void XieFloExportDrawable(XiePhotoElement *, XiePhototag, Drawable, GC, int, int);
void XieFloExportDrawablePlane(XiePhotoElement *, XiePhototag, Drawable, GC, int, int);
void XieFloExportLUT(XiePhotoElement *, XiePhototag, XieLut, int, XieLTriplet);
void XieFloExportPhotomap(XiePhotoElement *, XiePhototag, XiePhotomap, XieEncodeTechnique, XiePointer);
void XieFloExportROI(XiePhotoElement *, XiePhototag, XieRoi);
void XieFloGeometry(XiePhotoElement *, XiePhototag, unsigned int, unsigned int, float *, XieConstant, unsigned int, XieGeometryTechnique, XiePointer);
void XieFloImportClientLUT(XiePhotoElement *, XieDataClass, XieOrientation, XieLTriplet, XieLevels);
void XieFloImportClientPhoto(XiePhotoElement *, XieDataClass, XieLTriplet, XieLTriplet, XieLevels, int, XieDecodeTechnique, XiePointer);
void XieFloImportClientROI(XiePhotoElement *, unsigned int);
void XieFloImportDrawable(XiePhotoElement *, Drawable, int, int, unsigned int, unsigned int, unsigned __int64, int);
void XieFloImportDrawablePlane(XiePhotoElement *, Drawable, int, int, unsigned int, unsigned int, unsigned __int64, unsigned __int64, int);
void XieFloImportLUT(XiePhotoElement *, XieLut);
void XieFloImportPhotomap(XiePhotoElement *, XiePhotomap, int);
void XieFloImportROI(XiePhotoElement *, XieRoi);
void XieFloLogical(XiePhotoElement *, XiePhototag, XiePhototag, XieProcessDomain *, XieConstant, unsigned __int64, unsigned int);
void XieFloMatchHistogram(XiePhotoElement *, XiePhototag, XieProcessDomain *, XieHistogramShape, XiePointer);
void XieFloMath(XiePhotoElement *, XiePhototag, XieProcessDomain *, XieMathOp, unsigned int);
void XieFloPasteUp(XiePhotoElement *, unsigned int, unsigned int, XieConstant, XieTile *, unsigned int);
void XieFloPoint(XiePhotoElement *, XiePhototag, XieProcessDomain *, XiePhototag, unsigned int);
void XieFloUnconstrain(XiePhotoElement *, XiePhototag);
void XieFreeEncodeJPEGBaseline(XieEncodeJPEGBaselineParam *);
void XieFreeEncodeJPEGLossless(XieEncodeJPEGLosslessParam *);
void XieFreePasteUpTiles(XiePhotoElement *);
void XieFreePhotofloGraph(XiePhotoElement *, unsigned int);
void XieFreeTechniques(XieTechnique *, unsigned int);
int XieGetClientData(Display *, unsigned __int64, unsigned __int64, XiePhototag, unsigned int, int, unsigned int, XieExportState *, unsigned __int8 **, unsigned int *);
int XieInitialize(Display *, XieExtensionInfo **);
void XieModifyPhotoflo(Display *, XiePhotoflo, int, XiePhotoElement *, int);
void XiePurgeColorList(Display *, XieColorList);
void XiePutClientData(Display *, unsigned __int64, unsigned __int64, XiePhototag, int, unsigned int, unsigned __int8 *, unsigned int);
int XieQueryColorList(Display *, XieColorList, Colormap *, unsigned int *, unsigned __int64 **);
int XieQueryPhotoflo(Display *, unsigned __int64, unsigned __int64, XiePhotofloState *, XiePhototag **, unsigned int *, XiePhototag **, unsigned int *);
int XieQueryPhotomap(Display *, XiePhotomap, int *, XieDataType *, XieDataClass *, XieDecodeTechnique *, XieLTriplet, XieLTriplet, XieLTriplet);
int XieQueryTechniques(Display *, XieTechniqueGroup, int *, XieTechnique **);
void XieRedefinePhotoflo(Display *, XiePhotoflo, XiePhotoElement *, int);
XieCIELabToRGBParam *XieTecCIELabToRGB(XieMatrix, XieWhiteAdjustTechnique, XiePointer, XieGamutTechnique, XiePointer);
XieCIEXYZToRGBParam *XieTecCIEXYZToRGB(XieMatrix, XieWhiteAdjustTechnique, XiePointer, XieGamutTechnique, XiePointer);
XieClipScaleParam *XieTecClipScale(XieConstant, XieConstant, XieLTriplet, XieLTriplet);
XieColorAllocAllParam *XieTecColorAllocAll(unsigned __int64);
XieColorAllocMatchParam *XieTecColorAllocMatch(double, double);
XieColorAllocRequantizeParam *XieTecColorAllocRequantize(unsigned __int64);
XieConvolveConstantParam *XieTecConvolveConstant(XieConstant);
XieDecodeG31DParam *XieTecDecodeG31D(XieOrientation, int, int);
XieDecodeG32DParam *XieTecDecodeG32D(XieOrientation, int, int);
XieDecodeG42DParam *XieTecDecodeG42D(XieOrientation, int, int);
XieDecodeJPEGBaselineParam *XieTecDecodeJPEGBaseline(XieInterleave, XieOrientation, int);
XieDecodeJPEGLosslessParam *XieTecDecodeJPEGLossless(XieInterleave, XieOrientation);
XieDecodeTIFF2Param *XieTecDecodeTIFF2(XieOrientation, int, int);
XieDecodeTIFFPackBitsParam *XieTecDecodeTIFFPackBits(XieOrientation, int);
XieDecodeUncompressedSingleParam *XieTecDecodeUncompressedSingle(XieOrientation, XieOrientation, unsigned int, unsigned int, unsigned int);
XieDecodeUncompressedTripleParam *XieTecDecodeUncompressedTriple(XieOrientation, XieOrientation, XieOrientation, XieInterleave, unsigned __int8 *, unsigned __int8 *, unsigned __int8 *);
XieDitherOrderedParam *XieTecDitherOrderedParam(unsigned int);
XieEncodeG31DParam *XieTecEncodeG31D(int, int, XieOrientation);
XieEncodeG32DParam *XieTecEncodeG32D(int, int, int, XieOrientation, unsigned __int64);
XieEncodeG42DParam *XieTecEncodeG42D(int, int, XieOrientation);
XieEncodeJPEGBaselineParam *XieTecEncodeJPEGBaseline(XieInterleave, XieOrientation, unsigned __int8 *, unsigned __int8 *, char *, unsigned int, char *, unsigned int, char *, unsigned int);
XieEncodeJPEGLosslessParam *XieTecEncodeJPEGLossless(XieInterleave, XieOrientation, unsigned __int8 *, char *, unsigned int);
XieEncodeServerChoiceParam *XieTecEncodeServerChoice(unsigned int);
XieEncodeTIFF2Param *XieTecEncodeTIFF2(XieOrientation, int);
XieEncodeTIFFPackBitsParam *XieTecEncodeTIFFPackBits(XieOrientation);
XieEncodeUncompressedSingleParam *XieTecEncodeUncompressedSingle(XieOrientation, XieOrientation, unsigned int, unsigned int);
XieEncodeUncompressedTripleParam *XieTecEncodeUncompressedTriple(XieOrientation, XieOrientation, XieOrientation, XieInterleave, unsigned __int8 *, unsigned __int8 *);
XieGeomAntialiasByAreaParam *XieTecGeomAntialiasByArea(int);
XieGeomAntialiasByLowpassParam *XieTecGeomAntialiasByLowpass(int);
XieGeomGaussianParam *XieTecGeomGaussian(double, double, unsigned int, int);
XieGeomNearestNeighborParam *XieTecGeomNearestNeighbor(unsigned int);
XieHistogramGaussianParam *XieTecHistogramGaussian(double, double);
XieHistogramHyperbolicParam *XieTecHistogramHyperbolic(double, int);
XieRGBToCIELabParam *XieTecRGBToCIELab(XieMatrix, XieWhiteAdjustTechnique, XiePointer);
XieRGBToCIEXYZParam *XieTecRGBToCIEXYZ(XieMatrix, XieWhiteAdjustTechnique, XiePointer);
XieRGBToYCCParam *XieTecRGBToYCC(XieLevels, double, double, double, double);
XieRGBToYCbCrParam *XieTecRGBToYCbCr(XieLevels, double, double, double, XieConstant);
XieWhiteAdjustCIELabShiftParam *XieTecWhiteAdjustCIELabShift(XieConstant);
XieYCCToRGBParam *XieTecYCCToRGB(XieLevels, double, double, double, double, XieGamutTechnique, XiePointer);
XieYCbCrToRGBParam *XieTecYCbCrToRGB(XieLevels, double, double, double, XieConstant, XieGamutTechnique, XiePointer);
MACRO_XkbAXN XkbAXN_AXKWarning;
MACRO_XkbAXN_SKPressMask XkbAXN_AXKWarningMask;
MACRO_XkbAXN XkbAXN_BKAccept;
MACRO_XkbAXN_SKPressMask XkbAXN_BKAcceptMask;
MACRO_XkbAXN XkbAXN_BKReject;
MACRO_XkbAXN_SKPressMask XkbAXN_BKRejectMask;
MACRO_XkbAXN XkbAXN_SKAccept;
MACRO_XkbAXN_SKPressMask XkbAXN_SKAcceptMask;
MACRO_XkbAXN XkbAXN_SKPress;
MACRO_XkbAXN_SKPressMask XkbAXN_SKPressMask;
MACRO_XkbAXN XkbAXN_SKReject;
MACRO_XkbAXN_SKPressMask XkbAXN_SKRejectMask;
MACRO_XkbAXN XkbAXN_SKRelease;
MACRO_XkbAXN_SKPressMask XkbAXN_SKReleaseMask;
MACRO_XkbAX_SKOptionsMask XkbAX_AllOptionsMask;
MACRO_XkbAX XkbAX_BKRejectFBMask;
MACRO_XkbAX XkbAX_DumbBellFBMask;
MACRO_XkbAX XkbAX_FBOptionsMask;
MACRO_XkbAX XkbAX_FeatureFBMask;
MACRO_XkbAX XkbAX_IndicatorFBMask;
MACRO_XkbAX XkbAX_LatchToLockMask;
MACRO_XkbAX XkbAX_SKAcceptFBMask;
MACRO_XkbAX_SKOptionsMask XkbAX_SKOptionsMask;
MACRO_XkbAX XkbAX_SKPressFBMask;
MACRO_XkbAX XkbAX_SKRejectFBMask;
MACRO_XkbAX XkbAX_SKReleaseFBMask;
MACRO_XkbAX XkbAX_SlowWarnFBMask;
MACRO_XkbAX XkbAX_StickyKeysFBMask;
MACRO_XkbAX XkbAX_TwoKeysMask;
char *XkbAccessXDetailText(unsigned int, unsigned int);
MACRO_XkbRepeatKeysMask XkbAccessXFeedbackMask;
MACRO_XkbRepeatKeysMask XkbAccessXKeysMask;
MACRO_XkbNewKeyboardNotify XkbAccessXNotify;
MACRO_XkbNewKeyboardNotifyMask XkbAccessXNotifyMask;
MACRO_XkbRepeatKeysMask XkbAccessXTimeoutMask;
MACRO_XkbNewKeyboardNotify XkbActionMessage;
MACRO_XkbActionMessageLength XkbActionMessageLength;
MACRO_XkbNewKeyboardNotifyMask XkbActionMessageMask;
char *XkbActionText(Display *, XkbDescPtr, XkbAction *, unsigned int);
char *XkbActionTypeText(unsigned int, unsigned int);
XkbDeviceLedInfoPtr XkbAddDeviceLedInfo(XkbDeviceInfoPtr, unsigned int, unsigned int);
XkbColorPtr XkbAddGeomColor(XkbGeometryPtr, char *, unsigned int);
XkbDoodadPtr XkbAddGeomDoodad(XkbGeometryPtr, XkbSectionPtr, Atom);
XkbKeyPtr XkbAddGeomKey(XkbRowPtr);
XkbKeyAliasPtr XkbAddGeomKeyAlias(XkbGeometryPtr, char *, char *);
XkbOutlinePtr XkbAddGeomOutline(XkbShapePtr, int);
XkbOverlayPtr XkbAddGeomOverlay(XkbSectionPtr, Atom, int);
XkbOverlayKeyPtr XkbAddGeomOverlayKey(XkbOverlayPtr, XkbOverlayRowPtr, char *, char *);
XkbOverlayRowPtr XkbAddGeomOverlayRow(XkbOverlayPtr, int, int);
XkbPropertyPtr XkbAddGeomProperty(XkbGeometryPtr, char *, char *);
XkbRowPtr XkbAddGeomRow(XkbSectionPtr, int);
XkbSectionPtr XkbAddGeomSection(XkbGeometryPtr, Atom, int, int, int);
XkbShapePtr XkbAddGeomShape(XkbGeometryPtr, Atom, int);
XkbKeyTypePtr XkbAddKeyType(XkbDescPtr, Atom, int, int, int);
XkbSymInterpretPtr XkbAddSymInterpret(XkbDescPtr, XkbSymInterpretPtr, int, XkbChangesPtr);
MACRO_XkbAllAccessXEventsMask XkbAllAccessXEventsMask;
MACRO_XkbAllActionMessagesMask XkbAllActionMessagesMask;
MACRO_XkbAllBellEventsMask XkbAllBellEventsMask;
MACRO_XkbAllBooleanCtrlsMask XkbAllBooleanCtrlsMask;
MACRO_XkbAllClientInfoMask XkbAllClientInfoMask;
MACRO_XkbSymInterpMask XkbAllCompatMask;
MACRO_XkbClientMapMask XkbAllComponentsMask;
MACRO_XkbAllBooleanCtrlsMask XkbAllControlsMask;
MACRO_XkbNewKeyboardNotifyMask XkbAllEventsMask;
MACRO_XkbExplicitKeyType1Mask XkbAllExplicitMask;
MACRO_XkbXI_IndicatorsMask XkbAllExtensionDeviceEventsMask;
MACRO_XkbGroup1Index XkbAllGroups;
MACRO_XkbAllGroupsMask XkbAllGroupsMask;
MACRO_XkbNumModifiers XkbAllIndicatorsMask;
MACRO_XkbAllClientInfoMask XkbAllMapComponentsMask;
MACRO_XkbNoModifierMask XkbAllModifiersMask;
MACRO_XkbComponentNamesMask XkbAllNamesMask;
MACRO_XkbNKN XkbAllNewKeyboardEventsMask;
MACRO_XkbMaxRadioGroups XkbAllRadioGroupsMask;
MACRO_XkbOneLevelMask XkbAllRequiredTypes;
MACRO_XkbAllClientInfoMask XkbAllServerInfoMask;
MACRO_XkbModifierStateMask XkbAllStateComponentsMask;
MACRO_XkbNoModifierMask XkbAllVirtualModsMask;
MACRO_XkbUseCoreKbd XkbAllXIClasses;
MACRO_XkbUseCoreKbd XkbAllXIIds;
int XkbAllocClientMap(XkbDescPtr, unsigned int, unsigned int);
int XkbAllocCompatMap(XkbDescPtr, unsigned int, unsigned int);
int XkbAllocControls(XkbDescPtr, unsigned int);
XkbDeviceInfoPtr XkbAllocDeviceInfo(unsigned int, unsigned int, unsigned int);
int XkbAllocGeomColors(XkbGeometryPtr, int);
int XkbAllocGeomDoodads(XkbGeometryPtr, int);
int XkbAllocGeomKeyAliases(XkbGeometryPtr, int);
int XkbAllocGeomKeys(XkbRowPtr, int);
int XkbAllocGeomOutlines(XkbShapePtr, int);
int XkbAllocGeomOverlayKeys(XkbOverlayRowPtr, int);
int XkbAllocGeomOverlayRows(XkbOverlayPtr, int);
int XkbAllocGeomOverlays(XkbSectionPtr, int);
int XkbAllocGeomPoints(XkbOutlinePtr, int);
int XkbAllocGeomProps(XkbGeometryPtr, int);
int XkbAllocGeomRows(XkbSectionPtr, int);
int XkbAllocGeomSectionDoodads(XkbSectionPtr, int);
int XkbAllocGeomSections(XkbGeometryPtr, int);
int XkbAllocGeomShapes(XkbGeometryPtr, int);
int XkbAllocGeometry(XkbDescPtr, XkbGeometrySizesPtr);
int XkbAllocIndicatorMaps(XkbDescPtr);
XkbDescPtr XkbAllocKeyboard(void);
int XkbAllocNames(XkbDescPtr, unsigned int, int, int);
int XkbAllocServerMap(XkbDescPtr, unsigned int, unsigned int);
MACRO_XkbOneLevelIndex XkbAlphabeticIndex;
MACRO_XkbOneLevelMask XkbAlphabeticMask;
MACRO_XkbAnyActionDataSize XkbAnyActionDataSize;
MACRO_XkbGroup1Index XkbAnyGroup;
MACRO_XkbGroup1Mask XkbAnyGroupMask;
int XkbApplyCompatMapToKey(XkbDescPtr, KeyCode, XkbChangesPtr);
char *XkbAtomGetString(Display *, Atom);
char *XkbAtomText(Display *, Atom, unsigned int);
MACRO_XkbRepeatKeysMask XkbAudibleBellMask;
MACRO_XkbBI XkbBI_AX_BounceKeyReject;
MACRO_XkbBI XkbBI_AX_FeatureChange;
MACRO_XkbBI XkbBI_AX_FeatureOff;
MACRO_XkbBI XkbBI_AX_FeatureOn;
MACRO_XkbBI XkbBI_AX_IndicatorChange;
MACRO_XkbBI XkbBI_AX_IndicatorOff;
MACRO_XkbBI XkbBI_AX_IndicatorOn;
MACRO_XkbBI XkbBI_AX_SlowKeyAccept;
MACRO_XkbBI XkbBI_AX_SlowKeyPress;
MACRO_XkbBI XkbBI_AX_SlowKeyReject;
MACRO_XkbBI XkbBI_AX_SlowKeyRelease;
MACRO_XkbBI XkbBI_AX_SlowKeysWarning;
MACRO_XkbBI XkbBI_AX_StickyLatch;
MACRO_XkbBI XkbBI_AX_StickyLock;
MACRO_XkbBI XkbBI_AX_StickyUnlock;
MACRO_XkbBI XkbBI_AppDeath;
MACRO_XkbBI XkbBI_BadValue;
MACRO_XkbBI XkbBI_ClockChimeHalf;
MACRO_XkbBI XkbBI_ClockChimeHour;
MACRO_XkbBI XkbBI_ClockChimeQuarter;
MACRO_XkbBI XkbBI_Close;
MACRO_XkbBI XkbBI_ComposeFail;
MACRO_XkbBI XkbBI_CursorStuck;
MACRO_XkbBI XkbBI_Deiconify;
MACRO_XkbBI XkbBI_End;
MACRO_XkbBI XkbBI_Failure;
MACRO_XkbBI XkbBI_Iconify;
MACRO_XkbBI XkbBI_Ignore;
MACRO_XkbBI XkbBI_ImAlive;
MACRO_XkbBI XkbBI_Info;
MACRO_XkbBI XkbBI_InvalidLocation;
MACRO_XkbBI XkbBI_LaunchApp;
MACRO_XkbBI XkbBI_MajorError;
MACRO_XkbBI XkbBI_MarginBell;
MACRO_XkbBI XkbBI_MinorError;
MACRO_XkbBI XkbBI_NewMail;
MACRO_XkbBI XkbBI_NumBells;
MACRO_XkbBI XkbBI_Open;
MACRO_XkbBI XkbBI_Proceed;
MACRO_XkbBI XkbBI_Question;
MACRO_XkbBI XkbBI_RepeatingLastBell;
MACRO_XkbBI XkbBI_Start;
MACRO_XkbBI XkbBI_Success;
MACRO_XkbBI XkbBI_TerminalBell;
MACRO_XkbBI XkbBI_Wait;
MACRO_XkbBI XkbBI_Warning;
char *XkbBehaviorText(XkbDescPtr, XkbBehavior *, unsigned int);
int XkbBell(Display *, Window, int, Atom);
int XkbBellEvent(Display *, Window, int, Atom);
MACRO_XkbNewKeyboardNotify XkbBellNotify;
MACRO_XkbNewKeyboardNotifyMask XkbBellNotifyMask;
MACRO_XkbRepeatKeysMask XkbBounceKeysMask;
XkbConfigUnboundModPtr XkbCFAddModByName(XkbConfigRtrnPtr, int, char *, int, XkbConfigUnboundModPtr);
XkbConfigRtrnPrivPtr XkbCFAddPrivate(XkbConfigRtrnPtr, XkbConfigFieldsPtr, XPointer);
int XkbCFApplyMods(XkbConfigRtrnPtr, int, XkbConfigModInfoPtr);
int XkbCFApplyRtrnValues(XkbConfigRtrnPtr, XkbConfigFieldsPtr, XkbDescPtr);
int XkbCFBindMods(XkbConfigRtrnPtr, XkbDescPtr);
XkbConfigFieldsPtr XkbCFDflts;
XkbConfigFieldsPtr XkbCFDup(XkbConfigFieldsPtr);
XkbConfigFieldsPtr XkbCFFree(XkbConfigFieldsPtr, int);
void XkbCFFreeRtrn(XkbConfigRtrnPtr, XkbConfigFieldsPtr, XkbDescPtr);
int XkbCFParse(FILE *, XkbConfigFieldsPtr, XkbDescPtr, XkbConfigRtrnPtr);
void XkbCFReportError(FILE *, char *, int, int);
int XkbCFScan(FILE *, XkbCFScanResultPtr, XkbConfigRtrnPtr);
MACRO_XkbCF_InitialMods XkbCF_AccessXTimeout;
MACRO_XkbCF_InitialMods XkbCF_AccessXTimeoutCtrlsOff;
MACRO_XkbCF_InitialMods XkbCF_AccessXTimeoutCtrlsOn;
MACRO_XkbCF_InitialMods XkbCF_AccessXTimeoutOptsOff;
MACRO_XkbCF_InitialMods XkbCF_AccessXTimeoutOptsOn;
MACRO_XkbCF XkbCF_Apply;
MACRO_XkbCF_Unknown XkbCF_BadAlloc;
MACRO_XkbCF XkbCF_Check;
MACRO_XkbCF XkbCF_CleanUp;
MACRO_XkbCF XkbCF_Destroy;
MACRO_XkbCF_InitialMods XkbCF_EOF;
MACRO_XkbCF_Unknown XkbCF_EOL;
MACRO_XkbCF_Unknown XkbCF_Equals;
MACRO_XkbCF_Unknown XkbCF_ExpectedAXOption;
MACRO_XkbCF_Unknown XkbCF_ExpectedBoolean;
MACRO_XkbCF_Unknown XkbCF_ExpectedControl;
MACRO_XkbCF_Unknown XkbCF_ExpectedEOS;
MACRO_XkbCF_Unknown XkbCF_ExpectedInteger;
MACRO_XkbCF_Unknown XkbCF_ExpectedModifier;
MACRO_XkbCF_Unknown XkbCF_ExpectedOORGroupBehavior;
MACRO_XkbCF_Unknown XkbCF_ExpectedOperator;
MACRO_XkbCF_Unknown XkbCF_ExpectedString;
MACRO_XkbCF_InitialMods XkbCF_GroupsWrap;
MACRO_XkbCF_Unknown XkbCF_Ident;
MACRO_XkbCF_InitialMods XkbCF_IgnoreLockMods;
MACRO_XkbCF_InitialMods XkbCF_InitialCtrls;
MACRO_XkbCF_InitialMods XkbCF_InitialMods;
MACRO_XkbCF_Unknown XkbCF_Integer;
MACRO_XkbCF_InitialMods XkbCF_InternalMods;
MACRO_XkbCF_MergeSet XkbCF_MergeAdd;
MACRO_XkbCF_MergeSet XkbCF_MergeRemove;
MACRO_XkbCF_MergeSet XkbCF_MergeSet;
MACRO_XkbCF_Unknown XkbCF_Minus;
MACRO_XkbCF_Unknown XkbCF_MinusEquals;
MACRO_XkbCF_Unknown XkbCF_MissingEquals;
MACRO_XkbCF_Unknown XkbCF_MissingIdent;
MACRO_XkbCF_Unknown XkbCF_Plus;
MACRO_XkbCF_Unknown XkbCF_PlusEquals;
MACRO_XkbCF_Unknown XkbCF_Semi;
MACRO_XkbCF_Unknown XkbCF_String;
MACRO_XkbCF_Unknown XkbCF_Unknown;
MACRO_XkbCF_Unknown XkbCF_UnterminatedString;
MACRO_XkbXKMFile XkbCFile;
Atom XkbChangeAtomDisplay(Display *, Display *, Atom);
int XkbChangeDeviceInfo(Display *, XkbDeviceInfoPtr, XkbDeviceChangesPtr);
int XkbChangeEnabledControls(Display *, unsigned int, unsigned int, unsigned int);
int XkbChangeKbdDisplay(Display *, XkbFileInfo *);
int XkbChangeMap(Display *, XkbDescPtr, XkbMapChangesPtr);
int XkbChangeNames(Display *, XkbDescPtr, XkbNameChangesPtr);
int XkbChangeTypesOfKey(XkbDescPtr, int, int, unsigned int, int *, XkbMapChangesPtr);
MACRO_XkbWrapIntoRange XkbClampIntoRange;
MACRO_XkbClientMapMask XkbClientMapMask;
MACRO_XkbModifierStateMask XkbCompatGrabModsMask;
MACRO_XkbModifierStateMask XkbCompatLookupModsMask;
MACRO_XkbClientMapMask XkbCompatMapMask;
MACRO_XkbNewKeyboardNotify XkbCompatMapNotify;
MACRO_XkbNewKeyboardNotifyMask XkbCompatMapNotifyMask;
MACRO_XkbKeycodesNameMask XkbCompatNameMask;
MACRO_XkbModifierStateMask XkbCompatStateMask;
MACRO_XkbComponentNamesMask XkbComponentNamesMask;
int XkbComputeEffectiveMap(XkbDescPtr, XkbKeyTypePtr, unsigned __int8 *);
int XkbComputeRowBounds(XkbGeometryPtr, XkbSectionPtr, XkbRowPtr);
int XkbComputeSectionBounds(XkbGeometryPtr, XkbSectionPtr);
int XkbComputeShapeBounds(XkbShapePtr);
int XkbComputeShapeTop(XkbShapePtr, XkbBoundsPtr);
char *XkbConfigText(unsigned int, unsigned int);
MACRO_XkbRepeatKeysMask XkbControlsEnabledMask;
MACRO_XkbClientMapMask XkbControlsMask;
char *XkbControlsMaskText(unsigned int, unsigned int);
MACRO_XkbNewKeyboardNotify XkbControlsNotify;
MACRO_XkbNewKeyboardNotifyMask XkbControlsNotifyMask;
unsigned int XkbConvertGetByNameComponents(int, unsigned int);
unsigned int XkbConvertXkbComponents(int, unsigned int);
int XkbCopyKeyType(XkbKeyTypePtr, XkbKeyTypePtr);
int XkbCopyKeyTypes(XkbKeyTypePtr, XkbKeyTypePtr, int);
MACRO_XkbDF XkbDF_DisableLocks;
int XkbDetermineFileType(XkbFileInfo *, int, int *);
int XkbDeviceBell(Display *, Window, int, int, int, int, Atom);
int XkbDeviceBellEvent(Display *, Window, int, int, int, int, Atom);
MACRO_XkbUseCoreKbd XkbDfltXIClass;
MACRO_XkbUseCoreKbd XkbDfltXIId;
char *XkbDoodadTypeText(unsigned int, unsigned int);
void XkbEnsureSafeMapName(char *);
MACRO_XkbErr XkbErr_BadClass;
MACRO_XkbKeyboard XkbErr_BadDevice;
MACRO_XkbErr_BadId XkbErr_BadId;
MACRO_XkbEventCode XkbEventCode;
MACRO_XkbExplicitKeyType1Mask XkbExplicitAutoRepeatMask;
MACRO_XkbExplicitKeyType1Mask XkbExplicitBehaviorMask;
MACRO_XkbKeyTypesMask XkbExplicitComponentsMask;
MACRO_XkbExplicitKeyType1Mask XkbExplicitInterpretMask;
MACRO_XkbExplicitKeyType1Mask XkbExplicitKeyType1Mask;
MACRO_XkbExplicitKeyType1Mask XkbExplicitKeyType2Mask;
MACRO_XkbExplicitKeyType1Mask XkbExplicitKeyType3Mask;
MACRO_XkbExplicitKeyType1Mask XkbExplicitKeyType4Mask;
MACRO_XkbMinorVersion XkbExplicitKeyTypesMask;
MACRO_XkbExplicitKeyType1Mask XkbExplicitVModMapMask;
MACRO_XkbNewKeyboardNotify XkbExtensionDeviceNotify;
MACRO_XkbNewKeyboardNotifyMask XkbExtensionDeviceNotifyMask;
int XkbFindKeycodeByName(XkbDescPtr, char *, int);
char *XkbFindOverlayForKey(XkbGeometryPtr, XkbSectionPtr, char *);
int XkbForceBell(Display *, int);
int XkbForceDeviceBell(Display *, int, int, int, int);
void XkbFreeClientMap(XkbDescPtr, unsigned int, int);
void XkbFreeCompatMap(XkbDescPtr, unsigned int, int);
void XkbFreeComponentList(XkbComponentListPtr);
void XkbFreeControls(XkbDescPtr, unsigned int, int);
void XkbFreeDeviceInfo(XkbDeviceInfoPtr, unsigned int, int);
void XkbFreeGeomColors(XkbGeometryPtr, int, int, int);
void XkbFreeGeomDoodads(XkbDoodadPtr, int, int);
void XkbFreeGeomKeyAliases(XkbGeometryPtr, int, int, int);
void XkbFreeGeomKeys(XkbRowPtr, int, int, int);
void XkbFreeGeomOutlines(XkbShapePtr, int, int, int);
void XkbFreeGeomOverlayKeys(XkbOverlayRowPtr, int, int, int);
void XkbFreeGeomOverlayRows(XkbOverlayPtr, int, int, int);
void XkbFreeGeomOverlays(XkbSectionPtr, int, int, int);
void XkbFreeGeomPoints(XkbOutlinePtr, int, int, int);
void XkbFreeGeomProperties(XkbGeometryPtr, int, int, int);
void XkbFreeGeomRows(XkbSectionPtr, int, int, int);
void XkbFreeGeomSections(XkbGeometryPtr, int, int, int);
void XkbFreeGeomShapes(XkbGeometryPtr, int, int, int);
void XkbFreeGeometry(XkbGeometryPtr, unsigned int, int);
void XkbFreeIndicatorMaps(XkbDescPtr);
void XkbFreeKeyboard(XkbDescPtr, unsigned int, int);
void XkbFreeNames(XkbDescPtr, unsigned int, int);
void XkbFreeServerMap(XkbDescPtr, unsigned int, int);
MACRO_XkbGBN XkbGBN_AllComponentsMask;
MACRO_XkbGBN XkbGBN_ClientSymbolsMask;
MACRO_XkbGBN XkbGBN_CompatMapMask;
MACRO_XkbGBN XkbGBN_GeometryMask;
MACRO_XkbGBN XkbGBN_IndicatorMapMask;
MACRO_XkbGBN XkbGBN_KeyNamesMask;
MACRO_XkbGBN XkbGBN_OtherNamesMask;
MACRO_XkbGBN XkbGBN_ServerSymbolsMask;
MACRO_XkbGBN XkbGBN_SymbolsMask;
MACRO_XkbGBN XkbGBN_TypesMask;
MACRO_XkbGeomPropertiesMask XkbGeomAllMask;
MACRO_XkbGeomPropertiesMask XkbGeomColorsMask;
MACRO_XkbGeomPropertiesMask XkbGeomDoodadsMask;
char *XkbGeomFPText(int, unsigned int);
MACRO_XkbGeomPropertiesMask XkbGeomKeyAliasesMask;
MACRO_XkbKeyNameLength XkbGeomMaxColors;
MACRO_XkbGeomMaxLabelColors XkbGeomMaxLabelColors;
MACRO_XkbGeomMaxLabelColors XkbGeomMaxPriority;
MACRO_XkbGeomPropertiesMask XkbGeomPropertiesMask;
MACRO_XkbKeyNameLength XkbGeomPtsPerMM;
MACRO_XkbGeomPropertiesMask XkbGeomSectionsMask;
MACRO_XkbGeomPropertiesMask XkbGeomShapesMask;
MACRO_XkbClientMapMask XkbGeometryMask;
MACRO_XkbKeycodesNameMask XkbGeometryNameMask;
int XkbGetAutoRepeatRate(Display *, unsigned int, unsigned int *, unsigned int *);
int XkbGetAutoResetControls(Display *, unsigned int *, unsigned int *);
int XkbGetCompatMap(Display *, unsigned int, XkbDescPtr);
int XkbGetControls(Display *, unsigned __int64, XkbDescPtr);
int XkbGetDetectableAutoRepeat(Display *, int *);
int XkbGetDeviceButtonActions(Display *, XkbDeviceInfoPtr, int, unsigned int, unsigned int);
int XkbGetDeviceIndicatorState(Display *, unsigned int, unsigned int, unsigned int, unsigned int *);
XkbDeviceInfoPtr XkbGetDeviceInfo(Display *, unsigned int, unsigned int, unsigned int, unsigned int);
int XkbGetDeviceInfoChanges(Display *, XkbDeviceInfoPtr, XkbDeviceChangesPtr);
int XkbGetDeviceLedInfo(Display *, XkbDeviceInfoPtr, unsigned int, unsigned int, unsigned int);
int XkbGetGeometry(Display *, XkbDescPtr);
int XkbGetIndicatorMap(Display *, unsigned __int64, XkbDescPtr);
int XkbGetIndicatorState(Display *, unsigned int, unsigned int *);
int XkbGetKeyActions(Display *, unsigned int, unsigned int, XkbDescPtr);
int XkbGetKeyBehaviors(Display *, unsigned int, unsigned int, XkbDescPtr);
int XkbGetKeyExplicitComponents(Display *, unsigned int, unsigned int, XkbDescPtr);
int XkbGetKeyModifierMap(Display *, unsigned int, unsigned int, XkbDescPtr);
int XkbGetKeySyms(Display *, unsigned int, unsigned int, XkbDescPtr);
int XkbGetKeyTypes(Display *, unsigned int, unsigned int, XkbDescPtr);
XkbDescPtr XkbGetKeyboard(Display *, unsigned int, unsigned int);
XkbDescPtr XkbGetKeyboardByName(Display *, unsigned int, XkbComponentNamesPtr, unsigned int, unsigned int, int);
XkbDescPtr XkbGetMap(Display *, unsigned int, unsigned int);
int XkbGetMapChanges(Display *, XkbDescPtr, XkbMapChangesPtr);
int XkbGetNamedDeviceIndicator(Display *, unsigned int, unsigned int, unsigned int, Atom, int *, int *, XkbIndicatorMapPtr, int *);
int XkbGetNamedGeometry(Display *, XkbDescPtr, Atom);
int XkbGetNamedIndicator(Display *, Atom, int *, int *, XkbIndicatorMapPtr, int *);
int XkbGetNames(Display *, unsigned int, XkbDescPtr);
int XkbGetPerClientControls(Display *, unsigned int *);
int XkbGetState(Display *, unsigned int, XkbStatePtr);
int XkbGetUpdatedMap(Display *, unsigned int, XkbDescPtr);
int XkbGetVirtualMods(Display *, unsigned int, XkbDescPtr);
unsigned int XkbGetXlibControls(Display *);
MACRO_XkbModifierStateMask XkbGrabModsMask;
MACRO_XkbGroup1Index XkbGroup1Index;
MACRO_XkbGroup1Mask XkbGroup1Mask;
MACRO_XkbGroup1Index XkbGroup2Index;
MACRO_XkbGroup1Mask XkbGroup2Mask;
MACRO_XkbGroup1Index XkbGroup3Index;
MACRO_XkbGroup1Mask XkbGroup3Mask;
MACRO_XkbGroup1Index XkbGroup4Index;
MACRO_XkbGroup1Mask XkbGroup4Mask;
MACRO_XkbModifierStateMask XkbGroupBaseMask;
MACRO_XkbSymInterpMask XkbGroupCompatMask;
MACRO_XkbModifierStateMask XkbGroupLatchMask;
MACRO_XkbModifierStateMask XkbGroupLockMask;
MACRO_XkbKeycodesNameMask XkbGroupNamesMask;
MACRO_XkbModifierStateMask XkbGroupStateMask;
MACRO_XkbRepeatKeysMask XkbGroupsWrapMask;
char *XkbIMWhichStateMaskText(unsigned int, unsigned int);
MACRO_XkbIM XkbIM_LEDDrivesKB;
MACRO_XkbIM XkbIM_NoAutomatic;
MACRO_XkbSI_AnyOfOrNone XkbIM_NoExplicit;
MACRO_XkbIM_UseNone XkbIM_UseAnyGroup;
MACRO_XkbIM_UseNone XkbIM_UseAnyMods;
MACRO_XkbIM XkbIM_UseBase;
MACRO_XkbIM_UseLatched XkbIM_UseCompat;
MACRO_XkbIM_UseLatched XkbIM_UseEffective;
MACRO_XkbIM_UseLatched XkbIM_UseLatched;
MACRO_XkbIM_UseLatched XkbIM_UseLocked;
MACRO_XkbIM_UseNone XkbIM_UseNone;
int XkbIgnoreExtension(int);
MACRO_XkbRepeatKeysMask XkbIgnoreGroupLockMask;
MACRO_XkbRepeatKeysMask XkbIgnoreLockModsMask;
char *XkbIndentText(unsigned int);
MACRO_XkbUnknownDoodad XkbIndicatorDoodad;
MACRO_XkbClientMapMask XkbIndicatorMapMask;
MACRO_XkbNewKeyboardNotify XkbIndicatorMapNotify;
MACRO_XkbNewKeyboardNotifyMask XkbIndicatorMapNotifyMask;
MACRO_XkbKeycodesNameMask XkbIndicatorNamesMask;
MACRO_XkbNewKeyboardNotify XkbIndicatorStateNotify;
MACRO_XkbNewKeyboardNotifyMask XkbIndicatorStateNotifyMask;
void XkbInitAtoms(Display *);
int XkbInitCanonicalKeyTypes(XkbDescPtr, unsigned int, int);
Atom XkbInternAtom(Display *, char *, int);
MACRO_XkbRepeatKeysMask XkbInternalModsMask;
MACRO_XkbKB XkbKB_Default;
MACRO_XkbKB_Lock XkbKB_Lock;
MACRO_XkbKB XkbKB_OpMask;
MACRO_XkbKB_Lock XkbKB_Overlay1;
MACRO_XkbKB_Lock XkbKB_Overlay2;
MACRO_XkbKB XkbKB_Permanent;
MACRO_XkbKB_Lock XkbKB_RGAllowNone;
MACRO_XkbKB_Lock XkbKB_RadioGroup;
MACRO_XkbKeycodesNameMask XkbKTLevelNamesMask;
MACRO_XkbKeyTypesMask XkbKeyActionsMask;
MACRO_XkbKeycodesNameMask XkbKeyAliasesMask;
MACRO_XkbKeyTypesMask XkbKeyBehaviorsMask;
MACRO_XkbKeyNameLength XkbKeyNameLength;
char *XkbKeyNameText(char *, unsigned int);
MACRO_XkbKeycodesNameMask XkbKeyNamesMask;
MACRO_XkbKeyTypesMask XkbKeySymsMask;
MACRO_XkbKeycodesNameMask XkbKeyTypeNamesMask;
int XkbKeyTypesForCoreSymbols(XkbDescPtr, int, KeySym *, unsigned int, int *, KeySym *);
MACRO_XkbKeyTypesMask XkbKeyTypesMask;
MACRO_XkbKeyboard XkbKeyboard;
KeySym XkbKeycodeToKeysym(Display *, unsigned int, int, int);
MACRO_XkbKeycodesNameMask XkbKeycodesNameMask;
MACRO_XkbOneLevelIndex XkbKeypadIndex;
MACRO_XkbOneLevelMask XkbKeypadMask;
char *XkbKeysymText(KeySym, unsigned int);
unsigned int XkbKeysymToModifiers(Display *, KeySym);
MACRO_XkbLC_ForceLatin1Lookup XkbLC_AllComposeControls;
MACRO_XkbLC_ForceLatin1Lookup XkbLC_AllControls;
MACRO_XkbLC XkbLC_AlphanumericKeys;
MACRO_XkbLC XkbLC_AlternateGroup;
MACRO_XkbLC_ForceLatin1Lookup XkbLC_AlwaysConsumeShiftAndLock;
MACRO_XkbLC_ForceLatin1Lookup XkbLC_BeepOnComposeFail;
MACRO_XkbLC_ForceLatin1Lookup XkbLC_ComposeLED;
MACRO_XkbLC_ForceLatin1Lookup XkbLC_ConsumeKeysOnComposeFail;
MACRO_XkbLC_ForceLatin1Lookup XkbLC_ConsumeLookupMods;
MACRO_XkbLC_ForceLatin1Lookup XkbLC_ControlFallback;
MACRO_XkbLC XkbLC_Default;
MACRO_XkbLC_ForceLatin1Lookup XkbLC_ForceLatin1Lookup;
MACRO_XkbLC XkbLC_FunctionKeys;
MACRO_XkbLC XkbLC_Hidden;
MACRO_XkbLC_ForceLatin1Lookup XkbLC_IgnoreNewKeyboards;
MACRO_XkbLC XkbLC_KeypadKeys;
MACRO_XkbLC XkbLC_ModifierKeys;
MACRO_XkbLC XkbLC_Partial;
MACRO_XkbLastRequiredType XkbLastRequiredType;
int XkbLatchGroup(Display *, unsigned int, unsigned int);
int XkbLatchModifiers(Display *, unsigned int, unsigned int, unsigned int);
int XkbLibraryVersion(int *, int *);
XkbComponentListPtr XkbListComponents(Display *, unsigned int, XkbComponentNamesPtr, int *);
int XkbLockGroup(Display *, unsigned int, unsigned int);
int XkbLockModifiers(Display *, unsigned int, unsigned int, unsigned int);
MACRO_XkbUnknownDoodad XkbLogoDoodad;
int XkbLookupCanonicalRGBColor(char *, XColor *);
int XkbLookupGroupAndLevel(XkbDescPtr, int, int *, int *, int *);
int XkbLookupKeyBinding(Display *, KeySym, unsigned int, char *, int, int *);
int XkbLookupKeySym(Display *, KeyCode, unsigned int, unsigned int *, KeySym *);
MACRO_XkbModifierStateMask XkbLookupModsMask;
MACRO_XkbMajorVersion XkbMajorVersion;
MACRO_XkbMapDefined XkbMapDefined;
MACRO_XkbNewKeyboardNotify XkbMapNotify;
MACRO_XkbNewKeyboardNotifyMask XkbMapNotifyMask;
MACRO_XkbMapPending XkbMapPending;
MACRO_XkbMaxKbdGroup XkbMaxKbdGroup;
MACRO_XkbMaxKeyCount XkbMaxKeyCount;
MACRO_XkbLastRequiredType XkbMaxKeyTypes;
MACRO_XkbMinLegalKeyCode XkbMaxLegalKeyCode;
MACRO_XkbMaxKbdGroup XkbMaxMouseKeysBtn;
MACRO_XkbMaxRadioGroups XkbMaxRadioGroups;
MACRO_XkbKeyNameLength XkbMaxRedirectCount;
MACRO_XkbMaxShiftLevel XkbMaxShiftLevel;
MACRO_XkbMaxShiftLevel XkbMaxSymsPerKey;
MACRO_XkbXKMFile XkbMessage;
MACRO_XkbMinLegalKeyCode XkbMinLegalKeyCode;
MACRO_XkbMinorVersion XkbMinorVersion;
char *XkbModIndexText(unsigned int, unsigned int);
char *XkbModMaskText(unsigned int, unsigned int);
MACRO_XkbModifierStateMask XkbModifierBaseMask;
MACRO_XkbModifierStateMask XkbModifierLatchMask;
MACRO_XkbModifierStateMask XkbModifierLockMask;
MACRO_XkbKeyTypesMask XkbModifierMapMask;
MACRO_XkbModifierStateMask XkbModifierStateMask;
MACRO_XkbRepeatKeysMask XkbMouseKeysAccelMask;
MACRO_XkbRepeatKeysMask XkbMouseKeysMask;
char *XkbNKNDetailMaskText(unsigned int, unsigned int);
MACRO_XkbNKN XkbNKN_DeviceIDMask;
MACRO_XkbNKN XkbNKN_GeometryMask;
MACRO_XkbNKN XkbNKN_KeycodesMask;
int XkbNameMatchesPattern(char *, char *);
MACRO_XkbClientMapMask XkbNamesMask;
MACRO_XkbNewKeyboardNotify XkbNamesNotify;
MACRO_XkbNewKeyboardNotifyMask XkbNamesNotifyMask;
MACRO_XkbNewKeyboardNotify XkbNewKeyboardNotify;
MACRO_XkbNewKeyboardNotifyMask XkbNewKeyboardNotifyMask;
MACRO_XkbNoIndicator XkbNoIndicator;
MACRO_XkbNoModifier XkbNoModifier;
MACRO_XkbNoModifierMask XkbNoModifierMask;
MACRO_XkbNoShape XkbNoShape;
MACRO_XkbNoShiftLevel XkbNoShiftLevel;
void XkbNoteControlsChanges(XkbControlsChangesPtr, XkbControlsNotifyEvent *, unsigned int);
void XkbNoteDeviceChanges(XkbDeviceChangesPtr, XkbExtensionDeviceNotifyEvent *, unsigned int);
void XkbNoteMapChanges(XkbMapChangesPtr, XkbMapNotifyEvent *, unsigned int);
void XkbNoteNameChanges(XkbNameChangesPtr, XkbNamesNotifyEvent *, unsigned int);
MACRO_XkbNumModifiers XkbNumIndicators;
MACRO_XkbNumKbdGroups XkbNumKbdGroups;
MACRO_XkbNumModifiers XkbNumModifiers;
MACRO_XkbLastRequiredType XkbNumRequiredTypes;
MACRO_XkbNumModifiers XkbNumVirtualMods;
MACRO_XkbKeyboard XkbNumberErrors;
MACRO_XkbEventCode XkbNumberEvents;
MACRO_XkbOD XkbOD_BadLibraryVersion;
MACRO_XkbOD XkbOD_BadServerVersion;
MACRO_XkbOD XkbOD_ConnectionRefused;
MACRO_XkbOD XkbOD_NonXkbServer;
MACRO_XkbOD XkbOD_Success;
MACRO_XkbOneLevelIndex XkbOneLevelIndex;
MACRO_XkbOneLevelMask XkbOneLevelMask;
Display *XkbOpenDisplay(char *, int *, int *, int *, int *, int *);
MACRO_XkbUnknownDoodad XkbOutlineDoodad;
MACRO_XkbRepeatKeysMask XkbOverlay1Mask;
MACRO_XkbRepeatKeysMask XkbOverlay2Mask;
MACRO_XkbPCF XkbPCF_AllFlagsMask;
MACRO_XkbPCF XkbPCF_AutoResetControlsMask;
MACRO_XkbPCF XkbPCF_DetectableAutoRepeatMask;
MACRO_XkbPCF XkbPCF_GrabsUseXKBStateMask;
MACRO_XkbPCF XkbPCF_LookupStateWhenGrabbed;
MACRO_XkbPCF XkbPCF_SendEventUsesXKBState;
MACRO_XkbPerKeyBitArraySize XkbPerKeyBitArraySize;
MACRO_XkbRepeatKeysMask XkbPerKeyRepeatMask;
MACRO_XkbKeycodesNameMask XkbPhysSymbolsNameMask;
MACRO_XkbModifierStateMask XkbPointerButtonMask;
int XkbQueryExtension(Display *, int *, int *, int *, int *, int *);
XkbRF_RulePtr XkbRF_AddRule(XkbRF_RulesPtr);
XkbRF_VarDescPtr XkbRF_AddVarDesc(XkbRF_DescribeVarsPtr);
XkbRF_VarDescPtr XkbRF_AddVarDescCopy(XkbRF_DescribeVarsPtr, XkbRF_VarDescPtr);
XkbRF_DescribeVarsPtr XkbRF_AddVarToDescribe(XkbRF_RulesPtr, char *);
MACRO__XKBRULES XkbRF_Append;
int XkbRF_ApplyPartialMatches(XkbRF_RulesPtr, XkbComponentNamesPtr);
int XkbRF_ApplyRule(XkbRF_RulePtr, XkbComponentNamesPtr);
void XkbRF_CheckApplyDelayedRules(XkbRF_RulesPtr, XkbRF_VarDefsPtr, XkbComponentNamesPtr);
int XkbRF_CheckApplyRule(XkbRF_RulePtr, XkbRF_VarDefsPtr, XkbComponentNamesPtr);
int XkbRF_CheckApplyRules(XkbRF_RulesPtr, XkbRF_VarDefsPtr, XkbComponentNamesPtr);
void XkbRF_ClearPartialMatches(XkbRF_RulesPtr);
XkbRF_RulesPtr XkbRF_Create(int, int);
MACRO__XKBRULES XkbRF_Delayed;
void XkbRF_Free(XkbRF_RulesPtr, int);
int XkbRF_GetComponents(XkbRF_RulesPtr, XkbRF_VarDefsPtr, XkbComponentNamesPtr);
int XkbRF_GetNamesProp(Display *, char **, XkbRF_VarDefsPtr);
MACRO__XKBRULES XkbRF_Invalid;
XkbRF_RulesPtr XkbRF_Load(char *, char *, int, int);
int XkbRF_LoadDescriptions(FILE *, XkbRF_RulesPtr);
int XkbRF_LoadDescriptionsByName(char *, char *, XkbRF_RulesPtr);
int XkbRF_LoadRules(FILE *, XkbRF_RulesPtr);
int XkbRF_LoadRulesByName(char *, char *, XkbRF_RulesPtr);
MACRO__XKBRULES XkbRF_PendingMatch;
int XkbRF_SetNamesProp(Display *, char *, XkbRF_VarDefsPtr);
char *XkbRF_SubstituteVars(char *, XkbRF_VarDefsPtr);
MACRO_XkbRGMaxMembers XkbRGMaxMembers;
MACRO_XkbKeycodesNameMask XkbRGNamesMask;
unsigned int XkbReadFromServer(Display *, unsigned int, unsigned int, XkbFileInfo *);
MACRO_XkbWrapIntoRange XkbRedirectIntoRange;
int XkbRefreshKeyboardMapping(XkbMapNotifyEvent *);
MACRO_XkbRepeatKeysMask XkbRepeatKeysMask;
int XkbResizeDeviceButtonActions(XkbDeviceInfoPtr, unsigned int);
XkbAction *XkbResizeKeyActions(XkbDescPtr, int, int);
KeySym *XkbResizeKeySyms(XkbDescPtr, int, int);
int XkbResizeKeyType(XkbDescPtr, int, int, int, int);
MACRO_XkbSA_NoAction XkbSA_ActionMessage;
MACRO_XkbSA_AffectDfltBtn XkbSA_AffectDfltBtn;
MACRO_XkbSA_LastAction XkbSA_BreakLatch;
MACRO_XkbSA XkbSA_ClearLocks;
MACRO_XkbSA_NoAction XkbSA_DeviceBtn;
MACRO_XkbSA_NoAction XkbSA_DeviceValuator;
MACRO_XkbSA_AffectDfltBtn XkbSA_DfltBtnAbsolute;
MACRO_XkbSA_GroupAbsolute XkbSA_GroupAbsolute;
MACRO_XkbSA_ISOAffectMask XkbSA_ISOAffectMask;
MACRO_XkbSA_NoAcceleration XkbSA_ISODfltIsGroup;
MACRO_XkbSA_NoAction XkbSA_ISOLock;
MACRO_XkbSA_ISONoAffectMods XkbSA_ISONoAffectCtrls;
MACRO_XkbSA_ISONoAffectMods XkbSA_ISONoAffectGroup;
MACRO_XkbSA_ISONoAffectMods XkbSA_ISONoAffectMods;
MACRO_XkbSA_ISONoAffectMods XkbSA_ISONoAffectPtr;
MACRO_XkbSA_IgnoreVal XkbSA_IgnoreVal;
MACRO_XkbSA_LastAction XkbSA_LastAction;
MACRO_XkbSA_NoAction XkbSA_LatchGroup;
MACRO_XkbSA_NoAction XkbSA_LatchMods;
MACRO_XkbSA XkbSA_LatchToLock;
MACRO_XkbSA_NoAction XkbSA_LockControls;
MACRO_XkbSA_NoAction XkbSA_LockDeviceBtn;
MACRO_XkbSA_NoAction XkbSA_LockGroup;
MACRO_XkbSA_NoAction XkbSA_LockMods;
MACRO_XkbSA_LockNoLock XkbSA_LockNoLock;
MACRO_XkbSA_LockNoLock XkbSA_LockNoUnlock;
MACRO_XkbSA_NoAction XkbSA_LockPtrBtn;
MACRO_XkbSA_MessageOnRelease XkbSA_MessageGenKeyEvent;
MACRO_XkbSA_ISOAffectMask XkbSA_MessageOnPress;
MACRO_XkbSA_MessageOnRelease XkbSA_MessageOnRelease;
MACRO_XkbSA_NoAcceleration XkbSA_MoveAbsoluteX;
MACRO_XkbSA_NoAcceleration XkbSA_MoveAbsoluteY;
MACRO_XkbSA_NoAction XkbSA_MovePtr;
MACRO_XkbSA_NoAcceleration XkbSA_NoAcceleration;
MACRO_XkbSA_NoAction XkbSA_NoAction;
MACRO_XkbSA_LastAction XkbSA_NumActions;
MACRO_XkbSA_NoAction XkbSA_PtrBtn;
MACRO_XkbSA_NoAction XkbSA_RedirectKey;
MACRO_XkbSA_NoAction XkbSA_SetControls;
MACRO_XkbSA_NoAction XkbSA_SetGroup;
MACRO_XkbSA_NoAction XkbSA_SetMods;
MACRO_XkbSA_NoAction XkbSA_SetPtrDflt;
MACRO_XkbSA_IgnoreVal XkbSA_SetValAbsolute;
MACRO_XkbSA_IgnoreVal XkbSA_SetValCenter;
MACRO_XkbSA_IgnoreVal XkbSA_SetValMax;
MACRO_XkbSA_IgnoreVal XkbSA_SetValMin;
MACRO_XkbSA_IgnoreVal XkbSA_SetValRelative;
MACRO_XkbSA_SwitchApplication XkbSA_SwitchAbsolute;
MACRO_XkbSA_SwitchApplication XkbSA_SwitchApplication;
MACRO_XkbSA_NoAction XkbSA_SwitchScreen;
MACRO_XkbSA_NoAction XkbSA_Terminate;
MACRO_XkbSA_GroupAbsolute XkbSA_UseDfltButton;
MACRO_XkbSA_LockNoLock XkbSA_UseModMapMods;
MACRO_XkbSA_IgnoreVal XkbSA_ValOpMask;
MACRO_XkbSA_ValScaleMask XkbSA_ValScaleMask;
char *XkbSIMatchText(unsigned int, unsigned int);
MACRO_XkbSI_AnyOfOrNone XkbSI_AllOf;
MACRO_XkbSI_AnyOfOrNone XkbSI_AnyOf;
MACRO_XkbSI_AnyOfOrNone XkbSI_AnyOfOrNone;
MACRO_XkbSI XkbSI_AutoRepeat;
MACRO_XkbSI_AnyOfOrNone XkbSI_Exactly;
MACRO_XkbSI XkbSI_LevelOneOnly;
MACRO_XkbSI XkbSI_LockingKey;
MACRO_XkbSI_OpMask XkbSI_NoneOf;
MACRO_XkbSI_OpMask XkbSI_OpMask;
int XkbSelectEventDetails(Display *, unsigned int, unsigned int, unsigned __int64, unsigned __int64);
int XkbSelectEvents(Display *, unsigned int, unsigned int, unsigned int);
MACRO_XkbClientMapMask XkbServerMapMask;
void XkbSetAtomFuncs(XkbInternAtomFunc, XkbGetAtomNameFunc);
int XkbSetAutoRepeatRate(Display *, unsigned int, unsigned int, unsigned int);
int XkbSetAutoResetControls(Display *, unsigned int, unsigned int *, unsigned int *);
int XkbSetCompatMap(Display *, unsigned int, XkbDescPtr, int);
int XkbSetControls(Display *, unsigned __int64, XkbDescPtr);
int XkbSetDebuggingFlags(Display *, unsigned int, unsigned int, char *, unsigned int, unsigned int, unsigned int *, unsigned int *);
int XkbSetDetectableAutoRepeat(Display *, int, int *);
int XkbSetDeviceButtonActions(Display *, XkbDeviceInfoPtr, unsigned int, unsigned int);
int XkbSetDeviceInfo(Display *, unsigned int, XkbDeviceInfoPtr);
int XkbSetDeviceLedInfo(Display *, XkbDeviceInfoPtr, unsigned int, unsigned int, unsigned int);
int XkbSetIgnoreLockMods(Display *, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int);
int XkbSetIndicatorMap(Display *, unsigned __int64, XkbDescPtr);
int XkbSetMap(Display *, unsigned int, XkbDescPtr);
MACRO_XkbSetMapResizeTypes XkbSetMapAllFlags;
MACRO_XkbSetMapResizeTypes XkbSetMapRecomputeActions;
MACRO_XkbSetMapResizeTypes XkbSetMapResizeTypes;
int XkbSetNamedDeviceIndicator(Display *, unsigned int, unsigned int, unsigned int, Atom, int, int, int, XkbIndicatorMapPtr);
int XkbSetNamedIndicator(Display *, Atom, int, int, int, XkbIndicatorMapPtr);
int XkbSetNames(Display *, unsigned int, unsigned int, unsigned int, XkbDescPtr);
int XkbSetPerClientControls(Display *, unsigned int, unsigned int *);
int XkbSetServerInternalMods(Display *, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int);
unsigned int XkbSetXlibControls(Display *, unsigned int, unsigned int);
MACRO_XkbRepeatKeysMask XkbSlowKeysMask;
MACRO_XkbUnknownDoodad XkbSolidDoodad;
MACRO_XkbMapDefined XkbStateDefined;
MACRO_XkbNewKeyboardNotify XkbStateNotify;
MACRO_XkbNewKeyboardNotifyMask XkbStateNotifyMask;
int XkbStdBell(Display *, Window, int, int);
int XkbStdBellEvent(Display *, Window, int, int);
MACRO_XkbRepeatKeysMask XkbStickyKeysMask;
char *XkbStringText(char *, unsigned int);
MACRO_XkbSymInterpMask XkbSymInterpMask;
MACRO_XkbKeycodesNameMask XkbSymbolsNameMask;
MACRO_XkbUnknownDoodad XkbTextDoodad;
char XkbToControl(char);
int XkbTranslateKeyCode(XkbDescPtr, KeyCode, unsigned int, unsigned int *, KeySym *);
int XkbTranslateKeySym(Display *, KeySym *, unsigned int, char *, int, int *);
MACRO_XkbOneLevelIndex XkbTwoLevelIndex;
MACRO_XkbOneLevelMask XkbTwoLevelMask;
MACRO_XkbKeycodesNameMask XkbTypesNameMask;
MACRO_XkbUnknownDoodad XkbUnknownDoodad;
int XkbUpdateMapFromCore(XkbDescPtr, KeyCode, int, int, KeySym *, XkbChangesPtr);
MACRO_XkbUseCoreKbd XkbUseCoreKbd;
MACRO_XkbUseCoreKbd XkbUseCorePtr;
int XkbUseExtension(Display *, int *, int *);
char *XkbVModIndexText(Display *, XkbDescPtr, unsigned int, unsigned int);
char *XkbVModMaskText(Display *, XkbDescPtr, unsigned int, unsigned int, unsigned int);
MACRO_XkbKeyTypesMask XkbVirtualModMapMask;
MACRO_XkbKeycodesNameMask XkbVirtualModNamesMask;
MACRO_XkbKeyTypesMask XkbVirtualModsMask;
int XkbVirtualModsToReal(XkbDescPtr, unsigned int, unsigned int *);
MACRO_XkbWrapIntoRange XkbWrapIntoRange;
int XkbWriteCFile(FILE *, char *, XkbFileInfo *);
int XkbWriteToServer(XkbFileInfo *);
int XkbWriteXKBCompatMap(FILE *, XkbFileInfo *, int, int, XkbFileAddOnFunc, void *);
int XkbWriteXKBFile(FILE *, XkbFileInfo *, int, XkbFileAddOnFunc, void *);
int XkbWriteXKBGeometry(FILE *, XkbFileInfo *, int, int, XkbFileAddOnFunc, void *);
int XkbWriteXKBKeyTypes(FILE *, XkbFileInfo *, int, int, XkbFileAddOnFunc, void *);
int XkbWriteXKBKeycodes(FILE *, XkbFileInfo *, int, int, XkbFileAddOnFunc, void *);
int XkbWriteXKBKeymap(FILE *, XkbFileInfo *, int, int, XkbFileAddOnFunc, void *);
int XkbWriteXKBKeymapForNames(FILE *, XkbComponentNamesPtr, Display *, XkbDescPtr, unsigned int, unsigned int);
int XkbWriteXKBLayout(FILE *, XkbFileInfo *, int, int, XkbFileAddOnFunc, void *);
int XkbWriteXKBSemantics(FILE *, XkbFileInfo *, int, int, XkbFileAddOnFunc, void *);
int XkbWriteXKBSymbols(FILE *, XkbFileInfo *, int, int, XkbFileAddOnFunc, void *);
int XkbWriteXKMFile(FILE *, XkbFileInfo *);
MACRO_XkbUseCoreKbd XkbXINone;
MACRO_XkbXI_AllDeviceFeaturesMask XkbXI_AllDeviceFeaturesMask;
MACRO_XkbXI_AllFeaturesMask XkbXI_AllFeaturesMask;
MACRO_XkbXI XkbXI_ButtonActionsMask;
MACRO_XkbXI XkbXI_IndicatorMapsMask;
MACRO_XkbXI XkbXI_IndicatorNamesMask;
MACRO_XkbXI XkbXI_IndicatorStateMask;
MACRO_XkbXI_IndicatorsMask XkbXI_IndicatorsMask;
MACRO_XkbXI XkbXI_KeyboardsMask;
MACRO_XkbXI XkbXI_UnsupportedFeatureMask;
MACRO_XkbXKMFile XkbXKBFile;
MACRO_XkbXKMFile XkbXKMFile;
MACRO_XkbMapPending XkbXlibNewKeyboard;
MACRO_XkmAllIndicesMask XkmAllIndicesMask;
MACRO_XkmTypesIndex XkmCompatMapIndex;
MACRO_XkmTypesMask XkmCompatMapMask;
MACRO_XKM XkmFileVersion;
MACRO_XkmSemanticsFile XkmGeometryFile;
MACRO_XkmTypesIndex XkmGeometryIndex;
MACRO_XkmTypesMask XkmGeometryMask;
MACRO_XKM XkmIllegalFile;
MACRO_XkmTypesIndex XkmIndicatorsIndex;
MACRO_XkmTypesMask XkmIndicatorsMask;
MACRO_XkmKeyHasGroup1Type XkmKeyHasActions;
MACRO_XkmKeyHasGroup1Type XkmKeyHasBehavior;
MACRO_XkmKeyHasGroup1Type XkmKeyHasGroup1Type;
MACRO_XkmKeyHasGroup1Type XkmKeyHasGroup2Type;
MACRO_XkmKeyHasGroup1Type XkmKeyHasGroup3Type;
MACRO_XkmKeyHasGroup1Type XkmKeyHasGroup4Type;
MACRO_sz_xkmBehaviorDesc XkmKeyHasTypes;
MACRO_XkmTypesIndex XkmKeyNamesIndex;
MACRO_XkmTypesMask XkmKeyNamesMask;
MACRO_XkmSemanticsFile XkmKeymapFile;
MACRO_XkmKeymapRequired XkmKeymapLegal;
MACRO_XkmKeymapRequired XkmKeymapOptional;
MACRO_XkmKeymapRequired XkmKeymapRequired;
MACRO_XkmLastIndex XkmLastIndex;
MACRO_XkmSemanticsFile XkmLayoutFile;
MACRO_XkmLayoutRequired XkmLayoutLegal;
MACRO_XkmLayoutRequired XkmLayoutOptional;
MACRO_XkmLayoutRequired XkmLayoutRequired;
MACRO_XkmTypesMask XkmLegalIndexMask;
MACRO_XkmKeyHasGroup1Type XkmNonRepeatingKey;
int XkmProbe(FILE *);
unsigned int XkmReadFile(FILE *, unsigned int, unsigned int, XkbFileInfo *);
MACRO_XkmKeyHasGroup1Type XkmRepeatingKey;
MACRO_XkmSemanticsFile XkmSemanticsFile;
MACRO_XkmSemanticsRequired XkmSemanticsLegal;
MACRO_XkmSemanticsRequired XkmSemanticsOptional;
MACRO_XkmSemanticsRequired XkmSemanticsRequired;
MACRO_XkmTypesIndex XkmSymbolsIndex;
MACRO_XkmTypesMask XkmSymbolsMask;
MACRO_XkmTypesIndex XkmTypesIndex;
MACRO_XkmTypesMask XkmTypesMask;
MACRO_XkmTypesIndex XkmVirtualModsIndex;
MACRO_XkmTypesMask XkmVirtualModsMask;
MACRO_XlibSpecificationRelease XlibSpecificationRelease;
$D57089EDE54FD93EA7906B88CC189786 Xm1000TH_INCHES;
$D57089EDE54FD93EA7906B88CC189786 Xm100TH_FONT_UNITS;
$D57089EDE54FD93EA7906B88CC189786 Xm100TH_MILLIMETERS;
$D57089EDE54FD93EA7906B88CC189786 Xm100TH_POINTS;
MACRO_Xm3D Xm3D_ENHANCE_PIXEL;
$A8D0F53DAD5F2C5279C43A82FD30866F XmABOVE;
MACRO_XmNO XmACTIVATE_EVENT;
MACRO_XmADD XmADD;
MACRO_XmINITIAL XmADDITION;
$B20E073856E03551C4B45F4AB360DDE0 XmALIGNMENT_BASELINE_BOTTOM;
$B20E073856E03551C4B45F4AB360DDE0 XmALIGNMENT_BASELINE_TOP;
$6433742F7159E2D9C73691EBE15B918D XmALIGNMENT_BEGINNING;
$6433742F7159E2D9C73691EBE15B918D XmALIGNMENT_CENTER;
$51029A804AB5230DF66495289C243640 XmALIGNMENT_CONTENTS_BOTTOM;
$51029A804AB5230DF66495289C243640 XmALIGNMENT_CONTENTS_TOP;
$6433742F7159E2D9C73691EBE15B918D XmALIGNMENT_END;
$B20E073856E03551C4B45F4AB360DDE0 XmALIGNMENT_WIDGET_BOTTOM;
$B20E073856E03551C4B45F4AB360DDE0 XmALIGNMENT_WIDGET_TOP;
MACRO_XmNO XmALL_EVENT;
$4645114C080423A315BE3A0EE193A9B2 XmAPPLICATION_DEFINED;
MACRO_XmNO XmARM_EVENT;
$F1BD9F0A1A3AD97A054FAC600A5CBCD3 XmARROW_BUTTON_BIT;
$F1BD9F0A1A3AD97A054FAC600A5CBCD3 XmARROW_BUTTON_GADGET_BIT;
$3117C89E8107AE9270BADC6F61C8CFBE XmARROW_DOWN;
$3117C89E8107AE9270BADC6F61C8CFBE XmARROW_LEFT;
$3117C89E8107AE9270BADC6F61C8CFBE XmARROW_RIGHT;
$3117C89E8107AE9270BADC6F61C8CFBE XmARROW_UP;
$C7AEFA5450A6E3B6EAAFAEEC8106EDCC XmAS_NEEDED;
$69B919E8893968F0F88511FED2EFE8F8 XmATTACH_CENTER;
$69B919E8893968F0F88511FED2EFE8F8 XmATTACH_EAST;
$8ACB7C61C0AD89FF227C23D1B4598563 XmATTACH_FORM;
$69B919E8893968F0F88511FED2EFE8F8 XmATTACH_HOT;
$8ACB7C61C0AD89FF227C23D1B4598563 XmATTACH_NONE;
$69B919E8893968F0F88511FED2EFE8F8 XmATTACH_NORTH;
$69B919E8893968F0F88511FED2EFE8F8 XmATTACH_NORTH_EAST;
$69B919E8893968F0F88511FED2EFE8F8 XmATTACH_NORTH_WEST;
$8ACB7C61C0AD89FF227C23D1B4598563 XmATTACH_OPPOSITE_FORM;
$8ACB7C61C0AD89FF227C23D1B4598563 XmATTACH_OPPOSITE_WIDGET;
$8ACB7C61C0AD89FF227C23D1B4598563 XmATTACH_POSITION;
$8ACB7C61C0AD89FF227C23D1B4598563 XmATTACH_SELF;
$69B919E8893968F0F88511FED2EFE8F8 XmATTACH_SOUTH;
$69B919E8893968F0F88511FED2EFE8F8 XmATTACH_SOUTH_EAST;
$69B919E8893968F0F88511FED2EFE8F8 XmATTACH_SOUTH_WEST;
$69B919E8893968F0F88511FED2EFE8F8 XmATTACH_WEST;
$8ACB7C61C0AD89FF227C23D1B4598563 XmATTACH_WIDGET;
$4645114C080423A315BE3A0EE193A9B2 XmAUTOMATIC;
void XmActivateProtocol(Widget shell, Atom property, Atom proto_atom);
void XmAddProtocolCallback(Widget shell, Atom property, Atom proto_atom, XtCallbackProc callback, XtPointer closure);
void XmAddProtocols(Widget shell, Atom property, Atom *protocols, Cardinal num_protocols);
void XmAddTabGroup(Widget tabGroup);
void XmAddToPostFromList(Widget menu_wid, Widget widget);
MACRO_TopLevelShellIndex XmApplicationShellIndex;
MACRO_XmArrowBGIndex XmArrowBGIndex;
MACRO_XmArrowBIndex XmArrowBIndex;
MACRO_XmArrowButtonGadgetIndex XmArrowButtonGadgetIndex;
MACRO_XmArrowButtonIndex XmArrowButtonIndex;
MACRO_XmBACKGROUND XmBACKGROUND;
$859212F894AD081D1D25ADC4B1130DC3 XmBASELINE_GET;
$859212F894AD081D1D25ADC4B1130DC3 XmBASELINE_SET;
MACRO_XmNO XmBDRAG_EVENT;
$9E6EF2627F09602E7A6BA7313AAD8029 XmBELL;
$A8D0F53DAD5F2C5279C43A82FD30866F XmBELOW;
$9CF57B51EE7F5AA4F23AA2AD25F2CCDA XmBLEND_ALL;
$9CF57B51EE7F5AA4F23AA2AD25F2CCDA XmBLEND_JUST_SOURCE;
$9CF57B51EE7F5AA4F23AA2AD25F2CCDA XmBLEND_NONE;
$9CF57B51EE7F5AA4F23AA2AD25F2CCDA XmBLEND_STATE_SOURCE;
MACRO_XmBOTTOM XmBOTTOM_LEFT;
MACRO_XmBOTTOM_RIGHT XmBOTTOM_RIGHT;
MACRO_XmBACKGROUND XmBOTTOM_SHADOW;
$AEA1FBBE7726CEC77267A27B4B646D95 XmBROWSE_SELECT;
$F1BD9F0A1A3AD97A054FAC600A5CBCD3 XmBULLETIN_BOARD_BIT;
$D06503B10BF0E4ACB2E829F55AF9893F XmBUTTON_FONTLIST;
MACRO_XmBaseClassExtVersion XmBaseClassExtVersion;
MACRO_XmToggleButtonGadgetIndex XmBulletinBIndex;
MACRO_XmBulletinBoardIndex XmBulletinBoardIndex;
$BE043CC66BC9A68312F52FD64117B1F0 XmCACHE_EXTENSION;
$273F9245AF4031A58D8B6B8D9D4CC35E XmCASCADEBUTTON;
$F1BD9F0A1A3AD97A054FAC600A5CBCD3 XmCASCADE_BUTTON_BIT;
$F1BD9F0A1A3AD97A054FAC600A5CBCD3 XmCASCADE_BUTTON_GADGET_BIT;
MACRO_XmCBG XmCBG_ARMED_BIT;
MACRO_XmCBG XmCBG_TRAVERSE_BIT;
MACRO_XmCB XmCB_ARMED_BIT;
MACRO_XmCB XmCB_TRAVERSE_BIT;
$E79595227F6BDA2C423673671FC4E348 XmCHANGE_ALL;
$E79595227F6BDA2C423673671FC4E348 XmCHANGE_HEIGHT;
$E79595227F6BDA2C423673671FC4E348 XmCHANGE_NONE;
$E79595227F6BDA2C423673671FC4E348 XmCHANGE_WIDTH;
$F1BD9F0A1A3AD97A054FAC600A5CBCD3 XmCLIP_WINDOW_BIT;
$33979EF12F27A31BA16073A8A9087BAD XmCOMMAND_ABOVE_WORKSPACE;
$33979EF12F27A31BA16073A8A9087BAD XmCOMMAND_BELOW_WORKSPACE;
$F1BD9F0A1A3AD97A054FAC600A5CBCD3 XmCOMMAND_BOX_BIT;
$5619CCF50B7A6021E29EA9A230F1DFA1 XmCONSTANT;
$53D85B5D788E52D277529232F64946A1 XmCONTROL_NAVIGABLE;
MACRO_XmCOPY XmCOPY_FAILED;
MACRO_XmCOPY XmCOPY_SUCCEEDED;
MACRO_XmCOPY XmCOPY_TRUNCATED;
$3756B01F7090A8EC304464AC2079666C XmCR_ACTIVATE;
$3756B01F7090A8EC304464AC2079666C XmCR_APPLY;
$3756B01F7090A8EC304464AC2079666C XmCR_ARM;
$3756B01F7090A8EC304464AC2079666C XmCR_BROWSE_SELECT;
$3756B01F7090A8EC304464AC2079666C XmCR_CANCEL;
$3756B01F7090A8EC304464AC2079666C XmCR_CASCADING;
$3756B01F7090A8EC304464AC2079666C XmCR_CLIPBOARD_DATA_DELETE;
$3756B01F7090A8EC304464AC2079666C XmCR_CLIPBOARD_DATA_REQUEST;
$3756B01F7090A8EC304464AC2079666C XmCR_COMMAND_CHANGED;
$3756B01F7090A8EC304464AC2079666C XmCR_COMMAND_ENTERED;
$3756B01F7090A8EC304464AC2079666C XmCR_CREATE;
$3756B01F7090A8EC304464AC2079666C XmCR_DECREMENT;
$3756B01F7090A8EC304464AC2079666C XmCR_DEFAULT_ACTION;
$3756B01F7090A8EC304464AC2079666C XmCR_DISARM;
$3756B01F7090A8EC304464AC2079666C XmCR_DRAG;
$5082B94BDE211399AF6F85937D2B1C0A XmCR_DRAG_DROP_FINISH;
$5082B94BDE211399AF6F85937D2B1C0A XmCR_DRAG_MOTION;
$5082B94BDE211399AF6F85937D2B1C0A XmCR_DROP_FINISH;
MACRO_XmCR XmCR_DROP_MESSAGE;
$5082B94BDE211399AF6F85937D2B1C0A XmCR_DROP_SITE_ENTER;
MACRO_XmCR XmCR_DROP_SITE_ENTER_MESSAGE;
$5082B94BDE211399AF6F85937D2B1C0A XmCR_DROP_SITE_LEAVE;
MACRO_XmCR XmCR_DROP_SITE_LEAVE_MESSAGE;
MACRO_XmCR XmCR_DROP_SITE_MOTION_MESSAGE;
$5082B94BDE211399AF6F85937D2B1C0A XmCR_DROP_START;
$3756B01F7090A8EC304464AC2079666C XmCR_EXECUTE;
$3756B01F7090A8EC304464AC2079666C XmCR_EXPOSE;
$3756B01F7090A8EC304464AC2079666C XmCR_EXTENDED_SELECT;
$3756B01F7090A8EC304464AC2079666C XmCR_FOCUS;
$3756B01F7090A8EC304464AC2079666C XmCR_GAIN_PRIMARY;
$3756B01F7090A8EC304464AC2079666C XmCR_HELP;
$3756B01F7090A8EC304464AC2079666C XmCR_INCREMENT;
$3756B01F7090A8EC304464AC2079666C XmCR_INPUT;
$3756B01F7090A8EC304464AC2079666C XmCR_LOSE_PRIMARY;
$3756B01F7090A8EC304464AC2079666C XmCR_LOSING_FOCUS;
$3756B01F7090A8EC304464AC2079666C XmCR_MAP;
$3756B01F7090A8EC304464AC2079666C XmCR_MODIFYING_TEXT_VALUE;
$3756B01F7090A8EC304464AC2079666C XmCR_MOVING_INSERT_CURSOR;
$3756B01F7090A8EC304464AC2079666C XmCR_MULTIPLE_SELECT;
$3756B01F7090A8EC304464AC2079666C XmCR_NONE;
$3756B01F7090A8EC304464AC2079666C XmCR_NO_MATCH;
$3756B01F7090A8EC304464AC2079666C XmCR_OBSCURED_TRAVERSAL;
$3756B01F7090A8EC304464AC2079666C XmCR_OK;
$5082B94BDE211399AF6F85937D2B1C0A XmCR_OPERATION_CHANGED;
$3756B01F7090A8EC304464AC2079666C XmCR_PAGE_DECREMENT;
$3756B01F7090A8EC304464AC2079666C XmCR_PAGE_INCREMENT;
$3756B01F7090A8EC304464AC2079666C XmCR_PROTOCOLS;
$3756B01F7090A8EC304464AC2079666C XmCR_RESIZE;
$3756B01F7090A8EC304464AC2079666C XmCR_SINGLE_SELECT;
$3756B01F7090A8EC304464AC2079666C XmCR_TEAR_OFF_ACTIVATE;
$3756B01F7090A8EC304464AC2079666C XmCR_TEAR_OFF_DEACTIVATE;
$5082B94BDE211399AF6F85937D2B1C0A XmCR_TOP_LEVEL_ENTER;
$5082B94BDE211399AF6F85937D2B1C0A XmCR_TOP_LEVEL_LEAVE;
$3756B01F7090A8EC304464AC2079666C XmCR_TO_BOTTOM;
$3756B01F7090A8EC304464AC2079666C XmCR_TO_TOP;
$3756B01F7090A8EC304464AC2079666C XmCR_UNMAP;
$3756B01F7090A8EC304464AC2079666C XmCR_VALUE_CHANGED;
MACRO_XmCR_WM XmCR_WM_PROTOCOLS;
$2305C92ABFBD7FF576E80BDDBAD2E755 XmCURSOR;
MACRO_XmSeparatorGadgetIndex XmCascadeBGIndex;
MACRO_XmTextIndex XmCascadeBIndex;
void XmCascadeButtonGadgetHighlight(Widget wid, int highlight);
MACRO_XmCascadeButtonGadgetIndex XmCascadeButtonGadgetIndex;
void XmCascadeButtonHighlight(Widget cb, int highlight);
MACRO_XmCascadeButtonIndex XmCascadeButtonIndex;
void XmChangeColor(Widget widget, Pixel background);
MACRO_XmClipboardFail XmClipboardBadFormat;
int XmClipboardBeginCopy(Display *display, Window window, XmString label, Widget widget, VoidProc callback, __int64 *itemid);
int XmClipboardCancelCopy(Display *display, Window window, __int64 itemid);
int XmClipboardCopy(Display *display, Window window, __int64 itemid, char *format, XtPointer buffer, unsigned __int64 length, __int64 private_id, __int64 *dataid);
int XmClipboardCopyByName(Display *display, Window window, __int64 data, XtPointer buffer, unsigned __int64 length, __int64 private_id);
int XmClipboardEndCopy(Display *display, Window window, __int64 itemid);
int XmClipboardEndRetrieve(Display *display, Window window);
MACRO_XmClipboardFail XmClipboardFail;
int XmClipboardInquireCount(Display *display, Window window, int *count, unsigned __int64 *maxlength);
int XmClipboardInquireFormat(Display *display, Window window, int n, XtPointer buffer, unsigned __int64 bufferlength, unsigned __int64 *outlength);
int XmClipboardInquireLength(Display *display, Window window, char *format, unsigned __int64 *length);
int XmClipboardInquirePendingItems(Display *display, Window window, char *format, XmClipboardPendingList *list, unsigned __int64 *count);
int XmClipboardLock(Display *display, Window window);
MACRO_XmClipboardFail XmClipboardLocked;
MACRO_XmClipboardFail XmClipboardNoData;
int XmClipboardRegisterFormat(Display *display, char *format_name, int format_length);
int XmClipboardRetrieve(Display *display, Window window, char *format, XtPointer buffer, unsigned __int64 length, unsigned __int64 *outlength, __int64 *private_id);
int XmClipboardStartCopy(Display *display, Window window, XmString label, Time timestamp, Widget widget, XmCutPasteProc callback, __int64 *itemid);
int XmClipboardStartRetrieve(Display *display, Window window, Time timestamp);
MACRO_XmClipboardFail XmClipboardSuccess;
MACRO_XmClipboardFail XmClipboardTruncate;
int XmClipboardUndoCopy(Display *display, Window window);
int XmClipboardUnlock(Display *display, Window window, int all_levels);
int XmClipboardWithdrawFormat(Display *display, Window window, __int64 data);
void XmCommandAppendValue(Widget widget, XmString value);
void XmCommandError(Widget widget, XmString error);
Widget XmCommandGetChild(Widget widget, unsigned int child);
MACRO_XmMainWindowIndex XmCommandIndex;
void XmCommandSetValue(Widget widget, XmString value);
MACRO_CoreIndex XmCompositeIndex;
MACRO_CompositeIndex XmConstraintIndex;
int XmConvertUnits(Widget widget, int dimension, int from_type, int from_val, int to_type);
MACRO_XmCoreIndex XmCoreIndex;
Widget XmCreateArrowButton(Widget parent, char *name, ArgList arglist, Cardinal argcount);
Widget XmCreateArrowButtonGadget(Widget parent, char *name, ArgList arglist, Cardinal argcount);
Widget XmCreateBulletinBoard(Widget p, String name, ArgList args, Cardinal n);
Widget XmCreateBulletinBoardDialog(Widget ds_p, String name, ArgList bb_args, Cardinal bb_n);
Widget XmCreateCascadeButton(Widget parent, char *name, ArgList al, Cardinal ac);
Widget XmCreateCascadeButtonGadget(Widget parent, char *name, ArgList al, Cardinal ac);
Widget XmCreateCommand(Widget parent, String name, ArgList al, Cardinal ac);
Widget XmCreateCommandDialog(Widget ds_p, String name, ArgList fsb_args, Cardinal fsb_n);
Widget XmCreateDialogShell(Widget p, char *name, ArgList al, Cardinal ac);
Widget XmCreateDragIcon(Widget parent, String name, ArgList argList, Cardinal argCount);
Widget XmCreateDrawingArea(Widget p, String name, ArgList args, Cardinal n);
Widget XmCreateDrawnButton(Widget parent, char *name, ArgList arglist, Cardinal argcount);
Widget XmCreateErrorDialog(Widget parent, char *name, ArgList al, Cardinal ac);
Widget XmCreateFileSelectionBox(Widget p, String name, ArgList args, Cardinal n);
Widget XmCreateFileSelectionDialog(Widget ds_p, String name, ArgList fsb_args, Cardinal fsb_n);
Widget XmCreateForm(Widget parent, char *name, ArgList arglist, Cardinal argcount);
Widget XmCreateFormDialog(Widget parent, char *name, ArgList arglist, Cardinal argcount);
Widget XmCreateFrame(Widget parent, char *name, ArgList arglist, Cardinal argcount);
Widget XmCreateInformationDialog(Widget parent, char *name, ArgList al, Cardinal ac);
Widget XmCreateLabel(Widget parent, char *name, Arg *arglist, Cardinal argCount);
Widget XmCreateLabelGadget(Widget parent, char *name, Arg *arglist, Cardinal argCount);
Widget XmCreateList(Widget parent, char *name, ArgList args, Cardinal argCount);
Widget XmCreateMainWindow(Widget parent, char *name, ArgList args, Cardinal argCount);
Widget XmCreateMenuBar(Widget p, char *name, ArgList al, Cardinal ac);
Widget XmCreateMenuShell(Widget parent, char *name, ArgList al, Cardinal ac);
Widget XmCreateMessageBox(Widget parent, char *name, ArgList al, Cardinal ac);
Widget XmCreateMessageDialog(Widget parent, char *name, ArgList al, Cardinal ac);
Widget XmCreateOptionMenu(Widget p, char *name, ArgList al, Cardinal ac);
Widget XmCreatePanedWindow(Widget parent, char *name, ArgList args, Cardinal argCount);
Widget XmCreatePopupMenu(Widget p, char *name, ArgList al, Cardinal ac);
Widget XmCreatePromptDialog(Widget ds_p, String name, ArgList sb_args, Cardinal sb_n);
Widget XmCreatePulldownMenu(Widget p, char *name, ArgList al, Cardinal ac);
Widget XmCreatePushButton(Widget parent, char *name, ArgList arglist, Cardinal argcount);
Widget XmCreatePushButtonGadget(Widget parent, char *name, ArgList arglist, Cardinal argcount);
Widget XmCreateQuestionDialog(Widget parent, char *name, ArgList al, Cardinal ac);
Widget XmCreateRadioBox(Widget p, char *name, ArgList al, Cardinal ac);
Widget XmCreateRowColumn(Widget p, char *name, ArgList al, Cardinal ac);
Widget XmCreateScale(Widget parent, char *name, ArgList arglist, Cardinal argcount);
Widget XmCreateScrollBar(Widget parent, char *name, ArgList arglist, Cardinal argcount);
Widget XmCreateScrolledList(Widget parent, char *name, ArgList args, Cardinal argCount);
Widget XmCreateScrolledText(Widget parent, char *name, ArgList arglist, Cardinal argcount);
Widget XmCreateScrolledWindow(Widget parent, char *name, ArgList args, Cardinal argCount);
Widget XmCreateSelectionBox(Widget p, String name, ArgList args, Cardinal n);
Widget XmCreateSelectionDialog(Widget ds_p, String name, ArgList sb_args, Cardinal sb_n);
Widget XmCreateSeparator(Widget parent, char *name, ArgList arglist, Cardinal argcount);
Widget XmCreateSeparatorGadget(Widget parent, char *name, ArgList arglist, Cardinal argcount);
Widget XmCreateSimpleCheckBox(Widget parent, String name, ArgList args, Cardinal arg_count);
Widget XmCreateSimpleMenuBar(Widget parent, String name, ArgList args, Cardinal arg_count);
Widget XmCreateSimpleOptionMenu(Widget parent, String name, ArgList args, Cardinal arg_count);
Widget XmCreateSimplePopupMenu(Widget parent, String name, ArgList args, Cardinal arg_count);
Widget XmCreateSimplePulldownMenu(Widget parent, String name, ArgList args, Cardinal arg_count);
Widget XmCreateSimpleRadioBox(Widget parent, String name, ArgList args, Cardinal arg_count);
Widget XmCreateTemplateDialog(Widget parent, char *name, ArgList al, Cardinal ac);
Widget XmCreateText(Widget parent, char *name, ArgList arglist, Cardinal argcount);
Widget XmCreateTextField(Widget parent, char *name, ArgList arglist, Cardinal argcount);
Widget XmCreateToggleButton(Widget parent, char *name, Arg *arglist, Cardinal argCount);
Widget XmCreateToggleButtonGadget(Widget parent, char *name, Arg *arglist, Cardinal argCount);
Widget XmCreateWarningDialog(Widget parent, char *name, ArgList al, Cardinal ac);
Widget XmCreateWorkArea(Widget p, char *name, ArgList al, Cardinal ac);
Widget XmCreateWorkingDialog(Widget parent, char *name, ArgList al, Cardinal ac);
XmString XmCvtCTToXmString(char *text);
int XmCvtFromHorizontalPixels(Screen *screen, int from_val, int to_type);
int XmCvtFromVerticalPixels(Screen *screen, int from_val, int to_type);
void XmCvtStringToUnitType(XrmValuePtr args, Cardinal *num_args, XrmValue *from_val, XrmValue *to_val);
Boolean XmCvtTextToXmString(Display *display, XrmValuePtr args, Cardinal *num_args, XrmValue *from_val, XrmValue *to_val, XtPointer *converter_data);
int XmCvtToHorizontalPixels(Screen *screen, int from_val, int from_type);
int XmCvtToVerticalPixels(Screen *screen, int from_val, int from_type);
char *XmCvtXmStringToCT(XmString string);
Boolean XmCvtXmStringToText(Display *display, XrmValuePtr args, Cardinal *num_args, XrmValue *from_val, XrmValue *to_val, XtPointer *converter_data);
MACRO_XmDEFAULT_TOP XmDEFAULT_BOTTOM_MARGIN;
MACRO_XmDEFAULT XmDEFAULT_DARK_THRESHOLD;
$BE043CC66BC9A68312F52FD64117B1F0 XmDEFAULT_EXTENSION;
MACRO_XmDEFAULT_FOREGROUND XmDEFAULT_FOREGROUND_THRESHOLD;
MACRO_XmDEFAULT_INDICATOR XmDEFAULT_INDICATOR_DIM;
MACRO_XmDEFAULT XmDEFAULT_LIGHT_THRESHOLD;
MACRO_XmDEFAULT_TOP XmDEFAULT_TOP_MARGIN;
MACRO_XmADD XmDELETE;
$53D85B5D788E52D277529232F64946A1 XmDESCENDANTS_NAVIGABLE;
$53D85B5D788E52D277529232F64946A1 XmDESCENDANTS_TAB_NAVIGABLE;
$BE043CC66BC9A68312F52FD64117B1F0 XmDESKTOP_EXTENSION;
$B3EE7E070A91A7478A9093983E000B1C XmDESTROY;
$8955F610BCE94AAE8676F9CC0150C756 XmDEST_SELECT;
$86142F77BB0C999E4FDA022A0761FC03 XmDIALOG_APPLY_BUTTON;
$86142F77BB0C999E4FDA022A0761FC03 XmDIALOG_CANCEL_BUTTON;
$20B43CE35CA63D467D88D706C39B67FF XmDIALOG_COMMAND;
$86142F77BB0C999E4FDA022A0761FC03 XmDIALOG_DEFAULT_BUTTON;
$86142F77BB0C999E4FDA022A0761FC03 XmDIALOG_DIR_LIST;
$86142F77BB0C999E4FDA022A0761FC03 XmDIALOG_DIR_LIST_LABEL;
$3554E9F53AAF9A4A0C1CB35FF6413EF3 XmDIALOG_ERROR;
$20B43CE35CA63D467D88D706C39B67FF XmDIALOG_FILE_SELECTION;
$86142F77BB0C999E4FDA022A0761FC03 XmDIALOG_FILTER_LABEL;
$86142F77BB0C999E4FDA022A0761FC03 XmDIALOG_FILTER_TEXT;
$924322573C6CAB618BBD90F5076C3820 XmDIALOG_FULL_APPLICATION_MODAL;
$86142F77BB0C999E4FDA022A0761FC03 XmDIALOG_HELP_BUTTON;
$3554E9F53AAF9A4A0C1CB35FF6413EF3 XmDIALOG_INFORMATION;
$86142F77BB0C999E4FDA022A0761FC03 XmDIALOG_LIST;
$86142F77BB0C999E4FDA022A0761FC03 XmDIALOG_LIST_LABEL;
$3554E9F53AAF9A4A0C1CB35FF6413EF3 XmDIALOG_MESSAGE;
$86142F77BB0C999E4FDA022A0761FC03 XmDIALOG_MESSAGE_LABEL;
$924322573C6CAB618BBD90F5076C3820 XmDIALOG_MODELESS;
$86142F77BB0C999E4FDA022A0761FC03 XmDIALOG_NONE;
$86142F77BB0C999E4FDA022A0761FC03 XmDIALOG_OK_BUTTON;
$924322573C6CAB618BBD90F5076C3820 XmDIALOG_PRIMARY_APPLICATION_MODAL;
$20B43CE35CA63D467D88D706C39B67FF XmDIALOG_PROMPT;
$3554E9F53AAF9A4A0C1CB35FF6413EF3 XmDIALOG_QUESTION;
$20B43CE35CA63D467D88D706C39B67FF XmDIALOG_SELECTION;
$86142F77BB0C999E4FDA022A0761FC03 XmDIALOG_SELECTION_LABEL;
$86142F77BB0C999E4FDA022A0761FC03 XmDIALOG_SEPARATOR;
$F1BD9F0A1A3AD97A054FAC600A5CBCD3 XmDIALOG_SHELL_BIT;
MACRO_XmDIALOG XmDIALOG_SUFFIX_SIZE;
$86142F77BB0C999E4FDA022A0761FC03 XmDIALOG_SYMBOL_LABEL;
$924322573C6CAB618BBD90F5076C3820 XmDIALOG_SYSTEM_MODAL;
$3554E9F53AAF9A4A0C1CB35FF6413EF3 XmDIALOG_TEMPLATE;
$86142F77BB0C999E4FDA022A0761FC03 XmDIALOG_TEXT;
$3554E9F53AAF9A4A0C1CB35FF6413EF3 XmDIALOG_WARNING;
$3554E9F53AAF9A4A0C1CB35FF6413EF3 XmDIALOG_WORKING;
$20B43CE35CA63D467D88D706C39B67FF XmDIALOG_WORK_AREA;
$F1BD9F0A1A3AD97A054FAC600A5CBCD3 XmDISPLAY_BIT;
$4A29676AAA734113BCAB025ECBEC3878 XmDOUBLE_DASHED_LINE;
$4A29676AAA734113BCAB025ECBEC3878 XmDOUBLE_LINE;
$273F9245AF4031A58D8B6B8D9D4CC35E XmDOUBLE_SEPARATOR;
$B3EE7E070A91A7478A9093983E000B1C XmDO_NOTHING;
$F1BD9F0A1A3AD97A054FAC600A5CBCD3 XmDRAG_CONTEXT_BIT;
$17DC033B3C2AE84FB8F187DC408B09AC XmDRAG_DROP_FINISH;
$CB86C33E4C099BDD4888D4811E9329EE XmDRAG_DROP_ONLY;
$CB86C33E4C099BDD4888D4811E9329EE XmDRAG_DYNAMIC;
$F1BD9F0A1A3AD97A054FAC600A5CBCD3 XmDRAG_ICON_BIT;
$17DC033B3C2AE84FB8F187DC408B09AC XmDRAG_MOTION;
$CB86C33E4C099BDD4888D4811E9329EE XmDRAG_NONE;
$F1BD9F0A1A3AD97A054FAC600A5CBCD3 XmDRAG_OVER_SHELL_BIT;
$CB86C33E4C099BDD4888D4811E9329EE XmDRAG_PREFER_DYNAMIC;
$CB86C33E4C099BDD4888D4811E9329EE XmDRAG_PREFER_PREREGISTER;
$CB86C33E4C099BDD4888D4811E9329EE XmDRAG_PREFER_RECEIVER;
$CB86C33E4C099BDD4888D4811E9329EE XmDRAG_PREREGISTER;
$5CCAAB17D7B51A2C8AD8B4D8359CAFAA XmDRAG_UNDER_HIGHLIGHT;
$5CCAAB17D7B51A2C8AD8B4D8359CAFAA XmDRAG_UNDER_NONE;
$5CCAAB17D7B51A2C8AD8B4D8359CAFAA XmDRAG_UNDER_PIXMAP;
$5CCAAB17D7B51A2C8AD8B4D8359CAFAA XmDRAG_UNDER_SHADOW_IN;
$5CCAAB17D7B51A2C8AD8B4D8359CAFAA XmDRAG_UNDER_SHADOW_OUT;
$F1BD9F0A1A3AD97A054FAC600A5CBCD3 XmDRAWING_AREA_BIT;
$F1BD9F0A1A3AD97A054FAC600A5CBCD3 XmDRAWN_BUTTON_BIT;
$3E13AB1AE3EB517EC8E207F624474D4A XmDROP;
$3E13AB1AE3EB517EC8E207F624474D4A XmDROP_CANCEL;
MACRO_XmDROP XmDROP_COPY;
$142CFC6DDCC083014C014320121AA9F9 XmDROP_FAILURE;
$17DC033B3C2AE84FB8F187DC408B09AC XmDROP_FINISH;
$3E13AB1AE3EB517EC8E207F624474D4A XmDROP_HELP;
$3E13AB1AE3EB517EC8E207F624474D4A XmDROP_INTERRUPT;
MACRO_XmDROP XmDROP_LINK;
MACRO_XmDROP XmDROP_MOVE;
MACRO_XmDROP XmDROP_NOOP;
$844194616ADAB7F78352BD9EFCC8C976 XmDROP_SITE_ACTIVE;
$4A130DCDE97F329D07F4532896FFD2F9 XmDROP_SITE_COMPOSITE;
$4A130DCDE97F329D07F4532896FFD2F9 XmDROP_SITE_COMPOSITE_CLIP_ONLY;
$17DC033B3C2AE84FB8F187DC408B09AC XmDROP_SITE_ENTER;
$844194616ADAB7F78352BD9EFCC8C976 XmDROP_SITE_INACTIVE;
MACRO_XmDROP_SITE XmDROP_SITE_INVALID;
$17DC033B3C2AE84FB8F187DC408B09AC XmDROP_SITE_LEAVE;
$F1BD9F0A1A3AD97A054FAC600A5CBCD3 XmDROP_SITE_MANAGER_BIT;
$4A130DCDE97F329D07F4532896FFD2F9 XmDROP_SITE_SIMPLE;
$4A130DCDE97F329D07F4532896FFD2F9 XmDROP_SITE_SIMPLE_CLIP_ONLY;
MACRO_XmDROP_SITE XmDROP_SITE_VALID;
$17DC033B3C2AE84FB8F187DC408B09AC XmDROP_START;
$142CFC6DDCC083014C014320121AA9F9 XmDROP_SUCCESS;
$F1BD9F0A1A3AD97A054FAC600A5CBCD3 XmDROP_TRANSFER_BIT;
$12E524B91CF51C80381CF2D49C265A54 XmDYNAMIC;
MACRO_XmDYNAMIC XmDYNAMIC_DEFAULT_TAB_GROUP;
void XmDeactivateProtocol(Widget shell, Atom property, Atom proto_atom);
Boolean XmDestroyPixmap(Screen *screen, Pixmap pixmap);
MACRO_XmDialogSIndex XmDialogSIndex;
MACRO_XmDialogShellIndex XmDialogShellIndex;
MACRO_ApplicationShellIndex XmDisplayIndex;
void XmDragCancel(Widget dragContext);
MACRO_XmDragContextIndex XmDragContextIndex;
MACRO_XmDragIconIndex XmDragIconIndex;
MACRO_XmDropTransferIndex XmDragOverShellIndex;
Widget XmDragStart(Widget w, XEvent *event, ArgList args, Cardinal numArgs);
MACRO_XmDrawingAIndex XmDrawingAIndex;
MACRO_XmDrawingAreaIndex XmDrawingAreaIndex;
MACRO_XmDrawnBIndex XmDrawnBIndex;
MACRO_XmDrawnButtonIndex XmDrawnButtonIndex;
void XmDropSiteConfigureStackingOrder(Widget widget, Widget sibling, Cardinal stack_mode);
void XmDropSiteEndUpdate(Widget refWidget);
XmDropSiteVisuals XmDropSiteGetActiveVisuals(Widget widget);
MACRO_XmDropSiteManagerIndex XmDropSiteManagerIndex;
int XmDropSiteQueryStackingOrder(Widget widget, Widget *parent_rtn, Widget **children_rtn, Cardinal *num_children_rtn);
void XmDropSiteRegister(Widget widget, ArgList args, Cardinal argCount);
void XmDropSiteRetrieve(Widget enclosingWidget, ArgList args, Cardinal argCount);
void XmDropSiteStartUpdate(Widget refWidget);
void XmDropSiteUnregister(Widget widget);
void XmDropSiteUpdate(Widget enclosingWidget, ArgList args, Cardinal argCount);
void XmDropTransferAdd(Widget widget, XmDropTransferEntry transfers, Cardinal num_transfers);
MACRO_XmDropTransferIndex XmDropTransferIndex;
Widget XmDropTransferStart(Widget refWidget, ArgList args, Cardinal argCount);
$FF1FF5DA5604B4B1711E513F8BAF3747 XmENTER;
MACRO_XmNO XmENTER_EVENT;
$7F2B51D7BA6B441FB87F459A5B295871 XmEXCLUSIVE_TAB_GROUP;
$B182F73AE0810C509E52E7A5D6327869 XmEXPLICIT;
$AEA1FBBE7726CEC77267A27B4B646D95 XmEXTENDED_SELECT;
$F1BD9F0A1A3AD97A054FAC600A5CBCD3 XmFAST_SUBCLASS_TAIL_BIT;
MACRO_XmFILE XmFILE_ANY_TYPE;
MACRO_XmFILE XmFILE_DIRECTORY;
MACRO_XmFILE XmFILE_REGULAR;
$F1BD9F0A1A3AD97A054FAC600A5CBCD3 XmFILE_SELECTION_BOX_BIT;
MACRO_XmFIRST XmFIRST_APPLICATION_SUBCLASS_BIT;
$21559D167E09D153A2BED9C0416C486B XmFIRST_POSITION;
MACRO_XmFMT XmFMT_16_BIT;
MACRO_XmBOTTOM_RIGHT XmFMT_8_BIT;
$FF1FF5DA5604B4B1711E513F8BAF3747 XmFOCUS_IN;
MACRO_XmNO XmFOCUS_IN_EVENT;
$FF1FF5DA5604B4B1711E513F8BAF3747 XmFOCUS_OUT;
MACRO_XmNO XmFOCUS_OUT_EVENT;
$40DDC86762D4922A231DE7BCE40E1602 XmFONT_IS_FONT;
$40DDC86762D4922A231DE7BCE40E1602 XmFONT_IS_FONTSET;
MACRO_XmBACKGROUND XmFOREGROUND;
$F1BD9F0A1A3AD97A054FAC600A5CBCD3 XmFORM_BIT;
$F1BD9F0A1A3AD97A054FAC600A5CBCD3 XmFRAME_BIT;
$51AD691829D8B52D9185C4E5F8346768 XmFRAME_GENERIC_CHILD;
$51AD691829D8B52D9185C4E5F8346768 XmFRAME_TITLE_CHILD;
$51AD691829D8B52D9185C4E5F8346768 XmFRAME_WORKAREA_CHILD;
MACRO_XmFSB XmFSB_MAX_WIDGETS_VERT;
MACRO_XmFS XmFS_DIR_SEARCH_PROC;
MACRO_XmFS XmFS_IN_FILE_SEARCH;
MACRO_XmFSB XmFS_NO_MATCH;
MACRO_XmFileSBIndex XmFileSBIndex;
Widget XmFileSelectionBoxGetChild(Widget fs, unsigned int which);
MACRO_XmFileSelectionBoxIndex XmFileSelectionBoxIndex;
void XmFileSelectionDoSearch(Widget fs, XmString dirmask);
XmFontList XmFontListAdd(XmFontList old, XFontStruct *font, XmStringCharSet charset);
XmFontList XmFontListAppendEntry(XmFontList old, XmFontListEntry entry);
XmFontList XmFontListCopy(XmFontList fontlist);
XmFontList XmFontListCreate(XFontStruct *font, XmStringCharSet charset);
XmFontListEntry XmFontListEntryCreate(char *tag, XmFontType type, XtPointer font);
void XmFontListEntryFree(entry);
XtPointer XmFontListEntryGetFont(XmFontListEntry entry, XmFontType *typeReturn);
char *XmFontListEntryGetTag(entry);
XmFontListEntry XmFontListEntryLoad(Display *display, char *fontName, XmFontType type, char *tag);
void XmFontListFree(XmFontList fontlist);
void XmFontListFreeFontContext(XmFontContext context);
Boolean XmFontListGetNextFont(XmFontContext context, XmStringCharSet *charset, XFontStruct **font);
Boolean XmFontListInitFontContext(XmFontContext *context, XmFontList fontlist);
XmFontListEntry XmFontListNextEntry(XmFontContext context);
XmFontList XmFontListRemoveEntry(XmFontList old, XmFontListEntry entry);
MACRO_XmScrolledWindowIndex XmFormIndex;
MACRO_XmFrameIndex XmFrameIndex;
$F1BD9F0A1A3AD97A054FAC600A5CBCD3 XmGADGET_BIT;
$74B1213069A442AA4F809B3DD5A5FADF XmGEO_AVERAGING;
$EA694365A6418A3DD1577EF52309349E XmGEO_CENTER;
$F31EAA3A8460C669313F2AF0A352AAF2 XmGEO_COLUMN_MAJOR;
$EA694365A6418A3DD1577EF52309349E XmGEO_EXPAND;
$EA694365A6418A3DD1577EF52309349E XmGEO_PACK;
$8550641B0259C0F145DDEEFF69F64B1F XmGEO_POST_SET;
$8550641B0259C0F145DDEEFF69F64B1F XmGEO_PRE_SET;
$74B1213069A442AA4F809B3DD5A5FADF XmGEO_PROPORTIONAL;
$F31EAA3A8460C669313F2AF0A352AAF2 XmGEO_ROW_MAJOR;
$74B1213069A442AA4F809B3DD5A5FADF XmGEO_WRAP;
$8550641B0259C0F145DDEEFF69F64B1F XmGET_ACTUAL_SIZE;
$8550641B0259C0F145DDEEFF69F64B1F XmGET_PREFERRED_SIZE;
MACRO_XmGadgetClassExtVersion XmGadgetClassExtVersion;
MACRO_XmGadgetIndex XmGadgetIndex;
String XmGetAtomName(Display *display, Atom atom);
XmColorProc XmGetColorCalculation(void);
void XmGetColors(Screen *screen, Colormap color_map, Pixel background, Pixel *foreground_ret, Pixel *top_shadow_ret, Pixel *bottom_shadow_ret, Pixel *select_ret);
Widget XmGetDestination(Display *display);
Widget XmGetDragContext(Widget w, Time time);
Widget XmGetFocusWidget(Widget wid);
String XmGetIconFileName(Screen *screen, String imageInstanceName, String imageClassName, String hostPrefix, unsigned int size);
Cursor XmGetMenuCursor(Display *display);
Pixmap XmGetPixmap(Screen *screen, char *image_name, Pixel foreground, Pixel background);
Pixmap XmGetPixmapByDepth(Screen *screen, char *image_name, Pixel foreground, Pixel background, int depth);
Widget XmGetPostedFromWidget(Widget menu);
Cardinal XmGetSecondaryResourceData(WidgetClass w_class, XmSecondaryResourceData **secondaryDataRtn);
Widget XmGetTabGroup(Widget wid);
Widget XmGetTearOffControl(Widget menu);
XmVisibility XmGetVisibility(Widget wid);
Widget XmGetXmDisplay(Display *display);
Widget XmGetXmScreen(Screen *screen);
MACRO_XmHELP XmHELP;
MACRO_XmNO XmHELP_EVENT;
$BC1225400C03E76ABCA8FB74177B074B XmHIGHLIGHT_NORMAL;
$BC1225400C03E76ABCA8FB74177B074B XmHIGHLIGHT_SECONDARY_SELECTED;
$BC1225400C03E76ABCA8FB74177B074B XmHIGHLIGHT_SELECTED;
$89FC1B20F172ACED79941DFC60097C46 XmHORIZONTAL;
MACRO_XmIGNORE XmIGNORE_EVENTTYPE;
MACRO_XmINITIAL XmINITIAL;
$1EB735D257737D1C193CE2CC582D75C3 XmINPUT_ACTION;
MACRO_XmINVALID XmINVALID_DIMENSION;
MACRO_XmNO_DROP XmINVALID_DROP_SITE;
$4A29676AAA734113BCAB025ECBEC3878 XmINVALID_SEPARATOR_TYPE;
XIMStyle XmImGetInputStyle(Widget w);
XIM XmImGetXIM(Widget w);
int XmImMbLookupString(Widget w, XKeyPressedEvent *event, char *buf, int nbytes, KeySym *keysym, int *status);
void XmImMbResetIC(Widget w, char **mb);
void XmImRegister(Widget w, unsigned int reserved);
void XmImSetFocusValues(Widget w, ArgList args, Cardinal num_args);
void XmImSetValues(Widget w, ArgList args, Cardinal num_args);
void XmImUnregister(Widget w);
void XmImUnsetFocus(Widget w);
void XmImVaSetFocusValues(Widget w, ...);
void XmImVaSetValues(Widget w, ...);
Boolean XmInstallImage(XImage *image, char *image_name);
Atom XmInternAtom(Display *display, String name, int only_if_exists);
Boolean XmIsMotifWMRunning(Widget shell);
Boolean XmIsTraversable(Widget wid);
MACRO_XmKEYCODE XmKEYCODE_TAG_SIZE;
MACRO_XmNO XmKEY_EVENT;
$F1BD9F0A1A3AD97A054FAC600A5CBCD3 XmLABEL_BIT;
$D06503B10BF0E4ACB2E829F55AF9893F XmLABEL_FONTLIST;
$F1BD9F0A1A3AD97A054FAC600A5CBCD3 XmLABEL_GADGET_BIT;
MACRO_XmUNSPECIFIED_ICON XmLARGE_ICON_SIZE;
$21559D167E09D153A2BED9C0416C486B XmLAST_POSITION;
$FF1FF5DA5604B4B1711E513F8BAF3747 XmLEAVE;
MACRO_XmNO XmLEAVE_EVENT;
$F1BD9F0A1A3AD97A054FAC600A5CBCD3 XmLIST_BIT;
MACRO_XmLOOK XmLOOK_AT_BACKGROUND;
MACRO_XmLOOK XmLOOK_AT_BOTTOM_SHADOW;
MACRO_XmLOOK XmLOOK_AT_CMAP;
MACRO_XmLOOK XmLOOK_AT_FOREGROUND;
MACRO_XmLOOK XmLOOK_AT_SCREEN;
MACRO_XmLOOK XmLOOK_AT_SELECT;
MACRO_XmLOOK XmLOOK_AT_TOP_SHADOW;
MACRO_XmLabelGIndex XmLabelGIndex;
MACRO_XmLabelGadgetIndex XmLabelGadgetIndex;
MACRO_XmLabelIndex XmLabelIndex;
void XmListAddItem(Widget w, XmString item, int pos);
void XmListAddItemUnselected(Widget w, XmString item, int pos);
void XmListAddItems(Widget w, XmString *items, int item_count, int pos);
void XmListAddItemsUnselected(Widget w, XmString *items, int item_count, int pos);
void XmListDeleteAllItems(Widget w);
void XmListDeleteItem(Widget w, XmString item);
void XmListDeleteItems(Widget w, XmString *items, int item_count);
void XmListDeleteItemsPos(Widget w, int item_count, int pos);
void XmListDeletePos(Widget w, int pos);
void XmListDeletePositions(Widget w, int *position_list, int position_count);
void XmListDeselectAllItems(Widget w);
void XmListDeselectItem(Widget w, XmString item);
void XmListDeselectPos(Widget w, int pos);
int XmListGetKbdItemPos(Widget w);
Boolean XmListGetMatchPos(Widget w, XmString item, int **pos_list, int *pos_count);
Boolean XmListGetSelectedPos(Widget w, int **pos_list, int *pos_count);
MACRO_XmListIndex XmListIndex;
Boolean XmListItemExists(Widget w, XmString item);
int XmListItemPos(Widget w, XmString item);
Boolean XmListPosSelected(Widget w, int pos);
Boolean XmListPosToBounds(Widget w, int position, Position *x, Position *y, Dimension *width, Dimension *height);
void XmListReplaceItems(Widget w, XmString *old_items, int item_count, XmString *new_items);
void XmListReplaceItemsPos(Widget w, XmString *new_items, int item_count, int position);
void XmListReplaceItemsPosUnselected(Widget w, XmString *new_items, int item_count, int position);
void XmListReplaceItemsUnselected(Widget w, XmString *old_items, int item_count, XmString *new_items);
void XmListReplacePositions(Widget w, int *position_list, XmString *item_list, int item_count);
void XmListSelectItem(Widget w, XmString item, int notify);
void XmListSelectPos(Widget w, int pos, int notify);
void XmListSetAddMode(Widget w, int add_mode);
void XmListSetBottomItem(Widget w, XmString item);
void XmListSetBottomPos(Widget w, int pos);
void XmListSetHorizPos(Widget w, int position);
void XmListSetItem(Widget w, XmString item);
Boolean XmListSetKbdItemPos(Widget w, int pos);
void XmListSetPos(Widget w, int pos);
void XmListUpdateSelectedList(Widget w);
int XmListYToPos(Widget w, Position y);
$F1BD9F0A1A3AD97A054FAC600A5CBCD3 XmMAIN_WINDOW_BIT;
$F1BD9F0A1A3AD97A054FAC600A5CBCD3 XmMANAGER_BIT;
$190C3184BA7AC20E926F5102B254E542 XmMAX_ON_BOTTOM;
$190C3184BA7AC20E926F5102B254E542 XmMAX_ON_LEFT;
$190C3184BA7AC20E926F5102B254E542 XmMAX_ON_RIGHT;
$190C3184BA7AC20E926F5102B254E542 XmMAX_ON_TOP;
MACRO_XmWEAK XmMEDIUM_CHECK;
MACRO_XmUNSPECIFIED_ICON XmMEDIUM_ICON_SIZE;
$E47FF6462DC373F46302D1643C3110BA XmMENU_ARM;
$BCBFBEF9B4DBDCBDB019F39924A8EC6D XmMENU_BAR;
$E47FF6462DC373F46302D1643C3110BA XmMENU_BAR_CLEANUP;
MACRO_XmMENU_BEGIN XmMENU_BEGIN;
$E47FF6462DC373F46302D1643C3110BA XmMENU_BUTTON;
$E47FF6462DC373F46302D1643C3110BA XmMENU_BUTTON_POPDOWN;
$E47FF6462DC373F46302D1643C3110BA XmMENU_CALLBACK;
$E47FF6462DC373F46302D1643C3110BA XmMENU_CASCADING;
$E47FF6462DC373F46302D1643C3110BA XmMENU_DISARM;
MACRO_XmMENU_BEGIN XmMENU_END;
$E47FF6462DC373F46302D1643C3110BA XmMENU_GET_LAST_SELECT_TOPLEVEL;
$E47FF6462DC373F46302D1643C3110BA XmMENU_MEMWIDGET_UPDATE;
MACRO_XmMENU_BEGIN XmMENU_MIDDLE;
$BCBFBEF9B4DBDCBDB019F39924A8EC6D XmMENU_OPTION;
$E47FF6462DC373F46302D1643C3110BA XmMENU_POPDOWN;
$BCBFBEF9B4DBDCBDB019F39924A8EC6D XmMENU_POPUP;
MACRO_XmMENU XmMENU_POPUP_POSTED_BIT;
$E47FF6462DC373F46302D1643C3110BA XmMENU_PROCESS_TREE;
$BCBFBEF9B4DBDCBDB019F39924A8EC6D XmMENU_PULLDOWN;
$E47FF6462DC373F46302D1643C3110BA XmMENU_RESTORE_EXCLUDED_TEAROFF_TO_TOPLEVEL_SHELL;
$E47FF6462DC373F46302D1643C3110BA XmMENU_RESTORE_TEAROFF_TO_MENUSHELL;
$E47FF6462DC373F46302D1643C3110BA XmMENU_RESTORE_TEAROFF_TO_TOPLEVEL_SHELL;
$F1BD9F0A1A3AD97A054FAC600A5CBCD3 XmMENU_SHELL_BIT;
$E47FF6462DC373F46302D1643C3110BA XmMENU_SHELL_POPDOWN;
$E47FF6462DC373F46302D1643C3110BA XmMENU_STATUS;
$E47FF6462DC373F46302D1643C3110BA XmMENU_SUBMENU;
$E47FF6462DC373F46302D1643C3110BA XmMENU_TEAR_OFF_ARM;
MACRO_XmMENU XmMENU_TEAR_OFF_SHELL_DESCENDANT_BIT;
MACRO_XmMENU XmMENU_TORN_BIT;
$E47FF6462DC373F46302D1643C3110BA XmMENU_TRAVERSAL;
$F1BD9F0A1A3AD97A054FAC600A5CBCD3 XmMESSAGE_BOX_BIT;
MACRO_XmINITIAL XmMODIFICATION;
MACRO_XmNO XmMOTION_EVENT;
$62D23D4C9FF5CF3197FBB82C4CE39A6E XmMULTICLICK_DISCARD;
$62D23D4C9FF5CF3197FBB82C4CE39A6E XmMULTICLICK_KEEP;
$AEA1FBBE7726CEC77267A27B4B646D95 XmMULTIPLE_SELECT;
MACRO_XmNO XmMULTI_ACTIVATE_EVENT;
MACRO_XmNO XmMULTI_ARM_EVENT;
$81C5AE8457262FB4B2176DCA5350B614 XmMULTI_LINE_EDIT;
MACRO_XmMainWIndex XmMainWIndex;
MACRO_XmMainWindowIndex XmMainWindowIndex;
Widget XmMainWindowSep1(Widget w);
Widget XmMainWindowSep2(Widget w);
Widget XmMainWindowSep3(Widget w);
void XmMainWindowSetAreas(Widget w, Widget menu, Widget command, Widget hscroll, Widget vscroll, Widget wregion);
MACRO_XmManagerClassExtVersion XmManagerClassExtVersion;
MACRO_XmGadgetIndex XmManagerIndex;
char *XmMapSegmentEncoding(char *fontlist_tag);
void XmMenuPosition(Widget p, XButtonPressedEvent *event);
MACRO_XmMenuShellIndex XmMenuShellIndex;
MACRO_XmMessageBIndex XmMessageBIndex;
Widget XmMessageBoxGetChild(Widget widget, unsigned int child);
MACRO_XmMessageBoxIndex XmMessageBoxIndex;
$7F2B51D7BA6B441FB87F459A5B295871 XmNONE;
MACRO_XmNONE XmNONE_OR_BC;
$53D85B5D788E52D277529232F64946A1 XmNOT_NAVIGABLE;
MACRO_XmNO_DROP XmNO_DROP_SITE;
MACRO_XmNO XmNO_EVENT;
$4A29676AAA734113BCAB025ECBEC3878 XmNO_LINE;
$89FC1B20F172ACED79941DFC60097C46 XmNO_ORIENTATION;
$6F9A534032C3FA39E6E0F9F540CB117B XmNO_PACKING;
MACRO_XmNUM XmNUM_BYTES;
MACRO_XmNUM XmNUM_ELEMENTS;
$CB8A8D6C0EBCF16D23EA6CE4962585C1 XmN_OF_MANY;
$CB8A8D6C0EBCF16D23EA6CE4962585C1 XmONE_OF_MANY;
$17DC033B3C2AE84FB8F187DC408B09AC XmOPERATION_CHANGED;
MACRO_XmObjectIndex XmObjectIndex;
Widget XmOptionButtonGadget(Widget m);
Widget XmOptionLabelGadget(Widget m);
MACRO_ShellIndex XmOverrideShellIndex;
$6F9A534032C3FA39E6E0F9F540CB117B XmPACK_COLUMN;
$6F9A534032C3FA39E6E0F9F540CB117B XmPACK_NONE;
$6F9A534032C3FA39E6E0F9F540CB117B XmPACK_TIGHT;
$F1BD9F0A1A3AD97A054FAC600A5CBCD3 XmPANED_WINDOW_BIT;
$4805655BE88EF9DDFB1A0EBC191B4778 XmPARENT_ACTIVATE;
$4805655BE88EF9DDFB1A0EBC191B4778 XmPARENT_CANCEL;
$1EB735D257737D1C193CE2CC582D75C3 XmPARENT_PROCESS_ANY;
$D57089EDE54FD93EA7906B88CC189786 XmPIXELS;
$EC4430DF07B90C5F659AF484C6831943 XmPIXMAP;
$0232AD16D6C3E7FDD249CAB34FDC4361 XmPLACE_ABOVE_SELECTION;
$0232AD16D6C3E7FDD249CAB34FDC4361 XmPLACE_BELOW_SELECTION;
$0232AD16D6C3E7FDD249CAB34FDC4361 XmPLACE_TOP;
$B182F73AE0810C509E52E7A5D6327869 XmPOINTER;
$F1BD9F0A1A3AD97A054FAC600A5CBCD3 XmPRIMITIVE_BIT;
$8955F610BCE94AAE8676F9CC0150C756 XmPRIM_SELECT;
$BE043CC66BC9A68312F52FD64117B1F0 XmPROTOCOL_EXTENSION;
$273F9245AF4031A58D8B6B8D9D4CC35E XmPUSHBUTTON;
$F1BD9F0A1A3AD97A054FAC600A5CBCD3 XmPUSH_BUTTON_BIT;
$F1BD9F0A1A3AD97A054FAC600A5CBCD3 XmPUSH_BUTTON_GADGET_BIT;
MACRO_XmPanedWIndex XmPanedWIndex;
MACRO_XmPanedWindowIndex XmPanedWindowIndex;
MACRO_XmPrimitiveClassExtVersion XmPrimitiveClassExtVersion;
MACRO_XmGadgetIndex XmPrimitiveIndex;
Boolean XmProcessTraversal(Widget w, XmTraversalDirection dir);
MACRO_XmPushBGIndex XmPushBGIndex;
MACRO_XmPushBIndex XmPushBIndex;
MACRO_XmPushButtonGadgetIndex XmPushButtonGadgetIndex;
MACRO_XmPushButtonIndex XmPushButtonIndex;
XrmQuark XmQmotif;
$273F9245AF4031A58D8B6B8D9D4CC35E XmRADIOBUTTON;
MACRO_XmRC XmRC_ARMED_BIT;
MACRO_XmRC XmRC_BEING_ARMED_BIT;
MACRO_XmRC XmRC_EXPOSE_BIT;
MACRO_XmRC XmRC_FROM_RESIZE_BIT;
MACRO_XmRC XmRC_POPPING_DOWN_BIT;
MACRO_XmRC XmRC_WIDGET_MOVED_BIT;
MACRO_XmRC XmRC_WINDOW_MOVED_BIT;
MACRO_XmADD XmREPLACE;
MACRO_XmREP XmREP_TYPE_INVALID;
$BD94187AB2581C6A16F17507A67D7799 XmRESIZE_ANY;
$BD94187AB2581C6A16F17507A67D7799 XmRESIZE_GROW;
$5619CCF50B7A6021E29EA9A230F1DFA1 XmRESIZE_IF_POSSIBLE;
$BD94187AB2581C6A16F17507A67D7799 XmRESIZE_NONE;
MACRO_XmRESIZE XmRESIZE_SWINDOW;
MACRO_XmVERSION XmREVISION;
$F1BD9F0A1A3AD97A054FAC600A5CBCD3 XmROW_COLUMN_BIT;
MACRO_ObjectIndex XmRectObjIndex;
void XmRegisterConverters(void);
char *XmRegisterSegmentEncoding(char *fontlist_tag, char *ct_encoding);
void XmRemoveFromPostFromList(Widget menu_wid, Widget widget);
void XmRemoveProtocolCallback(Widget shell, Atom property, Atom proto_atom, XtCallbackProc callback, XtPointer closure);
void XmRemoveProtocols(Widget shell, Atom property, Atom *protocols, Cardinal num_protocols);
void XmRemoveTabGroup(Widget w);
void XmRepTypeAddReverse(int rep_type_id);
XmRepTypeId XmRepTypeGetId(String rep_type);
String *XmRepTypeGetNameList(int rep_type_id, int use_uppercase_format);
XmRepTypeEntry XmRepTypeGetRecord(int rep_type_id);
XmRepTypeList XmRepTypeGetRegistered(void);
void XmRepTypeInstallTearOffModelConverter(void);
XmRepTypeId XmRepTypeRegister(String rep_type, String *value_names, unsigned __int8 *values, unsigned int num_values);
Boolean XmRepTypeValidValue(int rep_type_id, unsigned int test_value, Widget enable_default_warning);
void XmResolveAllPartOffsets(WidgetClass w_class, XmOffsetPtr *offset, XmOffsetPtr *constraint_offset);
void XmResolvePartOffsets(WidgetClass w_class, XmOffsetPtr *offset);
MACRO_XmSashIndex XmRowColumnIndex;
$F1BD9F0A1A3AD97A054FAC600A5CBCD3 XmSASH_BIT;
MACRO_XmSB XmSB_MAX_WIDGETS_VERT;
$F1BD9F0A1A3AD97A054FAC600A5CBCD3 XmSCALE_BIT;
$F1BD9F0A1A3AD97A054FAC600A5CBCD3 XmSCREEN_BIT;
$F1BD9F0A1A3AD97A054FAC600A5CBCD3 XmSCROLLED_WINDOW_BIT;
$F1BD9F0A1A3AD97A054FAC600A5CBCD3 XmSCROLL_BAR_BIT;
MACRO_XmBACKGROUND XmSELECT;
$F1BD9F0A1A3AD97A054FAC600A5CBCD3 XmSELECTION_BOX_BIT;
$4B428208B782ABE99A767087F20FFBB9 XmSELECT_ALL;
$4B428208B782ABE99A767087F20FFBB9 XmSELECT_COMPSEQ;
$4B428208B782ABE99A767087F20FFBB9 XmSELECT_LINE;
$4B428208B782ABE99A767087F20FFBB9 XmSELECT_PARAGRAPH;
$4B428208B782ABE99A767087F20FFBB9 XmSELECT_POSITION;
$4B428208B782ABE99A767087F20FFBB9 XmSELECT_WHITESPACE;
$4B428208B782ABE99A767087F20FFBB9 XmSELECT_WORD;
$273F9245AF4031A58D8B6B8D9D4CC35E XmSEPARATOR;
$F1BD9F0A1A3AD97A054FAC600A5CBCD3 XmSEPARATOR_BIT;
$F1BD9F0A1A3AD97A054FAC600A5CBCD3 XmSEPARATOR_GADGET_BIT;
$4A29676AAA734113BCAB025ECBEC3878 XmSHADOW_ETCHED_IN;
$4A29676AAA734113BCAB025ECBEC3878 XmSHADOW_ETCHED_IN_DASH;
$4A29676AAA734113BCAB025ECBEC3878 XmSHADOW_ETCHED_OUT;
$4A29676AAA734113BCAB025ECBEC3878 XmSHADOW_ETCHED_OUT_DASH;
$2893428BD927CDFCCAACC59ACD2F737F XmSHADOW_IN;
$2893428BD927CDFCCAACC59ACD2F737F XmSHADOW_OUT;
$BE043CC66BC9A68312F52FD64117B1F0 XmSHELL_EXTENSION;
$4A29676AAA734113BCAB025ECBEC3878 XmSINGLE_DASHED_LINE;
$4A29676AAA734113BCAB025ECBEC3878 XmSINGLE_LINE;
$81C5AE8457262FB4B2176DCA5350B614 XmSINGLE_LINE_EDIT;
$AEA1FBBE7726CEC77267A27B4B646D95 XmSINGLE_SELECT;
MACRO_XmUNSPECIFIED_ICON XmSMALL_ICON_SIZE;
$12E524B91CF51C80381CF2D49C265A54 XmSTATIC;
$7F2B51D7BA6B441FB87F459A5B295871 XmSTICKY_TAB_GROUP;
$EC4430DF07B90C5F659AF484C6831943 XmSTRING;
$17522E38E9E30379809C0F60C7B013EC XmSTRING_COMPONENT_CHARSET;
$17522E38E9E30379809C0F60C7B013EC XmSTRING_COMPONENT_DIRECTION;
MACRO_XmDEFAULT_FOREGROUND XmSTRING_COMPONENT_END;
$17522E38E9E30379809C0F60C7B013EC XmSTRING_COMPONENT_LOCALE_TEXT;
$17522E38E9E30379809C0F60C7B013EC XmSTRING_COMPONENT_SEPARATOR;
$17522E38E9E30379809C0F60C7B013EC XmSTRING_COMPONENT_TEXT;
$17522E38E9E30379809C0F60C7B013EC XmSTRING_COMPONENT_UNKNOWN;
MACRO_XmDEFAULT_FOREGROUND XmSTRING_COMPONENT_USER_BEGIN;
MACRO_XmDEFAULT_FOREGROUND XmSTRING_COMPONENT_USER_END;
$F6A1388A541021B5B6B649D33F41010C XmSTRING_DIRECTION_DEFAULT;
$F6A1388A541021B5B6B649D33F41010C XmSTRING_DIRECTION_L_TO_R;
$F6A1388A541021B5B6B649D33F41010C XmSTRING_DIRECTION_REVERT;
$F6A1388A541021B5B6B649D33F41010C XmSTRING_DIRECTION_R_TO_L;
MACRO_XmWEAK XmSTRONG_CHECK;
$1B378CA7E6769DBA655D66EA16101D09 XmSYNTHETIC_LOAD;
$1B378CA7E6769DBA655D66EA16101D09 XmSYNTHETIC_NONE;
MACRO_XmSashIndex XmSashIndex;
void XmScaleGetValue(Widget w, int *value);
MACRO_XmScaleIndex XmScaleIndex;
void XmScaleSetValue(Widget w, int value);
void XmScrollBarGetValues(Widget w, int *value, int *slider_size, int *increment, int *page_increment);
MACRO_XmScrollBarIndex XmScrollBarIndex;
void XmScrollBarSetValues(Widget w, int value, int slider_size, int increment, int page_increment, int notify);
void XmScrollVisible(Widget scrw, Widget wid, Dimension hor_margin, Dimension ver_margin);
MACRO_XmScrolledWIndex XmScrolledWIndex;
MACRO_XmScrolledWindowIndex XmScrolledWindowIndex;
void XmScrolledWindowSetAreas(Widget w, Widget hscroll, Widget vscroll, Widget wregion);
MACRO_XmSelectioBIndex XmSelectioBIndex;
Widget XmSelectionBoxGetChild(Widget sb, unsigned int which);
MACRO_XmSelectionBoxIndex XmSelectionBoxIndex;
MACRO_XmSeparatoGIndex XmSeparatoGIndex;
MACRO_XmSeparatorGadgetIndex XmSeparatorGadgetIndex;
MACRO_XmSeparatorIndex XmSeparatorIndex;
XmColorProc XmSetColorCalculation(XmColorProc proc);
void XmSetFontUnit(Display *display, int value);
void XmSetFontUnits(Display *display, int h_value, int v_value);
void XmSetMenuCursor(Display *display, Cursor cursorId);
void XmSetProtocolHooks(Widget shell, Atom property, Atom proto_atom, XtCallbackProc pre_hook, XtPointer pre_closure, XtCallbackProc post_hook, XtPointer post_closure);
MACRO_XmShellIndex XmShellIndex;
Dimension XmStringBaseline(XmFontList fontlist, XmString string);
Boolean XmStringByteCompare(XmString $17, XmString b1);
Boolean XmStringCompare(XmString a, XmString b);
XmString XmStringConcat(XmString a, XmString b);
XmString XmStringCopy(XmString string);
XmString XmStringCreate(char *text, XmStringCharSet charset);
XmFontList XmStringCreateFontList(XFontStruct *font, XmStringCharSet charset);
XmString XmStringCreateLocalized(String text);
XmString XmStringCreateLtoR(char *text, XmStringCharSet charset);
XmString XmStringCreateSimple(char *text);
XmString XmStringDirectionCreate(int direction);
void XmStringDraw(Display *d, Window w, XmFontList fontlist, XmString string, GC gc, int x, int y, int width, unsigned int align, unsigned int lay_dir, XRectangle *clip);
void XmStringDrawImage(Display *d, Window w, XmFontList fontlist, XmString string, GC gc, int x, int y, int width, unsigned int align, unsigned int lay_dir, XRectangle *clip);
void XmStringDrawUnderline(Display *d, Window w, XmFontList fntlst, XmString str, GC gc, int x, int y, int width, unsigned int align, unsigned int lay_dir, XRectangle *clip, XmString under);
Boolean XmStringEmpty(XmString string);
void XmStringExtent(XmFontList fontlist, XmString string, Dimension *width, Dimension *height);
void XmStringFree(XmString string);
void XmStringFreeContext(XmStringContext context);
Boolean XmStringGetLtoR(XmString string, XmStringCharSet charset, char **text);
XmStringComponentType XmStringGetNextComponent(XmStringContext context, char **text, XmStringCharSet *charset, XmStringDirection *direction, XmStringComponentType *unknown_tag, unsigned __int16 *unknown_length, unsigned __int8 **unknown_value);
Boolean XmStringGetNextSegment(XmStringContext context, char **text, XmStringCharSet *charset, XmStringDirection *direction, Boolean *separator);
Boolean XmStringHasSubstring(XmString string, XmString substring);
Dimension XmStringHeight(XmFontList fontlist, XmString string);
Boolean XmStringInitContext(XmStringContext *context, XmString string);
int XmStringLength(XmString string);
int XmStringLineCount(XmString string);
XmString XmStringLtoRCreate(char *text, XmStringCharSet charset);
XmString XmStringNConcat(XmString first, XmString second, int n);
XmString XmStringNCopy(XmString str, int n);
XmStringComponentType XmStringPeekNextComponent(XmStringContext context);
XmString XmStringSegmentCreate(char *text, XmStringCharSet charset, int direction, int separator);
XmString XmStringSeparatorCreate(void);
Dimension XmStringWidth(XmFontList fontlist, XmString string);
MACRO_XmBACKGROUND XmTAB_ANY;
$7F2B51D7BA6B441FB87F459A5B295871 XmTAB_GROUP;
$53D85B5D788E52D277529232F64946A1 XmTAB_NAVIGABLE;
$F1BD9F0A1A3AD97A054FAC600A5CBCD3 XmTEAROFF_BUTTON_BIT;
$6B7EBACD75708F75DFC04DB2E733742F XmTEAR_OFF_DISABLED;
$6B7EBACD75708F75DFC04DB2E733742F XmTEAR_OFF_ENABLED;
$8F8E6D9517AB45AA51A20D9C7A3335AA XmTEXT_BACKWARD;
$F1BD9F0A1A3AD97A054FAC600A5CBCD3 XmTEXT_BIT;
MACRO_XmTEXT_DRAG XmTEXT_DRAG_ICON_HEIGHT;
MACRO_XmTEXT XmTEXT_DRAG_ICON_WIDTH;
MACRO_XmTEXT_DRAG XmTEXT_DRAG_ICON_X_HOT;
MACRO_XmTEXT_DRAG XmTEXT_DRAG_ICON_Y_HOT;
$F1BD9F0A1A3AD97A054FAC600A5CBCD3 XmTEXT_FIELD_BIT;
$D06503B10BF0E4ACB2E829F55AF9893F XmTEXT_FONTLIST;
$8F8E6D9517AB45AA51A20D9C7A3335AA XmTEXT_FORWARD;
MACRO_XmUNSPECIFIED_ICON XmTINY_ICON_SIZE;
$273F9245AF4031A58D8B6B8D9D4CC35E XmTITLE;
$273F9245AF4031A58D8B6B8D9D4CC35E XmTOGGLEBUTTON;
$F1BD9F0A1A3AD97A054FAC600A5CBCD3 XmTOGGLE_BUTTON_BIT;
$F1BD9F0A1A3AD97A054FAC600A5CBCD3 XmTOGGLE_BUTTON_GADGET_BIT;
MACRO_XmTOP XmTOP_LEFT;
$17DC033B3C2AE84FB8F187DC408B09AC XmTOP_LEVEL_ENTER;
$17DC033B3C2AE84FB8F187DC408B09AC XmTOP_LEVEL_LEAVE;
MACRO_XmTOP_RIGHT XmTOP_RIGHT;
MACRO_XmBACKGROUND XmTOP_SHADOW;
MACRO_XmTO XmTO_ACTIVE_BIT;
MACRO_XmTO XmTO_FROM_INIT_BIT;
MACRO_XmTO XmTO_TORN_OFF_BIT;
MACRO_XmTO XmTO_VISUAL_DIRTY_BIT;
MACRO_XmTRANSFER XmTRANSFER_FAILURE;
MACRO_XmTRANSFER XmTRANSFER_SUCCESS;
$78DDDB14FA44845ABB8298E040479BD0 XmTRAVERSE_CURRENT;
$78DDDB14FA44845ABB8298E040479BD0 XmTRAVERSE_DOWN;
$78DDDB14FA44845ABB8298E040479BD0 XmTRAVERSE_HOME;
$78DDDB14FA44845ABB8298E040479BD0 XmTRAVERSE_LEFT;
$78DDDB14FA44845ABB8298E040479BD0 XmTRAVERSE_NEXT;
$78DDDB14FA44845ABB8298E040479BD0 XmTRAVERSE_NEXT_TAB_GROUP;
$78DDDB14FA44845ABB8298E040479BD0 XmTRAVERSE_PREV;
$78DDDB14FA44845ABB8298E040479BD0 XmTRAVERSE_PREV_TAB_GROUP;
$78DDDB14FA44845ABB8298E040479BD0 XmTRAVERSE_RIGHT;
$78DDDB14FA44845ABB8298E040479BD0 XmTRAVERSE_UP;
Boolean XmTargetsAreCompatible(Display *dpy, Atom *exportTargets, Cardinal numExportTargets, Atom *importTargets, Cardinal numImportTargets);
MACRO_XmToggleButtonIndex XmTearOffButtonIndex;
void XmTextClearSelection(Widget widget, Time clear_time);
Boolean XmTextCopy(Widget widget, Time copy_time);
Boolean XmTextCut(Widget widget, Time cut_time);
void XmTextDisableRedisplay(Widget widget);
void XmTextEnableRedisplay(Widget widget);
void XmTextFieldClearSelection(Widget w, Time sel_time);
Boolean XmTextFieldCopy(Widget w, Time clip_time);
Boolean XmTextFieldCut(Widget w, Time clip_time);
Boolean XmTextFieldGetAddMode(Widget w);
int XmTextFieldGetBaseline(Widget w);
XmTextPosition XmTextFieldGetCursorPosition(Widget w);
Boolean XmTextFieldGetEditable(Widget w);
XmTextPosition XmTextFieldGetInsertionPosition(Widget w);
XmTextPosition XmTextFieldGetLastPosition(Widget w);
int XmTextFieldGetMaxLength(Widget w);
char *XmTextFieldGetSelection(Widget w);
Boolean XmTextFieldGetSelectionPosition(Widget w, XmTextPosition *left, XmTextPosition *right);
wchar_t *XmTextFieldGetSelectionWcs(Widget w);
char *XmTextFieldGetString(Widget w);
wchar_t *XmTextFieldGetStringWcs(Widget w);
int XmTextFieldGetSubstring(Widget widget, XmTextPosition start, int num_chars, int buf_size, char *buffer);
int XmTextFieldGetSubstringWcs(Widget widget, XmTextPosition start, int num_chars, int buf_size, wchar_t *buffer);
void XmTextFieldInsert(Widget w, XmTextPosition position, char *value);
void XmTextFieldInsertWcs(Widget w, XmTextPosition position, wchar_t *wcstring);
Boolean XmTextFieldPaste(Widget w);
Boolean XmTextFieldPosToXY(Widget w, XmTextPosition position, Position *x, Position *y);
Boolean XmTextFieldRemove(Widget w);
void XmTextFieldReplace(Widget w, XmTextPosition from_pos, XmTextPosition to_pos, char *value);
void XmTextFieldReplaceWcs(Widget w, XmTextPosition from_pos, XmTextPosition to_pos, wchar_t *wc_value);
void XmTextFieldSetAddMode(Widget w, int state);
void XmTextFieldSetCursorPosition(Widget w, XmTextPosition position);
void XmTextFieldSetEditable(Widget w, int editable);
void XmTextFieldSetHighlight(Widget w, XmTextPosition left, XmTextPosition right, XmHighlightMode mode);
void XmTextFieldSetInsertionPosition(Widget w, XmTextPosition position);
void XmTextFieldSetMaxLength(Widget w, int max_length);
void XmTextFieldSetSelection(Widget w, XmTextPosition first, XmTextPosition last, Time sel_time);
void XmTextFieldSetString(Widget w, char *value);
void XmTextFieldSetStringWcs(Widget w, wchar_t *wc_value);
void XmTextFieldShowPosition(Widget w, XmTextPosition position);
XmTextPosition XmTextFieldXYToPos(Widget w, int x, int y);
Boolean XmTextFindString(Widget w, XmTextPosition start, char *search_string, XmTextDirection direction, XmTextPosition *position);
Boolean XmTextFindStringWcs(Widget w, XmTextPosition start, wchar_t *wc_string, XmTextDirection direction, XmTextPosition *position);
Boolean XmTextGetAddMode(Widget widget);
int XmTextGetBaseline(Widget widget);
XmTextPosition XmTextGetCursorPosition(Widget widget);
Boolean XmTextGetEditable(Widget widget);
XmTextPosition XmTextGetInsertionPosition(Widget widget);
XmTextPosition XmTextGetLastPosition(Widget widget);
int XmTextGetMaxLength(Widget widget);
char *XmTextGetSelection(Widget widget);
Boolean XmTextGetSelectionPosition(Widget widget, XmTextPosition *left, XmTextPosition *right);
wchar_t *XmTextGetSelectionWcs(Widget widget);
XmTextSource XmTextGetSource(Widget widget);
char *XmTextGetString(Widget widget);
wchar_t *XmTextGetStringWcs(Widget widget);
int XmTextGetSubstring(Widget widget, XmTextPosition start, int num_chars, int buf_size, char *buffer);
int XmTextGetSubstringWcs(Widget widget, XmTextPosition start, int num_chars, int buf_size, wchar_t *buffer);
XmTextPosition XmTextGetTopCharacter(Widget widget);
MACRO_XmTextIndex XmTextIndex;
void XmTextInsert(Widget widget, XmTextPosition position, char *value);
void XmTextInsertWcs(Widget widget, XmTextPosition position, wchar_t *wc_value);
Boolean XmTextPaste(Widget widget);
Boolean XmTextPosToXY(Widget widget, XmTextPosition position, Position *x, Position *y);
Boolean XmTextRemove(Widget widget);
void XmTextReplace(Widget widget, XmTextPosition frompos, XmTextPosition topos, char *value);
void XmTextReplaceWcs(Widget widget, XmTextPosition frompos, XmTextPosition topos, wchar_t *value);
void XmTextScroll(Widget widget, int n);
void XmTextSetAddMode(Widget widget, int state);
void XmTextSetCursorPosition(Widget widget, XmTextPosition position);
void XmTextSetEditable(Widget widget, int editable);
void XmTextSetHighlight(Widget w, XmTextPosition left, XmTextPosition right, XmHighlightMode mode);
void XmTextSetInsertionPosition(Widget widget, XmTextPosition position);
void XmTextSetMaxLength(Widget widget, int max_length);
void XmTextSetSelection(Widget widget, XmTextPosition first, XmTextPosition last, Time set_time);
void XmTextSetSource(Widget widget, XmTextSource source, XmTextPosition top_character, XmTextPosition cursor_position);
void XmTextSetString(Widget widget, char *value);
void XmTextSetStringWcs(Widget widget, wchar_t *wc_value);
void XmTextSetTopCharacter(Widget widget, XmTextPosition top_character);
void XmTextShowPosition(Widget widget, XmTextPosition position);
XmTextPosition XmTextXYToPos(Widget widget, int x, int y);
MACRO_XmToggleBGIndex XmToggleBGIndex;
MACRO_XmToggleBIndex XmToggleBIndex;
Boolean XmToggleButtonGadgetGetState(Widget w);
MACRO_XmToggleButtonGadgetIndex XmToggleButtonGadgetIndex;
void XmToggleButtonGadgetSetState(Widget w, int newstate, int notify);
Boolean XmToggleButtonGetState(Widget w);
MACRO_XmToggleButtonIndex XmToggleButtonIndex;
void XmToggleButtonSetState(Widget w, int newstate, int notify);
MACRO_XmTopLevelShellIndex XmTopLevelShellIndex;
Widget XmTrackingEvent(Widget widget, Cursor cursor, int confineTo, XEvent *pev);
Widget XmTrackingLocate(Widget widget, Cursor cursor, int confineTo);
MACRO_VendorShellIndex XmTransientShellIndex;
void XmTranslateKey(Display *dpy, unsigned int keycode, Modifiers modifiers, Modifiers *modifiers_return, KeySym *keysym_return);
$B3EE7E070A91A7478A9093983E000B1C XmUNMAP;
$C5F64CB5D867F350BA974582962FEC30 XmUNPOST;
$C5F64CB5D867F350BA974582962FEC30 XmUNPOST_AND_REPLAY;
MACRO_XmUNSPECIFIED_0 XmUNSPECIFIED;
MACRO_XmUNSPECIFIED_ICON XmUNSPECIFIED_ICON_SIZE;
MACRO_XmUNSPECIFIED XmUNSPECIFIED_PIXMAP;
MACRO_XmVERSION XmUPDATE_LEVEL;
Boolean XmUninstallImage(XImage *image);
void XmUpdateDisplay(Widget w);
MACRO_XmNO_DROP XmVALID_DROP_SITE;
$5619CCF50B7A6021E29EA9A230F1DFA1 XmVARIABLE;
$F1BD9F0A1A3AD97A054FAC600A5CBCD3 XmVENDOR_SHELL_BIT;
MACRO_XmVERSION XmVERSION;
$89FC1B20F172ACED79941DFC60097C46 XmVERTICAL;
$02B2F3591FEAEB4334C5D9D93533B7DF XmVISIBILITY_FULLY_OBSCURED;
$02B2F3591FEAEB4334C5D9D93533B7DF XmVISIBILITY_PARTIALLY_OBSCURED;
$02B2F3591FEAEB4334C5D9D93533B7DF XmVISIBILITY_UNOBSCURED;
Widget XmVaCreateSimpleCheckBox(Widget parent, String name, XtCallbackProc callback, ...);
Widget XmVaCreateSimpleMenuBar(Widget parent, String name, ...);
Widget XmVaCreateSimpleOptionMenu(Widget parent, String name, XmString option_label, KeySym option_mnemonic, int button_set, XtCallbackProc callback, ...);
Widget XmVaCreateSimplePopupMenu(Widget parent, String name, XtCallbackProc callback, ...);
Widget XmVaCreateSimplePulldownMenu(Widget parent, String name, int post_from_button, XtCallbackProc callback, ...);
Widget XmVaCreateSimpleRadioBox(Widget parent, String name, int button_set, XtCallbackProc callback, ...);
MACRO_WMShellIndex XmVendorShellIndex;
MACRO_XmVERSION XmVersion;
MACRO_XmWEAK XmWEAK_CHECK;
$2305C92ABFBD7FF576E80BDDBAD2E755 XmWINDOW;
MACRO_XmWMShellIndex XmWMShellIndex;
$BCBFBEF9B4DBDCBDB019F39924A8EC6D XmWORK_AREA;
Boolean XmWidgetGetBaselines(Widget wid, Dimension **baselines, int *line_count);
Boolean XmWidgetGetDisplayRect(Widget wid, XRectangle *displayrect);
MACRO_RectObjIndex XmWindowObjIndex;
void XmbDrawImageString(Display *, Drawable, XFontSet, GC, int, int, const char *, int);
void XmbDrawString(Display *, Drawable, XFontSet, GC, int, int, const char *, int);
void XmbDrawText(Display *, Drawable, GC, int, int, XmbTextItem *, int);
int XmbLookupString(XIC, XKeyPressedEvent *, char *, int, KeySym *, int *);
char *XmbResetIC(XIC);
void XmbSetWMProperties(Display *, Window, const char *, const char *, char **, int, XSizeHints *, XWMHints *, XClassHint *);
int XmbTextEscapement(XFontSet, const char *, int);
int XmbTextExtents(XFontSet, const char *, int, XRectangle *, XRectangle *);
int XmbTextListToTextProperty(Display *, char **, int, XICCEncodingStyle, XTextProperty *);
int XmbTextPerCharExtents(XFontSet, const char *, int, XRectangle *, XRectangle *, int, int *, XRectangle *, XRectangle *);
int XmbTextPropertyToTextList(Display *, XTextProperty *, char ***, int *);
void XmbufChangeBufferAttributes(Display *, Multibuffer, unsigned __int64, XmbufSetBufferAttributes *);
void XmbufChangeWindowAttributes(Display *, Window, unsigned __int64, XmbufSetWindowAttributes *);
void XmbufClearBufferArea(Display *, Multibuffer, int, int, unsigned int, unsigned int, int);
int XmbufCreateBuffers(Display *, Window, int, int, int, Multibuffer *);
Window XmbufCreateStereoWindow(Display *, Window, int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, Visual *, unsigned __int64, XSetWindowAttributes *, Multibuffer *, Multibuffer *);
void XmbufDestroyBuffers(Display *, Window);
void XmbufDisplayBuffers(Display *, int, Multibuffer *, int, int);
int XmbufGetBufferAttributes(Display *, Multibuffer, XmbufBufferAttributes *);
int XmbufGetScreenInfo(Display *, Drawable, int *, XmbufBufferInfo **, int *, XmbufBufferInfo **);
int XmbufGetVersion(Display *, int *, int *);
int XmbufGetWindowAttributes(Display *, Window, XmbufWindowAttributes *);
int XmbufQueryExtension(Display *, int *, int *);
void XmeFlushIconFileCache(String path);
$EF45388F68EDF15F1284C14D8C9AFBF9 XmsdLeft;
$EF45388F68EDF15F1284C14D8C9AFBF9 XmsdRight;
CloseHook XmuAddCloseDisplayHook(Display *, XmuCloseHookProc, XPointer);
void XmuAddInitializer(XmuInitializerProc, XPointer);
int XmuAllStandardColormaps(Display *);
void XmuCallInitializers(XtAppContext);
Window XmuClientWindow(Display *, Window);
int XmuCompareISOLatin1(const char *, const char *);
Boolean XmuConvertStandardSelection(Widget, Time, Atom *, Atom *, Atom *, XPointer *, unsigned __int64 *, int *);
void XmuCopyISOLatin1Lowered(char *, const char *);
void XmuCopyISOLatin1Uppered(char *, const char *);
int XmuCreateColormap(Display *, XStandardColormap *);
Pixmap XmuCreatePixmapFromBitmap(Display *, Drawable, Pixmap, unsigned int, unsigned int, unsigned int, unsigned __int64, unsigned __int64);
Pixmap XmuCreateStippledPixmap(Screen *, Pixel, Pixel, unsigned int);
int XmuCursorNameToIndex(const char *);
void XmuCvtFunctionToCallback(XrmValue *, Cardinal *, XrmValuePtr, XrmValuePtr);
void XmuCvtStringToBackingStore(XrmValue *, Cardinal *, XrmValuePtr, XrmValuePtr);
void XmuCvtStringToBitmap(XrmValue *, Cardinal *, XrmValuePtr, XrmValuePtr);
Boolean XmuCvtStringToColorCursor(Display *, XrmValue *, Cardinal *, XrmValuePtr, XrmValuePtr, XtPointer *);
void XmuCvtStringToCursor(XrmValue *, Cardinal *, XrmValuePtr, XrmValuePtr);
void XmuCvtStringToGravity(XrmValue *, Cardinal *, XrmValuePtr, XrmValuePtr);
void XmuCvtStringToJustify(XrmValue *, Cardinal *, XrmValuePtr, XrmValuePtr);
void XmuCvtStringToLong(XrmValue *, Cardinal *, XrmValuePtr, XrmValuePtr);
void XmuCvtStringToOrientation(XrmValue *, Cardinal *, XrmValuePtr, XrmValuePtr);
Boolean XmuCvtStringToShapeStyle(Display *, XrmValue *, Cardinal *, XrmValuePtr, XrmValuePtr, XtPointer *);
void XmuCvtStringToWidget(XrmValue *, Cardinal *, XrmValuePtr, XrmValuePtr);
XmuDisplayQueueEntry *XmuDQAddDisplay(XmuDisplayQueue *, Display *, XPointer);
XmuDisplayQueue *XmuDQCreate(XmuCloseDisplayQueueProc, XmuFreeDisplayQueueProc, XPointer);
int XmuDQDestroy(XmuDisplayQueue *, int);
XmuDisplayQueueEntry *XmuDQLookupDisplay(XmuDisplayQueue *, Display *);
int XmuDQRemoveDisplay(XmuDisplayQueue *, Display *);
void XmuDeleteStandardColormap(Display *, int, Atom);
void XmuDrawLogo(Display *, Drawable, GC, GC, int, int, unsigned int, unsigned int);
void XmuDrawRoundedRectangle(Display *, Drawable, GC, int, int, int, int, int, int);
void XmuFillRoundedRectangle(Display *, Drawable, GC, int, int, int, int, int, int);
char *XmuGetAtomName(Display *, Atom);
int XmuGetColormapAllocation(XVisualInfo *, Atom, unsigned __int64 *, unsigned __int64 *, unsigned __int64 *);
int XmuGetHostname(char *, int);
Atom XmuInternAtom(Display *, AtomPtr);
void XmuInternStrings(Display *, String *, Cardinal, Atom *);
Pixmap XmuLocateBitmapFile(Screen *, const char *, char *, int, int *, int *, int *, int *);
Pixmap XmuLocatePixmapFile(Screen *, const char *, unsigned __int64, unsigned __int64, unsigned int, char *, int, int *, int *, int *, int *);
int XmuLookupCloseDisplayHook(Display *, CloseHook, XmuCloseHookProc, XPointer);
int XmuLookupStandardColormap(Display *, int, VisualID, unsigned int, Atom, int, int);
AtomPtr XmuMakeAtom(const char *);
char *XmuNameOfAtom(AtomPtr);
Boolean XmuNewCvtStringToWidget(Display *, XrmValue *, Cardinal *, XrmValue *, XrmValue *, XtPointer *);
int XmuPrintDefaultErrorMessage(Display *, XErrorEvent *, FILE *);
int XmuReadBitmapData(FILE *, unsigned int *, unsigned int *, unsigned __int8 **, int *, int *);
int XmuReadBitmapDataFromFile(const char *, unsigned int *, unsigned int *, unsigned __int8 **, int *, int *);
void XmuRegisterExternalAgent(Widget, XtPointer, XEvent *, Boolean *);
void XmuReleaseStippledPixmap(Screen *, Pixmap);
int XmuRemoveCloseDisplayHook(Display *, CloseHook, XmuCloseHookProc, XPointer);
Boolean XmuReshapeWidget(Widget, int, int, int);
Screen *XmuScreenOfWindow(Display *, Window);
MACRO_XmuShapeRectangle XmuShapeEllipse;
MACRO_XmuShapeRectangle XmuShapeOval;
MACRO_XmuShapeRectangle XmuShapeRectangle;
MACRO_XmuShapeRectangle XmuShapeRoundedRectangle;
int XmuSimpleErrorHandler(Display *, XErrorEvent *);
XStandardColormap *XmuStandardColormap(Display *, int, VisualID, unsigned int, Atom, Colormap, unsigned __int64, unsigned __int64, unsigned __int64);
int XmuUpdateMapHints(Display *, Window, XSizeHints *);
int XmuVisualStandardColormaps(Display *, int, VisualID, unsigned int, int, int);
int XmuWnCountOwnedResources(XmuWidgetNode *, XmuWidgetNode *, int);
void XmuWnFetchResources(XmuWidgetNode *, Widget, XmuWidgetNode *);
void XmuWnInitializeNodes(XmuWidgetNode *, int);
XmuWidgetNode *XmuWnNameToNode(XmuWidgetNode *, int, const char *);
void XpCancelDoc(Display *display, int discard);
void XpCancelJob(Display *display, int discard);
void XpCancelPage(Display *display, int discard);
XPContext XpCreateContext(Display *display, char *printer_name);
void XpDestroyContext(Display *display, XPContext print_context);
void XpEndDoc(Display *display);
void XpEndJob(Display *display);
void XpEndPage(Display *display);
void XpFreePrinterList(XPPrinterList printer_list);
char *XpGetAttributes(Display *display, XPContext print_context, XPAttributes type);
int XpGetAuthParams(Display *print_display, Display *video_display, Display **selection_display, Atom *selection, Atom *target);
XPContext XpGetContext(Display *display);
int XpGetDocumentData(Display *display, XPContext context, XPSaveProc save_proc, XPFinishProc finish_proc, XPointer client_data);
int XpGetImageResolution(Display *display, XPContext print_context);
char *XpGetLocaleHinter(XPHinterProc *hinter_proc);
char *XpGetLocaleNetString();
char *XpGetOneAttribute(Display *display, XPContext print_context, XPAttributes type, char *attribute_name);
int XpGetPageDimensions(Display *display, XPContext print_context, unsigned __int16 *width, unsigned __int16 *height, XRectangle *reproducible_area);
int XpGetPdmStartParams(Display *print_display, Window print_window, XPContext print_context, Display *video_display, Window video_window, Display **selection_display, Atom *selection, Atom *type, int *format, unsigned __int8 **data, int *nelements);
XPPrinterList XpGetPrinterList(Display *display, char *printer_name, int *list_count);
Screen *XpGetScreenOfContext(Display *display, XPContext print_context);
unsigned __int64 XpInputSelected(Display *display, XPContext print_context, unsigned __int64 *all_events_mask);
char *XpNotifyPdm(Display *print_display, Window print_window, XPContext print_context, Display *video_display, Window video_window, int auth_flag);
void XpPutDocumentData(Display *display, Drawable drawable, unsigned __int8 *data, int data_len, char *doc_fmt, char *options);
int XpQueryExtension(Display *display, int *event_base_return, int *error_base_return);
Screen **XpQueryScreens(Display *display, int *list_count);
int XpQueryVersion(Display *display, __int16 *major_version, __int16 *minor_version);
void XpRehashPrinterList(Display *display);
void XpSelectInput(Display *display, XPContext print_context, unsigned __int64 event_mask);
int XpSendAuth(Display *display, Window window);
int XpSendOneTicket(Display *display, Window window, Xauth *ticket, int more);
void XpSetAttributes(Display *display, XPContext print_context, XPAttributes type, char *pool, XPAttrReplacement replacement_rule);
void XpSetContext(Display *display, XPContext print_context);
int XpSetImageResolution(Display *display, XPContext print_context, int image_res, int *prev_res);
void XpSetLocaleHinter(XPHinterProc hinter_proc, char *hinter_desc);
void XpStartDoc(Display *display, XPDocumentType type);
void XpStartJob(Display *display, XPSaveData save_data);
void XpStartPage(Display *display, Window window);
char *Xpermalloc(unsigned int);
__int64 *Xrealloc();
$5A773820A0D67B4336D2749C8D45D255 XrmBindLoosely;
$5A773820A0D67B4336D2749C8D45D255 XrmBindTightly;
void XrmCombineDatabase(XrmDatabase, XrmDatabase *, int);
int XrmCombineFileDatabase(const char *, XrmDatabase *, int);
void XrmDestroyDatabase(XrmDatabase);
MACRO_XrmEnumAllLevels XrmEnumAllLevels;
MACRO_XrmEnumAllLevels XrmEnumOneLevel;
int XrmEnumerateDatabase(XrmDatabase, XrmNameList, XrmClassList, int, int (*)(XrmDatabase *, XrmBindingList, XrmQuarkList, XrmRepresentation *, XrmValue *, XPointer), XPointer);
XrmDatabase XrmGetDatabase(Display *);
XrmDatabase XrmGetFileDatabase(const char *);
int XrmGetResource(XrmDatabase, const char *, const char *, char **, XrmValue *);
XrmDatabase XrmGetStringDatabase(const char *);
void XrmInitialize(void);
char *XrmLocaleOfDatabase(XrmDatabase);
void XrmMergeDatabases(XrmDatabase, XrmDatabase *);
void XrmParseCommand(XrmDatabase *, XrmOptionDescList, int, const char *, int *, char **);
XrmQuark XrmPermStringToQuark(const char *);
void XrmPutFileDatabase(XrmDatabase, const char *);
void XrmPutLineResource(XrmDatabase *, const char *);
void XrmPutResource(XrmDatabase *, const char *, const char *, XrmValue *);
void XrmPutStringResource(XrmDatabase *, const char *, const char *);
int XrmQGetResource(XrmDatabase, XrmNameList, XrmClassList, XrmRepresentation *, XrmValue *);
int XrmQGetSearchList(XrmDatabase, XrmNameList, XrmClassList, XrmSearchList, int);
int XrmQGetSearchResource(XrmSearchList, XrmName, XrmClass, XrmRepresentation *, XrmValue *);
void XrmQPutResource(XrmDatabase *, XrmBindingList, XrmQuarkList, XrmRepresentation, XrmValue *);
void XrmQPutStringResource(XrmDatabase *, XrmBindingList, XrmQuarkList, const char *);
XrmString XrmQuarkToString(XrmQuark);
void XrmSetDatabase(Display *, XrmDatabase);
void XrmStringToBindingQuarkList(const char *, XrmBindingList, XrmQuarkList);
XrmQuark XrmStringToQuark(const char *);
void XrmStringToQuarkList(const char *, XrmQuarkList);
XrmQuark XrmUniqueQuark(void);
$405C8636DEE5D8D2C9F0466394C3E3EA XrmoptionIsArg;
$405C8636DEE5D8D2C9F0466394C3E3EA XrmoptionNoArg;
$405C8636DEE5D8D2C9F0466394C3E3EA XrmoptionResArg;
$405C8636DEE5D8D2C9F0466394C3E3EA XrmoptionSepArg;
$405C8636DEE5D8D2C9F0466394C3E3EA XrmoptionSkipArg;
$405C8636DEE5D8D2C9F0466394C3E3EA XrmoptionSkipLine;
$405C8636DEE5D8D2C9F0466394C3E3EA XrmoptionSkipNArgs;
$405C8636DEE5D8D2C9F0466394C3E3EA XrmoptionStickyArg;
void XtAddActions(XtActionList, Cardinal);
void XtAddCallback(Widget, const char *, XtCallbackProc, XtPointer);
void XtAddCallbacks(Widget, const char *, XtCallbackList);
void XtAddConverter(const char *, const char *, XtConverter, XtConvertArgList, Cardinal);
void XtAddEventHandler(Widget, EventMask, int, XtEventHandler, XtPointer);
void XtAddExposureToRegion(XEvent *, Region);
void XtAddGrab(Widget, int, int);
XtInputId XtAddInput(int, XtPointer, XtInputCallbackProc, XtPointer);
void XtAddRawEventHandler(Widget, EventMask, int, XtEventHandler, XtPointer);
XtIntervalId XtAddTimeOut(unsigned __int64, XtTimerCallbackProc, XtPointer);
XtWorkProcId XtAddWorkProc(XtWorkProc, XtPointer);
$D2435FF4F3AAF25C455EAA2CA1747697 XtAddress;
MACRO_XtInputNoneMask XtAllEvents;
GC XtAllocateGC(Widget, Cardinal, XtGCMask, XGCValues *, XtGCMask, XtGCMask);
XtActionHookId XtAppAddActionHook(XtAppContext, XtActionHookProc, XtPointer);
void XtAppAddActions(XtAppContext, XtActionList, Cardinal);
XtBlockHookId XtAppAddBlockHook(XtAppContext, XtBlockHookProc, XtPointer);
void XtAppAddConverter(XtAppContext, const char *, const char *, XtConverter, XtConvertArgList, Cardinal);
XtInputId XtAppAddInput(XtAppContext, int, XtPointer, XtInputCallbackProc, XtPointer);
XtSignalId XtAppAddSignal(XtAppContext, XtSignalCallbackProc, XtPointer);
XtIntervalId XtAppAddTimeOut(XtAppContext, unsigned __int64, XtTimerCallbackProc, XtPointer);
XtWorkProcId XtAppAddWorkProc(XtAppContext, XtWorkProc, XtPointer);
Widget XtAppCreateShell(const char *, const char *, WidgetClass, Display *, ArgList, Cardinal);
void XtAppError(XtAppContext, const char *);
void XtAppErrorMsg(XtAppContext, const char *, const char *, const char *, const char *, String *, Cardinal *);
XrmDatabase *XtAppGetErrorDatabase(XtAppContext);
void XtAppGetErrorDatabaseText(XtAppContext, const char *, const char *, const char *, const char *, String, int, XrmDatabase);
Boolean XtAppGetExitFlag(XtAppContext);
unsigned __int64 XtAppGetSelectionTimeout(XtAppContext);
Widget XtAppInitialize(XtAppContext *, const char *, XrmOptionDescList, Cardinal, int *, String *, String *, ArgList, Cardinal);
void XtAppLock(XtAppContext);
void XtAppMainLoop(XtAppContext);
void XtAppNextEvent(XtAppContext, XEvent *);
Boolean XtAppPeekEvent(XtAppContext, XEvent *);
XtInputMask XtAppPending(XtAppContext);
void XtAppProcessEvent(XtAppContext, XtInputMask);
void XtAppReleaseCacheRefs(XtAppContext, XtCacheRef *);
XtErrorHandler XtAppSetErrorHandler(XtAppContext, XtErrorHandler);
XtErrorMsgHandler XtAppSetErrorMsgHandler(XtAppContext, XtErrorMsgHandler);
void XtAppSetExitFlag(XtAppContext);
void XtAppSetFallbackResources(XtAppContext, String *);
void XtAppSetSelectionTimeout(XtAppContext, unsigned __int64);
void XtAppSetTypeConverter(XtAppContext, const char *, const char *, XtTypeConverter, XtConvertArgList, Cardinal, XtCacheType, XtDestructor);
XtErrorHandler XtAppSetWarningHandler(XtAppContext, XtErrorHandler);
XtErrorMsgHandler XtAppSetWarningMsgHandler(XtAppContext, XtErrorMsgHandler);
void XtAppUnlock(XtAppContext);
void XtAppWarning(XtAppContext, const char *);
void XtAppWarningMsg(XtAppContext, const char *, const char *, const char *, const char *, String *, Cardinal *);
void XtAugmentTranslations(Widget, XtTranslations);
$D2435FF4F3AAF25C455EAA2CA1747697 XtBaseOffset;
EventMask XtBuildEventMask(Widget);
MACRO_XtCWQueryOnly XtCWQueryOnly;
MACRO_XtCacheNone XtCacheAll;
MACRO_XtCacheNone XtCacheByDisplay;
MACRO_XtCacheNone XtCacheNone;
MACRO_XtCacheNone XtCacheRefCount;
Boolean XtCallAcceptFocus(Widget, Time *);
void XtCallActionProc(Widget, const char *, XEvent *, String *, Cardinal);
void XtCallCallbackList(Widget, XtCallbackList, XtPointer);
void XtCallCallbacks(Widget, const char *, XtPointer);
Boolean XtCallConverter(Display *, XtTypeConverter, XrmValuePtr, Cardinal, XrmValuePtr, XrmValue *, XtCacheRef *);
void XtCallbackExclusive(Widget, XtPointer, XtPointer);
$B9867847443BB25721460208505189B7 XtCallbackHasNone;
$B9867847443BB25721460208505189B7 XtCallbackHasSome;
$B9867847443BB25721460208505189B7 XtCallbackNoList;
void XtCallbackNone(Widget, XtPointer, XtPointer);
void XtCallbackNonexclusive(Widget, XtPointer, XtPointer);
void XtCallbackPopdown(Widget, XtPointer, XtPointer);
void XtCallbackReleaseCacheRef(Widget, XtPointer, XtPointer);
void XtCallbackReleaseCacheRefList(Widget, XtPointer, XtPointer);
char *XtCalloc(Cardinal, Cardinal);
void XtCancelSelectionRequest(Widget, Atom);
void XtChangeManagedSet(WidgetList, Cardinal, XtDoChangeProc, XtPointer, WidgetList, Cardinal);
WidgetClass XtClass(Widget);
void XtCloseDisplay(Display *);
MACRO_XtCompositeExtensionVersion XtCompositeExtensionVersion;
void XtConfigureWidget(Widget, int, int, unsigned int, unsigned int, unsigned int);
MACRO_XtConstraintExtensionVersion XtConstraintExtensionVersion;
void XtConvert(Widget, const char *, XrmValue *, const char *, XrmValue *);
Boolean XtConvertAndStore(Widget, const char *, XrmValue *, const char *, XrmValue *);
void XtConvertCase(Display *, KeySym, KeySym *, KeySym *);
XtAppContext XtCreateApplicationContext(void);
Widget XtCreateApplicationShell(const char *, WidgetClass, ArgList, Cardinal);
Widget XtCreateManagedWidget(const char *, WidgetClass, Widget, ArgList, Cardinal);
Widget XtCreatePopupShell(const char *, WidgetClass, Widget, ArgList, Cardinal);
void XtCreateSelectionRequest(Widget, Atom);
Widget XtCreateWidget(const char *, WidgetClass, Widget, ArgList, Cardinal);
void XtCreateWindow(Widget, unsigned int, Visual *, XtValueMask, XSetWindowAttributes *);
Boolean XtCvtColorToPixel(Display *, XrmValuePtr, Cardinal *, XrmValuePtr, XrmValuePtr, XtPointer *);
Boolean XtCvtIntToBool(Display *, XrmValuePtr, Cardinal *, XrmValuePtr, XrmValuePtr, XtPointer *);
Boolean XtCvtIntToBoolean(Display *, XrmValuePtr, Cardinal *, XrmValuePtr, XrmValuePtr, XtPointer *);
Boolean XtCvtIntToColor(Display *, XrmValuePtr, Cardinal *, XrmValuePtr, XrmValuePtr, XtPointer *);
Boolean XtCvtIntToFloat(Display *, XrmValuePtr, Cardinal *, XrmValuePtr, XrmValuePtr, XtPointer *);
Boolean XtCvtIntToFont(Display *, XrmValuePtr, Cardinal *, XrmValuePtr, XrmValuePtr, XtPointer *);
Boolean XtCvtIntToPixel(Display *, XrmValuePtr, Cardinal *, XrmValuePtr, XrmValuePtr, XtPointer *);
Boolean XtCvtIntToPixmap(Display *, XrmValuePtr, Cardinal *, XrmValuePtr, XrmValuePtr, XtPointer *);
Boolean XtCvtIntToShort(Display *, XrmValuePtr, Cardinal *, XrmValuePtr, XrmValuePtr, XtPointer *);
Boolean XtCvtIntToUnsignedChar(Display *, XrmValuePtr, Cardinal *, XrmValuePtr, XrmValuePtr, XtPointer *);
Boolean XtCvtStringToAcceleratorTable(Display *, XrmValuePtr, Cardinal *, XrmValuePtr, XrmValuePtr, XtPointer *);
Boolean XtCvtStringToAtom(Display *, XrmValuePtr, Cardinal *, XrmValuePtr, XrmValuePtr, XtPointer *);
Boolean XtCvtStringToBool(Display *, XrmValuePtr, Cardinal *, XrmValuePtr, XrmValuePtr, XtPointer *);
Boolean XtCvtStringToBoolean(Display *, XrmValuePtr, Cardinal *, XrmValuePtr, XrmValuePtr, XtPointer *);
Boolean XtCvtStringToCommandArgArray(Display *, XrmValuePtr, Cardinal *, XrmValuePtr, XrmValuePtr, XtPointer *);
Boolean XtCvtStringToCursor(Display *, XrmValuePtr, Cardinal *, XrmValuePtr, XrmValuePtr, XtPointer *);
Boolean XtCvtStringToDimension(Display *, XrmValuePtr, Cardinal *, XrmValuePtr, XrmValuePtr, XtPointer *);
Boolean XtCvtStringToDirectoryString(Display *, XrmValuePtr, Cardinal *, XrmValuePtr, XrmValuePtr, XtPointer *);
Boolean XtCvtStringToDisplay(Display *, XrmValuePtr, Cardinal *, XrmValuePtr, XrmValuePtr, XtPointer *);
Boolean XtCvtStringToFile(Display *, XrmValuePtr, Cardinal *, XrmValuePtr, XrmValuePtr, XtPointer *);
Boolean XtCvtStringToFloat(Display *, XrmValuePtr, Cardinal *, XrmValuePtr, XrmValuePtr, XtPointer *);
Boolean XtCvtStringToFont(Display *, XrmValuePtr, Cardinal *, XrmValuePtr, XrmValuePtr, XtPointer *);
Boolean XtCvtStringToFontSet(Display *, XrmValuePtr, Cardinal *, XrmValuePtr, XrmValuePtr, XtPointer *);
Boolean XtCvtStringToFontStruct(Display *, XrmValuePtr, Cardinal *, XrmValuePtr, XrmValuePtr, XtPointer *);
Boolean XtCvtStringToGravity(Display *, XrmValuePtr, Cardinal *, XrmValuePtr, XrmValuePtr, XtPointer *);
Boolean XtCvtStringToInitialState(Display *, XrmValuePtr, Cardinal *, XrmValuePtr, XrmValuePtr, XtPointer *);
Boolean XtCvtStringToInt(Display *, XrmValuePtr, Cardinal *, XrmValuePtr, XrmValuePtr, XtPointer *);
Boolean XtCvtStringToPixel(Display *, XrmValuePtr, Cardinal *, XrmValuePtr, XrmValuePtr, XtPointer *);
Boolean XtCvtStringToRestartStyle(Display *, XrmValuePtr, Cardinal *, XrmValuePtr, XrmValuePtr, XtPointer *);
Boolean XtCvtStringToShort(Display *, XrmValuePtr, Cardinal *, XrmValuePtr, XrmValuePtr, XtPointer *);
Boolean XtCvtStringToTranslationTable(Display *, XrmValuePtr, Cardinal *, XrmValuePtr, XrmValuePtr, XtPointer *);
Boolean XtCvtStringToUnsignedChar(Display *, XrmValuePtr, Cardinal *, XrmValuePtr, XrmValuePtr, XtPointer *);
Boolean XtCvtStringToVisual(Display *, XrmValuePtr, Cardinal *, XrmValuePtr, XrmValuePtr, XtPointer *);
XrmDatabase XtDatabase(Display *);
void XtDestroyApplicationContext(XtAppContext);
void XtDestroyGC(GC);
void XtDestroyWidget(Widget);
void XtDirectConvert(XtConverter, XrmValuePtr, Cardinal, XrmValuePtr, XrmValue *);
void XtDisownSelection(Widget, Atom, Time);
Boolean XtDispatchEvent(XEvent *);
Boolean XtDispatchEventToWidget(Widget, XEvent *);
Display *XtDisplay(Widget);
void XtDisplayInitialize(XtAppContext, Display *, const char *, const char *, XrmOptionDescRec *, Cardinal, int *, char **);
Display *XtDisplayOfObject(Widget);
void XtDisplayStringConversionWarning(Display *, const char *, const char *);
XtAppContext XtDisplayToApplicationContext(Display *);
MACRO_XtDragByPoll XtDragByEvent;
MACRO_XtDragByPoll XtDragByPoll;
void XtError(const char *);
void XtErrorMsg(const char *, const char *, const char *, const char *, String *, Cardinal *);
MACRO_XtExposeNoCompress XtExposeCompressMaximal;
MACRO_XtExposeNoCompress XtExposeCompressMultiple;
MACRO_XtExposeNoCompress XtExposeCompressSeries;
MACRO_XtExposeNoCompress XtExposeGraphicsExpose;
MACRO_XtExposeNoCompress XtExposeGraphicsExposeMerged;
MACRO_XtExposeNoCompress XtExposeNoCompress;
MACRO_XtExposeNoCompress XtExposeNoExpose;
MACRO_XtExposeNoCompress XtExposeNoRegion;
String XtFindFile(const char *, Substitution, Cardinal, XtFilePredicate);
void XtFree(char *);
$7A6D1403076F33F26AB38429B1986DDD XtGeometryAlmost;
$7A6D1403076F33F26AB38429B1986DDD XtGeometryDone;
$7A6D1403076F33F26AB38429B1986DDD XtGeometryNo;
$7A6D1403076F33F26AB38429B1986DDD XtGeometryYes;
KeySym XtGetActionKeysym(XEvent *, Modifiers *);
void XtGetActionList(WidgetClass, XtActionList *, Cardinal *);
void XtGetApplicationNameAndClass(Display *, String *, String *);
void XtGetApplicationResources(Widget, XtPointer, XtResourceList, Cardinal, ArgList, Cardinal);
XtPointer XtGetClassExtension(WidgetClass, Cardinal, XrmQuark, __int64, Cardinal);
void XtGetConstraintResourceList(WidgetClass, XtResourceList *, Cardinal *);
void XtGetDisplays(XtAppContext, Display ***, Cardinal *);
XrmDatabase *XtGetErrorDatabase(void);
void XtGetErrorDatabaseText(const char *, const char *, const char *, const char *, String, int);
GC XtGetGC(Widget, XtGCMask, XGCValues *);
Widget XtGetKeyboardFocusWidget(Widget);
KeySym *XtGetKeysymTable(Display *, KeyCode *, int *);
int XtGetMultiClickTime(Display *);
void XtGetResourceList(WidgetClass, XtResourceList *, Cardinal *);
void XtGetSelectionParameters(Widget, Atom, XtRequestId, Atom *, XtPointer *, unsigned __int64 *, int *);
XSelectionRequestEvent *XtGetSelectionRequest(Widget, Atom, XtRequestId);
unsigned __int64 XtGetSelectionTimeout(void);
void XtGetSelectionValue(Widget, Atom, Atom, XtSelectionCallbackProc, XtPointer, Time);
void XtGetSelectionValueIncremental(Widget, Atom, Atom, XtSelectionCallbackProc, XtPointer, Time);
void XtGetSelectionValues(Widget, Atom, Atom *, int, XtSelectionCallbackProc, XtPointer *, Time);
void XtGetSelectionValuesIncremental(Widget, Atom, Atom *, int, XtSelectionCallbackProc, XtPointer *, Time);
void XtGetSubresources(Widget, XtPointer, const char *, const char *, XtResourceList, Cardinal, ArgList, Cardinal);
void XtGetSubvalues(XtPointer, XtResourceList, Cardinal, ArgList, Cardinal);
void XtGetValues(Widget, ArgList, Cardinal);
void XtGrabButton(Widget, int, Modifiers, int, unsigned int, int, int, Window, Cursor);
$3A62C614979A92BEB5F3FA9C72B43E27 XtGrabExclusive;
void XtGrabKey(Widget, unsigned int, Modifiers, int, int, int);
int XtGrabKeyboard(Widget, int, int, int, Time);
$3A62C614979A92BEB5F3FA9C72B43E27 XtGrabNone;
$3A62C614979A92BEB5F3FA9C72B43E27 XtGrabNonexclusive;
int XtGrabPointer(Widget, int, unsigned int, int, int, Window, Cursor, Time);
XtCallbackStatus XtHasCallbacks(Widget, const char *);
Widget XtHooksOfDisplay(Display *);
MACRO_XtIMXEvent XtIMAll;
MACRO_XtIMXEvent XtIMAlternateInput;
MACRO_XtIMXEvent XtIMSignal;
MACRO_XtIMXEvent XtIMTimer;
MACRO_XtIMXEvent XtIMXEvent;
$D2435FF4F3AAF25C455EAA2CA1747697 XtImmediate;
Widget XtInitialize(const char *, const char *, XrmOptionDescRec *, Cardinal, int *, char **);
void XtInitializeWidgetClass(WidgetClass);
MACRO_XtInputNoneMask XtInputExceptMask;
MACRO_XtInputNoneMask XtInputNoneMask;
MACRO_XtInputNoneMask XtInputReadMask;
MACRO_XtInputNoneMask XtInputWriteMask;
void XtInsertEventHandler(Widget, EventMask, int, XtEventHandler, XtPointer, XtListPosition);
void XtInsertEventTypeHandler(Widget, int, XtPointer, XtEventHandler, XtPointer, XtListPosition);
void XtInsertRawEventHandler(Widget, EventMask, int, XtEventHandler, XtPointer, XtListPosition);
void XtInstallAccelerators(Widget, Widget);
void XtInstallAllAccelerators(Widget, Widget);
Boolean XtIsManaged(Widget);
Boolean XtIsObject(Widget);
Boolean XtIsRealized(Widget);
Boolean XtIsSensitive(Widget);
Boolean XtIsSubclass(Widget, WidgetClass);
$CAA3FD00411B0A7D7F1344282CDE0D9F XtJustifyCenter;
$CAA3FD00411B0A7D7F1344282CDE0D9F XtJustifyLeft;
$CAA3FD00411B0A7D7F1344282CDE0D9F XtJustifyRight;
void XtKeysymToKeycodeList(Display *, KeySym, KeyCode **, Cardinal *);
XEvent *XtLastEventProcessed(Display *);
Time XtLastTimestampProcessed(Display *);
$C6DE0E8AF8221E8B7722BED8F4800537 XtListHead;
$C6DE0E8AF8221E8B7722BED8F4800537 XtListTail;
void XtMainLoop(void);
XtGeometryResult XtMakeGeometryRequest(Widget, XtWidgetGeometry *, XtWidgetGeometry *);
XtGeometryResult XtMakeResizeRequest(Widget, unsigned int, unsigned int, Dimension *, Dimension *);
char *XtMalloc(Cardinal);
void XtManageChild(Widget);
void XtManageChildren(WidgetList, Cardinal);
void XtMenuPopupAction(Widget, XEvent *, String *, Cardinal *);
ArgList XtMergeArgLists(ArgList, Cardinal, ArgList, Cardinal);
void XtMoveWidget(Widget, int, int);
String XtName(Widget);
Widget XtNameToWidget(Widget, const char *);
void XtNextEvent(XEvent *);
void XtNoticeSignal(XtSignalId);
MACRO_XtObjectExtensionVersion XtObjectExtensionVersion;
Widget XtOpenApplication(XtAppContext *, const char *, XrmOptionDescList, Cardinal, int *, String *, String *, WidgetClass, ArgList, Cardinal);
Display *XtOpenDisplay(XtAppContext, const char *, const char *, const char *, XrmOptionDescRec *, Cardinal, int *, char **);
void XtOverrideTranslations(Widget, XtTranslations);
Boolean XtOwnSelection(Widget, Atom, Time, XtConvertSelectionProc, XtLoseSelectionProc, XtSelectionDoneProc);
Boolean XtOwnSelectionIncremental(Widget, Atom, Time, XtConvertSelectionIncrProc, XtLoseSelectionIncrProc, XtSelectionDoneIncrProc, XtCancelConvertSelectionProc, XtPointer);
Widget XtParent(Widget);
XtAccelerators XtParseAcceleratorTable(const char *);
XtTranslations XtParseTranslationTable(const char *);
Boolean XtPeekEvent(XEvent *);
XtInputMask XtPending(void);
void XtPopdown(Widget);
void XtPopup(Widget, XtGrabKind);
void XtPopupSpringLoaded(Widget);
$D2435FF4F3AAF25C455EAA2CA1747697 XtProcedureArg;
void XtProcessEvent(XtInputMask);
void XtProcessLock(void);
void XtProcessUnlock(void);
XtGeometryResult XtQueryGeometry(Widget, XtWidgetGeometry *, XtWidgetGeometry *);
void XtRealizeWidget(Widget);
char *XtRealloc(char *, Cardinal);
void XtRegisterCaseConverter(Display *, XtCaseProc, KeySym, KeySym);
void XtRegisterDrawable(Display *, Drawable, Widget);
void XtRegisterExtensionSelector(Display *, int, int, XtExtensionSelectProc, XtPointer);
void XtRegisterGrabAction(XtActionProc, int, unsigned int, int, int);
void XtReleaseGC(Widget, GC);
void XtReleasePropertyAtom(Widget, Atom);
void XtRemoveActionHook(XtActionHookId);
void XtRemoveAllCallbacks(Widget, const char *);
void XtRemoveBlockHook(XtBlockHookId);
void XtRemoveCallback(Widget, const char *, XtCallbackProc, XtPointer);
void XtRemoveCallbacks(Widget, const char *, XtCallbackList);
void XtRemoveEventHandler(Widget, EventMask, int, XtEventHandler, XtPointer);
void XtRemoveEventTypeHandler(Widget, int, XtPointer, XtEventHandler, XtPointer);
void XtRemoveGrab(Widget);
void XtRemoveInput(XtInputId);
void XtRemoveRawEventHandler(Widget, EventMask, int, XtEventHandler, XtPointer);
void XtRemoveSignal(XtSignalId);
void XtRemoveTimeOut(XtIntervalId);
void XtRemoveWorkProc(XtWorkProcId);
Atom XtReservePropertyAtom(Widget);
void XtResizeWidget(Widget, unsigned int, unsigned int, unsigned int);
void XtResizeWindow(Widget);
String XtResolvePathname(Display *, const char *, const char *, const char *, const char *, Substitution, Cardinal, XtFilePredicate);
$D2435FF4F3AAF25C455EAA2CA1747697 XtResourceQuark;
$D2435FF4F3AAF25C455EAA2CA1747697 XtResourceString;
MACRO_XtSMDontChange XtSMDontChange;
Screen *XtScreen(Widget);
XrmDatabase XtScreenDatabase(Screen *);
Screen *XtScreenOfObject(Widget);
void XtSendSelectionRequest(Widget, Atom, Time);
XtCheckpointToken XtSessionGetToken(Widget);
void XtSessionReturnToken(XtCheckpointToken);
void XtSetErrorHandler(XtErrorHandler);
void XtSetErrorMsgHandler(XtErrorMsgHandler);
XtEventDispatchProc XtSetEventDispatcher(Display *, int, XtEventDispatchProc);
void XtSetKeyTranslator(Display *, XtKeyProc);
void XtSetKeyboardFocus(Widget, Widget);
XtLanguageProc XtSetLanguageProc(XtAppContext, XtLanguageProc, XtPointer);
void XtSetMappedWhenManaged(Widget, int);
void XtSetMultiClickTime(Display *, int);
void XtSetSelectionParameters(Widget, Atom, Atom, XtPointer, unsigned __int64, int);
void XtSetSelectionTimeout(unsigned __int64);
void XtSetSensitive(Widget, int);
void XtSetSubvalues(XtPointer, XtResourceList, Cardinal, ArgList, Cardinal);
void XtSetTypeConverter(const char *, const char *, XtTypeConverter, XtConvertArgList, Cardinal, XtCacheType, XtDestructor);
void XtSetValues(Widget, ArgList, Cardinal);
void XtSetWMColormapWindows(Widget, Widget *, Cardinal);
void XtSetWarningHandler(XtErrorHandler);
void XtSetWarningMsgHandler(XtErrorMsgHandler);
MACRO_XtShellExtensionVersion XtShellExtensionVersion;
const char XtShellStrings[];
MACRO_XrmEnumAllLevels XtSpecificationRelease;
void XtStringConversionWarning(const char *, const char *);
const char XtStrings[];
WidgetClass XtSuperclass(Widget);
MACRO_XtTextSrcExtVersion XtTextSrcExtVersion;
void XtToolkitInitialize(void);
Boolean XtToolkitThreadInitialize(void);
void XtTranslateCoords(Widget, int, int, Position *, Position *);
void XtTranslateKey(Display *, unsigned int, Modifiers, Modifiers *, KeySym *);
void XtTranslateKeycode(Display *, unsigned int, Modifiers, Modifiers *, KeySym *);
void XtUngrabButton(Widget, unsigned int, Modifiers);
void XtUngrabKey(Widget, unsigned int, Modifiers);
void XtUngrabKeyboard(Widget, Time);
void XtUngrabPointer(Widget, Time);
void XtUninstallTranslations(Widget);
void XtUnmanageChild(Widget);
void XtUnmanageChildren(WidgetList, Cardinal);
void XtUnrealizeWidget(Widget);
void XtUnregisterDrawable(Display *, Drawable);
MACRO_XtUnspecifiedPixmap XtUnspecifiedPixmap;
MACRO_XtUnspecifiedPixmap XtUnspecifiedShellInt;
MACRO_XtUnspecifiedWindow XtUnspecifiedWindow;
MACRO_XtUnspecifiedWindow XtUnspecifiedWindowGroup;
Widget XtVaAppCreateShell(const char *, const char *, WidgetClass, Display *, ...);
Widget XtVaAppInitialize(XtAppContext *, const char *, XrmOptionDescList, Cardinal, int *, String *, String *, ...);
XtVarArgsList XtVaCreateArgsList(XtPointer, ...);
Widget XtVaCreateManagedWidget(const char *, WidgetClass, Widget, ...);
Widget XtVaCreatePopupShell(const char *, WidgetClass, Widget, ...);
Widget XtVaCreateWidget(const char *, WidgetClass, Widget, ...);
void XtVaGetApplicationResources(Widget, XtPointer, XtResourceList, Cardinal, ...);
void XtVaGetSubresources(Widget, XtPointer, const char *, const char *, XtResourceList, Cardinal, ...);
void XtVaGetSubvalues(XtPointer, XtResourceList, Cardinal, ...);
void XtVaGetValues(Widget, ...);
Widget XtVaOpenApplication(XtAppContext *, const char *, XrmOptionDescList, Cardinal, int *, String *, String *, WidgetClass, ...);
void XtVaSetSubvalues(XtPointer, XtResourceList, Cardinal, ...);
void XtVaSetValues(Widget, ...);
MACRO_XT_REVISION XtVersion;
MACRO_XtVersionDontCheck XtVersionDontCheck;
void XtWarning(const char *);
void XtWarningMsg(const char *, const char *, const char *, const char *, String *, Cardinal *);
$D2435FF4F3AAF25C455EAA2CA1747697 XtWidgetBaseOffset;
XtAppContext XtWidgetToApplicationContext(Widget);
Window XtWindow(Widget);
Window XtWindowOfObject(Widget);
Widget XtWindowToWidget(Display *, Window);
$E54E6D51CE7B5536353B8548369F9C7D XtorientHorizontal;
$E54E6D51CE7B5536353B8548369F9C7D XtorientVertical;
MACRO_XvBadExtension XvAlreadyGrabbed;
MACRO_XvStartedMask XvAnyReasonMask;
MACRO_XvBadExtension XvBadAlloc;
MACRO_XvBadPort XvBadControl;
MACRO_XvBadPort XvBadEncoding;
MACRO_XvBadExtension XvBadExtension;
MACRO_XvBadPort XvBadPort;
MACRO_XvBadExtension XvBadReply;
MACRO_XvStarted XvBusy;
MACRO_XvStartedMask XvBusyMask;
void XvFreeAdaptorInfo(XvAdaptorInfo *);
void XvFreeEncodingInfo(XvEncodingInfo *);
int XvGetPortAttribute(Display *, XvPortID, Atom, int *);
int XvGetStill(Display *, XvPortID, Drawable, GC, int, int, unsigned int, unsigned int, int, int, unsigned int, unsigned int);
int XvGetVideo(Display *, XvPortID, Drawable, GC, int, int, unsigned int, unsigned int, int, int, unsigned int, unsigned int);
int XvGrabPort(Display *, XvPortID, Time);
MACRO_XvStarted XvHardError;
MACRO_XvStartedMask XvHardErrorMask;
MACRO_XvInput XvInput;
MACRO_XvInputMask XvInputMask;
MACRO_XvBadExtension XvInvalidTime;
MACRO_XvLastReason XvLastReason;
MACRO_XvNoReasonMask XvNoReasonMask;
MACRO_XvNone XvNone;
MACRO_XvBadPort XvNumErrors;
MACRO_XvVideoNotify XvNumEvents;
MACRO_XvLastReason XvNumReasons;
MACRO_XvInput XvOutput;
MACRO_XvInputMask XvOutputMask;
MACRO_XvVideoNotify XvPortNotify;
MACRO_XvStarted XvPreempted;
MACRO_XvStartedMask XvPreemptedMask;
int XvPutStill(Display *, XvPortID, Drawable, GC, int, int, unsigned int, unsigned int, int, int, unsigned int, unsigned int);
int XvPutVideo(Display *, XvPortID, Drawable, GC, int, int, unsigned int, unsigned int, int, int, unsigned int, unsigned int);
int XvQueryAdaptors(Display *, Window, unsigned int *, XvAdaptorInfo **);
int XvQueryBestSize(Display *, XvPortID, int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int *, unsigned int *);
int XvQueryEncodings(Display *, XvPortID, unsigned int *, XvEncodingInfo **);
int XvQueryExtension(Display *, unsigned int *, unsigned int *, unsigned int *, unsigned int *, unsigned int *);
MACRO_XvRevision XvRevision;
int XvSelectPortNotify(Display *, XvPortID, int);
int XvSelectVideoNotify(Display *, Drawable, int);
int XvSetPortAttribute(Display *, XvPortID, Atom, int);
MACRO_XvStarted XvStarted;
MACRO_XvStartedMask XvStartedMask;
int XvStopVideo(Display *, XvPortID, Drawable);
MACRO_XvStarted XvStopped;
MACRO_XvStartedMask XvStoppedMask;
int XvUngrabPort(Display *, XvPortID, Time);
MACRO_XvVersion XvVersion;
MACRO_XvVideoNotify XvVideoNotify;
void XwcDrawImageString(Display *, Drawable, XFontSet, GC, int, int, const wchar_t *, int);
void XwcDrawString(Display *, Drawable, XFontSet, GC, int, int, const wchar_t *, int);
void XwcDrawText(Display *, Drawable, GC, int, int, XwcTextItem *, int);
void XwcFreeStringList(wchar_t **);
int XwcLookupString(XIC, XKeyPressedEvent *, wchar_t *, int, KeySym *, int *);
wchar_t *XwcResetIC(XIC);
int XwcTextEscapement(XFontSet, const wchar_t *, int);
int XwcTextExtents(XFontSet, const wchar_t *, int, XRectangle *, XRectangle *);
int XwcTextListToTextProperty(Display *, wchar_t **, int, XICCEncodingStyle, XTextProperty *);
int XwcTextPerCharExtents(XFontSet, const wchar_t *, int, XRectangle *, XRectangle *, int, int *, XRectangle *, XRectangle *);
int XwcTextPropertyToTextList(Display *, XTextProperty *, wchar_t ***, int *);
MACRO_VDATA YDATA;
MACRO_YES YES;
MACRO_D YESEXPR;
MACRO_D YESSTR;
MACRO_NONE YIQ;
MACRO_NoValue YNegative;
MACRO_YPBINDOLDVERS YPBINDOLDVERS;
MACRO_YPBINDPROC YPBINDPROC_DOMAIN;
MACRO_YPBINDPROC YPBINDPROC_NULL;
MACRO_YPBINDPROC YPBINDPROC_SETDOM;
MACRO_YPBINDPROG YPBINDPROG;
MACRO_YPBINDVERS YPBINDVERS;
MACRO_YPBINDVERS YPBINDVERS_ORIG;
MACRO_YPBIND YPBIND_ERR_ERR;
MACRO_YPBIND YPBIND_ERR_NOSERV;
MACRO_YPBIND YPBIND_ERR_RESC;
ypbind_resptype YPBIND_FAIL_VAL;
ypbind_resptype YPBIND_SUCC_VAL;
MACRO_YPERR YPERR_ACCESS;
MACRO_YPERR YPERR_BADARGS;
MACRO_YPERR YPERR_BADDB;
MACRO_YPERR YPERR_BUSY;
MACRO_YPERR YPERR_DOMAIN;
MACRO_YPERR YPERR_KEY;
MACRO_YPERR YPERR_MAP;
MACRO_YPERR YPERR_NODOM;
MACRO_YPERR YPERR_NOMORE;
MACRO_YPERR YPERR_PMAP;
MACRO_YPERR YPERR_RESRC;
MACRO_YPERR YPERR_RPC;
MACRO_YPERR YPERR_VERS;
MACRO_YPERR YPERR_YPBIND;
MACRO_YPERR YPERR_YPERR;
MACRO_YPERR YPERR_YPSERV;
MACRO_YPBINDOLDVERS YPINTERTRY_TIME;
MACRO_YPMAXDOMAIN YPMAXDOMAIN;
MACRO_YPMAXMAP YPMAXMAP;
MACRO_YPMAXMAP YPMAXPEER;
MACRO_YPMAXRECORD YPMAXRECORD;
MACRO_YPMAXMAP YPMSGSZ;
MACRO_YPNOPORT YPNOPORT;
MACRO_YPOLDPROC YPOLDPROC_DOMAIN;
MACRO_YPOLDPROC YPOLDPROC_DOMAIN_NONACK;
MACRO_YPOLDPROC YPOLDPROC_FIRST;
MACRO_YPOLDPROC YPOLDPROC_GET;
MACRO_YPOLDPROC YPOLDPROC_MATCH;
MACRO_YPOLDPROC YPOLDPROC_NEXT;
MACRO_YPOLDPROC YPOLDPROC_NULL;
MACRO_YPOLDPROC YPOLDPROC_POLL;
MACRO_YPOLDPROC YPOLDPROC_PULL;
MACRO_YPOLDPROC YPOLDPROC_PUSH;
MACRO_YPOLDVERS YPOLDVERS;
MACRO_YPOP YPOP_CHANGE;
MACRO_YPOP YPOP_DELETE;
MACRO_YPOP YPOP_INSERT;
MACRO_YPOP YPOP_STORE;
MACRO_YPPASSWDPROC YPPASSWDPROC_UPDATE;
MACRO_YPPASSWDPROG YPPASSWDPROG;
MACRO_YPPASSWDVERS_0 YPPASSWDVERS;
MACRO_YPPASSWDVERS YPPASSWDVERS_ORIG;
MACRO_YPPROC YPPROC_ALL;
MACRO_YPPROC YPPROC_CLEAR;
MACRO_YPPROC YPPROC_DOMAIN;
MACRO_YPPROC YPPROC_DOMAIN_NONACK;
MACRO_YPPROC YPPROC_FIRST;
MACRO_YPPROC YPPROC_MAPLIST;
MACRO_YPPROC YPPROC_MASTER;
MACRO_YPPROC YPPROC_MATCH;
MACRO_YPPROC YPPROC_NEXT;
MACRO_YPPROC YPPROC_NULL;
MACRO_YPPROC YPPROC_ORDER;
MACRO_YPPROC YPPROC_XFR;
MACRO_YPPROG YPPROG;
MACRO_YPPUSHPROC YPPUSHPROC_NULL;
MACRO_YPPUSHPROC YPPUSHPROC_XFRRESP;
MACRO_YPPUSHVERS YPPUSHVERS;
MACRO_YPPUSHVERS_ORIG YPPUSHVERS_ORIG;
MACRO_YPPUSH YPPUSH_AGE;
MACRO_YPPUSH_BADARGS YPPUSH_BADARGS;
MACRO_YPPUSH_CLEAR YPPUSH_CLEAR;
MACRO_YPPUSH_DBM YPPUSH_DBM;
MACRO_YPPUSH_FILE YPPUSH_FILE;
MACRO_YPPUSH_FORCE YPPUSH_FORCE;
MACRO_YPPUSH_MADDR YPPUSH_MADDR;
MACRO_YPPUSH_NODOM YPPUSH_NODOM;
MACRO_YPPUSH YPPUSH_NOMAP;
MACRO_YPPUSH_REFUSED YPPUSH_REFUSED;
MACRO_YPPUSH_RPC YPPUSH_RPC;
MACRO_YPPUSH_RSRC YPPUSH_RSRC;
MACRO_YPPUSH_SKEW YPPUSH_SKEW;
MACRO_YPPUSH YPPUSH_SUCC;
MACRO_YPPUSH_XFRERR YPPUSH_XFRERR;
MACRO_YPPUSH_YPERR YPPUSH_YPERR;
ypreqtype YPREQ_KEY;
ypreqtype YPREQ_MAP_PARMS;
ypreqtype YPREQ_NOKEY;
ypresptype YPRESP_KEY_VAL;
ypresptype YPRESP_MAP_PARMS;
ypresptype YPRESP_VAL;
MACRO_YPBINDOLDVERS YPTOTAL_TIME;
MACRO_YPU_CHANGE YPU_CHANGE;
MACRO_YPU_CHANGE YPU_DELETE;
MACRO_YPU_CHANGE YPU_INSERT;
MACRO_MAXERRMSGLEN YPU_PROG;
MACRO_YPU_CHANGE YPU_STORE;
MACRO_YPU YPU_VERS;
MACRO_YPVERS YPVERS;
MACRO_YPVERS YPVERS_ORIG;
MACRO_YP_ACCESS YP_ACCESS;
MACRO_YP_BADARGS YP_BADARGS;
MACRO_YP_BADDB YP_BADDB;
MACRO_YP_BADOP YP_BADOP;
MACRO_YP_FALSE YP_FALSE;
MACRO_YP_NODOM YP_NODOM;
MACRO_YP_NOKEY YP_NOKEY;
MACRO_YP_FALSE YP_NOMAP;
MACRO_YP YP_NOMORE;
MACRO_YP YP_TRUE;
MACRO_YP_VERS YP_VERS;
MACRO_YP_YPERR YP_YPERR;
MACRO_Unsorted YSorted;
MACRO_NoValue YValue;
MACRO_Unsorted YXBanded;
MACRO_Unsorted YXSorted;
MACRO_ZERO ZERO;
MACRO_ZLIB_COMPRESS ZLIB_COMPRESS_FLAG;
MACRO_ZLIB_COMPRESS ZLIB_DATALEN_MASK;
MACRO_ZLIB_PACKET ZLIB_MAX_DATALEN;
MACRO_ZLIB_MAX ZLIB_MAX_OUTLEN;
MACRO_ZLIB_MAX ZLIB_MAX_PLAIN;
MACRO_ZLIB_PACKET ZLIB_PACKET_HDRLEN;
MACRO_ZLIB ZLIB_STRCOMP_OPT_LEN;
MACRO_OMAGIC ZMAGIC;
MACRO_XYBitmap ZPixmap;
MACRO_DontCareState ZoomState;
MACRO__NBRA _ABNORMAL;
MACRO__AES _AES_OS_VERSION;
MACRO__APPID _APPID_SZ;
MACRO__FILID _APPUSE_SZ;
MACRO__NBRA _BADBRACKET;
MACRO__NBRA _BADNUM;
MACRO__NBRA _BADPAREN;
unsigned __int64 BASE_ADDRESS;
MACRO__NBRA _BIGDIGIT;
MACRO__NBRA _BIGPAREN;
MACRO__NBRA _BIGRANGE;
MACRO__NBRA _BIGREGEXP;
MACRO__BLANK _BLANK;
MACRO__BLNKCHAR _BLNKCHAR;
MACRO__ISPAD _CANT_BE_IMMED;
MACRO__CDFS _CDFS_RRIP_INCLUDE;
MACRO__CDFS_SUSP _CDFS_SUSP_INCLUDE;
MACRO__CDFS_XCDR _CDFS_XCDR_INCLUDE;
MACRO__CMA_COMPILER _CMA_COMPILER_;
MACRO__CMA_HARDWARE _CMA_HARDWARE_;
MACRO__CMA_OSIMPL _CMA_OSIMPL_;
MACRO__CMA_OS _CMA_OS_;
MACRO__CMA__IA64 _CMA_PLATFORM_;
MACRO__CMA_POSIX _CMA_POSIX_SCHED_;
MACRO__CMA_PROTO _CMA_PROTO_;
MACRO__CMA_REENTRANT _CMA_REENTRANT_CLIB_;
MACRO__CMA_RT4 _CMA_RT4_KTHREAD_;
MACRO__CMA_TIS_HARDWARE _CMA_TIS_HARDWARE_;
MACRO__CMA_TIS_OS _CMA_TIS_OS_;
MACRO__CMA_TIS_ _CMA_TIS__ALPHA;
MACRO__CMA_TIS_ _CMA_TIS__IA64;
MACRO__CMA_TIS _CMA_TIS__OSF;
MACRO__CMA_TIS_ _CMA_TIS__VAX;
MACRO__CMA_TIS _CMA_TIS__VMS;
MACRO__CMA_TIS_ _CMA_TIS__X86;
MACRO__CMA_VOID _CMA_VOID_;
MACRO__CMA_VSSCANF CMA_VSSCANF_;
MACRO__CMA_ _CMA__ALPHA;
MACRO__CMA__ALPHA _CMA__ALPHA_NT;
MACRO__CMA__MIPS _CMA__ALPHA_UNIX;
MACRO__CMA__MIPS _CMA__ALPHA_VMS;
MACRO__CMA__MIPS _CMA__ALPHA_WIN32;
MACRO__CMA _CMA__CC;
MACRO__CMA _CMA__CFRONT;
MACRO__CMA _CMA__DECC;
MACRO__CMA _CMA__DECCPLUS;
MACRO__CMA _CMA__GCC;
MACRO__CMA _CMA__GCPLUS;
MACRO__CMA_ _CMA__IA64;
MACRO__CMA__IA64 _CMA__IA64_NT;
MACRO__CMA__X86 _CMA__IA64_UNIX;
MACRO__CMA__X86 _CMA__IA64_WIN32;
MACRO__CMA__NONE _CMA__MACH;
MACRO__CMA_ _CMA__MIPS;
MACRO__CMA__MIPS _CMA__MIPS_UNIX;
MACRO__CMA _CMA__MSC;
MACRO__CMA__NONE CMA__NONE;
MACRO__CMA__NT _CMA__NT;
MACRO__CMA__NONE _CMA__NTTHREADS;
MACRO__CMA__OS _CMA__OS_BSD;
MACRO__CMA__IA64 _CMA__OS_OSF;
MACRO__CMA__OS _CMA__OS_SYSV;
MACRO__CMA__UNIX _CMA__UNIX;
MACRO__CMA_ _CMA__VAX;
MACRO__CMA _CMA__VAXC;
MACRO__CMA__MIPS _CMA__VAX_UNIX;
MACRO__CMA__MIPS _CMA__VAX_VMS;
MACRO__CMA__UNIX _CMA__VMS;
MACRO__CMA__UNIX _CMA__WIN32;
MACRO__CMA_ _CMA__X86;
MACRO__CMA__X86 _CMA__X86_NT;
MACRO__CMA__ALPHA _CMA__X86_WIN32;
MACRO__COLL_FORWARD _COLL_BACKWARD_MASK;
MACRO__COLL_FORWARD _COLL_CHAR_ORDER_MASK;
MACRO__COLL _COLL_COLELM_1ARRAY_MASK;
MACRO__COLL _COLL_COLELM_TRIE_MASK;
MACRO__COLL_FORWARD _COLL_FORWARD_MASK;
MACRO__COLL_FORWARD _COLL_NOSUBS_MASK;
MACRO__COLL_FORWARD _COLL_POSITION_MASK;
MACRO__COLL_VERSION _COLL_VERSION;
MACRO__CSEM _CSEM_SLEEP;
MACRO__CSEM _CSEM_TIMING0;
MACRO__CSEM _CSEM_TIMING1;
MACRO__CSEM _CSEM_TIMING2;
MACRO__CSEM _CSEM_TIMING3;
MACRO__CSEM _CSEM_WAKEUP;
MACRO_OK _CSMAX;
MACRO__CS _CS_PATH;
MACRO__CS _CS_PRODUCT_NAME;
MACRO__CS _CS_SYSTEM_BANNER;
MACRO__CS _CS_SYSTEM_VERSION;
MACRO__CS _CS_VENDOR_ABBREV;
MACRO__CS _CS_VENDOR_NAME;
MACRO__CTYPE _CTYPE_MAX_CHARCLASSES;
MACRO__SUBS _CTYPE_NUM_MASK_BITS;
MACRO__SUBS _CTYPE_ROW_MASK;
MACRO__DBM _DBM_IOERR;
MACRO__DBM _DBM_RDONLY;
MACRO__DECTHREADS _DECTHREADS_;
MACRO__DECTHREADS_VERSION _DECTHREADS_VERSION;
MACRO__IEEE _DEXPLEN;
MACRO__DIRID _DIRID_SZ;
MACRO__DIRID _DR_SYSUSE_SZ;
MACRO__DTPRE _DTPRE_SZ;
char DXmStrings[];
unsigned __int64 DYNAMIC;
unsigned __int64 DYNAMIC_LINK;
MACRO__ESIZE _ESIZE;
void Eendutent_r(struct utmp_data *);
struct utmp *Egetutent(void);
int Egetutent_r(struct utmp **, struct utmp_data *);
struct utmp *Egetutid(const struct utmp *);
int Egetutid_r(struct utmp *, struct utmp **, struct utmp_data *);
struct utmp *Egetutline(const struct utmp *);
int Egetutline_r(struct utmp *, struct utmp **, struct utmp_data *);
struct utmpx *Egetutxent(void);
struct utmpx *Egetutxid(const struct utmpx *);
struct utmpx *Egetutxline(const struct utmpx *);
struct utmp *Epututline(const struct utmp *);
int Epututline_r(struct utmp *, struct utmp_data *);
struct utmpx *Epututxline(const struct utmpx *);
ssize_t Ereadv(int, const struct iovec *, int);
void Esetutent_r(struct utmp_data *);
EvmStatus_t EvmEventCompare(EvmConstEvent_t a_event1, EvmConstEvent_t a_event2, EvmItemMask_t a_ignoreMask, unsigned int a_debug, EvmBoolean_t *a_same);
EvmString_t EvmFilenameConstruct(EvmString_t a_fileNameBase, EvmInt32_t a_ident, EvmPid_t a_pid);
EvmStatus_t EvmItemCompare(EvmConstEvent_t a_event1, EvmConstEvent_t a_event2, EvmItemId_t a_item, unsigned int a_debug, EvmBoolean_t *a_same);
EvmStatus_t EvmItemSetAuto(EvmEvent_t a_event, EvmItemMask_t a_items);
EvmStatus_t EvmItemSetAutoWithContext(EvmEvent_t a_event, EvmItemMask_t a_items, EvmConnection_t a_conn);
EvmStatus_t EvmQueuePointerGet(EvmEvent_t a_event, EvmEvent_t *a_next);
EvmStatus_t EvmQueuePointerSet(EvmEvent_t a_event, EvmEvent_t a_next);
EvmStatus_t EvmVarCompare(EvmConstEvent_t a_event1, EvmConstEvent_t a_event2, EvmVarName_t a_name, unsigned int a_debug, EvmBoolean_t *a_same);
ssize_t Ewritev(int, const struct iovec *, int);
int F64_fstat(int, struct stat *);
int F64_fstatfs(int, struct statfs *, ...);
int F64_getfsstat(struct statfs *, __int64, int);
int F64_getmntinfo(struct statfs **, int);
int F64_getmntinfo_r(struct statfs **, int, int *, int *);
int F64_lstat(const char *, struct stat *);
int F64_stat(const char *, struct stat *);
int F64_statfs(char *, struct statfs *, ...);
MACRO__FATAL _FATAL_H_;
MACRO__FEXPLEN _FEXPLEN;
MACRO__FILID _FILID_SZ;
unsigned __int64 GOT_OFFSET;
int Geterrno(void);
MACRO__HIDDENBIT _HIDDENBIT;
MACRO__MAXADDRS _HOSTBUFSIZE;
MACRO__IEEE _IEEE;
MACRO__INFINITY _INFINITY;
MACRO__INIFADDRHEXP _INIFADDRHEXP;
MACRO__INIFADDR _INIFADDR_MAX_HEXP;
MACRO__INIFADDR _INIFADDR_MIN_HEXP;
MACRO__IONOFD _IOCLOSE;
MACRO__IOC _IOC_DIRMASK;
MACRO__IOC _IOC_IN;
MACRO__IOC _IOC_INOUT;
MACRO__IOC _IOC_OUT;
MACRO__IOC _IOC_VOID;
MACRO_SEEK _IOEOF;
MACRO_SEEK _IOERR;
MACRO__IOFBF IOFBF;
MACRO__IONOFD _IOINUSE;
MACRO__IOFBF _IOLBF;
MACRO__IOREAD _IOMYBUF;
MACRO__IONBF _IONBF;
MACRO__IONOFD _IONOFD;
MACRO__IONOFD _IONONSTD;
MACRO__IOREAD _IOREAD;
MACRO__IONOFD _IORW;
MACRO__IOREAD _IOSTRG;
MACRO__IONOFD _IOUNGETC;
MACRO__IONOFD _IOWINIT;
MACRO__IOREAD _IOWRT;
MACRO__IONOFD _IOWSET;
MACRO__ISALPHA _ISALNUM;
MACRO__ISALPHA _ISALPHA;
MACRO__ISALPHA _ISBLANK;
MACRO__ISALPHA _ISCNTRL;
MACRO__ISALPHA _ISDIGIT;
MACRO__ISALPHA _ISGRAPH;
MACRO__ISALPHA _ISLOWER;
MACRO__ISO _ISO_DTLEN;
MACRO__ISPAD _ISPAD;
MACRO__ISALPHA _ISPRINT;
MACRO__ISALPHA _ISPUNCT;
MACRO__ISALPHA _ISSPACE;
MACRO__ISALPHA _ISUPPER;
MACRO__ISALPHA _ISXDIGIT;
void IceErrorBadLength(IceConn, int, int, int);
void IceErrorBadMinor(IceConn, int, int, int);
void IceErrorBadState(IceConn, int, int, int);
void IceErrorBadValue(IceConn, int, int, int, int, IcePointer);
int IceRead(IceConn, unsigned __int64, char *);
void IceReadSkip(IceConn, unsigned __int64);
void IceWrite(IceConn, unsigned __int64, char *);
MACRO__JBLEN _JBLEN;
MACRO__KEY _KEY;
__lc_type_id_t _LC_CAR;
__lc_type_id_t _LC_CHARMAP;
__lc_type_id_t _LC_COLLATE;
__lc_type_id_t _LC_CTYPE;
MACRO__LC LC_DENSE_FORMAT;
MACRO__LC_ICONV _LC_ICONV;
__lc_type_id_t _LC_LOCALE;
MACRO__LC _LC_MAGIC;
MACRO__NL_OLD _LC_MAX_OBJECTS;
__lc_type_id_t _LC_MONETARY;
__lc_type_id_t _LC_NUMERIC;
__lc_type_id_t _LC_RESP;
__lc_type_id_t _LC_TIME;
MACRO__LC _LC_UCS4_FORMAT;
MACRO__LC_VERSION _LC_VERSION;
MACRO__LIBDL _LIBDL_RLD_DLCLOSE;
MACRO__LIBDL _LIBDL_RLD_DLERROR;
MACRO__LIBDL _LIBDL_RLD_DLOPEN;
MACRO__LIBDL _LIBDL_RLD_DLSYM;
MACRO__LIB _LIB_MACH_ERROR_H_;
MACRO__LINK _LINK_MAX_V3;
MACRO__LastCategory _LastCategory;
MACRO__MACHINE _MACHINE_VMPARAM_H_;
MACRO__MACH _MACH_ALPHA_VM_TYPES_H_;
MACRO__MACH_INIT _MACH_INIT_H_;
MACRO__KEY _MACRO;
MACRO__MAXADDRS _MAXADDRS;
MACRO__MAXALIASES _MAXALIASES;
MACRO__MAXALIASES _MAXLINELEN;
MACRO__MAX _MAX_NUM_PT;
MACRO__MIPS _MIPS_NSCNS_MAX;
MACRO_D _M_D_OLD;
MACRO_D _M_D_RECENT;
MACRO__NBRA _NBRA;
MACRO_PTHREAD_DESTRUCTOR _NFILE;
MACRO__NL _NL_NUM_ITEMS;
MACRO__NL_OLD _NL_OLD_SIZE;
MACRO__WAITC _NOCHANGE;
MACRO__NBRA _NOCLOSEBRACE;
MACRO__NBRA _NODELIM;
MACRO_LARGECOST _NOHASH;
MACRO__NBRA _NOMATCHSTR;
MACRO__NSCNS _NSCNS_MAX;
MACRO__NUM _NUM_CLASSES;
MACRO__O _O_L_cuserid;
MACRO__POSIX_ASYNC _PC_ACL_EXTENDED;
MACRO__PC _PC_ASYNC_IO;
MACRO__PC _PC_CHOWN_RESTRICTED;
MACRO__PC_ERROR PC_ERROR;
MACRO__PC_LAST _PC_LAST;
MACRO__PC _PC_LINK_MAX;
MACRO__PC _PC_MAX_CANON;
MACRO__PC _PC_MAX_INPUT;
MACRO__PC _PC_NAME_MAX;
MACRO__PC _PC_NO_TRUNC;
MACRO__PC _PC_PATH_MAX;
MACRO__PC _PC_PIPE_BUF;
MACRO__PC _PC_PRIO_IO;
MACRO__PC _PC_SYNC_IO;
MACRO__PC _PC_VDISABLE;
MACRO__POSIX_TTY _POSIX2_BC_BASE_MAX;
MACRO__POSIX_TTY _POSIX2_BC_DIM_MAX;
MACRO__POSIX2 _POSIX2_BC_SCALE_MAX;
MACRO__POSIX2 _POSIX2_BC_STRING_MAX;
MACRO__POSIX2_CHAR _POSIX2_CHAR_TERM;
MACRO__POSIX2_COLL _POSIX2_COLL_WEIGHTS_MAX;
MACRO__POSIX2_C _POSIX2_C_BIND;
MACRO__POSIX2_C_DEV _POSIX2_C_DEV;
MACRO__POSIX2_UPE _POSIX2_C_VERSION;
MACRO__POSIX2_COLL _POSIX2_EXPR_NEST_MAX;
MACRO__POSIX2_COLL _POSIX2_LINE_MAX;
MACRO__POSIX2_LOCALEDEF _POSIX2_LOCALEDEF;
MACRO__POSIX2_RE _POSIX2_RE_DUP_MAX;
MACRO__POSIX2_SW _POSIX2_SW_DEV;
MACRO__POSIX2_UPE _POSIX2_UPE;
MACRO__POSIX2_VERSION _POSIX2_VERSION;
MACRO__POSIX_AIO _POSIX_AIO_LISTIO_MAX;
MACRO__POSIX_AIO _POSIX_AIO_MAX;
MACRO_MB _POSIX_ARG_MAX;
MACRO__POSIX_ASYNC _POSIX_ASYNC_IO;
MACRO__POSIX_CHILD _POSIX_CHILD_MAX;
MACRO__POSIX_CHOWN POSIX_CHOWN_RESTRICTED;
MACRO__POSIX_CLOCKDRIFT _POSIX_CLOCKDRIFT_MAX;
MACRO__POSIX_CLOCKDRIFT _POSIX_CLOCKRES_MIN;
MACRO__POSIX _POSIX_C_SOURCE;
MACRO__POSIX_DELAYTIMER _POSIX_DELAYTIMER_MAX;
MACRO__POSIX_DELAYTIMER _POSIX_INTERVAL_MAX;
MACRO__POSIX_JOB _POSIX_JOB_CONTROL;
MACRO__POSIX_CHILD _POSIX_LINK_MAX;
MACRO__POSIX_LOGIN _POSIX_LOGIN_NAME_MAX;
MACRO__POSIX_CHILD _POSIX_MAX_CANON;
MACRO__POSIX_MAX _POSIX_MAX_INPUT;
MACRO__POSIX_TIMER _POSIX_MQ_OPEN_MAX;
MACRO__POSIX_MQ _POSIX_MQ_PRIO_MAX;
MACRO__POSIX_NAME _POSIX_NAME_MAX;
MACRO__POSIX_NAME POSIX_NGROUPS_MAX;
MACRO__POSIX_CHOWN POSIX_NO_TRUNC;
MACRO__POSIX_OPEN _POSIX_OPEN_MAX;
MACRO__POSIX_OPEN _POSIX_PATH_MAX;
MACRO__POSIX_OPEN _POSIX_PIPE_BUF;
MACRO__POSIX_SIGQUEUE _POSIX_RTSIG_MAX;
MACRO__POSIX_SAVED _POSIX_SAVED_IDS;
MACRO__POSIX_SEM _POSIX_SEM_NSEMS_MAX;
MACRO__POSIX_SEM _POSIX_SEM_VALUE_MAX;
MACRO__POSIX_SIGQUEUE _POSIX_SIGQUEUE_MAX;
MACRO__POSIX_OPEN _POSIX_SSIZE_MAX;
MACRO__POSIX_STREAM _POSIX_STREAM_MAX;
MACRO__POSIX_ASYNC _POSIX_SYNC_IO;
MACRO__POSIX_THREADS_PER _POSIX_THREADS_PER_PROCESS_SIGNALS_1;
MACRO__POSIX_THREADS _POSIX_THREADS_REALTIME_SCHEDULING;
MACRO__POSIX_SIGQUEUE _POSIX_THREAD_DESTRUCTOR_ITERATIONS;
MACRO__POSIX_THREAD _POSIX_THREAD_KEYS_MAX;
MACRO__POSIX_THREAD _POSIX_THREAD_THREADS_MAX;
MACRO__POSIX_TIMER _POSIX_TIMER_MAX;
MACRO__POSIX_TTY _POSIX_TTY_NAME_MAX;
MACRO__POSIX_STREAM _POSIX_TZNAME_MAX;
MACRO__POSIX_VDISABLE _POSIX_VDISABLE;
MACRO_STDIN _POSIX_VERSION;
MACRO__PROF_TYPE PROF_TYPE_IS_NONE;
MACRO__PROF _PROF_TYPE_IS_P;
MACRO__PROF_TYPE _PROF_TYPE_IS_PG;
MACRO__PSX4 _PSX4_NSPACE_H_TS;
MACRO__PTHREAD_RWVALID _PTHREAD_CAVALID;
MACRO__PTHREAD_CSTATE _PTHREAD_CSTATE_SLOW;
MACRO__PTHREAD_CSTATE _PTHREAD_CVALID;
MACRO__PTHREAD_CVF _PTHREAD_CVF_STA;
MACRO__PTHREAD_EXC_FLG _PTHREAD_EXC_ARGS;
MACRO__PTHREAD_EXC_CTX_CUR _PTHREAD_EXC_CTX_CUR;
MACRO__PTHREAD_EXC_CTX _PTHREAD_EXC_CTX_V2;
MACRO__PTHREAD_EXC_CTX _PTHREAD_EXC_CTX_V3;
MACRO__PTHREAD_EXC_CTX _PTHREAD_EXC_CTX_V4;
MACRO__PTHREAD_EXC_CTX _PTHREAD_EXC_CTX_V5;
MACRO__PTHREAD_EXC_VER _PTHREAD_EXC_FACILITY;
MACRO__PTHREAD_EXC_FLG _PTHREAD_EXC_FLG_HEAPARG;
MACRO__PTHREAD_EXC_FLG _PTHREAD_EXC_FLG_NATEXC;
__pthreadExcKind_t _PTHREAD_EXC_KIND_ADDR;
__pthreadExcKind_t PTHREAD_EXC_KIND_NONE;
__pthreadExcKind_t _PTHREAD_EXC_KIND_STATUS;
MACRO__PTHREAD _PTHREAD_EXC_NEWMAGIC;
__pthreadExcState_t PTHREAD_EXC_STATE_ACTIVE;
__pthreadExcState_t _PTHREAD_EXC_STATE_HANDLED;
__pthreadExcState_t _PTHREAD_EXC_STATE_NONE;
__pthreadExcState_t _PTHREAD_EXC_STATE_POPPED;
MACRO__PTHREAD _PTHREAD_EXC_THDBASE;
MACRO__PTHREAD_EXC_VER _PTHREAD_EXC_VER_CUR;
MACRO__PTHREAD_EXC _PTHREAD_EXC_VER_V2;
MACRO__PTHREAD_EXC _PTHREAD_EXC_VER_V3;
MACRO__PTHREAD_EXC _PTHREAD_EXC_VER_V4;
MACRO__PTHREAD_RWVALID _PTHREAD_MAVALID;
MACRO_PTHREAD_PROCESS _PTHREAD_MSTATE_CONFIG;
MACRO_PTHREAD_PROCESS _PTHREAD_MSTATE_TYPE;
MACRO__PTHREAD_MTYPE _PTHREAD_MTYPE_ERRCHK;
MACRO__PTHREAD_MTYPE PTHREAD_MTYPE_NORMAL;
MACRO__PTHREAD_MTYPE _PTHREAD_MTYPE_RECURS;
MACRO__PTHREAD_MVALID _PTHREAD_MVALID;
MACRO__PTHREAD_MVF _PTHREAD_MVF_INL;
MACRO__PTHREAD_MVF _PTHREAD_MVF_INT;
MACRO__PTHREAD_MVF _PTHREAD_MVF_NAM;
MACRO__PTHREAD_MVF _PTHREAD_MVF_PRE;
MACRO__PTHREAD_MVF _PTHREAD_MVF_STA;
MACRO__PTHREAD_MVALID _PTHREAD_PVALID;
MACRO__PTHREAD_RWVALID _PTHREAD_RWVALID;
MACRO__PTHREAD_RWVF _PTHREAD_RWVF_INL;
MACRO__PTHREAD_RWVF _PTHREAD_RWVF_INT;
MACRO__PTHREAD_RWVF _PTHREAD_RWVF_NAM;
MACRO__PTHREAD_RWVF _PTHREAD_RWVF_PRE;
MACRO__PTHREAD_RWVF _PTHREAD_RWVF_STA;
MACRO__PTHREAD_TAVALID _PTHREAD_TAVALID;
MACRO__PTHREAD_USE _PTHREAD_USE_MANGLED_NAMES_;
MACRO__PUBID _PUBID_SZ;
char *Pasctime_r(const struct tm *, char *);
char *Pctime_r(const time_t *, char *);
int Pgetgrgid_r(gid_t, struct group *, char *, size_t, struct group **);
int Pgetgrnam_r(const char *, struct group *, char *, size_t, struct group **);
int Pgetlogin_r(char *, size_t);
int Pgetpwnam_r(const char *, struct passwd *, char *, size_t, struct passwd **);
int Pgetpwuid_r(uid_t, struct passwd *, char *, size_t, struct passwd **);
struct tm *Pgmtime_r(const time_t *, struct tm *);
struct tm *Plocaltime_r(const time_t *, struct tm *);
int Prand_r(unsigned int *);
int Preaddir_r(DIR *, struct dirent *, struct dirent **);
int Psigwait(const sigset_t *set, int *sig);
int Pttyname_r(int, char *, size_t);
MACRO__REDRAW _REDRAW;
MACRO__REENTRANT _REENTRANT;
MACRO__REG _REG_SUBEXP_MAX;
MACRO__FILID _RES2_SZ;
MACRO__SHUT _RLD_ADDR_TO_NAME;
MACRO__RLD_CONNECT_STATIC _RLD_CONNECT_STATIC;
MACRO__RLD_CONNECT _RLD_CONNECT_VERSION1;
MACRO__RLD_CONNECT _RLD_CONNECT_VERSION2;
MACRO__RLD_CONNECT _RLD_CONNECT_VERSION3;
MACRO__SHUT _RLD_FIRST_PATHNAME;
MACRO__RLD_LDR _RLD_LDR_BRK;
MACRO__RLD_LDR_CONTEXT _RLD_LDR_CONTEXT_ATEXIT;
MACRO__RLD_LDR_CONTEXT_GET _RLD_LDR_CONTEXT_GET_ENTRY_PT;
MACRO__RLD_LDR_CONTEXT_INQ_MODULE _RLD_LDR_CONTEXT_INQ_MODULE;
MACRO__RLD_LDR_CONTEXT_INQ _RLD_LDR_CONTEXT_INQ_REGION;
MACRO__RLD_LDR_CONTEXT_INSTALL _RLD_LDR_CONTEXT_INSTALL;
MACRO__RLD_LDR_CONTEXT_LOAD _RLD_LDR_CONTEXT_LOAD;
MACRO__RLD_LDR_CONTEXT_LOOKUP_0 _RLD_LDR_CONTEXT_LOOKUP;
MACRO__RLD_LDR_CONTEXT_LOOKUP _RLD_LDR_CONTEXT_LOOKUP_PACKAGE;
MACRO__RLD_LDR_CONTEXT_NEXT _RLD_LDR_CONTEXT_NEXT_MODULE;
MACRO__RLD_LDR_CONTEXT_REMOVE _RLD_LDR_CONTEXT_REMOVE;
MACRO__RLD_LDR_CONTEXT_UNLOAD _RLD_LDR_CONTEXT_UNLOAD;
MACRO__RLD_LDR_DLCLOSE _RLD_LDR_DLCLOSE;
MACRO__RLD_LDR_DLERROR _RLD_LDR_DLERROR;
MACRO__RLD_LDR_DLOPEN _RLD_LDR_DLOPEN;
MACRO__RLD_LDR_DLSYM _RLD_LDR_DLSYM;
MACRO__RLD_CONNECT _RLD_LDR_SBRK;
MACRO__SHUT _RLD_MODIFY_LIST;
MACRO__SHUT _RLD_NAME_TO_ADDR;
MACRO__SHUT _RLD_NEXT_PATHNAME;
MACRO__RLD _RLD_OP_ADD;
MACRO__RLD _RLD_OP_DELETE;
MACRO__RLD _RLD_OP_INSERT;
MACRO__RLD RLD_OP_NONE;
MACRO__RLD _RLD_OP_REPLACE;
MACRO__RLD_SET _RLD_SET_TLSKEY;
MACRO__VOLID _ROOTDIR_SZ;
MACRO__SBFSIZ _SBFSIZ;
MACRO__SCHED _SCHED_H_;
MACRO__SCHED_MIN _SCHED_MAX;
MACRO__SCHED_MIN _SCHED_MIN;
MACRO__SC_ARG _SC_2_CHAR_TERM;
MACRO__SC_ARG _SC_2_C_BIND;
MACRO__SC_ARG _SC_2_C_DEV;
MACRO__SC_ARG _SC_2_C_VERSION;
MACRO__SC_ARG _SC_2_FORT_DEV;
MACRO__SC_ARG _SC_2_FORT_RUN;
MACRO__SC_ARG _SC_2_LOCALEDEF;
MACRO__SC_ARG _SC_2_SW_DEV;
MACRO__SC_ARG _SC_2_UPE;
MACRO__SC_ARG _SC_2_VERSION;
MACRO__SC _SC_4VERSION;
MACRO__SC_ARG _SC_ADDR_SPACE;
MACRO__SC_ARG _SC_ADDR_SPACE_MAX;
MACRO__SC_AES _SC_AES_OS_VERSION;
MACRO__SC _SC_AIO_MAX;
MACRO__SC_ARG _SC_ARG_MAX;
MACRO__SC _SC_ASYNCHRONOUS_IO;
MACRO_F_ULOCK _SC_ATEXIT_MAX;
MACRO__SC_ARG _SC_BC_BASE_MAX;
MACRO__SC_ARG _SC_BC_DIM_MAX;
MACRO__SC_ARG _SC_BC_SCALE_MAX;
MACRO__SC_ARG _SC_BC_STRING_MAX;
MACRO__SC_ARG _SC_CHILD_MAX;
MACRO__SC_ARG _SC_CLK_TCK;
MACRO__SC _SC_CLOCKDRIFT_MAX;
MACRO__SC_ARG _SC_COLL_WEIGHTS_MAX;
MACRO__SC_ARG _SC_DATA_SIZE;
MACRO__SC_ARG _SC_DATA_SIZE_MAX;
MACRO__SC _SC_DELAYTIMER_MAX;
MACRO__SC_ARG _SC_EXPR_NEST_MAX;
MACRO__SC _SC_FSYNC;
MACRO__SC_NPROCESSORS_ONLN _SC_GETGR_R_SIZE_MAX;
MACRO__SC_NPROCESSORS_ONLN _SC_GETPW_R_SIZE_MAX;
MACRO__SC_ARG _SC_IOV_MAX;
MACRO__SC_ARG _SC_JOB_CONTROL;
MACRO__SC_ARG _SC_LINE_MAX;
MACRO__SC _SC_LISTIO_AIO_MAX;
MACRO__SC_NPROCESSORS_ONLN _SC_LOGIN_NAME_MAX;
MACRO__AES _SC_MAJ_NUM_SHIFT;
MACRO__SC _SC_MAPPED_FILES;
MACRO__SC_ARG _SC_MAXUTHREADS;
MACRO__SC _SC_MEMLOCK;
MACRO__SC _SC_MEMLOCK_RANGE;
MACRO__SC _SC_MEMORY_PROTECTION;
MACRO__SC _SC_MESSAGE_PASSING;
MACRO__SC _SC_MQ_OPEN_MAX;
MACRO__SC _SC_MQ_PRIO_MAX;
MACRO__SC_ARG _SC_NGROUPS_MAX;
MACRO__SC_NPROCESSORS _SC_NPROCESSORS_CONF;
MACRO__SC_NPROCESSORS_ONLN _SC_NPROCESSORS_ONLN;
MACRO__SC _SC_NPROC_CONF;
MACRO__SC_NPROCESSORS _SC_NPROC_ONLN;
MACRO__SC_ARG _SC_OPEN_MAX;
MACRO_F_ULOCK _SC_PAGESIZE;
MACRO_F_ULOCK _SC_PAGE_SIZE;
MACRO__SC_PASS _SC_PASS_MAX;
MACRO__SC _SC_PRIORITIZED_IO;
MACRO__SC _SC_PRIORITY_SCHEDULING;
MACRO__SC _SC_REALTIME_SIGNALS;
MACRO__SC_ARG _SC_RE_DUP_MAX;
MACRO__SC _SC_RTSIG_HI;
MACRO__SC _SC_RTSIG_LOW;
MACRO__SC _SC_RTSIG_MAX;
MACRO__SC_ARG _SC_SAVED_IDS;
MACRO__SC _SC_SEMAPHORES;
MACRO__SC _SC_SEM_NAME_MAX;
MACRO__SC _SC_SEM_NSEMS_MAX;
MACRO__SC _SC_SEM_VALUE_MAX;
MACRO__SC _SC_SHARED_MEMORY_OBJECTS;
MACRO__SC _SC_SIGQUEUE_MAX;
MACRO__SC_ARG _SC_STACK_SIZE;
MACRO__SC_ARG _SC_STACK_SIZE_MAX;
MACRO__SC_ARG _SC_STREAM_MAX;
MACRO__SC _SC_SYNCHRONIZED_IO;
MACRO__SC_ARG _SC_TASK_MAX;
MACRO__SC_NPROCESSORS_ONLN _SC_THREADS;
MACRO__SC_NPROCESSORS_ONLN _SC_THREAD_ATTR_STACKADDR;
MACRO__SC_NPROCESSORS_ONLN _SC_THREAD_ATTR_STACKSIZE;
MACRO__SC_NPROCESSORS_ONLN _SC_THREAD_DESTRUCTOR_ITERATIONS;
MACRO__SC_NPROCESSORS_ONLN _SC_THREAD_KEYS_MAX;
MACRO__SC_ARG _SC_THREAD_MAX;
MACRO__SC_NPROCESSORS_ONLN _SC_THREAD_PRIORITY_SCHEDULING;
MACRO__SC_NPROCESSORS_ONLN _SC_THREAD_PRIO_INHERIT;
MACRO__SC_NPROCESSORS_ONLN _SC_THREAD_PRIO_PROTECT;
MACRO__SC_NPROCESSORS_ONLN _SC_THREAD_PROCESS_SHARED;
MACRO__SC_NPROCESSORS_ONLN _SC_THREAD_SAFE_FUNCTIONS;
MACRO__SC_NPROCESSORS_ONLN _SC_THREAD_STACK_MIN;
MACRO__SC_NPROCESSORS_ONLN _SC_THREAD_THREADS_MAX;
MACRO__SC _SC_TIMERS;
MACRO__SC _SC_TIMER_MAX;
MACRO__SC_NPROCESSORS_ONLN _SC_TTY_NAME_MAX;
MACRO__SC_ARG _SC_TZNAME_MAX;
MACRO__SC_T _SC_T_IOV_MAX;
MACRO__SC_ARG _SC_VERSION;
MACRO__SC_ARG _SC_XOPEN_CRYPT;
MACRO__SC_ARG _SC_XOPEN_ENH_I18N;
MACRO__SC_ARG _SC_XOPEN_SHM;
MACRO__SC_ARG _SC_XOPEN_UNIX;
MACRO__SC_PASS _SC_XOPEN_VERSION;
MACRO__SC_ARG _SC_XOPEN_XCU_VERSION;
MACRO__SEMAPHORE _SEMAPHORE_H;
MACRO__NBRA _SEMBRACEFMT;
MACRO__SHUT SHUT_DOWN;
MACRO__SIA_GET _SIA_GET_GROUPS;
MACRO__SIA _SIA_MAX_REQUIRED;
MACRO__SIA_SES _SIA_SES_TOGGLE_PRIVS;
MACRO__SIA_SES_UPDATE _SIA_SES_UPDATE_AUDIT_RECORD;
MACRO__SIA_TEST _SIA_TEST_NEWPASS;
MACRO__SIA_UPDATE _SIA_UPDATE_PASS;
MACRO_SS_STACKMAGIC _SSTACKFLAGS;
MACRO_SHUT _SS_MAXSIZE;
MACRO__STANDOUT _STANDOUT;
MACRO__CDFS_XCDR _STDID_SZ;
MACRO__SUBS _SUBS_ACTIVE;
MACRO__SUBS _SUBS_REGEXP;
MACRO__NBRA _SYNBRACEFMT;
MACRO__CDFS_XCDR _SYSID_SZ;
MACRO__SYSUSE _SYSUSE_SZ;
MACRO__SYS_CDROM _SYS_CDROM_INCLUDE;
MACRO__SYS _SYS_NMLN;
MACRO__SYS_TIMEX _SYS_TIMEX_H_;
int Seterrno(int);
MACRO__TCBHASHSIZE _TCBHASHSIZE;
MACRO__THASH _THASH;
MACRO__TIS_HARDWARE _TIS_HARDWARE_;
MACRO__TIS_OS _TIS_OS_;
MACRO__TIS _TIS_VERSION;
MACRO__TIS__ALPHA _TIS__ALPHA;
MACRO__TIS__ALPHA _TIS__IA64;
MACRO__TIS_ _TIS__OSF;
MACRO__TIS__ALPHA _TIS__VAX;
MACRO__TIS_ _TIS__VMS;
MACRO__USING _USING_PROTOTYPES_;
MACRO__VGAINFO _VGAINFO_H_;
MACRO__VOLID _VOLID_SZ;
MACRO__VOLID _VSID_SZ;
MACRO__WAITC _WAITC_ADD;
MACRO__WAITC WAITC_FREE;
MACRO__WAITC _WAITC_IN;
MACRO__WAITC _WAITC_INS;
MACRO__ISPAD _WINCHANGED;
MACRO__ISPAD _WINMOVED;
MACRO__ISPAD _WINSDEL;
MACRO__ISPAD _WIN_ADD_ONE;
MACRO__ISPAD _WIN_INS_ONE;
MACRO_WNOHANG _WSTOPPED;
MACRO_WSTOPPED _W_CONTINUED;
AtomPtr XA_ATOM_PAIR;
AtomPtr XA_CHARACTER_POSITION;
AtomPtr XA_CLASS;
AtomPtr XA_CLIENT_WINDOW;
AtomPtr XA_CLIPBOARD;
AtomPtr XA_COMPOUND_TEXT;
AtomPtr XA_DECNET_ADDRESS;
AtomPtr XA_DELETE;
AtomPtr XA_FILENAME;
AtomPtr XA_HOSTNAME;
AtomPtr XA_IP_ADDRESS;
AtomPtr XA_LENGTH;
AtomPtr XA_LIST_LENGTH;
AtomPtr XA_NAME;
AtomPtr XA_NET_ADDRESS;
AtomPtr XA_NULL;
AtomPtr XA_OWNER_OS;
AtomPtr XA_SPAN;
AtomPtr XA_TARGETS;
AtomPtr XA_TEXT;
AtomPtr XA_TIMESTAMP;
AtomPtr XA_USER;
MACRO__XBS5 _XBS5_LP64_OFF64;
MACRO__XBS5_LPBIG _XBS5_LPBIG_OFFBIG;
void XEditResCheckMessages();
Boolean XEditResGet16();
Boolean XEditResGet32();
Boolean XEditResGet8();
Boolean XEditResGetSigned16();
Boolean XEditResGetString8();
Boolean XEditResGetWidgetInfo();
void XEditResPut16();
void XEditResPut32();
void XEditResPut8();
void XEditResPutString8();
void XEditResPutWidget();
void XEditResPutWidgetInfo();
void XEditResResetStream();
MACRO__XKBBELLS _XKBBELLS_H_;
MACRO__XKBCONFIG _XKBCONFIG_H_;
MACRO__XKBFILE _XKBFILE_H_;
MACRO__XKBRULES _XKBRULES_H_;
MACRO__XKB _XKB_RF_NAMES_PROP_MAXLEN;
MACRO__XKMFORMAT _XKMFORMAT_H_;
KeySym XKeycodeToKeysym(Display *, KeyCode, int);
KeyCode XKeysymToKeycode(Display *, KeySym);
unsigned int XKeysymToModifiers(Display *, KeySym);
KeySym XLookupKeysym(XKeyEvent *, int);
int XLookupString(XKeyEvent *, char *, int, KeySym *, XComposeStatus *);
$28C8A916C7103946A5DCC8FD950343DA XM_IS_DEST_CTX;
$28C8A916C7103946A5DCC8FD950343DA _XM_IS_GC_DATA_CTX;
$28C8A916C7103946A5DCC8FD950343DA _XM_IS_PIXMAP_CTX;
MACRO__XOPEN_XPG4 _XOPEN_CRYPT;
MACRO__XOPEN_ENH _XOPEN_ENH_I18N;
MACRO__XOPEN_SHM _XOPEN_SHM;
MACRO__XOPEN _XOPEN_SOURCE;
MACRO__XOPEN_UNIX _XOPEN_UNIX;
MACRO__XOPEN_VERSION _XOPEN_VERSION;
MACRO__XOPEN_XCU _XOPEN_XCU_VERSION;
MACRO__XOPEN_XPG4 _XOPEN_XPG4;
int XRefreshKeyboardMapping(XMappingEvent *);
int XTranslateKey(Display *, KeyCode, unsigned int, unsigned int *, KeySym *, KeySym *, KeySym *);
int XTranslateKeySym(Display *, KeySym, KeySym, KeySym, unsigned int, char *, int);
xthread_t X_no_thread_id;
void XawImCallVendorShellExtResize(Widget);
void XawImDestroy(Widget, Widget);
int XawImGetImAreaHeight(Widget);
Dimension XawImGetShellHeight(Widget);
void XawImInitialize(Widget, Widget);
void XawImRealize(Widget);
void XawImReconnect(Widget);
void XawImRegister(Widget);
void XawImResizeVendorShell(Widget);
void XawImSetFocusValues(Widget, ArgList, Cardinal);
void XawImSetValues(Widget, ArgList, Cardinal);
void XawImUnregister(Widget);
void XawImUnsetFocus(Widget);
int XawImWcLookupString(Widget, XKeyPressedEvent *, wchar_t *, int, KeySym *, int *);
Boolean XawMultiSave(Widget);
Boolean XawMultiSaveAsFile(Widget, const char *);
void XawMultiSinkPosToXY(Widget, XawTextPosition, Position *, Position *);
void XawMultiSourceFreeString(Widget);
XtActionsRec XawTextActionsTable[];
Cardinal XawTextActionsTableCount;
void XawTextBuildLineTable(TextWidget, XawTextPosition, int);
XrmQuark XawTextFormat(TextWidget);
char *XawTextGetSTRING(TextWidget, XawTextPosition, XawTextPosition);
wchar_t *XawTextMBToWC(Display *, char *, int *);
void XawTextPosToXY(Widget, XawTextPosition, Position *, Position *);
void XawTextSaltAwaySelection(TextWidget, Atom *, int);
char *XawTextWCToMB(Display *, wchar_t *, int *);
int Xdebug;
int XkbCopyFromReadBuffer(XkbReadBufferPtr, char *, int);
MACRO__XkbSuccess _XkbErrBadAlloc;
MACRO__XkbSuccess _XkbErrBadFileFormat;
MACRO__XkbSuccess _XkbErrBadFileType;
MACRO__XkbSuccess _XkbErrBadFileVersion;
MACRO__XkbSuccess _XkbErrBadImplementation;
MACRO__XkbSuccess _XkbErrBadLength;
MACRO__XkbSuccess _XkbErrBadMatch;
MACRO__XkbSuccess _XkbErrBadTypeName;
MACRO__XkbSuccess _XkbErrBadTypeWidth;
MACRO__XkbSuccess _XkbErrBadValue;
unsigned int XkbErrCode;
unsigned int XkbErrData;
MACRO__XkbSuccess _XkbErrEmptyFile;
MACRO__XkbSuccess _XkbErrFileCannotOpen;
MACRO__XkbSuccess _XkbErrFileNotFound;
MACRO__XkbSuccess _XkbErrIllegalContents;
MACRO__XkbSuccess _XkbErrIllegalDoodad;
MACRO__XkbSuccess _XkbErrIllegalTOCType;
char *XkbErrLocation;
char *XkbErrMessages[];
MACRO__XkbSuccess _XkbErrMissingCompatMap;
MACRO__XkbSuccess _XkbErrMissingGeometry;
MACRO__XkbSuccess _XkbErrMissingIndicators;
MACRO__XkbSuccess _XkbErrMissingNames;
MACRO__XkbSuccess _XkbErrMissingReqTypes;
MACRO__XkbSuccess _XkbErrMissingSymInterps;
MACRO__XkbSuccess _XkbErrMissingSymbols;
MACRO__XkbSuccess _XkbErrMissingTypes;
MACRO__XkbSuccess _XkbErrMissingVMods;
MACRO__XkbSuccess _XkbErrXReqFailure;
int XkbFreeReadBuffer(XkbReadBufferPtr);
XkbGetAtomNameFunc XkbGetAtomNameFunc;
char *XkbGetCharset(void);
int XkbGetConverters(char *, XkbConverters *);
int XkbGetReadBufferCountedString(XkbReadBufferPtr, char **);
char *XkbGetReadBufferPtr(XkbReadBufferPtr, int);
int XkbInitReadBuffer(Display *, XkbReadBufferPtr, int);
XkbInternAtomFunc XkbInternAtomFunc;
unsigned int XkbKSCheckCase(KeySym);
MACRO__XkbKSLower _XkbKSLower;
MACRO__XkbKSLower _XkbKSUpper;
void XkbNoteCoreMapChanges(XkbMapChangesRec *, XMappingEvent *, unsigned int);
char *XkbPeekAtReadBuffer(XkbReadBufferPtr, int);
int XkbReadBufferCopy32(XkbReadBufferPtr, __int64 *, int);
int XkbReadBufferCopyKeySyms(XkbReadBufferPtr, KeySym *, int);
int XkbReadCopyData32(int *, __int64 *, int);
int XkbReadCopyKeySyms(int *, KeySym *, int);
void XkbReloadDpy(Display *);
int XkbSkipReadBufferData(XkbReadBufferPtr, int);
MACRO__XkbSuccess XkbSuccess;
int XkbWriteCopyData32(unsigned __int64 *, CARD32 *, int);
int XkbWriteCopyKeySyms(KeySym *, CARD32 *, int);
Pixel XmAccessColorData(XmColorData *cd, unsigned int which);
void XmAddGrab(Widget wid, int exclusive, int spring_loaded);
void XmAddTearOffEventHandlers(Widget wid);
XmColorData *XmAddToColorCache(XmColorData *new_rec);
Atom XmAllocMotifAtom(Widget shell, Time time);
XmDragReceiverInfo XmAllocReceiverInfo(XmDragContext dc);
Pixmap XmAllocScratchPixmap(XmScreen xmScreen, unsigned int depth, int width, int height);
void XmAllowAcceleratedInsensitiveUnmanagedMenuItems(Widget wid, int allowed);
char XmArrowB_defaultTranslations[];
int XmArrowPixmapCacheCompare(XtPointer A, XtPointer B);
void XmArrowPixmapCacheDelete(XtPointer data);
void XmAssignLabG_MarginBottom(XmLabelGadget lw, int value);
void XmAssignLabG_MarginHeight(XmLabelGadget lw, int value);
void XmAssignLabG_MarginLeft(XmLabelGadget lw, int value);
void XmAssignLabG_MarginRight(XmLabelGadget lw, int value);
void XmAssignLabG_MarginTop(XmLabelGadget lw, int value);
void XmAssignLabG_MarginWidth(XmLabelGadget lw, int value);
void XmBBUpdateDynDefaultButton(Widget bb);
Widget XmBB_CreateButtonG(Widget bb, XmString l_string, char *name);
Widget XmBB_CreateLabelG(Widget bb, XmString l_string, char *name);
void XmBackgroundColorDefault(Widget widget, int offset, XrmValue *value);
void XmBaseClassPartInitialize(WidgetClass wc);
Pixel XmBlackPixel(Screen *screen, Colormap colormap, XColor blackcolor);
void XmBottomShadowColorDefault(Widget widget, int offset, XrmValue *value);
void XmBuildExtResources(WidgetClass c);
void XmBuildGadgetResources(WidgetClass c);
void XmBuildResources(XmSyntheticResource **wc_resources_ptr, int *wc_num_resources_ptr, XmSyntheticResource *sc_resources, int sc_num_resources);
char XmBulletinB_defaultTranslations[];
void XmBulletinBoardCancel(Widget wid, XEvent *event, String *params, Cardinal *numParams);
void XmBulletinBoardFocusMoved(Widget wid, XtPointer client_data, XtPointer data);
void XmBulletinBoardMap(Widget wid, XEvent *event, String *params, Cardinal *numParams);
void XmBulletinBoardReturn(Widget wid, XEvent *event, String *params, Cardinal *numParams);
void XmBulletinBoardSetDefaultShadow(Widget button);
void XmBulletinBoardSetDynDefaultButton(Widget wid, Widget newDefaultButton);
void XmBulletinBoardSizeUpdate(Widget wid);
void XmCBHelp(Widget w, XEvent *event, String *params, Cardinal *num_params);
void XmCacheCopy(XtPointer src, XtPointer dest, size_t size);
void XmCacheDelete(XtPointer data);
XtPointer XmCachePart(XmCacheClassPartPtr cp, XtPointer cpart, size_t size);
void XmCalcLabelDimensions(Widget wid);
void XmCalcLabelGDimensions(Widget wid);
Boolean XmCallFocusMoved(Widget old, Widget new_wid, XEvent *event);
void XmCallRowColumnMapCallback(Widget wid, XEvent *event);
void XmCallRowColumnUnmapCallback(Widget wid, XEvent *event);
char XmCascadeB_menubar_events[];
char XmCascadeB_p_events[];
void XmCascadingPopup(Widget cb, XEvent *event, int doCascade);
char *XmCharsetCanonicalize(String charset);
void XmClearBCompatibility(Widget pb);
void XmClearBGCompatibility(Widget pbg);
void XmClearBGPixmapName(void);
void XmClearBorder(Display *display, Window w, int x, int y, int width, int height, int shadow_thick);
void XmClearFocusPath(Widget wid);
void XmClearIconPixmapName(void);
void XmClearRect(XRectangle *r);
void XmClearShadowType(Widget w, int old_width, int old_height, int old_shadow_thickness, int old_highlight_thickness);
void XmClearTraversal(Widget wid, XEvent *event, String *params, Cardinal *num_params);
void XmColorObjCreate(Widget w, ArgList al, Cardinal *acPtr);
void XmCommandReturn(Widget wid, XEvent *event, String *params, Cardinal *numParams);
void XmCommandUpOrDown(Widget wid, XEvent *event, String *argv, Cardinal *argc);
void XmConfigureObject(Widget g, int x, int y, int width, int height, int border_width);
char *XmConvertCSToString(XmString cs);
int XmConvertUnits(Screen *screen, int dimension, int from_type, int from_val, int to_type);
XrmQuark XmCopyCursorIconQuark;
void XmCountVaList(va_list var, int *button_count, int *args_count, int *typed_count, int *total_count);
void XmCreateArrowPixmaps(Widget wid);
XmFocusData XmCreateFocusData(void);
Boolean XmCreateVisibilityRect(Widget w, XRectangle *rectPtr);
Boolean XmCvtXmStringToCT(XrmValue *from, XrmValue *to);
int XmDSMGetTreeFromDSM(XmDropSiteManagerObject dsm, Widget shell, XtPointer dataPtr);
void XmDSMUpdate(XmDropSiteManagerObject dsm, XtPointer clientData, XtPointer callData);
XrmQuark XmDefaultDragIconQuark;
void XmDestroyDefaultDragIcon(XmDragIconObject icon);
void XmDestroyFocusData(XmFocusData focusData);
void XmDestroyMotifWindow(Display *dpy);
void XmDestroyParentCallback(Widget w, XtPointer client_data, XtPointer call_data);
void XmDestroyTearOffShell(Widget wid);
Boolean XmDifferentBackground(Widget w, Widget parent);
void XmDismissTearOff(Widget shell, XtPointer closure, XtPointer call_data);
void XmDispatchGadgetInput(Widget g, XEvent *event, Mask mask);
void XmDragIconClean(XmDragIconObject icon1, XmDragIconObject icon2, XmDragIconObject icon3);
Boolean XmDragIconIsDirty(XmDragIconObject icon);
void XmDragOverChange(Widget w, unsigned int dropSiteStatus);
void XmDragOverFinish(Widget w, unsigned int completionStatus);
Cursor XmDragOverGetActiveCursor(Widget w);
void XmDragOverHide(Widget w, int clipOriginX, int clipOriginY, XmRegion clipRegion);
void XmDragOverMove(Widget w, int x, int y);
void XmDragOverSetInitialPosition(Widget w, int initialX, int initialY);
void XmDragOverShow(Widget w, int clipOriginX, int clipOriginY, XmRegion clipRegion);
void XmDragUnderAnimation(Widget w, XtPointer clientData, XtPointer callData);
void XmDrawArrow(Display *display, Drawable d, GC top_gc, GC bot_gc, GC cent_gc, int x, int y, int width, int height, int shadow_thick, unsigned int direction);
void XmDrawDiamond(Display *display, Drawable d, GC top_gc, GC bottom_gc, GC center_gc, int x, int y, int width, int height, int shadow_thick, int fill);
void XmDrawHighlight(Display *display, Drawable d, GC gc, int x, int y, int width, int height, int highlight_thick, int line_style);
void XmDrawSeparator(Display *display, Drawable d, GC top_gc, GC bottom_gc, GC separator_gc, int x, int y, int width, int height, int shadow_thick, int margin, unsigned int orientation, unsigned int separator_type);
void XmDrawShadows(Display *display, Drawable d, GC top_gc, GC bottom_gc, int x, int y, int width, int height, int shad_thick, unsigned int shad_type);
void XmDrawSimpleHighlight(Display *display, Drawable d, GC gc, int x, int y, int width, int height, int highlight_thick);
char XmDrawingA_defaultTranslations[];
char XmDrawingA_traversalTranslations[];
void XmDrawingAreaInput(Widget wid, XEvent *event, String *params, Cardinal *num_params);
char XmDrawnB_defaultTranslations[];
Boolean XmDropSiteShell(Widget widget);
Boolean XmDropSiteWrapperCandidate(Widget widget);
int XmEmptyRect(XRectangle *r);
void XmEnterGadget(Widget wid, XEvent *event, String *params, Cardinal *num_params);
void XmEnterRowColumn(Widget widget, XtPointer closure, XEvent *event, Boolean *cont);
XmExcludedParentPaneRec XmExcludedParentPane;
void XmExtGetValuesHook(Widget w, ArgList args, Cardinal *num_args);
void XmExtImportArgs(Widget w, ArgList args, Cardinal *num_args);
char *XmExtObjAlloc(int size);
void XmExtObjFree(XtPointer element);
Cardinal XmFilterResources(XtResource *resources, Cardinal numResources, WidgetClass filterClass, XtResource **filteredResourcesRtn);
Widget XmFindNextTabGroup(Widget wid);
Widget XmFindPrevTabGroup(Widget wid);
Widget XmFindTopMostShell(Widget w);
void XmFocusInGadget(Widget wid, XEvent *event, String *params, Cardinal *num_params);
Boolean XmFocusIsHere(Widget w);
Boolean XmFocusIsInShell(Widget wid);
void XmFocusModelChanged(Widget wid, XtPointer client_data, XtPointer call_data);
void XmFocusOutGadget(Widget wid, XEvent *event, String *params, Cardinal *num_params);
Boolean XmFontListGetDefaultFont(XmFontList fontlist, XFontStruct **font_struct);
Boolean XmFontListSearch(XmFontList fontlist, XmStringCharSet charset, __int16 *indx, XFontStruct **font_struct);
void XmForegroundColorDefault(Widget widget, int offset, XrmValue *value);
char XmFrame_defaultTranslations[];
void XmFreeMotifAtom(Widget shell, Atom atom);
void XmFreeScratchPixmap(XmScreen xmScreen, Pixmap pixmap);
void XmFreeWidgetExtData(Widget widget);
void XmFromHorizontalPixels(Widget widget, int offset, XtArgVal *value);
void XmFromVerticalPixels(Widget widget, int offset, XtArgVal *value);
void XmGadgetActivate(Widget wid, XEvent *event, String *params, Cardinal *num_params);
void XmGadgetArm(Widget wid, XEvent *event, String *params, Cardinal *num_params);
void XmGadgetButtonMotion(Widget wid, XEvent *event, String *params, Cardinal *num_params);
void XmGadgetDrag(Widget wid, XEvent *event, String *params, Cardinal *num_params);
void XmGadgetGetValuesHook(Widget w, ArgList args, Cardinal *num_args);
void XmGadgetImportArgs(Widget w, ArgList args, Cardinal *num_args);
void XmGadgetImportSecondaryArgs(Widget w, ArgList args, Cardinal *num_args);
void XmGadgetKeyInput(Widget wid, XEvent *event, String *params, Cardinal *num_params);
void XmGadgetMultiActivate(Widget wid, XEvent *event, String *params, Cardinal *num_params);
void XmGadgetMultiArm(Widget wid, XEvent *event, String *params, Cardinal *num_params);
void XmGadgetSelect(Widget wid, XEvent *event, String *params, Cardinal *num_params);
void XmGadgetTraverseDown(Widget wid, XEvent *event, String *params, Cardinal *num_params);
void XmGadgetTraverseHome(Widget wid, XEvent *event, String *params, Cardinal *num_params);
void XmGadgetTraverseLeft(Widget wid, XEvent *event, String *params, Cardinal *num_params);
void XmGadgetTraverseNext(Widget wid, XEvent *event, String *params, Cardinal *num_params);
void XmGadgetTraverseNextTabGroup(Widget wid, XEvent *event, String *params, Cardinal *num_params);
void XmGadgetTraversePrev(Widget wid, XEvent *event, String *params, Cardinal *num_params);
void XmGadgetTraversePrevTabGroup(Widget wid, XEvent *event, String *params, Cardinal *num_params);
void XmGadgetTraverseRight(Widget wid, XEvent *event, String *params, Cardinal *num_params);
void XmGadgetTraverseUp(Widget wid, XEvent *event, String *params, Cardinal *num_params);
void XmGeoAdjustBoxes(XmGeoMatrix geoSpec);
void XmGeoArrangeBoxes(XmGeoMatrix geoSpec, int x, int y, Dimension *pW, Dimension *pH);
Dimension XmGeoBoxesSameHeight(XmKidGeometry rowPtr, int height);
Dimension XmGeoBoxesSameWidth(XmKidGeometry rowPtr, int width);
void XmGeoClearRectObjAreas(RectObj r, XWindowChanges *old);
int XmGeoCount_kids(CompositeWidget c);
void XmGeoGetDimensions(XmGeoMatrix geoSpec);
void XmGeoLoadValues(Widget wid, int geoType, Widget instigator, XtWidgetGeometry *request, XtWidgetGeometry *geoResult);
XmGeoMatrix XmGeoMatrixAlloc(unsigned int numRows, unsigned int numBoxes, unsigned int extSize);
void XmGeoMatrixFree(XmGeoMatrix geo_spec);
void XmGeoMatrixGet(XmGeoMatrix geoSpec, int geoType);
void XmGeoMatrixSet(XmGeoMatrix geoSpec);
Boolean XmGeoReplyYes(Widget wid, XtWidgetGeometry *desired, XtWidgetGeometry *response);
Boolean XmGeoSetupKid(XmKidGeometry geo, Widget kidWid);
Boolean XmGeometryEqual(Widget wid, XtWidgetGeometry *geoA, XtWidgetGeometry *geoB);
Widget XmGetActiveDropSite(Widget widget);
Widget XmGetActiveItem(Widget w);
unsigned __int8 XmGetActiveProtocolStyle(Widget w);
void XmGetActiveTopLevelMenu(Widget wid, Widget *rwid);
WidgetClass XmGetActualClass(Display *display, WidgetClass w_class);
unsigned __int8 XmGetAudibleWarning(Widget w);
char *XmGetBGPixmapName(void);
XmGenericClassExt *XmGetClassExtensionPtr(XmGenericClassExt *listHeadPtr, XrmQuark owner);
XmColorData *XmGetColors(Screen *screen, Colormap color_map, Pixel background);
String XmGetDefaultBackgroundColorSpec(Screen *screen);
XmColorData *XmGetDefaultColors(Screen *screen, Colormap color_map);
Display *XmGetDefaultDisplay(void);
XmFontList XmGetDefaultFontList(Widget w, unsigned int fontListType);
void XmGetDefaultThresholdsForScreen(Screen *screen);
Widget XmGetDragContextFromHandle(Widget w, Atom iccHandle);
XmDragCursorCache *XmGetDragCursorCachePtr(XmScreen xmScreen);
unsigned __int8 XmGetDragProtocolStyle(Widget w);
Window XmGetDragProxyWindow(Display *display);
unsigned __int8 XmGetDragTrackingMode(Widget w);
XmDropSiteManagerObject XmGetDropSiteManagerObject(XmDisplay xmDisplay);
Widget XmGetFirstFocus(Widget wid);
XFontStruct *XmGetFirstFont(XmFontListEntry entry);
XmFocusData XmGetFocusData(Widget wid);
unsigned __int8 XmGetFocusPolicy(Widget w);
int XmGetFontUnit(Screen *screen, int dimension);
Boolean XmGetIconControlInfo(Screen *screen, Boolean *useMaskRtn, Boolean *useMultiColorIconsRtn, Boolean *useIconFileCacheRtn);
char *XmGetIconPixmapName(void);
Boolean XmGetImage(Screen *screen, char *image_name, XImage **image);
XImage *XmGetImageAndHotSpotFromFile(char *filename, int *hot_x, int *hot_y);
XImage *XmGetImageFromFile(char *filename);
Boolean XmGetInDragMode(Widget widget);
XmKidGeometry XmGetKidGeo(Widget wid, Widget instigator, XtWidgetGeometry *request, int uniform_border, int border, int uniform_width_margins, int uniform_height_margins, Widget help, int geo_type);
void XmGetMaxCursorSize(Widget w, Dimension *width, Dimension *height);
Cursor XmGetMenuCursorByScreen(Screen *screen);
XtPointer XmGetMenuProcContext(void);
XmMenuState XmGetMenuState(Widget widget);
Boolean XmGetMoveOpaqueByScreen(Screen *screen);
Cursor XmGetNullCursor(Widget w);
Boolean XmGetPixelData(int screen, int *colorUse, PixelSet *pixelSet, __int16 *a, __int16 *i, __int16 *p, __int16 *s);
Pixmap XmGetPixmap(Screen *screen, char *image_name, int depth, Pixel foreground, Pixel background);
Boolean XmGetPixmapData(Screen *screen, Pixmap pixmap, char **image_name, int *depth, Pixel *foreground, Pixel *background, int *hot_x, int *hot_y, unsigned int *width, unsigned int *height);
Boolean XmGetPopupMenuClick(Widget wid);
Widget XmGetRC_PopupPosted(Widget wid);
char *XmGetRealXlations(Display *dpy, _XmBuildVirtualKeyStruct *keys, int num_keys);
Widget XmGetTextualDragIcon(Widget w);
unsigned __int8 XmGetUnitType(Widget widget);
unsigned __int8 XmGetUnpostBehavior(Widget wid);
XmWidgetExtData XmGetWidgetExtData(Widget widget, unsigned int extType);
XmWorldObject XmGetWorldObject(Widget shell, ArgList args, Cardinal *num_args);
WidgetClass XmGetXmDisplayClass(void);
int XmGrabKeyboard(Widget widget, int owner_events, int pointer_mode, int keyboard_mode, Time time);
int XmGrabPointer(Widget widget, int owner_events, unsigned int event_mask, int pointer_mode, int keyboard_mode, Window confine_to, Cursor cursor, Time time);
Boolean XmGrabTheFocus(Widget w, XEvent *event);
XtGeometryResult XmHandleGeometryManager(Widget wid, Widget instigator, XtWidgetGeometry *desired, XtWidgetGeometry *allowed, unsigned int policy, XmGeoMatrix *cachePtr, XmGeoCreateProc createMatrix);
void XmHandleMenuButtonPress(Widget wid, XEvent *event);
XtGeometryResult XmHandleQueryGeometry(Widget wid, XtWidgetGeometry *intended, XtWidgetGeometry *desired, unsigned int policy, XmGeoCreateProc createMatrix);
void XmHandleSizeUpdate(Widget wid, unsigned int policy, XmGeoCreateProc createMatrix);
void XmHighlightColorDefault(Widget widget, int offset, XrmValue *value);
void XmIEndUpdate(XtPointer client_data, XtIntervalId *interval_id);
void XmImChangeManaged(Widget vw);
XtGeometryResult XmImQueryGeometry(Widget vw, XtWidgetGeometry *intended, XtWidgetGeometry *desired);
void XmImRealize(Widget vw);
void XmImRedisplay(Widget vw);
void XmImResize(Widget vw);
Cardinal XmIndexToTargets(Widget shell, Cardinal t_index, Atom **targetsRtn);
int XmInheritClass;
void XmInitAtomPairs(Display *display);
void XmInitTargetsTable(Display *display);
void XmInitializeExtensions(void);
void XmInitializeScrollBars(Widget w);
void XmInitializeSyntheticResources(XmSyntheticResource *resources, int num_resources);
XmGadget XmInputForGadget(Widget cw, int x, int y);
XmGadget XmInputInGadget(Widget cw, int x, int y);
Boolean XmInstallImage(XImage *image, char *image_name, int hot_x, int hot_y);
Boolean XmInstallPixmap(Pixmap pixmap, Screen *screen, char *image_name, Pixel foreground, Pixel background);
void XmInstallProtocols(Widget w);
int XmIntersectRect(XRectangle *srcRectA, Widget widget, XRectangle *dstRect);
XrmQuark XmInvalidCursorIconQuark;
Boolean XmIsActiveTearOff(Widget w);
Boolean XmIsEventUnique(XEvent *event);
Boolean XmIsNavigable(Widget wid);
Boolean XmIsSlowSubclass(WidgetClass wc, unsigned int bit);
Boolean XmIsStandardMotifWidgetClass(WidgetClass wc);
Boolean XmIsTearOffShellDescendant(Widget wid);
int XmLabelCacheCompare(XtPointer A, XtPointer B);
char XmLabel_defaultTranslations[];
char XmLabel_menuTranslations[];
char XmLabel_menu_traversal_events[];
void XmLeafPaneFocusOut(Widget wid);
void XmLeaveGadget(Widget wid, XEvent *event, String *params, Cardinal *num_params);
XrmQuark XmLinkCursorIconQuark;
char XmList_ListXlations1[];
char XmList_ListXlations2[];
void XmLowerTearOffObscuringPoppingDownPanes(Widget ancestor, Widget tearOff);
MACRO__XmRAW _XmMANAGE_MAP;
XtGeometryResult XmMakeGeometryRequest(Widget w, XtWidgetGeometry *geom);
void XmManagerEnter(Widget wid, XEvent *event_in, String *params, Cardinal *num_params);
void XmManagerFocusIn(Widget mw, XEvent *event, String *params, Cardinal *num_params);
void XmManagerFocusInInternal(Widget wid, XEvent *event, String *params, Cardinal *num_params);
void XmManagerFocusOut(Widget wid, XEvent *event, String *params, Cardinal *num_params);
void XmManagerGetValuesHook(Widget w, ArgList args, Cardinal *num_args);
void XmManagerHelp(Widget wid, XEvent *event, String *params, Cardinal *num_params);
void XmManagerHighlightPixmapDefault(Widget widget, int offset, XrmValue *value);
void XmManagerImportArgs(Widget w, ArgList args, Cardinal *num_args);
void XmManagerLeave(Widget wid, XEvent *event_in, String *params, Cardinal *num_params);
void XmManagerParentActivate(Widget mw, XEvent *event, String *params, Cardinal *num_params);
void XmManagerParentCancel(Widget mw, XEvent *event, String *params, Cardinal *num_params);
void XmManagerTopShadowPixmapDefault(Widget widget, int offset, XrmValue *value);
void XmManagerUnmap(Widget mw, XEvent *event, String *params, Cardinal *num_params);
char XmManager_defaultTranslations[];
char XmManager_managerTraversalTranslations[];
Boolean XmMapBtnEvent(String str, int *eventType, unsigned int *button, unsigned int *modifiers);
Boolean XmMapKeyEvent(String str, int *eventType, unsigned int *keysym, unsigned int *modifiers);
Boolean XmMatchBDragEvent(Widget wid, XEvent *event);
Boolean XmMatchBSelectEvent(Widget wid, XEvent *event);
Boolean XmMatchBtnEvent(XEvent *event, int eventType, unsigned int button, unsigned int modifiers);
Boolean XmMatchKeyEvent(XEvent *event, int eventType, unsigned int key, unsigned int modifiers);
void XmMenuBarFix(XmGeoMatrix geoSpec, int action, XmGeoMajorLayout layoutPtr, XmKidGeometry rowPtr);
void XmMenuBtnDown(Widget wid, XEvent *event, String *params, Cardinal *num_params);
void XmMenuBtnUp(Widget wid, XEvent *event, String *params, Cardinal *num_params);
void XmMenuEscape(Widget w, XEvent *event, String *params, Cardinal *num_params);
void XmMenuFocus(Widget w, int operation, Time time);
void XmMenuHelp(Widget wid, XEvent *event, String *params, Cardinal *num_params);
void XmMenuPopDown(Widget w, XEvent *event, Boolean *popped_up);
void XmMenuSetInPMMode(Widget wid, int flag);
char XmMenuShell_translations[];
void XmMenuTraversalHandler(Widget w, Widget pw, XmTraversalDirection direction);
void XmMenuTraverseDown(Widget wid, XEvent *event, String *param, Cardinal *num_param);
void XmMenuTraverseLeft(Widget wid, XEvent *event, String *param, Cardinal *num_param);
void XmMenuTraverseRight(Widget wid, XEvent *event, String *param, Cardinal *num_param);
void XmMenuTraverseUp(Widget wid, XEvent *event, String *param, Cardinal *num_param);
XmGeoMatrix XmMessageBoxGeoMatrixCreate(Widget wid, Widget instigator, XtWidgetGeometry *desired);
Boolean XmMessageBoxNoGeoRequest(XmGeoMatrix geoSpec);
Boolean XmMgrTraversal(Widget wid, XmTraversalDirection direction);
int XmMicroSleep(__int64 secs);
XrmQuark XmMoveCursorIconQuark;
void XmMoveObject(Widget g, int x, int y);
$5082B94BDE211399AF6F85937D2B1C0A _XmNUMBER_DND_CB_REASONS;
void XmNavigChangeManaged(Widget wid);
void XmNavigDestroy(Widget wid);
void XmNavigInitialize(Widget request, Widget new_wid, ArgList args, Cardinal *num_args);
void XmNavigResize(Widget wid);
Boolean XmNavigSetValues(Widget current, Widget request, Widget new_wid, ArgList args, Cardinal *num_args);
Widget XmNavigate(Widget wid, XmTraversalDirection direction);
XrmQuark XmNoneCursorIconQuark;
void XmOSBuildFileList(String dirPath, String pattern, unsigned int typeMask, String **pEntries, unsigned int *pNumEntries, unsigned int *pNumAlloc);
String XmOSBuildFileName(String file, String path);
int XmOSFileCompare(const void *sp1, const void *sp2);
String XmOSFindPatternPart(String fileSpec);
void XmOSGenerateMaskName(String imageName, String maskNameBuf);
void XmOSGetDirEntries(String qualifiedDir, String matchPattern, unsigned int fileType, int matchDotsLiterally, int listWithFullPath, String **pEntries, unsigned int *pNumEntries, unsigned int *pNumAlloc);
String XmOSGetHomeDirName();
XmString XmOSGetLocalizedString(char *reserved, Widget widget, char *resource, String string);
String XmOSInitPath(String file_name, String env_pathname, Boolean *user_path);
int XmOSPutenv(char *string);
void XmOSQualifyFileSpec(String dirSpec, String filterSpec, String *pQualifiedDir, String *pQualifiedPattern);
String XmOSSetLocale(String locale);
MACRO__XmRAW _XmPOPUP_MAP;
Boolean XmParentProcess(Widget widget, XmParentProcessData data);
void XmPopWidgetExtData(Widget widget, XmWidgetExtData *dataRtn, unsigned int extType);
void XmPostPopupMenu(Widget wid, XEvent *event);
void XmPrimitiveEnter(Widget wid, XEvent *event, String *params, Cardinal *num_params);
void XmPrimitiveFocusIn(Widget pw, XEvent *event, String *params, Cardinal *num_params);
void XmPrimitiveFocusInInternal(Widget wid, XEvent *event, String *params, Cardinal *num_params);
void XmPrimitiveFocusOut(Widget wid, XEvent *event, String *params, Cardinal *num_params);
void XmPrimitiveGetValuesHook(Widget w, ArgList args, Cardinal *num_args);
void XmPrimitiveHelp(Widget wid, XEvent *event, String *params, Cardinal *num_params);
void XmPrimitiveHighlightPixmapDefault(Widget widget, int offset, XrmValue *value);
void XmPrimitiveImportArgs(Widget w, ArgList args, Cardinal *num_args);
void XmPrimitiveLeave(Widget wid, XEvent *event, String *params, Cardinal *num_params);
void XmPrimitiveParentActivate(Widget pw, XEvent *event, String *params, Cardinal *num_params);
void XmPrimitiveParentCancel(Widget pw, XEvent *event, String *params, Cardinal *num_params);
void XmPrimitiveTopShadowPixmapDefault(Widget widget, int offset, XrmValue *value);
void XmPrimitiveUnmap(Widget pw, XEvent *event, String *params, Cardinal *num_params);
char XmPrimitive_defaultTranslations[];
void XmProcessDrag(Widget w, XEvent *event, String *params, Cardinal *num_params);
void XmProcessTraversal(Widget w, XmTraversalDirection dir, int check);
char XmPushB_defaultTranslations[];
char XmPushB_menuTranslations[];
void XmPushWidgetExtData(Widget widget, XmWidgetExtData data, unsigned int extType);
MACRO__XmRAW XmRAW_MAP;
XmRCKidGeometry XmRCGetKidGeo(Widget wid, Widget instigator, XtWidgetGeometry *request, int uniform_border, int border, int uniform_width_margins, int uniform_height_margins, Widget help, Widget toc, int geo_type);
void XmRCSetKidGeo(XmRCKidGeometry kg, Widget instigator);
void XmRC_GadgetTraverseDown(Widget wid, XEvent *event, String *param, Cardinal *num_param);
void XmRC_GadgetTraverseLeft(Widget wid, XEvent *event, String *param, Cardinal *num_param);
void XmRC_GadgetTraverseRight(Widget wid, XEvent *event, String *param, Cardinal *num_param);
void XmRC_GadgetTraverseUp(Widget wid, XEvent *event, String *param, Cardinal *num_param);
void XmReCacheLabG(Widget wid);
void XmRecordEvent(XEvent *event);
void XmRedisplayGadgets(Widget w, XEvent *event, Region region);
void XmRegionClear(XmRegion r);
void XmRegionComputeExtents(XmRegion r);
XmRegion XmRegionCreate(void);
XmRegion XmRegionCreateSize(__int64 size);
void XmRegionDestroy(XmRegion r);
void XmRegionDrawShadow(Display *display, Drawable d, GC top_gc, GC bottom_gc, XmRegion region, int border_thick, int shadow_thick, unsigned int shadow_type);
Boolean XmRegionEqual(XmRegion r1, XmRegion r2);
void XmRegionGetExtents(XmRegion r, XRectangle *rect);
__int64 XmRegionGetNumRectangles(XmRegion r);
void XmRegionGetRectangles(XmRegion r, XRectangle **rects, __int64 *nrects);
void XmRegionIntersect(XmRegion reg1, XmRegion reg2, XmRegion newReg);
void XmRegionIntersectRectWithRegion(XRectangle *rect, XmRegion source, XmRegion dest);
Boolean XmRegionIsEmpty(XmRegion r);
void XmRegionOffset(XmRegion pRegion, int x, int y);
Boolean XmRegionPointInRegion(XmRegion pRegion, int x, int y);
void XmRegionSetGCRegion(Display *dpy, GC gc, int x_origin, int y_origin, XmRegion r);
void XmRegionShrink(XmRegion r, int dx, int dy);
void XmRegionSubtract(XmRegion regM, XmRegion regS, XmRegion regD);
void XmRegionUnion(XmRegion reg1, XmRegion reg2, XmRegion newReg);
void XmRegionUnionRectWithRegion(XRectangle *rect, XmRegion source, XmRegion dest);
void XmRegisterConverters(void);
void XmRegisterPixmapConverters(void);
void XmRemoveGrab(Widget wid);
void XmResetTravGraph(Widget wid);
void XmResizeObject(Widget g, int width, int height, int border_width);
void XmRestoreCoreClassTranslations(Widget widget);
void XmRestoreExcludedTearOffToToplevelShell(Widget wid, XEvent *event);
void XmRestoreTearOffToMenuShell(Widget wid, XEvent *event);
void XmRestoreTearOffToToplevelShell(Widget wid, XEvent *event);
XtGeometryResult XmRootGeometryManager(Widget w, XtWidgetGeometry *request, XtWidgetGeometry *reply);
char XmRowColumn_bar_table[];
char XmRowColumn_menu_table[];
char XmRowColumn_menu_traversal_table[];
char XmRowColumn_option_table[];
char XmSDEFAULT_BACKGROUND[];
char XmSDEFAULT_FONT[];
char XmSash_defTranslations[];
void XmSaveCoreClassTranslations(Widget widget);
void XmSaveMenuProcContext(XtPointer address);
XmDragIconObject XmScreenGetOperationIcon(Widget w, unsigned int operation);
XmDragIconObject XmScreenGetSourceIcon(Widget w);
XmDragIconObject XmScreenGetStateIcon(Widget w, unsigned int state);
void XmScreenRemoveFromCursorCache(XmDragIconObject icon);
char XmScrollBar_defaultTranslations[];
char XmScrolledW_ClipWindowTranslationTable[];
char XmScrolledW_ScrolledWindowXlations[];
char XmScrolledW_WorkWindowTranslationTable[];
Boolean XmSearchColorCache(unsigned int which, XmColorData *values, XmColorData **ret);
Cardinal XmSecondaryResourceData(XmBaseClassExt bcePtr, XmSecondaryResourceData **secResDataRtn, XtPointer client_data, String name, String class_name, XmResourceBaseProc basefunctionpointer);
void XmSelectColorDefault(Widget widget, int offset, XrmValue *value);
char XmSelectioB_defaultTextAccelerators[];
void XmSelectionBoxCreateApplyButton(XmSelectionBoxWidget sel);
void XmSelectionBoxCreateCancelButton(XmSelectionBoxWidget sel);
void XmSelectionBoxCreateHelpButton(XmSelectionBoxWidget sel);
void XmSelectionBoxCreateList(XmSelectionBoxWidget sel);
void XmSelectionBoxCreateListLabel(XmSelectionBoxWidget sel);
void XmSelectionBoxCreateOkButton(XmSelectionBoxWidget sel);
void XmSelectionBoxCreateSelectionLabel(XmSelectionBoxWidget sel);
void XmSelectionBoxCreateSeparator(XmSelectionBoxWidget sel);
void XmSelectionBoxCreateText(XmSelectionBoxWidget sel);
XmGeoMatrix XmSelectionBoxGeoMatrixCreate(Widget wid, Widget instigator, XtWidgetGeometry *desired);
void XmSelectionBoxGetApplyLabelString(Widget wid, int resource_offset, XtArgVal *value);
void XmSelectionBoxGetCancelLabelString(Widget wid, int resource_offset, XtArgVal *value);
void XmSelectionBoxGetHelpLabelString(Widget wid, int resource_offset, XtArgVal *value);
void XmSelectionBoxGetListItemCount(Widget wid, int resource_offset, XtArgVal *value);
void XmSelectionBoxGetListItems(Widget wid, int resource_offset, XtArgVal *value);
void XmSelectionBoxGetListLabelString(Widget wid, int resource_offset, XtArgVal *value);
void XmSelectionBoxGetListVisibleItemCount(Widget wid, int resource_offset, XtArgVal *value);
void XmSelectionBoxGetOkLabelString(Widget wid, int resource_offset, XtArgVal *value);
void XmSelectionBoxGetSelectionLabelString(Widget wid, int resource_offset, XtArgVal *value);
void XmSelectionBoxGetTextColumns(Widget wid, int resource_offset, XtArgVal *value);
void XmSelectionBoxGetTextString(Widget wid, int resource_offset, XtArgVal *value);
Boolean XmSelectionBoxNoGeoRequest(XmGeoMatrix geoSpec);
void XmSelectionBoxRestore(Widget wid, XEvent *event, String *argv, Cardinal *argc);
void XmSelectionBoxUpOrDown(Widget wid, XEvent *event, String *argv, Cardinal *argc);
int XmSeparatorCacheCompare(XtPointer A, XtPointer B);
void XmSeparatorFix(XmGeoMatrix geoSpec, int action, XmGeoMajorLayout layoutPtr, XmKidGeometry rowPtr);
void XmSetActiveTabGroup(XmFocusData focusData, Widget tabGroup);
void XmSetActualClass(Display *display, WidgetClass w_class, WidgetClass actualClass);
void XmSetDefaultBackgroundColorSpec(Screen *screen, String new_color_spec);
void XmSetDestination(Display *dpy, Widget w);
void XmSetEtchedSlider(XmScrollBarWidget sbw);
void XmSetInDragMode(Widget widget, int mode);
void XmSetInitialOfTabGroup(Widget tab_group, Widget init_focus);
void XmSetKidGeo(XmKidGeometry kg, Widget instigator);
void XmSetLastManagedMenuTime(Widget wid, Time newTime);
void XmSetMenuTraversal(Widget wid, int traversalOn);
void XmSetPopupMenuClick(Widget wid, int popupMenuClick);
void XmSetRect(XRectangle *rect, Widget w);
void XmSetSwallowEventHandler(Widget widget, int add_handler);
WidgetClass XmSetXmDisplayClass(WidgetClass wc);
Boolean XmShellIsExclusive(Widget wid);
void XmSleep(unsigned int secs);
void XmSocorro(Widget w, XEvent *event, String *params, Cardinal *num_params);
void XmSortResourceList(XrmResource **list, Cardinal len);
Dimension XmStringBaseline(XmFontList fontlist, _XmString string);
Boolean XmStringByteCompare(_XmString a, _XmString b);
_XmString XmStringCopy(_XmString string);
_XmString XmStringCreate(XmString cs);
XmString XmStringCreateExternal(XmFontList fontlist, _XmString cs);
void XmStringDraw(Display *d, Window w, XmFontList fontlist, _XmString string, GC gc, int x, int y, int width, unsigned int align, unsigned int lay_dir, XRectangle *clip);
void XmStringDrawImage(Display *d, Window w, XmFontList fontlist, _XmString string, GC gc, int x, int y, int width, unsigned int align, unsigned int lay_dir, XRectangle *clip);
void XmStringDrawMnemonic(Display *d, Window w, XmFontList fontlist, _XmString string, GC gc, int x, int y, int width, unsigned int align, unsigned int lay_dir, XRectangle *clip, String mnemonic, XmStringCharSet charset);
void XmStringDrawUnderline(Display *d, Window w, XmFontList f, _XmString s, GC gc, int x, int y, int width, unsigned int align, unsigned int lay_dir, XRectangle *clip, _XmString u);
Boolean XmStringEmpty(_XmString string);
void XmStringExtent(XmFontList fontlist, _XmString string, Dimension *width, Dimension *height);
void XmStringFree(_XmString string);
void XmStringFreeContext(_XmStringContext context);
char *XmStringGetCurrentCharset(void);
Boolean XmStringGetNextSegment(_XmStringContext context, XmStringCharSet *charset, XmStringDirection *direction, char **text, __int16 *char_count, Boolean *separator);
char *XmStringGetTextConcat(XmString string);
Boolean XmStringHasSubstring(_XmString string, _XmString substring);
Dimension XmStringHeight(XmFontList fontlist, _XmString string);
Boolean XmStringInitContext(_XmStringContext *context, _XmString string);
Boolean XmStringIsCurrentCharset(XmStringCharSet c);
Boolean XmStringIsXmString(XmString string);
int XmStringLineCount(_XmString string);
Boolean XmStringSingleSegment(XmString str, char **pTextOut, XmStringCharSet *pCharsetOut);
XmTextSource XmStringSourceCreate(char *value, int is_wchar);
void XmStringSourceDestroy(XmTextSource source);
Boolean XmStringSourceFindString(Widget w, XmTextPosition start, char *string, XmTextPosition *position);
Boolean XmStringSourceGetEditable(XmTextSource source);
int XmStringSourceGetMaxLength(XmTextSource source);
char *XmStringSourceGetString(XmTextWidget tw, XmTextPosition from, XmTextPosition to, int want_wchar);
char *XmStringSourceGetValue(XmTextSource source, int want_wchar);
Boolean XmStringSourceHasSelection(XmTextSource source);
void XmStringSourceMoveMem(char *from, char *to, int length);
void XmStringSourceSetEditable(XmTextSource source, int editable);
void XmStringSourceSetGappedBuffer(XmSourceData data, XmTextPosition position);
void XmStringSourceSetMaxLength(XmTextSource source, int max);
void XmStringSourceSetValue(XmTextWidget widget, char *value);
void XmStringUpdate(XmFontList fontlist, _XmString string);
void XmStringUpdateWMShellTitle(XmString xmstr, Widget shell);
Dimension XmStringWidth(XmFontList fontlist, _XmString string);
char XmStrings[];
Boolean XmStringsAreEqual(char *in_str, char *test_str);
void XmSyncDropSiteTree(Widget shell);
Cardinal XmTargetsToIndex(Widget shell, Atom *targets, Cardinal numTargets);
char XmTearOffB_overrideTranslations[];
void XmTearOffBtnDownEventHandler(Widget reportingWidget, XtPointer data, XEvent *event, Boolean *cont);
void XmTearOffBtnUpEventHandler(Widget reportingWidget, XtPointer data, XEvent *event, Boolean *cont);
void XmTearOffInitiate(Widget wid, XEvent *event);
void XmTextAdjustGC(XmTextWidget tw);
void XmTextChangeBlinkBehavior(XmTextWidget widget, int newvalue);
void XmTextChangeHOffset(XmTextWidget widget, int length);
void XmTextClearDestination(XmTextWidget widget, int ignore_sens);
Boolean XmTextConvert(Widget w, Atom *selection, Atom *target, Atom *type, XtPointer *value, unsigned __int64 *length, int *format);
int XmTextCountCharacters(char *str, int num_count_bytes);
int XmTextCountSpacingChar(XmTextWidget tw, char *str, int num_count_bytes);
void XmTextDestinationVisible(Widget w, int turn_on);
void XmTextDisableRedisplay(XmTextWidget widget, int losesbackingstore);
void XmTextDrawDestination(XmTextWidget widget);
void XmTextEnableRedisplay(XmTextWidget widget);
void XmTextFToggleCursorGC(Widget widget);
char XmTextF_EventBindings1[];
char XmTextF_EventBindings2[];
char XmTextF_EventBindings3[];
Boolean XmTextFieldConvert(Widget w, Atom *selection, Atom *target, Atom *type, XtPointer *value, unsigned __int64 *length, int *format);
int XmTextFieldCountBytes(XmTextFieldWidget tf, wchar_t *wc_value, int num_chars);
void XmTextFieldDeselectSelection(Widget w, int disown, Time sel_time);
void XmTextFieldDrawInsertionPoint(XmTextFieldWidget tf, int turn_on);
Widget XmTextFieldGetDropReciever(Widget w);
void XmTextFieldLoseSelection(Widget w, Atom *selection);
Boolean XmTextFieldReplaceText(XmTextFieldWidget tf, XEvent *event, XmTextPosition replace_prev, XmTextPosition replace_next, char *insert, int insert_length, int move_cursor);
void XmTextFieldSetClipRect(XmTextFieldWidget tf);
void XmTextFieldSetCursorPosition(XmTextFieldWidget tf, XEvent *event, XmTextPosition position, int adjust_flag, int call_cb);
Boolean XmTextFieldSetDestination(Widget w, XmTextPosition position, Time set_time);
void XmTextFieldSetSel2(Widget w, XmTextPosition left, XmTextPosition right, int disown, Time sel_time);
void XmTextFieldStartSelection(XmTextFieldWidget tf, XmTextPosition left, XmTextPosition right, Time sel_time);
XmTextPosition XmTextFindLineEnd(XmTextWidget widget, XmTextPosition position, LineTableExtra *extra);
XmTextPosition XmTextFindScroll(XmTextWidget widget, XmTextPosition start, int delta);
Boolean XmTextFindStringBackwards(Widget w, XmTextPosition start, char *search_string, XmTextPosition *position);
Boolean XmTextFindStringForwards(Widget w, XmTextPosition start, char *search_string, XmTextPosition *position);
int XmTextFindWidth(XmTextWidget tw, int x, XmTextBlock block, int from, int to);
void XmTextFreeContextData(Widget w, XtPointer clientData, XtPointer callData);
XmTextPosition XmTextGetAnchor(XmTextWidget tw);
Boolean XmTextGetBaselines(Widget widget, Dimension **baselines, int *line_count);
Boolean XmTextGetDisplayRect(Widget w, XRectangle *display_rect);
Widget XmTextGetDropReciever(Widget w);
XmTextLineTable XmTextGetLineTable(Widget widget, int *total_lines);
int XmTextGetNumberLines(XmTextWidget widget);
Boolean XmTextGetSel2(XmTextWidget tw, XmTextPosition *left, XmTextPosition *right);
unsigned int XmTextGetTableIndex(XmTextWidget widget, XmTextPosition pos);
int XmTextGetTotalLines(Widget widget);
Boolean XmTextHasDestination(Widget w);
char XmTextIn_XmTextEventBindings1[];
char XmTextIn_XmTextEventBindings2[];
char XmTextIn_XmTextEventBindings3[];
void XmTextInputCreate(Widget wid, ArgList args, Cardinal num_args);
void XmTextInputGetSecResData(XmSecondaryResourceData *secResDataRtn);
void XmTextInvalidate(XmTextWidget widget, XmTextPosition position, XmTextPosition topos, __int64 delta);
void XmTextLineInfo(XmTextWidget widget, LineNum line, XmTextPosition *startpos, LineTableExtra *extra);
void XmTextLoseSelection(Widget w, Atom *selection);
void XmTextMarginsProc(Widget w, XmBaselineMargins *margins_rec);
void XmTextMarkRedraw(XmTextWidget widget, XmTextPosition left, XmTextPosition right);
Boolean XmTextModifyVerify(XmTextWidget initiator, XEvent *event, XmTextPosition *start, XmTextPosition *end, XmTextPosition *cursorPos, XmTextBlock block, XmTextBlock newblock, Boolean *freeBlock);
void XmTextMovingCursorPosition(XmTextWidget tw, XmTextPosition position);
LineNum XmTextNumLines(XmTextWidget widget);
void XmTextOutputCreate(Widget wid, ArgList args, Cardinal num_args);
void XmTextOutputGetSecResData(XmSecondaryResourceData *secResDataRtn);
LineNum XmTextPosToLine(XmTextWidget widget, XmTextPosition position);
void XmTextRealignLineTable(XmTextWidget widget, XmTextLineTable *temp_table, int *temp_table_size, unsigned int cur_index, XmTextPosition cur_start, XmTextPosition cur_end);
void XmTextResetClipOrigin(XmTextWidget tw, XmTextPosition position, int clip_mask_reset);
Boolean XmTextScrollable(XmTextWidget widget);
void XmTextSetCursorPosition(Widget widget, XmTextPosition position);
Boolean XmTextSetDestinationSelection(Widget w, XmTextPosition position, int disown, Time set_time);
Boolean XmTextSetSel2(XmTextWidget tw, XmTextPosition left, XmTextPosition right, Time set_time);
void XmTextSetTopCharacter(Widget widget, XmTextPosition top_character);
Boolean XmTextShouldWordWrap(XmTextWidget widget);
void XmTextToggleCursorGC(Widget widget);
void XmTextUpdateLineTable(Widget widget, XmTextPosition start, XmTextPosition end, XmTextBlock block, int update);
void XmTextValueChanged(XmTextWidget initiator, XEvent *event);
XmImportOperator XmToHorizontalPixels(Widget widget, int offset, XtArgVal *value);
XmImportOperator XmToVerticalPixels(Widget widget, int offset, XtArgVal *value);
int XmToggleBCacheCompare(XtPointer A, XtPointer B);
char XmToggleB_defaultTranslations[];
char XmToggleB_menuTranslations[];
void XmTopShadowColorDefault(Widget widget, int offset, XrmValue *value);
void XmTrackShellFocus(Widget widget, XtPointer client_data, XEvent *event, Boolean *dontSwallow);
void XmTransformSubResources(XtResourceList comp_resources, Cardinal num_comp_resources, XtResourceList *resources, Cardinal *num_resources);
void XmTraverseDown(Widget w, XEvent *event, String *params, Cardinal *num_params);
void XmTraverseHome(Widget w, XEvent *event, String *params, Cardinal *num_params);
void XmTraverseLeft(Widget w, XEvent *event, String *params, Cardinal *num_params);
void XmTraverseNext(Widget w, XEvent *event, String *params, Cardinal *num_params);
void XmTraverseNextTabGroup(Widget w, XEvent *event, String *params, Cardinal *num_params);
void XmTraversePrev(Widget w, XEvent *event, String *params, Cardinal *num_params);
void XmTraversePrevTabGroup(Widget w, XEvent *event, String *params, Cardinal *num_params);
void XmTraverseRight(Widget w, XEvent *event, String *params, Cardinal *num_params);
void XmTraverseUp(Widget w, XEvent *event, String *params, Cardinal *num_params);
void XmUnitTypeDefault(Widget widget, int offset, XrmValue *value);
Boolean XmUseColorObj(void);
void XmVaToTypedArgList(va_list var, int max_count, XtTypedArgList *args_return, Cardinal *num_args_return);
XrmQuark XmValidCursorIconQuark;
void XmValidateFocus(Widget wid);
void XmVendorExtRealize(Widget w, XtPointer closure, XtPointer call_data);
void XmVirtKeysDestroy(Widget widget);
void XmVirtKeysHandler(Widget widget, XtPointer client_data, XEvent *event, Boolean *dontSwallow);
void XmVirtKeysInitialize(Widget widget);
int XmVirtKeysLoadFallbackBindings(Display *display, String *binding);
Boolean XmVirtKeysLoadFileBindings(char *fileName, String *binding);
void XmVirtKeysStoreBindings(Widget shell, String binding);
char XmVirtKeys_acornFallbackBindingString[];
char XmVirtKeys_apolloFallbackBindingString[];
char XmVirtKeys_dblclkFallbackBindingString[];
char XmVirtKeys_decFallbackBindingString[];
char XmVirtKeys_declkf11FallbackBindingString[];
char XmVirtKeys_decpcFallbackBindingString[];
char XmVirtKeys_dgFallbackBindingString[];
char XmVirtKeys_fallbackBindingString[];
char XmVirtKeys_hpFallbackBindingString[];
char XmVirtKeys_ibmFallbackBindingString[];
char XmVirtKeys_ingrFallbackBindingString[];
char XmVirtKeys_megatekFallbackBindingString[];
char XmVirtKeys_motorolaFallbackBindingString[];
char XmVirtKeys_sgiFallbackBindingString[];
char XmVirtKeys_siemens9733FallbackBindingString[];
char XmVirtKeys_siemensWx200FallbackBindingString[];
char XmVirtKeys_sunFallbackBindingString[];
char XmVirtKeys_tekFallbackBindingString[];
void XmVirtualToActualKeysym(Display *dpy, KeySym virtKeysym, KeySym *actualKeysymRtn, Modifiers *modifiersRtn);
void XmWarning(Widget w, char *message);
Pixel XmWhitePixel(Screen *screen, Colormap colormap, XColor whitecolor);
void XmWidgetFocusChange(Widget wid, XmFocusChange change);
String Xm_MOTIF_DRAG_AND_DROP_MESSAGE;
XmBaseClassExt *Xm_fastPtr;
XtPointer XmdefaultTextActionsTable;
Cardinal XmdefaultTextActionsTableSize;
XmuCvtCache *XmuCCLookupDisplay(Display *);
Boolean XtCheckSubclassFlag(Widget, unsigned int);
void XtInherit(void);
int XtInheritTranslations;
Boolean XtIsSubclassOf(Widget, WidgetClass, WidgetClass, unsigned int);
MACRO__XtShellPositionValid _XtShellGeometryParsed;
MACRO__XtShellPositionValid _XtShellNotReparented;
MACRO__XtShellPositionValid _XtShellPPositionOK;
MACRO__XtShellPositionValid _XtShellPositionValid;
Widget XtWindowedAncestor(Widget);
MACRO__ZLC _ZLC_MOD_MAX;
MACRO___AUDIT __AUDIT__;
MACRO___BIND __BIND;
EXCEPTION_DISPOSITION _C_specific_handler(system_exrec_type *exception_record, void *establisher_frame, PCONTEXT context_record, DISPATCHER_CONTEXT *dispatcher_context);
MACRO___NAMESER __NAMESER;
MACRO___RES __RES;
MACRO_R_CURSOR __R_UNUSED;
int _Regcomp(void **, const char *, int, int *);
int _Regexec(void *, const char *, int *, int *, int);
void _Regfree(void *);
MACRO___SEC __SEC_OBJECTS__;
MACRO_D __UNUSED_1;
MACRO_UTMAXTYPE __UT_HOSTSIZE;
MACRO_UTMAXTYPE __UT_LINESIZE;
MACRO_UTMAXTYPE __UT_NAMESIZE;
MACRO___UT __UT_TMP_HOSTSIZE;
MACRO___UT __UT_TMP_NAMESIZE;
MACRO__ __WCHAR_T_LEN;
Time _XmGetDefaultTime(Widget, XEvent *);
void _assert(char *, char *, int);
int _bsd_group_lastfound(void);
int _bsd_group_lastfound_ctx(struct sia_context *);
int _bsd_group_lastmatch;
int _bsd_passwd_lastfound(void);
int _bsd_passwd_lastfound_ctx(struct sia_context *);
int _bsd_passwd_lastmatch;
void *_builtin_alloca();
struct _catset *_cat_get_catset(nl_catd, int);
struct _msgptr *_cat_get_msgptr(struct _catset *, int);
int _catgetm_num(nl_catd, int, int, const char *, const char **, char *);
int _catgetmh_num(nl_catd, int, int, const char **, char *);
MACRO___digital __digital__;
MACRO___dontcare __dontcare__;
unsigned __int64 _fstart;
int _geterrno(void);
int _getmbcurmax(void);
unsigned __int64 _istart;
int _iswctype_sb(wint_t, wctype_t, _LC_ctype_t *);
void _jump_unwind(void *Frame_ptr, void *target_ip);
_LC_charmap_t *_lc_charmap;
_LC_collate_t *_lc_collate;
_LC_ctype_t *_lc_ctype;
_LC_locale_t *_lc_locale;
_LC_monetary_t *_lc_monetary;
_LC_numeric_t *_lc_numeric;
_LC_resp_t *_lc_resp;
_LC_time_t *_lc_time;
int _ld_check_versions(struct obj *);
int _ldr_set_tlskey(unsigned __int64 key, void *key_addr);
char *_mbsadvance(const char *);
const struct res_sym _p_class_syms[];
const struct res_sym _p_type_syms[];
int _pthread_attr_getguardsize_np(const pthread_attr_t *, size_t *);
int _pthread_attr_getinheritsched(const pthread_attr_t *, int *);
int _pthread_attr_getstacksize(const pthread_attr_t *, size_t *);
int _pthread_attr_setguardsize_np(pthread_attr_t *, size_t);
int _pthread_attr_setinheritsched(pthread_attr_t *, int);
int _pthread_attr_setstacksize(pthread_attr_t *, size_t);
int _pthread_cancel(pthread_t);
int _pthread_cond_broadcast(pthread_cond_t *);
int _pthread_cond_destroy(pthread_cond_t *);
int _pthread_cond_init(pthread_cond_t *, const pthread_condattr_t *);
int _pthread_cond_sig_preempt_int_np(pthread_cond_t *);
int _pthread_cond_signal(pthread_cond_t *);
int _pthread_cond_signal_int_np(pthread_cond_t *);
int _pthread_cond_timedwait(pthread_cond_t *, pthread_mutex_t *, const struct timespec *);
int _pthread_cond_wait(pthread_cond_t *, pthread_mutex_t *);
int _pthread_create(pthread_t *, const pthread_attr_t *, void *(*)(void *), void *);
int _pthread_debug_clear_event(pthreadDebugEvent_t);
int _pthread_debug_set_event(pthreadDebugEvent_t);
int _pthread_debug_set_hook(pthreadDebugEvent_t, void *);
int _pthread_delay_np(const struct timespec *);
int _pthread_detach(pthread_t);
int _pthread_equal(pthread_t, pthread_t);
void _pthread_exit(void *);
int _pthread_get_expiration_np(const struct timespec *, struct timespec *);
void *_pthread_getspecific(pthread_key_t);
int _pthread_join(pthread_t, void **);
int _pthread_lock_global_np(void);
int _pthread_mutex_destroy(pthread_mutex_t *);
int _pthread_mutex_init(pthread_mutex_t *, const pthread_mutexattr_t *);
int _pthread_mutex_lock(pthread_mutex_t *);
int _pthread_mutex_trylock(pthread_mutex_t *);
int _pthread_mutex_unlock(pthread_mutex_t *);
int _pthread_once(pthread_once_t *, __pthreadOnce_t);
pthread_t _pthread_self(void);
int _pthread_setspecific(pthread_key_t, const void *);
void _pthread_testcancel(void);
int _pthread_trace_getclass(__pthreadLongUint_t *);
int _pthread_trace_getdebugger(int, pthreadTraceDebugInfo_p);
int _pthread_trace_gettimestamp(pthread_t, pthreadTraceTimestamp_p);
int _pthread_trace_lock(int);
int _pthread_trace_setclass(__pthreadLongUint_t);
int _pthread_trace_toolreport(const char *, const char *);
int _pthread_unlock_global_np(void);
int _seterrno(int);
const int _sia_cap_max;
int _sia_isagroup(gid_t, gid_t *, int);
const char *_sia_lib_helper;
struct sia_matrix_t _sia_matrix;
const int _sia_opt_groups[];
void _sia_priv_clear_flag(SIAENTITY *, int, int);
int _sia_priv_get_flag(SIAENTITY *, int);
void _sia_priv_set_flag(SIAENTITY *, int, int);
int _sia_read_lastlog(sia_collect_func_t *, uid_t, struct lastlog *);
int _sia_ses_islogin(int);
char *_sia_ses_latinfo(const char *);
void _sia_ses_toggle_privs(SIAENTITY *, int);
void _sia_ses_update_audit_record(SIAENTITY *, int, char *, char **, int *, int);
int _sia_set_matconf(const char *);
int _sia_sw_max;
int _sia_update_grouplist(gid_t, gid_t *, int *, int, const char *const *, const char *, size_t);
int _sve_p_online(processorid_t processorid, int flag);
int _sve_processor_bind(idtype_t idtype, id_t id, processorid_t processorid, processorid_t *obind);
int _sve_processor_info(processorid_t processorid, proc_info_t *infop);
int _sys_nsig;
char *_sys_siglist[];
void _yp_match_flush(char *, char *, char *, int);
chtype acs_map[];
int agetent(char **, int *, const char *, int, __int64 *, FILE *);
enum auth_stat authenticate(struct svc_req *, struct rpc_msg *);
void basic_operator_substitute(const char *ts, char *s, int size_of_s);
MACRO__deviceStateNotify _changeDeviceNotify;
char *concat(char *s, int max_s, const char *d);
void concat_address(struct MLD_address *ad, char *s, int max_s, int flags);
void concat_array(struct MLD_array *a, char *s, int max_s, int flags);
void concat_basic(int bt, char *s, int max_s, int flags);
void concat_complex(struct MLD_complex *c, char *s, int max_s, int flags);
void concat_complex_notemplatearg(struct MLD_complex *c, char *s, int max_s, int flags);
void concat_function(struct MLD_function *f, char *s, int max_s, int flags);
void concat_mangled_function_name(struct MLD_mangled_function_name *mfn, char *s, int max_s, int flags);
void concat_mangled_variable_name(struct MLD_mangled_variable_name *mvn, char *s, int max_s, int flags);
void concat_pointer(struct MLD_pointer *p, char *s, int max_s, int flags);
void concat_pointer_to_member(struct MLD_pointer_to_member *pm, char *s, int max_s, int flags);
void concat_qualifications(struct MLD_qualification *ql, char *s, int max_s, int flags);
void concat_reference(struct MLD_reference *r, char *s, int max_s, int flags);
void concat_type_list(struct MLD_type *tl, char *s, int max_s, int flags);
void concat_type_modifier_list(struct MLD_type_modifiers *tml, char *s, int max_s, int flags);
struct MLD_type *concat_type_structure(struct MLD_type *t, char *s, int max_s, int flags);
void concat_unmodified_type(struct MLD_unmodified_type *ut, char *s, int max_s, int flags);
int curs_mb_max;
int curs_mc_max;
int curs_zl_max;
void delete_address(struct MLD_address *ad);
void delete_array(struct MLD_array *a);
void delete_complex(struct MLD_complex *c);
void delete_function(struct MLD_function *f);
void delete_mangled_function_name(struct MLD_mangled_function_name *mfn);
void delete_mangled_template_name(struct MLD_mangled_template_name *mtn);
void delete_mangled_variable_name(struct MLD_mangled_variable_name *mvn);
void delete_nontype(struct MLD_nontype *nt);
void delete_pointer(struct MLD_pointer *p);
void delete_pointer_to_member(struct MLD_pointer_to_member *pm);
void delete_qualifications(struct MLD_qualification *ql);
void delete_reference(struct MLD_reference *r);
void delete_type_list(struct MLD_type *tl);
void delete_type_modifier_list(struct MLD_type_modifiers *tml);
struct MLD_type *delete_type_structure(struct MLD_type *t);
void delete_unmodified_type(struct MLD_unmodified_type *ut);
MACRO__devicePointerMotionHint _deviceButton1Motion;
MACRO__devicePointerMotionHint _deviceButton2Motion;
MACRO__devicePointerMotionHint _deviceButton3Motion;
MACRO__devicePointerMotionHint _deviceButton4Motion;
MACRO__devicePointerMotionHint _deviceButton5Motion;
MACRO__devicePointerMotionHint _deviceButtonGrab;
MACRO__devicePointerMotionHint _deviceButtonMotion;
MACRO__deviceButtonPress deviceButtonPress;
MACRO__deviceButtonPress _deviceButtonRelease;
MACRO__deviceFocusIn deviceFocusIn;
MACRO__deviceFocusIn _deviceFocusOut;
MACRO__deviceKeyPress deviceKeyPress;
MACRO__deviceKeyPress _deviceKeyRelease;
MACRO__deviceStateNotify _deviceMappingNotify;
MACRO__deviceMotionNotify deviceMotionNotify;
MACRO__devicePointerMotionHint _deviceOwnerGrabButton;
MACRO__devicePointerMotionHint devicePointerMotionHint;
MACRO__deviceStateNotify deviceStateNotify;
int (*do_slk_noref)();
int (*do_slk_ref)();
int (*do_slk_tch)();
unsigned __int64 ebss;
unsigned __int64 edata;
unsigned __int64 end;
int *errno(void);
unsigned __int64 etext;
void exit(int status);
unsigned __int64 fbss;
unsigned __int64 fdata;
int filbuf(FILE *);
int flsbuf(int, FILE *);
RUNTIME_FUNCTION fpdata[];
char fpdata_size[];
unsigned __int64 ftext;
MACRO_NXM_QUANTUM _get_binding;
int get_class(struct MLD_qualification *q, struct MLD_complex **c);
MACRO_NXM_QUANTUM _get_state;
unsigned int getlong(u_char *message_ptr);
unsigned __int16 getshort(u_char *message_ptr);
int getsyx(int *, int *);
int *h_errno();
MACRO_NXM_QUANTUM _idle;
FILE iob[];
void longjmp(jmp_buf environment, int value);
int meta(bool);
char *mld_raw_symbol_name(struct obj *, __int64);
int mode;
MACRO__devicePointerMotionHint _noExtensionEvent;
struct _ns_flagdata ns_flagdata[];
struct opaque_auth null_auth;
int num_dbl_uscores(const char *s, int start);
int overlay(WINDOW *, WINDOW *, int);
unsigned __int64 procedure_string_table;
unsigned __int64 procedure_table;
unsigned __int64 procedure_table_size;
MACRO__proximityIn proximityIn;
MACRO__proximityIn _proximityOut;
MACRO_NXM_QUANTUM _pshared_block;
MACRO_NXM_QUANTUM _pshared_destroy;
MACRO_NXM_QUANTUM _pshared_init;
MACRO_NXM_QUANTUM _pshared_unblock;
struct __res_state res;
MACRO_NXM_QUANTUM _resched;
int ring(int);
void (*rip_init)();
char *rld_address_to_name(coff_addr);
char *rld_first_pathname(void);
int rld_interface(coff_uint);
char *rld_modify_list(coff_uint, char *, char *);
coff_addr rld_name_to_address(char *);
void *rld_new_interface(coff_uint, ...);
char *rld_next_pathname(void);
int rpc_dtablesize(void);
char *rpcrawcombuf;
_SHORT save_oflag;
MACRO_NXM_QUANTUM _set_binding;
MACRO_NXM_QUANTUM _set_cancel;
MACRO_NXM_QUANTUM _set_pthid;
int setecho(int);
void seterr_reply(struct rpc_msg *, struct rpc_err *);
int (*setidln)(int, int);
int setjmp(jmp_buf environment);
int setnonl(int);
MACRO_NXM_QUANTUM _signal_check;
void (*slk_init)();
MACRO_NXM_QUANTUM _stack_create;
MACRO_NXM_QUANTUM _switch_pri;
MACRO_NXM_QUANTUM _task_init;
int *terrno();
MACRO_NXM_QUANTUM _thread_block;
MACRO_NXM_QUANTUM _thread_destroy;
MACRO_NXM_QUANTUM _thread_kill;
MACRO_NXM_QUANTUM _thread_self;
MACRO_NXM_QUANTUM _thread_wakeup;
int tolower(int c);
int toupper(int c);
char *unctrl[];
int (*useidln)(void);
WINDOW *virtscr;
cchar_t *wacs_map;
MACRO_NXM_QUANTUM _wakeup_idle;
bool xdr_ypbind_oldsetdom(XDR *, struct ypbind_setdom *);
bool xdr_yprequest(XDR *, struct yprequest *);
bool xdr_ypresponse(XDR *, struct ypresponse *);
WidgetClass xmColorObjClass;
ColorObjClassRec xmColorObjClassRec;
char *xp_hinter_desc;
int xp_hinter_init;
XPHinterProc xp_hinter_proc;
int yp_dobind(char *, struct dom_binding **);
__int64 a64l(const char *s);
void abort(void);
int abs(int i);
void *acalloc(size_t nelem, size_t elsize, void *ap);
int accel_denominator;
int accel_numerator;
int accept(int socket, struct sockaddr *address, size_t *address_len);
int acceptable_password(char *word, FILE *stream);
int access(const char *path, int access_mode);
unsigned __int64 access_lines(struct obj *, unsigned __int64 *, unsigned __int64, unsigned __int64, unsigned __int64 *, unsigned __int64);
int acct(char *path);
int ackentfile(const char *, const char *);
int ackentname(const char *, const char *);
acl_entry_t acl_add_entry(acl_t *pacl_d, acl_tag_t type, acl_perm_t perm, ssize_t size, void *id);
int acl_add_perm(acl_permset_t permset_d, acl_perm_t perm_d);
int acl_clear_perm(acl_permset_t permset_d);
int acl_copy_entry(acl_entry_t src_d, acl_entry_t dest_d);
int acl_copy_ext(void *buf_p, acl_t acl_d, ssize_t size);
acl_t acl_copy_int(void *buf_p);
acl_entry_t acl_create_entry(acl_t *acl_p);
acl_t acl_d;
int acl_delete_def_fd(int fd);
int acl_delete_def_file(char *path_p);
int acl_delete_entry(acl_entry_t entry_d);
int acl_delete_perm(acl_permset_t permset_d, acl_perm_t perm_d);
acl_t acl_dup(acl_t acl_d);
char *acl_ext_to_text(const void *prop_val, ssize_t *len, int fmt);
acl_entry_t acl_find_entry(acl_t acl_d, acl_tag_t type, ssize_t idsize, void *pid);
int acl_first_entry(acl_t acl_d);
int acl_free(acl_t acl_d);
int acl_free_qualifier(void *tag_qualifier_p);
int acl_free_text(char buf_p);
acl_t acl_from_text(char *buf_p);
acl_t acl_get(void *, int, int);
acl_entry_t acl_get_entry(acl_t);
acl_t acl_get_fd(int fd);
acl_t acl_get_file(char *path_p);
int acl_get_permset(acl_entry_t entry_d, acl_permset_t *permset_p);
void *acl_get_qualifier(acl_entry_t entry_d);
int acl_get_tag_type(acl_entry_t entry_d);
acl_t acl_init(const size_t size);
int acl_mod_perm(acl_entry_t, acl_permset_t, acl_permset_t *, acl_perm_t, int);
int acl_set(void *, int, acl_t, int);
int acl_set_fd(const int fd, const acl_type_t type_d, const acl_t acl_d);
int acl_set_file(const char *path_p, const acl_type_t type_d, const acl_t acl_d);
int acl_set_permset(acl_entry_t entry_d, const acl_permset_t permset_d);
int acl_set_qualifier(acl_entry_t, int *);
int acl_set_tag_type(acl_entry_t entry_d);
ssize_t acl_size(acl_t acl_d);
char *acl_to_fmt_text(const acl_t acl_d, ssize_t *plen, int fmt);
char *acl_to_text(const acl_t, ssize_t *);
int acl_valid(acl_t acl_d, acl_entry_t *entry_p);
double acos(double x);
double acosd(double x);
float acosdf(float x);
long double acosdl(long double x);
float acosf(float x);
double acosh(double x);
float acoshf(float x);
long double acoshl(long double x);
long double acosl(long double x);
void *acreate(void *addr, size_t len, int flags, void *ushdr, void *(*grow_func)(size_t, void *));
String action;
XtActionList actions;
XtActionList *actions_return;
int *actual_count_return;
int *actual_format_return;
Atom *actual_type_return;
struct obj *add_obj(struct obj_list **, const char *);
int add_proplist_entry(char *name, int flags, int value_size, char *value, char **bufptr);
int add_wch(const cchar_t *wch);
int add_wchstr;
int addch(const chtype ch);
int addchstr(const chtype *chstr);
unsigned __int64 addr;
MACRO_PPOD addressNil;
unsigned __int64 address_to_file(struct obj *, unsigned __int64);
unsigned __int64 address_to_line(struct obj *, unsigned __int64);
struct obj *address_to_obj(struct obj_list *, unsigned __int64);
struct obj *address_to_obj_for_rld(struct obj_list *, unsigned __int64);
unsigned __int64 address_to_procedure(struct obj *, unsigned __int64);
struct scnhdr *address_to_section(struct obj *, unsigned __int64);
unsigned __int64 address_to_symbol(struct obj_list *, unsigned __int64);
int addstr(const char *str);
int addwch(chtype wch);
int addwchstr(chtype *wchstr);
__int64 adecodenum(const char *);
char *adecodestr(const char *);
int adelent(int, const char *, const char *);
int adelete(void *ap);
int adjtime(struct timeval *delta, struct timeval *old_delta);
int advance(const char *string, const char *expbuf);
int advance_r(const char *lp, const char *expbuf, struct regexp_data *regexp_data);
int advfs_clonefset(char *domain, char *fileset, char *clonename);
int advfs_get_fdmn_list(unsigned __int64 arraySize, unsigned __int64 *offset, unsigned __int64 *numDomains, domainInfoT *domainInfo);
int advfs_get_file_attributes(int fd, fileAttributesT *fileAttributes);
int advfs_get_fset_list(char domain, unsigned __int64 arraySize, unsigned __int64 *offset, unsigned __int64 *numFilesets, filesetInfoT *filesetInfo);
int advfs_get_fset_quotas(char *domainName, char *filesetName, filesetQuotasT *filesetQuotas);
int advfs_rmfset(char domain, char fileset);
int advfs_set_file_attributes(int fd, fileAttributesT *fileAttributes);
int advfs_set_fset_quotas(char *domainName, char *filesetName, filesetQuotasT *filesetQuotas);
int aencode(char **, const char *);
int aendent(int);
int afindent(int, const char *, char **);
void afree(void *ptr, void *ap);
int agetdefault(void);
char *agetdefault_buf(void);
int agetent(int, char **);
int agetflag(const char *);
uint_t agetgid(const char *);
char *agetnextfield(const char *);
char *agetnextident(const char *, size_t *);
char **agetnmlist(void);
char *agetnstr(const char *, char **, size_t);
char *agetstr(const char *, char **);
char **agetstrlist(const char *);
uint_t agetuid(const char *);
int agtnum(const char *, __int64 *);
int agttime(const char *, time_t *);
int aio_cancel(int, struct aiocb *);
int aio_error(const struct aiocb *);
int aio_fsync(int op, struct aiocb *aiocbp);
int aio_group_completion_np(void);
int aio_read(struct aiocb *aiocbp);
int aio_results_np(aio_completion_t *list, int nent, const struct timespec *timeout, int howmany);
ssize_t aio_return(struct aiocb *);
int aio_suspend(const struct aiocb **, int, const struct timespec *);
int aio_write(struct aiocb *aiocbp);
unsigned int alarm(unsigned int seconds);
unsigned __int8 alignment;
int alloc;
acl_entry_t allocate_acl_entry(acl_t *, int);
int allow_exposures;
__int64 alpha_asm(const char *, ...);
int alphasort(struct dirent **dir1, struct dirent **dir2);
struct mallinfo *amallinfo(struct mallinfo *__return_ptr __struct_ptr retstr, void *);
void *amalloc(size_t size, void *ap);
size_t amallocblksize(void *ptr, void *ap);
int amallopt(int, int, void *);
int angle1;
int angle2;
$937D1D6B5AFD4B22B25268EA94F00445 apChar;
$937D1D6B5AFD4B22B25268EA94F00445 apInt;
$937D1D6B5AFD4B22B25268EA94F00445 apLong;
$692DA98D37C8EDEB497D2EE5804C196B apOptionIsArg;
$692DA98D37C8EDEB497D2EE5804C196B apOptionNoArg;
$692DA98D37C8EDEB497D2EE5804C196B apOptionSepArg;
$692DA98D37C8EDEB497D2EE5804C196B apOptionSkipArg;
$692DA98D37C8EDEB497D2EE5804C196B apOptionSkipLine;
$692DA98D37C8EDEB497D2EE5804C196B apOptionSkipNArgs;
$692DA98D37C8EDEB497D2EE5804C196B apOptionStickyArg;
$937D1D6B5AFD4B22B25268EA94F00445 apPointer;
$937D1D6B5AFD4B22B25268EA94F00445 apShort;
MACRO_apXK apXK_CharDel;
MACRO_apXK apXK_Cmd;
MACRO_apXK apXK_Copy;
MACRO_apXK apXK_Cut;
MACRO_apXK apXK_DownBox;
MACRO_apXK apXK_Edit;
MACRO_apXK apXK_Exit;
MACRO_apXK apXK_Grow;
MACRO_apXK apXK_KP_parenleft;
MACRO_apXK apXK_KP_parenright;
MACRO_apXK apXK_LeftBar;
MACRO_apXK apXK_LeftBox;
MACRO_apXK apXK_LineDel;
MACRO_apXK apXK_Move;
MACRO_apXK apXK_Paste;
MACRO_apXK apXK_Pop;
MACRO_apXK apXK_Read;
MACRO_apXK apXK_Repeat;
MACRO_apXK apXK_RightBar;
MACRO_apXK apXK_RightBox;
MACRO_apXK apXK_Save;
MACRO_apXK apXK_Shell;
MACRO_apXK apXK_UpBox;
ApplicationShellClassRec applicationShellClassRec;
WidgetClass applicationShellWidgetClass;
String application_class;
String application_name;
int aptentbool(FILE *, int *, int, const char *, int);
int aptentfclose(FILE *);
int aptentfileq(FILE *, int *, int, const char *);
int aptentfin(FILE *, int *);
int aptentflush(FILE *);
FILE *aptentfsopen(void);
int aptentgid(FILE *, int *, int, const char *, gid_t);
int aptentname(FILE *, int *, int, const char *);
int aptentnameq(FILE *, int *, int, const char *);
int aptentnames(FILE *, int *, int, const char **);
int aptentnmpair(FILE *, int *, int, const char *, const mask_t *, int, const struct namepair *, const char *);
int aptentnstr(FILE *, int *, int, const char *, size_t, const char *);
int aptentonum(FILE *, int *, int, const char *, u_long);
int aptentsint(FILE *, int *, int, const char *, int);
int aptentslist(FILE *, int *, int, const char *, const char **);
int aptentsnum(FILE *, int *, int, const char *, __int64);
int aptentstr(FILE *, int *, int, const char *, const char *);
int aptenttime(FILE *, int *, int, const char *, time_t);
int aptentuid(FILE *, int *, int, const char *, uid_t);
int aptentuint(FILE *, int *, int, const char *, u_int);
int aptentunum(FILE *, int *, int, const char *, u_long);
int aputent(int, const char *, const char *, const void *, int (*)(FILE *, const char *, const void *));
int arc_mode;
void *arealloc(void *ptr, size_t size, void *ap);
XPointer arg;
int *argc;
int *argc_in_out;
Cardinal argcount;
ArgList arglist;
ArgList args;
String *argv;
String *argv_in_out;
char *arp_sprintf(char *, u_char *, int);
void arpinit(void);
void arpinput(struct arpcom *, struct mbuf *);
void arpintr(void);
void arpoutput(struct arpcom *, struct mbuf *, u_char *, u_short);
void arptfree(struct arptab *);
void arptimer(void);
struct arptab *arptnew(struct in_addr *, struct ifnet *);
int array_size;
AsciiSinkClassRec asciiSinkClassRec;
WidgetClass asciiSinkObjectClass;
AsciiSrcClassRec asciiSrcClassRec;
WidgetClass asciiSrcObjectClass;
AsciiTextClassRec asciiTextClassRec;
WidgetClass asciiTextWidgetClass;
char *asctime(const struct tm *timeptr);
char *asctime_r(const struct tm *timeptr, char *buffer);
int asetent(int);
double asin(double x);
double asind(double x);
float asindf(float x);
long double asindl(long double x);
float asinf(float x);
double asinh(double x);
float asinhf(float x);
long double asinhl(long double x);
long double asinl(long double x);
void assert(int expression);
int assign_cpu_to_pset(unsigned __int64 cpu, __int64 pset_id, __int64 option);
int assign_pid_to_pset(pid_t *, __int64, __int64, __int64);
void async_daemon(unsigned __int64 iod_num, unsigned __int64 magic);
net_type atalk;
double atan(double x);
double atan2(double y, double x);
float atan2f(float y, float x);
long double atan2l(long double y, long double x);
double atand(double x);
double atand2(double y, double x);
float atand2f(float y, float x);
long double atand2l(long double y, long double x);
float atandf(float x);
long double atandl(long double x);
float atanf(float x);
double atanh(double x);
float atanhf(float x);
long double atanhl(long double x);
long double atanl(long double x);
int atexit(void (*function)(void));
double atof(const char *nptr);
int atoi(const char *nptr);
__int64 atol(const char *nptr);
Atom atom;
char *atom_name;
int attr_get(attr_t *attrs, __int16 *color_pair, void *opts);
XSetWindowAttributes *attributes;
int attroff(int attrs);
int aud_alias_event(const char *, int, char *, int);
int aud_aliasent(int, char *, int);
int aud_sitevent(int, int, char *, char *);
int aud_sitevent_num(const char *, const char *, int *, int *);
int audcntl(int, char *, int, int, uid_t, pid_t);
int audgen(int, char *, char **, char *, __int64 *);
void audit_adjust_mask(struct pr_passwd *);
void audit_auth_entry(const char *, int, const char *, int);
int audit_build_mask(const char *, char *, char *, int);
int audit_change_mask(const char *, char *, char *, char *, int, char *, int);
void audit_change_mask_done(void);
void audit_lock(caddr_t, int, int, int);
void audit_login(struct pr_passwd *, struct passwd *, caddr_t, caddr_t, int);
struct namepair audit_mask[];
void audit_no_resource(caddr_t, int, caddr_t, int);
void audit_passwd(caddr_t, int, int);
void audit_rcmd(struct pr_passwd *, struct passwd *, caddr_t, caddr_t, caddr_t, caddr_t, caddr_t, caddr_t, caddr_t);
void audit_security_failure(int, caddr_t, caddr_t, int);
void audit_subsystem(caddr_t, caddr_t, int);
void auth_close_all(void);
int auth_db_delent(int, const char *, const char *);
int auth_db_endent(int);
int auth_db_findent(int, const char *, char **);
char *auth_db_get_searchlist(int);
int auth_db_getent(int, char **);
int auth_db_putent(int, const char *, const char *, const void *, auth_xxx_putent_cback_ptr);
int auth_db_set_searchlist(int, const char *);
int auth_db_setent(int);
void auth_destroy(AUTH *auth);
struct namepair auth_dev_assign[];
struct namepair auth_dev_type[];
void auth_drop_master(int);
int auth_for_terminal(struct pr_passwd *, struct pr_term *);
int auth_for_terminal_es(struct es_passwd *, struct es_term *);
int auth_gen_delent(int, const char *, const char *);
int auth_gen_endent(int);
int auth_gen_findent(int, const char *, char **);
int auth_gen_getent(int, char **);
int auth_gen_putent(int, const char *, const char *, const void *, auth_xxx_putent_cback_ptr);
int auth_gen_setent(int);
int auth_is_local_addr(struct sockaddr *);
int auth_is_prived_addr(struct sockaddr *);
int auth_lcl_delent(int, const char *, const char *);
int auth_lcl_endent(int);
int auth_lcl_findent(int, const char *, char **);
int auth_lcl_getent(int, char **);
int auth_lcl_putent(int, const char *, const char *, const void *, auth_xxx_putent_cback_ptr);
int auth_lcl_setent(int);
int auth_lfile_delent(int, const char *, const char *);
int auth_lfile_endent(int);
int auth_lfile_findent(int, const char *, char **);
int auth_lfile_getent(int, char **);
int auth_lfile_putent(int, const char *, const char *, const void *, auth_xxx_putent_cback_ptr);
int auth_lfile_setent(int);
int auth_lrpc_delent(int, const char *, const char *);
int auth_lrpc_endent(int);
int auth_lrpc_findent(int, const char *, char **);
int auth_lrpc_getent(int, char **);
int auth_lrpc_getlocal(struct sockaddr_in *);
int auth_lrpc_getmaster(struct sockaddr_in *);
int auth_lrpc_putent(int, const char *, const char *, const void *, auth_xxx_putent_cback_ptr);
int auth_lrpc_setent(int);
int auth_map_delent(int, const char *, const char *);
int auth_map_endent(int);
int auth_map_findent(int, const char *, char **);
char *auth_map_get_basedir(int);
int auth_map_getent(int, char **);
int auth_map_putent(int, const char *, const char *, const void *, auth_xxx_putent_cback_ptr);
int auth_map_setent(int);
int auth_map_use_file(int, const char *);
int auth_map_yporder(int, time_t *);
int auth_mapndbm_delent(int, const char *, const char *);
int auth_mapndbm_findent(int, const char *, char **);
int auth_mapndbm_putent(int, const char *, const char *, const void *, auth_xxx_putent_cback_ptr);
int auth_nis_clu_master(int);
int auth_nis_delent(int, const char *, const char *);
int auth_nis_endent(int);
int auth_nis_findent(int, const char *, char **);
int auth_nis_getent(int, char **);
int auth_nis_master(void);
int auth_nis_on_master(int, int);
void auth_nis_opt_oldpass(int);
int auth_nis_putent(int, const char *, const char *, const void *, auth_xxx_putent_cback_ptr);
int auth_nis_setent(int);
void auth_nis_update_type(int, int);
void auth_nis_use_oldpass(const char *);
int auth_null_cback(FILE *, const char *, const void *);
int auth_svc_delent(int, const char *, const char *);
int auth_svc_endent(int);
int auth_svc_findent(int, const char *, char **);
int auth_svc_getent(int, char **);
int auth_svc_putent(int, const char *, const char *, const void *, auth_xxx_putent_cback_ptr);
int auth_svc_setent(int);
void auth_take_master(int);
int auth_update_map(time_t *, const char *, const char *, const char *, const char *, int);
void authcap_functab_setup(int, authcap_functab_list);
int authcap_last_source[];
AUTH *authdes_create(void);
AUTH *authnone_create();
int authorized_user(const char *);
AUTH *authunix_create(char *, uid_t, gid_t, int, gid_t *);
AUTH *authunix_create_default();
MACRO_auxNil auxNil;
unsigned __int64 aux_isym(struct obj *, unsigned __int64);
int b64_ntop(const u_char *, size_t, char *, size_t);
int b64_pton(const char *, u_char *, size_t);
how_to_boot b_boot_server;
how_to_boot b_diskful;
how_to_boot b_diskful_client;
how_to_boot b_diskless;
int b_flag;
how_to_boot b_gateway;
how_to_boot b_install_disk;
how_to_boot b_tellme;
Pixel background;
XColor *background_color;
XtPointer base;
char *base_font_name_list;
char *basename(char *path);
int baudrate(void);
int bcmp(const void *string1, const void *string2, size_t length);
void bcopy(const void *source, void *destination, size_t length);
int beep(void);
char *bigcrypt(const char *, const char *);
int bind(int socket, const struct sockaddr *address, size_t address_len);
kern_return_t bind_thread_to_cpu(task_t target_task, thread_t target_thread, __int64 cpu_mask, __int64 flag);
kern_return_t bind_thread_to_cpu_id(task_t target_task, thread_t target_thread, __int64 cpu_id, __int64 flag);
int bind_to_cpu(pid_t pid, unsigned __int64 cpu_mask, unsigned __int64 flag);
int bind_to_cpu_id(pid_t, __int64, u_long);
int bindresvport(int, struct sockaddr_in *);
Pixmap *bitmap_return;
int bkgd(chtype ch);
int bkgrnd(const cchar_t *wch);
int blk_cnt;
__int64 block;
char *boolcodes[];
char *boolfnames[];
char *boolnames[];
int border(chtype ls, chtype rs, chtype ts, chtype bs, chtype tl, chtype tr, chtype bl, chtype br);
int border_set(const cchar_t *ls, const cchar_t *rs, const cchar_t *ts, const cchar_t *bs, const cchar_t *tl, const cchar_t *tr, const cchar_t *bl, const cchar_t *br);
Dimension border_width;
Pixel *bottom_shadow;
int box(WINDOW *, chtype, chtype);
BoxClassRec boxClassRec;
WidgetClass boxWidgetClass;
int brk(void *addr);
int bsd_chg_it(sia_collect_func_t *, struct passwd *, uid_t, char *, int);
int bsd_siad_getpwnam(const char *, struct passwd *, char *, int);
void (*bsd_signal(int sig, void (*function)(int)))(int);
int bsd_upd_it(sia_collect_func_t *, struct passwd *, uid_t, const char *, int, const char *);
void *bsearch(const void *key, const void *base, size_t nmemb, size_t size, int (*compar)(const void *, const void *));
void bt459_2_clean_colormap(caddr_t closure);
int bt459_2_cursor_on_off(caddr_t closure, int on_off);
caddr_t bt459_2_init_closure(caddr_t closure, caddr_t address, int unit, int type);
int bt459_2_init_color_map(caddr_t closure);
int bt459_2_load_color_map_entry(caddr_t closure, int map, ws_color_cell *entry);
int bt459_2_load_cursor(caddr_t closure, ws_screen_descriptor *screen, ws_cursor_data *cursor, int sync);
int bt459_2_load_formatted_cursor(struct bt459info2 *bti);
int bt459_2_recolor_cursor(caddr_t closure, ws_screen_descriptor *screen, ws_color_cell *fg, ws_color_cell *bg);
struct bt459info bt459_softc[];
struct bt459info2 bt459_softc2[];
struct bt459type bt459_type[];
struct bt459type2 bt459_type2[];
MACRO_btAdr btAdr;
MACRO_btNil btAdr32;
MACRO_btULongLong btAdr64;
MACRO_btArrayDesc btArrayDesc;
MACRO_btDecimal btBit;
MACRO_btNil btChar;
MACRO_btAdr btChecksum;
MACRO_btArrayDesc btClass;
MACRO_btUInt btComplex;
MACRO_btUInt btDComplex;
MACRO_btDecimal btDecimal;
MACRO_btUInt btDouble;
MACRO_btUInt btEnum;
MACRO_btFixedBin btFixedBin;
MACRO_btUInt btFixedDec;
MACRO_btUInt btFloat;
MACRO_btFixedBin btFloatDec;
MACRO_btUInt btIndirect;
MACRO_btInt btInt;
MACRO_btNil btInt32;
MACRO_btAdr btInt64;
MACRO_btAdr btInt8;
MACRO_btAdr btLDouble;
MACRO_btLong btLong;
MACRO_btUInt btLong32;
MACRO_btArrayDesc btLong64;
MACRO_btLongLong btLongLong;
MACRO_btULong btLongLong64;
MACRO_btAdr btMax;
MACRO_btNil btNil;
MACRO_btDecimal btPicture;
MACRO_btAdr btProc;
MACRO_btDecimal btPtrMem;
MACRO_btUInt btRange;
MACRO_btAdr btRange_64;
MACRO_btScaledBin btScaledBin;
MACRO_btUInt btSet;
MACRO_btNil btShort;
MACRO_btDecimal btString;
MACRO_btUInt btStruct;
MACRO_btUInt btTypedef;
MACRO_btNil btUChar;
MACRO_btUInt btUInt;
MACRO_btInt btUInt32;
MACRO_btAdr btUInt64;
MACRO_btAdr btUInt8;
MACRO_btULong btULong;
MACRO_btUInt btULong32;
MACRO_btLong btULong64;
MACRO_btULongLong btULongLong;
MACRO_btLongLong btULongLong64;
MACRO_btNil btUShort;
MACRO_btUInt btUnion;
MACRO_btDecimal btVoid;
MACRO_btScaledBin btVptr;
void bt_clean_colormap(caddr_t closure);
int bt_cursor_on_off(caddr_t closure, int on_off);
int bt_get_unit(caddr_t closure);
caddr_t bt_init_closure(caddr_t closure, caddr_t address, int unit, int type);
int bt_init_color_map(caddr_t closure);
int bt_load_color_map_entry(caddr_t closure, int map, ws_color_cell *entry);
int bt_load_cursor(caddr_t closure, ws_screen_descriptor *screen, ws_cursor_data *cursor, int sync);
int bt_load_formatted_cursor(struct bt459info *bti);
int bt_recolor_cursor(caddr_t closure, ws_screen_descriptor *screen, ws_color_cell *fg, ws_color_cell *bg);
int bt_set_cursor_position(caddr_t closure, ws_screen_descriptor *$30, int x, int y);
int bt_video_off(caddr_t closure);
int bt_video_on(caddr_t closure);
void bt_wb_merging(void);
void bt_wb_nonmerging(void);
wint_t btowc(int c);
char *buf;
int buff[];
XtPointer buffer;
unsigned __int64 buffer_len;
char *buffer_return;
int buflen;
int build_cmd_priv(void);
io_handle_t busphys_to_iohandle(u_long addr, int flags, struct controller *ctlr_p);
unsigned int button;
Cardinal byte_offset;
char *bytes;
unsigned __int64 *bytes_after_return;
int bytes_buffer;
void bzero(void *string, size_t length);
double cabs(double x, double y);
float cabsf(float x, float y);
long double cabsl(long double x, long double y);
XtCacheType cache_type;
XtPointer call_data;
int call_pwpolicy(const char *, int, const char *, char *, size_t);
XtCallbackProc callback;
String callback_name;
void *calloc(size_t num_of_elts, size_t elt_size);
int callrpc(char *, u_int, u_int, u_int, xdrproc_t, char *, xdrproc_t, char *);
sigset_t cantmasksigset;
int cap_style;
int case_strcmp(const char *, const char *);
int case_streq(const char *, const char *, int);
int case_streqn(const char *, const char *, size_t, int);
int catclose(nl_catd cat_descriptor);
int catgetm(nl_catd, const char *, const char *, const char *, const char **, char *);
int catgetmh(nl_catd, const char *, const char *, const char **, char *);
char *catgets(nl_catd cat_descriptor, int set_number, int message_number, const char *string);
char *catgets_sym(nl_catd, const char *, const char *, const char *);
nl_catd catopen(const char *name, int oflag);
MACRO_cbOPTR cbOPTR;
char cbhdr[];
int cbreak(void);
double cbrt(double y);
float cbrtf(float y);
long double cbrtl(long double y);
void cconv_nonperiodic_(float *, float *, float *, int *, int *, int *);
int cconv_nonperiodic_ext_(float *, int *, float *, int *, float *, int *, int *, int *, int *, int *, int *, int *, float *, int *);
void cconv_periodic_(float *, float *, float *, int *, int *);
int cconv_periodic_ext_(float *, int *, float *, int *, float *, int *, int *, int *, int *, int *, int *, float *, int *);
void ccorr_nonperiodic_(float *, float *, float *, int *, int *, int *);
int ccorr_nonperiodic_ext_(float *, int *, float *, int *, float *, int *, int *, int *, int *, int *, int *, int *, float *, int *);
void ccorr_periodic_(float *, float *, float *, int *, int *);
int ccorr_periodic_ext_(float *, int *, float *, int *, float *, int *, int *, int *, int *, int *, int *, float *, int *);
int cd_cdrec(char *, int, char *);
int cd_cptrec(char *, char *);
int cd_cpvd(char *, char *);
int cd_cxar(char *, int, char *, int);
int cd_defs(char *path, int cmd, struct cd_defs *defs);
int cd_drec(char *path, int fsec, struct iso9660_drec *drec);
int cd_getdevmap(char *path, int pathlen, int index, int *new_major, int *new_minor);
int cd_idmap(char *path, int cmd, struct cd_idmap *idmap, int *nmaps);
int cd_nmconv(char *path, int cmd, int *flag);
int cd_ptrec(char *path, struct iso9660_ptrec *ptrec);
int cd_pvd(char *path, struct iso9660_pvd *pvd);
int cd_setdevmap(char *path, int cmd, int *new_major, int *new_minor);
int cd_suf(char *path, int fsec, char *signature, int index, char *buf, int buflen);
int cd_type(char *path);
int cd_xar(char *path, int fsec, struct iso9660_xar *xar, int applen, int esclen);
unsigned int cdata[];
time_t cdfs_longdate(signed __int8 *);
void cdfs_tounixdate(time_t *ret_time, char yrs, char mon, char dys, char hrs, char mins, char secs, char gmtoff);
double ceil(double x);
float ceilf(float x);
long double ceill(long double x);
MACRO_cfdNil cfdNil;
int cfft_(char *, char *, char *, ...);
int cfft_2d_(char *, char *, char *, ...);
int cfft_3d_(char *, char *, char *, ...);
int cfft_apply_(char *, char *, char *, ...);
int cfft_apply_2d_(char *, char *, char *, ...);
int cfft_apply_3d_(char *, char *, char *, ...);
int cfft_apply_grp_(char *, char *, char *, ...);
int cfft_exit_(DXML_C_FFT_STRUCTURE *);
int cfft_exit_2d_(DXML_C_FFT_STRUCTURE_2D *);
int cfft_exit_3d_(DXML_C_FFT_STRUCTURE_3D *);
int cfft_exit_grp_(DXML_C_GRP_FFT_STRUCTURE *);
int cfft_grp_(char *, char *, char *, ...);
int cfft_init_(int *, DXML_C_FFT_STRUCTURE *, int *);
int cfft_init_2d_(int *, int *, DXML_C_FFT_STRUCTURE_2D *, int *);
int cfft_init_3d_(int *, int *, int *, DXML_C_FFT_STRUCTURE_3D *, int *);
int cfft_init_grp_(int *, DXML_C_GRP_FFT_STRUCTURE *, int *, int *);
cfg_status_t cfg_connect(caddr_t host, cfg_handle_t *handle, unsigned int flags);
cfg_status_t cfg_disconnect(cfg_handle_t *handle);
cfg_status_t cfg_ksm_find(cfg_handle_t *handle, KSM_FIND_BUF *reqbuf, int bufsiz);
cfg_status_t cfg_ksm_memop(cfg_handle_t *handle, struct ksm_mem_req_buf *reqbuf, caddr_t inbuf, size_t inbuf_size, caddr_t outbuf, size_t outbuf_size);
cfg_status_t cfg_ksm_memreq(cfg_handle_t *handle, KSM_MEM_REQ_BUF *reqbuf, int bufsiz, cfg_attr_t **attributes, int *nattributes);
cfg_status_t cfg_ksm_setop(cfg_handle_t *handle, struct ksm_reqbuf_hdr *reqbuf, caddr_t inbuf, size_t inbuf_size, caddr_t outbuf, size_t outbuf_size);
cfg_status_t cfg_ksm_setreq(cfg_handle_t *handle, KSM_SET_REQ_BUF *reqbuf, int bufsiz);
cfg_status_t cfg_subsys_config(cfg_handle_t *handle, caddr_t subsys);
cfg_status_t cfg_subsys_defaults(cfg_handle_t *handle, caddr_t subsys, cfg_attr_t *attributes, int nattributes);
cfg_status_t cfg_subsys_defaults_all(cfg_handle_t *handle, caddr_t subsys, cfg_attr_t **attributes, int *nattributes);
cfg_status_t cfg_subsys_list(cfg_handle_t *handle, caddr_t **subsys, unsigned int **state, int *nsubsys);
cfg_status_t cfg_subsys_op(cfg_handle_t *handle, caddr_t subsys, cfg_op_t op, caddr_t indata, ulong indata_size, caddr_t outdata, ulong outdate_size);
cfg_status_t cfg_subsys_query(cfg_handle_t *handle, caddr_t subsys, cfg_attr_t *attributes, int nattributes);
cfg_status_t cfg_subsys_query_all(cfg_handle_t *handle, caddr_t subsys, cfg_attr_t **attributes, int *nattributes);
cfg_status_t cfg_subsys_reconfig(cfg_handle_t *handle, caddr_t subsys, cfg_attr_t *attributes, int nattributes);
cfg_status_t cfg_subsys_state(cfg_handle_t *handle, caddr_t subsys, unsigned int *state);
cfg_status_t cfg_subsys_unconfig(cfg_handle_t *handle, caddr_t subsys);
speed_t cfgetispeed(const struct termios *termios_p);
speed_t cfgetospeed(const struct termios *termios_p);
int cfgmgr_get_state(char *subsys, int *state);
int cfgmgr_set_status(char *subsys);
int cfsetispeed(struct termios *, speed_t);
int cfsetospeed(struct termios *termios_p, speed_t speed);
void change_fortran_names(struct obj *);
int change_mode;
XmStringCharSet *charset;
int chdir(const char *path);
MACRO_chdrNil chdrNil;
void check_auth_parameters(void);
int check_luid;
int check_privileges;
int check_usage(const char *special, int flag);
priv_t *checkprivs(privvec_t);
priv_t *checksysauths(privvec_t);
int chgat(int n, attr_t attr, __int16 color_pair, const void *opts);
unsigned __int8 child;
Window *child_return;
Widget **child_returns;
Window **children_return;
int chmod(const char *path, mode_t mode);
int chown(const char *path, uid_t owner, gid_t group);
int chprivsys(__int64, priv_t *, __int64, obj_t *);
int chroot(const char *path);
tcntl_error_code_t cl_admit_flow(struct ifnet *ifp, struct tcntl *tcntl, struct flowreq *flowreq, unsigned int flowreq_len, unsigned int flow_table, void *nhops, IS_specbody_t *i_spec, IS_tspbody_t *i_tsp, IS_adsbody_t *i_ads, struct tcntl_genflow *gflow);
tcntl_error_code_t cl_config_req(struct ifnet *ifp, struct tcntl *tcntl, struct tcntlconfreq *confreq, int index, tcntl_conf_value_t value);
tcntl_error_code_t cl_device_initialize(struct ifnet *ifp, struct tcntl *tcntl);
tcntl_error_code_t cl_device_rundown(struct ifnet *ifp, struct tcntl *tcntl);
tcntl_error_code_t cl_examine_flow(struct ifnet *ifq, struct tcntl *tctl, unsigned int flow_table, struct tcntl_genflow *gflow, unsigned int flow_params_maxsize, void *flow_params, unsigned int *actual_flow_params);
tcntl_error_code_t cl_get_adspec(struct ifnet *ifp, struct tcntl *tcntl, unsigned int flow_table, struct adspecreq *adspecreq, unsigned int adspec_input_len);
int cl_if_enqueue(struct ifnet *ifp, struct mbuf *m, int drop_best_effort, struct tcntl_genflow *gflow, int packet_len);
tcntl_error_code_t cl_modify_flow(struct ifnet *ifp, struct tcntl *tcntl, struct flowreq *flowreq, unsigned int flowreq_len, unsigned int flow_table, void *nhops, IS_specbody_t *i_spec, IS_tspbody_t *i_tsp, IS_adsbody_t *i_ads, struct tcntl_genflow *gflow);
tcntl_error_code_t cl_remove_flow(struct ifnet *ifp, struct tcntl *tcntl, unsigned int flow_table, struct tcntl_genflow *gflow);
String class;
int class_add(class_apar_handle_t, char *, int, int, int);
int class_change(class_apar_handle_t, char *, struct resource_limits *);
int class_change_name(class_apar_handle_t, char *, char *);
int class_close(class_apar_handle_t);
int class_configure(class_apar_handle_t, int, int, int);
int class_create(class_apar_handle_t, char *, struct resource_limits *);
void class_database_lock(class_apar_handle_t);
int class_database_modified(class_apar_handle_t);
int class_database_name(class_apar_handle_t, char *);
void class_database_unlock(class_apar_handle_t);
int class_delete(class_apar_handle_t, char *, int, int);
int class_destroy(class_apar_handle_t, char *, int);
int class_disable(class_apar_handle_t);
int class_empty(class_apar_handle_t, char *);
int class_enable(class_apar_handle_t);
void class_error(char *, int);
int class_get_class_members(class_apar_handle_t, char *, struct class_member_info *);
int class_get_classes(class_apar_handle_t, struct class_info *);
int class_get_config_stats(class_apar_handle_t, int *, int *, int *);
XClassHint *class_hints;
int class_index_to_name(class_apar_handle_t, int, char *);
int class_list_partition_ids(apar_t *, int *);
int class_load_database(class_apar_handle_t, char *, int);
void class_notify_kernel(class_apar_handle_t, int);
int class_open(apar_t, class_apar_handle_t *);
XrmClassList class_prefix;
int class_restore_database(class_apar_handle_t);
String *class_return;
int class_save_database(class_apar_handle_t, char *);
int class_scheduling_enabled(apar_t);
int clear(void);
int clearenv(void);
void clearerr(FILE *stream);
int clearok(WINDOW *win, bool bf);
XtPointer client_data;
XcmsColor *client_white_point;
XRectangle *clip;
XmString clip_label;
int clip_x_origin;
int clip_y_origin;
enum clnt_stat clnt_broadcast(u_int, u_int, u_int, xdrproc_t, char *, xdrproc_t, char *, int (*)(char *, struct sockaddr_in *));
enum clnt_stat clnt_call(CLIENT *clnt, u_int procnum, xdrproc_t inproc, char *in, xdrproc_t outproc, char *out, struct timeval tout);
CLIENT *clnt_create(char *host, u_int prog, u_int vers, char *proto);
CLIENT *clnt_create_vers(char *, u_int, u_int *, u_int, u_int, char *);
void clnt_geterr(CLIENT *clnt, struct rpc_err *errp);
void clnt_pcreateerror(char *s);
void clnt_perrno(enum clnt_stat stat);
void clnt_perror(CLIENT *, char *);
char *clnt_spcreateerror(char *s);
char *clnt_sperrno(enum clnt_stat stat);
char *clnt_sperror(CLIENT *rpch, char *s);
CLIENT *clntraw_create(u_int prognum, u_int versnum);
CLIENT *clnttcp_create(struct sockaddr_in *addr, u_int prognum, u_int versnum, int *sockp, u_int sendsz, u_int recvsz);
CLIENT *clntudp_bufcreate(struct sockaddr_in *, u_int, u_int, struct timeval, int *, u_int, u_int);
CLIENT *clntudp_create(struct sockaddr_in *addr, u_int prognum, u_int versnum, struct timeval wait, int *sockp);
clock_t clock(void);
int clock_getdrift(int, int *);
int clock_getres(clockid_t, struct timespec *);
int clock_gettime(clockid_t, struct timespec *);
int clock_setdrift(int, const int, int *);
int clock_settime(clockid_t, const struct timespec *);
char *clone_buf(char *str, int len);
OCT *clone_oct(OCT *newoid, OCT *old);
OID *clone_oid(OID *newoid, OID *oldoid);
int close(int filedes);
int close_mode;
int closedir(DIR *dir_pointer);
void closelog(void);
void closelog_r(struct syslog_data *syslog_data);
XtPointer closure;
void clu_free_info(struct clu_gen_info **clu_gen_ptr);
int clu_free_memb(struct clu_member_info **clu_memb_ptr);
int clu_get_info(struct clu_gen_info **clu_gen_ptr);
int clu_get_memb_by_id(memberid_t memberid, struct clu_member_info **clu_memb_ptr);
int clu_get_memb_by_name(char *hostname, struct clu_member_info **clu_memb_ptr);
int clu_info(int clu_info_type, ...);
boolean_t clu_is_member();
boolean_t clu_is_ready();
char *clucall_error(clucall_stat);
clucall_stat clucall_load(const char *, struct clucall_vector *);
int cm_add(struct compat_mod *block);
int cm_del(struct compat_mod *block);
void cm_display(struct compat_mod *mod);
int cm_get_struct(struct compat_mod **ptr, struct compat_mod *buf);
void cm_init(void);
void cm_newproc(struct compat_mod *block);
int cm_operate(struct compat_mod *mod, int *indata, size_t indatalen, int *outdata, size_t outdatalen);
int cm_query(struct compat_mod *mod, int *indata, size_t indatalen, int *outdata, size_t outdatalen);
void cm_recognizer(struct filehdr *hdr, struct aouthdr *aux, struct vnode *vp);
int cm_setup(struct compat_mod *mod, char *stanza, int stanzalen, char *name, char *rev, int revision, int (*cfg)(), struct compat_mod *(*rec)(), struct sysent *(*syscall)(), char **call_nam, int *stats, char *trace, int hab, int base, int last);
void cm_terminate(struct compat_mod *block);
int cm_trace_this(struct compat_mod *mod);
int cm_validate(struct compat_mod *mod);
void cma_alert_disable_asynch(cma_t_alert_state *prior);
void cma_alert_disable_general(cma_t_alert_state *prior);
void cma_alert_enable_asynch(void);
void cma_alert_enable_general(cma_t_alert_state *prior);
void cma_alert_restore(cma_t_alert_state *prior);
void cma_alert_test(void);
void cma_attr_create(cma_t_attr *new_attr, cma_t_attr *attr);
void cma_attr_delete(cma_t_attr *attr);
void cma_attr_get_detachstate(cma_t_attr *att, cma_t_detach_state *setting);
void cma_attr_get_guardsize(cma_t_attr *attr, cma_t_natural *guardsize);
void cma_attr_get_inherit_sched(cma_t_attr *attr, cma_t_sched_inherit *setting);
void cma_attr_get_mutex_kind(cma_t_attr *attr, cma_t_mutex_kind *nest);
void cma_attr_get_priority(cma_t_attr *attr, cma_t_priority *pri);
void cma_attr_get_sched(cma_t_attr *attr, cma_t_sched_policy *policy);
void cma_attr_get_scope(cma_t_attr *attr, cma_t_scope *scope);
void cma_attr_get_stacksize(cma_t_attr *attr, cma_t_natural *stacksize);
void cma_attr_set_detachstate(cma_t_attr *att, cma_t_detach_state setting);
void cma_attr_set_guardsize(cma_t_attr *attr, cma_t_natural guardsize);
void cma_attr_set_inherit_sched(cma_t_attr *attr, cma_t_sched_inherit setting);
void cma_attr_set_mutex_kind(cma_t_attr *attr, cma_t_mutex_kind nest);
void cma_attr_set_priority(cma_t_attr *attr, cma_t_priority pri);
void cma_attr_set_sched(cma_t_attr *attr, cma_t_sched_policy policy, cma_t_priority priority);
void cma_attr_set_scope(cma_t_attr *attr, cma_t_scope scope);
void cma_attr_set_stacksize(cma_t_attr *attr, cma_t_natural stacksize);
CMA_T_DETACH_STATE cma_c_create_detached;
CMA_T_DETACH_STATE cma_c_create_joinable;
MACRO_cma_c cma_c_false;
CMA_T_MUTEX_KIND cma_c_mutex_fast;
CMA_T_MUTEX_KIND cma_c_mutex_nonrecursive;
CMA_T_MUTEX_KIND cma_c_mutex_recursive;
cma_t_handle cma_c_null;
MACRO_cma_c_null cma_c_null_ptr;
MACRO_cma_c_prio_ada cma_c_prio_ada_low_max;
MACRO_cma_c_prio_ada_low cma_c_prio_ada_low_mid;
MACRO_cma_c_prio_ada_low cma_c_prio_ada_low_min;
MACRO_cma_c_prio_ada_rtb cma_c_prio_ada_rtb_max;
MACRO_cma_c_prio_ada_rtb_mid cma_c_prio_ada_rtb_mid;
MACRO_cma_c_prio_ada_rtb_mid cma_c_prio_ada_rtb_min;
MACRO_cma_c_prio_back cma_c_prio_back_max;
MACRO_cma_c_prio_back_mid cma_c_prio_back_mid;
MACRO_cma_c_prio_back_mid cma_c_prio_back_min;
MACRO_cma_c_null cma_c_prio_fifo_max;
MACRO_cma_c_prio cma_c_prio_fifo_mid;
MACRO_cma_c_prio_fifo cma_c_prio_fifo_min;
MACRO_cma_c_prio_fifo cma_c_prio_rr_max;
MACRO_cma_c_prio_rr cma_c_prio_rr_mid;
MACRO_cma_c_prio_rr_min cma_c_prio_rr_min;
MACRO_cma_c_prio_rr_min cma_c_prio_through_max;
MACRO_cma_c_prio_through cma_c_prio_through_mid;
MACRO_cma_c_prio_through_min cma_c_prio_through_min;
MACRO_cma_c_null cma_c_sched_ada_low;
MACRO_cma_c_null cma_c_sched_ada_rtb;
MACRO_cma_c_null cma_c_sched_background;
MACRO_cma_c_sched cma_c_sched_default;
MACRO_cma_c_null cma_c_sched_fifo;
CMA_T_SCHED_INHERIT cma_c_sched_inherit;
MACRO_cma_c_sched_other cma_c_sched_other;
MACRO_cma_c_null cma_c_sched_rr;
MACRO_cma_c_null cma_c_sched_throughput;
CMA_T_SCHED_INHERIT cma_c_sched_use_default;
MACRO_cma_c_sched_other cma_c_scope_process;
MACRO_cma_c_scope cma_c_scope_system;
CMA_T_EXIT_STATUS cma_c_term_alert;
CMA_T_EXIT_STATUS cma_c_term_error;
CMA_T_EXIT_STATUS cma_c_term_normal;
MACRO_cma_c cma_c_true;
void cma_cond_broadcast(cma_t_cond *condition);
void cma_cond_create(cma_t_cond *new_condition, cma_t_attr *attr);
void cma_cond_delete(cma_t_cond *condition);
void cma_cond_signal(cma_t_cond *condition);
void cma_cond_signal_int(cma_t_cond *condition);
void cma_cond_signal_preempt_int(cma_t_cond *condition, cma_t_address scp);
cma_t_status cma_cond_timed_wait(cma_t_cond *condition, cma_t_mutex *mutex, cma_t_date_time *expiration);
void cma_cond_wait(cma_t_cond *condition, cma_t_mutex *mutex);
void cma_debug(void);
cma_t_dbg_status cma_debug_cmd(char *cmd);
void cma_delay(cma_t_interval interval);
EXCEPTION cma_e_alert_nesting;
EXCEPTION cma_e_alerted;
EXCEPTION cma_e_assertion;
EXCEPTION cma_e_badparam;
EXCEPTION cma_e_bugcheck;
EXCEPTION cma_e_defer_q_full;
EXCEPTION cma_e_existence;
EXCEPTION cma_e_exit_thread;
EXCEPTION cma_e_in_use;
EXCEPTION cma_e_inialrpro;
EXCEPTION cma_e_nostackmem;
EXCEPTION cma_e_notcmastack;
EXCEPTION cma_e_signal_q_full;
EXCEPTION cma_e_stackovf;
EXCEPTION cma_e_unimp;
EXCEPTION cma_e_use_error;
EXCEPTION cma_e_wrongmutex;
void cma_handle_assign(cma_t_handle *handle1, cma_t_handle *handle2);
cma_t_boolean cma_handle_equal(cma_t_handle *handle1, cma_t_handle *handle2);
void cma_init(void);
void cma_key_create(cma_t_key *key, cma_t_attr *attr, cma_t_destructor destructor);
void cma_key_get_context(cma_t_key key, cma_t_address *context_value);
void cma_key_set_context(cma_t_key key, cma_t_address context_value);
void cma_lib_attr_create(cma_lib_t_attr *new_attr, cma_lib_t_attr *attr);
void cma_lib_attr_delete(cma_lib_t_attr *attr);
void cma_lib_attr_get_queuesize(cma_lib_t_attr *attr, cma_t_natural *queuesize);
void cma_lib_attr_set_queuesize(cma_lib_t_attr *attr, cma_t_natural queuesize);
void cma_lib_queue_create(cma_lib_t_queue *new_queue, cma_lib_t_attr *att);
void cma_lib_queue_delete(cma_lib_t_queue *queue);
void cma_lib_queue_dequeue(cma_lib_t_queue *queue, cma_t_address *element);
void cma_lib_queue_enqueue(cma_lib_t_queue *queue, cma_t_address element);
void cma_lib_queue_requeue(cma_lib_t_queue *queue, cma_t_address element);
cma_t_boolean cma_lib_queue_try_dequeue(cma_lib_t_queue *queue, cma_t_address *element);
cma_t_boolean cma_lib_queue_try_enqueue(cma_lib_t_queue *queue, cma_t_address element);
cma_t_boolean cma_lib_queue_try_enqueue_int(cma_lib_t_queue *queue, cma_t_address element);
cma_t_boolean cma_lib_queue_try_requeue(cma_lib_t_queue *queue, cma_t_address element);
void cma_lock_global(void);
void cma_mutex_create(cma_t_mutex *new_mutex, cma_t_attr *attr);
void cma_mutex_delete(cma_t_mutex *mutex);
void cma_mutex_lock(cma_t_mutex *mutex);
cma_t_boolean cma_mutex_try_lock(cma_t_mutex *mutex);
void cma_mutex_unlock(cma_t_mutex *mutex);
void cma_once(cma_t_once *init_block, cma_t_init_routine init_routine, cma_t_address arg);
MACRO_cma_s cma_s_alert_nesting;
MACRO_cma cma_s_alerted;
MACRO_cma_s cma_s_assertion;
MACRO_cma_s cma_s_badparam;
MACRO_cma_s cma_s_bugcheck;
CMA_T_DBG_STATUS cma_s_dbg_conflict;
CMA_T_DBG_STATUS cma_s_dbg_corrupt;
CMA_T_DBG_STATUS cma_s_dbg_inconstate;
CMA_T_DBG_STATUS cma_s_dbg_invaddr;
CMA_T_DBG_STATUS cma_s_dbg_invcmd;
CMA_T_DBG_STATUS cma_s_dbg_invoption;
CMA_T_DBG_STATUS cma_s_dbg_invparam;
CMA_T_DBG_STATUS cma_s_dbg_invseq;
CMA_T_DBG_STATUS cma_s_dbg_noarg;
CMA_T_DBG_STATUS cma_s_dbg_nonesel;
CMA_T_DBG_STATUS cma_s_dbg_nopriv;
CMA_T_DBG_STATUS cma_s_dbg_nullcmd;
CMA_T_DBG_STATUS cma_s_dbg_quit;
CMA_T_DBG_STATUS cma_s_dbg_success;
CMA_T_DBG_STATUS cma_s_dbg_successpend;
CMA_T_DBG_STATUS cma_s_dbg_unimpl;
MACRO_cma_s cma_s_defer_q_full;
MACRO_cma_s cma_s_existence;
MACRO_cma cma_s_exit_thread;
MACRO_cma_s cma_s_in_use;
MACRO_cma_s cma_s_inialrpro;
MACRO_cma cma_s_normal;
MACRO_cma_s cma_s_nostackmem;
MACRO_cma_s cma_s_notcmastack;
MACRO_cma_s cma_s_signal_q_full;
MACRO_cma cma_s_stackovf;
MACRO_cma_s cma_s_timed_out;
MACRO_cma cma_s_unimp;
MACRO_cma_s cma_s_use_error;
MACRO_cma_s cma_s_wrongmutex;
cma_t_boolean cma_stack_check_limit_np(cma_t_integer size);
void cma_thread_alert(cma_t_thread *thread);
void cma_thread_bind_to_cpu(cma_t_thread *thread, __int64 cpu_mask);
void cma_thread_create(cma_t_thread *new_thread, cma_t_attr *attr, cma_t_start_routine start_routine, cma_t_address arg);
void cma_thread_detach(cma_t_thread *thread);
void cma_thread_exit_error(void);
void cma_thread_exit_normal(cma_t_address result);
void cma_thread_get_priority(cma_t_thread *thread, cma_t_priority *priority);
void cma_thread_get_sched(cma_t_thread *thread, cma_t_sched_policy *policy);
void cma_thread_get_self(cma_t_thread *thread);
cma_t_natural cma_thread_get_unique(cma_t_thread *thread);
void cma_thread_join(cma_t_thread *thread, cma_t_exit_status *exit_status, cma_t_address *result);
void cma_thread_set_priority(cma_t_thread *thread, cma_t_priority priority);
void cma_thread_set_sched(cma_t_thread *thread, cma_t_sched_policy policy, cma_t_priority priority);
void cma_time_get_expiration(cma_t_date_time *expiration, cma_t_interval interval);
int cma_tis_cond_broadcast(cma_tis_cond_t *cond);
int cma_tis_cond_create(cma_tis_cond_t *cond);
int cma_tis_cond_delete(cma_tis_cond_t *cond);
int cma_tis_cond_signal(cma_tis_cond_t *cond);
int cma_tis_cond_wait(cma_tis_cond_t *cond, cma_tis_mutex_t *mutex);
int *cma_tis_errno_get_addr(void);
void cma_tis_errno_set_value(int value);
int cma_tis_key_create(cma_tis_key_t *key, cma_tis_destructor_t destructor);
int cma_tis_key_get_context(cma_tis_key_t key, cma_tis_addr_t *value);
int cma_tis_key_set_context(cma_tis_key_t key, cma_tis_addr_t value);
int cma_tis_lock_global(void);
int cma_tis_mutex_create(cma_tis_mutex_t *mutex);
int cma_tis_mutex_delete(cma_tis_mutex_t *mutex);
int cma_tis_mutex_lock(cma_tis_mutex_t *mutex);
int cma_tis_mutex_trylock(cma_tis_mutex_t *mutex);
int cma_tis_mutex_unlock(cma_tis_mutex_t *mutex);
int cma_tis_once(cma_tis_once_t *init_block, void (*init_rtn)(cma_tis_addr_t arg), cma_tis_addr_t init_arg);
cma_tis_thread_t cma_tis_thread_get_self(void);
int cma_tis_unlock_global(void);
void cma_unlock_global(void);
void cma_yield(void);
int cmd;
struct namepair *cmd_priv;
void cmn_err(int, char *, ...);
int cmp_oct(OCT *oct1, OCT *oct2);
int cmp_oid(OID *q, OID *p);
int cmp_oid_prefix(OID *q, OID *classoid);
$F13520DA388FBF9068488013F4B2A591 cnx_invalid_state;
$F13520DA388FBF9068488013F4B2A591 cnx_member;
$F13520DA388FBF9068488013F4B2A591 cnx_member_removed;
$F13520DA388FBF9068488013F4B2A591 cnx_new_node;
$F13520DA388FBF9068488013F4B2A591 cnx_partitioned_member;
$F13520DA388FBF9068488013F4B2A591 cnx_potential_member;
$F13520DA388FBF9068488013F4B2A591 cnx_unknown_state;
MACRO_code code_emask;
XcmsColor *color;
const XtConvertArgRec colorConvertArgs[];
XcmsColor *color_in_out;
XcmsColor *color_return;
Colormap colormap;
Window *colormap_windows;
XcmsColor colors_in_out[];
XmString command;
CommandClassRec commandClassRec;
WidgetClass commandWidgetClass;
char *command_line;
char *command_name;
Widget command_window;
char *compile(char *instring, char *expbuf, const char *endbuf, int eof);
char *compile_r(char *instring, char *expbuf, const char *endbuf, int seof, struct regexp_data *regexp_data);
void *composeStateEnd;
void *composeStateStart;
CompositeClassRec compositeClassRec;
WidgetClass compositeWidgetClass;
XPointer compression_client_data;
XcmsCompressionProc compression_proc;
XtPointer condition;
Window confine_to;
size_t confstr(int name, char *buf, size_t len);
int connect(int socket, const struct sockaddr *address, size_t address_len);
ConstraintClassRec constraintClassRec;
WidgetClass constraintWidgetClass;
XmOffsetPtr *constraint_offset;
XContext context;
XtConvertArgList convert_args;
XtConvertSelectionProc convert_proc;
char *convert_to_er(char *acl, acle_t *entry, int fmt);
XtConverter converter;
unsigned __int64 *copied_len;
struct dev_asg *copydvagent(const struct dev_asg *);
struct es_default *copyesdfent(const struct es_default *);
struct esdev_asg *copyesdvent(struct esdev_asg *dv);
struct es_file *copyesfient(const struct es_file *);
struct es_passwd *copyespwent(const struct es_passwd *);
struct es_term *copyestcent(const struct es_term *);
double copysign(double x, double y);
float copysignf(float x, float y);
long double copysignl(long double x, long double y);
WidgetClass coreWidgetClass;
double cos(double x);
double cosd(double x);
float cosdf(float x);
long double cosdl(long double x);
float cosf(float x);
double cosh(double x);
float coshf(float x);
long double coshl(long double x);
long double cosl(long double x);
double cot(double x);
double cotd(double x);
float cotdf(float x);
long double cotdl(long double x);
float cotf(float x);
long double cotl(long double x);
int count;
int *count_return;
int creat(const char *path, mode_t mode);
int create_dir_securely(const char *, int, const char *);
int create_file_securely(const char *, int, const char *);
struct disklabel *creatediskbyname(char *);
int createlabel(char *devname, char *name, struct disklabel *disk, char *boot, int boot_len);
char *crypt(const char *, const char *);
char *crypt16(const char *, const char *);
char *crypt_r(const char *, const char *, CRYPTD *);
char *ct_encoding;
char *ctermid(char *s);
char *ctime(const time_t *timer);
char *ctime_r(const time_t *timer, char *buffer);
struct _bool_struct *cur_bools;
struct _num_struct *cur_nums;
struct _str_struct *cur_strs;
TERMINAL *cur_term;
char *curs_err_strings[];
_SHORT curs_errno;
char curs_parm_err[];
int curs_set(int visibility);
WINDOW *curscr;
void curserr(void);
Cursor cursor;
Cursor cursorId;
int cursor_off(void);
int cursor_on(void);
char *cuserid(char *s);
int cvt_ftof(void *input_val, int input_type, void *output_val, int output_type, int options);
Drawable d;
char d_entry[];
double dasm(const char *, ...);
XPointer data;
__int64 data_id;
int daylight;
XrmDatabase db;
int dbm_clearerr(DBM *db);
void dbm_close(DBM *db);
int dbm_delete(DBM *db, datum key);
datum *dbm_do_nextkey(datum *__return_ptr __struct_ptr retstr, DBM *, datum);
int dbm_error(DBM *db);
datum *dbm_fetch(datum *__return_ptr __struct_ptr retstr, DBM *db, datum key);
datum *dbm_firstkey(datum *__return_ptr __struct_ptr retstr, DBM *db);
__int64 dbm_forder(DBM *db, datum key);
datum *dbm_nextkey(datum *__return_ptr __struct_ptr retstr, DBM *db);
DBM *dbm_open(const char *file, int flags, mode_t mode);
int dbm_setpblksiz(DBM *db, int size);
int dbm_store(DBM *db, datum key, datum content, int store_mode);
void dbmclose();
int dbminit(char *file);
DB *dbopen(const char *, int, int, DBTYPE, const void *);
struct obj *dbx_add_obj(struct obj_list **, const char *);
struct obj *dbx_add_obj_fd(struct obj_list **, int);
struct obj *dbx_insert_obj(struct obj_list **, struct obj *);
void dbx_obj_close(struct obj *);
struct obj *dbx_obj_open(struct obj *, const char *);
struct obj *dbx_obj_open_fd(struct obj *, int);
void dconv_nonperiodic_(double *, double *, double *, int *, int *, int *);
int dconv_nonperiodic_ext_(double *, int *, double *, int *, double *, int *, int *, int *, int *, int *, int *, int *, double *, int *);
void dconv_periodic_(double *, double *, double *, int *, int *);
int dconv_periodic_ext_(double *, int *, double *, int *, double *, int *, int *, int *, int *, int *, int *, double *, int *);
void dcorr_nonperiodic_(double *, double *, double *, int *, int *, int *);
int dcorr_nonperiodic_ext_(double *, int *, double *, int *, double *, int *, int *, int *, int *, int *, int *, int *, double *, int *);
void dcorr_periodic_(double *, double *, double *, int *, int *);
int dcorr_periodic_ext_(double *, int *, double *, int *, double *, int *, int *, int *, int *, int *, int *, double *, int *);
MACRO_decDecimal4 decDecimal4;
MACRO_decDecimal4 decDecimal8;
MACRO_decw_c_rpencil decw_c_center_cursor;
MACRO_decw_c_rpencil decw_c_check_cursor;
MACRO_decw_c_rpencil decw_c_circle_cursor;
MACRO_decw_c decw_c_cross_hair_cursor;
MACRO_decw_c decw_c_draw_cursor;
MACRO_decw_c_rpencil decw_c_eselect_cursor;
MACRO_decw_c_rpencil decw_c_grabhand_cursor;
MACRO_decw_c decw_c_help_select_cursor;
MACRO_decw_c decw_c_hpane_cursor;
MACRO_decw_c decw_c_inactive_cursor;
MACRO_decw_c_rpencil decw_c_leftgrab_cursor;
MACRO_decw_c_rpencil decw_c_leftpointing_cursor;
MACRO_decw decw_c_leftselect_cursor;
MACRO_decw_c_rpencil decw_c_lpencil_cursor;
MACRO_decw_c_rpencil decw_c_mouse_cursor;
MACRO_decw decw_c_num_glyphs;
MACRO_decw_c decw_c_pencil_cursor;
MACRO_decw_c decw_c_resize_cursor;
MACRO_decw_c_rpencil decw_c_rightgrab_cursor;
MACRO_decw_c_rpencil decw_c_rightpointing_cursor;
MACRO_decw_c_rpencil decw_c_rightselect_cursor;
MACRO_decw_c_rpencil decw_c_rpencil_cursor;
MACRO_decw decw_c_select_cursor;
MACRO_decw_c decw_c_text_insertion_bl_cursor;
MACRO_decw_c decw_c_text_insertion_cursor;
MACRO_decw_c_rpencil decw_c_uppointing_cursor;
MACRO_decw_c decw_c_vpane_cursor;
MACRO_decw_c decw_c_wait_cursor;
MACRO_decw_c_rpencil decw_c_wselect_cursor;
MACRO_decw_c_rpencil decw_c_x_cursor;
XColor *def_in_out;
int def_prog_mode(void);
int def_shell_mode(void);
char **def_string_return;
int del_curterm(TERMINAL *oterm);
int delay_output(int ms);
int delch(void);
int delete(datum key);
int deleteln(void);
int delproplist(char *path, int follow, struct proplistname_args *args);
int delterm(TERMINAL *);
int delwin(WINDOW *win);
Cardinal depth;
Drawable dest;
Window dest_w;
int dest_x;
int *dest_x_return;
int dest_y;
int *dest_y_return;
Window destination;
XtDestructor destructor;
XDevice *device;
XID device_id;
int device_is_the_console(const char *);
int devio_2_devgetinfo(struct devget *, device_info_t *);
int dfct_(char *, double *, double *, int *, int *, int *);
int dfct_apply_(char *, double *, double *, DXML_D_FCT_STRUCTURE *, int *);
int dfct_exit_(DXML_D_FCT_STRUCTURE *);
int dfct_init_(int *, DXML_D_FCT_STRUCTURE *, int *, int *);
int dfft_(char *, char *, char *, double *, double *, int *, int *);
int dfft_2d_(char *, char *, char *, double *, double *, int *, int *, int *, int *, int *);
int dfft_3d_(char *, char *, char *, double *, double *, int *, int *, int *, int *, int *, int *, int *, int *);
int dfft_apply_(char *, char *, char *, double *, double *, DXML_D_FFT_STRUCTURE *, int *);
int dfft_apply_2d_(char *, char *, char *, double *, double *, int *, DXML_D_FFT_STRUCTURE_2D *, int *, int *);
int dfft_apply_3d_(char *, char *, char *, float *, float *, int *, int *, int *, int *, int *, DXML_D_FFT_STRUCTURE_3D *, int *, int *, int *);
int dfft_apply_grp_(char *, char *, char *, double *, double *, int *, int *, DXML_D_GRP_FFT_STRUCTURE *, int *, int *);
int dfft_exit_(DXML_D_FFT_STRUCTURE *);
int dfft_exit_2d_(DXML_D_FFT_STRUCTURE_2D *);
int dfft_exit_3d_(DXML_D_FFT_STRUCTURE_3D *);
int dfft_exit_grp_(DXML_D_GRP_FFT_STRUCTURE *);
int dfft_grp_(char *, char *, char *, double *, double *, int *, int *, int *, int *, int *);
int dfft_init_(int *, DXML_D_FFT_STRUCTURE *, int *);
int dfft_init_2d_(int *, int *, DXML_D_FFT_STRUCTURE_2D *, int *);
int dfft_init_3d_(int *, int *, int *, DXML_D_FFT_STRUCTURE_3D *, int *);
int dfft_init_grp_(int *, DXML_D_GRP_FFT_STRUCTURE *, int *, int *);
int dfst_(char *, double *, double *, int *, int *, int *);
int dfst_apply_(char *, double *, double *, DXML_D_FST_STRUCTURE *, int *);
int dfst_exit_(DXML_D_FST_STRUCTURE *);
int dfst_init_(int *, DXML_D_FST_STRUCTURE *, int *, int *);
DialogClassRec dialogClassRec;
WidgetClass dialogWidgetClass;
double difftime(time_t time1, time_t time2);
XmStringDirection direction;
int *direction_return;
char **directories;
XmString dirmask;
char *dirname(char *path);
void dis_init(char *addr_format, char *value_format, char **reg_names, int print_jal_targets);
char *dis_reg_names[3][32];
void dis_regs(char *buffer, unsigned int regmask, unsigned __int64 *reg_values);
void disable_option(struct controller *ctlr_p);
int disablepriv(int);
int disableprivs(privvec_t, priv_t *);
int disablesysauth(int);
int disasm(char *buffer, unsigned __int64 address, unsigned int iword, unsigned int *regmask, unsigned __int64 *symbol_value, unsigned int *ls_register);
int disassembler(unsigned __int64 iadr, int regstyle, char *(*get_symname)(unsigned __int64 address), unsigned __int64 (*get_regvalue)(unsigned int regnum), unsigned int (*get_bytes)(void), void (*print_header)(unsigned __int64 iadr, unsigned int instruction));
char *dispcrypt(const char *, const char *, int);
Display *display;
div_t div(int numerator, int denominator);
int dlclose(void *);
char *dlerror(void);
void *dlopen(const char *, int);
void *dlsym(void *, const char *);
sg_entry_t dma_get_curr_sgentry(dma_handle_t dma_handle);
dma_map_info_t dma_get_maps(struct bus *busp);
sg_entry_t dma_get_next_sgentry(dma_handle_t dma_handle);
int dma_get_num_val_sgentrys(dma_handle_t dma_handle);
int dma_get_private(dma_handle_t dma_handle, int index, u_long *data);
int dma_get_sgentry_reset(dma_handle_t dma_handle);
vm_offset_t dma_kmap_buffer(dma_handle_t dma_handle, u_long offset);
u_long dma_map_alloc(u_long bc, struct controller *cntrlrp, dma_handle_t *dma_handle_p, int flags);
int dma_map_dealloc(dma_handle_t dma_handle);
u_long dma_map_load(u_long bc, vm_offset_t va, struct proc *procp, struct controller *cntrlrp, dma_handle_t *dma_handle_p, u_long max_bc, int flags);
int dma_map_unload(int flags, dma_handle_t dma_handle);
int dma_min_boundary(struct controller *cntrlrp);
int dma_put_curr_sgentry(dma_handle_t dma_handle, sg_entry_t sg_entryp);
int dma_put_prev_sgentry(dma_handle_t dma_handle, sg_entry_t sg_entryp);
int dma_put_private(dma_handle_t dma_handle, int index, u_long data);
MACRO_dnNil dnNil;
int dn_comp(const char *expanded_name, u_char *compressed_name, int length, u_char **name_ptrs, u_char **end_ptr);
int dn_count_labels(const char *);
int dn_expand(const u_char *message_ptr, const u_char *end_of_message, const u_char *compressed_name, char *expanded_name, int length);
int dn_skipname(u_char *comp_domain_name, u_char *end_of_message);
struct dn_naddr *dnet_addr(const char *);
int dnet_conn(const char *, const char *, int, const unsigned __int8 *, int, unsigned __int8 *, int *);
int dnet_eof(int);
char *dnet_getalias(const char *);
char *dnet_htoa(const struct dn_naddr *);
char *dnet_ntoa(const struct dn_naddr *);
char *dnet_otoa(const struct sockaddr_dn *);
void do_config(struct controller *ctlr_p);
XtSelectionDoneProc done_proc;
int doupdate(void);
void downgrade_dv_fields(struct dev_field *, struct dev_flag *, const struct esdev_field *, const struct esdev_flag *);
void downgrade_fi_fields(struct f_field *, struct f_flag *, const struct esfi_field *, const struct esfi_flag *);
void downgrade_pr_fields(struct pr_field *, struct pr_flag *, const struct espw_field *, const struct espw_flag *);
void downgrade_tc_fields(struct t_field *, struct t_flag *, const struct estc_field *, const struct estc_flag *);
char *dp;
char *dp1;
Display ***dpy_return;
int draino(int);
double drand48(void);
int drand48_r(struct drand48_data *dp, double *randval);
Drawable drawable;
double drem(double x, double y);
float dremf(float x, float y);
long double dreml(long double x, long double y);
void drvr_flush(void);
void drvr_register_flush(void (*callback)(), caddr_t param, int flags);
void drvr_register_saveterm(void (*callback)(), caddr_t param, int flags);
void drvr_register_shutdown(void (*callback)(), caddr_t param, int flags);
void drvr_saveterm(void);
void drvr_shutdown(void);
char dump_id[];
int dup(int filedes);
int dup2(int old, int new);
int dxml_bad_direction_string_(void);
int dxml_bad_format_for_direction_(void);
int dxml_bad_format_string_(void);
int dxml_bad_stride_(void);
int dxml_direction_not_match_(void);
int dxml_ill_f_range_(void);
int dxml_ill_flow_(void);
int dxml_ill_lda_(void);
int dxml_ill_n_is_odd_(void);
int dxml_ill_n_nonrec_(void);
int dxml_ill_n_range_(void);
int dxml_ill_nterms_(void);
int dxml_ill_scal_vect_code_(void);
int dxml_ill_temp_array_(void);
int dxml_ill_wiggles_(void);
int dxml_in_version_skew_(void);
int dxml_ins_res_(void);
int dxml_mand_arg_(void);
int dxml_option_not_supported_(void);
int dxml_success_(void);
XtGCMask dynamic_mask;
struct ether_addr *e;
char *ecvt(double value, int num_digits, int *decimal_ptr, int *sign);
unsigned __int64 edata;
char *elf_get_pt_interp(struct obj *);
int elf_nreloc(struct obj *, int);
int elf_spoof_coffhdrs(struct obj *, struct filehdr *, struct aouthdr *, struct scnhdr *);
unsigned int elfhash(const char *);
Widget enable_default_warning;
void enable_option(struct controller *ctlr_p);
int enablepriv(int);
int enableprivs(privvec_t, priv_t *);
void encrypt(char *, int);
void encrypt_r(char *, int, CRYPTD *);
unsigned __int64 end;
void end_authcap(int);
unsigned __int64 end_symbol(struct obj *, __int64);
void enddvagent(void);
void endfsent(void);
void endfsent_r(FILE **);
void endgrent(void);
void endgrent_r(FILE **gr_fp);
void endhostent(void);
void endhostent_r(struct hostent_data *);
void endnetent(void);
void endnetent_r(struct netent_data *);
void endnodeent(void);
$003F63A829E52477BDB4080710A1139D endorder;
void endprdfent(void);
void endprfient(void);
void endprotoent(void);
void endprotoent_r(struct protoent_data *);
void endprpwent(void);
void endprtcent(void);
int endpwdb(void);
void endpwent(void);
void endpwent_r(FILE **pw_fp);
void endrpcent(void);
void endservent(void);
void endservent_r(struct servent_data *);
void endttyent(void);
void endttyent_r(FILE **);
int endusershell(void);
void endutent(void);
void endutxent(void);
int endwin(void);
void enter_quiet_zone(void);
XmFontListEntry entry;
char **environ;
port_t environment_port;
unsigned __int64 eprol;
double erand48(unsigned __int16 *xsubi);
int erand48_r(unsigned __int16 *xsubi, struct drand48_data *dp, double *randval);
char erasechar(void);
double erf(double x);
double erfc(double x);
float erfcf(float x);
long double erfcl(long double x);
float erff(float x);
long double erfl(long double x);
MACRO_err err_ipc;
MACRO_err err_ipc_compat;
MACRO_err err_kern;
MACRO_err err_local;
MACRO_err_max err_max_system;
MACRO_err err_server;
MACRO_err err_us;
int errno;
XmString error;
int escap_cmp_fields(const struct escap_parse *, size_t, const void *, const void *, const uint_t *, const uint_t *, uint_t **);
int escap_copy_fields(const struct escap_parse *, size_t, void *, const void *, uint_t *, const uint_t *, struct escap_pad *);
int escap_count_fields(const struct escap_parse *);
int escap_parse_fields(const struct escap_parse *, size_t, void *, uint_t *, char *, struct escap_pad *, struct escap_pad *);
int escap_print_fields(const struct escap_parse *, size_t, const void *, const uint_t *, FILE *);
size_t escap_size_data(const struct escap_parse *, size_t, const void *, const uint_t *);
const struct escap_parse esdf_parse[];
const struct escap_parse esdv_parse[];
const struct escap_parse esfi_parse[];
int esnmp_allocate(ESNMP_ALLOC *alloc_parm);
int esnmp_are_you_there(void);
int esnmp_capabilities(OID *agent_caps, char *agent_cap_descr);
int esnmp_deallocate(ESNMP_ALLOC *alloc_parm);
int esnmp_init(int *ssocket, char *subagent_identifier);
void esnmp_log(int level, char *text, int line, char *file);
char *esnmp_logs(char *format, ...);
int esnmp_pdu_response(ESNMP_PDU *epdu);
int esnmp_poll(void);
int esnmp_poll_pdu(ESNMP_PDU **epdu_arg);
int esnmp_register(SUBTREE *subtree, int timeout, int priority);
int esnmp_register2(ESNMP_REG *reg);
unsigned int esnmp_sysuptime(struct timeval *timestamp);
int esnmp_term(void);
int esnmp_trap(int generic_trap, int specific_trap, char *enterprise, VARBIND *vb);
int esnmp_uncapabilities(OID *agent_caps);
int esnmp_unregister(SUBTREE *subtree);
int esnmp_unregister2(ESNMP_REG *reg);
const struct escap_parse espw_parse[];
const struct escap_parse estc_parse[];
unsigned __int64 etext;
net_type ethernet;
XKeyPressedEvent *event;
unsigned int event_count;
XEventClass event_list;
EventMask event_mask;
XEvent *event_return;
XEvent *event_send;
int event_type;
void exc_add_gp_range(exc_address begin_address, unsigned __int64 length, exc_address gp);
void exc_add_pc_range_table(PRUNTIME_FUNCTION pbase, pdsc_count count);
unsigned __int64 exc_capture_context(PCONTEXT contextRecord);
void exc_continue(PCONTEXT contextRecord);
struct code_range_entry *exc_crd_list_head;
MACRO_exc_curr exc_curr_c;
unsigned __int64 exc_dispatch_exception(system_exrec_type exceptionRecord, PCONTEXT contextRecord);
EXCEPTION exc_e_12;
EXCEPTION exc_e_13;
EXCEPTION exc_e_5;
EXCEPTION exc_e_6;
EXCEPTION exc_e_7;
EXCEPTION exc_e_aritherr;
EXCEPTION exc_e_decovf;
EXCEPTION exc_e_excpu;
EXCEPTION exc_e_exfilsiz;
EXCEPTION exc_e_exquota;
EXCEPTION exc_e_fltdiv;
EXCEPTION exc_e_fltovf;
EXCEPTION exc_e_fltund;
EXCEPTION exc_e_illaddr;
EXCEPTION exc_e_illinstr;
EXCEPTION exc_e_insfmem;
EXCEPTION exc_e_intdiv;
EXCEPTION exc_e_intovf;
EXCEPTION exc_e_nopriv;
EXCEPTION exc_e_privinst;
EXCEPTION exc_e_resaddr;
EXCEPTION exc_e_resoper;
EXCEPTION exc_e_subrng;
EXCEPTION exc_e_uninitexc;
exc_address exc_find_frame_ptr(PRUNTIME_FUNCTION prf, PCONTEXT pcontext);
void exc_longjmp(PCONTEXT contextRecord, __int64 returnValue);
PRUNTIME_FUNCTION exc_lookup_function_entry(exc_address pc);
PRUNTIME_FUNCTION exc_lookup_function_table(exc_address pc);
exc_address exc_lookup_gp(exc_address pc);
MACRO_exc exc_newexc_c;
void exc_raise_exception(system_exrec_type exceptionRecord);
void exc_raise_signal_exception(unsigned __int64 exception, unsigned __int64 code, PCONTEXT scp);
void exc_raise_status_exception(unsigned __int64 sts);
PRUNTIME_FUNCTION exc_remote_lookup_function_entry(void *handle, int (*fetch_from_process)(void *, void *, void *, __int64), exc_address pc, exc_address crd_handle, PRUNTIME_FUNCTION *func_entry, PRUNTIME_FUNCTION *crd_base);
unsigned __int64 exc_remote_virtual_unwind(void *handle, int (*fetch_from_process)(void *handle, void *addr, void *buffer, __int64 size), exc_address crd_handle, PRUNTIME_FUNCTION pcrd, PCONTEXT pcontext);
void exc_remove_gp_range(exc_address begin_address);
void exc_remove_pc_range_table(PRUNTIME_FUNCTION pbase);
void exc_resume(PCONTEXT contextRecord);
MACRO_exc_s exc_s_SIGABRT;
MACRO_exc_s_SIGBUS exc_s_SIGBUS;
MACRO_exc_s exc_s_SIGEMT;
MACRO_exc_s_accvio exc_s_SIGFPE;
MACRO_exc_s_accvio exc_s_SIGILL;
MACRO_exc_s_SIGIOT exc_s_SIGIOT;
MACRO_exc_s exc_s_SIGPIPE;
MACRO_exc_s_SIGSEGV exc_s_SIGSEGV;
MACRO_exc_s exc_s_SIGSYS;
MACRO_exc_s exc_s_SIGTRAP;
MACRO_exc_s_SIGSEGV exc_s_SIGXCPU;
MACRO_exc_s_SIGSEGV exc_s_SIGXFSZ;
MACRO_exc_s_accvio exc_s_accvio;
MACRO_exc_s exc_s_aritherr;
MACRO_exc_s exc_s_decovf;
MACRO_exc_curr exc_s_exccop;
MACRO_exc_curr exc_s_exccoplos;
MACRO_exc_curr exc_s_exception;
MACRO_exc_s exc_s_excpu;
MACRO_exc_s exc_s_exfilsiz;
MACRO_exc_s exc_s_exquota;
MACRO_exc_s exc_s_fltdiv;
MACRO_exc_s exc_s_fltovf;
MACRO_exc_s exc_s_fltund;
MACRO_exc_s exc_s_illaddr;
MACRO_exc_s exc_s_illinstr;
MACRO_exc_s exc_s_insfmem;
MACRO_exc_s exc_s_intdiv;
MACRO_exc_s exc_s_intovf;
MACRO_exc_s exc_s_nopriv;
MACRO_exc_s exc_s_normal;
MACRO_exc_s exc_s_privinst;
MACRO_exc_s exc_s_resaddr;
MACRO_exc_s exc_s_resoper;
MACRO_exc_s exc_s_subrng;
MACRO_exc_curr exc_s_uninitexc;
MACRO_exc_curr exc_s_unkstatus;
void exc_set_last_chance_handler(exception_handler_type last_chance);
void exc_unwind(void);
void exc_unwind_rfp(void *target_real_frame, void *target_ip, system_exrec_type *exception_record, unsigned __int64 return_value);
MACRO_exc_v2exc exc_v2exc_c;
MACRO_exc_v2exc exc_v3exc_c;
void exc_virtual_unwind(PRUNTIME_FUNCTION prf, PCONTEXT pcontext);
void exception_dispatcher(unsigned __int64 exception, unsigned __int64 code, PCONTEXT scp);
Boolean exclusive;
vm_offset_t exec_args_allocate(void);
int exec_args_copyin(char *, char **, char **, char *, struct execargs *);
int exec_args_copyout(struct execargs *, char *, int);
void exec_args_free(struct execargs *);
kauxv_t *exec_auxv_alloc(void);
void exec_auxv_dealloc(kauxv_t *);
int exec_auxv_operate(struct execargs *, int, int, union auxv_data *);
int exec_copyinstr(caddr_t, char **, int *, unsigned int *, unsigned int *, int);
int exec_copyoutstr(char **, caddr_t, int *, unsigned int *, unsigned int *, int);
int exec_copystr(char *, char **, int *, unsigned int *, unsigned int *);
int exec_with_loader(int flags, const char *loader, const char *file, char *const *argv, char *const *envp);
int execl(const char *path, const char *arg, ...);
int execle(const char *, const char *, ...);
int execlp(const char *file, const char *arg, ...);
struct execops *execsw;
struct execops *execswinit[];
int execv(const char *path, char *const *argv);
int execve(const char *path, char *const *argv, char *const *envp);
int execvp(const char *file, char *const *argv);
void exit(int status);
void exit_quiet_zone(void);
double exp(double x);
double expacct(comp_t record);
float expf(float x);
long double expl(long double x);
double expm1(double x);
float expm1f(float x);
long double expm1l(long double x);
Atom *export_targets;
MACRO_extNil extNil;
int f_line[];
double fabs(double x);
float fabsf(float x);
long double fabsl(long double x);
struct obj *fadd_obj(struct obj_list **, const char *, unsigned int);
String *fallback_resources;
$B78841CC15384C7642A852FC286464A6 false;
float fasm(const char *, ...);
int fattach(int fd, const char *path);
MACRO_fbinfo fbinfo_DEFINED;
int fchdir(int filedes);
int fchmod(int filedes, mode_t mode);
int fchown(int filedes, uid_t owner, gid_t group);
int fclose(FILE *stream);
int fclose_unlocked(FILE *stream);
int fcntl(int filedes, int request, ...);
char *fcvt(double value, int num_digits, int *decimal_ptr, int *sign);
int fd;
MACRO_fdNil fdNil;
int fdatasync(int fildes);
int fdes;
int fdetach(const char *path);
struct fdfs_dirent *fdfs_dirbuf;
int fdfs_file_count;
struct vnode *fdfs_root_directory;
FILE *fdopen(int filedes, const char *mode);
XID *feedbackclass;
XID *feedbackid;
int feof(FILE *stream);
int ferror(FILE *stream);
datum *fetch(datum *__return_ptr __struct_ptr retstr, datum key);
int fflush(FILE *stream);
int fflush_unlocked(FILE *stream);
int ffs(int pattern);
int fgetc(FILE *stream);
struct group *fgetgrent(FILE *f);
int fgetgrent_r(FILE *f, struct group *grp, char *buffer, int len);
char *fgetpasswd(const char *, int, FILE *, FILE *);
int fgetpos(FILE *stream, fpos_t *position);
struct passwd *fgetpwent(FILE *f);
int fgetpwent_r(FILE *f, struct passwd *pwd, char *buffer, int len);
char *fgets(char *string, int n, FILE *stream);
wint_t fgetwc(FILE *stream);
wchar_t *fgetws(wchar_t *wcs, int number, FILE *stream);
MACRO_fiNil fiNil;
unsigned __int64 file_cbLineOffset(struct obj *, unsigned __int64);
unsigned __int64 file_cline(struct obj *, unsigned __int64);
unsigned __int64 file_glevel(struct obj *, unsigned __int64);
unsigned __int64 file_lang(struct obj *, unsigned __int64);
unsigned __int64 file_line_to_address(struct obj *, unsigned __int64 *, unsigned __int64 *, unsigned __int64);
unsigned __int64 file_lineindex(struct obj *, unsigned __int64);
char *file_name(struct obj *, unsigned __int64);
struct fdr *file_pfd(struct obj *, unsigned __int64);
unsigned __int64 file_scope_name_search(struct obj *, unsigned __int64, const char *, __int64, __int64);
char *file_string_base(struct obj *, unsigned __int64);
unsigned __int64 file_symbol(struct obj *, unsigned __int64);
unsigned __int64 file_symbol_count(struct obj *, unsigned __int64);
struct obj *file_to_obj(struct obj_list *, unsigned __int64);
unsigned __int64 file_type_base(struct obj *, unsigned __int64);
String filename;
int fileno(FILE *stream);
int fill_rule;
int fill_style;
char *find_auth_file(const char *, int);
struct bus *find_bus_config_entry(struct bus *bus, char *driver_name, int slot);
struct controller *find_ctlr_config_entry(struct bus *bus, char *driver_name, int slot);
unsigned __int64 find_high_line(struct obj *, unsigned __int64);
PRUNTIME_FUNCTION find_rpd(exc_address pc);
unsigned __int64 find_section_byname(struct obj *, struct scnhdr *, unsigned __int64);
unsigned __int64 find_section_bytype(struct obj *, struct scnhdr *, unsigned __int64);
__int64 find_symbol(struct obj *, __int64, const char *, int, int);
__int64 find_user_symbol(const char *, int);
int finite(double x);
int finitef(float x);
int finitel(long double x);
int first_keycode;
int first_valuator;
datum *firstkey(datum *__return_ptr __struct_ptr retstr);
int fixterm(void);
unsigned __int64 flag;
int flags;
int flock(int filedes, int operation);
void flockfile(FILE *file);
double floor(double x);
float floorf(float x);
long double floorl(long double x);
MACRO_flti flti_adds;
MACRO_flti flti_addsc;
MACRO_flti flti_addsd;
MACRO_flti flti_addsm;
MACRO_flti_addssuc flti_addssu;
MACRO_flti_addssuc flti_addssuc;
MACRO_flti_addssuc flti_addssud;
MACRO_flti_addssuc flti_addssui;
MACRO_flti_addssuc flti_addssuic;
MACRO_flti_addssuc flti_addssuid;
MACRO_flti_addssuc flti_addssuim;
MACRO_flti_addssuc flti_addssum;
MACRO_flti flti_addsu;
MACRO_flti flti_addsuc;
MACRO_flti flti_addsud;
MACRO_flti flti_addsum;
MACRO_flti flti_addt;
MACRO_flti flti_addtc;
MACRO_flti flti_addtd;
MACRO_flti flti_addtm;
MACRO_flti_addssuc flti_addtsu;
MACRO_flti_addssuc flti_addtsuc;
MACRO_flti_addssuc flti_addtsud;
MACRO_flti_addssuc flti_addtsui;
MACRO_flti_addssuc flti_addtsuic;
MACRO_flti_addssuc flti_addtsuid;
MACRO_flti_addssuc flti_addtsuim;
MACRO_flti_addssuc flti_addtsum;
MACRO_flti flti_addtu;
MACRO_flti flti_addtuc;
MACRO_flti flti_addtud;
MACRO_flti flti_addtum;
MACRO_flti flti_cmpteq;
MACRO_flti_addssuc flti_cmpteqsu;
MACRO_flti flti_cmptle;
MACRO_flti_addssuc flti_cmptlesu;
MACRO_flti flti_cmptlt;
MACRO_flti_addssuc flti_cmptltsu;
MACRO_flti flti_cmptun;
MACRO_flti_addssuc flti_cmptunsu;
MACRO_flti flti_cvtqs;
MACRO_flti flti_cvtqsc;
MACRO_flti flti_cvtqsd;
MACRO_flti flti_cvtqsm;
MACRO_flti_addssuc flti_cvtqssui;
MACRO_flti_addssuc flti_cvtqssuic;
MACRO_flti_addssuc flti_cvtqssuid;
MACRO_flti_addssuc flti_cvtqssuim;
MACRO_flti flti_cvtqt;
MACRO_flti flti_cvtqtc;
MACRO_flti flti_cvtqtd;
MACRO_flti flti_cvtqtm;
MACRO_flti_addssuc flti_cvtqtsui;
MACRO_flti_addssuc flti_cvtqtsuic;
MACRO_flti_addssuc flti_cvtqtsuid;
MACRO_flti_addssuc flti_cvtqtsuim;
MACRO_flti flti_cvtst;
MACRO_flti flti_cvtsts;
MACRO_flti flti_cvttq;
MACRO_flti flti_cvttqc;
MACRO_flti flti_cvttqd;
MACRO_flti flti_cvttqm;
MACRO_flti_addssuc flti_cvttqsv;
MACRO_flti_addssuc flti_cvttqsvc;
MACRO_flti_addssuc flti_cvttqsvd;
MACRO_flti_addssuc flti_cvttqsvi;
MACRO_flti_addssuc flti_cvttqsvic;
MACRO_flti_addssuc flti_cvttqsvid;
MACRO_flti_addssuc flti_cvttqsvim;
MACRO_flti_addssuc flti_cvttqsvm;
MACRO_flti flti_cvttqv;
MACRO_flti flti_cvttqvc;
MACRO_flti flti_cvttqvd;
MACRO_flti flti_cvttqvm;
MACRO_flti flti_cvtts;
MACRO_flti flti_cvttsc;
MACRO_flti flti_cvttsd;
MACRO_flti flti_cvttsm;
MACRO_flti_addssuc flti_cvttss;
MACRO_flti_addssuc flti_cvttssu;
MACRO_flti_addssuc flti_cvttssuc;
MACRO_flti_addssuc flti_cvttssud;
MACRO_flti_addssuc flti_cvttssui;
MACRO_flti_addssuc flti_cvttssuic;
MACRO_flti_addssuc flti_cvttssuid;
MACRO_flti_addssuc flti_cvttssuim;
MACRO_flti_addssuc flti_cvttssum;
MACRO_flti flti_cvttsu;
MACRO_flti flti_cvttsuc;
MACRO_flti flti_cvttsud;
MACRO_flti flti_cvttsum;
MACRO_flti flti_divs;
MACRO_flti flti_divsc;
MACRO_flti flti_divsd;
MACRO_flti flti_divsm;
MACRO_flti_addssuc flti_divssu;
MACRO_flti_addssuc flti_divssuc;
MACRO_flti_addssuc flti_divssud;
MACRO_flti_addssuc flti_divssui;
MACRO_flti_addssuc flti_divssuic;
MACRO_flti_addssuc flti_divssuid;
MACRO_flti_addssuc flti_divssuim;
MACRO_flti_addssuc flti_divssum;
MACRO_flti flti_divsu;
MACRO_flti flti_divsuc;
MACRO_flti flti_divsud;
MACRO_flti flti_divsum;
MACRO_flti flti_divt;
MACRO_flti flti_divtc;
MACRO_flti flti_divtd;
MACRO_flti flti_divtm;
MACRO_flti_addssuc flti_divtsu;
MACRO_flti_addssuc flti_divtsuc;
MACRO_flti_addssuc flti_divtsud;
MACRO_flti_addssuc flti_divtsui;
MACRO_flti_addssuc flti_divtsuic;
MACRO_flti_addssuc flti_divtsuid;
MACRO_flti_addssuc flti_divtsuim;
MACRO_flti_addssuc flti_divtsum;
MACRO_flti flti_divtu;
MACRO_flti flti_divtuc;
MACRO_flti flti_divtud;
MACRO_flti flti_divtum;
MACRO_flti flti_muls;
MACRO_flti flti_mulsc;
MACRO_flti flti_mulsd;
MACRO_flti flti_mulsm;
MACRO_flti_addssuc flti_mulssu;
MACRO_flti_addssuc flti_mulssuc;
MACRO_flti_addssuc flti_mulssud;
MACRO_flti_addssuc flti_mulssui;
MACRO_flti_addssuc flti_mulssuic;
MACRO_flti_addssuc flti_mulssuid;
MACRO_flti_addssuc flti_mulssuim;
MACRO_flti_addssuc flti_mulssum;
MACRO_flti flti_mulsu;
MACRO_flti flti_mulsuc;
MACRO_flti flti_mulsud;
MACRO_flti flti_mulsum;
MACRO_flti flti_mult;
MACRO_flti flti_multc;
MACRO_flti flti_multd;
MACRO_flti flti_multm;
MACRO_flti_addssuc flti_multsu;
MACRO_flti_addssuc flti_multsuc;
MACRO_flti_addssuc flti_multsud;
MACRO_flti_addssuc flti_multsui;
MACRO_flti_addssuc flti_multsuic;
MACRO_flti_addssuc flti_multsuid;
MACRO_flti_addssuc flti_multsuim;
MACRO_flti_addssuc flti_multsum;
MACRO_flti flti_multu;
MACRO_flti flti_multuc;
MACRO_flti flti_multud;
MACRO_flti flti_multum;
MACRO_flti flti_subs;
MACRO_flti flti_subsc;
MACRO_flti flti_subsd;
MACRO_flti flti_subsm;
MACRO_flti_addssuc flti_subssu;
MACRO_flti_addssuc flti_subssuc;
MACRO_flti_addssuc flti_subssud;
MACRO_flti_addssuc flti_subssui;
MACRO_flti_addssuc flti_subssuic;
MACRO_flti_addssuc flti_subssuid;
MACRO_flti_addssuc flti_subssuim;
MACRO_flti_addssuc flti_subssum;
MACRO_flti flti_subsu;
MACRO_flti flti_subsuc;
MACRO_flti flti_subsud;
MACRO_flti flti_subsum;
MACRO_flti flti_subt;
MACRO_flti flti_subtc;
MACRO_flti flti_subtd;
MACRO_flti flti_subtm;
MACRO_flti_addssuc flti_subtsu;
MACRO_flti_addssuc flti_subtsuc;
MACRO_flti_addssuc flti_subtsud;
MACRO_flti_addssuc flti_subtsui;
MACRO_flti_addssuc flti_subtsuic;
MACRO_flti_addssuc flti_subtsuid;
MACRO_flti_addssuc flti_subtsuim;
MACRO_flti_addssuc flti_subtsum;
MACRO_flti flti_subtu;
MACRO_flti flti_subtuc;
MACRO_flti flti_subtud;
MACRO_flti flti_subtum;
MACRO_fltl fltl_cpys;
MACRO_fltl fltl_cpyse;
MACRO_fltl fltl_cpysn;
MACRO_fltl fltl_cvtlq;
MACRO_fltl fltl_cvtql;
MACRO_fltl fltl_cvtqlsv;
MACRO_fltl fltl_cvtqlv;
MACRO_fltl fltl_fcmoveq;
MACRO_fltl fltl_fcmovge;
MACRO_fltl fltl_fcmovgt;
MACRO_fltl fltl_fcmovle;
MACRO_fltl fltl_fcmovlt;
MACRO_fltl fltl_fcmovne;
MACRO_fltl fltl_mf_fpcr;
MACRO_fltl fltl_mt_fpcr;
MACRO_fltm fltm_itoff;
MACRO_fltm fltm_itofs;
MACRO_fltm fltm_itoft;
MACRO_fltm_sqrtf fltm_sqrtf;
MACRO_fltm_sqrtfc fltm_sqrtfc;
MACRO_fltm_sqrtfuc fltm_sqrtfs;
MACRO_fltm_sqrtfsc fltm_sqrtfsc;
MACRO_fltm_sqrtfsc fltm_sqrtfsu;
MACRO_fltm_sqrtfsuc fltm_sqrtfsuc;
MACRO_fltm_sqrtfc fltm_sqrtfu;
MACRO_fltm_sqrtfuc fltm_sqrtfuc;
MACRO_fltm_sqrtg fltm_sqrtg;
MACRO_fltm_sqrtgc fltm_sqrtgc;
MACRO_fltm_sqrtguc fltm_sqrtgs;
MACRO_fltm_sqrtgsc fltm_sqrtgsc;
MACRO_fltm_sqrtgsc fltm_sqrtgsu;
MACRO_fltm_sqrtgsuc fltm_sqrtgsuc;
MACRO_fltm_sqrtgc fltm_sqrtgu;
MACRO_fltm_sqrtguc fltm_sqrtguc;
MACRO_fltm fltm_sqrts;
MACRO_fltm_sqrtsc fltm_sqrtsc;
MACRO_fltm_sqrtsc fltm_sqrtsd;
MACRO_fltm_sqrtsc fltm_sqrtsm;
MACRO_fltm_sqrtsuc fltm_sqrtssu;
MACRO_fltm_sqrtssuc fltm_sqrtssuc;
MACRO_fltm_sqrtssuc fltm_sqrtssud;
MACRO_fltm_sqrtssuc fltm_sqrtssui;
MACRO_fltm_sqrtssuic fltm_sqrtssuic;
MACRO_fltm_sqrtssuic fltm_sqrtssuid;
MACRO_fltm_sqrtssuic fltm_sqrtssuim;
MACRO_fltm_sqrtssuc fltm_sqrtssum;
MACRO_fltm_sqrtsc fltm_sqrtsu;
MACRO_fltm_sqrtsuc fltm_sqrtsuc;
MACRO_fltm_sqrtsuc fltm_sqrtsud;
MACRO_fltm_sqrtsuc fltm_sqrtsum;
MACRO_fltm_sqrtt fltm_sqrtt;
MACRO_fltm_sqrttc fltm_sqrttc;
MACRO_fltm_sqrttc fltm_sqrttd;
MACRO_fltm_sqrttc fltm_sqrttm;
MACRO_fltm_sqrttuc fltm_sqrttsu;
MACRO_fltm_sqrttsuc fltm_sqrttsuc;
MACRO_fltm_sqrttsuc fltm_sqrttsud;
MACRO_fltm_sqrttsuc fltm_sqrttsui;
MACRO_fltm_sqrttsuic fltm_sqrttsuic;
MACRO_fltm_sqrttsuic fltm_sqrttsuid;
MACRO_fltm_sqrttsuic fltm_sqrttsuim;
MACRO_fltm_sqrttsuc fltm_sqrttsum;
MACRO_fltm_sqrttc fltm_sqrttu;
MACRO_fltm_sqrttuc fltm_sqrttuc;
MACRO_fltm_sqrttuc fltm_sqrttud;
MACRO_fltm_sqrttuc fltm_sqrttum;
MACRO_fltv fltv_addf;
MACRO_fltv fltv_addfc;
MACRO_fltv fltv_addfs;
MACRO_fltv fltv_addfsc;
MACRO_fltv fltv_addfsu;
MACRO_fltv fltv_addfsuc;
MACRO_fltv fltv_addfu;
MACRO_fltv fltv_addfuc;
MACRO_fltv fltv_addg;
MACRO_fltv fltv_addgc;
MACRO_fltv fltv_addgs;
MACRO_fltv fltv_addgsc;
MACRO_fltv fltv_addgsu;
MACRO_fltv fltv_addgsuc;
MACRO_fltv fltv_addgu;
MACRO_fltv fltv_addguc;
MACRO_fltv fltv_cmpgeq;
MACRO_fltv fltv_cmpgeqs;
MACRO_fltv fltv_cmpgle;
MACRO_fltv fltv_cmpgles;
MACRO_fltv fltv_cmpglt;
MACRO_fltv fltv_cmpglts;
MACRO_fltv fltv_cvtdg;
MACRO_fltv fltv_cvtdgc;
MACRO_fltv fltv_cvtdgs;
MACRO_fltv fltv_cvtdgsc;
MACRO_fltv fltv_cvtdgsu;
MACRO_fltv fltv_cvtdgsuc;
MACRO_fltv fltv_cvtdgu;
MACRO_fltv fltv_cvtdguc;
MACRO_fltv fltv_cvtgd;
MACRO_fltv fltv_cvtgdc;
MACRO_fltv fltv_cvtgds;
MACRO_fltv fltv_cvtgdsc;
MACRO_fltv fltv_cvtgdsu;
MACRO_fltv fltv_cvtgdsuc;
MACRO_fltv fltv_cvtgdu;
MACRO_fltv fltv_cvtgduc;
MACRO_fltv fltv_cvtgf;
MACRO_fltv fltv_cvtgfc;
MACRO_fltv fltv_cvtgfs;
MACRO_fltv fltv_cvtgfsc;
MACRO_fltv fltv_cvtgfsu;
MACRO_fltv fltv_cvtgfsuc;
MACRO_fltv fltv_cvtgfu;
MACRO_fltv fltv_cvtgfuc;
MACRO_fltv fltv_cvtgq;
MACRO_fltv fltv_cvtgqc;
MACRO_fltv fltv_cvtgqs;
MACRO_fltv fltv_cvtgqsc;
MACRO_fltv fltv_cvtgqsv;
MACRO_fltv fltv_cvtgqsvc;
MACRO_fltv fltv_cvtgqv;
MACRO_fltv fltv_cvtgqvc;
MACRO_fltv fltv_cvtqf;
MACRO_fltv fltv_cvtqfc;
MACRO_fltv fltv_cvtqg;
MACRO_fltv fltv_cvtqgc;
MACRO_fltv fltv_divf;
MACRO_fltv fltv_divfc;
MACRO_fltv fltv_divfs;
MACRO_fltv fltv_divfsc;
MACRO_fltv fltv_divfsu;
MACRO_fltv fltv_divfsuc;
MACRO_fltv fltv_divfu;
MACRO_fltv fltv_divfuc;
MACRO_fltv fltv_divg;
MACRO_fltv fltv_divgc;
MACRO_fltv fltv_divgs;
MACRO_fltv fltv_divgsc;
MACRO_fltv fltv_divgsu;
MACRO_fltv fltv_divgsuc;
MACRO_fltv fltv_divgu;
MACRO_fltv fltv_divguc;
MACRO_fltv fltv_mulf;
MACRO_fltv fltv_mulfc;
MACRO_fltv fltv_mulfs;
MACRO_fltv fltv_mulfsc;
MACRO_fltv fltv_mulfsu;
MACRO_fltv fltv_mulfsuc;
MACRO_fltv fltv_mulfu;
MACRO_fltv fltv_mulfuc;
MACRO_fltv fltv_mulg;
MACRO_fltv fltv_mulgc;
MACRO_fltv fltv_mulgs;
MACRO_fltv fltv_mulgsc;
MACRO_fltv fltv_mulgsu;
MACRO_fltv fltv_mulgsuc;
MACRO_fltv fltv_mulgu;
MACRO_fltv fltv_mulguc;
MACRO_fltv fltv_subf;
MACRO_fltv fltv_subfc;
MACRO_fltv fltv_subfs;
MACRO_fltv fltv_subfsc;
MACRO_fltv fltv_subfsu;
MACRO_fltv fltv_subfsuc;
MACRO_fltv fltv_subfu;
MACRO_fltv fltv_subfuc;
MACRO_fltv fltv_subg;
MACRO_fltv fltv_subgc;
MACRO_fltv fltv_subgs;
MACRO_fltv fltv_subgsc;
MACRO_fltv fltv_subgsu;
MACRO_fltv fltv_subgsuc;
MACRO_fltv fltv_subgu;
MACRO_fltv fltv_subguc;
int flushinp(void);
double fmod(double x, double y);
char *fmod_name[32];
float fmodf(float x, float y);
long double fmodl(long double x, long double y);
int fmtmsg(__int64 classification, const char *label, int severity, const char *text, const char *action, const char *tag);
int fnmatch(const char *pattern, const char *string, int flags);
Window focus;
int fold_string_w(unsigned __int64 map_flags, const wchar_t *src_wcs, int src_cnt, wchar_t *dest_wcs, int dest_cnt);
XFontStruct **font;
int *font_ascent_return;
int *font_descent_return;
char *font_name;
char ***font_name_list_return;
XFontSet font_set;
XFontStruct ***font_struct_list_return;
int font_unit_value;
XmFontList fontlist;
FILE *fopen(const char *path, const char *mode);
unsigned __int64 forall_previous_objs(struct obj_list *, struct obj *, unsigned __int64 (*routine)(struct obj *, struct obj *, unsigned __int64), unsigned __int64);
int forcepriv(int);
int forceprivs(privvec_t, priv_t *);
__int64 forder(datum key);
unsigned __int64 foreach_obj(struct obj_list *, unsigned __int64 (*routine)(unsigned __int64, unsigned __int64, unsigned __int64 *), unsigned __int64);
unsigned __int64 foreach_obj_procedure(struct obj *, unsigned __int64 (*routine)(struct obj *, __int64, unsigned __int64), unsigned __int64);
unsigned __int64 foreach_obj_procedure_sorted(struct obj *, unsigned __int64 (*routine)(struct obj *, __int64, unsigned __int64), unsigned __int64);
unsigned __int64 foreach_procedure(struct obj *, unsigned __int64 file, unsigned __int64 (*routine)(struct obj *, __int64, unsigned __int64), unsigned __int64);
unsigned __int64 foreach_rfd(struct obj *, unsigned __int64, unsigned __int64 (*routine)(struct obj *, unsigned __int64, char *, __int64, __int64), unsigned __int64, unsigned __int64, unsigned __int64);
unsigned __int64 foreach_section(struct obj *, unsigned __int64 (*routine)(struct obj *, struct scnhdr *, unsigned __int64), unsigned __int64);
unsigned __int64 foreach_sublist(struct obj_list *, unsigned __int64 (*routine)(struct obj_list *, unsigned __int64), unsigned __int64);
Pixel foreground;
XColor *foreground_color;
pid_t fork(void);
pid_t forkpty(int *master, char *name, struct termios *termp, struct winsize *winp);
FormClassRec formClassRec;
WidgetClass formWidgetClass;
int format;
int format_length;
char *format_name;
XtPointer format_name_buf;
int *format_return;
__int64 fortran_scope_search(struct obj *, unsigned __int64, const char *, int, int);
int fp_class(double x);
int fp_classf(float x);
int fp_classl(long double x);
void fp_nquery(const u_char *, int, FILE *);
void fp_query(const u_char *, FILE *);
void fp_resstat(struct __res_state *, FILE *);
char fpath[];
__int64 fpathconf(int filedes, int name);
int fprintf(FILE *stream, const char *format, ...);
int fputc(int c, FILE *stream);
int fputs(const char *string, FILE *stream);
wint_t fputwc(wint_t wc, FILE *stream);
int fputws(const wchar_t *wcs, FILE *stream);
size_t fread(void *pointer, size_t size, size_t num_items, FILE *stream);
size_t fread_unlocked(void *pointer, size_t size, size_t num_items, FILE *stream);
void free(void *pointer);
void free_oct(OCT *oct);
void free_oid(OID *oid);
void free_varbind_data(VARBIND *vb);
void freeaddrinfo(struct addrinfo *ai);
void freehostent(struct hostent *ptr);
FILE *freopen(const char *path, const char *mode, FILE *stream);
double frexp(double x, int *n);
float frexpf(float x, int *n);
long double frexpl(long double x, int *n);
XrmValuePtr from;
String from_type;
int from_unit_type;
XrmValue *from_val;
String from_value;
MACRO_fsFalse fsFalse;
MACRO_fsTrue fsTrue;
int fscanf(FILE *stream, const char *format, ...);
int fsec;
int fseek(FILE *stream, __int64 offset, int whence);
int fseek_unlocked(FILE *stream, __int64 offset, int whence);
int fseeko(FILE *stream, off_t offset, int whence);
int fsetpos(FILE *stream, const fpos_t *position);
char *fsl_find_raw_name(const char *name, char *buf, int sizeofbuf);
int fsl_swap_part_name(dev_t, char *);
char *fsl_to_block_name(const char *name, char *buf, int sizeofbuf);
char *fsl_to_raw_name(const char *name, char *buf, int sizeofbuf);
int fstat(int filedes, struct stat *buffer);
int fstatfs(int a, struct statfs *b, ...);
int fstatvfs(int file_descriptor, struct statvfs *buffer);
int fsync(int fildes);
__int64 ftell(FILE *stream);
off_t ftello(FILE *stream);
key_t ftok(const char *path_name, int project_id);
int ftruncate(int filedes, off_t length);
int ftrylockfile(FILE *file);
int ftw(const char *path, int (*function)(const char *, const struct stat *, int), int ndirs);
int function;
void funlockfile(FILE *file);
int fuser(char *file, __int64 flag, struct f_user *fuser_array, __int64 sizeof_fuser_array);
int fwide(FILE *stream, int mode);
int fwprintf(FILE *stream, const wchar_t *format, ...);
size_t fwrite(const void *pointer, size_t size, size_t num_items, FILE *stream);
size_t fwrite_unlocked(const void *pointer, size_t size, size_t num_items, FILE *stream);
int fwscanf(FILE *, const wchar_t *, ...);
char *gai_strerror(int ecode);
double gamma(double);
float gammaf(float);
GC gc;
char *gcvt(double value, int num_digits, char *buffer);
int getArchiverFormat(char *);
struct HeaderInfo *getHeaderInfo(char *);
__int64 get_aux(struct obj *, __int64);
struct bus *get_bus_next(struct bus *);
int get_config(struct controller *ctlr_p, uint_t config_item, char *func_type, void *data_p, int handle);
struct controller *get_controller_next(struct controller *);
int get_crypt_maxlen(int);
const char *get_crypt_name(int);
struct device *get_device_next(struct device *);
int get_num_crypts(void);
int get_num_cust_crypts(void);
int get_proplist_entry(char **name, int **flags, int **value_size, char **value, char **bufptr);
void get_range(struct obj *, __int64, struct obj_type *);
__int64 get_seed(struct pr_passwd *);
__int64 get_seed_es(struct es_passwd *);
int get_wstr(wint_t *wstr);
int getaddressconf(struct addressconf *buffer, size_t length);
int getaddrinfo(const char *nodename, const char *servname, const struct addrinfo *hints, struct addrinfo **res);
chtype getattrs(WINDOW *);
int getbegx(WINDOW *);
int getbegy(WINDOW *);
unsigned __int64 getbmap(void);
int getc(FILE *stream);
int getc_unlocked(FILE *stream);
int getcchar(const cchar_t *wcval, wchar_t *wch, attr_t *attrs, __int16 *color_pair, void *opts);
int getch(void);
int getchar(void);
int getchar_unlocked(void);
int getclock(int clktyp, struct timespec *tp);
int getcontext(ucontext_t *ucp);
int getcurx(WINDOW *);
int getcury(WINDOW *);
char *getcwd(char *buffer, size_t size);
struct tm *getdate(const char *string);
int getdate_err;
int getdirentries(int fd, char *buf, int nbytes, __int64 *basep);
struct disklabel *getdiskbyname(char *name);
int getdomainname(char *, int);
int getdtablesize(void);
struct dev_asg *getdvagent(void);
struct dev_asg *getdvagnam(const char *);
gid_t getegid(void);
char *getenv(const char *name);
struct es_default *getesdfent(void);
struct es_default *getesdfnam(char *name);
struct esdev_asg *getesdvent(void);
struct esdev_asg *getesdvnam(char *name);
struct es_file *getesfient(void);
struct es_file *getesfinam(char *name);
struct es_passwd *getespwent(void);
struct es_passwd *getespwnam(char *name);
struct es_passwd *getespwuid(int uid);
struct es_term *getestcent(void);
struct es_term *getestcnam(char *name);
uid_t geteuid(void);
struct fstab *getfsent(void);
int getfsent_r(struct fstab *, char *, int, FILE **);
struct fstab *getfsfile(const char *fs_file);
int getfsfile_r(const char *, struct fstab *, char *, int, FILE **);
struct fstab *getfsspec(const char *spec_file);
int getfsspec_r(const char *, struct fstab *, char *, int, FILE **);
gid_t getgid(void);
struct group *getgrent(void);
int getgrent_r(struct group *grp, char *buffer, int len, FILE **gr_fp);
struct group *getgrgid(gid_t gid);
int getgrgid_r(gid_t gid, struct group *grp, char *buffer, size_t len, struct group **result);
struct group *getgrnam(const char *name);
int getgrnam_r(const char *name, struct group *grp, char *buffer, size_t len, struct group **result);
int getgroups(int gidsetsize, gid_t *grouplist);
struct hostent *gethostbyaddr(const void *addr, size_t len, int type);
int gethostbyaddr_r(const char *, int, int, struct hostent *, struct hostent_data *);
struct hostent *gethostbyname(const char *name);
int gethostbyname_r(const char *, struct hostent *, struct hostent_data *);
struct hostent *gethostent(void);
int gethostent_r(struct hostent *, struct hostent_data *);
int gethostid(void);
int gethostname(char *name, size_t namelen);
int gethostsex(void);
struct hostent *getipnodebyaddr(const void *src, size_t len, int af, int *error_num);
struct hostent *getipnodebyname(const char *name, int addr_family, int flags, int *error_num);
int getitimer(int which, struct itimerval *value);
char *getlogin(void);
int getlogin_r(char *name, size_t len);
uid_t getluid(void);
int getmaxx(WINDOW *);
int getmaxy(WINDOW *);
int getmntinfo(struct statfs **mntbufp, int flags);
unsigned __int64 getmouse(void);
int getmsg(int fd, struct strbuf *ctlptr, struct strbuf *dataptr, int *flags);
int getnameinfo(const struct sockaddr *, size_t, char *, size_t, char *, size_t, int);
struct netent *getnetbyaddr(in_addr_t num, int type);
int getnetbyaddr_r(int, int, struct netent *, struct netent_data *);
struct netent *getnetbyname(const char *name);
int getnetbyname_r(const char *, struct netent *, struct netent_data *);
struct netent *getnetent(void);
int getnetent_r(struct netent *, struct netent_data *);
struct dn_naddr *getnodeadd(void);
struct nodeent *getnodebyaddr(const char *, int, int);
struct nodeent *getnodebyname(const char *);
struct nodeent *getnodeent(void);
char *getnodename(void);
struct objectent *getobjectbyname(const char *);
struct objectent *getobjectbynumber(int);
int getopt(int argc, char *const *argv, const char *optstring);
int getpagesize(void);
int getparx(WINDOW *);
int getpary(WINDOW *);
char *getpass(const char *prompt);
char *getpasswd(const char *, int);
int getpeername(int socket, struct sockaddr *address, size_t *address_len);
pid_t getpgid(pid_t pid);
pid_t getpgrp(void);
pid_t getpid(void);
int getpmsg(int fd, struct strbuf *ctlptr, struct strbuf *dataptr, int *band, int *flags);
pid_t getppid(void);
struct pr_default *getprdfent(void);
struct pr_default *getprdfnam(const char *);
struct pr_file *getprfient(void);
struct pr_file *getprfinam(const char *);
int getpriority(int which, id_t who);
int getpriv(__int64, priv_t *);
int getproplist(char *path, int follow, struct proplistname_args *args, int nbytes, char *buf, int *min_buf_size);
struct protoent *getprotobyname(const char *name);
int getprotobyname_r(const char *, struct protoent *, struct protoent_data *);
struct protoent *getprotobynumber(int num);
int getprotobynumber_r(int, struct protoent *, struct protoent_data *);
struct protoent *getprotoent(void);
int getprotoent_r(struct protoent *, struct protoent_data *);
struct pr_passwd *getprpwent(void);
struct pr_passwd *getprpwnam(const char *);
struct pr_passwd *getprpwuid(uid_t);
struct pr_term *getprtcent(void);
struct pr_term *getprtcnam(const char *);
struct passwd *getpwent(void);
int getpwent_r(struct passwd *pwd, char *buffer, int len, FILE **pw_fp);
struct passwd *getpwnam(const char *name);
int getpwnam_r(const char *name, struct passwd *pwd, char *buffer, size_t len, struct passwd **result);
struct passwd *getpwuid(uid_t uid);
int getpwuid_r(uid_t uid, struct passwd *pwd, char *buffer, size_t len, struct passwd **result);
res_handle *getrhandle_1();
int getrlimit(int resource1, struct rlimit *rlp);
struct rpcent *getrpcbyname(char *name);
struct rpcent *getrpcbynumber(int number);
struct rpcent *getrpcent(void);
int getrusage(int who, struct rusage *r_usage);
char *gets(char *string);
struct servent *getservbyname(const char *name, const char *proto);
int getservbyname_r(const char *, const char *, struct servent *, struct servent_data *);
struct servent *getservbyport(int port, const char *proto);
int getservbyport_r(int, const char *, struct servent *, struct servent_data *);
struct servent *getservent(void);
int getservent_r(struct servent *, struct servent_data *);
pid_t getsid(pid_t process_id);
int getsockname(int socket, struct sockaddr *address, size_t *address_len);
int getsockopt(int socket, int level, int option_nam, void *option_value, size_t *option_len);
int getstr(char *str);
int getsubopt(char **optionp, char **tokens, char **valuep);
struct svcinfo *getsvc(void);
struct svcinfo *getsvc_last(void);
int getsvc_r(struct svcinfo *);
int getsysinfo(unsigned __int64, caddr_t, unsigned __int64, ...);
int gettimeofday(struct timeval *tp, void *tzp);
int gettimer(timer_t timerid, struct itimerspec *tp);
struct ttyent *getttyent(void);
int getttyent_r(struct ttyent *, char *, int, FILE **);
struct ttyent *getttynam(const char *name);
int getttynam_r(const char *, struct ttyent *, char *, int);
char *gettxt(const char *, const char *);
uid_t getuid(void);
struct userpw *getuserpw(char *);
char *getusershell(void);
struct utmp *getutent(void);
struct utmp *getutid(struct utmp *id);
struct utmp *getutline(struct utmp *line);
struct utmpx *getutxent(void);
struct utmpx *getutxid(const struct utmpx *id);
struct utmpx *getutxline(const struct utmpx *line);
int getvfsbyname(const char *typename);
char *getvfsbynumber(int typeno);
int getw(FILE *stream);
wint_t getwc(FILE *stream);
wint_t getwc_unlocked(FILE *stream);
int getwch(void);
wint_t getwchar(void);
char *getwd(char *path_name);
int getwstr(wchar_t *wstr);
void getyx(WINDOW *win, int y, int x);
char *gfop_name[64];
int glob(const char *pattern, int flags, int (*errfunc)(const char *epath, int eerrno), glob_t *pglob);
void globfree(glob_t *pglob);
struct tm *gmtime(const time_t *timer);
struct tm *gmtime_r(const time_t *timer, struct tm *result);
char *gr_idtoname(gid_t id);
gid_t gr_nametoid(char *name);
XtGrabKind grab_kind;
Window grab_window;
int grantpt(int fildes);
GripClassRec gripClassRec;
WidgetClass gripWidgetClass;
int gsignal(int signal);
int h_errno;
int h_value;
char *has_extended_src(struct obj *, unsigned __int64, __int64, __int64 *);
bool has_ic(void);
bool has_il(void);
int hascmdauth(const char *, const priv_t *);
unsigned __int64 hash_sz;
int hassysauth(int);
int havedisk(char *);
int hcreate(size_t nel);
int hcreate_r(size_t nel, struct hsearch_data *hsearch_data);
char hd_buf[];
void hdestroy(void);
void hdestroy_r(struct hsearch_data *hsearch_data);
MACRO_hdrNil hdrNil;
__int64 hdr_symptr(struct obj *);
char header[];
Dimension height;
unsigned int *height_return;
Boolean highlight;
Widget horizontal_scrollbar;
XHostAddress *host;
char *hostalias(char *name);
int hostalias_r(const char *, char *, int);
char *hostname;
ENTRY *hsearch(ENTRY item, ACTION action);
int hsearch_r(ENTRY item, ACTION action, ENTRY **target, struct hsearch_data *hsearch_data);
unsigned int htonl(unsigned int);
unsigned __int16 htons(unsigned __int16);
XcmsFloat hue;
XcmsFloat hue_angle;
double hypot(double x, double y);
float hypotf(float x, float y);
long double hypotl(long double x, long double y);
__int64 iaux;
MACRO_auxNil iauxNil;
MACRO_cfdNil icfdNil;
MACRO_chdrNil ichdrNil;
void icmp_error(struct mbuf *, int, int, struct in_addr);
void icmp_input(struct mbuf *, int);
void icmp_reflect(struct mbuf *);
void icmp_send(struct mbuf *, struct mbuf *, int);
void icmpaddstats(void);
int icmpstats(struct icmpstat *, int, int);
XTextProperty *icon_name;
size_t iconv(iconv_t cd, const char **inbuf, size_t *inbytesleft, char **outbuf, size_t *outbytesleft);
int iconv_close(iconv_t cd);
iconv_t iconv_open(const char *tocode, const char *fromcode);
int idlok(WINDOW *, bool);
int idp_abort(struct nspcb *);
int idp_ctlinput(int, caddr_t);
int idp_ctloutput(int, struct socket *, int, int, struct mbuf **);
int idp_do_route(struct ns_addr *, struct route *);
struct nspcb *idp_drop(struct nspcb *, int);
int idp_forward(struct mbuf *);
int idp_input(struct mbuf *, struct nspcb *);
int idp_output(struct nspcb *, struct mbuf *);
int idp_raw_usrreq(struct socket *, int, struct mbuf *, struct mbuf *, struct mbuf *);
int idp_undo_route(struct route *);
int idp_usrreq(struct socket *, int, struct mbuf *, struct mbuf *, struct mbuf *);
int idpip_input(struct mbuf *, struct ifnet *);
net_type ieee802_16;
unsigned __int64 ieee_get_fp_control();
int ieee_get_state_at_signal(unsigned __int64 *fp_control, unsigned __int64 *fpcr);
void ieee_ignore_state_at_signal();
void ieee_set_fp_control(unsigned __int64 fp_control);
void ieee_set_state_at_signal(unsigned __int64 fp_control, unsigned __int64 fpcr);
int if_fd;
void *if_freenameindex(struct if_nameindex *ptr);
char *if_indextoname(unsigned int ifindex, char *ifname);
struct if_nameindex *if_nameindex(void);
unsigned int if_nametoindex(const char *ifname);
MACRO_fdNil ifdNil;
MACRO_ifdTemp ifdTemp;
MACRO_ifiNil ifiNil;
char *ifop_name[64];
int ifp_to_vif(struct ifnet *);
struct in_ifaddr *ifptoia(struct ifnet *);
void igmp_fasttimo(void);
void igmp_init(void);
void igmp_input(struct mbuf *, int);
void igmp_joingroup(struct in_multi *);
void igmp_leavegroup(struct in_multi *);
void igmp_slowtimo(void);
MACRO_ilineNil ilineNil;
__int64 iline_to_line(struct obj *, struct fdr *, struct pdr *, __int64);
MACRO_ifdTemp ilnNil;
int ilogb(double x);
int ilogbf(float x);
int ilogbl(long double x);
XImage *image;
char *image_name;
char imod_form[64];
Atom *import_targets;
const struct in6_addr in6addr_any;
const struct in6_addr in6addr_loopback;
struct in_multi *in_addmulti(struct in_addr *, struct ifnet *);
void in_arpinput(struct arpcom *, struct mbuf *, struct trn_header *);
int in_broadcast(struct in_addr);
int in_canforward(struct in_addr);
int in_cksum(struct mbuf *, int);
int in_control(struct socket *, unsigned int, caddr_t, struct ifnet *);
void in_delmulti(struct in_multi *);
int in_fastpcbconnect(struct inpcb *inp, struct sockaddr_in6 *sin);
struct in_ifaddr *in_iaonnetof(u_int);
int in_ifinitia(struct ifnet *, struct in_ifaddr *, struct sockaddr_in *, int);
int in_ifinitrt(struct ifnet *, struct in_ifaddr *);
void in_ifscrub(struct ifnet *, struct in_ifaddr *);
void in_linkia(struct ifnet *, struct in_ifaddr *, int);
u_int in_lnaof(struct in_addr);
int in_localaddr(struct in6_addr *, struct rtentry *);
void in_losing(struct inpcb *);
struct in_addr in_makeaddr(u_int, u_int);
u_int in_netof(struct in_addr);
int in_pcballoc(struct socket *, struct inpcb *);
int in_pcbbind(struct inpcb *, struct mbuf *);
int in_pcbconnect(struct inpcb *, struct mbuf *);
void in_pcbdetach(struct inpcb *);
void in_pcbdisconnect(struct inpcb *);
void in_pcbfree(struct inpcb *);
struct __inpcb_hashbucket *in_pcbhashalloc(int);
void in_pcbhashdealloc(struct __inpcb_hashbucket *);
void in_pcbinsque(struct inpcb *, struct __inpcb_hashbucket *, struct inpcb *);
struct inpcb *in_pcblookup(struct inpcb *, const struct in6_addr *, u_short, const struct in6_addr *, u_short, int, struct __inpcb_hashbucket *);
struct inpcb *in_pcbmatch(struct inpcb *, const struct in6_addr *, u_short, const struct in6_addr *, u_short, struct __inpcb_hashbucket *);
void in_pcbnotify(struct inpcb *, const struct in6_addr *, u_short, const struct in6_addr *, u_short, int, void (*)());
void in_pcbremque(struct inpcb *);
int in_pcbsnapconnect(struct inpcb *, struct mbuf *, struct in_route *, struct in6_addr *, struct in6_addr *, u_short *);
void in_rtchange(struct inpcb *);
void in_setpeeraddr(struct inpcb *, struct mbuf *);
void in_setsockaddr(struct inpcb *, struct mbuf *);
void in_sockmaskof(struct in_addr, struct sockaddr_in *);
int in_wch(cchar_t *wcval);
int in_wchstr(cchar_t *wchstr);
chtype inch(void);
int inchstr(chtype *chstr);
int increment;
int *increment_return;
char *index(const char *s, int c);
MACRO_indexNil indexNil;
const char *inet6_ntoa(const struct in6_addr *, char *);
in_addr_t inet_addr(const char *string);
int inet_aton(const char *, struct in_addr *);
int inet_configure_domain(void);
in_addr_t inet_lnaof(struct in_addr net_addr);
struct in_addr inet_makeaddr(in_addr_t net_num, in_addr_t loc_addr);
char *inet_net_ntop(int, const void *, int, char *, size_t);
int inet_net_pton(int, const char *, void *, size_t);
in_addr_t inet_netof(struct in_addr net_addr);
in_addr_t inet_network(const char *string);
u_int inet_nsap_addr(const char *, u_char *, int);
char *inet_nsap_ntoa(int, const u_char *, char *);
char *inet_ntoa(struct in_addr net_addr);
const char *inet_ntop(int af, const void *src, char *dst, size_t size);
int inet_pton(int af, const char *src, void *dst);
struct class_info info_buf[100];
char info_buff[];
struct in_ifaddrh **inifaddr_halloc(int);
void inifaddr_hdealloc(struct in_ifaddrh **);
void inifaddr_hinit(void);
struct in_ifaddrh **inifaddr_hrealloc(int);
void inifaddr_hresize(void);
void init_mach(port_t rep_port);
int init_svc(void);
int init_svc_r(struct svcinfo *, struct stat *);
int initgroups(char *user, gid_t base_gid);
MACRO_initial initial_value;
void initprivs(void);
WINDOW *initscr(void);
char *initstate(unsigned int seed, char *state, size_t size);
int initstate_r(unsigned int, char *, size_t, char **, RANDOMD *);
XRectangle *ink_array_return;
int ins_wch(const cchar_t *wch);
int ins_wstr(const wchar_t *wstr);
int insch(chtype ch);
int insert_inifaddrh(struct in_addr, struct ifnet *, u_short);
struct obj *insert_obj(struct obj_list **, struct obj *);
void insque(void *element, void *pred);
int insstr(const char *str);
int inst2ip(unsigned int *inst, int instLength, unsigned int *ipAddr, int searchType, int carry);
OID *instance2oid(OID *newoid, OBJECT *obj, unsigned int *instance, int len);
int instr(char *str);
int inswch(chtype wch);
int inswstr(wchar_t *wstr);
MACRO_inta inta_addl;
MACRO_inta inta_addlv;
MACRO_inta inta_addq;
MACRO_inta inta_addqv;
MACRO_inta inta_cmpbge;
MACRO_inta inta_cmpeq;
MACRO_inta inta_cmple;
MACRO_inta inta_cmplt;
MACRO_inta inta_cmpule;
MACRO_inta inta_cmpult;
MACRO_inta inta_s4addl;
MACRO_inta inta_s4addq;
MACRO_inta inta_s4subl;
MACRO_inta inta_s4subq;
MACRO_inta inta_s8addl;
MACRO_inta inta_s8addq;
MACRO_inta inta_s8subl;
MACRO_inta inta_s8subq;
MACRO_inta inta_subl;
MACRO_inta inta_sublv;
MACRO_inta inta_subq;
MACRO_inta inta_subqv;
XtWidgetGeometry *intended;
int interp_copyout(struct execargs *, caddr_t *, caddr_t *, int *, unsigned int *);
int interpret_command_mode(struct obj *, char *, unsigned __int64 *, __int64 *, unsigned __int64 *);
unsigned __int64 interval;
MACRO_intl intl_amask;
MACRO_intl intl_and;
MACRO_intl intl_bic;
MACRO_intl intl_bis;
MACRO_intl intl_cmoveq;
MACRO_intl intl_cmovge;
MACRO_intl intl_cmovgt;
MACRO_intl intl_cmovlbc;
MACRO_intl intl_cmovlbs;
MACRO_intl intl_cmovle;
MACRO_intl intl_cmovlt;
MACRO_intl intl_cmovne;
MACRO_intl intl_eqv;
MACRO_intl intl_implver;
MACRO_intl intl_ornot;
MACRO_intl intl_xor;
MACRO_intm intm_mull;
MACRO_intm intm_mullv;
MACRO_intm intm_mulq;
MACRO_intm intm_mulqv;
MACRO_intm intm_umulh;
MACRO_intmisc intmisc_ctlz;
MACRO_intmisc intmisc_ctpop;
MACRO_intmisc intmisc_cttz;
MACRO_intmisc intmisc_ftois;
MACRO_intmisc intmisc_ftoit;
MACRO_intmisc intmisc_maxsb8;
MACRO_intmisc intmisc_maxsw4;
MACRO_intmisc intmisc_maxub8;
MACRO_intmisc intmisc_maxuw4;
MACRO_intmisc intmisc_minsb8;
MACRO_intmisc intmisc_minsw4;
MACRO_intmisc intmisc_minub8;
MACRO_intmisc intmisc_minuw4;
MACRO_intmisc intmisc_perr;
MACRO_intmisc intmisc_pklb;
MACRO_intmisc intmisc_pkwb;
MACRO_intmisc intmisc_sextb;
MACRO_intmisc intmisc_sextw;
MACRO_intmisc intmisc_unpkbl;
MACRO_intmisc intmisc_unpkbw;
int intrflush(WINDOW *, bool);
MACRO_AMASK_BIT0 ints_extbl;
MACRO_AMASK_BIT0 ints_extlh;
MACRO_AMASK_BIT0 ints_extll;
MACRO_AMASK_BIT0 ints_extqh;
MACRO_AMASK_BIT0 ints_extql;
MACRO_AMASK_BIT0 ints_extwh;
MACRO_AMASK_BIT0 ints_extwl;
MACRO_AMASK_BIT0 ints_insbl;
MACRO_AMASK_BIT0 ints_inslh;
MACRO_AMASK_BIT0 ints_insll;
MACRO_AMASK_BIT0 ints_insqh;
MACRO_AMASK_BIT0 ints_insql;
MACRO_AMASK_BIT0 ints_inswh;
MACRO_AMASK_BIT0 ints_inswl;
MACRO_AMASK_BIT0 ints_mskbl;
MACRO_AMASK_BIT0 ints_msklh;
MACRO_AMASK_BIT0 ints_mskll;
MACRO_AMASK_BIT0 ints_mskqh;
MACRO_AMASK_BIT0 ints_mskql;
MACRO_AMASK_BIT0 ints_mskwh;
MACRO_AMASK_BIT0 ints_mskwl;
MACRO_AMASK_BIT0 ints_sll;
MACRO_AMASK_BIT0 ints_sra;
MACRO_AMASK_BIT0 ints_srl;
MACRO_AMASK_BIT0 ints_zap;
MACRO_AMASK_BIT0 ints_zapnot;
chtype inwch(void);
int inwchstr(chtype *wchstr);
int inwstr(wchar_t *str);
int io_blockclear(io_handle_t dst, u_long length, u_long size);
int io_blockexchange(io_handle_t src, io_handle_t dst, u_long length, u_long size);
int io_blockread(io_handle_t src, vm_offset_t dst, u_long length, u_long size);
int io_blockwrite(vm_offset_t src, io_handle_t dst, u_long length, u_long size);
int io_copyin(io_handle_t src, vm_offset_t dst, u_long length);
int io_copyio(io_handle_t src, io_handle_t dst, u_long length);
int io_copyout(vm_offset_t src, io_handle_t dst, u_long length);
int io_zero(io_handle_t dst, u_long length);
int ioctl(int fildes, int request, ...);
u_long iohandle_to_phys(io_handle_t io_handle, __int64 flags);
MACRO_optNil ioptNil;
int ip6_addcksum(struct mbuf *, unsigned int, unsigned int, unsigned int);
int ip6_docksum(struct mbuf *, const struct in6_addr *, const struct in6_addr *, unsigned int, unsigned int, unsigned int);
unsigned int ip6_mcksum(struct mbuf *, unsigned int, unsigned int);
u_int ip6_mkcksum(const struct in6_addr *, const struct in6_addr *, unsigned int, unsigned int, u_int);
int ip6_tstcksum(struct mbuf *, const struct in6_addr *, const struct in6_addr *, unsigned int, unsigned int, unsigned int);
int ipAdvanceRdPtr(ChannelPtr, IPCard);
int ipAllocateData(ChannelPtr, IPCard, IPDataPtr *);
int ipAttachChannel(ChannelPtr);
int ipBulkFreeData(ChannelPtr, IPCard);
int ipCreateChannel(ChannelPtr, int, int, IPCard, IPCard, IPCard);
int ipDestroyChannel(ChannelPtr);
int ipEnterSection(ChannelPtr, BufDescPtr);
int ipFreeData(ChannelPtr, IPCard);
int ipLeaveSection(ChannelPtr, BufDescPtr);
int ipNoOp(int);
int ipPrivateBuffer(ChannelPtr, int *, IPDataPtr *);
int ipReceiveAtLeastData(ChannelPtr, IPCard, IPCard *, IPDataPtr *);
int ipReceiveBufferSize(ChannelPtr);
int ipReceiveData(ChannelPtr, IPCard *, IPDataPtr *);
int ipReceiveDataAvail(ChannelPtr, IPCard *, IPDataPtr *, IPCard *);
int ipSendAndAllocateData(ChannelPtr, IPCard, IPDataPtr *);
int ipSendBufferSize(ChannelPtr);
int ipSendData(ChannelPtr);
int ipSetAllocCallback(ChannelPtr, IPcallbackProc, char *);
int ipSetReceiveCallback(ChannelPtr, IPcallbackProc, char *);
int ipSpaceAvailable(ChannelPtr);
int ipUnallocateAndSendData(ChannelPtr, IPCard);
int ipUnallocateData(ChannelPtr, IPCard);
int ipWait(IPCard, IPCard);
int ip_accessfilter(struct in_afilt *, struct ip *, struct mbuf *);
ip_alloc_res *ip_alloc_2(ip_alloc_arg *, CLIENT *);
int ip_cacheadd(struct mbuf *, char *, int *);
int ip_cachecmp(char *, char *);
int ip_cachesize(void);
int ip_ctloutput(int, struct socket *, int, int, struct mbuf **);
int ip_dooptions(struct mbuf *);
void ip_drain(void);
ip_status ip_failure;
void ip_forward(struct mbuf *, int);
void ip_forwardscreen(struct mbuf *, int);
ip_status *ip_free_2(ip_addr_arg *, CLIENT *);
void ip_freemoptions(struct ip_moptions *);
int ip_getmoptions(int, struct ip_moptions *, struct mbuf **);
void ip_gwbounce(struct mbuf *, int);
void ip_init(void);
struct mbuf *ip_insertoptions(struct mbuf *, struct mbuf *, int *);
u_int ip_mcast_src(int);
int ip_mforward(struct ip *, struct ifnet *, struct mbuf *, int);
void ip_mloopback(struct ifnet *, struct mbuf *, struct sockaddr_in *, int);
int ip_mrouter_done(void);
int ip_mrouter_get(int, struct socket *, struct mbuf *);
int ip_mrouter_set(int, struct socket *, struct mbuf *);
ip_status ip_no_addresses;
ip_status ip_no_priv;
ip_status ip_no_system;
int ip_optcopy(struct ip *, struct ip *);
int ip_output(struct mbuf *, struct mbuf *, struct in_route *, int, struct ip_moptions *);
void ip_outputscreen(struct mbuf *, int, struct in_route *, int);
int ip_pcbopts(struct mbuf **, struct mbuf *);
struct mbuf *ip_reass(struct mbuf *, struct ipq *, int);
void ip_reastimo(struct ipq *);
ip_status ip_rpc;
int ip_rsvp_done(void);
int ip_rsvp_start(struct socket *);
struct in_ifaddr *ip_rtaddr(struct in_addr);
int ip_setmoptions(int, struct ip_moptions **, struct mbuf *);
void ip_slowtimo(void);
struct mbuf *ip_srcroute(void);
void ip_stripoptions(struct mbuf *, struct mbuf *, struct ipoption *);
ip_status ip_success;
ip_toname_res *ip_toname_2(ip_addr_arg *, CLIENT *);
pPDR ipd;
MACRO_pdNil ipdNil;
void ipintr(struct ifqueue *);
void ipip_input(struct mbuf *, int);
n_time iptime(void);
int is_debug_level(int stat);
bool is_linetouched(WINDOW *win, int line);
int is_starting_egid(uid_t gid);
int is_starting_euid(uid_t uid);
int is_starting_luid(uid_t uid);
int is_starting_rgid(uid_t gid);
int is_starting_ruid(uid_t uid);
int isaclprop(const char *name);
int isalnum(int c);
int isalpha(int c);
int isascii(int c);
int isastream(int fildes);
int isatty(int);
int iscntrl(int c);
int isdigit(int c);
int isfdtype(int filedes, int fd_type);
int isgraph(int c);
int islower(int c);
int isnan(double x);
int isnanf(float x);
int isnanl(long double x);
int isprint(int c);
int ispunct(int c);
MACRO_indexNil issNil;
MACRO_issNull issNull;
int isspace(int c);
int isupper(int c);
int iswalnum(wint_t wc);
int iswalpha(wint_t wc);
int iswcntrl(wint_t wc);
int iswctype(wint_t wc, wctype_t wc_prop);
int iswdigit(wint_t wc);
int iswgraph(wint_t wc);
int iswlower(wint_t wc);
int iswprint(wint_t wc);
int iswpunct(wint_t wc);
int iswspace(wint_t wc);
int iswupper(wint_t wc);
int iswxdigit(wint_t wc);
int isxdigit(int c);
MACRO_isymNil isymNil;
XmString item;
int item_count;
__int64 *item_id;
XmString *item_list;
XmbTextItem *items;
__int64 itol();
MACRO_tiNil itqMax;
int itrunc(double x);
double j0(double x);
float j0f(float x);
long double j0l(long double x);
double j1(double x);
float j1f(float x);
long double j1l(long double x);
double jn(int n, double x);
float jnf(int n, float x);
long double jnl(int n, long double x);
int join_style;
__int64 jrand48(unsigned __int16 *xsubi);
int jrand48_r(unsigned __int16 *xsubi, struct drand48_data *dp, __int64 *randval);
MACRO_jsr jsr_jmp;
MACRO_jsr jsr_jsr;
MACRO_jsr jsr_jsr_coroutine;
MACRO_jsr jsr_ret;
int kern_return_xlate(kern_return_t);
int keyboard_mode;
KeyCode keycode;
int keycode_count;
int keypad(WINDOW *, bool);
KeySym *keysym_return;
KeySym *keysyms;
int keysyms_per_keycode;
int *keysyms_per_keycode_return;
int kill(pid_t process, int signal);
char killchar(void);
int killpg(pid_t process_grp, int signal);
int knlist(struct nlist namelist);
CAT_ENT *ksm_cat_find_category(CAT_REL *cat_rel_ptr, char *name, int *cat_index);
CAT_ENT *ksm_cat_insert_category(CAT_REL *cat_rel_ptr, char *name, int *cat_index, int *cur_tbl_size, int tbl_incr);
int ksm_cat_insert_member(CAT_ENT *cat_entry, MEM_DESC *mem);
void ksm_cat_print_cat_rel(CAT_REL *cat_rel_ptr);
int ksm_cat_remove_member(CAT_ENT *cat_entry, MEM_DESC *mem);
int ksm_find_cat_mem(SET_DESC *sptr, KSM_FIND_BUF *req, size_t size, FIND_INFO *ptr, MEM_DESC **mem);
int ksm_find_hier_mem(SET_DESC *sptr, KSM_FIND_BUF *req, size_t size, FIND_INFO *ptr, MEM_DESC **mem);
int ksm_find_member(KSM_FIND_BUF *buf, size_t size);
int ksm_find_mib_mem(SET_DESC *sptr, KSM_FIND_BUF *req, size_t size, FIND_INFO *ptr, MEM_DESC **mem);
int ksm_get_attributes(KSM_MEM_REQ_BUF *memreq, cfg_attr_t *attrs, uint nattrs);
HIER_PTR *ksm_hier_find_by_instance(HIER_REL *hier_rel_ptr, __int64 id, int instance);
HIER_PTR *ksm_hier_find_by_owner_ds(HIER_REL *hier_rel_ptr, void *owner_ds);
HIER_PTR *ksm_hier_find_child(HIER_PTR *hier_ptr, MEM_DESC *mem);
HIER_PTR *ksm_hier_insert_member(HIER_PTR *hier_ptr, MEM_DESC *mem);
HIER_PTR *ksm_hier_insert_root(HIER_REL *hier_rel_ptr, MEM_DESC *mem);
void ksm_hier_print_hier_rel(HIER_REL *hier_rel_ptr);
int ksm_hier_remove_member(HIER_REL *hier_rel_ptr, HIER_PTR *hier_ptr, MEM_DESC *mem);
MIB_PTR *ksm_mib_find_member(MIB_REL *mib_rel_ptr, MEM_DESC *mem);
int ksm_mib_insert_member(MIB_REL *mib_rel_ptr, MEM_DESC *mem);
void ksm_mib_print_mib_rel(MIB_REL *mib_rel_ptr);
int ksm_mib_remove_member(MIB_REL *mib_rel_ptr, MEM_DESC *mem);
int ksm_register_member(char *setname, MEM_DESC *m);
int ksm_register_set(SET_DESC *s);
int ksm_set_attributes(KSM_MEM_REQ_BUF *memreq, cfg_attr_t *attrs, uint nattrs);
int ksm_unregister_member(char *setname, MEM_DESC *m);
char *l64a(__int64 l);
char *l_ptr;
LabelClassRec labelClassRec;
WidgetClass labelWidgetClass;
__int64 labs(__int64 i);
MACRO_langC langAda;
MACRO_langC langAssembler;
MACRO_langC langBliss;
MACRO_langC langC;
MACRO_langC langCobol;
MACRO_langC langCxx;
MACRO_langC langDECCxx;
MACRO_langC langFortran;
MACRO_langC langFortran90;
MACRO_langC langMIPSCxx;
MACRO_langC langMachine;
MACRO_langC langMax;
MACRO_langC langNil;
MACRO_langC langPascal;
MACRO_langC langPl1;
MACRO_langC langStdc;
unsigned __int8 layout_direction;
int lchown(const char *path, uid_t owner, gid_t group);
void lcong48(unsigned __int16 *param);
int lcong48_r(unsigned __int16 *param, struct drand48_data *dp);
int ldaclose(elf32_LDFILE *);
elf32_LDFILE *ldaopen(char *, elf32_LDFILE *);
int ldclose(elf32_LDFILE *);
double ldexp(double y, int n);
float ldexpf(float y, int n);
long double ldexpl(long double y, int n);
int ldfhread(elf32_LDFILE *, struct filehdr *);
elf32_LDFILE *ldfopen(char *, elf32_LDFILE *, unsigned int);
int ldfread(void *, int, int, elf32_LDFILE *);
int ldfseek(elf32_LDFILE *, int, int);
pAUXU ldgetaux(elf32_LDFILE *, int);
char *ldgetname(elf32_LDFILE *, pSYMR);
__int64 ldgetpd(elf32_LDFILE *, int, pPDR);
int ldgetsymstr(elf32_LDFILE *, pSYMR, int, char *);
ldiv_t *ldiv(ldiv_t *__return_ptr __struct_ptr retstr, __int64 numerator, __int64 denominator);
int ldlinit(elf32_LDFILE *, __int64);
int ldlitem(elf32_LDFILE *, unsigned __int16, LINER *);
int ldlread(elf32_LDFILE *, __int64, unsigned __int16, LINER *);
int ldlseek(elf32_LDFILE *, unsigned __int16);
int ldnlseek(elf32_LDFILE *, char *);
int ldnreloc(elf32_LDFILE *, struct scnhdr *);
int ldnrseek(elf32_LDFILE *, char *);
int ldnshread(elf32_LDFILE *, char *, struct scnhdr *);
int ldnsseek(elf32_LDFILE *, char *);
int ldohread(elf32_LDFILE *, AOUTHDR *);
int ldohseek(elf32_LDFILE *);
elf32_LDFILE *ldopen(char *, elf32_LDFILE *);
int ldr_atexit(void);
int ldr_inq_module(ldr_process_t process, ldr_module_t mod_id, ldr_module_info_t *info, size_t info_size, size_t *ret_size);
int ldr_inq_region(ldr_process_t process, ldr_module_t mod_id, ldr_region_t region, ldr_region_info_t *info, size_t info_size, size_t *ret_size);
ldr_process_t ldr_kernel_process(void);
ldr_process_t ldr_my_process(void);
int ldr_next_module(ldr_process_t process, ldr_module_t *mod_id_ptr);
int ldr_xattach(ldr_process_t process);
int ldr_xdetach(ldr_process_t process);
int ldr_xentry(ldr_process_t process, ldr_module_t mod_id, ldr_entry_pt_t *entry_ptr);
int ldr_xload(ldr_process_t process, char *file_pathname, ldr_load_flags_t load_flags, ldr_module_t *mod_id_ptr);
int ldr_xlookup_package(ldr_process_t process, char *package_name, char *symbol_name, void **symbol_addr_ptr);
int ldr_xunload(ldr_process_t process, ldr_module_t mod_id);
int ldreadst(elf32_LDFILE *, int);
int ldrseek(elf32_LDFILE *, unsigned __int16);
int ldshread(elf32_LDFILE *, int, struct scnhdr *);
int ldsseek(elf32_LDFILE *, unsigned __int16);
int ldtbindex(elf32_LDFILE *);
int ldtbread(elf32_LDFILE *, int, pSYMR);
int ldtbseek(elf32_LDFILE *);
$003F63A829E52477BDB4080710A1139D leaf;
int leaveok(WINDOW *, bool);
XmTextPosition *left;
Dimension left_right_margin;
int legal_vif_num(int);
unsigned __int64 length;
unsigned __int64 *length_return;
void *lfind(const void *key, const void *base, size_t *nelp, size_t width, int (*compar)(const void *, const void *));
double lgamma(double x);
float lgammaf(float x);
long double lgammal(long double x);
MACRO_lineNil lineNil;
int line_style;
unsigned int line_width;
__int64 linecnt;
int link(const char *path1, const char *path2);
void link_addr(const char *, struct sockaddr_dl *);
char *link_ntoa(const struct sockaddr_dl *);
int link_ntoa_r(const struct sockaddr_dl *, char *, int);
int lio_listio(int mode, struct aiocb **list, int nent, struct sigevent *sig);
char **list;
ListClassRec listClassRec;
WidgetClass listWidgetClass;
unsigned __int64 list_last(struct obj_list *);
int listen(int socket, int backlog);
int lmf_license_info(char *, char *, char *, char *, int *);
int lmf_probe_license(char *, char *, ver_t *, time_t, unsigned int);
int lmf_release_license(char *, char *, int);
int lmf_test_license(char *, char *, ver_t *, time_t, unsigned int);
void loadnamepair(mask_t *, int, const char *, const struct namepair *, const char *, int, const char *);
char *loc1;
char *loc2;
int loc_aton(const char *ascii, u_char *binary);
const char *loc_ntoa(const u_char *binary, char *ascii);
struct lconv *localeconv(void);
struct tm *localtime(const time_t *timer);
struct tm *localtime_r(const time_t *timer, struct tm *result);
int locked_out(struct pr_passwd *);
int locked_out_acct_es(struct es_passwd *, struct es_default *, int, ...);
int locked_out_es(struct es_passwd *);
int lockf(int filedes, int request, off_t size);
int locking_on;
char *locs;
double log(double x);
double log10(double x);
float log10f(float x);
long double log10l(long double x);
double log1p(double y);
float log1pf(float y);
long double log1pl(long double y);
double log2(double x);
float log2f(float x);
long double log2l(long double x);
double logb(double x);
float logbf(float x);
long double logbl(long double x);
float logf(float x);
XRectangle *logical_array_return;
long double logl(long double x);
__int64 long_length;
__int64 long_offset;
void longjmp(jmp_buf environment, int value);
char *longname(void);
XtLoseSelectionProc lose_selection;
__int64 lrand48(void);
int lrand48_r(struct drand48_data *dp, __int64 *randval);
void *lsearch(const void *key, void *base, size_t *nelp, size_t width, int (*compar)(const void *, const void *));
off_t lseek(int filedes, off_t offset, int whence);
int lstat(const char *path, struct stat *buffer);
void mach_error(char *str, mach_error_t error_value);
char *mach_error_string(mach_error_t error_value);
char *mach_error_type(mach_error_t error_value);
kern_return_t mach_ports_lookup(task_t target_task, port_array_t *init_port_set, unsigned int *init_port_setCnt);
kern_return_t mach_ports_register(task_t target_task, port_array_t init_port_set, unsigned int init_port_setCnt);
int madvise(caddr_t addr, size_t len, int behav);
MACRO_GLEVEL_3 magicSym;
MACRO_magicSym magicSym_cia;
int make_transition_files(const char *, char **, char **);
void makecontext(ucontext_t *ucp, void (*func)(), int argc, ...);
struct mallinfo *mallinfo(struct mallinfo *__return_ptr __struct_ptr retstr);
void *malloc(size_t size);
size_t mallocblksize(void *);
int mallopt(int, int);
unsigned __int8 map[];
int map_button(unsigned __int64);
unsigned int *mask_return;
unsigned __int64 *max_format_name_length;
int maxnames;
int mb_cur_max;
int mblen(const char *mbs, size_t n);
size_t mbrlen(const char *mbs, size_t n, mbstate_t *ps);
size_t mbrtowc(wchar_t *pwc, const char *s, size_t n, mbstate_t *ps);
char *mbsadvance(const char *);
char *mbscat(char *, char *);
char *mbschr(const char *, const mbchar_t);
int mbscmp(char *, char *);
char *mbscpy(char *, char *);
int mbsinit(const mbstate_t *ps);
char *mbsinvalid(const char *);
size_t mbslen(const char *);
char *mbsncat(char *, const char *, size_t);
int mbsncmp(char *, char *, size_t);
char *mbsncpy(char *, char *, size_t);
char *mbspbrk(char *, char *);
char *mbsrchr(char *, mbchar_t);
size_t mbsrtowcs(wchar_t *pwcs, const char **s, size_t n, mbstate_t *ps);
int mbstoint(char *);
mbchar_t mbstomb(const char *mbs);
size_t mbstowcs(wchar_t *pwcs, const char *s, size_t n);
int mbswidth(const char *, size_t);
int mbtowc(wchar_t *pwc, const char *s, size_t n);
MC_STAT_HDR *mc_alloc_element_status(MC_CHANGER *mc, MC_TYPES type, int start, int num);
MC_ERROR_CODE mc_alloc_map(MC_CHANGER *mc, MC_TYPES type, MC_MAP **map);
MC_ERROR_CODE mc_allow_removal(MC_CHANGER *mc);
MC_ERROR_CODE mc_change_definition(MC_CHANGER *mc);
MC_ERROR_CODE mc_close(MC_CHANGER *mc);
void mc_debug_off();
void mc_debug_on();
const char *mc_device_name(MC_CHANGER *mc);
MC_ERROR_CODE mc_diag_list(MC_CHANGER *mc, MC_DIAG_ENT **diag_list);
MC_ERROR_CODE mc_diag_run(MC_CHANGER *mc, char *diag_str, char *diag_args);
MC_ERROR_CODE mc_drive_eject(MC_CHANGER *mc, int drive_num);
const char *mc_drive_name(MC_CHANGER *mc, int drive_num);
MC_ERROR_CODE mc_drive_tur(MC_CHANGER *mc, int drive_num);
const char *mc_drive_type(MC_CHANGER *mc);
MC_ERROR_CODE mc_element_status(MC_CHANGER *mc, MC_STAT_HDR *mcshdr);
const char *mc_error_to_str(const MC_ERROR_CODE mc_err);
MC_BOOL mc_exchange_capability(MC_CHANGER *mc, MC_TYPES src, MC_TYPES dest);
MC_ERROR_CODE mc_exchange_medium(MC_CHANGER *mc, element_addr_t *src_id, element_addr_t *dest1_id, element_addr_t *dest2_id, element_addr_t *tport_elmnt, int invert1, int invert2);
const char *mc_extended_error_str(MC_CHANGER *mc, const MC_ERROR_CODE mc_err);
int mc_fd();
MC_ERROR_CODE mc_free_element_status(MC_CHANGER *mc, MC_STAT_HDR *mcshdr);
MC_MAP *mc_get_map(MC_CHANGER *mc, MC_TYPES type);
MC_STAT *mc_get_stats(MC_STAT_HDR *mcshdr);
int mc_has_auto_eject(MC_CHANGER *mc);
int mc_has_barcode(MC_CHANGER *mc);
int mc_has_capabilities_info(MC_CHANGER *mc);
int mc_has_change_definition(MC_CHANGER *mc);
int mc_has_display(MC_CHANGER *mc);
int mc_has_element_status(MC_CHANGER *mc);
int mc_has_exchange_medium(MC_CHANGER *mc);
int mc_has_init_element(MC_CHANGER *mc);
int mc_has_log_select_sense(MC_CHANGER *mc);
int mc_has_mode_select_sense(MC_CHANGER *mc);
int mc_has_position_to_element(MC_CHANGER *mc);
int mc_has_prevent_allow(MC_CHANGER *mc);
int mc_has_read_diagnostic(MC_CHANGER *mc);
int mc_has_release_reserve(MC_CHANGER *mc);
int mc_has_send_volume_tag(MC_CHANGER *mc);
int mc_has_two_sided(MC_CHANGER *mc);
int mc_has_volumetag(MC_CHANGER *mc);
MC_ERROR_CODE mc_init_element(MC_CHANGER *mc, int start, int num);
MC_ERROR_CODE mc_inquiry(MC_CHANGER *mc, struct inquiry_info *inqbuf);
const char *mc_interface_args(MC_CHANGER *mc);
const char *mc_interface_file(MC_CHANGER *mc);
const char *mc_interface_name(MC_CHANGER *mc);
MC_ERROR_CODE mc_log_list(MC_CHANGER *mc);
MC_ERROR_CODE mc_log_read(MC_CHANGER *mc);
MC_ERROR_CODE mc_log_upload(MC_CHANGER *mc);
MC_MAP *mc_map_next(MC_MAP *);
int mc_map_range(MC_MAP *map);
int mc_map_start(MC_MAP *map);
MC_ERROR_CODE mc_map_to_phys(MC_CHANGER *mc, element_addr_t *obj, int *addr);
MC_ERROR_CODE mc_map_to_virt(MC_CHANGER *mc, element_addr_t *obj, int addr);
MC_ERROR_CODE mc_mode(MC_CHANGER *mc);
MC_BOOL mc_move_capability(MC_CHANGER *mc, MC_TYPES src, MC_TYPES dest);
MC_ERROR_CODE mc_move_medium(MC_CHANGER *mc, element_addr_t *src_obj, element_addr_t *dest_obj, element_addr_t *tport_obj, int invert);
MC_STAT *mc_next_stats(MC_STAT *mc);
int mc_num_type(MC_CHANGER *mc, MC_TYPES element_type);
MC_ERROR_CODE mc_open(const char *name, MC_CHANGER **mc);
MC_ERROR_CODE mc_position_element(MC_CHANGER *mc, element_addr_t *element_obj);
MC_ERROR_CODE mc_prevent_removal(MC_CHANGER *mc);
MC_ERROR_CODE mc_release_all(MC_CHANGER *mc);
MC_ERROR_CODE mc_release_all_tparty(MC_CHANGER *mc, int tparty);
MC_ERROR_CODE mc_release_element(MC_CHANGER *mc, int elist);
MC_ERROR_CODE mc_release_element_tparty(MC_CHANGER *mc, int elist, int tparty);
MC_ERROR_CODE mc_reserve_all(MC_CHANGER *mc);
MC_ERROR_CODE mc_reserve_all_tparty(MC_CHANGER *mc, int tparty);
MC_ERROR_CODE mc_reserve_element(MC_CHANGER *mc, int elist);
MC_ERROR_CODE mc_reserve_element_tparty(MC_CHANGER *mc, int elist, int tparty);
MC_ERROR_CODE mc_send_volume_tag(MC_CHANGER *mc);
void mc_set_auto_eject(MC_CHANGER *mc, MC_BOOL bool);
void mc_set_barcode(MC_CHANGER *mc, MC_BOOL bool);
void mc_set_capabilities_info(MC_CHANGER *mc, MC_BOOL bool);
void mc_set_change_definition(MC_CHANGER *mc, MC_BOOL bool);
MC_ERROR_CODE mc_set_device_name(MC_CHANGER *mc, const char *dev_name);
void mc_set_display(MC_CHANGER *mc, MC_BOOL bool);
MC_ERROR_CODE mc_set_drive_name(MC_CHANGER *mc, int drive_num, char *name);
MC_ERROR_CODE mc_set_drive_type(MC_CHANGER *mc, const char *drive_type);
void mc_set_element_status(MC_CHANGER *mc, MC_BOOL bool);
void mc_set_exchange_medium(MC_CHANGER *mc, MC_BOOL bool);
void mc_set_init_element(MC_CHANGER *mc, MC_BOOL bool);
void mc_set_init_element_status(MC_CHANGER *mc, MC_BOOL bool);
MC_ERROR_CODE mc_set_interface_args(MC_CHANGER *mc, const char *if_args);
MC_ERROR_CODE mc_set_interface_file(MC_CHANGER *mc, const char *if_file);
MC_ERROR_CODE mc_set_interface_name(MC_CHANGER *mc, const char *if_name);
void mc_set_log_select_sense(MC_CHANGER *mc, MC_BOOL bool);
MC_ERROR_CODE mc_set_map(MC_CHANGER *mc, MC_TYPES type, MC_MAP *map);
MC_ERROR_CODE mc_set_map_next(MC_MAP *map, MC_MAP *next_map);
int mc_set_map_range(MC_MAP *map, int range);
int mc_set_map_start(MC_MAP *map, int start);
void mc_set_mode_select_sense(MC_CHANGER *mc, MC_BOOL bool);
int mc_set_num_elements(MC_CHANGER *mc, MC_TYPES element_type, int num);
void mc_set_position_to_element(MC_CHANGER *mc, MC_BOOL bool);
void mc_set_prevent_allow(MC_CHANGER *mc, MC_BOOL bool);
void mc_set_read_diagnostic(MC_CHANGER *mc, MC_BOOL bool);
void mc_set_release_reserve(MC_CHANGER *mc, MC_BOOL bool);
void mc_set_send_volume_tag(MC_CHANGER *mc, MC_BOOL bool);
void mc_set_two_sided(MC_CHANGER *mc, MC_BOOL bool);
void mc_set_volumetag(MC_CHANGER *mc, MC_BOOL bool);
int mc_stat_access(MC_STAT *mc_stat);
int mc_stat_avoltag(MC_STAT *mc_stat, char **avoltag);
int mc_stat_except(MC_STAT *mc_stat, int *asc, int *ascq);
int mc_stat_full(MC_STAT *mc_stat);
int mc_stat_impexp(MC_STAT *mc_stat);
int mc_stat_invert(MC_STAT *mc_stat);
int mc_stat_pvoltag(MC_STAT *mc_stat, char **pvoltag);
void mc_stat_set_access(MC_STAT *mc_stat, int access);
void mc_stat_set_avoltag(MC_STAT *mc_stat, char *avoltag);
void mc_stat_set_except(MC_STAT *mc_stat, int asc, int ascq);
void mc_stat_set_full(MC_STAT *mc_stat, MC_BOOL full);
void mc_stat_set_impexp(MC_STAT *mc_stat, MC_BOOL impexp);
void mc_stat_set_invert(MC_STAT *mc_stat, MC_BOOL invert);
void mc_stat_set_pvoltag(MC_STAT *mc_stat, char *pvoltag);
void mc_stat_set_source(MC_STAT *mc_stat, int phys_addr);
void mc_stat_set_vendor(MC_STAT *mc_stat, char *vendor);
int mc_stat_source(MC_STAT *mc_stat, int *phys_addr);
int mc_stat_vendor(MC_STAT *mc_stat, char **vendor);
MC_BOOL mc_storage_capability(MC_CHANGER *mc, MC_TYPES src);
MC_ERROR_CODE mc_vendor_extension(MC_CHANGER *mc, int argc, char **argv);
MC_ERROR_CODE mc_voltag_to_element(MC_CHANGER *mc);
OCT *mem2oct(OCT *newoid, char *buffer, int len);
void *memccpy(void *s1, const void *s2, int c, size_t n);
void *memchr(const void *s, int c, size_t n);
int memcmp(const void *s1, const void *s2, size_t n);
int memcntl(caddr_t addr, size_t len, int cmd, caddr_t arg, int attr, int mask);
void *memcpy(void *s1, const void *s2, size_t n);
int memlk(int, void *, size_t);
void *memmove(void *s1, const void *s2, size_t n);
void *memset(void *s, int c, size_t n);
int memunlk(int, void *, size_t);
MenuButtonClassRec menuButtonClassRec;
WidgetClass menuButtonWidgetClass;
Widget menu_bar;
String message;
char *message_data;
int method_class;
char *mfop_name[64];
ulong mgr_id;
KeyCode *min_keycode_return;
MACRO_misc misc_ecb;
MACRO_misc misc_excb;
MACRO_misc misc_fetch;
MACRO_misc misc_fetch_m;
MACRO_misc misc_mb;
MACRO_misc misc_rc;
MACRO_misc misc_rpcc;
MACRO_misc misc_rs;
MACRO_misc misc_trapb;
MACRO_misc misc_wh64;
MACRO_misc misc_wmb;
int *missing_charset_count_return;
char ***missing_charset_list_return;
int mkdir(const char *path, mode_t mode);
int mkfifo(const char *path, mode_t mode);
int mknod(const char *path, int mode, dev_t device);
int mkstemp(char *);
char *mktemp(char *template);
time_t mktime(struct tm *timeptr);
timer_t mktimer(int clock_type, int notify_type, void *reserved);
int mlock(const void *, size_t);
int mlockall(int);
void *mmap(void *addr, size_t len, int prot, int flags, int filedes, off_t off);
char *mnt_names[];
int mode;
double modf(double x, double *n);
float modff(float x, float *n);
long double modfl(long double x, long double *n);
XDevice *modifier_device;
Modifiers modifiers;
Modifiers *modifiers_return;
void modify_user_symbol(__int64, int, int, struct obj_type *, __int64);
XModifierKeymap *modmap;
int moncontrol(int mode);
int monitor(caddr_t lowpc, caddr_t highpc, char *buffer, size_t bufsiz, size_t nfunc);
void monitor_signal(int signal);
int monstartup(caddr_t lowpc, caddr_t highpc);
int mount(char *spec, char *dir, int mflag, int fstyp, char *dataptr, int datalen);
int mouse_off(__int64);
int mouse_on(__int64);
int mouse_set(__int64);
int move(int y, int x);
void mpc_destroy(void);
int mpc_in_parallel_region(void);
int mpc_maxnumthreads(void);
int mpc_my_threadnum(void);
int mpc_numthreads(void);
int mprotect(void *addr, size_t len, int prot);
int mq_close(mqd_t);
int mq_getattr(mqd_t, const struct mq_attr *);
int mq_notify(mqd_t, const struct sigevent *);
mqd_t mq_open(const char *, int, ...);
ssize_t mq_receive(mqd_t, char *, size_t, unsigned int *);
int mq_send(mqd_t, const char *ptr, size_t, unsigned int);
int mq_setattr(mqd_t, const struct mq_attr *, struct mq_attr *);
int mq_unlink(const char *);
__int64 mrand48(void);
int mrand48_r(struct drand48_data *dp, __int64 *randval);
void mroute_expire_upcalls(void);
int mrt_ioctl(int, caddr_t);
void mrtaddstats(void);
int mrtstats(struct mrtstat *, int, int);
msemaphore *msem_init(msemaphore *sem, int initial_value);
int msem_lock(msemaphore *sem, int condition);
int msem_remove(msemaphore *sem);
int msem_unlock(msemaphore *sem, int condition);
msg_return_t msg_receive(msg_header_t *header, msg_option_t option, msg_timeout_t timeout);
msg_return_t msg_rpc(msg_header_t *header, msg_option_t option, msg_size_t rcv_size, msg_timeout_t send_timeout, msg_timeout_t rcv_timeout);
msg_return_t msg_send(msg_header_t *header, msg_option_t option, msg_timeout_t timeout);
int msgctl(int msqid, int cmd, struct msqid_ds *buf);
int msgget(key_t key, int msgflg);
char *msgpath;
int msgrcv(int msqid, void *msgp, size_t msgsz, __int64 msgtyp, int msgflg);
int msgsnd(int msqid, const void *msgp, size_t msgsz, int msgflg);
char *msgvc1;
char *msgvc2;
char *msgvc3;
int msgvi1;
int msgvi2;
__int64 msgvl1;
__int64 msgvl2;
int msgvt1;
int msgvt2;
int msgvt3;
int msync(void *addr, size_t len, int flags);
MultiSinkClassRec multiSinkClassRec;
WidgetClass multiSinkObjectClass;
MultiSrcClassRec multiSrcClassRec;
WidgetClass multiSrcObjectClass;
int munlock(const void *, size_t);
int munlockall(void);
int munmap(void *addr, size_t len);
MACRO_mvOnly mvExcept;
MACRO_mvOnly mvOnly;
MACRO_mvOnly mvRename;
int mvalid(caddr_t addr, size_t len, int prot);
int mvprintw(int, int, char *, ...);
int mvscanw(int, int, char *, ...);
int mvwin(WINDOW *, int, int);
int mvwprintw(WINDOW *, int, int, char *, ...);
int mvwscanw(WINDOW *, int, int, char *, ...);
char myhostname[];
int n;
String name;
XrmNameList name_prefix;
String *name_return;
port_t name_server_port;
int namelen;
String names;
int nametopriv(char *);
int nanosleep(const struct timespec *, struct timespec *);
int nbra;
int nbt2_softc;
int nbt2_types;
int nbt_softc;
int nbt_types;
int nbytes;
int nchars;
unsigned int *nchildren_return;
unsigned int ncolors;
int *ndevices_return;
int ndirs;
double neg(double x);
void nerror(const char *);
int netaddstatinterval;
unsigned int netaddstattime;
XmString *new_items;
int *new_major;
int *new_minor;
int newkey(char *, int, int);
WINDOW *newpad(int nlines, int ncols);
int newprocedure(unsigned __int64, __int64, __int64, __int64, __int64);
SCREEN *newscreen(char *, int, int, int, FILE *, FILE *);
__int64 newsymbol(char *, int, int, struct obj_type *, __int64);
SCREEN *newterm(char *, FILE *, FILE *);
WINDOW *newwin(int, int, int, int);
__int64 next_line(void);
double nextafter(double x, double y);
float nextafterf(float x, float y);
long double nextafterl(long double x, long double y);
datum *nextkey(datum *__return_ptr __struct_ptr retstr, datum key);
ACCESS3res *nfsproc3_access_3();
COMMIT3res *nfsproc3_commit_3();
CREATE3res *nfsproc3_create_3();
FSINFO3res *nfsproc3_fsinfo_3();
FSSTAT3res *nfsproc3_fsstat_3();
GETATTR3res *nfsproc3_getattr_3();
LINK3res *nfsproc3_link_3();
LOOKUP3res *nfsproc3_lookup_3();
MKDIR3res *nfsproc3_mkdir_3();
MKNOD3res *nfsproc3_mknod_3();
void *nfsproc3_null_3();
PATHCONF3res *nfsproc3_pathconf_3();
READ3res *nfsproc3_read_3();
READDIR3res *nfsproc3_readdir_3();
READDIRPLUS3res *nfsproc3_readdirplus_3();
READLINK3res *nfsproc3_readlink_3();
REMOVE3res *nfsproc3_remove_3();
RENAME3res *nfsproc3_rename_3();
RMDIR3res *nfsproc3_rmdir_3();
SETATTR3res *nfsproc3_setattr_3();
SYMLINK3res *nfsproc3_symlink_3();
WRITE3res *nfsproc3_write_3();
int nftw(const char *path, int (*function)(const char *, const struct stat *, int, struct FTW *), int depth, int flags);
int nice(int increment);
double nint(double x);
float nintf(float x);
long double nintl(long double x);
int nitems;
int *nitems_return;
char *nl_langinfo(nl_item item);
char *nlgetamsg(const char *, int, int, const char *);
int nlist(const char *, struct nlist *);
int nmap;
int nocbreak(void);
int nodelay(WINDOW *, bool);
Boolean nonmaskable;
int noraw(void);
XSizeHints *normal_hints;
Boolean notify;
__int64 nrand48(unsigned __int16 *xsubi);
int nrand48_r(unsigned __int16 *xsubi, struct drand48_data *dp, __int64 *randval);
struct ns_addr *ns_addr(struct ns_addr *__return_ptr __struct_ptr retstr, const char *);
__ns_class ns_c_any;
__ns_class ns_c_chaos;
__ns_class ns_c_hs;
__ns_class ns_c_in;
__ns_class ns_c_max;
__ns_class ns_c_none;
u_short ns_cksum(struct mbuf *, int);
int ns_config();
int ns_control(struct socket *, int, caddr_t, struct ifnet *);
int ns_echo(struct mbuf *);
int ns_err_input(struct mbuf *);
int ns_err_x(int);
int ns_error(struct mbuf *, int, int);
__ns_flag ns_f_aa;
__ns_flag ns_f_ad;
__ns_flag ns_f_cd;
__ns_flag ns_f_max;
__ns_flag ns_f_opcode;
__ns_flag ns_f_qr;
__ns_flag ns_f_ra;
__ns_flag ns_f_rcode;
__ns_flag ns_f_rd;
__ns_flag ns_f_tc;
__ns_flag ns_f_z;
int ns_format_ttl(u_long, char *, size_t);
u_int ns_get16(const u_char *);
in_addr_t ns_get32(const u_char *);
struct ns_ifaddr *ns_iaonnetof(struct ns_addr *);
int ns_ifinit(struct ifnet *, struct ns_ifaddr *, struct sockaddr_ns *, int);
int ns_ifscrub(struct ifnet *, struct ns_ifaddr *);
int ns_init(void);
int ns_initparse(const u_char *, int, ns_msg *);
int ns_name_compress(const char *, u_char *, size_t, const u_char **, const u_char **);
int ns_name_ntop(const u_char *, char *, size_t);
int ns_name_pack(const u_char *, u_char *, int, const u_char **, const u_char **);
int ns_name_pton(const char *, u_char *, size_t);
int ns_name_skip(const u_char **, const u_char *);
int ns_name_uncompress(const u_char *, const u_char *, const u_char *, char *, size_t);
int ns_name_unpack(const u_char *, const u_char *, const u_char *, u_char *, size_t);
char *ns_ntoa(struct ns_addr);
int ns_ntoa_r(struct ns_addr, char *, int);
__ns_opcode ns_o_iquery;
__ns_opcode ns_o_max;
__ns_opcode ns_o_notify;
__ns_opcode ns_o_query;
__ns_opcode ns_o_status;
__ns_opcode ns_o_update;
int ns_output(struct mbuf *, struct route *, int);
int ns_parse_ttl(const char *, u_long *);
int ns_parserr(ns_msg *, ns_sect, int, ns_rr *);
int ns_pcballoc(struct socket *, struct nspcb *);
int ns_pcbbind(struct nspcb *, struct mbuf *);
int ns_pcbconnect(struct nspcb *, struct mbuf *);
int ns_pcbdetach(struct nspcb *);
int ns_pcbdisconnect(struct nspcb *);
struct nspcb *ns_pcblookup(struct ns_addr *, u_short, int);
int ns_pcbnotify(struct ns_addr *, int, int (*)(), __int64);
int ns_printhost(struct ns_addr *);
void ns_put16(u_int, u_char *);
void ns_put32(in_addr_t, u_char *);
__ns_rcode ns_r_formerr;
__ns_rcode ns_r_max;
__ns_rcode ns_r_noerror;
__ns_rcode ns_r_notauth;
__ns_rcode ns_r_notimpl;
__ns_rcode ns_r_notzone;
__ns_rcode ns_r_nxdomain;
__ns_rcode ns_r_nxrrset;
__ns_rcode ns_r_refused;
__ns_rcode ns_r_servfail;
__ns_rcode ns_r_yxdomain;
__ns_rcode ns_r_yxrrset;
int ns_rtchange(struct nspcb *);
__ns_sect ns_s_an;
__ns_sect ns_s_ar;
__ns_sect ns_s_max;
__ns_sect ns_s_ns;
__ns_sect ns_s_pr;
__ns_sect ns_s_qd;
__ns_sect ns_s_ud;
__ns_sect ns_s_zn;
int ns_setpeeraddr(struct nspcb *, struct mbuf *);
int ns_setsockaddr(struct nspcb *, struct mbuf *);
int ns_sprintrr(const ns_msg *, const ns_rr *, const char *, const char *, char *, size_t);
int ns_sprintrrf(const u_char *, size_t, const char *, ns_class, ns_type, u_long, const u_char *, size_t, const char *, const char *, char *, size_t);
__ns_type ns_t_a;
__ns_type ns_t_aaaa;
__ns_type ns_t_afsdb;
__ns_type ns_t_any;
__ns_type ns_t_atma;
__ns_type ns_t_axfr;
__ns_type ns_t_cname;
__ns_type ns_t_eid;
__ns_type ns_t_gpos;
__ns_type ns_t_hinfo;
__ns_type ns_t_isdn;
__ns_type ns_t_ixfr;
__ns_type ns_t_key;
__ns_type ns_t_loc;
__ns_type ns_t_maila;
__ns_type ns_t_mailb;
__ns_type ns_t_max;
__ns_type ns_t_mb;
__ns_type ns_t_md;
__ns_type ns_t_mf;
__ns_type ns_t_mg;
__ns_type ns_t_minfo;
__ns_type ns_t_mr;
__ns_type ns_t_mx;
__ns_type ns_t_naptr;
__ns_type ns_t_nimloc;
__ns_type ns_t_ns;
__ns_type ns_t_nsap;
__ns_type ns_t_nsap_ptr;
__ns_type ns_t_null;
__ns_type ns_t_nxt;
__ns_type ns_t_ptr;
__ns_type ns_t_px;
__ns_type ns_t_rp;
__ns_type ns_t_rt;
__ns_type ns_t_sig;
__ns_type ns_t_soa;
__ns_type ns_t_srv;
__ns_type ns_t_txt;
__ns_type ns_t_wks;
__ns_type ns_t_x25;
__ns_update_operation ns_uop_add;
__ns_update_operation ns_uop_delete;
__ns_update_operation ns_uop_max;
int ns_watch_output(struct mbuf *, struct ifnet *);
int nsintr(void);
int nsip_ctlinput(int, struct sockaddr *);
int nsip_free(struct ifnet *);
int nsip_route(struct mbuf *);
int nsip_rtchange(struct in_addr *);
struct ifnet_en *nsipattach(void);
int nsipioctl(struct ifnet *, int, caddr_t);
int nsipoutput(struct ifnet_en *, struct mbuf *, struct sockaddr *);
int nsipstart(struct ifnet *);
u_long nstime(void);
unsigned int ntohl(unsigned int);
unsigned __int16 ntohs(unsigned __int16);
int ntp_gettime(struct ntptimeval *tp);
MACRO_ModeBitsShift numInputClasses;
Cardinal num_actions;
Cardinal *num_actions_return;
Cardinal num_args;
int num_bytes;
int *num_chars_return;
Cardinal *num_child_returns;
int num_codes;
Cardinal *num_dpy_return;
Cardinal num_export_targets;
Cardinal num_import_targets;
Cardinal num_options;
Cardinal *num_params;
Cardinal num_protocols;
Cardinal num_resources;
Cardinal *num_resources_return;
Cardinal num_substitutions;
Cardinal num_transfers;
int num_valuators;
unsigned __int8 num_values;
char *numcodes[];
char *numfnames[];
char *numnames[];
int o_integer(VARBIND *vb, OBJECT *obj, unsigned __int64 value);
int o_octet(VARBIND *vb, OBJECT *obj, OCT *oct);
int o_oid(VARBIND *vb, OBJECT *obj, OID *oid);
int o_string(VARBIND *vb, OBJECT *obj, unsigned __int8 *ptr, int len);
unsigned __int64 *objList_add(struct obj_list **, unsigned __int64, char *, unsigned __int64);
unsigned __int64 *objList_change(struct obj_list **, unsigned __int64, unsigned __int64, char *, unsigned __int64);
void obj_add_global_abs_symbol(struct obj *, char *, unsigned __int64);
unsigned __int64 obj_base_address(struct obj *);
unsigned __int64 obj_bss_size(struct obj *);
unsigned __int64 obj_bss_start(struct obj *);
int obj_call_shared(struct obj *);
int obj_checksum_not_match(struct obj *, struct obj *, int);
int obj_chksum_changed(struct obj *);
void obj_close(struct obj *);
void obj_close_arch(struct obj *);
Coff_Conflict *obj_conflict(struct obj *);
int obj_conflict_foreign(struct obj *);
coff_addr obj_conflict_symbol(struct obj *, int);
coff_uint obj_conflictcount(struct obj *);
int obj_create_addinfo(struct wobj *, wobj_info_type_t, wobj_info_t);
void *obj_create_addscn(struct wobj *, unsigned int, unsigned __int64, unsigned __int64 *);
void *obj_create_addsymscn(struct wobj *, wobj_symscn_t, unsigned __int64);
void obj_create_complete(struct wobj *);
struct wobj *obj_create_new(const char *, struct obj *, unsigned __int64, unsigned __int64, unsigned __int64, unsigned __int64, mode_t);
caddr_t obj_create_scnhdr_addr(void);
unsigned __int64 obj_data_base_address(struct obj *);
unsigned __int64 obj_data_size(struct obj *);
unsigned __int64 obj_data_start(struct obj *);
int obj_different_name(struct obj *, struct obj *);
Coff_Dyn *obj_dynamic(struct obj *);
coff_uint obj_dynflags(struct obj *);
Coff_Rel *obj_dynrel(struct obj *);
coff_uint obj_dynrelent(struct obj *);
coff_uint obj_dynrelsz(struct obj *);
char *obj_dynstr(struct obj *);
char *obj_dynstring(struct obj *, int);
coff_uint obj_dynstrsz(struct obj *);
char *obj_dynstrtab(struct obj *);
Coff_Sym *obj_dynsym(struct obj *);
coff_addr obj_dynsym_got_fcn(struct obj *, int);
coff_uint obj_dynsym_hash_value(struct obj *, int);
char *obj_dynsym_name(struct obj *, int);
coff_uint obj_dynsym_rel_index(struct obj *, int);
coff_uint obj_dynsym_size(struct obj *, int);
coff_addr obj_dynsym_value(struct obj *, int);
coff_uint obj_dynsymcount(struct obj *);
coff_uint obj_dynsyment(struct obj *);
unsigned __int64 obj_end(struct obj *);
coff_addr obj_entry_address(struct obj *);
void *obj_extend_bss_segment(struct obj *, int);
void obj_extend_text_segment(struct obj *, int);
unsigned __int64 obj_external_base(struct obj *);
int obj_fd(struct obj *);
unsigned __int64 obj_file_base(struct obj *);
unsigned __int64 obj_find_procedure_table(unsigned __int64, unsigned __int64, unsigned __int64 *);
coff_addr obj_find_symbol_value(unsigned __int64, const char *, int);
void obj_fini(struct obj *);
coff_addr obj_fini_address(struct obj *);
int obj_followed_csc(struct obj *);
struct obj *obj_fopen(struct obj *, const char *, int, unsigned int);
unsigned int obj_get_comment_data(struct obj *, unsigned int, unsigned __int64 *);
int obj_get_dynamic_info(Coff_Dyn *, struct obj *, unsigned __int64, unsigned __int64);
__int64 obj_get_got_entry(struct obj *, unsigned __int64, __int64, unsigned __int64 *, int *);
coff_uint obj_gotsym(struct obj *);
unsigned __int64 obj_gpvalue(struct obj *);
coff_uint *obj_hash(struct obj *);
coff_uint obj_hash_bucket(struct obj *, int);
coff_uint obj_hash_chain(struct obj *, int);
coff_uint obj_ichecksum(struct obj *);
struct obj *obj_init(struct obj *, int);
coff_addr obj_init_address(struct obj *);
int obj_interface_not_match(struct obj *, struct obj *, int);
char *obj_interface_version(struct obj *);
int obj_is_mapped(struct obj *);
coff_uint obj_iversion(struct obj *);
Coff_Lib *obj_liblist(struct obj *);
coff_uint obj_liblist_csum(struct obj *, int);
coff_uint obj_liblist_flags(struct obj *, int);
int obj_liblist_foreign(struct obj *);
char *obj_liblist_name(struct obj *, int);
coff_uint obj_liblist_tstamp(struct obj *, int);
coff_uint obj_liblist_version(struct obj *, int);
char *obj_liblist_version_str(struct obj *, int);
coff_uint obj_liblistcount(struct obj *);
char *obj_map_address(struct obj *);
unsigned __int64 obj_map_diff(struct obj *);
unsigned __int64 obj_map_diff_dbx(struct obj *);
void obj_map_dynamic(struct obj *, unsigned __int64, unsigned __int64, unsigned __int64 *, unsigned __int64, unsigned int, unsigned __int64 *);
coff_uint obj_mgot_count(struct obj *);
Coff_Got *obj_mgot_external(struct obj *, coff_uint);
coff_uint obj_mgot_external_count(struct obj *, coff_uint);
coff_addr obj_mgot_external_entry(struct obj *, coff_uint, int);
coff_uint obj_mgot_first_multisym(struct obj *);
Coff_Got *obj_mgot_local(struct obj *, coff_uint);
coff_uint obj_mgot_local_count(struct obj *, coff_uint);
coff_addr obj_mgot_local_entry(struct obj *, coff_uint, int);
Coff_Msym *obj_msym(struct obj *);
int obj_msym_exists(struct obj *);
coff_uint obj_msym_ms_hash_value(struct obj *, int);
coff_uint obj_msym_ms_info(struct obj *, int);
int obj_msym_not_exists(struct obj *);
char *obj_name(struct obj *);
int obj_name_not_match(struct obj *, struct obj *, int);
coff_uint obj_nbucket(struct obj *);
coff_uint obj_nchain(struct obj *);
int obj_next_scnno(struct wobj *);
int obj_nsections(struct obj *);
struct obj *obj_open(struct obj *, const char *, int);
unsigned __int64 obj_otype(struct obj *);
AOUTHDR *obj_paouthdr(struct obj *);
char *obj_path(struct obj *);
Elf32_Ehdr *obj_pelfhdr(struct obj *);
pEXTR obj_pextr(struct obj *);
struct filehdr *obj_pfilehdr(struct obj *);
pHDRR obj_phdrr(struct obj *);
Elf32_Phdr *obj_pproghdr(struct obj *);
unsigned __int64 obj_procedure_base(struct obj *);
struct scnhdr *obj_pscnhdr(struct obj *);
Elf32_Shdr *obj_psecthdr(struct obj *);
pSYMR obj_psymr(struct obj *);
char *obj_raw_bits(struct obj *, char *);
struct obj *obj_read_from_fd(struct obj *, int, unsigned __int64, unsigned __int64, unsigned __int64);
coff_uint obj_rel_info(struct obj *, int);
coff_addr obj_rel_off(struct obj *, int);
int obj_resolve_symname(struct obj *, const char *);
struct obj *obj_rewrite(struct obj *, struct obj *, char *);
unsigned __int64 obj_rld_map(struct obj *);
coff_uint obj_rldflags(struct obj *);
coff_uint obj_rldversion(struct obj *);
char *obj_rldversion_string(struct obj *);
char *obj_rpath(struct obj *);
Elf32_Shdr *obj_section(Elf32_Shdr *__return_ptr __struct_ptr retstr, struct obj *, int);
char *obj_section_bits(struct obj *, Elf32_Shdr *);
char *obj_section_index_bits(struct obj *, int);
char *obj_section_index_name(struct obj *, int);
char *obj_section_name(struct obj *, const struct scnhdr *);
unsigned __int64 obj_section_offset(struct obj *, const struct scnhdr *);
int obj_section_reloc_type(struct obj *, int);
unsigned __int64 obj_section_size(struct obj *, const struct scnhdr *);
unsigned __int64 obj_section_type(struct obj_list *, unsigned __int64);
unsigned __int64 obj_section_vaddr(struct obj *, const struct scnhdr *);
void obj_set_base_address(struct obj *, unsigned __int64);
void obj_set_bss_size(struct obj *, coff_uint);
void obj_set_bss_start(struct obj *, coff_addr);
void obj_set_conflict_address(struct obj *, Coff_Conflict *);
void obj_set_conflictcount(struct obj *, coff_uint);
void obj_set_data_base_address(struct obj *, unsigned __int64);
void obj_set_data_start(struct obj *, coff_addr);
void obj_set_dynflags(struct obj *, coff_uint);
void obj_set_dynrel_address(struct obj *, Coff_Rel *);
void obj_set_dynrelent(struct obj *, coff_uint);
void obj_set_dynrelsz(struct obj *, coff_uint);
void obj_set_dynstr_address(struct obj *, char *);
void obj_set_dynstrsz(struct obj *, coff_uint);
void obj_set_dynsym_address(struct obj *, Coff_Sym *);
coff_addr obj_set_dynsym_got_fcn(struct obj *, int, coff_addr);
void obj_set_dynsymcount(struct obj *, coff_uint);
void obj_set_dynsyment(struct obj *, coff_uint);
void obj_set_entry_address(struct obj *, coff_addr);
void obj_set_fd(struct obj *, int);
void obj_set_fini_address(struct obj *, coff_addr);
void obj_set_gotsym(struct obj *, coff_uint);
void obj_set_hash_address(struct obj *, coff_uint *);
void obj_set_ichecksum(struct obj *, coff_uint);
void obj_set_init_address(struct obj *, coff_addr);
void obj_set_iversion(struct obj *, coff_uint);
void obj_set_liblist_address(struct obj *, Coff_Lib *);
void obj_set_liblistcount(struct obj *, coff_uint);
void obj_set_map_address(struct obj *, char *);
void obj_set_mgot_count(struct obj *, coff_uint);
void obj_set_mgot_external(struct obj *, coff_uint, Coff_Got *);
void obj_set_mgot_external_entry(struct obj *, coff_uint, int, coff_addr);
void obj_set_mgot_external_table(struct obj *, Coff_Got **);
void obj_set_mgot_first_multisym(struct obj *, coff_uint);
void obj_set_mgot_local(struct obj *, coff_uint, Coff_Got *);
void obj_set_mgot_local_entry(struct obj *, coff_uint, int, coff_addr);
void obj_set_mgot_local_table(struct obj *, Coff_Got **);
void obj_set_msym_address(struct obj *, Coff_Msym *);
void obj_set_msym_ms_hash_value(struct obj *, int, coff_uint);
void obj_set_msym_ms_info(struct obj *, int, coff_uint);
void obj_set_name(struct obj *, char *);
void obj_set_path(struct obj *, char *);
void obj_set_rld_map(struct obj *, unsigned __int64);
void obj_set_rldflag(struct obj *, coff_uint);
void obj_set_rldversion(struct obj *, coff_uint);
void obj_set_rpath(struct obj *, char *);
void obj_set_section_address(struct obj *, char *, __int64);
void obj_set_section_size(struct obj *, char *, int);
void obj_set_soname(struct obj *, char *);
void obj_set_text_size(struct obj *, coff_uint);
void obj_set_text_start(struct obj *, coff_addr);
void obj_set_timestamp(struct obj *, coff_uint);
void obj_set_unrefextno(struct obj *, coff_uint);
int obj_shared(struct obj *);
coff_ushort obj_shstrndx(struct obj *);
char *obj_soname(struct obj *);
void obj_sym_close(struct obj *);
unsigned __int8 obj_sym_info(struct obj *, int);
struct obj *obj_sym_open(struct obj *, char *);
coff_ushort obj_sym_shndx(struct obj *, int);
unsigned __int64 obj_symbol_base(struct obj *);
unsigned __int64 obj_text_size(struct obj *);
unsigned __int64 obj_text_start(struct obj *);
coff_uint obj_timestamp(struct obj *);
int obj_tstamp_not_match(struct obj *, struct obj *, int);
unsigned __int64 obj_type_base(struct obj *);
coff_uint obj_unrefextno(struct obj *);
void obj_unset_rldflag(struct obj *, coff_uint);
void obj_update_dynamic(struct obj *, Coff_Dyn *);
unsigned __int64 obj_vtofo(struct obj *, unsigned __int64);
unsigned __int64 obj_vtop(struct obj *, unsigned __int64);
int obj_was_modified(struct obj *);
int obj_was_moved(struct obj *);
struct obj *obj_write(struct obj *);
WidgetClass objectClass;
ObjectClassRec objectClassRec;
$5BC141063E07A2854A710E771DE9E012 off;
XmOffsetPtr *offset;
int ogetaddrinfo(const char *, const char *, const struct addrinfo *, struct addrinfo **);
int oid2instance(OID *oid, OBJECT *obj, unsigned int *instance, int max_len);
XmString *old_items;
$5BC141063E07A2854A710E771DE9E012 on;
Boolean only_if_exists;
MACRO_op_opc14 op_beq;
MACRO_op_opc14 op_bge;
MACRO_op_opc14 op_bgt;
MACRO_op_opc14 op_blbc;
MACRO_op_opc14 op_blbs;
MACRO_op_opc14 op_ble;
MACRO_op_opc14 op_blt;
MACRO_op_opc14 op_bne;
MACRO_op_opc14 op_br;
MACRO_op_opc14 op_bsr;
MACRO_op op_call_pal;
MACRO_op_opc14 op_fbeq;
MACRO_op_opc14 op_fbge;
MACRO_op_opc14 op_fbgt;
MACRO_op_opc14 op_fble;
MACRO_op_opc14 op_fblt;
MACRO_op_opc14 op_fbne;
MACRO_op_opc14 op_flti;
MACRO_op_opc14 op_fltl;
MACRO_op op_fltm;
MACRO_op_opc14 op_fltv;
MACRO_op op_inta;
MACRO_op op_intl;
MACRO_op op_intm;
MACRO_op_opc14 op_intmisc;
MACRO_op op_ints;
MACRO_op_opc14 op_jsr;
MACRO_op op_lda;
MACRO_op op_ldah;
MACRO_op op_ldbu;
MACRO_op_opc14 op_ldf;
MACRO_op_opc14 op_ldg;
MACRO_op_opc14 op_ldl;
MACRO_op_opc14 op_ldl_l;
MACRO_op_opc14 op_ldq;
MACRO_op_opc14 op_ldq_l;
MACRO_op op_ldq_u;
MACRO_op_opc14 op_lds;
MACRO_op_opc14 op_ldt;
MACRO_op op_ldwu;
MACRO_op_opc14 op_misc;
char *op_name[64];
MACRO_op op_opc01;
MACRO_op op_opc02;
MACRO_op op_opc03;
MACRO_op op_opc04;
MACRO_op op_opc05;
MACRO_op op_opc06;
MACRO_op op_opc07;
MACRO_op_opc14 op_opc14;
MACRO_op_opc14 op_pal19;
MACRO_op_opc14 op_pal1b;
MACRO_op_opc14 op_pal1d;
MACRO_op_opc14 op_pal1e;
MACRO_op_opc14 op_pal1f;
MACRO_op op_stb;
MACRO_op_opc14 op_stf;
MACRO_op_opc14 op_stg;
MACRO_op_opc14 op_stl;
MACRO_op_opc14 op_stl_c;
MACRO_op_opc14 op_stq;
MACRO_op_opc14 op_stq_c;
MACRO_op op_stq_u;
MACRO_op_opc14 op_sts;
MACRO_op_opc14 op_stt;
MACRO_op op_stw;
int open(const char *path, int oflag, ...);
void open_auth_file(const char *, int, FILE **);
DIR *opendir(const char *dir_name);
void openlog(const char *id, int log_option, int facility);
int openlog_r(const char *id, int log_option, int facility, struct syslog_data *syslog_data);
int openpty(int *, int *, char *, struct termios *, struct winsize *);
MACRO_optNil optNil;
char *optarg;
int opterr;
int optind;
char *option;
XrmOptionDescRec *options;
int optopt;
int orientation;
MACRO_osfXK_Activate osfXK_Activate;
MACRO_osfXK_Copy osfXK_AddMode;
MACRO_osfXK osfXK_BackSpace;
MACRO_osfXK_Copy osfXK_BeginLine;
MACRO_osfXK_Clear osfXK_Cancel;
MACRO_osfXK_Clear osfXK_Clear;
MACRO_osfXK_Copy osfXK_Copy;
MACRO_osfXK_Copy osfXK_Cut;
MACRO_osfXK osfXK_Delete;
MACRO_osfXK_Left osfXK_Down;
MACRO_osfXK_Copy osfXK_EndLine;
MACRO_osfXK_Clear osfXK_Help;
MACRO_osfXK osfXK_Insert;
MACRO_osfXK_Left osfXK_Left;
MACRO_osfXK_Menu osfXK_Menu;
MACRO_osfXK_Activate osfXK_MenuBar;
MACRO_osfXK_Copy osfXK_PageDown;
MACRO_osfXK_Copy osfXK_PageLeft;
MACRO_osfXK_Copy osfXK_PageRight;
MACRO_osfXK_Copy osfXK_PageUp;
MACRO_osfXK_Copy osfXK_Paste;
MACRO_osfXK_Copy osfXK_PrimaryPaste;
MACRO_osfXK_Copy osfXK_QuickPaste;
MACRO_osfXK_Left osfXK_Right;
MACRO_osfXK_Select osfXK_Select;
MACRO_osfXK_Select osfXK_Undo;
MACRO_osfXK_Left osfXK_Up;
int other_devices_mode;
unsigned __int64 outer_proc_lnhigh(struct obj *, unsigned __int64);
XRectangle *overall_ink_return;
XRectangle *overall_logical_return;
XCharStruct *overall_return;
int overlay(const WINDOW *srcwin, WINDOW *dstwin);
OverrideShellClassRec overrideShellClassRec;
WidgetClass overrideShellWidgetClass;
int overwrite(const WINDOW *, WINDOW *);
Window owner;
Boolean owner_events;
int p4_create_key_table_ts(psx4_key_table_t **kt_ptr_ptr, rtlock_t *kt_lock_ptr, int cnt, int size);
int p4_delete_entry(psx4_key_entry_t *ke, psx4_key_table_t *kt_ptr, int object_size);
int p4_desc_cleanup_ts(psx4_key_table_t *kt_ptr, psx4_key_entry_t *ke, int object_size, int *entry_is_locked_ptr, int *ref_is_incremented_ptr);
psx4_key_entry_t *p4_find_entry_by_id_ts(psx4_key_table_t *kt_ptr, struct stat *file_stat, int flags, int *entry_is_locked_ptr, int *ref_is_incremented_ptr, int *status);
psx4_key_entry_t *p4_find_entry_by_key_nts(psx4_key_table_t *kt_ptr, psx4_key_t desc);
psx4_key_entry_t *p4_find_entry_by_key_ts(psx4_key_table_t *kt_ptr, psx4_key_t desc, int flags, int *entry_is_locked_ptr, int *ref_is_incremented_ptr);
int p4_get_unique_entry_ts(psx4_key_table_t **kt_ptr_ptr, rtlock_t *kt_lock_ptr, int num_entries, void *object_va, char *name, struct stat *file_stat, psx4_key_t *desc, psx4_key_entry_t **ke_ptr, int *entry_is_locked_ptr, int *ref_is_incremented_ptr, int *new_entry_ptr);
int p4_lock_desc(psx4_key_entry_t *ke, int *entry_is_locked_ptr);
int p4_return_key_entry_ts(psx4_key_table_t *kt_ptr, psx4_key_entry_t *ke);
int p4_unlock_desc(psx4_key_entry_t *ke, int *entry_is_locked_ptr);
int *p_bk;
const u_char *p_cdname(const u_char *, const u_char *, FILE *);
const u_char *p_cdnname(const u_char *, const u_char *, int, FILE *);
const char *p_class(int);
const u_char *p_fqname(const u_char *, const u_char *, FILE *);
const u_char *p_fqnname(const u_char *cp, const u_char *msg, int, char *, int);
const char *p_option(u_long);
void p_query(const u_char *);
const u_char *p_rr(const u_char *, const u_char *, FILE *);
char *p_secstodate(u_long);
const char *p_section(int section, int opcode);
const char *p_time(u_int);
const char *p_type(int);
int paclpolicy;
int page_blks;
int page_increment;
int *page_increment_return;
char *pal_name[192];
PanedClassRec panedClassRec;
WidgetClass panedWidgetClass;
PannerClassRec pannerClassRec;
WidgetClass pannerWidgetClass;
String *params;
Widget parent;
Widget *parent_return;
int passlen(time_t life_dur, time_t login_delay, int alphabet_size);
String path;
int path_diff;
__int64 pathconf(const char *path, int name);
int pathlen;
char *pattern;
int pause(void);
exc_address pc;
int pclose(FILE *stream);
MACRO_pdNil pdNil;
struct dte *pde;
int pechowchar(WINDOW *, chtype);
int *percent;
acl_permset_t permset_d;
void perror(const char *string);
int pid_block(struct timeval *tp, __int64 flags);
int pipe(int *filedes);
Pixmap pixmap;
unsigned __int64 plane_mask;
int plock(int opr);
struct pmaplist *pmap_getmaps(struct sockaddr_in *addr);
u_short pmap_getport(struct sockaddr_in *addr, u_int prognum, u_int versnum, u_int protocol);
enum clnt_stat pmap_rmtcall(struct sockaddr_in *addr, u_int prognum, u_int versnum, u_int procnum, xdrproc_t inproc, char *in, xdrproc_t outproc, char *out, struct timeval tout, u_int *portp);
pt_entry_t *pmap_selfmap;
int pmap_set(u_int, u_int, int, u_short);
int pmap_unset(u_int, u_int);
void pmtu_dgtb_rcvd(caddr_t, struct sockaddr *);
void pmtu_init(void);
void pmtu_slowtimo(void);
int pn_alloc(struct pathname *);
void pn_free(struct pathname *);
PCONTEXT pnext_context;
int pnoutrefresh(WINDOW *, int, int, int, int, int, int);
pnp_errcode *pnp_acquire_2(pnp_acquire_arg *, CLIENT *);
pnp_errcode pnp_busy_retry;
pnp_errcode pnp_database_error;
pnp_errcode pnp_do_askuser;
pnp_errcode pnp_do_bootclient;
pnp_errcode pnp_do_bootserver;
pnp_errcode pnp_do_localboot;
pnp_errcode pnp_failure;
pnp_errcode pnp_in_progress;
pnp_errcode pnp_no_diskspace;
pnp_errcode pnp_no_software;
pnp_errcode pnp_nomore_clients;
pnp_errcode *pnp_poll_2(pnp_setup_arg *, CLIENT *);
pnp_errcode *pnp_setup_2(pnp_setup_arg *, CLIENT *);
pnp_errcode pnp_success;
pnp_errcode pnp_unknown_client;
pnp_errcode pnp_wait;
pnp_whoami_ret *pnp_whoami_2(pnp_whoami_arg *, CLIENT *);
pnp_errcode pnp_wrong_address;
int pointer_mode;
int poll(struct pollfd *filedes, nfds_t nfds, int timeout);
FILE *popen(const char *command, const char *type);
kern_return_t port_allocate(task_t task, port_name_t *port_name);
kern_return_t port_deallocate(task_t task, port_name_t port_name);
kern_return_t port_extract_receive(task_t task, port_name_t his_name, port_t *his_port);
kern_return_t port_extract_send(task_t task, port_name_t his_name, port_t *his_port);
kern_return_t port_insert_receive(task_t task, port_t my_port, port_name_t his_name);
kern_return_t port_insert_send(task_t task, port_t my_port, port_name_t his_name);
kern_return_t port_names(task_t task, port_name_array_t *port_names_p, unsigned int *port_names_pCnt, port_type_array_t *port_types, unsigned int *port_typesCnt);
kern_return_t port_rename(task_t task, port_name_t old_name, port_name_t new_name);
kern_return_t port_set_add(task_t task, port_set_name_t set_name, port_name_t port_name);
kern_return_t port_set_allocate(task_t task, port_set_name_t *set_name);
kern_return_t port_set_backlog(task_t task, port_name_t port_name, int backlog);
kern_return_t port_set_backup(task_t task, port_name_t port_name, port_t backup, port_t *previous);
kern_return_t port_set_deallocate(task_t task, port_set_name_t set_name);
kern_return_t port_set_remove(task_t task, port_name_t port_name);
kern_return_t port_set_status(task_t task, port_set_name_t set_name, port_name_array_t *members, unsigned int *membersCnt);
kern_return_t port_status(task_t task, port_name_t port_name, port_set_name_t *enabled, int *num_msgs, int *backlog, boolean_t *ownership, boolean_t *receive_rights);
kern_return_t port_type(task_t task, port_name_t port_name, port_type_t *port_type_p);
PortholeClassRec portholeClassRec;
WidgetClass portholeWidgetClass;
XtListPosition position;
int *position_count;
int *position_list;
XtPointer post_closure;
XtCallbackProc posthook;
$003F63A829E52477BDB4080710A1139D postorder;
double pow(double x, double y);
float powf(float x, float y);
double powi(double, int);
float powif(float, int);
int powii(int, int);
long double powl(long double x, long double y);
int pr_newline(FILE *, int, int *);
int prbsize;
struct bufhd *prbufhash;
int prbufhsz;
struct buf *prbufs;
XtPointer pre_closure;
ssize_t pread(int filedes, void *buffer, size_t nbytes);
XtFilePredicate predicate;
int prefer_blanking;
XtWidgetGeometry *preferred_return;
int prefresh(WINDOW *, int, int, int, int, int, int);
XtCallbackProc prehook;
$003F63A829E52477BDB4080710A1139D preorder;
int primary_auth(const char *);
void print_pset_error(int number);
void print_varbind(VARBIND *vb, int indent);
void printbuf(char *, int, char *);
int printf(const char *format, ...);
int printw(char *fmt, ...);
__int64 priocntl(idtype_t idtype, id_t id, int cmd, void *arg);
int priocntlset(procset_t *psp, int cmd, void *arg);
__int64 *private_id;
char *privstostr(privvec_t, char *);
char *privtoname(int);
priv_t *privvec(int, ...);
int prnbufs;
XtKeyProc proc;
unsigned __int64 procedure_address(struct obj *, __int64);
__int64 procedure_cbLineOffset(struct obj *, __int64);
unsigned __int64 procedure_end_symbol(struct obj *, __int64);
__int64 procedure_iline(struct obj *, __int64);
__int64 procedure_isaent(struct obj *, unsigned __int64);
__int64 procedure_lnHigh(struct obj *, __int64);
__int64 procedure_lnLow(struct obj *, __int64);
__int64 procedure_lnhigh(struct obj *, __int64);
__int64 procedure_lnlow(struct obj *, __int64);
unsigned __int64 procedure_next(struct obj *, unsigned __int64);
struct pdr *procedure_ppd(struct obj *, __int64);
unsigned __int64 procedure_symbol(struct obj *, __int64);
unsigned __int64 procedure_to_file(struct obj *, unsigned __int64);
struct obj *procedure_to_obj(struct obj_list *, unsigned __int64);
void profil(unsigned __int16 *short_buffer, unsigned int buffer_size, void *offset, unsigned int scale);
char *program;
u_int promio_dump(struct dump_request *);
unsigned __int8 **prop_return;
Window prop_window;
Atom property;
propstat *proproc3_del_3();
PROPGETres *proproc3_get_3();
void *proproc3_null_3();
PROPSETres *proproc3_set_3();
PROPACCESSres *proproc_access_2();
propstat *proproc_del_2();
PROPGETres *proproc_get_2();
PROPGETATTRres *proproc_getattr_2();
void *proproc_null_2();
PROPSETres *proproc_set_2();
Atom protocol;
Atom *protocols;
char *protoname[];
char proxy_requested;
struct presto_status prstatus;
void psecerror(char *);
MACRO_AF_OSI pseudo_AF_XTP;
int pthreadDebugCblkSeqDestroy(pthreadDebugContext_t);
int pthreadDebugCblkSeqInit(pthreadDebugContext_t, pthreadDebugId_t, pthreadDebugId_t *);
int pthreadDebugCblkSeqNext(pthreadDebugContext_t, pthreadDebugId_t *);
int pthreadDebugCmd(pthreadDebugContext_t, const char *);
int pthreadDebugCondGetInfo(pthreadDebugContext_t, pthreadDebugId_t, pthreadDebugCondInfo_p);
int pthreadDebugCondGetInfoAddr(pthreadDebugContext_t, pthread_cond_t *, pthreadDebugCondInfo_t *);
int pthreadDebugCondSeqDestroy(pthreadDebugContext_t);
int pthreadDebugCondSeqInit(pthreadDebugContext_t, pthreadDebugId_t *);
int pthreadDebugCondSeqNext(pthreadDebugContext_t, pthreadDebugId_t *);
int pthreadDebugCondSetName(pthreadDebugContext_t, pthreadDebugId_t, const char *);
int pthreadDebugContextDestroy(pthreadDebugContext_t);
int pthreadDebugContextInit(pthreadDebugClient_t, pthreadDebugCallbacks_p, void *, pthreadDebugContext_p);
int pthreadDebugEventClearGlobal(pthreadDebugContext_t, pthreadDebugEvent_t);
int pthreadDebugEventClearThread(pthreadDebugContext_t, pthreadDebugId_t, pthreadDebugEvent_t);
int pthreadDebugEventGetAddress(pthreadDebugContext_t, pthreadDebugEvent_t, void **);
int pthreadDebugEventGetGlobal(pthreadDebugContext_t, pthreadDebugEventMask_p);
int pthreadDebugEventGetThread(pthreadDebugContext_t, pthreadDebugId_t, pthreadDebugEventMask_p);
int pthreadDebugEventSetGlobal(pthreadDebugContext_t, pthreadDebugEvent_t);
int pthreadDebugEventSetThread(pthreadDebugContext_t, pthreadDebugId_t, pthreadDebugEvent_t);
int pthreadDebugGetSpecialThread(pthreadDebugContext_t, pthreadDebugSpecialType_t, pthreadDebugId_t *);
int pthreadDebugMblkSeqDestroy(pthreadDebugContext_t);
int pthreadDebugMblkSeqInit(pthreadDebugContext_t, pthreadDebugId_t, pthreadDebugId_t *);
int pthreadDebugMblkSeqNext(pthreadDebugContext_t, pthreadDebugId_t *);
int pthreadDebugMutGetInfo(pthreadDebugContext_t, pthreadDebugId_t, pthreadDebugMutexInfo_p);
int pthreadDebugMutGetInfoAddr(pthreadDebugContext_t, pthread_mutex_t *, pthreadDebugMutexInfo_t *);
int pthreadDebugMutSeqDestroy(pthreadDebugContext_t);
int pthreadDebugMutSeqInit(pthreadDebugContext_t, pthreadDebugId_t *);
int pthreadDebugMutSeqNext(pthreadDebugContext_t, pthreadDebugId_t *);
int pthreadDebugMutSetName(pthreadDebugContext_t, pthreadDebugId_t, const char *);
int pthreadDebugResume(pthreadDebugContext_t);
int pthreadDebugRwGetInfo(pthreadDebugContext_t, pthreadDebugId_t, pthreadDebugRwlockInfo_p);
int pthreadDebugRwGetInfoAddr(pthreadDebugContext_t, pthread_rwlock_t *, pthreadDebugRwlockInfo_p);
int pthreadDebugRwSeqDestroy(pthreadDebugContext_t);
int pthreadDebugRwSeqInit(pthreadDebugContext_t, pthreadDebugId_t *);
int pthreadDebugRwSeqNext(pthreadDebugContext_t, pthreadDebugId_t *);
int pthreadDebugRwSetName(pthreadDebugContext_t, pthreadDebugId_t, const char *);
int pthreadDebugRwblkRdSeqDestroy(pthreadDebugContext_t);
int pthreadDebugRwblkRdSeqInit(pthreadDebugContext_t, pthreadDebugId_t, pthreadDebugId_t *);
int pthreadDebugRwblkRdSeqNext(pthreadDebugContext_t, pthreadDebugId_t *);
int pthreadDebugRwblkWrSeqDestroy(pthreadDebugContext_t);
int pthreadDebugRwblkWrSeqInit(pthreadDebugContext_t, pthreadDebugId_t, pthreadDebugId_t *);
int pthreadDebugRwblkWrSeqNext(pthreadDebugContext_t, pthreadDebugId_t *);
int pthreadDebugSetErrorWidth(pthreadDebugContext_t, int);
int pthreadDebugSetOutputWidth(pthreadDebugContext_t, int);
int pthreadDebugSuspend(pthreadDebugContext_t);
int pthreadDebugThdGetFreg(pthreadDebugContext_t, pthreadDebugId_t, pthreadDebugFregs_p);
int pthreadDebugThdGetInfo(pthreadDebugContext_t, pthreadDebugId_t, pthreadDebugThreadInfo_p);
int pthreadDebugThdGetInfoAddr(pthreadDebugContext_t, pthread_t, pthreadDebugThreadInfo_t *);
int pthreadDebugThdGetReg(pthreadDebugContext_t, pthreadDebugId_t, pthreadDebugRegs_p);
int pthreadDebugThdHold(pthreadDebugContext_t, pthreadDebugId_t);
int pthreadDebugThdKidToId(pthreadDebugContext_t, pthreadDebugKId_t, pthreadDebugId_t *);
int pthreadDebugThdSeqDestroy(pthreadDebugContext_t);
int pthreadDebugThdSeqInit(pthreadDebugContext_t, pthreadDebugId_t *);
int pthreadDebugThdSeqNext(pthreadDebugContext_t, pthreadDebugId_t *);
int pthreadDebugThdSetFreg(pthreadDebugContext_t, pthreadDebugId_t, pthreadDebugFregs_p);
int pthreadDebugThdSetName(pthreadDebugContext_t, pthreadDebugId_t, const char *);
int pthreadDebugThdSetReg(pthreadDebugContext_t, pthreadDebugId_t, pthreadDebugRegs_p);
int pthreadDebugThdUnhold(pthreadDebugContext_t, pthreadDebugId_t);
int pthreadDebugTraceArgSeqDestroy(pthreadDebugTraceHandle_t);
int pthreadDebugTraceArgSeqInit(pthreadDebugTraceHandle_t, pthreadTraceType_p, size_t *, void *const *);
int pthreadDebugTraceArgSeqNext(pthreadDebugTraceHandle_t, pthreadTraceType_p, size_t *, void *const *);
int pthreadDebugTraceClassGet(pthreadDebugContext_t, unsigned __int64 *);
int pthreadDebugTraceClassSet(pthreadDebugContext_t, pthreadDebugTraceSetHow_t, unsigned __int64);
int pthreadDebugTraceClose(pthreadDebugTraceHandle_t);
int pthreadDebugTraceDestroy(pthreadDebugContext_t);
int pthreadDebugTraceFormat(pthreadDebugTraceHandle_t, pthreadDebugTraceDetail_t, pthreadDebugTraceFmt_t);
int pthreadDebugTraceInit(pthreadDebugTraceHandle_p, pthreadDebugContext_t);
int pthreadDebugTraceLoad(pthreadDebugContext_t, char *, int, char **);
int pthreadDebugTraceOpen(void *, pthreadDebugCallbacks_p, char *, pthreadDebugTraceHandle_p);
int pthreadDebugTraceSeqDestroy(pthreadDebugTraceHandle_t);
int pthreadDebugTraceSeqInit(pthreadDebugTraceHandle_t, unsigned __int64, pthreadDebugTraceHead_p);
int pthreadDebugTraceSeqNext(pthreadDebugTraceHandle_t, pthreadDebugTraceHead_p);
int pthreadDebugTsdCreate(pthreadDebugContext_t, pthread_key_t *, __pthreadDestructor_t);
int pthreadDebugTsdGetInfo(pthreadDebugContext_t, pthread_key_t, pthreadDebugTsdInfo_p);
int pthreadDebugTsdGetSpecific(pthreadDebugContext_t, pthreadDebugId_t, pthread_key_t, __pthreadLongAddr_p);
int pthreadDebugTsdSeqDestroy(pthreadDebugContext_t debug_context);
int pthreadDebugTsdSeqInit(pthreadDebugContext_t debug_context, pthreadDebugId_t *key_id);
int pthreadDebugTsdSeqNext(pthreadDebugContext_t debug_context, pthreadDebugId_t *key_id);
int pthreadDebugTsdSetName(pthreadDebugContext_t, pthread_key_t, const char *);
int pthreadDebugTsdSetSpecific(pthreadDebugContext_t, pthreadDebugId_t, pthread_key_t, const void *);
MACRO_pthread_insfmem pthread_SIGABRT_s;
MACRO_pthread_SIGSEGV pthread_SIGBUS_s;
MACRO_pthread_insfmem pthread_SIGEMT_s;
MACRO_pthread_SIGSEGV pthread_SIGFPE_s;
MACRO_pthread_SIGIOT pthread_SIGIOT_s;
MACRO_pthread_insfmem pthread_SIGPIPE_s;
MACRO_pthread_SIGSEGV pthread_SIGSEGV_s;
MACRO_pthread_insfmem pthread_SIGSYS_s;
MACRO_pthread_insfmem pthread_SIGTRAP_s;
MACRO_pthread_insfmem pthread_aritherr_s;
int pthread_atfork(void (*prepare)(void), void (*parent)(void), void (*child)(void));
int pthread_attr_destroy(pthread_attr_t *attr);
int pthread_attr_getdetachstate(const pthread_attr_t *attr, int *detachstate);
int pthread_attr_getguardsize(const pthread_attr_t *attr, size_t *guardsize);
int pthread_attr_getinheritsched(const pthread_attr_t *attr, int *inheritsched);
int pthread_attr_getname_np(const pthread_attr_t *attr, char *name, size_t len, void **mbz);
int pthread_attr_getschedparam(const pthread_attr_t *attr, struct sched_param *param);
int pthread_attr_getschedpolicy(const pthread_attr_t *attr, int *policy);
int pthread_attr_getscope(const pthread_attr_t *attr, int *scope);
int pthread_attr_getstackaddr(const pthread_attr_t *attr, void *stackaddr);
int pthread_attr_getstackaddr_np(const pthread_attr_t *attr, void **stackaddr, size_t *size);
int pthread_attr_getstacksize(const pthread_attr_t *attr, size_t *stacksize);
int pthread_attr_init(pthread_attr_t *);
int pthread_attr_setdetachstate(pthread_attr_t *attr, int detachstate);
int pthread_attr_setguardsize(pthread_attr_t *attr, size_t guardsize);
int pthread_attr_setinheritsched(pthread_attr_t *attr, int inheritsched);
int pthread_attr_setname_np(pthread_attr_t *attr, const char *name, void *mbz);
int pthread_attr_setschedparam(pthread_attr_t *attr, const struct sched_param *param);
int pthread_attr_setschedpolicy(pthread_attr_t *attr, int policy);
int pthread_attr_setscope(pthread_attr_t *attr, int scope);
int pthread_attr_setstackaddr(pthread_attr_t *attr, void *stackaddr);
int pthread_attr_setstackaddr_np(pthread_attr_t *attr, void *stackaddr, size_t size);
int pthread_attr_setstacksize(pthread_attr_t *attr, size_t stacksize);
int pthread_cancel(pthread_t thread);
__pthreadExceptionObj_t pthread_cancel_e;
MACRO_pthread_SIGSEGV pthread_cancel_s;
int pthread_cleanup_pop(int execute);
int pthread_cleanup_push(void (*routine)(void *), void *arg);
int pthread_cond_broadcast(pthread_cond_t *cond);
int pthread_cond_destroy(pthread_cond_t *cond);
int pthread_cond_getname_np(pthread_cond_t *cond, char *name, size_t len);
int pthread_cond_init(pthread_cond_t *cond, const pthread_condattr_t *attr);
int pthread_cond_setname_np(pthread_cond_t *cond, const char *name, void *mbz);
int pthread_cond_sig_preempt_int_np(pthread_cond_t *cond);
int pthread_cond_signal(pthread_cond_t *cond);
int pthread_cond_signal_int_np(pthread_cond_t *cond);
int pthread_cond_timedwait(pthread_cond_t *cond, pthread_mutex_t *mutex, const struct timespec *abstime);
int pthread_cond_wait(pthread_cond_t *cond, pthread_mutex_t *mutex);
int pthread_condattr_destroy(pthread_condattr_t *attr);
int pthread_condattr_getpshared(const pthread_condattr_t attr, int *pshared);
int pthread_condattr_init(pthread_condattr_t *attr);
int pthread_condattr_setpshared(pthread_condattr_t attr, int pshared);
int pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine)(void *), void *arg);
void pthread_debug(void);
pthreadDbgStatus_t pthread_debug_cmd(char *);
MACRO_pthread_insfmem pthread_decovf_s;
int pthread_delay_np(const struct timespec *interval);
int pthread_detach(pthread_t thread);
int pthread_equal(pthread_t t1, pthread_t t2);
__pthreadExceptionObj_t pthread_exc_12_e;
__pthreadExceptionObj_t pthread_exc_13_e;
__pthreadExceptionObj_t pthread_exc_5_e;
__pthreadExceptionObj_t pthread_exc_6_e;
__pthreadExceptionObj_t pthread_exc_7_e;
__pthreadExceptionObj_t pthread_exc_aritherr_e;
__pthreadExceptionObj_t pthread_exc_decovf_e;
__pthreadExceptionObj_t pthread_exc_excpu_e;
__pthreadExceptionObj_t pthread_exc_exfilsiz_e;
__pthreadExceptionObj_t pthread_exc_exquota_e;
__pthreadExceptionObj_t pthread_exc_fltdiv_e;
__pthreadExceptionObj_t pthread_exc_fltovf_e;
__pthreadExceptionObj_t pthread_exc_fltund_e;
void pthread_exc_get_message_np(__pthreadExceptionObj_p, int, char *);
int pthread_exc_get_status_np(EXCEPTION *exception, unsigned __int64 *code);
__pthreadExceptionObj_t pthread_exc_illaddr_e;
__pthreadExceptionObj_t pthread_exc_illinstr_e;
__pthreadExceptionObj_t pthread_exc_insfmem_e;
__pthreadExceptionObj_t pthread_exc_intdiv_e;
__pthreadExceptionObj_t pthread_exc_intovf_e;
int pthread_exc_matches_np(EXCEPTION *exception1, EXCEPTION *exception2);
__pthreadExceptionObj_t pthread_exc_noexcmem_e;
__pthreadExceptionObj_t pthread_exc_nopriv_e;
void pthread_exc_pop_ctx_np(__pthreadExcCtx_p);
__pthreadExceptionObj_t pthread_exc_privinst_e;
void pthread_exc_push_ctx_np(__pthreadExcCtx_p);
void pthread_exc_raise_np(__pthreadExceptionObj_p);
void pthread_exc_raise_status_np(__pthreadStatus_t);
void pthread_exc_report_np(EXCEPTION *exception);
__pthreadExceptionObj_t pthread_exc_resaddr_e;
__pthreadExceptionObj_t pthread_exc_resoper_e;
void pthread_exc_set_status_np(EXCEPTION *exception, unsigned __int64 code);
__pthreadExceptionObj_t pthread_exc_subrng_e;
__pthreadExceptionObj_t pthread_exc_uninitexc_e;
MACRO_pthread pthread_exccop_s;
MACRO_pthread pthread_exccoplos_s;
MACRO_pthread pthread_exception_s;
MACRO_pthread_insfmem pthread_excpu_s;
MACRO_pthread_insfmem pthread_exfilsiz_s;
void pthread_exit(void *value_ptr);
__pthreadExceptionObj_t pthread_exit_e;
MACRO_pthread_SIGSEGV pthread_exit_s;
MACRO_pthread_illaddr pthread_exquota_s;
MACRO_pthread_insfmem pthread_fltdiv_s;
MACRO_pthread_insfmem pthread_fltovf_s;
MACRO_pthread_insfmem pthread_fltund_s;
int pthread_get_expiration_np(const struct timespec *delta, struct timespec *abstime);
int pthread_getconcurrency(void);
int pthread_getname_np(pthread_t, char *, size_t);
int pthread_getschedparam(pthread_t thread, int *policy, struct sched_param *param);
unsigned __int64 pthread_getselfseq_np(void);
unsigned __int64 pthread_getsequence_np(pthread_t thread);
void *pthread_getspecific(pthread_key_t key);
MACRO_pthread_illaddr pthread_illaddr_s;
MACRO_pthread_insfmem pthread_illinstr_s;
MACRO_pthread_insfmem pthread_insfmem_s;
MACRO_pthread_insfmem pthread_intdiv_s;
MACRO_pthread_insfmem pthread_intovf_s;
int pthread_join(pthread_t thread, void **value_ptr);
int pthread_key_create(pthread_key_t *key, void (*destructor)(void *));
int pthread_key_create_new_np(pthread_key_t *, __pthreadConstructor_t, __pthreadExtDestructor_t, int);
int pthread_key_delete(pthread_key_t key);
int pthread_key_getname_np(pthread_key_t, char *, size_t);
int pthread_key_setname_np(pthread_key_t *key, const char *name, void *mbz);
int pthread_key_validate_np(pthread_key_t);
int pthread_kill(pthread_t thread, int sig);
int pthread_lock_global_np(void);
int pthread_mutex_destroy(pthread_mutex_t *mutex);
int pthread_mutex_getname_np(pthread_mutex_t *mutex, char *name, size_t len);
int pthread_mutex_init(pthread_mutex_t *mutex, const pthread_mutexattr_t *attr);
int pthread_mutex_lock(pthread_mutex_t *mutex);
int pthread_mutex_setname_np(pthread_mutex_t *mutex, const char *name, void *mbz);
int pthread_mutex_trylock(pthread_mutex_t *mutex);
int pthread_mutex_unlock(pthread_mutex_t *mutex);
int pthread_mutexattr_destroy(pthread_mutexattr_t *attr);
int pthread_mutexattr_getpshared(const pthread_mutexattr_t *attr, int *pshared);
int pthread_mutexattr_gettype(const pthread_mutexattr_t *attr, int *type);
int pthread_mutexattr_gettype_np(const pthread_mutexattr_t *, int *);
int pthread_mutexattr_init(pthread_mutexattr_t *attr);
int pthread_mutexattr_setpshared(pthread_mutexattr_t *attr, int pshared);
int pthread_mutexattr_settype(pthread_mutexattr_t *attr, int type);
int pthread_mutexattr_settype_np(pthread_mutexattr_t *, int);
MACRO_pthread pthread_noexcmem_s;
MACRO_pthread_illaddr pthread_nopriv_s;
MACRO_pthread_insfmem pthread_normal_s;
int pthread_once(pthread_once_t *once_control, void (*routine)(void));
MACRO_pthread_insfmem pthread_privinst_s;
MACRO_pthread_insfmem pthread_resaddr_s;
MACRO_pthread_insfmem pthread_resoper_s;
int pthread_rwlock_destroy(pthread_rwlock_t *rwlock);
int pthread_rwlock_getname_np(pthread_rwlock_t *rwlock, char *name, size_t len);
int pthread_rwlock_init(pthread_rwlock_t *rwlock, const pthread_rwlockattr_t *attr);
int pthread_rwlock_key_getname_np(pthread_key_t *key, char *name, size_t len);
int pthread_rwlock_rdlock(pthread_rwlock_t *rwlock);
int pthread_rwlock_setname_np(pthread_rwlock_t *rwlock, const char *name, void *mbz);
int pthread_rwlock_tryrdlock(pthread_rwlock_t *rwlock);
int pthread_rwlock_trywrlock(pthread_rwlock_t *rwlock);
int pthread_rwlock_unlock(pthread_rwlock_t *rwlock);
int pthread_rwlock_wrlock(pthread_rwlock_t *rwlock);
int pthread_rwlockattr_destroy(pthread_rwlockattr_t *attr);
int pthread_rwlockattr_getpshared(const pthread_rwlockattr_t *attr, int *pshared);
int pthread_rwlockattr_init(pthread_rwlockattr_t *attr);
int pthread_rwlockattr_setpshared(pthread_rwlockattr_t *attr, int pshared);
pthread_t pthread_self(void);
int pthread_setcancelstate(int state, int *oldstate);
int pthread_setcanceltype(int type, int *oldtype);
int pthread_setconcurrency(int level);
int pthread_setname_np(pthread_t, const char *, void *);
int pthread_setschedparam(pthread_t thread, int policy, const struct sched_param *param);
int pthread_setspecific(pthread_key_t key, const void *value);
int pthread_sigmask(int how, const sigset_t *set, sigset_t *oset);
__pthreadExceptionObj_t pthread_stackovf_e;
MACRO_pthread_insfmem pthread_stackovf_s;
MACRO_pthread_insfmem pthread_subrng_s;
void pthread_testcancel(void);
int pthread_trace_write_np(pthreadTraceEvent_t, const char *, int, ...);
MACRO_pthread pthread_uninitexc_s;
MACRO_pthread pthread_unkstatus_s;
int pthread_unlock_global_np(void);
int pthread_yield_np(void);
net_type ptp;
char *ptr;
struct d_table *ptr_dt;
struct dt_enty *ptr_dte;
struct s_head *ptr_head;
struct d_info *ptr_info;
struct ss_head *ptr_shead;
int ptrace(__int64 request, __int64 process, ulong_t *address, ulong_t data);
char *ptsname(int masterfd);
int pty_master(void);
int pty_slave(int);
int putc(int c, FILE *stream);
int putc_unlocked(int c, FILE *file);
int putchar(int c);
int putchar_unlocked(int c);
int putdvagnam(const char *, const struct dev_asg *);
int putenv(const char *string);
int putesdfnam(char *name, struct es_default *pr);
int putesdvnam(char *name, struct esdev_asg *dv);
int putesfinam(char *name, struct es_file *pr);
int putespwnam(char *name, struct es_passwd *pr);
int putestcnam(char *name, struct es_term *pr);
void putlong(unsigned int long_arg, u_char *message_ptr);
int putmsg(int fd, const struct strbuf *ctlbuf, const struct strbuf *databuf, int flags);
int putp(const char *);
int putpmsg(int fd, const struct strbuf *ctlbuf, const struct strbuf *databuf, int band, int flags);
int putprdfnam(const char *, const struct pr_default *);
int putprfinam(const char *, const struct pr_file *);
int putprpwnam(const char *, const struct pr_passwd *);
int putprtcnam(const char *, const struct pr_term *);
int putpwent(struct passwd *passwd, FILE *file);
int puts(const char *string);
void putshort(unsigned __int16 short_arg, u_char *message_ptr);
int putuserpw(struct userpw *);
struct utmp *pututline(struct utmp *utmp_ptr);
struct utmpx *pututxline(const struct utmpx *utmpx);
int putw(int w, FILE *stream);
wint_t putwc(wint_t wc, FILE *stream);
wint_t putwchar(wint_t);
char *pw_idtoname(uid_t);
uid_t pw_nametoid(char *name);
ssize_t pwrite(int filedes, const void *buffer, size_t nbytes);
char *qfextension[];
char *qfname;
void qsort(void *base, size_t nmemb, size_t size, int (*compar)(const void *, const void *));
int quotactl(char *path, int cmd, int id, char *addr);
char *quotagroup;
struct radix_node_head *radix_node_head;
int raise(int signal);
int rand(void);
int rand_r(unsigned int *seedptr);
int random(void);
int random_r(int *, RANDOMD *);
int randomchars(char *string, unsigned __int16 minlen, unsigned __int16 maxlen, boolean restrict, __int64 seed);
int randomletters(char *string, unsigned __int16 minlen, unsigned __int16 maxlen, boolean restrict, __int64 seed);
int randomword(char *word, char *hyphenated_word, unsigned __int16 minlen, unsigned __int16 maxlen, boolean restrict, __int64 seed);
int ranhash(char *);
int ranhashinit(struct ranlib *, char *, int);
struct ranlib ranlookup(char *);
int rapi_dispatch();
int rapi_dispatch_fd(int fd_val);
void rapi_event_rtn_t(rapi_sid_t Sid, rapi_eventinfo_t EventType, rapi_styleid_t Style, int ErrorCode, int ErrorValue, rapi_addr_t *ErrorNode, unsigned int ErrorFlags, int FilterSpecNo, rapi_filter_t *FilterSpec_list, int FlowSpecNo, rapi_flowspec_t *FlowSpec_list, int AdspecNo, rapi_adspec_t *Adspec_list, void *Event_arg);
void rapi_fmt_adspec(rapi_adspec_t *adspecp, char *buffer, int length);
void rapi_fmt_filtspec(rapi_filter_t *filtp, char *buffer, int length);
void rapi_fmt_flowspec(rapi_flowspec_t *specp, char *buffer, int length);
void rapi_fmt_tspec(rapi_tspec_t *tspecp, char *buffer, int length);
int rapi_getfd(rapi_sid_t Sid);
int rapi_release(rapi_sid_t Sid);
int rapi_reserve(rapi_sid_t Sid, unsigned int flags, rapi_addr_t *Rhost, rapi_styleid_t StyleId, rapi_stylex_t *Style_Ext, rapi_policy_t *Rcvr_Policy, int FilterSpecNo, rapi_filter_t *FilterSpec_List, int FlowspecNo, rapi_flowspec_t *Flowspec_List);
int rapi_sender(rapi_sid_t Sid, unsigned int flags, rapi_addr_t *Lhost, rapi_filter_t *SenderTemplate, rapi_tspec_t *SenderTspec, rapi_adspec_t *SenderAdspec, rapi_policy_t *SenderPolicy, int TTL);
rapi_sid_t rapi_session(rapi_addr_t *Dest, int Protid, unsigned int Flags, rapi_event_rtn_t *Event_rtn, void *Event_arg, int *Errnop);
const char *rapi_strerror(int ErrorCode, int ErrorValue);
int rapi_version();
int raw(void);
int rcmd(char **host, u_short port, char *local_user, char *remote_user, char *command, int *err_file_desc);
int rcmd2(char **, u_short, char *, char *, char *, int *, int);
char *re_comp(char *string);
char *re_comp_r(char *, REGEXD *);
int re_exec(char *string);
int re_exec_r(char *, REGEXD *);
ssize_t read(int filedes, void *buffer, size_t nbytes);
__int64 read_io_port(io_handle_t dev_addr, int width, int type);
unsigned int read_rnd();
struct dirent *readdir(DIR *dir_pointer);
int readdir_r(DIR *dir_pointer, struct dirent *entry, struct dirent **result);
int readlink(const char *path, char *buffer, size_t buf_size);
ssize_t readv(int filedes, const struct iovec *iov, int iov_count);
void *realloc(void *pointer, size_t size);
char *realpath(const char *file_name, char *resolved_name);
void reboot(int howto);
Cardinal record_size;
WidgetClass rectObjClass;
RectObjClassRec rectObjClassRec;
ssize_t recv(int socket, void *buffer, size_t length, int flags);
ssize_t recvfrom(int socket, void *buffer, size_t length, int flags, struct sockaddr *address, size_t *address_len);
ssize_t recvmsg(int socket, struct msghdr *message, int flags);
Widget reference;
XtCacheRef *refs;
char *regcmp(const char *string1, ...);
int regcomp(regex_t *preg, const char *pattern, int cflags);
size_t regerror(int errcode, const regex_t *preg, char *errbuf, size_t errbuf_size);
char *regex(const char *re, const char *subject, ...);
int regexec(const regex_t *preg, const char *string, size_t nmatch, regmatch_t *pmatch, int eflags);
void regfree(regex_t *preg);
Region region;
int reltimer(timer_t tmrid, struct itimerspec *val, struct itimerspec *oval);
double remainder(double x, double y);
float remainderf(float x, float y);
long double remainderl(long double x, long double y);
int remove(const char *path);
Boolean remove_all_locks;
void remove_inifaddrh(struct in_addr);
void remque(void *element);
int rename(const char *from, const char *to);
RepeaterClassRec repeaterClassRec;
WidgetClass repeaterWidgetClass;
int replace_file(char *, const char *, char *);
XtWidgetGeometry *reply_return;
Atom req_type;
XtWidgetGeometry *request;
XtRequestId request_id;
int request_mouse_pos(void);
void res_add_special(char);
char *res_class;
void res_close(void);
int res_dnok(const char *);
$3EACBFB1F6A69D9CA6E99CE3BA7C8589 res_done;
$3EACBFB1F6A69D9CA6E99CE3BA7C8589 res_error;
void res_freeupdrec(ns_updrec *);
$3EACBFB1F6A69D9CA6E99CE3BA7C8589 res_goahead;
int res_hnok(const char *);
void res_init(void);
int res_isourserver(const struct sockaddr_in *);
int res_mailok(const char *);
int res_mkquery(int query_type, const u_char *domain_name, int class, int type, const char *data, int data_length, const u_char *reserved, u_char *buffer, int buf_length);
int res_mkupdate(ns_updrec *, u_char *, int);
ns_updrec *res_mkupdrec(int, const char *, u_int, u_int, u_long);
$3EACBFB1F6A69D9CA6E99CE3BA7C8589 res_modified;
char *res_name;
int res_nameinquery(const char *, int, int, const u_char *, const u_char *);
$3EACBFB1F6A69D9CA6E99CE3BA7C8589 res_nextns;
int res_ownok(const char *);
int res_queriesmatch(const u_char *, const u_char *, const u_char *, const u_char *);
int res_query(const char *, int, int, u_char *, int);
int res_querydomain(const char *, const char *, int, int, u_char *, int);
u_int res_randomid(void);
int res_search(const char *, int, int, u_char *, int);
int res_send(const u_char *msg_ptr, int msg_len, u_char *answer, int ans_len);
int res_update(ns_updrec *);
int reset_prog_mode(void);
int reset_shell_mode(void);
int resetterm(void);
int resetty(void);
void resize_tcb_hash_list(void);
void resize_tcbquickbindtable(void);
XtResourceList resources;
XtResourceList *resources_return;
int restartterm(char *, int, int *);
XcmsColorFormat result_format;
int revert_to;
void rewind(FILE *stream);
void rewinddir(DIR *dir_pointer);
int rexec(char **host, int port, char *user, char *passwd, char *command, int *err_file_desc);
MACRO_rfdNil rfdNil;
XID rid;
XmTextPosition *right;
char *rindex(const char *s, int c);
double rint(double x);
float rintf(float x);
long double rintl(long double x);
int rip_ctloutput(int, struct socket *, int, int, struct mbuf **);
void rip_input(struct mbuf *);
int rip_output(struct mbuf *, struct socket *);
int rip_usrreq(struct socket *, int, struct mbuf *, struct mbuf *, struct mbuf *);
int rmdir(const char *path);
int rmtimer(timer_t timer_id);
struct radix_mask *rn_mkfreelist;
MACRO_rndxNil rndxNil;
Window *root_return;
int *root_x_return;
int *root_y_return;
Position *rootx_return;
Position *rooty_return;
struct rpc_createerr rpc_createerr;
void rpctest_service();
MACRO_rpdNil rpdNil;
int rpmatch(const char *response);
int rresvport(int *port);
int rresvport2(int *, int);
time_t rrip_convert_tf_ts(int, signed __int8 *);
__int64 *rstatproc_havedisk_2();
__int64 *rstatproc_havedisk_3();
__int64 *rstatproc_havedisk_4();
statsswtch *rstatproc_stats_2();
statstime *rstatproc_stats_3();
statsvar *rstatproc_stats_4();
void rsvp_init(void);
void rsvp_input(struct mbuf *);
int rsvp_rtioctl(struct socket *, unsigned int, caddr_t);
MACRO_rt rt_FIRST;
MACRO_rt rt_LAST;
int rt_init_mutex(rtlock_t *rt_lock);
int rt_lock_mutex(rtlock_t *rt_lock, int lock_type);
int rt_unlock_mutex(rtlock_t *rt_lock, int lock_type);
int rtstats(struct rtstat *, int, int);
int ruserok(char *host, int root_user, char *remote_user, char *local_user);
XmString s2;
MACRO_s5DIRSIZ s5DIRSIZ;
MACRO_s5ROOTINO s5ROOTINO;
void sReplyXETrapGetAvail();
void sReplyXETrapGetCur();
void sReplyXETrapGetLITim();
void sReplyXETrapGetStats();
void sReplyXETrapGetVers();
void sReplyXTrapDispatch();
int sXETrapConfig();
int sXETrapDispatch();
int sXETrapGetAvailable();
int sXETrapGetCurrent();
int sXETrapGetLastInpTime();
int sXETrapGetStatistics();
int sXETrapGetVersion();
void sXETrapHeader();
int sXETrapReset();
int sXETrapSimulateXEvent();
int sXETrapStartTrap();
int sXETrapStopTrap();
char s_header[];
__int64 s_length;
void sa_audit_audit(int, caddr_t);
void sa_audit_lock(int, caddr_t);
void save_rte(u_char *, struct in_addr);
int saveterm(void);
int savetty(void);
void *sbrk(intptr_t incr);
MACRO_scNil scAbs;
MACRO_scFileDesc scBasedVar;
MACRO_scUnallocated scBits;
MACRO_scNil scBss;
MACRO_scNil scCdbLocal;
MACRO_scCdbSystem scCdbSystem;
MACRO_scUnallocated scCommon;
MACRO_scNil scData;
MACRO_scDbx scDbx;
MACRO_scFileDesc scFileDesc;
MACRO_scReportDesc scFini;
MACRO_scUnallocated scInfo;
MACRO_scFileDesc scInit;
MACRO_scReportDesc scMax;
MACRO_scNil scNil;
MACRO_scReportDesc scPData;
MACRO_scReportDesc scRConst;
MACRO_scUnallocated scRData;
MACRO_scUnallocated scRegImage;
MACRO_scNil scRegister;
MACRO_scReportDesc scReportDesc;
MACRO_scUnallocated scSBss;
MACRO_scUnallocated scSCommon;
MACRO_scUnallocated scSData;
MACRO_scFileDesc scSUndefined;
MACRO_scReportDesc scSymRef;
MACRO_scNil scText;
MACRO_scReportDesc scTlsBss;
MACRO_scReportDesc scTlsCommon;
MACRO_scReportDesc scTlsData;
MACRO_scUnallocated scTlsUndefined;
MACRO_scUnallocated scUnallocated;
MACRO_scNil scUndefined;
MACRO_scUnallocated scUserStruct;
MACRO_scUnallocated scVar;
MACRO_scUnallocated scVarRegister;
MACRO_scUnallocated scVariant;
MACRO_scReportDesc scXData;
double scalb(double x, double n);
float scalbf(float x, float n);
long double scalbl(long double x, long double n);
int scandir(char *dir_name, struct dirent ***name_list, int (*select)(struct dirent *dir), int (*compare)(struct dirent **dir1, struct dirent **dir2));
int scanf(const char *format, ...);
int scanw(char *fmt, ...);
int sched_get_priority_max(int);
int sched_get_priority_min(int);
int sched_getparam(pid_t, struct sched_param *);
int sched_getscheduler(pid_t);
int sched_rr_get_interval(pid_t, struct timespec *);
int sched_setparam(pid_t, const struct sched_param *);
int sched_setscheduler(pid_t, int, const struct sched_param *);
void sched_yield(void);
void sconv_nonperiodic_(float *, float *, float *, int *, int *, int *);
int sconv_nonperiodic_ext_(float *, int *, float *, int *, float *, int *, int *, int *, int *, int *, int *, int *, float *, int *);
void sconv_periodic_(float *, float *, float *, int *, int *);
int sconv_periodic_ext_(float *, int *, float *, int *, float *, int *, int *, int *, int *, int *, int *, float *, int *);
__int64 scope_name_search(struct obj *, unsigned __int64, const char *, __int64, __int64);
void scorr_nonperiodic_(float *, float *, float *, int *, int *, int *);
int scorr_nonperiodic_ext_(float *, int *, float *, int *, float *, int *, int *, int *, int *, int *, int *, int *, float *, int *);
void scorr_periodic_(float *, float *, float *, int *, int *);
int scorr_periodic_ext_(float *, int *, float *, int *, float *, int *, int *, int *, int *, int *, int *, float *, int *);
int scr_dump(const char *filename);
const XtConvertArgRec screenConvertArg[];
XColor *screen_in_out;
int screen_number;
int screen_size;
int scroll(WINDOW *win);
ScrollbarClassRec scrollbarClassRec;
WidgetClass scrollbarWidgetClass;
int scrollok(WINDOW *, bool);
struct screen_data sdata;
__int64 search_cobol_main(struct obj *);
__int64 search_externals(struct obj *, const char *, int);
__int64 search_externals_by_value(struct obj *, unsigned __int64);
unsigned __int64 search_files(struct obj *, const char *, int, int, int);
__int64 search_procedures(struct obj *, const char *, int);
__int64 search_typedefs(struct obj *, const char *, int);
uid_t sec_priv_gid;
struct namepair secclass[];
struct security_info *secinfo;
int secondary_auth(const char *);
XmSecondaryResourceData **secondary_data_return;
unsigned __int64 section_nrel(struct obj *, const struct scnhdr *);
char *section_raw(struct obj *, const struct scnhdr *);
struct reloc *section_rel(struct obj *, const struct scnhdr *);
unsigned __int64 section_type(struct obj *, const struct scnhdr *);
int security_is_avail(void);
int security_is_on(void);
int security_turn_off(void);
int security_turn_on(gid_t);
int sed;
unsigned __int16 *seed48(unsigned __int16 *seed_16v);
int seed48_r(unsigned __int16 *seed_16v, struct drand48_data *dp);
void seekdir(DIR *dir_pointer, __int64 location);
Pixel *select;
XtPointer select_data;
Atom selection;
int sem_close(sem_t *sem);
int sem_destroy(sem_t *sem);
int sem_getvalue(sem_t *sem, int *sval);
int sem_init(sem_t *sem, int pshared, unsigned int value);
sem_t *sem_open(const char *name, int oflag, ...);
int sem_post(sem_t *sem);
int sem_trywait(sem_t *sem);
int sem_unlink(const char *name);
int sem_wait(sem_t *sem);
int semctl(int semid, int semnum, int cmd, ...);
int semget(key_t key, int nsems, int semflg);
int semop(int semid, struct sembuf *sops, size_t nsops);
ssize_t send(int socket, const void *buffer, size_t length, int flags);
ssize_t sendmsg(int socket, const struct msghdr *message, int flags);
ssize_t sendto(int socket, const void *message, size_t length, int flags, const struct sockaddr *dest_addr, size_t dest_len);
Boolean sensitive;
Boolean separator;
port_t service_port;
SessionShellClassRec sessionShellClassRec;
WidgetClass sessionShellWidgetClass;
void set_auth_parameters(int argc, char **argv);
TERMINAL *set_curterm(TERMINAL *);
void set_debug_level(int stat, LOG_CALLBACK_ROUTINE callback);
int set_file_securely(const char *, const char *);
void set_line(struct obj *, __int64, __int64, __int64);
void set_seed(__int64);
void set_unhandled_exception(exception_handler_type handler);
int set_usage(const char *special, int fstype, int Force);
int setbaseprivs(privvec_t);
void setbuf(FILE *stream, char *buffer);
void setbuffer(FILE *stream, char *buffer, int size);
int setclock(int clktyp, struct timespec *val);
int setcontext(const ucontext_t *);
SCREEN *setcurscreen(SCREEN *);
TERMINAL *setcurterm(TERMINAL *);
void setdvagent(void);
int seteffprivs(privvec_t, priv_t *);
int setegid(gid_t egid);
int seteuid(uid_t euid);
int setfsent(void);
int setfsent_r(FILE **);
int setgid(gid_t group_id);
void setgrent(void);
int setgrent_r(FILE **gr_fp);
int setgroups(int gidsetsize, gid_t *grouplist);
void sethostent(int stay_open);
int sethostent_r(int, struct hostent_data *);
int sethostid(int host_id);
int sethostname(char *name, int name_len);
int setitimer(int which, const struct itimerval *value, struct itimerval *ovalue);
int setjmp(jmp_buf environment);
void setkey(const char *);
int setkey_r(char *, CRYPTD *);
void setlinebuf(FILE *stream);
char *setlocale(int category, const char *locale);
int setlogin(char *name);
int setlogmask(int mask_priority);
int setlogmask_r(int mask_priority, struct syslog_data *syslog_data);
int setluid(uid_t);
void setnetent(int stay_open);
int setnetent_r(int, struct netent_data *);
int setnodeent(int);
int setpgid(pid_t process_id, pid_t process_group_id);
pid_t setpgrp(void);
void setprdfent(void);
void setprfient(void);
int setpriority(int which, id_t who, int priority);
int setpriv(__int64, priv_t *);
void setprivvec(privvec_t, ...);
int setproplist(char *path, int follow, int nbytes, char *buf);
void setprotoent(int stay_open);
int setprotoent_r(int, struct protoent_data *);
void setprpwaux(struct passwd *(*)(const char *));
void setprpwent(void);
void setprtcent(void);
int setpwdb(int);
void setpwent(void);
int setpwent_r(FILE **pw_fp);
void setpwfile(const char *filename);
int setregid(gid_t, gid_t);
int setreuid(uid_t, uid_t);
int setrgid(gid_t rgid);
int setrlimit(int resource1, const struct rlimit *rlp);
void setrpcent(int stayopen);
int setruid(uid_t ruid);
void setservent(int stay_open);
int setservent_r(int, struct servent_data *);
pid_t setsid(void);
int setsockopt(int socket, int level, int option_name, const void *option_value, size_t option_len);
char *setstate(const char *state);
int setstate_r(const char *, char **, RANDOMD *);
int setsysauths(privvec_t);
int setsysinfo(unsigned __int64, ...);
int setsyx(int, int);
int settimeofday(struct timeval *, struct timezone *);
int setttyent(void);
int setttyent_r(FILE **);
int setuid(uid_t user_id);
void setuid_least_privilege(void);
int setupterm(char *, int, int *);
int setusershell(void);
void setutent(void);
void setutxent(void);
int setvbuf(FILE *stream, char *buffer, int mode, size_t size);
int setvbuf_unlocked(FILE *stream, char *buffer, int mode, size_t size);
struct sfbp_curs_info sfbp_curs_softc[];
struct sfbp_curs_info sfbp_curs_type[];
int sfct_(char *, float *, float *, int *, int *, int *);
int sfct_apply_(char *, float *, float *, DXML_S_FCT_STRUCTURE *, int *);
int sfct_exit_(DXML_S_FCT_STRUCTURE *);
int sfct_init_(int *, DXML_S_FCT_STRUCTURE *, int *, int *);
int sfft_(char *, char *, char *, float *, float *, int *, int *);
int sfft_2d_(char *, char *, char *, float *, float *, int *, int *, int *, int *, int *);
int sfft_3d_(char *, char *, char *, float *, float *, int *, int *, int *, int *, int *, int *, int *, int *);
int sfft_apply_(char *, char *, char *, float *, float *, DXML_S_FFT_STRUCTURE *, int *);
int sfft_apply_2d_(char *, char *, char *, float *, float *, int *, DXML_S_FFT_STRUCTURE_2D *, int *, int *);
int sfft_apply_3d_(char *, char *, char *, float *, float *, int *, int *, int *, int *, int *, DXML_S_FFT_STRUCTURE_3D *, int *, int *, int *);
int sfft_apply_grp_(char *, char *, char *, float *, float *, int *, int *, DXML_S_GRP_FFT_STRUCTURE *, int *, int *);
int sfft_exit_(DXML_S_FFT_STRUCTURE *);
int sfft_exit_2d_(DXML_S_FFT_STRUCTURE_2D *);
int sfft_exit_3d_(DXML_S_FFT_STRUCTURE_3D *);
int sfft_exit_grp_(DXML_S_GRP_FFT_STRUCTURE *);
int sfft_grp_(char *, char *, char *, float *, float *, int *, int *, int *, int *, int *);
int sfft_init_(int *, DXML_S_FFT_STRUCTURE *, int *);
int sfft_init_2d_(int *, int *, DXML_S_FFT_STRUCTURE_2D *, int *);
int sfft_init_3d_(int *, int *, int *, DXML_S_FFT_STRUCTURE_3D *, int *);
int sfft_init_grp_(int *, DXML_S_GRP_FFT_STRUCTURE *, int *, int *);
void sfilter_apply_nonrec_(float *, float *, float *, int *);
void sfilter_init_nonrec_(int *, float *, float *, float *, int *, float *, int *);
void sfilter_nonrec_(float *, float *, int *, float *, float *, float *, int *, int *);
int sfst_(char *, float *, float *, int *, int *, int *);
int sfst_apply_(char *, float *, float *, DXML_S_FST_STRUCTURE *, int *);
int sfst_exit_(DXML_S_FST_STRUCTURE *);
int sfst_init_(int *, DXML_S_FST_STRUCTURE *, int *, int *);
unsigned int shape;
ShellClassRec shellClassRec;
WidgetClass shellWidgetClass;
int shm_open(const char *, int, mode_t);
int shm_unlink(const char *);
void *shmat(int shmid, const void *shmaddr, int shmflg);
int shmctl(int, int, struct shmid_ds *);
int shmdt(const void *addr);
int shmget(key_t key, size_t size, int flags);
int shutdown(int socket, int how);
struct sia_context *sia_alloc_context(void);
int sia_audit(u_int, ...);
int sia_authorize(SIAENTITY *);
int sia_become_user(sia_collect_func_t *, int, char **, char *, char *, char *, int, char *, char **, int);
const char *const sia_caps[];
int sia_chdir(const char *, time_t);
int sia_chg_finger(sia_collect_func_t *, char *, int, char **);
int sia_chg_password(sia_collect_func_t *, char *, int, char **);
int sia_chg_shell(sia_collect_func_t *, char *, int, char **);
int sia_chk_invoker(void);
sia_collect_func_t sia_collect_trm;
void sia_free_context(struct sia_context *);
int sia_free_entity(SIAENTITY *, int);
int sia_get_groups(const char *, gid_t, gid_t *, int *);
char *sia_getamsg(const char *, int, int, const char *);
int sia_getgroup(int, int, union sia_get_params *);
int sia_getpasswd(int, int, union sia_get_params *);
ldr_module_t sia_handle;
int sia_init(void);
int sia_initialized;
int sia_log(const char *, const char *, ...);
int sia_make_entity_pwd(struct passwd *, SIAENTITY *);
int sia_mat_init(void);
int sia_ses_authent(sia_collect_func_t *, char *, SIAENTITY *);
int sia_ses_estab(sia_collect_func_t *, SIAENTITY *);
int sia_ses_init(SIAENTITY **, int, char **, char *, char *, char *, int, char *);
int sia_ses_launch(sia_collect_func_t *, SIAENTITY *);
int sia_ses_reauthent(sia_collect_func_t *, SIAENTITY *);
int sia_ses_release(SIAENTITY **);
int sia_ses_suauthent(sia_collect_func_t *, SIAENTITY *);
int sia_setupfp(int, int, int (*)());
int sia_switch(int, union sia_get_params *, int (**)());
int sia_timed_action(int (*)(void *), void *, time_t);
int sia_update_pass(sia_collect_func_t *, SIAENTITY *, const char *);
int sia_validate_user(sia_collect_func_t *, int, char **, char *, char *, char *, int, char *, char *);
int sia_warning(sia_collect_func_t *, const char *, ...);
int siad_chg_finger(sia_collect_func_t *, const char *, int, char **);
int siad_chg_password(sia_collect_func_t *, const char *, int, char **);
int siad_chg_shell(sia_collect_func_t *, const char *, int, char **);
int siad_chk_invoker(void);
int siad_chk_user(const char *, int);
int siad_endgrent(struct sia_context *);
int siad_endpwent(struct sia_context *);
int siad_get_groups(struct sia_context *, const char *, gid_t *, int *, int);
int siad_getgrent(struct group *, char *, int, struct sia_context *);
int siad_getgrgid(gid_t, struct group *, char *, int, struct sia_context *);
int siad_getgrnam(const char *, struct group *, char *, int, struct sia_context *);
int siad_getpwent(struct passwd *, char *, int, struct sia_context *);
int siad_getpwnam(const char *, struct passwd *, char *, int, struct sia_context *);
int siad_getpwuid(uid_t, struct passwd *, char *, int, struct sia_context *);
int siad_group[];
int siad_init(void);
int siad_passwd[];
int siad_ses_authent(sia_collect_func_t *, SIAENTITY *, int, int);
int siad_ses_estab(sia_collect_func_t *, SIAENTITY *, int);
int siad_ses_init(SIAENTITY *, int);
int siad_ses_launch(sia_collect_func_t *, SIAENTITY *, int);
int siad_ses_reauthent(sia_collect_func_t *, SIAENTITY *, int, int);
int siad_ses_release(SIAENTITY *, int);
int siad_ses_suauthent(sia_collect_func_t *, SIAENTITY *, int, int);
void siad_ses_toggle_privs(SIAENTITY *, int, int);
void siad_ses_update_audit_record(SIAENTITY *, int, int, char *, char **, int *, int);
int siad_setgrent(struct sia_context *);
int siad_setpwent(struct sia_context *);
int siad_test_newpass(sia_collect_func_t *, SIAENTITY *, int, const char *);
int siad_update_pass(sia_collect_func_t *, SIAENTITY *, int, const char *);
Widget sibling;
int sigaction(int signal, const struct sigaction *action, struct sigaction *o_action);
int sigaddset(sigset_t *set, int sig_number);
int sigaltstack(const stack_t *ss, stack_t *oss);
int sigblock(int mask);
int sigdelset(sigset_t *set, int sig_number);
int sigemptyset(sigset_t *set);
int sigfillset(sigset_t *set);
int sighold(int);
int sigignore(int signal);
int siginterrupt(int sig, int flag);
int sigismember(sigset_t *set, int sig_number);
void siglongjmp(sigjmp_buf environment, int value);
MACRO_signUnsigned signLeadingOverpunch;
MACRO_signUnsigned signLeadingSeparate;
MACRO_signUnsigned signTrailingOverpunch;
MACRO_signUnsigned signTrailingSeparate;
MACRO_signUnsigned signUnsigned;
void (*signal(int, void (*)(int)))(int);
char signature[2];
int signed_leb128_decode(char *, __int64 *);
int signgam;
int sigpause(int signal_mask);
int sigpending(sigset_t *set);
int sigprocmask(int how, const sigset_t *set, sigset_t *o_set);
int sigqueue(pid_t, int, const union sigval);
int sigrelse(int signal);
int sigreturn(struct sigcontext *scp);
int sigsend(idtype_t idtype, id_t id, int sig);
int sigsendset(const procset_t *, int);
void (*sigset(int signal, void (*function)(int)))(int);
int sigsetjmp(sigjmp_buf environment, int savemask);
int sigsetmask(int);
int sigstack(struct sigstack *instack, struct sigstack *outstack);
int sigsuspend(const sigset_t *signal_mask);
int sigtimedwait(const sigset_t *set, siginfo_t *info, const struct timespec *timeout);
int sigvec(int signal, struct sigvec *in_vec, struct sigvec *out_vec);
int sigwait(const sigset_t *set, int *signal);
int sigwaitinfo(const sigset_t *set, siginfo_t *info);
SimpleClassRec simpleClassRec;
SimpleMenuClassRec simpleMenuClassRec;
WidgetClass simpleMenuWidgetClass;
WidgetClass simpleWidgetClass;
double sin(double x);
double sind(double x);
float sindf(float x);
long double sindl(long double x);
float sinf(float x);
double sinh(double x);
float sinhf(float x);
long double sinhl(long double x);
long double sinl(long double x);
Cardinal size;
int sizeof_proplist_entry(char *name, int value_size);
unsigned int sleep(unsigned int seconds);
int slider_size;
int *slider_size_return;
int slk_attr_off(const attr_t attrs, void *opts);
int slk_start(int, int *);
SmeBSBClassRec smeBSBClassRec;
WidgetClass smeBSBObjectClass;
SmeClassRec smeClassRec;
SmeLineClassRec smeLineClassRec;
WidgetClass smeLineObjectClass;
WidgetClass smeObjectClass;
int snprintf(char *string, size_t n, const char *format, ...);
int sockatmark(int socket);
int socket(int domain, int type, int protocol);
int socketpair(int domain, int type, int protocol, int *socket_vector);
MACRO_soe soe_two_FIRST;
MACRO_soe soe_two_LAST;
int source;
int sp_delete_ir(ir_entry_t *, sec_cache_t *);
ir_entry_t *sp_insert_ir(attribute_t *, sec_cache_t *);
sec_cache_t *sp_ir_cache_init(cache_policy_config_t *, int (*)(), int (*)());
String *specification_list;
char *specifier;
speed_t speed;
int spp_abort(struct nspcb *);
struct sppcb *spp_close(struct sppcb *);
int spp_ctlinput(int, caddr_t);
int spp_ctloutput(int, struct socket *, int, int, struct mbuf **);
struct spp_debug spp_debug[100];
int spp_debx;
struct sppcb *spp_disconnect(struct sppcb *);
struct sppcb *spp_drop(struct sppcb *, int);
int spp_fasttimo(void);
int spp_fixmtu(struct nspcb *);
int spp_init(void);
int spp_input(struct mbuf *, struct nspcb *);
int spp_output(struct sppcb *, struct mbuf *);
int spp_quench(struct nspcb *);
int spp_reass(struct sppcb *, struct spidp *);
int spp_setpersist(struct sppcb *);
int spp_slowtimo(void);
int spp_template(struct sppcb *);
struct sppcb *spp_timers(struct sppcb *, int);
int spp_trace(int, u_char, struct sppcb *, struct spidp *, int);
struct sppcb *spp_usrclosed(struct sppcb *);
int spp_usrreq(struct socket *, int, struct mbuf *, struct mbuf *, struct mbuf *);
int spp_usrreq_sp(struct socket *, int, struct mbuf *, struct mbuf *, struct mbuf *);
Boolean spring_loaded;
int sprintf(char *string, const char *format, ...);
char *sprintoid(char *buffer, OID *oid);
double sqrt(double x);
float sqrtf(float x);
long double sqrtl(long double x);
void srand(unsigned int seed);
void srand48(__int64 seed_val);
int srand48_r(__int64 seed_val, struct drand48_data *dp);
int srandom(unsigned int seed);
int srandom_r(unsigned int, RANDOMD *);
Drawable src;
unsigned int src_height;
Window src_w;
unsigned int src_width;
int src_x;
int src_y;
int sscanf(const char *string, const char *format, ...);
void *ssignal(int signal, void (*function)(int));
struct screen_stats sstats;
MACRO_stUsing stAlias;
MACRO_stNil stBase;
MACRO_stNil stBlock;
MACRO_stNil stConstant;
MACRO_stNil stEnd;
MACRO_stUsing stExpr;
MACRO_stNil stFile;
MACRO_stNil stForward;
MACRO_stNil stGlobal;
MACRO_stNil stInter;
MACRO_stNil stLabel;
MACRO_stNil stLocal;
MACRO_stUsing stMax;
MACRO_stNil stMember;
MACRO_stNil stModule;
MACRO_stNamespace stModview;
MACRO_stNamespace stNamespace;
MACRO_stNil stNil;
MACRO_stUsing stNumber;
MACRO_stNil stParam;
MACRO_stNil stProc;
MACRO_stNil stRegReloc;
MACRO_stNil stSplit;
MACRO_stNil stStaParam;
MACRO_stNil stStatic;
MACRO_stNil stStaticProc;
MACRO_stUsing stStr;
MACRO_stNil stTag;
MACRO_stUsing stType;
MACRO_stNil stTypedef;
MACRO_stUsing stUsing;
MACRO_stNil stVirtBase;
unsigned __int64 st_addr;
st_status_t st_addr_to_file(st_obj_t *obj, st_addr_t addr, st_file_t *file);
st_status_t st_addr_to_line(st_obj_t *obj, st_addr_t addr, st_line_t *line);
st_status_t st_addr_to_obj(st_objlist_t *obj_list, st_addr_t addr, st_obj_t **result);
st_status_t st_addr_to_proc(st_obj_t *obj, st_addr_t addr, st_proc_t *proc);
st_status_t st_ar_member_next(st_obj_t *obj);
st_status_t st_check_proc_line_range(st_obj_t *obj, st_proc_t proc, unsigned __int64 line, st_proc_t *oproc);
st_status_t st_class_str(st_obj_t *obj, unsigned int sym_class, char *buf, int buflen);
st_status_t st_cm_add(st_cmscn_t cmscn, unsigned int tag, unsigned int len, void *data);
st_status_t st_cm_append(st_cmscn_t cmscn, st_cm_sscn_t sscn, unsigned int len, void *data);
st_status_t st_cm_cleanup(st_cmscn_t cmscn);
st_status_t st_cm_data(st_cmscn_t cmscn, st_cm_sscn_t sscn, unsigned int *dlen, void **dptr);
st_status_t st_cm_del_entry(st_cmscn_t cmscn, st_cm_sscn_t sscn, void *key);
st_status_t st_cm_delete(st_cmscn_t cmscn, st_cm_sscn_t sscn);
st_status_t st_cm_find_sscn(st_cmscn_t cmscn, unsigned int tag, st_cm_sscn_t *sscn);
st_status_t st_cm_flags(st_cmscn_t cmscn, st_cm_sscn_t sscn, cm_flags_t *flags);
st_status_t st_cm_get_flags(st_cmscn_t cmscn, unsigned int tag, cm_flags_t *flags, st_bool_t *is_default);
st_status_t st_cm_layout(st_cmscn_t cmscn, void **cmdata, __int64 *cmlen);
st_status_t st_cm_next(st_cmscn_t cmscn, st_cm_sscn_t cmcur, st_cm_sscn_t *cmnext);
st_status_t st_cm_print(st_cmscn_t cmscn, st_bool_t verbose);
st_status_t st_cm_print_one(st_cmscn_t cmscn, unsigned int tag, st_bool_t verbose);
st_status_t st_cm_set_flags(st_cmscn_t cmscn, unsigned int tag, cm_flags_t flags);
st_status_t st_cm_setup(void *sdata, unsigned int ssize, st_cmscn_t *cmscn);
st_status_t st_cm_start(st_cmscn_t cmscn, st_cm_sscn_t *sscn);
st_status_t st_cm_tag(st_cmscn_t cmscn, st_cm_sscn_t sscn, unsigned int *tag);
st_status_t st_data_addr_to_sym(st_obj_t *obj, st_addr_t addr, st_sym_t *sym, int *byte_offset);
st_status_t st_end_sym(st_obj_t *obj, st_sym_t sym, st_sym_t *esym);
st_status_t st_external_name_sym(st_obj_t *obj, const char *name, st_sym_t *osym);
st_status_t st_fd_get_version_byname(int fd, off_t pos, char *toolname, unsigned __int64 *toolver, char **verstring);
st_status_t st_file_is_archive(char *file, st_bool_t *is_archive);
st_status_t st_file_lang(st_obj_t *obj, st_file_t file, unsigned int *lang);
st_status_t st_file_name(st_obj_t *obj, st_file_t file, char **fname);
st_status_t st_file_proc_count(st_obj_t *obj, st_file_t file, unsigned int *pcount);
st_status_t st_file_proc_next(st_obj_t *obj, st_file_t file, st_proc_t pcur, st_proc_t *pnext);
st_status_t st_file_proc_start(st_obj_t *obj, st_file_t file, st_proc_t *pstart);
st_status_t st_file_sym_start(st_obj_t *obj, st_file_t file, st_sym_t *isym);
st_status_t st_file_to_obj(st_objlist_t *obj_list, st_file_t file, st_obj_t **result);
st_status_t st_foreach_obj(st_objlist_t *obj_list, st_status_t (*routine)(st_obj_t *obj, st_any_t data, st_any_t *retval), st_any_t data, st_any_t *retval);
st_status_t st_foreach_obj_proc(st_obj_t *obj, st_status_t (*routine)(st_obj_t *obj, st_proc_t procedure, st_any_t data, st_any_t *result), st_any_t data, st_any_t *result);
st_status_t st_foreach_obj_proc_sorted(st_obj_t *obj, st_status_t (*routine)(st_obj_t *obj, st_proc_t proc, st_any_t data, st_any_t *result), st_any_t data, st_any_t *result);
st_status_t st_foreach_proc(st_obj_t *obj, st_file_t file, st_status_t (*routine)(st_obj_t *obj, st_proc_t procedure, st_any_t data, st_any_t *result), st_any_t data, st_any_t *result);
st_status_t st_frame_offset_to_sym(st_obj_t *obj, st_proc_t proc, int frame_offset, st_sym_t *osym, int *byte_offset);
void st_free_name(st_obj_t *obj, char *name);
st_status_t st_get_format_versions(char *objname, unsigned __int16 *objver, unsigned __int16 *symver);
st_status_t st_get_known_versions(unsigned __int16 *objver, unsigned __int16 *symver);
st_status_t st_get_mangled_name_flag(st_obj_t *obj, unsigned int *flag);
st_status_t st_get_version_byname(char *objname, char *toolname, unsigned __int64 *toolver, char **verstring);
st_status_t st_is_alternate_entry(st_obj_t *obj, st_proc_t proc, st_bool_t *alt);
st_status_t st_is_file_locally_stripped(st_obj_t *obj, st_file_t file, st_bool_t *stripped);
st_status_t st_is_obj_archive(st_obj_t *obj, st_bool_t *is_archive);
st_status_t st_is_obj_call_shared(st_obj_t *obj, st_bool_t *cs);
st_status_t st_is_obj_shared(st_obj_t *obj, st_bool_t *shared);
st_status_t st_is_obj_stripped(st_obj_t *obj, st_bool_t *stripped);
st_status_t st_is_sym_global(st_obj_t *obj, st_sym_t symbol, st_bool_t *global);
st_status_t st_is_sym_local(st_obj_t *obj, st_sym_t symbol, st_bool_t *local);
st_status_t st_is_sym_weak(st_obj_t *obj, st_sym_t symbol, st_bool_t *weak);
st_status_t st_lang_str(st_obj_t *obj, st_file_t file, char *buf, int buflen);
st_status_t st_mem_get_format_versions(void *addr, unsigned __int16 *objver, unsigned __int16 *symver);
st_status_t st_mem_get_version_byname(void *addr, unsigned __int64 size, char *toolname, unsigned __int64 *toolver, char **verstring);
st_status_t st_obj_bss_size(st_obj_t *obj, unsigned __int64 *bsize);
st_status_t st_obj_bss_start(st_obj_t *obj, st_addr_t *bss);
st_status_t st_obj_close(st_obj_t *obj);
st_status_t st_obj_cm_setup(st_obj_t *obj, st_cmscn_t *cmscn);
st_status_t st_obj_data_size(st_obj_t *obj, unsigned __int64 *dsize);
st_status_t st_obj_data_start(st_obj_t *obj, st_addr_t *data);
st_status_t st_obj_esym_count(st_obj_t *obj, unsigned int *count);
st_status_t st_obj_esym_next(st_obj_t *obj, st_sym_t cur, st_sym_t *next);
st_status_t st_obj_esym_start(st_obj_t *obj, st_sym_t *start);
st_status_t st_obj_file_count(st_obj_t *obj, unsigned int *count);
st_status_t st_obj_file_next(st_obj_t *obj, st_file_t cur, st_file_t *next);
st_status_t st_obj_file_start(st_obj_t *obj, st_file_t *start);
st_status_t st_obj_lsym_count(st_obj_t *obj, unsigned int *count);
st_status_t st_obj_lsym_next(st_obj_t *obj, st_sym_t cur, st_sym_t *next);
st_status_t st_obj_lsym_start(st_obj_t *obj, st_sym_t *start);
st_status_t st_obj_mem_addr(st_obj_t *obj, st_addr_t file_addr, st_addr_t *mem_addr);
st_status_t st_obj_name(st_obj_t *obj, char **name);
st_status_t st_obj_open(st_obj_t **obj, const char *file, unsigned int flags);
st_status_t st_obj_proc_count(st_obj_t *obj, unsigned int *count);
st_status_t st_obj_proc_next(st_obj_t *obj, st_proc_t cur, st_proc_t *next);
st_status_t st_obj_proc_start(st_obj_t *obj, st_proc_t *start);
st_status_t st_obj_sym_count(st_obj_t *obj, unsigned int *count);
st_status_t st_obj_sym_next(st_obj_t *obj, st_sym_t cur, st_sym_t *next);
st_status_t st_obj_sym_start(st_obj_t *obj, st_sym_t *start);
st_status_t st_obj_text_size(st_obj_t *obj, unsigned __int64 *tsize);
st_status_t st_obj_text_start(st_obj_t *obj, st_addr_t *text);
st_status_t st_object_type(const char *file, st_object_type_t *otype);
st_status_t st_objlist_append(st_objlist_t **obj_list, st_obj_t *obj);
st_status_t st_objlist_close(st_objlist_t *obj_list);
st_status_t st_objlist_external_name_sym(st_objlist_t *obj_list, const char *name, st_sym_t *sym);
st_status_t st_objlist_first(st_objlist_t *obj_list, st_obj_t **obj);
st_status_t st_objlist_last(st_objlist_t *obj_list, st_obj_t **obj);
st_status_t st_outer_proc_end_line(st_obj_t *obj, st_proc_t proc, st_line_t *eline);
st_status_t st_proc_addr(st_obj_t *obj, st_proc_t proc, st_addr_t *proc_addr);
st_status_t st_proc_end_line(st_obj_t *obj, st_proc_t proc, st_line_t *eline);
st_status_t st_proc_end_sym(st_obj_t *obj, st_sym_t sym, st_sym_t *esym);
st_status_t st_proc_name(st_obj_t *obj, st_proc_t proc, char **name);
st_status_t st_proc_sort(st_obj_t *obj);
st_status_t st_proc_sorted_next(st_obj_t *obj, st_proc_t proc, st_proc_t *result);
st_status_t st_proc_sorted_start(st_obj_t *obj, st_proc_t *pstart);
st_status_t st_proc_start_line(st_obj_t *obj, st_proc_t proc, st_line_t *sline);
st_status_t st_proc_sym(st_obj_t *obj, st_proc_t proc, st_sym_t *sym);
st_status_t st_proc_to_file(st_obj_t *obj, st_proc_t proc, st_file_t *file);
st_status_t st_proc_to_obj(st_objlist_t *obj_list, st_proc_t proc, st_obj_t **result);
st_status_t st_set_mangled_name_flag(st_obj_t *obj, unsigned int flag);
st_status_t st_strerror(st_status_t errcode, char *buf, int buflen);
st_status_t st_sym_class(st_obj_t *obj, st_sym_t sym, unsigned int *sym_class);
st_status_t st_sym_name(st_obj_t *obj, st_sym_t sym, char **name);
st_status_t st_sym_name_copy(st_obj_t *obj, st_sym_t sym, char *name_buf, int buflen, int *truncated);
st_status_t st_sym_size(st_obj_t *obj, st_sym_t sym, unsigned __int64 *size);
st_status_t st_sym_to_file(st_obj_t *obj, st_sym_t sym, st_file_t *file);
st_status_t st_sym_to_obj(st_objlist_t *obj_list, st_sym_t sym, st_obj_t **result);
st_status_t st_sym_to_outer_scope_sym(st_obj_t *obj, st_sym_t sym, st_sym_t *osym);
st_status_t st_sym_type(st_obj_t *obj, st_sym_t sym, unsigned int *sym_type);
st_status_t st_sym_value(st_obj_t *obj, st_sym_t sym, unsigned __int64 *value);
st_status_t st_type_str(st_obj_t *obj, unsigned int type, char *buf, int buflen);
Cardinal stack_mode;
int start_color(void);
uid_t starting_egid(void);
uid_t starting_euid(void);
uid_t starting_luid(void);
uid_t starting_rgid(void);
uid_t starting_ruid(void);
int stat(const char *path, struct stat *buffer);
res stat_fail;
res stat_succ;
Boolean state;
int statfs(char *path, struct statfs *buffer);
int statprivsys(__int64, priv_t *, __int64, obj_t *);
char *status_data;
int statvfs(const char *path, struct statvfs *buffer);
method_t *std_methods;
WINDOW *stdscr;
int step(const char *string, const char *expbuf);
int step_r(const char *p1, const char *p2, struct regexp_data *regexp_data);
int stime(__int64 *tz);
int stopio(caddr_t);
int store(datum key, datum content);
char *storebool(int);
char *storenamepair(const mask_t *, int, const struct namepair *, const char *);
OID *str2oid(OID *oid, char *s);
char *str_class;
char *str_name;
char **str_type_return;
int strcasecmp(const char *, const char *);
char *strcat(char *s1, const char *s2);
char *strchr(const char *, int);
int strcmp(const char *s1, const char *s2);
char *strcodes[];
int strcoll(const char *s1, const char *s2);
char *strcpy(char *s1, const char *s2);
size_t strcspn(const char *s1, const char *s2);
char *strdup(const char *s1);
char *strerror(int errnum);
ssize_t strfmon(char *s, size_t maxsize, const char *format, ...);
char *strfnames[];
size_t strftime(char *s, size_t maxsize, const char *format, const struct tm *timeptr);
char *string;
StripChartClassRec stripChartClassRec;
WidgetClass stripChartWidgetClass;
size_t strlen(const char *s);
dev_t strmod_add(dev_t devno, struct streamtab *streamtab, struct streamadm *streamadm);
int strmod_del(dev_t devno, struct streamtab *streamtab, struct streamadm *streamadm);
char *strnames[];
int strncasecmp(const char *, const char *, size_t);
char *strncat(char *s1, const char *s2, size_t n);
int strncmp(const char *s1, const char *s2, size_t n);
char *strncpy(char *s1, const char *s2, size_t n);
char *strpbrk(const char *s1, const char *s2);
char *strptime(const char *buf, const char *format, struct tm *tm);
char *strrchr(const char *, int);
size_t strspn(const char *s1, const char *s2);
char *strstr(const char *s1, const char *s2);
double strtod(const char *nptr, char **endptr);
float strtof(const char *nptr, char **endptr);
char *strtok(char *s1, const char *s2);
char *strtok_r(char *s1, const char *s2, char **savept);
__int64 strtol(const char *nptr, char **endptr, int base);
long double strtold(const char *nptr, char **endptr);
int strtoprivs(char *, char *, privvec_t);
unsigned __int64 strtoul(const char *nptr, char **endptr, int base);
size_t strxfrm(char *s1, const char *s2, size_t n);
XICCEncodingStyle style;
MACRO_sub sub_emask;
int subctr;
Substitution substitutions;
XmString substring;
char *subsys_real_name(char *);
WINDOW *subwin(WINDOW *, int, int, int, int);
String suffix;
int susp_get_suf(const char *pathname, char *signature, int fieldno, unsigned int flags);
int svc_fds;
fd_set svc_fdset;
struct sockaddr_in *svc_getcaller(SVCXPRT *xprt);
void svc_getreq(int);
void svc_getreqset(fd_set *);
int svc_lastlookup;
int svc_register(SVCXPRT *, u_int, u_int, void (*)(struct svc_req *, SVCXPRT *), int);
void svc_run();
int svc_sendreply(SVCXPRT *, xdrproc_t, char *);
void svc_unregister(u_int prognum, u_int versnum);
void svcerr_auth(SVCXPRT *, enum auth_stat);
void svcerr_decode(SVCXPRT *xprt);
void svcerr_noproc(SVCXPRT *xprt);
void svcerr_noprog(SVCXPRT *xprt);
void svcerr_progvers(SVCXPRT *xprt);
void svcerr_systemerr(SVCXPRT *xprt);
void svcerr_weakauth(SVCXPRT *xprt);
SVCXPRT *svcfd_create(int, u_int, u_int);
SVCXPRT *svcraw_create();
SVCXPRT *svctcp_create(int, u_int, u_int);
SVCXPRT *svcudp_bufcreate(int, u_int, u_int);
SVCXPRT *svcudp_create(int sock);
MACRO_svid svid_three_FIRST;
MACRO_svid svid_three_LAST;
MACRO_svr svr_four_FIRST;
MACRO_svr svr_four_LAST;
void swab(const void *src, void *dest, ssize_t nbytes);
void swap_aouthdr(AOUTHDR *, int);
void swap_aux(pAUXU, int, int);
void swap_ext(pEXTR, int, int);
void swap_fd(pFDR, int, int);
void swap_fi(pFIT, int, int);
void swap_filehdr(struct filehdr *, int);
void swap_gpt(union gp_table *, int, int);
void swap_hdr(pHDRR, int);
void swap_opt(pOPTR, int, int);
int swap_part_name(dev_t, char *);
void swap_pd(pPDR, int, int);
void swap_ranlib(struct ranlib *, int, int);
void swap_reloc(struct reloc *, int, int);
void swap_scnhdr(struct scnhdr *, int);
void swap_sym(pSYMR, int, int);
int swapcontext(ucontext_t *, const ucontext_t *);
int swapctl(int cmd, void *arg);
int swprintf(wchar_t *wstr, size_t n, const wchar_t *format, ...);
int swscanf(const wchar_t *, const wchar_t *, ...);
int sy_str;
MACRO_symNil symNil;
const char *sym_ntop(const struct res_sym *, int, int *);
const char *sym_ntos(const struct res_sym *, int, int *);
int sym_ston(const struct res_sym *, const char *, int *);
pSYMR *symbol;
unsigned __int64 symbol_class(struct obj *, __int64);
__int64 symbol_iaux(struct obj *, __int64);
__int64 symbol_isym(struct obj *, __int64);
char *symbol_name(struct obj *, __int64);
unsigned __int64 symbol_offset(struct obj *, __int64);
unsigned __int64 symbol_size(struct obj *, __int64);
unsigned __int64 symbol_to_file(struct obj *, unsigned __int64);
struct obj *symbol_to_obj(struct obj_list *, unsigned __int64);
unsigned __int64 symbol_to_outer_scope_symbol(struct obj *, unsigned __int64);
unsigned __int64 symbol_type(struct obj *, __int64);
unsigned __int64 symbol_value(struct obj *, __int64);
__int64 symbol_value_iaux(struct obj *, __int64);
__int64 symbol_value_isym(struct obj *, __int64);
unsigned int symbol_weak(struct obj *, __int64);
int symlink(const char *path1, const char *path2);
__int64 symstr;
void sync(void);
int sync2(unsigned int POLICY, char *path);
char *sys_errlist[];
int sys_nerr;
struct namepair sys_priv[];
int syscall(int, ...);
char *syscallnames[];
__int64 sysconf(int name);
int sysfs(int opcode, const char *fsname);
__int64 sysinfo(int command, char *buf, __int64 count);
void syslog(int priority, const char *format, ...);
int syslog_r(int priority, struct syslog_data *syslog_data, const char *format, ...);
int system(const char *string);
MACRO_system system_emask;
MACRO_sysv sysv_FIRST;
MACRO_sysv sysv_LAST;
MACRO_sz_CARD32 sz_CARD32;
MACRO_sz_CARD32 sz_CARD8;
MACRO_XETrapData sz_EventData;
MACRO_sz_RECORDRANGE sz_RECORDRANGE;
MACRO_sz_XRecordClientInfo sz_XRecordClientInfo;
MACRO_sz_XRecordClientInfo sz_XRecordDatum;
MACRO_RecordNumEvents sz_XRecordRange;
MACRO_sz_XRecordClientInfo sz_XRecordState;
MACRO_sz_XWDColor sz_XWDColor;
MACRO_XWD sz_XWDheader;
MACRO_sz_fsBitmapFormat sz_fsBitmapFormat;
MACRO_sz_fsChar2b sz_fsChar2b;
MACRO_sz_fsChar2b_version1 sz_fsChar2b_version1;
MACRO_sz_fsQueryXBitmaps16Req sz_fsCloseReq;
MACRO_sz_fsConnClientPrefix sz_fsConnClientPrefix;
MACRO_sz_fsConnClientPrefix sz_fsConnSetup;
MACRO_sz_fsConnSetupExtra sz_fsConnSetupAccept;
MACRO_sz_fsConnSetupExtra sz_fsConnSetupExtra;
MACRO_sz_fsCreateACReply sz_fsCreateACReply;
MACRO_sz_fsGetEventMaskReq sz_fsCreateACReq;
MACRO_sz_fsError sz_fsError;
MACRO_sz_fsError sz_fsEvent;
MACRO_sz_fsFreeACReq sz_fsFreeACReq;
MACRO_sz_fsGenericReply sz_fsGenericReply;
MACRO_sz_fsListCataloguesReply sz_fsGetCataloguesReply;
MACRO_sz_fsGetCataloguesReq sz_fsGetCataloguesReq;
MACRO_sz_fsGetEventMaskReply sz_fsGetEventMaskReply;
MACRO_sz_fsGetEventMaskReq sz_fsGetEventMaskReq;
MACRO_sz_fsGetResolutionReply sz_fsGetResolutionReply;
MACRO_sz_fsGetResolutionReq sz_fsGetResolutionReq;
MACRO_sz_fsKeepAliveEvent sz_fsKeepAliveEvent;
MACRO_sz_fsListCataloguesReply sz_fsListCataloguesReply;
MACRO_sz_fsQueryExtensionReq sz_fsListCataloguesReq;
MACRO_sz_fsListExtensionReq sz_fsListExtensionReq;
MACRO_sz_fsListExtensionsReply sz_fsListExtensionsReply;
MACRO_sz_fsListExtensionsReq sz_fsListExtensionsReq;
MACRO_sz_fsGetResolutionReply sz_fsListFontsReply;
MACRO_sz_fsGetResolutionReq sz_fsListFontsReq;
MACRO_sz_fsGetResolutionReply sz_fsListFontsWithXInfoReply;
MACRO_sz_fsListFontsWithXInfoReq sz_fsListFontsWithXInfoReq;
MACRO_sz_fsNoopReq sz_fsNoopReq;
MACRO_sz_fsChar2b_version1 sz_fsOffset32;
MACRO_sz_fsOpenBitmapFontReply sz_fsOpenBitmapFontReply;
MACRO_sz_fsListFontsWithXInfoReq sz_fsOpenBitmapFontReq;
MACRO_sz_fsPropOffset sz_fsPropInfo;
MACRO_sz_fsPropOffset sz_fsPropOffset;
MACRO_sz_fsListExtensionsReply sz_fsQueryExtensionReply;
MACRO_sz_fsQueryExtensionReq sz_fsQueryExtensionReq;
MACRO_sz_fsQueryXBitmaps16Reply sz_fsQueryXBitmaps16Reply;
MACRO_sz_fsQueryXBitmaps16Req sz_fsQueryXBitmaps16Req;
MACRO_sz_fsQueryXExtents16Reply sz_fsQueryXBitmaps8Reply;
MACRO_sz_fsQueryXExtents16Req sz_fsQueryXBitmaps8Req;
MACRO_sz_fsQueryXExtents16Reply sz_fsQueryXExtents16Reply;
MACRO_sz_fsQueryXExtents16Req sz_fsQueryXExtents16Req;
MACRO_sz_fsQueryXExtents8Reply sz_fsQueryXExtents8Reply;
MACRO_sz_fsQueryXInfoReq sz_fsQueryXExtents8Req;
MACRO_sz_fsOpenBitmapFontReply sz_fsQueryXInfoReply;
MACRO_sz_fsQueryXInfoReq sz_fsQueryXInfoReq;
MACRO_sz_fsRange sz_fsRange;
MACRO_sz_fsReply sz_fsReply;
MACRO_sz_fsReq sz_fsReq;
MACRO_sz_fsPropOffset sz_fsResolution;
MACRO_sz_fsListExtensionsReq sz_fsResourceReq;
MACRO_sz_fsSetAuthorizationReq sz_fsSetAuthorizationReq;
MACRO_sz_fsSetCataloguesReq sz_fsSetCataloguesReq;
MACRO_sz_fsGetCataloguesReq sz_fsSetEventMaskReq;
MACRO_sz_fsSetAuthorizationReq sz_fsSetResolutionReq;
MACRO_sz_fsRange sz_fsXCharInfo;
MACRO_sz_fsRange sz_fsXFontInfoHeader;
MACRO_sz_iceAuthNextPhaseMsg sz_iceAuthNextPhaseMsg;
MACRO_sz_iceAuthReplyMsg sz_iceAuthReplyMsg;
MACRO_sz_iceAuthRequiredMsg sz_iceAuthRequiredMsg;
MACRO_sz_iceByteOrderMsg sz_iceByteOrderMsg;
MACRO_sz_iceAuthNextPhaseMsg sz_iceConnectionReplyMsg;
MACRO_sz_iceByteOrderMsg sz_iceConnectionSetupMsg;
MACRO_sz_iceMsg sz_iceErrorMsg;
MACRO_sz_iceMsg sz_iceMsg;
MACRO_sz_iceNoCloseMsg sz_iceNoCloseMsg;
MACRO_sz_icePingMsg sz_icePingMsg;
MACRO_sz_icePingReplyMsg sz_icePingReplyMsg;
MACRO_sz_iceProtocolSetupMsg sz_iceProtocolReplyMsg;
MACRO_sz_iceProtocolSetupMsg sz_iceProtocolSetupMsg;
MACRO_sz_iceWantToCloseMsg sz_iceWantToCloseMsg;
MACRO_sz_lbxQuickMotionDeltaEvent sz_lbxMotionDeltaEvent;
MACRO_sz_lbxQuickMotionDeltaEvent sz_lbxQuickMotionDeltaEvent;
MACRO_sz_xPanoramiXGetScreenCountReq sz_panoramiXGetScreenCountReply;
MACRO_sz_xPanoramiXGetScreenSizeReq sz_panoramiXGetScreenSizeReply;
MACRO_sz_xPanoramiXGetStateReq sz_panoramiXGetStateReply;
MACRO_sz_pmGetProxyAddrMsg sz_pmGetProxyAddrMsg;
MACRO_sz_pmGetProxyAddrReplyMsg sz_pmGetProxyAddrReplyMsg;
MACRO_sz_pmStartProxyMsg sz_pmStartProxyMsg;
MACRO_sz_smCloseConnectionMsg sz_smCloseConnectionMsg;
MACRO_sz_smDeletePropertiesMsg sz_smDeletePropertiesMsg;
MACRO_sz_smDieMsg sz_smDieMsg;
MACRO_sz_smGetPropertiesMsg sz_smGetPropertiesMsg;
MACRO_sz_smInteractDoneMsg sz_smInteractDoneMsg;
MACRO_sz_smInteractMsg sz_smInteractMsg;
MACRO_sz_smSaveYourselfRequestMsg sz_smInteractRequestMsg;
MACRO_sz_smPropertiesReplyMsg sz_smPropertiesReplyMsg;
MACRO_sz_smRegisterClientMsg sz_smRegisterClientMsg;
MACRO_sz_smRegisterClientReplyMsg sz_smRegisterClientReplyMsg;
MACRO_sz_smSaveCompleteMsg sz_smSaveCompleteMsg;
MACRO_sz_smSaveYourselfDoneMsg sz_smSaveYourselfDoneMsg;
MACRO_sz_smRegisterClientReplyMsg sz_smSaveYourselfMsg;
MACRO_sz_smSaveYourselfPhase2Msg sz_smSaveYourselfPhase2Msg;
MACRO_sz_smSaveYourselfPhase2RequestMsg sz_smSaveYourselfPhase2RequestMsg;
MACRO_sz_smSaveYourselfRequestMsg sz_smSaveYourselfRequestMsg;
MACRO_sz_smSetPropertiesMsg sz_smSetPropertiesMsg;
MACRO_sz_smShutdownCancelledMsg sz_smShutdownCancelledMsg;
MACRO_sz_xAllocColorCellsReply sz_xAllocColorCellsReply;
MACRO_sz_xAllocColorCellsReq sz_xAllocColorCellsReq;
MACRO_sz_xAllocColorPlanesReply sz_xAllocColorPlanesReply;
MACRO_sz_xAllocColorCellsReq sz_xAllocColorPlanesReq;
MACRO_sz_xAllocColorReply sz_xAllocColorReply;
MACRO_sz_xAllocColorReq sz_xAllocColorReq;
MACRO_sz_xAllocNamedColorReply sz_xAllocNamedColorReply;
MACRO_sz_xAllocColorReq sz_xAllocNamedColorReq;
MACRO_sz_xUngrabDeviceButtonReq sz_xAllowDeviceEventsReq;
MACRO_sz_xAllowEventsReq sz_xAllowEventsReq;
MACRO_sz_xRectangle sz_xArc;
MACRO_sz_xChangeKeyboardControlReq sz_xBellReq;
MACRO_sz_xUngrabButtonReq sz_xChangeActivePointerGrabReq;
MACRO_sz_xChangeDeviceControlReq sz_xChangeDeviceControlReply;
MACRO_sz_xChangeDeviceControlReq sz_xChangeDeviceControlReq;
MACRO_sz_xChangeDeviceDontPropagateListReq sz_xChangeDeviceDontPropagateListReq;
MACRO_sz_xChangeDeviceKeyMappingReq sz_xChangeDeviceKeyMappingReq;
MACRO_sz_xGetFeedbackControlReply sz_xChangeFeedbackControlReq;
MACRO_sz_xCreateGCReq sz_xChangeGCReq;
MACRO_sz_xChangeHostsReq sz_xChangeHostsReq;
MACRO_sz_xChangeKeyboardControlReq sz_xChangeKeyboardControlReq;
MACRO_sz_xChangeKeyboardDeviceReq sz_xChangeKeyboardDeviceReply;
MACRO_sz_xChangeKeyboardDeviceReq sz_xChangeKeyboardDeviceReq;
MACRO_sz_xChangeKeyboardMappingReq sz_xChangeKeyboardMappingReq;
MACRO_sz_xChangeModeReq sz_xChangeModeReq;
MACRO_sz_xChangePointerControlReq sz_xChangePointerControlReq;
MACRO_sz_xChangePointerDeviceReq sz_xChangePointerDeviceReply;
MACRO_sz_xChangePointerDeviceReq sz_xChangePointerDeviceReq;
MACRO_sz_xInternAtomReq sz_xChangePropertyReq;
MACRO_sz_xChangeSaveSetReq sz_xChangeSaveSetReq;
MACRO_sz_xChangeWindowAttributesReq sz_xChangeWindowAttributesReq;
MACRO_sz_xCharInfo sz_xCharInfo;
MACRO_sz_xCirculateWindowReq sz_xCirculateWindowReq;
MACRO_sz_xSetCloseDownModeReq sz_xClearAreaReq;
MACRO_sz_xCloseDeviceReq sz_xCloseDeviceReq;
MACRO_sz_xColorItem sz_xColorItem;
MACRO_sz_xConfigureWindowReq sz_xConfigureWindowReq;
MACRO_sz_xConnClientPrefix sz_xConnClientPrefix;
MACRO_sz_xConnSetupPrefix sz_xConnSetup;
MACRO_sz_xConnSetupPrefix sz_xConnSetupPrefix;
MACRO_sz_xSetSelectionOwnerReq sz_xConvertSelectionReq;
MACRO_sz_xSetClipRectanglesReq sz_xCopyAreaReq;
MACRO_sz_xCreateColormapReq sz_xCopyColormapAndFreeReq;
MACRO_sz_xCopyGCReq sz_xCopyGCReq;
MACRO_sz_xSetClipRectanglesReq sz_xCopyPlaneReq;
MACRO_sz_xCreateColormapReq sz_xCreateColormapReq;
MACRO_sz_xQueryColorsReq sz_xCreateCursorReq;
MACRO_sz_xCreateGCReq sz_xCreateGCReq;
MACRO_sz_xCreateGlyphCursorReq sz_xCreateGlyphCursorReq;
MACRO_sz_xSetFontPathReq sz_xCreatePixmapReq;
MACRO_sz_xResourceReq sz_xCreateWindowReq;
MACRO_sz_xDPMSCapableReq sz_xDPMSCapableReply;
MACRO_sz_xDPMSCapableReq sz_xDPMSCapableReq;
MACRO_sz_xDPMSDisableReq sz_xDPMSDisableReq;
MACRO_sz_xDPMSEnableReq sz_xDPMSEnableReq;
MACRO_sz_xDPMSDisableReq sz_xDPMSForceLevelReq;
MACRO_sz_xDPMSGetTimeoutsReq sz_xDPMSGetTimeoutsReply;
MACRO_sz_xDPMSGetTimeoutsReq sz_xDPMSGetTimeoutsReq;
MACRO_sz_xDPMSGetVersionReq sz_xDPMSGetVersionReply;
MACRO_sz_xDPMSGetVersionReq sz_xDPMSGetVersionReq;
MACRO_sz_xDPMSInfoReq sz_xDPMSInfoReply;
MACRO_sz_xDPMSInfoReq sz_xDPMSInfoReq;
MACRO_sz_xDPMSSetTimeoutsReq sz_xDPMSSetTimeoutsReq;
MACRO_sz_xDeletePropertyReq sz_xDeletePropertyReq;
MACRO_sz_xDepth sz_xDepth;
MACRO_sz_xSendExtensionEventReq sz_xDeviceBellReq;
MACRO_sz_xError sz_xError;
MACRO_sz_xEvent sz_xEvent;
MACRO_sz_xPolySegmentReq sz_xFillPolyReq;
MACRO_sz_xFontProp sz_xFontProp;
MACRO_sz_xForceScreenSaverReq sz_xForceScreenSaverReq;
MACRO_sz_xFreeColorsReq sz_xFreeColorsReq;
MACRO_sz_xrgb sz_xGenericReply;
MACRO_sz_xGetAtomNameReply sz_xGetAtomNameReply;
MACRO_sz_xGetDeviceButtonMappingReq sz_xGetDeviceButtonMappingReply;
MACRO_sz_xGetDeviceButtonMappingReq sz_xGetDeviceButtonMappingReq;
MACRO_sz_xGetDeviceControlReq sz_xGetDeviceControlReply;
MACRO_sz_xGetDeviceControlReq sz_xGetDeviceControlReq;
MACRO_sz_xGetDeviceDontPropagateListReq sz_xGetDeviceDontPropagateListReply;
MACRO_sz_xGetDeviceDontPropagateListReq sz_xGetDeviceDontPropagateListReq;
MACRO_sz_xGetDeviceFocusReq sz_xGetDeviceFocusReply;
MACRO_sz_xGetDeviceFocusReq sz_xGetDeviceFocusReq;
MACRO_sz_xGetDeviceKeyMappingReq sz_xGetDeviceKeyMappingReply;
MACRO_sz_xGetDeviceKeyMappingReq sz_xGetDeviceKeyMappingReq;
MACRO_sz_xGetDeviceModifierMappingReq sz_xGetDeviceModifierMappingReq;
MACRO_sz_xGetDeviceMotionEventsReq sz_xGetDeviceMotionEventsReply;
MACRO_sz_xGetDeviceMotionEventsReq sz_xGetDeviceMotionEventsReq;
MACRO_sz_xGetExtensionVersionReq sz_xGetExtensionVersionReply;
MACRO_sz_xGetExtensionVersionReq sz_xGetExtensionVersionReq;
MACRO_sz_xGetFeedbackControlReply sz_xGetFeedbackControlReply;
MACRO_sz_xSetDeviceFocusReq sz_xGetFeedbackControlReq;
MACRO_sz_xGetFontPathReply sz_xGetFontPathReply;
MACRO_sz_xGetGeometryReply sz_xGetGeometryReply;
MACRO_sz_xGetImageReply sz_xGetImageReply;
MACRO_sz_xGetImageReq sz_xGetImageReq;
MACRO_sz_xGetInputFocusReply sz_xGetInputFocusReply;
MACRO_sz_xSetMappingReply sz_xGetKeyboardControlReply;
MACRO_sz_xGetKeyboardMappingReply sz_xGetKeyboardMappingReply;
MACRO_sz_xSetAccessControlReq sz_xGetKeyboardMappingReq;
MACRO_sz_xGetModifierMappingReply sz_xGetModifierMappingReply;
MACRO_sz_xGetMotionEventsReply sz_xGetMotionEventsReply;
MACRO_sz_xAllowEventsReq sz_xGetMotionEventsReq;
MACRO_sz_xGetPointerControlReply sz_xGetPointerControlReply;
MACRO_sz_xGetPointerMappingReply sz_xGetPointerMappingReply;
MACRO_sz_xGetPropertyReply sz_xGetPropertyReply;
MACRO_sz_xDeletePropertyReq sz_xGetPropertyReq;
MACRO_sz_xGetScreenSaverReply sz_xGetScreenSaverReply;
MACRO_sz_xGetSelectedExtensionEventsReq sz_xGetSelectedExtensionEventsReply;
MACRO_sz_xGetSelectedExtensionEventsReq sz_xGetSelectedExtensionEventsReq;
MACRO_sz_xGetSelectionOwnerReply sz_xGetSelectionOwnerReply;
MACRO_sz_xrgb sz_xGetWindowAttributesReply;
MACRO_sz_xGrabButtonReq sz_xGrabButtonReq;
MACRO_sz_xUngrabDeviceKeyReq sz_xGrabDeviceButtonReply;
MACRO_sz_xUngrabDeviceKeyReq sz_xGrabDeviceButtonReq;
MACRO_sz_xUngrabDeviceReq sz_xGrabDeviceKeyReply;
MACRO_sz_xUngrabDeviceReq sz_xGrabDeviceKeyReq;
MACRO_sz_xGrabDeviceReq sz_xGrabDeviceReply;
MACRO_sz_xGrabDeviceReq sz_xGrabDeviceReq;
MACRO_sz_xGrabKeyReq sz_xGrabKeyReq;
MACRO_sz_xGrabKeyboardReply sz_xGrabKeyboardReply;
MACRO_sz_xGrabKeyboardReq sz_xGrabKeyboardReq;
MACRO_sz_xGrabPointerReply sz_xGrabPointerReply;
MACRO_sz_xGrabPointerReq sz_xGrabPointerReq;
MACRO_sz_xTimecoord sz_xHostEntry;
MACRO_sz_xImageText16Req sz_xImageText16Req;
MACRO_sz_xImageText8Req sz_xImageText8Req;
MACRO_sz_xImageTextReq sz_xImageTextReq;
MACRO_sz_xInternAtomReply sz_xInternAtomReply;
MACRO_sz_xInternAtomReq sz_xInternAtomReq;
MACRO_sz_xKeymapEvent sz_xKeymapEvent;
MACRO_sz_xListExtensionsReply sz_xListExtensionsReply;
MACRO_sz_xListFontsReply sz_xListFontsReply;
MACRO_sz_xListFontsReq sz_xListFontsReq;
MACRO_sz_xGrabKeyboardReply sz_xListFontsWithInfoReply;
MACRO_sz_xGetModifierMappingReply sz_xListFontsWithInfoReq;
MACRO_sz_xListHostsReply sz_xListHostsReply;
MACRO_sz_xChangeHostsReq sz_xListHostsReq;
MACRO_sz_xListInputDevicesReq sz_xListInputDevicesReply;
MACRO_sz_xListInputDevicesReq sz_xListInputDevicesReq;
MACRO_sz_xListInstalledColormapsReply sz_xListInstalledColormapsReply;
MACRO_sz_xListPropertiesReply sz_xListPropertiesReply;
MACRO_sz_xLookupColorReply sz_xLookupColorReply;
MACRO_sz_xQueryColorsReq sz_xLookupColorReq;
MACRO_sz_xOpenDeviceReq sz_xOpenDeviceReply;
MACRO_sz_xOpenDeviceReq sz_xOpenDeviceReq;
MACRO_sz_xOpenFontReq sz_xOpenFontReq;
MACRO_sz_xPanoramiXGetScreenCountReq sz_xPanoramiXGetScreenCountReq;
MACRO_sz_xPanoramiXGetScreenSizeReq sz_xPanoramiXGetScreenSizeReq;
MACRO_sz_xPanoramiXGetStateReq sz_xPanoramiXGetStateReq;
MACRO_X_PanoramiXQueryVersion sz_xPanoramiXQueryVersionReply;
MACRO_X_PanoramiXQueryVersion sz_xPanoramiXQueryVersionReq;
MACRO_sz_xPixmapFormat sz_xPixmapFormat;
MACRO_sz sz_xPoint;
MACRO_sz_xPolyArcReq sz_xPolyArcReq;
MACRO_sz_xPolyFillArcReq sz_xPolyFillArcReq;
MACRO_sz_xPolyFillRectangleReq sz_xPolyFillRectangleReq;
MACRO_sz_xPolyLineReq sz_xPolyLineReq;
MACRO_sz_xPolyPointReq sz_xPolyPointReq;
MACRO_sz_xPolyRectangleReq sz_xPolyRectangleReq;
MACRO_sz_xPolySegmentReq sz_xPolySegmentReq;
MACRO_sz_xPolyText16Req sz_xPolyText16Req;
MACRO_sz_xPolyFillArcReq sz_xPolyText8Req;
MACRO_sz_xPolyTextReq sz_xPolyTextReq;
MACRO_sz_xPrintRehashPrinterListReq sz_xPrintCreateContextReq;
MACRO_sz_xPrintGetContextReply sz_xPrintDestroyContextReq;
MACRO_sz_xPrintEndDocReq sz_xPrintEndDocReq;
MACRO_sz_xPrintEndJobReq sz_xPrintEndJobReq;
MACRO_sz_xPrintEndPageReq sz_xPrintEndPageReq;
MACRO_sz_xPrintGetAttributesReq sz_xPrintGetAttributesReply;
MACRO_sz_xPrintGetAttributesReq sz_xPrintGetAttributesReq;
MACRO_sz_xPrintGetContextReply sz_xPrintGetContextReply;
MACRO_sz_xPrintSetContextReq sz_xPrintGetContextReq;
MACRO_sz_xPrintGetContextScreenReq sz_xPrintGetContextScreenReply;
MACRO_sz_xPrintGetContextScreenReq sz_xPrintGetContextScreenReq;
MACRO_sz_xPrintGetDocumentDataReq sz_xPrintGetDocumentDataReply;
MACRO_sz_xPrintGetDocumentDataReq sz_xPrintGetDocumentDataReq;
MACRO_sz_xPrintGetImageResolutionReq sz_xPrintGetImageResolutionReply;
MACRO_sz_xPrintGetImageResolutionReq sz_xPrintGetImageResolutionReq;
MACRO_sz_xPrintGetOneAttributeReq sz_xPrintGetOneAttributeReply;
MACRO_sz_xPrintGetOneAttributeReq sz_xPrintGetOneAttributeReq;
MACRO_sz_xPrintGetPageDimensionsReq sz_xPrintGetPageDimensionsReply;
MACRO_sz_xPrintGetPageDimensionsReq sz_xPrintGetPageDimensionsReq;
MACRO_sz_xPrintGetPrinterListReq sz_xPrintGetPrinterListReply;
MACRO_sz_xPrintGetPrinterListReq sz_xPrintGetPrinterListReq;
MACRO_sz_xPrintInputSelectedReq sz_xPrintInputSelectedReply;
MACRO_sz_xPrintInputSelectedReq sz_xPrintInputSelectedReq;
MACRO_sz_xPrintEndDocReq sz_xPrintPutDocumentDataReq;
MACRO_sz_xPrintQueryScreensReq sz_xPrintQueryScreensReply;
MACRO_sz_xPrintQueryScreensReq sz_xPrintQueryScreensReq;
MACRO_sz_xPrintQueryVersionReq sz_xPrintQueryVersionReply;
MACRO_sz_xPrintQueryVersionReq sz_xPrintQueryVersionReq;
MACRO_sz_xPrintRehashPrinterListReq sz_xPrintRehashPrinterListReq;
MACRO_sz_xPrintEndPageReq sz_xPrintSelectInputReq;
MACRO_sz_xPrintSetAttributesReq sz_xPrintSetAttributesReq;
MACRO_sz_xPrintSetContextReq sz_xPrintSetContextReq;
MACRO_sz_xPrintSetImageResolutionReq sz_xPrintSetImageResolutionReply;
MACRO_sz_xPrintSetImageResolutionReq sz_xPrintSetImageResolutionReq;
MACRO_sz_xPrintStartDocReq sz_xPrintStartDocReq;
MACRO_sz_xPrintStartJobReq sz_xPrintStartJobReq;
MACRO_sz_xPrintStartPageReq sz_xPrintStartPageReq;
MACRO_sz_xSetModifierMappingReq sz_xPropIconSize;
MACRO_sz_xPolySegmentReq sz_xPutImageReq;
MACRO_sz_xQueryBestSizeReply sz_xQueryBestSizeReply;
MACRO_sz_xQueryBestSizeReq sz_xQueryBestSizeReq;
MACRO_sz_xQueryColorsReply sz_xQueryColorsReply;
MACRO_sz_xQueryColorsReq sz_xQueryColorsReq;
MACRO_sz_xQueryDeviceStateReq sz_xQueryDeviceStateReply;
MACRO_sz_xQueryDeviceStateReq sz_xQueryDeviceStateReq;
MACRO_sz_xQueryExtensionReply sz_xQueryExtensionReply;
MACRO_sz_xQueryExtensionReq sz_xQueryExtensionReq;
MACRO_sz_xGetInputFocusReply sz_xQueryFontReply;
MACRO_sz_xGetInputFocusReply sz_xQueryKeymapReply;
MACRO_sz_xQueryPointerReply sz_xQueryPointerReply;
MACRO_sz_xQueryTextExtentsReply sz_xQueryTextExtentsReply;
MACRO_sz_xQueryTextExtentsReq sz_xQueryTextExtentsReq;
MACRO_sz_xQueryTreeReply sz_xQueryTreeReply;
MACRO_sz_xCreateGlyphCursorReq sz_xRecolorCursorReq;
MACRO_sz_xRecordCreateContextReq sz_xRecordCreateContextReq;
MACRO_sz_xRecordDisableContextReq sz_xRecordDisableContextReq;
MACRO_sz_xRecordEnableContextReq sz_xRecordEnableContextReply;
MACRO_sz_xRecordEnableContextReq sz_xRecordEnableContextReq;
MACRO_sz_xRecordFreeContextReq sz_xRecordFreeContextReq;
MACRO_sz_xRecordGetContextReq sz_xRecordGetContextReply;
MACRO_sz_xRecordGetContextReq sz_xRecordGetContextReq;
MACRO_sz_xRecordQueryVersionReq sz_xRecordQueryVersionReply;
MACRO_sz_xRecordQueryVersionReq sz_xRecordQueryVersionReq;
MACRO_sz_xRecordRange sz_xRecordRange;
MACRO_sz_xRecordRegisterClientsReq sz_xRecordRegisterClientsReq;
MACRO_sz_xRecordUnregisterClientsReq sz_xRecordUnregisterClientsReq;
MACRO_sz_xRectangle sz_xRectangle;
MACRO_sz_xChangeSaveSetReq sz_xReparentWindowReq;
MACRO_sz_xChangeModeReq sz_xReply;
MACRO_sz_xKeymapEvent sz_xReq;
MACRO_sz_xResourceReq sz_xResourceReq;
MACRO_sz_xChangeModeReq sz_xRotatePropertiesReq;
MACRO_X_ScreenSaverUnsetAttributes sz_xScreenSaverNotifyEvent;
MACRO_X_ScreenSaverQueryInfo sz_xScreenSaverQueryInfoReply;
MACRO_X_ScreenSaverQueryInfo sz_xScreenSaverQueryInfoReq;
MACRO_X_ScreenSaverQueryVersion sz_xScreenSaverQueryVersionReply;
MACRO_X_ScreenSaverQueryVersion sz_xScreenSaverQueryVersionReq;
MACRO_X_ScreenSaverSelectInput sz_xScreenSaverSelectInputReq;
MACRO_X_ScreenSaverSetAttributes sz_xScreenSaverSetAttributesReq;
MACRO_X_ScreenSaverUnsetAttributes sz_xScreenSaverUnsetAttributesReq;
MACRO_sz_xSecurityRevokeAuthorizationReq sz_xSecurityAuthorizationRevokedEvent;
MACRO_sz_xSecurityGenerateAuthorizationReq sz_xSecurityGenerateAuthorizationReply;
MACRO_sz_xSecurityGenerateAuthorizationReq sz_xSecurityGenerateAuthorizationReq;
MACRO_X_SecurityQueryVersion sz_xSecurityQueryVersionReply;
MACRO_X_SecurityQueryVersion sz_xSecurityQueryVersionReq;
MACRO_sz_xSecurityRevokeAuthorizationReq sz_xSecurityRevokeAuthorizationReq;
MACRO_sz sz_xSegment;
MACRO_sz_xSelectExtensionEventReq sz_xSelectExtensionEventReq;
MACRO_sz_xSetSelectionOwnerReq sz_xSendEventReq;
MACRO_sz_xSendExtensionEventReq sz_xSendExtensionEventReq;
MACRO_sz_xSetAccessControlReq sz_xSetAccessControlReq;
MACRO_sz_xSetClipRectanglesReq sz_xSetClipRectanglesReq;
MACRO_sz_xSetCloseDownModeReq sz_xSetCloseDownModeReq;
MACRO_sz_xCopyGCReq sz_xSetDashesReq;
MACRO_sz_xSetDeviceButtonMappingReq sz_xSetDeviceButtonMappingReply;
MACRO_sz_xSetDeviceButtonMappingReq sz_xSetDeviceButtonMappingReq;
MACRO_sz_xSetDeviceFocusReq sz_xSetDeviceFocusReq;
MACRO_sz_xSetDeviceModeReq sz_xSetDeviceModeReply;
MACRO_sz_xSetDeviceModeReq sz_xSetDeviceModeReq;
MACRO_sz_xSetDeviceModifierMappingReq sz_xSetDeviceModifierMappingReply;
MACRO_sz_xSetDeviceModifierMappingReq sz_xSetDeviceModifierMappingReq;
MACRO_sz_xSetDeviceValuatorsReq sz_xSetDeviceValuatorsReply;
MACRO_sz_xSetDeviceValuatorsReq sz_xSetDeviceValuatorsReq;
MACRO_sz_xSetFontPathReq sz_xSetFontPathReq;
MACRO_sz_xSetInputFocusReq sz_xSetInputFocusReq;
MACRO_sz_xSetMappingReply sz_xSetMappingReply;
MACRO_sz_xSetModifierMappingReply sz_xSetModifierMappingReply;
MACRO_sz_xSetModifierMappingReq sz_xSetModifierMappingReq;
MACRO_sz_xSetPointerMappingReply sz_xSetPointerMappingReply;
MACRO_sz_xImageText16Req sz_xSetPointerMappingReq;
MACRO_sz_xSetScreenSaverReq sz_xSetScreenSaverReq;
MACRO_sz_xSetSelectionOwnerReq sz_xSetSelectionOwnerReq;
MACRO_SMT_MAJOR sz_xSmtQueryVersionReq;
MACRO_sz_xSmtWakeupServerReq sz_xSmtWakeupEvent;
MACRO_sz_xSmtWakeupServerReq sz_xSmtWakeupServerReq;
MACRO_sz_xStoreColorsReq sz_xStoreColorsReq;
MACRO_sz_xStoreColorsReq sz_xStoreNamedColorReq;
MACRO_X_TestGetInput sz_xTestFakeInputReq;
MACRO_sz_xTestGetInputReq sz_xTestGetInputReq;
MACRO_sz_xTestQueryInputSizeReq sz_xTestQueryInputSizeReq;
MACRO_sz_xTestResetReq sz_xTestResetReq;
MACRO_sz_xTestGetInputReq sz_xTestStopInputReq;
MACRO_sz_xFontProp sz_xTextElt;
MACRO_sz_xTimecoord sz_xTimecoord;
MACRO_sz_xTranslateCoordsReply sz_xTranslateCoordsReply;
MACRO_sz_xTranslateCoordsReq sz_xTranslateCoordsReq;
MACRO_sz_xUngrabButtonReq sz_xUngrabButtonReq;
MACRO_sz_xUngrabDeviceButtonReq sz_xUngrabDeviceButtonReq;
MACRO_sz_xUngrabDeviceKeyReq sz_xUngrabDeviceKeyReq;
MACRO_sz_xUngrabDeviceReq sz_xUngrabDeviceReq;
MACRO_sz_xGrabKeyReq sz_xUngrabKeyReq;
MACRO_sz_xDepth sz_xVisualType;
MACRO_sz_xTranslateCoordsReq sz_xWarpPointerReq;
MACRO_sz_xDepth sz_xWindowRoot;
MACRO_sz_xXTrapGetStatsReply sz_xXTrapGetStatsReply;
MACRO_sz_xXagCreateAssocReq sz_xXagCreateAssocReq;
MACRO_sz_xXagCreateReq sz_xXagCreateReq;
MACRO_sz_xXagDestroyAssocReq sz_xXagDestroyAssocReq;
MACRO_sz_xXagDestroyReq sz_xXagDestroyReq;
MACRO_sz_xXagGetAttrReq sz_xXagGetAttrReply;
MACRO_sz_xXagGetAttrReq sz_xXagGetAttrReq;
MACRO_sz_xXagQueryReq sz_xXagQueryReply;
MACRO_sz_xXagQueryReq sz_xXagQueryReq;
MACRO_XagWindowTypeX11 sz_xXagQueryVersionReply;
MACRO_XagWindowTypeX11 sz_xXagQueryVersionReq;
MACRO_sz_xieAbortReq sz_xieAbortReq;
MACRO_sz_xieAwaitReq sz_xieAwaitReq;
MACRO_sz_xieColorAllocEvn sz_xieColorAllocEvn;
MACRO_sz_xieCreateColorListReq sz_xieCreateColorListReq;
MACRO_sz_xieCreateLUTReq sz_xieCreateLUTReq;
MACRO_sz_xieCreatePhotofloReq sz_xieCreatePhotofloReq;
MACRO_sz_xieCreatePhotomapReq sz_xieCreatePhotomapReq;
MACRO_sz_xieCreatePhotospaceReq sz_xieCreatePhotospaceReq;
MACRO_sz_xieCreateROIReq sz_xieCreateROIReq;
MACRO_sz_xieDecodeNotifyEvn sz_xieDecodeNotifyEvn;
MACRO_sz_xieDestroyColorListReq sz_xieDestroyColorListReq;
MACRO_sz_xieDestroyLUTReq sz_xieDestroyLUTReq;
MACRO_sz_xieDestroyPhotofloReq sz_xieDestroyPhotofloReq;
MACRO_sz_xieDestroyPhotomapReq sz_xieDestroyPhotomapReq;
MACRO_sz_xieDestroyPhotospaceReq sz_xieDestroyPhotospaceReq;
MACRO_sz_xieDestroyROIReq sz_xieDestroyROIReq;
MACRO_sz_xieDestroyPhotospaceReq sz_xieExecuteImmediateReq;
MACRO_sz_xieDestroyPhotofloReq sz_xieExecutePhotofloReq;
MACRO_sz_xieExportAvailableEvn sz_xieExportAvailableEvn;
MACRO_sz_xieFloAccessErr sz_xieFloAccessErr;
MACRO_sz_xieFloAllocErr sz_xieFloAllocErr;
MACRO_sz_xieFloImportROI sz_xieFloArithmetic;
MACRO_sz_xieFloBandCombine sz_xieFloBandCombine;
MACRO_sz_xieFloBandCombine sz_xieFloBandExtract;
MACRO_sz_xieFloBandSelect sz_xieFloBandSelect;
MACRO_sz_xieFloBandSelect sz_xieFloBlend;
MACRO_sz_xieFloCompare sz_xieFloCompare;
MACRO_sz_xieFloCompare sz_xieFloConstrain;
MACRO_sz_xieFloConvertFromIndex sz_xieFloConvertFromIndex;
MACRO_sz_xieFloConvertFromRGB sz_xieFloConvertFromRGB;
MACRO_sz_xieFloConvertFromRGB sz_xieFloConvertToIndex;
MACRO_sz_xieFloConvertToRGB sz_xieFloConvertToRGB;
MACRO_sz_xieFloConvertToRGB sz_xieFloConvolve;
MACRO_sz_xieFloDither sz_xieFloDither;
MACRO_sz_xieFloDomainErr sz_xieFloDomainErr;
MACRO_sz_xieFloElementErr sz_xieFloElementErr;
MACRO_sz_xieFloErr sz_xieFloErr;
MACRO_sz_xieFloEvn sz_xieFloEvn;
MACRO_sz_xieFloExportClientHistogram sz_xieFloExportClientHistogram;
MACRO_sz_xieFloExportClientHistogram sz_xieFloExportClientLUT;
MACRO_sz_xieFloExportClientPhoto sz_xieFloExportClientPhoto;
MACRO_sz_xieFloExportClientROI sz_xieFloExportClientROI;
MACRO_sz_xieFloExportClientROI sz_xieFloExportDrawable;
MACRO_sz_xieFloExportDrawablePlane sz_xieFloExportDrawablePlane;
MACRO_sz_xieFloExportDrawablePlane sz_xieFloExportLUT;
MACRO_sz_xieFloExportPhotomap sz_xieFloExportPhotomap;
MACRO_sz_xieFloExportPhotomap sz_xieFloExportROI;
MACRO_sz_xieFloDither sz_xieFloGeometry;
MACRO_sz_xieFloIDErr sz_xieFloIDErr;
MACRO_sz_xieFloImplementationErr sz_xieFloImplementationErr;
MACRO_sz_xieTypWhiteAdjustTechnique sz_xieFloImportClientLUT;
MACRO_sz_xieTypWhiteAdjustTechnique sz_xieFloImportClientPhoto;
MACRO_sz_xieFloImportClientROI sz_xieFloImportClientROI;
MACRO_sz_xieFloImportClientROI sz_xieFloImportDrawable;
MACRO_sz_xieFloImportClientROI sz_xieFloImportDrawablePlane;
MACRO_sz_xieFloImportLUT sz_xieFloImportLUT;
MACRO_sz_xieFloImportLUT sz_xieFloImportPhotomap;
MACRO_sz_xieFloImportROI sz_xieFloImportROI;
MACRO_sz_xieFloLengthErr sz_xieFloLengthErr;
MACRO_sz_xieFloLogical sz_xieFloLogical;
MACRO_sz_xieFloMatchErr sz_xieFloMatchErr;
MACRO_sz_xieFloLogical sz_xieFloMatchHistogram;
MACRO_sz_xieFloMath sz_xieFloMath;
MACRO_sz_xieFloOperatorErr sz_xieFloOperatorErr;
MACRO_sz_xieFloMath sz_xieFloPasteUp;
MACRO_sz_xieFloPoint sz_xieFloPoint;
MACRO_sz_xieFloSourceErr sz_xieFloSourceErr;
MACRO_sz_xieFloTechniqueErr sz_xieFloTechniqueErr;
MACRO_sz_xieFloPoint sz_xieFloUnconstrain;
MACRO_sz_xieFloValueErr sz_xieFloValueErr;
MACRO_sz_xieGetClientDataReq sz_xieGetClientDataReply;
MACRO_sz_xieGetClientDataReq sz_xieGetClientDataReq;
MACRO_sz_xieImportObscuredEvn sz_xieImportObscuredEvn;
MACRO_sz_xieModifyPhotofloReq sz_xieModifyPhotofloReq;
MACRO_sz_xieAbortReq sz_xiePhotofloDoneEvn;
MACRO_sz_xiePurgeColorListReq sz_xiePurgeColorListReq;
MACRO_sz_xieRedefinePhotofloReq sz_xiePutClientDataReq;
MACRO_sz_xieQueryColorListReq sz_xieQueryColorListReply;
MACRO_sz_xieQueryColorListReq sz_xieQueryColorListReq;
MACRO_sz_xieReq sz_xieQueryImageExtensionReply;
MACRO_sz_xieReq sz_xieQueryImageExtensionReq;
MACRO_sz_xieQueryPhotofloReq sz_xieQueryPhotofloReply;
MACRO_sz_xieQueryPhotofloReq sz_xieQueryPhotofloReq;
MACRO_sz_xieQueryPhotomapReq sz_xieQueryPhotomapReply;
MACRO_sz_xieQueryPhotomapReq sz_xieQueryPhotomapReq;
MACRO_sz_xieQueryTechniquesReq sz_xieQueryTechniquesReply;
MACRO_sz_xieQueryTechniquesReq sz_xieQueryTechniquesReq;
MACRO_sz_xieRedefinePhotofloReq sz_xieRedefinePhotofloReq;
MACRO_sz_xieReq sz_xieReq;
MACRO_sz_xieResourceErr sz_xieResourceErr;
MACRO_sz_xieTecYCCToRGB sz_xieTecCIELabToRGB;
MACRO_sz_xieTecCIEXYZToRGB sz_xieTecCIEXYZToRGB;
MACRO_sz_xieTecColorAllocRequantize sz_xieTecClipScale;
MACRO_sz_xieTecColorAllocAll sz_xieTecColorAllocAll;
MACRO_sz_xieTecColorAllocAll sz_xieTecColorAllocMatch;
MACRO_sz_xieTecColorAllocRequantize sz_xieTecColorAllocRequantize;
MACRO_sz_xieTecConvolveConstant sz_xieTecConvolveConstant;
MACRO_sz_xieTecConvolveConstant sz_xieTecConvolveReplicate;
MACRO_sz_xieTecDecodeG31D sz_xieTecDecodeG31D;
MACRO_sz_xieTecDecodeG32D sz_xieTecDecodeG32D;
MACRO_sz_xieTecDecodeG42D sz_xieTecDecodeG42D;
MACRO_sz_xieTecDecodeJPEGBaseline sz_xieTecDecodeJPEGBaseline;
MACRO_sz_xieTecDecodeJPEGLossless sz_xieTecDecodeJPEGLossless;
MACRO_sz_xieTecDecodeTIFF2 sz_xieTecDecodeTIFF2;
MACRO_sz_xieTecDecodeTIFFPackBits sz_xieTecDecodeTIFFPackBits;
MACRO_sz_xieTecDecodeUncompressedSingle sz_xieTecDecodeUncompressedSingle;
MACRO_sz_xieTecDecodeUncompressedSingle sz_xieTecDecodeUncompressedTriple;
MACRO_sz_xieTecDitherErrorDiffusion sz_xieTecDitherErrorDiffusion;
MACRO_sz_xieTecDitherOrdered sz_xieTecDitherOrdered;
MACRO_sz_xieTecEncodeG31D sz_xieTecEncodeG31D;
MACRO_sz_xieTecEncodeG31D sz_xieTecEncodeG32D;
MACRO_sz_xieTecEncodeG42D sz_xieTecEncodeG42D;
MACRO_sz_xieTecEncodeG42D sz_xieTecEncodeJPEGBaseline;
MACRO_sz_xieTecEncodeJPEGLossless sz_xieTecEncodeJPEGLossless;
MACRO_sz_xieTecEncodeServerChoice sz_xieTecEncodeServerChoice;
MACRO_sz_xieTecEncodeJPEGLossless sz_xieTecEncodeTIFF2;
MACRO_sz_xieTecEncodeTIFFPackBits sz_xieTecEncodeTIFFPackBits;
MACRO_sz_xieTecEncodeUncompressedSingle sz_xieTecEncodeUncompressedSingle;
MACRO_sz_xieTecEncodeUncompressedSingle sz_xieTecEncodeUncompressedTriple;
MACRO_sz_xieTecEncodeTIFFPackBits sz_xieTecGamutClipRGB;
MACRO_sz_xieTecEncodeTIFFPackBits sz_xieTecGamutNone;
MACRO_sz_xieTecEncodeTIFFPackBits sz_xieTecGeomAntialias;
MACRO_sz_xieTecGeomAntialiasByArea sz_xieTecGeomAntialiasByArea;
MACRO_sz_xieTecGeomAntialiasByLowpass sz_xieTecGeomAntialiasByLowpass;
MACRO_sz_xieTecGeomAntialiasByLowpass sz_xieTecGeomBilinearInterpolation;
MACRO_sz_xieTecGeomGaussian sz_xieTecGeomGaussian;
MACRO_sz_xieTecGeomNearestNeighbor sz_xieTecGeomNearestNeighbor;
MACRO_sz_xieTecHardClip sz_xieTecHardClip;
MACRO_sz_xieTecGeomNearestNeighbor sz_xieTecHistogramFlat;
MACRO_sz_xieTecHistogramGaussian sz_xieTecHistogramGaussian;
MACRO_sz_xieTecHistogramHyperbolic sz_xieTecHistogramHyperbolic;
MACRO_sz_xieTecHardClip sz_xieTecRGBToCIELab;
MACRO_sz_xieTecRGBToCIEXYZ sz_xieTecRGBToCIEXYZ;
MACRO_sz_xieTecRGBToYCC sz_xieTecRGBToYCC;
MACRO_sz_xieTecRGBToYCbCr sz_xieTecRGBToYCbCr;
MACRO_sz_xieTecWhiteAdjustCIELabShift sz_xieTecWhiteAdjustCIELabShift;
MACRO_sz_xieTecHistogramHyperbolic sz_xieTecWhiteAdjustNone;
MACRO_sz_xieTecYCCToRGB sz_xieTecYCCToRGB;
MACRO_sz_xieTecRGBToYCC sz_xieTecYCbCrToRGB;
MACRO_sz_xieTypAlignment sz_xieTypAlignment;
MACRO_sz_xieTypArithmeticOp sz_xieTypArithmeticOp;
MACRO_sz_xieTypArithmeticOp sz_xieTypColorAllocTechnique;
MACRO_sz_xieTypArithmeticOp sz_xieTypColorList;
MACRO_sz_xieTypCompareOp sz_xieTypCompareOp;
MACRO_sz_xieTypCompareOp sz_xieTypConstant;
MACRO_sz_xieTypConstrainTechnique sz_xieTypConstrainTechnique;
MACRO_sz_xieTypConvertFromRGBTechnique sz_xieTypConvertFromRGBTechnique;
MACRO_sz_xieTypConvertToRGBTechnique sz_xieTypConvertToRGBTechnique;
MACRO_sz_xieTypConvolveTechnique sz_xieTypConvolveTechnique;
MACRO_sz_xieTypConvolveTechnique sz_xieTypDataClass;
MACRO_sz_xieTypDataType sz_xieTypDataType;
MACRO_sz_xieTypDataType sz_xieTypDecodeTechnique;
MACRO_sz_xieTypDitherTechnique sz_xieTypDitherTechnique;
MACRO_sz_xieTypEncodeTechnique sz_xieTypEncodeTechnique;
MACRO_sz_xieTypPhotoflo sz_xieTypExecutable;
MACRO_sz_xieTypExportNotify sz_xieTypExportNotify;
MACRO_sz_xieTypExportState sz_xieTypExportState;
MACRO_sz_xieTypExportState sz_xieTypFloat;
MACRO_sz_xieTypGamutTechnique sz_xieTypGamutTechnique;
MACRO_sz_xieTypGeometryTechnique sz_xieTypGeometryTechnique;
MACRO_sz_xieTypGeometryTechnique sz_xieTypHistogramData;
MACRO_sz_xieTypHistogramShape sz_xieTypHistogramShape;
MACRO_sz_xieTypHistogramShape sz_xieTypInterleave;
MACRO_sz_xieTypLUT sz_xieTypLUT;
MACRO_sz_xieTypLevels sz_xieTypLevels;
MACRO_sz_xieTypLUT sz_xieTypMathOp;
MACRO_sz_xieTypMatrix sz_xieTypMatrix;
MACRO_sz_xieTypMatrix sz_xieTypOrientation;
MACRO_sz_xieTypPhotoflo sz_xieTypPhotoflo;
MACRO_sz_xieTypPhotofloOutcome sz_xieTypPhotofloOutcome;
MACRO_sz_xieTypPhotofloState sz_xieTypPhotofloState;
MACRO_sz_xieTypPhotofloState sz_xieTypPhotomap;
MACRO_sz_xieTypEncodeTechnique sz_xieTypPhotospace;
MACRO_sz_xieTypPhototag sz_xieTypPhototag;
MACRO_sz_xieTypPhototag sz_xieTypProcessDomain;
MACRO_sz_xieTypROI sz_xieTypROI;
MACRO_sz_xieTypPhototag sz_xieTypRectangle;
MACRO_sz_xieTypROI sz_xieTypServiceClass;
MACRO_sz_xieTypTechniqueGroup sz_xieTypTechniqueGroup;
MACRO_sz_xieTypTechniqueGroup sz_xieTypTechniqueRec;
MACRO_sz_xieTypTechniqueGroup sz_xieTypTile;
MACRO_sz_xieTypTripleofCARD8 sz_xieTypTripleofCARD16;
MACRO_sz_xieTypTripleofCARD8 sz_xieTypTripleofCARD32;
MACRO_sz_xieTypTripleofCARD8 sz_xieTypTripleofCARD8;
MACRO_sz_xieTypWhiteAdjustTechnique sz_xieTypWhiteAdjustTechnique;
MACRO_sz_xkbAccessXNotify sz_xkbAccessXNotify;
MACRO_sz_xkbActionMessage sz_xkbActionMessage;
MACRO_sz_xkbBehaviorWireDesc sz_xkbActionWireDesc;
MACRO_sz_xkbAnyDoodadWireDesc sz_xkbAnyDoodadWireDesc;
MACRO_sz_xkbAnyEvent sz_xkbAnyEvent;
MACRO_sz_xkbBehaviorWireDesc sz_xkbBehaviorWireDesc;
MACRO_sz_xkbBellNotify sz_xkbBellNotify;
MACRO_sz_xkbSelectEventsReq sz_xkbBellReq;
MACRO_sz_xkbCompatMapNotify sz_xkbCompatMapNotify;
MACRO_sz_xkbControlsNotify sz_xkbControlsNotify;
MACRO_sz_xkbDeviceLedsWireDesc sz_xkbDeviceLedsWireDesc;
MACRO_sz_xkbDoodadWireDesc sz_xkbDoodadWireDesc;
MACRO_sz_xkbEvent sz_xkbEvent;
MACRO_sz_xkbExtensionDeviceNotify sz_xkbExtensionDeviceNotify;
MACRO_sz_xkbGetCompatMapReply sz_xkbGetCompatMapReply;
MACRO_sz_xkbSymInterpretWireDesc sz_xkbGetCompatMapReq;
MACRO_sz_xkbGetControlsReply sz_xkbGetControlsReply;
MACRO_sz_xkbLatchLockStateReq sz_xkbGetControlsReq;
MACRO_sz_xkbGetDeviceInfoReq sz_xkbGetDeviceInfoReply;
MACRO_sz_xkbGetDeviceInfoReq sz_xkbGetDeviceInfoReq;
MACRO_sz_xkbGetGeometryReq sz_xkbGetGeometryReply;
MACRO_sz_xkbGetGeometryReq sz_xkbGetGeometryReq;
MACRO_sz_xkbGetIndicatorMapReply sz_xkbGetIndicatorMapReply;
MACRO_sz_xkbGetIndicatorStateReply sz_xkbGetIndicatorMapReq;
MACRO_sz_xkbGetIndicatorStateReply sz_xkbGetIndicatorStateReply;
MACRO_sz_xkbGetCompatMapReply sz_xkbGetIndicatorStateReq;
MACRO_sz_xkbGetKbdByNameReq sz_xkbGetKbdByNameReply;
MACRO_sz_xkbGetKbdByNameReq sz_xkbGetKbdByNameReq;
MACRO_sz_xkbBehaviorWireDesc sz_xkbGetMapReply;
MACRO_sz_xkbBehaviorWireDesc sz_xkbGetMapReq;
MACRO_sz_xkbSetIndicatorMapReq sz_xkbGetNamedIndicatorReply;
MACRO_sz_xkbSetIndicatorMapReq sz_xkbGetNamedIndicatorReq;
MACRO_sz_xkbGetNamesReply sz_xkbGetNamesReply;
MACRO_sz_xkbSetNamedIndicatorReq sz_xkbGetNamesReq;
MACRO_sz_xkbGetStateReq sz_xkbGetStateReply;
MACRO_sz_xkbGetStateReq sz_xkbGetStateReq;
MACRO_sz_xkbIndicatorDoodadWireDesc sz_xkbIndicatorDoodadWireDesc;
MACRO_sz_xkbGetIndicatorMapReply sz_xkbIndicatorMapWireDesc;
MACRO_sz_xkbIndicatorNotify sz_xkbIndicatorNotify;
MACRO_sz_xkbKTMapEntryWireDesc sz_xkbKTMapEntryWireDesc;
MACRO_sz_xkbKTMapEntryWireDesc sz_xkbKTSetMapEntryWireDesc;
MACRO_sz_xkbModsWireDesc sz_xkbKeyTypeWireDesc;
MACRO_sz_xkbKeyWireDesc sz_xkbKeyWireDesc;
MACRO_sz_xkbLatchLockStateReq sz_xkbLatchLockStateReq;
MACRO_sz_xkbListComponentsReq sz_xkbListComponentsReply;
MACRO_sz_xkbListComponentsReq sz_xkbListComponentsReq;
MACRO_sz_xkbLogoDoodadWireDesc sz_xkbLogoDoodadWireDesc;
MACRO_sz_xkbMapNotify sz_xkbMapNotify;
MACRO_sz_xkbModsWireDesc sz_xkbModsWireDesc;
MACRO_sz_xkbNamesNotify sz_xkbNamesNotify;
MACRO_sz_xkbNewKeyboardNotify sz_xkbNewKeyboardNotify;
MACRO_sz_xkbOutlineWireDesc sz_xkbOutlineWireDesc;
MACRO_sz_xkbOverlayKeyWireDesc sz_xkbOverlayKeyWireDesc;
MACRO_sz_xkbOverlayWireDesc sz_xkbOverlayRowWireDesc;
MACRO_sz_xkbOverlayWireDesc sz_xkbOverlayWireDesc;
MACRO_sz_xkbPerClientFlagsReq sz_xkbPerClientFlagsReply;
MACRO_sz_xkbPerClientFlagsReq sz_xkbPerClientFlagsReq;
MACRO_sz_xkbPointWireDesc sz_xkbPointWireDesc;
MACRO_sz_xkbRowWireDesc sz_xkbRowWireDesc;
MACRO_sz_xkbOutlineWireDesc sz_xkbSectionWireDesc;
MACRO_sz_xkbSelectEventsReq sz_xkbSelectEventsReq;
MACRO_sz_xkbGetCompatMapReply sz_xkbSetCompatMapReq;
MACRO_sz_xkbGetControlsReply sz_xkbSetControlsReq;
MACRO_sz_xkbSetDeviceInfoReq sz_xkbSetDebuggingFlagsReply;
MACRO_sz_xkbSetDeviceInfoReq sz_xkbSetDebuggingFlagsReq;
MACRO_sz_xkbSetDeviceInfoReq sz_xkbSetDeviceInfoReq;
MACRO_sz_xkbSetGeometryReq sz_xkbSetGeometryReq;
MACRO_sz_xkbSetIndicatorMapReq sz_xkbSetIndicatorMapReq;
MACRO_XkbSetMapResizeTypes sz_xkbSetMapReq;
MACRO_sz_xkbSetNamedIndicatorReq sz_xkbSetNamedIndicatorReq;
MACRO_sz_xkbGetNamesReply sz_xkbSetNamesReq;
MACRO_sz_xkbOverlayKeyWireDesc sz_xkbShapeDoodadWireDesc;
MACRO_sz_xkbOutlineWireDesc sz_xkbShapeWireDesc;
MACRO_sz_xkbStateNotify sz_xkbStateNotify;
MACRO_sz_xkbSymInterpretWireDesc sz_xkbSymInterpretWireDesc;
MACRO_sz_xkbSymMapWireDesc sz_xkbSymMapWireDesc;
MACRO_sz_xkbTextDoodadWireDesc sz_xkbTextDoodadWireDesc;
MACRO_sz_xkbUseExtensionReq sz_xkbUseExtensionReply;
MACRO_sz_xkbUseExtensionReq sz_xkbUseExtensionReq;
MACRO_sz_xkbSymMapWireDesc sz_xkbVModMapWireDesc;
MACRO_sz_xkmBehaviorDesc sz_xkmActionDesc;
MACRO_sz_xkmAnyDoodadDesc sz_xkmAnyDoodadDesc;
MACRO_sz_xkmBehaviorDesc sz_xkmBehaviorDesc;
MACRO_sz_xkmDoodadDesc sz_xkmDoodadDesc;
MACRO__XKMFORMAT sz_xkmFileInfo;
MACRO_sz_xkmKeySymMapDesc sz_xkmGeometryDesc;
MACRO_sz_xkmIndicatorDoodadDesc sz_xkmIndicatorDoodadDesc;
MACRO_sz_xkmKeySymMapDesc sz_xkmIndicatorMapDesc;
MACRO_sz_xkmKeyTypeDesc sz_xkmKTMapEntryDesc;
MACRO_sz_xkmKeyDesc sz_xkmKeyDesc;
MACRO_sz_xkmKeySymMapDesc sz_xkmKeySymMapDesc;
MACRO_sz_xkmKeyTypeDesc sz_xkmKeyTypeDesc;
MACRO_sz_xkmLogoDoodadDesc sz_xkmLogoDoodadDesc;
MACRO_sz_xkmModsDesc sz_xkmModsDesc;
MACRO_sz_xkmOutlineDesc sz_xkmOutlineDesc;
MACRO_sz_xkmKeyDesc sz_xkmOverlayDesc;
MACRO_sz_xkmOverlayRowDesc sz_xkmOverlayKeyDesc;
MACRO_sz_xkmOverlayRowDesc sz_xkmOverlayRowDesc;
MACRO_sz_xkmPointDesc sz_xkmPointDesc;
MACRO_sz_xkmRowDesc sz_xkmRowDesc;
MACRO_sz_xkmShapeDesc sz_xkmSectionDesc;
MACRO_sz_xkmSectionInfo sz_xkmSectionInfo;
MACRO_sz_xkmShapeDesc sz_xkmShapeDesc;
MACRO_sz_xkmOverlayRowDesc sz_xkmShapeDoodadDesc;
MACRO_sz_xkmVModMapDesc sz_xkmSymInterpretDesc;
MACRO_sz_xkmTextDoodadDesc sz_xkmTextDoodadDesc;
MACRO_sz_xkmVModMapDesc sz_xkmVModMapDesc;
MACRO_sz_xrgb sz_xrgb;
MACRO_sz_xvRational sz_xvAdaptorInfo;
MACRO_sz_xvRational sz_xvEncodingInfo;
MACRO_sz_xvFormat sz_xvFormat;
MACRO_sz_xvGetPortAttributeReply sz_xvGetPortAttributeReply;
MACRO_sz_xvGetPortAttributeReq sz_xvGetPortAttributeReq;
MACRO_sz_xvGetStillReq sz_xvGetStillReq;
MACRO_sz_xvGetVideoReq sz_xvGetVideoReq;
MACRO_sz_xvGrabPortReply sz_xvGrabPortReply;
MACRO_sz_xvGetStillReq sz_xvGrabPortReq;
MACRO_sz_xvPutStillReq sz_xvPutStillReq;
MACRO_sz_xvQueryEncodingsReq sz_xvPutVideoReq;
MACRO_sz_xvQueryAdaptorsReply sz_xvQueryAdaptorsReply;
MACRO_sz_xvQueryExtensionReq sz_xvQueryAdaptorsReq;
MACRO_sz_xvQueryBestSizeReply sz_xvQueryBestSizeReply;
MACRO_sz_xvGetPortAttributeReq sz_xvQueryBestSizeReq;
MACRO_sz_xvQueryEncodingsReply sz_xvQueryEncodingsReply;
MACRO_sz_xvQueryEncodingsReq sz_xvQueryEncodingsReq;
MACRO_sz_xvGetPortAttributeReq sz_xvQueryExtensionReply;
MACRO_sz_xvQueryExtensionReq sz_xvQueryExtensionReq;
MACRO_sz_xvRational sz_xvRational;
MACRO_sz_xvSelectPortNotifyReq sz_xvSelectPortNotifyReq;
MACRO_sz_xvSelectVideoNotifyReq sz_xvSelectVideoNotifyReq;
MACRO_sz_xvStopVideoReq sz_xvSetPortAttributeReq;
MACRO_sz_xvStopVideoReq sz_xvStopVideoReq;
MACRO_sz_xvUngrabPortReq sz_xvUngrabPortReq;
int t_accept(int fd, int resfd, struct t_call *call);
char *t_alloc(int fd, int struct_type, int fields);
int t_bind(int fd, struct t_bind *req, struct t_bind *ret);
int t_blocking(int);
int t_close(int);
int t_connect(int, struct t_call *, struct t_call *);
char *t_errlist[];
int t_error(char *);
int t_free(char *, int);
int t_getinfo(int, struct t_info *);
int t_getprotaddr(int fd, struct t_bind *boundaddr, struct t_bind *peeraddr);
int t_getstate(int);
int t_listen(int, struct t_call *);
int t_look(int fd);
int t_nerr;
int t_nonblocking(int);
int t_open(char *, int, struct t_info *);
int t_optmgmt(int fd, struct t_optmgmt *req, struct t_optmgmt *ret);
int t_rcv(int fd, char *buf, unsigned int nbytes, int *flags);
int t_rcvconnect(int, struct t_call *);
int t_rcvdis(int fd, struct t_discon *discon);
int t_rcvrel(int);
int t_rcvudata(int fd, struct t_unitdata *unitdata, int *flags);
int t_rcvuderr(int, struct t_uderr *);
int t_snd(int fd, char *buf, unsigned int nbytes, int flags);
int t_snddis(int, struct t_call *);
int t_sndrel(int fd);
int t_sndudata(int, struct t_unitdata *);
char *t_strerror(int errnum);
int t_sync(int fd);
int t_unbind(int fd);
int table(__int64, __int64, void *, __int64, u_long);
char *tag;
void *tag_qualifier_p;
acl_tag_t tag_type_d;
acl_tag_t *tag_type_p;
double tan(double x);
double tand(double x);
float tandf(float x);
long double tandl(long double x);
float tanf(float x);
double tanh(double x);
float tanhf(float x);
long double tanhl(long double x);
long double tanl(long double x);
Atom target;
XcmsColorFormat target_format;
kern_return_t task_by_unix_pid(task_t target_task, int process_id, task_t *result_task);
kern_return_t task_get_special_port(task_t task, int which_port, port_t *special_port);
kern_return_t task_info(task_t target_task, int flavor, task_info_t task_info_out, unsigned int *task_info_outCnt);
port_t task_notify_;
kern_return_t task_resume(task_t target_task);
port_t task_self_;
kern_return_t task_set_emulation(task_t target_port, vm_address_t routine_entry_pt, int routine_number);
kern_return_t task_set_special_port(task_t task, int which_port, port_t special_port);
kern_return_t task_suspend(task_t target_task);
kern_return_t task_threads(task_t target_task, thread_array_t *thread_list, unsigned int *thread_listCnt);
struct tb tb[16];
void tcb_init(struct inpcb *);
int tcdrain(int filedes);
int tcflow(int filedes, int action);
int tcflush(int filedes, int queue_selector);
int tcgetattr(int filedes, struct termios *termios_p);
pid_t tcgetpgrp(int filedes);
pid_t tcgetsid(pid_t fildes);
int tclDeleteInterpAtEnd;
int tcp_abort_if_tcbs(struct sockaddr *, int *);
int tcp_attach(struct socket *);
void tcp_canceltimers(struct tcpcb *);
struct tcpcb *tcp_close(struct tcpcb *);
void tcp_ctlinput(int, struct sockaddr *, caddr_t);
int tcp_ctloutput(int, struct socket *, int, int, struct mbuf **);
struct tcp_debug tcp_debug[100];
int tcp_debx;
int tcp_deletetcb(struct sockaddr *, struct sockaddr *, int *);
void tcp_dgtb_rcvd(struct inpcb *);
struct tcpcb *tcp_disconnect(struct tcpcb *);
void tcp_dooptions(struct tcpcb *, caddr_t, int, struct tcphdr *, int *, unsigned int *);
void tcp_drain(void);
struct tcpcb *tcp_drop(struct tcpcb *, int);
void tcp_fasttimo(void);
void tcp_init(void);
void tcp_input(struct mbuf *, int);
int tcp_mss(struct tcpcb *, u_short);
int tcp_mss_send(struct tcpcb *, struct rtentry *);
struct tcpcb *tcp_newtcpcb(struct inpcb *);
void tcp_notify(struct inpcb *, int);
int tcp_output(struct tcpcb *);
void tcp_pulloutofband(struct socket *, struct tcphdr *, struct mbuf *);
void tcp_quench(struct inpcb *);
int tcp_reass(struct tcpcb *, struct tcphdr *, struct mbuf *, caddr_t, struct mbuf *);
void tcp_respond(struct tcpcb *, struct tcphdr *, struct mbuf *, u_int, u_int, int, int, struct in6_addr *, struct in6_addr *);
void tcp_rtupdate(struct inpcb *);
void tcp_setpersist(struct tcpcb *);
void tcp_slowtimo(void);
int tcp_sosend(struct socket *, struct uio *, int, int);
struct tcpcb *tcp_timers(struct tcpcb *, int);
void tcp_trace(__int16, __int16, struct tcpcb *, const struct in6_addr *, const struct in6_addr *, const struct tcphdr *, u_int, int);
struct tcpcb *tcp_usrclosed(struct tcpcb *);
int tcp_usrreq(struct socket *, int, struct mbuf *, struct mbuf *, struct mbuf *);
void tcp_xmit_timer(struct tcpcb *);
int tcsendbreak(int filedes, int duration);
int tcsetattr(int filedes, int optional_actions, struct termios *termios_p);
int tcsetpgrp(int filedes, pid_t pgrp_id);
void *tdelete(const void *key, void **rootp, int (*compar)(const void *, const void *));
__int64 telldir(DIR *dir_pointer);
TemplateClassRec templateClassRec;
WidgetClass templateWidgetClass;
char *tempnam(const char *directory, const char *prefix);
__int16 term_errno;
char term_parm_err[];
void termerr(void);
unsigned __int8 test_value;
char **text;
TextClassRec textClassRec;
TextSinkClassRec textSinkClassRec;
WidgetClass textSinkObjectClass;
TextSrcClassRec textSrcClassRec;
WidgetClass textSrcObjectClass;
WidgetClass textWidgetClass;
XTextProperty *text_prop;
XTextProperty *text_prop_return;
void *tfind(const void *key, void *const *rootp, int (*compar)(const void *, const void *));
int tgetent(char *bp, const char *name);
int tgetflag(char *);
int tgetnum(char *);
char *tgetstr(char *, char **);
char *tgoto(const char *, int, int);
int this_device_mode;
kern_return_t thread_abort(thread_t target_thread);
kern_return_t thread_create(task_t parent_task, thread_t *child_thread);
kern_return_t thread_get_special_port(thread_t thread, int which_port, port_t *special_port);
kern_return_t thread_get_state(thread_t target_thread, int flavor, thread_state_t old_state, unsigned int *old_stateCnt);
kern_return_t thread_info(thread_t target_thread, int flavor, thread_info_t thread_info_out, unsigned int *thread_info_outCnt);
port_t thread_reply_;
kern_return_t thread_resume(thread_t target_thread);
kern_return_t thread_set_special_port(thread_t thread, int which_port, port_t special_port);
kern_return_t thread_set_state(thread_t target_thread, int flavor, thread_state_t new_state, unsigned int new_stateCnt);
kern_return_t thread_suspend(thread_t target_thread);
kern_return_t thread_terminate(thread_t target_thread);
int threshold;
MACRO_tiNil tiNil;
int tigetflag(char *);
int tigetnum(char *);
char *tigetstr(char *);
Pixmap tile;
time_t time(time_t *tloc);
int time_lock(struct pr_passwd *);
int time_lock_es(struct es_passwd *prpwd);
int timeout;
int timer_create(clockid_t clock_id, struct sigevent *evp, timer_t *timerid);
int timer_delete(timer_t);
int timer_getoverrun(timer_t);
int timer_gettime(timer_t, struct itimerspec *);
int timer_settime(timer_t, int, const struct itimerspec *, struct itimerspec *);
clock_t times(struct tms *buffer);
Time timestamp;
__int64 timezone;
void tinputfd(int);
int tinx;
int tis_allocator_mutex_init(void *handle, void *(*allocator)(size_t size, void *arg), void *arg, const char *name, unsigned int name_arg, unsigned __int64 flags);
int tis_cond_broadcast(pthread_cond_t *cond);
int tis_cond_destroy(pthread_cond_t *cond);
int tis_cond_init(pthread_cond_t *cond);
int tis_cond_signal(pthread_cond_t *cond);
int tis_cond_timedwait(pthread_cond_t *cond, pthread_mutex_t *mutex, const struct timespec *abstime);
int tis_cond_wait(pthread_cond_t *cond, pthread_mutex_t *mutex);
int *tis_errno_get_addr(void);
void tis_errno_set_value(int value);
int tis_get_expiration(const struct timespec *delta, struct timespec *abstime);
void *tis_getspecific(pthread_key_t key);
int tis_key_create(pthread_key_t *key, void (*destructor)(void *));
int tis_key_create_new(pthread_key_t *key, __pthreadConstructor_t constructor, __pthreadExtDestructor_t destructor, int flags);
int tis_key_delete(pthread_key_t key);
int tis_lock_global(void);
int tis_mutex_destroy(pthread_mutex_t *mutex);
int tis_mutex_init(pthread_mutex_t *mutex);
int tis_mutex_initwithname(pthread_mutex_t *mutex, const char *name, int arg, int flags);
int tis_mutex_lock(pthread_mutex_t *mutex);
int tis_mutex_trylock(pthread_mutex_t *mutex);
int tis_mutex_unblock(pthread_mutex_t *mutex);
int tis_mutex_unlock(pthread_mutex_t *mutex);
int tis_once(pthread_once_t *once_control, void (*init_routine)(void));
int tis_raise(int sig);
int tis_read_lock(tis_rwlock_t *lock);
int tis_read_trylock(tis_rwlock_t *lock);
int tis_read_unlock(tis_rwlock_t *lock);
int tis_rwlock_destroy(tis_rwlock_t *lock);
int tis_rwlock_init(tis_rwlock_t *lock);
pthread_t tis_self(void);
int tis_setcancelstate(int state, int *oldstate);
int tis_setspecific(pthread_key_t key, const void *value);
void tis_testcancel(void);
int tis_unlock_global(void);
int tis_write_lock(tis_rwlock_t *lock);
int tis_write_trylock(tis_rwlock_t *lock);
int tis_write_unlock(tis_rwlock_t *lock);
void tis_yield(void);
FILE *tmpfile(void);
char *tmpnam(char *s);
struct d_toc to_buff[];
XrmValuePtr to_in_out;
XrmValuePtr to_return;
String to_type;
int to_unit_type;
XrmValue *to_val;
int toascii(int c);
char toc_buf[];
ToggleClassRec toggleClassRec;
WidgetClass toggleWidgetClass;
int tolower(int c);
TopLevelShellClassRec topLevelShellClassRec;
WidgetClass topLevelShellWidgetClass;
Dimension top_bottom_margin;
Pixel *top_shadow;
int total_auths(void);
int touchwin(WINDOW *);
int toupper(int c);
wint_t towctrans(wint_t wc, wctrans_t conversion_handle);
wint_t towlower(wint_t wc);
wint_t towupper(wint_t wc);
char *tparm(char *, ...);
int tputs(const char *, int, int (*)(int));
MACRO_tqNil tqArray;
MACRO_tqNil tqArray_64;
MACRO_tqNil tqConst;
MACRO_tqNil tqFar;
MACRO_tqNil tqMax;
MACRO_tqNil tqNil;
MACRO_tqNil tqProc;
MACRO_tqNil tqPtr;
MACRO_tqNil tqRef;
MACRO_tqNil tqShar;
MACRO_tqNil tqSharArr_64;
MACRO_tqNil tqVol;
int tracebsize;
int tracelost;
int traceoff(void);
int traceon(void);
int traceopens;
XmDropTransferEntryRec *transfers;
TransientShellClassRec transientShellClassRec;
WidgetClass transientShellWidgetClass;
TreeClassRec treeClassRec;
WidgetClass treeWidgetClass;
$B78841CC15384C7642A852FC286464A6 true;
double trunc(double x);
int truncate(const char *path, off_t length);
float truncf(float x);
long double truncl(long double x);
char *trustedevent[];
void *tsearch(const void *key, void **rootp, int (*compar)(const void *, const void *));
int tty_tagtyped(const char *);
char *ttyname(int);
int ttyslot(void);
char ttytype[];
void twalk(const void *root, void (*action)(const void *, VISIT, int));
String type;
acl_type_t type_d;
Atom *type_return;
unsigned __int64 type_to_file(struct obj *, unsigned __int64);
int typeahead(int);
char *tzname[];
void tzset(void);
union u_spcl u_spcl;
int uadmin(int cmd, int fcn, int mdep);
useconds_t ualarm(useconds_t useconds, useconds_t interval);
void udp_ctlinput(int, struct sockaddr *, caddr_t);
void udp_init(void);
void udp_input(struct mbuf *, int);
void udp_notify(struct inpcb *, int);
int udp_output(struct inpcb *, struct mbuf *, struct mbuf *, struct mbuf *);
struct mbuf *udp_saveopt(caddr_t, int, int);
void udp_slowtimo(void);
int udp_usrreq(struct socket *, int, struct mbuf *, struct mbuf *, struct mbuf *);
unsigned int uitrunc(double x);
__int64 ulimit(int command, ...);
MACRO_ult ult_FIRST;
MACRO_ult ult_LAST;
mode_t umask(mode_t cmask);
int umount(char *, int);
int uname(struct utsname *name);
XmString underline;
int ungetc(int c, FILE *stream);
wint_t ungetwc(wint_t wchar, FILE *stream);
int ungetwch(wchar_t);
kern_return_t unix_pid(task_t target_task, int *process_id);
unsigned __int16 *unknown_length;
XmStringComponentType *unknown_tag;
unsigned __int8 **unknown_value;
int unlink(const char *path);
int unlockpt(int mastfd);
int unordered(double x, double y);
int unorderedf(float x, float y);
int unorderedl(long double x, long double y);
int unsigned_leb128_decode(char *, unsigned __int64 *);
XtGCMask unused_mask;
void unwind(PCONTEXT pcontext, PRUNTIME_FUNCTION prf);
void upgrade_dv_fields(const struct dev_field *, const struct dev_flag *, struct esdev_field *, struct esdev_flag *);
void upgrade_fi_fields(const struct f_field *, const struct f_flag *, struct esfi_field *, struct esfi_flag *);
void upgrade_pr_fields(const struct pr_field *, const struct pr_flag *, struct espw_field *, struct espw_flag *);
void upgrade_tc_fields(const struct t_field *, const struct t_flag *, struct estc_field *, struct estc_flag *);
Boolean use_uppercase_format;
struct symr *user_symbol_alloc(void);
void user_symbol_free(void);
struct namepair user_type[];
union auxu *user_type_alloc(void);
AUXU usertype[];
int usleep(useconds_t useconds);
int ustat(dev_t, struct ustat *);
__int64 uswitch(__int64 cmd, __int64 mask);
int utime(const char *path, const struct utimbuf *times);
int utimes(const char *, struct timeval *);
void utmpname(char *file);
struct utsname utsname;
int v_value;
void va_end(va_list argp);
void *valloc(size_t size);
int *valuators;
XtPointer value;
MACRO_valueNil valueNil;
XtGCMask value_mask;
String *value_names;
XtPointer *value_return;
unsigned __int64 valuemask;
XGCValues *values;
VendorShellClassRec vendorShellClassRec;
WidgetClass vendorShellWidgetClass;
__int64 version;
int versw(ulong high_vers, ulong low_vers);
Widget vertical_scrollbar;
char *vfop_name[64];
pid_t vfork(void);
int vfprintf(FILE *stream, const char *format, va_list printarg);
int vfwprintf(FILE *, const wchar_t *, va_list);
void vidupdate(chtype, chtype, int (*)(int));
ViewportClassRec viewportClassRec;
WidgetClass viewportWidgetClass;
__int64 vinfo_mask;
XVisualInfo *vinfo_template;
Visual *visual;
kern_return_t vm_allocate(vm_task_t target_task, vm_address_t *address, vm_size_t size, boolean_t anywhere);
kern_return_t vm_copy(vm_task_t target_task, vm_address_t source_address, vm_size_t size, vm_address_t dest_address);
kern_return_t vm_deallocate(vm_task_t target_task, vm_address_t address, vm_size_t size);
kern_return_t vm_inherit(vm_task_t target_task, vm_address_t address, vm_size_t size, vm_inherit_t new_inheritance);
kern_return_t vm_machine_attribute(vm_task_t target_task, vm_address_t address, vm_size_t size, vm_machine_attribute_t attribute, vm_machine_attribute_val_t *value);
vm_size_t vm_page_size;
MACRO_vm vm_pager_null;
kern_return_t vm_protect(vm_task_t target_task, vm_address_t address, vm_size_t size, boolean_t set_maximum, vm_prot_t new_protection);
kern_return_t vm_read(vm_task_t target_task, vm_address_t address, vm_size_t size, pointer_t *data, unsigned int *dataCnt);
kern_return_t vm_region(vm_task_t target_task, vm_address_t *address, vm_size_t *size, vm_prot_t *protection, vm_prot_t *max_protection, vm_inherit_t *inheritance, boolean_t *is_shared, memory_object_name_t *object_name, vm_offset_t *offset);
kern_return_t vm_statistics(vm_task_t target_task, vm_statistics_data_t *vm_stats);
kern_return_t vm_write(vm_task_t target_task, vm_address_t address, pointer_t data, unsigned int dataCnt);
int vmac_entries;
struct vmac_ifnet **vmac_ifnet;
char vmod_form[64];
int vn_maxprivate;
int vprintf(const char *format, va_list printarg);
__int64 vrmlen;
int vsnprintf(char *s, size_t n, const char *format, va_list printarg);
int vsprintf(char *string, const char *format, va_list printarg);
int vswprintf(wchar_t *wstr, size_t n, const wchar_t *format, va_list printarg);
int vt100_emulation;
int vwprintf(const wchar_t *format, va_list printarg);
Window w;
int waddch(WINDOW *, const chtype);
int waddwch(WINDOW *, chtype);
int waddwchnstr(WINDOW *, const chtype *, int);
pid_t wait(int *status_location);
pid_t wait3(int *status_location, int options, struct rusage *resource_usage);
pid_t wait4(pid_t, union wait *, int, struct rusage *);
int waitid(idtype_t idtype, id_t id, siginfo_t *infop, int options);
pid_t waitpid(pid_t process_id, int *status_location, int options);
XPointer *watch_data;
int wattroff(WINDOW *, int);
int wattron(WINDOW *, int);
int wattrset(WINDOW *, int);
wchar_t wchar_t;
int wclrtobot(WINDOW *);
int wclrtoeol(WINDOW *);
size_t wcrtomb(char *s, wchar_t wc, mbstate_t *ps);
wchar_t *wcscat(wchar_t *wcstring1, const wchar_t *wcstring2);
wchar_t *wcschr(const wchar_t *wcstring, wchar_t widecharacter);
int wcscmp(const wchar_t *wcstring1, const wchar_t *wcstring2);
int wcscoll(const wchar_t *wcs1, const wchar_t *wcs2);
wchar_t *wcscpy(wchar_t *wcstring1, const wchar_t *wcstring2);
size_t wcscspn(const wchar_t *wcstring1, const wchar_t *wcstring2);
size_t wcsftime(wchar_t *wcs, size_t maxsize, const wchar_t *format, const struct tm *timeptr);
size_t wcslen(const wchar_t *wstr);
wchar_t *wcsncat(wchar_t *wcstring1, const wchar_t *wcstring2, size_t number);
int wcsncmp(const wchar_t *wcstring1, const wchar_t *wcstring2, size_t number);
wchar_t *wcsncpy(wchar_t *wcstring1, const wchar_t *wcstring2, size_t number);
wchar_t *wcspbrk(const wchar_t *wcs1, const wchar_t *wcs2);
wchar_t *wcsrchr(const wchar_t *wcstring, wchar_t widecharacter);
size_t wcsrtombs(char *s, const wchar_t **pwcs, size_t n, mbstate_t *ps);
size_t wcsspn(const wchar_t *wcstring1, const wchar_t *wcstring2);
wchar_t *wcsstr(const wchar_t *s1, const wchar_t *s2);
double wcstod(const wchar_t *ws, wchar_t **endptr);
wchar_t *wcstok(wchar_t *ws1, const wchar_t *ws2);
wchar_t *wcstok_r(wchar_t *, const wchar_t *, wchar_t **);
__int64 wcstol(const wchar_t *nptr, wchar_t **endptr, int base);
long double wcstold(const wchar_t *ws, wchar_t **endptr);
size_t wcstombs(char *s, const wchar_t *pwcs, size_t n);
unsigned __int64 wcstoul(const wchar_t *nptr, wchar_t **endptr, int base);
wchar_t *wcswcs(const wchar_t *wcstring1, const wchar_t *wcstring2);
int wcswidth(const wchar_t *pwcs, size_t n);
size_t wcsxfrm(wchar_t *ws1, const wchar_t *ws2, size_t n);
int wctob(wint_t wc);
int wctomb(char *s, wchar_t wc);
wctrans_t wctrans(const char *property);
wctype_t wctype(const char *property);
int wcwidth(wchar_t wc);
int wdelch(WINDOW *);
int wechowchar(WINDOW *, chtype);
chtype wgetbkgd(WINDOW *);
int wgetch(WINDOW *);
int wgetnwstr(WINDOW *, wchar_t *, int);
int wgetstr(WINDOW *, char *);
int wgetwch(WINDOW *);
int wgetwstr(WINDOW *, wchar_t *);
Drawable which_screen;
XPointer white_adjust_client_data;
XcmsWhiteAdjustProc white_adjust_proc;
int widest_auth(void);
Widget widget;
WidgetClass widgetClass;
WidgetClassRec widgetClassRec;
WidgetClass widget_class;
Dimension width;
unsigned int *width_return;
int *win_x_return;
int *win_y_return;
chtype winch(WINDOW *);
Window window;
XWindowAttributes *window_attributes_return;
unsigned int window_class;
XTextProperty *window_name;
int winsch(WINDOW *, chtype);
int winsnwstr(WINDOW *, wchar_t *, int);
int winswch(WINDOW *, chtype);
chtype winwch(WINDOW *);
int winwchnstr(WINDOW *, chtype *, int);
int winwchstr(WINDOW *, chtype *);
WMShellClassRec wmShellClassRec;
WidgetClass wmShellWidgetClass;
XWMHints *wm_hints;
wchar_t *wmemchr(const wchar_t *wstr, wchar_t wc, size_t n);
int wmemcmp(const wchar_t *wstr1, const wchar_t *wstr2, size_t n);
wchar_t *wmemcpy(wchar_t *wstr1, const wchar_t *wstrs2, size_t n);
wchar_t *wmemmove(wchar_t *wstr1, const wchar_t *wstr2, size_t n);
wchar_t *wmemset(wchar_t *wstr, wchar_t wc, size_t n);
void wmouse_position(WINDOW *, int *, int *);
int wmove(WINDOW *, int, int);
int wnoutrefresh(WINDOW *);
int wordexp(const char *words, wordexp_t *pwordexp, int flags);
void wordfree(wordexp_t *pwordexp);
Widget work_region;
int wprintf(const wchar_t *format, ...);
int wprintw(WINDOW *, char *, ...);
int wrefresh(WINDOW *);
ssize_t write(int filedes, const void *buffer, size_t nbytes);
int write_authorizations(const char *, const char **, int);
void write_io_port(io_handle_t dev_addr, int width, int type, __int64 data);
unsigned int write_rnd(unsigned int rnd);
ssize_t writev(int filedes, const struct iovec *iov, int iov_count);
__int64 ws_graphics;
int wscanf(const wchar_t *format, ...);
int wscanw(WINDOW *, char *, ...);
int wsetscrreg(WINDOW *, int, int);
int wstandend(WINDOW *);
int wstandout(WINDOW *);
int x;
int x1;
void x11_usleep();
int x2;
MACRO_xFalse xFalse;
MACRO_xTrue xTrue;
int *x_hot_return;
int *x_return;
void xcdr_pvd(const char *, struct iso9660_pvd *);
int xdr_PROPACCESSargs();
int xdr_PROPACCESSres();
int xdr_PROPDEL3args();
int xdr_PROPDELargs();
int xdr_PROPGET3args();
int xdr_PROPGETATTRres();
int xdr_PROPGETargs();
int xdr_PROPGETres();
int xdr_PROPGETresok();
int xdr_PROPSET3args();
int xdr_PROPSETargs();
int xdr_PROPSETres();
int xdr_addrmask(XDR *, struct addrmask *);
int xdr_array(XDR *, char **, u_int *, u_int, u_int, xdrproc_t);
int xdr_attrstat(XDR *, struct nfsattrstat *);
int xdr_authunix_parms(XDR *, struct authunix_parms *);
int xdr_bool(XDR *, int *);
int xdr_bp_address(XDR *, bp_address *);
int xdr_bp_fileid_t(XDR *, bp_fileid_t *);
int xdr_bp_getfile_arg(XDR *, bp_getfile_arg *);
int xdr_bp_getfile_res(XDR *, bp_getfile_res *);
int xdr_bp_machine_name_t(XDR *, bp_machine_name_t *);
int xdr_bp_path_t(XDR *, bp_path_t *);
int xdr_bp_whoami_arg(XDR *, bp_whoami_arg *);
int xdr_bp_whoami_res(XDR *, bp_whoami_res *);
int xdr_bytes(XDR *, char **, u_int *, u_int);
int xdr_callhdr(XDR *, struct rpc_msg *);
int xdr_callmsg(XDR *, struct rpc_msg *);
int xdr_char(XDR *, char *);
int xdr_creatargs(XDR *, struct nfscreatargs *);
int xdr_cryptkeyarg(XDR *, cryptkeyarg *);
int xdr_cryptkeyres(XDR *, cryptkeyres *);
bool xdr_datum(XDR *, datum *);
int xdr_des_block(XDR *, des_block *);
void xdr_destroy(XDR *xdrs);
int xdr_diropargs(XDR *, struct nfsdiropargs *);
int xdr_diropres(XDR *, struct nfsdiropres *);
int xdr_double(XDR *, double *);
int xdr_drok(XDR *, struct nfsdrok *);
int xdr_enum(XDR *, int *);
int xdr_env_string(XDR *, env_string *);
int xdr_etheraddrs(XDR *, struct etheraddrs *);
int xdr_etherhbody(XDR *, struct etherhmem *);
int xdr_etherhmem(XDR *, struct etherhmem **);
int xdr_etherhtable(XDR *, struct etherhmem **);
int xdr_etherstat(XDR *, struct etherstat *);
int xdr_exports(XDR *, struct exports **);
int xdr_fattr(XDR *, struct nfsfattr *);
int xdr_fhandle(XDR *, fhandle_t *);
int xdr_fhandle3(XDR *, fhandle3 *);
int xdr_fhstatus(XDR *, struct fhstatus *);
int xdr_flags();
int xdr_float(XDR *, float *);
void xdr_free(xdrproc_t proc, char *objp);
int xdr_getcredres(XDR *, getcredres *);
u_int xdr_getpos(XDR *xdrs);
int xdr_getquota_args(XDR *, struct getquota_args *);
int xdr_getquota_rslt(XDR *, struct getquota_rslt *);
int xdr_getrddirres(XDR *, struct nfsrddirres *);
int xdr_how_to_boot(XDR *, how_to_boot *);
int xdr_hw_addr(XDR *, hw_addr *);
int xdr_hyper(XDR *, longlong_t *);
__int64 *xdr_inline(XDR *xdrs, int len);
int xdr_int(XDR *, int *);
int xdr_ip_addr_arg(XDR *, ip_addr_arg *);
int xdr_ip_addr_t(XDR *, ip_addr_t *);
int xdr_ip_alloc_arg(XDR *, ip_alloc_arg *);
int xdr_ip_alloc_res(XDR *, ip_alloc_res *);
int xdr_ip_status(XDR *, ip_status *);
int xdr_ip_toname_res(XDR *, ip_toname_res *);
int xdr_keybuf(XDR *, keybuf);
int xdr_keystatus(XDR *, keystatus *);
int xdr_linkargs(XDR *, struct nfslinkargs *);
int xdr_long(XDR *, __int64 *);
int xdr_longlong_t(XDR *, longlong_t *);
int xdr_mon(XDR *, mon *);
int xdr_mon_id(XDR *, mon_id *);
int xdr_mountlist(XDR *, struct mountlist **);
int xdr_mountres3(XDR *, mountres3 *);
int xdr_mountres3_ok(XDR *, mountres3_ok *);
int xdr_mountstat3(XDR *, mountstat3 *);
int xdr_my_id(XDR *, my_id *);
int xdr_nameptr();
int xdr_net_type(XDR *, net_type *);
int xdr_netnamestr(XDR *, netnamestr *);
int xdr_netobj(XDR *, struct netobj *);
int xdr_new_getrddirres(XDR *, struct nfsrddirres *);
int xdr_nfs_fh3();
int xdr_nfs_handle(XDR *, nfs_handle *);
int xdr_opaque(XDR *, caddr_t, u_int);
int xdr_opaque_auth(XDR *, struct opaque_auth *);
int xdr_passwd(XDR *, struct passwd *);
int xdr_path(XDR *, char **);
int xdr_pmap(XDR *, struct pmap *);
int xdr_pmaplist(XDR *, struct pmaplist **);
int xdr_pnp_acquire_arg(XDR *, pnp_acquire_arg *);
int xdr_pnp_errcode(XDR *, pnp_errcode *);
int xdr_pnp_setup_arg(XDR *, pnp_setup_arg *);
int xdr_pnp_whoami_arg(XDR *, pnp_whoami_arg *);
int xdr_pnp_whoami_ret(XDR *, pnp_whoami_ret *);
int xdr_pointer(XDR *, char **, u_int, xdrproc_t);
int xdr_prlistname_args();
int xdr_propattr();
int xdr_propstat();
int xdr_prpw_admin_change_req_v3(XDR *, struct prpw_admin_change_req_v3 *);
int xdr_prpw_query_fields_req_v3(XDR *, struct prpw_query_fields_req_v3 *);
int xdr_prpw_update_req_v1(XDR *, struct prpw_update_req_v1 *);
int xdr_prpw_update_req_v3(XDR *, struct prpw_update_req_v3 *);
int xdr_prpw_update_rsp_v1(XDR *, struct prpw_update_rsp_v1 *);
int xdr_prpw_update_rsp_v3(XDR *, struct prpw_update_rsp_v3 *);
int xdr_prpw_v3_req_v1(XDR *, struct prpw_update_req_v3 *);
int xdr_prpw_v3_rsp_v1(XDR *, struct prpw_update_rsp_v3 *);
int xdr_put_old_rddirres(XDR *, struct nfsrddirres *);
int xdr_putrddirres(XDR *, struct nfsrddirres *);
int xdr_pwdnm(XDR *, pwdnm *);
int xdr_rddirargs(XDR *, struct nfsrddirargs *);
int xdr_rdlnres(XDR *, struct nfsrdlnres *);
int xdr_rdresult(XDR *, struct nfsrdresult *);
int xdr_readargs(XDR *, struct nfsreadargs *);
int xdr_reference(XDR *, char **, u_int, xdrproc_t);
int xdr_replymsg(XDR *, struct rpc_msg *);
int xdr_res(XDR *, res *);
int xdr_res_handle(XDR *, res_handle *);
int xdr_rex_result(XDR *, struct rex_result *);
int xdr_rex_start(XDR *, struct rex_start *);
int xdr_rex_ttymode(XDR *, struct rex_ttymode *);
int xdr_rex_ttysize(XDR *, struct ttysize *);
int xdr_rmtcall_args(XDR *, struct rmtcallargs *);
int xdr_rmtcallres(XDR *, struct rmtcallres *);
int xdr_rnmargs(XDR *, struct nfsrnmargs *);
int xdr_rquota(XDR *, struct rquota *);
int xdr_rrok(XDR *, struct nfsrrok *);
int xdr_saargs(XDR *, struct nfssaargs *);
int xdr_sattr(XDR *, struct nfssattr *);
int xdr_short(XDR *, __int16 *);
int xdr_slargs(XDR *, struct nfsslargs *);
int xdr_sm_name(XDR *, sm_name *);
int xdr_sm_stat(XDR *, sm_stat *);
int xdr_sm_stat_res(XDR *, sm_stat_res *);
int xdr_sprayarr(XDR *, struct sprayarr *);
int xdr_spraycumul(XDR *, struct spraycumul *);
int xdr_srok(XDR *, struct nfssrok *);
int xdr_statfs(XDR *, struct nfsstatfs *);
int xdr_stats(XDR *, struct stats *);
int xdr_statsswtch(XDR *, struct statsswtch *);
int xdr_statstime(XDR *, statstime *);
int xdr_statsvar(XDR *, statsvar *);
int xdr_status(XDR *, status *);
int xdr_string(XDR *, char **, u_int);
int xdr_timeval(XDR *, struct timeval *);
int xdr_u_char(XDR *, unsigned __int8 *);
int xdr_u_hyper(XDR *, u_longlong_t *);
int xdr_u_int(XDR *, unsigned int *);
int xdr_u_long(XDR *, unsigned __int64 *);
int xdr_u_longlong_t(XDR *, u_longlong_t *);
int xdr_u_short(XDR *, unsigned __int16 *);
int xdr_union(XDR *, int *, char *, struct xdr_discrim *, int (*)());
int xdr_unixcred(XDR *, unixcred *);
int xdr_val();
int xdr_vector(XDR *, char *, u_int, u_int, xdrproc_t);
int xdr_void();
int xdr_wrapstring(XDR *, char **);
int xdr_writeargs(XDR *, struct nfswriteargs *);
int xdr_yp_buf(XDR *, yp_buf *);
bool xdr_yp_inaddr(XDR *, struct in_addr *);
bool xdr_ypall(XDR *, struct ypall_callback *);
bool xdr_ypbind_resp(XDR *, struct ypbind_resp *);
bool xdr_ypbind_setdom(XDR *, struct ypbind_setdom *);
int xdr_ypdelete_args(XDR *, ypdelete_args *);
bool xdr_ypdomain_wrap_string(XDR *, char **);
bool xdr_ypmap_parms(XDR *, struct ypmap_parms *);
bool xdr_ypmap_wrap_string(XDR *, char **);
bool xdr_ypowner_wrap_string(XDR *, char **);
int xdr_yppasswd(XDR *, struct yppasswd *);
bool xdr_yppushresp_xfr(XDR *, struct yppushresp_xfr *);
bool xdr_ypreq_key(XDR *, struct ypreq_key *);
bool xdr_ypreq_nokey(XDR *, struct ypreq_nokey *);
bool xdr_ypreq_xfr(XDR *, struct ypreq_xfr *);
bool xdr_ypresp_key_val(XDR *, struct ypresp_key_val *);
bool xdr_ypresp_maplist(XDR *, struct ypresp_maplist *);
bool xdr_ypresp_master(XDR *, struct ypresp_master *);
bool xdr_ypresp_order(XDR *, struct ypresp_order *);
bool xdr_ypresp_val(XDR *, struct ypresp_val *);
int xdr_ypupdate_args(XDR *, ypupdate_args *);
void xdrmem_create(XDR *xdrs, char *addr, u_int size, enum xdr_op op);
void xdrrec_create(XDR *xdrs, u_int sendsize, u_int recvsize, char *handle, int (*readit)(), int (*writeit)());
int xdrrec_endofrecord(XDR *, int);
int xdrrec_eof(XDR *);
int xdrrec_skiprecord(XDR *);
void xdrstdio_create(XDR *xdrs, FILE *file, enum xdr_op op);
MACRO_xieEarliestMinorVersion xieEarliestMinorVersion;
MACRO_xieElemImportClientLUT xieElemArithmetic;
MACRO_xieElemImportClientLUT xieElemBandCombine;
MACRO_xieElemImportClientLUT xieElemBandExtract;
MACRO_xieElemImportClientLUT xieElemBandSelect;
MACRO_xieElemImportClientLUT xieElemBlend;
MACRO_xieElemImportClientLUT xieElemCompare;
MACRO_xieElemImportClientLUT xieElemConstrain;
MACRO_xieElemImportClientLUT xieElemConvertFromIndex;
MACRO_xieElemImportClientLUT xieElemConvertFromRGB;
MACRO_xieElemImportClientLUT xieElemConvertToIndex;
MACRO_xieElemImportClientLUT xieElemConvertToRGB;
MACRO_xieElemImportClientLUT xieElemConvolve;
MACRO_xieElemImportClientLUT xieElemDither;
MACRO_xieElemImportClientLUT xieElemExportClientHistogram;
MACRO_xieElemImportClientLUT xieElemExportClientLUT;
MACRO_xieElemImportClientLUT xieElemExportClientPhoto;
MACRO_xieElemImportClientLUT xieElemExportClientROI;
MACRO_xieElemImportClientLUT xieElemExportDrawable;
MACRO_xieElemImportClientLUT xieElemExportDrawablePlane;
MACRO_xieElemImportClientLUT xieElemExportLUT;
MACRO_xieElemImportClientLUT xieElemExportPhotomap;
MACRO_xieElemImportClientLUT xieElemExportROI;
MACRO_xieElemImportClientLUT xieElemGeometry;
MACRO_xieElemImportClientLUT xieElemImportClientLUT;
MACRO_xieElemImportClientLUT xieElemImportClientPhoto;
MACRO_xieElemImportClientLUT xieElemImportClientROI;
MACRO_xieElemImportClientLUT xieElemImportDrawable;
MACRO_xieElemImportClientLUT xieElemImportDrawablePlane;
MACRO_xieElemImportClientLUT xieElemImportLUT;
MACRO_xieElemImportClientLUT xieElemImportPhotomap;
MACRO_xieElemImportClientLUT xieElemImportROI;
MACRO_xieElemImportClientLUT xieElemLogical;
MACRO_xieElemImportClientLUT xieElemMatchHistogram;
MACRO_xieElemImportClientLUT xieElemMath;
MACRO_xieElemImportClientLUT xieElemPasteUp;
MACRO_xieElemImportClientLUT xieElemPoint;
MACRO_xieElemImportClientLUT xieElemUnconstrain;
MACRO_xieErrNoColorList xieErrNoColorList;
MACRO_xieErrNoColorList xieErrNoFlo;
MACRO_xieErrNoFloAccess xieErrNoFloAccess;
MACRO_xieErrNoFloAccess xieErrNoFloAlloc;
MACRO_xieErrNoFloAccess xieErrNoFloColorList;
MACRO_xieErrNoFloAccess xieErrNoFloColormap;
MACRO_xieErrNoFloAccess xieErrNoFloDomain;
MACRO_xieErrNoFloAccess xieErrNoFloDrawable;
MACRO_xieErrNoFloAccess xieErrNoFloElement;
MACRO_xieErrNoFloAccess xieErrNoFloGC;
MACRO_xieErrNoFloAccess xieErrNoFloID;
MACRO_xieErrNoFloAccess xieErrNoFloImplementation;
MACRO_xieErrNoFloAccess xieErrNoFloLUT;
MACRO_xieErrNoFloAccess xieErrNoFloLength;
MACRO_xieErrNoFloAccess xieErrNoFloMatch;
MACRO_xieErrNoFloAccess xieErrNoFloOperator;
MACRO_xieErrNoFloAccess xieErrNoFloPhotomap;
MACRO_xieErrNoFloAccess xieErrNoFloROI;
MACRO_xieErrNoFloAccess xieErrNoFloSource;
MACRO_xieErrNoFloAccess xieErrNoFloTechnique;
MACRO_xieErrNoFloAccess xieErrNoFloValue;
MACRO_xieErrNoColorList xieErrNoLUT;
MACRO_xieErrNoColorList xieErrNoPhotoflo;
MACRO_xieErrNoColorList xieErrNoPhotomap;
MACRO_xieErrNoColorList xieErrNoPhotospace;
MACRO_xieErrNoColorList xieErrNoROI;
MACRO_xieEvnNoColorAlloc xieEvnNoColorAlloc;
MACRO_xieEvnNoColorAlloc xieEvnNoDecodeNotify;
MACRO_xieEvnNoColorAlloc xieEvnNoExportAvailable;
MACRO_xieEvnNoColorAlloc xieEvnNoImportObscured;
MACRO_xieEvnNoColorAlloc xieEvnNoPhotofloDone;
MACRO_xieLatestMinorVersion xieLatestMinorVersion;
MACRO_xieMajorVersion xieMajorVersion;
MACRO_xieMaxElem xieMaxElem;
MACRO_xieMinorVersion xieMinorVersion;
MACRO_xieErrNoColorList xieNumErrors;
MACRO_xieEvnNoColorAlloc xieNumEvents;
MACRO_xieNumFloErrors xieNumFloErrors;
MACRO_xieNumProtoReq xieNumProtoReq;
MACRO_xieValInactive xieValActive;
MACRO_xieValAdd xieValAdd;
MACRO_xieValAlignable xieValAlignable;
MACRO_xieValDefault xieValAll;
MACRO_xieValAlignable xieValArbitrary;
MACRO_xieValBandByPixel xieValBandByPixel;
MACRO_xieValBandByPixel xieValBandByPlane;
MACRO_xieValCIELabToRGB xieValCIELabToRGB;
MACRO_xieValCIELabToRGB xieValCIEXYZToRGB;
MACRO_xieValDefault xieValColorAlloc;
MACRO_xieValColorAllocDefault xieValColorAllocAll;
MACRO_xieValColorAllocDefault xieValColorAllocDefault;
MACRO_xieValColorAllocDefault xieValColorAllocMatch;
MACRO_xieValColorAllocDefault xieValColorAllocRequantize;
MACRO_xieValDefault xieValConstrain;
MACRO_xieValConstrainClipScale xieValConstrainClipScale;
MACRO_xieValConstrainClipScale xieValConstrainHardClip;
MACRO_xieValConstrained xieValConstrained;
MACRO_xieValDefault xieValConvertFromRGB;
MACRO_xieValDefault xieValConvertToRGB;
MACRO_xieValDefault xieValConvolve;
MACRO_xieValConvolveDefault xieValConvolveConstant;
MACRO_xieValConvolveDefault xieValConvolveDefault;
MACRO_xieValConvolveDefault xieValConvolveReplicate;
MACRO_xieValFull xieValDIS;
MACRO_xieValDefault xieValDecode;
MACRO_xieValDecodeUncompressedSingle xieValDecodeG31D;
MACRO_xieValDecodeUncompressedSingle xieValDecodeG32D;
MACRO_xieValDecodeUncompressedSingle xieValDecodeG42D;
MACRO_xieValDecodeUncompressedSingle xieValDecodeJPEGBaseline;
MACRO_xieValDecodeUncompressedSingle xieValDecodeJPEGLossless;
MACRO_xieValDecodeUncompressedSingle xieValDecodeTIFF2;
MACRO_xieValDecodeUncompressedSingle xieValDecodeTIFFPackBits;
MACRO_xieValDecodeUncompressedSingle xieValDecodeUncompressedSingle;
MACRO_xieValDecodeUncompressedSingle xieValDecodeUncompressedTriple;
MACRO_xieValDefault xieValDefault;
MACRO_xieValDisable xieValDisable;
MACRO_xieValDefault xieValDither;
MACRO_xieValDitherDefault xieValDitherDefault;
MACRO_xieValDitherDefault xieValDitherErrorDiffusion;
MACRO_xieValDitherDefault xieValDitherOrdered;
MACRO_xieValAdd xieValDiv;
MACRO_xieValAdd xieValDivRev;
MACRO_xieValLT xieValEQ;
MACRO_xieValDefault xieValEncode;
MACRO_xieValEncodeServerChoice xieValEncodeG31D;
MACRO_xieValEncodeServerChoice xieValEncodeG32D;
MACRO_xieValEncodeServerChoice xieValEncodeG42D;
MACRO_xieValEncodeServerChoice xieValEncodeJPEGBaseline;
MACRO_xieValEncodeServerChoice xieValEncodeJPEGLossless;
MACRO_xieValEncodeServerChoice xieValEncodeServerChoice;
MACRO_xieValEncodeServerChoice xieValEncodeTIFF2;
MACRO_xieValEncodeServerChoice xieValEncodeTIFFPackBits;
MACRO_xieValEncodeServerChoice xieValEncodeUncompressedSingle;
MACRO_xieValEncodeServerChoice xieValEncodeUncompressedTriple;
MACRO_xieValExp xieValExp;
MACRO_xieValExportDone xieValExportDone;
MACRO_xieValExportDone xieValExportEmpty;
MACRO_xieValExportDone xieValExportError;
MACRO_xieValExportDone xieValExportMore;
MACRO_xieValFavorDown xieValFavorDown;
MACRO_xieValFavorDown xieValFavorUp;
MACRO_xieValDisable xieValFirstData;
MACRO_xieValFloSuccess xieValFloAbort;
MACRO_xieValFloSuccess xieValFloError;
MACRO_xieValFloSuccess xieValFloSuccess;
MACRO_xieValFull xieValFull;
MACRO_xieValLT xieValGE;
MACRO_xieValLT xieValGT;
MACRO_xieValAdd xieValGamma;
MACRO_xieValDefault xieValGamut;
MACRO_xieValGamutDefault xieValGamutClipRGB;
MACRO_xieValGamutDefault xieValGamutDefault;
MACRO_xieValGamutDefault xieValGamutNone;
MACRO_xieValGeomDefault xieValGeomAntialias;
MACRO_xieValGeomDefault xieValGeomAntialiasByArea;
MACRO_xieValGeomDefault xieValGeomAntialiasByLPF;
MACRO_xieValGeomDefault xieValGeomBilinearInterp;
MACRO_xieValGeomDefault xieValGeomDefault;
MACRO_xieValGeomDefault xieValGeomGaussian;
MACRO_xieValGeomDefault xieValGeomNearestNeighbor;
MACRO_xieValDefault xieValGeometry;
MACRO_xieValDefault xieValHistogram;
MACRO_xieValHistogramFlat xieValHistogramFlat;
MACRO_xieValHistogramFlat xieValHistogramGaussian;
MACRO_xieValHistogramFlat xieValHistogramHyperbolic;
MACRO_xieValInactive xieValInactive;
MACRO_xieValLT xieValLE;
MACRO_xieValLSFirst xieValLSFirst;
MACRO_xieValLT xieValLT;
MACRO_xieValExp xieValLn;
MACRO_xieValExp xieValLog10;
MACRO_xieValExp xieValLog2;
MACRO_xieValLSFirst xieValMSFirst;
MACRO_xieValAdd xieValMax;
MACRO_xieValFull xieValMaxBands;
MACRO_xieValMaxTechGroup xieValMaxTechGroup;
MACRO_xieValAdd xieValMin;
MACRO_xieValAdd xieValMul;
MACRO_xieValLT xieValNE;
MACRO_xieValDisable xieValNewData;
MACRO_xieValInactive xieValNonexistent;
MACRO_xieValPredictorNone xieValPredictorA;
MACRO_xieValPredictorNone xieValPredictorAB2;
MACRO_xieValPredictorNone xieValPredictorABC;
MACRO_xieValPredictorNone xieValPredictorABC2;
MACRO_xieValPredictorNone xieValPredictorB;
MACRO_xieValPredictorNone xieValPredictorBAC2;
MACRO_xieValPredictorNone xieValPredictorC;
MACRO_xieValPredictorNone xieValPredictorNone;
MACRO_xieValPreferDefault xieValPreferDefault;
MACRO_xieValPreferDefault xieValPreferSpace;
MACRO_xieValPreferDefault xieValPreferTime;
MACRO_xieValRGBToCIELab xieValRGBToCIELab;
MACRO_xieValRGBToCIELab xieValRGBToCIEXYZ;
MACRO_xieValRGBToCIELab xieValRGBToYCC;
MACRO_xieValRGBToCIELab xieValRGBToYCbCr;
MACRO_xieValFavorDown xieValRoundNE;
MACRO_xieValFavorDown xieValRoundNW;
MACRO_xieValFavorDown xieValRoundSE;
MACRO_xieValFavorDown xieValRoundSW;
MACRO_xieValSingleBand xieValSingleBand;
MACRO_xieValExp xieValSqrt;
MACRO_xieValExp xieValSquare;
MACRO_xieValAdd xieValSub;
MACRO_xieValAdd xieValSubRev;
MACRO_xieValSingleBand xieValTripleBand;
MACRO_xieValConstrained xieValUnconstrained;
MACRO_xieValDefault xieValWhiteAdjust;
MACRO_xieValWhiteAdjustDefault xieValWhiteAdjustCIELabShift;
MACRO_xieValWhiteAdjustDefault xieValWhiteAdjustDefault;
MACRO_xieValWhiteAdjustDefault xieValWhiteAdjustNone;
MACRO_xieValCIELabToRGB xieValYCCToRGB;
MACRO_xieValCIELabToRGB xieValYCbCrToRGB;
XmArrowButtonClassRec xmArrowButtonClassRec;
WidgetClass xmArrowButtonGadgetClass;
XmArrowButtonGadgetClassRec xmArrowButtonGadgetClassRec;
WidgetClass xmArrowButtonWidgetClass;
XmBulletinBoardClassRec xmBulletinBoardClassRec;
WidgetClass xmBulletinBoardWidgetClass;
XmCascadeButtonClassRec xmCascadeButtonClassRec;
XmCascadeButtonGCacheObjClassRec xmCascadeButtonGCacheObjClassRec;
WidgetClass xmCascadeButtonGadgetClass;
XmCascadeButtonGadgetClassRec xmCascadeButtonGadgetClassRec;
WidgetClass xmCascadeButtonWidgetClass;
XmCommandClassRec xmCommandClassRec;
WidgetClass xmCommandWidgetClass;
WidgetClass xmDesktopClass;
XmDesktopClassRec xmDesktopClassRec;
XmDialogShellClassRec xmDialogShellClassRec;
XmDialogShellExtClassRec xmDialogShellExtClassRec;
WidgetClass xmDialogShellExtObjectClass;
WidgetClass xmDialogShellWidgetClass;
WidgetClass xmDisplayClass;
XmDisplayClassRec xmDisplayClassRec;
WidgetClass xmDragContextClass;
XmDragContextClassRec xmDragContextClassRec;
XmDragIconClassRec xmDragIconClassRec;
WidgetClass xmDragIconObjectClass;
XmDragOverShellClassRec xmDragOverShellClassRec;
WidgetClass xmDragOverShellWidgetClass;
XmDrawingAreaClassRec xmDrawingAreaClassRec;
WidgetClass xmDrawingAreaWidgetClass;
XmDrawnButtonClassRec xmDrawnButtonClassRec;
WidgetClass xmDrawnButtonWidgetClass;
XmDropSiteManagerClassRec xmDropSiteManagerClassRec;
WidgetClass xmDropSiteManagerObjectClass;
XmDropTransferClassRec xmDropTransferClassRec;
WidgetClass xmDropTransferObjectClass;
XmExtClassRec xmExtClassRec;
WidgetClass xmExtObjectClass;
XmFileSelectionBoxClassRec xmFileSelectionBoxClassRec;
WidgetClass xmFileSelectionBoxWidgetClass;
XmFormClassRec xmFormClassRec;
WidgetClass xmFormWidgetClass;
XmFrameClassRec xmFrameClassRec;
WidgetClass xmFrameWidgetClass;
WidgetClass xmGadgetClass;
XmGadgetClassRec xmGadgetClassRec;
XmLabelClassRec xmLabelClassRec;
XmLabelGCacheObjClassRec xmLabelGCacheObjClassRec;
WidgetClass xmLabelGadgetClass;
XmLabelGadgetClassRec xmLabelGadgetClassRec;
WidgetClass xmLabelWidgetClass;
XmListClassRec xmListClassRec;
WidgetClass xmListWidgetClass;
XmMainWindowClassRec xmMainWindowClassRec;
WidgetClass xmMainWindowWidgetClass;
XmManagerClassRec xmManagerClassRec;
WidgetClass xmManagerWidgetClass;
XmMenuShellClassRec xmMenuShellClassRec;
WidgetClass xmMenuShellWidgetClass;
XmMessageBoxClassRec xmMessageBoxClassRec;
WidgetClass xmMessageBoxWidgetClass;
XmPanedWindowClassRec xmPanedWindowClassRec;
WidgetClass xmPanedWindowWidgetClass;
XmPrimitiveClassRec xmPrimitiveClassRec;
WidgetClass xmPrimitiveWidgetClass;
XmProtocolClassRec xmProtocolClassRec;
WidgetClass xmProtocolObjectClass;
XmPushButtonClassRec xmPushButtonClassRec;
XmPushButtonGCacheObjClassRec xmPushButtonGCacheObjClassRec;
WidgetClass xmPushButtonGadgetClass;
XmPushButtonGadgetClassRec xmPushButtonGadgetClassRec;
WidgetClass xmPushButtonWidgetClass;
XmRowColumnClassRec xmRowColumnClassRec;
WidgetClass xmRowColumnWidgetClass;
XmSashClassRec xmSashClassRec;
WidgetClass xmSashWidgetClass;
XmScaleClassRec xmScaleClassRec;
WidgetClass xmScaleWidgetClass;
WidgetClass xmScreenClass;
XmScreenClassRec xmScreenClassRec;
XmScrollBarClassRec xmScrollBarClassRec;
WidgetClass xmScrollBarWidgetClass;
XmScrolledWindowClassRec xmScrolledWindowClassRec;
WidgetClass xmScrolledWindowWidgetClass;
XmSelectionBoxClassRec xmSelectionBoxClassRec;
WidgetClass xmSelectionBoxWidgetClass;
XmSeparatorClassRec xmSeparatorClassRec;
XmSeparatorGCacheObjClassRec xmSeparatorGCacheObjClassRec;
WidgetClass xmSeparatorGadgetClass;
XmSeparatorGadgetClassRec xmSeparatorGadgetClassRec;
WidgetClass xmSeparatorWidgetClass;
XmShellExtClassRec xmShellExtClassRec;
WidgetClass xmShellExtObjectClass;
XmTearOffButtonClassRec xmTearOffButtonClassRec;
WidgetClass xmTearOffButtonWidgetClass;
XmTextClassRec xmTextClassRec;
XmTextFieldClassRec xmTextFieldClassRec;
WidgetClass xmTextFieldWidgetClass;
WidgetClass xmTextWidgetClass;
XmToggleButtonClassRec xmToggleButtonClassRec;
XmToggleButtonGCacheObjClassRec xmToggleButtonGCacheObjClassRec;
WidgetClass xmToggleButtonGadgetClass;
XmToggleButtonGadgetClassRec xmToggleButtonGadgetClassRec;
WidgetClass xmToggleButtonWidgetClass;
int xmUseVersion;
XmVendorShellExtClassRec xmVendorShellExtClassRec;
WidgetClass xmVendorShellExtObjectClass;
WidgetClass xmWorldClass;
XmWorldClassRec xmWorldClassRec;
void xprt_register(SVCXPRT *xprt);
void xprt_unregister(SVCXPRT *xprt);
MACRO_xvNumRequests xvNumRequests;
MACRO_xv xv_GetPortAttribute;
MACRO_xv xv_GetStill;
MACRO_xv xv_GetVideo;
MACRO_xv xv_GrabPort;
MACRO_xv xv_LastRequest;
MACRO_xv xv_PutStill;
MACRO_xv xv_PutVideo;
MACRO_xv xv_QueryAdaptors;
MACRO_xv xv_QueryBestSize;
MACRO_xv xv_QueryEncodings;
MACRO_xv xv_QueryExtension;
MACRO_xv xv_SelectPortNotify;
MACRO_xv xv_SelectVideoNotify;
MACRO_xv xv_SetPortAttribute;
MACRO_xv xv_StopVideo;
MACRO_xv xv_UngrabPort;
kern_return_t xxx_cpu_control(task_t target_task, int cpu, boolean_t running);
kern_return_t xxx_host_info(port_t target_task, machine_info_data_t *info);
kern_return_t xxx_slot_info(task_t target_task, int slot, machine_slot_data_t *info);
int y;
double y0(double x);
float y0f(float x);
long double y0l(long double x);
double y1(double x);
float y1f(float x);
long double y1l(long double x);
int y2;
int *y_hot_return;
int *y_return;
double yn(int n, double x);
float ynf(int n, float x);
long double ynl(int n, long double x);
int yp_all(char *indomain, char *inmap, struct ypall_callback incallback);
int yp_bind(char *indomain);
int yp_first(char indomain, char *inmap, char **outkey, int *outkeylen, char **outval, int *outvallen);
int yp_get_default_domain(char **outdomain);
int yp_master(char *indomain, char *inmap, char **outname);
int yp_match(char *indomain, char *inmap, char *inkey, int inkeylen, char **outval, int *outvallen);
int yp_next(char *indomain, char *inmap, char *inkey, int inkeylen, char **outkey, int *outkeylen, char **outval, int *outvallen);
int yp_order(char *indomain, char *inmap, int *outorder);
void yp_unbind(char *indomain);
bool ypbind_to_named_server();
bool ypcheck_map_existence(char *);
void ypclr_current_map();
char *yperr_string(int incode);
bool ypinitialization_done;
struct timeval ypintertry;
int yplist_maps(char *, struct ypmaplist **);
void ypmkfilename(char *, char *, char *);
int yppasswd(const char *, const struct passwd *);
int ypprot_err(unsigned int incode);
bool ypset_current_map(char *, char *, unsigned int *);
struct timeval yptimeout;
u_int *ypu_change_1();
u_int *ypu_delete_1();
u_int *ypu_insert_1();
u_int *ypu_store_1();
void zconv_nonperiodic_(double *, double *, double *, int *, int *, int *);
int zconv_nonperiodic_ext_(double *, int *, double *, int *, double *, int *, int *, int *, int *, int *, int *, int *, double *, int *);
void zconv_periodic_(double *, double *, double *, int *, int *);
int zconv_periodic_ext_(double *, int *, double *, int *, double *, int *, int *, int *, int *, int *, int *, double *, int *);
void zcorr_nonperiodic_(double *, double *, double *, int *, int *, int *);
int zcorr_nonperiodic_ext_(double *, int *, double *, int *, double *, int *, int *, int *, int *, int *, int *, int *, double *, int *);
void zcorr_periodic_(double *, double *, double *, int *, int *);
int zcorr_periodic_ext_(double *, int *, double *, int *, double *, int *, int *, int *, int *, int *, int *, double *, int *);
MACRO_zeroPosition zeroPosition;
int zfft_(char *, char *, char *, ...);
int zfft_2d_(char *, char *, char *, ...);
int zfft_3d_(char *, char *, char *, ...);
int zfft_apply_(char *, char *, char *, ...);
int zfft_apply_2d_(char *, char *, char *, ...);
int zfft_apply_3d_(char *, char *, char *, ...);
int zfft_apply_grp_(char *, char *, char *, ...);
int zfft_exit_(DXML_Z_FFT_STRUCTURE *);
int zfft_exit_2d_(DXML_Z_FFT_STRUCTURE_2D *);
int zfft_exit_3d_(DXML_Z_FFT_STRUCTURE_3D *);
int zfft_exit_grp_(DXML_Z_GRP_FFT_STRUCTURE *);
int zfft_grp_(char *, char *, char *, ...);
int zfft_init_(int *, DXML_Z_FFT_STRUCTURE *, int *);
int zfft_init_2d_(int *, int *, DXML_Z_FFT_STRUCTURE_2D *, int *);
int zfft_init_3d_(int *, int *, int *, DXML_Z_FFT_STRUCTURE_3D *, int *);
int zfft_init_grp_(int *, DXML_Z_GRP_FFT_STRUCTURE *, int *, int *);
