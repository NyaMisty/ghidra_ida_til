struct $0046B6E3F76960040C1982B0037A2659 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t previous;};
struct $0077D5C34ADF0F1ACF745598F18E4EA6 {void *address;mach_msg_size_t count;__int32 deallocate : 8;unsigned __int32 copy : 8;unsigned __int32 disposition : 8;unsigned __int32 type : 8;};
struct $01CA16396E8E0606C9A9E0F0E20FCF07 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t signature;NDR_record_t NDR;mach_msg_type_number_t port_nameOffset;mach_msg_type_number_t port_nameCnt;char port_name[80];};
struct $0362AC053C3D6D68586BA4DFD8C6F4A4 {u_int port_id;u_int alive;u_int nport_id_high;u_int nport_id_low;u_int nport_receiver;u_int nport_owner;u_int messages_sent;u_int messages_rcvd;u_int send_rights_sent;u_int send_rights_rcvd_sender;u_int send_rights_rcvd_recown;u_int rcv_rights_xferd;u_int own_rights_xferd;u_int all_rights_xferd;u_int tokens_sent;u_int tokens_requested;u_int xfer_hints_sent;u_int xfer_hints_rcvd;};
struct $05C6DC85C1F1DBCA1F6881BCC9CC439D {char path[128];};
struct $05EECDE53F008AE0E4F8A84193F3FFF1 {struct opaque_auth ah_cred;struct opaque_auth ah_verf;union des_block ah_key;struct $05EECDE53F008AE0E4F8A84193F3FFF1::auth_ops *ah_ops;caddr_t ah_private;};
struct $05EECDE53F008AE0E4F8A84193F3FFF1::auth_ops {void (__fastcall *ah_nextverf)();int (__fastcall *ah_marshal)();int (__fastcall *ah_validate)();int (__fastcall *ah_refresh)();void (__fastcall *ah_destroy)();};
struct $065AA4F4B3DDB89000C8C945CAC4CC2E {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_msg_type_number_t kernel_versionOffset;mach_msg_type_number_t kernel_versionCnt;char kernel_version[512];};
enum $066FE35C39670617E77C49BA9433F64D {DEV_DIR = 0x0,DEV_BDEV = 0x1,DEV_CDEV = 0x2,DEV_SLNK = 0x3,};
enum $071FCE002284A13164F1DF56F5A67CDE {CURLE_OK = 0x0,CURLE_UNSUPPORTED_PROTOCOL = 0x1,CURLE_FAILED_INIT = 0x2,CURLE_URL_MALFORMAT = 0x3,CURLE_URL_MALFORMAT_USER = 0x4,CURLE_COULDNT_RESOLVE_PROXY = 0x5,CURLE_COULDNT_RESOLVE_HOST = 0x6,CURLE_COULDNT_CONNECT = 0x7,CURLE_FTP_WEIRD_SERVER_REPLY = 0x8,CURLE_FTP_ACCESS_DENIED = 0x9,CURLE_FTP_USER_PASSWORD_INCORRECT = 0xA,CURLE_FTP_WEIRD_PASS_REPLY = 0xB,CURLE_FTP_WEIRD_USER_REPLY = 0xC,CURLE_FTP_WEIRD_PASV_REPLY = 0xD,CURLE_FTP_WEIRD_227_FORMAT = 0xE,CURLE_FTP_CANT_GET_HOST = 0xF,CURLE_FTP_CANT_RECONNECT = 0x10,CURLE_FTP_COULDNT_SET_BINARY = 0x11,CURLE_PARTIAL_FILE = 0x12,CURLE_FTP_COULDNT_RETR_FILE = 0x13,CURLE_FTP_WRITE_ERROR = 0x14,CURLE_FTP_QUOTE_ERROR = 0x15,CURLE_HTTP_NOT_FOUND = 0x16,CURLE_WRITE_ERROR = 0x17,CURLE_MALFORMAT_USER = 0x18,CURLE_FTP_COULDNT_STOR_FILE = 0x19,CURLE_READ_ERROR = 0x1A,CURLE_OUT_OF_MEMORY = 0x1B,CURLE_OPERATION_TIMEOUTED = 0x1C,CURLE_FTP_COULDNT_SET_ASCII = 0x1D,CURLE_FTP_PORT_FAILED = 0x1E,CURLE_FTP_COULDNT_USE_REST = 0x1F,CURLE_FTP_COULDNT_GET_SIZE = 0x20,CURLE_HTTP_RANGE_ERROR = 0x21,CURLE_HTTP_POST_ERROR = 0x22,CURLE_SSL_CONNECT_ERROR = 0x23,CURLE_FTP_BAD_DOWNLOAD_RESUME = 0x24,CURLE_FILE_COULDNT_READ_FILE = 0x25,CURLE_LDAP_CANNOT_BIND = 0x26,CURLE_LDAP_SEARCH_FAILED = 0x27,CURLE_LIBRARY_NOT_FOUND = 0x28,CURLE_FUNCTION_NOT_FOUND = 0x29,CURLE_ABORTED_BY_CALLBACK = 0x2A,CURLE_BAD_FUNCTION_ARGUMENT = 0x2B,CURLE_BAD_CALLING_ORDER = 0x2C,CURLE_HTTP_PORT_FAILED = 0x2D,CURLE_BAD_PASSWORD_ENTERED = 0x2E,CURLE_TOO_MANY_REDIRECTS = 0x2F,CURLE_UNKNOWN_TELNET_OPTION = 0x30,CURLE_TELNET_OPTION_SYNTAX = 0x31,CURLE_ALREADY_COMPLETE = 0x32,CURL_LAST = 0x33,};
struct $07330457B1A8E241B31DE41A5C59B575 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t host;NDR_record_t NDR;mach_msg_type_number_t info_outCnt;integer_t info_out[5];};
struct $088788A38BBC50D48DDABC82065D5C20 {mach_msg_header_t Head;NDR_record_t NDR;vm_address_t address;vm_size_t size;vm_behavior_t new_behavior;};
struct $0A92D0DE39FFD99BC34B7A699C729253 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t service_names;NDR_record_t NDR;mach_msg_type_number_t service_namesCnt;};
struct $0BA82F063C392BF02AF0AA599B603A12 {unsigned int val[2];};
struct $0C41D669CC7829CF12B135747142967F {const char *str;unsigned __int16 length;};
struct $0CA50DA063E662D611776E2530D5C630 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t child_ledger;NDR_record_t NDR;ledger_item_t transfer;};
struct $0D364CBB4DE5622667695AC90920144B {u_int valdat_len;char *valdat_val;};
struct $0DD3D7DCB62C82D9C98652A42493883E {u_short ZoneCount;at_nvestr_t Zone;};
struct $0E6CC5D607D299E0B4EAC6FD047D8F10 {mach_msg_header_t Head;NDR_record_t NDR;vm_address_t source_address;vm_size_t size;vm_address_t dest_address;};
struct $0E98A572E6852A6395110737D2ACDD5A {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_msg_type_number_t info_outCnt;integer_t info_out[5];};
struct $0FB16B1A38E2E40FBD3F3EF96804B817 {void *address;mach_msg_size_t size;__int32 deallocate : 8;unsigned __int32 copy : 8;unsigned __int32 pad1 : 8;unsigned __int32 type : 8;};
struct $11759426EFCC6514E2B26D384F50B504 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t new_set;};
enum $120AC332EBC18F2A4396A3C657EB4314 {kDNSServiceDiscoveryWaiting = 0x1,kDNSServiceDiscoveryNoError = 0x0,kDNSServiceDiscoveryUnknownErr = 0xFFFEFFFF,kDNSServiceDiscoveryNoSuchNameErr = 0xFFFEFFFE,kDNSServiceDiscoveryNoMemoryErr = 0xFFFEFFFD,kDNSServiceDiscoveryBadParamErr = 0xFFFEFFFC,kDNSServiceDiscoveryBadReferenceErr = 0xFFFEFFFB,kDNSServiceDiscoveryBadStateErr = 0xFFFEFFFA,kDNSServiceDiscoveryBadFlagsErr = 0xFFFEFFF9,kDNSServiceDiscoveryUnsupportedErr = 0xFFFEFFF8,kDNSServiceDiscoveryNotInitializedErr = 0xFFFEFFF7,kDNSServiceDiscoveryNoCache = 0xFFFEFFF6,kDNSServiceDiscoveryAlreadyRegistered = 0xFFFEFFF5,kDNSServiceDiscoveryNameConflict = 0xFFFEFFF4,kDNSServiceDiscoveryInvalid = 0xFFFEFFF3,kDNSServiceDiscoveryMemFree = 0xFFFEFF00,};
struct $127ADBDA39FF0AF10F74B8734D022F36 {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_msg_type_number_t policy_infoCnt;integer_t policy_info[16];boolean_t get_default;};
struct $140863D2D8D68081E1A83A60AA385321 {struct _ftsent *fts_cur;struct _ftsent *fts_child;struct _ftsent **fts_array;dev_t fts_dev;char *fts_path;int fts_rfd;int fts_pathlen;int fts_nitems;int (__fastcall *fts_compar)();int fts_options;};
union $149468D43E4B0BB405DED2721C573480 {char __mbstate8[128];__int64 _mbstateL;};
struct $14FA42BC96FAE132F19280844CA95DD9 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t info;NDR_record_t NDR;mach_msg_type_number_t infoCnt;};
union $1553A4E78C01066EB556BD64FB1F9195 {IOSlotId slotId;struct $1553A4E78C01066EB556BD64FB1F9195::$F4DB73E5FBFB1A24B36034FBE3769872 slotIdStr;};
struct $1553A4E78C01066EB556BD64FB1F9195::$F4DB73E5FBFB1A24B36034FBE3769872 {IOSlotIdMfg mfgId;unsigned __int16 boardId;};
struct $15CE29027F05B8BB8B125DB29B7163BF {mach_msg_header_t header;};
struct $16A0DF27F3238E1356CA147E92FEAE81 {int gl_pathc;int gl_matchc;int gl_offs;int gl_flags;char **gl_pathv;int (__fastcall *gl_errfunc)(const char *, int);void (__fastcall *gl_closedir)(void *);struct dirent *(__fastcall *gl_readdir)(void *);void *(__fastcall *gl_opendir)(const char *);int (__fastcall *gl_lstat)(const char *, struct stat *);int (__fastcall *gl_stat)(const char *, struct stat *);};
struct $1783B4855960E25D5065E02F55E2E263 {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_port_qos_t qos;mach_port_name_t name;};
struct $18919036CDC41B9570D3DDDC73270DDD {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t target_task;NDR_record_t NDR;boolean_t make_swappable;};
enum $18F39A1BE291178CAFF63DBEEBB644E5 {kHFSRootParentID = 0x1,kHFSRootFolderID = 0x2,kHFSExtentsFileID = 0x3,kHFSCatalogFileID = 0x4,kHFSBadBlockFileID = 0x5,kHFSAllocationFileID = 0x6,kHFSStartupFileID = 0x7,kHFSAttributesFileID = 0x8,kHFSBogusExtentFileID = 0xF,kHFSFirstUserCatalogNodeID = 0x10,};
struct $1939A040176EF1B9621D43DC5C59AFB4 {unsigned __int8 dst[6];unsigned __int8 src[6];unsigned __int16 len;};
struct $1941E7C4659245DE8D4848E3E4589651 {unsigned __int16 data;unsigned __int8 reserved[6];};
struct $19986235E824B34A0D641661B11CD27D {mach_msg_header_t Head;NDR_record_t NDR;mach_port_name_t name;};
struct $19DEE1C64F7EC3DDB040A3404BEC0D9F {u_int utmp_array_len;rusers_utmp *utmp_array_val;};
struct $1A15CD9E076CE95EED0CB242AD23A728 {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_port_urefs_t refs;};
struct $1AD567D4B9681C99D01C1D9A823E24D4 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t io_master;};
union $1BA4A8AA95B11958D6B204130C16BD87 {adbRegister3bits bits;adbRegister3short sh;};
union $1F43FF5151724E9FDFD5FDCB45380373 {IODeviceType deviceType;IODeviceTypeIr deviceTypeIr;};
struct $1FAE8DE219DB8DB0F433B235C97BF738 {u_int ni_namelist_len;ni_name *ni_namelist_val;};
enum $1FB0C3C05C839538DC046EE3FB85DDAE {kBTLeafNode = 0xFFFFFFFF,kBTIndexNode = 0x0,kBTHeaderNode = 0x1,kBTMapNode = 0x2,};
enum $1FDFCDB6B16318BF0B312BA6FA177D60 {kBTBadCloseMask = 0x1,kBTBigKeysMask = 0x2,kBTVariableIndexKeysMask = 0x4,};
struct $207271BEEF35C1E72B41BFA669B8BAC6 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t data;NDR_record_t NDR;mach_msg_type_number_t dataCnt;};
struct $211858A17FC3AA3AF7FB370462C716CC {mach_msg_header_t not_header;NDR_record_t NDR;mach_port_name_t not_port;mach_msg_format_0_trailer_t trailer;};
struct $2204D4BF90F99AB14C1563C90305E530 {mach_msg_header_t not_header;mach_msg_body_t not_body;mach_msg_port_descriptor_t not_port;mach_msg_format_0_trailer_t trailer;};
enum $22A92D088BFC52136D93827B687A0401 {kHFSSigWord = 0x4244,kHFSPlusSigWord = 0x482B,kHFSPlusVersion = 0x4,kHFSPlusMountVersion = 0x31302E30,};
union $2345F6273F81C99369AD5C0E36D3FD0F {mach_msg_empty_send_t send;mach_msg_empty_rcv_t rcv;};
struct $23464681D0D095F096FB79A1E66062AF {mach_msg_header_t Head;NDR_record_t NDR;vm_address_t address;};
struct $2504DEEB08159380429AD83B08DF7764 {unsigned __int16 valid : 1;unsigned __int16 console : 1;unsigned __int16 bootDev : 1;unsigned __int16 rsvd : 3;unsigned __int16 blockId : 3;unsigned __int16 prodId : 7;};
struct $2565C6D5545A12F05674BF5568A8F427 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t task;NDR_record_t NDR;vm_address_t address;vm_size_t size;boolean_t anywhere;};
struct $25B9151150FDB1BB89C80B2A8A85F680 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t lock_set;};
struct $268E73D492E0AA9543C2DAE749E4E286 {mach_msg_header_t Head;NDR_record_t NDR;mach_msg_type_number_t processor_cmdCnt;integer_t processor_cmd[12];};
struct $26DC3EB05C17544AB8AFD85FB443F277 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t pset;NDR_record_t NDR;policy_t policy;mach_msg_type_number_t baseCnt;integer_t base[5];mach_msg_type_number_t limitCnt;integer_t limit[1];};
struct $26F88E84C1701D89D21609BEA4C76CA2 {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;unsigned int total;vm_size_t space;vm_size_t resident;vm_size_t maxusage;vm_offset_t maxstack;};
struct $279A7D6BAE671E5D078D50BF79E5C443 {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_msg_type_number_t clock_attrCnt;int clock_attr[1];};
struct $27E234F22BC82B288AC30D0762C87255 {char *next_in;unsigned int avail_in;unsigned int total_in_lo32;unsigned int total_in_hi32;char *next_out;unsigned int avail_out;unsigned int total_out_lo32;unsigned int total_out_hi32;void *state;void *(__fastcall *bzalloc)(void *, int, int);void (__fastcall *bzfree)(void *, void *);void *opaque;};
struct $29720D4B1372A72A8E922F3C51907D2B {void *data;size_t size;};
struct $298BF45BC869BFBDF761AF6C0543DC18 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t host;NDR_record_t NDR;mach_msg_type_number_t processor_info_outCnt;integer_t processor_info_out[12];};
struct $29E38C6493B75A6FA6817975AF03D4C0 {mach_msg_header_t Head;NDR_record_t NDR;policy_t policy;mach_msg_type_number_t baseCnt;integer_t base[5];boolean_t set_limit;boolean_t change;};
enum $29FC7CC788C9FFDBF53740441D4A1DD5 {DNSServiceBrowserReplyAddInstance = 0x0,DNSServiceBrowserReplyRemoveInstance = 0x1,};
struct $2A4BA455395BF41F2F254FCA2AA74280 {mach_msg_header_t Head;NDR_record_t NDR;mach_port_name_t member;mach_port_name_t after;};
struct $2C24181259AD7238BB41D98E89920B4F {mach_msg_header_t Head;NDR_record_t NDR;int flavor;mach_msg_type_number_t new_stateCnt;natural_t new_state[144];};
struct $2CB2463B5AF9A96AD792E2C849F46E7F {mach_msg_header_t Head;NDR_record_t NDR;mach_timespec_t new_time;};
struct $2D63240515AC7C828AB4C7B058DC34F3 {mach_msg_header_t Head;NDR_record_t NDR;mach_port_name_t name;mach_port_seqno_t seqno;};
struct $2E4AEC4DAEDEFAF9740FCE81CFC978B6 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t object_handle;NDR_record_t NDR;vm_size_t size;};
enum $2EA0513515F7563CFBB6420CCE575C9E {dot3ChipSetAMD7990 = 0x1,dot3ChipSetAMD79900 = 0x2,dot3ChipSetAMD79C940 = 0x3,};
struct $2F587CB41441EFCE05777776D91D37F5 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_ports_descriptor_t processor_list;NDR_record_t NDR;mach_msg_type_number_t processor_listCnt;};
struct $2FBFFD789A2C809930720784B8820AE2 {mach_msg_header_t Head;NDR_record_t NDR;vm_address_t address;vm_size_t size;vm_machine_attribute_t attribute;vm_machine_attribute_val_t value;};
struct $3005DC22E47E8D60012A11697F35BA7D {at_net at_rtmp_this_net;u_char at_rtmp_id_length;u_char at_rtmp_id[1];};
struct $3010519FC8E063AC13B61458A4695107 {netaddr_t np_receiver;netaddr_t np_owner;np_uid_t np_puid;np_uid_t np_sid;};
struct $3144B77C1CB098B84E53C6E6F27AEF67 {unsigned __int8 byte[8];};
struct $3199818696990377AE21FB32F85B31D8 {mach_msg_header_t Head;NDR_record_t NDR;mach_port_name_t name;mach_port_name_t pset;};
struct $330368C43B7BBA601535C7AEE5D8B687 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t server_port;};
struct $333F68BA2C53B7EE0F2D13B448D38F51 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t server;};
enum $349CDD1D13F7DF0473388D33C8CD4390 {NSUserDomainMask = 0x1,NSLocalDomainMask = 0x2,NSNetworkDomainMask = 0x4,NSSystemDomainMask = 0x8,NSAllDomainsMask = 0xFFFF,};
enum $35D4575BDD269CB2C114416BAA7558BD {dot3ChipSetFujitsu86950 = 0x1,};
enum $3998B369563C3E922C9C4F0BF606DBF3 {OSUnknownByteOrder = 0x0,OSLittleEndian = 0x1,OSBigEndian = 0x2,};
struct $39A6887EE2559B6F67226E46762E5403 {unsigned int length;unsigned __int8 control;};
struct $3AD6DCE498BEF9CAF21EEA5EB590F8B6 {mach_msg_header_t Head;NDR_record_t NDR;vm_address_t address;vm_region_flavor_t flavor;mach_msg_type_number_t infoCnt;};
struct $3CE6EFCC61EAE53AE9BFA212F91A7D13 {void *pad1;mach_msg_size_t pad2;unsigned __int32 pad3 : 24;unsigned __int32 type : 8;};
struct $3D758159ED3B747496F87C93B1DFC5C3 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t pager;NDR_record_t NDR;boolean_t internal;vm_size_t size;vm_prot_t permission;};
struct $3D973CA059C56EDCB53F204E75D22A4F {rune_t min;rune_t max;rune_t map;unsigned int *types;};
struct $3E6B1E6034954B23411B3542CA61CBC7 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t port;};
enum $3EACBFB1F6A69D9CA6E99CE3BA7C8589 {res_goahead = 0x0,res_nextns = 0x1,res_modified = 0x2,res_done = 0x3,res_error = 0x4,};
struct $4203C03DDEA75B12CEED795269F3A503 {mach_msg_header_t Head;NDR_record_t NDR;mach_port_name_t name;mach_msg_type_name_t msgt_name;};
enum $422B151CF90F7CD02DBADD7DA727FB0A {kHFSPlusExtentKeyMaximumLength = 0xA,kHFSExtentKeyMaximumLength = 0xB,kHFSPlusCatalogKeyMaximumLength = 0x206,kHFSPlusCatalogKeyMinimumLength = 0x8,kHFSCatalogKeyMaximumLength = 0x27,kHFSCatalogKeyMinimumLength = 0x8,kHFSPlusCatalogMinNodeSize = 0x1000,kHFSPlusExtentMinNodeSize = 0x200,kHFSPlusAttrMinNodeSize = 0x1000,};
enum $43AF380ED1E5C6639BF29287A0048170 {kHFSFolderRecord = 0x100,kHFSFileRecord = 0x200,kHFSFolderThreadRecord = 0x300,kHFSFileThreadRecord = 0x400,kHFSPlusFolderRecord = 0x1,kHFSPlusFileRecord = 0x2,kHFSPlusFolderThreadRecord = 0x3,kHFSPlusFileThreadRecord = 0x4,};
struct $43EB887A7D5DDC6B5CCC173C2FB6636E {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;vm_address_t address;vm_size_t size;natural_t nesting_depth;mach_msg_type_number_t infoCnt;int info[19];};
enum $44412BD0CE14AFC237A6D071851322F1 {kHFSPlusAttrInlineData = 0x10,kHFSPlusAttrForkData = 0x20,kHFSPlusAttrExtents = 0x30,};
enum $44FF3325E6D3BEACE1A77B09C2B69C85 {CURLOPT_NOTHING = 0x0,CURLOPT_FILE = 0x2711,CURLOPT_URL = 0x2712,CURLOPT_PORT = 0x3,CURLOPT_PROXY = 0x2714,CURLOPT_USERPWD = 0x2715,CURLOPT_PROXYUSERPWD = 0x2716,CURLOPT_RANGE = 0x2717,CURLOPT_INFILE = 0x2719,CURLOPT_ERRORBUFFER = 0x271A,CURLOPT_WRITEFUNCTION = 0x4E2B,CURLOPT_READFUNCTION = 0x4E2C,CURLOPT_TIMEOUT = 0xD,CURLOPT_INFILESIZE = 0xE,CURLOPT_POSTFIELDS = 0x271F,CURLOPT_REFERER = 0x2720,CURLOPT_FTPPORT = 0x2721,CURLOPT_USERAGENT = 0x2722,CURLOPT_LOW_SPEED_LIMIT = 0x13,CURLOPT_LOW_SPEED_TIME = 0x14,CURLOPT_RESUME_FROM = 0x15,CURLOPT_COOKIE = 0x2726,CURLOPT_HTTPHEADER = 0x2727,CURLOPT_HTTPPOST = 0x2728,CURLOPT_SSLCERT = 0x2729,CURLOPT_SSLCERTPASSWD = 0x272A,CURLOPT_CRLF = 0x1B,CURLOPT_QUOTE = 0x272C,CURLOPT_WRITEHEADER = 0x272D,CURLOPT_COOKIEFILE = 0x272F,CURLOPT_SSLVERSION = 0x20,CURLOPT_TIMECONDITION = 0x21,CURLOPT_TIMEVALUE = 0x22,CURLOPT_HTTPREQUEST = 0x2733,CURLOPT_CUSTOMREQUEST = 0x2734,CURLOPT_STDERR = 0x2735,CURLOPT_POSTQUOTE = 0x2737,CURLOPT_WRITEINFO = 0x2738,CURLOPT_VERBOSE = 0x29,CURLOPT_HEADER = 0x2A,CURLOPT_NOPROGRESS = 0x2B,CURLOPT_NOBODY = 0x2C,CURLOPT_FAILONERROR = 0x2D,CURLOPT_UPLOAD = 0x2E,CURLOPT_POST = 0x2F,CURLOPT_FTPLISTONLY = 0x30,CURLOPT_FTPAPPEND = 0x32,CURLOPT_NETRC = 0x33,CURLOPT_FOLLOWLOCATION = 0x34,CURLOPT_FTPASCII = 0x35,CURLOPT_TRANSFERTEXT = 0x35,CURLOPT_PUT = 0x36,CURLOPT_MUTE = 0x37,CURLOPT_PROGRESSFUNCTION = 0x4E58,CURLOPT_PROGRESSDATA = 0x2749,CURLOPT_AUTOREFERER = 0x3A,CURLOPT_PROXYPORT = 0x3B,CURLOPT_POSTFIELDSIZE = 0x3C,CURLOPT_HTTPPROXYTUNNEL = 0x3D,CURLOPT_INTERFACE = 0x274E,CURLOPT_KRB4LEVEL = 0x274F,CURLOPT_SSL_VERIFYPEER = 0x40,CURLOPT_CAINFO = 0x2751,CURLOPT_PASSWDFUNCTION = 0x4E62,CURLOPT_PASSWDDATA = 0x2753,CURLOPT_MAXREDIRS = 0x44,CURLOPT_FILETIME = 0x2755,CURLOPT_TELNETOPTIONS = 0x2756,CURLOPT_MAXCONNECTS = 0x47,CURLOPT_CLOSEPOLICY = 0x48,CURLOPT_CLOSEFUNCTION = 0x4E69,CURLOPT_FRESH_CONNECT = 0x4A,CURLOPT_FORBID_REUSE = 0x4B,CURLOPT_RANDOM_FILE = 0x275C,CURLOPT_EGDSOCKET = 0x275D,CURLOPT_CONNECTTIMEOUT = 0x4E,CURLOPT_HEADERFUNCTION = 0x4E6F,CURLOPT_LASTENTRY = 0x4E70,};
struct $456B529FC136F2DC55D26FBF7B75F342 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t data;NDR_record_t NDR;vm_address_t address;mach_msg_type_number_t dataCnt;};
struct $466E19AC50622C269D9BCEE6753F9E61 {mach_msg_header_t header;mach_msg_body_t body;};
struct $467060AE45B41A5972813DF03B420207 {at_inet_t SLSEntityIdentifier;at_retry_t Retry;unsigned __int16 TickleInterval;unsigned __int16 SessionTimer;};
struct $46F98A3CF815908FB81E03FBB188BF3A {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_msg_type_number_t port_info_outCnt;integer_t port_info_out[10];};
struct $478A0C5B06F3F085EB929445D74AA112 {mach_msg_header_t Head;NDR_record_t NDR;task_policy_flavor_t flavor;mach_msg_type_number_t policy_infoCnt;integer_t policy_info[16];};
struct $479E1DE8ADCB55C92744EDE61D84AC3C {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_port_type_t ptype;};
struct $47B1E0FCCF87277E593C854FB80D0521 {mach_msg_header_t Head;NDR_record_t NDR;int max_priority;boolean_t change_threads;};
struct $48128538EAAA3D95320DEC45BE60FE04 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t clock_ctrl;};
struct $4847376876A672FA04A26307AD8C8434 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t src_task;NDR_record_t NDR;vm_address_t target_address;vm_size_t size;vm_address_t mask;boolean_t anywhere;vm_address_t src_address;boolean_t copy;vm_inherit_t inheritance;};
struct $488333C1932ECE7496D2930CA2056B6D {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t assigned_set;};
struct $49303478B7A3DE4A3AC5102047AEEEA3 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t set;};
struct $4A735630EB341D1A813FEC0C6C1BF2F3 {at_net at_rtmp_net;unsigned __int8 at_rtmp_data;};
struct $4B7D8A760EDAC6704421EDD45E076DB3 {mach_msg_header_t Head;NDR_record_t NDR;cmd_t server_cmd;integer_t server_uid;boolean_t on_demand;};
struct $4B8804F6523751A831C00C572669AA3C {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t child_act;};
struct $4BA0F1DBE33A7FC0F8851313161BDC9C {mach_msg_header_t Head;NDR_record_t NDR;mach_port_name_t old_name;mach_port_name_t new_name;};
struct $4BA9156D9D4FD7BFAE1E88FAD76CCCD3 {int np_uid_high;int np_uid_low;};
struct $4C821A4EFE1115B5FC2C4B7C575B022E {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t alarm_code;alarm_type_t alarm_type;mach_timespec_t alarm_time;};
struct $4D17AC1D92846D89C56307C20B09863A {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t set_name;};
enum $4EE0FB99968ADB58B01C3A33A60FE053 {REGS_SAVED_NONE = 0x0,REGS_SAVED_CALLER = 0x1,REGS_SAVED_ALL = 0x2,};
struct $50388B7496B1BDF2E598B32E2E370BC4 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t service_port;NDR_record_t NDR;name_t service_name;};
struct $50450166C1D5B7E6B5FADC2BC93CD3BD {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_port_name_t name;};
struct $5084B273658EFE58E28B4E0108DDB68F {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t upl;};
struct $515044D80573ABF1895C554FFE4B1B4E {u_int ni_entrylist_len;ni_entry *ni_entrylist_val;};
struct $5190E73C809912EC3322BCF288220A97 {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;unsigned int total;unsigned int used;};
enum $51CDBEE2E35B9D83A8BED354636A6FC6 {CURLINFO_NONE = 0x0,CURLINFO_EFFECTIVE_URL = 0x100001,CURLINFO_HTTP_CODE = 0x200002,CURLINFO_TOTAL_TIME = 0x300003,CURLINFO_NAMELOOKUP_TIME = 0x300004,CURLINFO_CONNECT_TIME = 0x300005,CURLINFO_PRETRANSFER_TIME = 0x300006,CURLINFO_SIZE_UPLOAD = 0x300007,CURLINFO_SIZE_DOWNLOAD = 0x300008,CURLINFO_SPEED_DOWNLOAD = 0x300009,CURLINFO_SPEED_UPLOAD = 0x30000A,CURLINFO_HEADER_SIZE = 0x20000B,CURLINFO_REQUEST_SIZE = 0x20000C,CURLINFO_SSL_VERIFYRESULT = 0x20000D,CURLINFO_FILETIME = 0x20000E,CURLINFO_CONTENT_LENGTH_DOWNLOAD = 0x30000F,CURLINFO_CONTENT_LENGTH_UPLOAD = 0x300010,CURLINFO_LASTONE = 0x11,};
struct $5243BF46A737224FC5E0495E8389B9A4 {mach_msg_header_t Head;NDR_record_t NDR;mach_port_right_t right;mach_port_qos_t qos;};
struct $531BFEDFFBC90F9591113261F4F98EF9 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t proto;NDR_record_t NDR;mach_port_right_t right;mach_port_qos_t qos;mach_port_name_t name;};
struct $54BD5584F5ADC0EEBB5CC3B97CC9ABCA {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t members;NDR_record_t NDR;mach_msg_type_number_t membersCnt;};
struct $54E3C4845DCBBBAE0B28E8CAF275DF3F {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;};
struct $5567FEF96CECDEB28576E12650BB4F71 {mach_msg_header_t Head;NDR_record_t NDR;int flavor;mach_msg_type_number_t info_outCnt;};
struct $55A51BE02F24058ABD10625D98596979 {u_short at_atpreq_type;at_inet_t at_atpreq_to;u_char at_atpreq_treq_user_bytes[4];u_char *at_atpreq_treq_data;u_short at_atpreq_treq_length;u_char at_atpreq_treq_bitmap;u_char at_atpreq_xo;u_char at_atpreq_xo_relt;u_short at_atpreq_retry_timeout;u_short at_atpreq_maximum_retries;u_char at_atpreq_tresp_user_bytes[8][4];u_char *at_atpreq_tresp_data[8];u_short at_atpreq_tresp_lengths[8];u_long at_atpreq_debug[4];u_short at_atpreq_tid;u_char at_atpreq_tresp_bitmap;u_char at_atpreq_tresp_eom_seqno;u_char at_atpreq_got_trel;};
struct $56709C31788A185985ED8F80CB75C10C {mach_msg_header_t Head;NDR_record_t NDR;processor_flavor_t flavor;};
struct $5694E020026D0F35B79D3FDB301355DE {mach_msg_trailer_type_t msgh_trailer_type;mach_msg_trailer_size_t msgh_trailer_size;mach_port_seqno_t msgh_seqno;security_token_t msgh_sender;};
struct $575BADC95B9991A2B9CD2F3725868B8D {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t default_set;};
struct $58431AFAB1A4B81D9017FB0AACB3F19D {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t object_name;NDR_record_t NDR;vm_address_t address;vm_size_t size;mach_msg_type_number_t infoCnt;int info[9];};
struct $587EA17CD82C334AC5A48AFEDB918C96 {mach_msg_header_t Head;NDR_record_t NDR;clock_id_t clock_id;};
struct $59AA03472FCFCA397F68DC3419B6E0CE {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t clock_serv;};
struct $59F23475065BD2E9F3FA293A04BFFD37 {mach_msg_header_t Head;NDR_record_t NDR;int which_port;};
struct $5A0916E0CED2CCF3243480B2FF863984 {at_inet_t SLSEntityIdentifier;at_retry_t Retry;int StatusBufferSize;};
struct $5A17788FF526DC41EE65ED362A8F9A06 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t control_port;};
struct $5DB7049864680961BDFB9965C0ABC030 {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;integer_t disposition;integer_t ref_count;};
struct $5E04D424E81EA6874558831D2FFF2B4D {mach_msg_header_t Head;NDR_record_t NDR;int lock_id;};
struct $5E073AC1240433595621B506EB1DA983 {mach_msg_header_t Head;NDR_record_t NDR;int n_ulocks;int policy;};
struct $5E67D005E6550C4F6AE2B94EB017ABE7 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t region_object;};
struct $5EBD40E0B2B3559752DCF739FE11AE5D {int xp_sock;u_short xp_port;struct $5EBD40E0B2B3559752DCF739FE11AE5D::xp_ops *xp_ops;int xp_addrlen;struct sockaddr_in xp_raddr;struct opaque_auth xp_verf;caddr_t xp_p1;caddr_t xp_p2;};
struct $5EBD40E0B2B3559752DCF739FE11AE5D::xp_ops {int (__fastcall *xp_recv)();enum xprt_stat (__fastcall *xp_stat)();int (__fastcall *xp_getargs)();int (__fastcall *xp_reply)();int (__fastcall *xp_freeargs)();void (__fastcall *xp_destroy)();};
struct $5EDD4B4F882E321F07D8AFF023DDDD7D {u_int keydat_len;char *keydat_val;};
struct $5EE71EC2B6ECEB33372096427B2859E8 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t thread;NDR_record_t NDR;boolean_t wired;};
enum $60616C0D0F3219145D1406847C7D94FB {kHFSFileLockedBit = 0x0,kHFSFileLockedMask = 0x1,kHFSThreadExistsBit = 0x1,kHFSThreadExistsMask = 0x2,};
struct $615D5DC9703294F0ED919D7F4D86FFE9 {int datagram_pkts_sent;int datagram_pkts_rcvd;int srr_requests_sent;int srr_bcasts_sent;int srr_requests_rcvd;int srr_bcasts_rcvd;int srr_replies_sent;int srr_replies_rcvd;int srr_retries_sent;int srr_retries_rcvd;int srr_cfailures_sent;int srr_cfailures_rcvd;int deltat_dpkts_sent;int deltat_acks_rcvd;int deltat_dpkts_rcvd;int deltat_acks_sent;int deltat_oldpkts_rcvd;int deltat_oospkts_rcvd;int deltat_retries_sent;int deltat_retries_rcvd;int deltat_cfailures_sent;int deltat_cfailures_rcvd;int deltat_aborts_sent;int deltat_aborts_rcvd;int vmtp_requests_sent;int vmtp_requests_rcvd;int vmtp_replies_sent;int vmtp_replies_rcvd;int ipc_in_messages;int ipc_out_messages;int ipc_unblocks_sent;int ipc_unblocks_rcvd;int pc_requests_sent;int pc_requests_rcvd;int pc_replies_rcvd;int pc_startups_rcvd;int nn_requests_sent;int nn_requests_rcvd;int nn_replies_rcvd;int po_ro_hints_sent;int po_ro_hints_rcvd;int po_token_requests_sent;int po_token_requests_rcvd;int po_token_replies_rcvd;int po_xfer_requests_sent;int po_xfer_requests_rcvd;int po_xfer_replies_rcvd;int po_deaths_sent;int po_deaths_rcvd;int ps_requests_sent;int ps_requests_rcvd;int ps_replies_rcvd;int ps_auth_requests_sent;int ps_auth_requests_rcvd;int ps_auth_replies_rcvd;int mallocs_or_vm_allocates;int mem_allocs;int mem_deallocs;int mem_allocobjs;int mem_deallocobjs;int pkts_encrypted;int pkts_decrypted;int vmtp_segs_encrypted;int vmtp_segs_decrypted;int tcp_requests_sent;int tcp_replies_sent;int tcp_requests_rcvd;int tcp_replies_rcvd;int tcp_send;int tcp_recv;int tcp_connect;int tcp_accept;int tcp_close;};
struct $621D828CE4D951BAF9864D86BC9CEA5B {u_char vers;u_char type;u_char answer;u_char pad;u_long id_num;struct osockaddr addr;struct osockaddr ctl_addr;int pid;char l_name[12];char r_name[12];char r_tty[16];};
struct $64173B50D5C298666AA1E07EB308B730 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_ports_descriptor_t init_port_set;NDR_record_t NDR;mach_msg_type_number_t init_port_setCnt;};
struct $648B167E5FE8430EFE8E72D1CD79C82D {__int16 pmin;__int16 pmax;__int16 smin;__int16 smax;};
struct $65559C85CAD78CCC00215D28D344072A {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t requestor_port;};
struct $6631D032B9C3E589B1C8F245E7213CA2 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t unpriv_port;};
struct $667D37966B161E6E078A460A98C89B5C {adb_key_val_t normal;adb_key_val_t shift;adb_key_val_t control;adb_key_val_t control_shift;};
struct $669EF43B8E86E5E1B2D5831F1B9785B9 {mach_msg_header_t Head;NDR_record_t NDR;int options;};
struct $671C5A9886DEC29C4FEC63DF421615C6 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t new_set;NDR_record_t NDR;boolean_t assign_threads;};
enum $67C416E26EEE13F3D7C2627C9615BC9D {FE_TONEAREST = 0x0,FE_TOWARDZERO = 0x1,FE_UPWARD = 0x2,FE_DOWNWARD = 0x3,};
struct $693DE21DBBE1F7CF58248D2139012E91 {unsigned int unused[1];unsigned __int32 fx : 1;unsigned __int32 fex : 1;unsigned __int32 vx : 1;unsigned __int32 ox : 1;unsigned __int32 ux : 1;unsigned __int32 zx : 1;unsigned __int32 xx : 1;unsigned __int32 vx_snan : 1;unsigned __int32 vx_isi : 1;unsigned __int32 vx_idi : 1;unsigned __int32 vx_zdz : 1;unsigned __int32 vx_imz : 1;unsigned __int32 vx_xvc : 1;unsigned __int32 fr : 1;unsigned __int32 fi : 1;unsigned __int32 c_class : 1;unsigned __int32 fl : 1;unsigned __int32 fg : 1;unsigned __int32 fe : 1;unsigned __int32 fu : 1;unsigned __int32 rsvd1 : 1;unsigned __int32 vx_soft : 1;unsigned __int32 rsvd2 : 1;unsigned __int32 vx_cvi : 1;unsigned __int32 ve : 1;unsigned __int32 oe : 1;unsigned __int32 ue : 1;unsigned __int32 ze : 1;unsigned __int32 xe : 1;unsigned __int32 ni : 1;unsigned __int32 rn : 2;};
struct $69D31FA9CDD4718FF5B7AF641C4535B7 {mach_msg_header_t Head;NDR_record_t NDR;clock_flavor_t flavor;mach_msg_type_number_t clock_attrCnt;int clock_attr[1];};
struct $6AAD439E9A60B13F59A2B34A0B1B968C {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t alarm_port;NDR_record_t NDR;alarm_type_t alarm_type;mach_timespec_t alarm_time;};
struct $6B72EC479EB324C93363DBF0210A4E09 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t modules;NDR_record_t NDR;mach_msg_type_number_t modulesCnt;};
struct $6BC0D17B2B96A5F91967EA8653FF4084 {mach_msg_header_t Head;NDR_record_t NDR;int policy;int value;};
struct $6C07615512B7E84BDE41117AEF6DE55F {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_ports_descriptor_t task_list;NDR_record_t NDR;mach_msg_type_number_t task_listCnt;};
struct $6C8E198051B85F433C7E9E257C72A042 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t objects;NDR_record_t NDR;vm_info_region_t region;mach_msg_type_number_t objectsCnt;};
enum $6D22B6C70995B3A898F6ED894F8956B2 {DNSServiceDiscoverReplyFlagsFinished = 0x0,DNSServiceDiscoverReplyFlagsMoreComing = 0x1,};
struct $6E0AF029687F8788E7AA2DEAC3C56606 {adbHandlerId handler_id;const adb_key_t *key;};
struct $6FABFC1284DD1437D43532E08AE85D17 {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_msg_type_number_t boot_infoOffset;mach_msg_type_number_t boot_infoCnt;char boot_info[4096];};
struct $704B6F3E1CAEFA74D31888B2D78F9F88 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t semaphore;};
struct $7076454C220BCB0A4BC98C4D7957D8C3 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t names;mach_msg_ool_descriptor_t types;NDR_record_t NDR;mach_msg_type_number_t namesCnt;mach_msg_type_number_t typesCnt;};
struct $71210C31999B47ECFCA79A4496892A9D {mach_msg_bits_t msgh_bits;mach_msg_size_t msgh_size;mach_port_t msgh_remote_port;mach_port_t msgh_local_port;mach_msg_size_t msgh_reserved;mach_msg_id_t msgh_id;};
struct $71B18ED6CCE7F8693D0AE793EAB8102E {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t new_port;NDR_record_t NDR;exception_mask_t exception_mask;exception_behavior_t behavior;thread_state_flavor_t new_flavor;};
struct $73352B6DCC801F1A038056696B3E491C {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t old_handlers[32];NDR_record_t NDR;mach_msg_type_number_t masksCnt;exception_mask_t masks[32];exception_behavior_t old_behaviors[32];thread_state_flavor_t old_flavors[32];};
struct $73C487D09BD8877E84E65868850A4480 {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;ledger_item_t balance;ledger_item_t limit;};
struct $740196A4AE4F0F1C0D656C4EF0AFE809 {mach_msg_header_t Head;NDR_record_t NDR;thread_state_flavor_t flavor;mach_msg_type_number_t old_stateCnt;};
struct $75304CCD3C967214A8BD283A9F6A93D0 {mach_msg_header_t Head;NDR_record_t NDR;host_flavor_t flavor;mach_msg_type_number_t host_info_outCnt;};
struct $7568DFD570526C5C2FE600A63FF7542E {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t contorl_port;};
struct $7582536C10AFFECA08D37C9B1CAD0B28 {unsigned __int32 rsvd1 : 1;unsigned __int32 delete : 1;unsigned __int32 caps_lock : 1;unsigned __int32 reset : 1;unsigned __int32 control : 1;unsigned __int32 shift : 1;unsigned __int32 option : 1;unsigned __int32 open_apple : 1;unsigned __int32 rsvd2 : 8;unsigned __int32 rsvd3 : 16;};
struct $75BB8CC7973838045C1884338FD534F5 {u_int ni_proplist_len;ni_property *ni_proplist_val;};
enum $75C8E7CA27BE1E0F4E6BF64D1993A788 {TCL_INT = 0x0,TCL_DOUBLE = 0x1,TCL_EITHER = 0x2,};
struct $75CD40B42DA3FE652B2050998764C1EA {mach_msg_header_t Head;NDR_record_t NDR;vm_address_t address;vm_size_t size;};
struct $77044CD3286DFFD089401BC1A550C0B3 {mach_msg_header_t Head;NDR_record_t NDR;mach_port_name_t name;mach_port_right_t right;mach_port_delta_t delta;};
union $77272609D9A6BB912C7C0540469DE8CB {unsigned int word;struct $77272609D9A6BB912C7C0540469DE8CB::$B9E36A3E03C81543B20658C41A7D7AF5 bits;};
struct $77272609D9A6BB912C7C0540469DE8CB::$B9E36A3E03C81543B20658C41A7D7AF5 {unsigned __int32 pmc3select : 5;unsigned __int32 pmc4select : 5;unsigned __int32 reserved : 22;};
struct $776B37716F2A203FA8D593ECE8B979C2 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_ports_descriptor_t thread_list;NDR_record_t NDR;mach_msg_type_number_t thread_listCnt;};
struct $778EB01A7E54F11D251DAE9DCCA40C02 {mach_msg_header_t Head;NDR_record_t NDR;boolean_t must_wire;};
union $78AF60B7EAAC2BB1C96EBCEF432CA4FF {unsigned int word;struct $78AF60B7EAAC2BB1C96EBCEF432CA4FF::$D1E6A8F728F5909FD3B9EE821FA47C9B bits;};
struct $78AF60B7EAAC2BB1C96EBCEF432CA4FF::$D1E6A8F728F5909FD3B9EE821FA47C9B {unsigned __int32 dis : 1;unsigned __int32 dp : 1;unsigned __int32 du : 1;unsigned __int32 dms : 1;unsigned __int32 dmr : 1;unsigned __int32 reserved3 : 1;unsigned __int32 reserved4 : 1;unsigned __int32 reserved5 : 2;unsigned __int32 reserved6 : 1;unsigned __int32 threshold : 6;unsigned __int32 reserved7 : 1;unsigned __int32 reserved8 : 1;unsigned __int32 reserved9 : 1;unsigned __int32 pmc1select : 7;unsigned __int32 pmc2select : 6;};
struct $79846A2851F9B42755BC301EEB2E6F0E {ua_short version;ua_short dstCID;ua_long pktAttnRecvSeq;};
enum $7AE70D482D57B64FB9C9B10583B098AB {CURLCLOSEPOLICY_NONE = 0x0,CURLCLOSEPOLICY_OLDEST = 0x1,CURLCLOSEPOLICY_LEAST_RECENTLY_USED = 0x2,CURLCLOSEPOLICY_LEAST_TRAFFIC = 0x3,CURLCLOSEPOLICY_SLOWEST = 0x4,CURLCLOSEPOLICY_CALLBACK = 0x5,CURLCLOSEPOLICY_LAST = 0x6,};
struct $7CAB042C95D279B03371C67C49CFDDCE {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t new_lock_set;};
struct $7D6BE7882CE721D70B16F72EF4350FEA {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;vm_read_entry_t data_list;};
enum $7DE6A019FB8D510204474F438D93B845 {TCL_QUEUE_TAIL = 0x0,TCL_QUEUE_HEAD = 0x1,TCL_QUEUE_MARK = 0x2,};
struct $7E69CF2F21F2DE86821941D7ACE3ABBA {mach_msg_header_t Head;NDR_record_t NDR;processor_set_flavor_t flavor;mach_msg_type_number_t info_outCnt;};
struct $8109324A5E6FC6C8E3497EBF9ED344C0 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t task;mach_msg_ool_descriptor_t symtab;NDR_record_t NDR;mach_msg_type_number_t nameOffset;mach_msg_type_number_t nameCnt;char name[32];mach_msg_type_number_t symtabCnt;};
struct $8217C0F59845DB3ADC1F027C6FFDA160 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t subset_port;};
struct $86C2375893A8CA92ECE6B4BF33CA1FB1 {unsigned __int32 cmd : 2;unsigned __int32 xo : 1;unsigned __int32 eom : 1;unsigned __int32 sts : 1;unsigned __int32 xo_relt : 3;u_char bitmap;ua_short tid;ua_long user_bytes;u_char data[578];};
struct $86F29632C393BEC61052C835C8FE3129 {mach_msg_header_t Head;NDR_record_t NDR;boolean_t assign_threads;};
struct $87460818A9C42CAAD7BB4BC88EB3F9D9 {mach_msg_header_t Head;NDR_record_t NDR;mach_port_name_t name;mach_port_flavor_t flavor;mach_msg_type_number_t port_info_outCnt;};
struct $876EB2FF35BBAB0A90EC46359A04E1CD {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_msg_type_number_t task_info_outCnt;integer_t task_info_out[8];};
struct $89FB7E727BDCF83A4F62DE682B7A306A {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t notify;NDR_record_t NDR;mach_port_name_t name;mach_msg_id_t msgid;mach_port_mscount_t sync;};
struct $8A33726821E9A847F60F5A915A19E5C8 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t target_task;mach_msg_port_descriptor_t host;NDR_record_t NDR;security_token_t sec_token;};
struct $8A833B3771E877D0F99F9E4D0939E663 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t pager;NDR_record_t NDR;boolean_t internal;memory_object_size_t size;vm_prot_t permission;};
struct $8B37CF15709946EDDC0C4B26DEA62F14 {ua_short CID;ua_long pktFirstByteSeq;ua_long pktNextRecvSeq;ua_short pktRecvWdw;u_char descriptor;u_char data[1];};
struct $8B6FDD4F28EF84224B001DC98A6CCF9E {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;vm_address_t target_address;vm_prot_t cur_protection;vm_prot_t max_protection;};
struct $8B726806335705383F6869494B8039C5 {unsigned __int16 entryno;ZT_entry zt;};
struct $8BAB52A5AF78D0C10584D69C8CD7C023 {mach_msg_header_t not_header;NDR_record_t NDR;mach_msg_type_number_t not_count;mach_msg_format_0_trailer_t trailer;};
struct $8C0320D5CB4B54BF00A8178CA0C2A69D {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t parent_port;};
struct $8C51462DCCBA10E8B75CFFF786FC297E {mach_msg_header_t Head;NDR_record_t NDR;vm_offset_t offset;};
struct $8CA3E71BB34925FD9C275170CC27C0FB {int ioc_cmd;void *ioc_cr;int ioc_id;int ioc_count;int ioc_error;int ioc_rval;void *ioc_private;int ioc_filler[4];};
struct $8D01EF7D402B901A89C869B3548212CB {u_long flags;u_int cachesize;int maxkeypage;int minkeypage;u_int psize;int (__fastcall *compare)(const DBT *, const DBT *);size_t (__fastcall *prefix)(const DBT *, const DBT *);int lorder;};
struct $8E8217BBADE0ADE8EA72A465AE8DB052 {mach_msg_header_t Head;NDR_record_t NDR;thread_policy_flavor_t flavor;mach_msg_type_number_t policy_infoCnt;boolean_t get_default;};
struct $8EB54569AD9E10C311A4CB0DD2CBE508 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t table_info;mach_msg_ool_descriptor_t tree_info;NDR_record_t NDR;ipc_info_space_t info;mach_msg_type_number_t table_infoCnt;mach_msg_type_number_t tree_infoCnt;};
union $907F8256D20D0CD585FA2E06E7F85F62 {adbRegisterStandard stand;adbRegister3 reg3;};
struct $90A287D75B3FB741BE53DF4ABD7E5732 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t upl;NDR_record_t NDR;vm_address_t address;};
enum $911FC6B71CAC49F8DB4B0B0CACD0B23C {BPF_TAP_DISABLE = 0x0,BPF_TAP_INPUT = 0x1,BPF_TAP_OUTPUT = 0x2,BPF_TAP_INPUT_OUTPUT = 0x3,};
struct $915DBCE06085160681480AA05D6C8293 {unsigned __int32 unused : 2;unsigned __int32 hopcount : 4;unsigned __int32 length : 10;ua_short checksum;at_net dst_net;at_net src_net;at_node dst_node;at_node src_node;at_socket dst_socket;at_socket src_socket;u_char type;char data[586];};
struct $92C88324278AB154CB324C17F95F0A4E {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t entry_handle;};
struct $93C2B8490B6AF9A81DBF5FE5942B9A86 {ua_short ddpx_length;ua_short ddpx_cksm;at_net ddpx_dnet;at_net ddpx_snet;u_char ddpx_dnode;u_char ddpx_snode;u_char ddpx_dest;u_char ddpx_source;u_char ddpx_type;u_char ddpx_data[1];};
struct $940BEB7FDCEBF6BD2D78705CDCB7BC00 {mach_msg_header_t Head;NDR_record_t NDR;int flavor;mach_msg_type_number_t old_stateCnt;};
struct $9487B923D69225998A44A53C15C58453 {mach_msg_header_t Head;NDR_record_t NDR;vm_address_t address;natural_t nesting_depth;mach_msg_type_number_t infoCnt;};
union $94CB200B36B7778DB0012FD0C2F25E9C {mach_msg_port_descriptor_t port;mach_msg_ool_descriptor_t out_of_line;mach_msg_ool_ports_descriptor_t ool_ports;mach_msg_type_descriptor_t type;};
struct $950A3BF8808771ACD907036B0145D04E {char command;char flags;at_net cable_range_start;at_net cable_range_end;u_char data[1];};
struct $9542197A1301620A60E097220E793D31 {mach_msg_header_t Head;NDR_record_t NDR;vm_address_t address;vm_size_t size;vm_inherit_t new_inheritance;};
enum $955A79D8B36BA02C2AC93EA67E94FC4E {dot3ChipSetNational8390 = 0x1,dot3ChipSetNationalSonic = 0x2,};
struct $960F984C3AE962B8F9E63C3D54374EB6 {mach_msg_header_t Head;NDR_record_t NDR;policy_t policy;mach_msg_type_number_t baseCnt;integer_t base[5];boolean_t set_limit;};
struct $979FA3DE6ECCF956231BFC297C4278E6 {int quot;int rem;};
struct $99892F497716B18479AFC6F93A6376AD {mach_msg_header_t Head;NDR_record_t NDR;processor_flavor_t flavor;mach_msg_type_number_t processor_info_outCnt;};
struct $9AA8814A56848052027B4042AE3CFED4 {mach_msg_header_t header;mach_msg_trailer_t trailer;};
struct $9AB293AD14E7E28F8D88B77C9D755114 {mach_msg_header_t Head;NDR_record_t NDR;mach_msg_type_number_t host_nameOffset;mach_msg_type_number_t host_nameCnt;char host_name[80];mach_msg_type_number_t port_nameOffset;mach_msg_type_number_t port_nameCnt;char port_name[80];};
struct $9ADB6D801CB74636DD3BB8128AE6A17C {mach_msg_header_t Head;NDR_record_t NDR;mach_port_right_t right;};
enum $9B247B4FB8AF703C9CE314B5E47E50E3 {kHardLinkFileType = 0x686C6E6B,kHFSPlusCreator = 0x6866732B,};
struct $9B5E795B1A0F48F193309CBBF76F3690 {AUTH *cl_auth;struct $9B5E795B1A0F48F193309CBBF76F3690::clnt_ops *cl_ops;caddr_t cl_private;};
struct $9B5E795B1A0F48F193309CBBF76F3690::clnt_ops {enum clnt_stat (__fastcall *cl_call)();void (__fastcall *cl_abort)();void (__fastcall *cl_geterr)();int (__fastcall *cl_freeres)();void (__fastcall *cl_destroy)();int (__fastcall *cl_control)();};
struct $9BD15C2DE3B549B6E5D91AD4D5FB2472 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t signature;mach_msg_port_descriptor_t port_id;NDR_record_t NDR;mach_msg_type_number_t port_nameOffset;mach_msg_type_number_t port_nameCnt;char port_name[80];};
struct $9CD2511C975EA3879926793D07843532 {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;unsigned int object_type;vm_offset_t object_addr;};
struct $9CD45B6D299FC36A745AB895FED2FFAE {mach_msg_header_t Head;NDR_record_t NDR;task_policy_flavor_t flavor;mach_msg_type_number_t policy_infoCnt;boolean_t get_default;};
struct $9D47920389E792E7BC941BE34CEE9E53 {mach_msg_header_t Head;NDR_record_t NDR;vm_address_t basepc;vm_address_t boundspc;};
struct $9D8C3D43D035D08976FF51F4853CEAC7 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t task;NDR_record_t NDR;vm_address_t address;vm_size_t size;vm_prot_t access;};
enum $A0887B53835153F1EDF9F781696CAC39 {dot3ChipSetIntel82586 = 0x1,dot3ChipSetIntel82596 = 0x2,dot3ChipSetIntel82557 = 0x3,};
struct $A1F779EC0A67B47A0153BAA39A848A18 {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;vm_size_t outsize;};
struct $A28B60B4E296EA201CF19C8525D87881 {int nranges;_RuneEntry *ranges;};
struct $A3731B40A7739B095B29B0FE10FCD1FD {unsigned __int32 id : 16;unsigned __int32 qr : 1;unsigned __int32 opcode : 4;unsigned __int32 aa : 1;unsigned __int32 tc : 1;unsigned __int32 rd : 1;unsigned __int32 ra : 1;unsigned __int32 unused : 3;unsigned __int32 rcode : 4;unsigned __int32 qdcount : 16;unsigned __int32 ancount : 16;unsigned __int32 nscount : 16;unsigned __int32 arcount : 16;};
struct $A463688F15197DAD8463801EB7AB0BB4 {unsigned __int8 dst_sap;unsigned __int8 src_sap;unsigned __int8 control;unsigned __int8 protocol[5];};
struct $A474581121662292E5F04EE46D9A30FE {mach_msg_header_t Head;NDR_record_t NDR;vm_address_t address;vm_size_t size;vm_sync_t sync_flags;};
struct $A4B2B056AC02B7A91138DA853BA9D10A {int srr_max_tries;int srr_retry_sec;int srr_retry_usec;int deltat_max_tries;int deltat_retry_sec;int deltat_retry_usec;int deltat_msg_life;int pc_checkup_interval;int crypt_algorithm;int transport_default;int conf_network;int conf_netport;int timer_quantum;int tcp_conn_steady;int tcp_conn_opening;int tcp_conn_max;int compat;int syslog;int old_nmmonitor;};
enum $A573D5BFC6FE9379B4011F75D6601CED {FE_INEXACT = 0x2000000,FE_DIVBYZERO = 0x4000000,FE_UNDERFLOW = 0x8000000,FE_OVERFLOW = 0x10000000,FE_INVALID = 0x20000000,FE_ALL_EXCEPT = 0x3E000000,};
struct $A5EA39C0CE70DF2015B585156ECF8E0B {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t object_name;NDR_record_t NDR;vm_address_t address;vm_size_t size;mach_msg_type_number_t infoCnt;int info[10];};
struct $A6F5D22C47870C9C34E13B26D36736E1 {unsigned __int32 id : 16;unsigned __int32 qr : 1;unsigned __int32 opcode : 4;unsigned __int32 aa : 1;unsigned __int32 tc : 1;unsigned __int32 rd : 1;unsigned __int32 ra : 1;unsigned __int32 unused : 1;unsigned __int32 ad : 1;unsigned __int32 cd : 1;unsigned __int32 rcode : 4;unsigned __int32 qdcount : 16;unsigned __int32 ancount : 16;unsigned __int32 nscount : 16;unsigned __int32 arcount : 16;};
struct $A7364FA697E163A2B23AEB9DAC3E45FB {enum xdr_op x_op;struct $A7364FA697E163A2B23AEB9DAC3E45FB::xdr_ops *x_ops;caddr_t x_public;caddr_t x_private;caddr_t x_base;int x_handy;};
struct $A7364FA697E163A2B23AEB9DAC3E45FB::xdr_ops {int (__fastcall *x_getlong)();int (__fastcall *x_putlong)();int (__fastcall *x_getbytes)();int (__fastcall *x_putbytes)();u_int (__fastcall *x_getpostn)();int (__fastcall *x_setpostn)();int *(__fastcall *x_inline)();void (__fastcall *x_destroy)();};
struct $A8165CB9074F0252F5387BFE013515BC {mach_msg_header_t Head;NDR_record_t NDR;task_flavor_t flavor;mach_msg_type_number_t task_info_outCnt;};
struct $AAF01D1DF014C088EF592F6E4410D618 {mach_msg_header_t not_header;mach_msg_format_0_trailer_t trailer;};
enum $AAF7D8B1D740C4801D49F07692D1E0A1 {SQL_IS_YEAR = 0x1,SQL_IS_MONTH = 0x2,SQL_IS_DAY = 0x3,SQL_IS_HOUR = 0x4,SQL_IS_MINUTE = 0x5,SQL_IS_SECOND = 0x6,SQL_IS_YEAR_TO_MONTH = 0x7,SQL_IS_DAY_TO_HOUR = 0x8,SQL_IS_DAY_TO_MINUTE = 0x9,SQL_IS_DAY_TO_SECOND = 0xA,SQL_IS_HOUR_TO_MINUTE = 0xB,SQL_IS_HOUR_TO_SECOND = 0xC,SQL_IS_MINUTE_TO_SECOND = 0xD,};
struct $AB09096FC22418DF5FF078E5EEC0B812 {mach_msg_header_t Head;NDR_record_t NDR;vm_address_t address;vm_size_t size;int flags;};
struct $AB89E1C42AC04654AD793083A62D1A9F {mach_msg_header_t Head;NDR_record_t NDR;vm_address_t info;};
struct $ACB9639845DE66FD3FA84A89BA11A6C6 {mach_msg_header_t Head;NDR_record_t NDR;thread_flavor_t flavor;mach_msg_type_number_t thread_info_outCnt;};
enum $ACDB03B0D9D598C0F761C4B16B3D1CB5 {kHFSMaxVolumeNameChars = 0x1B,kHFSMaxFileNameChars = 0x1F,kHFSPlusMaxFileNameChars = 0xFF,};
struct $ADC17CA903D0A10C18079E60B512CFB6 {mach_msg_header_t Head;NDR_record_t NDR;unsigned int taskID;unsigned int TWI_TableStart;unsigned int Desc_TableStart;};
struct $AF39247D48CF164753A445931539035C {__int16 id;int x;int y;int z;mmask_t bstate;};
struct $AF6F394DED458EEBDAD15880C92DFAA7 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t data;NDR_record_t NDR;kmod_t module;kmod_control_flavor_t flavor;mach_msg_type_number_t dataCnt;};
struct $AFE166C1B1045E0C8B7F866BEC963EDA {mach_msg_header_t Head;NDR_record_t NDR;exception_mask_t exception_mask;};
struct $B0130559E5806B7D1758D14999BC33AE {mach_msg_header_t Head;NDR_record_t NDR;vm_address_t address;vm_size_t size;vm_address_t data;};
struct $B01B4E9250F885241409748218B2C105 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t pages;NDR_record_t NDR;mach_msg_type_number_t pagesCnt;};
struct $B0A4D3FCA1AE58C86963BEC154F83A57 {int print_level;int ipc_in;int ipc_out;int tracing;int vmtp;int netname;int deltat;int tcp;int mem;};
struct $B1FA16DA0CC571429FF694D2198EB26D {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_ports_descriptor_t processor_sets;NDR_record_t NDR;mach_msg_type_number_t processor_setsCnt;};
enum $B2A44DC877B17F2021CE46A73658A10E {DB_BTREE = 0x0,DB_HASH = 0x1,DB_RECNO = 0x2,};
struct $B3220D9486325F8BA63885498B936915 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t names;mach_msg_ool_descriptor_t info;NDR_record_t NDR;mach_msg_type_number_t namesCnt;mach_msg_type_number_t infoCnt;};
struct $B346CF55E253733CEEA9A9F57C8BD312 {mach_msg_header_t Head;NDR_record_t NDR;mach_port_name_t name;mach_port_right_t right;};
struct $B43F0C9282EE2B60E316DDBE9B7BAD24 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t service_names;mach_msg_ool_descriptor_t server_names;mach_msg_ool_descriptor_t service_active;NDR_record_t NDR;mach_msg_type_number_t service_namesCnt;mach_msg_type_number_t server_namesCnt;mach_msg_type_number_t service_activeCnt;};
struct $B609C4CC44C72843B520E4D8871C3E06 {mach_msg_header_t Head;NDR_record_t NDR;int table_entries;};
struct $B6133C04D7E68696884D0F2477EC89D3 {mach_msg_header_t Head;NDR_record_t NDR;int policy;boolean_t change_threads;};
struct $B74BBF4C1467FECDB27E8CB1AA37D794 {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;vm_machine_attribute_val_t value;};
struct $B817C4E7F216D35F032A11C86EB37440 {int sig;char opaque[4];};
struct $B84095E180EBE617859A8545EC2805FC {mach_msg_header_t Head;NDR_record_t NDR;mach_port_name_t name;mach_port_mscount_t mscount;};
struct $B8642CD798FE16F406A454FEEE53FFC8 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t parent_entry;NDR_record_t NDR;memory_object_size_t size;memory_object_offset_t offset;vm_prot_t permission;};
struct $B8B9B85B971E3DBFC31707A9282CDA9E {unsigned __int8 mig_vers;unsigned __int8 if_vers;unsigned __int8 reserved1;unsigned __int8 mig_encoding;unsigned __int8 int_rep;unsigned __int8 char_rep;unsigned __int8 float_rep;unsigned __int8 reserved2;};
enum $B8E8934C01BE5F02B50786E7D8A5B678 {RN_NEAREST = 0x0,RN_TOWARD_ZERO = 0x1,RN_TOWARD_PLUS = 0x2,RN_TOWARD_MINUS = 0x3,};
struct $B9D89F8ED69AD657CF8CCF6FD4EA24D0 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t default_manager;};
struct $BAA0E1D2BF5986DFAC16C10809EF9355 {mach_port_t name;mach_msg_size_t pad1;unsigned __int32 pad2 : 16;unsigned __int32 disposition : 8;unsigned __int32 type : 8;};
struct $BB05E7C1B464A2F039E23B91B2F73361 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t processor_info;NDR_record_t NDR;natural_t processor_count;mach_msg_type_number_t processor_infoCnt;};
struct $BBF0DF368E56DACC45223BCB3DEA73E4 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_ports_descriptor_t ledgers;NDR_record_t NDR;mach_msg_type_number_t ledgersCnt;boolean_t inherit_memory;};
struct $BD234ABF5512865B2381E7712BF88565 {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_msg_type_number_t thread_info_outCnt;integer_t thread_info_out[12];};
struct $BD619B2F7AFF7BA6F06506AA27210664 {regoff_t rm_so;regoff_t rm_eo;};
union $BDA13BEC95DF5B6207F6150AD55988EA {double __dbl;ppc_fp_scr_t __scr;};
union $C0E8C8526D9DD916317642865BB4191C {float f;double d;unsigned int x[2];};
struct $C14D86D16E65DCD7FF19482AD8623ED6 {mach_msg_header_t Head;};
union $C18A6CE957EEA4FD62416C6C10A8EE86 {unsigned int word;struct $C18A6CE957EEA4FD62416C6C10A8EE86::$5F68E65D1BB17161FB22A8235177FA61 bits;};
struct $C18A6CE957EEA4FD62416C6C10A8EE86::$5F68E65D1BB17161FB22A8235177FA61 {unsigned __int32 threshmult : 1;unsigned __int32 reserved : 31;};
struct $C321B312F3F4C124C1E48D6C56909B8C {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;vm_size_t page_size;};
enum $C3D2D4EDCF7C6B2D868D1D9CA16C55C6 {dot3ChipSetWesternDigital83C690 = 0x1,dot3ChipSetWesternDigital83C790 = 0x2,};
struct $C541AC86759D83DA08D4C42C04A02CD9 {u_int ni_proplist_list_len;ni_proplist *ni_proplist_list_val;};
struct $C5B91AD60721E8419734AA2D1E4E80CD {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t upl;NDR_record_t NDR;vm_size_t size;mach_msg_type_number_t page_infoCnt;upl_page_info_t page_info[20];integer_t flags;};
struct $C6E5E20E9CA57385FADCC3EC88B8E8F5 {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;kmod_t module;};
struct $C7B1F467F4986167EC17EBF81A473987 {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_msg_type_number_t host_info_outCnt;integer_t host_info_out[12];};
struct $C894ED8A9C18B83A22D1390381C5E4A5 {int Primitive;int CmdResult;unsigned __int16 ReqRefNum;unsigned __int16 Filler;};
struct $C9793B2A88A40550F3E6FCBE57C78800 {u_int sprayarr_len;char *sprayarr_val;};
struct $C97B239F9A4549872AEACF29321C5C44 {mach_msg_header_t Head;NDR_record_t NDR;vm_size_t size;};
union $CA1DD0B65E3A4ADE6E56E85377B62761 {unsigned int word;struct $CA1DD0B65E3A4ADE6E56E85377B62761::$11E2CD1FADFFABB4487D57A9E7A620C8 bits;};
struct $CA1DD0B65E3A4ADE6E56E85377B62761::$11E2CD1FADFFABB4487D57A9E7A620C8 {unsigned __int32 ov : 1;unsigned __int32 cv : 31;};
struct $CAE54129DDC456E19A5898FF69B86D62 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t ledger_ledger;NDR_record_t NDR;ledger_item_t transfer;};
struct $CC043B3A15E15755209E3A20F84F16AB {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t new_set;mach_msg_port_descriptor_t new_name;};
struct $CD97E842BE97226AEDD8FA0499E21FED {mach_msg_header_t Head;NDR_record_t NDR;vm_address_t routine_entry_pt;int routine_number;};
struct $CDC8267DE048B2F631A00EEC2191AA35 {mach_msg_header_t Head;NDR_record_t NDR;vm_read_entry_t data_list;natural_t count;};
struct $CEEAFC48706D61F62A9F965D9CAA36A8 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t parent_task;mach_msg_port_descriptor_t host;mach_msg_ool_ports_descriptor_t ledgers;NDR_record_t NDR;security_token_t sec_token;mach_msg_type_number_t ledgersCnt;boolean_t inherit_memory;};
struct $CFAAAE27EC8C29B8B6ACAB4EED048F33 {int maxlen;int len;char *buf;};
struct $D01A4AC644F6B88C742A307AE9CB3F5A {mach_msg_header_t Head;NDR_record_t NDR;thread_state_flavor_t flavor;mach_msg_type_number_t new_stateCnt;natural_t new_state[144];};
enum $D034DF41D4B9D2189D2EB2EA4C611CD6 {dot3ChipSetDigitalDC21040 = 0x1,dot3ChipSetDigitalDC21140 = 0x2,dot3ChipSetDigitalDC21041 = 0x3,dot3ChipSetDigitalDC21140A = 0x4,dot3ChipSetDigitalDC21142 = 0x5,};
struct $D03EAABF4B73BA203F60C8CE80978D99 {char magic[8];char encoding[32];rune_t (__fastcall *sgetrune)(const char *, size_t, const char **);int (__fastcall *sputrune)(rune_t, char *, size_t, char **);rune_t invalid_rune;unsigned int runetype[256];rune_t maplower[256];rune_t mapupper[256];_RuneRange runetype_ext;_RuneRange maplower_ext;_RuneRange mapupper_ext;void *variable;int variable_len;};
struct $D09842556D06A2DF198ED28371C9FC24 {mach_msg_header_t Head;NDR_record_t NDR;mach_port_name_t name;mach_port_flavor_t flavor;mach_msg_type_number_t port_infoCnt;integer_t port_info[10];};
struct $D0AB9F48B0077248C9C221F011C15B93 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_ports_descriptor_t act_list;NDR_record_t NDR;mach_msg_type_number_t act_listCnt;};
struct $D0C9668C16251A7C1942AA04B3C1BAAB {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t port_id;};
struct $D1F0690F11A92272A853B779A09D2DBD {u_int ni_idlist_len;u_long *ni_idlist_val;};
struct $D379431B13F78A36F2202C5AA386190E {char *dptr;int dsize;};
struct $D46FD31F651800D10C39109ADB122EE5 {int code;int thread;int a1;int a2;int a3;int a4;int a5;int a6;};
struct $D48A1587B9C67DDCC12D42BCFEC74299 {mach_msg_header_t Head;NDR_record_t NDR;kmod_t module;};
enum $D52DC52FEEE9FBA5CD86FC803E3DC8C2 {TIMECOND_NONE = 0x0,TIMECOND_IFMODSINCE = 0x1,TIMECOND_IFUNMODSINCE = 0x2,TIMECOND_LASTMOD = 0x3,TIMECOND_LAST = 0x4,};
struct $D5C5C0A4FB77109A22B40E51950751DD {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t special_port;NDR_record_t NDR;int which_port;};
struct $D71B1BBFA8F5F0E20ADE066C27DF34A3 {int ic_cmd;int ic_timout;int ic_len;char *ic_dp;};
struct $D72606FC5CBC39B3E4CA13C79CCA47CB {u_char at_pap_connection_id;u_char at_pap_type;u_char at_pap_sequence_number[2];u_char at_pap_responding_socket;u_char at_pap_flow_quantum;u_char at_pap_wait_time_or_result[2];u_char at_pap_buffer[512];};
struct $D81AFE54BC1383739B7B7705B8C42C3D {mach_msg_header_t Head;NDR_record_t NDR;int policy;};
struct $D86814E451E26A1A60DC4665DB085C83 {mach_msg_header_t Head;NDR_record_t NDR;vm_address_t address;vm_size_t size;mach_msg_type_number_t page_infoCnt;integer_t flags;integer_t force_data_sync;};
struct $D9B0ADBD00F5F5522FB9AC300CCD391E {mach_msg_header_t Head;NDR_record_t NDR;processor_set_flavor_t flavor;mach_msg_type_number_t policy_infoCnt;integer_t policy_info[5];boolean_t change;};
struct $DA3EF9D89B837FDE93915298E895B43B {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t child_task;};
struct $DAECF1BBBEC63DCCC1C5BA594BE2FE4F {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t objects;NDR_record_t NDR;vm_info_region_64_t region;mach_msg_type_number_t objectsCnt;};
struct $DAF19F87D18289B2FEB9E5CF85C90F9A {mach_msg_header_t Head;NDR_record_t NDR;vm_address_t address;vm_size_t size;boolean_t set_maximum;vm_prot_t new_protection;};
struct $DB68657B2CF3361C93E3D336E930DDB3 {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_msg_type_number_t versionOffset;mach_msg_type_number_t versionCnt;char version[80];};
struct $DB8704220B65CACD3F6F0001E0C0E1CB {IODeviceIndex deviceIndex;IODeviceRevision deviceRevision;};
struct $DBA30DED97FFFF6D93797DB9E5CF4F43 {mach_msg_header_t Head;NDR_record_t NDR;int node;int which;};
struct $DCC84FF2B00B5674BC1D1501944EB860 {u_long flags;u_int cachesize;u_int psize;int lorder;size_t reclen;u_char bval;char *bfname;};
struct $E0DB54FB1236B40874C7451A4BD28FF5 {mach_msg_trailer_type_t msgh_trailer_type;mach_msg_trailer_size_t msgh_trailer_size;mach_port_seqno_t msgh_seqno;};
struct $E24E91FD65EFF0F160CA6C71162442DA {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t object;NDR_record_t NDR;vm_address_t address;vm_size_t size;vm_address_t mask;int flags;memory_object_offset_t offset;boolean_t copy;vm_prot_t cur_protection;vm_prot_t max_protection;vm_inherit_t inheritance;};
struct $E3188AF9666AE21995C94F310B376FC6 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t poly;NDR_record_t NDR;mach_port_name_t name;};
struct $E424EB0872B7B2B5F9323999D1384604 {unsigned __int32 reserved0 : 1;unsigned __int32 exceptionalEvent : 1;unsigned __int32 serviceRequestEnable : 1;unsigned __int32 reserved1 : 1;unsigned __int32 deviceAddress : 4;unsigned __int32 handlerId : 8;unsigned __int8 reserved2[6];};
struct $E4570C51AE0EDA4FC0040353BC3B1814 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t service_port;};
struct $E538659855802480E9382832C06656B2 {mach_msg_header_t Head;NDR_record_t NDR;task_flavor_t flavor;mach_msg_type_number_t task_info_inCnt;integer_t task_info_in[8];};
struct $E65ABC06A11602FED23D2457B8AEAC9D {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t special_port;};
struct $E97267E034E71568AADDE042A76192B8 {mach_msg_size_t msgh_descriptor_count;};
enum $E9C6ABAFEE51821EC034C6B74D5B344E {kDNSServiceDiscoveryNoFlags = 0x0,kDNSServiceDiscoveryMoreRepliesImmediately = 0x1,};
struct $EA40F68F7F1CDE3A91D37AA9C07723E8 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_ports_descriptor_t service_ports;NDR_record_t NDR;mach_msg_type_number_t service_portsCnt;boolean_t all_services_known;};
struct $EA4C3483C6558261D28583524A2D2C65 {u_int bsize;u_int ffactor;u_int nelem;u_int cachesize;u_int32_t (__fastcall *hash)(const void *, size_t);int lorder;};
struct $EA7534D780195B9F22D1174E6CA3EFC2 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t poly;};
enum $EB4F25A3AB2B34DE382859FFD4ADE17B {DNSServiceDomainEnumerationReplyAddDomain = 0x0,DNSServiceDomainEnumerationReplyAddDomainDefault = 0x1,DNSServiceDomainEnumerationReplyRemoveDomain = 0x2,};
enum $ECDADD1EECA7ABE995B6293E703DBBBE {NFNON = 0x0,NFREG = 0x1,NFDIR = 0x2,NFBLK = 0x3,NFCHR = 0x4,NFLNK = 0x5,NFSOCK = 0x6,NFFIFO = 0x7,};
enum $EDAEAD02DC67A4EB67219B6FB187A2BE {kHFSVolumeHardwareLockBit = 0x7,kHFSVolumeUnmountedBit = 0x8,kHFSVolumeSparedBlocksBit = 0x9,kHFSVolumeNoCacheRequiredBit = 0xA,kHFSBootVolumeInconsistentBit = 0xB,kHFSCatalogNodeIDsReusedBit = 0xC,kHFSVolumeSoftwareLockBit = 0xF,kHFSVolumeHardwareLockMask = 0x80,kHFSVolumeUnmountedMask = 0x100,kHFSVolumeSparedBlocksMask = 0x200,kHFSVolumeNoCacheRequiredMask = 0x400,kHFSBootVolumeInconsistentMask = 0x800,kHFSCatalogNodeIDsReusedMask = 0x1000,kHFSVolumeSoftwareLockMask = 0x8000,kHFSMDBAttributesMask = 0x8380,};
struct $EE99DDBDD6523B38A4B5202F2305E34F {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t object_handle;NDR_record_t NDR;memory_object_size_t size;};
struct $F105F10DE5C66ECF2E7E726999936688 {mach_msg_trailer_type_t msgh_trailer_type;mach_msg_trailer_size_t msgh_trailer_size;};
struct $F11203120C87D682B8E6D27123FE2347 {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;vm_address_t address;};
struct $F1773A35038DB66F062B2D1DBF85E45A {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_port_rights_t srights;};
enum $F1818EFC007C0CFF41528F4AC69DA857 {FP_NAN = 0x1,FP_INFINITE = 0x2,FP_ZERO = 0x3,FP_NORMAL = 0x4,FP_SUBNORMAL = 0x5,};
struct $F1A44C946A11C4E88A7FB24B2ED8014B {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t port;NDR_record_t NDR;int which;};
struct $F1B3AE218D4ECD7C43A384264AB43EE3 {mach_msg_header_t Head;NDR_record_t NDR;boolean_t trace_status;};
enum $F37E133A365EB9F6FA66643137085251 {kHFSExtentDensity = 0x3,kHFSPlusExtentDensity = 0x8,};
struct $F3A38383CE2E0DAC4148785558BAB876 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t object;NDR_record_t NDR;vm_address_t address;vm_size_t size;vm_address_t mask;int flags;vm_offset_t offset;boolean_t copy;vm_prot_t cur_protection;vm_prot_t max_protection;vm_inherit_t inheritance;};
struct $F49B3D681D6431C8260F2C014755700B {mach_msg_header_t Head;NDR_record_t NDR;mach_port_right_t right;mach_port_name_t name;};
struct $F4F9A6DCA893D5DB6F32B9C415A8FCA2 {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_msg_type_number_t old_stateCnt;natural_t old_state[144];};
struct $F7035764D71E3AAEA9FB4FA9B6A17945 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t default_manager;NDR_record_t NDR;vm_size_t cluster_size;};
struct $F816343B0E4C3ED78F8AB466045FB12B {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;bootstrap_status_t service_active;};
struct $FA4B479EA2794BE071CA0591E1973F43 {mach_msg_header_t Head;NDR_record_t NDR;vm_offset_t map_base;vm_size_t map_size;};
struct $FA547AB27F70B847C07B2381F2BB5B39 {int re_magic;size_t re_nsub;const char *re_endp;struct re_guts *re_g;};
enum $FA613653AF18EE83F52363A02FF6739C {NSApplicationDirectory = 0x1,NSDemoApplicationDirectory = 0x2,NSDeveloperApplicationDirectory = 0x3,NSAdminApplicationDirectory = 0x4,NSLibraryDirectory = 0x5,NSDeveloperDirectory = 0x6,NSUserDirectory = 0x7,NSDocumentationDirectory = 0x8,NSDocumentDirectory = 0x9,NSCoreServiceDirectory = 0xA,NSAllApplicationsDirectory = 0x64,NSAllLibrariesDirectory = 0x65,};
struct $FB19EE544F0F316F1E6BF9A40B1BEA34 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t new_ledger;};
struct $FB4BFEF078574026C3C8614BADD24D68 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_ool_descriptor_t emulation_vector;NDR_record_t NDR;int vector_start;mach_msg_type_number_t emulation_vectorCnt;};
struct $FB65CC25317C65F4D3C395D38114E663 {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t pset;NDR_record_t NDR;policy_t policy;mach_msg_type_number_t baseCnt;integer_t base[5];mach_msg_type_number_t limitCnt;integer_t limit[1];boolean_t change;};
struct $FBC20E7BF2C031349A2F409FD459B98D {int Primitive;int CmdResult;};
struct $FC0A5D813D49EE50993C8B378A98E81C {mach_msg_header_t Head;NDR_record_t NDR;name_t service_name;};
struct $FC28B28F509CCD1DBFC66983DF428597 {mach_msg_header_t Head;NDR_record_t NDR;thread_policy_flavor_t flavor;mach_msg_type_number_t policy_infoCnt;integer_t policy_info[16];};
struct $FCCAD8574E122F2EFADDBD13F6972B4E {mach_msg_header_t Head;NDR_record_t NDR;kern_return_t RetCode;mach_timespec_t cur_time;};
struct $FDCFA80C9015498DB49FE80C74BE4ADF {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t reply;};
struct $FE3C27134D9979D1E07496C70FEB2BBD {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t parent_entry;NDR_record_t NDR;vm_size_t size;vm_offset_t offset;vm_prot_t permission;};
struct $FEDEB051CE08D897834232829C0C3BAE {mach_msg_header_t Head;NDR_record_t NDR;clock_flavor_t flavor;mach_msg_type_number_t clock_attrCnt;};
struct $FEE352AE48DD3E539C5CEAEF8CDAF3CD {int Primitive;unsigned __int16 ReqRefNum;unsigned __int8 ReqType;unsigned __int8 Filler;};
struct $FEF9726888255154C3B316680AA67EAD {u_char vers;u_char type;u_char answer;u_char pad;u_long id_num;struct osockaddr addr;};
struct $FFDCF6D4903B3C43BBF48445F1564ABC {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t old_handlerss[32];NDR_record_t NDR;mach_msg_type_number_t masksCnt;exception_mask_t masks[32];exception_behavior_t old_behaviors[32];thread_state_flavor_t old_flavors[32];};
struct $FFE74F33A8D4184B0115806877430EDD {mach_msg_header_t Head;mach_msg_body_t msgh_body;mach_msg_port_descriptor_t new_set;NDR_record_t NDR;boolean_t wait;};
typedef struct $8B37CF15709946EDDC0C4B26DEA62F14 ADSP_FRAME;
typedef struct $8B37CF15709946EDDC0C4B26DEA62F14 *ADSP_FRAMEPtr;
typedef struct $79846A2851F9B42755BC301EEB2E6F0E ADSP_OPEN_DATA;
typedef struct $79846A2851F9B42755BC301EEB2E6F0E *ADSP_OPEN_DATAPtr;
typedef struct $05EECDE53F008AE0E4F8A84193F3FFF1 AUTH;
typedef struct auth_dat AUTH_DAT;
typedef UnsignedWide AbsoluteTime;
typedef int (__fastcall *BERDecodeCallback)(BerElement *ber, void *data, int mode);
typedef int (__fastcall *BEREncodeCallback)(BerElement *ber, void *data);
typedef int *(*BER_ERRNO_FN)(void);
typedef void (__fastcall *BER_LOG_PRINT_FN)(const char *buf);
typedef void *(__fastcall *BER_MEMALLOC_FN)(ber_len_t size);
typedef void *(__fastcall *BER_MEMCALLOC_FN)(ber_len_t n, ber_len_t size);
typedef void (__fastcall *BER_MEMFREE_FN)(void *p);
typedef void *(__fastcall *BER_MEMREALLOC_FN)(void *p, ber_len_t size);
struct BKT {struct BKT *hnext;struct BKT *hprev;struct BKT *cnext;struct BKT *cprev;void *page;pgno_t pgno;unsigned int flags;};
struct BKTHDR {struct BKT *hnext;struct BKT *hprev;struct BKT *cnext;struct BKT *cprev;};
typedef unsigned int BOOKMARK;
typedef int BOOL;
struct BTHeaderRec {u_int16_t treeDepth;u_int32_t rootNode;u_int32_t leafRecords;u_int32_t firstLeafNode;u_int32_t lastLeafNode;u_int16_t nodeSize;u_int16_t maxKeyLength;u_int32_t totalNodes;u_int32_t freeNodes;u_int16_t reserved1;u_int32_t clumpSize;u_int8_t btreeType;u_int8_t reserved2;u_int32_t attributes;u_int32_t reserved3[16];};
struct BTNodeDescriptor {u_int32_t fLink;u_int32_t bLink;int8_t kind;u_int8_t height;u_int16_t numRecords;u_int16_t reserved;};
typedef struct $8D01EF7D402B901A89C869B3548212CB BTREEINFO;
union BTreeKey {u_int8_t length8;u_int16_t length16;u_int8_t rawData[522];};
enum BTreeKeyLimits {kMaxKeyLength = 0x208,};
typedef unsigned __int8 BYTE;
typedef void BZFILE;
typedef struct berelement BerElement;
typedef struct lber_memory_fns BerMemoryFunctions;
typedef struct berval BerValue;
typedef BerValue *BerVarray;
typedef unsigned __int8 Boolean;
typedef struct $9B5E795B1A0F48F193309CBBF76F3690 CLIENT;
typedef struct credentials CREDENTIALS;
typedef struct $621D828CE4D951BAF9864D86BC9CEA5B CTL_MSG;
typedef struct $FEF9726888255154C3B316680AA67EAD CTL_RESPONSE;
typedef void CURL;
typedef enum $51CDBEE2E35B9D83A8BED354636A6FC6 CURLINFO;
typedef enum $071FCE002284A13164F1DF56F5A67CDE CURLcode;
typedef void CURLconnect;
typedef enum $44FF3325E6D3BEACE1A77B09C2B69C85 CURLoption;
typedef void *ClientData;
typedef const HFSUniStr255 *ConstHFSUniStr255Param;
typedef struct tagDATE_STRUCT DATE_STRUCT;
typedef struct __db DB;
typedef DB DBM;
typedef struct $29720D4B1372A72A8E922F3C51907D2B DBT;
typedef enum $B2A44DC877B17F2021CE46A73658A10E DBTYPE;
typedef struct $93C2B8490B6AF9A81DBF5FE5942B9A86 DDPX_FRAME;
typedef struct _dirdesc DIR;
typedef uint32_t DNSRecordReference;
typedef void (__fastcall *DNSServiceBrowserReply)(DNSServiceBrowserReplyResultType resultType, const char *replyName, const char *replyType, const char *replyDomain, DNSServiceDiscoveryReplyFlags flags, void *context);
typedef enum $29FC7CC788C9FFDBF53740441D4A1DD5 DNSServiceBrowserReplyResultType;
typedef enum $6D22B6C70995B3A898F6ED894F8956B2 DNSServiceDiscoveryReplyFlags;
typedef void (__fastcall *DNSServiceDomainEnumerationReply)(DNSServiceDomainEnumerationReplyResultType resultType, const char *replyDomain, DNSServiceDiscoveryReplyFlags flags, void *context);
typedef enum $EB4F25A3AB2B34DE382859FFD4ADE17B DNSServiceDomainEnumerationReplyResultType;
typedef void (__fastcall *DNSServiceRegistrationReply)(DNSServiceRegistrationReplyErrorType errorCode, void *context);
typedef enum $120AC332EBC18F2A4396A3C657EB4314 DNSServiceRegistrationReplyErrorType;
typedef void (__fastcall *DNSServiceResolverReply)(struct sockaddr *interface, struct sockaddr *address, const char *txtRecord, DNSServiceDiscoveryReplyFlags flags, void *context);
typedef DSPParamBlock *DSPPBPtr;
struct DSPParamBlock {struct QElem *qLink;__int16 qType;__int16 ioTrap;Ptr ioCmdAddr;ProcPtr ioCompletion;__int16 ioResult;char *ioNamePtr;__int16 ioVRefNum;__int16 ioCRefNum;__int16 csCode;int qStatus;u_short ccbRefNum;union adsp_command u;};
typedef unsigned int DWORD;
typedef struct editline EditLine;
typedef struct fieldnode FIELD;
typedef struct typenode FIELDTYPE;
typedef struct __sFILE FILE;
typedef struct formnode FORM;
typedef struct $140863D2D8D68081E1A83A60AA385321 FTS;
typedef struct _ftsent FTSENT;
typedef int Field_Options;
struct FndrDirInfo {struct FndrDirInfo::$6E74BEE3D2405F7C88221D37EC2C16A3 frRect;unsigned __int16 frFlags;struct FndrDirInfo::$0DCF4602959F8104318EED879205AAFA frLocation;int16_t opaque;};
struct FndrDirInfo::$0DCF4602959F8104318EED879205AAFA {u_int16_t v;u_int16_t h;};
struct FndrDirInfo::$6E74BEE3D2405F7C88221D37EC2C16A3 {int16_t top;int16_t left;int16_t bottom;int16_t right;};
struct FndrFileInfo {u_int32_t fdType;u_int32_t fdCreator;u_int16_t fdFlags;struct FndrFileInfo::$41A11852923CA7CF3D1788B49D991E5B fdLocation;int16_t opaque;};
struct FndrFileInfo::$41A11852923CA7CF3D1788B49D991E5B {int16_t v;int16_t h;};
struct FndrOpaqueInfo {int8_t opaque[16];};
typedef void (__fastcall *Form_Hook)(FORM *);
typedef int Form_Options;
typedef struct $EA4C3483C6558261D28583524A2D2C65 HASHINFO;
typedef void *HDBC;
typedef struct $A6F5D22C47870C9C34E13B26D36736E1 HEADER;
typedef void *HENV;
struct HFSCatalogFile {int16_t recordType;u_int8_t flags;int8_t fileType;FndrFileInfo userInfo;u_int32_t fileID;u_int16_t dataStartBlock;int32_t dataLogicalSize;int32_t dataPhysicalSize;u_int16_t rsrcStartBlock;int32_t rsrcLogicalSize;int32_t rsrcPhysicalSize;u_int32_t createDate;u_int32_t modifyDate;u_int32_t backupDate;FndrOpaqueInfo finderInfo;u_int16_t clumpSize;HFSExtentRecord dataExtents;HFSExtentRecord rsrcExtents;u_int32_t reserved;};
struct HFSCatalogFolder {int16_t recordType;u_int16_t flags;u_int16_t valence;u_int32_t folderID;u_int32_t createDate;u_int32_t modifyDate;u_int32_t backupDate;FndrDirInfo userInfo;FndrOpaqueInfo finderInfo;u_int32_t reserved[4];};
struct HFSCatalogKey {u_int8_t keyLength;u_int8_t reserved;u_int32_t parentID;u_char nodeName[32];};
struct HFSCatalogThread {int16_t recordType;int32_t reserved[2];u_int32_t parentID;u_char nodeName[32];};
struct HFSExtentDescriptor {u_int16_t startBlock;u_int16_t blockCount;};
struct HFSExtentKey {u_int8_t keyLength;u_int8_t forkType;u_int32_t fileID;u_int16_t startBlock;};
typedef HFSExtentDescriptor HFSExtentRecord[3];
struct HFSMasterDirectoryBlock {u_int16_t drSigWord;u_int32_t drCrDate;u_int32_t drLsMod;u_int16_t drAtrb;u_int16_t drNmFls;u_int16_t drVBMSt;u_int16_t drAllocPtr;u_int16_t drNmAlBlks;u_int32_t drAlBlkSiz;u_int32_t drClpSiz;u_int16_t drAlBlSt;u_int32_t drNxtCNID;u_int16_t drFreeBks;u_char drVN[28];u_int32_t drVolBkUp;u_int16_t drVSeqNum;u_int32_t drWrCnt;u_int32_t drXTClpSiz;u_int32_t drCTClpSiz;u_int16_t drNmRtDirs;u_int32_t drFilCnt;u_int32_t drDirCnt;u_int32_t drFndrInfo[8];u_int16_t drEmbedSigWord;HFSExtentDescriptor drEmbedExtent;u_int32_t drXTFlSize;HFSExtentRecord drXTExtRec;u_int32_t drCTFlSize;HFSExtentRecord drCTExtRec;};
struct HFSPlusAttrExtents {u_int32_t recordType;u_int32_t reserved;HFSPlusExtentRecord extents;};
struct HFSPlusAttrForkData {u_int32_t recordType;u_int32_t reserved;HFSPlusForkData theFork;};
struct HFSPlusAttrInlineData {u_int32_t recordType;u_int32_t reserved;u_int32_t logicalSize;u_int8_t userData[2];};
union HFSPlusAttrRecord {u_int32_t recordType;HFSPlusAttrInlineData inlineData;HFSPlusAttrForkData forkData;HFSPlusAttrExtents overflowExtents;};
struct HFSPlusBSDInfo {u_int32_t ownerID;u_int32_t groupID;u_int8_t adminFlags;u_int8_t ownerFlags;u_int16_t fileMode;union HFSPlusBSDInfo::$27AA93549C704A2FC0D1AB4BC35019DD special;};
union HFSPlusBSDInfo::$27AA93549C704A2FC0D1AB4BC35019DD {u_int32_t iNodeNum;u_int32_t linkCount;u_int32_t rawDevice;};
struct HFSPlusCatalogFile {int16_t recordType;u_int16_t flags;u_int32_t reserved1;u_int32_t fileID;u_int32_t createDate;u_int32_t contentModDate;u_int32_t attributeModDate;u_int32_t accessDate;u_int32_t backupDate;HFSPlusBSDInfo bsdInfo;FndrFileInfo userInfo;FndrOpaqueInfo finderInfo;u_int32_t textEncoding;u_int32_t reserved2;HFSPlusForkData dataFork;HFSPlusForkData resourceFork;};
struct HFSPlusCatalogFolder {int16_t recordType;u_int16_t flags;u_int32_t valence;u_int32_t folderID;u_int32_t createDate;u_int32_t contentModDate;u_int32_t attributeModDate;u_int32_t accessDate;u_int32_t backupDate;HFSPlusBSDInfo bsdInfo;FndrDirInfo userInfo;FndrOpaqueInfo finderInfo;u_int32_t textEncoding;u_int32_t reserved;};
struct HFSPlusCatalogKey {u_int16_t keyLength;u_int32_t parentID;HFSUniStr255 nodeName;};
struct HFSPlusCatalogThread {int16_t recordType;int16_t reserved;u_int32_t parentID;HFSUniStr255 nodeName;};
struct HFSPlusExtentDescriptor {u_int32_t startBlock;u_int32_t blockCount;};
struct HFSPlusExtentKey {u_int16_t keyLength;u_int8_t forkType;u_int8_t pad;u_int32_t fileID;u_int32_t startBlock;};
typedef HFSPlusExtentDescriptor HFSPlusExtentRecord[8];
struct HFSPlusForkData {u_int64_t logicalSize;u_int32_t clumpSize;u_int32_t totalBlocks;HFSPlusExtentRecord extents;};
struct HFSPlusVolumeHeader {u_int16_t signature;u_int16_t version;u_int32_t attributes;u_int32_t lastMountedVersion;u_int32_t reserved;u_int32_t createDate;u_int32_t modifyDate;u_int32_t backupDate;u_int32_t checkedDate;u_int32_t fileCount;u_int32_t folderCount;u_int32_t blockSize;u_int32_t totalBlocks;u_int32_t freeBlocks;u_int32_t nextAllocation;u_int32_t rsrcClumpSize;u_int32_t dataClumpSize;u_int32_t nextCatalogID;u_int32_t writeCount;u_int64_t encodingsBitmap;u_int8_t finderInfo[32];HFSPlusForkData allocationFile;HFSPlusForkData extentsFile;HFSPlusForkData catalogFile;HFSPlusForkData attributesFile;HFSPlusForkData startupFile;};
struct HFSUniStr255 {u_int16_t length;u_int16_t unicode[255];};
typedef void *HSTMT;
typedef SQLPOINTER HWND;
typedef Ptr *Handle;
struct HistEvent {int num;const char *str;};
typedef struct history History;
struct HttpPost {struct HttpPost *next;char *name;char *contents;char *contenttype;struct HttpPost *more;int flags;};
typedef unsigned __int8 IOChannelStatus;
typedef unsigned __int16 IODeviceIndex;
typedef unsigned __int16 IODeviceRevision;
typedef unsigned int IODeviceType;
typedef struct $DB8704220B65CACD3F6F0001E0C0E1CB IODeviceTypeIr;
typedef union $1F43FF5151724E9FDFD5FDCB45380373 IODeviceTypeUn;
typedef unsigned int IOSlotId;
typedef struct $2504DEEB08159380429AD83B08DF7764 IOSlotIdMfg;
typedef union $1553A4E78C01066EB556BD64FB1F9195 IOSlotIdUn;
typedef unsigned __int8 IOUserStatus;
typedef struct tagITEM ITEM;
typedef int Item_Options;
typedef struct ktext *KTEXT;
typedef struct ktext KTEXT_ST;
typedef struct ldap LDAP;
typedef struct ldap_apifeature_info LDAPAPIFeatureInfo;
typedef struct ldapapiinfo LDAPAPIInfo;
typedef struct ldap_ava LDAPAVA;
typedef struct ldap_attributetype LDAPAttributeType;
typedef struct ldapcontrol LDAPControl;
typedef LDAPRDN **LDAPDN;
typedef struct ldap_filt_desc LDAPFiltDesc;
typedef struct ldap_filt_info LDAPFiltInfo;
typedef struct ldap_filt_list LDAPFiltList;
typedef struct ldap_matchingrule LDAPMatchingRule;
typedef struct ldap_matchingruleuse LDAPMatchingRuleUse;
typedef struct ldapmsg LDAPMessage;
typedef struct ldapmod LDAPMod;
typedef struct ldap_objectclass LDAPObjectClass;
typedef LDAPAVA **LDAPRDN;
typedef struct ldap_schema_extension_item LDAPSchemaExtensionItem;
typedef struct ldapsortkey LDAPSortKey;
typedef struct ldap_syntax LDAPSyntax;
typedef struct ldap_url_desc LDAPURLDesc;
typedef struct ldapvlvinfo LDAPVLVInfo;
typedef int __fastcall LDAP_REBIND_PROC(LDAP *ld, const char *url, ber_tag_t request, ber_int_t msgid, void *params);
typedef int __fastcall LDAP_SASL_INTERACT_PROC(LDAP *ld, unsigned int flags, void *defaults, void *interact);
typedef int __fastcall LDAP_SORT_AD_CMP_PROC(const char *left, const char *right);
typedef int __fastcall LDAP_SORT_AV_CMP_PROC(const void *left, const void *right);
typedef double LDOUBLE;
typedef DWORD LPARAM;
typedef const char *LPCSTR;
typedef DWORD *LPDWORD;
typedef char *LPSTR;
typedef struct lineinfo LineInfo;
enum MACRO_A {A_NORMAL = 0,A_ATTRIBUTES = -256,A_CHARTEXT = 255,A_COLOR = 65280,A_STANDOUT = 65536,A_UNDERLINE = 131072,A_REVERSE = 262144,A_BLINK = 524288,A_DIM = 1048576,A_BOLD = 2097152,A_ALTCHARSET = 4194304,A_INVIS = 8388608,A_PROTECT = 16777216,A_HORIZONTAL = 33554432,A_LEFT = 67108864,A_LOW = 134217728,A_RIGHT = 268435456,A_TOP = 536870912,A_VERTICAL = 1073741824,};
enum MACRO_AARPIFINDEX {AARPIFINDEX = 258,};
enum MACRO_AARPNETADDRESS {AARPNETADDRESS = 259,};
enum MACRO_AARPPHYSADDRESS {AARPPHYSADDRESS = 260,};
enum MACRO_ABORT {ABORT = 238,};
enum MACRO_AC {AC_PERMIT = 1,AC_DENY = -1,AC_ERROR = -1,};
enum MACRO_ACCESSPERMS {ACCESSPERMS = 511,};
enum MACRO_AC_ADDRESS {AC_ADDRESS_MASK = 0xF0,AC_ADDRESS_SHIFT = 0x4,AC_COMMAND_MASK = 0xC,AC_REGISTER_MASK = 0x3,};
enum MACRO_AD {AD_TYPE_RESERVED = 0x8000,AD_TYPE_EXTERNAL = 0x4000,AD_TYPE_REGISTERED = 0x2000,AD_TYPE_FIELD_TYPE_MASK = 0x1FFF,};
enum MACRO_ADB {ADB_ADDRESS_NONE = 255,ADB_HANDLER_ID_NONE = 0,};
enum MACRO_ADB_CLEAR {ADB_CLEAR = 275,};
enum MACRO_ADB_CMD {ADB_CMD_TALK = 0xC,ADB_CMD_LISTEN = 0x8,ADB_CMD_FLUSH = 0x1,ADB_CMD_SENDRESET = 0x0,ADB_SEND_RESET = 0x0,ADB_REGISTER_SIZE = 0x8,};
enum MACRO_ADB_RESET {ADB_RESET = 257,ADB_POWER = 257,};
enum MACRO_ADB_SOFT {ADB_SOFT_ADDRESS_START = 8,ADB_SOFT_ADDRESS_END = 15,};
enum MACRO_ADB_SUPER {ADB_SUPER_BASE = 0x100,};
enum MACRO_ADDRTYPE {ADDRTYPE_INET = 0x2,ADDRTYPE_CHAOS = 0x5,ADDRTYPE_XNS = 0x6,ADDRTYPE_ISO = 0x7,ADDRTYPE_DDP = 0x10,ADDRTYPE_INET6 = 0x18,ADDRTYPE_ADDRPORT = 0x100,ADDRTYPE_IPPORT = 0x101,};
enum MACRO_ADSP {ADSP_EOM = 0x1,ADSP_FLUSH = 0x2,ADSP_WAIT = 0x4,ADSP_EV_ATTN = 0x2,ADSP_EV_RESET = 0x4,ADSP_EV_CLOSE = 0x8,ADSP_PROBEACK = 0x0,ADSP_OPENCONREQUEST = 0x1,ADSP_OPENCONACK = 0x2,ADSP_OPENCONREQACK = 0x3,ADSP_OPENCONDENIAL = 0x4,ADSP_CLOSEADVICE = 0x5,ADSP_FORWARDRESET = 0x6,ADSP_FORWARDRESETACK = 0x7,ADSP_RETRANSADVICE = 0x8,ADSP_MAXDATA = 0x23C,ADSP_MAXATTNDATA = 0x23A,ADSP_DDPTYPE = 0x7,ADSP_VERSION = 0x100,};
enum MACRO_ADSPATTENTION {ADSPATTENTION = 54516,};
enum MACRO_ADSPATTNREAD {ADSPATTNREAD = 54526,};
enum MACRO_ADSPBINDREQ {ADSPBINDREQ = 54512,};
enum MACRO_ADSPCLDENY {ADSPCLDENY = 54520,};
enum MACRO_ADSPCLINIT {ADSPCLINIT = 54523,};
enum MACRO_ADSPCLLISTEN {ADSPCLLISTEN = 54521,};
enum MACRO_ADSPCLOSE {ADSPCLOSE = 54524,};
enum MACRO_ADSPCLREMOVE {ADSPCLREMOVE = 54522,};
enum MACRO_ADSPGETPEER {ADSPGETPEER = 54510,};
enum MACRO_ADSPGETSOCK {ADSPGETSOCK = 54511,};
enum MACRO_ADSPNEWCID {ADSPNEWCID = 54513,};
enum MACRO_ADSPOPEN {ADSPOPEN = 54525,};
enum MACRO_ADSPOPTIONS {ADSPOPTIONS = 54515,};
enum MACRO_ADSPREAD {ADSPREAD = 54518,};
enum MACRO_ADSPRESET {ADSPRESET = 54514,};
enum MACRO_ADSPSTATUS {ADSPSTATUS = 54519,};
enum MACRO_ADSPWRITE {ADSPWRITE = 54517,};
enum MACRO_ADSP_CONTROL {ADSP_CONTROL_BIT = 0x80,ADSP_ACK_REQ_BIT = 0x40,ADSP_EOM_BIT = 0x20,ADSP_ATTENTION_BIT = 0x10,ADSP_CONTROL_MASK = 0xF,ADSP_CTL_PROBE = 0x0,ADSP_CTL_OREQ = 0x1,ADSP_CTL_OACK = 0x2,ADSP_CTL_OREQACK = 0x3,ADSP_CTL_ODENY = 0x4,ADSP_CTL_CLOSE = 0x5,ADSP_CTL_FRESET = 0x6,ADSP_CTL_FRESET_ACK = 0x7,ADSP_CTL_RETRANSMIT = 0x8,ADSP_OPEN_FRAME_LEN = 0x8,ADSP_MAX_DATA_LEN = 0x23C,};
enum MACRO_ADSP_DEFLEN {ADSP_DEFLEN = 127,ADSP_STALEN = 55,ADSP_INFOLEN = 163,};
enum MACRO_ADSP_INVALID {ADSP_INVALID = 0,ADSP_LISTEN = 1,ADSP_OPENING = 2,ADSP_MYHALFOPEN = 4,ADSP_HISHALFOPEN = 8,ADSP_OPEN = 16,ADSP_TORNDOWN = 32,ADSP_CLOSING = 64,ADSP_CLOSED = 128,ADSP_ATTNACKRCVD = 1,ADSP_ATTNACKACPTD = 2,ADSP_PROBERCVD = 3,ADSP_ACKRCVD = 4,ADSP_FWDRSTRCVD = 5,ADSP_FWDRSTACPTD = 6,ADSP_FWDRSTACKRCVD = 7,ADSP_FWDRSTACKACPTD = 8,ADSP_ATTNRCVD = 9,ADSP_ATTNACPTD = 10,ADSP_DATARCVD = 11,ADSP_DATAACPTD = 12,ADSP_ACKFIELDCHKD = 13,ADSP_ACKNRSFIELDACPTD = 14,ADSP_ACKSWSFIELDACPTD = 15,ADSP_ACKREQSTD = 16,ADSP_LOWMEM = 17,ADSP_OPNREQEXP = 18,ADSP_PROBEEXP = 19,ADSP_FWDRSTEXP = 20,ADSP_ATTNEXP = 21,ADSP_TRANSEXP = 22,ADSP_RETRANSEXP = 23,ADSP_SNDWDWCLOEXP = 24,ADSP_RESTARTEXP = 25,ADSP_RESLOWEXP = 26,ADSP_RETRANSRCVD = 27,};
enum MACRO_ADSP_STATE {ADSP_STATE = 1,ADSP_SNDSEQ = 2,ADSP_FIRSTRTMTSEQ = 3,ADSP_SNDWDWSEQ = 4,ADSP_RCVSEQ = 5,ADSP_ATTNSNDSEQ = 6,ADSP_ATTNRCVSEQ = 7,ADSP_RCVWDW = 8,ADSP_ATTNMSGWAIT = 9,};
enum MACRO_ADSP_TRANSTHRESH {ADSP_TRANSTHRESH = 1,ADSP_TRANSTIMERINTRVL = 2,ADSP_SNDWDWCLOTHRESH = 3,ADSP_SNDWDWCLOINTRVL = 4,ADSP_SNDWDWCLOBCKOFF = 5,ADSP_RETRANSINTRVL = 6,ADSP_RETRANSBCKOFF = 7,ADSP_RESTARTINTRVL = 8,ADSP_RESTARTBCKOFF = 9,ADSP_SNDQBUFSIZE = 10,ADSP_RCVQMAXSIZE = 11,ADSP_RCVQCPYTHRESH = 12,ADSP_FWDRSTINTRVL = 13,ADSP_FWDRSTBCKOFF = 14,ADSP_ATTNINTRVL = 15,ADSP_ATTNBCKOFF = 16,ADSP_OPENINTRVL = 17,ADSP_OPENMAXRETRY = 18,ADSP_RETRANSTHRESH = 19,ADSP_PROBERETRYMAX = 20,ADSP_SNDBYTECNTMAX = 21,};
enum MACRO_AD_NOTGT {AD_NOTGT = 71,};
enum MACRO_AD_TYPE {AD_TYPE_INTERNAL_MASK = 0x3FFF,};
enum MACRO_AF {AF_UNSPEC = 0,AF_LOCAL = 1,AF_UNIX = 1,AF_INET = 2,AF_IMPLINK = 3,AF_PUP = 4,AF_CHAOS = 5,AF_NS = 6,AF_ISO = 7,AF_OSI = 7,AF_ECMA = 8,AF_DATAKIT = 9,AF_CCITT = 10,AF_SNA = 11,AF_DECnet = 12,AF_DLI = 13,AF_LAT = 14,AF_HYLINK = 15,AF_APPLETALK = 16,AF_ROUTE = 17,AF_LINK = 18,};
enum MACRO_AFORK {AFORK = 0x1,ASU = 0x2,ACOMPAT = 0x4,ACORE = 0x8,AXSIG = 0x10,AHZ = 0x40,};
enum MACRO_AF_COIP {AF_COIP = 20,AF_CNT = 21,};
enum MACRO_AF_INET6 {AF_INET6 = 30,AF_NATM = 31,AF_SYSTEM = 32,AF_NETBIOS = 33,AF_PPP = 34,};
enum MACRO_AF_IPX {AF_IPX = 23,AF_SIP = 24,};
enum MACRO_AF_MAX {AF_MAX = 36,};
enum MACRO_AF_NDRV {AF_NDRV = 27,AF_ISDN = 28,AF_E164 = 28,};
enum MACRO_AF_SYS {AF_SYS_CONTROL = 2,};
enum MACRO_AI {AI_PASSIVE = 0x1,AI_CANONNAME = 0x2,AI_NUMERICHOST = 0x4,AI_MASK = 0x7,AI_ALL = 0x100,AI_V4MAPPED_CFG = 0x200,AI_ADDRCONFIG = 0x400,AI_V4MAPPED = 0x800,AI_DEFAULT = 0x600,};
enum MACRO_ALIGN {ALIGN = 4,};
enum MACRO_ALIGNBYTES {ALIGNBYTES = 3,NBPG = 4096,};
enum MACRO_ALL {ALL_MOUSE_EVENTS = 0x7FFFFFF,};
enum MACRO_ALLDELAY {ALLDELAY = 65280,CRTBS = 65536,PRTERA = 131072,CRTERA = 262144,TILDE = 524288,MDMBUF = 1048576,LITOUT = 2097152,TOSTOP = 4194304,FLUSHO = 8388608,NOHANG = 16777216,L001000 = 33554432,CRTKIL = 67108864,PASS8 = 134217728,CTLECH = 268435456,PENDIN = 536870912,DECCTQ = 1073741824,NOFLSH = -2147483648,};
enum MACRO_ALLPERMS {ALLPERMS = 4095,};
enum MACRO_ALL_VIFS {ALL_VIFS = 65535,};
enum MACRO_ALRMTYPE {ALRMTYPE = 0xFF,};
enum MACRO_ALT {ALT_LEFT = 270,ALT_RIGHT = 271,};
enum MACRO_ALTERNATE {ALTERNATE_LOAD_SITE = 0x1,};
enum MACRO_ANNOUNCE {ANNOUNCE = 3,};
enum MACRO_ANYADDR {ANYADDR = 0,};
enum MACRO_ANYP {ANYP = 0xC0,NLDELAY = 0x300,};
enum MACRO_AO {AO = 245,};
enum MACRO_AOUT {AOUT_F = 1,ROSE_F = 2,COFF_F = 3,};
enum MACRO_AP {AP_OPTS_RESERVED = 0x80000000,AP_OPTS_USE_SESSION_KEY = 0x40000000,AP_OPTS_MUTUAL_REQUIRED = 0x20000000,AP_OPTS_USE_SUBKEY = 0x1,AP_OPTS_WIRE_MASK = 0xFFFFFFF0,};
enum MACRO_APPLE {APPLE_LEFT = 272,APPLE_RIGHT = 273,};
enum MACRO_APPLE_IF {APPLE_IF_FAM_LOOPBACK = 1,APPLE_IF_FAM_ETHERNET = 2,APPLE_IF_FAM_SLIP = 3,APPLE_IF_FAM_TUN = 4,APPLE_IF_FAM_VLAN = 5,APPLE_IF_FAM_PPP = 6,APPLE_IF_FAM_PVC = 7,APPLE_IF_FAM_DISC = 8,APPLE_IF_FAM_MDECAP = 9,APPLE_IF_FAM_GIF = 10,APPLE_IF_FAM_FAITH = 11,APPLE_IF_FAM_STF = 12,};
enum MACRO_AR3 {AR3_RESERVED0 = 0x8000,AR3_EXCEPTIONAL_EVENT = 0x4000,AR3_SERVICE_REQUEST_ENABLE = 0x2000,AR3_RESERVED1 = 0x1000,AR3_DEVICE_ADDRESS_MASK = 0xF00,AR3_HANDLER_ID_MASK = 0xFF,};
enum MACRO_ARCDENSITY {ARCDENSITY = 2,};
enum MACRO_AREGTYPE {AREGTYPE = 0,LNKTYPE = 49,};
enum MACRO_ARPHRD {ARPHRD_ETHER = 1,ARPHRD_IEEE802 = 6,ARPHRD_FRELAY = 15,};
enum MACRO_ARPOP {ARPOP_REQUEST = 1,ARPOP_REPLY = 2,ARPOP_REVREQUEST = 3,ARPOP_REVREPLY = 4,ARPOP_INVREQUEST = 8,ARPOP_INVREPLY = 9,};
enum MACRO_ASN1 {ASN1_BAD_TIMEFORMAT = 1859794432,ASN1_MISSING_FIELD = 1859794433,ASN1_MISPLACED_FIELD = 1859794434,ASN1_TYPE_MISMATCH = 1859794435,ASN1_OVERFLOW = 1859794436,ASN1_OVERRUN = 1859794437,ASN1_BAD_ID = 1859794438,ASN1_BAD_LENGTH = 1859794439,ASN1_BAD_FORMAT = 1859794440,ASN1_PARSE_ERROR = 1859794441,ASN1_BAD_GMTIME = 1859794442,ASN1_MISMATCH_INDEF = 1859794443,ASN1_MISSING_EOC = 1859794444,};
enum MACRO_ASP {ASP_Version = 0x100,};
enum MACRO_ASPERR {ASPERR_NoError = 0,ASPERR_BadVersNum = -1066,ASPERR_BufTooSmall = -1067,ASPERR_NoMoreSessions = -1068,ASPERR_NoServers = -1069,ASPERR_ParamErr = -1070,ASPERR_ServerBusy = -1071,ASPERR_SessClosed = -1072,ASPERR_SizeErr = -1073,ASPERR_TooManyClients = -1074,ASPERR_NoAck = -1075,ASPERR_NoSuchDevice = -1058,ASPERR_BindErr = -1059,ASPERR_CmdReply = -1060,ASPERR_CmdRequest = -1061,ASPERR_SystemErr = -1062,ASPERR_ProtoErr = -1063,ASPERR_NoSuchEntity = -1064,ASPERR_RegisterErr = -1065,};
enum MACRO_ASPFUNC {ASPFUNC_CloseSess = 1,ASPFUNC_Command = 2,ASPFUNC_GetStatus = 3,ASPFUNC_OpenSess = 4,ASPFUNC_Tickle = 5,ASPFUNC_Write = 6,ASPFUNC_WriteContinue = 7,ASPFUNC_Attention = 8,ASPFUNC_CmdReply = 9,};
enum MACRO_ASPIOC {ASPIOC = 210,};
enum MACRO_ASPIOC_ClientBind {ASPIOC_ClientBind = 53761,ASPIOC_CloseSession = 53762,ASPIOC_GetLocEntity = 53763,ASPIOC_GetRemEntity = 53764,ASPIOC_GetSession = 53765,ASPIOC_GetStatus = 53766,ASPIOC_ListenerBind = 53767,ASPIOC_OpenSession = 53768,ASPIOC_StatusBlock = 53769,ASPIOC_SetPid = 53770,ASPIOC_GetSessId = 53771,ASPIOC_EnableSelect = 53772,ASPIOC_Look = 53773,};
enum MACRO_AT {AT_ST_STARTED = 0x1,AT_ST_STARTING = 0x2,AT_ST_MULTIHOME = 0x80,AT_ST_ROUTER = 0x100,AT_ST_IF_CHANGED = 0x200,AT_ST_RT_CHANGED = 0x400,AT_ST_ZT_CHANGED = 0x800,AT_ST_NBP_CHANGED = 0x1000,AT_ADDR = 0x0,};
enum MACRO_ATADDR {ATADDR_ANYNET = 0x0,ATADDR_ANYNODE = 0x0,ATADDR_ANYPORT = 0x0,ATADDR_BCASTNODE = 0xFF,};
enum MACRO_ATECHOREPLIES {ATECHOREPLIES = 262,};
enum MACRO_ATECHOREQUESTS {ATECHOREQUESTS = 263,};
enum MACRO_ATF {ATF_INUSE = 0x1,ATF_COM = 0x2,ATF_PERM = 0x4,ATF_PUBL = 0x8,ATF_USETRAILERS = 0x10,};
enum MACRO_ATP {ATP_TRESP_MAX = 8,};
enum MACRO_ATPORTDESCR {ATPORTDESCR = 776,};
enum MACRO_ATPORTIFINDEX {ATPORTIFINDEX = 778,};
enum MACRO_ATPORTINDEX {ATPORTINDEX = 779,};
enum MACRO_ATPORTNETADDRESS {ATPORTNETADDRESS = 780,};
enum MACRO_ATPORTNETCONFIG {ATPORTNETCONFIG = 781,};
enum MACRO_ATPORTNETEND {ATPORTNETEND = 782,};
enum MACRO_ATPORTNETSTART {ATPORTNETSTART = 783,};
enum MACRO_ATPORTSTATUS {ATPORTSTATUS = 784,};
enum MACRO_ATPORTTYPE {ATPORTTYPE = 786,};
enum MACRO_ATPORTZONE {ATPORTZONE = 787,};
enum MACRO_ATPORTZONECONFIG {ATPORTZONECONFIG = 788,};
enum MACRO_ATPROTO {ATPROTO_NONE = 0,ATPROTO_ATP = 3,ATPROTO_ADSP = 7,ATPROTO_DDP = 249,ATPROTO_LAP = 250,ATPROTO_AURP = 251,ATPROTO_ASP = 252,ATPROTO_AFP = 253,ATPROTO_RAW = 255,};
enum MACRO_ATP_CMD {ATP_CMD_TREQ = 0x1,ATP_CMD_TRESP = 0x2,ATP_CMD_TREL = 0x3,ATP_DEF_RETRIES = 0x8,ATP_DEF_INTERVAL = 0x2,ATP_HDR_SIZE = 0x8,ATP_DATA_SIZE = 0x242,ATP_ASYNCH_REQ = 0x1,ATP_ASYNCH_RESP = 0x2,ATP_XO_DEF_REL_TIME = 0x0,ATP_XO_30SEC = 0x0,ATP_XO_1MIN = 0x1,ATP_XO_2MIN = 0x2,ATP_XO_4MIN = 0x3,ATP_XO_8MIN = 0x4,ATP_INFINITE_RETRIES = 0xFFFFFFFF,};
enum MACRO_ATP_SENDREQUEST {ATP_SENDREQUEST = 0,ATP_GETRESPONSE = 1,ATP_SENDRESPONSE = 2,ATP_GETREQUEST = 3,};
enum MACRO_ATTR {ATTR_BIT_MAP_COUNT = 5,};
enum MACRO_ATTR_CMN {ATTR_CMN_NAME = 0x1,ATTR_CMN_DEVID = 0x2,ATTR_CMN_FSID = 0x4,ATTR_CMN_OBJTYPE = 0x8,ATTR_CMN_OBJTAG = 0x10,ATTR_CMN_OBJID = 0x20,ATTR_CMN_OBJPERMANENTID = 0x40,ATTR_CMN_PAROBJID = 0x80,ATTR_CMN_SCRIPT = 0x100,ATTR_CMN_CRTIME = 0x200,ATTR_CMN_MODTIME = 0x400,ATTR_CMN_CHGTIME = 0x800,ATTR_CMN_ACCTIME = 0x1000,ATTR_CMN_BKUPTIME = 0x2000,ATTR_CMN_FNDRINFO = 0x4000,ATTR_CMN_OWNERID = 0x8000,ATTR_CMN_GRPID = 0x10000,ATTR_CMN_ACCESSMASK = 0x20000,ATTR_CMN_FLAGS = 0x40000,ATTR_CMN_NAMEDATTRCOUNT = 0x80000,ATTR_CMN_NAMEDATTRLIST = 0x100000,ATTR_CMN_USERACCESS = 0x200000,ATTR_CMN_VALIDMASK = 0x3FFFFF,ATTR_CMN_SETMASK = 0x7FF00,ATTR_CMN_VOLSETMASK = 0x6700,ATTR_VOL_FSTYPE = 0x1,ATTR_VOL_SIGNATURE = 0x2,ATTR_VOL_SIZE = 0x4,ATTR_VOL_SPACEFREE = 0x8,ATTR_VOL_SPACEAVAIL = 0x10,ATTR_VOL_MINALLOCATION = 0x20,ATTR_VOL_ALLOCATIONCLUMP = 0x40,ATTR_VOL_IOBLOCKSIZE = 0x80,ATTR_VOL_OBJCOUNT = 0x100,ATTR_VOL_FILECOUNT = 0x200,ATTR_VOL_DIRCOUNT = 0x400,ATTR_VOL_MAXOBJCOUNT = 0x800,ATTR_VOL_MOUNTPOINT = 0x1000,ATTR_VOL_NAME = 0x2000,ATTR_VOL_MOUNTFLAGS = 0x4000,ATTR_VOL_MOUNTEDDEVICE = 0x8000,ATTR_VOL_ENCODINGSUSED = 0x10000,ATTR_VOL_CAPABILITIES = 0x20000,ATTR_VOL_ATTRIBUTES = 0x40000000,ATTR_VOL_INFO = 0x80000000,ATTR_VOL_VALIDMASK = 0xC003FFFF,ATTR_VOL_SETMASK = 0x80002000,ATTR_DIR_LINKCOUNT = 0x1,ATTR_DIR_ENTRYCOUNT = 0x2,ATTR_DIR_MOUNTSTATUS = 0x4,ATTR_DIR_VALIDMASK = 0x7,ATTR_DIR_SETMASK = 0x0,ATTR_FILE_LINKCOUNT = 0x1,ATTR_FILE_TOTALSIZE = 0x2,ATTR_FILE_ALLOCSIZE = 0x4,ATTR_FILE_IOBLOCKSIZE = 0x8,ATTR_FILE_CLUMPSIZE = 0x10,ATTR_FILE_DEVTYPE = 0x20,ATTR_FILE_FILETYPE = 0x40,ATTR_FILE_FORKCOUNT = 0x80,ATTR_FILE_FORKLIST = 0x100,ATTR_FILE_DATALENGTH = 0x200,ATTR_FILE_DATAALLOCSIZE = 0x400,ATTR_FILE_DATAEXTENTS = 0x800,ATTR_FILE_RSRCLENGTH = 0x1000,ATTR_FILE_RSRCALLOCSIZE = 0x2000,ATTR_FILE_RSRCEXTENTS = 0x4000,ATTR_FILE_VALIDMASK = 0x7FFF,ATTR_FILE_SETMASK = 0x20,ATTR_FORK_TOTALSIZE = 0x1,ATTR_FORK_ALLOCSIZE = 0x2,ATTR_FORK_VALIDMASK = 0x3,ATTR_FORK_SETMASK = 0x0,};
enum MACRO_AT_ADDR {AT_ADDR_NO_LOOP = 2,};
enum MACRO_AT_ATP {AT_ATP_CANCEL_REQUEST = 31745,AT_ATP_ISSUE_REQUEST = 31746,AT_ATP_ISSUE_REQUEST_DEF = 31747,AT_ATP_ISSUE_REQUEST_DEF_NOTE = 31748,AT_ATP_ISSUE_REQUEST_NOTE = 31749,AT_ATP_GET_POLL = 31750,AT_ATP_RELEASE_RESPONSE = 31751,AT_ATP_REQUEST_COMPLETE = 31752,AT_ATP_SEND_FULL_RESPONSE = 31753,AT_ATP_BIND_REQ = 31754,AT_ATP_GET_CHANID = 31755,AT_ATP_PEEK = 31756,AT_ATP_ISSUE_REQUEST_TICKLE = 31757,};
enum MACRO_AT_LV {AT_LV_FATAL = 1,AT_LV_ERROR = 3,AT_LV_WARNING = 5,AT_LV_INFO = 7,AT_LV_VERBOSE = 9,AT_SID_INPUT = 1,AT_SID_OUTPUT = 2,AT_SID_TIMERS = 3,AT_SID_FLOWCTRL = 4,AT_SID_USERREQ = 5,AT_SID_RESOURCE = 6,};
enum MACRO_AT_MID {AT_MID_ADSP = 212,};
enum MACRO_AT_MID_DDP {AT_MID_DDP = 203,};
enum MACRO_AT_MID_ELAP {AT_MID_ELAP = 202,};
enum MACRO_AT_MID_LAP {AT_MID_LAP = 214,};
enum MACRO_AT_PAP {AT_PAP_DATA_SIZE = 512,AT_PAP_STATUS_SIZE = 255,};
enum MACRO_AT_PAP_HDR {AT_PAP_HDR_SIZE = 21,};
enum MACRO_AT_PAP_TYPE {AT_PAP_TYPE_OPEN_CONN = 0x1,AT_PAP_TYPE_OPEN_CONN_REPLY = 0x2,AT_PAP_TYPE_SEND_DATA = 0x3,AT_PAP_TYPE_DATA = 0x4,AT_PAP_TYPE_TICKLE = 0x5,AT_PAP_TYPE_CLOSE_CONN = 0x6,AT_PAP_TYPE_CLOSE_CONN_REPLY = 0x7,AT_PAP_TYPE_SEND_STATUS = 0x8,AT_PAP_TYPE_SEND_STS_REPLY = 0x9,AT_PAP_TYPE_READ_LW = 0xA,AT_PAP_SETHDR = 0x7E00,AT_PAP_READ = 0x7E01,AT_PAP_WRITE = 0x7E02,AT_PAP_WRITE_EOF = 0x7E03,AT_PAP_WRITE_FLUSH = 0x7E04,AT_PAP_READ_IGNORE = 0x7E05,AT_PAPD_SET_STATUS = 0x7E28,AT_PAPD_GET_NEXT_JOB = 0x7E29,};
enum MACRO_AUC {AUC_CFGTNL = 0,AUC_SHTDOWN = 1,AUC_EXPNET = 2,AUC_HIDENET = 3,AUC_UDPPORT = 4,AUC_NETLIST = 5,AUC_TIMER = 6,AUC_ADDNET = 7,AUC_ACCEPTALL = 8,AUC_MAX = 9,};
enum MACRO_AURP {AURP_SOCKNUM = 387,AURP_MAXNETACCESS = 64,};
enum MACRO_AUTH {AUTH_WHO_CLIENT = 0,AUTH_WHO_SERVER = 1,AUTH_WHO_MASK = 1,AUTH_HOW_ONE_WAY = 0,AUTH_HOW_MUTUAL = 2,AUTH_HOW_MASK = 2,};
enum MACRO_AUTHTYPE {AUTHTYPE_NULL = 0,AUTHTYPE_KERBEROS_V4 = 1,AUTHTYPE_KERBEROS_V5 = 2,AUTHTYPE_SPX = 3,AUTHTYPE_MINK = 4,AUTHTYPE_CNT = 5,AUTHTYPE_TEST = 99,};
enum MACRO_AUTH_NONE {AUTH_NONE = 0,AUTH_NULL = 0,AUTH_UNIX = 1,AUTH_SHORT = 2,AUTH_DES = 3,};
enum MACRO_AUTH_REJECTCRED {AUTH_REJECTCRED = 2,AUTH_REJECTVERF = 4,};
enum MACRO_AYT {AYT = 246,};
enum MACRO_B {B_ADAPTORSHIFT = 24,B_ADAPTORMASK = 15,B_CONTROLLERSHIFT = 20,B_CONTROLLERMASK = 15,B_UNITSHIFT = 16,B_UNITMASK = 255,B_PARTITIONSHIFT = 8,B_PARTITIONMASK = 255,B_TYPESHIFT = 0,B_TYPEMASK = 255,B_MAGICMASK = -268435456,B_DEVMAGIC = -1610612736,};
enum MACRO_B0 {B0 = 0,};
enum MACRO_B14400 {B14400 = 14400,};
enum MACRO_B230400 {B230400 = 230400,};
enum MACRO_B28800 {B28800 = 28800,};
enum MACRO_B38400 {B38400 = 38400,};
enum MACRO_B7200 {B7200 = 7200,};
enum MACRO_B76800 {B76800 = 76800,};
enum MACRO_BADADDR {BADADDR = 7,BADCTLADDR = 8,};
enum MACRO_BADVERSION {BADVERSION = 6,};
enum MACRO_BC {BC_BASE_MAX = 2147483647,BC_DIM_MAX = 65535,BC_SCALE_MAX = 2147483647,BC_STRING_MAX = 2147483647,};
enum MACRO_BIOCFLUSH {BIOCFLUSH = 536887912,};
enum MACRO_BIOCPROMISC {BIOCPROMISC = 536887913,};
enum MACRO_BIT {LONG_BIT = 32,WORD_BIT = 32,CHAR_BIT = 8,};
enum MACRO_BLK {BLK_EOR = 0x80,BLK_EOF = 0x40,BLK_ERRORS = 0x20,BLK_RESTART = 0x10,BLK_BYTECOUNT = 0x2,};
enum MACRO_BLKDEV {BLKDEV_IOSIZE = 2048,};
enum MACRO_BLKTYPE {BLKTYPE = 52,};
enum MACRO_BOOL {TRUE = 1,FALSE = 0,};
enum MACRO_BOOLCOUNT {BOOLCOUNT = 44,};
enum MACRO_BOOLWRITE {BOOLWRITE = 37,};
enum MACRO_BOOT {BOOT_INFO_COMPAT = 1,};
enum MACRO_BOOTPARAM {BOOTPARAM_PROG = 100026,BOOTPARAM_VERS = 1,BOOTPARAM_WHOAMI = 1,BOOTPARAM_GETFILE = 2,};
enum MACRO_BOOTPARAMPROC {BOOTPARAMPROC_WHOAMI = 1,BOOTPARAMPROC_GETFILE = 2,};
enum MACRO_BOOTPARAMPROG {BOOTPARAMPROG = 100026,};
enum MACRO_BOOTPARAMVERS {BOOTPARAMVERS = 1,};
enum MACRO_BOOTSTRAP {BOOTSTRAP_MAX_NAME_LEN = 128,BOOTSTRAP_MAX_CMD_LEN = 512,BOOTSTRAP_MAX_LOOKUP_COUNT = 20,BOOTSTRAP_SUCCESS = 0,BOOTSTRAP_NOT_PRIVILEGED = 1100,BOOTSTRAP_NAME_IN_USE = 1101,BOOTSTRAP_UNKNOWN_SERVICE = 1102,BOOTSTRAP_SERVICE_ACTIVE = 1103,BOOTSTRAP_BAD_COUNT = 1104,BOOTSTRAP_NO_MEMORY = 1105,BOOTSTRAP_STATUS_INACTIVE = 0,BOOTSTRAP_STATUS_ACTIVE = 1,BOOTSTRAP_STATUS_ON_DEMAND = 2,};
enum MACRO_BPF {BPF_RELEASE = 199606,BPF_MAXINSNS = 512,BPF_MAXBUFSIZE = 32768,BPF_MINBUFSIZE = 32,BPF_MAJOR_VERSION = 1,BPF_MINOR_VERSION = 1,};
enum MACRO_BPF_LD {BPF_LD = 0x0,BPF_LDX = 0x1,BPF_ST = 0x2,BPF_STX = 0x3,BPF_ALU = 0x4,BPF_JMP = 0x5,BPF_RET = 0x6,BPF_MISC = 0x7,BPF_W = 0x0,BPF_H = 0x8,BPF_B = 0x10,BPF_IMM = 0x0,BPF_ABS = 0x20,BPF_IND = 0x40,BPF_MEM = 0x60,BPF_LEN = 0x80,BPF_MSH = 0xA0,BPF_ADD = 0x0,BPF_SUB = 0x10,BPF_MUL = 0x20,BPF_DIV = 0x30,BPF_OR = 0x40,BPF_AND = 0x50,BPF_LSH = 0x60,BPF_RSH = 0x70,BPF_NEG = 0x80,BPF_JA = 0x0,BPF_JEQ = 0x10,BPF_JGT = 0x20,BPF_JGE = 0x30,BPF_JSET = 0x40,BPF_K = 0x0,BPF_X = 0x8,BPF_A = 0x10,BPF_TAX = 0x0,BPF_TXA = 0x80,BPF_MEMWORDS = 0x10,};
enum MACRO_BREAK {BREAK = 243,};
enum MACRO_BRIGHT {BRIGHT_UP = 258,BRIGHT_DOWN = 259,};
enum MACRO_BS0 {BS0 = 0x0,BS1 = 0x8000,};
enum MACRO_BSD {BSD = 199506,};
enum MACRO_BSD4 {BSD4_3 = 1,BSD4_4 = 1,};
enum MACRO_BTREEMAGIC {BTREEMAGIC = 0x53162,};
enum MACRO_BTREEVERSION {BTREEVERSION = 3,};
enum MACRO_BUS {BUS_NOOP = 0,BUS_ADRALN = 1,};
enum MACRO_BUS_DEVICE_ADDRESS {MIN_BUS_DEVICE_ADDRESS = 1,MAX_BUS_DEVICE_ADDRESS = 15,};
enum MACRO_BUTTON {BUTTON_CTRL = 0x1000000,BUTTON_SHIFT = 0x2000000,BUTTON_ALT = 0x4000000,};
enum MACRO_BUTTON1 {BUTTON1_RELEASED = 0x1,BUTTON1_PRESSED = 0x2,BUTTON1_CLICKED = 0x4,BUTTON1_DOUBLE_CLICKED = 0x8,BUTTON1_TRIPLE_CLICKED = 0x10,BUTTON1_RESERVED_EVENT = 0x20,};
enum MACRO_BUTTON2 {BUTTON2_RELEASED = 0x40,BUTTON2_PRESSED = 0x80,BUTTON2_CLICKED = 0x100,BUTTON2_DOUBLE_CLICKED = 0x200,BUTTON2_TRIPLE_CLICKED = 0x400,BUTTON2_RESERVED_EVENT = 0x800,};
enum MACRO_BUTTON3 {BUTTON3_RELEASED = 0x1000,BUTTON3_PRESSED = 0x2000,BUTTON3_CLICKED = 0x4000,BUTTON3_DOUBLE_CLICKED = 0x8000,BUTTON3_TRIPLE_CLICKED = 0x10000,BUTTON3_RESERVED_EVENT = 0x20000,};
enum MACRO_BUTTON4 {BUTTON4_RELEASED = 0x40000,BUTTON4_PRESSED = 0x80000,BUTTON4_CLICKED = 0x100000,BUTTON4_DOUBLE_CLICKED = 0x200000,BUTTON4_TRIPLE_CLICKED = 0x400000,BUTTON4_RESERVED_EVENT = 0x800000,};
enum MACRO_BYTE {BYTE_ORDER = 4321,};
enum MACRO_BYTES {BYTES_PER_XDR_UNIT = 4,};
enum MACRO_BYTE_SIZE {BYTE_SIZE = 8,};
enum MACRO_BZ {BZ_RUN = 0,BZ_FLUSH = 1,BZ_FINISH = 2,BZ_OK = 0,BZ_RUN_OK = 1,BZ_FLUSH_OK = 2,BZ_FINISH_OK = 3,BZ_STREAM_END = 4,BZ_SEQUENCE_ERROR = -1,BZ_PARAM_ERROR = -2,BZ_MEM_ERROR = -3,BZ_DATA_ERROR = -4,BZ_DATA_ERROR_MAGIC = -5,BZ_IO_ERROR = -6,BZ_UNEXPECTED_EOF = -7,BZ_OUTBUFF_FULL = -8,BZ_CONFIG_ERROR = -9,BZ_MAX_UNUSED = 5000,};
enum MACRO_C {C_IN = 1,C_CHAOS = 3,C_HS = 4,C_ANY = 255,};
enum MACRO_CALLOUT {CALLOUT_PRI_SOFTINT0 = 0,CALLOUT_PRI_SOFTINT1 = 1,CALLOUT_PRI_RETRACE = 2,CALLOUT_PRI_DSP = 3,CALLOUT_PRI_THREAD = 4,CALLOUT_PRI_NOW = 5,};
enum MACRO_CAPS {CAPS_LOCK = 274,};
enum MACRO_CBQSIZE {CBQSIZE = 8,};
enum MACRO_CBRK {CBRK = 255,};
enum MACRO_CC {CC_NORM = 0,CC_NEWLINE = 1,CC_EOF = 2,CC_ARGHACK = 3,CC_REFRESH = 4,CC_CURSOR = 5,CC_ERROR = 6,CC_FATAL = 7,CC_REDISPLAY = 8,CC_REFRESH_BEEP = 9,};
enum MACRO_CCTS {CCTS_OFLOW = 0x10000,};
enum MACRO_CDISCARD {CDISCARD = 15,};
enum MACRO_CEOF {CEOF = 4,};
enum MACRO_CEOL {CEOL = 0xFF,};
enum MACRO_CEOT {CEOT = 4,};
enum MACRO_CERASE {CERASE = 0x7F,};
enum MACRO_CERROR {CERROR = -1,};
enum MACRO_CFLUSH {CFLUSH = 15,};
enum MACRO_CHAR {CHAR_MIN = -128,CHAR_MAX = 127,};
enum MACRO_CHRTYPE {CHRTYPE = 51,};
enum MACRO_CIGNORE {CIGNORE = 0x1,CSIZE = 0x300,};
enum MACRO_CINTR {CINTR = 3,};
enum MACRO_CKILL {CKILL = 21,};
enum MACRO_CKSUMTYPE {CKSUMTYPE_CRC32 = 0x1,CKSUMTYPE_RSA_MD4 = 0x2,CKSUMTYPE_RSA_MD4_DES = 0x3,CKSUMTYPE_DESCBC = 0x4,CKSUMTYPE_RSA_MD5 = 0x7,CKSUMTYPE_RSA_MD5_DES = 0x8,CKSUMTYPE_NIST_SHA = 0x9,CKSUMTYPE_HMAC_SHA1_DES3 = 0xC,};
enum MACRO_CLBYTES {CLBYTES = 4096,};
enum MACRO_CLD {CLD_NOOP = 0,CLD_EXITED = 1,CLD_KILLED = 2,CLD_DUMPED = 3,CLD_TRAPPED = 4,CLD_STOPPED = 5,CLD_CONTINUED = 6,};
enum MACRO_CLGET {CLGET_SERVER_ADDR = 3,};
enum MACRO_CLIENT {CLIENT_KRB_TIMEOUT = 4,CLIENT_KRB_RETRY = 5,CLIENT_KRB_BUFLEN = 512,};
enum MACRO_CLK {CLK_TCK = 100,};
enum MACRO_CLNEXT {CLNEXT = 22,};
enum MACRO_CLOCK {SYSTEM_CLOCK = 0,CALENDAR_CLOCK = 1,REALTIME_CLOCK = 0,};
enum MACRO_CLOCKS {CLOCKS_PER_SEC = 100,};
enum MACRO_CLOCK_GET {CLOCK_GET_TIME_RES = 1,CLOCK_ALARM_CURRES = 3,CLOCK_ALARM_MINRES = 4,CLOCK_ALARM_MAXRES = 5,};
enum MACRO_CLOCK_SKEW {CLOCK_SKEW = 300,};
enum MACRO_CLOFF {CLOFF = 4095,};
enum MACRO_CLOFSET {CLOFSET = 4095,};
enum MACRO_CLSHIFT {CLSHIFT = 12,CBLOCK = 64,};
enum MACRO_CLSIZE {CLSIZE = 1,};
enum MACRO_CLSIZELOG2 {CLSIZELOG2 = 0,STACKSIZE = 4,};
enum MACRO_CMD {CMD_LEFT = 272,CMD_RIGHT = 273,};
enum MACRO_CMIN {CMIN = 1,CQUIT = 28,};
enum MACRO_COLL {COLL_WEIGHTS_MAX = 2,EQUIV_CLASS_MAX = 2,EXPR_NEST_MAX = 32,LINE_MAX = 2048,RE_DUP_MAX = 255,_POSIX_ARG_MAX = 4096,_POSIX_CHILD_MAX = 6,_POSIX_LINK_MAX = 8,};
enum MACRO_COLOR {COLOR_BLACK = 0,COLOR_RED = 1,COLOR_GREEN = 2,COLOR_YELLOW = 3,COLOR_BLUE = 4,COLOR_MAGENTA = 5,COLOR_CYAN = 6,COLOR_WHITE = 7,};
enum MACRO_COMAPT {COMAPT_MAXLOGNAME = 12,};
enum MACRO_COMMAND {MIN_FORM_COMMAND = 512,MAX_FORM_COMMAND = 568,MAX_COMMAND = 639,};
enum MACRO_CONTINUE {CONTINUE = 3,TRANSIENT = 4,};
enum MACRO_CONTTYPE {CONTTYPE = 55,TSUID = 2048,};
enum MACRO_CONV {CONV_SUCCESS = 0,CONV_OVERFLOW = -1,CONV_BADFMT = -2,CONV_BADCKSUM = -3,CONV_BADBUFLEN = -4,};
enum MACRO_COPY {COPY_RESOURCE_FORK = 1,};
enum MACRO_COPYIN {COPYIN_ARG0_OFFSET = 56,};
enum MACRO_COUNT {task_MSG_COUNT = 33,thread_act_MSG_COUNT = 25,vm_map_MSG_COUNT = 30,};
enum MACRO_CPF {CPF_OVERWRITE = 1,CPF_IGNORE_MODE = 2,CPF_MASK = 3,};
enum MACRO_CPU {CPU_STATE_MAX = 4,CPU_STATE_USER = 0,CPU_STATE_SYSTEM = 1,CPU_STATE_IDLE = 2,CPU_STATE_NICE = 3,CPU_TYPE_ANY = -1,CPU_TYPE_VAX = 1,CPU_TYPE_MC680x0 = 6,CPU_TYPE_I386 = 7,CPU_TYPE_MC98000 = 10,CPU_TYPE_HPPA = 11,CPU_TYPE_MC88000 = 13,CPU_TYPE_SPARC = 14,CPU_TYPE_I860 = 15,CPU_TYPE_POWERPC = 18,CPU_SUBTYPE_MULTIPLE = -1,CPU_SUBTYPE_LITTLE_ENDIAN = 0,CPU_SUBTYPE_BIG_ENDIAN = 1,CPU_SUBTYPE_VAX_ALL = 0,CPU_SUBTYPE_VAX780 = 1,CPU_SUBTYPE_VAX785 = 2,CPU_SUBTYPE_VAX750 = 3,CPU_SUBTYPE_VAX730 = 4,CPU_SUBTYPE_UVAXI = 5,CPU_SUBTYPE_UVAXII = 6,CPU_SUBTYPE_VAX8200 = 7,CPU_SUBTYPE_VAX8500 = 8,CPU_SUBTYPE_VAX8600 = 9,CPU_SUBTYPE_VAX8650 = 10,CPU_SUBTYPE_VAX8800 = 11,CPU_SUBTYPE_UVAXIII = 12,CPU_SUBTYPE_MC680x0_ALL = 1,CPU_SUBTYPE_MC68030 = 1,CPU_SUBTYPE_MC68040 = 2,CPU_SUBTYPE_MC68030_ONLY = 3,CPU_SUBTYPE_I386_ALL = 3,CPU_SUBTYPE_386 = 3,CPU_SUBTYPE_486 = 4,CPU_SUBTYPE_486SX = 132,CPU_SUBTYPE_586 = 5,CPU_SUBTYPE_PENT = 5,CPU_SUBTYPE_PENTPRO = 22,CPU_SUBTYPE_PENTII_M3 = 54,CPU_SUBTYPE_PENTII_M5 = 86,CPU_SUBTYPE_INTEL_FAMILY_MAX = 15,CPU_SUBTYPE_INTEL_MODEL_ALL = 0,CPU_SUBTYPE_MIPS_ALL = 0,CPU_SUBTYPE_MIPS_R2300 = 1,CPU_SUBTYPE_MIPS_R2600 = 2,CPU_SUBTYPE_MIPS_R2800 = 3,CPU_SUBTYPE_MIPS_R2000a = 4,CPU_SUBTYPE_MIPS_R2000 = 5,CPU_SUBTYPE_MIPS_R3000a = 6,CPU_SUBTYPE_MIPS_R3000 = 7,CPU_SUBTYPE_MC98000_ALL = 0,CPU_SUBTYPE_MC98601 = 1,CPU_SUBTYPE_HPPA_ALL = 0,CPU_SUBTYPE_HPPA_7100 = 0,CPU_SUBTYPE_HPPA_7100LC = 1,CPU_SUBTYPE_MC88000_ALL = 0,CPU_SUBTYPE_MC88100 = 1,CPU_SUBTYPE_MC88110 = 2,CPU_SUBTYPE_SPARC_ALL = 0,CPU_SUBTYPE_I860_ALL = 0,CPU_SUBTYPE_I860_860 = 1,CPU_SUBTYPE_POWERPC_ALL = 0,CPU_SUBTYPE_POWERPC_601 = 1,CPU_SUBTYPE_POWERPC_602 = 2,CPU_SUBTYPE_POWERPC_603 = 3,CPU_SUBTYPE_POWERPC_603e = 4,CPU_SUBTYPE_POWERPC_603ev = 5,CPU_SUBTYPE_POWERPC_604 = 6,CPU_SUBTYPE_POWERPC_604e = 7,CPU_SUBTYPE_POWERPC_620 = 8,CPU_SUBTYPE_POWERPC_750 = 9,CPU_SUBTYPE_POWERPC_7400 = 10,CPU_SUBTYPE_POWERPC_7450 = 11,CPU_SUBTYPE_POWERPC_Max = 10,CPU_SUBTYPE_POWERPC_SCVger = 11,};
enum MACRO_CR0 {CR0 = 0x0,CR1 = 0x1000,CR2 = 0x2000,};
enum MACRO_CR3 {CR3 = 0x3000,VTDELAY = 0x4000,};
enum MACRO_CREPRINT {CREPRINT = 18,};
enum MACRO_CROUND {CROUND = 63,MAXBSIZE = 131072,};
enum MACRO_CRPRNT {CRPRNT = 18,};
enum MACRO_CS5 {CS5 = 0x0,CS6 = 0x100,CS7 = 0x200,};
enum MACRO_CS8 {CS8 = 0x300,CSTOPB = 0x400,CREAD = 0x800,PARENB = 0x1000,PARODD = 0x2000,HUPCL = 0x4000,CLOCAL = 0x8000,};
enum MACRO_CSTART {CSTART = 17,};
enum MACRO_CSTATUS {CSTATUS = 0xFF,};
enum MACRO_CSTOP {CSTOP = 19,};
enum MACRO_CSUM {CSUM_IP = 0x1,CSUM_TCP = 0x2,CSUM_UDP = 0x4,CSUM_IP_FRAGS = 0x8,CSUM_FRAGMENT = 0x10,CSUM_IP_CHECKED = 0x100,CSUM_IP_VALID = 0x200,CSUM_DATA_VALID = 0x400,CSUM_PSEUDO_HDR = 0x800,CSUM_TCP_SUM16 = 0x1000,CSUM_DELAY_DATA = 0x6,CSUM_DELAY_IP = 0x1,};
enum MACRO_CSUSP {CSUSP = 26,};
enum MACRO_CTIME {CTIME = 0,CDSUSP = 25,};
enum MACRO_CTL {CTL_LEFT = 266,CTL_RIGHT = 267,};
enum MACRO_CTLFLAG {CTLFLAG_RD = 0x80000000,CTLFLAG_WR = 0x40000000,CTLFLAG_RW = 0xC0000000,CTLFLAG_NOLOCK = 0x20000000,CTLFLAG_ANYBODY = 0x10000000,CTLFLAG_SECURE = 0x8000000,};
enum MACRO_CTLTYPE {CTLTYPE = 0xF,};
enum MACRO_CTLTYPE_NODE {CTLTYPE_NODE = 1,CTLTYPE_INT = 2,CTLTYPE_STRING = 3,CTLTYPE_QUAD = 4,CTLTYPE_OPAQUE = 5,CTLTYPE_STRUCT = 5,};
enum MACRO_CTL_DEBUG {CTL_DEBUG_NAME = 0,CTL_DEBUG_VALUE = 1,CTL_DEBUG_MAXID = 20,};
enum MACRO_CTL_MAXNAME {CTL_MAXNAME = 12,};
enum MACRO_CTL_UNSPEC {CTL_UNSPEC = 0,CTL_KERN = 1,CTL_VM = 2,CTL_VFS = 3,CTL_NET = 4,CTL_DEBUG = 5,CTL_HW = 6,CTL_MACHDEP = 7,CTL_USER = 8,CTL_MAXID = 9,};
enum MACRO_CURL {CURL_ERROR_SIZE = 256,};
enum MACRO_CURLINFO {CURLINFO_STRING = 0x100000,CURLINFO_LONG = 0x200000,CURLINFO_DOUBLE = 0x300000,CURLINFO_MASK = 0xFFFFF,CURLINFO_TYPEMASK = 0xF00000,};
enum MACRO_CURLOPTTYPE {CURLOPTTYPE_LONG = 0,CURLOPTTYPE_OBJECTPOINT = 10000,CURLOPTTYPE_FUNCTIONPOINT = 20000,};
enum MACRO_CURS {CURS_LEFT = 262,CURS_RIGHT = 263,CURS_UP = 264,CURS_DOWN = 265,};
enum MACRO_CURSES {CURSES = 1,};
enum MACRO_CURSES_H {CURSES_H = 1,};
enum MACRO_CWERASE {CWERASE = 23,};
enum MACRO_C_ARGSAVE {C_ARGSAVE_LEN = 32,C_STACK_ALIGN = 16,C_RED_ZONE = 224,};
enum MACRO_ConStatTagCnt {ConStatTagCnt = 9,};
enum MACRO_D {D_L_FATAL = 0x1,D_L_ERROR = 0x2,D_L_WARNING = 0x4,D_L_INFO = 0x8,D_L_VERBOSE = 0x10,D_L_STARTUP = 0x20,D_L_STARTUP_LOW = 0x40,D_L_SHUTDN = 0x80,D_L_SHUTDN_LOW = 0x100,D_L_INPUT = 0x200,D_L_OUTPUT = 0x400,D_L_STATS = 0x800,D_L_STATE_CHG = 0x1000,D_L_ROUTING = 0x2000,D_L_DNSTREAM = 0x4000,D_L_UPSTREAM = 0x8000,D_L_STARTUP_INFO = 0x10000,D_L_SHUTDN_INFO = 0x20000,D_L_ROUTING_AT = 0x40000,D_L_USR1 = 0x1000000,D_L_USR2 = 0x2000000,D_L_USR3 = 0x4000000,D_L_USR4 = 0x8000000,D_L_TRACE = 0x10000000,D_M_PAT = 0x1,D_M_PAT_LOW = 0x2,D_M_ELAP = 0x4,D_M_ELAP_LOW = 0x8,D_M_DDP = 0x10,D_M_DDP_LOW = 0x20,D_M_NBP = 0x40,D_M_NBP_LOW = 0x80,D_M_ZIP = 0x100,D_M_ZIP_LOW = 0x200,D_M_RTMP = 0x400,D_M_RTMP_LOW = 0x800,D_M_ATP = 0x1000,D_M_ATP_LOW = 0x2000,D_M_ADSP = 0x4000,D_M_ADSP_LOW = 0x8000,D_M_AEP = 0x10000,D_M_AARP = 0x20000,D_M_ASP = 0x40000,D_M_ASP_LOW = 0x80000,D_M_AURP = 0x100000,D_M_AURP_LOW = 0x200000,D_M_TRACE = 0x10000000,};
enum MACRO_DATA {DATA = 0x3,ACK = 0x4,};
enum MACRO_DAYSPERLYEAR {DAYSPERLYEAR = 366,SECSPERHOUR = 3600,SECSPERDAY = 86400,};
enum MACRO_DAYSPERNYEAR {DAYSPERNYEAR = 365,};
enum MACRO_DAYSPERWEEK {DAYSPERWEEK = 7,};
enum MACRO_DB {DB_LOCK = 0x20000000,DB_SHMEM = 0x40000000,DB_TXN = 0x80000000,};
enum MACRO_DBG {DBG_ZERO_FILL_FAULT = 1,DBG_PAGEIN_FAULT = 2,DBG_COW_FAULT = 3,DBG_CACHE_HIT_FAULT = 4,DBG_FUNC_START = 1,DBG_FUNC_END = 2,DBG_FUNC_NONE = 0,DBG_MACH = 1,DBG_NETWORK = 2,DBG_FSYSTEM = 3,DBG_BSD = 4,DBG_IOKIT = 5,DBG_DRIVERS = 6,DBG_TRACE = 7,DBG_DLIL = 8,DBG_MISC = 20,DBG_DYLD = 31,DBG_MIG = 255,DBG_MACH_EXCP_DFLT = 3,DBG_MACH_EXCP_IFLT = 4,DBG_MACH_EXCP_INTR = 5,DBG_MACH_EXCP_ALNG = 6,DBG_MACH_EXCP_TRAP = 7,DBG_MACH_EXCP_FP = 8,DBG_MACH_EXCP_DECI = 9,DBG_MACH_EXCP_SC = 12,DBG_MACH_EXCP_TRACE = 13,DBG_MACH_IHDLR = 16,DBG_MACH_IPC = 32,DBG_MACH_VM = 48,DBG_MACH_SCHED = 64,DBG_MACH_MSGID_INVALID = 80,};
enum MACRO_DBG_NETIP {DBG_NETIP = 1,DBG_NETARP = 2,DBG_NETUDP = 3,DBG_NETTCP = 4,DBG_NETICMP = 5,DBG_NETIGMP = 6,DBG_NETRIP = 7,DBG_NETOSPF = 8,DBG_NETISIS = 9,DBG_NETSNMP = 10,DBG_NETSOCK = 11,DBG_NETAARP = 100,DBG_NETDDP = 101,DBG_NETNBP = 102,DBG_NETZIP = 103,DBG_NETADSP = 104,DBG_NETATP = 105,DBG_NETASP = 106,DBG_NETAFP = 107,DBG_NETRTMP = 108,DBG_NETAURP = 109,DBG_IOSCSI = 1,DBG_IODISK = 2,DBG_IONETWORK = 3,DBG_IOKEYBOARD = 4,DBG_IOPOINTING = 5,DBG_IOAUDIO = 6,DBG_IOFLOPPY = 7,DBG_IOSERIAL = 8,DBG_IOTTY = 9,DBG_IOWORKLOOP = 10,DBG_IOINTES = 11,DBG_IOCLKES = 12,DBG_IOCMDQ = 13,DBG_IOMCURS = 14,DBG_IOMDESC = 15,DBG_IOPOWER = 16,DBG_DRVSCSI = 1,DBG_DRVDISK = 2,DBG_DRVNETWORK = 3,DBG_DRVKEYBOARD = 4,DBG_DRVPOINTING = 5,DBG_DRVAUDIO = 6,DBG_DRVFLOPPY = 7,DBG_DRVSERIAL = 8,DBG_DRVSPLT = 9,DBG_DLIL_STATIC = 1,DBG_DLIL_PR_MOD = 2,DBG_DLIL_IF_MOD = 3,DBG_DLIL_PR_FLT = 4,DBG_DLIL_IF_FLT = 5,DBG_FSRW = 1,DBG_DKRW = 2,DBG_BSD_EXCP_SC = 12,DBG_TRACE_DATA = 0,DBG_TRACE_STRING = 1,DBG_DYLD_STRING = 5,};
enum MACRO_DBM {DBM_RDONLY = 0,DBM_INSERT = 0,DBM_REPLACE = 1,};
enum MACRO_DDP {DDP_RTMP = 0x1,DDP_NBP = 0x2,DDP_ATP = 0x3,DDP_ECHO = 0x4,DDP_RTMP_REQ = 0x5,DDP_ZIP = 0x6,DDP_ADSP = 0x7,};
enum MACRO_DDPBROADCASTERRORS {DDPBROADCASTERRORS = 1045,};
enum MACRO_DDPCHECKSUMERRORS {DDPCHECKSUMERRORS = 1046,};
enum MACRO_DDPFORWREQUESTS {DDPFORWREQUESTS = 1047,};
enum MACRO_DDPHOPCOUNTERRORS {DDPHOPCOUNTERRORS = 1048,};
enum MACRO_DDPINLOCALDATAGRAMS {DDPINLOCALDATAGRAMS = 1049,};
enum MACRO_DDPINRECEIVES {DDPINRECEIVES = 1050,};
enum MACRO_DDPNOPROTOCOLHANDLERS {DDPNOPROTOCOLHANDLERS = 1051,};
enum MACRO_DDPOUTLONGS {DDPOUTLONGS = 1052,};
enum MACRO_DDPOUTNOROUTES {DDPOUTNOROUTES = 1053,};
enum MACRO_DDPOUTREQUESTS {DDPOUTREQUESTS = 1054,};
enum MACRO_DDPOUTSHORTS {DDPOUTSHORTS = 1055,};
enum MACRO_DDPSHORTDDPERRORS {DDPSHORTDDPERRORS = 1056,};
enum MACRO_DDPTOOLONGERRORS {DDPTOOLONGERRORS = 1057,};
enum MACRO_DDPTOOSHORTERRORS {DDPTOOSHORTERRORS = 1058,};
enum MACRO_DDP_CHKSUM {DDP_CHKSUM_ON = 1,DDP_HDRINCL = 2,DDP_GETSOCKNAME = 3,DDP_SLFSND_ON = 4,DDP_STRIPHDR = 5,};
enum MACRO_DDP_HDR {DDP_HDR_SIZE = 5,DDP_X_HDR_SIZE = 13,DDP_DATA_SIZE = 586,DDP_DATAGRAM_SIZE = 599,DDP_SOCKET_1st_RESERVED = 1,DDP_SOCKET_1st_EXPERIMENTAL = 64,DDP_SOCKET_1st_DYNAMIC = 128,DDP_SOCKET_LAST = 253,};
enum MACRO_DDP_IOC {DDP_IOC_GET_CFG = 51969,};
enum MACRO_DECRYPT {DECRYPT = 0,};
enum MACRO_DEFAULT {DEFAULT_TKT_LIFE = 120,};
enum MACRO_DEFAULT_OT {DEFAULT_OT_DDPTYPE = 11,};
enum MACRO_DEFFILEMODE {DEFFILEMODE = 438,};
enum MACRO_DELETE {DELETE = 2,};
enum MACRO_DES {DES_ENCRYPT = 1,DES_DECRYPT = 0,};
enum MACRO_DEV {DEV_BSIZE = 512,DEV_BSHIFT = 9,};
enum MACRO_DEVFS {DEVFS_CHAR = 0,DEVFS_BLOCK = 1,};
enum MACRO_DEVICE {DEVICE_PAGER_GUARDED = 0x1,DEVICE_PAGER_COHERENT = 0x2,DEVICE_PAGER_CACHE_INHIB = 0x4,DEVICE_PAGER_WRITE_THROUGH = 0x8,DEVICE_PAGER_CONTIGUOUS = 0x100,DEVICE_PAGER_NOPHYSCACHE = 0x200,};
enum MACRO_DEVMAXNAMESIZE {DEVMAXNAMESIZE = 32,DEVMAXPATHSIZE = 128,};
enum MACRO_DFLCSIZ : __int64 {DFLCSIZ = 0,MAXCSIZ = 9223372036854775807,};
enum MACRO_DFLDSIZ {DFLDSIZ = 6291456,};
enum MACRO_DFLSSIZ {DFLSSIZ = 524288,MAXSSIZ = 67108864,};
enum MACRO_DIR {DIR_MNTSTATUS_MNTPOINT = 0x1,};
enum MACRO_DIRBLKSIZ {DIRBLKSIZ = 1024,};
enum MACRO_DIRTYPE {DIRTYPE = 53,};
enum MACRO_DKIO {DKIO_DONE = 0x1,DKIO_READ = 0x2,DKIO_ASYNC = 0x4,DKIO_META = 0x8,DKIO_PAGING = 0x10,};
enum MACRO_DKIOCEJECT {DKIOCEJECT = 536896533,};
enum MACRO_DKIOCSYNCHRONIZECACHE {DKIOCSYNCHRONIZECACHE = 536896534,};
enum MACRO_DLIL {DLIL_LAST_FILTER = -1,DLIL_NULL_FILTER = -2,DLIL_WAIT_FOR_FREE = -2,DLIL_BLUEBOX = 1,};
enum MACRO_DLIL_PR {DLIL_PR_FILTER = 1,DLIL_IF_FILTER = 2,DLIL_DESC_RAW = 1,DLIL_DESC_802_2 = 2,DLIL_DESC_802_2_SNAP = 3,DLIL_DESC_ETYPE2 = 4,DLIL_DESC_SAP = 5,DLIL_DESC_SNAP = 6,};
enum MACRO_DLT {DLT_NULL = 0,DLT_EN10MB = 1,DLT_EN3MB = 2,DLT_AX25 = 3,DLT_PRONET = 4,DLT_CHAOS = 5,DLT_IEEE802 = 6,DLT_ARCNET = 7,DLT_SLIP = 8,DLT_PPP = 9,DLT_FDDI = 10,DLT_ATM_RFC1483 = 11,DLT_RAW = 12,DLT_SLIP_BSDOS = 15,DLT_PPP_BSDOS = 16,DLT_ATM_CLIP = 19,DLT_PPP_SERIAL = 50,DLT_C_HDLC = 104,DLT_CHDLC = 104,DLT_IEEE802_11 = 105,DLT_LOOP = 108,DLT_LINUX_SLL = 113,};
enum MACRO_DM {DM = 242,};
enum MACRO_DMGET {DMGET = 3,};
enum MACRO_DMSET {DMSET = 0,DMBIS = 1,DMBIC = 2,};
enum MACRO_DN {DN_ACCESS = 0x1,DN_CHANGE = 0x2,DN_UPDATE = 0x4,DN_MODIFIED = 0x8,DN_RENAME = 0x10,};
enum MACRO_DO {DO = 253,};
enum MACRO_DOMAIN {DOMAIN = 1,SING = 2,};
enum MACRO_DONT {DONT = 254,};
enum MACRO_DOT3COMPLIANCE {DOT3COMPLIANCE_STATS = 1,DOT3COMPLIANCE_COLLS = 2,};
enum MACRO_DRT {DRT_NQNFS = 0x1,DRT_TCP = 0x2,DRT_CACHEREPLY = 0x4,DRT_CACHEDROP = 0x8,DRT_NFSV3 = 0x10,};
enum MACRO_DST {DST_NONE = 0,DST_USA = 1,DST_AUST = 2,DST_WET = 3,DST_MET = 4,DST_EET = 5,DST_CAN = 6,};
enum MACRO_DT {DT_UNKNOWN = 0,DT_FIFO = 1,DT_CHR = 2,DT_DIR = 4,DT_BLK = 6,DT_REG = 8,DT_LNK = 10,DT_SOCK = 12,DT_WHT = 14,};
enum MACRO_DTF {DTF_HIDEW = 0x1,DTF_NODUP = 0x2,DTF_REWIND = 0x4,};
enum MACRO_D_TAPE {D_TAPE = 1,D_DISK = 2,D_TTY = 3,};
enum MACRO_E {E_OK = 0,E_SYSTEM_ERROR = -1,E_BAD_ARGUMENT = -2,E_POSTED = -3,E_CONNECTED = -4,E_BAD_STATE = -5,E_NO_ROOM = -6,E_NOT_POSTED = -7,E_UNKNOWN_COMMAND = -8,E_NO_MATCH = -9,E_NOT_SELECTABLE = -10,E_NOT_CONNECTED = -11,E_REQUEST_DENIED = -12,E_INVALID_FIELD = -13,E_CURRENT = -14,};
enum MACRO_EADDRNOTINUSE {EADDRNOTINUSE = 10006,};
enum MACRO_EAI {EAI_ADDRFAMILY = 1,EAI_AGAIN = 2,EAI_BADFLAGS = 3,EAI_FAIL = 4,EAI_FAMILY = 5,EAI_MEMORY = 6,EAI_NODATA = 7,EAI_NONAME = 8,EAI_SERVICE = 9,EAI_SOCKTYPE = 10,EAI_SYSTEM = 11,EAI_BADHINTS = 12,EAI_PROTOCOL = 13,EAI_MAX = 14,};
enum MACRO_EBADID {EBADID = 5,};
enum MACRO_EC {EC = 247,};
enum MACRO_ECHOKE {ECHOKE = 0x1,ECHOE = 0x2,ECHOK = 0x4,ECHONL = 0x10,ECHOPRT = 0x20,ECHOCTL = 0x40,ISIG = 0x80,ICANON = 0x100,ALTWERASE = 0x200,IEXTEN = 0x400,EXTPROC = 0x800,NOKERNINFO = 0x2000000,};
enum MACRO_EENDOFMSG {EENDOFMSG = 10005,};
enum MACRO_EEXISTS {EEXISTS = 6,};
enum MACRO_EFWDRESET {EFWDRESET = 10004,};
enum MACRO_EL {EL_PROMPT = 0,EL_TERMINAL = 1,EL_EDITOR = 2,EL_SIGNAL = 3,EL_BIND = 4,EL_TELLTC = 5,EL_SETTC = 6,EL_ECHOTC = 7,EL_SETTY = 8,EL_ADDFN = 9,EL_HIST = 10,EL_EDITMODE = 11,EL_RPROMPT = 12,EL_GETCFN = 13,EL_CLIENTDATA = 14,EL_BUILTIN_GETCFN = 0,};
enum MACRO_ELAP {ELAP_IOC_GET_STATS = 51714,};
enum MACRO_EL_0 {EL = 248,};
enum MACRO_ENCRYPT {ENCRYPT_IS = 0,ENCRYPT_SUPPORT = 1,ENCRYPT_REPLY = 2,ENCRYPT_START = 3,ENCRYPT_END = 4,ENCRYPT_REQSTART = 5,ENCRYPT_REQEND = 6,ENCRYPT_ENC_KEYID = 7,ENCRYPT_DEC_KEYID = 8,ENCRYPT_CNT = 9,};
enum MACRO_ENCRYPT_0 {ENCRYPT = 1,};
enum MACRO_ENCTYPE {ENCTYPE_NULL = 0x0,ENCTYPE_DES_CBC_CRC = 0x1,ENCTYPE_DES_CBC_MD4 = 0x2,ENCTYPE_DES_CBC_MD5 = 0x3,ENCTYPE_DES_CBC_RAW = 0x4,ENCTYPE_DES3_CBC_SHA = 0x5,ENCTYPE_DES3_CBC_RAW = 0x6,ENCTYPE_DES_HMAC_SHA1 = 0x8,ENCTYPE_DES3_CBC_SHA1 = 0x10,ENCTYPE_UNKNOWN = 0x1FF,ENCTYPE_LOCAL_DES3_HMAC_SHA1 = 0x7007,};
enum MACRO_ENCTYPE_ANY {ENCTYPE_ANY = 0,ENCTYPE_DES_CFB64 = 1,ENCTYPE_DES_OFB64 = 2,ENCTYPE_CNT = 3,};
enum MACRO_ENDIAN {LITTLE_ENDIAN = 1234,BIG_ENDIAN = 4321,PDP_ENDIAN = 3412,};
enum MACRO_ENOSPACE {ENOSPACE = 3,EBADOP = 4,};
enum MACRO_ENOUSER {ENOUSER = 7,};
enum MACRO_ENV {ENV_ESC = 2,ENV_USERVAR = 3,};
enum MACRO_EOF {EOF = -1,};
enum MACRO_EONEENTQUE {EONEENTQUE = 10002,};
enum MACRO_EOR {EOR = 239,};
enum MACRO_EP {EP_REQUEST = 1,EP_REPLY = 2,EP_DATA_SIZE = 585,};
enum MACRO_EPOCH {EPOCH_YEAR = 1970,EPOCH_WDAY = 4,};
enum MACRO_EPROC {EPROC_CTTY = 0x1,EPROC_SLEADER = 0x2,};
enum MACRO_EQUEBLOCKED {EQUEBLOCKED = 10003,};
enum MACRO_EQUEWASEMP {EQUEWASEMP = 10001,};
enum MACRO_ERR {ERR = -1,};
enum MACRO_ERRNO {EPERM = 1,ENOENT = 2,ESRCH = 3,EINTR = 4,EIO = 5,ENXIO = 6,E2BIG = 7,ENOEXEC = 8,EBADF = 9,ECHILD = 10,EDEADLK = 11,ENOMEM = 12,EACCES = 13,EFAULT = 14,ENOTBLK = 15,EBUSY = 16,EEXIST = 17,EXDEV = 18,ENODEV = 19,ENOTDIR = 20,EISDIR = 21,EINVAL = 22,ENFILE = 23,EMFILE = 24,ENOTTY = 25,ETXTBSY = 26,EFBIG = 27,ENOSPC = 28,ESPIPE = 29,EROFS = 30,EMLINK = 31,EPIPE = 32,EDOM = 33,ERANGE = 34,EAGAIN = 35,EWOULDBLOCK = 35,EINPROGRESS = 36,EALREADY = 37,ENOTSOCK = 38,EDESTADDRREQ = 39,EMSGSIZE = 40,EPROTOTYPE = 41,ENOPROTOOPT = 42,EPROTONOSUPPORT = 43,ESOCKTNOSUPPORT = 44,ENOTSUP = 45,EOPNOTSUPP = 45,EPFNOSUPPORT = 46,EAFNOSUPPORT = 47,EADDRINUSE = 48,EADDRNOTAVAIL = 49,ENETDOWN = 50,ENETUNREACH = 51,ENETRESET = 52,ECONNABORTED = 53,ECONNRESET = 54,ENOBUFS = 55,EISCONN = 56,ENOTCONN = 57,ESHUTDOWN = 58,ETOOMANYREFS = 59,ETIMEDOUT = 60,ECONNREFUSED = 61,ELOOP = 62,ENAMETOOLONG = 63,EHOSTDOWN = 64,EHOSTUNREACH = 65,ENOTEMPTY = 66,EPROCLIM = 67,EUSERS = 68,EDQUOT = 69,ESTALE = 70,EREMOTE = 71,EBADRPC = 72,ERPCMISMATCH = 73,EPROGUNAVAIL = 74,EPROGMISMATCH = 75,EPROCUNAVAIL = 76,ENOLCK = 77,ENOSYS = 78,EFTYPE = 79,EAUTH = 80,ENEEDAUTH = 81,EPWROFF = 82,EDEVERR = 83,EOVERFLOW = 84,EBADEXEC = 85,EBADARCH = 86,ESHLIBVERS = 87,EBADMACHO = 88,ECANCELED = 89,ELAST = 89,};
enum MACRO_ERROR {ERROR_TABLE_BASE_kadm = -1783126272,};
enum MACRO_ERROR_0 {ERROR = 5,};
enum MACRO_ERROR_TABLE {ERROR_TABLE_BASE_asn1 = 1859794432,};
enum MACRO_ERROR_TABLE_BASE {ERROR_TABLE_BASE_kdb5 = -1780008448,};
enum MACRO_ERROR_TABLE_BASE_ggss {ERROR_TABLE_BASE_ggss = -2045022976,};
enum MACRO_ERROR_TABLE_BASE_k5g {ERROR_TABLE_BASE_k5g = 39756032,};
enum MACRO_ERROR_TABLE_BASE_krb {ERROR_TABLE_BASE_krb = 39525376,};
enum MACRO_ERROR_TABLE_BASE_krb5 {ERROR_TABLE_BASE_krb5 = -1765328384,};
enum MACRO_ERROR_TABLE_BASE_krbm {ERROR_TABLE_BASE_krbm = 1,};
enum MACRO_ERROR_TABLE_BASE_kv5m {ERROR_TABLE_BASE_kv5m = -1760647424,};
enum MACRO_ERROR_TABLE_BASE_prof {ERROR_TABLE_BASE_prof = -1429577728,};
enum MACRO_ERTR {ERTR_SEED_CONFLICT = 0x101,ERTR_CABLE_CONFLICT = 0x102,ERTR_RTMP_BAD_VERSION = 0x103,ERTR_CABLE_STARTUP = 0x104,ERTR_CABLE_NOZONE = 0x105,};
enum MACRO_ET {ET_ADDR = 1,};
enum MACRO_ETHER {ETHER_ADDR_LEN = 6,ETHER_TYPE_LEN = 2,ETHER_CRC_LEN = 4,ETHER_HDR_LEN = 14,ETHER_MIN_LEN = 64,ETHER_MAX_LEN = 1518,};
enum MACRO_ETHERMIN {ETHERMIN = 46,};
enum MACRO_ETHERMTU {ETHERMTU = 1500,};
enum MACRO_ETHERTYPE {ETHERTYPE_PUP = 0x200,ETHERTYPE_IP = 0x800,ETHERTYPE_ARP = 0x806,ETHERTYPE_REVARP = 0x8035,ETHERTYPE_VLAN = 0x8100,ETHERTYPE_IPV6 = 0x86DD,ETHERTYPE_LOOPBACK = 0x9000,ETHERTYPE_TRAIL = 0x1000,ETHERTYPE_NTRAILER = 0x10,};
enum MACRO_ETHERTYPE_AT {ETHERTYPE_AT = 0x809B,ETHERTYPE_AARP = 0x80F3,};
enum MACRO_EUNDEF {EUNDEF = 0,ENOTFOUND = 1,EACCESS = 2,};
enum MACRO_EV {EV_FD = 1,EV_RE = 1,EV_WR = 2,EV_EX = 4,EV_RM = 8,EV_MASK = 15,EV_RBYTES = 256,EV_WBYTES = 512,EV_RWBYTES = 768,EV_RCLOSED = 1024,EV_RCONN = 2048,EV_WCLOSED = 4096,EV_WCONN = 8192,EV_OOB = 16384,EV_FIN = 32768,EV_RESET = 65536,EV_TIMEOUT = 131072,EV_DMASK = -256,};
enum MACRO_EX {EX_OK = 0,EX__BASE = 64,EX_USAGE = 64,EX_DATAERR = 65,EX_NOINPUT = 66,EX_NOUSER = 67,EX_NOHOST = 68,EX_UNAVAILABLE = 69,EX_SOFTWARE = 70,EX_OSERR = 71,EX_OSFILE = 72,EX_CANTCREAT = 73,EX_IOERR = 74,EX_TEMPFAIL = 75,EX_PROTOCOL = 76,EX_NOPERM = 77,EX_CONFIG = 78,EX__MAX = 78,};
enum MACRO_EXC {EXC_TYPES_COUNT = 10,};
enum MACRO_EXCEPTION {EXCEPTION_CODE_MAX = 2,};
enum MACRO_EXCEPTION_DEFAULT {EXCEPTION_DEFAULT = 1,EXCEPTION_STATE = 2,EXCEPTION_STATE_IDENTITY = 3,};
enum MACRO_EXC_MASK {EXC_MASK_BAD_ACCESS = 2,EXC_MASK_BAD_INSTRUCTION = 4,EXC_MASK_ARITHMETIC = 8,EXC_MASK_EMULATION = 16,EXC_MASK_SOFTWARE = 32,EXC_MASK_BREAKPOINT = 64,EXC_MASK_SYSCALL = 128,EXC_MASK_MACH_SYSCALL = 256,EXC_MASK_RPC_ALERT = 512,EXC_MASK_ALL = 1022,};
enum MACRO_EXC_PPC {EXC_PPC_INVALID_SYSCALL = 1,EXC_PPC_UNIPL_INST = 2,EXC_PPC_PRIVINST = 3,EXC_PPC_PRIVREG = 4,EXC_PPC_TRACE = 5,EXC_PPC_VM_PROT_READ = 257,EXC_PPC_BADSPACE = 258,EXC_PPC_UNALIGNED = 259,EXC_PPC_OVERFLOW = 1,EXC_PPC_ZERO_DIVIDE = 2,EXC_PPC_FLT_INEXACT = 3,EXC_PPC_FLT_ZERO_DIVIDE = 4,EXC_PPC_FLT_UNDERFLOW = 5,EXC_PPC_FLT_OVERFLOW = 6,EXC_PPC_FLT_NOT_A_NUMBER = 7,EXC_PPC_NOEMULATION = 8,EXC_PPC_ALTIVECASSIST = 9,EXC_PPC_TRAP = 1,EXC_PPC_MIGRATE = 65792,EXC_PPC_BREAKPOINT = 1,EXC_MASK_MACHINE = 0,EXC_BAD_ACCESS = 1,EXC_BAD_INSTRUCTION = 2,EXC_ARITHMETIC = 3,EXC_EMULATION = 4,EXC_SOFTWARE = 5,EXC_BREAKPOINT = 6,EXC_SYSCALL = 7,EXC_MACH_SYSCALL = 8,EXC_RPC_ALERT = 9,};
enum MACRO_EXC_SOFT {EXC_SOFT_SIGNAL = 0x10003,};
enum MACRO_EXC_UNIX {EXC_UNIX_BAD_SYSCALL = 0x10000,EXC_UNIX_BAD_PIPE = 0x10001,EXC_UNIX_ABORT = 0x10002,};
enum MACRO_EXIT {EXIT_FAILURE = 1,EXIT_SUCCESS = 0,};
enum MACRO_EXPIRE {EXPIRE_TIME = 180,GARBAGE_TIME = 240,};
enum MACRO_EXT {EXT_NULL = 0x0,};
enum MACRO_EX_NOT {EX_NOT_EXECUTABLE = 6000,};
enum MACRO_F {F_DUPFD = 0,F_GETFD = 1,F_SETFD = 2,F_GETFL = 3,F_SETFL = 4,F_GETOWN = 5,F_SETOWN = 6,F_GETLK = 7,F_SETLK = 8,F_SETLKW = 9,F_PREALLOCATE = 42,F_SETSIZE = 43,F_RDADVISE = 44,F_RDAHEAD = 45,F_READBOOTSTRAP = 46,F_WRITEBOOTSTRAP = 47,F_NOCACHE = 48,F_LOG2PHYS = 49,};
enum MACRO_FAILED {FAILED = 2,};
enum MACRO_FALIGN {FALIGN = 4,};
enum MACRO_FAPPEND {FAPPEND = 8,FASYNC = 64,FFSYNC = 128,};
enum MACRO_FD {FD_SETSIZE = 1024,};
enum MACRO_FD_CLOEXEC {FD_CLOEXEC = 1,};
enum MACRO_FF0 {FF0 = 0x0,FF1 = 0x4000,BSDELAY = 0x8000,};
enum MACRO_FIFOTYPE {FIFOTYPE = 54,};
enum MACRO_FIL {R_TKT_FIL = 0,W_TKT_FIL = 1,};
enum MACRO_FILENO {STDIN_FILENO = 0,STDOUT_FILENO = 1,STDERR_FILENO = 2,};
enum MACRO_FIOCLEX {FIOCLEX = 536897025,};
enum MACRO_FIONCLEX {FIONCLEX = 536897026,};
enum MACRO_FIRST {FIRST_EXCEPTION = 1,};
enum MACRO_FM {FM_BACKPTR = 0,FM_CR_SAVE = 4,FM_LR_SAVE = 8,FM_SIZE = 64,FM_ARG0 = 56,};
enum MACRO_FM_REDZONE {FM_REDZONE = 224,};
enum MACRO_FNDELAY {FNDELAY = 4,};
enum MACRO_FNM {FNM_NOMATCH = 1,FNM_NOESCAPE = 1,FNM_PATHNAME = 2,FNM_PERIOD = 4,FNM_LEADING_DIR = 8,FNM_CASEFOLD = 16,FNM_IGNORECASE = 16,FNM_FILE_NAME = 2,};
enum MACRO_FNONBLOCK {FNONBLOCK = 4,};
enum MACRO_FORM {FORM_N = 1,FORM_T = 2,FORM_C = 3,};
enum MACRO_FP {FP_FAST_FMA = 1,FP_FAST_FMAF = 1,FP_ILOGB0 = -2147483647,FP_ILOGBNAN = 2147483647,};
enum MACRO_FPARSELN {FPARSELN_UNESCESC = 0x1,FPARSELN_UNESCCONT = 0x2,FPARSELN_UNESCCOMM = 0x4,FPARSELN_UNESCREST = 0x8,FPARSELN_UNESCALL = 0xF,};
enum MACRO_FPE {FPE_NOOP = 0,FPE_FLTDIV = 1,FPE_FLTOVF = 2,FPE_FLTUND = 3,FPE_FLTRES = 4,FPE_FLTINV = 5,};
enum MACRO_FRAME_LEN {DDPL_FRAME_LEN = 13,ADSP_FRAME_LEN = 13,};
enum MACRO_FREAD {FREAD = 0x1,FWRITE = 0x2,};
enum MACRO_FSHIFT {FSHIFT = 11,FSCALE = 2048,};
enum MACRO_FSOPT {FSOPT_NOFOLLOW = 0x1,FSOPT_NOINMEMUPDATE = 0x2,};
enum MACRO_FST {FST_EOF = -1,};
enum MACRO_FSUC {FSUC_PROBE = 112,FSUC_PROBEFORINIT = 80,FSUC_MOUNT = 109,FSUC_REPAIR = 114,FSUC_INITIALIZE = 105,FSUC_UNMOUNT = 117,FSUC_MOUNT_FORCE = 77,};
enum MACRO_FSUR {FSUR_RECOGNIZED = -1,FSUR_UNRECOGNIZED = -2,FSUR_IO_SUCCESS = -3,FSUR_IO_FAIL = -4,FSUR_IO_UNCLEAN = -5,FSUR_INVAL = -6,FSUR_LOADERR = -7,FSUR_INITRECOGNIZED = -8,};
enum MACRO_FTS {FTS_COMFOLLOW = 0x1,FTS_LOGICAL = 0x2,FTS_NOCHDIR = 0x4,FTS_NOSTAT = 0x8,FTS_PHYSICAL = 0x10,FTS_SEEDOT = 0x20,FTS_XDEV = 0x40,FTS_WHITEOUT = 0x80,FTS_OPTIONMASK = 0xFF,FTS_NAMEONLY = 0x100,FTS_STOP = 0x200,FTS_ROOTPARENTLEVEL = 0xFFFFFFFF,FTS_ROOTLEVEL = 0x0,FTS_D = 0x1,FTS_DC = 0x2,FTS_DEFAULT = 0x3,FTS_DNR = 0x4,FTS_DOT = 0x5,FTS_DP = 0x6,FTS_ERR = 0x7,FTS_F = 0x8,FTS_INIT = 0x9,FTS_NS = 0xA,FTS_NSOK = 0xB,FTS_SL = 0xC,FTS_SLNONE = 0xD,FTS_W = 0xE,FTS_DONTCHDIR = 0x1,FTS_SYMFOLLOW = 0x2,FTS_ISW = 0x4,FTS_AGAIN = 0x1,FTS_FOLLOW = 0x2,FTS_NOINSTR = 0x3,FTS_SKIP = 0x4,};
enum MACRO_FW {FW_IFNLEN = 10,};
enum MACRO_F_OK {F_OK = 0,X_OK = 1,W_OK = 2,R_OK = 4,};
enum MACRO_F_RDLCK {F_RDLCK = 1,F_UNLCK = 2,F_WRLCK = 3,F_ALLOCATECONTIG = 2,F_ALLOCATEALL = 4,F_PEOFPOSMODE = 3,F_VOLPOSMODE = 4,};
enum MACRO_F_ULOCK {F_ULOCK = 0,F_LOCK = 1,F_TLOCK = 2,F_TEST = 3,};
enum MACRO_G {G_BAD_SERVICE_NAME = -2045022976,G_BAD_STRING_UID = -2045022975,G_NOUSER = -2045022974,G_VALIDATE_FAILED = -2045022973,G_BUFFER_ALLOC = -2045022972,G_BAD_MSG_CTX = -2045022971,G_WRONG_SIZE = -2045022970,G_BAD_USAGE = -2045022969,G_UNKNOWN_QOP = -2045022968,G_NO_HOSTNAME = -2045022967,G_BAD_HOSTNAME = -2045022966,G_WRONG_MECH = -2045022965,G_BAD_TOK_HEADER = -2045022964,G_BAD_DIRECTION = -2045022963,G_TOK_TRUNC = -2045022962,G_REFLECT = -2045022961,G_WRONG_TOKID = -2045022960,};
enum MACRO_GA {GA = 249,};
enum MACRO_GC {GC_TKFIL = 21,GC_NOTKT = 22,};
enum MACRO_GETALL {GETALL = 6,};
enum MACRO_GETNCNT {GETNCNT = 3,GETPID = 4,};
enum MACRO_GETVAL {GETVAL = 5,};
enum MACRO_GETZCNT {GETZCNT = 7,SETVAL = 8,};
enum MACRO_GID {GID_WHEEL = 0,GID_KMEM = 2,GID_OPERATOR = 5,GID_BIN = 7,GID_GAMES = 13,GID_DIALER = 68,};
enum MACRO_GLOB {GLOB_APPEND = 0x1,GLOB_DOOFFS = 0x2,GLOB_ERR = 0x4,GLOB_MARK = 0x8,GLOB_NOCHECK = 0x10,GLOB_NOSORT = 0x20,GLOB_ALTDIRFUNC = 0x40,GLOB_BRACE = 0x80,GLOB_MAGCHAR = 0x100,GLOB_NOMAGIC = 0x200,GLOB_QUOTE = 0x400,GLOB_TILDE = 0x800,GLOB_NOSPACE = 0xFFFFFFFF,GLOB_ABEND = 0xFFFFFFFE,};
enum MACRO_GLOBAL {GLOBAL_SHARED_TEXT_SEGMENT = 0x90000000,GLOBAL_SHARED_DATA_SEGMENT = 0xA0000000,GLOBAL_SHARED_SEGMENT_MASK = 0xF0000000,};
enum MACRO_GMON {GMON_PROF_ON = 0,GMON_PROF_BUSY = 1,GMON_PROF_ERROR = 2,GMON_PROF_OFF = 3,};
enum MACRO_GMONTYPE {GMONTYPE_SAMPLES = 1,GMONTYPE_RAWARCS = 2,GMONTYPE_ARCS_ORDERS = 3,GMONTYPE_DYLD_STATE = 4,};
enum MACRO_GMONVERSION {GMONVERSION = 0x51879,};
enum MACRO_GMON_MAGIC {GMON_MAGIC = 0xBEEFBABE,};
enum MACRO_GPROF {GPROF_STATE = 0,GPROF_COUNT = 1,GPROF_FROMS = 2,GPROF_TOS = 3,GPROF_GMONPARAM = 4,};
enum MACRO_GSS : __int64 {GSS_RFC_COMPLIANT_OIDS = 1,GSS_SIZEOF_INT = 4,GSS_SIZEOF_LONG = 4,GSS_SIZEOF_SHORT = 2,GSS_C_DELEG_FLAG = 1,GSS_C_MUTUAL_FLAG = 2,GSS_C_REPLAY_FLAG = 4,GSS_C_SEQUENCE_FLAG = 8,GSS_C_CONF_FLAG = 16,GSS_C_INTEG_FLAG = 32,GSS_C_ANON_FLAG = 64,GSS_C_PROT_READY_FLAG = 128,GSS_C_TRANS_FLAG = 256,GSS_C_BOTH = 0,GSS_C_INITIATE = 1,GSS_C_ACCEPT = 2,GSS_C_GSS_CODE = 1,GSS_C_MECH_CODE = 2,GSS_C_AF_UNSPEC = 0,GSS_C_AF_LOCAL = 1,GSS_C_AF_INET = 2,GSS_C_AF_IMPLINK = 3,GSS_C_AF_PUP = 4,GSS_C_AF_CHAOS = 5,GSS_C_AF_NS = 6,GSS_C_AF_NBS = 7,GSS_C_AF_ECMA = 8,GSS_C_AF_DATAKIT = 9,GSS_C_AF_CCITT = 10,GSS_C_AF_SNA = 11,GSS_C_AF_DECnet = 12,GSS_C_AF_DLI = 13,GSS_C_AF_LAT = 14,GSS_C_AF_HYLINK = 15,GSS_C_AF_APPLETALK = 16,GSS_C_AF_BSC = 17,GSS_C_AF_DSS = 18,GSS_C_AF_OSI = 19,GSS_C_AF_X25 = 21,GSS_C_AF_NULLADDR = 255,GSS_C_NO_NAME = 0,GSS_C_NO_BUFFER = 0,GSS_C_NO_OID = 0,GSS_C_NO_OID_SET = 0,GSS_C_NO_CONTEXT = 0,GSS_C_NO_CREDENTIAL = 0,GSS_C_NO_CHANNEL_BINDINGS = 0,GSS_C_NULL_OID = 0,GSS_C_NULL_OID_SET = 0,GSS_C_QOP_DEFAULT = 0,GSS_C_INDEFINITE = 4294967295,GSS_S_COMPLETE = 0,GSS_C_CALLING_ERROR_OFFSET = 24,GSS_C_ROUTINE_ERROR_OFFSET = 16,GSS_C_SUPPLEMENTARY_OFFSET = 0,GSS_C_CALLING_ERROR_MASK = 255,GSS_C_ROUTINE_ERROR_MASK = 255,GSS_C_SUPPLEMENTARY_MASK = 65535,GSS_S_CALL_INACCESSIBLE_READ = 16777216,GSS_S_CALL_INACCESSIBLE_WRITE = 33554432,GSS_S_CALL_BAD_STRUCTURE = 50331648,GSS_S_BAD_MECH = 65536,GSS_S_BAD_NAME = 131072,GSS_S_BAD_NAMETYPE = 196608,GSS_S_BAD_BINDINGS = 262144,GSS_S_BAD_STATUS = 327680,GSS_S_BAD_SIG = 393216,GSS_S_NO_CRED = 458752,GSS_S_NO_CONTEXT = 524288,GSS_S_DEFECTIVE_TOKEN = 589824,GSS_S_DEFECTIVE_CREDENTIAL = 655360,GSS_S_CREDENTIALS_EXPIRED = 720896,GSS_S_CONTEXT_EXPIRED = 786432,GSS_S_FAILURE = 851968,GSS_S_BAD_QOP = 917504,GSS_S_UNAUTHORIZED = 983040,GSS_S_UNAVAILABLE = 1048576,GSS_S_DUPLICATE_ELEMENT = 1114112,GSS_S_NAME_NOT_MN = 1179648,GSS_S_CONTINUE_NEEDED = 1,GSS_S_DUPLICATE_TOKEN = 2,GSS_S_OLD_TOKEN = 4,GSS_S_UNSEQ_TOKEN = 8,GSS_S_GAP_TOKEN = 16,GSS_S_CRED_UNAVAIL = 851968,};
enum MACRO_GT {GT_PW_BADPW = 52,GT_PW_PROT = 53,GT_PW_KDCERR = 54,GT_PW_NULLTKT = 55,};
enum MACRO_GT_PW {GT_PW_NULL = 51,};
enum MACRO_H {H_FUNC = 0,H_SETSIZE = 1,H_GETSIZE = 2,H_FIRST = 3,H_LAST = 4,H_PREV = 5,H_NEXT = 6,H_CURR = 8,H_SET = 7,H_ADD = 9,H_ENTER = 10,H_APPEND = 11,H_END = 12,H_NEXT_STR = 13,H_PREV_STR = 14,H_NEXT_EVENT = 15,H_PREV_EVENT = 16,H_LOAD = 17,H_SAVE = 18,H_CLEAR = 19,};
enum MACRO_HANDLER {HANDLER_ID_SELF_TEST = 0xFF,HANDLER_ID_UPDATE_ALWAYS = 0xFF,HANDLER_ID_SELF_TEST_FAIL = 0xFF,HANDLER_ID_UPDATE_NO_COLLISION = 0xFE,HANDLER_ID_UPDATE_IF_ACTIVATOR = 0xFD,};
enum MACRO_HASHFRACTION {HASHFRACTION = 2,};
enum MACRO_HASHMAGIC {HASHMAGIC = 0x61561,};
enum MACRO_HASHSIZE {HASHSIZE = 128,};
enum MACRO_HASHVERSION {HASHVERSION = 2,};
enum MACRO_HAVE {HAVE_STDARG_H = 1,HAVE_SYS_TYPES_H = 1,};
enum MACRO_HAVE_DB {HAVE_DB_H = 1,HAVE_NDBM_H = 1,};
enum MACRO_HAVE_STRCASECMP {HAVE_STRCASECMP = 1,HAVE_LIBFL = 1,HAVE_GETHOSTNAME = 1,HAVE_GETTIMEOFDAY = 1,HAVE_MKDIR = 1,HAVE_SELECT = 1,HAVE_STRCSPN = 1,HAVE_STRDUP = 1,HAVE_STRERROR = 1,HAVE_STRSPN = 1,HAVE_STRSTR = 1,HAVE_STRTOL = 1,HAVE_UNAME = 1,HAVE_PATHS_H = 1,};
enum MACRO_HAVE_TERMIOS {HAVE_TERMIOS_H = 1,HAVE_TCGETATTR = 1,};
enum MACRO_HFIXEDSZ {HFIXEDSZ = 12,};
enum MACRO_HFSFSMNT {HFSFSMNT_NOXONFILES = 0x1,HFSFSMNT_WRAPPER = 0x2,};
enum MACRO_HISTFRACTION {HISTFRACTION = 2,};
enum MACRO_HOPCNT {HOPCNT_INFINITY = 16,};
enum MACRO_HOST {HOST_NOT_FOUND = 1,};
enum MACRO_HOST_BASIC {HOST_BASIC_INFO = 1,HOST_SCHED_INFO = 3,HOST_RESOURCE_SIZES = 4,HOST_PRIORITY_INFO = 5,HOST_SEMAPHORE_TRAPS = 7,HOST_MACH_MSG_TRAP = 8,HOST_LOAD_INFO = 1,HOST_VM_INFO = 2,HOST_CPU_LOAD_INFO = 3,};
enum MACRO_HOST_REBOOT {HOST_REBOOT_HALT = 0x8,HOST_REBOOT_DEBUGGER = 0x1000,};
enum MACRO_HOURSPERDAY {HOURSPERDAY = 24,};
enum MACRO_HTTPPOST {HTTPPOST_FILENAME = 1,HTTPPOST_READFILE = 2,};
enum MACRO_HW {HW_MACHINE = 1,HW_MODEL = 2,HW_NCPU = 3,HW_BYTEORDER = 4,HW_PHYSMEM = 5,HW_USERMEM = 6,HW_PAGESIZE = 7,HW_DISKNAMES = 8,HW_DISKSTATS = 9,HW_EPOCH = 10,HW_FLOATINGPT = 11,HW_MACHINE_ARCH = 12,HW_VECTORUNIT = 13,HW_BUS_FREQ = 14,HW_CPU_FREQ = 15,HW_CACHELINE = 16,HW_L1ICACHESIZE = 17,HW_L1DCACHESIZE = 18,HW_L2SETTINGS = 19,HW_L2CACHESIZE = 20,HW_L3SETTINGS = 21,HW_L3CACHESIZE = 22,HW_MAXID = 23,};
enum MACRO_IAC {IAC = 255,};
enum MACRO_ICMP {ICMP_MINLEN = 8,ICMP_MASKLEN = 12,ICMP_ECHOREPLY = 0,ICMP_UNREACH = 3,ICMP_UNREACH_NET = 0,ICMP_UNREACH_HOST = 1,ICMP_UNREACH_PROTOCOL = 2,ICMP_UNREACH_PORT = 3,ICMP_UNREACH_NEEDFRAG = 4,ICMP_UNREACH_SRCFAIL = 5,ICMP_UNREACH_NET_UNKNOWN = 6,ICMP_UNREACH_HOST_UNKNOWN = 7,ICMP_UNREACH_ISOLATED = 8,ICMP_UNREACH_NET_PROHIB = 9,ICMP_UNREACH_HOST_PROHIB = 10,ICMP_UNREACH_TOSNET = 11,ICMP_UNREACH_TOSHOST = 12,ICMP_UNREACH_FILTER_PROHIB = 13,ICMP_UNREACH_HOST_PRECEDENCE = 14,ICMP_UNREACH_PRECEDENCE_CUTOFF = 15,ICMP_SOURCEQUENCH = 4,ICMP_REDIRECT = 5,ICMP_REDIRECT_NET = 0,ICMP_REDIRECT_HOST = 1,ICMP_REDIRECT_TOSNET = 2,ICMP_REDIRECT_TOSHOST = 3,ICMP_ECHO = 8,ICMP_ROUTERADVERT = 9,ICMP_ROUTERSOLICIT = 10,ICMP_TIMXCEED = 11,ICMP_TIMXCEED_INTRANS = 0,ICMP_TIMXCEED_REASS = 1,ICMP_PARAMPROB = 12,ICMP_PARAMPROB_ERRATPTR = 0,ICMP_PARAMPROB_OPTABSENT = 1,ICMP_PARAMPROB_LENGTH = 2,ICMP_TSTAMP = 13,ICMP_TSTAMPREPLY = 14,ICMP_IREQ = 15,ICMP_IREQREPLY = 16,ICMP_MASKREQ = 17,ICMP_MASKREPLY = 18,ICMP_MAXTYPE = 18,};
enum MACRO_ICMP6 {ICMP6_FILTER = 18,};
enum MACRO_ICMP6_DST {ICMP6_DST_UNREACH = 1,ICMP6_PACKET_TOO_BIG = 2,ICMP6_TIME_EXCEEDED = 3,ICMP6_PARAM_PROB = 4,ICMP6_ECHO_REQUEST = 128,ICMP6_ECHO_REPLY = 129,ICMP6_MEMBERSHIP_QUERY = 130,};
enum MACRO_ICMP6_HADISCOV {ICMP6_HADISCOV_REQUEST = 202,ICMP6_HADISCOV_REPLY = 203,ICMP6_MAXTYPE = 203,ICMP6_DST_UNREACH_NOROUTE = 0,ICMP6_DST_UNREACH_ADMIN = 1,ICMP6_DST_UNREACH_NOTNEIGHBOR = 2,ICMP6_DST_UNREACH_BEYONDSCOPE = 2,ICMP6_DST_UNREACH_ADDR = 3,ICMP6_DST_UNREACH_NOPORT = 4,ICMP6_TIME_EXCEED_TRANSIT = 0,ICMP6_TIME_EXCEED_REASSEMBLY = 1,ICMP6_PARAMPROB_HEADER = 0,ICMP6_PARAMPROB_NEXTHEADER = 1,ICMP6_PARAMPROB_OPTION = 2,ICMP6_INFOMSG_MASK = 128,ICMP6_NI_SUBJ_IPV6 = 0,ICMP6_NI_SUBJ_FQDN = 1,ICMP6_NI_SUBJ_IPV4 = 2,ICMP6_NI_SUCCESS = 0,ICMP6_NI_REFUSED = 1,ICMP6_NI_UNKNOWN = 2,ICMP6_ROUTER_RENUMBERING_COMMAND = 0,ICMP6_ROUTER_RENUMBERING_RESULT = 1,ICMP6_ROUTER_RENUMBERING_SEQNUM_RESET = 255,};
enum MACRO_ICMP6_MEMBERSHIP {ICMP6_MEMBERSHIP_REPORT = 131,MLD6_LISTENER_REPORT = 131,};
enum MACRO_ICMP6_MEMBERSHIP_REDUCTION {ICMP6_MEMBERSHIP_REDUCTION = 132,};
enum MACRO_ICMP6_ROUTER {ICMP6_ROUTER_RENUMBERING = 138,ICMP6_WRUREQUEST = 139,ICMP6_WRUREPLY = 140,ICMP6_FQDN_QUERY = 139,ICMP6_FQDN_REPLY = 140,ICMP6_NI_QUERY = 139,ICMP6_NI_REPLY = 140,};
enum MACRO_ICMP6_RR {ICMP6_RR_FLAGS_TEST = 0x80,ICMP6_RR_FLAGS_REQRESULT = 0x40,ICMP6_RR_FLAGS_FORCEAPPLY = 0x20,ICMP6_RR_FLAGS_SPECSITE = 0x10,ICMP6_RR_FLAGS_PREVDONE = 0x8,};
enum MACRO_ICMP6_RR_PCOUSE {ICMP6_RR_PCOUSE_RAFLAGS_ONLINK = 0x80,ICMP6_RR_PCOUSE_RAFLAGS_AUTO = 0x40,ICMP6_RR_PCOUSE_FLAGS_DECRVLTIME = 0x80000000,ICMP6_RR_PCOUSE_FLAGS_DECRPLTIME = 0x40000000,ICMP6_RR_RESULT_FLAGS_OOB = 0x2,ICMP6_RR_RESULT_FLAGS_FORBIDDEN = 0x1,};
enum MACRO_ICMPV6 {ICMPV6_PLD_MAXLEN = 1232,};
enum MACRO_ICMPV6CTL {ICMPV6CTL_STATS = 1,ICMPV6CTL_REDIRACCEPT = 2,ICMPV6CTL_REDIRTIMEOUT = 3,ICMPV6CTL_ND6_PRUNE = 6,ICMPV6CTL_ND6_DELAY = 8,ICMPV6CTL_ND6_UMAXTRIES = 9,ICMPV6CTL_ND6_MMAXTRIES = 10,ICMPV6CTL_ND6_USELOOPBACK = 11,ICMPV6CTL_NODEINFO = 13,ICMPV6CTL_ERRPPSLIMIT = 14,ICMPV6CTL_ND6_MAXNUDHINT = 15,ICMPV6CTL_MTUDISC_HIWAT = 16,ICMPV6CTL_MTUDISC_LOWAT = 17,ICMPV6CTL_ND6_DEBUG = 18,ICMPV6CTL_ND6_DRLIST = 19,ICMPV6CTL_ND6_PRLIST = 20,ICMPV6CTL_MAXID = 21,};
enum MACRO_IF {IF_MINMTU = 72,IF_MAXMTU = 65535,};
enum MACRO_IFA {IFA_ROUTE = 1,};
enum MACRO_IFDATA {IFDATA_GENERAL = 1,IFDATA_LINKSPECIFIC = 2,};
enum MACRO_IFF {IFF_UP = 0x1,IFF_BROADCAST = 0x2,IFF_DEBUG = 0x4,IFF_LOOPBACK = 0x8,IFF_POINTOPOINT = 0x10,IFF_NOTRAILERS = 0x20,IFF_RUNNING = 0x40,IFF_NOARP = 0x80,IFF_PROMISC = 0x100,IFF_ALLMULTI = 0x200,IFF_OACTIVE = 0x400,IFF_SIMPLEX = 0x800,IFF_LINK0 = 0x1000,IFF_LINK1 = 0x2000,IFF_LINK2 = 0x4000,IFF_ALTPHYS = 0x4000,IFF_MULTICAST = 0x8000,IFF_CANTCHANGE = 0x8E52,};
enum MACRO_IFI {IFI_RECV = 1,IFI_XMIT = 2,};
enum MACRO_IFID {IFID_HOME = 1,};
enum MACRO_IFLOW {CRTS_IFLOW = 0x20000,CDTR_IFLOW = 0x40000,};
enum MACRO_IFLR {IFLR_PREFIX = 0x8000,};
enum MACRO_IFM : __int64 {IFM_ETHER = 0x20,IFM_10_T = 0x3,IFM_10_2 = 0x4,IFM_10_5 = 0x5,IFM_100_TX = 0x6,IFM_100_FX = 0x7,IFM_100_T4 = 0x8,IFM_100_VG = 0x9,IFM_100_T2 = 0xA,IFM_1000_SX = 0xB,IFM_10_STP = 0xC,IFM_10_FL = 0xD,IFM_1000_LX = 0xE,IFM_1000_CX = 0xF,IFM_1000_TX = 0x10,IFM_HPNA_1 = 0x11,IFM_TOKEN = 0x40,IFM_TOK_STP4 = 0x3,IFM_TOK_STP16 = 0x4,IFM_TOK_UTP4 = 0x5,IFM_TOK_UTP16 = 0x6,IFM_TOK_STP100 = 0x7,IFM_TOK_UTP100 = 0x8,IFM_TOK_ETR = 0x200,IFM_TOK_SRCRT = 0x400,IFM_TOK_ALLR = 0x800,IFM_TOK_DTR = 0x2000,IFM_TOK_CLASSIC = 0x4000,IFM_TOK_AUTO = 0x8000,IFM_FDDI = 0x60,IFM_FDDI_SMF = 0x3,IFM_FDDI_MMF = 0x4,IFM_FDDI_UTP = 0x5,IFM_FDDI_DA = 0x100,IFM_IEEE80211 = 0x80,IFM_IEEE80211_FH1 = 0x3,IFM_IEEE80211_FH2 = 0x4,IFM_IEEE80211_DS2 = 0x5,IFM_IEEE80211_DS5 = 0x6,IFM_IEEE80211_DS11 = 0x7,IFM_IEEE80211_DS1 = 0x8,IFM_IEEE80211_DS22 = 0x9,IFM_IEEE80211_ADHOC = 0x100,IFM_AUTO = 0x0,IFM_MANUAL = 0x1,IFM_NONE = 0x2,IFM_FDX = 0x100000,IFM_HDX = 0x200000,IFM_FLOW = 0x400000,IFM_FLAG0 = 0x1000000,IFM_FLAG1 = 0x2000000,IFM_FLAG2 = 0x4000000,IFM_LOOP = 0x8000000,IFM_NMASK = 0xE0,IFM_TMASK = 0x1F,IFM_IMASK = 0xFFFFFFFFF0000000,IFM_ISHIFT = 0x1C,IFM_OMASK = 0xFF00,IFM_GMASK = 0xFF00000,IFM_AVALID = 0x1,IFM_ACTIVE = 0x2,IFM_INST_MAX = 0xFFFFFFFFF,};
enum MACRO_IFMIB {IFMIB_SYSTEM = 1,IFMIB_IFDATA = 2,};
enum MACRO_IFMIB_IFCOUNT {IFMIB_IFCOUNT = 1,};
enum MACRO_IFNAMSIZ {IFNAMSIZ = 16,};
enum MACRO_IFNET {IFNET_SLOWHZ = 1,};
enum MACRO_IFQ {IFQ_MAXLEN = 50,};
enum MACRO_IFSTATMAX {IFSTATMAX = 800,};
enum MACRO_IFT {IFT_OTHER = 0x1,IFT_1822 = 0x2,IFT_HDH1822 = 0x3,IFT_X25DDN = 0x4,IFT_X25 = 0x5,IFT_ETHER = 0x6,IFT_ISO88023 = 0x7,IFT_ISO88024 = 0x8,IFT_ISO88025 = 0x9,IFT_ISO88026 = 0xA,IFT_STARLAN = 0xB,IFT_P10 = 0xC,IFT_P80 = 0xD,IFT_HY = 0xE,IFT_FDDI = 0xF,IFT_LAPB = 0x10,IFT_SDLC = 0x11,IFT_T1 = 0x12,IFT_CEPT = 0x13,IFT_ISDNBASIC = 0x14,IFT_ISDNPRIMARY = 0x15,IFT_PTPSERIAL = 0x16,IFT_PPP = 0x17,IFT_LOOP = 0x18,IFT_EON = 0x19,IFT_XETHER = 0x1A,IFT_NSIP = 0x1B,IFT_SLIP = 0x1C,IFT_ULTRA = 0x1D,IFT_DS3 = 0x1E,IFT_SIP = 0x1F,IFT_FRELAY = 0x20,IFT_RS232 = 0x21,IFT_PARA = 0x22,IFT_ARCNET = 0x23,IFT_ARCNETPLUS = 0x24,IFT_ATM = 0x25,IFT_MIOX25 = 0x26,IFT_SONET = 0x27,IFT_X25PLE = 0x28,IFT_ISO88022LLC = 0x29,IFT_LOCALTALK = 0x2A,IFT_SMDSDXI = 0x2B,IFT_FRELAYDCE = 0x2C,IFT_V35 = 0x2D,IFT_HSSI = 0x2E,IFT_HIPPI = 0x2F,IFT_MODEM = 0x30,IFT_AAL5 = 0x31,IFT_SONETPATH = 0x32,IFT_SONETVT = 0x33,IFT_SMDSICIP = 0x34,IFT_PROPVIRTUAL = 0x35,IFT_PROPMUX = 0x36,IFT_GIF = 0x37,IFT_FAITH = 0x38,IFT_STF = 0x39,IFT_L2VLAN = 0x87,IFT_IEEE1394 = 0x90,};
enum MACRO_IF_FW {IF_FW_F_VIAHACK = 3840,};
enum MACRO_IF_NAME {IF_NAME_SIZE = 6,DDP_ADDR_SIZE = 3,ZONE_SIZE = 32,OBJECT_SIZE = 32,TYPE_SIZE = 32,PORT_DESC_SIZE = 50,};
enum MACRO_IF_NAMESIZE {IF_NAMESIZE = 16,};
enum MACRO_IF_SETSIZE {IF_SETSIZE = 256,};
enum MACRO_IGMP {IGMP_MINLEN = 8,IGMP_MEMBERSHIP_QUERY = 17,IGMP_V1_MEMBERSHIP_REPORT = 18,IGMP_V2_MEMBERSHIP_REPORT = 22,IGMP_V2_LEAVE_GROUP = 23,IGMP_DVMRP = 19,IGMP_PIM = 20,IGMP_MTRACE_RESP = 30,IGMP_MTRACE = 31,IGMP_MAX_HOST_REPORT_DELAY = 10,IGMP_TIMER_SCALE = 10,IGMP_HOST_MEMBERSHIP_QUERY = 17,IGMP_HOST_MEMBERSHIP_REPORT = 18,IGMP_HOST_NEW_MEMBERSHIP_REPORT = 22,IGMP_HOST_LEAVE_MESSAGE = 23,};
enum MACRO_IGMPMSG {IGMPMSG_NOCACHE = 1,IGMPMSG_WRONGVIF = 2,};
enum MACRO_IGNBRK {IGNBRK = 0x1,BRKINT = 0x2,IGNPAR = 0x4,PARMRK = 0x8,INPCK = 0x10,ISTRIP = 0x20,INLCR = 0x40,IGNCR = 0x80,ICRNL = 0x100,IXON = 0x200,IXOFF = 0x400,IXANY = 0x800,IMAXBEL = 0x2000,};
enum MACRO_ILL {ILL_NOOP = 0,ILL_ILLOPC = 1,ILL_ILLTRP = 2,ILL_PRVOPC = 3,};
enum MACRO_IN {IN_CLASSA_NET = 0xFF000000,IN_CLASSA_NSHIFT = 0x18,IN_CLASSA_HOST = 0xFFFFFF,IN_CLASSA_MAX = 0x80,IN_CLASSB_NET = 0xFFFF0000,IN_CLASSB_NSHIFT = 0x10,IN_CLASSB_HOST = 0xFFFF,IN_CLASSB_MAX = 0x10000,IN_CLASSC_NET = 0xFFFFFF00,IN_CLASSC_NSHIFT = 0x8,IN_CLASSC_HOST = 0xFF,IN_CLASSD_NET = 0xF0000000,IN_CLASSD_NSHIFT = 0x1C,IN_CLASSD_HOST = 0xFFFFFFF,};
enum MACRO_IN6P {IN6P_IPV6_V6ONLY = 0x8000,IN6P_PKTINFO = 0x10000,IN6P_HOPLIMIT = 0x20000,IN6P_HOPOPTS = 0x40000,IN6P_DSTOPTS = 0x80000,IN6P_RTHDR = 0x100000,IN6P_RTHDRDSTOPTS = 0x200000,IN6P_AUTOFLOWLABEL = 0x800000,IN6P_BINDV6ONLY = 0x10000000,};
enum MACRO_IN6P_HIGHPORT {IN6P_HIGHPORT = 16,IN6P_LOWPORT = 32,IN6P_ANONPORT = 64,IN6P_RECVIF = 128,IN6P_MTUDISC = 256,IN6P_FAITH = 1024,IN6P_CONTROLOPTS = 12517511,};
enum MACRO_INADDR : __int64 {INADDR_ANY = 0,INADDR_LOOPBACK = 2130706433,INADDR_BROADCAST = 4294967295,INADDR_NONE = -1,INADDR_UNSPEC_GROUP = 3758096384,INADDR_ALLHOSTS_GROUP = 3758096385,INADDR_ALLRTRS_GROUP = 3758096386,INADDR_MAX_LOCAL_GROUP = 3758096639,};
enum MACRO_INDIR {INDIR_MASK = 0xC0,};
enum MACRO_INET {INET_ADDRSTRLEN = 16,};
enum MACRO_INET6 {INET6_ADDRSTRLEN = 46,};
enum MACRO_INFINITY {INFINITY = 0x7FFFFFFF,};
enum MACRO_INP {INP_IPV4 = 0x1,INP_IPV6 = 0x2,INP_RECVOPTS = 0x1,INP_RECVRETOPTS = 0x2,INP_RECVDSTADDR = 0x4,INP_HDRINCL = 0x8,INP_HIGHPORT = 0x10,INP_LOWPORT = 0x20,INP_ANONPORT = 0x40,INP_RECVIF = 0x80,INP_MTUDISC = 0x100,INP_STRIPHDR = 0x200,INP_FAITH = 0x400,};
enum MACRO_INPCB {INPCB_ALL_OWNERS = 0xFF,INPCB_NO_OWNER = 0x0,INPCB_OWNED_BY_X = 0x80,INPCB_MAX_IDS = 0x7,};
enum MACRO_INPLOOKUP {INPLOOKUP_WILDCARD = 1,};
enum MACRO_INP_CONTROLOPTS {INP_CONTROLOPTS = 12517511,INP_UNMAPPABLEOPTS = 10223616,};
enum MACRO_INT {INT_MIN = -2147483648,INT_MAX = 2147483647,};
enum MACRO_INT16SZ {INT16SZ = 2,INADDRSZ = 4,};
enum MACRO_INT32SZ {INT32SZ = 4,};
enum MACRO_INT8 : __int64 {INT8_MAX = 127,INT16_MAX = 32767,INT32_MAX = 2147483647,INT64_MAX = 9223372036854775807,};
enum MACRO_INTK {INTK_PW_NULL = 51,};
enum MACRO_INTK_W {INTK_W_NOTALL = 61,INTK_BADPW = 62,INTK_PROT = 63,INTK_ERR = 70,};
enum MACRO_INTMAX : __int64 {INTMAX_MIN = -9223372036854775808,INTMAX_MAX = 9223372036854775807,};
enum MACRO_INTPTR {INTPTR_MIN = -2147483648,INTPTR_MAX = 2147483647,};
enum MACRO_INT_FAST8 : __int64 {INT_FAST8_MIN = -128,INT_FAST16_MIN = -32768,INT_FAST32_MIN = -2147483648,INT_FAST64_MIN = -9223372036854775808,INT_FAST8_MAX = 127,INT_FAST16_MAX = 32767,INT_FAST32_MAX = 2147483647,INT_FAST64_MAX = 9223372036854775807,};
enum MACRO_INT_LEAST8 : __int64 {INT_LEAST8_MIN = -128,INT_LEAST16_MIN = -32768,INT_LEAST32_MIN = -2147483648,INT_LEAST64_MIN = -9223372036854775808,INT_LEAST8_MAX = 127,INT_LEAST16_MAX = 32767,INT_LEAST32_MAX = 2147483647,INT_LEAST64_MAX = 9223372036854775807,};
enum MACRO_IN_LINKLOCALNETNUM : __int64 {IN_LINKLOCALNETNUM = 2851995648,IN_LOOPBACKNET = 127,};
enum MACRO_IO {IO_METASYNC = 0,};
enum MACRO_IOC : __int64 {IOC_VOID = 0x20000000,IOC_OUT = 0x40000000,IOC_IN = 0x80000000,IOC_INOUT = 0xC0000000,IOC_DIRMASK = 0xE0000000,};
enum MACRO_IOCPARM {IOCPARM_MASK = 0x1FFF,IOCPARM_MAX = 0x2000,};
enum MACRO_IO_UNIT {IO_UNIT = 0x1,IO_APPEND = 0x2,IO_SYNC = 0x4,IO_NODELOCKED = 0x8,IO_NDELAY = 0x10,IO_NOZEROFILL = 0x20,IO_TAILZEROFILL = 0x40,IO_HEADZEROFILL = 0x80,IO_NOZEROVALID = 0x100,IO_NOZERODIRTY = 0x200,};
enum MACRO_IP {IP_OPTIONS = 1,IP_HDRINCL = 2,IP_TOS = 3,IP_TTL = 4,IP_RECVOPTS = 5,IP_RECVRETOPTS = 6,IP_RECVDSTADDR = 7,IP_RETOPTS = 8,IP_MULTICAST_IF = 9,IP_MULTICAST_TTL = 10,IP_MULTICAST_LOOP = 11,IP_ADD_MEMBERSHIP = 12,IP_DROP_MEMBERSHIP = 13,IP_MULTICAST_VIF = 14,IP_RSVP_ON = 15,IP_RSVP_OFF = 16,IP_RSVP_VIF_ON = 17,IP_RSVP_VIF_OFF = 18,IP_PORTRANGE = 19,IP_RECVIF = 20,IP_IPSEC_POLICY = 21,IP_FAITH = 22,IP_STRIPHDR = 23,IP_FW_ADD = 40,IP_FW_DEL = 41,IP_FW_FLUSH = 42,IP_FW_ZERO = 43,IP_FW_GET = 44,IP_FW_RESETLOG = 45,IP_OLD_FW_ADD = 50,IP_OLD_FW_DEL = 51,IP_OLD_FW_FLUSH = 52,IP_OLD_FW_ZERO = 53,IP_OLD_FW_GET = 54,IP_NAT__XXX = 55,IP_OLD_FW_RESETLOG = 56,IP_DUMMYNET_CONFIGURE = 60,IP_DUMMYNET_DEL = 61,IP_DUMMYNET_FLUSH = 62,IP_DUMMYNET_GET = 64,IP_DEFAULT_MULTICAST_TTL = 1,IP_DEFAULT_MULTICAST_LOOP = 1,IP_MAX_MEMBERSHIPS = 20,IP_PORTRANGE_DEFAULT = 0,IP_PORTRANGE_HIGH = 1,IP_PORTRANGE_LOW = 2,};
enum MACRO_IP6F {IP6F_OFF_MASK = 0xFFF8,IP6F_RESERVED_MASK = 0x6,IP6F_MORE_FRAG = 0x1,};
enum MACRO_IP6OPT {IP6OPT_PAD1 = 0x0,IP6OPT_PADN = 0x1,IP6OPT_JUMBO = 0xC2,IP6OPT_NSAP_ADDR = 0xC3,IP6OPT_TUNNEL_LIMIT = 0x4,IP6OPT_RTALERT = 0x5,IP6OPT_RTALERT_LEN = 0x4,IP6OPT_RTALERT_MLD = 0x0,IP6OPT_RTALERT_RSVP = 0x1,IP6OPT_RTALERT_ACTNET = 0x2,IP6OPT_MINLEN = 0x2,IP6OPT_BINDING_UPDATE = 0xC6,IP6OPT_BINDING_ACK = 0x7,IP6OPT_BINDING_REQ = 0x8,IP6OPT_HOME_ADDRESS = 0xC9,IP6OPT_EID = 0x8A,IP6OPT_TYPE_SKIP = 0x0,IP6OPT_TYPE_DISCARD = 0x40,IP6OPT_TYPE_FORCEICMP = 0x80,IP6OPT_TYPE_ICMP = 0xC0,IP6OPT_MUTABLE = 0x20,IP6OPT_JUMBO_LEN = 0x6,};
enum MACRO_IP6TOS {IP6TOS_CE = 0x1,IP6TOS_ECT = 0x2,};
enum MACRO_IPC {IPC_R = 0x100,IPC_W = 0x80,IPC_M = 0x1000,IPC_CREAT = 0x200,IPC_EXCL = 0x400,IPC_NOWAIT = 0x800,IPC_PRIVATE = 0x0,IPC_RMID = 0x0,IPC_SET = 0x1,IPC_STAT = 0x2,};
enum MACRO_IPCOMP {IPCOMP_OUI = 1,IPCOMP_DEFLATE = 2,IPCOMP_LZS = 3,IPCOMP_MAX = 4,IPCOMP_CPI_NEGOTIATE_MIN = 256,};
enum MACRO_IPCTL {IPCTL_FORWARDING = 1,IPCTL_SENDREDIRECTS = 2,IPCTL_DEFTTL = 3,IPCTL_RTEXPIRE = 5,IPCTL_RTMINEXPIRE = 6,IPCTL_RTMAXCACHE = 7,IPCTL_SOURCEROUTE = 8,IPCTL_DIRECTEDBROADCAST = 9,IPCTL_INTRQMAXLEN = 10,IPCTL_INTRQDROPS = 11,IPCTL_STATS = 12,IPCTL_ACCEPTSOURCEROUTE = 13,IPCTL_FASTFORWARDING = 14,IPCTL_KEEPFAITH = 15,IPCTL_GIF_TTL = 16,IPCTL_MAXID = 17,};
enum MACRO_IPDEFTTL {IPDEFTTL = 64,};
enum MACRO_IPFRAGTTL {IPFRAGTTL = 60,};
enum MACRO_IPOPT {IPOPT_CONTROL = 0x0,IPOPT_RESERVED1 = 0x20,IPOPT_DEBMEAS = 0x40,IPOPT_RESERVED2 = 0x60,IPOPT_EOL = 0x0,IPOPT_NOP = 0x1,IPOPT_RR = 0x7,IPOPT_TS = 0x44,IPOPT_SECURITY = 0x82,IPOPT_LSRR = 0x83,IPOPT_SATID = 0x88,IPOPT_SSRR = 0x89,IPOPT_RA = 0x94,IPOPT_OPTVAL = 0x0,IPOPT_OLEN = 0x1,IPOPT_OFFSET = 0x2,IPOPT_MINOFF = 0x4,IPOPT_TS_TSONLY = 0x0,IPOPT_TS_TSANDADDR = 0x1,IPOPT_TS_PRESPEC = 0x3,IPOPT_SECUR_UNCLASS = 0x0,IPOPT_SECUR_CONFID = 0xF135,IPOPT_SECUR_EFTO = 0x789A,IPOPT_SECUR_MMMM = 0xBC4D,IPOPT_SECUR_RESTR = 0xAF13,IPOPT_SECUR_SECRET = 0xD788,IPOPT_SECUR_TOPSECRET = 0x6BC5,};
enum MACRO_IPPORT {IPPORT_RESERVED = 1024,IPPORT_USERRESERVED = 5000,IPPORT_HIFIRSTAUTO = 49152,IPPORT_HILASTAUTO = 65535,IPPORT_RESERVEDSTART = 600,};
enum MACRO_IPPROTO {IPPROTO_IP = 0,IPPROTO_HOPOPTS = 0,IPPROTO_ICMP = 1,IPPROTO_IGMP = 2,IPPROTO_GGP = 3,IPPROTO_IPV4 = 4,IPPROTO_IPIP = 4,IPPROTO_TCP = 6,IPPROTO_ST = 7,IPPROTO_EGP = 8,IPPROTO_PIGP = 9,IPPROTO_RCCMON = 10,IPPROTO_NVPII = 11,IPPROTO_PUP = 12,IPPROTO_ARGUS = 13,IPPROTO_EMCON = 14,IPPROTO_XNET = 15,IPPROTO_CHAOS = 16,IPPROTO_UDP = 17,IPPROTO_MUX = 18,IPPROTO_MEAS = 19,IPPROTO_HMP = 20,IPPROTO_PRM = 21,IPPROTO_IDP = 22,IPPROTO_TRUNK1 = 23,IPPROTO_TRUNK2 = 24,IPPROTO_LEAF1 = 25,IPPROTO_LEAF2 = 26,IPPROTO_RDP = 27,IPPROTO_IRTP = 28,IPPROTO_TP = 29,IPPROTO_BLT = 30,IPPROTO_NSP = 31,IPPROTO_INP = 32,IPPROTO_SEP = 33,IPPROTO_3PC = 34,IPPROTO_IDPR = 35,IPPROTO_XTP = 36,IPPROTO_DDP = 37,IPPROTO_CMTP = 38,IPPROTO_TPXX = 39,IPPROTO_IL = 40,IPPROTO_IPV6 = 41,IPPROTO_SDRP = 42,IPPROTO_ROUTING = 43,IPPROTO_FRAGMENT = 44,IPPROTO_IDRP = 45,IPPROTO_RSVP = 46,IPPROTO_GRE = 47,IPPROTO_MHRP = 48,IPPROTO_BHA = 49,IPPROTO_ESP = 50,IPPROTO_AH = 51,IPPROTO_INLSP = 52,IPPROTO_SWIPE = 53,IPPROTO_NHRP = 54,IPPROTO_ICMPV6 = 58,IPPROTO_NONE = 59,IPPROTO_DSTOPTS = 60,IPPROTO_AHIP = 61,IPPROTO_CFTP = 62,IPPROTO_HELLO = 63,IPPROTO_SATEXPAK = 64,IPPROTO_KRYPTOLAN = 65,IPPROTO_RVD = 66,IPPROTO_IPPC = 67,IPPROTO_ADFS = 68,IPPROTO_SATMON = 69,IPPROTO_VISA = 70,IPPROTO_IPCV = 71,IPPROTO_CPNX = 72,IPPROTO_CPHB = 73,IPPROTO_WSN = 74,IPPROTO_PVP = 75,IPPROTO_BRSATMON = 76,IPPROTO_ND = 77,IPPROTO_WBMON = 78,IPPROTO_WBEXPAK = 79,IPPROTO_EON = 80,IPPROTO_VMTP = 81,IPPROTO_SVMTP = 82,IPPROTO_VINES = 83,IPPROTO_TTP = 84,IPPROTO_IGP = 85,IPPROTO_DGP = 86,IPPROTO_TCF = 87,IPPROTO_IGRP = 88,IPPROTO_OSPFIGP = 89,IPPROTO_SRPC = 90,IPPROTO_LARP = 91,IPPROTO_MTP = 92,IPPROTO_AX25 = 93,IPPROTO_IPEIP = 94,IPPROTO_MICP = 95,IPPROTO_SCCSP = 96,IPPROTO_ETHERIP = 97,IPPROTO_ENCAP = 98,IPPROTO_APES = 99,IPPROTO_GMTP = 100,IPPROTO_IPCOMP = 108,IPPROTO_PIM = 103,IPPROTO_PGM = 113,IPPROTO_DIVERT = 254,IPPROTO_RAW = 255,IPPROTO_MAX = 256,IPPROTO_DONE = 257,};
enum MACRO_IPPROTO_MAXID {IPPROTO_MAXID = 52,};
enum MACRO_IPSEC {IPSEC_PORT_ANY = 0,IPSEC_ULPROTO_ANY = 255,IPSEC_PROTO_ANY = 255,IPSEC_MODE_ANY = 0,IPSEC_MODE_TRANSPORT = 1,IPSEC_MODE_TUNNEL = 2,IPSEC_DIR_ANY = 0,IPSEC_DIR_INBOUND = 1,IPSEC_DIR_OUTBOUND = 2,IPSEC_DIR_MAX = 3,IPSEC_DIR_INVALID = 4,IPSEC_POLICY_DISCARD = 0,IPSEC_POLICY_NONE = 1,IPSEC_POLICY_IPSEC = 2,IPSEC_POLICY_ENTRUST = 3,IPSEC_POLICY_BYPASS = 4,IPSEC_LEVEL_DEFAULT = 0,IPSEC_LEVEL_USE = 1,IPSEC_LEVEL_REQUIRE = 2,IPSEC_LEVEL_UNIQUE = 3,IPSEC_MANUAL_REQID_MAX = 16383,IPSEC_REPLAYWSIZE = 32,};
enum MACRO_IPSECCTL {IPSECCTL_STATS = 1,IPSECCTL_DEF_POLICY = 2,IPSECCTL_DEF_ESP_TRANSLEV = 3,IPSECCTL_DEF_ESP_NETLEV = 4,IPSECCTL_DEF_AH_TRANSLEV = 5,IPSECCTL_DEF_AH_NETLEV = 6,IPSECCTL_AH_CLEARTOS = 8,IPSECCTL_AH_OFFSETMASK = 9,IPSECCTL_DFBIT = 10,IPSECCTL_ECN = 11,IPSECCTL_DEBUG = 12,IPSECCTL_ESP_RANDPAD = 13,IPSECCTL_MAXID = 14,};
enum MACRO_IPTOS {IPTOS_LOWDELAY = 0x10,IPTOS_THROUGHPUT = 0x8,IPTOS_RELIABILITY = 0x4,IPTOS_MINCOST = 0x2,IPTOS_CE = 0x1,IPTOS_ECT = 0x2,IPTOS_PREC_NETCONTROL = 0xE0,IPTOS_PREC_INTERNETCONTROL = 0xC0,IPTOS_PREC_CRITIC_ECP = 0xA0,IPTOS_PREC_FLASHOVERRIDE = 0x80,IPTOS_PREC_FLASH = 0x60,IPTOS_PREC_IMMEDIATE = 0x40,IPTOS_PREC_PRIORITY = 0x20,IPTOS_PREC_ROUTINE = 0x0,};
enum MACRO_IPTTLDEC {IPTTLDEC = 1,};
enum MACRO_IPV6 {IPV6_SOCKOPT_RESERVED1 = 3,IPV6_UNICAST_HOPS = 4,IPV6_MULTICAST_IF = 9,IPV6_MULTICAST_HOPS = 10,IPV6_MULTICAST_LOOP = 11,IPV6_JOIN_GROUP = 12,IPV6_LEAVE_GROUP = 13,IPV6_PORTRANGE = 14,};
enum MACRO_IPV6CTL {IPV6CTL_FORWARDING = 1,IPV6CTL_SENDREDIRECTS = 2,IPV6CTL_DEFHLIM = 3,IPV6CTL_FORWSRCRT = 5,IPV6CTL_STATS = 6,IPV6CTL_MRTSTATS = 7,IPV6CTL_MRTPROTO = 8,IPV6CTL_MAXFRAGPACKETS = 9,IPV6CTL_SOURCECHECK = 10,IPV6CTL_SOURCECHECK_LOGINT = 11,IPV6CTL_ACCEPT_RTADV = 12,IPV6CTL_KEEPFAITH = 13,IPV6CTL_LOG_INTERVAL = 14,IPV6CTL_HDRNESTLIMIT = 15,IPV6CTL_DAD_COUNT = 16,IPV6CTL_AUTO_FLOWLABEL = 17,IPV6CTL_DEFMCASTHLIM = 18,IPV6CTL_GIF_HLIM = 19,IPV6CTL_KAME_VERSION = 20,IPV6CTL_USE_DEPRECATED = 21,IPV6CTL_RR_PRUNE = 22,IPV6CTL_V6ONLY = 24,IPV6CTL_RTEXPIRE = 25,IPV6CTL_RTMINEXPIRE = 26,IPV6CTL_RTMAXCACHE = 27,IPV6CTL_USETEMPADDR = 32,IPV6CTL_TEMPPLTIME = 33,IPV6CTL_TEMPVLTIME = 34,IPV6CTL_AUTO_LINKLOCAL = 35,IPV6CTL_RIP6STATS = 36,IPV6CTL_MAXID = 37,};
enum MACRO_IPV6PORT {IPV6PORT_RESERVED = 1024,IPV6PORT_ANONMIN = 49152,IPV6PORT_ANONMAX = 65535,IPV6PORT_RESERVEDMIN = 600,IPV6PORT_RESERVEDMAX = 1023,};
enum MACRO_IPV6PROTO {IPV6PROTO_MAXID = 104,};
enum MACRO_IPV6_MAXHLIM {IPV6_MAXHLIM = 255,IPV6_DEFHLIM = 64,IPV6_FRAGTTL = 120,IPV6_HLIMDEC = 1,IPV6_MMTU = 1280,IPV6_MAXPACKET = 65535,};
enum MACRO_IPV6_PKTINFO {IPV6_PKTINFO = 19,IPV6_HOPLIMIT = 20,IPV6_NEXTHOP = 21,IPV6_HOPOPTS = 22,IPV6_DSTOPTS = 23,IPV6_RTHDR = 24,IPV6_PKTOPTIONS = 25,IPV6_CHECKSUM = 26,IPV6_V6ONLY = 27,IPV6_BINDV6ONLY = 27,IPV6_IPSEC_POLICY = 28,IPV6_FAITH = 29,IPV6_FW_ADD = 30,IPV6_FW_DEL = 31,IPV6_FW_FLUSH = 32,IPV6_FW_ZERO = 33,IPV6_FW_GET = 34,IPV6_RTHDR_LOOSE = 0,IPV6_RTHDR_STRICT = 1,IPV6_RTHDR_TYPE_0 = 0,IPV6_DEFAULT_MULTICAST_HOPS = 1,IPV6_DEFAULT_MULTICAST_LOOP = 1,IPV6_PORTRANGE_DEFAULT = 0,IPV6_PORTRANGE_HIGH = 1,IPV6_PORTRANGE_LOW = 2,};
enum MACRO_IPV6_VERSION {IPV6_VERSION = 0x60,IPV6_VERSION_MASK = 0xF0,IPV6_FLOWINFO_MASK = 0xFFFFFFF,IPV6_FLOWLABEL_MASK = 0xFFFFF,};
enum MACRO_IPVERSION {IPVERSION = 4,};
enum MACRO_IP_0 {IP = 244,};
enum MACRO_IP_ADDR {IP_ADDR_TYPE = 1,};
enum MACRO_IP_FW {IP_FW_CURRENT_API_VERSION = 20,};
enum MACRO_IP_FW_MAX {IP_FW_MAX_PORTS = 10,IP_FW_ICMPTYPES_MAX = 128,IP_FW_F_COMMAND = 255,IP_FW_F_DENY = 0,IP_FW_F_REJECT = 1,IP_FW_F_ACCEPT = 2,IP_FW_F_COUNT = 3,IP_FW_F_DIVERT = 4,IP_FW_F_TEE = 5,IP_FW_F_SKIPTO = 6,IP_FW_F_FWD = 7,IP_FW_F_PIPE = 8,IP_FW_F_QUEUE = 9,IP_FW_F_IN = 256,IP_FW_F_OUT = 512,IP_FW_F_IIFACE = 1024,IP_FW_F_OIFACE = 2048,IP_FW_F_PRN = 4096,IP_FW_F_SRNG = 8192,IP_FW_F_DRNG = 16384,IP_FW_F_FRAG = 32768,IP_FW_F_IIFNAME = 65536,IP_FW_F_OIFNAME = 131072,IP_FW_F_INVSRC = 262144,IP_FW_F_INVDST = 524288,IP_FW_F_ICMPBIT = 1048576,IP_FW_F_UID = 2097152,IP_FW_F_RND_MATCH = 8388608,IP_FW_F_SMSK = 16777216,IP_FW_F_DMSK = 33554432,IP_FW_BRIDGED = 67108864,IP_FW_F_KEEP_S = 134217728,IP_FW_F_CHECK_S = 268435456,IP_FW_F_SME = 536870912,IP_FW_F_DME = 1073741824,IP_FW_F_MASK = 2147483647,IP_FW_IF_TCPEST = 32,IP_FW_IF_TCPMSK = 32,};
enum MACRO_IP_FW_REJECT {IP_FW_REJECT_RST = 0x100,IP_FW_IPOPT_LSRR = 0x1,IP_FW_IPOPT_SSRR = 0x2,IP_FW_IPOPT_RR = 0x4,IP_FW_IPOPT_TS = 0x8,IP_FW_TCPOPT_MSS = 0x1,IP_FW_TCPOPT_WINDOW = 0x2,IP_FW_TCPOPT_SACK = 0x4,IP_FW_TCPOPT_TS = 0x8,IP_FW_TCPOPT_CC = 0x10,};
enum MACRO_IP_MSS {IP_MSS = 576,};
enum MACRO_IP_RF {IP_RF = 0x8000,IP_DF = 0x4000,IP_MF = 0x2000,IP_OFFMASK = 0x1FFF,IP_MAXPACKET = 0xFFFF,};
enum MACRO_ITEM {ITEM_THREADS = 0,ITEM_TASKS = 1,ITEM_VM = 2,};
enum MACRO_ITIMER {ITIMER_REAL = 0,ITIMER_VIRTUAL = 1,ITIMER_PROF = 2,};
enum MACRO_InfoTagCnt {InfoTagCnt = 27,};
enum MACRO_JUSTIFY {JUSTIFY_LEFT = 1,JUSTIFY_CENTER = 2,JUSTIFY_RIGHT = 3,};
enum MACRO_KADM {KADM_NO_ERROR = -1783126272,KADM_PRINC_UNKNOWN = -1783126271,KADM_PRINC_EXISTS = -1783126270,KADM_ENOMEM = -1783126269,KADM_BAD_PW = -1783126268,KADM_PROT_ERR = -1783126267,KADM_SECURITY = -1783126266,KADM_EPERM = -1783126265,KADM_UPDATE_FAIL = -1783126264,};
enum MACRO_KADMPLACEHOLD {KADMPLACEHOLD_9 = -1783126263,KADMPLACEHOLD_10 = -1783126262,KADMPLACEHOLD_11 = -1783126261,KADMPLACEHOLD_12 = -1783126260,KADMPLACEHOLD_13 = -1783126259,KADMPLACEHOLD_14 = -1783126258,KADMPLACEHOLD_15 = -1783126257,KADMPLACEHOLD_16 = -1783126256,KADMPLACEHOLD_17 = -1783126255,KADMPLACEHOLD_18 = -1783126254,KADMPLACEHOLD_19 = -1783126253,KADMPLACEHOLD_20 = -1783126252,KADMPLACEHOLD_21 = -1783126251,KADMPLACEHOLD_22 = -1783126250,KADMPLACEHOLD_23 = -1783126249,KADMPLACEHOLD_24 = -1783126248,KADMPLACEHOLD_25 = -1783126247,KADMPLACEHOLD_26 = -1783126246,KADMPLACEHOLD_27 = -1783126245,KADMPLACEHOLD_28 = -1783126244,KADMPLACEHOLD_29 = -1783126243,KADMPLACEHOLD_30 = -1783126242,KADMPLACEHOLD_31 = -1783126241,KADMPLACEHOLD_32 = -1783126240,KADMPLACEHOLD_33 = -1783126239,KADMPLACEHOLD_34 = -1783126238,KADMPLACEHOLD_35 = -1783126237,KADMPLACEHOLD_36 = -1783126236,KADMPLACEHOLD_37 = -1783126235,KADMPLACEHOLD_38 = -1783126234,KADMPLACEHOLD_39 = -1783126233,KADMPLACEHOLD_40 = -1783126232,KADMPLACEHOLD_41 = -1783126231,KADMPLACEHOLD_42 = -1783126230,KADMPLACEHOLD_43 = -1783126229,KADMPLACEHOLD_44 = -1783126228,KADMPLACEHOLD_45 = -1783126227,KADMPLACEHOLD_46 = -1783126226,KADMPLACEHOLD_47 = -1783126225,KADMPLACEHOLD_48 = -1783126224,KADMPLACEHOLD_49 = -1783126223,KADMPLACEHOLD_50 = -1783126222,KADMPLACEHOLD_51 = -1783126221,KADMPLACEHOLD_52 = -1783126220,KADMPLACEHOLD_53 = -1783126219,KADMPLACEHOLD_54 = -1783126218,KADMPLACEHOLD_55 = -1783126217,KADMPLACEHOLD_56 = -1783126216,KADMPLACEHOLD_57 = -1783126215,KADMPLACEHOLD_58 = -1783126214,KADMPLACEHOLD_59 = -1783126213,KADMPLACEHOLD_60 = -1783126212,KADMPLACEHOLD_61 = -1783126211,KADMPLACEHOLD_62 = -1783126210,KADMPLACEHOLD_63 = -1783126209,KADMPLACEHOLD_64 = -1783126208,KADMPLACEHOLD_65 = -1783126207,KADMPLACEHOLD_66 = -1783126206,KADMPLACEHOLD_67 = -1783126205,KADMPLACEHOLD_68 = -1783126204,KADMPLACEHOLD_69 = -1783126203,KADMPLACEHOLD_70 = -1783126202,KADMPLACEHOLD_71 = -1783126201,KADMPLACEHOLD_72 = -1783126200,KADMPLACEHOLD_73 = -1783126199,KADMPLACEHOLD_74 = -1783126198,KADMPLACEHOLD_75 = -1783126197,KADMPLACEHOLD_76 = -1783126196,KADMPLACEHOLD_77 = -1783126195,KADMPLACEHOLD_78 = -1783126194,KADMPLACEHOLD_79 = -1783126193,KADMPLACEHOLD_80 = -1783126192,KADMPLACEHOLD_81 = -1783126191,KADMPLACEHOLD_82 = -1783126190,KADMPLACEHOLD_83 = -1783126189,KADMPLACEHOLD_84 = -1783126188,KADMPLACEHOLD_85 = -1783126187,KADMPLACEHOLD_86 = -1783126186,KADMPLACEHOLD_87 = -1783126185,KADMPLACEHOLD_88 = -1783126184,KADMPLACEHOLD_89 = -1783126183,KADMPLACEHOLD_90 = -1783126182,KADMPLACEHOLD_91 = -1783126181,KADMPLACEHOLD_92 = -1783126180,KADMPLACEHOLD_93 = -1783126179,KADMPLACEHOLD_94 = -1783126178,KADMPLACEHOLD_95 = -1783126177,KADMPLACEHOLD_96 = -1783126176,KADMPLACEHOLD_97 = -1783126175,KADMPLACEHOLD_98 = -1783126174,KADMPLACEHOLD_99 = -1783126173,KADMPLACEHOLD_100 = -1783126172,KADMPLACEHOLD_101 = -1783126171,KADMPLACEHOLD_102 = -1783126170,KADMPLACEHOLD_103 = -1783126169,KADMPLACEHOLD_104 = -1783126168,KADMPLACEHOLD_105 = -1783126167,KADMPLACEHOLD_106 = -1783126166,KADMPLACEHOLD_107 = -1783126165,KADMPLACEHOLD_108 = -1783126164,KADMPLACEHOLD_109 = -1783126163,KADMPLACEHOLD_110 = -1783126162,KADMPLACEHOLD_111 = -1783126161,KADMPLACEHOLD_112 = -1783126160,KADMPLACEHOLD_113 = -1783126159,KADMPLACEHOLD_114 = -1783126158,KADMPLACEHOLD_115 = -1783126157,KADMPLACEHOLD_116 = -1783126156,KADMPLACEHOLD_117 = -1783126155,KADMPLACEHOLD_118 = -1783126154,KADMPLACEHOLD_119 = -1783126153,KADMPLACEHOLD_120 = -1783126152,KADMPLACEHOLD_121 = -1783126151,KADMPLACEHOLD_122 = -1783126150,KADMPLACEHOLD_123 = -1783126149,KADMPLACEHOLD_124 = -1783126148,KADMPLACEHOLD_125 = -1783126147,KADMPLACEHOLD_126 = -1783126146,KADMPLACEHOLD_127 = -1783126145,};
enum MACRO_KADM_RCSID {KADM_RCSID = -1783126144,KADM_NO_REALM = -1783126143,KADM_NO_CRED = -1783126142,KADM_BAD_KEY = -1783126141,KADM_NO_ENCRYPT = -1783126140,KADM_NO_AUTH = -1783126139,KADM_WRONG_REALM = -1783126138,KADM_NO_ROOM = -1783126137,KADM_BAD_VER = -1783126136,KADM_BAD_CHK = -1783126135,KADM_NO_READ = -1783126134,KADM_NO_OPCODE = -1783126133,KADM_NO_HOST = -1783126132,KADM_UNK_HOST = -1783126131,KADM_NO_SERV = -1783126130,KADM_NO_SOCK = -1783126129,KADM_NO_CONN = -1783126128,KADM_NO_HERE = -1783126127,KADM_NO_MAST = -1783126126,KADM_NO_VERI = -1783126125,KADM_INUSE = -1783126124,KADM_UK_SERROR = -1783126123,KADM_UK_RERROR = -1783126122,KADM_UNAUTH = -1783126121,KADM_DATA = -1783126120,KADM_NOENTRY = -1783126119,KADM_NOMEM = -1783126118,KADM_NO_HOSTNAME = -1783126117,KADM_NO_BIND = -1783126116,KADM_LENGTH_ERROR = -1783126115,KADM_ILL_WILDCARD = -1783126114,KADM_DB_INUSE = -1783126113,};
enum MACRO_KB {KB_INTERRUPT = 276,};
enum MACRO_KDC {KDC_OPT_FORWARDABLE = 0x40000000,KDC_OPT_FORWARDED = 0x20000000,KDC_OPT_PROXIABLE = 0x10000000,KDC_OPT_PROXY = 0x8000000,KDC_OPT_ALLOW_POSTDATE = 0x4000000,KDC_OPT_POSTDATED = 0x2000000,KDC_OPT_RENEWABLE = 0x800000,KDC_OPT_REQUEST_ANONYMOUS = 0x20000,KDC_OPT_DISABLE_TRANSITED_CHECK = 0x20,KDC_OPT_RENEWABLE_OK = 0x10,KDC_OPT_ENC_TKT_IN_SKEY = 0x8,KDC_OPT_RENEW = 0x2,KDC_OPT_VALIDATE = 0x1,KDC_TKT_COMMON_MASK = 0x54800000,};
enum MACRO_KDC_NAME {KDC_NAME_EXP = 1,KDC_SERVICE_EXP = 2,KDC_AUTH_EXP = 3,KDC_PKT_VER = 4,KDC_P_MKEY_VER = 5,KDC_S_MKEY_VER = 6,KDC_BYTE_ORDER = 7,KDC_PR_UNKNOWN = 8,KDC_PR_N_UNIQUE = 9,KDC_NULL_KEY = 10,KDC_GEN_ERR = 20,};
enum MACRO_KDC_OK {KDC_OK = 0,GC_OK = 0,RET_OK = 0,MK_AP_OK = 0,RD_AP_OK = 0,GT_PW_OK = 0,SKDC_OK = 0,INTK_OK = 0,AD_OK = 0,};
enum MACRO_KDEBUG {KDEBUG_ENABLE_TRACE = 0x1,KDEBUG_ENABLE_ENTROPY = 0x2,KDEBUG_ENABLE_CHUD = 0x4,};
enum MACRO_KERN {KERN_SUCCESS = 0,KERN_INVALID_ADDRESS = 1,KERN_PROTECTION_FAILURE = 2,KERN_NO_SPACE = 3,KERN_INVALID_ARGUMENT = 4,KERN_FAILURE = 5,KERN_RESOURCE_SHORTAGE = 6,KERN_NOT_RECEIVER = 7,KERN_NO_ACCESS = 8,KERN_MEMORY_FAILURE = 9,KERN_MEMORY_ERROR = 10,KERN_ALREADY_IN_SET = 11,KERN_NOT_IN_SET = 12,KERN_NAME_EXISTS = 13,KERN_ABORTED = 14,KERN_INVALID_NAME = 15,KERN_INVALID_TASK = 16,KERN_INVALID_RIGHT = 17,KERN_INVALID_VALUE = 18,KERN_UREFS_OVERFLOW = 19,KERN_INVALID_CAPABILITY = 20,KERN_RIGHT_EXISTS = 21,KERN_INVALID_HOST = 22,KERN_MEMORY_PRESENT = 23,KERN_MEMORY_DATA_MOVED = 24,KERN_MEMORY_RESTART_COPY = 25,KERN_INVALID_PROCESSOR_SET = 26,KERN_POLICY_LIMIT = 27,KERN_INVALID_POLICY = 28,KERN_INVALID_OBJECT = 29,KERN_ALREADY_WAITING = 30,KERN_DEFAULT_SET = 31,KERN_EXCEPTION_PROTECTED = 32,KERN_INVALID_LEDGER = 33,KERN_INVALID_MEMORY_CONTROL = 34,KERN_INVALID_SECURITY = 35,KERN_NOT_DEPRESSED = 36,KERN_TERMINATED = 37,KERN_LOCK_SET_DESTROYED = 38,KERN_LOCK_UNSTABLE = 39,KERN_LOCK_OWNED = 40,KERN_LOCK_OWNED_SELF = 41,KERN_SEMAPHORE_DESTROYED = 42,KERN_RPC_SERVER_TERMINATED = 43,KERN_RPC_TERMINATE_ORPHAN = 44,KERN_RPC_CONTINUE_ORPHAN = 45,KERN_NOT_SUPPORTED = 46,KERN_NODE_DOWN = 47,KERN_NOT_WAITING = 48,KERN_OPERATION_TIMED_OUT = 49,KERN_RETURN_MAX = 256,};
enum MACRO_KERNEL {KERNEL_STACK_SIZE = 16384,INTSTACK_SIZE = 20480,};
enum MACRO_KERNEL_MAJOR {KERNEL_MAJOR_VERSION = 10,KERNEL_MINOR_VERSION = 0,};
enum MACRO_KERN_OSTYPE {KERN_OSTYPE = 1,KERN_OSRELEASE = 2,KERN_OSREV = 3,KERN_VERSION = 4,KERN_MAXVNODES = 5,KERN_MAXPROC = 6,KERN_MAXFILES = 7,KERN_ARGMAX = 8,KERN_SECURELVL = 9,KERN_HOSTNAME = 10,KERN_HOSTID = 11,KERN_CLOCKRATE = 12,KERN_VNODE = 13,KERN_PROC = 14,KERN_FILE = 15,KERN_PROF = 16,KERN_POSIX1 = 17,KERN_NGROUPS = 18,KERN_JOB_CONTROL = 19,KERN_SAVED_IDS = 20,KERN_BOOTTIME = 21,KERN_NISDOMAINNAME = 22,KERN_DOMAINNAME = 22,KERN_MAXPARTITIONS = 23,KERN_KDEBUG = 24,KERN_UPDATEINTERVAL = 25,KERN_OSRELDATE = 26,KERN_NTP_PLL = 27,KERN_BOOTFILE = 28,KERN_MAXFILESPERPROC = 29,KERN_MAXPROCPERUID = 30,KERN_DUMPDEV = 31,KERN_IPC = 32,KERN_DUMMY = 33,KERN_PS_STRINGS = 34,KERN_USRSTACK = 35,KERN_LOGSIGEXIT = 36,KERN_SYMFILE = 37,KERN_PROCARGS = 38,KERN_PCSAMPLES = 39,KERN_NETBOOT = 40,KERN_PANICINFO = 41,KERN_SYSV = 42,KERN_MAXID = 43,KERN_KDEFLAGS = 1,KERN_KDDFLAGS = 2,KERN_KDENABLE = 3,KERN_KDSETBUF = 4,KERN_KDGETBUF = 5,KERN_KDSETUP = 6,KERN_KDREMOVE = 7,KERN_KDSETREG = 8,KERN_KDGETREG = 9,KERN_KDREADTR = 10,KERN_KDPIDTR = 11,KERN_KDTHRMAP = 12,KERN_KDPIDEX = 14,KERN_KDSETRTCDEC = 15,KERN_KDGETENTROPY = 16,KERN_PCDISABLE = 1,KERN_PCSETBUF = 2,KERN_PCGETBUF = 3,KERN_PCSETUP = 4,KERN_PCREMOVE = 5,KERN_PCREADBUF = 6,KERN_PCSETREG = 7,KERN_PCCOMM = 8,KERN_PANICINFO_MAXSIZE = 1,KERN_PANICINFO_IMAGE16 = 2,KERN_PANICINFO_IMAGE32 = 3,};
enum MACRO_KERN_PROC {KERN_PROC_ALL = 0,KERN_PROC_PID = 1,KERN_PROC_PGRP = 2,KERN_PROC_SESSION = 3,KERN_PROC_TTY = 4,KERN_PROC_UID = 5,KERN_PROC_RUID = 6,};
enum MACRO_KEV {KEV_DL_SUBCLASS = 2,KEV_DL_SIFFLAGS = 1,KEV_DL_SIFMETRICS = 2,KEV_DL_SIFMTU = 3,KEV_DL_SIFPHYS = 4,KEV_DL_SIFMEDIA = 5,KEV_DL_SIFGENERIC = 6,KEV_DL_ADDMULTI = 7,KEV_DL_DELMULTI = 8,KEV_DL_IF_ATTACHED = 9,KEV_DL_IF_DETACHING = 10,KEV_DL_IF_DETACHED = 11,KEV_DL_LINK_OFF = 12,KEV_DL_LINK_ON = 13,KEV_DL_PROTO_ATTACHED = 14,KEV_DL_PROTO_DETACHED = 15,};
enum MACRO_KEVENTS {KEVENTS_ON = 1,};
enum MACRO_KEV_CTL {KEV_CTL_SUBCLASS = 1,KEV_CTL_REGISTERED = 1,KEV_CTL_DEREGISTERED = 2,};
enum MACRO_KEV_SNDSPACE {KEV_SNDSPACE = 4096,KEV_RECVSPACE = 8192,KEV_ANY_VENDOR = 0,KEV_ANY_CLASS = 0,KEV_ANY_SUBCLASS = 0,KEV_VENDOR_APPLE = 1,KEV_NETWORK_CLASS = 1,KEV_IOKIT_CLASS = 2,KEV_SYSTEM_CLASS = 3,};
enum MACRO_KEY {KEY_CODE_YES = 0x100,KEY_MIN = 0x101,KEY_BREAK = 0x101,KEY_SRESET = 0x158,KEY_RESET = 0x159,KEY_RESIZE = 0x19A,KEY_DOWN = 0x102,KEY_BACKSPACE = 0x107,KEY_F0 = 0x108,KEY_DL = 0x148,KEY_DC = 0x14A,KEY_EIC = 0x14C,KEY_CLEAR = 0x14D,KEY_EOS = 0x14E,KEY_EOL = 0x14F,KEY_CTAB = 0x155,KEY_CATAB = 0x156,KEY_ENTER = 0x157,KEY_A1 = 0x15C,KEY_A3 = 0x15D,KEY_B2 = 0x15E,KEY_C1 = 0x15F,KEY_C3 = 0x160,KEY_UP = 0x103,KEY_LEFT = 0x104,KEY_RIGHT = 0x105,KEY_HOME = 0x106,KEY_IL = 0x149,KEY_IC = 0x14B,KEY_SF = 0x150,KEY_SR = 0x151,KEY_NPAGE = 0x152,KEY_PPAGE = 0x153,KEY_STAB = 0x154,KEY_PRINT = 0x15A,KEY_LL = 0x15B,KEY_BTAB = 0x161,KEY_BEG = 0x162,KEY_CANCEL = 0x163,KEY_CLOSE = 0x164,KEY_COMMAND = 0x165,KEY_COPY = 0x166,KEY_CREATE = 0x167,KEY_END = 0x168,KEY_EXIT = 0x169,KEY_FIND = 0x16A,KEY_HELP = 0x16B,KEY_MARK = 0x16C,KEY_MESSAGE = 0x16D,KEY_MOVE = 0x16E,KEY_NEXT = 0x16F,KEY_OPEN = 0x170,KEY_OPTIONS = 0x171,KEY_PREVIOUS = 0x172,KEY_REDO = 0x173,KEY_REFERENCE = 0x174,KEY_REFRESH = 0x175,KEY_REPLACE = 0x176,KEY_RESTART = 0x177,KEY_RESUME = 0x178,KEY_SAVE = 0x179,KEY_SBEG = 0x17A,KEY_SCANCEL = 0x17B,KEY_SCOMMAND = 0x17C,KEY_SCOPY = 0x17D,KEY_SCREATE = 0x17E,KEY_SDC = 0x17F,KEY_SDL = 0x180,KEY_SELECT = 0x181,KEY_SEND = 0x182,KEY_SEOL = 0x183,KEY_SEXIT = 0x184,KEY_SFIND = 0x185,KEY_SHELP = 0x186,KEY_SHOME = 0x187,KEY_SIC = 0x188,KEY_SLEFT = 0x189,KEY_SMESSAGE = 0x18A,KEY_SMOVE = 0x18B,KEY_SNEXT = 0x18C,KEY_SOPTIONS = 0x18D,KEY_SPREVIOUS = 0x18E,KEY_SPRINT = 0x18F,KEY_SREDO = 0x190,KEY_SREPLACE = 0x191,KEY_SRIGHT = 0x192,KEY_SRSUME = 0x193,KEY_SSAVE = 0x194,KEY_SSUSPEND = 0x195,KEY_SUNDO = 0x196,KEY_SUSPEND = 0x197,KEY_UNDO = 0x198,KEY_MOUSE = 0x199,KEY_MAX = 0x1FF,};
enum MACRO_KEY_DIR {KEY_DIR_MASK = 0x80,KEY_DIR_UP = 0x80,KEY_CODE_MASK = 0x7F,KEY_CODE_NULL = 0xFF,};
enum MACRO_KEY_INVALID {KEY_INVALID = 256,};
enum MACRO_KEY_SENDUP {KEY_SENDUP_ONE = 0,KEY_SENDUP_ALL = 1,KEY_SENDUP_REGISTERED = 2,};
enum MACRO_KG {KG_CCACHE_NOMATCH = 39756032,KG_KEYTAB_NOMATCH = 39756033,KG_TGT_MISSING = 39756034,KG_NO_SUBKEY = 39756035,KG_CONTEXT_ESTABLISHED = 39756036,KG_BAD_SIGN_TYPE = 39756037,KG_BAD_LENGTH = 39756038,KG_CTX_INCOMPLETE = 39756039,KG_CONTEXT = 39756040,KG_CRED = 39756041,KG_ENC_DESC = 39756042,KG_BAD_SEQ = 39756043,KG_EMPTY_CCACHE = 39756044,KG_NO_CTYPES = 39756045,};
enum MACRO_KIPBCASTADDR {KIPBCASTADDR = 35,};
enum MACRO_KIPC {KIPC_MAXSOCKBUF = 1,KIPC_SOCKBUF_WASTE = 2,KIPC_SOMAXCONN = 3,KIPC_MAX_LINKHDR = 4,KIPC_MAX_PROTOHDR = 5,KIPC_MAX_HDR = 6,KIPC_MAX_DATALEN = 7,KIPC_MBSTAT = 8,KIPC_NMBCLUSTERS = 9,};
enum MACRO_KIPCORE {KIPCORE = 36,};
enum MACRO_KIPENTRY {KIPENTRY = 37,};
enum MACRO_KIPHOPCOUNT {KIPHOPCOUNT = 38,};
enum MACRO_KIPNETEND {KIPNETEND = 39,};
enum MACRO_KIPNETSTART {KIPNETSTART = 40,};
enum MACRO_KIPNEXTHOP {KIPNEXTHOP = 41,};
enum MACRO_KIPSHARE {KIPSHARE = 42,};
enum MACRO_KIPSTATE {KIPSTATE = 43,};
enum MACRO_KIPTABLE {KIPTABLE = 44,};
enum MACRO_KIPTYPE {KIPTYPE = 45,};
enum MACRO_KLM {KLM_PROG = 100020,KLM_VERS = 1,KLM_TEST = 1,KLM_LOCK = 2,KLM_CANCEL = 3,KLM_UNLOCK = 4,};
enum MACRO_KMOD {KMOD_CNTL_START = 1,KMOD_CNTL_STOP = 2,KMOD_CNTL_RETAIN = 3,KMOD_CNTL_RELEASE = 4,KMOD_CNTL_GET_CMD = 5,KMOD_MAX_NAME = 64,KMOD_RETURN_SUCCESS = 0,KMOD_RETURN_FAILURE = 5,KMOD_INFO_VERSION = 1,KMOD_LOAD_EXTENSION_PACKET = 1,KMOD_LOAD_WITH_DEPENDENCIES_PACKET = 2,KMOD_IOKIT_START_RANGE_PACKET = 4096,KMOD_IOKIT_END_RANGE_PACKET = 8191,};
enum MACRO_KNAME {KNAME_FMT = 81,};
enum MACRO_KOPT {KOPT_DONT_MK_REQ = 0x1,KOPT_DO_MUTUAL = 0x2,KOPT_DONT_CANON = 0x4,};
enum MACRO_KRB {KRB_NEVERDATE = 0xFFFFFFFF,};
enum MACRO_KRB5 {KRB5_KDB_RCSID = -1780008448,KRB5_KDB_INUSE = -1780008447,KRB5_KDB_UK_SERROR = -1780008446,KRB5_KDB_UK_RERROR = -1780008445,KRB5_KDB_UNAUTH = -1780008444,KRB5_KDB_NOENTRY = -1780008443,KRB5_KDB_ILL_WILDCARD = -1780008442,KRB5_KDB_DB_INUSE = -1780008441,KRB5_KDB_DB_CHANGED = -1780008440,KRB5_KDB_TRUNCATED_RECORD = -1780008439,KRB5_KDB_RECURSIVELOCK = -1780008438,KRB5_KDB_NOTLOCKED = -1780008437,KRB5_KDB_BADLOCKMODE = -1780008436,KRB5_KDB_DBNOTINITED = -1780008435,KRB5_KDB_DBINITED = -1780008434,KRB5_KDB_ILLDIRECTION = -1780008433,KRB5_KDB_NOMASTERKEY = -1780008432,KRB5_KDB_BADMASTERKEY = -1780008431,KRB5_KDB_INVALIDKEYSIZE = -1780008430,KRB5_KDB_CANTREAD_STORED = -1780008429,KRB5_KDB_BADSTORED_MKEY = -1780008428,KRB5_KDB_CANTLOCK_DB = -1780008427,KRB5_KDB_DB_CORRUPT = -1780008426,KRB5_KDB_BAD_VERSION = -1780008425,KRB5_KDB_BAD_SALTTYPE = -1780008424,KRB5_KDB_BAD_ENCTYPE = -1780008423,KRB5_KDB_BAD_CREATEFLAGS = -1780008422,KRB5_KDB_NO_PERMITTED_KEY = -1780008421,KRB5_KDB_NO_MATCHING_KEY = -1780008420,};
enum MACRO_KRB5DES {KRB5DES_BAD_KEYPAR = -1765328198,KRB5DES_WEAK_KEY = -1765328197,};
enum MACRO_KRB5KDC {KRB5KDC_ERR_NONE = -1765328384,KRB5KDC_ERR_NAME_EXP = -1765328383,KRB5KDC_ERR_SERVICE_EXP = -1765328382,KRB5KDC_ERR_BAD_PVNO = -1765328381,KRB5KDC_ERR_C_OLD_MAST_KVNO = -1765328380,KRB5KDC_ERR_S_OLD_MAST_KVNO = -1765328379,KRB5KDC_ERR_C_PRINCIPAL_UNKNOWN = -1765328378,KRB5KDC_ERR_S_PRINCIPAL_UNKNOWN = -1765328377,KRB5KDC_ERR_PRINCIPAL_NOT_UNIQUE = -1765328376,KRB5KDC_ERR_NULL_KEY = -1765328375,KRB5KDC_ERR_CANNOT_POSTDATE = -1765328374,KRB5KDC_ERR_NEVER_VALID = -1765328373,KRB5KDC_ERR_POLICY = -1765328372,KRB5KDC_ERR_BADOPTION = -1765328371,KRB5KDC_ERR_ETYPE_NOSUPP = -1765328370,KRB5KDC_ERR_SUMTYPE_NOSUPP = -1765328369,KRB5KDC_ERR_PADATA_TYPE_NOSUPP = -1765328368,KRB5KDC_ERR_TRTYPE_NOSUPP = -1765328367,KRB5KDC_ERR_CLIENT_REVOKED = -1765328366,KRB5KDC_ERR_SERVICE_REVOKED = -1765328365,KRB5KDC_ERR_TGT_REVOKED = -1765328364,KRB5KDC_ERR_CLIENT_NOTYET = -1765328363,KRB5KDC_ERR_SERVICE_NOTYET = -1765328362,KRB5KDC_ERR_KEY_EXP = -1765328361,KRB5KDC_ERR_PREAUTH_FAILED = -1765328360,KRB5KDC_ERR_PREAUTH_REQUIRED = -1765328359,KRB5KDC_ERR_SERVER_NOMATCH = -1765328358,};
enum MACRO_KRB5KRB {KRB5KRB_AP_ERR_BAD_INTEGRITY = -1765328353,KRB5KRB_AP_ERR_TKT_EXPIRED = -1765328352,KRB5KRB_AP_ERR_TKT_NYV = -1765328351,KRB5KRB_AP_ERR_REPEAT = -1765328350,KRB5KRB_AP_ERR_NOT_US = -1765328349,KRB5KRB_AP_ERR_BADMATCH = -1765328348,KRB5KRB_AP_ERR_SKEW = -1765328347,KRB5KRB_AP_ERR_BADADDR = -1765328346,KRB5KRB_AP_ERR_BADVERSION = -1765328345,KRB5KRB_AP_ERR_MSG_TYPE = -1765328344,KRB5KRB_AP_ERR_MODIFIED = -1765328343,KRB5KRB_AP_ERR_BADORDER = -1765328342,KRB5KRB_AP_ERR_ILL_CR_TKT = -1765328341,KRB5KRB_AP_ERR_BADKEYVER = -1765328340,KRB5KRB_AP_ERR_NOKEY = -1765328339,KRB5KRB_AP_ERR_MUT_FAIL = -1765328338,KRB5KRB_AP_ERR_BADDIRECTION = -1765328337,KRB5KRB_AP_ERR_METHOD = -1765328336,KRB5KRB_AP_ERR_BADSEQ = -1765328335,KRB5KRB_AP_ERR_INAPP_CKSUM = -1765328334,};
enum MACRO_KRB5KRB_AP {KRB5KRB_AP_WRONG_PRINC = -1765328240,KRB5KRB_AP_ERR_TKT_INVALID = -1765328239,};
enum MACRO_KRB5KRB_AP_ERR {KRB5KRB_AP_ERR_V4_REPLY = -1765328165,};
enum MACRO_KRB5KRB_ERR {KRB5KRB_ERR_GENERIC = -1765328324,KRB5KRB_ERR_FIELD_TOOLONG = -1765328323,};
enum MACRO_KRB5PLACEHOLD {KRB5PLACEHOLD_27 = -1765328357,KRB5PLACEHOLD_28 = -1765328356,KRB5PLACEHOLD_29 = -1765328355,KRB5PLACEHOLD_30 = -1765328354,};
enum MACRO_KRB5PLACEHOLD_51 {KRB5PLACEHOLD_51 = -1765328333,KRB5PLACEHOLD_52 = -1765328332,KRB5PLACEHOLD_53 = -1765328331,KRB5PLACEHOLD_54 = -1765328330,KRB5PLACEHOLD_55 = -1765328329,KRB5PLACEHOLD_56 = -1765328328,KRB5PLACEHOLD_57 = -1765328327,KRB5PLACEHOLD_58 = -1765328326,KRB5PLACEHOLD_59 = -1765328325,};
enum MACRO_KRB5PLACEHOLD_62 {KRB5PLACEHOLD_62 = -1765328322,KRB5PLACEHOLD_63 = -1765328321,KRB5PLACEHOLD_64 = -1765328320,KRB5PLACEHOLD_65 = -1765328319,KRB5PLACEHOLD_66 = -1765328318,KRB5PLACEHOLD_67 = -1765328317,KRB5PLACEHOLD_68 = -1765328316,KRB5PLACEHOLD_69 = -1765328315,KRB5PLACEHOLD_70 = -1765328314,KRB5PLACEHOLD_71 = -1765328313,KRB5PLACEHOLD_72 = -1765328312,KRB5PLACEHOLD_73 = -1765328311,KRB5PLACEHOLD_74 = -1765328310,KRB5PLACEHOLD_75 = -1765328309,KRB5PLACEHOLD_76 = -1765328308,KRB5PLACEHOLD_77 = -1765328307,KRB5PLACEHOLD_78 = -1765328306,KRB5PLACEHOLD_79 = -1765328305,KRB5PLACEHOLD_80 = -1765328304,KRB5PLACEHOLD_81 = -1765328303,KRB5PLACEHOLD_82 = -1765328302,KRB5PLACEHOLD_83 = -1765328301,KRB5PLACEHOLD_84 = -1765328300,KRB5PLACEHOLD_85 = -1765328299,KRB5PLACEHOLD_86 = -1765328298,KRB5PLACEHOLD_87 = -1765328297,KRB5PLACEHOLD_88 = -1765328296,KRB5PLACEHOLD_89 = -1765328295,KRB5PLACEHOLD_90 = -1765328294,KRB5PLACEHOLD_91 = -1765328293,KRB5PLACEHOLD_92 = -1765328292,KRB5PLACEHOLD_93 = -1765328291,KRB5PLACEHOLD_94 = -1765328290,KRB5PLACEHOLD_95 = -1765328289,KRB5PLACEHOLD_96 = -1765328288,KRB5PLACEHOLD_97 = -1765328287,KRB5PLACEHOLD_98 = -1765328286,KRB5PLACEHOLD_99 = -1765328285,KRB5PLACEHOLD_100 = -1765328284,KRB5PLACEHOLD_101 = -1765328283,KRB5PLACEHOLD_102 = -1765328282,KRB5PLACEHOLD_103 = -1765328281,KRB5PLACEHOLD_104 = -1765328280,KRB5PLACEHOLD_105 = -1765328279,KRB5PLACEHOLD_106 = -1765328278,KRB5PLACEHOLD_107 = -1765328277,KRB5PLACEHOLD_108 = -1765328276,KRB5PLACEHOLD_109 = -1765328275,KRB5PLACEHOLD_110 = -1765328274,KRB5PLACEHOLD_111 = -1765328273,KRB5PLACEHOLD_112 = -1765328272,KRB5PLACEHOLD_113 = -1765328271,KRB5PLACEHOLD_114 = -1765328270,KRB5PLACEHOLD_115 = -1765328269,KRB5PLACEHOLD_116 = -1765328268,KRB5PLACEHOLD_117 = -1765328267,KRB5PLACEHOLD_118 = -1765328266,KRB5PLACEHOLD_119 = -1765328265,KRB5PLACEHOLD_120 = -1765328264,KRB5PLACEHOLD_121 = -1765328263,KRB5PLACEHOLD_122 = -1765328262,KRB5PLACEHOLD_123 = -1765328261,KRB5PLACEHOLD_124 = -1765328260,KRB5PLACEHOLD_125 = -1765328259,KRB5PLACEHOLD_126 = -1765328258,KRB5PLACEHOLD_127 = -1765328257,};
enum MACRO_KRB5_BAD {KRB5_BAD_ENCTYPE = -1765328196,KRB5_BAD_KEYSIZE = -1765328195,KRB5_BAD_MSIZE = -1765328194,KRB5_CC_TYPE_EXISTS = -1765328193,KRB5_KT_TYPE_EXISTS = -1765328192,KRB5_CC_IO = -1765328191,KRB5_FCC_PERM = -1765328190,KRB5_FCC_NOFILE = -1765328189,KRB5_FCC_INTERNAL = -1765328188,KRB5_CC_WRITE = -1765328187,KRB5_CC_NOMEM = -1765328186,KRB5_CC_FORMAT = -1765328185,KRB5_CC_NOT_KTYPE = -1765328184,KRB5_INVALID_FLAGS = -1765328183,KRB5_NO_2ND_TKT = -1765328182,KRB5_NOCREDS_SUPPLIED = -1765328181,KRB5_SENDAUTH_BADAUTHVERS = -1765328180,KRB5_SENDAUTH_BADAPPLVERS = -1765328179,KRB5_SENDAUTH_BADRESPONSE = -1765328178,KRB5_SENDAUTH_REJECTED = -1765328177,KRB5_PREAUTH_BAD_TYPE = -1765328176,KRB5_PREAUTH_NO_KEY = -1765328175,KRB5_PREAUTH_FAILED = -1765328174,KRB5_RCACHE_BADVNO = -1765328173,KRB5_CCACHE_BADVNO = -1765328172,KRB5_KEYTAB_BADVNO = -1765328171,KRB5_PROG_ATYPE_NOSUPP = -1765328170,KRB5_RC_REQUIRED = -1765328169,KRB5_ERR_BAD_HOSTNAME = -1765328168,KRB5_ERR_HOST_REALM_UNKNOWN = -1765328167,KRB5_SNAME_UNSUPP_NAMETYPE = -1765328166,};
enum MACRO_KRB5_DEPRECATED {KRB5_DEPRECATED = 1,KRB5_CCACHE_ACCESSOR_FUNCTIONS = 1,KRB5_KEYTAB_ACCESSOR_FUNCTIONS = 1,KRB5_PRIVATE = 0,};
enum MACRO_KRB5_ERR {KRB5_ERR_RCSID = -1765328256,KRB5_LIBOS_BADLOCKFLAG = -1765328255,KRB5_LIBOS_CANTREADPWD = -1765328254,KRB5_LIBOS_BADPWDMATCH = -1765328253,KRB5_LIBOS_PWDINTR = -1765328252,KRB5_PARSE_ILLCHAR = -1765328251,KRB5_PARSE_MALFORMED = -1765328250,KRB5_CONFIG_CANTOPEN = -1765328249,KRB5_CONFIG_BADFORMAT = -1765328248,KRB5_CONFIG_NOTENUFSPACE = -1765328247,KRB5_BADMSGTYPE = -1765328246,KRB5_CC_BADNAME = -1765328245,KRB5_CC_UNKNOWN_TYPE = -1765328244,KRB5_CC_NOTFOUND = -1765328243,KRB5_CC_END = -1765328242,KRB5_NO_TKT_SUPPLIED = -1765328241,};
enum MACRO_KRB5_GC {KRB5_GC_USER_USER = 1,KRB5_GC_CACHED = 2,KRB5_REALM_BRANCH_CHAR = 46,KRB5_TGS_NAME_SIZE = 6,KRB5_RECVAUTH_SKIP_VERSION = 1,KRB5_RECVAUTH_BADAUTHVERS = 2,KRB5_GET_INIT_CREDS_OPT_TKT_LIFE = 1,KRB5_GET_INIT_CREDS_OPT_RENEW_LIFE = 2,KRB5_GET_INIT_CREDS_OPT_FORWARDABLE = 4,KRB5_GET_INIT_CREDS_OPT_PROXIABLE = 8,KRB5_GET_INIT_CREDS_OPT_ETYPE_LIST = 16,KRB5_GET_INIT_CREDS_OPT_ADDRESS_LIST = 32,KRB5_GET_INIT_CREDS_OPT_PREAUTH_LIST = 64,KRB5_GET_INIT_CREDS_OPT_SALT = 128,KRB5_VERIFY_INIT_CREDS_OPT_AP_REQ_NOFAIL = 1,KRB5_PROMPT_TYPE_PASSWORD = 1,KRB5_PROMPT_TYPE_NEW_PASSWORD = 2,KRB5_PROMPT_TYPE_NEW_PASSWORD_AGAIN = 3,KRB5_PROMPT_TYPE_PREAUTH = 4,};
enum MACRO_KRB5_INT32 {KRB5_INT32_MAX = 2147483647,KRB5_INT32_MIN = -2147483648,KRB5_INT16_MAX = 65535,KRB5_INT16_MIN = -65536,KRB5_NT_UNKNOWN = 0,KRB5_NT_PRINCIPAL = 1,KRB5_NT_SRV_INST = 2,KRB5_NT_SRV_HST = 3,KRB5_NT_SRV_XHST = 4,KRB5_NT_UID = 5,};
enum MACRO_KRB5_KEYUSAGE {KRB5_KEYUSAGE_AS_REQ_PA_ENC_TS = 1,KRB5_KEYUSAGE_KDC_REP_TICKET = 2,KRB5_KEYUSAGE_AS_REP_ENCPART = 3,KRB5_KEYUSAGE_TGS_REQ_AD_SESSKEY = 4,KRB5_KEYUSAGE_TGS_REQ_AD_SUBKEY = 5,KRB5_KEYUSAGE_TGS_REQ_AUTH_CKSUM = 6,KRB5_KEYUSAGE_TGS_REQ_AUTH = 7,KRB5_KEYUSAGE_TGS_REP_ENCPART_SESSKEY = 8,KRB5_KEYUSAGE_TGS_REP_ENCPART_SUBKEY = 9,KRB5_KEYUSAGE_AP_REQ_AUTH_CKSUM = 10,KRB5_KEYUSAGE_AP_REQ_AUTH = 11,KRB5_KEYUSAGE_AP_REP_ENCPART = 12,KRB5_KEYUSAGE_KRB_PRIV_ENCPART = 13,KRB5_KEYUSAGE_KRB_CRED_ENCPART = 14,KRB5_KEYUSAGE_KRB_SAFE_CKSUM = 15,KRB5_KEYUSAGE_APP_DATA_ENCRYPT = 16,KRB5_KEYUSAGE_APP_DATA_CKSUM = 17,KRB5_KEYUSAGE_KRB_ERROR_CKSUM = 18,KRB5_KEYUSAGE_AD_KDCISSUED_CKSUM = 19,KRB5_KEYUSAGE_AD_MTE = 20,KRB5_KEYUSAGE_AD_ITE = 21,KRB5_KEYUSAGE_GSS_TOK_MIC = 22,KRB5_KEYUSAGE_GSS_TOK_WRAP_INTEG = 23,KRB5_KEYUSAGE_GSS_TOK_WRAP_PRIV = 24,};
enum MACRO_KRB5_PRINC {KRB5_PRINC_NOMATCH = -1765328238,KRB5_KDCREP_MODIFIED = -1765328237,KRB5_KDCREP_SKEW = -1765328236,KRB5_IN_TKT_REALM_MISMATCH = -1765328235,KRB5_PROG_ETYPE_NOSUPP = -1765328234,KRB5_PROG_KEYTYPE_NOSUPP = -1765328233,KRB5_WRONG_ETYPE = -1765328232,KRB5_PROG_SUMTYPE_NOSUPP = -1765328231,KRB5_REALM_UNKNOWN = -1765328230,KRB5_SERVICE_UNKNOWN = -1765328229,KRB5_KDC_UNREACH = -1765328228,KRB5_NO_LOCALNAME = -1765328227,KRB5_MUTUAL_FAILED = -1765328226,KRB5_RC_TYPE_EXISTS = -1765328225,KRB5_RC_MALLOC = -1765328224,KRB5_RC_TYPE_NOTFOUND = -1765328223,KRB5_RC_UNKNOWN = -1765328222,KRB5_RC_REPLAY = -1765328221,KRB5_RC_IO = -1765328220,KRB5_RC_NOIO = -1765328219,KRB5_RC_PARSE = -1765328218,KRB5_RC_IO_EOF = -1765328217,KRB5_RC_IO_MALLOC = -1765328216,KRB5_RC_IO_PERM = -1765328215,KRB5_RC_IO_IO = -1765328214,KRB5_RC_IO_UNKNOWN = -1765328213,KRB5_RC_IO_SPACE = -1765328212,KRB5_TRANS_CANTOPEN = -1765328211,KRB5_TRANS_BADFORMAT = -1765328210,KRB5_LNAME_CANTOPEN = -1765328209,KRB5_LNAME_NOTRANS = -1765328208,KRB5_LNAME_BADFORMAT = -1765328207,KRB5_CRYPTO_INTERNAL = -1765328206,KRB5_KT_BADNAME = -1765328205,KRB5_KT_UNKNOWN_TYPE = -1765328204,KRB5_KT_NOTFOUND = -1765328203,KRB5_KT_END = -1765328202,KRB5_KT_NOWRITE = -1765328201,KRB5_KT_IOERR = -1765328200,KRB5_NO_TKT_IN_RLM = -1765328199,};
enum MACRO_KRB5_PVNO {KRB5_PVNO = 5,KRB5_AS_REQ = 10,KRB5_AS_REP = 11,KRB5_TGS_REQ = 12,KRB5_TGS_REP = 13,KRB5_AP_REQ = 14,KRB5_AP_REP = 15,KRB5_SAFE = 20,KRB5_PRIV = 21,KRB5_CRED = 22,KRB5_ERROR = 30,KRB5_LRQ_NONE = 0,KRB5_LRQ_ALL_LAST_TGT = 1,KRB5_LRQ_ONE_LAST_TGT = -1,KRB5_LRQ_ALL_LAST_INITIAL = 2,KRB5_LRQ_ONE_LAST_INITIAL = -2,KRB5_LRQ_ALL_LAST_TGT_ISSUED = 3,KRB5_LRQ_ONE_LAST_TGT_ISSUED = -3,KRB5_LRQ_ALL_LAST_RENEWAL = 4,KRB5_LRQ_ONE_LAST_RENEWAL = -4,KRB5_LRQ_ALL_LAST_REQ = 5,KRB5_LRQ_ONE_LAST_REQ = -5,KRB5_PADATA_NONE = 0,KRB5_PADATA_AP_REQ = 1,KRB5_PADATA_TGS_REQ = 1,KRB5_PADATA_ENC_TIMESTAMP = 2,KRB5_PADATA_PW_SALT = 3,KRB5_PADATA_ENC_UNIX_TIME = 5,KRB5_PADATA_ENC_SANDIA_SECURID = 6,KRB5_PADATA_SESAME = 7,KRB5_PADATA_OSF_DCE = 8,KRB5_CYBERSAFE_SECUREID = 9,KRB5_PADATA_AFS3_SALT = 10,KRB5_PADATA_ETYPE_INFO = 11,KRB5_PADATA_SAM_CHALLENGE = 12,KRB5_PADATA_SAM_RESPONSE = 13,KRB5_SAM_USE_SAD_AS_KEY = -2147483648,KRB5_SAM_SEND_ENCRYPTED_SAD = 1073741824,KRB5_SAM_MUST_PK_ENCRYPT_SAD = 536870912,KRB5_PADATA_DASS = 16,KRB5_DOMAIN_X500_COMPRESS = 1,KRB5_ALTAUTH_ATT_CHALLENGE_RESPONSE = 64,KRB5_AUTHDATA_OSF_DCE = 64,KRB5_AUTHDATA_SESAME = 65,KRB5_KPASSWD_SUCCESS = 0,KRB5_KPASSWD_MALFORMED = 1,KRB5_KPASSWD_HARDERROR = 2,KRB5_KPASSWD_AUTHERROR = 3,KRB5_KPASSWD_SOFTERROR = 4,KRB5_AUTH_CONTEXT_DO_TIME = 1,KRB5_AUTH_CONTEXT_RET_TIME = 2,KRB5_AUTH_CONTEXT_DO_SEQUENCE = 4,KRB5_AUTH_CONTEXT_RET_SEQUENCE = 8,KRB5_AUTH_CONTEXT_PERMIT_ALL = 16,KRB5_AUTH_CONTEXT_GENERATE_LOCAL_ADDR = 1,KRB5_AUTH_CONTEXT_GENERATE_REMOTE_ADDR = 2,KRB5_AUTH_CONTEXT_GENERATE_LOCAL_FULL_ADDR = 4,KRB5_AUTH_CONTEXT_GENERATE_REMOTE_FULL_ADDR = 8,KRB5_TC_MATCH_TIMES = 1,KRB5_TC_MATCH_IS_SKEY = 2,KRB5_TC_MATCH_FLAGS = 4,KRB5_TC_MATCH_TIMES_EXACT = 8,KRB5_TC_MATCH_FLAGS_EXACT = 16,KRB5_TC_MATCH_AUTHDATA = 32,KRB5_TC_MATCH_SRV_NAMEONLY = 64,KRB5_TC_MATCH_2ND_TKT = 128,KRB5_TC_MATCH_KTYPE = 256,KRB5_TC_SUPPORTED_KTYPES = 512,KRB5_TC_OPENCLOSE = 1,};
enum MACRO_KRB5_REALM {KRB5_REALM_CANT_RESOLVE = -1765328164,KRB5_TKT_NOT_FORWARDABLE = -1765328163,KRB5_FWD_BAD_PRINCIPAL = -1765328162,KRB5_GET_IN_TKT_LOOP = -1765328161,KRB5_CONFIG_NODEFREALM = -1765328160,KRB5_SAM_UNSUPPORTED = -1765328159,KRB5_KT_NAME_TOOLONG = -1765328158,KRB5_KT_KVNONOTFOUND = -1765328157,KRB5_APPL_EXPIRED = -1765328156,KRB5_LIB_EXPIRED = -1765328155,KRB5_CHPW_PWDNULL = -1765328154,KRB5_CHPW_FAIL = -1765328153,KRB5_KT_FORMAT = -1765328152,KRB5_NOPERM_ETYPE = -1765328151,KRB5_CONFIG_ETYPE_NOSUPP = -1765328150,KRB5_OBSOLETE_FN = -1765328149,};
enum MACRO_KRBET {KRBET_KSUCCESS = 39525376,KRBET_KDC_NAME_EXP = 39525377,KRBET_KDC_SERVICE_EXP = 39525378,KRBET_KDC_AUTH_EXP = 39525379,KRBET_KDC_PKT_VER = 39525380,KRBET_KDC_P_MKEY_VER = 39525381,KRBET_KDC_S_MKEY_VER = 39525382,KRBET_KDC_BYTE_ORDER = 39525383,KRBET_KDC_PR_UNKNOWN = 39525384,KRBET_KDC_PR_N_UNIQUE = 39525385,KRBET_KDC_NULL_KEY = 39525386,KRBET_KDC_GEN_ERR = 39525396,KRBET_GC_TKFIL = 39525397,KRBET_GC_NOTKT = 39525398,KRBET_MK_AP_TGTEXP = 39525402,KRBET_RD_AP_UNDEC = 39525407,KRBET_RD_AP_EXP = 39525408,KRBET_RD_AP_NYV = 39525409,KRBET_RD_AP_REPEAT = 39525410,KRBET_RD_AP_NOT_US = 39525411,KRBET_RD_AP_INCON = 39525412,KRBET_RD_AP_TIME = 39525413,KRBET_RD_AP_BADD = 39525414,KRBET_RD_AP_VERSION = 39525415,KRBET_RD_AP_MSG_TYPE = 39525416,KRBET_RD_AP_MODIFIED = 39525417,KRBET_RD_AP_ORDER = 39525418,KRBET_RD_AP_UNAUTHOR = 39525419,KRBET_GT_PW_NULL = 39525427,KRBET_GT_PW_BADPW = 39525428,KRBET_GT_PW_PROT = 39525429,KRBET_GT_PW_KDCERR = 39525430,KRBET_GT_PW_NULLTKT = 39525431,KRBET_SKDC_RETRY = 39525432,KRBET_SKDC_CANT = 39525433,KRBET_INTK_W_NOTALL = 39525437,KRBET_INTK_BADPW = 39525438,KRBET_INTK_PROT = 39525439,KRBET_INTK_ERR = 39525446,KRBET_AD_NOTGT = 39525447,KRBET_NO_TKT_FIL = 39525452,KRBET_TKT_FIL_ACC = 39525453,KRBET_TKT_FIL_LCK = 39525454,KRBET_TKT_FIL_FMT = 39525455,KRBET_TKT_FIL_INI = 39525456,KRBET_KNAME_FMT = 39525457,KRBET_MAX_KRB_ERR_TXT = 39525631,};
enum MACRO_KRB_SENDAUTH {KRB_SENDAUTH_VLEN = 8,};
enum MACRO_KSUCCESS {KSUCCESS = 0,KFAILURE = 255,};
enum MACRO_KSYSV {KSYSV_SHMMAX = 1,KSYSV_SHMMIN = 2,KSYSV_SHMMNI = 3,KSYSV_SHMSEG = 4,KSYSV_SHMALL = 5,};
enum MACRO_KTR {KTR_SYSCALL = 1,KTR_SYSRET = 2,KTR_NAMEI = 3,KTR_GENIO = 4,KTR_PSIG = 5,KTR_CSW = 6,KTR_USER_MAXLEN = 2048,KTR_USER = 7,};
enum MACRO_KTRFAC {KTRFAC_MASK = 0xFFFFFF,KTRFAC_SYSCALL = 0x2,KTRFAC_SYSRET = 0x4,KTRFAC_NAMEI = 0x8,KTRFAC_GENIO = 0x10,KTRFAC_PSIG = 0x20,KTRFAC_CSW = 0x40,KTRFAC_USER = 0x80,KTRFAC_ROOT = 0x80000000,KTRFAC_INHERIT = 0x40000000,KTRFAC_ACTIVE = 0x20000000,};
enum MACRO_KTRFLAG {KTRFLAG_DESCEND = 4,};
enum MACRO_KTROP {KTROP_SET = 0,KTROP_CLEAR = 1,KTROP_CLEARFILE = 2,};
enum MACRO_KV5M {KV5M_NONE = -1760647424,KV5M_PRINCIPAL = -1760647423,KV5M_DATA = -1760647422,KV5M_KEYBLOCK = -1760647421,KV5M_CHECKSUM = -1760647420,KV5M_ENCRYPT_BLOCK = -1760647419,KV5M_ENC_DATA = -1760647418,KV5M_CRYPTOSYSTEM_ENTRY = -1760647417,KV5M_CS_TABLE_ENTRY = -1760647416,KV5M_CHECKSUM_ENTRY = -1760647415,KV5M_AUTHDATA = -1760647414,KV5M_TRANSITED = -1760647413,KV5M_ENC_TKT_PART = -1760647412,KV5M_TICKET = -1760647411,KV5M_AUTHENTICATOR = -1760647410,KV5M_TKT_AUTHENT = -1760647409,KV5M_CREDS = -1760647408,KV5M_LAST_REQ_ENTRY = -1760647407,KV5M_PA_DATA = -1760647406,KV5M_KDC_REQ = -1760647405,KV5M_ENC_KDC_REP_PART = -1760647404,KV5M_KDC_REP = -1760647403,KV5M_ERROR = -1760647402,KV5M_AP_REQ = -1760647401,KV5M_AP_REP = -1760647400,KV5M_AP_REP_ENC_PART = -1760647399,KV5M_RESPONSE = -1760647398,KV5M_SAFE = -1760647397,KV5M_PRIV = -1760647396,KV5M_PRIV_ENC_PART = -1760647395,KV5M_CRED = -1760647394,KV5M_CRED_INFO = -1760647393,KV5M_CRED_ENC_PART = -1760647392,KV5M_PWD_DATA = -1760647391,KV5M_ADDRESS = -1760647390,KV5M_KEYTAB_ENTRY = -1760647389,KV5M_CONTEXT = -1760647388,KV5M_OS_CONTEXT = -1760647387,KV5M_ALT_METHOD = -1760647386,KV5M_ETYPE_INFO_ENTRY = -1760647385,KV5M_DB_CONTEXT = -1760647384,KV5M_AUTH_CONTEXT = -1760647383,KV5M_KEYTAB = -1760647382,KV5M_RCACHE = -1760647381,KV5M_CCACHE = -1760647380,KV5M_PREAUTH_OPS = -1760647379,KV5M_SAM_CHALLENGE = -1760647378,KV5M_SAM_KEY = -1760647377,KV5M_ENC_SAM_RESPONSE_ENC = -1760647376,KV5M_SAM_RESPONSE = -1760647375,KV5M_PREDICTED_SAM_RESPONSE = -1760647374,KV5M_PASSWD_PHRASE_ELEMENT = -1760647373,KV5M_GSS_OID = -1760647372,KV5M_GSS_QUEUE = -1760647371,};
enum MACRO_L {L_tmpnam = 1024,};
enum MACRO_LABELOFFSET {LABELOFFSET = 0,MAXPARTITIONS = 8,};
enum MACRO_LABELSECTOR {LABELSECTOR = 2,};
enum MACRO_LAP {LAP_IOC_ADD_ROUTE = 54793,LAP_IOC_GET_ZONE = 54796,LAP_IOC_GET_ROUTE = 54797,LAP_IOC_SNMP_GET_CFG = 54805,LAP_IOC_SNMP_GET_AARP = 54806,LAP_IOC_SNMP_GET_RTMP = 54807,LAP_IOC_SNMP_GET_ZIP = 54808,LAP_IOC_SNMP_GET_DDP = 54809,LAP_IOC_SNMP_GET_NBP = 54810,LAP_IOC_SNMP_GET_PORTS = 54811,};
enum MACRO_LBER : __int64 {LBER_CLASS_UNIVERSAL = 0x0,LBER_CLASS_APPLICATION = 0x40,LBER_CLASS_CONTEXT = 0x80,LBER_CLASS_PRIVATE = 0xC0,LBER_CLASS_MASK = 0xC0,LBER_PRIMITIVE = 0x0,LBER_CONSTRUCTED = 0x20,LBER_ENCODING_MASK = 0x20,LBER_BIG_TAG_MASK = 0x1F,LBER_MORE_TAG_MASK = 0x80,LBER_ERROR = 0xFFFFFFFF,LBER_DEFAULT = 0xFFFFFFFF,LBER_BOOLEAN = 0x1,LBER_INTEGER = 0x2,LBER_BITSTRING = 0x3,LBER_OCTETSTRING = 0x4,LBER_NULL = 0x5,LBER_ENUMERATED = 0xA,LBER_SEQUENCE = 0x30,LBER_SET = 0x31,LBER_USE_DER = 0x1,LBER_OPT_BER_OPTIONS = 0x1,LBER_OPT_BER_DEBUG = 0x2,LBER_OPT_BER_REMAINING_BYTES = 0x3,LBER_OPT_BER_TOTAL_BYTES = 0x4,LBER_OPT_BER_BYTES_TO_WRITE = 0x5,LBER_OPT_DEBUG_LEVEL = 0x2,LBER_OPT_REMAINING_BYTES = 0x3,LBER_OPT_TOTAL_BYTES = 0x4,LBER_OPT_BYTES_TO_WRITE = 0x5,LBER_OPT_LOG_PRINT_FN = 0x8001,LBER_OPT_MEMORY_FNS = 0x8002,LBER_OPT_ERROR_FN = 0x8003,LBER_OPT_LOG_PRINT_FILE = 0x8004,LBER_OPT_MEMORY_INUSE = 0x8005,LBER_OPT_LOG_PROC = 0x8006,LBER_SB_OPT_GET_FD = 0x1,LBER_SB_OPT_SET_FD = 0x2,LBER_SB_OPT_HAS_IO = 0x3,LBER_SB_OPT_SET_NONBLOCK = 0x4,LBER_SB_OPT_GET_SSL = 0x7,LBER_SB_OPT_DATA_READY = 0x8,LBER_SB_OPT_SET_READAHEAD = 0x9,LBER_SB_OPT_DRAIN = 0xA,LBER_SB_OPT_NEEDS_READ = 0xB,LBER_SB_OPT_NEEDS_WRITE = 0xC,LBER_SB_OPT_GET_MAX_INCOMING = 0xD,LBER_SB_OPT_SET_MAX_INCOMING = 0xE,LBER_SB_OPT_OPT_MAX = 0xE,LBER_SBIOD_LEVEL_PROVIDER = 0xA,LBER_SBIOD_LEVEL_TRANSPORT = 0x14,LBER_SBIOD_LEVEL_APPLICATION = 0x1E,LBER_OPT_SOCKBUF_DESC = 0x1000,LBER_OPT_SOCKBUF_OPTIONS = 0x1001,LBER_OPT_SOCKBUF_DEBUG = 0x1002,LBER_OPT_ON = 0x1,LBER_OPT_OFF = 0x0,LBER_OPT_SUCCESS = 0x0,LBER_OPT_ERROR = 0xFFFFFFFFFFFFFFFF,LBER_ERROR_NONE = 0x0,LBER_ERROR_PARAM = 0x1,LBER_ERROR_MEMORY = 0x2,};
enum MACRO_LC {LC_ALL = 0,LC_COLLATE = 1,LC_CTYPE = 2,LC_MONETARY = 3,LC_NUMERIC = 4,LC_TIME = 5,LC_MESSAGES = 6,};
enum MACRO_LCRTBS : __int64 {LCRTBS = 1,LPRTERA = 2,LCRTERA = 4,LTILDE = 8,LMDMBUF = 16,LLITOUT = 32,LTOSTOP = 64,LFLUSHO = 128,LNOHANG = 256,LCRTKIL = 1024,LPASS8 = 2048,LCTLECH = 4096,LPENDIN = 8192,LDECCTQ = 16384,LNOFLSH = 281474976677888,};
enum MACRO_LDAP {LDAP_VENDOR_VERSION = 20100,LDAP_VENDOR_VERSION_MAJOR = 2,LDAP_VENDOR_VERSION_MINOR = 1,LDAP_API_FEATURE_X_OPENLDAP_THREAD_SAFE = 1,LDAP_API_FEATURE_SERVER_SIDE_SORT = 1000,LDAP_API_FEATURE_VIRTUAL_LIST_VIEW = 1000,LDAP_VERSION1 = 1,LDAP_VERSION2 = 2,LDAP_VERSION3 = 3,LDAP_VERSION_MIN = 2,LDAP_VERSION = 2,LDAP_VERSION_MAX = 3,LDAP_API_VERSION = 2004,LDAP_API_FEATURE_X_OPENLDAP = 20100,LDAP_PORT = 389,};
enum MACRO_LDAPS {LDAPS_PORT = 636,};
enum MACRO_LDAP_OPT {LDAP_OPT_API_INFO = 0x0,LDAP_OPT_DESC = 0x1,LDAP_OPT_DEREF = 0x2,LDAP_OPT_SIZELIMIT = 0x3,LDAP_OPT_TIMELIMIT = 0x4,LDAP_OPT_REFERRALS = 0x8,LDAP_OPT_RESTART = 0x9,LDAP_OPT_PROTOCOL_VERSION = 0x11,LDAP_OPT_SERVER_CONTROLS = 0x12,LDAP_OPT_CLIENT_CONTROLS = 0x13,LDAP_OPT_API_FEATURE_INFO = 0x15,LDAP_OPT_HOST_NAME = 0x30,LDAP_OPT_ERROR_NUMBER = 0x31,LDAP_OPT_ERROR_STRING = 0x32,LDAP_OPT_MATCHED_DN = 0x33,LDAP_OPT_PRIVATE_EXTENSION_BASE = 0x4000,LDAP_OPT_DEBUG_LEVEL = 0x5001,LDAP_OPT_TIMEOUT = 0x5002,LDAP_OPT_REFHOPLIMIT = 0x5003,LDAP_OPT_NETWORK_TIMEOUT = 0x5005,LDAP_OPT_URI = 0x5006,LDAP_OPT_X_TLS = 0x6000,LDAP_OPT_X_TLS_CTX = 0x6001,LDAP_OPT_X_TLS_CACERTFILE = 0x6002,LDAP_OPT_X_TLS_CACERTDIR = 0x6003,LDAP_OPT_X_TLS_CERTFILE = 0x6004,LDAP_OPT_X_TLS_KEYFILE = 0x6005,LDAP_OPT_X_TLS_REQUIRE_CERT = 0x6006,LDAP_OPT_X_TLS_CIPHER_SUITE = 0x6008,LDAP_OPT_X_TLS_RANDOM_FILE = 0x6009,LDAP_OPT_X_TLS_NEVER = 0x0,LDAP_OPT_X_TLS_HARD = 0x1,LDAP_OPT_X_TLS_DEMAND = 0x2,LDAP_OPT_X_TLS_ALLOW = 0x3,LDAP_OPT_X_TLS_TRY = 0x4,LDAP_OPT_X_SASL_MECH = 0x6100,LDAP_OPT_X_SASL_REALM = 0x6101,LDAP_OPT_X_SASL_AUTHCID = 0x6102,LDAP_OPT_X_SASL_AUTHZID = 0x6103,LDAP_OPT_X_SASL_SSF = 0x6104,LDAP_OPT_X_SASL_SSF_EXTERNAL = 0x6105,LDAP_OPT_X_SASL_SECPROPS = 0x6106,LDAP_OPT_X_SASL_SSF_MIN = 0x6107,LDAP_OPT_X_SASL_SSF_MAX = 0x6108,LDAP_OPT_X_SASL_MAXBUFSIZE = 0x6109,LDAP_OPT_ON = 0x1,LDAP_OPT_OFF = 0x0,LDAP_OPT_SUCCESS = 0x0,LDAP_OPT_ERROR = 0xFFFFFFFF,LDAP_API_INFO_VERSION = 0x1,LDAP_FEATURE_INFO_VERSION = 0x1,LDAP_TAG_EXOP_MODIFY_PASSWD_ID = 0x80,LDAP_TAG_EXOP_MODIFY_PASSWD_OLD = 0x81,LDAP_TAG_EXOP_MODIFY_PASSWD_NEW = 0x82,LDAP_TAG_EXOP_MODIFY_PASSWD_GEN = 0x80,LDAP_TAG_MESSAGE = 0x30,LDAP_TAG_MSGID = 0x2,LDAP_TAG_LDAPDN = 0x4,LDAP_TAG_LDAPCRED = 0x4,LDAP_TAG_CONTROLS = 0xA0,LDAP_TAG_REFERRAL = 0xA3,LDAP_TAG_NEWSUPERIOR = 0x80,LDAP_TAG_EXOP_REQ_OID = 0x80,LDAP_TAG_EXOP_REQ_VALUE = 0x81,LDAP_TAG_EXOP_RES_OID = 0x8A,LDAP_TAG_EXOP_RES_VALUE = 0x8B,LDAP_TAG_SASL_RES_CREDS = 0x87,LDAP_REQ_BIND = 0x60,LDAP_REQ_UNBIND = 0x42,LDAP_REQ_SEARCH = 0x63,LDAP_REQ_MODIFY = 0x66,LDAP_REQ_ADD = 0x68,LDAP_REQ_DELETE = 0x4A,LDAP_REQ_MODDN = 0x6C,LDAP_REQ_MODRDN = 0x6C,LDAP_REQ_RENAME = 0x6C,LDAP_REQ_COMPARE = 0x6E,LDAP_REQ_ABANDON = 0x50,LDAP_REQ_EXTENDED = 0x77,LDAP_RES_BIND = 0x61,LDAP_RES_SEARCH_ENTRY = 0x64,LDAP_RES_SEARCH_REFERENCE = 0x73,LDAP_RES_SEARCH_RESULT = 0x65,LDAP_RES_MODIFY = 0x67,LDAP_RES_ADD = 0x69,LDAP_RES_DELETE = 0x6B,LDAP_RES_MODDN = 0x6D,LDAP_RES_MODRDN = 0x6D,LDAP_RES_RENAME = 0x6D,LDAP_RES_COMPARE = 0x6F,LDAP_RES_EXTENDED = 0x78,LDAP_RES_EXTENDED_PARTIAL = 0x79,LDAP_RES_ANY = 0xFFFFFFFF,LDAP_RES_UNSOLICITED = 0x0,LDAP_SASL_SIMPLE = 0x0,LDAP_AUTH_NONE = 0x0,LDAP_AUTH_SIMPLE = 0x80,LDAP_AUTH_SASL = 0xA3,LDAP_AUTH_KRBV4 = 0xFF,LDAP_AUTH_KRBV41 = 0x81,LDAP_AUTH_KRBV42 = 0x82,LDAP_FILTER_AND = 0xA0,LDAP_FILTER_OR = 0xA1,LDAP_FILTER_NOT = 0xA2,LDAP_FILTER_EQUALITY = 0xA3,LDAP_FILTER_SUBSTRINGS = 0xA4,LDAP_FILTER_GE = 0xA5,LDAP_FILTER_LE = 0xA6,LDAP_FILTER_PRESENT = 0x87,LDAP_FILTER_APPROX = 0xA8,LDAP_FILTER_EXT = 0xA9,LDAP_FILTER_EXT_OID = 0x81,LDAP_FILTER_EXT_TYPE = 0x82,LDAP_FILTER_EXT_VALUE = 0x83,LDAP_FILTER_EXT_DNATTRS = 0x84,LDAP_SUBSTRING_INITIAL = 0x80,LDAP_SUBSTRING_ANY = 0x81,LDAP_SUBSTRING_FINAL = 0x82,LDAP_SCOPE_DEFAULT = 0xFFFFFFFF,LDAP_SCOPE_BASE = 0x0,LDAP_SCOPE_ONELEVEL = 0x1,LDAP_SCOPE_SUBTREE = 0x2,LDAP_SUCCESS = 0x0,LDAP_OPERATIONS_ERROR = 0x1,LDAP_PROTOCOL_ERROR = 0x2,LDAP_TIMELIMIT_EXCEEDED = 0x3,LDAP_SIZELIMIT_EXCEEDED = 0x4,LDAP_COMPARE_FALSE = 0x5,LDAP_COMPARE_TRUE = 0x6,LDAP_AUTH_METHOD_NOT_SUPPORTED = 0x7,LDAP_STRONG_AUTH_NOT_SUPPORTED = 0x7,LDAP_STRONG_AUTH_REQUIRED = 0x8,LDAP_PARTIAL_RESULTS = 0x9,LDAP_REFERRAL = 0xA,LDAP_ADMINLIMIT_EXCEEDED = 0xB,LDAP_UNAVAILABLE_CRITICAL_EXTENSION = 0xC,LDAP_CONFIDENTIALITY_REQUIRED = 0xD,LDAP_SASL_BIND_IN_PROGRESS = 0xE,LDAP_NO_SUCH_ATTRIBUTE = 0x10,LDAP_UNDEFINED_TYPE = 0x11,LDAP_INAPPROPRIATE_MATCHING = 0x12,LDAP_CONSTRAINT_VIOLATION = 0x13,LDAP_TYPE_OR_VALUE_EXISTS = 0x14,LDAP_INVALID_SYNTAX = 0x15,LDAP_NO_SUCH_OBJECT = 0x20,LDAP_ALIAS_PROBLEM = 0x21,LDAP_INVALID_DN_SYNTAX = 0x22,LDAP_IS_LEAF = 0x23,LDAP_ALIAS_DEREF_PROBLEM = 0x24,LDAP_INAPPROPRIATE_AUTH = 0x30,LDAP_INVALID_CREDENTIALS = 0x31,LDAP_INSUFFICIENT_ACCESS = 0x32,LDAP_BUSY = 0x33,LDAP_UNAVAILABLE = 0x34,LDAP_UNWILLING_TO_PERFORM = 0x35,LDAP_LOOP_DETECT = 0x36,LDAP_NAMING_VIOLATION = 0x40,LDAP_OBJECT_CLASS_VIOLATION = 0x41,LDAP_NOT_ALLOWED_ON_NONLEAF = 0x42,LDAP_NOT_ALLOWED_ON_RDN = 0x43,LDAP_ALREADY_EXISTS = 0x44,LDAP_NO_OBJECT_CLASS_MODS = 0x45,LDAP_RESULTS_TOO_LARGE = 0x46,LDAP_AFFECTS_MULTIPLE_DSAS = 0x47,LDAP_OTHER = 0x50,LDAP_SERVER_DOWN = 0x51,LDAP_LOCAL_ERROR = 0x52,LDAP_ENCODING_ERROR = 0x53,LDAP_DECODING_ERROR = 0x54,LDAP_TIMEOUT = 0x55,LDAP_AUTH_UNKNOWN = 0x56,LDAP_FILTER_ERROR = 0x57,LDAP_USER_CANCELLED = 0x58,LDAP_PARAM_ERROR = 0x59,LDAP_NO_MEMORY = 0x5A,LDAP_CONNECT_ERROR = 0x5B,LDAP_NOT_SUPPORTED = 0x5C,LDAP_CONTROL_NOT_FOUND = 0x5D,LDAP_NO_RESULTS_RETURNED = 0x5E,LDAP_MORE_RESULTS_TO_RETURN = 0x5F,LDAP_CLIENT_LOOP = 0x60,LDAP_REFERRAL_LIMIT_EXCEEDED = 0x61,LDAP_MOD_ADD = 0x0,LDAP_MOD_DELETE = 0x1,LDAP_MOD_REPLACE = 0x2,LDAP_MOD_BVALUES = 0x80,LDAP_FILT_MAXSIZ = 0x400,LDAP_DEREF_NEVER = 0x0,LDAP_DEREF_SEARCHING = 0x1,LDAP_DEREF_FINDING = 0x2,LDAP_DEREF_ALWAYS = 0x3,LDAP_NO_LIMIT = 0x0,LDAP_MSG_ONE = 0x0,LDAP_MSG_ALL = 0x1,LDAP_MSG_RECEIVED = 0x2,LDAP_URL_SUCCESS = 0x0,LDAP_URL_ERR_MEM = 0x1,LDAP_URL_ERR_PARAM = 0x2,LDAP_URL_ERR_BADSCHEME = 0x3,LDAP_URL_ERR_BADENCLOSURE = 0x4,LDAP_URL_ERR_BADURL = 0x5,LDAP_URL_ERR_BADHOST = 0x6,LDAP_URL_ERR_BADATTRS = 0x7,LDAP_URL_ERR_BADSCOPE = 0x8,LDAP_URL_ERR_BADFILTER = 0x9,LDAP_URL_ERR_BADEXTS = 0xA,LDAP_SASL_AUTOMATIC = 0x0,LDAP_SASL_INTERACTIVE = 0x1,LDAP_SASL_QUIET = 0x2,LDAP_AVA_STRING = 0x0,LDAP_AVA_BINARY = 0x1,LDAP_AVA_NONPRINTABLE = 0x2,LDAP_DN_FORMAT_LDAP = 0x0,LDAP_DN_FORMAT_LDAPV3 = 0x10,LDAP_DN_FORMAT_LDAPV2 = 0x20,LDAP_DN_FORMAT_DCE = 0x30,LDAP_DN_FORMAT_UFN = 0x40,LDAP_DN_FORMAT_AD_CANONICAL = 0x50,LDAP_DN_FORMAT_LBER = 0xF0,LDAP_DN_FORMAT_MASK = 0xF0,LDAP_DN_PRETTY = 0x100,LDAP_DN_SKIP = 0x200,LDAP_DN_P_NOLEADTRAILSPACES = 0x1000,LDAP_DN_P_NOSPACEAFTERRDN = 0x2000,LDAP_DN_PEDANTIC = 0xF000,};
enum MACRO_LDAP_SCHERR {LDAP_SCHERR_OUTOFMEM = 1,LDAP_SCHERR_UNEXPTOKEN = 2,LDAP_SCHERR_NOLEFTPAREN = 3,LDAP_SCHERR_NORIGHTPAREN = 4,LDAP_SCHERR_NODIGIT = 5,LDAP_SCHERR_BADNAME = 6,LDAP_SCHERR_BADDESC = 7,LDAP_SCHERR_BADSUP = 8,LDAP_SCHERR_DUPOPT = 9,LDAP_SCHERR_EMPTY = 10,LDAP_SCHEMA_NO = 0,LDAP_SCHEMA_YES = 1,LDAP_SCHEMA_USER_APPLICATIONS = 0,LDAP_SCHEMA_DIRECTORY_OPERATION = 1,LDAP_SCHEMA_DISTRIBUTED_OPERATION = 2,LDAP_SCHEMA_DSA_OPERATION = 3,LDAP_SCHEMA_ABSTRACT = 0,LDAP_SCHEMA_STRUCTURAL = 1,LDAP_SCHEMA_AUXILIARY = 2,LDAP_SCHEMA_ALLOW_NONE = 0,LDAP_SCHEMA_ALLOW_NO_OID = 1,LDAP_SCHEMA_ALLOW_QUOTED = 2,LDAP_SCHEMA_ALLOW_DESCR = 4,LDAP_SCHEMA_ALLOW_DESCR_PREFIX = 8,LDAP_SCHEMA_ALLOW_OID_MACRO = 16,LDAP_SCHEMA_ALLOW_ALL = 31,LDAP_SCHEMA_SKIP = 128,LDAP_UCS4_INVALID = -2147483648,};
enum MACRO_LEAVE {LEAVE_INVITE = 0,};
enum MACRO_LEDGER {LEDGER_N_ITEMS = 3,LEDGER_UNLIMITED = 0,};
enum MACRO_LFLOW {LFLOW_OFF = 0,LFLOW_ON = 1,LFLOW_RESTART_ANY = 2,LFLOW_RESTART_XON = 3,};
enum MACRO_LIBCURL {LIBCURL_VERSION_NUM = 0x70702,};
enum MACRO_LIBEDIT {LIBEDIT_MAJOR = 2,LIBEDIT_MINOR = 6,};
enum MACRO_LIM {LIM_NORAISE = 0,LIM_CPU = 1,LIM_FSIZE = 2,LIM_DATA = 3,LIM_STACK = 4,LIM_CORE = 5,LIM_MAXRSS = 6,};
enum MACRO_LK {LK_TYPE_MASK = 0xF,LK_SHARED = 0x1,LK_EXCLUSIVE = 0x2,LK_UPGRADE = 0x3,LK_EXCLUPGRADE = 0x4,LK_DOWNGRADE = 0x5,LK_RELEASE = 0x6,LK_DRAIN = 0x7,LK_EXTFLG_MASK = 0x70,LK_NOWAIT = 0x10,LK_SLEEPFAIL = 0x20,LK_CANRECURSE = 0x40,LK_REENABLE = 0x80,LK_WANT_UPGRADE = 0x100,LK_WANT_EXCL = 0x200,LK_HAVE_EXCL = 0x400,LK_WAITDRAIN = 0x800,LK_DRAINING = 0x4000,LK_DRAINED = 0x8000,LK_INTERLOCK = 0x10000,LK_RETRY = 0x20000,LK_KERNPROC = 0xFFFFFFFE,LK_NOPROC = 0xFFFFFFFF,};
enum MACRO_LLAPCOLLISIONS {LLAPCOLLISIONS = 46,};
enum MACRO_LLAPDEFERS {LLAPDEFERS = 47,};
enum MACRO_LLAPENTRY {LLAPENTRY = 48,};
enum MACRO_LLAPFCSERRORS {LLAPFCSERRORS = 49,};
enum MACRO_LLAPIFINDEX {LLAPIFINDEX = 50,};
enum MACRO_LLAPINERRORS {LLAPINERRORS = 51,};
enum MACRO_LLAPINLENGTHERRORS {LLAPINLENGTHERRORS = 52,};
enum MACRO_LLAPINNOHANDLERS {LLAPINNOHANDLERS = 53,};
enum MACRO_LLAPINPKTS {LLAPINPKTS = 54,};
enum MACRO_LLAPNODATAERRORS {LLAPNODATAERRORS = 55,};
enum MACRO_LLAPOUTPKTS {LLAPOUTPKTS = 56,};
enum MACRO_LLAPRANDOMCTSERRORS {LLAPRANDOMCTSERRORS = 57,};
enum MACRO_LLC {LLC_ISFRAMELEN = 4,LLC_UFRAMELEN = 3,LLC_FRMRLEN = 7,LLC_UI = 3,LLC_UI_P = 19,LLC_DISC = 67,LLC_DISC_P = 83,LLC_UA = 99,LLC_UA_P = 115,LLC_TEST = 227,LLC_TEST_P = 243,LLC_FRMR = 135,LLC_FRMR_P = 151,LLC_DM = 15,LLC_DM_P = 31,LLC_XID = 175,LLC_XID_P = 191,LLC_SABME = 111,LLC_SABME_P = 127,LLC_RR = 1,LLC_RNR = 5,LLC_REJ = 9,LLC_INFO = 0,LLC_X25_LSAP = 126,LLC_SNAP_LSAP = 170,LLC_ISO_LSAP = 254,};
enum MACRO_LLONG : __int64 {LLONG_MIN = 0x8000000000000000,};
enum MACRO_LM {LM_MODE = 1,LM_FORWARDMASK = 2,LM_SLC = 3,};
enum MACRO_LM_MAXSTRLEN {LM_MAXSTRLEN = 1024,};
enum MACRO_LOAD {LOAD_SCALE = 1000,};
enum MACRO_LOCALDOMAINPARTS {LOCALDOMAINPARTS = 2,};
enum MACRO_LOCK {LOCK_SH = 0x1,LOCK_EX = 0x2,LOCK_NB = 0x4,LOCK_UN = 0x8,};
enum MACRO_LOG {LOG_EMERG = 0,LOG_ALERT = 1,LOG_CRIT = 2,LOG_ERR = 3,LOG_WARNING = 4,LOG_NOTICE = 5,LOG_INFO = 6,LOG_DEBUG = 7,LOG_PRIMASK = 7,LOG_KERN = 0,LOG_USER = 8,LOG_MAIL = 16,LOG_DAEMON = 24,LOG_AUTH = 32,LOG_SYSLOG = 40,LOG_LPR = 48,LOG_NEWS = 56,LOG_UUCP = 64,LOG_CRON = 72,LOG_AUTHPRIV = 80,LOG_FTP = 88,LOG_NETINFO = 96,LOG_REMOTEAUTH = 104,LOG_LOCAL0 = 128,LOG_LOCAL1 = 136,LOG_LOCAL2 = 144,LOG_LOCAL3 = 152,LOG_LOCAL4 = 160,LOG_LOCAL5 = 168,LOG_LOCAL6 = 176,LOG_LOCAL7 = 184,LOG_NFACILITIES = 24,LOG_FACMASK = 1016,LOG_PID = 1,LOG_CONS = 2,LOG_ODELAY = 4,LOG_NDELAY = 8,LOG_NOWAIT = 16,LOG_PERROR = 32,};
enum MACRO_LONG {LONG_MIN = -2147483648,LONG_MAX = 2147483647,};
enum MACRO_LONG_MAX : __int64 {LONG_LONG_MAX = 9223372036854775807,ULONG_LONG_MAX = -1,ARG_MAX = 65536,CHILD_MAX = 100,GID_MAX = 2147483647,LINK_MAX = 32767,};
enum MACRO_LOOK {LOOK_UP = 1,};
enum MACRO_LR {LR_TYPE_THIS_SERVER_ONLY = 0x8000,LR_TYPE_INTERPRETATION_MASK = 0x7FFF,};
enum MACRO_LS {LS_PRINT_NEVER = 5,LS_PRINT_LOG = 3,LS_PRINT_ALWAYS = 0,};
enum MACRO_L_SET {L_SET = 0,L_INCR = 1,L_XTND = 2,};
enum MACRO_L_cuserid {L_cuserid = 9,L_ctermid = 1024,};
enum MACRO_M {M_WAITOK = 0x0,M_NOWAIT = 0x1,M_FREE = 0x0,M_MBUF = 0x1,M_DEVBUF = 0x2,M_SOCKET = 0x3,M_PCB = 0x4,M_RTABLE = 0x5,M_HTABLE = 0x6,M_FTABLE = 0x7,M_ZOMBIE = 0x8,M_IFADDR = 0x9,M_SOOPTS = 0xA,M_SONAME = 0xB,M_NAMEI = 0xC,M_GPROF = 0xD,M_IOCTLOPS = 0xE,M_MAPMEM = 0xF,M_CRED = 0x10,M_PGRP = 0x11,M_SESSION = 0x12,M_IOV = 0x13,M_MOUNT = 0x14,M_FHANDLE = 0x15,M_NFSREQ = 0x16,M_NFSMNT = 0x17,M_NFSNODE = 0x18,M_VNODE = 0x19,M_CACHE = 0x1A,M_DQUOT = 0x1B,M_UFSMNT = 0x1C,M_SHM = 0x1D,M_VMMAP = 0x1E,M_VMMAPENT = 0x1F,M_VMOBJ = 0x20,M_VMOBJHASH = 0x21,M_VMPMAP = 0x22,M_VMPVENT = 0x23,M_VMPAGER = 0x24,M_VMPGDATA = 0x25,M_FILE = 0x26,M_FILEDESC = 0x27,M_LOCKF = 0x28,M_PROC = 0x29,M_SUBPROC = 0x2A,M_SEGMENT = 0x2B,M_LFSNODE = 0x2C,M_FFSNODE = 0x2D,M_MFSNODE = 0x2E,M_NQLEASE = 0x2F,M_NQMHOST = 0x30,M_NETADDR = 0x31,M_NFSSVC = 0x32,M_NFSUID = 0x33,M_NFSD = 0x34,M_IPMOPTS = 0x35,M_IPMADDR = 0x36,M_IFMADDR = 0x37,M_MRTABLE = 0x38,M_ISOFSMNT = 0x39,M_ISOFSNODE = 0x3A,M_NFSRVDESC = 0x3B,M_NFSDIROFF = 0x3C,M_NFSBIGFH = 0x3D,M_MSDOSFSMNT = 0x3E,M_MSDOSFSFAT = 0x3F,M_MSDOSFSNODE = 0x40,M_TTYS = 0x41,M_EXEC = 0x42,M_MISCFSMNT = 0x43,M_MISCFSNODE = 0x44,M_ADOSFSMNT = 0x45,M_ADOSFSNODE = 0x46,M_ANODE = 0x47,M_BUFHDR = 0x48,M_OFILETABL = 0x49,M_MCLUST = 0x4A,M_HFSMNT = 0x4B,M_HFSNODE = 0x4C,M_HFSFORK = 0x4D,M_VOLFSMNT = 0x4E,M_VOLFSNODE = 0x4F,M_TEMP = 0x50,M_KTRACE = 0x50,M_SECA = 0x51,M_DEVFS = 0x52,M_IPFW = 0x53,M_UDFNODE = 0x54,M_UDFMNT = 0x55,M_IP6NDP = 0x56,M_IP6OPT = 0x57,M_IP6MISC = 0x58,M_TSEGQ = 0x59,M_IGMP = 0x5A,M_LAST = 0x5B,M_EXT = 0x1,M_PKTHDR = 0x2,M_EOR = 0x4,M_PROTO1 = 0x8,M_PROTO2 = 0x10,M_PROTO3 = 0x20,M_PROTO4 = 0x40,M_PROTO5 = 0x80,M_BCAST = 0x100,M_MCAST = 0x200,M_FRAG = 0x400,M_FIRSTFRAG = 0x800,M_LASTFRAG = 0x1000,M_COPYFLAGS = 0x7FE,};
enum MACRO_MAC {MAC_OS_X_VERSION_10_0 = 1000,MAC_OS_X_VERSION_10_1 = 1010,MAC_OS_X_VERSION_10_2 = 1020,MAC_OS_X_VERSION_10_3 = 1030,MAC_OS_X_VERSION_MIN_REQUIRED = 1000,MAC_OS_X_VERSION_MAX_ALLOWED = 1020,};
enum MACRO_MACH : __int64 {MACH_PORT_NULL = 0,MACH_PORT_DEAD = 4294967295,MACH_PORT_RIGHT_SEND = 0,MACH_PORT_RIGHT_RECEIVE = 1,MACH_PORT_RIGHT_SEND_ONCE = 2,MACH_PORT_RIGHT_PORT_SET = 3,MACH_PORT_RIGHT_DEAD_NAME = 4,MACH_PORT_RIGHT_NUMBER = 5,MACH_PORT_TYPE_NONE = 0,MACH_PORT_TYPE_SEND = 65536,MACH_PORT_TYPE_RECEIVE = 131072,MACH_PORT_TYPE_SEND_ONCE = 262144,MACH_PORT_TYPE_PORT_SET = 524288,MACH_PORT_TYPE_DEAD_NAME = 1048576,MACH_PORT_TYPE_SEND_RECEIVE = 196608,MACH_PORT_TYPE_SEND_RIGHTS = 327680,MACH_PORT_TYPE_PORT_RIGHTS = 458752,MACH_PORT_TYPE_PORT_OR_DEAD = 1507328,MACH_PORT_TYPE_ALL_RIGHTS = 2031616,MACH_PORT_TYPE_DNREQUEST = -2147483648,MACH_PORT_SRIGHTS_NONE = 0,MACH_PORT_SRIGHTS_PRESENT = 1,MACH_PORT_QLIMIT_DEFAULT = 5,MACH_PORT_QLIMIT_MAX = 16,MACH_PORT_LIMITS_INFO = 1,MACH_PORT_RECEIVE_STATUS = 2,MACH_PORT_DNREQUESTS_SIZE = 3,MACH_PORT_DNREQUESTS_SIZE_COUNT = 1,};
enum MACRO_MACHINE {MACHINE_THREAD_STATE = 1,};
enum MACRO_MACHINE_UNKNOWN {MACHINE_UNKNOWN = 3,};
enum MACRO_MACH_KDB {MACH_KDB = 0,};
enum MACRO_MACH_MSG : __int64 {MACH_MSG_TIMEOUT_NONE = 0,MACH_MSGH_BITS_ZERO = 0,MACH_MSGH_BITS_REMOTE_MASK = 255,MACH_MSGH_BITS_LOCAL_MASK = 65280,MACH_MSGH_BITS_COMPLEX = -2147483648,MACH_MSGH_BITS_USER = -2147418113,MACH_MSGH_BITS_CIRCULAR = 1073741824,MACH_MSGH_BITS_USED = -1073676289,MACH_MSGH_BITS_PORTS_MASK = 65535,MACH_MSG_SIZE_NULL = 0,MACH_MSG_TYPE_MOVE_RECEIVE = 16,MACH_MSG_TYPE_MOVE_SEND = 17,MACH_MSG_TYPE_MOVE_SEND_ONCE = 18,MACH_MSG_TYPE_COPY_SEND = 19,MACH_MSG_TYPE_MAKE_SEND = 20,MACH_MSG_TYPE_MAKE_SEND_ONCE = 21,MACH_MSG_TYPE_COPY_RECEIVE = 22,MACH_MSG_PHYSICAL_COPY = 0,MACH_MSG_VIRTUAL_COPY = 1,MACH_MSG_ALLOCATE = 2,MACH_MSG_OVERWRITE = 3,MACH_MSG_PORT_DESCRIPTOR = 0,MACH_MSG_OOL_DESCRIPTOR = 1,MACH_MSG_OOL_PORTS_DESCRIPTOR = 2,MACH_MSG_OOL_VOLATILE_DESCRIPTOR = 3,MACH_MSG_BODY_NULL = 0,MACH_MSG_DESCRIPTOR_NULL = 0,MACH_MSG_NULL = 0,MACH_MSG_TRAILER_FORMAT_0 = 0,MACH_MSG_SIZE_MAX = 4294967295,MACH_MSGH_KIND_NORMAL = 0,MACH_MSGH_KIND_NOTIFICATION = 1,MACH_MSG_TYPE_PORT_NONE = 0,MACH_MSG_TYPE_PORT_NAME = 15,MACH_MSG_TYPE_PORT_RECEIVE = 16,MACH_MSG_TYPE_PORT_SEND = 17,MACH_MSG_TYPE_PORT_SEND_ONCE = 18,MACH_MSG_TYPE_LAST = 22,MACH_MSG_TYPE_POLYMORPHIC = 4294967295,MACH_MSG_OPTION_NONE = 0,MACH_SEND_MSG = 1,MACH_RCV_MSG = 2,MACH_RCV_LARGE = 4,MACH_SEND_TIMEOUT = 16,MACH_SEND_INTERRUPT = 64,MACH_SEND_CANCEL = 128,MACH_SEND_ALWAYS = 65536,MACH_SEND_TRAILER = 131072,MACH_RCV_TIMEOUT = 256,MACH_RCV_NOTIFY = 512,MACH_RCV_INTERRUPT = 1024,MACH_RCV_OVERWRITE = 4096,MACH_RCV_TRAILER_NULL = 0,MACH_RCV_TRAILER_SEQNO = 1,MACH_RCV_TRAILER_SENDER = 2,MACH_RCV_TRAILER_MASK = 4278190080,MACH_MSG_SUCCESS = 0,MACH_MSG_MASK = 15872,MACH_MSG_IPC_SPACE = 8192,MACH_MSG_VM_SPACE = 4096,MACH_MSG_IPC_KERNEL = 2048,MACH_MSG_VM_KERNEL = 1024,MACH_SEND_IN_PROGRESS = 268435457,MACH_SEND_INVALID_DATA = 268435458,MACH_SEND_INVALID_DEST = 268435459,MACH_SEND_TIMED_OUT = 268435460,MACH_SEND_INTERRUPTED = 268435463,MACH_SEND_MSG_TOO_SMALL = 268435464,MACH_SEND_INVALID_REPLY = 268435465,MACH_SEND_INVALID_RIGHT = 268435466,MACH_SEND_INVALID_NOTIFY = 268435467,MACH_SEND_INVALID_MEMORY = 268435468,MACH_SEND_NO_BUFFER = 268435469,MACH_SEND_TOO_LARGE = 268435470,MACH_SEND_INVALID_TYPE = 268435471,MACH_SEND_INVALID_HEADER = 268435472,MACH_SEND_INVALID_TRAILER = 268435473,MACH_SEND_INVALID_RT_OOL_SIZE = 268435477,MACH_RCV_IN_PROGRESS = 268451841,MACH_RCV_INVALID_NAME = 268451842,MACH_RCV_TIMED_OUT = 268451843,MACH_RCV_TOO_LARGE = 268451844,MACH_RCV_INTERRUPTED = 268451845,MACH_RCV_PORT_CHANGED = 268451846,MACH_RCV_INVALID_NOTIFY = 268451847,MACH_RCV_INVALID_DATA = 268451848,MACH_RCV_PORT_DIED = 268451849,MACH_RCV_IN_SET = 268451850,MACH_RCV_HEADER_ERROR = 268451851,MACH_RCV_BODY_ERROR = 268451852,MACH_RCV_INVALID_TYPE = 268451853,MACH_RCV_SCATTER_SMALL = 268451854,MACH_RCV_INVALID_TRAILER = 268451855,MACH_RCV_IN_PROGRESS_TIMED = 268451857,MACH_NOTIFY_FIRST = 64,MACH_NOTIFY_PORT_DELETED = 65,MACH_NOTIFY_PORT_DESTROYED = 69,MACH_NOTIFY_NO_SENDERS = 70,MACH_NOTIFY_SEND_ONCE = 71,MACH_NOTIFY_DEAD_NAME = 72,MACH_NOTIFY_LAST = 77,};
enum MACRO_MACH_PORTS {MACH_PORTS_SLOTS_USED = 3,};
enum MACRO_MACH_SCHED {MACH_SCHED = 0x0,MACH_STACK_ATTACH = 0x1,MACH_STACK_HANDOFF = 0x2,MACH_CALL_CONT = 0x3,MACH_CALLOUT = 0x4,MACH_STACK_DETACH = 0x5,MACH_MAKE_RUNNABLE = 0x6,MACH_PROMOTE = 0x7,MACH_DEMOTE = 0x8,};
enum MACRO_MADV {MADV_NORMAL = 0,MADV_RANDOM = 1,MADV_SEQUENTIAL = 2,MADV_WILLNEED = 3,MADV_DONTNEED = 4,MADV_FREE = 5,};
enum MACRO_MAP {MAP_SHARED = 0x1,MAP_PRIVATE = 0x2,MAP_COPY = 0x2,MAP_FIXED = 0x10,MAP_RENAME = 0x20,MAP_NORESERVE = 0x40,MAP_INHERIT = 0x80,MAP_NOEXTEND = 0x100,MAP_HASSEMAPHORE = 0x200,MAP_FAILED = 0xFFFFFFFF,};
enum MACRO_MAP_FILE {MAP_FILE = 0x0,MAP_ANON = 0x1000,};
enum MACRO_MATH {MATH_ERRNO = 1,MATH_ERREXCEPT = 2,};
enum MACRO_MATTR {MATTR_CACHE = 1,MATTR_MIGRATE = 2,MATTR_REPLICATE = 4,MATTR_VAL_OFF = 0,MATTR_VAL_ON = 1,MATTR_VAL_GET = 2,MATTR_VAL_CACHE_FLUSH = 6,MATTR_VAL_DCACHE_FLUSH = 7,MATTR_VAL_ICACHE_FLUSH = 8,MATTR_VAL_CACHE_SYNC = 9,MATTR_VAL_GET_INFO = 10,};
enum MACRO_MAX {FOPEN_MAX = 20,FILENAME_MAX = 1024,};
enum MACRO_MAXCDNAME {MAXCDNAME = 255,};
enum MACRO_MAXCOMLEN {MAXCOMLEN = 16,MAXINTERP = 64,};
enum MACRO_MAXDEPTH {MAXDEPTH = 50,};
enum MACRO_MAXDFLSRCH {MAXDFLSRCH = 3,};
enum MACRO_MAXDNAME {MAXDNAME = 256,};
enum MACRO_MAXDNSRCH {MAXDNSRCH = 6,};
enum MACRO_MAXDOMNAMELEN {MAXDOMNAMELEN = 256,};
enum MACRO_MAXDSIZ : __int64 {MAXDSIZ = 9223372036854775807,};
enum MACRO_MAXFIDSZ {MAXFIDSZ = 16,};
enum MACRO_MAXFRAG {MAXFRAG = 8,MAXPATHLEN = 1024,};
enum MACRO_MAXHOSTNAMELEN {MAXHOSTNAMELEN = 256,};
enum MACRO_MAXLABEL {MAXLABEL = 63,};
enum MACRO_MAXLOGNAME {MAXLOGNAME = 255,};
enum MACRO_MAXMIFS {MAXMIFS = 64,};
enum MACRO_MAXNAMELEN {MAXNAMELEN = 1025,};
enum MACRO_MAXNAMLEN {MAXNAMLEN = 255,};
enum MACRO_MAXNETNAMELEN {MAXNETNAMELEN = 255,};
enum MACRO_MAXNS {MAXNS = 3,};
enum MACRO_MAXPACKETSIZE {MAXPACKETSIZE = 512,};
enum MACRO_MAXPHYS {MAXPHYS = 131072,};
enum MACRO_MAXPHYSIO {MAXPHYSIO = 131072,};
enum MACRO_MAXPRI {MAXPRI = 127,};
enum MACRO_MAXQSIZE {MAXQSIZE = 10,};
enum MACRO_MAXQUOTAS {MAXQUOTAS = 2,};
enum MACRO_MAXRESOLVSORT {MAXRESOLVSORT = 10,};
enum MACRO_MAXSYMLINKS {MAXSYMLINKS = 32,};
enum MACRO_MAXTTL {MAXTTL = 255,};
enum MACRO_MAXUPRC {MAXUPRC = 100,NCARGS = 65536,};
enum MACRO_MAXUSERS {MAXUSERS = 100,};
enum MACRO_MAXVIFS {MAXVIFS = 32,};
enum MACRO_MAX_CACHED {MAX_CACHED_SOCKETS = 60000,};
enum MACRO_MAX_CANON {MAX_CANON = 255,MAX_INPUT = 255,};
enum MACRO_MAX_CLUSTERS {MAX_CLUSTERS = 4,};
enum MACRO_MAX_IQ {MAX_IQ_TIME = 604800,MAX_DQ_TIME = 604800,};
enum MACRO_MAX_KEYTAB {MAX_KEYTAB_NAME_LEN = 1100,};
enum MACRO_MAX_KTXT {MAX_KTXT_LEN = 1250,};
enum MACRO_MAX_LIFE {MAX_LIFE = 60,};
enum MACRO_MAX_MACHINE {MAX_MACHINE_NAME = 255,};
enum MACRO_MAX_NETOBJ {MAX_NETOBJ_SZ = 1024,MAX_AUTH_BYTES = 400,};
enum MACRO_MAX_PAGE {MAX_PAGE_NUMBER = 0xFFFFFFFF,MAX_PAGE_OFFSET = 0xFFFF,MAX_REC_NUMBER = 0xFFFFFFFF,};
enum MACRO_MAX_PATH {MAX_PATH_LEN = 1024,MAX_FILEID = 32,};
enum MACRO_MAX_PHYS {MAX_PHYS_ADDR_SIZE = 6,MAX_IFS = 25,};
enum MACRO_MAX_SOPS {MAX_SOPS = 5,};
enum MACRO_MAX_UPL {MAX_UPL_TRANSFER = 256,};
enum MACRO_MAX_UPQ {MAX_UPQ = 4,MAX_BKT_SIZE = 10000,};
enum MACRO_MAX_ZONES {MAX_ZONES = 50,};
enum MACRO_MB {MB_LEN_MAX = 1,};
enum MACRO_MCLOFSET {MCLOFSET = 2047,};
enum MACRO_MCLSHIFT {MCLSHIFT = 11,};
enum MACRO_MEMORY {MEMORY_OBJECT_COPY_NONE = 0,MEMORY_OBJECT_COPY_CALL = 1,MEMORY_OBJECT_COPY_DELAY = 2,MEMORY_OBJECT_COPY_TEMPORARY = 3,MEMORY_OBJECT_COPY_SYMMETRIC = 4,MEMORY_OBJECT_COPY_INVALID = 5,MEMORY_OBJECT_RETURN_NONE = 0,MEMORY_OBJECT_RETURN_DIRTY = 1,MEMORY_OBJECT_RETURN_ALL = 2,MEMORY_OBJECT_RETURN_ANYTHING = 3,MEMORY_OBJECT_DATA_FLUSH = 1,MEMORY_OBJECT_DATA_NO_CHANGE = 2,MEMORY_OBJECT_DATA_PURGE = 4,MEMORY_OBJECT_COPY_SYNC = 8,MEMORY_OBJECT_DATA_SYNC = 16,MEMORY_OBJECT_INFO_MAX = 1024,MEMORY_OBJECT_PERFORMANCE_INFO = 11,MEMORY_OBJECT_ATTRIBUTE_INFO = 14,MEMORY_OBJECT_BEHAVIOR_INFO = 15,};
enum MACRO_MEMORY_OBJECT {MEMORY_OBJECT_TERMINATE_IDLE = 0x1,MEMORY_OBJECT_RESPECT_CACHE = 0x2,MEMORY_OBJECT_RELEASE_NO_OP = 0x4,};
enum MACRO_MENU_COMMAND {MIN_MENU_COMMAND = 512,MAX_MENU_COMMAND = 528,};
enum MACRO_MFCTBLSIZ {MFCTBLSIZ = 256,};
enum MACRO_MFSNAMELEN {MFSNAMELEN = 15,};
enum MACRO_MIFF {MIFF_REGISTER = 0x1,};
enum MACRO_MIG {MIG_ROUTINE_ARG_DESCRIPTOR_NULL = 0,MIG_ROUTINE_DESCRIPTOR_NULL = 0,MIG_SUBSYSTEM_NULL = 0,MIG_TYPE_ERROR = -300,MIG_REPLY_MISMATCH = -301,MIG_REMOTE_ERROR = -302,MIG_BAD_ID = -303,MIG_BAD_ARGUMENTS = -304,MIG_NO_REPLY = -305,MIG_EXCEPTION = -306,MIG_ARRAY_TOO_LARGE = -307,MIG_SERVER_DIED = -308,MIG_TRAILER_ERROR = -309,};
enum MACRO_MIN : __int64 {INT8_MIN = -128,INT16_MIN = -32768,INT32_MIN = -2147483648,INT64_MIN = -9223372036854775808,};
enum MACRO_MINARCS {MINARCS = 50,};
enum MACRO_MINBUCKET {MINBUCKET = 4,MAXALLOCSAVE = 8192,};
enum MACRO_MINCORE {MINCORE_INCORE = 0x1,MINCORE_REFERENCED = 0x2,MINCORE_MODIFIED = 0x4,MINCORE_REFERENCED_OTHER = 0x8,MINCORE_MODIFIED_OTHER = 0x10,};
enum MACRO_MINSIGSTKSZ {MINSIGSTKSZ = 8192,};
enum MACRO_MINSPERHOUR {MINSPERHOUR = 60,};
enum MACRO_MK {MK_AP_TGTEXP = 26,};
enum MACRO_MLD6 {MLD6_LISTENER_QUERY = 130,};
enum MACRO_MLD6_LISTENER {MLD6_LISTENER_DONE = 132,};
enum MACRO_MLD6_MTRACE {MLD6_MTRACE_RESP = 200,MLD6_MTRACE = 201,};
enum MACRO_MNAMELEN {MNAMELEN = 90,};
enum MACRO_MNT {MNT_RDONLY = 0x1,MNT_SYNCHRONOUS = 0x2,MNT_NOEXEC = 0x4,MNT_NOSUID = 0x8,MNT_NODEV = 0x10,MNT_UNION = 0x20,MNT_ASYNC = 0x40,MNT_DONTBROWSE = 0x100000,MNT_UNKNOWNPERMISSIONS = 0x200000,MNT_AUTOMOUNTED = 0x400000,MNT_EXRDONLY = 0x80,MNT_EXPORTED = 0x100,MNT_DEFEXPORTED = 0x200,MNT_EXPORTANON = 0x400,MNT_EXKERB = 0x800,MNT_LOCAL = 0x1000,MNT_QUOTA = 0x2000,MNT_ROOTFS = 0x4000,MNT_DOVOLFS = 0x8000,MNT_FIXEDSCRIPTENCODING = 0x10000000,MNT_VISFLAGMASK = 0x1070FFFF,MNT_UPDATE = 0x10000,MNT_DELEXPORT = 0x20000,MNT_RELOAD = 0x40000,MNT_FORCE = 0x80000,MNT_CMDFLAGS = 0xF0000,};
enum MACRO_MNTK {MNTK_UNMOUNT = 0x1000000,MNTK_MWAIT = 0x2000000,MNTK_WANTRDWR = 0x4000000,};
enum MACRO_MNT_WAIT {MNT_WAIT = 1,MNT_NOWAIT = 2,};
enum MACRO_MODE {MODE_S = 1,MODE_B = 2,MODE_C = 3,};
enum MACRO_MODE_EDIT {MODE_EDIT = 0x1,MODE_TRAPSIG = 0x2,MODE_ACK = 0x4,MODE_SOFT_TAB = 0x8,MODE_LIT_ECHO = 0x10,MODE_MASK = 0x1F,MODE_FLOW = 0x100,MODE_ECHO = 0x200,MODE_INBIN = 0x400,MODE_OUTBIN = 0x800,MODE_FORCE = 0x1000,};
enum MACRO_MONSPERYEAR {MONSPERYEAR = 12,};
enum MACRO_MOREDATA {MOREDATA = 1,};
enum MACRO_MPOOL {MPOOL_DIRTY = 0x1,MPOOL_PINNED = 0x2,};
enum MACRO_MRT {MRT_INIT = 100,MRT_DONE = 101,MRT_ADD_VIF = 102,MRT_DEL_VIF = 103,MRT_ADD_MFC = 104,MRT_DEL_MFC = 105,MRT_VERSION = 106,MRT_ASSERT = 107,};
enum MACRO_MRT6 {MRT6_DONE = 101,MRT6_ADD_MIF = 102,MRT6_DEL_MIF = 103,MRT6_ADD_MFC = 104,MRT6_DEL_MFC = 105,MRT6_PIM = 107,MRT6_INIT = 108,};
enum MACRO_MRT6MSG {MRT6MSG_NOCACHE = 1,MRT6MSG_WRONGMIF = 2,MRT6MSG_WHOLEPKT = 3,};
enum MACRO_MS {MS_SYNC = 0x0,MS_ASYNC = 0x1,MS_INVALIDATE = 0x2,MS_KILLPAGES = 0x4,MS_DEACTIVATE = 0x8,};
enum MACRO_MSEC {MSEC_DIRBIT = 0x8000,MSEC_VAL_MASK = 0x7FFF,};
enum MACRO_MSG {MSG_OOB = 0x1,MSG_PEEK = 0x2,MSG_DONTROUTE = 0x4,MSG_EOR = 0x8,MSG_TRUNC = 0x10,MSG_CTRUNC = 0x20,MSG_WAITALL = 0x40,MSG_DONTWAIT = 0x80,MSG_EOF = 0x100,MSG_FLUSH = 0x400,MSG_HOLD = 0x800,MSG_SEND = 0x1000,MSG_HAVEMORE = 0x2000,MSG_RCVMORE = 0x4000,MSG_COMPAT = 0x8000,};
enum MACRO_MSG_COUNT {host_security_MSG_COUNT = 2,ledger_MSG_COUNT = 4,lock_set_MSG_COUNT = 6,};
enum MACRO_MSG_MAGIC {MSG_MAGIC = 0x63061,};
enum MACRO_MSR {MSR_EE_BIT = 16,MSR_PR_BIT = 17,};
enum MACRO_MSS {TCP_MSS = 512,TCP6_MSS = 1024,};
enum MACRO_MT {MT_FREE = 0,MT_DATA = 1,MT_HEADER = 2,MT_SOCKET = 3,MT_PCB = 4,MT_RTABLE = 5,MT_HTABLE = 6,MT_ATABLE = 7,MT_SONAME = 8,MT_SOOPTS = 10,MT_FTABLE = 11,MT_RIGHTS = 12,MT_IFADDR = 13,MT_CONTROL = 14,MT_OOBDATA = 15,MT_MAX = 32,};
enum MACRO_MTCACHE {MTCACHE = 12,};
enum MACRO_MTEOM {MTEOM = 10,};
enum MACRO_MTERASE {MTERASE = 9,};
enum MACRO_MTFSR {MTFSR = 3,MTBSR = 4,};
enum MACRO_MTIOCEEOT {MTIOCEEOT = 536898820,};
enum MACRO_MTIOCIEOT {MTIOCIEOT = 536898819,};
enum MACRO_MTNBSF {MTNBSF = 11,};
enum MACRO_MTNOCACHE {MTNOCACHE = 13,};
enum MACRO_MTNOP {MTNOP = 7,MTRETEN = 8,};
enum MACRO_MTOFFL {MTOFFL = 6,};
enum MACRO_MTREW {MTREW = 5,};
enum MACRO_MTSETBSIZ {MTSETBSIZ = 14,};
enum MACRO_MTSETDNSTY {MTSETDNSTY = 15,};
enum MACRO_MTWEOF {MTWEOF = 0,MTFSF = 1,MTBSF = 2,};
enum MACRO_MT_ISTS {MT_ISTS = 0x1,MT_ISHT = 0x2,MT_ISTM = 0x3,MT_ISMT = 0x4,MT_ISUT = 0x5,MT_ISCPC = 0x6,MT_ISAR = 0x7,MT_ISTMSCP = 0x8,MT_ISCY = 0x9,MT_ISCT = 0xA,MT_ISFHP = 0xB,MT_ISEXABYTE = 0xC,MT_ISEXA8200 = 0xC,MT_ISEXA8500 = 0xD,MT_ISVIPER1 = 0xE,MT_ISPYTHON = 0xF,MT_ISHPDAT = 0x10,MT_ISWANGTEK = 0x11,MT_ISCALIPER = 0x12,MT_ISWTEK5099 = 0x13,MT_ISVIPER2525 = 0x14,MT_ISMFOUR = 0x11,MT_ISTK50 = 0x12,MT_ISMT02 = 0x13,MT_ISGS = 0x14,};
enum MACRO_M_DONTWAIT {M_DONTWAIT = 1,M_WAIT = 0,M_COPYALL = 1000000000,};
enum MACRO_N {N_UNDF = 0x0,N_ABS = 0x2,N_TEXT = 0x4,N_DATA = 0x6,N_BSS = 0x8,N_COMM = 0x12,N_FN = 0x1E,N_EXT = 0x1,N_TYPE = 0x1E,N_STAB = 0xE0,};
enum MACRO_NAME {NAME_MAX = 255,NGROUPS_MAX = 16,UID_MAX = 2147483647,OPEN_MAX = 10240,PATH_MAX = 1024,};
enum MACRO_NAMESERVER {NAMESERVER_PORT = 53,};
enum MACRO_NAMESIZE {NAMESIZE = 256,};
enum MACRO_NAME_NOT {NAME_NOT_YOURS = 1000,};
enum MACRO_NAME_SIZE {NAME_SIZE = 12,TTY_SIZE = 16,};
enum MACRO_NBBY {NBBY = 8,};
enum MACRO_NBP {NBP_NVE_STR_SIZE = 32,NBP_TUPLE_SIZE = 99,};
enum MACRO_NBPINDEX {NBPINDEX = 1852,};
enum MACRO_NBPOBJECT {NBPOBJECT = 1853,};
enum MACRO_NBPSTATE {NBPSTATE = 1854,};
enum MACRO_NBPTABLE {NBPTABLE = 1855,};
enum MACRO_NBPTYPE {NBPTYPE = 1856,};
enum MACRO_NBPZONE {NBPZONE = 1857,};
enum MACRO_NBP_BRRQ {NBP_BRRQ = 0x1,NBP_LKUP = 0x2,NBP_LKUP_REPLY = 0x3,NBP_FWDRQ = 0x4,NBP_CONFIRM = 0x9,NBP_RETRY_COUNT = 0x8,NBP_RETRY_INTERVAL = 0x1,NBP_SPL_WILDCARD = 0xC5,NBP_ORD_WILDCARD = 0x3D,NBP_TUPLE_MAX = 0xF,NBP_HDR_SIZE = 0x2,};
enum MACRO_NCCS {NCCS = 20,};
enum MACRO_NCHNAMLEN {NCHNAMLEN = 31,};
enum MACRO_NCURSES {NCURSES_VERSION_MAJOR = 5,NCURSES_VERSION_MINOR = 2,NCURSES_VERSION_PATCH = 20020209,NCURSES_DLL_H_incl = 1,NCURSES_UNCTRL_H_incl = 1,};
enum MACRO_NCURSES_ATTR {NCURSES_ATTR_SHIFT = 8,};
enum MACRO_NCURSES_ETI {NCURSES_ETI_H_incl = 1,};
enum MACRO_NCURSES_MOUSE {NCURSES_MOUSE_VERSION = 1,};
enum MACRO_NCURSES_PANEL {NCURSES_PANEL_H_incl = 1,};
enum MACRO_NCURSES_TERM {NCURSES_TERM_H_incl = 1,};
enum MACRO_NCURSES_TERMCAP {NCURSES_TERMCAP_H_incl = 1,};
enum MACRO_NCURSES_XNAMES {NCURSES_XNAMES = 1,};
enum MACRO_ND {ND_ROUTER_SOLICIT = 133,ND_ROUTER_ADVERT = 134,ND_NEIGHBOR_SOLICIT = 135,ND_NEIGHBOR_ADVERT = 136,ND_REDIRECT = 137,};
enum MACRO_NDEXTENT {NDEXTENT = 50,};
enum MACRO_NDFILE {NDFILE = 25,};
enum MACRO_NDMAP {NDMAP = 38,};
enum MACRO_NDR {NDR_PROTOCOL_2_0 = 0,NDR_INT_BIG_ENDIAN = 0,NDR_INT_LITTLE_ENDIAN = 1,NDR_FLOAT_IEEE = 0,NDR_FLOAT_VAX = 1,NDR_FLOAT_CRAY = 2,NDR_FLOAT_IBM = 3,NDR_CHAR_ASCII = 0,NDR_CHAR_EBCDIC = 1,};
enum MACRO_NDRV {NDRV_DEMUXTYPE_ETHERTYPE = 4,NDRV_DEMUXTYPE_SAP = 5,NDRV_DEMUXTYPE_SNAP = 6,};
enum MACRO_NDRVPROTO {NDRVPROTO_NDRV = 0,};
enum MACRO_NDRV_DELDMXSPEC {NDRV_DELDMXSPEC = 0x2,NDRV_SETDMXSPEC = 0x4,NDRV_ADDMULTICAST = 0x5,NDRV_DELMULTICAST = 0x6,};
enum MACRO_NDRV_PROTOCOL {NDRV_PROTOCOL_DESC_VERS = 1,};
enum MACRO_ND_REDIRECT {ND_REDIRECT_ONLINK = 0,ND_REDIRECT_ROUTER = 1,ND_RA_FLAG_MANAGED = 128,ND_RA_FLAG_OTHER = 64,ND_RA_FLAG_HA = 32,ND_RA_FLAG_RTPREF_MASK = 24,ND_RA_FLAG_RTPREF_HIGH = 8,ND_RA_FLAG_RTPREF_MEDIUM = 0,ND_RA_FLAG_RTPREF_LOW = 24,ND_RA_FLAG_RTPREF_RSV = 16,ND_NA_FLAG_ROUTER = -2147483648,ND_NA_FLAG_SOLICITED = 1073741824,ND_NA_FLAG_OVERRIDE = 536870912,ND_OPT_SOURCE_LINKADDR = 1,ND_OPT_TARGET_LINKADDR = 2,ND_OPT_PREFIX_INFORMATION = 3,ND_OPT_REDIRECTED_HEADER = 4,ND_OPT_MTU = 5,ND_OPT_ROUTE_INFO = 200,ND_OPT_PI_FLAG_ONLINK = 128,ND_OPT_PI_FLAG_AUTO = 64,};
enum MACRO_NET {NET_MAXID = 36,NET_RT_DUMP = 1,NET_RT_FLAGS = 2,NET_RT_IFLIST = 3,NET_RT_MAXID = 4,};
enum MACRO_NETDB {NETDB_INTERNAL = -1,NETDB_SUCCESS = 0,};
enum MACRO_NETLINK {NETLINK_GENERIC = 0,};
enum MACRO_NETNAME {NETNAME_SUCCESS = 0,NETNAME_PENDING = -1,NETNAME_NOT_YOURS = 1000,};
enum MACRO_NETNAME_NO {NETNAME_NO_SUCH_HOST = 1002,NETNAME_HOST_NOT_FOUND = 1003,NETNAME_INVALID_PORT = 1004,};
enum MACRO_NEW {NEW_ENV_VAR = 0,NEW_ENV_VALUE = 1,};
enum MACRO_NEWLINE {NEWLINE = 3,TAB = 4,};
enum MACRO_NEW_LOCAL {NEW_LOCAL_SHARED_REGIONS = 0x2,};
enum MACRO_NFD {NFD_GLOBAL = 0x1,NFD_PROG = 0x2,NFD_VISIBLE = 0x80000000,};
enum MACRO_NFF {NFF_BEFORE = 0x1,NFF_AFTER = 0x2,};
enum MACRO_NFS {NFS_KERBTTL = 1800,NFS_KERBCLOCKSKEW = 300,NFS_MAXIOVEC = 34,NFS_TICKINTVL = 5,NFS_MAXREXMIT = 100,NFS_MAXWINDOW = 1024,NFS_RETRANS = 10,NFS_MAXGRPS = 16,NFS_MINATTRTIMO = 5,NFS_MAXATTRTIMO = 60,NFS_WSIZE = 8192,NFS_RSIZE = 8192,NFS_READDIRSIZE = 8192,NFS_DEFRAHEAD = 1,NFS_MAXRAHEAD = 4,NFS_MAXUIDHASH = 64,NFS_MAXASYNCDAEMON = 20,NFS_MAXGATHERDELAY = 100,NFS_GATHERDELAY = 10,NFS_DIRBLKSIZ = 4096,};
enum MACRO_NFSERR {NFSERR_PERM = 1,NFSERR_NOENT = 2,NFSERR_IO = 5,NFSERR_NXIO = 6,NFSERR_ACCES = 13,NFSERR_EXIST = 17,NFSERR_XDEV = 18,NFSERR_NODEV = 19,NFSERR_NOTDIR = 20,NFSERR_ISDIR = 21,NFSERR_INVAL = 22,NFSERR_FBIG = 27,NFSERR_NOSPC = 28,NFSERR_ROFS = 30,NFSERR_MLINK = 31,NFSERR_NAMETOL = 63,NFSERR_NOTEMPTY = 66,NFSERR_DQUOT = 69,NFSERR_STALE = 70,NFSERR_REMOTE = 71,NFSERR_WFLUSH = 99,NFSERR_BADHANDLE = 10001,NFSERR_NOT_SYNC = 10002,NFSERR_BAD_COOKIE = 10003,NFSERR_NOTSUPP = 10004,NFSERR_TOOSMALL = 10005,NFSERR_SERVERFAULT = 10006,NFSERR_BADTYPE = 10007,NFSERR_JUKEBOX = 10008,NFSERR_TRYLATER = 10008,NFSERR_STALEWRITEVERF = 30001,NFSERR_RETVOID = 536870912,NFSERR_AUTHERR = 1073741824,NFSERR_RETERR = -2147483648,};
enum MACRO_NFSMNT {NFSMNT_SOFT = 0x1,NFSMNT_WSIZE = 0x2,NFSMNT_RSIZE = 0x4,NFSMNT_TIMEO = 0x8,NFSMNT_RETRANS = 0x10,NFSMNT_MAXGRPS = 0x20,NFSMNT_INT = 0x40,NFSMNT_NOCONN = 0x80,NFSMNT_NQNFS = 0x100,NFSMNT_NFSV3 = 0x200,NFSMNT_KERB = 0x400,NFSMNT_DUMBTIMR = 0x800,NFSMNT_LEASETERM = 0x1000,NFSMNT_READAHEAD = 0x2000,NFSMNT_DEADTHRESH = 0x4000,NFSMNT_RESVPORT = 0x8000,NFSMNT_RDIRPLUS = 0x10000,NFSMNT_READDIRSIZE = 0x20000,NFSMNT_INTERNAL = 0xFFFC0000,NFSMNT_HASWRITEVERF = 0x40000,NFSMNT_GOTPATHCONF = 0x80000,NFSMNT_GOTFSINFO = 0x100000,NFSMNT_MNTD = 0x200000,NFSMNT_DISMINPROG = 0x400000,NFSMNT_DISMNT = 0x800000,NFSMNT_SNDLOCK = 0x1000000,NFSMNT_WANTSND = 0x2000000,NFSMNT_RCVLOCK = 0x4000000,NFSMNT_WANTRCV = 0x8000000,NFSMNT_WAITAUTH = 0x10000000,NFSMNT_HASAUTH = 0x20000000,NFSMNT_WANTAUTH = 0x40000000,NFSMNT_AUTHERR = 0x80000000,};
enum MACRO_NFSPROC {NFSPROC_NULL = 0,NFSPROC_GETATTR = 1,NFSPROC_SETATTR = 2,NFSPROC_LOOKUP = 3,NFSPROC_ACCESS = 4,NFSPROC_READLINK = 5,NFSPROC_READ = 6,NFSPROC_WRITE = 7,NFSPROC_CREATE = 8,NFSPROC_MKDIR = 9,NFSPROC_SYMLINK = 10,NFSPROC_MKNOD = 11,NFSPROC_REMOVE = 12,NFSPROC_RMDIR = 13,NFSPROC_RENAME = 14,NFSPROC_LINK = 15,NFSPROC_READDIR = 16,NFSPROC_READDIRPLUS = 17,NFSPROC_FSSTAT = 18,NFSPROC_FSINFO = 19,NFSPROC_PATHCONF = 20,NFSPROC_COMMIT = 21,};
enum MACRO_NFSPROC_NOOP {NFSPROC_NOOP = 25,};
enum MACRO_NFSRTTLOGSIZ {NFSRTTLOGSIZ = 128,};
enum MACRO_NFSSVC {NFSSVC_BIOD = 0x2,NFSSVC_NFSD = 0x4,NFSSVC_ADDSOCK = 0x8,NFSSVC_AUTHIN = 0x10,NFSSVC_GOTAUTH = 0x40,NFSSVC_AUTHINFAIL = 0x80,NFSSVC_MNTD = 0x100,};
enum MACRO_NFSV2PROC {NFSV2PROC_NULL = 0,NFSV2PROC_GETATTR = 1,NFSV2PROC_SETATTR = 2,NFSV2PROC_NOOP = 3,NFSV2PROC_ROOT = 3,NFSV2PROC_LOOKUP = 4,NFSV2PROC_READLINK = 5,NFSV2PROC_READ = 6,NFSV2PROC_WRITECACHE = 3,NFSV2PROC_WRITE = 8,NFSV2PROC_CREATE = 9,NFSV2PROC_REMOVE = 10,NFSV2PROC_RENAME = 11,NFSV2PROC_LINK = 12,NFSV2PROC_SYMLINK = 13,NFSV2PROC_MKDIR = 14,NFSV2PROC_RMDIR = 15,NFSV2PROC_READDIR = 16,NFSV2PROC_STATFS = 17,};
enum MACRO_NFSV3ACCESS {NFSV3ACCESS_READ = 0x1,NFSV3ACCESS_LOOKUP = 0x2,NFSV3ACCESS_MODIFY = 0x4,NFSV3ACCESS_EXTEND = 0x8,NFSV3ACCESS_DELETE = 0x10,NFSV3ACCESS_EXECUTE = 0x20,};
enum MACRO_NFSV3CREATE {NFSV3CREATE_UNCHECKED = 0,NFSV3CREATE_GUARDED = 1,NFSV3CREATE_EXCLUSIVE = 2,};
enum MACRO_NFSV3FSINFO {NFSV3FSINFO_LINK = 0x1,NFSV3FSINFO_SYMLINK = 0x2,NFSV3FSINFO_HOMOGENEOUS = 0x8,NFSV3FSINFO_CANSETTIME = 0x10,};
enum MACRO_NFSV3SATTRTIME {NFSV3SATTRTIME_DONTCHANGE = 0,NFSV3SATTRTIME_TOSERVER = 1,NFSV3SATTRTIME_TOCLIENT = 2,};
enum MACRO_NFSV3WRITE {NFSV3WRITE_UNSTABLE = 0,NFSV3WRITE_DATASYNC = 1,NFSV3WRITE_FILESYNC = 2,};
enum MACRO_NFSX {NFSX_UNSIGNED = 4,NFSX_V2FH = 32,NFSX_V2FATTR = 68,NFSX_V2SATTR = 32,NFSX_V2COOKIE = 4,NFSX_V2STATFS = 20,NFSX_V3FHMAX = 64,NFSX_V3FATTR = 84,NFSX_V3SATTR = 60,NFSX_V3POSTOPATTR = 88,NFSX_V3WCCDATA = 120,NFSX_V3COOKIEVERF = 8,NFSX_V3WRITEVERF = 8,NFSX_V3CREATEVERF = 8,NFSX_V3STATFS = 52,NFSX_V3FSINFO = 48,NFSX_V3PATHCONF = 24,};
enum MACRO_NFS_NFSSTATS {NFS_NFSSTATS = 1,NFS_NFSPRIVPORT = 2,NFS_MUIDHASHSIZ = 63,NFS_WDELAYHASHSIZ = 16,NFS_PORT = 2049,NFS_PROG = 100003,NFS_VER2 = 2,NFS_VER3 = 3,NFS_V2MAXDATA = 8192,NFS_MAXDGRAMDATA = 16384,NFS_MAXDATA = 32768,NFS_MAXPATHLEN = 1024,NFS_MAXNAMLEN = 255,NFS_MAXPKTHDR = 404,NFS_MAXPACKET = 33172,NFS_MINPACKET = 20,NFS_FABLKSIZE = 512,NFS_OK = 0,};
enum MACRO_NFS_NODEALLOC {NFS_NODEALLOC = 512,NFS_MNTALLOC = 512,NFS_SVCALLOC = 256,NFS_UIDALLOC = 128,NFS_ARGSVERSION = 3,};
enum MACRO_NFS_NPROCS {NFS_NPROCS = 26,};
enum MACRO_NFS_SMALLFH {NFS_SMALLFH = 64,};
enum MACRO_NGROUPS {NGROUPS = 16,NOFILE = 256,};
enum MACRO_NI {NI_MAXHOST = 1025,NI_MAXSERV = 32,NI_NOFQDN = 1,NI_NUMERICHOST = 2,NI_NAMEREQD = 4,NI_NUMERICSERV = 8,NI_DGRAM = 16,NI_WITHSCOPEID = 32,};
enum MACRO_NIBIND {NIBIND_MAXREGS = 32,NIBIND_PROG = 200100001,NIBIND_VERS = 1,NIBIND_PING = 0,NIBIND_REGISTER = 1,NIBIND_UNREGISTER = 2,NIBIND_GETREGISTER = 3,NIBIND_LISTREG = 4,NIBIND_CREATEMASTER = 5,NIBIND_CREATECLONE = 6,NIBIND_DESTROYDOMAIN = 7,NIBIND_BIND = 8,};
enum MACRO_NIOPIDS {NIOPIDS = 8,};
enum MACRO_NI_INDEX : __int64 {NI_INDEX_NULL = 4294967295,};
enum MACRO_NI_NAME {NI_NAME_MAXLEN = 65535,NI_NAMELIST_MAXLEN = 65535,NI_PROPLIST_MAXLEN = 65535,NI_IDLIST_MAXLEN = 1048576,NI_PROG = 200100000,NI_VERS = 2,};
enum MACRO_NI_QTYPE {NI_QTYPE_NOOP = 0,NI_QTYPE_SUPTYPES = 1,NI_QTYPE_FQDN = 2,NI_QTYPE_DNSNAME = 2,NI_QTYPE_NODEADDR = 3,NI_QTYPE_IPV4ADDR = 4,NI_SUPTYPE_FLAG_COMPRESS = 1,NI_FQDN_FLAG_VALIDTTL = 1,NI_NODEADDR_FLAG_TRUNCATE = 1,NI_NODEADDR_FLAG_ALL = 2,NI_NODEADDR_FLAG_COMPAT = 4,NI_NODEADDR_FLAG_LINKLOCAL = 8,NI_NODEADDR_FLAG_SITELOCAL = 16,NI_NODEADDR_FLAG_GLOBAL = 32,NI_NODEADDR_FLAG_ANYCAST = 64,};
enum MACRO_NKE {NKE_OK = 0,NKE_REMOVE = -1,};
enum MACRO_NL {NL_ARGMAX = 9,NL_LANGMAX = 14,NL_MSGMAX = 32767,NL_NMAX = 1,NL_SETMAX = 255,NL_TEXTMAX = 255,};
enum MACRO_NL0 {NL0 = 0x0,NL1 = 0x100,NL2 = 0x200,};
enum MACRO_NL3 {NL3 = 0x300,TBDELAY = 0xC00,};
enum MACRO_NLIMITS {NLIMITS = 6,};
enum MACRO_NLM {NLM_PROG = 100021,NLM_VERS = 1,NLM_TEST = 1,NLM_LOCK = 2,NLM_CANCEL = 3,NLM_UNLOCK = 4,NLM_GRANTED = 5,NLM_TEST_MSG = 6,NLM_LOCK_MSG = 7,NLM_CANCEL_MSG = 8,NLM_UNLOCK_MSG = 9,NLM_GRANTED_MSG = 10,NLM_TEST_RES = 11,NLM_LOCK_RES = 12,NLM_CANCEL_RES = 13,NLM_UNLOCK_RES = 14,NLM_GRANTED_RES = 15,NLM_VERSX = 3,NLM_SHARE = 20,NLM_UNSHARE = 21,NLM_NM_LOCK = 22,NLM_FREE_ALL = 23,};
enum MACRO_NMAGIC {NMAGIC = 0x108,};
enum MACRO_NMBCLUSTERS {NMBCLUSTERS = 512,};
enum MACRO_NO {NO_JUSTIFICATION = 0,};
enum MACRO_NODEV {NODEV = -1,};
enum MACRO_NOERROR {NOERROR = 0,FORMERR = 1,SERVFAIL = 2,};
enum MACRO_NOGROUP {NOGROUP = 65535,};
enum MACRO_NOP {NOP = 241,};
enum MACRO_NOT {NOT_HERE = 1,};
enum MACRO_NOTIFY {NOTIFY_N_DIST = 31,};
enum MACRO_NOT_CHECKED_IN {NETNAME_NOT_CHECKED_IN = 1001,NAME_NOT_CHECKED_IN = 1001,};
enum MACRO_NO_RECOVERY {NO_RECOVERY = 3,NO_DATA = 4,NO_ADDRESS = 4,};
enum MACRO_NO_TKT {NO_TKT_FIL = 76,};
enum MACRO_NPAPSERVERS {NPAPSERVERS = 10,};
enum MACRO_NPAPSESSIONS {NPAPSESSIONS = 40,};
enum MACRO_NPIDS {NPIDS = 16,};
enum MACRO_NQNFSPROC {NQNFSPROC_GETLEASE = 22,NQNFSPROC_VACATED = 23,NQNFSPROC_EVICTED = 24,};
enum MACRO_NS {NS_NOTIFY_OP = 0x4,};
enum MACRO_NSEC {NSEC_PER_USEC = 1000,};
enum MACRO_NSIG {NSIG = 32,};
enum MACRO_NSLC {NSLC = 18,};
enum MACRO_NTELOPTS {NTELOPTS = 40,};
enum MACRO_NULL {NULL = 0,__SLBF = 1,__SNBF = 2,__SRD = 4,__SWR = 8,__SRW = 16,__SEOF = 32,__SERR = 64,__SMBF = 128,__SAPP = 256,__SSTR = 512,__SOPT = 1024,__SNPT = 2048,__SOFF = 4096,__SMOD = 8192,__SALC = 16384,};
enum MACRO_NULLPROC {NULLPROC = 0,UDPMSGSIZE = 8800,};
enum MACRO_NULL_xdrproc {NULL_xdrproc_t = 0,};
enum MACRO_NUM {NUM_STATIC_TOKENS = 20,};
enum MACRO_NUMCOUNT {NUMCOUNT = 39,};
enum MACRO_NUMWRITE {NUMWRITE = 33,STRWRITE = 394,};
enum MACRO_NUM_ADB {NUM_ADB_ADDRESSES = 16,};
enum MACRO_NUM_ADB_KEYCODES {NUM_ADB_KEYCODES = 128,};
enum MACRO_NXDOMAIN {NXDOMAIN = 3,NOTIMP = 4,};
enum MACRO_NZERO {NZERO = 0,CMASK = 18,};
enum MACRO_N_CALLOUT {N_CALLOUT_PRI = 6,};
enum MACRO_N_GSYM {N_GSYM = 0x20,N_FNAME = 0x22,N_FUN = 0x24,N_STSYM = 0x26,N_LCSYM = 0x28,N_MAIN = 0x2A,N_PC = 0x30,N_RSYM = 0x40,N_SLINE = 0x44,N_DSLINE = 0x46,N_BSLINE = 0x48,N_SSYM = 0x60,N_SO = 0x64,N_LSYM = 0x80,N_BINCL = 0x82,N_SOL = 0x84,N_PSYM = 0xA0,N_EINCL = 0xA2,N_ENTRY = 0xA4,N_LBRAC = 0xC0,N_EXCL = 0xC2,N_RBRAC = 0xE0,N_BCOMM = 0xE2,N_ECOMM = 0xE4,N_ECOML = 0xE8,N_LENG = 0xFE,};
enum MACRO_NeXTBSD {NeXTBSD = 1995064,};
enum MACRO_NeXTBSD4 {NeXTBSD4_0 = 0,};
enum MACRO_O {O_RDONLY = 0x0,O_WRONLY = 0x1,O_RDWR = 0x2,O_ACCMODE = 0x3,};
enum MACRO_OARMAG1 {OARMAG1 = 0xFF6D,};
enum MACRO_OARMAG2 {OARMAG2 = 0xFF65,};
enum MACRO_OBUFSIZ {OBUFSIZ = 100,TTYHOG = 1024,};
enum MACRO_ODBC {ODBC_ADD_DSN = 1,ODBC_CONFIG_DSN = 2,ODBC_REMOVE_DSN = 3,ODBC_ADD_SYS_DSN = 4,ODBC_CONFIG_SYS_DSN = 5,ODBC_REMOVE_SYS_DSN = 6,ODBC_REMOVE_DEFAULT_DSN = 7,ODBC_INSTALL_INQUIRY = 1,ODBC_INSTALL_COMPLETE = 2,ODBC_INSTALL_DRIVER = 1,ODBC_REMOVE_DRIVER = 2,ODBC_CONFIG_DRIVER = 3,ODBC_CONFIG_DRIVER_MAX = 100,ODBC_BOTH_DSN = 0,ODBC_USER_DSN = 1,ODBC_SYSTEM_DSN = 2,ODBC_ERROR_GENERAL_ERR = 1,ODBC_ERROR_INVALID_BUFF_LEN = 2,ODBC_ERROR_INVALID_HWND = 3,ODBC_ERROR_INVALID_STR = 4,ODBC_ERROR_INVALID_REQUEST_TYPE = 5,ODBC_ERROR_COMPONENT_NOT_FOUND = 6,ODBC_ERROR_INVALID_NAME = 7,ODBC_ERROR_INVALID_KEYWORD_VALUE = 8,ODBC_ERROR_INVALID_DSN = 9,ODBC_ERROR_INVALID_INF = 10,ODBC_ERROR_REQUEST_FAILED = 11,ODBC_ERROR_INVALID_PATH = 12,ODBC_ERROR_LOAD_LIB_FAILED = 13,ODBC_ERROR_INVALID_PARAM_SEQUENCE = 14,ODBC_ERROR_INVALID_LOG_FILE = 15,ODBC_ERROR_USER_CANCELED = 16,ODBC_ERROR_USAGE_UPDATE_FAILED = 17,ODBC_ERROR_CREATE_DSN_FAILED = 18,ODBC_ERROR_WRITING_SYSINFO_FAILED = 19,ODBC_ERROR_REMOVE_DSN_FAILED = 20,ODBC_ERROR_OUT_OF_MEM = 21,ODBC_ERROR_OUTPUT_STRING_TRUNCATED = 22,ODBC_ERROR_DRIVER_SPECIFIC = 23,};
enum MACRO_ODBCVER {ODBCVER = 0x300,};
enum MACRO_OFLOW {CDSR_OFLOW = 0x80000,CCAR_OFLOW = 0x100000,};
enum MACRO_OID {OID_AUTO = -1,};
enum MACRO_OK {OK = 0,_SUBWIN = 1,_ENDLINE = 2,_FULLWIN = 4,_SCROLLWIN = 8,_ISPAD = 16,_HASMOVED = 32,_WRAPPED = 64,};
enum MACRO_OLD {OLD_MEMORY_OBJECT_BEHAVIOR_INFO = 10,OLD_MEMORY_OBJECT_ATTRIBUTE_INFO = 12,};
enum MACRO_OLD_ENV {OLD_ENV_VAR = 1,OLD_ENV_VALUE = 0,};
enum MACRO_OMAGIC {OMAGIC = 0x107,};
enum MACRO_ONLY {USERDSN_ONLY = 0,SYSTEMDSN_ONLY = 1,};
enum MACRO_OPOST {OPOST = 0x1,ONLCR = 0x2,OXTABS = 0x4,ONOEOT = 0x8,};
enum MACRO_OPTION {OPTION_LEFT = 270,OPTION_RIGHT = 271,};
enum MACRO_ORDINARY {ORDINARY = 0,CONTROL = 1,BACKSPACE = 2,};
enum MACRO_OTIOCCONS {OTIOCCONS = 536900706,};
enum MACRO_OTTYDISC {OTTYDISC = 0,NETLDISC = 1,NTTYDISC = 2,};
enum MACRO_OVERFLOW {OVERFLOW = 3,UNDERFLOW = 4,};
enum MACRO_OVERRIDE {OVERRIDE_UNKNOWN_PERMISSIONS = 0,};
enum MACRO_O_NDELAY {O_NDELAY = 4,};
enum MACRO_O_NONBLOCK {O_NONBLOCK = 0x4,O_APPEND = 0x8,O_SHLOCK = 0x10,O_EXLOCK = 0x20,O_ASYNC = 0x40,O_FSYNC = 0x80,O_NOFOLLOW = 0x100,O_CREAT = 0x200,O_TRUNC = 0x400,O_EXCL = 0x800,O_NOCTTY = 0x0,};
enum MACRO_O_ONEVALUE {O_ONEVALUE = 0x1,O_SHOWDESC = 0x2,O_ROWMAJOR = 0x4,O_IGNORECASE = 0x8,O_SHOWMATCH = 0x10,O_NONCYCLIC = 0x20,O_SELECTABLE = 0x1,};
enum MACRO_O_POPUP {O_POPUP = 0x80000000,O_ALERT = 0x20000000,};
enum MACRO_O_VISIBLE {O_VISIBLE = 0x1,O_ACTIVE = 0x2,O_PUBLIC = 0x4,O_EDIT = 0x8,O_WRAP = 0x10,O_BLANK = 0x20,O_AUTOSKIP = 0x40,O_NULLOK = 0x80,O_PASSOK = 0x100,O_STATIC = 0x200,O_NL_OVERLOAD = 0x1,O_BS_OVERLOAD = 0x2,};
enum MACRO_P {P_ADVLOCK = 0x1,P_CONTROLT = 0x2,P_INMEM = 0x4,P_NOCLDSTOP = 0x8,P_PPWAIT = 0x10,P_PROFIL = 0x20,P_SELECT = 0x40,P_SINTR = 0x80,P_SUGID = 0x100,P_SYSTEM = 0x200,P_TIMEOUT = 0x400,P_TRACED = 0x800,P_WAITED = 0x1000,P_WEXIT = 0x2000,P_EXEC = 0x4000,P_OWEUPC = 0x8000,P_FSTRACE = 0x10000,P_SSTEP = 0x20000,P_WAITING = 0x40000,P_KDEBUG = 0x80000,P_TTYSLEEP = 0x100000,P_REBOOT = 0x200000,P_TBE = 0x400000,P_SIGEXC = 0x800000,P_BTRACE = 0x1000000,P_VFORK = 0x2000000,P_NOATTACH = 0x4000000,P_INVFORK = 0x8000000,P_NOSHLIB = 0x10000000,P_FORCEQUOTA = 0x20000000,P_NOCLDWAIT = 0x40000000,P_NOSWAP = 0x0,P_PHYSIO = 0x0,};
enum MACRO_PACKETSZ {PACKETSZ = 512,};
enum MACRO_PAM {PAM_SUCCESS = 0,PAM_OPEN_ERR = 1,PAM_SYMBOL_ERR = 2,PAM_SERVICE_ERR = 3,PAM_SYSTEM_ERR = 4,PAM_BUF_ERR = 5,PAM_PERM_DENIED = 6,PAM_AUTH_ERR = 7,PAM_CRED_INSUFFICIENT = 8,PAM_AUTHINFO_UNAVAIL = 9,PAM_USER_UNKNOWN = 10,PAM_MAXTRIES = 11,PAM_NEW_AUTHTOK_REQD = 12,PAM_ACCT_EXPIRED = 13,PAM_SESSION_ERR = 14,PAM_CRED_UNAVAIL = 15,PAM_CRED_EXPIRED = 16,PAM_CRED_ERR = 17,PAM_NO_MODULE_DATA = 18,PAM_CONV_ERR = 19,PAM_AUTHTOK_ERR = 20,PAM_AUTHTOK_RECOVER_ERR = 21,PAM_AUTHTOK_LOCK_BUSY = 22,PAM_AUTHTOK_DISABLE_AGING = 23,PAM_TRY_AGAIN = 24,PAM_IGNORE = 25,PAM_ABORT = 26,PAM_AUTHTOK_EXPIRED = 27,PAM_MODULE_UNKNOWN = 28,PAM_BAD_ITEM = 29,PAM_CONV_AGAIN = 30,PAM_INCOMPLETE = 31,};
enum MACRO_PAM_DYLD {PAM_DYLD = 1,};
enum MACRO_PAM_SILENT {PAM_SILENT = 0x8000,PAM_DISALLOW_NULL_AUTHTOK = 0x1,PAM_ESTABLISH_CRED = 0x2,PAM_DELETE_CRED = 0x4,PAM_REINITIALIZE_CRED = 0x8,PAM_REFRESH_CRED = 0x10,PAM_CHANGE_EXPIRED_AUTHTOK = 0x20,PAM_SERVICE = 0x1,PAM_USER = 0x2,PAM_TTY = 0x3,PAM_RHOST = 0x4,PAM_CONV = 0x5,PAM_RUSER = 0x8,PAM_USER_PROMPT = 0x9,PAM_FAIL_DELAY = 0xA,PAM_DATA_SILENT = 0x40000000,PAM_PROMPT_ECHO_OFF = 0x1,PAM_PROMPT_ECHO_ON = 0x2,PAM_ERROR_MSG = 0x3,PAM_TEXT_INFO = 0x4,PAM_RADIO_TYPE = 0x5,PAM_BINARY_PROMPT = 0x7,PAM_MAX_NUM_MSG = 0x20,PAM_MAX_MSG_SIZE = 0x200,PAM_MAX_RESP_SIZE = 0x200,PAM_AUTHTOK = 0x6,PAM_OLDAUTHTOK = 0x7,PAM_PRELIM_CHECK = 0x4000,PAM_UPDATE_AUTHTOK = 0x2000,PAM_DATA_REPLACE = 0x20000000,PAM_BP_MAX_LENGTH = 0x20000,PAM_BPC_FALSE = 0x0,PAM_BPC_TRUE = 0x1,PAM_BPC_OK = 0x1,PAM_BPC_SELECT = 0x2,PAM_BPC_DONE = 0x3,PAM_BPC_FAIL = 0x4,PAM_BPC_GETENV = 0x41,PAM_BPC_PUTENV = 0x42,PAM_BPC_TEXT = 0x43,PAM_BPC_ERROR = 0x44,PAM_BPC_PROMPT = 0x45,PAM_BPC_PASS = 0x46,PAM_OPT_DEBUG = 0x1,PAM_OPT_NO_WARN = 0x2,PAM_OPT_USE_FIRST_PASS = 0x4,PAM_OPT_TRY_FIRST_PASS = 0x8,PAM_OPT_USE_MAPPED_PASS = 0x10,PAM_OPT_ECHO_PASS = 0x20,};
enum MACRO_PAP {PAP_TIMEOUT = 120,};
enum MACRO_PASS {PASS_MAX = 128,};
enum MACRO_PCAP {PCAP_VERSION_MAJOR = 2,PCAP_VERSION_MINOR = 4,PCAP_ERRBUF_SIZE = 256,};
enum MACRO_PERMISSION {PERMISSION_DENIED = 4,};
enum MACRO_PER_SEC {USEC_PER_SEC = 1000000,NSEC_PER_SEC = 1000000000,};
enum MACRO_PF {PF_UNSPEC = 0,PF_LOCAL = 1,PF_UNIX = 1,PF_INET = 2,PF_IMPLINK = 3,PF_PUP = 4,PF_CHAOS = 5,PF_NS = 6,PF_ISO = 7,PF_OSI = 7,PF_ECMA = 8,PF_DATAKIT = 9,PF_CCITT = 10,PF_SNA = 11,PF_DECnet = 12,PF_DLI = 13,PF_LAT = 14,PF_HYLINK = 15,PF_APPLETALK = 16,PF_ROUTE = 17,PF_LINK = 18,PF_XTP = 19,PF_COIP = 20,PF_CNT = 21,PF_SIP = 24,PF_IPX = 23,PF_RTIP = 22,PF_PIP = 25,PF_NDRV = 27,PF_ISDN = 28,PF_KEY = 29,PF_INET6 = 30,PF_NATM = 31,PF_SYSTEM = 32,PF_NETBIOS = 33,PF_PPP = 34,PF_MAX = 36,};
enum MACRO_PFKEY {PFKEY_SOFT_LIFETIME_RATE = 80,};
enum MACRO_PFKEYV2 {PFKEYV2_REVISION = 199806,};
enum MACRO_PF_KEY {PF_KEY_V2 = 2,};
enum MACRO_PGOFSET {PGOFSET = 4095,};
enum MACRO_PGSHIFT {PGSHIFT = 12,NBSEG = 1073741824,};
enum MACRO_PIDLOCK {PIDLOCK_NONBLOCK = 1,PIDLOCK_USEHOSTNAME = 2,};
enum MACRO_PIM {PIM_VERSION = 2,PIM_MINLEN = 8,};
enum MACRO_PIM6 {PIM6_REG_MINLEN = 48,};
enum MACRO_PIM_REGISTER {PIM_REGISTER = 1,PIM_NULL_REGISTER = 1073741824,};
enum MACRO_PIPE {PIPE_BUF = 512,};
enum MACRO_PK {PK_SYSCALL_BEGIN = 0x7000,};
enum MACRO_PL {PL_SHAREMOD = 0x1,};
enum MACRO_PLOCK {PLOCK = 36,};
enum MACRO_PLOSS {PLOSS = 6,};
enum MACRO_PMAPPORT {PMAPPORT = 111,};
enum MACRO_PMAPPROC {PMAPPROC_NULL = 0,PMAPPROC_SET = 1,PMAPPROC_UNSET = 2,PMAPPROC_GETPORT = 3,PMAPPROC_DUMP = 4,PMAPPROC_CALLIT = 5,};
enum MACRO_PMAPPROG {PMAPPROG = 100000,};
enum MACRO_PMAPVERS {PMAPVERS = 2,};
enum MACRO_PMAPVERS_PROTO {PMAPVERS_PROTO = 2,PMAPVERS_ORIG = 1,};
enum MACRO_POLICY {POLICY_NULL = 0,POLICY_TIMESHARE = 1,POLICY_RR = 2,POLICY_FIFO = 4,};
enum MACRO_POLICYCLASS {POLICYCLASS_FIXEDPRI = 6,};
enum MACRO_PORT : __int64 {PORT_NULL = 0,PORT_DEAD = 4294967295,};
enum MACRO_PORT_ONLINE {PORT_ONLINE = 32,PORT_SEEDING = 31,PORT_ACTIVATING = 16,PORT_ERR_NOZONE = 6,PORT_ERR_BADRTMP = 5,PORT_ERR_STARTUP = 4,PORT_ERR_CABLER = 3,PORT_ERR_SEED = 2,PORT_ONERROR = 1,PORT_OFFLINE = 0,};
enum MACRO_POSIX {POSIX_MADV_NORMAL = 0,POSIX_MADV_RANDOM = 1,POSIX_MADV_SEQUENTIAL = 2,POSIX_MADV_WILLNEED = 3,POSIX_MADV_DONTNEED = 4,};
enum MACRO_PPAUSE {PPAUSE = 40,};
enum MACRO_PPC {PPC_THREAD_STATE = 1,PPC_FLOAT_STATE = 2,PPC_EXCEPTION_STATE = 3,PPC_VECTOR_STATE = 4,};
enum MACRO_PPC_NFP {PPC_NFP_REGS = 32,};
enum MACRO_PPC_PGBYTES {PPC_PGBYTES = 4096,PPC_PGSHIFT = 12,};
enum MACRO_PPPDISC {PPPDISC = 5,};
enum MACRO_PR {PR_SLOWHZ = 2,PR_FASTHZ = 5,PR_ATOMIC = 1,PR_ADDR = 2,PR_CONNREQUIRED = 4,PR_WANTRCVD = 8,PR_RIGHTS = 16,PR_IMPLOPCL = 32,PR_LASTHDR = 64,};
enum MACRO_PRC {PRC_IFDOWN = 0,PRC_ROUTEDEAD = 1,PRC_IFUP = 2,PRC_QUENCH2 = 3,PRC_QUENCH = 4,PRC_MSGSIZE = 5,PRC_HOSTDEAD = 6,PRC_HOSTUNREACH = 7,PRC_UNREACH_NET = 8,PRC_UNREACH_HOST = 9,PRC_UNREACH_PROTOCOL = 10,PRC_UNREACH_PORT = 11,PRC_UNREACH_SRCFAIL = 13,PRC_REDIRECT_NET = 14,PRC_REDIRECT_HOST = 15,PRC_REDIRECT_TOSNET = 16,PRC_REDIRECT_TOSHOST = 17,PRC_TIMXCEED_INTRANS = 18,PRC_TIMXCEED_REASS = 19,PRC_PARAMPROB = 20,PRC_UNREACH_ADMIN_PROHIB = 21,PRC_NCMDS = 22,};
enum MACRO_PRCO {PRCO_GETOPT = 0,PRCO_SETOPT = 1,PRCO_NCMDS = 2,};
enum MACRO_PRELIM {PRELIM = 1,COMPLETE = 2,};
enum MACRO_PRIMASK {PRIMASK = 0xFF,PCATCH = 0x100,PTTYBLOCK = 0x200,};
enum MACRO_PRIO {PRIO_MIN = -20,PRIO_MAX = 20,PRIO_PROCESS = 0,PRIO_PGRP = 1,PRIO_USER = 2,};
enum MACRO_PROCESSOR {PROCESSOR_PM_SET_REGS = 1,PROCESSOR_PM_SET_MMCR = 2,PROCESSOR_PM_CLR_PMC = 3,PROCESSOR_TEMPERATURE_COUNT = 1,PROCESSOR_INFO_MAX = 1024,PROCESSOR_SET_INFO_MAX = 1024,PROCESSOR_BASIC_INFO = 1,PROCESSOR_CPU_LOAD_INFO = 2,PROCESSOR_PM_REGS_INFO = 268435457,PROCESSOR_TEMPERATURE = 268435458,};
enum MACRO_PROCESSOR_SET {PROCESSOR_SET_BASIC_INFO = 5,PROCESSOR_SET_LOAD_INFO = 4,PROCESSOR_SET_ENABLED_POLICIES = 3,PROCESSOR_SET_TIMESHARE_DEFAULT = 10,PROCESSOR_SET_TIMESHARE_LIMITS = 11,PROCESSOR_SET_RR_DEFAULT = 20,PROCESSOR_SET_RR_LIMITS = 21,PROCESSOR_SET_FIFO_DEFAULT = 30,PROCESSOR_SET_FIFO_LIMITS = 31,};
enum MACRO_PROF {PROF_VERSION = -1429577728,PROF_MAGIC_NODE = -1429577727,PROF_NO_SECTION = -1429577726,PROF_NO_RELATION = -1429577725,PROF_ADD_NOT_SECTION = -1429577724,PROF_SECTION_WITH_VALUE = -1429577723,PROF_BAD_LINK_LIST = -1429577722,PROF_BAD_GROUP_LVL = -1429577721,PROF_BAD_PARENT_PTR = -1429577720,PROF_MAGIC_ITERATOR = -1429577719,PROF_SET_SECTION_VALUE = -1429577718,PROF_EINVAL = -1429577717,PROF_READ_ONLY = -1429577716,PROF_SECTION_NOTOP = -1429577715,PROF_SECTION_SYNTAX = -1429577714,PROF_RELATION_SYNTAX = -1429577713,PROF_EXTRA_CBRACE = -1429577712,PROF_MISSING_OBRACE = -1429577711,PROF_MAGIC_PROFILE = -1429577710,PROF_MAGIC_SECTION = -1429577709,PROF_TOPSECTION_ITER_NOSUPP = -1429577708,PROF_INVALID_SECTION = -1429577707,PROF_END_OF_SECTIONS = -1429577706,PROF_BAD_NAMESET = -1429577705,PROF_NO_PROFILE = -1429577704,PROF_MAGIC_FILE = -1429577703,PROF_MAGIC_FILE_DATA = -1429577702,PROF_FAIL_OPEN = -1429577701,PROF_EXISTS = -1429577700,PROF_BAD_BOOLEAN = -1429577699,PROF_BAD_INTEGER = -1429577698,};
enum MACRO_PROFILE {PROFILE_ITER_LIST_SECTION = 0x1,PROFILE_ITER_SECTIONS_ONLY = 0x2,PROFILE_ITER_RELATIONS_ONLY = 0x4,};
enum MACRO_PROT {PROT_NONE = 0x0,PROT_READ = 0x1,PROT_WRITE = 0x2,PROT_EXEC = 0x4,};
enum MACRO_PRU {PRU_ATTACH = 0,PRU_DETACH = 1,PRU_BIND = 2,PRU_LISTEN = 3,PRU_CONNECT = 4,PRU_ACCEPT = 5,PRU_DISCONNECT = 6,PRU_SHUTDOWN = 7,PRU_RCVD = 8,PRU_SEND = 9,PRU_ABORT = 10,PRU_CONTROL = 11,PRU_SENSE = 12,PRU_RCVOOB = 13,PRU_SENDOOB = 14,PRU_SOCKADDR = 15,PRU_PEERADDR = 16,PRU_CONNECT2 = 17,PRU_FASTTIMO = 18,PRU_SLOWTIMO = 19,PRU_PROTORCV = 20,PRU_PROTOSEND = 21,PRU_SEND_EOF = 22,PRU_NREQ = 22,};
enum MACRO_PSOCK {PSOCK = 24,PWAIT = 32,};
enum MACRO_PSWP {PSWP = 0,PVM = 4,PINOD = 8,PRIBIO = 16,};
enum MACRO_PT {PT_TRACE_ME = 0,PT_READ_I = 1,PT_READ_D = 2,PT_READ_U = 3,PT_WRITE_I = 4,PT_WRITE_D = 5,PT_WRITE_U = 6,PT_CONTINUE = 7,PT_KILL = 8,PT_STEP = 9,PT_ATTACH = 10,PT_DETACH = 11,PT_SIGEXC = 12,PT_THUPDATE = 13,PT_ATTACHEXC = 14,PT_FORCEQUOTA = 30,PT_DENY_ATTACH = 31,PT_FIRSTMACH = 32,};
enum MACRO_PTHREAD {PTHREAD_STACK_MIN = 8192,PTHREAD_DESTRUCTOR_ITERATIONS = 4,PTHREAD_KEYS_MAX = 128,};
enum MACRO_PTHREAD_CREATE {PTHREAD_CREATE_JOINABLE = 1,PTHREAD_CREATE_DETACHED = 2,PTHREAD_INHERIT_SCHED = 1,PTHREAD_EXPLICIT_SCHED = 2,PTHREAD_CANCEL_ENABLE = 1,PTHREAD_CANCEL_DISABLE = 0,PTHREAD_CANCEL_DEFERRED = 2,PTHREAD_CANCEL_ASYNCHRONOUS = 0,PTHREAD_SCOPE_SYSTEM = 1,PTHREAD_SCOPE_PROCESS = 2,PTHREAD_PROCESS_SHARED = 1,PTHREAD_PROCESS_PRIVATE = 2,PTHREAD_PRIO_NONE = 0,PTHREAD_PRIO_INHERIT = 1,PTHREAD_PRIO_PROTECT = 2,PTHREAD_MUTEX_NORMAL = 0,PTHREAD_MUTEX_ERRORCHECK = 1,PTHREAD_MUTEX_RECURSIVE = 2,PTHREAD_MUTEX_DEFAULT = 0,};
enum MACRO_PTRDIFF {PTRDIFF_MIN = -2147483648,PTRDIFF_MAX = 2147483647,};
enum MACRO_PUSER {PUSER = 50,};
enum MACRO_PVFS {PVFS = 20,};
enum MACRO_PZERO {PZERO = 22,};
enum MACRO_Q {Q_QUOTAON = 0x100,Q_QUOTAOFF = 0x200,Q_GETQUOTA = 0x300,Q_SETQUOTA = 0x400,Q_SETUSE = 0x500,Q_SYNC = 0x600,Q_QUOTASTAT = 0x700,};
enum MACRO_QF {QF_VERSION = 1,QF_USERS_PER_GB = 256,QF_MIN_USERS = 2048,QF_MAX_USERS = 2097152,QF_GROUPS_PER_GB = 32,QF_MIN_GROUPS = 2048,QF_MAX_GROUPS = 262144,};
enum MACRO_QFIXEDSZ {QFIXEDSZ = 4,RRFIXEDSZ = 10,};
enum MACRO_QMAGIC {QMAGIC = 0xCC,};
enum MACRO_QUAD : __int64 {QUAD_MIN = -9223372036854775808,};
enum MACRO_QUERY {QUERY = 0x0,IQUERY = 0x1,STATUS = 0x2,};
enum MACRO_QUERY_IS {QUERY_IS_SYSTEM_REGION = 0x4,};
enum MACRO_R {R_CURSOR = 1,};
enum MACRO_RAND {RAND_MAX = 0x7FFFFFFF,};
enum MACRO_RANLIBSKEW {RANLIBSKEW = 3,};
enum MACRO_RAW {RAW_PART = 2,};
enum MACRO_RB {RB_AUTOBOOT = 0,RB_ASKNAME = 1,RB_SINGLE = 2,RB_NOSYNC = 4,RB_KDB = 4,RB_HALT = 8,RB_INITNAME = 16,RB_DFLTROOT = 32,RB_ALTBOOT = 64,RB_UNIPROC = 128,RB_PANIC = 0,RB_BOOT = 1,};
enum MACRO_RD {RD_AP_UNDEC = 31,RD_AP_EXP = 32,RD_AP_NYV = 33,RD_AP_REPEAT = 34,RD_AP_NOT_US = 35,RD_AP_INCON = 36,RD_AP_TIME = 37,RD_AP_BADD = 38,RD_AP_VERSION = 39,RD_AP_MSG_TYPE = 40,RD_AP_MODIFIED = 41,RD_AP_ORDER = 42,RD_AP_UNAUTHOR = 43,};
enum MACRO_REC {REC_ESC = -1,REC_EOR = 1,REC_EOF = 2,};
enum MACRO_REFUSED {REFUSED = 5,};
enum MACRO_REG {REG_BASIC = 0x0,REG_EXTENDED = 0x1,REG_ICASE = 0x2,REG_NOSUB = 0x4,REG_NEWLINE = 0x8,REG_NOSPEC = 0x10,REG_PEND = 0x20,REG_DUMP = 0x80,REG_NOMATCH = 0x1,REG_BADPAT = 0x2,REG_ECOLLATE = 0x3,REG_ECTYPE = 0x4,REG_EESCAPE = 0x5,REG_ESUBREG = 0x6,REG_EBRACK = 0x7,REG_EPAREN = 0x8,REG_EBRACE = 0x9,REG_BADBR = 0xA,REG_ERANGE = 0xB,REG_ESPACE = 0xC,REG_BADRPT = 0xD,REG_EMPTY = 0xE,REG_ASSERT = 0xF,REG_INVARG = 0x10,REG_ATOI = 0xFF,REG_ITOA = 0x100,REG_NOTBOL = 0x1,REG_NOTEOL = 0x2,REG_STARTEND = 0x4,REG_TRACE = 0x100,REG_LARGE = 0x200,REG_BACKR = 0x400,};
enum MACRO_REPORT {REPORT_MOUSE_POSITION = 0x8000000,};
enum MACRO_REQ {REQ_NEXT_PAGE = 512,REQ_PREV_PAGE = 513,REQ_FIRST_PAGE = 514,REQ_LAST_PAGE = 515,REQ_NEXT_FIELD = 516,REQ_PREV_FIELD = 517,REQ_FIRST_FIELD = 518,REQ_LAST_FIELD = 519,REQ_SNEXT_FIELD = 520,REQ_SPREV_FIELD = 521,REQ_SFIRST_FIELD = 522,REQ_SLAST_FIELD = 523,REQ_LEFT_FIELD = 524,REQ_RIGHT_FIELD = 525,REQ_UP_FIELD = 526,REQ_DOWN_FIELD = 527,REQ_NEXT_CHAR = 528,REQ_PREV_CHAR = 529,REQ_NEXT_LINE = 530,REQ_PREV_LINE = 531,REQ_NEXT_WORD = 532,REQ_PREV_WORD = 533,REQ_BEG_FIELD = 534,REQ_END_FIELD = 535,REQ_BEG_LINE = 536,REQ_END_LINE = 537,REQ_LEFT_CHAR = 538,REQ_RIGHT_CHAR = 539,REQ_UP_CHAR = 540,REQ_DOWN_CHAR = 541,REQ_NEW_LINE = 542,REQ_INS_CHAR = 543,REQ_INS_LINE = 544,REQ_DEL_CHAR = 545,REQ_DEL_PREV = 546,REQ_DEL_LINE = 547,REQ_DEL_WORD = 548,REQ_CLR_EOL = 549,REQ_CLR_EOF = 550,REQ_CLR_FIELD = 551,REQ_OVL_MODE = 552,REQ_INS_MODE = 553,REQ_SCR_FLINE = 554,REQ_SCR_BLINE = 555,REQ_SCR_FPAGE = 556,REQ_SCR_BPAGE = 557,REQ_SCR_FHPAGE = 558,REQ_SCR_BHPAGE = 559,REQ_SCR_FCHAR = 560,REQ_SCR_BCHAR = 561,REQ_SCR_HFLINE = 562,REQ_SCR_HBLINE = 563,REQ_SCR_HFHALF = 564,REQ_SCR_HBHALF = 565,REQ_VALIDATION = 566,REQ_NEXT_CHOICE = 567,REQ_PREV_CHOICE = 568,};
enum MACRO_REQ_LEFT {REQ_LEFT_ITEM = 512,REQ_RIGHT_ITEM = 513,REQ_UP_ITEM = 514,REQ_DOWN_ITEM = 515,REQ_SCR_ULINE = 516,REQ_SCR_DLINE = 517,REQ_SCR_DPAGE = 518,REQ_SCR_UPAGE = 519,REQ_FIRST_ITEM = 520,REQ_LAST_ITEM = 521,REQ_NEXT_ITEM = 522,REQ_PREV_ITEM = 523,REQ_TOGGLE_ITEM = 524,REQ_CLEAR_PATTERN = 525,REQ_BACK_PATTERN = 526,REQ_NEXT_MATCH = 527,REQ_PREV_MATCH = 528,};
enum MACRO_RES {RES_TIMEOUT = 5,};
enum MACRO_RES_MAXNDOTS {RES_MAXNDOTS = 15,RES_INIT = 1,RES_DEBUG = 2,RES_AAONLY = 4,RES_USEVC = 8,RES_PRIMARY = 16,RES_IGNTC = 32,RES_RECURSE = 64,RES_DEFNAMES = 128,RES_STAYOPEN = 256,RES_DNSRCH = 512,RES_INSECURE1 = 1024,RES_INSECURE2 = 2048,RES_NOALIASES = 4096,RES_DEFAULT = 704,RES_PRF_STATS = 1,RES_PRF_CLASS = 4,RES_PRF_CMD = 8,RES_PRF_QUES = 16,RES_PRF_ANS = 32,RES_PRF_AUTH = 64,RES_PRF_ADD = 128,RES_PRF_HEAD1 = 256,RES_PRF_HEAD2 = 512,RES_PRF_TTLID = 1024,RES_PRF_HEADX = 2048,RES_PRF_QUERY = 4096,RES_PRF_REPLY = 8192,RES_PRF_INIT = 16384,};
enum MACRO_RET {RET_ERROR = -1,RET_SUCCESS = 0,RET_SPECIAL = 1,};
enum MACRO_RETRY_TIMEOUT {CLSET_RETRY_TIMEOUT = 4,CLGET_RETRY_TIMEOUT = 5,};
enum MACRO_RETURN {RETURN = 6,};
enum MACRO_RET_TKFIL {RET_TKFIL = 21,RET_NOTKT = 22,};
enum MACRO_RING {RING_WAIT = 30,};
enum MACRO_RIPCMD {RIPCMD_REQUEST = 1,RIPCMD_RESPONSE = 2,RIPCMD_TRACEON = 3,RIPCMD_TRACEOFF = 4,RIPCMD_MAX = 5,};
enum MACRO_RIPVERSION {RIPVERSION = 1,};
enum MACRO_RLIM : __int64 {RLIM_NLIMITS = 9,RLIM_INFINITY = 9223372036854775807,};
enum MACRO_RLIMIT {RLIMIT_CPU = 0,RLIMIT_FSIZE = 1,RLIMIT_DATA = 2,RLIMIT_STACK = 3,RLIMIT_CORE = 4,RLIMIT_RSS = 5,RLIMIT_MEMLOCK = 6,RLIMIT_NPROC = 7,RLIMIT_NOFILE = 8,};
enum MACRO_RNF {RNF_NORMAL = 1,RNF_ROOT = 2,RNF_ACTIVE = 4,};
enum MACRO_RPC {RPC_SIGBUF_SIZE = 8,RPC_SUBSYSTEM_NULL = 0,};
enum MACRO_RPCAKN {RPCAKN_FULLNAME = 0,RPCAKN_NICKNAME = 1,};
enum MACRO_RPCAUTH {RPCAUTH_NULL = 0,RPCAUTH_UNIX = 1,RPCAUTH_SHORT = 2,RPCAUTH_KERB4 = 4,RPCAUTH_NQNFS = 300000,RPCAUTH_MAXSIZ = 400,};
enum MACRO_RPCAUTH_UNIXGIDS {RPCAUTH_UNIXGIDS = 16,};
enum MACRO_RPCGEN {RPCGEN_VERSION = 199506,};
enum MACRO_RPCMNT {RPCMNT_VER1 = 1,RPCMNT_VER3 = 3,RPCMNT_MOUNT = 1,RPCMNT_DUMP = 2,RPCMNT_UMOUNT = 3,RPCMNT_UMNTALL = 4,RPCMNT_EXPORT = 5,RPCMNT_NAMELEN = 255,RPCMNT_PATHLEN = 1024,};
enum MACRO_RPCPROG {RPCPROG_MNT = 100005,};
enum MACRO_RPCPROG_NFS {RPCPROG_NFS = 100003,};
enum MACRO_RPCSMALLMSGSIZE {RPCSMALLMSGSIZE = 400,};
enum MACRO_RPCTEST {RPCTEST_PROGRAM = 1,RPCTEST_VERSION = 1,RPCTEST_NULL_PROC = 2,RPCTEST_NULL_BATCH_PROC = 3,};
enum MACRO_RPCVERF {RPCVERF_MAXSIZ = 12,};
enum MACRO_RPCX {RPCX_FULLVERF = 12,RPCX_FULLBLOCK = 16,RPCX_NICKVERF = 16,};
enum MACRO_RPC_ANYSOCK {RPC_ANYSOCK = -1,};
enum MACRO_RPC_CALL {RPC_CALL = 0,RPC_REPLY = 1,RPC_MSGACCEPTED = 0,RPC_MSGDENIED = 1,RPC_PROGMISMATCH = 2,RPC_GARBAGE = 4,RPC_AUTHERR = 1,};
enum MACRO_RPC_MSG {RPC_MSG_VERSION = 2,RPC_SERVICE_PORT = 2048,};
enum MACRO_RPC_SIZ {RPC_SIZ = 24,RPC_REPLYSIZ = 28,};
enum MACRO_RPC_VER2 {RPC_VER2 = 2,};
enum MACRO_RPM {RPM_PCO_ADD = 1,RPM_PCO_CHANGE = 2,RPM_PCO_SETGLOBAL = 3,RPM_PCO_MAX = 4,};
enum MACRO_RQ {RQ_FILE = 1,RQ_DAEMON = 2,RQ_USER = 3,RQ_CLIENT_NAME = 4,RQ_CLIENT_ADDR = 5,RQ_CLIENT_SIN = 6,RQ_SERVER_NAME = 7,RQ_SERVER_ADDR = 8,RQ_SERVER_SIN = 9,};
enum MACRO_RQUOTAPROC {RQUOTAPROC_GETQUOTA = 1,RQUOTAPROC_GETACTIVEQUOTA = 2,};
enum MACRO_RQUOTAPROG {RQUOTAPROG = 100011,};
enum MACRO_RQUOTAVERS {RQUOTAVERS = 1,};
enum MACRO_RQ_PATHLEN {RQ_PATHLEN = 1024,};
enum MACRO_RR0 {RR0_RXAVAIL = 0x1,RR0_ZERO_COUNT = 0x2,RR0_TXEMPTY = 0x4,RR0_DCD = 0x8,RR0_SYNC_HUNT = 0x10,RR0_CTS = 0x20,RR0_TXUNDER = 0x40,RR0_BREAK = 0x80,};
enum MACRO_RR1 {RR1_ALLSENT = 0x1,RR1_RESCODE2 = 0x2,RR1_RESCODE1 = 0x4,RR1_RESCODE0 = 0x8,RR1_PARITY = 0x10,RR1_RXOVER = 0x20,RR1_FRAME = 0x40,RR1_EOF = 0x80,};
enum MACRO_RR10 {RR10_ONLOOP = 0x2,RR10_LOOPSEND = 0x10,RR10_MISS2 = 0x40,RR10_MISS1 = 0x80,};
enum MACRO_RR3 {RR3_B_STATIP = 0x1,RR3_B_TXIP = 0x2,RR3_B_RXIP = 0x4,RR3_A_STATIP = 0x8,RR3_A_TXIP = 0x10,RR3_A_RXIP = 0x20,RR3_A_IP = 0x38,RR3_B_IP = 0x7,};
enum MACRO_RRQ {RRQ = 0x1,WRQ = 0x2,};
enum MACRO_RT {RT_MAX = 4096,RT_MIN = 128,RT_DEFAULT = 1024,};
enum MACRO_RTA {RTA_DST = 0x1,RTA_GATEWAY = 0x2,RTA_NETMASK = 0x4,RTA_GENMASK = 0x8,RTA_IFP = 0x10,RTA_IFA = 0x20,RTA_AUTHOR = 0x40,RTA_BRD = 0x80,};
enum MACRO_RTAX {RTAX_DST = 0,RTAX_GATEWAY = 1,RTAX_NETMASK = 2,RTAX_GENMASK = 3,RTAX_IFP = 4,RTAX_IFA = 5,RTAX_AUTHOR = 6,RTAX_BRD = 7,RTAX_MAX = 8,};
enum MACRO_RTE {RTE_STATE_UNUSED = 0,RTE_STATE_BAD = 2,RTE_STATE_SUSPECT = 4,RTE_STATE_GOOD = 8,RTE_STATE_ZKNOWN = 16,RTE_STATE_UPDATED = 32,RTE_STATE_BKUP = 64,RTE_STATE_PERMANENT = 128,};
enum MACRO_RTF {RTF_UP = 0x1,RTF_GATEWAY = 0x2,RTF_HOST = 0x4,RTF_REJECT = 0x8,RTF_DYNAMIC = 0x10,RTF_MODIFIED = 0x20,RTF_DONE = 0x40,RTF_DELCLONE = 0x80,RTF_CLONING = 0x100,RTF_XRESOLVE = 0x200,RTF_LLINFO = 0x400,RTF_STATIC = 0x800,RTF_BLACKHOLE = 0x1000,RTF_PROTO2 = 0x4000,RTF_PROTO1 = 0x8000,RTF_PRCLONING = 0x10000,RTF_WASCLONED = 0x20000,RTF_PROTO3 = 0x40000,RTF_PINNED = 0x100000,RTF_LOCAL = 0x200000,RTF_BROADCAST = 0x400000,RTF_MULTICAST = 0x800000,};
enum MACRO_RTF_PROBEMTU {RTF_PROBEMTU = 32768,};
enum MACRO_RTF_USETRAILERS {RTF_USETRAILERS = 32768,RTF_ANNOUNCE = 16384,};
enum MACRO_RTM {RTM_RTTUNIT = 1000000,};
enum MACRO_RTMP {RTMP_IDLENGTH = 4,RTMP_VERSION_NUMBER = 130,};
enum MACRO_RTMPHOPS {RTMPHOPS = 1347,};
enum MACRO_RTMPNEXTHOP {RTMPNEXTHOP = 1348,};
enum MACRO_RTMPPORT {RTMPPORT = 1349,};
enum MACRO_RTMPRANGEEND {RTMPRANGEEND = 1350,};
enum MACRO_RTMPRANGESTART {RTMPRANGESTART = 1351,};
enum MACRO_RTMPSTATE {RTMPSTATE = 1352,};
enum MACRO_RTMPTYPE {RTMPTYPE = 1354,};
enum MACRO_RTMP_REQ {RTMP_REQ_FUNC1 = 0x1,RTMP_REQ_FUNC2 = 0x2,RTMP_REQ_FUNC3 = 0x3,RTMP_ROUTER_AGE = 0x32,RTMP_TUPLE_SIZE = 0x3,RTMP_RANGE_FLAG = 0x80,RTMP_DISTANCE = 0xF,};
enum MACRO_RTM_VERSION {RTM_VERSION = 5,RTM_ADD = 1,RTM_DELETE = 2,RTM_CHANGE = 3,RTM_GET = 4,RTM_LOSING = 5,RTM_REDIRECT = 6,RTM_MISS = 7,RTM_LOCK = 8,RTM_OLDADD = 9,RTM_OLDDEL = 10,RTM_RESOLVE = 11,RTM_NEWADDR = 12,RTM_DELADDR = 13,RTM_IFINFO = 14,RTM_NEWMADDR = 15,RTM_DELMADDR = 16,};
enum MACRO_RTV {RTV_MTU = 0x1,RTV_HOPCOUNT = 0x2,RTV_EXPIRE = 0x4,RTV_RPIPE = 0x8,RTV_SPIPE = 0x10,RTV_SSTHRESH = 0x20,RTV_RTT = 0x40,RTV_RTTVAR = 0x80,};
enum MACRO_RT_MIX {RT_MIX_DEFAULT = 2000,};
enum MACRO_RUSAGE {RUSAGE_SELF = 0,RUSAGE_CHILDREN = -1,};
enum MACRO_RUSERS {RUSERS_MAXUSERLEN = 32,RUSERS_MAXLINELEN = 32,RUSERS_MAXHOSTLEN = 257,RUSERS_EMPTY = 0,RUSERS_RUN_LVL = 1,RUSERS_BOOT_TIME = 2,RUSERS_OLD_TIME = 3,RUSERS_NEW_TIME = 4,RUSERS_INIT_PROCESS = 5,RUSERS_LOGIN_PROCESS = 6,RUSERS_USER_PROCESS = 7,RUSERS_DEAD_PROCESS = 8,RUSERS_ACCOUNTING = 9,};
enum MACRO_RUSERSPROC {RUSERSPROC_NUM = 1,RUSERSPROC_NAMES = 2,RUSERSPROC_ALLNAMES = 3,};
enum MACRO_RUSERSPROG {RUSERSPROG = 100002,};
enum MACRO_RUSERSVERS {RUSERSVERS_ORIG = 1,RUSERSVERS_IDLE = 2,};
enum MACRO_RUSERSVERS_1 {RUSERSVERS_1 = 1,RUSERSVERS_2 = 2,};
enum MACRO_RUSERSVERS_3 {RUSERSVERS_3 = 3,};
enum MACRO_RW15 {RW15_ZEROCNTIE = 0x2,RW15_DCDIE = 0x8,RW15_SYNCIE = 0x10,RW15_CTSIE = 0x20,RW15_TXUNDERIE = 0x40,RW15_BREAKIE = 0x80,};
enum MACRO_R_DUP {R_DUP = 0x1,};
enum MACRO_R_FIRST {R_FIRST = 3,R_IAFTER = 4,R_IBEFORE = 5,R_LAST = 6,R_NEXT = 7,R_NOOVERWRITE = 8,R_PREV = 9,R_SETCURSOR = 10,R_RECNOSYNC = 11,};
enum MACRO_R_FIXEDLEN {R_FIXEDLEN = 0x1,R_NOKEY = 0x2,R_SNAPSHOT = 0x4,};
enum MACRO_RecvQSize {RecvQSize = 16384,};
enum MACRO_S {S_ISUID = 0x800,S_ISGID = 0x400,S_ISTXT = 0x200,S_IRWXU = 0x1C0,S_IRUSR = 0x100,S_IWUSR = 0x80,S_IXUSR = 0x40,S_IREAD = 0x100,S_IWRITE = 0x80,S_IEXEC = 0x40,S_IRWXG = 0x38,S_IRGRP = 0x20,S_IWGRP = 0x10,S_IXGRP = 0x8,S_IRWXO = 0x7,S_IROTH = 0x4,S_IWOTH = 0x2,S_IXOTH = 0x1,S_IFMT = 0xF000,S_IFIFO = 0x1000,S_IFCHR = 0x2000,S_IFDIR = 0x4000,S_IFBLK = 0x6000,S_IFREG = 0x8000,S_IFLNK = 0xA000,S_IFSOCK = 0xC000,S_IFWHT = 0xE000,S_ISVTX = 0x200,};
enum MACRO_SA {SA_ONSTACK = 0x1,SA_RESTART = 0x2,SA_DISABLE = 0x4,SA_RESETHAND = 0x4,SA_NODEFER = 0x10,SA_NOCLDWAIT = 0x20,SA_SIGINFO = 0x40,SA_USERTRAMP = 0x100,SA_NOCLDSTOP = 0x8,};
enum MACRO_SACK_PERMITTED {TCPOPT_SACK_PERMITTED = 4,TCPOLEN_SACK_PERMITTED = 2,};
enum MACRO_SADB {SADB_RESERVED = 0,SADB_GETSPI = 1,SADB_UPDATE = 2,SADB_ADD = 3,SADB_DELETE = 4,SADB_GET = 5,SADB_ACQUIRE = 6,SADB_REGISTER = 7,SADB_EXPIRE = 8,SADB_FLUSH = 9,SADB_DUMP = 10,SADB_X_PROMISC = 11,SADB_X_PCHANGE = 12,SADB_X_SPDUPDATE = 13,SADB_X_SPDADD = 14,SADB_X_SPDDELETE = 15,SADB_X_SPDGET = 16,SADB_X_SPDACQUIRE = 17,SADB_X_SPDDUMP = 18,SADB_X_SPDFLUSH = 19,SADB_X_SPDSETIDX = 20,SADB_X_SPDEXPIRE = 21,SADB_X_SPDDELETE2 = 22,SADB_MAX = 22,SADB_EXT_RESERVED = 0,SADB_EXT_SA = 1,SADB_EXT_LIFETIME_CURRENT = 2,SADB_EXT_LIFETIME_HARD = 3,SADB_EXT_LIFETIME_SOFT = 4,SADB_EXT_ADDRESS_SRC = 5,SADB_EXT_ADDRESS_DST = 6,SADB_EXT_ADDRESS_PROXY = 7,SADB_EXT_KEY_AUTH = 8,SADB_EXT_KEY_ENCRYPT = 9,SADB_EXT_IDENTITY_SRC = 10,SADB_EXT_IDENTITY_DST = 11,SADB_EXT_SENSITIVITY = 12,SADB_EXT_PROPOSAL = 13,SADB_EXT_SUPPORTED_AUTH = 14,SADB_EXT_SUPPORTED_ENCRYPT = 15,SADB_EXT_SPIRANGE = 16,SADB_X_EXT_KMPRIVATE = 17,SADB_X_EXT_POLICY = 18,SADB_X_EXT_SA2 = 19,SADB_EXT_MAX = 19,SADB_SATYPE_UNSPEC = 0,SADB_SATYPE_AH = 2,SADB_SATYPE_ESP = 3,SADB_SATYPE_RSVP = 5,SADB_SATYPE_OSPFV2 = 6,SADB_SATYPE_RIPV2 = 7,SADB_SATYPE_MIP = 8,SADB_X_SATYPE_IPCOMP = 9,SADB_X_SATYPE_POLICY = 10,SADB_SATYPE_MAX = 11,SADB_SASTATE_LARVAL = 0,SADB_SASTATE_MATURE = 1,SADB_SASTATE_DYING = 2,SADB_SASTATE_DEAD = 3,SADB_SASTATE_MAX = 3,SADB_SAFLAGS_PFS = 1,SADB_AALG_NONE = 0,SADB_AALG_MD5HMAC = 1,SADB_AALG_SHA1HMAC = 2,SADB_AALG_MAX = 8,SADB_X_AALG_SHA2_256 = 6,SADB_X_AALG_SHA2_384 = 7,SADB_X_AALG_SHA2_512 = 8,SADB_X_AALG_MD5 = 3,SADB_X_AALG_SHA = 4,SADB_X_AALG_NULL = 5,SADB_EALG_NONE = 0,SADB_EALG_DESCBC = 1,SADB_EALG_3DESCBC = 2,SADB_EALG_NULL = 3,SADB_EALG_MAX = 12,SADB_X_EALG_CAST128CBC = 5,SADB_X_EALG_BLOWFISHCBC = 4,SADB_X_EALG_RIJNDAELCBC = 12,SADB_X_EALG_AES = 12,SADB_X_CALG_NONE = 0,SADB_X_CALG_OUI = 1,SADB_X_CALG_DEFLATE = 2,SADB_X_CALG_LZS = 3,SADB_X_CALG_MAX = 4,SADB_IDENTTYPE_RESERVED = 0,SADB_IDENTTYPE_PREFIX = 1,SADB_IDENTTYPE_FQDN = 2,SADB_IDENTTYPE_USERFQDN = 3,SADB_X_IDENTTYPE_ADDR = 4,SADB_IDENTTYPE_MAX = 4,SADB_X_EXT_NONE = 0,SADB_X_EXT_OLD = 1,SADB_X_EXT_IV4B = 16,SADB_X_EXT_DERIV = 32,SADB_X_EXT_CYCSEQ = 64,SADB_X_EXT_PSEQ = 0,SADB_X_EXT_PRAND = 256,SADB_X_EXT_PZERO = 512,SADB_X_EXT_PMASK = 768,SADB_X_EXT_RAWCPI = 128,SADB_KEY_FLAGS_MAX = 4095,SADB_X_LIFETIME_ALLOCATIONS = 0,SADB_X_LIFETIME_BYTES = 1,SADB_X_LIFETIME_ADDTIME = 2,SADB_X_LIFETIME_USETIME = 3,};
enum MACRO_SAFE {SAFE_PRIV_ERROR = -1,};
enum MACRO_SARMAG {SARMAG = 8,};
enum MACRO_SAS {SAS_OLDMASK = 0x1,SAS_ALTSTACK = 0x2,};
enum MACRO_SA_KILL {SA_KILL = 0x1,SA_CORE = 0x2,SA_STOP = 0x4,SA_TTYSTOP = 0x8,SA_IGNORE = 0x10,SA_CONT = 0x20,SA_CANTMASK = 0x40,};
enum MACRO_SB {SB = 250,};
enum MACRO_SB_MAX {SB_MAX = 262144,SB_LOCK = 1,SB_WANT = 2,SB_WAIT = 4,SB_SEL = 8,SB_ASYNC = 16,SB_UPCALL = 32,SB_NOINTR = 64,SB_NOTIFY = 28,SB_RECV = 32768,};
enum MACRO_SCHAR_MIN {SCHAR_MIN = -128,SCHAR_MAX = 127,};
enum MACRO_SCHED {SCHED_OTHER = 1,SCHED_FIFO = 4,SCHED_RR = 2,};
enum MACRO_SCM {SCM_RIGHTS = 0x1,SCM_TIMESTAMP = 0x2,SCM_CREDS = 0x3,};
enum MACRO_SCOPE {SCOPE_DELIMITER = 37,};
enum MACRO_SE {SE = 240,};
enum MACRO_SECSPERMIN {SECSPERMIN = 60,};
enum MACRO_SEEK {SEEK_SET = 0,SEEK_CUR = 1,SEEK_END = 2,};
enum MACRO_SEGOFSET {SEGOFSET = 1073741823,};
enum MACRO_SEGSHIFT {SEGSHIFT = 30,};
enum MACRO_SEGSIZE {SEGSIZE = 512,};
enum MACRO_SEGV {SEGV_NOOP = 0,SEGV_MAPERR = 1,SEGV_ACCERR = 2,};
enum MACRO_SEM {SEM_VALUE_MAX = 32767,SEM_FAILED = -1,};
enum MACRO_SEMAPHORE {SEMAPHORE_OPTION_NONE = 0x0,SEMAPHORE_SIGNAL = 0x1,SEMAPHORE_WAIT = 0x2,SEMAPHORE_WAIT_ON_SIGNAL = 0x8,SEMAPHORE_SIGNAL_TIMEOUT = 0x10,SEMAPHORE_SIGNAL_ALL = 0x20,SEMAPHORE_SIGNAL_INTERRUPT = 0x40,SEMAPHORE_SIGNAL_PREPOST = 0x80,SEMAPHORE_WAIT_TIMEOUT = 0x100,SEMAPHORE_WAIT_INTERRUPT = 0x400,SEMAPHORE_TIMEOUT_NOBLOCK = 0x100000,SEMAPHORE_TIMEOUT_RELATIVE = 0x200000,SEMAPHORE_USE_SAVED_RESULT = 0x1000000,SEMAPHORE_SIGNAL_RELEASE = 0x2000000,};
enum MACRO_SEM_A {SEM_A = 0x80,SEM_R = 0x100,};
enum MACRO_SEM_UNDO {SEM_UNDO = 0x1000,};
enum MACRO_SETALL {SETALL = 9,};
enum MACRO_SF {SF_SETTABLE = 0xFFFF0000,SF_ARCHIVED = 0x10000,SF_IMMUTABLE = 0x20000,SF_APPEND = 0x40000,};
enum MACRO_SF_PREV {SF_PREV_LOADED = 0x1,};
enum MACRO_SHARED {SHARED_TEXT_REGION_SIZE = 0x10000000,SHARED_DATA_REGION_SIZE = 0x10000000,SHARED_ALTERNATE_LOAD_BASE = 0x9000000,SHARED_TEXT_REGION_MASK = 0xFFFFFFF,SHARED_DATA_REGION_MASK = 0xFFFFFFF,SHARED_LIB_ALIAS = 0x10,};
enum MACRO_SHIFT {SHIFT_LEFT = 268,SHIFT_RIGHT = 269,};
enum MACRO_SHM {SHM_RDONLY = 0x1000,SHM_RND = 0x2000,};
enum MACRO_SHMLBA {SHMLBA = 4096,};
enum MACRO_SHM_R {SHM_R = 256,SHM_W = 128,};
enum MACRO_SHRT {SHRT_MIN = -32768,SHRT_MAX = 32767,};
enum MACRO_SHUT {SHUT_RD = 0,SHUT_WR = 1,SHUT_RDWR = 2,};
enum MACRO_SI {SI_USER = 0x10001,SI_QUEUE = 0x10002,SI_TIMER = 0x10003,SI_ASYNCIO = 0x10004,SI_MESGQ = 0x10005,};
enum MACRO_SIDL {SIDL = 1,SRUN = 2,};
enum MACRO_SIG {SIG_BLOCK = 1,SIG_UNBLOCK = 2,SIG_SETMASK = 3,};
enum MACRO_SIGEV {SIGEV_NONE = 0,SIGEV_SIGNAL = 1,SIGEV_THREAD = 3,};
enum MACRO_SIGNAL {SIGHUP = 1,SIGINT = 2,SIGQUIT = 3,SIGILL = 4,SIGTRAP = 5,SIGABRT = 6,SIGIOT = 6,SIGEMT = 7,SIGFPE = 8,SIGKILL = 9,SIGBUS = 10,SIGSEGV = 11,SIGSYS = 12,SIGPIPE = 13,SIGALRM = 14,SIGTERM = 15,SIGURG = 16,SIGSTOP = 17,SIGTSTP = 18,SIGCONT = 19,SIGCHLD = 20,SIGTTIN = 21,SIGTTOU = 22,SIGIO = 23,SIGXCPU = 24,SIGXFSZ = 25,SIGVTALRM = 26,SIGPROF = 27,SIGWINCH = 28,SIGINFO = 29,SIGUSR1 = 30,SIGUSR2 = 31,};
enum MACRO_SIGSTKSZ {SIGSTKSZ = 40960,};
enum MACRO_SIN {SIN_PROXY = 1,};
enum MACRO_SIZE {SIZE_MAX = -1,WCHAR_MAX = 2147483647,};
enum MACRO_SIZEOF {SIZEOF_LONG = 4,SIZEOF_INT = 4,SIZEOF_SHORT = 2,};
enum MACRO_SI_COLL {SI_COLL = 0x1,SI_RECORDED = 0x4,SI_INITED = 0x8,SI_CLEAR = 0x10,};
enum MACRO_SKDC {SKDC_RETRY = 56,SKDC_CANT = 57,};
enum MACRO_SL {SL_FATAL = 0x1,SL_NOTIFY = 0x2,SL_ERROR = 0x4,SL_TRACE = 0x8,};
enum MACRO_SLC {SLC_SYNCH = 1,SLC_BRK = 2,SLC_IP = 3,SLC_AO = 4,SLC_AYT = 5,SLC_EOR = 6,SLC_ABORT = 7,SLC_EOF = 8,SLC_SUSP = 9,SLC_EC = 10,SLC_EL = 11,SLC_EW = 12,SLC_RP = 13,SLC_LNEXT = 14,SLC_XON = 15,SLC_XOFF = 16,SLC_FORW1 = 17,SLC_FORW2 = 18,};
enum MACRO_SLC_NOSUPPORT {SLC_NOSUPPORT = 0,SLC_CANTCHANGE = 1,SLC_VARIABLE = 2,SLC_DEFAULT = 3,SLC_LEVELBITS = 3,SLC_FUNC = 0,SLC_FLAGS = 1,SLC_VALUE = 2,SLC_ACK = 128,SLC_FLUSHIN = 64,SLC_FLUSHOUT = 32,};
enum MACRO_SLOT {NAME_SERVER_SLOT = 0,ENVIRONMENT_SLOT = 1,SERVICE_SLOT = 2,};
enum MACRO_SM {SM_COW = 1,SM_PRIVATE = 2,SM_EMPTY = 3,SM_SHARED = 4,SM_TRUESHARED = 5,SM_PRIVATE_ALIASED = 6,SM_SHARED_ALIASED = 7,};
enum MACRO_SM_MAXSTRLEN {SM_MAXSTRLEN = 1024,SM_PROG = 100024,SM_VERS = 1,SM_STAT = 1,SM_MON = 2,SM_UNMON = 3,SM_UNMON_ALL = 4,SM_SIMU_CRASH = 5,};
enum MACRO_SNAP {SNAP_UI = 0x3,SNAP_AT_SAP = 0xAA,};
enum MACRO_SNMP {SNMP_TYPE_OTHER = 1,SNMP_TYPE_LOCAL = 2,SNMP_TYPE_ETHER1 = 3,SNMP_TYPE_ETHER2 = 4,SNMP_TYPE_TOKEN = 5,SNMP_TYPE_IP = 6,SNMP_TYPE_SERIALPPP = 7,SNMP_TYPE_SERIALNONSTD = 8,SNMP_TYPE_VIRTUAL = 9,SNMP_CFG_CONFIGURED = 1,SNMP_CFG_GARNERED = 2,SNMP_CFG_GUESSED = 3,SNMP_CFG_UNCONFIG = 4,SNMP_OBJ_TYPE_AARP = 256,SNMP_OBJ_TYPE_ECHO = 512,SNMP_OBJ_TYPE_PORT = 768,SNMP_OBJ_TYPE_DDP = 1024,SNMP_OBJ_TYPE_RTMP = 1280,SNMP_OBJ_TYPE_ZIP = 1536,SNMP_OBJ_TYPE_NBP = 1792,SNMP_OBJ_TYPE_MASK = 3840,};
enum MACRO_SO {SO_DEBUG = 0x1,SO_ACCEPTCONN = 0x2,SO_REUSEADDR = 0x4,SO_KEEPALIVE = 0x8,SO_DONTROUTE = 0x10,SO_BROADCAST = 0x20,SO_USELOOPBACK = 0x40,SO_LINGER = 0x80,SO_OOBINLINE = 0x100,SO_REUSEPORT = 0x200,SO_TIMESTAMP = 0x400,SO_DONTTRUNC = 0x2000,SO_WANTMORE = 0x4000,SO_WANTOOBFLAG = 0x8000,SO_SNDBUF = 0x1001,SO_RCVBUF = 0x1002,SO_SNDLOWAT = 0x1003,SO_RCVLOWAT = 0x1004,SO_SNDTIMEO = 0x1005,SO_RCVTIMEO = 0x1006,SO_ERROR = 0x1007,SO_TYPE = 0x1008,SO_NREAD = 0x1020,SO_NKE = 0x1021,SO_NOSIGPIPE = 0x1022,};
enum MACRO_SOCK {SOCK_STREAM = 1,SOCK_DGRAM = 2,SOCK_RAW = 3,SOCK_RDM = 4,SOCK_SEQPACKET = 5,};
enum MACRO_SOCKET {RTMP_SOCKET = 1,NBP_SOCKET = 2,EP_SOCKET = 4,ZIP_SOCKET = 6,};
enum MACRO_SOCK_MAXADDRLEN {SOCK_MAXADDRLEN = 255,};
enum MACRO_SOF {SOF_NOSIGPIPE = 0x1,};
enum MACRO_SOL {SOL_SOCKET = 0xFFFF,};
enum MACRO_SOL_NDRVPROTO {SOL_NDRVPROTO = 0,};
enum MACRO_SOMAXCONN {SOMAXCONN = 128,};
enum MACRO_SO_CACHE {SO_CACHE_FLUSH_INTERVAL = 1,SO_CACHE_TIME_LIMIT = 120,SO_CACHE_MAX_FREE_BATCH = 50,};
enum MACRO_SPRAYMAX {SPRAYMAX = 8845,};
enum MACRO_SPRAYOVERHEAD {SPRAYOVERHEAD = 86,};
enum MACRO_SPRAYPROC {SPRAYPROC_SPRAY = 1,SPRAYPROC_GET = 2,SPRAYPROC_CLEAR = 3,};
enum MACRO_SPRAYPROG {SPRAYPROG = 100012,};
enum MACRO_SPRAYVERS {SPRAYVERS = 1,};
enum MACRO_SQL {SQL_MAX_NUMERIC_LEN = 16,SQL_MAX_MESSAGE_LENGTH = 512,SQL_HANDLE_ENV = 1,SQL_HANDLE_DBC = 2,SQL_HANDLE_STMT = 3,SQL_HANDLE_DESC = 4,SQL_SUCCESS = 0,SQL_SUCCESS_WITH_INFO = 1,SQL_STILL_EXECUTING = 2,SQL_ERROR = -1,SQL_INVALID_HANDLE = -2,SQL_NEED_DATA = 99,SQL_NO_DATA = 100,SQL_NULL_DATA = -1,SQL_DATA_AT_EXEC = -2,SQL_NTS = -3,SQL_NTSL = -3,SQL_UNKNOWN_TYPE = 0,SQL_CHAR = 1,SQL_NUMERIC = 2,SQL_DECIMAL = 3,SQL_INTEGER = 4,SQL_SMALLINT = 5,SQL_FLOAT = 6,SQL_REAL = 7,SQL_DOUBLE = 8,SQL_DATETIME = 9,SQL_VARCHAR = 12,SQL_ALL_TYPES = 0,SQL_TYPE_DATE = 91,SQL_TYPE_TIME = 92,SQL_TYPE_TIMESTAMP = 93,SQL_DATE_LEN = 10,SQL_TIME_LEN = 8,SQL_TIMESTAMP_LEN = 19,SQL_NO_NULLS = 0,SQL_NULLABLE = 1,SQL_NULLABLE_UNKNOWN = 2,SQL_NULL_HENV = 0,SQL_NULL_HDBC = 0,SQL_NULL_HSTMT = 0,SQL_NULL_HDESC = 0,SQL_NULL_HANDLE = 0,SQL_FALSE = 0,SQL_TRUE = 1,SQL_DEFAULT = 99,SQL_FETCH_NEXT = 1,SQL_FETCH_FIRST = 2,SQL_FETCH_LAST = 3,SQL_FETCH_PRIOR = 4,SQL_FETCH_ABSOLUTE = 5,SQL_FETCH_RELATIVE = 6,SQL_CLOSE = 0,SQL_DROP = 1,SQL_UNBIND = 2,SQL_RESET_PARAMS = 3,SQL_ATTR_AUTO_IPD = 10001,SQL_ATTR_METADATA_ID = 10014,SQL_ARD_TYPE = -99,SQL_DESC_COUNT = 1001,SQL_DESC_TYPE = 1002,SQL_DESC_LENGTH = 1003,SQL_DESC_OCTET_LENGTH_PTR = 1004,SQL_DESC_PRECISION = 1005,SQL_DESC_SCALE = 1006,SQL_DESC_DATETIME_INTERVAL_CODE = 1007,SQL_DESC_NULLABLE = 1008,SQL_DESC_INDICATOR_PTR = 1009,SQL_DESC_DATA_PTR = 1010,SQL_DESC_NAME = 1011,SQL_DESC_UNNAMED = 1012,SQL_DESC_OCTET_LENGTH = 1013,SQL_DESC_ALLOC_TYPE = 1099,SQL_DESC_ALLOC_AUTO = 1,SQL_DESC_ALLOC_USER = 2,SQL_CODE_DATE = 1,SQL_CODE_TIME = 2,SQL_CODE_TIMESTAMP = 3,SQL_NAMED = 0,SQL_UNNAMED = 1,SQL_DIAG_RETURNCODE = 1,SQL_DIAG_NUMBER = 2,SQL_DIAG_ROW_COUNT = 3,SQL_DIAG_SQLSTATE = 4,SQL_DIAG_NATIVE = 5,SQL_DIAG_MESSAGE_TEXT = 6,SQL_DIAG_DYNAMIC_FUNCTION = 7,SQL_DIAG_CLASS_ORIGIN = 8,SQL_DIAG_SUBCLASS_ORIGIN = 9,SQL_DIAG_CONNECTION_NAME = 10,SQL_DIAG_SERVER_NAME = 11,SQL_DIAG_DYNAMIC_FUNCTION_CODE = 12,SQL_DIAG_ALTER_DOMAIN = 3,SQL_DIAG_ALTER_TABLE = 4,SQL_DIAG_CALL = 7,SQL_DIAG_CREATE_ASSERTION = 6,SQL_DIAG_CREATE_CHARACTER_SET = 8,SQL_DIAG_CREATE_COLLATION = 10,SQL_DIAG_CREATE_DOMAIN = 23,SQL_DIAG_CREATE_INDEX = -1,SQL_DIAG_CREATE_SCHEMA = 64,SQL_DIAG_CREATE_TABLE = 77,SQL_DIAG_CREATE_TRANSLATION = 79,SQL_DIAG_CREATE_VIEW = 84,SQL_DIAG_DELETE_WHERE = 19,SQL_DIAG_DROP_ASSERTION = 24,SQL_DIAG_DROP_CHARACTER_SET = 25,SQL_DIAG_DROP_COLLATION = 26,SQL_DIAG_DROP_DOMAIN = 27,SQL_DIAG_DROP_INDEX = -2,SQL_DIAG_DROP_SCHEMA = 31,SQL_DIAG_DROP_TABLE = 32,SQL_DIAG_DROP_TRANSLATION = 33,SQL_DIAG_DROP_VIEW = 36,SQL_DIAG_DYNAMIC_DELETE_CURSOR = 38,SQL_DIAG_DYNAMIC_UPDATE_CURSOR = 81,SQL_DIAG_GRANT = 48,SQL_DIAG_INSERT = 50,SQL_DIAG_REVOKE = 59,SQL_DIAG_SELECT_CURSOR = 85,SQL_DIAG_UNKNOWN_STATEMENT = 0,SQL_DIAG_UPDATE_WHERE = 82,SQL_ATTR_OUTPUT_NTS = 10001,SQL_API_SQLALLOCCONNECT = 1,SQL_API_SQLALLOCENV = 2,SQL_API_SQLALLOCHANDLE = 1001,SQL_API_SQLALLOCSTMT = 3,SQL_API_SQLBINDCOL = 4,SQL_API_SQLBINDPARAM = 1002,SQL_API_SQLCANCEL = 5,SQL_API_SQLCLOSECURSOR = 1003,SQL_API_SQLCOLATTRIBUTE = 6,SQL_API_SQLCOLUMNS = 40,SQL_API_SQLCONNECT = 7,SQL_API_SQLCOPYDESC = 1004,SQL_API_SQLDATASOURCES = 57,SQL_API_SQLDESCRIBECOL = 8,SQL_API_SQLDISCONNECT = 9,SQL_API_SQLENDTRAN = 1005,SQL_API_SQLERROR = 10,SQL_API_SQLEXECDIRECT = 11,SQL_API_SQLEXECUTE = 12,SQL_API_SQLFETCH = 13,SQL_API_SQLFETCHSCROLL = 1021,SQL_API_SQLFREECONNECT = 14,SQL_API_SQLFREEENV = 15,SQL_API_SQLFREEHANDLE = 1006,SQL_API_SQLFREESTMT = 16,SQL_API_SQLGETCONNECTATTR = 1007,SQL_API_SQLGETCONNECTOPTION = 42,SQL_API_SQLGETCURSORNAME = 17,SQL_API_SQLGETDATA = 43,SQL_API_SQLGETDESCFIELD = 1008,SQL_API_SQLGETDESCREC = 1009,SQL_API_SQLGETDIAGFIELD = 1010,SQL_API_SQLGETDIAGREC = 1011,SQL_API_SQLGETENVATTR = 1012,SQL_API_SQLGETFUNCTIONS = 44,SQL_API_SQLGETINFO = 45,SQL_API_SQLGETSTMTATTR = 1014,SQL_API_SQLGETSTMTOPTION = 46,SQL_API_SQLGETTYPEINFO = 47,SQL_API_SQLNUMRESULTCOLS = 18,SQL_API_SQLPARAMDATA = 48,SQL_API_SQLPREPARE = 19,SQL_API_SQLPUTDATA = 49,SQL_API_SQLROWCOUNT = 20,SQL_API_SQLSETCONNECTATTR = 1016,SQL_API_SQLSETCONNECTOPTION = 50,SQL_API_SQLSETCURSORNAME = 21,SQL_API_SQLSETDESCFIELD = 1017,SQL_API_SQLSETDESCREC = 1018,SQL_API_SQLSETENVATTR = 1019,SQL_API_SQLSETPARAM = 22,SQL_API_SQLSETSTMTATTR = 1020,SQL_API_SQLSETSTMTOPTION = 51,SQL_API_SQLSPECIALCOLUMNS = 52,SQL_API_SQLSTATISTICS = 53,SQL_API_SQLTABLES = 54,SQL_API_SQLTRANSACT = 23,SQL_MAX_DRIVER_CONNECTIONS = 0,SQL_MAXIMUM_DRIVER_CONNECTIONS = 0,SQL_MAX_CONCURRENT_ACTIVITIES = 1,SQL_MAXIMUM_CONCURRENT_ACTIVITIES = 1,SQL_DATA_SOURCE_NAME = 2,SQL_FETCH_DIRECTION = 8,SQL_SERVER_NAME = 13,SQL_SEARCH_PATTERN_ESCAPE = 14,SQL_DBMS_NAME = 17,SQL_DBMS_VER = 18,SQL_ACCESSIBLE_TABLES = 19,SQL_ACCESSIBLE_PROCEDURES = 20,SQL_CURSOR_COMMIT_BEHAVIOR = 23,SQL_DATA_SOURCE_READ_ONLY = 25,SQL_DEFAULT_TXN_ISOLATION = 26,SQL_IDENTIFIER_CASE = 28,SQL_IDENTIFIER_QUOTE_CHAR = 29,SQL_MAX_COLUMN_NAME_LEN = 30,SQL_MAXIMUM_COLUMN_NAME_LENGTH = 30,SQL_MAX_CURSOR_NAME_LEN = 31,SQL_MAXIMUM_CURSOR_NAME_LENGTH = 31,SQL_MAX_SCHEMA_NAME_LEN = 32,SQL_MAXIMUM_SCHEMA_NAME_LENGTH = 32,SQL_MAX_CATALOG_NAME_LEN = 34,SQL_MAXIMUM_CATALOG_NAME_LENGTH = 34,SQL_MAX_TABLE_NAME_LEN = 35,SQL_SCROLL_CONCURRENCY = 43,SQL_TXN_CAPABLE = 46,SQL_TRANSACTION_CAPABLE = 46,SQL_USER_NAME = 47,SQL_TXN_ISOLATION_OPTION = 72,SQL_TRANSACTION_ISOLATION_OPTION = 72,SQL_INTEGRITY = 73,SQL_GETDATA_EXTENSIONS = 81,SQL_NULL_COLLATION = 85,SQL_ALTER_TABLE = 86,SQL_ORDER_BY_COLUMNS_IN_SELECT = 90,SQL_SPECIAL_CHARACTERS = 94,SQL_MAX_COLUMNS_IN_GROUP_BY = 97,SQL_MAXIMUM_COLUMNS_IN_GROUP_BY = 97,SQL_MAX_COLUMNS_IN_INDEX = 98,SQL_MAXIMUM_COLUMNS_IN_INDEX = 98,SQL_MAX_COLUMNS_IN_ORDER_BY = 99,SQL_MAXIMUM_COLUMNS_IN_ORDER_BY = 99,SQL_MAX_COLUMNS_IN_SELECT = 100,SQL_MAXIMUM_COLUMNS_IN_SELECT = 100,SQL_MAX_COLUMNS_IN_TABLE = 101,SQL_MAX_INDEX_SIZE = 102,SQL_MAXIMUM_INDEX_SIZE = 102,SQL_MAX_ROW_SIZE = 104,SQL_MAXIMUM_ROW_SIZE = 104,SQL_MAX_STATEMENT_LEN = 105,SQL_MAXIMUM_STATEMENT_LENGTH = 105,SQL_MAX_TABLES_IN_SELECT = 106,SQL_MAXIMUM_TABLES_IN_SELECT = 106,SQL_MAX_USER_NAME_LEN = 107,SQL_MAXIMUM_USER_NAME_LENGTH = 107,SQL_OJ_CAPABILITIES = 115,SQL_OUTER_JOIN_CAPABILITIES = 115,SQL_XOPEN_CLI_YEAR = 10000,SQL_CURSOR_SENSITIVITY = 10001,SQL_DESCRIBE_PARAMETER = 10002,SQL_CATALOG_NAME = 10003,SQL_COLLATION_SEQ = 10004,SQL_MAX_IDENTIFIER_LEN = 10005,SQL_MAXIMUM_IDENTIFIER_LENGTH = 10005,SQL_AT_ADD_COLUMN = 1,SQL_AT_DROP_COLUMN = 2,SQL_AT_ADD_CONSTRAINT = 8,SQL_AM_NONE = 0,SQL_AM_CONNECTION = 1,SQL_AM_STATEMENT = 2,SQL_CB_DELETE = 0,SQL_CB_CLOSE = 1,SQL_CB_PRESERVE = 2,SQL_FD_FETCH_NEXT = 1,SQL_FD_FETCH_FIRST = 2,SQL_FD_FETCH_LAST = 4,SQL_FD_FETCH_PRIOR = 8,SQL_FD_FETCH_ABSOLUTE = 16,SQL_FD_FETCH_RELATIVE = 32,SQL_GD_ANY_COLUMN = 1,SQL_GD_ANY_ORDER = 2,SQL_IC_UPPER = 1,SQL_IC_LOWER = 2,SQL_IC_SENSITIVE = 3,SQL_IC_MIXED = 4,SQL_NC_HIGH = 0,SQL_NC_LOW = 1,SQL_OJ_LEFT = 1,SQL_OJ_RIGHT = 2,SQL_OJ_FULL = 4,SQL_OJ_NESTED = 8,SQL_OJ_NOT_ORDERED = 16,SQL_OJ_INNER = 32,SQL_OJ_ALL_COMPARISON_OPS = 64,SQL_SCCO_READ_ONLY = 1,SQL_SCCO_LOCK = 2,SQL_SCCO_OPT_ROWVER = 4,SQL_SCCO_OPT_VALUES = 8,SQL_TC_NONE = 0,SQL_TC_DML = 1,SQL_TC_ALL = 2,SQL_TC_DDL_COMMIT = 3,SQL_TC_DDL_IGNORE = 4,SQL_TXN_READ_UNCOMMITTED = 1,SQL_TRANSACTION_READ_UNCOMMITTED = 1,SQL_TXN_READ_COMMITTED = 2,SQL_TRANSACTION_READ_COMMITTED = 2,SQL_TXN_REPEATABLE_READ = 4,SQL_TRANSACTION_REPEATABLE_READ = 4,SQL_TXN_SERIALIZABLE = 8,SQL_TRANSACTION_SERIALIZABLE = 8,SQL_ATTR_APP_ROW_DESC = 10010,SQL_ATTR_APP_PARAM_DESC = 10011,SQL_ATTR_IMP_ROW_DESC = 10012,SQL_ATTR_IMP_PARAM_DESC = 10013,SQL_ATTR_CURSOR_SCROLLABLE = -1,SQL_ATTR_CURSOR_SENSITIVITY = -2,SQL_NONSCROLLABLE = 0,SQL_SCROLLABLE = 1,SQL_UNSPECIFIED = 0,SQL_INSENSITIVE = 1,SQL_SENSITIVE = 2,SQL_PRED_NONE = 0,SQL_PRED_CHAR = 1,SQL_PRED_BASIC = 2,SQL_SCOPE_CURROW = 0,SQL_SCOPE_TRANSACTION = 1,SQL_SCOPE_SESSION = 2,SQL_PC_UNKNOWN = 0,SQL_PC_NON_PSEUDO = 1,SQL_PC_PSEUDO = 2,SQL_ROW_IDENTIFIER = 1,SQL_INDEX_UNIQUE = 0,SQL_INDEX_ALL = 1,SQL_INDEX_CLUSTERED = 1,SQL_INDEX_HASHED = 2,SQL_INDEX_OTHER = 3,SQL_COMMIT = 0,SQL_ROLLBACK = 1,SQL_SPEC_MAJOR = 3,SQL_SPEC_MINOR = 51,SQL_SQLSTATE_SIZE = 5,SQL_MAX_DSN_LENGTH = 32,SQL_MAX_OPTION_STRING_LENGTH = 256,SQL_HANDLE_SENV = 5,SQL_NO_DATA_FOUND = 100,SQL_IS_POINTER = -4,SQL_IS_UINTEGER = -5,SQL_IS_INTEGER = -6,SQL_IS_USMALLINT = -7,SQL_IS_SMALLINT = -8,SQL_DATE = 9,SQL_INTERVAL = 10,SQL_TIME = 10,SQL_TIMESTAMP = 11,SQL_LONGVARCHAR = -1,SQL_BINARY = -2,SQL_VARBINARY = -3,SQL_LONGVARBINARY = -4,SQL_BIGINT = -5,SQL_TINYINT = -6,SQL_BIT = -7,SQL_CODE_YEAR = 1,SQL_CODE_MONTH = 2,SQL_CODE_DAY = 3,SQL_CODE_HOUR = 4,SQL_CODE_MINUTE = 5,SQL_CODE_SECOND = 6,SQL_CODE_YEAR_TO_MONTH = 7,SQL_CODE_DAY_TO_HOUR = 8,SQL_CODE_DAY_TO_MINUTE = 9,SQL_CODE_DAY_TO_SECOND = 10,SQL_CODE_HOUR_TO_MINUTE = 11,SQL_CODE_HOUR_TO_SECOND = 12,SQL_CODE_MINUTE_TO_SECOND = 13,SQL_INTERVAL_YEAR = 101,SQL_INTERVAL_MONTH = 102,SQL_INTERVAL_DAY = 103,SQL_INTERVAL_HOUR = 104,SQL_INTERVAL_MINUTE = 105,SQL_INTERVAL_SECOND = 106,SQL_INTERVAL_YEAR_TO_MONTH = 107,SQL_INTERVAL_DAY_TO_HOUR = 108,SQL_INTERVAL_DAY_TO_MINUTE = 109,SQL_INTERVAL_DAY_TO_SECOND = 110,SQL_INTERVAL_HOUR_TO_MINUTE = 111,SQL_INTERVAL_HOUR_TO_SECOND = 112,SQL_INTERVAL_MINUTE_TO_SECOND = 113,SQL_UNICODE = -95,SQL_UNICODE_VARCHAR = -96,SQL_UNICODE_LONGVARCHAR = -97,SQL_UNICODE_CHAR = -95,SQL_SIGNED_OFFSET = -20,SQL_UNSIGNED_OFFSET = -22,SQL_C_CHAR = 1,SQL_C_LONG = 4,SQL_C_SHORT = 5,SQL_C_FLOAT = 7,SQL_C_DOUBLE = 8,SQL_C_NUMERIC = 2,SQL_C_DEFAULT = 99,SQL_C_DATE = 9,SQL_C_TIME = 10,SQL_C_TIMESTAMP = 11,SQL_C_BINARY = -2,SQL_C_BIT = -7,SQL_C_TINYINT = -6,SQL_C_SLONG = -16,SQL_C_SSHORT = -15,SQL_C_STINYINT = -26,SQL_C_ULONG = -18,SQL_C_USHORT = -17,SQL_C_UTINYINT = -28,SQL_C_BOOKMARK = -18,SQL_C_TYPE_DATE = 91,SQL_C_TYPE_TIME = 92,SQL_C_TYPE_TIMESTAMP = 93,SQL_C_INTERVAL_YEAR = 101,SQL_C_INTERVAL_MONTH = 102,SQL_C_INTERVAL_DAY = 103,SQL_C_INTERVAL_HOUR = 104,SQL_C_INTERVAL_MINUTE = 105,SQL_C_INTERVAL_SECOND = 106,SQL_C_INTERVAL_YEAR_TO_MONTH = 107,SQL_C_INTERVAL_DAY_TO_HOUR = 108,SQL_C_INTERVAL_DAY_TO_MINUTE = 109,SQL_C_INTERVAL_DAY_TO_SECOND = 110,SQL_C_INTERVAL_HOUR_TO_MINUTE = 111,SQL_C_INTERVAL_HOUR_TO_SECOND = 112,SQL_C_INTERVAL_MINUTE_TO_SECOND = 113,SQL_C_SBIGINT = -25,SQL_C_UBIGINT = -27,SQL_C_VARBOOKMARK = -2,SQL_TYPE_NULL = 0,SQL_DEFAULT_PARAM = -5,SQL_IGNORE = -6,SQL_COLUMN_IGNORE = -6,SQL_LEN_DATA_AT_EXEC_OFFSET = -100,SQL_LEN_BINARY_ATTR_OFFSET = -100,SQL_COLUMN_COUNT = 0,SQL_COLUMN_NAME = 1,SQL_COLUMN_TYPE = 2,SQL_COLUMN_LENGTH = 3,SQL_COLUMN_PRECISION = 4,SQL_COLUMN_SCALE = 5,SQL_COLUMN_DISPLAY_SIZE = 6,SQL_COLUMN_NULLABLE = 7,SQL_COLUMN_UNSIGNED = 8,SQL_COLUMN_MONEY = 9,SQL_COLUMN_UPDATABLE = 10,SQL_COLUMN_AUTO_INCREMENT = 11,SQL_COLUMN_CASE_SENSITIVE = 12,SQL_COLUMN_SEARCHABLE = 13,SQL_COLUMN_TYPE_NAME = 14,SQL_COLUMN_TABLE_NAME = 15,SQL_COLUMN_OWNER_NAME = 16,SQL_COLUMN_QUALIFIER_NAME = 17,SQL_COLUMN_LABEL = 18,SQL_COLATT_OPT_MAX = 18,SQL_COLATT_OPT_MIN = 0,SQL_ATTR_READONLY = 0,SQL_ATTR_WRITE = 1,SQL_ATTR_READWRITE_UNKNOWN = 2,SQL_UNSEARCHABLE = 0,SQL_LIKE_ONLY = 1,SQL_ALL_EXCEPT_LIKE = 2,SQL_SEARCHABLE = 3,SQL_PRED_SEARCHABLE = 3,SQL_FETCH_FIRST_USER = 31,SQL_FETCH_FIRST_SYSTEM = 32,SQL_DRIVER_NOPROMPT = 0,SQL_DRIVER_COMPLETE = 1,SQL_DRIVER_PROMPT = 2,SQL_DRIVER_COMPLETE_REQUIRED = 3,SQL_ACCESS_MODE = 101,SQL_AUTOCOMMIT = 102,SQL_LOGIN_TIMEOUT = 103,SQL_OPT_TRACE = 104,SQL_OPT_TRACEFILE = 105,SQL_TRANSLATE_DLL = 106,SQL_TRANSLATE_OPTION = 107,SQL_TXN_ISOLATION = 108,SQL_CURRENT_QUALIFIER = 109,SQL_ODBC_CURSORS = 110,SQL_QUIET_MODE = 111,SQL_PACKET_SIZE = 112,SQL_ATTR_ACCESS_MODE = 101,SQL_ATTR_AUTOCOMMIT = 102,SQL_ATTR_CONNECTION_TIMEOUT = 113,SQL_ATTR_CURRENT_CATALOG = 109,SQL_ATTR_DISCONNECT_BEHAVIOR = 114,SQL_ATTR_ENLIST_IN_DTC = 1207,SQL_ATTR_ENLIST_IN_XA = 1208,SQL_ATTR_LOGIN_TIMEOUT = 103,SQL_ATTR_ODBC_CURSORS = 110,SQL_ATTR_PACKET_SIZE = 112,SQL_ATTR_QUIET_MODE = 111,SQL_ATTR_TRACE = 104,SQL_ATTR_TRACEFILE = 105,SQL_ATTR_TRANSLATE_LIB = 106,SQL_ATTR_TRANSLATE_OPTION = 107,SQL_ATTR_TXN_ISOLATION = 108,SQL_ATTR_CONNECTION_DEAD = 1209,SQL_MODE_READ_WRITE = 0,SQL_MODE_READ_ONLY = 1,SQL_MODE_DEFAULT = 0,SQL_AUTOCOMMIT_OFF = 0,SQL_AUTOCOMMIT_ON = 1,SQL_AUTOCOMMIT_DEFAULT = 1,SQL_LOGIN_TIMEOUT_DEFAULT = 15,SQL_CUR_USE_IF_NEEDED = 0,SQL_CUR_USE_ODBC = 1,SQL_CUR_USE_DRIVER = 2,SQL_CUR_DEFAULT = 2,SQL_OPT_TRACE_OFF = 0,SQL_OPT_TRACE_ON = 1,SQL_OPT_TRACE_DEFAULT = 0,SQL_CD_TRUE = 1,SQL_CD_FALSE = 0,SQL_DB_RETURN_TO_POOL = 0,SQL_DB_DISCONNECT = 1,SQL_DB_DEFAULT = 0,SQL_DTC_DONE = 0,SQL_NO_TOTAL = -4,SQL_DESC_ARRAY_SIZE = 20,SQL_DESC_ARRAY_STATUS_PTR = 21,SQL_DESC_AUTO_UNIQUE_VALUE = 11,SQL_DESC_BASE_COLUMN_NAME = 22,SQL_DESC_BASE_TABLE_NAME = 23,SQL_DESC_BIND_OFFSET_PTR = 24,SQL_DESC_BIND_TYPE = 25,SQL_DESC_CASE_SENSITIVE = 12,SQL_DESC_CATALOG_NAME = 17,SQL_DESC_CONCISE_TYPE = 2,SQL_DESC_DATETIME_INTERVAL_PRECISION = 26,SQL_DESC_DISPLAY_SIZE = 6,SQL_DESC_FIXED_PREC_SCALE = 9,SQL_DESC_LABEL = 18,SQL_DESC_LITERAL_PREFIX = 27,SQL_DESC_LITERAL_SUFFIX = 28,SQL_DESC_LOCAL_TYPE_NAME = 29,SQL_DESC_MAXIMUM_SCALE = 30,SQL_DESC_MINIMUM_SCALE = 31,SQL_DESC_NUM_PREC_RADIX = 32,SQL_DESC_PARAMETER_TYPE = 33,SQL_DESC_ROWS_PROCESSED_PTR = 34,SQL_DESC_SCHEMA_NAME = 16,SQL_DESC_SEARCHABLE = 13,SQL_DESC_TYPE_NAME = 14,SQL_DESC_TABLE_NAME = 15,SQL_DESC_UNSIGNED = 8,SQL_DESC_UPDATABLE = 10,SQL_DIAG_CURSOR_ROW_COUNT = -1249,SQL_DIAG_ROW_NUMBER = -1248,SQL_DIAG_COLUMN_NUMBER = -1247,SQL_NO_ROW_NUMBER = -1,SQL_NO_COLUMN_NUMBER = -1,SQL_ROW_NUMBER_UNKNOWN = -2,SQL_COLUMN_NUMBER_UNKNOWN = -2,SQL_ATTR_ODBC_VERSION = 200,SQL_ATTR_CONNECTION_POOLING = 201,SQL_ATTR_CP_MATCH = 202,SQL_OV_ODBC2 = 2,SQL_OV_ODBC3 = 3,SQL_CP_OFF = 0,SQL_CP_ONE_PER_DRIVER = 1,SQL_CP_ONE_PER_HENV = 2,SQL_CP_DEFAULT = 0,SQL_CP_STRICT_MATCH = 0,SQL_CP_RELAXED_MATCH = 1,SQL_CP_MATCH_DEFAULT = 0,SQL_API_SQLALLOCHANDLESTD = 73,SQL_API_SQLBULKOPERATIONS = 24,SQL_API_SQLBINDPARAMETER = 72,SQL_API_SQLBROWSECONNECT = 55,SQL_API_SQLCOLATTRIBUTES = 6,SQL_API_SQLCOLUMNPRIVILEGES = 56,SQL_API_SQLDESCRIBEPARAM = 58,SQL_API_SQLDRIVERCONNECT = 41,SQL_API_SQLDRIVERS = 71,SQL_API_SQLEXTENDEDFETCH = 59,SQL_API_SQLFOREIGNKEYS = 60,SQL_API_SQLMORERESULTS = 61,SQL_API_SQLNATIVESQL = 62,SQL_API_SQLNUMPARAMS = 63,SQL_API_SQLPARAMOPTIONS = 64,SQL_API_SQLPRIMARYKEYS = 65,SQL_API_SQLPROCEDURECOLUMNS = 66,SQL_API_SQLPROCEDURES = 67,SQL_API_SQLSETPOS = 68,SQL_API_SQLSETSCROLLOPTIONS = 69,SQL_API_SQLTABLEPRIVILEGES = 70,SQL_API_ALL_FUNCTIONS = 0,SQL_API_LOADBYORDINAL = 199,SQL_API_ODBC3_ALL_FUNCTIONS = 999,SQL_API_ODBC3_ALL_FUNCTIONS_SIZE = 250,SQL_INFO_FIRST = 0,SQL_ACTIVE_CONNECTIONS = 0,SQL_ACTIVE_STATEMENTS = 1,SQL_DRIVER_HDBC = 3,SQL_DRIVER_HENV = 4,SQL_DRIVER_HSTMT = 5,SQL_DRIVER_NAME = 6,SQL_DRIVER_VER = 7,SQL_ODBC_API_CONFORMANCE = 9,SQL_ODBC_VER = 10,SQL_ROW_UPDATES = 11,SQL_ODBC_SAG_CLI_CONFORMANCE = 12,SQL_ODBC_SQL_CONFORMANCE = 15,SQL_PROCEDURES = 21,SQL_CONCAT_NULL_BEHAVIOR = 22,SQL_CURSOR_ROLLBACK_BEHAVIOR = 24,SQL_EXPRESSIONS_IN_ORDERBY = 27,SQL_MAX_OWNER_NAME_LEN = 32,SQL_MAX_PROCEDURE_NAME_LEN = 33,SQL_MAX_QUALIFIER_NAME_LEN = 34,SQL_MULT_RESULT_SETS = 36,SQL_MULTIPLE_ACTIVE_TXN = 37,SQL_OUTER_JOINS = 38,SQL_OWNER_TERM = 39,SQL_PROCEDURE_TERM = 40,SQL_QUALIFIER_NAME_SEPARATOR = 41,SQL_QUALIFIER_TERM = 42,SQL_SCROLL_OPTIONS = 44,SQL_TABLE_TERM = 45,SQL_CONVERT_FUNCTIONS = 48,SQL_NUMERIC_FUNCTIONS = 49,SQL_STRING_FUNCTIONS = 50,SQL_SYSTEM_FUNCTIONS = 51,SQL_TIMEDATE_FUNCTIONS = 52,SQL_CONVERT_BIGINT = 53,SQL_CONVERT_BINARY = 54,SQL_CONVERT_BIT = 55,SQL_CONVERT_CHAR = 56,SQL_CONVERT_DATE = 57,SQL_CONVERT_DECIMAL = 58,SQL_CONVERT_DOUBLE = 59,SQL_CONVERT_FLOAT = 60,SQL_CONVERT_INTEGER = 61,SQL_CONVERT_LONGVARCHAR = 62,SQL_CONVERT_NUMERIC = 63,SQL_CONVERT_REAL = 64,SQL_CONVERT_SMALLINT = 65,SQL_CONVERT_TIME = 66,SQL_CONVERT_TIMESTAMP = 67,SQL_CONVERT_TINYINT = 68,SQL_CONVERT_VARBINARY = 69,SQL_CONVERT_VARCHAR = 70,SQL_CONVERT_LONGVARBINARY = 71,SQL_ODBC_SQL_OPT_IEF = 73,SQL_CORRELATION_NAME = 74,SQL_NON_NULLABLE_COLUMNS = 75,SQL_DRIVER_HLIB = 76,SQL_DRIVER_ODBC_VER = 77,SQL_LOCK_TYPES = 78,SQL_POS_OPERATIONS = 79,SQL_POSITIONED_STATEMENTS = 80,SQL_BOOKMARK_PERSISTENCE = 82,SQL_STATIC_SENSITIVITY = 83,SQL_FILE_USAGE = 84,SQL_COLUMN_ALIAS = 87,SQL_GROUP_BY = 88,SQL_KEYWORDS = 89,SQL_OWNER_USAGE = 91,SQL_QUALIFIER_USAGE = 92,SQL_QUOTED_IDENTIFIER_CASE = 93,SQL_SUBQUERIES = 95,SQL_UNION = 96,SQL_MAX_ROW_SIZE_INCLUDES_LONG = 103,SQL_MAX_CHAR_LITERAL_LEN = 108,SQL_TIMEDATE_ADD_INTERVALS = 109,SQL_TIMEDATE_DIFF_INTERVALS = 110,SQL_NEED_LONG_DATA_LEN = 111,SQL_MAX_BINARY_LITERAL_LEN = 112,SQL_LIKE_ESCAPE_CLAUSE = 113,SQL_QUALIFIER_LOCATION = 114,SQL_ACTIVE_ENVIRONMENTS = 116,SQL_ALTER_DOMAIN = 117,SQL_SQL_CONFORMANCE = 118,SQL_DATETIME_LITERALS = 119,SQL_ASYNC_MODE = 10021,SQL_BATCH_ROW_COUNT = 120,SQL_BATCH_SUPPORT = 121,SQL_CATALOG_LOCATION = 114,SQL_CATALOG_NAME_SEPARATOR = 41,SQL_CATALOG_TERM = 42,SQL_CATALOG_USAGE = 92,SQL_CONVERT_WCHAR = 122,SQL_CONVERT_INTERVAL_DAY_TIME = 123,SQL_CONVERT_INTERVAL_YEAR_MONTH = 124,SQL_CONVERT_WLONGVARCHAR = 125,SQL_CONVERT_WVARCHAR = 126,SQL_CREATE_ASSERTION = 127,SQL_CREATE_CHARACTER_SET = 128,SQL_CREATE_COLLATION = 129,SQL_CREATE_DOMAIN = 130,SQL_CREATE_SCHEMA = 131,SQL_CREATE_TABLE = 132,SQL_CREATE_TRANSLATION = 133,SQL_CREATE_VIEW = 134,SQL_DRIVER_HDESC = 135,SQL_DROP_ASSERTION = 136,SQL_DROP_CHARACTER_SET = 137,SQL_DROP_COLLATION = 138,SQL_DROP_DOMAIN = 139,SQL_DROP_SCHEMA = 140,SQL_DROP_TABLE = 141,SQL_DROP_TRANSLATION = 142,SQL_DROP_VIEW = 143,SQL_DYNAMIC_CURSOR_ATTRIBUTES1 = 144,SQL_DYNAMIC_CURSOR_ATTRIBUTES2 = 145,SQL_FORWARD_ONLY_CURSOR_ATTRIBUTES1 = 146,SQL_FORWARD_ONLY_CURSOR_ATTRIBUTES2 = 147,SQL_INDEX_KEYWORDS = 148,SQL_INFO_SCHEMA_VIEWS = 149,SQL_KEYSET_CURSOR_ATTRIBUTES1 = 150,SQL_KEYSET_CURSOR_ATTRIBUTES2 = 151,SQL_MAX_ASYNC_CONCURRENT_STATEMENTS = 10022,SQL_ODBC_INTERFACE_CONFORMANCE = 152,SQL_PARAM_ARRAY_ROW_COUNTS = 153,SQL_PARAM_ARRAY_SELECTS = 154,SQL_SCHEMA_TERM = 39,SQL_SCHEMA_USAGE = 91,SQL_SQL92_DATETIME_FUNCTIONS = 155,SQL_SQL92_FOREIGN_KEY_DELETE_RULE = 156,SQL_SQL92_FOREIGN_KEY_UPDATE_RULE = 157,SQL_SQL92_GRANT = 158,SQL_SQL92_NUMERIC_VALUE_FUNCTIONS = 159,SQL_SQL92_PREDICATES = 160,SQL_SQL92_RELATIONAL_JOIN_OPERATORS = 161,SQL_SQL92_REVOKE = 162,SQL_SQL92_ROW_VALUE_CONSTRUCTOR = 163,SQL_SQL92_STRING_FUNCTIONS = 164,SQL_SQL92_VALUE_EXPRESSIONS = 165,SQL_STANDARD_CLI_CONFORMANCE = 166,SQL_STATIC_CURSOR_ATTRIBUTES1 = 167,SQL_STATIC_CURSOR_ATTRIBUTES2 = 168,SQL_AGGREGATE_FUNCTIONS = 169,SQL_DDL_INDEX = 170,SQL_DM_VER = 171,SQL_INSERT_STATEMENT = 172,SQL_UNION_STATEMENT = 96,SQL_DTC_TRANSITION_COST = 1750,SQL_AF_AVG = 1,SQL_AF_COUNT = 2,SQL_AF_MAX = 4,SQL_AF_MIN = 8,SQL_AF_SUM = 16,SQL_AF_DISTINCT = 32,SQL_AF_ALL = 64,SQL_AD_CONSTRAINT_NAME_DEFINITION = 1,SQL_AD_ADD_DOMAIN_CONSTRAINT = 2,SQL_AD_DROP_DOMAIN_CONSTRAINT = 4,SQL_AD_ADD_DOMAIN_DEFAULT = 8,SQL_AD_DROP_DOMAIN_DEFAULT = 16,SQL_AD_ADD_CONSTRAINT_INITIALLY_DEFERRED = 32,SQL_AD_ADD_CONSTRAINT_INITIALLY_IMMEDIATE = 64,SQL_AD_ADD_CONSTRAINT_DEFERRABLE = 128,SQL_AD_ADD_CONSTRAINT_NON_DEFERRABLE = 256,SQL_AT_ADD_COLUMN_SINGLE = 32,SQL_AT_ADD_COLUMN_DEFAULT = 64,SQL_AT_ADD_COLUMN_COLLATION = 128,SQL_AT_SET_COLUMN_DEFAULT = 256,SQL_AT_DROP_COLUMN_DEFAULT = 512,SQL_AT_DROP_COLUMN_CASCADE = 1024,SQL_AT_DROP_COLUMN_RESTRICT = 2048,SQL_AT_ADD_TABLE_CONSTRAINT = 4096,SQL_AT_DROP_TABLE_CONSTRAINT_CASCADE = 8192,SQL_AT_DROP_TABLE_CONSTRAINT_RESTRICT = 16384,SQL_AT_CONSTRAINT_NAME_DEFINITION = 32768,SQL_AT_CONSTRAINT_INITIALLY_DEFERRED = 65536,SQL_AT_CONSTRAINT_INITIALLY_IMMEDIATE = 131072,SQL_AT_CONSTRAINT_DEFERRABLE = 262144,SQL_AT_CONSTRAINT_NON_DEFERRABLE = 524288,SQL_BRC_PROCEDURES = 1,SQL_BRC_EXPLICIT = 2,SQL_BRC_ROLLED_UP = 4,SQL_BS_SELECT_EXPLICIT = 1,SQL_BS_ROW_COUNT_EXPLICIT = 2,SQL_BS_SELECT_PROC = 4,SQL_BS_ROW_COUNT_PROC = 8,SQL_BP_CLOSE = 1,SQL_BP_DELETE = 2,SQL_BP_DROP = 4,SQL_BP_TRANSACTION = 8,SQL_BP_UPDATE = 16,SQL_BP_OTHER_HSTMT = 32,SQL_BP_SCROLL = 64,SQL_CB_NULL = 0,SQL_CB_NON_NULL = 1,SQL_CVT_CHAR = 1,SQL_CVT_NUMERIC = 2,SQL_CVT_DECIMAL = 4,SQL_CVT_INTEGER = 8,SQL_CVT_SMALLINT = 16,SQL_CVT_FLOAT = 32,SQL_CVT_REAL = 64,SQL_CVT_DOUBLE = 128,SQL_CVT_VARCHAR = 256,SQL_CVT_LONGVARCHAR = 512,SQL_CVT_BINARY = 1024,SQL_CVT_VARBINARY = 2048,SQL_CVT_BIT = 4096,SQL_CVT_TINYINT = 8192,SQL_CVT_BIGINT = 16384,SQL_CVT_DATE = 32768,SQL_CVT_TIME = 65536,SQL_CVT_TIMESTAMP = 131072,SQL_CVT_LONGVARBINARY = 262144,SQL_CVT_INTERVAL_YEAR_MONTH = 524288,SQL_CVT_INTERVAL_DAY_TIME = 1048576,SQL_CVT_WCHAR = 2097152,SQL_CVT_WLONGVARCHAR = 4194304,SQL_CVT_WVARCHAR = 8388608,SQL_FN_CVT_CONVERT = 1,SQL_FN_CVT_CAST = 2,SQL_CN_NONE = 0,SQL_CN_DIFFERENT = 1,SQL_CN_ANY = 2,SQL_CA_CREATE_ASSERTION = 1,SQL_CA_CONSTRAINT_INITIALLY_DEFERRED = 16,SQL_CA_CONSTRAINT_INITIALLY_IMMEDIATE = 32,SQL_CA_CONSTRAINT_DEFERRABLE = 64,SQL_CA_CONSTRAINT_NON_DEFERRABLE = 128,SQL_CCS_CREATE_CHARACTER_SET = 1,SQL_CCS_COLLATE_CLAUSE = 2,SQL_CCS_LIMITED_COLLATION = 4,SQL_CCOL_CREATE_COLLATION = 1,SQL_CDO_CREATE_DOMAIN = 1,SQL_CDO_DEFAULT = 2,SQL_CDO_CONSTRAINT = 4,SQL_CDO_COLLATION = 8,SQL_CDO_CONSTRAINT_NAME_DEFINITION = 16,SQL_CDO_CONSTRAINT_INITIALLY_DEFERRED = 32,SQL_CDO_CONSTRAINT_INITIALLY_IMMEDIATE = 64,SQL_CDO_CONSTRAINT_DEFERRABLE = 128,SQL_CDO_CONSTRAINT_NON_DEFERRABLE = 256,SQL_CS_CREATE_SCHEMA = 1,SQL_CS_AUTHORIZATION = 2,SQL_CS_DEFAULT_CHARACTER_SET = 4,SQL_CT_CREATE_TABLE = 1,SQL_CT_COMMIT_PRESERVE = 2,SQL_CT_COMMIT_DELETE = 4,SQL_CT_GLOBAL_TEMPORARY = 8,SQL_CT_LOCAL_TEMPORARY = 16,SQL_CT_CONSTRAINT_INITIALLY_DEFERRED = 32,SQL_CT_CONSTRAINT_INITIALLY_IMMEDIATE = 64,SQL_CT_CONSTRAINT_DEFERRABLE = 128,SQL_CT_CONSTRAINT_NON_DEFERRABLE = 256,SQL_CT_COLUMN_CONSTRAINT = 512,SQL_CT_COLUMN_DEFAULT = 1024,SQL_CT_COLUMN_COLLATION = 2048,SQL_CT_TABLE_CONSTRAINT = 4096,SQL_CT_CONSTRAINT_NAME_DEFINITION = 8192,SQL_CTR_CREATE_TRANSLATION = 1,SQL_DL_SQL92_DATE = 1,SQL_DL_SQL92_TIME = 2,SQL_DL_SQL92_TIMESTAMP = 4,SQL_DL_SQL92_INTERVAL_YEAR = 8,SQL_DL_SQL92_INTERVAL_MONTH = 16,SQL_DL_SQL92_INTERVAL_DAY = 32,SQL_DL_SQL92_INTERVAL_HOUR = 64,SQL_DL_SQL92_INTERVAL_MINUTE = 128,SQL_DL_SQL92_INTERVAL_SECOND = 256,SQL_DL_SQL92_INTERVAL_YEAR_TO_MONTH = 512,SQL_DL_SQL92_INTERVAL_DAY_TO_HOUR = 1024,SQL_DL_SQL92_INTERVAL_DAY_TO_MINUTE = 2048,SQL_DL_SQL92_INTERVAL_DAY_TO_SECOND = 4096,SQL_DL_SQL92_INTERVAL_HOUR_TO_MINUTE = 8192,SQL_DL_SQL92_INTERVAL_HOUR_TO_SECOND = 16384,SQL_DL_SQL92_INTERVAL_MINUTE_TO_SECOND = 32768,SQL_DI_CREATE_INDEX = 1,SQL_DI_DROP_INDEX = 2,SQL_DA_DROP_ASSERTION = 1,SQL_DCS_DROP_CHARACTER_SET = 1,SQL_DC_DROP_COLLATION = 1,SQL_DD_DROP_DOMAIN = 1,SQL_DD_RESTRICT = 2,SQL_DD_CASCADE = 4,SQL_DS_DROP_SCHEMA = 1,SQL_DS_RESTRICT = 2,SQL_DS_CASCADE = 4,SQL_DT_DROP_TABLE = 1,SQL_DT_RESTRICT = 2,SQL_DT_CASCADE = 4,SQL_DTR_DROP_TRANSLATION = 1,SQL_DV_DROP_VIEW = 1,SQL_DV_RESTRICT = 2,SQL_DV_CASCADE = 4,SQL_DTC_ENLIST_EXPENSIVE = 1,SQL_DTC_UNENLIST_EXPENSIVE = 2,SQL_CA1_NEXT = 1,SQL_CA1_ABSOLUTE = 2,SQL_CA1_RELATIVE = 4,SQL_CA1_BOOKMARK = 8,SQL_CA1_LOCK_NO_CHANGE = 64,SQL_CA1_LOCK_EXCLUSIVE = 128,SQL_CA1_LOCK_UNLOCK = 256,SQL_CA1_POS_POSITION = 512,SQL_CA1_POS_UPDATE = 1024,SQL_CA1_POS_DELETE = 2048,SQL_CA1_POS_REFRESH = 4096,SQL_CA1_POSITIONED_UPDATE = 8192,SQL_CA1_POSITIONED_DELETE = 16384,SQL_CA1_SELECT_FOR_UPDATE = 32768,SQL_CA1_BULK_ADD = 65536,SQL_CA1_BULK_UPDATE_BY_BOOKMARK = 131072,SQL_CA1_BULK_DELETE_BY_BOOKMARK = 262144,SQL_CA1_BULK_FETCH_BY_BOOKMARK = 524288,SQL_CA2_READ_ONLY_CONCURRENCY = 1,SQL_CA2_LOCK_CONCURRENCY = 2,SQL_CA2_OPT_ROWVER_CONCURRENCY = 4,SQL_CA2_OPT_VALUES_CONCURRENCY = 8,SQL_CA2_SENSITIVITY_ADDITIONS = 16,SQL_CA2_SENSITIVITY_DELETIONS = 32,SQL_CA2_SENSITIVITY_UPDATES = 64,SQL_CA2_MAX_ROWS_SELECT = 128,SQL_CA2_MAX_ROWS_INSERT = 256,SQL_CA2_MAX_ROWS_DELETE = 512,SQL_CA2_MAX_ROWS_UPDATE = 1024,SQL_CA2_MAX_ROWS_CATALOG = 2048,SQL_CA2_MAX_ROWS_AFFECTS_ALL = 3968,SQL_CA2_CRC_EXACT = 4096,SQL_CA2_CRC_APPROXIMATE = 8192,SQL_CA2_SIMULATE_NON_UNIQUE = 16384,SQL_CA2_SIMULATE_TRY_UNIQUE = 32768,SQL_CA2_SIMULATE_UNIQUE = 65536,SQL_FD_FETCH_BOOKMARK = 128,SQL_FILE_NOT_SUPPORTED = 0,SQL_FILE_TABLE = 1,SQL_FILE_QUALIFIER = 2,SQL_FILE_CATALOG = 2,SQL_GD_BLOCK = 4,SQL_GD_BOUND = 8,SQL_GB_NOT_SUPPORTED = 0,SQL_GB_GROUP_BY_EQUALS_SELECT = 1,SQL_GB_GROUP_BY_CONTAINS_SELECT = 2,SQL_GB_NO_RELATION = 3,SQL_GB_COLLATE = 4,SQL_IK_NONE = 0,SQL_IK_ASC = 1,SQL_IK_DESC = 2,SQL_IK_ALL = 3,SQL_ISV_ASSERTIONS = 1,SQL_ISV_CHARACTER_SETS = 2,SQL_ISV_CHECK_CONSTRAINTS = 4,SQL_ISV_COLLATIONS = 8,SQL_ISV_COLUMN_DOMAIN_USAGE = 16,SQL_ISV_COLUMN_PRIVILEGES = 32,SQL_ISV_COLUMNS = 64,SQL_ISV_CONSTRAINT_COLUMN_USAGE = 128,SQL_ISV_CONSTRAINT_TABLE_USAGE = 256,SQL_ISV_DOMAIN_CONSTRAINTS = 512,SQL_ISV_DOMAINS = 1024,SQL_ISV_KEY_COLUMN_USAGE = 2048,SQL_ISV_REFERENTIAL_CONSTRAINTS = 4096,SQL_ISV_SCHEMATA = 8192,SQL_ISV_SQL_LANGUAGES = 16384,SQL_ISV_TABLE_CONSTRAINTS = 32768,SQL_ISV_TABLE_PRIVILEGES = 65536,SQL_ISV_TABLES = 131072,SQL_ISV_TRANSLATIONS = 262144,SQL_ISV_USAGE_PRIVILEGES = 524288,SQL_ISV_VIEW_COLUMN_USAGE = 1048576,SQL_ISV_VIEW_TABLE_USAGE = 2097152,SQL_ISV_VIEWS = 4194304,SQL_IS_INSERT_LITERALS = 1,SQL_IS_INSERT_SEARCHED = 2,SQL_IS_SELECT_INTO = 4,SQL_LCK_NO_CHANGE = 1,SQL_LCK_EXCLUSIVE = 2,SQL_LCK_UNLOCK = 4,SQL_POS_POSITION = 1,SQL_POS_REFRESH = 2,SQL_POS_UPDATE = 4,SQL_POS_DELETE = 8,SQL_POS_ADD = 16,SQL_NNC_NULL = 0,SQL_NNC_NON_NULL = 1,SQL_NC_START = 2,SQL_NC_END = 4,SQL_FN_NUM_ABS = 1,SQL_FN_NUM_ACOS = 2,SQL_FN_NUM_ASIN = 4,SQL_FN_NUM_ATAN = 8,SQL_FN_NUM_ATAN2 = 16,SQL_FN_NUM_CEILING = 32,SQL_FN_NUM_COS = 64,SQL_FN_NUM_COT = 128,SQL_FN_NUM_EXP = 256,SQL_FN_NUM_FLOOR = 512,SQL_FN_NUM_LOG = 1024,SQL_FN_NUM_MOD = 2048,SQL_FN_NUM_SIGN = 4096,SQL_FN_NUM_SIN = 8192,SQL_FN_NUM_SQRT = 16384,SQL_FN_NUM_TAN = 32768,SQL_FN_NUM_PI = 65536,SQL_FN_NUM_RAND = 131072,SQL_FN_NUM_DEGREES = 262144,SQL_FN_NUM_LOG10 = 524288,SQL_FN_NUM_POWER = 1048576,SQL_FN_NUM_RADIANS = 2097152,SQL_FN_NUM_ROUND = 4194304,SQL_FN_NUM_TRUNCATE = 8388608,SQL_OAC_NONE = 0,SQL_OAC_LEVEL1 = 1,SQL_OAC_LEVEL2 = 2,SQL_OIC_CORE = 1,SQL_OIC_LEVEL1 = 2,SQL_OIC_LEVEL2 = 3,SQL_OSCC_NOT_COMPLIANT = 0,SQL_OSCC_COMPLIANT = 1,SQL_OSC_MINIMUM = 0,SQL_OSC_CORE = 1,SQL_OSC_EXTENDED = 2,SQL_OU_DML_STATEMENTS = 1,SQL_OU_PROCEDURE_INVOCATION = 2,SQL_OU_TABLE_DEFINITION = 4,SQL_OU_INDEX_DEFINITION = 8,SQL_OU_PRIVILEGE_DEFINITION = 16,SQL_PARC_BATCH = 1,SQL_PARC_NO_BATCH = 2,SQL_PAS_BATCH = 1,SQL_PAS_NO_BATCH = 2,SQL_PAS_NO_SELECT = 3,SQL_PS_POSITIONED_DELETE = 1,SQL_PS_POSITIONED_UPDATE = 2,SQL_PS_SELECT_FOR_UPDATE = 4,SQL_QL_START = 1,SQL_QL_END = 2,SQL_QU_DML_STATEMENTS = 1,SQL_QU_PROCEDURE_INVOCATION = 2,SQL_QU_TABLE_DEFINITION = 4,SQL_QU_INDEX_DEFINITION = 8,SQL_QU_PRIVILEGE_DEFINITION = 16,SQL_SU_DML_STATEMENTS = 1,SQL_SU_PROCEDURE_INVOCATION = 2,SQL_SU_TABLE_DEFINITION = 4,SQL_SU_INDEX_DEFINITION = 8,SQL_SU_PRIVILEGE_DEFINITION = 16,SQL_SO_FORWARD_ONLY = 1,SQL_SO_KEYSET_DRIVEN = 2,SQL_SO_DYNAMIC = 4,SQL_SO_MIXED = 8,SQL_SO_STATIC = 16,SQL_SC_SQL92_ENTRY = 1,SQL_SC_FIPS127_2_TRANSITIONAL = 2,SQL_SC_SQL92_INTERMEDIATE = 4,SQL_SC_SQL92_FULL = 8,SQL_SDF_CURRENT_DATE = 1,SQL_SDF_CURRENT_TIME = 2,SQL_SDF_CURRENT_TIMESTAMP = 4,SQL_SFKD_CASCADE = 1,SQL_SFKD_NO_ACTION = 2,SQL_SFKD_SET_DEFAULT = 4,SQL_SFKD_SET_NULL = 8,SQL_SFKU_CASCADE = 1,SQL_SFKU_NO_ACTION = 2,SQL_SFKU_SET_DEFAULT = 4,SQL_SFKU_SET_NULL = 8,SQL_SG_USAGE_ON_DOMAIN = 1,SQL_SG_USAGE_ON_CHARACTER_SET = 2,SQL_SG_USAGE_ON_COLLATION = 4,SQL_SG_USAGE_ON_TRANSLATION = 8,SQL_SG_WITH_GRANT_OPTION = 16,SQL_SG_DELETE_TABLE = 32,SQL_SG_INSERT_TABLE = 64,SQL_SG_INSERT_COLUMN = 128,SQL_SG_REFERENCES_TABLE = 256,SQL_SG_REFERENCES_COLUMN = 512,SQL_SG_SELECT_TABLE = 1024,SQL_SG_UPDATE_TABLE = 2048,SQL_SG_UPDATE_COLUMN = 4096,SQL_SNVF_BIT_LENGTH = 1,SQL_SNVF_CHAR_LENGTH = 2,SQL_SNVF_CHARACTER_LENGTH = 4,SQL_SNVF_EXTRACT = 8,SQL_SNVF_OCTET_LENGTH = 16,SQL_SNVF_POSITION = 32,SQL_SP_EXISTS = 1,SQL_SP_ISNOTNULL = 2,SQL_SP_ISNULL = 4,SQL_SP_MATCH_FULL = 8,SQL_SP_MATCH_PARTIAL = 16,SQL_SP_MATCH_UNIQUE_FULL = 32,SQL_SP_MATCH_UNIQUE_PARTIAL = 64,SQL_SP_OVERLAPS = 128,SQL_SP_UNIQUE = 256,SQL_SP_LIKE = 512,SQL_SP_IN = 1024,SQL_SP_BETWEEN = 2048,SQL_SP_COMPARISON = 4096,SQL_SP_QUANTIFIED_COMPARISON = 8192,SQL_SRJO_CORRESPONDING_CLAUSE = 1,SQL_SRJO_CROSS_JOIN = 2,SQL_SRJO_EXCEPT_JOIN = 4,SQL_SRJO_FULL_OUTER_JOIN = 8,SQL_SRJO_INNER_JOIN = 16,SQL_SRJO_INTERSECT_JOIN = 32,SQL_SRJO_LEFT_OUTER_JOIN = 64,SQL_SRJO_NATURAL_JOIN = 128,SQL_SRJO_RIGHT_OUTER_JOIN = 256,SQL_SRJO_UNION_JOIN = 512,SQL_SR_USAGE_ON_DOMAIN = 1,SQL_SR_USAGE_ON_CHARACTER_SET = 2,SQL_SR_USAGE_ON_COLLATION = 4,SQL_SR_USAGE_ON_TRANSLATION = 8,SQL_SR_GRANT_OPTION_FOR = 16,SQL_SR_CASCADE = 32,SQL_SR_RESTRICT = 64,SQL_SR_DELETE_TABLE = 128,SQL_SR_INSERT_TABLE = 256,SQL_SR_INSERT_COLUMN = 512,SQL_SR_REFERENCES_TABLE = 1024,SQL_SR_REFERENCES_COLUMN = 2048,SQL_SR_SELECT_TABLE = 4096,SQL_SR_UPDATE_TABLE = 8192,SQL_SR_UPDATE_COLUMN = 16384,SQL_SRVC_VALUE_EXPRESSION = 1,SQL_SRVC_NULL = 2,SQL_SRVC_DEFAULT = 4,SQL_SRVC_ROW_SUBQUERY = 8,SQL_SSF_CONVERT = 1,SQL_SSF_LOWER = 2,SQL_SSF_UPPER = 4,SQL_SSF_SUBSTRING = 8,SQL_SSF_TRANSLATE = 16,SQL_SSF_TRIM_BOTH = 32,SQL_SSF_TRIM_LEADING = 64,SQL_SSF_TRIM_TRAILING = 128,SQL_SVE_CASE = 1,SQL_SVE_CAST = 2,SQL_SVE_COALESCE = 4,SQL_SVE_NULLIF = 8,SQL_SCC_XOPEN_CLI_VERSION1 = 1,SQL_SCC_ISO92_CLI = 2,SQL_SS_ADDITIONS = 1,SQL_SS_DELETIONS = 2,SQL_SS_UPDATES = 4,SQL_SQ_COMPARISON = 1,SQL_SQ_EXISTS = 2,SQL_SQ_IN = 4,SQL_SQ_QUANTIFIED = 8,SQL_SQ_CORRELATED_SUBQUERIES = 16,SQL_FN_SYS_USERNAME = 1,SQL_FN_SYS_DBNAME = 2,SQL_FN_SYS_IFNULL = 4,SQL_FN_STR_CONCAT = 1,SQL_FN_STR_INSERT = 2,SQL_FN_STR_LEFT = 4,SQL_FN_STR_LTRIM = 8,SQL_FN_STR_LENGTH = 16,SQL_FN_STR_LOCATE = 32,SQL_FN_STR_LCASE = 64,SQL_FN_STR_REPEAT = 128,SQL_FN_STR_REPLACE = 256,SQL_FN_STR_RIGHT = 512,SQL_FN_STR_RTRIM = 1024,SQL_FN_STR_SUBSTRING = 2048,SQL_FN_STR_UCASE = 4096,SQL_FN_STR_ASCII = 8192,SQL_FN_STR_CHAR = 16384,SQL_FN_STR_DIFFERENCE = 32768,SQL_FN_STR_LOCATE_2 = 65536,SQL_FN_STR_SOUNDEX = 131072,SQL_FN_STR_SPACE = 262144,SQL_FN_STR_BIT_LENGTH = 524288,SQL_FN_STR_CHAR_LENGTH = 1048576,SQL_FN_STR_CHARACTER_LENGTH = 2097152,SQL_FN_STR_OCTET_LENGTH = 4194304,SQL_FN_STR_POSITION = 8388608,SQL_FN_TSI_FRAC_SECOND = 1,SQL_FN_TSI_SECOND = 2,SQL_FN_TSI_MINUTE = 4,SQL_FN_TSI_HOUR = 8,SQL_FN_TSI_DAY = 16,SQL_FN_TSI_WEEK = 32,SQL_FN_TSI_MONTH = 64,SQL_FN_TSI_QUARTER = 128,SQL_FN_TSI_YEAR = 256,SQL_FN_TD_NOW = 1,SQL_FN_TD_CURDATE = 2,SQL_FN_TD_DAYOFMONTH = 4,SQL_FN_TD_DAYOFWEEK = 8,SQL_FN_TD_DAYOFYEAR = 16,SQL_FN_TD_MONTH = 32,SQL_FN_TD_QUARTER = 64,SQL_FN_TD_WEEK = 128,SQL_FN_TD_YEAR = 256,SQL_FN_TD_CURTIME = 512,SQL_FN_TD_HOUR = 1024,SQL_FN_TD_MINUTE = 2048,SQL_FN_TD_SECOND = 4096,SQL_FN_TD_TIMESTAMPADD = 8192,SQL_FN_TD_TIMESTAMPDIFF = 16384,SQL_FN_TD_DAYNAME = 32768,SQL_FN_TD_MONTHNAME = 65536,SQL_FN_TD_CURRENT_DATE = 131072,SQL_FN_TD_CURRENT_TIME = 262144,SQL_FN_TD_CURRENT_TIMESTAMP = 524288,SQL_FN_TD_EXTRACT = 1048576,SQL_U_UNION = 1,SQL_U_UNION_ALL = 2,SQL_US_UNION = 1,SQL_US_UNION_ALL = 2,SQL_CV_CREATE_VIEW = 1,SQL_CV_CHECK_OPTION = 2,SQL_CV_CASCADED = 4,SQL_CV_LOCAL = 8,SQL_QUERY_TIMEOUT = 0,SQL_MAX_ROWS = 1,SQL_NOSCAN = 2,SQL_MAX_LENGTH = 3,SQL_ASYNC_ENABLE = 4,SQL_BIND_TYPE = 5,SQL_CURSOR_TYPE = 6,SQL_CONCURRENCY = 7,SQL_KEYSET_SIZE = 8,SQL_ROWSET_SIZE = 9,SQL_SIMULATE_CURSOR = 10,SQL_RETRIEVE_DATA = 11,SQL_USE_BOOKMARKS = 12,SQL_GET_BOOKMARK = 13,SQL_ROW_NUMBER = 14,SQL_ATTR_ASYNC_ENABLE = 4,SQL_ATTR_CONCURRENCY = 7,SQL_ATTR_CURSOR_TYPE = 6,SQL_ATTR_ENABLE_AUTO_IPD = 15,SQL_ATTR_FETCH_BOOKMARK_PTR = 16,SQL_ATTR_KEYSET_SIZE = 8,SQL_ATTR_MAX_LENGTH = 3,SQL_ATTR_MAX_ROWS = 1,SQL_ATTR_NOSCAN = 2,SQL_ATTR_PARAM_BIND_OFFSET_PTR = 17,SQL_ATTR_PARAM_BIND_TYPE = 18,SQL_ATTR_PARAM_OPERATION_PTR = 19,SQL_ATTR_PARAM_STATUS_PTR = 20,SQL_ATTR_PARAMS_PROCESSED_PTR = 21,SQL_ATTR_PARAMSET_SIZE = 22,SQL_ATTR_QUERY_TIMEOUT = 0,SQL_ATTR_RETRIEVE_DATA = 11,SQL_ATTR_ROW_BIND_OFFSET_PTR = 23,SQL_ATTR_ROW_BIND_TYPE = 5,SQL_ATTR_ROW_NUMBER = 14,SQL_ATTR_ROW_OPERATION_PTR = 24,SQL_ATTR_ROW_STATUS_PTR = 25,SQL_ATTR_ROWS_FETCHED_PTR = 26,SQL_ATTR_ROW_ARRAY_SIZE = 27,SQL_ATTR_SIMULATE_CURSOR = 10,SQL_ATTR_USE_BOOKMARKS = 12,SQL_ASYNC_ENABLE_OFF = 0,SQL_ASYNC_ENABLE_ON = 1,SQL_ASYNC_ENABLE_DEFAULT = 0,SQL_PARAM_BIND_BY_COLUMN = 0,SQL_PARAM_BIND_TYPE_DEFAULT = 0,SQL_BIND_BY_COLUMN = 0,SQL_BIND_TYPE_DEFAULT = 0,SQL_CONCUR_READ_ONLY = 1,SQL_CONCUR_LOCK = 2,SQL_CONCUR_ROWVER = 3,SQL_CONCUR_VALUES = 4,SQL_CONCUR_DEFAULT = 1,SQL_CURSOR_FORWARD_ONLY = 0,SQL_CURSOR_KEYSET_DRIVEN = 1,SQL_CURSOR_DYNAMIC = 2,SQL_CURSOR_STATIC = 3,SQL_CURSOR_TYPE_DEFAULT = 0,SQL_KEYSET_SIZE_DEFAULT = 0,SQL_MAX_LENGTH_DEFAULT = 0,SQL_MAX_ROWS_DEFAULT = 0,SQL_NOSCAN_OFF = 0,SQL_NOSCAN_ON = 1,SQL_NOSCAN_DEFAULT = 0,SQL_QUERY_TIMEOUT_DEFAULT = 0,SQL_RD_OFF = 0,SQL_RD_ON = 1,SQL_RD_DEFAULT = 1,SQL_ROWSET_SIZE_DEFAULT = 1,SQL_SC_NON_UNIQUE = 0,SQL_SC_TRY_UNIQUE = 1,SQL_SC_UNIQUE = 2,SQL_UB_OFF = 0,SQL_UB_ON = 1,SQL_UB_DEFAULT = 0,SQL_UB_FIXED = 1,SQL_UB_VARIABLE = 2,SQL_COL_PRED_CHAR = 1,SQL_COL_PRED_BASIC = 2,SQL_ENTIRE_ROWSET = 0,SQL_POSITION = 0,SQL_REFRESH = 1,SQL_UPDATE = 2,SQL_DELETE = 3,SQL_ADD = 4,SQL_SETPOS_MAX_OPTION_VALUE = 4,SQL_UPDATE_BY_BOOKMARK = 5,SQL_DELETE_BY_BOOKMARK = 6,SQL_FETCH_BY_BOOKMARK = 7,SQL_LOCK_NO_CHANGE = 0,SQL_LOCK_EXCLUSIVE = 1,SQL_LOCK_UNLOCK = 2,SQL_SETPOS_MAX_LOCK_VALUE = 2,SQL_BEST_ROWID = 1,SQL_ROWVER = 2,SQL_FETCH_BOOKMARK = 8,SQL_ROW_SUCCESS = 0,SQL_ROW_DELETED = 1,SQL_ROW_UPDATED = 2,SQL_ROW_NOROW = 3,SQL_ROW_ADDED = 4,SQL_ROW_ERROR = 5,SQL_ROW_SUCCESS_WITH_INFO = 6,SQL_ROW_PROCEED = 0,SQL_ROW_IGNORE = 1,SQL_PARAM_SUCCESS = 0,SQL_PARAM_SUCCESS_WITH_INFO = 6,SQL_PARAM_ERROR = 5,SQL_PARAM_UNUSED = 7,SQL_PARAM_DIAG_UNAVAILABLE = 1,SQL_PARAM_PROCEED = 0,SQL_PARAM_IGNORE = 1,SQL_CASCADE = 0,SQL_RESTRICT = 1,SQL_SET_NULL = 2,SQL_NO_ACTION = 3,SQL_SET_DEFAULT = 4,SQL_INITIALLY_DEFERRED = 5,SQL_INITIALLY_IMMEDIATE = 6,SQL_NOT_DEFERRABLE = 7,SQL_PARAM_TYPE_UNKNOWN = 0,SQL_PARAM_INPUT = 1,SQL_PARAM_INPUT_OUTPUT = 2,SQL_RESULT_COL = 3,SQL_PARAM_OUTPUT = 4,SQL_RETURN_VALUE = 5,SQL_PT_UNKNOWN = 0,SQL_PT_PROCEDURE = 1,SQL_PT_FUNCTION = 2,SQL_PARAM_TYPE_DEFAULT = 2,SQL_SETPARAM_VALUE_MAX = -1,SQL_QUICK = 0,SQL_ENSURE = 1,SQL_TABLE_STAT = 0,SQL_PC_NOT_PSEUDO = 1,SQL_DATABASE_NAME = 16,SQL_FD_FETCH_PREV = 8,SQL_FETCH_PREV = 4,SQL_CONCUR_TIMESTAMP = 3,SQL_SCCO_OPT_TIMESTAMP = 4,SQL_CC_DELETE = 0,SQL_CR_DELETE = 0,SQL_CC_CLOSE = 1,SQL_CR_CLOSE = 1,SQL_CC_PRESERVE = 2,SQL_CR_PRESERVE = 2,SQL_SCROLL_FORWARD_ONLY = 0,SQL_SCROLL_KEYSET_DRIVEN = -1,SQL_SCROLL_DYNAMIC = -2,SQL_SCROLL_STATIC = -3,};
enum MACRO_SRCHFS {SRCHFS_START = 0x1,SRCHFS_MATCHPARTIALNAMES = 0x2,SRCHFS_MATCHDIRS = 0x4,SRCHFS_MATCHFILES = 0x8,SRCHFS_NEGATEPARAMS = 0x80000000,SRCHFS_VALIDOPTIONSMASK = 0x8000000F,};
enum MACRO_SS {SS_ONSTACK = 0x1,SS_DISABLE = 0x4,};
enum MACRO_SSIZE : __int64 {SSIZE_MAX = 2147483647,SIZE_T_MAX = -1,UQUAD_MAX = -1,QUAD_MAX = 9223372036854775807,};
enum MACRO_SSLEEP {SSLEEP = 3,SSTOP = 4,};
enum MACRO_SS_NOFDREF {SS_NOFDREF = 0x1,SS_ISCONNECTED = 0x2,SS_ISCONNECTING = 0x4,SS_ISDISCONNECTING = 0x8,SS_CANTSENDMORE = 0x10,SS_CANTRCVMORE = 0x20,SS_RCVATMARK = 0x40,SS_PRIV = 0x80,SS_NBIO = 0x100,SS_ASYNC = 0x200,SS_ISCONFIRMING = 0x400,SS_INCOMP = 0x800,SS_COMP = 0x1000,SS_ISDISCONNECTED = 0x2000,};
enum MACRO_STACK {STACK_GROWTH_UP = 0,};
enum MACRO_STACK_INCR {STACK_INCR = 16,};
enum MACRO_STATE_MAX {PPC_THREAD_STATE_MAX = 144,THREAD_STATE_MAX = 144,};
enum MACRO_STRCOUNT {STRCOUNT = 414,};
enum MACRO_STRING {STRING_LENGTH = 128,};
enum MACRO_STRU {STRU_F = 1,STRU_R = 2,STRU_P = 3,};
enum MACRO_SUBCMDMASK {SUBCMDMASK = 0xFF,};
enum MACRO_SUBCMDSHIFT {SUBCMDSHIFT = 8,};
enum MACRO_SUN {SUN_RPC = 1,};
enum MACRO_SUPPLY {SUPPLY_INTERVAL = 30,};
enum MACRO_SUSP {SUSP = 237,};
enum MACRO_SV {SV_SAVE_REGS = 0x1000,};
enum MACRO_SV_ONSTACK {SV_ONSTACK = 1,SV_INTERRUPT = 2,SV_RESETHAND = 4,SV_NODEFER = 16,SV_NOCLDSTOP = 8,SV_SIGINFO = 64,};
enum MACRO_SW {SW_FREED = 0x1,SW_SEQUENTIAL = 0x2,};
enum MACRO_SWITCH {SWITCH_OPTION_NONE = 0,SWITCH_OPTION_DEPRESS = 1,SWITCH_OPTION_WAIT = 2,};
enum MACRO_SYMTYPE {SYMTYPE = 50,};
enum MACRO_SYNC {SYNC_POLICY_FIFO = 0x0,SYNC_POLICY_FIXED_PRIORITY = 0x1,SYNC_POLICY_REVERSED = 0x2,SYNC_POLICY_ORDER_MASK = 0x3,SYNC_POLICY_LIFO = 0x2,SYNC_POLICY_MAX = 0x7,};
enum MACRO_SYNCH {SYNCH = 242,};
enum MACRO_SYS {SYS_syscall = 0,SYS_exit = 1,SYS_fork = 2,SYS_read = 3,SYS_write = 4,SYS_open = 5,SYS_close = 6,SYS_wait4 = 7,SYS_link = 9,SYS_unlink = 10,SYS_chdir = 12,SYS_fchdir = 13,SYS_mknod = 14,SYS_chmod = 15,SYS_chown = 16,SYS_getfsstat = 18,SYS_getpid = 20,SYS_setuid = 23,SYS_getuid = 24,SYS_geteuid = 25,SYS_ptrace = 26,SYS_recvmsg = 27,SYS_sendmsg = 28,SYS_recvfrom = 29,SYS_accept = 30,SYS_getpeername = 31,SYS_getsockname = 32,SYS_access = 33,SYS_chflags = 34,SYS_fchflags = 35,SYS_sync = 36,SYS_kill = 37,SYS_getppid = 39,SYS_dup = 41,SYS_pipe = 42,SYS_getegid = 43,SYS_profil = 44,SYS_ktrace = 45,SYS_sigaction = 46,SYS_getgid = 47,SYS_sigprocmask = 48,SYS_getlogin = 49,SYS_setlogin = 50,SYS_acct = 51,SYS_sigpending = 52,SYS_sigaltstack = 53,SYS_ioctl = 54,SYS_reboot = 55,SYS_revoke = 56,SYS_symlink = 57,SYS_readlink = 58,SYS_execve = 59,SYS_umask = 60,SYS_chroot = 61,SYS_msync = 65,SYS_vfork = 66,SYS_sbrk = 69,SYS_sstk = 70,SYS_munmap = 73,SYS_mprotect = 74,SYS_madvise = 75,SYS_mincore = 78,SYS_getgroups = 79,SYS_setgroups = 80,SYS_getpgrp = 81,SYS_setpgid = 82,SYS_setitimer = 83,SYS_swapon = 85,SYS_getitimer = 86,SYS_getdtablesize = 89,SYS_dup2 = 90,SYS_fcntl = 92,SYS_select = 93,SYS_fsync = 95,SYS_setpriority = 96,SYS_socket = 97,SYS_connect = 98,SYS_getpriority = 100,SYS_sigreturn = 103,SYS_bind = 104,SYS_setsockopt = 105,SYS_listen = 106,SYS_sigsuspend = 111,SYS_gettimeofday = 116,SYS_getrusage = 117,SYS_getsockopt = 118,SYS_readv = 120,SYS_writev = 121,SYS_settimeofday = 122,SYS_fchown = 123,SYS_fchmod = 124,SYS_rename = 128,SYS_flock = 131,SYS_mkfifo = 132,SYS_sendto = 133,SYS_shutdown = 134,SYS_socketpair = 135,SYS_mkdir = 136,SYS_rmdir = 137,SYS_utimes = 138,SYS_futimes = 139,SYS_adjtime = 140,SYS_setsid = 147,SYS_getpgid = 151,SYS_setprivexec = 152,SYS_pread = 153,SYS_pwrite = 154,SYS_nfssvc = 155,SYS_statfs = 157,SYS_fstatfs = 158,SYS_unmount = 159,SYS_getfh = 161,SYS_quotactl = 165,SYS_mount = 167,SYS_table = 170,SYS_gc_control = 175,SYS_add_profil = 176,SYS_kdebug_trace = 180,SYS_setgid = 181,SYS_setegid = 182,SYS_seteuid = 183,SYS_stat = 188,SYS_fstat = 189,SYS_lstat = 190,SYS_pathconf = 191,SYS_fpathconf = 192,SYS_getrlimit = 194,SYS_setrlimit = 195,SYS_getdirentries = 196,SYS_mmap = 197,SYS___syscall = 198,SYS_lseek = 199,SYS_truncate = 200,SYS_ftruncate = 201,SYS___sysctl = 202,SYS_mlock = 203,SYS_munlock = 204,SYS_undelete = 205,SYS_ATsocket = 206,SYS_ATgetmsg = 207,SYS_ATputmsg = 208,SYS_ATPsndreq = 209,SYS_ATPsndrsp = 210,SYS_ATPgetreq = 211,SYS_ATPgetrsp = 212,SYS_mkcomplex = 216,SYS_statv = 217,SYS_lstatv = 218,SYS_fstatv = 219,SYS_getattrlist = 220,SYS_setattrlist = 221,SYS_getdirentriesattr = 222,SYS_exchangedata = 223,SYS_checkuseraccess = 224,SYS_searchfs = 225,SYS_minherit = 250,SYS_semsys = 251,SYS_msgsys = 252,SYS_shmsys = 253,SYS_semctl = 254,SYS_semget = 255,SYS_semop = 256,SYS_semconfig = 257,SYS_msgctl = 258,SYS_msgget = 259,SYS_msgsnd = 260,SYS_msgrcv = 261,SYS_shmat = 262,SYS_shmctl = 263,SYS_shmdt = 264,SYS_shmget = 265,SYS_shm_open = 266,SYS_shm_unlink = 267,SYS_sem_open = 268,SYS_sem_close = 269,SYS_sem_unlink = 270,SYS_sem_wait = 271,SYS_sem_trywait = 272,SYS_sem_post = 273,SYS_sem_getvalue = 274,SYS_sem_init = 275,SYS_sem_destroy = 276,SYS_load_shared_file = 296,SYS_reset_shared_file = 297,SYS_new_system_shared_regions = 298,SYS_getsid = 310,SYS_mlockall = 324,SYS_munlockall = 325,SYS_issetugid = 327,SYS___pthread_kill = 328,SYS_pthread_sigmask = 329,SYS_sigwait = 330,};
enum MACRO_SYSPROTO {SYSPROTO_EVENT = 1,SYSPROTO_CONTROL = 2,};
enum MACRO_SYSTEM {SYSTEM_REGION_BACKED = 0x2,};
enum MACRO_SZ {ANAME_SZ = 40,REALM_SZ = 40,SNAME_SZ = 40,INST_SZ = 40,MAX_K_NAME_SZ = 122,KKEY_SZ = 100,VERSION_SZ = 1,MSG_TYPE_SZ = 1,DATE_SZ = 26,};
enum MACRO_SZOMB {SZOMB = 5,};
enum MACRO_S_BLKSIZE {S_BLKSIZE = 512,};
enum MACRO_SendQSize {SendQSize = 16384,};
enum MACRO_T {T_A = 1,T_NS = 2,T_MD = 3,T_MF = 4,T_CNAME = 5,T_SOA = 6,T_MB = 7,T_MG = 8,T_MR = 9,T_NULL = 10,T_WKS = 11,T_PTR = 12,T_HINFO = 13,T_MINFO = 14,T_MX = 15,T_TXT = 16,T_RP = 17,T_AFSDB = 18,T_X25 = 19,T_ISDN = 20,T_RT = 21,T_NSAP = 22,T_NSAP_PTR = 23,T_SIG = 24,T_KEY = 25,T_PX = 26,T_GPOS = 27,T_AAAA = 28,T_LOC = 29,T_UINFO = 100,T_UID = 101,T_GID = 102,T_UNSPEC = 103,T_AXFR = 252,T_MAILB = 253,T_MAILA = 254,T_ANY = 255,};
enum MACRO_TAB0 {TAB0 = 0x0,TAB1 = 0x400,TAB2 = 0x800,};
enum MACRO_TAG {TAG_NO_FRAME_USED = 0x0,};
enum MACRO_TALK {TALK_VERSION = 1,};
enum MACRO_TANDEM {TANDEM = 0x1,CBREAK = 0x2,LCASE = 0x4,ECHO = 0x8,CRMOD = 0x10,RAW = 0x20,ODDP = 0x40,EVENP = 0x80,};
enum MACRO_TARGET {TARGET_OS_MAC = 1,TARGET_OS_WIN32 = 0,TARGET_OS_UNIX = 0,TARGET_CPU_PPC = 1,TARGET_CPU_68K = 0,TARGET_CPU_X86 = 0,TARGET_CPU_MIPS = 0,TARGET_CPU_SPARC = 0,TARGET_CPU_ALPHA = 0,TARGET_RT_LITTLE_ENDIAN = 0,TARGET_RT_BIG_ENDIAN = 1,TARGET_RT_MAC_CFM = 0,TARGET_RT_MAC_MACHO = 1,};
enum MACRO_TASK {TASK_INFO_MAX = 1024,TASK_BASIC_INFO = 4,TASK_EVENTS_INFO = 2,TASK_THREAD_TIMES_INFO = 3,TASK_SCHED_TIMESHARE_INFO = 10,TASK_SCHED_RR_INFO = 11,TASK_SCHED_FIFO_INFO = 12,TASK_SCHED_INFO = 14,TASK_SECURITY_TOKEN = 13,TASK_CATEGORY_POLICY = 1,TASK_KERNEL_PORT = 1,TASK_HOST_PORT = 2,TASK_BOOTSTRAP_PORT = 4,TASK_WIRED_LEDGER_PORT = 5,TASK_PAGED_LEDGER_PORT = 6,};
enum MACRO_TASK_NULL {TASK_NULL = 0,THREAD_NULL = 0,THR_ACT_NULL = 0,IPC_SPACE_NULL = 0,HOST_NULL = 0,HOST_PRIV_NULL = 0,HOST_SECURITY_NULL = 0,PROCESSOR_SET_NULL = 0,PROCESSOR_NULL = 0,SEMAPHORE_NULL = 0,LOCK_SET_NULL = 0,LEDGER_NULL = 0,ALARM_NULL = 0,CLOCK_NULL = 0,UND_SERVER_NULL = 0,};
enum MACRO_TASK_PORT {TASK_PORT_REGISTER_MAX = 3,};
enum MACRO_TCIFLUSH {TCIFLUSH = 1,TCOFLUSH = 2,};
enum MACRO_TCIOFF {TCIOFF = 3,TCION = 4,};
enum MACRO_TCIOFLUSH {TCIOFLUSH = 3,};
enum MACRO_TCL {TCL_ALPHA_RELEASE = 0,TCL_BETA_RELEASE = 1,TCL_FINAL_RELEASE = 2,TCL_MAJOR_VERSION = 8,TCL_MINOR_VERSION = 3,TCL_RELEASE_LEVEL = 2,TCL_RELEASE_SERIAL = 4,};
enum MACRO_TCL_CONVERT {TCL_CONVERT_MULTIBYTE = -1,TCL_CONVERT_SYNTAX = -2,TCL_CONVERT_UNKNOWN = -3,TCL_CONVERT_NOSPACE = -4,TCL_UTF_MAX = 3,TCL_STUB_MAGIC = -56378673,};
enum MACRO_TCL_THREAD {TCL_THREAD_STACK_DEFAULT = 0,TCL_THREAD_NOFLAGS = 0,TCL_THREAD_JOINABLE = 1,TCL_REG_BASIC = 0,TCL_REG_EXTENDED = 1,TCL_REG_ADVF = 2,TCL_REG_ADVANCED = 3,TCL_REG_QUOTE = 4,TCL_REG_NOCASE = 8,TCL_REG_NOSUB = 16,TCL_REG_EXPANDED = 32,TCL_REG_NLSTOP = 64,TCL_REG_NLANCH = 128,TCL_REG_NEWLINE = 192,TCL_REG_CANMATCH = 512,TCL_REG_BOSONLY = 1024,TCL_REG_NOTBOL = 1,TCL_REG_NOTEOL = 2,TCL_OK = 0,TCL_ERROR = 1,TCL_RETURN = 2,TCL_BREAK = 3,TCL_CONTINUE = 4,TCL_RESULT_SIZE = 200,TCL_DSTRING_STATIC_SIZE = 200,TCL_MAX_PREC = 17,TCL_DOUBLE_SPACE = 27,TCL_INTEGER_SPACE = 24,TCL_DONT_USE_BRACES = 1,TCL_EXACT = 1,TCL_NO_EVAL = 65536,TCL_EVAL_GLOBAL = 131072,TCL_EVAL_DIRECT = 262144,TCL_GLOBAL_ONLY = 1,TCL_NAMESPACE_ONLY = 2,TCL_APPEND_VALUE = 4,TCL_LIST_ELEMENT = 8,TCL_TRACE_READS = 16,TCL_TRACE_WRITES = 32,TCL_TRACE_UNSETS = 64,TCL_TRACE_DESTROYED = 128,TCL_INTERP_DESTROYED = 256,TCL_LEAVE_ERR_MSG = 512,TCL_TRACE_ARRAY = 2048,TCL_PARSE_PART1 = 1024,TCL_LINK_INT = 1,TCL_LINK_DOUBLE = 2,TCL_LINK_BOOLEAN = 3,TCL_LINK_STRING = 4,TCL_LINK_READ_ONLY = 128,TCL_SMALL_HASH_TABLE = 4,TCL_STRING_KEYS = 0,TCL_ONE_WORD_KEYS = 1,TCL_DONT_WAIT = 2,TCL_WINDOW_EVENTS = 4,TCL_FILE_EVENTS = 8,TCL_TIMER_EVENTS = 16,TCL_IDLE_EVENTS = 32,TCL_ALL_EVENTS = -3,TCL_SERVICE_NONE = 0,TCL_SERVICE_ALL = 1,TCL_READABLE = 2,TCL_WRITABLE = 4,TCL_EXCEPTION = 8,TCL_STDIN = 2,TCL_STDOUT = 4,TCL_STDERR = 8,TCL_ENFORCE_MODE = 16,TCL_CLOSE_READ = 2,TCL_CLOSE_WRITE = 4,TCL_CHANNEL_VERSION_1 = 1,TCL_CHANNEL_VERSION_2 = 2,TCL_MODE_BLOCKING = 0,TCL_MODE_NONBLOCKING = 1,TCL_ENCODING_START = 1,TCL_ENCODING_END = 2,TCL_ENCODING_STOPONERROR = 4,TCL_TOKEN_WORD = 1,TCL_TOKEN_SIMPLE_WORD = 2,TCL_TOKEN_TEXT = 4,TCL_TOKEN_BS = 8,TCL_TOKEN_COMMAND = 16,TCL_TOKEN_VARIABLE = 32,TCL_TOKEN_SUB_EXPR = 64,TCL_TOKEN_OPERATOR = 128,TCL_PARSE_SUCCESS = 0,TCL_PARSE_QUOTE_EXTRA = 1,TCL_PARSE_BRACE_EXTRA = 2,TCL_PARSE_MISSING_BRACE = 3,TCL_PARSE_MISSING_BRACKET = 4,TCL_PARSE_MISSING_PAREN = 5,TCL_PARSE_MISSING_QUOTE = 6,TCL_PARSE_MISSING_VAR_BRACE = 7,TCL_PARSE_SYNTAX = 8,TCL_PARSE_BAD_NUMBER = 9,};
enum MACRO_TCOOFF {TCOOFF = 1,TCOON = 2,};
enum MACRO_TCP {TCP_MAXWIN = 65535,};
enum MACRO_TCP6 {TCP6_NSTATES = 11,};
enum MACRO_TCP6S {TCP6S_CLOSED = 0,TCP6S_LISTEN = 1,TCP6S_SYN_SENT = 2,TCP6S_SYN_RECEIVED = 3,TCP6S_ESTABLISHED = 4,TCP6S_CLOSE_WAIT = 5,TCP6S_FIN_WAIT_1 = 6,TCP6S_CLOSING = 7,TCP6S_LAST_ACK = 8,TCP6S_FIN_WAIT_2 = 9,TCP6S_TIME_WAIT = 10,};
enum MACRO_TCPOLEN {TCPOLEN_MAXSEG = 4,};
enum MACRO_TCPOLEN_CC {TCPOLEN_CC = 6,TCPOLEN_CC_APPA = 8,};
enum MACRO_TCPOLEN_TIMESTAMP {TCPOLEN_TIMESTAMP = 10,TCPOLEN_TSTAMP_APPA = 12,};
enum MACRO_TCPOPT {TCPOPT_EOL = 0,TCPOPT_NOP = 1,TCPOPT_MAXSEG = 2,};
enum MACRO_TCPOPT_SACK {TCPOPT_SACK = 5,TCPOPT_TIMESTAMP = 8,};
enum MACRO_TCPOPT_TSTAMP {TCPOPT_TSTAMP_HDR = 16844810,TCPOPT_CC = 11,TCPOPT_CCNEW = 12,TCPOPT_CCECHO = 13,};
enum MACRO_TCPS {TCPS_CLOSED = 0,TCPS_LISTEN = 1,TCPS_SYN_SENT = 2,TCPS_SYN_RECEIVED = 3,TCPS_ESTABLISHED = 4,TCPS_CLOSE_WAIT = 5,TCPS_FIN_WAIT_1 = 6,TCPS_CLOSING = 7,TCPS_LAST_ACK = 8,TCPS_FIN_WAIT_2 = 9,TCPS_TIME_WAIT = 10,};
enum MACRO_TCPT {TCPT_NTIMERS = 4,TCPT_REXMT = 0,TCPT_PERSIST = 1,TCPT_KEEP = 2,TCPT_2MSL = 3,};
enum MACRO_TCPTV {TCPTV_SRTTBASE = 0,TCPTV_KEEPCNT = 8,TCPTV_TWTRUNC = 8,};
enum MACRO_TCP_LINGERTIME {TCP_LINGERTIME = 120,TCP_MAXRXTSHIFT = 12,};
enum MACRO_TCP_MAX {TCP_MAX_WINSHIFT = 14,TCP_MAXBURST = 4,TCP_MAXHLEN = 60,TCP_NODELAY = 1,TCP_MAXSEG = 2,TCP_NOPUSH = 4,TCP_NOOPT = 8,TCP_NSTATES = 11,};
enum MACRO_TCSANOW {TCSANOW = 0,TCSADRAIN = 1,TCSAFLUSH = 2,TCSASOFT = 16,B19200 = 19200,};
enum MACRO_TELCMD {TELCMD_FIRST = 236,TELCMD_LAST = 255,};
enum MACRO_TELOPT {TELOPT_BINARY = 0,TELOPT_ECHO = 1,TELOPT_RCP = 2,TELOPT_SGA = 3,TELOPT_NAMS = 4,TELOPT_STATUS = 5,TELOPT_TM = 6,TELOPT_RCTE = 7,TELOPT_NAOL = 8,TELOPT_NAOP = 9,TELOPT_NAOCRD = 10,TELOPT_NAOHTS = 11,TELOPT_NAOHTD = 12,TELOPT_NAOFFD = 13,TELOPT_NAOVTS = 14,TELOPT_NAOVTD = 15,TELOPT_NAOLFD = 16,TELOPT_XASCII = 17,TELOPT_LOGOUT = 18,TELOPT_BM = 19,TELOPT_DET = 20,TELOPT_SUPDUP = 21,TELOPT_SUPDUPOUTPUT = 22,TELOPT_SNDLOC = 23,TELOPT_TTYPE = 24,TELOPT_EOR = 25,TELOPT_TUID = 26,TELOPT_OUTMRK = 27,TELOPT_TTYLOC = 28,TELOPT_3270REGIME = 29,TELOPT_X3PAD = 30,TELOPT_NAWS = 31,TELOPT_TSPEED = 32,TELOPT_LFLOW = 33,TELOPT_LINEMODE = 34,TELOPT_XDISPLOC = 35,TELOPT_OLD_ENVIRON = 36,TELOPT_AUTHENTICATION = 37,TELOPT_ENCRYPT = 38,TELOPT_NEW_ENVIRON = 39,TELOPT_EXOPL = 255,};
enum MACRO_TELQUAL {TELQUAL_IS = 0,TELQUAL_SEND = 1,TELQUAL_INFO = 2,TELQUAL_REPLY = 2,TELQUAL_NAME = 3,};
enum MACRO_TEMPDEBUG {TEMPDEBUG = 0,};
enum MACRO_TERMIOS {TERMIOS = 1,};
enum MACRO_TGEXEC {TGEXEC = 0x8,};
enum MACRO_TGREAD {TGREAD = 0x20,};
enum MACRO_TGWRITE {TGWRITE = 0x10,};
enum MACRO_TH {TH_USAGE_SCALE = 1000,TH_STATE_RUNNING = 1,TH_STATE_STOPPED = 2,TH_STATE_WAITING = 3,TH_STATE_UNINTERRUPTIBLE = 4,TH_STATE_HALTED = 5,TH_FLAGS_SWAPPED = 1,TH_FLAGS_IDLE = 2,};
enum MACRO_THREAD {THREAD_STATE_NONE = 7,};
enum MACRO_THREAD_INFO {THREAD_INFO_MAX = 1024,THREAD_BASIC_INFO = 3,};
enum MACRO_THREAD_SCHED {THREAD_SCHED_TIMESHARE_INFO = 10,THREAD_SCHED_RR_INFO = 11,THREAD_SCHED_FIFO_INFO = 12,THREAD_STANDARD_POLICY = 1,THREAD_STANDARD_POLICY_COUNT = 0,THREAD_EXTENDED_POLICY = 1,THREAD_TIME_CONSTRAINT_POLICY = 2,THREAD_PRECEDENCE_POLICY = 3,THREAD_KERNEL_PORT = 1,};
enum MACRO_THREAD_STATE {THREAD_STATE_FLAVOR_LIST = 0,};
enum MACRO_TH_FIN {TH_FIN = 0x1,TH_SYN = 0x2,TH_RST = 0x4,TH_PUSH = 0x8,TH_ACK = 0x10,TH_URG = 0x20,TH_ECE = 0x40,TH_CWR = 0x80,TH_FLAGS = 0xF7,};
enum MACRO_TIME {TIME_MICROS_MAX = 1000000,HOST_INFO_MAX = 1024,KERNEL_VERSION_MAX = 512,KERNEL_BOOT_INFO_MAX = 4096,KERNEL_BOOTMAGIC_MAX = 8192,};
enum MACRO_TIMEOUT {CLSET_TIMEOUT = 1,CLGET_TIMEOUT = 2,};
enum MACRO_TIMER {TIMER_RATE = 30,};
enum MACRO_TIME_ABSOLUTE {TIME_ABSOLUTE = 0x0,TIME_RELATIVE = 0x1,};
enum MACRO_TIOCCBRK {TIOCCBRK = 536900730,};
enum MACRO_TIOCCDTR {TIOCCDTR = 536900728,};
enum MACRO_TIOCDRAIN {TIOCDRAIN = 536900702,};
enum MACRO_TIOCDSIMICROCODE {TIOCDSIMICROCODE = 536900693,};
enum MACRO_TIOCEXCL {TIOCEXCL = 536900621,};
enum MACRO_TIOCHPCL {TIOCHPCL = 536900610,};
enum MACRO_TIOCM {TIOCM_LE = 0x1,TIOCM_DTR = 0x2,TIOCM_RTS = 0x4,TIOCM_ST = 0x8,TIOCM_SR = 0x10,TIOCM_CTS = 0x20,TIOCM_CAR = 0x40,TIOCM_CD = 0x40,TIOCM_RNG = 0x80,TIOCM_RI = 0x80,TIOCM_DSR = 0x100,};
enum MACRO_TIOCNOTTY {TIOCNOTTY = 536900721,};
enum MACRO_TIOCNXCL {TIOCNXCL = 536900622,};
enum MACRO_TIOCPKT {TIOCPKT_DATA = 0x0,TIOCPKT_FLUSHREAD = 0x1,TIOCPKT_FLUSHWRITE = 0x2,TIOCPKT_STOP = 0x4,TIOCPKT_START = 0x8,TIOCPKT_NOSTOP = 0x10,TIOCPKT_DOSTOP = 0x20,TIOCPKT_IOCTL = 0x40,};
enum MACRO_TIOCSBRK {TIOCSBRK = 536900731,};
enum MACRO_TIOCSCONS {TIOCSCONS = 536900707,};
enum MACRO_TIOCSCTTY {TIOCSCTTY = 536900705,};
enum MACRO_TIOCSDTR {TIOCSDTR = 536900729,};
enum MACRO_TIOCSIG {TIOCSIG = 536900703,};
enum MACRO_TIOCSTART {TIOCSTART = 536900718,};
enum MACRO_TIOCSTAT {TIOCSTAT = 536900709,};
enum MACRO_TIOCSTOP {TIOCSTOP = 536900719,};
enum MACRO_TKT {TKT_FLG_FORWARDABLE = 0x40000000,TKT_FLG_FORWARDED = 0x20000000,TKT_FLG_PROXIABLE = 0x10000000,TKT_FLG_PROXY = 0x8000000,TKT_FLG_MAY_POSTDATE = 0x4000000,TKT_FLG_POSTDATED = 0x2000000,TKT_FLG_INVALID = 0x1000000,TKT_FLG_RENEWABLE = 0x800000,TKT_FLG_INITIAL = 0x400000,TKT_FLG_PRE_AUTH = 0x200000,TKT_FLG_HW_AUTH = 0x100000,TKT_FLG_TRANSIT_POLICY_CHECKED = 0x80000,TKT_FLG_OK_AS_DELEGATE = 0x40000,TKT_FLG_ANONYMOUS = 0x20000,};
enum MACRO_TKT_FIL {TKT_FIL_ACC = 77,TKT_FIL_LCK = 78,TKT_FIL_FMT = 79,TKT_FIL_INI = 80,};
enum MACRO_TLOSS {TLOSS = 5,};
enum MACRO_TM {TM_SUNDAY = 0,TM_MONDAY = 1,TM_TUESDAY = 2,TM_WEDNESDAY = 3,TM_THURSDAY = 4,TM_FRIDAY = 5,TM_SATURDAY = 6,TM_JANUARY = 0,TM_FEBRUARY = 1,TM_MARCH = 2,TM_APRIL = 3,TM_MAY = 4,TM_JUNE = 5,TM_JULY = 6,TM_AUGUST = 7,TM_SEPTEMBER = 8,TM_OCTOBER = 9,TM_NOVEMBER = 10,TM_DECEMBER = 11,TM_YEAR_BASE = 1900,};
enum MACRO_TMAGLEN {TMAGLEN = 6,};
enum MACRO_TMP {TMP_MAX = 308915776,};
enum MACRO_TOEXEC {TOEXEC = 0x1,};
enum MACRO_TOREAD {TOREAD = 0x4,};
enum MACRO_TOWRITE {TOWRITE = 0x2,};
enum MACRO_TR {TR_BREADHIT = 0,TR_BREADMISS = 1,TR_BWRITE = 2,TR_BREADHITRA = 3,TR_BREADMISSRA = 4,TR_XFODMISS = 5,TR_XFODHIT = 6,TR_BRELSE = 7,TR_BREALLOC = 8,TR_MALL = 10,TR_INTRANS = 20,TR_EINTRANS = 21,TR_FRECLAIM = 22,TR_RECLAIM = 23,TR_XSFREC = 24,TR_XIFREC = 25,TR_WAITMEM = 26,TR_EWAITMEM = 27,TR_ZFOD = 28,TR_EXFOD = 29,TR_VRFOD = 30,TR_CACHEFOD = 31,TR_SWAPIN = 32,TR_PGINDONE = 33,TR_SWAPIO = 34,TR_VADVISE = 40,TR_STAMP = 45,TR_NFLAGS = 100,};
enum MACRO_TRACE {TRACE_DISABLE = 0x0,TRACE_TIMES = 0x1,TRACE_TPUTS = 0x2,TRACE_UPDATE = 0x4,TRACE_MOVE = 0x8,TRACE_CHARPUT = 0x10,TRACE_ORDINARY = 0x1F,TRACE_CALLS = 0x20,TRACE_VIRTPUT = 0x40,TRACE_IEVENT = 0x80,TRACE_BITS = 0x100,TRACE_ICALLS = 0x200,TRACE_CCALLS = 0x400,TRACE_DATABASE = 0x800,TRACE_ATTRS = 0x1000,TRACE_MAXIMUM = 0xFFFF,};
enum MACRO_TRCSIZ {TRCSIZ = 4096,};
enum MACRO_TRY {TRY_AGAIN = 2,};
enum MACRO_TS {TS_SO_OLOWAT = 0x1,TS_ASYNC = 0x2,TS_BUSY = 0x4,TS_CARR_ON = 0x8,TS_FLUSH = 0x10,TS_ISOPEN = 0x20,TS_TBLOCK = 0x40,TS_TIMEOUT = 0x80,TS_TTSTOP = 0x100,TS_XCLUDE = 0x400,TS_BKSL = 0x800,TS_CNTTB = 0x1000,TS_ERASE = 0x2000,TS_LNCH = 0x4000,TS_TYPEN = 0x8000,TS_LOCAL = 0xF800,TS_CAN_BYPASS_L_RINT = 0x10000,TS_CONNECTED = 0x20000,TS_SNOOP = 0x40000,TS_SO_OCOMPLETE = 0x80000,TS_ZOMBIE = 0x100000,TS_CAR_OFLOW = 0x200000,};
enum MACRO_TSGID {TSGID = 0x400,};
enum MACRO_TSP {TSP_ANY = 0,TSP_ADJTIME = 1,TSP_ACK = 2,TSP_MASTERREQ = 3,TSP_MASTERACK = 4,TSP_SETTIME = 5,TSP_MASTERUP = 6,TSP_SLAVEUP = 7,TSP_ELECTION = 8,TSP_ACCEPT = 9,TSP_REFUSE = 10,TSP_CONFLICT = 11,TSP_RESOLVE = 12,TSP_QUIT = 13,TSP_DATE = 14,TSP_DATEREQ = 15,TSP_DATEACK = 16,TSP_TRACEON = 17,TSP_TRACEOFF = 18,TSP_MSITE = 19,TSP_MSITEREQ = 20,TSP_TEST = 21,TSP_SETDATE = 22,TSP_SETDATEREQ = 23,TSP_LOOP = 24,};
enum MACRO_TSPTYPENUMBER {TSPTYPENUMBER = 25,};
enum MACRO_TSPVERSION {TSPVERSION = 1,};
enum MACRO_TSVTX {TSVTX = 0x200,};
enum MACRO_TTCP {TTCP_CLIENT_SND_WND = 4096,};
enum MACRO_TTIPRI {TTIPRI = 25,};
enum MACRO_TTOPRI {TTOPRI = 26,IBUFSIZ = 384,};
enum MACRO_TTY {TTY_ON = 0x1,TTY_SECURE = 0x2,};
enum MACRO_TTYCLSIZE {TTYCLSIZE = 1024,};
enum MACRO_TTYDISC {TTYDISC = 0,TABLDISC = 3,SLIPDISC = 4,};
enum MACRO_TTY_CHARMASK {TTY_CHARMASK = 0xFF,TTY_QUOTE = 0x100,TTY_ERRORMASK = 0xFF000000,TTY_FE = 0x1000000,TTY_PE = 0x2000000,TTY_OE = 0x4000000,TTY_BI = 0x8000000,};
enum MACRO_TUEXEC {TUEXEC = 0x40,};
enum MACRO_TUREAD {TUREAD = 0x100,};
enum MACRO_TUWRITE {TUWRITE = 0x80,};
enum MACRO_TVERSLEN {TVERSLEN = 2,REGTYPE = 48,};
enum MACRO_TYPE {TYPE_A = 1,TYPE_E = 2,TYPE_I = 3,TYPE_L = 4,};
enum MACRO_TZ {TZ_MAX_TIMES = 370,TZ_MAX_TYPES = 20,TZ_MAX_CHARS = 50,TZ_MAX_LEAPS = 50,};
enum MACRO_TuneParamCnt {TuneParamCnt = 21,};
enum MACRO_UBC {UBC_FLAGS_NONE = 0x0,UBC_HOLDOBJECT = 0x1,};
enum MACRO_UCHAR_MAX {UCHAR_MAX = 255,};
enum MACRO_UF {UF_SETTABLE = 0xFFFF,UF_NODUMP = 0x1,UF_IMMUTABLE = 0x2,UF_APPEND = 0x4,UF_OPAQUE = 0x8,};
enum MACRO_UF_EXCLOSE {UF_EXCLOSE = 0x1,UF_MAPPED = 0x2,UF_RESERVED = 0x4,};
enum MACRO_UI {UI_NONE = 0x0,UI_HASPAGER = 0x1,UI_INITED = 0x2,UI_HASOBJREF = 0x4,UI_WASMAPPED = 0x8,UI_DONTCACHE = 0x10,};
enum MACRO_UID {UID_ROOT = 0,UID_BIN = 3,UID_UUCP = 66,};
enum MACRO_UINT {UINT_LEAST8_MAX = 255,UINT_LEAST16_MAX = 65535,UINT_LEAST32_MAX = -1,UINT_LEAST64_MAX = -1,};
enum MACRO_UINT8 {UINT8_MAX = 255,UINT16_MAX = 65535,UINT32_MAX = -1,UINT64_MAX = -1,};
enum MACRO_UINTMAX {UINTMAX_MAX = -1,};
enum MACRO_UINTPTR {UINTPTR_MAX = -1,};
enum MACRO_UINT_FAST8 {UINT_FAST8_MAX = 255,UINT_FAST16_MAX = 65535,UINT_FAST32_MAX = -1,UINT_FAST64_MAX = -1,};
enum MACRO_UL {UL_GETFSIZE = 1,UL_SETFSIZE = 2,};
enum MACRO_ULLONG : __int64 {ULLONG_MAX = 0xFFFFFFFFFFFFFFFF,LLONG_MAX = 0x7FFFFFFFFFFFFFFF,};
enum MACRO_ULONG : __int64 {ULONG_MAX = 4294967295,};
enum MACRO_UNKNOWN {UNKNOWN_REQUEST = 5,};
enum MACRO_UNKNOWNGID {UNKNOWNGID = 99,};
enum MACRO_UNKNOWNPERMISSIONS {UNKNOWNPERMISSIONS = 453,};
enum MACRO_UNKNOWNUID {UNKNOWNUID = 99,};
enum MACRO_UNMNT {UNMNT_ABOVE = 0x1,UNMNT_BELOW = 0x2,UNMNT_REPLACE = 0x3,UNMNT_OPMASK = 0x3,};
enum MACRO_UNVIS {UNVIS_VALID = 1,UNVIS_VALIDPUSH = 2,UNVIS_NOCHAR = 3,UNVIS_SYNBAD = -1,UNVIS_ERROR = -2,UNVIS_END = 1,};
enum MACRO_UPAGES {UPAGES = 0,MSIZE = 256,MCLBYTES = 2048,};
enum MACRO_UPDATE {UPDATE_IF_CHANGED = 1,UPDATE_UNCONDITIONAL = 2,};
enum MACRO_UPL {UPL_FLAGS_NONE = 0x0,UPL_COPYOUT_FROM = 0x1,UPL_PRECIOUS = 0x2,UPL_NO_SYNC = 0x4,UPL_CLEAN_IN_PLACE = 0x8,UPL_NOBLOCK = 0x10,UPL_RET_ONLY_DIRTY = 0x20,UPL_SET_INTERNAL = 0x40,UPL_QUERY_OBJECT_TYPE = 0x80,UPL_RET_ONLY_ABSENT = 0x100,UPL_FILE_IO = 0x200,UPL_ABORT_RESTART = 0x1,UPL_ABORT_UNAVAILABLE = 0x2,UPL_ABORT_ERROR = 0x4,UPL_ABORT_FREE_ON_EMPTY = 0x8,UPL_ABORT_DUMP_PAGES = 0x10,UPL_ABORT_NOTIFY_EMPTY = 0x20,UPL_CHECK_DIRTY = 0x1,UPL_IOSYNC = 0x1,UPL_NOCOMMIT = 0x2,UPL_NORDAHEAD = 0x4,UPL_COMMIT_FREE_ON_EMPTY = 0x1,UPL_COMMIT_CLEAR_DIRTY = 0x2,UPL_COMMIT_SET_DIRTY = 0x4,UPL_COMMIT_INACTIVATE = 0x8,UPL_COMMIT_NOTIFY_EMPTY = 0x10,UPL_DEV_MEMORY = 0x1,UPL_PHYS_CONTIG = 0x2,UPL_POP_DIRTY = 0x1,UPL_POP_PAGEOUT = 0x2,UPL_POP_PRECIOUS = 0x4,UPL_POP_ABSENT = 0x8,UPL_POP_BUSY = 0x10,UPL_POP_PHYSICAL = 0x10000000,UPL_POP_DUMP = 0x20000000,UPL_POP_SET = 0x40000000,UPL_POP_CLR = 0x80000000,};
enum MACRO_USER : __int64 {USER_STACK_END = 0xFFFF0000,};
enum MACRO_USER_CS {USER_CS_PATH = 1,USER_BC_BASE_MAX = 2,USER_BC_DIM_MAX = 3,USER_BC_SCALE_MAX = 4,USER_BC_STRING_MAX = 5,USER_COLL_WEIGHTS_MAX = 6,USER_EXPR_NEST_MAX = 7,USER_LINE_MAX = 8,USER_RE_DUP_MAX = 9,USER_POSIX2_VERSION = 10,USER_POSIX2_C_BIND = 11,USER_POSIX2_C_DEV = 12,USER_POSIX2_CHAR_TERM = 13,USER_POSIX2_FORT_DEV = 14,USER_POSIX2_FORT_RUN = 15,USER_POSIX2_LOCALEDEF = 16,USER_POSIX2_SW_DEV = 17,USER_POSIX2_UPE = 18,USER_STREAM_MAX = 19,USER_TZNAME_MAX = 20,USER_MAXID = 21,};
enum MACRO_USHRT : __int64 {USHRT_MAX = 65535,UINT_MAX = 4294967295,};
enum MACRO_USRQUOTA {USRQUOTA = 0,GRPQUOTA = 1,};
enum MACRO_USRSTACK {USRSTACK = 0xC0000000,};
enum MACRO_UT {UT_NAMESIZE = 8,UT_LINESIZE = 8,UT_HOSTSIZE = 16,};
enum MACRO_VA {VA_UTIMES_NULL = 0x1,VA_EXCLUSIVE = 0x2,};
enum MACRO_VALID {VALID_INT_BITS = 0x7FFFFFFF,VALID_UINT_BITS = 0xFFFFFFFF,};
enum MACRO_VA_NORM {VA_NORM = 0,VA_ANOM = 1,VA_SEQL = 2,VA_FLUSH = 3,};
enum MACRO_VDESC {VDESC_MAX_VPS = 16,VDESC_VP0_WILLRELE = 1,VDESC_VP1_WILLRELE = 2,VDESC_VP2_WILLRELE = 4,VDESC_VP3_WILLRELE = 8,VDESC_NOMAP_VPP = 256,VDESC_VPP_WILLRELE = 512,VDESC_NO_OFFSET = -1,};
enum MACRO_VDISCARD {VDISCARD = 15,VMIN = 16,};
enum MACRO_VDSUSP {VDSUSP = 11,};
enum MACRO_VEOF {VEOF = 0,VEOL = 1,VEOL2 = 2,};
enum MACRO_VERASE {VERASE = 3,VWERASE = 4,};
enum MACRO_VERSION {_POSIX_VERSION = 198808,_POSIX2_VERSION = 199212,};
enum MACRO_VERSION_LENGTH {VERSION_LENGTH = 80,};
enum MACRO_VEXEC {VEXEC = 0x40,};
enum MACRO_VFS {VFS_GENERIC = 0,VFS_NUMMNTOPS = 1,VFS_MAXTYPENUM = 1,VFS_CONF = 2,};
enum MACRO_VIFF {VIFF_TUNNEL = 0x1,VIFF_SRCRT = 0x2,};
enum MACRO_VIS {VIS_OCTAL = 0x1,VIS_CSTYLE = 0x2,VIS_SP = 0x4,VIS_TAB = 0x8,VIS_NL = 0x10,VIS_WHITE = 0x1C,VIS_SAFE = 0x20,VIS_NOSLASH = 0x40,};
enum MACRO_VKILL {VKILL = 5,};
enum MACRO_VLNEXT {VLNEXT = 14,};
enum MACRO_VM {VM_PAGE_QUERY_PAGE_PRESENT = 0x1,VM_PAGE_QUERY_PAGE_FICTITIOUS = 0x2,VM_PAGE_QUERY_PAGE_REF = 0x4,VM_PAGE_QUERY_PAGE_DIRTY = 0x8,VM_FLAGS_FIXED = 0x0,VM_FLAGS_ANYWHERE = 0x1,VM_FLAGS_ALIAS_MASK = 0xFF000000,VM_MEMORY_MALLOC = 0x1,VM_MEMORY_MALLOC_SMALL = 0x2,VM_MEMORY_MALLOC_LARGE = 0x3,VM_MEMORY_MALLOC_HUGE = 0x4,VM_MEMORY_SBRK = 0x5,VM_MEMORY_ANALYSIS_TOOL = 0xA,VM_MEMORY_MACH_MSG = 0x14,VM_MEMORY_IOKIT = 0x15,VM_MEMORY_STACK = 0x1E,VM_MEMORY_GUARD = 0x1F,VM_MEMORY_SHARED_PMAP = 0x20,VM_MEMORY_DYLIB = 0x21,VM_MEMORY_APPKIT = 0x28,VM_MEMORY_FOUNDATION = 0x29,VM_MEMORY_COREGRAPHICS = 0x2A,VM_MEMORY_CARBON = 0x2B,VM_MEMORY_JAVA = 0x2C,VM_MEMORY_ATS = 0x32,VM_MEMORY_DYLD = 0x3C,VM_MEMORY_DYLD_MALLOC = 0x3D,VM_MEMORY_APPLICATION_SPECIFIC_1 = 0xF0,VM_MEMORY_APPLICATION_SPECIFIC_16 = 0xFF,};
enum MACRO_VM_INHERIT {VM_INHERIT_SHARE = 0,VM_INHERIT_COPY = 1,VM_INHERIT_NONE = 2,VM_INHERIT_DONATE_COPY = 3,VM_INHERIT_DEFAULT = 1,VM_INHERIT_LAST_VALID = 2,VM_BEHAVIOR_DEFAULT = 0,VM_BEHAVIOR_RANDOM = 1,VM_BEHAVIOR_SEQUENTIAL = 2,VM_BEHAVIOR_RSEQNTL = 3,VM_BEHAVIOR_WILLNEED = 4,VM_BEHAVIOR_DONTNEED = 5,VM_PROT_NONE = 0,VM_PROT_READ = 1,VM_PROT_WRITE = 2,VM_PROT_EXECUTE = 4,VM_PROT_DEFAULT = 3,VM_PROT_ALL = 7,VM_PROT_NO_CHANGE = 8,VM_PROT_COPY = 16,VM_PROT_WANTS_COPY = 16,VM_SYNC_ASYNCHRONOUS = 1,VM_SYNC_SYNCHRONOUS = 2,VM_SYNC_INVALIDATE = 4,VM_SYNC_KILLPAGES = 8,VM_SYNC_DEACTIVATE = 16,VM_REGION_INFO_MAX = 1024,VM_REGION_BASIC_INFO = 10,VM_REGION_EXTENDED_INFO = 11,};
enum MACRO_VM_MAP {VM_MAP_NULL = 0,UPL_NULL = 0,VM_NAMED_ENTRY_NULL = 0,MEMORY_OBJECT_NULL = 0,MEMORY_OBJECT_CONTROL_NULL = 0,MEMORY_OBJECT_NAME_NULL = 0,MEMORY_OBJECT_DEFAULT_NULL = 0,};
enum MACRO_VM_METER {VM_METER = 1,VM_LOADAVG = 2,VM_MAXID = 3,VM_MACHFACTOR = 4,};
enum MACRO_VM_MIN : __int64 {VM_MIN_ADDRESS = 0,VM_MAX_ADDRESS = 4294963200,VM_MIN_KERNEL_ADDRESS = 4096,VM_MAX_KERNEL_ADDRESS = 1073741823,};
enum MACRO_VM_PROT {VM_PROT_COW = 0x8,VM_PROT_ZF = 0x10,};
enum MACRO_VM_REGION {VM_REGION_TOP_INFO = 12,VM_MAP_ENTRY_MAX = 256,};
enum MACRO_VNOCACHE {VNOCACHE_DATA = 0x2000,};
enum MACRO_VNOVAL {VNOVAL = -1,};
enum MACRO_VOL {VOL_CAPABILITIES_FORMAT = 0,VOL_CAPABILITIES_INTERFACES = 1,VOL_CAPABILITIES_RESERVED1 = 2,VOL_CAPABILITIES_RESERVED2 = 3,VOL_CAP_FMT_PERSISTENTOBJECTIDS = 1,VOL_CAP_FMT_SYMBOLICLINKS = 2,VOL_CAP_FMT_HARDLINKS = 4,VOL_CAP_INT_SEARCHFS = 1,VOL_CAP_INT_ATTRLIST = 2,VOL_CAP_INT_NFSEXPORT = 4,VOL_CAP_INT_READDIRATTR = 8,};
enum MACRO_VOLUME {VOLUME_UP = 260,VOLUME_DOWN = 261,};
enum MACRO_VPRINT {VPRINT = 0x40,VPLOT = 0x80,VPRINTPLOT = 0x100,};
enum MACRO_VQUIT {VQUIT = 9,};
enum MACRO_VREAD {VREAD = 0x100,};
enum MACRO_VREPRINT {VREPRINT = 6,VINTR = 8,};
enum MACRO_VROOT {VROOT = 0x1,VTEXT = 0x2,VSYSTEM = 0x4,VISTTY = 0x8,VWASMAPPED = 0x10,VTERMINATE = 0x20,VTERMWANT = 0x40,VMOUNT = 0x80,VXLOCK = 0x100,VXWANT = 0x200,VBWAIT = 0x400,VALIASED = 0x800,VORECLAIM = 0x1000,};
enum MACRO_VSGID {VSGID = 0x400,};
enum MACRO_VSTANDARD {VSTANDARD = 0x4000,VAGE = 0x8000,VRAOFF = 0x10000,VUINIT = 0x20000,VUWANT = 0x40000,VUINACTIVE = 0x80000,VHASDIRTY = 0x100000,VSWAP = 0x200000,VTHROTTLED = 0x400000,VNOFLUSH = 0x800000,};
enum MACRO_VSTART {VSTART = 12,};
enum MACRO_VSTATUS {VSTATUS = 18,};
enum MACRO_VSTOP {VSTOP = 13,};
enum MACRO_VSUID {VSUID = 0x800,};
enum MACRO_VSUSP {VSUSP = 10,};
enum MACRO_VSVTX {VSVTX = 0x200,};
enum MACRO_VTAB {VTAB = 5,};
enum MACRO_VTIME {VTIME = 17,};
enum MACRO_VTR {VTR_DISABLE = 0,VTR_ENABLE = 1,VTR_VALUE = 2,VTR_UALARM = 3,VTR_STAMP = 4,};
enum MACRO_VTRACE {VTRACE = 115,};
enum MACRO_VWRITE {VWRITE = 0x80,};
enum MACRO_WAIT {WAIT_ANY = -1,WAIT_MYPGRP = 0,};
enum MACRO_WAITTIME {MIN_WAITTIME = 2,MAX_WAITTIME = 5,};
enum MACRO_WALLPROC {WALLPROC_WALL = 2,};
enum MACRO_WALLPROG {WALLPROG = 100008,};
enum MACRO_WALLVERS {WALLVERS = 1,};
enum MACRO_WCOREFLAG {WCOREFLAG = 0x80,};
enum MACRO_WILL {WILL = 251,};
enum MACRO_WINDOW {TCPOPT_WINDOW = 3,TCPOLEN_WINDOW = 3,};
enum MACRO_WMESGLEN {WMESGLEN = 7,};
enum MACRO_WNOHANG {WNOHANG = 1,WUNTRACED = 2,};
enum MACRO_WONT {WONT = 252,};
enum MACRO_WR0 {WR0_REGMASK = 0xF,WR0_RESET_STAT = 0x10,WR0_ABORT = 0x18,WR0_NEXTRXIE = 0x20,WR0_RESETTXPEND = 0x28,WR0_RESET = 0x30,WR0_RESETIUS = 0x38,WR0_RESETRXCRC = 0x40,WR0_RESETTXCRC = 0x80,WR0_RESETEOM = 0xC0,};
enum MACRO_WR1 {WR1_EXTIE = 0x1,WR1_TXIE = 0x2,WR1_PARSPEC = 0x4,WR1_RXFIRSTIE = 0x8,WR1_RXALLIE = 0x10,WR1_SPECIE = 0x18,WR1_REQRX = 0x20,WR1_REQFUNC = 0x40,WR1_REQENABLE = 0x80,};
enum MACRO_WR10 {WR10_SYNC6 = 0x1,WR10_LOOP = 0x2,WR10_ABORTUNDER = 0x4,WR10_MARKIDLE = 0x8,WR10_POLLACT = 0x10,WR10_NRZ = 0x0,WR10_NRZI = 0x20,WR10_FM1 = 0x40,WR10_FM0 = 0x60,WR10_PRESET1 = 0x80,};
enum MACRO_WR11 {WR11_XTAL = 0x0,WR11_TXCLOCK = 0x1,WR11_BRGEN = 0x2,WR11_DPLL = 0x3,WR11_TRXCOUTEN = 0x4,WR11_TXCLKRTXC = 0x0,WR11_TXCLKTRXC = 0x8,WR11_TXCLKBRGEN = 0x10,WR11_TXCLKDPLL = 0x18,WR11_RXCLKRTXC = 0x0,WR11_RXCLKTRXC = 0x20,WR11_RXCLKBRGEN = 0x40,WR11_RXCLKDPLL = 0x60,WR11_RTXCXTAL = 0x80,};
enum MACRO_WR14 {WR14_BRENABLE = 0x1,WR14_BRPCLK = 0x2,WR14_DTRREQ = 0x4,WR14_AUTOECHO = 0x8,WR14_LOOPBACK = 0x10,WR14_SEARCH = 0x20,WR14_RESET = 0x40,WR14_DPLLDISABLE = 0x60,WR14_SRCBR = 0x80,WR14_SRCRTXC = 0xA0,WR14_FM = 0xC0,WR14_NRZI = 0xE0,};
enum MACRO_WR3 {WR3_RXENABLE = 0x1,WR3_SYNCINHIB = 0x2,WR3_ADDRSRCH = 0x4,WR3_RXCRCENABLE = 0x8,WR3_ENTERHUNT = 0x10,WR3_AUTOENABLES = 0x20,WR3_RX5 = 0x0,WR3_RX7 = 0x40,WR3_RX6 = 0x80,WR3_RX8 = 0xC0,};
enum MACRO_WR4 {WR4_PARENABLE = 0x1,WR4_PAREVEN = 0x2,WR4_STOP1 = 0x4,WR4_STOP15 = 0x8,WR4_STOP2 = 0xC,WR4_SYNC8 = 0x0,WR4_SYNC16 = 0x10,WR4_SDLC = 0x10,WR4_EXTSYNC = 0x30,WR4_X1CLOCK = 0x0,WR4_X16CLOCK = 0x40,WR4_X32CLOCK = 0x80,WR4_X64CLOCK = 0xC0,};
enum MACRO_WR5 {WR5_TXCRCENABLE = 0x1,WR5_RTS = 0x2,WR5_CRC16 = 0x4,WR5_TXENABLE = 0x8,WR5_BREAK = 0x10,WR5_TX5 = 0x0,WR5_TX7 = 0x20,WR5_TX6 = 0x40,WR5_TX8 = 0x60,WR5_DTR = 0x80,};
enum MACRO_WR9 {WR9_VIS = 0x1,WR9_NV = 0x2,WR9_DLC = 0x4,WR9_MIE = 0x8,WR9_STATHIGH = 0x10,WR9_RESETB = 0x40,WR9_RESETA = 0x80,WR9_RESETHARD = 0xC0,};
enum MACRO_WSTOPPED {WSTOPPED = 127,};
enum MACRO_XTABS {XTABS = 0xC00,CRDELAY = 0x3000,};
enum MACRO_YPBIND {YPBIND_ERR_ERR = 1,YPBIND_ERR_NOSERV = 2,YPBIND_ERR_RESC = 3,};
enum MACRO_YPBINDPROC {YPBINDPROC_NULL = 0,YPBINDPROC_DOMAIN = 1,YPBINDPROC_SETDOM = 2,};
enum MACRO_YPBINDPROG {YPBINDPROG = 100007,};
enum MACRO_YPBINDVERS {YPBINDVERS = 2,};
enum MACRO_YPERR {YPERR_BADARGS = 1,YPERR_RPC = 2,YPERR_DOMAIN = 3,YPERR_MAP = 4,YPERR_KEY = 5,YPERR_YPERR = 6,YPERR_RESRC = 7,YPERR_NOMORE = 8,YPERR_PMAP = 9,YPERR_YPBIND = 10,YPERR_YPSERV = 11,YPERR_NODOM = 12,YPERR_BADDB = 13,YPERR_VERS = 14,YPERR_ACCESS = 15,YPERR_BUSY = 16,};
enum MACRO_YPMAXDOMAIN {YPMAXDOMAIN = 64,};
enum MACRO_YPMAXMAP {YPMAXMAP = 64,};
enum MACRO_YPMAXPEER {YPMAXPEER = 64,};
enum MACRO_YPMAXRECORD {YPMAXRECORD = 1024,};
enum MACRO_YPOP {YPOP_CHANGE = 1,YPOP_INSERT = 2,YPOP_DELETE = 3,YPOP_STORE = 4,};
enum MACRO_YPPASSWDPROC {YPPASSWDPROC_UPDATE = 1,};
enum MACRO_YPPASSWDPROG {YPPASSWDPROG = 100009,};
enum MACRO_YPPASSWDVERS {YPPASSWDVERS = 1,};
enum MACRO_YPPROC {YPPROC_NULL = 0,YPPROC_DOMAIN = 1,YPPROC_DOMAIN_NONACK = 2,YPPROC_MATCH = 3,YPPROC_FIRST = 4,YPPROC_NEXT = 5,YPPROC_XFR = 6,YPPROC_CLEAR = 7,YPPROC_ALL = 8,YPPROC_MASTER = 9,YPPROC_ORDER = 10,YPPROC_MAPLIST = 11,};
enum MACRO_YPPROG {YPPROG = 100004,};
enum MACRO_YPPUSH {YPPUSH_XFRRESPPROG = 0x40000000,YPPUSH_XFRRESPVERS = 0x1,};
enum MACRO_YPPUSHPROC {YPPUSHPROC_NULL = 0,YPPUSHPROC_XFRRESP = 1,};
enum MACRO_YPVERS {YPVERS = 2,};
enum MACRO_ZIP {ZIP_QUERY = 1,ZIP_REPLY = 2,ZIP_TAKEDOWN = 3,ZIP_BRINGUP = 4,ZIP_GETNETINFO = 5,ZIP_NETINFO_REPLY = 6,ZIP_NOTIFY = 7,ZIP_EXTENDED_REPLY = 8,ZIP_GETMYZONE = 7,ZIP_GETZONELIST = 8,ZIP_GETLOCALZONES = 9,ZIP_HDR_SIZE = 2,ZIP_DATA_SIZE = 584,ZIP_MAX_ZONE_LENGTH = 32,ZIP_X_HDR_SIZE = 6,ZIP_ZONENAME_INVALID = 128,ZIP_USE_BROADCAST = 64,ZIP_ONE_ZONE = 32,ZIP_NETINFO_RETRIES = 3,ZIP_ONLINE = 1,ZIP_LATE_ROUTER = 2,ZIP_NO_ROUTER = 3,ZIP_RE_AARP = -1,};
enum MACRO_ZIPZONEINDEX {ZIPZONEINDEX = 1613,};
enum MACRO_ZIPZONENAME {ZIPZONENAME = 1614,};
enum MACRO_ZIPZONENETEND {ZIPZONENETEND = 1615,};
enum MACRO_ZIPZONENETSTART {ZIPZONENETSTART = 1616,};
enum MACRO_ZIPZONESTATE {ZIPZONESTATE = 1617,};
enum MACRO_ZMAGIC {ZMAGIC = 0x10B,};
enum MACRO_ZONE {ZONE_NAME_MAX_LEN = 80,};
enum MACRO_ZT {ZT_MAX = 1024,ZT_MIN = 32,ZT_DEFAULT = 512,};
enum MACRO_ZT_BYTES {ZT_BYTES = 128,ZT_MAXEDOUT = 1025,};
enum MACRO__A {_A = 0x100,_C = 0x200,_D = 0x400,_G = 0x800,_L = 0x1000,_P = 0x2000,_S = 0x4000,_U = 0x8000,_X = 0x10000,_B = 0x20000,_R = 0x40000,_I = 0x80000,_T = 0x100000,_Q = 0x200000,};
enum MACRO__BSD {_BSD_PPC_VMPARAM_H_ = 1,};
enum MACRO__CACHED {_CACHED_RUNES = 256,};
enum MACRO__CRMASK {_CRMASK = -256,};
enum MACRO__CS {_CS_PATH = 1,};
enum MACRO__CTYPE {_CTYPE_A = 256,_CTYPE_C = 512,_CTYPE_D = 1024,_CTYPE_G = 2048,_CTYPE_L = 4096,_CTYPE_P = 8192,_CTYPE_S = 16384,_CTYPE_U = 32768,_CTYPE_X = 65536,_CTYPE_B = 131072,_CTYPE_R = 262144,_CTYPE_I = 524288,_CTYPE_T = 1048576,_CTYPE_Q = 2097152,};
enum MACRO__IOFBF {_IOFBF = 0,_IOLBF = 1,_IONBF = 2,BUFSIZ = 1024,};
enum MACRO__JBLEN {_JBLEN = 192,};
enum MACRO__LC {_LC_LAST = 7,};
enum MACRO__LDAP {_LDAP_FEATURES_H = 1,};
enum MACRO__LDAP_SCHEMA {_LDAP_SCHEMA_H = 1,};
enum MACRO__MACH {_MACH_ERROR_ = 1,};
enum MACRO__MACH_INIT {_MACH_INIT_ = 1,};
enum MACRO__NET {_NET_IF_MIB_H = 1,};
enum MACRO__NEWINDEX {_NEWINDEX = -1,};
enum MACRO__NI {_NI_PING = 0,_NI_STATISTICS = 1,_NI_ROOT = 2,_NI_SELF = 3,_NI_PARENT = 4,_NI_CREATE = 5,_NI_DESTROY = 6,_NI_READ = 7,_NI_WRITE = 8,_NI_CHILDREN = 9,_NI_LOOKUP = 10,_NI_LIST = 11,_NI_CREATEPROP = 12,_NI_DESTROYPROP = 13,_NI_READPROP = 14,_NI_WRITEPROP = 15,_NI_RENAMEPROP = 16,_NI_LISTPROPS = 17,_NI_CREATENAME = 18,_NI_DESTROYNAME = 19,_NI_READNAME = 20,_NI_WRITENAME = 21,_NI_RPARENT = 22,_NI_LISTALL = 23,_NI_BIND = 24,_NI_READALL = 25,_NI_CRASHED = 26,_NI_RESYNC = 27,_NI_LOOKUPREAD = 28,};
enum MACRO__NOCHANGE {_NOCHANGE = -1,};
enum MACRO__PAM {_PAM_RETURN_VALUES = 32,};
enum MACRO__PASSWORD {_PASSWORD_EFMT1 = 95,_PASSWORD_LEN = 128,_PASSWORD_NOUID = 1,_PASSWORD_NOGID = 2,_PASSWORD_NOCHG = 4,_PASSWORD_NOEXP = 8,_PASSWORD_WARNDAYS = 14,_PASSWORD_CHGNOW = -1,};
enum MACRO__PC {_PC_LINK_MAX = 1,_PC_MAX_CANON = 2,_PC_MAX_INPUT = 3,_PC_NAME_MAX = 4,_PC_PATH_MAX = 5,_PC_PIPE_BUF = 6,_PC_CHOWN_RESTRICTED = 7,_PC_NO_TRUNC = 8,_PC_VDISABLE = 9,_PC_NAME_CHARS_MAX = 10,_PC_CASE_SENSITIVE = 11,_PC_CASE_PRESERVING = 12,};
enum MACRO__POSIX {_POSIX_MAX_CANON = 255,_POSIX_MAX_INPUT = 255,_POSIX_NAME_MAX = 14,_POSIX_NGROUPS_MAX = 0,_POSIX_OPEN_MAX = 16,_POSIX_PATH_MAX = 255,_POSIX_PIPE_BUF = 512,_POSIX_SSIZE_MAX = 32767,_POSIX_STREAM_MAX = 8,_POSIX_TZNAME_MAX = 3,};
enum MACRO__POSIX2 {_POSIX2_BC_BASE_MAX = 99,_POSIX2_BC_DIM_MAX = 2048,_POSIX2_BC_SCALE_MAX = 99,_POSIX2_BC_STRING_MAX = 1000,_POSIX2_COLL_WEIGHTS_MAX = 2,_POSIX2_EQUIV_CLASS_MAX = 2,_POSIX2_EXPR_NEST_MAX = 32,_POSIX2_LINE_MAX = 2048,_POSIX2_RE_DUP_MAX = 255,};
enum MACRO__POSIX_CHOWN {_POSIX_CHOWN_RESTRICTED = 1,_POSIX_NO_TRUNC = 1,_POSIX_VDISABLE = 255,_POSIX_THREAD_KEYS_MAX = 128,};
enum MACRO__PPC {_PPC_SIGNAL_ = 1,};
enum MACRO__PTHREAD {_PTHREAD_MUTEX_SIG_init = 0x32AAABA7,_PTHREAD_COND_SIG_init = 0x3CB0B1BB,_PTHREAD_ONCE_SIG_init = 0x30B1BCBA,};
enum MACRO__PW {_PW_KEYBYNAME = 49,_PW_KEYBYNUM = 50,_PW_KEYBYUID = 51,};
enum MACRO__QUAD {_QUAD_HIGHWORD = 0,_QUAD_LOWWORD = 1,};
enum MACRO__SC {_SC_ARG_MAX = 1,_SC_CHILD_MAX = 2,_SC_CLK_TCK = 3,_SC_NGROUPS_MAX = 4,_SC_OPEN_MAX = 5,_SC_JOB_CONTROL = 6,_SC_SAVED_IDS = 7,_SC_VERSION = 8,_SC_BC_BASE_MAX = 9,_SC_BC_DIM_MAX = 10,_SC_BC_SCALE_MAX = 11,_SC_BC_STRING_MAX = 12,_SC_COLL_WEIGHTS_MAX = 13,_SC_EXPR_NEST_MAX = 14,_SC_LINE_MAX = 15,_SC_RE_DUP_MAX = 16,_SC_2_VERSION = 17,_SC_2_C_BIND = 18,_SC_2_C_DEV = 19,_SC_2_CHAR_TERM = 20,_SC_2_FORT_DEV = 21,_SC_2_FORT_RUN = 22,_SC_2_LOCALEDEF = 23,_SC_2_SW_DEV = 24,_SC_2_UPE = 25,_SC_STREAM_MAX = 26,_SC_TZNAME_MAX = 27,};
enum MACRO__SS {_SS_MAXSIZE = 128,};
enum MACRO__SYS {_SYS_CONF_H_ = 1,};
enum MACRO__SYS_NAMELEN {_SYS_NAMELEN = 256,};
enum MACRO__USING {_USING_PROTOTYPES_ = 1,};
enum MACRO__WSTOPPED {_WSTOPPED = 0x7F,};
enum MACRO___BIND {__BIND = 19950621,};
enum MACRO___DTF {__DTF_READALL = 0x8,};
enum MACRO___INT {__INT_MAX__ = 2147483647,};
enum MACRO___IPV6 {__IPV6_ADDR_SCOPE_NODELOCAL = 0x1,__IPV6_ADDR_SCOPE_LINKLOCAL = 0x2,__IPV6_ADDR_SCOPE_SITELOCAL = 0x5,__IPV6_ADDR_SCOPE_ORGLOCAL = 0x8,__IPV6_ADDR_SCOPE_GLOBAL = 0xE,};
enum MACRO___LDPGSZ {__LDPGSZ = 4096,};
enum MACRO___LONG {__LONG_MAX__ = 2147483647,};
enum MACRO___LONG_LONG : __int64 {__LONG_LONG_MAX__ = 9223372036854775807,};
enum MACRO___PFKEY {__PFKEY_V2_H = 1,};
enum MACRO___PTHREAD {__PTHREAD_SIZE__ = 596,__PTHREAD_ATTR_SIZE__ = 36,__PTHREAD_MUTEXATTR_SIZE__ = 8,__PTHREAD_MUTEX_SIZE__ = 40,__PTHREAD_CONDATTR_SIZE__ = 4,__PTHREAD_COND_SIZE__ = 24,__PTHREAD_ONCE_SIZE__ = 4,__PTHREAD_RWLOCK_SIZE__ = 124,__PTHREAD_RWLOCKATTR_SIZE__ = 12,};
enum MACRO___R {__R_UNUSED = 2,};
enum MACRO___RES {__RES = 19950621,};
enum MACRO___SCHED {__SCHED_PARAM_SIZE__ = 4,};
enum MACRO___SHRT {__SHRT_MAX__ = 32767,};
enum MACRO___TYPE {__TYPE_LONGDOUBLE_IS_DOUBLE = 1,};
enum MACRO___bool {__bool_true_false_are_defined = 1,};
enum MACRO___dontcare {__dontcare__ = -1,};
enum MACRO_ack {ack = 0x6,};
enum MACRO_acs {acs_chars_index = 146,};
enum MACRO_attnBufSize {attnBufSize = 570,};
enum MACRO_bel {bel = 0x7,bs = 0x8,};
enum MACRO_bool {true = 1,false = 0,};
enum MACRO_bootstrap {bootstrap_MSG_COUNT = 11,};
enum MACRO_can {can = 0x18,};
enum MACRO_clock {clock_MSG_COUNT = 3,clock_priv_MSG_COUNT = 2,clock_reply_MSG_COUNT = 1,};
enum MACRO_controlErr {controlErr = -17,};
enum MACRO_cr {cr = 0xD,};
enum MACRO_dc1 {dc1 = 0x11,};
enum MACRO_dc2 {dc2 = 0x12,};
enum MACRO_dc3 {dc3 = 0x13,};
enum MACRO_dc4 {dc4 = 0x14,};
enum MACRO_del {del = 0x7F,};
enum MACRO_dspAttention {dspAttention = 244,};
enum MACRO_dspCLDeny {dspCLDeny = 248,};
enum MACRO_dspCLInit {dspCLInit = 251,};
enum MACRO_dspCLListen {dspCLListen = 249,};
enum MACRO_dspCLRemove {dspCLRemove = 250,};
enum MACRO_dspClose {dspClose = 252,};
enum MACRO_dspInit {dspInit = 255,};
enum MACRO_dspNewCID {dspNewCID = 241,};
enum MACRO_dspOpen {dspOpen = 253,};
enum MACRO_dspOptions {dspOptions = 243,};
enum MACRO_dspRead {dspRead = 246,};
enum MACRO_dspRemove {dspRemove = 254,};
enum MACRO_dspReset {dspReset = 242,};
enum MACRO_dspStatus {dspStatus = 247,};
enum MACRO_dspWrite {dspWrite = 245,};
enum MACRO_eAttention {eAttention = 0x20,};
enum MACRO_eFwdReset {eFwdReset = 0x10,};
enum MACRO_eTearDown {eTearDown = 0x40,};
enum MACRO_em {em = 0x19,};
enum MACRO_emask : __int64 {system_emask = 0xFC000000,sub_emask = 0x3FFC000,code_emask = 0x3FFF,};
enum MACRO_enq {enq = 0x5,};
enum MACRO_err : __int64 {err_kern = 0x0,err_us = 0x4000000,err_server = 0x8000000,err_ipc = 0xC000000,err_mach_ipc = 0x10000000,err_dipc = 0x1C000000,err_local = 0xF8000000,err_ipc_compat = 0xFC000000,err_max_system = 0x3F,};
enum MACRO_errAborted {errAborted = -1279,};
enum MACRO_errAttention {errAttention = -1276,};
enum MACRO_errDSPQueueSize {errDSPQueueSize = -1274,};
enum MACRO_errENOBUFS {errENOBUFS = -1281,};
enum MACRO_errFwdReset {errFwdReset = -1275,};
enum MACRO_errOpenDenied {errOpenDenied = -1273,};
enum MACRO_errOpening {errOpening = -1277,};
enum MACRO_errRefNum {errRefNum = -1280,};
enum MACRO_errState {errState = -1278,};
enum MACRO_esc {esc = 0x1B,};
enum MACRO_etb {etb = 0x17,};
enum MACRO_etx {etx = 0x3,eot = 0x4,};
enum MACRO_fs {fs = 0x1C,};
enum MACRO_gs {gs = 0x1D,};
enum MACRO_host {host_priv_MSG_COUNT = 25,};
enum MACRO_ht {ht = 0x9,};
enum MACRO_inv {inv = 256,};
enum MACRO_kOSMetaClassDuplicateClass : __int64 {kOSMetaClassDuplicateClass = 3691003914,};
enum MACRO_kOSMetaClassHasInstances : __int64 {kOSMetaClassHasInstances = 3691003906,};
enum MACRO_kOSMetaClassInstNoSuper : __int64 {kOSMetaClassInstNoSuper = 3691003913,};
enum MACRO_kOSMetaClassInternal : __int64 {kOSMetaClassInternal = 3691003905,};
enum MACRO_kOSMetaClassNoDicts : __int64 {kOSMetaClassNoDicts = 3691003909,};
enum MACRO_kOSMetaClassNoInit : __int64 {kOSMetaClassNoInit = 3691003907,};
enum MACRO_kOSMetaClassNoInsKModSet : __int64 {kOSMetaClassNoInsKModSet = 3691003911,};
enum MACRO_kOSMetaClassNoKModSet : __int64 {kOSMetaClassNoKModSet = 3691003910,};
enum MACRO_kOSMetaClassNoSuper : __int64 {kOSMetaClassNoSuper = 3691003912,};
enum MACRO_kOSMetaClassNoTempData : __int64 {kOSMetaClassNoTempData = 3691003908,};
enum MACRO_kOSReturnSuccess : __int64 {kOSReturnSuccess = 0,kOSReturnError = 3690987521,};
enum MACRO_mach {mach_host_MSG_COUNT = 17,};
enum MACRO_mach_port {mach_port_MSG_COUNT = 28,};
enum MACRO_minDSPQueueSize {minDSPQueueSize = 100,defaultDSPQS = 16384,};
enum MACRO_nak {nak = 0x15,};
enum MACRO_netname {netname_MSG_COUNT = 4,};
enum MACRO_nl {nl = 0xA,};
enum MACRO_np {np = 0xC,};
enum MACRO_nul {nul = 0x0,soh = 0x1,stx = 0x2,};
enum MACRO_ocAccept {ocAccept = 3,ocEstablish = 4,};
enum MACRO_ocRequest {ocRequest = 1,ocPassive = 2,};
enum MACRO_processor {processor_MSG_COUNT = 6,processor_set_MSG_COUNT = 10,};
enum MACRO_pseudo {pseudo_AF_XTP = 19,};
enum MACRO_pseudo_AF {pseudo_AF_RTIP = 22,};
enum MACRO_pseudo_AF_HDRCMPLT {pseudo_AF_HDRCMPLT = 35,};
enum MACRO_pseudo_AF_KEY {pseudo_AF_KEY = 29,};
enum MACRO_pseudo_AF_PIP {pseudo_AF_PIP = 25,};
enum MACRO_rs {rs = 0x1E,};
enum MACRO_sClosed {sClosed = 6,eClosed = 128,};
enum MACRO_sClosing {sClosing = 5,};
enum MACRO_sListening {sListening = 1,sPassive = 2,};
enum MACRO_sOpening {sOpening = 3,sOpen = 4,};
enum MACRO_si {si = 0xF,dle = 0x10,};
enum MACRO_sigcantmask {sigcantmask = 65792,};
enum MACRO_sub {sub = 0x1A,};
enum MACRO_sub_libkern {sub_libkern_common = 0,sub_libkern_metaclass = 16384,sub_libkern_reserved = 67092480,};
enum MACRO_syn {syn = 0x16,};
enum MACRO_sys : __int64 {sys_libkern = 0xDC000000,};
enum MACRO_us {us = 0x1F,};
enum MACRO_vt {vt = 0xB,};
enum MACRO_xEOF {xEOF = 236,};
struct MD5Context {u_int32_t state[4];u_int32_t count[2];unsigned __int8 buffer[64];};
typedef struct MD5Context MD5_CTX;
typedef struct tagMENU MENU;
typedef struct $AF39247D48CF164753A445931539035C MEVENT;
struct MPOOL {BKTHDR free;BKTHDR lru;BKTHDR hashtable[128];pgno_t curcache;pgno_t maxcache;pgno_t npages;u_long pagesize;int fd;void (__fastcall *pgin)(void *, pgno_t, void *);void (__fastcall *pgout)(void *, pgno_t, void *);void *pgcookie;};
typedef struct msg_dat MSG_DAT;
typedef void (__fastcall *Menu_Hook)(struct tagMENU *);
typedef int Menu_Options;
typedef unsigned int NCURSES_BOOL;
typedef struct $B8B9B85B971E3DBFC31707A9282CDA9E NDR_record_t;
struct NFDescriptor {struct NFDescriptor::$99826B68CDBD78E4CCAD8D4282968642 nf_next;struct NFDescriptor::$99826B68CDBD78E4CCAD8D4282968642 nf_list;unsigned int nf_handle;int nf_flags;int (__fastcall *nf_connect)();void (__fastcall *nf_disconnect)();int (__fastcall *nf_read)();int (__fastcall *nf_write)();int (__fastcall *nf_get)();int (__fastcall *nf_set)();struct sockif *nf_soif;struct sockutil *nf_soutil;u_long reserved[4];};
struct NFDescriptor::$99826B68CDBD78E4CCAD8D4282968642 {struct NFDescriptor *tqe_next;struct NFDescriptor **tqe_prev;};
typedef u_char NFSKERBKEYSCHED_T[2];
typedef u_char NFSKERBKEY_T[2];
typedef enum $FA613653AF18EE83F52363A02FF6739C NSSearchPathDirectory;
typedef enum $349CDD1D13F7DF0473388D33C8CD4390 NSSearchPathDomainMask;
typedef unsigned int NSSearchPathEnumerationState;
typedef gss_uint32 OM_uint32;
typedef kern_return_t OSReturn;
typedef SInt32 OSStatus;
typedef UInt32 OptionBits;
typedef struct panel PANEL;
typedef void *PTR;
typedef ProcPtr *ProcHandle;
typedef int (__fastcall *ProcPtr)();
typedef char *Ptr;
typedef struct $DCC84FF2B00B5674BC1D1501944EB860 RECNOINFO;
typedef SQLSMALLINT RETCODE;
typedef struct rt_entry RT_entry;
typedef signed __int8 SCHAR;
typedef struct screen SCREEN;
typedef double SDOUBLE;
typedef signed int SDWORD;
typedef float SFLOAT;
typedef signed int SInt;
typedef signed __int16 SInt16;
typedef signed int SInt32;
typedef signed __int64 SInt64;
typedef signed __int8 SInt8;
typedef signed int SLONG;
typedef signed __int64 SQLBIGINT;
typedef unsigned __int8 SQLCHAR;
typedef unsigned __int8 SQLDATE;
typedef unsigned __int8 SQLDECIMAL;
typedef double SQLDOUBLE;
typedef double SQLFLOAT;
typedef void *SQLHANDLE;
typedef SQLHANDLE SQLHDBC;
typedef SQLHANDLE SQLHDESC;
typedef SQLHANDLE SQLHENV;
typedef SQLHANDLE SQLHSTMT;
typedef SQLPOINTER SQLHWND;
typedef signed int SQLINTEGER;
typedef enum $AAF7D8B1D740C4801D49F07692D1E0A1 SQLINTERVAL;
typedef unsigned __int8 SQLNUMERIC;
typedef void *SQLPOINTER;
typedef float SQLREAL;
typedef SQLSMALLINT SQLRETURN;
typedef signed __int8 SQLSCHAR;
typedef signed __int16 SQLSMALLINT;
typedef unsigned __int8 SQLTIME;
typedef unsigned __int8 SQLTIMESTAMP;
typedef unsigned __int64 SQLUBIGINT;
typedef unsigned int SQLUINTEGER;
typedef unsigned __int16 SQLUSMALLINT;
typedef unsigned __int8 SQLVARCHAR;
typedef DATE_STRUCT SQL_DATE_STRUCT;
typedef struct tagSQL_DAY_SECOND SQL_DAY_SECOND_STRUCT;
typedef struct tagSQL_INTERVAL_STRUCT SQL_INTERVAL_STRUCT;
typedef struct tagSQL_NUMERIC_STRUCT SQL_NUMERIC_STRUCT;
typedef TIMESTAMP_STRUCT SQL_TIMESTAMP_STRUCT;
typedef TIME_STRUCT SQL_TIME_STRUCT;
typedef struct tagSQL_YEAR_MONTH SQL_YEAR_MONTH_STRUCT;
typedef signed __int16 SSHORT;
typedef struct $5EBD40E0B2B3559752DCF739FE11AE5D SVCXPRT;
typedef signed __int16 SWORD;
typedef struct seqorset Seqorset;
typedef struct sockbuf Sockbuf;
typedef struct sockbuf_io Sockbuf_IO;
typedef struct sockbuf_io_desc Sockbuf_IO_Desc;
typedef struct term TERMINAL;
typedef struct termtype TERMTYPE;
typedef struct $0C41D669CC7829CF12B135747142967F TEXT;
typedef struct tagTIMESTAMP_STRUCT TIMESTAMP_STRUCT;
typedef struct tagTIME_STRUCT TIME_STRUCT;
typedef TRCCB *TPCCB;
struct TRCCB {u_char *ccbLink;u_short refNum;u_short state;u_char userFlags;u_char localSocket;at_inet_t remoteAddress;u_short attnCode;u_short attnSize;u_char *attnPtr;u_char reserved[220];};
struct TRattnParams {u_short attnCode;u_short attnSize;u_char *attnData;u_char attnInterval;u_char dummy[3];};
struct TRcloseParams {u_char abort;};
struct TRinitParams {TPCCB ccbPtr;ProcPtr userRoutine;u_char *sendQueue;u_char *recvQueue;u_char *attnPtr;u_short sendQSize;u_short recvQSize;u_char localSocket;};
struct TRioParams {u_short reqCount;u_short actCount;u_char *dataPtr;u_char eom;u_char flush;u_char dummy[2];};
struct TRnewcidParams {u_short newcid;};
struct TRopenParams {u_short localCID;u_short remoteCID;at_inet_t remoteAddress;at_inet_t filterAddress;unsigned int sendSeq;u_long recvSeq;u_long attnSendSeq;u_long attnRecvSeq;u_short sendWindow;u_char ocMode;u_char ocInterval;u_char ocMaximum;};
struct TRoptionParams {u_short sendBlocking;u_char sendTimer;u_char rtmtTimer;u_char badSeqMax;u_char useCheckSum;u_short filler;int newPID;};
struct TRstatusParams {TPCCB ccbPtr;u_short sendQPending;u_short sendQFree;u_short recvQPending;u_short recvQFree;};
struct TclPlatStubs {int magic;struct TclPlatStubHooks *hooks;};
struct TclStubHooks {struct TclPlatStubs *tclPlatStubs;struct TclIntStubs *tclIntStubs;struct TclIntPlatStubs *tclIntPlatStubs;};
struct TclStubs {int magic;struct TclStubHooks *hooks;int (__fastcall *tcl_PkgProvideEx)(Tcl_Interp *interp, char *name, char *version, ClientData clientData);char *(__fastcall *tcl_PkgRequireEx)(Tcl_Interp *interp, char *name, char *version, int exact, ClientData *clientDataPtr);void (*tcl_Panic)(char *format, ...);char *(__fastcall *tcl_Alloc)(unsigned int size);void (__fastcall *tcl_Free)(char *ptr);char *(__fastcall *tcl_Realloc)(char *ptr, unsigned int size);char *(__fastcall *tcl_DbCkalloc)(unsigned int size, char *file, int line);int (__fastcall *tcl_DbCkfree)(char *ptr, char *file, int line);char *(__fastcall *tcl_DbCkrealloc)(char *ptr, unsigned int size, char *file, int line);void (__fastcall *tcl_CreateFileHandler)(int fd, int mask, Tcl_FileProc *proc, ClientData clientData);void (__fastcall *tcl_DeleteFileHandler)(int fd);void (__fastcall *tcl_SetTimer)(Tcl_Time *timePtr);void (__fastcall *tcl_Sleep)(int ms);int (__fastcall *tcl_WaitForEvent)(Tcl_Time *timePtr);int (__fastcall *tcl_AppendAllObjTypes)(Tcl_Interp *interp, Tcl_Obj *objPtr);void (*tcl_AppendStringsToObj)(Tcl_Obj *objPtr, ...);void (__fastcall *tcl_AppendToObj)(Tcl_Obj *objPtr, char *bytes, int length);Tcl_Obj *(__fastcall *tcl_ConcatObj)(int objc, Tcl_Obj *const objv[]);int (__fastcall *tcl_ConvertToType)(Tcl_Interp *interp, Tcl_Obj *objPtr, Tcl_ObjType *typePtr);void (__fastcall *tcl_DbDecrRefCount)(Tcl_Obj *objPtr, char *file, int line);void (__fastcall *tcl_DbIncrRefCount)(Tcl_Obj *objPtr, char *file, int line);int (__fastcall *tcl_DbIsShared)(Tcl_Obj *objPtr, char *file, int line);Tcl_Obj *(__fastcall *tcl_DbNewBooleanObj)(int boolValue, char *file, int line);Tcl_Obj *(__fastcall *tcl_DbNewByteArrayObj)(unsigned __int8 *bytes, int length, char *file, int line);Tcl_Obj *(__fastcall *tcl_DbNewDoubleObj)(double doubleValue, char *file, int line);Tcl_Obj *(__fastcall *tcl_DbNewListObj)(int objc, Tcl_Obj *const objv[], char *file, int line);Tcl_Obj *(__fastcall *tcl_DbNewLongObj)(int longValue, char *file, int line);Tcl_Obj *(__fastcall *tcl_DbNewObj)(char *file, int line);Tcl_Obj *(__fastcall *tcl_DbNewStringObj)(const char *bytes, int length, char *file, int line);Tcl_Obj *(__fastcall *tcl_DuplicateObj)(Tcl_Obj *objPtr);void (__fastcall *tclFreeObj)(Tcl_Obj *objPtr);int (__fastcall *tcl_GetBoolean)(Tcl_Interp *interp, char *str, int *boolPtr);int (__fastcall *tcl_GetBooleanFromObj)(Tcl_Interp *interp, Tcl_Obj *objPtr, int *boolPtr);unsigned __int8 *(__fastcall *tcl_GetByteArrayFromObj)(Tcl_Obj *objPtr, int *lengthPtr);int (__fastcall *tcl_GetDouble)(Tcl_Interp *interp, char *str, double *doublePtr);int (__fastcall *tcl_GetDoubleFromObj)(Tcl_Interp *interp, Tcl_Obj *objPtr, double *doublePtr);int (__fastcall *tcl_GetIndexFromObj)(Tcl_Interp *interp, Tcl_Obj *objPtr, char **tablePtr, char *msg, int flags, int *indexPtr);int (__fastcall *tcl_GetInt)(Tcl_Interp *interp, char *str, int *intPtr);int (__fastcall *tcl_GetIntFromObj)(Tcl_Interp *interp, Tcl_Obj *objPtr, int *intPtr);int (__fastcall *tcl_GetLongFromObj)(Tcl_Interp *interp, Tcl_Obj *objPtr, int *longPtr);Tcl_ObjType *(__fastcall *tcl_GetObjType)(char *typeName);char *(__fastcall *tcl_GetStringFromObj)(Tcl_Obj *objPtr, int *lengthPtr);void (__fastcall *tcl_InvalidateStringRep)(Tcl_Obj *objPtr);int (__fastcall *tcl_ListObjAppendList)(Tcl_Interp *interp, Tcl_Obj *listPtr, Tcl_Obj *elemListPtr);int (__fastcall *tcl_ListObjAppendElement)(Tcl_Interp *interp, Tcl_Obj *listPtr, Tcl_Obj *objPtr);int (__fastcall *tcl_ListObjGetElements)(Tcl_Interp *interp, Tcl_Obj *listPtr, int *objcPtr, Tcl_Obj ***objvPtr);int (__fastcall *tcl_ListObjIndex)(Tcl_Interp *interp, Tcl_Obj *listPtr, int index, Tcl_Obj **objPtrPtr);int (__fastcall *tcl_ListObjLength)(Tcl_Interp *interp, Tcl_Obj *listPtr, int *intPtr);int (__fastcall *tcl_ListObjReplace)(Tcl_Interp *interp, Tcl_Obj *listPtr, int first, int count, int objc, Tcl_Obj *const objv[]);Tcl_Obj *(__fastcall *tcl_NewBooleanObj)(int boolValue);Tcl_Obj *(__fastcall *tcl_NewByteArrayObj)(unsigned __int8 *bytes, int length);Tcl_Obj *(__fastcall *tcl_NewDoubleObj)(double doubleValue);Tcl_Obj *(__fastcall *tcl_NewIntObj)(int intValue);Tcl_Obj *(__fastcall *tcl_NewListObj)(int objc, Tcl_Obj *const objv[]);Tcl_Obj *(__fastcall *tcl_NewLongObj)(int longValue);Tcl_Obj *(*tcl_NewObj)(void);Tcl_Obj *(__fastcall *tcl_NewStringObj)(const char *bytes, int length);void (__fastcall *tcl_SetBooleanObj)(Tcl_Obj *objPtr, int boolValue);unsigned __int8 *(__fastcall *tcl_SetByteArrayLength)(Tcl_Obj *objPtr, int length);void (__fastcall *tcl_SetByteArrayObj)(Tcl_Obj *objPtr, unsigned __int8 *bytes, int length);void (__fastcall *tcl_SetDoubleObj)(Tcl_Obj *objPtr, double doubleValue);void (__fastcall *tcl_SetIntObj)(Tcl_Obj *objPtr, int intValue);void (__fastcall *tcl_SetListObj)(Tcl_Obj *objPtr, int objc, Tcl_Obj *const objv[]);void (__fastcall *tcl_SetLongObj)(Tcl_Obj *objPtr, int longValue);void (__fastcall *tcl_SetObjLength)(Tcl_Obj *objPtr, int length);void (__fastcall *tcl_SetStringObj)(Tcl_Obj *objPtr, char *bytes, int length);void (__fastcall *tcl_AddErrorInfo)(Tcl_Interp *interp, const char *message);void (__fastcall *tcl_AddObjErrorInfo)(Tcl_Interp *interp, const char *message, int length);void (__fastcall *tcl_AllowExceptions)(Tcl_Interp *interp);void (__fastcall *tcl_AppendElement)(Tcl_Interp *interp, const char *string);void (*tcl_AppendResult)(Tcl_Interp *interp, ...);Tcl_AsyncHandler (__fastcall *tcl_AsyncCreate)(Tcl_AsyncProc *proc, ClientData clientData);void (__fastcall *tcl_AsyncDelete)(Tcl_AsyncHandler async);int (__fastcall *tcl_AsyncInvoke)(Tcl_Interp *interp, int code);void (__fastcall *tcl_AsyncMark)(Tcl_AsyncHandler async);int (*tcl_AsyncReady)(void);void (__fastcall *tcl_BackgroundError)(Tcl_Interp *interp);char (__fastcall *tcl_Backslash)(const char *src, int *readPtr);int (__fastcall *tcl_BadChannelOption)(Tcl_Interp *interp, char *optionName, char *optionList);void (__fastcall *tcl_CallWhenDeleted)(Tcl_Interp *interp, Tcl_InterpDeleteProc *proc, ClientData clientData);void (__fastcall *tcl_CancelIdleCall)(Tcl_IdleProc *idleProc, ClientData clientData);int (__fastcall *tcl_Close)(Tcl_Interp *interp, Tcl_Channel chan);int (__fastcall *tcl_CommandComplete)(char *cmd);char *(__fastcall *tcl_Concat)(int argc, char **argv);int (__fastcall *tcl_ConvertElement)(const char *src, char *dst, int flags);int (__fastcall *tcl_ConvertCountedElement)(const char *src, int length, char *dst, int flags);int (__fastcall *tcl_CreateAlias)(Tcl_Interp *slave, char *slaveCmd, Tcl_Interp *target, char *targetCmd, int argc, char **argv);int (__fastcall *tcl_CreateAliasObj)(Tcl_Interp *slave, char *slaveCmd, Tcl_Interp *target, char *targetCmd, int objc, Tcl_Obj *const objv[]);Tcl_Channel (__fastcall *tcl_CreateChannel)(Tcl_ChannelType *typePtr, char *chanName, ClientData instanceData, int mask);void (__fastcall *tcl_CreateChannelHandler)(Tcl_Channel chan, int mask, Tcl_ChannelProc *proc, ClientData clientData);void (__fastcall *tcl_CreateCloseHandler)(Tcl_Channel chan, Tcl_CloseProc *proc, ClientData clientData);Tcl_Command (__fastcall *tcl_CreateCommand)(Tcl_Interp *interp, char *cmdName, Tcl_CmdProc *proc, ClientData clientData, Tcl_CmdDeleteProc *deleteProc);void (__fastcall *tcl_CreateEventSource)(Tcl_EventSetupProc *setupProc, Tcl_EventCheckProc *checkProc, ClientData clientData);void (__fastcall *tcl_CreateExitHandler)(Tcl_ExitProc *proc, ClientData clientData);Tcl_Interp *(*tcl_CreateInterp)(void);void (__fastcall *tcl_CreateMathFunc)(Tcl_Interp *interp, char *name, int numArgs, Tcl_ValueType *argTypes, Tcl_MathProc *proc, ClientData clientData);Tcl_Command (__fastcall *tcl_CreateObjCommand)(Tcl_Interp *interp, char *cmdName, Tcl_ObjCmdProc *proc, ClientData clientData, Tcl_CmdDeleteProc *deleteProc);Tcl_Interp *(__fastcall *tcl_CreateSlave)(Tcl_Interp *interp, char *slaveName, int isSafe);Tcl_TimerToken (__fastcall *tcl_CreateTimerHandler)(int milliseconds, Tcl_TimerProc *proc, ClientData clientData);Tcl_Trace (__fastcall *tcl_CreateTrace)(Tcl_Interp *interp, int level, Tcl_CmdTraceProc *proc, ClientData clientData);void (__fastcall *tcl_DeleteAssocData)(Tcl_Interp *interp, char *name);void (__fastcall *tcl_DeleteChannelHandler)(Tcl_Channel chan, Tcl_ChannelProc *proc, ClientData clientData);void (__fastcall *tcl_DeleteCloseHandler)(Tcl_Channel chan, Tcl_CloseProc *proc, ClientData clientData);int (__fastcall *tcl_DeleteCommand)(Tcl_Interp *interp, char *cmdName);int (__fastcall *tcl_DeleteCommandFromToken)(Tcl_Interp *interp, Tcl_Command command);void (__fastcall *tcl_DeleteEvents)(Tcl_EventDeleteProc *proc, ClientData clientData);void (__fastcall *tcl_DeleteEventSource)(Tcl_EventSetupProc *setupProc, Tcl_EventCheckProc *checkProc, ClientData clientData);void (__fastcall *tcl_DeleteExitHandler)(Tcl_ExitProc *proc, ClientData clientData);void (__fastcall *tcl_DeleteHashEntry)(Tcl_HashEntry *entryPtr);void (__fastcall *tcl_DeleteHashTable)(Tcl_HashTable *tablePtr);void (__fastcall *tcl_DeleteInterp)(Tcl_Interp *interp);void (__fastcall *tcl_DetachPids)(int numPids, Tcl_Pid *pidPtr);void (__fastcall *tcl_DeleteTimerHandler)(Tcl_TimerToken token);void (__fastcall *tcl_DeleteTrace)(Tcl_Interp *interp, Tcl_Trace trace);void (__fastcall *tcl_DontCallWhenDeleted)(Tcl_Interp *interp, Tcl_InterpDeleteProc *proc, ClientData clientData);int (__fastcall *tcl_DoOneEvent)(int flags);void (__fastcall *tcl_DoWhenIdle)(Tcl_IdleProc *proc, ClientData clientData);char *(__fastcall *tcl_DStringAppend)(Tcl_DString *dsPtr, const char *str, int length);char *(__fastcall *tcl_DStringAppendElement)(Tcl_DString *dsPtr, const char *string);void (__fastcall *tcl_DStringEndSublist)(Tcl_DString *dsPtr);void (__fastcall *tcl_DStringFree)(Tcl_DString *dsPtr);void (__fastcall *tcl_DStringGetResult)(Tcl_Interp *interp, Tcl_DString *dsPtr);void (__fastcall *tcl_DStringInit)(Tcl_DString *dsPtr);void (__fastcall *tcl_DStringResult)(Tcl_Interp *interp, Tcl_DString *dsPtr);void (__fastcall *tcl_DStringSetLength)(Tcl_DString *dsPtr, int length);void (__fastcall *tcl_DStringStartSublist)(Tcl_DString *dsPtr);int (__fastcall *tcl_Eof)(Tcl_Channel chan);char *(*tcl_ErrnoId)(void);char *(__fastcall *tcl_ErrnoMsg)(int err);int (__fastcall *tcl_Eval)(Tcl_Interp *interp, char *string);int (__fastcall *tcl_EvalFile)(Tcl_Interp *interp, char *fileName);int (__fastcall *tcl_EvalObj)(Tcl_Interp *interp, Tcl_Obj *objPtr);void (__fastcall *tcl_EventuallyFree)(ClientData clientData, Tcl_FreeProc *freeProc);void (__fastcall *tcl_Exit)(int status);int (__fastcall *tcl_ExposeCommand)(Tcl_Interp *interp, char *hiddenCmdToken, char *cmdName);int (__fastcall *tcl_ExprBoolean)(Tcl_Interp *interp, char *str, int *ptr);int (__fastcall *tcl_ExprBooleanObj)(Tcl_Interp *interp, Tcl_Obj *objPtr, int *ptr);int (__fastcall *tcl_ExprDouble)(Tcl_Interp *interp, char *str, double *ptr);int (__fastcall *tcl_ExprDoubleObj)(Tcl_Interp *interp, Tcl_Obj *objPtr, double *ptr);int (__fastcall *tcl_ExprLong)(Tcl_Interp *interp, char *str, int *ptr);int (__fastcall *tcl_ExprLongObj)(Tcl_Interp *interp, Tcl_Obj *objPtr, int *ptr);int (__fastcall *tcl_ExprObj)(Tcl_Interp *interp, Tcl_Obj *objPtr, Tcl_Obj **resultPtrPtr);int (__fastcall *tcl_ExprString)(Tcl_Interp *interp, char *string);void (*tcl_Finalize)(void);void (__fastcall *tcl_FindExecutable)(const char *argv0);Tcl_HashEntry *(__fastcall *tcl_FirstHashEntry)(Tcl_HashTable *tablePtr, Tcl_HashSearch *searchPtr);int (__fastcall *tcl_Flush)(Tcl_Channel chan);void (__fastcall *tcl_FreeResult)(Tcl_Interp *interp);int (__fastcall *tcl_GetAlias)(Tcl_Interp *interp, char *slaveCmd, Tcl_Interp **targetInterpPtr, char **targetCmdPtr, int *argcPtr, char ***argvPtr);int (__fastcall *tcl_GetAliasObj)(Tcl_Interp *interp, char *slaveCmd, Tcl_Interp **targetInterpPtr, char **targetCmdPtr, int *objcPtr, Tcl_Obj ***objv);ClientData (__fastcall *tcl_GetAssocData)(Tcl_Interp *interp, char *name, Tcl_InterpDeleteProc **procPtr);Tcl_Channel (__fastcall *tcl_GetChannel)(Tcl_Interp *interp, char *chanName, int *modePtr);int (__fastcall *tcl_GetChannelBufferSize)(Tcl_Channel chan);int (__fastcall *tcl_GetChannelHandle)(Tcl_Channel chan, int direction, ClientData *handlePtr);ClientData (__fastcall *tcl_GetChannelInstanceData)(Tcl_Channel chan);int (__fastcall *tcl_GetChannelMode)(Tcl_Channel chan);char *(__fastcall *tcl_GetChannelName)(Tcl_Channel chan);int (__fastcall *tcl_GetChannelOption)(Tcl_Interp *interp, Tcl_Channel chan, char *optionName, Tcl_DString *dsPtr);Tcl_ChannelType *(__fastcall *tcl_GetChannelType)(Tcl_Channel chan);int (__fastcall *tcl_GetCommandInfo)(Tcl_Interp *interp, char *cmdName, Tcl_CmdInfo *infoPtr);char *(__fastcall *tcl_GetCommandName)(Tcl_Interp *interp, Tcl_Command command);int (*tcl_GetErrno)(void);char *(*tcl_GetHostName)(void);int (__fastcall *tcl_GetInterpPath)(Tcl_Interp *askInterp, Tcl_Interp *slaveInterp);Tcl_Interp *(__fastcall *tcl_GetMaster)(Tcl_Interp *interp);const char *(*tcl_GetNameOfExecutable)(void);Tcl_Obj *(__fastcall *tcl_GetObjResult)(Tcl_Interp *interp);int (__fastcall *tcl_GetOpenFile)(Tcl_Interp *interp, char *str, int forWriting, int checkUsage, ClientData *filePtr);Tcl_PathType (__fastcall *tcl_GetPathType)(char *path);int (__fastcall *tcl_Gets)(Tcl_Channel chan, Tcl_DString *dsPtr);int (__fastcall *tcl_GetsObj)(Tcl_Channel chan, Tcl_Obj *objPtr);int (*tcl_GetServiceMode)(void);Tcl_Interp *(__fastcall *tcl_GetSlave)(Tcl_Interp *interp, char *slaveName);Tcl_Channel (__fastcall *tcl_GetStdChannel)(int type);char *(__fastcall *tcl_GetStringResult)(Tcl_Interp *interp);char *(__fastcall *tcl_GetVar)(Tcl_Interp *interp, char *varName, int flags);char *(__fastcall *tcl_GetVar2)(Tcl_Interp *interp, char *part1, char *part2, int flags);int (__fastcall *tcl_GlobalEval)(Tcl_Interp *interp, char *command);int (__fastcall *tcl_GlobalEvalObj)(Tcl_Interp *interp, Tcl_Obj *objPtr);int (__fastcall *tcl_HideCommand)(Tcl_Interp *interp, char *cmdName, char *hiddenCmdToken);int (__fastcall *tcl_Init)(Tcl_Interp *interp);void (__fastcall *tcl_InitHashTable)(Tcl_HashTable *tablePtr, int keyType);int (__fastcall *tcl_InputBlocked)(Tcl_Channel chan);int (__fastcall *tcl_InputBuffered)(Tcl_Channel chan);int (__fastcall *tcl_InterpDeleted)(Tcl_Interp *interp);int (__fastcall *tcl_IsSafe)(Tcl_Interp *interp);char *(__fastcall *tcl_JoinPath)(int argc, char **argv, Tcl_DString *resultPtr);int (__fastcall *tcl_LinkVar)(Tcl_Interp *interp, char *varName, char *addr, int type);void *reserved188;Tcl_Channel (__fastcall *tcl_MakeFileChannel)(ClientData handle, int mode);int (__fastcall *tcl_MakeSafe)(Tcl_Interp *interp);Tcl_Channel (__fastcall *tcl_MakeTcpClientChannel)(ClientData tcpSocket);char *(__fastcall *tcl_Merge)(int argc, char **argv);Tcl_HashEntry *(__fastcall *tcl_NextHashEntry)(Tcl_HashSearch *searchPtr);void (__fastcall *tcl_NotifyChannel)(Tcl_Channel channel, int mask);Tcl_Obj *(__fastcall *tcl_ObjGetVar2)(Tcl_Interp *interp, Tcl_Obj *part1Ptr, Tcl_Obj *part2Ptr, int flags);Tcl_Obj *(__fastcall *tcl_ObjSetVar2)(Tcl_Interp *interp, Tcl_Obj *part1Ptr, Tcl_Obj *part2Ptr, Tcl_Obj *newValuePtr, int flags);Tcl_Channel (__fastcall *tcl_OpenCommandChannel)(Tcl_Interp *interp, int argc, char **argv, int flags);Tcl_Channel (__fastcall *tcl_OpenFileChannel)(Tcl_Interp *interp, char *fileName, char *modeString, int permissions);Tcl_Channel (__fastcall *tcl_OpenTcpClient)(Tcl_Interp *interp, int port, char *address, char *myaddr, int myport, int async);Tcl_Channel (__fastcall *tcl_OpenTcpServer)(Tcl_Interp *interp, int port, char *host, Tcl_TcpAcceptProc *acceptProc, ClientData callbackData);void (__fastcall *tcl_Preserve)(ClientData data);void (__fastcall *tcl_PrintDouble)(Tcl_Interp *interp, double value, char *dst);int (__fastcall *tcl_PutEnv)(const char *string);char *(__fastcall *tcl_PosixError)(Tcl_Interp *interp);void (__fastcall *tcl_QueueEvent)(Tcl_Event *evPtr, Tcl_QueuePosition position);int (__fastcall *tcl_Read)(Tcl_Channel chan, char *bufPtr, int toRead);void (*tcl_ReapDetachedProcs)(void);int (__fastcall *tcl_RecordAndEval)(Tcl_Interp *interp, char *cmd, int flags);int (__fastcall *tcl_RecordAndEvalObj)(Tcl_Interp *interp, Tcl_Obj *cmdPtr, int flags);void (__fastcall *tcl_RegisterChannel)(Tcl_Interp *interp, Tcl_Channel chan);void (__fastcall *tcl_RegisterObjType)(Tcl_ObjType *typePtr);Tcl_RegExp (__fastcall *tcl_RegExpCompile)(Tcl_Interp *interp, char *string);int (__fastcall *tcl_RegExpExec)(Tcl_Interp *interp, Tcl_RegExp regexp, const char *str, const char *start);int (__fastcall *tcl_RegExpMatch)(Tcl_Interp *interp, char *str, char *pattern);void (__fastcall *tcl_RegExpRange)(Tcl_RegExp regexp, int index, char **startPtr, char **endPtr);void (__fastcall *tcl_Release)(ClientData clientData);void (__fastcall *tcl_ResetResult)(Tcl_Interp *interp);int (__fastcall *tcl_ScanElement)(const char *str, int *flagPtr);int (__fastcall *tcl_ScanCountedElement)(const char *str, int length, int *flagPtr);int (__fastcall *tcl_Seek)(Tcl_Channel chan, int offset, int mode);int (*tcl_ServiceAll)(void);int (__fastcall *tcl_ServiceEvent)(int flags);void (__fastcall *tcl_SetAssocData)(Tcl_Interp *interp, char *name, Tcl_InterpDeleteProc *proc, ClientData clientData);void (__fastcall *tcl_SetChannelBufferSize)(Tcl_Channel chan, int sz);int (__fastcall *tcl_SetChannelOption)(Tcl_Interp *interp, Tcl_Channel chan, char *optionName, char *newValue);int (__fastcall *tcl_SetCommandInfo)(Tcl_Interp *interp, char *cmdName, Tcl_CmdInfo *infoPtr);void (__fastcall *tcl_SetErrno)(int err);void (*tcl_SetErrorCode)(Tcl_Interp *interp, ...);void (__fastcall *tcl_SetMaxBlockTime)(Tcl_Time *timePtr);void (__fastcall *tcl_SetPanicProc)(Tcl_PanicProc *panicProc);int (__fastcall *tcl_SetRecursionLimit)(Tcl_Interp *interp, int depth);void (__fastcall *tcl_SetResult)(Tcl_Interp *interp, char *str, Tcl_FreeProc *freeProc);int (__fastcall *tcl_SetServiceMode)(int mode);void (__fastcall *tcl_SetObjErrorCode)(Tcl_Interp *interp, Tcl_Obj *errorObjPtr);void (__fastcall *tcl_SetObjResult)(Tcl_Interp *interp, Tcl_Obj *resultObjPtr);void (__fastcall *tcl_SetStdChannel)(Tcl_Channel channel, int type);char *(__fastcall *tcl_SetVar)(Tcl_Interp *interp, char *varName, char *newValue, int flags);char *(__fastcall *tcl_SetVar2)(Tcl_Interp *interp, char *part1, char *part2, char *newValue, int flags);char *(__fastcall *tcl_SignalId)(int sig);char *(__fastcall *tcl_SignalMsg)(int sig);void (__fastcall *tcl_SourceRCFile)(Tcl_Interp *interp);int (__fastcall *tcl_SplitList)(Tcl_Interp *interp, const char *listStr, int *argcPtr, char ***argvPtr);void (__fastcall *tcl_SplitPath)(const char *path, int *argcPtr, char ***argvPtr);void (__fastcall *tcl_StaticPackage)(Tcl_Interp *interp, char *pkgName, Tcl_PackageInitProc *initProc, Tcl_PackageInitProc *safeInitProc);int (__fastcall *tcl_StringMatch)(const char *str, const char *pattern);int (__fastcall *tcl_Tell)(Tcl_Channel chan);int (__fastcall *tcl_TraceVar)(Tcl_Interp *interp, char *varName, int flags, Tcl_VarTraceProc *proc, ClientData clientData);int (__fastcall *tcl_TraceVar2)(Tcl_Interp *interp, char *part1, char *part2, int flags, Tcl_VarTraceProc *proc, ClientData clientData);char *(__fastcall *tcl_TranslateFileName)(Tcl_Interp *interp, char *name, Tcl_DString *bufferPtr);int (__fastcall *tcl_Ungets)(Tcl_Channel chan, char *str, int len, int atHead);void (__fastcall *tcl_UnlinkVar)(Tcl_Interp *interp, char *varName);int (__fastcall *tcl_UnregisterChannel)(Tcl_Interp *interp, Tcl_Channel chan);int (__fastcall *tcl_UnsetVar)(Tcl_Interp *interp, char *varName, int flags);int (__fastcall *tcl_UnsetVar2)(Tcl_Interp *interp, char *part1, char *part2, int flags);void (__fastcall *tcl_UntraceVar)(Tcl_Interp *interp, char *varName, int flags, Tcl_VarTraceProc *proc, ClientData clientData);void (__fastcall *tcl_UntraceVar2)(Tcl_Interp *interp, char *part1, char *part2, int flags, Tcl_VarTraceProc *proc, ClientData clientData);void (__fastcall *tcl_UpdateLinkedVar)(Tcl_Interp *interp, char *varName);int (__fastcall *tcl_UpVar)(Tcl_Interp *interp, char *frameName, char *varName, char *localName, int flags);int (__fastcall *tcl_UpVar2)(Tcl_Interp *interp, char *frameName, char *part1, char *part2, char *localName, int flags);int (*tcl_VarEval)(Tcl_Interp *interp, ...);ClientData (__fastcall *tcl_VarTraceInfo)(Tcl_Interp *interp, char *varName, int flags, Tcl_VarTraceProc *procPtr, ClientData prevClientData);ClientData (__fastcall *tcl_VarTraceInfo2)(Tcl_Interp *interp, char *part1, char *part2, int flags, Tcl_VarTraceProc *procPtr, ClientData prevClientData);int (__fastcall *tcl_Write)(Tcl_Channel chan, char *s, int slen);void (__fastcall *tcl_WrongNumArgs)(Tcl_Interp *interp, int objc, Tcl_Obj *const objv[], char *message);int (__fastcall *tcl_DumpActiveMemory)(char *fileName);void (__fastcall *tcl_ValidateAllMemory)(char *file, int line);void (__fastcall *tcl_AppendResultVA)(Tcl_Interp *interp, va_list argList);void (__fastcall *tcl_AppendStringsToObjVA)(Tcl_Obj *objPtr, va_list argList);char *(__fastcall *tcl_HashStats)(Tcl_HashTable *tablePtr);char *(__fastcall *tcl_ParseVar)(Tcl_Interp *interp, char *str, char **termPtr);char *(__fastcall *tcl_PkgPresent)(Tcl_Interp *interp, char *name, char *version, int exact);char *(__fastcall *tcl_PkgPresentEx)(Tcl_Interp *interp, char *name, char *version, int exact, ClientData *clientDataPtr);int (__fastcall *tcl_PkgProvide)(Tcl_Interp *interp, char *name, char *version);char *(__fastcall *tcl_PkgRequire)(Tcl_Interp *interp, char *name, char *version, int exact);void (__fastcall *tcl_SetErrorCodeVA)(Tcl_Interp *interp, va_list argList);int (__fastcall *tcl_VarEvalVA)(Tcl_Interp *interp, va_list argList);Tcl_Pid (__fastcall *tcl_WaitPid)(Tcl_Pid pid, int *statPtr, int options);void (__fastcall *tcl_PanicVA)(char *format, va_list argList);void (__fastcall *tcl_GetVersion)(int *major, int *minor, int *patchLevel, int *type);void (__fastcall *tcl_InitMemory)(Tcl_Interp *interp);Tcl_Channel (__fastcall *tcl_StackChannel)(Tcl_Interp *interp, Tcl_ChannelType *typePtr, ClientData instanceData, int mask, Tcl_Channel prevChan);int (__fastcall *tcl_UnstackChannel)(Tcl_Interp *interp, Tcl_Channel chan);Tcl_Channel (__fastcall *tcl_GetStackedChannel)(Tcl_Channel chan);void (__fastcall *tcl_SetMainLoop)(Tcl_MainLoopProc *proc);void *reserved285;void (__fastcall *tcl_AppendObjToObj)(Tcl_Obj *objPtr, Tcl_Obj *appendObjPtr);Tcl_Encoding (__fastcall *tcl_CreateEncoding)(Tcl_EncodingType *typePtr);void (__fastcall *tcl_CreateThreadExitHandler)(Tcl_ExitProc *proc, ClientData clientData);void (__fastcall *tcl_DeleteThreadExitHandler)(Tcl_ExitProc *proc, ClientData clientData);void (__fastcall *tcl_DiscardResult)(Tcl_SavedResult *statePtr);int (__fastcall *tcl_EvalEx)(Tcl_Interp *interp, char *script, int numBytes, int flags);int (__fastcall *tcl_EvalObjv)(Tcl_Interp *interp, int objc, Tcl_Obj *const objv[], int flags);int (__fastcall *tcl_EvalObjEx)(Tcl_Interp *interp, Tcl_Obj *objPtr, int flags);void (__fastcall *tcl_ExitThread)(int status);int (__fastcall *tcl_ExternalToUtf)(Tcl_Interp *interp, Tcl_Encoding encoding, const char *src, int srcLen, int flags, Tcl_EncodingState *statePtr, char *dst, int dstLen, int *srcReadPtr, int *dstWrotePtr, int *dstCharsPtr);char *(__fastcall *tcl_ExternalToUtfDString)(Tcl_Encoding encoding, const char *src, int srcLen, Tcl_DString *dsPtr);void (*tcl_FinalizeThread)(void);void (__fastcall *tcl_FinalizeNotifier)(ClientData clientData);void (__fastcall *tcl_FreeEncoding)(Tcl_Encoding encoding);Tcl_ThreadId (*tcl_GetCurrentThread)(void);Tcl_Encoding (__fastcall *tcl_GetEncoding)(Tcl_Interp *interp, const char *name);char *(__fastcall *tcl_GetEncodingName)(Tcl_Encoding encoding);void (__fastcall *tcl_GetEncodingNames)(Tcl_Interp *interp);int (__fastcall *tcl_GetIndexFromObjStruct)(Tcl_Interp *interp, Tcl_Obj *objPtr, char **tablePtr, int offset, char *msg, int flags, int *indexPtr);void *(__fastcall *tcl_GetThreadData)(Tcl_ThreadDataKey *keyPtr, int size);Tcl_Obj *(__fastcall *tcl_GetVar2Ex)(Tcl_Interp *interp, char *part1, char *part2, int flags);ClientData (*tcl_InitNotifier)(void);void (__fastcall *tcl_MutexLock)(Tcl_Mutex *mutexPtr);void (__fastcall *tcl_MutexUnlock)(Tcl_Mutex *mutexPtr);void (__fastcall *tcl_ConditionNotify)(Tcl_Condition *condPtr);void (__fastcall *tcl_ConditionWait)(Tcl_Condition *condPtr, Tcl_Mutex *mutexPtr, Tcl_Time *timePtr);int (__fastcall *tcl_NumUtfChars)(const char *src, int len);int (__fastcall *tcl_ReadChars)(Tcl_Channel channel, Tcl_Obj *objPtr, int charsToRead, int appendFlag);void (__fastcall *tcl_RestoreResult)(Tcl_Interp *interp, Tcl_SavedResult *statePtr);void (__fastcall *tcl_SaveResult)(Tcl_Interp *interp, Tcl_SavedResult *statePtr);int (__fastcall *tcl_SetSystemEncoding)(Tcl_Interp *interp, const char *name);Tcl_Obj *(__fastcall *tcl_SetVar2Ex)(Tcl_Interp *interp, char *part1, char *part2, Tcl_Obj *newValuePtr, int flags);void (__fastcall *tcl_ThreadAlert)(Tcl_ThreadId threadId);void (__fastcall *tcl_ThreadQueueEvent)(Tcl_ThreadId threadId, Tcl_Event *evPtr, Tcl_QueuePosition position);Tcl_UniChar (__fastcall *tcl_UniCharAtIndex)(const char *src, int index);Tcl_UniChar (__fastcall *tcl_UniCharToLower)(int ch);Tcl_UniChar (__fastcall *tcl_UniCharToTitle)(int ch);Tcl_UniChar (__fastcall *tcl_UniCharToUpper)(int ch);int (__fastcall *tcl_UniCharToUtf)(int ch, char *buf);char *(__fastcall *tcl_UtfAtIndex)(const char *src, int index);int (__fastcall *tcl_UtfCharComplete)(const char *src, int len);int (__fastcall *tcl_UtfBackslash)(const char *src, int *readPtr, char *dst);char *(__fastcall *tcl_UtfFindFirst)(const char *src, int ch);char *(__fastcall *tcl_UtfFindLast)(const char *src, int ch);char *(__fastcall *tcl_UtfNext)(const char *src);char *(__fastcall *tcl_UtfPrev)(const char *src, const char *start);int (__fastcall *tcl_UtfToExternal)(Tcl_Interp *interp, Tcl_Encoding encoding, const char *src, int srcLen, int flags, Tcl_EncodingState *statePtr, char *dst, int dstLen, int *srcReadPtr, int *dstWrotePtr, int *dstCharsPtr);char *(__fastcall *tcl_UtfToExternalDString)(Tcl_Encoding encoding, const char *src, int srcLen, Tcl_DString *dsPtr);int (__fastcall *tcl_UtfToLower)(char *src);int (__fastcall *tcl_UtfToTitle)(char *src);int (__fastcall *tcl_UtfToUniChar)(const char *src, Tcl_UniChar *chPtr);int (__fastcall *tcl_UtfToUpper)(char *src);int (__fastcall *tcl_WriteChars)(Tcl_Channel chan, const char *src, int srcLen);int (__fastcall *tcl_WriteObj)(Tcl_Channel chan, Tcl_Obj *objPtr);char *(__fastcall *tcl_GetString)(Tcl_Obj *objPtr);char *(*tcl_GetDefaultEncodingDir)(void);void (__fastcall *tcl_SetDefaultEncodingDir)(char *path);void (__fastcall *tcl_AlertNotifier)(ClientData clientData);void (__fastcall *tcl_ServiceModeHook)(int mode);int (__fastcall *tcl_UniCharIsAlnum)(int ch);int (__fastcall *tcl_UniCharIsAlpha)(int ch);int (__fastcall *tcl_UniCharIsDigit)(int ch);int (__fastcall *tcl_UniCharIsLower)(int ch);int (__fastcall *tcl_UniCharIsSpace)(int ch);int (__fastcall *tcl_UniCharIsUpper)(int ch);int (__fastcall *tcl_UniCharIsWordChar)(int ch);int (__fastcall *tcl_UniCharLen)(Tcl_UniChar *str);int (__fastcall *tcl_UniCharNcmp)(const Tcl_UniChar *cs, const Tcl_UniChar *ct, unsigned int n);char *(__fastcall *tcl_UniCharToUtfDString)(const Tcl_UniChar *string, int numChars, Tcl_DString *dsPtr);Tcl_UniChar *(__fastcall *tcl_UtfToUniCharDString)(const char *string, int length, Tcl_DString *dsPtr);Tcl_RegExp (__fastcall *tcl_GetRegExpFromObj)(Tcl_Interp *interp, Tcl_Obj *patObj, int flags);Tcl_Obj *(__fastcall *tcl_EvalTokens)(Tcl_Interp *interp, Tcl_Token *tokenPtr, int count);void (__fastcall *tcl_FreeParse)(Tcl_Parse *parsePtr);void (__fastcall *tcl_LogCommandInfo)(Tcl_Interp *interp, char *script, char *command, int length);int (__fastcall *tcl_ParseBraces)(Tcl_Interp *interp, char *string, int numBytes, Tcl_Parse *parsePtr, int append, char **termPtr);int (__fastcall *tcl_ParseCommand)(Tcl_Interp *interp, char *string, int numBytes, int nested, Tcl_Parse *parsePtr);int (__fastcall *tcl_ParseExpr)(Tcl_Interp *interp, char *string, int numBytes, Tcl_Parse *parsePtr);int (__fastcall *tcl_ParseQuotedString)(Tcl_Interp *interp, char *string, int numBytes, Tcl_Parse *parsePtr, int append, char **termPtr);int (__fastcall *tcl_ParseVarName)(Tcl_Interp *interp, char *string, int numBytes, Tcl_Parse *parsePtr, int append);char *(__fastcall *tcl_GetCwd)(Tcl_Interp *interp, Tcl_DString *cwdPtr);int (__fastcall *tcl_Chdir)(const char *dirName);int (__fastcall *tcl_Access)(const char *path, int mode);int (__fastcall *tcl_Stat)(const char *path, struct stat *bufPtr);int (__fastcall *tcl_UtfNcmp)(const char *s1, const char *s2, unsigned int n);int (__fastcall *tcl_UtfNcasecmp)(const char *s1, const char *s2, unsigned int n);int (__fastcall *tcl_StringCaseMatch)(const char *str, const char *pattern, int nocase);int (__fastcall *tcl_UniCharIsControl)(int ch);int (__fastcall *tcl_UniCharIsGraph)(int ch);int (__fastcall *tcl_UniCharIsPrint)(int ch);int (__fastcall *tcl_UniCharIsPunct)(int ch);int (__fastcall *tcl_RegExpExecObj)(Tcl_Interp *interp, Tcl_RegExp regexp, Tcl_Obj *objPtr, int offset, int nmatches, int flags);void (__fastcall *tcl_RegExpGetInfo)(Tcl_RegExp regexp, Tcl_RegExpInfo *infoPtr);Tcl_Obj *(__fastcall *tcl_NewUnicodeObj)(Tcl_UniChar *unicode, int numChars);void (__fastcall *tcl_SetUnicodeObj)(Tcl_Obj *objPtr, Tcl_UniChar *unicode, int numChars);int (__fastcall *tcl_GetCharLength)(Tcl_Obj *objPtr);Tcl_UniChar (__fastcall *tcl_GetUniChar)(Tcl_Obj *objPtr, int index);Tcl_UniChar *(__fastcall *tcl_GetUnicode)(Tcl_Obj *objPtr);Tcl_Obj *(__fastcall *tcl_GetRange)(Tcl_Obj *objPtr, int first, int last);void (__fastcall *tcl_AppendUnicodeToObj)(Tcl_Obj *objPtr, Tcl_UniChar *unicode, int length);int (__fastcall *tcl_RegExpMatchObj)(Tcl_Interp *interp, Tcl_Obj *stringObj, Tcl_Obj *patternObj);void (__fastcall *tcl_SetNotifier)(Tcl_NotifierProcs *notifierProcPtr);Tcl_Mutex *(*tcl_GetAllocMutex)(void);int (__fastcall *tcl_GetChannelNames)(Tcl_Interp *interp);int (__fastcall *tcl_GetChannelNamesEx)(Tcl_Interp *interp, char *pattern);int (__fastcall *tcl_ProcObjCmd)(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *const objv[]);void (__fastcall *tcl_ConditionFinalize)(Tcl_Condition *condPtr);void (__fastcall *tcl_MutexFinalize)(Tcl_Mutex *mutex);int (__fastcall *tcl_CreateThread)(Tcl_ThreadId *idPtr, Tcl_ThreadCreateProc *proc, ClientData clientData, int stackSize, int flags);int (__fastcall *tcl_ReadRaw)(Tcl_Channel chan, char *dst, int bytesToRead);int (__fastcall *tcl_WriteRaw)(Tcl_Channel chan, char *src, int srcLen);Tcl_Channel (__fastcall *tcl_GetTopChannel)(Tcl_Channel chan);int (__fastcall *tcl_ChannelBuffered)(Tcl_Channel chan);char *(__fastcall *tcl_ChannelName)(Tcl_ChannelType *chanTypePtr);Tcl_ChannelTypeVersion (__fastcall *tcl_ChannelVersion)(Tcl_ChannelType *chanTypePtr);Tcl_DriverBlockModeProc *(__fastcall *tcl_ChannelBlockModeProc)(Tcl_ChannelType *chanTypePtr);Tcl_DriverCloseProc *(__fastcall *tcl_ChannelCloseProc)(Tcl_ChannelType *chanTypePtr);Tcl_DriverClose2Proc *(__fastcall *tcl_ChannelClose2Proc)(Tcl_ChannelType *chanTypePtr);Tcl_DriverInputProc *(__fastcall *tcl_ChannelInputProc)(Tcl_ChannelType *chanTypePtr);Tcl_DriverOutputProc *(__fastcall *tcl_ChannelOutputProc)(Tcl_ChannelType *chanTypePtr);Tcl_DriverSeekProc *(__fastcall *tcl_ChannelSeekProc)(Tcl_ChannelType *chanTypePtr);Tcl_DriverSetOptionProc *(__fastcall *tcl_ChannelSetOptionProc)(Tcl_ChannelType *chanTypePtr);Tcl_DriverGetOptionProc *(__fastcall *tcl_ChannelGetOptionProc)(Tcl_ChannelType *chanTypePtr);Tcl_DriverWatchProc *(__fastcall *tcl_ChannelWatchProc)(Tcl_ChannelType *chanTypePtr);Tcl_DriverGetHandleProc *(__fastcall *tcl_ChannelGetHandleProc)(Tcl_ChannelType *chanTypePtr);Tcl_DriverFlushProc *(__fastcall *tcl_ChannelFlushProc)(Tcl_ChannelType *chanTypePtr);Tcl_DriverHandlerProc *(__fastcall *tcl_ChannelHandlerProc)(Tcl_ChannelType *chanTypePtr);};
typedef int __fastcall Tcl_AppInitProc(Tcl_Interp *interp);
typedef struct Tcl_AsyncHandler_ *Tcl_AsyncHandler;
typedef int __fastcall Tcl_AsyncProc(ClientData clientData, Tcl_Interp *interp, int code);
struct Tcl_CallFrame {Tcl_Namespace *nsPtr;int dummy1;int dummy2;char *dummy3;char *dummy4;char *dummy5;int dummy6;char *dummy7;char *dummy8;int dummy9;char *dummy10;};
typedef struct Tcl_Channel_ *Tcl_Channel;
typedef void __fastcall Tcl_ChannelProc(ClientData clientData, int mask);
struct Tcl_ChannelType {char *typeName;Tcl_ChannelTypeVersion version;Tcl_DriverCloseProc *closeProc;Tcl_DriverInputProc *inputProc;Tcl_DriverOutputProc *outputProc;Tcl_DriverSeekProc *seekProc;Tcl_DriverSetOptionProc *setOptionProc;Tcl_DriverGetOptionProc *getOptionProc;Tcl_DriverWatchProc *watchProc;Tcl_DriverGetHandleProc *getHandleProc;Tcl_DriverClose2Proc *close2Proc;Tcl_DriverBlockModeProc *blockModeProc;Tcl_DriverFlushProc *flushProc;Tcl_DriverHandlerProc *handlerProc;};
typedef struct Tcl_ChannelTypeVersion_ *Tcl_ChannelTypeVersion;
typedef void __fastcall Tcl_CloseProc(ClientData data);
typedef void __fastcall Tcl_CmdDeleteProc(ClientData clientData);
struct Tcl_CmdInfo {int isNativeObjectProc;Tcl_ObjCmdProc *objProc;ClientData objClientData;Tcl_CmdProc *proc;ClientData clientData;Tcl_CmdDeleteProc *deleteProc;ClientData deleteData;Tcl_Namespace *namespacePtr;};
typedef int __fastcall Tcl_CmdProc(ClientData clientData, Tcl_Interp *interp, int argc, char *argv[]);
typedef void __fastcall Tcl_CmdTraceProc(ClientData clientData, Tcl_Interp *interp, int level, char *command, Tcl_CmdProc *proc, ClientData cmdClientData, int argc, char *argv[]);
typedef struct Tcl_Command_ *Tcl_Command;
typedef struct Tcl_Condition_ *Tcl_Condition;
typedef void __fastcall Tcl_CreateFileHandlerProc(int fd, int mask, Tcl_FileProc *proc, ClientData clientData);
struct Tcl_DString {char *string;int length;int spaceAvl;char staticSpace[200];};
typedef void __fastcall Tcl_DeleteFileHandlerProc(int fd);
typedef int __fastcall Tcl_DriverBlockModeProc(ClientData instanceData, int mode);
typedef int __fastcall Tcl_DriverClose2Proc(ClientData instanceData, Tcl_Interp *interp, int flags);
typedef int __fastcall Tcl_DriverCloseProc(ClientData instanceData, Tcl_Interp *interp);
typedef int __fastcall Tcl_DriverFlushProc(ClientData instanceData);
typedef int __fastcall Tcl_DriverGetHandleProc(ClientData instanceData, int direction, ClientData *handlePtr);
typedef int __fastcall Tcl_DriverGetOptionProc(ClientData instanceData, Tcl_Interp *interp, char *optionName, Tcl_DString *dsPtr);
typedef int __fastcall Tcl_DriverHandlerProc(ClientData instanceData, int interestMask);
typedef int __fastcall Tcl_DriverInputProc(ClientData instanceData, char *buf, int toRead, int *errorCodePtr);
typedef int __fastcall Tcl_DriverOutputProc(ClientData instanceData, char *buf, int toWrite, int *errorCodePtr);
typedef int __fastcall Tcl_DriverSeekProc(ClientData instanceData, int offset, int mode, int *errorCodePtr);
typedef int __fastcall Tcl_DriverSetOptionProc(ClientData instanceData, Tcl_Interp *interp, char *optionName, char *value);
typedef void __fastcall Tcl_DriverWatchProc(ClientData instanceData, int mask);
typedef void __fastcall Tcl_DupInternalRepProc(struct Tcl_Obj *srcPtr, struct Tcl_Obj *dupPtr);
typedef struct Tcl_Encoding_ *Tcl_Encoding;
typedef int __fastcall Tcl_EncodingConvertProc(ClientData clientData, const char *src, int srcLen, int flags, Tcl_EncodingState *statePtr, char *dst, int dstLen, int *srcReadPtr, int *dstWrotePtr, int *dstCharsPtr);
typedef void __fastcall Tcl_EncodingFreeProc(ClientData clientData);
typedef struct Tcl_EncodingState_ *Tcl_EncodingState;
struct Tcl_EncodingType {const char *encodingName;Tcl_EncodingConvertProc *toUtfProc;Tcl_EncodingConvertProc *fromUtfProc;Tcl_EncodingFreeProc *freeProc;ClientData clientData;int nullSize;};
enum Tcl_EolTranslation {TCL_TRANSLATE_AUTO = 0x0,TCL_TRANSLATE_CR = 0x1,TCL_TRANSLATE_LF = 0x2,TCL_TRANSLATE_CRLF = 0x3,};
struct Tcl_Event {Tcl_EventProc *proc;struct Tcl_Event *nextPtr;};
typedef void __fastcall Tcl_EventCheckProc(ClientData clientData, int flags);
typedef int __fastcall Tcl_EventDeleteProc(Tcl_Event *evPtr, ClientData clientData);
typedef int __fastcall Tcl_EventProc(Tcl_Event *evPtr, int flags);
typedef void __fastcall Tcl_EventSetupProc(ClientData clientData, int flags);
typedef void __fastcall Tcl_ExitProc(ClientData clientData);
typedef void __fastcall Tcl_FileFreeProc(ClientData clientData);
typedef void __fastcall Tcl_FileProc(ClientData clientData, int mask);
typedef void __fastcall Tcl_FreeInternalRepProc(struct Tcl_Obj *objPtr);
typedef void __fastcall Tcl_FreeProc(char *blockPtr);
struct Tcl_HashEntry {struct Tcl_HashEntry *nextPtr;struct Tcl_HashTable *tablePtr;struct Tcl_HashEntry **bucketPtr;ClientData clientData;union Tcl_HashEntry::$A1DAA63EE9F2E4530E7529E0A1E4E4E3 key;};
union Tcl_HashEntry::$A1DAA63EE9F2E4530E7529E0A1E4E4E3 {char *oneWordValue;int words[1];char string[4];};
struct Tcl_HashSearch {Tcl_HashTable *tablePtr;int nextIndex;Tcl_HashEntry *nextEntryPtr;};
struct Tcl_HashTable {Tcl_HashEntry **buckets;Tcl_HashEntry *staticBuckets[4];int numBuckets;int numEntries;int rebuildSize;int downShift;int mask;int keyType;Tcl_HashEntry *(__fastcall *findProc)(struct Tcl_HashTable *tablePtr, const char *key);Tcl_HashEntry *(__fastcall *createProc)(struct Tcl_HashTable *tablePtr, const char *key, int *newPtr);};
typedef void __fastcall Tcl_IdleProc(ClientData clientData);
struct Tcl_Interp {char *result;void (__fastcall *freeProc)(char *blockPtr);int errorLine;};
typedef void __fastcall Tcl_InterpDeleteProc(ClientData clientData, Tcl_Interp *interp);
typedef void Tcl_MainLoopProc(void);
typedef int __fastcall Tcl_MathProc(ClientData clientData, Tcl_Interp *interp, Tcl_Value *args, Tcl_Value *resultPtr);
typedef struct Tcl_Mutex_ *Tcl_Mutex;
struct Tcl_Namespace {char *name;char *fullName;ClientData clientData;Tcl_NamespaceDeleteProc *deleteProc;struct Tcl_Namespace *parentPtr;};
typedef void __fastcall Tcl_NamespaceDeleteProc(ClientData clientData);
struct Tcl_NotifierProcs {Tcl_SetTimerProc *setTimerProc;Tcl_WaitForEventProc *waitForEventProc;Tcl_CreateFileHandlerProc *createFileHandlerProc;Tcl_DeleteFileHandlerProc *deleteFileHandlerProc;};
struct Tcl_Obj {int refCount;char *bytes;int length;Tcl_ObjType *typePtr;union Tcl_Obj::$71EE9B08C07ADFB0D4935BA24C9EFE41 internalRep;};
union Tcl_Obj::$71EE9B08C07ADFB0D4935BA24C9EFE41 {int longValue;double doubleValue;void *otherValuePtr;struct Tcl_Obj::$71EE9B08C07ADFB0D4935BA24C9EFE41::$5F78906DFCD19F4F0601C4695135A9CD twoPtrValue;};
struct Tcl_Obj::$71EE9B08C07ADFB0D4935BA24C9EFE41::$5F78906DFCD19F4F0601C4695135A9CD {void *ptr1;void *ptr2;};
typedef int __fastcall Tcl_ObjCmdProc(ClientData clientData, Tcl_Interp *interp, int objc, struct Tcl_Obj *const *objv);
struct Tcl_ObjType {char *name;Tcl_FreeInternalRepProc *freeIntRepProc;Tcl_DupInternalRepProc *dupIntRepProc;Tcl_UpdateStringProc *updateStringProc;Tcl_SetFromAnyProc *setFromAnyProc;};
typedef int __fastcall Tcl_PackageInitProc(Tcl_Interp *interp);
typedef void Tcl_PanicProc(char *format, ...);
struct Tcl_Parse {char *commentStart;int commentSize;char *commandStart;int commandSize;int numWords;Tcl_Token *tokenPtr;int numTokens;int tokensAvailable;int errorType;char *string;char *end;Tcl_Interp *interp;char *term;int incomplete;Tcl_Token staticTokens[20];};
enum Tcl_PathType {TCL_PATH_ABSOLUTE = 0x0,TCL_PATH_RELATIVE = 0x1,TCL_PATH_VOLUME_RELATIVE = 0x2,};
typedef struct Tcl_Pid_ *Tcl_Pid;
typedef enum $7DE6A019FB8D510204474F438D93B845 Tcl_QueuePosition;
typedef struct Tcl_RegExp_ *Tcl_RegExp;
struct Tcl_RegExpIndices {int start;int end;};
struct Tcl_RegExpInfo {int nsubs;Tcl_RegExpIndices *matches;int extendStart;int reserved;};
struct Tcl_SavedResult {char *result;Tcl_FreeProc *freeProc;Tcl_Obj *objResultPtr;char *appendResult;int appendAvl;int appendUsed;char resultSpace[201];};
typedef int __fastcall Tcl_SetFromAnyProc(Tcl_Interp *interp, struct Tcl_Obj *objPtr);
typedef void __fastcall Tcl_SetTimerProc(Tcl_Time *timePtr);
typedef struct stat *Tcl_Stat_;
typedef void __fastcall Tcl_TcpAcceptProc(ClientData callbackData, Tcl_Channel chan, char *address, int port);
typedef void __fastcall Tcl_ThreadCreateProc(ClientData clientData);
typedef struct Tcl_ThreadDataKey_ *Tcl_ThreadDataKey;
typedef struct Tcl_ThreadId_ *Tcl_ThreadId;
struct Tcl_Time {int sec;int usec;};
typedef void __fastcall Tcl_TimerProc(ClientData clientData);
typedef struct Tcl_TimerToken_ *Tcl_TimerToken;
struct Tcl_Token {int type;char *start;int size;int numComponents;};
typedef struct Tcl_Trace_ *Tcl_Trace;
typedef unsigned __int16 Tcl_UniChar;
typedef void __fastcall Tcl_UpdateStringProc(struct Tcl_Obj *objPtr);
struct Tcl_Value {Tcl_ValueType type;int intValue;double doubleValue;};
typedef enum $75C8E7CA27BE1E0F4E6BF64D1993A788 Tcl_ValueType;
typedef struct Tcl_Var_ *Tcl_Var;
typedef char *__fastcall Tcl_VarTraceProc(ClientData clientData, Tcl_Interp *interp, char *part1, char *part2, int flags);
typedef int __fastcall Tcl_WaitForEventProc(Tcl_Time *timePtr);
typedef enum $D52DC52FEEE9FBA5CD86FC803E3DC8C2 TimeCond;
typedef unsigned __int8 UCHAR;
typedef unsigned int UDWORD;
typedef unsigned int UInt;
typedef unsigned __int16 UInt16;
typedef unsigned int UInt32;
typedef unsigned __int64 UInt64;
typedef unsigned __int8 UInt8;
typedef unsigned int ULONG;
typedef mach_port_t UNDServerRef;
typedef unsigned __int16 USHORT;
typedef unsigned __int16 UWORD;
struct UnsignedWide {UInt32 hi;UInt32 lo;};
typedef struct _win_st WINDOW;
typedef unsigned __int16 WORD;
typedef WORD WPARAM;
typedef struct $A7364FA697E163A2B23AEB9DAC3E45FB XDR;
typedef struct $0DD3D7DCB62C82D9C98652A42493883E ZT_entry;
typedef struct $8B726806335705383F6869494B8039C5 ZT_entryno;
typedef struct $648B167E5FE8430EFE8E72D1CD79C82D _PAGE;
typedef struct $3D973CA059C56EDCB53F204E75D22A4F _RuneEntry;
typedef struct $D03EAABF4B73BA203F60C8CE80978D99 _RuneLocale;
typedef struct $A28B60B4E296EA201CF19C8525D87881 _RuneRange;
union __ReplyUnion__bootstrap_subsystem {__Reply__bootstrap_create_server_t Reply_bootstrap_create_server;__Reply__bootstrap_unprivileged_t Reply_bootstrap_unprivileged;__Reply__bootstrap_check_in_t Reply_bootstrap_check_in;__Reply__bootstrap_register_t Reply_bootstrap_register;__Reply__bootstrap_look_up_t Reply_bootstrap_look_up;__Reply__bootstrap_look_up_array_t Reply_bootstrap_look_up_array;__Reply__bootstrap_parent_t Reply_bootstrap_parent;__Reply__bootstrap_status_t Reply_bootstrap_status;__Reply__bootstrap_info_t Reply_bootstrap_info;__Reply__bootstrap_subset_t Reply_bootstrap_subset;__Reply__bootstrap_create_service_t Reply_bootstrap_create_service;};
union __ReplyUnion__clock_priv_subsystem {__Reply__clock_set_time_t Reply_clock_set_time;__Reply__clock_set_attributes_t Reply_clock_set_attributes;};
union __ReplyUnion__clock_reply_subsystem {__Reply__clock_alarm_reply_t Reply_clock_alarm_reply;};
union __ReplyUnion__clock_subsystem {__Reply__clock_get_time_t Reply_clock_get_time;__Reply__clock_get_attributes_t Reply_clock_get_attributes;__Reply__clock_alarm_t Reply_clock_alarm;};
union __ReplyUnion__host_priv_subsystem {__Reply__host_get_boot_info_t Reply_host_get_boot_info;__Reply__host_reboot_t Reply_host_reboot;__Reply__host_priv_statistics_t Reply_host_priv_statistics;__Reply__host_default_memory_manager_t Reply_host_default_memory_manager;__Reply__vm_wire_t Reply_vm_wire;__Reply__thread_wire_t Reply_thread_wire;__Reply__vm_allocate_cpm_t Reply_vm_allocate_cpm;__Reply__host_processors_t Reply_host_processors;__Reply__host_get_clock_control_t Reply_host_get_clock_control;__Reply__kmod_create_t Reply_kmod_create;__Reply__kmod_destroy_t Reply_kmod_destroy;__Reply__kmod_control_t Reply_kmod_control;__Reply__host_get_special_port_t Reply_host_get_special_port;__Reply__host_set_special_port_t Reply_host_set_special_port;__Reply__host_set_exception_ports_t Reply_host_set_exception_ports;__Reply__host_get_exception_ports_t Reply_host_get_exception_ports;__Reply__host_swap_exception_ports_t Reply_host_swap_exception_ports;__Reply__host_load_symbol_table_t Reply_host_load_symbol_table;__Reply__task_swappable_t Reply_task_swappable;__Reply__host_processor_sets_t Reply_host_processor_sets;__Reply__host_processor_set_priv_t Reply_host_processor_set_priv;__Reply__set_dp_control_port_t Reply_set_dp_control_port;__Reply__get_dp_control_port_t Reply_get_dp_control_port;__Reply__host_set_UNDServer_t Reply_host_set_UNDServer;__Reply__host_get_UNDServer_t Reply_host_get_UNDServer;};
union __ReplyUnion__host_security_subsystem {__Reply__host_security_create_task_token_t Reply_host_security_create_task_token;__Reply__host_security_set_task_token_t Reply_host_security_set_task_token;};
union __ReplyUnion__ledger_subsystem {__Reply__ledger_create_t Reply_ledger_create;__Reply__ledger_terminate_t Reply_ledger_terminate;__Reply__ledger_transfer_t Reply_ledger_transfer;__Reply__ledger_read_t Reply_ledger_read;};
union __ReplyUnion__lock_set_subsystem {__Reply__lock_acquire_t Reply_lock_acquire;__Reply__lock_release_t Reply_lock_release;__Reply__lock_try_t Reply_lock_try;__Reply__lock_make_stable_t Reply_lock_make_stable;__Reply__lock_handoff_t Reply_lock_handoff;__Reply__lock_handoff_accept_t Reply_lock_handoff_accept;};
union __ReplyUnion__mach_host_subsystem {__Reply__host_info_t Reply_host_info;__Reply__host_kernel_version_t Reply_host_kernel_version;__Reply__host_page_size_t Reply_host_page_size;__Reply__mach_memory_object_memory_entry_t Reply_mach_memory_object_memory_entry;__Reply__host_processor_info_t Reply_host_processor_info;__Reply__host_get_io_master_t Reply_host_get_io_master;__Reply__host_get_clock_service_t Reply_host_get_clock_service;__Reply__kmod_get_info_t Reply_kmod_get_info;__Reply__host_zone_info_t Reply_host_zone_info;__Reply__host_virtual_physical_table_info_t Reply_host_virtual_physical_table_info;__Reply__host_ipc_hash_info_t Reply_host_ipc_hash_info;__Reply__enable_bluebox_t Reply_enable_bluebox;__Reply__disable_bluebox_t Reply_disable_bluebox;__Reply__processor_set_default_t Reply_processor_set_default;__Reply__processor_set_create_t Reply_processor_set_create;__Reply__mach_memory_object_memory_entry_64_t Reply_mach_memory_object_memory_entry_64;__Reply__host_statistics_t Reply_host_statistics;};
union __ReplyUnion__mach_port_subsystem {__Reply__mach_port_names_t Reply_mach_port_names;__Reply__mach_port_type_t Reply_mach_port_type;__Reply__mach_port_rename_t Reply_mach_port_rename;__Reply__mach_port_allocate_name_t Reply_mach_port_allocate_name;__Reply__mach_port_allocate_t Reply_mach_port_allocate;__Reply__mach_port_destroy_t Reply_mach_port_destroy;__Reply__mach_port_deallocate_t Reply_mach_port_deallocate;__Reply__mach_port_get_refs_t Reply_mach_port_get_refs;__Reply__mach_port_mod_refs_t Reply_mach_port_mod_refs;__Reply__mach_port_set_mscount_t Reply_mach_port_set_mscount;__Reply__mach_port_get_set_status_t Reply_mach_port_get_set_status;__Reply__mach_port_move_member_t Reply_mach_port_move_member;__Reply__mach_port_request_notification_t Reply_mach_port_request_notification;__Reply__mach_port_insert_right_t Reply_mach_port_insert_right;__Reply__mach_port_extract_right_t Reply_mach_port_extract_right;__Reply__mach_port_set_seqno_t Reply_mach_port_set_seqno;__Reply__mach_port_get_attributes_t Reply_mach_port_get_attributes;__Reply__mach_port_set_attributes_t Reply_mach_port_set_attributes;__Reply__mach_port_allocate_qos_t Reply_mach_port_allocate_qos;__Reply__mach_port_allocate_full_t Reply_mach_port_allocate_full;__Reply__task_set_port_space_t Reply_task_set_port_space;__Reply__mach_port_get_srights_t Reply_mach_port_get_srights;__Reply__mach_port_space_info_t Reply_mach_port_space_info;__Reply__mach_port_dnrequest_info_t Reply_mach_port_dnrequest_info;__Reply__mach_port_kernel_object_t Reply_mach_port_kernel_object;__Reply__mach_port_insert_member_t Reply_mach_port_insert_member;__Reply__mach_port_extract_member_t Reply_mach_port_extract_member;};
union __ReplyUnion__netname_subsystem {__Reply__netname_check_in_t Reply_netname_check_in;__Reply__netname_look_up_t Reply_netname_look_up;__Reply__netname_check_out_t Reply_netname_check_out;__Reply__netname_version_t Reply_netname_version;};
union __ReplyUnion__processor_set_subsystem {__Reply__processor_set_statistics_t Reply_processor_set_statistics;__Reply__processor_set_destroy_t Reply_processor_set_destroy;__Reply__processor_set_max_priority_t Reply_processor_set_max_priority;__Reply__processor_set_policy_enable_t Reply_processor_set_policy_enable;__Reply__processor_set_policy_disable_t Reply_processor_set_policy_disable;__Reply__processor_set_tasks_t Reply_processor_set_tasks;__Reply__processor_set_threads_t Reply_processor_set_threads;__Reply__processor_set_policy_control_t Reply_processor_set_policy_control;__Reply__processor_set_stack_usage_t Reply_processor_set_stack_usage;__Reply__processor_set_info_t Reply_processor_set_info;};
union __ReplyUnion__processor_subsystem {__Reply__processor_start_t Reply_processor_start;__Reply__processor_exit_t Reply_processor_exit;__Reply__processor_info_t Reply_processor_info;__Reply__processor_control_t Reply_processor_control;__Reply__processor_assign_t Reply_processor_assign;__Reply__processor_get_assignment_t Reply_processor_get_assignment;};
union __ReplyUnion__task_subsystem {__Reply__task_create_t Reply_task_create;__Reply__task_terminate_t Reply_task_terminate;__Reply__task_threads_t Reply_task_threads;__Reply__mach_ports_register_t Reply_mach_ports_register;__Reply__mach_ports_lookup_t Reply_mach_ports_lookup;__Reply__task_info_t Reply_task_info;__Reply__task_set_info_t Reply_task_set_info;__Reply__task_suspend_t Reply_task_suspend;__Reply__task_resume_t Reply_task_resume;__Reply__task_get_special_port_t Reply_task_get_special_port;__Reply__task_set_special_port_t Reply_task_set_special_port;__Reply__thread_create_t Reply_thread_create;__Reply__thread_create_running_t Reply_thread_create_running;__Reply__task_set_exception_ports_t Reply_task_set_exception_ports;__Reply__task_get_exception_ports_t Reply_task_get_exception_ports;__Reply__task_swap_exception_ports_t Reply_task_swap_exception_ports;__Reply__lock_set_create_t Reply_lock_set_create;__Reply__lock_set_destroy_t Reply_lock_set_destroy;__Reply__semaphore_create_t Reply_semaphore_create;__Reply__semaphore_destroy_t Reply_semaphore_destroy;__Reply__task_policy_set_t Reply_task_policy_set;__Reply__task_policy_get_t Reply_task_policy_get;__Reply__task_sample_t Reply_task_sample;__Reply__task_policy_t Reply_task_policy;__Reply__task_set_emulation_t Reply_task_set_emulation;__Reply__task_get_emulation_vector_t Reply_task_get_emulation_vector;__Reply__task_set_emulation_vector_t Reply_task_set_emulation_vector;__Reply__task_set_ras_pc_t Reply_task_set_ras_pc;__Reply__kernel_task_create_t Reply_kernel_task_create;__Reply__task_assign_t Reply_task_assign;__Reply__task_assign_default_t Reply_task_assign_default;__Reply__task_get_assignment_t Reply_task_get_assignment;__Reply__task_set_policy_t Reply_task_set_policy;};
union __ReplyUnion__thread_act_subsystem {__Reply__thread_terminate_t Reply_thread_terminate;__Reply__act_get_state_t Reply_act_get_state;__Reply__act_set_state_t Reply_act_set_state;__Reply__thread_get_state_t Reply_thread_get_state;__Reply__thread_set_state_t Reply_thread_set_state;__Reply__thread_suspend_t Reply_thread_suspend;__Reply__thread_resume_t Reply_thread_resume;__Reply__thread_abort_t Reply_thread_abort;__Reply__thread_abort_safely_t Reply_thread_abort_safely;__Reply__thread_depress_abort_t Reply_thread_depress_abort;__Reply__thread_get_special_port_t Reply_thread_get_special_port;__Reply__thread_set_special_port_t Reply_thread_set_special_port;__Reply__thread_info_t Reply_thread_info;__Reply__thread_set_exception_ports_t Reply_thread_set_exception_ports;__Reply__thread_get_exception_ports_t Reply_thread_get_exception_ports;__Reply__thread_swap_exception_ports_t Reply_thread_swap_exception_ports;__Reply__thread_policy_t Reply_thread_policy;__Reply__thread_policy_set_t Reply_thread_policy_set;__Reply__thread_policy_get_t Reply_thread_policy_get;__Reply__thread_sample_t Reply_thread_sample;__Reply__etap_trace_thread_t Reply_etap_trace_thread;__Reply__thread_assign_t Reply_thread_assign;__Reply__thread_assign_default_t Reply_thread_assign_default;__Reply__thread_get_assignment_t Reply_thread_get_assignment;__Reply__thread_set_policy_t Reply_thread_set_policy;};
union __ReplyUnion__vm_map_subsystem {__Reply__vm_region_t Reply_vm_region;__Reply__vm_allocate_t Reply_vm_allocate;__Reply__vm_deallocate_t Reply_vm_deallocate;__Reply__vm_protect_t Reply_vm_protect;__Reply__vm_inherit_t Reply_vm_inherit;__Reply__vm_read_t Reply_vm_read;__Reply__vm_read_list_t Reply_vm_read_list;__Reply__vm_write_t Reply_vm_write;__Reply__vm_copy_t Reply_vm_copy;__Reply__vm_read_overwrite_t Reply_vm_read_overwrite;__Reply__vm_msync_t Reply_vm_msync;__Reply__vm_behavior_set_t Reply_vm_behavior_set;__Reply__vm_map_t Reply_vm_map;__Reply__vm_machine_attribute_t Reply_vm_machine_attribute;__Reply__vm_remap_t Reply_vm_remap;__Reply__task_wire_t Reply_task_wire;__Reply__mach_make_memory_entry_t Reply_mach_make_memory_entry;__Reply__vm_map_page_query_t Reply_vm_map_page_query;__Reply__mach_vm_region_info_t Reply_mach_vm_region_info;__Reply__vm_mapped_pages_info_t Reply_vm_mapped_pages_info;__Reply__vm_region_object_create_t Reply_vm_region_object_create;__Reply__vm_region_recurse_t Reply_vm_region_recurse;__Reply__vm_region_recurse_64_t Reply_vm_region_recurse_64;__Reply__mach_vm_region_info_64_t Reply_mach_vm_region_info_64;__Reply__vm_region_64_t Reply_vm_region_64;__Reply__mach_make_memory_entry_64_t Reply_mach_make_memory_entry_64;__Reply__vm_map_64_t Reply_vm_map_64;__Reply__vm_map_get_upl_t Reply_vm_map_get_upl;__Reply__vm_upl_map_t Reply_vm_upl_map;__Reply__vm_upl_unmap_t Reply_vm_upl_unmap;};
typedef struct $F4F9A6DCA893D5DB6F32B9C415A8FCA2 __Reply__act_get_state_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__act_set_state_t;
typedef struct $E4570C51AE0EDA4FC0040353BC3B1814 __Reply__bootstrap_check_in_t;
typedef struct $330368C43B7BBA601535C7AEE5D8B687 __Reply__bootstrap_create_server_t;
typedef struct $E4570C51AE0EDA4FC0040353BC3B1814 __Reply__bootstrap_create_service_t;
typedef struct $B43F0C9282EE2B60E316DDBE9B7BAD24 __Reply__bootstrap_info_t;
typedef struct $EA40F68F7F1CDE3A91D37AA9C07723E8 __Reply__bootstrap_look_up_array_t;
typedef struct $E4570C51AE0EDA4FC0040353BC3B1814 __Reply__bootstrap_look_up_t;
typedef struct $8C0320D5CB4B54BF00A8178CA0C2A69D __Reply__bootstrap_parent_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__bootstrap_register_t;
typedef struct $F816343B0E4C3ED78F8AB466045FB12B __Reply__bootstrap_status_t;
typedef struct $8217C0F59845DB3ADC1F027C6FFDA160 __Reply__bootstrap_subset_t;
typedef struct $6631D032B9C3E589B1C8F245E7213CA2 __Reply__bootstrap_unprivileged_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__clock_alarm_reply_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__clock_alarm_t;
typedef struct $279A7D6BAE671E5D078D50BF79E5C443 __Reply__clock_get_attributes_t;
typedef struct $FCCAD8574E122F2EFADDBD13F6972B4E __Reply__clock_get_time_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__clock_set_attributes_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__clock_set_time_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__disable_bluebox_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__enable_bluebox_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__etap_trace_thread_t;
typedef struct $7568DFD570526C5C2FE600A63FF7542E __Reply__get_dp_control_port_t;
typedef struct $B9D89F8ED69AD657CF8CCF6FD4EA24D0 __Reply__host_default_memory_manager_t;
typedef struct $333F68BA2C53B7EE0F2D13B448D38F51 __Reply__host_get_UNDServer_t;
typedef struct $6FABFC1284DD1437D43532E08AE85D17 __Reply__host_get_boot_info_t;
typedef struct $48128538EAAA3D95320DEC45BE60FE04 __Reply__host_get_clock_control_t;
typedef struct $59AA03472FCFCA397F68DC3419B6E0CE __Reply__host_get_clock_service_t;
typedef struct $73352B6DCC801F1A038056696B3E491C __Reply__host_get_exception_ports_t;
typedef struct $1AD567D4B9681C99D01C1D9A823E24D4 __Reply__host_get_io_master_t;
typedef struct $3E6B1E6034954B23411B3542CA61CBC7 __Reply__host_get_special_port_t;
typedef struct $C7B1F467F4986167EC17EBF81A473987 __Reply__host_info_t;
typedef struct $14FA42BC96FAE132F19280844CA95DD9 __Reply__host_ipc_hash_info_t;
typedef struct $065AA4F4B3DDB89000C8C945CAC4CC2E __Reply__host_kernel_version_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__host_load_symbol_table_t;
typedef struct $C321B312F3F4C124C1E48D6C56909B8C __Reply__host_page_size_t;
typedef struct $C7B1F467F4986167EC17EBF81A473987 __Reply__host_priv_statistics_t;
typedef struct $BB05E7C1B464A2F039E23B91B2F73361 __Reply__host_processor_info_t;
typedef struct $49303478B7A3DE4A3AC5102047AEEEA3 __Reply__host_processor_set_priv_t;
typedef struct $B1FA16DA0CC571429FF694D2198EB26D __Reply__host_processor_sets_t;
typedef struct $2F587CB41441EFCE05777776D91D37F5 __Reply__host_processors_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__host_reboot_t;
typedef struct $DA3EF9D89B837FDE93915298E895B43B __Reply__host_security_create_task_token_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__host_security_set_task_token_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__host_set_UNDServer_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__host_set_exception_ports_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__host_set_special_port_t;
typedef struct $C7B1F467F4986167EC17EBF81A473987 __Reply__host_statistics_t;
typedef struct $FFDCF6D4903B3C43BBF48445F1564ABC __Reply__host_swap_exception_ports_t;
typedef struct $14FA42BC96FAE132F19280844CA95DD9 __Reply__host_virtual_physical_table_info_t;
typedef struct $B3220D9486325F8BA63885498B936915 __Reply__host_zone_info_t;
typedef struct $DA3EF9D89B837FDE93915298E895B43B __Reply__kernel_task_create_t;
typedef struct $207271BEEF35C1E72B41BFA669B8BAC6 __Reply__kmod_control_t;
typedef struct $C6E5E20E9CA57385FADCC3EC88B8E8F5 __Reply__kmod_create_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__kmod_destroy_t;
typedef struct $6B72EC479EB324C93363DBF0210A4E09 __Reply__kmod_get_info_t;
typedef struct $FB19EE544F0F316F1E6BF9A40B1BEA34 __Reply__ledger_create_t;
typedef struct $73C487D09BD8877E84E65868850A4480 __Reply__ledger_read_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__ledger_terminate_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__ledger_transfer_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__lock_acquire_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__lock_handoff_accept_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__lock_handoff_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__lock_make_stable_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__lock_release_t;
typedef struct $7CAB042C95D279B03371C67C49CFDDCE __Reply__lock_set_create_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__lock_set_destroy_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__lock_try_t;
typedef struct $EE99DDBDD6523B38A4B5202F2305E34F __Reply__mach_make_memory_entry_64_t;
typedef struct $2E4AEC4DAEDEFAF9740FCE81CFC978B6 __Reply__mach_make_memory_entry_t;
typedef struct $92C88324278AB154CB324C17F95F0A4E __Reply__mach_memory_object_memory_entry_64_t;
typedef struct $92C88324278AB154CB324C17F95F0A4E __Reply__mach_memory_object_memory_entry_t;
typedef struct $1783B4855960E25D5065E02F55E2E263 __Reply__mach_port_allocate_full_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__mach_port_allocate_name_t;
typedef struct $1783B4855960E25D5065E02F55E2E263 __Reply__mach_port_allocate_qos_t;
typedef struct $50450166C1D5B7E6B5FADC2BC93CD3BD __Reply__mach_port_allocate_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__mach_port_deallocate_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__mach_port_destroy_t;
typedef struct $5190E73C809912EC3322BCF288220A97 __Reply__mach_port_dnrequest_info_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__mach_port_extract_member_t;
typedef struct $EA7534D780195B9F22D1174E6CA3EFC2 __Reply__mach_port_extract_right_t;
typedef struct $46F98A3CF815908FB81E03FBB188BF3A __Reply__mach_port_get_attributes_t;
typedef struct $1A15CD9E076CE95EED0CB242AD23A728 __Reply__mach_port_get_refs_t;
typedef struct $54BD5584F5ADC0EEBB5CC3B97CC9ABCA __Reply__mach_port_get_set_status_t;
typedef struct $F1773A35038DB66F062B2D1DBF85E45A __Reply__mach_port_get_srights_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__mach_port_insert_member_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__mach_port_insert_right_t;
typedef struct $9CD2511C975EA3879926793D07843532 __Reply__mach_port_kernel_object_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__mach_port_mod_refs_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__mach_port_move_member_t;
typedef struct $7076454C220BCB0A4BC98C4D7957D8C3 __Reply__mach_port_names_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__mach_port_rename_t;
typedef struct $0046B6E3F76960040C1982B0037A2659 __Reply__mach_port_request_notification_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__mach_port_set_attributes_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__mach_port_set_mscount_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__mach_port_set_seqno_t;
typedef struct $8EB54569AD9E10C311A4CB0DD2CBE508 __Reply__mach_port_space_info_t;
typedef struct $479E1DE8ADCB55C92744EDE61D84AC3C __Reply__mach_port_type_t;
typedef struct $64173B50D5C298666AA1E07EB308B730 __Reply__mach_ports_lookup_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__mach_ports_register_t;
typedef struct $DAECF1BBBEC63DCCC1C5BA594BE2FE4F __Reply__mach_vm_region_info_64_t;
typedef struct $6C8E198051B85F433C7E9E257C72A042 __Reply__mach_vm_region_info_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__netname_check_in_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__netname_check_out_t;
typedef struct $D0C9668C16251A7C1942AA04B3C1BAAB __Reply__netname_look_up_t;
typedef struct $DB68657B2CF3361C93E3D336E930DDB3 __Reply__netname_version_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__processor_assign_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__processor_control_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__processor_exit_t;
typedef struct $488333C1932ECE7496D2930CA2056B6D __Reply__processor_get_assignment_t;
typedef struct $298BF45BC869BFBDF761AF6C0543DC18 __Reply__processor_info_t;
typedef struct $CC043B3A15E15755209E3A20F84F16AB __Reply__processor_set_create_t;
typedef struct $575BADC95B9991A2B9CD2F3725868B8D __Reply__processor_set_default_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__processor_set_destroy_t;
typedef struct $07330457B1A8E241B31DE41A5C59B575 __Reply__processor_set_info_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__processor_set_max_priority_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__processor_set_policy_control_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__processor_set_policy_disable_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__processor_set_policy_enable_t;
typedef struct $26F88E84C1701D89D21609BEA4C76CA2 __Reply__processor_set_stack_usage_t;
typedef struct $0E98A572E6852A6395110737D2ACDD5A __Reply__processor_set_statistics_t;
typedef struct $6C07615512B7E84BDE41117AEF6DE55F __Reply__processor_set_tasks_t;
typedef struct $776B37716F2A203FA8D593ECE8B979C2 __Reply__processor_set_threads_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__processor_start_t;
typedef struct $704B6F3E1CAEFA74D31888B2D78F9F88 __Reply__semaphore_create_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__semaphore_destroy_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__set_dp_control_port_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__task_assign_default_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__task_assign_t;
typedef struct $DA3EF9D89B837FDE93915298E895B43B __Reply__task_create_t;
typedef struct $488333C1932ECE7496D2930CA2056B6D __Reply__task_get_assignment_t;
typedef struct $FB4BFEF078574026C3C8614BADD24D68 __Reply__task_get_emulation_vector_t;
typedef struct $73352B6DCC801F1A038056696B3E491C __Reply__task_get_exception_ports_t;
typedef struct $E65ABC06A11602FED23D2457B8AEAC9D __Reply__task_get_special_port_t;
typedef struct $876EB2FF35BBAB0A90EC46359A04E1CD __Reply__task_info_t;
typedef struct $127ADBDA39FF0AF10F74B8734D022F36 __Reply__task_policy_get_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__task_policy_set_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__task_policy_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__task_resume_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__task_sample_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__task_set_emulation_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__task_set_emulation_vector_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__task_set_exception_ports_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__task_set_info_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__task_set_policy_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__task_set_port_space_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__task_set_ras_pc_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__task_set_special_port_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__task_suspend_t;
typedef struct $FFDCF6D4903B3C43BBF48445F1564ABC __Reply__task_swap_exception_ports_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__task_swappable_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__task_terminate_t;
typedef struct $D0AB9F48B0077248C9C221F011C15B93 __Reply__task_threads_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__task_wire_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__thread_abort_safely_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__thread_abort_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__thread_assign_default_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__thread_assign_t;
typedef struct $4B8804F6523751A831C00C572669AA3C __Reply__thread_create_running_t;
typedef struct $4B8804F6523751A831C00C572669AA3C __Reply__thread_create_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__thread_depress_abort_t;
typedef struct $488333C1932ECE7496D2930CA2056B6D __Reply__thread_get_assignment_t;
typedef struct $73352B6DCC801F1A038056696B3E491C __Reply__thread_get_exception_ports_t;
typedef struct $E65ABC06A11602FED23D2457B8AEAC9D __Reply__thread_get_special_port_t;
typedef struct $F4F9A6DCA893D5DB6F32B9C415A8FCA2 __Reply__thread_get_state_t;
typedef struct $BD234ABF5512865B2381E7712BF88565 __Reply__thread_info_t;
typedef struct $127ADBDA39FF0AF10F74B8734D022F36 __Reply__thread_policy_get_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__thread_policy_set_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__thread_policy_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__thread_resume_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__thread_sample_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__thread_set_exception_ports_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__thread_set_policy_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__thread_set_special_port_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__thread_set_state_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__thread_suspend_t;
typedef struct $73352B6DCC801F1A038056696B3E491C __Reply__thread_swap_exception_ports_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__thread_terminate_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__thread_wire_t;
typedef struct $F11203120C87D682B8E6D27123FE2347 __Reply__vm_allocate_cpm_t;
typedef struct $F11203120C87D682B8E6D27123FE2347 __Reply__vm_allocate_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__vm_behavior_set_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__vm_copy_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__vm_deallocate_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__vm_inherit_t;
typedef struct $B74BBF4C1467FECDB27E8CB1AA37D794 __Reply__vm_machine_attribute_t;
typedef struct $F11203120C87D682B8E6D27123FE2347 __Reply__vm_map_64_t;
typedef struct $C5B91AD60721E8419734AA2D1E4E80CD __Reply__vm_map_get_upl_t;
typedef struct $5DB7049864680961BDFB9965C0ABC030 __Reply__vm_map_page_query_t;
typedef struct $F11203120C87D682B8E6D27123FE2347 __Reply__vm_map_t;
typedef struct $B01B4E9250F885241409748218B2C105 __Reply__vm_mapped_pages_info_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__vm_msync_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__vm_protect_t;
typedef struct $7D6BE7882CE721D70B16F72EF4350FEA __Reply__vm_read_list_t;
typedef struct $A1F779EC0A67B47A0153BAA39A848A18 __Reply__vm_read_overwrite_t;
typedef struct $207271BEEF35C1E72B41BFA669B8BAC6 __Reply__vm_read_t;
typedef struct $A5EA39C0CE70DF2015B585156ECF8E0B __Reply__vm_region_64_t;
typedef struct $5E67D005E6550C4F6AE2B94EB017ABE7 __Reply__vm_region_object_create_t;
typedef struct $43EB887A7D5DDC6B5CCC173C2FB6636E __Reply__vm_region_recurse_64_t;
typedef struct $43EB887A7D5DDC6B5CCC173C2FB6636E __Reply__vm_region_recurse_t;
typedef struct $58431AFAB1A4B81D9017FB0AACB3F19D __Reply__vm_region_t;
typedef struct $8B6FDD4F28EF84224B001DC98A6CCF9E __Reply__vm_remap_t;
typedef struct $F11203120C87D682B8E6D27123FE2347 __Reply__vm_upl_map_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__vm_upl_unmap_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__vm_wire_t;
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F __Reply__vm_write_t;
union __RequestUnion__bootstrap_subsystem {__Request__bootstrap_create_server_t Request_bootstrap_create_server;__Request__bootstrap_unprivileged_t Request_bootstrap_unprivileged;__Request__bootstrap_check_in_t Request_bootstrap_check_in;__Request__bootstrap_register_t Request_bootstrap_register;__Request__bootstrap_look_up_t Request_bootstrap_look_up;__Request__bootstrap_look_up_array_t Request_bootstrap_look_up_array;__Request__bootstrap_parent_t Request_bootstrap_parent;__Request__bootstrap_status_t Request_bootstrap_status;__Request__bootstrap_info_t Request_bootstrap_info;__Request__bootstrap_subset_t Request_bootstrap_subset;__Request__bootstrap_create_service_t Request_bootstrap_create_service;};
union __RequestUnion__clock_priv_subsystem {__Request__clock_set_time_t Request_clock_set_time;__Request__clock_set_attributes_t Request_clock_set_attributes;};
union __RequestUnion__clock_reply_subsystem {__Request__clock_alarm_reply_t Request_clock_alarm_reply;};
union __RequestUnion__clock_subsystem {__Request__clock_get_time_t Request_clock_get_time;__Request__clock_get_attributes_t Request_clock_get_attributes;__Request__clock_alarm_t Request_clock_alarm;};
union __RequestUnion__host_priv_subsystem {__Request__host_get_boot_info_t Request_host_get_boot_info;__Request__host_reboot_t Request_host_reboot;__Request__host_priv_statistics_t Request_host_priv_statistics;__Request__host_default_memory_manager_t Request_host_default_memory_manager;__Request__vm_wire_t Request_vm_wire;__Request__thread_wire_t Request_thread_wire;__Request__vm_allocate_cpm_t Request_vm_allocate_cpm;__Request__host_processors_t Request_host_processors;__Request__host_get_clock_control_t Request_host_get_clock_control;__Request__kmod_create_t Request_kmod_create;__Request__kmod_destroy_t Request_kmod_destroy;__Request__kmod_control_t Request_kmod_control;__Request__host_get_special_port_t Request_host_get_special_port;__Request__host_set_special_port_t Request_host_set_special_port;__Request__host_set_exception_ports_t Request_host_set_exception_ports;__Request__host_get_exception_ports_t Request_host_get_exception_ports;__Request__host_swap_exception_ports_t Request_host_swap_exception_ports;__Request__host_load_symbol_table_t Request_host_load_symbol_table;__Request__task_swappable_t Request_task_swappable;__Request__host_processor_sets_t Request_host_processor_sets;__Request__host_processor_set_priv_t Request_host_processor_set_priv;__Request__set_dp_control_port_t Request_set_dp_control_port;__Request__get_dp_control_port_t Request_get_dp_control_port;__Request__host_set_UNDServer_t Request_host_set_UNDServer;__Request__host_get_UNDServer_t Request_host_get_UNDServer;};
union __RequestUnion__host_security_subsystem {__Request__host_security_create_task_token_t Request_host_security_create_task_token;__Request__host_security_set_task_token_t Request_host_security_set_task_token;};
union __RequestUnion__ledger_subsystem {__Request__ledger_create_t Request_ledger_create;__Request__ledger_terminate_t Request_ledger_terminate;__Request__ledger_transfer_t Request_ledger_transfer;__Request__ledger_read_t Request_ledger_read;};
union __RequestUnion__lock_set_subsystem {__Request__lock_acquire_t Request_lock_acquire;__Request__lock_release_t Request_lock_release;__Request__lock_try_t Request_lock_try;__Request__lock_make_stable_t Request_lock_make_stable;__Request__lock_handoff_t Request_lock_handoff;__Request__lock_handoff_accept_t Request_lock_handoff_accept;};
union __RequestUnion__mach_host_subsystem {__Request__host_info_t Request_host_info;__Request__host_kernel_version_t Request_host_kernel_version;__Request__host_page_size_t Request_host_page_size;__Request__mach_memory_object_memory_entry_t Request_mach_memory_object_memory_entry;__Request__host_processor_info_t Request_host_processor_info;__Request__host_get_io_master_t Request_host_get_io_master;__Request__host_get_clock_service_t Request_host_get_clock_service;__Request__kmod_get_info_t Request_kmod_get_info;__Request__host_zone_info_t Request_host_zone_info;__Request__host_virtual_physical_table_info_t Request_host_virtual_physical_table_info;__Request__host_ipc_hash_info_t Request_host_ipc_hash_info;__Request__enable_bluebox_t Request_enable_bluebox;__Request__disable_bluebox_t Request_disable_bluebox;__Request__processor_set_default_t Request_processor_set_default;__Request__processor_set_create_t Request_processor_set_create;__Request__mach_memory_object_memory_entry_64_t Request_mach_memory_object_memory_entry_64;__Request__host_statistics_t Request_host_statistics;};
union __RequestUnion__mach_port_subsystem {__Request__mach_port_names_t Request_mach_port_names;__Request__mach_port_type_t Request_mach_port_type;__Request__mach_port_rename_t Request_mach_port_rename;__Request__mach_port_allocate_name_t Request_mach_port_allocate_name;__Request__mach_port_allocate_t Request_mach_port_allocate;__Request__mach_port_destroy_t Request_mach_port_destroy;__Request__mach_port_deallocate_t Request_mach_port_deallocate;__Request__mach_port_get_refs_t Request_mach_port_get_refs;__Request__mach_port_mod_refs_t Request_mach_port_mod_refs;__Request__mach_port_set_mscount_t Request_mach_port_set_mscount;__Request__mach_port_get_set_status_t Request_mach_port_get_set_status;__Request__mach_port_move_member_t Request_mach_port_move_member;__Request__mach_port_request_notification_t Request_mach_port_request_notification;__Request__mach_port_insert_right_t Request_mach_port_insert_right;__Request__mach_port_extract_right_t Request_mach_port_extract_right;__Request__mach_port_set_seqno_t Request_mach_port_set_seqno;__Request__mach_port_get_attributes_t Request_mach_port_get_attributes;__Request__mach_port_set_attributes_t Request_mach_port_set_attributes;__Request__mach_port_allocate_qos_t Request_mach_port_allocate_qos;__Request__mach_port_allocate_full_t Request_mach_port_allocate_full;__Request__task_set_port_space_t Request_task_set_port_space;__Request__mach_port_get_srights_t Request_mach_port_get_srights;__Request__mach_port_space_info_t Request_mach_port_space_info;__Request__mach_port_dnrequest_info_t Request_mach_port_dnrequest_info;__Request__mach_port_kernel_object_t Request_mach_port_kernel_object;__Request__mach_port_insert_member_t Request_mach_port_insert_member;__Request__mach_port_extract_member_t Request_mach_port_extract_member;};
union __RequestUnion__netname_subsystem {__Request__netname_check_in_t Request_netname_check_in;__Request__netname_look_up_t Request_netname_look_up;__Request__netname_check_out_t Request_netname_check_out;__Request__netname_version_t Request_netname_version;};
union __RequestUnion__processor_set_subsystem {__Request__processor_set_statistics_t Request_processor_set_statistics;__Request__processor_set_destroy_t Request_processor_set_destroy;__Request__processor_set_max_priority_t Request_processor_set_max_priority;__Request__processor_set_policy_enable_t Request_processor_set_policy_enable;__Request__processor_set_policy_disable_t Request_processor_set_policy_disable;__Request__processor_set_tasks_t Request_processor_set_tasks;__Request__processor_set_threads_t Request_processor_set_threads;__Request__processor_set_policy_control_t Request_processor_set_policy_control;__Request__processor_set_stack_usage_t Request_processor_set_stack_usage;__Request__processor_set_info_t Request_processor_set_info;};
union __RequestUnion__processor_subsystem {__Request__processor_start_t Request_processor_start;__Request__processor_exit_t Request_processor_exit;__Request__processor_info_t Request_processor_info;__Request__processor_control_t Request_processor_control;__Request__processor_assign_t Request_processor_assign;__Request__processor_get_assignment_t Request_processor_get_assignment;};
union __RequestUnion__task_subsystem {__Request__task_create_t Request_task_create;__Request__task_terminate_t Request_task_terminate;__Request__task_threads_t Request_task_threads;__Request__mach_ports_register_t Request_mach_ports_register;__Request__mach_ports_lookup_t Request_mach_ports_lookup;__Request__task_info_t Request_task_info;__Request__task_set_info_t Request_task_set_info;__Request__task_suspend_t Request_task_suspend;__Request__task_resume_t Request_task_resume;__Request__task_get_special_port_t Request_task_get_special_port;__Request__task_set_special_port_t Request_task_set_special_port;__Request__thread_create_t Request_thread_create;__Request__thread_create_running_t Request_thread_create_running;__Request__task_set_exception_ports_t Request_task_set_exception_ports;__Request__task_get_exception_ports_t Request_task_get_exception_ports;__Request__task_swap_exception_ports_t Request_task_swap_exception_ports;__Request__lock_set_create_t Request_lock_set_create;__Request__lock_set_destroy_t Request_lock_set_destroy;__Request__semaphore_create_t Request_semaphore_create;__Request__semaphore_destroy_t Request_semaphore_destroy;__Request__task_policy_set_t Request_task_policy_set;__Request__task_policy_get_t Request_task_policy_get;__Request__task_sample_t Request_task_sample;__Request__task_policy_t Request_task_policy;__Request__task_set_emulation_t Request_task_set_emulation;__Request__task_get_emulation_vector_t Request_task_get_emulation_vector;__Request__task_set_emulation_vector_t Request_task_set_emulation_vector;__Request__task_set_ras_pc_t Request_task_set_ras_pc;__Request__kernel_task_create_t Request_kernel_task_create;__Request__task_assign_t Request_task_assign;__Request__task_assign_default_t Request_task_assign_default;__Request__task_get_assignment_t Request_task_get_assignment;__Request__task_set_policy_t Request_task_set_policy;};
union __RequestUnion__thread_act_subsystem {__Request__thread_terminate_t Request_thread_terminate;__Request__act_get_state_t Request_act_get_state;__Request__act_set_state_t Request_act_set_state;__Request__thread_get_state_t Request_thread_get_state;__Request__thread_set_state_t Request_thread_set_state;__Request__thread_suspend_t Request_thread_suspend;__Request__thread_resume_t Request_thread_resume;__Request__thread_abort_t Request_thread_abort;__Request__thread_abort_safely_t Request_thread_abort_safely;__Request__thread_depress_abort_t Request_thread_depress_abort;__Request__thread_get_special_port_t Request_thread_get_special_port;__Request__thread_set_special_port_t Request_thread_set_special_port;__Request__thread_info_t Request_thread_info;__Request__thread_set_exception_ports_t Request_thread_set_exception_ports;__Request__thread_get_exception_ports_t Request_thread_get_exception_ports;__Request__thread_swap_exception_ports_t Request_thread_swap_exception_ports;__Request__thread_policy_t Request_thread_policy;__Request__thread_policy_set_t Request_thread_policy_set;__Request__thread_policy_get_t Request_thread_policy_get;__Request__thread_sample_t Request_thread_sample;__Request__etap_trace_thread_t Request_etap_trace_thread;__Request__thread_assign_t Request_thread_assign;__Request__thread_assign_default_t Request_thread_assign_default;__Request__thread_get_assignment_t Request_thread_get_assignment;__Request__thread_set_policy_t Request_thread_set_policy;};
union __RequestUnion__vm_map_subsystem {__Request__vm_region_t Request_vm_region;__Request__vm_allocate_t Request_vm_allocate;__Request__vm_deallocate_t Request_vm_deallocate;__Request__vm_protect_t Request_vm_protect;__Request__vm_inherit_t Request_vm_inherit;__Request__vm_read_t Request_vm_read;__Request__vm_read_list_t Request_vm_read_list;__Request__vm_write_t Request_vm_write;__Request__vm_copy_t Request_vm_copy;__Request__vm_read_overwrite_t Request_vm_read_overwrite;__Request__vm_msync_t Request_vm_msync;__Request__vm_behavior_set_t Request_vm_behavior_set;__Request__vm_map_t Request_vm_map;__Request__vm_machine_attribute_t Request_vm_machine_attribute;__Request__vm_remap_t Request_vm_remap;__Request__task_wire_t Request_task_wire;__Request__mach_make_memory_entry_t Request_mach_make_memory_entry;__Request__vm_map_page_query_t Request_vm_map_page_query;__Request__mach_vm_region_info_t Request_mach_vm_region_info;__Request__vm_mapped_pages_info_t Request_vm_mapped_pages_info;__Request__vm_region_object_create_t Request_vm_region_object_create;__Request__vm_region_recurse_t Request_vm_region_recurse;__Request__vm_region_recurse_64_t Request_vm_region_recurse_64;__Request__mach_vm_region_info_64_t Request_mach_vm_region_info_64;__Request__vm_region_64_t Request_vm_region_64;__Request__mach_make_memory_entry_64_t Request_mach_make_memory_entry_64;__Request__vm_map_64_t Request_vm_map_64;__Request__vm_map_get_upl_t Request_vm_map_get_upl;__Request__vm_upl_map_t Request_vm_upl_map;__Request__vm_upl_unmap_t Request_vm_upl_unmap;};
typedef struct $940BEB7FDCEBF6BD2D78705CDCB7BC00 __Request__act_get_state_t;
typedef struct $2C24181259AD7238BB41D98E89920B4F __Request__act_set_state_t;
typedef struct $FC0A5D813D49EE50993C8B378A98E81C __Request__bootstrap_check_in_t;
typedef struct $4B7D8A760EDAC6704421EDD45E076DB3 __Request__bootstrap_create_server_t;
typedef struct $FC0A5D813D49EE50993C8B378A98E81C __Request__bootstrap_create_service_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__bootstrap_info_t;
typedef struct $0A92D0DE39FFD99BC34B7A699C729253 __Request__bootstrap_look_up_array_t;
typedef struct $FC0A5D813D49EE50993C8B378A98E81C __Request__bootstrap_look_up_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__bootstrap_parent_t;
typedef struct $50388B7496B1BDF2E598B32E2E370BC4 __Request__bootstrap_register_t;
typedef struct $FC0A5D813D49EE50993C8B378A98E81C __Request__bootstrap_status_t;
typedef struct $65559C85CAD78CCC00215D28D344072A __Request__bootstrap_subset_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__bootstrap_unprivileged_t;
typedef struct $4C821A4EFE1115B5FC2C4B7C575B022E __Request__clock_alarm_reply_t;
typedef struct $6AAD439E9A60B13F59A2B34A0B1B968C __Request__clock_alarm_t;
typedef struct $FEDEB051CE08D897834232829C0C3BAE __Request__clock_get_attributes_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__clock_get_time_t;
typedef struct $69D31FA9CDD4718FF5B7AF641C4535B7 __Request__clock_set_attributes_t;
typedef struct $2CB2463B5AF9A96AD792E2C849F46E7F __Request__clock_set_time_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__disable_bluebox_t;
typedef struct $ADC17CA903D0A10C18079E60B512CFB6 __Request__enable_bluebox_t;
typedef struct $F1B3AE218D4ECD7C43A384264AB43EE3 __Request__etap_trace_thread_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__get_dp_control_port_t;
typedef struct $F7035764D71E3AAEA9FB4FA9B6A17945 __Request__host_default_memory_manager_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__host_get_UNDServer_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__host_get_boot_info_t;
typedef struct $587EA17CD82C334AC5A48AFEDB918C96 __Request__host_get_clock_control_t;
typedef struct $587EA17CD82C334AC5A48AFEDB918C96 __Request__host_get_clock_service_t;
typedef struct $AFE166C1B1045E0C8B7F866BEC963EDA __Request__host_get_exception_ports_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__host_get_io_master_t;
typedef struct $DBA30DED97FFFF6D93797DB9E5CF4F43 __Request__host_get_special_port_t;
typedef struct $75304CCD3C967214A8BD283A9F6A93D0 __Request__host_info_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__host_ipc_hash_info_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__host_kernel_version_t;
typedef struct $8109324A5E6FC6C8E3497EBF9ED344C0 __Request__host_load_symbol_table_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__host_page_size_t;
typedef struct $75304CCD3C967214A8BD283A9F6A93D0 __Request__host_priv_statistics_t;
typedef struct $56709C31788A185985ED8F80CB75C10C __Request__host_processor_info_t;
typedef struct $4D17AC1D92846D89C56307C20B09863A __Request__host_processor_set_priv_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__host_processor_sets_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__host_processors_t;
typedef struct $669EF43B8E86E5E1B2D5831F1B9785B9 __Request__host_reboot_t;
typedef struct $CEEAFC48706D61F62A9F965D9CAA36A8 __Request__host_security_create_task_token_t;
typedef struct $8A33726821E9A847F60F5A915A19E5C8 __Request__host_security_set_task_token_t;
typedef struct $333F68BA2C53B7EE0F2D13B448D38F51 __Request__host_set_UNDServer_t;
typedef struct $71B18ED6CCE7F8693D0AE793EAB8102E __Request__host_set_exception_ports_t;
typedef struct $F1A44C946A11C4E88A7FB24B2ED8014B __Request__host_set_special_port_t;
typedef struct $75304CCD3C967214A8BD283A9F6A93D0 __Request__host_statistics_t;
typedef struct $71B18ED6CCE7F8693D0AE793EAB8102E __Request__host_swap_exception_ports_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__host_virtual_physical_table_info_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__host_zone_info_t;
typedef struct $FA4B479EA2794BE071CA0591E1973F43 __Request__kernel_task_create_t;
typedef struct $AF6F394DED458EEBDAD15880C92DFAA7 __Request__kmod_control_t;
typedef struct $AB89E1C42AC04654AD793083A62D1A9F __Request__kmod_create_t;
typedef struct $D48A1587B9C67DDCC12D42BCFEC74299 __Request__kmod_destroy_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__kmod_get_info_t;
typedef struct $CAE54129DDC456E19A5898FF69B86D62 __Request__ledger_create_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__ledger_read_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__ledger_terminate_t;
typedef struct $0CA50DA063E662D611776E2530D5C630 __Request__ledger_transfer_t;
typedef struct $5E04D424E81EA6874558831D2FFF2B4D __Request__lock_acquire_t;
typedef struct $5E04D424E81EA6874558831D2FFF2B4D __Request__lock_handoff_accept_t;
typedef struct $5E04D424E81EA6874558831D2FFF2B4D __Request__lock_handoff_t;
typedef struct $5E04D424E81EA6874558831D2FFF2B4D __Request__lock_make_stable_t;
typedef struct $5E04D424E81EA6874558831D2FFF2B4D __Request__lock_release_t;
typedef struct $5E073AC1240433595621B506EB1DA983 __Request__lock_set_create_t;
typedef struct $25B9151150FDB1BB89C80B2A8A85F680 __Request__lock_set_destroy_t;
typedef struct $5E04D424E81EA6874558831D2FFF2B4D __Request__lock_try_t;
typedef struct $B8642CD798FE16F406A454FEEE53FFC8 __Request__mach_make_memory_entry_64_t;
typedef struct $FE3C27134D9979D1E07496C70FEB2BBD __Request__mach_make_memory_entry_t;
typedef struct $8A833B3771E877D0F99F9E4D0939E663 __Request__mach_memory_object_memory_entry_64_t;
typedef struct $3D758159ED3B747496F87C93B1DFC5C3 __Request__mach_memory_object_memory_entry_t;
typedef struct $531BFEDFFBC90F9591113261F4F98EF9 __Request__mach_port_allocate_full_t;
typedef struct $F49B3D681D6431C8260F2C014755700B __Request__mach_port_allocate_name_t;
typedef struct $5243BF46A737224FC5E0495E8389B9A4 __Request__mach_port_allocate_qos_t;
typedef struct $9ADB6D801CB74636DD3BB8128AE6A17C __Request__mach_port_allocate_t;
typedef struct $19986235E824B34A0D641661B11CD27D __Request__mach_port_deallocate_t;
typedef struct $19986235E824B34A0D641661B11CD27D __Request__mach_port_destroy_t;
typedef struct $19986235E824B34A0D641661B11CD27D __Request__mach_port_dnrequest_info_t;
typedef struct $3199818696990377AE21FB32F85B31D8 __Request__mach_port_extract_member_t;
typedef struct $4203C03DDEA75B12CEED795269F3A503 __Request__mach_port_extract_right_t;
typedef struct $87460818A9C42CAAD7BB4BC88EB3F9D9 __Request__mach_port_get_attributes_t;
typedef struct $B346CF55E253733CEEA9A9F57C8BD312 __Request__mach_port_get_refs_t;
typedef struct $19986235E824B34A0D641661B11CD27D __Request__mach_port_get_set_status_t;
typedef struct $19986235E824B34A0D641661B11CD27D __Request__mach_port_get_srights_t;
typedef struct $3199818696990377AE21FB32F85B31D8 __Request__mach_port_insert_member_t;
typedef struct $E3188AF9666AE21995C94F310B376FC6 __Request__mach_port_insert_right_t;
typedef struct $19986235E824B34A0D641661B11CD27D __Request__mach_port_kernel_object_t;
typedef struct $77044CD3286DFFD089401BC1A550C0B3 __Request__mach_port_mod_refs_t;
typedef struct $2A4BA455395BF41F2F254FCA2AA74280 __Request__mach_port_move_member_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__mach_port_names_t;
typedef struct $4BA0F1DBE33A7FC0F8851313161BDC9C __Request__mach_port_rename_t;
typedef struct $89FB7E727BDCF83A4F62DE682B7A306A __Request__mach_port_request_notification_t;
typedef struct $D09842556D06A2DF198ED28371C9FC24 __Request__mach_port_set_attributes_t;
typedef struct $B84095E180EBE617859A8545EC2805FC __Request__mach_port_set_mscount_t;
typedef struct $2D63240515AC7C828AB4C7B058DC34F3 __Request__mach_port_set_seqno_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__mach_port_space_info_t;
typedef struct $19986235E824B34A0D641661B11CD27D __Request__mach_port_type_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__mach_ports_lookup_t;
typedef struct $64173B50D5C298666AA1E07EB308B730 __Request__mach_ports_register_t;
typedef struct $23464681D0D095F096FB79A1E66062AF __Request__mach_vm_region_info_64_t;
typedef struct $23464681D0D095F096FB79A1E66062AF __Request__mach_vm_region_info_t;
typedef struct $9BD15C2DE3B549B6E5D91AD4D5FB2472 __Request__netname_check_in_t;
typedef struct $01CA16396E8E0606C9A9E0F0E20FCF07 __Request__netname_check_out_t;
typedef struct $9AB293AD14E7E28F8D88B77C9D755114 __Request__netname_look_up_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__netname_version_t;
typedef struct $FFE74F33A8D4184B0115806877430EDD __Request__processor_assign_t;
typedef struct $268E73D492E0AA9543C2DAE749E4E286 __Request__processor_control_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__processor_exit_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__processor_get_assignment_t;
typedef struct $99892F497716B18479AFC6F93A6376AD __Request__processor_info_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__processor_set_create_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__processor_set_default_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__processor_set_destroy_t;
typedef struct $5567FEF96CECDEB28576E12650BB4F71 __Request__processor_set_info_t;
typedef struct $47B1E0FCCF87277E593C854FB80D0521 __Request__processor_set_max_priority_t;
typedef struct $D9B0ADBD00F5F5522FB9AC300CCD391E __Request__processor_set_policy_control_t;
typedef struct $B6133C04D7E68696884D0F2477EC89D3 __Request__processor_set_policy_disable_t;
typedef struct $D81AFE54BC1383739B7B7705B8C42C3D __Request__processor_set_policy_enable_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__processor_set_stack_usage_t;
typedef struct $7E69CF2F21F2DE86821941D7ACE3ABBA __Request__processor_set_statistics_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__processor_set_tasks_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__processor_set_threads_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__processor_start_t;
typedef struct $6BC0D17B2B96A5F91967EA8653FF4084 __Request__semaphore_create_t;
typedef struct $704B6F3E1CAEFA74D31888B2D78F9F88 __Request__semaphore_destroy_t;
typedef struct $5A17788FF526DC41EE65ED362A8F9A06 __Request__set_dp_control_port_t;
typedef struct $86F29632C393BEC61052C835C8FE3129 __Request__task_assign_default_t;
typedef struct $671C5A9886DEC29C4FEC63DF421615C6 __Request__task_assign_t;
typedef struct $BBF0DF368E56DACC45223BCB3DEA73E4 __Request__task_create_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__task_get_assignment_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__task_get_emulation_vector_t;
typedef struct $AFE166C1B1045E0C8B7F866BEC963EDA __Request__task_get_exception_ports_t;
typedef struct $59F23475065BD2E9F3FA293A04BFFD37 __Request__task_get_special_port_t;
typedef struct $A8165CB9074F0252F5387BFE013515BC __Request__task_info_t;
typedef struct $9CD45B6D299FC36A745AB895FED2FFAE __Request__task_policy_get_t;
typedef struct $478A0C5B06F3F085EB929445D74AA112 __Request__task_policy_set_t;
typedef struct $29E38C6493B75A6FA6817975AF03D4C0 __Request__task_policy_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__task_resume_t;
typedef struct $FDCFA80C9015498DB49FE80C74BE4ADF __Request__task_sample_t;
typedef struct $CD97E842BE97226AEDD8FA0499E21FED __Request__task_set_emulation_t;
typedef struct $FB4BFEF078574026C3C8614BADD24D68 __Request__task_set_emulation_vector_t;
typedef struct $71B18ED6CCE7F8693D0AE793EAB8102E __Request__task_set_exception_ports_t;
typedef struct $E538659855802480E9382832C06656B2 __Request__task_set_info_t;
typedef struct $FB65CC25317C65F4D3C395D38114E663 __Request__task_set_policy_t;
typedef struct $B609C4CC44C72843B520E4D8871C3E06 __Request__task_set_port_space_t;
typedef struct $9D47920389E792E7BC941BE34CEE9E53 __Request__task_set_ras_pc_t;
typedef struct $D5C5C0A4FB77109A22B40E51950751DD __Request__task_set_special_port_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__task_suspend_t;
typedef struct $71B18ED6CCE7F8693D0AE793EAB8102E __Request__task_swap_exception_ports_t;
typedef struct $18919036CDC41B9570D3DDDC73270DDD __Request__task_swappable_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__task_terminate_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__task_threads_t;
typedef struct $778EB01A7E54F11D251DAE9DCCA40C02 __Request__task_wire_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__thread_abort_safely_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__thread_abort_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__thread_assign_default_t;
typedef struct $11759426EFCC6514E2B26D384F50B504 __Request__thread_assign_t;
typedef struct $D01A4AC644F6B88C742A307AE9CB3F5A __Request__thread_create_running_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__thread_create_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__thread_depress_abort_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__thread_get_assignment_t;
typedef struct $AFE166C1B1045E0C8B7F866BEC963EDA __Request__thread_get_exception_ports_t;
typedef struct $59F23475065BD2E9F3FA293A04BFFD37 __Request__thread_get_special_port_t;
typedef struct $740196A4AE4F0F1C0D656C4EF0AFE809 __Request__thread_get_state_t;
typedef struct $ACB9639845DE66FD3FA84A89BA11A6C6 __Request__thread_info_t;
typedef struct $8E8217BBADE0ADE8EA72A465AE8DB052 __Request__thread_policy_get_t;
typedef struct $FC28B28F509CCD1DBFC66983DF428597 __Request__thread_policy_set_t;
typedef struct $960F984C3AE962B8F9E63C3D54374EB6 __Request__thread_policy_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__thread_resume_t;
typedef struct $FDCFA80C9015498DB49FE80C74BE4ADF __Request__thread_sample_t;
typedef struct $71B18ED6CCE7F8693D0AE793EAB8102E __Request__thread_set_exception_ports_t;
typedef struct $26DC3EB05C17544AB8AFD85FB443F277 __Request__thread_set_policy_t;
typedef struct $D5C5C0A4FB77109A22B40E51950751DD __Request__thread_set_special_port_t;
typedef struct $D01A4AC644F6B88C742A307AE9CB3F5A __Request__thread_set_state_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__thread_suspend_t;
typedef struct $71B18ED6CCE7F8693D0AE793EAB8102E __Request__thread_swap_exception_ports_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__thread_terminate_t;
typedef struct $5EE71EC2B6ECEB33372096427B2859E8 __Request__thread_wire_t;
typedef struct $2565C6D5545A12F05674BF5568A8F427 __Request__vm_allocate_cpm_t;
typedef struct $AB09096FC22418DF5FF078E5EEC0B812 __Request__vm_allocate_t;
typedef struct $088788A38BBC50D48DDABC82065D5C20 __Request__vm_behavior_set_t;
typedef struct $0E6CC5D607D299E0B4EAC6FD047D8F10 __Request__vm_copy_t;
typedef struct $75CD40B42DA3FE652B2050998764C1EA __Request__vm_deallocate_t;
typedef struct $9542197A1301620A60E097220E793D31 __Request__vm_inherit_t;
typedef struct $2FBFFD789A2C809930720784B8820AE2 __Request__vm_machine_attribute_t;
typedef struct $E24E91FD65EFF0F160CA6C71162442DA __Request__vm_map_64_t;
typedef struct $D86814E451E26A1A60DC4665DB085C83 __Request__vm_map_get_upl_t;
typedef struct $8C51462DCCBA10E8B75CFFF786FC297E __Request__vm_map_page_query_t;
typedef struct $F3A38383CE2E0DAC4148785558BAB876 __Request__vm_map_t;
typedef struct $C14D86D16E65DCD7FF19482AD8623ED6 __Request__vm_mapped_pages_info_t;
typedef struct $A474581121662292E5F04EE46D9A30FE __Request__vm_msync_t;
typedef struct $DAF19F87D18289B2FEB9E5CF85C90F9A __Request__vm_protect_t;
typedef struct $CDC8267DE048B2F631A00EEC2191AA35 __Request__vm_read_list_t;
typedef struct $B0130559E5806B7D1758D14999BC33AE __Request__vm_read_overwrite_t;
typedef struct $75CD40B42DA3FE652B2050998764C1EA __Request__vm_read_t;
typedef struct $3AD6DCE498BEF9CAF21EEA5EB590F8B6 __Request__vm_region_64_t;
typedef struct $C97B239F9A4549872AEACF29321C5C44 __Request__vm_region_object_create_t;
typedef struct $9487B923D69225998A44A53C15C58453 __Request__vm_region_recurse_64_t;
typedef struct $9487B923D69225998A44A53C15C58453 __Request__vm_region_recurse_t;
typedef struct $3AD6DCE498BEF9CAF21EEA5EB590F8B6 __Request__vm_region_t;
typedef struct $4847376876A672FA04A26307AD8C8434 __Request__vm_remap_t;
typedef struct $90A287D75B3FB741BE53DF4ABD7E5732 __Request__vm_upl_map_t;
typedef struct $5084B273658EFE58E28B4E0108DDB68F __Request__vm_upl_unmap_t;
typedef struct $9D8C3D43D035D08976FF51F4853CEAC7 __Request__vm_wire_t;
typedef struct $456B529FC136F2DC55D26FBF7B75F342 __Request__vm_write_t;
typedef void *__builtin_va_list;
struct __db {DBTYPE type;int (__fastcall *close)(struct __db *);int (__fastcall *del)(const struct __db *, const DBT *, u_int);int (__fastcall *get)(const struct __db *, const DBT *, DBT *, u_int);int (__fastcall *put)(const struct __db *, DBT *, const DBT *, u_int);int (__fastcall *seq)(const struct __db *, DBT *, DBT *, u_int);int (__fastcall *sync)(const struct __db *, u_int);void *internal;int (__fastcall *fd)(const struct __db *);};
typedef union $BDA13BEC95DF5B6207F6150AD55988EA __fp_un_t;
typedef __builtin_va_list __gnuc_va_list;
struct __kvm;
typedef union $149468D43E4B0BB405DED2721C573480 __mbstate_t;
struct __res_state {int retrans;int retry;u_long options;int nscount;struct sockaddr_in nsaddr_list[3];u_short id;char *dnsrch[7];char defdname[256];u_long pfcode;unsigned __int32 ndots : 4;unsigned __int32 nsort : 4;char unused[3];struct __res_state::$A41D3F045172AF5618492D381489FAF0 sort_list[10];};
struct __res_state::$A41D3F045172AF5618492D381489FAF0 {struct in_addr addr;u_int32_t mask;};
struct __sFILE {unsigned __int8 *_p;int _r;int _w;__int16 _flags;__int16 _file;struct __sbuf _bf;int _lbfsize;void *_cookie;int (__fastcall *_close)(void *);int (__fastcall *_read)(void *, char *, int);fpos_t (__fastcall *_seek)(void *, fpos_t, int);int (__fastcall *_write)(void *, const char *, int);struct __sbuf _ub;unsigned __int8 *_up;int _ur;unsigned __int8 _ubuf[3];unsigned __int8 _nbuf[1];struct __sbuf _lb;int _blksize;fpos_t _offset;};
struct __sbuf {unsigned __int8 *_base;int _size;};
struct __sigaction {union __sigaction_u __sigaction_u;void (__fastcall *sa_tramp)(void *, int, int, siginfo_t *, void *);sigset_t sa_mask;int sa_flags;};
union __sigaction_u {void (__fastcall *__sa_handler)(int);void (__fastcall *__sa_sigaction)(int, struct __siginfo *, void *);};
struct __siginfo {int si_signo;int si_errno;int si_code;int si_pid;unsigned int si_uid;int si_status;void *si_addr;union sigval si_value;int si_band;int pad[7];};
typedef struct _complx _complex;
struct _complx {double Real;double Imag;};
struct _dirdesc {int dd_fd;int dd_loc;int dd_size;char *dd_buf;int dd_len;int dd_seek;int dd_rewind;int dd_flags;};
struct _ftsent {struct _ftsent *fts_cycle;struct _ftsent *fts_parent;struct _ftsent *fts_link;int fts_number;void *fts_pointer;char *fts_accpath;char *fts_path;int fts_errno;int fts_symfd;u_short fts_pathlen;u_short fts_namelen;ino_t fts_ino;dev_t fts_dev;nlink_t fts_nlink;__int16 fts_level;u_short fts_info;u_short fts_flags;u_short fts_instr;struct stat *fts_statp;char fts_name[1];};
struct _jmp_buf {struct sigcontext sigcontext;unsigned int vmask;unsigned int vreg[128];};
struct _krb5_address {krb5_magic magic;krb5_addrtype addrtype;int length;krb5_octet *contents;};
struct _krb5_ap_rep {krb5_magic magic;krb5_enc_data enc_part;};
struct _krb5_ap_rep_enc_part {krb5_magic magic;krb5_timestamp ctime;krb5_int32 cusec;krb5_keyblock *subkey;krb5_int32 seq_number;};
struct _krb5_ap_req {krb5_magic magic;krb5_flags ap_options;krb5_ticket *ticket;krb5_enc_data authenticator;};
struct _krb5_auth_context;
struct _krb5_authdata {krb5_magic magic;krb5_authdatatype ad_type;int length;krb5_octet *contents;};
struct _krb5_authenticator {krb5_magic magic;krb5_principal client;krb5_checksum *checksum;krb5_int32 cusec;krb5_timestamp ctime;krb5_keyblock *subkey;krb5_int32 seq_number;krb5_authdata **authorization_data;};
struct _krb5_cc_ops;
struct _krb5_ccache;
struct _krb5_checksum {krb5_magic magic;krb5_cksumtype checksum_type;int length;krb5_octet *contents;};
struct _krb5_context;
struct _krb5_cred {krb5_magic magic;krb5_ticket **tickets;krb5_enc_data enc_part;krb5_cred_enc_part *enc_part2;};
struct _krb5_cred_enc_part {krb5_magic magic;krb5_int32 nonce;krb5_timestamp timestamp;krb5_int32 usec;krb5_address *s_address;krb5_address *r_address;krb5_cred_info **ticket_info;};
struct _krb5_cred_info {krb5_magic magic;krb5_keyblock *session;krb5_principal client;krb5_principal server;krb5_flags flags;krb5_ticket_times times;krb5_address **caddrs;};
struct _krb5_creds {krb5_magic magic;krb5_principal client;krb5_principal server;krb5_keyblock keyblock;krb5_ticket_times times;krb5_boolean is_skey;krb5_flags ticket_flags;krb5_address **addresses;krb5_data ticket;krb5_data second_ticket;krb5_authdata **authdata;};
struct _krb5_cryptosystem_entry;
struct _krb5_data {krb5_magic magic;int length;char *data;};
struct _krb5_enc_data {krb5_magic magic;krb5_enctype enctype;krb5_kvno kvno;krb5_data ciphertext;};
struct _krb5_enc_kdc_rep_part {krb5_magic magic;krb5_msgtype msg_type;krb5_keyblock *session;krb5_last_req_entry **last_req;krb5_int32 nonce;krb5_timestamp key_exp;krb5_flags flags;krb5_ticket_times times;krb5_principal server;krb5_address **caddrs;};
struct _krb5_enc_tkt_part {krb5_magic magic;krb5_flags flags;krb5_keyblock *session;krb5_principal client;krb5_transited transited;krb5_ticket_times times;krb5_address **caddrs;krb5_authdata **authorization_data;};
struct _krb5_encrypt_block {krb5_magic magic;krb5_enctype crypto_entry;krb5_keyblock *key;};
struct _krb5_error {krb5_magic magic;krb5_timestamp ctime;krb5_int32 cusec;krb5_int32 susec;krb5_timestamp stime;krb5_ui_4 error;krb5_principal client;krb5_principal server;krb5_data text;krb5_data e_data;};
struct _krb5_get_init_creds_opt {krb5_flags flags;krb5_deltat tkt_life;krb5_deltat renew_life;int forwardable;int proxiable;krb5_enctype *etype_list;int etype_list_length;krb5_address **address_list;krb5_preauthtype *preauth_list;int preauth_list_length;krb5_data *salt;};
struct _krb5_kdc_rep {krb5_magic magic;krb5_msgtype msg_type;krb5_pa_data **padata;krb5_principal client;krb5_ticket *ticket;krb5_enc_data enc_part;krb5_enc_kdc_rep_part *enc_part2;};
struct _krb5_kdc_req {krb5_magic magic;krb5_msgtype msg_type;krb5_pa_data **padata;krb5_flags kdc_options;krb5_principal client;krb5_principal server;krb5_timestamp from;krb5_timestamp till;krb5_timestamp rtime;krb5_int32 nonce;int nktypes;krb5_enctype *ktype;krb5_address **addresses;krb5_enc_data authorization_data;krb5_authdata **unenc_authdata;krb5_ticket **second_ticket;};
struct _krb5_keyblock {krb5_magic magic;krb5_enctype enctype;int length;krb5_octet *contents;};
struct _krb5_kt;
struct _krb5_last_req_entry {krb5_magic magic;krb5_octet lr_type;krb5_timestamp value;};
struct _krb5_pa_data {krb5_magic magic;krb5_preauthtype pa_type;int length;krb5_octet *contents;};
struct _krb5_prompt {char *prompt;int hidden;krb5_data *reply;};
struct _krb5_pwd_data {krb5_magic magic;int sequence_count;passwd_phrase_element **element;};
struct _krb5_response {krb5_magic magic;krb5_octet message_type;krb5_data response;krb5_int32 expected_nonce;krb5_timestamp request_time;};
struct _krb5_ticket {krb5_magic magic;krb5_principal server;krb5_enc_data enc_part;krb5_enc_tkt_part *enc_part2;};
struct _krb5_ticket_times {krb5_timestamp authtime;krb5_timestamp starttime;krb5_timestamp endtime;krb5_timestamp renew_till;};
struct _krb5_tkt_authent {krb5_magic magic;krb5_ticket *ticket;krb5_authenticator *authenticator;krb5_flags ap_options;};
struct _krb5_transited {krb5_magic magic;krb5_octet tr_type;krb5_data tr_contents;};
struct _krb5_verify_init_creds_opt {krb5_flags flags;int ap_req_nofail;};
struct _opaque_pthread_attr_t {int sig;char opaque[36];};
struct _opaque_pthread_cond_t {int sig;char opaque[24];};
struct _opaque_pthread_condattr_t {int sig;char opaque[4];};
struct _opaque_pthread_mutex_t {int sig;char opaque[40];};
struct _opaque_pthread_mutexattr_t {int sig;char opaque[8];};
struct _opaque_pthread_rwlock_t {int sig;char opaque[124];};
struct _opaque_pthread_rwlockattr_t {int sig;char opaque[12];};
struct _opaque_pthread_t {int sig;struct _pthread_handler_rec *cleanup_stack;char opaque[596];};
struct _passwd_phrase_element {krb5_magic magic;krb5_data *passwd;krb5_data *phrase;};
struct _pthread_handler_rec {void (__fastcall *routine)(void *);void *arg;struct _pthread_handler_rec *next;};
struct _win_st {__int16 _cury;__int16 _curx;__int16 _maxy;__int16 _maxx;__int16 _begy;__int16 _begx;__int16 _flags;attr_t _attrs;chtype _bkgd;NCURSES_BOOL _notimeout;NCURSES_BOOL _clear;NCURSES_BOOL _leaveok;NCURSES_BOOL _scroll;NCURSES_BOOL _idlok;NCURSES_BOOL _idcok;NCURSES_BOOL _immed;NCURSES_BOOL _sync;NCURSES_BOOL _use_keypad;int _delay;struct ldat *_line;__int16 _regtop;__int16 _regbottom;int _parx;int _pary;WINDOW *_parent;struct _win_st::pdat _pad;__int16 _yoffset;};
struct _win_st::pdat {__int16 _pad_y;__int16 _pad_x;__int16 _pad_top;__int16 _pad_left;__int16 _pad_bottom;__int16 _pad_right;};
enum accept_stat {SUCCESS = 0x0,PROG_UNAVAIL = 0x1,PROG_MISMATCH = 0x2,PROC_UNAVAIL = 0x3,GARBAGE_ARGS = 0x4,SYSTEM_ERR = 0x5,};
struct accepted_reply {struct opaque_auth ar_verf;enum accept_stat ar_stat;union accepted_reply::$A74D47F576A9520EEBD40CEAFF1DA023 ru;};
union accepted_reply::$A74D47F576A9520EEBD40CEAFF1DA023 {struct accepted_reply::$A74D47F576A9520EEBD40CEAFF1DA023::$C081DE2363A7D6E022ACDA68492DBB3F AR_versions;struct accepted_reply::$A74D47F576A9520EEBD40CEAFF1DA023::$BFD7413E14FC21CAB05150D69A0647C0 AR_results;};
struct accepted_reply::$A74D47F576A9520EEBD40CEAFF1DA023::$BFD7413E14FC21CAB05150D69A0647C0 {caddr_t where;xdrproc_t proc;};
struct accepted_reply::$A74D47F576A9520EEBD40CEAFF1DA023::$C081DE2363A7D6E022ACDA68492DBB3F {u_long low;u_long high;};
struct acct {char ac_comm[10];comp_t ac_utime;comp_t ac_stime;comp_t ac_etime;time_t ac_btime;uid_t ac_uid;gid_t ac_gid;u_int16_t ac_mem;comp_t ac_io;dev_t ac_tty;u_int8_t ac_flag;};
typedef unsigned __int8 adbAddress;
typedef unsigned __int8 adbHandlerId;
typedef union $907F8256D20D0CD585FA2E06E7F85F62 adbRegister;
typedef union $1BA4A8AA95B11958D6B204130C16BD87 adbRegister3;
typedef struct $E424EB0872B7B2B5F9323999D1384604 adbRegister3bits;
typedef struct $1941E7C4659245DE8D4848E3E4589651 adbRegister3short;
typedef struct $3144B77C1CB098B84E53C6E6F27AEF67 adbRegisterStandard;
typedef struct $6E0AF029687F8788E7AA2DEAC3C56606 adb_kb_map_t;
typedef struct $7582536C10AFFECA08D37C9B1CAD0B28 adb_kb_reg2_t;
typedef struct $667D37966B161E6E078A460A98C89B5C adb_key_t;
typedef unsigned __int16 adb_key_val_t;
struct address_range {unsigned int lower_address;unsigned int upper_address;unsigned int netmask;};
typedef struct address_range *address_range_ptr_t;
typedef struct address_range address_range_t;
struct addrinfo {int ai_flags;int ai_family;int ai_socktype;int ai_protocol;size_t ai_addrlen;char *ai_canonname;struct sockaddr *ai_addr;struct addrinfo *ai_next;};
union adsp_command {TRinitParams initParams;TRopenParams openParams;TRcloseParams closeParams;TRioParams ioParams;TRattnParams attnParams;TRstatusParams statusParams;TRoptionParams optionParams;TRnewcidParams newCIDParams;};
struct adspcmd {struct adspcmd *qLink;u_int ccbRefNum;caddr_t ioc;void *gref;void *mp;__int16 ioResult;u_short ioDirection;__int16 csCode;u_short socket;union adsp_command u;};
struct ah {u_int8_t ah_nxt;u_int8_t ah_len;u_int16_t ah_reserve;u_int32_t ah_spi;};
typedef alarm_t alarm_port_t;
typedef mach_port_t alarm_t;
typedef int alarm_type_t;
struct ar_hdr {char ar_name[16];char ar_date[12];char ar_uid[6];char ar_gid[6];char ar_mode[8];char ar_size[10];char ar_fmag[2];};
struct arphdr {u_short ar_hrd;u_short ar_pro;u_char ar_hln;u_char ar_pln;u_short ar_op;};
struct arpreq {struct sockaddr arp_pa;struct sockaddr arp_ha;int arp_flags;};
typedef struct $FBC20E7BF2C031349A2F409FD459B98D asp_cmdreply_ind_t;
typedef struct $C894ED8A9C18B83A22D1390381C5E4A5 asp_cmdreply_req_t;
typedef struct $FEE352AE48DD3E539C5CEAEF8CDAF3CD asp_command_ind_t;
typedef struct $467060AE45B41A5972813DF03B420207 asp_open_cmd_t;
union asp_primitives {int Primitive;asp_cmdreply_ind_t CmdReplyInd;asp_cmdreply_req_t CmdReplyReq;asp_command_ind_t CommandInd;};
typedef struct $5A0916E0CED2CCF3243480B2FF863984 asp_status_cmd_t;
struct at_addr {u_short s_net;u_char s_node;};
typedef struct $86C2375893A8CA92ECE6B4BF33CA1FB1 at_atp_t;
typedef struct $55A51BE02F24058ABD10625D98596979 at_atpreq;
struct at_ddp_stats {u_int rcv_bytes;u_int rcv_packets;u_int rcv_bad_length;u_int rcv_unreg_socket;u_int rcv_bad_socket;u_int rcv_bad_checksum;u_int rcv_dropped_nobuf;u_int xmit_bytes;u_int xmit_packets;u_int xmit_BRT_used;u_int xmit_bad_length;u_int xmit_bad_addr;u_int xmit_dropped_nobuf;};
typedef struct at_ddp_stats at_ddp_stats_t;
typedef struct $915DBCE06085160681480AA05D6C8293 at_ddp_t;
struct at_entity {at_nvestr_t object;at_nvestr_t type;at_nvestr_t zone;};
typedef struct at_entity at_entity_t;
struct at_inet {u_short net;u_char node;u_char socket;};
typedef struct at_inet at_inet_t;
struct at_nbp {unsigned __int32 control : 4;unsigned __int32 tuple_count : 4;u_char at_nbp_id;at_nbptuple_t tuple[15];};
typedef struct at_nbp at_nbp_t;
struct at_nbptuple {at_inet_t enu_addr;u_char enu_enum;at_entity_t enu_entity;};
typedef struct at_nbptuple at_nbptuple_t;
typedef at_net_unal at_net;
typedef u_short at_net_al;
typedef ua_short at_net_unal;
typedef u_char at_node;
struct at_nvestr {u_char len;u_char str[32];};
typedef struct at_nvestr at_nvestr_t;
typedef struct $D72606FC5CBC39B3E4CA13C79CCA47CB at_pap;
struct at_resp {u_char bitmap;u_char filler[3];struct iovec resp[8];int userdata[8];};
typedef struct at_resp at_resp_t;
struct at_retry {__int16 interval;__int16 retries;u_char backoff;};
typedef struct at_retry at_retry_t;
typedef struct $3005DC22E47E8D60012A11697F35BA7D at_rtmp;
typedef struct $4A735630EB341D1A813FEC0C6C1BF2F3 at_rtmp_tuple;
typedef u_char at_socket;
struct at_state {unsigned int flags;};
typedef struct at_state at_state_t;
typedef struct $950A3BF8808771ACD907036B0145D04E at_x_zip_t;
struct at_zip {u_char command;u_char flags;char data[584];};
typedef struct at_zip at_zip_t;
struct atalk_addr {u_char atalk_unused;at_net atalk_net;at_node atalk_node;};
struct atpBDS {ua_short bdsBuffSz;ua_long bdsBuffAddr;ua_short bdsDataSz;unsigned __int8 bdsUserData[4];};
struct atp_result {u_short count;u_short hdr;u_short offset[8];u_short len[8];};
struct atp_set_default {u_int def_retries;u_int def_rate;struct atpBDS *def_bdsp;u_int def_BDSlen;};
typedef chtype attr_t;
typedef u_int32_t attrgroup_t;
struct attribute_set {attrgroup_t commonattr;attrgroup_t volattr;attrgroup_t dirattr;attrgroup_t fileattr;attrgroup_t forkattr;};
typedef struct attribute_set attribute_set_t;
struct attrlist {u_short bitmapcount;u_int16_t reserved;attrgroup_t commonattr;attrgroup_t volattr;attrgroup_t dirattr;attrgroup_t fileattr;attrgroup_t forkattr;};
struct attrreference {int attr_dataoffset;size_t attr_length;};
typedef struct attrreference attrreference_t;
struct auth_dat {unsigned __int8 k_flags;char pname[40];char pinst[40];char prealm[40];u_int32_t checksum;des_cblock session;int life;u_int32_t time_sec;u_int32_t address;KTEXT_ST reply;};
enum auth_stat {AUTH_OK = 0x0,AUTH_BADCRED = 0x1,AUTH_REJECTEDCRED = 0x2,AUTH_BADVERF = 0x3,AUTH_REJECTEDVERF = 0x4,AUTH_TOOWEAK = 0x5,AUTH_INVALIDRESP = 0x6,AUTH_FAILED = 0x7,};
struct authunix_parms {u_long aup_time;char *aup_machname;int aup_uid;int aup_gid;u_int aup_len;int *aup_gids;};
struct bdevsw {open_close_fcn_t *d_open;open_close_fcn_t *d_close;strategy_fcn_t *d_strategy;ioctl_fcn_t *d_ioctl;dump_fcn_t *d_dump;psize_fcn_t *d_psize;int d_type;};
typedef int ber_int_t;
typedef unsigned int ber_len_t;
typedef signed int ber_sint_t;
typedef signed int ber_slen_t;
typedef int ber_socket_t;
typedef unsigned int ber_tag_t;
typedef unsigned int ber_uint_t;
struct berelement;
struct berval {ber_len_t bv_len;char *bv_val;};
typedef struct des_ks_struct bit_64;
typedef unsigned __int8 bitstr_t;
typedef boolean_t *bool_array_t;
typedef int boolean_t;
struct boot_info {vm_size_t sym_size;vm_size_t boot_size;vm_size_t load_info_size;};
typedef bootstrap_status_t *bootstrap_status_array_t;
typedef int bootstrap_status_t;
typedef mach_port_t bootstrap_t;
struct bp_address {int address_type;union bp_address::$3B940BBAFE206A608BBBF7EC1987BA49 bp_address_u;};
union bp_address::$3B940BBAFE206A608BBBF7EC1987BA49 {ip_addr_t ip_addr;};
typedef char *bp_fileid_t;
struct bp_getfile_arg {bp_machine_name_t client_name;bp_fileid_t file_id;};
struct bp_getfile_res {bp_machine_name_t server_name;bp_address server_address;bp_path_t server_path;};
typedef char *bp_machine_name_t;
typedef char *bp_path_t;
struct bp_whoami_arg {bp_address client_address;};
struct bp_whoami_res {bp_machine_name_t client_name;bp_machine_name_t domain_name;bp_address router_address;};
struct bpf_hdr {struct timeval bh_tstamp;bpf_u_int32 bh_caplen;bpf_u_int32 bh_datalen;u_short bh_hdrlen;};
struct bpf_insn {u_short code;u_char jt;u_char jf;bpf_u_int32 k;};
typedef int32_t bpf_int32;
struct bpf_program {u_int bf_len;struct bpf_insn *bf_insns;};
struct bpf_stat {u_int bs_recv;u_int bs_drop;};
typedef u_int32_t bpf_u_int32;
struct bpf_version {u_short bv_major;u_short bv_minor;};
struct buf;
struct buflists {struct buf *lh_first;};
typedef struct $27E234F22BC82B288AC30D0762C87255 bz_stream;
typedef char *caddr_t;
struct call_body {u_long cb_rpcvers;u_long cb_prog;u_long cb_vers;u_long cb_proc;struct opaque_auth cb_cred;struct opaque_auth cb_verf;};
typedef unsigned __int8 cc_t;
struct cdevsw {open_close_fcn_t *d_open;open_close_fcn_t *d_close;read_write_fcn_t *d_read;read_write_fcn_t *d_write;ioctl_fcn_t *d_ioctl;stop_fcn_t *d_stop;reset_fcn_t *d_reset;struct tty **d_ttys;select_fcn_t *d_select;mmap_fcn_t *d_mmap;strategy_fcn_t *d_strategy;getc_fcn_t *d_getc;putc_fcn_t *d_putc;int d_type;};
typedef unsigned int chtype;
struct clist {int c_cc;int c_cn;u_char *c_cf;u_char *c_cl;u_char *c_cs;u_char *c_ce;u_char *c_cq;};
enum clnt_stat {RPC_SUCCESS = 0x0,RPC_CANTENCODEARGS = 0x1,RPC_CANTDECODERES = 0x2,RPC_CANTSEND = 0x3,RPC_CANTRECV = 0x4,RPC_TIMEDOUT = 0x5,RPC_VERSMISMATCH = 0x6,RPC_AUTHERROR = 0x7,RPC_PROGUNAVAIL = 0x8,RPC_PROGVERSMISMATCH = 0x9,RPC_PROCUNAVAIL = 0xA,RPC_CANTDECODEARGS = 0xB,RPC_SYSTEMERROR = 0xC,RPC_UNKNOWNHOST = 0xD,RPC_UNKNOWNPROTO = 0x11,RPC_PMAPFAILURE = 0xE,RPC_PROGNOTREGISTERED = 0xF,RPC_FAILED = 0x10,};
typedef int *clock_attr_t;
typedef clock_ctrl_t clock_ctrl_port_t;
typedef mach_port_t clock_ctrl_t;
typedef int clock_flavor_t;
typedef int clock_id_t;
typedef mach_port_t clock_reply_t;
typedef int clock_res_t;
typedef clock_serv_t clock_serv_port_t;
typedef mach_port_t clock_serv_t;
typedef unsigned int clock_t;
struct clockinfo {int hz;int tick;int tickadj;int stathz;int profhz;};
typedef char cmd_t[512];
struct cmsghdr {u_int cmsg_len;int cmsg_level;int cmsg_type;};
typedef void (__fastcall *com_err_handler_t)(const char *whoami, errcode_t code, const char *format, va_list args);
typedef u_int16_t comp_t;
struct componentname {u_long cn_nameiop;u_long cn_flags;struct proc *cn_proc;struct ucred *cn_cred;char *cn_pnbuf;int cn_pnlen;char *cn_nameptr;int cn_namelen;u_long cn_hash;int cn_consume;};
typedef const char *const_profile_filespec_list_t;
typedef const char *const_profile_filespec_t;
struct cpu_disklabel {int cd_dummy;};
typedef integer_t cpu_subtype_t;
typedef integer_t cpu_type_t;
struct credentials {char service[40];char instance[40];char realm[40];des_cblock session;int lifetime;int kvno;KTEXT_ST ticket_st;int issue_date;char pname[40];char pinst[40];u_int32_t address;u_int32_t stk_type;};
struct ctl_event_data {u_int32_t ctl_id;u_int32_t ctl_unit;};
struct ctlname {char *ctl_name;int ctl_type;};
typedef enum $7AE70D482D57B64FB9C9B10583B098AB curl_closepolicy;
typedef int (__fastcall *curl_passwd_callback)(void *clientp, char *prompt, char *buffer, int buflen);
typedef int (__fastcall *curl_progress_callback)(void *clientp, size_t dltotal, size_t dlnow, size_t ultotal, size_t ulnow);
typedef size_t (__fastcall *curl_read_callback)(char *buffer, size_t size, size_t nitems, FILE *instream);
struct curl_slist {char *data;struct curl_slist *next;};
typedef size_t (__fastcall *curl_write_callback)(char *buffer, size_t size, size_t nitems, FILE *outstream);
typedef struct tty *__fastcall d_devtotty_t(dev_t dev);
typedef int __fastcall d_poll_t(dev_t dev, int events, struct proc *p);
typedef int32_t daddr_t;
typedef struct $D379431B13F78A36F2202C5AA386190E datum;
struct dbgBits {unsigned int dbgMod;unsigned int dbgLev;};
typedef struct dbgBits dbgBits_t;
struct dblock {swblk_t db_base;swblk_t db_size;};
struct ddesc_head_str {struct dlil_demux_desc *tqh_first;struct dlil_demux_desc **tqh_last;};
struct ddp_addr {at_inet_t inet;u_short ddptype;};
typedef struct ddp_addr ddp_addr_t;
typedef debug_t *debug_ptr_t;
typedef struct $B0A4D3FCA1AE58C86963BEC154F83A57 debug_t;
typedef int (__fastcall *decrypt_tkt_type)(char *, char *, char *, char *, key_proc_type, KTEXT *);
union des_block {struct des_block::$E577A72923D02C4B0C353C58593774EC key;char c[8];};
struct des_block::$E577A72923D02C4B0C353C58593774EC {u_int32 high;u_int32 low;};
typedef unsigned __int8 des_cblock[8];
typedef struct des_ks_struct des_key_schedule[16];
struct des_ks_struct {union des_ks_struct::$A1E7D2D4DD736CACEEBC0A65665A55B8 __;};
union des_ks_struct::$A1E7D2D4DD736CACEEBC0A65665A55B8 {int32_t pad;des_cblock _;};
typedef int32_t dev_t;
struct devdirent {char de_name[32];devnode_t *de_dnp;devnode_t *de_parent;devdirent_t *de_next;devdirent_t **de_prevp;devdirent_t *de_nextlink;devdirent_t **de_prevlinkp;};
typedef struct devdirent devdirent_t;
struct devfs_stats {int nodes;int entries;int mounts;int stringspace;};
struct devfsmount {struct mount *mount;devdirent_t *plane_root;};
typedef enum $066FE35C39670617E77C49BA9433F64D devfstype_t;
struct devnode {devfstype_t dn_type;int dn_flags;u_short dn_mode;uid_t dn_uid;gid_t dn_gid;struct timespec dn_atime;struct timespec dn_mtime;struct timespec dn_ctime;int (__fastcall ***dn_ops)(void *);int dn_links;struct devfsmount *dn_dvm;struct vnode *dn_vn;int dn_len;devdirent_t *dn_linklist;devdirent_t *dn_last_lookup;devnode_t *dn_nextsibling;devnode_t **dn_prevsiblingp;devnode_type_t dn_typeinfo;int dn_delete;};
typedef struct devnode devnode_t;
union devnode_type {dev_t dev;struct devnode_type::$6146C0B9C4DE695DDA13C68ED2B69782 Dir;struct devnode_type::$563A830E79DCFDE9FF172AD85035189D Slnk;};
struct devnode_type::$563A830E79DCFDE9FF172AD85035189D {char *name;int namelen;};
struct devnode_type::$6146C0B9C4DE695DDA13C68ED2B69782 {devdirent_t *dirlist;devdirent_t **dirlast;devnode_t *parent;devdirent_t *myname;int entrycount;};
typedef union devnode_type devnode_type_t;
struct dirent {u_int32_t d_fileno;u_int16_t d_reclen;u_int8_t d_type;u_int8_t d_namlen;char d_name[256];};
struct diskextent {u_int32_t startblock;u_int32_t blockcount;};
struct disktab {char *d_name;char *d_type;int d_secsize;int d_ntracks;int d_nsectors;int d_ncylinders;int d_rpm;int d_badsectforw;int d_sectoffset;struct disktab::partition d_partitions[8];};
struct disktab::partition {int p_size;__int16 p_bsize;__int16 p_fsize;};
typedef struct $979FA3DE6ECCF956231BFC297C4278E6 div_t;
typedef struct $05C6DC85C1F1DBCA1F6881BCC9CC439D dk_firmware_path_t;
typedef int (__fastcall *dl_event_func)(struct kern_event_msg *event, u_long dl_tag);
typedef int (__fastcall *dl_input_func)(struct mbuf *m, char *frame_header, struct ifnet *ifp, u_long dl_tag, int sync_ok);
typedef int (__fastcall *dl_ioctl_func)(u_long dl_tag, struct ifnet *ifp, u_long ioctl_cmd, caddr_t ioctl_arg);
typedef int (__fastcall *dl_offer_func)(struct mbuf *m, char *frame_header);
typedef int (__fastcall *dl_pre_output_func)(struct ifnet *ifp, struct mbuf **m, struct sockaddr *dest, caddr_t route_entry, char *frame_type, char *dst_addr, u_long dl_tag);
struct dl_tag_attr_str {u_long dl_tag;__int16 if_flags;__int16 if_unit;u_long if_family;u_long protocol_family;};
struct dlil_demux_desc {struct dlil_demux_desc::$FDA7FF6EE58C7907171B5AE1EAC600F5 next;int type;u_char *native_type;union dlil_demux_desc::$FDD4E4AF734D43AFDC265ADC52CE3981 variants;};
struct dlil_demux_desc::$FDA7FF6EE58C7907171B5AE1EAC600F5 {struct dlil_demux_desc *tqe_next;struct dlil_demux_desc **tqe_prev;};
union dlil_demux_desc::$FDD4E4AF734D43AFDC265ADC52CE3981 {struct dlil_demux_desc::$FDD4E4AF734D43AFDC265ADC52CE3981::$5051652AF92AD1238F4CDE570B4BA4AA bitmask;struct dlil_demux_desc::$FDD4E4AF734D43AFDC265ADC52CE3981::$21EC618548011DD78CECFD9D8CFE818F desc_802_2;struct dlil_demux_desc::$FDD4E4AF734D43AFDC265ADC52CE3981::$25607327F47D927CC6AE11024C627E00 desc_802_2_SNAP;u_int32_t native_type_length;};
struct dlil_demux_desc::$FDD4E4AF734D43AFDC265ADC52CE3981::$21EC618548011DD78CECFD9D8CFE818F {u_char dsap;u_char ssap;u_char control_code;u_char pad;};
struct dlil_demux_desc::$FDD4E4AF734D43AFDC265ADC52CE3981::$25607327F47D927CC6AE11024C627E00 {u_char dsap;u_char ssap;u_char control_code;u_char org[3];u_short protocol_type;};
struct dlil_demux_desc::$FDD4E4AF734D43AFDC265ADC52CE3981::$5051652AF92AD1238F4CDE570B4BA4AA {u_long proto_id_length;u_char *proto_id;u_char *proto_id_mask;};
struct dlil_filterq_entry {struct dlil_filterq_entry::$AFCC4674D8A5DB337DD67B4FA1C70011 que;u_long filter_id;int type;union dlil_filterq_entry::$464273D101CC2427217BB78CAC46A882 variants;};
union dlil_filterq_entry::$464273D101CC2427217BB78CAC46A882 {struct dlil_if_flt_str if_filter;struct dlil_pr_flt_str pr_filter;};
struct dlil_filterq_entry::$AFCC4674D8A5DB337DD67B4FA1C70011 {struct dlil_filterq_entry *tqe_next;struct dlil_filterq_entry **tqe_prev;};
struct dlil_filterq_head {struct dlil_filterq_entry *tqh_first;struct dlil_filterq_entry **tqh_last;};
struct dlil_if_flt_str {caddr_t cookie;int (__fastcall *filter_if_input)(caddr_t cookie, struct ifnet **ifnet_ptr, struct mbuf **mbuf_ptr, char **frame_ptr);int (__fastcall *filter_if_event)(caddr_t cookie, struct ifnet **ifnet_ptr, struct kern_event_msg **event_msg_ptr);int (__fastcall *filter_if_output)(caddr_t cookie, struct ifnet **ifnet_ptr, struct mbuf **mbuf_ptr);int (__fastcall *filter_if_ioctl)(caddr_t cookie, struct ifnet *ifnet_ptr, u_long ioctl_code_ptr, caddr_t ioctl_arg_ptr);int (__fastcall *filter_if_free)(caddr_t cookie, struct ifnet *ifnet_ptr);int (__fastcall *filter_detach)(caddr_t cookie);u_long reserved[2];};
struct dlil_ifmod_reg_str {int (__fastcall *add_if)(struct ifnet *ifp);int (__fastcall *del_if)(struct ifnet *ifp);int (__fastcall *add_proto)(struct ddesc_head_str *demux_desc_head, struct if_proto *proto, u_long dl_tag);int (__fastcall *del_proto)(struct if_proto *proto, u_long dl_tag);int (__fastcall *ifmod_ioctl)(struct ifnet *ifp, u_long ioctl_cmd, caddr_t data);int (__fastcall *shutdown)();int (__fastcall *init_if)(struct ifnet *ifp);u_long reserved[3];};
struct dlil_pr_flt_str {caddr_t cookie;int (__fastcall *filter_dl_input)(caddr_t cookie, struct mbuf **m, char **frame_header, struct ifnet **ifp);int (__fastcall *filter_dl_output)(caddr_t cookie, struct mbuf **m, struct ifnet **ifp, struct sockaddr **dest, char *dest_linkaddr, char *frame_type);int (__fastcall *filter_dl_event)(caddr_t cookie, struct kern_event_msg *event_msg);int (__fastcall *filter_dl_ioctl)(caddr_t cookie, struct ifnet *ifp, u_long ioctl_cmd, caddr_t ioctl_arg);int (__fastcall *filter_detach)(caddr_t cookie);u_long reserved[2];};
struct dlil_proto_head {struct if_proto *tqh_first;struct if_proto **tqh_last;};
struct dlil_proto_reg_str {struct ddesc_head_str demux_desc_head;u_long interface_family;u_long protocol_family;__int16 unit_number;int default_proto;dl_input_func input;dl_pre_output_func pre_output;dl_event_func event;dl_offer_func offer;dl_ioctl_func ioctl;u_long reserved[4];};
struct dlil_tag_list_entry {struct dlil_tag_list_entry::$365510A78F36AE2297182E3FE5839D43 next;struct ifnet *ifp;u_long dl_tag;};
struct dlil_tag_list_entry::$365510A78F36AE2297182E3FE5839D43 {struct dlil_tag_list_entry *tqe_next;struct dlil_tag_list_entry **tqe_prev;};
struct dmap {swblk_t dm_size;swblk_t dm_alloc;swblk_t dm_map[38];};
typedef struct _dns_service_discovery_t *dns_service_discovery_ref;
struct dom_binding;
struct domain {int dom_family;char *dom_name;void (*dom_init)(void);int (__fastcall *dom_externalize)(struct mbuf *);void (__fastcall *dom_dispose)(struct mbuf *);struct protosw *dom_protosw;struct domain *dom_next;int (__fastcall *dom_rtattach)(void **, int);int dom_rtoffset;int dom_maxrtkey;int dom_protohdrlen;int dom_refs;u_long reserved[4];};
typedef char *domainname;
enum dot3Vendors {dot3VendorAMD = 0x1,dot3VendorIntel = 0x2,dot3VendorNational = 0x4,dot3VendorFujitsu = 0x5,dot3VendorDigital = 0x6,dot3VendorWesternDigital = 0x7,};
typedef double double_t;
struct dqblk {u_int64_t dqb_bhardlimit;u_int64_t dqb_bsoftlimit;u_int64_t dqb_curbytes;u_int32_t dqb_ihardlimit;u_int32_t dqb_isoftlimit;u_int32_t dqb_curinodes;time_t dqb_btime;time_t dqb_itime;u_int32_t dqb_id;u_int32_t dqb_spare[4];};
struct dqfilehdr {u_int32_t dqh_magic;u_int32_t dqh_version;u_int32_t dqh_maxentries;u_int32_t dqh_entrycnt;u_int32_t dqh_flags;time_t dqh_chktime;time_t dqh_btime;time_t dqh_itime;char dqh_string[16];u_int32_t dqh_spare[4];};
typedef int __fastcall dump_fcn_t();
struct editline;
typedef vm_offset_t *emulation_vector_t;
typedef struct $1939A040176EF1B9621D43DC5C59AFB4 enet_header_t;
typedef struct eventreq *er_t;
typedef int errcode_t;
struct error_table {const char *const *const messages;int32_t base;int32_t count;};
struct esp {u_int32_t esp_spi;};
struct esptail {u_int8_t esp_padlen;u_int8_t esp_nxt;};
struct ether_addr {u_char octet[6];};
struct ether_arp {struct arphdr ea_hdr;u_char arp_sha[6];u_char arp_spa[4];u_char arp_tha[6];u_char arp_tpa[4];};
struct ether_header {u_char ether_dhost[6];u_char ether_shost[6];u_short ether_type;};
struct ether_multi {u_char enm_addrlo[6];u_char enm_addrhi[6];struct arpcom *enm_ac;u_int enm_refcount;struct ether_multi *enm_next;};
struct ether_multistep {struct ether_multi *e_enm;};
struct eventreq {int er_type;int er_handle;void *er_data;int er_rcnt;int er_wcnt;int er_ecnt;int er_eventbits;};
struct exception {int type;char *name;double arg1;double arg2;double retval;};
typedef exception_behavior_t *exception_behavior_array_t;
typedef int exception_behavior_t;
typedef integer_t *exception_data_t;
typedef integer_t exception_data_type_t;
typedef thread_state_flavor_t *exception_flavor_array_t;
typedef exception_handler_t *exception_handler_array_t;
typedef mach_port_t exception_handler_t;
typedef exception_mask_t *exception_mask_array_t;
typedef unsigned int exception_mask_t;
typedef exception_handler_array_t exception_port_arrary_t;
typedef mach_port_t *exception_port_array_t;
typedef exception_handler_t exception_port_t;
typedef int exception_type_t;
struct exec {unsigned int a_magic;unsigned int a_text;unsigned int a_data;unsigned int a_bss;unsigned int a_syms;unsigned int a_entry;unsigned int a_trsize;unsigned int a_drsize;};
struct export_args {int ex_flags;uid_t ex_root;struct ucred ex_anon;struct sockaddr *ex_addr;int ex_addrlen;struct sockaddr *ex_mask;int ex_masklen;};
typedef struct diskextent extentrecord[8];
struct extern_proc {union extern_proc::$27B38CA2FABD237895D38B0302C8FC9B p_un;struct vmspace *p_vmspace;struct sigacts *p_sigacts;int p_flag;char p_stat;pid_t p_pid;pid_t p_oppid;int p_dupfd;caddr_t user_stack;void *exit_thread;int p_debugger;boolean_t sigwait;u_int p_estcpu;int p_cpticks;fixpt_t p_pctcpu;void *p_wchan;char *p_wmesg;u_int p_swtime;u_int p_slptime;struct itimerval p_realtimer;struct timeval p_rtime;u_quad_t p_uticks;u_quad_t p_sticks;u_quad_t p_iticks;int p_traceflag;struct vnode *p_tracep;int p_siglist;struct vnode *p_textvp;int p_holdcnt;sigset_t p_sigmask;sigset_t p_sigignore;sigset_t p_sigcatch;u_char p_priority;u_char p_usrpri;char p_nice;char p_comm[17];struct pgrp *p_pgrp;struct user *p_addr;u_short p_xstat;u_short p_acflag;struct rusage *p_ru;};
union extern_proc::$27B38CA2FABD237895D38B0302C8FC9B {struct extern_proc::$27B38CA2FABD237895D38B0302C8FC9B::$A845D8EFA010EC0E04B626533D96DFA0 p_st1;struct timeval __p_starttime;};
struct extern_proc::$27B38CA2FABD237895D38B0302C8FC9B::$A845D8EFA010EC0E04B626533D96DFA0 {struct proc *__p_forw;struct proc *__p_back;};
struct fbootstraptransfer {off_t fbt_offset;size_t fbt_length;void *fbt_buffer;};
typedef struct fbootstraptransfer fbootstraptransfer_t;
typedef int32_t fd_mask;
struct fd_set {fd_mask fds_bits[32];};
enum fdversion {fdlibm_ieee = 0xFFFFFFFF,fdlibm_svid = 0x0,fdlibm_xopen = 0x1,fdlibm_posix = 0x2,};
typedef int fenv_t;
typedef int fexcept_t;
struct fhandle {fsid_t fh_fsid;struct fid fh_fid;};
typedef struct fhandle fhandle_t;
struct fid {u_short fid_len;u_short fid_reserved;char fid_data[16];};
struct fieldnode {unsigned __int16 status;__int16 rows;__int16 cols;__int16 frow;__int16 fcol;int drows;int dcols;int maxgrow;int nrow;__int16 nbuf;__int16 just;__int16 page;__int16 index;int pad;chtype fore;chtype back;Field_Options opts;struct fieldnode *snext;struct fieldnode *sprev;struct fieldnode *link;struct formnode *form;struct typenode *type;void *arg;char *buf;void *usrptr;};
struct filedesc {struct file **fd_ofiles;char *fd_ofileflags;struct vnode *fd_cdir;struct vnode *fd_rdir;int fd_nfiles;u_short fd_lastfile;u_short fd_freefile;u_short fd_cmask;u_short fd_refcnt;};
typedef u_int32_t fixpt_t;
typedef float float_t;
struct flock {off_t l_start;off_t l_len;pid_t l_pid;__int16 l_type;__int16 l_whence;};
struct formnode {unsigned __int16 status;__int16 rows;__int16 cols;int currow;int curcol;int toprow;int begincol;__int16 maxfield;__int16 maxpage;__int16 curpage;Form_Options opts;WINDOW *win;WINDOW *sub;WINDOW *w;FIELD **field;FIELD *current;_PAGE *page;void *usrptr;void (__fastcall *forminit)(struct formnode *);void (__fastcall *formterm)(struct formnode *);void (__fastcall *fieldinit)(struct formnode *);void (__fastcall *fieldterm)(struct formnode *);};
typedef off_t fpos_t;
typedef u_int32_t fsfile_type_t;
enum fsh_access {fsa_NONE = 0x0,fsa_R = 0x1,fsa_W = 0x2,fsa_RW = 0x3,};
enum fsh_mode {fsm_DN = 0x0,fsm_DR = 0x1,fsm_DW = 0x2,fsm_DRW = 0x3,};
struct fsid {int32_t val[2];};
typedef struct fsid fsid_t;
struct fsobj_id {u_int32_t fid_objno;u_int32_t fid_generation;};
typedef struct fsobj_id fsobj_id_t;
typedef u_int32_t fsobj_tag_t;
typedef u_int32_t fsobj_type_t;
struct fssearchblock {struct attrlist *returnattrs;void *returnbuffer;size_t returnbuffersize;u_long maxmatches;struct timeval timelimit;void *searchparams1;size_t sizeofsearchparams1;void *searchparams2;size_t sizeofsearchparams2;struct attrlist searchattrs;};
struct fstab {char *fs_spec;char *fs_file;char *fs_vfstype;char *fs_mntops;char *fs_type;int fs_freq;int fs_passno;};
struct fstore {u_int32_t fst_flags;int fst_posmode;off_t fst_offset;off_t fst_length;off_t fst_bytesalloc;};
typedef struct fstore fstore_t;
typedef u_int32_t fsvolid_t;
typedef int __fastcall getc_fcn_t(dev_t dev);
struct getquota_args {char *gqa_pathp;int gqa_uid;};
struct getquota_rslt {gqr_status status;union getquota_rslt::$93D720EECC4BDA120269F9F7BB40A95B getquota_rslt_u;};
union getquota_rslt::$93D720EECC4BDA120269F9F7BB40A95B {rquota gqr_rquota;};
typedef u_int32_t gid_t;
typedef struct $16A0DF27F3238E1356CA147E92FEAE81 glob_t;
struct gmon_data {unsigned int type;unsigned int size;};
struct gmonhdr {u_long lpc;u_long hpc;int ncnt;int version;int profrate;int spare[3];};
struct gmonparam {int state;u_short *kcount;u_long kcountsize;u_short *froms;u_long fromssize;struct tostruct *tos;u_long tossize;int tolimit;u_long lowpc;u_long highpc;u_long textsize;u_long hashfraction;};
enum gqr_status {Q_OK = 0x1,Q_NOQUOTA = 0x2,Q_EPERM = 0x3,};
struct group {char *gr_name;char *gr_passwd;gid_t gr_gid;char **gr_mem;};
typedef struct gss_OID_desc_struct *gss_OID;
typedef struct gss_OID_desc_struct gss_OID_desc;
struct gss_OID_desc_struct {OM_uint32 length;void *elements;};
typedef struct gss_OID_set_desc_struct *gss_OID_set;
typedef struct gss_OID_set_desc_struct gss_OID_set_desc;
struct gss_OID_set_desc_struct {size_t count;gss_OID elements;};
typedef struct gss_buffer_desc_struct gss_buffer_desc;
struct gss_buffer_desc_struct {size_t length;void *value;};
typedef struct gss_buffer_desc_struct *gss_buffer_t;
struct gss_channel_bindings_struct {OM_uint32 initiator_addrtype;gss_buffer_desc initiator_address;OM_uint32 acceptor_addrtype;gss_buffer_desc acceptor_address;gss_buffer_desc application_data;};
typedef struct gss_channel_bindings_struct *gss_channel_bindings_t;
typedef void *gss_cred_id_t;
typedef int gss_cred_usage_t;
typedef void *gss_ctx_id_t;
typedef int gss_int32;
typedef void *gss_name_t;
typedef OM_uint32 gss_qop_t;
typedef unsigned int gss_uint32;
struct hash_info_bucket {natural_t hib_count;};
typedef hash_info_bucket_t *hash_info_bucket_array_t;
typedef struct hash_info_bucket hash_info_bucket_t;
struct hfs_mount_args {char *fspec;struct export_args export;uid_t hfs_uid;gid_t hfs_gid;mode_t hfs_mask;u_long hfs_encoding;struct timezone hfs_timezone;int flags;};
struct history;
struct host_basic_info {integer_t max_cpus;integer_t avail_cpus;vm_size_t memory_size;cpu_type_t cpu_type;cpu_subtype_t cpu_subtype;};
typedef struct host_basic_info host_basic_info_data_t;
typedef struct host_basic_info *host_basic_info_t;
struct host_cpu_load_info {unsigned int cpu_ticks[4];};
typedef struct host_cpu_load_info host_cpu_load_info_data_t;
typedef struct host_cpu_load_info *host_cpu_load_info_t;
typedef integer_t host_flavor_t;
struct host_info {char name[128];char addr[128];struct sockaddr_in *sin;struct t_unitdata *unit;struct request_info *request;};
typedef integer_t host_info_data_t[1024];
typedef integer_t *host_info_t;
struct host_load_info {integer_t avenrun[3];integer_t mach_factor[3];};
typedef struct host_load_info host_load_info_data_t;
typedef struct host_load_info *host_load_info_t;
typedef host_t host_name_port_t;
typedef host_t host_name_t;
struct host_priority_info {integer_t kernel_priority;integer_t system_priority;integer_t server_priority;integer_t user_priority;integer_t depress_priority;integer_t idle_priority;integer_t minimum_priority;integer_t maximum_priority;};
typedef struct host_priority_info host_priority_info_data_t;
typedef struct host_priority_info *host_priority_info_t;
typedef mach_port_t host_priv_t;
struct host_sched_info {integer_t min_timeout;integer_t min_quantum;};
typedef struct host_sched_info host_sched_info_data_t;
typedef struct host_sched_info *host_sched_info_t;
typedef mach_port_t host_security_t;
typedef mach_port_t host_t;
struct hostent {char *h_name;char **h_aliases;int h_addrtype;int h_length;char **h_addr_list;};
struct icmp {u_char icmp_type;u_char icmp_code;u_short icmp_cksum;union icmp::$115915189B36D486427C31680FC3CC99 icmp_hun;union icmp::$B8975A790A59AA025FBB0015D5EF41D8 icmp_dun;};
struct icmp6_filter {u_int32_t icmp6_filt[8];};
struct icmp6_hdr {u_int8_t icmp6_type;u_int8_t icmp6_code;u_int16_t icmp6_cksum;union icmp6_hdr::$D19D92B5F4F43A148CE7ABC3DA9CAAC9 icmp6_dataun;};
union icmp6_hdr::$D19D92B5F4F43A148CE7ABC3DA9CAAC9 {u_int32_t icmp6_un_data32[1];u_int16_t icmp6_un_data16[2];u_int8_t icmp6_un_data8[4];};
struct icmp6_namelookup {struct icmp6_hdr icmp6_nl_hdr;u_int8_t icmp6_nl_nonce[8];int32_t icmp6_nl_ttl;};
struct icmp6_nodeinfo {struct icmp6_hdr icmp6_ni_hdr;u_int8_t icmp6_ni_nonce[8];};
struct icmp6_router_renum {struct icmp6_hdr rr_hdr;u_int8_t rr_segnum;u_int8_t rr_flags;u_int16_t rr_maxdelay;u_int32_t rr_reserved;};
struct icmp6errstat {u_quad_t icp6errs_dst_unreach_noroute;u_quad_t icp6errs_dst_unreach_admin;u_quad_t icp6errs_dst_unreach_beyondscope;u_quad_t icp6errs_dst_unreach_addr;u_quad_t icp6errs_dst_unreach_noport;u_quad_t icp6errs_packet_too_big;u_quad_t icp6errs_time_exceed_transit;u_quad_t icp6errs_time_exceed_reassembly;u_quad_t icp6errs_paramprob_header;u_quad_t icp6errs_paramprob_nextheader;u_quad_t icp6errs_paramprob_option;u_quad_t icp6errs_redirect;u_quad_t icp6errs_unknown;};
struct icmp6stat {u_quad_t icp6s_error;u_quad_t icp6s_canterror;u_quad_t icp6s_toofreq;u_quad_t icp6s_outhist[256];u_quad_t icp6s_badcode;u_quad_t icp6s_tooshort;u_quad_t icp6s_checksum;u_quad_t icp6s_badlen;u_quad_t icp6s_reflect;u_quad_t icp6s_inhist[256];u_quad_t icp6s_nd_toomanyopt;struct icmp6errstat icp6s_outerrhist;u_quad_t icp6s_pmtuchg;u_quad_t icp6s_nd_badopt;u_quad_t icp6s_badns;u_quad_t icp6s_badna;u_quad_t icp6s_badrs;u_quad_t icp6s_badra;u_quad_t icp6s_badredirect;};
union icmp::$115915189B36D486427C31680FC3CC99 {u_char ih_pptr;struct in_addr ih_gwaddr;struct icmp::$115915189B36D486427C31680FC3CC99::ih_idseq ih_idseq;int ih_void;struct icmp::$115915189B36D486427C31680FC3CC99::ih_pmtu ih_pmtu;struct icmp::$115915189B36D486427C31680FC3CC99::ih_rtradv ih_rtradv;};
struct icmp::$115915189B36D486427C31680FC3CC99::ih_idseq {n_short icd_id;n_short icd_seq;};
struct icmp::$115915189B36D486427C31680FC3CC99::ih_pmtu {n_short ipm_void;n_short ipm_nextmtu;};
struct icmp::$115915189B36D486427C31680FC3CC99::ih_rtradv {u_char irt_num_addrs;u_char irt_wpa;u_int16_t irt_lifetime;};
union icmp::$B8975A790A59AA025FBB0015D5EF41D8 {struct icmp::$B8975A790A59AA025FBB0015D5EF41D8::id_ts id_ts;struct icmp::$B8975A790A59AA025FBB0015D5EF41D8::id_ip id_ip;struct icmp_ra_addr id_radv;u_int32_t id_mask;char id_data[1];};
struct icmp::$B8975A790A59AA025FBB0015D5EF41D8::id_ip {struct ip idi_ip;};
struct icmp::$B8975A790A59AA025FBB0015D5EF41D8::id_ts {n_time its_otime;n_time its_rtime;n_time its_ttime;};
struct icmp_ra_addr {u_int32_t ira_addr;u_int32_t ira_preference;};
struct if_data {u_char ifi_type;u_char ifi_typelen;u_char ifi_physical;u_char ifi_addrlen;u_char ifi_hdrlen;u_char ifi_recvquota;u_char ifi_xmitquota;u_long ifi_mtu;u_long ifi_metric;u_long ifi_baudrate;u_long ifi_ipackets;u_long ifi_ierrors;u_long ifi_opackets;u_long ifi_oerrors;u_long ifi_collisions;u_long ifi_ibytes;u_long ifi_obytes;u_long ifi_imcasts;u_long ifi_omcasts;u_long ifi_iqdrops;u_long ifi_noproto;u_long ifi_recvtiming;u_long ifi_xmittiming;struct timeval ifi_lastchange;u_long default_proto;u_long ifi_hwassist;u_long ifi_reserved1;u_long ifi_reserved2;};
typedef void __fastcall if_init_f_t(void *);
struct if_laddrreq {char iflr_name[16];u_int flags;u_int prefixlen;struct sockaddr_storage addr;struct sockaddr_storage dstaddr;};
typedef u_int32_t if_mask;
struct if_msghdr {u_short ifm_msglen;u_char ifm_version;u_char ifm_type;int ifm_addrs;int ifm_flags;u_short ifm_index;struct if_data ifm_data;};
struct if_nameindex {u_int if_index;char *if_name;};
struct if_proto {struct if_proto::$5438172141D7D2C8747364963B42F7AA next;u_long dl_tag;struct dlil_filterq_head pr_flt_head;struct ifnet *ifp;dl_input_func dl_input;dl_pre_output_func dl_pre_output;dl_event_func dl_event;dl_offer_func dl_offer;dl_ioctl_func dl_ioctl;u_long protocol_family;u_long reserved[4];};
struct if_proto::$5438172141D7D2C8747364963B42F7AA {struct if_proto *tqe_next;struct if_proto **tqe_prev;};
struct if_set {if_mask ifs_bits[8];};
struct ifa_msghdr {u_short ifam_msglen;u_char ifam_version;u_char ifam_type;int ifam_addrs;int ifam_flags;u_short ifam_index;int ifam_metric;};
struct ifaddr {struct sockaddr *ifa_addr;struct sockaddr *ifa_dstaddr;struct sockaddr *ifa_netmask;struct ifnet *ifa_ifp;struct ifaddr::$95F323A3D46FA233E7BFF0346A52DEBE ifa_link;void (__fastcall *ifa_rtrequest)(int, struct rtentry *, struct sockaddr *);u_short ifa_flags;__int16 ifa_refcnt;int ifa_metric;u_long ifa_dlt;int (__fastcall *ifa_claim_addr)(struct ifaddr *, struct sockaddr *);};
struct ifaddr::$95F323A3D46FA233E7BFF0346A52DEBE {struct ifaddr *tqe_next;struct ifaddr **tqe_prev;};
struct ifaddrhead {struct ifaddr *tqh_first;struct ifaddr **tqh_last;};
struct ifaddrs {struct ifaddrs *ifa_next;char *ifa_name;u_int ifa_flags;struct sockaddr *ifa_addr;struct sockaddr *ifa_netmask;struct sockaddr *ifa_dstaddr;void *ifa_data;};
struct ifaliasreq {char ifra_name[16];struct sockaddr ifra_addr;struct sockaddr ifra_broadaddr;struct sockaddr ifra_mask;};
struct ifconf {int ifc_len;union ifconf::$28C87C5ACD364976D94B96E40062B553 ifc_ifcu;};
union ifconf::$28C87C5ACD364976D94B96E40062B553 {caddr_t ifcu_buf;struct ifreq *ifcu_req;};
struct ifma_msghdr {u_short ifmam_msglen;u_char ifmam_version;u_char ifmam_type;int ifmam_addrs;int ifmam_flags;u_short ifmam_index;};
struct ifmedia_description {int ifmt_word;const char *ifmt_string;};
struct ifmediareq {char ifm_name[16];int ifm_current;int ifm_mask;int ifm_status;int ifm_active;int ifm_count;int *ifm_ulist;};
struct ifmib_iso_8802_3 {u_int32_t dot3StatsAlignmentErrors;u_int32_t dot3StatsFCSErrors;u_int32_t dot3StatsSingleCollisionFrames;u_int32_t dot3StatsMultipleCollisionFrames;u_int32_t dot3StatsSQETestErrors;u_int32_t dot3StatsDeferredTransmissions;u_int32_t dot3StatsLateCollisions;u_int32_t dot3StatsExcessiveCollisions;u_int32_t dot3StatsInternalMacTransmitErrors;u_int32_t dot3StatsCarrierSenseErrors;u_int32_t dot3StatsFrameTooLongs;u_int32_t dot3StatsInternalMacReceiveErrors;u_int32_t dot3StatsEtherChipSet;u_int32_t dot3StatsMissedFrames;u_int32_t dot3StatsCollFrequencies[16];u_int32_t dot3Compliance;};
struct ifmibdata {char ifmd_name[16];int ifmd_pcount;int ifmd_flags;int ifmd_snd_len;int ifmd_snd_maxlen;int ifmd_snd_drops;int ifmd_filler[4];struct if_data ifmd_data;};
struct ifmultiaddr {struct ifmultiaddr::$CBD784EE338B5C610803B4C102DD4898 ifma_link;struct sockaddr *ifma_addr;struct sockaddr *ifma_lladdr;struct ifnet *ifma_ifp;u_int ifma_refcount;void *ifma_protospec;};
struct ifmultiaddr::$CBD784EE338B5C610803B4C102DD4898 {struct ifmultiaddr *le_next;struct ifmultiaddr **le_prev;};
struct ifmultihead {struct ifmultiaddr *lh_first;};
struct ifnet {void *if_softc;char *if_name;struct ifnet::$E8B38B62614D569AF932AD54DE5A1130 if_link;struct ifaddrhead if_addrhead;struct tailq_head proto_head;int if_pcount;struct bpf_if *if_bpf;u_short if_index;__int16 if_unit;__int16 if_timer;__int16 if_flags;int if_ipending;void *if_linkmib;size_t if_linkmiblen;struct if_data if_data;int refcnt;int offercnt;int (__fastcall *if_output)(struct ifnet *ifnet_ptr, struct mbuf *m);int (__fastcall *if_ioctl)(struct ifnet *ifnet_ptr, u_long ioctl_code, void *ioctl_arg);int (__fastcall *if_set_bpf_tap)(struct ifnet *ifp, int mode, int (__fastcall *bpf_callback)(struct ifnet *, struct mbuf *));int (__fastcall *if_free)(struct ifnet *ifnet_ptr);int (__fastcall *if_demux)(struct ifnet *ifnet_ptr, struct mbuf *mbuf_ptr, char *frame_ptr, void *if_proto_ptr);int (__fastcall *if_event)(struct ifnet *ifnet_ptr, caddr_t event_ptr);int (__fastcall *if_framer)(struct ifnet *ifp, struct mbuf **m, struct sockaddr *dest, char *dest_linkaddr, char *frame_type);u_long if_family;struct tailq_head if_flt_head;void *reserved0;void *if_private;int if_eflags;struct ifmultihead if_multiaddrs;int if_amcount;int (__fastcall *if_poll_recv)(struct ifnet *, int *);int (__fastcall *if_poll_xmit)(struct ifnet *, int *);void (__fastcall *if_poll_intren)(struct ifnet *);void (__fastcall *if_poll_slowinput)(struct ifnet *, struct mbuf *);void (__fastcall *if_init)(void *);int (__fastcall *if_resolvemulti)(struct ifnet *, struct sockaddr **, struct sockaddr *);struct ifqueue if_snd;struct ifqueue *if_poll_slowq;u_long family_cookie;struct ifprefixhead if_prefixhead;void *reserved1;};
struct ifnet::$E8B38B62614D569AF932AD54DE5A1130 {struct ifnet *tqe_next;struct ifnet **tqe_prev;};
struct ifnethead {struct ifnet *tqh_first;struct ifnet **tqh_last;};
struct ifprefix {struct sockaddr *ifpr_prefix;struct ifnet *ifpr_ifp;struct ifprefix::$C738960DD211EA4E2AA3FBC75D64F24F ifpr_list;u_char ifpr_plen;u_char ifpr_type;};
struct ifprefix::$C738960DD211EA4E2AA3FBC75D64F24F {struct ifprefix *tqe_next;struct ifprefix **tqe_prev;};
struct ifprefixhead {struct ifprefix *tqh_first;struct ifprefix **tqh_last;};
struct ifqueue {struct mbuf *ifq_head;struct mbuf *ifq_tail;int ifq_len;int ifq_maxlen;int ifq_drops;};
struct ifreq {char ifr_name[16];union ifreq::$F600065F369C5878C90ED01E7F7DA9D3 ifr_ifru;};
union ifreq::$F600065F369C5878C90ED01E7F7DA9D3 {struct sockaddr ifru_addr;struct sockaddr ifru_dstaddr;struct sockaddr ifru_broadaddr;__int16 ifru_flags;int ifru_metric;int ifru_mtu;int ifru_phys;int ifru_media;caddr_t ifru_data;};
struct ifstat {char ifs_name[16];char ascii[801];};
struct igmp {u_char igmp_type;u_char igmp_code;u_short igmp_cksum;struct in_addr igmp_group;};
struct igmpmsg {u_long unused1;u_long unused2;u_char im_msgtype;u_char im_mbz;u_char im_vif;u_char unused3;struct in_addr im_src;struct in_addr im_dst;};
struct in6_addr {union in6_addr::$BFBFCCADDD05360C33055DB9853C3B61 __u6_addr;};
union in6_addr::$BFBFCCADDD05360C33055DB9853C3B61 {u_int8_t __u6_addr8[16];u_int16_t __u6_addr16[8];u_int32_t __u6_addr32[4];};
struct in6_pktinfo {struct in6_addr ipi6_addr;unsigned int ipi6_ifindex;};
struct in_addr {in_addr_t s_addr;};
struct in_addr_4in6 {u_int32_t ia46_pad32[3];struct in_addr ia46_addr4;};
typedef u_int32_t in_addr_t;
typedef u_int16_t in_port_t;
typedef u_int16_t indx_t;
typedef u_int32_t ino_t;
typedef u_quad_t inp_gen_t;
struct inpcb {struct inpcb::$BC2BAEE4398C01B595100E1753C31A68 inp_hash;struct in_addr inp_faddr;struct in_addr inp_laddr;u_short inp_fport;u_short inp_lport;struct inpcb::$BC2BAEE4398C01B595100E1753C31A68 inp_list;caddr_t inp_ppcb;struct inpcbinfo *inp_pcbinfo;struct socket *inp_socket;u_char nat_owner;u_long nat_cookie;struct inpcb::$BC2BAEE4398C01B595100E1753C31A68 inp_portlist;struct inpcbport *inp_phd;inp_gen_t inp_gencnt;int inp_flags;u_int32_t inp_flow;u_char inp_vflag;u_char inp_ip_ttl;u_char inp_ip_p;union inpcb::$BD75B87EE766833A3DF9644C7FCC1E00 inp_dependfaddr;union inpcb::$61B649B2802E895728C8AA130C15F594 inp_dependladdr;union inpcb::$CE64C4D3C76361707848261979A80A25 inp_dependroute;struct inpcb::$30FAF605A80E9C94953FB3F74BC2D544 inp_depend4;struct inpcb::$E0327E262D2A41EC2E70311519F2F082 inp_depend6;int hash_element;caddr_t inp_saved_ppcb;struct inpcbpolicy *inp_sp;u_long reserved[3];};
struct inpcb::$30FAF605A80E9C94953FB3F74BC2D544 {u_char inp4_ip_tos;struct mbuf *inp4_options;struct ip_moptions *inp4_moptions;};
union inpcb::$61B649B2802E895728C8AA130C15F594 {struct in_addr_4in6 inp46_local;struct in6_addr inp6_local;};
struct inpcb::$BC2BAEE4398C01B595100E1753C31A68 {struct inpcb *le_next;struct inpcb **le_prev;};
union inpcb::$BD75B87EE766833A3DF9644C7FCC1E00 {struct in_addr_4in6 inp46_foreign;struct in6_addr inp6_foreign;};
union inpcb::$CE64C4D3C76361707848261979A80A25 {struct route inp4_route;struct route_in6 inp6_route;};
struct inpcb::$E0327E262D2A41EC2E70311519F2F082 {struct mbuf *inp6_options;u_int8_t inp6_hlim;u_int8_t unused_uint8_1;ushort unused_uint16_1;struct ip6_pktopts *inp6_outputopts;struct ip6_moptions *inp6_moptions;struct icmp6_filter *inp6_icmp6filt;int inp6_cksum;u_short inp6_ifindex;__int16 inp6_hops;};
struct inpcbhead {struct inpcb *lh_first;};
struct inpcbinfo {struct inpcbhead *hashbase;u_long hashsize;u_long hashmask;struct inpcbporthead *porthashbase;u_long porthashmask;struct inpcbhead *listhead;u_short lastport;u_short lastlow;u_short lasthi;void *ipi_zone;u_int ipi_count;u_quad_t ipi_gencnt;u_char all_owners;struct socket nat_dummy_socket;struct inpcb *last_pcb;caddr_t dummy_cb;};
struct inpcbport {struct inpcbport::$E8523F328B31E226CC0E86B8D7CD3984 phd_hash;struct inpcbhead phd_pcblist;u_short phd_port;};
struct inpcbport::$E8523F328B31E226CC0E86B8D7CD3984 {struct inpcbport *le_next;struct inpcbport **le_prev;};
struct inpcbporthead {struct inpcbport *lh_first;};
typedef __int16 int16_t;
typedef int int32_t;
typedef __int64 int64_t;
typedef signed __int8 int8_t;
typedef int16_t int_fast16_t;
typedef int32_t int_fast32_t;
typedef int64_t int_fast64_t;
typedef int8_t int_fast8_t;
typedef int16_t int_least16_t;
typedef int32_t int_least32_t;
typedef int64_t int_least64_t;
typedef int8_t int_least8_t;
typedef int integer_t;
typedef __int64 intmax_t;
typedef int intptr_t;
typedef char *io_buf_ptr_t;
typedef mach_port_t io_master_t;
typedef struct $8CA3E71BB34925FD9C275170CC27C0FB ioc_t;
typedef struct $D71B1BBFA8F5F0E20ADE066C27DF34A3 ioccmd_t;
typedef int __fastcall ioctl_fcn_t(dev_t dev, u_long cmd, caddr_t data, int fflag, struct proc *p);
struct iovec {char *iov_base;size_t iov_len;};
struct ip {unsigned __int32 ip_v : 4;unsigned __int32 ip_hl : 4;u_char ip_tos;u_short ip_len;u_short ip_id;u_short ip_off;u_char ip_ttl;u_char ip_p;u_short ip_sum;struct in_addr ip_src;struct in_addr ip_dst;};
struct ip6_dest {u_int8_t ip6d_nxt;u_int8_t ip6d_len;};
struct ip6_ext {u_int8_t ip6e_nxt;u_int8_t ip6e_len;};
struct ip6_frag {u_int8_t ip6f_nxt;u_int8_t ip6f_reserved;u_int16_t ip6f_offlg;u_int32_t ip6f_ident;};
struct ip6_hbh {u_int8_t ip6h_nxt;u_int8_t ip6h_len;};
struct ip6_hdr {union ip6_hdr::$55051B7F048FF6C7BE508169AD51FCBE ip6_ctlun;struct in6_addr ip6_src;struct in6_addr ip6_dst;};
union ip6_hdr::$55051B7F048FF6C7BE508169AD51FCBE {struct ip6_hdr::$55051B7F048FF6C7BE508169AD51FCBE::ip6_hdrctl ip6_un1;u_int8_t ip6_un2_vfc;};
struct ip6_hdr::$55051B7F048FF6C7BE508169AD51FCBE::ip6_hdrctl {u_int32_t ip6_un1_flow;u_int16_t ip6_un1_plen;u_int8_t ip6_un1_nxt;u_int8_t ip6_un1_hlim;};
struct ip6_rthdr {u_int8_t ip6r_nxt;u_int8_t ip6r_len;u_int8_t ip6r_type;u_int8_t ip6r_segleft;};
struct ip6_rthdr0 {u_int8_t ip6r0_nxt;u_int8_t ip6r0_len;u_int8_t ip6r0_type;u_int8_t ip6r0_segleft;u_int8_t ip6r0_reserved;u_int8_t ip6r0_slmap[3];struct in6_addr ip6r0_addr[1];};
struct ip6ctlparam {struct mbuf *ip6c_m;struct icmp6_hdr *ip6c_icmp6;struct ip6_hdr *ip6c_ip6;int ip6c_off;struct sockaddr_in6 *ip6c_src;struct sockaddr_in6 *ip6c_dst;struct in6_addr *ip6c_finaldst;void *ip6c_cmdarg;u_int8_t ip6c_nxt;};
struct ip6protosw {__int16 pr_type;struct domain *pr_domain;__int16 pr_protocol;unsigned int pr_flags;int (__fastcall *pr_input)(struct mbuf **, int *);int (__fastcall *pr_output)(struct mbuf *m, struct socket *so, struct sockaddr_in6 *, struct mbuf *);void (__fastcall *pr_ctlinput)(int, struct sockaddr *, struct ip6_hdr *, struct mbuf *, int);int (__fastcall *pr_ctloutput)(struct socket *, struct sockopt *);int (__fastcall *pr_usrreq)(struct socket *, int, struct mbuf *, struct mbuf *, struct mbuf *, struct proc *);void (*pr_init)(void);void (*pr_fasttimo)(void);void (*pr_slowtimo)(void);void (*pr_drain)(void);int (__fastcall *pr_sysctl)();struct pr_usrreqs *pr_usrreqs;struct ip6protosw::pr6_sfilter pr_sfilter;struct ip6protosw *pr_next;u_long reserved[4];};
struct ip6protosw::pr6_sfilter {struct NFDescriptor *tqh_first;struct NFDescriptor **tqh_last;};
struct ip_addr_t {char net;char host;char lh;char impno;};
struct ip_fw {u_int32_t version;void *context;u_int64_t fw_pcnt;u_int64_t fw_bcnt;struct in_addr fw_src;struct in_addr fw_dst;struct in_addr fw_smsk;struct in_addr fw_dmsk;u_short fw_number;u_int fw_flg;union ip_fw::$D2992A5F5D33011E3904B0E03FB51B75 fw_uar;u_int fw_ipflg;u_char fw_ipopt;u_char fw_ipnopt;u_char fw_tcpopt;u_char fw_tcpnopt;u_char fw_tcpf;u_char fw_tcpnf;int timestamp;union ip_fw_if fw_in_if;union ip_fw_if fw_out_if;union ip_fw::$3357A03372067088D3DFB70D787A361D fw_un;u_char fw_prot;u_char fw_nports;void *pipe_ptr;void *next_rule_ptr;uid_t fw_uid;int fw_logamount;u_int64_t fw_loghighest;};
union ip_fw::$3357A03372067088D3DFB70D787A361D {u_short fu_divert_port;u_short fu_pipe_nr;u_short fu_skipto_rule;u_short fu_reject_code;struct sockaddr_in fu_fwd_ip;};
union ip_fw::$D2992A5F5D33011E3904B0E03FB51B75 {u_short fw_pts[10];unsigned int fw_icmptypes[4];};
struct ip_fw_chain {struct ip_fw_chain::$CA51C2CC6EE8EA27553B0969BA8F9377 next;struct ip_fw *rule;};
struct ip_fw_chain::$CA51C2CC6EE8EA27553B0969BA8F9377 {struct ip_fw_chain *le_next;struct ip_fw_chain **le_prev;};
struct ip_fw_ext {struct ip_fw rule;int dont_match_prob;u_int dyn_type;};
union ip_fw_if {struct in_addr fu_via_ip;struct ip_fw_if::$678FDBD0B28E415F8AE426F3A22D3224 fu_via_if;};
struct ip_fw_if::$678FDBD0B28E415F8AE426F3A22D3224 {char name[10];__int16 unit;};
struct ip_mreq {struct in_addr imr_multiaddr;struct in_addr imr_interface;};
struct ip_opts {struct in_addr ip_dst;char ip_opts[40];};
struct ip_timestamp {u_char ipt_code;u_char ipt_len;u_char ipt_ptr;unsigned __int32 ipt_oflw : 4;unsigned __int32 ipt_flg : 4;union ip_timestamp::ipt_timestamp ipt_timestamp;};
union ip_timestamp::ipt_timestamp {n_long ipt_time[1];struct ip_timestamp::ipt_timestamp::ipt_ta ipt_ta[1];};
struct ip_timestamp::ipt_timestamp::ipt_ta {struct in_addr ipt_addr;n_long ipt_time;};
struct ipc_info_name {mach_port_name_t iin_name;integer_t iin_collision;mach_port_type_t iin_type;mach_port_urefs_t iin_urefs;vm_offset_t iin_object;natural_t iin_next;natural_t iin_hash;};
typedef ipc_info_name_t *ipc_info_name_array_t;
typedef struct ipc_info_name ipc_info_name_t;
struct ipc_info_space {natural_t iis_genno_mask;natural_t iis_table_size;natural_t iis_table_next;natural_t iis_tree_size;natural_t iis_tree_small;natural_t iis_tree_hash;};
typedef struct ipc_info_space ipc_info_space_t;
struct ipc_info_tree_name {ipc_info_name_t iitn_name;mach_port_name_t iitn_lchild;mach_port_name_t iitn_rchild;};
typedef ipc_info_tree_name_t *ipc_info_tree_name_array_t;
typedef struct ipc_info_tree_name ipc_info_tree_name_t;
struct ipc_perm {ushort cuid;ushort cgid;ushort uid;ushort gid;ushort mode;ushort seq;key_t key;};
typedef ipc_space_t ipc_space_port_t;
typedef mach_port_t ipc_space_t;
struct ipcomp {u_int8_t comp_nxt;u_int8_t comp_flags;u_int16_t comp_cpi;};
struct ipfw_dyn_rule {struct ipfw_dyn_rule *next;struct ipfw_flow_id id;struct ipfw_flow_id mask;struct ip_fw_chain *chain;u_int32_t type;u_int32_t expire;u_int64_t pcnt;u_int64_t bcnt;u_int32_t bucket;u_int32_t state;};
struct ipfw_flow_id {u_int32_t dst_ip;u_int32_t src_ip;u_int16_t dst_port;u_int16_t src_port;u_int8_t proto;u_int8_t flags;};
struct ipsecstat {u_quad_t in_success;u_quad_t in_polvio;u_quad_t in_nosa;u_quad_t in_inval;u_quad_t in_nomem;u_quad_t in_badspi;u_quad_t in_ahreplay;u_quad_t in_espreplay;u_quad_t in_ahauthsucc;u_quad_t in_ahauthfail;u_quad_t in_espauthsucc;u_quad_t in_espauthfail;u_quad_t in_esphist[256];u_quad_t in_ahhist[256];u_quad_t in_comphist[256];u_quad_t out_success;u_quad_t out_polvio;u_quad_t out_nosa;u_quad_t out_inval;u_quad_t out_nomem;u_quad_t out_noroute;u_quad_t out_esphist[256];u_quad_t out_ahhist[256];u_quad_t out_comphist[256];};
struct ipv6_mreq {struct in6_addr ipv6mr_multiaddr;unsigned int ipv6mr_interface;};
struct itimerval {struct timeval it_interval;struct timeval it_value;};
typedef int jmp_buf[192];
struct kern_event_msg {u_long total_size;u_long vendor_code;u_long kev_class;u_long kev_subclass;u_long id;u_long event_code;u_long event_data[1];};
typedef int kern_return_t;
typedef char kernel_boot_info_t[4096];
struct kernel_resource_sizes {vm_size_t task;vm_size_t thread;vm_size_t port;vm_size_t memory_region;vm_size_t memory_object;};
typedef struct kernel_resource_sizes kernel_resource_sizes_data_t;
typedef struct kernel_resource_sizes *kernel_resource_sizes_t;
typedef char kernel_version_t[512];
struct kev_dl_proto_data {struct net_event_data link_data;u_long proto_family;u_long proto_remaining_count;};
struct kev_request {u_long vendor_code;u_long kev_class;u_long kev_subclass;};
struct kextcb {struct kextcb *e_next;void *e_fcb;struct NFDescriptor *e_nfd;struct sockif *e_soif;struct sockutil *e_sout;};
typedef int (__fastcall *key_proc_type)(char *, char *, char *, char *, des_cblock);
typedef int key_t;
typedef struct $5EDD4B4F882E321F07D8AFF023DDDD7D keydat;
struct kinfo_proc {struct extern_proc kp_proc;struct kinfo_proc::eproc kp_eproc;};
struct kinfo_proc::eproc {struct proc *e_paddr;struct session *e_sess;struct pcred e_pcred;struct ucred e_ucred;struct vmspace e_vm;pid_t e_ppid;pid_t e_pgid;__int16 e_jobc;dev_t e_tdev;pid_t e_tpgid;struct session *e_tsess;char e_wmesg[8];segsz_t e_xsize;__int16 e_xrssize;__int16 e_xccount;__int16 e_xswrss;int e_flag;char e_login[12];int e_spare[4];};
struct klm_holder {int exclusive;int svid;u_int l_offset;u_int l_len;};
struct klm_lock {char *server_name;netobj fh;int pid;u_int l_offset;u_int l_len;};
struct klm_lockargs {int block;int exclusive;struct klm_lock alock;};
struct klm_stat {klm_stats stat;};
enum klm_stats {klm_granted = 0x0,klm_denied = 0x1,klm_denied_nolocks = 0x2,klm_working = 0x3,};
struct klm_testargs {int exclusive;struct klm_lock alock;};
struct klm_testrply {klm_stats stat;union klm_testrply::$40F9D261D31BF2147C1606393BAB8476 klm_testrply_u;};
union klm_testrply::$40F9D261D31BF2147C1606393BAB8476 {struct klm_holder holder;};
struct klm_unlockargs {struct klm_lock alock;};
struct kmemstats {int ks_inuse;int ks_calls;int ks_memuse;u_short ks_limblocks;u_short ks_mapblocks;int ks_maxused;int ks_limit;int ks_size;int ks_spare;};
typedef void *kmod_args_t;
typedef int kmod_control_flavor_t;
struct kmod_generic_cmd {int type;char data[1];};
typedef struct kmod_generic_cmd kmod_generic_cmd_t;
struct kmod_info {struct kmod_info *next;int info_version;int id;char name[64];char version[64];int reference_count;kmod_reference_t *reference_list;vm_address_t address;vm_size_t size;vm_size_t hdr_size;kmod_start_func_t *start;kmod_stop_func_t *stop;};
typedef kmod_info_t *kmod_info_array_t;
typedef struct kmod_info kmod_info_t;
struct kmod_load_extension_cmd {int type;char name[64];};
typedef struct kmod_load_extension_cmd kmod_load_extension_cmd_t;
struct kmod_load_with_dependencies_cmd {int type;char name[64];char dependencies[1][64];};
typedef struct kmod_load_with_dependencies_cmd kmod_load_with_dependencies_cmd_t;
struct kmod_reference {struct kmod_reference *next;struct kmod_info *info;};
typedef struct kmod_reference kmod_reference_t;
typedef kern_return_t __fastcall kmod_start_func_t(struct kmod_info *ki, void *data);
typedef kern_return_t __fastcall kmod_stop_func_t(struct kmod_info *ki, void *data);
typedef int kmod_t;
typedef struct _krb5_address krb5_address;
typedef krb5_int32 krb5_addrtype;
typedef struct _krb5_ap_rep krb5_ap_rep;
typedef struct _krb5_ap_rep_enc_part krb5_ap_rep_enc_part;
typedef struct _krb5_ap_req krb5_ap_req;
typedef struct _krb5_auth_context *krb5_auth_context;
typedef struct _krb5_authdata krb5_authdata;
typedef krb5_int32 krb5_authdatatype;
typedef struct _krb5_authenticator krb5_authenticator;
typedef unsigned int krb5_boolean;
typedef krb5_pointer krb5_cc_cursor;
typedef struct _krb5_cc_ops krb5_cc_ops;
typedef struct _krb5_ccache *krb5_ccache;
typedef struct _krb5_checksum krb5_checksum;
typedef krb5_int32 krb5_cksumtype;
typedef const void *krb5_const_pointer;
typedef const krb5_principal_data *krb5_const_principal;
typedef struct _krb5_context *krb5_context;
typedef struct _krb5_cred krb5_cred;
typedef struct _krb5_cred_enc_part krb5_cred_enc_part;
typedef struct _krb5_cred_info krb5_cred_info;
typedef struct _krb5_creds krb5_creds;
typedef struct _krb5_data krb5_data;
typedef krb5_int32 krb5_deltat;
typedef struct _krb5_enc_data krb5_enc_data;
typedef struct _krb5_enc_kdc_rep_part krb5_enc_kdc_rep_part;
typedef struct _krb5_enc_tkt_part krb5_enc_tkt_part;
typedef struct _krb5_encrypt_block krb5_encrypt_block;
typedef krb5_int32 krb5_enctype;
typedef struct _krb5_error krb5_error;
typedef krb5_int32 krb5_error_code;
typedef krb5_int32 krb5_flags;
typedef struct _krb5_get_init_creds_opt krb5_get_init_creds_opt;
typedef __int16 krb5_int16;
typedef int krb5_int32;
typedef struct _krb5_kdc_rep krb5_kdc_rep;
typedef struct _krb5_kdc_req krb5_kdc_req;
typedef struct _krb5_keyblock krb5_keyblock;
typedef struct _krb5_kt *krb5_keytab;
typedef struct krb5_keytab_entry_st krb5_keytab_entry;
struct krb5_keytab_entry_st {krb5_magic magic;krb5_principal principal;krb5_timestamp timestamp;krb5_kvno vno;krb5_keyblock key;};
typedef krb5_int32 krb5_keyusage;
typedef krb5_pointer krb5_kt_cursor;
typedef unsigned int krb5_kvno;
typedef struct _krb5_last_req_entry krb5_last_req_entry;
typedef krb5_error_code krb5_magic;
typedef unsigned int krb5_msgtype;
typedef unsigned __int8 krb5_octet;
typedef struct _krb5_pa_data krb5_pa_data;
typedef void *krb5_pointer;
typedef krb5_int32 krb5_preauthtype;
typedef krb5_principal_data *krb5_principal;
struct krb5_principal_data {krb5_magic magic;krb5_data realm;krb5_data *data;krb5_int32 length;krb5_int32 type;};
typedef struct _krb5_prompt krb5_prompt;
typedef krb5_int32 krb5_prompt_type;
typedef krb5_error_code (__fastcall *krb5_prompter_fct)(krb5_context context, void *data, const char *name, const char *banner, int num_prompts, krb5_prompt prompts[]);
typedef struct _krb5_pwd_data krb5_pwd_data;
struct krb5_rc_st;
typedef struct krb5_rc_st *krb5_rcache;
struct krb5_replay_data {krb5_timestamp timestamp;krb5_int32 usec;krb5_int32 seq;};
typedef struct _krb5_response krb5_response;
typedef struct _krb5_ticket krb5_ticket;
typedef struct _krb5_ticket_times krb5_ticket_times;
typedef krb5_int32 krb5_timestamp;
typedef struct _krb5_tkt_authent krb5_tkt_authent;
typedef struct _krb5_transited krb5_transited;
typedef unsigned __int8 krb5_ui_1;
typedef unsigned __int16 krb5_ui_2;
typedef unsigned int krb5_ui_4;
typedef struct _krb5_verify_init_creds_opt krb5_verify_init_creds_opt;
struct ktext {int length;unsigned __int8 dat[1250];unsigned int mbz;};
struct ktr_csw {int out;int user;};
struct ktr_genio {int ktr_fd;enum uio_rw ktr_rw;};
struct ktr_header {int ktr_len;__int16 ktr_type;pid_t ktr_pid;char ktr_comm[17];struct timeval ktr_time;caddr_t ktr_buf;};
struct ktr_psig {int signo;sig_t action;int code;sigset_t mask;};
struct ktr_syscall {__int16 ktr_code;__int16 ktr_narg;register_t ktr_args[1];};
struct ktr_sysret {__int16 ktr_code;__int16 ktr_eosys;int ktr_error;register_t ktr_retval;};
typedef struct __kvm kvm_t;
struct label_t {int val[59];};
struct lastlog {time_t ll_time;char ll_line[8];char ll_host[16];};
struct lber_memory_fns {BER_MEMALLOC_FN bmf_malloc;BER_MEMCALLOC_FN bmf_calloc;BER_MEMREALLOC_FN bmf_realloc;BER_MEMFREE_FN bmf_free;};
struct lconv {char *decimal_point;char *thousands_sep;char *grouping;char *int_curr_symbol;char *currency_symbol;char *mon_decimal_point;char *mon_thousands_sep;char *mon_grouping;char *positive_sign;char *negative_sign;char int_frac_digits;char frac_digits;char p_cs_precedes;char p_sep_by_space;char n_cs_precedes;char n_sep_by_space;char p_sign_posn;char n_sign_posn;};
struct ldap;
struct ldap_apifeature_info {int ldapaif_info_version;char *ldapaif_name;int ldapaif_version;};
struct ldap_attributetype {char *at_oid;char **at_names;char *at_desc;int at_obsolete;char *at_sup_oid;char *at_equality_oid;char *at_ordering_oid;char *at_substr_oid;char *at_syntax_oid;int at_syntax_len;int at_single_value;int at_collective;int at_no_user_mod;int at_usage;LDAPSchemaExtensionItem **at_extensions;};
struct ldap_ava {struct berval la_attr;struct berval la_value;unsigned int la_flags;void *la_private;};
struct ldap_filt_desc {LDAPFiltList *lfd_filtlist;LDAPFiltInfo *lfd_curfip;LDAPFiltInfo lfd_retfi;char lfd_filter[1024];char *lfd_curval;char *lfd_curvalcopy;char **lfd_curvalwords;char *lfd_filtprefix;char *lfd_filtsuffix;};
struct ldap_filt_info {char *lfi_filter;char *lfi_desc;int lfi_scope;int lfi_isexact;struct ldap_filt_info *lfi_next;};
struct ldap_filt_list {char *lfl_tag;char *lfl_pattern;char *lfl_delims;LDAPFiltInfo *lfl_ilist;struct ldap_filt_list *lfl_next;};
struct ldap_matchingrule {char *mr_oid;char **mr_names;char *mr_desc;int mr_obsolete;char *mr_syntax_oid;LDAPSchemaExtensionItem **mr_extensions;};
struct ldap_matchingruleuse {char *mru_oid;char **mru_names;char *mru_desc;int mru_obsolete;char **mru_applies_oids;LDAPSchemaExtensionItem **mru_extensions;};
struct ldap_objectclass {char *oc_oid;char **oc_names;char *oc_desc;int oc_obsolete;char **oc_sup_oids;int oc_kind;char **oc_at_oids_must;char **oc_at_oids_may;LDAPSchemaExtensionItem **oc_extensions;};
struct ldap_schema_extension_item {char *lsei_name;char **lsei_values;};
struct ldap_syntax {char *syn_oid;char **syn_names;char *syn_desc;LDAPSchemaExtensionItem **syn_extensions;};
typedef ber_int_t ldap_ucs4_t;
struct ldap_url_desc {struct ldap_url_desc *lud_next;char *lud_scheme;char *lud_host;int lud_port;char *lud_dn;char **lud_attrs;int lud_scope;char *lud_filter;char **lud_exts;int lud_crit_exts;};
struct ldapapiinfo {int ldapai_info_version;int ldapai_api_version;int ldapai_protocol_version;char **ldapai_extensions;char *ldapai_vendor_name;int ldapai_vendor_version;};
struct ldapcontrol {char *ldctl_oid;struct berval ldctl_value;char ldctl_iscritical;};
struct ldapmod {int mod_op;char *mod_type;union ldapmod::mod_vals_u mod_vals;};
union ldapmod::mod_vals_u {char **modv_strvals;struct berval **modv_bvals;};
struct ldapmsg;
struct ldapsortkey {char *attributeType;char *orderingRule;int reverseOrder;};
struct ldapvlvinfo {int ldvlv_version;unsigned int ldvlv_before_count;unsigned int ldvlv_after_count;unsigned int ldvlv_offset;unsigned int ldvlv_count;struct berval *ldvlv_attrvalue;struct berval *ldvlv_context;void *ldvlv_extradata;};
struct ldat;
typedef struct $979FA3DE6ECCF956231BFC297C4278E6 ldiv_t;
typedef ledger_t *ledger_array_t;
typedef integer_t ledger_item_t;
typedef ledger_array_t ledger_port_array_t;
typedef ledger_t ledger_port_t;
typedef mach_port_t ledger_t;
struct lineinfo {const char *buffer;const char *cursor;const char *lastchar;};
struct linesw {int (__fastcall *l_open)(dev_t dev, struct tty *tp);int (__fastcall *l_close)(struct tty *tp, int flags);int (__fastcall *l_read)(struct tty *tp, struct uio *uio, int flag);int (__fastcall *l_write)(struct tty *tp, struct uio *uio, int flag);int (__fastcall *l_ioctl)(struct tty *tp, u_long cmd, caddr_t data, int flag, struct proc *p);int (__fastcall *l_rint)(int c, struct tty *tp);int (__fastcall *l_start)(struct tty *tp);int (__fastcall *l_modem)(struct tty *tp, int flag);};
struct linger {int l_onoff;int l_linger;};
struct linker_set {int ls_length;const void *ls_items[1];};
struct llc {u_char llc_dsap;u_char llc_ssap;union llc::$E89C64E4B73E4F81DD37F916E4543C0A llc_un;};
struct llc::$::$EA248D4A4A76ADDF5EC9D087FDEF58E9::frmrinfo {u_char rej_pdu_0;u_char rej_pdu_1;u_char frmr_control;u_char frmr_control_ext;u_char frmr_cause;};
union llc::$E89C64E4B73E4F81DD37F916E4543C0A {struct llc::$E89C64E4B73E4F81DD37F916E4543C0A::$32860B554A91BDC80AFE773E3B1D83F4 type_u;struct llc::$E89C64E4B73E4F81DD37F916E4543C0A::$029AB92B999B371AF6AE32CE328A08E3 type_i;struct llc::$E89C64E4B73E4F81DD37F916E4543C0A::$D619825BBD89C59DD7E12ADA974C8102 type_s;struct llc::$E89C64E4B73E4F81DD37F916E4543C0A::$EA248D4A4A76ADDF5EC9D087FDEF58E9 type_frmr;struct llc::$E89C64E4B73E4F81DD37F916E4543C0A::$715722D32E6D0E046A2311D964D93C44 type_snap;struct llc::$E89C64E4B73E4F81DD37F916E4543C0A::$105C79512A8985EC4BABB9B577C80F01 type_raw;};
struct llc::$E89C64E4B73E4F81DD37F916E4543C0A::$029AB92B999B371AF6AE32CE328A08E3 {u_char num_snd_x2;u_char num_rcv_x2;};
struct llc::$E89C64E4B73E4F81DD37F916E4543C0A::$105C79512A8985EC4BABB9B577C80F01 {u_char control;u_char control_ext;};
struct llc::$E89C64E4B73E4F81DD37F916E4543C0A::$32860B554A91BDC80AFE773E3B1D83F4 {u_char control;u_char format_id;u_char c_class;u_char window_x2;};
struct llc::$E89C64E4B73E4F81DD37F916E4543C0A::$715722D32E6D0E046A2311D964D93C44 {u_char control;u_char org_code[3];u_short ether_type;};
struct llc::$E89C64E4B73E4F81DD37F916E4543C0A::$D619825BBD89C59DD7E12ADA974C8102 {u_char control;u_char num_rcv_x2;};
struct llc::$E89C64E4B73E4F81DD37F916E4543C0A::$EA248D4A4A76ADDF5EC9D087FDEF58E9 {u_char control;struct llc::$::$EA248D4A4A76ADDF5EC9D087FDEF58E9::frmrinfo frmrinfo;};
typedef struct $A463688F15197DAD8463801EB7AB0BB4 llc_header_t;
struct loadavg {fixpt_t ldavg[3];int fscale;};
struct loader_info {int format;vm_offset_t text_start;vm_size_t text_size;vm_offset_t text_offset;vm_offset_t data_start;vm_size_t data_size;vm_offset_t data_offset;vm_size_t bss_size;vm_offset_t str_offset;vm_size_t str_size;vm_offset_t sym_offset[4];vm_size_t sym_size[4];vm_offset_t entry_1;vm_offset_t entry_2;};
struct lock__bsd__ {simple_lock_data_t lk_interlock;u_int lk_flags;int lk_sharecount;int lk_waitcount;__int16 lk_exclusivecount;__int16 lk_prio;char *lk_wmesg;int lk_timo;pid_t lk_lockholder;void *lk_lockthread;};
typedef lock_set_t lock_set_port_t;
typedef mach_port_t lock_set_t;
struct lockf {__int16 lf_flags;__int16 lf_type;off_t lf_start;off_t lf_end;caddr_t lf_id;struct lockf **lf_head;struct lockf *lf_next;struct lockf *lf_block;};
struct log2phys {u_int32_t l2p_flags;off_t l2p_contigbytes;off_t l2p_devoffset;};
typedef log_rec_t *log_ptr_t;
typedef struct $D46FD31F651800D10C39109ADB122EE5 log_rec_t;
struct ltchars {char t_suspc;char t_dsuspc;char t_rprntc;char t_flushc;char t_werasc;char t_lnextc;};
struct m_ext {caddr_t ext_buf;void (__fastcall *ext_free)();u_int ext_size;caddr_t ext_arg;struct m_ext::ext_refsq ext_refs;};
struct m_ext::ext_refsq {struct ext_refsq *forward;struct ext_refsq *backward;};
struct m_hdr {struct mbuf *mh_next;struct mbuf *mh_nextpkt;int mh_len;caddr_t mh_data;__int16 mh_type;__int16 mh_flags;};
typedef struct $211858A17FC3AA3AF7FB370462C716CC mach_dead_name_notification_t;
typedef mach_error_t (*mach_error_fn_t)(void);
typedef kern_return_t mach_error_t;
typedef struct $466E19AC50622C269D9BCEE6753F9E61 mach_msg_base_t;
typedef unsigned int mach_msg_bits_t;
typedef struct $E97267E034E71568AADDE042A76192B8 mach_msg_body_t;
typedef unsigned int mach_msg_copy_options_t;
typedef union $94CB200B36B7778DB0012FD0C2F25E9C mach_msg_descriptor_t;
typedef unsigned int mach_msg_descriptor_type_t;
typedef struct $9AA8814A56848052027B4042AE3CFED4 mach_msg_empty_rcv_t;
typedef struct $15CE29027F05B8BB8B125DB29B7163BF mach_msg_empty_send_t;
typedef union $2345F6273F81C99369AD5C0E36D3FD0F mach_msg_empty_t;
typedef mach_msg_security_trailer_t mach_msg_format_0_trailer_t;
typedef struct $71210C31999B47ECFCA79A4496892A9D mach_msg_header_t;
typedef integer_t mach_msg_id_t;
typedef struct $0FB16B1A38E2E40FBD3F3EF96804B817 mach_msg_ool_descriptor_t;
typedef struct $0077D5C34ADF0F1ACF745598F18E4EA6 mach_msg_ool_ports_descriptor_t;
typedef integer_t mach_msg_option_t;
typedef integer_t mach_msg_options_t;
typedef struct $BAA0E1D2BF5986DFAC16C10809EF9355 mach_msg_port_descriptor_t;
typedef kern_return_t mach_msg_return_t;
typedef struct $5694E020026D0F35B79D3FDB301355DE mach_msg_security_trailer_t;
typedef struct $E0DB54FB1236B40874C7451A4BD28FF5 mach_msg_seqno_trailer_t;
typedef natural_t mach_msg_size_t;
typedef natural_t mach_msg_timeout_t;
typedef unsigned int mach_msg_trailer_size_t;
typedef struct $F105F10DE5C66ECF2E7E726999936688 mach_msg_trailer_t;
typedef unsigned int mach_msg_trailer_type_t;
typedef struct $3CE6EFCC61EAE53AE9BFA212F91A7D13 mach_msg_type_descriptor_t;
typedef unsigned int mach_msg_type_name_t;
typedef natural_t mach_msg_type_number_t;
typedef natural_t mach_msg_type_size_t;
typedef struct $8BAB52A5AF78D0C10584D69C8CD7C023 mach_no_senders_notification_t;
typedef port_t *mach_port_array_t;
typedef struct $211858A17FC3AA3AF7FB370462C716CC mach_port_deleted_notification_t;
typedef integer_t mach_port_delta_t;
typedef struct $2204D4BF90F99AB14C1563C90305E530 mach_port_destroyed_notification_t;
typedef int mach_port_flavor_t;
typedef integer_t *mach_port_info_t;
struct mach_port_limits {mach_port_msgcount_t mpl_qlimit;};
typedef struct mach_port_limits mach_port_limits_t;
typedef natural_t mach_port_mscount_t;
typedef natural_t mach_port_msgcount_t;
typedef mach_port_name_t *mach_port_name_array_t;
typedef port_name_t mach_port_name_t;
struct mach_port_qos {__int32 name : 1;__int32 prealloc : 1;__int32 pad1 : 30;natural_t len;};
typedef struct mach_port_qos mach_port_qos_t;
typedef natural_t mach_port_right_t;
typedef natural_t mach_port_rights_t;
typedef natural_t mach_port_seqno_t;
typedef unsigned int mach_port_srights_t;
struct mach_port_status {mach_port_name_t mps_pset;mach_port_seqno_t mps_seqno;mach_port_mscount_t mps_mscount;mach_port_msgcount_t mps_qlimit;mach_port_msgcount_t mps_msgcount;mach_port_rights_t mps_sorights;boolean_t mps_srights;boolean_t mps_pdrequest;boolean_t mps_nsrequest;unsigned int mps_flags;};
typedef struct mach_port_status mach_port_status_t;
typedef port_t mach_port_t;
typedef mach_port_type_t *mach_port_type_array_t;
typedef natural_t mach_port_type_t;
typedef natural_t mach_port_urefs_t;
typedef struct $AAF01D1DF014C088EF592F6E4410D618 mach_send_once_notification_t;
struct mach_timebase_info {uint32_t numer;uint32_t denom;};
typedef struct mach_timebase_info mach_timebase_info_data_t;
typedef struct mach_timebase_info *mach_timebase_info_t;
struct mach_timespec {unsigned int tv_sec;clock_res_t tv_nsec;};
typedef struct mach_timespec mach_timespec_t;
struct machine_info {integer_t major_version;integer_t minor_version;integer_t max_cpus;integer_t avail_cpus;vm_size_t memory_size;};
typedef struct machine_info machine_info_data_t;
typedef struct machine_info *machine_info_t;
typedef char *mapname;
struct mapped_time_value {integer_t seconds;integer_t microseconds;integer_t check_seconds;};
typedef struct mapped_time_value mapped_time_value_t;
struct mauxtag {int af;int type;};
struct mbstat {u_long m_mbufs;u_long m_clusters;u_long m_spare;u_long m_clfree;u_long m_drops;u_long m_wait;u_long m_drain;u_short m_mtypes[256];u_long m_mcfail;u_long m_mpfail;u_long m_msize;u_long m_mclbytes;u_long m_minclsize;u_long m_mlen;u_long m_mhlen;};
struct mbuf {struct m_hdr m_hdr;union mbuf::$619ED16E75D119A840C24D194F5A4313 M_dat;};
union mbuf::$619ED16E75D119A840C24D194F5A4313 {struct mbuf::$619ED16E75D119A840C24D194F5A4313::$2780F1E20D10428A35714AECB35AF484 MH;char M_databuf[236];};
struct mbuf::$619ED16E75D119A840C24D194F5A4313::$2780F1E20D10428A35714AECB35AF484 {struct pkthdr MH_pkthdr;union mbuf::$::$2780F1E20D10428A35714AECB35AF484::$E1CA796CBD68F08812B55EA842ACF101 MH_dat;};
union mbuf::$::$2780F1E20D10428A35714AECB35AF484::$E1CA796CBD68F08812B55EA842ACF101 {struct m_ext MH_ext;char MH_databuf[204];};
union mcluster {union mcluster *mcl_next;char mcl_buf[2048];};
struct mcontext {ppc_exception_state_t es;ppc_thread_state_t ss;ppc_float_state_t fs;ppc_vector_state_t vs;};
typedef struct mcontext *mcontext_t;
typedef int *mem_bucket_ptr_t;
typedef char *mem_class_ptr_t;
typedef mach_port_t mem_entry_name_port_t;
typedef char *mem_nam_ptr_t;
typedef memory_object_t *memory_object_array_t;
struct memory_object_attr_info {memory_object_copy_strategy_t copy_strategy;vm_offset_t cluster_size;boolean_t may_cache_object;boolean_t temporary;};
typedef struct memory_object_attr_info memory_object_attr_info_data_t;
typedef struct memory_object_attr_info *memory_object_attr_info_t;
struct memory_object_behave_info {memory_object_copy_strategy_t copy_strategy;boolean_t temporary;boolean_t invalidate;boolean_t silent_overwrite;boolean_t advisory_pageout;};
typedef struct memory_object_behave_info memory_object_behave_info_data_t;
typedef struct memory_object_behave_info *memory_object_behave_info_t;
typedef mach_port_t memory_object_control_t;
typedef int memory_object_copy_strategy_t;
typedef mach_port_t memory_object_default_t;
typedef int memory_object_flavor_t;
typedef int memory_object_info_data_t[1024];
typedef int *memory_object_info_t;
typedef mach_port_t memory_object_name_t;
typedef unsigned __int64 memory_object_offset_t;
struct memory_object_perf_info {vm_size_t cluster_size;boolean_t may_cache;};
typedef struct memory_object_perf_info memory_object_perf_info_data_t;
typedef struct memory_object_perf_info *memory_object_perf_info_t;
typedef int memory_object_return_t;
typedef unsigned __int64 memory_object_size_t;
typedef mach_port_t memory_object_t;
struct mf6cctl {struct sockaddr_in6 mf6cc_origin;struct sockaddr_in6 mf6cc_mcastgrp;mifi_t mf6cc_parent;struct if_set mf6cc_ifset;};
struct mfc {struct in_addr mfc_origin;struct in_addr mfc_mcastgrp;vifi_t mfc_parent;u_char mfc_ttls[32];u_long mfc_pkt_cnt;u_long mfc_byte_cnt;u_long mfc_wrong_if;int mfc_expire;struct timeval mfc_last_assert;struct rtdetq *mfc_stall;struct mfc *mfc_next;};
struct mfcctl {struct in_addr mfcc_origin;struct in_addr mfcc_mcastgrp;vifi_t mfcc_parent;u_char mfcc_ttls[32];};
struct mif6ctl {mifi_t mif6c_mifi;u_char mif6c_flags;u_short mif6c_pifi;};
typedef u_short mifi_t;
typedef kern_return_t (*mig_impl_routine_t)(void);
typedef struct $54E3C4845DCBBBAE0B28E8CAF275DF3F mig_reply_error_t;
typedef mach_msg_type_descriptor_t *mig_routine_arg_descriptor_t;
typedef struct routine_descriptor mig_routine_descriptor;
typedef mig_routine_descriptor *mig_routine_descriptor_t;
typedef mig_stub_routine_t mig_routine_t;
typedef mig_routine_t (__fastcall *mig_server_routine_t)(mach_msg_header_t *InHeadP);
typedef void (__fastcall *mig_stub_routine_t)(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP);
struct mig_subsystem {mig_server_routine_t server;mach_msg_id_t start;mach_msg_id_t end;mach_msg_size_t maxsize;vm_address_t reserved;mig_routine_descriptor routine[1];};
typedef struct mig_subsystem *mig_subsystem_t;
struct mig_symtab {char *ms_routine_name;int ms_routine_number;void (*ms_routine)(void);};
typedef struct mig_symtab mig_symtab_t;
struct mld6_hdr {struct icmp6_hdr mld6_hdr;struct in6_addr mld6_addr;};
typedef int __fastcall mmap_fcn_t();
typedef unsigned int mmask_t;
typedef union $78AF60B7EAAC2BB1C96EBCEF432CA4FF mmcr0_t;
typedef union $77272609D9A6BB912C7C0540469DE8CB mmcr1_t;
typedef union $C18A6CE957EEA4FD62416C6C10A8EE86 mmcr2_t;
typedef u_int16_t mode_t;
struct mon {struct mon_id mon_id;char priv[16];};
struct mon_id {char *mon_name;struct my_id my_id;};
struct mount {struct mount::$2379E57D2F69B52BA4F4C178E2FC43C7 mnt_list;struct vfsops *mnt_op;struct vfsconf *mnt_vfc;struct vnode *mnt_vnodecovered;struct vnodelst mnt_vnodelist;struct lock__bsd__ mnt_lock;int mnt_flag;int mnt_kern_flag;int mnt_maxsymlinklen;struct statfs mnt_stat;qaddr_t mnt_data;u_int32_t mnt_maxreadcnt;u_int32_t mnt_maxwritecnt;u_int16_t mnt_segreadcnt;u_int16_t mnt_segwritecnt;};
struct mount::$2379E57D2F69B52BA4F4C178E2FC43C7 {struct mount *cqe_next;struct mount *cqe_prev;};
struct mrt6msg {u_char im6_mbz;u_char im6_msgtype;u_int16_t im6_mif;u_int32_t im6_pad;struct in6_addr im6_src;struct in6_addr im6_dst;};
struct mrt6stat {u_quad_t mrt6s_mfc_lookups;u_quad_t mrt6s_mfc_misses;u_quad_t mrt6s_upcalls;u_quad_t mrt6s_no_route;u_quad_t mrt6s_bad_tunnel;u_quad_t mrt6s_cant_tunnel;u_quad_t mrt6s_wrong_if;u_quad_t mrt6s_upq_ovflw;u_quad_t mrt6s_cache_cleanups;u_quad_t mrt6s_drop_sel;u_quad_t mrt6s_q_overflow;u_quad_t mrt6s_pkt2large;u_quad_t mrt6s_upq_sockfull;};
struct mrtstat {u_long mrts_mfc_lookups;u_long mrts_mfc_misses;u_long mrts_upcalls;u_long mrts_no_route;u_long mrts_bad_tunnel;u_long mrts_cant_tunnel;u_long mrts_wrong_if;u_long mrts_upq_ovflw;u_long mrts_cache_cleanups;u_long mrts_drop_sel;u_long mrts_q_overflow;u_long mrts_pkt2large;u_long mrts_upq_sockfull;};
struct msg_dat {unsigned __int8 *app_data;u_int32_t app_length;unsigned int hash;int swap;int32_t time_sec;unsigned __int8 time_5ms;};
enum msg_type {CALL = 0x0,REPLY = 0x1,};
struct msgbuf {int msg_magic;int msg_bufx;int msg_bufr;char msg_bufc[4084];};
struct msghdr {caddr_t msg_name;u_int msg_namelen;struct iovec *msg_iov;u_int msg_iovlen;caddr_t msg_control;u_int msg_controllen;int msg_flags;};
struct mtget {__int16 mt_type;u_short mt_dsreg;u_short mt_erreg;u_short mt_ext_err0;u_short mt_ext_err1;__int16 mt_resid;daddr_t mt_fileno;daddr_t mt_blkno;daddr_t mt_blksiz;daddr_t mt_density;daddr_t mt_mblksiz[4];daddr_t mt_mdensity[4];};
struct mtop {__int16 mt_op;daddr_t mt_count;};
struct mutex;
struct my_id {char *my_name;int my_prog;int my_vers;int my_proc;};
typedef u_int32_t n_long;
typedef u_int16_t n_short;
typedef u_int32_t n_time;
typedef name_t *name_array_t;
typedef char name_t[128];
struct namecache {struct namecache::$8704BC0A58F7B27B331EC489BA765B46 nc_hash;struct namecache::$FA403A3F3DD7057A4EF484C073627929 nc_lru;struct vnode *nc_dvp;u_long nc_dvpid;struct vnode *nc_vp;u_long nc_vpid;char nc_nlen;char nc_name[31];};
struct namecache::$8704BC0A58F7B27B331EC489BA765B46 {struct namecache *le_next;struct namecache **le_prev;};
struct namecache::$FA403A3F3DD7057A4EF484C073627929 {struct namecache *tqe_next;struct namecache **tqe_prev;};
struct nameidata {caddr_t ni_dirp;enum uio_seg ni_segflg;struct vnode *ni_startdir;struct vnode *ni_rootdir;struct vnode *ni_vp;struct vnode *ni_dvp;u_int ni_pathlen;char *ni_next;u_long ni_loopcnt;struct componentname ni_cnd;};
typedef unsigned int natural_t;
struct nchstats {int ncs_goodhits;int ncs_neghits;int ncs_badhits;int ncs_falsehits;int ncs_miss;int ncs_long;int ncs_pass2;int ncs_2passes;};
struct nd_neighbor_advert {struct icmp6_hdr nd_na_hdr;struct in6_addr nd_na_target;};
struct nd_neighbor_solicit {struct icmp6_hdr nd_ns_hdr;struct in6_addr nd_ns_target;};
struct nd_opt_hdr {u_int8_t nd_opt_type;u_int8_t nd_opt_len;};
struct nd_opt_mtu {u_int8_t nd_opt_mtu_type;u_int8_t nd_opt_mtu_len;u_int16_t nd_opt_mtu_reserved;u_int32_t nd_opt_mtu_mtu;};
struct nd_opt_prefix_info {u_int8_t nd_opt_pi_type;u_int8_t nd_opt_pi_len;u_int8_t nd_opt_pi_prefix_len;u_int8_t nd_opt_pi_flags_reserved;u_int32_t nd_opt_pi_valid_time;u_int32_t nd_opt_pi_preferred_time;u_int32_t nd_opt_pi_reserved2;struct in6_addr nd_opt_pi_prefix;};
struct nd_opt_rd_hdr {u_int8_t nd_opt_rh_type;u_int8_t nd_opt_rh_len;u_int16_t nd_opt_rh_reserved1;u_int32_t nd_opt_rh_reserved2;};
struct nd_opt_route_info {u_int8_t nd_opt_rti_type;u_int8_t nd_opt_rti_len;u_int8_t nd_opt_rti_prefixlen;u_int8_t nd_opt_rti_flags;u_int32_t nd_opt_rti_lifetime;};
struct nd_redirect {struct icmp6_hdr nd_rd_hdr;struct in6_addr nd_rd_target;struct in6_addr nd_rd_dst;};
struct nd_router_advert {struct icmp6_hdr nd_ra_hdr;u_int32_t nd_ra_reachable;u_int32_t nd_ra_retransmit;};
struct nd_router_solicit {struct icmp6_hdr nd_rs_hdr;};
struct ndrv_demux_desc {u_int16_t type;u_int16_t length;union ndrv_demux_desc::$5E87C9BB192401A2CD612B3326A5C171 data;};
union ndrv_demux_desc::$5E87C9BB192401A2CD612B3326A5C171 {u_int16_t ether_type;u_int8_t sap[3];u_int8_t snap[5];u_int8_t other[28];};
struct ndrv_protocol_desc {u_int32_t version;u_int32_t protocol_family;u_int32_t demux_count;struct ndrv_demux_desc *demux_list;};
struct net_event_data {u_long if_family;u_long if_unit;char if_name[16];};
typedef unsigned int netaddr_t;
struct netent {char *n_name;char **n_aliases;int n_addrtype;unsigned int n_net;};
struct netinfo {struct sockaddr rip_dst;int rip_metric;};
typedef char netname_name_t[80];
struct netobj {u_int n_len;char *n_bytes;};
typedef struct $3010519FC8E063AC13B61458A4695107 network_port_t;
struct newah {u_int8_t ah_nxt;u_int8_t ah_len;u_int16_t ah_reserve;u_int32_t ah_spi;u_int32_t ah_seq;};
struct newesp {u_int32_t esp_spi;u_int32_t esp_seq;};
struct nfs_args {int version;struct sockaddr *addr;int addrlen;int sotype;int proto;u_char *fh;int fhsize;int flags;int wsize;int rsize;int readdirsize;int timeo;int retrans;int maxgrouplist;int readahead;int leaseterm;int deadthresh;char *hostname;};
struct nfs_diskless {struct nfs_dlmount nd_root;struct nfs_dlmount nd_private;};
struct nfs_dlmount {struct sockaddr_in ndm_saddr;char ndm_host[90];u_char ndm_fh[32];};
struct nfs_fattr {u_long fa_type;u_long fa_mode;u_long fa_nlink;u_long fa_uid;u_long fa_gid;union nfs_fattr::$E79F6FA0450BCCBBF748421850AC7529 fa_un;};
union nfs_fattr::$E79F6FA0450BCCBBF748421850AC7529 {struct nfs_fattr::$E79F6FA0450BCCBBF748421850AC7529::$7AF691633A57B0D90862B8C97FFE8391 fa_nfsv2;struct nfs_fattr::$E79F6FA0450BCCBBF748421850AC7529::$F06305FE763AFADA41B6020C48C6BE34 fa_nfsv3;};
struct nfs_fattr::$E79F6FA0450BCCBBF748421850AC7529::$7AF691633A57B0D90862B8C97FFE8391 {u_long nfsv2fa_size;u_long nfsv2fa_blocksize;u_long nfsv2fa_rdev;u_long nfsv2fa_blocks;u_long nfsv2fa_fsid;u_long nfsv2fa_fileid;nfstime2 nfsv2fa_atime;nfstime2 nfsv2fa_mtime;nfstime2 nfsv2fa_ctime;};
struct nfs_fattr::$E79F6FA0450BCCBBF748421850AC7529::$F06305FE763AFADA41B6020C48C6BE34 {nfsuint64 nfsv3fa_size;nfsuint64 nfsv3fa_used;nfsv3spec nfsv3fa_rdev;nfsuint64 nfsv3fa_fsid;nfsuint64 nfsv3fa_fileid;nfstime3 nfsv3fa_atime;nfstime3 nfsv3fa_mtime;nfstime3 nfsv3fa_ctime;};
union nfs_quadconvert {u_long lval[2];u_quad_t qval;};
struct nfs_statfs {union nfs_statfs::$69CB8C38C49A389B5C5F582ABDFD45A8 sf_un;};
union nfs_statfs::$69CB8C38C49A389B5C5F582ABDFD45A8 {struct nfs_statfs::$69CB8C38C49A389B5C5F582ABDFD45A8::$65EFBDD4AC550798163DBEDA1E1B0DA2 sf_nfsv2;struct nfs_statfs::$69CB8C38C49A389B5C5F582ABDFD45A8::$FA3421E18CB770DFE14C80BAE85368EE sf_nfsv3;};
struct nfs_statfs::$69CB8C38C49A389B5C5F582ABDFD45A8::$65EFBDD4AC550798163DBEDA1E1B0DA2 {u_long nfsv2sf_tsize;u_long nfsv2sf_bsize;u_long nfsv2sf_blocks;u_long nfsv2sf_bfree;u_long nfsv2sf_bavail;};
struct nfs_statfs::$69CB8C38C49A389B5C5F582ABDFD45A8::$FA3421E18CB770DFE14C80BAE85368EE {nfsuint64 nfsv3sf_tbytes;nfsuint64 nfsv3sf_fbytes;nfsuint64 nfsv3sf_abytes;nfsuint64 nfsv3sf_tfiles;nfsuint64 nfsv3sf_ffiles;nfsuint64 nfsv3sf_afiles;u_long nfsv3sf_invarsec;};
struct nfs_uquad {u_long nfsuquad[2];};
struct nfsd_args {int sock;caddr_t name;int namelen;};
struct nfsd_cargs {char *ncd_dirp;uid_t ncd_authuid;int ncd_authtype;int ncd_authlen;u_char *ncd_authstr;int ncd_verflen;u_char *ncd_verfstr;NFSKERBKEY_T ncd_key;};
struct nfsd_srvargs {struct nfsd *nsd_nfsd;uid_t nsd_uid;u_long nsd_haddr;struct ucred nsd_cr;int nsd_authlen;u_char *nsd_authstr;int nsd_verflen;u_char *nsd_verfstr;struct timeval nsd_timestamp;u_long nsd_ttl;NFSKERBKEY_T nsd_key;};
struct nfsdrt {int pos;struct nfsdrt::drt drt[128];};
struct nfsdrt::drt {int flag;u_int32_t proc;u_long ipadr;int resptime;struct timeval tstamp;};
union nfsfh {fhandle_t fh_generic;u_char fh_bytes[64];};
typedef union nfsfh nfsfh_t;
struct nfsmount {int nm_flag;struct mount *nm_mountp;int nm_numgrps;struct vnode *nm_dvp;struct socket *nm_so;int nm_sotype;int nm_soproto;int nm_soflags;struct mbuf *nm_nam;int nm_timeo;int nm_retry;int nm_srtt[4];int nm_sdrtt[4];int nm_sent;int nm_cwnd;int nm_timeouts;int nm_deadthresh;int nm_rsize;int nm_wsize;int nm_readdirsize;int nm_readahead;int nm_leaseterm;struct nfsmount::$D5A7CD7D4EA59D254AECCD91CB44C48A nm_timerhead;struct vnode *nm_inprog;uid_t nm_authuid;int nm_authtype;int nm_authlen;char *nm_authstr;char *nm_verfstr;int nm_verflen;u_char nm_verf[8];NFSKERBKEY_T nm_key;int nm_numuids;struct nfsmount::$B651BE1AF0F3088BB7CCBB6282B23669 nm_uidlruhead;struct nfsmount::$B2F63279BEAC5DB7B6C09CE054EE940F nm_uidhashtbl[63];struct nfsmount::$2AB2B79B2E8402D30044F9ACC1B80BEA nm_bufq;__int16 nm_bufqlen;__int16 nm_bufqwant;int nm_bufqiods;};
struct nfsmount::$2AB2B79B2E8402D30044F9ACC1B80BEA {struct buf *tqh_first;struct buf **tqh_last;};
struct nfsmount::$B2F63279BEAC5DB7B6C09CE054EE940F {struct nfsuid *lh_first;};
struct nfsmount::$B651BE1AF0F3088BB7CCBB6282B23669 {struct nfsuid *tqh_first;struct nfsuid **tqh_last;};
struct nfsmount::$D5A7CD7D4EA59D254AECCD91CB44C48A {struct nfsnode *cqh_first;struct nfsnode *cqh_last;};
typedef union nfs_quadconvert nfsquad_t;
struct nfsrpc_fullblock {u_long t1;u_long t2;u_long w1;u_long w2;};
struct nfsrpc_fullverf {u_long t1;u_long t2;u_long w2;};
struct nfsrpc_nickverf {u_long kind;struct nfsrpc_fullverf verf;};
struct nfsrtt {int pos;struct nfsrtt::rttl rttl[128];};
struct nfsrtt::rttl {u_int32_t proc;int rtt;int rto;int sent;int cwnd;int srtt;int sdrtt;fsid_t fsid;struct timeval tstamp;};
typedef struct nfsv2_time nfstime2;
typedef struct nfsv3_time nfstime3;
typedef enum $ECDADD1EECA7ABE995B6293E703DBBBE nfstype;
typedef struct nfs_uquad nfsuint64;
struct nfsv2_sattr {u_long sa_mode;u_long sa_uid;u_long sa_gid;u_long sa_size;nfstime2 sa_atime;nfstime2 sa_mtime;};
struct nfsv2_time {u_long nfsv2_sec;u_long nfsv2_usec;};
struct nfsv3_diskless {struct ifaliasreq myif;struct sockaddr_in mygateway;struct nfs_args swap_args;int swap_fhsize;u_char swap_fh[64];struct sockaddr_in swap_saddr;char swap_hostnam[90];int swap_nblks;struct ucred swap_ucred;struct nfs_args root_args;int root_fhsize;u_char root_fh[64];struct sockaddr_in root_saddr;char root_hostnam[90];int root_time;char my_hostnam[256];};
struct nfsv3_fsinfo {u_long fs_rtmax;u_long fs_rtpref;u_long fs_rtmult;u_long fs_wtmax;u_long fs_wtpref;u_long fs_wtmult;u_long fs_dtpref;nfsuint64 fs_maxfilesize;nfstime3 fs_timedelta;u_long fs_properties;};
struct nfsv3_pathconf {u_long pc_linkmax;u_long pc_namemax;u_long pc_notrunc;u_long pc_chownrestricted;u_long pc_caseinsensitive;u_long pc_casepreserving;};
struct nfsv3_sattr {u_long sa_modetrue;u_long sa_mode;u_long sa_uidtrue;u_long sa_uid;u_long sa_gidtrue;u_long sa_gid;u_long sa_sizefalse;u_long sa_atimetype;u_long sa_mtimetype;};
struct nfsv3_spec {u_long specdata1;u_long specdata2;};
struct nfsv3_time {u_long nfsv3_sec;u_long nfsv3_nsec;};
typedef struct nfsv3_spec nfsv3spec;
struct ni_binding {ni_name tag;u_int addr;};
struct ni_children_res {ni_status status;union ni_children_res::$C203A562CEACF95339EF3F95866E0A61 ni_children_res_u;};
union ni_children_res::$C203A562CEACF95339EF3F95866E0A61 {ni_children_stuff stuff;};
struct ni_children_stuff {ni_idlist children;ni_id self_id;};
struct ni_create_args {ni_id id;ni_proplist props;u_long where;ni_id *target_id;};
struct ni_create_res {ni_status status;union ni_create_res::$F041CFB5BE6A4A90C114152344386BD6 ni_create_res_u;};
union ni_create_res::$F041CFB5BE6A4A90C114152344386BD6 {ni_create_stuff stuff;};
struct ni_create_stuff {ni_id id;ni_id self_id;};
struct ni_createname_args {ni_id id;u_long prop_index;ni_name name;u_long where;};
struct ni_createprop_args {ni_id id;ni_property prop;u_long where;};
struct ni_destroy_args {ni_id parent_id;ni_id self_id;};
struct ni_entry {u_long id;ni_namelist *names;};
typedef struct $515044D80573ABF1895C554FFE4B1B4E ni_entrylist;
struct ni_fancyopenargs {int rtimeout;int wtimeout;int abort;int needwrite;};
struct ni_id {u_long nii_object;u_long nii_instance;};
struct ni_id_res {ni_status status;union ni_id_res::$ADDCD2EAA57F5959E33E590A0EADCC56 ni_id_res_u;};
union ni_id_res::$ADDCD2EAA57F5959E33E590A0EADCC56 {ni_id id;};
typedef struct $D1F0690F11A92272A853B779A09D2DBD ni_idlist;
typedef unsigned int ni_index;
struct ni_list_res {ni_status status;union ni_list_res::$BBFC785347C98123FB8656CD1C2CD623 ni_list_res_u;};
union ni_list_res::$BBFC785347C98123FB8656CD1C2CD623 {ni_list_stuff stuff;};
struct ni_list_stuff {ni_entrylist entries;ni_id self_id;};
struct ni_listall_res {ni_status status;union ni_listall_res::$B49A97D8AB2CF3EFD380FF3D6B32EE28 ni_listall_res_u;};
union ni_listall_res::$B49A97D8AB2CF3EFD380FF3D6B32EE28 {ni_listall_stuff stuff;};
struct ni_listall_stuff {ni_id self_id;ni_proplist_list entries;};
struct ni_lookup_args {ni_id id;ni_name key;ni_name value;};
struct ni_lookup_res {ni_status status;union ni_lookup_res::$0E5A4D56EC86B35A64977E7AC67065DB ni_lookup_res_u;};
union ni_lookup_res::$0E5A4D56EC86B35A64977E7AC67065DB {ni_lookup_stuff stuff;};
struct ni_lookup_stuff {ni_idlist idlist;ni_id self_id;};
typedef char *ni_name;
struct ni_name_args {ni_id id;ni_name name;};
typedef const char *ni_name_const;
struct ni_nameindex_args {ni_id id;u_long prop_index;u_long name_index;};
typedef struct $1FAE8DE219DB8DB0F433B235C97BF738 ni_namelist;
struct ni_namelist_res {ni_status status;union ni_namelist_res::$C9C186218BE28235946B20C948488B3A ni_namelist_res_u;};
union ni_namelist_res::$C9C186218BE28235946B20C948488B3A {ni_namelist_stuff stuff;};
struct ni_namelist_stuff {ni_namelist values;ni_id self_id;};
struct ni_object {ni_id nio_id;ni_proplist nio_props;u_long nio_parent;ni_idlist nio_children;};
typedef struct ni_object_node *ni_object_list;
struct ni_object_node {ni_object object;ni_object_list next;};
struct ni_parent_res {ni_status status;union ni_parent_res::$7027F7BA75F8A2FEE79DF0289A8CF16D ni_parent_res_u;};
union ni_parent_res::$7027F7BA75F8A2FEE79DF0289A8CF16D {struct ni_parent_stuff stuff;};
struct ni_parent_stuff {u_long object_id;ni_id self_id;};
struct ni_prop_args {ni_id id;u_long prop_index;};
struct ni_property {ni_name nip_name;ni_namelist nip_val;};
typedef struct $75BB8CC7973838045C1884338FD534F5 ni_proplist;
typedef struct $C541AC86759D83DA08D4C42C04A02CD9 ni_proplist_list;
struct ni_proplist_res {ni_status status;union ni_proplist_res::$BE7C6B743524F69ABF6EB4DE4D21AA11 ni_proplist_res_u;};
union ni_proplist_res::$BE7C6B743524F69ABF6EB4DE4D21AA11 {ni_proplist_stuff stuff;};
struct ni_proplist_stuff {ni_id id;ni_proplist props;};
struct ni_propname_args {ni_id id;u_long prop_index;ni_name name;};
struct ni_readall_res {ni_status status;union ni_readall_res::$91E9B46A2042B0F61ACB0BB029D2EF99 ni_readall_res_u;};
union ni_readall_res::$91E9B46A2042B0F61ACB0BB029D2EF99 {ni_readall_stuff stuff;};
struct ni_readall_stuff {u_int checksum;u_long highestid;ni_object_list list;};
struct ni_readname_res {ni_status status;union ni_readname_res::$9D3F30A02DB9992A74414ADA5681DFEF ni_readname_res_u;};
union ni_readname_res::$9D3F30A02DB9992A74414ADA5681DFEF {ni_readname_stuff stuff;};
struct ni_readname_stuff {ni_id id;ni_name name;};
struct ni_reply_fqdn {u_int32_t ni_fqdn_ttl;u_int8_t ni_fqdn_namelen;u_int8_t ni_fqdn_name[3];};
struct ni_rparent_res {ni_status status;union ni_rparent_res::$279894FE44F1A87E0866EC742A6FA017 ni_rparent_res_u;};
union ni_rparent_res::$279894FE44F1A87E0866EC742A6FA017 {ni_binding binding;};
enum ni_status {NI_OK = 0x0,NI_BADID = 0x1,NI_STALE = 0x2,NI_NOSPACE = 0x3,NI_PERM = 0x4,NI_NODIR = 0x5,NI_NOPROP = 0x6,NI_NONAME = 0x7,NI_NOTEMPTY = 0x8,NI_UNRELATED = 0x9,NI_SERIAL = 0xA,NI_NETROOT = 0xB,NI_NORESPONSE = 0xC,NI_RDONLY = 0xD,NI_SYSTEMERR = 0xE,NI_ALIVE = 0xF,NI_NOTMASTER = 0x10,NI_CANTFINDADDRESS = 0x11,NI_DUPTAG = 0x12,NI_NOTAG = 0x13,NI_AUTHERROR = 0x14,NI_NOUSER = 0x15,NI_MASTERBUSY = 0x16,NI_INVALIDDOMAIN = 0x17,NI_BADOP = 0x18,NI_FAILED = 0x270F,};
struct ni_writename_args {ni_id id;u_long prop_index;u_long name_index;ni_name name;};
struct ni_writeprop_args {ni_id id;u_long prop_index;ni_namelist values;};
struct nibind_addrinfo {u_int udp_port;u_int tcp_port;};
struct nibind_bind_args {u_int client_addr;ni_name client_tag;ni_name server_tag;};
struct nibind_clone_args {ni_name tag;ni_name master_name;u_int master_addr;ni_name master_tag;};
struct nibind_getregister_res {ni_status status;union nibind_getregister_res::$C3943E646EABBB4602024513929A8E13 nibind_getregister_res_u;};
union nibind_getregister_res::$C3943E646EABBB4602024513929A8E13 {nibind_addrinfo addrs;};
struct nibind_listreg_res {ni_status status;union nibind_listreg_res::$10371CE6CF4892C84D790B0F6434C38C nibind_listreg_res_u;};
union nibind_listreg_res::$10371CE6CF4892C84D790B0F6434C38C {struct nibind_listreg_res::$10371CE6CF4892C84D790B0F6434C38C::$3ECB226486E27831F18ABBD397531B1A regs;};
struct nibind_listreg_res::$10371CE6CF4892C84D790B0F6434C38C::$3ECB226486E27831F18ABBD397531B1A {u_int regs_len;nibind_registration *regs_val;};
struct nibind_registration {ni_name tag;nibind_addrinfo addrs;};
typedef u_int16_t nlink_t;
struct nlist {char *n_name;unsigned __int8 n_type;char n_other;__int16 n_desc;unsigned int n_value;};
struct nlm_cancargs {netobj cookie;int block;int exclusive;struct nlm_lock alock;};
struct nlm_holder {int exclusive;int svid;netobj oh;u_int l_offset;u_int l_len;};
struct nlm_lock {char *caller_name;netobj fh;netobj oh;int svid;u_int l_offset;u_int l_len;};
struct nlm_lockargs {netobj cookie;int block;int exclusive;struct nlm_lock alock;int reclaim;int state;};
struct nlm_notify {char *name;int state;};
struct nlm_res {netobj cookie;nlm_stat stat;};
struct nlm_share {char *caller_name;netobj fh;netobj oh;fsh_mode mode;fsh_access access;};
struct nlm_shareargs {netobj cookie;nlm_share share;int reclaim;};
struct nlm_shareres {netobj cookie;nlm_stats stat;int sequence;};
struct nlm_stat {nlm_stats stat;};
enum nlm_stats {nlm_granted = 0x0,nlm_denied = 0x1,nlm_denied_nolocks = 0x2,nlm_blocked = 0x3,nlm_denied_grace_period = 0x4,};
struct nlm_testargs {netobj cookie;int exclusive;struct nlm_lock alock;};
struct nlm_testres {netobj cookie;nlm_testrply stat;};
struct nlm_testrply {nlm_stats stat;union nlm_testrply::$25E723FE95144319ADEDD57F4FF59DDE nlm_testrply_u;};
union nlm_testrply::$25E723FE95144319ADEDD57F4FF59DDE {struct nlm_holder holder;};
struct nlm_unlockargs {netobj cookie;struct nlm_lock alock;};
typedef struct $4BA9156D9D4FD7BFAE1E88FAD76CCCD3 np_uid_t;
typedef quad_t off_t;
struct old_memory_object_attr_info {boolean_t object_ready;boolean_t may_cache;memory_object_copy_strategy_t copy_strategy;};
typedef struct old_memory_object_attr_info old_memory_object_attr_info_data_t;
typedef struct old_memory_object_attr_info *old_memory_object_attr_info_t;
struct old_memory_object_behave_info {memory_object_copy_strategy_t copy_strategy;boolean_t temporary;boolean_t invalidate;};
typedef struct old_memory_object_behave_info old_memory_object_behave_info_data_t;
typedef struct old_memory_object_behave_info *old_memory_object_behave_info_t;
struct omsghdr {caddr_t msg_name;int msg_namelen;struct iovec *msg_iov;int msg_iovlen;caddr_t msg_accrights;int msg_accrightslen;};
struct onfs_args {struct sockaddr *addr;int addrlen;int sotype;int proto;u_char *fh;int fhsize;int flags;int wsize;int rsize;int readdirsize;int timeo;int retrans;int maxgrouplist;int readahead;int leaseterm;int deadthresh;char *hostname;};
struct opaque_auth {int oa_flavor;caddr_t oa_base;u_int oa_length;};
typedef int __fastcall open_close_fcn_t(dev_t dev, int flags, int devtype, struct proc *p);
struct orlimit {int32_t rlim_cur;int32_t rlim_max;};
struct ortentry {u_long rt_hash;struct sockaddr rt_dst;struct sockaddr rt_gateway;__int16 rt_flags;__int16 rt_refcnt;u_long rt_use;struct ifnet *rt_ifp;};
struct osockaddr {u_short sa_family;char sa_data[14];};
struct ostat {u_int16_t st_dev;ino_t st_ino;mode_t st_mode;nlink_t st_nlink;u_int16_t st_uid;u_int16_t st_gid;u_int16_t st_rdev;int32_t st_size;struct timespec st_atimespec;struct timespec st_mtimespec;struct timespec st_ctimespec;int32_t st_blksize;int32_t st_blocks;u_int32_t st_flags;u_int32_t st_gen;};
typedef BOOL (__fastcall *pConfigDSNFunc)(HWND hwndParent, WORD fRequest, LPCSTR lpszDriver, LPCSTR lpszAttributes);
typedef BOOL (__fastcall *pConfigDriverFunc)(HWND hwndParent, WORD fRequest, LPCSTR lpszDriver, LPCSTR lpszArgs, LPSTR lpszMsg, WORD cbMsgMax, WORD *pcbMsgOut);
typedef BOOL (__fastcall *pConfigTranslatorFunc)(HWND hwndParent, DWORD *pvOption);
typedef vm_offset_t *page_address_array_t;
struct pam_conv {int (__fastcall *conv)(int num_msg, const struct pam_message **msg, struct pam_response **resp, void *appdata_ptr);void *appdata_ptr;};
struct pam_handle;
typedef struct pam_handle pam_handle_t;
struct pam_message {int msg_style;const char *msg;};
struct pam_response {char *resp;int resp_retcode;};
typedef struct $39A6887EE2559B6F67226E46762E5403 *pamc_bp_t;
typedef struct pamc_handle_s *pamc_handle_t;
struct panel {WINDOW *win;struct panel *below;struct panel *above;void *user;};
struct pap_state {u_char pap_inuse;u_char pap_tickle;u_char pap_request;u_char pap_eof;u_char pap_eof_sent;u_char pap_sent;u_char pap_error;u_char pap_timer;u_char pap_closing;u_char pap_request_count;u_char pap_req_timer;u_char pap_ending;u_char pap_read_ignore;u_char pap_req_socket;at_inet_t pap_to;int pap_flow;u_short pap_send_count;u_short pap_rcv_count;u_short pap_tid;u_char pap_connID;int pap_ignore_id;int pap_tickle_id;};
typedef param_t *param_ptr_t;
typedef struct $A4B2B056AC02B7A91138DA853BA9D10A param_t;
struct passwd {char *pw_name;char *pw_passwd;uid_t pw_uid;gid_t pw_gid;time_t pw_change;char *pw_class;char *pw_gecos;char *pw_dir;char *pw_shell;time_t pw_expire;};
typedef struct _passwd_phrase_element passwd_phrase_element;
struct pcap;
struct pcap_dumper;
typedef struct pcap_dumper pcap_dumper_t;
struct pcap_file_header {bpf_u_int32 magic;u_short version_major;u_short version_minor;bpf_int32 thiszone;bpf_u_int32 sigfigs;bpf_u_int32 snaplen;bpf_u_int32 linktype;};
typedef void (__fastcall *pcap_handler)(u_char *, const struct pcap_pkthdr *, const u_char *);
struct pcap_pkthdr {struct timeval ts;bpf_u_int32 caplen;bpf_u_int32 len;};
struct pcap_stat {u_int ps_recv;u_int ps_drop;u_int ps_ifdrop;};
typedef struct pcap pcap_t;
struct pcred {struct lock__bsd__ pc_lock;struct ucred *pc_ucred;uid_t p_ruid;uid_t p_svuid;gid_t p_rgid;gid_t p_svgid;int p_refcnt;};
typedef char *peername;
struct pfkeystat {u_quad_t out_total;u_quad_t out_bytes;u_quad_t out_msgtype[256];u_quad_t out_invlen;u_quad_t out_invver;u_quad_t out_invmsgtype;u_quad_t out_tooshort;u_quad_t out_nomem;u_quad_t out_dupext;u_quad_t out_invexttype;u_quad_t out_invsatype;u_quad_t out_invaddr;u_quad_t in_total;u_quad_t in_bytes;u_quad_t in_msgtype[256];u_quad_t in_msgtarget[3];u_quad_t in_nomem;u_quad_t sockerr;};
typedef u_int32_t pgno_t;
struct pgrp {struct pgrp::$AD2C88FB0D8DE8E04DEA8E3DC89C4C4E pg_hash;struct pgrp::$2F103E8E70F9873E5CA9EA23D87BE926 pg_members;struct session *pg_session;pid_t pg_id;int pg_jobc;};
struct pgrp::$2F103E8E70F9873E5CA9EA23D87BE926 {struct proc *lh_first;};
struct pgrp::$AD2C88FB0D8DE8E04DEA8E3DC89C4C4E {struct pgrp *le_next;struct pgrp **le_prev;};
typedef int32_t pid_t;
struct pim {unsigned __int8 pim_ver : 4;unsigned __int8 pim_type : 4;u_char pim_rsv;u_short pim_cksum;};
struct pkthdr {int len;struct ifnet *rcvif;void *header;int csum_flags;int csum_data;struct mbuf *aux;void *reserved1;void *reserved2;};
struct plimit {struct rlimit pl_rlimit[9];int p_lflags;int p_refcnt;};
struct pmap {unsigned int pm_prog;unsigned int pm_vers;unsigned int pm_prot;unsigned int pm_port;};
struct pmap_statistics {integer_t resident_count;integer_t wired_count;};
typedef struct pmap_statistics *pmap_statistics_t;
struct pmaplist {struct pmap pml_map;struct pmaplist *pml_next;};
typedef union $CA1DD0B65E3A4ADE6E56E85377B62761 pmcn_t;
typedef vm_offset_t pointer_t;
typedef struct policy_bases policy_base_data_t;
typedef integer_t *policy_base_t;
struct policy_bases {policy_timeshare_base_data_t ts;policy_rr_base_data_t rr;policy_fifo_base_data_t fifo;};
struct policy_fifo_base {integer_t base_priority;};
typedef struct policy_fifo_base policy_fifo_base_data_t;
typedef struct policy_fifo_base *policy_fifo_base_t;
struct policy_fifo_info {integer_t max_priority;integer_t base_priority;boolean_t depressed;integer_t depress_priority;};
typedef struct policy_fifo_info policy_fifo_info_data_t;
typedef struct policy_fifo_info *policy_fifo_info_t;
struct policy_fifo_limit {integer_t max_priority;};
typedef struct policy_fifo_limit policy_fifo_limit_data_t;
typedef struct policy_fifo_limit *policy_fifo_limit_t;
typedef struct policy_infos policy_info_data_t;
typedef integer_t *policy_info_t;
struct policy_infos {policy_timeshare_info_data_t ts;policy_rr_info_data_t rr;policy_fifo_info_data_t fifo;};
typedef struct policy_limits policy_limit_data_t;
typedef integer_t *policy_limit_t;
struct policy_limits {policy_timeshare_limit_data_t ts;policy_rr_limit_data_t rr;policy_fifo_limit_data_t fifo;};
struct policy_rr_base {integer_t base_priority;integer_t quantum;};
typedef struct policy_rr_base policy_rr_base_data_t;
typedef struct policy_rr_base *policy_rr_base_t;
struct policy_rr_info {integer_t max_priority;integer_t base_priority;integer_t quantum;boolean_t depressed;integer_t depress_priority;};
typedef struct policy_rr_info policy_rr_info_data_t;
typedef struct policy_rr_info *policy_rr_info_t;
struct policy_rr_limit {integer_t max_priority;};
typedef struct policy_rr_limit policy_rr_limit_data_t;
typedef struct policy_rr_limit *policy_rr_limit_t;
typedef int policy_t;
struct policy_timeshare_base {integer_t base_priority;};
typedef struct policy_timeshare_base policy_timeshare_base_data_t;
typedef struct policy_timeshare_base *policy_timeshare_base_t;
struct policy_timeshare_info {integer_t max_priority;integer_t base_priority;integer_t cur_priority;boolean_t depressed;integer_t depress_priority;};
typedef struct policy_timeshare_info policy_timeshare_info_data_t;
typedef struct policy_timeshare_info *policy_timeshare_info_t;
struct policy_timeshare_limit {integer_t max_priority;};
typedef struct policy_timeshare_limit policy_timeshare_limit_data_t;
typedef struct policy_timeshare_limit *policy_timeshare_limit_t;
typedef port_name_t *port_name_array_t;
typedef natural_t port_name_t;
struct port_obj_tentry {void *pos_value;int pos_type;};
typedef struct $0362AC053C3D6D68586BA4DFD8C6F4A4 *port_stat_ptr_t;
typedef struct $0362AC053C3D6D68586BA4DFD8C6F4A4 port_stat_t;
typedef port_name_t port_t;
struct ppc_exception_state {unsigned int dar;unsigned int dsisr;unsigned int exception;unsigned int pad0;unsigned int pad1[4];};
typedef struct ppc_exception_state ppc_exception_state_t;
struct ppc_float_state {double fpregs[32];unsigned int fpscr_pad;unsigned int fpscr;};
typedef struct ppc_float_state ppc_float_state_t;
typedef enum $B8E8934C01BE5F02B50786E7D8A5B678 ppc_fp_rn_t;
typedef struct $693DE21DBBE1F7CF58248D2139012E91 ppc_fp_scr_t;
typedef union $C0E8C8526D9DD916317642865BB4191C ppc_fpf_t;
typedef struct ppc_thread_state ppc_saved_state_t;
struct ppc_thread_state {unsigned int srr0;unsigned int srr1;unsigned int r0;unsigned int r1;unsigned int r2;unsigned int r3;unsigned int r4;unsigned int r5;unsigned int r6;unsigned int r7;unsigned int r8;unsigned int r9;unsigned int r10;unsigned int r11;unsigned int r12;unsigned int r13;unsigned int r14;unsigned int r15;unsigned int r16;unsigned int r17;unsigned int r18;unsigned int r19;unsigned int r20;unsigned int r21;unsigned int r22;unsigned int r23;unsigned int r24;unsigned int r25;unsigned int r26;unsigned int r27;unsigned int r28;unsigned int r29;unsigned int r30;unsigned int r31;unsigned int cr;unsigned int xer;unsigned int lr;unsigned int ctr;unsigned int mq;unsigned int vrsave;};
typedef struct ppc_thread_state ppc_thread_state_t;
struct ppc_vector_state {unsigned int save_vr[32][4];unsigned int save_vscr[4];unsigned int save_pad5[4];unsigned int save_vrvalid;unsigned int save_pad6[7];};
typedef struct ppc_vector_state ppc_vector_state_t;
struct pr_usrreqs;
struct proc {struct proc::$14C7F3C8F33DF19DDAD51D783C1FAF86 p_list;struct pcred *p_cred;struct filedesc *p_fd;struct pstats *p_stats;struct plimit *p_limit;struct sigacts *p_sigacts;int p_flag;char p_stat;char p_pad1[3];pid_t p_pid;struct proc::$14C7F3C8F33DF19DDAD51D783C1FAF86 p_pglist;struct proc *p_pptr;struct proc::$14C7F3C8F33DF19DDAD51D783C1FAF86 p_sibling;struct proc::$2F103E8E70F9873E5CA9EA23D87BE926 p_children;pid_t p_oppid;int p_dupfd;u_int p_estcpu;int p_cpticks;fixpt_t p_pctcpu;void *p_wchan;char *p_wmesg;u_int p_swtime;u_int p_slptime;struct itimerval p_realtimer;struct timeval p_rtime;u_quad_t p_uticks;u_quad_t p_sticks;u_quad_t p_iticks;int p_traceflag;struct vnode *p_tracep;sigset_t p_siglist;struct vnode *p_textvp;struct proc::$14C7F3C8F33DF19DDAD51D783C1FAF86 p_hash;struct proc::$AB479C63CDE7BE49808AEC51D91A88D0 p_evlist;sigset_t p_sigmask;sigset_t p_sigignore;sigset_t p_sigcatch;u_char p_priority;u_char p_usrpri;char p_nice;char p_comm[17];struct pgrp *p_pgrp;u_short p_xstat;u_short p_acflag;struct rusage *p_ru;int p_debugger;void *task;void *sigwait_thread;struct lock__bsd__ signal_lock;boolean_t sigwait;void *exit_thread;caddr_t user_stack;void *exitarg;void *vm_shm;sigset_t p_xxxsigpending;int p_vforkcnt;void *p_vforkact;struct proc::$17ED35AA3E2BA90BE6B222D5CBB67308 p_uthlist;pid_t si_pid;u_short si_status;u_short si_code;uid_t si_uid;};
struct proc::$14C7F3C8F33DF19DDAD51D783C1FAF86 {struct proc *le_next;struct proc **le_prev;};
struct proc::$17ED35AA3E2BA90BE6B222D5CBB67308 {struct uthread *tqh_first;struct uthread **tqh_last;};
struct proc::$2F103E8E70F9873E5CA9EA23D87BE926 {struct proc *lh_first;};
struct proc::$AB479C63CDE7BE49808AEC51D91A88D0 {struct eventqelt *tqh_first;struct eventqelt **tqh_last;};
typedef processor_t *processor_array_t;
struct processor_basic_info {cpu_type_t cpu_type;cpu_subtype_t cpu_subtype;boolean_t running;int slot_num;boolean_t is_master;};
typedef struct processor_basic_info processor_basic_info_data_t;
typedef struct processor_basic_info *processor_basic_info_t;
struct processor_control_cmd {integer_t cmd_op;cpu_type_t cmd_cpu_type;cpu_subtype_t cmd_cpu_subtype;union processor_control_data u;};
typedef struct processor_control_cmd processor_control_cmd_data_t;
typedef struct processor_control_cmd *processor_control_cmd_t;
union processor_control_data {processor_pm_regs_data_t cmd_pm_regs[3];};
struct processor_cpu_load_info {unsigned int cpu_ticks[4];};
typedef struct processor_cpu_load_info processor_cpu_load_info_data_t;
typedef struct processor_cpu_load_info *processor_cpu_load_info_t;
typedef int processor_flavor_t;
typedef integer_t *processor_info_array_t;
typedef integer_t processor_info_data_t[1024];
typedef integer_t *processor_info_t;
struct processor_pm_regs {union processor_pm_regs::$33752F506360BBDC4DE7957982C8B4BB u;pmcn_t pmc[2];};
union processor_pm_regs::$33752F506360BBDC4DE7957982C8B4BB {mmcr0_t mmcr0;mmcr1_t mmcr1;mmcr2_t mmcr2;};
typedef struct processor_pm_regs processor_pm_regs_data_t;
typedef struct processor_pm_regs *processor_pm_regs_t;
typedef processor_array_t processor_port_array_t;
typedef processor_t processor_port_t;
typedef processor_set_t *processor_set_array_t;
struct processor_set_basic_info {int processor_count;int default_policy;};
typedef struct processor_set_basic_info processor_set_basic_info_data_t;
typedef struct processor_set_basic_info *processor_set_basic_info_t;
typedef processor_set_t processor_set_control_port_t;
typedef mach_port_t processor_set_control_t;
typedef int processor_set_flavor_t;
typedef integer_t processor_set_info_data_t[1024];
typedef integer_t *processor_set_info_t;
struct processor_set_load_info {int task_count;int thread_count;integer_t load_average;integer_t mach_factor;};
typedef struct processor_set_load_info processor_set_load_info_data_t;
typedef struct processor_set_load_info *processor_set_load_info_t;
typedef processor_set_t *processor_set_name_array_t;
typedef processor_set_array_t processor_set_name_port_array_t;
typedef processor_set_t processor_set_name_port_t;
typedef processor_set_t processor_set_name_t;
typedef processor_set_t processor_set_port_t;
typedef mach_port_t processor_set_t;
typedef mach_port_t processor_t;
typedef unsigned int processor_temperature_data_t;
typedef unsigned int *processor_temperature_t;
typedef char *profile_filespec_list_t;
typedef char *profile_filespec_t;
typedef struct _profile_t *profile_t;
struct protoent {char *p_name;char **p_aliases;int p_proto;};
struct protosw {__int16 pr_type;struct domain *pr_domain;__int16 pr_protocol;unsigned int pr_flags;void (__fastcall *pr_input)(struct mbuf *, int len);int (__fastcall *pr_output)(struct mbuf *m, struct socket *so);void (__fastcall *pr_ctlinput)(int, struct sockaddr *, void *);int (__fastcall *pr_ctloutput)(struct socket *, struct sockopt *);void *pr_ousrreq;void (*pr_init)(void);void (*pr_fasttimo)(void);void (*pr_slowtimo)(void);void (*pr_drain)(void);int (__fastcall *pr_sysctl)();struct pr_usrreqs *pr_usrreqs;struct protosw::pr_sfilter pr_sfilter;struct protosw *pr_next;u_long reserved[4];};
struct protosw::pr_sfilter {struct NFDescriptor *tqh_first;struct NFDescriptor **tqh_last;};
struct ps_strings {char *ps_argvstr;int ps_nargvstr;char *ps_envstr;int ps_nenvstr;};
typedef int __fastcall psize_fcn_t(dev_t dev);
struct pstats {struct rusage p_ru;struct rusage p_cru;struct pstats::uprof p_prof;struct itimerval p_timer[3];struct timeval p_start;};
struct pstats::uprof {struct uprof *pr_next;caddr_t pr_base;u_long pr_size;u_long pr_off;u_long pr_scale;u_long pr_addr;u_long pr_ticks;};
typedef struct _opaque_pthread_attr_t pthread_attr_t;
typedef struct _opaque_pthread_cond_t pthread_cond_t;
typedef struct _opaque_pthread_condattr_t pthread_condattr_t;
typedef unsigned int pthread_key_t;
typedef struct _opaque_pthread_mutex_t pthread_mutex_t;
typedef struct _opaque_pthread_mutexattr_t pthread_mutexattr_t;
typedef struct $B817C4E7F216D35F032A11C86EB37440 pthread_once_t;
typedef struct _opaque_pthread_rwlock_t pthread_rwlock_t;
typedef struct _opaque_pthread_rwlockattr_t pthread_rwlockattr_t;
typedef struct _opaque_pthread_t *pthread_t;
typedef int ptrdiff_t;
typedef int __fastcall putc_fcn_t(dev_t dev, char c);
typedef quad_t *qaddr_t;
struct qelem {struct qelem *q_forw;struct qelem *q_back;char *q_data;};
typedef int64_t quad_t;
struct radix_mask {__int16 rm_bit;char rm_unused;u_char rm_flags;struct radix_mask *rm_mklist;union radix_mask::$2C32063BE1A6FEE35BC9660A23E5B064 rm_rmu;int rm_refs;};
union radix_mask::$2C32063BE1A6FEE35BC9660A23E5B064 {caddr_t rmu_mask;struct radix_node *rmu_leaf;};
struct radix_node {struct radix_mask *rn_mklist;struct radix_node *rn_parent;__int16 rn_bit;char rn_bmask;u_char rn_flags;union radix_node::$F04CDB6BED489167FCAB2FB9616A514F rn_u;};
union radix_node::$F04CDB6BED489167FCAB2FB9616A514F {struct radix_node::$F04CDB6BED489167FCAB2FB9616A514F::$99E817D13894714EF3BBC853DE16C44F rn_leaf;struct radix_node::$F04CDB6BED489167FCAB2FB9616A514F::$3D28B538370CD61C9EE90B4E66F060A1 rn_node;};
struct radix_node::$F04CDB6BED489167FCAB2FB9616A514F::$3D28B538370CD61C9EE90B4E66F060A1 {int rn_Off;struct radix_node *rn_L;struct radix_node *rn_R;};
struct radix_node::$F04CDB6BED489167FCAB2FB9616A514F::$99E817D13894714EF3BBC853DE16C44F {caddr_t rn_Key;caddr_t rn_Mask;struct radix_node *rn_Dupedkey;};
struct radix_node_head {struct radix_node *rnh_treetop;int rnh_addrsize;int rnh_pktsize;struct radix_node *(__fastcall *rnh_addaddr)(void *v, void *mask, struct radix_node_head *head, struct radix_node nodes[]);struct radix_node *(__fastcall *rnh_addpkt)(void *v, void *mask, struct radix_node_head *head, struct radix_node nodes[]);struct radix_node *(__fastcall *rnh_deladdr)(void *v, void *mask, struct radix_node_head *head);struct radix_node *(__fastcall *rnh_delpkt)(void *v, void *mask, struct radix_node_head *head);struct radix_node *(__fastcall *rnh_matchaddr)(void *v, struct radix_node_head *head);struct radix_node *(__fastcall *rnh_lookup)(void *v, void *mask, struct radix_node_head *head);struct radix_node *(__fastcall *rnh_matchpkt)(void *v, struct radix_node_head *head);int (__fastcall *rnh_walktree)(struct radix_node_head *head, walktree_f_t *f, void *w);int (__fastcall *rnh_walktree_from)(struct radix_node_head *head, void *a, void *m, walktree_f_t *f, void *w);void (__fastcall *rnh_close)(struct radix_node *rn, struct radix_node_head *head);struct radix_node rnh_nodes[3];};
struct radvisory {off_t ra_offset;int ra_count;};
struct ranlib {union ranlib::$D365164107DBB2F7587637CCBEC7897F ran_un;off_t ran_off;};
union ranlib::$D365164107DBB2F7587637CCBEC7897F {off_t ran_strx;char *ran_name;};
struct rawarc {u_long raw_frompc;u_long raw_selfpc;int raw_count;};
struct rawarc_order {unsigned int raw_frompc;unsigned int raw_selfpc;unsigned int raw_count;unsigned int raw_order;};
typedef int __fastcall read_write_fcn_t(dev_t dev, struct uio *uio, int ioflag);
typedef u_int32_t recno_t;
typedef struct $FA547AB27F70B847C07B2381F2BB5B39 regex_t;
struct region_desc {vm_offset_t addr;vm_offset_t offset;vm_size_t size;vm_prot_t prot;boolean_t mapped;};
typedef int32_t register_t;
typedef struct $BD619B2F7AFF7BA6F06506AA27210664 regmatch_t;
typedef off_t regoff_t;
typedef enum $4EE0FB99968ADB58B01C3A33A60FE053 regs_saved_t;
enum reject_stat {RPC_MISMATCH = 0x0,AUTH_ERROR = 0x1,};
struct rejected_reply {enum reject_stat rj_stat;union rejected_reply::$D36433C375B856769A86CDA2CFADE497 ru;};
union rejected_reply::$D36433C375B856769A86CDA2CFADE497 {struct rejected_reply::$D36433C375B856769A86CDA2CFADE497::$C081DE2363A7D6E022ACDA68492DBB3F RJ_versions;enum auth_stat RJ_why;};
struct rejected_reply::$D36433C375B856769A86CDA2CFADE497::$C081DE2363A7D6E022ACDA68492DBB3F {u_long low;u_long high;};
struct reply_body {enum reply_stat rp_stat;union reply_body::$3176F759A4E4A0B30BE44C0FA3C218CC ru;};
union reply_body::$3176F759A4E4A0B30BE44C0FA3C218CC {struct accepted_reply RP_ar;struct rejected_reply RP_dr;};
enum reply_stat {MSG_ACCEPTED = 0x0,MSG_DENIED = 0x1,};
struct request_info {int fd;char user[128];char daemon[128];char pid[10];struct host_info client[1];struct host_info server[1];void (__fastcall *sink)();void (__fastcall *hostname)();void (__fastcall *hostaddr)();void (__fastcall *cleanup)();struct netconfig *config;};
enum res {stat_succ = 0x0,stat_fail = 0x1,};
typedef res_sendhookact (__fastcall *res_send_qhook)(struct sockaddr_in *const *ns, const u_char **query, int *querylen, u_char *ans, int anssiz, int *resplen);
typedef res_sendhookact (__fastcall *res_send_rhook)(const struct sockaddr_in *ns, const u_char *query, int querylen, u_char *ans, int anssiz, int *resplen);
typedef enum $3EACBFB1F6A69D9CA6E99CE3BA7C8589 res_sendhookact;
typedef int __fastcall reset_fcn_t(int uban);
struct rip {u_char rip_cmd;u_char rip_vers;u_char rip_res1[2];union rip::$AFFF135AAACB9FA320A59FAF8451ECA8 ripun;};
struct rip6stat {u_quad_t rip6s_ipackets;u_quad_t rip6s_isum;u_quad_t rip6s_badsum;u_quad_t rip6s_nosock;u_quad_t rip6s_nosockmcast;u_quad_t rip6s_fullsock;u_quad_t rip6s_opackets;};
union rip::$AFFF135AAACB9FA320A59FAF8451ECA8 {struct netinfo ru_nets[1];char ru_tracefile[1];};
typedef quad_t rlim_t;
struct rlimit {rlim_t rlim_cur;rlim_t rlim_max;};
struct rmtcallargs {u_long prog;u_long vers;u_long proc;u_long arglen;caddr_t args_ptr;xdrproc_t xdr_args;};
struct rmtcallres {u_long *port_ptr;u_long resultslen;caddr_t results_ptr;xdrproc_t xdr_results;};
struct route {struct rtentry *ro_rt;struct sockaddr ro_dst;u_long reserved[2];};
struct route_cb {int ip_count;int ip6_count;int ipx_count;int ns_count;int iso_count;int any_count;};
struct route_in6 {struct rtentry *ro_rt;struct sockaddr_in6 ro_dst;};
typedef mach_msg_type_descriptor_t routine_arg_descriptor;
typedef mach_msg_type_descriptor_t *routine_arg_descriptor_t;
typedef unsigned int routine_arg_offset;
typedef unsigned int routine_arg_size;
typedef unsigned int routine_arg_type;
struct routine_descriptor {mig_impl_routine_t impl_routine;mig_stub_routine_t stub_routine;unsigned int argc;unsigned int descr_count;routine_arg_descriptor_t arg_descr;unsigned int max_reply_msg;};
typedef struct routine_descriptor *routine_descriptor_t;
struct rpc_createerr {enum clnt_stat cf_stat;struct rpc_err cf_error;};
struct rpc_err {enum clnt_stat re_status;union rpc_err::$20A10790E27E739F57AC739A9EB3B2A2 ru;};
union rpc_err::$20A10790E27E739F57AC739A9EB3B2A2 {int RE_errno;enum auth_stat RE_why;struct rpc_err::$20A10790E27E739F57AC739A9EB3B2A2::$C081DE2363A7D6E022ACDA68492DBB3F RE_vers;struct rpc_err::$20A10790E27E739F57AC739A9EB3B2A2::$BF7AC7AAFAE2A9D4F26CD1E6B816F6B2 RE_lb;};
struct rpc_err::$20A10790E27E739F57AC739A9EB3B2A2::$BF7AC7AAFAE2A9D4F26CD1E6B816F6B2 {int s1;int s2;};
struct rpc_err::$20A10790E27E739F57AC739A9EB3B2A2::$C081DE2363A7D6E022ACDA68492DBB3F {u_long low;u_long high;};
struct rpc_msg {u_long rm_xid;enum msg_type rm_direction;union rpc_msg::$7D774571B4FAB0E4BBD540829030FA52 ru;};
union rpc_msg::$7D774571B4FAB0E4BBD540829030FA52 {struct call_body RM_cmb;struct reply_body RM_rmb;};
struct rpc_routine_arg_descriptor {routine_arg_type type;routine_arg_size size;routine_arg_size count;routine_arg_offset offset;};
typedef struct rpc_routine_arg_descriptor *rpc_routine_arg_descriptor_t;
struct rpc_routine_descriptor {mig_impl_routine_t impl_routine;mig_stub_routine_t stub_routine;unsigned int argc;unsigned int descr_count;rpc_routine_arg_descriptor_t arg_descr;unsigned int max_reply_msg;};
typedef struct rpc_routine_descriptor *rpc_routine_descriptor_t;
struct rpc_signature {struct rpc_routine_descriptor rd;struct rpc_routine_arg_descriptor rad[1];};
struct rpc_subsystem {void *reserved;mach_msg_id_t start;mach_msg_id_t end;unsigned int maxsize;vm_address_t base_addr;struct rpc_routine_descriptor routine[1];struct rpc_routine_arg_descriptor arg_descriptor[1];};
typedef struct rpc_subsystem *rpc_subsystem_t;
struct rpcent {char *r_name;char **r_aliases;int r_number;};
struct rquota {int rq_bsize;int rq_active;u_int rq_bhardlimit;u_int rq_bsoftlimit;u_int rq_curblocks;u_int rq_fhardlimit;u_int rq_fsoftlimit;u_int rq_curfiles;u_int rq_btimeleft;u_int rq_ftimeleft;};
struct rr_pco_match {u_int8_t rpm_code;u_int8_t rpm_len;u_int8_t rpm_ordinal;u_int8_t rpm_matchlen;u_int8_t rpm_minlen;u_int8_t rpm_maxlen;u_int16_t rpm_reserved;struct in6_addr rpm_prefix;};
struct rr_pco_use {u_int8_t rpu_uselen;u_int8_t rpu_keeplen;u_int8_t rpu_ramask;u_int8_t rpu_raflags;u_int32_t rpu_vltime;u_int32_t rpu_pltime;u_int32_t rpu_flags;struct in6_addr rpu_prefix;};
struct rr_result {u_int16_t rrr_flags;u_int8_t rrr_ordinal;u_int8_t rrr_matchedlen;u_int32_t rrr_ifid;struct in6_addr rrr_prefix;};
struct rrec {int16_t r_zone;int16_t r_class;int16_t r_type;u_int32_t r_ttl;int r_size;char *r_data;};
struct rslvmulti_req {struct sockaddr *sa;struct sockaddr **llsa;};
struct rt_addrinfo {int rti_addrs;struct sockaddr *rti_info[8];};
struct rt_entry {struct rt_entry *left;struct rt_entry *right;at_net_al NetStop;at_net_al NetStart;at_net_al NextIRNet;at_node NextIRNode;u_char ZoneBitMap[128];u_char NetDist;u_char NetPort;u_char EntryState;u_char RTMPFlag;u_char AURPFlag;};
struct rt_metrics {u_long rmx_locks;u_long rmx_mtu;u_long rmx_hopcount;u_long rmx_expire;u_long rmx_recvpipe;u_long rmx_sendpipe;u_long rmx_ssthresh;u_long rmx_rtt;u_long rmx_rttvar;u_long rmx_pksent;u_long rmx_filler[4];};
struct rt_msghdr {u_short rtm_msglen;u_char rtm_version;u_char rtm_type;u_short rtm_index;int rtm_flags;int rtm_addrs;pid_t rtm_pid;int rtm_seq;int rtm_errno;int rtm_use;u_long rtm_inits;struct rt_metrics rtm_rmx;};
struct rtdetq {struct mbuf *m;struct ifnet *ifp;vifi_t xmt_vif;struct rtdetq *next;};
struct rtentry {struct radix_node rt_nodes[2];struct sockaddr *rt_gateway;int32_t rt_refcnt;u_long rt_flags;struct ifnet *rt_ifp;u_long rt_dlt;struct ifaddr *rt_ifa;struct sockaddr *rt_genmask;caddr_t rt_llinfo;struct rt_metrics rt_rmx;struct rtentry *rt_gwroute;int (__fastcall *rt_output)(struct ifnet *, struct mbuf *, struct sockaddr *, struct rtentry *);struct rtentry *rt_parent;void *rt_filler2;};
struct rtstat {__int16 rts_badredirect;__int16 rts_dynamic;__int16 rts_newgateway;__int16 rts_unreach;__int16 rts_wildcard;};
struct ru_utmp {char ut_line[8];char ut_name[8];char ut_host[16];int ut_time;};
typedef int rune_t;
struct rusage {struct timeval ru_utime;struct timeval ru_stime;int ru_maxrss;int ru_ixrss;int ru_idrss;int ru_isrss;int ru_minflt;int ru_majflt;int ru_nswap;int ru_inblock;int ru_oublock;int ru_msgsnd;int ru_msgrcv;int ru_nsignals;int ru_nvcsw;int ru_nivcsw;};
struct rusers_utmp {char *ut_user;char *ut_line;char *ut_host;int ut_type;int ut_time;u_int ut_idle;};
typedef struct ru_utmp rutmp;
typedef u_char sa_family_t;
struct sadb_address {u_int16_t sadb_address_len;u_int16_t sadb_address_exttype;u_int8_t sadb_address_proto;u_int8_t sadb_address_prefixlen;u_int16_t sadb_address_reserved;};
struct sadb_alg {u_int8_t sadb_alg_id;u_int8_t sadb_alg_ivlen;u_int16_t sadb_alg_minbits;u_int16_t sadb_alg_maxbits;u_int16_t sadb_alg_reserved;};
struct sadb_comb {u_int8_t sadb_comb_auth;u_int8_t sadb_comb_encrypt;u_int16_t sadb_comb_flags;u_int16_t sadb_comb_auth_minbits;u_int16_t sadb_comb_auth_maxbits;u_int16_t sadb_comb_encrypt_minbits;u_int16_t sadb_comb_encrypt_maxbits;u_int32_t sadb_comb_reserved;u_int32_t sadb_comb_soft_allocations;u_int32_t sadb_comb_hard_allocations;u_int64_t sadb_comb_soft_bytes;u_int64_t sadb_comb_hard_bytes;u_int64_t sadb_comb_soft_addtime;u_int64_t sadb_comb_hard_addtime;u_int64_t sadb_comb_soft_usetime;u_int64_t sadb_comb_hard_usetime;};
struct sadb_ext {u_int16_t sadb_ext_len;u_int16_t sadb_ext_type;};
struct sadb_ident {u_int16_t sadb_ident_len;u_int16_t sadb_ident_exttype;u_int16_t sadb_ident_type;u_int16_t sadb_ident_reserved;u_int64_t sadb_ident_id;};
struct sadb_key {u_int16_t sadb_key_len;u_int16_t sadb_key_exttype;u_int16_t sadb_key_bits;u_int16_t sadb_key_reserved;};
struct sadb_lifetime {u_int16_t sadb_lifetime_len;u_int16_t sadb_lifetime_exttype;u_int32_t sadb_lifetime_allocations;u_int64_t sadb_lifetime_bytes;u_int64_t sadb_lifetime_addtime;u_int64_t sadb_lifetime_usetime;};
struct sadb_msg {u_int8_t sadb_msg_version;u_int8_t sadb_msg_type;u_int8_t sadb_msg_errno;u_int8_t sadb_msg_satype;u_int16_t sadb_msg_len;u_int16_t sadb_msg_reserved;u_int32_t sadb_msg_seq;u_int32_t sadb_msg_pid;};
struct sadb_prop {u_int16_t sadb_prop_len;u_int16_t sadb_prop_exttype;u_int8_t sadb_prop_replay;u_int8_t sadb_prop_reserved[3];};
struct sadb_sa {u_int16_t sadb_sa_len;u_int16_t sadb_sa_exttype;u_int32_t sadb_sa_spi;u_int8_t sadb_sa_replay;u_int8_t sadb_sa_state;u_int8_t sadb_sa_auth;u_int8_t sadb_sa_encrypt;u_int32_t sadb_sa_flags;};
struct sadb_sens {u_int16_t sadb_sens_len;u_int16_t sadb_sens_exttype;u_int32_t sadb_sens_dpd;u_int8_t sadb_sens_sens_level;u_int8_t sadb_sens_sens_len;u_int8_t sadb_sens_integ_level;u_int8_t sadb_sens_integ_len;u_int32_t sadb_sens_reserved;};
struct sadb_spirange {u_int16_t sadb_spirange_len;u_int16_t sadb_spirange_exttype;u_int32_t sadb_spirange_min;u_int32_t sadb_spirange_max;u_int32_t sadb_spirange_reserved;};
struct sadb_supported {u_int16_t sadb_supported_len;u_int16_t sadb_supported_exttype;u_int32_t sadb_supported_reserved;};
struct sadb_x_ipsecrequest {u_int16_t sadb_x_ipsecrequest_len;u_int16_t sadb_x_ipsecrequest_proto;u_int8_t sadb_x_ipsecrequest_mode;u_int8_t sadb_x_ipsecrequest_level;u_int16_t sadb_x_ipsecrequest_reqid;};
struct sadb_x_kmprivate {u_int16_t sadb_x_kmprivate_len;u_int16_t sadb_x_kmprivate_exttype;u_int32_t sadb_x_kmprivate_reserved;};
struct sadb_x_policy {u_int16_t sadb_x_policy_len;u_int16_t sadb_x_policy_exttype;u_int16_t sadb_x_policy_type;u_int8_t sadb_x_policy_dir;u_int8_t sadb_x_policy_reserved;u_int32_t sadb_x_policy_id;u_int32_t sadb_x_policy_reserved2;};
struct sadb_x_sa2 {u_int16_t sadb_x_sa2_len;u_int16_t sadb_x_sa2_exttype;u_int8_t sadb_x_sa2_mode;u_int8_t sadb_x_sa2_reserved1;u_int16_t sadb_x_sa2_reserved2;u_int32_t sadb_x_sa2_reserved3;u_int32_t sadb_x_sa2_reqid;};
struct sched_param {int sched_priority;char opaque[4];};
struct screen;
struct searchstate {u_char reserved[556];};
typedef struct $0BA82F063C392BF02AF0AA599B603A12 security_token_t;
typedef int32_t segsz_t;
typedef int __fastcall select_fcn_t(dev_t dev, int which, void *wql, struct proc *p);
struct selinfo {char wait_queue[16];u_int si_flags;};
struct sem {u_short semval;pid_t sempid;u_short semncnt;u_short semzcnt;};
typedef int sem_t;
typedef semaphore_t semaphore_port_t;
typedef mach_port_t semaphore_t;
struct sembuf {u_short sem_num;__int16 sem_op;__int16 sem_flg;};
struct semid_ds {struct ipc_perm sem_perm;struct sem *sem_base;u_short sem_nsems;time_t sem_otime;int sem_pad1;time_t sem_ctime;int sem_pad2;int sem_pad3[4];};
union semun {int val;struct semid_ds *buf;u_short *array;};
struct seqorset;
struct servent {char *s_name;char **s_aliases;int s_port;char *s_proto;};
struct session {int s_count;struct proc *s_leader;struct vnode *s_ttyvp;struct tty *s_ttyp;pid_t s_sid;char s_login[255];};
struct sf_mapping {vm_offset_t mapping_offset;vm_size_t size;vm_offset_t file_offset;vm_prot_t protection;vm_offset_t cksum;};
typedef struct sf_mapping sf_mapping_t;
struct sgttyb {char sg_ispeed;char sg_ospeed;char sg_erase;char sg_kill;__int16 sg_flags;};
struct shmid_ds {struct ipc_perm shm_perm;int shm_segsz;pid_t shm_lpid;pid_t shm_cpid;__int16 shm_nattch;time_t shm_atime;time_t shm_dtime;time_t shm_ctime;void *shm_internal;};
struct short_hand_verf {struct opaque_auth new_cred;};
typedef int sig_atomic_t;
typedef void (__fastcall *sig_t)(int);
struct sigaction {union __sigaction_u __sigaction_u;sigset_t sa_mask;int sa_flags;};
struct sigacts {sig_t ps_sigact[32];sig_t ps_trampact[32];sigset_t ps_catchmask[32];sigset_t ps_sigonstack;sigset_t ps_sigintr;sigset_t ps_sigreset;sigset_t ps_signodefer;sigset_t ps_siginfo;sigset_t ps_oldmask;int ps_flags;struct sigaltstack ps_sigstk;int ps_sig;int ps_code;int ps_addr;sigset_t ps_usertramp;};
struct sigaltstack {char *ss_sp;int ss_size;int ss_flags;};
struct sigcontext {int sc_onstack;int sc_mask;int sc_ir;int sc_psw;int sc_sp;void *sc_regs;};
typedef struct __siginfo siginfo_t;
typedef int sigjmp_buf[193];
typedef unsigned int sigset_t;
struct sigstack {char *ss_sp;int ss_onstack;};
union sigval {int sigval_int;void *sigval_ptr;};
struct sigvec {void (__fastcall *sv_handler)(int);int sv_mask;int sv_flags;};
typedef struct slock simple_lock_data_t;
typedef struct slock *simple_lock_t;
struct sioc_mif_req6 {mifi_t mifi;u_quad_t icount;u_quad_t ocount;u_quad_t ibytes;u_quad_t obytes;};
struct sioc_sg_req {struct in_addr src;struct in_addr grp;u_long pktcnt;u_long bytecnt;u_long wrong_if;};
struct sioc_sg_req6 {struct sockaddr_in6 src;struct sockaddr_in6 grp;u_quad_t pktcnt;u_quad_t bytecnt;u_quad_t wrong_if;};
struct sioc_vif_req {vifi_t vifi;u_long icount;u_long ocount;u_long ibytes;u_long obytes;};
typedef unsigned int size_t;
typedef int sleep_type_t;
struct slock {volatile unsigned int lock_data[10];};
struct sm_name {char *mon_name;};
struct sm_stat {int state;};
struct sm_stat_res {res res_stat;int state;};
struct snmpAarp {time_t at_time;int at_ifno;int at_maxSize;int at_usedSize;snmpAarpEnt_t *at_table;};
struct snmpAarpEnt {struct at_addr ap_ddpAddr;u_char ap_physAddr[6];};
typedef struct snmpAarpEnt snmpAarpEnt_t;
typedef struct snmpAarp snmpAarp_t;
struct snmpCfg {int pad;u_int cfg_flags;int cfg_ifCnt;snmpIfCfg_t cfg_ifCfg[25];};
typedef struct snmpCfg snmpCfg_t;
struct snmpFlags {int lap_changed;int rtmpAdded;int zipAdded;};
typedef struct snmpFlags snmpFlags_t;
struct snmpIfCfg {u_short ifc_aarpSize;u_short ifc_addrSize;u_short ifc_type;at_net_al ifc_start;at_net_al ifc_end;struct at_addr ifc_ddpAddr;u_short ifc_status;u_short ifc_netCfg;u_short ifc_zoneCfg;at_nvestr_t ifc_zoneName;u_short ifc_index;char ifc_name[6];};
typedef struct snmpIfCfg snmpIfCfg_t;
struct snmpNbpEntry {at_nvestr_t nbpe_object;at_nvestr_t nbpe_type;};
typedef struct snmpNbpEntry snmpNbpEntry_t;
struct snmpNbpTable {int nbpt_entries;at_nvestr_t nbpt_zone;snmpNbpEntry_t nbpt_table[1];};
typedef struct snmpNbpTable snmpNbpTable_t;
struct snmpStats {u_int dd_outReq;u_int dd_outShort;u_int dd_outLong;u_int dd_inTotal;u_int dd_fwdReq;u_int dd_inLocal;u_int dd_noHandler;u_int dd_noRoutes;u_int dd_tooShort;u_int dd_tooLong;u_int dd_inBcastErr;u_int dd_shortErr;u_int dd_hopCount;u_int dd_checkSum;u_int ec_echoReq;u_int ec_echoReply;};
typedef struct snmpStats snmpStats_t;
typedef u_quad_t so_gen_t;
struct so_nke {unsigned int nke_handle;unsigned int nke_where;int nke_flags;unsigned int reserved[4];};
struct sockaddr {u_char sa_len;u_char sa_family;char sa_data[14];};
struct sockaddr_at {u_char sat_len;u_char sat_family;u_char sat_port;struct at_addr sat_addr;char sat_zero[8];};
struct sockaddr_ctl {u_char sc_len;u_char sc_family;u_int16_t ss_sysaddr;u_int32_t sc_id;u_int32_t sc_unit;u_int32_t sc_reserved[5];};
struct sockaddr_dl {u_char sdl_len;u_char sdl_family;u_short sdl_index;u_char sdl_type;u_char sdl_nlen;u_char sdl_alen;u_char sdl_slen;char sdl_data[12];};
struct sockaddr_in {u_char sin_len;u_char sin_family;u_short sin_port;struct in_addr sin_addr;char sin_zero[8];};
struct sockaddr_in6 {u_int8_t sin6_len;u_int8_t sin6_family;u_int16_t sin6_port;u_int32_t sin6_flowinfo;struct in6_addr sin6_addr;u_int32_t sin6_scope_id;};
struct sockaddr_inarp {u_char sin_len;u_char sin_family;u_short sin_port;struct in_addr sin_addr;struct in_addr sin_srcaddr;u_short sin_tos;u_short sin_other;};
struct sockaddr_ndrv {unsigned __int8 snd_len;unsigned __int8 snd_family;unsigned __int8 snd_name[16];};
struct sockaddr_storage {u_char ss_len;sa_family_t ss_family;char __ss_pad1[6];int64_t __ss_align;char __ss_pad2[112];};
struct sockaddr_sys {u_char ss_len;u_char ss_family;u_int16_t ss_sysaddr;u_int32_t ss_reserved[7];};
struct sockaddr_un {u_char sun_len;u_char sun_family;char sun_path[104];};
struct sockbuf;
struct sockbuf_io {int (__fastcall *sbi_setup)(Sockbuf_IO_Desc *sbiod, void *arg);int (__fastcall *sbi_remove)(Sockbuf_IO_Desc *sbiod);int (__fastcall *sbi_ctrl)(Sockbuf_IO_Desc *sbiod, int opt, void *arg);ber_slen_t (__fastcall *sbi_read)(Sockbuf_IO_Desc *sbiod, void *buf, ber_len_t len);ber_slen_t (__fastcall *sbi_write)(Sockbuf_IO_Desc *sbiod, void *buf, ber_len_t len);int (__fastcall *sbi_close)(Sockbuf_IO_Desc *sbiod);};
struct sockbuf_io_desc {int sbiod_level;Sockbuf *sbiod_sb;Sockbuf_IO *sbiod_io;void *sbiod_pvt;struct sockbuf_io_desc *sbiod_next;};
struct socket {int so_zone;__int16 so_type;__int16 so_options;__int16 so_linger;__int16 so_state;caddr_t so_pcb;struct protosw *so_proto;struct socket *so_head;struct socket::$AFEF3206CAA9485D49AEFC4398D26EA4 so_incomp;struct socket::$AFEF3206CAA9485D49AEFC4398D26EA4 so_comp;struct socket::$5D41526802DADDD5917221A277AC1B23 so_list;__int16 so_qlen;__int16 so_incqlen;__int16 so_qlimit;__int16 so_timeo;u_short so_error;pid_t so_pgid;u_long so_oobmark;struct socket::sockbuf so_rcv;struct socket::sockbuf so_snd;caddr_t so_tpcb;void (__fastcall *so_upcall)(struct socket *so, caddr_t arg, int waitf);caddr_t so_upcallarg;uid_t so_uid;so_gen_t so_gencnt;struct socket::$AB479C63CDE7BE49808AEC51D91A88D0 so_evlist;int cached_in_sock_layer;struct socket *cache_next;struct socket *cache_prev;u_long cache_timestamp;caddr_t so_saved_pcb;struct mbuf *so_temp;struct mbuf *so_tail;struct kextcb *so_ext;u_long so_flags;void *reserved2;void *reserved3;void *reserved4;};
struct socket::$5D41526802DADDD5917221A277AC1B23 {struct socket *tqe_next;struct socket **tqe_prev;};
struct socket::$AB479C63CDE7BE49808AEC51D91A88D0 {struct eventqelt *tqh_first;struct eventqelt **tqh_last;};
struct socket::$AFEF3206CAA9485D49AEFC4398D26EA4 {struct socket *tqh_first;struct socket **tqh_last;};
struct socket::sockbuf {u_long sb_cc;u_long sb_hiwat;u_long sb_mbcnt;u_long sb_mbmax;int sb_lowat;struct mbuf *sb_mb;struct socket *sb_so;struct selinfo sb_sel;__int16 sb_flags;__int16 sb_timeo;void *reserved1;void *reserved2;};
struct sockif {int (__fastcall *sf_soabort)(struct socket *, struct kextcb *);int (__fastcall *sf_soaccept)(struct socket *, struct sockaddr **, struct kextcb *);int (__fastcall *sf_sobind)(struct socket *, struct sockaddr *, struct kextcb *);int (__fastcall *sf_soclose)(struct socket *, struct kextcb *);int (__fastcall *sf_soconnect)(struct socket *, struct sockaddr *, struct kextcb *);int (__fastcall *sf_soconnect2)(struct socket *, struct socket *, struct kextcb *);int (__fastcall *sf_socontrol)(struct socket *, struct sockopt *, struct kextcb *);int (__fastcall *sf_socreate)(struct socket *, struct protosw *, struct kextcb *);int (__fastcall *sf_sodisconnect)(struct socket *, struct kextcb *);int (__fastcall *sf_sofree)(struct socket *, struct kextcb *);int (__fastcall *sf_sogetopt)(struct socket *, int, int, struct mbuf **, struct kextcb *);int (__fastcall *sf_sohasoutofband)(struct socket *, struct kextcb *);int (__fastcall *sf_solisten)(struct socket *, struct kextcb *);int (__fastcall *sf_soreceive)(struct socket *, struct sockaddr **, struct uio **, struct mbuf **, struct mbuf **, int *, struct kextcb *);int (__fastcall *sf_sorflush)(struct socket *, struct kextcb *);int (__fastcall *sf_sosend)(struct socket *, struct sockaddr **, struct uio **, struct mbuf **, struct mbuf **, int *, struct kextcb *);int (__fastcall *sf_sosetopt)(struct socket *, int, int, struct mbuf *, struct kextcb *);int (__fastcall *sf_soshutdown)(struct socket *, int, struct kextcb *);int (__fastcall *sf_socantrcvmore)(struct socket *, struct kextcb *);int (__fastcall *sf_socantsendmore)(struct socket *, struct kextcb *);int (__fastcall *sf_soisconnected)(struct socket *, struct kextcb *);int (__fastcall *sf_soisconnecting)(struct socket *, struct kextcb *);int (__fastcall *sf_soisdisconnected)(struct socket *, struct kextcb *);int (__fastcall *sf_soisdisconnecting)(struct socket *, struct kextcb *);int (__fastcall *sf_sonewconn)(struct socket *, int, struct kextcb *);int (__fastcall *sf_soqinsque)(struct socket *, struct socket *, int, struct kextcb *);int (__fastcall *sf_soqremque)(struct socket *, int, struct kextcb *);int (__fastcall *sf_soreserve)(struct socket *, u_long, u_long, struct kextcb *);int (__fastcall *sf_sowakeup)(struct socket *, struct sockbuf *, struct kextcb *);u_long reserved[4];};
struct sockopt;
struct sockproto {u_short sp_family;u_short sp_protocol;};
struct sockutil {int (__fastcall *su_sb_lock)(struct sockbuf *, struct kextcb *);int (__fastcall *su_sbappend)(struct sockbuf *, struct mbuf *, struct kextcb *);int (__fastcall *su_sbappendaddr)(struct sockbuf *, struct sockaddr *, struct mbuf *, struct mbuf *, struct kextcb *);int (__fastcall *su_sbappendcontrol)(struct sockbuf *, struct mbuf *, struct mbuf *, struct kextcb *);int (__fastcall *su_sbappendrecord)(struct sockbuf *, struct mbuf *, struct kextcb *);int (__fastcall *su_sbcompress)(struct sockbuf *, struct mbuf *, struct mbuf *, struct kextcb *);int (__fastcall *su_sbdrop)(struct sockbuf *, int, struct kextcb *);int (__fastcall *su_sbdroprecord)(struct sockbuf *, struct kextcb *);int (__fastcall *su_sbflush)(struct sockbuf *, struct kextcb *);int (__fastcall *su_sbinsertoob)(struct sockbuf *, struct mbuf *, struct kextcb *);int (__fastcall *su_sbrelease)(struct sockbuf *, struct kextcb *);int (__fastcall *su_sbreserve)(struct sockbuf *, u_long, struct kextcb *);int (__fastcall *su_sbwait)(struct sockbuf *, struct kextcb *);u_long reserved[4];};
typedef unsigned int space_t;
typedef int speed_t;
struct speedtab {int sp_speed;int sp_code;};
typedef struct $C9793B2A88A40550F3E6FCBE57C78800 sprayarr;
struct spraycumul {u_int counter;spraytimeval clock;};
struct spraytimeval {u_int sec;u_int usec;};
typedef int ssize_t;
typedef struct sigaltstack stack_t;
struct stat {dev_t st_dev;ino_t st_ino;mode_t st_mode;nlink_t st_nlink;uid_t st_uid;gid_t st_gid;dev_t st_rdev;struct timespec st_atimespec;struct timespec st_mtimespec;struct timespec st_ctimespec;off_t st_size;int64_t st_blocks;u_int32_t st_blksize;u_int32_t st_flags;u_int32_t st_gen;int32_t st_lspare;int64_t st_qspare[2];};
typedef stat_t *stat_ptr_t;
typedef struct $615D5DC9703294F0ED919D7F4D86FFE9 stat_t;
struct statfs {__int16 f_otype;__int16 f_oflags;int f_bsize;int f_iosize;int f_blocks;int f_bfree;int f_bavail;int f_files;int f_ffree;fsid_t f_fsid;uid_t f_owner;__int16 f_reserved1;__int16 f_type;int f_flags;int f_reserved2[2];char f_fstypename[15];char f_mntonname[90];char f_mntfromname[90];char f_reserved3;int f_reserved4[4];};
struct status {char *mon_name;int state;char priv[16];};
typedef int __fastcall stop_fcn_t(struct tty *tp, int rw);
typedef void __fastcall strategy_fcn_t(struct buf *bp);
typedef struct $CFAAAE27EC8C29B8B6ACAB4EED048F33 strbuf_t;
struct svc_req {u_long rq_prog;u_long rq_vers;u_long rq_proc;struct opaque_auth rq_cred;caddr_t rq_clntcred;SVCXPRT *rq_xprt;};
typedef int32_t swblk_t;
struct swdevt {dev_t sw_dev;int sw_flags;int sw_nblks;struct vnode *sw_vp;};
typedef char symtab_name_t[32];
typedef int sync_policy_t;
struct tagDATE_STRUCT {SQLSMALLINT year;SQLUSMALLINT month;SQLUSMALLINT day;};
struct tagITEM {TEXT name;TEXT description;struct tagMENU *imenu;void *userptr;Item_Options opt;__int16 index;__int16 y;__int16 x;NCURSES_BOOL value;struct tagITEM *left;struct tagITEM *right;struct tagITEM *up;struct tagITEM *down;};
struct tagMENU {__int16 height;__int16 width;__int16 rows;__int16 cols;__int16 frows;__int16 fcols;__int16 arows;__int16 namelen;__int16 desclen;__int16 marklen;__int16 itemlen;__int16 spc_desc;__int16 spc_cols;__int16 spc_rows;char *pattern;__int16 pindex;WINDOW *win;WINDOW *sub;WINDOW *userwin;WINDOW *usersub;ITEM **items;__int16 nitems;ITEM *curitem;__int16 toprow;chtype fore;chtype back;chtype grey;unsigned __int8 pad;Menu_Hook menuinit;Menu_Hook menuterm;Menu_Hook iteminit;Menu_Hook itemterm;void *userptr;char *mark;Menu_Options opt;unsigned __int16 status;};
struct tagSQL_DAY_SECOND {SQLUINTEGER day;SQLUINTEGER hour;SQLUINTEGER minute;SQLUINTEGER second;SQLUINTEGER fraction;};
struct tagSQL_INTERVAL_STRUCT {SQLINTERVAL interval_type;SQLSMALLINT interval_sign;union tagSQL_INTERVAL_STRUCT::$E0CBF60BBC76AAAF9CF29F3CBADF463C intval;};
union tagSQL_INTERVAL_STRUCT::$E0CBF60BBC76AAAF9CF29F3CBADF463C {SQL_YEAR_MONTH_STRUCT year_month;SQL_DAY_SECOND_STRUCT day_second;};
struct tagSQL_NUMERIC_STRUCT {SQLCHAR precision;SQLSCHAR scale;SQLCHAR sign;SQLCHAR val[16];};
struct tagSQL_YEAR_MONTH {SQLUINTEGER year;SQLUINTEGER month;};
struct tagTIMESTAMP_STRUCT {SQLSMALLINT year;SQLUSMALLINT month;SQLUSMALLINT day;SQLUSMALLINT hour;SQLUSMALLINT minute;SQLUSMALLINT second;SQLUINTEGER fraction;};
struct tagTIME_STRUCT {SQLUSMALLINT hour;SQLUSMALLINT minute;SQLUSMALLINT second;};
struct tailq_head {struct tqdummy *tqh_first;struct tqdummy **tqh_last;};
typedef task_t *task_array_t;
struct task_basic_info {integer_t suspend_count;vm_size_t virtual_size;vm_size_t resident_size;time_value_t user_time;time_value_t system_time;policy_t policy;};
typedef struct task_basic_info task_basic_info_data_t;
typedef struct task_basic_info *task_basic_info_t;
struct task_category_policy {task_role_t role;};
typedef struct task_category_policy task_category_policy_data_t;
typedef struct task_category_policy *task_category_policy_t;
struct task_events_info {integer_t faults;integer_t pageins;integer_t cow_faults;integer_t messages_sent;integer_t messages_received;integer_t syscalls_mach;integer_t syscalls_unix;integer_t csw;};
typedef struct task_events_info task_events_info_data_t;
typedef struct task_events_info *task_events_info_t;
typedef natural_t task_flavor_t;
typedef integer_t task_info_data_t[1024];
typedef integer_t *task_info_t;
typedef natural_t task_policy_flavor_t;
typedef integer_t *task_policy_t;
typedef task_array_t task_port_array_t;
typedef task_t task_port_t;
enum task_role {TASK_RENICED = 0xFFFFFFFF,TASK_UNSPECIFIED = 0x0,TASK_FOREGROUND_APPLICATION = 0x1,TASK_BACKGROUND_APPLICATION = 0x2,TASK_CONTROL_APPLICATION = 0x3,TASK_GRAPHICS_SERVER = 0x4,};
typedef enum task_role task_role_t;
typedef int task_special_port_t;
typedef mach_port_t task_t;
struct task_thread_times_info {time_value_t user_time;time_value_t system_time;};
typedef struct task_thread_times_info task_thread_times_info_data_t;
typedef struct task_thread_times_info *task_thread_times_info_t;
struct tbf {struct timeval tbf_last_pkt_t;u_long tbf_n_tok;u_long tbf_q_len;u_long tbf_max_q_len;struct mbuf *tbf_q;struct mbuf *tbf_t;};
typedef unsigned int tcflag_t;
struct tchars {char t_intrc;char t_quitc;char t_startc;char t_stopc;char t_eofc;char t_brkc;};
typedef u_int32_t tcp_cc;
typedef u_int32_t tcp_seq;
struct tcpd_context {char *file;int line;};
struct tcphdr {u_short th_sport;u_short th_dport;tcp_seq th_seq;tcp_seq th_ack;unsigned __int32 th_off : 4;unsigned __int32 th_x2 : 4;u_char th_flags;u_short th_win;u_short th_sum;u_short th_urp;};
struct term {TERMTYPE type;__int16 Filedes;struct termios Ottyb;struct termios Nttyb;int _baudrate;};
struct termios {tcflag_t c_iflag;tcflag_t c_oflag;tcflag_t c_cflag;tcflag_t c_lflag;cc_t c_cc[20];speed_t c_ispeed;speed_t c_ospeed;};
struct termtype {char *term_names;char *str_table;char *Booleans;__int16 *Numbers;char **Strings;char *ext_str_table;char **ext_Names;unsigned __int16 num_Booleans;unsigned __int16 num_Numbers;unsigned __int16 num_Strings;unsigned __int16 ext_Booleans;unsigned __int16 ext_Numbers;unsigned __int16 ext_Strings;};
typedef u_int32_t text_encoding_t;
struct tftphdr {__int16 th_opcode;union tftphdr::$E231DD2B7A2AA83F99CCA027C312551B th_u;char th_data[1];};
union tftphdr::$E231DD2B7A2AA83F99CCA027C312551B {__int16 tu_block;__int16 tu_code;char tu_stuff[1];};
typedef thread_act_t *thread_act_array_t;
typedef thread_act_array_t thread_act_port_array_t;
typedef thread_act_t thread_act_port_t;
typedef mach_port_t thread_act_t;
typedef thread_t *thread_array_t;
struct thread_basic_info {time_value_t user_time;time_value_t system_time;integer_t cpu_usage;policy_t policy;integer_t run_state;integer_t flags;integer_t suspend_count;integer_t sleep_time;};
typedef struct thread_basic_info thread_basic_info_data_t;
typedef struct thread_basic_info *thread_basic_info_t;
struct thread_extended_policy {boolean_t timeshare;};
typedef struct thread_extended_policy thread_extended_policy_data_t;
typedef struct thread_extended_policy *thread_extended_policy_t;
typedef natural_t thread_flavor_t;
typedef integer_t thread_info_data_t[1024];
typedef integer_t *thread_info_t;
typedef natural_t thread_policy_flavor_t;
typedef integer_t *thread_policy_t;
typedef thread_array_t thread_port_array_t;
typedef thread_t thread_port_t;
struct thread_precedence_policy {integer_t importance;};
typedef struct thread_precedence_policy thread_precedence_policy_data_t;
typedef struct thread_precedence_policy *thread_precedence_policy_t;
struct thread_standard_policy {natural_t no_data;};
typedef struct thread_standard_policy thread_standard_policy_data_t;
typedef struct thread_standard_policy *thread_standard_policy_t;
typedef int thread_state_data_t[144];
typedef thread_state_flavor_t *thread_state_flavor_array_t;
typedef int thread_state_flavor_t;
typedef natural_t *thread_state_t;
typedef mach_port_t thread_t;
struct thread_time_constraint_policy {uint32_t period;uint32_t computation;uint32_t constraint;boolean_t preemptible;};
typedef struct thread_time_constraint_policy thread_time_constraint_policy_data_t;
typedef struct thread_time_constraint_policy *thread_time_constraint_policy_t;
typedef int time_t;
struct time_value {integer_t seconds;integer_t microseconds;};
typedef struct time_value time_value_t;
struct timeb {time_t time;unsigned __int16 millitm;__int16 timezone;__int16 dstflag;};
struct timespec {time_t tv_sec;int tv_nsec;};
struct timeval {int32_t tv_sec;int32_t tv_usec;};
struct timezone {int tz_minuteswest;int tz_dsttime;};
struct tm {int tm_sec;int tm_min;int tm_hour;int tm_mday;int tm_mon;int tm_year;int tm_wday;int tm_yday;int tm_isdst;int tm_gmtoff;char *tm_zone;};
struct tms {clock_t tms_utime;clock_t tms_stime;clock_t tms_cutime;clock_t tms_cstime;};
struct tostruct {u_long selfpc;int count;u_short link;u_short order;};
struct tpb {unsigned __int32 Valid : 1;unsigned __int16 TransThresh;unsigned int TransTimerIntrvl;unsigned __int16 SndWdwCloThresh;unsigned int SndWdwCloIntrvl;unsigned __int8 SndWdwCloBckoff;unsigned int ReTransIntrvl;unsigned __int8 ReTransBckoff;unsigned int RestartIntrvl;unsigned __int8 RestartBckoff;unsigned int SndQBufSize;unsigned __int16 RcvQMaxSize;unsigned __int16 RcvQCpyThresh;unsigned int FwdRstIntrvl;unsigned __int8 FwdRstBckoff;unsigned int AttnIntrvl;unsigned __int8 AttnBckoff;unsigned int OpenIntrvl;unsigned __int8 OpenMaxRetry;unsigned __int8 RetransThresh;unsigned int ProbeRetryMax;unsigned int SndByteCntMax;};
typedef struct session *tpr_t;
struct tqdummy;
struct tsp {u_char tsp_type;u_char tsp_vers;u_short tsp_seq;union tsp::$E78A65B7E52D74DB905DCAA7AEC02B40 tsp_u;char tsp_name[256];};
union tsp::$E78A65B7E52D74DB905DCAA7AEC02B40 {struct timeval tspu_time;char tspu_hopcnt;};
struct tty {struct clist t_rawq;int t_rawcc;struct clist t_canq;int t_cancc;struct clist t_outq;int t_outcc;int t_line;dev_t t_dev;int t_state;int t_flags;int t_timeout;struct pgrp *t_pgrp;struct session *t_session;struct selinfo t_rsel;struct selinfo t_wsel;struct termios t_termios;struct winsize t_winsize;void (__fastcall *t_oproc)(struct tty *);void (__fastcall *t_stop)(struct tty *, int);int (__fastcall *t_param)(struct tty *, struct termios *);void *t_sc;int t_column;int t_rocount;int t_rocol;int t_hiwat;int t_lowat;int t_gen;};
struct ttychars {char tc_erase;char tc_kill;char tc_intrc;char tc_quitc;char tc_startc;char tc_stopc;char tc_eofc;char tc_brkc;char tc_suspc;char tc_dsuspc;char tc_rprntc;char tc_flushc;char tc_werasc;char tc_lnextc;};
struct ttyent {char *ty_name;char *ty_getty;char *ty_type;int ty_status;char *ty_window;char *ty_onerror;char *ty_onoption;char *ty_comment;};
struct ttysize {unsigned __int16 ts_lines;unsigned __int16 ts_cols;unsigned __int16 ts_xxx;unsigned __int16 ts_yyy;};
struct typenode {unsigned __int16 status;int ref;struct typenode *left;struct typenode *right;void *(__fastcall *makearg)(va_list *);void *(__fastcall *copyarg)(const void *);void (__fastcall *freearg)(void *);NCURSES_BOOL (__fastcall *fcheck)(FIELD *, const void *);NCURSES_BOOL (__fastcall *ccheck)(int, const void *);NCURSES_BOOL (__fastcall *next)(FIELD *, const void *);NCURSES_BOOL (__fastcall *prev)(FIELD *, const void *);};
struct tzhead {char tzh_reserved[24];char tzh_ttisstdcnt[4];char tzh_leapcnt[4];char tzh_timecnt[4];char tzh_typecnt[4];char tzh_charcnt[4];};
typedef unsigned __int8 u_char;
typedef unsigned int u_int;
typedef unsigned __int16 u_int16_t;
typedef u_long u_int32;
typedef unsigned int u_int32_t;
typedef unsigned __int64 u_int64_t;
typedef unsigned __int8 u_int8_t;
typedef unsigned int u_long;
typedef u_int64_t u_quad_t;
typedef unsigned __int16 u_short;
typedef u_char ua_long[4];
typedef u_char ua_short[2];
struct ubc_info {memory_object_t ui_pager;memory_object_control_t ui_control;int ui_flags;struct vnode *ui_vnode;struct ucred *ui_ucred;int ui_refcount;off_t ui_size;int ui_mapped;};
struct ucontext {int uc_onstack;sigset_t uc_sigmask;stack_t uc_stack;struct ucontext *uc_link;size_t uc_mcsize;mcontext_t uc_mcontext;};
typedef struct ucontext ucontext_t;
struct ucred {u_long cr_ref;uid_t cr_uid;__int16 cr_ngroups;gid_t cr_groups[16];};
struct udphdr {u_short uh_sport;u_short uh_dport;u_short uh_ulen;u_short uh_sum;};
typedef u_int32_t uid_t;
typedef unsigned int uint;
typedef u_int16_t uint16_t;
typedef u_int32_t uint32_t;
typedef u_int64_t uint64_t;
typedef u_int8_t uint8_t;
typedef uint16_t uint_fast16_t;
typedef uint32_t uint_fast32_t;
typedef uint64_t uint_fast64_t;
typedef uint8_t uint_fast8_t;
typedef uint16_t uint_least16_t;
typedef uint32_t uint_least32_t;
typedef uint64_t uint_least64_t;
typedef uint8_t uint_least8_t;
typedef unsigned __int64 uintmax_t;
typedef unsigned int uintptr_t;
struct uio;
enum uio_rw {UIO_READ = 0x0,UIO_WRITE = 0x1,};
enum uio_seg {UIO_USERSPACE = 0x0,UIO_USERISPACE = 0x1,UIO_SYSSPACE = 0x2,UIO_PHYS_USERSPACE = 0x3,};
struct union_args {char *target;int mntflags;};
struct union_mount {struct vnode *um_uppervp;struct vnode *um_lowervp;struct ucred *um_cred;int um_cmode;int um_op;};
typedef u_quad_t unp_gen_t;
struct unp_head {struct unpcb *lh_first;};
struct unpcb {struct unpcb::$F49BFCA1BB272903C3EC88F2E52ACDC0 unp_link;struct socket *unp_socket;struct vnode *unp_vnode;ino_t unp_ino;struct unpcb *unp_conn;struct unp_head unp_refs;struct unpcb::$F49BFCA1BB272903C3EC88F2E52ACDC0 unp_reflink;struct sockaddr_un *unp_addr;int unp_cc;int unp_mbcnt;unp_gen_t unp_gencnt;};
struct unpcb::$F49BFCA1BB272903C3EC88F2E52ACDC0 {struct unpcb *le_next;struct unpcb **le_prev;};
struct upl_page_info {vm_offset_t phys_addr;unsigned __int32 pageout : 1;unsigned __int32 absent : 1;unsigned __int32 dirty : 1;unsigned __int32 precious : 1;unsigned __int32 device : 1;};
typedef upl_page_info_t *upl_page_info_array_t;
typedef struct upl_page_info upl_page_info_t;
typedef upl_page_info_array_t upl_page_list_ptr_t;
typedef mach_port_t upl_t;
typedef char *user_subsystem_t;
typedef unsigned __int16 ushort;
struct utimbuf {time_t actime;time_t modtime;};
struct utmp {char ut_line[8];char ut_name[8];char ut_host[16];int ut_time;};
typedef struct $19DEE1C64F7EC3DDB040A3404BEC0D9F utmp_array;
struct utmparr {struct utmp **uta_arr;int uta_cnt;};
struct utmpidle {struct ru_utmp ui_utmp;unsigned int ui_idle;};
struct utmpidlearr {struct utmpidle **uia_arr;int uia_cnt;};
struct utsname {char sysname[256];char nodename[256];char release[256];char version[256];char machine[256];};
struct v_cluster {unsigned int start_pg;unsigned int last_pg;};
struct v_padded_clusters {int v_pad;struct v_cluster v_c[4];};
typedef __gnuc_va_list va_list;
typedef struct $0D364CBB4DE5622667695AC90920144B valdat;
struct vattr {enum vtype va_type;u_short va_mode;__int16 va_nlink;uid_t va_uid;gid_t va_gid;int va_fsid;int va_fileid;u_quad_t va_size;int va_blocksize;struct timespec va_atime;struct timespec va_mtime;struct timespec va_ctime;u_long va_gen;u_long va_flags;dev_t va_rdev;u_quad_t va_bytes;u_quad_t va_filerev;u_int va_vaflags;int va_spare;};
struct vfsconf {struct vfsops *vfc_vfsops;char vfc_name[15];int vfc_typenum;int vfc_refcount;int vfc_flags;int (*vfc_mountroot)(void);struct vfsconf *vfc_next;};
struct vfsops;
struct vif {u_char v_flags;u_char v_threshold;u_int v_rate_limit;struct tbf *v_tbf;struct in_addr v_lcl_addr;struct in_addr v_rmt_addr;struct ifnet *v_ifp;u_long v_pkt_in;u_long v_pkt_out;u_long v_bytes_in;u_long v_bytes_out;struct route v_route;u_int v_rsvp_on;struct socket *v_rsvpd;};
typedef u_long vifbitmap_t;
struct vifctl {vifi_t vifc_vifi;u_char vifc_flags;u_char vifc_threshold;u_int vifc_rate_limit;struct in_addr vifc_lcl_addr;struct in_addr vifc_rmt_addr;};
typedef u_short vifi_t;
typedef vm_offset_t vm_address_t;
typedef int vm_behavior_t;
struct vm_info_object {vm_offset_t vio_object;vm_size_t vio_size;unsigned int vio_ref_count;unsigned int vio_resident_page_count;unsigned int vio_absent_count;vm_offset_t vio_copy;vm_offset_t vio_shadow;vm_offset_t vio_shadow_offset;vm_offset_t vio_paging_offset;memory_object_copy_strategy_t vio_copy_strategy;vm_offset_t vio_last_alloc;unsigned int vio_paging_in_progress;boolean_t vio_pager_created;boolean_t vio_pager_initialized;boolean_t vio_pager_ready;boolean_t vio_can_persist;boolean_t vio_internal;boolean_t vio_temporary;boolean_t vio_alive;boolean_t vio_lock_in_progress;boolean_t vio_lock_restart;};
typedef vm_info_object_t *vm_info_object_array_t;
typedef struct vm_info_object vm_info_object_t;
struct vm_info_region {vm_offset_t vir_start;vm_offset_t vir_end;vm_offset_t vir_object;vm_offset_t vir_offset;boolean_t vir_needs_copy;vm_prot_t vir_protection;vm_prot_t vir_max_protection;vm_inherit_t vir_inheritance;natural_t vir_wired_count;natural_t vir_user_wired_count;};
struct vm_info_region_64 {vm_offset_t vir_start;vm_offset_t vir_end;vm_offset_t vir_object;vm_object_offset_t vir_offset;boolean_t vir_needs_copy;vm_prot_t vir_protection;vm_prot_t vir_max_protection;vm_inherit_t vir_inheritance;natural_t vir_wired_count;natural_t vir_user_wired_count;};
typedef struct vm_info_region_64 vm_info_region_64_t;
typedef struct vm_info_region vm_info_region_t;
typedef unsigned int vm_inherit_t;
typedef unsigned int vm_machine_attribute_t;
typedef int vm_machine_attribute_val_t;
typedef mach_port_t vm_map_t;
typedef mach_port_t vm_named_entry_t;
typedef uint64_t vm_object_offset_t;
typedef natural_t vm_offset_t;
typedef int vm_prot_t;
struct vm_read_entry {vm_address_t address;vm_size_t size;};
typedef struct vm_read_entry vm_read_entry_t[256];
struct vm_region_basic_info {vm_prot_t protection;vm_prot_t max_protection;vm_inherit_t inheritance;boolean_t shared;boolean_t reserved;vm_offset_t offset;vm_behavior_t behavior;unsigned __int16 user_wired_count;};
struct vm_region_basic_info_64 {vm_prot_t protection;vm_prot_t max_protection;vm_inherit_t inheritance;boolean_t shared;boolean_t reserved;vm_object_offset_t offset;vm_behavior_t behavior;unsigned __int16 user_wired_count;};
typedef struct vm_region_basic_info_64 *vm_region_basic_info_64_t;
typedef struct vm_region_basic_info_64 vm_region_basic_info_data_64_t;
typedef struct vm_region_basic_info vm_region_basic_info_data_t;
typedef struct vm_region_basic_info *vm_region_basic_info_t;
struct vm_region_extended_info {vm_prot_t protection;unsigned int user_tag;unsigned int pages_resident;unsigned int pages_shared_now_private;unsigned int pages_swapped_out;unsigned int pages_dirtied;unsigned int ref_count;unsigned __int16 shadow_depth;unsigned __int8 external_pager;unsigned __int8 share_mode;};
typedef struct vm_region_extended_info vm_region_extended_info_data_t;
typedef struct vm_region_extended_info *vm_region_extended_info_t;
typedef int vm_region_flavor_t;
typedef int *vm_region_info_64_t;
typedef int vm_region_info_data_t[1024];
typedef int *vm_region_info_t;
typedef int *vm_region_recurse_info_64_t;
typedef int *vm_region_recurse_info_t;
struct vm_region_submap_info {vm_prot_t protection;vm_prot_t max_protection;vm_inherit_t inheritance;vm_offset_t offset;unsigned int user_tag;unsigned int pages_resident;unsigned int pages_shared_now_private;unsigned int pages_swapped_out;unsigned int pages_dirtied;unsigned int ref_count;unsigned __int16 shadow_depth;unsigned __int8 external_pager;unsigned __int8 share_mode;boolean_t is_submap;vm_behavior_t behavior;vm_offset_t object_id;unsigned __int16 user_wired_count;};
struct vm_region_submap_info_64 {vm_prot_t protection;vm_prot_t max_protection;vm_inherit_t inheritance;vm_object_offset_t offset;unsigned int user_tag;unsigned int pages_resident;unsigned int pages_shared_now_private;unsigned int pages_swapped_out;unsigned int pages_dirtied;unsigned int ref_count;unsigned __int16 shadow_depth;unsigned __int8 external_pager;unsigned __int8 share_mode;boolean_t is_submap;vm_behavior_t behavior;vm_offset_t object_id;unsigned __int16 user_wired_count;};
typedef struct vm_region_submap_info_64 *vm_region_submap_info_64_t;
typedef struct vm_region_submap_info_64 vm_region_submap_info_data_64_t;
typedef struct vm_region_submap_info vm_region_submap_info_data_t;
typedef struct vm_region_submap_info *vm_region_submap_info_t;
struct vm_region_top_info {unsigned int obj_id;unsigned int ref_count;unsigned int private_pages_resident;unsigned int shared_pages_resident;unsigned __int8 share_mode;};
typedef struct vm_region_top_info vm_region_top_info_data_t;
typedef struct vm_region_top_info *vm_region_top_info_t;
typedef natural_t vm_size_t;
struct vm_statistics {integer_t free_count;integer_t active_count;integer_t inactive_count;integer_t wire_count;integer_t zero_fill_count;integer_t reactivations;integer_t pageins;integer_t pageouts;integer_t faults;integer_t cow_faults;integer_t lookups;integer_t hits;};
typedef struct vm_statistics vm_statistics_data_t;
typedef struct vm_statistics *vm_statistics_t;
typedef unsigned int vm_sync_t;
typedef mach_port_t vm_task_entry_t;
struct vmmeter {u_int v_swtch;u_int v_trap;u_int v_syscall;u_int v_intr;u_int v_soft;u_int v_faults;u_int v_lookups;u_int v_hits;u_int v_vm_faults;u_int v_cow_faults;u_int v_swpin;u_int v_swpout;u_int v_pswpin;u_int v_pswpout;u_int v_pageins;u_int v_pageouts;u_int v_pgpgin;u_int v_pgpgout;u_int v_intrans;u_int v_reactivated;u_int v_rev;u_int v_scan;u_int v_dfree;u_int v_pfree;u_int v_zfod;u_int v_nzfod;u_int v_page_size;u_int v_kernel_pages;u_int v_free_target;u_int v_free_min;u_int v_free_count;u_int v_wire_count;u_int v_active_count;u_int v_inactive_target;u_int v_inactive_count;};
struct vmspace {int vm_refcnt;caddr_t vm_shm;segsz_t vm_rssize;segsz_t vm_swrss;segsz_t vm_tsize;segsz_t vm_dsize;segsz_t vm_ssize;caddr_t vm_taddr;caddr_t vm_daddr;caddr_t vm_maxsaddr;};
struct vmtotal {int16_t t_rq;int16_t t_dw;int16_t t_pw;int16_t t_sl;int16_t t_sw;int32_t t_vm;int32_t t_avm;int32_t t_rm;int32_t t_arm;int32_t t_vmshr;int32_t t_avmshr;int32_t t_rmshr;int32_t t_armshr;int32_t t_free;};
struct vnode {u_long v_flag;int v_usecount;int v_holdcnt;daddr_t v_lastr;u_long v_id;struct mount *v_mount;int (__fastcall **v_op)(void *);struct vnode::$D6552E0CA2B1A6AD8E3161F1937C62ED v_freelist;struct vnode::$DB8796C2454B789B488D63848653D617 v_mntvnodes;struct buflists v_cleanblkhd;struct buflists v_dirtyblkhd;int v_numoutput;enum vtype v_type;union vnode::$27CCD08ED2DF83E06F2C5E2AAF7CC15F v_un;struct ubc_info *v_ubcinfo;struct nqlease *v_lease;daddr_t v_lastw;daddr_t v_cstart;daddr_t v_ciosiz;int v_clen;int v_ralen;daddr_t v_maxra;union vnode::$139029758497DBCE8B8407647C445FA3 v_un1;struct lock__bsd__ *v_vnlock;int v_writecount;enum vtagtype v_tag;void *v_data;};
union vnode::$139029758497DBCE8B8407647C445FA3 {simple_lock_data_t v_ilk;struct v_padded_clusters v_cl;};
union vnode::$27CCD08ED2DF83E06F2C5E2AAF7CC15F {struct mount *vu_mountedhere;struct socket *vu_socket;struct specinfo *vu_specinfo;struct fifoinfo *vu_fifoinfo;};
struct vnode::$D6552E0CA2B1A6AD8E3161F1937C62ED {struct vnode *tqe_next;struct vnode **tqe_prev;};
struct vnode::$DB8796C2454B789B488D63848653D617 {struct vnode *le_next;struct vnode **le_prev;};
struct vnodelst {struct vnode *lh_first;};
struct vnodeop_desc {int vdesc_offset;char *vdesc_name;int vdesc_flags;int *vdesc_vp_offsets;int vdesc_vpp_offset;int vdesc_cred_offset;int vdesc_proc_offset;int vdesc_componentname_offset;caddr_t *vdesc_transports;};
struct vol_attributes_attr {attribute_set_t validattr;attribute_set_t nativeattr;};
typedef struct vol_attributes_attr vol_attributes_attr_t;
struct vol_capabilities_attr {vol_capabilities_set_t capabilities;vol_capabilities_set_t valid;};
typedef struct vol_capabilities_attr vol_capabilities_attr_t;
typedef u_int32_t vol_capabilities_set_t[4];
struct vop_abortop_args {struct vnodeop_desc *a_desc;struct vnode *a_dvp;struct componentname *a_cnp;};
struct vop_access_args {struct vnodeop_desc *a_desc;struct vnode *a_vp;int a_mode;struct ucred *a_cred;struct proc *a_p;};
struct vop_advlock_args {struct vnodeop_desc *a_desc;struct vnode *a_vp;caddr_t a_id;int a_op;struct flock *a_fl;int a_flags;};
struct vop_allocate_args {struct vnodeop_desc *a_desc;struct vnode *a_vp;off_t a_length;u_int32_t a_flags;off_t *a_bytesallocated;off_t a_offset;struct ucred *a_cred;struct proc *a_p;};
struct vop_blkatoff_args {struct vnodeop_desc *a_desc;struct vnode *a_vp;off_t a_offset;char **a_res;struct buf **a_bpp;};
struct vop_blktooff_args {struct vnodeop_desc *a_desc;struct vnode *a_vp;daddr_t a_lblkno;off_t *a_offset;};
struct vop_bmap_args {struct vnodeop_desc *a_desc;struct vnode *a_vp;daddr_t a_bn;struct vnode **a_vpp;daddr_t *a_bnp;int *a_runp;};
struct vop_bwrite_args {struct vnodeop_desc *a_desc;struct buf *a_bp;};
struct vop_cachedlookup_args {struct vnodeop_desc *a_desc;struct vnode *a_dvp;struct vnode **a_vpp;struct componentname *a_cnp;};
struct vop_close_args {struct vnodeop_desc *a_desc;struct vnode *a_vp;int a_fflag;struct ucred *a_cred;struct proc *a_p;};
struct vop_cmap_args {struct vnodeop_desc *a_desc;struct vnode *a_vp;off_t a_foffset;size_t a_size;daddr_t *a_bpn;size_t *a_run;void *a_poff;};
struct vop_copyfile_args {struct vnodeop_desc *a_desc;struct vnode *a_fvp;struct vnode *a_tdvp;struct vnode *a_tvp;struct componentname *a_tcnp;int a_mode;int a_flags;};
struct vop_create_args {struct vnodeop_desc *a_desc;struct vnode *a_dvp;struct vnode **a_vpp;struct componentname *a_cnp;struct vattr *a_vap;};
struct vop_devblocksize_args {struct vnodeop_desc *a_desc;struct vnode *a_vp;register_t *a_retval;};
struct vop_exchange_args {struct vnodeop_desc *a_desc;struct vnode *a_fvp;struct vnode *a_tvp;struct ucred *a_cred;struct proc *a_p;};
struct vop_fsync_args {struct vnodeop_desc *a_desc;struct vnode *a_vp;struct ucred *a_cred;int a_waitfor;struct proc *a_p;};
struct vop_getattr_args {struct vnodeop_desc *a_desc;struct vnode *a_vp;struct vattr *a_vap;struct ucred *a_cred;struct proc *a_p;};
struct vop_getattrlist_args {struct vnodeop_desc *a_desc;struct vnode *a_vp;struct attrlist *a_alist;struct uio *a_uio;struct ucred *a_cred;struct proc *a_p;};
struct vop_inactive_args {struct vnodeop_desc *a_desc;struct vnode *a_vp;struct proc *a_p;};
struct vop_ioctl_args {struct vnodeop_desc *a_desc;struct vnode *a_vp;u_long a_command;caddr_t a_data;int a_fflag;struct ucred *a_cred;struct proc *a_p;};
struct vop_islocked_args {struct vnodeop_desc *a_desc;struct vnode *a_vp;};
struct vop_lease_args {struct vnodeop_desc *a_desc;struct vnode *a_vp;struct proc *a_p;struct ucred *a_cred;int a_flag;};
struct vop_link_args {struct vnodeop_desc *a_desc;struct vnode *a_vp;struct vnode *a_tdvp;struct componentname *a_cnp;};
struct vop_lock_args {struct vnodeop_desc *a_desc;struct vnode *a_vp;int a_flags;struct proc *a_p;};
struct vop_lookup_args {struct vnodeop_desc *a_desc;struct vnode *a_dvp;struct vnode **a_vpp;struct componentname *a_cnp;};
struct vop_mkcomplex_args {struct vnodeop_desc *a_desc;struct vnode *a_dvp;struct vnode **a_vpp;struct componentname *a_cnp;struct vattr *a_vap;u_long a_type;};
struct vop_mkdir_args {struct vnodeop_desc *a_desc;struct vnode *a_dvp;struct vnode **a_vpp;struct componentname *a_cnp;struct vattr *a_vap;};
struct vop_mknod_args {struct vnodeop_desc *a_desc;struct vnode *a_dvp;struct vnode **a_vpp;struct componentname *a_cnp;struct vattr *a_vap;};
struct vop_mmap_args {struct vnodeop_desc *a_desc;struct vnode *a_vp;int a_fflags;struct ucred *a_cred;struct proc *a_p;};
struct vop_offtoblk_args {struct vnodeop_desc *a_desc;struct vnode *a_vp;off_t a_offset;daddr_t *a_lblkno;};
struct vop_open_args {struct vnodeop_desc *a_desc;struct vnode *a_vp;int a_mode;struct ucred *a_cred;struct proc *a_p;};
struct vop_pagein_args {struct vnodeop_desc *a_desc;struct vnode *a_vp;upl_t a_pl;vm_offset_t a_pl_offset;off_t a_f_offset;size_t a_size;struct ucred *a_cred;int a_flags;};
struct vop_pageout_args {struct vnodeop_desc *a_desc;struct vnode *a_vp;upl_t a_pl;vm_offset_t a_pl_offset;off_t a_f_offset;size_t a_size;struct ucred *a_cred;int a_flags;};
struct vop_pathconf_args {struct vnodeop_desc *a_desc;struct vnode *a_vp;int a_name;register_t *a_retval;};
struct vop_pgrd_args {struct vnodeop_desc *a_desc;struct vnode *a_vp;struct uio *a_uio;struct ucred *a_cred;};
struct vop_pgwr_args {struct vnodeop_desc *a_desc;struct vnode *a_vp;struct uio *a_uio;struct ucred *a_cred;vm_offset_t a_offset;};
struct vop_print_args {struct vnodeop_desc *a_desc;struct vnode *a_vp;};
struct vop_read_args {struct vnodeop_desc *a_desc;struct vnode *a_vp;struct uio *a_uio;int a_ioflag;struct ucred *a_cred;};
struct vop_readdir_args {struct vnodeop_desc *a_desc;struct vnode *a_vp;struct uio *a_uio;struct ucred *a_cred;int *a_eofflag;int *a_ncookies;u_long **a_cookies;};
struct vop_readdirattr_args {struct vnodeop_desc *a_desc;struct vnode *a_vp;struct attrlist *a_alist;struct uio *a_uio;u_long a_maxcount;u_long a_options;u_long *a_newstate;int *a_eofflag;u_long *a_actualcount;u_long **a_cookies;struct ucred *a_cred;};
struct vop_readlink_args {struct vnodeop_desc *a_desc;struct vnode *a_vp;struct uio *a_uio;struct ucred *a_cred;};
struct vop_reallocblks_args {struct vnodeop_desc *a_desc;struct vnode *a_vp;struct cluster_save *a_buflist;};
struct vop_reclaim_args {struct vnodeop_desc *a_desc;struct vnode *a_vp;struct proc *a_p;};
struct vop_remove_args {struct vnodeop_desc *a_desc;struct vnode *a_dvp;struct vnode *a_vp;struct componentname *a_cnp;};
struct vop_rename_args {struct vnodeop_desc *a_desc;struct vnode *a_fdvp;struct vnode *a_fvp;struct componentname *a_fcnp;struct vnode *a_tdvp;struct vnode *a_tvp;struct componentname *a_tcnp;};
struct vop_revoke_args {struct vnodeop_desc *a_desc;struct vnode *a_vp;int a_flags;};
struct vop_rmdir_args {struct vnodeop_desc *a_desc;struct vnode *a_dvp;struct vnode *a_vp;struct componentname *a_cnp;};
struct vop_searchfs_args {struct vnodeop_desc *a_desc;struct vnode *a_vp;void *a_searchparams1;void *a_searchparams2;struct attrlist *a_searchattrs;u_long a_maxmatches;struct timeval *a_timelimit;struct attrlist *a_returnattrs;u_long *a_nummatches;u_long a_scriptcode;u_long a_options;struct uio *a_uio;struct searchstate *a_searchstate;};
struct vop_seek_args {struct vnodeop_desc *a_desc;struct vnode *a_vp;off_t a_oldoff;off_t a_newoff;struct ucred *a_cred;};
struct vop_select_args {struct vnodeop_desc *a_desc;struct vnode *a_vp;int a_which;int a_fflags;struct ucred *a_cred;void *a_wql;struct proc *a_p;};
struct vop_setattr_args {struct vnodeop_desc *a_desc;struct vnode *a_vp;struct vattr *a_vap;struct ucred *a_cred;struct proc *a_p;};
struct vop_setattrlist_args {struct vnodeop_desc *a_desc;struct vnode *a_vp;struct attrlist *a_alist;struct uio *a_uio;struct ucred *a_cred;struct proc *a_p;};
struct vop_strategy_args {struct vnodeop_desc *a_desc;struct buf *a_bp;};
struct vop_symlink_args {struct vnodeop_desc *a_desc;struct vnode *a_dvp;struct vnode **a_vpp;struct componentname *a_cnp;struct vattr *a_vap;char *a_target;};
struct vop_truncate_args {struct vnodeop_desc *a_desc;struct vnode *a_vp;off_t a_length;int a_flags;struct ucred *a_cred;struct proc *a_p;};
struct vop_unlock_args {struct vnodeop_desc *a_desc;struct vnode *a_vp;int a_flags;struct proc *a_p;};
struct vop_update_args {struct vnodeop_desc *a_desc;struct vnode *a_vp;struct timeval *a_access;struct timeval *a_modify;int a_waitfor;};
struct vop_valloc_args {struct vnodeop_desc *a_desc;struct vnode *a_pvp;int a_mode;struct ucred *a_cred;struct vnode **a_vpp;};
struct vop_vfree_args {struct vnodeop_desc *a_desc;struct vnode *a_pvp;ino_t a_ino;int a_mode;};
struct vop_whiteout_args {struct vnodeop_desc *a_desc;struct vnode *a_dvp;struct componentname *a_cnp;int a_flags;};
struct vop_write_args {struct vnodeop_desc *a_desc;struct vnode *a_vp;struct uio *a_uio;int a_ioflag;struct ucred *a_cred;};
enum vtagtype {VT_NON = 0x0,VT_UFS = 0x1,VT_NFS = 0x2,VT_MFS = 0x3,VT_MSDOSFS = 0x4,VT_LFS = 0x5,VT_LOFS = 0x6,VT_FDESC = 0x7,VT_PORTAL = 0x8,VT_NULL = 0x9,VT_UMAP = 0xA,VT_KERNFS = 0xB,VT_PROCFS = 0xC,VT_AFS = 0xD,VT_ISOFS = 0xE,VT_UNION = 0xF,VT_HFS = 0x10,VT_VOLFS = 0x11,VT_DEVFS = 0x12,VT_WEBDAV = 0x13,VT_UDF = 0x14,VT_AFP = 0x15,VT_CDDA = 0x16,VT_CIFS = 0x17,VT_OTHER = 0x18,};
enum vtype {VNON = 0x0,VREG = 0x1,VDIR = 0x2,VBLK = 0x3,VCHR = 0x4,VLNK = 0x5,VSOCK = 0x6,VFIFO = 0x7,VBAD = 0x8,VSTR = 0x9,VCPLX = 0xA,};
union wait {int w_status;struct wait::$68874CAB4EE1829B76042AC3FF6AA27D w_T;struct wait::$46EEFCDD3F6432496EE95A4B16E551BC w_S;};
struct wait::$46EEFCDD3F6432496EE95A4B16E551BC {unsigned __int32 w_Filler : 16;unsigned __int32 w_Stopsig : 8;unsigned __int32 w_Stopval : 8;};
struct wait::$68874CAB4EE1829B76042AC3FF6AA27D {unsigned __int32 w_Filler : 16;unsigned __int32 w_Retcode : 8;unsigned __int32 w_Coredump : 1;unsigned __int32 w_Termsig : 7;};
typedef int __fastcall walktree_f_t(struct radix_node *, void *);
typedef int wchar_t;
struct wide {SInt32 hi;UInt32 lo;};
struct winsize {unsigned __int16 ws_row;unsigned __int16 ws_col;unsigned __int16 ws_xpixel;unsigned __int16 ws_ypixel;};
struct x_passwd {char *pw_name;char *pw_passwd;int pw_uid;int pw_gid;char *pw_gecos;char *pw_dir;char *pw_shell;};
struct xdr_discrim {int value;xdrproc_t proc;};
enum xdr_op {XDR_ENCODE = 0x0,XDR_DECODE = 0x1,XDR_FREE = 0x2,};
typedef int (__fastcall *xdrproc_t)();
struct xinpcb {size_t xi_len;struct inpcb xi_inp;struct xsocket xi_socket;u_quad_t xi_alignment_hack;};
struct xinpgen {size_t xig_len;u_int xig_count;inp_gen_t xig_gen;so_gen_t xig_sogen;};
enum xprt_stat {XPRT_DIED = 0x0,XPRT_MOREREQS = 0x1,XPRT_IDLE = 0x2,};
struct xsocket {size_t xso_len;struct socket *xso_so;__int16 so_type;__int16 so_options;__int16 so_linger;__int16 so_state;caddr_t so_pcb;int xso_protocol;int xso_family;__int16 so_qlen;__int16 so_incqlen;__int16 so_qlimit;__int16 so_timeo;u_short so_error;pid_t so_pgid;u_long so_oobmark;struct xsocket::xsockbuf so_rcv;struct xsocket::xsockbuf so_snd;uid_t so_uid;};
struct xsocket::xsockbuf {u_long sb_cc;u_long sb_hiwat;u_long sb_mbcnt;u_long sb_mbmax;int sb_lowat;__int16 sb_flags;__int16 sb_timeo;};
struct xunpcb {size_t xu_len;struct unpcb *xu_unpp;struct unpcb xu_unp;union xunpcb::$C28CB6FE952050EB913E48E486FDEF40 xu_au;union xunpcb::$0E425A7E153DF4D03959A064B8354997 xu_cau;struct xsocket xu_socket;u_quad_t xu_alignment_hack;};
union xunpcb::$0E425A7E153DF4D03959A064B8354997 {struct sockaddr_un xuu_caddr;char xu_dummy2[256];};
union xunpcb::$C28CB6FE952050EB913E48E486FDEF40 {struct sockaddr_un xuu_addr;char xu_dummy1[256];};
struct xunpgen {size_t xug_len;u_int xug_count;unp_gen_t xug_gen;so_gen_t xug_sogen;};
struct ypall_callback {int (__fastcall *foreach)(u_long, char *, int, char *, int, void *);char *data;};
struct ypbind_binding {char ypbind_binding_addr[4];char ypbind_binding_port[2];};
struct ypbind_resp {ypbind_resptype ypbind_status;union ypbind_resp::$CD49527FE086EB7F6D0E69C2C3AD50AC ypbind_resp_u;};
union ypbind_resp::$CD49527FE086EB7F6D0E69C2C3AD50AC {u_int ypbind_error;ypbind_binding ypbind_bindinfo;};
enum ypbind_resptype {YPBIND_SUCC_VAL = 0x1,YPBIND_FAIL_VAL = 0x2,};
struct ypbind_setdom {domainname ypsetdom_domain;ypbind_binding ypsetdom_binding;u_int ypsetdom_vers;};
struct ypmap_parms {domainname domain;mapname map;u_int ordernum;peername peer;};
struct ypmaplist {mapname map;struct ypmaplist *next;};
struct yppasswd {char *oldpass;x_passwd newpw;};
enum yppush_status {YPPUSH_SUCC = 0x1,YPPUSH_AGE = 0x2,YPPUSH_NOMAP = 0xFFFFFFFF,YPPUSH_NODOM = 0xFFFFFFFE,YPPUSH_RSRC = 0xFFFFFFFD,YPPUSH_RPC = 0xFFFFFFFC,YPPUSH_MADDR = 0xFFFFFFFB,YPPUSH_YPERR = 0xFFFFFFFA,YPPUSH_BADARGS = 0xFFFFFFF9,YPPUSH_DBM = 0xFFFFFFF8,YPPUSH_FILE = 0xFFFFFFF7,YPPUSH_SKEW = 0xFFFFFFF6,YPPUSH_CLEAR = 0xFFFFFFF5,YPPUSH_FORCE = 0xFFFFFFF4,YPPUSH_XFRERR = 0xFFFFFFF3,YPPUSH_REFUSED = 0xFFFFFFF2,};
struct yppushresp_xfr {u_int transid;yppush_status status;};
struct ypreq_key {domainname domain;mapname map;keydat key;};
struct ypreq_nokey {domainname domain;mapname map;};
struct ypreq_xfr {ypmap_parms map_parms;u_int transid;u_int prog;u_int port;};
struct ypresp_all {int more;union ypresp_all::$438EB5C0F713AEE99C9EADC1C626DC0A ypresp_all_u;};
union ypresp_all::$438EB5C0F713AEE99C9EADC1C626DC0A {ypresp_key_val val;};
struct ypresp_key_val {ypstat stat;keydat key;valdat val;};
struct ypresp_maplist {ypstat stat;ypmaplist *maps;};
struct ypresp_master {ypstat stat;peername peer;};
struct ypresp_order {ypstat stat;u_int ordernum;};
struct ypresp_val {ypstat stat;valdat val;};
struct ypresp_xfr {u_int transid;ypxfrstat xfrstat;};
enum ypstat {YP_TRUE = 0x1,YP_NOMORE = 0x2,YP_FALSE = 0x0,YP_NOMAP = 0xFFFFFFFF,YP_NODOM = 0xFFFFFFFE,YP_NOKEY = 0xFFFFFFFD,YP_BADOP = 0xFFFFFFFC,YP_BADDB = 0xFFFFFFFB,YP_YPERR = 0xFFFFFFFA,YP_BADARGS = 0xFFFFFFF9,YP_VERS = 0xFFFFFFF8,};
enum ypxfrstat {YPXFR_SUCC = 0x1,YPXFR_AGE = 0x2,YPXFR_NOMAP = 0xFFFFFFFF,YPXFR_NODOM = 0xFFFFFFFE,YPXFR_RSRC = 0xFFFFFFFD,YPXFR_RPC = 0xFFFFFFFC,YPXFR_MADDR = 0xFFFFFFFB,YPXFR_YPERR = 0xFFFFFFFA,YPXFR_BADARGS = 0xFFFFFFF9,YPXFR_DBM = 0xFFFFFFF8,YPXFR_FILE = 0xFFFFFFF7,YPXFR_SKEW = 0xFFFFFFF6,YPXFR_CLEAR = 0xFFFFFFF5,YPXFR_FORCE = 0xFFFFFFF4,YPXFR_XFRERR = 0xFFFFFFF3,YPXFR_REFUSED = 0xFFFFFFF2,};
struct zone_info {integer_t zi_count;vm_size_t zi_cur_size;vm_size_t zi_max_size;vm_size_t zi_elem_size;vm_size_t zi_alloc_size;integer_t zi_pageable;integer_t zi_sleepable;integer_t zi_exhaustible;integer_t zi_collectable;};
typedef zone_info_t *zone_info_array_t;
typedef struct zone_info zone_info_t;
struct zone_name {char zn_name[80];};
typedef zone_name_t *zone_name_array_t;
typedef struct zone_name zone_name_t;

MACRO_AARPIFINDEX AARPIFINDEX;
MACRO_AARPNETADDRESS AARPNETADDRESS;
MACRO_AARPPHYSADDRESS AARPPHYSADDRESS;
MACRO_ABORT ABORT;
MACRO_ACCESSPERMS ACCESSPERMS;
MACRO_DATA ACK;
MACRO_AFORK ACOMPAT;
MACRO_AFORK ACORE;
MACRO_AC_ADDRESS AC_ADDRESS_MASK;
MACRO_AC_ADDRESS AC_ADDRESS_SHIFT;
MACRO_AC_ADDRESS AC_COMMAND_MASK;
MACRO_AC AC_DENY;
MACRO_AC AC_ERROR;
MACRO_AC AC_PERMIT;
MACRO_AC_ADDRESS AC_REGISTER_MASK;
MACRO_ADB ADB_ADDRESS_NONE;
MACRO_ADB_CLEAR ADB_CLEAR;
MACRO_ADB_CMD ADB_CMD_FLUSH;
MACRO_ADB_CMD ADB_CMD_LISTEN;
MACRO_ADB_CMD ADB_CMD_SENDRESET;
MACRO_ADB_CMD ADB_CMD_TALK;
MACRO_ADB ADB_HANDLER_ID_NONE;
MACRO_ADB_RESET ADB_POWER;
MACRO_ADB_CMD ADB_REGISTER_SIZE;
MACRO_ADB_RESET ADB_RESET;
MACRO_ADB_CMD ADB_SEND_RESET;
MACRO_ADB_SOFT ADB_SOFT_ADDRESS_END;
MACRO_ADB_SOFT ADB_SOFT_ADDRESS_START;
MACRO_ADB_SUPER ADB_SUPER_BASE;
MACRO_ADDRTYPE ADDRTYPE_ADDRPORT;
MACRO_ADDRTYPE ADDRTYPE_CHAOS;
MACRO_ADDRTYPE ADDRTYPE_DDP;
MACRO_ADDRTYPE ADDRTYPE_INET;
MACRO_ADDRTYPE ADDRTYPE_INET6;
MACRO_ADDRTYPE ADDRTYPE_IPPORT;
MACRO_ADDRTYPE ADDRTYPE_ISO;
MACRO_ADDRTYPE ADDRTYPE_XNS;
MACRO_ADSPATTENTION ADSPATTENTION;
MACRO_ADSPATTNREAD ADSPATTNREAD;
MACRO_ADSPBINDREQ ADSPBINDREQ;
MACRO_ADSPCLDENY ADSPCLDENY;
MACRO_ADSPCLINIT ADSPCLINIT;
MACRO_ADSPCLLISTEN ADSPCLLISTEN;
MACRO_ADSPCLOSE ADSPCLOSE;
MACRO_ADSPCLREMOVE ADSPCLREMOVE;
MACRO_ADSPGETPEER ADSPGETPEER;
MACRO_ADSPGETSOCK ADSPGETSOCK;
MACRO_ADSPNEWCID ADSPNEWCID;
MACRO_ADSPOPEN ADSPOPEN;
MACRO_ADSPOPTIONS ADSPOPTIONS;
MACRO_ADSPREAD ADSPREAD;
MACRO_ADSPRESET ADSPRESET;
MACRO_ADSPSTATUS ADSPSTATUS;
MACRO_ADSPWRITE ADSPWRITE;
MACRO_ADSP_INVALID ADSP_ACKFIELDCHKD;
MACRO_ADSP_INVALID ADSP_ACKNRSFIELDACPTD;
MACRO_ADSP_INVALID ADSP_ACKRCVD;
MACRO_ADSP_INVALID ADSP_ACKREQSTD;
MACRO_ADSP_INVALID ADSP_ACKSWSFIELDACPTD;
MACRO_ADSP_CONTROL ADSP_ACK_REQ_BIT;
MACRO_ADSP_CONTROL ADSP_ATTENTION_BIT;
MACRO_ADSP_INVALID ADSP_ATTNACKACPTD;
MACRO_ADSP_INVALID ADSP_ATTNACKRCVD;
MACRO_ADSP_INVALID ADSP_ATTNACPTD;
MACRO_ADSP_TRANSTHRESH ADSP_ATTNBCKOFF;
MACRO_ADSP_INVALID ADSP_ATTNEXP;
MACRO_ADSP_TRANSTHRESH ADSP_ATTNINTRVL;
MACRO_ADSP_STATE ADSP_ATTNMSGWAIT;
MACRO_ADSP_INVALID ADSP_ATTNRCVD;
MACRO_ADSP_STATE ADSP_ATTNRCVSEQ;
MACRO_ADSP_STATE ADSP_ATTNSNDSEQ;
MACRO_ADSP ADSP_CLOSEADVICE;
MACRO_ADSP_INVALID ADSP_CLOSED;
MACRO_ADSP_INVALID ADSP_CLOSING;
MACRO_ADSP_CONTROL ADSP_CONTROL_BIT;
MACRO_ADSP_CONTROL ADSP_CONTROL_MASK;
MACRO_ADSP_CONTROL ADSP_CTL_CLOSE;
MACRO_ADSP_CONTROL ADSP_CTL_FRESET;
MACRO_ADSP_CONTROL ADSP_CTL_FRESET_ACK;
MACRO_ADSP_CONTROL ADSP_CTL_OACK;
MACRO_ADSP_CONTROL ADSP_CTL_ODENY;
MACRO_ADSP_CONTROL ADSP_CTL_OREQ;
MACRO_ADSP_CONTROL ADSP_CTL_OREQACK;
MACRO_ADSP_CONTROL ADSP_CTL_PROBE;
MACRO_ADSP_CONTROL ADSP_CTL_RETRANSMIT;
MACRO_ADSP_INVALID ADSP_DATAACPTD;
MACRO_ADSP_INVALID ADSP_DATARCVD;
MACRO_ADSP ADSP_DDPTYPE;
MACRO_ADSP_DEFLEN ADSP_DEFLEN;
MACRO_ADSP ADSP_EOM;
MACRO_ADSP_CONTROL ADSP_EOM_BIT;
MACRO_ADSP ADSP_EV_ATTN;
MACRO_ADSP ADSP_EV_CLOSE;
MACRO_ADSP ADSP_EV_RESET;
MACRO_ADSP_STATE ADSP_FIRSTRTMTSEQ;
MACRO_ADSP ADSP_FLUSH;
MACRO_ADSP ADSP_FORWARDRESET;
MACRO_ADSP ADSP_FORWARDRESETACK;
MACRO_FRAME_LEN ADSP_FRAME_LEN;
MACRO_ADSP_INVALID ADSP_FWDRSTACKACPTD;
MACRO_ADSP_INVALID ADSP_FWDRSTACKRCVD;
MACRO_ADSP_INVALID ADSP_FWDRSTACPTD;
MACRO_ADSP_TRANSTHRESH ADSP_FWDRSTBCKOFF;
MACRO_ADSP_INVALID ADSP_FWDRSTEXP;
MACRO_ADSP_TRANSTHRESH ADSP_FWDRSTINTRVL;
MACRO_ADSP_INVALID ADSP_FWDRSTRCVD;
MACRO_ADSP_INVALID ADSP_HISHALFOPEN;
MACRO_ADSP_DEFLEN ADSP_INFOLEN;
MACRO_ADSP_INVALID ADSP_INVALID;
MACRO_ADSP_INVALID ADSP_LISTEN;
MACRO_ADSP_INVALID ADSP_LOWMEM;
MACRO_ADSP ADSP_MAXATTNDATA;
MACRO_ADSP ADSP_MAXDATA;
MACRO_ADSP_CONTROL ADSP_MAX_DATA_LEN;
MACRO_ADSP_INVALID ADSP_MYHALFOPEN;
MACRO_ADSP_INVALID ADSP_OPEN;
MACRO_ADSP ADSP_OPENCONACK;
MACRO_ADSP ADSP_OPENCONDENIAL;
MACRO_ADSP ADSP_OPENCONREQACK;
MACRO_ADSP ADSP_OPENCONREQUEST;
MACRO_ADSP_INVALID ADSP_OPENING;
MACRO_ADSP_TRANSTHRESH ADSP_OPENINTRVL;
MACRO_ADSP_TRANSTHRESH ADSP_OPENMAXRETRY;
MACRO_ADSP_CONTROL ADSP_OPEN_FRAME_LEN;
MACRO_ADSP_INVALID ADSP_OPNREQEXP;
MACRO_ADSP ADSP_PROBEACK;
MACRO_ADSP_INVALID ADSP_PROBEEXP;
MACRO_ADSP_INVALID ADSP_PROBERCVD;
MACRO_ADSP_TRANSTHRESH ADSP_PROBERETRYMAX;
MACRO_ADSP_TRANSTHRESH ADSP_RCVQCPYTHRESH;
MACRO_ADSP_TRANSTHRESH ADSP_RCVQMAXSIZE;
MACRO_ADSP_STATE ADSP_RCVSEQ;
MACRO_ADSP_STATE ADSP_RCVWDW;
MACRO_ADSP_INVALID ADSP_RESLOWEXP;
MACRO_ADSP_TRANSTHRESH ADSP_RESTARTBCKOFF;
MACRO_ADSP_INVALID ADSP_RESTARTEXP;
MACRO_ADSP_TRANSTHRESH ADSP_RESTARTINTRVL;
MACRO_ADSP ADSP_RETRANSADVICE;
MACRO_ADSP_TRANSTHRESH ADSP_RETRANSBCKOFF;
MACRO_ADSP_INVALID ADSP_RETRANSEXP;
MACRO_ADSP_TRANSTHRESH ADSP_RETRANSINTRVL;
MACRO_ADSP_INVALID ADSP_RETRANSRCVD;
MACRO_ADSP_TRANSTHRESH ADSP_RETRANSTHRESH;
MACRO_ADSP_TRANSTHRESH ADSP_SNDBYTECNTMAX;
MACRO_ADSP_TRANSTHRESH ADSP_SNDQBUFSIZE;
MACRO_ADSP_STATE ADSP_SNDSEQ;
MACRO_ADSP_TRANSTHRESH ADSP_SNDWDWCLOBCKOFF;
MACRO_ADSP_INVALID ADSP_SNDWDWCLOEXP;
MACRO_ADSP_TRANSTHRESH ADSP_SNDWDWCLOINTRVL;
MACRO_ADSP_TRANSTHRESH ADSP_SNDWDWCLOTHRESH;
MACRO_ADSP_STATE ADSP_SNDWDWSEQ;
MACRO_ADSP_DEFLEN ADSP_STALEN;
MACRO_ADSP_STATE ADSP_STATE;
MACRO_ADSP_INVALID ADSP_TORNDOWN;
MACRO_ADSP_INVALID ADSP_TRANSEXP;
MACRO_ADSP_TRANSTHRESH ADSP_TRANSTHRESH;
MACRO_ADSP_TRANSTHRESH ADSP_TRANSTIMERINTRVL;
MACRO_ADSP ADSP_VERSION;
MACRO_ADSP ADSP_WAIT;
MACRO_AD_NOTGT AD_NOTGT;
MACRO_KDC_OK AD_OK;
MACRO_AD AD_TYPE_EXTERNAL;
MACRO_AD AD_TYPE_FIELD_TYPE_MASK;
MACRO_AD_TYPE AD_TYPE_INTERNAL_MASK;
MACRO_AD AD_TYPE_REGISTERED;
MACRO_AD AD_TYPE_RESERVED;
MACRO_AFORK AFORK;
MACRO_AF AF_APPLETALK;
MACRO_AF AF_CCITT;
MACRO_AF AF_CHAOS;
MACRO_AF_COIP AF_CNT;
MACRO_AF_COIP AF_COIP;
MACRO_AF AF_DATAKIT;
MACRO_AF AF_DECnet;
MACRO_AF AF_DLI;
MACRO_AF_NDRV AF_E164;
MACRO_AF AF_ECMA;
MACRO_AF AF_HYLINK;
MACRO_AF AF_IMPLINK;
MACRO_AF AF_INET;
MACRO_AF_INET6 AF_INET6;
MACRO_AF_IPX AF_IPX;
MACRO_AF_NDRV AF_ISDN;
MACRO_AF AF_ISO;
MACRO_AF AF_LAT;
MACRO_AF AF_LINK;
MACRO_AF AF_LOCAL;
MACRO_AF_MAX AF_MAX;
MACRO_AF_INET6 AF_NATM;
MACRO_AF_NDRV AF_NDRV;
MACRO_AF_INET6 AF_NETBIOS;
MACRO_AF AF_NS;
MACRO_AF AF_OSI;
MACRO_AF_INET6 AF_PPP;
MACRO_AF AF_PUP;
MACRO_AF AF_ROUTE;
MACRO_AF_IPX AF_SIP;
MACRO_AF AF_SNA;
MACRO_AF_INET6 AF_SYSTEM;
MACRO_AF_SYS AF_SYS_CONTROL;
MACRO_AF AF_UNIX;
MACRO_AF AF_UNSPEC;
MACRO_AFORK AHZ;
MACRO_AI AI_ADDRCONFIG;
MACRO_AI AI_ALL;
MACRO_AI AI_CANONNAME;
MACRO_AI AI_DEFAULT;
MACRO_AI AI_MASK;
MACRO_AI AI_NUMERICHOST;
MACRO_AI AI_PASSIVE;
MACRO_AI AI_V4MAPPED;
MACRO_AI AI_V4MAPPED_CFG;
MACRO_TASK_NULL ALARM_NULL;
MACRO_ALIGN ALIGN;
MACRO_ALIGNBYTES ALIGNBYTES;
MACRO_ALLDELAY ALLDELAY;
MACRO_ALLPERMS ALLPERMS;
MACRO_ALL ALL_MOUSE_EVENTS;
MACRO_ALL_VIFS ALL_VIFS;
MACRO_ALRMTYPE ALRMTYPE;
MACRO_ALTERNATE ALTERNATE_LOAD_SITE;
MACRO_ECHOKE ALTWERASE;
MACRO_ALT ALT_LEFT;
MACRO_ALT ALT_RIGHT;
MACRO_SZ ANAME_SZ;
MACRO_ANNOUNCE ANNOUNCE;
MACRO_ANYADDR ANYADDR;
MACRO_ANYP ANYP;
MACRO_AO AO;
MACRO_AOUT AOUT_F;
MACRO_APPLE_IF APPLE_IF_FAM_DISC;
MACRO_APPLE_IF APPLE_IF_FAM_ETHERNET;
MACRO_APPLE_IF APPLE_IF_FAM_FAITH;
MACRO_APPLE_IF APPLE_IF_FAM_GIF;
MACRO_APPLE_IF APPLE_IF_FAM_LOOPBACK;
MACRO_APPLE_IF APPLE_IF_FAM_MDECAP;
MACRO_APPLE_IF APPLE_IF_FAM_PPP;
MACRO_APPLE_IF APPLE_IF_FAM_PVC;
MACRO_APPLE_IF APPLE_IF_FAM_SLIP;
MACRO_APPLE_IF APPLE_IF_FAM_STF;
MACRO_APPLE_IF APPLE_IF_FAM_TUN;
MACRO_APPLE_IF APPLE_IF_FAM_VLAN;
MACRO_APPLE APPLE_LEFT;
MACRO_APPLE APPLE_RIGHT;
MACRO_AP AP_OPTS_MUTUAL_REQUIRED;
MACRO_AP AP_OPTS_RESERVED;
MACRO_AP AP_OPTS_USE_SESSION_KEY;
MACRO_AP AP_OPTS_USE_SUBKEY;
MACRO_AP AP_OPTS_WIRE_MASK;
MACRO_AR3 AR3_DEVICE_ADDRESS_MASK;
MACRO_AR3 AR3_EXCEPTIONAL_EVENT;
MACRO_AR3 AR3_HANDLER_ID_MASK;
MACRO_AR3 AR3_RESERVED0;
MACRO_AR3 AR3_RESERVED1;
MACRO_AR3 AR3_SERVICE_REQUEST_ENABLE;
MACRO_ARCDENSITY ARCDENSITY;
MACRO_AREGTYPE AREGTYPE;
MACRO_LONG_MAX ARG_MAX;
MACRO_ARPHRD ARPHRD_ETHER;
MACRO_ARPHRD ARPHRD_FRELAY;
MACRO_ARPHRD ARPHRD_IEEE802;
MACRO_ARPOP ARPOP_INVREPLY;
MACRO_ARPOP ARPOP_INVREQUEST;
MACRO_ARPOP ARPOP_REPLY;
MACRO_ARPOP ARPOP_REQUEST;
MACRO_ARPOP ARPOP_REVREPLY;
MACRO_ARPOP ARPOP_REVREQUEST;
MACRO_ASN1 ASN1_BAD_FORMAT;
MACRO_ASN1 ASN1_BAD_GMTIME;
MACRO_ASN1 ASN1_BAD_ID;
MACRO_ASN1 ASN1_BAD_LENGTH;
MACRO_ASN1 ASN1_BAD_TIMEFORMAT;
MACRO_ASN1 ASN1_MISMATCH_INDEF;
MACRO_ASN1 ASN1_MISPLACED_FIELD;
MACRO_ASN1 ASN1_MISSING_EOC;
MACRO_ASN1 ASN1_MISSING_FIELD;
MACRO_ASN1 ASN1_OVERFLOW;
MACRO_ASN1 ASN1_OVERRUN;
MACRO_ASN1 ASN1_PARSE_ERROR;
MACRO_ASN1 ASN1_TYPE_MISMATCH;
MACRO_ASPERR ASPERR_BadVersNum;
MACRO_ASPERR ASPERR_BindErr;
MACRO_ASPERR ASPERR_BufTooSmall;
MACRO_ASPERR ASPERR_CmdReply;
MACRO_ASPERR ASPERR_CmdRequest;
MACRO_ASPERR ASPERR_NoAck;
MACRO_ASPERR ASPERR_NoError;
MACRO_ASPERR ASPERR_NoMoreSessions;
MACRO_ASPERR ASPERR_NoServers;
MACRO_ASPERR ASPERR_NoSuchDevice;
MACRO_ASPERR ASPERR_NoSuchEntity;
MACRO_ASPERR ASPERR_ParamErr;
MACRO_ASPERR ASPERR_ProtoErr;
MACRO_ASPERR ASPERR_RegisterErr;
MACRO_ASPERR ASPERR_ServerBusy;
MACRO_ASPERR ASPERR_SessClosed;
MACRO_ASPERR ASPERR_SizeErr;
MACRO_ASPERR ASPERR_SystemErr;
MACRO_ASPERR ASPERR_TooManyClients;
MACRO_ASPFUNC ASPFUNC_Attention;
MACRO_ASPFUNC ASPFUNC_CloseSess;
MACRO_ASPFUNC ASPFUNC_CmdReply;
MACRO_ASPFUNC ASPFUNC_Command;
MACRO_ASPFUNC ASPFUNC_GetStatus;
MACRO_ASPFUNC ASPFUNC_OpenSess;
MACRO_ASPFUNC ASPFUNC_Tickle;
MACRO_ASPFUNC ASPFUNC_Write;
MACRO_ASPFUNC ASPFUNC_WriteContinue;
MACRO_ASPIOC ASPIOC;
MACRO_ASPIOC_ClientBind ASPIOC_ClientBind;
MACRO_ASPIOC_ClientBind ASPIOC_CloseSession;
MACRO_ASPIOC_ClientBind ASPIOC_EnableSelect;
MACRO_ASPIOC_ClientBind ASPIOC_GetLocEntity;
MACRO_ASPIOC_ClientBind ASPIOC_GetRemEntity;
MACRO_ASPIOC_ClientBind ASPIOC_GetSessId;
MACRO_ASPIOC_ClientBind ASPIOC_GetSession;
MACRO_ASPIOC_ClientBind ASPIOC_GetStatus;
MACRO_ASPIOC_ClientBind ASPIOC_ListenerBind;
MACRO_ASPIOC_ClientBind ASPIOC_Look;
MACRO_ASPIOC_ClientBind ASPIOC_OpenSession;
MACRO_ASPIOC_ClientBind ASPIOC_SetPid;
MACRO_ASPIOC_ClientBind ASPIOC_StatusBlock;
MACRO_ASP ASP_Version;
MACRO_AFORK ASU;
MACRO_ATADDR ATADDR_ANYNET;
MACRO_ATADDR ATADDR_ANYNODE;
MACRO_ATADDR ATADDR_ANYPORT;
MACRO_ATADDR ATADDR_BCASTNODE;
MACRO_ATECHOREPLIES ATECHOREPLIES;
MACRO_ATECHOREQUESTS ATECHOREQUESTS;
MACRO_ATF ATF_COM;
MACRO_ATF ATF_INUSE;
MACRO_ATF ATF_PERM;
MACRO_ATF ATF_PUBL;
MACRO_ATF ATF_USETRAILERS;
MACRO_ATPORTDESCR ATPORTDESCR;
MACRO_ATPORTIFINDEX ATPORTIFINDEX;
MACRO_ATPORTINDEX ATPORTINDEX;
MACRO_ATPORTNETADDRESS ATPORTNETADDRESS;
MACRO_ATPORTNETCONFIG ATPORTNETCONFIG;
MACRO_ATPORTNETEND ATPORTNETEND;
MACRO_ATPORTNETSTART ATPORTNETSTART;
MACRO_ATPORTSTATUS ATPORTSTATUS;
MACRO_ATPORTTYPE ATPORTTYPE;
MACRO_ATPORTZONE ATPORTZONE;
MACRO_ATPORTZONECONFIG ATPORTZONECONFIG;
MACRO_ATPROTO ATPROTO_ADSP;
MACRO_ATPROTO ATPROTO_AFP;
MACRO_ATPROTO ATPROTO_ASP;
MACRO_ATPROTO ATPROTO_ATP;
MACRO_ATPROTO ATPROTO_AURP;
MACRO_ATPROTO ATPROTO_DDP;
MACRO_ATPROTO ATPROTO_LAP;
MACRO_ATPROTO ATPROTO_NONE;
MACRO_ATPROTO ATPROTO_RAW;
MACRO_ATP_CMD ATP_ASYNCH_REQ;
MACRO_ATP_CMD ATP_ASYNCH_RESP;
MACRO_ATP_CMD ATP_CMD_TREL;
MACRO_ATP_CMD ATP_CMD_TREQ;
MACRO_ATP_CMD ATP_CMD_TRESP;
MACRO_ATP_CMD ATP_DATA_SIZE;
MACRO_ATP_CMD ATP_DEF_INTERVAL;
MACRO_ATP_CMD ATP_DEF_RETRIES;
MACRO_ATP_SENDREQUEST ATP_GETREQUEST;
MACRO_ATP_SENDREQUEST ATP_GETRESPONSE;
MACRO_ATP_CMD ATP_HDR_SIZE;
MACRO_ATP_CMD ATP_INFINITE_RETRIES;
MACRO_ATP_SENDREQUEST ATP_SENDREQUEST;
MACRO_ATP_SENDREQUEST ATP_SENDRESPONSE;
MACRO_ATP ATP_TRESP_MAX;
MACRO_ATP_CMD ATP_XO_1MIN;
MACRO_ATP_CMD ATP_XO_2MIN;
MACRO_ATP_CMD ATP_XO_30SEC;
MACRO_ATP_CMD ATP_XO_4MIN;
MACRO_ATP_CMD ATP_XO_8MIN;
MACRO_ATP_CMD ATP_XO_DEF_REL_TIME;
MACRO_ATTR ATTR_BIT_MAP_COUNT;
MACRO_ATTR_CMN ATTR_CMN_ACCESSMASK;
MACRO_ATTR_CMN ATTR_CMN_ACCTIME;
MACRO_ATTR_CMN ATTR_CMN_BKUPTIME;
MACRO_ATTR_CMN ATTR_CMN_CHGTIME;
MACRO_ATTR_CMN ATTR_CMN_CRTIME;
MACRO_ATTR_CMN ATTR_CMN_DEVID;
MACRO_ATTR_CMN ATTR_CMN_FLAGS;
MACRO_ATTR_CMN ATTR_CMN_FNDRINFO;
MACRO_ATTR_CMN ATTR_CMN_FSID;
MACRO_ATTR_CMN ATTR_CMN_GRPID;
MACRO_ATTR_CMN ATTR_CMN_MODTIME;
MACRO_ATTR_CMN ATTR_CMN_NAME;
MACRO_ATTR_CMN ATTR_CMN_NAMEDATTRCOUNT;
MACRO_ATTR_CMN ATTR_CMN_NAMEDATTRLIST;
MACRO_ATTR_CMN ATTR_CMN_OBJID;
MACRO_ATTR_CMN ATTR_CMN_OBJPERMANENTID;
MACRO_ATTR_CMN ATTR_CMN_OBJTAG;
MACRO_ATTR_CMN ATTR_CMN_OBJTYPE;
MACRO_ATTR_CMN ATTR_CMN_OWNERID;
MACRO_ATTR_CMN ATTR_CMN_PAROBJID;
MACRO_ATTR_CMN ATTR_CMN_SCRIPT;
MACRO_ATTR_CMN ATTR_CMN_SETMASK;
MACRO_ATTR_CMN ATTR_CMN_USERACCESS;
MACRO_ATTR_CMN ATTR_CMN_VALIDMASK;
MACRO_ATTR_CMN ATTR_CMN_VOLSETMASK;
MACRO_ATTR_CMN ATTR_DIR_ENTRYCOUNT;
MACRO_ATTR_CMN ATTR_DIR_LINKCOUNT;
MACRO_ATTR_CMN ATTR_DIR_MOUNTSTATUS;
MACRO_ATTR_CMN ATTR_DIR_SETMASK;
MACRO_ATTR_CMN ATTR_DIR_VALIDMASK;
MACRO_ATTR_CMN ATTR_FILE_ALLOCSIZE;
MACRO_ATTR_CMN ATTR_FILE_CLUMPSIZE;
MACRO_ATTR_CMN ATTR_FILE_DATAALLOCSIZE;
MACRO_ATTR_CMN ATTR_FILE_DATAEXTENTS;
MACRO_ATTR_CMN ATTR_FILE_DATALENGTH;
MACRO_ATTR_CMN ATTR_FILE_DEVTYPE;
MACRO_ATTR_CMN ATTR_FILE_FILETYPE;
MACRO_ATTR_CMN ATTR_FILE_FORKCOUNT;
MACRO_ATTR_CMN ATTR_FILE_FORKLIST;
MACRO_ATTR_CMN ATTR_FILE_IOBLOCKSIZE;
MACRO_ATTR_CMN ATTR_FILE_LINKCOUNT;
MACRO_ATTR_CMN ATTR_FILE_RSRCALLOCSIZE;
MACRO_ATTR_CMN ATTR_FILE_RSRCEXTENTS;
MACRO_ATTR_CMN ATTR_FILE_RSRCLENGTH;
MACRO_ATTR_CMN ATTR_FILE_SETMASK;
MACRO_ATTR_CMN ATTR_FILE_TOTALSIZE;
MACRO_ATTR_CMN ATTR_FILE_VALIDMASK;
MACRO_ATTR_CMN ATTR_FORK_ALLOCSIZE;
MACRO_ATTR_CMN ATTR_FORK_SETMASK;
MACRO_ATTR_CMN ATTR_FORK_TOTALSIZE;
MACRO_ATTR_CMN ATTR_FORK_VALIDMASK;
MACRO_ATTR_CMN ATTR_VOL_ALLOCATIONCLUMP;
MACRO_ATTR_CMN ATTR_VOL_ATTRIBUTES;
MACRO_ATTR_CMN ATTR_VOL_CAPABILITIES;
MACRO_ATTR_CMN ATTR_VOL_DIRCOUNT;
MACRO_ATTR_CMN ATTR_VOL_ENCODINGSUSED;
MACRO_ATTR_CMN ATTR_VOL_FILECOUNT;
MACRO_ATTR_CMN ATTR_VOL_FSTYPE;
MACRO_ATTR_CMN ATTR_VOL_INFO;
MACRO_ATTR_CMN ATTR_VOL_IOBLOCKSIZE;
MACRO_ATTR_CMN ATTR_VOL_MAXOBJCOUNT;
MACRO_ATTR_CMN ATTR_VOL_MINALLOCATION;
MACRO_ATTR_CMN ATTR_VOL_MOUNTEDDEVICE;
MACRO_ATTR_CMN ATTR_VOL_MOUNTFLAGS;
MACRO_ATTR_CMN ATTR_VOL_MOUNTPOINT;
MACRO_ATTR_CMN ATTR_VOL_NAME;
MACRO_ATTR_CMN ATTR_VOL_OBJCOUNT;
MACRO_ATTR_CMN ATTR_VOL_SETMASK;
MACRO_ATTR_CMN ATTR_VOL_SIGNATURE;
MACRO_ATTR_CMN ATTR_VOL_SIZE;
MACRO_ATTR_CMN ATTR_VOL_SPACEAVAIL;
MACRO_ATTR_CMN ATTR_VOL_SPACEFREE;
MACRO_ATTR_CMN ATTR_VOL_VALIDMASK;
MACRO_AT AT_ADDR;
MACRO_AT_ADDR AT_ADDR_NO_LOOP;
MACRO_AT_ATP AT_ATP_BIND_REQ;
MACRO_AT_ATP AT_ATP_CANCEL_REQUEST;
MACRO_AT_ATP AT_ATP_GET_CHANID;
MACRO_AT_ATP AT_ATP_GET_POLL;
MACRO_AT_ATP AT_ATP_ISSUE_REQUEST;
MACRO_AT_ATP AT_ATP_ISSUE_REQUEST_DEF;
MACRO_AT_ATP AT_ATP_ISSUE_REQUEST_DEF_NOTE;
MACRO_AT_ATP AT_ATP_ISSUE_REQUEST_NOTE;
MACRO_AT_ATP AT_ATP_ISSUE_REQUEST_TICKLE;
MACRO_AT_ATP AT_ATP_PEEK;
MACRO_AT_ATP AT_ATP_RELEASE_RESPONSE;
MACRO_AT_ATP AT_ATP_REQUEST_COMPLETE;
MACRO_AT_ATP AT_ATP_SEND_FULL_RESPONSE;
MACRO_AT_LV AT_LV_ERROR;
MACRO_AT_LV AT_LV_FATAL;
MACRO_AT_LV AT_LV_INFO;
MACRO_AT_LV AT_LV_VERBOSE;
MACRO_AT_LV AT_LV_WARNING;
MACRO_AT_MID AT_MID_ADSP;
MACRO_AT_MID_DDP AT_MID_DDP;
MACRO_AT_MID_ELAP AT_MID_ELAP;
MACRO_AT_MID_LAP AT_MID_LAP;
MACRO_AT_PAP_TYPE AT_PAPD_GET_NEXT_JOB;
MACRO_AT_PAP_TYPE AT_PAPD_SET_STATUS;
MACRO_AT_PAP AT_PAP_DATA_SIZE;
MACRO_AT_PAP_HDR AT_PAP_HDR_SIZE;
MACRO_AT_PAP_TYPE AT_PAP_READ;
MACRO_AT_PAP_TYPE AT_PAP_READ_IGNORE;
MACRO_AT_PAP_TYPE AT_PAP_SETHDR;
MACRO_AT_PAP AT_PAP_STATUS_SIZE;
MACRO_AT_PAP_TYPE AT_PAP_TYPE_CLOSE_CONN;
MACRO_AT_PAP_TYPE AT_PAP_TYPE_CLOSE_CONN_REPLY;
MACRO_AT_PAP_TYPE AT_PAP_TYPE_DATA;
MACRO_AT_PAP_TYPE AT_PAP_TYPE_OPEN_CONN;
MACRO_AT_PAP_TYPE AT_PAP_TYPE_OPEN_CONN_REPLY;
MACRO_AT_PAP_TYPE AT_PAP_TYPE_READ_LW;
MACRO_AT_PAP_TYPE AT_PAP_TYPE_SEND_DATA;
MACRO_AT_PAP_TYPE AT_PAP_TYPE_SEND_STATUS;
MACRO_AT_PAP_TYPE AT_PAP_TYPE_SEND_STS_REPLY;
MACRO_AT_PAP_TYPE AT_PAP_TYPE_TICKLE;
MACRO_AT_PAP_TYPE AT_PAP_WRITE;
MACRO_AT_PAP_TYPE AT_PAP_WRITE_EOF;
MACRO_AT_PAP_TYPE AT_PAP_WRITE_FLUSH;
MACRO_AT_LV AT_SID_FLOWCTRL;
MACRO_AT_LV AT_SID_INPUT;
MACRO_AT_LV AT_SID_OUTPUT;
MACRO_AT_LV AT_SID_RESOURCE;
MACRO_AT_LV AT_SID_TIMERS;
MACRO_AT_LV AT_SID_USERREQ;
MACRO_AT AT_ST_IF_CHANGED;
MACRO_AT AT_ST_MULTIHOME;
MACRO_AT AT_ST_NBP_CHANGED;
MACRO_AT AT_ST_ROUTER;
MACRO_AT AT_ST_RT_CHANGED;
MACRO_AT AT_ST_STARTED;
MACRO_AT AT_ST_STARTING;
MACRO_AT AT_ST_ZT_CHANGED;
MACRO_AUC AUC_ACCEPTALL;
MACRO_AUC AUC_ADDNET;
MACRO_AUC AUC_CFGTNL;
MACRO_AUC AUC_EXPNET;
MACRO_AUC AUC_HIDENET;
MACRO_AUC AUC_MAX;
MACRO_AUC AUC_NETLIST;
MACRO_AUC AUC_SHTDOWN;
MACRO_AUC AUC_TIMER;
MACRO_AUC AUC_UDPPORT;
MACRO_AURP AURP_MAXNETACCESS;
MACRO_AURP AURP_SOCKNUM;
MACRO_AUTHTYPE AUTHTYPE_CNT;
MACRO_AUTHTYPE AUTHTYPE_KERBEROS_V4;
MACRO_AUTHTYPE AUTHTYPE_KERBEROS_V5;
MACRO_AUTHTYPE AUTHTYPE_MINK;
MACRO_AUTHTYPE AUTHTYPE_NULL;
MACRO_AUTHTYPE AUTHTYPE_SPX;
MACRO_AUTHTYPE AUTHTYPE_TEST;
auth_stat AUTH_BADCRED;
auth_stat AUTH_BADVERF;
MACRO_AUTH_NONE AUTH_DES;
reject_stat AUTH_ERROR;
auth_stat AUTH_FAILED;
MACRO_AUTH AUTH_HOW_MASK;
MACRO_AUTH AUTH_HOW_MUTUAL;
MACRO_AUTH AUTH_HOW_ONE_WAY;
auth_stat AUTH_INVALIDRESP;
MACRO_AUTH_NONE AUTH_NONE;
MACRO_AUTH_NONE AUTH_NULL;
auth_stat AUTH_OK;
MACRO_AUTH_REJECTCRED AUTH_REJECTCRED;
auth_stat AUTH_REJECTEDCRED;
auth_stat AUTH_REJECTEDVERF;
MACRO_AUTH_REJECTCRED AUTH_REJECTVERF;
MACRO_AUTH_NONE AUTH_SHORT;
auth_stat AUTH_TOOWEAK;
MACRO_AUTH_NONE AUTH_UNIX;
MACRO_AUTH AUTH_WHO_CLIENT;
MACRO_AUTH AUTH_WHO_MASK;
MACRO_AUTH AUTH_WHO_SERVER;
MACRO_AFORK AXSIG;
MACRO_AYT AYT;
MACRO_A A_ALTCHARSET;
MACRO_A A_ATTRIBUTES;
MACRO_A A_BLINK;
MACRO_A A_BOLD;
MACRO_A A_CHARTEXT;
MACRO_A A_COLOR;
MACRO_A A_DIM;
MACRO_A A_HORIZONTAL;
MACRO_A A_INVIS;
MACRO_A A_LEFT;
MACRO_A A_LOW;
MACRO_A A_NORMAL;
MACRO_A A_PROTECT;
MACRO_A A_REVERSE;
MACRO_A A_RIGHT;
MACRO_A A_STANDOUT;
MACRO_A A_TOP;
MACRO_A A_UNDERLINE;
MACRO_A A_VERTICAL;
MACRO_B0 B0;
MACRO_B14400 B14400;
MACRO_TCSANOW B19200;
MACRO_B230400 B230400;
MACRO_B28800 B28800;
MACRO_B38400 B38400;
MACRO_B7200 B7200;
MACRO_B76800 B76800;
MACRO_ORDINARY BACKSPACE;
MACRO_BADADDR BADADDR;
MACRO_BADADDR BADCTLADDR;
MACRO_BADVERSION BADVERSION;
MACRO_BC BC_BASE_MAX;
MACRO_BC BC_DIM_MAX;
MACRO_BC BC_SCALE_MAX;
MACRO_BC BC_STRING_MAX;
MACRO_ENDIAN BIG_ENDIAN;
MACRO_BIOCFLUSH BIOCFLUSH;
MACRO_BIOCPROMISC BIOCPROMISC;
MACRO_BLKDEV BLKDEV_IOSIZE;
MACRO_BLKTYPE BLKTYPE;
MACRO_BLK BLK_BYTECOUNT;
MACRO_BLK BLK_EOF;
MACRO_BLK BLK_EOR;
MACRO_BLK BLK_ERRORS;
MACRO_BLK BLK_RESTART;
MACRO_BOOLCOUNT BOOLCOUNT;
MACRO_BOOLWRITE BOOLWRITE;
MACRO_BOOTPARAMPROC BOOTPARAMPROC_GETFILE;
MACRO_BOOTPARAMPROC BOOTPARAMPROC_WHOAMI;
MACRO_BOOTPARAMPROG BOOTPARAMPROG;
MACRO_BOOTPARAMVERS BOOTPARAMVERS;
MACRO_BOOTPARAM BOOTPARAM_GETFILE;
MACRO_BOOTPARAM BOOTPARAM_PROG;
MACRO_BOOTPARAM BOOTPARAM_VERS;
MACRO_BOOTPARAM BOOTPARAM_WHOAMI;
MACRO_BOOTSTRAP BOOTSTRAP_BAD_COUNT;
MACRO_BOOTSTRAP BOOTSTRAP_MAX_CMD_LEN;
MACRO_BOOTSTRAP BOOTSTRAP_MAX_LOOKUP_COUNT;
MACRO_BOOTSTRAP BOOTSTRAP_MAX_NAME_LEN;
MACRO_BOOTSTRAP BOOTSTRAP_NAME_IN_USE;
MACRO_BOOTSTRAP BOOTSTRAP_NOT_PRIVILEGED;
MACRO_BOOTSTRAP BOOTSTRAP_NO_MEMORY;
MACRO_BOOTSTRAP BOOTSTRAP_SERVICE_ACTIVE;
MACRO_BOOTSTRAP BOOTSTRAP_STATUS_ACTIVE;
MACRO_BOOTSTRAP BOOTSTRAP_STATUS_INACTIVE;
MACRO_BOOTSTRAP BOOTSTRAP_STATUS_ON_DEMAND;
MACRO_BOOTSTRAP BOOTSTRAP_SUCCESS;
MACRO_BOOTSTRAP BOOTSTRAP_UNKNOWN_SERVICE;
MACRO_BOOT BOOT_INFO_COMPAT;
MACRO_BPF_LD BPF_A;
MACRO_BPF_LD BPF_ABS;
MACRO_BPF_LD BPF_ADD;
MACRO_BPF_LD BPF_ALU;
MACRO_BPF_LD BPF_AND;
MACRO_BPF_LD BPF_B;
MACRO_BPF_LD BPF_DIV;
MACRO_BPF_LD BPF_H;
MACRO_BPF_LD BPF_IMM;
MACRO_BPF_LD BPF_IND;
MACRO_BPF_LD BPF_JA;
MACRO_BPF_LD BPF_JEQ;
MACRO_BPF_LD BPF_JGE;
MACRO_BPF_LD BPF_JGT;
MACRO_BPF_LD BPF_JMP;
MACRO_BPF_LD BPF_JSET;
MACRO_BPF_LD BPF_K;
MACRO_BPF_LD BPF_LD;
MACRO_BPF_LD BPF_LDX;
MACRO_BPF_LD BPF_LEN;
MACRO_BPF_LD BPF_LSH;
MACRO_BPF BPF_MAJOR_VERSION;
MACRO_BPF BPF_MAXBUFSIZE;
MACRO_BPF BPF_MAXINSNS;
MACRO_BPF_LD BPF_MEM;
MACRO_BPF_LD BPF_MEMWORDS;
MACRO_BPF BPF_MINBUFSIZE;
MACRO_BPF BPF_MINOR_VERSION;
MACRO_BPF_LD BPF_MISC;
MACRO_BPF_LD BPF_MSH;
MACRO_BPF_LD BPF_MUL;
MACRO_BPF_LD BPF_NEG;
MACRO_BPF_LD BPF_OR;
MACRO_BPF BPF_RELEASE;
MACRO_BPF_LD BPF_RET;
MACRO_BPF_LD BPF_RSH;
MACRO_BPF_LD BPF_ST;
MACRO_BPF_LD BPF_STX;
MACRO_BPF_LD BPF_SUB;
$911FC6B71CAC49F8DB4B0B0CACD0B23C BPF_TAP_DISABLE;
$911FC6B71CAC49F8DB4B0B0CACD0B23C BPF_TAP_INPUT;
$911FC6B71CAC49F8DB4B0B0CACD0B23C BPF_TAP_INPUT_OUTPUT;
$911FC6B71CAC49F8DB4B0B0CACD0B23C BPF_TAP_OUTPUT;
MACRO_BPF_LD BPF_TAX;
MACRO_BPF_LD BPF_TXA;
MACRO_BPF_LD BPF_W;
MACRO_BPF_LD BPF_X;
MACRO_BREAK BREAK;
MACRO_BRIGHT BRIGHT_DOWN;
MACRO_BRIGHT BRIGHT_UP;
MACRO_IGNBRK BRKINT;
MACRO_BS0 BS0;
MACRO_BS0 BS1;
MACRO_BSD BSD;
MACRO_BSD4 BSD4_3;
MACRO_BSD4 BSD4_4;
MACRO_FF0 BSDELAY;
MACRO_BTREEMAGIC BTREEMAGIC;
MACRO_BTREEVERSION BTREEVERSION;
MACRO__IOFBF BUFSIZ;
MACRO_BUS BUS_ADRALN;
MACRO_BUS BUS_NOOP;
MACRO_BUTTON1 BUTTON1_CLICKED;
MACRO_BUTTON1 BUTTON1_DOUBLE_CLICKED;
MACRO_BUTTON1 BUTTON1_PRESSED;
MACRO_BUTTON1 BUTTON1_RELEASED;
MACRO_BUTTON1 BUTTON1_RESERVED_EVENT;
MACRO_BUTTON1 BUTTON1_TRIPLE_CLICKED;
MACRO_BUTTON2 BUTTON2_CLICKED;
MACRO_BUTTON2 BUTTON2_DOUBLE_CLICKED;
MACRO_BUTTON2 BUTTON2_PRESSED;
MACRO_BUTTON2 BUTTON2_RELEASED;
MACRO_BUTTON2 BUTTON2_RESERVED_EVENT;
MACRO_BUTTON2 BUTTON2_TRIPLE_CLICKED;
MACRO_BUTTON3 BUTTON3_CLICKED;
MACRO_BUTTON3 BUTTON3_DOUBLE_CLICKED;
MACRO_BUTTON3 BUTTON3_PRESSED;
MACRO_BUTTON3 BUTTON3_RELEASED;
MACRO_BUTTON3 BUTTON3_RESERVED_EVENT;
MACRO_BUTTON3 BUTTON3_TRIPLE_CLICKED;
MACRO_BUTTON4 BUTTON4_CLICKED;
MACRO_BUTTON4 BUTTON4_DOUBLE_CLICKED;
MACRO_BUTTON4 BUTTON4_PRESSED;
MACRO_BUTTON4 BUTTON4_RELEASED;
MACRO_BUTTON4 BUTTON4_RESERVED_EVENT;
MACRO_BUTTON4 BUTTON4_TRIPLE_CLICKED;
MACRO_BUTTON BUTTON_ALT;
MACRO_BUTTON BUTTON_CTRL;
MACRO_BUTTON BUTTON_SHIFT;
MACRO_BYTES BYTES_PER_XDR_UNIT;
MACRO_BYTE BYTE_ORDER;
MACRO_BYTE_SIZE BYTE_SIZE;
MACRO_BZ BZ_CONFIG_ERROR;
MACRO_BZ BZ_DATA_ERROR;
MACRO_BZ BZ_DATA_ERROR_MAGIC;
MACRO_BZ BZ_FINISH;
MACRO_BZ BZ_FINISH_OK;
MACRO_BZ BZ_FLUSH;
MACRO_BZ BZ_FLUSH_OK;
MACRO_BZ BZ_IO_ERROR;
MACRO_BZ BZ_MAX_UNUSED;
MACRO_BZ BZ_MEM_ERROR;
MACRO_BZ BZ_OK;
MACRO_BZ BZ_OUTBUFF_FULL;
MACRO_BZ BZ_PARAM_ERROR;
MACRO_BZ BZ_RUN;
MACRO_BZ BZ_RUN_OK;
MACRO_BZ BZ_SEQUENCE_ERROR;
MACRO_BZ BZ_STREAM_END;
MACRO_BZ BZ_UNEXPECTED_EOF;
MACRO_B B_ADAPTORMASK;
MACRO_B B_ADAPTORSHIFT;
MACRO_B B_CONTROLLERMASK;
MACRO_B B_CONTROLLERSHIFT;
MACRO_B B_DEVMAGIC;
MACRO_B B_MAGICMASK;
MACRO_B B_PARTITIONMASK;
MACRO_B B_PARTITIONSHIFT;
MACRO_B B_TYPEMASK;
MACRO_B B_TYPESHIFT;
MACRO_B B_UNITMASK;
MACRO_B B_UNITSHIFT;
MACRO_CLOCK CALENDAR_CLOCK;
msg_type CALL;
MACRO_CALLOUT CALLOUT_PRI_DSP;
MACRO_CALLOUT CALLOUT_PRI_NOW;
MACRO_CALLOUT CALLOUT_PRI_RETRACE;
MACRO_CALLOUT CALLOUT_PRI_SOFTINT0;
MACRO_CALLOUT CALLOUT_PRI_SOFTINT1;
MACRO_CALLOUT CALLOUT_PRI_THREAD;
MACRO_CAPS CAPS_LOCK;
MACRO_CLSHIFT CBLOCK;
MACRO_CBQSIZE CBQSIZE;
MACRO_TANDEM CBREAK;
MACRO_CBRK CBRK;
MACRO_OFLOW CCAR_OFLOW;
MACRO_CCTS CCTS_OFLOW;
MACRO_CC CC_ARGHACK;
MACRO_CC CC_CURSOR;
MACRO_CC CC_EOF;
MACRO_CC CC_ERROR;
MACRO_CC CC_FATAL;
MACRO_CC CC_NEWLINE;
MACRO_CC CC_NORM;
MACRO_CC CC_REDISPLAY;
MACRO_CC CC_REFRESH;
MACRO_CC CC_REFRESH_BEEP;
MACRO_CDISCARD CDISCARD;
MACRO_OFLOW CDSR_OFLOW;
MACRO_CTIME CDSUSP;
MACRO_IFLOW CDTR_IFLOW;
MACRO_CEOF CEOF;
MACRO_CEOL CEOL;
MACRO_CEOT CEOT;
MACRO_CERASE CERASE;
MACRO_CERROR CERROR;
MACRO_CFLUSH CFLUSH;
MACRO_BIT CHAR_BIT;
MACRO_CHAR CHAR_MAX;
MACRO_CHAR CHAR_MIN;
MACRO_LONG_MAX CHILD_MAX;
MACRO_CHRTYPE CHRTYPE;
MACRO_CIGNORE CIGNORE;
MACRO_CINTR CINTR;
MACRO_CKILL CKILL;
MACRO_CKSUMTYPE CKSUMTYPE_CRC32;
MACRO_CKSUMTYPE CKSUMTYPE_DESCBC;
MACRO_CKSUMTYPE CKSUMTYPE_HMAC_SHA1_DES3;
MACRO_CKSUMTYPE CKSUMTYPE_NIST_SHA;
MACRO_CKSUMTYPE CKSUMTYPE_RSA_MD4;
MACRO_CKSUMTYPE CKSUMTYPE_RSA_MD4_DES;
MACRO_CKSUMTYPE CKSUMTYPE_RSA_MD5;
MACRO_CKSUMTYPE CKSUMTYPE_RSA_MD5_DES;
MACRO_CLBYTES CLBYTES;
MACRO_CLD CLD_CONTINUED;
MACRO_CLD CLD_DUMPED;
MACRO_CLD CLD_EXITED;
MACRO_CLD CLD_KILLED;
MACRO_CLD CLD_NOOP;
MACRO_CLD CLD_STOPPED;
MACRO_CLD CLD_TRAPPED;
MACRO_RETRY_TIMEOUT CLGET_RETRY_TIMEOUT;
MACRO_CLGET CLGET_SERVER_ADDR;
MACRO_TIMEOUT CLGET_TIMEOUT;
MACRO_CLIENT CLIENT_KRB_BUFLEN;
MACRO_CLIENT CLIENT_KRB_RETRY;
MACRO_CLIENT CLIENT_KRB_TIMEOUT;
MACRO_CLK CLK_TCK;
MACRO_CLNEXT CLNEXT;
MACRO_CS8 CLOCAL;
MACRO_CLOCKS CLOCKS_PER_SEC;
MACRO_CLOCK_GET CLOCK_ALARM_CURRES;
MACRO_CLOCK_GET CLOCK_ALARM_MAXRES;
MACRO_CLOCK_GET CLOCK_ALARM_MINRES;
MACRO_CLOCK_GET CLOCK_GET_TIME_RES;
MACRO_TASK_NULL CLOCK_NULL;
MACRO_CLOCK_SKEW CLOCK_SKEW;
MACRO_CLOFF CLOFF;
MACRO_CLOFSET CLOFSET;
MACRO_RETRY_TIMEOUT CLSET_RETRY_TIMEOUT;
MACRO_TIMEOUT CLSET_TIMEOUT;
MACRO_CLSHIFT CLSHIFT;
MACRO_CLSIZE CLSIZE;
MACRO_CLSIZELOG2 CLSIZELOG2;
MACRO_NZERO CMASK;
MACRO_CMD CMD_LEFT;
MACRO_CMD CMD_RIGHT;
MACRO_CMIN CMIN;
MACRO_AOUT COFF_F;
MACRO_COLL COLL_WEIGHTS_MAX;
MACRO_COLOR COLOR_BLACK;
MACRO_COLOR COLOR_BLUE;
MACRO_COLOR COLOR_CYAN;
MACRO_COLOR COLOR_GREEN;
MACRO_COLOR COLOR_MAGENTA;
MACRO_COLOR COLOR_RED;
MACRO_COLOR COLOR_WHITE;
MACRO_COLOR COLOR_YELLOW;
MACRO_COMAPT COMAPT_MAXLOGNAME;
MACRO_PRELIM COMPLETE;
MACRO_CONTINUE CONTINUE;
MACRO_ORDINARY CONTROL;
MACRO_CONTTYPE CONTTYPE;
MACRO_CONV CONV_BADBUFLEN;
MACRO_CONV CONV_BADCKSUM;
MACRO_CONV CONV_BADFMT;
MACRO_CONV CONV_OVERFLOW;
MACRO_CONV CONV_SUCCESS;
MACRO_COPYIN COPYIN_ARG0_OFFSET;
MACRO_COPY COPY_RESOURCE_FORK;
MACRO_CPF CPF_IGNORE_MODE;
MACRO_CPF CPF_MASK;
MACRO_CPF CPF_OVERWRITE;
MACRO_CPU CPU_STATE_IDLE;
MACRO_CPU CPU_STATE_MAX;
MACRO_CPU CPU_STATE_NICE;
MACRO_CPU CPU_STATE_SYSTEM;
MACRO_CPU CPU_STATE_USER;
MACRO_CPU CPU_SUBTYPE_386;
MACRO_CPU CPU_SUBTYPE_486;
MACRO_CPU CPU_SUBTYPE_486SX;
MACRO_CPU CPU_SUBTYPE_586;
MACRO_CPU CPU_SUBTYPE_BIG_ENDIAN;
MACRO_CPU CPU_SUBTYPE_HPPA_7100;
MACRO_CPU CPU_SUBTYPE_HPPA_7100LC;
MACRO_CPU CPU_SUBTYPE_HPPA_ALL;
MACRO_CPU CPU_SUBTYPE_I386_ALL;
MACRO_CPU CPU_SUBTYPE_I860_860;
MACRO_CPU CPU_SUBTYPE_I860_ALL;
MACRO_CPU CPU_SUBTYPE_INTEL_FAMILY_MAX;
MACRO_CPU CPU_SUBTYPE_INTEL_MODEL_ALL;
MACRO_CPU CPU_SUBTYPE_LITTLE_ENDIAN;
MACRO_CPU CPU_SUBTYPE_MC68030;
MACRO_CPU CPU_SUBTYPE_MC68030_ONLY;
MACRO_CPU CPU_SUBTYPE_MC68040;
MACRO_CPU CPU_SUBTYPE_MC680x0_ALL;
MACRO_CPU CPU_SUBTYPE_MC88000_ALL;
MACRO_CPU CPU_SUBTYPE_MC88100;
MACRO_CPU CPU_SUBTYPE_MC88110;
MACRO_CPU CPU_SUBTYPE_MC98000_ALL;
MACRO_CPU CPU_SUBTYPE_MC98601;
MACRO_CPU CPU_SUBTYPE_MIPS_ALL;
MACRO_CPU CPU_SUBTYPE_MIPS_R2000;
MACRO_CPU CPU_SUBTYPE_MIPS_R2000a;
MACRO_CPU CPU_SUBTYPE_MIPS_R2300;
MACRO_CPU CPU_SUBTYPE_MIPS_R2600;
MACRO_CPU CPU_SUBTYPE_MIPS_R2800;
MACRO_CPU CPU_SUBTYPE_MIPS_R3000;
MACRO_CPU CPU_SUBTYPE_MIPS_R3000a;
MACRO_CPU CPU_SUBTYPE_MULTIPLE;
MACRO_CPU CPU_SUBTYPE_PENT;
MACRO_CPU CPU_SUBTYPE_PENTII_M3;
MACRO_CPU CPU_SUBTYPE_PENTII_M5;
MACRO_CPU CPU_SUBTYPE_PENTPRO;
MACRO_CPU CPU_SUBTYPE_POWERPC_601;
MACRO_CPU CPU_SUBTYPE_POWERPC_602;
MACRO_CPU CPU_SUBTYPE_POWERPC_603;
MACRO_CPU CPU_SUBTYPE_POWERPC_603e;
MACRO_CPU CPU_SUBTYPE_POWERPC_603ev;
MACRO_CPU CPU_SUBTYPE_POWERPC_604;
MACRO_CPU CPU_SUBTYPE_POWERPC_604e;
MACRO_CPU CPU_SUBTYPE_POWERPC_620;
MACRO_CPU CPU_SUBTYPE_POWERPC_7400;
MACRO_CPU CPU_SUBTYPE_POWERPC_7450;
MACRO_CPU CPU_SUBTYPE_POWERPC_750;
MACRO_CPU CPU_SUBTYPE_POWERPC_ALL;
MACRO_CPU CPU_SUBTYPE_POWERPC_Max;
MACRO_CPU CPU_SUBTYPE_POWERPC_SCVger;
MACRO_CPU CPU_SUBTYPE_SPARC_ALL;
MACRO_CPU CPU_SUBTYPE_UVAXI;
MACRO_CPU CPU_SUBTYPE_UVAXII;
MACRO_CPU CPU_SUBTYPE_UVAXIII;
MACRO_CPU CPU_SUBTYPE_VAX730;
MACRO_CPU CPU_SUBTYPE_VAX750;
MACRO_CPU CPU_SUBTYPE_VAX780;
MACRO_CPU CPU_SUBTYPE_VAX785;
MACRO_CPU CPU_SUBTYPE_VAX8200;
MACRO_CPU CPU_SUBTYPE_VAX8500;
MACRO_CPU CPU_SUBTYPE_VAX8600;
MACRO_CPU CPU_SUBTYPE_VAX8650;
MACRO_CPU CPU_SUBTYPE_VAX8800;
MACRO_CPU CPU_SUBTYPE_VAX_ALL;
MACRO_CPU CPU_TYPE_ANY;
MACRO_CPU CPU_TYPE_HPPA;
MACRO_CPU CPU_TYPE_I386;
MACRO_CPU CPU_TYPE_I860;
MACRO_CPU CPU_TYPE_MC680x0;
MACRO_CPU CPU_TYPE_MC88000;
MACRO_CPU CPU_TYPE_MC98000;
MACRO_CPU CPU_TYPE_POWERPC;
MACRO_CPU CPU_TYPE_SPARC;
MACRO_CPU CPU_TYPE_VAX;
MACRO_CMIN CQUIT;
MACRO_CR0 CR0;
MACRO_CR0 CR1;
MACRO_CR0 CR2;
MACRO_CR3 CR3;
MACRO_XTABS CRDELAY;
MACRO_CS8 CREAD;
MACRO_CREPRINT CREPRINT;
MACRO_TANDEM CRMOD;
MACRO_CROUND CROUND;
MACRO_CRPRNT CRPRNT;
MACRO_ALLDELAY CRTBS;
MACRO_ALLDELAY CRTERA;
MACRO_ALLDELAY CRTKIL;
MACRO_IFLOW CRTS_IFLOW;
MACRO_CS5 CS5;
MACRO_CS5 CS6;
MACRO_CS5 CS7;
MACRO_CS8 CS8;
MACRO_CIGNORE CSIZE;
MACRO_CSTART CSTART;
MACRO_CSTATUS CSTATUS;
MACRO_CSTOP CSTOP;
MACRO_CS8 CSTOPB;
MACRO_CSUM CSUM_DATA_VALID;
MACRO_CSUM CSUM_DELAY_DATA;
MACRO_CSUM CSUM_DELAY_IP;
MACRO_CSUM CSUM_FRAGMENT;
MACRO_CSUM CSUM_IP;
MACRO_CSUM CSUM_IP_CHECKED;
MACRO_CSUM CSUM_IP_FRAGS;
MACRO_CSUM CSUM_IP_VALID;
MACRO_CSUM CSUM_PSEUDO_HDR;
MACRO_CSUM CSUM_TCP;
MACRO_CSUM CSUM_TCP_SUM16;
MACRO_CSUM CSUM_UDP;
MACRO_CSUSP CSUSP;
MACRO_CTIME CTIME;
MACRO_ALLDELAY CTLECH;
MACRO_CTLFLAG CTLFLAG_ANYBODY;
MACRO_CTLFLAG CTLFLAG_NOLOCK;
MACRO_CTLFLAG CTLFLAG_RD;
MACRO_CTLFLAG CTLFLAG_RW;
MACRO_CTLFLAG CTLFLAG_SECURE;
MACRO_CTLFLAG CTLFLAG_WR;
MACRO_CTLTYPE CTLTYPE;
MACRO_CTLTYPE_NODE CTLTYPE_INT;
MACRO_CTLTYPE_NODE CTLTYPE_NODE;
MACRO_CTLTYPE_NODE CTLTYPE_OPAQUE;
MACRO_CTLTYPE_NODE CTLTYPE_QUAD;
MACRO_CTLTYPE_NODE CTLTYPE_STRING;
MACRO_CTLTYPE_NODE CTLTYPE_STRUCT;
MACRO_CTL_UNSPEC CTL_DEBUG;
MACRO_CTL_DEBUG CTL_DEBUG_MAXID;
MACRO_CTL_DEBUG CTL_DEBUG_NAME;
MACRO_CTL_DEBUG CTL_DEBUG_VALUE;
MACRO_CTL_UNSPEC CTL_HW;
MACRO_CTL_UNSPEC CTL_KERN;
MACRO_CTL CTL_LEFT;
MACRO_CTL_UNSPEC CTL_MACHDEP;
MACRO_CTL_UNSPEC CTL_MAXID;
MACRO_CTL_MAXNAME CTL_MAXNAME;
MACRO_CTL_UNSPEC CTL_NET;
MACRO_CTL CTL_RIGHT;
MACRO_CTL_UNSPEC CTL_UNSPEC;
MACRO_CTL_UNSPEC CTL_USER;
MACRO_CTL_UNSPEC CTL_VFS;
MACRO_CTL_UNSPEC CTL_VM;
$7AE70D482D57B64FB9C9B10583B098AB CURLCLOSEPOLICY_CALLBACK;
$7AE70D482D57B64FB9C9B10583B098AB CURLCLOSEPOLICY_LAST;
$7AE70D482D57B64FB9C9B10583B098AB CURLCLOSEPOLICY_LEAST_RECENTLY_USED;
$7AE70D482D57B64FB9C9B10583B098AB CURLCLOSEPOLICY_LEAST_TRAFFIC;
$7AE70D482D57B64FB9C9B10583B098AB CURLCLOSEPOLICY_NONE;
$7AE70D482D57B64FB9C9B10583B098AB CURLCLOSEPOLICY_OLDEST;
$7AE70D482D57B64FB9C9B10583B098AB CURLCLOSEPOLICY_SLOWEST;
$071FCE002284A13164F1DF56F5A67CDE CURLE_ABORTED_BY_CALLBACK;
$071FCE002284A13164F1DF56F5A67CDE CURLE_ALREADY_COMPLETE;
$071FCE002284A13164F1DF56F5A67CDE CURLE_BAD_CALLING_ORDER;
$071FCE002284A13164F1DF56F5A67CDE CURLE_BAD_FUNCTION_ARGUMENT;
$071FCE002284A13164F1DF56F5A67CDE CURLE_BAD_PASSWORD_ENTERED;
$071FCE002284A13164F1DF56F5A67CDE CURLE_COULDNT_CONNECT;
$071FCE002284A13164F1DF56F5A67CDE CURLE_COULDNT_RESOLVE_HOST;
$071FCE002284A13164F1DF56F5A67CDE CURLE_COULDNT_RESOLVE_PROXY;
$071FCE002284A13164F1DF56F5A67CDE CURLE_FAILED_INIT;
$071FCE002284A13164F1DF56F5A67CDE CURLE_FILE_COULDNT_READ_FILE;
$071FCE002284A13164F1DF56F5A67CDE CURLE_FTP_ACCESS_DENIED;
$071FCE002284A13164F1DF56F5A67CDE CURLE_FTP_BAD_DOWNLOAD_RESUME;
$071FCE002284A13164F1DF56F5A67CDE CURLE_FTP_CANT_GET_HOST;
$071FCE002284A13164F1DF56F5A67CDE CURLE_FTP_CANT_RECONNECT;
$071FCE002284A13164F1DF56F5A67CDE CURLE_FTP_COULDNT_GET_SIZE;
$071FCE002284A13164F1DF56F5A67CDE CURLE_FTP_COULDNT_RETR_FILE;
$071FCE002284A13164F1DF56F5A67CDE CURLE_FTP_COULDNT_SET_ASCII;
$071FCE002284A13164F1DF56F5A67CDE CURLE_FTP_COULDNT_SET_BINARY;
$071FCE002284A13164F1DF56F5A67CDE CURLE_FTP_COULDNT_STOR_FILE;
$071FCE002284A13164F1DF56F5A67CDE CURLE_FTP_COULDNT_USE_REST;
$071FCE002284A13164F1DF56F5A67CDE CURLE_FTP_PORT_FAILED;
$071FCE002284A13164F1DF56F5A67CDE CURLE_FTP_QUOTE_ERROR;
$071FCE002284A13164F1DF56F5A67CDE CURLE_FTP_USER_PASSWORD_INCORRECT;
$071FCE002284A13164F1DF56F5A67CDE CURLE_FTP_WEIRD_227_FORMAT;
$071FCE002284A13164F1DF56F5A67CDE CURLE_FTP_WEIRD_PASS_REPLY;
$071FCE002284A13164F1DF56F5A67CDE CURLE_FTP_WEIRD_PASV_REPLY;
$071FCE002284A13164F1DF56F5A67CDE CURLE_FTP_WEIRD_SERVER_REPLY;
$071FCE002284A13164F1DF56F5A67CDE CURLE_FTP_WEIRD_USER_REPLY;
$071FCE002284A13164F1DF56F5A67CDE CURLE_FTP_WRITE_ERROR;
$071FCE002284A13164F1DF56F5A67CDE CURLE_FUNCTION_NOT_FOUND;
$071FCE002284A13164F1DF56F5A67CDE CURLE_HTTP_NOT_FOUND;
$071FCE002284A13164F1DF56F5A67CDE CURLE_HTTP_PORT_FAILED;
$071FCE002284A13164F1DF56F5A67CDE CURLE_HTTP_POST_ERROR;
$071FCE002284A13164F1DF56F5A67CDE CURLE_HTTP_RANGE_ERROR;
$071FCE002284A13164F1DF56F5A67CDE CURLE_LDAP_CANNOT_BIND;
$071FCE002284A13164F1DF56F5A67CDE CURLE_LDAP_SEARCH_FAILED;
$071FCE002284A13164F1DF56F5A67CDE CURLE_LIBRARY_NOT_FOUND;
$071FCE002284A13164F1DF56F5A67CDE CURLE_MALFORMAT_USER;
$071FCE002284A13164F1DF56F5A67CDE CURLE_OK;
$071FCE002284A13164F1DF56F5A67CDE CURLE_OPERATION_TIMEOUTED;
$071FCE002284A13164F1DF56F5A67CDE CURLE_OUT_OF_MEMORY;
$071FCE002284A13164F1DF56F5A67CDE CURLE_PARTIAL_FILE;
$071FCE002284A13164F1DF56F5A67CDE CURLE_READ_ERROR;
$071FCE002284A13164F1DF56F5A67CDE CURLE_SSL_CONNECT_ERROR;
$071FCE002284A13164F1DF56F5A67CDE CURLE_TELNET_OPTION_SYNTAX;
$071FCE002284A13164F1DF56F5A67CDE CURLE_TOO_MANY_REDIRECTS;
$071FCE002284A13164F1DF56F5A67CDE CURLE_UNKNOWN_TELNET_OPTION;
$071FCE002284A13164F1DF56F5A67CDE CURLE_UNSUPPORTED_PROTOCOL;
$071FCE002284A13164F1DF56F5A67CDE CURLE_URL_MALFORMAT;
$071FCE002284A13164F1DF56F5A67CDE CURLE_URL_MALFORMAT_USER;
$071FCE002284A13164F1DF56F5A67CDE CURLE_WRITE_ERROR;
$51CDBEE2E35B9D83A8BED354636A6FC6 CURLINFO_CONNECT_TIME;
$51CDBEE2E35B9D83A8BED354636A6FC6 CURLINFO_CONTENT_LENGTH_DOWNLOAD;
$51CDBEE2E35B9D83A8BED354636A6FC6 CURLINFO_CONTENT_LENGTH_UPLOAD;
MACRO_CURLINFO CURLINFO_DOUBLE;
$51CDBEE2E35B9D83A8BED354636A6FC6 CURLINFO_EFFECTIVE_URL;
$51CDBEE2E35B9D83A8BED354636A6FC6 CURLINFO_FILETIME;
$51CDBEE2E35B9D83A8BED354636A6FC6 CURLINFO_HEADER_SIZE;
$51CDBEE2E35B9D83A8BED354636A6FC6 CURLINFO_HTTP_CODE;
$51CDBEE2E35B9D83A8BED354636A6FC6 CURLINFO_LASTONE;
MACRO_CURLINFO CURLINFO_LONG;
MACRO_CURLINFO CURLINFO_MASK;
$51CDBEE2E35B9D83A8BED354636A6FC6 CURLINFO_NAMELOOKUP_TIME;
$51CDBEE2E35B9D83A8BED354636A6FC6 CURLINFO_NONE;
$51CDBEE2E35B9D83A8BED354636A6FC6 CURLINFO_PRETRANSFER_TIME;
$51CDBEE2E35B9D83A8BED354636A6FC6 CURLINFO_REQUEST_SIZE;
$51CDBEE2E35B9D83A8BED354636A6FC6 CURLINFO_SIZE_DOWNLOAD;
$51CDBEE2E35B9D83A8BED354636A6FC6 CURLINFO_SIZE_UPLOAD;
$51CDBEE2E35B9D83A8BED354636A6FC6 CURLINFO_SPEED_DOWNLOAD;
$51CDBEE2E35B9D83A8BED354636A6FC6 CURLINFO_SPEED_UPLOAD;
$51CDBEE2E35B9D83A8BED354636A6FC6 CURLINFO_SSL_VERIFYRESULT;
MACRO_CURLINFO CURLINFO_STRING;
$51CDBEE2E35B9D83A8BED354636A6FC6 CURLINFO_TOTAL_TIME;
MACRO_CURLINFO CURLINFO_TYPEMASK;
MACRO_CURLOPTTYPE CURLOPTTYPE_FUNCTIONPOINT;
MACRO_CURLOPTTYPE CURLOPTTYPE_LONG;
MACRO_CURLOPTTYPE CURLOPTTYPE_OBJECTPOINT;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_AUTOREFERER;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_CAINFO;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_CLOSEFUNCTION;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_CLOSEPOLICY;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_CONNECTTIMEOUT;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_COOKIE;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_COOKIEFILE;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_CRLF;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_CUSTOMREQUEST;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_EGDSOCKET;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_ERRORBUFFER;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_FAILONERROR;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_FILE;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_FILETIME;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_FOLLOWLOCATION;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_FORBID_REUSE;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_FRESH_CONNECT;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_FTPAPPEND;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_FTPASCII;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_FTPLISTONLY;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_FTPPORT;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_HEADER;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_HEADERFUNCTION;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_HTTPHEADER;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_HTTPPOST;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_HTTPPROXYTUNNEL;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_HTTPREQUEST;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_INFILE;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_INFILESIZE;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_INTERFACE;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_KRB4LEVEL;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_LASTENTRY;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_LOW_SPEED_LIMIT;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_LOW_SPEED_TIME;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_MAXCONNECTS;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_MAXREDIRS;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_MUTE;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_NETRC;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_NOBODY;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_NOPROGRESS;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_NOTHING;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_PASSWDDATA;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_PASSWDFUNCTION;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_PORT;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_POST;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_POSTFIELDS;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_POSTFIELDSIZE;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_POSTQUOTE;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_PROGRESSDATA;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_PROGRESSFUNCTION;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_PROXY;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_PROXYPORT;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_PROXYUSERPWD;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_PUT;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_QUOTE;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_RANDOM_FILE;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_RANGE;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_READFUNCTION;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_REFERER;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_RESUME_FROM;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_SSLCERT;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_SSLCERTPASSWD;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_SSLVERSION;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_SSL_VERIFYPEER;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_STDERR;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_TELNETOPTIONS;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_TIMECONDITION;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_TIMEOUT;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_TIMEVALUE;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_TRANSFERTEXT;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_UPLOAD;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_URL;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_USERAGENT;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_USERPWD;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_VERBOSE;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_WRITEFUNCTION;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_WRITEHEADER;
$44FF3325E6D3BEACE1A77B09C2B69C85 CURLOPT_WRITEINFO;
MACRO_CURL CURL_ERROR_SIZE;
$071FCE002284A13164F1DF56F5A67CDE CURL_LAST;
MACRO_CURSES CURSES;
MACRO_CURSES_H CURSES_H;
MACRO_CURS CURS_DOWN;
MACRO_CURS CURS_LEFT;
MACRO_CURS CURS_RIGHT;
MACRO_CURS CURS_UP;
MACRO_CWERASE CWERASE;
MACRO_C C_ANY;
MACRO_C_ARGSAVE C_ARGSAVE_LEN;
MACRO_C C_CHAOS;
MACRO_C C_HS;
MACRO_C C_IN;
MACRO_C_ARGSAVE C_RED_ZONE;
MACRO_C_ARGSAVE C_STACK_ALIGN;
MACRO_ConStatTagCnt ConStatTagCnt;
MACRO_DATA DATA;
MACRO_SZ DATE_SZ;
MACRO_DAYSPERLYEAR DAYSPERLYEAR;
MACRO_DAYSPERNYEAR DAYSPERNYEAR;
MACRO_DAYSPERWEEK DAYSPERWEEK;
MACRO_DBG DBG_BSD;
MACRO_DBG_NETIP DBG_BSD_EXCP_SC;
MACRO_DBG DBG_CACHE_HIT_FAULT;
MACRO_DBG DBG_COW_FAULT;
MACRO_DBG_NETIP DBG_DKRW;
MACRO_DBG DBG_DLIL;
MACRO_DBG_NETIP DBG_DLIL_IF_FLT;
MACRO_DBG_NETIP DBG_DLIL_IF_MOD;
MACRO_DBG_NETIP DBG_DLIL_PR_FLT;
MACRO_DBG_NETIP DBG_DLIL_PR_MOD;
MACRO_DBG_NETIP DBG_DLIL_STATIC;
MACRO_DBG DBG_DRIVERS;
MACRO_DBG_NETIP DBG_DRVAUDIO;
MACRO_DBG_NETIP DBG_DRVDISK;
MACRO_DBG_NETIP DBG_DRVFLOPPY;
MACRO_DBG_NETIP DBG_DRVKEYBOARD;
MACRO_DBG_NETIP DBG_DRVNETWORK;
MACRO_DBG_NETIP DBG_DRVPOINTING;
MACRO_DBG_NETIP DBG_DRVSCSI;
MACRO_DBG_NETIP DBG_DRVSERIAL;
MACRO_DBG_NETIP DBG_DRVSPLT;
MACRO_DBG DBG_DYLD;
MACRO_DBG_NETIP DBG_DYLD_STRING;
MACRO_DBG_NETIP DBG_FSRW;
MACRO_DBG DBG_FSYSTEM;
MACRO_DBG DBG_FUNC_END;
MACRO_DBG DBG_FUNC_NONE;
MACRO_DBG DBG_FUNC_START;
MACRO_DBG_NETIP DBG_IOAUDIO;
MACRO_DBG_NETIP DBG_IOCLKES;
MACRO_DBG_NETIP DBG_IOCMDQ;
MACRO_DBG_NETIP DBG_IODISK;
MACRO_DBG_NETIP DBG_IOFLOPPY;
MACRO_DBG_NETIP DBG_IOINTES;
MACRO_DBG_NETIP DBG_IOKEYBOARD;
MACRO_DBG DBG_IOKIT;
MACRO_DBG_NETIP DBG_IOMCURS;
MACRO_DBG_NETIP DBG_IOMDESC;
MACRO_DBG_NETIP DBG_IONETWORK;
MACRO_DBG_NETIP DBG_IOPOINTING;
MACRO_DBG_NETIP DBG_IOPOWER;
MACRO_DBG_NETIP DBG_IOSCSI;
MACRO_DBG_NETIP DBG_IOSERIAL;
MACRO_DBG_NETIP DBG_IOTTY;
MACRO_DBG_NETIP DBG_IOWORKLOOP;
MACRO_DBG DBG_MACH;
MACRO_DBG DBG_MACH_EXCP_ALNG;
MACRO_DBG DBG_MACH_EXCP_DECI;
MACRO_DBG DBG_MACH_EXCP_DFLT;
MACRO_DBG DBG_MACH_EXCP_FP;
MACRO_DBG DBG_MACH_EXCP_IFLT;
MACRO_DBG DBG_MACH_EXCP_INTR;
MACRO_DBG DBG_MACH_EXCP_SC;
MACRO_DBG DBG_MACH_EXCP_TRACE;
MACRO_DBG DBG_MACH_EXCP_TRAP;
MACRO_DBG DBG_MACH_IHDLR;
MACRO_DBG DBG_MACH_IPC;
MACRO_DBG DBG_MACH_MSGID_INVALID;
MACRO_DBG DBG_MACH_SCHED;
MACRO_DBG DBG_MACH_VM;
MACRO_DBG DBG_MIG;
MACRO_DBG DBG_MISC;
MACRO_DBG_NETIP DBG_NETAARP;
MACRO_DBG_NETIP DBG_NETADSP;
MACRO_DBG_NETIP DBG_NETAFP;
MACRO_DBG_NETIP DBG_NETARP;
MACRO_DBG_NETIP DBG_NETASP;
MACRO_DBG_NETIP DBG_NETATP;
MACRO_DBG_NETIP DBG_NETAURP;
MACRO_DBG_NETIP DBG_NETDDP;
MACRO_DBG_NETIP DBG_NETICMP;
MACRO_DBG_NETIP DBG_NETIGMP;
MACRO_DBG_NETIP DBG_NETIP;
MACRO_DBG_NETIP DBG_NETISIS;
MACRO_DBG_NETIP DBG_NETNBP;
MACRO_DBG_NETIP DBG_NETOSPF;
MACRO_DBG_NETIP DBG_NETRIP;
MACRO_DBG_NETIP DBG_NETRTMP;
MACRO_DBG_NETIP DBG_NETSNMP;
MACRO_DBG_NETIP DBG_NETSOCK;
MACRO_DBG_NETIP DBG_NETTCP;
MACRO_DBG_NETIP DBG_NETUDP;
MACRO_DBG DBG_NETWORK;
MACRO_DBG_NETIP DBG_NETZIP;
MACRO_DBG DBG_PAGEIN_FAULT;
MACRO_DBG DBG_TRACE;
MACRO_DBG_NETIP DBG_TRACE_DATA;
MACRO_DBG_NETIP DBG_TRACE_STRING;
MACRO_DBG DBG_ZERO_FILL_FAULT;
MACRO_DBM DBM_INSERT;
MACRO_DBM DBM_RDONLY;
MACRO_DBM DBM_REPLACE;
$B2A44DC877B17F2021CE46A73658A10E DB_BTREE;
$B2A44DC877B17F2021CE46A73658A10E DB_HASH;
MACRO_DB DB_LOCK;
$B2A44DC877B17F2021CE46A73658A10E DB_RECNO;
MACRO_DB DB_SHMEM;
MACRO_DB DB_TXN;
MACRO_DDPBROADCASTERRORS DDPBROADCASTERRORS;
MACRO_DDPCHECKSUMERRORS DDPCHECKSUMERRORS;
MACRO_DDPFORWREQUESTS DDPFORWREQUESTS;
MACRO_DDPHOPCOUNTERRORS DDPHOPCOUNTERRORS;
MACRO_DDPINLOCALDATAGRAMS DDPINLOCALDATAGRAMS;
MACRO_DDPINRECEIVES DDPINRECEIVES;
MACRO_FRAME_LEN DDPL_FRAME_LEN;
MACRO_DDPNOPROTOCOLHANDLERS DDPNOPROTOCOLHANDLERS;
MACRO_DDPOUTLONGS DDPOUTLONGS;
MACRO_DDPOUTNOROUTES DDPOUTNOROUTES;
MACRO_DDPOUTREQUESTS DDPOUTREQUESTS;
MACRO_DDPOUTSHORTS DDPOUTSHORTS;
MACRO_DDPSHORTDDPERRORS DDPSHORTDDPERRORS;
MACRO_DDPTOOLONGERRORS DDPTOOLONGERRORS;
MACRO_DDPTOOSHORTERRORS DDPTOOSHORTERRORS;
MACRO_IF_NAME DDP_ADDR_SIZE;
MACRO_DDP DDP_ADSP;
MACRO_DDP DDP_ATP;
MACRO_DDP_CHKSUM DDP_CHKSUM_ON;
MACRO_DDP_HDR DDP_DATAGRAM_SIZE;
MACRO_DDP_HDR DDP_DATA_SIZE;
MACRO_DDP DDP_ECHO;
MACRO_DDP_CHKSUM DDP_GETSOCKNAME;
MACRO_DDP_CHKSUM DDP_HDRINCL;
MACRO_DDP_HDR DDP_HDR_SIZE;
MACRO_DDP_IOC DDP_IOC_GET_CFG;
MACRO_DDP DDP_NBP;
MACRO_DDP DDP_RTMP;
MACRO_DDP DDP_RTMP_REQ;
MACRO_DDP_CHKSUM DDP_SLFSND_ON;
MACRO_DDP_HDR DDP_SOCKET_1st_DYNAMIC;
MACRO_DDP_HDR DDP_SOCKET_1st_EXPERIMENTAL;
MACRO_DDP_HDR DDP_SOCKET_1st_RESERVED;
MACRO_DDP_HDR DDP_SOCKET_LAST;
MACRO_DDP_CHKSUM DDP_STRIPHDR;
MACRO_DDP_HDR DDP_X_HDR_SIZE;
MACRO_DDP DDP_ZIP;
MACRO_ALLDELAY DECCTQ;
MACRO_DECRYPT DECRYPT;
MACRO_DEFAULT_OT DEFAULT_OT_DDPTYPE;
MACRO_DEFAULT DEFAULT_TKT_LIFE;
MACRO_DEFFILEMODE DEFFILEMODE;
MACRO_DELETE DELETE;
MACRO_DES DES_DECRYPT;
MACRO_DES DES_ENCRYPT;
MACRO_DEVFS DEVFS_BLOCK;
MACRO_DEVFS DEVFS_CHAR;
MACRO_DEVICE DEVICE_PAGER_CACHE_INHIB;
MACRO_DEVICE DEVICE_PAGER_COHERENT;
MACRO_DEVICE DEVICE_PAGER_CONTIGUOUS;
MACRO_DEVICE DEVICE_PAGER_GUARDED;
MACRO_DEVICE DEVICE_PAGER_NOPHYSCACHE;
MACRO_DEVICE DEVICE_PAGER_WRITE_THROUGH;
MACRO_DEVMAXNAMESIZE DEVMAXNAMESIZE;
MACRO_DEVMAXNAMESIZE DEVMAXPATHSIZE;
$066FE35C39670617E77C49BA9433F64D DEV_BDEV;
MACRO_DEV DEV_BSHIFT;
MACRO_DEV DEV_BSIZE;
$066FE35C39670617E77C49BA9433F64D DEV_CDEV;
$066FE35C39670617E77C49BA9433F64D DEV_DIR;
$066FE35C39670617E77C49BA9433F64D DEV_SLNK;
MACRO_DFLCSIZ DFLCSIZ;
MACRO_DFLDSIZ DFLDSIZ;
MACRO_DFLSSIZ DFLSSIZ;
MACRO_DIRBLKSIZ DIRBLKSIZ;
MACRO_DIRTYPE DIRTYPE;
MACRO_DIR DIR_MNTSTATUS_MNTPOINT;
MACRO_DKIOCEJECT DKIOCEJECT;
MACRO_DKIOCSYNCHRONIZECACHE DKIOCSYNCHRONIZECACHE;
MACRO_DKIO DKIO_ASYNC;
MACRO_DKIO DKIO_DONE;
MACRO_DKIO DKIO_META;
MACRO_DKIO DKIO_PAGING;
MACRO_DKIO DKIO_READ;
MACRO_DLIL DLIL_BLUEBOX;
MACRO_DLIL_PR DLIL_DESC_802_2;
MACRO_DLIL_PR DLIL_DESC_802_2_SNAP;
MACRO_DLIL_PR DLIL_DESC_ETYPE2;
MACRO_DLIL_PR DLIL_DESC_RAW;
MACRO_DLIL_PR DLIL_DESC_SAP;
MACRO_DLIL_PR DLIL_DESC_SNAP;
MACRO_DLIL_PR DLIL_IF_FILTER;
MACRO_DLIL DLIL_LAST_FILTER;
MACRO_DLIL DLIL_NULL_FILTER;
MACRO_DLIL_PR DLIL_PR_FILTER;
MACRO_DLIL DLIL_WAIT_FOR_FREE;
MACRO_DLT DLT_ARCNET;
MACRO_DLT DLT_ATM_CLIP;
MACRO_DLT DLT_ATM_RFC1483;
MACRO_DLT DLT_AX25;
MACRO_DLT DLT_CHAOS;
MACRO_DLT DLT_CHDLC;
MACRO_DLT DLT_C_HDLC;
MACRO_DLT DLT_EN10MB;
MACRO_DLT DLT_EN3MB;
MACRO_DLT DLT_FDDI;
MACRO_DLT DLT_IEEE802;
MACRO_DLT DLT_IEEE802_11;
MACRO_DLT DLT_LINUX_SLL;
MACRO_DLT DLT_LOOP;
MACRO_DLT DLT_NULL;
MACRO_DLT DLT_PPP;
MACRO_DLT DLT_PPP_BSDOS;
MACRO_DLT DLT_PPP_SERIAL;
MACRO_DLT DLT_PRONET;
MACRO_DLT DLT_RAW;
MACRO_DLT DLT_SLIP;
MACRO_DLT DLT_SLIP_BSDOS;
MACRO_DM DM;
MACRO_DMSET DMBIC;
MACRO_DMSET DMBIS;
MACRO_DMGET DMGET;
MACRO_DMSET DMSET;
$29FC7CC788C9FFDBF53740441D4A1DD5 DNSServiceBrowserReplyAddInstance;
$29FC7CC788C9FFDBF53740441D4A1DD5 DNSServiceBrowserReplyRemoveInstance;
$6D22B6C70995B3A898F6ED894F8956B2 DNSServiceDiscoverReplyFlagsFinished;
$6D22B6C70995B3A898F6ED894F8956B2 DNSServiceDiscoverReplyFlagsMoreComing;
$EB4F25A3AB2B34DE382859FFD4ADE17B DNSServiceDomainEnumerationReplyAddDomain;
$EB4F25A3AB2B34DE382859FFD4ADE17B DNSServiceDomainEnumerationReplyAddDomainDefault;
$EB4F25A3AB2B34DE382859FFD4ADE17B DNSServiceDomainEnumerationReplyRemoveDomain;
MACRO_DN DN_ACCESS;
MACRO_DN DN_CHANGE;
MACRO_DN DN_MODIFIED;
MACRO_DN DN_RENAME;
MACRO_DN DN_UPDATE;
MACRO_DO DO;
MACRO_DOMAIN DOMAIN;
MACRO_DONT DONT;
MACRO_DOT3COMPLIANCE DOT3COMPLIANCE_COLLS;
MACRO_DOT3COMPLIANCE DOT3COMPLIANCE_STATS;
MACRO_DRT DRT_CACHEDROP;
MACRO_DRT DRT_CACHEREPLY;
MACRO_DRT DRT_NFSV3;
MACRO_DRT DRT_NQNFS;
MACRO_DRT DRT_TCP;
MACRO_DST DST_AUST;
MACRO_DST DST_CAN;
MACRO_DST DST_EET;
MACRO_DST DST_MET;
MACRO_DST DST_NONE;
MACRO_DST DST_USA;
MACRO_DST DST_WET;
MACRO_DTF DTF_HIDEW;
MACRO_DTF DTF_NODUP;
MACRO_DTF DTF_REWIND;
MACRO_DT DT_BLK;
MACRO_DT DT_CHR;
MACRO_DT DT_DIR;
MACRO_DT DT_FIFO;
MACRO_DT DT_LNK;
MACRO_DT DT_REG;
MACRO_DT DT_SOCK;
MACRO_DT DT_UNKNOWN;
MACRO_DT DT_WHT;
MACRO_D_TAPE D_DISK;
MACRO_D D_L_DNSTREAM;
MACRO_D D_L_ERROR;
MACRO_D D_L_FATAL;
MACRO_D D_L_INFO;
MACRO_D D_L_INPUT;
MACRO_D D_L_OUTPUT;
MACRO_D D_L_ROUTING;
MACRO_D D_L_ROUTING_AT;
MACRO_D D_L_SHUTDN;
MACRO_D D_L_SHUTDN_INFO;
MACRO_D D_L_SHUTDN_LOW;
MACRO_D D_L_STARTUP;
MACRO_D D_L_STARTUP_INFO;
MACRO_D D_L_STARTUP_LOW;
MACRO_D D_L_STATE_CHG;
MACRO_D D_L_STATS;
MACRO_D D_L_TRACE;
MACRO_D D_L_UPSTREAM;
MACRO_D D_L_USR1;
MACRO_D D_L_USR2;
MACRO_D D_L_USR3;
MACRO_D D_L_USR4;
MACRO_D D_L_VERBOSE;
MACRO_D D_L_WARNING;
MACRO_D D_M_AARP;
MACRO_D D_M_ADSP;
MACRO_D D_M_ADSP_LOW;
MACRO_D D_M_AEP;
MACRO_D D_M_ASP;
MACRO_D D_M_ASP_LOW;
MACRO_D D_M_ATP;
MACRO_D D_M_ATP_LOW;
MACRO_D D_M_AURP;
MACRO_D D_M_AURP_LOW;
MACRO_D D_M_DDP;
MACRO_D D_M_DDP_LOW;
MACRO_D D_M_ELAP;
MACRO_D D_M_ELAP_LOW;
MACRO_D D_M_NBP;
MACRO_D D_M_NBP_LOW;
MACRO_D D_M_PAT;
MACRO_D D_M_PAT_LOW;
MACRO_D D_M_RTMP;
MACRO_D D_M_RTMP_LOW;
MACRO_D D_M_TRACE;
MACRO_D D_M_ZIP;
MACRO_D D_M_ZIP_LOW;
MACRO_D_TAPE D_TAPE;
MACRO_D_TAPE D_TTY;
MACRO_ERRNO E2BIG;
MACRO_ERRNO EACCES;
MACRO_EUNDEF EACCESS;
MACRO_ERRNO EADDRINUSE;
MACRO_ERRNO EADDRNOTAVAIL;
MACRO_EADDRNOTINUSE EADDRNOTINUSE;
MACRO_ERRNO EAFNOSUPPORT;
MACRO_ERRNO EAGAIN;
MACRO_EAI EAI_ADDRFAMILY;
MACRO_EAI EAI_AGAIN;
MACRO_EAI EAI_BADFLAGS;
MACRO_EAI EAI_BADHINTS;
MACRO_EAI EAI_FAIL;
MACRO_EAI EAI_FAMILY;
MACRO_EAI EAI_MAX;
MACRO_EAI EAI_MEMORY;
MACRO_EAI EAI_NODATA;
MACRO_EAI EAI_NONAME;
MACRO_EAI EAI_PROTOCOL;
MACRO_EAI EAI_SERVICE;
MACRO_EAI EAI_SOCKTYPE;
MACRO_EAI EAI_SYSTEM;
MACRO_ERRNO EALREADY;
MACRO_ERRNO EAUTH;
MACRO_ERRNO EBADARCH;
MACRO_ERRNO EBADEXEC;
MACRO_ERRNO EBADF;
MACRO_EBADID EBADID;
MACRO_ERRNO EBADMACHO;
MACRO_ENOSPACE EBADOP;
MACRO_ERRNO EBADRPC;
MACRO_ERRNO EBUSY;
MACRO_EC EC;
MACRO_ERRNO ECANCELED;
MACRO_ERRNO ECHILD;
MACRO_TANDEM ECHO;
MACRO_ECHOKE ECHOCTL;
MACRO_ECHOKE ECHOE;
MACRO_ECHOKE ECHOK;
MACRO_ECHOKE ECHOKE;
MACRO_ECHOKE ECHONL;
MACRO_ECHOKE ECHOPRT;
MACRO_ERRNO ECONNABORTED;
MACRO_ERRNO ECONNREFUSED;
MACRO_ERRNO ECONNRESET;
MACRO_ERRNO EDEADLK;
MACRO_ERRNO EDESTADDRREQ;
MACRO_ERRNO EDEVERR;
MACRO_ERRNO EDOM;
MACRO_ERRNO EDQUOT;
MACRO_EENDOFMSG EENDOFMSG;
MACRO_ERRNO EEXIST;
MACRO_EEXISTS EEXISTS;
MACRO_ERRNO EFAULT;
MACRO_ERRNO EFBIG;
MACRO_ERRNO EFTYPE;
MACRO_EFWDRESET EFWDRESET;
MACRO_ERRNO EHOSTDOWN;
MACRO_ERRNO EHOSTUNREACH;
MACRO_ERRNO EINPROGRESS;
MACRO_ERRNO EINTR;
MACRO_ERRNO EINVAL;
MACRO_ERRNO EIO;
MACRO_ERRNO EISCONN;
MACRO_ERRNO EISDIR;
MACRO_EL_0 EL;
MACRO_ELAP ELAP_IOC_GET_STATS;
MACRO_ERRNO ELAST;
MACRO_ERRNO ELOOP;
MACRO_EL EL_ADDFN;
MACRO_EL EL_BIND;
MACRO_EL EL_BUILTIN_GETCFN;
MACRO_EL EL_CLIENTDATA;
MACRO_EL EL_ECHOTC;
MACRO_EL EL_EDITMODE;
MACRO_EL EL_EDITOR;
MACRO_EL EL_GETCFN;
MACRO_EL EL_HIST;
MACRO_EL EL_PROMPT;
MACRO_EL EL_RPROMPT;
MACRO_EL EL_SETTC;
MACRO_EL EL_SETTY;
MACRO_EL EL_SIGNAL;
MACRO_EL EL_TELLTC;
MACRO_EL EL_TERMINAL;
MACRO_ERRNO EMFILE;
MACRO_ERRNO EMLINK;
MACRO_ERRNO EMSGSIZE;
MACRO_ERRNO ENAMETOOLONG;
MACRO_ENCRYPT_0 ENCRYPT;
MACRO_ENCRYPT ENCRYPT_CNT;
MACRO_ENCRYPT ENCRYPT_DEC_KEYID;
MACRO_ENCRYPT ENCRYPT_ENC_KEYID;
MACRO_ENCRYPT ENCRYPT_END;
MACRO_ENCRYPT ENCRYPT_IS;
MACRO_ENCRYPT ENCRYPT_REPLY;
MACRO_ENCRYPT ENCRYPT_REQEND;
MACRO_ENCRYPT ENCRYPT_REQSTART;
MACRO_ENCRYPT ENCRYPT_START;
MACRO_ENCRYPT ENCRYPT_SUPPORT;
MACRO_ENCTYPE_ANY ENCTYPE_ANY;
MACRO_ENCTYPE_ANY ENCTYPE_CNT;
MACRO_ENCTYPE ENCTYPE_DES3_CBC_RAW;
MACRO_ENCTYPE ENCTYPE_DES3_CBC_SHA;
MACRO_ENCTYPE ENCTYPE_DES3_CBC_SHA1;
MACRO_ENCTYPE ENCTYPE_DES_CBC_CRC;
MACRO_ENCTYPE ENCTYPE_DES_CBC_MD4;
MACRO_ENCTYPE ENCTYPE_DES_CBC_MD5;
MACRO_ENCTYPE ENCTYPE_DES_CBC_RAW;
MACRO_ENCTYPE_ANY ENCTYPE_DES_CFB64;
MACRO_ENCTYPE ENCTYPE_DES_HMAC_SHA1;
MACRO_ENCTYPE_ANY ENCTYPE_DES_OFB64;
MACRO_ENCTYPE ENCTYPE_LOCAL_DES3_HMAC_SHA1;
MACRO_ENCTYPE ENCTYPE_NULL;
MACRO_ENCTYPE ENCTYPE_UNKNOWN;
MACRO_ERRNO ENEEDAUTH;
MACRO_ERRNO ENETDOWN;
MACRO_ERRNO ENETRESET;
MACRO_ERRNO ENETUNREACH;
MACRO_ERRNO ENFILE;
MACRO_ERRNO ENOBUFS;
MACRO_ERRNO ENODEV;
MACRO_ERRNO ENOENT;
MACRO_ERRNO ENOEXEC;
MACRO_ERRNO ENOLCK;
MACRO_ERRNO ENOMEM;
MACRO_ERRNO ENOPROTOOPT;
MACRO_ENOSPACE ENOSPACE;
MACRO_ERRNO ENOSPC;
MACRO_ERRNO ENOSYS;
MACRO_ERRNO ENOTBLK;
MACRO_ERRNO ENOTCONN;
MACRO_ERRNO ENOTDIR;
MACRO_ERRNO ENOTEMPTY;
MACRO_EUNDEF ENOTFOUND;
MACRO_ERRNO ENOTSOCK;
MACRO_ERRNO ENOTSUP;
MACRO_ERRNO ENOTTY;
MACRO_ENOUSER ENOUSER;
MACRO_SLOT ENVIRONMENT_SLOT;
MACRO_ENV ENV_ESC;
MACRO_ENV ENV_USERVAR;
MACRO_ERRNO ENXIO;
MACRO_EOF EOF;
MACRO_EONEENTQUE EONEENTQUE;
MACRO_ERRNO EOPNOTSUPP;
MACRO_EOR EOR;
MACRO_ERRNO EOVERFLOW;
MACRO_ERRNO EPERM;
MACRO_ERRNO EPFNOSUPPORT;
MACRO_ERRNO EPIPE;
MACRO_EPOCH EPOCH_WDAY;
MACRO_EPOCH EPOCH_YEAR;
MACRO_ERRNO EPROCLIM;
MACRO_ERRNO EPROCUNAVAIL;
MACRO_EPROC EPROC_CTTY;
MACRO_EPROC EPROC_SLEADER;
MACRO_ERRNO EPROGMISMATCH;
MACRO_ERRNO EPROGUNAVAIL;
MACRO_ERRNO EPROTONOSUPPORT;
MACRO_ERRNO EPROTOTYPE;
MACRO_ERRNO EPWROFF;
MACRO_EP EP_DATA_SIZE;
MACRO_EP EP_REPLY;
MACRO_EP EP_REQUEST;
MACRO_SOCKET EP_SOCKET;
MACRO_EQUEBLOCKED EQUEBLOCKED;
MACRO_EQUEWASEMP EQUEWASEMP;
MACRO_COLL EQUIV_CLASS_MAX;
MACRO_ERRNO ERANGE;
MACRO_ERRNO EREMOTE;
MACRO_ERRNO EROFS;
MACRO_ERRNO ERPCMISMATCH;
MACRO_ERR ERR;
MACRO_ERROR_0 ERROR;
MACRO_ERROR_TABLE ERROR_TABLE_BASE_asn1;
MACRO_ERROR_TABLE_BASE_ggss ERROR_TABLE_BASE_ggss;
MACRO_ERROR_TABLE_BASE_k5g ERROR_TABLE_BASE_k5g;
MACRO_ERROR ERROR_TABLE_BASE_kadm;
MACRO_ERROR_TABLE_BASE ERROR_TABLE_BASE_kdb5;
MACRO_ERROR_TABLE_BASE_krb ERROR_TABLE_BASE_krb;
MACRO_ERROR_TABLE_BASE_krb5 ERROR_TABLE_BASE_krb5;
MACRO_ERROR_TABLE_BASE_krbm ERROR_TABLE_BASE_krbm;
MACRO_ERROR_TABLE_BASE_kv5m ERROR_TABLE_BASE_kv5m;
MACRO_ERROR_TABLE_BASE_prof ERROR_TABLE_BASE_prof;
MACRO_ERTR ERTR_CABLE_CONFLICT;
MACRO_ERTR ERTR_CABLE_NOZONE;
MACRO_ERTR ERTR_CABLE_STARTUP;
MACRO_ERTR ERTR_RTMP_BAD_VERSION;
MACRO_ERTR ERTR_SEED_CONFLICT;
MACRO_ERRNO ESHLIBVERS;
MACRO_ERRNO ESHUTDOWN;
MACRO_ERRNO ESOCKTNOSUPPORT;
MACRO_ERRNO ESPIPE;
MACRO_ERRNO ESRCH;
MACRO_ERRNO ESTALE;
MACRO_ETHERMIN ETHERMIN;
MACRO_ETHERMTU ETHERMTU;
MACRO_ETHERTYPE_AT ETHERTYPE_AARP;
MACRO_ETHERTYPE ETHERTYPE_ARP;
MACRO_ETHERTYPE_AT ETHERTYPE_AT;
MACRO_ETHERTYPE ETHERTYPE_IP;
MACRO_ETHERTYPE ETHERTYPE_IPV6;
MACRO_ETHERTYPE ETHERTYPE_LOOPBACK;
MACRO_ETHERTYPE ETHERTYPE_NTRAILER;
MACRO_ETHERTYPE ETHERTYPE_PUP;
MACRO_ETHERTYPE ETHERTYPE_REVARP;
MACRO_ETHERTYPE ETHERTYPE_TRAIL;
MACRO_ETHERTYPE ETHERTYPE_VLAN;
MACRO_ETHER ETHER_ADDR_LEN;
MACRO_ETHER ETHER_CRC_LEN;
MACRO_ETHER ETHER_HDR_LEN;
MACRO_ETHER ETHER_MAX_LEN;
MACRO_ETHER ETHER_MIN_LEN;
MACRO_ETHER ETHER_TYPE_LEN;
MACRO_ERRNO ETIMEDOUT;
MACRO_ERRNO ETOOMANYREFS;
MACRO_ERRNO ETXTBSY;
MACRO_ET ET_ADDR;
MACRO_EUNDEF EUNDEF;
MACRO_ERRNO EUSERS;
MACRO_TANDEM EVENP;
MACRO_EV EV_DMASK;
MACRO_EV EV_EX;
MACRO_EV EV_FD;
MACRO_EV EV_FIN;
MACRO_EV EV_MASK;
MACRO_EV EV_OOB;
MACRO_EV EV_RBYTES;
MACRO_EV EV_RCLOSED;
MACRO_EV EV_RCONN;
MACRO_EV EV_RE;
MACRO_EV EV_RESET;
MACRO_EV EV_RM;
MACRO_EV EV_RWBYTES;
MACRO_EV EV_TIMEOUT;
MACRO_EV EV_WBYTES;
MACRO_EV EV_WCLOSED;
MACRO_EV EV_WCONN;
MACRO_EV EV_WR;
MACRO_ERRNO EWOULDBLOCK;
MACRO_EXCEPTION EXCEPTION_CODE_MAX;
MACRO_EXCEPTION_DEFAULT EXCEPTION_DEFAULT;
MACRO_EXCEPTION_DEFAULT EXCEPTION_STATE;
MACRO_EXCEPTION_DEFAULT EXCEPTION_STATE_IDENTITY;
MACRO_EXC_PPC EXC_ARITHMETIC;
MACRO_EXC_PPC EXC_BAD_ACCESS;
MACRO_EXC_PPC EXC_BAD_INSTRUCTION;
MACRO_EXC_PPC EXC_BREAKPOINT;
MACRO_EXC_PPC EXC_EMULATION;
MACRO_EXC_PPC EXC_MACH_SYSCALL;
MACRO_EXC_MASK EXC_MASK_ALL;
MACRO_EXC_MASK EXC_MASK_ARITHMETIC;
MACRO_EXC_MASK EXC_MASK_BAD_ACCESS;
MACRO_EXC_MASK EXC_MASK_BAD_INSTRUCTION;
MACRO_EXC_MASK EXC_MASK_BREAKPOINT;
MACRO_EXC_MASK EXC_MASK_EMULATION;
MACRO_EXC_PPC EXC_MASK_MACHINE;
MACRO_EXC_MASK EXC_MASK_MACH_SYSCALL;
MACRO_EXC_MASK EXC_MASK_RPC_ALERT;
MACRO_EXC_MASK EXC_MASK_SOFTWARE;
MACRO_EXC_MASK EXC_MASK_SYSCALL;
MACRO_EXC_PPC EXC_PPC_ALTIVECASSIST;
MACRO_EXC_PPC EXC_PPC_BADSPACE;
MACRO_EXC_PPC EXC_PPC_BREAKPOINT;
MACRO_EXC_PPC EXC_PPC_FLT_INEXACT;
MACRO_EXC_PPC EXC_PPC_FLT_NOT_A_NUMBER;
MACRO_EXC_PPC EXC_PPC_FLT_OVERFLOW;
MACRO_EXC_PPC EXC_PPC_FLT_UNDERFLOW;
MACRO_EXC_PPC EXC_PPC_FLT_ZERO_DIVIDE;
MACRO_EXC_PPC EXC_PPC_INVALID_SYSCALL;
MACRO_EXC_PPC EXC_PPC_MIGRATE;
MACRO_EXC_PPC EXC_PPC_NOEMULATION;
MACRO_EXC_PPC EXC_PPC_OVERFLOW;
MACRO_EXC_PPC EXC_PPC_PRIVINST;
MACRO_EXC_PPC EXC_PPC_PRIVREG;
MACRO_EXC_PPC EXC_PPC_TRACE;
MACRO_EXC_PPC EXC_PPC_TRAP;
MACRO_EXC_PPC EXC_PPC_UNALIGNED;
MACRO_EXC_PPC EXC_PPC_UNIPL_INST;
MACRO_EXC_PPC EXC_PPC_VM_PROT_READ;
MACRO_EXC_PPC EXC_PPC_ZERO_DIVIDE;
MACRO_EXC_PPC EXC_RPC_ALERT;
MACRO_EXC_PPC EXC_SOFTWARE;
MACRO_EXC_SOFT EXC_SOFT_SIGNAL;
MACRO_EXC_PPC EXC_SYSCALL;
MACRO_EXC EXC_TYPES_COUNT;
MACRO_EXC_UNIX EXC_UNIX_ABORT;
MACRO_EXC_UNIX EXC_UNIX_BAD_PIPE;
MACRO_EXC_UNIX EXC_UNIX_BAD_SYSCALL;
MACRO_ERRNO EXDEV;
MACRO_EXIT EXIT_FAILURE;
MACRO_EXIT EXIT_SUCCESS;
MACRO_EXPIRE EXPIRE_TIME;
MACRO_COLL EXPR_NEST_MAX;
MACRO_ECHOKE EXTPROC;
MACRO_EXT EXT_NULL;
MACRO_EX EX_CANTCREAT;
MACRO_EX EX_CONFIG;
MACRO_EX EX_DATAERR;
MACRO_EX EX_IOERR;
MACRO_EX EX_NOHOST;
MACRO_EX EX_NOINPUT;
MACRO_EX EX_NOPERM;
MACRO_EX_NOT EX_NOT_EXECUTABLE;
MACRO_EX EX_NOUSER;
MACRO_EX EX_OK;
MACRO_EX EX_OSERR;
MACRO_EX EX_OSFILE;
MACRO_EX EX_PROTOCOL;
MACRO_EX EX_SOFTWARE;
MACRO_EX EX_TEMPFAIL;
MACRO_EX EX_UNAVAILABLE;
MACRO_EX EX_USAGE;
MACRO_EX EX__BASE;
MACRO_EX EX__MAX;
MACRO_E E_BAD_ARGUMENT;
MACRO_E E_BAD_STATE;
MACRO_E E_CONNECTED;
MACRO_E E_CURRENT;
MACRO_E E_INVALID_FIELD;
MACRO_E E_NOT_CONNECTED;
MACRO_E E_NOT_POSTED;
MACRO_E E_NOT_SELECTABLE;
MACRO_E E_NO_MATCH;
MACRO_E E_NO_ROOM;
MACRO_E E_OK;
MACRO_E E_POSTED;
MACRO_E E_REQUEST_DENIED;
MACRO_E E_SYSTEM_ERROR;
MACRO_E E_UNKNOWN_COMMAND;
MACRO_FAILED FAILED;
MACRO_FALIGN FALIGN;
MACRO_BOOL FALSE;
MACRO_FAPPEND FAPPEND;
MACRO_FAPPEND FASYNC;
MACRO_FD_CLOEXEC FD_CLOEXEC;
MACRO_FD FD_SETSIZE;
$A573D5BFC6FE9379B4011F75D6601CED FE_ALL_EXCEPT;
$A573D5BFC6FE9379B4011F75D6601CED FE_DIVBYZERO;
$67C416E26EEE13F3D7C2627C9615BC9D FE_DOWNWARD;
$A573D5BFC6FE9379B4011F75D6601CED FE_INEXACT;
$A573D5BFC6FE9379B4011F75D6601CED FE_INVALID;
$A573D5BFC6FE9379B4011F75D6601CED FE_OVERFLOW;
$67C416E26EEE13F3D7C2627C9615BC9D FE_TONEAREST;
$67C416E26EEE13F3D7C2627C9615BC9D FE_TOWARDZERO;
$A573D5BFC6FE9379B4011F75D6601CED FE_UNDERFLOW;
$67C416E26EEE13F3D7C2627C9615BC9D FE_UPWARD;
MACRO_FF0 FF0;
MACRO_FF0 FF1;
MACRO_FAPPEND FFSYNC;
MACRO_FIFOTYPE FIFOTYPE;
MACRO_MAX FILENAME_MAX;
MACRO_FIOCLEX FIOCLEX;
MACRO_FIONCLEX FIONCLEX;
MACRO_FIRST FIRST_EXCEPTION;
MACRO_ALLDELAY FLUSHO;
MACRO_FM FM_ARG0;
MACRO_FM FM_BACKPTR;
MACRO_FM FM_CR_SAVE;
MACRO_FM FM_LR_SAVE;
MACRO_FM_REDZONE FM_REDZONE;
MACRO_FM FM_SIZE;
MACRO_FNDELAY FNDELAY;
MACRO_FNM FNM_CASEFOLD;
MACRO_FNM FNM_FILE_NAME;
MACRO_FNM FNM_IGNORECASE;
MACRO_FNM FNM_LEADING_DIR;
MACRO_FNM FNM_NOESCAPE;
MACRO_FNM FNM_NOMATCH;
MACRO_FNM FNM_PATHNAME;
MACRO_FNM FNM_PERIOD;
MACRO_FNONBLOCK FNONBLOCK;
MACRO_MAX FOPEN_MAX;
MACRO_NOERROR FORMERR;
MACRO_FORM FORM_C;
MACRO_FORM FORM_N;
MACRO_FORM FORM_T;
MACRO_FPARSELN FPARSELN_UNESCALL;
MACRO_FPARSELN FPARSELN_UNESCCOMM;
MACRO_FPARSELN FPARSELN_UNESCCONT;
MACRO_FPARSELN FPARSELN_UNESCESC;
MACRO_FPARSELN FPARSELN_UNESCREST;
MACRO_FPE FPE_FLTDIV;
MACRO_FPE FPE_FLTINV;
MACRO_FPE FPE_FLTOVF;
MACRO_FPE FPE_FLTRES;
MACRO_FPE FPE_FLTUND;
MACRO_FPE FPE_NOOP;
MACRO_FP FP_FAST_FMA;
MACRO_FP FP_FAST_FMAF;
MACRO_FP FP_ILOGB0;
MACRO_FP FP_ILOGBNAN;
$F1818EFC007C0CFF41528F4AC69DA857 FP_INFINITE;
$F1818EFC007C0CFF41528F4AC69DA857 FP_NAN;
$F1818EFC007C0CFF41528F4AC69DA857 FP_NORMAL;
$F1818EFC007C0CFF41528F4AC69DA857 FP_SUBNORMAL;
$F1818EFC007C0CFF41528F4AC69DA857 FP_ZERO;
MACRO_FREAD FREAD;
MACRO_FSHIFT FSCALE;
MACRO_FSHIFT FSHIFT;
MACRO_FSOPT FSOPT_NOFOLLOW;
MACRO_FSOPT FSOPT_NOINMEMUPDATE;
MACRO_FST FST_EOF;
MACRO_FSUC FSUC_INITIALIZE;
MACRO_FSUC FSUC_MOUNT;
MACRO_FSUC FSUC_MOUNT_FORCE;
MACRO_FSUC FSUC_PROBE;
MACRO_FSUC FSUC_PROBEFORINIT;
MACRO_FSUC FSUC_REPAIR;
MACRO_FSUC FSUC_UNMOUNT;
MACRO_FSUR FSUR_INITRECOGNIZED;
MACRO_FSUR FSUR_INVAL;
MACRO_FSUR FSUR_IO_FAIL;
MACRO_FSUR FSUR_IO_SUCCESS;
MACRO_FSUR FSUR_IO_UNCLEAN;
MACRO_FSUR FSUR_LOADERR;
MACRO_FSUR FSUR_RECOGNIZED;
MACRO_FSUR FSUR_UNRECOGNIZED;
MACRO_FTS FTS_AGAIN;
MACRO_FTS FTS_COMFOLLOW;
MACRO_FTS FTS_D;
MACRO_FTS FTS_DC;
MACRO_FTS FTS_DEFAULT;
MACRO_FTS FTS_DNR;
MACRO_FTS FTS_DONTCHDIR;
MACRO_FTS FTS_DOT;
MACRO_FTS FTS_DP;
MACRO_FTS FTS_ERR;
MACRO_FTS FTS_F;
MACRO_FTS FTS_FOLLOW;
MACRO_FTS FTS_INIT;
MACRO_FTS FTS_ISW;
MACRO_FTS FTS_LOGICAL;
MACRO_FTS FTS_NAMEONLY;
MACRO_FTS FTS_NOCHDIR;
MACRO_FTS FTS_NOINSTR;
MACRO_FTS FTS_NOSTAT;
MACRO_FTS FTS_NS;
MACRO_FTS FTS_NSOK;
MACRO_FTS FTS_OPTIONMASK;
MACRO_FTS FTS_PHYSICAL;
MACRO_FTS FTS_ROOTLEVEL;
MACRO_FTS FTS_ROOTPARENTLEVEL;
MACRO_FTS FTS_SEEDOT;
MACRO_FTS FTS_SKIP;
MACRO_FTS FTS_SL;
MACRO_FTS FTS_SLNONE;
MACRO_FTS FTS_STOP;
MACRO_FTS FTS_SYMFOLLOW;
MACRO_FTS FTS_W;
MACRO_FTS FTS_WHITEOUT;
MACRO_FTS FTS_XDEV;
MACRO_FREAD FWRITE;
MACRO_FW FW_IFNLEN;
MACRO_F_RDLCK F_ALLOCATEALL;
MACRO_F_RDLCK F_ALLOCATECONTIG;
MACRO_F F_DUPFD;
MACRO_F F_GETFD;
MACRO_F F_GETFL;
MACRO_F F_GETLK;
MACRO_F F_GETOWN;
MACRO_F_ULOCK F_LOCK;
MACRO_F F_LOG2PHYS;
MACRO_F F_NOCACHE;
MACRO_F_OK F_OK;
MACRO_F_RDLCK F_PEOFPOSMODE;
MACRO_F F_PREALLOCATE;
MACRO_F F_RDADVISE;
MACRO_F F_RDAHEAD;
MACRO_F_RDLCK F_RDLCK;
MACRO_F F_READBOOTSTRAP;
MACRO_F F_SETFD;
MACRO_F F_SETFL;
MACRO_F F_SETLK;
MACRO_F F_SETLKW;
MACRO_F F_SETOWN;
MACRO_F F_SETSIZE;
MACRO_F_ULOCK F_TEST;
MACRO_F_ULOCK F_TLOCK;
MACRO_F_ULOCK F_ULOCK;
MACRO_F_RDLCK F_UNLCK;
MACRO_F_RDLCK F_VOLPOSMODE;
MACRO_F F_WRITEBOOTSTRAP;
MACRO_F_RDLCK F_WRLCK;
MACRO_GA GA;
accept_stat GARBAGE_ARGS;
MACRO_EXPIRE GARBAGE_TIME;
MACRO_GC GC_NOTKT;
MACRO_KDC_OK GC_OK;
MACRO_GC GC_TKFIL;
MACRO_GETALL GETALL;
MACRO_GETNCNT GETNCNT;
MACRO_GETNCNT GETPID;
MACRO_GETVAL GETVAL;
MACRO_GETZCNT GETZCNT;
MACRO_GID GID_BIN;
MACRO_GID GID_DIALER;
MACRO_GID GID_GAMES;
MACRO_GID GID_KMEM;
MACRO_LONG_MAX GID_MAX;
MACRO_GID GID_OPERATOR;
MACRO_GID GID_WHEEL;
MACRO_GLOBAL GLOBAL_SHARED_DATA_SEGMENT;
MACRO_GLOBAL GLOBAL_SHARED_SEGMENT_MASK;
MACRO_GLOBAL GLOBAL_SHARED_TEXT_SEGMENT;
MACRO_GLOB GLOB_ABEND;
MACRO_GLOB GLOB_ALTDIRFUNC;
MACRO_GLOB GLOB_APPEND;
MACRO_GLOB GLOB_BRACE;
MACRO_GLOB GLOB_DOOFFS;
MACRO_GLOB GLOB_ERR;
MACRO_GLOB GLOB_MAGCHAR;
MACRO_GLOB GLOB_MARK;
MACRO_GLOB GLOB_NOCHECK;
MACRO_GLOB GLOB_NOMAGIC;
MACRO_GLOB GLOB_NOSORT;
MACRO_GLOB GLOB_NOSPACE;
MACRO_GLOB GLOB_QUOTE;
MACRO_GLOB GLOB_TILDE;
MACRO_GMONTYPE GMONTYPE_ARCS_ORDERS;
MACRO_GMONTYPE GMONTYPE_DYLD_STATE;
MACRO_GMONTYPE GMONTYPE_RAWARCS;
MACRO_GMONTYPE GMONTYPE_SAMPLES;
MACRO_GMONVERSION GMONVERSION;
MACRO_GMON_MAGIC GMON_MAGIC;
MACRO_GMON GMON_PROF_BUSY;
MACRO_GMON GMON_PROF_ERROR;
MACRO_GMON GMON_PROF_OFF;
MACRO_GMON GMON_PROF_ON;
MACRO_GPROF GPROF_COUNT;
MACRO_GPROF GPROF_FROMS;
MACRO_GPROF GPROF_GMONPARAM;
MACRO_GPROF GPROF_STATE;
MACRO_GPROF GPROF_TOS;
MACRO_USRQUOTA GRPQUOTA;
MACRO_GSS GSS_C_ACCEPT;
MACRO_GSS GSS_C_AF_APPLETALK;
MACRO_GSS GSS_C_AF_BSC;
MACRO_GSS GSS_C_AF_CCITT;
MACRO_GSS GSS_C_AF_CHAOS;
MACRO_GSS GSS_C_AF_DATAKIT;
MACRO_GSS GSS_C_AF_DECnet;
MACRO_GSS GSS_C_AF_DLI;
MACRO_GSS GSS_C_AF_DSS;
MACRO_GSS GSS_C_AF_ECMA;
MACRO_GSS GSS_C_AF_HYLINK;
MACRO_GSS GSS_C_AF_IMPLINK;
MACRO_GSS GSS_C_AF_INET;
MACRO_GSS GSS_C_AF_LAT;
MACRO_GSS GSS_C_AF_LOCAL;
MACRO_GSS GSS_C_AF_NBS;
MACRO_GSS GSS_C_AF_NS;
MACRO_GSS GSS_C_AF_NULLADDR;
MACRO_GSS GSS_C_AF_OSI;
MACRO_GSS GSS_C_AF_PUP;
MACRO_GSS GSS_C_AF_SNA;
MACRO_GSS GSS_C_AF_UNSPEC;
MACRO_GSS GSS_C_AF_X25;
MACRO_GSS GSS_C_ANON_FLAG;
MACRO_GSS GSS_C_BOTH;
MACRO_GSS GSS_C_CALLING_ERROR_MASK;
MACRO_GSS GSS_C_CALLING_ERROR_OFFSET;
MACRO_GSS GSS_C_CONF_FLAG;
MACRO_GSS GSS_C_DELEG_FLAG;
MACRO_GSS GSS_C_GSS_CODE;
MACRO_GSS GSS_C_INDEFINITE;
MACRO_GSS GSS_C_INITIATE;
MACRO_GSS GSS_C_INTEG_FLAG;
MACRO_GSS GSS_C_MECH_CODE;
MACRO_GSS GSS_C_MUTUAL_FLAG;
MACRO_GSS GSS_C_NO_BUFFER;
MACRO_GSS GSS_C_NO_CHANNEL_BINDINGS;
MACRO_GSS GSS_C_NO_CONTEXT;
MACRO_GSS GSS_C_NO_CREDENTIAL;
MACRO_GSS GSS_C_NO_NAME;
MACRO_GSS GSS_C_NO_OID;
MACRO_GSS GSS_C_NO_OID_SET;
MACRO_GSS GSS_C_NULL_OID;
MACRO_GSS GSS_C_NULL_OID_SET;
MACRO_GSS GSS_C_PROT_READY_FLAG;
MACRO_GSS GSS_C_QOP_DEFAULT;
MACRO_GSS GSS_C_REPLAY_FLAG;
MACRO_GSS GSS_C_ROUTINE_ERROR_MASK;
MACRO_GSS GSS_C_ROUTINE_ERROR_OFFSET;
MACRO_GSS GSS_C_SEQUENCE_FLAG;
MACRO_GSS GSS_C_SUPPLEMENTARY_MASK;
MACRO_GSS GSS_C_SUPPLEMENTARY_OFFSET;
MACRO_GSS GSS_C_TRANS_FLAG;
MACRO_GSS GSS_RFC_COMPLIANT_OIDS;
MACRO_GSS GSS_SIZEOF_INT;
MACRO_GSS GSS_SIZEOF_LONG;
MACRO_GSS GSS_SIZEOF_SHORT;
MACRO_GSS GSS_S_BAD_BINDINGS;
MACRO_GSS GSS_S_BAD_MECH;
MACRO_GSS GSS_S_BAD_NAME;
MACRO_GSS GSS_S_BAD_NAMETYPE;
MACRO_GSS GSS_S_BAD_QOP;
MACRO_GSS GSS_S_BAD_SIG;
MACRO_GSS GSS_S_BAD_STATUS;
MACRO_GSS GSS_S_CALL_BAD_STRUCTURE;
MACRO_GSS GSS_S_CALL_INACCESSIBLE_READ;
MACRO_GSS GSS_S_CALL_INACCESSIBLE_WRITE;
MACRO_GSS GSS_S_COMPLETE;
MACRO_GSS GSS_S_CONTEXT_EXPIRED;
MACRO_GSS GSS_S_CONTINUE_NEEDED;
MACRO_GSS GSS_S_CREDENTIALS_EXPIRED;
MACRO_GSS GSS_S_CRED_UNAVAIL;
MACRO_GSS GSS_S_DEFECTIVE_CREDENTIAL;
MACRO_GSS GSS_S_DEFECTIVE_TOKEN;
MACRO_GSS GSS_S_DUPLICATE_ELEMENT;
MACRO_GSS GSS_S_DUPLICATE_TOKEN;
MACRO_GSS GSS_S_FAILURE;
MACRO_GSS GSS_S_GAP_TOKEN;
MACRO_GSS GSS_S_NAME_NOT_MN;
MACRO_GSS GSS_S_NO_CONTEXT;
MACRO_GSS GSS_S_NO_CRED;
MACRO_GSS GSS_S_OLD_TOKEN;
MACRO_GSS GSS_S_UNAUTHORIZED;
MACRO_GSS GSS_S_UNAVAILABLE;
MACRO_GSS GSS_S_UNSEQ_TOKEN;
MACRO_GT GT_PW_BADPW;
MACRO_GT GT_PW_KDCERR;
MACRO_GT_PW GT_PW_NULL;
MACRO_GT GT_PW_NULLTKT;
MACRO_KDC_OK GT_PW_OK;
MACRO_GT GT_PW_PROT;
MACRO_G G_BAD_DIRECTION;
MACRO_G G_BAD_HOSTNAME;
MACRO_G G_BAD_MSG_CTX;
MACRO_G G_BAD_SERVICE_NAME;
MACRO_G G_BAD_STRING_UID;
MACRO_G G_BAD_TOK_HEADER;
MACRO_G G_BAD_USAGE;
MACRO_G G_BUFFER_ALLOC;
MACRO_G G_NOUSER;
MACRO_G G_NO_HOSTNAME;
MACRO_G G_REFLECT;
MACRO_G G_TOK_TRUNC;
MACRO_G G_UNKNOWN_QOP;
MACRO_G G_VALIDATE_FAILED;
MACRO_G G_WRONG_MECH;
MACRO_G G_WRONG_SIZE;
MACRO_G G_WRONG_TOKID;
MACRO_HANDLER HANDLER_ID_SELF_TEST;
MACRO_HANDLER HANDLER_ID_SELF_TEST_FAIL;
MACRO_HANDLER HANDLER_ID_UPDATE_ALWAYS;
MACRO_HANDLER HANDLER_ID_UPDATE_IF_ACTIVATOR;
MACRO_HANDLER HANDLER_ID_UPDATE_NO_COLLISION;
MACRO_HASHFRACTION HASHFRACTION;
MACRO_HASHMAGIC HASHMAGIC;
MACRO_HASHSIZE HASHSIZE;
MACRO_HASHVERSION HASHVERSION;
MACRO_HAVE_DB HAVE_DB_H;
MACRO_HAVE_STRCASECMP HAVE_GETHOSTNAME;
MACRO_HAVE_STRCASECMP HAVE_GETTIMEOFDAY;
MACRO_HAVE_STRCASECMP HAVE_LIBFL;
MACRO_HAVE_STRCASECMP HAVE_MKDIR;
MACRO_HAVE_DB HAVE_NDBM_H;
MACRO_HAVE_STRCASECMP HAVE_PATHS_H;
MACRO_HAVE_STRCASECMP HAVE_SELECT;
MACRO_HAVE HAVE_STDARG_H;
MACRO_HAVE_STRCASECMP HAVE_STRCASECMP;
MACRO_HAVE_STRCASECMP HAVE_STRCSPN;
MACRO_HAVE_STRCASECMP HAVE_STRDUP;
MACRO_HAVE_STRCASECMP HAVE_STRERROR;
MACRO_HAVE_STRCASECMP HAVE_STRSPN;
MACRO_HAVE_STRCASECMP HAVE_STRSTR;
MACRO_HAVE_STRCASECMP HAVE_STRTOL;
MACRO_HAVE HAVE_SYS_TYPES_H;
MACRO_HAVE_TERMIOS HAVE_TCGETATTR;
MACRO_HAVE_TERMIOS HAVE_TERMIOS_H;
MACRO_HAVE_STRCASECMP HAVE_UNAME;
MACRO_HFIXEDSZ HFIXEDSZ;
MACRO_HFSFSMNT HFSFSMNT_NOXONFILES;
MACRO_HFSFSMNT HFSFSMNT_WRAPPER;
MACRO_HISTFRACTION HISTFRACTION;
MACRO_HOPCNT HOPCNT_INFINITY;
MACRO_HOST_BASIC HOST_BASIC_INFO;
MACRO_HOST_BASIC HOST_CPU_LOAD_INFO;
MACRO_TIME HOST_INFO_MAX;
MACRO_HOST_BASIC HOST_LOAD_INFO;
MACRO_HOST_BASIC HOST_MACH_MSG_TRAP;
MACRO_HOST HOST_NOT_FOUND;
MACRO_TASK_NULL HOST_NULL;
MACRO_HOST_BASIC HOST_PRIORITY_INFO;
MACRO_TASK_NULL HOST_PRIV_NULL;
MACRO_HOST_REBOOT HOST_REBOOT_DEBUGGER;
MACRO_HOST_REBOOT HOST_REBOOT_HALT;
MACRO_HOST_BASIC HOST_RESOURCE_SIZES;
MACRO_HOST_BASIC HOST_SCHED_INFO;
MACRO_TASK_NULL HOST_SECURITY_NULL;
MACRO_HOST_BASIC HOST_SEMAPHORE_TRAPS;
MACRO_HOST_BASIC HOST_VM_INFO;
MACRO_HOURSPERDAY HOURSPERDAY;
MACRO_HTTPPOST HTTPPOST_FILENAME;
MACRO_HTTPPOST HTTPPOST_READFILE;
MACRO_CS8 HUPCL;
MACRO_HW HW_BUS_FREQ;
MACRO_HW HW_BYTEORDER;
MACRO_HW HW_CACHELINE;
MACRO_HW HW_CPU_FREQ;
MACRO_HW HW_DISKNAMES;
MACRO_HW HW_DISKSTATS;
MACRO_HW HW_EPOCH;
MACRO_HW HW_FLOATINGPT;
MACRO_HW HW_L1DCACHESIZE;
MACRO_HW HW_L1ICACHESIZE;
MACRO_HW HW_L2CACHESIZE;
MACRO_HW HW_L2SETTINGS;
MACRO_HW HW_L3CACHESIZE;
MACRO_HW HW_L3SETTINGS;
MACRO_HW HW_MACHINE;
MACRO_HW HW_MACHINE_ARCH;
MACRO_HW HW_MAXID;
MACRO_HW HW_MODEL;
MACRO_HW HW_NCPU;
MACRO_HW HW_PAGESIZE;
MACRO_HW HW_PHYSMEM;
MACRO_HW HW_USERMEM;
MACRO_HW HW_VECTORUNIT;
MACRO_H H_ADD;
MACRO_H H_APPEND;
MACRO_H H_CLEAR;
MACRO_H H_CURR;
MACRO_H H_END;
MACRO_H H_ENTER;
MACRO_H H_FIRST;
MACRO_H H_FUNC;
MACRO_H H_GETSIZE;
MACRO_H H_LAST;
MACRO_H H_LOAD;
MACRO_H H_NEXT;
MACRO_H H_NEXT_EVENT;
MACRO_H H_NEXT_STR;
MACRO_H H_PREV;
MACRO_H H_PREV_EVENT;
MACRO_H H_PREV_STR;
MACRO_H H_SAVE;
MACRO_H H_SET;
MACRO_H H_SETSIZE;
MACRO_IAC IAC;
MACRO_TTOPRI IBUFSIZ;
MACRO_ECHOKE ICANON;
MACRO_ICMP6_DST ICMP6_DST_UNREACH;
MACRO_ICMP6_HADISCOV ICMP6_DST_UNREACH_ADDR;
MACRO_ICMP6_HADISCOV ICMP6_DST_UNREACH_ADMIN;
MACRO_ICMP6_HADISCOV ICMP6_DST_UNREACH_BEYONDSCOPE;
MACRO_ICMP6_HADISCOV ICMP6_DST_UNREACH_NOPORT;
MACRO_ICMP6_HADISCOV ICMP6_DST_UNREACH_NOROUTE;
MACRO_ICMP6_HADISCOV ICMP6_DST_UNREACH_NOTNEIGHBOR;
MACRO_ICMP6_DST ICMP6_ECHO_REPLY;
MACRO_ICMP6_DST ICMP6_ECHO_REQUEST;
MACRO_ICMP6 ICMP6_FILTER;
MACRO_ICMP6_ROUTER ICMP6_FQDN_QUERY;
MACRO_ICMP6_ROUTER ICMP6_FQDN_REPLY;
MACRO_ICMP6_HADISCOV ICMP6_HADISCOV_REPLY;
MACRO_ICMP6_HADISCOV ICMP6_HADISCOV_REQUEST;
MACRO_ICMP6_HADISCOV ICMP6_INFOMSG_MASK;
MACRO_ICMP6_HADISCOV ICMP6_MAXTYPE;
MACRO_ICMP6_DST ICMP6_MEMBERSHIP_QUERY;
MACRO_ICMP6_MEMBERSHIP_REDUCTION ICMP6_MEMBERSHIP_REDUCTION;
MACRO_ICMP6_MEMBERSHIP ICMP6_MEMBERSHIP_REPORT;
MACRO_ICMP6_ROUTER ICMP6_NI_QUERY;
MACRO_ICMP6_HADISCOV ICMP6_NI_REFUSED;
MACRO_ICMP6_ROUTER ICMP6_NI_REPLY;
MACRO_ICMP6_HADISCOV ICMP6_NI_SUBJ_FQDN;
MACRO_ICMP6_HADISCOV ICMP6_NI_SUBJ_IPV4;
MACRO_ICMP6_HADISCOV ICMP6_NI_SUBJ_IPV6;
MACRO_ICMP6_HADISCOV ICMP6_NI_SUCCESS;
MACRO_ICMP6_HADISCOV ICMP6_NI_UNKNOWN;
MACRO_ICMP6_DST ICMP6_PACKET_TOO_BIG;
MACRO_ICMP6_HADISCOV ICMP6_PARAMPROB_HEADER;
MACRO_ICMP6_HADISCOV ICMP6_PARAMPROB_NEXTHEADER;
MACRO_ICMP6_HADISCOV ICMP6_PARAMPROB_OPTION;
MACRO_ICMP6_DST ICMP6_PARAM_PROB;
MACRO_ICMP6_ROUTER ICMP6_ROUTER_RENUMBERING;
MACRO_ICMP6_HADISCOV ICMP6_ROUTER_RENUMBERING_COMMAND;
MACRO_ICMP6_HADISCOV ICMP6_ROUTER_RENUMBERING_RESULT;
MACRO_ICMP6_HADISCOV ICMP6_ROUTER_RENUMBERING_SEQNUM_RESET;
MACRO_ICMP6_RR ICMP6_RR_FLAGS_FORCEAPPLY;
MACRO_ICMP6_RR ICMP6_RR_FLAGS_PREVDONE;
MACRO_ICMP6_RR ICMP6_RR_FLAGS_REQRESULT;
MACRO_ICMP6_RR ICMP6_RR_FLAGS_SPECSITE;
MACRO_ICMP6_RR ICMP6_RR_FLAGS_TEST;
MACRO_ICMP6_RR_PCOUSE ICMP6_RR_PCOUSE_FLAGS_DECRPLTIME;
MACRO_ICMP6_RR_PCOUSE ICMP6_RR_PCOUSE_FLAGS_DECRVLTIME;
MACRO_ICMP6_RR_PCOUSE ICMP6_RR_PCOUSE_RAFLAGS_AUTO;
MACRO_ICMP6_RR_PCOUSE ICMP6_RR_PCOUSE_RAFLAGS_ONLINK;
MACRO_ICMP6_RR_PCOUSE ICMP6_RR_RESULT_FLAGS_FORBIDDEN;
MACRO_ICMP6_RR_PCOUSE ICMP6_RR_RESULT_FLAGS_OOB;
MACRO_ICMP6_DST ICMP6_TIME_EXCEEDED;
MACRO_ICMP6_HADISCOV ICMP6_TIME_EXCEED_REASSEMBLY;
MACRO_ICMP6_HADISCOV ICMP6_TIME_EXCEED_TRANSIT;
MACRO_ICMP6_ROUTER ICMP6_WRUREPLY;
MACRO_ICMP6_ROUTER ICMP6_WRUREQUEST;
MACRO_ICMPV6CTL ICMPV6CTL_ERRPPSLIMIT;
MACRO_ICMPV6CTL ICMPV6CTL_MAXID;
MACRO_ICMPV6CTL ICMPV6CTL_MTUDISC_HIWAT;
MACRO_ICMPV6CTL ICMPV6CTL_MTUDISC_LOWAT;
MACRO_ICMPV6CTL ICMPV6CTL_ND6_DEBUG;
MACRO_ICMPV6CTL ICMPV6CTL_ND6_DELAY;
MACRO_ICMPV6CTL ICMPV6CTL_ND6_DRLIST;
MACRO_ICMPV6CTL ICMPV6CTL_ND6_MAXNUDHINT;
MACRO_ICMPV6CTL ICMPV6CTL_ND6_MMAXTRIES;
MACRO_ICMPV6CTL ICMPV6CTL_ND6_PRLIST;
MACRO_ICMPV6CTL ICMPV6CTL_ND6_PRUNE;
MACRO_ICMPV6CTL ICMPV6CTL_ND6_UMAXTRIES;
MACRO_ICMPV6CTL ICMPV6CTL_ND6_USELOOPBACK;
MACRO_ICMPV6CTL ICMPV6CTL_NODEINFO;
MACRO_ICMPV6CTL ICMPV6CTL_REDIRACCEPT;
MACRO_ICMPV6CTL ICMPV6CTL_REDIRTIMEOUT;
MACRO_ICMPV6CTL ICMPV6CTL_STATS;
MACRO_ICMPV6 ICMPV6_PLD_MAXLEN;
MACRO_ICMP ICMP_ECHO;
MACRO_ICMP ICMP_ECHOREPLY;
MACRO_ICMP ICMP_IREQ;
MACRO_ICMP ICMP_IREQREPLY;
MACRO_ICMP ICMP_MASKLEN;
MACRO_ICMP ICMP_MASKREPLY;
MACRO_ICMP ICMP_MASKREQ;
MACRO_ICMP ICMP_MAXTYPE;
MACRO_ICMP ICMP_MINLEN;
MACRO_ICMP ICMP_PARAMPROB;
MACRO_ICMP ICMP_PARAMPROB_ERRATPTR;
MACRO_ICMP ICMP_PARAMPROB_LENGTH;
MACRO_ICMP ICMP_PARAMPROB_OPTABSENT;
MACRO_ICMP ICMP_REDIRECT;
MACRO_ICMP ICMP_REDIRECT_HOST;
MACRO_ICMP ICMP_REDIRECT_NET;
MACRO_ICMP ICMP_REDIRECT_TOSHOST;
MACRO_ICMP ICMP_REDIRECT_TOSNET;
MACRO_ICMP ICMP_ROUTERADVERT;
MACRO_ICMP ICMP_ROUTERSOLICIT;
MACRO_ICMP ICMP_SOURCEQUENCH;
MACRO_ICMP ICMP_TIMXCEED;
MACRO_ICMP ICMP_TIMXCEED_INTRANS;
MACRO_ICMP ICMP_TIMXCEED_REASS;
MACRO_ICMP ICMP_TSTAMP;
MACRO_ICMP ICMP_TSTAMPREPLY;
MACRO_ICMP ICMP_UNREACH;
MACRO_ICMP ICMP_UNREACH_FILTER_PROHIB;
MACRO_ICMP ICMP_UNREACH_HOST;
MACRO_ICMP ICMP_UNREACH_HOST_PRECEDENCE;
MACRO_ICMP ICMP_UNREACH_HOST_PROHIB;
MACRO_ICMP ICMP_UNREACH_HOST_UNKNOWN;
MACRO_ICMP ICMP_UNREACH_ISOLATED;
MACRO_ICMP ICMP_UNREACH_NEEDFRAG;
MACRO_ICMP ICMP_UNREACH_NET;
MACRO_ICMP ICMP_UNREACH_NET_PROHIB;
MACRO_ICMP ICMP_UNREACH_NET_UNKNOWN;
MACRO_ICMP ICMP_UNREACH_PORT;
MACRO_ICMP ICMP_UNREACH_PRECEDENCE_CUTOFF;
MACRO_ICMP ICMP_UNREACH_PROTOCOL;
MACRO_ICMP ICMP_UNREACH_SRCFAIL;
MACRO_ICMP ICMP_UNREACH_TOSHOST;
MACRO_ICMP ICMP_UNREACH_TOSNET;
MACRO_IGNBRK ICRNL;
MACRO_ECHOKE IEXTEN;
MACRO_IFA IFA_ROUTE;
MACRO_IFDATA IFDATA_GENERAL;
MACRO_IFDATA IFDATA_LINKSPECIFIC;
MACRO_IFF IFF_ALLMULTI;
MACRO_IFF IFF_ALTPHYS;
MACRO_IFF IFF_BROADCAST;
MACRO_IFF IFF_CANTCHANGE;
MACRO_IFF IFF_DEBUG;
MACRO_IFF IFF_LINK0;
MACRO_IFF IFF_LINK1;
MACRO_IFF IFF_LINK2;
MACRO_IFF IFF_LOOPBACK;
MACRO_IFF IFF_MULTICAST;
MACRO_IFF IFF_NOARP;
MACRO_IFF IFF_NOTRAILERS;
MACRO_IFF IFF_OACTIVE;
MACRO_IFF IFF_POINTOPOINT;
MACRO_IFF IFF_PROMISC;
MACRO_IFF IFF_RUNNING;
MACRO_IFF IFF_SIMPLEX;
MACRO_IFF IFF_UP;
MACRO_IFID IFID_HOME;
MACRO_IFI IFI_RECV;
MACRO_IFI IFI_XMIT;
MACRO_IFLR IFLR_PREFIX;
MACRO_IFMIB_IFCOUNT IFMIB_IFCOUNT;
MACRO_IFMIB IFMIB_IFDATA;
MACRO_IFMIB IFMIB_SYSTEM;
MACRO_IFM IFM_1000_CX;
MACRO_IFM IFM_1000_LX;
MACRO_IFM IFM_1000_SX;
MACRO_IFM IFM_1000_TX;
MACRO_IFM IFM_100_FX;
MACRO_IFM IFM_100_T2;
MACRO_IFM IFM_100_T4;
MACRO_IFM IFM_100_TX;
MACRO_IFM IFM_100_VG;
MACRO_IFM IFM_10_2;
MACRO_IFM IFM_10_5;
MACRO_IFM IFM_10_FL;
MACRO_IFM IFM_10_STP;
MACRO_IFM IFM_10_T;
MACRO_IFM IFM_ACTIVE;
MACRO_IFM IFM_AUTO;
MACRO_IFM IFM_AVALID;
MACRO_IFM IFM_ETHER;
MACRO_IFM IFM_FDDI;
MACRO_IFM IFM_FDDI_DA;
MACRO_IFM IFM_FDDI_MMF;
MACRO_IFM IFM_FDDI_SMF;
MACRO_IFM IFM_FDDI_UTP;
MACRO_IFM IFM_FDX;
MACRO_IFM IFM_FLAG0;
MACRO_IFM IFM_FLAG1;
MACRO_IFM IFM_FLAG2;
MACRO_IFM IFM_FLOW;
MACRO_IFM IFM_GMASK;
MACRO_IFM IFM_HDX;
MACRO_IFM IFM_HPNA_1;
MACRO_IFM IFM_IEEE80211;
MACRO_IFM IFM_IEEE80211_ADHOC;
MACRO_IFM IFM_IEEE80211_DS1;
MACRO_IFM IFM_IEEE80211_DS11;
MACRO_IFM IFM_IEEE80211_DS2;
MACRO_IFM IFM_IEEE80211_DS22;
MACRO_IFM IFM_IEEE80211_DS5;
MACRO_IFM IFM_IEEE80211_FH1;
MACRO_IFM IFM_IEEE80211_FH2;
MACRO_IFM IFM_IMASK;
MACRO_IFM IFM_INST_MAX;
MACRO_IFM IFM_ISHIFT;
MACRO_IFM IFM_LOOP;
MACRO_IFM IFM_MANUAL;
MACRO_IFM IFM_NMASK;
MACRO_IFM IFM_NONE;
MACRO_IFM IFM_OMASK;
MACRO_IFM IFM_TMASK;
MACRO_IFM IFM_TOKEN;
MACRO_IFM IFM_TOK_ALLR;
MACRO_IFM IFM_TOK_AUTO;
MACRO_IFM IFM_TOK_CLASSIC;
MACRO_IFM IFM_TOK_DTR;
MACRO_IFM IFM_TOK_ETR;
MACRO_IFM IFM_TOK_SRCRT;
MACRO_IFM IFM_TOK_STP100;
MACRO_IFM IFM_TOK_STP16;
MACRO_IFM IFM_TOK_STP4;
MACRO_IFM IFM_TOK_UTP100;
MACRO_IFM IFM_TOK_UTP16;
MACRO_IFM IFM_TOK_UTP4;
MACRO_IFNAMSIZ IFNAMSIZ;
MACRO_IFNET IFNET_SLOWHZ;
MACRO_IFQ IFQ_MAXLEN;
MACRO_IFSTATMAX IFSTATMAX;
MACRO_IFT IFT_1822;
MACRO_IFT IFT_AAL5;
MACRO_IFT IFT_ARCNET;
MACRO_IFT IFT_ARCNETPLUS;
MACRO_IFT IFT_ATM;
MACRO_IFT IFT_CEPT;
MACRO_IFT IFT_DS3;
MACRO_IFT IFT_EON;
MACRO_IFT IFT_ETHER;
MACRO_IFT IFT_FAITH;
MACRO_IFT IFT_FDDI;
MACRO_IFT IFT_FRELAY;
MACRO_IFT IFT_FRELAYDCE;
MACRO_IFT IFT_GIF;
MACRO_IFT IFT_HDH1822;
MACRO_IFT IFT_HIPPI;
MACRO_IFT IFT_HSSI;
MACRO_IFT IFT_HY;
MACRO_IFT IFT_IEEE1394;
MACRO_IFT IFT_ISDNBASIC;
MACRO_IFT IFT_ISDNPRIMARY;
MACRO_IFT IFT_ISO88022LLC;
MACRO_IFT IFT_ISO88023;
MACRO_IFT IFT_ISO88024;
MACRO_IFT IFT_ISO88025;
MACRO_IFT IFT_ISO88026;
MACRO_IFT IFT_L2VLAN;
MACRO_IFT IFT_LAPB;
MACRO_IFT IFT_LOCALTALK;
MACRO_IFT IFT_LOOP;
MACRO_IFT IFT_MIOX25;
MACRO_IFT IFT_MODEM;
MACRO_IFT IFT_NSIP;
MACRO_IFT IFT_OTHER;
MACRO_IFT IFT_P10;
MACRO_IFT IFT_P80;
MACRO_IFT IFT_PARA;
MACRO_IFT IFT_PPP;
MACRO_IFT IFT_PROPMUX;
MACRO_IFT IFT_PROPVIRTUAL;
MACRO_IFT IFT_PTPSERIAL;
MACRO_IFT IFT_RS232;
MACRO_IFT IFT_SDLC;
MACRO_IFT IFT_SIP;
MACRO_IFT IFT_SLIP;
MACRO_IFT IFT_SMDSDXI;
MACRO_IFT IFT_SMDSICIP;
MACRO_IFT IFT_SONET;
MACRO_IFT IFT_SONETPATH;
MACRO_IFT IFT_SONETVT;
MACRO_IFT IFT_STARLAN;
MACRO_IFT IFT_STF;
MACRO_IFT IFT_T1;
MACRO_IFT IFT_ULTRA;
MACRO_IFT IFT_V35;
MACRO_IFT IFT_X25;
MACRO_IFT IFT_X25DDN;
MACRO_IFT IFT_X25PLE;
MACRO_IFT IFT_XETHER;
MACRO_IF_FW IF_FW_F_VIAHACK;
MACRO_IF IF_MAXMTU;
MACRO_IF IF_MINMTU;
MACRO_IF_NAMESIZE IF_NAMESIZE;
MACRO_IF_NAME IF_NAME_SIZE;
MACRO_IF_SETSIZE IF_SETSIZE;
MACRO_IGMPMSG IGMPMSG_NOCACHE;
MACRO_IGMPMSG IGMPMSG_WRONGVIF;
MACRO_IGMP IGMP_DVMRP;
MACRO_IGMP IGMP_HOST_LEAVE_MESSAGE;
MACRO_IGMP IGMP_HOST_MEMBERSHIP_QUERY;
MACRO_IGMP IGMP_HOST_MEMBERSHIP_REPORT;
MACRO_IGMP IGMP_HOST_NEW_MEMBERSHIP_REPORT;
MACRO_IGMP IGMP_MAX_HOST_REPORT_DELAY;
MACRO_IGMP IGMP_MEMBERSHIP_QUERY;
MACRO_IGMP IGMP_MINLEN;
MACRO_IGMP IGMP_MTRACE;
MACRO_IGMP IGMP_MTRACE_RESP;
MACRO_IGMP IGMP_PIM;
MACRO_IGMP IGMP_TIMER_SCALE;
MACRO_IGMP IGMP_V1_MEMBERSHIP_REPORT;
MACRO_IGMP IGMP_V2_LEAVE_GROUP;
MACRO_IGMP IGMP_V2_MEMBERSHIP_REPORT;
MACRO_IGNBRK IGNBRK;
MACRO_IGNBRK IGNCR;
MACRO_IGNBRK IGNPAR;
MACRO_ILL ILL_ILLOPC;
MACRO_ILL ILL_ILLTRP;
MACRO_ILL ILL_NOOP;
MACRO_ILL ILL_PRVOPC;
MACRO_IGNBRK IMAXBEL;
MACRO_IN6P_HIGHPORT IN6P_ANONPORT;
MACRO_IN6P IN6P_AUTOFLOWLABEL;
MACRO_IN6P IN6P_BINDV6ONLY;
MACRO_IN6P_HIGHPORT IN6P_CONTROLOPTS;
MACRO_IN6P IN6P_DSTOPTS;
MACRO_IN6P_HIGHPORT IN6P_FAITH;
MACRO_IN6P_HIGHPORT IN6P_HIGHPORT;
MACRO_IN6P IN6P_HOPLIMIT;
MACRO_IN6P IN6P_HOPOPTS;
MACRO_IN6P IN6P_IPV6_V6ONLY;
MACRO_IN6P_HIGHPORT IN6P_LOWPORT;
MACRO_IN6P_HIGHPORT IN6P_MTUDISC;
MACRO_IN6P IN6P_PKTINFO;
MACRO_IN6P_HIGHPORT IN6P_RECVIF;
MACRO_IN6P IN6P_RTHDR;
MACRO_IN6P IN6P_RTHDRDSTOPTS;
MACRO_INT16SZ INADDRSZ;
MACRO_INADDR INADDR_ALLHOSTS_GROUP;
MACRO_INADDR INADDR_ALLRTRS_GROUP;
MACRO_INADDR INADDR_ANY;
MACRO_INADDR INADDR_BROADCAST;
MACRO_INADDR INADDR_LOOPBACK;
MACRO_INADDR INADDR_MAX_LOCAL_GROUP;
MACRO_INADDR INADDR_NONE;
MACRO_INADDR INADDR_UNSPEC_GROUP;
MACRO_INDIR INDIR_MASK;
MACRO_INET6 INET6_ADDRSTRLEN;
MACRO_INET INET_ADDRSTRLEN;
MACRO_INFINITY INFINITY;
MACRO_IGNBRK INLCR;
MACRO_INPCB INPCB_ALL_OWNERS;
MACRO_INPCB INPCB_MAX_IDS;
MACRO_INPCB INPCB_NO_OWNER;
MACRO_INPCB INPCB_OWNED_BY_X;
MACRO_IGNBRK INPCK;
MACRO_INPLOOKUP INPLOOKUP_WILDCARD;
MACRO_INP INP_ANONPORT;
MACRO_INP_CONTROLOPTS INP_CONTROLOPTS;
MACRO_INP INP_FAITH;
MACRO_INP INP_HDRINCL;
MACRO_INP INP_HIGHPORT;
MACRO_INP INP_IPV4;
MACRO_INP INP_IPV6;
MACRO_INP INP_LOWPORT;
MACRO_INP INP_MTUDISC;
MACRO_INP INP_RECVDSTADDR;
MACRO_INP INP_RECVIF;
MACRO_INP INP_RECVOPTS;
MACRO_INP INP_RECVRETOPTS;
MACRO_INP INP_STRIPHDR;
MACRO_INP_CONTROLOPTS INP_UNMAPPABLEOPTS;
MACRO_SZ INST_SZ;
MACRO_INT16SZ INT16SZ;
MACRO_INT8 INT16_MAX;
MACRO_MIN INT16_MIN;
MACRO_INT32SZ INT32SZ;
MACRO_INT8 INT32_MAX;
MACRO_MIN INT32_MIN;
MACRO_INT8 INT64_MAX;
MACRO_MIN INT64_MIN;
MACRO_INT8 INT8_MAX;
MACRO_MIN INT8_MIN;
MACRO_INTK_W INTK_BADPW;
MACRO_INTK_W INTK_ERR;
MACRO_KDC_OK INTK_OK;
MACRO_INTK_W INTK_PROT;
MACRO_INTK INTK_PW_NULL;
MACRO_INTK_W INTK_W_NOTALL;
MACRO_INTMAX INTMAX_MAX;
MACRO_INTMAX INTMAX_MIN;
MACRO_INTPTR INTPTR_MAX;
MACRO_INTPTR INTPTR_MIN;
MACRO_KERNEL INTSTACK_SIZE;
MACRO_INT_FAST8 INT_FAST16_MAX;
MACRO_INT_FAST8 INT_FAST16_MIN;
MACRO_INT_FAST8 INT_FAST32_MAX;
MACRO_INT_FAST8 INT_FAST32_MIN;
MACRO_INT_FAST8 INT_FAST64_MAX;
MACRO_INT_FAST8 INT_FAST64_MIN;
MACRO_INT_FAST8 INT_FAST8_MAX;
MACRO_INT_FAST8 INT_FAST8_MIN;
MACRO_INT_LEAST8 INT_LEAST16_MAX;
MACRO_INT_LEAST8 INT_LEAST16_MIN;
MACRO_INT_LEAST8 INT_LEAST32_MAX;
MACRO_INT_LEAST8 INT_LEAST32_MIN;
MACRO_INT_LEAST8 INT_LEAST64_MAX;
MACRO_INT_LEAST8 INT_LEAST64_MIN;
MACRO_INT_LEAST8 INT_LEAST8_MAX;
MACRO_INT_LEAST8 INT_LEAST8_MIN;
MACRO_INT INT_MAX;
MACRO_INT INT_MIN;
MACRO_IN IN_CLASSA_HOST;
MACRO_IN IN_CLASSA_MAX;
MACRO_IN IN_CLASSA_NET;
MACRO_IN IN_CLASSA_NSHIFT;
MACRO_IN IN_CLASSB_HOST;
MACRO_IN IN_CLASSB_MAX;
MACRO_IN IN_CLASSB_NET;
MACRO_IN IN_CLASSB_NSHIFT;
MACRO_IN IN_CLASSC_HOST;
MACRO_IN IN_CLASSC_NET;
MACRO_IN IN_CLASSC_NSHIFT;
MACRO_IN IN_CLASSD_HOST;
MACRO_IN IN_CLASSD_NET;
MACRO_IN IN_CLASSD_NSHIFT;
MACRO_IN_LINKLOCALNETNUM IN_LINKLOCALNETNUM;
MACRO_IN_LINKLOCALNETNUM IN_LOOPBACKNET;
MACRO_IOCPARM IOCPARM_MASK;
MACRO_IOCPARM IOCPARM_MAX;
MACRO_IOC IOC_DIRMASK;
MACRO_IOC IOC_IN;
MACRO_IOC IOC_INOUT;
MACRO_IOC IOC_OUT;
MACRO_IOC IOC_VOID;
MACRO_IO_UNIT IO_APPEND;
MACRO_IO_UNIT IO_HEADZEROFILL;
MACRO_IO IO_METASYNC;
MACRO_IO_UNIT IO_NDELAY;
MACRO_IO_UNIT IO_NODELOCKED;
MACRO_IO_UNIT IO_NOZERODIRTY;
MACRO_IO_UNIT IO_NOZEROFILL;
MACRO_IO_UNIT IO_NOZEROVALID;
MACRO_IO_UNIT IO_SYNC;
MACRO_IO_UNIT IO_TAILZEROFILL;
MACRO_IO_UNIT IO_UNIT;
MACRO_IP_0 IP;
MACRO_IP6F IP6F_MORE_FRAG;
MACRO_IP6F IP6F_OFF_MASK;
MACRO_IP6F IP6F_RESERVED_MASK;
MACRO_IP6OPT IP6OPT_BINDING_ACK;
MACRO_IP6OPT IP6OPT_BINDING_REQ;
MACRO_IP6OPT IP6OPT_BINDING_UPDATE;
MACRO_IP6OPT IP6OPT_EID;
MACRO_IP6OPT IP6OPT_HOME_ADDRESS;
MACRO_IP6OPT IP6OPT_JUMBO;
MACRO_IP6OPT IP6OPT_JUMBO_LEN;
MACRO_IP6OPT IP6OPT_MINLEN;
MACRO_IP6OPT IP6OPT_MUTABLE;
MACRO_IP6OPT IP6OPT_NSAP_ADDR;
MACRO_IP6OPT IP6OPT_PAD1;
MACRO_IP6OPT IP6OPT_PADN;
MACRO_IP6OPT IP6OPT_RTALERT;
MACRO_IP6OPT IP6OPT_RTALERT_ACTNET;
MACRO_IP6OPT IP6OPT_RTALERT_LEN;
MACRO_IP6OPT IP6OPT_RTALERT_MLD;
MACRO_IP6OPT IP6OPT_RTALERT_RSVP;
MACRO_IP6OPT IP6OPT_TUNNEL_LIMIT;
MACRO_IP6OPT IP6OPT_TYPE_DISCARD;
MACRO_IP6OPT IP6OPT_TYPE_FORCEICMP;
MACRO_IP6OPT IP6OPT_TYPE_ICMP;
MACRO_IP6OPT IP6OPT_TYPE_SKIP;
MACRO_IP6TOS IP6TOS_CE;
MACRO_IP6TOS IP6TOS_ECT;
MACRO_IPCOMP IPCOMP_CPI_NEGOTIATE_MIN;
MACRO_IPCOMP IPCOMP_DEFLATE;
MACRO_IPCOMP IPCOMP_LZS;
MACRO_IPCOMP IPCOMP_MAX;
MACRO_IPCOMP IPCOMP_OUI;
MACRO_IPCTL IPCTL_ACCEPTSOURCEROUTE;
MACRO_IPCTL IPCTL_DEFTTL;
MACRO_IPCTL IPCTL_DIRECTEDBROADCAST;
MACRO_IPCTL IPCTL_FASTFORWARDING;
MACRO_IPCTL IPCTL_FORWARDING;
MACRO_IPCTL IPCTL_GIF_TTL;
MACRO_IPCTL IPCTL_INTRQDROPS;
MACRO_IPCTL IPCTL_INTRQMAXLEN;
MACRO_IPCTL IPCTL_KEEPFAITH;
MACRO_IPCTL IPCTL_MAXID;
MACRO_IPCTL IPCTL_RTEXPIRE;
MACRO_IPCTL IPCTL_RTMAXCACHE;
MACRO_IPCTL IPCTL_RTMINEXPIRE;
MACRO_IPCTL IPCTL_SENDREDIRECTS;
MACRO_IPCTL IPCTL_SOURCEROUTE;
MACRO_IPCTL IPCTL_STATS;
MACRO_IPC IPC_CREAT;
MACRO_IPC IPC_EXCL;
MACRO_IPC IPC_M;
MACRO_IPC IPC_NOWAIT;
MACRO_IPC IPC_PRIVATE;
MACRO_IPC IPC_R;
MACRO_IPC IPC_RMID;
MACRO_IPC IPC_SET;
MACRO_TASK_NULL IPC_SPACE_NULL;
MACRO_IPC IPC_STAT;
MACRO_IPC IPC_W;
MACRO_IPDEFTTL IPDEFTTL;
MACRO_IPFRAGTTL IPFRAGTTL;
MACRO_IPOPT IPOPT_CONTROL;
MACRO_IPOPT IPOPT_DEBMEAS;
MACRO_IPOPT IPOPT_EOL;
MACRO_IPOPT IPOPT_LSRR;
MACRO_IPOPT IPOPT_MINOFF;
MACRO_IPOPT IPOPT_NOP;
MACRO_IPOPT IPOPT_OFFSET;
MACRO_IPOPT IPOPT_OLEN;
MACRO_IPOPT IPOPT_OPTVAL;
MACRO_IPOPT IPOPT_RA;
MACRO_IPOPT IPOPT_RESERVED1;
MACRO_IPOPT IPOPT_RESERVED2;
MACRO_IPOPT IPOPT_RR;
MACRO_IPOPT IPOPT_SATID;
MACRO_IPOPT IPOPT_SECURITY;
MACRO_IPOPT IPOPT_SECUR_CONFID;
MACRO_IPOPT IPOPT_SECUR_EFTO;
MACRO_IPOPT IPOPT_SECUR_MMMM;
MACRO_IPOPT IPOPT_SECUR_RESTR;
MACRO_IPOPT IPOPT_SECUR_SECRET;
MACRO_IPOPT IPOPT_SECUR_TOPSECRET;
MACRO_IPOPT IPOPT_SECUR_UNCLASS;
MACRO_IPOPT IPOPT_SSRR;
MACRO_IPOPT IPOPT_TS;
MACRO_IPOPT IPOPT_TS_PRESPEC;
MACRO_IPOPT IPOPT_TS_TSANDADDR;
MACRO_IPOPT IPOPT_TS_TSONLY;
MACRO_IPPORT IPPORT_HIFIRSTAUTO;
MACRO_IPPORT IPPORT_HILASTAUTO;
MACRO_IPPORT IPPORT_RESERVED;
MACRO_IPPORT IPPORT_RESERVEDSTART;
MACRO_IPPORT IPPORT_USERRESERVED;
MACRO_IPPROTO IPPROTO_3PC;
MACRO_IPPROTO IPPROTO_ADFS;
MACRO_IPPROTO IPPROTO_AH;
MACRO_IPPROTO IPPROTO_AHIP;
MACRO_IPPROTO IPPROTO_APES;
MACRO_IPPROTO IPPROTO_ARGUS;
MACRO_IPPROTO IPPROTO_AX25;
MACRO_IPPROTO IPPROTO_BHA;
MACRO_IPPROTO IPPROTO_BLT;
MACRO_IPPROTO IPPROTO_BRSATMON;
MACRO_IPPROTO IPPROTO_CFTP;
MACRO_IPPROTO IPPROTO_CHAOS;
MACRO_IPPROTO IPPROTO_CMTP;
MACRO_IPPROTO IPPROTO_CPHB;
MACRO_IPPROTO IPPROTO_CPNX;
MACRO_IPPROTO IPPROTO_DDP;
MACRO_IPPROTO IPPROTO_DGP;
MACRO_IPPROTO IPPROTO_DIVERT;
MACRO_IPPROTO IPPROTO_DONE;
MACRO_IPPROTO IPPROTO_DSTOPTS;
MACRO_IPPROTO IPPROTO_EGP;
MACRO_IPPROTO IPPROTO_EMCON;
MACRO_IPPROTO IPPROTO_ENCAP;
MACRO_IPPROTO IPPROTO_EON;
MACRO_IPPROTO IPPROTO_ESP;
MACRO_IPPROTO IPPROTO_ETHERIP;
MACRO_IPPROTO IPPROTO_FRAGMENT;
MACRO_IPPROTO IPPROTO_GGP;
MACRO_IPPROTO IPPROTO_GMTP;
MACRO_IPPROTO IPPROTO_GRE;
MACRO_IPPROTO IPPROTO_HELLO;
MACRO_IPPROTO IPPROTO_HMP;
MACRO_IPPROTO IPPROTO_HOPOPTS;
MACRO_IPPROTO IPPROTO_ICMP;
MACRO_IPPROTO IPPROTO_ICMPV6;
MACRO_IPPROTO IPPROTO_IDP;
MACRO_IPPROTO IPPROTO_IDPR;
MACRO_IPPROTO IPPROTO_IDRP;
MACRO_IPPROTO IPPROTO_IGMP;
MACRO_IPPROTO IPPROTO_IGP;
MACRO_IPPROTO IPPROTO_IGRP;
MACRO_IPPROTO IPPROTO_IL;
MACRO_IPPROTO IPPROTO_INLSP;
MACRO_IPPROTO IPPROTO_INP;
MACRO_IPPROTO IPPROTO_IP;
MACRO_IPPROTO IPPROTO_IPCOMP;
MACRO_IPPROTO IPPROTO_IPCV;
MACRO_IPPROTO IPPROTO_IPEIP;
MACRO_IPPROTO IPPROTO_IPIP;
MACRO_IPPROTO IPPROTO_IPPC;
MACRO_IPPROTO IPPROTO_IPV4;
MACRO_IPPROTO IPPROTO_IPV6;
MACRO_IPPROTO IPPROTO_IRTP;
MACRO_IPPROTO IPPROTO_KRYPTOLAN;
MACRO_IPPROTO IPPROTO_LARP;
MACRO_IPPROTO IPPROTO_LEAF1;
MACRO_IPPROTO IPPROTO_LEAF2;
MACRO_IPPROTO IPPROTO_MAX;
MACRO_IPPROTO_MAXID IPPROTO_MAXID;
MACRO_IPPROTO IPPROTO_MEAS;
MACRO_IPPROTO IPPROTO_MHRP;
MACRO_IPPROTO IPPROTO_MICP;
MACRO_IPPROTO IPPROTO_MTP;
MACRO_IPPROTO IPPROTO_MUX;
MACRO_IPPROTO IPPROTO_ND;
MACRO_IPPROTO IPPROTO_NHRP;
MACRO_IPPROTO IPPROTO_NONE;
MACRO_IPPROTO IPPROTO_NSP;
MACRO_IPPROTO IPPROTO_NVPII;
MACRO_IPPROTO IPPROTO_OSPFIGP;
MACRO_IPPROTO IPPROTO_PGM;
MACRO_IPPROTO IPPROTO_PIGP;
MACRO_IPPROTO IPPROTO_PIM;
MACRO_IPPROTO IPPROTO_PRM;
MACRO_IPPROTO IPPROTO_PUP;
MACRO_IPPROTO IPPROTO_PVP;
MACRO_IPPROTO IPPROTO_RAW;
MACRO_IPPROTO IPPROTO_RCCMON;
MACRO_IPPROTO IPPROTO_RDP;
MACRO_IPPROTO IPPROTO_ROUTING;
MACRO_IPPROTO IPPROTO_RSVP;
MACRO_IPPROTO IPPROTO_RVD;
MACRO_IPPROTO IPPROTO_SATEXPAK;
MACRO_IPPROTO IPPROTO_SATMON;
MACRO_IPPROTO IPPROTO_SCCSP;
MACRO_IPPROTO IPPROTO_SDRP;
MACRO_IPPROTO IPPROTO_SEP;
MACRO_IPPROTO IPPROTO_SRPC;
MACRO_IPPROTO IPPROTO_ST;
MACRO_IPPROTO IPPROTO_SVMTP;
MACRO_IPPROTO IPPROTO_SWIPE;
MACRO_IPPROTO IPPROTO_TCF;
MACRO_IPPROTO IPPROTO_TCP;
MACRO_IPPROTO IPPROTO_TP;
MACRO_IPPROTO IPPROTO_TPXX;
MACRO_IPPROTO IPPROTO_TRUNK1;
MACRO_IPPROTO IPPROTO_TRUNK2;
MACRO_IPPROTO IPPROTO_TTP;
MACRO_IPPROTO IPPROTO_UDP;
MACRO_IPPROTO IPPROTO_VINES;
MACRO_IPPROTO IPPROTO_VISA;
MACRO_IPPROTO IPPROTO_VMTP;
MACRO_IPPROTO IPPROTO_WBEXPAK;
MACRO_IPPROTO IPPROTO_WBMON;
MACRO_IPPROTO IPPROTO_WSN;
MACRO_IPPROTO IPPROTO_XNET;
MACRO_IPPROTO IPPROTO_XTP;
MACRO_IPSECCTL IPSECCTL_AH_CLEARTOS;
MACRO_IPSECCTL IPSECCTL_AH_OFFSETMASK;
MACRO_IPSECCTL IPSECCTL_DEBUG;
MACRO_IPSECCTL IPSECCTL_DEF_AH_NETLEV;
MACRO_IPSECCTL IPSECCTL_DEF_AH_TRANSLEV;
MACRO_IPSECCTL IPSECCTL_DEF_ESP_NETLEV;
MACRO_IPSECCTL IPSECCTL_DEF_ESP_TRANSLEV;
MACRO_IPSECCTL IPSECCTL_DEF_POLICY;
MACRO_IPSECCTL IPSECCTL_DFBIT;
MACRO_IPSECCTL IPSECCTL_ECN;
MACRO_IPSECCTL IPSECCTL_ESP_RANDPAD;
MACRO_IPSECCTL IPSECCTL_MAXID;
MACRO_IPSECCTL IPSECCTL_STATS;
MACRO_IPSEC IPSEC_DIR_ANY;
MACRO_IPSEC IPSEC_DIR_INBOUND;
MACRO_IPSEC IPSEC_DIR_INVALID;
MACRO_IPSEC IPSEC_DIR_MAX;
MACRO_IPSEC IPSEC_DIR_OUTBOUND;
MACRO_IPSEC IPSEC_LEVEL_DEFAULT;
MACRO_IPSEC IPSEC_LEVEL_REQUIRE;
MACRO_IPSEC IPSEC_LEVEL_UNIQUE;
MACRO_IPSEC IPSEC_LEVEL_USE;
MACRO_IPSEC IPSEC_MANUAL_REQID_MAX;
MACRO_IPSEC IPSEC_MODE_ANY;
MACRO_IPSEC IPSEC_MODE_TRANSPORT;
MACRO_IPSEC IPSEC_MODE_TUNNEL;
MACRO_IPSEC IPSEC_POLICY_BYPASS;
MACRO_IPSEC IPSEC_POLICY_DISCARD;
MACRO_IPSEC IPSEC_POLICY_ENTRUST;
MACRO_IPSEC IPSEC_POLICY_IPSEC;
MACRO_IPSEC IPSEC_POLICY_NONE;
MACRO_IPSEC IPSEC_PORT_ANY;
MACRO_IPSEC IPSEC_PROTO_ANY;
MACRO_IPSEC IPSEC_REPLAYWSIZE;
MACRO_IPSEC IPSEC_ULPROTO_ANY;
MACRO_IPTOS IPTOS_CE;
MACRO_IPTOS IPTOS_ECT;
MACRO_IPTOS IPTOS_LOWDELAY;
MACRO_IPTOS IPTOS_MINCOST;
MACRO_IPTOS IPTOS_PREC_CRITIC_ECP;
MACRO_IPTOS IPTOS_PREC_FLASH;
MACRO_IPTOS IPTOS_PREC_FLASHOVERRIDE;
MACRO_IPTOS IPTOS_PREC_IMMEDIATE;
MACRO_IPTOS IPTOS_PREC_INTERNETCONTROL;
MACRO_IPTOS IPTOS_PREC_NETCONTROL;
MACRO_IPTOS IPTOS_PREC_PRIORITY;
MACRO_IPTOS IPTOS_PREC_ROUTINE;
MACRO_IPTOS IPTOS_RELIABILITY;
MACRO_IPTOS IPTOS_THROUGHPUT;
MACRO_IPTTLDEC IPTTLDEC;
MACRO_IPV6CTL IPV6CTL_ACCEPT_RTADV;
MACRO_IPV6CTL IPV6CTL_AUTO_FLOWLABEL;
MACRO_IPV6CTL IPV6CTL_AUTO_LINKLOCAL;
MACRO_IPV6CTL IPV6CTL_DAD_COUNT;
MACRO_IPV6CTL IPV6CTL_DEFHLIM;
MACRO_IPV6CTL IPV6CTL_DEFMCASTHLIM;
MACRO_IPV6CTL IPV6CTL_FORWARDING;
MACRO_IPV6CTL IPV6CTL_FORWSRCRT;
MACRO_IPV6CTL IPV6CTL_GIF_HLIM;
MACRO_IPV6CTL IPV6CTL_HDRNESTLIMIT;
MACRO_IPV6CTL IPV6CTL_KAME_VERSION;
MACRO_IPV6CTL IPV6CTL_KEEPFAITH;
MACRO_IPV6CTL IPV6CTL_LOG_INTERVAL;
MACRO_IPV6CTL IPV6CTL_MAXFRAGPACKETS;
MACRO_IPV6CTL IPV6CTL_MAXID;
MACRO_IPV6CTL IPV6CTL_MRTPROTO;
MACRO_IPV6CTL IPV6CTL_MRTSTATS;
MACRO_IPV6CTL IPV6CTL_RIP6STATS;
MACRO_IPV6CTL IPV6CTL_RR_PRUNE;
MACRO_IPV6CTL IPV6CTL_RTEXPIRE;
MACRO_IPV6CTL IPV6CTL_RTMAXCACHE;
MACRO_IPV6CTL IPV6CTL_RTMINEXPIRE;
MACRO_IPV6CTL IPV6CTL_SENDREDIRECTS;
MACRO_IPV6CTL IPV6CTL_SOURCECHECK;
MACRO_IPV6CTL IPV6CTL_SOURCECHECK_LOGINT;
MACRO_IPV6CTL IPV6CTL_STATS;
MACRO_IPV6CTL IPV6CTL_TEMPPLTIME;
MACRO_IPV6CTL IPV6CTL_TEMPVLTIME;
MACRO_IPV6CTL IPV6CTL_USETEMPADDR;
MACRO_IPV6CTL IPV6CTL_USE_DEPRECATED;
MACRO_IPV6CTL IPV6CTL_V6ONLY;
MACRO_IPV6PORT IPV6PORT_ANONMAX;
MACRO_IPV6PORT IPV6PORT_ANONMIN;
MACRO_IPV6PORT IPV6PORT_RESERVED;
MACRO_IPV6PORT IPV6PORT_RESERVEDMAX;
MACRO_IPV6PORT IPV6PORT_RESERVEDMIN;
MACRO_IPV6PROTO IPV6PROTO_MAXID;
MACRO_IPV6_PKTINFO IPV6_BINDV6ONLY;
MACRO_IPV6_PKTINFO IPV6_CHECKSUM;
MACRO_IPV6_PKTINFO IPV6_DEFAULT_MULTICAST_HOPS;
MACRO_IPV6_PKTINFO IPV6_DEFAULT_MULTICAST_LOOP;
MACRO_IPV6_MAXHLIM IPV6_DEFHLIM;
MACRO_IPV6_PKTINFO IPV6_DSTOPTS;
MACRO_IPV6_PKTINFO IPV6_FAITH;
MACRO_IPV6_VERSION IPV6_FLOWINFO_MASK;
MACRO_IPV6_VERSION IPV6_FLOWLABEL_MASK;
MACRO_IPV6_MAXHLIM IPV6_FRAGTTL;
MACRO_IPV6_PKTINFO IPV6_FW_ADD;
MACRO_IPV6_PKTINFO IPV6_FW_DEL;
MACRO_IPV6_PKTINFO IPV6_FW_FLUSH;
MACRO_IPV6_PKTINFO IPV6_FW_GET;
MACRO_IPV6_PKTINFO IPV6_FW_ZERO;
MACRO_IPV6_MAXHLIM IPV6_HLIMDEC;
MACRO_IPV6_PKTINFO IPV6_HOPLIMIT;
MACRO_IPV6_PKTINFO IPV6_HOPOPTS;
MACRO_IPV6_PKTINFO IPV6_IPSEC_POLICY;
MACRO_IPV6 IPV6_JOIN_GROUP;
MACRO_IPV6 IPV6_LEAVE_GROUP;
MACRO_IPV6_MAXHLIM IPV6_MAXHLIM;
MACRO_IPV6_MAXHLIM IPV6_MAXPACKET;
MACRO_IPV6_MAXHLIM IPV6_MMTU;
MACRO_IPV6 IPV6_MULTICAST_HOPS;
MACRO_IPV6 IPV6_MULTICAST_IF;
MACRO_IPV6 IPV6_MULTICAST_LOOP;
MACRO_IPV6_PKTINFO IPV6_NEXTHOP;
MACRO_IPV6_PKTINFO IPV6_PKTINFO;
MACRO_IPV6_PKTINFO IPV6_PKTOPTIONS;
MACRO_IPV6 IPV6_PORTRANGE;
MACRO_IPV6_PKTINFO IPV6_PORTRANGE_DEFAULT;
MACRO_IPV6_PKTINFO IPV6_PORTRANGE_HIGH;
MACRO_IPV6_PKTINFO IPV6_PORTRANGE_LOW;
MACRO_IPV6_PKTINFO IPV6_RTHDR;
MACRO_IPV6_PKTINFO IPV6_RTHDR_LOOSE;
MACRO_IPV6_PKTINFO IPV6_RTHDR_STRICT;
MACRO_IPV6_PKTINFO IPV6_RTHDR_TYPE_0;
MACRO_IPV6 IPV6_SOCKOPT_RESERVED1;
MACRO_IPV6 IPV6_UNICAST_HOPS;
MACRO_IPV6_PKTINFO IPV6_V6ONLY;
MACRO_IPV6_VERSION IPV6_VERSION;
MACRO_IPV6_VERSION IPV6_VERSION_MASK;
MACRO_IPVERSION IPVERSION;
MACRO_IP_ADDR IP_ADDR_TYPE;
MACRO_IP IP_ADD_MEMBERSHIP;
MACRO_IP IP_DEFAULT_MULTICAST_LOOP;
MACRO_IP IP_DEFAULT_MULTICAST_TTL;
MACRO_IP_RF IP_DF;
MACRO_IP IP_DROP_MEMBERSHIP;
MACRO_IP IP_DUMMYNET_CONFIGURE;
MACRO_IP IP_DUMMYNET_DEL;
MACRO_IP IP_DUMMYNET_FLUSH;
MACRO_IP IP_DUMMYNET_GET;
MACRO_IP IP_FAITH;
MACRO_IP IP_FW_ADD;
MACRO_IP_FW_MAX IP_FW_BRIDGED;
MACRO_IP_FW IP_FW_CURRENT_API_VERSION;
MACRO_IP IP_FW_DEL;
MACRO_IP IP_FW_FLUSH;
MACRO_IP_FW_MAX IP_FW_F_ACCEPT;
MACRO_IP_FW_MAX IP_FW_F_CHECK_S;
MACRO_IP_FW_MAX IP_FW_F_COMMAND;
MACRO_IP_FW_MAX IP_FW_F_COUNT;
MACRO_IP_FW_MAX IP_FW_F_DENY;
MACRO_IP_FW_MAX IP_FW_F_DIVERT;
MACRO_IP_FW_MAX IP_FW_F_DME;
MACRO_IP_FW_MAX IP_FW_F_DMSK;
MACRO_IP_FW_MAX IP_FW_F_DRNG;
MACRO_IP_FW_MAX IP_FW_F_FRAG;
MACRO_IP_FW_MAX IP_FW_F_FWD;
MACRO_IP_FW_MAX IP_FW_F_ICMPBIT;
MACRO_IP_FW_MAX IP_FW_F_IIFACE;
MACRO_IP_FW_MAX IP_FW_F_IIFNAME;
MACRO_IP_FW_MAX IP_FW_F_IN;
MACRO_IP_FW_MAX IP_FW_F_INVDST;
MACRO_IP_FW_MAX IP_FW_F_INVSRC;
MACRO_IP_FW_MAX IP_FW_F_KEEP_S;
MACRO_IP_FW_MAX IP_FW_F_MASK;
MACRO_IP_FW_MAX IP_FW_F_OIFACE;
MACRO_IP_FW_MAX IP_FW_F_OIFNAME;
MACRO_IP_FW_MAX IP_FW_F_OUT;
MACRO_IP_FW_MAX IP_FW_F_PIPE;
MACRO_IP_FW_MAX IP_FW_F_PRN;
MACRO_IP_FW_MAX IP_FW_F_QUEUE;
MACRO_IP_FW_MAX IP_FW_F_REJECT;
MACRO_IP_FW_MAX IP_FW_F_RND_MATCH;
MACRO_IP_FW_MAX IP_FW_F_SKIPTO;
MACRO_IP_FW_MAX IP_FW_F_SME;
MACRO_IP_FW_MAX IP_FW_F_SMSK;
MACRO_IP_FW_MAX IP_FW_F_SRNG;
MACRO_IP_FW_MAX IP_FW_F_TEE;
MACRO_IP_FW_MAX IP_FW_F_UID;
MACRO_IP IP_FW_GET;
MACRO_IP_FW_MAX IP_FW_ICMPTYPES_MAX;
MACRO_IP_FW_MAX IP_FW_IF_TCPEST;
MACRO_IP_FW_MAX IP_FW_IF_TCPMSK;
MACRO_IP_FW_REJECT IP_FW_IPOPT_LSRR;
MACRO_IP_FW_REJECT IP_FW_IPOPT_RR;
MACRO_IP_FW_REJECT IP_FW_IPOPT_SSRR;
MACRO_IP_FW_REJECT IP_FW_IPOPT_TS;
MACRO_IP_FW_MAX IP_FW_MAX_PORTS;
MACRO_IP_FW_REJECT IP_FW_REJECT_RST;
MACRO_IP IP_FW_RESETLOG;
MACRO_IP_FW_REJECT IP_FW_TCPOPT_CC;
MACRO_IP_FW_REJECT IP_FW_TCPOPT_MSS;
MACRO_IP_FW_REJECT IP_FW_TCPOPT_SACK;
MACRO_IP_FW_REJECT IP_FW_TCPOPT_TS;
MACRO_IP_FW_REJECT IP_FW_TCPOPT_WINDOW;
MACRO_IP IP_FW_ZERO;
MACRO_IP IP_HDRINCL;
MACRO_IP IP_IPSEC_POLICY;
MACRO_IP_RF IP_MAXPACKET;
MACRO_IP IP_MAX_MEMBERSHIPS;
MACRO_IP_RF IP_MF;
MACRO_IP_MSS IP_MSS;
MACRO_IP IP_MULTICAST_IF;
MACRO_IP IP_MULTICAST_LOOP;
MACRO_IP IP_MULTICAST_TTL;
MACRO_IP IP_MULTICAST_VIF;
MACRO_IP IP_NAT__XXX;
MACRO_IP_RF IP_OFFMASK;
MACRO_IP IP_OLD_FW_ADD;
MACRO_IP IP_OLD_FW_DEL;
MACRO_IP IP_OLD_FW_FLUSH;
MACRO_IP IP_OLD_FW_GET;
MACRO_IP IP_OLD_FW_RESETLOG;
MACRO_IP IP_OLD_FW_ZERO;
MACRO_IP IP_OPTIONS;
MACRO_IP IP_PORTRANGE;
MACRO_IP IP_PORTRANGE_DEFAULT;
MACRO_IP IP_PORTRANGE_HIGH;
MACRO_IP IP_PORTRANGE_LOW;
MACRO_IP IP_RECVDSTADDR;
MACRO_IP IP_RECVIF;
MACRO_IP IP_RECVOPTS;
MACRO_IP IP_RECVRETOPTS;
MACRO_IP IP_RETOPTS;
MACRO_IP_RF IP_RF;
MACRO_IP IP_RSVP_OFF;
MACRO_IP IP_RSVP_ON;
MACRO_IP IP_RSVP_VIF_OFF;
MACRO_IP IP_RSVP_VIF_ON;
MACRO_IP IP_STRIPHDR;
MACRO_IP IP_TOS;
MACRO_IP IP_TTL;
MACRO_QUERY IQUERY;
MACRO_ECHOKE ISIG;
MACRO_IGNBRK ISTRIP;
MACRO_ITEM ITEM_TASKS;
MACRO_ITEM ITEM_THREADS;
MACRO_ITEM ITEM_VM;
MACRO_ITIMER ITIMER_PROF;
MACRO_ITIMER ITIMER_REAL;
MACRO_ITIMER ITIMER_VIRTUAL;
MACRO_IGNBRK IXANY;
MACRO_IGNBRK IXOFF;
MACRO_IGNBRK IXON;
MACRO_InfoTagCnt InfoTagCnt;
MACRO_JUSTIFY JUSTIFY_CENTER;
MACRO_JUSTIFY JUSTIFY_LEFT;
MACRO_JUSTIFY JUSTIFY_RIGHT;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_10;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_100;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_101;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_102;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_103;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_104;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_105;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_106;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_107;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_108;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_109;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_11;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_110;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_111;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_112;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_113;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_114;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_115;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_116;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_117;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_118;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_119;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_12;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_120;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_121;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_122;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_123;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_124;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_125;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_126;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_127;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_13;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_14;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_15;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_16;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_17;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_18;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_19;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_20;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_21;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_22;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_23;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_24;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_25;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_26;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_27;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_28;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_29;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_30;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_31;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_32;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_33;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_34;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_35;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_36;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_37;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_38;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_39;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_40;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_41;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_42;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_43;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_44;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_45;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_46;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_47;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_48;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_49;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_50;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_51;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_52;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_53;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_54;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_55;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_56;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_57;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_58;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_59;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_60;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_61;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_62;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_63;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_64;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_65;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_66;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_67;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_68;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_69;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_70;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_71;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_72;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_73;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_74;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_75;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_76;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_77;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_78;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_79;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_80;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_81;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_82;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_83;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_84;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_85;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_86;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_87;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_88;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_89;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_9;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_90;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_91;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_92;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_93;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_94;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_95;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_96;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_97;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_98;
MACRO_KADMPLACEHOLD KADMPLACEHOLD_99;
MACRO_KADM_RCSID KADM_BAD_CHK;
MACRO_KADM_RCSID KADM_BAD_KEY;
MACRO_KADM KADM_BAD_PW;
MACRO_KADM_RCSID KADM_BAD_VER;
MACRO_KADM_RCSID KADM_DATA;
MACRO_KADM_RCSID KADM_DB_INUSE;
MACRO_KADM KADM_ENOMEM;
MACRO_KADM KADM_EPERM;
MACRO_KADM_RCSID KADM_ILL_WILDCARD;
MACRO_KADM_RCSID KADM_INUSE;
MACRO_KADM_RCSID KADM_LENGTH_ERROR;
MACRO_KADM_RCSID KADM_NOENTRY;
MACRO_KADM_RCSID KADM_NOMEM;
MACRO_KADM_RCSID KADM_NO_AUTH;
MACRO_KADM_RCSID KADM_NO_BIND;
MACRO_KADM_RCSID KADM_NO_CONN;
MACRO_KADM_RCSID KADM_NO_CRED;
MACRO_KADM_RCSID KADM_NO_ENCRYPT;
MACRO_KADM KADM_NO_ERROR;
MACRO_KADM_RCSID KADM_NO_HERE;
MACRO_KADM_RCSID KADM_NO_HOST;
MACRO_KADM_RCSID KADM_NO_HOSTNAME;
MACRO_KADM_RCSID KADM_NO_MAST;
MACRO_KADM_RCSID KADM_NO_OPCODE;
MACRO_KADM_RCSID KADM_NO_READ;
MACRO_KADM_RCSID KADM_NO_REALM;
MACRO_KADM_RCSID KADM_NO_ROOM;
MACRO_KADM_RCSID KADM_NO_SERV;
MACRO_KADM_RCSID KADM_NO_SOCK;
MACRO_KADM_RCSID KADM_NO_VERI;
MACRO_KADM KADM_PRINC_EXISTS;
MACRO_KADM KADM_PRINC_UNKNOWN;
MACRO_KADM KADM_PROT_ERR;
MACRO_KADM_RCSID KADM_RCSID;
MACRO_KADM KADM_SECURITY;
MACRO_KADM_RCSID KADM_UK_RERROR;
MACRO_KADM_RCSID KADM_UK_SERROR;
MACRO_KADM_RCSID KADM_UNAUTH;
MACRO_KADM_RCSID KADM_UNK_HOST;
MACRO_KADM KADM_UPDATE_FAIL;
MACRO_KADM_RCSID KADM_WRONG_REALM;
MACRO_KB KB_INTERRUPT;
MACRO_KDC_NAME KDC_AUTH_EXP;
MACRO_KDC_NAME KDC_BYTE_ORDER;
MACRO_KDC_NAME KDC_GEN_ERR;
MACRO_KDC_NAME KDC_NAME_EXP;
MACRO_KDC_NAME KDC_NULL_KEY;
MACRO_KDC_OK KDC_OK;
MACRO_KDC KDC_OPT_ALLOW_POSTDATE;
MACRO_KDC KDC_OPT_DISABLE_TRANSITED_CHECK;
MACRO_KDC KDC_OPT_ENC_TKT_IN_SKEY;
MACRO_KDC KDC_OPT_FORWARDABLE;
MACRO_KDC KDC_OPT_FORWARDED;
MACRO_KDC KDC_OPT_POSTDATED;
MACRO_KDC KDC_OPT_PROXIABLE;
MACRO_KDC KDC_OPT_PROXY;
MACRO_KDC KDC_OPT_RENEW;
MACRO_KDC KDC_OPT_RENEWABLE;
MACRO_KDC KDC_OPT_RENEWABLE_OK;
MACRO_KDC KDC_OPT_REQUEST_ANONYMOUS;
MACRO_KDC KDC_OPT_VALIDATE;
MACRO_KDC_NAME KDC_PKT_VER;
MACRO_KDC_NAME KDC_PR_N_UNIQUE;
MACRO_KDC_NAME KDC_PR_UNKNOWN;
MACRO_KDC_NAME KDC_P_MKEY_VER;
MACRO_KDC_NAME KDC_SERVICE_EXP;
MACRO_KDC_NAME KDC_S_MKEY_VER;
MACRO_KDC KDC_TKT_COMMON_MASK;
MACRO_KDEBUG KDEBUG_ENABLE_CHUD;
MACRO_KDEBUG KDEBUG_ENABLE_ENTROPY;
MACRO_KDEBUG KDEBUG_ENABLE_TRACE;
MACRO_TIME KERNEL_BOOTMAGIC_MAX;
MACRO_TIME KERNEL_BOOT_INFO_MAX;
MACRO_KERNEL_MAJOR KERNEL_MAJOR_VERSION;
MACRO_KERNEL_MAJOR KERNEL_MINOR_VERSION;
MACRO_KERNEL KERNEL_STACK_SIZE;
MACRO_TIME KERNEL_VERSION_MAX;
MACRO_KERN KERN_ABORTED;
MACRO_KERN KERN_ALREADY_IN_SET;
MACRO_KERN KERN_ALREADY_WAITING;
MACRO_KERN_OSTYPE KERN_ARGMAX;
MACRO_KERN_OSTYPE KERN_BOOTFILE;
MACRO_KERN_OSTYPE KERN_BOOTTIME;
MACRO_KERN_OSTYPE KERN_CLOCKRATE;
MACRO_KERN KERN_DEFAULT_SET;
MACRO_KERN_OSTYPE KERN_DOMAINNAME;
MACRO_KERN_OSTYPE KERN_DUMMY;
MACRO_KERN_OSTYPE KERN_DUMPDEV;
MACRO_KERN KERN_EXCEPTION_PROTECTED;
MACRO_KERN KERN_FAILURE;
MACRO_KERN_OSTYPE KERN_FILE;
MACRO_KERN_OSTYPE KERN_HOSTID;
MACRO_KERN_OSTYPE KERN_HOSTNAME;
MACRO_KERN KERN_INVALID_ADDRESS;
MACRO_KERN KERN_INVALID_ARGUMENT;
MACRO_KERN KERN_INVALID_CAPABILITY;
MACRO_KERN KERN_INVALID_HOST;
MACRO_KERN KERN_INVALID_LEDGER;
MACRO_KERN KERN_INVALID_MEMORY_CONTROL;
MACRO_KERN KERN_INVALID_NAME;
MACRO_KERN KERN_INVALID_OBJECT;
MACRO_KERN KERN_INVALID_POLICY;
MACRO_KERN KERN_INVALID_PROCESSOR_SET;
MACRO_KERN KERN_INVALID_RIGHT;
MACRO_KERN KERN_INVALID_SECURITY;
MACRO_KERN KERN_INVALID_TASK;
MACRO_KERN KERN_INVALID_VALUE;
MACRO_KERN_OSTYPE KERN_IPC;
MACRO_KERN_OSTYPE KERN_JOB_CONTROL;
MACRO_KERN_OSTYPE KERN_KDDFLAGS;
MACRO_KERN_OSTYPE KERN_KDEBUG;
MACRO_KERN_OSTYPE KERN_KDEFLAGS;
MACRO_KERN_OSTYPE KERN_KDENABLE;
MACRO_KERN_OSTYPE KERN_KDGETBUF;
MACRO_KERN_OSTYPE KERN_KDGETENTROPY;
MACRO_KERN_OSTYPE KERN_KDGETREG;
MACRO_KERN_OSTYPE KERN_KDPIDEX;
MACRO_KERN_OSTYPE KERN_KDPIDTR;
MACRO_KERN_OSTYPE KERN_KDREADTR;
MACRO_KERN_OSTYPE KERN_KDREMOVE;
MACRO_KERN_OSTYPE KERN_KDSETBUF;
MACRO_KERN_OSTYPE KERN_KDSETREG;
MACRO_KERN_OSTYPE KERN_KDSETRTCDEC;
MACRO_KERN_OSTYPE KERN_KDSETUP;
MACRO_KERN_OSTYPE KERN_KDTHRMAP;
MACRO_KERN KERN_LOCK_OWNED;
MACRO_KERN KERN_LOCK_OWNED_SELF;
MACRO_KERN KERN_LOCK_SET_DESTROYED;
MACRO_KERN KERN_LOCK_UNSTABLE;
MACRO_KERN_OSTYPE KERN_LOGSIGEXIT;
MACRO_KERN_OSTYPE KERN_MAXFILES;
MACRO_KERN_OSTYPE KERN_MAXFILESPERPROC;
MACRO_KERN_OSTYPE KERN_MAXID;
MACRO_KERN_OSTYPE KERN_MAXPARTITIONS;
MACRO_KERN_OSTYPE KERN_MAXPROC;
MACRO_KERN_OSTYPE KERN_MAXPROCPERUID;
MACRO_KERN_OSTYPE KERN_MAXVNODES;
MACRO_KERN KERN_MEMORY_DATA_MOVED;
MACRO_KERN KERN_MEMORY_ERROR;
MACRO_KERN KERN_MEMORY_FAILURE;
MACRO_KERN KERN_MEMORY_PRESENT;
MACRO_KERN KERN_MEMORY_RESTART_COPY;
MACRO_KERN KERN_NAME_EXISTS;
MACRO_KERN_OSTYPE KERN_NETBOOT;
MACRO_KERN_OSTYPE KERN_NGROUPS;
MACRO_KERN_OSTYPE KERN_NISDOMAINNAME;
MACRO_KERN KERN_NODE_DOWN;
MACRO_KERN KERN_NOT_DEPRESSED;
MACRO_KERN KERN_NOT_IN_SET;
MACRO_KERN KERN_NOT_RECEIVER;
MACRO_KERN KERN_NOT_SUPPORTED;
MACRO_KERN KERN_NOT_WAITING;
MACRO_KERN KERN_NO_ACCESS;
MACRO_KERN KERN_NO_SPACE;
MACRO_KERN_OSTYPE KERN_NTP_PLL;
MACRO_KERN KERN_OPERATION_TIMED_OUT;
MACRO_KERN_OSTYPE KERN_OSRELDATE;
MACRO_KERN_OSTYPE KERN_OSRELEASE;
MACRO_KERN_OSTYPE KERN_OSREV;
MACRO_KERN_OSTYPE KERN_OSTYPE;
MACRO_KERN_OSTYPE KERN_PANICINFO;
MACRO_KERN_OSTYPE KERN_PANICINFO_IMAGE16;
MACRO_KERN_OSTYPE KERN_PANICINFO_IMAGE32;
MACRO_KERN_OSTYPE KERN_PANICINFO_MAXSIZE;
MACRO_KERN_OSTYPE KERN_PCCOMM;
MACRO_KERN_OSTYPE KERN_PCDISABLE;
MACRO_KERN_OSTYPE KERN_PCGETBUF;
MACRO_KERN_OSTYPE KERN_PCREADBUF;
MACRO_KERN_OSTYPE KERN_PCREMOVE;
MACRO_KERN_OSTYPE KERN_PCSAMPLES;
MACRO_KERN_OSTYPE KERN_PCSETBUF;
MACRO_KERN_OSTYPE KERN_PCSETREG;
MACRO_KERN_OSTYPE KERN_PCSETUP;
MACRO_KERN KERN_POLICY_LIMIT;
MACRO_KERN_OSTYPE KERN_POSIX1;
MACRO_KERN_OSTYPE KERN_PROC;
MACRO_KERN_OSTYPE KERN_PROCARGS;
MACRO_KERN_PROC KERN_PROC_ALL;
MACRO_KERN_PROC KERN_PROC_PGRP;
MACRO_KERN_PROC KERN_PROC_PID;
MACRO_KERN_PROC KERN_PROC_RUID;
MACRO_KERN_PROC KERN_PROC_SESSION;
MACRO_KERN_PROC KERN_PROC_TTY;
MACRO_KERN_PROC KERN_PROC_UID;
MACRO_KERN_OSTYPE KERN_PROF;
MACRO_KERN KERN_PROTECTION_FAILURE;
MACRO_KERN_OSTYPE KERN_PS_STRINGS;
MACRO_KERN KERN_RESOURCE_SHORTAGE;
MACRO_KERN KERN_RETURN_MAX;
MACRO_KERN KERN_RIGHT_EXISTS;
MACRO_KERN KERN_RPC_CONTINUE_ORPHAN;
MACRO_KERN KERN_RPC_SERVER_TERMINATED;
MACRO_KERN KERN_RPC_TERMINATE_ORPHAN;
MACRO_KERN_OSTYPE KERN_SAVED_IDS;
MACRO_KERN_OSTYPE KERN_SECURELVL;
MACRO_KERN KERN_SEMAPHORE_DESTROYED;
MACRO_KERN KERN_SUCCESS;
MACRO_KERN_OSTYPE KERN_SYMFILE;
MACRO_KERN_OSTYPE KERN_SYSV;
MACRO_KERN KERN_TERMINATED;
MACRO_KERN_OSTYPE KERN_UPDATEINTERVAL;
MACRO_KERN KERN_UREFS_OVERFLOW;
MACRO_KERN_OSTYPE KERN_USRSTACK;
MACRO_KERN_OSTYPE KERN_VERSION;
MACRO_KERN_OSTYPE KERN_VNODE;
MACRO_KEVENTS KEVENTS_ON;
MACRO_KEV_SNDSPACE KEV_ANY_CLASS;
MACRO_KEV_SNDSPACE KEV_ANY_SUBCLASS;
MACRO_KEV_SNDSPACE KEV_ANY_VENDOR;
MACRO_KEV_CTL KEV_CTL_DEREGISTERED;
MACRO_KEV_CTL KEV_CTL_REGISTERED;
MACRO_KEV_CTL KEV_CTL_SUBCLASS;
MACRO_KEV KEV_DL_ADDMULTI;
MACRO_KEV KEV_DL_DELMULTI;
MACRO_KEV KEV_DL_IF_ATTACHED;
MACRO_KEV KEV_DL_IF_DETACHED;
MACRO_KEV KEV_DL_IF_DETACHING;
MACRO_KEV KEV_DL_LINK_OFF;
MACRO_KEV KEV_DL_LINK_ON;
MACRO_KEV KEV_DL_PROTO_ATTACHED;
MACRO_KEV KEV_DL_PROTO_DETACHED;
MACRO_KEV KEV_DL_SIFFLAGS;
MACRO_KEV KEV_DL_SIFGENERIC;
MACRO_KEV KEV_DL_SIFMEDIA;
MACRO_KEV KEV_DL_SIFMETRICS;
MACRO_KEV KEV_DL_SIFMTU;
MACRO_KEV KEV_DL_SIFPHYS;
MACRO_KEV KEV_DL_SUBCLASS;
MACRO_KEV_SNDSPACE KEV_IOKIT_CLASS;
MACRO_KEV_SNDSPACE KEV_NETWORK_CLASS;
MACRO_KEV_SNDSPACE KEV_RECVSPACE;
MACRO_KEV_SNDSPACE KEV_SNDSPACE;
MACRO_KEV_SNDSPACE KEV_SYSTEM_CLASS;
MACRO_KEV_SNDSPACE KEV_VENDOR_APPLE;
MACRO_KEY KEY_A1;
MACRO_KEY KEY_A3;
MACRO_KEY KEY_B2;
MACRO_KEY KEY_BACKSPACE;
MACRO_KEY KEY_BEG;
MACRO_KEY KEY_BREAK;
MACRO_KEY KEY_BTAB;
MACRO_KEY KEY_C1;
MACRO_KEY KEY_C3;
MACRO_KEY KEY_CANCEL;
MACRO_KEY KEY_CATAB;
MACRO_KEY KEY_CLEAR;
MACRO_KEY KEY_CLOSE;
MACRO_KEY_DIR KEY_CODE_MASK;
MACRO_KEY_DIR KEY_CODE_NULL;
MACRO_KEY KEY_CODE_YES;
MACRO_KEY KEY_COMMAND;
MACRO_KEY KEY_COPY;
MACRO_KEY KEY_CREATE;
MACRO_KEY KEY_CTAB;
MACRO_KEY KEY_DC;
MACRO_KEY_DIR KEY_DIR_MASK;
MACRO_KEY_DIR KEY_DIR_UP;
MACRO_KEY KEY_DL;
MACRO_KEY KEY_DOWN;
MACRO_KEY KEY_EIC;
MACRO_KEY KEY_END;
MACRO_KEY KEY_ENTER;
MACRO_KEY KEY_EOL;
MACRO_KEY KEY_EOS;
MACRO_KEY KEY_EXIT;
MACRO_KEY KEY_F0;
MACRO_KEY KEY_FIND;
MACRO_KEY KEY_HELP;
MACRO_KEY KEY_HOME;
MACRO_KEY KEY_IC;
MACRO_KEY KEY_IL;
MACRO_KEY_INVALID KEY_INVALID;
MACRO_KEY KEY_LEFT;
MACRO_KEY KEY_LL;
MACRO_KEY KEY_MARK;
MACRO_KEY KEY_MAX;
MACRO_KEY KEY_MESSAGE;
MACRO_KEY KEY_MIN;
MACRO_KEY KEY_MOUSE;
MACRO_KEY KEY_MOVE;
MACRO_KEY KEY_NEXT;
MACRO_KEY KEY_NPAGE;
MACRO_KEY KEY_OPEN;
MACRO_KEY KEY_OPTIONS;
MACRO_KEY KEY_PPAGE;
MACRO_KEY KEY_PREVIOUS;
MACRO_KEY KEY_PRINT;
MACRO_KEY KEY_REDO;
MACRO_KEY KEY_REFERENCE;
MACRO_KEY KEY_REFRESH;
MACRO_KEY KEY_REPLACE;
MACRO_KEY KEY_RESET;
MACRO_KEY KEY_RESIZE;
MACRO_KEY KEY_RESTART;
MACRO_KEY KEY_RESUME;
MACRO_KEY KEY_RIGHT;
MACRO_KEY KEY_SAVE;
MACRO_KEY KEY_SBEG;
MACRO_KEY KEY_SCANCEL;
MACRO_KEY KEY_SCOMMAND;
MACRO_KEY KEY_SCOPY;
MACRO_KEY KEY_SCREATE;
MACRO_KEY KEY_SDC;
MACRO_KEY KEY_SDL;
MACRO_KEY KEY_SELECT;
MACRO_KEY KEY_SEND;
MACRO_KEY_SENDUP KEY_SENDUP_ALL;
MACRO_KEY_SENDUP KEY_SENDUP_ONE;
MACRO_KEY_SENDUP KEY_SENDUP_REGISTERED;
MACRO_KEY KEY_SEOL;
MACRO_KEY KEY_SEXIT;
MACRO_KEY KEY_SF;
MACRO_KEY KEY_SFIND;
MACRO_KEY KEY_SHELP;
MACRO_KEY KEY_SHOME;
MACRO_KEY KEY_SIC;
MACRO_KEY KEY_SLEFT;
MACRO_KEY KEY_SMESSAGE;
MACRO_KEY KEY_SMOVE;
MACRO_KEY KEY_SNEXT;
MACRO_KEY KEY_SOPTIONS;
MACRO_KEY KEY_SPREVIOUS;
MACRO_KEY KEY_SPRINT;
MACRO_KEY KEY_SR;
MACRO_KEY KEY_SREDO;
MACRO_KEY KEY_SREPLACE;
MACRO_KEY KEY_SRESET;
MACRO_KEY KEY_SRIGHT;
MACRO_KEY KEY_SRSUME;
MACRO_KEY KEY_SSAVE;
MACRO_KEY KEY_SSUSPEND;
MACRO_KEY KEY_STAB;
MACRO_KEY KEY_SUNDO;
MACRO_KEY KEY_SUSPEND;
MACRO_KEY KEY_UNDO;
MACRO_KEY KEY_UP;
MACRO_KSUCCESS KFAILURE;
MACRO_KG KG_BAD_LENGTH;
MACRO_KG KG_BAD_SEQ;
MACRO_KG KG_BAD_SIGN_TYPE;
MACRO_KG KG_CCACHE_NOMATCH;
MACRO_KG KG_CONTEXT;
MACRO_KG KG_CONTEXT_ESTABLISHED;
MACRO_KG KG_CRED;
MACRO_KG KG_CTX_INCOMPLETE;
MACRO_KG KG_EMPTY_CCACHE;
MACRO_KG KG_ENC_DESC;
MACRO_KG KG_KEYTAB_NOMATCH;
MACRO_KG KG_NO_CTYPES;
MACRO_KG KG_NO_SUBKEY;
MACRO_KG KG_TGT_MISSING;
MACRO_KIPBCASTADDR KIPBCASTADDR;
MACRO_KIPCORE KIPCORE;
MACRO_KIPC KIPC_MAXSOCKBUF;
MACRO_KIPC KIPC_MAX_DATALEN;
MACRO_KIPC KIPC_MAX_HDR;
MACRO_KIPC KIPC_MAX_LINKHDR;
MACRO_KIPC KIPC_MAX_PROTOHDR;
MACRO_KIPC KIPC_MBSTAT;
MACRO_KIPC KIPC_NMBCLUSTERS;
MACRO_KIPC KIPC_SOCKBUF_WASTE;
MACRO_KIPC KIPC_SOMAXCONN;
MACRO_KIPENTRY KIPENTRY;
MACRO_KIPHOPCOUNT KIPHOPCOUNT;
MACRO_KIPNETEND KIPNETEND;
MACRO_KIPNETSTART KIPNETSTART;
MACRO_KIPNEXTHOP KIPNEXTHOP;
MACRO_KIPSHARE KIPSHARE;
MACRO_KIPSTATE KIPSTATE;
MACRO_KIPTABLE KIPTABLE;
MACRO_KIPTYPE KIPTYPE;
MACRO_SZ KKEY_SZ;
MACRO_KLM KLM_CANCEL;
MACRO_KLM KLM_LOCK;
MACRO_KLM KLM_PROG;
MACRO_KLM KLM_TEST;
MACRO_KLM KLM_UNLOCK;
MACRO_KLM KLM_VERS;
MACRO_KMOD KMOD_CNTL_GET_CMD;
MACRO_KMOD KMOD_CNTL_RELEASE;
MACRO_KMOD KMOD_CNTL_RETAIN;
MACRO_KMOD KMOD_CNTL_START;
MACRO_KMOD KMOD_CNTL_STOP;
MACRO_KMOD KMOD_INFO_VERSION;
MACRO_KMOD KMOD_IOKIT_END_RANGE_PACKET;
MACRO_KMOD KMOD_IOKIT_START_RANGE_PACKET;
MACRO_KMOD KMOD_LOAD_EXTENSION_PACKET;
MACRO_KMOD KMOD_LOAD_WITH_DEPENDENCIES_PACKET;
MACRO_KMOD KMOD_MAX_NAME;
MACRO_KMOD KMOD_RETURN_FAILURE;
MACRO_KMOD KMOD_RETURN_SUCCESS;
MACRO_KNAME KNAME_FMT;
MACRO_KOPT KOPT_DONT_CANON;
MACRO_KOPT KOPT_DONT_MK_REQ;
MACRO_KOPT KOPT_DO_MUTUAL;
MACRO_KRB5DES KRB5DES_BAD_KEYPAR;
MACRO_KRB5DES KRB5DES_WEAK_KEY;
MACRO_KRB5KDC KRB5KDC_ERR_BADOPTION;
MACRO_KRB5KDC KRB5KDC_ERR_BAD_PVNO;
MACRO_KRB5KDC KRB5KDC_ERR_CANNOT_POSTDATE;
MACRO_KRB5KDC KRB5KDC_ERR_CLIENT_NOTYET;
MACRO_KRB5KDC KRB5KDC_ERR_CLIENT_REVOKED;
MACRO_KRB5KDC KRB5KDC_ERR_C_OLD_MAST_KVNO;
MACRO_KRB5KDC KRB5KDC_ERR_C_PRINCIPAL_UNKNOWN;
MACRO_KRB5KDC KRB5KDC_ERR_ETYPE_NOSUPP;
MACRO_KRB5KDC KRB5KDC_ERR_KEY_EXP;
MACRO_KRB5KDC KRB5KDC_ERR_NAME_EXP;
MACRO_KRB5KDC KRB5KDC_ERR_NEVER_VALID;
MACRO_KRB5KDC KRB5KDC_ERR_NONE;
MACRO_KRB5KDC KRB5KDC_ERR_NULL_KEY;
MACRO_KRB5KDC KRB5KDC_ERR_PADATA_TYPE_NOSUPP;
MACRO_KRB5KDC KRB5KDC_ERR_POLICY;
MACRO_KRB5KDC KRB5KDC_ERR_PREAUTH_FAILED;
MACRO_KRB5KDC KRB5KDC_ERR_PREAUTH_REQUIRED;
MACRO_KRB5KDC KRB5KDC_ERR_PRINCIPAL_NOT_UNIQUE;
MACRO_KRB5KDC KRB5KDC_ERR_SERVER_NOMATCH;
MACRO_KRB5KDC KRB5KDC_ERR_SERVICE_EXP;
MACRO_KRB5KDC KRB5KDC_ERR_SERVICE_NOTYET;
MACRO_KRB5KDC KRB5KDC_ERR_SERVICE_REVOKED;
MACRO_KRB5KDC KRB5KDC_ERR_SUMTYPE_NOSUPP;
MACRO_KRB5KDC KRB5KDC_ERR_S_OLD_MAST_KVNO;
MACRO_KRB5KDC KRB5KDC_ERR_S_PRINCIPAL_UNKNOWN;
MACRO_KRB5KDC KRB5KDC_ERR_TGT_REVOKED;
MACRO_KRB5KDC KRB5KDC_ERR_TRTYPE_NOSUPP;
MACRO_KRB5KRB KRB5KRB_AP_ERR_BADADDR;
MACRO_KRB5KRB KRB5KRB_AP_ERR_BADDIRECTION;
MACRO_KRB5KRB KRB5KRB_AP_ERR_BADKEYVER;
MACRO_KRB5KRB KRB5KRB_AP_ERR_BADMATCH;
MACRO_KRB5KRB KRB5KRB_AP_ERR_BADORDER;
MACRO_KRB5KRB KRB5KRB_AP_ERR_BADSEQ;
MACRO_KRB5KRB KRB5KRB_AP_ERR_BADVERSION;
MACRO_KRB5KRB KRB5KRB_AP_ERR_BAD_INTEGRITY;
MACRO_KRB5KRB KRB5KRB_AP_ERR_ILL_CR_TKT;
MACRO_KRB5KRB KRB5KRB_AP_ERR_INAPP_CKSUM;
MACRO_KRB5KRB KRB5KRB_AP_ERR_METHOD;
MACRO_KRB5KRB KRB5KRB_AP_ERR_MODIFIED;
MACRO_KRB5KRB KRB5KRB_AP_ERR_MSG_TYPE;
MACRO_KRB5KRB KRB5KRB_AP_ERR_MUT_FAIL;
MACRO_KRB5KRB KRB5KRB_AP_ERR_NOKEY;
MACRO_KRB5KRB KRB5KRB_AP_ERR_NOT_US;
MACRO_KRB5KRB KRB5KRB_AP_ERR_REPEAT;
MACRO_KRB5KRB KRB5KRB_AP_ERR_SKEW;
MACRO_KRB5KRB KRB5KRB_AP_ERR_TKT_EXPIRED;
MACRO_KRB5KRB_AP KRB5KRB_AP_ERR_TKT_INVALID;
MACRO_KRB5KRB KRB5KRB_AP_ERR_TKT_NYV;
MACRO_KRB5KRB_AP_ERR KRB5KRB_AP_ERR_V4_REPLY;
MACRO_KRB5KRB_AP KRB5KRB_AP_WRONG_PRINC;
MACRO_KRB5KRB_ERR KRB5KRB_ERR_FIELD_TOOLONG;
MACRO_KRB5KRB_ERR KRB5KRB_ERR_GENERIC;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_100;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_101;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_102;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_103;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_104;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_105;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_106;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_107;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_108;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_109;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_110;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_111;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_112;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_113;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_114;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_115;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_116;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_117;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_118;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_119;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_120;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_121;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_122;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_123;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_124;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_125;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_126;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_127;
MACRO_KRB5PLACEHOLD KRB5PLACEHOLD_27;
MACRO_KRB5PLACEHOLD KRB5PLACEHOLD_28;
MACRO_KRB5PLACEHOLD KRB5PLACEHOLD_29;
MACRO_KRB5PLACEHOLD KRB5PLACEHOLD_30;
MACRO_KRB5PLACEHOLD_51 KRB5PLACEHOLD_51;
MACRO_KRB5PLACEHOLD_51 KRB5PLACEHOLD_52;
MACRO_KRB5PLACEHOLD_51 KRB5PLACEHOLD_53;
MACRO_KRB5PLACEHOLD_51 KRB5PLACEHOLD_54;
MACRO_KRB5PLACEHOLD_51 KRB5PLACEHOLD_55;
MACRO_KRB5PLACEHOLD_51 KRB5PLACEHOLD_56;
MACRO_KRB5PLACEHOLD_51 KRB5PLACEHOLD_57;
MACRO_KRB5PLACEHOLD_51 KRB5PLACEHOLD_58;
MACRO_KRB5PLACEHOLD_51 KRB5PLACEHOLD_59;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_62;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_63;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_64;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_65;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_66;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_67;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_68;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_69;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_70;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_71;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_72;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_73;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_74;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_75;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_76;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_77;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_78;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_79;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_80;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_81;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_82;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_83;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_84;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_85;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_86;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_87;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_88;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_89;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_90;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_91;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_92;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_93;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_94;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_95;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_96;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_97;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_98;
MACRO_KRB5PLACEHOLD_62 KRB5PLACEHOLD_99;
MACRO_KRB5_PVNO KRB5_ALTAUTH_ATT_CHALLENGE_RESPONSE;
MACRO_KRB5_REALM KRB5_APPL_EXPIRED;
MACRO_KRB5_PVNO KRB5_AP_REP;
MACRO_KRB5_PVNO KRB5_AP_REQ;
MACRO_KRB5_PVNO KRB5_AS_REP;
MACRO_KRB5_PVNO KRB5_AS_REQ;
MACRO_KRB5_PVNO KRB5_AUTHDATA_OSF_DCE;
MACRO_KRB5_PVNO KRB5_AUTHDATA_SESAME;
MACRO_KRB5_PVNO KRB5_AUTH_CONTEXT_DO_SEQUENCE;
MACRO_KRB5_PVNO KRB5_AUTH_CONTEXT_DO_TIME;
MACRO_KRB5_PVNO KRB5_AUTH_CONTEXT_GENERATE_LOCAL_ADDR;
MACRO_KRB5_PVNO KRB5_AUTH_CONTEXT_GENERATE_LOCAL_FULL_ADDR;
MACRO_KRB5_PVNO KRB5_AUTH_CONTEXT_GENERATE_REMOTE_ADDR;
MACRO_KRB5_PVNO KRB5_AUTH_CONTEXT_GENERATE_REMOTE_FULL_ADDR;
MACRO_KRB5_PVNO KRB5_AUTH_CONTEXT_PERMIT_ALL;
MACRO_KRB5_PVNO KRB5_AUTH_CONTEXT_RET_SEQUENCE;
MACRO_KRB5_PVNO KRB5_AUTH_CONTEXT_RET_TIME;
MACRO_KRB5_ERR KRB5_BADMSGTYPE;
MACRO_KRB5_BAD KRB5_BAD_ENCTYPE;
MACRO_KRB5_BAD KRB5_BAD_KEYSIZE;
MACRO_KRB5_BAD KRB5_BAD_MSIZE;
MACRO_KRB5_DEPRECATED KRB5_CCACHE_ACCESSOR_FUNCTIONS;
MACRO_KRB5_BAD KRB5_CCACHE_BADVNO;
MACRO_KRB5_ERR KRB5_CC_BADNAME;
MACRO_KRB5_ERR KRB5_CC_END;
MACRO_KRB5_BAD KRB5_CC_FORMAT;
MACRO_KRB5_BAD KRB5_CC_IO;
MACRO_KRB5_BAD KRB5_CC_NOMEM;
MACRO_KRB5_ERR KRB5_CC_NOTFOUND;
MACRO_KRB5_BAD KRB5_CC_NOT_KTYPE;
MACRO_KRB5_BAD KRB5_CC_TYPE_EXISTS;
MACRO_KRB5_ERR KRB5_CC_UNKNOWN_TYPE;
MACRO_KRB5_BAD KRB5_CC_WRITE;
MACRO_KRB5_REALM KRB5_CHPW_FAIL;
MACRO_KRB5_REALM KRB5_CHPW_PWDNULL;
MACRO_KRB5_ERR KRB5_CONFIG_BADFORMAT;
MACRO_KRB5_ERR KRB5_CONFIG_CANTOPEN;
MACRO_KRB5_REALM KRB5_CONFIG_ETYPE_NOSUPP;
MACRO_KRB5_REALM KRB5_CONFIG_NODEFREALM;
MACRO_KRB5_ERR KRB5_CONFIG_NOTENUFSPACE;
MACRO_KRB5_PVNO KRB5_CRED;
MACRO_KRB5_PRINC KRB5_CRYPTO_INTERNAL;
MACRO_KRB5_PVNO KRB5_CYBERSAFE_SECUREID;
MACRO_KRB5_DEPRECATED KRB5_DEPRECATED;
MACRO_KRB5_PVNO KRB5_DOMAIN_X500_COMPRESS;
MACRO_KRB5_PVNO KRB5_ERROR;
MACRO_KRB5_BAD KRB5_ERR_BAD_HOSTNAME;
MACRO_KRB5_BAD KRB5_ERR_HOST_REALM_UNKNOWN;
MACRO_KRB5_ERR KRB5_ERR_RCSID;
MACRO_KRB5_BAD KRB5_FCC_INTERNAL;
MACRO_KRB5_BAD KRB5_FCC_NOFILE;
MACRO_KRB5_BAD KRB5_FCC_PERM;
MACRO_KRB5_REALM KRB5_FWD_BAD_PRINCIPAL;
MACRO_KRB5_GC KRB5_GC_CACHED;
MACRO_KRB5_GC KRB5_GC_USER_USER;
MACRO_KRB5_GC KRB5_GET_INIT_CREDS_OPT_ADDRESS_LIST;
MACRO_KRB5_GC KRB5_GET_INIT_CREDS_OPT_ETYPE_LIST;
MACRO_KRB5_GC KRB5_GET_INIT_CREDS_OPT_FORWARDABLE;
MACRO_KRB5_GC KRB5_GET_INIT_CREDS_OPT_PREAUTH_LIST;
MACRO_KRB5_GC KRB5_GET_INIT_CREDS_OPT_PROXIABLE;
MACRO_KRB5_GC KRB5_GET_INIT_CREDS_OPT_RENEW_LIFE;
MACRO_KRB5_GC KRB5_GET_INIT_CREDS_OPT_SALT;
MACRO_KRB5_GC KRB5_GET_INIT_CREDS_OPT_TKT_LIFE;
MACRO_KRB5_REALM KRB5_GET_IN_TKT_LOOP;
MACRO_KRB5_INT32 KRB5_INT16_MAX;
MACRO_KRB5_INT32 KRB5_INT16_MIN;
MACRO_KRB5_INT32 KRB5_INT32_MAX;
MACRO_KRB5_INT32 KRB5_INT32_MIN;
MACRO_KRB5_BAD KRB5_INVALID_FLAGS;
MACRO_KRB5_PRINC KRB5_IN_TKT_REALM_MISMATCH;
MACRO_KRB5 KRB5_KDB_BADLOCKMODE;
MACRO_KRB5 KRB5_KDB_BADMASTERKEY;
MACRO_KRB5 KRB5_KDB_BADSTORED_MKEY;
MACRO_KRB5 KRB5_KDB_BAD_CREATEFLAGS;
MACRO_KRB5 KRB5_KDB_BAD_ENCTYPE;
MACRO_KRB5 KRB5_KDB_BAD_SALTTYPE;
MACRO_KRB5 KRB5_KDB_BAD_VERSION;
MACRO_KRB5 KRB5_KDB_CANTLOCK_DB;
MACRO_KRB5 KRB5_KDB_CANTREAD_STORED;
MACRO_KRB5 KRB5_KDB_DBINITED;
MACRO_KRB5 KRB5_KDB_DBNOTINITED;
MACRO_KRB5 KRB5_KDB_DB_CHANGED;
MACRO_KRB5 KRB5_KDB_DB_CORRUPT;
MACRO_KRB5 KRB5_KDB_DB_INUSE;
MACRO_KRB5 KRB5_KDB_ILLDIRECTION;
MACRO_KRB5 KRB5_KDB_ILL_WILDCARD;
MACRO_KRB5 KRB5_KDB_INUSE;
MACRO_KRB5 KRB5_KDB_INVALIDKEYSIZE;
MACRO_KRB5 KRB5_KDB_NOENTRY;
MACRO_KRB5 KRB5_KDB_NOMASTERKEY;
MACRO_KRB5 KRB5_KDB_NOTLOCKED;
MACRO_KRB5 KRB5_KDB_NO_MATCHING_KEY;
MACRO_KRB5 KRB5_KDB_NO_PERMITTED_KEY;
MACRO_KRB5 KRB5_KDB_RCSID;
MACRO_KRB5 KRB5_KDB_RECURSIVELOCK;
MACRO_KRB5 KRB5_KDB_TRUNCATED_RECORD;
MACRO_KRB5 KRB5_KDB_UK_RERROR;
MACRO_KRB5 KRB5_KDB_UK_SERROR;
MACRO_KRB5 KRB5_KDB_UNAUTH;
MACRO_KRB5_PRINC KRB5_KDCREP_MODIFIED;
MACRO_KRB5_PRINC KRB5_KDCREP_SKEW;
MACRO_KRB5_PRINC KRB5_KDC_UNREACH;
MACRO_KRB5_DEPRECATED KRB5_KEYTAB_ACCESSOR_FUNCTIONS;
MACRO_KRB5_BAD KRB5_KEYTAB_BADVNO;
MACRO_KRB5_KEYUSAGE KRB5_KEYUSAGE_AD_ITE;
MACRO_KRB5_KEYUSAGE KRB5_KEYUSAGE_AD_KDCISSUED_CKSUM;
MACRO_KRB5_KEYUSAGE KRB5_KEYUSAGE_AD_MTE;
MACRO_KRB5_KEYUSAGE KRB5_KEYUSAGE_APP_DATA_CKSUM;
MACRO_KRB5_KEYUSAGE KRB5_KEYUSAGE_APP_DATA_ENCRYPT;
MACRO_KRB5_KEYUSAGE KRB5_KEYUSAGE_AP_REP_ENCPART;
MACRO_KRB5_KEYUSAGE KRB5_KEYUSAGE_AP_REQ_AUTH;
MACRO_KRB5_KEYUSAGE KRB5_KEYUSAGE_AP_REQ_AUTH_CKSUM;
MACRO_KRB5_KEYUSAGE KRB5_KEYUSAGE_AS_REP_ENCPART;
MACRO_KRB5_KEYUSAGE KRB5_KEYUSAGE_AS_REQ_PA_ENC_TS;
MACRO_KRB5_KEYUSAGE KRB5_KEYUSAGE_GSS_TOK_MIC;
MACRO_KRB5_KEYUSAGE KRB5_KEYUSAGE_GSS_TOK_WRAP_INTEG;
MACRO_KRB5_KEYUSAGE KRB5_KEYUSAGE_GSS_TOK_WRAP_PRIV;
MACRO_KRB5_KEYUSAGE KRB5_KEYUSAGE_KDC_REP_TICKET;
MACRO_KRB5_KEYUSAGE KRB5_KEYUSAGE_KRB_CRED_ENCPART;
MACRO_KRB5_KEYUSAGE KRB5_KEYUSAGE_KRB_ERROR_CKSUM;
MACRO_KRB5_KEYUSAGE KRB5_KEYUSAGE_KRB_PRIV_ENCPART;
MACRO_KRB5_KEYUSAGE KRB5_KEYUSAGE_KRB_SAFE_CKSUM;
MACRO_KRB5_KEYUSAGE KRB5_KEYUSAGE_TGS_REP_ENCPART_SESSKEY;
MACRO_KRB5_KEYUSAGE KRB5_KEYUSAGE_TGS_REP_ENCPART_SUBKEY;
MACRO_KRB5_KEYUSAGE KRB5_KEYUSAGE_TGS_REQ_AD_SESSKEY;
MACRO_KRB5_KEYUSAGE KRB5_KEYUSAGE_TGS_REQ_AD_SUBKEY;
MACRO_KRB5_KEYUSAGE KRB5_KEYUSAGE_TGS_REQ_AUTH;
MACRO_KRB5_KEYUSAGE KRB5_KEYUSAGE_TGS_REQ_AUTH_CKSUM;
MACRO_KRB5_PVNO KRB5_KPASSWD_AUTHERROR;
MACRO_KRB5_PVNO KRB5_KPASSWD_HARDERROR;
MACRO_KRB5_PVNO KRB5_KPASSWD_MALFORMED;
MACRO_KRB5_PVNO KRB5_KPASSWD_SOFTERROR;
MACRO_KRB5_PVNO KRB5_KPASSWD_SUCCESS;
MACRO_KRB5_PRINC KRB5_KT_BADNAME;
MACRO_KRB5_PRINC KRB5_KT_END;
MACRO_KRB5_REALM KRB5_KT_FORMAT;
MACRO_KRB5_PRINC KRB5_KT_IOERR;
MACRO_KRB5_REALM KRB5_KT_KVNONOTFOUND;
MACRO_KRB5_REALM KRB5_KT_NAME_TOOLONG;
MACRO_KRB5_PRINC KRB5_KT_NOTFOUND;
MACRO_KRB5_PRINC KRB5_KT_NOWRITE;
MACRO_KRB5_BAD KRB5_KT_TYPE_EXISTS;
MACRO_KRB5_PRINC KRB5_KT_UNKNOWN_TYPE;
MACRO_KRB5_ERR KRB5_LIBOS_BADLOCKFLAG;
MACRO_KRB5_ERR KRB5_LIBOS_BADPWDMATCH;
MACRO_KRB5_ERR KRB5_LIBOS_CANTREADPWD;
MACRO_KRB5_ERR KRB5_LIBOS_PWDINTR;
MACRO_KRB5_REALM KRB5_LIB_EXPIRED;
MACRO_KRB5_PRINC KRB5_LNAME_BADFORMAT;
MACRO_KRB5_PRINC KRB5_LNAME_CANTOPEN;
MACRO_KRB5_PRINC KRB5_LNAME_NOTRANS;
MACRO_KRB5_PVNO KRB5_LRQ_ALL_LAST_INITIAL;
MACRO_KRB5_PVNO KRB5_LRQ_ALL_LAST_RENEWAL;
MACRO_KRB5_PVNO KRB5_LRQ_ALL_LAST_REQ;
MACRO_KRB5_PVNO KRB5_LRQ_ALL_LAST_TGT;
MACRO_KRB5_PVNO KRB5_LRQ_ALL_LAST_TGT_ISSUED;
MACRO_KRB5_PVNO KRB5_LRQ_NONE;
MACRO_KRB5_PVNO KRB5_LRQ_ONE_LAST_INITIAL;
MACRO_KRB5_PVNO KRB5_LRQ_ONE_LAST_RENEWAL;
MACRO_KRB5_PVNO KRB5_LRQ_ONE_LAST_REQ;
MACRO_KRB5_PVNO KRB5_LRQ_ONE_LAST_TGT;
MACRO_KRB5_PVNO KRB5_LRQ_ONE_LAST_TGT_ISSUED;
MACRO_KRB5_PRINC KRB5_MUTUAL_FAILED;
MACRO_KRB5_BAD KRB5_NOCREDS_SUPPLIED;
MACRO_KRB5_REALM KRB5_NOPERM_ETYPE;
MACRO_KRB5_BAD KRB5_NO_2ND_TKT;
MACRO_KRB5_PRINC KRB5_NO_LOCALNAME;
MACRO_KRB5_PRINC KRB5_NO_TKT_IN_RLM;
MACRO_KRB5_ERR KRB5_NO_TKT_SUPPLIED;
MACRO_KRB5_INT32 KRB5_NT_PRINCIPAL;
MACRO_KRB5_INT32 KRB5_NT_SRV_HST;
MACRO_KRB5_INT32 KRB5_NT_SRV_INST;
MACRO_KRB5_INT32 KRB5_NT_SRV_XHST;
MACRO_KRB5_INT32 KRB5_NT_UID;
MACRO_KRB5_INT32 KRB5_NT_UNKNOWN;
MACRO_KRB5_REALM KRB5_OBSOLETE_FN;
MACRO_KRB5_PVNO KRB5_PADATA_AFS3_SALT;
MACRO_KRB5_PVNO KRB5_PADATA_AP_REQ;
MACRO_KRB5_PVNO KRB5_PADATA_DASS;
MACRO_KRB5_PVNO KRB5_PADATA_ENC_SANDIA_SECURID;
MACRO_KRB5_PVNO KRB5_PADATA_ENC_TIMESTAMP;
MACRO_KRB5_PVNO KRB5_PADATA_ENC_UNIX_TIME;
MACRO_KRB5_PVNO KRB5_PADATA_ETYPE_INFO;
MACRO_KRB5_PVNO KRB5_PADATA_NONE;
MACRO_KRB5_PVNO KRB5_PADATA_OSF_DCE;
MACRO_KRB5_PVNO KRB5_PADATA_PW_SALT;
MACRO_KRB5_PVNO KRB5_PADATA_SAM_CHALLENGE;
MACRO_KRB5_PVNO KRB5_PADATA_SAM_RESPONSE;
MACRO_KRB5_PVNO KRB5_PADATA_SESAME;
MACRO_KRB5_PVNO KRB5_PADATA_TGS_REQ;
MACRO_KRB5_ERR KRB5_PARSE_ILLCHAR;
MACRO_KRB5_ERR KRB5_PARSE_MALFORMED;
MACRO_KRB5_BAD KRB5_PREAUTH_BAD_TYPE;
MACRO_KRB5_BAD KRB5_PREAUTH_FAILED;
MACRO_KRB5_BAD KRB5_PREAUTH_NO_KEY;
MACRO_KRB5_PRINC KRB5_PRINC_NOMATCH;
MACRO_KRB5_PVNO KRB5_PRIV;
MACRO_KRB5_DEPRECATED KRB5_PRIVATE;
MACRO_KRB5_BAD KRB5_PROG_ATYPE_NOSUPP;
MACRO_KRB5_PRINC KRB5_PROG_ETYPE_NOSUPP;
MACRO_KRB5_PRINC KRB5_PROG_KEYTYPE_NOSUPP;
MACRO_KRB5_PRINC KRB5_PROG_SUMTYPE_NOSUPP;
MACRO_KRB5_GC KRB5_PROMPT_TYPE_NEW_PASSWORD;
MACRO_KRB5_GC KRB5_PROMPT_TYPE_NEW_PASSWORD_AGAIN;
MACRO_KRB5_GC KRB5_PROMPT_TYPE_PASSWORD;
MACRO_KRB5_GC KRB5_PROMPT_TYPE_PREAUTH;
MACRO_KRB5_PVNO KRB5_PVNO;
MACRO_KRB5_BAD KRB5_RCACHE_BADVNO;
MACRO_KRB5_PRINC KRB5_RC_IO;
MACRO_KRB5_PRINC KRB5_RC_IO_EOF;
MACRO_KRB5_PRINC KRB5_RC_IO_IO;
MACRO_KRB5_PRINC KRB5_RC_IO_MALLOC;
MACRO_KRB5_PRINC KRB5_RC_IO_PERM;
MACRO_KRB5_PRINC KRB5_RC_IO_SPACE;
MACRO_KRB5_PRINC KRB5_RC_IO_UNKNOWN;
MACRO_KRB5_PRINC KRB5_RC_MALLOC;
MACRO_KRB5_PRINC KRB5_RC_NOIO;
MACRO_KRB5_PRINC KRB5_RC_PARSE;
MACRO_KRB5_PRINC KRB5_RC_REPLAY;
MACRO_KRB5_BAD KRB5_RC_REQUIRED;
MACRO_KRB5_PRINC KRB5_RC_TYPE_EXISTS;
MACRO_KRB5_PRINC KRB5_RC_TYPE_NOTFOUND;
MACRO_KRB5_PRINC KRB5_RC_UNKNOWN;
MACRO_KRB5_GC KRB5_REALM_BRANCH_CHAR;
MACRO_KRB5_REALM KRB5_REALM_CANT_RESOLVE;
MACRO_KRB5_PRINC KRB5_REALM_UNKNOWN;
MACRO_KRB5_GC KRB5_RECVAUTH_BADAUTHVERS;
MACRO_KRB5_GC KRB5_RECVAUTH_SKIP_VERSION;
MACRO_KRB5_PVNO KRB5_SAFE;
MACRO_KRB5_PVNO KRB5_SAM_MUST_PK_ENCRYPT_SAD;
MACRO_KRB5_PVNO KRB5_SAM_SEND_ENCRYPTED_SAD;
MACRO_KRB5_REALM KRB5_SAM_UNSUPPORTED;
MACRO_KRB5_PVNO KRB5_SAM_USE_SAD_AS_KEY;
MACRO_KRB5_BAD KRB5_SENDAUTH_BADAPPLVERS;
MACRO_KRB5_BAD KRB5_SENDAUTH_BADAUTHVERS;
MACRO_KRB5_BAD KRB5_SENDAUTH_BADRESPONSE;
MACRO_KRB5_BAD KRB5_SENDAUTH_REJECTED;
MACRO_KRB5_PRINC KRB5_SERVICE_UNKNOWN;
MACRO_KRB5_BAD KRB5_SNAME_UNSUPP_NAMETYPE;
MACRO_KRB5_PVNO KRB5_TC_MATCH_2ND_TKT;
MACRO_KRB5_PVNO KRB5_TC_MATCH_AUTHDATA;
MACRO_KRB5_PVNO KRB5_TC_MATCH_FLAGS;
MACRO_KRB5_PVNO KRB5_TC_MATCH_FLAGS_EXACT;
MACRO_KRB5_PVNO KRB5_TC_MATCH_IS_SKEY;
MACRO_KRB5_PVNO KRB5_TC_MATCH_KTYPE;
MACRO_KRB5_PVNO KRB5_TC_MATCH_SRV_NAMEONLY;
MACRO_KRB5_PVNO KRB5_TC_MATCH_TIMES;
MACRO_KRB5_PVNO KRB5_TC_MATCH_TIMES_EXACT;
MACRO_KRB5_PVNO KRB5_TC_OPENCLOSE;
MACRO_KRB5_PVNO KRB5_TC_SUPPORTED_KTYPES;
MACRO_KRB5_GC KRB5_TGS_NAME_SIZE;
MACRO_KRB5_PVNO KRB5_TGS_REP;
MACRO_KRB5_PVNO KRB5_TGS_REQ;
MACRO_KRB5_REALM KRB5_TKT_NOT_FORWARDABLE;
MACRO_KRB5_PRINC KRB5_TRANS_BADFORMAT;
MACRO_KRB5_PRINC KRB5_TRANS_CANTOPEN;
MACRO_KRB5_GC KRB5_VERIFY_INIT_CREDS_OPT_AP_REQ_NOFAIL;
MACRO_KRB5_PRINC KRB5_WRONG_ETYPE;
MACRO_KRBET KRBET_AD_NOTGT;
MACRO_KRBET KRBET_GC_NOTKT;
MACRO_KRBET KRBET_GC_TKFIL;
MACRO_KRBET KRBET_GT_PW_BADPW;
MACRO_KRBET KRBET_GT_PW_KDCERR;
MACRO_KRBET KRBET_GT_PW_NULL;
MACRO_KRBET KRBET_GT_PW_NULLTKT;
MACRO_KRBET KRBET_GT_PW_PROT;
MACRO_KRBET KRBET_INTK_BADPW;
MACRO_KRBET KRBET_INTK_ERR;
MACRO_KRBET KRBET_INTK_PROT;
MACRO_KRBET KRBET_INTK_W_NOTALL;
MACRO_KRBET KRBET_KDC_AUTH_EXP;
MACRO_KRBET KRBET_KDC_BYTE_ORDER;
MACRO_KRBET KRBET_KDC_GEN_ERR;
MACRO_KRBET KRBET_KDC_NAME_EXP;
MACRO_KRBET KRBET_KDC_NULL_KEY;
MACRO_KRBET KRBET_KDC_PKT_VER;
MACRO_KRBET KRBET_KDC_PR_N_UNIQUE;
MACRO_KRBET KRBET_KDC_PR_UNKNOWN;
MACRO_KRBET KRBET_KDC_P_MKEY_VER;
MACRO_KRBET KRBET_KDC_SERVICE_EXP;
MACRO_KRBET KRBET_KDC_S_MKEY_VER;
MACRO_KRBET KRBET_KNAME_FMT;
MACRO_KRBET KRBET_KSUCCESS;
MACRO_KRBET KRBET_MAX_KRB_ERR_TXT;
MACRO_KRBET KRBET_MK_AP_TGTEXP;
MACRO_KRBET KRBET_NO_TKT_FIL;
MACRO_KRBET KRBET_RD_AP_BADD;
MACRO_KRBET KRBET_RD_AP_EXP;
MACRO_KRBET KRBET_RD_AP_INCON;
MACRO_KRBET KRBET_RD_AP_MODIFIED;
MACRO_KRBET KRBET_RD_AP_MSG_TYPE;
MACRO_KRBET KRBET_RD_AP_NOT_US;
MACRO_KRBET KRBET_RD_AP_NYV;
MACRO_KRBET KRBET_RD_AP_ORDER;
MACRO_KRBET KRBET_RD_AP_REPEAT;
MACRO_KRBET KRBET_RD_AP_TIME;
MACRO_KRBET KRBET_RD_AP_UNAUTHOR;
MACRO_KRBET KRBET_RD_AP_UNDEC;
MACRO_KRBET KRBET_RD_AP_VERSION;
MACRO_KRBET KRBET_SKDC_CANT;
MACRO_KRBET KRBET_SKDC_RETRY;
MACRO_KRBET KRBET_TKT_FIL_ACC;
MACRO_KRBET KRBET_TKT_FIL_FMT;
MACRO_KRBET KRBET_TKT_FIL_INI;
MACRO_KRBET KRBET_TKT_FIL_LCK;
MACRO_KRB KRB_NEVERDATE;
MACRO_KRB_SENDAUTH KRB_SENDAUTH_VLEN;
MACRO_KSUCCESS KSUCCESS;
MACRO_KSYSV KSYSV_SHMALL;
MACRO_KSYSV KSYSV_SHMMAX;
MACRO_KSYSV KSYSV_SHMMIN;
MACRO_KSYSV KSYSV_SHMMNI;
MACRO_KSYSV KSYSV_SHMSEG;
MACRO_KTRFAC KTRFAC_ACTIVE;
MACRO_KTRFAC KTRFAC_CSW;
MACRO_KTRFAC KTRFAC_GENIO;
MACRO_KTRFAC KTRFAC_INHERIT;
MACRO_KTRFAC KTRFAC_MASK;
MACRO_KTRFAC KTRFAC_NAMEI;
MACRO_KTRFAC KTRFAC_PSIG;
MACRO_KTRFAC KTRFAC_ROOT;
MACRO_KTRFAC KTRFAC_SYSCALL;
MACRO_KTRFAC KTRFAC_SYSRET;
MACRO_KTRFAC KTRFAC_USER;
MACRO_KTRFLAG KTRFLAG_DESCEND;
MACRO_KTROP KTROP_CLEAR;
MACRO_KTROP KTROP_CLEARFILE;
MACRO_KTROP KTROP_SET;
MACRO_KTR KTR_CSW;
MACRO_KTR KTR_GENIO;
MACRO_KTR KTR_NAMEI;
MACRO_KTR KTR_PSIG;
MACRO_KTR KTR_SYSCALL;
MACRO_KTR KTR_SYSRET;
MACRO_KTR KTR_USER;
MACRO_KTR KTR_USER_MAXLEN;
MACRO_KV5M KV5M_ADDRESS;
MACRO_KV5M KV5M_ALT_METHOD;
MACRO_KV5M KV5M_AP_REP;
MACRO_KV5M KV5M_AP_REP_ENC_PART;
MACRO_KV5M KV5M_AP_REQ;
MACRO_KV5M KV5M_AUTHDATA;
MACRO_KV5M KV5M_AUTHENTICATOR;
MACRO_KV5M KV5M_AUTH_CONTEXT;
MACRO_KV5M KV5M_CCACHE;
MACRO_KV5M KV5M_CHECKSUM;
MACRO_KV5M KV5M_CHECKSUM_ENTRY;
MACRO_KV5M KV5M_CONTEXT;
MACRO_KV5M KV5M_CRED;
MACRO_KV5M KV5M_CREDS;
MACRO_KV5M KV5M_CRED_ENC_PART;
MACRO_KV5M KV5M_CRED_INFO;
MACRO_KV5M KV5M_CRYPTOSYSTEM_ENTRY;
MACRO_KV5M KV5M_CS_TABLE_ENTRY;
MACRO_KV5M KV5M_DATA;
MACRO_KV5M KV5M_DB_CONTEXT;
MACRO_KV5M KV5M_ENCRYPT_BLOCK;
MACRO_KV5M KV5M_ENC_DATA;
MACRO_KV5M KV5M_ENC_KDC_REP_PART;
MACRO_KV5M KV5M_ENC_SAM_RESPONSE_ENC;
MACRO_KV5M KV5M_ENC_TKT_PART;
MACRO_KV5M KV5M_ERROR;
MACRO_KV5M KV5M_ETYPE_INFO_ENTRY;
MACRO_KV5M KV5M_GSS_OID;
MACRO_KV5M KV5M_GSS_QUEUE;
MACRO_KV5M KV5M_KDC_REP;
MACRO_KV5M KV5M_KDC_REQ;
MACRO_KV5M KV5M_KEYBLOCK;
MACRO_KV5M KV5M_KEYTAB;
MACRO_KV5M KV5M_KEYTAB_ENTRY;
MACRO_KV5M KV5M_LAST_REQ_ENTRY;
MACRO_KV5M KV5M_NONE;
MACRO_KV5M KV5M_OS_CONTEXT;
MACRO_KV5M KV5M_PASSWD_PHRASE_ELEMENT;
MACRO_KV5M KV5M_PA_DATA;
MACRO_KV5M KV5M_PREAUTH_OPS;
MACRO_KV5M KV5M_PREDICTED_SAM_RESPONSE;
MACRO_KV5M KV5M_PRINCIPAL;
MACRO_KV5M KV5M_PRIV;
MACRO_KV5M KV5M_PRIV_ENC_PART;
MACRO_KV5M KV5M_PWD_DATA;
MACRO_KV5M KV5M_RCACHE;
MACRO_KV5M KV5M_RESPONSE;
MACRO_KV5M KV5M_SAFE;
MACRO_KV5M KV5M_SAM_CHALLENGE;
MACRO_KV5M KV5M_SAM_KEY;
MACRO_KV5M KV5M_SAM_RESPONSE;
MACRO_KV5M KV5M_TICKET;
MACRO_KV5M KV5M_TKT_AUTHENT;
MACRO_KV5M KV5M_TRANSITED;
MACRO_ALLDELAY L001000;
MACRO_LABELOFFSET LABELOFFSET;
MACRO_LABELSECTOR LABELSECTOR;
MACRO_LAP LAP_IOC_ADD_ROUTE;
MACRO_LAP LAP_IOC_GET_ROUTE;
MACRO_LAP LAP_IOC_GET_ZONE;
MACRO_LAP LAP_IOC_SNMP_GET_AARP;
MACRO_LAP LAP_IOC_SNMP_GET_CFG;
MACRO_LAP LAP_IOC_SNMP_GET_DDP;
MACRO_LAP LAP_IOC_SNMP_GET_NBP;
MACRO_LAP LAP_IOC_SNMP_GET_PORTS;
MACRO_LAP LAP_IOC_SNMP_GET_RTMP;
MACRO_LAP LAP_IOC_SNMP_GET_ZIP;
MACRO_LBER LBER_BIG_TAG_MASK;
MACRO_LBER LBER_BITSTRING;
MACRO_LBER LBER_BOOLEAN;
MACRO_LBER LBER_CLASS_APPLICATION;
MACRO_LBER LBER_CLASS_CONTEXT;
MACRO_LBER LBER_CLASS_MASK;
MACRO_LBER LBER_CLASS_PRIVATE;
MACRO_LBER LBER_CLASS_UNIVERSAL;
MACRO_LBER LBER_CONSTRUCTED;
MACRO_LBER LBER_DEFAULT;
MACRO_LBER LBER_ENCODING_MASK;
MACRO_LBER LBER_ENUMERATED;
MACRO_LBER LBER_ERROR;
MACRO_LBER LBER_ERROR_MEMORY;
MACRO_LBER LBER_ERROR_NONE;
MACRO_LBER LBER_ERROR_PARAM;
MACRO_LBER LBER_INTEGER;
MACRO_LBER LBER_MORE_TAG_MASK;
MACRO_LBER LBER_NULL;
MACRO_LBER LBER_OCTETSTRING;
MACRO_LBER LBER_OPT_BER_BYTES_TO_WRITE;
MACRO_LBER LBER_OPT_BER_DEBUG;
MACRO_LBER LBER_OPT_BER_OPTIONS;
MACRO_LBER LBER_OPT_BER_REMAINING_BYTES;
MACRO_LBER LBER_OPT_BER_TOTAL_BYTES;
MACRO_LBER LBER_OPT_BYTES_TO_WRITE;
MACRO_LBER LBER_OPT_DEBUG_LEVEL;
MACRO_LBER LBER_OPT_ERROR;
MACRO_LBER LBER_OPT_ERROR_FN;
MACRO_LBER LBER_OPT_LOG_PRINT_FILE;
MACRO_LBER LBER_OPT_LOG_PRINT_FN;
MACRO_LBER LBER_OPT_LOG_PROC;
MACRO_LBER LBER_OPT_MEMORY_FNS;
MACRO_LBER LBER_OPT_MEMORY_INUSE;
MACRO_LBER LBER_OPT_OFF;
MACRO_LBER LBER_OPT_ON;
MACRO_LBER LBER_OPT_REMAINING_BYTES;
MACRO_LBER LBER_OPT_SOCKBUF_DEBUG;
MACRO_LBER LBER_OPT_SOCKBUF_DESC;
MACRO_LBER LBER_OPT_SOCKBUF_OPTIONS;
MACRO_LBER LBER_OPT_SUCCESS;
MACRO_LBER LBER_OPT_TOTAL_BYTES;
MACRO_LBER LBER_PRIMITIVE;
MACRO_LBER LBER_SBIOD_LEVEL_APPLICATION;
MACRO_LBER LBER_SBIOD_LEVEL_PROVIDER;
MACRO_LBER LBER_SBIOD_LEVEL_TRANSPORT;
MACRO_LBER LBER_SB_OPT_DATA_READY;
MACRO_LBER LBER_SB_OPT_DRAIN;
MACRO_LBER LBER_SB_OPT_GET_FD;
MACRO_LBER LBER_SB_OPT_GET_MAX_INCOMING;
MACRO_LBER LBER_SB_OPT_GET_SSL;
MACRO_LBER LBER_SB_OPT_HAS_IO;
MACRO_LBER LBER_SB_OPT_NEEDS_READ;
MACRO_LBER LBER_SB_OPT_NEEDS_WRITE;
MACRO_LBER LBER_SB_OPT_OPT_MAX;
MACRO_LBER LBER_SB_OPT_SET_FD;
MACRO_LBER LBER_SB_OPT_SET_MAX_INCOMING;
MACRO_LBER LBER_SB_OPT_SET_NONBLOCK;
MACRO_LBER LBER_SB_OPT_SET_READAHEAD;
MACRO_LBER LBER_SEQUENCE;
MACRO_LBER LBER_SET;
MACRO_LBER LBER_USE_DER;
MACRO_TANDEM LCASE;
MACRO_LCRTBS LCRTBS;
MACRO_LCRTBS LCRTERA;
MACRO_LCRTBS LCRTKIL;
MACRO_LCRTBS LCTLECH;
MACRO_LC LC_ALL;
MACRO_LC LC_COLLATE;
MACRO_LC LC_CTYPE;
MACRO_LC LC_MESSAGES;
MACRO_LC LC_MONETARY;
MACRO_LC LC_NUMERIC;
MACRO_LC LC_TIME;
MACRO_LDAPS LDAPS_PORT;
MACRO_LDAP_OPT LDAP_ADMINLIMIT_EXCEEDED;
MACRO_LDAP_OPT LDAP_AFFECTS_MULTIPLE_DSAS;
MACRO_LDAP_OPT LDAP_ALIAS_DEREF_PROBLEM;
MACRO_LDAP_OPT LDAP_ALIAS_PROBLEM;
MACRO_LDAP_OPT LDAP_ALREADY_EXISTS;
MACRO_LDAP LDAP_API_FEATURE_SERVER_SIDE_SORT;
MACRO_LDAP LDAP_API_FEATURE_VIRTUAL_LIST_VIEW;
MACRO_LDAP LDAP_API_FEATURE_X_OPENLDAP;
MACRO_LDAP LDAP_API_FEATURE_X_OPENLDAP_THREAD_SAFE;
MACRO_LDAP_OPT LDAP_API_INFO_VERSION;
MACRO_LDAP LDAP_API_VERSION;
MACRO_LDAP_OPT LDAP_AUTH_KRBV4;
MACRO_LDAP_OPT LDAP_AUTH_KRBV41;
MACRO_LDAP_OPT LDAP_AUTH_KRBV42;
MACRO_LDAP_OPT LDAP_AUTH_METHOD_NOT_SUPPORTED;
MACRO_LDAP_OPT LDAP_AUTH_NONE;
MACRO_LDAP_OPT LDAP_AUTH_SASL;
MACRO_LDAP_OPT LDAP_AUTH_SIMPLE;
MACRO_LDAP_OPT LDAP_AUTH_UNKNOWN;
MACRO_LDAP_OPT LDAP_AVA_BINARY;
MACRO_LDAP_OPT LDAP_AVA_NONPRINTABLE;
MACRO_LDAP_OPT LDAP_AVA_STRING;
MACRO_LDAP_OPT LDAP_BUSY;
MACRO_LDAP_OPT LDAP_CLIENT_LOOP;
MACRO_LDAP_OPT LDAP_COMPARE_FALSE;
MACRO_LDAP_OPT LDAP_COMPARE_TRUE;
MACRO_LDAP_OPT LDAP_CONFIDENTIALITY_REQUIRED;
MACRO_LDAP_OPT LDAP_CONNECT_ERROR;
MACRO_LDAP_OPT LDAP_CONSTRAINT_VIOLATION;
MACRO_LDAP_OPT LDAP_CONTROL_NOT_FOUND;
MACRO_LDAP_OPT LDAP_DECODING_ERROR;
MACRO_LDAP_OPT LDAP_DEREF_ALWAYS;
MACRO_LDAP_OPT LDAP_DEREF_FINDING;
MACRO_LDAP_OPT LDAP_DEREF_NEVER;
MACRO_LDAP_OPT LDAP_DEREF_SEARCHING;
MACRO_LDAP_OPT LDAP_DN_FORMAT_AD_CANONICAL;
MACRO_LDAP_OPT LDAP_DN_FORMAT_DCE;
MACRO_LDAP_OPT LDAP_DN_FORMAT_LBER;
MACRO_LDAP_OPT LDAP_DN_FORMAT_LDAP;
MACRO_LDAP_OPT LDAP_DN_FORMAT_LDAPV2;
MACRO_LDAP_OPT LDAP_DN_FORMAT_LDAPV3;
MACRO_LDAP_OPT LDAP_DN_FORMAT_MASK;
MACRO_LDAP_OPT LDAP_DN_FORMAT_UFN;
MACRO_LDAP_OPT LDAP_DN_PEDANTIC;
MACRO_LDAP_OPT LDAP_DN_PRETTY;
MACRO_LDAP_OPT LDAP_DN_P_NOLEADTRAILSPACES;
MACRO_LDAP_OPT LDAP_DN_P_NOSPACEAFTERRDN;
MACRO_LDAP_OPT LDAP_DN_SKIP;
MACRO_LDAP_OPT LDAP_ENCODING_ERROR;
MACRO_LDAP_OPT LDAP_FEATURE_INFO_VERSION;
MACRO_LDAP_OPT LDAP_FILTER_AND;
MACRO_LDAP_OPT LDAP_FILTER_APPROX;
MACRO_LDAP_OPT LDAP_FILTER_EQUALITY;
MACRO_LDAP_OPT LDAP_FILTER_ERROR;
MACRO_LDAP_OPT LDAP_FILTER_EXT;
MACRO_LDAP_OPT LDAP_FILTER_EXT_DNATTRS;
MACRO_LDAP_OPT LDAP_FILTER_EXT_OID;
MACRO_LDAP_OPT LDAP_FILTER_EXT_TYPE;
MACRO_LDAP_OPT LDAP_FILTER_EXT_VALUE;
MACRO_LDAP_OPT LDAP_FILTER_GE;
MACRO_LDAP_OPT LDAP_FILTER_LE;
MACRO_LDAP_OPT LDAP_FILTER_NOT;
MACRO_LDAP_OPT LDAP_FILTER_OR;
MACRO_LDAP_OPT LDAP_FILTER_PRESENT;
MACRO_LDAP_OPT LDAP_FILTER_SUBSTRINGS;
MACRO_LDAP_OPT LDAP_FILT_MAXSIZ;
MACRO_LDAP_OPT LDAP_INAPPROPRIATE_AUTH;
MACRO_LDAP_OPT LDAP_INAPPROPRIATE_MATCHING;
MACRO_LDAP_OPT LDAP_INSUFFICIENT_ACCESS;
MACRO_LDAP_OPT LDAP_INVALID_CREDENTIALS;
MACRO_LDAP_OPT LDAP_INVALID_DN_SYNTAX;
MACRO_LDAP_OPT LDAP_INVALID_SYNTAX;
MACRO_LDAP_OPT LDAP_IS_LEAF;
MACRO_LDAP_OPT LDAP_LOCAL_ERROR;
MACRO_LDAP_OPT LDAP_LOOP_DETECT;
MACRO_LDAP_OPT LDAP_MOD_ADD;
MACRO_LDAP_OPT LDAP_MOD_BVALUES;
MACRO_LDAP_OPT LDAP_MOD_DELETE;
MACRO_LDAP_OPT LDAP_MOD_REPLACE;
MACRO_LDAP_OPT LDAP_MORE_RESULTS_TO_RETURN;
MACRO_LDAP_OPT LDAP_MSG_ALL;
MACRO_LDAP_OPT LDAP_MSG_ONE;
MACRO_LDAP_OPT LDAP_MSG_RECEIVED;
MACRO_LDAP_OPT LDAP_NAMING_VIOLATION;
MACRO_LDAP_OPT LDAP_NOT_ALLOWED_ON_NONLEAF;
MACRO_LDAP_OPT LDAP_NOT_ALLOWED_ON_RDN;
MACRO_LDAP_OPT LDAP_NOT_SUPPORTED;
MACRO_LDAP_OPT LDAP_NO_LIMIT;
MACRO_LDAP_OPT LDAP_NO_MEMORY;
MACRO_LDAP_OPT LDAP_NO_OBJECT_CLASS_MODS;
MACRO_LDAP_OPT LDAP_NO_RESULTS_RETURNED;
MACRO_LDAP_OPT LDAP_NO_SUCH_ATTRIBUTE;
MACRO_LDAP_OPT LDAP_NO_SUCH_OBJECT;
MACRO_LDAP_OPT LDAP_OBJECT_CLASS_VIOLATION;
MACRO_LDAP_OPT LDAP_OPERATIONS_ERROR;
MACRO_LDAP_OPT LDAP_OPT_API_FEATURE_INFO;
MACRO_LDAP_OPT LDAP_OPT_API_INFO;
MACRO_LDAP_OPT LDAP_OPT_CLIENT_CONTROLS;
MACRO_LDAP_OPT LDAP_OPT_DEBUG_LEVEL;
MACRO_LDAP_OPT LDAP_OPT_DEREF;
MACRO_LDAP_OPT LDAP_OPT_DESC;
MACRO_LDAP_OPT LDAP_OPT_ERROR;
MACRO_LDAP_OPT LDAP_OPT_ERROR_NUMBER;
MACRO_LDAP_OPT LDAP_OPT_ERROR_STRING;
MACRO_LDAP_OPT LDAP_OPT_HOST_NAME;
MACRO_LDAP_OPT LDAP_OPT_MATCHED_DN;
MACRO_LDAP_OPT LDAP_OPT_NETWORK_TIMEOUT;
MACRO_LDAP_OPT LDAP_OPT_OFF;
MACRO_LDAP_OPT LDAP_OPT_ON;
MACRO_LDAP_OPT LDAP_OPT_PRIVATE_EXTENSION_BASE;
MACRO_LDAP_OPT LDAP_OPT_PROTOCOL_VERSION;
MACRO_LDAP_OPT LDAP_OPT_REFERRALS;
MACRO_LDAP_OPT LDAP_OPT_REFHOPLIMIT;
MACRO_LDAP_OPT LDAP_OPT_RESTART;
MACRO_LDAP_OPT LDAP_OPT_SERVER_CONTROLS;
MACRO_LDAP_OPT LDAP_OPT_SIZELIMIT;
MACRO_LDAP_OPT LDAP_OPT_SUCCESS;
MACRO_LDAP_OPT LDAP_OPT_TIMELIMIT;
MACRO_LDAP_OPT LDAP_OPT_TIMEOUT;
MACRO_LDAP_OPT LDAP_OPT_URI;
MACRO_LDAP_OPT LDAP_OPT_X_SASL_AUTHCID;
MACRO_LDAP_OPT LDAP_OPT_X_SASL_AUTHZID;
MACRO_LDAP_OPT LDAP_OPT_X_SASL_MAXBUFSIZE;
MACRO_LDAP_OPT LDAP_OPT_X_SASL_MECH;
MACRO_LDAP_OPT LDAP_OPT_X_SASL_REALM;
MACRO_LDAP_OPT LDAP_OPT_X_SASL_SECPROPS;
MACRO_LDAP_OPT LDAP_OPT_X_SASL_SSF;
MACRO_LDAP_OPT LDAP_OPT_X_SASL_SSF_EXTERNAL;
MACRO_LDAP_OPT LDAP_OPT_X_SASL_SSF_MAX;
MACRO_LDAP_OPT LDAP_OPT_X_SASL_SSF_MIN;
MACRO_LDAP_OPT LDAP_OPT_X_TLS;
MACRO_LDAP_OPT LDAP_OPT_X_TLS_ALLOW;
MACRO_LDAP_OPT LDAP_OPT_X_TLS_CACERTDIR;
MACRO_LDAP_OPT LDAP_OPT_X_TLS_CACERTFILE;
MACRO_LDAP_OPT LDAP_OPT_X_TLS_CERTFILE;
MACRO_LDAP_OPT LDAP_OPT_X_TLS_CIPHER_SUITE;
MACRO_LDAP_OPT LDAP_OPT_X_TLS_CTX;
MACRO_LDAP_OPT LDAP_OPT_X_TLS_DEMAND;
MACRO_LDAP_OPT LDAP_OPT_X_TLS_HARD;
MACRO_LDAP_OPT LDAP_OPT_X_TLS_KEYFILE;
MACRO_LDAP_OPT LDAP_OPT_X_TLS_NEVER;
MACRO_LDAP_OPT LDAP_OPT_X_TLS_RANDOM_FILE;
MACRO_LDAP_OPT LDAP_OPT_X_TLS_REQUIRE_CERT;
MACRO_LDAP_OPT LDAP_OPT_X_TLS_TRY;
MACRO_LDAP_OPT LDAP_OTHER;
MACRO_LDAP_OPT LDAP_PARAM_ERROR;
MACRO_LDAP_OPT LDAP_PARTIAL_RESULTS;
MACRO_LDAP LDAP_PORT;
MACRO_LDAP_OPT LDAP_PROTOCOL_ERROR;
MACRO_LDAP_OPT LDAP_REFERRAL;
MACRO_LDAP_OPT LDAP_REFERRAL_LIMIT_EXCEEDED;
MACRO_LDAP_OPT LDAP_REQ_ABANDON;
MACRO_LDAP_OPT LDAP_REQ_ADD;
MACRO_LDAP_OPT LDAP_REQ_BIND;
MACRO_LDAP_OPT LDAP_REQ_COMPARE;
MACRO_LDAP_OPT LDAP_REQ_DELETE;
MACRO_LDAP_OPT LDAP_REQ_EXTENDED;
MACRO_LDAP_OPT LDAP_REQ_MODDN;
MACRO_LDAP_OPT LDAP_REQ_MODIFY;
MACRO_LDAP_OPT LDAP_REQ_MODRDN;
MACRO_LDAP_OPT LDAP_REQ_RENAME;
MACRO_LDAP_OPT LDAP_REQ_SEARCH;
MACRO_LDAP_OPT LDAP_REQ_UNBIND;
MACRO_LDAP_OPT LDAP_RESULTS_TOO_LARGE;
MACRO_LDAP_OPT LDAP_RES_ADD;
MACRO_LDAP_OPT LDAP_RES_ANY;
MACRO_LDAP_OPT LDAP_RES_BIND;
MACRO_LDAP_OPT LDAP_RES_COMPARE;
MACRO_LDAP_OPT LDAP_RES_DELETE;
MACRO_LDAP_OPT LDAP_RES_EXTENDED;
MACRO_LDAP_OPT LDAP_RES_EXTENDED_PARTIAL;
MACRO_LDAP_OPT LDAP_RES_MODDN;
MACRO_LDAP_OPT LDAP_RES_MODIFY;
MACRO_LDAP_OPT LDAP_RES_MODRDN;
MACRO_LDAP_OPT LDAP_RES_RENAME;
MACRO_LDAP_OPT LDAP_RES_SEARCH_ENTRY;
MACRO_LDAP_OPT LDAP_RES_SEARCH_REFERENCE;
MACRO_LDAP_OPT LDAP_RES_SEARCH_RESULT;
MACRO_LDAP_OPT LDAP_RES_UNSOLICITED;
MACRO_LDAP_OPT LDAP_SASL_AUTOMATIC;
MACRO_LDAP_OPT LDAP_SASL_BIND_IN_PROGRESS;
MACRO_LDAP_OPT LDAP_SASL_INTERACTIVE;
MACRO_LDAP_OPT LDAP_SASL_QUIET;
MACRO_LDAP_OPT LDAP_SASL_SIMPLE;
MACRO_LDAP_SCHERR LDAP_SCHEMA_ABSTRACT;
MACRO_LDAP_SCHERR LDAP_SCHEMA_ALLOW_ALL;
MACRO_LDAP_SCHERR LDAP_SCHEMA_ALLOW_DESCR;
MACRO_LDAP_SCHERR LDAP_SCHEMA_ALLOW_DESCR_PREFIX;
MACRO_LDAP_SCHERR LDAP_SCHEMA_ALLOW_NONE;
MACRO_LDAP_SCHERR LDAP_SCHEMA_ALLOW_NO_OID;
MACRO_LDAP_SCHERR LDAP_SCHEMA_ALLOW_OID_MACRO;
MACRO_LDAP_SCHERR LDAP_SCHEMA_ALLOW_QUOTED;
MACRO_LDAP_SCHERR LDAP_SCHEMA_AUXILIARY;
MACRO_LDAP_SCHERR LDAP_SCHEMA_DIRECTORY_OPERATION;
MACRO_LDAP_SCHERR LDAP_SCHEMA_DISTRIBUTED_OPERATION;
MACRO_LDAP_SCHERR LDAP_SCHEMA_DSA_OPERATION;
MACRO_LDAP_SCHERR LDAP_SCHEMA_NO;
MACRO_LDAP_SCHERR LDAP_SCHEMA_SKIP;
MACRO_LDAP_SCHERR LDAP_SCHEMA_STRUCTURAL;
MACRO_LDAP_SCHERR LDAP_SCHEMA_USER_APPLICATIONS;
MACRO_LDAP_SCHERR LDAP_SCHEMA_YES;
MACRO_LDAP_SCHERR LDAP_SCHERR_BADDESC;
MACRO_LDAP_SCHERR LDAP_SCHERR_BADNAME;
MACRO_LDAP_SCHERR LDAP_SCHERR_BADSUP;
MACRO_LDAP_SCHERR LDAP_SCHERR_DUPOPT;
MACRO_LDAP_SCHERR LDAP_SCHERR_EMPTY;
MACRO_LDAP_SCHERR LDAP_SCHERR_NODIGIT;
MACRO_LDAP_SCHERR LDAP_SCHERR_NOLEFTPAREN;
MACRO_LDAP_SCHERR LDAP_SCHERR_NORIGHTPAREN;
MACRO_LDAP_SCHERR LDAP_SCHERR_OUTOFMEM;
MACRO_LDAP_SCHERR LDAP_SCHERR_UNEXPTOKEN;
MACRO_LDAP_OPT LDAP_SCOPE_BASE;
MACRO_LDAP_OPT LDAP_SCOPE_DEFAULT;
MACRO_LDAP_OPT LDAP_SCOPE_ONELEVEL;
MACRO_LDAP_OPT LDAP_SCOPE_SUBTREE;
MACRO_LDAP_OPT LDAP_SERVER_DOWN;
MACRO_LDAP_OPT LDAP_SIZELIMIT_EXCEEDED;
MACRO_LDAP_OPT LDAP_STRONG_AUTH_NOT_SUPPORTED;
MACRO_LDAP_OPT LDAP_STRONG_AUTH_REQUIRED;
MACRO_LDAP_OPT LDAP_SUBSTRING_ANY;
MACRO_LDAP_OPT LDAP_SUBSTRING_FINAL;
MACRO_LDAP_OPT LDAP_SUBSTRING_INITIAL;
MACRO_LDAP_OPT LDAP_SUCCESS;
MACRO_LDAP_OPT LDAP_TAG_CONTROLS;
MACRO_LDAP_OPT LDAP_TAG_EXOP_MODIFY_PASSWD_GEN;
MACRO_LDAP_OPT LDAP_TAG_EXOP_MODIFY_PASSWD_ID;
MACRO_LDAP_OPT LDAP_TAG_EXOP_MODIFY_PASSWD_NEW;
MACRO_LDAP_OPT LDAP_TAG_EXOP_MODIFY_PASSWD_OLD;
MACRO_LDAP_OPT LDAP_TAG_EXOP_REQ_OID;
MACRO_LDAP_OPT LDAP_TAG_EXOP_REQ_VALUE;
MACRO_LDAP_OPT LDAP_TAG_EXOP_RES_OID;
MACRO_LDAP_OPT LDAP_TAG_EXOP_RES_VALUE;
MACRO_LDAP_OPT LDAP_TAG_LDAPCRED;
MACRO_LDAP_OPT LDAP_TAG_LDAPDN;
MACRO_LDAP_OPT LDAP_TAG_MESSAGE;
MACRO_LDAP_OPT LDAP_TAG_MSGID;
MACRO_LDAP_OPT LDAP_TAG_NEWSUPERIOR;
MACRO_LDAP_OPT LDAP_TAG_REFERRAL;
MACRO_LDAP_OPT LDAP_TAG_SASL_RES_CREDS;
MACRO_LDAP_OPT LDAP_TIMELIMIT_EXCEEDED;
MACRO_LDAP_OPT LDAP_TIMEOUT;
MACRO_LDAP_OPT LDAP_TYPE_OR_VALUE_EXISTS;
MACRO_LDAP_SCHERR LDAP_UCS4_INVALID;
MACRO_LDAP_OPT LDAP_UNAVAILABLE;
MACRO_LDAP_OPT LDAP_UNAVAILABLE_CRITICAL_EXTENSION;
MACRO_LDAP_OPT LDAP_UNDEFINED_TYPE;
MACRO_LDAP_OPT LDAP_UNWILLING_TO_PERFORM;
MACRO_LDAP_OPT LDAP_URL_ERR_BADATTRS;
MACRO_LDAP_OPT LDAP_URL_ERR_BADENCLOSURE;
MACRO_LDAP_OPT LDAP_URL_ERR_BADEXTS;
MACRO_LDAP_OPT LDAP_URL_ERR_BADFILTER;
MACRO_LDAP_OPT LDAP_URL_ERR_BADHOST;
MACRO_LDAP_OPT LDAP_URL_ERR_BADSCHEME;
MACRO_LDAP_OPT LDAP_URL_ERR_BADSCOPE;
MACRO_LDAP_OPT LDAP_URL_ERR_BADURL;
MACRO_LDAP_OPT LDAP_URL_ERR_MEM;
MACRO_LDAP_OPT LDAP_URL_ERR_PARAM;
MACRO_LDAP_OPT LDAP_URL_SUCCESS;
MACRO_LDAP_OPT LDAP_USER_CANCELLED;
MACRO_LDAP LDAP_VENDOR_VERSION;
MACRO_LDAP LDAP_VENDOR_VERSION_MAJOR;
MACRO_LDAP LDAP_VENDOR_VERSION_MINOR;
MACRO_LDAP LDAP_VERSION;
MACRO_LDAP LDAP_VERSION1;
MACRO_LDAP LDAP_VERSION2;
MACRO_LDAP LDAP_VERSION3;
MACRO_LDAP LDAP_VERSION_MAX;
MACRO_LDAP LDAP_VERSION_MIN;
MACRO_LCRTBS LDECCTQ;
MACRO_LEAVE LEAVE_INVITE;
MACRO_TASK_NULL LEDGER_NULL;
MACRO_LEDGER LEDGER_N_ITEMS;
MACRO_LEDGER LEDGER_UNLIMITED;
MACRO_LFLOW LFLOW_OFF;
MACRO_LFLOW LFLOW_ON;
MACRO_LFLOW LFLOW_RESTART_ANY;
MACRO_LFLOW LFLOW_RESTART_XON;
MACRO_LCRTBS LFLUSHO;
MACRO_LIBCURL LIBCURL_VERSION_NUM;
MACRO_LIBEDIT LIBEDIT_MAJOR;
MACRO_LIBEDIT LIBEDIT_MINOR;
MACRO_LIM LIM_CORE;
MACRO_LIM LIM_CPU;
MACRO_LIM LIM_DATA;
MACRO_LIM LIM_FSIZE;
MACRO_LIM LIM_MAXRSS;
MACRO_LIM LIM_NORAISE;
MACRO_LIM LIM_STACK;
MACRO_COLL LINE_MAX;
MACRO_LONG_MAX LINK_MAX;
MACRO_ALLDELAY LITOUT;
MACRO_ENDIAN LITTLE_ENDIAN;
MACRO_LK LK_CANRECURSE;
MACRO_LK LK_DOWNGRADE;
MACRO_LK LK_DRAIN;
MACRO_LK LK_DRAINED;
MACRO_LK LK_DRAINING;
MACRO_LK LK_EXCLUPGRADE;
MACRO_LK LK_EXCLUSIVE;
MACRO_LK LK_EXTFLG_MASK;
MACRO_LK LK_HAVE_EXCL;
MACRO_LK LK_INTERLOCK;
MACRO_LK LK_KERNPROC;
MACRO_LK LK_NOPROC;
MACRO_LK LK_NOWAIT;
MACRO_LK LK_REENABLE;
MACRO_LK LK_RELEASE;
MACRO_LK LK_RETRY;
MACRO_LK LK_SHARED;
MACRO_LK LK_SLEEPFAIL;
MACRO_LK LK_TYPE_MASK;
MACRO_LK LK_UPGRADE;
MACRO_LK LK_WAITDRAIN;
MACRO_LK LK_WANT_EXCL;
MACRO_LK LK_WANT_UPGRADE;
MACRO_LLAPCOLLISIONS LLAPCOLLISIONS;
MACRO_LLAPDEFERS LLAPDEFERS;
MACRO_LLAPENTRY LLAPENTRY;
MACRO_LLAPFCSERRORS LLAPFCSERRORS;
MACRO_LLAPIFINDEX LLAPIFINDEX;
MACRO_LLAPINERRORS LLAPINERRORS;
MACRO_LLAPINLENGTHERRORS LLAPINLENGTHERRORS;
MACRO_LLAPINNOHANDLERS LLAPINNOHANDLERS;
MACRO_LLAPINPKTS LLAPINPKTS;
MACRO_LLAPNODATAERRORS LLAPNODATAERRORS;
MACRO_LLAPOUTPKTS LLAPOUTPKTS;
MACRO_LLAPRANDOMCTSERRORS LLAPRANDOMCTSERRORS;
MACRO_LLC LLC_DISC;
MACRO_LLC LLC_DISC_P;
MACRO_LLC LLC_DM;
MACRO_LLC LLC_DM_P;
MACRO_LLC LLC_FRMR;
MACRO_LLC LLC_FRMRLEN;
MACRO_LLC LLC_FRMR_P;
MACRO_LLC LLC_INFO;
MACRO_LLC LLC_ISFRAMELEN;
MACRO_LLC LLC_ISO_LSAP;
MACRO_LLC LLC_REJ;
MACRO_LLC LLC_RNR;
MACRO_LLC LLC_RR;
MACRO_LLC LLC_SABME;
MACRO_LLC LLC_SABME_P;
MACRO_LLC LLC_SNAP_LSAP;
MACRO_LLC LLC_TEST;
MACRO_LLC LLC_TEST_P;
MACRO_LLC LLC_UA;
MACRO_LLC LLC_UA_P;
MACRO_LLC LLC_UFRAMELEN;
MACRO_LLC LLC_UI;
MACRO_LLC LLC_UI_P;
MACRO_LLC LLC_X25_LSAP;
MACRO_LLC LLC_XID;
MACRO_LLC LLC_XID_P;
MACRO_LCRTBS LLITOUT;
MACRO_ULLONG LLONG_MAX;
MACRO_LLONG LLONG_MIN;
MACRO_LCRTBS LMDMBUF;
MACRO_LM LM_FORWARDMASK;
MACRO_LM_MAXSTRLEN LM_MAXSTRLEN;
MACRO_LM LM_MODE;
MACRO_LM LM_SLC;
MACRO_AREGTYPE LNKTYPE;
MACRO_LCRTBS LNOFLSH;
MACRO_LCRTBS LNOHANG;
MACRO_LOAD LOAD_SCALE;
MACRO_LOCALDOMAINPARTS LOCALDOMAINPARTS;
MACRO_LOCK LOCK_EX;
MACRO_LOCK LOCK_NB;
MACRO_TASK_NULL LOCK_SET_NULL;
MACRO_LOCK LOCK_SH;
MACRO_LOCK LOCK_UN;
MACRO_LOG LOG_ALERT;
MACRO_LOG LOG_AUTH;
MACRO_LOG LOG_AUTHPRIV;
MACRO_LOG LOG_CONS;
MACRO_LOG LOG_CRIT;
MACRO_LOG LOG_CRON;
MACRO_LOG LOG_DAEMON;
MACRO_LOG LOG_DEBUG;
MACRO_LOG LOG_EMERG;
MACRO_LOG LOG_ERR;
MACRO_LOG LOG_FACMASK;
MACRO_LOG LOG_FTP;
MACRO_LOG LOG_INFO;
MACRO_LOG LOG_KERN;
MACRO_LOG LOG_LOCAL0;
MACRO_LOG LOG_LOCAL1;
MACRO_LOG LOG_LOCAL2;
MACRO_LOG LOG_LOCAL3;
MACRO_LOG LOG_LOCAL4;
MACRO_LOG LOG_LOCAL5;
MACRO_LOG LOG_LOCAL6;
MACRO_LOG LOG_LOCAL7;
MACRO_LOG LOG_LPR;
MACRO_LOG LOG_MAIL;
MACRO_LOG LOG_NDELAY;
MACRO_LOG LOG_NETINFO;
MACRO_LOG LOG_NEWS;
MACRO_LOG LOG_NFACILITIES;
MACRO_LOG LOG_NOTICE;
MACRO_LOG LOG_NOWAIT;
MACRO_LOG LOG_ODELAY;
MACRO_LOG LOG_PERROR;
MACRO_LOG LOG_PID;
MACRO_LOG LOG_PRIMASK;
MACRO_LOG LOG_REMOTEAUTH;
MACRO_LOG LOG_SYSLOG;
MACRO_LOG LOG_USER;
MACRO_LOG LOG_UUCP;
MACRO_LOG LOG_WARNING;
MACRO_BIT LONG_BIT;
MACRO_LONG_MAX LONG_LONG_MAX;
MACRO_LONG LONG_MAX;
MACRO_LONG LONG_MIN;
MACRO_LOOK LOOK_UP;
MACRO_LCRTBS LPASS8;
MACRO_LCRTBS LPENDIN;
MACRO_LCRTBS LPRTERA;
MACRO_LR LR_TYPE_INTERPRETATION_MASK;
MACRO_LR LR_TYPE_THIS_SERVER_ONLY;
MACRO_LS LS_PRINT_ALWAYS;
MACRO_LS LS_PRINT_LOG;
MACRO_LS LS_PRINT_NEVER;
MACRO_LCRTBS LTILDE;
MACRO_LCRTBS LTOSTOP;
MACRO_L_SET L_INCR;
MACRO_L_SET L_SET;
MACRO_L_SET L_XTND;
MACRO_L_cuserid L_ctermid;
MACRO_L_cuserid L_cuserid;
MACRO_L L_tmpnam;
MACRO_MACHINE MACHINE_THREAD_STATE;
MACRO_MACHINE_UNKNOWN MACHINE_UNKNOWN;
MACRO_MACH_SCHED MACH_CALLOUT;
MACRO_MACH_SCHED MACH_CALL_CONT;
MACRO_MACH_SCHED MACH_DEMOTE;
MACRO_MACH_KDB MACH_KDB;
MACRO_MACH_SCHED MACH_MAKE_RUNNABLE;
MACRO_MACH_MSG MACH_MSGH_BITS_CIRCULAR;
MACRO_MACH_MSG MACH_MSGH_BITS_COMPLEX;
MACRO_MACH_MSG MACH_MSGH_BITS_LOCAL_MASK;
MACRO_MACH_MSG MACH_MSGH_BITS_PORTS_MASK;
MACRO_MACH_MSG MACH_MSGH_BITS_REMOTE_MASK;
MACRO_MACH_MSG MACH_MSGH_BITS_USED;
MACRO_MACH_MSG MACH_MSGH_BITS_USER;
MACRO_MACH_MSG MACH_MSGH_BITS_ZERO;
MACRO_MACH_MSG MACH_MSGH_KIND_NORMAL;
MACRO_MACH_MSG MACH_MSGH_KIND_NOTIFICATION;
MACRO_MACH_MSG MACH_MSG_ALLOCATE;
MACRO_MACH_MSG MACH_MSG_BODY_NULL;
MACRO_MACH_MSG MACH_MSG_DESCRIPTOR_NULL;
MACRO_MACH_MSG MACH_MSG_IPC_KERNEL;
MACRO_MACH_MSG MACH_MSG_IPC_SPACE;
MACRO_MACH_MSG MACH_MSG_MASK;
MACRO_MACH_MSG MACH_MSG_NULL;
MACRO_MACH_MSG MACH_MSG_OOL_DESCRIPTOR;
MACRO_MACH_MSG MACH_MSG_OOL_PORTS_DESCRIPTOR;
MACRO_MACH_MSG MACH_MSG_OOL_VOLATILE_DESCRIPTOR;
MACRO_MACH_MSG MACH_MSG_OPTION_NONE;
MACRO_MACH_MSG MACH_MSG_OVERWRITE;
MACRO_MACH_MSG MACH_MSG_PHYSICAL_COPY;
MACRO_MACH_MSG MACH_MSG_PORT_DESCRIPTOR;
MACRO_MACH_MSG MACH_MSG_SIZE_MAX;
MACRO_MACH_MSG MACH_MSG_SIZE_NULL;
MACRO_MACH_MSG MACH_MSG_SUCCESS;
MACRO_MACH_MSG MACH_MSG_TIMEOUT_NONE;
MACRO_MACH_MSG MACH_MSG_TRAILER_FORMAT_0;
MACRO_MACH_MSG MACH_MSG_TYPE_COPY_RECEIVE;
MACRO_MACH_MSG MACH_MSG_TYPE_COPY_SEND;
MACRO_MACH_MSG MACH_MSG_TYPE_LAST;
MACRO_MACH_MSG MACH_MSG_TYPE_MAKE_SEND;
MACRO_MACH_MSG MACH_MSG_TYPE_MAKE_SEND_ONCE;
MACRO_MACH_MSG MACH_MSG_TYPE_MOVE_RECEIVE;
MACRO_MACH_MSG MACH_MSG_TYPE_MOVE_SEND;
MACRO_MACH_MSG MACH_MSG_TYPE_MOVE_SEND_ONCE;
MACRO_MACH_MSG MACH_MSG_TYPE_POLYMORPHIC;
MACRO_MACH_MSG MACH_MSG_TYPE_PORT_NAME;
MACRO_MACH_MSG MACH_MSG_TYPE_PORT_NONE;
MACRO_MACH_MSG MACH_MSG_TYPE_PORT_RECEIVE;
MACRO_MACH_MSG MACH_MSG_TYPE_PORT_SEND;
MACRO_MACH_MSG MACH_MSG_TYPE_PORT_SEND_ONCE;
MACRO_MACH_MSG MACH_MSG_VIRTUAL_COPY;
MACRO_MACH_MSG MACH_MSG_VM_KERNEL;
MACRO_MACH_MSG MACH_MSG_VM_SPACE;
MACRO_MACH_MSG MACH_NOTIFY_DEAD_NAME;
MACRO_MACH_MSG MACH_NOTIFY_FIRST;
MACRO_MACH_MSG MACH_NOTIFY_LAST;
MACRO_MACH_MSG MACH_NOTIFY_NO_SENDERS;
MACRO_MACH_MSG MACH_NOTIFY_PORT_DELETED;
MACRO_MACH_MSG MACH_NOTIFY_PORT_DESTROYED;
MACRO_MACH_MSG MACH_NOTIFY_SEND_ONCE;
MACRO_MACH_PORTS MACH_PORTS_SLOTS_USED;
MACRO_MACH MACH_PORT_DEAD;
MACRO_MACH MACH_PORT_DNREQUESTS_SIZE;
MACRO_MACH MACH_PORT_DNREQUESTS_SIZE_COUNT;
MACRO_MACH MACH_PORT_LIMITS_INFO;
MACRO_MACH MACH_PORT_NULL;
MACRO_MACH MACH_PORT_QLIMIT_DEFAULT;
MACRO_MACH MACH_PORT_QLIMIT_MAX;
MACRO_MACH MACH_PORT_RECEIVE_STATUS;
MACRO_MACH MACH_PORT_RIGHT_DEAD_NAME;
MACRO_MACH MACH_PORT_RIGHT_NUMBER;
MACRO_MACH MACH_PORT_RIGHT_PORT_SET;
MACRO_MACH MACH_PORT_RIGHT_RECEIVE;
MACRO_MACH MACH_PORT_RIGHT_SEND;
MACRO_MACH MACH_PORT_RIGHT_SEND_ONCE;
MACRO_MACH MACH_PORT_SRIGHTS_NONE;
MACRO_MACH MACH_PORT_SRIGHTS_PRESENT;
MACRO_MACH MACH_PORT_TYPE_ALL_RIGHTS;
MACRO_MACH MACH_PORT_TYPE_DEAD_NAME;
MACRO_MACH MACH_PORT_TYPE_DNREQUEST;
MACRO_MACH MACH_PORT_TYPE_NONE;
MACRO_MACH MACH_PORT_TYPE_PORT_OR_DEAD;
MACRO_MACH MACH_PORT_TYPE_PORT_RIGHTS;
MACRO_MACH MACH_PORT_TYPE_PORT_SET;
MACRO_MACH MACH_PORT_TYPE_RECEIVE;
MACRO_MACH MACH_PORT_TYPE_SEND;
MACRO_MACH MACH_PORT_TYPE_SEND_ONCE;
MACRO_MACH MACH_PORT_TYPE_SEND_RECEIVE;
MACRO_MACH MACH_PORT_TYPE_SEND_RIGHTS;
MACRO_MACH_SCHED MACH_PROMOTE;
MACRO_MACH_MSG MACH_RCV_BODY_ERROR;
MACRO_MACH_MSG MACH_RCV_HEADER_ERROR;
MACRO_MACH_MSG MACH_RCV_INTERRUPT;
MACRO_MACH_MSG MACH_RCV_INTERRUPTED;
MACRO_MACH_MSG MACH_RCV_INVALID_DATA;
MACRO_MACH_MSG MACH_RCV_INVALID_NAME;
MACRO_MACH_MSG MACH_RCV_INVALID_NOTIFY;
MACRO_MACH_MSG MACH_RCV_INVALID_TRAILER;
MACRO_MACH_MSG MACH_RCV_INVALID_TYPE;
MACRO_MACH_MSG MACH_RCV_IN_PROGRESS;
MACRO_MACH_MSG MACH_RCV_IN_PROGRESS_TIMED;
MACRO_MACH_MSG MACH_RCV_IN_SET;
MACRO_MACH_MSG MACH_RCV_LARGE;
MACRO_MACH_MSG MACH_RCV_MSG;
MACRO_MACH_MSG MACH_RCV_NOTIFY;
MACRO_MACH_MSG MACH_RCV_OVERWRITE;
MACRO_MACH_MSG MACH_RCV_PORT_CHANGED;
MACRO_MACH_MSG MACH_RCV_PORT_DIED;
MACRO_MACH_MSG MACH_RCV_SCATTER_SMALL;
MACRO_MACH_MSG MACH_RCV_TIMED_OUT;
MACRO_MACH_MSG MACH_RCV_TIMEOUT;
MACRO_MACH_MSG MACH_RCV_TOO_LARGE;
MACRO_MACH_MSG MACH_RCV_TRAILER_MASK;
MACRO_MACH_MSG MACH_RCV_TRAILER_NULL;
MACRO_MACH_MSG MACH_RCV_TRAILER_SENDER;
MACRO_MACH_MSG MACH_RCV_TRAILER_SEQNO;
MACRO_MACH_SCHED MACH_SCHED;
MACRO_MACH_MSG MACH_SEND_ALWAYS;
MACRO_MACH_MSG MACH_SEND_CANCEL;
MACRO_MACH_MSG MACH_SEND_INTERRUPT;
MACRO_MACH_MSG MACH_SEND_INTERRUPTED;
MACRO_MACH_MSG MACH_SEND_INVALID_DATA;
MACRO_MACH_MSG MACH_SEND_INVALID_DEST;
MACRO_MACH_MSG MACH_SEND_INVALID_HEADER;
MACRO_MACH_MSG MACH_SEND_INVALID_MEMORY;
MACRO_MACH_MSG MACH_SEND_INVALID_NOTIFY;
MACRO_MACH_MSG MACH_SEND_INVALID_REPLY;
MACRO_MACH_MSG MACH_SEND_INVALID_RIGHT;
MACRO_MACH_MSG MACH_SEND_INVALID_RT_OOL_SIZE;
MACRO_MACH_MSG MACH_SEND_INVALID_TRAILER;
MACRO_MACH_MSG MACH_SEND_INVALID_TYPE;
MACRO_MACH_MSG MACH_SEND_IN_PROGRESS;
MACRO_MACH_MSG MACH_SEND_MSG;
MACRO_MACH_MSG MACH_SEND_MSG_TOO_SMALL;
MACRO_MACH_MSG MACH_SEND_NO_BUFFER;
MACRO_MACH_MSG MACH_SEND_TIMED_OUT;
MACRO_MACH_MSG MACH_SEND_TIMEOUT;
MACRO_MACH_MSG MACH_SEND_TOO_LARGE;
MACRO_MACH_MSG MACH_SEND_TRAILER;
MACRO_MACH_SCHED MACH_STACK_ATTACH;
MACRO_MACH_SCHED MACH_STACK_DETACH;
MACRO_MACH_SCHED MACH_STACK_HANDOFF;
MACRO_MAC MAC_OS_X_VERSION_10_0;
MACRO_MAC MAC_OS_X_VERSION_10_1;
MACRO_MAC MAC_OS_X_VERSION_10_2;
MACRO_MAC MAC_OS_X_VERSION_10_3;
MACRO_MAC MAC_OS_X_VERSION_MAX_ALLOWED;
MACRO_MAC MAC_OS_X_VERSION_MIN_REQUIRED;
MACRO_MADV MADV_DONTNEED;
MACRO_MADV MADV_FREE;
MACRO_MADV MADV_NORMAL;
MACRO_MADV MADV_RANDOM;
MACRO_MADV MADV_SEQUENTIAL;
MACRO_MADV MADV_WILLNEED;
MACRO_MAP_FILE MAP_ANON;
MACRO_MAP MAP_COPY;
MACRO_MAP MAP_FAILED;
MACRO_MAP_FILE MAP_FILE;
MACRO_MAP MAP_FIXED;
MACRO_MAP MAP_HASSEMAPHORE;
MACRO_MAP MAP_INHERIT;
MACRO_MAP MAP_NOEXTEND;
MACRO_MAP MAP_NORESERVE;
MACRO_MAP MAP_PRIVATE;
MACRO_MAP MAP_RENAME;
MACRO_MAP MAP_SHARED;
MACRO_MATH MATH_ERREXCEPT;
MACRO_MATH MATH_ERRNO;
MACRO_MATTR MATTR_CACHE;
MACRO_MATTR MATTR_MIGRATE;
MACRO_MATTR MATTR_REPLICATE;
MACRO_MATTR MATTR_VAL_CACHE_FLUSH;
MACRO_MATTR MATTR_VAL_CACHE_SYNC;
MACRO_MATTR MATTR_VAL_DCACHE_FLUSH;
MACRO_MATTR MATTR_VAL_GET;
MACRO_MATTR MATTR_VAL_GET_INFO;
MACRO_MATTR MATTR_VAL_ICACHE_FLUSH;
MACRO_MATTR MATTR_VAL_OFF;
MACRO_MATTR MATTR_VAL_ON;
MACRO_MINBUCKET MAXALLOCSAVE;
MACRO_CROUND MAXBSIZE;
MACRO_MAXCDNAME MAXCDNAME;
MACRO_MAXCOMLEN MAXCOMLEN;
MACRO_DFLCSIZ MAXCSIZ;
MACRO_MAXDEPTH MAXDEPTH;
MACRO_MAXDFLSRCH MAXDFLSRCH;
MACRO_MAXDNAME MAXDNAME;
MACRO_MAXDNSRCH MAXDNSRCH;
MACRO_MAXDOMNAMELEN MAXDOMNAMELEN;
MACRO_MAXDSIZ MAXDSIZ;
MACRO_MAXFIDSZ MAXFIDSZ;
MACRO_MAXFRAG MAXFRAG;
MACRO_MAXHOSTNAMELEN MAXHOSTNAMELEN;
MACRO_MAXCOMLEN MAXINTERP;
MACRO_MAXLABEL MAXLABEL;
MACRO_MAXLOGNAME MAXLOGNAME;
MACRO_MAXMIFS MAXMIFS;
MACRO_MAXNAMELEN MAXNAMELEN;
MACRO_MAXNAMLEN MAXNAMLEN;
MACRO_MAXNETNAMELEN MAXNETNAMELEN;
MACRO_MAXNS MAXNS;
MACRO_MAXPACKETSIZE MAXPACKETSIZE;
MACRO_LABELOFFSET MAXPARTITIONS;
MACRO_MAXFRAG MAXPATHLEN;
MACRO_MAXPHYS MAXPHYS;
MACRO_MAXPHYSIO MAXPHYSIO;
MACRO_MAXPRI MAXPRI;
MACRO_MAXQSIZE MAXQSIZE;
MACRO_MAXQUOTAS MAXQUOTAS;
MACRO_MAXRESOLVSORT MAXRESOLVSORT;
MACRO_DFLSSIZ MAXSSIZ;
MACRO_MAXSYMLINKS MAXSYMLINKS;
MACRO_MAXTTL MAXTTL;
MACRO_MAXUPRC MAXUPRC;
MACRO_MAXUSERS MAXUSERS;
MACRO_MAXVIFS MAXVIFS;
MACRO_MAX_NETOBJ MAX_AUTH_BYTES;
MACRO_MAX_UPQ MAX_BKT_SIZE;
MACRO_BUS_DEVICE_ADDRESS MAX_BUS_DEVICE_ADDRESS;
MACRO_MAX_CACHED MAX_CACHED_SOCKETS;
MACRO_MAX_CANON MAX_CANON;
MACRO_MAX_CLUSTERS MAX_CLUSTERS;
MACRO_COMMAND MAX_COMMAND;
MACRO_MAX_IQ MAX_DQ_TIME;
MACRO_MAX_PATH MAX_FILEID;
MACRO_COMMAND MAX_FORM_COMMAND;
MACRO_MAX_PHYS MAX_IFS;
MACRO_MAX_CANON MAX_INPUT;
MACRO_MAX_IQ MAX_IQ_TIME;
MACRO_MAX_KEYTAB MAX_KEYTAB_NAME_LEN;
MACRO_MAX_KTXT MAX_KTXT_LEN;
MACRO_SZ MAX_K_NAME_SZ;
MACRO_MAX_LIFE MAX_LIFE;
MACRO_MAX_MACHINE MAX_MACHINE_NAME;
MACRO_MENU_COMMAND MAX_MENU_COMMAND;
MACRO_MAX_NETOBJ MAX_NETOBJ_SZ;
MACRO_MAX_PAGE MAX_PAGE_NUMBER;
MACRO_MAX_PAGE MAX_PAGE_OFFSET;
MACRO_MAX_PATH MAX_PATH_LEN;
MACRO_MAX_PHYS MAX_PHYS_ADDR_SIZE;
MACRO_MAX_PAGE MAX_REC_NUMBER;
MACRO_MAX_SOPS MAX_SOPS;
MACRO_MAX_UPL MAX_UPL_TRANSFER;
MACRO_MAX_UPQ MAX_UPQ;
MACRO_WAITTIME MAX_WAITTIME;
MACRO_MAX_ZONES MAX_ZONES;
MACRO_MB MB_LEN_MAX;
MACRO_UPAGES MCLBYTES;
MACRO_MCLOFSET MCLOFSET;
MACRO_MCLSHIFT MCLSHIFT;
MACRO_ALLDELAY MDMBUF;
MACRO_MEMORY MEMORY_OBJECT_ATTRIBUTE_INFO;
MACRO_MEMORY MEMORY_OBJECT_BEHAVIOR_INFO;
MACRO_VM_MAP MEMORY_OBJECT_CONTROL_NULL;
MACRO_MEMORY MEMORY_OBJECT_COPY_CALL;
MACRO_MEMORY MEMORY_OBJECT_COPY_DELAY;
MACRO_MEMORY MEMORY_OBJECT_COPY_INVALID;
MACRO_MEMORY MEMORY_OBJECT_COPY_NONE;
MACRO_MEMORY MEMORY_OBJECT_COPY_SYMMETRIC;
MACRO_MEMORY MEMORY_OBJECT_COPY_SYNC;
MACRO_MEMORY MEMORY_OBJECT_COPY_TEMPORARY;
MACRO_MEMORY MEMORY_OBJECT_DATA_FLUSH;
MACRO_MEMORY MEMORY_OBJECT_DATA_NO_CHANGE;
MACRO_MEMORY MEMORY_OBJECT_DATA_PURGE;
MACRO_MEMORY MEMORY_OBJECT_DATA_SYNC;
MACRO_VM_MAP MEMORY_OBJECT_DEFAULT_NULL;
MACRO_MEMORY MEMORY_OBJECT_INFO_MAX;
MACRO_VM_MAP MEMORY_OBJECT_NAME_NULL;
MACRO_VM_MAP MEMORY_OBJECT_NULL;
MACRO_MEMORY MEMORY_OBJECT_PERFORMANCE_INFO;
MACRO_MEMORY_OBJECT MEMORY_OBJECT_RELEASE_NO_OP;
MACRO_MEMORY_OBJECT MEMORY_OBJECT_RESPECT_CACHE;
MACRO_MEMORY MEMORY_OBJECT_RETURN_ALL;
MACRO_MEMORY MEMORY_OBJECT_RETURN_ANYTHING;
MACRO_MEMORY MEMORY_OBJECT_RETURN_DIRTY;
MACRO_MEMORY MEMORY_OBJECT_RETURN_NONE;
MACRO_MEMORY_OBJECT MEMORY_OBJECT_TERMINATE_IDLE;
MACRO_MFCTBLSIZ MFCTBLSIZ;
MACRO_MFSNAMELEN MFSNAMELEN;
MACRO_MIFF MIFF_REGISTER;
MACRO_MIG MIG_ARRAY_TOO_LARGE;
MACRO_MIG MIG_BAD_ARGUMENTS;
MACRO_MIG MIG_BAD_ID;
MACRO_MIG MIG_EXCEPTION;
MACRO_MIG MIG_NO_REPLY;
MACRO_MIG MIG_REMOTE_ERROR;
MACRO_MIG MIG_REPLY_MISMATCH;
MACRO_MIG MIG_ROUTINE_ARG_DESCRIPTOR_NULL;
MACRO_MIG MIG_ROUTINE_DESCRIPTOR_NULL;
MACRO_MIG MIG_SERVER_DIED;
MACRO_MIG MIG_SUBSYSTEM_NULL;
MACRO_MIG MIG_TRAILER_ERROR;
MACRO_MIG MIG_TYPE_ERROR;
MACRO_MINARCS MINARCS;
MACRO_MINBUCKET MINBUCKET;
MACRO_MINCORE MINCORE_INCORE;
MACRO_MINCORE MINCORE_MODIFIED;
MACRO_MINCORE MINCORE_MODIFIED_OTHER;
MACRO_MINCORE MINCORE_REFERENCED;
MACRO_MINCORE MINCORE_REFERENCED_OTHER;
MACRO_MINSIGSTKSZ MINSIGSTKSZ;
MACRO_MINSPERHOUR MINSPERHOUR;
MACRO_BUS_DEVICE_ADDRESS MIN_BUS_DEVICE_ADDRESS;
MACRO_COMMAND MIN_FORM_COMMAND;
MACRO_MENU_COMMAND MIN_MENU_COMMAND;
MACRO_WAITTIME MIN_WAITTIME;
MACRO_KDC_OK MK_AP_OK;
MACRO_MK MK_AP_TGTEXP;
MACRO_MLD6_LISTENER MLD6_LISTENER_DONE;
MACRO_MLD6 MLD6_LISTENER_QUERY;
MACRO_ICMP6_MEMBERSHIP MLD6_LISTENER_REPORT;
MACRO_MLD6_MTRACE MLD6_MTRACE;
MACRO_MLD6_MTRACE MLD6_MTRACE_RESP;
MACRO_MNAMELEN MNAMELEN;
MACRO_MNTK MNTK_MWAIT;
MACRO_MNTK MNTK_UNMOUNT;
MACRO_MNTK MNTK_WANTRDWR;
MACRO_MNT MNT_ASYNC;
MACRO_MNT MNT_AUTOMOUNTED;
MACRO_MNT MNT_CMDFLAGS;
MACRO_MNT MNT_DEFEXPORTED;
MACRO_MNT MNT_DELEXPORT;
MACRO_MNT MNT_DONTBROWSE;
MACRO_MNT MNT_DOVOLFS;
MACRO_MNT MNT_EXKERB;
MACRO_MNT MNT_EXPORTANON;
MACRO_MNT MNT_EXPORTED;
MACRO_MNT MNT_EXRDONLY;
MACRO_MNT MNT_FIXEDSCRIPTENCODING;
MACRO_MNT MNT_FORCE;
MACRO_MNT MNT_LOCAL;
MACRO_MNT MNT_NODEV;
MACRO_MNT MNT_NOEXEC;
MACRO_MNT MNT_NOSUID;
MACRO_MNT_WAIT MNT_NOWAIT;
MACRO_MNT MNT_QUOTA;
MACRO_MNT MNT_RDONLY;
MACRO_MNT MNT_RELOAD;
MACRO_MNT MNT_ROOTFS;
MACRO_MNT MNT_SYNCHRONOUS;
MACRO_MNT MNT_UNION;
MACRO_MNT MNT_UNKNOWNPERMISSIONS;
MACRO_MNT MNT_UPDATE;
MACRO_MNT MNT_VISFLAGMASK;
MACRO_MNT_WAIT MNT_WAIT;
MACRO_MODE_EDIT MODE_ACK;
MACRO_MODE MODE_B;
MACRO_MODE MODE_C;
MACRO_MODE_EDIT MODE_ECHO;
MACRO_MODE_EDIT MODE_EDIT;
MACRO_MODE_EDIT MODE_FLOW;
MACRO_MODE_EDIT MODE_FORCE;
MACRO_MODE_EDIT MODE_INBIN;
MACRO_MODE_EDIT MODE_LIT_ECHO;
MACRO_MODE_EDIT MODE_MASK;
MACRO_MODE_EDIT MODE_OUTBIN;
MACRO_MODE MODE_S;
MACRO_MODE_EDIT MODE_SOFT_TAB;
MACRO_MODE_EDIT MODE_TRAPSIG;
MACRO_MONSPERYEAR MONSPERYEAR;
MACRO_MOREDATA MOREDATA;
MACRO_MPOOL MPOOL_DIRTY;
MACRO_MPOOL MPOOL_PINNED;
MACRO_MRT6MSG MRT6MSG_NOCACHE;
MACRO_MRT6MSG MRT6MSG_WHOLEPKT;
MACRO_MRT6MSG MRT6MSG_WRONGMIF;
MACRO_MRT6 MRT6_ADD_MFC;
MACRO_MRT6 MRT6_ADD_MIF;
MACRO_MRT6 MRT6_DEL_MFC;
MACRO_MRT6 MRT6_DEL_MIF;
MACRO_MRT6 MRT6_DONE;
MACRO_MRT6 MRT6_INIT;
MACRO_MRT6 MRT6_PIM;
MACRO_MRT MRT_ADD_MFC;
MACRO_MRT MRT_ADD_VIF;
MACRO_MRT MRT_ASSERT;
MACRO_MRT MRT_DEL_MFC;
MACRO_MRT MRT_DEL_VIF;
MACRO_MRT MRT_DONE;
MACRO_MRT MRT_INIT;
MACRO_MRT MRT_VERSION;
MACRO_MSEC MSEC_DIRBIT;
MACRO_MSEC MSEC_VAL_MASK;
reply_stat MSG_ACCEPTED;
MACRO_MSG MSG_COMPAT;
MACRO_MSG MSG_CTRUNC;
reply_stat MSG_DENIED;
MACRO_MSG MSG_DONTROUTE;
MACRO_MSG MSG_DONTWAIT;
MACRO_MSG MSG_EOF;
MACRO_MSG MSG_EOR;
MACRO_MSG MSG_FLUSH;
MACRO_MSG MSG_HAVEMORE;
MACRO_MSG MSG_HOLD;
MACRO_MSG_MAGIC MSG_MAGIC;
MACRO_MSG MSG_OOB;
MACRO_MSG MSG_PEEK;
MACRO_MSG MSG_RCVMORE;
MACRO_MSG MSG_SEND;
MACRO_MSG MSG_TRUNC;
MACRO_SZ MSG_TYPE_SZ;
MACRO_MSG MSG_WAITALL;
MACRO_UPAGES MSIZE;
MACRO_MSR MSR_EE_BIT;
MACRO_MSR MSR_PR_BIT;
MACRO_MS MS_ASYNC;
MACRO_MS MS_DEACTIVATE;
MACRO_MS MS_INVALIDATE;
MACRO_MS MS_KILLPAGES;
MACRO_MS MS_SYNC;
MACRO_MTWEOF MTBSF;
MACRO_MTFSR MTBSR;
MACRO_MTCACHE MTCACHE;
MACRO_MTEOM MTEOM;
MACRO_MTERASE MTERASE;
MACRO_MTWEOF MTFSF;
MACRO_MTFSR MTFSR;
MACRO_MTIOCEEOT MTIOCEEOT;
MACRO_MTIOCIEOT MTIOCIEOT;
MACRO_MTNBSF MTNBSF;
MACRO_MTNOCACHE MTNOCACHE;
MACRO_MTNOP MTNOP;
MACRO_MTOFFL MTOFFL;
MACRO_MTNOP MTRETEN;
MACRO_MTREW MTREW;
MACRO_MTSETBSIZ MTSETBSIZ;
MACRO_MTSETDNSTY MTSETDNSTY;
MACRO_MTWEOF MTWEOF;
MACRO_MT MT_ATABLE;
MACRO_MT MT_CONTROL;
MACRO_MT MT_DATA;
MACRO_MT MT_FREE;
MACRO_MT MT_FTABLE;
MACRO_MT MT_HEADER;
MACRO_MT MT_HTABLE;
MACRO_MT MT_IFADDR;
MACRO_MT_ISTS MT_ISAR;
MACRO_MT_ISTS MT_ISCALIPER;
MACRO_MT_ISTS MT_ISCPC;
MACRO_MT_ISTS MT_ISCT;
MACRO_MT_ISTS MT_ISCY;
MACRO_MT_ISTS MT_ISEXA8200;
MACRO_MT_ISTS MT_ISEXA8500;
MACRO_MT_ISTS MT_ISEXABYTE;
MACRO_MT_ISTS MT_ISFHP;
MACRO_MT_ISTS MT_ISGS;
MACRO_MT_ISTS MT_ISHPDAT;
MACRO_MT_ISTS MT_ISHT;
MACRO_MT_ISTS MT_ISMFOUR;
MACRO_MT_ISTS MT_ISMT;
MACRO_MT_ISTS MT_ISMT02;
MACRO_MT_ISTS MT_ISPYTHON;
MACRO_MT_ISTS MT_ISTK50;
MACRO_MT_ISTS MT_ISTM;
MACRO_MT_ISTS MT_ISTMSCP;
MACRO_MT_ISTS MT_ISTS;
MACRO_MT_ISTS MT_ISUT;
MACRO_MT_ISTS MT_ISVIPER1;
MACRO_MT_ISTS MT_ISVIPER2525;
MACRO_MT_ISTS MT_ISWANGTEK;
MACRO_MT_ISTS MT_ISWTEK5099;
MACRO_MT MT_MAX;
MACRO_MT MT_OOBDATA;
MACRO_MT MT_PCB;
MACRO_MT MT_RIGHTS;
MACRO_MT MT_RTABLE;
MACRO_MT MT_SOCKET;
MACRO_MT MT_SONAME;
MACRO_MT MT_SOOPTS;
MACRO_M M_ADOSFSMNT;
MACRO_M M_ADOSFSNODE;
MACRO_M M_ANODE;
MACRO_M M_BCAST;
MACRO_M M_BUFHDR;
MACRO_M M_CACHE;
MACRO_M_DONTWAIT M_COPYALL;
MACRO_M M_COPYFLAGS;
MACRO_M M_CRED;
MACRO_M M_DEVBUF;
MACRO_M M_DEVFS;
MACRO_M_DONTWAIT M_DONTWAIT;
MACRO_M M_DQUOT;
MACRO_M M_EOR;
MACRO_M M_EXEC;
MACRO_M M_EXT;
MACRO_M M_FFSNODE;
MACRO_M M_FHANDLE;
MACRO_M M_FILE;
MACRO_M M_FILEDESC;
MACRO_M M_FIRSTFRAG;
MACRO_M M_FRAG;
MACRO_M M_FREE;
MACRO_M M_FTABLE;
MACRO_M M_GPROF;
MACRO_M M_HFSFORK;
MACRO_M M_HFSMNT;
MACRO_M M_HFSNODE;
MACRO_M M_HTABLE;
MACRO_M M_IFADDR;
MACRO_M M_IFMADDR;
MACRO_M M_IGMP;
MACRO_M M_IOCTLOPS;
MACRO_M M_IOV;
MACRO_M M_IP6MISC;
MACRO_M M_IP6NDP;
MACRO_M M_IP6OPT;
MACRO_M M_IPFW;
MACRO_M M_IPMADDR;
MACRO_M M_IPMOPTS;
MACRO_M M_ISOFSMNT;
MACRO_M M_ISOFSNODE;
MACRO_M M_KTRACE;
MACRO_M M_LAST;
MACRO_M M_LASTFRAG;
MACRO_M M_LFSNODE;
MACRO_M M_LOCKF;
MACRO_M M_MAPMEM;
MACRO_M M_MBUF;
MACRO_M M_MCAST;
MACRO_M M_MCLUST;
MACRO_M M_MFSNODE;
MACRO_M M_MISCFSMNT;
MACRO_M M_MISCFSNODE;
MACRO_M M_MOUNT;
MACRO_M M_MRTABLE;
MACRO_M M_MSDOSFSFAT;
MACRO_M M_MSDOSFSMNT;
MACRO_M M_MSDOSFSNODE;
MACRO_M M_NAMEI;
MACRO_M M_NETADDR;
MACRO_M M_NFSBIGFH;
MACRO_M M_NFSD;
MACRO_M M_NFSDIROFF;
MACRO_M M_NFSMNT;
MACRO_M M_NFSNODE;
MACRO_M M_NFSREQ;
MACRO_M M_NFSRVDESC;
MACRO_M M_NFSSVC;
MACRO_M M_NFSUID;
MACRO_M M_NOWAIT;
MACRO_M M_NQLEASE;
MACRO_M M_NQMHOST;
MACRO_M M_OFILETABL;
MACRO_M M_PCB;
MACRO_M M_PGRP;
MACRO_M M_PKTHDR;
MACRO_M M_PROC;
MACRO_M M_PROTO1;
MACRO_M M_PROTO2;
MACRO_M M_PROTO3;
MACRO_M M_PROTO4;
MACRO_M M_PROTO5;
MACRO_M M_RTABLE;
MACRO_M M_SECA;
MACRO_M M_SEGMENT;
MACRO_M M_SESSION;
MACRO_M M_SHM;
MACRO_M M_SOCKET;
MACRO_M M_SONAME;
MACRO_M M_SOOPTS;
MACRO_M M_SUBPROC;
MACRO_M M_TEMP;
MACRO_M M_TSEGQ;
MACRO_M M_TTYS;
MACRO_M M_UDFMNT;
MACRO_M M_UDFNODE;
MACRO_M M_UFSMNT;
MACRO_M M_VMMAP;
MACRO_M M_VMMAPENT;
MACRO_M M_VMOBJ;
MACRO_M M_VMOBJHASH;
MACRO_M M_VMPAGER;
MACRO_M M_VMPGDATA;
MACRO_M M_VMPMAP;
MACRO_M M_VMPVENT;
MACRO_M M_VNODE;
MACRO_M M_VOLFSMNT;
MACRO_M M_VOLFSNODE;
MACRO_M_DONTWAIT M_WAIT;
MACRO_M M_WAITOK;
MACRO_M M_ZOMBIE;
MACRO_NAMESERVER NAMESERVER_PORT;
MACRO_NAMESIZE NAMESIZE;
MACRO_NAME NAME_MAX;
MACRO_NOT_CHECKED_IN NAME_NOT_CHECKED_IN;
MACRO_NAME_NOT NAME_NOT_YOURS;
MACRO_SLOT NAME_SERVER_SLOT;
MACRO_NAME_SIZE NAME_SIZE;
MACRO_NBBY NBBY;
MACRO_ALIGNBYTES NBPG;
MACRO_NBPINDEX NBPINDEX;
MACRO_NBPOBJECT NBPOBJECT;
MACRO_NBPSTATE NBPSTATE;
MACRO_NBPTABLE NBPTABLE;
MACRO_NBPTYPE NBPTYPE;
MACRO_NBPZONE NBPZONE;
MACRO_NBP_BRRQ NBP_BRRQ;
MACRO_NBP_BRRQ NBP_CONFIRM;
MACRO_NBP_BRRQ NBP_FWDRQ;
MACRO_NBP_BRRQ NBP_HDR_SIZE;
MACRO_NBP_BRRQ NBP_LKUP;
MACRO_NBP_BRRQ NBP_LKUP_REPLY;
MACRO_NBP NBP_NVE_STR_SIZE;
MACRO_NBP_BRRQ NBP_ORD_WILDCARD;
MACRO_NBP_BRRQ NBP_RETRY_COUNT;
MACRO_NBP_BRRQ NBP_RETRY_INTERVAL;
MACRO_SOCKET NBP_SOCKET;
MACRO_NBP_BRRQ NBP_SPL_WILDCARD;
MACRO_NBP_BRRQ NBP_TUPLE_MAX;
MACRO_NBP NBP_TUPLE_SIZE;
MACRO_PGSHIFT NBSEG;
MACRO_MAXUPRC NCARGS;
MACRO_NCCS NCCS;
MACRO_NCHNAMLEN NCHNAMLEN;
MACRO_NCURSES_ATTR NCURSES_ATTR_SHIFT;
MACRO_NCURSES NCURSES_DLL_H_incl;
MACRO_NCURSES_ETI NCURSES_ETI_H_incl;
MACRO_NCURSES_MOUSE NCURSES_MOUSE_VERSION;
MACRO_NCURSES_PANEL NCURSES_PANEL_H_incl;
MACRO_NCURSES_TERMCAP NCURSES_TERMCAP_H_incl;
MACRO_NCURSES_TERM NCURSES_TERM_H_incl;
MACRO_NCURSES NCURSES_UNCTRL_H_incl;
MACRO_NCURSES NCURSES_VERSION_MAJOR;
MACRO_NCURSES NCURSES_VERSION_MINOR;
MACRO_NCURSES NCURSES_VERSION_PATCH;
MACRO_NCURSES_XNAMES NCURSES_XNAMES;
MACRO_NDEXTENT NDEXTENT;
MACRO_NDFILE NDFILE;
MACRO_NDMAP NDMAP;
MACRO_NDRVPROTO NDRVPROTO_NDRV;
MACRO_NDRV_DELDMXSPEC NDRV_ADDMULTICAST;
MACRO_NDRV_DELDMXSPEC NDRV_DELDMXSPEC;
MACRO_NDRV_DELDMXSPEC NDRV_DELMULTICAST;
MACRO_NDRV NDRV_DEMUXTYPE_ETHERTYPE;
MACRO_NDRV NDRV_DEMUXTYPE_SAP;
MACRO_NDRV NDRV_DEMUXTYPE_SNAP;
MACRO_NDRV_PROTOCOL NDRV_PROTOCOL_DESC_VERS;
MACRO_NDRV_DELDMXSPEC NDRV_SETDMXSPEC;
MACRO_NDR NDR_CHAR_ASCII;
MACRO_NDR NDR_CHAR_EBCDIC;
MACRO_NDR NDR_FLOAT_CRAY;
MACRO_NDR NDR_FLOAT_IBM;
MACRO_NDR NDR_FLOAT_IEEE;
MACRO_NDR NDR_FLOAT_VAX;
MACRO_NDR NDR_INT_BIG_ENDIAN;
MACRO_NDR NDR_INT_LITTLE_ENDIAN;
MACRO_NDR NDR_PROTOCOL_2_0;
MACRO_ND_REDIRECT ND_NA_FLAG_OVERRIDE;
MACRO_ND_REDIRECT ND_NA_FLAG_ROUTER;
MACRO_ND_REDIRECT ND_NA_FLAG_SOLICITED;
MACRO_ND ND_NEIGHBOR_ADVERT;
MACRO_ND ND_NEIGHBOR_SOLICIT;
MACRO_ND_REDIRECT ND_OPT_MTU;
MACRO_ND_REDIRECT ND_OPT_PI_FLAG_AUTO;
MACRO_ND_REDIRECT ND_OPT_PI_FLAG_ONLINK;
MACRO_ND_REDIRECT ND_OPT_PREFIX_INFORMATION;
MACRO_ND_REDIRECT ND_OPT_REDIRECTED_HEADER;
MACRO_ND_REDIRECT ND_OPT_ROUTE_INFO;
MACRO_ND_REDIRECT ND_OPT_SOURCE_LINKADDR;
MACRO_ND_REDIRECT ND_OPT_TARGET_LINKADDR;
MACRO_ND_REDIRECT ND_RA_FLAG_HA;
MACRO_ND_REDIRECT ND_RA_FLAG_MANAGED;
MACRO_ND_REDIRECT ND_RA_FLAG_OTHER;
MACRO_ND_REDIRECT ND_RA_FLAG_RTPREF_HIGH;
MACRO_ND_REDIRECT ND_RA_FLAG_RTPREF_LOW;
MACRO_ND_REDIRECT ND_RA_FLAG_RTPREF_MASK;
MACRO_ND_REDIRECT ND_RA_FLAG_RTPREF_MEDIUM;
MACRO_ND_REDIRECT ND_RA_FLAG_RTPREF_RSV;
MACRO_ND ND_REDIRECT;
MACRO_ND_REDIRECT ND_REDIRECT_ONLINK;
MACRO_ND_REDIRECT ND_REDIRECT_ROUTER;
MACRO_ND ND_ROUTER_ADVERT;
MACRO_ND ND_ROUTER_SOLICIT;
MACRO_NETDB NETDB_INTERNAL;
MACRO_NETDB NETDB_SUCCESS;
MACRO_OTTYDISC NETLDISC;
MACRO_NETLINK NETLINK_GENERIC;
MACRO_NETNAME_NO NETNAME_HOST_NOT_FOUND;
MACRO_NETNAME_NO NETNAME_INVALID_PORT;
MACRO_NOT_CHECKED_IN NETNAME_NOT_CHECKED_IN;
MACRO_NETNAME NETNAME_NOT_YOURS;
MACRO_NETNAME_NO NETNAME_NO_SUCH_HOST;
MACRO_NETNAME NETNAME_PENDING;
MACRO_NETNAME NETNAME_SUCCESS;
MACRO_NET NET_MAXID;
MACRO_NET NET_RT_DUMP;
MACRO_NET NET_RT_FLAGS;
MACRO_NET NET_RT_IFLIST;
MACRO_NET NET_RT_MAXID;
MACRO_NEWLINE NEWLINE;
MACRO_NEW NEW_ENV_VALUE;
MACRO_NEW NEW_ENV_VAR;
MACRO_NEW_LOCAL NEW_LOCAL_SHARED_REGIONS;
$ECDADD1EECA7ABE995B6293E703DBBBE NFBLK;
$ECDADD1EECA7ABE995B6293E703DBBBE NFCHR;
$ECDADD1EECA7ABE995B6293E703DBBBE NFDIR;
MACRO_NFD NFD_GLOBAL;
MACRO_NFD NFD_PROG;
MACRO_NFD NFD_VISIBLE;
$ECDADD1EECA7ABE995B6293E703DBBBE NFFIFO;
MACRO_NFF NFF_AFTER;
MACRO_NFF NFF_BEFORE;
$ECDADD1EECA7ABE995B6293E703DBBBE NFLNK;
$ECDADD1EECA7ABE995B6293E703DBBBE NFNON;
$ECDADD1EECA7ABE995B6293E703DBBBE NFREG;
MACRO_NFSERR NFSERR_ACCES;
MACRO_NFSERR NFSERR_AUTHERR;
MACRO_NFSERR NFSERR_BADHANDLE;
MACRO_NFSERR NFSERR_BADTYPE;
MACRO_NFSERR NFSERR_BAD_COOKIE;
MACRO_NFSERR NFSERR_DQUOT;
MACRO_NFSERR NFSERR_EXIST;
MACRO_NFSERR NFSERR_FBIG;
MACRO_NFSERR NFSERR_INVAL;
MACRO_NFSERR NFSERR_IO;
MACRO_NFSERR NFSERR_ISDIR;
MACRO_NFSERR NFSERR_JUKEBOX;
MACRO_NFSERR NFSERR_MLINK;
MACRO_NFSERR NFSERR_NAMETOL;
MACRO_NFSERR NFSERR_NODEV;
MACRO_NFSERR NFSERR_NOENT;
MACRO_NFSERR NFSERR_NOSPC;
MACRO_NFSERR NFSERR_NOTDIR;
MACRO_NFSERR NFSERR_NOTEMPTY;
MACRO_NFSERR NFSERR_NOTSUPP;
MACRO_NFSERR NFSERR_NOT_SYNC;
MACRO_NFSERR NFSERR_NXIO;
MACRO_NFSERR NFSERR_PERM;
MACRO_NFSERR NFSERR_REMOTE;
MACRO_NFSERR NFSERR_RETERR;
MACRO_NFSERR NFSERR_RETVOID;
MACRO_NFSERR NFSERR_ROFS;
MACRO_NFSERR NFSERR_SERVERFAULT;
MACRO_NFSERR NFSERR_STALE;
MACRO_NFSERR NFSERR_STALEWRITEVERF;
MACRO_NFSERR NFSERR_TOOSMALL;
MACRO_NFSERR NFSERR_TRYLATER;
MACRO_NFSERR NFSERR_WFLUSH;
MACRO_NFSERR NFSERR_XDEV;
MACRO_NFSMNT NFSMNT_AUTHERR;
MACRO_NFSMNT NFSMNT_DEADTHRESH;
MACRO_NFSMNT NFSMNT_DISMINPROG;
MACRO_NFSMNT NFSMNT_DISMNT;
MACRO_NFSMNT NFSMNT_DUMBTIMR;
MACRO_NFSMNT NFSMNT_GOTFSINFO;
MACRO_NFSMNT NFSMNT_GOTPATHCONF;
MACRO_NFSMNT NFSMNT_HASAUTH;
MACRO_NFSMNT NFSMNT_HASWRITEVERF;
MACRO_NFSMNT NFSMNT_INT;
MACRO_NFSMNT NFSMNT_INTERNAL;
MACRO_NFSMNT NFSMNT_KERB;
MACRO_NFSMNT NFSMNT_LEASETERM;
MACRO_NFSMNT NFSMNT_MAXGRPS;
MACRO_NFSMNT NFSMNT_MNTD;
MACRO_NFSMNT NFSMNT_NFSV3;
MACRO_NFSMNT NFSMNT_NOCONN;
MACRO_NFSMNT NFSMNT_NQNFS;
MACRO_NFSMNT NFSMNT_RCVLOCK;
MACRO_NFSMNT NFSMNT_RDIRPLUS;
MACRO_NFSMNT NFSMNT_READAHEAD;
MACRO_NFSMNT NFSMNT_READDIRSIZE;
MACRO_NFSMNT NFSMNT_RESVPORT;
MACRO_NFSMNT NFSMNT_RETRANS;
MACRO_NFSMNT NFSMNT_RSIZE;
MACRO_NFSMNT NFSMNT_SNDLOCK;
MACRO_NFSMNT NFSMNT_SOFT;
MACRO_NFSMNT NFSMNT_TIMEO;
MACRO_NFSMNT NFSMNT_WAITAUTH;
MACRO_NFSMNT NFSMNT_WANTAUTH;
MACRO_NFSMNT NFSMNT_WANTRCV;
MACRO_NFSMNT NFSMNT_WANTSND;
MACRO_NFSMNT NFSMNT_WSIZE;
$ECDADD1EECA7ABE995B6293E703DBBBE NFSOCK;
MACRO_NFSPROC NFSPROC_ACCESS;
MACRO_NFSPROC NFSPROC_COMMIT;
MACRO_NFSPROC NFSPROC_CREATE;
MACRO_NFSPROC NFSPROC_FSINFO;
MACRO_NFSPROC NFSPROC_FSSTAT;
MACRO_NFSPROC NFSPROC_GETATTR;
MACRO_NFSPROC NFSPROC_LINK;
MACRO_NFSPROC NFSPROC_LOOKUP;
MACRO_NFSPROC NFSPROC_MKDIR;
MACRO_NFSPROC NFSPROC_MKNOD;
MACRO_NFSPROC_NOOP NFSPROC_NOOP;
MACRO_NFSPROC NFSPROC_NULL;
MACRO_NFSPROC NFSPROC_PATHCONF;
MACRO_NFSPROC NFSPROC_READ;
MACRO_NFSPROC NFSPROC_READDIR;
MACRO_NFSPROC NFSPROC_READDIRPLUS;
MACRO_NFSPROC NFSPROC_READLINK;
MACRO_NFSPROC NFSPROC_REMOVE;
MACRO_NFSPROC NFSPROC_RENAME;
MACRO_NFSPROC NFSPROC_RMDIR;
MACRO_NFSPROC NFSPROC_SETATTR;
MACRO_NFSPROC NFSPROC_SYMLINK;
MACRO_NFSPROC NFSPROC_WRITE;
MACRO_NFSRTTLOGSIZ NFSRTTLOGSIZ;
MACRO_NFSSVC NFSSVC_ADDSOCK;
MACRO_NFSSVC NFSSVC_AUTHIN;
MACRO_NFSSVC NFSSVC_AUTHINFAIL;
MACRO_NFSSVC NFSSVC_BIOD;
MACRO_NFSSVC NFSSVC_GOTAUTH;
MACRO_NFSSVC NFSSVC_MNTD;
MACRO_NFSSVC NFSSVC_NFSD;
MACRO_NFSV2PROC NFSV2PROC_CREATE;
MACRO_NFSV2PROC NFSV2PROC_GETATTR;
MACRO_NFSV2PROC NFSV2PROC_LINK;
MACRO_NFSV2PROC NFSV2PROC_LOOKUP;
MACRO_NFSV2PROC NFSV2PROC_MKDIR;
MACRO_NFSV2PROC NFSV2PROC_NOOP;
MACRO_NFSV2PROC NFSV2PROC_NULL;
MACRO_NFSV2PROC NFSV2PROC_READ;
MACRO_NFSV2PROC NFSV2PROC_READDIR;
MACRO_NFSV2PROC NFSV2PROC_READLINK;
MACRO_NFSV2PROC NFSV2PROC_REMOVE;
MACRO_NFSV2PROC NFSV2PROC_RENAME;
MACRO_NFSV2PROC NFSV2PROC_RMDIR;
MACRO_NFSV2PROC NFSV2PROC_ROOT;
MACRO_NFSV2PROC NFSV2PROC_SETATTR;
MACRO_NFSV2PROC NFSV2PROC_STATFS;
MACRO_NFSV2PROC NFSV2PROC_SYMLINK;
MACRO_NFSV2PROC NFSV2PROC_WRITE;
MACRO_NFSV2PROC NFSV2PROC_WRITECACHE;
MACRO_NFSV3ACCESS NFSV3ACCESS_DELETE;
MACRO_NFSV3ACCESS NFSV3ACCESS_EXECUTE;
MACRO_NFSV3ACCESS NFSV3ACCESS_EXTEND;
MACRO_NFSV3ACCESS NFSV3ACCESS_LOOKUP;
MACRO_NFSV3ACCESS NFSV3ACCESS_MODIFY;
MACRO_NFSV3ACCESS NFSV3ACCESS_READ;
MACRO_NFSV3CREATE NFSV3CREATE_EXCLUSIVE;
MACRO_NFSV3CREATE NFSV3CREATE_GUARDED;
MACRO_NFSV3CREATE NFSV3CREATE_UNCHECKED;
MACRO_NFSV3FSINFO NFSV3FSINFO_CANSETTIME;
MACRO_NFSV3FSINFO NFSV3FSINFO_HOMOGENEOUS;
MACRO_NFSV3FSINFO NFSV3FSINFO_LINK;
MACRO_NFSV3FSINFO NFSV3FSINFO_SYMLINK;
MACRO_NFSV3SATTRTIME NFSV3SATTRTIME_DONTCHANGE;
MACRO_NFSV3SATTRTIME NFSV3SATTRTIME_TOCLIENT;
MACRO_NFSV3SATTRTIME NFSV3SATTRTIME_TOSERVER;
MACRO_NFSV3WRITE NFSV3WRITE_DATASYNC;
MACRO_NFSV3WRITE NFSV3WRITE_FILESYNC;
MACRO_NFSV3WRITE NFSV3WRITE_UNSTABLE;
MACRO_NFSX NFSX_UNSIGNED;
MACRO_NFSX NFSX_V2COOKIE;
MACRO_NFSX NFSX_V2FATTR;
MACRO_NFSX NFSX_V2FH;
MACRO_NFSX NFSX_V2SATTR;
MACRO_NFSX NFSX_V2STATFS;
MACRO_NFSX NFSX_V3COOKIEVERF;
MACRO_NFSX NFSX_V3CREATEVERF;
MACRO_NFSX NFSX_V3FATTR;
MACRO_NFSX NFSX_V3FHMAX;
MACRO_NFSX NFSX_V3FSINFO;
MACRO_NFSX NFSX_V3PATHCONF;
MACRO_NFSX NFSX_V3POSTOPATTR;
MACRO_NFSX NFSX_V3SATTR;
MACRO_NFSX NFSX_V3STATFS;
MACRO_NFSX NFSX_V3WCCDATA;
MACRO_NFSX NFSX_V3WRITEVERF;
MACRO_NFS_NODEALLOC NFS_ARGSVERSION;
MACRO_NFS NFS_DEFRAHEAD;
MACRO_NFS NFS_DIRBLKSIZ;
MACRO_NFS_NFSSTATS NFS_FABLKSIZE;
MACRO_NFS NFS_GATHERDELAY;
MACRO_NFS NFS_KERBCLOCKSKEW;
MACRO_NFS NFS_KERBTTL;
MACRO_NFS NFS_MAXASYNCDAEMON;
MACRO_NFS NFS_MAXATTRTIMO;
MACRO_NFS_NFSSTATS NFS_MAXDATA;
MACRO_NFS_NFSSTATS NFS_MAXDGRAMDATA;
MACRO_NFS NFS_MAXGATHERDELAY;
MACRO_NFS NFS_MAXGRPS;
MACRO_NFS NFS_MAXIOVEC;
MACRO_NFS_NFSSTATS NFS_MAXNAMLEN;
MACRO_NFS_NFSSTATS NFS_MAXPACKET;
MACRO_NFS_NFSSTATS NFS_MAXPATHLEN;
MACRO_NFS_NFSSTATS NFS_MAXPKTHDR;
MACRO_NFS NFS_MAXRAHEAD;
MACRO_NFS NFS_MAXREXMIT;
MACRO_NFS NFS_MAXUIDHASH;
MACRO_NFS NFS_MAXWINDOW;
MACRO_NFS NFS_MINATTRTIMO;
MACRO_NFS_NFSSTATS NFS_MINPACKET;
MACRO_NFS_NODEALLOC NFS_MNTALLOC;
MACRO_NFS_NFSSTATS NFS_MUIDHASHSIZ;
MACRO_NFS_NFSSTATS NFS_NFSPRIVPORT;
MACRO_NFS_NFSSTATS NFS_NFSSTATS;
MACRO_NFS_NODEALLOC NFS_NODEALLOC;
MACRO_NFS_NPROCS NFS_NPROCS;
MACRO_NFS_NFSSTATS NFS_OK;
MACRO_NFS_NFSSTATS NFS_PORT;
MACRO_NFS_NFSSTATS NFS_PROG;
MACRO_NFS NFS_READDIRSIZE;
MACRO_NFS NFS_RETRANS;
MACRO_NFS NFS_RSIZE;
MACRO_NFS_SMALLFH NFS_SMALLFH;
MACRO_NFS_NODEALLOC NFS_SVCALLOC;
MACRO_NFS NFS_TICKINTVL;
MACRO_NFS_NODEALLOC NFS_UIDALLOC;
MACRO_NFS_NFSSTATS NFS_V2MAXDATA;
MACRO_NFS_NFSSTATS NFS_VER2;
MACRO_NFS_NFSSTATS NFS_VER3;
MACRO_NFS_NFSSTATS NFS_WDELAYHASHSIZ;
MACRO_NFS NFS_WSIZE;
MACRO_NGROUPS NGROUPS;
MACRO_NAME NGROUPS_MAX;
MACRO_NIBIND NIBIND_BIND;
MACRO_NIBIND NIBIND_CREATECLONE;
MACRO_NIBIND NIBIND_CREATEMASTER;
MACRO_NIBIND NIBIND_DESTROYDOMAIN;
MACRO_NIBIND NIBIND_GETREGISTER;
MACRO_NIBIND NIBIND_LISTREG;
MACRO_NIBIND NIBIND_MAXREGS;
MACRO_NIBIND NIBIND_PING;
MACRO_NIBIND NIBIND_PROG;
MACRO_NIBIND NIBIND_REGISTER;
MACRO_NIBIND NIBIND_UNREGISTER;
MACRO_NIBIND NIBIND_VERS;
MACRO_NIOPIDS NIOPIDS;
ni_status NI_ALIVE;
ni_status NI_AUTHERROR;
ni_status NI_BADID;
ni_status NI_BADOP;
ni_status NI_CANTFINDADDRESS;
MACRO_NI NI_DGRAM;
ni_status NI_DUPTAG;
ni_status NI_FAILED;
MACRO_NI_QTYPE NI_FQDN_FLAG_VALIDTTL;
MACRO_NI_NAME NI_IDLIST_MAXLEN;
MACRO_NI_INDEX NI_INDEX_NULL;
ni_status NI_INVALIDDOMAIN;
ni_status NI_MASTERBUSY;
MACRO_NI NI_MAXHOST;
MACRO_NI NI_MAXSERV;
MACRO_NI_NAME NI_NAMELIST_MAXLEN;
MACRO_NI NI_NAMEREQD;
MACRO_NI_NAME NI_NAME_MAXLEN;
ni_status NI_NETROOT;
MACRO_NI_QTYPE NI_NODEADDR_FLAG_ALL;
MACRO_NI_QTYPE NI_NODEADDR_FLAG_ANYCAST;
MACRO_NI_QTYPE NI_NODEADDR_FLAG_COMPAT;
MACRO_NI_QTYPE NI_NODEADDR_FLAG_GLOBAL;
MACRO_NI_QTYPE NI_NODEADDR_FLAG_LINKLOCAL;
MACRO_NI_QTYPE NI_NODEADDR_FLAG_SITELOCAL;
MACRO_NI_QTYPE NI_NODEADDR_FLAG_TRUNCATE;
ni_status NI_NODIR;
MACRO_NI NI_NOFQDN;
ni_status NI_NONAME;
ni_status NI_NOPROP;
ni_status NI_NORESPONSE;
ni_status NI_NOSPACE;
ni_status NI_NOTAG;
ni_status NI_NOTEMPTY;
ni_status NI_NOTMASTER;
ni_status NI_NOUSER;
MACRO_NI NI_NUMERICHOST;
MACRO_NI NI_NUMERICSERV;
ni_status NI_OK;
ni_status NI_PERM;
MACRO_NI_NAME NI_PROG;
MACRO_NI_NAME NI_PROPLIST_MAXLEN;
MACRO_NI_QTYPE NI_QTYPE_DNSNAME;
MACRO_NI_QTYPE NI_QTYPE_FQDN;
MACRO_NI_QTYPE NI_QTYPE_IPV4ADDR;
MACRO_NI_QTYPE NI_QTYPE_NODEADDR;
MACRO_NI_QTYPE NI_QTYPE_NOOP;
MACRO_NI_QTYPE NI_QTYPE_SUPTYPES;
ni_status NI_RDONLY;
ni_status NI_SERIAL;
ni_status NI_STALE;
MACRO_NI_QTYPE NI_SUPTYPE_FLAG_COMPRESS;
ni_status NI_SYSTEMERR;
ni_status NI_UNRELATED;
MACRO_NI_NAME NI_VERS;
MACRO_NI NI_WITHSCOPEID;
MACRO_NKE NKE_OK;
MACRO_NKE NKE_REMOVE;
MACRO_NL0 NL0;
MACRO_NL0 NL1;
MACRO_NL0 NL2;
MACRO_NL3 NL3;
MACRO_ANYP NLDELAY;
MACRO_NLIMITS NLIMITS;
MACRO_NLM NLM_CANCEL;
MACRO_NLM NLM_CANCEL_MSG;
MACRO_NLM NLM_CANCEL_RES;
MACRO_NLM NLM_FREE_ALL;
MACRO_NLM NLM_GRANTED;
MACRO_NLM NLM_GRANTED_MSG;
MACRO_NLM NLM_GRANTED_RES;
MACRO_NLM NLM_LOCK;
MACRO_NLM NLM_LOCK_MSG;
MACRO_NLM NLM_LOCK_RES;
MACRO_NLM NLM_NM_LOCK;
MACRO_NLM NLM_PROG;
MACRO_NLM NLM_SHARE;
MACRO_NLM NLM_TEST;
MACRO_NLM NLM_TEST_MSG;
MACRO_NLM NLM_TEST_RES;
MACRO_NLM NLM_UNLOCK;
MACRO_NLM NLM_UNLOCK_MSG;
MACRO_NLM NLM_UNLOCK_RES;
MACRO_NLM NLM_UNSHARE;
MACRO_NLM NLM_VERS;
MACRO_NLM NLM_VERSX;
MACRO_NL NL_ARGMAX;
MACRO_NL NL_LANGMAX;
MACRO_NL NL_MSGMAX;
MACRO_NL NL_NMAX;
MACRO_NL NL_SETMAX;
MACRO_NL NL_TEXTMAX;
MACRO_NMAGIC NMAGIC;
MACRO_NMBCLUSTERS NMBCLUSTERS;
MACRO_NODEV NODEV;
MACRO_NOERROR NOERROR;
MACRO_NGROUPS NOFILE;
MACRO_ALLDELAY NOFLSH;
MACRO_NOGROUP NOGROUP;
MACRO_ALLDELAY NOHANG;
MACRO_ECHOKE NOKERNINFO;
MACRO_NOP NOP;
MACRO_NOTIFY NOTIFY_N_DIST;
MACRO_NXDOMAIN NOTIMP;
MACRO_NOT NOT_HERE;
MACRO_NO_RECOVERY NO_ADDRESS;
MACRO_NO_RECOVERY NO_DATA;
MACRO_NO NO_JUSTIFICATION;
MACRO_NO_RECOVERY NO_RECOVERY;
MACRO_NO_TKT NO_TKT_FIL;
MACRO_NPAPSERVERS NPAPSERVERS;
MACRO_NPAPSESSIONS NPAPSESSIONS;
MACRO_NPIDS NPIDS;
MACRO_NQNFSPROC NQNFSPROC_EVICTED;
MACRO_NQNFSPROC NQNFSPROC_GETLEASE;
MACRO_NQNFSPROC NQNFSPROC_VACATED;
$FA613653AF18EE83F52363A02FF6739C NSAdminApplicationDirectory;
$FA613653AF18EE83F52363A02FF6739C NSAllApplicationsDirectory;
$349CDD1D13F7DF0473388D33C8CD4390 NSAllDomainsMask;
$FA613653AF18EE83F52363A02FF6739C NSAllLibrariesDirectory;
$FA613653AF18EE83F52363A02FF6739C NSApplicationDirectory;
$FA613653AF18EE83F52363A02FF6739C NSCoreServiceDirectory;
$FA613653AF18EE83F52363A02FF6739C NSDemoApplicationDirectory;
$FA613653AF18EE83F52363A02FF6739C NSDeveloperApplicationDirectory;
$FA613653AF18EE83F52363A02FF6739C NSDeveloperDirectory;
$FA613653AF18EE83F52363A02FF6739C NSDocumentDirectory;
$FA613653AF18EE83F52363A02FF6739C NSDocumentationDirectory;
MACRO_PER_SEC NSEC_PER_SEC;
MACRO_NSEC NSEC_PER_USEC;
MACRO_NSIG NSIG;
MACRO_NSLC NSLC;
$FA613653AF18EE83F52363A02FF6739C NSLibraryDirectory;
$349CDD1D13F7DF0473388D33C8CD4390 NSLocalDomainMask;
$349CDD1D13F7DF0473388D33C8CD4390 NSNetworkDomainMask;
$349CDD1D13F7DF0473388D33C8CD4390 NSSystemDomainMask;
$FA613653AF18EE83F52363A02FF6739C NSUserDirectory;
$349CDD1D13F7DF0473388D33C8CD4390 NSUserDomainMask;
MACRO_NS NS_NOTIFY_OP;
MACRO_NTELOPTS NTELOPTS;
MACRO_OTTYDISC NTTYDISC;
MACRO_NULL NULL;
MACRO_NULLPROC NULLPROC;
MACRO_NULL_xdrproc NULL_xdrproc_t;
MACRO_NUMCOUNT NUMCOUNT;
MACRO_NUMWRITE NUMWRITE;
MACRO_NUM_ADB NUM_ADB_ADDRESSES;
MACRO_NUM_ADB_KEYCODES NUM_ADB_KEYCODES;
MACRO_NUM NUM_STATIC_TOKENS;
MACRO_NXDOMAIN NXDOMAIN;
MACRO_NZERO NZERO;
MACRO_N N_ABS;
MACRO_N_GSYM N_BCOMM;
MACRO_N_GSYM N_BINCL;
MACRO_N_GSYM N_BSLINE;
MACRO_N N_BSS;
MACRO_N_CALLOUT N_CALLOUT_PRI;
MACRO_N N_COMM;
MACRO_N N_DATA;
MACRO_N_GSYM N_DSLINE;
MACRO_N_GSYM N_ECOML;
MACRO_N_GSYM N_ECOMM;
MACRO_N_GSYM N_EINCL;
MACRO_N_GSYM N_ENTRY;
MACRO_N_GSYM N_EXCL;
MACRO_N N_EXT;
MACRO_N N_FN;
MACRO_N_GSYM N_FNAME;
MACRO_N_GSYM N_FUN;
MACRO_N_GSYM N_GSYM;
MACRO_N_GSYM N_LBRAC;
MACRO_N_GSYM N_LCSYM;
MACRO_N_GSYM N_LENG;
MACRO_N_GSYM N_LSYM;
MACRO_N_GSYM N_MAIN;
MACRO_N_GSYM N_PC;
MACRO_N_GSYM N_PSYM;
MACRO_N_GSYM N_RBRAC;
MACRO_N_GSYM N_RSYM;
MACRO_N_GSYM N_SLINE;
MACRO_N_GSYM N_SO;
MACRO_N_GSYM N_SOL;
MACRO_N_GSYM N_SSYM;
MACRO_N N_STAB;
MACRO_N_GSYM N_STSYM;
MACRO_N N_TEXT;
MACRO_N N_TYPE;
MACRO_N N_UNDF;
MACRO_NeXTBSD NeXTBSD;
MACRO_NeXTBSD4 NeXTBSD4_0;
MACRO_OARMAG1 OARMAG1;
MACRO_OARMAG2 OARMAG2;
MACRO_IF_NAME OBJECT_SIZE;
MACRO_OBUFSIZ OBUFSIZ;
MACRO_ODBCVER ODBCVER;
MACRO_ODBC ODBC_ADD_DSN;
MACRO_ODBC ODBC_ADD_SYS_DSN;
MACRO_ODBC ODBC_BOTH_DSN;
MACRO_ODBC ODBC_CONFIG_DRIVER;
MACRO_ODBC ODBC_CONFIG_DRIVER_MAX;
MACRO_ODBC ODBC_CONFIG_DSN;
MACRO_ODBC ODBC_CONFIG_SYS_DSN;
MACRO_ODBC ODBC_ERROR_COMPONENT_NOT_FOUND;
MACRO_ODBC ODBC_ERROR_CREATE_DSN_FAILED;
MACRO_ODBC ODBC_ERROR_DRIVER_SPECIFIC;
MACRO_ODBC ODBC_ERROR_GENERAL_ERR;
MACRO_ODBC ODBC_ERROR_INVALID_BUFF_LEN;
MACRO_ODBC ODBC_ERROR_INVALID_DSN;
MACRO_ODBC ODBC_ERROR_INVALID_HWND;
MACRO_ODBC ODBC_ERROR_INVALID_INF;
MACRO_ODBC ODBC_ERROR_INVALID_KEYWORD_VALUE;
MACRO_ODBC ODBC_ERROR_INVALID_LOG_FILE;
MACRO_ODBC ODBC_ERROR_INVALID_NAME;
MACRO_ODBC ODBC_ERROR_INVALID_PARAM_SEQUENCE;
MACRO_ODBC ODBC_ERROR_INVALID_PATH;
MACRO_ODBC ODBC_ERROR_INVALID_REQUEST_TYPE;
MACRO_ODBC ODBC_ERROR_INVALID_STR;
MACRO_ODBC ODBC_ERROR_LOAD_LIB_FAILED;
MACRO_ODBC ODBC_ERROR_OUTPUT_STRING_TRUNCATED;
MACRO_ODBC ODBC_ERROR_OUT_OF_MEM;
MACRO_ODBC ODBC_ERROR_REMOVE_DSN_FAILED;
MACRO_ODBC ODBC_ERROR_REQUEST_FAILED;
MACRO_ODBC ODBC_ERROR_USAGE_UPDATE_FAILED;
MACRO_ODBC ODBC_ERROR_USER_CANCELED;
MACRO_ODBC ODBC_ERROR_WRITING_SYSINFO_FAILED;
MACRO_ODBC ODBC_INSTALL_COMPLETE;
MACRO_ODBC ODBC_INSTALL_DRIVER;
MACRO_ODBC ODBC_INSTALL_INQUIRY;
MACRO_ODBC ODBC_REMOVE_DEFAULT_DSN;
MACRO_ODBC ODBC_REMOVE_DRIVER;
MACRO_ODBC ODBC_REMOVE_DSN;
MACRO_ODBC ODBC_REMOVE_SYS_DSN;
MACRO_ODBC ODBC_SYSTEM_DSN;
MACRO_ODBC ODBC_USER_DSN;
MACRO_TANDEM ODDP;
MACRO_OID OID_AUTO;
MACRO_OK OK;
MACRO_OLD_ENV OLD_ENV_VALUE;
MACRO_OLD_ENV OLD_ENV_VAR;
MACRO_OLD OLD_MEMORY_OBJECT_ATTRIBUTE_INFO;
MACRO_OLD OLD_MEMORY_OBJECT_BEHAVIOR_INFO;
MACRO_OMAGIC OMAGIC;
MACRO_OPOST ONLCR;
MACRO_OPOST ONOEOT;
MACRO_NAME OPEN_MAX;
MACRO_OPOST OPOST;
MACRO_OPTION OPTION_LEFT;
MACRO_OPTION OPTION_RIGHT;
MACRO_ORDINARY ORDINARY;
$3998B369563C3E922C9C4F0BF606DBF3 OSBigEndian;
$3998B369563C3E922C9C4F0BF606DBF3 OSLittleEndian;
$3998B369563C3E922C9C4F0BF606DBF3 OSUnknownByteOrder;
MACRO_OTIOCCONS OTIOCCONS;
MACRO_OTTYDISC OTTYDISC;
MACRO_OVERFLOW OVERFLOW;
MACRO_OVERRIDE OVERRIDE_UNKNOWN_PERMISSIONS;
MACRO_OPOST OXTABS;
MACRO_O O_ACCMODE;
MACRO_O_VISIBLE O_ACTIVE;
MACRO_O_POPUP O_ALERT;
MACRO_O_NONBLOCK O_APPEND;
MACRO_O_NONBLOCK O_ASYNC;
MACRO_O_VISIBLE O_AUTOSKIP;
MACRO_O_VISIBLE O_BLANK;
MACRO_O_VISIBLE O_BS_OVERLOAD;
MACRO_O_NONBLOCK O_CREAT;
MACRO_O_VISIBLE O_EDIT;
MACRO_O_NONBLOCK O_EXCL;
MACRO_O_NONBLOCK O_EXLOCK;
MACRO_O_NONBLOCK O_FSYNC;
MACRO_O_ONEVALUE O_IGNORECASE;
MACRO_O_NDELAY O_NDELAY;
MACRO_O_VISIBLE O_NL_OVERLOAD;
MACRO_O_NONBLOCK O_NOCTTY;
MACRO_O_NONBLOCK O_NOFOLLOW;
MACRO_O_NONBLOCK O_NONBLOCK;
MACRO_O_ONEVALUE O_NONCYCLIC;
MACRO_O_VISIBLE O_NULLOK;
MACRO_O_ONEVALUE O_ONEVALUE;
MACRO_O_VISIBLE O_PASSOK;
MACRO_O_POPUP O_POPUP;
MACRO_O_VISIBLE O_PUBLIC;
MACRO_O O_RDONLY;
MACRO_O O_RDWR;
MACRO_O_ONEVALUE O_ROWMAJOR;
MACRO_O_ONEVALUE O_SELECTABLE;
MACRO_O_NONBLOCK O_SHLOCK;
MACRO_O_ONEVALUE O_SHOWDESC;
MACRO_O_ONEVALUE O_SHOWMATCH;
MACRO_O_VISIBLE O_STATIC;
MACRO_O_NONBLOCK O_TRUNC;
MACRO_O_VISIBLE O_VISIBLE;
MACRO_O_VISIBLE O_WRAP;
MACRO_O O_WRONLY;
MACRO_PACKETSZ PACKETSZ;
MACRO_PAM PAM_ABORT;
MACRO_PAM PAM_ACCT_EXPIRED;
MACRO_PAM PAM_AUTHINFO_UNAVAIL;
MACRO_PAM_SILENT PAM_AUTHTOK;
MACRO_PAM PAM_AUTHTOK_DISABLE_AGING;
MACRO_PAM PAM_AUTHTOK_ERR;
MACRO_PAM PAM_AUTHTOK_EXPIRED;
MACRO_PAM PAM_AUTHTOK_LOCK_BUSY;
MACRO_PAM PAM_AUTHTOK_RECOVER_ERR;
MACRO_PAM PAM_AUTH_ERR;
MACRO_PAM PAM_BAD_ITEM;
MACRO_PAM_SILENT PAM_BINARY_PROMPT;
MACRO_PAM_SILENT PAM_BPC_DONE;
MACRO_PAM_SILENT PAM_BPC_ERROR;
MACRO_PAM_SILENT PAM_BPC_FAIL;
MACRO_PAM_SILENT PAM_BPC_FALSE;
MACRO_PAM_SILENT PAM_BPC_GETENV;
MACRO_PAM_SILENT PAM_BPC_OK;
MACRO_PAM_SILENT PAM_BPC_PASS;
MACRO_PAM_SILENT PAM_BPC_PROMPT;
MACRO_PAM_SILENT PAM_BPC_PUTENV;
MACRO_PAM_SILENT PAM_BPC_SELECT;
MACRO_PAM_SILENT PAM_BPC_TEXT;
MACRO_PAM_SILENT PAM_BPC_TRUE;
MACRO_PAM_SILENT PAM_BP_MAX_LENGTH;
MACRO_PAM PAM_BUF_ERR;
MACRO_PAM_SILENT PAM_CHANGE_EXPIRED_AUTHTOK;
MACRO_PAM_SILENT PAM_CONV;
MACRO_PAM PAM_CONV_AGAIN;
MACRO_PAM PAM_CONV_ERR;
MACRO_PAM PAM_CRED_ERR;
MACRO_PAM PAM_CRED_EXPIRED;
MACRO_PAM PAM_CRED_INSUFFICIENT;
MACRO_PAM PAM_CRED_UNAVAIL;
MACRO_PAM_SILENT PAM_DATA_REPLACE;
MACRO_PAM_SILENT PAM_DATA_SILENT;
MACRO_PAM_SILENT PAM_DELETE_CRED;
MACRO_PAM_SILENT PAM_DISALLOW_NULL_AUTHTOK;
MACRO_PAM_DYLD PAM_DYLD;
MACRO_PAM_SILENT PAM_ERROR_MSG;
MACRO_PAM_SILENT PAM_ESTABLISH_CRED;
MACRO_PAM_SILENT PAM_FAIL_DELAY;
MACRO_PAM PAM_IGNORE;
MACRO_PAM PAM_INCOMPLETE;
MACRO_PAM PAM_MAXTRIES;
MACRO_PAM_SILENT PAM_MAX_MSG_SIZE;
MACRO_PAM_SILENT PAM_MAX_NUM_MSG;
MACRO_PAM_SILENT PAM_MAX_RESP_SIZE;
MACRO_PAM PAM_MODULE_UNKNOWN;
MACRO_PAM PAM_NEW_AUTHTOK_REQD;
MACRO_PAM PAM_NO_MODULE_DATA;
MACRO_PAM_SILENT PAM_OLDAUTHTOK;
MACRO_PAM PAM_OPEN_ERR;
MACRO_PAM_SILENT PAM_OPT_DEBUG;
MACRO_PAM_SILENT PAM_OPT_ECHO_PASS;
MACRO_PAM_SILENT PAM_OPT_NO_WARN;
MACRO_PAM_SILENT PAM_OPT_TRY_FIRST_PASS;
MACRO_PAM_SILENT PAM_OPT_USE_FIRST_PASS;
MACRO_PAM_SILENT PAM_OPT_USE_MAPPED_PASS;
MACRO_PAM PAM_PERM_DENIED;
MACRO_PAM_SILENT PAM_PRELIM_CHECK;
MACRO_PAM_SILENT PAM_PROMPT_ECHO_OFF;
MACRO_PAM_SILENT PAM_PROMPT_ECHO_ON;
MACRO_PAM_SILENT PAM_RADIO_TYPE;
MACRO_PAM_SILENT PAM_REFRESH_CRED;
MACRO_PAM_SILENT PAM_REINITIALIZE_CRED;
MACRO_PAM_SILENT PAM_RHOST;
MACRO_PAM_SILENT PAM_RUSER;
MACRO_PAM_SILENT PAM_SERVICE;
MACRO_PAM PAM_SERVICE_ERR;
MACRO_PAM PAM_SESSION_ERR;
MACRO_PAM_SILENT PAM_SILENT;
MACRO_PAM PAM_SUCCESS;
MACRO_PAM PAM_SYMBOL_ERR;
MACRO_PAM PAM_SYSTEM_ERR;
MACRO_PAM_SILENT PAM_TEXT_INFO;
MACRO_PAM PAM_TRY_AGAIN;
MACRO_PAM_SILENT PAM_TTY;
MACRO_PAM_SILENT PAM_UPDATE_AUTHTOK;
MACRO_PAM_SILENT PAM_USER;
MACRO_PAM_SILENT PAM_USER_PROMPT;
MACRO_PAM PAM_USER_UNKNOWN;
MACRO_PAP PAP_TIMEOUT;
MACRO_CS8 PARENB;
MACRO_IGNBRK PARMRK;
MACRO_CS8 PARODD;
MACRO_ALLDELAY PASS8;
MACRO_PASS PASS_MAX;
MACRO_NAME PATH_MAX;
MACRO_PCAP PCAP_ERRBUF_SIZE;
MACRO_PCAP PCAP_VERSION_MAJOR;
MACRO_PCAP PCAP_VERSION_MINOR;
MACRO_PRIMASK PCATCH;
MACRO_ENDIAN PDP_ENDIAN;
MACRO_ALLDELAY PENDIN;
MACRO_PERMISSION PERMISSION_DENIED;
MACRO_PFKEYV2 PFKEYV2_REVISION;
MACRO_PFKEY PFKEY_SOFT_LIFETIME_RATE;
MACRO_PF PF_APPLETALK;
MACRO_PF PF_CCITT;
MACRO_PF PF_CHAOS;
MACRO_PF PF_CNT;
MACRO_PF PF_COIP;
MACRO_PF PF_DATAKIT;
MACRO_PF PF_DECnet;
MACRO_PF PF_DLI;
MACRO_PF PF_ECMA;
MACRO_PF PF_HYLINK;
MACRO_PF PF_IMPLINK;
MACRO_PF PF_INET;
MACRO_PF PF_INET6;
MACRO_PF PF_IPX;
MACRO_PF PF_ISDN;
MACRO_PF PF_ISO;
MACRO_PF PF_KEY;
MACRO_PF_KEY PF_KEY_V2;
MACRO_PF PF_LAT;
MACRO_PF PF_LINK;
MACRO_PF PF_LOCAL;
MACRO_PF PF_MAX;
MACRO_PF PF_NATM;
MACRO_PF PF_NDRV;
MACRO_PF PF_NETBIOS;
MACRO_PF PF_NS;
MACRO_PF PF_OSI;
MACRO_PF PF_PIP;
MACRO_PF PF_PPP;
MACRO_PF PF_PUP;
MACRO_PF PF_ROUTE;
MACRO_PF PF_RTIP;
MACRO_PF PF_SIP;
MACRO_PF PF_SNA;
MACRO_PF PF_SYSTEM;
MACRO_PF PF_UNIX;
MACRO_PF PF_UNSPEC;
MACRO_PF PF_XTP;
MACRO_PGOFSET PGOFSET;
MACRO_PGSHIFT PGSHIFT;
MACRO_PIDLOCK PIDLOCK_NONBLOCK;
MACRO_PIDLOCK PIDLOCK_USEHOSTNAME;
MACRO_PIM6 PIM6_REG_MINLEN;
MACRO_PIM PIM_MINLEN;
MACRO_PIM_REGISTER PIM_NULL_REGISTER;
MACRO_PIM_REGISTER PIM_REGISTER;
MACRO_PIM PIM_VERSION;
MACRO_PSWP PINOD;
MACRO_PIPE PIPE_BUF;
MACRO_PK PK_SYSCALL_BEGIN;
MACRO_PLOCK PLOCK;
MACRO_PLOSS PLOSS;
MACRO_PL PL_SHAREMOD;
MACRO_PMAPPORT PMAPPORT;
MACRO_PMAPPROC PMAPPROC_CALLIT;
MACRO_PMAPPROC PMAPPROC_DUMP;
MACRO_PMAPPROC PMAPPROC_GETPORT;
MACRO_PMAPPROC PMAPPROC_NULL;
MACRO_PMAPPROC PMAPPROC_SET;
MACRO_PMAPPROC PMAPPROC_UNSET;
MACRO_PMAPPROG PMAPPROG;
MACRO_PMAPVERS PMAPVERS;
MACRO_PMAPVERS_PROTO PMAPVERS_ORIG;
MACRO_PMAPVERS_PROTO PMAPVERS_PROTO;
MACRO_POLICYCLASS POLICYCLASS_FIXEDPRI;
MACRO_POLICY POLICY_FIFO;
MACRO_POLICY POLICY_NULL;
MACRO_POLICY POLICY_RR;
MACRO_POLICY POLICY_TIMESHARE;
MACRO_PORT_ONLINE PORT_ACTIVATING;
MACRO_PORT PORT_DEAD;
MACRO_IF_NAME PORT_DESC_SIZE;
MACRO_PORT_ONLINE PORT_ERR_BADRTMP;
MACRO_PORT_ONLINE PORT_ERR_CABLER;
MACRO_PORT_ONLINE PORT_ERR_NOZONE;
MACRO_PORT_ONLINE PORT_ERR_SEED;
MACRO_PORT_ONLINE PORT_ERR_STARTUP;
MACRO_PORT PORT_NULL;
MACRO_PORT_ONLINE PORT_OFFLINE;
MACRO_PORT_ONLINE PORT_ONERROR;
MACRO_PORT_ONLINE PORT_ONLINE;
MACRO_PORT_ONLINE PORT_SEEDING;
MACRO_POSIX POSIX_MADV_DONTNEED;
MACRO_POSIX POSIX_MADV_NORMAL;
MACRO_POSIX POSIX_MADV_RANDOM;
MACRO_POSIX POSIX_MADV_SEQUENTIAL;
MACRO_POSIX POSIX_MADV_WILLNEED;
MACRO_PPAUSE PPAUSE;
MACRO_PPC PPC_EXCEPTION_STATE;
MACRO_PPC PPC_FLOAT_STATE;
MACRO_PPC_NFP PPC_NFP_REGS;
MACRO_PPC_PGBYTES PPC_PGBYTES;
MACRO_PPC_PGBYTES PPC_PGSHIFT;
MACRO_PPC PPC_THREAD_STATE;
MACRO_STATE_MAX PPC_THREAD_STATE_MAX;
MACRO_PPC PPC_VECTOR_STATE;
MACRO_PPPDISC PPPDISC;
MACRO_PRCO PRCO_GETOPT;
MACRO_PRCO PRCO_NCMDS;
MACRO_PRCO PRCO_SETOPT;
MACRO_PRC PRC_HOSTDEAD;
MACRO_PRC PRC_HOSTUNREACH;
MACRO_PRC PRC_IFDOWN;
MACRO_PRC PRC_IFUP;
MACRO_PRC PRC_MSGSIZE;
MACRO_PRC PRC_NCMDS;
MACRO_PRC PRC_PARAMPROB;
MACRO_PRC PRC_QUENCH;
MACRO_PRC PRC_QUENCH2;
MACRO_PRC PRC_REDIRECT_HOST;
MACRO_PRC PRC_REDIRECT_NET;
MACRO_PRC PRC_REDIRECT_TOSHOST;
MACRO_PRC PRC_REDIRECT_TOSNET;
MACRO_PRC PRC_ROUTEDEAD;
MACRO_PRC PRC_TIMXCEED_INTRANS;
MACRO_PRC PRC_TIMXCEED_REASS;
MACRO_PRC PRC_UNREACH_ADMIN_PROHIB;
MACRO_PRC PRC_UNREACH_HOST;
MACRO_PRC PRC_UNREACH_NET;
MACRO_PRC PRC_UNREACH_PORT;
MACRO_PRC PRC_UNREACH_PROTOCOL;
MACRO_PRC PRC_UNREACH_SRCFAIL;
MACRO_PRELIM PRELIM;
MACRO_PSWP PRIBIO;
MACRO_PRIMASK PRIMASK;
MACRO_PRIO PRIO_MAX;
MACRO_PRIO PRIO_MIN;
MACRO_PRIO PRIO_PGRP;
MACRO_PRIO PRIO_PROCESS;
MACRO_PRIO PRIO_USER;
MACRO_PROCESSOR PROCESSOR_BASIC_INFO;
MACRO_PROCESSOR PROCESSOR_CPU_LOAD_INFO;
MACRO_PROCESSOR PROCESSOR_INFO_MAX;
MACRO_TASK_NULL PROCESSOR_NULL;
MACRO_PROCESSOR PROCESSOR_PM_CLR_PMC;
MACRO_PROCESSOR PROCESSOR_PM_REGS_INFO;
MACRO_PROCESSOR PROCESSOR_PM_SET_MMCR;
MACRO_PROCESSOR PROCESSOR_PM_SET_REGS;
MACRO_PROCESSOR_SET PROCESSOR_SET_BASIC_INFO;
MACRO_PROCESSOR_SET PROCESSOR_SET_ENABLED_POLICIES;
MACRO_PROCESSOR_SET PROCESSOR_SET_FIFO_DEFAULT;
MACRO_PROCESSOR_SET PROCESSOR_SET_FIFO_LIMITS;
MACRO_PROCESSOR PROCESSOR_SET_INFO_MAX;
MACRO_PROCESSOR_SET PROCESSOR_SET_LOAD_INFO;
MACRO_TASK_NULL PROCESSOR_SET_NULL;
MACRO_PROCESSOR_SET PROCESSOR_SET_RR_DEFAULT;
MACRO_PROCESSOR_SET PROCESSOR_SET_RR_LIMITS;
MACRO_PROCESSOR_SET PROCESSOR_SET_TIMESHARE_DEFAULT;
MACRO_PROCESSOR_SET PROCESSOR_SET_TIMESHARE_LIMITS;
MACRO_PROCESSOR PROCESSOR_TEMPERATURE;
MACRO_PROCESSOR PROCESSOR_TEMPERATURE_COUNT;
accept_stat PROC_UNAVAIL;
MACRO_PROFILE PROFILE_ITER_LIST_SECTION;
MACRO_PROFILE PROFILE_ITER_RELATIONS_ONLY;
MACRO_PROFILE PROFILE_ITER_SECTIONS_ONLY;
MACRO_PROF PROF_ADD_NOT_SECTION;
MACRO_PROF PROF_BAD_BOOLEAN;
MACRO_PROF PROF_BAD_GROUP_LVL;
MACRO_PROF PROF_BAD_INTEGER;
MACRO_PROF PROF_BAD_LINK_LIST;
MACRO_PROF PROF_BAD_NAMESET;
MACRO_PROF PROF_BAD_PARENT_PTR;
MACRO_PROF PROF_EINVAL;
MACRO_PROF PROF_END_OF_SECTIONS;
MACRO_PROF PROF_EXISTS;
MACRO_PROF PROF_EXTRA_CBRACE;
MACRO_PROF PROF_FAIL_OPEN;
MACRO_PROF PROF_INVALID_SECTION;
MACRO_PROF PROF_MAGIC_FILE;
MACRO_PROF PROF_MAGIC_FILE_DATA;
MACRO_PROF PROF_MAGIC_ITERATOR;
MACRO_PROF PROF_MAGIC_NODE;
MACRO_PROF PROF_MAGIC_PROFILE;
MACRO_PROF PROF_MAGIC_SECTION;
MACRO_PROF PROF_MISSING_OBRACE;
MACRO_PROF PROF_NO_PROFILE;
MACRO_PROF PROF_NO_RELATION;
MACRO_PROF PROF_NO_SECTION;
MACRO_PROF PROF_READ_ONLY;
MACRO_PROF PROF_RELATION_SYNTAX;
MACRO_PROF PROF_SECTION_NOTOP;
MACRO_PROF PROF_SECTION_SYNTAX;
MACRO_PROF PROF_SECTION_WITH_VALUE;
MACRO_PROF PROF_SET_SECTION_VALUE;
MACRO_PROF PROF_TOPSECTION_ITER_NOSUPP;
MACRO_PROF PROF_VERSION;
accept_stat PROG_MISMATCH;
accept_stat PROG_UNAVAIL;
MACRO_PROT PROT_EXEC;
MACRO_PROT PROT_NONE;
MACRO_PROT PROT_READ;
MACRO_PROT PROT_WRITE;
MACRO_ALLDELAY PRTERA;
MACRO_PRU PRU_ABORT;
MACRO_PRU PRU_ACCEPT;
MACRO_PRU PRU_ATTACH;
MACRO_PRU PRU_BIND;
MACRO_PRU PRU_CONNECT;
MACRO_PRU PRU_CONNECT2;
MACRO_PRU PRU_CONTROL;
MACRO_PRU PRU_DETACH;
MACRO_PRU PRU_DISCONNECT;
MACRO_PRU PRU_FASTTIMO;
MACRO_PRU PRU_LISTEN;
MACRO_PRU PRU_NREQ;
MACRO_PRU PRU_PEERADDR;
MACRO_PRU PRU_PROTORCV;
MACRO_PRU PRU_PROTOSEND;
MACRO_PRU PRU_RCVD;
MACRO_PRU PRU_RCVOOB;
MACRO_PRU PRU_SEND;
MACRO_PRU PRU_SENDOOB;
MACRO_PRU PRU_SEND_EOF;
MACRO_PRU PRU_SENSE;
MACRO_PRU PRU_SHUTDOWN;
MACRO_PRU PRU_SLOWTIMO;
MACRO_PRU PRU_SOCKADDR;
MACRO_PR PR_ADDR;
MACRO_PR PR_ATOMIC;
MACRO_PR PR_CONNREQUIRED;
MACRO_PR PR_FASTHZ;
MACRO_PR PR_IMPLOPCL;
MACRO_PR PR_LASTHDR;
MACRO_PR PR_RIGHTS;
MACRO_PR PR_SLOWHZ;
MACRO_PR PR_WANTRCVD;
MACRO_PSOCK PSOCK;
MACRO_PSWP PSWP;
MACRO_PTHREAD_CREATE PTHREAD_CANCEL_ASYNCHRONOUS;
MACRO_PTHREAD_CREATE PTHREAD_CANCEL_DEFERRED;
MACRO_PTHREAD_CREATE PTHREAD_CANCEL_DISABLE;
MACRO_PTHREAD_CREATE PTHREAD_CANCEL_ENABLE;
MACRO_PTHREAD_CREATE PTHREAD_CREATE_DETACHED;
MACRO_PTHREAD_CREATE PTHREAD_CREATE_JOINABLE;
MACRO_PTHREAD PTHREAD_DESTRUCTOR_ITERATIONS;
MACRO_PTHREAD_CREATE PTHREAD_EXPLICIT_SCHED;
MACRO_PTHREAD_CREATE PTHREAD_INHERIT_SCHED;
MACRO_PTHREAD PTHREAD_KEYS_MAX;
MACRO_PTHREAD_CREATE PTHREAD_MUTEX_DEFAULT;
MACRO_PTHREAD_CREATE PTHREAD_MUTEX_ERRORCHECK;
MACRO_PTHREAD_CREATE PTHREAD_MUTEX_NORMAL;
MACRO_PTHREAD_CREATE PTHREAD_MUTEX_RECURSIVE;
MACRO_PTHREAD_CREATE PTHREAD_PRIO_INHERIT;
MACRO_PTHREAD_CREATE PTHREAD_PRIO_NONE;
MACRO_PTHREAD_CREATE PTHREAD_PRIO_PROTECT;
MACRO_PTHREAD_CREATE PTHREAD_PROCESS_PRIVATE;
MACRO_PTHREAD_CREATE PTHREAD_PROCESS_SHARED;
MACRO_PTHREAD_CREATE PTHREAD_SCOPE_PROCESS;
MACRO_PTHREAD_CREATE PTHREAD_SCOPE_SYSTEM;
MACRO_PTHREAD PTHREAD_STACK_MIN;
MACRO_PTRDIFF PTRDIFF_MAX;
MACRO_PTRDIFF PTRDIFF_MIN;
MACRO_PRIMASK PTTYBLOCK;
MACRO_PT PT_ATTACH;
MACRO_PT PT_ATTACHEXC;
MACRO_PT PT_CONTINUE;
MACRO_PT PT_DENY_ATTACH;
MACRO_PT PT_DETACH;
MACRO_PT PT_FIRSTMACH;
MACRO_PT PT_FORCEQUOTA;
MACRO_PT PT_KILL;
MACRO_PT PT_READ_D;
MACRO_PT PT_READ_I;
MACRO_PT PT_READ_U;
MACRO_PT PT_SIGEXC;
MACRO_PT PT_STEP;
MACRO_PT PT_THUPDATE;
MACRO_PT PT_TRACE_ME;
MACRO_PT PT_WRITE_D;
MACRO_PT PT_WRITE_I;
MACRO_PT PT_WRITE_U;
MACRO_PUSER PUSER;
MACRO_PVFS PVFS;
MACRO_PSWP PVM;
MACRO_PSOCK PWAIT;
MACRO_PZERO PZERO;
MACRO_P P_ADVLOCK;
MACRO_P P_BTRACE;
MACRO_P P_CONTROLT;
MACRO_P P_EXEC;
MACRO_P P_FORCEQUOTA;
MACRO_P P_FSTRACE;
MACRO_P P_INMEM;
MACRO_P P_INVFORK;
MACRO_P P_KDEBUG;
MACRO_P P_NOATTACH;
MACRO_P P_NOCLDSTOP;
MACRO_P P_NOCLDWAIT;
MACRO_P P_NOSHLIB;
MACRO_P P_NOSWAP;
MACRO_P P_OWEUPC;
MACRO_P P_PHYSIO;
MACRO_P P_PPWAIT;
MACRO_P P_PROFIL;
MACRO_P P_REBOOT;
MACRO_P P_SELECT;
MACRO_P P_SIGEXC;
MACRO_P P_SINTR;
MACRO_P P_SSTEP;
MACRO_P P_SUGID;
MACRO_P P_SYSTEM;
MACRO_P P_TBE;
MACRO_P P_TIMEOUT;
MACRO_P P_TRACED;
MACRO_P P_TTYSLEEP;
MACRO_P P_VFORK;
MACRO_P P_WAITED;
MACRO_P P_WAITING;
MACRO_P P_WEXIT;
MACRO_QFIXEDSZ QFIXEDSZ;
MACRO_QF QF_GROUPS_PER_GB;
MACRO_QF QF_MAX_GROUPS;
MACRO_QF QF_MAX_USERS;
MACRO_QF QF_MIN_GROUPS;
MACRO_QF QF_MIN_USERS;
MACRO_QF QF_USERS_PER_GB;
MACRO_QF QF_VERSION;
MACRO_QMAGIC QMAGIC;
MACRO_SSIZE QUAD_MAX;
MACRO_QUAD QUAD_MIN;
MACRO_QUERY QUERY;
MACRO_QUERY_IS QUERY_IS_SYSTEM_REGION;
gqr_status Q_EPERM;
MACRO_Q Q_GETQUOTA;
gqr_status Q_NOQUOTA;
gqr_status Q_OK;
MACRO_Q Q_QUOTAOFF;
MACRO_Q Q_QUOTAON;
MACRO_Q Q_QUOTASTAT;
MACRO_Q Q_SETQUOTA;
MACRO_Q Q_SETUSE;
MACRO_Q Q_SYNC;
MACRO_RAND RAND_MAX;
MACRO_RANLIBSKEW RANLIBSKEW;
MACRO_TANDEM RAW;
MACRO_RAW RAW_PART;
MACRO_RB RB_ALTBOOT;
MACRO_RB RB_ASKNAME;
MACRO_RB RB_AUTOBOOT;
MACRO_RB RB_BOOT;
MACRO_RB RB_DFLTROOT;
MACRO_RB RB_HALT;
MACRO_RB RB_INITNAME;
MACRO_RB RB_KDB;
MACRO_RB RB_NOSYNC;
MACRO_RB RB_PANIC;
MACRO_RB RB_SINGLE;
MACRO_RB RB_UNIPROC;
MACRO_RD RD_AP_BADD;
MACRO_RD RD_AP_EXP;
MACRO_RD RD_AP_INCON;
MACRO_RD RD_AP_MODIFIED;
MACRO_RD RD_AP_MSG_TYPE;
MACRO_RD RD_AP_NOT_US;
MACRO_RD RD_AP_NYV;
MACRO_KDC_OK RD_AP_OK;
MACRO_RD RD_AP_ORDER;
MACRO_RD RD_AP_REPEAT;
MACRO_RD RD_AP_TIME;
MACRO_RD RD_AP_UNAUTHOR;
MACRO_RD RD_AP_UNDEC;
MACRO_RD RD_AP_VERSION;
MACRO_SZ REALM_SZ;
MACRO_CLOCK REALTIME_CLOCK;
MACRO_REC REC_EOF;
MACRO_REC REC_EOR;
MACRO_REC REC_ESC;
MACRO_REFUSED REFUSED;
$4EE0FB99968ADB58B01C3A33A60FE053 REGS_SAVED_ALL;
$4EE0FB99968ADB58B01C3A33A60FE053 REGS_SAVED_CALLER;
$4EE0FB99968ADB58B01C3A33A60FE053 REGS_SAVED_NONE;
MACRO_TVERSLEN REGTYPE;
MACRO_REG REG_ASSERT;
MACRO_REG REG_ATOI;
MACRO_REG REG_BACKR;
MACRO_REG REG_BADBR;
MACRO_REG REG_BADPAT;
MACRO_REG REG_BADRPT;
MACRO_REG REG_BASIC;
MACRO_REG REG_DUMP;
MACRO_REG REG_EBRACE;
MACRO_REG REG_EBRACK;
MACRO_REG REG_ECOLLATE;
MACRO_REG REG_ECTYPE;
MACRO_REG REG_EESCAPE;
MACRO_REG REG_EMPTY;
MACRO_REG REG_EPAREN;
MACRO_REG REG_ERANGE;
MACRO_REG REG_ESPACE;
MACRO_REG REG_ESUBREG;
MACRO_REG REG_EXTENDED;
MACRO_REG REG_ICASE;
MACRO_REG REG_INVARG;
MACRO_REG REG_ITOA;
MACRO_REG REG_LARGE;
MACRO_REG REG_NEWLINE;
MACRO_REG REG_NOMATCH;
MACRO_REG REG_NOSPEC;
MACRO_REG REG_NOSUB;
MACRO_REG REG_NOTBOL;
MACRO_REG REG_NOTEOL;
MACRO_REG REG_PEND;
MACRO_REG REG_STARTEND;
MACRO_REG REG_TRACE;
msg_type REPLY;
MACRO_REPORT REPORT_MOUSE_POSITION;
MACRO_REQ_LEFT REQ_BACK_PATTERN;
MACRO_REQ REQ_BEG_FIELD;
MACRO_REQ REQ_BEG_LINE;
MACRO_REQ_LEFT REQ_CLEAR_PATTERN;
MACRO_REQ REQ_CLR_EOF;
MACRO_REQ REQ_CLR_EOL;
MACRO_REQ REQ_CLR_FIELD;
MACRO_REQ REQ_DEL_CHAR;
MACRO_REQ REQ_DEL_LINE;
MACRO_REQ REQ_DEL_PREV;
MACRO_REQ REQ_DEL_WORD;
MACRO_REQ REQ_DOWN_CHAR;
MACRO_REQ REQ_DOWN_FIELD;
MACRO_REQ_LEFT REQ_DOWN_ITEM;
MACRO_REQ REQ_END_FIELD;
MACRO_REQ REQ_END_LINE;
MACRO_REQ REQ_FIRST_FIELD;
MACRO_REQ_LEFT REQ_FIRST_ITEM;
MACRO_REQ REQ_FIRST_PAGE;
MACRO_REQ REQ_INS_CHAR;
MACRO_REQ REQ_INS_LINE;
MACRO_REQ REQ_INS_MODE;
MACRO_REQ REQ_LAST_FIELD;
MACRO_REQ_LEFT REQ_LAST_ITEM;
MACRO_REQ REQ_LAST_PAGE;
MACRO_REQ REQ_LEFT_CHAR;
MACRO_REQ REQ_LEFT_FIELD;
MACRO_REQ_LEFT REQ_LEFT_ITEM;
MACRO_REQ REQ_NEW_LINE;
MACRO_REQ REQ_NEXT_CHAR;
MACRO_REQ REQ_NEXT_CHOICE;
MACRO_REQ REQ_NEXT_FIELD;
MACRO_REQ_LEFT REQ_NEXT_ITEM;
MACRO_REQ REQ_NEXT_LINE;
MACRO_REQ_LEFT REQ_NEXT_MATCH;
MACRO_REQ REQ_NEXT_PAGE;
MACRO_REQ REQ_NEXT_WORD;
MACRO_REQ REQ_OVL_MODE;
MACRO_REQ REQ_PREV_CHAR;
MACRO_REQ REQ_PREV_CHOICE;
MACRO_REQ REQ_PREV_FIELD;
MACRO_REQ_LEFT REQ_PREV_ITEM;
MACRO_REQ REQ_PREV_LINE;
MACRO_REQ_LEFT REQ_PREV_MATCH;
MACRO_REQ REQ_PREV_PAGE;
MACRO_REQ REQ_PREV_WORD;
MACRO_REQ REQ_RIGHT_CHAR;
MACRO_REQ REQ_RIGHT_FIELD;
MACRO_REQ_LEFT REQ_RIGHT_ITEM;
MACRO_REQ REQ_SCR_BCHAR;
MACRO_REQ REQ_SCR_BHPAGE;
MACRO_REQ REQ_SCR_BLINE;
MACRO_REQ REQ_SCR_BPAGE;
MACRO_REQ_LEFT REQ_SCR_DLINE;
MACRO_REQ_LEFT REQ_SCR_DPAGE;
MACRO_REQ REQ_SCR_FCHAR;
MACRO_REQ REQ_SCR_FHPAGE;
MACRO_REQ REQ_SCR_FLINE;
MACRO_REQ REQ_SCR_FPAGE;
MACRO_REQ REQ_SCR_HBHALF;
MACRO_REQ REQ_SCR_HBLINE;
MACRO_REQ REQ_SCR_HFHALF;
MACRO_REQ REQ_SCR_HFLINE;
MACRO_REQ_LEFT REQ_SCR_ULINE;
MACRO_REQ_LEFT REQ_SCR_UPAGE;
MACRO_REQ REQ_SFIRST_FIELD;
MACRO_REQ REQ_SLAST_FIELD;
MACRO_REQ REQ_SNEXT_FIELD;
MACRO_REQ REQ_SPREV_FIELD;
MACRO_REQ_LEFT REQ_TOGGLE_ITEM;
MACRO_REQ REQ_UP_CHAR;
MACRO_REQ REQ_UP_FIELD;
MACRO_REQ_LEFT REQ_UP_ITEM;
MACRO_REQ REQ_VALIDATION;
MACRO_RES_MAXNDOTS RES_AAONLY;
MACRO_RES_MAXNDOTS RES_DEBUG;
MACRO_RES_MAXNDOTS RES_DEFAULT;
MACRO_RES_MAXNDOTS RES_DEFNAMES;
MACRO_RES_MAXNDOTS RES_DNSRCH;
MACRO_RES_MAXNDOTS RES_IGNTC;
MACRO_RES_MAXNDOTS RES_INIT;
MACRO_RES_MAXNDOTS RES_INSECURE1;
MACRO_RES_MAXNDOTS RES_INSECURE2;
MACRO_RES_MAXNDOTS RES_MAXNDOTS;
MACRO_RES_MAXNDOTS RES_NOALIASES;
MACRO_RES_MAXNDOTS RES_PRF_ADD;
MACRO_RES_MAXNDOTS RES_PRF_ANS;
MACRO_RES_MAXNDOTS RES_PRF_AUTH;
MACRO_RES_MAXNDOTS RES_PRF_CLASS;
MACRO_RES_MAXNDOTS RES_PRF_CMD;
MACRO_RES_MAXNDOTS RES_PRF_HEAD1;
MACRO_RES_MAXNDOTS RES_PRF_HEAD2;
MACRO_RES_MAXNDOTS RES_PRF_HEADX;
MACRO_RES_MAXNDOTS RES_PRF_INIT;
MACRO_RES_MAXNDOTS RES_PRF_QUERY;
MACRO_RES_MAXNDOTS RES_PRF_QUES;
MACRO_RES_MAXNDOTS RES_PRF_REPLY;
MACRO_RES_MAXNDOTS RES_PRF_STATS;
MACRO_RES_MAXNDOTS RES_PRF_TTLID;
MACRO_RES_MAXNDOTS RES_PRIMARY;
MACRO_RES_MAXNDOTS RES_RECURSE;
MACRO_RES_MAXNDOTS RES_STAYOPEN;
MACRO_RES RES_TIMEOUT;
MACRO_RES_MAXNDOTS RES_USEVC;
MACRO_RETURN RETURN;
MACRO_RET RET_ERROR;
MACRO_RET_TKFIL RET_NOTKT;
MACRO_KDC_OK RET_OK;
MACRO_RET RET_SPECIAL;
MACRO_RET RET_SUCCESS;
MACRO_RET_TKFIL RET_TKFIL;
MACRO_COLL RE_DUP_MAX;
MACRO_RING RING_WAIT;
MACRO_RIPCMD RIPCMD_MAX;
MACRO_RIPCMD RIPCMD_REQUEST;
MACRO_RIPCMD RIPCMD_RESPONSE;
MACRO_RIPCMD RIPCMD_TRACEOFF;
MACRO_RIPCMD RIPCMD_TRACEON;
MACRO_RIPVERSION RIPVERSION;
MACRO_RLIMIT RLIMIT_CORE;
MACRO_RLIMIT RLIMIT_CPU;
MACRO_RLIMIT RLIMIT_DATA;
MACRO_RLIMIT RLIMIT_FSIZE;
MACRO_RLIMIT RLIMIT_MEMLOCK;
MACRO_RLIMIT RLIMIT_NOFILE;
MACRO_RLIMIT RLIMIT_NPROC;
MACRO_RLIMIT RLIMIT_RSS;
MACRO_RLIMIT RLIMIT_STACK;
MACRO_RLIM RLIM_INFINITY;
MACRO_RLIM RLIM_NLIMITS;
MACRO_RNF RNF_ACTIVE;
MACRO_RNF RNF_NORMAL;
MACRO_RNF RNF_ROOT;
$B8E8934C01BE5F02B50786E7D8A5B678 RN_NEAREST;
$B8E8934C01BE5F02B50786E7D8A5B678 RN_TOWARD_MINUS;
$B8E8934C01BE5F02B50786E7D8A5B678 RN_TOWARD_PLUS;
$B8E8934C01BE5F02B50786E7D8A5B678 RN_TOWARD_ZERO;
MACRO_AOUT ROSE_F;
MACRO_RPCAKN RPCAKN_FULLNAME;
MACRO_RPCAKN RPCAKN_NICKNAME;
MACRO_RPCAUTH RPCAUTH_KERB4;
MACRO_RPCAUTH RPCAUTH_MAXSIZ;
MACRO_RPCAUTH RPCAUTH_NQNFS;
MACRO_RPCAUTH RPCAUTH_NULL;
MACRO_RPCAUTH RPCAUTH_SHORT;
MACRO_RPCAUTH RPCAUTH_UNIX;
MACRO_RPCAUTH_UNIXGIDS RPCAUTH_UNIXGIDS;
MACRO_RPCGEN RPCGEN_VERSION;
MACRO_RPCMNT RPCMNT_DUMP;
MACRO_RPCMNT RPCMNT_EXPORT;
MACRO_RPCMNT RPCMNT_MOUNT;
MACRO_RPCMNT RPCMNT_NAMELEN;
MACRO_RPCMNT RPCMNT_PATHLEN;
MACRO_RPCMNT RPCMNT_UMNTALL;
MACRO_RPCMNT RPCMNT_UMOUNT;
MACRO_RPCMNT RPCMNT_VER1;
MACRO_RPCMNT RPCMNT_VER3;
MACRO_RPCPROG RPCPROG_MNT;
MACRO_RPCPROG_NFS RPCPROG_NFS;
MACRO_RPCSMALLMSGSIZE RPCSMALLMSGSIZE;
MACRO_RPCTEST RPCTEST_NULL_BATCH_PROC;
MACRO_RPCTEST RPCTEST_NULL_PROC;
MACRO_RPCTEST RPCTEST_PROGRAM;
MACRO_RPCTEST RPCTEST_VERSION;
MACRO_RPCVERF RPCVERF_MAXSIZ;
MACRO_RPCX RPCX_FULLBLOCK;
MACRO_RPCX RPCX_FULLVERF;
MACRO_RPCX RPCX_NICKVERF;
MACRO_RPC_ANYSOCK RPC_ANYSOCK;
MACRO_RPC_CALL RPC_AUTHERR;
clnt_stat RPC_AUTHERROR;
MACRO_RPC_CALL RPC_CALL;
clnt_stat RPC_CANTDECODEARGS;
clnt_stat RPC_CANTDECODERES;
clnt_stat RPC_CANTENCODEARGS;
clnt_stat RPC_CANTRECV;
clnt_stat RPC_CANTSEND;
clnt_stat RPC_FAILED;
MACRO_RPC_CALL RPC_GARBAGE;
reject_stat RPC_MISMATCH;
MACRO_RPC_CALL RPC_MSGACCEPTED;
MACRO_RPC_CALL RPC_MSGDENIED;
MACRO_RPC_MSG RPC_MSG_VERSION;
clnt_stat RPC_PMAPFAILURE;
clnt_stat RPC_PROCUNAVAIL;
MACRO_RPC_CALL RPC_PROGMISMATCH;
clnt_stat RPC_PROGNOTREGISTERED;
clnt_stat RPC_PROGUNAVAIL;
clnt_stat RPC_PROGVERSMISMATCH;
MACRO_RPC_CALL RPC_REPLY;
MACRO_RPC_SIZ RPC_REPLYSIZ;
MACRO_RPC_MSG RPC_SERVICE_PORT;
MACRO_RPC RPC_SIGBUF_SIZE;
MACRO_RPC_SIZ RPC_SIZ;
MACRO_RPC RPC_SUBSYSTEM_NULL;
clnt_stat RPC_SUCCESS;
clnt_stat RPC_SYSTEMERROR;
clnt_stat RPC_TIMEDOUT;
clnt_stat RPC_UNKNOWNHOST;
clnt_stat RPC_UNKNOWNPROTO;
MACRO_RPC_VER2 RPC_VER2;
clnt_stat RPC_VERSMISMATCH;
MACRO_RPM RPM_PCO_ADD;
MACRO_RPM RPM_PCO_CHANGE;
MACRO_RPM RPM_PCO_MAX;
MACRO_RPM RPM_PCO_SETGLOBAL;
MACRO_RQUOTAPROC RQUOTAPROC_GETACTIVEQUOTA;
MACRO_RQUOTAPROC RQUOTAPROC_GETQUOTA;
MACRO_RQUOTAPROG RQUOTAPROG;
MACRO_RQUOTAVERS RQUOTAVERS;
MACRO_RQ RQ_CLIENT_ADDR;
MACRO_RQ RQ_CLIENT_NAME;
MACRO_RQ RQ_CLIENT_SIN;
MACRO_RQ RQ_DAEMON;
MACRO_RQ RQ_FILE;
MACRO_RQ_PATHLEN RQ_PATHLEN;
MACRO_RQ RQ_SERVER_ADDR;
MACRO_RQ RQ_SERVER_NAME;
MACRO_RQ RQ_SERVER_SIN;
MACRO_RQ RQ_USER;
MACRO_RR0 RR0_BREAK;
MACRO_RR0 RR0_CTS;
MACRO_RR0 RR0_DCD;
MACRO_RR0 RR0_RXAVAIL;
MACRO_RR0 RR0_SYNC_HUNT;
MACRO_RR0 RR0_TXEMPTY;
MACRO_RR0 RR0_TXUNDER;
MACRO_RR0 RR0_ZERO_COUNT;
MACRO_RR10 RR10_LOOPSEND;
MACRO_RR10 RR10_MISS1;
MACRO_RR10 RR10_MISS2;
MACRO_RR10 RR10_ONLOOP;
MACRO_RR1 RR1_ALLSENT;
MACRO_RR1 RR1_EOF;
MACRO_RR1 RR1_FRAME;
MACRO_RR1 RR1_PARITY;
MACRO_RR1 RR1_RESCODE0;
MACRO_RR1 RR1_RESCODE1;
MACRO_RR1 RR1_RESCODE2;
MACRO_RR1 RR1_RXOVER;
MACRO_RR3 RR3_A_IP;
MACRO_RR3 RR3_A_RXIP;
MACRO_RR3 RR3_A_STATIP;
MACRO_RR3 RR3_A_TXIP;
MACRO_RR3 RR3_B_IP;
MACRO_RR3 RR3_B_RXIP;
MACRO_RR3 RR3_B_STATIP;
MACRO_RR3 RR3_B_TXIP;
MACRO_QFIXEDSZ RRFIXEDSZ;
MACRO_RRQ RRQ;
MACRO_RTAX RTAX_AUTHOR;
MACRO_RTAX RTAX_BRD;
MACRO_RTAX RTAX_DST;
MACRO_RTAX RTAX_GATEWAY;
MACRO_RTAX RTAX_GENMASK;
MACRO_RTAX RTAX_IFA;
MACRO_RTAX RTAX_IFP;
MACRO_RTAX RTAX_MAX;
MACRO_RTAX RTAX_NETMASK;
MACRO_RTA RTA_AUTHOR;
MACRO_RTA RTA_BRD;
MACRO_RTA RTA_DST;
MACRO_RTA RTA_GATEWAY;
MACRO_RTA RTA_GENMASK;
MACRO_RTA RTA_IFA;
MACRO_RTA RTA_IFP;
MACRO_RTA RTA_NETMASK;
MACRO_RTE RTE_STATE_BAD;
MACRO_RTE RTE_STATE_BKUP;
MACRO_RTE RTE_STATE_GOOD;
MACRO_RTE RTE_STATE_PERMANENT;
MACRO_RTE RTE_STATE_SUSPECT;
MACRO_RTE RTE_STATE_UNUSED;
MACRO_RTE RTE_STATE_UPDATED;
MACRO_RTE RTE_STATE_ZKNOWN;
MACRO_RTF_USETRAILERS RTF_ANNOUNCE;
MACRO_RTF RTF_BLACKHOLE;
MACRO_RTF RTF_BROADCAST;
MACRO_RTF RTF_CLONING;
MACRO_RTF RTF_DELCLONE;
MACRO_RTF RTF_DONE;
MACRO_RTF RTF_DYNAMIC;
MACRO_RTF RTF_GATEWAY;
MACRO_RTF RTF_HOST;
MACRO_RTF RTF_LLINFO;
MACRO_RTF RTF_LOCAL;
MACRO_RTF RTF_MODIFIED;
MACRO_RTF RTF_MULTICAST;
MACRO_RTF RTF_PINNED;
MACRO_RTF RTF_PRCLONING;
MACRO_RTF_PROBEMTU RTF_PROBEMTU;
MACRO_RTF RTF_PROTO1;
MACRO_RTF RTF_PROTO2;
MACRO_RTF RTF_PROTO3;
MACRO_RTF RTF_REJECT;
MACRO_RTF RTF_STATIC;
MACRO_RTF RTF_UP;
MACRO_RTF_USETRAILERS RTF_USETRAILERS;
MACRO_RTF RTF_WASCLONED;
MACRO_RTF RTF_XRESOLVE;
MACRO_RTMPHOPS RTMPHOPS;
MACRO_RTMPNEXTHOP RTMPNEXTHOP;
MACRO_RTMPPORT RTMPPORT;
MACRO_RTMPRANGEEND RTMPRANGEEND;
MACRO_RTMPRANGESTART RTMPRANGESTART;
MACRO_RTMPSTATE RTMPSTATE;
MACRO_RTMPTYPE RTMPTYPE;
MACRO_RTMP_REQ RTMP_DISTANCE;
MACRO_RTMP RTMP_IDLENGTH;
MACRO_RTMP_REQ RTMP_RANGE_FLAG;
MACRO_RTMP_REQ RTMP_REQ_FUNC1;
MACRO_RTMP_REQ RTMP_REQ_FUNC2;
MACRO_RTMP_REQ RTMP_REQ_FUNC3;
MACRO_RTMP_REQ RTMP_ROUTER_AGE;
MACRO_SOCKET RTMP_SOCKET;
MACRO_RTMP_REQ RTMP_TUPLE_SIZE;
MACRO_RTMP RTMP_VERSION_NUMBER;
MACRO_RTM_VERSION RTM_ADD;
MACRO_RTM_VERSION RTM_CHANGE;
MACRO_RTM_VERSION RTM_DELADDR;
MACRO_RTM_VERSION RTM_DELETE;
MACRO_RTM_VERSION RTM_DELMADDR;
MACRO_RTM_VERSION RTM_GET;
MACRO_RTM_VERSION RTM_IFINFO;
MACRO_RTM_VERSION RTM_LOCK;
MACRO_RTM_VERSION RTM_LOSING;
MACRO_RTM_VERSION RTM_MISS;
MACRO_RTM_VERSION RTM_NEWADDR;
MACRO_RTM_VERSION RTM_NEWMADDR;
MACRO_RTM_VERSION RTM_OLDADD;
MACRO_RTM_VERSION RTM_OLDDEL;
MACRO_RTM_VERSION RTM_REDIRECT;
MACRO_RTM_VERSION RTM_RESOLVE;
MACRO_RTM RTM_RTTUNIT;
MACRO_RTM_VERSION RTM_VERSION;
MACRO_RTV RTV_EXPIRE;
MACRO_RTV RTV_HOPCOUNT;
MACRO_RTV RTV_MTU;
MACRO_RTV RTV_RPIPE;
MACRO_RTV RTV_RTT;
MACRO_RTV RTV_RTTVAR;
MACRO_RTV RTV_SPIPE;
MACRO_RTV RTV_SSTHRESH;
MACRO_RT RT_DEFAULT;
MACRO_RT RT_MAX;
MACRO_RT RT_MIN;
MACRO_RT_MIX RT_MIX_DEFAULT;
MACRO_RUSAGE RUSAGE_CHILDREN;
MACRO_RUSAGE RUSAGE_SELF;
MACRO_RUSERSPROC RUSERSPROC_ALLNAMES;
MACRO_RUSERSPROC RUSERSPROC_NAMES;
MACRO_RUSERSPROC RUSERSPROC_NUM;
MACRO_RUSERSPROG RUSERSPROG;
MACRO_RUSERSVERS_1 RUSERSVERS_1;
MACRO_RUSERSVERS_1 RUSERSVERS_2;
MACRO_RUSERSVERS_3 RUSERSVERS_3;
MACRO_RUSERSVERS RUSERSVERS_IDLE;
MACRO_RUSERSVERS RUSERSVERS_ORIG;
MACRO_RUSERS RUSERS_ACCOUNTING;
MACRO_RUSERS RUSERS_BOOT_TIME;
MACRO_RUSERS RUSERS_DEAD_PROCESS;
MACRO_RUSERS RUSERS_EMPTY;
MACRO_RUSERS RUSERS_INIT_PROCESS;
MACRO_RUSERS RUSERS_LOGIN_PROCESS;
MACRO_RUSERS RUSERS_MAXHOSTLEN;
MACRO_RUSERS RUSERS_MAXLINELEN;
MACRO_RUSERS RUSERS_MAXUSERLEN;
MACRO_RUSERS RUSERS_NEW_TIME;
MACRO_RUSERS RUSERS_OLD_TIME;
MACRO_RUSERS RUSERS_RUN_LVL;
MACRO_RUSERS RUSERS_USER_PROCESS;
MACRO_RW15 RW15_BREAKIE;
MACRO_RW15 RW15_CTSIE;
MACRO_RW15 RW15_DCDIE;
MACRO_RW15 RW15_SYNCIE;
MACRO_RW15 RW15_TXUNDERIE;
MACRO_RW15 RW15_ZEROCNTIE;
MACRO_R R_CURSOR;
MACRO_R_DUP R_DUP;
MACRO_R_FIRST R_FIRST;
MACRO_R_FIXEDLEN R_FIXEDLEN;
MACRO_R_FIRST R_IAFTER;
MACRO_R_FIRST R_IBEFORE;
MACRO_R_FIRST R_LAST;
MACRO_R_FIRST R_NEXT;
MACRO_R_FIXEDLEN R_NOKEY;
MACRO_R_FIRST R_NOOVERWRITE;
MACRO_F_OK R_OK;
MACRO_R_FIRST R_PREV;
MACRO_R_FIRST R_RECNOSYNC;
MACRO_R_FIRST R_SETCURSOR;
MACRO_R_FIXEDLEN R_SNAPSHOT;
MACRO_FIL R_TKT_FIL;
MACRO_RecvQSize RecvQSize;
MACRO_SADB SADB_AALG_MAX;
MACRO_SADB SADB_AALG_MD5HMAC;
MACRO_SADB SADB_AALG_NONE;
MACRO_SADB SADB_AALG_SHA1HMAC;
MACRO_SADB SADB_ACQUIRE;
MACRO_SADB SADB_ADD;
MACRO_SADB SADB_DELETE;
MACRO_SADB SADB_DUMP;
MACRO_SADB SADB_EALG_3DESCBC;
MACRO_SADB SADB_EALG_DESCBC;
MACRO_SADB SADB_EALG_MAX;
MACRO_SADB SADB_EALG_NONE;
MACRO_SADB SADB_EALG_NULL;
MACRO_SADB SADB_EXPIRE;
MACRO_SADB SADB_EXT_ADDRESS_DST;
MACRO_SADB SADB_EXT_ADDRESS_PROXY;
MACRO_SADB SADB_EXT_ADDRESS_SRC;
MACRO_SADB SADB_EXT_IDENTITY_DST;
MACRO_SADB SADB_EXT_IDENTITY_SRC;
MACRO_SADB SADB_EXT_KEY_AUTH;
MACRO_SADB SADB_EXT_KEY_ENCRYPT;
MACRO_SADB SADB_EXT_LIFETIME_CURRENT;
MACRO_SADB SADB_EXT_LIFETIME_HARD;
MACRO_SADB SADB_EXT_LIFETIME_SOFT;
MACRO_SADB SADB_EXT_MAX;
MACRO_SADB SADB_EXT_PROPOSAL;
MACRO_SADB SADB_EXT_RESERVED;
MACRO_SADB SADB_EXT_SA;
MACRO_SADB SADB_EXT_SENSITIVITY;
MACRO_SADB SADB_EXT_SPIRANGE;
MACRO_SADB SADB_EXT_SUPPORTED_AUTH;
MACRO_SADB SADB_EXT_SUPPORTED_ENCRYPT;
MACRO_SADB SADB_FLUSH;
MACRO_SADB SADB_GET;
MACRO_SADB SADB_GETSPI;
MACRO_SADB SADB_IDENTTYPE_FQDN;
MACRO_SADB SADB_IDENTTYPE_MAX;
MACRO_SADB SADB_IDENTTYPE_PREFIX;
MACRO_SADB SADB_IDENTTYPE_RESERVED;
MACRO_SADB SADB_IDENTTYPE_USERFQDN;
MACRO_SADB SADB_KEY_FLAGS_MAX;
MACRO_SADB SADB_MAX;
MACRO_SADB SADB_REGISTER;
MACRO_SADB SADB_RESERVED;
MACRO_SADB SADB_SAFLAGS_PFS;
MACRO_SADB SADB_SASTATE_DEAD;
MACRO_SADB SADB_SASTATE_DYING;
MACRO_SADB SADB_SASTATE_LARVAL;
MACRO_SADB SADB_SASTATE_MATURE;
MACRO_SADB SADB_SASTATE_MAX;
MACRO_SADB SADB_SATYPE_AH;
MACRO_SADB SADB_SATYPE_ESP;
MACRO_SADB SADB_SATYPE_MAX;
MACRO_SADB SADB_SATYPE_MIP;
MACRO_SADB SADB_SATYPE_OSPFV2;
MACRO_SADB SADB_SATYPE_RIPV2;
MACRO_SADB SADB_SATYPE_RSVP;
MACRO_SADB SADB_SATYPE_UNSPEC;
MACRO_SADB SADB_UPDATE;
MACRO_SADB SADB_X_AALG_MD5;
MACRO_SADB SADB_X_AALG_NULL;
MACRO_SADB SADB_X_AALG_SHA;
MACRO_SADB SADB_X_AALG_SHA2_256;
MACRO_SADB SADB_X_AALG_SHA2_384;
MACRO_SADB SADB_X_AALG_SHA2_512;
MACRO_SADB SADB_X_CALG_DEFLATE;
MACRO_SADB SADB_X_CALG_LZS;
MACRO_SADB SADB_X_CALG_MAX;
MACRO_SADB SADB_X_CALG_NONE;
MACRO_SADB SADB_X_CALG_OUI;
MACRO_SADB SADB_X_EALG_AES;
MACRO_SADB SADB_X_EALG_BLOWFISHCBC;
MACRO_SADB SADB_X_EALG_CAST128CBC;
MACRO_SADB SADB_X_EALG_RIJNDAELCBC;
MACRO_SADB SADB_X_EXT_CYCSEQ;
MACRO_SADB SADB_X_EXT_DERIV;
MACRO_SADB SADB_X_EXT_IV4B;
MACRO_SADB SADB_X_EXT_KMPRIVATE;
MACRO_SADB SADB_X_EXT_NONE;
MACRO_SADB SADB_X_EXT_OLD;
MACRO_SADB SADB_X_EXT_PMASK;
MACRO_SADB SADB_X_EXT_POLICY;
MACRO_SADB SADB_X_EXT_PRAND;
MACRO_SADB SADB_X_EXT_PSEQ;
MACRO_SADB SADB_X_EXT_PZERO;
MACRO_SADB SADB_X_EXT_RAWCPI;
MACRO_SADB SADB_X_EXT_SA2;
MACRO_SADB SADB_X_IDENTTYPE_ADDR;
MACRO_SADB SADB_X_LIFETIME_ADDTIME;
MACRO_SADB SADB_X_LIFETIME_ALLOCATIONS;
MACRO_SADB SADB_X_LIFETIME_BYTES;
MACRO_SADB SADB_X_LIFETIME_USETIME;
MACRO_SADB SADB_X_PCHANGE;
MACRO_SADB SADB_X_PROMISC;
MACRO_SADB SADB_X_SATYPE_IPCOMP;
MACRO_SADB SADB_X_SATYPE_POLICY;
MACRO_SADB SADB_X_SPDACQUIRE;
MACRO_SADB SADB_X_SPDADD;
MACRO_SADB SADB_X_SPDDELETE;
MACRO_SADB SADB_X_SPDDELETE2;
MACRO_SADB SADB_X_SPDDUMP;
MACRO_SADB SADB_X_SPDEXPIRE;
MACRO_SADB SADB_X_SPDFLUSH;
MACRO_SADB SADB_X_SPDGET;
MACRO_SADB SADB_X_SPDSETIDX;
MACRO_SADB SADB_X_SPDUPDATE;
MACRO_SAFE SAFE_PRIV_ERROR;
MACRO_SARMAG SARMAG;
MACRO_SAS SAS_ALTSTACK;
MACRO_SAS SAS_OLDMASK;
MACRO_SA_KILL SA_CANTMASK;
MACRO_SA_KILL SA_CONT;
MACRO_SA_KILL SA_CORE;
MACRO_SA SA_DISABLE;
MACRO_SA_KILL SA_IGNORE;
MACRO_SA_KILL SA_KILL;
MACRO_SA SA_NOCLDSTOP;
MACRO_SA SA_NOCLDWAIT;
MACRO_SA SA_NODEFER;
MACRO_SA SA_ONSTACK;
MACRO_SA SA_RESETHAND;
MACRO_SA SA_RESTART;
MACRO_SA SA_SIGINFO;
MACRO_SA_KILL SA_STOP;
MACRO_SA_KILL SA_TTYSTOP;
MACRO_SA SA_USERTRAMP;
MACRO_SB SB;
MACRO_SB_MAX SB_ASYNC;
MACRO_SB_MAX SB_LOCK;
MACRO_SB_MAX SB_MAX;
MACRO_SB_MAX SB_NOINTR;
MACRO_SB_MAX SB_NOTIFY;
MACRO_SB_MAX SB_RECV;
MACRO_SB_MAX SB_SEL;
MACRO_SB_MAX SB_UPCALL;
MACRO_SB_MAX SB_WAIT;
MACRO_SB_MAX SB_WANT;
MACRO_SCHAR_MIN SCHAR_MAX;
MACRO_SCHAR_MIN SCHAR_MIN;
MACRO_SCHED SCHED_FIFO;
MACRO_SCHED SCHED_OTHER;
MACRO_SCHED SCHED_RR;
MACRO_SCM SCM_CREDS;
MACRO_SCM SCM_RIGHTS;
MACRO_SCM SCM_TIMESTAMP;
MACRO_SCOPE SCOPE_DELIMITER;
MACRO_SE SE;
MACRO_DAYSPERLYEAR SECSPERDAY;
MACRO_DAYSPERLYEAR SECSPERHOUR;
MACRO_SECSPERMIN SECSPERMIN;
MACRO_SEEK SEEK_CUR;
MACRO_SEEK SEEK_END;
MACRO_SEEK SEEK_SET;
MACRO_SEGOFSET SEGOFSET;
MACRO_SEGSHIFT SEGSHIFT;
MACRO_SEGSIZE SEGSIZE;
MACRO_SEGV SEGV_ACCERR;
MACRO_SEGV SEGV_MAPERR;
MACRO_SEGV SEGV_NOOP;
MACRO_TASK_NULL SEMAPHORE_NULL;
MACRO_SEMAPHORE SEMAPHORE_OPTION_NONE;
MACRO_SEMAPHORE SEMAPHORE_SIGNAL;
MACRO_SEMAPHORE SEMAPHORE_SIGNAL_ALL;
MACRO_SEMAPHORE SEMAPHORE_SIGNAL_INTERRUPT;
MACRO_SEMAPHORE SEMAPHORE_SIGNAL_PREPOST;
MACRO_SEMAPHORE SEMAPHORE_SIGNAL_RELEASE;
MACRO_SEMAPHORE SEMAPHORE_SIGNAL_TIMEOUT;
MACRO_SEMAPHORE SEMAPHORE_TIMEOUT_NOBLOCK;
MACRO_SEMAPHORE SEMAPHORE_TIMEOUT_RELATIVE;
MACRO_SEMAPHORE SEMAPHORE_USE_SAVED_RESULT;
MACRO_SEMAPHORE SEMAPHORE_WAIT;
MACRO_SEMAPHORE SEMAPHORE_WAIT_INTERRUPT;
MACRO_SEMAPHORE SEMAPHORE_WAIT_ON_SIGNAL;
MACRO_SEMAPHORE SEMAPHORE_WAIT_TIMEOUT;
MACRO_SEM_A SEM_A;
MACRO_SEM SEM_FAILED;
MACRO_SEM_A SEM_R;
MACRO_SEM_UNDO SEM_UNDO;
MACRO_SEM SEM_VALUE_MAX;
MACRO_NOERROR SERVFAIL;
MACRO_SLOT SERVICE_SLOT;
MACRO_SETALL SETALL;
MACRO_GETZCNT SETVAL;
MACRO_SF SF_APPEND;
MACRO_SF SF_ARCHIVED;
MACRO_SF SF_IMMUTABLE;
MACRO_SF_PREV SF_PREV_LOADED;
MACRO_SF SF_SETTABLE;
MACRO_SHARED SHARED_ALTERNATE_LOAD_BASE;
MACRO_SHARED SHARED_DATA_REGION_MASK;
MACRO_SHARED SHARED_DATA_REGION_SIZE;
MACRO_SHARED SHARED_LIB_ALIAS;
MACRO_SHARED SHARED_TEXT_REGION_MASK;
MACRO_SHARED SHARED_TEXT_REGION_SIZE;
MACRO_SHIFT SHIFT_LEFT;
MACRO_SHIFT SHIFT_RIGHT;
MACRO_SHMLBA SHMLBA;
MACRO_SHM_R SHM_R;
MACRO_SHM SHM_RDONLY;
MACRO_SHM SHM_RND;
MACRO_SHM_R SHM_W;
MACRO_SHRT SHRT_MAX;
MACRO_SHRT SHRT_MIN;
MACRO_SHUT SHUT_RD;
MACRO_SHUT SHUT_RDWR;
MACRO_SHUT SHUT_WR;
MACRO_SIDL SIDL;
MACRO_SIGNAL SIGABRT;
MACRO_SIGNAL SIGALRM;
MACRO_SIGNAL SIGBUS;
MACRO_SIGNAL SIGCHLD;
MACRO_SIGNAL SIGCONT;
MACRO_SIGNAL SIGEMT;
MACRO_SIGEV SIGEV_NONE;
MACRO_SIGEV SIGEV_SIGNAL;
MACRO_SIGEV SIGEV_THREAD;
MACRO_SIGNAL SIGFPE;
MACRO_SIGNAL SIGHUP;
MACRO_SIGNAL SIGILL;
MACRO_SIGNAL SIGINFO;
MACRO_SIGNAL SIGINT;
MACRO_SIGNAL SIGIO;
MACRO_SIGNAL SIGIOT;
MACRO_SIGNAL SIGKILL;
MACRO_SIGNAL SIGPIPE;
MACRO_SIGNAL SIGPROF;
MACRO_SIGNAL SIGQUIT;
MACRO_SIGNAL SIGSEGV;
MACRO_SIGSTKSZ SIGSTKSZ;
MACRO_SIGNAL SIGSTOP;
MACRO_SIGNAL SIGSYS;
MACRO_SIGNAL SIGTERM;
MACRO_SIGNAL SIGTRAP;
MACRO_SIGNAL SIGTSTP;
MACRO_SIGNAL SIGTTIN;
MACRO_SIGNAL SIGTTOU;
MACRO_SIGNAL SIGURG;
MACRO_SIGNAL SIGUSR1;
MACRO_SIGNAL SIGUSR2;
MACRO_SIGNAL SIGVTALRM;
MACRO_SIGNAL SIGWINCH;
MACRO_SIGNAL SIGXCPU;
MACRO_SIGNAL SIGXFSZ;
MACRO_SIG SIG_BLOCK;
MACRO_SIG SIG_SETMASK;
MACRO_SIG SIG_UNBLOCK;
MACRO_DOMAIN SING;
MACRO_SIN SIN_PROXY;
MACRO_SIZEOF SIZEOF_INT;
MACRO_SIZEOF SIZEOF_LONG;
MACRO_SIZEOF SIZEOF_SHORT;
MACRO_SIZE SIZE_MAX;
MACRO_SSIZE SIZE_T_MAX;
MACRO_SI SI_ASYNCIO;
MACRO_SI_COLL SI_CLEAR;
MACRO_SI_COLL SI_COLL;
MACRO_SI_COLL SI_INITED;
MACRO_SI SI_MESGQ;
MACRO_SI SI_QUEUE;
MACRO_SI_COLL SI_RECORDED;
MACRO_SI SI_TIMER;
MACRO_SI SI_USER;
MACRO_SKDC SKDC_CANT;
MACRO_KDC_OK SKDC_OK;
MACRO_SKDC SKDC_RETRY;
MACRO_SLC SLC_ABORT;
MACRO_SLC_NOSUPPORT SLC_ACK;
MACRO_SLC SLC_AO;
MACRO_SLC SLC_AYT;
MACRO_SLC SLC_BRK;
MACRO_SLC_NOSUPPORT SLC_CANTCHANGE;
MACRO_SLC_NOSUPPORT SLC_DEFAULT;
MACRO_SLC SLC_EC;
MACRO_SLC SLC_EL;
MACRO_SLC SLC_EOF;
MACRO_SLC SLC_EOR;
MACRO_SLC SLC_EW;
MACRO_SLC_NOSUPPORT SLC_FLAGS;
MACRO_SLC_NOSUPPORT SLC_FLUSHIN;
MACRO_SLC_NOSUPPORT SLC_FLUSHOUT;
MACRO_SLC SLC_FORW1;
MACRO_SLC SLC_FORW2;
MACRO_SLC_NOSUPPORT SLC_FUNC;
MACRO_SLC SLC_IP;
MACRO_SLC_NOSUPPORT SLC_LEVELBITS;
MACRO_SLC SLC_LNEXT;
MACRO_SLC_NOSUPPORT SLC_NOSUPPORT;
MACRO_SLC SLC_RP;
MACRO_SLC SLC_SUSP;
MACRO_SLC SLC_SYNCH;
MACRO_SLC_NOSUPPORT SLC_VALUE;
MACRO_SLC_NOSUPPORT SLC_VARIABLE;
MACRO_SLC SLC_XOFF;
MACRO_SLC SLC_XON;
MACRO_TTYDISC SLIPDISC;
MACRO_SL SL_ERROR;
MACRO_SL SL_FATAL;
MACRO_SL SL_NOTIFY;
MACRO_SL SL_TRACE;
MACRO_SM SM_COW;
MACRO_SM SM_EMPTY;
MACRO_SM_MAXSTRLEN SM_MAXSTRLEN;
MACRO_SM_MAXSTRLEN SM_MON;
MACRO_SM SM_PRIVATE;
MACRO_SM SM_PRIVATE_ALIASED;
MACRO_SM_MAXSTRLEN SM_PROG;
MACRO_SM SM_SHARED;
MACRO_SM SM_SHARED_ALIASED;
MACRO_SM_MAXSTRLEN SM_SIMU_CRASH;
MACRO_SM_MAXSTRLEN SM_STAT;
MACRO_SM SM_TRUESHARED;
MACRO_SM_MAXSTRLEN SM_UNMON;
MACRO_SM_MAXSTRLEN SM_UNMON_ALL;
MACRO_SM_MAXSTRLEN SM_VERS;
MACRO_SZ SNAME_SZ;
MACRO_SNAP SNAP_AT_SAP;
MACRO_SNAP SNAP_UI;
MACRO_SNMP SNMP_CFG_CONFIGURED;
MACRO_SNMP SNMP_CFG_GARNERED;
MACRO_SNMP SNMP_CFG_GUESSED;
MACRO_SNMP SNMP_CFG_UNCONFIG;
MACRO_SNMP SNMP_OBJ_TYPE_AARP;
MACRO_SNMP SNMP_OBJ_TYPE_DDP;
MACRO_SNMP SNMP_OBJ_TYPE_ECHO;
MACRO_SNMP SNMP_OBJ_TYPE_MASK;
MACRO_SNMP SNMP_OBJ_TYPE_NBP;
MACRO_SNMP SNMP_OBJ_TYPE_PORT;
MACRO_SNMP SNMP_OBJ_TYPE_RTMP;
MACRO_SNMP SNMP_OBJ_TYPE_ZIP;
MACRO_SNMP SNMP_TYPE_ETHER1;
MACRO_SNMP SNMP_TYPE_ETHER2;
MACRO_SNMP SNMP_TYPE_IP;
MACRO_SNMP SNMP_TYPE_LOCAL;
MACRO_SNMP SNMP_TYPE_OTHER;
MACRO_SNMP SNMP_TYPE_SERIALNONSTD;
MACRO_SNMP SNMP_TYPE_SERIALPPP;
MACRO_SNMP SNMP_TYPE_TOKEN;
MACRO_SNMP SNMP_TYPE_VIRTUAL;
MACRO_SOCK SOCK_DGRAM;
MACRO_SOCK_MAXADDRLEN SOCK_MAXADDRLEN;
MACRO_SOCK SOCK_RAW;
MACRO_SOCK SOCK_RDM;
MACRO_SOCK SOCK_SEQPACKET;
MACRO_SOCK SOCK_STREAM;
MACRO_SOF SOF_NOSIGPIPE;
MACRO_SOL_NDRVPROTO SOL_NDRVPROTO;
MACRO_SOL SOL_SOCKET;
MACRO_SOMAXCONN SOMAXCONN;
MACRO_SO SO_ACCEPTCONN;
MACRO_SO SO_BROADCAST;
MACRO_SO_CACHE SO_CACHE_FLUSH_INTERVAL;
MACRO_SO_CACHE SO_CACHE_MAX_FREE_BATCH;
MACRO_SO_CACHE SO_CACHE_TIME_LIMIT;
MACRO_SO SO_DEBUG;
MACRO_SO SO_DONTROUTE;
MACRO_SO SO_DONTTRUNC;
MACRO_SO SO_ERROR;
MACRO_SO SO_KEEPALIVE;
MACRO_SO SO_LINGER;
MACRO_SO SO_NKE;
MACRO_SO SO_NOSIGPIPE;
MACRO_SO SO_NREAD;
MACRO_SO SO_OOBINLINE;
MACRO_SO SO_RCVBUF;
MACRO_SO SO_RCVLOWAT;
MACRO_SO SO_RCVTIMEO;
MACRO_SO SO_REUSEADDR;
MACRO_SO SO_REUSEPORT;
MACRO_SO SO_SNDBUF;
MACRO_SO SO_SNDLOWAT;
MACRO_SO SO_SNDTIMEO;
MACRO_SO SO_TIMESTAMP;
MACRO_SO SO_TYPE;
MACRO_SO SO_USELOOPBACK;
MACRO_SO SO_WANTMORE;
MACRO_SO SO_WANTOOBFLAG;
MACRO_SPRAYMAX SPRAYMAX;
MACRO_SPRAYOVERHEAD SPRAYOVERHEAD;
MACRO_SPRAYPROC SPRAYPROC_CLEAR;
MACRO_SPRAYPROC SPRAYPROC_GET;
MACRO_SPRAYPROC SPRAYPROC_SPRAY;
MACRO_SPRAYPROG SPRAYPROG;
MACRO_SPRAYVERS SPRAYVERS;
MACRO_SQL SQL_ACCESSIBLE_PROCEDURES;
MACRO_SQL SQL_ACCESSIBLE_TABLES;
MACRO_SQL SQL_ACCESS_MODE;
MACRO_SQL SQL_ACTIVE_CONNECTIONS;
MACRO_SQL SQL_ACTIVE_ENVIRONMENTS;
MACRO_SQL SQL_ACTIVE_STATEMENTS;
MACRO_SQL SQL_ADD;
MACRO_SQL SQL_AD_ADD_CONSTRAINT_DEFERRABLE;
MACRO_SQL SQL_AD_ADD_CONSTRAINT_INITIALLY_DEFERRED;
MACRO_SQL SQL_AD_ADD_CONSTRAINT_INITIALLY_IMMEDIATE;
MACRO_SQL SQL_AD_ADD_CONSTRAINT_NON_DEFERRABLE;
MACRO_SQL SQL_AD_ADD_DOMAIN_CONSTRAINT;
MACRO_SQL SQL_AD_ADD_DOMAIN_DEFAULT;
MACRO_SQL SQL_AD_CONSTRAINT_NAME_DEFINITION;
MACRO_SQL SQL_AD_DROP_DOMAIN_CONSTRAINT;
MACRO_SQL SQL_AD_DROP_DOMAIN_DEFAULT;
MACRO_SQL SQL_AF_ALL;
MACRO_SQL SQL_AF_AVG;
MACRO_SQL SQL_AF_COUNT;
MACRO_SQL SQL_AF_DISTINCT;
MACRO_SQL SQL_AF_MAX;
MACRO_SQL SQL_AF_MIN;
MACRO_SQL SQL_AF_SUM;
MACRO_SQL SQL_AGGREGATE_FUNCTIONS;
MACRO_SQL SQL_ALL_EXCEPT_LIKE;
MACRO_SQL SQL_ALL_TYPES;
MACRO_SQL SQL_ALTER_DOMAIN;
MACRO_SQL SQL_ALTER_TABLE;
MACRO_SQL SQL_AM_CONNECTION;
MACRO_SQL SQL_AM_NONE;
MACRO_SQL SQL_AM_STATEMENT;
MACRO_SQL SQL_API_ALL_FUNCTIONS;
MACRO_SQL SQL_API_LOADBYORDINAL;
MACRO_SQL SQL_API_ODBC3_ALL_FUNCTIONS;
MACRO_SQL SQL_API_ODBC3_ALL_FUNCTIONS_SIZE;
MACRO_SQL SQL_API_SQLALLOCCONNECT;
MACRO_SQL SQL_API_SQLALLOCENV;
MACRO_SQL SQL_API_SQLALLOCHANDLE;
MACRO_SQL SQL_API_SQLALLOCHANDLESTD;
MACRO_SQL SQL_API_SQLALLOCSTMT;
MACRO_SQL SQL_API_SQLBINDCOL;
MACRO_SQL SQL_API_SQLBINDPARAM;
MACRO_SQL SQL_API_SQLBINDPARAMETER;
MACRO_SQL SQL_API_SQLBROWSECONNECT;
MACRO_SQL SQL_API_SQLBULKOPERATIONS;
MACRO_SQL SQL_API_SQLCANCEL;
MACRO_SQL SQL_API_SQLCLOSECURSOR;
MACRO_SQL SQL_API_SQLCOLATTRIBUTE;
MACRO_SQL SQL_API_SQLCOLATTRIBUTES;
MACRO_SQL SQL_API_SQLCOLUMNPRIVILEGES;
MACRO_SQL SQL_API_SQLCOLUMNS;
MACRO_SQL SQL_API_SQLCONNECT;
MACRO_SQL SQL_API_SQLCOPYDESC;
MACRO_SQL SQL_API_SQLDATASOURCES;
MACRO_SQL SQL_API_SQLDESCRIBECOL;
MACRO_SQL SQL_API_SQLDESCRIBEPARAM;
MACRO_SQL SQL_API_SQLDISCONNECT;
MACRO_SQL SQL_API_SQLDRIVERCONNECT;
MACRO_SQL SQL_API_SQLDRIVERS;
MACRO_SQL SQL_API_SQLENDTRAN;
MACRO_SQL SQL_API_SQLERROR;
MACRO_SQL SQL_API_SQLEXECDIRECT;
MACRO_SQL SQL_API_SQLEXECUTE;
MACRO_SQL SQL_API_SQLEXTENDEDFETCH;
MACRO_SQL SQL_API_SQLFETCH;
MACRO_SQL SQL_API_SQLFETCHSCROLL;
MACRO_SQL SQL_API_SQLFOREIGNKEYS;
MACRO_SQL SQL_API_SQLFREECONNECT;
MACRO_SQL SQL_API_SQLFREEENV;
MACRO_SQL SQL_API_SQLFREEHANDLE;
MACRO_SQL SQL_API_SQLFREESTMT;
MACRO_SQL SQL_API_SQLGETCONNECTATTR;
MACRO_SQL SQL_API_SQLGETCONNECTOPTION;
MACRO_SQL SQL_API_SQLGETCURSORNAME;
MACRO_SQL SQL_API_SQLGETDATA;
MACRO_SQL SQL_API_SQLGETDESCFIELD;
MACRO_SQL SQL_API_SQLGETDESCREC;
MACRO_SQL SQL_API_SQLGETDIAGFIELD;
MACRO_SQL SQL_API_SQLGETDIAGREC;
MACRO_SQL SQL_API_SQLGETENVATTR;
MACRO_SQL SQL_API_SQLGETFUNCTIONS;
MACRO_SQL SQL_API_SQLGETINFO;
MACRO_SQL SQL_API_SQLGETSTMTATTR;
MACRO_SQL SQL_API_SQLGETSTMTOPTION;
MACRO_SQL SQL_API_SQLGETTYPEINFO;
MACRO_SQL SQL_API_SQLMORERESULTS;
MACRO_SQL SQL_API_SQLNATIVESQL;
MACRO_SQL SQL_API_SQLNUMPARAMS;
MACRO_SQL SQL_API_SQLNUMRESULTCOLS;
MACRO_SQL SQL_API_SQLPARAMDATA;
MACRO_SQL SQL_API_SQLPARAMOPTIONS;
MACRO_SQL SQL_API_SQLPREPARE;
MACRO_SQL SQL_API_SQLPRIMARYKEYS;
MACRO_SQL SQL_API_SQLPROCEDURECOLUMNS;
MACRO_SQL SQL_API_SQLPROCEDURES;
MACRO_SQL SQL_API_SQLPUTDATA;
MACRO_SQL SQL_API_SQLROWCOUNT;
MACRO_SQL SQL_API_SQLSETCONNECTATTR;
MACRO_SQL SQL_API_SQLSETCONNECTOPTION;
MACRO_SQL SQL_API_SQLSETCURSORNAME;
MACRO_SQL SQL_API_SQLSETDESCFIELD;
MACRO_SQL SQL_API_SQLSETDESCREC;
MACRO_SQL SQL_API_SQLSETENVATTR;
MACRO_SQL SQL_API_SQLSETPARAM;
MACRO_SQL SQL_API_SQLSETPOS;
MACRO_SQL SQL_API_SQLSETSCROLLOPTIONS;
MACRO_SQL SQL_API_SQLSETSTMTATTR;
MACRO_SQL SQL_API_SQLSETSTMTOPTION;
MACRO_SQL SQL_API_SQLSPECIALCOLUMNS;
MACRO_SQL SQL_API_SQLSTATISTICS;
MACRO_SQL SQL_API_SQLTABLEPRIVILEGES;
MACRO_SQL SQL_API_SQLTABLES;
MACRO_SQL SQL_API_SQLTRANSACT;
MACRO_SQL SQL_ARD_TYPE;
MACRO_SQL SQL_ASYNC_ENABLE;
MACRO_SQL SQL_ASYNC_ENABLE_DEFAULT;
MACRO_SQL SQL_ASYNC_ENABLE_OFF;
MACRO_SQL SQL_ASYNC_ENABLE_ON;
MACRO_SQL SQL_ASYNC_MODE;
MACRO_SQL SQL_ATTR_ACCESS_MODE;
MACRO_SQL SQL_ATTR_APP_PARAM_DESC;
MACRO_SQL SQL_ATTR_APP_ROW_DESC;
MACRO_SQL SQL_ATTR_ASYNC_ENABLE;
MACRO_SQL SQL_ATTR_AUTOCOMMIT;
MACRO_SQL SQL_ATTR_AUTO_IPD;
MACRO_SQL SQL_ATTR_CONCURRENCY;
MACRO_SQL SQL_ATTR_CONNECTION_DEAD;
MACRO_SQL SQL_ATTR_CONNECTION_POOLING;
MACRO_SQL SQL_ATTR_CONNECTION_TIMEOUT;
MACRO_SQL SQL_ATTR_CP_MATCH;
MACRO_SQL SQL_ATTR_CURRENT_CATALOG;
MACRO_SQL SQL_ATTR_CURSOR_SCROLLABLE;
MACRO_SQL SQL_ATTR_CURSOR_SENSITIVITY;
MACRO_SQL SQL_ATTR_CURSOR_TYPE;
MACRO_SQL SQL_ATTR_DISCONNECT_BEHAVIOR;
MACRO_SQL SQL_ATTR_ENABLE_AUTO_IPD;
MACRO_SQL SQL_ATTR_ENLIST_IN_DTC;
MACRO_SQL SQL_ATTR_ENLIST_IN_XA;
MACRO_SQL SQL_ATTR_FETCH_BOOKMARK_PTR;
MACRO_SQL SQL_ATTR_IMP_PARAM_DESC;
MACRO_SQL SQL_ATTR_IMP_ROW_DESC;
MACRO_SQL SQL_ATTR_KEYSET_SIZE;
MACRO_SQL SQL_ATTR_LOGIN_TIMEOUT;
MACRO_SQL SQL_ATTR_MAX_LENGTH;
MACRO_SQL SQL_ATTR_MAX_ROWS;
MACRO_SQL SQL_ATTR_METADATA_ID;
MACRO_SQL SQL_ATTR_NOSCAN;
MACRO_SQL SQL_ATTR_ODBC_CURSORS;
MACRO_SQL SQL_ATTR_ODBC_VERSION;
MACRO_SQL SQL_ATTR_OUTPUT_NTS;
MACRO_SQL SQL_ATTR_PACKET_SIZE;
MACRO_SQL SQL_ATTR_PARAMSET_SIZE;
MACRO_SQL SQL_ATTR_PARAMS_PROCESSED_PTR;
MACRO_SQL SQL_ATTR_PARAM_BIND_OFFSET_PTR;
MACRO_SQL SQL_ATTR_PARAM_BIND_TYPE;
MACRO_SQL SQL_ATTR_PARAM_OPERATION_PTR;
MACRO_SQL SQL_ATTR_PARAM_STATUS_PTR;
MACRO_SQL SQL_ATTR_QUERY_TIMEOUT;
MACRO_SQL SQL_ATTR_QUIET_MODE;
MACRO_SQL SQL_ATTR_READONLY;
MACRO_SQL SQL_ATTR_READWRITE_UNKNOWN;
MACRO_SQL SQL_ATTR_RETRIEVE_DATA;
MACRO_SQL SQL_ATTR_ROWS_FETCHED_PTR;
MACRO_SQL SQL_ATTR_ROW_ARRAY_SIZE;
MACRO_SQL SQL_ATTR_ROW_BIND_OFFSET_PTR;
MACRO_SQL SQL_ATTR_ROW_BIND_TYPE;
MACRO_SQL SQL_ATTR_ROW_NUMBER;
MACRO_SQL SQL_ATTR_ROW_OPERATION_PTR;
MACRO_SQL SQL_ATTR_ROW_STATUS_PTR;
MACRO_SQL SQL_ATTR_SIMULATE_CURSOR;
MACRO_SQL SQL_ATTR_TRACE;
MACRO_SQL SQL_ATTR_TRACEFILE;
MACRO_SQL SQL_ATTR_TRANSLATE_LIB;
MACRO_SQL SQL_ATTR_TRANSLATE_OPTION;
MACRO_SQL SQL_ATTR_TXN_ISOLATION;
MACRO_SQL SQL_ATTR_USE_BOOKMARKS;
MACRO_SQL SQL_ATTR_WRITE;
MACRO_SQL SQL_AT_ADD_COLUMN;
MACRO_SQL SQL_AT_ADD_COLUMN_COLLATION;
MACRO_SQL SQL_AT_ADD_COLUMN_DEFAULT;
MACRO_SQL SQL_AT_ADD_COLUMN_SINGLE;
MACRO_SQL SQL_AT_ADD_CONSTRAINT;
MACRO_SQL SQL_AT_ADD_TABLE_CONSTRAINT;
MACRO_SQL SQL_AT_CONSTRAINT_DEFERRABLE;
MACRO_SQL SQL_AT_CONSTRAINT_INITIALLY_DEFERRED;
MACRO_SQL SQL_AT_CONSTRAINT_INITIALLY_IMMEDIATE;
MACRO_SQL SQL_AT_CONSTRAINT_NAME_DEFINITION;
MACRO_SQL SQL_AT_CONSTRAINT_NON_DEFERRABLE;
MACRO_SQL SQL_AT_DROP_COLUMN;
MACRO_SQL SQL_AT_DROP_COLUMN_CASCADE;
MACRO_SQL SQL_AT_DROP_COLUMN_DEFAULT;
MACRO_SQL SQL_AT_DROP_COLUMN_RESTRICT;
MACRO_SQL SQL_AT_DROP_TABLE_CONSTRAINT_CASCADE;
MACRO_SQL SQL_AT_DROP_TABLE_CONSTRAINT_RESTRICT;
MACRO_SQL SQL_AT_SET_COLUMN_DEFAULT;
MACRO_SQL SQL_AUTOCOMMIT;
MACRO_SQL SQL_AUTOCOMMIT_DEFAULT;
MACRO_SQL SQL_AUTOCOMMIT_OFF;
MACRO_SQL SQL_AUTOCOMMIT_ON;
MACRO_SQL SQL_BATCH_ROW_COUNT;
MACRO_SQL SQL_BATCH_SUPPORT;
MACRO_SQL SQL_BEST_ROWID;
MACRO_SQL SQL_BIGINT;
MACRO_SQL SQL_BINARY;
MACRO_SQL SQL_BIND_BY_COLUMN;
MACRO_SQL SQL_BIND_TYPE;
MACRO_SQL SQL_BIND_TYPE_DEFAULT;
MACRO_SQL SQL_BIT;
MACRO_SQL SQL_BOOKMARK_PERSISTENCE;
MACRO_SQL SQL_BP_CLOSE;
MACRO_SQL SQL_BP_DELETE;
MACRO_SQL SQL_BP_DROP;
MACRO_SQL SQL_BP_OTHER_HSTMT;
MACRO_SQL SQL_BP_SCROLL;
MACRO_SQL SQL_BP_TRANSACTION;
MACRO_SQL SQL_BP_UPDATE;
MACRO_SQL SQL_BRC_EXPLICIT;
MACRO_SQL SQL_BRC_PROCEDURES;
MACRO_SQL SQL_BRC_ROLLED_UP;
MACRO_SQL SQL_BS_ROW_COUNT_EXPLICIT;
MACRO_SQL SQL_BS_ROW_COUNT_PROC;
MACRO_SQL SQL_BS_SELECT_EXPLICIT;
MACRO_SQL SQL_BS_SELECT_PROC;
MACRO_SQL SQL_CA1_ABSOLUTE;
MACRO_SQL SQL_CA1_BOOKMARK;
MACRO_SQL SQL_CA1_BULK_ADD;
MACRO_SQL SQL_CA1_BULK_DELETE_BY_BOOKMARK;
MACRO_SQL SQL_CA1_BULK_FETCH_BY_BOOKMARK;
MACRO_SQL SQL_CA1_BULK_UPDATE_BY_BOOKMARK;
MACRO_SQL SQL_CA1_LOCK_EXCLUSIVE;
MACRO_SQL SQL_CA1_LOCK_NO_CHANGE;
MACRO_SQL SQL_CA1_LOCK_UNLOCK;
MACRO_SQL SQL_CA1_NEXT;
MACRO_SQL SQL_CA1_POSITIONED_DELETE;
MACRO_SQL SQL_CA1_POSITIONED_UPDATE;
MACRO_SQL SQL_CA1_POS_DELETE;
MACRO_SQL SQL_CA1_POS_POSITION;
MACRO_SQL SQL_CA1_POS_REFRESH;
MACRO_SQL SQL_CA1_POS_UPDATE;
MACRO_SQL SQL_CA1_RELATIVE;
MACRO_SQL SQL_CA1_SELECT_FOR_UPDATE;
MACRO_SQL SQL_CA2_CRC_APPROXIMATE;
MACRO_SQL SQL_CA2_CRC_EXACT;
MACRO_SQL SQL_CA2_LOCK_CONCURRENCY;
MACRO_SQL SQL_CA2_MAX_ROWS_AFFECTS_ALL;
MACRO_SQL SQL_CA2_MAX_ROWS_CATALOG;
MACRO_SQL SQL_CA2_MAX_ROWS_DELETE;
MACRO_SQL SQL_CA2_MAX_ROWS_INSERT;
MACRO_SQL SQL_CA2_MAX_ROWS_SELECT;
MACRO_SQL SQL_CA2_MAX_ROWS_UPDATE;
MACRO_SQL SQL_CA2_OPT_ROWVER_CONCURRENCY;
MACRO_SQL SQL_CA2_OPT_VALUES_CONCURRENCY;
MACRO_SQL SQL_CA2_READ_ONLY_CONCURRENCY;
MACRO_SQL SQL_CA2_SENSITIVITY_ADDITIONS;
MACRO_SQL SQL_CA2_SENSITIVITY_DELETIONS;
MACRO_SQL SQL_CA2_SENSITIVITY_UPDATES;
MACRO_SQL SQL_CA2_SIMULATE_NON_UNIQUE;
MACRO_SQL SQL_CA2_SIMULATE_TRY_UNIQUE;
MACRO_SQL SQL_CA2_SIMULATE_UNIQUE;
MACRO_SQL SQL_CASCADE;
MACRO_SQL SQL_CATALOG_LOCATION;
MACRO_SQL SQL_CATALOG_NAME;
MACRO_SQL SQL_CATALOG_NAME_SEPARATOR;
MACRO_SQL SQL_CATALOG_TERM;
MACRO_SQL SQL_CATALOG_USAGE;
MACRO_SQL SQL_CA_CONSTRAINT_DEFERRABLE;
MACRO_SQL SQL_CA_CONSTRAINT_INITIALLY_DEFERRED;
MACRO_SQL SQL_CA_CONSTRAINT_INITIALLY_IMMEDIATE;
MACRO_SQL SQL_CA_CONSTRAINT_NON_DEFERRABLE;
MACRO_SQL SQL_CA_CREATE_ASSERTION;
MACRO_SQL SQL_CB_CLOSE;
MACRO_SQL SQL_CB_DELETE;
MACRO_SQL SQL_CB_NON_NULL;
MACRO_SQL SQL_CB_NULL;
MACRO_SQL SQL_CB_PRESERVE;
MACRO_SQL SQL_CCOL_CREATE_COLLATION;
MACRO_SQL SQL_CCS_COLLATE_CLAUSE;
MACRO_SQL SQL_CCS_CREATE_CHARACTER_SET;
MACRO_SQL SQL_CCS_LIMITED_COLLATION;
MACRO_SQL SQL_CC_CLOSE;
MACRO_SQL SQL_CC_DELETE;
MACRO_SQL SQL_CC_PRESERVE;
MACRO_SQL SQL_CDO_COLLATION;
MACRO_SQL SQL_CDO_CONSTRAINT;
MACRO_SQL SQL_CDO_CONSTRAINT_DEFERRABLE;
MACRO_SQL SQL_CDO_CONSTRAINT_INITIALLY_DEFERRED;
MACRO_SQL SQL_CDO_CONSTRAINT_INITIALLY_IMMEDIATE;
MACRO_SQL SQL_CDO_CONSTRAINT_NAME_DEFINITION;
MACRO_SQL SQL_CDO_CONSTRAINT_NON_DEFERRABLE;
MACRO_SQL SQL_CDO_CREATE_DOMAIN;
MACRO_SQL SQL_CDO_DEFAULT;
MACRO_SQL SQL_CD_FALSE;
MACRO_SQL SQL_CD_TRUE;
MACRO_SQL SQL_CHAR;
MACRO_SQL SQL_CLOSE;
MACRO_SQL SQL_CN_ANY;
MACRO_SQL SQL_CN_DIFFERENT;
MACRO_SQL SQL_CN_NONE;
MACRO_SQL SQL_CODE_DATE;
MACRO_SQL SQL_CODE_DAY;
MACRO_SQL SQL_CODE_DAY_TO_HOUR;
MACRO_SQL SQL_CODE_DAY_TO_MINUTE;
MACRO_SQL SQL_CODE_DAY_TO_SECOND;
MACRO_SQL SQL_CODE_HOUR;
MACRO_SQL SQL_CODE_HOUR_TO_MINUTE;
MACRO_SQL SQL_CODE_HOUR_TO_SECOND;
MACRO_SQL SQL_CODE_MINUTE;
MACRO_SQL SQL_CODE_MINUTE_TO_SECOND;
MACRO_SQL SQL_CODE_MONTH;
MACRO_SQL SQL_CODE_SECOND;
MACRO_SQL SQL_CODE_TIME;
MACRO_SQL SQL_CODE_TIMESTAMP;
MACRO_SQL SQL_CODE_YEAR;
MACRO_SQL SQL_CODE_YEAR_TO_MONTH;
MACRO_SQL SQL_COLATT_OPT_MAX;
MACRO_SQL SQL_COLATT_OPT_MIN;
MACRO_SQL SQL_COLLATION_SEQ;
MACRO_SQL SQL_COLUMN_ALIAS;
MACRO_SQL SQL_COLUMN_AUTO_INCREMENT;
MACRO_SQL SQL_COLUMN_CASE_SENSITIVE;
MACRO_SQL SQL_COLUMN_COUNT;
MACRO_SQL SQL_COLUMN_DISPLAY_SIZE;
MACRO_SQL SQL_COLUMN_IGNORE;
MACRO_SQL SQL_COLUMN_LABEL;
MACRO_SQL SQL_COLUMN_LENGTH;
MACRO_SQL SQL_COLUMN_MONEY;
MACRO_SQL SQL_COLUMN_NAME;
MACRO_SQL SQL_COLUMN_NULLABLE;
MACRO_SQL SQL_COLUMN_NUMBER_UNKNOWN;
MACRO_SQL SQL_COLUMN_OWNER_NAME;
MACRO_SQL SQL_COLUMN_PRECISION;
MACRO_SQL SQL_COLUMN_QUALIFIER_NAME;
MACRO_SQL SQL_COLUMN_SCALE;
MACRO_SQL SQL_COLUMN_SEARCHABLE;
MACRO_SQL SQL_COLUMN_TABLE_NAME;
MACRO_SQL SQL_COLUMN_TYPE;
MACRO_SQL SQL_COLUMN_TYPE_NAME;
MACRO_SQL SQL_COLUMN_UNSIGNED;
MACRO_SQL SQL_COLUMN_UPDATABLE;
MACRO_SQL SQL_COL_PRED_BASIC;
MACRO_SQL SQL_COL_PRED_CHAR;
MACRO_SQL SQL_COMMIT;
MACRO_SQL SQL_CONCAT_NULL_BEHAVIOR;
MACRO_SQL SQL_CONCURRENCY;
MACRO_SQL SQL_CONCUR_DEFAULT;
MACRO_SQL SQL_CONCUR_LOCK;
MACRO_SQL SQL_CONCUR_READ_ONLY;
MACRO_SQL SQL_CONCUR_ROWVER;
MACRO_SQL SQL_CONCUR_TIMESTAMP;
MACRO_SQL SQL_CONCUR_VALUES;
MACRO_SQL SQL_CONVERT_BIGINT;
MACRO_SQL SQL_CONVERT_BINARY;
MACRO_SQL SQL_CONVERT_BIT;
MACRO_SQL SQL_CONVERT_CHAR;
MACRO_SQL SQL_CONVERT_DATE;
MACRO_SQL SQL_CONVERT_DECIMAL;
MACRO_SQL SQL_CONVERT_DOUBLE;
MACRO_SQL SQL_CONVERT_FLOAT;
MACRO_SQL SQL_CONVERT_FUNCTIONS;
MACRO_SQL SQL_CONVERT_INTEGER;
MACRO_SQL SQL_CONVERT_INTERVAL_DAY_TIME;
MACRO_SQL SQL_CONVERT_INTERVAL_YEAR_MONTH;
MACRO_SQL SQL_CONVERT_LONGVARBINARY;
MACRO_SQL SQL_CONVERT_LONGVARCHAR;
MACRO_SQL SQL_CONVERT_NUMERIC;
MACRO_SQL SQL_CONVERT_REAL;
MACRO_SQL SQL_CONVERT_SMALLINT;
MACRO_SQL SQL_CONVERT_TIME;
MACRO_SQL SQL_CONVERT_TIMESTAMP;
MACRO_SQL SQL_CONVERT_TINYINT;
MACRO_SQL SQL_CONVERT_VARBINARY;
MACRO_SQL SQL_CONVERT_VARCHAR;
MACRO_SQL SQL_CONVERT_WCHAR;
MACRO_SQL SQL_CONVERT_WLONGVARCHAR;
MACRO_SQL SQL_CONVERT_WVARCHAR;
MACRO_SQL SQL_CORRELATION_NAME;
MACRO_SQL SQL_CP_DEFAULT;
MACRO_SQL SQL_CP_MATCH_DEFAULT;
MACRO_SQL SQL_CP_OFF;
MACRO_SQL SQL_CP_ONE_PER_DRIVER;
MACRO_SQL SQL_CP_ONE_PER_HENV;
MACRO_SQL SQL_CP_RELAXED_MATCH;
MACRO_SQL SQL_CP_STRICT_MATCH;
MACRO_SQL SQL_CREATE_ASSERTION;
MACRO_SQL SQL_CREATE_CHARACTER_SET;
MACRO_SQL SQL_CREATE_COLLATION;
MACRO_SQL SQL_CREATE_DOMAIN;
MACRO_SQL SQL_CREATE_SCHEMA;
MACRO_SQL SQL_CREATE_TABLE;
MACRO_SQL SQL_CREATE_TRANSLATION;
MACRO_SQL SQL_CREATE_VIEW;
MACRO_SQL SQL_CR_CLOSE;
MACRO_SQL SQL_CR_DELETE;
MACRO_SQL SQL_CR_PRESERVE;
MACRO_SQL SQL_CS_AUTHORIZATION;
MACRO_SQL SQL_CS_CREATE_SCHEMA;
MACRO_SQL SQL_CS_DEFAULT_CHARACTER_SET;
MACRO_SQL SQL_CTR_CREATE_TRANSLATION;
MACRO_SQL SQL_CT_COLUMN_COLLATION;
MACRO_SQL SQL_CT_COLUMN_CONSTRAINT;
MACRO_SQL SQL_CT_COLUMN_DEFAULT;
MACRO_SQL SQL_CT_COMMIT_DELETE;
MACRO_SQL SQL_CT_COMMIT_PRESERVE;
MACRO_SQL SQL_CT_CONSTRAINT_DEFERRABLE;
MACRO_SQL SQL_CT_CONSTRAINT_INITIALLY_DEFERRED;
MACRO_SQL SQL_CT_CONSTRAINT_INITIALLY_IMMEDIATE;
MACRO_SQL SQL_CT_CONSTRAINT_NAME_DEFINITION;
MACRO_SQL SQL_CT_CONSTRAINT_NON_DEFERRABLE;
MACRO_SQL SQL_CT_CREATE_TABLE;
MACRO_SQL SQL_CT_GLOBAL_TEMPORARY;
MACRO_SQL SQL_CT_LOCAL_TEMPORARY;
MACRO_SQL SQL_CT_TABLE_CONSTRAINT;
MACRO_SQL SQL_CURRENT_QUALIFIER;
MACRO_SQL SQL_CURSOR_COMMIT_BEHAVIOR;
MACRO_SQL SQL_CURSOR_DYNAMIC;
MACRO_SQL SQL_CURSOR_FORWARD_ONLY;
MACRO_SQL SQL_CURSOR_KEYSET_DRIVEN;
MACRO_SQL SQL_CURSOR_ROLLBACK_BEHAVIOR;
MACRO_SQL SQL_CURSOR_SENSITIVITY;
MACRO_SQL SQL_CURSOR_STATIC;
MACRO_SQL SQL_CURSOR_TYPE;
MACRO_SQL SQL_CURSOR_TYPE_DEFAULT;
MACRO_SQL SQL_CUR_DEFAULT;
MACRO_SQL SQL_CUR_USE_DRIVER;
MACRO_SQL SQL_CUR_USE_IF_NEEDED;
MACRO_SQL SQL_CUR_USE_ODBC;
MACRO_SQL SQL_CVT_BIGINT;
MACRO_SQL SQL_CVT_BINARY;
MACRO_SQL SQL_CVT_BIT;
MACRO_SQL SQL_CVT_CHAR;
MACRO_SQL SQL_CVT_DATE;
MACRO_SQL SQL_CVT_DECIMAL;
MACRO_SQL SQL_CVT_DOUBLE;
MACRO_SQL SQL_CVT_FLOAT;
MACRO_SQL SQL_CVT_INTEGER;
MACRO_SQL SQL_CVT_INTERVAL_DAY_TIME;
MACRO_SQL SQL_CVT_INTERVAL_YEAR_MONTH;
MACRO_SQL SQL_CVT_LONGVARBINARY;
MACRO_SQL SQL_CVT_LONGVARCHAR;
MACRO_SQL SQL_CVT_NUMERIC;
MACRO_SQL SQL_CVT_REAL;
MACRO_SQL SQL_CVT_SMALLINT;
MACRO_SQL SQL_CVT_TIME;
MACRO_SQL SQL_CVT_TIMESTAMP;
MACRO_SQL SQL_CVT_TINYINT;
MACRO_SQL SQL_CVT_VARBINARY;
MACRO_SQL SQL_CVT_VARCHAR;
MACRO_SQL SQL_CVT_WCHAR;
MACRO_SQL SQL_CVT_WLONGVARCHAR;
MACRO_SQL SQL_CVT_WVARCHAR;
MACRO_SQL SQL_CV_CASCADED;
MACRO_SQL SQL_CV_CHECK_OPTION;
MACRO_SQL SQL_CV_CREATE_VIEW;
MACRO_SQL SQL_CV_LOCAL;
MACRO_SQL SQL_C_BINARY;
MACRO_SQL SQL_C_BIT;
MACRO_SQL SQL_C_BOOKMARK;
MACRO_SQL SQL_C_CHAR;
MACRO_SQL SQL_C_DATE;
MACRO_SQL SQL_C_DEFAULT;
MACRO_SQL SQL_C_DOUBLE;
MACRO_SQL SQL_C_FLOAT;
MACRO_SQL SQL_C_INTERVAL_DAY;
MACRO_SQL SQL_C_INTERVAL_DAY_TO_HOUR;
MACRO_SQL SQL_C_INTERVAL_DAY_TO_MINUTE;
MACRO_SQL SQL_C_INTERVAL_DAY_TO_SECOND;
MACRO_SQL SQL_C_INTERVAL_HOUR;
MACRO_SQL SQL_C_INTERVAL_HOUR_TO_MINUTE;
MACRO_SQL SQL_C_INTERVAL_HOUR_TO_SECOND;
MACRO_SQL SQL_C_INTERVAL_MINUTE;
MACRO_SQL SQL_C_INTERVAL_MINUTE_TO_SECOND;
MACRO_SQL SQL_C_INTERVAL_MONTH;
MACRO_SQL SQL_C_INTERVAL_SECOND;
MACRO_SQL SQL_C_INTERVAL_YEAR;
MACRO_SQL SQL_C_INTERVAL_YEAR_TO_MONTH;
MACRO_SQL SQL_C_LONG;
MACRO_SQL SQL_C_NUMERIC;
MACRO_SQL SQL_C_SBIGINT;
MACRO_SQL SQL_C_SHORT;
MACRO_SQL SQL_C_SLONG;
MACRO_SQL SQL_C_SSHORT;
MACRO_SQL SQL_C_STINYINT;
MACRO_SQL SQL_C_TIME;
MACRO_SQL SQL_C_TIMESTAMP;
MACRO_SQL SQL_C_TINYINT;
MACRO_SQL SQL_C_TYPE_DATE;
MACRO_SQL SQL_C_TYPE_TIME;
MACRO_SQL SQL_C_TYPE_TIMESTAMP;
MACRO_SQL SQL_C_UBIGINT;
MACRO_SQL SQL_C_ULONG;
MACRO_SQL SQL_C_USHORT;
MACRO_SQL SQL_C_UTINYINT;
MACRO_SQL SQL_C_VARBOOKMARK;
MACRO_SQL SQL_DATABASE_NAME;
MACRO_SQL SQL_DATA_AT_EXEC;
MACRO_SQL SQL_DATA_SOURCE_NAME;
MACRO_SQL SQL_DATA_SOURCE_READ_ONLY;
MACRO_SQL SQL_DATE;
MACRO_SQL SQL_DATETIME;
MACRO_SQL SQL_DATETIME_LITERALS;
MACRO_SQL SQL_DATE_LEN;
MACRO_SQL SQL_DA_DROP_ASSERTION;
MACRO_SQL SQL_DBMS_NAME;
MACRO_SQL SQL_DBMS_VER;
MACRO_SQL SQL_DB_DEFAULT;
MACRO_SQL SQL_DB_DISCONNECT;
MACRO_SQL SQL_DB_RETURN_TO_POOL;
MACRO_SQL SQL_DCS_DROP_CHARACTER_SET;
MACRO_SQL SQL_DC_DROP_COLLATION;
MACRO_SQL SQL_DDL_INDEX;
MACRO_SQL SQL_DD_CASCADE;
MACRO_SQL SQL_DD_DROP_DOMAIN;
MACRO_SQL SQL_DD_RESTRICT;
MACRO_SQL SQL_DECIMAL;
MACRO_SQL SQL_DEFAULT;
MACRO_SQL SQL_DEFAULT_PARAM;
MACRO_SQL SQL_DEFAULT_TXN_ISOLATION;
MACRO_SQL SQL_DELETE;
MACRO_SQL SQL_DELETE_BY_BOOKMARK;
MACRO_SQL SQL_DESCRIBE_PARAMETER;
MACRO_SQL SQL_DESC_ALLOC_AUTO;
MACRO_SQL SQL_DESC_ALLOC_TYPE;
MACRO_SQL SQL_DESC_ALLOC_USER;
MACRO_SQL SQL_DESC_ARRAY_SIZE;
MACRO_SQL SQL_DESC_ARRAY_STATUS_PTR;
MACRO_SQL SQL_DESC_AUTO_UNIQUE_VALUE;
MACRO_SQL SQL_DESC_BASE_COLUMN_NAME;
MACRO_SQL SQL_DESC_BASE_TABLE_NAME;
MACRO_SQL SQL_DESC_BIND_OFFSET_PTR;
MACRO_SQL SQL_DESC_BIND_TYPE;
MACRO_SQL SQL_DESC_CASE_SENSITIVE;
MACRO_SQL SQL_DESC_CATALOG_NAME;
MACRO_SQL SQL_DESC_CONCISE_TYPE;
MACRO_SQL SQL_DESC_COUNT;
MACRO_SQL SQL_DESC_DATA_PTR;
MACRO_SQL SQL_DESC_DATETIME_INTERVAL_CODE;
MACRO_SQL SQL_DESC_DATETIME_INTERVAL_PRECISION;
MACRO_SQL SQL_DESC_DISPLAY_SIZE;
MACRO_SQL SQL_DESC_FIXED_PREC_SCALE;
MACRO_SQL SQL_DESC_INDICATOR_PTR;
MACRO_SQL SQL_DESC_LABEL;
MACRO_SQL SQL_DESC_LENGTH;
MACRO_SQL SQL_DESC_LITERAL_PREFIX;
MACRO_SQL SQL_DESC_LITERAL_SUFFIX;
MACRO_SQL SQL_DESC_LOCAL_TYPE_NAME;
MACRO_SQL SQL_DESC_MAXIMUM_SCALE;
MACRO_SQL SQL_DESC_MINIMUM_SCALE;
MACRO_SQL SQL_DESC_NAME;
MACRO_SQL SQL_DESC_NULLABLE;
MACRO_SQL SQL_DESC_NUM_PREC_RADIX;
MACRO_SQL SQL_DESC_OCTET_LENGTH;
MACRO_SQL SQL_DESC_OCTET_LENGTH_PTR;
MACRO_SQL SQL_DESC_PARAMETER_TYPE;
MACRO_SQL SQL_DESC_PRECISION;
MACRO_SQL SQL_DESC_ROWS_PROCESSED_PTR;
MACRO_SQL SQL_DESC_SCALE;
MACRO_SQL SQL_DESC_SCHEMA_NAME;
MACRO_SQL SQL_DESC_SEARCHABLE;
MACRO_SQL SQL_DESC_TABLE_NAME;
MACRO_SQL SQL_DESC_TYPE;
MACRO_SQL SQL_DESC_TYPE_NAME;
MACRO_SQL SQL_DESC_UNNAMED;
MACRO_SQL SQL_DESC_UNSIGNED;
MACRO_SQL SQL_DESC_UPDATABLE;
MACRO_SQL SQL_DIAG_ALTER_DOMAIN;
MACRO_SQL SQL_DIAG_ALTER_TABLE;
MACRO_SQL SQL_DIAG_CALL;
MACRO_SQL SQL_DIAG_CLASS_ORIGIN;
MACRO_SQL SQL_DIAG_COLUMN_NUMBER;
MACRO_SQL SQL_DIAG_CONNECTION_NAME;
MACRO_SQL SQL_DIAG_CREATE_ASSERTION;
MACRO_SQL SQL_DIAG_CREATE_CHARACTER_SET;
MACRO_SQL SQL_DIAG_CREATE_COLLATION;
MACRO_SQL SQL_DIAG_CREATE_DOMAIN;
MACRO_SQL SQL_DIAG_CREATE_INDEX;
MACRO_SQL SQL_DIAG_CREATE_SCHEMA;
MACRO_SQL SQL_DIAG_CREATE_TABLE;
MACRO_SQL SQL_DIAG_CREATE_TRANSLATION;
MACRO_SQL SQL_DIAG_CREATE_VIEW;
MACRO_SQL SQL_DIAG_CURSOR_ROW_COUNT;
MACRO_SQL SQL_DIAG_DELETE_WHERE;
MACRO_SQL SQL_DIAG_DROP_ASSERTION;
MACRO_SQL SQL_DIAG_DROP_CHARACTER_SET;
MACRO_SQL SQL_DIAG_DROP_COLLATION;
MACRO_SQL SQL_DIAG_DROP_DOMAIN;
MACRO_SQL SQL_DIAG_DROP_INDEX;
MACRO_SQL SQL_DIAG_DROP_SCHEMA;
MACRO_SQL SQL_DIAG_DROP_TABLE;
MACRO_SQL SQL_DIAG_DROP_TRANSLATION;
MACRO_SQL SQL_DIAG_DROP_VIEW;
MACRO_SQL SQL_DIAG_DYNAMIC_DELETE_CURSOR;
MACRO_SQL SQL_DIAG_DYNAMIC_FUNCTION;
MACRO_SQL SQL_DIAG_DYNAMIC_FUNCTION_CODE;
MACRO_SQL SQL_DIAG_DYNAMIC_UPDATE_CURSOR;
MACRO_SQL SQL_DIAG_GRANT;
MACRO_SQL SQL_DIAG_INSERT;
MACRO_SQL SQL_DIAG_MESSAGE_TEXT;
MACRO_SQL SQL_DIAG_NATIVE;
MACRO_SQL SQL_DIAG_NUMBER;
MACRO_SQL SQL_DIAG_RETURNCODE;
MACRO_SQL SQL_DIAG_REVOKE;
MACRO_SQL SQL_DIAG_ROW_COUNT;
MACRO_SQL SQL_DIAG_ROW_NUMBER;
MACRO_SQL SQL_DIAG_SELECT_CURSOR;
MACRO_SQL SQL_DIAG_SERVER_NAME;
MACRO_SQL SQL_DIAG_SQLSTATE;
MACRO_SQL SQL_DIAG_SUBCLASS_ORIGIN;
MACRO_SQL SQL_DIAG_UNKNOWN_STATEMENT;
MACRO_SQL SQL_DIAG_UPDATE_WHERE;
MACRO_SQL SQL_DI_CREATE_INDEX;
MACRO_SQL SQL_DI_DROP_INDEX;
MACRO_SQL SQL_DL_SQL92_DATE;
MACRO_SQL SQL_DL_SQL92_INTERVAL_DAY;
MACRO_SQL SQL_DL_SQL92_INTERVAL_DAY_TO_HOUR;
MACRO_SQL SQL_DL_SQL92_INTERVAL_DAY_TO_MINUTE;
MACRO_SQL SQL_DL_SQL92_INTERVAL_DAY_TO_SECOND;
MACRO_SQL SQL_DL_SQL92_INTERVAL_HOUR;
MACRO_SQL SQL_DL_SQL92_INTERVAL_HOUR_TO_MINUTE;
MACRO_SQL SQL_DL_SQL92_INTERVAL_HOUR_TO_SECOND;
MACRO_SQL SQL_DL_SQL92_INTERVAL_MINUTE;
MACRO_SQL SQL_DL_SQL92_INTERVAL_MINUTE_TO_SECOND;
MACRO_SQL SQL_DL_SQL92_INTERVAL_MONTH;
MACRO_SQL SQL_DL_SQL92_INTERVAL_SECOND;
MACRO_SQL SQL_DL_SQL92_INTERVAL_YEAR;
MACRO_SQL SQL_DL_SQL92_INTERVAL_YEAR_TO_MONTH;
MACRO_SQL SQL_DL_SQL92_TIME;
MACRO_SQL SQL_DL_SQL92_TIMESTAMP;
MACRO_SQL SQL_DM_VER;
MACRO_SQL SQL_DOUBLE;
MACRO_SQL SQL_DRIVER_COMPLETE;
MACRO_SQL SQL_DRIVER_COMPLETE_REQUIRED;
MACRO_SQL SQL_DRIVER_HDBC;
MACRO_SQL SQL_DRIVER_HDESC;
MACRO_SQL SQL_DRIVER_HENV;
MACRO_SQL SQL_DRIVER_HLIB;
MACRO_SQL SQL_DRIVER_HSTMT;
MACRO_SQL SQL_DRIVER_NAME;
MACRO_SQL SQL_DRIVER_NOPROMPT;
MACRO_SQL SQL_DRIVER_ODBC_VER;
MACRO_SQL SQL_DRIVER_PROMPT;
MACRO_SQL SQL_DRIVER_VER;
MACRO_SQL SQL_DROP;
MACRO_SQL SQL_DROP_ASSERTION;
MACRO_SQL SQL_DROP_CHARACTER_SET;
MACRO_SQL SQL_DROP_COLLATION;
MACRO_SQL SQL_DROP_DOMAIN;
MACRO_SQL SQL_DROP_SCHEMA;
MACRO_SQL SQL_DROP_TABLE;
MACRO_SQL SQL_DROP_TRANSLATION;
MACRO_SQL SQL_DROP_VIEW;
MACRO_SQL SQL_DS_CASCADE;
MACRO_SQL SQL_DS_DROP_SCHEMA;
MACRO_SQL SQL_DS_RESTRICT;
MACRO_SQL SQL_DTC_DONE;
MACRO_SQL SQL_DTC_ENLIST_EXPENSIVE;
MACRO_SQL SQL_DTC_TRANSITION_COST;
MACRO_SQL SQL_DTC_UNENLIST_EXPENSIVE;
MACRO_SQL SQL_DTR_DROP_TRANSLATION;
MACRO_SQL SQL_DT_CASCADE;
MACRO_SQL SQL_DT_DROP_TABLE;
MACRO_SQL SQL_DT_RESTRICT;
MACRO_SQL SQL_DV_CASCADE;
MACRO_SQL SQL_DV_DROP_VIEW;
MACRO_SQL SQL_DV_RESTRICT;
MACRO_SQL SQL_DYNAMIC_CURSOR_ATTRIBUTES1;
MACRO_SQL SQL_DYNAMIC_CURSOR_ATTRIBUTES2;
MACRO_SQL SQL_ENSURE;
MACRO_SQL SQL_ENTIRE_ROWSET;
MACRO_SQL SQL_ERROR;
MACRO_SQL SQL_EXPRESSIONS_IN_ORDERBY;
MACRO_SQL SQL_FALSE;
MACRO_SQL SQL_FD_FETCH_ABSOLUTE;
MACRO_SQL SQL_FD_FETCH_BOOKMARK;
MACRO_SQL SQL_FD_FETCH_FIRST;
MACRO_SQL SQL_FD_FETCH_LAST;
MACRO_SQL SQL_FD_FETCH_NEXT;
MACRO_SQL SQL_FD_FETCH_PREV;
MACRO_SQL SQL_FD_FETCH_PRIOR;
MACRO_SQL SQL_FD_FETCH_RELATIVE;
MACRO_SQL SQL_FETCH_ABSOLUTE;
MACRO_SQL SQL_FETCH_BOOKMARK;
MACRO_SQL SQL_FETCH_BY_BOOKMARK;
MACRO_SQL SQL_FETCH_DIRECTION;
MACRO_SQL SQL_FETCH_FIRST;
MACRO_SQL SQL_FETCH_FIRST_SYSTEM;
MACRO_SQL SQL_FETCH_FIRST_USER;
MACRO_SQL SQL_FETCH_LAST;
MACRO_SQL SQL_FETCH_NEXT;
MACRO_SQL SQL_FETCH_PREV;
MACRO_SQL SQL_FETCH_PRIOR;
MACRO_SQL SQL_FETCH_RELATIVE;
MACRO_SQL SQL_FILE_CATALOG;
MACRO_SQL SQL_FILE_NOT_SUPPORTED;
MACRO_SQL SQL_FILE_QUALIFIER;
MACRO_SQL SQL_FILE_TABLE;
MACRO_SQL SQL_FILE_USAGE;
MACRO_SQL SQL_FLOAT;
MACRO_SQL SQL_FN_CVT_CAST;
MACRO_SQL SQL_FN_CVT_CONVERT;
MACRO_SQL SQL_FN_NUM_ABS;
MACRO_SQL SQL_FN_NUM_ACOS;
MACRO_SQL SQL_FN_NUM_ASIN;
MACRO_SQL SQL_FN_NUM_ATAN;
MACRO_SQL SQL_FN_NUM_ATAN2;
MACRO_SQL SQL_FN_NUM_CEILING;
MACRO_SQL SQL_FN_NUM_COS;
MACRO_SQL SQL_FN_NUM_COT;
MACRO_SQL SQL_FN_NUM_DEGREES;
MACRO_SQL SQL_FN_NUM_EXP;
MACRO_SQL SQL_FN_NUM_FLOOR;
MACRO_SQL SQL_FN_NUM_LOG;
MACRO_SQL SQL_FN_NUM_LOG10;
MACRO_SQL SQL_FN_NUM_MOD;
MACRO_SQL SQL_FN_NUM_PI;
MACRO_SQL SQL_FN_NUM_POWER;
MACRO_SQL SQL_FN_NUM_RADIANS;
MACRO_SQL SQL_FN_NUM_RAND;
MACRO_SQL SQL_FN_NUM_ROUND;
MACRO_SQL SQL_FN_NUM_SIGN;
MACRO_SQL SQL_FN_NUM_SIN;
MACRO_SQL SQL_FN_NUM_SQRT;
MACRO_SQL SQL_FN_NUM_TAN;
MACRO_SQL SQL_FN_NUM_TRUNCATE;
MACRO_SQL SQL_FN_STR_ASCII;
MACRO_SQL SQL_FN_STR_BIT_LENGTH;
MACRO_SQL SQL_FN_STR_CHAR;
MACRO_SQL SQL_FN_STR_CHARACTER_LENGTH;
MACRO_SQL SQL_FN_STR_CHAR_LENGTH;
MACRO_SQL SQL_FN_STR_CONCAT;
MACRO_SQL SQL_FN_STR_DIFFERENCE;
MACRO_SQL SQL_FN_STR_INSERT;
MACRO_SQL SQL_FN_STR_LCASE;
MACRO_SQL SQL_FN_STR_LEFT;
MACRO_SQL SQL_FN_STR_LENGTH;
MACRO_SQL SQL_FN_STR_LOCATE;
MACRO_SQL SQL_FN_STR_LOCATE_2;
MACRO_SQL SQL_FN_STR_LTRIM;
MACRO_SQL SQL_FN_STR_OCTET_LENGTH;
MACRO_SQL SQL_FN_STR_POSITION;
MACRO_SQL SQL_FN_STR_REPEAT;
MACRO_SQL SQL_FN_STR_REPLACE;
MACRO_SQL SQL_FN_STR_RIGHT;
MACRO_SQL SQL_FN_STR_RTRIM;
MACRO_SQL SQL_FN_STR_SOUNDEX;
MACRO_SQL SQL_FN_STR_SPACE;
MACRO_SQL SQL_FN_STR_SUBSTRING;
MACRO_SQL SQL_FN_STR_UCASE;
MACRO_SQL SQL_FN_SYS_DBNAME;
MACRO_SQL SQL_FN_SYS_IFNULL;
MACRO_SQL SQL_FN_SYS_USERNAME;
MACRO_SQL SQL_FN_TD_CURDATE;
MACRO_SQL SQL_FN_TD_CURRENT_DATE;
MACRO_SQL SQL_FN_TD_CURRENT_TIME;
MACRO_SQL SQL_FN_TD_CURRENT_TIMESTAMP;
MACRO_SQL SQL_FN_TD_CURTIME;
MACRO_SQL SQL_FN_TD_DAYNAME;
MACRO_SQL SQL_FN_TD_DAYOFMONTH;
MACRO_SQL SQL_FN_TD_DAYOFWEEK;
MACRO_SQL SQL_FN_TD_DAYOFYEAR;
MACRO_SQL SQL_FN_TD_EXTRACT;
MACRO_SQL SQL_FN_TD_HOUR;
MACRO_SQL SQL_FN_TD_MINUTE;
MACRO_SQL SQL_FN_TD_MONTH;
MACRO_SQL SQL_FN_TD_MONTHNAME;
MACRO_SQL SQL_FN_TD_NOW;
MACRO_SQL SQL_FN_TD_QUARTER;
MACRO_SQL SQL_FN_TD_SECOND;
MACRO_SQL SQL_FN_TD_TIMESTAMPADD;
MACRO_SQL SQL_FN_TD_TIMESTAMPDIFF;
MACRO_SQL SQL_FN_TD_WEEK;
MACRO_SQL SQL_FN_TD_YEAR;
MACRO_SQL SQL_FN_TSI_DAY;
MACRO_SQL SQL_FN_TSI_FRAC_SECOND;
MACRO_SQL SQL_FN_TSI_HOUR;
MACRO_SQL SQL_FN_TSI_MINUTE;
MACRO_SQL SQL_FN_TSI_MONTH;
MACRO_SQL SQL_FN_TSI_QUARTER;
MACRO_SQL SQL_FN_TSI_SECOND;
MACRO_SQL SQL_FN_TSI_WEEK;
MACRO_SQL SQL_FN_TSI_YEAR;
MACRO_SQL SQL_FORWARD_ONLY_CURSOR_ATTRIBUTES1;
MACRO_SQL SQL_FORWARD_ONLY_CURSOR_ATTRIBUTES2;
MACRO_SQL SQL_GB_COLLATE;
MACRO_SQL SQL_GB_GROUP_BY_CONTAINS_SELECT;
MACRO_SQL SQL_GB_GROUP_BY_EQUALS_SELECT;
MACRO_SQL SQL_GB_NOT_SUPPORTED;
MACRO_SQL SQL_GB_NO_RELATION;
MACRO_SQL SQL_GD_ANY_COLUMN;
MACRO_SQL SQL_GD_ANY_ORDER;
MACRO_SQL SQL_GD_BLOCK;
MACRO_SQL SQL_GD_BOUND;
MACRO_SQL SQL_GETDATA_EXTENSIONS;
MACRO_SQL SQL_GET_BOOKMARK;
MACRO_SQL SQL_GROUP_BY;
MACRO_SQL SQL_HANDLE_DBC;
MACRO_SQL SQL_HANDLE_DESC;
MACRO_SQL SQL_HANDLE_ENV;
MACRO_SQL SQL_HANDLE_SENV;
MACRO_SQL SQL_HANDLE_STMT;
MACRO_SQL SQL_IC_LOWER;
MACRO_SQL SQL_IC_MIXED;
MACRO_SQL SQL_IC_SENSITIVE;
MACRO_SQL SQL_IC_UPPER;
MACRO_SQL SQL_IDENTIFIER_CASE;
MACRO_SQL SQL_IDENTIFIER_QUOTE_CHAR;
MACRO_SQL SQL_IGNORE;
MACRO_SQL SQL_IK_ALL;
MACRO_SQL SQL_IK_ASC;
MACRO_SQL SQL_IK_DESC;
MACRO_SQL SQL_IK_NONE;
MACRO_SQL SQL_INDEX_ALL;
MACRO_SQL SQL_INDEX_CLUSTERED;
MACRO_SQL SQL_INDEX_HASHED;
MACRO_SQL SQL_INDEX_KEYWORDS;
MACRO_SQL SQL_INDEX_OTHER;
MACRO_SQL SQL_INDEX_UNIQUE;
MACRO_SQL SQL_INFO_FIRST;
MACRO_SQL SQL_INFO_SCHEMA_VIEWS;
MACRO_SQL SQL_INITIALLY_DEFERRED;
MACRO_SQL SQL_INITIALLY_IMMEDIATE;
MACRO_SQL SQL_INSENSITIVE;
MACRO_SQL SQL_INSERT_STATEMENT;
MACRO_SQL SQL_INTEGER;
MACRO_SQL SQL_INTEGRITY;
MACRO_SQL SQL_INTERVAL;
MACRO_SQL SQL_INTERVAL_DAY;
MACRO_SQL SQL_INTERVAL_DAY_TO_HOUR;
MACRO_SQL SQL_INTERVAL_DAY_TO_MINUTE;
MACRO_SQL SQL_INTERVAL_DAY_TO_SECOND;
MACRO_SQL SQL_INTERVAL_HOUR;
MACRO_SQL SQL_INTERVAL_HOUR_TO_MINUTE;
MACRO_SQL SQL_INTERVAL_HOUR_TO_SECOND;
MACRO_SQL SQL_INTERVAL_MINUTE;
MACRO_SQL SQL_INTERVAL_MINUTE_TO_SECOND;
MACRO_SQL SQL_INTERVAL_MONTH;
MACRO_SQL SQL_INTERVAL_SECOND;
MACRO_SQL SQL_INTERVAL_YEAR;
MACRO_SQL SQL_INTERVAL_YEAR_TO_MONTH;
MACRO_SQL SQL_INVALID_HANDLE;
MACRO_SQL SQL_ISV_ASSERTIONS;
MACRO_SQL SQL_ISV_CHARACTER_SETS;
MACRO_SQL SQL_ISV_CHECK_CONSTRAINTS;
MACRO_SQL SQL_ISV_COLLATIONS;
MACRO_SQL SQL_ISV_COLUMNS;
MACRO_SQL SQL_ISV_COLUMN_DOMAIN_USAGE;
MACRO_SQL SQL_ISV_COLUMN_PRIVILEGES;
MACRO_SQL SQL_ISV_CONSTRAINT_COLUMN_USAGE;
MACRO_SQL SQL_ISV_CONSTRAINT_TABLE_USAGE;
MACRO_SQL SQL_ISV_DOMAINS;
MACRO_SQL SQL_ISV_DOMAIN_CONSTRAINTS;
MACRO_SQL SQL_ISV_KEY_COLUMN_USAGE;
MACRO_SQL SQL_ISV_REFERENTIAL_CONSTRAINTS;
MACRO_SQL SQL_ISV_SCHEMATA;
MACRO_SQL SQL_ISV_SQL_LANGUAGES;
MACRO_SQL SQL_ISV_TABLES;
MACRO_SQL SQL_ISV_TABLE_CONSTRAINTS;
MACRO_SQL SQL_ISV_TABLE_PRIVILEGES;
MACRO_SQL SQL_ISV_TRANSLATIONS;
MACRO_SQL SQL_ISV_USAGE_PRIVILEGES;
MACRO_SQL SQL_ISV_VIEWS;
MACRO_SQL SQL_ISV_VIEW_COLUMN_USAGE;
MACRO_SQL SQL_ISV_VIEW_TABLE_USAGE;
$AAF7D8B1D740C4801D49F07692D1E0A1 SQL_IS_DAY;
$AAF7D8B1D740C4801D49F07692D1E0A1 SQL_IS_DAY_TO_HOUR;
$AAF7D8B1D740C4801D49F07692D1E0A1 SQL_IS_DAY_TO_MINUTE;
$AAF7D8B1D740C4801D49F07692D1E0A1 SQL_IS_DAY_TO_SECOND;
$AAF7D8B1D740C4801D49F07692D1E0A1 SQL_IS_HOUR;
$AAF7D8B1D740C4801D49F07692D1E0A1 SQL_IS_HOUR_TO_MINUTE;
$AAF7D8B1D740C4801D49F07692D1E0A1 SQL_IS_HOUR_TO_SECOND;
MACRO_SQL SQL_IS_INSERT_LITERALS;
MACRO_SQL SQL_IS_INSERT_SEARCHED;
MACRO_SQL SQL_IS_INTEGER;
$AAF7D8B1D740C4801D49F07692D1E0A1 SQL_IS_MINUTE;
$AAF7D8B1D740C4801D49F07692D1E0A1 SQL_IS_MINUTE_TO_SECOND;
$AAF7D8B1D740C4801D49F07692D1E0A1 SQL_IS_MONTH;
MACRO_SQL SQL_IS_POINTER;
$AAF7D8B1D740C4801D49F07692D1E0A1 SQL_IS_SECOND;
MACRO_SQL SQL_IS_SELECT_INTO;
MACRO_SQL SQL_IS_SMALLINT;
MACRO_SQL SQL_IS_UINTEGER;
MACRO_SQL SQL_IS_USMALLINT;
$AAF7D8B1D740C4801D49F07692D1E0A1 SQL_IS_YEAR;
$AAF7D8B1D740C4801D49F07692D1E0A1 SQL_IS_YEAR_TO_MONTH;
MACRO_SQL SQL_KEYSET_CURSOR_ATTRIBUTES1;
MACRO_SQL SQL_KEYSET_CURSOR_ATTRIBUTES2;
MACRO_SQL SQL_KEYSET_SIZE;
MACRO_SQL SQL_KEYSET_SIZE_DEFAULT;
MACRO_SQL SQL_KEYWORDS;
MACRO_SQL SQL_LCK_EXCLUSIVE;
MACRO_SQL SQL_LCK_NO_CHANGE;
MACRO_SQL SQL_LCK_UNLOCK;
MACRO_SQL SQL_LEN_BINARY_ATTR_OFFSET;
MACRO_SQL SQL_LEN_DATA_AT_EXEC_OFFSET;
MACRO_SQL SQL_LIKE_ESCAPE_CLAUSE;
MACRO_SQL SQL_LIKE_ONLY;
MACRO_SQL SQL_LOCK_EXCLUSIVE;
MACRO_SQL SQL_LOCK_NO_CHANGE;
MACRO_SQL SQL_LOCK_TYPES;
MACRO_SQL SQL_LOCK_UNLOCK;
MACRO_SQL SQL_LOGIN_TIMEOUT;
MACRO_SQL SQL_LOGIN_TIMEOUT_DEFAULT;
MACRO_SQL SQL_LONGVARBINARY;
MACRO_SQL SQL_LONGVARCHAR;
MACRO_SQL SQL_MAXIMUM_CATALOG_NAME_LENGTH;
MACRO_SQL SQL_MAXIMUM_COLUMNS_IN_GROUP_BY;
MACRO_SQL SQL_MAXIMUM_COLUMNS_IN_INDEX;
MACRO_SQL SQL_MAXIMUM_COLUMNS_IN_ORDER_BY;
MACRO_SQL SQL_MAXIMUM_COLUMNS_IN_SELECT;
MACRO_SQL SQL_MAXIMUM_COLUMN_NAME_LENGTH;
MACRO_SQL SQL_MAXIMUM_CONCURRENT_ACTIVITIES;
MACRO_SQL SQL_MAXIMUM_CURSOR_NAME_LENGTH;
MACRO_SQL SQL_MAXIMUM_DRIVER_CONNECTIONS;
MACRO_SQL SQL_MAXIMUM_IDENTIFIER_LENGTH;
MACRO_SQL SQL_MAXIMUM_INDEX_SIZE;
MACRO_SQL SQL_MAXIMUM_ROW_SIZE;
MACRO_SQL SQL_MAXIMUM_SCHEMA_NAME_LENGTH;
MACRO_SQL SQL_MAXIMUM_STATEMENT_LENGTH;
MACRO_SQL SQL_MAXIMUM_TABLES_IN_SELECT;
MACRO_SQL SQL_MAXIMUM_USER_NAME_LENGTH;
MACRO_SQL SQL_MAX_ASYNC_CONCURRENT_STATEMENTS;
MACRO_SQL SQL_MAX_BINARY_LITERAL_LEN;
MACRO_SQL SQL_MAX_CATALOG_NAME_LEN;
MACRO_SQL SQL_MAX_CHAR_LITERAL_LEN;
MACRO_SQL SQL_MAX_COLUMNS_IN_GROUP_BY;
MACRO_SQL SQL_MAX_COLUMNS_IN_INDEX;
MACRO_SQL SQL_MAX_COLUMNS_IN_ORDER_BY;
MACRO_SQL SQL_MAX_COLUMNS_IN_SELECT;
MACRO_SQL SQL_MAX_COLUMNS_IN_TABLE;
MACRO_SQL SQL_MAX_COLUMN_NAME_LEN;
MACRO_SQL SQL_MAX_CONCURRENT_ACTIVITIES;
MACRO_SQL SQL_MAX_CURSOR_NAME_LEN;
MACRO_SQL SQL_MAX_DRIVER_CONNECTIONS;
MACRO_SQL SQL_MAX_DSN_LENGTH;
MACRO_SQL SQL_MAX_IDENTIFIER_LEN;
MACRO_SQL SQL_MAX_INDEX_SIZE;
MACRO_SQL SQL_MAX_LENGTH;
MACRO_SQL SQL_MAX_LENGTH_DEFAULT;
MACRO_SQL SQL_MAX_MESSAGE_LENGTH;
MACRO_SQL SQL_MAX_NUMERIC_LEN;
MACRO_SQL SQL_MAX_OPTION_STRING_LENGTH;
MACRO_SQL SQL_MAX_OWNER_NAME_LEN;
MACRO_SQL SQL_MAX_PROCEDURE_NAME_LEN;
MACRO_SQL SQL_MAX_QUALIFIER_NAME_LEN;
MACRO_SQL SQL_MAX_ROWS;
MACRO_SQL SQL_MAX_ROWS_DEFAULT;
MACRO_SQL SQL_MAX_ROW_SIZE;
MACRO_SQL SQL_MAX_ROW_SIZE_INCLUDES_LONG;
MACRO_SQL SQL_MAX_SCHEMA_NAME_LEN;
MACRO_SQL SQL_MAX_STATEMENT_LEN;
MACRO_SQL SQL_MAX_TABLES_IN_SELECT;
MACRO_SQL SQL_MAX_TABLE_NAME_LEN;
MACRO_SQL SQL_MAX_USER_NAME_LEN;
MACRO_SQL SQL_MODE_DEFAULT;
MACRO_SQL SQL_MODE_READ_ONLY;
MACRO_SQL SQL_MODE_READ_WRITE;
MACRO_SQL SQL_MULTIPLE_ACTIVE_TXN;
MACRO_SQL SQL_MULT_RESULT_SETS;
MACRO_SQL SQL_NAMED;
MACRO_SQL SQL_NC_END;
MACRO_SQL SQL_NC_HIGH;
MACRO_SQL SQL_NC_LOW;
MACRO_SQL SQL_NC_START;
MACRO_SQL SQL_NEED_DATA;
MACRO_SQL SQL_NEED_LONG_DATA_LEN;
MACRO_SQL SQL_NNC_NON_NULL;
MACRO_SQL SQL_NNC_NULL;
MACRO_SQL SQL_NONSCROLLABLE;
MACRO_SQL SQL_NON_NULLABLE_COLUMNS;
MACRO_SQL SQL_NOSCAN;
MACRO_SQL SQL_NOSCAN_DEFAULT;
MACRO_SQL SQL_NOSCAN_OFF;
MACRO_SQL SQL_NOSCAN_ON;
MACRO_SQL SQL_NOT_DEFERRABLE;
MACRO_SQL SQL_NO_ACTION;
MACRO_SQL SQL_NO_COLUMN_NUMBER;
MACRO_SQL SQL_NO_DATA;
MACRO_SQL SQL_NO_DATA_FOUND;
MACRO_SQL SQL_NO_NULLS;
MACRO_SQL SQL_NO_ROW_NUMBER;
MACRO_SQL SQL_NO_TOTAL;
MACRO_SQL SQL_NTS;
MACRO_SQL SQL_NTSL;
MACRO_SQL SQL_NULLABLE;
MACRO_SQL SQL_NULLABLE_UNKNOWN;
MACRO_SQL SQL_NULL_COLLATION;
MACRO_SQL SQL_NULL_DATA;
MACRO_SQL SQL_NULL_HANDLE;
MACRO_SQL SQL_NULL_HDBC;
MACRO_SQL SQL_NULL_HDESC;
MACRO_SQL SQL_NULL_HENV;
MACRO_SQL SQL_NULL_HSTMT;
MACRO_SQL SQL_NUMERIC;
MACRO_SQL SQL_NUMERIC_FUNCTIONS;
MACRO_SQL SQL_OAC_LEVEL1;
MACRO_SQL SQL_OAC_LEVEL2;
MACRO_SQL SQL_OAC_NONE;
MACRO_SQL SQL_ODBC_API_CONFORMANCE;
MACRO_SQL SQL_ODBC_CURSORS;
MACRO_SQL SQL_ODBC_INTERFACE_CONFORMANCE;
MACRO_SQL SQL_ODBC_SAG_CLI_CONFORMANCE;
MACRO_SQL SQL_ODBC_SQL_CONFORMANCE;
MACRO_SQL SQL_ODBC_SQL_OPT_IEF;
MACRO_SQL SQL_ODBC_VER;
MACRO_SQL SQL_OIC_CORE;
MACRO_SQL SQL_OIC_LEVEL1;
MACRO_SQL SQL_OIC_LEVEL2;
MACRO_SQL SQL_OJ_ALL_COMPARISON_OPS;
MACRO_SQL SQL_OJ_CAPABILITIES;
MACRO_SQL SQL_OJ_FULL;
MACRO_SQL SQL_OJ_INNER;
MACRO_SQL SQL_OJ_LEFT;
MACRO_SQL SQL_OJ_NESTED;
MACRO_SQL SQL_OJ_NOT_ORDERED;
MACRO_SQL SQL_OJ_RIGHT;
MACRO_SQL SQL_OPT_TRACE;
MACRO_SQL SQL_OPT_TRACEFILE;
MACRO_SQL SQL_OPT_TRACE_DEFAULT;
MACRO_SQL SQL_OPT_TRACE_OFF;
MACRO_SQL SQL_OPT_TRACE_ON;
MACRO_SQL SQL_ORDER_BY_COLUMNS_IN_SELECT;
MACRO_SQL SQL_OSCC_COMPLIANT;
MACRO_SQL SQL_OSCC_NOT_COMPLIANT;
MACRO_SQL SQL_OSC_CORE;
MACRO_SQL SQL_OSC_EXTENDED;
MACRO_SQL SQL_OSC_MINIMUM;
MACRO_SQL SQL_OUTER_JOINS;
MACRO_SQL SQL_OUTER_JOIN_CAPABILITIES;
MACRO_SQL SQL_OU_DML_STATEMENTS;
MACRO_SQL SQL_OU_INDEX_DEFINITION;
MACRO_SQL SQL_OU_PRIVILEGE_DEFINITION;
MACRO_SQL SQL_OU_PROCEDURE_INVOCATION;
MACRO_SQL SQL_OU_TABLE_DEFINITION;
MACRO_SQL SQL_OV_ODBC2;
MACRO_SQL SQL_OV_ODBC3;
MACRO_SQL SQL_OWNER_TERM;
MACRO_SQL SQL_OWNER_USAGE;
MACRO_SQL SQL_PACKET_SIZE;
MACRO_SQL SQL_PARAM_ARRAY_ROW_COUNTS;
MACRO_SQL SQL_PARAM_ARRAY_SELECTS;
MACRO_SQL SQL_PARAM_BIND_BY_COLUMN;
MACRO_SQL SQL_PARAM_BIND_TYPE_DEFAULT;
MACRO_SQL SQL_PARAM_DIAG_UNAVAILABLE;
MACRO_SQL SQL_PARAM_ERROR;
MACRO_SQL SQL_PARAM_IGNORE;
MACRO_SQL SQL_PARAM_INPUT;
MACRO_SQL SQL_PARAM_INPUT_OUTPUT;
MACRO_SQL SQL_PARAM_OUTPUT;
MACRO_SQL SQL_PARAM_PROCEED;
MACRO_SQL SQL_PARAM_SUCCESS;
MACRO_SQL SQL_PARAM_SUCCESS_WITH_INFO;
MACRO_SQL SQL_PARAM_TYPE_DEFAULT;
MACRO_SQL SQL_PARAM_TYPE_UNKNOWN;
MACRO_SQL SQL_PARAM_UNUSED;
MACRO_SQL SQL_PARC_BATCH;
MACRO_SQL SQL_PARC_NO_BATCH;
MACRO_SQL SQL_PAS_BATCH;
MACRO_SQL SQL_PAS_NO_BATCH;
MACRO_SQL SQL_PAS_NO_SELECT;
MACRO_SQL SQL_PC_NON_PSEUDO;
MACRO_SQL SQL_PC_NOT_PSEUDO;
MACRO_SQL SQL_PC_PSEUDO;
MACRO_SQL SQL_PC_UNKNOWN;
MACRO_SQL SQL_POSITION;
MACRO_SQL SQL_POSITIONED_STATEMENTS;
MACRO_SQL SQL_POS_ADD;
MACRO_SQL SQL_POS_DELETE;
MACRO_SQL SQL_POS_OPERATIONS;
MACRO_SQL SQL_POS_POSITION;
MACRO_SQL SQL_POS_REFRESH;
MACRO_SQL SQL_POS_UPDATE;
MACRO_SQL SQL_PRED_BASIC;
MACRO_SQL SQL_PRED_CHAR;
MACRO_SQL SQL_PRED_NONE;
MACRO_SQL SQL_PRED_SEARCHABLE;
MACRO_SQL SQL_PROCEDURES;
MACRO_SQL SQL_PROCEDURE_TERM;
MACRO_SQL SQL_PS_POSITIONED_DELETE;
MACRO_SQL SQL_PS_POSITIONED_UPDATE;
MACRO_SQL SQL_PS_SELECT_FOR_UPDATE;
MACRO_SQL SQL_PT_FUNCTION;
MACRO_SQL SQL_PT_PROCEDURE;
MACRO_SQL SQL_PT_UNKNOWN;
MACRO_SQL SQL_QL_END;
MACRO_SQL SQL_QL_START;
MACRO_SQL SQL_QUALIFIER_LOCATION;
MACRO_SQL SQL_QUALIFIER_NAME_SEPARATOR;
MACRO_SQL SQL_QUALIFIER_TERM;
MACRO_SQL SQL_QUALIFIER_USAGE;
MACRO_SQL SQL_QUERY_TIMEOUT;
MACRO_SQL SQL_QUERY_TIMEOUT_DEFAULT;
MACRO_SQL SQL_QUICK;
MACRO_SQL SQL_QUIET_MODE;
MACRO_SQL SQL_QUOTED_IDENTIFIER_CASE;
MACRO_SQL SQL_QU_DML_STATEMENTS;
MACRO_SQL SQL_QU_INDEX_DEFINITION;
MACRO_SQL SQL_QU_PRIVILEGE_DEFINITION;
MACRO_SQL SQL_QU_PROCEDURE_INVOCATION;
MACRO_SQL SQL_QU_TABLE_DEFINITION;
MACRO_SQL SQL_RD_DEFAULT;
MACRO_SQL SQL_RD_OFF;
MACRO_SQL SQL_RD_ON;
MACRO_SQL SQL_REAL;
MACRO_SQL SQL_REFRESH;
MACRO_SQL SQL_RESET_PARAMS;
MACRO_SQL SQL_RESTRICT;
MACRO_SQL SQL_RESULT_COL;
MACRO_SQL SQL_RETRIEVE_DATA;
MACRO_SQL SQL_RETURN_VALUE;
MACRO_SQL SQL_ROLLBACK;
MACRO_SQL SQL_ROWSET_SIZE;
MACRO_SQL SQL_ROWSET_SIZE_DEFAULT;
MACRO_SQL SQL_ROWVER;
MACRO_SQL SQL_ROW_ADDED;
MACRO_SQL SQL_ROW_DELETED;
MACRO_SQL SQL_ROW_ERROR;
MACRO_SQL SQL_ROW_IDENTIFIER;
MACRO_SQL SQL_ROW_IGNORE;
MACRO_SQL SQL_ROW_NOROW;
MACRO_SQL SQL_ROW_NUMBER;
MACRO_SQL SQL_ROW_NUMBER_UNKNOWN;
MACRO_SQL SQL_ROW_PROCEED;
MACRO_SQL SQL_ROW_SUCCESS;
MACRO_SQL SQL_ROW_SUCCESS_WITH_INFO;
MACRO_SQL SQL_ROW_UPDATED;
MACRO_SQL SQL_ROW_UPDATES;
MACRO_SQL SQL_SCCO_LOCK;
MACRO_SQL SQL_SCCO_OPT_ROWVER;
MACRO_SQL SQL_SCCO_OPT_TIMESTAMP;
MACRO_SQL SQL_SCCO_OPT_VALUES;
MACRO_SQL SQL_SCCO_READ_ONLY;
MACRO_SQL SQL_SCC_ISO92_CLI;
MACRO_SQL SQL_SCC_XOPEN_CLI_VERSION1;
MACRO_SQL SQL_SCHEMA_TERM;
MACRO_SQL SQL_SCHEMA_USAGE;
MACRO_SQL SQL_SCOPE_CURROW;
MACRO_SQL SQL_SCOPE_SESSION;
MACRO_SQL SQL_SCOPE_TRANSACTION;
MACRO_SQL SQL_SCROLLABLE;
MACRO_SQL SQL_SCROLL_CONCURRENCY;
MACRO_SQL SQL_SCROLL_DYNAMIC;
MACRO_SQL SQL_SCROLL_FORWARD_ONLY;
MACRO_SQL SQL_SCROLL_KEYSET_DRIVEN;
MACRO_SQL SQL_SCROLL_OPTIONS;
MACRO_SQL SQL_SCROLL_STATIC;
MACRO_SQL SQL_SC_FIPS127_2_TRANSITIONAL;
MACRO_SQL SQL_SC_NON_UNIQUE;
MACRO_SQL SQL_SC_SQL92_ENTRY;
MACRO_SQL SQL_SC_SQL92_FULL;
MACRO_SQL SQL_SC_SQL92_INTERMEDIATE;
MACRO_SQL SQL_SC_TRY_UNIQUE;
MACRO_SQL SQL_SC_UNIQUE;
MACRO_SQL SQL_SDF_CURRENT_DATE;
MACRO_SQL SQL_SDF_CURRENT_TIME;
MACRO_SQL SQL_SDF_CURRENT_TIMESTAMP;
MACRO_SQL SQL_SEARCHABLE;
MACRO_SQL SQL_SEARCH_PATTERN_ESCAPE;
MACRO_SQL SQL_SENSITIVE;
MACRO_SQL SQL_SERVER_NAME;
MACRO_SQL SQL_SETPARAM_VALUE_MAX;
MACRO_SQL SQL_SETPOS_MAX_LOCK_VALUE;
MACRO_SQL SQL_SETPOS_MAX_OPTION_VALUE;
MACRO_SQL SQL_SET_DEFAULT;
MACRO_SQL SQL_SET_NULL;
MACRO_SQL SQL_SFKD_CASCADE;
MACRO_SQL SQL_SFKD_NO_ACTION;
MACRO_SQL SQL_SFKD_SET_DEFAULT;
MACRO_SQL SQL_SFKD_SET_NULL;
MACRO_SQL SQL_SFKU_CASCADE;
MACRO_SQL SQL_SFKU_NO_ACTION;
MACRO_SQL SQL_SFKU_SET_DEFAULT;
MACRO_SQL SQL_SFKU_SET_NULL;
MACRO_SQL SQL_SG_DELETE_TABLE;
MACRO_SQL SQL_SG_INSERT_COLUMN;
MACRO_SQL SQL_SG_INSERT_TABLE;
MACRO_SQL SQL_SG_REFERENCES_COLUMN;
MACRO_SQL SQL_SG_REFERENCES_TABLE;
MACRO_SQL SQL_SG_SELECT_TABLE;
MACRO_SQL SQL_SG_UPDATE_COLUMN;
MACRO_SQL SQL_SG_UPDATE_TABLE;
MACRO_SQL SQL_SG_USAGE_ON_CHARACTER_SET;
MACRO_SQL SQL_SG_USAGE_ON_COLLATION;
MACRO_SQL SQL_SG_USAGE_ON_DOMAIN;
MACRO_SQL SQL_SG_USAGE_ON_TRANSLATION;
MACRO_SQL SQL_SG_WITH_GRANT_OPTION;
MACRO_SQL SQL_SIGNED_OFFSET;
MACRO_SQL SQL_SIMULATE_CURSOR;
MACRO_SQL SQL_SMALLINT;
MACRO_SQL SQL_SNVF_BIT_LENGTH;
MACRO_SQL SQL_SNVF_CHARACTER_LENGTH;
MACRO_SQL SQL_SNVF_CHAR_LENGTH;
MACRO_SQL SQL_SNVF_EXTRACT;
MACRO_SQL SQL_SNVF_OCTET_LENGTH;
MACRO_SQL SQL_SNVF_POSITION;
MACRO_SQL SQL_SO_DYNAMIC;
MACRO_SQL SQL_SO_FORWARD_ONLY;
MACRO_SQL SQL_SO_KEYSET_DRIVEN;
MACRO_SQL SQL_SO_MIXED;
MACRO_SQL SQL_SO_STATIC;
MACRO_SQL SQL_SPECIAL_CHARACTERS;
MACRO_SQL SQL_SPEC_MAJOR;
MACRO_SQL SQL_SPEC_MINOR;
MACRO_SQL SQL_SP_BETWEEN;
MACRO_SQL SQL_SP_COMPARISON;
MACRO_SQL SQL_SP_EXISTS;
MACRO_SQL SQL_SP_IN;
MACRO_SQL SQL_SP_ISNOTNULL;
MACRO_SQL SQL_SP_ISNULL;
MACRO_SQL SQL_SP_LIKE;
MACRO_SQL SQL_SP_MATCH_FULL;
MACRO_SQL SQL_SP_MATCH_PARTIAL;
MACRO_SQL SQL_SP_MATCH_UNIQUE_FULL;
MACRO_SQL SQL_SP_MATCH_UNIQUE_PARTIAL;
MACRO_SQL SQL_SP_OVERLAPS;
MACRO_SQL SQL_SP_QUANTIFIED_COMPARISON;
MACRO_SQL SQL_SP_UNIQUE;
MACRO_SQL SQL_SQL92_DATETIME_FUNCTIONS;
MACRO_SQL SQL_SQL92_FOREIGN_KEY_DELETE_RULE;
MACRO_SQL SQL_SQL92_FOREIGN_KEY_UPDATE_RULE;
MACRO_SQL SQL_SQL92_GRANT;
MACRO_SQL SQL_SQL92_NUMERIC_VALUE_FUNCTIONS;
MACRO_SQL SQL_SQL92_PREDICATES;
MACRO_SQL SQL_SQL92_RELATIONAL_JOIN_OPERATORS;
MACRO_SQL SQL_SQL92_REVOKE;
MACRO_SQL SQL_SQL92_ROW_VALUE_CONSTRUCTOR;
MACRO_SQL SQL_SQL92_STRING_FUNCTIONS;
MACRO_SQL SQL_SQL92_VALUE_EXPRESSIONS;
MACRO_SQL SQL_SQLSTATE_SIZE;
MACRO_SQL SQL_SQL_CONFORMANCE;
MACRO_SQL SQL_SQ_COMPARISON;
MACRO_SQL SQL_SQ_CORRELATED_SUBQUERIES;
MACRO_SQL SQL_SQ_EXISTS;
MACRO_SQL SQL_SQ_IN;
MACRO_SQL SQL_SQ_QUANTIFIED;
MACRO_SQL SQL_SRJO_CORRESPONDING_CLAUSE;
MACRO_SQL SQL_SRJO_CROSS_JOIN;
MACRO_SQL SQL_SRJO_EXCEPT_JOIN;
MACRO_SQL SQL_SRJO_FULL_OUTER_JOIN;
MACRO_SQL SQL_SRJO_INNER_JOIN;
MACRO_SQL SQL_SRJO_INTERSECT_JOIN;
MACRO_SQL SQL_SRJO_LEFT_OUTER_JOIN;
MACRO_SQL SQL_SRJO_NATURAL_JOIN;
MACRO_SQL SQL_SRJO_RIGHT_OUTER_JOIN;
MACRO_SQL SQL_SRJO_UNION_JOIN;
MACRO_SQL SQL_SRVC_DEFAULT;
MACRO_SQL SQL_SRVC_NULL;
MACRO_SQL SQL_SRVC_ROW_SUBQUERY;
MACRO_SQL SQL_SRVC_VALUE_EXPRESSION;
MACRO_SQL SQL_SR_CASCADE;
MACRO_SQL SQL_SR_DELETE_TABLE;
MACRO_SQL SQL_SR_GRANT_OPTION_FOR;
MACRO_SQL SQL_SR_INSERT_COLUMN;
MACRO_SQL SQL_SR_INSERT_TABLE;
MACRO_SQL SQL_SR_REFERENCES_COLUMN;
MACRO_SQL SQL_SR_REFERENCES_TABLE;
MACRO_SQL SQL_SR_RESTRICT;
MACRO_SQL SQL_SR_SELECT_TABLE;
MACRO_SQL SQL_SR_UPDATE_COLUMN;
MACRO_SQL SQL_SR_UPDATE_TABLE;
MACRO_SQL SQL_SR_USAGE_ON_CHARACTER_SET;
MACRO_SQL SQL_SR_USAGE_ON_COLLATION;
MACRO_SQL SQL_SR_USAGE_ON_DOMAIN;
MACRO_SQL SQL_SR_USAGE_ON_TRANSLATION;
MACRO_SQL SQL_SSF_CONVERT;
MACRO_SQL SQL_SSF_LOWER;
MACRO_SQL SQL_SSF_SUBSTRING;
MACRO_SQL SQL_SSF_TRANSLATE;
MACRO_SQL SQL_SSF_TRIM_BOTH;
MACRO_SQL SQL_SSF_TRIM_LEADING;
MACRO_SQL SQL_SSF_TRIM_TRAILING;
MACRO_SQL SQL_SSF_UPPER;
MACRO_SQL SQL_SS_ADDITIONS;
MACRO_SQL SQL_SS_DELETIONS;
MACRO_SQL SQL_SS_UPDATES;
MACRO_SQL SQL_STANDARD_CLI_CONFORMANCE;
MACRO_SQL SQL_STATIC_CURSOR_ATTRIBUTES1;
MACRO_SQL SQL_STATIC_CURSOR_ATTRIBUTES2;
MACRO_SQL SQL_STATIC_SENSITIVITY;
MACRO_SQL SQL_STILL_EXECUTING;
MACRO_SQL SQL_STRING_FUNCTIONS;
MACRO_SQL SQL_SUBQUERIES;
MACRO_SQL SQL_SUCCESS;
MACRO_SQL SQL_SUCCESS_WITH_INFO;
MACRO_SQL SQL_SU_DML_STATEMENTS;
MACRO_SQL SQL_SU_INDEX_DEFINITION;
MACRO_SQL SQL_SU_PRIVILEGE_DEFINITION;
MACRO_SQL SQL_SU_PROCEDURE_INVOCATION;
MACRO_SQL SQL_SU_TABLE_DEFINITION;
MACRO_SQL SQL_SVE_CASE;
MACRO_SQL SQL_SVE_CAST;
MACRO_SQL SQL_SVE_COALESCE;
MACRO_SQL SQL_SVE_NULLIF;
MACRO_SQL SQL_SYSTEM_FUNCTIONS;
MACRO_SQL SQL_TABLE_STAT;
MACRO_SQL SQL_TABLE_TERM;
MACRO_SQL SQL_TC_ALL;
MACRO_SQL SQL_TC_DDL_COMMIT;
MACRO_SQL SQL_TC_DDL_IGNORE;
MACRO_SQL SQL_TC_DML;
MACRO_SQL SQL_TC_NONE;
MACRO_SQL SQL_TIME;
MACRO_SQL SQL_TIMEDATE_ADD_INTERVALS;
MACRO_SQL SQL_TIMEDATE_DIFF_INTERVALS;
MACRO_SQL SQL_TIMEDATE_FUNCTIONS;
MACRO_SQL SQL_TIMESTAMP;
MACRO_SQL SQL_TIMESTAMP_LEN;
MACRO_SQL SQL_TIME_LEN;
MACRO_SQL SQL_TINYINT;
MACRO_SQL SQL_TRANSACTION_CAPABLE;
MACRO_SQL SQL_TRANSACTION_ISOLATION_OPTION;
MACRO_SQL SQL_TRANSACTION_READ_COMMITTED;
MACRO_SQL SQL_TRANSACTION_READ_UNCOMMITTED;
MACRO_SQL SQL_TRANSACTION_REPEATABLE_READ;
MACRO_SQL SQL_TRANSACTION_SERIALIZABLE;
MACRO_SQL SQL_TRANSLATE_DLL;
MACRO_SQL SQL_TRANSLATE_OPTION;
MACRO_SQL SQL_TRUE;
MACRO_SQL SQL_TXN_CAPABLE;
MACRO_SQL SQL_TXN_ISOLATION;
MACRO_SQL SQL_TXN_ISOLATION_OPTION;
MACRO_SQL SQL_TXN_READ_COMMITTED;
MACRO_SQL SQL_TXN_READ_UNCOMMITTED;
MACRO_SQL SQL_TXN_REPEATABLE_READ;
MACRO_SQL SQL_TXN_SERIALIZABLE;
MACRO_SQL SQL_TYPE_DATE;
MACRO_SQL SQL_TYPE_NULL;
MACRO_SQL SQL_TYPE_TIME;
MACRO_SQL SQL_TYPE_TIMESTAMP;
MACRO_SQL SQL_UB_DEFAULT;
MACRO_SQL SQL_UB_FIXED;
MACRO_SQL SQL_UB_OFF;
MACRO_SQL SQL_UB_ON;
MACRO_SQL SQL_UB_VARIABLE;
MACRO_SQL SQL_UNBIND;
MACRO_SQL SQL_UNICODE;
MACRO_SQL SQL_UNICODE_CHAR;
MACRO_SQL SQL_UNICODE_LONGVARCHAR;
MACRO_SQL SQL_UNICODE_VARCHAR;
MACRO_SQL SQL_UNION;
MACRO_SQL SQL_UNION_STATEMENT;
MACRO_SQL SQL_UNKNOWN_TYPE;
MACRO_SQL SQL_UNNAMED;
MACRO_SQL SQL_UNSEARCHABLE;
MACRO_SQL SQL_UNSIGNED_OFFSET;
MACRO_SQL SQL_UNSPECIFIED;
MACRO_SQL SQL_UPDATE;
MACRO_SQL SQL_UPDATE_BY_BOOKMARK;
MACRO_SQL SQL_USER_NAME;
MACRO_SQL SQL_USE_BOOKMARKS;
MACRO_SQL SQL_US_UNION;
MACRO_SQL SQL_US_UNION_ALL;
MACRO_SQL SQL_U_UNION;
MACRO_SQL SQL_U_UNION_ALL;
MACRO_SQL SQL_VARBINARY;
MACRO_SQL SQL_VARCHAR;
MACRO_SQL SQL_XOPEN_CLI_YEAR;
MACRO_SRCHFS SRCHFS_MATCHDIRS;
MACRO_SRCHFS SRCHFS_MATCHFILES;
MACRO_SRCHFS SRCHFS_MATCHPARTIALNAMES;
MACRO_SRCHFS SRCHFS_NEGATEPARAMS;
MACRO_SRCHFS SRCHFS_START;
MACRO_SRCHFS SRCHFS_VALIDOPTIONSMASK;
MACRO_SIDL SRUN;
MACRO_SSIZE SSIZE_MAX;
MACRO_SSLEEP SSLEEP;
MACRO_SSLEEP SSTOP;
MACRO_SS_NOFDREF SS_ASYNC;
MACRO_SS_NOFDREF SS_CANTRCVMORE;
MACRO_SS_NOFDREF SS_CANTSENDMORE;
MACRO_SS_NOFDREF SS_COMP;
MACRO_SS SS_DISABLE;
MACRO_SS_NOFDREF SS_INCOMP;
MACRO_SS_NOFDREF SS_ISCONFIRMING;
MACRO_SS_NOFDREF SS_ISCONNECTED;
MACRO_SS_NOFDREF SS_ISCONNECTING;
MACRO_SS_NOFDREF SS_ISDISCONNECTED;
MACRO_SS_NOFDREF SS_ISDISCONNECTING;
MACRO_SS_NOFDREF SS_NBIO;
MACRO_SS_NOFDREF SS_NOFDREF;
MACRO_SS SS_ONSTACK;
MACRO_SS_NOFDREF SS_PRIV;
MACRO_SS_NOFDREF SS_RCVATMARK;
MACRO_CLSIZELOG2 STACKSIZE;
MACRO_STACK STACK_GROWTH_UP;
MACRO_STACK_INCR STACK_INCR;
MACRO_QUERY STATUS;
MACRO_FILENO STDERR_FILENO;
MACRO_FILENO STDIN_FILENO;
MACRO_FILENO STDOUT_FILENO;
MACRO_STRCOUNT STRCOUNT;
MACRO_STRING STRING_LENGTH;
MACRO_STRU STRU_F;
MACRO_STRU STRU_P;
MACRO_STRU STRU_R;
MACRO_NUMWRITE STRWRITE;
MACRO_SUBCMDMASK SUBCMDMASK;
MACRO_SUBCMDSHIFT SUBCMDSHIFT;
accept_stat SUCCESS;
MACRO_SUN SUN_RPC;
MACRO_SUPPLY SUPPLY_INTERVAL;
MACRO_SUSP SUSP;
MACRO_SV_ONSTACK SV_INTERRUPT;
MACRO_SV_ONSTACK SV_NOCLDSTOP;
MACRO_SV_ONSTACK SV_NODEFER;
MACRO_SV_ONSTACK SV_ONSTACK;
MACRO_SV_ONSTACK SV_RESETHAND;
MACRO_SV SV_SAVE_REGS;
MACRO_SV_ONSTACK SV_SIGINFO;
MACRO_SWITCH SWITCH_OPTION_DEPRESS;
MACRO_SWITCH SWITCH_OPTION_NONE;
MACRO_SWITCH SWITCH_OPTION_WAIT;
MACRO_SW SW_FREED;
MACRO_SW SW_SEQUENTIAL;
MACRO_SYMTYPE SYMTYPE;
MACRO_SYNCH SYNCH;
MACRO_SYNC SYNC_POLICY_FIFO;
MACRO_SYNC SYNC_POLICY_FIXED_PRIORITY;
MACRO_SYNC SYNC_POLICY_LIFO;
MACRO_SYNC SYNC_POLICY_MAX;
MACRO_SYNC SYNC_POLICY_ORDER_MASK;
MACRO_SYNC SYNC_POLICY_REVERSED;
MACRO_SYSPROTO SYSPROTO_CONTROL;
MACRO_SYSPROTO SYSPROTO_EVENT;
MACRO_ONLY SYSTEMDSN_ONLY;
MACRO_CLOCK SYSTEM_CLOCK;
accept_stat SYSTEM_ERR;
MACRO_SYSTEM SYSTEM_REGION_BACKED;
MACRO_SYS SYS_ATPgetreq;
MACRO_SYS SYS_ATPgetrsp;
MACRO_SYS SYS_ATPsndreq;
MACRO_SYS SYS_ATPsndrsp;
MACRO_SYS SYS_ATgetmsg;
MACRO_SYS SYS_ATputmsg;
MACRO_SYS SYS_ATsocket;
MACRO_SYS SYS___pthread_kill;
MACRO_SYS SYS___syscall;
MACRO_SYS SYS___sysctl;
MACRO_SYS SYS_accept;
MACRO_SYS SYS_access;
MACRO_SYS SYS_acct;
MACRO_SYS SYS_add_profil;
MACRO_SYS SYS_adjtime;
MACRO_SYS SYS_bind;
MACRO_SYS SYS_chdir;
MACRO_SYS SYS_checkuseraccess;
MACRO_SYS SYS_chflags;
MACRO_SYS SYS_chmod;
MACRO_SYS SYS_chown;
MACRO_SYS SYS_chroot;
MACRO_SYS SYS_close;
MACRO_SYS SYS_connect;
MACRO_SYS SYS_dup;
MACRO_SYS SYS_dup2;
MACRO_SYS SYS_exchangedata;
MACRO_SYS SYS_execve;
MACRO_SYS SYS_exit;
MACRO_SYS SYS_fchdir;
MACRO_SYS SYS_fchflags;
MACRO_SYS SYS_fchmod;
MACRO_SYS SYS_fchown;
MACRO_SYS SYS_fcntl;
MACRO_SYS SYS_flock;
MACRO_SYS SYS_fork;
MACRO_SYS SYS_fpathconf;
MACRO_SYS SYS_fstat;
MACRO_SYS SYS_fstatfs;
MACRO_SYS SYS_fstatv;
MACRO_SYS SYS_fsync;
MACRO_SYS SYS_ftruncate;
MACRO_SYS SYS_futimes;
MACRO_SYS SYS_gc_control;
MACRO_SYS SYS_getattrlist;
MACRO_SYS SYS_getdirentries;
MACRO_SYS SYS_getdirentriesattr;
MACRO_SYS SYS_getdtablesize;
MACRO_SYS SYS_getegid;
MACRO_SYS SYS_geteuid;
MACRO_SYS SYS_getfh;
MACRO_SYS SYS_getfsstat;
MACRO_SYS SYS_getgid;
MACRO_SYS SYS_getgroups;
MACRO_SYS SYS_getitimer;
MACRO_SYS SYS_getlogin;
MACRO_SYS SYS_getpeername;
MACRO_SYS SYS_getpgid;
MACRO_SYS SYS_getpgrp;
MACRO_SYS SYS_getpid;
MACRO_SYS SYS_getppid;
MACRO_SYS SYS_getpriority;
MACRO_SYS SYS_getrlimit;
MACRO_SYS SYS_getrusage;
MACRO_SYS SYS_getsid;
MACRO_SYS SYS_getsockname;
MACRO_SYS SYS_getsockopt;
MACRO_SYS SYS_gettimeofday;
MACRO_SYS SYS_getuid;
MACRO_SYS SYS_ioctl;
MACRO_SYS SYS_issetugid;
MACRO_SYS SYS_kdebug_trace;
MACRO_SYS SYS_kill;
MACRO_SYS SYS_ktrace;
MACRO_SYS SYS_link;
MACRO_SYS SYS_listen;
MACRO_SYS SYS_load_shared_file;
MACRO_SYS SYS_lseek;
MACRO_SYS SYS_lstat;
MACRO_SYS SYS_lstatv;
MACRO_SYS SYS_madvise;
MACRO_SYS SYS_mincore;
MACRO_SYS SYS_minherit;
MACRO_SYS SYS_mkcomplex;
MACRO_SYS SYS_mkdir;
MACRO_SYS SYS_mkfifo;
MACRO_SYS SYS_mknod;
MACRO_SYS SYS_mlock;
MACRO_SYS SYS_mlockall;
MACRO_SYS SYS_mmap;
MACRO_SYS SYS_mount;
MACRO_SYS SYS_mprotect;
MACRO_SYS SYS_msgctl;
MACRO_SYS SYS_msgget;
MACRO_SYS SYS_msgrcv;
MACRO_SYS SYS_msgsnd;
MACRO_SYS SYS_msgsys;
MACRO_SYS SYS_msync;
MACRO_SYS SYS_munlock;
MACRO_SYS SYS_munlockall;
MACRO_SYS SYS_munmap;
MACRO_SYS SYS_new_system_shared_regions;
MACRO_SYS SYS_nfssvc;
MACRO_SYS SYS_open;
MACRO_SYS SYS_pathconf;
MACRO_SYS SYS_pipe;
MACRO_SYS SYS_pread;
MACRO_SYS SYS_profil;
MACRO_SYS SYS_pthread_sigmask;
MACRO_SYS SYS_ptrace;
MACRO_SYS SYS_pwrite;
MACRO_SYS SYS_quotactl;
MACRO_SYS SYS_read;
MACRO_SYS SYS_readlink;
MACRO_SYS SYS_readv;
MACRO_SYS SYS_reboot;
MACRO_SYS SYS_recvfrom;
MACRO_SYS SYS_recvmsg;
MACRO_SYS SYS_rename;
MACRO_SYS SYS_reset_shared_file;
MACRO_SYS SYS_revoke;
MACRO_SYS SYS_rmdir;
MACRO_SYS SYS_sbrk;
MACRO_SYS SYS_searchfs;
MACRO_SYS SYS_select;
MACRO_SYS SYS_sem_close;
MACRO_SYS SYS_sem_destroy;
MACRO_SYS SYS_sem_getvalue;
MACRO_SYS SYS_sem_init;
MACRO_SYS SYS_sem_open;
MACRO_SYS SYS_sem_post;
MACRO_SYS SYS_sem_trywait;
MACRO_SYS SYS_sem_unlink;
MACRO_SYS SYS_sem_wait;
MACRO_SYS SYS_semconfig;
MACRO_SYS SYS_semctl;
MACRO_SYS SYS_semget;
MACRO_SYS SYS_semop;
MACRO_SYS SYS_semsys;
MACRO_SYS SYS_sendmsg;
MACRO_SYS SYS_sendto;
MACRO_SYS SYS_setattrlist;
MACRO_SYS SYS_setegid;
MACRO_SYS SYS_seteuid;
MACRO_SYS SYS_setgid;
MACRO_SYS SYS_setgroups;
MACRO_SYS SYS_setitimer;
MACRO_SYS SYS_setlogin;
MACRO_SYS SYS_setpgid;
MACRO_SYS SYS_setpriority;
MACRO_SYS SYS_setprivexec;
MACRO_SYS SYS_setrlimit;
MACRO_SYS SYS_setsid;
MACRO_SYS SYS_setsockopt;
MACRO_SYS SYS_settimeofday;
MACRO_SYS SYS_setuid;
MACRO_SYS SYS_shm_open;
MACRO_SYS SYS_shm_unlink;
MACRO_SYS SYS_shmat;
MACRO_SYS SYS_shmctl;
MACRO_SYS SYS_shmdt;
MACRO_SYS SYS_shmget;
MACRO_SYS SYS_shmsys;
MACRO_SYS SYS_shutdown;
MACRO_SYS SYS_sigaction;
MACRO_SYS SYS_sigaltstack;
MACRO_SYS SYS_sigpending;
MACRO_SYS SYS_sigprocmask;
MACRO_SYS SYS_sigreturn;
MACRO_SYS SYS_sigsuspend;
MACRO_SYS SYS_sigwait;
MACRO_SYS SYS_socket;
MACRO_SYS SYS_socketpair;
MACRO_SYS SYS_sstk;
MACRO_SYS SYS_stat;
MACRO_SYS SYS_statfs;
MACRO_SYS SYS_statv;
MACRO_SYS SYS_swapon;
MACRO_SYS SYS_symlink;
MACRO_SYS SYS_sync;
MACRO_SYS SYS_syscall;
MACRO_SYS SYS_table;
MACRO_SYS SYS_truncate;
MACRO_SYS SYS_umask;
MACRO_SYS SYS_undelete;
MACRO_SYS SYS_unlink;
MACRO_SYS SYS_unmount;
MACRO_SYS SYS_utimes;
MACRO_SYS SYS_vfork;
MACRO_SYS SYS_wait4;
MACRO_SYS SYS_write;
MACRO_SYS SYS_writev;
MACRO_SZOMB SZOMB;
MACRO_S_BLKSIZE S_BLKSIZE;
MACRO_S S_IEXEC;
MACRO_S S_IFBLK;
MACRO_S S_IFCHR;
MACRO_S S_IFDIR;
MACRO_S S_IFIFO;
MACRO_S S_IFLNK;
MACRO_S S_IFMT;
MACRO_S S_IFREG;
MACRO_S S_IFSOCK;
MACRO_S S_IFWHT;
MACRO_S S_IREAD;
MACRO_S S_IRGRP;
MACRO_S S_IROTH;
MACRO_S S_IRUSR;
MACRO_S S_IRWXG;
MACRO_S S_IRWXO;
MACRO_S S_IRWXU;
MACRO_S S_ISGID;
MACRO_S S_ISTXT;
MACRO_S S_ISUID;
MACRO_S S_ISVTX;
MACRO_S S_IWGRP;
MACRO_S S_IWOTH;
MACRO_S S_IWRITE;
MACRO_S S_IWUSR;
MACRO_S S_IXGRP;
MACRO_S S_IXOTH;
MACRO_S S_IXUSR;
MACRO_SendQSize SendQSize;
MACRO_NEWLINE TAB;
MACRO_TAB0 TAB0;
MACRO_TAB0 TAB1;
MACRO_TAB0 TAB2;
MACRO_TTYDISC TABLDISC;
MACRO_TAG TAG_NO_FRAME_USED;
MACRO_TALK TALK_VERSION;
MACRO_TANDEM TANDEM;
MACRO_TARGET TARGET_CPU_68K;
MACRO_TARGET TARGET_CPU_ALPHA;
MACRO_TARGET TARGET_CPU_MIPS;
MACRO_TARGET TARGET_CPU_PPC;
MACRO_TARGET TARGET_CPU_SPARC;
MACRO_TARGET TARGET_CPU_X86;
MACRO_TARGET TARGET_OS_MAC;
MACRO_TARGET TARGET_OS_UNIX;
MACRO_TARGET TARGET_OS_WIN32;
MACRO_TARGET TARGET_RT_BIG_ENDIAN;
MACRO_TARGET TARGET_RT_LITTLE_ENDIAN;
MACRO_TARGET TARGET_RT_MAC_CFM;
MACRO_TARGET TARGET_RT_MAC_MACHO;
task_role TASK_BACKGROUND_APPLICATION;
MACRO_TASK TASK_BASIC_INFO;
MACRO_TASK TASK_BOOTSTRAP_PORT;
MACRO_TASK TASK_CATEGORY_POLICY;
task_role TASK_CONTROL_APPLICATION;
MACRO_TASK TASK_EVENTS_INFO;
task_role TASK_FOREGROUND_APPLICATION;
task_role TASK_GRAPHICS_SERVER;
MACRO_TASK TASK_HOST_PORT;
MACRO_TASK TASK_INFO_MAX;
MACRO_TASK TASK_KERNEL_PORT;
MACRO_TASK_NULL TASK_NULL;
MACRO_TASK TASK_PAGED_LEDGER_PORT;
MACRO_TASK_PORT TASK_PORT_REGISTER_MAX;
task_role TASK_RENICED;
MACRO_TASK TASK_SCHED_FIFO_INFO;
MACRO_TASK TASK_SCHED_INFO;
MACRO_TASK TASK_SCHED_RR_INFO;
MACRO_TASK TASK_SCHED_TIMESHARE_INFO;
MACRO_TASK TASK_SECURITY_TOKEN;
MACRO_TASK TASK_THREAD_TIMES_INFO;
task_role TASK_UNSPECIFIED;
MACRO_TASK TASK_WIRED_LEDGER_PORT;
MACRO_NL3 TBDELAY;
MACRO_TCIFLUSH TCIFLUSH;
MACRO_TCIOFF TCIOFF;
MACRO_TCIOFLUSH TCIOFLUSH;
MACRO_TCIOFF TCION;
MACRO_TCL_THREAD TCL_ALL_EVENTS;
MACRO_TCL TCL_ALPHA_RELEASE;
MACRO_TCL_THREAD TCL_APPEND_VALUE;
MACRO_TCL TCL_BETA_RELEASE;
MACRO_TCL_THREAD TCL_BREAK;
MACRO_TCL_THREAD TCL_CHANNEL_VERSION_1;
MACRO_TCL_THREAD TCL_CHANNEL_VERSION_2;
MACRO_TCL_THREAD TCL_CLOSE_READ;
MACRO_TCL_THREAD TCL_CLOSE_WRITE;
MACRO_TCL_THREAD TCL_CONTINUE;
MACRO_TCL_CONVERT TCL_CONVERT_MULTIBYTE;
MACRO_TCL_CONVERT TCL_CONVERT_NOSPACE;
MACRO_TCL_CONVERT TCL_CONVERT_SYNTAX;
MACRO_TCL_CONVERT TCL_CONVERT_UNKNOWN;
MACRO_TCL_THREAD TCL_DONT_USE_BRACES;
MACRO_TCL_THREAD TCL_DONT_WAIT;
$75C8E7CA27BE1E0F4E6BF64D1993A788 TCL_DOUBLE;
MACRO_TCL_THREAD TCL_DOUBLE_SPACE;
MACRO_TCL_THREAD TCL_DSTRING_STATIC_SIZE;
$75C8E7CA27BE1E0F4E6BF64D1993A788 TCL_EITHER;
MACRO_TCL_THREAD TCL_ENCODING_END;
MACRO_TCL_THREAD TCL_ENCODING_START;
MACRO_TCL_THREAD TCL_ENCODING_STOPONERROR;
MACRO_TCL_THREAD TCL_ENFORCE_MODE;
MACRO_TCL_THREAD TCL_ERROR;
MACRO_TCL_THREAD TCL_EVAL_DIRECT;
MACRO_TCL_THREAD TCL_EVAL_GLOBAL;
MACRO_TCL_THREAD TCL_EXACT;
MACRO_TCL_THREAD TCL_EXCEPTION;
MACRO_TCL_THREAD TCL_FILE_EVENTS;
MACRO_TCL TCL_FINAL_RELEASE;
MACRO_TCL_THREAD TCL_GLOBAL_ONLY;
MACRO_TCL_THREAD TCL_IDLE_EVENTS;
$75C8E7CA27BE1E0F4E6BF64D1993A788 TCL_INT;
MACRO_TCL_THREAD TCL_INTEGER_SPACE;
MACRO_TCL_THREAD TCL_INTERP_DESTROYED;
MACRO_TCL_THREAD TCL_LEAVE_ERR_MSG;
MACRO_TCL_THREAD TCL_LINK_BOOLEAN;
MACRO_TCL_THREAD TCL_LINK_DOUBLE;
MACRO_TCL_THREAD TCL_LINK_INT;
MACRO_TCL_THREAD TCL_LINK_READ_ONLY;
MACRO_TCL_THREAD TCL_LINK_STRING;
MACRO_TCL_THREAD TCL_LIST_ELEMENT;
MACRO_TCL TCL_MAJOR_VERSION;
MACRO_TCL_THREAD TCL_MAX_PREC;
MACRO_TCL TCL_MINOR_VERSION;
MACRO_TCL_THREAD TCL_MODE_BLOCKING;
MACRO_TCL_THREAD TCL_MODE_NONBLOCKING;
MACRO_TCL_THREAD TCL_NAMESPACE_ONLY;
MACRO_TCL_THREAD TCL_NO_EVAL;
MACRO_TCL_THREAD TCL_OK;
MACRO_TCL_THREAD TCL_ONE_WORD_KEYS;
MACRO_TCL_THREAD TCL_PARSE_BAD_NUMBER;
MACRO_TCL_THREAD TCL_PARSE_BRACE_EXTRA;
MACRO_TCL_THREAD TCL_PARSE_MISSING_BRACE;
MACRO_TCL_THREAD TCL_PARSE_MISSING_BRACKET;
MACRO_TCL_THREAD TCL_PARSE_MISSING_PAREN;
MACRO_TCL_THREAD TCL_PARSE_MISSING_QUOTE;
MACRO_TCL_THREAD TCL_PARSE_MISSING_VAR_BRACE;
MACRO_TCL_THREAD TCL_PARSE_PART1;
MACRO_TCL_THREAD TCL_PARSE_QUOTE_EXTRA;
MACRO_TCL_THREAD TCL_PARSE_SUCCESS;
MACRO_TCL_THREAD TCL_PARSE_SYNTAX;
Tcl_PathType TCL_PATH_ABSOLUTE;
Tcl_PathType TCL_PATH_RELATIVE;
Tcl_PathType TCL_PATH_VOLUME_RELATIVE;
$7DE6A019FB8D510204474F438D93B845 TCL_QUEUE_HEAD;
$7DE6A019FB8D510204474F438D93B845 TCL_QUEUE_MARK;
$7DE6A019FB8D510204474F438D93B845 TCL_QUEUE_TAIL;
MACRO_TCL_THREAD TCL_READABLE;
MACRO_TCL_THREAD TCL_REG_ADVANCED;
MACRO_TCL_THREAD TCL_REG_ADVF;
MACRO_TCL_THREAD TCL_REG_BASIC;
MACRO_TCL_THREAD TCL_REG_BOSONLY;
MACRO_TCL_THREAD TCL_REG_CANMATCH;
MACRO_TCL_THREAD TCL_REG_EXPANDED;
MACRO_TCL_THREAD TCL_REG_EXTENDED;
MACRO_TCL_THREAD TCL_REG_NEWLINE;
MACRO_TCL_THREAD TCL_REG_NLANCH;
MACRO_TCL_THREAD TCL_REG_NLSTOP;
MACRO_TCL_THREAD TCL_REG_NOCASE;
MACRO_TCL_THREAD TCL_REG_NOSUB;
MACRO_TCL_THREAD TCL_REG_NOTBOL;
MACRO_TCL_THREAD TCL_REG_NOTEOL;
MACRO_TCL_THREAD TCL_REG_QUOTE;
MACRO_TCL TCL_RELEASE_LEVEL;
MACRO_TCL TCL_RELEASE_SERIAL;
MACRO_TCL_THREAD TCL_RESULT_SIZE;
MACRO_TCL_THREAD TCL_RETURN;
MACRO_TCL_THREAD TCL_SERVICE_ALL;
MACRO_TCL_THREAD TCL_SERVICE_NONE;
MACRO_TCL_THREAD TCL_SMALL_HASH_TABLE;
MACRO_TCL_THREAD TCL_STDERR;
MACRO_TCL_THREAD TCL_STDIN;
MACRO_TCL_THREAD TCL_STDOUT;
MACRO_TCL_THREAD TCL_STRING_KEYS;
MACRO_TCL_CONVERT TCL_STUB_MAGIC;
MACRO_TCL_THREAD TCL_THREAD_JOINABLE;
MACRO_TCL_THREAD TCL_THREAD_NOFLAGS;
MACRO_TCL_THREAD TCL_THREAD_STACK_DEFAULT;
MACRO_TCL_THREAD TCL_TIMER_EVENTS;
MACRO_TCL_THREAD TCL_TOKEN_BS;
MACRO_TCL_THREAD TCL_TOKEN_COMMAND;
MACRO_TCL_THREAD TCL_TOKEN_OPERATOR;
MACRO_TCL_THREAD TCL_TOKEN_SIMPLE_WORD;
MACRO_TCL_THREAD TCL_TOKEN_SUB_EXPR;
MACRO_TCL_THREAD TCL_TOKEN_TEXT;
MACRO_TCL_THREAD TCL_TOKEN_VARIABLE;
MACRO_TCL_THREAD TCL_TOKEN_WORD;
MACRO_TCL_THREAD TCL_TRACE_ARRAY;
MACRO_TCL_THREAD TCL_TRACE_DESTROYED;
MACRO_TCL_THREAD TCL_TRACE_READS;
MACRO_TCL_THREAD TCL_TRACE_UNSETS;
MACRO_TCL_THREAD TCL_TRACE_WRITES;
Tcl_EolTranslation TCL_TRANSLATE_AUTO;
Tcl_EolTranslation TCL_TRANSLATE_CR;
Tcl_EolTranslation TCL_TRANSLATE_CRLF;
Tcl_EolTranslation TCL_TRANSLATE_LF;
MACRO_TCL_CONVERT TCL_UTF_MAX;
MACRO_TCL_THREAD TCL_WINDOW_EVENTS;
MACRO_TCL_THREAD TCL_WRITABLE;
MACRO_TCIFLUSH TCOFLUSH;
MACRO_TCOOFF TCOOFF;
MACRO_TCOOFF TCOON;
MACRO_TCP6S TCP6S_CLOSED;
MACRO_TCP6S TCP6S_CLOSE_WAIT;
MACRO_TCP6S TCP6S_CLOSING;
MACRO_TCP6S TCP6S_ESTABLISHED;
MACRO_TCP6S TCP6S_FIN_WAIT_1;
MACRO_TCP6S TCP6S_FIN_WAIT_2;
MACRO_TCP6S TCP6S_LAST_ACK;
MACRO_TCP6S TCP6S_LISTEN;
MACRO_TCP6S TCP6S_SYN_RECEIVED;
MACRO_TCP6S TCP6S_SYN_SENT;
MACRO_TCP6S TCP6S_TIME_WAIT;
MACRO_MSS TCP6_MSS;
MACRO_TCP6 TCP6_NSTATES;
MACRO_TCPOLEN_CC TCPOLEN_CC;
MACRO_TCPOLEN_CC TCPOLEN_CC_APPA;
MACRO_TCPOLEN TCPOLEN_MAXSEG;
MACRO_SACK_PERMITTED TCPOLEN_SACK_PERMITTED;
MACRO_TCPOLEN_TIMESTAMP TCPOLEN_TIMESTAMP;
MACRO_TCPOLEN_TIMESTAMP TCPOLEN_TSTAMP_APPA;
MACRO_WINDOW TCPOLEN_WINDOW;
MACRO_TCPOPT_TSTAMP TCPOPT_CC;
MACRO_TCPOPT_TSTAMP TCPOPT_CCECHO;
MACRO_TCPOPT_TSTAMP TCPOPT_CCNEW;
MACRO_TCPOPT TCPOPT_EOL;
MACRO_TCPOPT TCPOPT_MAXSEG;
MACRO_TCPOPT TCPOPT_NOP;
MACRO_TCPOPT_SACK TCPOPT_SACK;
MACRO_SACK_PERMITTED TCPOPT_SACK_PERMITTED;
MACRO_TCPOPT_SACK TCPOPT_TIMESTAMP;
MACRO_TCPOPT_TSTAMP TCPOPT_TSTAMP_HDR;
MACRO_WINDOW TCPOPT_WINDOW;
MACRO_TCPS TCPS_CLOSED;
MACRO_TCPS TCPS_CLOSE_WAIT;
MACRO_TCPS TCPS_CLOSING;
MACRO_TCPS TCPS_ESTABLISHED;
MACRO_TCPS TCPS_FIN_WAIT_1;
MACRO_TCPS TCPS_FIN_WAIT_2;
MACRO_TCPS TCPS_LAST_ACK;
MACRO_TCPS TCPS_LISTEN;
MACRO_TCPS TCPS_SYN_RECEIVED;
MACRO_TCPS TCPS_SYN_SENT;
MACRO_TCPS TCPS_TIME_WAIT;
MACRO_TCPTV TCPTV_KEEPCNT;
MACRO_TCPTV TCPTV_SRTTBASE;
MACRO_TCPTV TCPTV_TWTRUNC;
MACRO_TCPT TCPT_2MSL;
MACRO_TCPT TCPT_KEEP;
MACRO_TCPT TCPT_NTIMERS;
MACRO_TCPT TCPT_PERSIST;
MACRO_TCPT TCPT_REXMT;
MACRO_TCP_LINGERTIME TCP_LINGERTIME;
MACRO_TCP_MAX TCP_MAXBURST;
MACRO_TCP_MAX TCP_MAXHLEN;
MACRO_TCP_LINGERTIME TCP_MAXRXTSHIFT;
MACRO_TCP_MAX TCP_MAXSEG;
MACRO_TCP TCP_MAXWIN;
MACRO_TCP_MAX TCP_MAX_WINSHIFT;
MACRO_MSS TCP_MSS;
MACRO_TCP_MAX TCP_NODELAY;
MACRO_TCP_MAX TCP_NOOPT;
MACRO_TCP_MAX TCP_NOPUSH;
MACRO_TCP_MAX TCP_NSTATES;
MACRO_TCSANOW TCSADRAIN;
MACRO_TCSANOW TCSAFLUSH;
MACRO_TCSANOW TCSANOW;
MACRO_TCSANOW TCSASOFT;
MACRO_TELCMD TELCMD_FIRST;
MACRO_TELCMD TELCMD_LAST;
MACRO_TELOPT TELOPT_3270REGIME;
MACRO_TELOPT TELOPT_AUTHENTICATION;
MACRO_TELOPT TELOPT_BINARY;
MACRO_TELOPT TELOPT_BM;
MACRO_TELOPT TELOPT_DET;
MACRO_TELOPT TELOPT_ECHO;
MACRO_TELOPT TELOPT_ENCRYPT;
MACRO_TELOPT TELOPT_EOR;
MACRO_TELOPT TELOPT_EXOPL;
MACRO_TELOPT TELOPT_LFLOW;
MACRO_TELOPT TELOPT_LINEMODE;
MACRO_TELOPT TELOPT_LOGOUT;
MACRO_TELOPT TELOPT_NAMS;
MACRO_TELOPT TELOPT_NAOCRD;
MACRO_TELOPT TELOPT_NAOFFD;
MACRO_TELOPT TELOPT_NAOHTD;
MACRO_TELOPT TELOPT_NAOHTS;
MACRO_TELOPT TELOPT_NAOL;
MACRO_TELOPT TELOPT_NAOLFD;
MACRO_TELOPT TELOPT_NAOP;
MACRO_TELOPT TELOPT_NAOVTD;
MACRO_TELOPT TELOPT_NAOVTS;
MACRO_TELOPT TELOPT_NAWS;
MACRO_TELOPT TELOPT_NEW_ENVIRON;
MACRO_TELOPT TELOPT_OLD_ENVIRON;
MACRO_TELOPT TELOPT_OUTMRK;
MACRO_TELOPT TELOPT_RCP;
MACRO_TELOPT TELOPT_RCTE;
MACRO_TELOPT TELOPT_SGA;
MACRO_TELOPT TELOPT_SNDLOC;
MACRO_TELOPT TELOPT_STATUS;
MACRO_TELOPT TELOPT_SUPDUP;
MACRO_TELOPT TELOPT_SUPDUPOUTPUT;
MACRO_TELOPT TELOPT_TM;
MACRO_TELOPT TELOPT_TSPEED;
MACRO_TELOPT TELOPT_TTYLOC;
MACRO_TELOPT TELOPT_TTYPE;
MACRO_TELOPT TELOPT_TUID;
MACRO_TELOPT TELOPT_X3PAD;
MACRO_TELOPT TELOPT_XASCII;
MACRO_TELOPT TELOPT_XDISPLOC;
MACRO_TELQUAL TELQUAL_INFO;
MACRO_TELQUAL TELQUAL_IS;
MACRO_TELQUAL TELQUAL_NAME;
MACRO_TELQUAL TELQUAL_REPLY;
MACRO_TELQUAL TELQUAL_SEND;
MACRO_TEMPDEBUG TEMPDEBUG;
MACRO_TERMIOS TERMIOS;
MACRO_TGEXEC TGEXEC;
MACRO_TGREAD TGREAD;
MACRO_TGWRITE TGWRITE;
MACRO_THREAD_INFO THREAD_BASIC_INFO;
MACRO_THREAD_SCHED THREAD_EXTENDED_POLICY;
MACRO_THREAD_INFO THREAD_INFO_MAX;
MACRO_THREAD_SCHED THREAD_KERNEL_PORT;
MACRO_TASK_NULL THREAD_NULL;
MACRO_THREAD_SCHED THREAD_PRECEDENCE_POLICY;
MACRO_THREAD_SCHED THREAD_SCHED_FIFO_INFO;
MACRO_THREAD_SCHED THREAD_SCHED_RR_INFO;
MACRO_THREAD_SCHED THREAD_SCHED_TIMESHARE_INFO;
MACRO_THREAD_SCHED THREAD_STANDARD_POLICY;
MACRO_THREAD_SCHED THREAD_STANDARD_POLICY_COUNT;
MACRO_THREAD_STATE THREAD_STATE_FLAVOR_LIST;
MACRO_STATE_MAX THREAD_STATE_MAX;
MACRO_THREAD THREAD_STATE_NONE;
MACRO_THREAD_SCHED THREAD_TIME_CONSTRAINT_POLICY;
MACRO_TASK_NULL THR_ACT_NULL;
MACRO_TH_FIN TH_ACK;
MACRO_TH_FIN TH_CWR;
MACRO_TH_FIN TH_ECE;
MACRO_TH_FIN TH_FIN;
MACRO_TH_FIN TH_FLAGS;
MACRO_TH TH_FLAGS_IDLE;
MACRO_TH TH_FLAGS_SWAPPED;
MACRO_TH_FIN TH_PUSH;
MACRO_TH_FIN TH_RST;
MACRO_TH TH_STATE_HALTED;
MACRO_TH TH_STATE_RUNNING;
MACRO_TH TH_STATE_STOPPED;
MACRO_TH TH_STATE_UNINTERRUPTIBLE;
MACRO_TH TH_STATE_WAITING;
MACRO_TH_FIN TH_SYN;
MACRO_TH_FIN TH_URG;
MACRO_TH TH_USAGE_SCALE;
MACRO_ALLDELAY TILDE;
$D52DC52FEEE9FBA5CD86FC803E3DC8C2 TIMECOND_IFMODSINCE;
$D52DC52FEEE9FBA5CD86FC803E3DC8C2 TIMECOND_IFUNMODSINCE;
$D52DC52FEEE9FBA5CD86FC803E3DC8C2 TIMECOND_LAST;
$D52DC52FEEE9FBA5CD86FC803E3DC8C2 TIMECOND_LASTMOD;
$D52DC52FEEE9FBA5CD86FC803E3DC8C2 TIMECOND_NONE;
MACRO_TIMER TIMER_RATE;
MACRO_TIME_ABSOLUTE TIME_ABSOLUTE;
MACRO_TIME TIME_MICROS_MAX;
MACRO_TIME_ABSOLUTE TIME_RELATIVE;
MACRO_TIOCCBRK TIOCCBRK;
MACRO_TIOCCDTR TIOCCDTR;
MACRO_TIOCDRAIN TIOCDRAIN;
MACRO_TIOCDSIMICROCODE TIOCDSIMICROCODE;
MACRO_TIOCEXCL TIOCEXCL;
MACRO_TIOCHPCL TIOCHPCL;
MACRO_TIOCM TIOCM_CAR;
MACRO_TIOCM TIOCM_CD;
MACRO_TIOCM TIOCM_CTS;
MACRO_TIOCM TIOCM_DSR;
MACRO_TIOCM TIOCM_DTR;
MACRO_TIOCM TIOCM_LE;
MACRO_TIOCM TIOCM_RI;
MACRO_TIOCM TIOCM_RNG;
MACRO_TIOCM TIOCM_RTS;
MACRO_TIOCM TIOCM_SR;
MACRO_TIOCM TIOCM_ST;
MACRO_TIOCNOTTY TIOCNOTTY;
MACRO_TIOCNXCL TIOCNXCL;
MACRO_TIOCPKT TIOCPKT_DATA;
MACRO_TIOCPKT TIOCPKT_DOSTOP;
MACRO_TIOCPKT TIOCPKT_FLUSHREAD;
MACRO_TIOCPKT TIOCPKT_FLUSHWRITE;
MACRO_TIOCPKT TIOCPKT_IOCTL;
MACRO_TIOCPKT TIOCPKT_NOSTOP;
MACRO_TIOCPKT TIOCPKT_START;
MACRO_TIOCPKT TIOCPKT_STOP;
MACRO_TIOCSBRK TIOCSBRK;
MACRO_TIOCSCONS TIOCSCONS;
MACRO_TIOCSCTTY TIOCSCTTY;
MACRO_TIOCSDTR TIOCSDTR;
MACRO_TIOCSIG TIOCSIG;
MACRO_TIOCSTART TIOCSTART;
MACRO_TIOCSTAT TIOCSTAT;
MACRO_TIOCSTOP TIOCSTOP;
MACRO_TKT_FIL TKT_FIL_ACC;
MACRO_TKT_FIL TKT_FIL_FMT;
MACRO_TKT_FIL TKT_FIL_INI;
MACRO_TKT_FIL TKT_FIL_LCK;
MACRO_TKT TKT_FLG_ANONYMOUS;
MACRO_TKT TKT_FLG_FORWARDABLE;
MACRO_TKT TKT_FLG_FORWARDED;
MACRO_TKT TKT_FLG_HW_AUTH;
MACRO_TKT TKT_FLG_INITIAL;
MACRO_TKT TKT_FLG_INVALID;
MACRO_TKT TKT_FLG_MAY_POSTDATE;
MACRO_TKT TKT_FLG_OK_AS_DELEGATE;
MACRO_TKT TKT_FLG_POSTDATED;
MACRO_TKT TKT_FLG_PRE_AUTH;
MACRO_TKT TKT_FLG_PROXIABLE;
MACRO_TKT TKT_FLG_PROXY;
MACRO_TKT TKT_FLG_RENEWABLE;
MACRO_TKT TKT_FLG_TRANSIT_POLICY_CHECKED;
MACRO_TLOSS TLOSS;
MACRO_TMAGLEN TMAGLEN;
MACRO_TMP TMP_MAX;
MACRO_TM TM_APRIL;
MACRO_TM TM_AUGUST;
MACRO_TM TM_DECEMBER;
MACRO_TM TM_FEBRUARY;
MACRO_TM TM_FRIDAY;
MACRO_TM TM_JANUARY;
MACRO_TM TM_JULY;
MACRO_TM TM_JUNE;
MACRO_TM TM_MARCH;
MACRO_TM TM_MAY;
MACRO_TM TM_MONDAY;
MACRO_TM TM_NOVEMBER;
MACRO_TM TM_OCTOBER;
MACRO_TM TM_SATURDAY;
MACRO_TM TM_SEPTEMBER;
MACRO_TM TM_SUNDAY;
MACRO_TM TM_THURSDAY;
MACRO_TM TM_TUESDAY;
MACRO_TM TM_WEDNESDAY;
MACRO_TM TM_YEAR_BASE;
MACRO_TOEXEC TOEXEC;
MACRO_TOREAD TOREAD;
MACRO_ALLDELAY TOSTOP;
MACRO_TOWRITE TOWRITE;
MACRO_TRACE TRACE_ATTRS;
MACRO_TRACE TRACE_BITS;
MACRO_TRACE TRACE_CALLS;
MACRO_TRACE TRACE_CCALLS;
MACRO_TRACE TRACE_CHARPUT;
MACRO_TRACE TRACE_DATABASE;
MACRO_TRACE TRACE_DISABLE;
MACRO_TRACE TRACE_ICALLS;
MACRO_TRACE TRACE_IEVENT;
MACRO_TRACE TRACE_MAXIMUM;
MACRO_TRACE TRACE_MOVE;
MACRO_TRACE TRACE_ORDINARY;
MACRO_TRACE TRACE_TIMES;
MACRO_TRACE TRACE_TPUTS;
MACRO_TRACE TRACE_UPDATE;
MACRO_TRACE TRACE_VIRTPUT;
MACRO_CONTINUE TRANSIENT;
MACRO_TRCSIZ TRCSIZ;
MACRO_BOOL TRUE;
MACRO_TRY TRY_AGAIN;
MACRO_TR TR_BREADHIT;
MACRO_TR TR_BREADHITRA;
MACRO_TR TR_BREADMISS;
MACRO_TR TR_BREADMISSRA;
MACRO_TR TR_BREALLOC;
MACRO_TR TR_BRELSE;
MACRO_TR TR_BWRITE;
MACRO_TR TR_CACHEFOD;
MACRO_TR TR_EINTRANS;
MACRO_TR TR_EWAITMEM;
MACRO_TR TR_EXFOD;
MACRO_TR TR_FRECLAIM;
MACRO_TR TR_INTRANS;
MACRO_TR TR_MALL;
MACRO_TR TR_NFLAGS;
MACRO_TR TR_PGINDONE;
MACRO_TR TR_RECLAIM;
MACRO_TR TR_STAMP;
MACRO_TR TR_SWAPIN;
MACRO_TR TR_SWAPIO;
MACRO_TR TR_VADVISE;
MACRO_TR TR_VRFOD;
MACRO_TR TR_WAITMEM;
MACRO_TR TR_XFODHIT;
MACRO_TR TR_XFODMISS;
MACRO_TR TR_XIFREC;
MACRO_TR TR_XSFREC;
MACRO_TR TR_ZFOD;
MACRO_TSGID TSGID;
MACRO_TSPTYPENUMBER TSPTYPENUMBER;
MACRO_TSPVERSION TSPVERSION;
MACRO_TSP TSP_ACCEPT;
MACRO_TSP TSP_ACK;
MACRO_TSP TSP_ADJTIME;
MACRO_TSP TSP_ANY;
MACRO_TSP TSP_CONFLICT;
MACRO_TSP TSP_DATE;
MACRO_TSP TSP_DATEACK;
MACRO_TSP TSP_DATEREQ;
MACRO_TSP TSP_ELECTION;
MACRO_TSP TSP_LOOP;
MACRO_TSP TSP_MASTERACK;
MACRO_TSP TSP_MASTERREQ;
MACRO_TSP TSP_MASTERUP;
MACRO_TSP TSP_MSITE;
MACRO_TSP TSP_MSITEREQ;
MACRO_TSP TSP_QUIT;
MACRO_TSP TSP_REFUSE;
MACRO_TSP TSP_RESOLVE;
MACRO_TSP TSP_SETDATE;
MACRO_TSP TSP_SETDATEREQ;
MACRO_TSP TSP_SETTIME;
MACRO_TSP TSP_SLAVEUP;
MACRO_TSP TSP_TEST;
MACRO_TSP TSP_TRACEOFF;
MACRO_TSP TSP_TRACEON;
MACRO_CONTTYPE TSUID;
MACRO_TSVTX TSVTX;
MACRO_TS TS_ASYNC;
MACRO_TS TS_BKSL;
MACRO_TS TS_BUSY;
MACRO_TS TS_CAN_BYPASS_L_RINT;
MACRO_TS TS_CARR_ON;
MACRO_TS TS_CAR_OFLOW;
MACRO_TS TS_CNTTB;
MACRO_TS TS_CONNECTED;
MACRO_TS TS_ERASE;
MACRO_TS TS_FLUSH;
MACRO_TS TS_ISOPEN;
MACRO_TS TS_LNCH;
MACRO_TS TS_LOCAL;
MACRO_TS TS_SNOOP;
MACRO_TS TS_SO_OCOMPLETE;
MACRO_TS TS_SO_OLOWAT;
MACRO_TS TS_TBLOCK;
MACRO_TS TS_TIMEOUT;
MACRO_TS TS_TTSTOP;
MACRO_TS TS_TYPEN;
MACRO_TS TS_XCLUDE;
MACRO_TS TS_ZOMBIE;
MACRO_TTCP TTCP_CLIENT_SND_WND;
MACRO_TTIPRI TTIPRI;
MACRO_TTOPRI TTOPRI;
MACRO_TTYCLSIZE TTYCLSIZE;
MACRO_TTYDISC TTYDISC;
MACRO_OBUFSIZ TTYHOG;
MACRO_TTY_CHARMASK TTY_BI;
MACRO_TTY_CHARMASK TTY_CHARMASK;
MACRO_TTY_CHARMASK TTY_ERRORMASK;
MACRO_TTY_CHARMASK TTY_FE;
MACRO_TTY_CHARMASK TTY_OE;
MACRO_TTY TTY_ON;
MACRO_TTY_CHARMASK TTY_PE;
MACRO_TTY_CHARMASK TTY_QUOTE;
MACRO_TTY TTY_SECURE;
MACRO_NAME_SIZE TTY_SIZE;
MACRO_TUEXEC TUEXEC;
MACRO_TUREAD TUREAD;
MACRO_TUWRITE TUWRITE;
MACRO_TVERSLEN TVERSLEN;
MACRO_TYPE TYPE_A;
MACRO_TYPE TYPE_E;
MACRO_TYPE TYPE_I;
MACRO_TYPE TYPE_L;
MACRO_IF_NAME TYPE_SIZE;
MACRO_TZ TZ_MAX_CHARS;
MACRO_TZ TZ_MAX_LEAPS;
MACRO_TZ TZ_MAX_TIMES;
MACRO_TZ TZ_MAX_TYPES;
MACRO_T T_A;
MACRO_T T_AAAA;
MACRO_T T_AFSDB;
MACRO_T T_ANY;
MACRO_T T_AXFR;
MACRO_T T_CNAME;
MACRO_T T_GID;
MACRO_T T_GPOS;
MACRO_T T_HINFO;
MACRO_T T_ISDN;
MACRO_T T_KEY;
MACRO_T T_LOC;
MACRO_T T_MAILA;
MACRO_T T_MAILB;
MACRO_T T_MB;
MACRO_T T_MD;
MACRO_T T_MF;
MACRO_T T_MG;
MACRO_T T_MINFO;
MACRO_T T_MR;
MACRO_T T_MX;
MACRO_T T_NS;
MACRO_T T_NSAP;
MACRO_T T_NSAP_PTR;
MACRO_T T_NULL;
MACRO_T T_PTR;
MACRO_T T_PX;
MACRO_T T_RP;
MACRO_T T_RT;
MACRO_T T_SIG;
MACRO_T T_SOA;
MACRO_T T_TXT;
MACRO_T T_UID;
MACRO_T T_UINFO;
MACRO_T T_UNSPEC;
MACRO_T T_WKS;
MACRO_T T_X25;
MACRO_TuneParamCnt TuneParamCnt;
MACRO_UBC UBC_FLAGS_NONE;
MACRO_UBC UBC_HOLDOBJECT;
MACRO_UCHAR_MAX UCHAR_MAX;
MACRO_NULLPROC UDPMSGSIZE;
MACRO_UF UF_APPEND;
MACRO_UF_EXCLOSE UF_EXCLOSE;
MACRO_UF UF_IMMUTABLE;
MACRO_UF_EXCLOSE UF_MAPPED;
MACRO_UF UF_NODUMP;
MACRO_UF UF_OPAQUE;
MACRO_UF_EXCLOSE UF_RESERVED;
MACRO_UF UF_SETTABLE;
MACRO_UID UID_BIN;
MACRO_NAME UID_MAX;
MACRO_UID UID_ROOT;
MACRO_UID UID_UUCP;
MACRO_UINT8 UINT16_MAX;
MACRO_UINT8 UINT32_MAX;
MACRO_UINT8 UINT64_MAX;
MACRO_UINT8 UINT8_MAX;
MACRO_UINTMAX UINTMAX_MAX;
MACRO_UINTPTR UINTPTR_MAX;
MACRO_UINT_FAST8 UINT_FAST16_MAX;
MACRO_UINT_FAST8 UINT_FAST32_MAX;
MACRO_UINT_FAST8 UINT_FAST64_MAX;
MACRO_UINT_FAST8 UINT_FAST8_MAX;
MACRO_UINT UINT_LEAST16_MAX;
MACRO_UINT UINT_LEAST32_MAX;
MACRO_UINT UINT_LEAST64_MAX;
MACRO_UINT UINT_LEAST8_MAX;
MACRO_USHRT UINT_MAX;
uio_seg UIO_PHYS_USERSPACE;
uio_rw UIO_READ;
uio_seg UIO_SYSSPACE;
uio_seg UIO_USERISPACE;
uio_seg UIO_USERSPACE;
uio_rw UIO_WRITE;
MACRO_UI UI_DONTCACHE;
MACRO_UI UI_HASOBJREF;
MACRO_UI UI_HASPAGER;
MACRO_UI UI_INITED;
MACRO_UI UI_NONE;
MACRO_UI UI_WASMAPPED;
MACRO_ULLONG ULLONG_MAX;
MACRO_LONG_MAX ULONG_LONG_MAX;
MACRO_ULONG ULONG_MAX;
MACRO_UL UL_GETFSIZE;
MACRO_UL UL_SETFSIZE;
MACRO_OVERFLOW UNDERFLOW;
MACRO_TASK_NULL UND_SERVER_NULL;
MACRO_UNKNOWNGID UNKNOWNGID;
MACRO_UNKNOWNPERMISSIONS UNKNOWNPERMISSIONS;
MACRO_UNKNOWNUID UNKNOWNUID;
MACRO_UNKNOWN UNKNOWN_REQUEST;
MACRO_UNMNT UNMNT_ABOVE;
MACRO_UNMNT UNMNT_BELOW;
MACRO_UNMNT UNMNT_OPMASK;
MACRO_UNMNT UNMNT_REPLACE;
MACRO_UNVIS UNVIS_END;
MACRO_UNVIS UNVIS_ERROR;
MACRO_UNVIS UNVIS_NOCHAR;
MACRO_UNVIS UNVIS_SYNBAD;
MACRO_UNVIS UNVIS_VALID;
MACRO_UNVIS UNVIS_VALIDPUSH;
MACRO_UPAGES UPAGES;
MACRO_UPDATE UPDATE_IF_CHANGED;
MACRO_UPDATE UPDATE_UNCONDITIONAL;
MACRO_UPL UPL_ABORT_DUMP_PAGES;
MACRO_UPL UPL_ABORT_ERROR;
MACRO_UPL UPL_ABORT_FREE_ON_EMPTY;
MACRO_UPL UPL_ABORT_NOTIFY_EMPTY;
MACRO_UPL UPL_ABORT_RESTART;
MACRO_UPL UPL_ABORT_UNAVAILABLE;
MACRO_UPL UPL_CHECK_DIRTY;
MACRO_UPL UPL_CLEAN_IN_PLACE;
MACRO_UPL UPL_COMMIT_CLEAR_DIRTY;
MACRO_UPL UPL_COMMIT_FREE_ON_EMPTY;
MACRO_UPL UPL_COMMIT_INACTIVATE;
MACRO_UPL UPL_COMMIT_NOTIFY_EMPTY;
MACRO_UPL UPL_COMMIT_SET_DIRTY;
MACRO_UPL UPL_COPYOUT_FROM;
MACRO_UPL UPL_DEV_MEMORY;
MACRO_UPL UPL_FILE_IO;
MACRO_UPL UPL_FLAGS_NONE;
MACRO_UPL UPL_IOSYNC;
MACRO_UPL UPL_NOBLOCK;
MACRO_UPL UPL_NOCOMMIT;
MACRO_UPL UPL_NORDAHEAD;
MACRO_UPL UPL_NO_SYNC;
MACRO_VM_MAP UPL_NULL;
MACRO_UPL UPL_PHYS_CONTIG;
MACRO_UPL UPL_POP_ABSENT;
MACRO_UPL UPL_POP_BUSY;
MACRO_UPL UPL_POP_CLR;
MACRO_UPL UPL_POP_DIRTY;
MACRO_UPL UPL_POP_DUMP;
MACRO_UPL UPL_POP_PAGEOUT;
MACRO_UPL UPL_POP_PHYSICAL;
MACRO_UPL UPL_POP_PRECIOUS;
MACRO_UPL UPL_POP_SET;
MACRO_UPL UPL_PRECIOUS;
MACRO_UPL UPL_QUERY_OBJECT_TYPE;
MACRO_UPL UPL_RET_ONLY_ABSENT;
MACRO_UPL UPL_RET_ONLY_DIRTY;
MACRO_UPL UPL_SET_INTERNAL;
MACRO_SSIZE UQUAD_MAX;
MACRO_PER_SEC USEC_PER_SEC;
MACRO_ONLY USERDSN_ONLY;
MACRO_USER_CS USER_BC_BASE_MAX;
MACRO_USER_CS USER_BC_DIM_MAX;
MACRO_USER_CS USER_BC_SCALE_MAX;
MACRO_USER_CS USER_BC_STRING_MAX;
MACRO_USER_CS USER_COLL_WEIGHTS_MAX;
MACRO_USER_CS USER_CS_PATH;
MACRO_USER_CS USER_EXPR_NEST_MAX;
MACRO_USER_CS USER_LINE_MAX;
MACRO_USER_CS USER_MAXID;
MACRO_USER_CS USER_POSIX2_CHAR_TERM;
MACRO_USER_CS USER_POSIX2_C_BIND;
MACRO_USER_CS USER_POSIX2_C_DEV;
MACRO_USER_CS USER_POSIX2_FORT_DEV;
MACRO_USER_CS USER_POSIX2_FORT_RUN;
MACRO_USER_CS USER_POSIX2_LOCALEDEF;
MACRO_USER_CS USER_POSIX2_SW_DEV;
MACRO_USER_CS USER_POSIX2_UPE;
MACRO_USER_CS USER_POSIX2_VERSION;
MACRO_USER_CS USER_RE_DUP_MAX;
MACRO_USER USER_STACK_END;
MACRO_USER_CS USER_STREAM_MAX;
MACRO_USER_CS USER_TZNAME_MAX;
MACRO_USHRT USHRT_MAX;
MACRO_USRQUOTA USRQUOTA;
MACRO_USRSTACK USRSTACK;
MACRO_UT UT_HOSTSIZE;
MACRO_UT UT_LINESIZE;
MACRO_UT UT_NAMESIZE;
MACRO_VSTANDARD VAGE;
MACRO_VROOT VALIASED;
MACRO_VALID VALID_INT_BITS;
MACRO_VALID VALID_UINT_BITS;
MACRO_VA_NORM VA_ANOM;
MACRO_VA VA_EXCLUSIVE;
MACRO_VA_NORM VA_FLUSH;
MACRO_VA_NORM VA_NORM;
MACRO_VA_NORM VA_SEQL;
MACRO_VA VA_UTIMES_NULL;
vtype VBAD;
vtype VBLK;
MACRO_VROOT VBWAIT;
vtype VCHR;
vtype VCPLX;
MACRO_VDESC VDESC_MAX_VPS;
MACRO_VDESC VDESC_NOMAP_VPP;
MACRO_VDESC VDESC_NO_OFFSET;
MACRO_VDESC VDESC_VP0_WILLRELE;
MACRO_VDESC VDESC_VP1_WILLRELE;
MACRO_VDESC VDESC_VP2_WILLRELE;
MACRO_VDESC VDESC_VP3_WILLRELE;
MACRO_VDESC VDESC_VPP_WILLRELE;
vtype VDIR;
MACRO_VDISCARD VDISCARD;
MACRO_VDSUSP VDSUSP;
MACRO_VEOF VEOF;
MACRO_VEOF VEOL;
MACRO_VEOF VEOL2;
MACRO_VERASE VERASE;
MACRO_VERSION_LENGTH VERSION_LENGTH;
MACRO_SZ VERSION_SZ;
MACRO_VEXEC VEXEC;
vtype VFIFO;
MACRO_VFS VFS_CONF;
MACRO_VFS VFS_GENERIC;
MACRO_VFS VFS_MAXTYPENUM;
MACRO_VFS VFS_NUMMNTOPS;
MACRO_VSTANDARD VHASDIRTY;
MACRO_VIFF VIFF_SRCRT;
MACRO_VIFF VIFF_TUNNEL;
MACRO_VREPRINT VINTR;
MACRO_VROOT VISTTY;
MACRO_VIS VIS_CSTYLE;
MACRO_VIS VIS_NL;
MACRO_VIS VIS_NOSLASH;
MACRO_VIS VIS_OCTAL;
MACRO_VIS VIS_SAFE;
MACRO_VIS VIS_SP;
MACRO_VIS VIS_TAB;
MACRO_VIS VIS_WHITE;
MACRO_VKILL VKILL;
MACRO_VLNEXT VLNEXT;
vtype VLNK;
MACRO_VDISCARD VMIN;
MACRO_VROOT VMOUNT;
MACRO_VM_INHERIT VM_BEHAVIOR_DEFAULT;
MACRO_VM_INHERIT VM_BEHAVIOR_DONTNEED;
MACRO_VM_INHERIT VM_BEHAVIOR_RANDOM;
MACRO_VM_INHERIT VM_BEHAVIOR_RSEQNTL;
MACRO_VM_INHERIT VM_BEHAVIOR_SEQUENTIAL;
MACRO_VM_INHERIT VM_BEHAVIOR_WILLNEED;
MACRO_VM VM_FLAGS_ALIAS_MASK;
MACRO_VM VM_FLAGS_ANYWHERE;
MACRO_VM VM_FLAGS_FIXED;
MACRO_VM_INHERIT VM_INHERIT_COPY;
MACRO_VM_INHERIT VM_INHERIT_DEFAULT;
MACRO_VM_INHERIT VM_INHERIT_DONATE_COPY;
MACRO_VM_INHERIT VM_INHERIT_LAST_VALID;
MACRO_VM_INHERIT VM_INHERIT_NONE;
MACRO_VM_INHERIT VM_INHERIT_SHARE;
MACRO_VM_METER VM_LOADAVG;
MACRO_VM_METER VM_MACHFACTOR;
MACRO_VM_REGION VM_MAP_ENTRY_MAX;
MACRO_VM_MAP VM_MAP_NULL;
MACRO_VM_METER VM_MAXID;
MACRO_VM_MIN VM_MAX_ADDRESS;
MACRO_VM_MIN VM_MAX_KERNEL_ADDRESS;
MACRO_VM VM_MEMORY_ANALYSIS_TOOL;
MACRO_VM VM_MEMORY_APPKIT;
MACRO_VM VM_MEMORY_APPLICATION_SPECIFIC_1;
MACRO_VM VM_MEMORY_APPLICATION_SPECIFIC_16;
MACRO_VM VM_MEMORY_ATS;
MACRO_VM VM_MEMORY_CARBON;
MACRO_VM VM_MEMORY_COREGRAPHICS;
MACRO_VM VM_MEMORY_DYLD;
MACRO_VM VM_MEMORY_DYLD_MALLOC;
MACRO_VM VM_MEMORY_DYLIB;
MACRO_VM VM_MEMORY_FOUNDATION;
MACRO_VM VM_MEMORY_GUARD;
MACRO_VM VM_MEMORY_IOKIT;
MACRO_VM VM_MEMORY_JAVA;
MACRO_VM VM_MEMORY_MACH_MSG;
MACRO_VM VM_MEMORY_MALLOC;
MACRO_VM VM_MEMORY_MALLOC_HUGE;
MACRO_VM VM_MEMORY_MALLOC_LARGE;
MACRO_VM VM_MEMORY_MALLOC_SMALL;
MACRO_VM VM_MEMORY_SBRK;
MACRO_VM VM_MEMORY_SHARED_PMAP;
MACRO_VM VM_MEMORY_STACK;
MACRO_VM_METER VM_METER;
MACRO_VM_MIN VM_MIN_ADDRESS;
MACRO_VM_MIN VM_MIN_KERNEL_ADDRESS;
MACRO_VM_MAP VM_NAMED_ENTRY_NULL;
MACRO_VM VM_PAGE_QUERY_PAGE_DIRTY;
MACRO_VM VM_PAGE_QUERY_PAGE_FICTITIOUS;
MACRO_VM VM_PAGE_QUERY_PAGE_PRESENT;
MACRO_VM VM_PAGE_QUERY_PAGE_REF;
MACRO_VM_INHERIT VM_PROT_ALL;
MACRO_VM_INHERIT VM_PROT_COPY;
MACRO_VM_PROT VM_PROT_COW;
MACRO_VM_INHERIT VM_PROT_DEFAULT;
MACRO_VM_INHERIT VM_PROT_EXECUTE;
MACRO_VM_INHERIT VM_PROT_NONE;
MACRO_VM_INHERIT VM_PROT_NO_CHANGE;
MACRO_VM_INHERIT VM_PROT_READ;
MACRO_VM_INHERIT VM_PROT_WANTS_COPY;
MACRO_VM_INHERIT VM_PROT_WRITE;
MACRO_VM_PROT VM_PROT_ZF;
MACRO_VM_INHERIT VM_REGION_BASIC_INFO;
MACRO_VM_INHERIT VM_REGION_EXTENDED_INFO;
MACRO_VM_INHERIT VM_REGION_INFO_MAX;
MACRO_VM_REGION VM_REGION_TOP_INFO;
MACRO_VM_INHERIT VM_SYNC_ASYNCHRONOUS;
MACRO_VM_INHERIT VM_SYNC_DEACTIVATE;
MACRO_VM_INHERIT VM_SYNC_INVALIDATE;
MACRO_VM_INHERIT VM_SYNC_KILLPAGES;
MACRO_VM_INHERIT VM_SYNC_SYNCHRONOUS;
MACRO_VNOCACHE VNOCACHE_DATA;
MACRO_VSTANDARD VNOFLUSH;
vtype VNON;
MACRO_VNOVAL VNOVAL;
MACRO_VOLUME VOLUME_DOWN;
MACRO_VOLUME VOLUME_UP;
MACRO_VOL VOL_CAPABILITIES_FORMAT;
MACRO_VOL VOL_CAPABILITIES_INTERFACES;
MACRO_VOL VOL_CAPABILITIES_RESERVED1;
MACRO_VOL VOL_CAPABILITIES_RESERVED2;
MACRO_VOL VOL_CAP_FMT_HARDLINKS;
MACRO_VOL VOL_CAP_FMT_PERSISTENTOBJECTIDS;
MACRO_VOL VOL_CAP_FMT_SYMBOLICLINKS;
MACRO_VOL VOL_CAP_INT_ATTRLIST;
MACRO_VOL VOL_CAP_INT_NFSEXPORT;
MACRO_VOL VOL_CAP_INT_READDIRATTR;
MACRO_VOL VOL_CAP_INT_SEARCHFS;
MACRO_VROOT VORECLAIM;
MACRO_VPRINT VPLOT;
MACRO_VPRINT VPRINT;
MACRO_VPRINT VPRINTPLOT;
MACRO_VQUIT VQUIT;
MACRO_VSTANDARD VRAOFF;
MACRO_VREAD VREAD;
vtype VREG;
MACRO_VREPRINT VREPRINT;
MACRO_VROOT VROOT;
MACRO_VSGID VSGID;
vtype VSOCK;
MACRO_VSTANDARD VSTANDARD;
MACRO_VSTART VSTART;
MACRO_VSTATUS VSTATUS;
MACRO_VSTOP VSTOP;
vtype VSTR;
MACRO_VSUID VSUID;
MACRO_VSUSP VSUSP;
MACRO_VSVTX VSVTX;
MACRO_VSTANDARD VSWAP;
MACRO_VROOT VSYSTEM;
MACRO_VTAB VTAB;
MACRO_CR3 VTDELAY;
MACRO_VROOT VTERMINATE;
MACRO_VROOT VTERMWANT;
MACRO_VROOT VTEXT;
MACRO_VSTANDARD VTHROTTLED;
MACRO_VTIME VTIME;
MACRO_VTRACE VTRACE;
MACRO_VTR VTR_DISABLE;
MACRO_VTR VTR_ENABLE;
MACRO_VTR VTR_STAMP;
MACRO_VTR VTR_UALARM;
MACRO_VTR VTR_VALUE;
vtagtype VT_AFP;
vtagtype VT_AFS;
vtagtype VT_CDDA;
vtagtype VT_CIFS;
vtagtype VT_DEVFS;
vtagtype VT_FDESC;
vtagtype VT_HFS;
vtagtype VT_ISOFS;
vtagtype VT_KERNFS;
vtagtype VT_LFS;
vtagtype VT_LOFS;
vtagtype VT_MFS;
vtagtype VT_MSDOSFS;
vtagtype VT_NFS;
vtagtype VT_NON;
vtagtype VT_NULL;
vtagtype VT_OTHER;
vtagtype VT_PORTAL;
vtagtype VT_PROCFS;
vtagtype VT_UDF;
vtagtype VT_UFS;
vtagtype VT_UMAP;
vtagtype VT_UNION;
vtagtype VT_VOLFS;
vtagtype VT_WEBDAV;
MACRO_VSTANDARD VUINACTIVE;
MACRO_VSTANDARD VUINIT;
MACRO_VSTANDARD VUWANT;
MACRO_VROOT VWASMAPPED;
MACRO_VERASE VWERASE;
MACRO_VWRITE VWRITE;
MACRO_VROOT VXLOCK;
MACRO_VROOT VXWANT;
MACRO_WAIT WAIT_ANY;
MACRO_WAIT WAIT_MYPGRP;
MACRO_WALLPROC WALLPROC_WALL;
MACRO_WALLPROG WALLPROG;
MACRO_WALLVERS WALLVERS;
MACRO_SIZE WCHAR_MAX;
MACRO_WCOREFLAG WCOREFLAG;
MACRO_WILL WILL;
MACRO_WMESGLEN WMESGLEN;
MACRO_WNOHANG WNOHANG;
MACRO_WONT WONT;
MACRO_BIT WORD_BIT;
MACRO_WR0 WR0_ABORT;
MACRO_WR0 WR0_NEXTRXIE;
MACRO_WR0 WR0_REGMASK;
MACRO_WR0 WR0_RESET;
MACRO_WR0 WR0_RESETEOM;
MACRO_WR0 WR0_RESETIUS;
MACRO_WR0 WR0_RESETRXCRC;
MACRO_WR0 WR0_RESETTXCRC;
MACRO_WR0 WR0_RESETTXPEND;
MACRO_WR0 WR0_RESET_STAT;
MACRO_WR10 WR10_ABORTUNDER;
MACRO_WR10 WR10_FM0;
MACRO_WR10 WR10_FM1;
MACRO_WR10 WR10_LOOP;
MACRO_WR10 WR10_MARKIDLE;
MACRO_WR10 WR10_NRZ;
MACRO_WR10 WR10_NRZI;
MACRO_WR10 WR10_POLLACT;
MACRO_WR10 WR10_PRESET1;
MACRO_WR10 WR10_SYNC6;
MACRO_WR11 WR11_BRGEN;
MACRO_WR11 WR11_DPLL;
MACRO_WR11 WR11_RTXCXTAL;
MACRO_WR11 WR11_RXCLKBRGEN;
MACRO_WR11 WR11_RXCLKDPLL;
MACRO_WR11 WR11_RXCLKRTXC;
MACRO_WR11 WR11_RXCLKTRXC;
MACRO_WR11 WR11_TRXCOUTEN;
MACRO_WR11 WR11_TXCLKBRGEN;
MACRO_WR11 WR11_TXCLKDPLL;
MACRO_WR11 WR11_TXCLKRTXC;
MACRO_WR11 WR11_TXCLKTRXC;
MACRO_WR11 WR11_TXCLOCK;
MACRO_WR11 WR11_XTAL;
MACRO_WR14 WR14_AUTOECHO;
MACRO_WR14 WR14_BRENABLE;
MACRO_WR14 WR14_BRPCLK;
MACRO_WR14 WR14_DPLLDISABLE;
MACRO_WR14 WR14_DTRREQ;
MACRO_WR14 WR14_FM;
MACRO_WR14 WR14_LOOPBACK;
MACRO_WR14 WR14_NRZI;
MACRO_WR14 WR14_RESET;
MACRO_WR14 WR14_SEARCH;
MACRO_WR14 WR14_SRCBR;
MACRO_WR14 WR14_SRCRTXC;
MACRO_WR1 WR1_EXTIE;
MACRO_WR1 WR1_PARSPEC;
MACRO_WR1 WR1_REQENABLE;
MACRO_WR1 WR1_REQFUNC;
MACRO_WR1 WR1_REQRX;
MACRO_WR1 WR1_RXALLIE;
MACRO_WR1 WR1_RXFIRSTIE;
MACRO_WR1 WR1_SPECIE;
MACRO_WR1 WR1_TXIE;
MACRO_WR3 WR3_ADDRSRCH;
MACRO_WR3 WR3_AUTOENABLES;
MACRO_WR3 WR3_ENTERHUNT;
MACRO_WR3 WR3_RX5;
MACRO_WR3 WR3_RX6;
MACRO_WR3 WR3_RX7;
MACRO_WR3 WR3_RX8;
MACRO_WR3 WR3_RXCRCENABLE;
MACRO_WR3 WR3_RXENABLE;
MACRO_WR3 WR3_SYNCINHIB;
MACRO_WR4 WR4_EXTSYNC;
MACRO_WR4 WR4_PARENABLE;
MACRO_WR4 WR4_PAREVEN;
MACRO_WR4 WR4_SDLC;
MACRO_WR4 WR4_STOP1;
MACRO_WR4 WR4_STOP15;
MACRO_WR4 WR4_STOP2;
MACRO_WR4 WR4_SYNC16;
MACRO_WR4 WR4_SYNC8;
MACRO_WR4 WR4_X16CLOCK;
MACRO_WR4 WR4_X1CLOCK;
MACRO_WR4 WR4_X32CLOCK;
MACRO_WR4 WR4_X64CLOCK;
MACRO_WR5 WR5_BREAK;
MACRO_WR5 WR5_CRC16;
MACRO_WR5 WR5_DTR;
MACRO_WR5 WR5_RTS;
MACRO_WR5 WR5_TX5;
MACRO_WR5 WR5_TX6;
MACRO_WR5 WR5_TX7;
MACRO_WR5 WR5_TX8;
MACRO_WR5 WR5_TXCRCENABLE;
MACRO_WR5 WR5_TXENABLE;
MACRO_WR9 WR9_DLC;
MACRO_WR9 WR9_MIE;
MACRO_WR9 WR9_NV;
MACRO_WR9 WR9_RESETA;
MACRO_WR9 WR9_RESETB;
MACRO_WR9 WR9_RESETHARD;
MACRO_WR9 WR9_STATHIGH;
MACRO_WR9 WR9_VIS;
MACRO_RRQ WRQ;
MACRO_WSTOPPED WSTOPPED;
MACRO_WNOHANG WUNTRACED;
MACRO_F_OK W_OK;
MACRO_FIL W_TKT_FIL;
xdr_op XDR_DECODE;
xdr_op XDR_ENCODE;
xdr_op XDR_FREE;
xprt_stat XPRT_DIED;
xprt_stat XPRT_IDLE;
xprt_stat XPRT_MOREREQS;
MACRO_XTABS XTABS;
MACRO_F_OK X_OK;
MACRO_YPBINDPROC YPBINDPROC_DOMAIN;
MACRO_YPBINDPROC YPBINDPROC_NULL;
MACRO_YPBINDPROC YPBINDPROC_SETDOM;
MACRO_YPBINDPROG YPBINDPROG;
MACRO_YPBINDVERS YPBINDVERS;
MACRO_YPBIND YPBIND_ERR_ERR;
MACRO_YPBIND YPBIND_ERR_NOSERV;
MACRO_YPBIND YPBIND_ERR_RESC;
ypbind_resptype YPBIND_FAIL_VAL;
ypbind_resptype YPBIND_SUCC_VAL;
MACRO_YPERR YPERR_ACCESS;
MACRO_YPERR YPERR_BADARGS;
MACRO_YPERR YPERR_BADDB;
MACRO_YPERR YPERR_BUSY;
MACRO_YPERR YPERR_DOMAIN;
MACRO_YPERR YPERR_KEY;
MACRO_YPERR YPERR_MAP;
MACRO_YPERR YPERR_NODOM;
MACRO_YPERR YPERR_NOMORE;
MACRO_YPERR YPERR_PMAP;
MACRO_YPERR YPERR_RESRC;
MACRO_YPERR YPERR_RPC;
MACRO_YPERR YPERR_VERS;
MACRO_YPERR YPERR_YPBIND;
MACRO_YPERR YPERR_YPERR;
MACRO_YPERR YPERR_YPSERV;
MACRO_YPMAXDOMAIN YPMAXDOMAIN;
MACRO_YPMAXMAP YPMAXMAP;
MACRO_YPMAXPEER YPMAXPEER;
MACRO_YPMAXRECORD YPMAXRECORD;
MACRO_YPOP YPOP_CHANGE;
MACRO_YPOP YPOP_DELETE;
MACRO_YPOP YPOP_INSERT;
MACRO_YPOP YPOP_STORE;
MACRO_YPPASSWDPROC YPPASSWDPROC_UPDATE;
MACRO_YPPASSWDPROG YPPASSWDPROG;
MACRO_YPPASSWDVERS YPPASSWDVERS;
MACRO_YPPROC YPPROC_ALL;
MACRO_YPPROC YPPROC_CLEAR;
MACRO_YPPROC YPPROC_DOMAIN;
MACRO_YPPROC YPPROC_DOMAIN_NONACK;
MACRO_YPPROC YPPROC_FIRST;
MACRO_YPPROC YPPROC_MAPLIST;
MACRO_YPPROC YPPROC_MASTER;
MACRO_YPPROC YPPROC_MATCH;
MACRO_YPPROC YPPROC_NEXT;
MACRO_YPPROC YPPROC_NULL;
MACRO_YPPROC YPPROC_ORDER;
MACRO_YPPROC YPPROC_XFR;
MACRO_YPPROG YPPROG;
MACRO_YPPUSHPROC YPPUSHPROC_NULL;
MACRO_YPPUSHPROC YPPUSHPROC_XFRRESP;
yppush_status YPPUSH_AGE;
yppush_status YPPUSH_BADARGS;
yppush_status YPPUSH_CLEAR;
yppush_status YPPUSH_DBM;
yppush_status YPPUSH_FILE;
yppush_status YPPUSH_FORCE;
yppush_status YPPUSH_MADDR;
yppush_status YPPUSH_NODOM;
yppush_status YPPUSH_NOMAP;
yppush_status YPPUSH_REFUSED;
yppush_status YPPUSH_RPC;
yppush_status YPPUSH_RSRC;
yppush_status YPPUSH_SKEW;
yppush_status YPPUSH_SUCC;
yppush_status YPPUSH_XFRERR;
MACRO_YPPUSH YPPUSH_XFRRESPPROG;
MACRO_YPPUSH YPPUSH_XFRRESPVERS;
yppush_status YPPUSH_YPERR;
MACRO_YPVERS YPVERS;
ypxfrstat YPXFR_AGE;
ypxfrstat YPXFR_BADARGS;
ypxfrstat YPXFR_CLEAR;
ypxfrstat YPXFR_DBM;
ypxfrstat YPXFR_FILE;
ypxfrstat YPXFR_FORCE;
ypxfrstat YPXFR_MADDR;
ypxfrstat YPXFR_NODOM;
ypxfrstat YPXFR_NOMAP;
ypxfrstat YPXFR_REFUSED;
ypxfrstat YPXFR_RPC;
ypxfrstat YPXFR_RSRC;
ypxfrstat YPXFR_SKEW;
ypxfrstat YPXFR_SUCC;
ypxfrstat YPXFR_XFRERR;
ypxfrstat YPXFR_YPERR;
ypstat YP_BADARGS;
ypstat YP_BADDB;
ypstat YP_BADOP;
ypstat YP_FALSE;
ypstat YP_NODOM;
ypstat YP_NOKEY;
ypstat YP_NOMAP;
ypstat YP_NOMORE;
ypstat YP_TRUE;
ypstat YP_VERS;
ypstat YP_YPERR;
MACRO_ZIPZONEINDEX ZIPZONEINDEX;
MACRO_ZIPZONENAME ZIPZONENAME;
MACRO_ZIPZONENETEND ZIPZONENETEND;
MACRO_ZIPZONENETSTART ZIPZONENETSTART;
MACRO_ZIPZONESTATE ZIPZONESTATE;
MACRO_ZIP ZIP_BRINGUP;
MACRO_ZIP ZIP_DATA_SIZE;
MACRO_ZIP ZIP_EXTENDED_REPLY;
MACRO_ZIP ZIP_GETLOCALZONES;
MACRO_ZIP ZIP_GETMYZONE;
MACRO_ZIP ZIP_GETNETINFO;
MACRO_ZIP ZIP_GETZONELIST;
MACRO_ZIP ZIP_HDR_SIZE;
MACRO_ZIP ZIP_LATE_ROUTER;
MACRO_ZIP ZIP_MAX_ZONE_LENGTH;
MACRO_ZIP ZIP_NETINFO_REPLY;
MACRO_ZIP ZIP_NETINFO_RETRIES;
MACRO_ZIP ZIP_NOTIFY;
MACRO_ZIP ZIP_NO_ROUTER;
MACRO_ZIP ZIP_ONE_ZONE;
MACRO_ZIP ZIP_ONLINE;
MACRO_ZIP ZIP_QUERY;
MACRO_ZIP ZIP_REPLY;
MACRO_ZIP ZIP_RE_AARP;
MACRO_SOCKET ZIP_SOCKET;
MACRO_ZIP ZIP_TAKEDOWN;
MACRO_ZIP ZIP_USE_BROADCAST;
MACRO_ZIP ZIP_X_HDR_SIZE;
MACRO_ZIP ZIP_ZONENAME_INVALID;
MACRO_ZMAGIC ZMAGIC;
MACRO_ZONE ZONE_NAME_MAX_LEN;
MACRO_IF_NAME ZONE_SIZE;
MACRO_ZT_BYTES ZT_BYTES;
MACRO_ZT ZT_DEFAULT;
MACRO_ZT ZT_MAX;
MACRO_ZT_BYTES ZT_MAXEDOUT;
MACRO_ZT ZT_MIN;
MACRO__A _A;
MACRO__A _B;
char *BC;
MACRO__BSD _BSD_PPC_VMPARAM_H_;
int __fastcall BZ2_bzBuffToBuffCompress(char *dest, unsigned int *destLen, char *source, unsigned int sourceLen, int blockSize100k, int verbosity, int workFactor);
int __fastcall BZ2_bzBuffToBuffDecompress(char *dest, unsigned int *destLen, char *source, unsigned int sourceLen, int small, int verbosity);
int __fastcall BZ2_bzCompress(bz_stream *strm, int action);
int __fastcall BZ2_bzCompressEnd(bz_stream *strm);
int __fastcall BZ2_bzCompressInit(bz_stream *strm, int blockSize100k, int verbosity, int workFactor);
int __fastcall BZ2_bzDecompress(bz_stream *strm);
int __fastcall BZ2_bzDecompressEnd(bz_stream *strm);
int __fastcall BZ2_bzDecompressInit(bz_stream *strm, int verbosity, int small);
int __fastcall BZ2_bzRead(int *bzerror, BZFILE *b, void *buf, int len);
void __fastcall BZ2_bzReadClose(int *bzerror, BZFILE *b);
void __fastcall BZ2_bzReadGetUnused(int *bzerror, BZFILE *b, void **unused, int *nUnused);
BZFILE *__fastcall BZ2_bzReadOpen(int *bzerror, FILE *f, int verbosity, int small, void *unused, int nUnused);
void __fastcall BZ2_bzWrite(int *bzerror, BZFILE *b, void *buf, int len);
void __fastcall BZ2_bzWriteClose(int *bzerror, BZFILE *b, int abandon, unsigned int *nbytes_in, unsigned int *nbytes_out);
void __fastcall BZ2_bzWriteClose64(int *bzerror, BZFILE *b, int abandon, unsigned int *nbytes_in_lo32, unsigned int *nbytes_in_hi32, unsigned int *nbytes_out_lo32, unsigned int *nbytes_out_hi32);
BZFILE *__fastcall BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k, int verbosity, int workFactor);
void __fastcall BZ2_bzclose(BZFILE *b);
BZFILE *__fastcall BZ2_bzdopen(int fd, const char *mode);
const char *__fastcall BZ2_bzerror(BZFILE *b, int *errnum);
int __fastcall BZ2_bzflush(BZFILE *b);
const char *BZ2_bzlibVersion(void);
BZFILE *__fastcall BZ2_bzopen(const char *path, const char *mode);
int __fastcall BZ2_bzread(BZFILE *b, void *buf, int len);
int __fastcall BZ2_bzwrite(BZFILE *b, void *buf, int len);
MACRO__A _C;
MACRO__CACHED _CACHED_RUNES;
int COLORS;
int __fastcall COLOR_PAIR(int);
int COLOR_PAIRS;
int COLS;
MACRO__CRMASK _CRMASK;
MACRO__CS _CS_PATH;
MACRO__CTYPE _CTYPE_A;
MACRO__CTYPE _CTYPE_B;
MACRO__CTYPE _CTYPE_C;
MACRO__CTYPE _CTYPE_D;
MACRO__CTYPE _CTYPE_G;
MACRO__CTYPE _CTYPE_I;
MACRO__CTYPE _CTYPE_L;
MACRO__CTYPE _CTYPE_P;
MACRO__CTYPE _CTYPE_Q;
MACRO__CTYPE _CTYPE_R;
MACRO__CTYPE _CTYPE_S;
MACRO__CTYPE _CTYPE_T;
MACRO__CTYPE _CTYPE_U;
MACRO__CTYPE _CTYPE_X;
BOOL __fastcall ConfigDSN(HWND hwndParent, WORD fRequest, LPCSTR lpszDriver, LPCSTR lpszAttributes);
BOOL __fastcall ConfigDriver(HWND hwndParent, WORD fRequest, LPCSTR lpszDriver, LPCSTR lpszArgs, LPSTR lpszMsg, WORD cbMsgMax, WORD *pcbMsgOut);
BOOL __fastcall ConfigTranslator(HWND hwndParent, DWORD *pvOption);
MACRO__A _D;
void __fastcall DEVFS_DECR_ENTRIES();
void __fastcall DEVFS_DECR_MOUNTS();
void __fastcall DEVFS_DECR_NODES();
void __fastcall DEVFS_DECR_STRINGSPACE(int space);
void __fastcall DEVFS_INCR_ENTRIES();
void __fastcall DEVFS_INCR_MOUNTS();
void __fastcall DEVFS_INCR_NODES();
void __fastcall DEVFS_INCR_STRINGSPACE(int space);
int __fastcall DEVFS_LOCK(struct proc *p);
int __fastcall DEVFS_UNLOCK(struct proc *p);
dns_service_discovery_ref __fastcall DNSServiceBrowserCreate(const char *regtype, const char *domain, DNSServiceBrowserReply callBack, void *context);
void __fastcall DNSServiceDiscoveryDeallocate(dns_service_discovery_ref dnsServiceDiscovery);
mach_port_t __fastcall DNSServiceDiscoveryMachPort(dns_service_discovery_ref dnsServiceDiscovery);
void __fastcall DNSServiceDiscovery_handleReply(void *replyMsg);
dns_service_discovery_ref __fastcall DNSServiceDomainEnumerationCreate(int registrationDomains, DNSServiceDomainEnumerationReply callBack, void *context);
DNSRecordReference __fastcall DNSServiceRegistrationAddRecord(dns_service_discovery_ref dnsServiceDiscovery, uint16_t rrtype, uint16_t rdlen, const char *rdata, uint32_t ttl);
dns_service_discovery_ref __fastcall DNSServiceRegistrationCreate(const char *name, const char *regtype, const char *domain, uint16_t port, const char *txtRecord, DNSServiceRegistrationReply callBack, void *context);
DNSServiceRegistrationReplyErrorType __fastcall DNSServiceRegistrationRemoveRecord(dns_service_discovery_ref ref, DNSRecordReference reference);
DNSServiceRegistrationReplyErrorType __fastcall DNSServiceRegistrationUpdateRecord(dns_service_discovery_ref ref, DNSRecordReference reference, uint16_t rdlen, const char *rdata, uint32_t ttl);
dns_service_discovery_ref __fastcall DNSServiceResolverResolve(const char *name, const char *regtype, const char *domain, DNSServiceResolverReply callBack, void *context);
MACRO_OK _ENDLINE;
int ESCDELAY;
MACRO_OK _FULLWIN;
MACRO__A _G;
gss_OID GSS_C_NT_ANONYMOUS;
gss_OID GSS_C_NT_EXPORT_NAME;
gss_OID GSS_C_NT_HOSTBASED_SERVICE;
gss_OID GSS_C_NT_HOSTBASED_SERVICE_X;
gss_OID GSS_C_NT_MACHINE_UID_NAME;
gss_OID GSS_C_NT_STRING_UID_NAME;
gss_OID GSS_C_NT_USER_NAME;
const gss_OID_desc *const GSS_KRB5_NT_PRINCIPAL_NAME;
MACRO_OK _HASMOVED;
MACRO__A _I;
MACRO__IOFBF IOFBF;
MACRO__IOFBF _IOLBF;
MACRO__IOFBF _IONBF;
MACRO_OK _ISPAD;
MACRO__JBLEN _JBLEN;
security_token_t KERNEL_SECURITY_TOKEN;
MACRO__A _L;
MACRO__LC _LC_LAST;
MACRO__LDAP _LDAP_FEATURES_H;
MACRO__LDAP_SCHEMA _LDAP_SCHEMA_H;
int LINES;
MACRO__MACH _MACH_ERROR_;
MACRO__MACH_INIT _MACH_INIT_;
char *__fastcall MD5Data(const unsigned __int8 *, unsigned int, char *);
char *__fastcall MD5End(MD5_CTX *, char *);
char *__fastcall MD5File(const char *, char *);
void __fastcall MD5Final(unsigned __int8[16], MD5_CTX *);
void __fastcall MD5Init(MD5_CTX *);
void __fastcall MD5Pad(MD5_CTX *);
void __fastcall MD5Update(MD5_CTX *, const unsigned __int8 *, unsigned int);
NDR_record_t NDR_record;
MACRO__NET _NET_IF_MIB_H;
MACRO__NEWINDEX _NEWINDEX;
MACRO__NI _NI_BIND;
MACRO__NI _NI_CHILDREN;
MACRO__NI _NI_CRASHED;
MACRO__NI _NI_CREATE;
MACRO__NI _NI_CREATENAME;
MACRO__NI _NI_CREATEPROP;
MACRO__NI _NI_DESTROY;
MACRO__NI _NI_DESTROYNAME;
MACRO__NI _NI_DESTROYPROP;
MACRO__NI _NI_LIST;
MACRO__NI _NI_LISTALL;
MACRO__NI _NI_LISTPROPS;
MACRO__NI _NI_LOOKUP;
MACRO__NI _NI_LOOKUPREAD;
MACRO__NI _NI_PARENT;
MACRO__NI NI_PING;
MACRO__NI _NI_READ;
MACRO__NI _NI_READALL;
MACRO__NI _NI_READNAME;
MACRO__NI _NI_READPROP;
MACRO__NI _NI_RENAMEPROP;
MACRO__NI _NI_RESYNC;
MACRO__NI _NI_ROOT;
MACRO__NI _NI_RPARENT;
MACRO__NI _NI_SELF;
MACRO__NI _NI_STATISTICS;
MACRO__NI _NI_WRITE;
MACRO__NI _NI_WRITENAME;
MACRO__NI _NI_WRITEPROP;
MACRO__NOCHANGE _NOCHANGE;
NSSearchPathEnumerationState __fastcall NSGetNextSearchPathEnumeration(NSSearchPathEnumerationState state, char *path);
NSSearchPathEnumerationState __fastcall NSStartSearchPathEnumeration(NSSearchPathDirectory dir, NSSearchPathDomainMask domainMask);
UInt32 OSHostByteOrder(void);
UInt __fastcall OSReadBigInt(volatile void *base, UInt offset);
UInt16 __fastcall OSReadBigInt16(volatile void *base, UInt offset);
UInt32 __fastcall OSReadBigInt32(volatile void *base, UInt offset);
UInt64 __fastcall OSReadBigInt64(volatile void *base, UInt offset);
UInt __fastcall OSReadLittleInt(volatile void *base, UInt offset);
UInt16 __fastcall OSReadLittleInt16(volatile void *base, UInt offset);
UInt32 __fastcall OSReadLittleInt32(volatile void *base, UInt offset);
UInt64 __fastcall OSReadLittleInt64(volatile void *base, UInt offset);
UInt __fastcall OSReadSwapInt(volatile void *base, UInt offset);
UInt16 __fastcall OSReadSwapInt16(volatile void *base, UInt offset);
UInt32 __fastcall OSReadSwapInt32(volatile void *base, UInt offset);
UInt64 __fastcall OSReadSwapInt64(volatile void *base, UInt offset);
UInt __fastcall OSSwapBigToHostInt(UInt data);
UInt16 __fastcall OSSwapBigToHostInt16(UInt16 data);
UInt32 __fastcall OSSwapBigToHostInt32(UInt32 data);
UInt64 __fastcall OSSwapBigToHostInt64(UInt64 data);
UInt __fastcall OSSwapHostToBigInt(UInt data);
UInt16 __fastcall OSSwapHostToBigInt16(UInt16 data);
UInt32 __fastcall OSSwapHostToBigInt32(UInt32 data);
UInt64 __fastcall OSSwapHostToBigInt64(UInt64 data);
UInt __fastcall OSSwapHostToLittleInt(UInt data);
UInt16 __fastcall OSSwapHostToLittleInt16(UInt16 data);
UInt32 __fastcall OSSwapHostToLittleInt32(UInt32 data);
UInt64 __fastcall OSSwapHostToLittleInt64(UInt64 data);
UInt __fastcall OSSwapInt(UInt data);
UInt16 __fastcall OSSwapInt16(UInt16 data);
UInt32 __fastcall OSSwapInt32(UInt32 data);
UInt64 __fastcall OSSwapInt64(UInt64 data);
UInt __fastcall OSSwapLittleToHostInt(UInt data);
UInt16 __fastcall OSSwapLittleToHostInt16(UInt16 data);
UInt32 __fastcall OSSwapLittleToHostInt32(UInt32 data);
UInt64 __fastcall OSSwapLittleToHostInt64(UInt64 data);
void __fastcall OSWriteBigInt(volatile void *base, UInt offset, UInt data);
void __fastcall OSWriteBigInt16(volatile void *base, UInt offset, UInt16 data);
void __fastcall OSWriteBigInt32(volatile void *base, UInt offset, UInt32 data);
void __fastcall OSWriteBigInt64(volatile void *base, UInt offset, UInt64 data);
void __fastcall OSWriteLittleInt(volatile void *base, UInt offset, UInt data);
void __fastcall OSWriteLittleInt16(volatile void *base, UInt offset, UInt16 data);
void __fastcall OSWriteLittleInt32(volatile void *base, UInt offset, UInt32 data);
void __fastcall OSWriteLittleInt64(volatile void *base, UInt offset, UInt64 data);
void __fastcall OSWriteSwapInt(volatile void *base, UInt offset, UInt data);
void __fastcall OSWriteSwapInt16(volatile void *base, UInt offset, UInt16 data);
void __fastcall OSWriteSwapInt32(volatile void *base, UInt offset, UInt32 data);
void __fastcall OSWriteSwapInt64(volatile void *base, UInt offset, UInt64 data);
MACRO__A _P;
int __fastcall PAIR_NUMBER(int);
MACRO__PAM _PAM_RETURN_VALUES;
MACRO__PASSWORD _PASSWORD_CHGNOW;
MACRO__PASSWORD _PASSWORD_EFMT1;
MACRO__PASSWORD _PASSWORD_LEN;
MACRO__PASSWORD _PASSWORD_NOCHG;
MACRO__PASSWORD _PASSWORD_NOEXP;
MACRO__PASSWORD _PASSWORD_NOGID;
MACRO__PASSWORD _PASSWORD_NOUID;
MACRO__PASSWORD _PASSWORD_WARNDAYS;
char PC;
MACRO__PC _PC_CASE_PRESERVING;
MACRO__PC _PC_CASE_SENSITIVE;
MACRO__PC _PC_CHOWN_RESTRICTED;
MACRO__PC _PC_LINK_MAX;
MACRO__PC _PC_MAX_CANON;
MACRO__PC _PC_MAX_INPUT;
MACRO__PC _PC_NAME_CHARS_MAX;
MACRO__PC _PC_NAME_MAX;
MACRO__PC _PC_NO_TRUNC;
MACRO__PC _PC_PATH_MAX;
MACRO__PC _PC_PIPE_BUF;
MACRO__PC _PC_VDISABLE;
MACRO__POSIX2 _POSIX2_BC_BASE_MAX;
MACRO__POSIX2 _POSIX2_BC_DIM_MAX;
MACRO__POSIX2 _POSIX2_BC_SCALE_MAX;
MACRO__POSIX2 _POSIX2_BC_STRING_MAX;
MACRO__POSIX2 _POSIX2_COLL_WEIGHTS_MAX;
MACRO__POSIX2 _POSIX2_EQUIV_CLASS_MAX;
MACRO__POSIX2 _POSIX2_EXPR_NEST_MAX;
MACRO__POSIX2 _POSIX2_LINE_MAX;
MACRO__POSIX2 _POSIX2_RE_DUP_MAX;
MACRO_VERSION _POSIX2_VERSION;
MACRO_COLL _POSIX_ARG_MAX;
MACRO_COLL _POSIX_CHILD_MAX;
MACRO__POSIX_CHOWN _POSIX_CHOWN_RESTRICTED;
MACRO_COLL _POSIX_LINK_MAX;
MACRO__POSIX _POSIX_MAX_CANON;
MACRO__POSIX _POSIX_MAX_INPUT;
MACRO__POSIX _POSIX_NAME_MAX;
MACRO__POSIX POSIX_NGROUPS_MAX;
MACRO__POSIX_CHOWN _POSIX_NO_TRUNC;
MACRO__POSIX _POSIX_OPEN_MAX;
MACRO__POSIX _POSIX_PATH_MAX;
MACRO__POSIX _POSIX_PIPE_BUF;
MACRO__POSIX _POSIX_SSIZE_MAX;
MACRO__POSIX _POSIX_STREAM_MAX;
MACRO__POSIX_CHOWN _POSIX_THREAD_KEYS_MAX;
MACRO__POSIX _POSIX_TZNAME_MAX;
MACRO__POSIX_CHOWN _POSIX_VDISABLE;
MACRO_VERSION _POSIX_VERSION;
MACRO__PPC _PPC_SIGNAL_;
MACRO__PTHREAD _PTHREAD_COND_SIG_init;
MACRO__PTHREAD _PTHREAD_MUTEX_SIG_init;
MACRO__PTHREAD _PTHREAD_ONCE_SIG_init;
MACRO__PW _PW_KEYBYNAME;
MACRO__PW _PW_KEYBYNUM;
MACRO__PW _PW_KEYBYUID;
MACRO__A _Q;
MACRO__QUAD QUAD_HIGHWORD;
MACRO__QUAD _QUAD_LOWWORD;
MACRO__A _R;
MACRO__A _S;
MACRO_OK _SCROLLWIN;
MACRO__SC _SC_2_CHAR_TERM;
MACRO__SC _SC_2_C_BIND;
MACRO__SC _SC_2_C_DEV;
MACRO__SC _SC_2_FORT_DEV;
MACRO__SC _SC_2_FORT_RUN;
MACRO__SC _SC_2_LOCALEDEF;
MACRO__SC _SC_2_SW_DEV;
MACRO__SC _SC_2_UPE;
MACRO__SC _SC_2_VERSION;
MACRO__SC _SC_ARG_MAX;
MACRO__SC _SC_BC_BASE_MAX;
MACRO__SC _SC_BC_DIM_MAX;
MACRO__SC _SC_BC_SCALE_MAX;
MACRO__SC _SC_BC_STRING_MAX;
MACRO__SC _SC_CHILD_MAX;
MACRO__SC _SC_CLK_TCK;
MACRO__SC _SC_COLL_WEIGHTS_MAX;
MACRO__SC _SC_EXPR_NEST_MAX;
MACRO__SC _SC_JOB_CONTROL;
MACRO__SC _SC_LINE_MAX;
MACRO__SC _SC_NGROUPS_MAX;
MACRO__SC _SC_OPEN_MAX;
MACRO__SC _SC_RE_DUP_MAX;
MACRO__SC _SC_SAVED_IDS;
MACRO__SC _SC_STREAM_MAX;
MACRO__SC _SC_TZNAME_MAX;
MACRO__SC _SC_VERSION;
SQLRETURN __fastcall SQLAllocConnect(SQLHENV EnvironmentHandle, SQLHDBC *ConnectionHandle);
SQLRETURN __fastcall SQLAllocEnv(SQLHENV *EnvironmentHandle);
SQLRETURN __fastcall SQLAllocHandle(SQLSMALLINT HandleType, SQLHANDLE InputHandle, SQLHANDLE *OutputHandle);
SQLRETURN __fastcall SQLAllocHandleStd(SQLSMALLINT fHandleType, SQLHANDLE hInput, SQLHANDLE *phOutput);
SQLRETURN __fastcall SQLAllocStmt(SQLHDBC ConnectionHandle, SQLHSTMT *StatementHandle);
SQLRETURN __fastcall SQLBindCol(SQLHSTMT StatementHandle, SQLUSMALLINT ColumnNumber, SQLSMALLINT TargetType, SQLPOINTER TargetValue, SQLINTEGER BufferLength, SQLINTEGER *StrLen_or_Ind);
SQLRETURN __fastcall SQLBindParam(SQLHSTMT StatementHandle, SQLUSMALLINT ParameterNumber, SQLSMALLINT ValueType, SQLSMALLINT ParameterType, SQLUINTEGER LengthPrecision, SQLSMALLINT ParameterScale, SQLPOINTER ParameterValue, SQLINTEGER *StrLen_or_Ind);
SQLRETURN __fastcall SQLBindParameter(SQLHSTMT hstmt, SQLUSMALLINT ipar, SQLSMALLINT fParamType, SQLSMALLINT fCType, SQLSMALLINT fSqlType, SQLUINTEGER cbColDef, SQLSMALLINT ibScale, SQLPOINTER rgbValue, SQLINTEGER cbValueMax, SQLINTEGER *pcbValue);
SQLRETURN __fastcall SQLBrowseConnect(SQLHDBC hdbc, SQLCHAR *szConnStrIn, SQLSMALLINT cbConnStrIn, SQLCHAR *szConnStrOut, SQLSMALLINT cbConnStrOutMax, SQLSMALLINT *pcbConnStrOut);
SQLRETURN __fastcall SQLBulkOperations(SQLHSTMT StatementHandle, SQLSMALLINT Operation);
SQLRETURN __fastcall SQLCancel(SQLHSTMT StatementHandle);
SQLRETURN __fastcall SQLCloseCursor(SQLHSTMT StatementHandle);
SQLRETURN __fastcall SQLColAttribute(SQLHSTMT StatementHandle, SQLUSMALLINT ColumnNumber, SQLUSMALLINT FieldIdentifier, SQLPOINTER CharacterAttribute, SQLSMALLINT BufferLength, SQLSMALLINT *StringLength, SQLPOINTER NumericAttribute);
SQLRETURN __fastcall SQLColAttributes(SQLHSTMT hstmt, SQLUSMALLINT icol, SQLUSMALLINT fDescType, SQLPOINTER rgbDesc, SQLSMALLINT cbDescMax, SQLSMALLINT *pcbDesc, SQLINTEGER *pfDesc);
SQLRETURN __fastcall SQLColumnPrivileges(SQLHSTMT hstmt, SQLCHAR *szCatalogName, SQLSMALLINT cbCatalogName, SQLCHAR *szSchemaName, SQLSMALLINT cbSchemaName, SQLCHAR *szTableName, SQLSMALLINT cbTableName, SQLCHAR *szColumnName, SQLSMALLINT cbColumnName);
SQLRETURN __fastcall SQLColumns(SQLHSTMT StatementHandle, SQLCHAR *CatalogName, SQLSMALLINT NameLength1, SQLCHAR *SchemaName, SQLSMALLINT NameLength2, SQLCHAR *TableName, SQLSMALLINT NameLength3, SQLCHAR *ColumnName, SQLSMALLINT NameLength4);
BOOL __fastcall SQLConfigDataSource(HWND hwndParent, WORD fRequest, LPCSTR lpszDriver, LPCSTR lpszAttributes);
BOOL __fastcall SQLConfigDriver(HWND hwndParent, WORD fRequest, LPCSTR lpszDriver, LPCSTR lpszArgs, LPSTR lpszMsg, WORD cbMsgMax, WORD *pcbMsgOut);
SQLRETURN __fastcall SQLConnect(SQLHDBC ConnectionHandle, SQLCHAR *ServerName, SQLSMALLINT NameLength1, SQLCHAR *UserName, SQLSMALLINT NameLength2, SQLCHAR *Authentication, SQLSMALLINT NameLength3);
SQLRETURN __fastcall SQLCopyDesc(SQLHDESC SourceDescHandle, SQLHDESC TargetDescHandle);
BOOL __fastcall SQLCreateDataSource(HWND hwndParent, LPCSTR lpszDSN);
SQLRETURN __fastcall SQLDataSources(SQLHENV EnvironmentHandle, SQLUSMALLINT Direction, SQLCHAR *ServerName, SQLSMALLINT BufferLength1, SQLSMALLINT *NameLength1, SQLCHAR *Description, SQLSMALLINT BufferLength2, SQLSMALLINT *NameLength2);
SQLRETURN __fastcall SQLDescribeCol(SQLHSTMT StatementHandle, SQLUSMALLINT ColumnNumber, SQLCHAR *ColumnName, SQLSMALLINT BufferLength, SQLSMALLINT *NameLength, SQLSMALLINT *DataType, SQLUINTEGER *ColumnSize, SQLSMALLINT *DecimalDigits, SQLSMALLINT *Nullable);
SQLRETURN __fastcall SQLDescribeParam(SQLHSTMT hstmt, SQLUSMALLINT ipar, SQLSMALLINT *pfSqlType, SQLUINTEGER *pcbParamDef, SQLSMALLINT *pibScale, SQLSMALLINT *pfNullable);
SQLRETURN __fastcall SQLDisconnect(SQLHDBC ConnectionHandle);
SQLRETURN __fastcall SQLDriverConnect(SQLHDBC hdbc, SQLHWND hwnd, SQLCHAR *szConnStrIn, SQLSMALLINT cbConnStrIn, SQLCHAR *szConnStrOut, SQLSMALLINT cbConnStrOutMax, SQLSMALLINT *pcbConnStrOut, SQLUSMALLINT fDriverCompletion);
SQLRETURN __fastcall SQLDrivers(SQLHENV henv, SQLUSMALLINT fDirection, SQLCHAR *szDriverDesc, SQLSMALLINT cbDriverDescMax, SQLSMALLINT *pcbDriverDesc, SQLCHAR *szDriverAttributes, SQLSMALLINT cbDrvrAttrMax, SQLSMALLINT *pcbDrvrAttr);
SQLRETURN __fastcall SQLEndTran(SQLSMALLINT HandleType, SQLHANDLE Handle, SQLSMALLINT CompletionType);
SQLRETURN __fastcall SQLError(SQLHENV EnvironmentHandle, SQLHDBC ConnectionHandle, SQLHSTMT StatementHandle, SQLCHAR *Sqlstate, SQLINTEGER *NativeError, SQLCHAR *MessageText, SQLSMALLINT BufferLength, SQLSMALLINT *TextLength);
SQLRETURN __fastcall SQLExecDirect(SQLHSTMT StatementHandle, SQLCHAR *StatementText, SQLINTEGER TextLength);
SQLRETURN __fastcall SQLExecute(SQLHSTMT StatementHandle);
SQLRETURN __fastcall SQLExtendedFetch(SQLHSTMT hstmt, SQLUSMALLINT fFetchType, SQLINTEGER irow, SQLUINTEGER *pcrow, SQLUSMALLINT *rgfRowStatus);
SQLRETURN __fastcall SQLFetch(SQLHSTMT StatementHandle);
SQLRETURN __fastcall SQLFetchScroll(SQLHSTMT StatementHandle, SQLSMALLINT FetchOrientation, SQLINTEGER FetchOffset);
SQLRETURN __fastcall SQLForeignKeys(SQLHSTMT hstmt, SQLCHAR *szPkCatalogName, SQLSMALLINT cbPkCatalogName, SQLCHAR *szPkSchemaName, SQLSMALLINT cbPkSchemaName, SQLCHAR *szPkTableName, SQLSMALLINT cbPkTableName, SQLCHAR *szFkCatalogName, SQLSMALLINT cbFkCatalogName, SQLCHAR *szFkSchemaName, SQLSMALLINT cbFkSchemaName, SQLCHAR *szFkTableName, SQLSMALLINT cbFkTableName);
SQLRETURN __fastcall SQLFreeConnect(SQLHDBC ConnectionHandle);
SQLRETURN __fastcall SQLFreeEnv(SQLHENV EnvironmentHandle);
SQLRETURN __fastcall SQLFreeHandle(SQLSMALLINT HandleType, SQLHANDLE Handle);
SQLRETURN __fastcall SQLFreeStmt(SQLHSTMT StatementHandle, SQLUSMALLINT Option);
BOOL __fastcall SQLGetAvailableDrivers(LPCSTR lpszInfFile, LPSTR lpszBuf, WORD cbBufMax, WORD *pcbBufOut);
BOOL __fastcall SQLGetConfigMode(UWORD *pwConfigMode);
SQLRETURN __fastcall SQLGetConnectAttr(SQLHDBC ConnectionHandle, SQLINTEGER Attribute, SQLPOINTER Value, SQLINTEGER BufferLength, SQLINTEGER *StringLength);
SQLRETURN __fastcall SQLGetConnectOption(SQLHDBC ConnectionHandle, SQLUSMALLINT Option, SQLPOINTER Value);
SQLRETURN __fastcall SQLGetCursorName(SQLHSTMT StatementHandle, SQLCHAR *CursorName, SQLSMALLINT BufferLength, SQLSMALLINT *NameLength);
SQLRETURN __fastcall SQLGetData(SQLHSTMT StatementHandle, SQLUSMALLINT ColumnNumber, SQLSMALLINT TargetType, SQLPOINTER TargetValue, SQLINTEGER BufferLength, SQLINTEGER *StrLen_or_Ind);
SQLRETURN __fastcall SQLGetDescField(SQLHDESC DescriptorHandle, SQLSMALLINT RecNumber, SQLSMALLINT FieldIdentifier, SQLPOINTER Value, SQLINTEGER BufferLength, SQLINTEGER *StringLength);
SQLRETURN __fastcall SQLGetDescRec(SQLHDESC DescriptorHandle, SQLSMALLINT RecNumber, SQLCHAR *Name, SQLSMALLINT BufferLength, SQLSMALLINT *StringLength, SQLSMALLINT *Type, SQLSMALLINT *SubType, SQLINTEGER *Length, SQLSMALLINT *Precision, SQLSMALLINT *Scale, SQLSMALLINT *Nullable);
SQLRETURN __fastcall SQLGetDiagField(SQLSMALLINT HandleType, SQLHANDLE Handle, SQLSMALLINT RecNumber, SQLSMALLINT DiagIdentifier, SQLPOINTER DiagInfo, SQLSMALLINT BufferLength, SQLSMALLINT *StringLength);
SQLRETURN __fastcall SQLGetDiagRec(SQLSMALLINT HandleType, SQLHANDLE Handle, SQLSMALLINT RecNumber, SQLCHAR *Sqlstate, SQLINTEGER *NativeError, SQLCHAR *MessageText, SQLSMALLINT BufferLength, SQLSMALLINT *TextLength);
SQLRETURN __fastcall SQLGetEnvAttr(SQLHENV EnvironmentHandle, SQLINTEGER Attribute, SQLPOINTER Value, SQLINTEGER BufferLength, SQLINTEGER *StringLength);
SQLRETURN __fastcall SQLGetFunctions(SQLHDBC ConnectionHandle, SQLUSMALLINT FunctionId, SQLUSMALLINT *Supported);
SQLRETURN __fastcall SQLGetInfo(SQLHDBC ConnectionHandle, SQLUSMALLINT InfoType, SQLPOINTER InfoValue, SQLSMALLINT BufferLength, SQLSMALLINT *StringLength);
BOOL __fastcall SQLGetInstalledDrivers(LPSTR lpszBuf, WORD cbBufMax, WORD *pcbBufOut);
int __fastcall SQLGetPrivateProfileString(LPCSTR lpszSection, LPCSTR lpszEntry, LPCSTR lpszDefault, LPSTR lpszRetBuffer, int cbRetBuffer, LPCSTR lpszFilename);
SQLRETURN __fastcall SQLGetStmtAttr(SQLHSTMT StatementHandle, SQLINTEGER Attribute, SQLPOINTER Value, SQLINTEGER BufferLength, SQLINTEGER *StringLength);
SQLRETURN __fastcall SQLGetStmtOption(SQLHSTMT StatementHandle, SQLUSMALLINT Option, SQLPOINTER Value);
BOOL __fastcall SQLGetTranslator(HWND hwnd, LPSTR lpszName, WORD cbNameMax, WORD *pcbNameOut, LPSTR lpszPath, WORD cbPathMax, WORD *pcbPathOut, DWORD *pvOption);
SQLRETURN __fastcall SQLGetTypeInfo(SQLHSTMT StatementHandle, SQLSMALLINT DataType);
BOOL __fastcall SQLInstallDriver(LPCSTR lpszInfFile, LPCSTR lpszDriver, LPSTR lpszPath, WORD cbPathMax, WORD *pcbPathOut);
BOOL __fastcall SQLInstallDriverEx(LPCSTR lpszDriver, LPCSTR lpszPathIn, LPSTR lpszPathOut, WORD cbPathOutMax, WORD *pcbPathOut, WORD fRequest, LPDWORD lpdwUsageCount);
BOOL __fastcall SQLInstallDriverManager(LPSTR lpszPath, WORD cbPathMax, WORD *pcbPathOut);
BOOL __fastcall SQLInstallODBC(HWND hwndParent, LPCSTR lpszInfFile, LPCSTR lpszSrcPath, LPCSTR lpszDrivers);
BOOL __fastcall SQLInstallTranslator(LPCSTR lpszInfFile, LPCSTR lpszTranslator, LPCSTR lpszPathIn, LPSTR lpszPathOut, WORD cbPathOutMax, WORD *pcbPathOut, WORD fRequest, LPDWORD lpdwUsageCount);
BOOL __fastcall SQLInstallTranslatorEx(LPCSTR lpszTranslator, LPCSTR lpszPathIn, LPSTR lpszPathOut, WORD cbPathOutMax, WORD *pcbPathOut, WORD fRequest, LPDWORD lpdwUsageCount);
RETCODE __fastcall SQLInstallerError(WORD iError, DWORD *pfErrorCode, LPSTR lpszErrorMsg, WORD cbErrorMsgMax, WORD *pcbErrorMsg);
BOOL __fastcall SQLManageDataSources(HWND hwndParent);
SQLRETURN __fastcall SQLMoreResults(SQLHSTMT hstmt);
SQLRETURN __fastcall SQLNativeSql(SQLHDBC hdbc, SQLCHAR *szSqlStrIn, SQLINTEGER cbSqlStrIn, SQLCHAR *szSqlStr, SQLINTEGER cbSqlStrMax, SQLINTEGER *pcbSqlStr);
SQLRETURN __fastcall SQLNumParams(SQLHSTMT hstmt, SQLSMALLINT *pcpar);
SQLRETURN __fastcall SQLNumResultCols(SQLHSTMT StatementHandle, SQLSMALLINT *ColumnCount);
SQLRETURN __fastcall SQLParamData(SQLHSTMT StatementHandle, SQLPOINTER *Value);
SQLRETURN __fastcall SQLParamOptions(SQLHSTMT hstmt, SQLUINTEGER crow, SQLUINTEGER *pirow);
RETCODE __fastcall SQLPostInstallerError(DWORD fErrorCode, LPSTR szErrorMsg);
SQLRETURN __fastcall SQLPrepare(SQLHSTMT StatementHandle, SQLCHAR *StatementText, SQLINTEGER TextLength);
SQLRETURN __fastcall SQLPrimaryKeys(SQLHSTMT hstmt, SQLCHAR *szCatalogName, SQLSMALLINT cbCatalogName, SQLCHAR *szSchemaName, SQLSMALLINT cbSchemaName, SQLCHAR *szTableName, SQLSMALLINT cbTableName);
SQLRETURN __fastcall SQLProcedureColumns(SQLHSTMT hstmt, SQLCHAR *szCatalogName, SQLSMALLINT cbCatalogName, SQLCHAR *szSchemaName, SQLSMALLINT cbSchemaName, SQLCHAR *szProcName, SQLSMALLINT cbProcName, SQLCHAR *szColumnName, SQLSMALLINT cbColumnName);
SQLRETURN __fastcall SQLProcedures(SQLHSTMT hstmt, SQLCHAR *szCatalogName, SQLSMALLINT cbCatalogName, SQLCHAR *szSchemaName, SQLSMALLINT cbSchemaName, SQLCHAR *szProcName, SQLSMALLINT cbProcName);
SQLRETURN __fastcall SQLPutData(SQLHSTMT StatementHandle, SQLPOINTER Data, SQLINTEGER StrLen_or_Ind);
BOOL __fastcall SQLReadFileDSN(LPCSTR lpszFileName, LPCSTR lpszAppName, LPCSTR lpszKeyName, LPSTR lpszString, WORD cbString, WORD *pcbString);
BOOL __fastcall SQLRemoveDSNFromIni(LPCSTR lpszDSN);
BOOL SQLRemoveDefaultDataSource(void);
BOOL __fastcall SQLRemoveDriver(LPCSTR lpszDriver, BOOL fRemoveDSN, LPDWORD lpdwUsageCount);
BOOL __fastcall SQLRemoveDriverManager(LPDWORD lpdwUsageCount);
BOOL __fastcall SQLRemoveTranslator(LPCSTR lpszTranslator, LPDWORD lpdwUsageCount);
SQLRETURN __fastcall SQLRowCount(SQLHSTMT StatementHandle, SQLINTEGER *RowCount);
BOOL __fastcall SQLSetConfigMode(UWORD wConfigMode);
SQLRETURN __fastcall SQLSetConnectAttr(SQLHDBC ConnectionHandle, SQLINTEGER Attribute, SQLPOINTER Value, SQLINTEGER StringLength);
SQLRETURN __fastcall SQLSetConnectOption(SQLHDBC ConnectionHandle, SQLUSMALLINT Option, SQLUINTEGER Value);
SQLRETURN __fastcall SQLSetCursorName(SQLHSTMT StatementHandle, SQLCHAR *CursorName, SQLSMALLINT NameLength);
SQLRETURN __fastcall SQLSetDescField(SQLHDESC DescriptorHandle, SQLSMALLINT RecNumber, SQLSMALLINT FieldIdentifier, SQLPOINTER Value, SQLINTEGER BufferLength);
SQLRETURN __fastcall SQLSetDescRec(SQLHDESC DescriptorHandle, SQLSMALLINT RecNumber, SQLSMALLINT Type, SQLSMALLINT SubType, SQLINTEGER Length, SQLSMALLINT Precision, SQLSMALLINT Scale, SQLPOINTER Data, SQLINTEGER *StringLength, SQLINTEGER *Indicator);
SQLRETURN __fastcall SQLSetEnvAttr(SQLHENV EnvironmentHandle, SQLINTEGER Attribute, SQLPOINTER Value, SQLINTEGER StringLength);
SQLRETURN __fastcall SQLSetParam(SQLHSTMT StatementHandle, SQLUSMALLINT ParameterNumber, SQLSMALLINT ValueType, SQLSMALLINT ParameterType, SQLUINTEGER LengthPrecision, SQLSMALLINT ParameterScale, SQLPOINTER ParameterValue, SQLINTEGER *StrLen_or_Ind);
SQLRETURN __fastcall SQLSetPos(SQLHSTMT hstmt, SQLUSMALLINT irow, SQLUSMALLINT fOption, SQLUSMALLINT fLock);
SQLRETURN __fastcall SQLSetScrollOptions(SQLHSTMT hstmt, SQLUSMALLINT fConcurrency, SQLINTEGER crowKeyset, SQLUSMALLINT crowRowset);
SQLRETURN __fastcall SQLSetStmtAttr(SQLHSTMT StatementHandle, SQLINTEGER Attribute, SQLPOINTER Value, SQLINTEGER StringLength);
SQLRETURN __fastcall SQLSetStmtOption(SQLHSTMT StatementHandle, SQLUSMALLINT Option, SQLUINTEGER Value);
SQLRETURN __fastcall SQLSpecialColumns(SQLHSTMT StatementHandle, SQLUSMALLINT IdentifierType, SQLCHAR *CatalogName, SQLSMALLINT NameLength1, SQLCHAR *SchemaName, SQLSMALLINT NameLength2, SQLCHAR *TableName, SQLSMALLINT NameLength3, SQLUSMALLINT Scope, SQLUSMALLINT Nullable);
SQLRETURN __fastcall SQLStatistics(SQLHSTMT StatementHandle, SQLCHAR *CatalogName, SQLSMALLINT NameLength1, SQLCHAR *SchemaName, SQLSMALLINT NameLength2, SQLCHAR *TableName, SQLSMALLINT NameLength3, SQLUSMALLINT Unique, SQLUSMALLINT Reserved);
SQLRETURN __fastcall SQLTablePrivileges(SQLHSTMT hstmt, SQLCHAR *szCatalogName, SQLSMALLINT cbCatalogName, SQLCHAR *szSchemaName, SQLSMALLINT cbSchemaName, SQLCHAR *szTableName, SQLSMALLINT cbTableName);
SQLRETURN __fastcall SQLTables(SQLHSTMT StatementHandle, SQLCHAR *CatalogName, SQLSMALLINT NameLength1, SQLCHAR *SchemaName, SQLSMALLINT NameLength2, SQLCHAR *TableName, SQLSMALLINT NameLength3, SQLCHAR *TableType, SQLSMALLINT NameLength4);
SQLRETURN __fastcall SQLTransact(SQLHENV EnvironmentHandle, SQLHDBC ConnectionHandle, SQLUSMALLINT CompletionType);
BOOL __fastcall SQLValidDSN(LPCSTR lpszDSN);
BOOL __fastcall SQLWriteDSNToIni(LPCSTR lpszDSN, LPCSTR lpszDriver);
BOOL __fastcall SQLWriteFileDSN(LPCSTR lpszFileName, LPCSTR lpszAppName, LPCSTR lpszKeyName, LPSTR lpszString);
BOOL __fastcall SQLWritePrivateProfileString(LPCSTR lpszSection, LPCSTR lpszEntry, LPCSTR lpszString, LPCSTR lpszFilename);
MACRO__SS _SS_MAXSIZE;
MACRO_OK _SUBWIN;
MACRO__SYS _SYS_CONF_H_;
MACRO__SYS_NAMELEN _SYS_NAMELEN;
MACRO__A _T;
int TABSIZE;
FIELDTYPE *TYPE_ALNUM;
FIELDTYPE *TYPE_ALPHA;
FIELDTYPE *TYPE_ENUM;
FIELDTYPE *TYPE_INTEGER;
FIELDTYPE *TYPE_IPV4;
FIELDTYPE *TYPE_NUMERIC;
FIELDTYPE *TYPE_REGEXP;
void __fastcall TclFreeObj(Tcl_Obj *objPtr);
int __fastcall Tcl_Access(const char *path, int mode);
void __fastcall Tcl_AddErrorInfo(Tcl_Interp *interp, const char *message);
void __fastcall Tcl_AddObjErrorInfo(Tcl_Interp *interp, const char *message, int length);
void __fastcall Tcl_AlertNotifier(ClientData clientData);
char *__fastcall Tcl_Alloc(unsigned int size);
void __fastcall Tcl_AllowExceptions(Tcl_Interp *interp);
int __fastcall Tcl_AppInit(Tcl_Interp *interp);
int __fastcall Tcl_AppendAllObjTypes(Tcl_Interp *interp, Tcl_Obj *objPtr);
void __fastcall Tcl_AppendElement(Tcl_Interp *interp, const char *string);
void __fastcall Tcl_AppendObjToObj(Tcl_Obj *objPtr, Tcl_Obj *appendObjPtr);
void Tcl_AppendResult(Tcl_Interp *interp, ...);
void __fastcall Tcl_AppendResultVA(Tcl_Interp *interp, va_list argList);
void Tcl_AppendStringsToObj(Tcl_Obj *objPtr, ...);
void __fastcall Tcl_AppendStringsToObjVA(Tcl_Obj *objPtr, va_list argList);
void __fastcall Tcl_AppendToObj(Tcl_Obj *objPtr, char *bytes, int length);
void __fastcall Tcl_AppendUnicodeToObj(Tcl_Obj *objPtr, Tcl_UniChar *unicode, int length);
Tcl_AsyncHandler __fastcall Tcl_AsyncCreate(Tcl_AsyncProc *proc, ClientData clientData);
void __fastcall Tcl_AsyncDelete(Tcl_AsyncHandler async);
int __fastcall Tcl_AsyncInvoke(Tcl_Interp *interp, int code);
void __fastcall Tcl_AsyncMark(Tcl_AsyncHandler async);
int Tcl_AsyncReady(void);
void __fastcall Tcl_BackgroundError(Tcl_Interp *interp);
char __fastcall Tcl_Backslash(const char *src, int *readPtr);
int __fastcall Tcl_BadChannelOption(Tcl_Interp *interp, char *optionName, char *optionList);
void __fastcall Tcl_CallWhenDeleted(Tcl_Interp *interp, Tcl_InterpDeleteProc *proc, ClientData clientData);
void __fastcall Tcl_CancelIdleCall(Tcl_IdleProc *idleProc, ClientData clientData);
Tcl_DriverBlockModeProc *__fastcall Tcl_ChannelBlockModeProc(Tcl_ChannelType *chanTypePtr);
int __fastcall Tcl_ChannelBuffered(Tcl_Channel chan);
Tcl_DriverClose2Proc *__fastcall Tcl_ChannelClose2Proc(Tcl_ChannelType *chanTypePtr);
Tcl_DriverCloseProc *__fastcall Tcl_ChannelCloseProc(Tcl_ChannelType *chanTypePtr);
Tcl_DriverFlushProc *__fastcall Tcl_ChannelFlushProc(Tcl_ChannelType *chanTypePtr);
Tcl_DriverGetHandleProc *__fastcall Tcl_ChannelGetHandleProc(Tcl_ChannelType *chanTypePtr);
Tcl_DriverGetOptionProc *__fastcall Tcl_ChannelGetOptionProc(Tcl_ChannelType *chanTypePtr);
Tcl_DriverHandlerProc *__fastcall Tcl_ChannelHandlerProc(Tcl_ChannelType *chanTypePtr);
Tcl_DriverInputProc *__fastcall Tcl_ChannelInputProc(Tcl_ChannelType *chanTypePtr);
char *__fastcall Tcl_ChannelName(Tcl_ChannelType *chanTypePtr);
Tcl_DriverOutputProc *__fastcall Tcl_ChannelOutputProc(Tcl_ChannelType *chanTypePtr);
Tcl_DriverSeekProc *__fastcall Tcl_ChannelSeekProc(Tcl_ChannelType *chanTypePtr);
Tcl_DriverSetOptionProc *__fastcall Tcl_ChannelSetOptionProc(Tcl_ChannelType *chanTypePtr);
Tcl_ChannelTypeVersion __fastcall Tcl_ChannelVersion(Tcl_ChannelType *chanTypePtr);
Tcl_DriverWatchProc *__fastcall Tcl_ChannelWatchProc(Tcl_ChannelType *chanTypePtr);
int __fastcall Tcl_Chdir(const char *dirName);
int __fastcall Tcl_Close(Tcl_Interp *interp, Tcl_Channel chan);
int __fastcall Tcl_CommandComplete(char *cmd);
char *__fastcall Tcl_Concat(int argc, char **argv);
Tcl_Obj *__fastcall Tcl_ConcatObj(int objc, Tcl_Obj *const objv[]);
void __fastcall Tcl_ConditionFinalize(Tcl_Condition *condPtr);
void __fastcall Tcl_ConditionNotify(Tcl_Condition *condPtr);
void __fastcall Tcl_ConditionWait(Tcl_Condition *condPtr, Tcl_Mutex *mutexPtr, Tcl_Time *timePtr);
int __fastcall Tcl_ConvertCountedElement(const char *src, int length, char *dst, int flags);
int __fastcall Tcl_ConvertElement(const char *src, char *dst, int flags);
int __fastcall Tcl_ConvertToType(Tcl_Interp *interp, Tcl_Obj *objPtr, Tcl_ObjType *typePtr);
int __fastcall Tcl_CreateAlias(Tcl_Interp *slave, char *slaveCmd, Tcl_Interp *target, char *targetCmd, int argc, char **argv);
int __fastcall Tcl_CreateAliasObj(Tcl_Interp *slave, char *slaveCmd, Tcl_Interp *target, char *targetCmd, int objc, Tcl_Obj *const objv[]);
Tcl_Channel __fastcall Tcl_CreateChannel(Tcl_ChannelType *typePtr, char *chanName, ClientData instanceData, int mask);
void __fastcall Tcl_CreateChannelHandler(Tcl_Channel chan, int mask, Tcl_ChannelProc *proc, ClientData clientData);
void __fastcall Tcl_CreateCloseHandler(Tcl_Channel chan, Tcl_CloseProc *proc, ClientData clientData);
Tcl_Command __fastcall Tcl_CreateCommand(Tcl_Interp *interp, char *cmdName, Tcl_CmdProc *proc, ClientData clientData, Tcl_CmdDeleteProc *deleteProc);
Tcl_Encoding __fastcall Tcl_CreateEncoding(Tcl_EncodingType *typePtr);
void __fastcall Tcl_CreateEventSource(Tcl_EventSetupProc *setupProc, Tcl_EventCheckProc *checkProc, ClientData clientData);
void __fastcall Tcl_CreateExitHandler(Tcl_ExitProc *proc, ClientData clientData);
void __fastcall Tcl_CreateFileHandler(int fd, int mask, Tcl_FileProc *proc, ClientData clientData);
Tcl_Interp *Tcl_CreateInterp(void);
void __fastcall Tcl_CreateMathFunc(Tcl_Interp *interp, char *name, int numArgs, Tcl_ValueType *argTypes, Tcl_MathProc *proc, ClientData clientData);
Tcl_Command __fastcall Tcl_CreateObjCommand(Tcl_Interp *interp, char *cmdName, Tcl_ObjCmdProc *proc, ClientData clientData, Tcl_CmdDeleteProc *deleteProc);
Tcl_Interp *__fastcall Tcl_CreateSlave(Tcl_Interp *interp, char *slaveName, int isSafe);
int __fastcall Tcl_CreateThread(Tcl_ThreadId *idPtr, Tcl_ThreadCreateProc *proc, ClientData clientData, int stackSize, int flags);
void __fastcall Tcl_CreateThreadExitHandler(Tcl_ExitProc *proc, ClientData clientData);
Tcl_TimerToken __fastcall Tcl_CreateTimerHandler(int milliseconds, Tcl_TimerProc *proc, ClientData clientData);
Tcl_Trace __fastcall Tcl_CreateTrace(Tcl_Interp *interp, int level, Tcl_CmdTraceProc *proc, ClientData clientData);
char *__fastcall Tcl_DStringAppend(Tcl_DString *dsPtr, const char *str, int length);
char *__fastcall Tcl_DStringAppendElement(Tcl_DString *dsPtr, const char *string);
void __fastcall Tcl_DStringEndSublist(Tcl_DString *dsPtr);
void __fastcall Tcl_DStringFree(Tcl_DString *dsPtr);
void __fastcall Tcl_DStringGetResult(Tcl_Interp *interp, Tcl_DString *dsPtr);
void __fastcall Tcl_DStringInit(Tcl_DString *dsPtr);
void __fastcall Tcl_DStringResult(Tcl_Interp *interp, Tcl_DString *dsPtr);
void __fastcall Tcl_DStringSetLength(Tcl_DString *dsPtr, int length);
void __fastcall Tcl_DStringStartSublist(Tcl_DString *dsPtr);
char *__fastcall Tcl_DbCkalloc(unsigned int size, char *file, int line);
int __fastcall Tcl_DbCkfree(char *ptr, char *file, int line);
char *__fastcall Tcl_DbCkrealloc(char *ptr, unsigned int size, char *file, int line);
void __fastcall Tcl_DbDecrRefCount(Tcl_Obj *objPtr, char *file, int line);
void __fastcall Tcl_DbIncrRefCount(Tcl_Obj *objPtr, char *file, int line);
int __fastcall Tcl_DbIsShared(Tcl_Obj *objPtr, char *file, int line);
Tcl_Obj *__fastcall Tcl_DbNewBooleanObj(int boolValue, char *file, int line);
Tcl_Obj *__fastcall Tcl_DbNewByteArrayObj(unsigned __int8 *bytes, int length, char *file, int line);
Tcl_Obj *__fastcall Tcl_DbNewDoubleObj(double doubleValue, char *file, int line);
Tcl_Obj *__fastcall Tcl_DbNewListObj(int objc, Tcl_Obj *const objv[], char *file, int line);
Tcl_Obj *__fastcall Tcl_DbNewLongObj(int longValue, char *file, int line);
Tcl_Obj *__fastcall Tcl_DbNewObj(char *file, int line);
Tcl_Obj *__fastcall Tcl_DbNewStringObj(const char *bytes, int length, char *file, int line);
void __fastcall Tcl_DecrRefCount(Tcl_Obj *objPtr);
void __fastcall Tcl_DeleteAssocData(Tcl_Interp *interp, char *name);
void __fastcall Tcl_DeleteChannelHandler(Tcl_Channel chan, Tcl_ChannelProc *proc, ClientData clientData);
void __fastcall Tcl_DeleteCloseHandler(Tcl_Channel chan, Tcl_CloseProc *proc, ClientData clientData);
int __fastcall Tcl_DeleteCommand(Tcl_Interp *interp, char *cmdName);
int __fastcall Tcl_DeleteCommandFromToken(Tcl_Interp *interp, Tcl_Command command);
void __fastcall Tcl_DeleteEventSource(Tcl_EventSetupProc *setupProc, Tcl_EventCheckProc *checkProc, ClientData clientData);
void __fastcall Tcl_DeleteEvents(Tcl_EventDeleteProc *proc, ClientData clientData);
void __fastcall Tcl_DeleteExitHandler(Tcl_ExitProc *proc, ClientData clientData);
void __fastcall Tcl_DeleteFileHandler(int fd);
void __fastcall Tcl_DeleteHashEntry(Tcl_HashEntry *entryPtr);
void __fastcall Tcl_DeleteHashTable(Tcl_HashTable *tablePtr);
void __fastcall Tcl_DeleteInterp(Tcl_Interp *interp);
void __fastcall Tcl_DeleteThreadExitHandler(Tcl_ExitProc *proc, ClientData clientData);
void __fastcall Tcl_DeleteTimerHandler(Tcl_TimerToken token);
void __fastcall Tcl_DeleteTrace(Tcl_Interp *interp, Tcl_Trace trace);
void __fastcall Tcl_DetachPids(int numPids, Tcl_Pid *pidPtr);
void __fastcall Tcl_DiscardResult(Tcl_SavedResult *statePtr);
int __fastcall Tcl_DoOneEvent(int flags);
void __fastcall Tcl_DoWhenIdle(Tcl_IdleProc *proc, ClientData clientData);
void __fastcall Tcl_DontCallWhenDeleted(Tcl_Interp *interp, Tcl_InterpDeleteProc *proc, ClientData clientData);
int __fastcall Tcl_DumpActiveMemory(char *fileName);
Tcl_Obj *__fastcall Tcl_DuplicateObj(Tcl_Obj *objPtr);
int __fastcall Tcl_Eof(Tcl_Channel chan);
char *Tcl_ErrnoId(void);
char *__fastcall Tcl_ErrnoMsg(int err);
int __fastcall Tcl_Eval(Tcl_Interp *interp, char *string);
int __fastcall Tcl_EvalEx(Tcl_Interp *interp, char *script, int numBytes, int flags);
int __fastcall Tcl_EvalFile(Tcl_Interp *interp, char *fileName);
int __fastcall Tcl_EvalObj(Tcl_Interp *interp, Tcl_Obj *objPtr);
int __fastcall Tcl_EvalObjEx(Tcl_Interp *interp, Tcl_Obj *objPtr, int flags);
int __fastcall Tcl_EvalObjv(Tcl_Interp *interp, int objc, Tcl_Obj *const objv[], int flags);
Tcl_Obj *__fastcall Tcl_EvalTokens(Tcl_Interp *interp, Tcl_Token *tokenPtr, int count);
void __fastcall Tcl_EventuallyFree(ClientData clientData, Tcl_FreeProc *freeProc);
void __fastcall Tcl_Exit(int status);
void __fastcall Tcl_ExitThread(int status);
int __fastcall Tcl_ExposeCommand(Tcl_Interp *interp, char *hiddenCmdToken, char *cmdName);
int __fastcall Tcl_ExprBoolean(Tcl_Interp *interp, char *str, int *ptr);
int __fastcall Tcl_ExprBooleanObj(Tcl_Interp *interp, Tcl_Obj *objPtr, int *ptr);
int __fastcall Tcl_ExprDouble(Tcl_Interp *interp, char *str, double *ptr);
int __fastcall Tcl_ExprDoubleObj(Tcl_Interp *interp, Tcl_Obj *objPtr, double *ptr);
int __fastcall Tcl_ExprLong(Tcl_Interp *interp, char *str, int *ptr);
int __fastcall Tcl_ExprLongObj(Tcl_Interp *interp, Tcl_Obj *objPtr, int *ptr);
int __fastcall Tcl_ExprObj(Tcl_Interp *interp, Tcl_Obj *objPtr, Tcl_Obj **resultPtrPtr);
int __fastcall Tcl_ExprString(Tcl_Interp *interp, char *string);
int __fastcall Tcl_ExternalToUtf(Tcl_Interp *interp, Tcl_Encoding encoding, const char *src, int srcLen, int flags, Tcl_EncodingState *statePtr, char *dst, int dstLen, int *srcReadPtr, int *dstWrotePtr, int *dstCharsPtr);
char *__fastcall Tcl_ExternalToUtfDString(Tcl_Encoding encoding, const char *src, int srcLen, Tcl_DString *dsPtr);
void Tcl_Finalize(void);
void __fastcall Tcl_FinalizeNotifier(ClientData clientData);
void Tcl_FinalizeThread(void);
void __fastcall Tcl_FindExecutable(const char *argv0);
Tcl_HashEntry *__fastcall Tcl_FirstHashEntry(Tcl_HashTable *tablePtr, Tcl_HashSearch *searchPtr);
int __fastcall Tcl_Flush(Tcl_Channel chan);
void __fastcall Tcl_Free(char *ptr);
void __fastcall Tcl_FreeEncoding(Tcl_Encoding encoding);
void __fastcall Tcl_FreeParse(Tcl_Parse *parsePtr);
void __fastcall Tcl_FreeResult(Tcl_Interp *interp);
int __fastcall Tcl_GetAlias(Tcl_Interp *interp, char *slaveCmd, Tcl_Interp **targetInterpPtr, char **targetCmdPtr, int *argcPtr, char ***argvPtr);
int __fastcall Tcl_GetAliasObj(Tcl_Interp *interp, char *slaveCmd, Tcl_Interp **targetInterpPtr, char **targetCmdPtr, int *objcPtr, Tcl_Obj ***objv);
Tcl_Mutex *Tcl_GetAllocMutex(void);
ClientData __fastcall Tcl_GetAssocData(Tcl_Interp *interp, char *name, Tcl_InterpDeleteProc **procPtr);
int __fastcall Tcl_GetBoolean(Tcl_Interp *interp, char *str, int *boolPtr);
int __fastcall Tcl_GetBooleanFromObj(Tcl_Interp *interp, Tcl_Obj *objPtr, int *boolPtr);
unsigned __int8 *__fastcall Tcl_GetByteArrayFromObj(Tcl_Obj *objPtr, int *lengthPtr);
Tcl_Channel __fastcall Tcl_GetChannel(Tcl_Interp *interp, char *chanName, int *modePtr);
int __fastcall Tcl_GetChannelBufferSize(Tcl_Channel chan);
int __fastcall Tcl_GetChannelHandle(Tcl_Channel chan, int direction, ClientData *handlePtr);
ClientData __fastcall Tcl_GetChannelInstanceData(Tcl_Channel chan);
int __fastcall Tcl_GetChannelMode(Tcl_Channel chan);
char *__fastcall Tcl_GetChannelName(Tcl_Channel chan);
int __fastcall Tcl_GetChannelNames(Tcl_Interp *interp);
int __fastcall Tcl_GetChannelNamesEx(Tcl_Interp *interp, char *pattern);
int __fastcall Tcl_GetChannelOption(Tcl_Interp *interp, Tcl_Channel chan, char *optionName, Tcl_DString *dsPtr);
Tcl_ChannelType *__fastcall Tcl_GetChannelType(Tcl_Channel chan);
int __fastcall Tcl_GetCharLength(Tcl_Obj *objPtr);
int __fastcall Tcl_GetCommandInfo(Tcl_Interp *interp, char *cmdName, Tcl_CmdInfo *infoPtr);
char *__fastcall Tcl_GetCommandName(Tcl_Interp *interp, Tcl_Command command);
Tcl_ThreadId Tcl_GetCurrentThread(void);
char *__fastcall Tcl_GetCwd(Tcl_Interp *interp, Tcl_DString *cwdPtr);
char *Tcl_GetDefaultEncodingDir(void);
int __fastcall Tcl_GetDouble(Tcl_Interp *interp, char *str, double *doublePtr);
int __fastcall Tcl_GetDoubleFromObj(Tcl_Interp *interp, Tcl_Obj *objPtr, double *doublePtr);
Tcl_Encoding __fastcall Tcl_GetEncoding(Tcl_Interp *interp, const char *name);
char *__fastcall Tcl_GetEncodingName(Tcl_Encoding encoding);
void __fastcall Tcl_GetEncodingNames(Tcl_Interp *interp);
int Tcl_GetErrno(void);
char *Tcl_GetHostName(void);
int __fastcall Tcl_GetIndexFromObj(Tcl_Interp *interp, Tcl_Obj *objPtr, char **tablePtr, char *msg, int flags, int *indexPtr);
int __fastcall Tcl_GetIndexFromObjStruct(Tcl_Interp *interp, Tcl_Obj *objPtr, char **tablePtr, int offset, char *msg, int flags, int *indexPtr);
int __fastcall Tcl_GetInt(Tcl_Interp *interp, char *str, int *intPtr);
int __fastcall Tcl_GetIntFromObj(Tcl_Interp *interp, Tcl_Obj *objPtr, int *intPtr);
int __fastcall Tcl_GetInterpPath(Tcl_Interp *askInterp, Tcl_Interp *slaveInterp);
int __fastcall Tcl_GetLongFromObj(Tcl_Interp *interp, Tcl_Obj *objPtr, int *longPtr);
Tcl_Interp *__fastcall Tcl_GetMaster(Tcl_Interp *interp);
const char *Tcl_GetNameOfExecutable(void);
Tcl_Obj *__fastcall Tcl_GetObjResult(Tcl_Interp *interp);
Tcl_ObjType *__fastcall Tcl_GetObjType(char *typeName);
int __fastcall Tcl_GetOpenFile(Tcl_Interp *interp, char *str, int forWriting, int checkUsage, ClientData *filePtr);
Tcl_PathType __fastcall Tcl_GetPathType(char *path);
Tcl_Obj *__fastcall Tcl_GetRange(Tcl_Obj *objPtr, int first, int last);
Tcl_RegExp __fastcall Tcl_GetRegExpFromObj(Tcl_Interp *interp, Tcl_Obj *patObj, int flags);
int Tcl_GetServiceMode(void);
Tcl_Interp *__fastcall Tcl_GetSlave(Tcl_Interp *interp, char *slaveName);
Tcl_Channel __fastcall Tcl_GetStackedChannel(Tcl_Channel chan);
Tcl_Channel __fastcall Tcl_GetStdChannel(int type);
char *__fastcall Tcl_GetString(Tcl_Obj *objPtr);
char *__fastcall Tcl_GetStringFromObj(Tcl_Obj *objPtr, int *lengthPtr);
char *__fastcall Tcl_GetStringResult(Tcl_Interp *interp);
void *__fastcall Tcl_GetThreadData(Tcl_ThreadDataKey *keyPtr, int size);
Tcl_Channel __fastcall Tcl_GetTopChannel(Tcl_Channel chan);
Tcl_UniChar __fastcall Tcl_GetUniChar(Tcl_Obj *objPtr, int index);
Tcl_UniChar *__fastcall Tcl_GetUnicode(Tcl_Obj *objPtr);
char *__fastcall Tcl_GetVar(Tcl_Interp *interp, char *varName, int flags);
char *__fastcall Tcl_GetVar2(Tcl_Interp *interp, char *part1, char *part2, int flags);
Tcl_Obj *__fastcall Tcl_GetVar2Ex(Tcl_Interp *interp, char *part1, char *part2, int flags);
void __fastcall Tcl_GetVersion(int *major, int *minor, int *patchLevel, int *type);
int __fastcall Tcl_Gets(Tcl_Channel chan, Tcl_DString *dsPtr);
int __fastcall Tcl_GetsObj(Tcl_Channel chan, Tcl_Obj *objPtr);
int __fastcall Tcl_GlobalEval(Tcl_Interp *interp, char *command);
int __fastcall Tcl_GlobalEvalObj(Tcl_Interp *interp, Tcl_Obj *objPtr);
char *__fastcall Tcl_HashStats(Tcl_HashTable *tablePtr);
int __fastcall Tcl_HideCommand(Tcl_Interp *interp, char *cmdName, char *hiddenCmdToken);
void __fastcall Tcl_IncrRefCount(Tcl_Obj *objPtr);
int __fastcall Tcl_Init(Tcl_Interp *interp);
void __fastcall Tcl_InitHashTable(Tcl_HashTable *tablePtr, int keyType);
void __fastcall Tcl_InitMemory(Tcl_Interp *interp);
ClientData Tcl_InitNotifier(void);
char *__fastcall Tcl_InitStubs(Tcl_Interp *interp, char *version, int exact);
int __fastcall Tcl_InputBlocked(Tcl_Channel chan);
int __fastcall Tcl_InputBuffered(Tcl_Channel chan);
int __fastcall Tcl_InterpDeleted(Tcl_Interp *interp);
void __fastcall Tcl_InvalidateStringRep(Tcl_Obj *objPtr);
int __fastcall Tcl_IsSafe(Tcl_Interp *interp);
int __fastcall Tcl_IsShared(Tcl_Obj *objPtr);
char *__fastcall Tcl_JoinPath(int argc, char **argv, Tcl_DString *resultPtr);
int __fastcall Tcl_LinkVar(Tcl_Interp *interp, char *varName, char *addr, int type);
int __fastcall Tcl_ListObjAppendElement(Tcl_Interp *interp, Tcl_Obj *listPtr, Tcl_Obj *objPtr);
int __fastcall Tcl_ListObjAppendList(Tcl_Interp *interp, Tcl_Obj *listPtr, Tcl_Obj *elemListPtr);
int __fastcall Tcl_ListObjGetElements(Tcl_Interp *interp, Tcl_Obj *listPtr, int *objcPtr, Tcl_Obj ***objvPtr);
int __fastcall Tcl_ListObjIndex(Tcl_Interp *interp, Tcl_Obj *listPtr, int index, Tcl_Obj **objPtrPtr);
int __fastcall Tcl_ListObjLength(Tcl_Interp *interp, Tcl_Obj *listPtr, int *intPtr);
int __fastcall Tcl_ListObjReplace(Tcl_Interp *interp, Tcl_Obj *listPtr, int first, int count, int objc, Tcl_Obj *const objv[]);
void __fastcall Tcl_LogCommandInfo(Tcl_Interp *interp, char *script, char *command, int length);
void __fastcall Tcl_Main(int argc, char **argv, Tcl_AppInitProc *appInitProc);
Tcl_Channel __fastcall Tcl_MakeFileChannel(ClientData handle, int mode);
int __fastcall Tcl_MakeSafe(Tcl_Interp *interp);
Tcl_Channel __fastcall Tcl_MakeTcpClientChannel(ClientData tcpSocket);
char *__fastcall Tcl_Merge(int argc, char **argv);
void __fastcall Tcl_MutexFinalize(Tcl_Mutex *mutex);
void __fastcall Tcl_MutexLock(Tcl_Mutex *mutexPtr);
void __fastcall Tcl_MutexUnlock(Tcl_Mutex *mutexPtr);
Tcl_Obj *__fastcall Tcl_NewBooleanObj(int boolValue);
Tcl_Obj *__fastcall Tcl_NewByteArrayObj(unsigned __int8 *bytes, int length);
Tcl_Obj *__fastcall Tcl_NewDoubleObj(double doubleValue);
Tcl_Obj *__fastcall Tcl_NewIntObj(int intValue);
Tcl_Obj *__fastcall Tcl_NewListObj(int objc, Tcl_Obj *const objv[]);
Tcl_Obj *__fastcall Tcl_NewLongObj(int longValue);
Tcl_Obj *Tcl_NewObj(void);
Tcl_Obj *__fastcall Tcl_NewStringObj(const char *bytes, int length);
Tcl_Obj *__fastcall Tcl_NewUnicodeObj(Tcl_UniChar *unicode, int numChars);
Tcl_HashEntry *__fastcall Tcl_NextHashEntry(Tcl_HashSearch *searchPtr);
void __fastcall Tcl_NotifyChannel(Tcl_Channel channel, int mask);
int __fastcall Tcl_NumUtfChars(const char *src, int len);
Tcl_Obj *__fastcall Tcl_ObjGetVar2(Tcl_Interp *interp, Tcl_Obj *part1Ptr, Tcl_Obj *part2Ptr, int flags);
Tcl_Obj *__fastcall Tcl_ObjSetVar2(Tcl_Interp *interp, Tcl_Obj *part1Ptr, Tcl_Obj *part2Ptr, Tcl_Obj *newValuePtr, int flags);
Tcl_Channel __fastcall Tcl_OpenCommandChannel(Tcl_Interp *interp, int argc, char **argv, int flags);
Tcl_Channel __fastcall Tcl_OpenFileChannel(Tcl_Interp *interp, char *fileName, char *modeString, int permissions);
Tcl_Channel __fastcall Tcl_OpenTcpClient(Tcl_Interp *interp, int port, char *address, char *myaddr, int myport, int async);
Tcl_Channel __fastcall Tcl_OpenTcpServer(Tcl_Interp *interp, int port, char *host, Tcl_TcpAcceptProc *acceptProc, ClientData callbackData);
void Tcl_Panic(char *format, ...);
void __fastcall Tcl_PanicVA(char *format, va_list argList);
int __fastcall Tcl_ParseBraces(Tcl_Interp *interp, char *string, int numBytes, Tcl_Parse *parsePtr, int append, char **termPtr);
int __fastcall Tcl_ParseCommand(Tcl_Interp *interp, char *string, int numBytes, int nested, Tcl_Parse *parsePtr);
int __fastcall Tcl_ParseExpr(Tcl_Interp *interp, char *string, int numBytes, Tcl_Parse *parsePtr);
int __fastcall Tcl_ParseQuotedString(Tcl_Interp *interp, char *string, int numBytes, Tcl_Parse *parsePtr, int append, char **termPtr);
char *__fastcall Tcl_ParseVar(Tcl_Interp *interp, char *str, char **termPtr);
int __fastcall Tcl_ParseVarName(Tcl_Interp *interp, char *string, int numBytes, Tcl_Parse *parsePtr, int append);
char *__fastcall Tcl_PkgPresent(Tcl_Interp *interp, char *name, char *version, int exact);
char *__fastcall Tcl_PkgPresentEx(Tcl_Interp *interp, char *name, char *version, int exact, ClientData *clientDataPtr);
int __fastcall Tcl_PkgProvide(Tcl_Interp *interp, char *name, char *version);
int __fastcall Tcl_PkgProvideEx(Tcl_Interp *interp, char *name, char *version, ClientData clientData);
char *__fastcall Tcl_PkgRequire(Tcl_Interp *interp, char *name, char *version, int exact);
char *__fastcall Tcl_PkgRequireEx(Tcl_Interp *interp, char *name, char *version, int exact, ClientData *clientDataPtr);
char *__fastcall Tcl_PosixError(Tcl_Interp *interp);
void __fastcall Tcl_Preserve(ClientData data);
void __fastcall Tcl_PrintDouble(Tcl_Interp *interp, double value, char *dst);
int __fastcall Tcl_ProcObjCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *const objv[]);
int __fastcall Tcl_PutEnv(const char *string);
void __fastcall Tcl_QueueEvent(Tcl_Event *evPtr, Tcl_QueuePosition position);
int __fastcall Tcl_Read(Tcl_Channel chan, char *bufPtr, int toRead);
int __fastcall Tcl_ReadChars(Tcl_Channel channel, Tcl_Obj *objPtr, int charsToRead, int appendFlag);
int __fastcall Tcl_ReadRaw(Tcl_Channel chan, char *dst, int bytesToRead);
char *__fastcall Tcl_Realloc(char *ptr, unsigned int size);
void Tcl_ReapDetachedProcs(void);
int __fastcall Tcl_RecordAndEval(Tcl_Interp *interp, char *cmd, int flags);
int __fastcall Tcl_RecordAndEvalObj(Tcl_Interp *interp, Tcl_Obj *cmdPtr, int flags);
Tcl_RegExp __fastcall Tcl_RegExpCompile(Tcl_Interp *interp, char *string);
int __fastcall Tcl_RegExpExec(Tcl_Interp *interp, Tcl_RegExp regexp, const char *str, const char *start);
int __fastcall Tcl_RegExpExecObj(Tcl_Interp *interp, Tcl_RegExp regexp, Tcl_Obj *objPtr, int offset, int nmatches, int flags);
void __fastcall Tcl_RegExpGetInfo(Tcl_RegExp regexp, Tcl_RegExpInfo *infoPtr);
int __fastcall Tcl_RegExpMatch(Tcl_Interp *interp, char *str, char *pattern);
int __fastcall Tcl_RegExpMatchObj(Tcl_Interp *interp, Tcl_Obj *stringObj, Tcl_Obj *patternObj);
void __fastcall Tcl_RegExpRange(Tcl_RegExp regexp, int index, char **startPtr, char **endPtr);
void __fastcall Tcl_RegisterChannel(Tcl_Interp *interp, Tcl_Channel chan);
void __fastcall Tcl_RegisterObjType(Tcl_ObjType *typePtr);
void __fastcall Tcl_Release(ClientData clientData);
void __fastcall Tcl_ResetResult(Tcl_Interp *interp);
void __fastcall Tcl_RestoreResult(Tcl_Interp *interp, Tcl_SavedResult *statePtr);
void __fastcall Tcl_SaveResult(Tcl_Interp *interp, Tcl_SavedResult *statePtr);
int __fastcall Tcl_ScanCountedElement(const char *str, int length, int *flagPtr);
int __fastcall Tcl_ScanElement(const char *str, int *flagPtr);
int __fastcall Tcl_Seek(Tcl_Channel chan, int offset, int mode);
int Tcl_ServiceAll(void);
int __fastcall Tcl_ServiceEvent(int flags);
void __fastcall Tcl_ServiceModeHook(int mode);
void __fastcall Tcl_SetAssocData(Tcl_Interp *interp, char *name, Tcl_InterpDeleteProc *proc, ClientData clientData);
void __fastcall Tcl_SetBooleanObj(Tcl_Obj *objPtr, int boolValue);
unsigned __int8 *__fastcall Tcl_SetByteArrayLength(Tcl_Obj *objPtr, int length);
void __fastcall Tcl_SetByteArrayObj(Tcl_Obj *objPtr, unsigned __int8 *bytes, int length);
void __fastcall Tcl_SetChannelBufferSize(Tcl_Channel chan, int sz);
int __fastcall Tcl_SetChannelOption(Tcl_Interp *interp, Tcl_Channel chan, char *optionName, char *newValue);
int __fastcall Tcl_SetCommandInfo(Tcl_Interp *interp, char *cmdName, Tcl_CmdInfo *infoPtr);
void __fastcall Tcl_SetDefaultEncodingDir(char *path);
void __fastcall Tcl_SetDoubleObj(Tcl_Obj *objPtr, double doubleValue);
void __fastcall Tcl_SetErrno(int err);
void Tcl_SetErrorCode(Tcl_Interp *interp, ...);
void __fastcall Tcl_SetErrorCodeVA(Tcl_Interp *interp, va_list argList);
void __fastcall Tcl_SetIntObj(Tcl_Obj *objPtr, int intValue);
void __fastcall Tcl_SetListObj(Tcl_Obj *objPtr, int objc, Tcl_Obj *const objv[]);
void __fastcall Tcl_SetLongObj(Tcl_Obj *objPtr, int longValue);
void __fastcall Tcl_SetMainLoop(Tcl_MainLoopProc *proc);
void __fastcall Tcl_SetMaxBlockTime(Tcl_Time *timePtr);
void __fastcall Tcl_SetNotifier(Tcl_NotifierProcs *notifierProcPtr);
void __fastcall Tcl_SetObjErrorCode(Tcl_Interp *interp, Tcl_Obj *errorObjPtr);
void __fastcall Tcl_SetObjLength(Tcl_Obj *objPtr, int length);
void __fastcall Tcl_SetObjResult(Tcl_Interp *interp, Tcl_Obj *resultObjPtr);
void __fastcall Tcl_SetPanicProc(Tcl_PanicProc *panicProc);
int __fastcall Tcl_SetRecursionLimit(Tcl_Interp *interp, int depth);
void __fastcall Tcl_SetResult(Tcl_Interp *interp, char *str, Tcl_FreeProc *freeProc);
int __fastcall Tcl_SetServiceMode(int mode);
void __fastcall Tcl_SetStdChannel(Tcl_Channel channel, int type);
void __fastcall Tcl_SetStringObj(Tcl_Obj *objPtr, char *bytes, int length);
int __fastcall Tcl_SetSystemEncoding(Tcl_Interp *interp, const char *name);
void __fastcall Tcl_SetTimer(Tcl_Time *timePtr);
void __fastcall Tcl_SetUnicodeObj(Tcl_Obj *objPtr, Tcl_UniChar *unicode, int numChars);
char *__fastcall Tcl_SetVar(Tcl_Interp *interp, char *varName, char *newValue, int flags);
char *__fastcall Tcl_SetVar2(Tcl_Interp *interp, char *part1, char *part2, char *newValue, int flags);
Tcl_Obj *__fastcall Tcl_SetVar2Ex(Tcl_Interp *interp, char *part1, char *part2, Tcl_Obj *newValuePtr, int flags);
char *__fastcall Tcl_SignalId(int sig);
char *__fastcall Tcl_SignalMsg(int sig);
void __fastcall Tcl_Sleep(int ms);
void __fastcall Tcl_SourceRCFile(Tcl_Interp *interp);
int __fastcall Tcl_SplitList(Tcl_Interp *interp, const char *listStr, int *argcPtr, char ***argvPtr);
void __fastcall Tcl_SplitPath(const char *path, int *argcPtr, char ***argvPtr);
Tcl_Channel __fastcall Tcl_StackChannel(Tcl_Interp *interp, Tcl_ChannelType *typePtr, ClientData instanceData, int mask, Tcl_Channel prevChan);
int __fastcall Tcl_Stat(const char *path, struct stat *bufPtr);
void __fastcall Tcl_StaticPackage(Tcl_Interp *interp, char *pkgName, Tcl_PackageInitProc *initProc, Tcl_PackageInitProc *safeInitProc);
int __fastcall Tcl_StringCaseMatch(const char *str, const char *pattern, int nocase);
int __fastcall Tcl_StringMatch(const char *str, const char *pattern);
int __fastcall Tcl_Tell(Tcl_Channel chan);
void __fastcall Tcl_ThreadAlert(Tcl_ThreadId threadId);
void __fastcall Tcl_ThreadQueueEvent(Tcl_ThreadId threadId, Tcl_Event *evPtr, Tcl_QueuePosition position);
int __fastcall Tcl_TraceVar(Tcl_Interp *interp, char *varName, int flags, Tcl_VarTraceProc *proc, ClientData clientData);
int __fastcall Tcl_TraceVar2(Tcl_Interp *interp, char *part1, char *part2, int flags, Tcl_VarTraceProc *proc, ClientData clientData);
char *__fastcall Tcl_TranslateFileName(Tcl_Interp *interp, char *name, Tcl_DString *bufferPtr);
int __fastcall Tcl_Ungets(Tcl_Channel chan, char *str, int len, int atHead);
Tcl_UniChar __fastcall Tcl_UniCharAtIndex(const char *src, int index);
int __fastcall Tcl_UniCharIsAlnum(int ch);
int __fastcall Tcl_UniCharIsAlpha(int ch);
int __fastcall Tcl_UniCharIsControl(int ch);
int __fastcall Tcl_UniCharIsDigit(int ch);
int __fastcall Tcl_UniCharIsGraph(int ch);
int __fastcall Tcl_UniCharIsLower(int ch);
int __fastcall Tcl_UniCharIsPrint(int ch);
int __fastcall Tcl_UniCharIsPunct(int ch);
int __fastcall Tcl_UniCharIsSpace(int ch);
int __fastcall Tcl_UniCharIsUpper(int ch);
int __fastcall Tcl_UniCharIsWordChar(int ch);
int __fastcall Tcl_UniCharLen(Tcl_UniChar *str);
int __fastcall Tcl_UniCharNcmp(const Tcl_UniChar *cs, const Tcl_UniChar *ct, unsigned int n);
Tcl_UniChar __fastcall Tcl_UniCharToLower(int ch);
Tcl_UniChar __fastcall Tcl_UniCharToTitle(int ch);
Tcl_UniChar __fastcall Tcl_UniCharToUpper(int ch);
int __fastcall Tcl_UniCharToUtf(int ch, char *buf);
char *__fastcall Tcl_UniCharToUtfDString(const Tcl_UniChar *string, int numChars, Tcl_DString *dsPtr);
void __fastcall Tcl_UnlinkVar(Tcl_Interp *interp, char *varName);
int __fastcall Tcl_UnregisterChannel(Tcl_Interp *interp, Tcl_Channel chan);
int __fastcall Tcl_UnsetVar(Tcl_Interp *interp, char *varName, int flags);
int __fastcall Tcl_UnsetVar2(Tcl_Interp *interp, char *part1, char *part2, int flags);
int __fastcall Tcl_UnstackChannel(Tcl_Interp *interp, Tcl_Channel chan);
void __fastcall Tcl_UntraceVar(Tcl_Interp *interp, char *varName, int flags, Tcl_VarTraceProc *proc, ClientData clientData);
void __fastcall Tcl_UntraceVar2(Tcl_Interp *interp, char *part1, char *part2, int flags, Tcl_VarTraceProc *proc, ClientData clientData);
int __fastcall Tcl_UpVar(Tcl_Interp *interp, char *frameName, char *varName, char *localName, int flags);
int __fastcall Tcl_UpVar2(Tcl_Interp *interp, char *frameName, char *part1, char *part2, char *localName, int flags);
void __fastcall Tcl_UpdateLinkedVar(Tcl_Interp *interp, char *varName);
char *__fastcall Tcl_UtfAtIndex(const char *src, int index);
int __fastcall Tcl_UtfBackslash(const char *src, int *readPtr, char *dst);
int __fastcall Tcl_UtfCharComplete(const char *src, int len);
char *__fastcall Tcl_UtfFindFirst(const char *src, int ch);
char *__fastcall Tcl_UtfFindLast(const char *src, int ch);
int __fastcall Tcl_UtfNcasecmp(const char *s1, const char *s2, unsigned int n);
int __fastcall Tcl_UtfNcmp(const char *s1, const char *s2, unsigned int n);
char *__fastcall Tcl_UtfNext(const char *src);
char *__fastcall Tcl_UtfPrev(const char *src, const char *start);
int __fastcall Tcl_UtfToExternal(Tcl_Interp *interp, Tcl_Encoding encoding, const char *src, int srcLen, int flags, Tcl_EncodingState *statePtr, char *dst, int dstLen, int *srcReadPtr, int *dstWrotePtr, int *dstCharsPtr);
char *__fastcall Tcl_UtfToExternalDString(Tcl_Encoding encoding, const char *src, int srcLen, Tcl_DString *dsPtr);
int __fastcall Tcl_UtfToLower(char *src);
int __fastcall Tcl_UtfToTitle(char *src);
int __fastcall Tcl_UtfToUniChar(const char *src, Tcl_UniChar *chPtr);
Tcl_UniChar *__fastcall Tcl_UtfToUniCharDString(const char *string, int length, Tcl_DString *dsPtr);
int __fastcall Tcl_UtfToUpper(char *src);
void __fastcall Tcl_ValidateAllMemory(char *file, int line);
int Tcl_VarEval(Tcl_Interp *interp, ...);
int __fastcall Tcl_VarEvalVA(Tcl_Interp *interp, va_list argList);
ClientData __fastcall Tcl_VarTraceInfo(Tcl_Interp *interp, char *varName, int flags, Tcl_VarTraceProc *procPtr, ClientData prevClientData);
ClientData __fastcall Tcl_VarTraceInfo2(Tcl_Interp *interp, char *part1, char *part2, int flags, Tcl_VarTraceProc *procPtr, ClientData prevClientData);
int __fastcall Tcl_WaitForEvent(Tcl_Time *timePtr);
Tcl_Pid __fastcall Tcl_WaitPid(Tcl_Pid pid, int *statPtr, int options);
int __fastcall Tcl_Write(Tcl_Channel chan, char *s, int slen);
int __fastcall Tcl_WriteChars(Tcl_Channel chan, const char *src, int srcLen);
int __fastcall Tcl_WriteObj(Tcl_Channel chan, Tcl_Obj *objPtr);
int __fastcall Tcl_WriteRaw(Tcl_Channel chan, char *src, int srcLen);
void __fastcall Tcl_WrongNumArgs(Tcl_Interp *interp, int objc, Tcl_Obj *const objv[], char *message);
MACRO__A _U;
char *UP;
MACRO__USING _USING_PROTOTYPES_;
MACRO_OK _WRAPPED;
MACRO__WSTOPPED _WSTOPPED;
MACRO__A _X;
MACRO___BIND __BIND;
_RuneLocale *_CurrentRuneLocale;
MACRO___DTF __DTF_READALL;
_RuneLocale _DefaultRuneLocale;
const fenv_t _FE_DFL_ENV;
MACRO___INT __INT_MAX__;
MACRO___IPV6 __IPV6_ADDR_SCOPE_GLOBAL;
MACRO___IPV6 __IPV6_ADDR_SCOPE_LINKLOCAL;
MACRO___IPV6 __IPV6_ADDR_SCOPE_NODELOCAL;
MACRO___IPV6 __IPV6_ADDR_SCOPE_ORGLOCAL;
MACRO___IPV6 __IPV6_ADDR_SCOPE_SITELOCAL;
MACRO___LDPGSZ __LDPGSZ;
MACRO___LONG_LONG __LONG_LONG_MAX__;
MACRO___LONG __LONG_MAX__;
int *_NSGetArgc(void);
char ***_NSGetArgv(void);
char ***_NSGetEnviron(void);
struct mach_header *_NSGetMachExecuteHeader(void);
char **_NSGetProgname(void);
MACRO___PFKEY __PFKEY_V2_H;
MACRO___PTHREAD __PTHREAD_ATTR_SIZE__;
MACRO___PTHREAD __PTHREAD_CONDATTR_SIZE__;
MACRO___PTHREAD __PTHREAD_COND_SIZE__;
MACRO___PTHREAD __PTHREAD_MUTEXATTR_SIZE__;
MACRO___PTHREAD __PTHREAD_MUTEX_SIZE__;
MACRO___PTHREAD __PTHREAD_ONCE_SIZE__;
MACRO___PTHREAD __PTHREAD_RWLOCKATTR_SIZE__;
MACRO___PTHREAD __PTHREAD_RWLOCK_SIZE__;
MACRO___PTHREAD __PTHREAD_SIZE__;
MACRO___RES __RES;
MACRO___R __R_UNUSED;
MACRO_NULL __SALC;
MACRO_NULL __SAPP;
MACRO___SCHED __SCHED_PARAM_SIZE__;
MACRO_NULL __SEOF;
MACRO_NULL __SERR;
MACRO___SHRT __SHRT_MAX__;
MACRO_NULL __SLBF;
MACRO_NULL __SMBF;
MACRO_NULL __SMOD;
MACRO_NULL __SNBF;
MACRO_NULL __SNPT;
MACRO_NULL __SOFF;
MACRO_NULL __SOPT;
MACRO_NULL __SRD;
MACRO_NULL __SRW;
MACRO_NULL __SSTR;
MACRO_NULL __SWR;
MACRO___TYPE __TYPE_LONGDOUBLE_IS_DOUBLE;
int __fastcall _VOP_ABORTOP(struct vnode *dvp, struct componentname *cnp);
int __fastcall _VOP_ACCESS(struct vnode *vp, int mode, struct ucred *cred, struct proc *p);
int __fastcall _VOP_ADVLOCK(struct vnode *vp, caddr_t id, int op, struct flock *fl, int flags);
int __fastcall _VOP_ALLOCATE(struct vnode *vp, off_t length, u_int32_t flags, off_t *bytesallocated, off_t offset, struct ucred *cred, struct proc *p);
int __fastcall _VOP_BLKATOFF(struct vnode *vp, off_t offset, char **res, struct buf **bpp);
int __fastcall _VOP_BLKTOOFF(struct vnode *vp, daddr_t lblkno, off_t *offset);
int __fastcall _VOP_BMAP(struct vnode *vp, daddr_t bn, struct vnode **vpp, daddr_t *bnp, int *runp);
int __fastcall _VOP_BWRITE(struct buf *bp);
int __fastcall _VOP_CACHEDLOOKUP(struct vnode *dvp, struct vnode **vpp, struct componentname *cnp);
int __fastcall _VOP_CLOSE(struct vnode *vp, int fflag, struct ucred *cred, struct proc *p);
int __fastcall _VOP_CMAP(struct vnode *vp, off_t foffset, size_t size, daddr_t *bpn, size_t *run, void *poff);
int __fastcall _VOP_COPYFILE(struct vnode *fvp, struct vnode *tdvp, struct vnode *tvp, struct componentname *tcnp, int mode, int flags);
int __fastcall _VOP_CREATE(struct vnode *dvp, struct vnode **vpp, struct componentname *cnp, struct vattr *vap);
int __fastcall _VOP_DEVBLOCKSIZE(struct vnode *vp, register_t *retval);
int __fastcall _VOP_EXCHANGE(struct vnode *fvp, struct vnode *tvp, struct ucred *cred, struct proc *p);
int __fastcall _VOP_FSYNC(struct vnode *vp, struct ucred *cred, int waitfor, struct proc *p);
int __fastcall _VOP_GETATTR(struct vnode *vp, struct vattr *vap, struct ucred *cred, struct proc *p);
int __fastcall _VOP_GETATTRLIST(struct vnode *vp, struct attrlist *alist, struct uio *uio, struct ucred *cred, struct proc *p);
int __fastcall _VOP_INACTIVE(struct vnode *vp, struct proc *p);
int __fastcall _VOP_IOCTL(struct vnode *vp, u_long command, caddr_t data, int fflag, struct ucred *cred, struct proc *p);
int __fastcall _VOP_ISLOCKED(struct vnode *vp);
int __fastcall _VOP_LEASE(struct vnode *vp, struct proc *p, struct ucred *cred, int flag);
int __fastcall _VOP_LINK(struct vnode *vp, struct vnode *tdvp, struct componentname *cnp);
int __fastcall _VOP_LOCK(struct vnode *vp, int flags, struct proc *p);
int __fastcall _VOP_LOOKUP(struct vnode *dvp, struct vnode **vpp, struct componentname *cnp);
int __fastcall _VOP_MKCOMPLEX(struct vnode *dvp, struct vnode **vpp, struct componentname *cnp, struct vattr *vap, u_long type);
int __fastcall _VOP_MKDIR(struct vnode *dvp, struct vnode **vpp, struct componentname *cnp, struct vattr *vap);
int __fastcall _VOP_MKNOD(struct vnode *dvp, struct vnode **vpp, struct componentname *cnp, struct vattr *vap);
int __fastcall _VOP_MMAP(struct vnode *vp, int fflags, struct ucred *cred, struct proc *p);
int __fastcall _VOP_OFFTOBLK(struct vnode *vp, off_t offset, daddr_t *lblkno);
int __fastcall _VOP_OPEN(struct vnode *vp, int mode, struct ucred *cred, struct proc *p);
int __fastcall _VOP_PAGEIN(struct vnode *vp, upl_t pl, vm_offset_t pl_offset, off_t f_offset, size_t size, struct ucred *cred, int flags);
int __fastcall _VOP_PAGEOUT(struct vnode *vp, upl_t pl, vm_offset_t pl_offset, off_t f_offset, size_t size, struct ucred *cred, int flags);
int __fastcall _VOP_PATHCONF(struct vnode *vp, int name, register_t *retval);
int __fastcall _VOP_PGRD(struct vnode *vp, struct uio *uio, struct ucred *cred);
int __fastcall _VOP_PGWR(struct vnode *vp, struct uio *uio, struct ucred *cred, vm_offset_t offset);
int __fastcall _VOP_PRINT(struct vnode *vp);
int __fastcall _VOP_READ(struct vnode *vp, struct uio *uio, int ioflag, struct ucred *cred);
int __fastcall _VOP_READDIR(struct vnode *vp, struct uio *uio, struct ucred *cred, int *eofflag, int *ncookies, u_long **cookies);
int __fastcall _VOP_READDIRATTR(struct vnode *vp, struct attrlist *alist, struct uio *uio, u_long maxcount, u_long options, u_long *newstate, int *eofflag, u_long *actualcount, u_long **cookies, struct ucred *cred);
int __fastcall _VOP_READLINK(struct vnode *vp, struct uio *uio, struct ucred *cred);
int __fastcall _VOP_REALLOCBLKS(struct vnode *vp, struct cluster_save *buflist);
int __fastcall _VOP_RECLAIM(struct vnode *vp, struct proc *p);
int __fastcall _VOP_REMOVE(struct vnode *dvp, struct vnode *vp, struct componentname *cnp);
int __fastcall _VOP_RENAME(struct vnode *fdvp, struct vnode *fvp, struct componentname *fcnp, struct vnode *tdvp, struct vnode *tvp, struct componentname *tcnp);
int __fastcall _VOP_REVOKE(struct vnode *vp, int flags);
int __fastcall _VOP_RMDIR(struct vnode *dvp, struct vnode *vp, struct componentname *cnp);
int __fastcall _VOP_SEARCHFS(struct vnode *vp, void *searchparams1, void *searchparams2, struct attrlist *searchattrs, u_long maxmatches, struct timeval *timelimit, struct attrlist *returnattrs, u_long *nummatches, u_long scriptcode, u_long options, struct uio *uio, struct searchstate *searchstate);
int __fastcall _VOP_SEEK(struct vnode *vp, off_t oldoff, off_t newoff, struct ucred *cred);
int __fastcall _VOP_SELECT(struct vnode *vp, int which, int fflags, struct ucred *cred, void *wql, struct proc *p);
int __fastcall _VOP_SETATTR(struct vnode *vp, struct vattr *vap, struct ucred *cred, struct proc *p);
int __fastcall _VOP_SETATTRLIST(struct vnode *vp, struct attrlist *alist, struct uio *uio, struct ucred *cred, struct proc *p);
int __fastcall _VOP_STRATEGY(struct buf *bp);
int __fastcall _VOP_SYMLINK(struct vnode *dvp, struct vnode **vpp, struct componentname *cnp, struct vattr *vap, char *target);
int __fastcall _VOP_TRUNCATE(struct vnode *vp, off_t length, int flags, struct ucred *cred, struct proc *p);
int __fastcall _VOP_UNLOCK(struct vnode *vp, int flags, struct proc *p);
int __fastcall _VOP_UPDATE(struct vnode *vp, struct timeval *access, struct timeval *modify, int waitfor);
int __fastcall _VOP_VALLOC(struct vnode *pvp, int mode, struct ucred *cred, struct vnode **vpp);
int __fastcall _VOP_VFREE(struct vnode *pvp, ino_t ino, int mode);
int __fastcall _VOP_WHITEOUT(struct vnode *dvp, struct componentname *cnp, int flags);
int __fastcall _VOP_WRITE(struct vnode *vp, struct uio *uio, int ioflag, struct ucred *cred);
unsigned int __fastcall ___runetype(int);
int __fastcall ___tolower(int);
int __fastcall ___toupper(int);
int __fastcall __dn_skipname(const u_char *, const u_char *);
int *__error(void);
void __fastcall __fp_nquery(const u_char *, int, FILE *);
void __fastcall __fp_query(const u_char *, FILE *);
void __fastcall __fp_resstat(struct __res_state *, FILE *);
int __fastcall __fpclassify(long double x);
int __fastcall __fpclassifyd(double x);
int __fastcall __fpclassifyf(float x);
char *__fastcall __hostalias(const char *);
double __inf(void);
float __inff(void);
int __fastcall __isctype(int c, unsigned int f);
int __fastcall __isfinite(long double x);
int __fastcall __isfinited(double x);
int __fastcall __isfinitef(float x);
int __fastcall __isinf(long double x);
int __fastcall __isinfd(double x);
int __fastcall __isinff(float x);
int __fastcall __isnan(long double x);
int __fastcall __isnand(double x);
int __fastcall __isnanf(float x);
int __fastcall __isnormal(long double x);
int __fastcall __isnormald(double x);
int __fastcall __isnormalf(float x);
int __fastcall __istype(int c, unsigned int f);
unsigned int __libpam_version;
int __fastcall __maskrune(int c, unsigned int f);
unsigned int __math_errhandling(void);
int __mb_cur_max;
float __nan(void);
DIR *__fastcall __opendir2(const char *, int);
const u_char *__fastcall __p_cdname(const u_char *, const u_char *, FILE *);
const u_char *__fastcall __p_cdnname(const u_char *, const u_char *, int, FILE *);
const char *__fastcall __p_class(int);
const u_char *__fastcall __p_fqname(const u_char *, const u_char *, FILE *);
const char *__fastcall __p_option(u_long option);
void __fastcall __p_query(const u_char *);
const u_char *__fastcall __p_rr(const u_char *, const u_char *, FILE *);
char *__fastcall __p_time(u_int32_t);
const char *__fastcall __p_type(int);
void __fastcall __putlong(u_int32_t, u_char *);
void __fastcall __putshort(u_int16_t, u_char *);
int __fastcall __res_isourserver(const struct sockaddr_in *);
int __fastcall __res_nameinquery(const char *, int, int, const u_char *, const u_char *);
int __fastcall __res_queriesmatch(const u_char *, const u_char *, const u_char *, const u_char *);
u_int16_t __res_randomid(void);
FILE __sF[];
int __fastcall __signbitd(double x);
int __fastcall __signbitf(float x);
int __fastcall __signbitl(long double x);
int __fastcall __sputc(int c, FILE *p);
int __fastcall __srget(FILE *);
int __fastcall __svfscanf(FILE *, const char *, char *);
int __fastcall __swbuf(int, FILE *);
int __fastcall __tolower(int c);
int __fastcall __toupper(int c);
enum auth_stat __fastcall _authenticate(struct svc_req *, struct rpc_msg *);
MACRO___bool __bool_true_false_are_defined;
MACRO___dontcare __dontcare__;
void __fastcall _exit(int);
enum fdversion _fdlib_version;
u_int32_t __fastcall _getlong(const u_char *);
u_int16_t __fastcall _getshort(const u_char *);
struct gmonparam _gmonparam;
void __fastcall _longjmp(jmp_buf, int val);
FIELD *_nc_Default_Field;
FORM *_nc_Default_Form;
const TERMTYPE *__fastcall _nc_fallback(const char *);
char *__fastcall _nc_first_name(const char *const);
int __fastcall _nc_get_tty_mode(struct termios *buf);
int __fastcall _nc_name_match(const char *const, const char *const, const char *const);
int __fastcall _nc_read_entry(const char *const, char *const, TERMTYPE *const);
int __fastcall _nc_read_file_entry(const char *const, TERMTYPE *);
int __fastcall _nc_read_termcap_entry(const char *const, TERMTYPE *const);
int __fastcall _nc_set_tty_mode(struct termios *buf);
char *_nc_tracebits(void);
void *__fastcall _ni_bind_2();
void *__fastcall _ni_bind_2_svc();
ni_children_res *__fastcall _ni_children_2();
ni_children_res *__fastcall _ni_children_2_svc();
void *__fastcall _ni_crashed_2();
void *__fastcall _ni_crashed_2_svc();
ni_create_res *__fastcall _ni_create_2();
ni_create_res *__fastcall _ni_create_2_svc();
ni_id_res *__fastcall _ni_createname_2();
ni_id_res *__fastcall _ni_createname_2_svc();
ni_id_res *__fastcall _ni_createprop_2();
ni_id_res *__fastcall _ni_createprop_2_svc();
ni_id_res *__fastcall _ni_destroy_2();
ni_id_res *__fastcall _ni_destroy_2_svc();
ni_id_res *__fastcall _ni_destroyname_2();
ni_id_res *__fastcall _ni_destroyname_2_svc();
ni_id_res *__fastcall _ni_destroyprop_2();
ni_id_res *__fastcall _ni_destroyprop_2_svc();
ni_list_res *__fastcall _ni_list_2();
ni_list_res *__fastcall _ni_list_2_svc();
ni_listall_res *__fastcall _ni_listall_2();
ni_listall_res *__fastcall _ni_listall_2_svc();
ni_namelist_res *__fastcall _ni_listprops_2();
ni_namelist_res *__fastcall _ni_listprops_2_svc();
ni_lookup_res *__fastcall _ni_lookup_2();
ni_lookup_res *__fastcall _ni_lookup_2_svc();
ni_proplist_res *__fastcall _ni_lookupread_2();
ni_proplist_res *__fastcall _ni_lookupread_2_svc();
ni_parent_res *__fastcall _ni_parent_2();
ni_parent_res *__fastcall _ni_parent_2_svc();
void *__fastcall _ni_ping_2();
void *__fastcall _ni_ping_2_svc();
ni_proplist_res *__fastcall _ni_read_2();
ni_proplist_res *__fastcall _ni_read_2_svc();
ni_readall_res *__fastcall _ni_readall_2();
ni_readall_res *__fastcall _ni_readall_2_svc();
ni_readname_res *__fastcall _ni_readname_2();
ni_readname_res *__fastcall _ni_readname_2_svc();
ni_namelist_res *__fastcall _ni_readprop_2();
ni_namelist_res *__fastcall _ni_readprop_2_svc();
ni_id_res *__fastcall _ni_renameprop_2();
ni_id_res *__fastcall _ni_renameprop_2_svc();
ni_status *__fastcall _ni_resync_2();
ni_status *__fastcall _ni_resync_2_svc();
ni_id_res *__fastcall _ni_root_2();
ni_id_res *__fastcall _ni_root_2_svc();
ni_rparent_res *__fastcall _ni_rparent_2();
ni_rparent_res *__fastcall _ni_rparent_2_svc();
ni_id_res *__fastcall _ni_self_2();
ni_id_res *__fastcall _ni_self_2_svc();
ni_proplist *__fastcall _ni_statistics_2();
ni_proplist *__fastcall _ni_statistics_2_svc();
ni_id_res *__fastcall _ni_write_2();
ni_id_res *__fastcall _ni_write_2_svc();
ni_id_res *__fastcall _ni_writename_2();
ni_id_res *__fastcall _ni_writename_2_svc();
ni_id_res *__fastcall _ni_writeprop_2();
ni_id_res *__fastcall _ni_writeprop_2_svc();
struct opaque_auth _null_auth;
struct __res_state _res;
void __fastcall _seterr_reply(struct rpc_msg *, struct rpc_err *);
int __fastcall _setjmp(jmp_buf env);
char *__fastcall _traceattr(attr_t);
char *__fastcall _traceattr2(int, chtype);
char *__fastcall _tracechar(int);
char *__fastcall _tracechtype(chtype);
char *__fastcall _tracechtype2(int, chtype);
void __fastcall _tracedump(const char *, WINDOW *);
void _tracef(const char *, ...);
char *__fastcall _tracemouse(const MEVENT *);
int __fastcall _yp_dobind(const char *, struct dom_binding **);
int __fastcall a64l(const char *);
void abort(void);
int __fastcall abs(int);
int __fastcall accept(int, struct sockaddr *, int *);
int __fastcall access(const char *, int);
int __fastcall acct(const char *);
double __fastcall acos(double x);
double __fastcall acosh(double x);
chtype acs_map[];
kern_return_t __fastcall act_get_state(thread_act_t target_act, int flavor, thread_state_t old_state, mach_msg_type_number_t *old_stateCnt);
kern_return_t __fastcall act_set_state(thread_act_t target_act, int flavor, thread_state_t new_state, mach_msg_type_number_t new_stateCnt);
errcode_t __fastcall add_error_table(const struct error_table *et);
int __fastcall addch(const chtype);
int __fastcall addchnstr(const chtype *, int);
int __fastcall addchstr(const chtype *);
int __fastcall addnstr(const char *, int);
unsigned int __fastcall address_range();
unsigned int __fastcall address_range_match();
int __fastcall addstr(const char *);
int __fastcall adjtime(const struct timeval *, struct timeval *);
int __fastcall advisory_read(struct vnode *, off_t, off_t, int, int);
void __fastcall afs_string_to_key(char *str, char *cell, des_cblock key);
unsigned int __fastcall alarm(unsigned int);
void *__fastcall alloca(size_t);
int allow_severity;
int __fastcall alphasort(const void *, const void *);
const adb_key_t apple_keys[128];
u_int32_t arc4random(void);
void __fastcall arc4random_addrandom(unsigned __int8 *dat, int datlen);
void arc4random_stir(void);
char *__fastcall asctime(const struct tm *);
char *__fastcall asctime_r(const struct tm *, char *);
double __fastcall asin(double x);
double __fastcall asinh(double x);
int asprintf(char **, const char *, ...);
int __fastcall assume_default_colors(int, int);
int async_daemon(void);
char at_pap_status[];
double __fastcall atan(double x);
double __fastcall atan2(double y, double x);
double __fastcall atanh(double x);
int __fastcall atexit(void (*)(void));
double __fastcall atof(const char *);
int __fastcall atoi(const char *);
int __fastcall atol(const char *);
int __fastcall attr_get(attr_t *, __int16 *, void *);
int __fastcall attr_off(attr_t, void *);
int __fastcall attr_on(attr_t, void *);
int __fastcall attr_set(attr_t, __int16, void *);
int __fastcall attroff(int);
int __fastcall attron(int);
int __fastcall attrset(int);
AUTH *__fastcall authdes_create(char *, u_int, struct sockaddr_in *, des_block *);
AUTH *authnone_create(void);
char *authtype_names[];
AUTH *__fastcall authunix_create(char *, int, int, int, int *);
AUTH *authunix_create_default(void);
char *__fastcall basename(const char *);
int baudrate(void);
int __fastcall bcmp(const void *, const void *, size_t);
void __fastcall bcopy(const void *, void *, size_t);
int beep(void);
BerElement *ber_alloc(void);
BerElement *__fastcall ber_alloc_t(int beroptions);
void __fastcall ber_bprint(const char *data, ber_len_t len);
int __fastcall ber_bvarray_add(BerVarray *p, BerValue *bv);
void __fastcall ber_bvarray_free(BerVarray p);
struct berval *__fastcall ber_bvdup(struct berval *src);
int __fastcall ber_bvecadd(struct berval ***bvec, struct berval *bv);
void __fastcall ber_bvecfree(struct berval **bv);
void __fastcall ber_bvfree(struct berval *bv);
void __fastcall ber_dump(BerElement *ber, int inout);
BerElement *__fastcall ber_dup(BerElement *ber);
struct berval *__fastcall ber_dupbv(struct berval *dst, struct berval *src);
int *ber_errno_addr(void);
void __fastcall ber_error_print(const char *data);
ber_tag_t __fastcall ber_first_element(BerElement *ber, ber_len_t *len, char **last);
int __fastcall ber_flatten(BerElement *ber, struct berval **bvPtr);
int __fastcall ber_flush(Sockbuf *sb, BerElement *ber, int freeit);
void __fastcall ber_free(BerElement *ber, int freebuf);
void __fastcall ber_free_buf(BerElement *ber);
ber_tag_t __fastcall ber_get_bitstringa(BerElement *ber, char **buf, ber_len_t *len);
ber_tag_t __fastcall ber_get_boolean(BerElement *ber, ber_int_t *boolval);
ber_tag_t __fastcall ber_get_enum(BerElement *ber, ber_int_t *num);
ber_tag_t __fastcall ber_get_int(BerElement *ber, ber_int_t *num);
ber_tag_t __fastcall ber_get_next(Sockbuf *sb, ber_len_t *len, BerElement *ber);
ber_tag_t __fastcall ber_get_null(BerElement *ber);
int __fastcall ber_get_option(void *item, int option, void *outvalue);
ber_tag_t __fastcall ber_get_stringa(BerElement *ber, char **buf);
ber_tag_t __fastcall ber_get_stringal(BerElement *ber, struct berval **bv);
ber_tag_t __fastcall ber_get_stringb(BerElement *ber, char *buf, ber_len_t *len);
ber_tag_t __fastcall ber_get_stringbv(BerElement *ber, struct berval *bv, int alloc);
ber_tag_t __fastcall ber_get_tag(BerElement *ber);
BerElement *__fastcall ber_init(struct berval *bv);
void __fastcall ber_init2(BerElement *ber, struct berval *bv, int options);
void __fastcall ber_init_w_nullc(BerElement *ber, int options);
struct berval *__fastcall ber_mem2bv(const char *, ber_len_t len, int dup, struct berval *bv);
void *__fastcall ber_memalloc(ber_len_t s);
void *__fastcall ber_memcalloc(ber_len_t n, ber_len_t s);
void __fastcall ber_memfree(void *p);
void *__fastcall ber_memrealloc(void *p, ber_len_t s);
void __fastcall ber_memvfree(void **vector);
ber_tag_t __fastcall ber_next_element(BerElement *ber, ber_len_t *len, const char *last);
ber_tag_t __fastcall ber_peek_tag(BerElement *ber, ber_len_t *len);
int ber_printf(BerElement *ber, const char *fmt, ...);
int __fastcall ber_put_berval(BerElement *ber, struct berval *bv, ber_tag_t tag);
int __fastcall ber_put_bitstring(BerElement *ber, const char *str, ber_len_t bitlen, ber_tag_t tag);
int __fastcall ber_put_boolean(BerElement *ber, ber_int_t boolval, ber_tag_t tag);
int __fastcall ber_put_enum(BerElement *ber, ber_int_t num, ber_tag_t tag);
int __fastcall ber_put_int(BerElement *ber, ber_int_t num, ber_tag_t tag);
int __fastcall ber_put_null(BerElement *ber, ber_tag_t tag);
int __fastcall ber_put_ostring(BerElement *ber, const char *str, ber_len_t len, ber_tag_t tag);
int __fastcall ber_put_seq(BerElement *ber);
int __fastcall ber_put_set(BerElement *ber);
int __fastcall ber_put_string(BerElement *ber, const char *str, ber_tag_t tag);
ber_slen_t __fastcall ber_read(BerElement *ber, char *buf, ber_len_t len);
void __fastcall ber_reset(BerElement *ber, int was_writing);
ber_tag_t ber_scanf(BerElement *ber, const char *fmt, ...);
int __fastcall ber_set_option(void *item, int option, const void *invalue);
ber_tag_t __fastcall ber_skip_tag(BerElement *ber, ber_len_t *len);
int __fastcall ber_sockbuf_add_io(Sockbuf *sb, Sockbuf_IO *sbio, int layer, void *arg);
Sockbuf *ber_sockbuf_alloc(void);
int __fastcall ber_sockbuf_ctrl(Sockbuf *sb, int opt, void *arg);
void __fastcall ber_sockbuf_free(Sockbuf *sb);
Sockbuf_IO ber_sockbuf_io_debug;
Sockbuf_IO ber_sockbuf_io_fd;
Sockbuf_IO ber_sockbuf_io_readahead;
Sockbuf_IO ber_sockbuf_io_tcp;
int __fastcall ber_sockbuf_remove_io(Sockbuf *sb, Sockbuf_IO *sbio, int layer);
void __fastcall ber_sos_dump(Seqorset *sos);
int __fastcall ber_start_seq(BerElement *ber, ber_tag_t tag);
int __fastcall ber_start_set(BerElement *ber, ber_tag_t tag);
struct berval *__fastcall ber_str2bv(const char *, ber_len_t len, int dup, struct berval *bv);
char *__fastcall ber_strdup(const char *);
ber_slen_t __fastcall ber_write(BerElement *ber, const char *buf, ber_len_t len, int nosos);
int __fastcall bind(int, const struct sockaddr *, int);
int __fastcall bkgd(chtype);
void __fastcall bkgdset(chtype);
char *const boolcodes[];
char *const boolfnames[];
char *const boolnames[];
bp_getfile_res *__fastcall bootparamproc_getfile_1();
bp_getfile_res *__fastcall bootparamproc_getfile_1_svc();
bp_whoami_res *__fastcall bootparamproc_whoami_1();
bp_whoami_res *__fastcall bootparamproc_whoami_1_svc();
kern_return_t __fastcall bootstrap_check_in(mach_port_t bootstrap_port, name_t service_name, mach_port_t *service_port);
kern_return_t __fastcall bootstrap_create_server(mach_port_t bootstrap_port, cmd_t server_cmd, integer_t server_uid, boolean_t on_demand, mach_port_t *server_port);
kern_return_t __fastcall bootstrap_create_service(mach_port_t bootstrap_port, name_t service_name, mach_port_t *service_port);
kern_return_t __fastcall bootstrap_info(mach_port_t bootstrap_port, name_array_t *service_names, mach_msg_type_number_t *service_namesCnt, name_array_t *server_names, mach_msg_type_number_t *server_namesCnt, bootstrap_status_array_t *service_active, mach_msg_type_number_t *service_activeCnt);
kern_return_t __fastcall bootstrap_look_up(mach_port_t bootstrap_port, name_t service_name, mach_port_t *service_port);
kern_return_t __fastcall bootstrap_look_up_array(mach_port_t bootstrap_port, name_array_t service_names, mach_msg_type_number_t service_namesCnt, mach_port_array_t *service_ports, mach_msg_type_number_t *service_portsCnt, boolean_t *all_services_known);
kern_return_t __fastcall bootstrap_parent(mach_port_t bootstrap_port, mach_port_t *parent_port);
mach_port_t bootstrap_port;
kern_return_t __fastcall bootstrap_register(mach_port_t bootstrap_port, name_t service_name, mach_port_t service_port);
kern_return_t __fastcall bootstrap_status(mach_port_t bootstrap_port, name_t service_name, bootstrap_status_t *service_active);
kern_return_t __fastcall bootstrap_subset(mach_port_t bootstrap_port, mach_port_t requestor_port, mach_port_t *subset_port);
kern_return_t __fastcall bootstrap_unprivileged(mach_port_t bootstrap_port, mach_port_t *unpriv_port);
int __fastcall border(chtype, chtype, chtype, chtype, chtype, chtype, chtype, chtype);
int __fastcall bottom_panel(PANEL *);
int __fastcall box(WINDOW *, chtype, chtype);
void __fastcall bpf_dump(struct bpf_program *, int);
u_int __fastcall bpf_filter(struct bpf_insn *, u_char *, u_int, u_int);
char *__fastcall bpf_image(struct bpf_insn *, int);
int __fastcall bpf_validate(struct bpf_insn *f, int len);
char *__fastcall brk(const char *);
void *__fastcall bsearch(const void *, const void *, size_t, size_t, int (__fastcall *)(const void *, const void *));
void __fastcall bzero(void *, size_t);
double __fastcall cabs(_complex z);
void __fastcall cache_purge(struct vnode *vp);
void *__fastcall calloc(size_t, size_t);
NCURSES_BOOL can_change_color(void);
int cbreak(void);
double __fastcall cbrt(double x);
double __fastcall ceil(double x);
float __fastcall ceilf(float x);
speed_t __fastcall cfgetispeed(const struct termios *);
speed_t __fastcall cfgetospeed(const struct termios *);
void __fastcall cfmakeraw(struct termios *);
int __fastcall cfsetispeed(struct termios *, speed_t);
int __fastcall cfsetospeed(struct termios *, speed_t);
int __fastcall cfsetspeed(struct termios *, speed_t);
char *__fastcall cgetcap(char *, char *, int);
int cgetclose(void);
int __fastcall cgetent(char **, char **, char *);
int __fastcall cgetfirst(char **, char **);
int __fastcall cgetmatch(char *, char *);
int __fastcall cgetnext(char **, char **);
int __fastcall cgetnum(char *, char *, int *);
int __fastcall cgetset(char *);
int __fastcall cgetstr(char *, char *, char **);
int __fastcall cgetustr(char *, char *, char **);
int __fastcall chdir(const char *);
int __fastcall checkuseraccess(const char *, uid_t, gid_t *, int, int, unsigned int);
int __fastcall chflags(const char *, u_long);
int __fastcall chgat(int, attr_t, __int16, const void *);
int __fastcall chmod(const char *, mode_t);
int __fastcall chown(const char *, uid_t, gid_t);
int __fastcall chroot(const char *);
void __fastcall clean_exit();
int clear(void);
void __fastcall clearerr(FILE *);
int __fastcall clearok(WINDOW *, NCURSES_BOOL);
enum clnt_stat __fastcall clnt_broadcast(u_long, u_long, u_long, xdrproc_t, char *, xdrproc_t, char *, int (__fastcall *)());
CLIENT *__fastcall clnt_create(char *, u_long, u_long, char *);
void __fastcall clnt_pcreateerror(char *);
void __fastcall clnt_perrno(enum clnt_stat);
void __fastcall clnt_perror(CLIENT *, char *);
char *__fastcall clnt_spcreateerror(char *);
char *__fastcall clnt_sperrno(enum clnt_stat);
char *__fastcall clnt_sperror(CLIENT *, char *);
CLIENT *__fastcall clntraw_create(u_long, u_long);
CLIENT *__fastcall clnttcp_create(struct sockaddr_in *, u_long, u_long, int *, u_int, u_int);
CLIENT *__fastcall clntudp_bufcreate(struct sockaddr_in *, u_long, u_long, struct timeval, int *, u_int, u_int);
CLIENT *__fastcall clntudp_create(struct sockaddr_in *, u_long, u_long, struct timeval, int *);
clock_t clock(void);
kern_return_t __fastcall clock_alarm(clock_serv_t clock_serv, alarm_type_t alarm_type, mach_timespec_t alarm_time, clock_reply_t alarm_port);
kern_return_t __fastcall clock_alarm_reply(clock_reply_t alarm_port, mach_msg_type_name_t alarm_portPoly, kern_return_t alarm_code, alarm_type_t alarm_type, mach_timespec_t alarm_time);
kern_return_t __fastcall clock_get_attributes(clock_serv_t clock_serv, clock_flavor_t flavor, clock_attr_t clock_attr, mach_msg_type_number_t *clock_attrCnt);
kern_return_t __fastcall clock_get_time(clock_serv_t clock_serv, mach_timespec_t *cur_time);
kern_return_t __fastcall clock_set_attributes(clock_ctrl_t clock_ctrl, clock_flavor_t flavor, clock_attr_t clock_attr, mach_msg_type_number_t clock_attrCnt);
kern_return_t __fastcall clock_set_time(clock_ctrl_t clock_ctrl, mach_timespec_t new_time);
kern_return_t __fastcall clock_sleep_trap(mach_port_name_t clock_name, sleep_type_t sleep_type, int sleep_sec, int sleep_nsec, mach_timespec_t *wakeup_time);
int __fastcall close(int);
int __fastcall closedir(DIR *);
void closelog(void);
int clrtobot(void);
int clrtoeol(void);
int __fastcall cluster_bp(struct buf *);
int __fastcall cluster_pagein(struct vnode *, upl_t, vm_offset_t, off_t, int, off_t, int, int);
int __fastcall cluster_pageout(struct vnode *, upl_t, vm_offset_t, off_t, int, off_t, int, int);
int __fastcall cluster_push(struct vnode *);
int __fastcall cluster_read(struct vnode *, struct uio *, off_t, int, int);
int __fastcall cluster_write(struct vnode *, struct uio *, off_t, off_t, off_t, off_t, int, int);
int __fastcall color_content(__int16, __int16 *, __int16 *, __int16 *);
int __fastcall color_set(__int16, void *);
void com_err(const char *progname, errcode_t code, const char *format, ...);
void __fastcall com_err_va(const char *progname, errcode_t code, const char *format, va_list args);
size_t __fastcall confstr(int, char *, size_t);
int __fastcall connect(int, const struct sockaddr *, int);
double __fastcall copysign(double x, double y);
float __fastcall copysignf(float x, float y);
int __fastcall copywin(const WINDOW *, WINDOW *, int, int, int, int, int, int, int);
double __fastcall cos(double x);
double __fastcall cosh(double x);
int __fastcall creat(const char *, mode_t);
char *__fastcall crypt(const char *, const char *);
char *__fastcall ctermid(char *);
char *__fastcall ctime(const time_t *);
char *__fastcall ctime_r(const time_t *, char *);
TERMINAL *cur_term;
void __fastcall curl_easy_cleanup(CURL *curl);
CURLcode curl_easy_getinfo(CURL *curl, CURLINFO info, ...);
CURL *curl_easy_init(void);
CURLcode __fastcall curl_easy_perform(CURL *curl);
CURLcode curl_easy_setopt(CURL *curl, CURLoption option, ...);
char *__fastcall curl_escape(char *string, int length);
void __fastcall curl_formfree(struct HttpPost *form);
int __fastcall curl_formparse(char *string, struct HttpPost **httppost, struct HttpPost **last_post);
time_t __fastcall curl_getdate(const char *p, const time_t *now);
char *__fastcall curl_getenv(char *variable);
char *curl_maprintf(const char *format, ...);
int curl_mfprintf(FILE *fd, const char *format, ...);
int curl_mprintf(const char *format, ...);
int curl_msnprintf(char *buffer, size_t maxlength, const char *format, ...);
int curl_msprintf(char *buffer, const char *format, ...);
char *__fastcall curl_mvaprintf(const char *format, va_list args);
int __fastcall curl_mvfprintf(FILE *fd, const char *format, va_list args);
int __fastcall curl_mvprintf(const char *format, va_list args);
int __fastcall curl_mvsnprintf(char *buffer, size_t maxlength, const char *format, va_list args);
int __fastcall curl_mvsprintf(char *buffer, const char *format, va_list args);
struct curl_slist *__fastcall curl_slist_append(struct curl_slist *, const char *);
void __fastcall curl_slist_free_all(struct curl_slist *);
int __fastcall curl_strequal(const char *s1, const char *s2);
int __fastcall curl_strnequal(const char *s1, const char *s2, size_t n);
char *__fastcall curl_unescape(char *string, int length);
char *curl_version(void);
FIELD *__fastcall current_field(const FORM *);
ITEM *__fastcall current_item(const MENU *);
int __fastcall curs_set(int);
WINDOW *curscr;
const char *curses_version(void);
int __fastcall daemon(int, int);
NCURSES_BOOL __fastcall data_ahead(const FORM *);
NCURSES_BOOL __fastcall data_behind(const FORM *);
dbgBits_t dbgBits;
void __fastcall dbm_close(DBM *);
int __fastcall dbm_delete(DBM *, datum);
int __fastcall dbm_dirfno(DBM *);
datum __fastcall dbm_fetch(DBM *, datum);
datum __fastcall dbm_firstkey(DBM *);
int __fastcall dbm_forder(DBM *, datum);
datum __fastcall dbm_nextkey(DBM *);
DBM *__fastcall dbm_open(const char *, int, int);
int __fastcall dbm_store(DBM *, datum, datum, int);
DB *__fastcall dbopen(const char *, int, int, DBTYPE, const void *);
int __fastcall decomp_ticket(KTEXT, unsigned __int8 *, char *, char *, char *, u_int32_t *, des_cblock, int *, u_int32_t *, char *, char *, des_cblock, des_key_schedule);
int def_prog_mode(void);
int def_shell_mode(void);
int __fastcall define_key(char *, int);
int __fastcall del_curterm(TERMINAL *);
int __fastcall del_panel(PANEL *);
int __fastcall delay_output(int);
int delch(void);
int deleteln(void);
void __fastcall delscreen(SCREEN *);
int __fastcall delwin(WINDOW *);
int deny_severity;
BerElement *der_alloc(void);
WINDOW *__fastcall derwin(WINDOW *, int, int, int, int);
void __fastcall des_3cbc_encrypt(des_cblock *in, des_cblock *out, int length, des_key_schedule ks1, des_key_schedule ks2, des_key_schedule ks3, des_cblock *ivec, int encrypt);
void __fastcall des_3ecb_encrypt(des_cblock *in, des_cblock *out, des_key_schedule ks1, des_key_schedule ks2, des_key_schedule ks3, int encrypt);
unsigned int __fastcall des_cbc_cksum(des_cblock *in, des_cblock *out, int length, des_key_schedule schedule, des_cblock *ivec);
int __fastcall des_cbc_encrypt(des_cblock *in, des_cblock *out, int length, des_key_schedule schedule, des_cblock *ivec, int encrypt);
void __fastcall des_cblock_print_file(des_cblock *x, FILE *fp);
int __fastcall des_check_key_parity(des_cblock key);
int __fastcall des_cipher(const char *, char *, int, int);
char *__fastcall des_crypt(const char *buf, const char *salt);
int __fastcall des_ecb_encrypt(des_cblock *in, des_cblock *out, des_key_schedule schedule, int encrypt);
char *__fastcall des_fcrypt(const char *buf, const char *salt, char *ret);
void __fastcall des_fixup_key_parity(des_cblock key);
void __fastcall des_generate_random_block(des_cblock block);
void __fastcall des_init_random_number_generator(des_cblock key);
int __fastcall des_is_weak_key(des_cblock key);
int __fastcall des_key_sched(des_cblock k, des_key_schedule schedule);
int __fastcall des_new_random_key(des_cblock key);
int __fastcall des_pcbc_encrypt(des_cblock *in, des_cblock *out, int length, des_key_schedule schedule, des_cblock *ivec, int encrypt);
unsigned int __fastcall des_quad_cksum(unsigned __int8 *in, u_int32_t *out, int length, int out_count, des_cblock *c_seed);
int __fastcall des_random_key(des_cblock *key);
int __fastcall des_read_password(des_cblock *k, char *prompt, int verify);
int __fastcall des_read_pw_string(char *s, int max, char *prompt, int verify);
int __fastcall des_set_key(des_cblock *key, des_key_schedule schedule);
void __fastcall des_set_random_generator_seed(des_cblock key);
void __fastcall des_set_sequence_number(des_cblock new_sequence_number);
int __fastcall des_setkey(const char *key);
int __fastcall des_string_to_key(char *str, des_cblock key);
int dest_all_tkts(void);
int dest_tkt(void);
int __fastcall dev_add_entry(char *name, devnode_t *parent, int type, devnode_type_t *typeinfo, devnode_t *proto, struct devfsmount *dvm, devdirent_t **nm_pp);
int __fastcall dev_add_name(char *name, devnode_t *dirnode, devdirent_t *back, devnode_t *dnp, devdirent_t **dirent_pp);
int __fastcall dev_add_node(int entrytype, devnode_type_t *typeinfo, devnode_t *proto, devnode_t **dn_pp, struct devfsmount *dvm);
int __fastcall dev_dup_entry(devnode_t *parent, devdirent_t *back, devdirent_t **dnm_pp, struct devfsmount *dvm);
int __fastcall dev_dup_plane(struct devfsmount *devfs_mp_p);
devdirent_t *__fastcall dev_findname(devnode_t *dir, char *name);
void __fastcall dev_free_hier(devdirent_t *dirent_p);
int __fastcall dev_free_name(devdirent_t *dirent_p);
devdirent_t *dev_root;
void __fastcall devfs_dn_free(devnode_t *dnp);
int __fastcall devfs_dntovn(devnode_t *dnp, struct vnode **vn_pp, struct proc *p);
void __fastcall devfs_free_plane(struct devfsmount *devfs_mp_p);
int devfs_link(void *handle, char *fmt, ...);
struct lock__bsd__ devfs_lock;
void *devfs_make_node(dev_t dev, int chrblk, uid_t uid, gid_t gid, int perms, char *fmt, ...);
int __fastcall devfs_mount(struct mount *mp, char *path, caddr_t data, struct nameidata *ndp, struct proc *p);
int __fastcall devfs_propogate(devdirent_t *parent, devdirent_t *child);
void __fastcall devfs_remove(void *handle);
int devfs_sinit(void);
int (__fastcall **devfs_spec_vnodeop_p)(void *);
struct devfs_stats devfs_stats;
struct vfsops devfs_vfsops;
int (__fastcall **devfs_vnodeop_p)(void *);
char *__fastcall devname(int, int);
void __fastcall devnode_free(devnode_t *dnp);
double __fastcall difftime(time_t, time_t);
int __fastcall digittoint(int);
char *__fastcall dirname(const char *);
kern_return_t __fastcall disable_bluebox(host_t host);
div_t __fastcall div(int, int);
int __fastcall dlil_attach_interface_filter(struct ifnet *ifnet_ptr, struct dlil_if_flt_str *interface_filter, u_long *filter_id, int insertion_point);
int __fastcall dlil_attach_protocol(struct dlil_proto_reg_str *proto, u_long *dl_tag);
int __fastcall dlil_attach_protocol_filter(u_long dl_tag, struct dlil_pr_flt_str *proto_filter, u_long *filter_id, int insertion_point);
int __fastcall dlil_dereg_if_modules(u_long interface_family);
int __fastcall dlil_detach_filter(u_long filter_id);
int __fastcall dlil_detach_protocol(u_long dl_tag);
int __fastcall dlil_event(struct ifnet *ifp, struct kern_event_msg *event);
int __fastcall dlil_find_dltag(u_long if_family, __int16 unit, u_long proto_family, u_long *dl_tag);
int __fastcall dlil_if_acquire(u_long family, void *uniqueid, size_t uniqueid_len, struct ifnet **ifp);
int __fastcall dlil_if_attach(struct ifnet *ifp);
int __fastcall dlil_if_detach(struct ifnet *ifp);
void __fastcall dlil_if_release(struct ifnet *ifp);
int __fastcall dlil_inject_if_input(struct mbuf *m, char *frame_header, u_long from_id);
int __fastcall dlil_inject_if_output(struct mbuf *m, u_long from_id);
int __fastcall dlil_inject_pr_input(struct mbuf *m, char *frame_header, u_long from_id);
int __fastcall dlil_inject_pr_output(struct mbuf *m, struct sockaddr *dest, int raw, char *frame_type, char *dst_linkaddr, u_long from_id);
int __fastcall dlil_input(struct ifnet *ifp, struct mbuf *m_head, struct mbuf *m_tail);
int __fastcall dlil_ioctl(u_long proto_family, struct ifnet *ifp, u_long ioctl_code, caddr_t ioctl_arg);
int __fastcall dlil_output(u_long dl_tag, struct mbuf *m, caddr_t route, struct sockaddr *dest, int raw);
int __fastcall dlil_reg_if_modules(u_long interface_family, struct dlil_ifmod_reg_str *ifmod_reg);
int __fastcall dn_comp(const char *, u_char *, int, u_char **, u_char **);
void __fastcall dn_copy_times(devnode_t *target, devnode_t *source);
int __fastcall dn_expand(const u_char *, const u_char *, const u_char *, char *, int);
void __fastcall dn_times(devnode_t *dnp, struct timeval t1, struct timeval t2);
unsigned int __fastcall dot_quad_addr();
int doupdate(void);
int __fastcall dqhashshift(u_long);
double drand48(void);
double __fastcall drem(double x, double y);
int dry_run;
int __fastcall dup(int);
int __fastcall dup2(int, int);
FIELD *__fastcall dup_field(FIELD *, int, int);
WINDOW *__fastcall dupwin(WINDOW *);
int __fastcall dynamic_field_info(const FIELD *, int *, int *, int *);
int echo(void);
int __fastcall echochar(const chtype);
void __fastcall el_beep(EditLine *);
void __fastcall el_deletestr(EditLine *, int);
void __fastcall el_end(EditLine *);
int __fastcall el_get(EditLine *, int, void *);
int __fastcall el_getc(EditLine *, char *);
const char *__fastcall el_gets(EditLine *, int *);
EditLine *__fastcall el_init(const char *, FILE *, FILE *, FILE *);
int __fastcall el_insertstr(EditLine *, const char *);
const LineInfo *__fastcall el_line(EditLine *);
int __fastcall el_parse(EditLine *, int, const char **);
void __fastcall el_push(EditLine *, char *);
void __fastcall el_reset(EditLine *);
void __fastcall el_resize(EditLine *);
int el_set(EditLine *, int, ...);
int __fastcall el_source(EditLine *, const char *);
kern_return_t __fastcall enable_bluebox(host_t host, unsigned int taskID, unsigned int TWI_TableStart, unsigned int Desc_TableStart);
int __fastcall encrypt(char *, int);
char *encrypt_names[];
char *enctype_names[];
void endfsent(void);
void endgrent(void);
void endhostent(void);
void endnetent(void);
void endprotoent(void);
void endpwent(void);
void endrpcent(void);
void endservent(void);
int endttyent(void);
void endusershell(void);
int endwin(void);
int __fastcall enodev();
void __fastcall enodev_strat();
mach_port_t environment_port;
double __fastcall erand48(unsigned __int16[3]);
int erase(void);
char erasechar(void);
double __fastcall erf(double x);
double __fastcall erfc(double x);
void err(int, const char *, ...);
const char *__fastcall error_message(errcode_t code);
void errx(int, const char *, ...);
kern_return_t __fastcall etap_trace_thread(thread_act_t target_act, boolean_t trace_status);
int __fastcall ether_hostton(char *, struct ether_addr *);
int __fastcall ether_line(char *, struct ether_addr *, char *);
char *__fastcall ether_ntoa(struct ether_addr *);
int __fastcall ether_ntohost(char *, struct ether_addr *);
char *__fastcall eval_client();
char *__fastcall eval_hostaddr();
char *__fastcall eval_hostinfo();
char *__fastcall eval_hostname();
char *__fastcall eval_server();
char *__fastcall eval_user();
int __fastcall exchangedata(const char *, const char *, unsigned int);
int execl(const char *, const char *, ...);
int execle(const char *, const char *, ...);
int execlp(const char *, const char *, ...);
int __fastcall exect(const char *, char *const *, char *const *);
int __fastcall execv(const char *, char *const *);
int __fastcall execve(const char *, char *const *, char *const *);
int __fastcall execvp(const char *, char *const *);
void __fastcall exit(int);
double __fastcall exp(double x);
double __fastcall exp2(double x);
double __fastcall expm1(double x);
const adb_kb_map_t extend_adb_kb_map;
double __fastcall fabs(double x);
float __fastcall fabsf(float x);
int __fastcall fchdir(int);
int __fastcall fchflags(int, u_long);
int __fastcall fchmod(int, mode_t);
int __fastcall fchown(int, int, int);
int __fastcall fclose(FILE *);
int fcntl(int, int, ...);
double __fastcall fdim(double x, double y);
float __fastcall fdimf(float x, float y);
FILE *__fastcall fdopen(int, const char *);
void __fastcall feclearexcept(int excepts);
void __fastcall fegetenv(fenv_t *envp);
void __fastcall fegetexceptflag(fexcept_t *flagp, int excepts);
int fegetround(void);
int __fastcall feholdexcept(fenv_t *envp);
int __fastcall feof(FILE *);
void __fastcall feraiseexcept(int excepts);
int __fastcall ferror(FILE *);
void __fastcall fesetenv(const fenv_t *envp);
void __fastcall fesetexceptflag(const fexcept_t *flagp, int excepts);
int __fastcall fesetround(int round);
int __fastcall fetestexcept(int excepts);
void __fastcall feupdateenv(const fenv_t *envp);
char *__fastcall fflagstostr(u_long);
int __fastcall fflush(FILE *);
int __fastcall ffs(int);
int __fastcall fgetc(FILE *);
char *__fastcall fgetln(FILE *, size_t *);
int __fastcall fgetpos(FILE *, fpos_t *);
int __fastcall fgetrune(FILE *);
char *__fastcall fgets(char *, int, FILE *);
void *__fastcall field_arg(const FIELD *);
chtype __fastcall field_back(const FIELD *);
char *__fastcall field_buffer(const FIELD *, int);
int __fastcall field_count(const FORM *);
chtype __fastcall field_fore(const FIELD *);
int __fastcall field_index(const FIELD *);
int __fastcall field_info(const FIELD *, int *, int *, int *, int *, int *, int *);
Form_Hook __fastcall field_init(const FORM *);
int __fastcall field_just(const FIELD *);
Field_Options __fastcall field_opts(const FIELD *);
int __fastcall field_opts_off(FIELD *, Field_Options);
int __fastcall field_opts_on(FIELD *, Field_Options);
int __fastcall field_pad(const FIELD *);
NCURSES_BOOL __fastcall field_status(const FIELD *);
Form_Hook __fastcall field_term(const FORM *);
FIELDTYPE *__fastcall field_type(const FIELD *);
void *__fastcall field_userptr(const FIELD *);
int __fastcall fileno(FILE *);
void filter(void);
int __fastcall finite(double x);
int flash(void);
int __fastcall flock(int, int);
double __fastcall floor(double x);
float __fastcall floorf(float x);
int flushinp(void);
double __fastcall fma(double x, double y, double z);
float __fastcall fmaf(float x, float y, float z);
double __fastcall fmax(double x, double y);
float __fastcall fmaxf(float x, float y);
double __fastcall fmin(double x, double y);
float __fastcall fminf(float x, float y);
double __fastcall fmod(double x, double y);
float __fastcall fmodf(float x, float y);
int __fastcall fnmatch(const char *, const char *, int);
FILE *__fastcall fopen(const char *, const char *);
pid_t fork(void);
pid_t __fastcall forkpty(int *, char *, struct termios *, struct winsize *);
int __fastcall form_driver(FORM *, int);
FIELD **__fastcall form_fields(const FORM *);
Form_Hook __fastcall form_init(const FORM *);
Form_Options __fastcall form_opts(const FORM *);
int __fastcall form_opts_off(FORM *, Form_Options);
int __fastcall form_opts_on(FORM *, Form_Options);
int __fastcall form_page(const FORM *);
int __fastcall form_request_by_name(const char *);
const char *__fastcall form_request_name(int);
WINDOW *__fastcall form_sub(const FORM *);
Form_Hook __fastcall form_term(const FORM *);
void *__fastcall form_userptr(const FORM *);
WINDOW *__fastcall form_win(const FORM *);
char *__fastcall fparseln(FILE *, size_t *, size_t *, const char[3], int);
int __fastcall fpathconf(int, int);
int fprintf(FILE *, const char *, ...);
int __fastcall fpurge(FILE *);
int __fastcall fputc(int, FILE *);
int __fastcall fputrune(rune_t, FILE *);
int __fastcall fputs(const char *, FILE *);
size_t __fastcall fread(void *, size_t, size_t, FILE *);
void __fastcall free(void *);
int __fastcall free_field(FIELD *);
int __fastcall free_fieldtype(FIELDTYPE *);
int __fastcall free_form(FORM *);
int __fastcall free_item(ITEM *);
int __fastcall free_menu(MENU *);
void __fastcall freeaddrinfo(struct addrinfo *);
void __fastcall freehostent(struct hostent *);
void __fastcall freeifaddrs(struct ifaddrs *);
FILE *__fastcall freopen(const char *, const char *, FILE *);
double __fastcall frexp(double value, int *eptr);
float __fastcall frexpf(float value, int *eptr);
int fscanf(FILE *, const char *, ...);
int __fastcall fsctl(const char *, unsigned int, void *, unsigned int);
int __fastcall fseek(FILE *, int, int);
int __fastcall fseeko(FILE *, fpos_t, int);
int __fastcall fsetpos(FILE *, const fpos_t *);
int __fastcall fstat(int, struct stat *);
int __fastcall fstatfs(int, struct statfs *);
int __fastcall fsync(int);
int __fastcall ftell(FILE *);
fpos_t __fastcall ftello(FILE *);
key_t __fastcall ftok(const char *, int);
int __fastcall ftruncate(int, off_t);
FTSENT *__fastcall fts_children(FTS *, int);
int __fastcall fts_close(FTS *);
FTS *__fastcall fts_open(char *const *, int, int (__fastcall *)(const FTSENT **, const FTSENT **));
FTSENT *__fastcall fts_read(FTS *);
int __fastcall fts_set(FTS *, FTSENT *, int);
int __fastcall fungetrune(rune_t, FILE *);
FILE *__fastcall funopen(const void *, int (__fastcall *)(void *, char *, int), int (__fastcall *)(void *, const char *, int), fpos_t (__fastcall *)(void *, fpos_t, int), int (__fastcall *)(void *));
int __fastcall futimes(int, const struct timeval *);
size_t __fastcall fwrite(const void *, size_t, size_t, FILE *);
char *__fastcall gai_strerror(int);
double __fastcall gamma(double x);
int __fastcall get_ad_tkt(char *service, char *sinstance, char *realm, int lifetime);
unsigned int __fastcall get_align_long(void *ivalue);
unsigned __int16 __fastcall get_align_short(void *ivalue);
kern_return_t __fastcall get_dp_control_port(host_priv_t host, mach_port_t *contorl_port);
ppc_fp_scr_t __fastcall get_fp_scr();
int __fastcall get_pw_tkt(char *, char *, char *, char *);
int __fastcall getaddrinfo(const char *, const char *, const struct addrinfo *, struct addrinfo **);
int __fastcall getattrlist(const char *, void *, void *, size_t, unsigned int);
chtype __fastcall getbkgd(WINDOW *);
char *__fastcall getbsize(int *, int *);
int __fastcall getc(FILE *);
int getch(void);
int getchar(void);
char *__fastcall getcwd(char *, size_t);
int __fastcall getdirentries(int, char *, int, int *);
int __fastcall getdirentriesattr(int, void *, void *, size_t, unsigned int *, unsigned int *, unsigned int *, unsigned int);
int getdtablesize(void);
gid_t getegid(void);
char *__fastcall getenv(const char *);
uid_t geteuid(void);
int __fastcall getfh(const char *, fhandle_t *);
struct fstab *getfsent(void);
struct fstab *__fastcall getfsfile(const char *);
struct fstab *__fastcall getfsspec(const char *);
int __fastcall getfsstat(struct statfs *, int, int);
gid_t getgid(void);
struct group *getgrent(void);
struct group *__fastcall getgrgid(gid_t);
int __fastcall getgrgid_r(gid_t, struct group *, char *, size_t, struct group **);
struct group *__fastcall getgrnam(const char *);
int __fastcall getgrnam_r(const char *, struct group *, char *, size_t, struct group **);
int __fastcall getgrouplist(const char *, int, int *, int *);
int __fastcall getgroups(int, gid_t[]);
struct hostent *__fastcall gethostbyaddr(const char *, int, int);
struct hostent *__fastcall gethostbyname(const char *);
struct hostent *__fastcall gethostbyname2(const char *, int);
struct hostent *gethostent(void);
int gethostid(void);
int __fastcall gethostname(char *, int);
int __fastcall getifaddrs(struct ifaddrs **);
struct hostent *__fastcall getipnodebyaddr(const void *, size_t, int, int *);
struct hostent *__fastcall getipnodebyname(const char *, int, int, int *);
int __fastcall getitimer(int, struct itimerval *);
int __fastcall getloadavg(double[], int);
char *getlogin(void);
int getmaxpartitions(void);
int __fastcall getmntinfo(struct statfs **, int);
mode_t __fastcall getmode(const void *, mode_t);
int __fastcall getmouse(MEVENT *);
int __fastcall getnameinfo(const struct sockaddr *, size_t, char *, size_t, char *, size_t, int);
void __fastcall getnanotime(struct timespec *t_p);
struct netent *__fastcall getnetbyaddr(int, int);
struct netent *__fastcall getnetbyname(const char *);
struct netent *getnetent(void);
int __fastcall getnstr(char *, int);
int __fastcall getopt(int, char *const [], const char *);
int getpagesize(void);
char *__fastcall getpass(const char *);
int __fastcall getpeername(int, struct sockaddr *, int *);
int __fastcall getpgid(pid_t pid);
pid_t getpgrp(void);
pid_t getpid(void);
pid_t getppid(void);
int __fastcall getpriority(int, int);
struct protoent *__fastcall getprotobyname(const char *);
struct protoent *__fastcall getprotobynumber(int);
struct protoent *getprotoent(void);
struct passwd *getpwent(void);
struct passwd *__fastcall getpwnam(const char *);
int __fastcall getpwnam_r(const char *, struct passwd *, char *, size_t, struct passwd **);
struct passwd *__fastcall getpwuid(uid_t);
int __fastcall getpwuid_r(uid_t, struct passwd *, char *, size_t, struct passwd **);
int getrawpartition(void);
int __fastcall getrlimit(int, struct rlimit *);
struct rpcent *__fastcall getrpcbyname(const char *name);
struct rpcent *__fastcall getrpcbynumber(int number);
struct rpcent *getrpcent(void);
int __fastcall getrusage(int, struct rusage *);
char *__fastcall gets(char *);
struct servent *__fastcall getservbyname(const char *, const char *);
struct servent *__fastcall getservbyport(int, const char *);
struct servent *getservent(void);
int __fastcall getsid(pid_t pid);
int __fastcall getsockname(int, struct sockaddr *, int *);
int __fastcall getsockopt(int, int, int, void *, int *);
int __fastcall getstr(char *);
int __fastcall getsubopt(char **, char *const *, char **);
int __fastcall gettimeofday(struct timeval *, struct timezone *);
struct ttyent *getttyent(void);
struct ttyent *__fastcall getttynam(const char *);
uid_t getuid(void);
char *getusershell(void);
int __fastcall getvfsbyname(const char *, struct vfsconf *);
int __fastcall getw(FILE *);
char *__fastcall getwd(char *);
WINDOW *__fastcall getwin(FILE *);
int __fastcall glob(const char *, int, int (__fastcall *)(const char *, int), glob_t *);
void __fastcall globfree(glob_t *);
struct tm *__fastcall gmtime(const time_t *);
struct tm *__fastcall gmtime_r(const time_t *, struct tm *);
char *__fastcall group_from_gid(unsigned int, int);
OM_uint32 __fastcall gss_accept_sec_context(OM_uint32 *, gss_ctx_id_t *, gss_cred_id_t, gss_buffer_t, gss_channel_bindings_t, gss_name_t *, gss_OID *, gss_buffer_t, OM_uint32 *, OM_uint32 *, gss_cred_id_t *);
OM_uint32 __fastcall gss_acquire_cred(OM_uint32 *, gss_name_t, OM_uint32, gss_OID_set, gss_cred_usage_t, gss_cred_id_t *, gss_OID_set *, OM_uint32 *);
OM_uint32 __fastcall gss_add_cred(OM_uint32 *, gss_cred_id_t, gss_name_t, gss_OID, gss_cred_usage_t, OM_uint32, OM_uint32, gss_cred_id_t *, gss_OID_set *, OM_uint32 *, OM_uint32 *);
OM_uint32 __fastcall gss_add_oid_set_member(OM_uint32 *, gss_OID, gss_OID_set *);
OM_uint32 __fastcall gss_canonicalize_name(OM_uint32 *, const gss_name_t, const gss_OID, gss_name_t *);
OM_uint32 __fastcall gss_compare_name(OM_uint32 *, gss_name_t, gss_name_t, int *);
OM_uint32 __fastcall gss_context_time(OM_uint32 *, gss_ctx_id_t, OM_uint32 *);
OM_uint32 __fastcall gss_create_empty_oid_set(OM_uint32 *, gss_OID_set *);
OM_uint32 __fastcall gss_delete_sec_context(OM_uint32 *, gss_ctx_id_t *, gss_buffer_t);
OM_uint32 __fastcall gss_display_name(OM_uint32 *, gss_name_t, gss_buffer_t, gss_OID *);
OM_uint32 __fastcall gss_display_status(OM_uint32 *, OM_uint32, int, gss_OID, OM_uint32 *, gss_buffer_t);
OM_uint32 __fastcall gss_duplicate_name(OM_uint32 *, const gss_name_t, gss_name_t *);
OM_uint32 __fastcall gss_export_name(OM_uint32 *, const gss_name_t, gss_buffer_t);
OM_uint32 __fastcall gss_export_name_object(OM_uint32 *, gss_name_t, gss_OID, void **);
OM_uint32 __fastcall gss_export_sec_context(OM_uint32 *, gss_ctx_id_t *, gss_buffer_t);
OM_uint32 __fastcall gss_get_mic(OM_uint32 *, gss_ctx_id_t, gss_qop_t, gss_buffer_t, gss_buffer_t);
OM_uint32 __fastcall gss_import_name(OM_uint32 *, gss_buffer_t, gss_OID, gss_name_t *);
OM_uint32 __fastcall gss_import_name_object(OM_uint32 *, void *, gss_OID, gss_name_t *);
OM_uint32 __fastcall gss_import_sec_context(OM_uint32 *, gss_buffer_t, gss_ctx_id_t *);
OM_uint32 __fastcall gss_indicate_mechs(OM_uint32 *, gss_OID_set *);
OM_uint32 __fastcall gss_init_sec_context(OM_uint32 *, gss_cred_id_t, gss_ctx_id_t *, gss_name_t, gss_OID, OM_uint32, OM_uint32, gss_channel_bindings_t, gss_buffer_t, gss_OID *, gss_buffer_t, OM_uint32 *, OM_uint32 *);
OM_uint32 __fastcall gss_inquire_context(OM_uint32 *, gss_ctx_id_t, gss_name_t *, gss_name_t *, OM_uint32 *, gss_OID *, OM_uint32 *, int *, int *);
OM_uint32 __fastcall gss_inquire_cred(OM_uint32 *, gss_cred_id_t, gss_name_t *, OM_uint32 *, gss_cred_usage_t *, gss_OID_set *);
OM_uint32 __fastcall gss_inquire_cred_by_mech(OM_uint32 *, gss_cred_id_t, gss_OID, gss_name_t *, OM_uint32 *, OM_uint32 *, gss_cred_usage_t *);
OM_uint32 __fastcall gss_inquire_names_for_mech(OM_uint32 *, gss_OID, gss_OID_set *);
OM_uint32 __fastcall gss_krb5_ccache_name(OM_uint32 *minor_status, const char *name, const char **out_name);
OM_uint32 __fastcall gss_krb5_copy_ccache(OM_uint32 *minor_status, gss_cred_id_t cred_handle, krb5_ccache out_ccache);
OM_uint32 __fastcall gss_krb5_get_tkt_flags(OM_uint32 *minor_status, gss_ctx_id_t context_handle, krb5_flags *ticket_flags);
const gss_OID_desc *const gss_mech_krb5;
const gss_OID_desc *const gss_mech_krb5_old;
const gss_OID_desc *const gss_mech_krb5_v2;
const gss_OID_set_desc *const gss_mech_set_krb5;
const gss_OID_set_desc *const gss_mech_set_krb5_both;
const gss_OID_set_desc *const gss_mech_set_krb5_old;
const gss_OID_set_desc *const gss_mech_set_krb5_v1v2;
const gss_OID_set_desc *const gss_mech_set_krb5_v2;
gss_OID gss_nt_exported_name;
const gss_OID_desc *const gss_nt_krb5_name;
const gss_OID_desc *const gss_nt_krb5_principal;
gss_OID gss_nt_machine_uid_name;
gss_OID gss_nt_service_name;
gss_OID gss_nt_service_name_v2;
gss_OID gss_nt_string_uid_name;
gss_OID gss_nt_user_name;
OM_uint32 __fastcall gss_oid_to_str(OM_uint32 *, gss_OID, gss_buffer_t);
OM_uint32 __fastcall gss_process_context_token(OM_uint32 *, gss_ctx_id_t, gss_buffer_t);
OM_uint32 __fastcall gss_release_buffer(OM_uint32 *, gss_buffer_t);
OM_uint32 __fastcall gss_release_cred(OM_uint32 *, gss_cred_id_t *);
OM_uint32 __fastcall gss_release_name(OM_uint32 *, gss_name_t *);
OM_uint32 __fastcall gss_release_oid(OM_uint32 *, gss_OID *);
OM_uint32 __fastcall gss_release_oid_set(OM_uint32 *, gss_OID_set *);
OM_uint32 __fastcall gss_seal(OM_uint32 *, gss_ctx_id_t, int, int, gss_buffer_t, int *, gss_buffer_t);
OM_uint32 __fastcall gss_sign(OM_uint32 *, gss_ctx_id_t, int, gss_buffer_t, gss_buffer_t);
OM_uint32 __fastcall gss_str_to_oid(OM_uint32 *, gss_buffer_t, gss_OID *);
OM_uint32 __fastcall gss_test_oid_set_member(OM_uint32 *, gss_OID, gss_OID_set, int *);
OM_uint32 __fastcall gss_unseal(OM_uint32 *, gss_ctx_id_t, gss_buffer_t, gss_buffer_t, int *, int *);
OM_uint32 __fastcall gss_unwrap(OM_uint32 *, gss_ctx_id_t, gss_buffer_t, gss_buffer_t, int *, gss_qop_t *);
OM_uint32 __fastcall gss_verify(OM_uint32 *, gss_ctx_id_t, gss_buffer_t, gss_buffer_t, int *);
OM_uint32 __fastcall gss_verify_mic(OM_uint32 *, gss_ctx_id_t, gss_buffer_t, gss_buffer_t, gss_qop_t *);
OM_uint32 __fastcall gss_wrap(OM_uint32 *, gss_ctx_id_t, int, gss_qop_t, gss_buffer_t, int *, gss_buffer_t);
OM_uint32 __fastcall gss_wrap_size_limit(OM_uint32 *, gss_ctx_id_t, int, gss_qop_t, OM_uint32, OM_uint32 *);
int h_errno;
int __fastcall halfdelay(int);
NCURSES_BOOL has_colors(void);
NCURSES_BOOL has_ic(void);
NCURSES_BOOL has_il(void);
int __fastcall has_key(int);
int __fastcall heapsort(void *, size_t, size_t, int (__fastcall *)(const void *, const void *));
void __fastcall herror(const char *);
int __fastcall hide_panel(PANEL *);
int history(History *, HistEvent *, int, ...);
void __fastcall history_end(History *);
History *history_init(void);
int __fastcall hline(chtype, int);
kern_return_t __fastcall host_default_memory_manager(host_priv_t host_priv, memory_object_default_t *default_manager, vm_size_t cluster_size);
kern_return_t __fastcall host_get_UNDServer(host_priv_t host, UNDServerRef *server);
kern_return_t __fastcall host_get_boot_info(host_priv_t host_priv, kernel_boot_info_t boot_info);
kern_return_t __fastcall host_get_clock_control(host_priv_t host_priv, clock_id_t clock_id, clock_ctrl_t *clock_ctrl);
kern_return_t __fastcall host_get_clock_service(host_t host, clock_id_t clock_id, clock_serv_t *clock_serv);
kern_return_t __fastcall host_get_exception_ports(host_priv_t host_priv, exception_mask_t exception_mask, exception_mask_array_t masks, mach_msg_type_number_t *masksCnt, exception_handler_array_t old_handlers, exception_behavior_array_t old_behaviors, exception_flavor_array_t old_flavors);
kern_return_t __fastcall host_get_io_master(host_t host, io_master_t *io_master);
kern_return_t __fastcall host_get_special_port(host_priv_t host_priv, int node, int which, mach_port_t *port);
kern_return_t __fastcall host_info(host_t host, host_flavor_t flavor, host_info_t host_info_out, mach_msg_type_number_t *host_info_outCnt);
kern_return_t __fastcall host_ipc_hash_info(host_t host, hash_info_bucket_array_t *info, mach_msg_type_number_t *infoCnt);
kern_return_t __fastcall host_kernel_version(host_t host, kernel_version_t kernel_version);
kern_return_t __fastcall host_load_symbol_table(host_priv_t host, task_t task, symtab_name_t name, vm_offset_t symtab, mach_msg_type_number_t symtabCnt);
kern_return_t __fastcall host_page_size(host_t host, vm_size_t *page_size);
kern_return_t __fastcall host_priv_statistics(host_priv_t host_priv, host_flavor_t flavor, host_info_t host_info_out, mach_msg_type_number_t *host_info_outCnt);
kern_return_t __fastcall host_processor_info(host_t host, processor_flavor_t flavor, natural_t *processor_count, processor_info_array_t *processor_info, mach_msg_type_number_t *processor_infoCnt);
kern_return_t __fastcall host_processor_set_priv(host_priv_t host_priv, processor_set_name_t set_name, processor_set_t *set);
kern_return_t __fastcall host_processor_sets(host_priv_t host_priv, processor_set_name_array_t *processor_sets, mach_msg_type_number_t *processor_setsCnt);
kern_return_t __fastcall host_processors(host_priv_t host_priv, processor_array_t *processor_list, mach_msg_type_number_t *processor_listCnt);
kern_return_t __fastcall host_reboot(host_priv_t host_priv, int options);
kern_return_t __fastcall host_security_create_task_token(host_security_t host_security, task_t parent_task, security_token_t sec_token, host_t host, ledger_array_t ledgers, mach_msg_type_number_t ledgersCnt, boolean_t inherit_memory, task_t *child_task);
kern_return_t __fastcall host_security_set_task_token(host_security_t host_security, task_t target_task, security_token_t sec_token, host_t host);
mach_port_name_t host_self_trap(void);
kern_return_t __fastcall host_set_UNDServer(host_priv_t host, UNDServerRef server);
kern_return_t __fastcall host_set_exception_ports(host_priv_t host_priv, exception_mask_t exception_mask, mach_port_t new_port, exception_behavior_t behavior, thread_state_flavor_t new_flavor);
kern_return_t __fastcall host_set_special_port(host_priv_t host_priv, int which, mach_port_t port);
kern_return_t __fastcall host_statistics(host_t host_priv, host_flavor_t flavor, host_info_t host_info_out, mach_msg_type_number_t *host_info_outCnt);
kern_return_t __fastcall host_swap_exception_ports(host_priv_t host_priv, exception_mask_t exception_mask, mach_port_t new_port, exception_behavior_t behavior, thread_state_flavor_t new_flavor, exception_mask_array_t masks, mach_msg_type_number_t *masksCnt, exception_handler_array_t old_handlerss, exception_behavior_array_t old_behaviors, exception_flavor_array_t old_flavors);
kern_return_t __fastcall host_virtual_physical_table_info(host_t host, hash_info_bucket_array_t *info, mach_msg_type_number_t *infoCnt);
kern_return_t __fastcall host_zone_info(host_t host, zone_name_array_t *names, mach_msg_type_number_t *namesCnt, zone_info_array_t *info, mach_msg_type_number_t *infoCnt);
int __fastcall hosts_access();
int hosts_access_verbose;
char *hosts_allow_table;
char *hosts_deny_table;
char *__fastcall hstrerror(int);
unsigned int __fastcall htonl(unsigned int);
unsigned __int16 __fastcall htons(unsigned __int16);
double __fastcall hypot(double x, double y);
void __fastcall idcok(WINDOW *, NCURSES_BOOL);
int __fastcall idlok(WINDOW *, NCURSES_BOOL);
void __fastcall if_freenameindex(struct if_nameindex *);
char *__fastcall if_indextoname(u_int, char *);
struct if_nameindex *if_nameindex(void);
u_int __fastcall if_nametoindex(const char *);
int __fastcall ilogb(double x);
int __fastcall ilogbf(float x);
void __fastcall immedok(WINDOW *, NCURSES_BOOL);
const struct in6_addr in6addr_any;
const struct in6_addr in6addr_linklocal_allnodes;
const struct in6_addr in6addr_linklocal_allrouters;
const struct in6_addr in6addr_loopback;
const struct in6_addr in6addr_nodelocal_allnodes;
chtype inch(void);
int __fastcall inchnstr(chtype *, int);
int __fastcall inchstr(chtype *);
char *__fastcall index(const char *, int);
int __fastcall inet6_opt_append(void *, size_t, int, u_int8_t, size_t, u_int8_t, void **);
int __fastcall inet6_opt_find(void *, size_t, int, u_int8_t, size_t *, void **);
int __fastcall inet6_opt_finish(void *, size_t, int);
int __fastcall inet6_opt_get_val(void *, size_t, void *, int);
int __fastcall inet6_opt_init(void *, size_t);
int __fastcall inet6_opt_next(void *, size_t, int, u_int8_t *, size_t *, void **);
int __fastcall inet6_opt_set_val(void *, size_t, void *, int);
u_int8_t *__fastcall inet6_option_alloc(struct cmsghdr *, int, int, int);
int __fastcall inet6_option_append(struct cmsghdr *, const u_int8_t *, int, int);
int __fastcall inet6_option_find(const struct cmsghdr *, u_int8_t **, int);
int __fastcall inet6_option_init(void *, struct cmsghdr **, int);
int __fastcall inet6_option_next(const struct cmsghdr *, u_int8_t **);
int __fastcall inet6_option_space(int);
int __fastcall inet6_rth_add(void *, const struct in6_addr *);
struct in6_addr *__fastcall inet6_rth_getaddr(const void *, int);
void *__fastcall inet6_rth_init(void *, int, int, int);
int __fastcall inet6_rth_reverse(const void *, void *);
int __fastcall inet6_rth_segments(const void *);
size_t __fastcall inet6_rth_space(int, int);
int __fastcall inet6_rthdr_add(struct cmsghdr *, const struct in6_addr *, unsigned int);
struct in6_addr *__fastcall inet6_rthdr_getaddr(struct cmsghdr *, int);
int __fastcall inet6_rthdr_getflags(const struct cmsghdr *, int);
struct cmsghdr *__fastcall inet6_rthdr_init(void *, int);
int __fastcall inet6_rthdr_lasthop(struct cmsghdr *, unsigned int);
int __fastcall inet6_rthdr_segments(const struct cmsghdr *);
size_t __fastcall inet6_rthdr_space(int, int);
unsigned int __fastcall inet_addr(const char *);
int __fastcall inet_aton(const char *, struct in_addr *);
unsigned int __fastcall inet_lnaof(struct in_addr);
struct in_addr __fastcall inet_makeaddr(u_long, u_long);
unsigned int __fastcall inet_netof(struct in_addr);
unsigned int __fastcall inet_network(const char *);
u_int __fastcall inet_nsap_addr(const char *, u_char *, int maxlen);
char *__fastcall inet_nsap_ntoa(int, const u_char *, char *ascii);
char *__fastcall inet_ntoa(struct in_addr);
const char *__fastcall inet_ntop(int, const void *, char *, size_t);
int __fastcall inet_pton(int, const char *, void *);
int __fastcall init_color(__int16, __int16, __int16, __int16);
int __fastcall init_pair(__int16, __int16, __int16);
kern_return_t init_process(void);
int __fastcall initgroups(const char *, int);
WINDOW *initscr(void);
char *__fastcall initstate(unsigned int, char *, int);
int __fastcall innetgr(const char *, const char *, const char *, const char *);
int __fastcall innstr(char *, int);
int __fastcall insch(chtype);
int __fastcall insdelln(int);
int insertln(void);
int __fastcall insnstr(const char *, int);
int __fastcall insstr(const char *);
int __fastcall instr(char *);
int __fastcall intrflush(WINDOW *, NCURSES_BOOL);
int ioctl(int, unsigned int, ...);
char *__fastcall ipsec_dump_policy(caddr_t, char *);
int __fastcall ipsec_get_policylen(caddr_t);
caddr_t __fastcall ipsec_set_policy(char *, int);
const char *ipsec_strerror(void);
int __fastcall iruserok(unsigned int, int, const char *, const char *);
NCURSES_BOOL __fastcall is_linetouched(WINDOW *, int);
NCURSES_BOOL __fastcall is_term_resized(int, int);
NCURSES_BOOL __fastcall is_wintouched(WINDOW *);
int __fastcall isalnum(int);
int __fastcall isalpha(int);
int __fastcall isascii(int);
int __fastcall isatty(int);
int __fastcall isblank(int);
int __fastcall iscntrl(int);
int __fastcall isdigit(int);
NCURSES_BOOL isendwin(void);
int __fastcall isgraph(int);
int __fastcall ishexnumber(int);
int __fastcall isideogram(int);
int __fastcall islower(int);
int __fastcall isnumber(int);
const adb_kb_map_t iso_extend_adb_kb_map;
const adb_kb_map_t iso_std_adb_kb_map;
int __fastcall isphonogram(int);
int __fastcall isprint(int);
int __fastcall ispunct(int);
int __fastcall isrune(int);
int issetugid(void);
int __fastcall isspace(int);
int __fastcall isspecial(int);
int __fastcall isupper(int);
int __fastcall isxdigit(int);
int __fastcall item_count(const MENU *);
const char *__fastcall item_description(const ITEM *);
int __fastcall item_index(const ITEM *);
Menu_Hook __fastcall item_init(const MENU *);
const char *__fastcall item_name(const ITEM *);
Item_Options __fastcall item_opts(const ITEM *);
int __fastcall item_opts_off(ITEM *, Item_Options);
int __fastcall item_opts_on(ITEM *, Item_Options);
Menu_Hook __fastcall item_term(const MENU *);
void *__fastcall item_userptr(const ITEM *);
NCURSES_BOOL __fastcall item_value(const ITEM *);
NCURSES_BOOL __fastcall item_visible(const ITEM *);
double __fastcall j0(double x);
double __fastcall j1(double x);
double __fastcall jn(int n, double x);
int __fastcall jrand48(unsigned __int16[3]);
int __fastcall k_isinst(const char *s);
int __fastcall k_isname(const char *s);
int __fastcall k_isrealm(const char *s);
unsigned int kdebug_enable;
void __fastcall kernel_debug(unsigned int debugid, unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4, unsigned int arg5);
void __fastcall kernel_debug1(unsigned int debugid, unsigned int arg1, unsigned int arg2, unsigned int arg3, unsigned int arg4, unsigned int arg5);
kern_return_t __fastcall kernel_task_create(task_t target_task, vm_offset_t map_base, vm_size_t map_size, task_t *child_task);
char *__fastcall keybound(int, int);
char *__fastcall keyname(int);
int __fastcall keyok(int, NCURSES_BOOL);
int __fastcall keypad(WINDOW *, NCURSES_BOOL);
int __fastcall kill(pid_t, int);
char killchar(void);
int __fastcall killpg(pid_t, int);
klm_stat *__fastcall klm_cancel_1();
klm_stat *__fastcall klm_cancel_1_svc();
klm_stat *__fastcall klm_lock_1();
klm_stat *__fastcall klm_lock_1_svc();
klm_testrply *__fastcall klm_test_1();
klm_testrply *__fastcall klm_test_1_svc();
klm_stat *__fastcall klm_unlock_1();
klm_stat *__fastcall klm_unlock_1_svc();
kern_return_t __fastcall kmod_control(host_priv_t host_priv, kmod_t module, kmod_control_flavor_t flavor, kmod_args_t *data, mach_msg_type_number_t *dataCnt);
kern_return_t __fastcall kmod_create(host_priv_t host_priv, vm_address_t info, kmod_t *module);
kern_return_t __fastcall kmod_destroy(host_priv_t host_priv, kmod_t module);
kern_return_t __fastcall kmod_get_info(host_t host, kmod_args_t *modules, mach_msg_type_number_t *modulesCnt);
int __fastcall kname_parse(char *, char *, char *, const char *);
int __fastcall kname_unparse(char *, const char *, const char *, const char *);
krb5_error_code __fastcall krb5_425_conv_principal(krb5_context, const char *name, const char *instance, const char *realm, krb5_principal *princ);
krb5_error_code __fastcall krb5_524_conv_principal(krb5_context context, const krb5_principal princ, char *name, char *inst, char *realm);
krb5_boolean __fastcall krb5_address_compare(krb5_context, const krb5_address *, const krb5_address *);
int __fastcall krb5_address_order(krb5_context, const krb5_address *, const krb5_address *);
krb5_boolean __fastcall krb5_address_search(krb5_context, const krb5_address *, krb5_address *const *);
krb5_error_code __fastcall krb5_aname_to_localname(krb5_context, krb5_const_principal, const int, char *);
void __fastcall krb5_appdefault_boolean(krb5_context context, const char *appname, const krb5_data *realm, const char *option, int default_value, int *ret_value);
void __fastcall krb5_appdefault_string(krb5_context context, const char *appname, const krb5_data *realm, const char *option, const char *default_value, char **ret_value);
krb5_error_code __fastcall krb5_auth_con_free(krb5_context, krb5_auth_context);
krb5_error_code __fastcall krb5_auth_con_genaddrs(krb5_context, krb5_auth_context, int, int);
krb5_error_code __fastcall krb5_auth_con_getaddrs(krb5_context, krb5_auth_context, krb5_address **, krb5_address **);
krb5_error_code __fastcall krb5_auth_con_getauthenticator(krb5_context, krb5_auth_context, krb5_authenticator **);
krb5_error_code __fastcall krb5_auth_con_getflags(krb5_context, krb5_auth_context, krb5_int32 *);
krb5_error_code __fastcall krb5_auth_con_getkey(krb5_context, krb5_auth_context, krb5_keyblock **);
krb5_error_code __fastcall krb5_auth_con_getlocalseqnumber(krb5_context, krb5_auth_context, krb5_int32 *);
krb5_error_code __fastcall krb5_auth_con_getlocalsubkey(krb5_context, krb5_auth_context, krb5_keyblock **);
krb5_error_code __fastcall krb5_auth_con_getrcache(krb5_context, krb5_auth_context, krb5_rcache *);
krb5_error_code __fastcall krb5_auth_con_getremoteseqnumber(krb5_context, krb5_auth_context, krb5_int32 *);
krb5_error_code __fastcall krb5_auth_con_getremotesubkey(krb5_context, krb5_auth_context, krb5_keyblock **);
krb5_error_code __fastcall krb5_auth_con_init(krb5_context, krb5_auth_context *);
krb5_error_code __fastcall krb5_auth_con_initivector(krb5_context, krb5_auth_context);
krb5_error_code __fastcall krb5_auth_con_setaddrs(krb5_context, krb5_auth_context, krb5_address *, krb5_address *);
krb5_error_code __fastcall krb5_auth_con_setflags(krb5_context, krb5_auth_context, krb5_int32);
krb5_error_code __fastcall krb5_auth_con_setports(krb5_context, krb5_auth_context, krb5_address *, krb5_address *);
krb5_error_code __fastcall krb5_auth_con_setrcache(krb5_context, krb5_auth_context, krb5_rcache);
krb5_error_code __fastcall krb5_auth_con_setuseruserkey(krb5_context, krb5_auth_context, krb5_keyblock *);
krb5_error_code krb5_build_principal(krb5_context, krb5_principal *, int, const char *, ...);
krb5_error_code krb5_build_principal_ext(krb5_context, krb5_principal *, int, const char *, ...);
krb5_error_code __fastcall krb5_build_principal_va(krb5_context, krb5_principal, int, const char *, va_list);
krb5_error_code __fastcall krb5_c_block_size(krb5_context context, krb5_enctype enctype, size_t *blocksize);
krb5_error_code __fastcall krb5_c_checksum_length(krb5_context context, krb5_cksumtype cksumtype, size_t *length);
krb5_error_code __fastcall krb5_c_decrypt(krb5_context context, const krb5_keyblock *key, krb5_keyusage usage, const krb5_data *ivec, const krb5_enc_data *input, krb5_data *output);
krb5_error_code __fastcall krb5_c_encrypt(krb5_context context, const krb5_keyblock *key, krb5_keyusage usage, const krb5_data *ivec, const krb5_data *input, krb5_enc_data *output);
krb5_error_code __fastcall krb5_c_encrypt_length(krb5_context context, krb5_enctype enctype, size_t inputlen, size_t *length);
krb5_error_code __fastcall krb5_c_enctype_compare(krb5_context context, krb5_enctype e1, krb5_enctype e2, krb5_boolean *similar);
krb5_boolean __fastcall krb5_c_is_coll_proof_cksum(const krb5_cksumtype ctype);
krb5_boolean __fastcall krb5_c_is_keyed_cksum(const krb5_cksumtype ctype);
krb5_error_code __fastcall krb5_c_keyed_checksum_types(krb5_context context, krb5_enctype enctype, unsigned int *count, krb5_cksumtype **cksumtypes);
krb5_error_code __fastcall krb5_c_make_checksum(krb5_context context, krb5_cksumtype cksumtype, const krb5_keyblock *key, krb5_keyusage usage, const krb5_data *input, krb5_checksum *cksum);
krb5_error_code __fastcall krb5_c_make_random_key(krb5_context context, krb5_enctype enctype, krb5_keyblock *random_key);
krb5_error_code __fastcall krb5_c_random_make_octets(krb5_context context, krb5_data *data);
krb5_error_code __fastcall krb5_c_random_seed(krb5_context context, krb5_data *data);
krb5_error_code __fastcall krb5_c_string_to_key(krb5_context context, krb5_enctype enctype, const krb5_data *string, const krb5_data *salt, krb5_keyblock *key);
krb5_boolean __fastcall krb5_c_valid_cksumtype(const krb5_cksumtype ctype);
krb5_boolean __fastcall krb5_c_valid_enctype(const krb5_enctype ktype);
krb5_error_code __fastcall krb5_c_verify_checksum(krb5_context context, const krb5_keyblock *key, krb5_keyusage usage, const krb5_data *data, const krb5_checksum *cksum, krb5_boolean *valid);
krb5_error_code __fastcall krb5_calculate_checksum(krb5_context context, const krb5_cksumtype ctype, const krb5_pointer in, const size_t in_length, const krb5_pointer seed, const size_t seed_length, krb5_checksum *outcksum);
krb5_error_code __fastcall krb5_cc_close(krb5_context context, krb5_ccache cache);
krb5_error_code __fastcall krb5_cc_copy_creds(krb5_context context, krb5_ccache incc, krb5_ccache outcc);
krb5_error_code __fastcall krb5_cc_default(krb5_context, krb5_ccache *);
const char *__fastcall krb5_cc_default_name(krb5_context);
krb5_error_code __fastcall krb5_cc_destroy(krb5_context context, krb5_ccache cache);
krb5_error_code __fastcall krb5_cc_end_seq_get(krb5_context context, krb5_ccache cache, krb5_cc_cursor *cursor);
krb5_error_code __fastcall krb5_cc_gen_new(krb5_context context, krb5_ccache *cache);
const char *__fastcall krb5_cc_get_name(krb5_context context, krb5_ccache cache);
krb5_error_code __fastcall krb5_cc_get_principal(krb5_context context, krb5_ccache cache, krb5_principal *principal);
const char *__fastcall krb5_cc_get_type(krb5_context context, krb5_ccache cache);
krb5_error_code __fastcall krb5_cc_initialize(krb5_context context, krb5_ccache cache, krb5_principal principal);
krb5_error_code __fastcall krb5_cc_next_cred(krb5_context context, krb5_ccache cache, krb5_cc_cursor *cursor, krb5_creds *creds);
krb5_error_code __fastcall krb5_cc_remove_cred(krb5_context context, krb5_ccache cache, krb5_flags flags, krb5_creds *creds);
krb5_error_code __fastcall krb5_cc_resolve(krb5_context, const char *, krb5_ccache *);
krb5_error_code __fastcall krb5_cc_retrieve_cred(krb5_context context, krb5_ccache cache, krb5_flags flags, krb5_creds *mcreds, krb5_creds *creds);
krb5_error_code __fastcall krb5_cc_set_default_name(krb5_context, const char *);
krb5_error_code __fastcall krb5_cc_set_flags(krb5_context context, krb5_ccache cache, krb5_flags flags);
krb5_error_code __fastcall krb5_cc_start_seq_get(krb5_context context, krb5_ccache cache, krb5_cc_cursor *cursor);
krb5_error_code __fastcall krb5_cc_store_cred(krb5_context context, krb5_ccache cache, krb5_creds *creds);
krb5_error_code __fastcall krb5_change_password(krb5_context context, krb5_creds *creds, char *newpw, int *result_code, krb5_data *result_code_string, krb5_data *result_string);
size_t __fastcall krb5_checksum_size(krb5_context context, const krb5_cksumtype ctype);
krb5_error_code __fastcall krb5_cksumtype_to_string(krb5_cksumtype, char *, size_t);
krb5_error_code __fastcall krb5_copy_addresses(krb5_context, krb5_address *const *, krb5_address ***);
krb5_error_code __fastcall krb5_copy_authdata(krb5_context, krb5_authdata *const *, krb5_authdata ***);
krb5_error_code __fastcall krb5_copy_authenticator(krb5_context, const krb5_authenticator *, krb5_authenticator **);
krb5_error_code __fastcall krb5_copy_checksum(krb5_context, const krb5_checksum *, krb5_checksum **);
krb5_error_code __fastcall krb5_copy_creds(krb5_context, const krb5_creds *, krb5_creds **);
krb5_error_code __fastcall krb5_copy_data(krb5_context, const krb5_data *, krb5_data **);
krb5_error_code __fastcall krb5_copy_keyblock(krb5_context, const krb5_keyblock *, krb5_keyblock **);
krb5_error_code __fastcall krb5_copy_keyblock_contents(krb5_context, const krb5_keyblock *, krb5_keyblock *);
krb5_error_code __fastcall krb5_copy_principal(krb5_context, krb5_const_principal, krb5_principal *);
krb5_error_code __fastcall krb5_copy_ticket(krb5_context, const krb5_ticket *, krb5_ticket **);
krb5_error_code __fastcall krb5_decode_ticket(const krb5_data *code, krb5_ticket **rep);
krb5_error_code __fastcall krb5_decrypt(krb5_context context, const krb5_pointer inptr, krb5_pointer outptr, const size_t size, krb5_encrypt_block *eblock, krb5_pointer ivec);
krb5_error_code __fastcall krb5_deltat_to_string(krb5_deltat, char *, size_t);
krb5_enctype __fastcall krb5_eblock_enctype(krb5_context context, const krb5_encrypt_block *eblock);
krb5_error_code __fastcall krb5_encrypt(krb5_context context, const krb5_pointer inptr, krb5_pointer outptr, const size_t size, krb5_encrypt_block *eblock, krb5_pointer ivec);
size_t __fastcall krb5_encrypt_size(const size_t length, krb5_enctype crypto);
krb5_error_code __fastcall krb5_enctype_to_string(krb5_enctype, char *, size_t);
krb5_error_code __fastcall krb5_finish_key(krb5_context context, krb5_encrypt_block *eblock);
krb5_error_code __fastcall krb5_finish_random_key(krb5_context context, const krb5_encrypt_block *eblock, krb5_pointer *ptr);
void __fastcall krb5_free_addresses(krb5_context, krb5_address **);
void __fastcall krb5_free_ap_rep_enc_part(krb5_context, krb5_ap_rep_enc_part *);
void __fastcall krb5_free_authdata(krb5_context, krb5_authdata **);
void __fastcall krb5_free_authenticator(krb5_context, krb5_authenticator *);
void __fastcall krb5_free_checksum(krb5_context, krb5_checksum *);
void __fastcall krb5_free_checksum_contents(krb5_context, krb5_checksum *);
void __fastcall krb5_free_cksumtypes(krb5_context, krb5_cksumtype *);
void __fastcall krb5_free_context(krb5_context);
void __fastcall krb5_free_cred_contents(krb5_context, krb5_creds *);
void __fastcall krb5_free_creds(krb5_context, krb5_creds *);
void __fastcall krb5_free_data(krb5_context, krb5_data *);
void __fastcall krb5_free_data_contents(krb5_context, krb5_data *);
void __fastcall krb5_free_default_realm(krb5_context, char *);
void __fastcall krb5_free_error(krb5_context, krb5_error *);
krb5_error_code __fastcall krb5_free_host_realm(krb5_context, char *const *);
void __fastcall krb5_free_keyblock(krb5_context, krb5_keyblock *);
void __fastcall krb5_free_keyblock_contents(krb5_context, krb5_keyblock *);
krb5_error_code __fastcall krb5_free_keytab_entry_contents(krb5_context, krb5_keytab_entry *);
void __fastcall krb5_free_principal(krb5_context, krb5_principal);
void __fastcall krb5_free_tgt_creds(krb5_context, krb5_creds **);
void __fastcall krb5_free_ticket(krb5_context, krb5_ticket *);
void __fastcall krb5_free_unparsed_name(krb5_context, char *);
krb5_error_code __fastcall krb5_fwd_tgt_creds(krb5_context, krb5_auth_context, char *, krb5_principal, krb5_principal, krb5_ccache, int forwardable, krb5_data *);
krb5_error_code __fastcall krb5_get_credentials(krb5_context, const krb5_flags, krb5_ccache, krb5_creds *, krb5_creds **);
krb5_error_code __fastcall krb5_get_credentials_renew(krb5_context, const krb5_flags, krb5_ccache, krb5_creds *, krb5_creds **);
krb5_error_code __fastcall krb5_get_credentials_validate(krb5_context, const krb5_flags, krb5_ccache, krb5_creds *, krb5_creds **);
krb5_error_code __fastcall krb5_get_default_realm(krb5_context, char **);
krb5_error_code __fastcall krb5_get_host_realm(krb5_context, const char *, char ***);
krb5_error_code __fastcall krb5_get_in_tkt(krb5_context, const krb5_flags, krb5_address *const *, krb5_enctype *, krb5_preauthtype *, krb5_error_code (__fastcall *)(krb5_context, const krb5_enctype, krb5_data *, krb5_const_pointer, krb5_keyblock **), krb5_const_pointer, krb5_error_code (__fastcall *)(krb5_context, const krb5_keyblock *, krb5_const_pointer, krb5_kdc_rep *), krb5_const_pointer, krb5_creds *, krb5_ccache, krb5_kdc_rep **);
krb5_error_code __fastcall krb5_get_in_tkt_with_keytab(krb5_context, const krb5_flags, krb5_address *const *, krb5_enctype *, krb5_preauthtype *, const krb5_keytab, krb5_ccache, krb5_creds *, krb5_kdc_rep **);
krb5_error_code __fastcall krb5_get_in_tkt_with_password(krb5_context, const krb5_flags, krb5_address *const *, krb5_enctype *, krb5_preauthtype *, const char *, krb5_ccache, krb5_creds *, krb5_kdc_rep **);
krb5_error_code __fastcall krb5_get_in_tkt_with_skey(krb5_context, const krb5_flags, krb5_address *const *, krb5_enctype *, krb5_preauthtype *, const krb5_keyblock *, krb5_ccache, krb5_creds *, krb5_kdc_rep **);
krb5_error_code __fastcall krb5_get_init_creds_keytab(krb5_context context, krb5_creds *creds, krb5_principal client, krb5_keytab arg_keytab, krb5_deltat start_time, char *in_tkt_service, krb5_get_init_creds_opt *options);
void __fastcall krb5_get_init_creds_opt_init(krb5_get_init_creds_opt *opt);
void __fastcall krb5_get_init_creds_opt_set_address_list(krb5_get_init_creds_opt *opt, krb5_address **addresses);
void __fastcall krb5_get_init_creds_opt_set_etype_list(krb5_get_init_creds_opt *opt, krb5_enctype *etype_list, int etype_list_length);
void __fastcall krb5_get_init_creds_opt_set_forwardable(krb5_get_init_creds_opt *opt, int forwardable);
void __fastcall krb5_get_init_creds_opt_set_preauth_list(krb5_get_init_creds_opt *opt, krb5_preauthtype *preauth_list, int preauth_list_length);
void __fastcall krb5_get_init_creds_opt_set_proxiable(krb5_get_init_creds_opt *opt, int proxiable);
void __fastcall krb5_get_init_creds_opt_set_renew_life(krb5_get_init_creds_opt *opt, krb5_deltat renew_life);
void __fastcall krb5_get_init_creds_opt_set_salt(krb5_get_init_creds_opt *opt, krb5_data *salt);
void __fastcall krb5_get_init_creds_opt_set_tkt_life(krb5_get_init_creds_opt *opt, krb5_deltat tkt_life);
krb5_error_code __fastcall krb5_get_init_creds_password(krb5_context context, krb5_creds *creds, krb5_principal client, char *password, krb5_prompter_fct prompter, void *data, krb5_deltat start_time, char *in_tkt_service, krb5_get_init_creds_opt *options);
krb5_error_code __fastcall krb5_get_profile(krb5_context, profile_t *);
krb5_prompt_type *__fastcall krb5_get_prompt_types(krb5_context context);
krb5_error_code __fastcall krb5_get_renewed_creds(krb5_context context, krb5_creds *creds, krb5_principal client, krb5_ccache ccache, char *in_tkt_service);
krb5_error_code __fastcall krb5_get_server_rcache(krb5_context, const krb5_data *, krb5_rcache *);
krb5_error_code __fastcall krb5_get_time_offsets(krb5_context, krb5_int32 *, krb5_int32 *);
krb5_error_code __fastcall krb5_get_validated_creds(krb5_context context, krb5_creds *creds, krb5_principal client, krb5_ccache ccache, char *in_tkt_service);
const gss_OID_desc krb5_gss_oid_array[];
krb5_error_code __fastcall krb5_init_context(krb5_context *);
krb5_error_code __fastcall krb5_init_keyblock(krb5_context, krb5_enctype enctype, size_t length, krb5_keyblock **out);
krb5_error_code __fastcall krb5_init_random_key(krb5_context context, const krb5_encrypt_block *eblock, const krb5_keyblock *keyblock, krb5_pointer *ptr);
krb5_error_code __fastcall krb5_init_secure_context(krb5_context *);
krb5_error_code __fastcall krb5_kt_add_entry(krb5_context, krb5_keytab, krb5_keytab_entry *);
krb5_error_code __fastcall krb5_kt_close(krb5_context context, krb5_keytab keytab);
krb5_error_code __fastcall krb5_kt_default(krb5_context, krb5_keytab *);
krb5_error_code __fastcall krb5_kt_default_name(krb5_context, char *, int);
krb5_error_code __fastcall krb5_kt_end_seq_get(krb5_context context, krb5_keytab keytab, krb5_kt_cursor *cursor);
krb5_error_code __fastcall krb5_kt_get_entry(krb5_context context, krb5_keytab keytab, krb5_const_principal principal, krb5_kvno vno, krb5_enctype enctype, krb5_keytab_entry *entry);
krb5_error_code __fastcall krb5_kt_get_name(krb5_context context, krb5_keytab keytab, char *name, unsigned int namelen);
char *__fastcall krb5_kt_get_type(krb5_context, krb5_keytab keytab);
krb5_error_code __fastcall krb5_kt_next_entry(krb5_context context, krb5_keytab keytab, krb5_keytab_entry *entry, krb5_kt_cursor *cursor);
krb5_error_code __fastcall krb5_kt_read_service_key(krb5_context, krb5_pointer, krb5_principal, krb5_kvno, krb5_enctype, krb5_keyblock **);
krb5_error_code __fastcall krb5_kt_remove_entry(krb5_context, krb5_keytab, krb5_keytab_entry *);
krb5_error_code __fastcall krb5_kt_resolve(krb5_context, const char *, krb5_keytab *);
krb5_error_code __fastcall krb5_kt_start_seq_get(krb5_context context, krb5_keytab keytab, krb5_kt_cursor *cursor);
krb5_boolean __fastcall krb5_kuserok(krb5_context, krb5_principal, const char *);
krb5_error_code __fastcall krb5_mk_1cred(krb5_context, krb5_auth_context, krb5_creds *, krb5_data **, krb5_replay_data *);
krb5_error_code __fastcall krb5_mk_error(krb5_context, const krb5_error *, krb5_data *);
krb5_error_code __fastcall krb5_mk_ncred(krb5_context, krb5_auth_context, krb5_creds **, krb5_data **, krb5_replay_data *);
krb5_error_code __fastcall krb5_mk_priv(krb5_context, krb5_auth_context, const krb5_data *, krb5_data *, krb5_replay_data *);
krb5_error_code __fastcall krb5_mk_rep(krb5_context, krb5_auth_context, krb5_data *);
krb5_error_code __fastcall krb5_mk_req(krb5_context, krb5_auth_context *, const krb5_flags, char *, char *, krb5_data *, krb5_ccache, krb5_data *);
krb5_error_code __fastcall krb5_mk_req_extended(krb5_context, krb5_auth_context *, const krb5_flags, krb5_data *, krb5_creds *, krb5_data *);
krb5_error_code __fastcall krb5_mk_safe(krb5_context, krb5_auth_context, const krb5_data *, krb5_data *, krb5_replay_data *);
krb5_error_code __fastcall krb5_os_localaddr(krb5_context, krb5_address ***);
krb5_error_code __fastcall krb5_parse_name(krb5_context, const char *, krb5_principal *);
krb5_boolean __fastcall krb5_principal_compare(krb5_context, krb5_const_principal, krb5_const_principal);
krb5_error_code __fastcall krb5_process_key(krb5_context context, krb5_encrypt_block *eblock, const krb5_keyblock *key);
krb5_error_code __fastcall krb5_prompter_posix(krb5_context context, void *data, const char *name, const char *banner, int num_prompts, krb5_prompt prompts[]);
krb5_error_code __fastcall krb5_random_key(krb5_context context, const krb5_encrypt_block *eblock, krb5_pointer ptr, krb5_keyblock **keyblock);
krb5_error_code __fastcall krb5_rd_cred(krb5_context, krb5_auth_context, krb5_data *, krb5_creds ***, krb5_replay_data *);
krb5_error_code __fastcall krb5_rd_error(krb5_context, const krb5_data *, krb5_error **);
krb5_error_code __fastcall krb5_rd_priv(krb5_context, krb5_auth_context, const krb5_data *, krb5_data *, krb5_replay_data *);
krb5_error_code __fastcall krb5_rd_rep(krb5_context, krb5_auth_context, const krb5_data *, krb5_ap_rep_enc_part **);
krb5_error_code __fastcall krb5_rd_req(krb5_context, krb5_auth_context *, const krb5_data *, krb5_const_principal, krb5_keytab, krb5_flags *, krb5_ticket **);
krb5_error_code __fastcall krb5_rd_safe(krb5_context, krb5_auth_context, const krb5_data *, krb5_data *, krb5_replay_data *);
krb5_error_code __fastcall krb5_read_password(krb5_context, const char *, const char *, char *, int *);
krb5_boolean __fastcall krb5_realm_compare(krb5_context, krb5_const_principal, krb5_const_principal);
krb5_error_code __fastcall krb5_recvauth(krb5_context, krb5_auth_context *, krb5_pointer, char *, krb5_principal, krb5_int32, krb5_keytab, krb5_ticket **);
krb5_error_code __fastcall krb5_recvauth_version(krb5_context, krb5_auth_context *, krb5_pointer, krb5_principal, krb5_int32, krb5_keytab, krb5_ticket **, krb5_data *);
krb5_error_code __fastcall krb5_salttype_to_string(krb5_int32, char *, size_t);
krb5_error_code __fastcall krb5_sendauth(krb5_context, krb5_auth_context *, krb5_pointer, char *, krb5_principal, krb5_principal, krb5_flags, krb5_data *, krb5_creds *, krb5_ccache, krb5_error **, krb5_ap_rep_enc_part **, krb5_creds **);
krb5_error_code __fastcall krb5_set_default_realm(krb5_context, const char *);
krb5_error_code __fastcall krb5_set_default_tgs_enctypes(krb5_context, const krb5_enctype *);
krb5_error_code __fastcall krb5_set_principal_realm(krb5_context, krb5_principal, const char *);
krb5_error_code __fastcall krb5_sname_to_principal(krb5_context, const char *, const char *, krb5_int32, krb5_principal *);
krb5_error_code __fastcall krb5_string_to_cksumtype(char *, krb5_cksumtype *);
krb5_error_code __fastcall krb5_string_to_deltat(char *, krb5_deltat *);
krb5_error_code __fastcall krb5_string_to_enctype(char *, krb5_enctype *);
krb5_error_code __fastcall krb5_string_to_key(krb5_context context, const krb5_encrypt_block *eblock, krb5_keyblock *keyblock, const krb5_data *data, const krb5_data *salt);
krb5_error_code __fastcall krb5_string_to_salttype(char *, krb5_int32 *);
krb5_error_code __fastcall krb5_string_to_timestamp(char *, krb5_timestamp *);
krb5_error_code __fastcall krb5_timeofday(krb5_context, krb5_int32 *);
krb5_error_code __fastcall krb5_timestamp_to_sfstring(krb5_timestamp, char *, size_t, char *);
krb5_error_code __fastcall krb5_timestamp_to_string(krb5_timestamp, char *, size_t);
krb5_error_code __fastcall krb5_unparse_name(krb5_context, krb5_const_principal, char **);
krb5_error_code __fastcall krb5_unparse_name_ext(krb5_context, krb5_const_principal, char **, int *);
krb5_error_code __fastcall krb5_us_timeofday(krb5_context, krb5_int32 *, krb5_int32 *);
krb5_error_code __fastcall krb5_use_enctype(krb5_context context, krb5_encrypt_block *eblock, const krb5_enctype enctype);
krb5_error_code __fastcall krb5_verify_checksum(krb5_context context, const krb5_cksumtype ctype, const krb5_checksum *cksum, const krb5_pointer in, const size_t in_length, const krb5_pointer seed, const size_t seed_length);
krb5_error_code __fastcall krb5_verify_init_creds(krb5_context context, krb5_creds *creds, krb5_principal ap_req_server, krb5_keytab ap_req_keytab, krb5_ccache *ccache, krb5_verify_init_creds_opt *options);
void __fastcall krb5_verify_init_creds_opt_init(krb5_verify_init_creds_opt *options);
void __fastcall krb5_verify_init_creds_opt_set_ap_req_nofail(krb5_verify_init_creds_opt *options, int ap_req_nofail);
int __fastcall krb_change_password(char *, char *, char *, char *, char *);
int __fastcall krb_check_auth(KTEXT, u_int32_t, MSG_DAT *, des_cblock, des_key_schedule, struct sockaddr_in *, struct sockaddr_in *);
int __fastcall krb_delete_cred(char *, char *, char *);
const char *const *krb_err_txt;
int __fastcall krb_get_admhst(char *, char *, int);
int __fastcall krb_get_cred(char *, char *, char *, CREDENTIALS *);
const char *__fastcall krb_get_err_text(int);
int __fastcall krb_get_in_tkt(char *, char *, char *, char *, char *, int, key_proc_type, decrypt_tkt_type, char *arg);
int __fastcall krb_get_in_tkt_creds(char *, char *, char *, char *, char *, int, key_proc_type, decrypt_tkt_type, char *, CREDENTIALS *);
int __fastcall krb_get_krbhst(char *, const char *, int);
int __fastcall krb_get_lrealm(char *, int);
int __fastcall krb_get_nth_cred(char *, char *, char *, int);
int krb_get_num_cred(void);
char *__fastcall krb_get_phost(char *);
int __fastcall krb_get_profile(profile_t *profile);
int __fastcall krb_get_pw_in_tkt(char *, char *, char *, char *, char *, int, char *);
int __fastcall krb_get_pw_in_tkt_creds(char *, char *, char *, char *, char *, int, char *, CREDENTIALS *);
int __fastcall krb_get_svc_in_tkt(char *, char *, char *, char *, char *, int, char *);
int __fastcall krb_get_tf_fullname(const char *, char *, char *, char *);
int __fastcall krb_get_tf_realm(const char *, char *);
int __fastcall krb_get_ticket_for_service(char *, char *, u_int32_t *, int, des_cblock, des_key_schedule, char *, int);
u_int32_t __fastcall krb_life_to_time(u_int32_t start, int life);
int __fastcall krb_mk_auth(int, KTEXT, char *, char *, char *, u_int32_t, char *, KTEXT);
int __fastcall krb_mk_err(unsigned __int8 *, int32_t, char *);
int __fastcall krb_mk_priv(unsigned __int8 *, unsigned __int8 *, u_int32_t, des_key_schedule, des_cblock, struct sockaddr_in *, struct sockaddr_in *);
int __fastcall krb_mk_req(KTEXT, char *, char *, char *, int32_t);
int __fastcall krb_mk_req_creds(KTEXT, CREDENTIALS *, int32_t);
int __fastcall krb_mk_safe(unsigned __int8 *, unsigned __int8 *, u_int32_t, des_cblock, struct sockaddr_in *, struct sockaddr_in *);
int __fastcall krb_rd_err(unsigned __int8 *, unsigned int, int *, MSG_DAT *);
int __fastcall krb_rd_priv(unsigned __int8 *, u_int32_t, des_key_schedule, des_cblock, struct sockaddr_in *, struct sockaddr_in *, MSG_DAT *);
int __fastcall krb_rd_req(KTEXT, char *, char *, u_int32_t, AUTH_DAT *, char *);
int __fastcall krb_rd_req_int(KTEXT, char *, char *, u_int32_t, AUTH_DAT *, des_cblock);
int __fastcall krb_rd_safe(unsigned __int8 *, u_int32_t, des_cblock, struct sockaddr_in *, struct sockaddr_in *, MSG_DAT *);
char *__fastcall krb_realmofhost(char *);
int __fastcall krb_recvauth(int, int, KTEXT, char *, char *, struct sockaddr_in *, struct sockaddr_in *, AUTH_DAT *, char *, des_key_schedule, char *);
int __fastcall krb_sendauth(int, int, KTEXT, char *, char *, char *, u_int32_t, MSG_DAT *, CREDENTIALS *, des_key_schedule, struct sockaddr_in *, struct sockaddr_in *, char *);
int __fastcall krb_set_lifetime(int newval);
void __fastcall krb_set_tkt_string(const char *);
int __fastcall krb_time_to_life(u_int32_t start, u_int32_t end);
int __fastcall krpc_call(struct sockaddr_in *sin, u_int prog, u_int vers, u_int func, struct mbuf **data, struct sockaddr_in **from);
int __fastcall krpc_portmap(struct sockaddr_in *sin, u_int prog, u_int vers, u_int16_t *portp);
int __fastcall ktrace(const char *, int, int, pid_t);
int __fastcall kuserok(AUTH_DAT *kdata, char *luser);
int __fastcall kvm_close(kvm_t *);
char **__fastcall kvm_getargv(kvm_t *, const struct kinfo_proc *, int);
char **__fastcall kvm_getenvv(kvm_t *, const struct kinfo_proc *, int);
char *__fastcall kvm_geterr(kvm_t *);
char *__fastcall kvm_getfiles(kvm_t *, int, int, int *);
int __fastcall kvm_getloadavg(kvm_t *, double[], int);
struct kinfo_proc *__fastcall kvm_getprocs(kvm_t *, int, int, int *);
int __fastcall kvm_nlist(kvm_t *, struct nlist *);
kvm_t *__fastcall kvm_open(const char *, const char *, const char *, int, const char *);
kvm_t *__fastcall kvm_openfiles(const char *, const char *, const char *, int, char *);
int __fastcall kvm_read(kvm_t *, unsigned int, void *, unsigned int);
int __fastcall kvm_write(kvm_t *, unsigned int, const void *, unsigned int);
char *__fastcall l64a(int);
int __fastcall labs(int);
void __fastcall lcong48(unsigned __int16[7]);
int __fastcall ldap_abandon(LDAP *ld, int msgid);
int __fastcall ldap_abandon_ext(LDAP *ld, int msgid, LDAPControl **serverctrls, LDAPControl **clientctrls);
int __fastcall ldap_add(LDAP *ld, const char *dn, LDAPMod **attrs);
int __fastcall ldap_add_ext(LDAP *ld, const char *dn, LDAPMod **attrs, LDAPControl **serverctrls, LDAPControl **clientctrls, int *msgidp);
int __fastcall ldap_add_ext_s(LDAP *ld, const char *dn, LDAPMod **attrs, LDAPControl **serverctrls, LDAPControl **clientctrls);
void __fastcall ldap_add_result_entry(LDAPMessage **list, LDAPMessage *e);
int __fastcall ldap_add_s(LDAP *ld, const char *dn, LDAPMod **attrs);
struct berval *__fastcall ldap_attributetype2bv(LDAPAttributeType *at, struct berval *bv);
const char *__fastcall ldap_attributetype2name(LDAPAttributeType *at);
char *__fastcall ldap_attributetype2str(LDAPAttributeType *at);
void __fastcall ldap_attributetype_free(LDAPAttributeType *at);
void __fastcall ldap_avafree(LDAPAVA *ava);
int __fastcall ldap_bind(LDAP *ld, const char *who, const char *passwd, int authmethod);
int __fastcall ldap_bind_s(LDAP *ld, const char *who, const char *cred, int authmethod);
int __fastcall ldap_bv2dn(struct berval *bv, LDAPDN **dn, unsigned int flags);
int __fastcall ldap_bv2rdn(struct berval *bv, LDAPRDN **rdn, char **next, unsigned int flags);
int __fastcall ldap_compare(LDAP *ld, const char *dn, const char *attr, const char *value);
int __fastcall ldap_compare_ext(LDAP *ld, const char *dn, const char *attr, struct berval *bvalue, LDAPControl **serverctrls, LDAPControl **clientctrls, int *msgidp);
int __fastcall ldap_compare_ext_s(LDAP *ld, const char *dn, const char *attr, struct berval *bvalue, LDAPControl **serverctrls, LDAPControl **clientctrls);
int __fastcall ldap_compare_s(LDAP *ld, const char *dn, const char *attr, const char *value);
void __fastcall ldap_control_free(LDAPControl *ctrl);
void __fastcall ldap_controls_free(LDAPControl **ctrls);
int __fastcall ldap_count_entries(LDAP *ld, LDAPMessage *chain);
int __fastcall ldap_count_messages(LDAP *ld, LDAPMessage *chain);
int __fastcall ldap_count_references(LDAP *ld, LDAPMessage *chain);
int __fastcall ldap_count_values(char **vals);
int __fastcall ldap_count_values_len(struct berval **vals);
int __fastcall ldap_create(LDAP **ldp);
int __fastcall ldap_create_control(const char *requestOID, BerElement *ber, int iscritical, LDAPControl **ctrlp);
int __fastcall ldap_create_sort_control(LDAP *ld, LDAPSortKey **keyList, int ctl_iscritical, LDAPControl **ctrlp);
int __fastcall ldap_create_sort_keylist(LDAPSortKey ***sortKeyList, char *keyString);
int __fastcall ldap_create_vlv_control(LDAP *ld, LDAPVLVInfo *ldvlistp, LDAPControl **ctrlp);
char *__fastcall ldap_dcedn2dn(const char *dce);
int __fastcall ldap_delete(LDAP *ld, const char *dn);
int __fastcall ldap_delete_ext(LDAP *ld, const char *dn, LDAPControl **serverctrls, LDAPControl **clientctrls, int *msgidp);
int __fastcall ldap_delete_ext_s(LDAP *ld, const char *dn, LDAPControl **serverctrls, LDAPControl **clientctrls);
LDAPMessage *__fastcall ldap_delete_result_entry(LDAPMessage **list, LDAPMessage *e);
int __fastcall ldap_delete_s(LDAP *ld, const char *dn);
void __fastcall ldap_destroy_cache(LDAP *ld);
void __fastcall ldap_disable_cache(LDAP *ld);
char *__fastcall ldap_dn2ad_canonical(const char *dn);
int __fastcall ldap_dn2bv(LDAPDN *dn, struct berval *bv, unsigned int flags);
char *__fastcall ldap_dn2dcedn(const char *dn);
int __fastcall ldap_dn2domain(const char *dn, char **domain);
int __fastcall ldap_dn2str(LDAPDN *dn, char **str, unsigned int flags);
char *__fastcall ldap_dn2ufn(const char *dn);
int __fastcall ldap_dn_normalize(const char *in, unsigned int iflags, char **out, unsigned int oflags);
void __fastcall ldap_dnfree(LDAPDN *dn);
int __fastcall ldap_domain2dn(const char *domain, char **dn);
int __fastcall ldap_domain2hostlist(const char *domain, char **hostlist);
int __fastcall ldap_enable_cache(LDAP *ld, int timeout, ber_len_t maxmem);
char *__fastcall ldap_err2string(int err);
char **__fastcall ldap_explode_dn(const char *dn, int notypes);
char **__fastcall ldap_explode_rdn(const char *rdn, int notypes);
int __fastcall ldap_extended_operation(LDAP *ld, const char *reqoid, struct berval *reqdata, LDAPControl **serverctrls, LDAPControl **clientctrls, int *msgidp);
int __fastcall ldap_extended_operation_s(LDAP *ld, const char *reqoid, struct berval *reqdata, LDAPControl **serverctrls, LDAPControl **clientctrls, char **retoidp, struct berval **retdatap);
char *__fastcall ldap_first_attribute(LDAP *ld, LDAPMessage *entry, BerElement **ber);
LDAPMessage *__fastcall ldap_first_entry(LDAP *ld, LDAPMessage *chain);
LDAPMessage *__fastcall ldap_first_message(LDAP *ld, LDAPMessage *chain);
LDAPMessage *__fastcall ldap_first_reference(LDAP *ld, LDAPMessage *chain);
void __fastcall ldap_flush_cache(LDAP *ld);
void __fastcall ldap_free_sort_keylist(LDAPSortKey **sortkeylist);
void __fastcall ldap_free_urldesc(LDAPURLDesc *ludp);
char *__fastcall ldap_get_dn(LDAP *ld, LDAPMessage *entry);
int __fastcall ldap_get_entry_controls(LDAP *ld, LDAPMessage *entry, LDAPControl ***serverctrls);
int __fastcall ldap_get_option(LDAP *ld, int option, void *outvalue);
char **__fastcall ldap_get_values(LDAP *ld, LDAPMessage *entry, const char *target);
struct berval **__fastcall ldap_get_values_len(LDAP *ld, LDAPMessage *entry, const char *target);
void __fastcall ldap_getfilter_free(LDAPFiltDesc *lfdp);
LDAPFiltInfo *__fastcall ldap_getfirstfilter(LDAPFiltDesc *lfdp, char *tagpat, char *value);
LDAPFiltInfo *__fastcall ldap_getnextfilter(LDAPFiltDesc *lfdp);
LDAP *__fastcall ldap_init(const char *host, int port);
LDAPFiltDesc *__fastcall ldap_init_getfilter(const char *fname);
int __fastcall ldap_initialize(LDAP **ldp, const char *url);
int __fastcall ldap_is_ldap_url(const char *url);
int __fastcall ldap_is_ldapi_url(const char *url);
int __fastcall ldap_is_ldaps_url(const char *url);
int __fastcall ldap_kerberos_bind1(LDAP *ld, const char *who);
int __fastcall ldap_kerberos_bind1_s(LDAP *ld, const char *who);
int __fastcall ldap_kerberos_bind2(LDAP *ld, const char *who);
int __fastcall ldap_kerberos_bind2_s(LDAP *ld, const char *who);
int __fastcall ldap_kerberos_bind_s(LDAP *ld, const char *who);
struct berval *__fastcall ldap_matchingrule2bv(LDAPMatchingRule *mr, struct berval *bv);
const char *__fastcall ldap_matchingrule2name(LDAPMatchingRule *mr);
char *__fastcall ldap_matchingrule2str(LDAPMatchingRule *mr);
void __fastcall ldap_matchingrule_free(LDAPMatchingRule *mr);
struct berval *__fastcall ldap_matchingruleuse2bv(LDAPMatchingRuleUse *mru, struct berval *bv);
const char *__fastcall ldap_matchingruleuse2name(LDAPMatchingRuleUse *mru);
char *__fastcall ldap_matchingruleuse2str(LDAPMatchingRuleUse *mru);
void __fastcall ldap_matchingruleuse_free(LDAPMatchingRuleUse *mr);
void *__fastcall ldap_memalloc(ber_len_t s);
void *__fastcall ldap_memcalloc(ber_len_t n, ber_len_t s);
void __fastcall ldap_memfree(void *p);
void *__fastcall ldap_memrealloc(void *p, ber_len_t s);
void __fastcall ldap_memvfree(void **v);
int __fastcall ldap_modify(LDAP *ld, const char *dn, LDAPMod **mods);
int __fastcall ldap_modify_ext(LDAP *ld, const char *dn, LDAPMod **mods, LDAPControl **serverctrls, LDAPControl **clientctrls, int *msgidp);
int __fastcall ldap_modify_ext_s(LDAP *ld, const char *dn, LDAPMod **mods, LDAPControl **serverctrls, LDAPControl **clientctrls);
int __fastcall ldap_modify_s(LDAP *ld, const char *dn, LDAPMod **mods);
int __fastcall ldap_modrdn(LDAP *ld, const char *dn, const char *newrdn);
int __fastcall ldap_modrdn2(LDAP *ld, const char *dn, const char *newrdn, int deleteoldrdn);
int __fastcall ldap_modrdn2_s(LDAP *ld, const char *dn, const char *newrdn, int deleteoldrdn);
int __fastcall ldap_modrdn_s(LDAP *ld, const char *dn, const char *newrdn);
void __fastcall ldap_mods_free(LDAPMod **mods, int freemods);
int __fastcall ldap_msgdelete(LDAP *ld, int msgid);
int __fastcall ldap_msgfree(LDAPMessage *lm);
int __fastcall ldap_msgid(LDAPMessage *lm);
int __fastcall ldap_msgtype(LDAPMessage *lm);
char *__fastcall ldap_next_attribute(LDAP *ld, LDAPMessage *entry, BerElement *ber);
LDAPMessage *__fastcall ldap_next_entry(LDAP *ld, LDAPMessage *entry);
LDAPMessage *__fastcall ldap_next_message(LDAP *ld, LDAPMessage *msg);
LDAPMessage *__fastcall ldap_next_reference(LDAP *ld, LDAPMessage *ref);
struct berval *__fastcall ldap_objectclass2bv(LDAPObjectClass *oc, struct berval *bv);
const char *__fastcall ldap_objectclass2name(LDAPObjectClass *oc);
char *__fastcall ldap_objectclass2str(LDAPObjectClass *oc);
void __fastcall ldap_objectclass_free(LDAPObjectClass *oc);
LDAP *__fastcall ldap_open(const char *host, int port);
int __fastcall ldap_parse_extended_partial(LDAP *ld, LDAPMessage *res, char **retoidp, struct berval **retdatap, LDAPControl ***serverctrls, int freeit);
int __fastcall ldap_parse_extended_result(LDAP *ld, LDAPMessage *res, char **retoidp, struct berval **retdatap, int freeit);
int __fastcall ldap_parse_reference(LDAP *ld, LDAPMessage *ref, char ***referralsp, LDAPControl ***serverctrls, int freeit);
int __fastcall ldap_parse_result(LDAP *ld, LDAPMessage *res, int *errcodep, char **matcheddnp, char **errmsgp, char ***referralsp, LDAPControl ***serverctrls, int freeit);
int __fastcall ldap_parse_sasl_bind_result(LDAP *ld, LDAPMessage *res, struct berval **servercredp, int freeit);
int __fastcall ldap_parse_sort_control(LDAP *ld, LDAPControl **ctrlp, unsigned int *result, char **attribute);
int __fastcall ldap_parse_vlv_control(LDAP *ld, LDAPControl **ctrls, unsigned int *target_posp, unsigned int *list_countp, struct berval **contextp, int *errcodep);
void __fastcall ldap_perror(LDAP *ld, const char *s);
int __fastcall ldap_rdn2bv(LDAPRDN *rdn, struct berval *bv, unsigned int flags);
int __fastcall ldap_rdn2str(LDAPRDN *rdn, char **str, unsigned int flags);
void __fastcall ldap_rdnfree(LDAPRDN *rdn);
int __fastcall ldap_rename(LDAP *ld, const char *dn, const char *newrdn, const char *newSuperior, int deleteoldrdn, LDAPControl **sctrls, LDAPControl **cctrls, int *msgidp);
int __fastcall ldap_rename2(LDAP *ld, const char *dn, const char *newrdn, const char *newSuperior, int deleteoldrdn);
int __fastcall ldap_rename2_s(LDAP *ld, const char *dn, const char *newrdn, const char *newSuperior, int deleteoldrdn);
int __fastcall ldap_rename_s(LDAP *ld, const char *dn, const char *newrdn, const char *newSuperior, int deleteoldrdn, LDAPControl **sctrls, LDAPControl **cctrls);
int __fastcall ldap_result(LDAP *ld, int msgid, int all, struct timeval *timeout, LDAPMessage **result);
int __fastcall ldap_result2error(LDAP *ld, LDAPMessage *r, int freeit);
int __fastcall ldap_sasl_bind(LDAP *ld, const char *dn, const char *mechanism, struct berval *cred, LDAPControl **serverctrls, LDAPControl **clientctrls, int *msgidp);
int __fastcall ldap_sasl_bind_s(LDAP *ld, const char *dn, const char *mechanism, struct berval *cred, LDAPControl **serverctrls, LDAPControl **clientctrls, struct berval **servercredp);
int __fastcall ldap_sasl_interactive_bind_s(LDAP *ld, const char *dn, const char *saslMechanism, LDAPControl **serverControls, LDAPControl **clientControls, unsigned int flags, LDAP_SASL_INTERACT_PROC *proc, void *defaults);
char *__fastcall ldap_scherr2str(int code);
int __fastcall ldap_search(LDAP *ld, const char *base, int scope, const char *filter, char **attrs, int attrsonly);
int __fastcall ldap_search_ext(LDAP *ld, const char *base, int scope, const char *filter, char **attrs, int attrsonly, LDAPControl **serverctrls, LDAPControl **clientctrls, struct timeval *timeout, int sizelimit, int *msgidp);
int __fastcall ldap_search_ext_s(LDAP *ld, const char *base, int scope, const char *filter, char **attrs, int attrsonly, LDAPControl **serverctrls, LDAPControl **clientctrls, struct timeval *timeout, int sizelimit, LDAPMessage **res);
int __fastcall ldap_search_s(LDAP *ld, const char *base, int scope, const char *filter, char **attrs, int attrsonly, LDAPMessage **res);
int __fastcall ldap_search_st(LDAP *ld, const char *base, int scope, const char *filter, char **attrs, int attrsonly, struct timeval *timeout, LDAPMessage **res);
void __fastcall ldap_set_cache_options(LDAP *ld, unsigned int opts);
int __fastcall ldap_set_option(LDAP *ld, int option, const void *invalue);
int __fastcall ldap_set_rebind_proc(LDAP *ld, LDAP_REBIND_PROC *rebind_proc, void *params);
int __fastcall ldap_simple_bind(LDAP *ld, const char *who, const char *passwd);
int __fastcall ldap_simple_bind_s(LDAP *ld, const char *who, const char *passwd);
int __fastcall ldap_sort_entries(LDAP *ld, LDAPMessage **chain, const char *attr, LDAP_SORT_AD_CMP_PROC *cmp);
int __fastcall ldap_sort_strcasecmp(const void *a, const void *b);
int __fastcall ldap_sort_values(LDAP *ld, char **vals, LDAP_SORT_AV_CMP_PROC *cmp);
int __fastcall ldap_start_tls_s(LDAP *ld, LDAPControl **serverctrls, LDAPControl **clientctrls);
LDAPAttributeType *__fastcall ldap_str2attributetype(const char *s, int *code, const char **errp, const int flags);
int __fastcall ldap_str2dn(const char *str, LDAPDN **dn, unsigned int flags);
LDAPMatchingRule *__fastcall ldap_str2matchingrule(const char *s, int *code, const char **errp, const int flags);
LDAPMatchingRuleUse *__fastcall ldap_str2matchingruleuse(const char *s, int *code, const char **errp, const int flags);
LDAPObjectClass *__fastcall ldap_str2objectclass(const char *s, int *code, const char **errp, const int flags);
int __fastcall ldap_str2rdn(const char *str, LDAPRDN **rdn, char **next, unsigned int flags);
LDAPSyntax *__fastcall ldap_str2syntax(const char *s, int *code, const char **errp, const int flags);
char *__fastcall ldap_strdup(const char *);
struct berval *__fastcall ldap_syntax2bv(LDAPSyntax *syn, struct berval *bv);
const char *__fastcall ldap_syntax2name(LDAPSyntax *syn);
char *__fastcall ldap_syntax2str(LDAPSyntax *syn);
void __fastcall ldap_syntax_free(LDAPSyntax *syn);
int __fastcall ldap_unbind(LDAP *ld);
int __fastcall ldap_unbind_ext(LDAP *ld, LDAPControl **serverctrls, LDAPControl **clientctrls);
int __fastcall ldap_unbind_ext_s(LDAP *ld, LDAPControl **serverctrls, LDAPControl **clientctrls);
int __fastcall ldap_unbind_s(LDAP *ld);
void __fastcall ldap_uncache_entry(LDAP *ld, const char *dn);
void __fastcall ldap_uncache_request(LDAP *ld, int msgid);
char *__fastcall ldap_url_desc2str(LDAPURLDesc *ludp);
int __fastcall ldap_url_parse(const char *url, LDAPURLDesc **ludpp);
void __fastcall ldap_value_free(char **vals);
void __fastcall ldap_value_free_len(struct berval **vals);
int __fastcall ldap_x_mb_to_utf8(char *utf8char, const char *mbchar, size_t mbsize, int (__fastcall *ldap_f_mbtowc)(wchar_t *wchar, const char *mbchar, size_t count));
int __fastcall ldap_x_mbs_to_utf8s(char *utf8str, const char *mbstr, size_t count, size_t (__fastcall *ldap_f_mbstowcs)(wchar_t *wcstr, const char *mbstr, size_t count));
int __fastcall ldap_x_ucs4_to_utf8(ldap_ucs4_t c, char *buf);
int __fastcall ldap_x_utf8_to_mb(char *mbchar, const char *utf8char, int (__fastcall *ldap_f_wctomb)(char *mbchar, wchar_t wchar));
ldap_ucs4_t __fastcall ldap_x_utf8_to_ucs4(const char *p);
int __fastcall ldap_x_utf8_to_wc(wchar_t *wchar, const char *utf8char);
int __fastcall ldap_x_utf8s_to_mbs(char *mbstr, const char *utf8str, size_t count, size_t (__fastcall *ldap_f_wcstombs)(char *mbstr, const wchar_t *wcstr, size_t count));
int __fastcall ldap_x_utf8s_to_wcs(wchar_t *wcstr, const char *utf8str, size_t count);
int __fastcall ldap_x_wc_to_utf8(char *utf8char, wchar_t wchar, size_t count);
int __fastcall ldap_x_wcs_to_utf8s(char *utf8str, const wchar_t *wcstr, size_t count);
double __fastcall ldexp(double value, int exp);
float __fastcall ldexpf(float value, int exp);
ldiv_t __fastcall ldiv(int, int);
int __fastcall leaveok(WINDOW *, NCURSES_BOOL);
kern_return_t __fastcall ledger_create(ledger_t parent_ledger, ledger_t ledger_ledger, ledger_t *new_ledger, ledger_item_t transfer);
kern_return_t __fastcall ledger_read(ledger_t ledger, ledger_item_t *balance, ledger_item_t *limit);
kern_return_t __fastcall ledger_terminate(ledger_t ledger);
kern_return_t __fastcall ledger_transfer(ledger_t parent_ledger, ledger_t child_ledger, ledger_item_t transfer);
void __fastcall lf_addblock(struct lockf *, struct lockf *);
int __fastcall lf_advlock(struct lockf **, off_t, caddr_t, int, struct flock *, int);
int __fastcall lf_clearlock(struct lockf *);
int __fastcall lf_findoverlap(struct lockf *, struct lockf *, int, struct lockf ***, struct lockf **);
struct lockf *__fastcall lf_getblock(struct lockf *);
int __fastcall lf_getlock(struct lockf *, struct flock *);
int __fastcall lf_setlock(struct lockf *);
void __fastcall lf_split(struct lockf *, struct lockf *);
void __fastcall lf_wakelock(struct lockf *);
double __fastcall lgamma(double x);
int __fastcall link(const char *, const char *);
void __fastcall link_addr(const char *, struct sockaddr_dl *);
FIELD *__fastcall link_field(FIELD *, int, int);
FIELDTYPE *__fastcall link_fieldtype(FIELDTYPE *, FIELDTYPE *);
char *__fastcall link_ntoa(const struct sockaddr_dl *);
int __fastcall listen(int, int);
__int64 __fastcall llrint(double x);
__int64 __fastcall llrintf(float x);
__int64 __fastcall llround(double x);
__int64 __fastcall llroundf(float x);
int __fastcall load_shared_file(char *, caddr_t, u_long, caddr_t *, int, sf_mapping_t *, int *);
struct lconv *localeconv(void);
struct tm *__fastcall localtime(const time_t *);
struct tm *__fastcall localtime_r(const time_t *, struct tm *);
kern_return_t __fastcall lock_acquire(lock_set_t lock_set, int lock_id);
kern_return_t __fastcall lock_handoff(lock_set_t lock_set, int lock_id);
kern_return_t __fastcall lock_handoff_accept(lock_set_t lock_set, int lock_id);
kern_return_t __fastcall lock_make_stable(lock_set_t lock_set, int lock_id);
kern_return_t __fastcall lock_release(lock_set_t lock_set, int lock_id);
kern_return_t __fastcall lock_set_create(task_t task, lock_set_t *new_lock_set, int n_ulocks, int policy);
kern_return_t __fastcall lock_set_destroy(task_t task, lock_set_t lock_set);
kern_return_t __fastcall lock_try(lock_set_t lock_set, int lock_id);
void __fastcall lockinit(struct lock__bsd__ *, int prio, char *wmesg, int timo, int flags);
int __fastcall lockmgr(struct lock__bsd__ *, u_int flags, simple_lock_t, struct proc *p);
int __fastcall lockstatus(struct lock__bsd__ *);
double __fastcall log(double x);
double __fastcall log10(double x);
double __fastcall log1p(double x);
double __fastcall log2(double x);
char *log_errp;
char *log_trcp;
double __fastcall logb(double x);
float __fastcall logbf(float x);
void __fastcall login(struct utmp *);
int __fastcall login_tty(int);
int __fastcall logout(const char *);
void __fastcall logwtmp(const char *, const char *, const char *);
void __fastcall longjmp(jmp_buf env, int val);
void longjmperror(void);
char *longname(void);
int lrand48(void);
int __fastcall lrint(double x);
int __fastcall lrintf(float x);
int __fastcall lround(double x);
int __fastcall lroundf(float x);
off_t __fastcall lseek(int, off_t, int);
int __fastcall lstat(const char *, struct stat *);
uint64_t mach_absolute_time(void);
void __fastcall mach_error(char *str, mach_error_t error_value);
char *__fastcall mach_error_string(mach_error_t error_value);
char *__fastcall mach_error_type(mach_error_t error_value);
mach_port_t mach_host_self(void);
kern_return_t __fastcall mach_make_memory_entry(vm_map_t target_task, vm_size_t *size, vm_offset_t offset, vm_prot_t permission, mach_port_t *object_handle, mem_entry_name_port_t parent_entry);
kern_return_t __fastcall mach_make_memory_entry_64(vm_map_t target_task, memory_object_size_t *size, memory_object_offset_t offset, vm_prot_t permission, mach_port_t *object_handle, mem_entry_name_port_t parent_entry);
kern_return_t __fastcall mach_memory_object_memory_entry(host_t host, boolean_t internal, vm_size_t size, vm_prot_t permission, memory_object_t pager, mach_port_t *entry_handle);
kern_return_t __fastcall mach_memory_object_memory_entry_64(host_t host, boolean_t internal, memory_object_size_t size, vm_prot_t permission, memory_object_t pager, mach_port_t *entry_handle);
mach_msg_return_t __fastcall mach_msg(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify);
mach_msg_return_t __fastcall mach_msg_overwrite(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify, mach_msg_header_t *rcv_msg, mach_msg_size_t rcv_limit);
mach_msg_return_t __fastcall mach_msg_overwrite_trap(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify, mach_msg_header_t *rcv_msg, mach_msg_size_t rcv_limit);
mach_msg_return_t __fastcall mach_msg_trap(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify);
kern_return_t __fastcall mach_port_allocate(ipc_space_t task, mach_port_right_t right, mach_port_name_t *name);
kern_return_t __fastcall mach_port_allocate_full(ipc_space_t task, mach_port_right_t right, mach_port_t proto, mach_port_qos_t *qos, mach_port_name_t *name);
kern_return_t __fastcall mach_port_allocate_name(ipc_space_t task, mach_port_right_t right, mach_port_name_t name);
kern_return_t __fastcall mach_port_allocate_qos(ipc_space_t task, mach_port_right_t right, mach_port_qos_t *qos, mach_port_name_t *name);
kern_return_t __fastcall mach_port_deallocate(ipc_space_t task, mach_port_name_t name);
kern_return_t __fastcall mach_port_destroy(ipc_space_t task, mach_port_name_t name);
kern_return_t __fastcall mach_port_dnrequest_info(ipc_space_t task, mach_port_name_t name, unsigned int *total, unsigned int *used);
kern_return_t __fastcall mach_port_extract_member(ipc_space_t task, mach_port_name_t name, mach_port_name_t pset);
kern_return_t __fastcall mach_port_extract_right(ipc_space_t task, mach_port_name_t name, mach_msg_type_name_t msgt_name, mach_port_t *poly, mach_msg_type_name_t *polyPoly);
kern_return_t __fastcall mach_port_get_attributes(ipc_space_t task, mach_port_name_t name, mach_port_flavor_t flavor, mach_port_info_t port_info_out, mach_msg_type_number_t *port_info_outCnt);
kern_return_t __fastcall mach_port_get_refs(ipc_space_t task, mach_port_name_t name, mach_port_right_t right, mach_port_urefs_t *refs);
kern_return_t __fastcall mach_port_get_set_status(ipc_space_t task, mach_port_name_t name, mach_port_name_array_t *members, mach_msg_type_number_t *membersCnt);
kern_return_t __fastcall mach_port_get_srights(ipc_space_t task, mach_port_name_t name, mach_port_rights_t *srights);
kern_return_t __fastcall mach_port_insert_member(ipc_space_t task, mach_port_name_t name, mach_port_name_t pset);
kern_return_t __fastcall mach_port_insert_right(ipc_space_t task, mach_port_name_t name, mach_port_t poly, mach_msg_type_name_t polyPoly);
kern_return_t __fastcall mach_port_kernel_object(ipc_space_t task, mach_port_name_t name, unsigned int *object_type, vm_offset_t *object_addr);
kern_return_t __fastcall mach_port_mod_refs(ipc_space_t task, mach_port_name_t name, mach_port_right_t right, mach_port_delta_t delta);
kern_return_t __fastcall mach_port_move_member(ipc_space_t task, mach_port_name_t member, mach_port_name_t after);
kern_return_t __fastcall mach_port_names(ipc_space_t task, mach_port_name_array_t *names, mach_msg_type_number_t *namesCnt, mach_port_type_array_t *types, mach_msg_type_number_t *typesCnt);
kern_return_t __fastcall mach_port_rename(ipc_space_t task, mach_port_name_t old_name, mach_port_name_t new_name);
kern_return_t __fastcall mach_port_request_notification(ipc_space_t task, mach_port_name_t name, mach_msg_id_t msgid, mach_port_mscount_t sync, mach_port_t notify, mach_msg_type_name_t notifyPoly, mach_port_t *previous);
kern_return_t __fastcall mach_port_set_attributes(ipc_space_t task, mach_port_name_t name, mach_port_flavor_t flavor, mach_port_info_t port_info, mach_msg_type_number_t port_infoCnt);
kern_return_t __fastcall mach_port_set_mscount(ipc_space_t task, mach_port_name_t name, mach_port_mscount_t mscount);
kern_return_t __fastcall mach_port_set_seqno(ipc_space_t task, mach_port_name_t name, mach_port_seqno_t seqno);
kern_return_t __fastcall mach_port_space_info(ipc_space_t task, ipc_info_space_t *info, ipc_info_name_array_t *table_info, mach_msg_type_number_t *table_infoCnt, ipc_info_tree_name_array_t *tree_info, mach_msg_type_number_t *tree_infoCnt);
kern_return_t __fastcall mach_port_type(ipc_space_t task, mach_port_name_t name, mach_port_type_t *ptype);
kern_return_t __fastcall mach_ports_lookup(task_t target_task, mach_port_array_t *init_port_set, mach_msg_type_number_t *init_port_setCnt);
kern_return_t __fastcall mach_ports_register(task_t target_task, mach_port_array_t init_port_set, mach_msg_type_number_t init_port_setCnt);
mach_port_name_t mach_reply_port(void);
mach_port_t mach_task_self(void);
mach_port_t mach_task_self_;
mach_port_t mach_thread_self(void);
kern_return_t __fastcall mach_timebase_info(mach_timebase_info_t info);
kern_return_t __fastcall mach_vm_region_info(vm_map_t task, vm_address_t address, vm_info_region_t *region, vm_info_object_array_t *objects, mach_msg_type_number_t *objectsCnt);
kern_return_t __fastcall mach_vm_region_info_64(vm_map_t task, vm_address_t address, vm_info_region_64_t *region, vm_info_object_array_t *objects, mach_msg_type_number_t *objectsCnt);
kern_return_t __fastcall mach_wait_until(uint64_t deadline);
kern_return_t __fastcall macx_swapoff(char *name, int flags);
kern_return_t __fastcall macx_swapon(char *name, int flags, int size, int priority);
kern_return_t __fastcall macx_triggers(int hi_water, int low_water, int flags, mach_port_t alert_port);
int __fastcall madvise(void *, size_t, int);
int __fastcall make_key_sched(des_cblock *key, des_key_schedule schedule);
void *__fastcall malloc(size_t);
kern_return_t __fastcall map_fd(int fd, vm_offset_t offset, vm_offset_t *addr, boolean_t find_space, vm_size_t numbytes);
mach_port_t master_device_port;
int __fastcall matherr(struct exception *);
int __fastcall mblen(const char *, size_t);
char *__fastcall mbmb(const char *, char *);
char *__fastcall mbrrune(const char *, rune_t);
char *__fastcall mbrune(const char *, rune_t);
size_t __fastcall mbstowcs(wchar_t *, const char *, size_t);
int __fastcall mbtowc(wchar_t *, const char *, size_t);
simple_lock_data_t mbuf_slock;
int __fastcall mcprint(char *, int);
void *__fastcall memccpy(void *, const void *, int, size_t);
void *__fastcall memchr(const void *, int, size_t);
int __fastcall memcmp(const void *, const void *, size_t);
void *__fastcall memcpy(void *, const void *, size_t);
void *__fastcall memmove(void *, const void *, size_t);
void *__fastcall memset(void *, int, size_t);
chtype __fastcall menu_back(const MENU *);
int __fastcall menu_driver(MENU *, int);
chtype __fastcall menu_fore(const MENU *);
void __fastcall menu_format(const MENU *, int *, int *);
chtype __fastcall menu_grey(const MENU *);
Menu_Hook __fastcall menu_init(const MENU *);
ITEM **__fastcall menu_items(const MENU *);
const char *__fastcall menu_mark(const MENU *);
Menu_Options __fastcall menu_opts(const MENU *);
int __fastcall menu_opts_off(MENU *, Menu_Options);
int __fastcall menu_opts_on(MENU *, Menu_Options);
int __fastcall menu_pad(const MENU *);
char *__fastcall menu_pattern(const MENU *);
int __fastcall menu_request_by_name(const char *);
const char *__fastcall menu_request_name(int);
int __fastcall menu_spacing(const MENU *, int *, int *, int *);
WINDOW *__fastcall menu_sub(const MENU *);
Menu_Hook __fastcall menu_term(const MENU *);
void *__fastcall menu_userptr(const MENU *);
WINDOW *__fastcall menu_win(const MENU *);
int __fastcall mergesort(void *, size_t, size_t, int (__fastcall *)(const void *, const void *));
int __fastcall meta(WINDOW *, NCURSES_BOOL);
struct mbuf *mfree;
void __fastcall mig_dealloc_reply_port(mach_port_t reply_port);
mach_port_t mig_get_reply_port(void);
void __fastcall mig_put_reply_port(mach_port_t reply_port);
int __fastcall mig_strncpy(char *dest, const char *src, int len);
int __fastcall mincore(const void *, size_t, char *);
int __fastcall minherit(void *, size_t, int);
int __fastcall misc_conv(int num_msg, const struct pam_message **msgm, struct pam_response **response, void *appdata_ptr);
int __fastcall mkdir(const char *, mode_t);
char *__fastcall mkdtemp(char *);
int __fastcall mkfifo(const char *, mode_t);
int __fastcall mknod(const char *, mode_t, dev_t);
int __fastcall mkstemp(char *);
int __fastcall mkstemps(char *, int);
char *__fastcall mktemp(char *);
time_t __fastcall mktime(struct tm *);
int __fastcall mlock(const void *, size_t);
void *__fastcall mmap(void *, size_t, int, int, int, off_t);
double __fastcall modf(double x, double *iptr);
float __fastcall modff(float x, float *iptr);
void __fastcall moncontrol(int mode);
void moninit(void);
void __fastcall monitor(char *lowpc, char *highpc, char *buf, int bufsiz, int cntsiz);
void __fastcall monoutput(const char *filename);
void monreset(void);
void __fastcall monstartup(char *lowpc, char *highpc);
int __fastcall mount(const char *, const char *, int, void *);
NCURSES_BOOL __fastcall mouse_trafo(int *, int *, NCURSES_BOOL);
int __fastcall mouseinterval(int);
mmask_t __fastcall mousemask(mmask_t, mmask_t *);
int __fastcall move(int, int);
int __fastcall move_field(FIELD *, int, int);
int __fastcall move_panel(PANEL *, int, int);
int __fastcall mpool_close(MPOOL *);
void __fastcall mpool_filter(MPOOL *, void (__fastcall *)(void *, pgno_t, void *), void (__fastcall *)(void *, pgno_t, void *), void *);
void *__fastcall mpool_get(MPOOL *, pgno_t, u_int);
void *__fastcall mpool_new(MPOOL *, pgno_t *);
MPOOL *__fastcall mpool_open(DBT *, int, pgno_t, pgno_t);
int __fastcall mpool_put(MPOOL *, void *, u_int);
int __fastcall mpool_sync(MPOOL *);
int __fastcall mprotect(const void *, size_t, int);
int mrand48(void);
int __fastcall msync(void *, size_t, int);
int __fastcall munlock(const void *, size_t);
int __fastcall munmap(void *, size_t);
int __fastcall mvaddch(int, int, const chtype);
int __fastcall mvaddchnstr(int, int, const chtype *, int);
int __fastcall mvaddchstr(int, int, const chtype *);
int __fastcall mvaddnstr(int, int, const char *, int);
int __fastcall mvaddstr(int, int, const char *);
int __fastcall mvchgat(int, int, int, attr_t, __int16, const void *);
int __fastcall mvcur(int, int, int, int);
int __fastcall mvdelch(int, int);
int __fastcall mvderwin(WINDOW *, int, int);
int __fastcall mvgetch(int, int);
int __fastcall mvgetnstr(int, int, char *, int);
int __fastcall mvgetstr(int, int, char *);
int __fastcall mvhline(int, int, chtype, int);
chtype __fastcall mvinch(int, int);
int __fastcall mvinchnstr(int, int, chtype *, int);
int __fastcall mvinchstr(int, int, chtype *);
int __fastcall mvinnstr(int, int, char *, int);
int __fastcall mvinsch(int, int, chtype);
int __fastcall mvinsnstr(int, int, const char *, int);
int __fastcall mvinsstr(int, int, const char *);
int __fastcall mvinstr(int, int, char *);
int mvprintw(int, int, char *, ...);
int mvscanw(int, int, char *, ...);
int __fastcall mvvline(int, int, chtype, int);
int __fastcall mvwaddch(WINDOW *, int, int, const chtype);
int __fastcall mvwaddchnstr(WINDOW *, int, int, const chtype *, int);
int __fastcall mvwaddchstr(WINDOW *, int, int, const chtype *);
int __fastcall mvwaddnstr(WINDOW *, int, int, const char *, int);
int __fastcall mvwaddstr(WINDOW *, int, int, const char *);
int __fastcall mvwchgat(WINDOW *, int, int, int, attr_t, __int16, const void *);
int __fastcall mvwdelch(WINDOW *, int, int);
int __fastcall mvwgetch(WINDOW *, int, int);
int __fastcall mvwgetnstr(WINDOW *, int, int, char *, int);
int __fastcall mvwgetstr(WINDOW *, int, int, char *);
int __fastcall mvwhline(WINDOW *, int, int, chtype, int);
int __fastcall mvwin(WINDOW *, int, int);
chtype __fastcall mvwinch(WINDOW *, int, int);
int __fastcall mvwinchnstr(WINDOW *, int, int, chtype *, int);
int __fastcall mvwinchstr(WINDOW *, int, int, chtype *);
int __fastcall mvwinnstr(WINDOW *, int, int, char *, int);
int __fastcall mvwinsch(WINDOW *, int, int, chtype);
int __fastcall mvwinsnstr(WINDOW *, int, int, const char *, int);
int __fastcall mvwinsstr(WINDOW *, int, int, const char *);
int __fastcall mvwinstr(WINDOW *, int, int, char *);
int mvwprintw(WINDOW *, int, int, char *, ...);
int mvwscanw(WINDOW *, int, int, char *, ...);
int __fastcall mvwvline(WINDOW *, int, int, chtype, int);
mach_port_t name_server_port;
double __fastcall nan(const char *tagp);
float __fastcall nanf(const char *tagp);
int __fastcall nanosleep(const struct timespec *, struct timespec *);
int __fastcall napms(int);
double __fastcall nearbyint(double x);
float __fastcall nearbyintf(float x);
char netcls[];
char netcon[];
char netio[];
kern_return_t __fastcall netname_check_in(mach_port_t server_port, netname_name_t port_name, mach_port_t signature, mach_port_t port_id);
kern_return_t __fastcall netname_check_out(mach_port_t server_port, netname_name_t port_name, mach_port_t signature);
kern_return_t __fastcall netname_look_up(mach_port_t server_port, netname_name_t host_name, netname_name_t port_name, mach_port_t *port_id);
kern_return_t __fastcall netname_version(mach_port_t server_port, netname_name_t version);
FIELD *__fastcall new_field(int, int, int, int, int, int);
FIELDTYPE *__fastcall new_fieldtype(NCURSES_BOOL (__fastcall *const field_check)(FIELD *, const void *), NCURSES_BOOL (__fastcall *const char_check)(int, const void *));
FORM *__fastcall new_form(FIELD **);
ITEM *__fastcall new_item(const char *, const char *);
MENU *__fastcall new_menu(ITEM **);
NCURSES_BOOL __fastcall new_page(const FIELD *);
PANEL *__fastcall new_panel(WINDOW *);
int new_system_shared_regions(void);
WINDOW *__fastcall newpad(int, int);
WINDOW *newscr;
SCREEN *__fastcall newterm(char *, FILE *, FILE *);
WINDOW *__fastcall newwin(int, int, int, int);
double __fastcall nextafter(double x, double y);
float __fastcall nextafterf(float x, float y);
int __fastcall nfssvc(int, void *);
ni_status __fastcall ni_addrtag(void *, struct sockaddr_in *, ni_name *);
ni_status __fastcall ni_children(void *, ni_id *, ni_idlist *);
void *__fastcall ni_connect(struct sockaddr_in *, const char *);
ni_status __fastcall ni_create(void *, ni_id *, ni_proplist, ni_id *, ni_index);
ni_status __fastcall ni_createname(void *, ni_id *, ni_index, ni_name_const, ni_index);
ni_status __fastcall ni_createprop(void *, ni_id *, ni_property, ni_index);
ni_status __fastcall ni_destroy(void *, ni_id *, ni_id);
ni_status __fastcall ni_destroyname(void *, ni_id *, ni_index, ni_index);
ni_status __fastcall ni_destroyprop(void *, ni_id *, ni_index);
void __fastcall ni_entrylist_delete(ni_entrylist *, ni_index);
void __fastcall ni_entrylist_free(ni_entrylist *);
void __fastcall ni_entrylist_insert(ni_entrylist *, ni_entry);
const char *__fastcall ni_error(ni_status);
ni_status __fastcall ni_fancyopen(void *, ni_name_const, void **, ni_fancyopenargs *);
ni_status __fastcall ni_find(void **, ni_id *, ni_name, unsigned int);
void __fastcall ni_free(void *);
int __fastcall ni_idlist_delete(ni_idlist *, ni_index);
ni_idlist __fastcall ni_idlist_dup(const ni_idlist);
void __fastcall ni_idlist_free(ni_idlist *);
void __fastcall ni_idlist_insert(ni_idlist *, ni_index, ni_index);
ni_status __fastcall ni_list(void *, ni_id *, ni_name_const, ni_entrylist *);
ni_status __fastcall ni_listall(void *, ni_id *, ni_proplist_list *);
ni_status __fastcall ni_listprops(void *, ni_id *, ni_namelist *);
ni_status __fastcall ni_lookup(void *, ni_id *, ni_name_const, ni_name_const, ni_idlist *);
ni_status __fastcall ni_lookupprop(void *, ni_id *, ni_name_const, ni_namelist *);
ni_status __fastcall ni_lookupread(void *, ni_id *, ni_name_const, ni_name_const, ni_proplist *);
ni_name __fastcall ni_name_dup(ni_name_const);
void __fastcall ni_name_free(ni_name *);
int __fastcall ni_name_match(ni_name_const, ni_name_const);
void __fastcall ni_namelist_delete(ni_namelist *, ni_index);
ni_namelist __fastcall ni_namelist_dup(const ni_namelist);
void __fastcall ni_namelist_free(ni_namelist *);
void __fastcall ni_namelist_insert(ni_namelist *, ni_name_const, ni_index);
ni_index __fastcall ni_namelist_match(const ni_namelist, ni_name_const);
void __fastcall ni_needwrite(void *, int);
void *__fastcall ni_new(void *, const char *);
ni_status __fastcall ni_open(void *, ni_name_const, void **);
ni_status __fastcall ni_parent(void *, ni_id *, ni_index *);
ni_status __fastcall ni_pathsearch(void *, ni_id *, ni_name_const);
ni_property __fastcall ni_prop_dup(const ni_property);
void __fastcall ni_prop_free(ni_property *);
void __fastcall ni_proplist_delete(ni_proplist *, ni_index);
ni_proplist __fastcall ni_proplist_dup(const ni_proplist);
void __fastcall ni_proplist_free(ni_proplist *);
void __fastcall ni_proplist_insert(ni_proplist *, const ni_property, ni_index);
void __fastcall ni_proplist_list_free(ni_proplist_list *);
ni_index __fastcall ni_proplist_match(const ni_proplist, ni_name_const, ni_name_const);
ni_status __fastcall ni_pwdomain(void *, ni_name *);
ni_status __fastcall ni_read(void *, ni_id *, ni_proplist *);
ni_status __fastcall ni_readname(void *, ni_id *, ni_index, ni_index, ni_name *);
ni_status __fastcall ni_readprop(void *, ni_id *, ni_index, ni_namelist *);
ni_status __fastcall ni_renameprop(void *, ni_id *, ni_index, ni_name_const);
ni_status __fastcall ni_resync(void *);
ni_status __fastcall ni_root(void *, ni_id *);
ni_status __fastcall ni_search(void *, ni_id *, ni_name, ni_name, int, ni_entrylist *);
ni_status __fastcall ni_self(void *, ni_id *);
void __fastcall ni_setabort(void *, int);
ni_status __fastcall ni_setpassword(void *, ni_name_const);
void __fastcall ni_setreadtimeout(void *, int);
ni_status __fastcall ni_setuser(void *, ni_name_const);
void __fastcall ni_setwritetimeout(void *, int);
ni_status __fastcall ni_statistics(void *, ni_proplist *);
ni_status __fastcall ni_url(char *, void **, ni_id *);
ni_status __fastcall ni_write(void *, ni_id *, ni_proplist);
ni_status __fastcall ni_writename(void *, ni_id *, ni_index, ni_index, ni_name_const);
ni_status __fastcall ni_writeprop(void *, ni_id *, ni_index, ni_namelist);
void *__fastcall nibind_bind_1();
void *__fastcall nibind_bind_1_svc();
ni_status *__fastcall nibind_createclone_1();
ni_status *__fastcall nibind_createclone_1_svc();
ni_status *__fastcall nibind_createmaster_1();
ni_status *__fastcall nibind_createmaster_1_svc();
ni_status *__fastcall nibind_destroydomain_1();
ni_status *__fastcall nibind_destroydomain_1_svc();
nibind_getregister_res *__fastcall nibind_getregister_1();
nibind_getregister_res *__fastcall nibind_getregister_1_svc();
nibind_listreg_res *__fastcall nibind_listreg_1();
nibind_listreg_res *__fastcall nibind_listreg_1_svc();
void *__fastcall nibind_ping_1();
void *__fastcall nibind_ping_1_svc();
ni_status *__fastcall nibind_register_1();
ni_status *__fastcall nibind_register_1_svc();
ni_status *__fastcall nibind_unregister_1();
ni_status *__fastcall nibind_unregister_1_svc();
int __fastcall nice(int);
int nl(void);
int __fastcall nlist(const char *, struct nlist *);
nlm_res *__fastcall nlm_cancel_1();
nlm_res *__fastcall nlm_cancel_1_svc();
void *__fastcall nlm_cancel_msg_1();
void *__fastcall nlm_cancel_msg_1_svc();
void *__fastcall nlm_cancel_res_1();
void *__fastcall nlm_cancel_res_1_svc();
void *__fastcall nlm_free_all_3();
void *__fastcall nlm_free_all_3_svc();
nlm_res *__fastcall nlm_granted_1();
nlm_res *__fastcall nlm_granted_1_svc();
void *__fastcall nlm_granted_msg_1();
void *__fastcall nlm_granted_msg_1_svc();
void *__fastcall nlm_granted_res_1();
void *__fastcall nlm_granted_res_1_svc();
nlm_res *__fastcall nlm_lock_1();
nlm_res *__fastcall nlm_lock_1_svc();
void *__fastcall nlm_lock_msg_1();
void *__fastcall nlm_lock_msg_1_svc();
void *__fastcall nlm_lock_res_1();
void *__fastcall nlm_lock_res_1_svc();
nlm_res *__fastcall nlm_nm_lock_3();
nlm_res *__fastcall nlm_nm_lock_3_svc();
nlm_shareres *__fastcall nlm_share_3();
nlm_shareres *__fastcall nlm_share_3_svc();
nlm_testres *__fastcall nlm_test_1();
nlm_testres *__fastcall nlm_test_1_svc();
void *__fastcall nlm_test_msg_1();
void *__fastcall nlm_test_msg_1_svc();
void *__fastcall nlm_test_res_1();
void *__fastcall nlm_test_res_1_svc();
nlm_res *__fastcall nlm_unlock_1();
nlm_res *__fastcall nlm_unlock_1_svc();
void *__fastcall nlm_unlock_msg_1();
void *__fastcall nlm_unlock_msg_1_svc();
void *__fastcall nlm_unlock_res_1();
void *__fastcall nlm_unlock_res_1_svc();
nlm_shareres *__fastcall nlm_unshare_3();
nlm_shareres *__fastcall nlm_unshare_3_svc();
int nocbreak(void);
int __fastcall nodelay(WINDOW *, NCURSES_BOOL);
int noecho(void);
int nonl(void);
void noqiflush(void);
int noraw(void);
int __fastcall notimeout(WINDOW *, NCURSES_BOOL);
int __fastcall nrand48(unsigned __int16[3]);
unsigned int __fastcall ntohl(unsigned int);
unsigned __int16 __fastcall ntohs(unsigned __int16);
char *const numcodes[];
char *const numfnames[];
char *const numnames[];
int open(const char *, int, ...);
DIR *__fastcall opendir(const char *);
int __fastcall opendisk(const char *, int, char *, size_t, int);
void __fastcall openlog(const char *, int, int);
int __fastcall openpty(int *, int *, char *, struct termios *, struct winsize *);
char *optarg;
int opterr;
int optind;
int optopt;
int optreset;
__int16 ospeed;
int __fastcall overlay(const WINDOW *, WINDOW *);
int __fastcall overwrite(const WINDOW *, WINDOW *);
int __fastcall pair_content(__int16, __int16 *, __int16 *);
int __fastcall pam_acct_mgmt(pam_handle_t *pamh, int flags);
int __fastcall pam_authenticate(pam_handle_t *pamh, int flags);
int (__fastcall *pam_binary_handler_fn)(void *appdata, pamc_bp_t *prompt_p);
void (__fastcall *pam_binary_handler_free)(void *appdata, pamc_bp_t *prompt_p);
int __fastcall pam_chauthtok(pam_handle_t *pamh, int flags);
int __fastcall pam_close_session(pam_handle_t *pamh, int flags);
int __fastcall pam_end(pam_handle_t *pamh, int pam_status);
int __fastcall pam_fail_delay(pam_handle_t *pamh, unsigned int musec_delay);
int __fastcall pam_get_data(const pam_handle_t *pamh, const char *module_data_name, const void **data);
int __fastcall pam_get_item(const pam_handle_t *pamh, int item_type, const void **item);
int __fastcall pam_get_pass(pam_handle_t *, const char **, const char *, int);
int __fastcall pam_get_user(pam_handle_t *pamh, const char **user, const char *prompt);
const char *__fastcall pam_getenv(pam_handle_t *pamh, const char *name);
char **__fastcall pam_getenvlist(pam_handle_t *pamh);
const char *pam_misc_conv_die_line;
time_t pam_misc_conv_die_time;
int pam_misc_conv_died;
const char *pam_misc_conv_warn_line;
time_t pam_misc_conv_warn_time;
char **__fastcall pam_misc_drop_env(char **env);
int __fastcall pam_misc_paste_env(pam_handle_t *pamh, const char *const *user_env);
int __fastcall pam_misc_setenv(pam_handle_t *pamh, const char *name, const char *value, int readonly);
int __fastcall pam_open_session(pam_handle_t *pamh, int flags);
int __fastcall pam_prompt(pam_handle_t *, int, const char *, char **);
int __fastcall pam_putenv(pam_handle_t *pamh, const char *name_value);
int __fastcall pam_set_data(pam_handle_t *pamh, const char *module_data_name, void *data, void (__fastcall *cleanup)(pam_handle_t *pamh, void *data, int error_status));
int __fastcall pam_set_item(pam_handle_t *pamh, int item_type, const void *item);
int __fastcall pam_setcred(pam_handle_t *pamh, int flags);
int __fastcall pam_sm_acct_mgmt(pam_handle_t *pamh, int flags, int argc, const char **argv);
int __fastcall pam_sm_authenticate(pam_handle_t *pamh, int flags, int argc, const char **argv);
int __fastcall pam_sm_chauthtok(pam_handle_t *pamh, int flags, int argc, const char **argv);
int __fastcall pam_sm_close_session(pam_handle_t *pamh, int flags, int argc, const char **argv);
int __fastcall pam_sm_open_session(pam_handle_t *pamh, int flags, int argc, const char **argv);
int __fastcall pam_sm_setcred(pam_handle_t *pamh, int flags, int argc, const char **argv);
int __fastcall pam_start(const char *service_name, const char *user, const struct pam_conv *pam_conversation, pam_handle_t **pamh);
int __fastcall pam_std_option(int *, const char *);
const char *__fastcall pam_strerror(pam_handle_t *pamh, int errnum);
int __fastcall pamc_converse(pamc_handle_t pch, pamc_bp_t *prompt_p);
int __fastcall pamc_disable(pamc_handle_t pch, const char *agent_id);
int __fastcall pamc_end(pamc_handle_t *pch);
char **__fastcall pamc_list_agents(pamc_handle_t pch);
int __fastcall pamc_load(pamc_handle_t pch, const char *agent_id);
pamc_handle_t pamc_start(void);
PANEL *__fastcall panel_above(const PANEL *);
PANEL *__fastcall panel_below(const PANEL *);
int __fastcall panel_hidden(const PANEL *);
void *__fastcall panel_userptr(const PANEL *);
WINDOW *__fastcall panel_window(const PANEL *);
char *__fastcall pap_status();
char paranoid[];
int __fastcall pathconf(const char *, int);
int pause(void);
void __fastcall pcap_close(pcap_t *);
int __fastcall pcap_compile(pcap_t *, struct bpf_program *, char *, int, bpf_u_int32);
int __fastcall pcap_compile_nopcap(int, int, struct bpf_program *, char *, int, bpf_u_int32);
int __fastcall pcap_datalink(pcap_t *);
int __fastcall pcap_dispatch(pcap_t *, int, pcap_handler, u_char *);
void __fastcall pcap_dump(u_char *, const struct pcap_pkthdr *, const u_char *);
void __fastcall pcap_dump_close(pcap_dumper_t *);
pcap_dumper_t *__fastcall pcap_dump_open(pcap_t *, const char *);
FILE *__fastcall pcap_file(pcap_t *);
int __fastcall pcap_fileno(pcap_t *);
void __fastcall pcap_freecode(struct bpf_program *);
char *__fastcall pcap_geterr(pcap_t *);
int __fastcall pcap_is_swapped(pcap_t *);
char *__fastcall pcap_lookupdev(char *);
int __fastcall pcap_lookupnet(char *, bpf_u_int32 *, bpf_u_int32 *, char *);
int __fastcall pcap_loop(pcap_t *, int, pcap_handler, u_char *);
int __fastcall pcap_major_version(pcap_t *);
int __fastcall pcap_minor_version(pcap_t *);
const u_char *__fastcall pcap_next(pcap_t *, struct pcap_pkthdr *);
pcap_t *__fastcall pcap_open_dead(int, int);
pcap_t *__fastcall pcap_open_live(char *, int, int, int, char *);
pcap_t *__fastcall pcap_open_offline(const char *, char *);
void __fastcall pcap_perror(pcap_t *, char *);
int __fastcall pcap_setfilter(pcap_t *, struct bpf_program *);
int __fastcall pcap_snapshot(pcap_t *);
int __fastcall pcap_stats(pcap_t *, struct pcap_stat *);
char *__fastcall pcap_strerror(int);
int __fastcall pclose(FILE *);
int __fastcall pechochar(WINDOW *, const chtype);
char *__fastcall percent_x();
void __fastcall perror(const char *);
void __fastcall pfctlinput(int, struct sockaddr *);
kern_return_t __fastcall pid_for_task(mach_port_t t, int *x);
int __fastcall pidlock(const char *, int, pid_t *, const char *);
int __fastcall pipe(int *);
struct pmaplist *__fastcall pmap_getmaps(struct sockaddr_in *);
u_short __fastcall pmap_getport(struct sockaddr_in *, u_long, u_long, u_int);
enum clnt_stat __fastcall pmap_rmtcall(struct sockaddr_in *, u_long, u_long, u_long, xdrproc_t, caddr_t, xdrproc_t, caddr_t, struct timeval, u_long *);
int __fastcall pmap_set(u_long, u_long, int, int);
int __fastcall pmap_unset(u_long, u_long);
int __fastcall pnoutrefresh(WINDOW *, int, int, int, int, int, int);
FILE *__fastcall popen(const char *, const char *);
void __fastcall port_obj_init(int);
struct port_obj_tentry *port_obj_table;
int port_obj_table_size;
port_stat_ptr_t port_stat_cur;
port_stat_ptr_t port_stat_end;
struct mutex port_stat_lock;
int __fastcall pos_form_cursor(FORM *);
int __fastcall pos_menu_cursor(const MENU *);
int __fastcall posix_madvise(void *, size_t, int);
int __fastcall post_form(FORM *);
int __fastcall post_menu(MENU *);
double __fastcall pow(double x, double y);
ssize_t __fastcall pread(int, void *, size_t, off_t);
int __fastcall prefresh(WINDOW *, int, int, int, int, int, int);
int printf(const char *, ...);
int printw(char *, ...);
void __fastcall process_options();
kern_return_t __fastcall processor_assign(processor_t processor, processor_set_t new_set, boolean_t wait);
kern_return_t __fastcall processor_control(processor_t processor, processor_info_t processor_cmd, mach_msg_type_number_t processor_cmdCnt);
kern_return_t __fastcall processor_exit(processor_t processor);
kern_return_t __fastcall processor_get_assignment(processor_t processor, processor_set_name_t *assigned_set);
kern_return_t __fastcall processor_info(processor_t processor, processor_flavor_t flavor, host_t *host, processor_info_t processor_info_out, mach_msg_type_number_t *processor_info_outCnt);
kern_return_t __fastcall processor_set_create(host_t host, processor_set_t *new_set, processor_set_name_t *new_name);
kern_return_t __fastcall processor_set_default(host_t host, processor_set_name_t *default_set);
kern_return_t __fastcall processor_set_destroy(processor_set_t set);
kern_return_t __fastcall processor_set_info(processor_set_name_t set_name, int flavor, host_t *host, processor_set_info_t info_out, mach_msg_type_number_t *info_outCnt);
kern_return_t __fastcall processor_set_max_priority(processor_set_t processor_set, int max_priority, boolean_t change_threads);
kern_return_t __fastcall processor_set_policy_control(processor_set_t pset, processor_set_flavor_t flavor, processor_set_info_t policy_info, mach_msg_type_number_t policy_infoCnt, boolean_t change);
kern_return_t __fastcall processor_set_policy_disable(processor_set_t processor_set, int policy, boolean_t change_threads);
kern_return_t __fastcall processor_set_policy_enable(processor_set_t processor_set, int policy);
kern_return_t __fastcall processor_set_stack_usage(processor_set_t pset, unsigned int *total, vm_size_t *space, vm_size_t *resident, vm_size_t *maxusage, vm_offset_t *maxstack);
kern_return_t __fastcall processor_set_statistics(processor_set_name_t pset, processor_set_flavor_t flavor, processor_set_info_t info_out, mach_msg_type_number_t *info_outCnt);
kern_return_t __fastcall processor_set_tasks(processor_set_t processor_set, task_array_t *task_list, mach_msg_type_number_t *task_listCnt);
kern_return_t __fastcall processor_set_threads(processor_set_t processor_set, thread_act_array_t *thread_list, mach_msg_type_number_t *thread_listCnt);
kern_return_t __fastcall processor_start(processor_t processor);
int __fastcall profil(char *, int, int, int);
void __fastcall profile_abandon(profile_t profile);
int __fastcall profile_add_relation(profile_t profile, const char **names, const char *new_value);
int __fastcall profile_clear_relation(profile_t profile, const char **names);
int __fastcall profile_flush(profile_t profile);
void __fastcall profile_free_list(char **list);
int __fastcall profile_get_boolean(profile_t profile, const char *name, const char *subname, const char *subsubname, int def_val, int *ret_default);
int __fastcall profile_get_integer(profile_t profile, const char *name, const char *subname, const char *subsubname, int def_val, int *ret_default);
int __fastcall profile_get_relation_names(profile_t profile, const char **names, char ***ret_names);
int __fastcall profile_get_string(profile_t profile, const char *name, const char *subname, const char *subsubname, const char *def_val, char **ret_string);
int __fastcall profile_get_subsection_names(profile_t profile, const char **names, char ***ret_names);
int __fastcall profile_get_values(profile_t profile, const char **names, char ***ret_values);
int __fastcall profile_init(const_profile_filespec_t *files, profile_t *ret_profile);
int __fastcall profile_init_path(const_profile_filespec_list_t filelist, profile_t *ret_profile);
int __fastcall profile_iterator(void **iter_p, char **ret_name, char **ret_value);
int __fastcall profile_iterator_create(profile_t profile, const char **names, int flags, void **ret_iter);
void __fastcall profile_iterator_free(void **iter_p);
void __fastcall profile_release(profile_t profile);
void __fastcall profile_release_string(char *str);
int __fastcall profile_rename_section(profile_t profile, const char **names, const char *new_name);
int __fastcall profile_update_relation(profile_t profile, const char **names, const char *old_value, const char *new_value);
void __fastcall psignal(unsigned int, const char *);
int __fastcall pthread_attr_destroy(pthread_attr_t *attr);
int __fastcall pthread_attr_getdetachstate(const pthread_attr_t *attr, int *detachstate);
int __fastcall pthread_attr_getinheritsched(const pthread_attr_t *attr, int *inheritsched);
int __fastcall pthread_attr_getschedparam(const pthread_attr_t *attr, struct sched_param *param);
int __fastcall pthread_attr_getschedpolicy(const pthread_attr_t *attr, int *policy);
int __fastcall pthread_attr_getscope(pthread_attr_t *, int *);
int __fastcall pthread_attr_getstack(const pthread_attr_t *attr, void **stackaddr, size_t *stacksize);
int __fastcall pthread_attr_getstackaddr(const pthread_attr_t *attr, void **stackaddr);
int __fastcall pthread_attr_getstacksize(const pthread_attr_t *attr, size_t *stacksize);
int __fastcall pthread_attr_init(pthread_attr_t *attr);
int __fastcall pthread_attr_setdetachstate(pthread_attr_t *attr, int detachstate);
int __fastcall pthread_attr_setinheritsched(pthread_attr_t *attr, int inheritsched);
int __fastcall pthread_attr_setschedparam(pthread_attr_t *attr, const struct sched_param *param);
int __fastcall pthread_attr_setschedpolicy(pthread_attr_t *attr, int policy);
int __fastcall pthread_attr_setscope(pthread_attr_t *, int);
int __fastcall pthread_attr_setstack(pthread_attr_t *attr, void *stackaddr, size_t stacksize);
int __fastcall pthread_attr_setstackaddr(pthread_attr_t *attr, void *stackaddr);
int __fastcall pthread_attr_setstacksize(pthread_attr_t *attr, size_t stacksize);
int __fastcall pthread_cancel(pthread_t thread);
int __fastcall pthread_cond_broadcast(pthread_cond_t *cond);
int __fastcall pthread_cond_destroy(pthread_cond_t *cond);
int __fastcall pthread_cond_init(pthread_cond_t *cond, const pthread_condattr_t *attr);
int __fastcall pthread_cond_signal(pthread_cond_t *cond);
int __fastcall pthread_cond_signal_thread_np(pthread_cond_t *, pthread_t);
int __fastcall pthread_cond_timedwait(pthread_cond_t *cond, pthread_mutex_t *mutex, const struct timespec *abstime);
int __fastcall pthread_cond_timedwait_relative_np(pthread_cond_t *cond, pthread_mutex_t *mutex, const struct timespec *reltime);
int __fastcall pthread_cond_wait(pthread_cond_t *cond, pthread_mutex_t *mutex);
int __fastcall pthread_condattr_destroy(pthread_condattr_t *attr);
int __fastcall pthread_condattr_getpshared(const pthread_condattr_t *attr, int *pshared);
int __fastcall pthread_condattr_init(pthread_condattr_t *attr);
int __fastcall pthread_condattr_setpshared(pthread_condattr_t *attr, int pshared);
int __fastcall pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(__fastcall *start_routine)(void *), void *arg);
int __fastcall pthread_create_suspended_np(pthread_t *thread, const pthread_attr_t *attr, void *(__fastcall *start_routine)(void *), void *arg);
int __fastcall pthread_detach(pthread_t thread);
int __fastcall pthread_equal(pthread_t t1, pthread_t t2);
void __fastcall pthread_exit(void *value_ptr);
void *__fastcall pthread_get_stackaddr_np(pthread_t);
size_t __fastcall pthread_get_stacksize_np(pthread_t);
int pthread_getconcurrency(void);
int __fastcall pthread_getschedparam(pthread_t thread, int *policy, struct sched_param *param);
void *__fastcall pthread_getspecific(pthread_key_t key);
int pthread_is_threaded_np(void);
int __fastcall pthread_join(pthread_t thread, void **value_ptr);
int __fastcall pthread_key_create(pthread_key_t *key, void (__fastcall *destructor)(void *));
int __fastcall pthread_key_delete(pthread_key_t key);
int __fastcall pthread_kill(pthread_t, int);
mach_port_t __fastcall pthread_mach_thread_np(pthread_t);
int pthread_main_np(void);
int __fastcall pthread_mutex_destroy(pthread_mutex_t *mutex);
int __fastcall pthread_mutex_getprioceiling(const pthread_mutex_t *mutex, int *prioceiling);
int __fastcall pthread_mutex_init(pthread_mutex_t *mutex, const pthread_mutexattr_t *attr);
int __fastcall pthread_mutex_lock(pthread_mutex_t *mutex);
int __fastcall pthread_mutex_setprioceiling(pthread_mutex_t *mutex, int prioceiling, int *old_prioceiling);
int __fastcall pthread_mutex_trylock(pthread_mutex_t *mutex);
int __fastcall pthread_mutex_unlock(pthread_mutex_t *mutex);
int __fastcall pthread_mutexattr_destroy(pthread_mutexattr_t *attr);
int __fastcall pthread_mutexattr_getprioceiling(const pthread_mutexattr_t *attr, int *prioceiling);
int __fastcall pthread_mutexattr_getprotocol(const pthread_mutexattr_t *attr, int *protocol);
int __fastcall pthread_mutexattr_getpshared(const pthread_mutexattr_t *attr, int *pshared);
int __fastcall pthread_mutexattr_gettype(const pthread_mutexattr_t *attr, int *type);
int __fastcall pthread_mutexattr_init(pthread_mutexattr_t *attr);
int __fastcall pthread_mutexattr_setprioceiling(pthread_mutexattr_t *attr, int prioceiling);
int __fastcall pthread_mutexattr_setprotocol(pthread_mutexattr_t *attr, int protocol);
int __fastcall pthread_mutexattr_setpshared(pthread_mutexattr_t *attr, int pshared);
int __fastcall pthread_mutexattr_settype(pthread_mutexattr_t *attr, int type);
int __fastcall pthread_once(pthread_once_t *once_control, void (*init_routine)(void));
int __fastcall pthread_rwlock_destroy(pthread_rwlock_t *rwlock);
int __fastcall pthread_rwlock_init(pthread_rwlock_t *rwlock, const pthread_rwlockattr_t *attr);
int __fastcall pthread_rwlock_rdlock(pthread_rwlock_t *rwlock);
int __fastcall pthread_rwlock_tryrdlock(pthread_rwlock_t *rwlock);
int __fastcall pthread_rwlock_trywrlock(pthread_rwlock_t *rwlock);
int __fastcall pthread_rwlock_unlock(pthread_rwlock_t *rwlock);
int __fastcall pthread_rwlock_wrlock(pthread_rwlock_t *rwlock);
int __fastcall pthread_rwlockattr_destroy(pthread_rwlockattr_t *attr);
int __fastcall pthread_rwlockattr_getpshared(const pthread_rwlockattr_t *attr, int *pshared);
int __fastcall pthread_rwlockattr_init(pthread_rwlockattr_t *attr);
int __fastcall pthread_rwlockattr_setpshared(pthread_rwlockattr_t *attr, int pshared);
pthread_t pthread_self(void);
int __fastcall pthread_setcancelstate(int state, int *oldstate);
int __fastcall pthread_setcanceltype(int type, int *oldtype);
int __fastcall pthread_setconcurrency(int);
int __fastcall pthread_setschedparam(pthread_t thread, int policy, const struct sched_param *param);
int __fastcall pthread_setspecific(pthread_key_t key, const void *value);
int __fastcall pthread_sigmask(int, const sigset_t *, sigset_t *);
void pthread_testcancel(void);
void pthread_yield_np(void);
int __fastcall ptrace(int request, pid_t pid, caddr_t addr, int data);
unsigned int __fastcall put_align_long(unsigned int ivalue, void *ovalue);
unsigned __int16 __fastcall put_align_short(unsigned __int16 ivalue, void *ovalue);
int __fastcall put_svc_key(char *, char *, char *, char *, int, char *);
int __fastcall putc(int, FILE *);
int __fastcall putchar(int);
int __fastcall putenv(const char *);
int __fastcall putp(const char *);
int __fastcall puts(const char *);
int __fastcall putw(int, FILE *);
int __fastcall putwin(WINDOW *, FILE *);
int pw_abort(void);
void __fastcall pw_copy(int ffd, int tfd, struct passwd *pw, struct passwd *old_pw);
void __fastcall pw_edit(int notsetuid, const char *filename);
void __fastcall pw_error(const char *name, int err, int eval);
void pw_init(void);
int __fastcall pw_lock(int retries);
int pw_mkdb(void);
void pw_prompt(void);
int __fastcall pw_scan(char *bp, struct passwd *pw, int *flags);
ssize_t __fastcall pwrite(int, const void *, size_t, off_t);
void qiflush(void);
void __fastcall qsort(void *, size_t, size_t, int (__fastcall *)(const void *, const void *));
int __fastcall quotactl(char *, int, int, caddr_t);
int __fastcall radixsort(const unsigned __int8 **, int, const unsigned __int8 *, unsigned int);
int __fastcall raise(int);
int rand(void);
int __fastcall rand_r(unsigned int *);
int random(void);
int raw(void);
int __fastcall rcmd(char **, int, const char *, const char *, const char *, int *);
char *__fastcall re_comp(const char *);
int __fastcall re_exec(const char *);
ssize_t __fastcall read(int, void *, size_t);
void __fastcall read_random(void *buffer, u_int numBytes);
int __fastcall read_service_key(char *, char *, char *, int, char *, char *);
struct dirent *__fastcall readdir(DIR *);
int __fastcall readdir_r(DIR *, struct dirent *, struct dirent **);
int __fastcall readlink(const char *, char *, int);
ssize_t __fastcall readv(int, const struct iovec *, int);
void *__fastcall realloc(void *, size_t);
void *__fastcall reallocf(void *, size_t);
char *__fastcall realpath(const char *, char resolved_path[]);
int __fastcall reboot(int);
ssize_t __fastcall recv(int, void *, size_t, int);
ssize_t __fastcall recvfrom(int, void *, size_t, int, struct sockaddr *, int *);
ssize_t __fastcall recvmsg(int, struct msghdr *, int);
int __fastcall redrawwin(WINDOW *);
int refresh(void);
void __fastcall refuse();
int __fastcall regcomp(regex_t *, const char *, int);
size_t __fastcall regerror(int, const regex_t *, char *, size_t);
int __fastcall regexec(const regex_t *, const char *, size_t, regmatch_t[], int);
void __fastcall regfree(regex_t *);
double __fastcall remainder(double x, double y);
float __fastcall remainderf(float x, float y);
int __fastcall remove(const char *);
errcode_t __fastcall remove_error_table(const struct error_table *et);
double __fastcall remquo(double x, double y, int *quo);
float __fastcall remquof(float x, float y, int *quo);
int __fastcall rename(const char *, const char *);
int __fastcall replace_panel(PANEL *, WINDOW *);
struct request_info *request_init(struct request_info *, ...);
struct request_info *request_set(struct request_info *, ...);
int res_init(void);
int __fastcall res_mkquery(int, const char *, int, int, const u_char *, int, const u_char *, u_char *, int);
int __fastcall res_query(const char *, int, int, u_char *, int);
int __fastcall res_querydomain(const char *, const char *, int, int, u_char *, int);
int __fastcall res_search(const char *, int, int, u_char *, int);
int __fastcall res_send(const u_char *, int, u_char *, int);
com_err_handler_t reset_com_err_hook(void);
int reset_prog_mode(void);
int __fastcall reset_shared_file(caddr_t *, int, sf_mapping_t *);
int reset_shell_mode(void);
int resetty(void);
int resident;
int __fastcall resize_term(int, int);
int __fastcall resizeterm(int, int);
int __fastcall restartterm(char *, int, int *);
int __fastcall revoke(const char *);
void __fastcall rewind(FILE *);
void __fastcall rewinddir(DIR *);
void __fastcall rfc931();
int rfc931_timeout;
char *__fastcall rindex(const char *, int);
double __fastcall rint(double x);
float __fastcall rintf(float x);
int __fastcall rinttol(double x);
int __fastcall ripoffline(int, int (__fastcall *init)(WINDOW *, int));
int __fastcall rmdir(const char *);
struct radix_node *__fastcall rn_addmask(void *, int, int);
struct radix_node *__fastcall rn_addroute(void *, void *, struct radix_node_head *, struct radix_node[2]);
struct radix_node *__fastcall rn_delete(void *, void *, struct radix_node_head *);
void rn_init(void);
int __fastcall rn_inithead(void **, int);
struct radix_node *__fastcall rn_lookup(void *v_arg, void *m_arg, struct radix_node_head *head);
struct radix_node *__fastcall rn_match(void *, struct radix_node_head *);
int __fastcall rn_refines(void *, void *);
double __fastcall round(double x);
float __fastcall roundf(float x);
int __fastcall roundtol(double x);
struct rpc_createerr rpc_createerr;
void __fastcall rpctest_service();
getquota_rslt *__fastcall rquotaproc_getactivequota_1();
getquota_rslt *__fastcall rquotaproc_getactivequota_1_svc();
getquota_rslt *__fastcall rquotaproc_getquota_1();
getquota_rslt *__fastcall rquotaproc_getquota_1_svc();
int __fastcall rresvport(int *);
int __fastcall ruserok(const char *, int, const char *, const char *);
utmp_array *__fastcall rusersproc_allnames_3();
utmp_array *__fastcall rusersproc_allnames_3_svc();
utmp_array *__fastcall rusersproc_names_3();
utmp_array *__fastcall rusersproc_names_3_svc();
int *__fastcall rusersproc_num_3();
int *__fastcall rusersproc_num_3_svc();
int savetty(void);
int __fastcall sb_notify(struct sockbuf *sb);
void __fastcall sballoc(struct sockbuf *sb, struct mbuf *m);
void __fastcall sbfree(struct sockbuf *sb, struct mbuf *m);
int __fastcall sblock(struct sockbuf *sb, int wf);
char *__fastcall sbrk(int);
int __fastcall sbspace(struct sockbuf *sb);
void __fastcall sbunlock(struct sockbuf *sb);
double __fastcall scalb(double x, int n);
double __fastcall scalbln(double x, int n);
float __fastcall scalblnf(float x, int n);
double __fastcall scalbn(double x, int n);
float __fastcall scalbnf(float x, int n);
int __fastcall scale_form(const FORM *, int *, int *);
int __fastcall scale_menu(const MENU *, int *, int *);
int __fastcall scandir(const char *, struct dirent ***, int (__fastcall *)(struct dirent *), int (__fastcall *)(const void *, const void *));
int scanf(const char *, ...);
int scanw(char *, ...);
int __fastcall sched_get_priority_max(int);
int __fastcall sched_get_priority_min(int);
int sched_yield(void);
int __fastcall scr_dump(const char *);
int __fastcall scr_init(const char *);
int __fastcall scr_restore(const char *);
int __fastcall scr_set(const char *);
int __fastcall scrl(int);
int __fastcall scroll(WINDOW *);
int __fastcall scrollok(WINDOW *, NCURSES_BOOL);
int __fastcall searchfs(const char *, void *, void *, unsigned int, unsigned int, void *);
unsigned __int16 *__fastcall seed48(unsigned __int16[3]);
void __fastcall seekdir(DIR *, int);
int __fastcall select(int, fd_set *, fd_set *, fd_set *, struct timeval *);
int __fastcall sem_close(sem_t *);
int __fastcall sem_destroy(sem_t *);
int __fastcall sem_getvalue(sem_t *, int *);
int __fastcall sem_init(sem_t *, int, unsigned int);
sem_t *sem_open(const char *, int, ...);
int __fastcall sem_post(sem_t *);
int __fastcall sem_trywait(sem_t *);
int __fastcall sem_unlink(const char *);
int __fastcall sem_wait(sem_t *);
kern_return_t __fastcall semaphore_create(task_t task, semaphore_t *semaphore, int policy, int value);
kern_return_t __fastcall semaphore_destroy(task_t task, semaphore_t semaphore);
kern_return_t __fastcall semaphore_operator(int options, semaphore_t wait_semaphore, semaphore_t signal_semaphore, thread_act_t thread, mach_timespec_t wait_time);
kern_return_t __fastcall semaphore_signal(semaphore_t semaphore);
kern_return_t __fastcall semaphore_signal_all(semaphore_t semaphore);
kern_return_t __fastcall semaphore_signal_all_trap(mach_port_name_t signal_name);
kern_return_t __fastcall semaphore_signal_thread(semaphore_t semaphore, thread_act_t thread_act);
kern_return_t __fastcall semaphore_signal_thread_trap(mach_port_name_t signal_name, mach_port_name_t thread_name);
kern_return_t __fastcall semaphore_signal_trap(mach_port_name_t signal_name);
kern_return_t __fastcall semaphore_timedwait(semaphore_t semaphore, mach_timespec_t wait_time);
kern_return_t __fastcall semaphore_timedwait_signal(semaphore_t wait_semaphore, semaphore_t signal_semaphore, mach_timespec_t wait_time);
kern_return_t __fastcall semaphore_timedwait_signal_trap(mach_port_name_t wait_name, mach_port_name_t signal_name, unsigned int sec, clock_res_t nsec);
kern_return_t __fastcall semaphore_timedwait_trap(mach_port_name_t wait_name, unsigned int sec, clock_res_t nsec);
kern_return_t __fastcall semaphore_wait(semaphore_t semaphore);
kern_return_t __fastcall semaphore_wait_signal(semaphore_t wait_semaphore, semaphore_t signal_semaphore);
kern_return_t __fastcall semaphore_wait_signal_trap(mach_port_name_t wait_name, mach_port_name_t signal_name);
kern_return_t __fastcall semaphore_wait_trap(mach_port_name_t wait_name);
int __fastcall semctl(int, int, int, union semun);
int __fastcall semget(key_t, int, int);
int __fastcall semop(int, struct sembuf *, unsigned int);
int semsys(int, ...);
ssize_t __fastcall send(int, const void *, size_t, int);
ssize_t __fastcall sendmsg(int, const struct msghdr *, int);
ssize_t __fastcall sendto(int, const void *, size_t, int, const struct sockaddr *, int);
mach_port_t service_port;
com_err_handler_t __fastcall set_com_err_hook(com_err_handler_t handler);
int __fastcall set_current_field(FORM *, FIELD *);
int __fastcall set_current_item(MENU *menu, ITEM *item);
TERMINAL *__fastcall set_curterm(TERMINAL *);
kern_return_t __fastcall set_dp_control_port(host_priv_t host, mach_port_t control_port);
int __fastcall set_field_back(FIELD *, chtype);
int __fastcall set_field_buffer(FIELD *, int, const char *);
int __fastcall set_field_fore(FIELD *, chtype);
int __fastcall set_field_init(FORM *, Form_Hook);
int __fastcall set_field_just(FIELD *, int);
int __fastcall set_field_opts(FIELD *, Field_Options);
int __fastcall set_field_pad(FIELD *, int);
int __fastcall set_field_status(FIELD *, NCURSES_BOOL);
int __fastcall set_field_term(FORM *, Form_Hook);
int set_field_type(FIELD *, FIELDTYPE *, ...);
int __fastcall set_field_userptr(FIELD *, void *);
int __fastcall set_fieldtype_arg(FIELDTYPE *, void *(__fastcall *const make_arg)(va_list *), void *(__fastcall *const copy_arg)(const void *), void (__fastcall *const free_arg)(void *));
int __fastcall set_fieldtype_choice(FIELDTYPE *, NCURSES_BOOL (__fastcall *const next_choice)(FIELD *, const void *), NCURSES_BOOL (__fastcall *const prev_choice)(FIELD *, const void *));
int __fastcall set_form_fields(FORM *, FIELD **);
int __fastcall set_form_init(FORM *, Form_Hook);
int __fastcall set_form_opts(FORM *, Form_Options);
int __fastcall set_form_page(FORM *, int);
int __fastcall set_form_sub(FORM *, WINDOW *);
int __fastcall set_form_term(FORM *, Form_Hook);
int __fastcall set_form_userptr(FORM *, void *);
int __fastcall set_form_win(FORM *, WINDOW *);
void __fastcall set_fp_scr(ppc_fp_scr_t fp_scr);
int __fastcall set_item_init(MENU *, void (__fastcall *)(MENU *));
int __fastcall set_item_opts(ITEM *, Item_Options);
int __fastcall set_item_term(MENU *, void (__fastcall *)(MENU *));
int __fastcall set_item_userptr(ITEM *, void *);
int __fastcall set_item_value(ITEM *, NCURSES_BOOL);
int __fastcall set_max_field(FIELD *, int);
int __fastcall set_menu_back(MENU *, chtype);
int __fastcall set_menu_fore(MENU *, chtype);
int __fastcall set_menu_format(MENU *, int, int);
int __fastcall set_menu_grey(MENU *, chtype);
int __fastcall set_menu_init(MENU *, void (__fastcall *)(MENU *));
int __fastcall set_menu_items(MENU *, ITEM **);
int __fastcall set_menu_mark(MENU *, const char *);
int __fastcall set_menu_opts(MENU *, Menu_Options);
int __fastcall set_menu_pad(MENU *, int);
int __fastcall set_menu_pattern(MENU *, const char *);
int __fastcall set_menu_spacing(MENU *, int, int, int);
int __fastcall set_menu_sub(MENU *, WINDOW *);
int __fastcall set_menu_term(MENU *, void (__fastcall *)(MENU *));
int __fastcall set_menu_userptr(MENU *, void *);
int __fastcall set_menu_win(MENU *, WINDOW *);
int __fastcall set_new_page(FIELD *, NCURSES_BOOL);
int __fastcall set_panel_userptr(PANEL *, void *);
SCREEN *__fastcall set_term(SCREEN *);
int __fastcall set_top_row(MENU *, int);
int __fastcall setattrlist(const char *, void *, void *, size_t, unsigned int);
void __fastcall setbuf(FILE *, char *);
void __fastcall setbuffer(FILE *, char *, int);
int __fastcall setegid(gid_t);
int __fastcall setenv(const char *, const char *, int);
int __fastcall seteuid(uid_t);
int setfsent(void);
int __fastcall setgid(gid_t);
int setgrent(void);
void __fastcall setgrfile(const char *);
int __fastcall setgroupent(int);
int __fastcall setgroups(int, const gid_t *);
void __fastcall sethostent(int);
void __fastcall sethostid(int);
int __fastcall sethostname(const char *, int);
void __fastcall setinvalidrune(rune_t);
int __fastcall setitimer(int, const struct itimerval *, struct itimerval *);
int __fastcall setjmp(jmp_buf env);
int __fastcall setkey(const char *);
int __fastcall setlinebuf(FILE *);
char *__fastcall setlocale(int, const char *);
int __fastcall setlogin(const char *);
int __fastcall setlogmask(int);
void *__fastcall setmode(const char *);
void __fastcall setnetent(int);
int __fastcall setpassent(int);
int __fastcall setpgid(pid_t, pid_t);
int __fastcall setpgrp(pid_t pid, pid_t pgrp);
int __fastcall setpriority(int, int, int);
void __fastcall setprotoent(int);
int setpwent(void);
int __fastcall setregid(gid_t, gid_t);
int __fastcall setreuid(uid_t, uid_t);
int __fastcall setrgid(gid_t);
int __fastcall setrlimit(int, const struct rlimit *);
void __fastcall setrpcent(int stayopen);
int __fastcall setruid(uid_t);
int __fastcall setrunelocale(char *);
int __fastcall setscrreg(int, int);
void __fastcall setservent(int);
pid_t setsid(void);
int __fastcall setsockopt(int, int, int, const void *, int);
char *__fastcall setstate(char *);
int __fastcall settimeofday(const struct timeval *, const struct timezone *);
int setttyent(void);
int __fastcall setuid(uid_t);
int __fastcall setupterm(char *, int, int *);
void setusershell(void);
int __fastcall setvbuf(FILE *, char *, int, size_t);
void __fastcall shell_cmd();
int shm_open(const char *, int, ...);
int __fastcall shm_unlink(const char *);
void *__fastcall shmat(int, void *, int);
int __fastcall shmctl(int, int, struct shmid_ds *);
int __fastcall shmdt(void *);
int __fastcall shmget(key_t, int, int);
int shmsys(int, ...);
int __fastcall show_panel(PANEL *);
int __fastcall shutdown(int, int);
int __fastcall sigaction(int, const struct sigaction *, struct sigaction *);
int __fastcall sigaddset(sigset_t *, int);
int __fastcall sigblock(int);
int __fastcall sigdelset(sigset_t *, int);
int __fastcall sigemptyset(sigset_t *);
int __fastcall sigfillset(sigset_t *);
int __fastcall sighold(int);
int __fastcall siginterrupt(int, int);
int __fastcall sigismember(const sigset_t *, int);
void __fastcall siglongjmp(sigjmp_buf env, int val);
void (__fastcall *__fastcall signal(int, void (__fastcall *)(int)))(int);
int signgam;
double __fastcall significand(double x);
int __fastcall sigpause(int);
int __fastcall sigpending(sigset_t *);
int __fastcall sigprocmask(int, const sigset_t *, sigset_t *);
int __fastcall sigrelse(int);
int __fastcall sigreturn(struct sigcontext *);
int __fastcall sigsetjmp(sigjmp_buf env, int val);
int __fastcall sigsetmask(int);
int __fastcall sigsuspend(const sigset_t *);
int __fastcall sigvec(int, struct sigvec *, struct sigvec *);
int __fastcall sigwait(const sigset_t *, int *);
double __fastcall sin(double x);
double __fastcall sinh(double x);
char *slc_names[];
unsigned int __fastcall sleep(unsigned int);
attr_t slk_attr(void);
int __fastcall slk_attr_off(const attr_t, void *);
int __fastcall slk_attr_on(attr_t, void *);
int __fastcall slk_attr_set(const attr_t, __int16, void *);
int __fastcall slk_attroff(const chtype);
int __fastcall slk_attron(const chtype);
int __fastcall slk_attrset(const chtype);
int slk_clear(void);
int __fastcall slk_color(__int16);
int __fastcall slk_init(int);
char *__fastcall slk_label(int);
int slk_noutrefresh(void);
int slk_refresh(void);
int slk_restore(void);
int __fastcall slk_set(int, const char *, int);
int slk_touch(void);
struct sm_stat_res *__fastcall sm_mon_1();
struct sm_stat_res *__fastcall sm_mon_1_svc();
void *__fastcall sm_simu_crash_1();
void *__fastcall sm_simu_crash_1_svc();
struct sm_stat_res *__fastcall sm_stat_1();
struct sm_stat_res *__fastcall sm_stat_1_svc();
struct sm_stat *__fastcall sm_unmon_1();
struct sm_stat *__fastcall sm_unmon_1_svc();
struct sm_stat *__fastcall sm_unmon_all_1();
struct sm_stat *__fastcall sm_unmon_all_1_svc();
int snprintf(char *, size_t, const char *, ...);
void __fastcall sock_host();
void __fastcall sock_hostaddr();
void __fastcall sock_hostname();
int __fastcall socket(int, int, int);
int __fastcall socketpair(int, int, int, int *);
int __fastcall soreadable(struct socket *so);
void __fastcall sorwakeup(struct socket *so);
int __fastcall sosendallatonce(struct socket *so);
int __fastcall sowriteable(struct socket *so);
void __fastcall sowwakeup(struct socket *so);
char *__fastcall split_at();
void *__fastcall sprayproc_clear_1();
void *__fastcall sprayproc_clear_1_svc();
spraycumul *__fastcall sprayproc_get_1();
spraycumul *__fastcall sprayproc_get_1_svc();
void *__fastcall sprayproc_spray_1();
void *__fastcall sprayproc_spray_1_svc();
int sprintf(char *, const char *, ...);
double __fastcall sqrt(double x);
int __fastcall sradixsort(const unsigned __int8 **, int, const unsigned __int8 *, unsigned int);
void __fastcall srand(unsigned int);
void __fastcall srand48(int);
void __fastcall srandom(unsigned int);
int sscanf(const char *, const char *, ...);
int standend(void);
int standout(void);
int start_color(void);
int __fastcall stat(const char *, struct stat *);
int __fastcall statfs(const char *, struct statfs *);
const adb_kb_map_t std_adb_kb_map;
WINDOW *stdscr;
int __fastcall strcasecmp(const char *, const char *);
char *__fastcall strcat(char *, const char *);
char *__fastcall strchr(const char *, int);
int __fastcall strcmp(const char *, const char *);
char *const strcodes[];
int __fastcall strcoll(const char *, const char *);
char *__fastcall strcpy(char *, const char *);
size_t __fastcall strcspn(const char *, const char *);
char *__fastcall strdup(const char *);
char *__fastcall strerror(int);
char *const strfnames[];
size_t __fastcall strftime(char *, size_t, const char *, const struct tm *);
size_t __fastcall strlcat(char *, const char *, size_t);
size_t __fastcall strlcpy(char *, const char *, size_t);
size_t __fastcall strlen(const char *);
void __fastcall strmode(int, char *);
char *const strnames[];
int __fastcall strncasecmp(const char *, const char *, size_t);
char *__fastcall strncat(char *, const char *, size_t);
int __fastcall strncmp(const char *, const char *, size_t);
char *__fastcall strncpy(char *, const char *, size_t);
char *__fastcall strpbrk(const char *, const char *);
char *__fastcall strptime(const char *, const char *, struct tm *);
char *__fastcall strrchr(const char *, int);
char *__fastcall strsep(char **, const char *);
size_t __fastcall strspn(const char *, const char *);
char *__fastcall strstr(const char *, const char *);
double __fastcall strtod(const char *, char **);
int __fastcall strtofflags(char **, u_long *, u_long *);
char *__fastcall strtok(char *, const char *);
char *__fastcall strtok_r(char *, const char *, char **);
int __fastcall strtol(const char *, char **, int);
__int64 __fastcall strtoll(const char *, char **, int);
__int64 __fastcall strtoq(const char *, char **, int);
unsigned int __fastcall strtoul(const char *, char **, int);
unsigned __int64 __fastcall strtoull(const char *, char **, int);
unsigned __int64 __fastcall strtouq(const char *, char **, int);
int __fastcall strunvis(char *, const char *);
int __fastcall strvis(char *, const char *, int);
int __fastcall strvisx(char *, const char *, size_t, int);
size_t __fastcall strxfrm(char *, const char *, size_t);
char *suboptarg;
WINDOW *__fastcall subpad(WINDOW *, int, int, int, int);
WINDOW *__fastcall subwin(WINDOW *, int, int, int, int);
fd_set svc_fdset;
void __fastcall svc_getreq(int);
void __fastcall svc_getreqset(fd_set *);
int __fastcall svc_register(SVCXPRT *, u_long, u_long, void (__fastcall *)(), int);
void svc_run(void);
int __fastcall svc_sendreply(SVCXPRT *, xdrproc_t, char *);
void __fastcall svc_unregister(u_long, u_long);
void __fastcall svcerr_auth(SVCXPRT *, enum auth_stat);
void __fastcall svcerr_decode(SVCXPRT *);
void __fastcall svcerr_noproc(SVCXPRT *);
void __fastcall svcerr_noprog(SVCXPRT *);
void __fastcall svcerr_progvers(SVCXPRT *, u_long, u_long);
void __fastcall svcerr_systemerr(SVCXPRT *);
void __fastcall svcerr_weakauth(SVCXPRT *);
SVCXPRT *svcraw_create(void);
SVCXPRT *__fastcall svctcp_create(int, u_int, u_int);
SVCXPRT *__fastcall svcudp_bufcreate(int, u_int, u_int);
SVCXPRT *__fastcall svcudp_create(int);
void __fastcall swab(const void *, void *, size_t);
int __fastcall swapon(const char *);
int __fastcall symlink(const char *, const char *);
void sync(void);
int __fastcall syncok(WINDOW *, NCURSES_BOOL);
const char *const sys_errlist[];
const int sys_nerr;
const char *const sys_siglist[32];
const char *const sys_signame[32];
int syscall(int, ...);
int __fastcall sysconf(int);
int __fastcall sysctl(int *, u_int, void *, size_t *, void *, size_t);
int __fastcall sysctlbyname(const char *, void *, size_t *, void *, size_t);
void syslog(int, const char *, ...);
int __fastcall system(const char *);
double __fastcall tan(double x);
double __fastcall tanh(double x);
kern_return_t __fastcall task_assign(task_t task, processor_set_t new_set, boolean_t assign_threads);
kern_return_t __fastcall task_assign_default(task_t task, boolean_t assign_threads);
kern_return_t __fastcall task_create(task_t target_task, ledger_array_t ledgers, mach_msg_type_number_t ledgersCnt, boolean_t inherit_memory, task_t *child_task);
kern_return_t __fastcall task_for_pid(mach_port_t target_tport, int pid, mach_port_t *t);
kern_return_t __fastcall task_get_assignment(task_t task, processor_set_name_t *assigned_set);
kern_return_t __fastcall task_get_emulation_vector(task_t task, int *vector_start, emulation_vector_t *emulation_vector, mach_msg_type_number_t *emulation_vectorCnt);
kern_return_t __fastcall task_get_exception_ports(task_t task, exception_mask_t exception_mask, exception_mask_array_t masks, mach_msg_type_number_t *masksCnt, exception_handler_array_t old_handlers, exception_behavior_array_t old_behaviors, exception_flavor_array_t old_flavors);
kern_return_t __fastcall task_get_special_port(task_t task, int which_port, mach_port_t *special_port);
kern_return_t __fastcall task_info(task_t target_task, task_flavor_t flavor, task_info_t task_info_out, mach_msg_type_number_t *task_info_outCnt);
kern_return_t __fastcall task_policy(task_t task, policy_t policy, policy_base_t base, mach_msg_type_number_t baseCnt, boolean_t set_limit, boolean_t change);
kern_return_t __fastcall task_policy_get(task_t task, task_policy_flavor_t flavor, task_policy_t policy_info, mach_msg_type_number_t *policy_infoCnt, boolean_t *get_default);
kern_return_t __fastcall task_policy_set(task_t task, task_policy_flavor_t flavor, task_policy_t policy_info, mach_msg_type_number_t policy_infoCnt);
kern_return_t __fastcall task_resume(task_t target_task);
kern_return_t __fastcall task_sample(task_t task, mach_port_t reply);
mach_port_name_t task_self_trap(void);
kern_return_t __fastcall task_set_emulation(task_t target_port, vm_address_t routine_entry_pt, int routine_number);
kern_return_t __fastcall task_set_emulation_vector(task_t task, int vector_start, emulation_vector_t emulation_vector, mach_msg_type_number_t emulation_vectorCnt);
kern_return_t __fastcall task_set_exception_ports(task_t task, exception_mask_t exception_mask, mach_port_t new_port, exception_behavior_t behavior, thread_state_flavor_t new_flavor);
kern_return_t __fastcall task_set_info(task_t target_task, task_flavor_t flavor, task_info_t task_info_in, mach_msg_type_number_t task_info_inCnt);
kern_return_t __fastcall task_set_policy(task_t task, processor_set_t pset, policy_t policy, policy_base_t base, mach_msg_type_number_t baseCnt, policy_limit_t limit, mach_msg_type_number_t limitCnt, boolean_t change);
kern_return_t __fastcall task_set_port_space(ipc_space_t task, int table_entries);
kern_return_t __fastcall task_set_ras_pc(task_t target_task, vm_address_t basepc, vm_address_t boundspc);
kern_return_t __fastcall task_set_special_port(task_t task, int which_port, mach_port_t special_port);
kern_return_t __fastcall task_suspend(task_t target_task);
kern_return_t __fastcall task_swap_exception_ports(task_t task, exception_mask_t exception_mask, mach_port_t new_port, exception_behavior_t behavior, thread_state_flavor_t new_flavor, exception_mask_array_t masks, mach_msg_type_number_t *masksCnt, exception_handler_array_t old_handlerss, exception_behavior_array_t old_behaviors, exception_flavor_array_t old_flavors);
kern_return_t __fastcall task_swappable(host_priv_t host_priv, task_t target_task, boolean_t make_swappable);
kern_return_t __fastcall task_terminate(task_t target_task);
kern_return_t __fastcall task_threads(task_t target_task, thread_act_array_t *act_list, mach_msg_type_number_t *act_listCnt);
kern_return_t __fastcall task_wire(vm_map_t target_task, boolean_t must_wire);
int __fastcall tcdrain(int);
int __fastcall tcflow(int, int);
int __fastcall tcflush(int, int);
int __fastcall tcgetattr(int, struct termios *);
pid_t __fastcall tcgetpgrp(int);
TclPlatStubs *tclPlatStubsPtr;
TclStubs *tclStubsPtr;
struct tcpd_context tcpd_context;
void tcpd_jump(char *, ...);
void tcpd_warn(char *, ...);
int __fastcall tcsendbreak(int, int);
int __fastcall tcsetattr(int, int, const struct termios *);
int __fastcall tcsetpgrp(int, pid_t);
char *telcmds[];
int __fastcall telldir(const DIR *);
char *__fastcall tempnam(const char *, const char *);
attr_t term_attrs(void);
chtype termattrs(void);
char *termname(void);
double __fastcall tgamma(double x);
int __fastcall tgetent(char *, const char *);
int __fastcall tgetflag(char *);
int __fastcall tgetnum(char *);
char *__fastcall tgetstr(char *, char **);
char *__fastcall tgoto(const char *, int, int);
kern_return_t __fastcall thread_abort(thread_act_t target_act);
kern_return_t __fastcall thread_abort_safely(thread_act_t target_act);
kern_return_t __fastcall thread_assign(thread_act_t thread, processor_set_t new_set);
kern_return_t __fastcall thread_assign_default(thread_act_t thread);
kern_return_t __fastcall thread_create(task_t parent_task, thread_act_t *child_act);
kern_return_t __fastcall thread_create_running(task_t parent_task, thread_state_flavor_t flavor, thread_state_t new_state, mach_msg_type_number_t new_stateCnt, thread_act_t *child_act);
kern_return_t __fastcall thread_depress_abort(thread_act_t thread);
kern_return_t __fastcall thread_get_assignment(thread_act_t thread, processor_set_name_t *assigned_set);
kern_return_t __fastcall thread_get_exception_ports(thread_act_t thread, exception_mask_t exception_mask, exception_mask_array_t masks, mach_msg_type_number_t *masksCnt, exception_handler_array_t old_handlers, exception_behavior_array_t old_behaviors, exception_flavor_array_t old_flavors);
kern_return_t __fastcall thread_get_special_port(thread_act_t thr_act, int which_port, mach_port_t *special_port);
kern_return_t __fastcall thread_get_state(thread_act_t target_act, thread_state_flavor_t flavor, thread_state_t old_state, mach_msg_type_number_t *old_stateCnt);
kern_return_t __fastcall thread_info(thread_act_t target_act, thread_flavor_t flavor, thread_info_t thread_info_out, mach_msg_type_number_t *thread_info_outCnt);
kern_return_t __fastcall thread_policy(thread_act_t thr_act, policy_t policy, policy_base_t base, mach_msg_type_number_t baseCnt, boolean_t set_limit);
kern_return_t __fastcall thread_policy_get(thread_act_t thread, thread_policy_flavor_t flavor, thread_policy_t policy_info, mach_msg_type_number_t *policy_infoCnt, boolean_t *get_default);
kern_return_t __fastcall thread_policy_set(thread_act_t thread, thread_policy_flavor_t flavor, thread_policy_t policy_info, mach_msg_type_number_t policy_infoCnt);
kern_return_t __fastcall thread_resume(thread_act_t target_act);
kern_return_t __fastcall thread_sample(thread_act_t thread, mach_port_t reply);
mach_port_name_t thread_self_trap(void);
kern_return_t __fastcall thread_set_exception_ports(thread_act_t thread, exception_mask_t exception_mask, mach_port_t new_port, exception_behavior_t behavior, thread_state_flavor_t new_flavor);
kern_return_t __fastcall thread_set_policy(thread_act_t thr_act, processor_set_t pset, policy_t policy, policy_base_t base, mach_msg_type_number_t baseCnt, policy_limit_t limit, mach_msg_type_number_t limitCnt);
kern_return_t __fastcall thread_set_special_port(thread_act_t thr_act, int which_port, mach_port_t special_port);
kern_return_t __fastcall thread_set_state(thread_act_t target_act, thread_state_flavor_t flavor, thread_state_t new_state, mach_msg_type_number_t new_stateCnt);
kern_return_t __fastcall thread_suspend(thread_act_t target_act);
kern_return_t __fastcall thread_swap_exception_ports(thread_act_t thread, exception_mask_t exception_mask, mach_port_t new_port, exception_behavior_t behavior, thread_state_flavor_t new_flavor, exception_mask_array_t masks, mach_msg_type_number_t *masksCnt, exception_handler_array_t old_handlers, exception_behavior_array_t old_behaviors, exception_flavor_array_t old_flavors);
kern_return_t __fastcall thread_switch(mach_port_name_t thread_name, int option, mach_msg_timeout_t option_time);
kern_return_t __fastcall thread_terminate(thread_act_t target_act);
kern_return_t __fastcall thread_wire(host_priv_t host_priv, thread_act_t thread, boolean_t wired);
int __fastcall tigetflag(char *);
int __fastcall tigetnum(char *);
char *__fastcall tigetstr(char *);
time_t __fastcall time(time_t *);
time_t __fastcall timegm(struct tm *const);
time_t __fastcall timelocal(struct tm *const);
void __fastcall timeout(int);
clock_t __fastcall times(struct tms *);
char *__fastcall timezone(int, int);
const char *tkt_string(void);
FILE *tmpfile(void);
char *__fastcall tmpnam(char *);
int __fastcall toascii(int);
int __fastcall tolower(int);
int __fastcall top_panel(PANEL *);
int __fastcall top_row(const MENU *);
int __fastcall touchline(WINDOW *, int, int);
int __fastcall touchwin(WINDOW *);
int __fastcall toupper(int);
char *tparm(char *, ...);
void tprintf(tpr_t, const char *fmt, ...);
void __fastcall tprintf_close(tpr_t);
tpr_t __fastcall tprintf_open(struct proc *);
int __fastcall tputs(const char *, int, int (__fastcall *)(int));
void __fastcall trace(const unsigned int);
double __fastcall trunc(double x);
int __fastcall truncate(const char *, off_t);
float __fastcall truncf(float x);
int __fastcall ttyaction(char *tty, char *act, char *user);
int __fastcall ttylock(const char *, int, pid_t *);
char *__fastcall ttymsg(struct iovec *, int, const char *, int);
char *__fastcall ttyname(int);
int ttyslot(void);
char ttytype[];
int __fastcall ttyunlock(const char *);
int __fastcall typeahead(int);
char *tzname[];
void tzset(void);
void tzsetwall(void);
unsigned int __fastcall ualarm(unsigned int, unsigned int);
off_t __fastcall ubc_blktooff(struct vnode *, daddr_t);
int __fastcall ubc_clean(struct vnode *, int);
int __fastcall ubc_clearflags(struct vnode *, int);
int __fastcall ubc_create_upl(struct vnode *, off_t, int, upl_t *, upl_page_info_t **, int);
int __fastcall ubc_destroy_named(struct vnode *);
struct ucred *__fastcall ubc_getcred(struct vnode *);
memory_object_control_t __fastcall ubc_getobject(struct vnode *, int);
memory_object_t __fastcall ubc_getpager(struct vnode *);
off_t __fastcall ubc_getsize(struct vnode *);
int __fastcall ubc_hold(struct vnode *);
void __fastcall ubc_info_deallocate(struct ubc_info *);
int __fastcall ubc_info_init(struct vnode *);
struct zone *ubc_info_zone;
int __fastcall ubc_invalidate(struct vnode *, off_t, size_t);
int __fastcall ubc_isinuse(struct vnode *, int);
int __fastcall ubc_issetflags(struct vnode *, int);
void __fastcall ubc_map(struct vnode *);
daddr_t __fastcall ubc_offtoblk(struct vnode *, off_t);
int __fastcall ubc_page_op(struct vnode *, off_t, int, vm_offset_t *, int *);
int __fastcall ubc_pushdirty(struct vnode *);
int __fastcall ubc_pushdirty_range(struct vnode *, off_t, off_t);
void __fastcall ubc_rele(struct vnode *);
int __fastcall ubc_release_named(struct vnode *);
int __fastcall ubc_setcred(struct vnode *, struct proc *);
int __fastcall ubc_setflags(struct vnode *, int);
int __fastcall ubc_setpager(struct vnode *, memory_object_t);
int __fastcall ubc_setsize(struct vnode *, off_t);
int __fastcall ubc_umount(struct mount *);
int __fastcall ubc_uncache(struct vnode *);
void __fastcall ubc_unmountall();
int __fastcall ubc_upl_abort(upl_t, int);
int __fastcall ubc_upl_abort_range(upl_t, vm_offset_t, vm_size_t, int);
int __fastcall ubc_upl_commit(upl_t);
int __fastcall ubc_upl_commit_range(upl_t, vm_offset_t, vm_size_t, int);
int __fastcall ubc_upl_map(upl_t, vm_offset_t *);
upl_page_info_t *__fastcall ubc_upl_pageinfo(upl_t);
int __fastcall ubc_upl_unmap(upl_t);
int ulimit(int, ...);
mode_t __fastcall umask(mode_t);
int __fastcall uname(struct utsname *);
char *__fastcall unctrl(chtype);
int __fastcall ungetc(int, FILE *);
int __fastcall ungetch(int);
int __fastcall ungetmouse(MEVENT *);
char unknown[];
int __fastcall unlink(const char *);
int __fastcall unmount(const char *, int);
int __fastcall unpost_form(FORM *);
int __fastcall unpost_menu(MENU *);
void __fastcall unsetenv(const char *);
int __fastcall untouchwin(WINDOW *);
int __fastcall unvis(char *, int, int *, int);
int __fastcall unwhiteout(const char *);
void update_panels(void);
int use_default_colors(void);
void __fastcall use_env(NCURSES_BOOL);
int __fastcall use_extended_names(NCURSES_BOOL);
char *__fastcall user_from_uid(unsigned int, int);
int __fastcall usleep(unsigned int);
int __fastcall utime(const char *, const struct utimbuf *);
int __fastcall utimes(const char *, const struct timeval *);
int __fastcall utrace(const void *, size_t);
void *__fastcall valloc(size_t);
int __fastcall vasprintf(char **, const char *, char *);
void __fastcall verr(int, const char *, char *);
void __fastcall verrx(int, const char *, char *);
pid_t vfork(void);
int __fastcall vfprintf(FILE *, const char *, char *);
int __fastcall vid_attr(attr_t, __int16, void *);
int __fastcall vidattr(chtype);
int __fastcall vidputs(chtype, int (__fastcall *)(int));
char *__fastcall vis(char *, int, int, int);
int __fastcall vline(chtype, int);
kern_return_t __fastcall vm_allocate(vm_map_t target_task, vm_address_t *address, vm_size_t size, int flags);
kern_return_t __fastcall vm_allocate_cpm(host_priv_t host_priv, vm_map_t task, vm_address_t *address, vm_size_t size, boolean_t anywhere);
kern_return_t __fastcall vm_behavior_set(vm_map_t target_task, vm_address_t address, vm_size_t size, vm_behavior_t new_behavior);
kern_return_t __fastcall vm_copy(vm_map_t target_task, vm_address_t source_address, vm_size_t size, vm_address_t dest_address);
kern_return_t __fastcall vm_deallocate(vm_map_t target_task, vm_address_t address, vm_size_t size);
kern_return_t __fastcall vm_inherit(vm_map_t target_task, vm_address_t address, vm_size_t size, vm_inherit_t new_inheritance);
kern_return_t __fastcall vm_machine_attribute(vm_map_t target_task, vm_address_t address, vm_size_t size, vm_machine_attribute_t attribute, vm_machine_attribute_val_t *value);
kern_return_t __fastcall vm_map(vm_map_t target_task, vm_address_t *address, vm_size_t size, vm_address_t mask, int flags, mem_entry_name_port_t object, vm_offset_t offset, boolean_t copy, vm_prot_t cur_protection, vm_prot_t max_protection, vm_inherit_t inheritance);
kern_return_t __fastcall vm_map_64(vm_map_t target_task, vm_address_t *address, vm_size_t size, vm_address_t mask, int flags, mem_entry_name_port_t object, memory_object_offset_t offset, boolean_t copy, vm_prot_t cur_protection, vm_prot_t max_protection, vm_inherit_t inheritance);
kern_return_t __fastcall vm_map_get_upl(vm_map_t target_task, vm_address_t address, vm_size_t *size, upl_t *upl, upl_page_info_array_t page_info, mach_msg_type_number_t *page_infoCnt, integer_t *flags, integer_t force_data_sync);
kern_return_t __fastcall vm_map_page_query(vm_map_t target_map, vm_offset_t offset, integer_t *disposition, integer_t *ref_count);
kern_return_t __fastcall vm_mapped_pages_info(vm_map_t task, page_address_array_t *pages, mach_msg_type_number_t *pagesCnt);
kern_return_t __fastcall vm_msync(vm_map_t target_task, vm_address_t address, vm_size_t size, vm_sync_t sync_flags);
vm_size_t vm_page_size;
kern_return_t __fastcall vm_protect(vm_map_t target_task, vm_address_t address, vm_size_t size, boolean_t set_maximum, vm_prot_t new_protection);
kern_return_t __fastcall vm_read(vm_map_t target_task, vm_address_t address, vm_size_t size, vm_offset_t *data, mach_msg_type_number_t *dataCnt);
kern_return_t __fastcall vm_read_list(vm_map_t target_task, vm_read_entry_t data_list, natural_t count);
kern_return_t __fastcall vm_read_overwrite(vm_map_t target_task, vm_address_t address, vm_size_t size, vm_address_t data, vm_size_t *outsize);
kern_return_t __fastcall vm_region(vm_map_t target_task, vm_address_t *address, vm_size_t *size, vm_region_flavor_t flavor, vm_region_info_t info, mach_msg_type_number_t *infoCnt, mach_port_t *object_name);
kern_return_t __fastcall vm_region_64(vm_map_t target_task, vm_address_t *address, vm_size_t *size, vm_region_flavor_t flavor, vm_region_info_64_t info, mach_msg_type_number_t *infoCnt, mach_port_t *object_name);
kern_return_t __fastcall vm_region_object_create(vm_map_t target_task, vm_size_t size, mach_port_t *region_object);
kern_return_t __fastcall vm_region_recurse(vm_map_t target_task, vm_address_t *address, vm_size_t *size, natural_t *nesting_depth, vm_region_recurse_info_t info, mach_msg_type_number_t *infoCnt);
kern_return_t __fastcall vm_region_recurse_64(vm_map_t target_task, vm_address_t *address, vm_size_t *size, natural_t *nesting_depth, vm_region_recurse_info_64_t info, mach_msg_type_number_t *infoCnt);
kern_return_t __fastcall vm_remap(vm_map_t target_task, vm_address_t *target_address, vm_size_t size, vm_address_t mask, boolean_t anywhere, vm_map_t src_task, vm_address_t src_address, boolean_t copy, vm_prot_t *cur_protection, vm_prot_t *max_protection, vm_inherit_t inheritance);
kern_return_t __fastcall vm_upl_map(vm_map_t target_task, upl_t upl, vm_address_t *address);
kern_return_t __fastcall vm_upl_unmap(vm_map_t target_task, upl_t upl);
kern_return_t __fastcall vm_wire(host_priv_t host_priv, vm_map_t task, vm_address_t address, vm_size_t size, vm_prot_t access);
kern_return_t __fastcall vm_write(vm_map_t target_task, vm_address_t address, vm_offset_t data, mach_msg_type_number_t dataCnt);
struct vnodeop_desc vop_abortop_desc;
struct vnodeop_desc vop_access_desc;
struct vnodeop_desc vop_advlock_desc;
struct vnodeop_desc vop_allocate_desc;
struct vnodeop_desc vop_blkatoff_desc;
struct vnodeop_desc vop_blktooff_desc;
struct vnodeop_desc vop_bmap_desc;
struct vnodeop_desc vop_bwrite_desc;
struct vnodeop_desc vop_cachedlookup_desc;
struct vnodeop_desc vop_close_desc;
struct vnodeop_desc vop_cmap_desc;
struct vnodeop_desc vop_copyfile_desc;
struct vnodeop_desc vop_create_desc;
struct vnodeop_desc vop_default_desc;
struct vnodeop_desc vop_devblocksize_desc;
struct vnodeop_desc vop_exchange_desc;
struct vnodeop_desc vop_fsync_desc;
struct vnodeop_desc vop_getattr_desc;
struct vnodeop_desc vop_getattrlist_desc;
struct vnodeop_desc vop_inactive_desc;
struct vnodeop_desc vop_ioctl_desc;
struct vnodeop_desc vop_islocked_desc;
struct vnodeop_desc vop_lease_desc;
struct vnodeop_desc vop_link_desc;
struct vnodeop_desc vop_lock_desc;
struct vnodeop_desc vop_lookup_desc;
struct vnodeop_desc vop_mkcomplex_desc;
struct vnodeop_desc vop_mkdir_desc;
struct vnodeop_desc vop_mknod_desc;
struct vnodeop_desc vop_mmap_desc;
struct vnodeop_desc vop_offtoblk_desc;
struct vnodeop_desc vop_open_desc;
struct vnodeop_desc vop_pagein_desc;
struct vnodeop_desc vop_pageout_desc;
struct vnodeop_desc vop_pathconf_desc;
struct vnodeop_desc vop_pgrd_desc;
struct vnodeop_desc vop_pgwr_desc;
struct vnodeop_desc vop_print_desc;
struct vnodeop_desc vop_read_desc;
struct vnodeop_desc vop_readdir_desc;
struct vnodeop_desc vop_readdirattr_desc;
struct vnodeop_desc vop_readlink_desc;
struct vnodeop_desc vop_reallocblks_desc;
struct vnodeop_desc vop_reclaim_desc;
struct vnodeop_desc vop_remove_desc;
struct vnodeop_desc vop_rename_desc;
struct vnodeop_desc vop_revoke_desc;
struct vnodeop_desc vop_rmdir_desc;
struct vnodeop_desc vop_searchfs_desc;
struct vnodeop_desc vop_seek_desc;
struct vnodeop_desc vop_select_desc;
struct vnodeop_desc vop_setattr_desc;
struct vnodeop_desc vop_setattrlist_desc;
struct vnodeop_desc vop_strategy_desc;
struct vnodeop_desc vop_symlink_desc;
struct vnodeop_desc vop_truncate_desc;
struct vnodeop_desc vop_unlock_desc;
struct vnodeop_desc vop_update_desc;
struct vnodeop_desc vop_valloc_desc;
struct vnodeop_desc vop_vfree_desc;
struct vnodeop_desc vop_whiteout_desc;
struct vnodeop_desc vop_write_desc;
int __fastcall vprintf(const char *, char *);
int (__fastcall *vprintf_stderr_func)(const char *format, va_list ap);
int __fastcall vscanf(const char *, char *);
int __fastcall vsnprintf(char *, size_t, const char *, char *);
int __fastcall vsprintf(char *, const char *, char *);
int __fastcall vsscanf(const char *, const char *, char *);
void __fastcall vsyslog(int, const char *, char *);
int __fastcall vw_printw(WINDOW *, char *, va_list);
int __fastcall vw_scanw(WINDOW *, char *, va_list);
void __fastcall vwarn(const char *, char *);
void __fastcall vwarnx(const char *, char *);
int __fastcall vwprintw(WINDOW *, char *, va_list);
int __fastcall vwscanw(WINDOW *, char *, va_list);
int __fastcall waddch(WINDOW *, const chtype);
int __fastcall waddchnstr(WINDOW *, const chtype *const, int);
int __fastcall waddchstr(WINDOW *, const chtype *);
int __fastcall waddnstr(WINDOW *, const char *const, int);
int __fastcall waddstr(WINDOW *, const char *);
pid_t __fastcall wait(int *);
pid_t __fastcall wait3(int *, int, struct rusage *);
pid_t __fastcall wait4(pid_t, int *, int, struct rusage *);
pid_t __fastcall waitpid(pid_t, int *, int);
void *__fastcall wallproc_wall_1();
void *__fastcall wallproc_wall_1_svc();
void warn(const char *, ...);
void warnx(const char *, ...);
int __fastcall wattr_get(WINDOW *, attr_t *, __int16 *, void *);
int __fastcall wattr_off(WINDOW *, attr_t, void *);
int __fastcall wattr_on(WINDOW *, attr_t, void *);
int __fastcall wattr_set(WINDOW *, attr_t, __int16, void *);
int __fastcall wattroff(WINDOW *, int);
int __fastcall wattron(WINDOW *, int);
int __fastcall wattrset(WINDOW *, int);
int __fastcall wbkgd(WINDOW *, const chtype);
void __fastcall wbkgdset(WINDOW *, chtype);
int __fastcall wborder(WINDOW *, chtype, chtype, chtype, chtype, chtype, chtype, chtype, chtype);
int __fastcall wchgat(WINDOW *, int, attr_t, __int16, const void *);
int __fastcall wclear(WINDOW *);
int __fastcall wclrtobot(WINDOW *);
int __fastcall wclrtoeol(WINDOW *);
int __fastcall wcolor_set(WINDOW *, __int16, void *);
size_t __fastcall wcstombs(char *, const wchar_t *, size_t);
int __fastcall wctomb(char *, wchar_t);
void __fastcall wcursyncup(WINDOW *);
int __fastcall wdelch(WINDOW *);
int __fastcall wdeleteln(WINDOW *);
int __fastcall wechochar(WINDOW *, const chtype);
NCURSES_BOOL __fastcall wenclose(const WINDOW *, int, int);
int __fastcall werase(WINDOW *);
int __fastcall wgetch(WINDOW *);
int __fastcall wgetnstr(WINDOW *, char *, int);
int __fastcall wgetstr(WINDOW *, char *);
int __fastcall whline(WINDOW *, chtype, int);
chtype __fastcall winch(WINDOW *);
int __fastcall winchnstr(WINDOW *, chtype *, int);
int __fastcall winchstr(WINDOW *, chtype *);
int __fastcall winnstr(WINDOW *, char *, int);
int __fastcall winsch(WINDOW *, chtype);
int __fastcall winsdelln(WINDOW *, int);
int __fastcall winsertln(WINDOW *);
int __fastcall winsnstr(WINDOW *, const char *, int);
int __fastcall winsstr(WINDOW *, const char *);
int __fastcall winstr(WINDOW *, char *);
NCURSES_BOOL __fastcall wmouse_trafo(const WINDOW *win, int *y, int *x, NCURSES_BOOL to_screen);
int __fastcall wmove(WINDOW *, int, int);
int __fastcall wnoutrefresh(WINDOW *);
int wprintw(WINDOW *, char *, ...);
int __fastcall wredrawln(WINDOW *, int, int);
int __fastcall wrefresh(WINDOW *);
int __fastcall wresize(WINDOW *, int, int);
ssize_t __fastcall write(int, const void *, size_t);
ssize_t __fastcall writev(int, const struct iovec *, int);
int wscanw(WINDOW *, char *, ...);
int __fastcall wscrl(WINDOW *, int);
int __fastcall wsetscrreg(WINDOW *, int, int);
int __fastcall wstandend(WINDOW *);
int __fastcall wstandout(WINDOW *);
void __fastcall wsyncdown(WINDOW *);
void __fastcall wsyncup(WINDOW *);
void __fastcall wtimeout(WINDOW *, int);
int __fastcall wtouchln(WINDOW *, int, int, int);
int __fastcall wvline(WINDOW *, chtype, int);
int __fastcall xdr_array(XDR *, char **, u_int *, u_int, u_int, xdrproc_t);
int __fastcall xdr_authunix_parms(XDR *, struct authunix_parms *);
int __fastcall xdr_bool(XDR *, int *);
int __fastcall xdr_bp_address();
int __fastcall xdr_bp_fileid_t();
int __fastcall xdr_bp_getfile_arg();
int __fastcall xdr_bp_getfile_res();
int __fastcall xdr_bp_machine_name_t();
int __fastcall xdr_bp_path_t();
int __fastcall xdr_bp_whoami_arg();
int __fastcall xdr_bp_whoami_res();
int __fastcall xdr_bytes(XDR *, char **, u_int *, u_int);
int __fastcall xdr_callhdr(XDR *, struct rpc_msg *);
int __fastcall xdr_callmsg(XDR *, struct rpc_msg *);
int __fastcall xdr_char(XDR *, char *);
int __fastcall xdr_des_block(XDR *, des_block *);
int __fastcall xdr_domainname();
int __fastcall xdr_double(XDR *, double *);
int __fastcall xdr_enum(XDR *, int *);
int __fastcall xdr_float(XDR *, float *);
void __fastcall xdr_free(xdrproc_t, void *);
int __fastcall xdr_fsh_access();
int __fastcall xdr_fsh_mode();
int __fastcall xdr_getquota_args();
int __fastcall xdr_getquota_rslt();
int __fastcall xdr_gqr_status();
int __fastcall xdr_int(XDR *, int *);
int __fastcall xdr_ip_addr_t();
int __fastcall xdr_keydat();
int __fastcall xdr_klm_holder();
int __fastcall xdr_klm_lock();
int __fastcall xdr_klm_lockargs();
int __fastcall xdr_klm_stat();
int __fastcall xdr_klm_stats();
int __fastcall xdr_klm_testargs();
int __fastcall xdr_klm_testrply();
int __fastcall xdr_klm_unlockargs();
int __fastcall xdr_long(XDR *, int *);
int __fastcall xdr_mapname();
int __fastcall xdr_mon();
int __fastcall xdr_mon_id();
int __fastcall xdr_my_id();
int __fastcall xdr_netobj();
int __fastcall xdr_ni_binding();
int __fastcall xdr_ni_children_res();
int __fastcall xdr_ni_children_stuff();
int __fastcall xdr_ni_create_args();
int __fastcall xdr_ni_create_res();
int __fastcall xdr_ni_create_stuff();
int __fastcall xdr_ni_createname_args();
int __fastcall xdr_ni_createprop_args();
int __fastcall xdr_ni_destroy_args();
int __fastcall xdr_ni_entry();
int __fastcall xdr_ni_entrylist();
int __fastcall xdr_ni_id();
int __fastcall xdr_ni_id_res();
int __fastcall xdr_ni_idlist();
int __fastcall xdr_ni_list_res();
int __fastcall xdr_ni_list_stuff();
int __fastcall xdr_ni_listall_res();
int __fastcall xdr_ni_listall_stuff();
int __fastcall xdr_ni_lookup_args();
int __fastcall xdr_ni_lookup_res();
int __fastcall xdr_ni_lookup_stuff();
int __fastcall xdr_ni_name();
int __fastcall xdr_ni_name_args();
int __fastcall xdr_ni_nameindex_args();
int __fastcall xdr_ni_namelist();
int __fastcall xdr_ni_namelist_res();
int __fastcall xdr_ni_namelist_stuff();
int __fastcall xdr_ni_object();
int __fastcall xdr_ni_object_list();
int __fastcall xdr_ni_object_node();
int __fastcall xdr_ni_parent_res();
int __fastcall xdr_ni_parent_stuff();
int __fastcall xdr_ni_prop_args();
int __fastcall xdr_ni_property();
int __fastcall xdr_ni_proplist();
int __fastcall xdr_ni_proplist_list();
int __fastcall xdr_ni_proplist_res();
int __fastcall xdr_ni_proplist_stuff();
int __fastcall xdr_ni_propname_args();
int __fastcall xdr_ni_readall_res();
int __fastcall xdr_ni_readall_stuff();
int __fastcall xdr_ni_readname_res();
int __fastcall xdr_ni_readname_stuff();
int __fastcall xdr_ni_rparent_res();
int __fastcall xdr_ni_status();
int __fastcall xdr_ni_writename_args();
int __fastcall xdr_ni_writeprop_args();
int __fastcall xdr_nibind_addrinfo();
int __fastcall xdr_nibind_bind_args();
int __fastcall xdr_nibind_clone_args();
int __fastcall xdr_nibind_getregister_res();
int __fastcall xdr_nibind_listreg_res();
int __fastcall xdr_nibind_registration();
int __fastcall xdr_nlm_cancargs();
int __fastcall xdr_nlm_holder();
int __fastcall xdr_nlm_lock();
int __fastcall xdr_nlm_lockargs();
int __fastcall xdr_nlm_notify();
int __fastcall xdr_nlm_res();
int __fastcall xdr_nlm_share();
int __fastcall xdr_nlm_shareargs();
int __fastcall xdr_nlm_shareres();
int __fastcall xdr_nlm_stat();
int __fastcall xdr_nlm_stats();
int __fastcall xdr_nlm_testargs();
int __fastcall xdr_nlm_testres();
int __fastcall xdr_nlm_testrply();
int __fastcall xdr_nlm_unlockargs();
int __fastcall xdr_opaque(XDR *, caddr_t, u_int);
int __fastcall xdr_peername();
int __fastcall xdr_pmap(XDR *, struct pmap *);
int __fastcall xdr_pmaplist(XDR *, struct pmaplist **);
int __fastcall xdr_pointer(XDR *, caddr_t *, u_int, xdrproc_t);
int __fastcall xdr_reference(XDR *, caddr_t *, u_int, xdrproc_t);
int __fastcall xdr_replymsg(XDR *, struct rpc_msg *);
int __fastcall xdr_res();
int __fastcall xdr_rmtcall_args(XDR *, struct rmtcallargs *);
int __fastcall xdr_rmtcallres(XDR *, struct rmtcallres *);
int __fastcall xdr_rquota();
int __fastcall xdr_rusers_utmp();
int __fastcall xdr_short(XDR *, __int16 *);
int __fastcall xdr_sm_name();
int __fastcall xdr_sm_stat();
int __fastcall xdr_sm_stat_res();
int __fastcall xdr_sprayarr();
int __fastcall xdr_spraycumul();
int __fastcall xdr_spraytimeval();
int __fastcall xdr_status();
int __fastcall xdr_string(XDR *, char **, u_int);
int __fastcall xdr_u_char(XDR *, u_char *);
int __fastcall xdr_u_int(XDR *, u_int *);
int __fastcall xdr_u_long(XDR *, u_long *);
int __fastcall xdr_u_short(XDR *, u_short *);
int __fastcall xdr_union(XDR *, int *, char *, struct xdr_discrim *, xdrproc_t);
int __fastcall xdr_utmp_array();
int __fastcall xdr_utmparr();
int __fastcall xdr_utmpidlearr();
int __fastcall xdr_valdat();
int __fastcall xdr_vector(XDR *, char *, u_int, u_int, xdrproc_t);
int xdr_void(void);
int __fastcall xdr_wrapstring(XDR *, char **);
int __fastcall xdr_x_passwd();
int __fastcall xdr_ypbind_binding();
int __fastcall xdr_ypbind_resp();
int __fastcall xdr_ypbind_resptype();
int __fastcall xdr_ypbind_setdom();
int __fastcall xdr_ypmap_parms();
int __fastcall xdr_ypmaplist();
int __fastcall xdr_yppasswd();
int __fastcall xdr_yppush_status();
int __fastcall xdr_yppushresp_xfr();
int __fastcall xdr_ypreq_key();
int __fastcall xdr_ypreq_nokey();
int __fastcall xdr_ypreq_xfr();
int __fastcall xdr_ypresp_all();
int __fastcall xdr_ypresp_key_val();
int __fastcall xdr_ypresp_maplist();
int __fastcall xdr_ypresp_master();
int __fastcall xdr_ypresp_order();
int __fastcall xdr_ypresp_val();
int __fastcall xdr_ypresp_xfr();
int __fastcall xdr_ypstat();
int __fastcall xdr_ypxfrstat();
void __fastcall xdrmem_create(XDR *, void *, u_int, enum xdr_op);
void __fastcall xdrrec_create(XDR *, u_int, u_int, char *, int (__fastcall *)(), int (__fastcall *)());
int __fastcall xdrrec_endofrecord(XDR *, int);
int __fastcall xdrrec_eof(XDR *);
int __fastcall xdrrec_skiprecord(XDR *);
void __fastcall xdrstdio_create(XDR *, FILE *, enum xdr_op);
char *__fastcall xgets();
void __fastcall xprt_register(SVCXPRT *);
void __fastcall xprt_unregister(SVCXPRT *);
double __fastcall y0(double x);
double __fastcall y1(double x);
double __fastcall yn(int n, double x);
int __fastcall yp_all(const char *, const char *, struct ypall_callback *);
int __fastcall yp_bind(const char *);
int __fastcall yp_first(const char *, const char *, char **, int *, char **, int *);
int __fastcall yp_get_default_domain(char **);
int __fastcall yp_maplist(const char *, struct ypmaplist **);
int __fastcall yp_master(const char *, const char *, char **);
int __fastcall yp_match(const char *, const char *, const char *, int, char **, int *);
int __fastcall yp_next(const char *, const char *, const char *, int, char **, int *, char **, int *);
int __fastcall yp_order(const char *, const char *, int *);
void __fastcall yp_unbind(const char *);
ypbind_resp *__fastcall ypbindproc_domain_2();
ypbind_resp *__fastcall ypbindproc_domain_2_svc();
void *__fastcall ypbindproc_null_2();
void *__fastcall ypbindproc_null_2_svc();
void *__fastcall ypbindproc_setdom_2();
void *__fastcall ypbindproc_setdom_2_svc();
char *__fastcall yperr_string(int);
int *__fastcall yppasswdproc_update_1();
int *__fastcall yppasswdproc_update_1_svc();
ypresp_all *__fastcall ypproc_all_2();
ypresp_all *__fastcall ypproc_all_2_svc();
void *__fastcall ypproc_clear_2();
void *__fastcall ypproc_clear_2_svc();
int *__fastcall ypproc_domain_2();
int *__fastcall ypproc_domain_2_svc();
int *__fastcall ypproc_domain_nonack_2();
int *__fastcall ypproc_domain_nonack_2_svc();
ypresp_key_val *__fastcall ypproc_first_2();
ypresp_key_val *__fastcall ypproc_first_2_svc();
ypresp_maplist *__fastcall ypproc_maplist_2();
ypresp_maplist *__fastcall ypproc_maplist_2_svc();
ypresp_master *__fastcall ypproc_master_2();
ypresp_master *__fastcall ypproc_master_2_svc();
ypresp_val *__fastcall ypproc_match_2();
ypresp_val *__fastcall ypproc_match_2_svc();
ypresp_key_val *__fastcall ypproc_next_2();
ypresp_key_val *__fastcall ypproc_next_2_svc();
void *__fastcall ypproc_null_2();
void *__fastcall ypproc_null_2_svc();
ypresp_order *__fastcall ypproc_order_2();
ypresp_order *__fastcall ypproc_order_2_svc();
ypresp_xfr *__fastcall ypproc_xfr_2();
ypresp_xfr *__fastcall ypproc_xfr_2_svc();
int __fastcall ypprot_err(unsigned int);
void *__fastcall yppushproc_null_1();
void *__fastcall yppushproc_null_1_svc();
yppushresp_xfr *__fastcall yppushproc_xfrresp_1();
yppushresp_xfr *__fastcall yppushproc_xfrresp_1_svc();
FILE *__fastcall zopen(const char *, const char *, int);
MACRO_ack ack;
MACRO_acs acs_chars_index;
MACRO_attnBufSize attnBufSize;
MACRO_bel bel;
MACRO_bootstrap bootstrap_MSG_COUNT;
MACRO_bel bs;
MACRO_can can;
MACRO_clock clock_MSG_COUNT;
MACRO_clock clock_priv_MSG_COUNT;
MACRO_clock clock_reply_MSG_COUNT;
MACRO_emask code_emask;
MACRO_controlErr controlErr;
MACRO_cr cr;
MACRO_dc1 dc1;
MACRO_dc2 dc2;
MACRO_dc3 dc3;
MACRO_dc4 dc4;
MACRO_minDSPQueueSize defaultDSPQS;
MACRO_del del;
MACRO_si dle;
$2EA0513515F7563CFBB6420CCE575C9E dot3ChipSetAMD7990;
$2EA0513515F7563CFBB6420CCE575C9E dot3ChipSetAMD79900;
$2EA0513515F7563CFBB6420CCE575C9E dot3ChipSetAMD79C940;
$D034DF41D4B9D2189D2EB2EA4C611CD6 dot3ChipSetDigitalDC21040;
$D034DF41D4B9D2189D2EB2EA4C611CD6 dot3ChipSetDigitalDC21041;
$D034DF41D4B9D2189D2EB2EA4C611CD6 dot3ChipSetDigitalDC21140;
$D034DF41D4B9D2189D2EB2EA4C611CD6 dot3ChipSetDigitalDC21140A;
$D034DF41D4B9D2189D2EB2EA4C611CD6 dot3ChipSetDigitalDC21142;
$35D4575BDD269CB2C114416BAA7558BD dot3ChipSetFujitsu86950;
$A0887B53835153F1EDF9F781696CAC39 dot3ChipSetIntel82557;
$A0887B53835153F1EDF9F781696CAC39 dot3ChipSetIntel82586;
$A0887B53835153F1EDF9F781696CAC39 dot3ChipSetIntel82596;
$955A79D8B36BA02C2AC93EA67E94FC4E dot3ChipSetNational8390;
$955A79D8B36BA02C2AC93EA67E94FC4E dot3ChipSetNationalSonic;
$C3D2D4EDCF7C6B2D868D1D9CA16C55C6 dot3ChipSetWesternDigital83C690;
$C3D2D4EDCF7C6B2D868D1D9CA16C55C6 dot3ChipSetWesternDigital83C790;
dot3Vendors dot3VendorAMD;
dot3Vendors dot3VendorDigital;
dot3Vendors dot3VendorFujitsu;
dot3Vendors dot3VendorIntel;
dot3Vendors dot3VendorNational;
dot3Vendors dot3VendorWesternDigital;
MACRO_dspAttention dspAttention;
MACRO_dspCLDeny dspCLDeny;
MACRO_dspCLInit dspCLInit;
MACRO_dspCLListen dspCLListen;
MACRO_dspCLRemove dspCLRemove;
MACRO_dspClose dspClose;
MACRO_dspInit dspInit;
MACRO_dspNewCID dspNewCID;
MACRO_dspOpen dspOpen;
MACRO_dspOptions dspOptions;
MACRO_dspRead dspRead;
MACRO_dspRemove dspRemove;
MACRO_dspReset dspReset;
MACRO_dspStatus dspStatus;
MACRO_dspWrite dspWrite;
MACRO_eAttention eAttention;
MACRO_sClosed eClosed;
MACRO_eFwdReset eFwdReset;
MACRO_eTearDown eTearDown;
MACRO_em em;
MACRO_enq enq;
MACRO_etx eot;
MACRO_errAborted errAborted;
MACRO_errAttention errAttention;
MACRO_errDSPQueueSize errDSPQueueSize;
MACRO_errENOBUFS errENOBUFS;
MACRO_errFwdReset errFwdReset;
MACRO_errOpenDenied errOpenDenied;
MACRO_errOpening errOpening;
MACRO_errRefNum errRefNum;
MACRO_errState errState;
MACRO_err err_dipc;
MACRO_err err_ipc;
MACRO_err err_ipc_compat;
MACRO_err err_kern;
MACRO_err err_local;
MACRO_err err_mach_ipc;
MACRO_err err_max_system;
MACRO_err err_server;
MACRO_err err_us;
MACRO_esc esc;
MACRO_etb etb;
MACRO_etx etx;
MACRO_bool false;
fdversion fdlibm_ieee;
fdversion fdlibm_posix;
fdversion fdlibm_svid;
fdversion fdlibm_xopen;
MACRO_fs fs;
fsh_access fsa_NONE;
fsh_access fsa_R;
fsh_access fsa_RW;
fsh_access fsa_W;
fsh_mode fsm_DN;
fsh_mode fsm_DR;
fsh_mode fsm_DRW;
fsh_mode fsm_DW;
MACRO_gs gs;
MACRO_host host_priv_MSG_COUNT;
MACRO_MSG_COUNT host_security_MSG_COUNT;
MACRO_ht ht;
MACRO_inv inv;
$1FDFCDB6B16318BF0B312BA6FA177D60 kBTBadCloseMask;
$1FDFCDB6B16318BF0B312BA6FA177D60 kBTBigKeysMask;
$1FB0C3C05C839538DC046EE3FB85DDAE kBTHeaderNode;
$1FB0C3C05C839538DC046EE3FB85DDAE kBTIndexNode;
$1FB0C3C05C839538DC046EE3FB85DDAE kBTLeafNode;
$1FB0C3C05C839538DC046EE3FB85DDAE kBTMapNode;
$1FDFCDB6B16318BF0B312BA6FA177D60 kBTVariableIndexKeysMask;
$120AC332EBC18F2A4396A3C657EB4314 kDNSServiceDiscoveryAlreadyRegistered;
$120AC332EBC18F2A4396A3C657EB4314 kDNSServiceDiscoveryBadFlagsErr;
$120AC332EBC18F2A4396A3C657EB4314 kDNSServiceDiscoveryBadParamErr;
$120AC332EBC18F2A4396A3C657EB4314 kDNSServiceDiscoveryBadReferenceErr;
$120AC332EBC18F2A4396A3C657EB4314 kDNSServiceDiscoveryBadStateErr;
$120AC332EBC18F2A4396A3C657EB4314 kDNSServiceDiscoveryInvalid;
$120AC332EBC18F2A4396A3C657EB4314 kDNSServiceDiscoveryMemFree;
$E9C6ABAFEE51821EC034C6B74D5B344E kDNSServiceDiscoveryMoreRepliesImmediately;
$120AC332EBC18F2A4396A3C657EB4314 kDNSServiceDiscoveryNameConflict;
$120AC332EBC18F2A4396A3C657EB4314 kDNSServiceDiscoveryNoCache;
$120AC332EBC18F2A4396A3C657EB4314 kDNSServiceDiscoveryNoError;
$E9C6ABAFEE51821EC034C6B74D5B344E kDNSServiceDiscoveryNoFlags;
$120AC332EBC18F2A4396A3C657EB4314 kDNSServiceDiscoveryNoMemoryErr;
$120AC332EBC18F2A4396A3C657EB4314 kDNSServiceDiscoveryNoSuchNameErr;
$120AC332EBC18F2A4396A3C657EB4314 kDNSServiceDiscoveryNotInitializedErr;
$120AC332EBC18F2A4396A3C657EB4314 kDNSServiceDiscoveryUnknownErr;
$120AC332EBC18F2A4396A3C657EB4314 kDNSServiceDiscoveryUnsupportedErr;
$120AC332EBC18F2A4396A3C657EB4314 kDNSServiceDiscoveryWaiting;
$18F39A1BE291178CAFF63DBEEBB644E5 kHFSAllocationFileID;
$18F39A1BE291178CAFF63DBEEBB644E5 kHFSAttributesFileID;
$18F39A1BE291178CAFF63DBEEBB644E5 kHFSBadBlockFileID;
$18F39A1BE291178CAFF63DBEEBB644E5 kHFSBogusExtentFileID;
$EDAEAD02DC67A4EB67219B6FB187A2BE kHFSBootVolumeInconsistentBit;
$EDAEAD02DC67A4EB67219B6FB187A2BE kHFSBootVolumeInconsistentMask;
$18F39A1BE291178CAFF63DBEEBB644E5 kHFSCatalogFileID;
$422B151CF90F7CD02DBADD7DA727FB0A kHFSCatalogKeyMaximumLength;
$422B151CF90F7CD02DBADD7DA727FB0A kHFSCatalogKeyMinimumLength;
$EDAEAD02DC67A4EB67219B6FB187A2BE kHFSCatalogNodeIDsReusedBit;
$EDAEAD02DC67A4EB67219B6FB187A2BE kHFSCatalogNodeIDsReusedMask;
$F37E133A365EB9F6FA66643137085251 kHFSExtentDensity;
$422B151CF90F7CD02DBADD7DA727FB0A kHFSExtentKeyMaximumLength;
$18F39A1BE291178CAFF63DBEEBB644E5 kHFSExtentsFileID;
$60616C0D0F3219145D1406847C7D94FB kHFSFileLockedBit;
$60616C0D0F3219145D1406847C7D94FB kHFSFileLockedMask;
$43AF380ED1E5C6639BF29287A0048170 kHFSFileRecord;
$43AF380ED1E5C6639BF29287A0048170 kHFSFileThreadRecord;
$18F39A1BE291178CAFF63DBEEBB644E5 kHFSFirstUserCatalogNodeID;
$43AF380ED1E5C6639BF29287A0048170 kHFSFolderRecord;
$43AF380ED1E5C6639BF29287A0048170 kHFSFolderThreadRecord;
$EDAEAD02DC67A4EB67219B6FB187A2BE kHFSMDBAttributesMask;
$ACDB03B0D9D598C0F761C4B16B3D1CB5 kHFSMaxFileNameChars;
$ACDB03B0D9D598C0F761C4B16B3D1CB5 kHFSMaxVolumeNameChars;
$44412BD0CE14AFC237A6D071851322F1 kHFSPlusAttrExtents;
$44412BD0CE14AFC237A6D071851322F1 kHFSPlusAttrForkData;
$44412BD0CE14AFC237A6D071851322F1 kHFSPlusAttrInlineData;
$422B151CF90F7CD02DBADD7DA727FB0A kHFSPlusAttrMinNodeSize;
$422B151CF90F7CD02DBADD7DA727FB0A kHFSPlusCatalogKeyMaximumLength;
$422B151CF90F7CD02DBADD7DA727FB0A kHFSPlusCatalogKeyMinimumLength;
$422B151CF90F7CD02DBADD7DA727FB0A kHFSPlusCatalogMinNodeSize;
$9B247B4FB8AF703C9CE314B5E47E50E3 kHFSPlusCreator;
$F37E133A365EB9F6FA66643137085251 kHFSPlusExtentDensity;
$422B151CF90F7CD02DBADD7DA727FB0A kHFSPlusExtentKeyMaximumLength;
$422B151CF90F7CD02DBADD7DA727FB0A kHFSPlusExtentMinNodeSize;
$43AF380ED1E5C6639BF29287A0048170 kHFSPlusFileRecord;
$43AF380ED1E5C6639BF29287A0048170 kHFSPlusFileThreadRecord;
$43AF380ED1E5C6639BF29287A0048170 kHFSPlusFolderRecord;
$43AF380ED1E5C6639BF29287A0048170 kHFSPlusFolderThreadRecord;
$ACDB03B0D9D598C0F761C4B16B3D1CB5 kHFSPlusMaxFileNameChars;
$22A92D088BFC52136D93827B687A0401 kHFSPlusMountVersion;
$22A92D088BFC52136D93827B687A0401 kHFSPlusSigWord;
$22A92D088BFC52136D93827B687A0401 kHFSPlusVersion;
$18F39A1BE291178CAFF63DBEEBB644E5 kHFSRootFolderID;
$18F39A1BE291178CAFF63DBEEBB644E5 kHFSRootParentID;
$22A92D088BFC52136D93827B687A0401 kHFSSigWord;
$18F39A1BE291178CAFF63DBEEBB644E5 kHFSStartupFileID;
$60616C0D0F3219145D1406847C7D94FB kHFSThreadExistsBit;
$60616C0D0F3219145D1406847C7D94FB kHFSThreadExistsMask;
$EDAEAD02DC67A4EB67219B6FB187A2BE kHFSVolumeHardwareLockBit;
$EDAEAD02DC67A4EB67219B6FB187A2BE kHFSVolumeHardwareLockMask;
$EDAEAD02DC67A4EB67219B6FB187A2BE kHFSVolumeNoCacheRequiredBit;
$EDAEAD02DC67A4EB67219B6FB187A2BE kHFSVolumeNoCacheRequiredMask;
$EDAEAD02DC67A4EB67219B6FB187A2BE kHFSVolumeSoftwareLockBit;
$EDAEAD02DC67A4EB67219B6FB187A2BE kHFSVolumeSoftwareLockMask;
$EDAEAD02DC67A4EB67219B6FB187A2BE kHFSVolumeSparedBlocksBit;
$EDAEAD02DC67A4EB67219B6FB187A2BE kHFSVolumeSparedBlocksMask;
$EDAEAD02DC67A4EB67219B6FB187A2BE kHFSVolumeUnmountedBit;
$EDAEAD02DC67A4EB67219B6FB187A2BE kHFSVolumeUnmountedMask;
$9B247B4FB8AF703C9CE314B5E47E50E3 kHardLinkFileType;
BTreeKeyLimits kMaxKeyLength;
MACRO_kOSMetaClassDuplicateClass kOSMetaClassDuplicateClass;
MACRO_kOSMetaClassHasInstances kOSMetaClassHasInstances;
MACRO_kOSMetaClassInstNoSuper kOSMetaClassInstNoSuper;
MACRO_kOSMetaClassInternal kOSMetaClassInternal;
MACRO_kOSMetaClassNoDicts kOSMetaClassNoDicts;
MACRO_kOSMetaClassNoInit kOSMetaClassNoInit;
MACRO_kOSMetaClassNoInsKModSet kOSMetaClassNoInsKModSet;
MACRO_kOSMetaClassNoKModSet kOSMetaClassNoKModSet;
MACRO_kOSMetaClassNoSuper kOSMetaClassNoSuper;
MACRO_kOSMetaClassNoTempData kOSMetaClassNoTempData;
MACRO_kOSReturnSuccess kOSReturnError;
MACRO_kOSReturnSuccess kOSReturnSuccess;
klm_stats klm_denied;
klm_stats klm_denied_nolocks;
klm_stats klm_granted;
klm_stats klm_working;
MACRO_MSG_COUNT ledger_MSG_COUNT;
MACRO_MSG_COUNT lock_set_MSG_COUNT;
MACRO_mach mach_host_MSG_COUNT;
MACRO_mach_port mach_port_MSG_COUNT;
MACRO_minDSPQueueSize minDSPQueueSize;
MACRO_nak nak;
MACRO_netname netname_MSG_COUNT;
MACRO_nl nl;
nlm_stats nlm_blocked;
nlm_stats nlm_denied;
nlm_stats nlm_denied_grace_period;
nlm_stats nlm_denied_nolocks;
nlm_stats nlm_granted;
MACRO_np np;
MACRO_nul nul;
MACRO_ocAccept ocAccept;
MACRO_ocAccept ocEstablish;
MACRO_ocRequest ocPassive;
MACRO_ocRequest ocRequest;
MACRO_processor processor_MSG_COUNT;
MACRO_processor processor_set_MSG_COUNT;
MACRO_pseudo_AF_HDRCMPLT pseudo_AF_HDRCMPLT;
MACRO_pseudo_AF_KEY pseudo_AF_KEY;
MACRO_pseudo_AF_PIP pseudo_AF_PIP;
MACRO_pseudo_AF pseudo_AF_RTIP;
MACRO_pseudo pseudo_AF_XTP;
$3EACBFB1F6A69D9CA6E99CE3BA7C8589 res_done;
$3EACBFB1F6A69D9CA6E99CE3BA7C8589 res_error;
$3EACBFB1F6A69D9CA6E99CE3BA7C8589 res_goahead;
$3EACBFB1F6A69D9CA6E99CE3BA7C8589 res_modified;
$3EACBFB1F6A69D9CA6E99CE3BA7C8589 res_nextns;
MACRO_rs rs;
MACRO_sClosed sClosed;
MACRO_sClosing sClosing;
MACRO_sListening sListening;
MACRO_sOpening sOpen;
MACRO_sOpening sOpening;
MACRO_sListening sPassive;
MACRO_si si;
MACRO_sigcantmask sigcantmask;
MACRO_nul soh;
res stat_fail;
res stat_succ;
MACRO_nul stx;
MACRO_sub sub;
MACRO_emask sub_emask;
MACRO_sub_libkern sub_libkern_common;
MACRO_sub_libkern sub_libkern_metaclass;
MACRO_sub_libkern sub_libkern_reserved;
MACRO_syn syn;
MACRO_sys sys_libkern;
MACRO_emask system_emask;
MACRO_COUNT task_MSG_COUNT;
MACRO_COUNT thread_act_MSG_COUNT;
MACRO_bool true;
MACRO_us us;
MACRO_COUNT vm_map_MSG_COUNT;
MACRO_vt vt;
MACRO_xEOF xEOF;
