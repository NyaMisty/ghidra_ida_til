struct $0554C5062FE80602C743D66204778E58 {FAULT_TABLE_ENTRY ft_entry[32];};
struct $309E767B38E0F56B2BA55602F70B4C9D {unsigned int pending_priorities;unsigned int pending_interrupts[8];void (*interrupt_proc[248])();};
struct $3F581B6531335414AE756F75454F2E82 {__int32 trace_enable : 1;__int32 execution_mode : 1;__int32 : 7;__int32 resume : 1;__int32 trace_fault_pend : 1;__int32 reserved_1 : 2;__int32 state : 1;__int32 : 2;__int32 priority : 5;__int32 internal_state : 11;};
struct $43F96AB7E0863611CA835205784F2C38 {void (*flt_hndlr)();int magic_number;};
struct $493CA05364BF72A191D12A6CE1F5C4F2 {unsigned int pc;unsigned int ac;unsigned __int8 vector_number;};
struct $50ED887AC6017A66B8EAA74FFE58097B {long double fp80;struct $50ED887AC6017A66B8EAA74FFE58097B::$2F6BD4A8C61D546A920BFF7E05CF8CED fp64;};
struct $50ED887AC6017A66B8EAA74FFE58097B::$2F6BD4A8C61D546A920BFF7E05CF8CED {double value;unsigned __int8 flags;};
struct $614C51839E4B572536ABAC622211158D {unsigned int sysp_res1[3];void *super_stack;unsigned int sysp_res2[8];void (*sysp_entry[260])();};
struct $9EBC41FFF556B489F8C85024CEE79EE0 {UINT32 number;STATUS (*proc)();};
struct $::$434781A782036FF19EE5B574607C3CF1::$17EE914C568619DF5A10326B87E5E3BF {int zeroes;char *nam_ptr;};
struct $AF597710AF055A26EEBCC1959186803D {__int32 : 1;__int32 instruction_mode : 1;__int32 branch_mode : 1;__int32 call_mode : 1;__int32 return_mode : 1;__int32 prereturn_mode : 1;__int32 supervisor_mode : 1;__int32 breakpoint_mode : 1;__int32 : 9;__int32 instruction_event : 1;__int32 branch_event : 1;__int32 call_event : 1;__int32 return_event : 1;__int32 prereturn_event : 1;__int32 supervisor_event : 1;__int32 breakpoint_event : 1;__int32 hw_bp_inst_1 : 1;__int32 hw_bp_inst_0 : 1;__int32 hw_bp_data_1 : 1;__int32 hw_bp_data_0 : 1;__int32 : 4;};
struct $C10BE4AA5ABBE9CF0190D94D38E21A7E {unsigned int pc;unsigned int ac;unsigned int type;unsigned int *addr;};
struct $C30F6B78C55B18D81F89BF422211A708 {UINT32 nmi_vector;UINT32 optional_int_vectors[15];BREEZE_SYSPROC_ENTRIES breeze_sys_procs[118];UINT32 dummy;UINT32 dram_base;UINT32 led_value;UINT32 dram_size;};
struct $C5BE20A0C40D8563A650CCBEA0046DA0 {union $C5BE20A0C40D8563A650CCBEA0046DA0::$434781A782036FF19EE5B574607C3CF1 n;int ar_date;int ar_uid;int ar_gid;int ar_mode;int ar_size;};
union $C5BE20A0C40D8563A650CCBEA0046DA0::$434781A782036FF19EE5B574607C3CF1 {char ar_name[16];struct $::$434781A782036FF19EE5B574607C3CF1::$17EE914C568619DF5A10326B87E5E3BF a_n;};
struct $D6DBDCC01C14E54BC13EF8EC02363BCA {UINT32 nmi_vector;UINT32 optional_int_vectors[15];BREEZE_SYSPROC_ENTRIES breeze_sys_procs[119];UINT32 led_value;UINT32 dram_size;};
typedef unsigned int ADDR;
typedef struct aouthdr AOUTHDR;
typedef struct $9EBC41FFF556B489F8C85024CEE79EE0 BREEZE_SYSPROC_ENTRIES;
typedef struct cio CIO_DEV;
typedef struct $C10BE4AA5ABBE9CF0190D94D38E21A7E FAULT_RECORD;
typedef struct $0554C5062FE80602C743D66204778E58 FAULT_TABLE;
typedef struct $43F96AB7E0863611CA835205784F2C38 FAULT_TABLE_ENTRY;
typedef struct _iobuf FILE;
typedef struct $50ED887AC6017A66B8EAA74FFE58097B FPREG;
typedef struct $C30F6B78C55B18D81F89BF422211A708 INTERNAL_DATA_RAM;
typedef struct $493CA05364BF72A191D12A6CE1F5C4F2 INTERRUPT_RECORD;
typedef struct $309E767B38E0F56B2BA55602F70B4C9D INTERRUPT_TABLE;
enum MACRO_ADDR {DLMCON_ADDR = 0xFF008100,LMAR0_ADDR = 0xFF008108,LMMR0_ADDR = 0xFF00810C,LMAR1_ADDR = 0xFF008110,LMMR1_ADDR = 0xFF008114,IPB0_ADDR = 0xFF008400,IPB1_ADDR = 0xFF008404,DAB0_ADDR = 0xFF008420,DAB1_ADDR = 0xFF008424,BPCON_ADDR = 0xFF008440,IPND_ADDR = 0xFF008500,IMSK_ADDR = 0xFF008504,ICON_ADDR = 0xFF008510,IMAP0_ADDR = 0xFF008520,IMAP1_ADDR = 0xFF008524,IMAP2_ADDR = 0xFF008528,PMCON0_ADDR = 0xFF008600,PMCON2_ADDR = 0xFF008608,PMCON4_ADDR = 0xFF008610,PMCON6_ADDR = 0xFF008618,PMCON8_ADDR = 0xFF008620,PMCON10_ADDR = 0xFF008628,PMCON12_ADDR = 0xFF008630,PMCON14_ADDR = 0xFF008638,BCON_ADDR = 0xFF0086FC,PRCB_ADDR = 0xFF008700,ISP_ADDR = 0xFF008704,SSP_ADDR = 0xFF008708,DEVID_ADDR = 0xFF008710,TRR0_ADDR = 0xFF000300,TCR0_ADDR = 0xFF000304,TMR0_ADDR = 0xFF000308,TRR1_ADDR = 0xFF000310,TCR1_ADDR = 0xFF000314,TMR1_ADDR = 0xFF000318,VIDR_ADDR = 0x1000,DIDR_ADDR = 0x1002,PCMDR_ADDR = 0x1004,PSR_ADDR = 0x1006,RIDR_ADDR = 0x1008,CCR_ADDR = 0x1009,CLSR_ADDR = 0x100C,PLTR_ADDR = 0x100D,HTR_ADDR = 0x100E,PBNR_ADDR = 0x1018,SBNR_ADDR = 0x1019,SUBBNR_ADDR = 0x101A,SLTR_ADDR = 0x101B,IOBR_ADDR = 0x101C,IOLR_ADDR = 0x101D,SSR_ADDR = 0x101E,MBR_ADDR = 0x1020,MLR_ADDR = 0x1022,PMBR_ADDR = 0x1024,PMLR_ADDR = 0x1026,BSVIR_ADDR = 0x1034,BSIR_ADDR = 0x1036,BCR_ADDR = 0x103E,EBCR_ADDR = 0x1040,SISR_ADDR = 0x1042,PBISR_ADDR = 0x1044,SBISR_ADDR = 0x1048,SACR_ADDR = 0x104C,SIOBR_ADDR = 0x1054,SIOLR_ADDR = 0x1055,SCCR_ADDR = 0x1056,SMBR_ADDR = 0x1058,SMLR_ADDR = 0x105A,SDER_ADDR = 0x105C,QCR_ADDR = 0x105E,CDTR_ADDR = 0x1060,GMTR_ADDR = 0x1100,ESR_ADDR = 0x1104,EMISR_ADDR = 0x1108,GTSR_ADDR = 0x1110,PECR1_ADDR = 0x1114,PECR2_ADDR = 0x1118,PECR3_ADDR = 0x111C,PECR4_ADDR = 0x1120,PECR5_ADDR = 0x1124,PECR6_ADDR = 0x1128,PECR7_ADDR = 0x112C,PECR8_ADDR = 0x1130,PECR9_ADDR = 0x1134,PECR10_ADDR = 0x1138,PECR11_ADDR = 0x113C,PECR12_ADDR = 0x1140,PECR13_ADDR = 0x1144,PECR14_ADDR = 0x1148,ATUVID_ADDR = 0x1200,ATUDID_ADDR = 0x1202,PATUCMD_ADDR = 0x1204,PATUSR_ADDR = 0x1206,ATURID_ADDR = 0x1208,ATUCCR_ADDR = 0x1209,ATUCLSR_ADDR = 0x120C,ATULT_ADDR = 0x120D,ATUHTR_ADDR = 0x120E,ATUBISTR_ADDR = 0x120F,PIABAR_ADDR = 0x1210,ASVIR_ADDR = 0x122C,ASIR_ADDR = 0x122E,ERBAR_ADDR = 0x1230,ATUILR_ADDR = 0x123C,ATUIPR_ADDR = 0x123D,ATUMGNT_ADDR = 0x123E,ATUMLAT_ADDR = 0x123F,PIALR_ADDR = 0x1240,PIATVR_ADDR = 0x1244,SIABAR_ADDR = 0x1248,SIALR_ADDR = 0x124C,SIATVR_ADDR = 0x1250,POMWVR_ADDR = 0x1254,PODWVR_ADDR = 0x1260,POUDR_ADDR = 0x1264,SOMWVR_ADDR = 0x1268,SOIOWVR_ADDR = 0x126C,ERLR_ADDR = 0x1274,ERTVR_ADDR = 0x1278,ATUCR_ADDR = 0x1288,PATUISR_ADDR = 0x1290,SATUISR_ADDR = 0x1294,SATUCMD_ADDR = 0x1298,SATUSR_ADDR = 0x129A,SODWVR_ADDR = 0x129C,SOUDR_ADDR = 0x12A0,POCCAR_ADDR = 0x12A4,SOCCAR_ADDR = 0x12A8,POCCDR_ADDR = 0x12AC,SOCCDR_ADDR = 0x12B0,PAQCR_ADDR = 0x12B4,SAQCR_ADDR = 0x12B8,PAIMR_ADDR = 0x12BC,SAIMR_ADDR = 0x12C0,IMR0_ADDR = 0x1310,IMR1_ADDR = 0x1314,OMR0_ADDR = 0x1318,OMR1_ADDR = 0x131C,IDR_ADDR = 0x1320,IISR_ADDR = 0x1324,IIMR_ADDR = 0x1328,ODR_ADDR = 0x132C,OISR_ADDR = 0x1330,OIMR_ADDR = 0x1334,MUCR_ADDR = 0x1350,QBAR_ADDR = 0x1354,IFHPR_ADDR = 0x1360,IFTPR_ADDR = 0x1364,IPHPR_ADDR = 0x1368,IPTPR_ADDR = 0x136C,OFHPR_ADDR = 0x1370,OFTPR_ADDR = 0x1374,OPHPR_ADDR = 0x1378,OPTPR_ADDR = 0x137C,IAR_ADDR = 0x1380,CCR0_ADDR = 0x1400,CSR0_ADDR = 0x1404,DAR0_ADDR = 0x140C,NDAR0_ADDR = 0x1410,PADR0_ADDR = 0x1414,PUADR0_ADDR = 0x1418,LADR0_ADDR = 0x141C,BCR0_ADDR = 0x1420,DCR0_ADDR = 0x1424,CCR1_ADDR = 0x1440,CSR1_ADDR = 0x1444,DAR1_ADDR = 0x144C,NDAR1_ADDR = 0x1450,PADR1_ADDR = 0x1454,PUADR1_ADDR = 0x1458,LADR1_ADDR = 0x145C,BCR1_ADDR = 0x1460,DCR1_ADDR = 0x1464,CCR2_ADDR = 0x1480,CSR2_ADDR = 0x1484,DAR2_ADDR = 0x148C,NDAR2_ADDR = 0x1490,PADR2_ADDR = 0x1494,PUADR2_ADDR = 0x1498,LADR2_ADDR = 0x149C,BCR2_ADDR = 0x14A0,DCR2_ADDR = 0x14A4,SDIR_ADDR = 0x1500,SDCR_ADDR = 0x1504,SDBR_ADDR = 0x1508,SBR0_ADDR = 0x150C,SBR1_ADDR = 0x1510,SDPR0_ADDR = 0x1514,SDPR1_ADDR = 0x1518,SDPR2_ADDR = 0x151C,SDPR3_ADDR = 0x1520,SDPR4_ADDR = 0x1524,SDPR5_ADDR = 0x1528,SDPR6_ADDR = 0x152C,SDPR7_ADDR = 0x1530,ECCR_ADDR = 0x1534,ELOG0_ADDR = 0x1538,ELOG1_ADDR = 0x153C,ECAR0_ADDR = 0x1540,ECAR1_ADDR = 0x1544,ECTST_ADDR = 0x1548,FEBR0_ADDR = 0x154C,FEBR1_ADDR = 0x1550,FBSR0_ADDR = 0x1554,FBSR1_ADDR = 0x1558,FWSR0_ADDR = 0x155C,FWSR1_ADDR = 0x1560,MCISR_ADDR = 0x1564,RFR_ADDR = 0x1568,IACR_ADDR = 0x1600,MLTR_ADDR = 0x1604,MTTR_ADDR = 0x1608,BIUCR_ADDR = 0x1640,BIUISR_ADDR = 0x1644,ICR_ADDR = 0x1680,ISR_ADDR = 0x1684,ISAR_ADDR = 0x1688,IDBR_ADDR = 0x168C,ICCR_ADDR = 0x1690,IBMR_ADDR = 0x1694,NISR_ADDR = 0x1700,X7ISR_ADDR = 0x1704,X6ISR_ADDR = 0x1708,PDIDR_ADDR = 0x1710,ACR_ADDR = 0x1800,ASR_ADDR = 0x1804,ADAR_ADDR = 0x1808,ANDAR_ADDR = 0x180C,SAR1_ADDR = 0x1810,SAR2_ADDR = 0x1814,SAR3_ADDR = 0x1818,SAR4_ADDR = 0x181C,DAR_ADDR = 0x1820,ABCR_ADDR = 0x1824,ADCR_ADDR = 0x1828,SAR5_ADDR = 0x182C,SAR6_ADDR = 0x1830,SAR7_ADDR = 0x1834,SAR8_ADDR = 0x1838,};
enum MACRO_AFP {AFP_FAULT_ADDSUB = 1,AFP_FAULT_DIVIDE = 2,AFP_FAULT_MULTIP = 3,AFP_FAULT_ITOF = 4,AFP_FAULT_UITOF = 5,AFP_FAULT_LDTOD = 6,AFP_FAULT_DTOLD = 7,AFP_FAULT_LDTOF = 8,AFP_FAULT_FTOLD = 9,AFP_FAULT_DTOF = 10,AFP_FAULT_FTOD = 11,AFP_FAULT_COMPARE = 12,AFP_FAULT_SCALE = 13,AFP_FAULT_LOGB = 14,AFP_FAULT_REM = 15,AFP_FAULT_RINT = 16,AFP_FAULT_RMD = 17,AFP_FAULT_ROUND = 18,AFP_FAULT_CEIL = 19,AFP_FAULT_FLOOR = 20,};
enum MACRO_APIC {APIC_INTP = 7,P_PCIBR_ERR_INTP = 248,S_PCIBR_ERR_INTP = 248,PATU_ERR_INTP = 248,SATU_ERR_INTP = 248,LPROC_ERR_INTP = 248,DMA0_ERR_INTP = 248,DMA1_ERR_INTP = 248,DMA2_ERR_INTP = 248,MU_NMI_INTP = 248,};
enum MACRO_ARITHMETIC {ARITHMETIC_FAULT = 3,};
enum MACRO_ARITHMETIC_ZERO {ARITHMETIC_ZERO_DIVIDE = 0x2,};
enum MACRO_ARTYPE {ARTYPE = 0xFF65,};
enum MACRO_BAD {BAD_ACCESS = 1,};
enum MACRO_BEGINNING {BEGINNING = 0,CURRENT = 1,END = 2,};
enum MACRO_BOARD {BOARD_REV = 0,BOARD_REV_RN = 0,BOARD_REV_RM = 0,BOARD_REV_RP = 16,BOARD_REV_RD = 32,};
enum MACRO_BOARD_REV {BOARD_REV_MASK = 0xF0,};
enum MACRO_BOOL {FALSE = 0,TRUE = 1,};
enum MACRO_BYTE {BYTE = 1,SHORT = 2,WORD = 4,LONG = 8,};
enum MACRO_C {C_EFCN = -1,C_NULL = 0,C_AUTO = 1,C_EXT = 2,C_STAT = 3,C_REG = 4,C_EXTDEF = 5,C_LABEL = 6,C_ULABEL = 7,C_MOS = 8,C_ARG = 9,C_STRTAG = 10,C_MOU = 11,C_UNTAG = 12,C_TPDEF = 13,C_USTATIC = 14,C_ENTAG = 15,C_MOE = 16,C_REGPARM = 17,C_FIELD = 18,C_AUTOARG = 19,C_BLOCK = 100,C_FCN = 101,C_EOS = 102,C_FILE = 103,C_LINE = 104,C_ALIAS = 105,C_HIDDEN = 106,C_SCALL = 107,C_LEAFEXT = 108,C_LEAFSTAT = 113,};
enum MACRO_CHAR {CHAR_BIT = 8,};
enum MACRO_CHAR_MIN {CHAR_MIN = -128,CHAR_MAX = 127,};
enum MACRO_CIO {CIO_CLK = 4000000,};
enum MACRO_CLOCKS {CLOCKS_PER_SEC = 100,};
enum MACRO_CLOSED {CLOSED = 1,};
enum MACRO_CODE {BIG_ENDIAN_CODE = 0,MRI_CODE = 0,};
enum MACRO_CONSTRAINT {CONSTRAINT_FAULT = 5,CONSTRAINT_RANGE = 1,};
enum MACRO_CONTENTS {CONTENTS = 2,PROCESS = 12,};
enum MACRO_CONTROL {CONTROL = 1,DISPATCH = 2,};
enum MACRO_CPU {CPU_TYPE_SA_SB = 0,CPU_TYPE_KA_KB = 1,CPU_TYPE_CA_CF = 2,CPU_TYPE_HX = 3,CPU_TYPE_JX = 4,};
enum MACRO_CRYSTALTIME {CRYSTALTIME = 2,};
enum MACRO_DBL {DBL_DIG = 15,DBL_MANT_DIG = 53,DBL_MAX_EXP = 1024,DBL_MAX_10_EXP = 308,DBL_MIN_EXP = -1021,DBL_MIN_10_EXP = -307,};
enum MACRO_DESCRIPTOR {DESCRIPTOR = 0xD,};
enum MACRO_DFLTPORT {DFLTPORT = 0,XTAL = 1843200,};
enum MACRO_DIMNUM {DIMNUM = 4,};
enum MACRO_DT {DT_NON = 0,DT_PTR = 1,DT_FCN = 2,DT_ARY = 3,};
enum MACRO_EOF {EOF = -1,};
enum MACRO_ERR {ERR = -1,};
enum MACRO_ERRNO {OK = 0,EPERM = 1,ENOENT = 2,ESRCH = 3,EINTR = 4,EIO = 5,ENXIO = 6,E2BIG = 7,ENOEXEC = 8,EBADF = 9,ECHILD = 10,EAGAIN = 11,ENOMEM = 12,EACCES = 13,EFAULT = 14,ENOTBLK = 15,EBUSY = 16,EEXIST = 17,EXDEV = 18,ENODEV = 19,ENOTDIR = 20,EISDIR = 21,EINVAL = 22,ENFILE = 23,EMFILE = 24,ENOTTY = 25,ETXTBSY = 26,EFBIG = 27,ENOSPC = 28,ESPIPE = 29,EROFS = 30,EMLINK = 31,EPIPE = 32,EDOM = 33,ERANGE = 34,EDEADLOCK = 36,ESIGNAL = 37,EFREE = 38,_NUM_ERR_NUMS = 39,E_LOCKED = 101,E_BAD_CALL = 102,E_LONG_STRING = 103,};
enum MACRO_ERROR {ERROR = -1,};
enum MACRO_EVENT {EVENT = 0xE,};
enum MACRO_EVENT_NOTICE {EVENT_NOTICE = 1,};
enum MACRO_EXIT {EXIT_FAILURE = 1,EXIT_SUCCESS = 0,};
enum MACRO_EXTENDED {EXTENDED = 10,QUAD = 16,};
enum MACRO_F {F_RELFLG = 0x1,F_EXEC = 0x2,F_LNNO = 0x4,F_LSYMS = 0x8,F_AR32WR = 0x10,F_COMP_SYMTAB = 0x20,F_PIC = 0x40,F_PID = 0x80,F_LINKPID = 0x100,F_SECT_SYM = 0x200,F_BIG_ENDIAN_TARGET = 0x400,F_CCINFO = 0x800,F_I960TYPE = 0xF000,F_I960CORE = 0x1000,F_I960CORE1 = 0x1000,F_I960KB = 0x2000,F_I960SB = 0x2000,F_I960CA = 0x5000,F_I960CX = 0x5000,F_I960KA = 0x6000,F_I960SA = 0x6000,F_I960JX = 0x7000,F_I960HX = 0x8000,F_I960CORE2 = 0x9000,F_I960JL = 0xA000,F_I960P80 = 0xB000,F_I960CORE0 = 0xC000,F_I960CORE3 = 0xD000,F_PTRIZED = 0xF000,};
enum MACRO_FAILURE {FAILURE = 0,};
enum MACRO_FAULT {PARALLEL_FAULT = 0,TRACE_FAULT = 1,};
enum MACRO_FILNMLEN {FILNMLEN = 14,};
enum MACRO_FLASH {FLASH_WIDTH = 1,FLASH_TIME_ADJUST = 1,};
enum MACRO_FLASH_ADDR {FLASH_ADDR_RP = 0xFEF80000,FLASH_ADDR_INCR_RP = 0x40000,FLASH_ADDR_RD = 0xFEC00000,FLASH_ADDR_INCR_RD = 0x200000,FLASH_ADDR_RN = 0xFEE00000,FLASH_ADDR_INCR_RN = 0x200000,};
enum MACRO_FLOATING {FLOATING_POINT_FAULT = 4,FLOATING_OVERFLOW = 1,FLOATING_UNDERFLOW = 2,FLOATING_INVALID_OPERATION = 4,FLOATING_ZERO_DIVIDE = 8,FLOATING_INEXACT = 16,FLOATING_RESERVED_ENCODING = 32,};
enum MACRO_FLT {FLT_RADIX = 2,FLT_DIG = 6,FLT_MANT_DIG = 24,FLT_MAX_EXP = 128,FLT_MAX_10_EXP = 38,FLT_MIN_EXP = -125,FLT_MIN_10_EXP = -37,};
enum MACRO_FP {FP_RN = 0,FP_RM = 1,FP_RP = 2,FP_RZ = 3,};
enum MACRO_FPX {FPX_INVOP = 0x4,FPX_ZDIV = 0x8,FPX_OVFL = 0x1,FPX_UNFL = 0x2,FPX_INEX = 0x10,FPX_CLEX = 0x0,FPX_ALL = 0x1F,};
enum MACRO_FP_80BIT {FP_80BIT = 1,FP_64BIT = 2,};
enum MACRO_FREQ {FREQ_4_MHZ = 0,FREQ_8_MHZ = 1,FREQ_16_MHZ = 2,FREQ_20_MHZ = 3,FREQ_25_MHZ = 4,FREQ_33_MHZ = 5,FREQ_40_MHZ = 6,FREQ_50_MHZ = 7,};
enum MACRO_G960 {G960_CBREAK = 2,G960_ECHO = 3,};
enum MACRO_G960_NON {G960_NON_REQUEST = 0x55,};
enum MACRO_I960ARNMSZ {I960ARNMSZ = 11,};
enum MACRO_I960ROMAGIC {I960ROMAGIC = 0x160,};
enum MACRO_I960RWMAGIC {I960RWMAGIC = 0x161,};
enum MACRO_IAC {IAC = 3,};
enum MACRO_INIT_ERROR {_EXIT_INIT_ERROR = 1,_STDIO_INIT_ERROR = 2,_THREAD_INIT_ERROR = 3,};
enum MACRO_INT {INT_MAX = 2147483647,INT_MIN = -2147483648,};
enum MACRO_INTEGER {INTEGER_OVERFLOW = 0x1,};
enum MACRO_INTP {DMA0_INTP = 6,DMA1_INTP = 6,DMA2_INTP = 6,I2C_INTP = 7,MU_INTP = 7,PATU_BIST_INTP = 7,};
enum MACRO_INVALID {INVALID_OPCODE = 0x1,};
enum MACRO_INVALID_DESCRIPTOR {INVALID_DESCRIPTOR = 1,};
enum MACRO_INVALID_OPERAND {INVALID_OPERAND = 0x4,};
enum MACRO_INVALID_SEGMENT {INVALID_SEGMENT_TABLE_ENTRY = 1,INVALID_PAGE_TABLE_DIR_ENTRY = 2,INVALID_PAGE_TABLE_ENTRY = 3,};
enum MACRO_IRQ {TIMER0_IRQ = 12,TIMER1_IRQ = 13,};
enum MACRO_L {L_tmpnam = 9,};
enum MACRO_LC {LC_ALL = 0,LC_COLLATE = 1,LC_CTYPE = 2,LC_MONETARY = 3,LC_NUMERIC = 4,LC_TIME = 5,LC_MAX = 6,};
enum MACRO_LDBL {LDBL_DIG = 18,LDBL_MANT_DIG = 64,LDBL_MAX_EXP = 16384,LDBL_MAX_10_EXP = 4932,LDBL_MIN_EXP = -16381,LDBL_MIN_10_EXP = -4931,};
enum MACRO_LED {LED_0 = 0x1,LED_1 = 0x2,LED_2 = 0x4,LED_3 = 0x8,};
enum MACRO_LED_4 {LED_4 = 0x10,LED_5 = 0x20,LED_6 = 0x40,LED_7 = 0x80,};
enum MACRO_LENGTH {LENGTH = 2,};
enum MACRO_LONG {LONG_MAX = 2147483647,LONG_MIN = -2147483648,};
enum MACRO_LPTOFF {LPTOFF = 0x53,};
enum MACRO_LPTON {LPTON = 0x53,};
enum MACRO_MACHINE {MACHINE_FAULT = 8,};
enum MACRO_MAGIC_NUMBER {FAULT_MAGIC_NUMBER = 0x27F,TRACE_MAGIC_NUMBER = 0x2BF,};
enum MACRO_MAX {FOPEN_MAX = 15,TMP_MAX = 25,FILENAME_MAX = 128,};
enum MACRO_MB {MB_LEN_MAX = 1,};
enum MACRO_N {N_UNDEF = 0,N_ABS = -1,N_DEBUG = -2,N_TV = -3,};
enum MACRO_NMAGIC {NMAGIC = 0x108,};
enum MACRO_NMI {NMI_INT = 248,};
enum MACRO_NO {NO_SQUALL = 0x100002,};
enum MACRO_NOCLOSE {NOCLOSE = 0,BADINDEX = -1,};
enum MACRO_NO_ADDR : __int64 {NO_ADDR = 0xFFFFFFFF,};
enum MACRO_NULL {NULL = 0,BUFSIZ = 1024,};
enum MACRO_NUM {NUM_REGS = 48,NUM_FP_REGS = 4,};
enum MACRO_N_BTMASK {N_BTMASK = 0x1F,N_TMASK = 0x60,N_BTSHFT = 0x5,N_TSHIFT = 0x2,};
enum MACRO_O {O_RDONLY = 0x0,O_WRONLY = 0x1,O_RDWR = 0x2,O_APPEND = 0x8,O_CREAT = 0x100,O_TRUNC = 0x200,O_EXCL = 0x400,O_TEXT = 0x4000,O_BINARY = 0x8000,};
enum MACRO_OFFSET {TIMER0_OFFSET = 1,TIMER1_OFFSET = 2,};
enum MACRO_OKFSEEK {OKFSEEK = 0,};
enum MACRO_OMAGIC {OMAGIC = 0x107,};
enum MACRO_ON {ON_BOARD_DATA_DIR_REG = 0x2B,ON_BOARD_DATA_OFFSET = 0x1,ON_BOARD_CLOCK_OFFSET = 0x0,};
enum MACRO_OPERATION {OPERATION_FAULT = 2,};
enum MACRO_P {P_TV = -4,};
enum MACRO_PAGE {PAGE_RIGHTS = 4,};
enum MACRO_PIN {FAN_LOSS_PIN = 4,UART_XINT_PIN = 5,};
enum MACRO_PP {PP_DATA_ADDR = 0xB0080004,PP_STAT_ADDR = 0xB0080000,PP_CTRL_ADDR = 0xB0080000,PP_READ_STATUS = 0x32,PP_ERR_BIT = 0x1,PP_SEL_BIT = 0x2,PP_POUT_BIT = 0x4,PP_INIT_BITS = 0x3,};
enum MACRO_PRIVILEGED {PRIVILEGED = 2,};
enum MACRO_PROC {PROC_MODEL_RM = 0x3000,PROC_MODEL_RN = 0x2000,PROC_MODEL_MASK = 0xF000,};
enum MACRO_PROTECTION {PROTECTION_FAULT = 7,};
enum MACRO_R {R_RELLONG = 17,R_RELLONG_SUB = 18,R_RELSHORT = 22,R_IPRMED = 25,R_OPTCALL = 27,R_OPTCALLX = 28,R_OPTCALLXA = 32,};
enum MACRO_RAND {RAND_MAX = 0x7FFF,MB_CUR_MAX = 0x1,};
enum MACRO_REAL {REAL_4_MHZ = 3750000,REAL_8_MHZ = 7760000,REAL_16_MHZ = 16110000,REAL_20_MHZ = 20050000,REAL_25_MHZ = 25060000,REAL_33_MHZ = 33410000,REAL_40_MHZ = 40090000,REAL_50_MHZ = 50110000,};
enum MACRO_REG {REG_R0 = 0,REG_PFP = 0,REG_R1 = 1,REG_SP = 1,REG_R2 = 2,REG_RIP = 2,REG_IP = 2,REG_R3 = 3,REG_R4 = 4,REG_R5 = 5,REG_R6 = 6,REG_R7 = 7,REG_R8 = 8,REG_R9 = 9,REG_R10 = 10,REG_R11 = 11,REG_R12 = 12,REG_R13 = 13,REG_R14 = 14,REG_R15 = 15,REG_G0 = 16,REG_G1 = 17,REG_G2 = 18,REG_G3 = 19,REG_G4 = 20,REG_G5 = 21,REG_G6 = 22,REG_G7 = 23,REG_G8 = 24,REG_G9 = 25,REG_G10 = 26,REG_G11 = 27,REG_G12 = 28,REG_G13 = 29,REG_G14 = 30,REG_G15 = 31,REG_FP = 31,REG_PC = 32,REG_AC = 33,REG_TC = 34,REG_SF0 = 35,REG_SF1 = 36,REG_IPND = 35,REG_IMSK = 36,REG_SF2 = 37,REG_DMAC = 37,REG_CCON = 37,REG_SF3 = 38,REG_SF4 = 39,REG_ICON = 38,REG_GCON = 39,REG_E24 = 40,REG_E25 = 41,REG_E26 = 42,REG_ISP = 42,REG_E27 = 43,REG_IEH = 43,REG_E28 = 44,REG_E31 = 45,REG_EPR = 46,REG_PCC = 47,REG_FP0 = 0,REG_FP1 = 1,REG_FP2 = 2,REG_FP3 = 3,};
enum MACRO_RESERVED {RESERVED_AREA1 = 0xFEFC0000,RESERVED_AREA2 = 0xFEFD0000,RESERVED_AREA3 = 0xFEFE0000,RESERVED_AREA4 = 0xFEFF0000,RESERVED_AREA_SIZE = 0x40000,};
enum MACRO_RESERVED_0 {RESERVED = 0,};
enum MACRO_ROLL {ROLL_32_BITS = 0xFFFFFFFF,};
enum MACRO_S {S_IFMT = 0xE000,S_IFIFO = 0x1000,S_IFCHR = 0x2000,S_IFDIR = 0x4000,S_IFBLK = 0x6000,S_IFREG = 0x8000,S_ISUID = 0x800,S_ISGID = 0x400,S_ISVTX = 0x200,S_IREAD = 0x100,S_IWRITE = 0x80,S_IEXEC = 0x40,S_ENFMT = 0x400,S_IRWXU = 0x1C0,S_IRUSR = 0x100,S_IWUSR = 0x80,S_IXUSR = 0x40,S_IRWXG = 0x38,S_IRGRP = 0x20,S_IWGRP = 0x10,S_IXGRP = 0x8,S_IRWXO = 0x7,S_IROTH = 0x4,S_IWOTH = 0x2,S_IXOTH = 0x1,};
enum MACRO_SARMAG {SARMAG = 8,};
enum MACRO_SCHAR {SCHAR_MAX = 127,SCHAR_MIN = -128,};
enum MACRO_SEEK {SEEK_SET = 0,SEEK_CUR = 1,SEEK_END = 2,};
enum MACRO_SHRT {SHRT_MAX = 32767,SHRT_MIN = -32768,};
enum MACRO_SIGNAL {SIGILL = 1,SIGINT = 2,SIGTERM = 5,SIGFPE = 8,SIGSEGV = 9,SIGABRT = 10,SIGUSR1 = 0,SIGALLOC = 3,SIGFREE = 4,SIGREAD = 6,SIGWRITE = 7,SIGUSR2 = 11,SIGSIZE = 12,};
enum MACRO_SQ {SQ_01_PORT_OFFSET = 0x0,SQ_01_CA_OFFSET = 0x10,};
enum MACRO_SQUALL {SQUALL_DATA_DIR_REG = 0x2B,SQUALL_DATA_OFFSET = 0x3,SQUALL_CLOCK_OFFSET = 0x2,};
enum MACRO_SQUALL_BASE {SQUALL_BASE_ADDR = 0xC0000000,};
enum MACRO_STRUCTURAL {STRUCTURAL_FAULT = 9,};
enum MACRO_STYP {STYP_REG = 0x0,STYP_DSECT = 0x1,STYP_NOLOAD = 0x2,STYP_GROUP = 0x4,STYP_PAD = 0x8,STYP_COPY = 0x10,STYP_INFO = 0x200,STYP_TEXT = 0x20,STYP_DATA = 0x40,STYP_BSS = 0x80,};
enum MACRO_SYMNMLEN {SYMNMLEN = 8,};
enum MACRO_SYMTBL {SYMTBL = 0,SUCCESS = 1,};
enum MACRO_SubBNR {SubBNR_ADDR = 0x101A,PRSR_ADDR = 0x1050,ARSR_ADDR = 0x1300,AWR_ADDR = 0x1308,MBCR_ADDR = 0x1500,MBBAR0_ADDR = 0x1504,MBRWS0_ADDR = 0x1508,MBWWS0_ADDR = 0x150C,MBBAR1_ADDR = 0x1510,MBRWS1_ADDR = 0x1514,MBWWS1_ADDR = 0x1518,DBCR_ADDR = 0x151C,DBAR_ADDR = 0x1520,DRWS_ADDR = 0x1524,DWWS_ADDR = 0x1528,DRIR_ADDR = 0x152C,DPER_ADDR = 0x1530,BMER_ADDR = 0x1534,MEAR_ADDR = 0x1538,LPISR_ADDR = 0x153C,LBACR_ADDR = 0x1600,LBALCR_ADDR = 0x1604,PDDIR_ADDR = 0x1710,APICIDR_ADDR = 0x1780,APICARBID_ADDR = 0x1784,EVR_ADDR = 0x1788,IMR_ADDR = 0x178C,APICCSR_ADDR = 0x1790,RRCR_ADDR = 0x12C4,CSR_ADDR = 0x12CC,};
enum MACRO_T {T_NULL = 0,T_VOID = 1,T_CHAR = 2,T_SHORT = 3,T_INT = 4,T_LONG = 5,T_FLOAT = 6,T_DOUBLE = 7,T_STRUCT = 8,T_UNION = 9,T_ENUM = 10,T_MOE = 11,T_UCHAR = 12,T_USHORT = 13,T_UINT = 14,T_ULONG = 15,T_LNGDBL = 16,T_LONGLONG = 17,T_ULONGLONG = 18,};
enum MACRO_TCGETA {TCGETA = 0,TCSETAF = 1,};
enum MACRO_TICKS_PER_SECOND {MIN_TICKS_PER_SECOND = 1,MAX_TICKS_PER_SECOND = 10000,};
enum MACRO_TIME {TIME_SLICE = 1,};
enum MACRO_TIMER0 {TIMER0_VECTOR = 0x12,TIMER1_VECTOR = 0x22,};
enum MACRO_TMR {TMR_TERMINAL_CNT = 1,TMR_ENABLE = 2,TMR_AUTO_RELOAD = 4,TMR_SUP_WRITE = 8,TMR_1_X_CLOCK = 0,TMR_1_2_X_CLOCK = 16,TMR_1_4_X_CLOCK = 256,TMR_1_8_X_CLOCK = 272,};
enum MACRO_TRACE {INSTRUCTION_TRACE = 2,BRANCH_TRACE = 4,CALL_TRACE = 8,RETURN_TRACE = 16,PRERETURN_TRACE = 32,SUPERVISOR_TRACE = 64,BREAKPOINT_TRACE = 128,};
enum MACRO_TRIPLE {TRIPLE = 12,};
enum MACRO_TYPE {TYPE_FAULT = 0xA,TYPE_MISMATCH = 0x1,};
enum MACRO_UINT {UINT_MAX = -1,UCHAR_MAX = 255,};
enum MACRO_UNALIGNED {UNALIGNED = 0x3,};
enum MACRO_UNIMPLEMENTED {UNIMPLEMENTED = 0x2,};
enum MACRO_USHRT {USHRT_MAX = 65535,ULONG_MAX = -1,};
enum MACRO_VECTOR {XINT0_VECTOR = 0x82,XINT1_VECTOR = 0x92,XINT2_VECTOR = 0xA2,XINT3_VECTOR = 0xB2,XINT4_VECTOR = 0xC2,XINT5_VECTOR = 0xD2,XINT6_VECTOR = 0xE2,XINT7_VECTOR = 0xF2,UART_VECTOR = 0xD2,};
enum MACRO_VIRTUAL {VIRTUAL_MEMORY_FAULT = 6,};
enum MACRO_XINT {XINT_TIMER0 = 12,XINT_TIMER1 = 13,};
enum MACRO_XINT0 {XINT0 = 0,XINT1 = 1,XINT2 = 2,};
enum MACRO_XINT3 {XINT3 = 3,XINT4 = 4,};
enum MACRO_XINT5 {XINT5 = 5,};
enum MACRO_XINT6 {XINT6 = 6,};
enum MACRO_XINT7 {XINT7 = 7,};
enum MACRO__EXIT {_EXIT_HANDLER_MAX = 32,};
enum MACRO__INIT {_INIT_OK = 0,};
enum MACRO__IOFBF {_IOFBF = 0x0,_IOREAD = 0x1,_IOWRT = 0x2,_IONBF = 0x4,_IOMYBUF = 0x8,_IOEOF = 0x10,_IOERR = 0x20,_IOLBF = 0x40,_IORW = 0x80,_IODIRTY = 0x200,};
enum MACRO__NUL {_NUL = 0,};
enum MACRO__U {_U = 0x1,_L = 0x2,_N = 0x4,_S = 0x8,_P = 0x10,_C = 0x20,_SP = 0x40,_X = 0x80,};
enum MACRO___EDOM {__EDOM = 33,};
enum MACRO___ERANGE {__ERANGE = 34,};
enum MACRO___M {__M_INF_LOW__ = 0x0,__M_INF_HIGH__ = 0x7FF00000,__M_NEG_INF_HIGH__ = 0xFFF00000,};
enum MACRO____SAVEREGS {___SAVEREGS = 8,};
typedef struct $3F581B6531335414AE756F75454F2E82 PC_REG_IMAGE;
typedef unsigned int REG;
typedef int STATUS;
typedef struct $614C51839E4B572536ABAC622211158D SYS_PROC_TABLE;
typedef struct $AF597710AF055A26EEBCC1959186803D TC_REG_IMAGE;
typedef unsigned __int8 UCHAR;
typedef volatile unsigned __int8 *UCHARSTAR;
typedef unsigned int UINT;
typedef unsigned __int16 UINT16;
typedef unsigned int UINT32;
typedef unsigned __int8 UINT8;
typedef unsigned int ULONG;
typedef volatile unsigned int *ULONGSTAR;
typedef REG UREG[48];
typedef unsigned __int16 USHORT;
typedef volatile unsigned __int16 *USHORTSTAR;
struct __div_t {int rem;int quot;};
struct __jmp_buf {int _q0;int _q1;int _q2;int _q3;};
struct __ldiv_t {int rem;int quot;};
struct __ulong_ulong_t {unsigned int lo;unsigned int hi;};
struct __va_list {char *p;char *regtop;};
struct _ac {unsigned __int32 cc : 3;unsigned __int32 as : 4;unsigned __int32 : 1;unsigned __int32 iovfl_flg : 1;unsigned __int32 : 3;unsigned __int32 iovfl_msk : 1;unsigned __int32 : 2;unsigned __int32 nif : 1;unsigned __int32 fpflags : 5;unsigned __int32 : 3;unsigned __int32 fpmasks : 5;unsigned __int32 normmode : 1;unsigned __int32 rndmode : 2;};
struct _exit {void *open_stream_sem;struct _iobuf *open_stream_list;void *exit_handler_sem;int exit_handler_count;void (*exit_handler_list[32])();};
struct _iobuf {unsigned __int8 *_ptr;int _cnt;unsigned __int8 *_base;int _flag;int _fd;int _size;char *_temp_name;void *_sem;FILE *_next_stream;};
struct _stdio {FILE _stdin;FILE _stdout;FILE _stderr;};
struct _thread {int errno;char *_strtok_buffer;struct tm *_gmtime_buffer;void *_malloc_sem;unsigned int _rand_seed;char _asctime_buffer[26];};
struct _tzset {char *_tzname[2];int _timezone;int _daylight;};
typedef struct __va_list _va_list;
struct aouthdr {__int16 magic;__int16 vstamp;unsigned int tsize;unsigned int dsize;unsigned int bsize;unsigned int entry;unsigned int text_start;unsigned int data_start;unsigned int tagentries;};
struct ar_hdr {char ar_name[16];char ar_date[12];char ar_uid[6];char ar_gid[6];char ar_mode[8];char ar_size[10];char ar_fmag[2];};
typedef struct $C5BE20A0C40D8563A650CCBEA0046DA0 archdr;
union auxent {struct auxent::$5EA42CFE0E3DB3BB9D91F0BBA790C774 x_sym;union auxent::$5FADB47FFB037D854D1655A50EB77723 x_file;struct auxent::$FB1486A92607447806F09823D579EE12 x_scn;struct auxent::$F460BEB6336398C870E506DAD23CA9F2 x_tv;struct auxent::$A5EFB98F0E3FBB707E554563B78D0188 x_sc;struct auxent::$C1C66AEADBC811FD8102DF151B04BBB6 x_bal;struct auxent::$8F4557F59A0AC54BBDF79BA682331165 x_ident;char a[24];};
struct auxent::$5EA42CFE0E3DB3BB9D91F0BBA790C774 {int x_tagndx;union auxent::$5EA42CFE0E3DB3BB9D91F0BBA790C774::$FAC801B16405A3810F07150B5E65B5F1 x_misc;union auxent::$5EA42CFE0E3DB3BB9D91F0BBA790C774::$5426BF9CDAC0D098DF12E4CF0DDB9B67 x_fcnary;unsigned __int16 x_tvndx;};
union auxent::$5EA42CFE0E3DB3BB9D91F0BBA790C774::$5426BF9CDAC0D098DF12E4CF0DDB9B67 {struct auxent::$::$5426BF9CDAC0D098DF12E4CF0DDB9B67::$A4FE982D5F029E6ACEFDE76E40C46556 x_fcn;struct auxent::$::$5426BF9CDAC0D098DF12E4CF0DDB9B67::$93D0B1966774B86D3450284C91FC650B x_ary;};
union auxent::$5EA42CFE0E3DB3BB9D91F0BBA790C774::$FAC801B16405A3810F07150B5E65B5F1 {struct auxent::$::$FAC801B16405A3810F07150B5E65B5F1::$6A81AB9DD74A0937A06BA2C0FB9C8664 x_lnsz;int x_fsize;};
union auxent::$5FADB47FFB037D854D1655A50EB77723 {char x_fname[14];struct auxent::$5FADB47FFB037D854D1655A50EB77723::$332FB6BD0E947E8D57E9558DE0242FBC x_n;};
struct auxent::$5FADB47FFB037D854D1655A50EB77723::$332FB6BD0E947E8D57E9558DE0242FBC {int x_zeroes;int x_offset;};
struct auxent::$8F4557F59A0AC54BBDF79BA682331165 {unsigned int x_timestamp;char x_idstring[20];};
struct auxent::$::$332FB6BD0E947E8D57E9558DE0242FBC {int x_zeroes;int x_offset;};
union auxent::$::$5426BF9CDAC0D098DF12E4CF0DDB9B67 {struct auxent::$::$5426BF9CDAC0D098DF12E4CF0DDB9B67::$A4FE982D5F029E6ACEFDE76E40C46556 x_fcn;struct auxent::$::$5426BF9CDAC0D098DF12E4CF0DDB9B67::$93D0B1966774B86D3450284C91FC650B x_ary;};
struct auxent::$::$5426BF9CDAC0D098DF12E4CF0DDB9B67::$93D0B1966774B86D3450284C91FC650B {unsigned __int16 x_dimen[4];};
struct auxent::$::$5426BF9CDAC0D098DF12E4CF0DDB9B67::$A4FE982D5F029E6ACEFDE76E40C46556 {int x_lnnoptr;int x_endndx;};
struct auxent::$::$::$6A81AB9DD74A0937A06BA2C0FB9C8664 {unsigned __int16 x_lnno;unsigned __int16 x_size;};
struct auxent::$::$::$93D0B1966774B86D3450284C91FC650B {unsigned __int16 x_dimen[4];};
struct auxent::$::$::$A4FE982D5F029E6ACEFDE76E40C46556 {int x_lnnoptr;int x_endndx;};
union auxent::$::$FAC801B16405A3810F07150B5E65B5F1 {struct auxent::$::$FAC801B16405A3810F07150B5E65B5F1::$6A81AB9DD74A0937A06BA2C0FB9C8664 x_lnsz;int x_fsize;};
struct auxent::$::$FAC801B16405A3810F07150B5E65B5F1::$6A81AB9DD74A0937A06BA2C0FB9C8664 {unsigned __int16 x_lnno;unsigned __int16 x_size;};
struct auxent::$A5EFB98F0E3FBB707E554563B78D0188 {int x_stindx;};
struct auxent::$C1C66AEADBC811FD8102DF151B04BBB6 {unsigned int x_balntry;};
struct auxent::$F460BEB6336398C870E506DAD23CA9F2 {int x_tvfill;unsigned __int16 x_tvlen;unsigned __int16 x_tvran[2];};
struct auxent::$FB1486A92607447806F09823D579EE12 {int x_scnlen;unsigned __int16 x_nreloc;unsigned __int16 x_nlinno;};
struct bpt {char type;char active;char mode;ADDR addr;};
struct cio {volatile unsigned __int8 cdata;volatile unsigned __int8 pad1[3];volatile unsigned __int8 bdata;volatile unsigned __int8 pad2[3];volatile unsigned __int8 adata;volatile unsigned __int8 pad3[3];volatile unsigned __int8 ctrl;};
typedef unsigned int clock_t;
typedef __int16 dev_t;
typedef struct __div_t div_t;
union fild {struct fild::$653642B1EA6CBF762575E67BB3D4C945 f1;long double f2;};
struct fild::$653642B1EA6CBF762575E67BB3D4C945 {int w1;int w2;int w3;int op;};
struct filehdr {unsigned __int16 f_magic;unsigned __int16 f_nscns;int f_timdat;int f_symptr;int f_nsyms;unsigned __int16 f_opthdr;unsigned __int16 f_flags;};
typedef int fpos_t;
typedef struct __jmp_buf jmp_buf[8];
struct lconv {char *decimal_point;char *thousands_sep;char *grouping;char *int_curr_symbol;char *currency_symbol;char *mon_decimal_point;char *mon_thousands_sep;char *mon_grouping;char *positive_sign;char *negative_sign;char int_frac_digits;char frac_digits;char p_cs_precedes;char p_sep_by_space;char n_cs_precedes;char n_sep_by_space;char p_sign_posn;char n_sign_posn;};
struct ldfile {int _fnum_;FILE *ioptr;int offset;struct filehdr header;unsigned __int16 type;char *spellings;int arstrsize;};
typedef struct __ldiv_t ldiv_t;
struct lineno {union lineno::$4D6E082ABC3813EFAD274BDB52D637EC l_addr;unsigned __int16 l_lnno;char padding[2];};
union lineno::$4D6E082ABC3813EFAD274BDB52D637EC {int l_symndx;int l_paddr;};
typedef unsigned int mode_t;
typedef int off_t;
typedef int ptrdiff_t;
struct reloc {int r_vaddr;int r_symndx;unsigned __int16 r_type;char pad[2];};
struct scnhdr {char s_name[8];int s_paddr;int s_vaddr;int s_size;int s_scnptr;int s_relptr;int s_lnnoptr;unsigned __int16 s_nreloc;unsigned __int16 s_nlnno;int s_flags;unsigned int s_align;};
typedef char sig_atomic_t;
typedef unsigned int size_t;
struct stat {__int16 st_dev;unsigned __int16 st_ino;unsigned __int16 st_mode;__int16 st_nlink;unsigned __int16 st_uid;unsigned __int16 st_gid;__int16 st_rdev;int st_size;time_t st_atime;time_t st_mtime;time_t st_ctime;};
struct syment {union syment::$DDDE857849BC8DF52744F40651AC3747 _n;int n_value;__int16 n_scnum;unsigned __int16 n_flags;unsigned int n_type;char n_sclass;char n_numaux;char pad2[2];};
struct syment::$::$FF8ECF8B5000729F16967D2BEB64C9EE {int _n_zeroes;int _n_offset;};
union syment::$DDDE857849BC8DF52744F40651AC3747 {char _n_name[8];struct syment::$DDDE857849BC8DF52744F40651AC3747::$FF8ECF8B5000729F16967D2BEB64C9EE _n_n;char *_n_nptr[2];};
struct syment::$DDDE857849BC8DF52744F40651AC3747::$FF8ECF8B5000729F16967D2BEB64C9EE {int _n_zeroes;int _n_offset;};
typedef unsigned int time_t;
struct tm {int tm_sec;int tm_min;int tm_hour;int tm_mday;int tm_mon;int tm_year;int tm_wday;int tm_yday;int tm_isdst;};
typedef unsigned __int8 u_char;
typedef unsigned int u_int;
typedef unsigned int u_long;
typedef unsigned __int16 u_short;
typedef unsigned __int8 uchar;
typedef unsigned int uint;
typedef unsigned int ulong;
typedef struct __ulong_ulong_t ulong_ulong_t;
typedef unsigned __int16 ushort;
typedef _va_list va_list;
typedef char wchar_t;

MACRO_ADDR ABCR_ADDR;
MACRO_ADDR ACR_ADDR;
MACRO_ADDR ADAR_ADDR;
MACRO_ADDR ADCR_ADDR;
MACRO_AFP AFP_FAULT_ADDSUB;
MACRO_AFP AFP_FAULT_CEIL;
MACRO_AFP AFP_FAULT_COMPARE;
MACRO_AFP AFP_FAULT_DIVIDE;
MACRO_AFP AFP_FAULT_DTOF;
MACRO_AFP AFP_FAULT_DTOLD;
MACRO_AFP AFP_FAULT_FLOOR;
MACRO_AFP AFP_FAULT_FTOD;
MACRO_AFP AFP_FAULT_FTOLD;
MACRO_AFP AFP_FAULT_ITOF;
MACRO_AFP AFP_FAULT_LDTOD;
MACRO_AFP AFP_FAULT_LDTOF;
MACRO_AFP AFP_FAULT_LOGB;
MACRO_AFP AFP_FAULT_MULTIP;
MACRO_AFP AFP_FAULT_REM;
MACRO_AFP AFP_FAULT_RINT;
MACRO_AFP AFP_FAULT_RMD;
MACRO_AFP AFP_FAULT_ROUND;
MACRO_AFP AFP_FAULT_SCALE;
MACRO_AFP AFP_FAULT_UITOF;
MACRO_ADDR ANDAR_ADDR;
MACRO_SubBNR APICARBID_ADDR;
MACRO_SubBNR APICCSR_ADDR;
MACRO_SubBNR APICIDR_ADDR;
MACRO_APIC APIC_INTP;
MACRO_ARITHMETIC ARITHMETIC_FAULT;
MACRO_ARITHMETIC_ZERO ARITHMETIC_ZERO_DIVIDE;
MACRO_SubBNR ARSR_ADDR;
MACRO_ARTYPE ARTYPE;
MACRO_ADDR ASIR_ADDR;
MACRO_ADDR ASR_ADDR;
MACRO_ADDR ASVIR_ADDR;
MACRO_ADDR ATUBISTR_ADDR;
MACRO_ADDR ATUCCR_ADDR;
MACRO_ADDR ATUCLSR_ADDR;
MACRO_ADDR ATUCR_ADDR;
MACRO_ADDR ATUDID_ADDR;
MACRO_ADDR ATUHTR_ADDR;
MACRO_ADDR ATUILR_ADDR;
MACRO_ADDR ATUIPR_ADDR;
MACRO_ADDR ATULT_ADDR;
MACRO_ADDR ATUMGNT_ADDR;
MACRO_ADDR ATUMLAT_ADDR;
MACRO_ADDR ATURID_ADDR;
MACRO_ADDR ATUVID_ADDR;
MACRO_SubBNR AWR_ADDR;
MACRO_NOCLOSE BADINDEX;
MACRO_BAD BAD_ACCESS;
MACRO_ADDR BCON_ADDR;
MACRO_ADDR BCR0_ADDR;
MACRO_ADDR BCR1_ADDR;
MACRO_ADDR BCR2_ADDR;
MACRO_ADDR BCR_ADDR;
MACRO_BEGINNING BEGINNING;
MACRO_CODE BIG_ENDIAN_CODE;
MACRO_ADDR BIUCR_ADDR;
MACRO_ADDR BIUISR_ADDR;
MACRO_SubBNR BMER_ADDR;
MACRO_BOARD BOARD_REV;
MACRO_BOARD_REV BOARD_REV_MASK;
MACRO_BOARD BOARD_REV_RD;
MACRO_BOARD BOARD_REV_RM;
MACRO_BOARD BOARD_REV_RN;
MACRO_BOARD BOARD_REV_RP;
MACRO_ADDR BPCON_ADDR;
MACRO_TRACE BRANCH_TRACE;
MACRO_TRACE BREAKPOINT_TRACE;
MACRO_ADDR BSIR_ADDR;
MACRO_ADDR BSVIR_ADDR;
MACRO_NULL BUFSIZ;
MACRO_BYTE BYTE;
MACRO_TRACE CALL_TRACE;
MACRO_ADDR CCR0_ADDR;
MACRO_ADDR CCR1_ADDR;
MACRO_ADDR CCR2_ADDR;
MACRO_ADDR CCR_ADDR;
MACRO_ADDR CDTR_ADDR;
MACRO_CHAR CHAR_BIT;
MACRO_CHAR_MIN CHAR_MAX;
MACRO_CHAR_MIN CHAR_MIN;
MACRO_CIO CIO_CLK;
MACRO_CLOCKS CLOCKS_PER_SEC;
MACRO_CLOSED CLOSED;
MACRO_ADDR CLSR_ADDR;
MACRO_CONSTRAINT CONSTRAINT_FAULT;
MACRO_CONSTRAINT CONSTRAINT_RANGE;
MACRO_CONTENTS CONTENTS;
MACRO_CONTROL CONTROL;
MACRO_CPU CPU_TYPE_CA_CF;
MACRO_CPU CPU_TYPE_HX;
MACRO_CPU CPU_TYPE_JX;
MACRO_CPU CPU_TYPE_KA_KB;
MACRO_CPU CPU_TYPE_SA_SB;
MACRO_CRYSTALTIME CRYSTALTIME;
MACRO_ADDR CSR0_ADDR;
MACRO_ADDR CSR1_ADDR;
MACRO_ADDR CSR2_ADDR;
MACRO_SubBNR CSR_ADDR;
MACRO_BEGINNING CURRENT;
MACRO_C C_ALIAS;
MACRO_C C_ARG;
MACRO_C C_AUTO;
MACRO_C C_AUTOARG;
MACRO_C C_BLOCK;
MACRO_C C_EFCN;
MACRO_C C_ENTAG;
MACRO_C C_EOS;
MACRO_C C_EXT;
MACRO_C C_EXTDEF;
MACRO_C C_FCN;
MACRO_C C_FIELD;
MACRO_C C_FILE;
MACRO_C C_HIDDEN;
MACRO_C C_LABEL;
MACRO_C C_LEAFEXT;
MACRO_C C_LEAFSTAT;
MACRO_C C_LINE;
MACRO_C C_MOE;
MACRO_C C_MOS;
MACRO_C C_MOU;
MACRO_C C_NULL;
MACRO_C C_REG;
MACRO_C C_REGPARM;
MACRO_C C_SCALL;
MACRO_C C_STAT;
MACRO_C C_STRTAG;
MACRO_C C_TPDEF;
MACRO_C C_ULABEL;
MACRO_C C_UNTAG;
MACRO_C C_USTATIC;
MACRO_ADDR DAB0_ADDR;
MACRO_ADDR DAB1_ADDR;
MACRO_ADDR DAR0_ADDR;
MACRO_ADDR DAR1_ADDR;
MACRO_ADDR DAR2_ADDR;
MACRO_ADDR DAR_ADDR;
MACRO_SubBNR DBAR_ADDR;
MACRO_SubBNR DBCR_ADDR;
MACRO_DBL DBL_DIG;
MACRO_DBL DBL_MANT_DIG;
MACRO_DBL DBL_MAX_10_EXP;
MACRO_DBL DBL_MAX_EXP;
MACRO_DBL DBL_MIN_10_EXP;
MACRO_DBL DBL_MIN_EXP;
MACRO_ADDR DCR0_ADDR;
MACRO_ADDR DCR1_ADDR;
MACRO_ADDR DCR2_ADDR;
MACRO_DESCRIPTOR DESCRIPTOR;
MACRO_ADDR DEVID_ADDR;
MACRO_DFLTPORT DFLTPORT;
MACRO_ADDR DIDR_ADDR;
MACRO_DIMNUM DIMNUM;
MACRO_CONTROL DISPATCH;
MACRO_ADDR DLMCON_ADDR;
MACRO_APIC DMA0_ERR_INTP;
MACRO_INTP DMA0_INTP;
MACRO_APIC DMA1_ERR_INTP;
MACRO_INTP DMA1_INTP;
MACRO_APIC DMA2_ERR_INTP;
MACRO_INTP DMA2_INTP;
MACRO_SubBNR DPER_ADDR;
MACRO_SubBNR DRIR_ADDR;
MACRO_SubBNR DRWS_ADDR;
MACRO_DT DT_ARY;
MACRO_DT DT_FCN;
MACRO_DT DT_NON;
MACRO_DT DT_PTR;
MACRO_SubBNR DWWS_ADDR;
MACRO_ERRNO E2BIG;
MACRO_ERRNO EACCES;
MACRO_ERRNO EAGAIN;
MACRO_ERRNO EBADF;
MACRO_ADDR EBCR_ADDR;
MACRO_ERRNO EBUSY;
MACRO_ADDR ECAR0_ADDR;
MACRO_ADDR ECAR1_ADDR;
MACRO_ADDR ECCR_ADDR;
MACRO_ERRNO ECHILD;
MACRO_ADDR ECTST_ADDR;
MACRO_ERRNO EDEADLOCK;
MACRO_ERRNO EDOM;
MACRO_ERRNO EEXIST;
MACRO_ERRNO EFAULT;
MACRO_ERRNO EFBIG;
MACRO_ERRNO EFREE;
MACRO_ERRNO EINTR;
MACRO_ERRNO EINVAL;
MACRO_ERRNO EIO;
MACRO_ERRNO EISDIR;
MACRO_ADDR ELOG0_ADDR;
MACRO_ADDR ELOG1_ADDR;
MACRO_ERRNO EMFILE;
MACRO_ADDR EMISR_ADDR;
MACRO_ERRNO EMLINK;
MACRO_BEGINNING END;
MACRO_ERRNO ENFILE;
MACRO_ERRNO ENODEV;
MACRO_ERRNO ENOENT;
MACRO_ERRNO ENOEXEC;
MACRO_ERRNO ENOMEM;
MACRO_ERRNO ENOSPC;
MACRO_ERRNO ENOTBLK;
MACRO_ERRNO ENOTDIR;
MACRO_ERRNO ENOTTY;
MACRO_ERRNO ENXIO;
MACRO_EOF EOF;
MACRO_ERRNO EPERM;
MACRO_ERRNO EPIPE;
MACRO_ERRNO ERANGE;
MACRO_ADDR ERBAR_ADDR;
MACRO_ADDR ERLR_ADDR;
MACRO_ERRNO EROFS;
MACRO_ERR ERR;
MACRO_ERROR ERROR;
MACRO_ADDR ERTVR_ADDR;
MACRO_ERRNO ESIGNAL;
MACRO_ERRNO ESPIPE;
MACRO_ERRNO ESRCH;
MACRO_ADDR ESR_ADDR;
MACRO_ERRNO ETXTBSY;
MACRO_EVENT EVENT;
MACRO_EVENT_NOTICE EVENT_NOTICE;
MACRO_SubBNR EVR_ADDR;
MACRO_ERRNO EXDEV;
MACRO_EXIT EXIT_FAILURE;
MACRO_EXIT EXIT_SUCCESS;
MACRO_EXTENDED EXTENDED;
MACRO_ERRNO E_BAD_CALL;
MACRO_ERRNO E_LOCKED;
MACRO_ERRNO E_LONG_STRING;
MACRO_FAILURE FAILURE;
MACRO_BOOL FALSE;
MACRO_PIN FAN_LOSS_PIN;
MACRO_MAGIC_NUMBER FAULT_MAGIC_NUMBER;
MACRO_ADDR FBSR0_ADDR;
MACRO_ADDR FBSR1_ADDR;
MACRO_ADDR FEBR0_ADDR;
MACRO_ADDR FEBR1_ADDR;
MACRO_MAX FILENAME_MAX;
MACRO_FILNMLEN FILNMLEN;
MACRO_FLASH_ADDR FLASH_ADDR_INCR_RD;
MACRO_FLASH_ADDR FLASH_ADDR_INCR_RN;
MACRO_FLASH_ADDR FLASH_ADDR_INCR_RP;
MACRO_FLASH_ADDR FLASH_ADDR_RD;
MACRO_FLASH_ADDR FLASH_ADDR_RN;
MACRO_FLASH_ADDR FLASH_ADDR_RP;
MACRO_FLASH FLASH_TIME_ADJUST;
MACRO_FLASH FLASH_WIDTH;
MACRO_FLOATING FLOATING_INEXACT;
MACRO_FLOATING FLOATING_INVALID_OPERATION;
MACRO_FLOATING FLOATING_OVERFLOW;
MACRO_FLOATING FLOATING_POINT_FAULT;
MACRO_FLOATING FLOATING_RESERVED_ENCODING;
MACRO_FLOATING FLOATING_UNDERFLOW;
MACRO_FLOATING FLOATING_ZERO_DIVIDE;
MACRO_FLT FLT_DIG;
MACRO_FLT FLT_MANT_DIG;
MACRO_FLT FLT_MAX_10_EXP;
MACRO_FLT FLT_MAX_EXP;
MACRO_FLT FLT_MIN_10_EXP;
MACRO_FLT FLT_MIN_EXP;
MACRO_FLT FLT_RADIX;
MACRO_MAX FOPEN_MAX;
MACRO_FPX FPX_ALL;
MACRO_FPX FPX_CLEX;
MACRO_FPX FPX_INEX;
MACRO_FPX FPX_INVOP;
MACRO_FPX FPX_OVFL;
MACRO_FPX FPX_UNFL;
MACRO_FPX FPX_ZDIV;
MACRO_FP_80BIT FP_64BIT;
MACRO_FP_80BIT FP_80BIT;
MACRO_FP FP_RM;
MACRO_FP FP_RN;
MACRO_FP FP_RP;
MACRO_FP FP_RZ;
MACRO_FREQ FREQ_16_MHZ;
MACRO_FREQ FREQ_20_MHZ;
MACRO_FREQ FREQ_25_MHZ;
MACRO_FREQ FREQ_33_MHZ;
MACRO_FREQ FREQ_40_MHZ;
MACRO_FREQ FREQ_4_MHZ;
MACRO_FREQ FREQ_50_MHZ;
MACRO_FREQ FREQ_8_MHZ;
MACRO_ADDR FWSR0_ADDR;
MACRO_ADDR FWSR1_ADDR;
MACRO_F F_AR32WR;
MACRO_F F_BIG_ENDIAN_TARGET;
MACRO_F F_CCINFO;
MACRO_F F_COMP_SYMTAB;
MACRO_F F_EXEC;
MACRO_F F_I960CA;
MACRO_F F_I960CORE;
MACRO_F F_I960CORE0;
MACRO_F F_I960CORE1;
MACRO_F F_I960CORE2;
MACRO_F F_I960CORE3;
MACRO_F F_I960CX;
MACRO_F F_I960HX;
MACRO_F F_I960JL;
MACRO_F F_I960JX;
MACRO_F F_I960KA;
MACRO_F F_I960KB;
MACRO_F F_I960P80;
MACRO_F F_I960SA;
MACRO_F F_I960SB;
MACRO_F F_I960TYPE;
MACRO_F F_LINKPID;
MACRO_F F_LNNO;
MACRO_F F_LSYMS;
MACRO_F F_PIC;
MACRO_F F_PID;
MACRO_F F_PTRIZED;
MACRO_F F_RELFLG;
MACRO_F F_SECT_SYM;
MACRO_G960 G960_CBREAK;
MACRO_G960 G960_ECHO;
MACRO_G960_NON G960_NON_REQUEST;
MACRO_ADDR GMTR_ADDR;
MACRO_ADDR GTSR_ADDR;
MACRO_ADDR HTR_ADDR;
MACRO_INTP I2C_INTP;
MACRO_I960ARNMSZ I960ARNMSZ;
MACRO_I960ROMAGIC I960ROMAGIC;
MACRO_I960RWMAGIC I960RWMAGIC;
MACRO_IAC IAC;
MACRO_ADDR IACR_ADDR;
MACRO_ADDR IAR_ADDR;
MACRO_ADDR IBMR_ADDR;
MACRO_ADDR ICCR_ADDR;
MACRO_ADDR ICON_ADDR;
MACRO_ADDR ICR_ADDR;
MACRO_ADDR IDBR_ADDR;
MACRO_ADDR IDR_ADDR;
MACRO_ADDR IFHPR_ADDR;
MACRO_ADDR IFTPR_ADDR;
MACRO_ADDR IIMR_ADDR;
MACRO_ADDR IISR_ADDR;
MACRO_ADDR IMAP0_ADDR;
MACRO_ADDR IMAP1_ADDR;
MACRO_ADDR IMAP2_ADDR;
MACRO_ADDR IMR0_ADDR;
MACRO_ADDR IMR1_ADDR;
MACRO_SubBNR IMR_ADDR;
MACRO_ADDR IMSK_ADDR;
MACRO_TRACE INSTRUCTION_TRACE;
MACRO_INTEGER INTEGER_OVERFLOW;
MACRO_INT INT_MAX;
MACRO_INT INT_MIN;
MACRO_INVALID_DESCRIPTOR INVALID_DESCRIPTOR;
MACRO_INVALID INVALID_OPCODE;
MACRO_INVALID_OPERAND INVALID_OPERAND;
MACRO_INVALID_SEGMENT INVALID_PAGE_TABLE_DIR_ENTRY;
MACRO_INVALID_SEGMENT INVALID_PAGE_TABLE_ENTRY;
MACRO_INVALID_SEGMENT INVALID_SEGMENT_TABLE_ENTRY;
MACRO_ADDR IOBR_ADDR;
MACRO_ADDR IOLR_ADDR;
MACRO_ADDR IPB0_ADDR;
MACRO_ADDR IPB1_ADDR;
MACRO_ADDR IPHPR_ADDR;
MACRO_ADDR IPND_ADDR;
MACRO_ADDR IPTPR_ADDR;
MACRO_ADDR ISAR_ADDR;
MACRO_ADDR ISP_ADDR;
MACRO_ADDR ISR_ADDR;
MACRO_ADDR LADR0_ADDR;
MACRO_ADDR LADR1_ADDR;
MACRO_ADDR LADR2_ADDR;
MACRO_SubBNR LBACR_ADDR;
MACRO_SubBNR LBALCR_ADDR;
MACRO_LC LC_ALL;
MACRO_LC LC_COLLATE;
MACRO_LC LC_CTYPE;
MACRO_LC LC_MAX;
MACRO_LC LC_MONETARY;
MACRO_LC LC_NUMERIC;
MACRO_LC LC_TIME;
MACRO_LDBL LDBL_DIG;
MACRO_LDBL LDBL_MANT_DIG;
MACRO_LDBL LDBL_MAX_10_EXP;
MACRO_LDBL LDBL_MAX_EXP;
MACRO_LDBL LDBL_MIN_10_EXP;
MACRO_LDBL LDBL_MIN_EXP;
MACRO_LED LED_0;
MACRO_LED LED_1;
MACRO_LED LED_2;
MACRO_LED LED_3;
MACRO_LED_4 LED_4;
MACRO_LED_4 LED_5;
MACRO_LED_4 LED_6;
MACRO_LED_4 LED_7;
MACRO_LENGTH LENGTH;
MACRO_ADDR LMAR0_ADDR;
MACRO_ADDR LMAR1_ADDR;
MACRO_ADDR LMMR0_ADDR;
MACRO_ADDR LMMR1_ADDR;
MACRO_BYTE LONG;
MACRO_LONG LONG_MAX;
MACRO_LONG LONG_MIN;
MACRO_SubBNR LPISR_ADDR;
MACRO_APIC LPROC_ERR_INTP;
MACRO_LPTOFF LPTOFF;
MACRO_LPTON LPTON;
MACRO_L L_tmpnam;
MACRO_MACHINE MACHINE_FAULT;
MACRO_TICKS_PER_SECOND MAX_TICKS_PER_SECOND;
MACRO_SubBNR MBBAR0_ADDR;
MACRO_SubBNR MBBAR1_ADDR;
MACRO_SubBNR MBCR_ADDR;
MACRO_SubBNR MBRWS0_ADDR;
MACRO_SubBNR MBRWS1_ADDR;
MACRO_ADDR MBR_ADDR;
MACRO_SubBNR MBWWS0_ADDR;
MACRO_SubBNR MBWWS1_ADDR;
MACRO_RAND MB_CUR_MAX;
MACRO_MB MB_LEN_MAX;
MACRO_ADDR MCISR_ADDR;
MACRO_SubBNR MEAR_ADDR;
MACRO_TICKS_PER_SECOND MIN_TICKS_PER_SECOND;
MACRO_ADDR MLR_ADDR;
MACRO_ADDR MLTR_ADDR;
MACRO_CODE MRI_CODE;
MACRO_ADDR MTTR_ADDR;
MACRO_ADDR MUCR_ADDR;
MACRO_INTP MU_INTP;
MACRO_APIC MU_NMI_INTP;
MACRO_ADDR NDAR0_ADDR;
MACRO_ADDR NDAR1_ADDR;
MACRO_ADDR NDAR2_ADDR;
MACRO_ADDR NISR_ADDR;
MACRO_NMAGIC NMAGIC;
MACRO_NMI NMI_INT;
MACRO_NOCLOSE NOCLOSE;
MACRO_NO_ADDR NO_ADDR;
MACRO_NO NO_SQUALL;
MACRO_NULL NULL;
MACRO_NUM NUM_FP_REGS;
MACRO_NUM NUM_REGS;
MACRO_N N_ABS;
MACRO_N_BTMASK N_BTMASK;
MACRO_N_BTMASK N_BTSHFT;
MACRO_N N_DEBUG;
MACRO_N_BTMASK N_TMASK;
MACRO_N_BTMASK N_TSHIFT;
MACRO_N N_TV;
MACRO_N N_UNDEF;
MACRO_ADDR ODR_ADDR;
MACRO_ADDR OFHPR_ADDR;
MACRO_ADDR OFTPR_ADDR;
MACRO_ADDR OIMR_ADDR;
MACRO_ADDR OISR_ADDR;
MACRO_ERRNO OK;
MACRO_OKFSEEK OKFSEEK;
MACRO_OMAGIC OMAGIC;
MACRO_ADDR OMR0_ADDR;
MACRO_ADDR OMR1_ADDR;
MACRO_ON ON_BOARD_CLOCK_OFFSET;
MACRO_ON ON_BOARD_DATA_DIR_REG;
MACRO_ON ON_BOARD_DATA_OFFSET;
MACRO_OPERATION OPERATION_FAULT;
MACRO_ADDR OPHPR_ADDR;
MACRO_ADDR OPTPR_ADDR;
MACRO_O O_APPEND;
MACRO_O O_BINARY;
MACRO_O O_CREAT;
MACRO_O O_EXCL;
MACRO_O O_RDONLY;
MACRO_O O_RDWR;
MACRO_O O_TEXT;
MACRO_O O_TRUNC;
MACRO_O O_WRONLY;
MACRO_ADDR PADR0_ADDR;
MACRO_ADDR PADR1_ADDR;
MACRO_ADDR PADR2_ADDR;
MACRO_PAGE PAGE_RIGHTS;
MACRO_ADDR PAIMR_ADDR;
MACRO_ADDR PAQCR_ADDR;
MACRO_FAULT PARALLEL_FAULT;
MACRO_ADDR PATUCMD_ADDR;
MACRO_ADDR PATUISR_ADDR;
MACRO_ADDR PATUSR_ADDR;
MACRO_INTP PATU_BIST_INTP;
MACRO_APIC PATU_ERR_INTP;
MACRO_ADDR PBISR_ADDR;
MACRO_ADDR PBNR_ADDR;
MACRO_ADDR PCMDR_ADDR;
MACRO_SubBNR PDDIR_ADDR;
MACRO_ADDR PDIDR_ADDR;
MACRO_ADDR PECR10_ADDR;
MACRO_ADDR PECR11_ADDR;
MACRO_ADDR PECR12_ADDR;
MACRO_ADDR PECR13_ADDR;
MACRO_ADDR PECR14_ADDR;
MACRO_ADDR PECR1_ADDR;
MACRO_ADDR PECR2_ADDR;
MACRO_ADDR PECR3_ADDR;
MACRO_ADDR PECR4_ADDR;
MACRO_ADDR PECR5_ADDR;
MACRO_ADDR PECR6_ADDR;
MACRO_ADDR PECR7_ADDR;
MACRO_ADDR PECR8_ADDR;
MACRO_ADDR PECR9_ADDR;
MACRO_ADDR PIABAR_ADDR;
MACRO_ADDR PIALR_ADDR;
MACRO_ADDR PIATVR_ADDR;
MACRO_ADDR PLTR_ADDR;
MACRO_ADDR PMBR_ADDR;
MACRO_ADDR PMCON0_ADDR;
MACRO_ADDR PMCON10_ADDR;
MACRO_ADDR PMCON12_ADDR;
MACRO_ADDR PMCON14_ADDR;
MACRO_ADDR PMCON2_ADDR;
MACRO_ADDR PMCON4_ADDR;
MACRO_ADDR PMCON6_ADDR;
MACRO_ADDR PMCON8_ADDR;
MACRO_ADDR PMLR_ADDR;
MACRO_ADDR POCCAR_ADDR;
MACRO_ADDR POCCDR_ADDR;
MACRO_ADDR PODWVR_ADDR;
MACRO_ADDR POMWVR_ADDR;
MACRO_ADDR POUDR_ADDR;
MACRO_PP PP_CTRL_ADDR;
MACRO_PP PP_DATA_ADDR;
MACRO_PP PP_ERR_BIT;
MACRO_PP PP_INIT_BITS;
MACRO_PP PP_POUT_BIT;
MACRO_PP PP_READ_STATUS;
MACRO_PP PP_SEL_BIT;
MACRO_PP PP_STAT_ADDR;
MACRO_ADDR PRCB_ADDR;
MACRO_TRACE PRERETURN_TRACE;
MACRO_PRIVILEGED PRIVILEGED;
MACRO_CONTENTS PROCESS;
MACRO_PROC PROC_MODEL_MASK;
MACRO_PROC PROC_MODEL_RM;
MACRO_PROC PROC_MODEL_RN;
MACRO_PROTECTION PROTECTION_FAULT;
MACRO_SubBNR PRSR_ADDR;
MACRO_ADDR PSR_ADDR;
MACRO_ADDR PUADR0_ADDR;
MACRO_ADDR PUADR1_ADDR;
MACRO_ADDR PUADR2_ADDR;
MACRO_APIC P_PCIBR_ERR_INTP;
MACRO_P P_TV;
MACRO_ADDR QBAR_ADDR;
MACRO_ADDR QCR_ADDR;
MACRO_EXTENDED QUAD;
MACRO_RAND RAND_MAX;
MACRO_REAL REAL_16_MHZ;
MACRO_REAL REAL_20_MHZ;
MACRO_REAL REAL_25_MHZ;
MACRO_REAL REAL_33_MHZ;
MACRO_REAL REAL_40_MHZ;
MACRO_REAL REAL_4_MHZ;
MACRO_REAL REAL_50_MHZ;
MACRO_REAL REAL_8_MHZ;
MACRO_REG REG_AC;
MACRO_REG REG_CCON;
MACRO_REG REG_DMAC;
MACRO_REG REG_E24;
MACRO_REG REG_E25;
MACRO_REG REG_E26;
MACRO_REG REG_E27;
MACRO_REG REG_E28;
MACRO_REG REG_E31;
MACRO_REG REG_EPR;
MACRO_REG REG_FP;
MACRO_REG REG_FP0;
MACRO_REG REG_FP1;
MACRO_REG REG_FP2;
MACRO_REG REG_FP3;
MACRO_REG REG_G0;
MACRO_REG REG_G1;
MACRO_REG REG_G10;
MACRO_REG REG_G11;
MACRO_REG REG_G12;
MACRO_REG REG_G13;
MACRO_REG REG_G14;
MACRO_REG REG_G15;
MACRO_REG REG_G2;
MACRO_REG REG_G3;
MACRO_REG REG_G4;
MACRO_REG REG_G5;
MACRO_REG REG_G6;
MACRO_REG REG_G7;
MACRO_REG REG_G8;
MACRO_REG REG_G9;
MACRO_REG REG_GCON;
MACRO_REG REG_ICON;
MACRO_REG REG_IEH;
MACRO_REG REG_IMSK;
MACRO_REG REG_IP;
MACRO_REG REG_IPND;
MACRO_REG REG_ISP;
MACRO_REG REG_PC;
MACRO_REG REG_PCC;
MACRO_REG REG_PFP;
MACRO_REG REG_R0;
MACRO_REG REG_R1;
MACRO_REG REG_R10;
MACRO_REG REG_R11;
MACRO_REG REG_R12;
MACRO_REG REG_R13;
MACRO_REG REG_R14;
MACRO_REG REG_R15;
MACRO_REG REG_R2;
MACRO_REG REG_R3;
MACRO_REG REG_R4;
MACRO_REG REG_R5;
MACRO_REG REG_R6;
MACRO_REG REG_R7;
MACRO_REG REG_R8;
MACRO_REG REG_R9;
MACRO_REG REG_RIP;
MACRO_REG REG_SF0;
MACRO_REG REG_SF1;
MACRO_REG REG_SF2;
MACRO_REG REG_SF3;
MACRO_REG REG_SF4;
MACRO_REG REG_SP;
MACRO_REG REG_TC;
MACRO_RESERVED_0 RESERVED;
MACRO_RESERVED RESERVED_AREA1;
MACRO_RESERVED RESERVED_AREA2;
MACRO_RESERVED RESERVED_AREA3;
MACRO_RESERVED RESERVED_AREA4;
MACRO_RESERVED RESERVED_AREA_SIZE;
MACRO_TRACE RETURN_TRACE;
MACRO_ADDR RFR_ADDR;
MACRO_ADDR RIDR_ADDR;
MACRO_ROLL ROLL_32_BITS;
MACRO_SubBNR RRCR_ADDR;
MACRO_R R_IPRMED;
MACRO_R R_OPTCALL;
MACRO_R R_OPTCALLX;
MACRO_R R_OPTCALLXA;
MACRO_R R_RELLONG;
MACRO_R R_RELLONG_SUB;
MACRO_R R_RELSHORT;
MACRO_ADDR SACR_ADDR;
MACRO_ADDR SAIMR_ADDR;
MACRO_ADDR SAQCR_ADDR;
MACRO_ADDR SAR1_ADDR;
MACRO_ADDR SAR2_ADDR;
MACRO_ADDR SAR3_ADDR;
MACRO_ADDR SAR4_ADDR;
MACRO_ADDR SAR5_ADDR;
MACRO_ADDR SAR6_ADDR;
MACRO_ADDR SAR7_ADDR;
MACRO_ADDR SAR8_ADDR;
MACRO_SARMAG SARMAG;
MACRO_ADDR SATUCMD_ADDR;
MACRO_ADDR SATUISR_ADDR;
MACRO_ADDR SATUSR_ADDR;
MACRO_APIC SATU_ERR_INTP;
MACRO_ADDR SBISR_ADDR;
MACRO_ADDR SBNR_ADDR;
MACRO_ADDR SBR0_ADDR;
MACRO_ADDR SBR1_ADDR;
MACRO_ADDR SCCR_ADDR;
MACRO_SCHAR SCHAR_MAX;
MACRO_SCHAR SCHAR_MIN;
MACRO_ADDR SDBR_ADDR;
MACRO_ADDR SDCR_ADDR;
MACRO_ADDR SDER_ADDR;
MACRO_ADDR SDIR_ADDR;
MACRO_ADDR SDPR0_ADDR;
MACRO_ADDR SDPR1_ADDR;
MACRO_ADDR SDPR2_ADDR;
MACRO_ADDR SDPR3_ADDR;
MACRO_ADDR SDPR4_ADDR;
MACRO_ADDR SDPR5_ADDR;
MACRO_ADDR SDPR6_ADDR;
MACRO_ADDR SDPR7_ADDR;
MACRO_SEEK SEEK_CUR;
MACRO_SEEK SEEK_END;
MACRO_SEEK SEEK_SET;
MACRO_BYTE SHORT;
MACRO_SHRT SHRT_MAX;
MACRO_SHRT SHRT_MIN;
MACRO_ADDR SIABAR_ADDR;
MACRO_ADDR SIALR_ADDR;
MACRO_ADDR SIATVR_ADDR;
MACRO_SIGNAL SIGABRT;
MACRO_SIGNAL SIGALLOC;
MACRO_SIGNAL SIGFPE;
MACRO_SIGNAL SIGFREE;
MACRO_SIGNAL SIGILL;
MACRO_SIGNAL SIGINT;
MACRO_SIGNAL SIGREAD;
MACRO_SIGNAL SIGSEGV;
MACRO_SIGNAL SIGSIZE;
MACRO_SIGNAL SIGTERM;
MACRO_SIGNAL SIGUSR1;
MACRO_SIGNAL SIGUSR2;
MACRO_SIGNAL SIGWRITE;
MACRO_ADDR SIOBR_ADDR;
MACRO_ADDR SIOLR_ADDR;
MACRO_ADDR SISR_ADDR;
MACRO_ADDR SLTR_ADDR;
MACRO_ADDR SMBR_ADDR;
MACRO_ADDR SMLR_ADDR;
MACRO_ADDR SOCCAR_ADDR;
MACRO_ADDR SOCCDR_ADDR;
MACRO_ADDR SODWVR_ADDR;
MACRO_ADDR SOIOWVR_ADDR;
MACRO_ADDR SOMWVR_ADDR;
MACRO_ADDR SOUDR_ADDR;
MACRO_SQUALL_BASE SQUALL_BASE_ADDR;
MACRO_SQUALL SQUALL_CLOCK_OFFSET;
MACRO_SQUALL SQUALL_DATA_DIR_REG;
MACRO_SQUALL SQUALL_DATA_OFFSET;
MACRO_SQ SQ_01_CA_OFFSET;
MACRO_SQ SQ_01_PORT_OFFSET;
MACRO_ADDR SSP_ADDR;
MACRO_ADDR SSR_ADDR;
MACRO_STRUCTURAL STRUCTURAL_FAULT;
MACRO_STYP STYP_BSS;
MACRO_STYP STYP_COPY;
MACRO_STYP STYP_DATA;
MACRO_STYP STYP_DSECT;
MACRO_STYP STYP_GROUP;
MACRO_STYP STYP_INFO;
MACRO_STYP STYP_NOLOAD;
MACRO_STYP STYP_PAD;
MACRO_STYP STYP_REG;
MACRO_STYP STYP_TEXT;
MACRO_ADDR SUBBNR_ADDR;
MACRO_SYMTBL SUCCESS;
MACRO_TRACE SUPERVISOR_TRACE;
MACRO_SYMNMLEN SYMNMLEN;
MACRO_SYMTBL SYMTBL;
MACRO_S S_ENFMT;
MACRO_S S_IEXEC;
MACRO_S S_IFBLK;
MACRO_S S_IFCHR;
MACRO_S S_IFDIR;
MACRO_S S_IFIFO;
MACRO_S S_IFMT;
MACRO_S S_IFREG;
MACRO_S S_IREAD;
MACRO_S S_IRGRP;
MACRO_S S_IROTH;
MACRO_S S_IRUSR;
MACRO_S S_IRWXG;
MACRO_S S_IRWXO;
MACRO_S S_IRWXU;
MACRO_S S_ISGID;
MACRO_S S_ISUID;
MACRO_S S_ISVTX;
MACRO_S S_IWGRP;
MACRO_S S_IWOTH;
MACRO_S S_IWRITE;
MACRO_S S_IWUSR;
MACRO_S S_IXGRP;
MACRO_S S_IXOTH;
MACRO_S S_IXUSR;
MACRO_APIC S_PCIBR_ERR_INTP;
MACRO_SubBNR SubBNR_ADDR;
MACRO_TCGETA TCGETA;
MACRO_ADDR TCR0_ADDR;
MACRO_ADDR TCR1_ADDR;
MACRO_TCGETA TCSETAF;
MACRO_IRQ TIMER0_IRQ;
MACRO_OFFSET TIMER0_OFFSET;
MACRO_TIMER0 TIMER0_VECTOR;
MACRO_IRQ TIMER1_IRQ;
MACRO_OFFSET TIMER1_OFFSET;
MACRO_TIMER0 TIMER1_VECTOR;
MACRO_TIME TIME_SLICE;
MACRO_MAX TMP_MAX;
MACRO_ADDR TMR0_ADDR;
MACRO_ADDR TMR1_ADDR;
MACRO_TMR TMR_1_2_X_CLOCK;
MACRO_TMR TMR_1_4_X_CLOCK;
MACRO_TMR TMR_1_8_X_CLOCK;
MACRO_TMR TMR_1_X_CLOCK;
MACRO_TMR TMR_AUTO_RELOAD;
MACRO_TMR TMR_ENABLE;
MACRO_TMR TMR_SUP_WRITE;
MACRO_TMR TMR_TERMINAL_CNT;
MACRO_FAULT TRACE_FAULT;
MACRO_MAGIC_NUMBER TRACE_MAGIC_NUMBER;
MACRO_TRIPLE TRIPLE;
MACRO_ADDR TRR0_ADDR;
MACRO_ADDR TRR1_ADDR;
MACRO_BOOL TRUE;
MACRO_TYPE TYPE_FAULT;
MACRO_TYPE TYPE_MISMATCH;
MACRO_T T_CHAR;
MACRO_T T_DOUBLE;
MACRO_T T_ENUM;
MACRO_T T_FLOAT;
MACRO_T T_INT;
MACRO_T T_LNGDBL;
MACRO_T T_LONG;
MACRO_T T_LONGLONG;
MACRO_T T_MOE;
MACRO_T T_NULL;
MACRO_T T_SHORT;
MACRO_T T_STRUCT;
MACRO_T T_UCHAR;
MACRO_T T_UINT;
MACRO_T T_ULONG;
MACRO_T T_ULONGLONG;
MACRO_T T_UNION;
MACRO_T T_USHORT;
MACRO_T T_VOID;
MACRO_VECTOR UART_VECTOR;
MACRO_PIN UART_XINT_PIN;
MACRO_UINT UCHAR_MAX;
MACRO_UINT UINT_MAX;
MACRO_USHRT ULONG_MAX;
MACRO_UNALIGNED UNALIGNED;
MACRO_UNIMPLEMENTED UNIMPLEMENTED;
MACRO_USHRT USHRT_MAX;
MACRO_ADDR VIDR_ADDR;
MACRO_VIRTUAL VIRTUAL_MEMORY_FAULT;
MACRO_BYTE WORD;
MACRO_ADDR X6ISR_ADDR;
MACRO_ADDR X7ISR_ADDR;
MACRO_XINT0 XINT0;
MACRO_VECTOR XINT0_VECTOR;
MACRO_XINT0 XINT1;
MACRO_VECTOR XINT1_VECTOR;
MACRO_XINT0 XINT2;
MACRO_VECTOR XINT2_VECTOR;
MACRO_XINT3 XINT3;
MACRO_VECTOR XINT3_VECTOR;
MACRO_XINT3 XINT4;
MACRO_VECTOR XINT4_VECTOR;
MACRO_XINT5 XINT5;
MACRO_VECTOR XINT5_VECTOR;
MACRO_XINT6 XINT6;
MACRO_VECTOR XINT6_VECTOR;
MACRO_XINT7 XINT7;
MACRO_VECTOR XINT7_VECTOR;
MACRO_XINT XINT_TIMER0;
MACRO_XINT XINT_TIMER1;
MACRO_DFLTPORT XTAL;
double AFP_Fault_Inexact_D(double result, int opcode);
float AFP_Fault_Inexact_S(float result, int opcode);
long double AFP_Fault_Inexact_T(long double result, int opcode);
double AFP_Fault_Invalid_Operation_D(double src1, double src2, int opcode);
float AFP_Fault_Invalid_Operation_S(float src1, float src2, int opcode);
long double AFP_Fault_Invalid_Operation_T(long double src1, union fild src2);
double AFP_Fault_Overflow_D(double result, int opcode);
float AFP_Fault_Overflow_S(float result, int opcode);
long double AFP_Fault_Overflow_T(long double result, int opcode);
double AFP_Fault_Reserved_Encoding_D(double src1, double src2, int opcode);
float AFP_Fault_Reserved_Encoding_S(float src1, float src2, int opcode);
long double AFP_Fault_Reserved_Encoding_T(long double src1, union fild src2);
double AFP_Fault_Underflow_D(double result, int opcode);
float AFP_Fault_Underflow_S(float result, int opcode);
long double AFP_Fault_Underflow_T(long double result, int opcode);
double AFP_Fault_Zero_Divide_D(double src1, double src2, int opcode);
float AFP_Fault_Zero_Divide_S(float src1, float src2, int opcode);
long double AFP_Fault_Zero_Divide_T(long double src1, union fild src2);
MACRO__U _C;
MACRO__EXIT _EXIT_HANDLER_MAX;
MACRO_INIT_ERROR _EXIT_INIT_ERROR;
MACRO__INIT INIT_OK;
MACRO__IOFBF _IODIRTY;
MACRO__IOFBF _IOEOF;
MACRO__IOFBF _IOERR;
MACRO__IOFBF IOFBF;
MACRO__IOFBF _IOLBF;
MACRO__IOFBF _IOMYBUF;
MACRO__IOFBF _IONBF;
MACRO__IOFBF _IOREAD;
MACRO__IOFBF _IORW;
MACRO__IOFBF _IOWRT;
MACRO__U _L;
MACRO__U _N;
MACRO__NUL NUL;
MACRO_ERRNO _NUM_ERR_NUMS;
MACRO__U _P;
MACRO__U _S;
MACRO__U _SP;
MACRO_INIT_ERROR _STDIO_INIT_ERROR;
MACRO_INIT_ERROR _THREAD_INIT_ERROR;
MACRO__U _U;
MACRO__U _X;
MACRO___EDOM __EDOM;
MACRO___ERANGE __ERANGE;
MACRO___M __M_INF_HIGH__;
MACRO___M _M_INF_LOW__;
MACRO___M __M_NEG_INF_HIGH__;
MACRO____SAVEREGS ___SAVEREGS;
void *__builtin_argptr();
int __builtin_argsize();
static div_t __inline_div(int n, int d);
static float __inline_fabsf(float x);
static double __inline_frexp(double x, int *exp);
static int __inline_getc(FILE *p);
static int __inline_getchar(void);
static ldiv_t __inline_ldiv(int n, int d);
static int __inline_putc(int x, FILE *p);
static int __inline_putchar(int x);
static int __inline_tolower(int c);
static int __inline_toupper(int c);
void _assert(const char *, const char *, int);
void _cleanup(void);
const unsigned __int8 _ctype[];
const unsigned int _d_posinf[2];
int *_errno_ptr(void);
void _exit(int);
struct _exit *_exit_create(unsigned int);
int _exit_init(void);
struct _exit *_exit_ptr(void);
int _filbuf(FILE *);
int _flsbuf(unsigned __int8, FILE *);
unsigned int _getac(void);
int _getch(FILE *);
int _map_length(int, const void *, size_t);
int _putch(int, FILE *);
void _semaphore_delete(void **);
void _semaphore_init(void **);
void _semaphore_signal(void **);
void _semaphore_wait(void **);
unsigned int _setac(unsigned int);
void _sig_abrt_dfl(void);
void _sig_alloc_dfl(void);
void (*_sig_dfl(int))();
void _sig_dfl_dummy(int);
void _sig_err_dummy(int);
void (*_sig_eval[12])();
void _sig_fpe_dfl(void);
void _sig_free_dfl(void);
void _sig_ign_dummy(int);
void _sig_ill_dfl(void);
void _sig_int_dfl(void);
void _sig_null(void);
void _sig_read_dfl(void);
void _sig_segv_dfl(void);
void _sig_term_dfl(void);
void _sig_write_dfl(void);
struct _stdio *_stdio_create(unsigned int);
int _stdio_init(void);
struct _stdio *_stdio_ptr(void);
int _stdio_stdopen(int);
struct _thread *_thread_create(unsigned int);
int _thread_init(void);
struct _thread *_thread_ptr(void);
struct _tzset *_tzset_ptr(void);
void abort(void);
int abs(int);
int access(const char *, int);
double acos(double);
float acosf(float);
unsigned int alarm(unsigned int);
char *asctime(const struct tm *);
double asin(double);
float asinf(float);
double atan(double);
double atan2(double, double);
float atan2f(float, float);
float atanf(float);
int atexit(void (*)(void));
double atof(const char *);
int atoi(const char *);
int atol(const char *);
int bcmp(const void *, const void *, int);
char *bcopy(char *, char *, int);
int break_flag;
void *brk(void *);
void brk2(void);
void *bsearch(const void *, const void *, size_t, size_t, int (*)(const void *, const void *));
void bzero(char *, int);
void *calloc(size_t, size_t);
int callx(int, int);
double ceil(double);
float ceilf(float);
void cfree(void *, unsigned int, unsigned int);
int chdir(const char *);
int chmod(const char *, int);
int chown(const char *, int, int);
int chroot(const char *);
void clearerr(FILE *);
clock_t clock(void);
int close(int);
int cmd_stat;
double cos(double);
float cosf(float);
double cosh(double);
float coshf(float);
int creat(const char *, int);
char *crypt(char *, const char *);
char *ctermid(char *);
char *ctime(const time_t *);
char *cuserid(char *);
double difftime(time_t, time_t);
div_t div(int, int);
int dup(int);
int dup2(int, int);
void encrypt(char *, int);
void endgrent(void);
void endpwent(void);
int execl(const char *, const char *, ...);
int execle(const char *, const char *, ...);
int execlp(const char *, const char *, ...);
int execn(const char *);
int execv(const char *, const char **);
int execve(const char *, const char **, char **);
int execvp(const char *, const char **);
void exit(int);
double exp(double);
float expf(float);
double fabs(double);
float fabsf(float);
int fclose(FILE *);
int feof(FILE *);
int ferror(FILE *);
int fflush(FILE *);
int ffs(int);
int fgetc(FILE *);
int fgetpos(FILE *, fpos_t *);
char *fgets(char *, int, FILE *);
double floor(double);
float floorf(float);
double fmod(double, double);
FILE *fopen(const char *, const char *);
int fork(void);
int fp_clrflags(int);
int fp_clriflag(void);
unsigned int fp_getenv(void);
int fp_getflags(void);
int fp_getmasks(void);
int fp_getround(void);
double fp_logb(double);
float fp_logbf(float);
long double fp_logbl(long double);
FPREG fp_register_set[];
double fp_rem(double, double);
float fp_remf(float, float);
long double fp_reml(long double, long double);
double fp_rmd(double, double);
float fp_rmdf(float, float);
long double fp_rmdl(long double, long double);
double fp_round(double);
float fp_roundf(float);
long double fp_roundl(long double);
double fp_scale(double, int);
float fp_scalef(float, int);
long double fp_scalel(long double, int);
unsigned int fp_setenv(unsigned int);
int fp_setflags(int);
int fp_setmasks(int);
int fp_setround(int);
int fprintf(FILE *, const char *, ...);
int fputc(int, FILE *);
int fputs(const char *, FILE *);
size_t fread(void *, size_t, size_t, FILE *);
void free(void *);
FILE *freopen(const char *, const char *, FILE *);
double frexp(double, int *);
int fscanf(FILE *, const char *, ...);
int fseek(FILE *, int, int);
int fsetpos(FILE *, const fpos_t *);
int fstat(int, struct stat *);
int ftell(FILE *);
size_t fwrite(const void *, size_t, size_t, FILE *);
unsigned __int8 get_led_value(void);
int getc(FILE *);
int getchar(void);
char *getcwd(char *, int);
char getegid(void);
char *getenv(const char *);
__int16 geteuid(void);
char getgid(void);
int gethostname(char *, int);
char *getlogin(void);
char *getpass(const char *);
int getpid(void);
int getppid(void);
char *gets(char *);
__int16 getuid(void);
char *getwd(char *);
struct tm *gmtime(const time_t *);
int host_connection;
FAULT_RECORD *i960_get_fault_rec(void);
INTERRUPT_RECORD *i960_get_int_rec(void);
unsigned int i960_modpc(unsigned int, unsigned int);
char *index(const char *, int);
int ioctl(int, int, int *);
int isalnum(int);
int isalpha(int);
int isatty(int);
int iscntrl(int);
int isdigit(int);
int isgraph(int);
int islower(int);
int isprint(int);
int ispunct(int);
int isspace(int);
int isupper(int);
int isxdigit(int);
int kill(int, int);
int labs(int);
int ldaclose();
int ldahread();
struct ldfile *ldaopen();
int ldclose();
double ldexp(double, int);
int ldfhread();
char *ldgetname();
ldiv_t ldiv(int, int);
int ldlinit();
int ldlitem();
int ldlread();
int ldlseek();
int ldnlseek();
int ldnrseek();
int ldnshread();
int ldnsseek();
int ldohseek();
struct ldfile *ldopen();
int ldrseek();
int ldshread();
int ldsseek();
int ldtbindex();
int ldtbread();
int ldtbseek();
int len(const char *);
char *lfind(const char *, const char *, unsigned int *, unsigned int, int (*)(const void *, const void *));
int link(const char *, const char *);
struct lconv *localeconv(void);
struct tm *localtime(const time_t *);
int lock(const char *);
double log(double);
double log10(double);
float log10f(float);
float logf(float);
void longjmp(jmp_buf, int);
int lrand(void);
char *lsearch(const char *, char *, unsigned int *, unsigned int, int (*)(const void *, const void *));
int lseek(int, int, int);
void *malloc(size_t);
int mblen(const char *, size_t);
size_t mbstowcs(wchar_t *, const char *, size_t);
int mbtowc(wchar_t *, const char *, size_t);
void *memccpy(void *, const void *, int, int);
void *memchr(const void *, int, size_t);
int memcmp(const void *, const void *, size_t);
void *memcpy(void *, const void *, size_t);
int memicmp(const void *, const void *, unsigned int);
void *memmove(void *, const void *, size_t);
void *memset(void *, int, size_t);
int mknod(const char *, int, int);
char *mktemp(char *);
time_t mktime(struct tm *);
double modf(double, double *);
int mount(const char *, const char *, int);
int open(const char *, int, ...);
int pause(void);
void perror(const char *);
int pipe(int *);
double pow(double, double);
float powf(float, float);
int printf(const char *, ...);
void printk(const char *, ...);
void prints(const char *, ...);
int ptrace(int, int, int, int);
int putc(int, FILE *);
int putchar(int);
int putenv(char *);
int puts(const char *);
void qsort(void *, size_t, size_t, int (*)(const void *, const void *));
int raise(int);
int rand(void);
int read(int, void *, int);
void *realloc(void *, size_t);
UREG register_set;
int remove(const char *);
int rename(const char *, const char *);
void rewind(FILE *);
char *rindex(const char *, int);
void *sbrk(int);
int scanf(const char *, ...);
int seed(int);
void set_led_value(unsigned __int8);
void setbuf(FILE *, char *);
int setgid(int);
int setgrent(void);
int sethostname(char *, int);
int setjmp(jmp_buf);
void setkey(const char *);
char *setlocale(int, const char *);
int setpwent(void);
int setuid(int);
int setvbuf(FILE *, char *, int, size_t);
void (*signal(int, void (*)(int)))(int);
double sin(double);
float sinf(float);
double sinh(double);
float sinhf(float);
unsigned int sleep(unsigned int);
int sprintf(char *, const char *, ...);
double sqrt(double);
float sqrtf(float);
void srand(unsigned int);
int sscanf(const char *, const char *, ...);
int stat(const char *, struct stat *);
void std_err(const char *);
int stime(int *);
char *strcat(char *, const char *);
char *strchr(const char *, int);
int strcmp(const char *, const char *);
int strcoll(const char *, const char *);
char *strcpy(char *, const char *);
size_t strcspn(const char *, const char *);
char *strdup(const char *);
char *strerror(int);
size_t strftime(char *s, size_t, const char *, const struct tm *);
int stricmp(const char *, const char *);
size_t strlen(const char *);
char *strlwr(char *);
char *strncat(char *, const char *, size_t);
int strncmp(const char *, const char *, size_t);
char *strncpy(char *, const char *, size_t);
int strnicmp(const char *, const char *, size_t);
char *strnset(char *, int, size_t);
char *strpbrk(const char *, const char *);
int strpos(const char *, char);
char *strrchr(const char *, int);
char *strrev(char *);
char *strrpbrk(const char *, const char *);
int strrpos(const char *, char);
char *strset(char *, int);
size_t strspn(const char *, const char *);
char *strstr(const char *, const char *);
double strtod(const char *, char **);
char *strtok(char *, const char *);
int strtol(const char *, char **, int);
unsigned int strtoul(const char *, char **, int);
char *strupr(char *);
size_t strxfrm(char *, const char *, size_t);
void swab(void *, void *, int);
int sync(void);
void sys_abort(void);
void sys_exec(int, void *, int);
void sys_fork(int, int, int, unsigned __int16);
void sys_fresh(int, void *, unsigned __int16, unsigned __int16 *, unsigned __int16 *);
void sys_getsp(int, int *);
void sys_kill(int, int);
void sys_newmap(int, void *);
void sys_sig(int, int, int (*)());
void sys_times(int, int *);
int sys_trace(int, int, int, int *);
void sys_xit(int, int, unsigned __int16 *, unsigned __int16 *);
int system(const char *);
double tan(double);
float tanf(float);
double tanh(double);
float tanhf(float);
void tell_fs(int, int, int, int);
char *tempnam(char *, char *);
int tgetent(char *, const char *);
int tgetflag(const char *);
int tgetnum(const char *);
char *tgetstr(const char *, char **);
char *tgoto(const char *, int, int);
time_t time(time_t *);
FILE *tmpfile(void);
char *tmpnam(char *);
char *tmpname(char *);
int tolower(int);
int toupper(int);
int tputs(const char *, int, int (*)());
char *ttyname(int);
int umask(int);
int umount(const char *);
int ungetc(int, FILE *);
int unlink(const char *);
void unlock(const char *);
int utime(const char *, int *);
int vfprintf(FILE *, const char *, _va_list);
int vprintf(const char *, _va_list);
int vsprintf(char *, const char *, _va_list);
int wait(int *);
size_t wcstombs(char *, const wchar_t *, size_t);
int wctomb(char *, wchar_t);
int write(int, const void *, int);
