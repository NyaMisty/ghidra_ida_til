struct $1CFB5D895C6B2534CA582A7618E3281E {int charttype;int chartstyle;windowtype chartwindow;windowtype datawindow;titletype maintitle;titletype subtitle;axistype xaxis;axistype yaxis;legendtype legend;};
enum $285FE556F43A898D15AEDE2AD44E964B {_PG_LINEARAXIS = 0x1,_PG_LOGAXIS = 0x2,};
enum $2B22B6772705E6AEC2CAD82F2944FAB1 {_PG_DECFORMAT = 0x1,_PG_EXPFORMAT = 0x2,};
enum $3B9604985F7797BDFAC080FFD41D1C2D {_PG_LEFT = 0x1,_PG_CENTER = 0x2,_PG_RIGHT = 0x3,_PG_BOTTOM = 0x4,_PG_OVERLAY = 0x5,};
struct $49112922E8D3FA36A9D9A6626290371D {int x1;int y1;int x2;int y2;int border;int background;int borderstyle;int bordercolor;};
enum $5B647C1D3C6CCCC37E762A84E6256E6C {_PG_POINTANDLINE = 0x1,_PG_POINTONLY = 0x2,};
struct $5D287BBCEE976282B532DF578B48FE30 {char title[70];int titlecolor;int justify;};
struct $5E4AF5222BD6224857F90F4001142430 {unsigned int color;unsigned int style;fillmap fill;char plotchar;};
enum $657FB054558D6B1658FCC1B2803345B2 {_PATH_RIGHT = 0x0,_PATH_LEFT = 0x1,_PATH_UP = 0x2,_PATH_DOWN = 0x3,};
enum $6F96E9681260FC748372DD4343C17B95 {_GWRAPOFF = 0x0,_GWRAPON = 0x1,};
struct $743CAB6F7D155AB299758056AE88817D {int grid;int gridstyle;titletype axistitle;int axiscolor;int labeled;int rangetype;float logbase;int autoscale;float scalemin;float scalemax;float scalefactor;titletype scaletitle;float ticinterval;int ticformat;int ticdecimals;};
enum $8B2899C6F90A30B1685F1D140540F33D {_TOP = 0x1,_CAP = 0x2,_HALF = 0x3,_BASE = 0x4,_BOTTOM = 0x5,};
struct $979FA3DE6ECCF956231BFC297C4278E6 {int quot;int rem;};
enum $A71B67504CA7F11F32ADA55062B203FF {_PG_PERCENT = 0x1,_PG_NOPERCENT = 0x2,};
struct $AD9A92298C4A3046DC03D0819903D2FB {int legend;int place;int textcolor;int autosize;windowtype legendwindow;};
struct $B8243ED19B76CA5D55F9F69ED1E7C09F {__int32 quot;__int32 rem;};
enum $C0DC64B9E5ECA4890A3EC660268C0D54 {_GCURSOROFF = 0x0,_GCURSORON = 0x1,};
enum $D229372A3490280A1D79088C14D8B580 {INTR_CF = 0x1,INTR_PF = 0x4,INTR_AF = 0x10,INTR_ZF = 0x40,INTR_SF = 0x80,INTR_TF = 0x100,INTR_IF = 0x200,INTR_DF = 0x400,INTR_OF = 0x800,};
enum $E5A8E9F86D2C3E1C078A8FD0090EC5C6 {_NORMAL = 0x0,_LEFT = 0x1,_CENTER = 0x2,_RIGHT = 0x3,};
enum $FB386DB2273F2B9DF0ED23A469EDEB29 {_PG_PLAINBARS = 0x1,_PG_STACKEDBARS = 0x2,};
enum $FCD69D9C70D38EBE1D2A73A05A192637 {_GOR = 0x0,_GAND = 0x1,_GPRESET = 0x2,_GPSET = 0x3,_GXOR = 0x4,};
enum $FEA1A8332DF572B4B82D4D6EC6C47001 {_PG_BARCHART = 0x1,_PG_COLUMNCHART = 0x2,_PG_LINECHART = 0x3,_PG_SCATTERCHART = 0x4,_PG_PIECHART = 0x5,};
struct BYTEREGS {unsigned __int8 al;unsigned __int8 ah;unsigned __int8 bl;unsigned __int8 bh;unsigned __int8 cl;unsigned __int8 ch;unsigned __int8 dl;unsigned __int8 dh;};
typedef unsigned int DBCODE;
typedef struct dirent DIR;
struct DOSERROR {int exterror;char c_class;char action;char locus;};
typedef struct __iobuf FILE;
typedef JCHAR far *FJSTRING;
union INTPACK {struct INTPACKB h;struct INTPACKW w;struct INTPACKW x;};
struct INTPACKB {unsigned __int16 : 16;unsigned __int16 : 16;unsigned __int16 : 16;unsigned __int16 : 16;unsigned __int16 : 16;unsigned __int16 : 16;unsigned __int16 : 16;unsigned __int16 : 16;unsigned __int8 bl;unsigned __int8 bh;unsigned __int8 dl;unsigned __int8 dh;unsigned __int8 cl;unsigned __int8 ch;unsigned __int8 al;unsigned __int8 ah;};
struct INTPACKW {unsigned int gs;unsigned int fs;unsigned int es;unsigned int ds;unsigned int di;unsigned int si;unsigned int bp;unsigned int sp;unsigned int bx;unsigned int dx;unsigned int cx;unsigned int ax;unsigned int ip;unsigned int cs;unsigned int flags;};
struct INTPACKX {unsigned int gs;unsigned int fs;unsigned int es;unsigned int ds;unsigned int edi;unsigned int esi;unsigned int ebp;unsigned int esp;unsigned int ebx;unsigned int edx;unsigned int ecx;unsigned int eax;unsigned int eip;unsigned int cs;unsigned int flags;};
typedef unsigned __int8 JCHAR;
typedef unsigned int JMOJI;
typedef JCHAR *JSTRING;
enum MACRO_ACCESS {ACCESS_WR = 0x2,ACCESS_RD = 0x4,};
enum MACRO_BUFSIZ {BUFSIZ = 512,};
enum MACRO_CHAR {CHAR_BIT = 8,CHAR_MIN = 0,CHAR_MAX = 255,};
enum MACRO_CLK {CLK_TCK = 100,};
enum MACRO_CLOCKS {CLOCKS_PER_SEC = 100,};
enum MACRO_CT {CT_ANK = 0,CT_KJ1 = 1,CT_KJ2 = 2,CT_ILGL = -1,};
enum MACRO_DIG {DBL_MANT_DIG = 53,LDBL_MANT_DIG = 53,FLT_DIG = 6,DBL_DIG = 15,LDBL_DIG = 15,};
enum MACRO_DOMAIN {DOMAIN = 1,SING = 2,};
enum MACRO_DOS {DOS_GET_CHAR_NO_ECHO = 0x7,DOS_CUR_DISK = 0x19,DOS_SET_DTA = 0x1A,DOS_SET_INT = 0x25,DOS_GET_DATE = 0x2A,DOS_GET_TIME = 0x2C,DOS_GET_VERSION = 0x30,DOS_CTRL_BREAK = 0x33,DOS_GET_INT = 0x35,DOS_SWITCH_CHAR = 0x37,DOS_MKDIR = 0x39,DOS_RMDIR = 0x3A,DOS_CHDIR = 0x3B,DOS_CREAT = 0x3C,DOS_OPEN = 0x3D,DOS_CLOSE = 0x3E,DOS_READ = 0x3F,DOS_WRITE = 0x40,DOS_UNLINK = 0x41,DOS_LSEEK = 0x42,DOS_CHMOD = 0x43,DOS_IOCTL = 0x44,DOS_DUP = 0x45,DOS_DUP2 = 0x46,DOS_GETCWD = 0x47,DOS_ALLOC_SEG = 0x48,DOS_FREE_SEG = 0x49,DOS_MODIFY_SEG = 0x4A,DOS_EXIT = 0x4C,DOS_FIND_FIRST = 0x4E,DOS_FIND_NEXT = 0x4F,DOS_RENAME = 0x56,DOS_FILE_DATE = 0x57,DOS_COMMIT_FILE = 0x68,};
enum MACRO_EM {EM_INVALID = 1,EM_DENORMAL = 2,EM_ZERODIVIDE = 4,EM_OVERFLOW = 8,EM_UNDERFLOW = 16,EM_INEXACT = 32,EM_PRECISION = 32,};
enum MACRO_EOF {EOF = -1,};
enum MACRO_ERRNO {EZERO = 0,ENOENT = 1,E2BIG = 2,ENOEXEC = 3,EBADF = 4,ENOMEM = 5,EACCES = 6,EEXIST = 7,EXDEV = 8,EINVAL = 9,ENFILE = 10,EMFILE = 11,ENOSPC = 12,EDOM = 13,ERANGE = 14,EDEADLK = 15,EDEADLOCK = 15,EINTR = 16,ECHILD = 17,EAGAIN = 18,EBUSY = 19,EFBIG = 20,EIO = 21,EISDIR = 22,ENOTDIR = 23,EMLINK = 24,ENOTBLK = 25,ENOTTY = 26,ENXIO = 27,EPERM = 28,EPIPE = 29,EROFS = 30,ESPIPE = 31,ESRCH = 32,ETXTBSY = 33,EFAULT = 34,ENAMETOOLONG = 35,ENODEV = 36,ENOLCK = 37,ENOSYS = 38,ENOTEMPTY = 39,};
enum MACRO_EXIT {EXIT_SUCCESS = 0,EXIT_FAILURE = 255,};
enum MACRO_EXP {FLT_MIN_EXP = -127,DBL_MIN_EXP = -1023,LDBL_MIN_EXP = -1023,FLT_MIN_10_EXP = -38,DBL_MIN_10_EXP = -307,LDBL_MIN_10_EXP = -307,FLT_MAX_EXP = 127,DBL_MAX_EXP = 1023,LDBL_MAX_EXP = 1023,FLT_MAX_10_EXP = 38,DBL_MAX_10_EXP = 308,LDBL_MAX_10_EXP = 308,};
enum MACRO_FILENAME {FILENAME_MAX = 80,FOPEN_MAX = 20,OPEN_MAX = 20,PATH_MAX = 143,};
enum MACRO_FILENO {STDIN_FILENO = 0,STDOUT_FILENO = 1,STDERR_FILENO = 2,STDAUX_FILENO = 3,STDPRN_FILENO = 4,};
enum MACRO_FLT {FLT_RADIX = 2,FLT_ROUNDS = 1,FLT_MANT_DIG = 24,};
enum MACRO_FPE {FPE_INVALID = 129,FPE_DENORMAL = 130,FPE_ZERODIVIDE = 131,FPE_OVERFLOW = 132,FPE_UNDERFLOW = 133,FPE_INEXACT = 134,FPE_UNEMULATED = 135,FPE_SQRTNEG = 136,FPE_STACKOVERFLOW = 138,FPE_STACKUNDERFLOW = 139,FPE_EXPLICITGEN = 140,FPE_IOVERFLOW = 141,FPE_LOGERR = 142,FPE_MODERR = 143,};
enum MACRO_IC {IC_AFFINE = 4096,IC_PROJECTIVE = 0,};
enum MACRO_INT {INT_MIN = -32768,INT_MAX = 32767,};
enum MACRO_L {L_tmpnam = 13,};
enum MACRO_LC {LC_CTYPE = 0,LC_NUMERIC = 1,LC_TIME = 2,LC_COLLATE = 3,LC_MONETARY = 4,LC_MESSAGES = 5,LC_ALL = 6,};
enum MACRO_LOCK {_LK_LOCK = 1,LK_LOCK = 1,};
enum MACRO_LONG {LONG_MIN = 0,};
enum MACRO_MAX {USHRT_MAX = -1,LONG_MAX = -1,};
enum MACRO_MB {MB_LEN_MAX = 2,};
enum MACRO_MB_CUR {MB_CUR_MAX = 2,};
enum MACRO_MCW {MCW_EM = 63,};
enum MACRO_MCW_IC {MCW_IC = 4096,};
enum MACRO_MCW_PC {MCW_PC = 768,};
enum MACRO_MCW_RC {MCW_RC = 3072,};
enum MACRO_MODE {DOS_MODE = 0,OS2_MODE = 1,};
enum MACRO_NAME {NAME_MAX = 12,};
enum MACRO_NBLCK {_LK_NBLCK = 2,LK_NBLCK = 2,};
enum MACRO_NBRLCK {_LK_NBRLCK = 4,LK_NBRLCK = 4,};
enum MACRO_NULL {NULL = 0,};
enum MACRO_OK {R_OK = 4,W_OK = 2,X_OK = 1,F_OK = 0,};
enum MACRO_OVERFLOW {OVERFLOW = 3,UNDERFLOW = 4,};
enum MACRO_O_APPEND {O_APPEND = 0x10,_O_APPEND = 0x10,};
enum MACRO_O_BINARY {O_BINARY = 0x200,_O_BINARY = 0x200,};
enum MACRO_O_CREAT {O_CREAT = 0x20,_O_CREAT = 0x20,};
enum MACRO_O_EXCL {O_EXCL = 0x400,_O_EXCL = 0x400,};
enum MACRO_O_NOINHERIT {O_NOINHERIT = 0x80,_O_NOINHERIT = 0x80,};
enum MACRO_O_RDONLY {O_RDONLY = 0x0,_O_RDONLY = 0x0,};
enum MACRO_O_RDWR {O_RDWR = 0x2,_O_RDWR = 0x2,};
enum MACRO_O_TEXT {O_TEXT = 0x100,_O_TEXT = 0x100,};
enum MACRO_O_TRUNC {O_TRUNC = 0x40,_O_TRUNC = 0x40,};
enum MACRO_O_WRONLY {O_WRONLY = 0x1,_O_WRONLY = 0x1,};
enum MACRO_P {P_WAIT = 0,P_NOWAIT = 1,P_NOWAITO = 3,};
enum MACRO_PC {PC_24 = 0,PC_53 = 512,PC_64 = 768,};
enum MACRO_PLOSS {PLOSS = 6,};
enum MACRO_RC {RC_NEAR = 0,RC_DOWN = 1024,RC_UP = 2048,RC_CHOP = 3072,};
enum MACRO_RLCK {_LK_RLCK = 3,LK_RLCK = 3,};
enum MACRO_S {S_IFMT = 0xF000,S_IFDIR = 0x4000,S_IFCHR = 0x2000,S_IFREG = 0x8000,S_IRWXU = 0x1C0,S_IRUSR = 0x100,S_IWUSR = 0x80,S_IXUSR = 0x40,S_IREAD = 0x100,S_IWRITE = 0x80,S_IEXEC = 0x40,S_IRWXG = 0x38,S_IRGRP = 0x20,S_IWGRP = 0x10,S_IXGRP = 0x8,S_IRWXO = 0x7,S_IROTH = 0x4,S_IWOTH = 0x2,S_IXOTH = 0x1,S_ISUID = 0x800,S_ISGID = 0x400,S_ISVTX = 0x200,};
enum MACRO_SCHAR {SCHAR_MIN = -128,SCHAR_MAX = 127,};
enum MACRO_SEEK {SEEK_SET = 0,SEEK_CUR = 1,SEEK_END = 2,};
enum MACRO_SH {SH_COMPAT = 0x0,SH_DENYRW = 0x10,SH_DENYWR = 0x20,SH_DENYRD = 0x30,SH_DENYNO = 0x40,};
enum MACRO_SHRT {SHRT_MIN = -32768,SHRT_MAX = 32767,};
enum MACRO_SIG {SIG_IGN = 1,SIG_DFL = 2,SIG_ERR = 3,};
enum MACRO_SIGNAL {SIGABRT = 1,SIGFPE = 2,SIGILL = 3,SIGINT = 4,SIGSEGV = 5,SIGTERM = 6,SIGBREAK = 7,SIGUSR1 = 8,SIGUSR2 = 9,SIGUSR3 = 10,SIGIDIVZ = 11,SIGIOVFL = 12,_SIGMAX = 12,_SIGMIN = 1,};
enum MACRO_SW {SW_INVALID = 1,SW_DENORMAL = 2,SW_ZERODIVIDE = 4,SW_OVERFLOW = 8,SW_UNDERFLOW = 16,SW_INEXACT = 32,SW_UNEMULATED = 64,SW_SQRTNEG = 128,SW_STACKOVERFLOW = 512,SW_STACKUNDERFLOW = 1024,};
enum MACRO_TLOSS {TLOSS = 5,};
enum MACRO_TMP {TMP_MAX = 17576,RAND_MAX = 32767,};
enum MACRO_UCHAR {UCHAR_MAX = 255,};
enum MACRO_UINT {UINT_MAX = -1,TZNAME_MAX = 30,};
enum MACRO_ULONG {ULONG_MAX = -1,};
enum MACRO_UNLCK {_LK_UNLCK = 0,LK_UNLCK = 0,};
enum MACRO__A {_A_NORMAL = 0x0,_A_RDONLY = 0x1,_A_HIDDEN = 0x2,_A_SYSTEM = 0x4,_A_VOLID = 0x8,_A_SUBDIR = 0x10,_A_ARCH = 0x20,};
enum MACRO__ANALOGCOLOR {_ANALOGCOLOR = 6,};
enum MACRO__ANALOGMONO {_ANALOGMONO = 5,};
enum MACRO__BINARY {_BINARY = 0x40,_IOFBF = 0x100,_IOLBF = 0x200,_IONBF = 0x400,_TMPFIL = 0x800,_DIRTY = 0x1000,_ISTTY = 0x2000,_DYNAMIC = 0x4000,};
enum MACRO__BLACK {_BLACK = 0x0,_BLUE = 0x0,};
enum MACRO__BRIGHTWHITE {_BRIGHTWHITE = 0x3F3F,};
enum MACRO__BROWN {_BROWN = 0x152A,};
enum MACRO__CNTRL {_CNTRL = 0x1,};
enum MACRO__COM {_COM_INIT = 0,_COM_SEND = 1,_COM_RECEIVE = 2,_COM_STATUS = 3,_COM_CHR7 = 2,_COM_CHR8 = 3,_COM_STOP1 = 0,_COM_STOP2 = 4,_COM_NOPARITY = 0,_COM_ODDPARITY = 8,_COM_SPACEPARITY = 16,_COM_EVENPARITY = 24,_COM_110 = 0,_COM_150 = 32,_COM_300 = 64,_COM_600 = 96,_COM_1200 = 128,_COM_2400 = 160,_COM_4800 = 192,_COM_9600 = 224,};
enum MACRO__CW {_CW_DEFAULT = 4671,};
enum MACRO__CYAN {_CYAN = 0x2A00,};
enum MACRO__DEFAULTMODE {_DEFAULTMODE = -1,};
enum MACRO__DIGIT {_DIGIT = 0x20,};
enum MACRO__DISK {_DISK_RESET = 0,_DISK_STATUS = 1,_DISK_READ = 2,_DISK_WRITE = 3,_DISK_VERIFY = 4,_DISK_FORMAT = 5,};
enum MACRO__EGA {_EGA = 5,};
enum MACRO__EM {_EM_INVALID = 0x1,_EM_DENORMAL = 0x2,_EM_ZERODIVIDE = 0x4,_EM_OVERFLOW = 0x8,_EM_UNDERFLOW = 0x10,_EM_INEXACT = 0x20,};
enum MACRO__ENHANCED {_ENHANCED = 3,};
enum MACRO__ERESNOCOLOR {_ERESNOCOLOR = 15,_ERESCOLOR = 16,};
enum MACRO__FPE {_FPE_INVALID = 0x81,_FPE_DENORMAL = 0x82,_FPE_ZERODIVIDE = 0x83,_FPE_OVERFLOW = 0x84,_FPE_UNDERFLOW = 0x85,_FPE_INEXACT = 0x86,_FPE_UNEMULATED = 0x87,_FPE_SQRTNEG = 0x88,_FPE_STACKOVERFLOW = 0x8A,_FPE_STACKUNDERFLOW = 0x8B,_FPE_EXPLICITGEN = 0x8C,_FPE_IOVERFLOW = 0x8D,_FPE_LOGERR = 0x8E,_FPE_MODERR = 0x8F,};
enum MACRO__GBORDER {_GBORDER = 2,};
enum MACRO__GCLEARSCREEN {_GCLEARSCREEN = 0,_GVIEWPORT = 1,_GWINDOW = 2,};
enum MACRO__GFILLINTERIOR {_GFILLINTERIOR = 3,};
enum MACRO__GRAY {_GRAY = 0x1515,};
enum MACRO__GREEN {_GREEN = 0x2A00,};
enum MACRO__GRFONTFILENOTFOUND {_GRFONTFILENOTFOUND = -6,};
enum MACRO__GRINSUFFICIENTMEMORY {_GRINSUFFICIENTMEMORY = -5,};
enum MACRO__GRINVALIDFONTFILE {_GRINVALIDFONTFILE = -7,};
enum MACRO__GRINVALIDPARAMETER {_GRINVALIDPARAMETER = -4,};
enum MACRO__GRMODENOTSUPPORTED {_GRMODENOTSUPPORTED = -2,};
enum MACRO__GRNOOUTPUT {_GRNOOUTPUT = 1,_GRCLIPPED = 2,};
enum MACRO__GRNOTINPROPERMODE {_GRNOTINPROPERMODE = -3,};
enum MACRO__GROK {_GROK = 0,_GRERROR = -1,};
enum MACRO__GSCROLLDOWN {_GSCROLLDOWN = -1,};
enum MACRO__GSCROLLUP {_GSCROLLUP = 1,};
enum MACRO__HARDERR {_HARDERR_IGNORE = 0,_HARDERR_RETRY = 1,_HARDERR_ABORT = 2,_HARDERR_FAIL = 3,};
enum MACRO__HEAPBADNODE {_HEAPBADNODE = 3,_HEAPEND = 4,};
enum MACRO__HEAPBADPTR {_HEAPBADPTR = 5,};
enum MACRO__HEAPOK {_HEAPOK = 0,_HEAPEMPTY = 1,_HEAPBADBEGIN = 2,};
enum MACRO__HERCMONO {_HERCMONO = 11,};
enum MACRO__HERCULES {_HERCULES = 3,_MCGA = 4,};
enum MACRO__HGC {_HGC = 3,};
enum MACRO__HRES16COLOR {_HRES16COLOR = 14,};
enum MACRO__HRESBW {_HRESBW = 6,};
enum MACRO__IC {_IC_AFFINE = 0x1000,_IC_PROJECTIVE = 0x0,};
enum MACRO__K {_K = 0x1,_KP = 0x2,_J1 = 0x4,_J2 = 0x8,};
enum MACRO__KEYBRD {_KEYBRD_READ = 0,_KEYBRD_READY = 1,_KEYBRD_SHIFTSTATUS = 2,};
enum MACRO__LIGHTBLUE {_LIGHTBLUE = 0x1515,};
enum MACRO__LIGHTCYAN {_LIGHTCYAN = 0x3F15,};
enum MACRO__LIGHTGREEN {_LIGHTGREEN = 0x3F15,};
enum MACRO__LIGHTMAGENTA {_LIGHTMAGENTA = 0x153F,};
enum MACRO__LIGHTRED {_LIGHTRED = 0x153F,};
enum MACRO__LIGHTYELLOW {_LIGHTYELLOW = 16191,};
enum MACRO__LOWER {_LOWER = 0x80,};
enum MACRO__M1ST {_M1ST = 1,_M2ND = 2,_MSYMB = 4,_MPUNCT = 8,};
enum MACRO__MAGENTA {_MAGENTA = 0x2A,};
enum MACRO__MAX {_MAX_NAME = 13,};
enum MACRO__MAXCOLORMODE {_MAXCOLORMODE = -2,};
enum MACRO__MAXRESMODE {_MAXRESMODE = -3,};
enum MACRO__MAXTEXTROWS {_MAXTEXTROWS = -1,};
enum MACRO__MAX_PATH {_MAX_PATH = 144,_MAX_DRIVE = 3,_MAX_DIR = 130,_MAX_FNAME = 9,_MAX_EXT = 5,_MAX_PATH2 = 147,};
enum MACRO__MB {_MB_LEAD = 0x1,_MB_CP_SBCS = 0x0,_MB_CP_OEM = 0xFFFE,_MB_CP_ANSI = 0xFFFD,};
enum MACRO__MBC {_MBC_SINGLE = 0,_MBC_LEAD = 1,_MBC_TRAIL = 2,_MBC_ILLEGAL = -1,};
enum MACRO__MCW {_MCW_EM = 0x3F,};
enum MACRO__MCW_IC {_MCW_IC = 0x1000,};
enum MACRO__MCW_PC {_MCW_PC = 0x300,};
enum MACRO__MCW_RC {_MCW_RC = 0xC00,};
enum MACRO__MONO {_MONO = 1,_COLOR = 2,};
enum MACRO__MRES16COLOR {_MRES16COLOR = 13,};
enum MACRO__MRES256COLOR {_MRES256COLOR = 19,_URES256COLOR = 256,};
enum MACRO__MRESNOCOLOR {_MRESNOCOLOR = 5,};
enum MACRO__NFILES {_NFILES = 20,};
enum MACRO__NKEYBRD {_NKEYBRD_READ = 0x10,_NKEYBRD_READY = 0x11,_NKEYBRD_SHIFTSTATUS = 0x12,};
enum MACRO__NODISPLAY {_NODISPLAY = -1,};
enum MACRO__PC {_PC_24 = 0x0,_PC_53 = 0x200,_PC_64 = 0x300,};
enum MACRO__PG {_PG_MAXCHARTTYPE = 5,_PG_MAXCHARTSTYLE = 2,_PG_NOTINITIALIZED = 101,_PG_BADSCREENMODE = 102,_PG_BADCHARTTYPE = 103,_PG_BADLEGENDWINDOW = 104,_PG_BADDATAWINDOW = 105,_PG_TOOSMALLN = 106,_PG_TOOFEWSERIES = 107,_PG_BADCHARTSTYLE = 1,_PG_BADLOGBASE = 2,_PG_BADSCALEFACTOR = 3,_PG_BADCHARTWINDOW = 4,_PG_TITLELEN = 70,_PG_PALETTELEN = 16,};
enum MACRO__PRINT {_PRINT = 0x8,};
enum MACRO__PRINTER {_PRINTER_WRITE = 0,_PRINTER_INIT = 1,_PRINTER_STATUS = 2,};
enum MACRO__PUNCT {_PUNCT = 0x4,};
enum MACRO__RC {_RC_NEAR = 0x0,_RC_DOWN = 0x400,_RC_UP = 0x800,_RC_CHOP = 0xC00,};
enum MACRO__READ {_READ = 0x1,_WRITE = 0x2,_UNGET = 0x4,_BIGBUF = 0x8,_EOF = 0x10,_SFERR = 0x20,_APPEND = 0x80,};
enum MACRO__RED {_RED = 0x2A,};
enum MACRO__SPACE {_SPACE = 0x2,};
enum MACRO__SVGA {_SVGA = 7,};
enum MACRO__SVRES16COLOR {_SVRES16COLOR = 0x102,};
enum MACRO__SVRES256COLOR {_SVRES256COLOR = 0x103,};
enum MACRO__SW {_SW_INVALID = 0x1,_SW_DENORMAL = 0x2,_SW_ZERODIVIDE = 0x4,_SW_OVERFLOW = 0x8,_SW_UNDERFLOW = 0x10,_SW_INEXACT = 0x20,_SW_UNEMULATED = 0x40,_SW_SQRTNEG = 0x80,_SW_STACKOVERFLOW = 0x200,_SW_STACKUNDERFLOW = 0x400,};
enum MACRO__TEOF {_TEOF = -1,};
enum MACRO__TEXTBW40 {_TEXTBW40 = 0,_TEXTC40 = 1,_TEXTBW80 = 2,};
enum MACRO__TEXTC80 {_TEXTC80 = 3,_MRES4COLOR = 4,};
enum MACRO__TEXTMONO {_TEXTMONO = 7,};
enum MACRO__TIME {_TIME_GETCLOCK = 0,_TIME_SETCLOCK = 1,};
enum MACRO__UNKNOWN {_UNKNOWN = 0,_MDPA = 1,_CGA = 2,};
enum MACRO__UPPER {_UPPER = 0x40,};
enum MACRO__USEDENTRY {_USEDENTRY = 0,_FREEENTRY = 1,};
enum MACRO__VGA {_VGA = 6,};
enum MACRO__VRES16COLOR {_VRES16COLOR = 18,};
enum MACRO__VRES256COLOR {_VRES256COLOR = 0x101,};
enum MACRO__VRES2COLOR {_VRES2COLOR = 17,};
enum MACRO__WHITE {_WHITE = 0x2A2A,};
enum MACRO__XDIGT {_XDIGT = 0x10,};
enum MACRO__XRES16COLOR {_XRES16COLOR = 0x104,};
enum MACRO__XRES256COLOR {_XRES256COLOR = 0x105,};
enum MACRO__YELLOW {_YELLOW = 0x3F3F,};
union REGPACK {struct REGPACKB h;struct REGPACKW w;struct REGPACKW x;};
struct REGPACKB {unsigned __int8 al;unsigned __int8 ah;unsigned __int8 bl;unsigned __int8 bh;unsigned __int8 cl;unsigned __int8 ch;unsigned __int8 dl;unsigned __int8 dh;};
struct REGPACKW {unsigned int ax;unsigned int bx;unsigned int cx;unsigned int dx;unsigned int bp;unsigned int si;unsigned int di;unsigned int ds;unsigned int es;unsigned int flags;};
struct REGPACKX {unsigned int eax;unsigned int ebx;unsigned int ecx;unsigned int edx;unsigned int ebp;unsigned int esi;unsigned int edi;unsigned int ds;unsigned int es;unsigned int fs;unsigned int gs;unsigned int flags;};
union REGS {struct WORDREGS x;struct WORDREGS w;struct BYTEREGS h;};
struct SREGS {unsigned int es;unsigned int cs;unsigned int ss;unsigned int ds;};
typedef char TCHAR;
struct WORDREGS {unsigned int ax;unsigned int bx;unsigned int cx;unsigned int dx;unsigned int si;unsigned int di;unsigned int cflag;};
struct _DOSERROR {int exterror;char errclass;char action;char locus;};
typedef _UCHAR far *_FUSTRING;
typedef struct _heapinfo _HEAPINFO;
typedef char _TCHAR;
typedef int _TINT;
typedef signed __int8 _TSCHAR;
typedef unsigned __int8 _TUCHAR;
typedef char _TXCHAR;
typedef unsigned __int8 _UCHAR;
typedef _UCHAR *_USTRING;
struct __iobuf {unsigned __int8 *_ptr;int _cnt;unsigned __int8 *_base;unsigned int _flag;int _handle;unsigned int _bufsize;unsigned __int8 _ungotten;unsigned __int8 _tmpfchar;};
typedef void (*__sig_func)(int);
typedef char *__va_list[1];
struct _complex {double x;double y;};
struct _diskfree_t {unsigned int total_clusters;unsigned int avail_clusters;unsigned int sectors_per_cluster;unsigned int bytes_per_sector;};
struct _diskinfo_t {unsigned int drive;unsigned int head;unsigned int track;unsigned int sector;unsigned int nsectors;void far *buffer;};
struct _fontinfo {int type;int ascent;int pixwidth;int pixheight;int avgwidth;char filename[81];char facename[32];};
struct _heapinfo {void far *_pentry;size_t _size;int _useflag;};
struct _stat {dev_t st_dev;ino_t st_ino;unsigned int st_mode;int st_nlink;unsigned __int32 st_uid;int st_gid;dev_t st_rdev;off_t st_size;time_t st_atime;time_t st_mtime;time_t st_ctime;time_t st_btime;unsigned __int32 st_attr;unsigned __int32 st_archivedID;unsigned __int32 st_updatedID;unsigned int st_inheritedRightsMask;unsigned __int8 st_originatingNameSpace;unsigned __int8 st_name[13];};
struct _wxycoord {double wx;double wy;};
typedef struct $743CAB6F7D155AB299758056AE88817D axistype;
typedef unsigned __int8 charmap[8];
typedef struct $1CFB5D895C6B2534CA582A7618E3281E chartenv;
typedef unsigned __int32 clock_t;
struct complex {double x;double y;};
typedef int dev_t;
struct dirent {char d_dta[21];char d_attr;unsigned int d_time;unsigned int d_date;__int32 d_size;char d_name[13];unsigned int d_ino;char d_first;};
typedef struct $979FA3DE6ECCF956231BFC297C4278E6 div_t;
struct dosdate_t {unsigned __int8 day;unsigned __int8 month;unsigned int year;unsigned __int8 dayofweek;};
struct dostime_t {unsigned __int8 hour;unsigned __int8 minute;unsigned __int8 second;unsigned __int8 hsecond;};
struct exception {int type;char *name;double arg1;double arg2;double retval;};
typedef unsigned __int8 fillmap[8];
struct find_t {char reserved[21];char attrib;unsigned int wr_time;unsigned int wr_date;unsigned __int32 size;char name[13];};
typedef __int32 fpos_t;
typedef unsigned int ino_t;
typedef unsigned int jmp_buf[13];
struct lconv {char *decimal_point;char *thousands_sep;char *int_curr_symbol;char *currency_symbol;char *mon_decimal_point;char *mon_thousands_sep;char *mon_grouping;char *grouping;char *positive_sign;char *negative_sign;char int_frac_digits;char frac_digits;char p_cs_precedes;char p_sep_by_space;char n_cs_precedes;char n_sep_by_space;char p_sign_posn;char n_sign_posn;};
typedef struct $B8243ED19B76CA5D55F9F69ED1E7C09F ldiv_t;
typedef struct $AD9A92298C4A3046DC03D0819903D2FB legendtype;
typedef __int32 off_t;
typedef void (*onexit_t)();
typedef struct $5E4AF5222BD6224857F90F4001142430 paletteentry;
typedef paletteentry palettetype[16];
typedef int ptrdiff_t;
struct rccoord {int row;int col;};
typedef int sig_atomic_t;
typedef unsigned int size_t;
struct stat {dev_t st_dev;ino_t st_ino;unsigned int st_mode;int st_nlink;unsigned __int32 st_uid;int st_gid;dev_t st_rdev;off_t st_size;time_t st_atime;time_t st_mtime;time_t st_ctime;time_t st_btime;unsigned __int32 st_attr;unsigned __int32 st_archivedID;unsigned __int32 st_updatedID;unsigned int st_inheritedRightsMask;unsigned __int8 st_originatingNameSpace;unsigned __int8 st_name[13];};
typedef unsigned int styleset[16];
struct textsettings {int basevectorx;int basevectory;int txpath;int height;int width;int spacing;int horizalign;int vertalign;};
typedef unsigned __int32 time_t;
struct timeb {time_t time;unsigned int millitm;int timezone;int dstflag;};
typedef struct $5D287BBCEE976282B532DF578B48FE30 titletype;
struct tm {int tm_sec;int tm_min;int tm_hour;int tm_mday;int tm_mon;int tm_year;int tm_wday;int tm_yday;int tm_isdst;};
struct utimbuf {time_t actime;time_t modtime;};
typedef char *va_list[1];
struct videoconfig {int numxpixels;int numypixels;int numtextcols;int numtextrows;int numcolors;int bitsperpixel;int numvideopages;int mode;int adapter;int monitor;int memory;};
typedef unsigned int wchar_t;
typedef struct $49112922E8D3FA36A9D9A6626290371D windowtype;
struct xycoord {int xcoord;int ycoord;};

MACRO_ACCESS ACCESS_RD;
MACRO_ACCESS ACCESS_WR;
MACRO_BUFSIZ BUFSIZ;
MACRO_CHAR CHAR_BIT;
MACRO_CHAR CHAR_MAX;
MACRO_CHAR CHAR_MIN;
MACRO_CLK CLK_TCK;
MACRO_CLOCKS CLOCKS_PER_SEC;
MACRO_CT CT_ANK;
MACRO_CT CT_ILGL;
MACRO_CT CT_KJ1;
MACRO_CT CT_KJ2;
MACRO_DIG DBL_DIG;
MACRO_DIG DBL_MANT_DIG;
MACRO_EXP DBL_MAX_10_EXP;
MACRO_EXP DBL_MAX_EXP;
MACRO_EXP DBL_MIN_10_EXP;
MACRO_EXP DBL_MIN_EXP;
MACRO_DOMAIN DOMAIN;
MACRO_DOS DOS_ALLOC_SEG;
MACRO_DOS DOS_CHDIR;
MACRO_DOS DOS_CHMOD;
MACRO_DOS DOS_CLOSE;
MACRO_DOS DOS_COMMIT_FILE;
MACRO_DOS DOS_CREAT;
MACRO_DOS DOS_CTRL_BREAK;
MACRO_DOS DOS_CUR_DISK;
MACRO_DOS DOS_DUP;
MACRO_DOS DOS_DUP2;
MACRO_DOS DOS_EXIT;
MACRO_DOS DOS_FILE_DATE;
MACRO_DOS DOS_FIND_FIRST;
MACRO_DOS DOS_FIND_NEXT;
MACRO_DOS DOS_FREE_SEG;
MACRO_DOS DOS_GETCWD;
MACRO_DOS DOS_GET_CHAR_NO_ECHO;
MACRO_DOS DOS_GET_DATE;
MACRO_DOS DOS_GET_INT;
MACRO_DOS DOS_GET_TIME;
MACRO_DOS DOS_GET_VERSION;
MACRO_DOS DOS_IOCTL;
MACRO_DOS DOS_LSEEK;
MACRO_DOS DOS_MKDIR;
MACRO_MODE DOS_MODE;
MACRO_DOS DOS_MODIFY_SEG;
MACRO_DOS DOS_OPEN;
MACRO_DOS DOS_READ;
MACRO_DOS DOS_RENAME;
MACRO_DOS DOS_RMDIR;
MACRO_DOS DOS_SET_DTA;
MACRO_DOS DOS_SET_INT;
MACRO_DOS DOS_SWITCH_CHAR;
MACRO_DOS DOS_UNLINK;
MACRO_DOS DOS_WRITE;
MACRO_ERRNO E2BIG;
MACRO_ERRNO EACCES;
MACRO_ERRNO EAGAIN;
MACRO_ERRNO EBADF;
MACRO_ERRNO EBUSY;
MACRO_ERRNO ECHILD;
MACRO_ERRNO EDEADLK;
MACRO_ERRNO EDEADLOCK;
MACRO_ERRNO EDOM;
MACRO_ERRNO EEXIST;
MACRO_ERRNO EFAULT;
MACRO_ERRNO EFBIG;
MACRO_ERRNO EINTR;
MACRO_ERRNO EINVAL;
MACRO_ERRNO EIO;
MACRO_ERRNO EISDIR;
MACRO_ERRNO EMFILE;
MACRO_ERRNO EMLINK;
MACRO_EM EM_DENORMAL;
MACRO_EM EM_INEXACT;
MACRO_EM EM_INVALID;
MACRO_EM EM_OVERFLOW;
MACRO_EM EM_PRECISION;
MACRO_EM EM_UNDERFLOW;
MACRO_EM EM_ZERODIVIDE;
MACRO_ERRNO ENAMETOOLONG;
MACRO_ERRNO ENFILE;
MACRO_ERRNO ENODEV;
MACRO_ERRNO ENOENT;
MACRO_ERRNO ENOEXEC;
MACRO_ERRNO ENOLCK;
MACRO_ERRNO ENOMEM;
MACRO_ERRNO ENOSPC;
MACRO_ERRNO ENOSYS;
MACRO_ERRNO ENOTBLK;
MACRO_ERRNO ENOTDIR;
MACRO_ERRNO ENOTEMPTY;
MACRO_ERRNO ENOTTY;
MACRO_ERRNO ENXIO;
MACRO_EOF EOF;
MACRO_ERRNO EPERM;
MACRO_ERRNO EPIPE;
MACRO_ERRNO ERANGE;
MACRO_ERRNO EROFS;
MACRO_ERRNO ESPIPE;
MACRO_ERRNO ESRCH;
MACRO_ERRNO ETXTBSY;
MACRO_ERRNO EXDEV;
MACRO_EXIT EXIT_FAILURE;
MACRO_EXIT EXIT_SUCCESS;
MACRO_ERRNO EZERO;
MACRO_FILENAME FILENAME_MAX;
MACRO_DIG FLT_DIG;
MACRO_FLT FLT_MANT_DIG;
MACRO_EXP FLT_MAX_10_EXP;
MACRO_EXP FLT_MAX_EXP;
MACRO_EXP FLT_MIN_10_EXP;
MACRO_EXP FLT_MIN_EXP;
MACRO_FLT FLT_RADIX;
MACRO_FLT FLT_ROUNDS;
MACRO_FILENAME FOPEN_MAX;
MACRO_FPE FPE_DENORMAL;
MACRO_FPE FPE_EXPLICITGEN;
MACRO_FPE FPE_INEXACT;
MACRO_FPE FPE_INVALID;
MACRO_FPE FPE_IOVERFLOW;
MACRO_FPE FPE_LOGERR;
MACRO_FPE FPE_MODERR;
MACRO_FPE FPE_OVERFLOW;
MACRO_FPE FPE_SQRTNEG;
MACRO_FPE FPE_STACKOVERFLOW;
MACRO_FPE FPE_STACKUNDERFLOW;
MACRO_FPE FPE_UNDERFLOW;
MACRO_FPE FPE_UNEMULATED;
MACRO_FPE FPE_ZERODIVIDE;
MACRO_OK F_OK;
MACRO_IC IC_AFFINE;
MACRO_IC IC_PROJECTIVE;
$D229372A3490280A1D79088C14D8B580 INTR_AF;
$D229372A3490280A1D79088C14D8B580 INTR_CF;
$D229372A3490280A1D79088C14D8B580 INTR_DF;
$D229372A3490280A1D79088C14D8B580 INTR_IF;
$D229372A3490280A1D79088C14D8B580 INTR_OF;
$D229372A3490280A1D79088C14D8B580 INTR_PF;
$D229372A3490280A1D79088C14D8B580 INTR_SF;
$D229372A3490280A1D79088C14D8B580 INTR_TF;
$D229372A3490280A1D79088C14D8B580 INTR_ZF;
MACRO_INT INT_MAX;
MACRO_INT INT_MIN;
MACRO_LC LC_ALL;
MACRO_LC LC_COLLATE;
MACRO_LC LC_CTYPE;
MACRO_LC LC_MESSAGES;
MACRO_LC LC_MONETARY;
MACRO_LC LC_NUMERIC;
MACRO_LC LC_TIME;
MACRO_DIG LDBL_DIG;
MACRO_DIG LDBL_MANT_DIG;
MACRO_EXP LDBL_MAX_10_EXP;
MACRO_EXP LDBL_MAX_EXP;
MACRO_EXP LDBL_MIN_10_EXP;
MACRO_EXP LDBL_MIN_EXP;
MACRO_LOCK LK_LOCK;
MACRO_NBLCK LK_NBLCK;
MACRO_NBRLCK LK_NBRLCK;
MACRO_RLCK LK_RLCK;
MACRO_UNLCK LK_UNLCK;
MACRO_MAX LONG_MAX;
MACRO_LONG LONG_MIN;
MACRO_L L_tmpnam;
MACRO_MB_CUR MB_CUR_MAX;
MACRO_MB MB_LEN_MAX;
MACRO_MCW MCW_EM;
MACRO_MCW_IC MCW_IC;
MACRO_MCW_PC MCW_PC;
MACRO_MCW_RC MCW_RC;
MACRO_NAME NAME_MAX;
MACRO_NULL NULL;
MACRO_FILENAME OPEN_MAX;
MACRO_MODE OS2_MODE;
MACRO_OVERFLOW OVERFLOW;
MACRO_O_APPEND O_APPEND;
MACRO_O_BINARY O_BINARY;
MACRO_O_CREAT O_CREAT;
MACRO_O_EXCL O_EXCL;
MACRO_O_NOINHERIT O_NOINHERIT;
MACRO_O_RDONLY O_RDONLY;
MACRO_O_RDWR O_RDWR;
MACRO_O_TEXT O_TEXT;
MACRO_O_TRUNC O_TRUNC;
MACRO_O_WRONLY O_WRONLY;
MACRO_FILENAME PATH_MAX;
MACRO_PC PC_24;
MACRO_PC PC_53;
MACRO_PC PC_64;
MACRO_PLOSS PLOSS;
MACRO_P P_NOWAIT;
MACRO_P P_NOWAITO;
MACRO_P P_WAIT;
MACRO_TMP RAND_MAX;
MACRO_RC RC_CHOP;
MACRO_RC RC_DOWN;
MACRO_RC RC_NEAR;
MACRO_RC RC_UP;
MACRO_OK R_OK;
MACRO_SCHAR SCHAR_MAX;
MACRO_SCHAR SCHAR_MIN;
MACRO_SEEK SEEK_CUR;
MACRO_SEEK SEEK_END;
MACRO_SEEK SEEK_SET;
MACRO_SHRT SHRT_MAX;
MACRO_SHRT SHRT_MIN;
MACRO_SH SH_COMPAT;
MACRO_SH SH_DENYNO;
MACRO_SH SH_DENYRD;
MACRO_SH SH_DENYRW;
MACRO_SH SH_DENYWR;
MACRO_SIGNAL SIGABRT;
MACRO_SIGNAL SIGBREAK;
MACRO_SIGNAL SIGFPE;
MACRO_SIGNAL SIGIDIVZ;
MACRO_SIGNAL SIGILL;
MACRO_SIGNAL SIGINT;
MACRO_SIGNAL SIGIOVFL;
MACRO_SIGNAL SIGSEGV;
MACRO_SIGNAL SIGTERM;
MACRO_SIGNAL SIGUSR1;
MACRO_SIGNAL SIGUSR2;
MACRO_SIGNAL SIGUSR3;
MACRO_SIG SIG_DFL;
MACRO_SIG SIG_ERR;
MACRO_SIG SIG_IGN;
MACRO_DOMAIN SING;
MACRO_FILENO STDAUX_FILENO;
MACRO_FILENO STDERR_FILENO;
MACRO_FILENO STDIN_FILENO;
MACRO_FILENO STDOUT_FILENO;
MACRO_FILENO STDPRN_FILENO;
MACRO_SW SW_DENORMAL;
MACRO_SW SW_INEXACT;
MACRO_SW SW_INVALID;
MACRO_SW SW_OVERFLOW;
MACRO_SW SW_SQRTNEG;
MACRO_SW SW_STACKOVERFLOW;
MACRO_SW SW_STACKUNDERFLOW;
MACRO_SW SW_UNDERFLOW;
MACRO_SW SW_UNEMULATED;
MACRO_SW SW_ZERODIVIDE;
MACRO_S S_IEXEC;
MACRO_S S_IFCHR;
MACRO_S S_IFDIR;
MACRO_S S_IFMT;
MACRO_S S_IFREG;
MACRO_S S_IREAD;
MACRO_S S_IRGRP;
MACRO_S S_IROTH;
MACRO_S S_IRUSR;
MACRO_S S_IRWXG;
MACRO_S S_IRWXO;
MACRO_S S_IRWXU;
MACRO_S S_ISGID;
MACRO_S S_ISUID;
MACRO_S S_ISVTX;
MACRO_S S_IWGRP;
MACRO_S S_IWOTH;
MACRO_S S_IWRITE;
MACRO_S S_IWUSR;
MACRO_S S_IXGRP;
MACRO_S S_IXOTH;
MACRO_S S_IXUSR;
MACRO_TLOSS TLOSS;
MACRO_TMP TMP_MAX;
MACRO_UINT TZNAME_MAX;
MACRO_UCHAR UCHAR_MAX;
MACRO_UINT UINT_MAX;
MACRO_ULONG ULONG_MAX;
MACRO_OVERFLOW UNDERFLOW;
MACRO_MAX USHRT_MAX;
MACRO_OK W_OK;
MACRO_OK X_OK;
MACRO__ANALOGCOLOR _ANALOGCOLOR;
MACRO__ANALOGMONO _ANALOGMONO;
MACRO__READ _APPEND;
MACRO__A _A_ARCH;
MACRO__A _A_HIDDEN;
MACRO__A A_NORMAL;
MACRO__A _A_RDONLY;
MACRO__A _A_SUBDIR;
MACRO__A _A_SYSTEM;
MACRO__A _A_VOLID;
$8B2899C6F90A30B1685F1D140540F33D _BASE;
MACRO__READ _BIGBUF;
MACRO__BINARY _BINARY;
MACRO__BLACK BLACK;
MACRO__BLACK BLUE;
$8B2899C6F90A30B1685F1D140540F33D _BOTTOM;
MACRO__BRIGHTWHITE _BRIGHTWHITE;
MACRO__BROWN _BROWN;
$8B2899C6F90A30B1685F1D140540F33D _CAP;
$E5A8E9F86D2C3E1C078A8FD0090EC5C6 _CENTER;
MACRO__UNKNOWN _CGA;
MACRO__CNTRL _CNTRL;
MACRO__MONO _COLOR;
MACRO__COM COM_110;
MACRO__COM _COM_1200;
MACRO__COM _COM_150;
MACRO__COM _COM_2400;
MACRO__COM _COM_300;
MACRO__COM _COM_4800;
MACRO__COM _COM_600;
MACRO__COM _COM_9600;
MACRO__COM _COM_CHR7;
MACRO__COM _COM_CHR8;
MACRO__COM _COM_EVENPARITY;
MACRO__COM COM_INIT;
MACRO__COM COM_NOPARITY;
MACRO__COM _COM_ODDPARITY;
MACRO__COM _COM_RECEIVE;
MACRO__COM _COM_SEND;
MACRO__COM _COM_SPACEPARITY;
MACRO__COM _COM_STATUS;
MACRO__COM COM_STOP1;
MACRO__COM _COM_STOP2;
MACRO__CW _CW_DEFAULT;
MACRO__CYAN _CYAN;
MACRO__DEFAULTMODE _DEFAULTMODE;
MACRO__DIGIT _DIGIT;
MACRO__BINARY _DIRTY;
MACRO__DISK _DISK_FORMAT;
MACRO__DISK _DISK_READ;
MACRO__DISK DISK_RESET;
MACRO__DISK _DISK_STATUS;
MACRO__DISK _DISK_VERIFY;
MACRO__DISK _DISK_WRITE;
MACRO__BINARY _DYNAMIC;
MACRO__EGA _EGA;
MACRO__EM _EM_DENORMAL;
MACRO__EM _EM_INEXACT;
MACRO__EM _EM_INVALID;
MACRO__EM _EM_OVERFLOW;
MACRO__EM _EM_UNDERFLOW;
MACRO__EM _EM_ZERODIVIDE;
MACRO__ENHANCED _ENHANCED;
MACRO__READ _EOF;
MACRO__ERESNOCOLOR _ERESCOLOR;
MACRO__ERESNOCOLOR _ERESNOCOLOR;
MACRO__FPE _FPE_DENORMAL;
MACRO__FPE _FPE_EXPLICITGEN;
MACRO__FPE _FPE_INEXACT;
MACRO__FPE _FPE_INVALID;
MACRO__FPE _FPE_IOVERFLOW;
MACRO__FPE _FPE_LOGERR;
MACRO__FPE _FPE_MODERR;
MACRO__FPE _FPE_OVERFLOW;
MACRO__FPE _FPE_SQRTNEG;
MACRO__FPE _FPE_STACKOVERFLOW;
MACRO__FPE _FPE_STACKUNDERFLOW;
MACRO__FPE _FPE_UNDERFLOW;
MACRO__FPE _FPE_UNEMULATED;
MACRO__FPE _FPE_ZERODIVIDE;
MACRO__USEDENTRY _FREEENTRY;
$FCD69D9C70D38EBE1D2A73A05A192637 _GAND;
MACRO__GBORDER _GBORDER;
MACRO__GCLEARSCREEN GCLEARSCREEN;
$C0DC64B9E5ECA4890A3EC660268C0D54 GCURSOROFF;
$C0DC64B9E5ECA4890A3EC660268C0D54 _GCURSORON;
MACRO__GFILLINTERIOR _GFILLINTERIOR;
$FCD69D9C70D38EBE1D2A73A05A192637 GOR;
$FCD69D9C70D38EBE1D2A73A05A192637 _GPRESET;
$FCD69D9C70D38EBE1D2A73A05A192637 _GPSET;
MACRO__GRAY _GRAY;
MACRO__GRNOOUTPUT _GRCLIPPED;
MACRO__GREEN _GREEN;
MACRO__GROK _GRERROR;
MACRO__GRFONTFILENOTFOUND _GRFONTFILENOTFOUND;
MACRO__GRINSUFFICIENTMEMORY _GRINSUFFICIENTMEMORY;
MACRO__GRINVALIDFONTFILE _GRINVALIDFONTFILE;
MACRO__GRINVALIDPARAMETER _GRINVALIDPARAMETER;
MACRO__GRMODENOTSUPPORTED _GRMODENOTSUPPORTED;
MACRO__GRNOOUTPUT _GRNOOUTPUT;
MACRO__GRNOTINPROPERMODE _GRNOTINPROPERMODE;
MACRO__GROK GROK;
MACRO__GSCROLLDOWN _GSCROLLDOWN;
MACRO__GSCROLLUP _GSCROLLUP;
MACRO__GCLEARSCREEN _GVIEWPORT;
MACRO__GCLEARSCREEN _GWINDOW;
$6F96E9681260FC748372DD4343C17B95 GWRAPOFF;
$6F96E9681260FC748372DD4343C17B95 _GWRAPON;
$FCD69D9C70D38EBE1D2A73A05A192637 _GXOR;
$8B2899C6F90A30B1685F1D140540F33D _HALF;
MACRO__HARDERR _HARDERR_ABORT;
MACRO__HARDERR _HARDERR_FAIL;
MACRO__HARDERR HARDERR_IGNORE;
MACRO__HARDERR _HARDERR_RETRY;
MACRO__HEAPOK _HEAPBADBEGIN;
MACRO__HEAPBADNODE _HEAPBADNODE;
MACRO__HEAPBADPTR _HEAPBADPTR;
MACRO__HEAPOK _HEAPEMPTY;
MACRO__HEAPBADNODE _HEAPEND;
MACRO__HEAPOK HEAPOK;
MACRO__HERCMONO _HERCMONO;
MACRO__HERCULES _HERCULES;
MACRO__HGC _HGC;
MACRO__HRES16COLOR _HRES16COLOR;
MACRO__HRESBW _HRESBW;
MACRO__IC _IC_AFFINE;
MACRO__IC IC_PROJECTIVE;
MACRO__BINARY _IOFBF;
MACRO__BINARY _IOLBF;
MACRO__BINARY _IONBF;
MACRO__BINARY _ISTTY;
MACRO__K _J1;
MACRO__K _J2;
MACRO__K _K;
MACRO__KEYBRD KEYBRD_READ;
MACRO__KEYBRD _KEYBRD_READY;
MACRO__KEYBRD _KEYBRD_SHIFTSTATUS;
MACRO__K _KP;
$E5A8E9F86D2C3E1C078A8FD0090EC5C6 _LEFT;
MACRO__LIGHTBLUE _LIGHTBLUE;
MACRO__LIGHTCYAN _LIGHTCYAN;
MACRO__LIGHTGREEN _LIGHTGREEN;
MACRO__LIGHTMAGENTA _LIGHTMAGENTA;
MACRO__LIGHTRED _LIGHTRED;
MACRO__LIGHTYELLOW _LIGHTYELLOW;
MACRO_LOCK _LK_LOCK;
MACRO_NBLCK _LK_NBLCK;
MACRO_NBRLCK _LK_NBRLCK;
MACRO_RLCK _LK_RLCK;
MACRO_UNLCK LK_UNLCK;
MACRO__LOWER _LOWER;
MACRO__M1ST _M1ST;
MACRO__M1ST _M2ND;
MACRO__MAGENTA _MAGENTA;
MACRO__MAXCOLORMODE _MAXCOLORMODE;
MACRO__MAXRESMODE _MAXRESMODE;
MACRO__MAXTEXTROWS _MAXTEXTROWS;
MACRO__MAX_PATH _MAX_DIR;
MACRO__MAX_PATH _MAX_DRIVE;
MACRO__MAX_PATH _MAX_EXT;
MACRO__MAX_PATH _MAX_FNAME;
MACRO__MAX _MAX_NAME;
MACRO__MAX_PATH _MAX_PATH;
MACRO__MAX_PATH _MAX_PATH2;
MACRO__MBC _MBC_ILLEGAL;
MACRO__MBC _MBC_LEAD;
MACRO__MBC MBC_SINGLE;
MACRO__MBC _MBC_TRAIL;
MACRO__MB _MB_CP_ANSI;
MACRO__MB _MB_CP_OEM;
MACRO__MB MB_CP_SBCS;
MACRO__MB _MB_LEAD;
MACRO__HERCULES _MCGA;
MACRO__MCW _MCW_EM;
MACRO__MCW_IC _MCW_IC;
MACRO__MCW_PC _MCW_PC;
MACRO__MCW_RC _MCW_RC;
MACRO__UNKNOWN _MDPA;
MACRO__MONO _MONO;
MACRO__M1ST _MPUNCT;
MACRO__MRES16COLOR _MRES16COLOR;
MACRO__MRES256COLOR _MRES256COLOR;
MACRO__TEXTC80 _MRES4COLOR;
MACRO__MRESNOCOLOR _MRESNOCOLOR;
MACRO__M1ST _MSYMB;
MACRO__NFILES _NFILES;
MACRO__NKEYBRD _NKEYBRD_READ;
MACRO__NKEYBRD _NKEYBRD_READY;
MACRO__NKEYBRD _NKEYBRD_SHIFTSTATUS;
MACRO__NODISPLAY _NODISPLAY;
$E5A8E9F86D2C3E1C078A8FD0090EC5C6 NORMAL;
MACRO_O_APPEND _O_APPEND;
MACRO_O_BINARY _O_BINARY;
MACRO_O_CREAT _O_CREAT;
MACRO_O_EXCL _O_EXCL;
MACRO_O_NOINHERIT _O_NOINHERIT;
MACRO_O_RDONLY O_RDONLY;
MACRO_O_RDWR _O_RDWR;
MACRO_O_TEXT _O_TEXT;
MACRO_O_TRUNC _O_TRUNC;
MACRO_O_WRONLY _O_WRONLY;
$657FB054558D6B1658FCC1B2803345B2 _PATH_DOWN;
$657FB054558D6B1658FCC1B2803345B2 _PATH_LEFT;
$657FB054558D6B1658FCC1B2803345B2 PATH_RIGHT;
$657FB054558D6B1658FCC1B2803345B2 _PATH_UP;
MACRO__PC PC_24;
MACRO__PC _PC_53;
MACRO__PC _PC_64;
MACRO__PG _PG_BADCHARTSTYLE;
MACRO__PG _PG_BADCHARTTYPE;
MACRO__PG _PG_BADCHARTWINDOW;
MACRO__PG _PG_BADDATAWINDOW;
MACRO__PG _PG_BADLEGENDWINDOW;
MACRO__PG _PG_BADLOGBASE;
MACRO__PG _PG_BADSCALEFACTOR;
MACRO__PG _PG_BADSCREENMODE;
$FEA1A8332DF572B4B82D4D6EC6C47001 _PG_BARCHART;
$3B9604985F7797BDFAC080FFD41D1C2D _PG_BOTTOM;
$3B9604985F7797BDFAC080FFD41D1C2D _PG_CENTER;
$FEA1A8332DF572B4B82D4D6EC6C47001 _PG_COLUMNCHART;
$2B22B6772705E6AEC2CAD82F2944FAB1 _PG_DECFORMAT;
$2B22B6772705E6AEC2CAD82F2944FAB1 _PG_EXPFORMAT;
$3B9604985F7797BDFAC080FFD41D1C2D _PG_LEFT;
$285FE556F43A898D15AEDE2AD44E964B _PG_LINEARAXIS;
$FEA1A8332DF572B4B82D4D6EC6C47001 _PG_LINECHART;
$285FE556F43A898D15AEDE2AD44E964B _PG_LOGAXIS;
MACRO__PG _PG_MAXCHARTSTYLE;
MACRO__PG _PG_MAXCHARTTYPE;
$A71B67504CA7F11F32ADA55062B203FF _PG_NOPERCENT;
MACRO__PG _PG_NOTINITIALIZED;
$3B9604985F7797BDFAC080FFD41D1C2D _PG_OVERLAY;
MACRO__PG _PG_PALETTELEN;
$A71B67504CA7F11F32ADA55062B203FF _PG_PERCENT;
$FEA1A8332DF572B4B82D4D6EC6C47001 _PG_PIECHART;
$FB386DB2273F2B9DF0ED23A469EDEB29 _PG_PLAINBARS;
$5B647C1D3C6CCCC37E762A84E6256E6C _PG_POINTANDLINE;
$5B647C1D3C6CCCC37E762A84E6256E6C _PG_POINTONLY;
$3B9604985F7797BDFAC080FFD41D1C2D _PG_RIGHT;
$FEA1A8332DF572B4B82D4D6EC6C47001 _PG_SCATTERCHART;
$FB386DB2273F2B9DF0ED23A469EDEB29 _PG_STACKEDBARS;
MACRO__PG _PG_TITLELEN;
MACRO__PG _PG_TOOFEWSERIES;
MACRO__PG _PG_TOOSMALLN;
MACRO__PRINT _PRINT;
MACRO__PRINTER _PRINTER_INIT;
MACRO__PRINTER _PRINTER_STATUS;
MACRO__PRINTER PRINTER_WRITE;
MACRO__PUNCT _PUNCT;
MACRO__RC _RC_CHOP;
MACRO__RC _RC_DOWN;
MACRO__RC RC_NEAR;
MACRO__RC _RC_UP;
MACRO__READ _READ;
MACRO__RED _RED;
$E5A8E9F86D2C3E1C078A8FD0090EC5C6 _RIGHT;
MACRO__READ _SFERR;
MACRO_SIGNAL _SIGMAX;
MACRO_SIGNAL _SIGMIN;
MACRO__SPACE _SPACE;
MACRO__SVGA _SVGA;
MACRO__SVRES16COLOR _SVRES16COLOR;
MACRO__SVRES256COLOR _SVRES256COLOR;
MACRO__SW _SW_DENORMAL;
MACRO__SW _SW_INEXACT;
MACRO__SW _SW_INVALID;
MACRO__SW _SW_OVERFLOW;
MACRO__SW _SW_SQRTNEG;
MACRO__SW _SW_STACKOVERFLOW;
MACRO__SW _SW_STACKUNDERFLOW;
MACRO__SW _SW_UNDERFLOW;
MACRO__SW _SW_UNEMULATED;
MACRO__SW _SW_ZERODIVIDE;
MACRO__TEOF _TEOF;
MACRO__TEXTBW40 TEXTBW40;
MACRO__TEXTBW40 _TEXTBW80;
MACRO__TEXTBW40 _TEXTC40;
MACRO__TEXTC80 _TEXTC80;
MACRO__TEXTMONO _TEXTMONO;
MACRO__TIME TIME_GETCLOCK;
MACRO__TIME _TIME_SETCLOCK;
MACRO__BINARY _TMPFIL;
$8B2899C6F90A30B1685F1D140540F33D _TOP;
MACRO__READ _UNGET;
MACRO__UNKNOWN UNKNOWN;
MACRO__UPPER _UPPER;
MACRO__MRES256COLOR _URES256COLOR;
MACRO__USEDENTRY USEDENTRY;
MACRO__VGA _VGA;
MACRO__VRES16COLOR _VRES16COLOR;
MACRO__VRES256COLOR _VRES256COLOR;
MACRO__VRES2COLOR _VRES2COLOR;
MACRO__WHITE _WHITE;
MACRO__READ _WRITE;
MACRO__XDIGT _XDIGT;
MACRO__XRES16COLOR _XRES16COLOR;
MACRO__XRES256COLOR _XRES256COLOR;
MACRO__YELLOW _YELLOW;
const double _HugeValue;
const char _IsKTable[257];
const char _IsTable[257];
int __CacheOSTZ(int new_flag);
int __IsDBCS;
unsigned __int8 __MBCSIsTable[257];
void __assert(int, char *, char *, int);
void near *__brk(unsigned int new_brk_value);
void far *__chkstack(void far *);
void *__doalloca(size_t size);
unsigned __int8 far *__fmbvtop(unsigned int ch);
int __fmemneed(size_t);
int *__get_doserrno_ptr();
int *__get_errno_ptr();
FILE __iob[];
int __isascii(int);
int __iscsym(int);
int __iscsymf(int);
size_t __mbslen(const unsigned __int8 *string);
unsigned __int8 *__mbsninc(const unsigned __int8 *string, size_t count);
unsigned __int8 *__mbvtop(unsigned int ch);
unsigned int __minreal;
int __nmemneed(size_t);
int __p_overlay;
unsigned __int32 __win_alloc_flags;
unsigned __int32 __win_realloc_flags;
int _access(const char *path, int mode);
void *_alloca(size_t size);
unsigned int _amblksiz;
int __far _arc(int, int, int, int, int, int, int, int);
int __far _arc_w(double, double, double, double, double, double, double, double);
int __far _arc_wxy(struct _wxycoord far *, struct _wxycoord far *, struct _wxycoord far *, struct _wxycoord far *);
char *_asctime(const struct tm *timeptr, char *buf);
int __far _beginthread(void (__far far *start_address)(void far *), void far *stack_bottom, unsigned int stack_size, void far *arglist);
int _bgetcmd(char *buffer, int len);
unsigned int _bios_disk(unsigned int cmd, struct _diskinfo_t *diskinfo);
unsigned int _bios_equiplist(void);
unsigned int _bios_keybrd(unsigned int cmd);
unsigned int _bios_memsize(void);
unsigned int _bios_printer(unsigned int cmd, unsigned int port, unsigned int data);
unsigned int _bios_serialcom(unsigned int cmd, unsigned int port, unsigned int data);
unsigned int _bios_timeofday(unsigned int cmd, __int32 *timeval);
int _bprintf(char *buf, unsigned int bufsize, const char *fmt, ...);
void _chain_intr(void (__interrupt far *handler)());
unsigned int _clear87(void);
void __far _clearscreen(int);
char *_cmdname(char *name);
unsigned int _control87(unsigned int, unsigned int);
char *_ctime(const time_t *timer, char *buf);
void _disable(void);
int __far _displaycursor(int);
unsigned int _dos_allocmem(unsigned int size, unsigned int *seg);
unsigned int _dos_close(int handle);
unsigned int _dos_commit(int handle);
unsigned int _dos_creat(const char *path, unsigned int attr, int *handle);
unsigned int _dos_creatnew(const char *path, unsigned int attr, int *handle);
unsigned int _dos_findclose(struct find_t *buf);
unsigned int _dos_findfirst(const char *path, unsigned int attr, struct find_t *buf);
unsigned int _dos_findnext(struct find_t *buf);
unsigned int _dos_freemem(unsigned int seg);
void _dos_getdate(struct dosdate_t *date);
unsigned int _dos_getdiskfree(unsigned int drive, struct _diskfree_t *diskspace);
void _dos_getdrive(unsigned int *drive);
unsigned int _dos_getfileattr(const char *path, unsigned int *attr);
unsigned int _dos_getftime(int handle, unsigned int *date, unsigned int *time);
void _dos_gettime(struct dostime_t *time);
void (__interrupt far *_dos_getvect(int intnum))();
void _dos_keep(unsigned int retcode, unsigned int memsize);
unsigned int _dos_open(const char *path, unsigned int mode, int *handle);
unsigned int _dos_read(int handle, void far *buf, unsigned int count, unsigned int *bytes);
unsigned int _dos_setblock(unsigned int size, unsigned int seg, unsigned int *maxsize);
unsigned int _dos_setdate(struct dosdate_t *date);
void _dos_setdrive(unsigned int drivenum, unsigned int *drives);
unsigned int _dos_setfileattr(const char *path, unsigned int attr);
unsigned int _dos_setftime(int handle, unsigned int date, unsigned int time);
unsigned int _dos_settime(struct dostime_t *time);
void _dos_setvect(int intnum, void (__interrupt far *handler)());
unsigned int _dos_write(int handle, const void far *buf, unsigned int count, unsigned int *bytes);
int _dup(int handle);
char *_ecvt(double val, int ndig, int *dec, int *sign);
int __far _ellipse(int, int, int, int, int);
int __far _ellipse_w(int, double, double, double, double);
int __far _ellipse_wxy(int, struct _wxycoord far *, struct _wxycoord far *);
void _enable(void);
void __far _endthread();
void _exit(int status);
void *_expand(void *ptr, size_t size);
size_t __far _fbtom(const JCHAR far *s, size_t nb);
void far *_fcalloc(size_t n, size_t size);
char *_fcvt(double val, int ndig, int *dec, int *sign);
FILE *_fdopen(int handle, const char *mode);
void far *_fexpand(void far *ptr, size_t size);
void _ffree(void far *ptr);
int _fheapchk(void);
void _fheapgrow(void);
int _fheapmin(void);
int _fheapset(unsigned int fill);
int _fheapshrink(void);
int _fheapwalk(struct _heapinfo *entry);
FJSTRING __far _fjgetmoji(const JCHAR far *s, JMOJI far *c);
FJSTRING __far _fjputmoji(JCHAR far *s, JMOJI c);
FJSTRING __far _fjstradv(const JCHAR far *s, size_t n);
FJSTRING __far _fjstrcat(JCHAR far *to, const JCHAR far *from);
FJSTRING __far _fjstrchr(const JCHAR far *s, JMOJI c);
int __far _fjstrcmp(const JCHAR far *s1, const JCHAR far *s2);
size_t __far _fjstrcspn(const JCHAR far *s1, const JCHAR far *s2);
int __far _fjstricmp(const JCHAR far *s1, const JCHAR far *s2);
size_t __far _fjstrlen(const JCHAR far *s);
FJSTRING __far _fjstrlwr(JCHAR far *s);
FJSTRING __far _fjstrmatch(const JCHAR far *s1, const JCHAR far *s2);
FJSTRING __far _fjstrncat(JCHAR far *to, const JCHAR far *from, size_t n);
int __far _fjstrncmp(const JCHAR far *s1, const JCHAR far *s2, size_t n);
FJSTRING __far _fjstrncpy(JCHAR far *to, const JCHAR far *from, size_t n);
int __far _fjstrnicmp(const JCHAR far *s1, const JCHAR far *s2, size_t n);
FJSTRING __far _fjstrnset(JCHAR far *s, JMOJI c, size_t n);
FJSTRING __far _fjstrrchr(const JCHAR far *s, JMOJI c);
FJSTRING __far _fjstrrev(JCHAR far *s);
FJSTRING __far _fjstrset(JCHAR far *s, JMOJI c);
FJSTRING __far _fjstrskip(const JCHAR far *s1, const JCHAR far *s2);
size_t __far _fjstrspn(const JCHAR far *s1, const JCHAR far *s2);
FJSTRING __far _fjstrstr(const JCHAR far *s1, const JCHAR far *s2);
FJSTRING __far _fjstrtok(JCHAR far *targ, const JCHAR far *brk);
FJSTRING __far _fjstrupr(JCHAR far *s);
int __far _floodfill(int, int, int);
int __far _floodfill_w(double, double, int);
void far *_fmalloc(size_t size);
int _fmbccmp(const unsigned __int8 far *s1, const unsigned __int8 far *s2);
void _fmbccpy(unsigned __int8 far *dest, const unsigned __int8 far *ch);
_FUSTRING _fmbgetcode(_FUSTRING, DBCODE *);
unsigned int _fmbptov(const unsigned __int8 far *ch);
_FUSTRING _fmbputchar(_FUSTRING, DBCODE);
int _fmbsbtype(const _FUSTRING, size_t);
unsigned __int8 far *_fmbscat(unsigned __int8 far *s1, const unsigned __int8 far *s2);
unsigned __int8 far *_fmbschr(const unsigned __int8 far *string, unsigned int ch);
size_t _fmbscspn(const unsigned __int8 far *string, const unsigned __int8 far *charset);
unsigned __int8 far *_fmbsdec(const unsigned __int8 far *stringStart, const unsigned __int8 far *ch);
unsigned __int8 far *_fmbsinc(const unsigned __int8 far *string);
size_t _fmbslen(const unsigned __int8 far *string);
int _fmbsnbcmp(const unsigned __int8 far *s1, const unsigned __int8 far *s2, size_t n);
size_t _fmbsnbcnt(const unsigned __int8 far *string, size_t n);
unsigned __int8 far *_fmbsnbcpy(unsigned __int8 far *s1, const unsigned __int8 far *s2, size_t n);
size_t _fmbsnccnt(const unsigned __int8 far *string, size_t n);
int _fmbsncmp(const unsigned __int8 far *s1, const unsigned __int8 far *s2, size_t n);
unsigned __int8 far *_fmbsncpy(unsigned __int8 far *s1, const unsigned __int8 far *s2, size_t n);
unsigned int _fmbsnextc(const unsigned __int8 far *string);
unsigned __int8 far *_fmbsninc(const unsigned __int8 far *string, size_t count);
unsigned __int8 far *_fmbspbrk(const unsigned __int8 far *string, const unsigned __int8 far *charset);
unsigned __int8 far *_fmbsrchr(const unsigned __int8 far *string, unsigned int ch);
unsigned __int8 far *_fmbsspnp(const unsigned __int8 far *string, const unsigned __int8 far *charset);
unsigned __int8 far *_fmbstok(unsigned __int8 far *str, const unsigned __int8 far *delim);
unsigned __int8 far *_fmbvtop(unsigned int ch, unsigned __int8 far *addr);
void far *_fmemccpy(void far *s1, const void far *s2, int c, size_t n);
void far *_fmemchr(const void far *s, int c, size_t n);
int _fmemcmp(const void far *s1, const void far *s2, size_t n);
void far *_fmemcpy(void far *s1, const void far *s2, size_t n);
int _fmemicmp(const void far *s1, const void far *s2, size_t n);
void far *_fmemmove(void far *s1, const void far *s2, size_t n);
void far *_fmemset(void far *s, int c, size_t n);
int _fmode;
size_t _fmsize(void far *ptr);
size_t __far _fmtob(const JCHAR far *s, size_t nm);
int __far _fnthctype(const JCHAR far *string, size_t n);
void _fpreset(void);
void far *_frealloc(void far *ptr, size_t size);
unsigned int _freect(size_t size);
FILE *_fsopen(const char *filename, const char *mode, int shflag);
int _fstat(int, struct _stat *);
char far *_fstrcat(char far *s1, const char far *s2);
char far *_fstrchr(const char far *s, int c);
int _fstrcmp(const char far *s1, const char far *s2);
char far *_fstrcpy(char far *s1, const char far *s2);
size_t _fstrcspn(const char far *s1, const char far *s2);
char far *_fstrdup(const char far *string);
int _fstricmp(const char far *s1, const char far *s2);
size_t _fstrlen(const char far *s);
char far *_fstrlwr(char far *string);
char far *_fstrncat(char far *s1, const char far *s2, size_t n);
int _fstrncmp(const char far *s1, const char far *s2, size_t n);
char far *_fstrncpy(char far *s1, const char far *s2, size_t n);
int _fstrnicmp(const char far *s1, const char far *s2, size_t n);
char far *_fstrnset(char far *string, int c, size_t len);
char far *_fstrpbrk(const char far *s1, const char far *s2);
char far *_fstrrchr(const char far *s, int c);
char far *_fstrrev(char far *string);
char far *_fstrset(char far *string, int c);
size_t _fstrspn(const char far *s1, const char far *s2);
char far *_fstrstr(const char far *s1, const char far *s2);
char far *_fstrtok(char far *s1, const char far *s2);
char far *_fstrupr(char far *string);
char *_fullpath(char *buf, const char *path, size_t size);
char *_gcvt(double val, int ndig, char *buf);
int __far _getactivepage(void);
int __far _getarcinfo(struct xycoord far *, struct xycoord far *, struct xycoord far *);
__int32 __far _getbkcolor(void);
void __far _getcliprgn(int far *, int far *, int far *, int far *);
int __far _getcolor(void);
struct xycoord __far _getcurrentposition(void);
struct _wxycoord __far _getcurrentposition_w(void);
unsigned int _getdiskfree(unsigned int drive, struct _diskfree_t *diskspace);
unsigned int _getdrive(void);
unsigned __int8 far *__far _getfillmask(unsigned __int8 far *);
int __far _getfontinfo(struct _fontinfo far *);
int __far _getgtextextent(char far *);
struct xycoord __far _getgtextvector(void);
void __far _getimage(int, int, int, int, char far *);
void __far _getimage_w(double, double, double, double, char far *);
void __far _getimage_wxy(struct _wxycoord far *, struct _wxycoord far *, char far *);
unsigned int __far _getlinestyle(void);
int _getmbcp(void);
struct xycoord __far _getphyscoord(int, int);
int __far _getpixel(int, int);
int __far _getpixel_w(double, double);
int __far _getplotaction(void);
int __far _gettextcolor(void);
int __far _gettextcursor(void);
void __far _gettextextent(int, int, char far *, struct xycoord far *, struct xycoord far *);
struct rccoord __far _gettextposition(void);
struct textsettings far *__far _gettextsettings(struct textsettings far *);
void __far _gettextwindow(int far *, int far *, int far *, int far *);
struct videoconfig far *__far _getvideoconfig(struct videoconfig far *);
struct xycoord __far _getviewcoord(int, int);
struct xycoord __far _getviewcoord_w(double, double);
struct xycoord __far _getviewcoord_wxy(struct _wxycoord far *);
int __far _getvisualpage(void);
struct _wxycoord __far _getwindowcoord(int, int);
struct tm *_gmtime(const time_t *timer, struct tm *tmbuf);
int _grow_handles(int new_count);
int __far _grstatus(void);
int __far _grtext(int, int, char far *);
int __far _grtext_w(double, double, char far *);
void _harderr(int (__far far *func)(unsigned int deverr, unsigned int errcode, unsigned int far *devhdr));
void _hardresume(int result);
void _hardretn(int error);
int _hdopen(int handle, int mode);
int _heapchk(void);
int _heapenable(int enabled);
void _heapgrow(void);
int _heapmin(void);
int _heapset(unsigned int fill);
int _heapshrink(void);
int _heapwalk(struct _heapinfo *entry);
__int32 __far _imagesize(int, int, int, int);
__int32 __far _imagesize_w(double, double, double, double);
__int32 __far _imagesize_wxy(struct _wxycoord far *, struct _wxycoord far *);
int _ismbbalnum(unsigned int);
int _ismbbalpha(unsigned int);
int _ismbbgraph(unsigned int);
int _ismbbkalpha(unsigned int);
int _ismbbkana(unsigned int);
int _ismbbkpunct(unsigned int);
int _ismbblead(unsigned int);
int _ismbbprint(unsigned int);
int _ismbbpunct(unsigned int);
int _ismbbtrail(unsigned int);
int _ismbcalpha(unsigned int ch);
int _ismbcdigit(unsigned int ch);
int _ismbchira(DBCODE);
int _ismbckata(DBCODE);
int _ismbcl0(DBCODE);
int _ismbcl1(DBCODE);
int _ismbcl2(DBCODE);
int _ismbclegal(DBCODE);
int _ismbclower(unsigned int ch);
int _ismbcprint(unsigned int ch);
int _ismbcspace(unsigned int ch);
int _ismbcsymbol(DBCODE);
int _ismbcupper(unsigned int ch);
int _ismbddigit(DBCODE);
int _ismbdlower(DBCODE);
int _ismbdspace(DBCODE);
int _ismbdupper(DBCODE);
char *_itoa(int value, char *buf, int radix);
int __far _lineto(int, int);
int __far _lineto_w(double, double);
struct tm *_localtime(const time_t *timer, struct tm *tmbuf);
int _locking(int handle, int mode, unsigned __int32 nbyte);
unsigned __int32 _lrotl(unsigned __int32 value, unsigned int shift);
unsigned __int32 _lrotr(unsigned __int32 value, unsigned int shift);
__int32 _lseek(int handle, __int32 offset, int origin);
char *_ltoa(__int32 value, char *buf, int radix);
void _makepath(char *path, const char *drive, const char *dir, const char *fname, const char *ext);
double _matherr(struct exception *);
int _mbbtype(_UCHAR, int);
int _mbccmp(const unsigned __int8 *s1, const unsigned __int8 *s2);
void _mbccpy(unsigned __int8 *dest, const unsigned __int8 *ch);
int _mbcicmp(const unsigned __int8 *c1, const unsigned __int8 *c2);
DBCODE _mbcjistojms(DBCODE);
DBCODE _mbcjmstojis(DBCODE);
size_t _mbclen(const unsigned __int8 *ch);
DBCODE _mbctohira(DBCODE);
DBCODE _mbctokata(DBCODE);
unsigned int _mbctolower(unsigned int ch);
unsigned int _mbctoupper(unsigned int ch);
_USTRING _mbgetcode(_USTRING, DBCODE *);
unsigned int _mbptov(const unsigned __int8 *ch);
_USTRING _mbputchar(_USTRING, DBCODE);
int _mbsbtype(const _USTRING, size_t);
unsigned __int8 *_mbscat(unsigned __int8 *s1, const unsigned __int8 *s2);
unsigned __int8 *_mbschr(const unsigned __int8 *string, unsigned int ch);
int _mbscmp(const unsigned __int8 *s1, const unsigned __int8 *s2);
size_t _mbscspn(const unsigned __int8 *string, const unsigned __int8 *charset);
unsigned __int8 *_mbsdec(const unsigned __int8 *stringStart, const unsigned __int8 *ch);
int _mbsicmp(const unsigned __int8 *s1, const unsigned __int8 *s2);
unsigned __int8 *_mbsinc(const unsigned __int8 *string);
size_t _mbslen(const unsigned __int8 *string);
unsigned __int8 *_mbslwr(unsigned __int8 *string);
unsigned __int8 *_mbsnbcat(unsigned __int8 *s1, const unsigned __int8 *s2, size_t n);
int _mbsnbcmp(const unsigned __int8 *s1, const unsigned __int8 *s2, size_t n);
size_t _mbsnbcnt(const unsigned __int8 *string, size_t n);
unsigned __int8 *_mbsnbcpy(unsigned __int8 *s1, const unsigned __int8 *s2, size_t n);
int _mbsnbicmp(const unsigned __int8 *s1, const unsigned __int8 *s2, size_t n);
unsigned __int8 *_mbsnbset(unsigned __int8 *string, unsigned int ch, size_t n);
unsigned __int8 *_mbsncat(unsigned __int8 *s1, const unsigned __int8 *s2, size_t n);
size_t _mbsnccnt(const unsigned __int8 *string, size_t n);
int _mbsncmp(const unsigned __int8 *s1, const unsigned __int8 *s2, size_t n);
unsigned __int8 *_mbsncpy(unsigned __int8 *s1, const unsigned __int8 *s2, size_t n);
unsigned int _mbsnextc(const unsigned __int8 *string);
int _mbsnicmp(const unsigned __int8 *s1, const unsigned __int8 *s2, size_t n);
unsigned __int8 *_mbsninc(const unsigned __int8 *string, size_t count);
unsigned __int8 *_mbsnset(unsigned __int8 *string, unsigned int ch, size_t n);
unsigned __int8 *_mbspbrk(const unsigned __int8 *string, const unsigned __int8 *charset);
unsigned __int8 *_mbsrchr(const unsigned __int8 *string, unsigned int ch);
unsigned __int8 *_mbsrev(unsigned __int8 *string);
unsigned __int8 *_mbsset(unsigned __int8 *string, unsigned int ch);
size_t _mbsspn(const unsigned __int8 *string, const unsigned __int8 *charset);
unsigned __int8 *_mbsspnp(const unsigned __int8 *string, const unsigned __int8 *charset);
unsigned __int8 *_mbsstr(const unsigned __int8 *string, const unsigned __int8 *substring);
unsigned __int8 *_mbstok(unsigned __int8 *str, const unsigned __int8 *delim);
unsigned __int8 *_mbsupr(unsigned __int8 *string);
unsigned __int8 *_mbvtop(unsigned int ch, unsigned __int8 *addr);
size_t _memavl(void);
int _memicmp(const void *s1, const void *s2, size_t n);
size_t _memmax(void);
struct xycoord __far _moveto(int, int);
struct _wxycoord __far _moveto_w(double, double);
size_t _msize(void *ptr);
void near *_ncalloc(size_t n, size_t size);
void near *_nexpand(void near *ptr, size_t size);
void _nfree(void near *ptr);
int _nheapchk(void);
void _nheapgrow(void);
int _nheapmin(void);
int _nheapset(unsigned int fill);
int _nheapshrink(void);
int _nheapwalk(struct _heapinfo *entry);
void near *_nmalloc(size_t size);
size_t _nmsize(void near *ptr);
void near *_nrealloc(void near *ptr, size_t size);
int _os_handle(int handle);
unsigned __int8 _osmajor;
unsigned __int8 _osminor;
unsigned __int8 _osmode;
void __far _outgtext(char far *);
void __far _outmem(unsigned __int8 far *, int);
void __far _outtext(char far *);
int __far _pg_analyzechart(chartenv far *, char far * far *, float far *, int);
int __far _pg_analyzechartms(chartenv far *, char far * far *, float far *, int, int, int, char far * far *);
int __far _pg_analyzepie(chartenv far *, char far * far *, float far *, int far *, int);
int __far _pg_analyzescatter(chartenv far *, float far *, float far *, int);
int __far _pg_analyzescatterms(chartenv far *, float far *, float far *, int, int, int, char far * far *);
int __far _pg_chart(chartenv far *, char far * far *, float far *, int);
int __far _pg_chartms(chartenv far *, char far * far *, float far *, int, int, int, char far * far *);
int __far _pg_chartpie(chartenv far *, char far * far *, float far *, int far *, int);
int __far _pg_chartscatter(chartenv far *, float far *, float far *, int);
int __far _pg_chartscatterms(chartenv far *, float far *, float far *, int, int, int, char far * far *);
int __far _pg_defaultchart(chartenv far *, int, int);
int __far _pg_getchardef(int, unsigned __int8 far *);
int __far _pg_getpalette(paletteentry far *);
void __far _pg_getstyleset(unsigned int far *);
int __far _pg_hlabelchart(chartenv far *, int, int, int, char far *);
int __far _pg_initchart(void);
int __far _pg_resetpalette(void);
void __far _pg_resetstyleset(void);
int __far _pg_setchardef(int, unsigned __int8 far *);
int __far _pg_setpalette(paletteentry far *);
void __far _pg_setstyleset(unsigned int far *);
int __far _pg_vlabelchart(chartenv far *, int, int, int, char far *);
int __far _pie(int, int, int, int, int, int, int, int, int);
int __far _pie_w(int, double, double, double, double, double, double, double, double);
int __far _pie_wxy(int, struct _wxycoord far *, struct _wxycoord far *, struct _wxycoord far *, struct _wxycoord far *);
int __far _polygon(int, int, struct xycoord far *);
int __far _polygon_w(int, int, double far *);
int __far _polygon_wxy(int, int, struct _wxycoord far *);
unsigned int _psp;
void __far _putimage(int, int, char far *, int);
void __far _putimage_w(double, double, char far *, int);
int __far _rectangle(int, int, int, int, int);
int __far _rectangle_w(int, double, double, double, double);
int __far _rectangle_wxy(int, struct _wxycoord far *, struct _wxycoord far *);
int __far _registerfonts(char far *);
int __far _remapallpalette(__int32 far *);
__int32 __far _remappalette(int, __int32);
unsigned int _rotl(unsigned int value, unsigned int shift);
unsigned int _rotr(unsigned int value, unsigned int shift);
void __far _scrolltextwindow(int);
void _searchenv(const char *name, const char *env_var, char *buf);
int __far _selectpalette(int);
int __far _setactivepage(int);
__int32 __far _setbkcolor(__int32);
void __far _setcharsize(int, int);
void __far _setcharsize_w(double, double);
void __far _setcharspacing(int);
void __far _setcharspacing_w(double);
void __far _setcliprgn(int, int, int, int);
int __far _setcolor(int);
void __far _setfillmask(unsigned __int8 far *);
int __far _setfont(char far *);
struct xycoord __far _setgtextvector(int, int);
int _setjmp(jmp_buf env);
void __far _setlinestyle(unsigned int);
int _setmbcp(int);
int __far _setpixel(int, int);
int __far _setpixel_w(double, double);
int __far _setplotaction(int);
void __far _settextalign(int, int);
int __far _settextcolor(int);
int __far _settextcursor(int);
void __far _settextorient(int, int);
void __far _settextpath(int);
struct rccoord __far _settextposition(int, int);
int __far _settextrows(int);
void __far _settextwindow(int, int, int, int);
int __far _setvideomode(int);
int __far _setvideomoderows(int, int);
struct xycoord __far _setvieworg(int, int);
void __far _setviewport(int, int, int, int);
int __far _setvisualpage(int);
int __far _setwindow(int, double, double, double, double);
void _splitpath(const char *path, char *drive, char *dir, char *fname, char *ext);
void _splitpath2(const char *inp, char *outp, char **drive, char **dir, char **fn, char **ext);
int _stat(const char *, struct _stat *);
unsigned int _status87(void);
char *_strdate(char *buf);
char *_strdup(const char *string);
int _stricmp(const char *s1, const char *s2);
char *_strlwr(char *string);
int _strnicmp(const char *s1, const char *s2, size_t n);
char *_strrev(char *string);
char *_strtime(char *buf);
char *_strupr(char *string);
int far *_threadid;
int _tolower(int);
int _toupper(int);
void __far _unregisterfonts(void);
char *_utoa(unsigned int value, char *buf, int radix);
int _vbprintf(char *s, unsigned int bufsize, const char *format, __va_list arg);
int __far _wrapon(int);
void abort(void);
int abs(int j);
int access(const char *path, int mode);
double acos(double x);
double acosh(double x);
void *alloca(size_t size);
char *asctime(const struct tm *timeptr);
double asin(double x);
double asinh(double x);
double atan(double x);
double atan2(double y, double x);
double atanh(double x);
int atexit(void (*func)(void));
double atof(const char *nptr);
int atoi(const char *nptr);
__int32 atol(const char *nptr);
int bdos(int dosfn, unsigned int dx, unsigned int al);
void break_off(void);
void break_on(void);
void *bsearch(const void *key, const void *base, size_t nmemb, size_t size, int (*compar)(const void *pkey, const void *pbase));
size_t btom(const JCHAR *s, size_t nb);
double cabs(struct _complex);
void *calloc(size_t n, size_t size);
double ceil(double x);
char *cgets(char *buf);
int chdir(const char *path);
int chkctype(JCHAR c, int n);
int chmod(const char *path, int pmode);
int chsize(int handle, __int32 size);
int clearenv(void);
void clearerr(FILE *fp);
clock_t clock(void);
int close(int handle);
int closedir(DIR *);
double cos(double x);
double cosh(double x);
int cprintf(const char *fmt, ...);
int cputs(const char *buf);
int creat(const char *path, int pmode);
int cscanf(const char *fmt, ...);
char *ctime(const time_t *timer);
int daylight;
void delay(unsigned int milliseconds);
double difftime(time_t t1, time_t t0);
div_t div(int numer, int denom);
int dosexterr(struct _DOSERROR *);
int dup(int handle);
int dup2(int handle1, int handle2);
char *ecvt(double val, int ndig, int *dec, int *sign);
char **environ;
int eof(int handle);
int execl(const char *path, const char *arg0, ...);
int execle(const char *path, const char *arg0, ...);
int execlp(const char *file, const char *arg0, ...);
int execlpe(const char *file, const char *arg0, ...);
int execv(const char *path, const char *const argv[]);
int execve(const char *path, const char *const argv[], const char *const envp[]);
int execvp(const char *file, const char *const argv[]);
int execvpe(const char *file, const char *const argv[], const char *const envp[]);
void exit(int status);
double exp(double x);
double fabs(double x);
int fclose(FILE *fp);
int fcloseall(void);
char *fcvt(double val, int ndig, int *dec, int *sign);
FILE *fdopen(int handle, const char *mode);
int feof(FILE *fp);
int ferror(FILE *fp);
int fflush(FILE *fp);
int fgetc(FILE *fp);
int fgetchar(void);
int fgetpos(FILE *fp, fpos_t *pos);
char *fgets(char *s, int n, FILE *fp);
__int32 filelength(int handle);
double floor(double x);
int flushall(void);
double fmod(double x, double y);
FILE *fopen(const char *filename, const char *mode);
int fprintf(FILE *fp, const char *format, ...);
int fputc(int c, FILE *fp);
int fputchar(int c);
int fputs(const char *s, FILE *fp);
size_t fread(void *ptr, size_t size, size_t n, FILE *fp);
void free(void *ptr);
FILE *freopen(const char *filename, const char *mode, FILE *fp);
double frexp(double value, int *exp);
int fscanf(FILE *fp, const char *format, ...);
int fseek(FILE *fp, __int32 offset, int whence);
int fsetpos(FILE *fp, const fpos_t *pos);
int fstat(int, struct stat *);
__int32 ftell(FILE *fp);
int ftime(struct timeb *timeptr);
size_t fwrite(const void *ptr, size_t size, size_t n, FILE *fp);
char *gcvt(double val, int ndig, char *buf);
int getc(FILE *fp);
int getch(void);
int getchar(void);
int getche(void);
char *getcmd(char *buffer);
char *getcwd(char *buf, unsigned int size);
char *getenv(const char *name);
int getpid(void);
char *gets(char *s);
struct tm *gmtime(const time_t *timer);
void far *halloc(__int32 n, size_t size);
JMOJI hantozen(JMOJI c);
void hfree(void far *);
double hypot(double x, double y);
unsigned int inp(unsigned int port);
unsigned int inpw(unsigned int port);
int int86(int, union REGS *, union REGS *);
int int86x(int, union REGS *, union REGS *, struct SREGS *);
int intdos(union REGS *, union REGS *);
int intdosx(union REGS *, union REGS *, struct SREGS *);
void intr(int, union REGPACK *);
int isalkana(int);
int isalnmkana(int);
int isalnum(int);
int isalpha(int);
int isascii(int);
int isatty(int handle);
int iscntrl(int);
int isdigit(int);
int isgraph(int);
int isgrkana(int);
int iskana(int);
int iskanji(int);
int iskanji2(int);
int iskmoji(int);
int iskpun(int);
int islower(int);
int ispnkana(int);
int isprint(int);
int isprkana(int);
int ispunct(int);
int isspace(int);
int isupper(int);
int isxdigit(int);
char *itoa(int value, char *buf, int radix);
double j0(double x);
double j1(double x);
unsigned __int8 *jasctime(const struct tm *timeptr);
unsigned __int8 *jctime(const time_t *timer);
JSTRING jgetmoji(const JCHAR *s, JMOJI *c);
int jisalpha(JMOJI c);
int jisdigit(JMOJI c);
int jishira(JMOJI c);
int jiskana(JMOJI c);
int jiskigou(JMOJI c);
int jisl0(JMOJI c);
int jisl1(JMOJI c);
int jisl2(JMOJI c);
int jislower(JMOJI c);
int jisprint(JMOJI c);
int jisspace(JMOJI c);
unsigned int jistojms(unsigned int c);
int jisupper(JMOJI c);
int jiszen(JMOJI c);
unsigned int jmstojis(unsigned int msc);
double jn(int n, double x);
void jperror(const char *msg);
JSTRING jputmoji(JCHAR *s, JMOJI c);
JSTRING jstradv(const JCHAR *s, size_t n);
JSTRING jstrcat(JCHAR *to, const JCHAR *from);
JSTRING jstrchr(const JCHAR *s, JMOJI c);
int jstrcmp(const JCHAR *s1, const JCHAR *s2);
size_t jstrcspn(const JCHAR *s1, const JCHAR *s2);
unsigned __int8 *jstrerror(int errnum);
int jstricmp(const JCHAR *s1, const JCHAR *s2);
size_t jstrlen(const JCHAR *s);
JSTRING jstrlwr(JCHAR *s);
JSTRING jstrmatch(const JCHAR *s1, const JCHAR *s2);
JSTRING jstrncat(JCHAR *to, const JCHAR *from, size_t n);
int jstrncmp(const JCHAR *s1, const JCHAR *s2, size_t n);
JSTRING jstrncpy(JCHAR *to, const JCHAR *from, size_t n);
int jstrnicmp(const JCHAR *s1, const JCHAR *s2, size_t n);
JSTRING jstrnset(JCHAR *s, JMOJI c, size_t n);
JSTRING jstrrchr(const JCHAR *s, JMOJI c);
JSTRING jstrrev(JCHAR *s);
JSTRING jstrset(JCHAR *s, JMOJI c);
JSTRING jstrskip(const JCHAR *s1, const JCHAR *s2);
size_t jstrspn(const JCHAR *s1, const JCHAR *s2);
JSTRING jstrstr(const JCHAR *s1, const JCHAR *s2);
JSTRING jstrtok(JCHAR *targ, const JCHAR *brk);
JSTRING jstrupr(JCHAR *s);
JMOJI jtohira(JMOJI c);
JMOJI jtokata(JMOJI c);
JMOJI jtolower(JMOJI c);
JMOJI jtoupper(JMOJI c);
int kbhit(void);
__int32 labs(__int32 j);
double ldexp(double x, int exp);
ldiv_t ldiv(__int32 numer, __int32 denom);
void *lfind(const void *key, const void *base, unsigned int *num, unsigned int width, int (*compare)(const void *, const void *));
struct lconv *localeconv(void);
struct tm *localtime(const time_t *timer);
int lock(int handle, unsigned __int32 offset, unsigned __int32 nbytes);
int locking(int handle, int mode, unsigned __int32 nbyte);
double log(double x);
double log10(double x);
double log2(double x);
void longjmp(jmp_buf env, int val);
void *lsearch(const void *key, const void *base, unsigned int *num, unsigned int width, int (*compare)(const void *, const void *));
__int32 lseek(int handle, __int32 offset, int origin);
char *ltoa(__int32 value, char *buf, int radix);
void *malloc(size_t size);
int matherr(struct exception *);
int mblen(const char *s, size_t n);
size_t mbstowcs(wchar_t *pwcs, const char *s, size_t n);
int mbtowc(wchar_t *pwc, const char *string, size_t n);
void *memccpy(void *s1, const void *s2, int c, size_t n);
void *memchr(const void *s, int c, size_t n);
int memcmp(const void *s1, const void *s2, size_t n);
void *memcpy(void *s1, const void *s2, size_t n);
int memicmp(const void *s1, const void *s2, size_t n);
void *memmove(void *s1, const void *s2, size_t n);
void *memset(void *s, int c, size_t n);
int mkdir(const char *path);
time_t mktime(struct tm *timeptr);
double modf(double value, double *iptr);
void movedata(unsigned int srcseg, unsigned int srcoff, unsigned int tgtseg, unsigned int tgtoff, unsigned int len);
size_t mtob(const JCHAR *s, size_t nm);
void nosound(void);
int nthctype(const JCHAR *s, size_t n);
onexit_t onexit(onexit_t func);
int open(const char *path, int oflag, ...);
DIR *opendir(const char *);
unsigned int outp(unsigned int port, unsigned int value);
unsigned int outpw(unsigned int port, unsigned int value);
void perror(const char *s);
double pow(double x, double y);
int printf(const char *format, ...);
int putc(int c, FILE *fp);
int putch(int c);
int putchar(int c);
int putenv(const char *env_string);
int puts(const char *s);
void qsort(void *base, size_t nmemb, size_t size, int (*compar)(const void *, const void *));
int raise(int sig);
int rand(void);
int read(int handle, void *buf, unsigned int len);
struct dirent *readdir(DIR *);
void *realloc(void *ptr, size_t size);
int remove(const char *filename);
int rename(const char *old, const char *new);
void rewind(FILE *fp);
int rmdir(const char *path);
void near *sbrk(int increment);
int scanf(const char *format, ...);
void segread(struct SREGS *);
void setbuf(FILE *fp, char *buf);
int setenv(const char *name, const char *newvalue, int overwrite);
char *setlocale(int category, const char *locale);
int setmode(int handle, int mode);
int setvbuf(FILE *fp, char *buf, int mode, size_t size);
void (*signal(int sig, void (*func)(int)))(int);
double sin(double x);
double sinh(double x);
void sleep(unsigned int seconds);
int sopen(const char *path, int oflag, int share, ...);
void sound(unsigned int frequency);
int spawnl(int mode, const char *path, const char *arg0, ...);
int spawnle(int mode, const char *path, const char *arg0, ...);
int spawnlp(int mode, const char *path, const char *arg0, ...);
int spawnlpe(int mode, const char *path, const char *arg0, ...);
int spawnv(int mode, const char *path, const char *const *argv);
int spawnve(int mode, const char *path, const char *const *argv, const char *const *envp);
int spawnvp(int mode, const char *path, const char *const *argv);
int spawnvpe(int mode, const char *path, const char *const *argv, const char *const *envp);
int sprintf(char *s, const char *format, ...);
double sqrt(double x);
void srand(unsigned int seed);
int sscanf(const char *s, const char *format, ...);
unsigned int stackavail(void);
int stat(const char *, struct stat *);
char *strcat(char *s1, const char *s2);
char *strchr(const char *s, int c);
int strcmp(const char *s1, const char *s2);
int strcmpi(const char *s1, const char *s2);
int strcoll(const char *s1, const char *s2);
char *strcpy(char *s1, const char *s2);
size_t strcspn(const char *s1, const char *s2);
char *strdup(const char *string);
char *strerror(int errnum);
size_t strftime(char *s, size_t maxsiz, const char *fmt, const struct tm *tp);
int stricmp(const char *s1, const char *s2);
size_t strlen(const char *s);
char *strlwr(char *string);
char *strncat(char *s1, const char *s2, size_t n);
int strncmp(const char *s1, const char *s2, size_t n);
char *strncpy(char *s1, const char *s2, size_t n);
int strnicmp(const char *s1, const char *s2, size_t n);
char *strnset(char *string, int c, size_t len);
char *strpbrk(const char *s1, const char *s2);
char *strrchr(const char *s, int c);
char *strrev(char *string);
char *strset(char *string, int c);
size_t strspn(const char *s1, const char *s2);
char *strstr(const char *s1, const char *s2);
double strtod(const char *nptr, char **endptr);
char *strtok(char *s1, const char *s2);
__int32 strtol(const char *nptr, char **endptr, int base);
unsigned __int32 strtoul(const char *nptr, char **endptr, int base);
char *strupr(char *string);
size_t strxfrm(char *s1, const char *s2, size_t n);
void swab(char *src, char *dest, int num);
char *sys_errlist[];
int sys_nerr;
int system(const char *cmd);
double tan(double x);
double tanh(double x);
__int32 tell(int handle);
time_t time(time_t *timer);
__int32 timezone;
FILE *tmpfile(void);
char *tmpnam(char *s);
int tolower(int);
int toupper(int);
char *tzname[2];
void tzset(void);
char *ultoa(unsigned __int32 value, char *buf, int radix);
int umask(int permission);
int ungetc(int c, FILE *fp);
int ungetch(int c);
int unlink(const char *path);
int unlock(int handle, unsigned __int32 offset, unsigned __int32 nbytes);
int utime(const char *path, const struct utimbuf *times);
char *utoa(unsigned int value, char *buf, int radix);
int vcprintf(const char *format, __va_list arg);
int vcscanf(const char *format, __va_list arg);
int vfprintf(FILE *fp, const char *format, __va_list arg);
int vfscanf(FILE *fp, const char *format, __va_list arg);
int vprintf(const char *format, __va_list arg);
int vscanf(const char *format, __va_list arg);
int vsprintf(char *s, const char *format, __va_list arg);
int vsscanf(const char *s, const char *format, __va_list arg);
int wait(int *status);
size_t wcstombs(char *s, const wchar_t *pwcs, size_t n);
int wctomb(char *s, wchar_t wchar);
int write(int handle, const void *buf, unsigned int len);
double y0(double x);
double y1(double x);
double yn(int n, double x);
JMOJI zentohan(JMOJI c);
