struct $0B8D1429C3827E0DB460E98487EB6908 {unsigned __int32 Inexact : 1;unsigned __int32 Underflow : 1;unsigned __int32 Overflow : 1;unsigned __int32 ZeroDivide : 1;unsigned __int32 InvalidOperation : 1;};
enum $0C0D8E877CDAA32B9F529E7264818D98 {_FpCompareEqual = 0x0,_FpCompareGreater = 0x1,_FpCompareLess = 0x2,_FpCompareUnordered = 0x3,};
enum $0CDD13AED9949118DD70163834A3A235 {_FpRoundNearest = 0x0,_FpRoundMinusInfinity = 0x1,_FpRoundPlusInfinity = 0x2,_FpRoundChopped = 0x3,};
struct __declspec(align(8)) $1CF8D236196540158D67A26DAC991F28 {unsigned int W[2];};
enum $239F13ABFE0DEB25C9BEF2C1826A55A5 {_FpFormatFp32 = 0x0,_FpFormatFp64 = 0x1,_FpFormatFp80 = 0x2,_FpFormatFp128 = 0x3,_FpFormatI16 = 0x4,_FpFormatI32 = 0x5,_FpFormatI64 = 0x6,_FpFormatU16 = 0x7,_FpFormatU32 = 0x8,_FpFormatU64 = 0x9,_FpFormatBcd80 = 0xA,_FpFormatCompare = 0xB,_FpFormatString = 0xC,};
struct $271E49C86C8EFA0B647D87A58CF03284 {unsigned __int32 RoundingMode : 2;unsigned __int32 Precision : 3;unsigned __int32 Operation : 12;_FPIEEE_EXCEPTION_FLAGS Cause;_FPIEEE_EXCEPTION_FLAGS Enable;_FPIEEE_EXCEPTION_FLAGS Status;_FPIEEE_VALUE Operand1;_FPIEEE_VALUE Operand2;_FPIEEE_VALUE Result;};
struct $2AE221845231FFCECC219BE7F7049133 {long double x;};
struct $6D7329FAD13C403F17A910B84CCFB7BF {unsigned __int8 ld12[12];};
struct __declspec(align(16)) $7007A5D07675D2D320A62125AF136FB2 {_Q64 W[2];};
struct $72295A7541EC936D47FC3642EE72298B {unsigned __int16 W[5];};
struct $798F2A0931AE69495F6CF5BE64E576B5 {union $798F2A0931AE69495F6CF5BE64E576B5::$C07814F2AB249BB45CDFEF44975072DA Value;unsigned __int32 OperandValid : 1;unsigned __int32 Format : 4;};
union $798F2A0931AE69495F6CF5BE64E576B5::$C07814F2AB249BB45CDFEF44975072DA {_FP32 Fp32Value;_FP64 Fp64Value;_FP80 Fp80Value;_FP128 Fp128Value;_I16 I16Value;_I32 I32Value;_I64 I64Value;_U16 U16Value;_U32 U32Value;_U64 U64Value;_BCD80 Bcd80Value;char *StringValue;int CompareValue;_Q64 Q64Value;_FPQ64 Fpq64Value;};
struct __declspec(align(16)) $8E0937B200DCBA03D39E01164C2A4D0D {unsigned int W[4];};
struct $AD8E08CFADC045292413D8E747DD5ED4 {unsigned __int8 ld[10];};
struct $BA519187DB4FB038EDB1959BB4D2DF27 {double x;};
enum $D7F48ACA8F7E5F151D30CF090E11B572 {_FpCodeUnspecified = 0x0,_FpCodeAdd = 0x1,_FpCodeSubtract = 0x2,_FpCodeMultiply = 0x3,_FpCodeDivide = 0x4,_FpCodeSquareRoot = 0x5,_FpCodeRemainder = 0x6,_FpCodeCompare = 0x7,_FpCodeConvert = 0x8,_FpCodeRound = 0x9,_FpCodeTruncate = 0xA,_FpCodeFloor = 0xB,_FpCodeCeil = 0xC,_FpCodeAcos = 0xD,_FpCodeAsin = 0xE,_FpCodeAtan = 0xF,_FpCodeAtan2 = 0x10,_FpCodeCabs = 0x11,_FpCodeCos = 0x12,_FpCodeCosh = 0x13,_FpCodeExp = 0x14,_FpCodeFabs = 0x15,_FpCodeFmod = 0x16,_FpCodeFrexp = 0x17,_FpCodeHypot = 0x18,_FpCodeLdexp = 0x19,_FpCodeLog = 0x1A,_FpCodeLog10 = 0x1B,_FpCodeModf = 0x1C,_FpCodePow = 0x1D,_FpCodeSin = 0x1E,_FpCodeSinh = 0x1F,_FpCodeTan = 0x20,_FpCodeTanh = 0x21,_FpCodeY0 = 0x22,_FpCodeY1 = 0x23,_FpCodeYn = 0x24,_FpCodeLogb = 0x25,_FpCodeNextafter = 0x26,_FpCodeNegate = 0x27,_FpCodeFmin = 0x28,_FpCodeFmax = 0x29,_FpCodeConvertTrunc = 0x2A,_XMMIAddps = 0x2B,_XMMIAddss = 0x2C,_XMMISubps = 0x2D,_XMMISubss = 0x2E,_XMMIMulps = 0x2F,_XMMIMulss = 0x30,_XMMIDivps = 0x31,_XMMIDivss = 0x32,_XMMISqrtps = 0x33,_XMMISqrtss = 0x34,_XMMIMaxps = 0x35,_XMMIMaxss = 0x36,_XMMIMinps = 0x37,_XMMIMinss = 0x38,_XMMICmpps = 0x39,_XMMICmpss = 0x3A,_XMMIComiss = 0x3B,_XMMIUComiss = 0x3C,_XMMICvtpi2ps = 0x3D,_XMMICvtsi2ss = 0x3E,_XMMICvtps2pi = 0x3F,_XMMICvtss2si = 0x40,_XMMICvttps2pi = 0x41,_XMMICvttss2si = 0x42,_XMMIAddsubps = 0x43,_XMMIHaddps = 0x44,_XMMIHsubps = 0x45,_XMMIRoundps = 0x46,_XMMIRoundss = 0x47,_XMMIDpps = 0x48,_XMMI2Addpd = 0x49,_XMMI2Addsd = 0x4A,_XMMI2Subpd = 0x4B,_XMMI2Subsd = 0x4C,_XMMI2Mulpd = 0x4D,_XMMI2Mulsd = 0x4E,_XMMI2Divpd = 0x4F,_XMMI2Divsd = 0x50,_XMMI2Sqrtpd = 0x51,_XMMI2Sqrtsd = 0x52,_XMMI2Maxpd = 0x53,_XMMI2Maxsd = 0x54,_XMMI2Minpd = 0x55,_XMMI2Minsd = 0x56,_XMMI2Cmppd = 0x57,_XMMI2Cmpsd = 0x58,_XMMI2Comisd = 0x59,_XMMI2UComisd = 0x5A,_XMMI2Cvtpd2pi = 0x5B,_XMMI2Cvtsd2si = 0x5C,_XMMI2Cvttpd2pi = 0x5D,_XMMI2Cvttsd2si = 0x5E,_XMMI2Cvtps2pd = 0x5F,_XMMI2Cvtss2sd = 0x60,_XMMI2Cvtpd2ps = 0x61,_XMMI2Cvtsd2ss = 0x62,_XMMI2Cvtdq2ps = 0x63,_XMMI2Cvttps2dq = 0x64,_XMMI2Cvtps2dq = 0x65,_XMMI2Cvttpd2dq = 0x66,_XMMI2Cvtpd2dq = 0x67,_XMMI2Addsubpd = 0x68,_XMMI2Haddpd = 0x69,_XMMI2Hsubpd = 0x6A,_XMMI2Roundpd = 0x6B,_XMMI2Roundsd = 0x6C,_XMMI2Dppd = 0x6D,};
union $D91DE99308EDB4B15B954CC4B13FA8FA {unsigned __int16 _Word[8];float _Float;double _Double;long double _Long_double;};
struct $E6A349E6C594207448DC3F8A57F3A91C {float f;};
enum $EBF8251B43E7412EBBCF0A9FFEA6D7A7 {_FpPrecisionFull = 0x0,_FpPrecision53 = 0x1,_FpPrecision24 = 0x2,};
typedef enum _EXCEPTION_DISPOSITION EXCEPTION_DISPOSITION;
typedef struct _iobuf FILE;
enum MACRO_BLOCK {_FREE_BLOCK = 0,_NORMAL_BLOCK = 1,_CRT_BLOCK = 2,_IGNORE_BLOCK = 3,_CLIENT_BLOCK = 4,};
enum MACRO_BUFSIZ {BUFSIZ = 512,};
enum MACRO_CHAR {CHAR_BIT = 8,};
enum MACRO_CHAR_MIN {CHAR_MIN = -128,CHAR_MAX = 127,};
enum MACRO_CLK {CLK_TCK = 1000,};
enum MACRO_CLOCKS {CLOCKS_PER_SEC = 1000,};
enum MACRO_CW {CW_DEFAULT = 589855,};
enum MACRO_DBL {DBL_DIG = 15,DBL_MANT_DIG = 53,DBL_MAX_10_EXP = 308,DBL_MAX_EXP = 1024,DBL_MIN_10_EXP = -307,DBL_MIN_EXP = -1021,};
enum MACRO_DBL_RADIX {DBL_RADIX = 2,DBL_ROUNDS = 1,};
enum MACRO_DOMAIN {DOMAIN = 1,SING = 2,};
enum MACRO_EM {EM_AMBIGUIOUS = -2147483648,EM_AMBIGUOUS = -2147483648,};
enum MACRO_EM_INVALID {EM_INVALID = 16,EM_DENORMAL = 524288,EM_ZERODIVIDE = 8,EM_OVERFLOW = 4,EM_UNDERFLOW = 2,EM_INEXACT = 1,};
enum MACRO_EOF {EOF = -1,};
enum MACRO_ERRNO {EPERM = 1,ENOENT = 2,ESRCH = 3,EINTR = 4,EIO = 5,ENXIO = 6,E2BIG = 7,ENOEXEC = 8,EBADF = 9,ECHILD = 10,EAGAIN = 11,ENOMEM = 12,EACCES = 13,EFAULT = 14,EBUSY = 16,EEXIST = 17,EXDEV = 18,ENODEV = 19,ENOTDIR = 20,EISDIR = 21,ENFILE = 23,EMFILE = 24,ENOTTY = 25,EFBIG = 27,ENOSPC = 28,ESPIPE = 29,EROFS = 30,EMLINK = 31,EPIPE = 32,EDOM = 33,EDEADLK = 36,ENAMETOOLONG = 38,ENOLCK = 39,ENOSYS = 40,ENOTEMPTY = 41,EINVAL = 22,ERANGE = 34,EILSEQ = 42,STRUNCATE = 80,EDEADLOCK = 36,EADDRINUSE = 100,EADDRNOTAVAIL = 101,EAFNOSUPPORT = 102,EALREADY = 103,EBADMSG = 104,ECANCELED = 105,ECONNABORTED = 106,ECONNREFUSED = 107,ECONNRESET = 108,EDESTADDRREQ = 109,EHOSTUNREACH = 110,EIDRM = 111,EINPROGRESS = 112,EISCONN = 113,ELOOP = 114,EMSGSIZE = 115,ENETDOWN = 116,ENETRESET = 117,ENETUNREACH = 118,ENOBUFS = 119,ENODATA = 120,ENOLINK = 121,ENOMSG = 122,ENOPROTOOPT = 123,ENOSR = 124,ENOSTR = 125,ENOTCONN = 126,ENOTRECOVERABLE = 127,ENOTSOCK = 128,ENOTSUP = 129,EOPNOTSUPP = 130,EOTHER = 131,EOVERFLOW = 132,EOWNERDEAD = 133,EPROTO = 134,EPROTONOSUPPORT = 135,EPROTOTYPE = 136,ETIME = 137,ETIMEDOUT = 138,ETXTBSY = 139,EWOULDBLOCK = 140,};
enum MACRO_EXCEPTION {EXCEPTION_EXECUTE_HANDLER = 1,EXCEPTION_CONTINUE_SEARCH = 0,EXCEPTION_CONTINUE_EXECUTION = -1,};
enum MACRO_EXIT {EXIT_SUCCESS = 0,EXIT_FAILURE = 1,};
enum MACRO_FILENAME {FILENAME_MAX = 260,FOPEN_MAX = 20,};
enum MACRO_FLT {FLT_DIG = 6,FLT_GUARD = 0,FLT_MANT_DIG = 24,FLT_MAX_10_EXP = 38,FLT_MAX_EXP = 128,FLT_MIN_10_EXP = -37,FLT_MIN_EXP = -125,FLT_NORMALIZE = 0,FLT_RADIX = 2,FLT_ROUNDS = 1,};
enum MACRO_FPE {FPE_INVALID = 129,FPE_DENORMAL = 130,FPE_ZERODIVIDE = 131,FPE_OVERFLOW = 132,FPE_UNDERFLOW = 133,FPE_INEXACT = 134,FPE_UNEMULATED = 135,FPE_SQRTNEG = 136,FPE_STACKOVERFLOW = 138,FPE_STACKUNDERFLOW = 139,FPE_EXPLICITGEN = 140,};
enum MACRO_IC {IC_AFFINE = 262144,IC_PROJECTIVE = 0,};
enum MACRO_INT : __int64 {INT_LEAST32_MIN = -2147483648,INT_LEAST64_MIN = -9223372036854775808,INT_LEAST32_MAX = 2147483647,INT_LEAST64_MAX = 9223372036854775807,};
enum MACRO_INTMAX : __int64 {INTMAX_MIN = -9223372036854775808,INTMAX_MAX = 9223372036854775807,};
enum MACRO_INTPTR {INTPTR_MIN = -2147483648,INTPTR_MAX = 2147483647,};
enum MACRO_INT_FAST16 : __int64 {INT_FAST16_MIN = -2147483648,INT_FAST32_MIN = -2147483648,INT_FAST64_MIN = -9223372036854775808,INT_FAST16_MAX = 2147483647,INT_FAST32_MAX = 2147483647,INT_FAST64_MAX = 9223372036854775807,};
enum MACRO_INT_MIN {INT_MIN = -2147483648,INT_MAX = 2147483647,};
enum MACRO_LC {LC_ALL = 0,LC_COLLATE = 1,LC_CTYPE = 2,LC_MONETARY = 3,LC_NUMERIC = 4,LC_TIME = 5,LC_MIN = 0,LC_MAX = 5,};
enum MACRO_LDBL {LDBL_DIG = 15,LDBL_MANT_DIG = 53,LDBL_MAX_10_EXP = 308,LDBL_MAX_EXP = 1024,LDBL_MIN_10_EXP = -307,LDBL_MIN_EXP = -1021,};
enum MACRO_LDBL_RADIX {LDBL_RADIX = 2,LDBL_ROUNDS = 1,};
enum MACRO_LK {LK_UNLCK = 0,LK_LOCK = 1,LK_NBLCK = 2,LK_RLCK = 3,LK_NBRLCK = 4,};
enum MACRO_LLONG : __int64 {LLONG_MIN = -9223372036854775808,};
enum MACRO_LONG {LONG_MIN = -2147483648,LONG_MAX = 2147483647,};
enum MACRO_MAX : __int64 {INT32_MAX = 2147483647,INT64_MAX = 9223372036854775807,UINT32_MAX = -1,UINT64_MAX = -1,};
enum MACRO_MB {MB_LEN_MAX = 5,};
enum MACRO_MCW {MCW_EM = 524319,};
enum MACRO_MCW_IC {MCW_IC = 262144,};
enum MACRO_MCW_PC {MCW_PC = 196608,};
enum MACRO_MCW_RC {MCW_RC = 768,};
enum MACRO_MIN : __int64 {INT32_MIN = -2147483648,INT64_MIN = -9223372036854775808,};
enum MACRO_NSIG {NSIG = 23,};
enum MACRO_NULL {NULL = 0,};
enum MACRO_O {O_RDONLY = 0,O_WRONLY = 1,O_RDWR = 2,O_APPEND = 8,O_CREAT = 256,O_TRUNC = 512,O_EXCL = 1024,O_TEXT = 16384,O_BINARY = 32768,O_RAW = 32768,O_TEMPORARY = 64,O_NOINHERIT = 128,O_SEQUENTIAL = 32,O_RANDOM = 16,};
enum MACRO_OLD {OLD_P_OVERLAY = 2,};
enum MACRO_OVERFLOW {OVERFLOW = 3,UNDERFLOW = 4,};
enum MACRO_P {P_WAIT = 0,P_NOWAIT = 1,P_OVERLAY = 2,};
enum MACRO_PC {PC_24 = 131072,PC_53 = 65536,PC_64 = 0,};
enum MACRO_PER_THREAD_LOCALE {_ENABLE_PER_THREAD_LOCALE = 0x1,_DISABLE_PER_THREAD_LOCALE = 0x2,};
enum MACRO_PER_THREAD_LOCALE_GLOBAL {_ENABLE_PER_THREAD_LOCALE_GLOBAL = 0x10,_DISABLE_PER_THREAD_LOCALE_GLOBAL = 0x20,};
enum MACRO_PER_THREAD_LOCALE_NEW {_ENABLE_PER_THREAD_LOCALE_NEW = 0x100,_DISABLE_PER_THREAD_LOCALE_NEW = 0x200,};
enum MACRO_PLOSS {PLOSS = 6,};
enum MACRO_PTRDIFF {PTRDIFF_MIN = -2147483648,PTRDIFF_MAX = 2147483647,};
enum MACRO_P_NOWAITO {P_NOWAITO = 3,P_DETACH = 4,};
enum MACRO_RAND {RAND_MAX = 0x7FFF,};
enum MACRO_RC {RC_CHOP = 768,RC_UP = 512,RC_DOWN = 256,RC_NEAR = 0,};
enum MACRO_S {S_IFMT = 61440,S_IFDIR = 16384,S_IFCHR = 8192,S_IFREG = 32768,S_IREAD = 256,S_IWRITE = 128,S_IEXEC = 64,};
enum MACRO_SCHAR {SCHAR_MIN = -128,SCHAR_MAX = 127,};
enum MACRO_SEEK {SEEK_CUR = 1,SEEK_END = 2,SEEK_SET = 0,};
enum MACRO_SH {SH_DENYRW = 16,SH_DENYWR = 32,SH_DENYRD = 48,SH_DENYNO = 64,};
enum MACRO_SHRT {SHRT_MIN = -32768,SHRT_MAX = 32767,};
enum MACRO_SIG {SIG_ATOMIC_MIN = -2147483648,SIG_ATOMIC_MAX = 2147483647,};
enum MACRO_SIGNAL {SIGINT = 2,SIGILL = 4,SIGFPE = 8,SIGSEGV = 11,SIGTERM = 15,SIGBREAK = 21,SIGABRT = 22,SIGABRT_COMPAT = 6,};
enum MACRO_SIZE {SIZE_MAX = -1,};
enum MACRO_SW {SW_INVALID = 16,SW_DENORMAL = 524288,SW_ZERODIVIDE = 8,SW_OVERFLOW = 4,SW_UNDERFLOW = 2,SW_INEXACT = 1,SW_UNEMULATED = 64,SW_SQRTNEG = 128,SW_STACKOVERFLOW = 512,SW_STACKUNDERFLOW = 1024,};
enum MACRO_SYS {SYS_OPEN = 20,};
enum MACRO_TLOSS {TLOSS = 5,};
enum MACRO_TMP {TMP_MAX = 32767,};
enum MACRO_UCHAR {UCHAR_MAX = 0xFF,};
enum MACRO_UINT {UINT_LEAST32_MAX = -1,UINT_LEAST64_MAX = -1,};
enum MACRO_UINTMAX {UINTMAX_MAX = -1,};
enum MACRO_UINTPTR {UINTPTR_MAX = -1,};
enum MACRO_UINT_FAST16 {UINT_FAST16_MAX = -1,UINT_FAST32_MAX = -1,UINT_FAST64_MAX = -1,};
enum MACRO_UINT_MAX {UINT_MAX = 0xFFFFFFFF,};
enum MACRO_ULLONG {ULLONG_MAX = 0xFFFFFFFF,};
enum MACRO_ULONG : __int64 {ULONG_MAX = 0xFFFFFFFFFFFFFFFF,LLONG_MAX = 0x7FFFFFFFFFFFFFFF,};
enum MACRO_USHRT {USHRT_MAX = 0xFFFF,};
enum MACRO_WAIT {WAIT_CHILD = 0,WAIT_GRANDCHILD = 1,};
enum MACRO_WCHAR {WCHAR_MIN = 0x0,WCHAR_MAX = 0xFFFF,};
enum MACRO_WEOF {WEOF = 0xFFFF,};
enum MACRO_WINT {WINT_MIN = 0x0,WINT_MAX = 0xFFFF,};
enum MACRO__A {_A_NORMAL = 0x0,_A_RDONLY = 0x1,_A_HIDDEN = 0x2,_A_SYSTEM = 0x4,_A_SUBDIR = 0x10,_A_ARCH = 0x20,};
enum MACRO__ALLOCA {_ALLOCA_S_THRESHOLD = 1024,_ALLOCA_S_STACK_MARKER = 52428,_ALLOCA_S_HEAP_MARKER = 56797,_ALLOCA_S_MARKER_SIZE = 8,};
enum MACRO__ALPHA {_ALPHA = 0x103,};
enum MACRO__ARGMAX {_ARGMAX = 100,};
enum MACRO__ARM {_ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE = 0,};
enum MACRO__ATOMIC {_ATOMIC_MAXBYTES_LOCK_FREE = 8,_ATOMIC_FLAG_USES_LOCK = 0,_ATOMIC_FENCE_USES_LOCK = 0,};
enum MACRO__C2 {_C2 = 1,};
enum MACRO__CALL {_CALL_REPORTFAULT = 0x2,};
enum MACRO__CMP {_CMP_EQ_OQ = 0x0,_CMP_LT_OS = 0x1,_CMP_LE_OS = 0x2,_CMP_UNORD_Q = 0x3,_CMP_NEQ_UQ = 0x4,_CMP_NLT_US = 0x5,_CMP_NLE_US = 0x6,_CMP_ORD_Q = 0x7,_CMP_EQ_UQ = 0x8,_CMP_NGE_US = 0x9,_CMP_NGT_US = 0xA,_CMP_FALSE_OQ = 0xB,_CMP_NEQ_OQ = 0xC,_CMP_GE_OS = 0xD,_CMP_GT_OS = 0xE,_CMP_TRUE_UQ = 0xF,_CMP_EQ_OS = 0x10,_CMP_LT_OQ = 0x11,_CMP_LE_OQ = 0x12,_CMP_UNORD_S = 0x13,_CMP_NEQ_US = 0x14,_CMP_NLT_UQ = 0x15,_CMP_NLE_UQ = 0x16,_CMP_ORD_S = 0x17,_CMP_EQ_US = 0x18,_CMP_NGE_UQ = 0x19,_CMP_NGT_UQ = 0x1A,_CMP_FALSE_OS = 0x1B,_CMP_NEQ_OS = 0x1C,_CMP_GE_OQ = 0x1D,_CMP_GT_OQ = 0x1E,_CMP_TRUE_US = 0x1F,};
enum MACRO__CN {_CN = 8,};
enum MACRO__COMPILER {_COMPILER_TLS = 1,};
enum MACRO__CPPLIB {_CPPLIB_VER = 540,};
enum MACRO__CRT {_CRT_PACKING = 8,};
enum MACRO__CRTDBG {_CRTDBG_MODE_FILE = 0x1,_CRTDBG_MODE_DEBUG = 0x2,_CRTDBG_MODE_WNDW = 0x4,_CRTDBG_REPORT_MODE = 0xFFFFFFFF,_CRTDBG_INVALID_HFILE = 0xFFFFFFFF,_CRTDBG_HFILE_ERROR = 0xFFFFFFFE,_CRTDBG_FILE_STDOUT = 0xFFFFFFFC,_CRTDBG_FILE_STDERR = 0xFFFFFFFB,_CRTDBG_REPORT_FILE = 0xFFFFFFFA,};
enum MACRO__CRTDBG_ALLOC {_CRTDBG_ALLOC_MEM_DF = 0x1,_CRTDBG_DELAY_FREE_MEM_DF = 0x2,_CRTDBG_CHECK_ALWAYS_DF = 0x4,_CRTDBG_RESERVED_DF = 0x8,_CRTDBG_CHECK_CRT_DF = 0x10,_CRTDBG_LEAK_CHECK_DF = 0x20,_CRTDBG_CHECK_EVERY_16_DF = 0x100000,_CRTDBG_CHECK_EVERY_128_DF = 0x800000,_CRTDBG_CHECK_EVERY_1024_DF = 0x4000000,_CRTDBG_CHECK_DEFAULT_DF = 0x0,_CRTDBG_REPORT_FLAG = 0xFFFFFFFF,};
enum MACRO__CRTWRN {_CRTWRN_WNUMBER__NO_SPECIAL_TRANSFER = 1004,_CRTWRN_WNUMBER__DEPRECATE_STATIC_CPPLIB = 1007,};
enum MACRO__CRT_BUILD {_CRT_BUILD_DESKTOP_APP = 1,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES = 0,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT = 0,_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES = 1,_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY = 0,_CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY = 0,};
enum MACRO__CRT_RPTHOOK {_CRT_RPTHOOK_INSTALL = 0,_CRT_RPTHOOK_REMOVE = 1,};
enum MACRO__CRT_WARN {_CRT_WARN = 0,_CRT_ERROR = 1,_CRT_ASSERT = 2,_CRT_ERRCNT = 3,};
enum MACRO__CVTBUFSIZE {_CVTBUFSIZE = 349,};
enum MACRO__CW {_CW_DEFAULT = 589855,};
enum MACRO__DBL {_DBL_RADIX = 2,_DBL_ROUNDS = 1,};
enum MACRO__DENORM {_DENORM = -2,};
enum MACRO__DI {_DI = 4,};
enum MACRO__DN {_DN_SAVE = 0x0,_DN_FLUSH = 0x1000000,_DN_FLUSH_OPERANDS_SAVE_RESULTS = 0x2000000,_DN_SAVE_OPERANDS_FLUSH_RESULTS = 0x3000000,};
enum MACRO__DOMAIN {_DOMAIN = 1,_SING = 2,};
enum MACRO__EM {_EM_AMBIGUIOUS = 0x80000000,_EM_AMBIGUOUS = 0x80000000,};
enum MACRO__EM_INEXACT {_EM_INEXACT = 0x1,_EM_UNDERFLOW = 0x2,_EM_OVERFLOW = 0x4,_EM_ZERODIVIDE = 0x8,_EM_INVALID = 0x10,_EM_DENORMAL = 0x80000,};
enum MACRO__FE {_FE_DIVBYZERO = 0x4,_FE_INEXACT = 0x20,_FE_INVALID = 0x1,_FE_OVERFLOW = 0x8,_FE_UNDERFLOW = 0x10,};
enum MACRO__FINITE {_FINITE = -1,};
enum MACRO__FPCLASS {_FPCLASS_SNAN = 0x1,_FPCLASS_QNAN = 0x2,_FPCLASS_NINF = 0x4,_FPCLASS_NN = 0x8,_FPCLASS_ND = 0x10,_FPCLASS_NZ = 0x20,_FPCLASS_PZ = 0x40,_FPCLASS_PD = 0x80,_FPCLASS_PN = 0x100,_FPCLASS_PINF = 0x200,};
enum MACRO__FPE {_FPE_INVALID = 0x81,_FPE_DENORMAL = 0x82,_FPE_ZERODIVIDE = 0x83,_FPE_OVERFLOW = 0x84,_FPE_UNDERFLOW = 0x85,_FPE_INEXACT = 0x86,_FPE_UNEMULATED = 0x87,_FPE_SQRTNEG = 0x88,_FPE_STACKOVERFLOW = 0x8A,_FPE_STACKUNDERFLOW = 0x8B,_FPE_EXPLICITGEN = 0x8C,_FPE_MULTIPLE_TRAPS = 0x8D,_FPE_MULTIPLE_FAULTS = 0x8E,};
enum MACRO__FREEENTRY {_FREEENTRY = 0,_USEDENTRY = 1,};
enum MACRO__GENERIC {_GENERIC_ATOMICS = 0,};
enum MACRO__GLOBAL {_GLOBAL_LOCALE = 0,};
enum MACRO__GLOBAL_USING {_GLOBAL_USING = 1,};
enum MACRO__HAS {_HAS_CPP0X = 1,};
enum MACRO__HAS_CHAR16 {_HAS_CHAR16_T_LANGUAGE_SUPPORT = 0,};
enum MACRO__HAS_EXCEPTIONS {_HAS_EXCEPTIONS = 1,};
enum MACRO__HAS_ITERATOR {_HAS_ITERATOR_DEBUGGING = 0,};
enum MACRO__HEAP {_HEAP_MAXREQ = 0xFFFFFFE0,};
enum MACRO__HEAPBADBEGIN {_HEAPBADBEGIN = -3,};
enum MACRO__HEAPBADNODE {_HEAPBADNODE = -4,};
enum MACRO__HEAPBADPTR {_HEAPBADPTR = -6,};
enum MACRO__HEAPEMPTY {_HEAPEMPTY = -1,};
enum MACRO__HEAPEND {_HEAPEND = -5,};
enum MACRO__HEAPOK {_HEAPOK = -2,};
enum MACRO__HOOK {_HOOK_ALLOC = 1,_HOOK_REALLOC = 2,_HOOK_FREE = 3,};
enum MACRO__I32 {_I32_MIN = -2147483648,_I32_MAX = 2147483647,};
enum MACRO__I64 : __int64 {_I64_MIN = -9223372036854775808,_I64_MAX = 9223372036854775807,};
enum MACRO__IC {_IC_AFFINE = 0x40000,_IC_PROJECTIVE = 0x0,};
enum MACRO__INFCODE {_INFCODE = 1,_NANCODE = 2,};
enum MACRO__IOB {_IOB_ENTRIES = 20,};
enum MACRO__IOFBF {_IOFBF = 0x0,_IOLBF = 0x40,};
enum MACRO__IONBF {_IONBF = 0x4,_IOMYBUF = 0x8,_IOEOF = 0x10,_IOERR = 0x20,_IOSTRG = 0x40,_IORW = 0x80,};
enum MACRO__IOREAD {_IOREAD = 0x1,_IOWRT = 0x2,};
enum MACRO__IOSTREAM {_IOSTREAM_OP_LOCKS = 1,};
enum MACRO__ITERATOR {_ITERATOR_DEBUG_LEVEL = 0,_ITERATOR_DEBUG_ARRAY_OVERLOADS = 1,};
enum MACRO__JBLEN {_JBLEN = 16,};
enum MACRO__KANJI {_KANJI_CP = 932,};
enum MACRO__LK {_LK_UNLCK = 0,_LK_LOCK = 1,_LK_NBLCK = 2,_LK_RLCK = 3,_LK_NBRLCK = 4,};
enum MACRO__LLONG : __int64 {_LLONG_MAX = 0x7FFFFFFFFFFFFFFF,_ULLONG_MAX = 0xFFFFFFFFFFFFFFFF,};
enum MACRO__LO {_LO = 2,_PU = 16,_SP = 64,};
enum MACRO__LOCK {_LOCK_LOCALE = 0,_LOCK_MALLOC = 1,_LOCK_STREAM = 2,_LOCK_DEBUG = 3,};
enum MACRO__M {_M_COLLATE = 1,_M_CTYPE = 2,_M_MONETARY = 4,_M_NUMERIC = 8,_M_TIME = 16,_M_MESSAGES = 32,_M_ALL = 63,};
enum MACRO__MAX {_MAX_PATH = 260,_MAX_DRIVE = 3,_MAX_DIR = 256,_MAX_FNAME = 256,_MAX_EXT = 256,};
enum MACRO__MAX_BLOCKS {_MAX_BLOCKS = 5,};
enum MACRO__MAX_ENV {_MAX_ENV = 32767,};
enum MACRO__MAX_EXP {_MAX_EXP_DIG = 8,_MAX_INT_DIG = 32,_MAX_SIG_DIG = 36,};
enum MACRO__MAX_LOCK {_MAX_LOCK = 4,};
enum MACRO__MAX_WAIT {_MAX_WAIT_MALLOC_CRT = 60000,};
enum MACRO__MB {_MB_CP_SBCS = 0,_MB_CP_OEM = -2,_MB_CP_ANSI = -3,_MB_CP_LOCALE = -4,};
enum MACRO__MBC {_MBC_SINGLE = 0,_MBC_LEAD = 1,_MBC_TRAIL = 2,_MBC_ILLEGAL = -1,};
enum MACRO__MCW {_MCW_EM = 0x8001F,};
enum MACRO__MCW_DN {_MCW_DN = 0x3000000,};
enum MACRO__MCW_IC {_MCW_IC = 0x40000,};
enum MACRO__MCW_PC {_MCW_PC = 0x30000,};
enum MACRO__MCW_RC {_MCW_RC = 0x300,};
enum MACRO__MM {_MM_HINT_T0 = 1,_MM_HINT_T1 = 2,_MM_HINT_T2 = 3,_MM_HINT_NTA = 0,_MM_EXCEPT_MASK = 63,_MM_EXCEPT_INVALID = 1,_MM_EXCEPT_DENORM = 2,_MM_EXCEPT_DIV_ZERO = 4,_MM_EXCEPT_OVERFLOW = 8,_MM_EXCEPT_UNDERFLOW = 16,_MM_EXCEPT_INEXACT = 32,_MM_MASK_MASK = 8064,_MM_MASK_INVALID = 128,_MM_MASK_DENORM = 256,_MM_MASK_DIV_ZERO = 512,_MM_MASK_OVERFLOW = 1024,_MM_MASK_UNDERFLOW = 2048,_MM_MASK_INEXACT = 4096,_MM_ROUND_MASK = 24576,_MM_ROUND_NEAREST = 0,_MM_ROUND_DOWN = 8192,_MM_ROUND_UP = 16384,_MM_ROUND_TOWARD_ZERO = 24576,_MM_FLUSH_ZERO_MASK = 32768,_MM_FLUSH_ZERO_ON = 32768,_MM_FLUSH_ZERO_OFF = 0,};
enum MACRO__MM_DENORMALS {_MM_DENORMALS_ZERO_MASK = 0x40,_MM_DENORMALS_ZERO_ON = 0x40,_MM_DENORMALS_ZERO_OFF = 0x0,_MM_FROUND_TO_NEAREST_INT = 0x0,_MM_FROUND_TO_NEG_INF = 0x1,_MM_FROUND_TO_POS_INF = 0x2,_MM_FROUND_TO_ZERO = 0x3,_MM_FROUND_CUR_DIRECTION = 0x4,_MM_FROUND_RAISE_EXC = 0x0,_MM_FROUND_NO_EXC = 0x8,_MM_FROUND_NINT = 0x0,_MM_FROUND_FLOOR = 0x1,_MM_FROUND_CEIL = 0x2,_MM_FROUND_TRUNC = 0x3,_MM_FROUND_RINT = 0x4,_MM_FROUND_NEARBYINT = 0xC,};
enum MACRO__MM_PCOMCTRL {_MM_PCOMCTRL_LT = 0,_MM_PCOMCTRL_LE = 1,_MM_PCOMCTRL_GT = 2,_MM_PCOMCTRL_GE = 3,_MM_PCOMCTRL_EQ = 4,_MM_PCOMCTRL_NEQ = 5,_MM_PCOMCTRL_FALSE = 6,_MM_PCOMCTRL_TRUE = 7,_MM_PERMUTE2_COPY = 0,_MM_PERMUTE2_ZEROIF1 = 2,_MM_PERMUTE2_ZEROIF0 = 3,};
enum MACRO__MS {_MS = 0x1,_MP = 0x2,_M1 = 0x4,_M2 = 0x8,_SBUP = 0x10,_SBLOW = 0x20,};
enum MACRO__MS_32 {_MS_32 = 1,_MS_64 = 0,};
enum MACRO__MULTI {_MULTI_THREAD = 1,};
enum MACRO__NCAT {_NCAT = 7,};
enum MACRO__NLSCMPERROR {_NLSCMPERROR = 2147483647,};
enum MACRO__NO {_NO_LOCALES = 0,};
enum MACRO__NSTREAM {_NSTREAM_ = 512,};
enum MACRO__O {_O_RDONLY = 0x0,_O_WRONLY = 0x1,_O_RDWR = 0x2,_O_APPEND = 0x8,_O_CREAT = 0x100,_O_TRUNC = 0x200,_O_EXCL = 0x400,_O_TEXT = 0x4000,_O_BINARY = 0x8000,_O_WTEXT = 0x10000,_O_U16TEXT = 0x20000,_O_U8TEXT = 0x40000,_O_RAW = 0x8000,_O_NOINHERIT = 0x80,_O_TEMPORARY = 0x40,_O_SHORT_LIVED = 0x1000,_O_OBTAIN_DIR = 0x2000,_O_SEQUENTIAL = 0x20,_O_RANDOM = 0x10,};
enum MACRO__OLD {_OLD_P_OVERLAY = 2,};
enum MACRO__OUT {_OUT_TO_DEFAULT = 0,_OUT_TO_STDERR = 1,_OUT_TO_MSGBOX = 2,};
enum MACRO__OVERFLOW {_OVERFLOW = 3,_UNDERFLOW = 4,};
enum MACRO__P {_P_WAIT = 0,_P_NOWAIT = 1,};
enum MACRO__PC {_PC_64 = 0x0,_PC_53 = 0x10000,_PC_24 = 0x20000,};
enum MACRO__PLOSS {_PLOSS = 6,};
enum MACRO__P_NOWAITO {_P_NOWAITO = 3,_P_DETACH = 4,_P_OVERLAY = 2,};
enum MACRO__RC {_RC_NEAR = 0x0,_RC_DOWN = 0x100,_RC_UP = 0x200,_RC_CHOP = 0x300,};
enum MACRO__REPORT {_REPORT_ERRMODE = 3,};
enum MACRO__RTC {_RTC_ERRTYPE_IGNORE = -1,_RTC_ERRTYPE_ASK = -2,};
enum MACRO__S {_S_IFMT = 0xF000,_S_IFDIR = 0x4000,_S_IFCHR = 0x2000,_S_IFIFO = 0x1000,_S_IFREG = 0x8000,_S_IREAD = 0x100,_S_IWRITE = 0x80,_S_IEXEC = 0x40,};
enum MACRO__SAL {_SAL_VERSION = 20,};
enum MACRO__SECURE {_SECURE_SCL = 0,};
enum MACRO__SECURECRT {_SECURECRT_FILL_BUFFER_PATTERN = 0xFE,};
enum MACRO__SECURE_SCL {_SECURE_SCL_DEPRECATE = 1,};
enum MACRO__SH {_SH_DENYRW = 0x10,_SH_DENYWR = 0x20,_SH_DENYRD = 0x30,_SH_DENYNO = 0x40,_SH_SECURE = 0x80,};
enum MACRO__SIDD {_SIDD_UBYTE_OPS = 0x0,_SIDD_UWORD_OPS = 0x1,_SIDD_SBYTE_OPS = 0x2,_SIDD_SWORD_OPS = 0x3,_SIDD_CMP_EQUAL_ANY = 0x0,_SIDD_CMP_RANGES = 0x4,_SIDD_CMP_EQUAL_EACH = 0x8,_SIDD_CMP_EQUAL_ORDERED = 0xC,_SIDD_POSITIVE_POLARITY = 0x0,_SIDD_NEGATIVE_POLARITY = 0x10,_SIDD_MASKED_POSITIVE_POLARITY = 0x20,_SIDD_MASKED_NEGATIVE_POLARITY = 0x30,_SIDD_LEAST_SIGNIFICANT = 0x0,_SIDD_MOST_SIGNIFICANT = 0x40,_SIDD_BIT_MASK = 0x0,_SIDD_UNIT_MASK = 0x40,};
enum MACRO__SW {_SW_INEXACT = 0x1,_SW_UNDERFLOW = 0x2,_SW_OVERFLOW = 0x4,_SW_ZERODIVIDE = 0x8,_SW_INVALID = 0x10,_SW_DENORMAL = 0x80000,};
enum MACRO__SW_UNEMULATED {_SW_UNEMULATED = 0x40,_SW_SQRTNEG = 0x80,_SW_STACKOVERFLOW = 0x200,_SW_STACKUNDERFLOW = 0x400,};
enum MACRO__SYS {_SYS_OPEN = 20,};
enum MACRO__TEOF {_TEOF = -1,};
enum MACRO__TLOSS {_TLOSS = 5,};
enum MACRO__TMP {_TMP_MAX_S = 2147483647,};
enum MACRO__TRUNCATE : __int64 {_TRUNCATE = 4294967295,};
enum MACRO__TWO {_TWO_DIGIT_EXPONENT = 0x1,};
enum MACRO__UI32 {_UI32_MAX = 0xFFFFFFFF,};
enum MACRO__UI64 : __int64 {_UI64_MAX = 0xFFFFFFFFFFFFFFFF,RSIZE_MAX = 0x7FFFFFFFFFFFFFFF,};
enum MACRO__UP {_UP = 1,_XD = 128,};
enum MACRO__UPPER {_UPPER = 0x1,_LOWER = 0x2,_DIGIT = 0x4,_SPACE = 0x8,_PUNCT = 0x10,_CONTROL = 0x20,_BLANK = 0x40,_HEX = 0x80,_LEADBYTE = 0x8000,};
enum MACRO__USE {_USE_DECLSPECS_FOR_SAL = 0,_USE_ATTRIBUTES_FOR_SAL = 0,};
enum MACRO__VC {_VC_CRT_MAJOR_VERSION = 11,_VC_CRT_MINOR_VERSION = 0,_VC_CRT_BUILD_VERSION = 50727,_VC_CRT_RBUILD_VERSION = 1,};
enum MACRO__WAIT {_WAIT_CHILD = 0,_WAIT_GRANDCHILD = 1,};
enum MACRO__WCHAR {_WCHAR_T_SIZE = 2,_SHORT_SIZE = 2,_INT_SIZE = 4,_LONG_SIZE = 4,_LONGLONG_SIZE = 8,_ADDR_SIZE = 4,};
enum MACRO__WIN32 {_WIN32_C_LIB = 1,};
enum MACRO__WRITE {_WRITE_ABORT_MSG = 0x1,};
enum MACRO__X {_X_ALL = 0,_X_COLLATE = 1,_X_CTYPE = 2,_X_MONETARY = 3,_X_NUMERIC = 4,_X_TIME = 5,_X_MAX = 5,_X_MESSAGES = 6,};
enum MACRO__XABORT {_XABORT_EXPLICIT = 1,_XABORT_RETRY = 2,_XABORT_CONFLICT = 4,_XABORT_CAPACITY = 8,_XABORT_DEBUG = 16,_XABORT_NESTED = 32,};
enum MACRO__XB {_XB = 0x0,_XA = 0x100,};
enum MACRO__XBEGIN {_XBEGIN_STARTED = -1,};
enum MACRO__XCR {_XCR_XFEATURE_ENABLED_MASK = 0,};
enum MACRO__XS {_XS = 0x0,_BB = 0x20,};
enum MACRO___GOT {__GOT_SECURE_LIB__ = 200411,};
enum MACRO___STDC {__STDC_SECURE_LIB__ = 200411,};
enum MACRO___STDC_WANT {__STDC_WANT_SECURE_LIB__ = 1,};
typedef void (__cdecl *POGOAUTOSWEEPPROCA)(const char *);
typedef void (__cdecl *POGOAUTOSWEEPPROCW)(const wchar_t *);
typedef char TCHAR;
typedef _Atomic_integral_t _Atomic_counter_t;
typedef int _Atomic_flag_t;
typedef _Uint4_t _Atomic_integral_t;
typedef struct $72295A7541EC936D47FC3642EE72298B _BCD80;
struct _CONTEXT;
typedef int (__cdecl *_CRT_ALLOC_HOOK)(int, void *, size_t, int, int, const unsigned __int8 *, int);
typedef struct $BA519187DB4FB038EDB1959BB4D2DF27 _CRT_DOUBLE;
typedef void (__cdecl *_CRT_DUMP_CLIENT)(void *, size_t);
typedef struct $E6A349E6C594207448DC3F8A57F3A91C _CRT_FLOAT;
typedef int (__cdecl *_CRT_REPORT_HOOK)(int, char *, int *);
typedef int (__cdecl *_CRT_REPORT_HOOKW)(int, wchar_t *, int *);
struct _Collvec {unsigned int _Page;wchar_t *_LocaleName;};
struct _CrtMemBlockHeader;
struct _CrtMemState {struct _CrtMemBlockHeader *pBlockHeader;size_t lCounts[5];size_t lSizes[5];size_t lHighWaterCount;size_t lTotalCount;};
struct _Ctypevec {unsigned int _Page;const __int16 *_Table;int _Delfl;wchar_t *_LocaleName;};
struct _Cvtvec {unsigned int _Page;unsigned int _Mbcurmax;int _Isclocale;unsigned __int8 _Isleadbyte[32];};
typedef union $D91DE99308EDB4B15B954CC4B13FA8FA _Dconst;
enum _EXCEPTION_DISPOSITION {ExceptionContinueExecution = 0x0,ExceptionContinueSearch = 0x1,ExceptionNestedException = 0x2,ExceptionCollidedUnwind = 0x3,};
struct _EXCEPTION_POINTERS;
struct _EXCEPTION_RECORD;
typedef struct $8E0937B200DCBA03D39E01164C2A4D0D _FP128;
typedef float _FP32;
typedef double _FP64;
typedef struct $72295A7541EC936D47FC3642EE72298B _FP80;
typedef enum $0C0D8E877CDAA32B9F529E7264818D98 _FPIEEE_COMPARE_RESULT;
typedef struct $0B8D1429C3827E0DB460E98487EB6908 _FPIEEE_EXCEPTION_FLAGS;
typedef enum $239F13ABFE0DEB25C9BEF2C1826A55A5 _FPIEEE_FORMAT;
typedef enum $EBF8251B43E7412EBBCF0A9FFEA6D7A7 _FPIEEE_PRECISION;
typedef struct $271E49C86C8EFA0B647D87A58CF03284 _FPIEEE_RECORD;
typedef enum $0CDD13AED9949118DD70163834A3A235 _FPIEEE_ROUNDING_MODE;
typedef struct $798F2A0931AE69495F6CF5BE64E576B5 _FPIEEE_VALUE;
typedef struct $7007A5D07675D2D320A62125AF136FB2 _FPQ64;
typedef enum $D7F48ACA8F7E5F151D30CF090E11B572 _FP_OPERATION_CODE;
typedef struct _heapinfo _HEAPINFO;
typedef void *_HFILE;
typedef __int16 _I16;
typedef int _I32;
typedef struct $1CF8D236196540158D67A26DAC991F28 _I64;
typedef struct __JUMP_BUFFER _JUMP_BUFFER;
typedef struct $6D7329FAD13C403F17A910B84CCFB7BF _LDBL12;
typedef struct $AD8E08CFADC045292413D8E747DD5ED4 _LDOUBLE;
typedef struct $2AE221845231FFCECC219BE7F7049133 _LONGDOUBLE;
typedef __int64 _Longlong;
typedef int _Mbstatet;
typedef struct $271E49C86C8EFA0B647D87A58CF03284 *_PFPIEEE_RECORD;
typedef __int64 _Q64;
struct _RTC_ALLOCA_NODE {__int32 guard1;struct _RTC_ALLOCA_NODE *next;__int32 dummypad;size_t allocaSize;__int32 dummypad2;__int32 guard2[3];};
enum _RTC_ErrorNumber {_RTC_CHKSTK = 0x0,_RTC_CVRT_LOSS_INFO = 0x1,_RTC_CORRUPT_STACK = 0x2,_RTC_UNINIT_LOCAL_USE = 0x3,_RTC_CORRUPTED_ALLOCA = 0x4,_RTC_ILLEGAL = 0x5,};
typedef int (*_RTC_error_fn)(int, const char *, int, const char *, const char *, ...);
typedef int (*_RTC_error_fnW)(int, const wchar_t *, int, const wchar_t *, const wchar_t *, ...);
struct _RTC_framedesc {int varCount;_RTC_vardesc *variables;};
struct _RTC_vardesc {int addr;int size;char *name;};
typedef char _TCHAR;
typedef int _TINT;
typedef signed __int8 _TSCHAR;
typedef unsigned __int8 _TUCHAR;
typedef char _TXCHAR;
typedef unsigned __int16 _U16;
typedef unsigned int _U32;
typedef struct $1CF8D236196540158D67A26DAC991F28 _U64;
typedef unsigned __int64 _ULonglong;
typedef unsigned int _Uint32t;
typedef _Uint32t _Uint4_t;
typedef wchar_t _Wint_t;
struct __JUMP_BUFFER {unsigned int Ebp;unsigned int Ebx;unsigned int Edi;unsigned int Esi;unsigned int Esp;unsigned int Eip;unsigned int Registration;unsigned int TryLevel;unsigned int Cookie;unsigned int UnwindFunc;unsigned int UnwindData[6];};
struct __finddata64_t {unsigned int attrib;__time64_t time_create;__time64_t time_access;__time64_t time_write;__int64 size;char name[260];};
struct __lc_time_data;
union __declspec(align(16)) __m128 {float m128_f32[4];unsigned __int64 m128_u64[2];__int8 m128_i8[16];__int16 m128_i16[8];__int32 m128_i32[4];__int64 m128_i64[2];unsigned __int8 m128_u8[16];unsigned __int16 m128_u16[8];unsigned __int32 m128_u32[4];};
struct __declspec(align(16)) __m128d {double m128d_f64[2];};
union __declspec(align(16)) __m128i {__int8 m128i_i8[16];__int16 m128i_i16[8];__int32 m128i_i32[4];__int64 m128i_i64[2];unsigned __int8 m128i_u8[16];unsigned __int16 m128i_u16[8];unsigned __int32 m128i_u32[4];unsigned __int64 m128i_u64[2];};
union __declspec(align(32)) __m256 {float m256_f32[8];};
struct __declspec(align(32)) __m256d {double m256d_f64[4];};
union __declspec(align(32)) __m256i {__int8 m256i_i8[32];__int16 m256i_i16[16];__int32 m256i_i32[8];__int64 m256i_i64[4];unsigned __int8 m256i_u8[32];unsigned __int16 m256i_u16[16];unsigned __int32 m256i_u32[8];unsigned __int64 m256i_u64[4];};
union __declspec(align(8)) __m64 {unsigned __int64 m64_u64;float m64_f32[2];__int8 m64_i8[8];__int16 m64_i16[4];__int32 m64_i32[2];__int64 m64_i64;unsigned __int8 m64_u8[8];unsigned __int16 m64_u16[4];unsigned __int32 m64_u32[2];};
typedef char __static_assert_t[1];
typedef int __time32_t;
typedef __int64 __time64_t;
struct __timeb32 {__time32_t time;unsigned __int16 millitm;__int16 timezone;__int16 dstflag;};
struct __timeb64 {__time64_t time;unsigned __int16 millitm;__int16 timezone;__int16 dstflag;};
struct __utimbuf32 {__time32_t actime;__time32_t modtime;};
struct __utimbuf64 {__time64_t actime;__time64_t modtime;};
struct _complex {double x;double y;};
typedef unsigned int _dev_t;
struct _diskfree_t {unsigned int total_clusters;unsigned int avail_clusters;unsigned int sectors_per_cluster;unsigned int bytes_per_sector;};
struct _div_t {int quot;int rem;};
struct _exception {int type;char *name;double arg1;double arg2;double retval;};
struct _finddata32_t {unsigned int attrib;__time32_t time_create;__time32_t time_access;__time32_t time_write;_fsize_t size;char name[260];};
struct _finddata32i64_t {unsigned int attrib;__time32_t time_create;__time32_t time_access;__time32_t time_write;__int64 size;char name[260];};
struct _finddata64i32_t {unsigned int attrib;__time64_t time_create;__time64_t time_access;__time64_t time_write;_fsize_t size;char name[260];};
typedef unsigned int _fsize_t;
struct _heapinfo {int *_pentry;size_t _size;int _useflag;};
typedef unsigned __int16 _ino_t;
typedef void (__cdecl *_invalid_parameter_handler)(const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t);
struct _iobuf {char *_ptr;int _cnt;char *_base;int _flag;int _file;int _charbuf;int _bufsiz;char *_tmpfname;};
struct _ldiv_t {int quot;int rem;};
struct _lldiv_t {__int64 quot;__int64 rem;};
typedef struct localeinfo_struct *_locale_t;
typedef struct localeinfo_struct _locale_tstruct;
typedef int _off_t;
typedef int (__cdecl *_onexit_t)();
typedef void (__cdecl *_purecall_handler)();
struct _stat32 {_dev_t st_dev;_ino_t st_ino;unsigned __int16 st_mode;__int16 st_nlink;__int16 st_uid;__int16 st_gid;_dev_t st_rdev;_off_t st_size;__time32_t st_atime;__time32_t st_mtime;__time32_t st_ctime;};
struct _stat32i64 {_dev_t st_dev;_ino_t st_ino;unsigned __int16 st_mode;__int16 st_nlink;__int16 st_uid;__int16 st_gid;_dev_t st_rdev;__int64 st_size;__time32_t st_atime;__time32_t st_mtime;__time32_t st_ctime;};
struct _stat64 {_dev_t st_dev;_ino_t st_ino;unsigned __int16 st_mode;__int16 st_nlink;__int16 st_uid;__int16 st_gid;_dev_t st_rdev;__int64 st_size;__time64_t st_atime;__time64_t st_mtime;__time64_t st_ctime;};
struct _stat64i32 {_dev_t st_dev;_ino_t st_ino;unsigned __int16 st_mode;__int16 st_nlink;__int16 st_uid;__int16 st_gid;_dev_t st_rdev;_off_t st_size;__time64_t st_atime;__time64_t st_mtime;__time64_t st_ctime;};
struct _utimbuf {time_t actime;time_t modtime;};
struct _wfinddata32_t {unsigned int attrib;__time32_t time_create;__time32_t time_access;__time32_t time_write;_fsize_t size;wchar_t name[260];};
struct _wfinddata32i64_t {unsigned int attrib;__time32_t time_create;__time32_t time_access;__time32_t time_write;__int64 size;wchar_t name[260];};
struct _wfinddata64_t {unsigned int attrib;__time64_t time_create;__time64_t time_access;__time64_t time_write;__int64 size;wchar_t name[260];};
struct _wfinddata64i32_t {unsigned int attrib;__time64_t time_create;__time64_t time_access;__time64_t time_write;_fsize_t size;wchar_t name[260];};
typedef unsigned __int16 char16_t;
typedef unsigned int char32_t;
typedef int clock_t;
typedef unsigned int dev_t;
typedef struct _div_t div_t;
typedef int errno_t;
typedef __int64 fpos_t;
typedef unsigned __int16 ino_t;
typedef __int16 int16_t;
typedef int int32_t;
typedef __int64 int64_t;
typedef signed __int8 int8_t;
typedef int int_fast16_t;
typedef int int_fast32_t;
typedef __int64 int_fast64_t;
typedef signed __int8 int_fast8_t;
typedef __int16 int_least16_t;
typedef int int_least32_t;
typedef __int64 int_least64_t;
typedef signed __int8 int_least8_t;
typedef __int64 intmax_t;
typedef int intptr_t;
typedef int jmp_buf[16];
struct lconv {char *decimal_point;char *thousands_sep;char *grouping;char *int_curr_symbol;char *currency_symbol;char *mon_decimal_point;char *mon_thousands_sep;char *mon_grouping;char *positive_sign;char *negative_sign;char int_frac_digits;char frac_digits;char p_cs_precedes;char p_sep_by_space;char n_cs_precedes;char n_sep_by_space;char p_sign_posn;char n_sign_posn;wchar_t *_W_decimal_point;wchar_t *_W_thousands_sep;wchar_t *_W_int_curr_symbol;wchar_t *_W_currency_symbol;wchar_t *_W_mon_decimal_point;wchar_t *_W_mon_thousands_sep;wchar_t *_W_positive_sign;wchar_t *_W_negative_sign;};
typedef struct _ldiv_t ldiv_t;
typedef struct _lldiv_t lldiv_t;
struct localeinfo_struct {pthreadlocinfo locinfo;pthreadmbcinfo mbcinfo;};
struct localerefcount {char *locale;wchar_t *wlocale;int *refcount;int *wrefcount;};
typedef struct localerefcount locrefcount;
typedef int mbstate_t;
enum memory_order {memory_order_relaxed = 0x0,memory_order_consume = 0x1,memory_order_acquire = 0x2,memory_order_release = 0x3,memory_order_acq_rel = 0x4,memory_order_seq_cst = 0x5,};
typedef int off_t;
typedef void *omp_lock_t;
typedef void *omp_nest_lock_t;
typedef struct threadlocaleinfostruct *pthreadlocinfo;
typedef struct threadmbcinfostruct *pthreadmbcinfo;
typedef int ptrdiff_t;
typedef size_t rsize_t;
typedef int sig_atomic_t;
typedef unsigned int size_t;
struct stat {_dev_t st_dev;_ino_t st_ino;unsigned __int16 st_mode;__int16 st_nlink;__int16 st_uid;__int16 st_gid;_dev_t st_rdev;_off_t st_size;time_t st_atime;time_t st_mtime;time_t st_ctime;};
struct threadlocaleinfostruct {int refcount;unsigned int lc_codepage;unsigned int lc_collate_cp;unsigned int lc_time_cp;locrefcount lc_category[6];int lc_clike;int mb_cur_max;int *lconv_intl_refcount;int *lconv_num_refcount;int *lconv_mon_refcount;struct lconv *lconv;int *ctype1_refcount;unsigned __int16 *ctype1;const unsigned __int16 *pctype;const unsigned __int8 *pclmap;const unsigned __int8 *pcumap;struct __lc_time_data *lc_time_curr;wchar_t *locale_name[6];};
typedef struct threadlocaleinfostruct threadlocinfo;
struct threadmbcinfostruct;
typedef __time64_t time_t;
struct timeb {time_t time;unsigned __int16 millitm;__int16 timezone;__int16 dstflag;};
struct tm {int tm_sec;int tm_min;int tm_hour;int tm_mday;int tm_mon;int tm_year;int tm_wday;int tm_yday;int tm_isdst;};
typedef unsigned __int16 uint16_t;
typedef unsigned int uint32_t;
typedef unsigned __int64 uint64_t;
typedef unsigned __int8 uint8_t;
typedef unsigned int uint_fast16_t;
typedef unsigned int uint_fast32_t;
typedef unsigned __int64 uint_fast64_t;
typedef unsigned __int8 uint_fast8_t;
typedef unsigned __int16 uint_least16_t;
typedef unsigned int uint_least32_t;
typedef unsigned __int64 uint_least64_t;
typedef unsigned __int8 uint_least8_t;
typedef unsigned __int64 uintmax_t;
typedef unsigned int uintptr_t;
struct utimbuf {time_t actime;time_t modtime;};
struct utimbuf32 {__time32_t actime;__time32_t modtime;};
typedef char *va_list;
typedef unsigned __int16 wchar_t;
typedef wchar_t wctrans_t;
typedef unsigned __int16 wctype_t;
typedef unsigned __int16 wint_t;

void __fastcall _RTC_AllocaHelper(_RTC_ALLOCA_NODE *PAllocaBase, size_t CbSize, _RTC_ALLOCA_NODE **PAllocaInfoList);
void __fastcall _RTC_CheckStackVars(void *Esp, _RTC_framedesc *Fd);
void __fastcall _RTC_CheckStackVars2(void *Esp, _RTC_framedesc *Fd, _RTC_ALLOCA_NODE *AllocaList);
char __fastcall _RTC_Check_2_to_1(__int16 Src);
char __fastcall _RTC_Check_4_to_1(int Src);
__int16 __fastcall _RTC_Check_4_to_2(int Src);
char __fastcall _RTC_Check_8_to_1(__int64 Src);
__int16 __fastcall _RTC_Check_8_to_2(__int64 Src);
int __fastcall _RTC_Check_8_to_4(__int64 Src);
void __fastcall __security_check_cookie(uintptr_t StackCookie);
MACRO_BUFSIZ BUFSIZ;
MACRO_CHAR CHAR_BIT;
MACRO_CHAR_MIN CHAR_MAX;
MACRO_CHAR_MIN CHAR_MIN;
MACRO_CLK CLK_TCK;
MACRO_CLOCKS CLOCKS_PER_SEC;
MACRO_CW CW_DEFAULT;
MACRO_DBL DBL_DIG;
MACRO_DBL DBL_MANT_DIG;
MACRO_DBL DBL_MAX_10_EXP;
MACRO_DBL DBL_MAX_EXP;
MACRO_DBL DBL_MIN_10_EXP;
MACRO_DBL DBL_MIN_EXP;
MACRO_DBL_RADIX DBL_RADIX;
MACRO_DBL_RADIX DBL_ROUNDS;
MACRO_DOMAIN DOMAIN;
MACRO_ERRNO E2BIG;
MACRO_ERRNO EACCES;
MACRO_ERRNO EADDRINUSE;
MACRO_ERRNO EADDRNOTAVAIL;
MACRO_ERRNO EAFNOSUPPORT;
MACRO_ERRNO EAGAIN;
MACRO_ERRNO EALREADY;
MACRO_ERRNO EBADF;
MACRO_ERRNO EBADMSG;
MACRO_ERRNO EBUSY;
MACRO_ERRNO ECANCELED;
MACRO_ERRNO ECHILD;
MACRO_ERRNO ECONNABORTED;
MACRO_ERRNO ECONNREFUSED;
MACRO_ERRNO ECONNRESET;
MACRO_ERRNO EDEADLK;
MACRO_ERRNO EDEADLOCK;
MACRO_ERRNO EDESTADDRREQ;
MACRO_ERRNO EDOM;
MACRO_ERRNO EEXIST;
MACRO_ERRNO EFAULT;
MACRO_ERRNO EFBIG;
MACRO_ERRNO EHOSTUNREACH;
MACRO_ERRNO EIDRM;
MACRO_ERRNO EILSEQ;
MACRO_ERRNO EINPROGRESS;
MACRO_ERRNO EINTR;
MACRO_ERRNO EINVAL;
MACRO_ERRNO EIO;
MACRO_ERRNO EISCONN;
MACRO_ERRNO EISDIR;
MACRO_ERRNO ELOOP;
MACRO_ERRNO EMFILE;
MACRO_ERRNO EMLINK;
MACRO_ERRNO EMSGSIZE;
MACRO_EM EM_AMBIGUIOUS;
MACRO_EM EM_AMBIGUOUS;
MACRO_EM_INVALID EM_DENORMAL;
MACRO_EM_INVALID EM_INEXACT;
MACRO_EM_INVALID EM_INVALID;
MACRO_EM_INVALID EM_OVERFLOW;
MACRO_EM_INVALID EM_UNDERFLOW;
MACRO_EM_INVALID EM_ZERODIVIDE;
MACRO_ERRNO ENAMETOOLONG;
MACRO_ERRNO ENETDOWN;
MACRO_ERRNO ENETRESET;
MACRO_ERRNO ENETUNREACH;
MACRO_ERRNO ENFILE;
MACRO_ERRNO ENOBUFS;
MACRO_ERRNO ENODATA;
MACRO_ERRNO ENODEV;
MACRO_ERRNO ENOENT;
MACRO_ERRNO ENOEXEC;
MACRO_ERRNO ENOLCK;
MACRO_ERRNO ENOLINK;
MACRO_ERRNO ENOMEM;
MACRO_ERRNO ENOMSG;
MACRO_ERRNO ENOPROTOOPT;
MACRO_ERRNO ENOSPC;
MACRO_ERRNO ENOSR;
MACRO_ERRNO ENOSTR;
MACRO_ERRNO ENOSYS;
MACRO_ERRNO ENOTCONN;
MACRO_ERRNO ENOTDIR;
MACRO_ERRNO ENOTEMPTY;
MACRO_ERRNO ENOTRECOVERABLE;
MACRO_ERRNO ENOTSOCK;
MACRO_ERRNO ENOTSUP;
MACRO_ERRNO ENOTTY;
MACRO_ERRNO ENXIO;
MACRO_EOF EOF;
MACRO_ERRNO EOPNOTSUPP;
MACRO_ERRNO EOTHER;
MACRO_ERRNO EOVERFLOW;
MACRO_ERRNO EOWNERDEAD;
MACRO_ERRNO EPERM;
MACRO_ERRNO EPIPE;
MACRO_ERRNO EPROTO;
MACRO_ERRNO EPROTONOSUPPORT;
MACRO_ERRNO EPROTOTYPE;
MACRO_ERRNO ERANGE;
MACRO_ERRNO EROFS;
MACRO_ERRNO ESPIPE;
MACRO_ERRNO ESRCH;
MACRO_ERRNO ETIME;
MACRO_ERRNO ETIMEDOUT;
MACRO_ERRNO ETXTBSY;
MACRO_ERRNO EWOULDBLOCK;
MACRO_EXCEPTION EXCEPTION_CONTINUE_EXECUTION;
MACRO_EXCEPTION EXCEPTION_CONTINUE_SEARCH;
MACRO_EXCEPTION EXCEPTION_EXECUTE_HANDLER;
MACRO_ERRNO EXDEV;
MACRO_EXIT EXIT_FAILURE;
MACRO_EXIT EXIT_SUCCESS;
_EXCEPTION_DISPOSITION ExceptionCollidedUnwind;
_EXCEPTION_DISPOSITION ExceptionContinueExecution;
_EXCEPTION_DISPOSITION ExceptionContinueSearch;
_EXCEPTION_DISPOSITION ExceptionNestedException;
MACRO_FILENAME FILENAME_MAX;
MACRO_FLT FLT_DIG;
MACRO_FLT FLT_GUARD;
MACRO_FLT FLT_MANT_DIG;
MACRO_FLT FLT_MAX_10_EXP;
MACRO_FLT FLT_MAX_EXP;
MACRO_FLT FLT_MIN_10_EXP;
MACRO_FLT FLT_MIN_EXP;
MACRO_FLT FLT_NORMALIZE;
MACRO_FLT FLT_RADIX;
MACRO_FLT FLT_ROUNDS;
MACRO_FILENAME FOPEN_MAX;
MACRO_FPE FPE_DENORMAL;
MACRO_FPE FPE_EXPLICITGEN;
MACRO_FPE FPE_INEXACT;
MACRO_FPE FPE_INVALID;
MACRO_FPE FPE_OVERFLOW;
MACRO_FPE FPE_SQRTNEG;
MACRO_FPE FPE_STACKOVERFLOW;
MACRO_FPE FPE_STACKUNDERFLOW;
MACRO_FPE FPE_UNDERFLOW;
MACRO_FPE FPE_UNEMULATED;
MACRO_FPE FPE_ZERODIVIDE;
MACRO_IC IC_AFFINE;
MACRO_IC IC_PROJECTIVE;
MACRO_MAX INT32_MAX;
MACRO_MIN INT32_MIN;
MACRO_MAX INT64_MAX;
MACRO_MIN INT64_MIN;
MACRO_INTMAX INTMAX_MAX;
MACRO_INTMAX INTMAX_MIN;
MACRO_INTPTR INTPTR_MAX;
MACRO_INTPTR INTPTR_MIN;
MACRO_INT_FAST16 INT_FAST16_MAX;
MACRO_INT_FAST16 INT_FAST16_MIN;
MACRO_INT_FAST16 INT_FAST32_MAX;
MACRO_INT_FAST16 INT_FAST32_MIN;
MACRO_INT_FAST16 INT_FAST64_MAX;
MACRO_INT_FAST16 INT_FAST64_MIN;
MACRO_INT INT_LEAST32_MAX;
MACRO_INT INT_LEAST32_MIN;
MACRO_INT INT_LEAST64_MAX;
MACRO_INT INT_LEAST64_MIN;
MACRO_INT_MIN INT_MAX;
MACRO_INT_MIN INT_MIN;
MACRO_LC LC_ALL;
MACRO_LC LC_COLLATE;
MACRO_LC LC_CTYPE;
MACRO_LC LC_MAX;
MACRO_LC LC_MIN;
MACRO_LC LC_MONETARY;
MACRO_LC LC_NUMERIC;
MACRO_LC LC_TIME;
MACRO_LDBL LDBL_DIG;
MACRO_LDBL LDBL_MANT_DIG;
MACRO_LDBL LDBL_MAX_10_EXP;
MACRO_LDBL LDBL_MAX_EXP;
MACRO_LDBL LDBL_MIN_10_EXP;
MACRO_LDBL LDBL_MIN_EXP;
MACRO_LDBL_RADIX LDBL_RADIX;
MACRO_LDBL_RADIX LDBL_ROUNDS;
MACRO_LK LK_LOCK;
MACRO_LK LK_NBLCK;
MACRO_LK LK_NBRLCK;
MACRO_LK LK_RLCK;
MACRO_LK LK_UNLCK;
MACRO_ULONG LLONG_MAX;
MACRO_LLONG LLONG_MIN;
MACRO_LONG LONG_MAX;
MACRO_LONG LONG_MIN;
MACRO_MB MB_LEN_MAX;
MACRO_MCW MCW_EM;
MACRO_MCW_IC MCW_IC;
MACRO_MCW_PC MCW_PC;
MACRO_MCW_RC MCW_RC;
MACRO_NSIG NSIG;
MACRO_NULL NULL;
MACRO_OLD OLD_P_OVERLAY;
MACRO_OVERFLOW OVERFLOW;
MACRO_O O_APPEND;
MACRO_O O_BINARY;
MACRO_O O_CREAT;
MACRO_O O_EXCL;
MACRO_O O_NOINHERIT;
MACRO_O O_RANDOM;
MACRO_O O_RAW;
MACRO_O O_RDONLY;
MACRO_O O_RDWR;
MACRO_O O_SEQUENTIAL;
MACRO_O O_TEMPORARY;
MACRO_O O_TEXT;
MACRO_O O_TRUNC;
MACRO_O O_WRONLY;
MACRO_PC PC_24;
MACRO_PC PC_53;
MACRO_PC PC_64;
MACRO_PLOSS PLOSS;
MACRO_PTRDIFF PTRDIFF_MAX;
MACRO_PTRDIFF PTRDIFF_MIN;
MACRO_P_NOWAITO P_DETACH;
MACRO_P P_NOWAIT;
MACRO_P_NOWAITO P_NOWAITO;
MACRO_P P_OVERLAY;
MACRO_P P_WAIT;
MACRO_RAND RAND_MAX;
MACRO_RC RC_CHOP;
MACRO_RC RC_DOWN;
MACRO_RC RC_NEAR;
MACRO_RC RC_UP;
MACRO__UI64 RSIZE_MAX;
MACRO_SCHAR SCHAR_MAX;
MACRO_SCHAR SCHAR_MIN;
MACRO_SEEK SEEK_CUR;
MACRO_SEEK SEEK_END;
MACRO_SEEK SEEK_SET;
MACRO_SHRT SHRT_MAX;
MACRO_SHRT SHRT_MIN;
MACRO_SH SH_DENYNO;
MACRO_SH SH_DENYRD;
MACRO_SH SH_DENYRW;
MACRO_SH SH_DENYWR;
MACRO_SIGNAL SIGABRT;
MACRO_SIGNAL SIGABRT_COMPAT;
MACRO_SIGNAL SIGBREAK;
MACRO_SIGNAL SIGFPE;
MACRO_SIGNAL SIGILL;
MACRO_SIGNAL SIGINT;
MACRO_SIGNAL SIGSEGV;
MACRO_SIGNAL SIGTERM;
MACRO_SIG SIG_ATOMIC_MAX;
MACRO_SIG SIG_ATOMIC_MIN;
MACRO_DOMAIN SING;
MACRO_SIZE SIZE_MAX;
MACRO_ERRNO STRUNCATE;
MACRO_SW SW_DENORMAL;
MACRO_SW SW_INEXACT;
MACRO_SW SW_INVALID;
MACRO_SW SW_OVERFLOW;
MACRO_SW SW_SQRTNEG;
MACRO_SW SW_STACKOVERFLOW;
MACRO_SW SW_STACKUNDERFLOW;
MACRO_SW SW_UNDERFLOW;
MACRO_SW SW_UNEMULATED;
MACRO_SW SW_ZERODIVIDE;
MACRO_SYS SYS_OPEN;
MACRO_S S_IEXEC;
MACRO_S S_IFCHR;
MACRO_S S_IFDIR;
MACRO_S S_IFMT;
MACRO_S S_IFREG;
MACRO_S S_IREAD;
MACRO_S S_IWRITE;
MACRO_TLOSS TLOSS;
MACRO_TMP TMP_MAX;
MACRO_UCHAR UCHAR_MAX;
MACRO_MAX UINT32_MAX;
MACRO_MAX UINT64_MAX;
MACRO_UINTMAX UINTMAX_MAX;
MACRO_UINTPTR UINTPTR_MAX;
MACRO_UINT_FAST16 UINT_FAST16_MAX;
MACRO_UINT_FAST16 UINT_FAST32_MAX;
MACRO_UINT_FAST16 UINT_FAST64_MAX;
MACRO_UINT UINT_LEAST32_MAX;
MACRO_UINT UINT_LEAST64_MAX;
MACRO_UINT_MAX UINT_MAX;
MACRO_ULLONG ULLONG_MAX;
MACRO_ULONG ULONG_MAX;
MACRO_OVERFLOW UNDERFLOW;
MACRO_USHRT USHRT_MAX;
MACRO_WAIT WAIT_CHILD;
MACRO_WAIT WAIT_GRANDCHILD;
MACRO_WCHAR WCHAR_MAX;
MACRO_WCHAR WCHAR_MIN;
MACRO_WEOF WEOF;
MACRO_WINT WINT_MAX;
MACRO_WINT WINT_MIN;
MACRO__WCHAR _ADDR_SIZE;
MACRO__ALLOCA _ALLOCA_S_HEAP_MARKER;
MACRO__ALLOCA _ALLOCA_S_MARKER_SIZE;
MACRO__ALLOCA _ALLOCA_S_STACK_MARKER;
MACRO__ALLOCA _ALLOCA_S_THRESHOLD;
MACRO__ALPHA _ALPHA;
MACRO__ARGMAX _ARGMAX;
MACRO__ARM ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE;
MACRO__ATOMIC ATOMIC_FENCE_USES_LOCK;
MACRO__ATOMIC ATOMIC_FLAG_USES_LOCK;
MACRO__ATOMIC _ATOMIC_MAXBYTES_LOCK_FREE;
MACRO__A _A_ARCH;
MACRO__A _A_HIDDEN;
MACRO__A A_NORMAL;
MACRO__A _A_RDONLY;
MACRO__A _A_SUBDIR;
MACRO__A _A_SYSTEM;
MACRO__XS _BB;
MACRO__UPPER _BLANK;
MACRO__C2 _C2;
MACRO__CALL _CALL_REPORTFAULT;
MACRO_BLOCK _CLIENT_BLOCK;
MACRO__CMP CMP_EQ_OQ;
MACRO__CMP _CMP_EQ_OS;
MACRO__CMP _CMP_EQ_UQ;
MACRO__CMP _CMP_EQ_US;
MACRO__CMP _CMP_FALSE_OQ;
MACRO__CMP _CMP_FALSE_OS;
MACRO__CMP _CMP_GE_OQ;
MACRO__CMP _CMP_GE_OS;
MACRO__CMP _CMP_GT_OQ;
MACRO__CMP _CMP_GT_OS;
MACRO__CMP _CMP_LE_OQ;
MACRO__CMP _CMP_LE_OS;
MACRO__CMP _CMP_LT_OQ;
MACRO__CMP _CMP_LT_OS;
MACRO__CMP _CMP_NEQ_OQ;
MACRO__CMP _CMP_NEQ_OS;
MACRO__CMP _CMP_NEQ_UQ;
MACRO__CMP _CMP_NEQ_US;
MACRO__CMP _CMP_NGE_UQ;
MACRO__CMP _CMP_NGE_US;
MACRO__CMP _CMP_NGT_UQ;
MACRO__CMP _CMP_NGT_US;
MACRO__CMP _CMP_NLE_UQ;
MACRO__CMP _CMP_NLE_US;
MACRO__CMP _CMP_NLT_UQ;
MACRO__CMP _CMP_NLT_US;
MACRO__CMP _CMP_ORD_Q;
MACRO__CMP _CMP_ORD_S;
MACRO__CMP _CMP_TRUE_UQ;
MACRO__CMP _CMP_TRUE_US;
MACRO__CMP _CMP_UNORD_Q;
MACRO__CMP _CMP_UNORD_S;
MACRO__CN _CN;
MACRO__COMPILER _COMPILER_TLS;
MACRO__UPPER _CONTROL;
MACRO__CPPLIB _CPPLIB_VER;
MACRO__CRTDBG_ALLOC _CRTDBG_ALLOC_MEM_DF;
MACRO__CRTDBG_ALLOC _CRTDBG_CHECK_ALWAYS_DF;
MACRO__CRTDBG_ALLOC _CRTDBG_CHECK_CRT_DF;
MACRO__CRTDBG_ALLOC CRTDBG_CHECK_DEFAULT_DF;
MACRO__CRTDBG_ALLOC _CRTDBG_CHECK_EVERY_1024_DF;
MACRO__CRTDBG_ALLOC _CRTDBG_CHECK_EVERY_128_DF;
MACRO__CRTDBG_ALLOC _CRTDBG_CHECK_EVERY_16_DF;
MACRO__CRTDBG_ALLOC _CRTDBG_DELAY_FREE_MEM_DF;
MACRO__CRTDBG _CRTDBG_FILE_STDERR;
MACRO__CRTDBG _CRTDBG_FILE_STDOUT;
MACRO__CRTDBG _CRTDBG_HFILE_ERROR;
MACRO__CRTDBG _CRTDBG_INVALID_HFILE;
MACRO__CRTDBG_ALLOC _CRTDBG_LEAK_CHECK_DF;
MACRO__CRTDBG _CRTDBG_MODE_DEBUG;
MACRO__CRTDBG _CRTDBG_MODE_FILE;
MACRO__CRTDBG _CRTDBG_MODE_WNDW;
MACRO__CRTDBG _CRTDBG_REPORT_FILE;
MACRO__CRTDBG_ALLOC _CRTDBG_REPORT_FLAG;
MACRO__CRTDBG _CRTDBG_REPORT_MODE;
MACRO__CRTDBG_ALLOC _CRTDBG_RESERVED_DF;
MACRO__CRTWRN _CRTWRN_WNUMBER__DEPRECATE_STATIC_CPPLIB;
MACRO__CRTWRN _CRTWRN_WNUMBER__NO_SPECIAL_TRANSFER;
MACRO__CRT_WARN _CRT_ASSERT;
MACRO_BLOCK _CRT_BLOCK;
MACRO__CRT_BUILD _CRT_BUILD_DESKTOP_APP;
MACRO__CRT_WARN _CRT_ERRCNT;
MACRO__CRT_WARN _CRT_ERROR;
MACRO__CRT _CRT_PACKING;
MACRO__CRT_RPTHOOK CRT_RPTHOOK_INSTALL;
MACRO__CRT_RPTHOOK _CRT_RPTHOOK_REMOVE;
MACRO__CRT_BUILD _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES;
MACRO__CRT_BUILD CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY;
MACRO__CRT_BUILD CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES;
MACRO__CRT_BUILD CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT;
MACRO__CRT_BUILD CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY;
MACRO__CRT_WARN CRT_WARN;
MACRO__CVTBUFSIZE _CVTBUFSIZE;
MACRO__CW _CW_DEFAULT;
MACRO__DBL _DBL_RADIX;
MACRO__DBL _DBL_ROUNDS;
MACRO__DENORM _DENORM;
MACRO__DI _DI;
MACRO__UPPER _DIGIT;
MACRO_PER_THREAD_LOCALE _DISABLE_PER_THREAD_LOCALE;
MACRO_PER_THREAD_LOCALE_GLOBAL _DISABLE_PER_THREAD_LOCALE_GLOBAL;
MACRO_PER_THREAD_LOCALE_NEW _DISABLE_PER_THREAD_LOCALE_NEW;
MACRO__DN _DN_FLUSH;
MACRO__DN _DN_FLUSH_OPERANDS_SAVE_RESULTS;
MACRO__DN DN_SAVE;
MACRO__DN _DN_SAVE_OPERANDS_FLUSH_RESULTS;
MACRO__DOMAIN _DOMAIN;
MACRO__EM _EM_AMBIGUIOUS;
MACRO__EM _EM_AMBIGUOUS;
MACRO__EM_INEXACT _EM_DENORMAL;
MACRO__EM_INEXACT _EM_INEXACT;
MACRO__EM_INEXACT _EM_INVALID;
MACRO__EM_INEXACT _EM_OVERFLOW;
MACRO__EM_INEXACT _EM_UNDERFLOW;
MACRO__EM_INEXACT _EM_ZERODIVIDE;
MACRO_PER_THREAD_LOCALE _ENABLE_PER_THREAD_LOCALE;
MACRO_PER_THREAD_LOCALE_GLOBAL _ENABLE_PER_THREAD_LOCALE_GLOBAL;
MACRO_PER_THREAD_LOCALE_NEW _ENABLE_PER_THREAD_LOCALE_NEW;
MACRO__FE _FE_DIVBYZERO;
MACRO__FE _FE_INEXACT;
MACRO__FE _FE_INVALID;
MACRO__FE _FE_OVERFLOW;
MACRO__FE _FE_UNDERFLOW;
MACRO__FINITE _FINITE;
MACRO__FPCLASS _FPCLASS_ND;
MACRO__FPCLASS _FPCLASS_NINF;
MACRO__FPCLASS _FPCLASS_NN;
MACRO__FPCLASS _FPCLASS_NZ;
MACRO__FPCLASS _FPCLASS_PD;
MACRO__FPCLASS _FPCLASS_PINF;
MACRO__FPCLASS _FPCLASS_PN;
MACRO__FPCLASS _FPCLASS_PZ;
MACRO__FPCLASS _FPCLASS_QNAN;
MACRO__FPCLASS _FPCLASS_SNAN;
MACRO__FPE _FPE_DENORMAL;
MACRO__FPE _FPE_EXPLICITGEN;
MACRO__FPE _FPE_INEXACT;
MACRO__FPE _FPE_INVALID;
MACRO__FPE _FPE_MULTIPLE_FAULTS;
MACRO__FPE _FPE_MULTIPLE_TRAPS;
MACRO__FPE _FPE_OVERFLOW;
MACRO__FPE _FPE_SQRTNEG;
MACRO__FPE _FPE_STACKOVERFLOW;
MACRO__FPE _FPE_STACKUNDERFLOW;
MACRO__FPE _FPE_UNDERFLOW;
MACRO__FPE _FPE_UNEMULATED;
MACRO__FPE _FPE_ZERODIVIDE;
MACRO__FREEENTRY FREEENTRY;
MACRO_BLOCK FREE_BLOCK;
$D7F48ACA8F7E5F151D30CF090E11B572 _FpCodeAcos;
$D7F48ACA8F7E5F151D30CF090E11B572 _FpCodeAdd;
$D7F48ACA8F7E5F151D30CF090E11B572 _FpCodeAsin;
$D7F48ACA8F7E5F151D30CF090E11B572 _FpCodeAtan;
$D7F48ACA8F7E5F151D30CF090E11B572 _FpCodeAtan2;
$D7F48ACA8F7E5F151D30CF090E11B572 _FpCodeCabs;
$D7F48ACA8F7E5F151D30CF090E11B572 _FpCodeCeil;
$D7F48ACA8F7E5F151D30CF090E11B572 _FpCodeCompare;
$D7F48ACA8F7E5F151D30CF090E11B572 _FpCodeConvert;
$D7F48ACA8F7E5F151D30CF090E11B572 _FpCodeConvertTrunc;
$D7F48ACA8F7E5F151D30CF090E11B572 _FpCodeCos;
$D7F48ACA8F7E5F151D30CF090E11B572 _FpCodeCosh;
$D7F48ACA8F7E5F151D30CF090E11B572 _FpCodeDivide;
$D7F48ACA8F7E5F151D30CF090E11B572 _FpCodeExp;
$D7F48ACA8F7E5F151D30CF090E11B572 _FpCodeFabs;
$D7F48ACA8F7E5F151D30CF090E11B572 _FpCodeFloor;
$D7F48ACA8F7E5F151D30CF090E11B572 _FpCodeFmax;
$D7F48ACA8F7E5F151D30CF090E11B572 _FpCodeFmin;
$D7F48ACA8F7E5F151D30CF090E11B572 _FpCodeFmod;
$D7F48ACA8F7E5F151D30CF090E11B572 _FpCodeFrexp;
$D7F48ACA8F7E5F151D30CF090E11B572 _FpCodeHypot;
$D7F48ACA8F7E5F151D30CF090E11B572 _FpCodeLdexp;
$D7F48ACA8F7E5F151D30CF090E11B572 _FpCodeLog;
$D7F48ACA8F7E5F151D30CF090E11B572 _FpCodeLog10;
$D7F48ACA8F7E5F151D30CF090E11B572 _FpCodeLogb;
$D7F48ACA8F7E5F151D30CF090E11B572 _FpCodeModf;
$D7F48ACA8F7E5F151D30CF090E11B572 _FpCodeMultiply;
$D7F48ACA8F7E5F151D30CF090E11B572 _FpCodeNegate;
$D7F48ACA8F7E5F151D30CF090E11B572 _FpCodeNextafter;
$D7F48ACA8F7E5F151D30CF090E11B572 _FpCodePow;
$D7F48ACA8F7E5F151D30CF090E11B572 _FpCodeRemainder;
$D7F48ACA8F7E5F151D30CF090E11B572 _FpCodeRound;
$D7F48ACA8F7E5F151D30CF090E11B572 _FpCodeSin;
$D7F48ACA8F7E5F151D30CF090E11B572 _FpCodeSinh;
$D7F48ACA8F7E5F151D30CF090E11B572 _FpCodeSquareRoot;
$D7F48ACA8F7E5F151D30CF090E11B572 _FpCodeSubtract;
$D7F48ACA8F7E5F151D30CF090E11B572 _FpCodeTan;
$D7F48ACA8F7E5F151D30CF090E11B572 _FpCodeTanh;
$D7F48ACA8F7E5F151D30CF090E11B572 _FpCodeTruncate;
$D7F48ACA8F7E5F151D30CF090E11B572 FpCodeUnspecified;
$D7F48ACA8F7E5F151D30CF090E11B572 _FpCodeY0;
$D7F48ACA8F7E5F151D30CF090E11B572 _FpCodeY1;
$D7F48ACA8F7E5F151D30CF090E11B572 _FpCodeYn;
$0C0D8E877CDAA32B9F529E7264818D98 FpCompareEqual;
$0C0D8E877CDAA32B9F529E7264818D98 _FpCompareGreater;
$0C0D8E877CDAA32B9F529E7264818D98 _FpCompareLess;
$0C0D8E877CDAA32B9F529E7264818D98 _FpCompareUnordered;
$239F13ABFE0DEB25C9BEF2C1826A55A5 _FpFormatBcd80;
$239F13ABFE0DEB25C9BEF2C1826A55A5 _FpFormatCompare;
$239F13ABFE0DEB25C9BEF2C1826A55A5 _FpFormatFp128;
$239F13ABFE0DEB25C9BEF2C1826A55A5 FpFormatFp32;
$239F13ABFE0DEB25C9BEF2C1826A55A5 _FpFormatFp64;
$239F13ABFE0DEB25C9BEF2C1826A55A5 _FpFormatFp80;
$239F13ABFE0DEB25C9BEF2C1826A55A5 _FpFormatI16;
$239F13ABFE0DEB25C9BEF2C1826A55A5 _FpFormatI32;
$239F13ABFE0DEB25C9BEF2C1826A55A5 _FpFormatI64;
$239F13ABFE0DEB25C9BEF2C1826A55A5 _FpFormatString;
$239F13ABFE0DEB25C9BEF2C1826A55A5 _FpFormatU16;
$239F13ABFE0DEB25C9BEF2C1826A55A5 _FpFormatU32;
$239F13ABFE0DEB25C9BEF2C1826A55A5 _FpFormatU64;
$EBF8251B43E7412EBBCF0A9FFEA6D7A7 _FpPrecision24;
$EBF8251B43E7412EBBCF0A9FFEA6D7A7 _FpPrecision53;
$EBF8251B43E7412EBBCF0A9FFEA6D7A7 FpPrecisionFull;
$0CDD13AED9949118DD70163834A3A235 _FpRoundChopped;
$0CDD13AED9949118DD70163834A3A235 _FpRoundMinusInfinity;
$0CDD13AED9949118DD70163834A3A235 FpRoundNearest;
$0CDD13AED9949118DD70163834A3A235 _FpRoundPlusInfinity;
MACRO__GENERIC GENERIC_ATOMICS;
MACRO__GLOBAL GLOBAL_LOCALE;
MACRO__GLOBAL_USING _GLOBAL_USING;
MACRO__HAS_CHAR16 HAS_CHAR16_T_LANGUAGE_SUPPORT;
MACRO__HAS _HAS_CPP0X;
MACRO__HAS_EXCEPTIONS _HAS_EXCEPTIONS;
MACRO__HAS_ITERATOR HAS_ITERATOR_DEBUGGING;
MACRO__HEAPBADBEGIN _HEAPBADBEGIN;
MACRO__HEAPBADNODE _HEAPBADNODE;
MACRO__HEAPBADPTR _HEAPBADPTR;
MACRO__HEAPEMPTY _HEAPEMPTY;
MACRO__HEAPEND _HEAPEND;
MACRO__HEAPOK _HEAPOK;
MACRO__HEAP _HEAP_MAXREQ;
MACRO__UPPER _HEX;
MACRO__HOOK _HOOK_ALLOC;
MACRO__HOOK _HOOK_FREE;
MACRO__HOOK _HOOK_REALLOC;
double HUGE;
MACRO__I32 _I32_MAX;
MACRO__I32 _I32_MIN;
MACRO__I64 _I64_MAX;
MACRO__I64 _I64_MIN;
MACRO__IC _IC_AFFINE;
MACRO__IC IC_PROJECTIVE;
MACRO_BLOCK _IGNORE_BLOCK;
MACRO__INFCODE _INFCODE;
MACRO__WCHAR _INT_SIZE;
MACRO__IOB _IOB_ENTRIES;
MACRO__IONBF _IOEOF;
MACRO__IONBF _IOERR;
MACRO__IOFBF IOFBF;
MACRO__IOFBF _IOLBF;
MACRO__IONBF _IOMYBUF;
MACRO__IONBF _IONBF;
MACRO__IOREAD _IOREAD;
MACRO__IONBF _IORW;
MACRO__IOSTREAM _IOSTREAM_OP_LOCKS;
MACRO__IONBF _IOSTRG;
MACRO__IOREAD _IOWRT;
MACRO__ITERATOR _ITERATOR_DEBUG_ARRAY_OVERLOADS;
MACRO__ITERATOR ITERATOR_DEBUG_LEVEL;
MACRO__JBLEN _JBLEN;
MACRO__KANJI _KANJI_CP;
MACRO__UPPER _LEADBYTE;
MACRO__LK _LK_LOCK;
MACRO__LK _LK_NBLCK;
MACRO__LK _LK_NBRLCK;
MACRO__LK _LK_RLCK;
MACRO__LK LK_UNLCK;
MACRO__LLONG _LLONG_MAX;
MACRO__LO _LO;
MACRO__LOCK _LOCK_DEBUG;
MACRO__LOCK LOCK_LOCALE;
MACRO__LOCK _LOCK_MALLOC;
MACRO__LOCK _LOCK_STREAM;
MACRO__WCHAR _LONGLONG_SIZE;
MACRO__WCHAR _LONG_SIZE;
MACRO__UPPER _LOWER;
MACRO__MS _M1;
MACRO__MS _M2;
MACRO__MAX_BLOCKS _MAX_BLOCKS;
MACRO__MAX _MAX_DIR;
MACRO__MAX _MAX_DRIVE;
MACRO__MAX_ENV _MAX_ENV;
MACRO__MAX_EXP _MAX_EXP_DIG;
MACRO__MAX _MAX_EXT;
MACRO__MAX _MAX_FNAME;
MACRO__MAX_EXP _MAX_INT_DIG;
MACRO__MAX_LOCK _MAX_LOCK;
MACRO__MAX _MAX_PATH;
MACRO__MAX_EXP _MAX_SIG_DIG;
MACRO__MAX_WAIT _MAX_WAIT_MALLOC_CRT;
MACRO__MBC _MBC_ILLEGAL;
MACRO__MBC _MBC_LEAD;
MACRO__MBC MBC_SINGLE;
MACRO__MBC _MBC_TRAIL;
MACRO__MB _MB_CP_ANSI;
MACRO__MB _MB_CP_LOCALE;
MACRO__MB _MB_CP_OEM;
MACRO__MB MB_CP_SBCS;
MACRO__MCW_DN _MCW_DN;
MACRO__MCW _MCW_EM;
MACRO__MCW_IC _MCW_IC;
MACRO__MCW_PC _MCW_PC;
MACRO__MCW_RC _MCW_RC;
MACRO__MM_DENORMALS _MM_DENORMALS_ZERO_MASK;
MACRO__MM_DENORMALS MM_DENORMALS_ZERO_OFF;
MACRO__MM_DENORMALS _MM_DENORMALS_ZERO_ON;
MACRO__MM _MM_EXCEPT_DENORM;
MACRO__MM _MM_EXCEPT_DIV_ZERO;
MACRO__MM _MM_EXCEPT_INEXACT;
MACRO__MM _MM_EXCEPT_INVALID;
MACRO__MM _MM_EXCEPT_MASK;
MACRO__MM _MM_EXCEPT_OVERFLOW;
MACRO__MM _MM_EXCEPT_UNDERFLOW;
MACRO__MM _MM_FLUSH_ZERO_MASK;
MACRO__MM MM_FLUSH_ZERO_OFF;
MACRO__MM _MM_FLUSH_ZERO_ON;
MACRO__MM_DENORMALS _MM_FROUND_CEIL;
MACRO__MM_DENORMALS _MM_FROUND_CUR_DIRECTION;
MACRO__MM_DENORMALS _MM_FROUND_FLOOR;
MACRO__MM_DENORMALS _MM_FROUND_NEARBYINT;
MACRO__MM_DENORMALS MM_FROUND_NINT;
MACRO__MM_DENORMALS _MM_FROUND_NO_EXC;
MACRO__MM_DENORMALS MM_FROUND_RAISE_EXC;
MACRO__MM_DENORMALS _MM_FROUND_RINT;
MACRO__MM_DENORMALS MM_FROUND_TO_NEAREST_INT;
MACRO__MM_DENORMALS _MM_FROUND_TO_NEG_INF;
MACRO__MM_DENORMALS _MM_FROUND_TO_POS_INF;
MACRO__MM_DENORMALS _MM_FROUND_TO_ZERO;
MACRO__MM_DENORMALS _MM_FROUND_TRUNC;
MACRO__MM MM_HINT_NTA;
MACRO__MM _MM_HINT_T0;
MACRO__MM _MM_HINT_T1;
MACRO__MM _MM_HINT_T2;
MACRO__MM _MM_MASK_DENORM;
MACRO__MM _MM_MASK_DIV_ZERO;
MACRO__MM _MM_MASK_INEXACT;
MACRO__MM _MM_MASK_INVALID;
MACRO__MM _MM_MASK_MASK;
MACRO__MM _MM_MASK_OVERFLOW;
MACRO__MM _MM_MASK_UNDERFLOW;
MACRO__MM_PCOMCTRL _MM_PCOMCTRL_EQ;
MACRO__MM_PCOMCTRL _MM_PCOMCTRL_FALSE;
MACRO__MM_PCOMCTRL _MM_PCOMCTRL_GE;
MACRO__MM_PCOMCTRL _MM_PCOMCTRL_GT;
MACRO__MM_PCOMCTRL _MM_PCOMCTRL_LE;
MACRO__MM_PCOMCTRL MM_PCOMCTRL_LT;
MACRO__MM_PCOMCTRL _MM_PCOMCTRL_NEQ;
MACRO__MM_PCOMCTRL _MM_PCOMCTRL_TRUE;
MACRO__MM_PCOMCTRL MM_PERMUTE2_COPY;
MACRO__MM_PCOMCTRL _MM_PERMUTE2_ZEROIF0;
MACRO__MM_PCOMCTRL _MM_PERMUTE2_ZEROIF1;
MACRO__MM _MM_ROUND_DOWN;
MACRO__MM _MM_ROUND_MASK;
MACRO__MM MM_ROUND_NEAREST;
MACRO__MM _MM_ROUND_TOWARD_ZERO;
MACRO__MM _MM_ROUND_UP;
MACRO__MS _MP;
MACRO__MS _MS;
MACRO__MS_32 _MS_32;
MACRO__MS_32 MS_64;
MACRO__MULTI _MULTI_THREAD;
MACRO__M _M_ALL;
MACRO__M _M_COLLATE;
MACRO__M _M_CTYPE;
MACRO__M _M_MESSAGES;
MACRO__M _M_MONETARY;
MACRO__M _M_NUMERIC;
MACRO__M _M_TIME;
MACRO__INFCODE _NANCODE;
MACRO__NCAT _NCAT;
MACRO__NLSCMPERROR _NLSCMPERROR;
MACRO_BLOCK _NORMAL_BLOCK;
MACRO__NO NO_LOCALES;
MACRO__NSTREAM _NSTREAM_;
MACRO__OLD _OLD_P_OVERLAY;
MACRO__OUT OUT_TO_DEFAULT;
MACRO__OUT _OUT_TO_MSGBOX;
MACRO__OUT _OUT_TO_STDERR;
MACRO__OVERFLOW _OVERFLOW;
MACRO__O _O_APPEND;
MACRO__O _O_BINARY;
MACRO__O _O_CREAT;
MACRO__O _O_EXCL;
MACRO__O _O_NOINHERIT;
MACRO__O _O_OBTAIN_DIR;
MACRO__O _O_RANDOM;
MACRO__O _O_RAW;
MACRO__O O_RDONLY;
MACRO__O _O_RDWR;
MACRO__O _O_SEQUENTIAL;
MACRO__O _O_SHORT_LIVED;
MACRO__O _O_TEMPORARY;
MACRO__O _O_TEXT;
MACRO__O _O_TRUNC;
MACRO__O _O_U16TEXT;
MACRO__O _O_U8TEXT;
MACRO__O _O_WRONLY;
MACRO__O _O_WTEXT;
MACRO__PC _PC_24;
MACRO__PC _PC_53;
MACRO__PC PC_64;
MACRO__PLOSS _PLOSS;
MACRO__LO _PU;
MACRO__UPPER _PUNCT;
MACRO__P_NOWAITO _P_DETACH;
MACRO__P _P_NOWAIT;
MACRO__P_NOWAITO _P_NOWAITO;
MACRO__P_NOWAITO _P_OVERLAY;
MACRO__P P_WAIT;
POGOAUTOSWEEPPROCA PogoAutoSweepA;
POGOAUTOSWEEPPROCW PogoAutoSweepW;
MACRO__RC _RC_CHOP;
MACRO__RC _RC_DOWN;
MACRO__RC RC_NEAR;
MACRO__RC _RC_UP;
MACRO__REPORT _REPORT_ERRMODE;
_RTC_ErrorNumber RTC_CHKSTK;
_RTC_ErrorNumber _RTC_CORRUPTED_ALLOCA;
_RTC_ErrorNumber _RTC_CORRUPT_STACK;
_RTC_ErrorNumber _RTC_CVRT_LOSS_INFO;
MACRO__RTC _RTC_ERRTYPE_ASK;
MACRO__RTC _RTC_ERRTYPE_IGNORE;
_RTC_ErrorNumber _RTC_ILLEGAL;
_RTC_ErrorNumber _RTC_UNINIT_LOCAL_USE;
MACRO__SAL _SAL_VERSION;
MACRO__MS _SBLOW;
MACRO__MS _SBUP;
MACRO__SECURECRT _SECURECRT_FILL_BUFFER_PATTERN;
MACRO__SECURE SECURE_SCL;
MACRO__SECURE_SCL _SECURE_SCL_DEPRECATE;
MACRO__WCHAR _SHORT_SIZE;
MACRO__SH _SH_DENYNO;
MACRO__SH _SH_DENYRD;
MACRO__SH _SH_DENYRW;
MACRO__SH _SH_DENYWR;
MACRO__SH _SH_SECURE;
MACRO__SIDD SIDD_BIT_MASK;
MACRO__SIDD SIDD_CMP_EQUAL_ANY;
MACRO__SIDD _SIDD_CMP_EQUAL_EACH;
MACRO__SIDD _SIDD_CMP_EQUAL_ORDERED;
MACRO__SIDD _SIDD_CMP_RANGES;
MACRO__SIDD SIDD_LEAST_SIGNIFICANT;
MACRO__SIDD _SIDD_MASKED_NEGATIVE_POLARITY;
MACRO__SIDD _SIDD_MASKED_POSITIVE_POLARITY;
MACRO__SIDD _SIDD_MOST_SIGNIFICANT;
MACRO__SIDD _SIDD_NEGATIVE_POLARITY;
MACRO__SIDD SIDD_POSITIVE_POLARITY;
MACRO__SIDD _SIDD_SBYTE_OPS;
MACRO__SIDD _SIDD_SWORD_OPS;
MACRO__SIDD SIDD_UBYTE_OPS;
MACRO__SIDD _SIDD_UNIT_MASK;
MACRO__SIDD _SIDD_UWORD_OPS;
MACRO__DOMAIN _SING;
MACRO__LO _SP;
MACRO__UPPER _SPACE;
MACRO__SW _SW_DENORMAL;
MACRO__SW _SW_INEXACT;
MACRO__SW _SW_INVALID;
MACRO__SW _SW_OVERFLOW;
MACRO__SW_UNEMULATED _SW_SQRTNEG;
MACRO__SW_UNEMULATED _SW_STACKOVERFLOW;
MACRO__SW_UNEMULATED _SW_STACKUNDERFLOW;
MACRO__SW _SW_UNDERFLOW;
MACRO__SW_UNEMULATED _SW_UNEMULATED;
MACRO__SW _SW_ZERODIVIDE;
MACRO__SYS _SYS_OPEN;
MACRO__S _S_IEXEC;
MACRO__S _S_IFCHR;
MACRO__S _S_IFDIR;
MACRO__S _S_IFIFO;
MACRO__S _S_IFMT;
MACRO__S _S_IFREG;
MACRO__S _S_IREAD;
MACRO__S _S_IWRITE;
MACRO__TEOF _TEOF;
MACRO__TLOSS _TLOSS;
MACRO__TMP _TMP_MAX_S;
MACRO__TRUNCATE _TRUNCATE;
MACRO__TWO _TWO_DIGIT_EXPONENT;
MACRO__UI32 _UI32_MAX;
MACRO__UI64 _UI64_MAX;
MACRO__LLONG _ULLONG_MAX;
MACRO__OVERFLOW _UNDERFLOW;
MACRO__UP _UP;
MACRO__UPPER _UPPER;
MACRO__FREEENTRY _USEDENTRY;
MACRO__USE USE_ATTRIBUTES_FOR_SAL;
MACRO__USE USE_DECLSPECS_FOR_SAL;
MACRO__VC _VC_CRT_BUILD_VERSION;
MACRO__VC _VC_CRT_MAJOR_VERSION;
MACRO__VC VC_CRT_MINOR_VERSION;
MACRO__VC _VC_CRT_RBUILD_VERSION;
MACRO__WAIT WAIT_CHILD;
MACRO__WAIT _WAIT_GRANDCHILD;
MACRO__WCHAR _WCHAR_T_SIZE;
MACRO__WIN32 _WIN32_C_LIB;
MACRO__WRITE _WRITE_ABORT_MSG;
MACRO__XB _XA;
MACRO__XABORT _XABORT_CAPACITY;
MACRO__XABORT _XABORT_CONFLICT;
MACRO__XABORT _XABORT_DEBUG;
MACRO__XABORT _XABORT_EXPLICIT;
MACRO__XABORT _XABORT_NESTED;
MACRO__XABORT _XABORT_RETRY;
MACRO__XB XB;
MACRO__XBEGIN _XBEGIN_STARTED;
MACRO__XCR XCR_XFEATURE_ENABLED_MASK;
MACRO__UP _XD;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMI2Addpd;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMI2Addsd;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMI2Addsubpd;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMI2Cmppd;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMI2Cmpsd;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMI2Comisd;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMI2Cvtdq2ps;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMI2Cvtpd2dq;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMI2Cvtpd2pi;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMI2Cvtpd2ps;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMI2Cvtps2dq;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMI2Cvtps2pd;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMI2Cvtsd2si;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMI2Cvtsd2ss;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMI2Cvtss2sd;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMI2Cvttpd2dq;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMI2Cvttpd2pi;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMI2Cvttps2dq;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMI2Cvttsd2si;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMI2Divpd;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMI2Divsd;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMI2Dppd;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMI2Haddpd;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMI2Hsubpd;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMI2Maxpd;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMI2Maxsd;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMI2Minpd;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMI2Minsd;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMI2Mulpd;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMI2Mulsd;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMI2Roundpd;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMI2Roundsd;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMI2Sqrtpd;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMI2Sqrtsd;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMI2Subpd;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMI2Subsd;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMI2UComisd;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMIAddps;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMIAddss;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMIAddsubps;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMICmpps;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMICmpss;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMIComiss;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMICvtpi2ps;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMICvtps2pi;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMICvtsi2ss;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMICvtss2si;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMICvttps2pi;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMICvttss2si;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMIDivps;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMIDivss;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMIDpps;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMIHaddps;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMIHsubps;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMIMaxps;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMIMaxss;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMIMinps;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMIMinss;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMIMulps;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMIMulss;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMIRoundps;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMIRoundss;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMISqrtps;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMISqrtss;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMISubps;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMISubss;
$D7F48ACA8F7E5F151D30CF090E11B572 _XMMIUComiss;
MACRO__XS XS;
MACRO__X X_ALL;
MACRO__X _X_COLLATE;
MACRO__X _X_CTYPE;
MACRO__X _X_MAX;
MACRO__X _X_MESSAGES;
MACRO__X _X_MONETARY;
MACRO__X _X_NUMERIC;
MACRO__X _X_TIME;
void *_AddressOfReturnAddress(void);
void __cdecl _Atexit(void (__cdecl *)());
int _Atomic_compare_exchange_weak_4(volatile _Uint4_t *, _Uint4_t *, _Uint4_t, memory_order, memory_order);
int __cdecl _Atomic_compare_exchange_weak_4_locking(volatile _Atomic_flag_t *, _Uint4_t *, _Uint4_t *, _Uint4_t, memory_order, memory_order);
_Uint4_t _Atomic_fetch_add_4(volatile _Uint4_t *, _Uint4_t, memory_order);
_Uint4_t __cdecl _Atomic_fetch_add_4_locking(volatile _Atomic_flag_t *, _Uint4_t *, _Uint4_t, memory_order);
_Uint4_t _Atomic_fetch_sub_4(volatile _Uint4_t *, _Uint4_t, memory_order);
_Uint4_t __cdecl _Atomic_fetch_sub_4_locking(volatile _Atomic_flag_t *, _Uint4_t *, _Uint4_t, memory_order);
_Uint4_t _Atomic_load_4(volatile _Uint4_t *, memory_order);
_Uint4_t __cdecl _Atomic_load_4_locking(volatile _Atomic_flag_t *, _Uint4_t *, memory_order);
unsigned __int8 _BitScanForward(unsigned int *Index, unsigned int Mask);
unsigned __int8 _BitScanReverse(unsigned int *Index, unsigned int Mask);
_RTC_error_fn __cdecl _CRT_RTC_INIT(void *Res0, void **Res1, int Res2, int Res3, int Res4);
_RTC_error_fnW __cdecl _CRT_RTC_INITW(void *Res0, void **Res1, int Res2, int Res3, int Res4);
double __cdecl _Cosh(double, double);
_Dconst _Denorm;
__int16 __cdecl _Dtest(double *);
__int16 __cdecl _Exp(double *, double, __int16);
float __cdecl _FCosh(float, float);
_Dconst _FDenorm;
__int16 __cdecl _FDtest(float *);
__int16 __cdecl _FExp(float *, float, __int16);
_Dconst _FInf;
_Dconst _FNan;
float __cdecl _FSinh(float, float);
_Dconst _FSnan;
void __cdecl _Feraise(int);
MACRO___GOT __GOT_SECURE_LIB__;
_locale_t __cdecl _GetLocaleForCP(unsigned int);
_Collvec __cdecl _Getcoll();
_Ctypevec __cdecl _Getctype();
_Cvtvec __cdecl _Getcvt();
int __cdecl _Getdateorder();
char *__cdecl _Getdays();
char *__cdecl _Getmonths();
void *__cdecl _Gettnames();
__int16 __cdecl _Getwctype(wchar_t, const _Ctypevec *);
const wchar_t *__cdecl _Getwctypes(const wchar_t *, const wchar_t *, __int16 *, const _Ctypevec *);
double _HUGE;
_Dconst _Hugeval;
_Dconst _Inf;
int _InterlockedAddLargeStatistic(volatile __int64 *Addend, int Value);
int _InterlockedAnd(volatile int *Value, int Mask);
__int16 _InterlockedAnd16(volatile __int16 *Value, __int16 Mask);
char _InterlockedAnd8(volatile char *Value, char Mask);
int __cdecl _InterlockedCompareExchange(volatile int *Destination, int Exchange, int Comparand);
__int16 _InterlockedCompareExchange16(volatile __int16 *Destination, __int16 Exchange, __int16 Comparand);
__int64 _InterlockedCompareExchange64(volatile __int64 *Destination, __int64 Exchange, __int64 Comparand);
__int64 _InterlockedCompareExchange64_HLEAcquire(volatile __int64 *, __int64, __int64);
__int64 _InterlockedCompareExchange64_HLERelease(volatile __int64 *, __int64, __int64);
char _InterlockedCompareExchange8(volatile char *Destination, char Exchange, char Comparand);
void *_InterlockedCompareExchangePointer_HLEAcquire(void *volatile *, void *, void *);
void *_InterlockedCompareExchangePointer_HLERelease(void *volatile *, void *, void *);
int _InterlockedCompareExchange_HLEAcquire(volatile int *, int, int);
int _InterlockedCompareExchange_HLERelease(volatile int *, int, int);
int __cdecl _InterlockedDecrement(volatile int *Addend);
__int16 _InterlockedDecrement16(volatile __int16 *Addend);
int __cdecl _InterlockedExchange(volatile int *Target, int Value);
__int16 _InterlockedExchange16(volatile __int16 *Target, __int16 Value);
char _InterlockedExchange8(volatile char *Target, char Value);
int __cdecl _InterlockedExchangeAdd(volatile int *Addend, int Value);
__int16 _InterlockedExchangeAdd16(volatile __int16 *Addend, __int16 Value);
__int64 _InterlockedExchangeAdd64_HLEAcquire(volatile __int64 *, __int64);
__int64 _InterlockedExchangeAdd64_HLERelease(volatile __int64 *, __int64);
char _InterlockedExchangeAdd8(volatile char *Addend, char Value);
int _InterlockedExchangeAdd_HLEAcquire(volatile int *, int);
int _InterlockedExchangeAdd_HLERelease(volatile int *, int);
int __cdecl _InterlockedIncrement(volatile int *Addend);
__int16 _InterlockedIncrement16(volatile __int16 *Addend);
int _InterlockedOr(volatile int *Value, int Mask);
__int16 _InterlockedOr16(volatile __int16 *Value, __int16 Mask);
char _InterlockedOr8(volatile char *Value, char Mask);
int _InterlockedXor(volatile int *Value, int Mask);
__int16 _InterlockedXor16(volatile __int16 *Value, __int16 Mask);
char _InterlockedXor8(volatile char *Value, char Mask);
long double __cdecl _LCosh(long double, long double);
_Dconst _LDenorm;
__int16 __cdecl _LDtest(long double *);
__int16 __cdecl _LExp(long double *, long double, __int16);
_Dconst _LInf;
_Dconst _LNan;
long double __cdecl _LSinh(long double, long double);
_Dconst _LSnan;
void __cdecl _Lock_shared_ptr_spin_lock();
void *_MarkAllocaS(void *Ptr, unsigned int Marker);
int __cdecl _Mbrtowc(wchar_t *, const char *, size_t, mbstate_t *, const _Cvtvec *);
_Dconst _Nan;
void __cdecl _RTC_CheckEsp();
const char *__cdecl _RTC_GetErrDesc(_RTC_ErrorNumber Errnum);
void __cdecl _RTC_InitBase();
void __cdecl _RTC_Initialize();
int __cdecl _RTC_NumErrors();
_RTC_error_fn __cdecl _RTC_SetErrorFunc(_RTC_error_fn);
_RTC_error_fnW __cdecl _RTC_SetErrorFuncW(_RTC_error_fnW);
int __cdecl _RTC_SetErrorType(_RTC_ErrorNumber Errnum, int ErrType);
void __cdecl _RTC_Shutdown();
void __cdecl _RTC_Terminate();
void __cdecl _RTC_UninitUse(const char *Varname);
void _ReadBarrier(void);
void _ReadWriteBarrier(void);
void *_ReturnAddress(void);
MACRO___STDC __STDC_SECURE_LIB__;
MACRO___STDC_WANT __STDC_WANT_SECURE_LIB__;
double __cdecl _Sinh(double, double);
_Dconst _Snan;
double __cdecl _Stod(const char *, char **, int);
float __cdecl _Stof(const char *, char **, int);
long double __cdecl _Stold(const char *, char **, int);
void _Store64_HLERelease(volatile __int64 *, __int64);
void _StorePointer_HLERelease(void *volatile *, void *);
void _Store_HLERelease(volatile int *, int);
int __cdecl _Strcoll(const char *, const char *, const char *, const char *, const _Collvec *);
size_t __cdecl _Strftime(char *, size_t Maxsize, const char *, const struct tm *, void *);
size_t __cdecl _Strxfrm(char *String1, char *End1, const char *, const char *, const _Collvec *);
int __cdecl _Tolower(int, const _Ctypevec *);
int __cdecl _Toupper(int, const _Ctypevec *);
wchar_t __cdecl _Towlower(wchar_t, const _Ctypevec *);
wchar_t __cdecl _Towupper(wchar_t, const _Ctypevec *);
void __cdecl _Unlock_shared_ptr_spin_lock();
wchar_t *__cdecl _W_Getdays();
wchar_t *__cdecl _W_Getmonths();
void *__cdecl _W_Gettnames();
int __cdecl _Wcrtomb(char *, wchar_t, mbstate_t *, const _Cvtvec *);
int __cdecl _Wcscoll(const wchar_t *, const wchar_t *, const wchar_t *, const wchar_t *, const _Collvec *);
size_t __cdecl _Wcsftime(wchar_t *, size_t Maxsize, const wchar_t *, const struct tm *, void *);
size_t __cdecl _Wcsxfrm(wchar_t *String1, wchar_t *End1, const wchar_t *, const wchar_t *, const _Collvec *);
void _WriteBarrier(void);
int __cdecl ___mb_cur_max_func();
int __cdecl ___mb_cur_max_l_func(_locale_t);
void __addfsbyte(unsigned int, unsigned __int8);
void __addfsdword(unsigned int, unsigned int);
void __addfsword(unsigned int, unsigned __int16);
int __argc;
char **__argv;
void __code_seg(const char *);
int __cdecl __control87_2(unsigned int NewValue, unsigned int Mask, unsigned int *X86_cw, unsigned int *Sse2_cw);
void __cpuid(int[4], int);
void __cpuidex(int[4], int, int);
_locale_t __cdecl __create_locale(int Category, const char *Locale);
int *__cdecl __daylight();
void __cdecl __debugbreak();
unsigned int *__cdecl __doserrno();
int *__cdecl __dstbias();
__int64 __emul(int, int);
unsigned __int64 __emulu(unsigned int, unsigned int);
void __noreturn __fastfail(unsigned int);
int *__cdecl __fpecode();
void __cdecl __free_locale(_locale_t Locale);
_locale_t __cdecl __get_current_locale();
unsigned int __getcallerseflags(void);
void __halt(void);
unsigned __int8 __inbyte(unsigned __int16);
void __inbytestring(unsigned __int16, unsigned __int8 *, unsigned int);
void __incfsbyte(unsigned int);
void __incfsdword(unsigned int);
void __incfsword(unsigned int);
unsigned int __indword(unsigned __int16);
void __indwordstring(unsigned __int16, unsigned int *, unsigned int);
void __int2c(void);
void __invlpg(void *);
unsigned __int16 __inword(unsigned __int16);
void __inwordstring(unsigned __int16, unsigned __int16 *, unsigned int);
FILE *__cdecl __iob_func();
int __cdecl __isascii(int C);
int __cdecl __iscsym(int C);
int __cdecl __iscsymf(int C);
int __cdecl __iswcsym(wint_t C);
int __cdecl __iswcsymf(wint_t C);
void __lidt(void *);
unsigned __int64 __ll_lshift(unsigned __int64, int);
__int64 __ll_rshift(__int64, int);
void __llwpcb(void *);
int __cdecl __lock_fhandle(int Filehandle);
unsigned __int8 __lwpins32(unsigned int, unsigned int, unsigned int);
void __lwpval32(unsigned int, unsigned int, unsigned int);
unsigned int __lzcnt(unsigned int);
unsigned __int16 __lzcnt16(unsigned __int16);
int __mb_cur_max;
void __movsb(unsigned __int8 *, const unsigned __int8 *, size_t);
void __movsd(unsigned int *, const unsigned int *, size_t);
void __movsw(unsigned __int16 *, const unsigned __int16 *, size_t);
void __nop(void);
void __nvreg_restore_fence(void);
void __nvreg_save_fence(void);
void __outbyte(unsigned __int16, unsigned __int8);
void __outbytestring(unsigned __int16, unsigned __int8 *, unsigned int);
void __outdword(unsigned __int16, unsigned int);
void __outdwordstring(unsigned __int16, unsigned int *, unsigned int);
void __outword(unsigned __int16, unsigned __int16);
void __outwordstring(unsigned __int16, unsigned __int16 *, unsigned int);
const unsigned __int16 *__cdecl __pctype_func();
unsigned int __popcnt(unsigned int);
unsigned __int16 __popcnt16(unsigned __int16);
const wctype_t *__cdecl __pwctype_func();
void **__cdecl __pxcptinfoptrs();
unsigned __int64 __rdtsc(void);
unsigned __int64 __rdtscp(unsigned int *);
unsigned int __readcr0(void);
unsigned int __readcr2(void);
unsigned int __readcr3(void);
unsigned int __readcr4(void);
unsigned int __readcr8(void);
unsigned int __readdr(unsigned int);
unsigned int __readeflags(void);
unsigned __int8 __readfsbyte(unsigned int);
unsigned int __readfsdword(unsigned int);
unsigned __int64 __readfsqword(unsigned int);
unsigned __int16 __readfsword(unsigned int);
unsigned __int64 __readmsr(unsigned int);
unsigned __int64 __readpmc(unsigned int);
void __cdecl __noreturn __report_gsfailure();
uintptr_t __security_cookie;
void __cdecl __security_init_cookie();
unsigned int __segmentlimit(unsigned int);
void __sidt(void *);
void *__slwpcb();
void __stosb(unsigned __int8 *, unsigned __int8, size_t);
void __stosd(unsigned int *, unsigned int, size_t);
void __stosw(unsigned __int16 *, unsigned __int16, size_t);
void __svm_clgi(void);
void __svm_invlpga(void *, int);
void __svm_skinit(int);
void __svm_stgi(void);
void __svm_vmload(size_t);
void __svm_vmrun(size_t);
void __svm_vmsave(size_t);
int __swprintf_l(wchar_t *Dest, const wchar_t *Format, _locale_t Plocinfo, ...);
char **__cdecl __sys_errlist();
int *__cdecl __sys_nerr();
uintptr_t __cdecl __threadhandle();
unsigned int __cdecl __threadid();
int *__cdecl __timezone();
int __cdecl __toascii(int C);
char **__cdecl __tzname();
void __ud2(void);
unsigned __int64 __ull_rshift(unsigned __int64, int);
void __vmx_off(void);
void __vmx_vmptrst(unsigned __int64 *);
int __cdecl __vswprintf_l(wchar_t *Dest, const wchar_t *Format, _locale_t Plocinfo, va_list Args);
wchar_t **__wargv;
void __wbinvd(void);
wchar_t *__cdecl __wcserror(const wchar_t *Str);
errno_t __cdecl __wcserror_s(wchar_t *Buffer, size_t SizeInWords, const wchar_t *ErrMsg);
void __writecr0(unsigned int);
void __writecr3(unsigned int);
void __writecr4(unsigned int);
void __writecr8(unsigned int);
void __writedr(unsigned int, unsigned int);
void __writeeflags(unsigned int);
void __writefsbyte(unsigned int, unsigned __int8);
void __writefsdword(unsigned int, unsigned int);
void __writefsqword(unsigned int, unsigned __int64);
void __writefsword(unsigned int, unsigned __int16);
void __writemsr(unsigned int, unsigned __int64);
int __cdecl _abnormal_termination();
__int64 __cdecl _abs64(__int64);
int __cdecl _access(const char *Filename, int AccessMode);
errno_t __cdecl _access_s(const char *Filename, int AccessMode);
void __cdecl _aligned_free(void *Memory);
void *__cdecl _aligned_malloc(size_t Size, size_t Alignment);
size_t __cdecl _aligned_msize(void *Memory, size_t Alignment, size_t Offset);
void *__cdecl _aligned_offset_malloc(size_t Size, size_t Alignment, size_t Offset);
void *__cdecl _aligned_offset_realloc(void *Memory, size_t NewSize, size_t Alignment, size_t Offset);
void *__cdecl _aligned_offset_recalloc(void *Memory, size_t Count, size_t Size, size_t Alignment, size_t Offset);
void *__cdecl _aligned_realloc(void *Memory, size_t NewSize, size_t Alignment);
void *__cdecl _aligned_recalloc(void *Memory, size_t Count, size_t Size, size_t Alignment);
void *__cdecl _alloca(size_t Size);
unsigned int _andn_u32(unsigned int, unsigned int);
int __cdecl _atodbl(_CRT_DOUBLE *Result, char *Str);
int __cdecl _atodbl_l(_CRT_DOUBLE *Result, char *Str, _locale_t Locale);
double __cdecl _atof_l(const char *String, _locale_t Locale);
int __cdecl _atoflt(_CRT_FLOAT *Result, char *Str);
int __cdecl _atoflt_l(_CRT_FLOAT *Result, char *Str, _locale_t Locale);
__int64 __cdecl _atoi64(const char *String);
__int64 __cdecl _atoi64_l(const char *String, _locale_t Locale);
int __cdecl _atoi_l(const char *Str, _locale_t Locale);
int __cdecl _atol_l(const char *Str, _locale_t Locale);
int __cdecl _atoldbl(_LDOUBLE *Result, char *Str);
int __cdecl _atoldbl_l(_LDOUBLE *Result, char *Str, _locale_t Locale);
void __cdecl _beep(unsigned int Frequency, unsigned int Duration);
uintptr_t __cdecl _beginthread(void (__cdecl *StartAddress)(void *), unsigned int StackSize, void *ArgList);
uintptr_t __cdecl _beginthreadex(void *Security, unsigned int StackSize, unsigned int (__stdcall *StartAddress)(void *), void *ArgList, unsigned int InitFlag, unsigned int *ThrdAddr);
unsigned int _bextr_u32(unsigned int, unsigned int, unsigned int);
unsigned int _bextri_u32(unsigned int, unsigned int);
unsigned __int8 _bittest(const int *, int);
unsigned __int8 _bittestandcomplement(int *, int);
unsigned __int8 _bittestandreset(int *, int);
unsigned __int8 _bittestandset(int *, int);
unsigned int _blcfill_u32(unsigned int);
unsigned int _blci_u32(unsigned int);
unsigned int _blcic_u32(unsigned int);
unsigned int _blcmsk_u32(unsigned int);
unsigned int _blcs_u32(unsigned int);
unsigned int _blsfill_u32(unsigned int);
unsigned int _blsi_u32(unsigned int);
unsigned int _blsic_u32(unsigned int);
unsigned int _blsmsk_u32(unsigned int);
unsigned int _blsr_u32(unsigned int);
unsigned __int64 __cdecl _byteswap_uint64(unsigned __int64 Int64);
unsigned int __cdecl _byteswap_ulong(unsigned int Long);
unsigned __int16 __cdecl _byteswap_ushort(unsigned __int16 Short);
unsigned int _bzhi_u32(unsigned int, unsigned int);
void __cdecl _c_exit();
double __cdecl _cabs(struct _complex Complex_value);
void __cdecl _cexit();
char *__cdecl _cgets(char *Buffer);
errno_t __cdecl _cgets_s(char *Buffer, size_t Size, size_t *SizeRead);
wchar_t *__cdecl _cgetws(wchar_t *Buffer);
errno_t __cdecl _cgetws_s(wchar_t *Buffer, size_t SizeInWords, size_t *SizeRead);
int __cdecl _chdir(const char *Path);
int __cdecl _chdrive(int Drive);
double __cdecl _chgsign(double X);
int __cdecl _chmod(const char *Filename, int Mode);
int __cdecl _chsize(int FileHandle, int Size);
errno_t __cdecl _chsize_s(int FileHandle, __int64 Size);
unsigned int __cdecl _clearfp();
int __cdecl _close(int FileHandle);
int __cdecl _commit(int FileHandle);
int __cdecl _configthreadlocale(int Flag);
unsigned int __cdecl _control87(unsigned int NewValue, unsigned int Mask);
unsigned int __cdecl _controlfp(unsigned int NewValue, unsigned int Mask);
errno_t __cdecl _controlfp_s(unsigned int *CurrentState, unsigned int NewValue, unsigned int Mask);
double __cdecl _copysign(double Number, double Sign);
int _cprintf(const char *Format, ...);
int _cprintf_l(const char *Format, _locale_t Locale, ...);
int _cprintf_p(const char *Format, ...);
int _cprintf_p_l(const char *Format, _locale_t Locale, ...);
int _cprintf_s(const char *Format, ...);
int _cprintf_s_l(const char *Format, _locale_t Locale, ...);
int __cdecl _cputs(const char *Str);
int __cdecl _cputws(const wchar_t *String);
int __cdecl _creat(const char *Filename, int PermissionMode);
_locale_t __cdecl _create_locale(int Category, const char *Locale);
int _cscanf(const char *Format, ...);
int _cscanf_l(const char *Format, _locale_t Locale, ...);
int _cscanf_s(const char *Format, ...);
int _cscanf_s_l(const char *Format, _locale_t Locale, ...);
char *__cdecl _ctime32(const __time32_t *Time);
errno_t __cdecl _ctime32_s(char *Buf, size_t SizeInBytes, const __time32_t *Time);
char *__cdecl _ctime64(const __time64_t *Time);
errno_t __cdecl _ctime64_s(char *Buf, size_t SizeInBytes, const __time64_t *Time);
intptr_t __cdecl _cwait(int *TermStat, intptr_t ProcHandle, int Action);
int _cwprintf(const wchar_t *Format, ...);
int _cwprintf_l(const wchar_t *Format, _locale_t Locale, ...);
int _cwprintf_p(const wchar_t *Format, ...);
int _cwprintf_p_l(const wchar_t *Format, _locale_t Locale, ...);
int _cwprintf_s(const wchar_t *Format, ...);
int _cwprintf_s_l(const wchar_t *Format, _locale_t Locale, ...);
int _cwscanf(const wchar_t *Format, ...);
int _cwscanf_l(const wchar_t *Format, _locale_t Locale, ...);
int _cwscanf_s(const wchar_t *Format, ...);
int _cwscanf_s_l(const wchar_t *Format, _locale_t Locale, ...);
double __cdecl _difftime32(__time32_t Time1, __time32_t Time2);
double __cdecl _difftime64(__time64_t Time1, __time64_t Time2);
void __cdecl _disable();
int __cdecl _dup(int FileHandle);
int __cdecl _dup2(int FileHandleSrc, int FileHandleDst);
errno_t __cdecl _dupenv_s(char **PBuffer, size_t *PBufferSizeInBytes, const char *VarName);
char *__cdecl _ecvt(double Val, int NumOfDigits, int *PtDec, int *PtSign);
errno_t __cdecl _ecvt_s(char *DstBuf, size_t Size, double Val, int NumOfDights, int *PtDec, int *PtSign);
void __cdecl _enable();
void __cdecl _endthread();
void __cdecl _endthreadex(unsigned int Retval);
char **_environ;
int __cdecl _eof(int FileHandle);
int *__cdecl _errno();
EXCEPTION_DISPOSITION __cdecl _except_handler(struct _EXCEPTION_RECORD *ExceptionRecord, void *EstablisherFrame, struct _CONTEXT *ContextRecord, void *DispatcherContext);
unsigned int __cdecl _exception_code();
void *__cdecl _exception_info();
intptr_t _execl(const char *Filename, const char *ArgList, ...);
intptr_t _execle(const char *Filename, const char *ArgList, ...);
intptr_t _execlp(const char *Filename, const char *ArgList, ...);
intptr_t _execlpe(const char *Filename, const char *ArgList, ...);
intptr_t __cdecl _execv(const char *Filename, const char *const *ArgList);
intptr_t __cdecl _execve(const char *Filename, const char *const *ArgList, const char *const *Env);
intptr_t __cdecl _execvp(const char *Filename, const char *const *ArgList);
intptr_t __cdecl _execvpe(const char *Filename, const char *const *ArgList, const char *const *Env);
void __cdecl __noreturn _exit(int Code);
void *__cdecl _expand(void *Memory, size_t NewSize);
int __cdecl _fclose_nolock(FILE *File);
int __cdecl _fcloseall();
char *__cdecl _fcvt(double Val, int NumOfDec, int *PtDec, int *PtSign);
errno_t __cdecl _fcvt_s(char *DstBuf, size_t Size, double Val, int NumOfDec, int *PtDec, int *PtSign);
FILE *__cdecl _fdopen(int FileHandle, const char *Mode);
int __cdecl _fflush_nolock(FILE *File);
int __cdecl _fgetchar();
wint_t __cdecl _fgetwc_nolock(FILE *File);
wint_t __cdecl _fgetwchar();
int __cdecl _filbuf(FILE *File);
int __cdecl _filelength(int FileHandle);
__int64 __cdecl _filelengthi64(int FileHandle);
int __cdecl _fileno(FILE *File);
int __cdecl _findclose(intptr_t FindHandle);
intptr_t __cdecl _findfirst32(const char *Filename, struct _finddata32_t *FindData);
intptr_t __cdecl _findfirst32i64(const char *Filename, struct _finddata32i64_t *FindData);
intptr_t __cdecl _findfirst64(const char *Filename, struct __finddata64_t *FindData);
intptr_t __cdecl _findfirst64i32(const char *Filename, struct _finddata64i32_t *FindData);
int __cdecl _findnext32(intptr_t FindHandle, struct _finddata32_t *FindData);
int __cdecl _findnext32i64(intptr_t FindHandle, struct _finddata32i64_t *FindData);
int __cdecl _findnext64(intptr_t FindHandle, struct __finddata64_t *FindData);
int __cdecl _findnext64i32(intptr_t FindHandle, struct _finddata64i32_t *FindData);
int __cdecl _finite(double X);
int __cdecl _flsbuf(int Ch, FILE *File);
int __cdecl _flushall();
int _fmode;
int __cdecl _fpclass(double X);
int __cdecl _fpieee_flt(unsigned int ExceptionCode, struct _EXCEPTION_POINTERS *PtExceptionPtr, int (__cdecl *Handler)(_FPIEEE_RECORD *));
void __cdecl _fpreset();
int _fprintf_l(FILE *File, const char *Format, _locale_t Locale, ...);
int _fprintf_p(FILE *File, const char *Format, ...);
int _fprintf_p_l(FILE *File, const char *Format, _locale_t Locale, ...);
int _fprintf_s_l(FILE *File, const char *Format, _locale_t Locale, ...);
int __cdecl _fputchar(int Ch);
wint_t __cdecl _fputwc_nolock(wchar_t Ch, FILE *File);
wint_t __cdecl _fputwchar(wchar_t Ch);
size_t __cdecl _fread_nolock(void *DstBuf, size_t ElementSize, size_t Count, FILE *File);
size_t __cdecl _fread_nolock_s(void *DstBuf, size_t DstSize, size_t ElementSize, size_t Count, FILE *File);
void __cdecl _free_locale(_locale_t Locale);
int _fscanf_l(FILE *File, const char *Format, _locale_t Locale, ...);
int _fscanf_s_l(FILE *File, const char *Format, _locale_t Locale, ...);
int __cdecl _fseek_nolock(FILE *File, int Offset, int Origin);
int __cdecl _fseeki64(FILE *File, __int64 Offset, int Origin);
int __cdecl _fseeki64_nolock(FILE *File, __int64 Offset, int Origin);
FILE *__cdecl _fsopen(const char *Filename, const char *Mode, int ShFlag);
int __cdecl _fstat32(int FileDes, struct _stat32 *Stat);
int __cdecl _fstat32i64(int FileDes, struct _stat32i64 *Stat);
int __cdecl _fstat64(int FileDes, struct _stat64 *Stat);
int __cdecl _fstat64i32(int FileDes, struct _stat64i32 *Stat);
int __cdecl _ftell_nolock(FILE *File);
__int64 __cdecl _ftelli64(FILE *File);
__int64 __cdecl _ftelli64_nolock(FILE *File);
void __cdecl _ftime32(struct __timeb32 *Time);
errno_t __cdecl _ftime32_s(struct __timeb32 *Time);
void __cdecl _ftime64(struct __timeb64 *Time);
errno_t __cdecl _ftime64_s(struct __timeb64 *Time);
char *__cdecl _fullpath(char *FullPath, const char *Path, size_t SizeInBytes);
static int __cdecl _futime(int Desc, struct _utimbuf *Utimbuf);
int __cdecl _futime32(int FileDes, struct __utimbuf32 *Time);
int __cdecl _futime64(int FileDes, struct __utimbuf64 *Time);
int _fwprintf_l(FILE *File, const wchar_t *Format, _locale_t Locale, ...);
int _fwprintf_p(FILE *File, const wchar_t *Format, ...);
int _fwprintf_p_l(FILE *File, const wchar_t *Format, _locale_t Locale, ...);
int _fwprintf_s_l(FILE *File, const wchar_t *Format, _locale_t Locale, ...);
size_t __cdecl _fwrite_nolock(const void *DstBuf, size_t Size, size_t Count, FILE *File);
int _fwscanf_l(FILE *File, const wchar_t *Format, _locale_t Locale, ...);
int _fwscanf_s_l(FILE *File, const wchar_t *Format, _locale_t Locale, ...);
void __cdecl _fxrstor(const void *);
void __cdecl _fxsave(void *);
char *__cdecl _gcvt(double Val, int NumOfDigits, char *DstBuf);
errno_t __cdecl _gcvt_s(char *DstBuf, size_t Size, double Val, int NumOfDigits);
_locale_t __cdecl _get_current_locale();
errno_t __cdecl _get_daylight(int *Daylight);
errno_t __cdecl _get_doserrno(unsigned int *Value);
errno_t __cdecl _get_dstbias(int *Daylight_savings_bias);
errno_t __cdecl _get_errno(int *Value);
errno_t __cdecl _get_fmode(int *PMode);
intptr_t __cdecl _get_heap_handle();
_invalid_parameter_handler __cdecl _get_invalid_parameter_handler();
intptr_t __cdecl _get_osfhandle(int FileHandle);
unsigned int __cdecl _get_output_format();
errno_t __cdecl _get_pgmptr(char **Value);
int __cdecl _get_printf_count_output();
_purecall_handler __cdecl _get_purecall_handler();
errno_t __cdecl _get_timezone(int *Timezone);
errno_t __cdecl _get_tzname(size_t *ReturnValue, char *Buffer, size_t SizeInBytes, int Index);
errno_t __cdecl _get_wpgmptr(wchar_t **Value);
int __cdecl _getch();
int __cdecl _getch_nolock();
int __cdecl _getche();
int __cdecl _getche_nolock();
char *__cdecl _getcwd(char *DstBuf, int SizeInBytes);
char *__cdecl _getdcwd(int Drive, char *DstBuf, int SizeInBytes);
unsigned int __cdecl _getdiskfree(unsigned int Drive, struct _diskfree_t *DiskFree);
int (__cdecl *__cdecl _getdllprocaddr(intptr_t Handle, char *ProcedureName, intptr_t Ordinal))();
int __cdecl _getdrive();
unsigned int __cdecl _getdrives();
int __cdecl _getmaxstdio();
int __cdecl _getmbcp();
int __cdecl _getpid();
unsigned int __cdecl _getsystime(struct tm *Tm);
int __cdecl _getw(FILE *File);
wint_t __cdecl _getwch();
wint_t __cdecl _getwch_nolock();
wint_t __cdecl _getwche();
wint_t __cdecl _getwche_nolock();
wchar_t *__cdecl _getws(wchar_t *String);
wchar_t *__cdecl _getws_s(wchar_t *Str, size_t SizeInWords);
struct tm *__cdecl _gmtime32(const __time32_t *Time);
errno_t __cdecl _gmtime32_s(struct tm *Tm, const __time32_t *Time);
struct tm *__cdecl _gmtime64(const __time64_t *Time);
errno_t __cdecl _gmtime64_s(struct tm *Tm, const __time64_t *Time);
int __cdecl _heapadd(void *Memory, size_t Size);
int __cdecl _heapchk();
int __cdecl _heapmin();
int __cdecl _heapset(unsigned int Fill);
size_t __cdecl _heapused(size_t *Used, size_t *Commit);
int __cdecl _heapwalk(_HEAPINFO *EntryInfo);
double __cdecl _hypot(double X, double Y);
float __cdecl _hypotf(float X, float Y);
char *__cdecl _i64toa(__int64 Val, char *DstBuf, int Radix);
errno_t __cdecl _i64toa_s(__int64 Val, char *DstBuf, size_t Size, int Radix);
wchar_t *__cdecl _i64tow(__int64 Val, wchar_t *DstBuf, int Radix);
errno_t __cdecl _i64tow_s(__int64 Val, wchar_t *DstBuf, size_t SizeInWords, int Radix);
int __cdecl _inp(unsigned __int16);
unsigned int __cdecl _inpd(unsigned __int16);
unsigned __int16 __cdecl _inpw(unsigned __int16);
unsigned __int8 _interlockedbittestandreset(volatile int *, int);
unsigned __int8 _interlockedbittestandset(volatile int *, int);
void __cdecl _invalid_parameter_noinfo();
void __cdecl __noreturn _invalid_parameter_noinfo_noreturn();
void __cdecl __noreturn _invoke_watson(const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t);
void __cdecl _invpcid(unsigned int, void *);
int __cdecl _isalnum_l(int C, _locale_t Locale);
int __cdecl _isalpha_l(int C, _locale_t Locale);
int __cdecl _isatty(int FileHandle);
int __cdecl _iscntrl_l(int C, _locale_t Locale);
int __cdecl _isctype(int C, int Type);
int __cdecl _isctype_l(int C, int Type, _locale_t Locale);
int __cdecl _isdigit_l(int C, _locale_t Locale);
int __cdecl _isgraph_l(int C, _locale_t Locale);
int __cdecl _isleadbyte_l(int C, _locale_t Locale);
int __cdecl _islower_l(int C, _locale_t Locale);
int __cdecl _ismbbalnum(unsigned int C);
int __cdecl _ismbbalnum_l(unsigned int C, _locale_t Locale);
int __cdecl _ismbbalpha(unsigned int C);
int __cdecl _ismbbalpha_l(unsigned int C, _locale_t Locale);
int __cdecl _ismbbgraph(unsigned int C);
int __cdecl _ismbbgraph_l(unsigned int C, _locale_t Locale);
int __cdecl _ismbbkalnum(unsigned int C);
int __cdecl _ismbbkalnum_l(unsigned int C, _locale_t Locale);
int __cdecl _ismbbkana(unsigned int C);
int __cdecl _ismbbkana_l(unsigned int C, _locale_t Locale);
int __cdecl _ismbbkprint(unsigned int C);
int __cdecl _ismbbkprint_l(unsigned int C, _locale_t Locale);
int __cdecl _ismbbkpunct(unsigned int C);
int __cdecl _ismbbkpunct_l(unsigned int C, _locale_t Locale);
int __cdecl _ismbblead(unsigned int C);
int __cdecl _ismbblead_l(unsigned int C, _locale_t Locale);
int __cdecl _ismbbprint(unsigned int C);
int __cdecl _ismbbprint_l(unsigned int C, _locale_t Locale);
int __cdecl _ismbbpunct(unsigned int C);
int __cdecl _ismbbpunct_l(unsigned int C, _locale_t Locale);
int __cdecl _ismbbtrail(unsigned int C);
int __cdecl _ismbbtrail_l(unsigned int C, _locale_t Locale);
int __cdecl _ismbcalnum(unsigned int Ch);
int __cdecl _ismbcalnum_l(unsigned int Ch, _locale_t Locale);
int __cdecl _ismbcalpha(unsigned int Ch);
int __cdecl _ismbcalpha_l(unsigned int Ch, _locale_t Locale);
int __cdecl _ismbcdigit(unsigned int Ch);
int __cdecl _ismbcdigit_l(unsigned int Ch, _locale_t Locale);
int __cdecl _ismbcgraph(unsigned int Ch);
int __cdecl _ismbcgraph_l(unsigned int Ch, _locale_t Locale);
int __cdecl _ismbchira(unsigned int Ch);
int __cdecl _ismbchira_l(unsigned int Ch, _locale_t Locale);
int __cdecl _ismbckata(unsigned int Ch);
int __cdecl _ismbckata_l(unsigned int Ch, _locale_t Locale);
int __cdecl _ismbcl0(unsigned int Ch);
int __cdecl _ismbcl0_l(unsigned int Ch, _locale_t Locale);
int __cdecl _ismbcl1(unsigned int Ch);
int __cdecl _ismbcl1_l(unsigned int Ch, _locale_t Locale);
int __cdecl _ismbcl2(unsigned int Ch);
int __cdecl _ismbcl2_l(unsigned int Ch, _locale_t Locale);
int __cdecl _ismbclegal(unsigned int Ch);
int __cdecl _ismbclegal_l(unsigned int Ch, _locale_t Locale);
int __cdecl _ismbclower(unsigned int Ch);
int __cdecl _ismbclower_l(unsigned int Ch, _locale_t Locale);
int __cdecl _ismbcprint(unsigned int Ch);
int __cdecl _ismbcprint_l(unsigned int Ch, _locale_t Locale);
int __cdecl _ismbcpunct(unsigned int Ch);
int __cdecl _ismbcpunct_l(unsigned int Ch, _locale_t Locale);
int __cdecl _ismbcspace(unsigned int Ch);
int __cdecl _ismbcspace_l(unsigned int Ch, _locale_t Locale);
int __cdecl _ismbcsymbol(unsigned int Ch);
int __cdecl _ismbcsymbol_l(unsigned int Ch, _locale_t Locale);
int __cdecl _ismbcupper(unsigned int Ch);
int __cdecl _ismbcupper_l(unsigned int Ch, _locale_t Locale);
int __cdecl _ismbslead(const unsigned __int8 *Str, const unsigned __int8 *Pos);
int __cdecl _ismbslead_l(const unsigned __int8 *Str, const unsigned __int8 *Pos, _locale_t Locale);
int __cdecl _ismbstrail(const unsigned __int8 *Str, const unsigned __int8 *Pos);
int __cdecl _ismbstrail_l(const unsigned __int8 *Str, const unsigned __int8 *Pos, _locale_t Locale);
int __cdecl _isnan(double X);
int __cdecl _isprint_l(int C, _locale_t Locale);
int __cdecl _ispunct_l(int C, _locale_t Locale);
int __cdecl _isspace_l(int C, _locale_t Locale);
int __cdecl _isupper_l(int C, _locale_t Locale);
int __cdecl _iswalnum_l(wint_t C, _locale_t Locale);
int __cdecl _iswalpha_l(wint_t C, _locale_t Locale);
int __cdecl _iswcntrl_l(wint_t C, _locale_t Locale);
int __cdecl _iswcsym_l(wint_t C, _locale_t Locale);
int __cdecl _iswcsymf_l(wint_t C, _locale_t Locale);
int __cdecl _iswctype_l(wint_t C, wctype_t Type, _locale_t Locale);
int __cdecl _iswdigit_l(wint_t C, _locale_t Locale);
int __cdecl _iswgraph_l(wint_t C, _locale_t Locale);
int __cdecl _iswlower_l(wint_t C, _locale_t Locale);
int __cdecl _iswprint_l(wint_t C, _locale_t Locale);
int __cdecl _iswpunct_l(wint_t C, _locale_t Locale);
int __cdecl _iswspace_l(wint_t C, _locale_t Locale);
int __cdecl _iswupper_l(wint_t C, _locale_t Locale);
int __cdecl _iswxdigit_l(wint_t C, _locale_t Locale);
int __cdecl _isxdigit_l(int C, _locale_t Locale);
char *__cdecl _itoa(int Value, char *Dest, int Radix);
errno_t __cdecl _itoa_s(int Value, char *DstBuf, size_t Size, int Radix);
wchar_t *__cdecl _itow(int Value, wchar_t *Dest, int Radix);
errno_t __cdecl _itow_s(int Val, wchar_t *DstBuf, size_t SizeInWords, int Radix);
double __cdecl _j0(double X);
double __cdecl _j1(double X);
double __cdecl _jn(int X, double Y);
int __cdecl _kbhit();
void *__cdecl _lfind(const void *Key, const void *Base, unsigned int *NumOfElements, unsigned int SizeOfElements, int (__cdecl *PtFuncCompare)(const void *, const void *));
void *__cdecl _lfind_s(const void *Key, const void *Base, unsigned int *NumOfElements, size_t SizeOfElements, int (__cdecl *PtFuncCompare)(void *, const void *, const void *), void *Context);
intptr_t __cdecl _loaddll(char *Filename);
struct tm *__cdecl _localtime32(const __time32_t *Time);
errno_t __cdecl _localtime32_s(struct tm *Tm, const __time32_t *Time);
struct tm *__cdecl _localtime64(const __time64_t *Time);
errno_t __cdecl _localtime64_s(struct tm *Tm, const __time64_t *Time);
void __cdecl _lock_file(FILE *File);
int __cdecl _locking(int FileHandle, int LockMode, int NumOfBytes);
double __cdecl _logb(double X);
unsigned int __cdecl _lrotl(unsigned int Val, int Shift);
unsigned int __cdecl _lrotr(unsigned int Val, int Shift);
void *__cdecl _lsearch(const void *Key, void *Base, unsigned int *NumOfElements, unsigned int SizeOfElements, int (__cdecl *PtFuncCompare)(const void *, const void *));
void *__cdecl _lsearch_s(const void *Key, void *Base, unsigned int *NumOfElements, size_t SizeOfElements, int (__cdecl *PtFuncCompare)(void *, const void *, const void *), void *Context);
int __cdecl _lseek(int FileHandle, int Offset, int Origin);
__int64 __cdecl _lseeki64(int FileHandle, __int64 Offset, int Origin);
char *__cdecl _ltoa(int Value, char *Dest, int Radix);
errno_t __cdecl _ltoa_s(int Val, char *DstBuf, size_t Size, int Radix);
wchar_t *__cdecl _ltow(int Value, wchar_t *Dest, int Radix);
errno_t __cdecl _ltow_s(int Val, wchar_t *DstBuf, size_t SizeInWords, int Radix);
unsigned int _lzcnt_u32(unsigned int);
void _m_empty(void);
void _m_femms(void);
__m64 _m_from_float(float);
__m64 _m_from_int(int I);
void _m_maskmovq(__m64, __m64, char *);
__m64 _m_packssdw(__m64 MM1, __m64 MM2);
__m64 _m_packsswb(__m64 MM1, __m64 MM2);
__m64 _m_packuswb(__m64 MM1, __m64 MM2);
__m64 _m_paddb(__m64 MM1, __m64 MM2);
__m64 _m_paddd(__m64 MM1, __m64 MM2);
__m64 _m_paddsb(__m64 MM1, __m64 MM2);
__m64 _m_paddsw(__m64 MM1, __m64 MM2);
__m64 _m_paddusb(__m64 MM1, __m64 MM2);
__m64 _m_paddusw(__m64 MM1, __m64 MM2);
__m64 _m_paddw(__m64 MM1, __m64 MM2);
__m64 _m_pand(__m64 MM1, __m64 MM2);
__m64 _m_pandn(__m64 MM1, __m64 MM2);
__m64 _m_pavgb(__m64, __m64);
__m64 _m_pavgusb(__m64, __m64);
__m64 _m_pavgw(__m64, __m64);
__m64 _m_pcmpeqb(__m64 MM1, __m64 MM2);
__m64 _m_pcmpeqd(__m64 MM1, __m64 MM2);
__m64 _m_pcmpeqw(__m64 MM1, __m64 MM2);
__m64 _m_pcmpgtb(__m64 MM1, __m64 MM2);
__m64 _m_pcmpgtd(__m64 MM1, __m64 MM2);
__m64 _m_pcmpgtw(__m64 MM1, __m64 MM2);
int _m_pextrw(__m64, int);
__m64 _m_pf2id(__m64);
__m64 _m_pf2iw(__m64);
__m64 _m_pfacc(__m64, __m64);
__m64 _m_pfadd(__m64, __m64);
__m64 _m_pfcmpeq(__m64, __m64);
__m64 _m_pfcmpge(__m64, __m64);
__m64 _m_pfcmpgt(__m64, __m64);
__m64 _m_pfmax(__m64, __m64);
__m64 _m_pfmin(__m64, __m64);
__m64 _m_pfmul(__m64, __m64);
__m64 _m_pfnacc(__m64, __m64);
__m64 _m_pfpnacc(__m64, __m64);
__m64 _m_pfrcp(__m64);
__m64 _m_pfrcpit1(__m64, __m64);
__m64 _m_pfrcpit2(__m64, __m64);
__m64 _m_pfrsqit1(__m64, __m64);
__m64 _m_pfrsqrt(__m64);
__m64 _m_pfsub(__m64, __m64);
__m64 _m_pfsubr(__m64, __m64);
__m64 _m_pi2fd(__m64);
__m64 _m_pi2fw(__m64);
__m64 _m_pinsrw(__m64, int, int);
__m64 _m_pmaddwd(__m64 MM1, __m64 MM2);
__m64 _m_pmaxsw(__m64, __m64);
__m64 _m_pmaxub(__m64, __m64);
__m64 _m_pminsw(__m64, __m64);
__m64 _m_pminub(__m64, __m64);
int _m_pmovmskb(__m64);
__m64 _m_pmulhrw(__m64, __m64);
__m64 _m_pmulhuw(__m64, __m64);
__m64 _m_pmulhw(__m64 MM1, __m64 MM2);
__m64 _m_pmullw(__m64 MM1, __m64 MM2);
__m64 _m_por(__m64 MM1, __m64 MM2);
void _m_prefetch(void *);
void _m_prefetchw(const volatile void *Source);
__m64 _m_psadbw(__m64, __m64);
__m64 _m_pshufw(__m64, int);
__m64 _m_pslld(__m64 M, __m64 Count);
__m64 _m_pslldi(__m64 M, int Count);
__m64 _m_psllq(__m64 M, __m64 Count);
__m64 _m_psllqi(__m64 M, int Count);
__m64 _m_psllw(__m64 M, __m64 Count);
__m64 _m_psllwi(__m64 M, int Count);
__m64 _m_psrad(__m64 M, __m64 Count);
__m64 _m_psradi(__m64 M, int Count);
__m64 _m_psraw(__m64 M, __m64 Count);
__m64 _m_psrawi(__m64 M, int Count);
__m64 _m_psrld(__m64 M, __m64 Count);
__m64 _m_psrldi(__m64 M, int Count);
__m64 _m_psrlq(__m64 M, __m64 Count);
__m64 _m_psrlqi(__m64 M, int Count);
__m64 _m_psrlw(__m64 M, __m64 Count);
__m64 _m_psrlwi(__m64 M, int Count);
__m64 _m_psubb(__m64 MM1, __m64 MM2);
__m64 _m_psubd(__m64 MM1, __m64 MM2);
__m64 _m_psubsb(__m64 MM1, __m64 MM2);
__m64 _m_psubsw(__m64 MM1, __m64 MM2);
__m64 _m_psubusb(__m64 MM1, __m64 MM2);
__m64 _m_psubusw(__m64 MM1, __m64 MM2);
__m64 _m_psubw(__m64 MM1, __m64 MM2);
__m64 _m_pswapd(__m64);
__m64 _m_punpckhbw(__m64 MM1, __m64 MM2);
__m64 _m_punpckhdq(__m64 MM1, __m64 MM2);
__m64 _m_punpckhwd(__m64 MM1, __m64 MM2);
__m64 _m_punpcklbw(__m64 MM1, __m64 MM2);
__m64 _m_punpckldq(__m64 MM1, __m64 MM2);
__m64 _m_punpcklwd(__m64 MM1, __m64 MM2);
__m64 _m_pxor(__m64 MM1, __m64 MM2);
float _m_to_float(__m64);
int _m_to_int(__m64 M);
void __cdecl _makepath(char *Path, const char *Drive, const char *Dir, const char *Filename, const char *Ext);
errno_t __cdecl _makepath_s(char *PathResult, size_t SizeInWords, const char *Drive, const char *Dir, const char *Filename, const char *Ext);
int __cdecl _matherr(struct _exception *Except);
unsigned int __cdecl _mbbtombc(unsigned int Ch);
unsigned int __cdecl _mbbtombc_l(unsigned int Ch, _locale_t Locale);
int __cdecl _mbbtype(unsigned __int8 Ch, int CType);
int __cdecl _mbbtype_l(unsigned __int8 Ch, int CType, _locale_t Locale);
unsigned __int8 _mbcasemap[];
void __cdecl _mbccpy(unsigned __int8 *Dst, const unsigned __int8 *Src);
void __cdecl _mbccpy_l(unsigned __int8 *Dst, const unsigned __int8 *Src, _locale_t Locale);
errno_t __cdecl _mbccpy_s(unsigned __int8 *Dst, size_t SizeInBytes, int *PCopied, const unsigned __int8 *Src);
errno_t __cdecl _mbccpy_s_l(unsigned __int8 *Dst, size_t DstSizeInBytes, int *PCopied, const unsigned __int8 *Src, _locale_t Locale);
unsigned int __cdecl _mbcjistojms(unsigned int Ch);
unsigned int __cdecl _mbcjistojms_l(unsigned int Ch, _locale_t Locale);
unsigned int __cdecl _mbcjmstojis(unsigned int Ch);
unsigned int __cdecl _mbcjmstojis_l(unsigned int Ch, _locale_t Locale);
size_t __cdecl _mbclen(const unsigned __int8 *Str);
size_t __cdecl _mbclen_l(const unsigned __int8 *Str, _locale_t Locale);
unsigned int __cdecl _mbctohira(unsigned int Ch);
unsigned int __cdecl _mbctohira_l(unsigned int Ch, _locale_t Locale);
unsigned int __cdecl _mbctokata(unsigned int Ch);
unsigned int __cdecl _mbctokata_l(unsigned int Ch, _locale_t Locale);
unsigned int __cdecl _mbctolower(unsigned int Ch);
unsigned int __cdecl _mbctolower_l(unsigned int Ch, _locale_t Locale);
unsigned int __cdecl _mbctombb(unsigned int Ch);
unsigned int __cdecl _mbctombb_l(unsigned int Ch, _locale_t Locale);
unsigned int __cdecl _mbctoupper(unsigned int Ch);
unsigned int __cdecl _mbctoupper_l(unsigned int Ch, _locale_t Locale);
unsigned __int8 _mbctype[];
int __cdecl _mblen_l(const char *Ch, size_t MaxCount, _locale_t Locale);
int __cdecl _mbsbtype(const unsigned __int8 *Str, size_t Pos);
int __cdecl _mbsbtype_l(const unsigned __int8 *Str, size_t Pos, _locale_t Locale);
unsigned __int8 *__cdecl _mbscat(unsigned __int8 *Dest, const unsigned __int8 *Source);
unsigned __int8 *__cdecl _mbscat_l(unsigned __int8 *Dest, const unsigned __int8 *Source, _locale_t Locale);
errno_t __cdecl _mbscat_s(unsigned __int8 *Dst, size_t SizeInBytes, const unsigned __int8 *Src);
errno_t __cdecl _mbscat_s_l(unsigned __int8 *Dst, size_t DstSizeInBytes, const unsigned __int8 *Src, _locale_t Locale);
unsigned __int8 *__cdecl _mbschr(const unsigned __int8 *Str, unsigned int Ch);
unsigned __int8 *__cdecl _mbschr_l(const unsigned __int8 *Str, unsigned int Ch, _locale_t Locale);
int __cdecl _mbscmp(const unsigned __int8 *Str1, const unsigned __int8 *Str2);
int __cdecl _mbscmp_l(const unsigned __int8 *Str1, const unsigned __int8 *Str2, _locale_t Locale);
int __cdecl _mbscoll(const unsigned __int8 *Str1, const unsigned __int8 *Str2);
int __cdecl _mbscoll_l(const unsigned __int8 *Str1, const unsigned __int8 *Str2, _locale_t Locale);
unsigned __int8 *__cdecl _mbscpy(unsigned __int8 *Dest, const unsigned __int8 *Source);
unsigned __int8 *__cdecl _mbscpy_l(unsigned __int8 *Dest, const unsigned __int8 *Source, _locale_t Locale);
errno_t __cdecl _mbscpy_s(unsigned __int8 *Dst, size_t SizeInBytes, const unsigned __int8 *Src);
errno_t __cdecl _mbscpy_s_l(unsigned __int8 *Dst, size_t DstSizeInBytes, const unsigned __int8 *Src, _locale_t Locale);
size_t __cdecl _mbscspn(const unsigned __int8 *Str, const unsigned __int8 *Control);
size_t __cdecl _mbscspn_l(const unsigned __int8 *Str, const unsigned __int8 *Control, _locale_t Locale);
unsigned __int8 *__cdecl _mbsdec(const unsigned __int8 *Start, const unsigned __int8 *Pos);
unsigned __int8 *__cdecl _mbsdec_l(const unsigned __int8 *Start, const unsigned __int8 *Pos, _locale_t Locale);
unsigned __int8 *__cdecl _mbsdup(const unsigned __int8 *Str);
int __cdecl _mbsicmp(const unsigned __int8 *Str1, const unsigned __int8 *Str2);
int __cdecl _mbsicmp_l(const unsigned __int8 *Str1, const unsigned __int8 *Str2, _locale_t Locale);
int __cdecl _mbsicoll(const unsigned __int8 *Str1, const unsigned __int8 *Str2);
int __cdecl _mbsicoll_l(const unsigned __int8 *Str1, const unsigned __int8 *Str2, _locale_t Locale);
unsigned __int8 *__cdecl _mbsinc(const unsigned __int8 *Ptr);
unsigned __int8 *__cdecl _mbsinc_l(const unsigned __int8 *Ptr, _locale_t Locale);
size_t __cdecl _mbslen(const unsigned __int8 *Str);
size_t __cdecl _mbslen_l(const unsigned __int8 *Str, _locale_t Locale);
unsigned __int8 *__cdecl _mbslwr(unsigned __int8 *String);
unsigned __int8 *__cdecl _mbslwr_l(unsigned __int8 *String, _locale_t Locale);
errno_t __cdecl _mbslwr_s(unsigned __int8 *Str, size_t SizeInBytes);
errno_t __cdecl _mbslwr_s_l(unsigned __int8 *Str, size_t SizeInBytes, _locale_t Locale);
unsigned __int8 *__cdecl _mbsnbcat(unsigned __int8 *Dest, const unsigned __int8 *Source, size_t Count);
unsigned __int8 *__cdecl _mbsnbcat_l(unsigned __int8 *Dest, const unsigned __int8 *Source, size_t Count, _locale_t Locale);
errno_t __cdecl _mbsnbcat_s(unsigned __int8 *Dst, size_t SizeInBytes, const unsigned __int8 *Src, size_t MaxCount);
errno_t __cdecl _mbsnbcat_s_l(unsigned __int8 *Dst, size_t DstSizeInBytes, const unsigned __int8 *Src, size_t MaxCount, _locale_t Locale);
int __cdecl _mbsnbcmp(const unsigned __int8 *Str1, const unsigned __int8 *Str2, size_t MaxCount);
int __cdecl _mbsnbcmp_l(const unsigned __int8 *Str1, const unsigned __int8 *Str2, size_t MaxCount, _locale_t Locale);
size_t __cdecl _mbsnbcnt(const unsigned __int8 *Str, size_t MaxCount);
size_t __cdecl _mbsnbcnt_l(const unsigned __int8 *Str, size_t MaxCount, _locale_t Locale);
int __cdecl _mbsnbcoll(const unsigned __int8 *Str1, const unsigned __int8 *Str2, size_t MaxCount);
int __cdecl _mbsnbcoll_l(const unsigned __int8 *Str1, const unsigned __int8 *Str2, size_t MaxCount, _locale_t Locale);
unsigned __int8 *__cdecl _mbsnbcpy(unsigned __int8 *Dest, const unsigned __int8 *Source, size_t Count);
unsigned __int8 *__cdecl _mbsnbcpy_l(unsigned __int8 *Dest, const unsigned __int8 *Source, size_t Count, _locale_t Locale);
errno_t __cdecl _mbsnbcpy_s(unsigned __int8 *Dst, size_t SizeInBytes, const unsigned __int8 *Src, size_t MaxCount);
errno_t __cdecl _mbsnbcpy_s_l(unsigned __int8 *Dst, size_t DstSizeInBytes, const unsigned __int8 *Src, size_t MaxCount, _locale_t Locale);
int __cdecl _mbsnbicmp(const unsigned __int8 *Str1, const unsigned __int8 *Str2, size_t MaxCount);
int __cdecl _mbsnbicmp_l(const unsigned __int8 *Str1, const unsigned __int8 *Str2, size_t MaxCount, _locale_t Locale);
int __cdecl _mbsnbicoll(const unsigned __int8 *Str1, const unsigned __int8 *Str2, size_t MaxCount);
int __cdecl _mbsnbicoll_l(const unsigned __int8 *Str1, const unsigned __int8 *Str2, size_t MaxCount, _locale_t Locale);
unsigned __int8 *__cdecl _mbsnbset(unsigned __int8 *String, unsigned int Val, size_t MaxCount);
unsigned __int8 *__cdecl _mbsnbset_l(unsigned __int8 *String, unsigned int Val, size_t MaxCount, _locale_t Locale);
errno_t __cdecl _mbsnbset_s(unsigned __int8 *Dst, size_t SizeInBytes, unsigned int Ch, size_t MaxCount);
errno_t __cdecl _mbsnbset_s_l(unsigned __int8 *Dst, size_t DstSizeInBytes, unsigned int Ch, size_t MaxCount, _locale_t Locale);
unsigned __int8 *__cdecl _mbsncat(unsigned __int8 *Dest, const unsigned __int8 *Source, size_t Count);
unsigned __int8 *__cdecl _mbsncat_l(unsigned __int8 *Dest, const unsigned __int8 *Source, size_t Count, _locale_t Locale);
errno_t __cdecl _mbsncat_s(unsigned __int8 *Dst, size_t SizeInBytes, const unsigned __int8 *Src, size_t MaxCount);
errno_t __cdecl _mbsncat_s_l(unsigned __int8 *Dst, size_t DstSizeInBytes, const unsigned __int8 *Src, size_t MaxCount, _locale_t Locale);
size_t __cdecl _mbsnccnt(const unsigned __int8 *Str, size_t MaxCount);
size_t __cdecl _mbsnccnt_l(const unsigned __int8 *Str, size_t MaxCount, _locale_t Locale);
int __cdecl _mbsncmp(const unsigned __int8 *Str1, const unsigned __int8 *Str2, size_t MaxCount);
int __cdecl _mbsncmp_l(const unsigned __int8 *Str1, const unsigned __int8 *Str2, size_t MaxCount, _locale_t Locale);
int __cdecl _mbsncoll(const unsigned __int8 *Str1, const unsigned __int8 *Str2, size_t MaxCount);
int __cdecl _mbsncoll_l(const unsigned __int8 *Str1, const unsigned __int8 *Str2, size_t MaxCount, _locale_t Locale);
unsigned __int8 *__cdecl _mbsncpy(unsigned __int8 *Dest, const unsigned __int8 *Source, size_t Count);
unsigned __int8 *__cdecl _mbsncpy_l(unsigned __int8 *Dest, const unsigned __int8 *Source, size_t Count, _locale_t Locale);
errno_t __cdecl _mbsncpy_s(unsigned __int8 *Dst, size_t SizeInBytes, const unsigned __int8 *Src, size_t MaxCount);
errno_t __cdecl _mbsncpy_s_l(unsigned __int8 *Dst, size_t DstSizeInBytes, const unsigned __int8 *Src, size_t MaxCount, _locale_t Locale);
unsigned int __cdecl _mbsnextc(const unsigned __int8 *Str);
unsigned int __cdecl _mbsnextc_l(const unsigned __int8 *Str, _locale_t Locale);
int __cdecl _mbsnicmp(const unsigned __int8 *Str1, const unsigned __int8 *Str2, size_t MaxCount);
int __cdecl _mbsnicmp_l(const unsigned __int8 *Str1, const unsigned __int8 *Str2, size_t MaxCount, _locale_t Locale);
int __cdecl _mbsnicoll(const unsigned __int8 *Str1, const unsigned __int8 *Str2, size_t MaxCount);
int __cdecl _mbsnicoll_l(const unsigned __int8 *Str1, const unsigned __int8 *Str2, size_t MaxCount, _locale_t Locale);
unsigned __int8 *__cdecl _mbsninc(const unsigned __int8 *Str, size_t Count);
unsigned __int8 *__cdecl _mbsninc_l(const unsigned __int8 *Str, size_t Count, _locale_t Locale);
size_t __cdecl _mbsnlen(const unsigned __int8 *Str, size_t MaxCount);
size_t __cdecl _mbsnlen_l(const unsigned __int8 *Str, size_t MaxCount, _locale_t Locale);
unsigned __int8 *__cdecl _mbsnset(unsigned __int8 *String, unsigned int Val, size_t MaxCount);
unsigned __int8 *__cdecl _mbsnset_l(unsigned __int8 *String, unsigned int Val, size_t MaxCount, _locale_t Locale);
errno_t __cdecl _mbsnset_s(unsigned __int8 *Dst, size_t SizeInBytes, unsigned int Val, size_t MaxCount);
errno_t __cdecl _mbsnset_s_l(unsigned __int8 *Dst, size_t DstSizeInBytes, unsigned int Val, size_t MaxCount, _locale_t Locale);
unsigned __int8 *__cdecl _mbspbrk(const unsigned __int8 *Str, const unsigned __int8 *Control);
unsigned __int8 *__cdecl _mbspbrk_l(const unsigned __int8 *Str, const unsigned __int8 *Control, _locale_t Locale);
unsigned __int8 *__cdecl _mbsrchr(const unsigned __int8 *Str, unsigned int Ch);
unsigned __int8 *__cdecl _mbsrchr_l(const unsigned __int8 *Str, unsigned int Ch, _locale_t Locale);
unsigned __int8 *__cdecl _mbsrev(unsigned __int8 *Str);
unsigned __int8 *__cdecl _mbsrev_l(unsigned __int8 *Str, _locale_t Locale);
unsigned __int8 *__cdecl _mbsset(unsigned __int8 *String, unsigned int Val);
unsigned __int8 *__cdecl _mbsset_l(unsigned __int8 *String, unsigned int Val, _locale_t Locale);
errno_t __cdecl _mbsset_s(unsigned __int8 *Dst, size_t SizeInBytes, unsigned int Val);
errno_t __cdecl _mbsset_s_l(unsigned __int8 *Dst, size_t DstSizeInBytes, unsigned int Val, _locale_t Locale);
size_t __cdecl _mbsspn(const unsigned __int8 *Str, const unsigned __int8 *Control);
size_t __cdecl _mbsspn_l(const unsigned __int8 *Str, const unsigned __int8 *Control, _locale_t Locale);
unsigned __int8 *__cdecl _mbsspnp(const unsigned __int8 *Str1, const unsigned __int8 *Str2);
unsigned __int8 *__cdecl _mbsspnp_l(const unsigned __int8 *Str1, const unsigned __int8 *Str2, _locale_t Locale);
unsigned __int8 *__cdecl _mbsstr(const unsigned __int8 *Str, const unsigned __int8 *Substr);
unsigned __int8 *__cdecl _mbsstr_l(const unsigned __int8 *Str, const unsigned __int8 *Substr, _locale_t Locale);
unsigned __int8 *__cdecl _mbstok(unsigned __int8 *Str, const unsigned __int8 *Delim);
unsigned __int8 *__cdecl _mbstok_l(unsigned __int8 *Str, const unsigned __int8 *Delim, _locale_t Locale);
unsigned __int8 *__cdecl _mbstok_s(unsigned __int8 *Str, const unsigned __int8 *Delim, unsigned __int8 **Context);
unsigned __int8 *__cdecl _mbstok_s_l(unsigned __int8 *Str, const unsigned __int8 *Delim, unsigned __int8 **Context, _locale_t Locale);
size_t __cdecl _mbstowcs_l(wchar_t *Dest, const char *Source, size_t MaxCount, _locale_t Locale);
errno_t __cdecl _mbstowcs_s_l(size_t *PtNumOfCharConverted, wchar_t *DstBuf, size_t SizeInWords, const char *SrcBuf, size_t MaxCount, _locale_t Locale);
size_t __cdecl _mbstrlen(const char *Str);
size_t __cdecl _mbstrlen_l(const char *Str, _locale_t Locale);
size_t __cdecl _mbstrnlen(const char *Str, size_t MaxCount);
size_t __cdecl _mbstrnlen_l(const char *Str, size_t MaxCount, _locale_t Locale);
unsigned __int8 *__cdecl _mbsupr(unsigned __int8 *String);
unsigned __int8 *__cdecl _mbsupr_l(unsigned __int8 *String, _locale_t Locale);
errno_t __cdecl _mbsupr_s(unsigned __int8 *Str, size_t SizeInBytes);
errno_t __cdecl _mbsupr_s_l(unsigned __int8 *Str, size_t SizeInBytes, _locale_t Locale);
int __cdecl _mbtowc_l(wchar_t *DstCh, const char *SrcCh, size_t SrcSizeInBytes, _locale_t Locale);
void *__cdecl _memccpy(void *Dst, const void *Src, int Val, size_t MaxCount);
int __cdecl _memicmp(const void *Buf1, const void *Buf2, size_t Size);
int __cdecl _memicmp_l(const void *Buf1, const void *Buf2, size_t Size, _locale_t Locale);
int __cdecl _mkdir(const char *Path);
static time_t __cdecl _mkgmtime(struct tm *Tm);
__time32_t __cdecl _mkgmtime32(struct tm *Tm);
__time64_t __cdecl _mkgmtime64(struct tm *Tm);
char *__cdecl _mktemp(char *TemplateName);
errno_t __cdecl _mktemp_s(char *TemplateName, size_t Size);
__time32_t __cdecl _mktime32(struct tm *Tm);
__time64_t __cdecl _mktime64(struct tm *Tm);
__m256i __cdecl _mm256_abs_epi16(__m256i);
__m256i __cdecl _mm256_abs_epi32(__m256i);
__m256i __cdecl _mm256_abs_epi8(__m256i);
__m256i __cdecl _mm256_add_epi16(__m256i, __m256i);
__m256i __cdecl _mm256_add_epi32(__m256i, __m256i);
__m256i __cdecl _mm256_add_epi64(__m256i, __m256i);
__m256i __cdecl _mm256_add_epi8(__m256i, __m256i);
__m256d __cdecl _mm256_add_pd(__m256d, __m256d);
__m256 __cdecl _mm256_add_ps(__m256, __m256);
__m256i __cdecl _mm256_adds_epi16(__m256i, __m256i);
__m256i __cdecl _mm256_adds_epi8(__m256i, __m256i);
__m256i __cdecl _mm256_adds_epu16(__m256i, __m256i);
__m256i __cdecl _mm256_adds_epu8(__m256i, __m256i);
__m256d __cdecl _mm256_addsub_pd(__m256d, __m256d);
__m256 __cdecl _mm256_addsub_ps(__m256, __m256);
__m256i __cdecl _mm256_alignr_epi8(__m256i, __m256i, const int);
__m256d __cdecl _mm256_and_pd(__m256d, __m256d);
__m256 __cdecl _mm256_and_ps(__m256, __m256);
__m256i __cdecl _mm256_and_si256(__m256i, __m256i);
__m256d __cdecl _mm256_andnot_pd(__m256d, __m256d);
__m256 __cdecl _mm256_andnot_ps(__m256, __m256);
__m256i __cdecl _mm256_andnot_si256(__m256i, __m256i);
__m256i __cdecl _mm256_avg_epu16(__m256i, __m256i);
__m256i __cdecl _mm256_avg_epu8(__m256i, __m256i);
__m256i __cdecl _mm256_blend_epi16(__m256i, __m256i, const int);
__m256i __cdecl _mm256_blend_epi32(__m256i, __m256i, const int);
__m256d __cdecl _mm256_blend_pd(__m256d, __m256d, const int);
__m256 __cdecl _mm256_blend_ps(__m256, __m256, const int);
__m256i __cdecl _mm256_blendv_epi8(__m256i, __m256i, __m256i);
__m256d __cdecl _mm256_blendv_pd(__m256d, __m256d, __m256d);
__m256 __cdecl _mm256_blendv_ps(__m256, __m256, __m256);
__m256d __cdecl _mm256_broadcast_pd(const __m128d *);
__m256 __cdecl _mm256_broadcast_ps(const __m128 *);
__m256d __cdecl _mm256_broadcast_sd(const double *);
__m256 __cdecl _mm256_broadcast_ss(const float *);
__m256i __cdecl _mm256_broadcastb_epi8(__m128i);
__m256i __cdecl _mm256_broadcastd_epi32(__m128i);
__m256i __cdecl _mm256_broadcastq_epi64(__m128i);
__m256d __cdecl _mm256_broadcastsd_pd(__m128d);
__m256i __cdecl _mm256_broadcastsi128_si256(__m128i);
__m256 __cdecl _mm256_broadcastss_ps(__m128);
__m256i __cdecl _mm256_broadcastw_epi16(__m128i);
__m256d __cdecl _mm256_castpd128_pd256(__m128d);
__m128d __cdecl _mm256_castpd256_pd128(__m256d);
__m256 __cdecl _mm256_castpd_ps(__m256d);
__m256i __cdecl _mm256_castpd_si256(__m256d);
__m256 __cdecl _mm256_castps128_ps256(__m128);
__m128 __cdecl _mm256_castps256_ps128(__m256);
__m256d __cdecl _mm256_castps_pd(__m256);
__m256i __cdecl _mm256_castps_si256(__m256);
__m256i __cdecl _mm256_castsi128_si256(__m128i);
__m256d __cdecl _mm256_castsi256_pd(__m256i);
__m256 __cdecl _mm256_castsi256_ps(__m256i);
__m128i __cdecl _mm256_castsi256_si128(__m256i);
__m256i _mm256_cmov_si256(__m256i, __m256i, __m256i);
__m256d __cdecl _mm256_cmp_pd(__m256d, __m256d, const int);
__m256 __cdecl _mm256_cmp_ps(__m256, __m256, const int);
__m256i __cdecl _mm256_cmpeq_epi16(__m256i, __m256i);
__m256i __cdecl _mm256_cmpeq_epi32(__m256i, __m256i);
__m256i __cdecl _mm256_cmpeq_epi64(__m256i, __m256i);
__m256i __cdecl _mm256_cmpeq_epi8(__m256i, __m256i);
__m256i __cdecl _mm256_cmpgt_epi16(__m256i, __m256i);
__m256i __cdecl _mm256_cmpgt_epi32(__m256i, __m256i);
__m256i __cdecl _mm256_cmpgt_epi64(__m256i, __m256i);
__m256i __cdecl _mm256_cmpgt_epi8(__m256i, __m256i);
__m256i __cdecl _mm256_cvtepi16_epi32(__m128i);
__m256i __cdecl _mm256_cvtepi16_epi64(__m128i);
__m256i __cdecl _mm256_cvtepi32_epi64(__m128i);
__m256d __cdecl _mm256_cvtepi32_pd(__m128i);
__m256 __cdecl _mm256_cvtepi32_ps(__m256i);
__m256i __cdecl _mm256_cvtepi8_epi16(__m128i);
__m256i __cdecl _mm256_cvtepi8_epi32(__m128i);
__m256i __cdecl _mm256_cvtepi8_epi64(__m128i);
__m256i __cdecl _mm256_cvtepu16_epi32(__m128i);
__m256i __cdecl _mm256_cvtepu16_epi64(__m128i);
__m256i __cdecl _mm256_cvtepu32_epi64(__m128i);
__m256i __cdecl _mm256_cvtepu8_epi16(__m128i);
__m256i __cdecl _mm256_cvtepu8_epi32(__m128i);
__m256i __cdecl _mm256_cvtepu8_epi64(__m128i);
__m128i __cdecl _mm256_cvtpd_epi32(__m256d);
__m128 __cdecl _mm256_cvtpd_ps(__m256d);
__m256 __cdecl _mm256_cvtph_ps(__m128i);
__m256i __cdecl _mm256_cvtps_epi32(__m256);
__m256d __cdecl _mm256_cvtps_pd(__m128);
__m128i __cdecl _mm256_cvtps_ph(__m256, int);
__m128i __cdecl _mm256_cvttpd_epi32(__m256d);
__m256i __cdecl _mm256_cvttps_epi32(__m256);
__m256d __cdecl _mm256_div_pd(__m256d, __m256d);
__m256 __cdecl _mm256_div_ps(__m256, __m256);
__m256 __cdecl _mm256_dp_ps(__m256, __m256, const int);
__m128d __cdecl _mm256_extractf128_pd(__m256d, const int);
__m128 __cdecl _mm256_extractf128_ps(__m256, const int);
__m128i __cdecl _mm256_extractf128_si256(__m256i, const int);
__m128i __cdecl _mm256_extracti128_si256(__m256i, const int);
__m256d __cdecl _mm256_fmadd_pd(__m256d, __m256d, __m256d);
__m256 __cdecl _mm256_fmadd_ps(__m256, __m256, __m256);
__m256d __cdecl _mm256_fmaddsub_pd(__m256d, __m256d, __m256d);
__m256 __cdecl _mm256_fmaddsub_ps(__m256, __m256, __m256);
__m256d __cdecl _mm256_fmsub_pd(__m256d, __m256d, __m256d);
__m256 __cdecl _mm256_fmsub_ps(__m256, __m256, __m256);
__m256d __cdecl _mm256_fmsubadd_pd(__m256d, __m256d, __m256d);
__m256 __cdecl _mm256_fmsubadd_ps(__m256, __m256, __m256);
__m256d __cdecl _mm256_fnmadd_pd(__m256d, __m256d, __m256d);
__m256 __cdecl _mm256_fnmadd_ps(__m256, __m256, __m256);
__m256d __cdecl _mm256_fnmsub_pd(__m256d, __m256d, __m256d);
__m256 __cdecl _mm256_fnmsub_ps(__m256, __m256, __m256);
__m256d _mm256_frcz_pd(__m256d);
__m256 _mm256_frcz_ps(__m256);
__m256i __cdecl _mm256_hadd_epi16(__m256i, __m256i);
__m256i __cdecl _mm256_hadd_epi32(__m256i, __m256i);
__m256d __cdecl _mm256_hadd_pd(__m256d, __m256d);
__m256 __cdecl _mm256_hadd_ps(__m256, __m256);
__m256i __cdecl _mm256_hadds_epi16(__m256i, __m256i);
__m256i __cdecl _mm256_hsub_epi16(__m256i, __m256i);
__m256i __cdecl _mm256_hsub_epi32(__m256i, __m256i);
__m256d __cdecl _mm256_hsub_pd(__m256d, __m256d);
__m256 __cdecl _mm256_hsub_ps(__m256, __m256);
__m256i __cdecl _mm256_hsubs_epi16(__m256i, __m256i);
__m256i __cdecl _mm256_i32gather_epi32(const int *, __m256i, const int);
__m256i __cdecl _mm256_i32gather_epi64(const __int64 *, __m128i, const int);
__m256d __cdecl _mm256_i32gather_pd(const double *, __m128i, const int);
__m256 __cdecl _mm256_i32gather_ps(const float *, __m256i, const int);
__m128i __cdecl _mm256_i64gather_epi32(const int *, __m256i, const int);
__m256i __cdecl _mm256_i64gather_epi64(const __int64 *, __m256i, const int);
__m256d __cdecl _mm256_i64gather_pd(const double *, __m256i, const int);
__m128 __cdecl _mm256_i64gather_ps(const float *, __m256i, const int);
__m256d __cdecl _mm256_insertf128_pd(__m256d, __m128d, int);
__m256 __cdecl _mm256_insertf128_ps(__m256, __m128, int);
__m256i __cdecl _mm256_insertf128_si256(__m256i, __m128i, int);
__m256i __cdecl _mm256_inserti128_si256(__m256i, __m128i, const int);
__m256i __cdecl _mm256_lddqu_si256(const __m256i *);
__m256d __cdecl _mm256_load_pd(const double *);
__m256 __cdecl _mm256_load_ps(const float *);
__m256i __cdecl _mm256_load_si256(const __m256i *);
__m256d __cdecl _mm256_loadu_pd(const double *);
__m256 __cdecl _mm256_loadu_ps(const float *);
__m256i __cdecl _mm256_loadu_si256(const __m256i *);
__m256d _mm256_macc_pd(__m256d, __m256d, __m256d);
__m256 _mm256_macc_ps(__m256, __m256, __m256);
__m256i __cdecl _mm256_madd_epi16(__m256i, __m256i);
__m256d _mm256_maddsub_pd(__m256d, __m256d, __m256d);
__m256 _mm256_maddsub_ps(__m256, __m256, __m256);
__m256i __cdecl _mm256_maddubs_epi16(__m256i, __m256i);
__m256i __cdecl _mm256_mask_i32gather_epi32(__m256i, const int *, __m256i, __m256i, const int);
__m256i __cdecl _mm256_mask_i32gather_epi64(__m256i, const __int64 *, __m128i, __m256i, const int);
__m256d __cdecl _mm256_mask_i32gather_pd(__m256d, const double *, __m128i, __m256d, const int);
__m256 __cdecl _mm256_mask_i32gather_ps(__m256, const float *, __m256i, __m256, const int);
__m128i __cdecl _mm256_mask_i64gather_epi32(__m128i, const int *, __m256i, __m128i, const int);
__m256i __cdecl _mm256_mask_i64gather_epi64(__m256i, const __int64 *, __m256i, __m256i, const int);
__m256d __cdecl _mm256_mask_i64gather_pd(__m256d, const double *, __m256i, __m256d, const int);
__m128 __cdecl _mm256_mask_i64gather_ps(__m128, const float *, __m256i, __m128, const int);
__m256i __cdecl _mm256_maskload_epi32(const int *, __m256i);
__m256i __cdecl _mm256_maskload_epi64(const __int64 *, __m256i);
__m256d __cdecl _mm256_maskload_pd(const double *, __m256i);
__m256 __cdecl _mm256_maskload_ps(const float *, __m256i);
void __cdecl _mm256_maskstore_epi32(int *, __m256i, __m256i);
void __cdecl _mm256_maskstore_epi64(__int64 *, __m256i, __m256i);
void __cdecl _mm256_maskstore_pd(double *, __m256i, __m256d);
void __cdecl _mm256_maskstore_ps(float *, __m256i, __m256);
__m256i __cdecl _mm256_max_epi16(__m256i, __m256i);
__m256i __cdecl _mm256_max_epi32(__m256i, __m256i);
__m256i __cdecl _mm256_max_epi8(__m256i, __m256i);
__m256i __cdecl _mm256_max_epu16(__m256i, __m256i);
__m256i __cdecl _mm256_max_epu32(__m256i, __m256i);
__m256i __cdecl _mm256_max_epu8(__m256i, __m256i);
__m256d __cdecl _mm256_max_pd(__m256d, __m256d);
__m256 __cdecl _mm256_max_ps(__m256, __m256);
__m256i __cdecl _mm256_min_epi16(__m256i, __m256i);
__m256i __cdecl _mm256_min_epi32(__m256i, __m256i);
__m256i __cdecl _mm256_min_epi8(__m256i, __m256i);
__m256i __cdecl _mm256_min_epu16(__m256i, __m256i);
__m256i __cdecl _mm256_min_epu32(__m256i, __m256i);
__m256i __cdecl _mm256_min_epu8(__m256i, __m256i);
__m256d __cdecl _mm256_min_pd(__m256d, __m256d);
__m256 __cdecl _mm256_min_ps(__m256, __m256);
__m256d __cdecl _mm256_movedup_pd(__m256d);
__m256 __cdecl _mm256_movehdup_ps(__m256);
__m256 __cdecl _mm256_moveldup_ps(__m256);
int __cdecl _mm256_movemask_epi8(__m256i);
int __cdecl _mm256_movemask_pd(__m256d);
int __cdecl _mm256_movemask_ps(__m256);
__m256i __cdecl _mm256_mpsadbw_epu8(__m256i, __m256i, const int);
__m256d _mm256_msub_pd(__m256d, __m256d, __m256d);
__m256 _mm256_msub_ps(__m256, __m256, __m256);
__m256d _mm256_msubadd_pd(__m256d, __m256d, __m256d);
__m256 _mm256_msubadd_ps(__m256, __m256, __m256);
__m256i __cdecl _mm256_mul_epi32(__m256i, __m256i);
__m256i __cdecl _mm256_mul_epu32(__m256i, __m256i);
__m256d __cdecl _mm256_mul_pd(__m256d, __m256d);
__m256 __cdecl _mm256_mul_ps(__m256, __m256);
__m256i __cdecl _mm256_mulhi_epi16(__m256i, __m256i);
__m256i __cdecl _mm256_mulhi_epu16(__m256i, __m256i);
__m256i __cdecl _mm256_mulhrs_epi16(__m256i, __m256i);
__m256i __cdecl _mm256_mullo_epi16(__m256i, __m256i);
__m256i __cdecl _mm256_mullo_epi32(__m256i, __m256i);
__m256d _mm256_nmacc_pd(__m256d, __m256d, __m256d);
__m256 _mm256_nmacc_ps(__m256, __m256, __m256);
__m256d _mm256_nmsub_pd(__m256d, __m256d, __m256d);
__m256 _mm256_nmsub_ps(__m256, __m256, __m256);
__m256d __cdecl _mm256_or_pd(__m256d, __m256d);
__m256 __cdecl _mm256_or_ps(__m256, __m256);
__m256i __cdecl _mm256_or_si256(__m256i, __m256i);
__m256i __cdecl _mm256_packs_epi16(__m256i, __m256i);
__m256i __cdecl _mm256_packs_epi32(__m256i, __m256i);
__m256i __cdecl _mm256_packus_epi16(__m256i, __m256i);
__m256i __cdecl _mm256_packus_epi32(__m256i, __m256i);
__m256d _mm256_permute2_pd(__m256d, __m256d, __m256i, int);
__m256 _mm256_permute2_ps(__m256, __m256, __m256i, int);
__m256d __cdecl _mm256_permute2f128_pd(__m256d, __m256d, int);
__m256 __cdecl _mm256_permute2f128_ps(__m256, __m256, int);
__m256i __cdecl _mm256_permute2f128_si256(__m256i, __m256i, int);
__m256i __cdecl _mm256_permute2x128_si256(__m256i, __m256i, const int);
__m256i __cdecl _mm256_permute4x64_epi64(__m256i, const int);
__m256d __cdecl _mm256_permute4x64_pd(__m256d, const int);
__m256d __cdecl _mm256_permute_pd(__m256d, int);
__m256 __cdecl _mm256_permute_ps(__m256, int);
__m256i __cdecl _mm256_permutevar8x32_epi32(__m256i, __m256i);
__m256 __cdecl _mm256_permutevar8x32_ps(__m256, __m256i);
__m256d __cdecl _mm256_permutevar_pd(__m256d, __m256i);
__m256 __cdecl _mm256_permutevar_ps(__m256, __m256i);
__m256 __cdecl _mm256_rcp_ps(__m256);
__m256d __cdecl _mm256_round_pd(__m256d, int);
__m256 __cdecl _mm256_round_ps(__m256, int);
__m256 __cdecl _mm256_rsqrt_ps(__m256);
__m256i __cdecl _mm256_sad_epu8(__m256i, __m256i);
__m256i __cdecl _mm256_set1_epi16(__int16);
__m256i __cdecl _mm256_set1_epi32(int);
__m256i __cdecl _mm256_set1_epi64x(__int64);
__m256i __cdecl _mm256_set1_epi8(char);
__m256d __cdecl _mm256_set1_pd(double);
__m256 __cdecl _mm256_set1_ps(float);
__m256i __cdecl _mm256_set_epi16(__int16, __int16, __int16, __int16, __int16, __int16, __int16, __int16, __int16, __int16, __int16, __int16, __int16, __int16, __int16, __int16);
__m256i __cdecl _mm256_set_epi32(int, int, int, int, int, int, int, int);
__m256i __cdecl _mm256_set_epi64x(__int64, __int64, __int64, __int64);
__m256i __cdecl _mm256_set_epi8(char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char);
__m256d __cdecl _mm256_set_pd(double, double, double, double);
__m256 __cdecl _mm256_set_ps(float, float, float, float, float, float, float, float);
__m256i __cdecl _mm256_setr_epi16(__int16, __int16, __int16, __int16, __int16, __int16, __int16, __int16, __int16, __int16, __int16, __int16, __int16, __int16, __int16, __int16);
__m256i __cdecl _mm256_setr_epi32(int, int, int, int, int, int, int, int);
__m256i __cdecl _mm256_setr_epi64x(__int64, __int64, __int64, __int64);
__m256i __cdecl _mm256_setr_epi8(char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char);
__m256d __cdecl _mm256_setr_pd(double, double, double, double);
__m256 __cdecl _mm256_setr_ps(float, float, float, float, float, float, float, float);
__m256d __cdecl _mm256_setzero_pd();
__m256 __cdecl _mm256_setzero_ps();
__m256i __cdecl _mm256_setzero_si256();
__m256i __cdecl _mm256_shuffle_epi32(__m256i, const int);
__m256i __cdecl _mm256_shuffle_epi8(__m256i, __m256i);
__m256d __cdecl _mm256_shuffle_pd(__m256d, __m256d, const int);
__m256 __cdecl _mm256_shuffle_ps(__m256, __m256, const int);
__m256i __cdecl _mm256_shufflehi_epi16(__m256i, const int);
__m256i __cdecl _mm256_shufflelo_epi16(__m256i, const int);
__m256i __cdecl _mm256_sign_epi16(__m256i, __m256i);
__m256i __cdecl _mm256_sign_epi32(__m256i, __m256i);
__m256i __cdecl _mm256_sign_epi8(__m256i, __m256i);
__m256i __cdecl _mm256_sll_epi16(__m256i, __m128i);
__m256i __cdecl _mm256_sll_epi32(__m256i, __m128i);
__m256i __cdecl _mm256_sll_epi64(__m256i, __m128i);
__m256i __cdecl _mm256_slli_epi16(__m256i, int);
__m256i __cdecl _mm256_slli_epi32(__m256i, int);
__m256i __cdecl _mm256_slli_epi64(__m256i, int);
__m256i __cdecl _mm256_slli_si256(__m256i, const int);
__m256i __cdecl _mm256_sllv_epi32(__m256i, __m256i);
__m256i __cdecl _mm256_sllv_epi64(__m256i, __m256i);
__m256d __cdecl _mm256_sqrt_pd(__m256d);
__m256 __cdecl _mm256_sqrt_ps(__m256);
__m256i __cdecl _mm256_sra_epi16(__m256i, __m128i);
__m256i __cdecl _mm256_sra_epi32(__m256i, __m128i);
__m256i __cdecl _mm256_srai_epi16(__m256i, int);
__m256i __cdecl _mm256_srai_epi32(__m256i, int);
__m256i __cdecl _mm256_srav_epi32(__m256i, __m256i);
__m256i __cdecl _mm256_srl_epi16(__m256i, __m128i);
__m256i __cdecl _mm256_srl_epi32(__m256i, __m128i);
__m256i __cdecl _mm256_srl_epi64(__m256i, __m128i);
__m256i __cdecl _mm256_srli_epi16(__m256i, int);
__m256i __cdecl _mm256_srli_epi32(__m256i, int);
__m256i __cdecl _mm256_srli_epi64(__m256i, int);
__m256i __cdecl _mm256_srli_si256(__m256i, const int);
__m256i __cdecl _mm256_srlv_epi32(__m256i, __m256i);
__m256i __cdecl _mm256_srlv_epi64(__m256i, __m256i);
void __cdecl _mm256_store_pd(double *, __m256d);
void __cdecl _mm256_store_ps(float *, __m256);
void __cdecl _mm256_store_si256(__m256i *, __m256i);
void __cdecl _mm256_storeu_pd(double *, __m256d);
void __cdecl _mm256_storeu_ps(float *, __m256);
void __cdecl _mm256_storeu_si256(__m256i *, __m256i);
__m256i __cdecl _mm256_stream_load_si256(const __m256i *);
void __cdecl _mm256_stream_pd(double *, __m256d);
void __cdecl _mm256_stream_ps(float *, __m256);
void __cdecl _mm256_stream_si256(__m256i *, __m256i);
__m256i __cdecl _mm256_sub_epi16(__m256i, __m256i);
__m256i __cdecl _mm256_sub_epi32(__m256i, __m256i);
__m256i __cdecl _mm256_sub_epi64(__m256i, __m256i);
__m256i __cdecl _mm256_sub_epi8(__m256i, __m256i);
__m256d __cdecl _mm256_sub_pd(__m256d, __m256d);
__m256 __cdecl _mm256_sub_ps(__m256, __m256);
__m256i __cdecl _mm256_subs_epi16(__m256i, __m256i);
__m256i __cdecl _mm256_subs_epi8(__m256i, __m256i);
__m256i __cdecl _mm256_subs_epu16(__m256i, __m256i);
__m256i __cdecl _mm256_subs_epu8(__m256i, __m256i);
int __cdecl _mm256_testc_pd(__m256d, __m256d);
int __cdecl _mm256_testc_ps(__m256, __m256);
int __cdecl _mm256_testc_si256(__m256i, __m256i);
int __cdecl _mm256_testnzc_pd(__m256d, __m256d);
int __cdecl _mm256_testnzc_ps(__m256, __m256);
int __cdecl _mm256_testnzc_si256(__m256i, __m256i);
int __cdecl _mm256_testz_pd(__m256d, __m256d);
int __cdecl _mm256_testz_ps(__m256, __m256);
int __cdecl _mm256_testz_si256(__m256i, __m256i);
__m256i __cdecl _mm256_unpackhi_epi16(__m256i, __m256i);
__m256i __cdecl _mm256_unpackhi_epi32(__m256i, __m256i);
__m256i __cdecl _mm256_unpackhi_epi64(__m256i, __m256i);
__m256i __cdecl _mm256_unpackhi_epi8(__m256i, __m256i);
__m256d __cdecl _mm256_unpackhi_pd(__m256d, __m256d);
__m256 __cdecl _mm256_unpackhi_ps(__m256, __m256);
__m256i __cdecl _mm256_unpacklo_epi16(__m256i, __m256i);
__m256i __cdecl _mm256_unpacklo_epi32(__m256i, __m256i);
__m256i __cdecl _mm256_unpacklo_epi64(__m256i, __m256i);
__m256i __cdecl _mm256_unpacklo_epi8(__m256i, __m256i);
__m256d __cdecl _mm256_unpacklo_pd(__m256d, __m256d);
__m256 __cdecl _mm256_unpacklo_ps(__m256, __m256);
__m256d __cdecl _mm256_xor_pd(__m256d, __m256d);
__m256 __cdecl _mm256_xor_ps(__m256, __m256);
__m256i __cdecl _mm256_xor_si256(__m256i, __m256i);
void __cdecl _mm256_zeroall();
void __cdecl _mm256_zeroupper();
__m128i _mm_abs_epi16(__m128i a);
__m128i _mm_abs_epi32(__m128i a);
__m128i _mm_abs_epi8(__m128i a);
__m64 _mm_abs_pi16(__m64 a);
__m64 _mm_abs_pi32(__m64 a);
__m64 _mm_abs_pi8(__m64 a);
__m128i _mm_add_epi16(__m128i A, __m128i B);
__m128i _mm_add_epi32(__m128i A, __m128i B);
__m128i _mm_add_epi64(__m128i A, __m128i B);
__m128i _mm_add_epi8(__m128i A, __m128i B);
__m128d _mm_add_pd(__m128d A, __m128d B);
__m128 _mm_add_ps(__m128 A, __m128 B);
__m128d _mm_add_sd(__m128d A, __m128d B);
__m64 _mm_add_si64(__m64 A, __m64 B);
__m128 _mm_add_ss(__m128 A, __m128 B);
__m128i _mm_adds_epi16(__m128i A, __m128i B);
__m128i _mm_adds_epi8(__m128i A, __m128i B);
__m128i _mm_adds_epu16(__m128i A, __m128i B);
__m128i _mm_adds_epu8(__m128i A, __m128i B);
__m128d _mm_addsub_pd(__m128d a, __m128d b);
__m128 _mm_addsub_ps(__m128 a, __m128 b);
__m128i _mm_aesdec_si128(__m128i v, __m128i rkey);
__m128i _mm_aesdeclast_si128(__m128i v, __m128i rkey);
__m128i _mm_aesenc_si128(__m128i v, __m128i rkey);
__m128i _mm_aesenclast_si128(__m128i v, __m128i rkey);
__m128i _mm_aesimc_si128(__m128i v);
__m128i _mm_aeskeygenassist_si128(__m128i ckey, const int rcon);
__m128i _mm_alignr_epi8(__m128i a, __m128i b, int n);
__m64 _mm_alignr_pi8(__m64 a, __m64 b, int n);
__m128d _mm_and_pd(__m128d A, __m128d B);
__m128 _mm_and_ps(__m128 A, __m128 B);
__m128i _mm_and_si128(__m128i A, __m128i B);
__m128d _mm_andnot_pd(__m128d A, __m128d B);
__m128 _mm_andnot_ps(__m128 A, __m128 B);
__m128i _mm_andnot_si128(__m128i A, __m128i B);
__m128i _mm_avg_epu16(__m128i A, __m128i B);
__m128i _mm_avg_epu8(__m128i A, __m128i B);
__m128i _mm_blend_epi16(__m128i v1, __m128i v2, const int mask);
__m128i __cdecl _mm_blend_epi32(__m128i, __m128i, const int);
__m128d _mm_blend_pd(__m128d v1, __m128d v2, const int mask);
__m128 _mm_blend_ps(__m128 v1, __m128 v2, const int mask);
__m128i _mm_blendv_epi8(__m128i v1, __m128i v2, __m128i mask);
__m128d _mm_blendv_pd(__m128d v1, __m128d v2, __m128d v3);
__m128 _mm_blendv_ps(__m128 v1, __m128 v2, __m128 v3);
__m128 __cdecl _mm_broadcast_ss(const float *);
__m128i __cdecl _mm_broadcastb_epi8(__m128i);
__m128i __cdecl _mm_broadcastd_epi32(__m128i);
__m128i __cdecl _mm_broadcastq_epi64(__m128i);
__m128d __cdecl _mm_broadcastsd_pd(__m128d);
__m128 __cdecl _mm_broadcastss_ps(__m128);
__m128i __cdecl _mm_broadcastw_epi16(__m128i);
__m128 _mm_castpd_ps(__m128d);
__m128i _mm_castpd_si128(__m128d);
__m128d _mm_castps_pd(__m128);
__m128i _mm_castps_si128(__m128);
__m128d _mm_castsi128_pd(__m128i);
__m128 _mm_castsi128_ps(__m128i);
void _mm_clflush(const void *P);
__m128i _mm_clmulepi64_si128(__m128i v1, __m128i v2, const int imm8);
__m128i _mm_cmov_si128(__m128i, __m128i, __m128i);
__m128d __cdecl _mm_cmp_pd(__m128d, __m128d, const int);
__m128 __cdecl _mm_cmp_ps(__m128, __m128, const int);
__m128d __cdecl _mm_cmp_sd(__m128d, __m128d, const int);
__m128 __cdecl _mm_cmp_ss(__m128, __m128, const int);
__m128i _mm_cmpeq_epi16(__m128i A, __m128i B);
__m128i _mm_cmpeq_epi32(__m128i A, __m128i B);
__m128i _mm_cmpeq_epi64(__m128i val1, __m128i val2);
__m128i _mm_cmpeq_epi8(__m128i A, __m128i B);
__m128d _mm_cmpeq_pd(__m128d A, __m128d B);
__m128 _mm_cmpeq_ps(__m128 A, __m128 B);
__m128d _mm_cmpeq_sd(__m128d A, __m128d B);
__m128 _mm_cmpeq_ss(__m128 A, __m128 B);
int _mm_cmpestra(__m128i a, int la, __m128i b, int lb, const int mode);
int _mm_cmpestrc(__m128i a, int la, __m128i b, int lb, const int mode);
int _mm_cmpestri(__m128i a, int la, __m128i b, int lb, const int mode);
__m128i _mm_cmpestrm(__m128i a, int la, __m128i b, int lb, const int mode);
int _mm_cmpestro(__m128i a, int la, __m128i b, int lb, const int mode);
int _mm_cmpestrs(__m128i a, int la, __m128i b, int lb, const int mode);
int _mm_cmpestrz(__m128i a, int la, __m128i b, int lb, const int mode);
__m128d _mm_cmpge_pd(__m128d A, __m128d B);
__m128 _mm_cmpge_ps(__m128 A, __m128 B);
__m128d _mm_cmpge_sd(__m128d A, __m128d B);
__m128 _mm_cmpge_ss(__m128 A, __m128 B);
__m128i _mm_cmpgt_epi16(__m128i A, __m128i B);
__m128i _mm_cmpgt_epi32(__m128i A, __m128i B);
__m128i _mm_cmpgt_epi64(__m128i val1, __m128i val2);
__m128i _mm_cmpgt_epi8(__m128i A, __m128i B);
__m128d _mm_cmpgt_pd(__m128d A, __m128d B);
__m128 _mm_cmpgt_ps(__m128 A, __m128 B);
__m128d _mm_cmpgt_sd(__m128d A, __m128d B);
__m128 _mm_cmpgt_ss(__m128 A, __m128 B);
int _mm_cmpistra(__m128i a, __m128i b, const int mode);
int _mm_cmpistrc(__m128i a, __m128i b, const int mode);
int _mm_cmpistri(__m128i a, __m128i b, const int mode);
__m128i _mm_cmpistrm(__m128i a, __m128i b, const int mode);
int _mm_cmpistro(__m128i a, __m128i b, const int mode);
int _mm_cmpistrs(__m128i a, __m128i b, const int mode);
int _mm_cmpistrz(__m128i a, __m128i b, const int mode);
__m128d _mm_cmple_pd(__m128d A, __m128d B);
__m128 _mm_cmple_ps(__m128 A, __m128 B);
__m128d _mm_cmple_sd(__m128d A, __m128d B);
__m128 _mm_cmple_ss(__m128 A, __m128 B);
__m128i _mm_cmplt_epi16(__m128i A, __m128i B);
__m128i _mm_cmplt_epi32(__m128i A, __m128i B);
__m128i _mm_cmplt_epi8(__m128i A, __m128i B);
__m128d _mm_cmplt_pd(__m128d A, __m128d B);
__m128 _mm_cmplt_ps(__m128 A, __m128 B);
__m128d _mm_cmplt_sd(__m128d A, __m128d B);
__m128 _mm_cmplt_ss(__m128 A, __m128 B);
__m128d _mm_cmpneq_pd(__m128d A, __m128d B);
__m128 _mm_cmpneq_ps(__m128 A, __m128 B);
__m128d _mm_cmpneq_sd(__m128d A, __m128d B);
__m128 _mm_cmpneq_ss(__m128 A, __m128 B);
__m128d _mm_cmpnge_pd(__m128d A, __m128d B);
__m128 _mm_cmpnge_ps(__m128 A, __m128 B);
__m128d _mm_cmpnge_sd(__m128d A, __m128d B);
__m128 _mm_cmpnge_ss(__m128 A, __m128 B);
__m128d _mm_cmpngt_pd(__m128d A, __m128d B);
__m128 _mm_cmpngt_ps(__m128 A, __m128 B);
__m128d _mm_cmpngt_sd(__m128d A, __m128d B);
__m128 _mm_cmpngt_ss(__m128 A, __m128 B);
__m128d _mm_cmpnle_pd(__m128d A, __m128d B);
__m128 _mm_cmpnle_ps(__m128 A, __m128 B);
__m128d _mm_cmpnle_sd(__m128d A, __m128d B);
__m128 _mm_cmpnle_ss(__m128 A, __m128 B);
__m128d _mm_cmpnlt_pd(__m128d A, __m128d B);
__m128 _mm_cmpnlt_ps(__m128 A, __m128 B);
__m128d _mm_cmpnlt_sd(__m128d A, __m128d B);
__m128 _mm_cmpnlt_ss(__m128 A, __m128 B);
__m128d _mm_cmpord_pd(__m128d A, __m128d B);
__m128 _mm_cmpord_ps(__m128 A, __m128 B);
__m128d _mm_cmpord_sd(__m128d A, __m128d B);
__m128 _mm_cmpord_ss(__m128 A, __m128 B);
__m128d _mm_cmpunord_pd(__m128d A, __m128d B);
__m128 _mm_cmpunord_ps(__m128 A, __m128 B);
__m128d _mm_cmpunord_sd(__m128d A, __m128d B);
__m128 _mm_cmpunord_ss(__m128 A, __m128 B);
__m128i _mm_com_epi16(__m128i, __m128i, int);
__m128i _mm_com_epi32(__m128i, __m128i, int);
__m128i _mm_com_epi64(__m128i, __m128i, int);
__m128i _mm_com_epi8(__m128i, __m128i, int);
__m128i _mm_com_epu16(__m128i, __m128i, int);
__m128i _mm_com_epu32(__m128i, __m128i, int);
__m128i _mm_com_epu64(__m128i, __m128i, int);
__m128i _mm_com_epu8(__m128i, __m128i, int);
int _mm_comieq_sd(__m128d A, __m128d B);
int _mm_comieq_ss(__m128 A, __m128 B);
int _mm_comige_sd(__m128d A, __m128d B);
int _mm_comige_ss(__m128 A, __m128 B);
int _mm_comigt_sd(__m128d A, __m128d B);
int _mm_comigt_ss(__m128 A, __m128 B);
int _mm_comile_sd(__m128d A, __m128d B);
int _mm_comile_ss(__m128 A, __m128 B);
int _mm_comilt_sd(__m128d A, __m128d B);
int _mm_comilt_ss(__m128 A, __m128 B);
int _mm_comineq_sd(__m128d A, __m128d B);
int _mm_comineq_ss(__m128 A, __m128 B);
unsigned int _mm_crc32_u16(unsigned int crc, unsigned __int16 v);
unsigned int _mm_crc32_u32(unsigned int crc, unsigned int v);
unsigned int _mm_crc32_u8(unsigned int crc, unsigned __int8 v);
__m128 _mm_cvt_pi2ps(__m128, __m64);
__m64 _mm_cvt_ps2pi(__m128 A);
__m128 _mm_cvt_si2ss(__m128, int);
int _mm_cvt_ss2si(__m128 A);
__m128i _mm_cvtepi16_epi32(__m128i shortValues);
__m128i _mm_cvtepi16_epi64(__m128i shortValues);
__m128i _mm_cvtepi32_epi64(__m128i intValues);
__m128d _mm_cvtepi32_pd(__m128i A);
__m128 _mm_cvtepi32_ps(__m128i A);
__m128i _mm_cvtepi8_epi16(__m128i byteValues);
__m128i _mm_cvtepi8_epi32(__m128i byteValues);
__m128i _mm_cvtepi8_epi64(__m128i byteValues);
__m128i _mm_cvtepu16_epi32(__m128i shortValues);
__m128i _mm_cvtepu16_epi64(__m128i shortValues);
__m128i _mm_cvtepu32_epi64(__m128i intValues);
__m128i _mm_cvtepu8_epi16(__m128i byteValues);
__m128i _mm_cvtepu8_epi32(__m128i byteValues);
__m128i _mm_cvtepu8_epi64(__m128i shortValues);
__m128i _mm_cvtpd_epi32(__m128d A);
__m64 _mm_cvtpd_pi32(__m128d A);
__m128 _mm_cvtpd_ps(__m128d A);
__m128 __cdecl _mm_cvtph_ps(__m128i);
__m128 _mm_cvtpi16_ps(__m64 a);
__m128d _mm_cvtpi32_pd(__m64 A);
__m128 _mm_cvtpi32x2_ps(__m64 a, __m64 b);
__m128 _mm_cvtpi8_ps(__m64 a);
__m128i _mm_cvtps_epi32(__m128 A);
__m128d _mm_cvtps_pd(__m128 A);
__m128i __cdecl _mm_cvtps_ph(__m128 m1, const int imm);
__m64 _mm_cvtps_pi16(__m128 a);
__m64 _mm_cvtps_pi8(__m128 a);
__m128 _mm_cvtpu16_ps(__m64 a);
__m128 _mm_cvtpu8_ps(__m64 a);
double _mm_cvtsd_f64(__m128d A);
int _mm_cvtsd_si32(__m128d A);
__m128 _mm_cvtsd_ss(__m128 A, __m128d B);
int _mm_cvtsi128_si32(__m128i A);
__m128d _mm_cvtsi32_sd(__m128d A, int B);
__m128i _mm_cvtsi32_si128(int A);
float _mm_cvtss_f32(__m128 A);
__m128d _mm_cvtss_sd(__m128d A, __m128 B);
__m64 _mm_cvtt_ps2pi(__m128 A);
int _mm_cvtt_ss2si(__m128 A);
__m128i _mm_cvttpd_epi32(__m128d A);
__m64 _mm_cvttpd_pi32(__m128d A);
__m128i _mm_cvttps_epi32(__m128 A);
int _mm_cvttsd_si32(__m128d A);
__m128d _mm_div_pd(__m128d A, __m128d B);
__m128 _mm_div_ps(__m128 A, __m128 B);
__m128d _mm_div_sd(__m128d A, __m128d B);
__m128 _mm_div_ss(__m128 A, __m128 B);
__m128d _mm_dp_pd(__m128d val1, __m128d val2, const int mask);
__m128 _mm_dp_ps(__m128 val1, __m128 val2, const int mask);
int _mm_extract_epi16(__m128i A, int Imm);
int _mm_extract_epi32(__m128i src, const int ndx);
int _mm_extract_epi8(__m128i src, const int ndx);
int _mm_extract_ps(__m128 src, const int ndx);
__m128i _mm_extract_si64(__m128i, __m128i);
__m128i _mm_extracti_si64(__m128i, int, int);
__m128d __cdecl _mm_fmadd_pd(__m128d, __m128d, __m128d);
__m128 __cdecl _mm_fmadd_ps(__m128, __m128, __m128);
__m128d __cdecl _mm_fmadd_sd(__m128d, __m128d, __m128d);
__m128 __cdecl _mm_fmadd_ss(__m128, __m128, __m128);
__m128d __cdecl _mm_fmaddsub_pd(__m128d, __m128d, __m128d);
__m128 __cdecl _mm_fmaddsub_ps(__m128, __m128, __m128);
__m128d __cdecl _mm_fmsub_pd(__m128d, __m128d, __m128d);
__m128 __cdecl _mm_fmsub_ps(__m128, __m128, __m128);
__m128d __cdecl _mm_fmsub_sd(__m128d, __m128d, __m128d);
__m128 __cdecl _mm_fmsub_ss(__m128, __m128, __m128);
__m128d __cdecl _mm_fmsubadd_pd(__m128d, __m128d, __m128d);
__m128 __cdecl _mm_fmsubadd_ps(__m128, __m128, __m128);
__m128d __cdecl _mm_fnmadd_pd(__m128d, __m128d, __m128d);
__m128 __cdecl _mm_fnmadd_ps(__m128, __m128, __m128);
__m128d __cdecl _mm_fnmadd_sd(__m128d, __m128d, __m128d);
__m128 __cdecl _mm_fnmadd_ss(__m128, __m128, __m128);
__m128d __cdecl _mm_fnmsub_pd(__m128d, __m128d, __m128d);
__m128 __cdecl _mm_fnmsub_ps(__m128, __m128, __m128);
__m128d __cdecl _mm_fnmsub_sd(__m128d, __m128d, __m128d);
__m128 __cdecl _mm_fnmsub_ss(__m128, __m128, __m128);
__m128d _mm_frcz_pd(__m128d);
__m128 _mm_frcz_ps(__m128);
__m128d _mm_frcz_sd(__m128d, __m128d);
__m128 _mm_frcz_ss(__m128, __m128);
unsigned int _mm_getcsr(void);
__m128i _mm_hadd_epi16(__m128i a, __m128i b);
__m128i _mm_hadd_epi32(__m128i a, __m128i b);
__m128d _mm_hadd_pd(__m128d a, __m128d b);
__m64 _mm_hadd_pi16(__m64 a, __m64 b);
__m64 _mm_hadd_pi32(__m64 a, __m64 b);
__m128 _mm_hadd_ps(__m128 a, __m128 b);
__m128i _mm_haddd_epi16(__m128i);
__m128i _mm_haddd_epi8(__m128i);
__m128i _mm_haddd_epu16(__m128i);
__m128i _mm_haddd_epu8(__m128i);
__m128i _mm_haddq_epi16(__m128i);
__m128i _mm_haddq_epi32(__m128i);
__m128i _mm_haddq_epi8(__m128i);
__m128i _mm_haddq_epu16(__m128i);
__m128i _mm_haddq_epu32(__m128i);
__m128i _mm_haddq_epu8(__m128i);
__m128i _mm_hadds_epi16(__m128i a, __m128i b);
__m64 _mm_hadds_pi16(__m64 a, __m64 b);
__m128i _mm_haddw_epi8(__m128i);
__m128i _mm_haddw_epu8(__m128i);
__m128i _mm_hsub_epi16(__m128i a, __m128i b);
__m128i _mm_hsub_epi32(__m128i a, __m128i b);
__m128d _mm_hsub_pd(__m128d a, __m128d b);
__m64 _mm_hsub_pi16(__m64 a, __m64 b);
__m64 _mm_hsub_pi32(__m64 a, __m64 b);
__m128 _mm_hsub_ps(__m128 a, __m128 b);
__m128i _mm_hsubd_epi16(__m128i);
__m128i _mm_hsubq_epi32(__m128i);
__m128i _mm_hsubs_epi16(__m128i a, __m128i b);
__m64 _mm_hsubs_pi16(__m64 a, __m64 b);
__m128i _mm_hsubw_epi8(__m128i);
__m128i __cdecl _mm_i32gather_epi32(const int *, __m128i, const int);
__m128i __cdecl _mm_i32gather_epi64(const __int64 *, __m128i, const int);
__m128d __cdecl _mm_i32gather_pd(const double *, __m128i, const int);
__m128 __cdecl _mm_i32gather_ps(const float *, __m128i, const int);
__m128i __cdecl _mm_i64gather_epi32(const int *, __m128i, const int);
__m128i __cdecl _mm_i64gather_epi64(const __int64 *, __m128i, const int);
__m128d __cdecl _mm_i64gather_pd(const double *, __m128i, const int);
__m128 __cdecl _mm_i64gather_ps(const float *, __m128i, const int);
__m128i _mm_insert_epi16(__m128i A, int B, int Imm);
__m128i _mm_insert_epi32(__m128i dst, int s, const int ndx);
__m128i _mm_insert_epi8(__m128i dst, int s, const int ndx);
__m128 _mm_insert_ps(__m128 dst, __m128 src, const int ndx);
__m128i _mm_insert_si64(__m128i, __m128i);
__m128i _mm_inserti_si64(__m128i, __m128i, int, int);
__m128i _mm_lddqu_si128(const __m128i *p);
void _mm_lfence(void);
__m128d _mm_load1_pd(const double *Dp);
__m128d _mm_load_pd(const double *Dp);
__m128 _mm_load_ps(const float *A);
__m128 _mm_load_ps1(const float *A);
__m128d _mm_load_sd(const double *Dp);
__m128i _mm_load_si128(const __m128i *P);
__m128 _mm_load_ss(const float *A);
__m128d _mm_loaddup_pd(const double *dp);
__m128d _mm_loadh_pd(__m128d A, const double *Dp);
__m128 _mm_loadh_pi(__m128, const __m64 *);
__m128i _mm_loadl_epi64(const __m128i *P);
__m128d _mm_loadl_pd(__m128d A, const double *Dp);
__m128 _mm_loadl_pi(__m128, const __m64 *);
__m128d _mm_loadr_pd(const double *Dp);
__m128 _mm_loadr_ps(const float *A);
__m128d _mm_loadu_pd(const double *Dp);
__m128 _mm_loadu_ps(const float *A);
__m128i _mm_loadu_si128(const __m128i *P);
__m128i _mm_macc_epi16(__m128i, __m128i, __m128i);
__m128i _mm_macc_epi32(__m128i, __m128i, __m128i);
__m128d _mm_macc_pd(__m128d, __m128d, __m128d);
__m128 _mm_macc_ps(__m128, __m128, __m128);
__m128d _mm_macc_sd(__m128d, __m128d, __m128d);
__m128 _mm_macc_ss(__m128, __m128, __m128);
__m128i _mm_maccd_epi16(__m128i, __m128i, __m128i);
__m128i _mm_macchi_epi32(__m128i, __m128i, __m128i);
__m128i _mm_macclo_epi32(__m128i, __m128i, __m128i);
__m128i _mm_maccs_epi16(__m128i, __m128i, __m128i);
__m128i _mm_maccs_epi32(__m128i, __m128i, __m128i);
__m128i _mm_maccsd_epi16(__m128i, __m128i, __m128i);
__m128i _mm_maccshi_epi32(__m128i, __m128i, __m128i);
__m128i _mm_maccslo_epi32(__m128i, __m128i, __m128i);
__m128i _mm_madd_epi16(__m128i A, __m128i B);
__m128i _mm_maddd_epi16(__m128i, __m128i, __m128i);
__m128i _mm_maddsd_epi16(__m128i, __m128i, __m128i);
__m128d _mm_maddsub_pd(__m128d, __m128d, __m128d);
__m128 _mm_maddsub_ps(__m128, __m128, __m128);
__m128i _mm_maddubs_epi16(__m128i a, __m128i b);
__m64 _mm_maddubs_pi16(__m64 a, __m64 b);
__m128i __cdecl _mm_mask_i32gather_epi32(__m128i, const int *, __m128i, __m128i, const int);
__m128i __cdecl _mm_mask_i32gather_epi64(__m128i, const __int64 *, __m128i, __m128i, const int);
__m128d __cdecl _mm_mask_i32gather_pd(__m128d, const double *, __m128i, __m128d, const int);
__m128 __cdecl _mm_mask_i32gather_ps(__m128, const float *, __m128i, __m128, const int);
__m128i __cdecl _mm_mask_i64gather_epi32(__m128i, const int *, __m128i, __m128i, const int);
__m128i __cdecl _mm_mask_i64gather_epi64(__m128i, const __int64 *, __m128i, __m128i, const int);
__m128d __cdecl _mm_mask_i64gather_pd(__m128d, const double *, __m128i, __m128d, const int);
__m128 __cdecl _mm_mask_i64gather_ps(__m128, const float *, __m128i, __m128, const int);
__m128i __cdecl _mm_maskload_epi32(const int *, __m128i);
__m128i __cdecl _mm_maskload_epi64(const __int64 *, __m128i);
__m128d __cdecl _mm_maskload_pd(const double *, __m128i);
__m128 __cdecl _mm_maskload_ps(const float *, __m128i);
void _mm_maskmoveu_si128(__m128i D, __m128i N, char *P);
void __cdecl _mm_maskstore_epi32(int *, __m128i, __m128i);
void __cdecl _mm_maskstore_epi64(__int64 *, __m128i, __m128i);
void __cdecl _mm_maskstore_pd(double *, __m128i, __m128d);
void __cdecl _mm_maskstore_ps(float *, __m128i, __m128);
__m128i _mm_max_epi16(__m128i A, __m128i B);
__m128i _mm_max_epi32(__m128i val1, __m128i val2);
__m128i _mm_max_epi8(__m128i val1, __m128i val2);
__m128i _mm_max_epu16(__m128i val1, __m128i val2);
__m128i _mm_max_epu32(__m128i val1, __m128i val2);
__m128i _mm_max_epu8(__m128i A, __m128i B);
__m128d _mm_max_pd(__m128d A, __m128d B);
__m128 _mm_max_ps(__m128 A, __m128 B);
__m128d _mm_max_sd(__m128d A, __m128d B);
__m128 _mm_max_ss(__m128 A, __m128 B);
void _mm_mfence(void);
__m128i _mm_min_epi16(__m128i A, __m128i B);
__m128i _mm_min_epi32(__m128i val1, __m128i val2);
__m128i _mm_min_epi8(__m128i val1, __m128i val2);
__m128i _mm_min_epu16(__m128i val1, __m128i val2);
__m128i _mm_min_epu32(__m128i val1, __m128i val2);
__m128i _mm_min_epu8(__m128i A, __m128i B);
__m128d _mm_min_pd(__m128d A, __m128d B);
__m128 _mm_min_ps(__m128 A, __m128 B);
__m128d _mm_min_sd(__m128d A, __m128d B);
__m128 _mm_min_ss(__m128 A, __m128 B);
__m128i _mm_minpos_epu16(__m128i shortValues);
void _mm_monitor(const void *p, unsigned int extensions, unsigned int hints);
__m128i _mm_move_epi64(__m128i Q);
__m128d _mm_move_sd(__m128d A, __m128d B);
__m128 _mm_move_ss(__m128 A, __m128 B);
__m128d _mm_movedup_pd(__m128d a);
__m128 _mm_movehdup_ps(__m128 a);
__m128 _mm_movehl_ps(__m128, __m128);
__m128 _mm_moveldup_ps(__m128 a);
__m128 _mm_movelh_ps(__m128, __m128);
int _mm_movemask_epi8(__m128i A);
int _mm_movemask_pd(__m128d A);
int _mm_movemask_ps(__m128 A);
__m64 _mm_movepi64_pi64(__m128i Q);
__m128i _mm_movpi64_epi64(__m64 Q);
__m128i _mm_mpsadbw_epu8(__m128i s1, __m128i s2, const int msk);
__m128d _mm_msub_pd(__m128d, __m128d, __m128d);
__m128 _mm_msub_ps(__m128, __m128, __m128);
__m128d _mm_msub_sd(__m128d, __m128d, __m128d);
__m128 _mm_msub_ss(__m128, __m128, __m128);
__m128d _mm_msubadd_pd(__m128d, __m128d, __m128d);
__m128 _mm_msubadd_ps(__m128, __m128, __m128);
__m128i _mm_mul_epi32(__m128i a, __m128i b);
__m128i _mm_mul_epu32(__m128i A, __m128i B);
__m128d _mm_mul_pd(__m128d A, __m128d B);
__m128 _mm_mul_ps(__m128 A, __m128 B);
__m128d _mm_mul_sd(__m128d A, __m128d B);
__m128 _mm_mul_ss(__m128 A, __m128 B);
__m64 _mm_mul_su32(__m64 A, __m64 B);
__m128i _mm_mulhi_epi16(__m128i A, __m128i B);
__m128i _mm_mulhi_epu16(__m128i A, __m128i B);
__m128i _mm_mulhrs_epi16(__m128i a, __m128i b);
__m64 _mm_mulhrs_pi16(__m64 a, __m64 b);
__m128i _mm_mullo_epi16(__m128i A, __m128i B);
__m128i _mm_mullo_epi32(__m128i a, __m128i b);
void _mm_mwait(unsigned int extensions, unsigned int hints);
__m128d _mm_nmacc_pd(__m128d, __m128d, __m128d);
__m128 _mm_nmacc_ps(__m128, __m128, __m128);
__m128d _mm_nmacc_sd(__m128d, __m128d, __m128d);
__m128 _mm_nmacc_ss(__m128, __m128, __m128);
__m128d _mm_nmsub_pd(__m128d, __m128d, __m128d);
__m128 _mm_nmsub_ps(__m128, __m128, __m128);
__m128d _mm_nmsub_sd(__m128d, __m128d, __m128d);
__m128 _mm_nmsub_ss(__m128, __m128, __m128);
__m128d _mm_or_pd(__m128d A, __m128d B);
__m128 _mm_or_ps(__m128 A, __m128 B);
__m128i _mm_or_si128(__m128i A, __m128i B);
__m128i _mm_packs_epi16(__m128i A, __m128i B);
__m128i _mm_packs_epi32(__m128i A, __m128i B);
__m128i _mm_packus_epi16(__m128i A, __m128i B);
__m128i _mm_packus_epi32(__m128i val1, __m128i val2);
void _mm_pause(void);
__m128i _mm_perm_epi8(__m128i, __m128i, __m128i);
__m128d _mm_permute2_pd(__m128d, __m128d, __m128i, int);
__m128 _mm_permute2_ps(__m128, __m128, __m128i, int);
__m128d __cdecl _mm_permute_pd(__m128d, int);
__m128 __cdecl _mm_permute_ps(__m128, int);
__m128d __cdecl _mm_permutevar_pd(__m128d, __m128i);
__m128 __cdecl _mm_permutevar_ps(__m128, __m128i);
int _mm_popcnt_u32(unsigned int v);
void _mm_prefetch(const char *A, int Sel);
__m128 _mm_rcp_ps(__m128 A);
__m128 _mm_rcp_ss(__m128 A);
__m128i _mm_rot_epi16(__m128i, __m128i);
__m128i _mm_rot_epi32(__m128i, __m128i);
__m128i _mm_rot_epi64(__m128i, __m128i);
__m128i _mm_rot_epi8(__m128i, __m128i);
__m128i _mm_roti_epi16(__m128i, int);
__m128i _mm_roti_epi32(__m128i, int);
__m128i _mm_roti_epi64(__m128i, int);
__m128i _mm_roti_epi8(__m128i, int);
__m128d _mm_round_pd(__m128d val, int iRoundMode);
__m128 _mm_round_ps(__m128 val, int iRoundMode);
__m128d _mm_round_sd(__m128d dst, __m128d val, int iRoundMode);
__m128 _mm_round_ss(__m128 dst, __m128 val, int iRoundMode);
__m128 _mm_rsqrt_ps(__m128 A);
__m128 _mm_rsqrt_ss(__m128 A);
__m128i _mm_sad_epu8(__m128i A, __m128i B);
__m128i _mm_set1_epi16(__int16 W);
__m128i _mm_set1_epi32(int I);
__m128i _mm_set1_epi64(__m64 Q);
__m128i _mm_set1_epi8(char B);
__m128d _mm_set1_pd(double A);
__m64 _mm_set1_pi16(__int16 S);
__m64 _mm_set1_pi32(int I);
__m64 _mm_set1_pi8(char B);
__m128i _mm_set_epi16(__int16 W7, __int16 W6, __int16 W5, __int16 W4, __int16 W3, __int16 W2, __int16 W1, __int16 W0);
__m128i _mm_set_epi32(int I3, int I2, int I1, int I0);
__m128i _mm_set_epi64(__m64 Q1, __m64 Q0);
__m128i _mm_set_epi8(char B15, char B14, char B13, char B12, char B11, char B10, char B9, char B8, char B7, char B6, char B5, char B4, char B3, char B2, char B1, char B0);
__m128d _mm_set_pd(double Z, double Y);
__m64 _mm_set_pi16(__int16 S3, __int16 S2, __int16 S1, __int16 S0);
__m64 _mm_set_pi32(int I1, int I0);
__m64 _mm_set_pi8(char B7, char B6, char B5, char B4, char B3, char B2, char B1, char B0);
__m128 _mm_set_ps(float A, float B, float C, float D);
__m128 _mm_set_ps1(float A);
__m128d _mm_set_sd(double W);
__m128 _mm_set_ss(float A);
void _mm_setcsr(unsigned int);
__m128i _mm_setl_epi64(__m128i Q);
__m128i _mm_setr_epi16(__int16 W0, __int16 W1, __int16 W2, __int16 W3, __int16 W4, __int16 W5, __int16 W6, __int16 W7);
__m128i _mm_setr_epi32(int I0, int I1, int I2, int I3);
__m128i _mm_setr_epi64(__m64 Q0, __m64 Q1);
__m128i _mm_setr_epi8(char B15, char B14, char B13, char B12, char B11, char B10, char B9, char B8, char B7, char B6, char B5, char B4, char B3, char B2, char B1, char B0);
__m128d _mm_setr_pd(double Y, double Z);
__m64 _mm_setr_pi16(__int16 S3, __int16 S2, __int16 S1, __int16 S0);
__m64 _mm_setr_pi32(int I1, int I0);
__m64 _mm_setr_pi8(char B7, char B6, char B5, char B4, char B3, char B2, char B1, char B0);
__m128 _mm_setr_ps(float A, float B, float C, float D);
__m128d _mm_setzero_pd(void);
__m128 _mm_setzero_ps(void);
__m128i _mm_setzero_si128(void);
__m64 _mm_setzero_si64(void);
void _mm_sfence(void);
__m128i _mm_sha_epi16(__m128i, __m128i);
__m128i _mm_sha_epi32(__m128i, __m128i);
__m128i _mm_sha_epi64(__m128i, __m128i);
__m128i _mm_sha_epi8(__m128i, __m128i);
__m128i _mm_shl_epi16(__m128i, __m128i);
__m128i _mm_shl_epi32(__m128i, __m128i);
__m128i _mm_shl_epi64(__m128i, __m128i);
__m128i _mm_shl_epi8(__m128i, __m128i);
__m128i _mm_shuffle_epi32(__m128i A, int Imm);
__m128i _mm_shuffle_epi8(__m128i a, __m128i b);
__m128d _mm_shuffle_pd(__m128d A, __m128d B, int I);
__m64 _mm_shuffle_pi8(__m64 a, __m64 b);
__m128 _mm_shuffle_ps(__m128 A, __m128 B, unsigned int Imm8);
__m128i _mm_shufflehi_epi16(__m128i A, int Imm);
__m128i _mm_shufflelo_epi16(__m128i A, int Imm);
__m128i _mm_sign_epi16(__m128i a, __m128i b);
__m128i _mm_sign_epi32(__m128i a, __m128i b);
__m128i _mm_sign_epi8(__m128i a, __m128i b);
__m64 _mm_sign_pi16(__m64 a, __m64 b);
__m64 _mm_sign_pi32(__m64 a, __m64 b);
__m64 _mm_sign_pi8(__m64 a, __m64 b);
__m128i _mm_sll_epi16(__m128i A, __m128i Count);
__m128i _mm_sll_epi32(__m128i A, __m128i Count);
__m128i _mm_sll_epi64(__m128i A, __m128i Count);
__m128i _mm_slli_epi16(__m128i A, int Count);
__m128i _mm_slli_epi32(__m128i A, int Count);
__m128i _mm_slli_epi64(__m128i A, int Count);
__m128i _mm_slli_si128(__m128i A, int Imm);
__m128i __cdecl _mm_sllv_epi32(__m128i, __m128i);
__m128i __cdecl _mm_sllv_epi64(__m128i, __m128i);
__m128d _mm_sqrt_pd(__m128d A);
__m128 _mm_sqrt_ps(__m128 A);
__m128d _mm_sqrt_sd(__m128d A, __m128d B);
__m128 _mm_sqrt_ss(__m128 A);
__m128i _mm_sra_epi16(__m128i A, __m128i Count);
__m128i _mm_sra_epi32(__m128i A, __m128i Count);
__m128i _mm_srai_epi16(__m128i A, int Count);
__m128i _mm_srai_epi32(__m128i A, int Count);
__m128i __cdecl _mm_srav_epi32(__m128i, __m128i);
__m128i _mm_srl_epi16(__m128i A, __m128i Count);
__m128i _mm_srl_epi32(__m128i A, __m128i Count);
__m128i _mm_srl_epi64(__m128i A, __m128i Count);
__m128i _mm_srli_epi16(__m128i A, int Count);
__m128i _mm_srli_epi32(__m128i A, int Count);
__m128i _mm_srli_epi64(__m128i A, int Count);
__m128i _mm_srli_si128(__m128i A, int Imm);
__m128i __cdecl _mm_srlv_epi32(__m128i, __m128i);
__m128i __cdecl _mm_srlv_epi64(__m128i, __m128i);
void _mm_store1_pd(double *Dp, __m128d A);
void _mm_store_pd(double *Dp, __m128d A);
void _mm_store_ps(float *V, __m128 A);
void _mm_store_ps1(float *V, __m128 A);
void _mm_store_sd(double *Dp, __m128d A);
void _mm_store_si128(__m128i *P, __m128i B);
void _mm_store_ss(float *V, __m128 A);
void _mm_storeh_pd(double *Dp, __m128d A);
void _mm_storeh_pi(__m64 *, __m128);
void _mm_storel_epi64(__m128i *P, __m128i Q);
void _mm_storel_pd(double *Dp, __m128d A);
void _mm_storel_pi(__m64 *, __m128);
void _mm_storer_pd(double *Dp, __m128d A);
void _mm_storer_ps(float *V, __m128 A);
void _mm_storeu_pd(double *Dp, __m128d A);
void _mm_storeu_ps(float *V, __m128 A);
void _mm_storeu_si128(__m128i *P, __m128i B);
__m128i _mm_stream_load_si128(__m128i *v1);
void _mm_stream_pd(double *Dp, __m128d A);
void _mm_stream_pi(__m64 *, __m64);
void _mm_stream_ps(float *, __m128);
void _mm_stream_sd(double *, __m128d);
void _mm_stream_si128(__m128i *P, __m128i A);
void _mm_stream_si32(int *P, int I);
void _mm_stream_ss(float *, __m128);
__m128i _mm_sub_epi16(__m128i A, __m128i B);
__m128i _mm_sub_epi32(__m128i A, __m128i B);
__m128i _mm_sub_epi64(__m128i A, __m128i B);
__m128i _mm_sub_epi8(__m128i A, __m128i B);
__m128d _mm_sub_pd(__m128d A, __m128d B);
__m128 _mm_sub_ps(__m128 A, __m128 B);
__m128d _mm_sub_sd(__m128d A, __m128d B);
__m64 _mm_sub_si64(__m64 A, __m64 B);
__m128 _mm_sub_ss(__m128 A, __m128 B);
__m128i _mm_subs_epi16(__m128i A, __m128i B);
__m128i _mm_subs_epi8(__m128i A, __m128i B);
__m128i _mm_subs_epu16(__m128i A, __m128i B);
__m128i _mm_subs_epu8(__m128i A, __m128i B);
int __cdecl _mm_testc_pd(__m128d, __m128d);
int __cdecl _mm_testc_ps(__m128, __m128);
int _mm_testc_si128(__m128i mask, __m128i val);
int __cdecl _mm_testnzc_pd(__m128d, __m128d);
int __cdecl _mm_testnzc_ps(__m128, __m128);
int _mm_testnzc_si128(__m128i mask, __m128i s2);
int __cdecl _mm_testz_pd(__m128d, __m128d);
int __cdecl _mm_testz_ps(__m128, __m128);
int _mm_testz_si128(__m128i mask, __m128i val);
int _mm_ucomieq_sd(__m128d A, __m128d B);
int _mm_ucomieq_ss(__m128 A, __m128 B);
int _mm_ucomige_sd(__m128d A, __m128d B);
int _mm_ucomige_ss(__m128 A, __m128 B);
int _mm_ucomigt_sd(__m128d A, __m128d B);
int _mm_ucomigt_ss(__m128 A, __m128 B);
int _mm_ucomile_sd(__m128d A, __m128d B);
int _mm_ucomile_ss(__m128 A, __m128 B);
int _mm_ucomilt_sd(__m128d A, __m128d B);
int _mm_ucomilt_ss(__m128 A, __m128 B);
int _mm_ucomineq_sd(__m128d A, __m128d B);
int _mm_ucomineq_ss(__m128 A, __m128 B);
__m128i _mm_unpackhi_epi16(__m128i A, __m128i B);
__m128i _mm_unpackhi_epi32(__m128i A, __m128i B);
__m128i _mm_unpackhi_epi64(__m128i A, __m128i B);
__m128i _mm_unpackhi_epi8(__m128i A, __m128i B);
__m128d _mm_unpackhi_pd(__m128d A, __m128d B);
__m128 _mm_unpackhi_ps(__m128 A, __m128 B);
__m128i _mm_unpacklo_epi16(__m128i A, __m128i B);
__m128i _mm_unpacklo_epi32(__m128i A, __m128i B);
__m128i _mm_unpacklo_epi64(__m128i A, __m128i B);
__m128i _mm_unpacklo_epi8(__m128i A, __m128i B);
__m128d _mm_unpacklo_pd(__m128d A, __m128d B);
__m128 _mm_unpacklo_ps(__m128 A, __m128 B);
__m128d _mm_xor_pd(__m128d A, __m128d B);
__m128 _mm_xor_ps(__m128 A, __m128 B);
__m128i _mm_xor_si128(__m128i A, __m128i B);
size_t __cdecl _msize(void *Memory);
unsigned int _mulx_u32(unsigned int, unsigned int, unsigned int *);
double __cdecl _nextafter(double X, double Y);
_onexit_t __cdecl _onexit(_onexit_t Func);
int _open(const char *Filename, int OpenFlag, ...);
int __cdecl _open_osfhandle(intptr_t OSFileHandle, int Flags);
int __cdecl _outp(unsigned __int16, int);
unsigned int __cdecl _outpd(unsigned __int16, unsigned int);
unsigned __int16 __cdecl _outpw(unsigned __int16, unsigned __int16);
int __cdecl _pclose(FILE *File);
const unsigned __int16 *_pctype;
unsigned int _pdep_u32(unsigned int, unsigned int);
unsigned int _pext_u32(unsigned int, unsigned int);
char *_pgmptr;
int __cdecl _pipe(int *PtHandles, unsigned int PipeSize, int TextMode);
FILE *__cdecl _popen(const char *Command, const char *Mode);
int _printf_l(const char *Format, _locale_t Locale, ...);
int _printf_p(const char *Format, ...);
int _printf_p_l(const char *Format, _locale_t Locale, ...);
int _printf_s_l(const char *Format, _locale_t Locale, ...);
int __cdecl _putch(int Ch);
int __cdecl _putch_nolock(int Ch);
int __cdecl _putenv(const char *EnvString);
errno_t __cdecl _putenv_s(const char *Name, const char *Value);
int __cdecl _putw(int Word, FILE *File);
wint_t __cdecl _putwch(wchar_t WCh);
wint_t __cdecl _putwch_nolock(wchar_t WCh);
int __cdecl _putws(const wchar_t *Str);
const wctype_t *_pwctype;
int __cdecl _rdrand16_step(unsigned __int16 *);
int __cdecl _rdrand32_step(unsigned int *);
int __cdecl _read(int FileHandle, void *DstBuf, unsigned int MaxCharCount);
void *__cdecl _recalloc(void *Memory, size_t Count, size_t Size);
int __cdecl _resetstkoflw();
int __cdecl _rmdir(const char *Path);
int __cdecl _rmtmp();
unsigned int _rorx_u32(unsigned int, const unsigned int);
unsigned int __cdecl _rotl(unsigned int Val, int Shift);
unsigned __int16 _rotl16(unsigned __int16 Value, unsigned __int8 Shift);
unsigned __int64 __cdecl _rotl64(unsigned __int64 Val, int Shift);
unsigned __int8 _rotl8(unsigned __int8 Value, unsigned __int8 Shift);
unsigned int __cdecl _rotr(unsigned int Val, int Shift);
unsigned __int16 _rotr16(unsigned __int16 Value, unsigned __int8 Shift);
unsigned __int64 __cdecl _rotr64(unsigned __int64 Val, int Shift);
unsigned __int8 _rotr8(unsigned __int8 Value, unsigned __int8 Shift);
int _sarx_i32(int, unsigned int);
double __cdecl _scalb(double X, int Y);
int _scanf_l(const char *Format, _locale_t Locale, ...);
int _scanf_s_l(const char *Format, _locale_t Locale, ...);
int _scprintf(const char *Format, ...);
int _scprintf_l(const char *Format, _locale_t Locale, ...);
int _scprintf_p(const char *Format, ...);
int _scprintf_p_l(const char *Format, _locale_t Locale, ...);
int _scwprintf(const wchar_t *Format, ...);
int _scwprintf_l(const wchar_t *Format, _locale_t Locale, ...);
int _scwprintf_p(const wchar_t *Format, ...);
int _scwprintf_p_l(const wchar_t *Format, _locale_t Locale, ...);
void __cdecl _searchenv(const char *Filename, const char *EnvVar, char *ResultPath);
errno_t __cdecl _searchenv_s(const char *Filename, const char *EnvVar, char *ResultPath, size_t SizeInBytes);
int __cdecl _set_SSE2_enable(int Flag);
unsigned int __cdecl _set_abort_behavior(unsigned int Flags, unsigned int Mask);
void __cdecl _set_controlfp(unsigned int NewValue, unsigned int Mask);
errno_t __cdecl _set_doserrno(unsigned int Value);
errno_t __cdecl _set_errno(int Value);
int __cdecl _set_error_mode(int Mode);
errno_t __cdecl _set_fmode(int Mode);
_invalid_parameter_handler __cdecl _set_invalid_parameter_handler(_invalid_parameter_handler Handler);
unsigned int __cdecl _set_malloc_crt_max_wait(unsigned int NewValue);
unsigned int __cdecl _set_output_format(unsigned int Format);
int __cdecl _set_printf_count_output(int Value);
_purecall_handler __cdecl _set_purecall_handler(_purecall_handler Handler);
void __cdecl _seterrormode(int Mode);
int __cdecl _setjmp(jmp_buf Buf);
int __cdecl _setmaxstdio(int Max);
int __cdecl _setmbcp(int CodePage);
int __cdecl _setmode(int FileHandle, int Mode);
unsigned int __cdecl _setsystime(struct tm *Tm, unsigned int MilliSec);
unsigned int _shlx_u32(unsigned int, unsigned int);
unsigned int _shrx_u32(unsigned int, unsigned int);
void __cdecl _sleep(unsigned int Duration);
int _snprintf(char *Dest, size_t Count, const char *Format, ...);
int _snprintf_c(char *DstBuf, size_t MaxCount, const char *Format, ...);
int _snprintf_c_l(char *DstBuf, size_t MaxCount, const char *Format, _locale_t Locale, ...);
int _snprintf_l(char *DstBuf, size_t MaxCount, const char *Format, _locale_t Locale, ...);
int _snprintf_s(char *DstBuf, size_t SizeInBytes, size_t MaxCount, const char *Format, ...);
int _snprintf_s_l(char *DstBuf, size_t DstSize, size_t MaxCount, const char *Format, _locale_t Locale, ...);
int _snscanf(const char *Src, size_t MaxCount, const char *Format, ...);
int _snscanf_l(const char *Src, size_t MaxCount, const char *Format, _locale_t Locale, ...);
int _snscanf_s(const char *Src, size_t MaxCount, const char *Format, ...);
int _snscanf_s_l(const char *Src, size_t MaxCount, const char *Format, _locale_t Locale, ...);
int _snwprintf(wchar_t *Dest, size_t Count, const wchar_t *Format, ...);
int _snwprintf_l(wchar_t *DstBuf, size_t MaxCount, const wchar_t *Format, _locale_t Locale, ...);
int _snwprintf_s(wchar_t *DstBuf, size_t SizeInWords, size_t MaxCount, const wchar_t *Format, ...);
int _snwprintf_s_l(wchar_t *DstBuf, size_t DstSize, size_t MaxCount, const wchar_t *Format, _locale_t Locale, ...);
int _snwscanf(const wchar_t *Src, size_t MaxCount, const wchar_t *Format, ...);
int _snwscanf_l(const wchar_t *Src, size_t MaxCount, const wchar_t *Format, _locale_t Locale, ...);
int _snwscanf_s(const wchar_t *Src, size_t MaxCount, const wchar_t *Format, ...);
int _snwscanf_s_l(const wchar_t *Src, size_t MaxCount, const wchar_t *Format, _locale_t Locale, ...);
int _sopen(const char *Filename, int OpenFlag, int ShareFlag, ...);
errno_t __cdecl _sopen_s(int *FileHandle, const char *Filename, int OpenFlag, int ShareFlag, int PermissionMode);
errno_t __cdecl _sopen_s_nolock(int *FileHandle, const char *Filename, int OpenFlag, int ShareFlag, int PermissionMode);
intptr_t _spawnl(int Mode, const char *Filename, const char *ArgList, ...);
intptr_t _spawnle(int Mode, const char *Filename, const char *ArgList, ...);
intptr_t _spawnlp(int Mode, const char *Filename, const char *ArgList, ...);
intptr_t _spawnlpe(int Mode, const char *Filename, const char *ArgList, ...);
intptr_t __cdecl _spawnv(int Mode, const char *Filename, const char *const *ArgList);
intptr_t __cdecl _spawnve(int Mode, const char *Filename, const char *const *ArgList, const char *const *Env);
intptr_t __cdecl _spawnvp(int Mode, const char *Filename, const char *const *ArgList);
intptr_t __cdecl _spawnvpe(int Mode, const char *Filename, const char *const *ArgList, const char *const *Env);
void __cdecl _splitpath(const char *FullPath, char *Drive, char *Dir, char *Filename, char *Ext);
errno_t __cdecl _splitpath_s(const char *FullPath, char *Drive, size_t DriveSize, char *Dir, size_t DirSize, char *Filename, size_t FilenameSize, char *Ext, size_t ExtSize);
int _sprintf_l(char *DstBuf, const char *Format, _locale_t Locale, ...);
int _sprintf_p(char *Dst, size_t MaxCount, const char *Format, ...);
int _sprintf_p_l(char *DstBuf, size_t MaxCount, const char *Format, _locale_t Locale, ...);
int _sprintf_s_l(char *DstBuf, size_t DstSize, const char *Format, _locale_t Locale, ...);
int _sscanf_l(const char *Src, const char *Format, _locale_t Locale, ...);
int _sscanf_s_l(const char *Src, const char *Format, _locale_t Locale, ...);
int __cdecl _stat32(const char *Name, struct _stat32 *Stat);
int __cdecl _stat32i64(const char *Name, struct _stat32i64 *Stat);
int __cdecl _stat64(const char *Name, struct _stat64 *Stat);
int __cdecl _stat64i32(const char *Name, struct _stat64i32 *Stat);
unsigned int __cdecl _statusfp();
void __cdecl _statusfp2(unsigned int *X86_status, unsigned int *SSE2_status);
int __cdecl _strcmpi(const char *Str1, const char *Str2);
int __cdecl _strcoll_l(const char *Str1, const char *Str2, _locale_t Locale);
char *__cdecl _strdate(char *Buffer);
errno_t __cdecl _strdate_s(char *Buf, size_t SizeInBytes);
char *__cdecl _strdec(const char *Cpc1, const char *Cpc2);
char *__cdecl _strdup(const char *Src);
char *__cdecl _strerror(const char *ErrMsg);
errno_t __cdecl _strerror_s(char *Buf, size_t SizeInBytes, const char *ErrMsg);
size_t __cdecl _strftime_l(char *Buf, size_t Max_size, const char *Format, const struct tm *Tm, _locale_t Locale);
int __cdecl _stricmp(const char *Str1, const char *Str2);
int __cdecl _stricmp_l(const char *Str1, const char *Str2, _locale_t Locale);
int __cdecl _stricoll(const char *Str1, const char *Str2);
int __cdecl _stricoll_l(const char *Str1, const char *Str2, _locale_t Locale);
char *__cdecl _strinc(const char *Pc);
char *__cdecl _strlwr(char *String);
char *__cdecl _strlwr_l(char *String, _locale_t Locale);
errno_t __cdecl _strlwr_s(char *Str, size_t Size);
errno_t __cdecl _strlwr_s_l(char *Str, size_t Size, _locale_t Locale);
char *__cdecl _strncat_l(char *Dst, const char *Source, size_t Count, _locale_t Locale);
errno_t __cdecl _strncat_s_l(char *Destination, size_t Destination_size_chars, const char *Source, size_t Count, _locale_t Locale);
size_t __cdecl _strncnt(const char *String, size_t Cnt);
int __cdecl _strncoll(const char *Str1, const char *Str2, size_t MaxCount);
int __cdecl _strncoll_l(const char *Str1, const char *Str2, size_t MaxCount, _locale_t Locale);
char *__cdecl _strncpy_l(char *Dst, const char *Source, size_t Count, _locale_t Locale);
errno_t __cdecl _strncpy_s_l(char *Destination, size_t Destination_size_chars, const char *Source, size_t Count, _locale_t Locale);
unsigned int __cdecl _strnextc(const char *Cpc);
int __cdecl _strnicmp(const char *Str1, const char *Str2, size_t MaxCount);
int __cdecl _strnicmp_l(const char *Str1, const char *Str2, size_t MaxCount, _locale_t Locale);
int __cdecl _strnicoll(const char *Str1, const char *Str2, size_t MaxCount);
int __cdecl _strnicoll_l(const char *Str1, const char *Str2, size_t MaxCount, _locale_t Locale);
char *__cdecl _strninc(const char *Pc, size_t Sz);
char *__cdecl _strnset(char *Dest, int Val, size_t Count);
char *__cdecl _strnset_l(char *Dst, int Value, size_t MaxCount, _locale_t Locale);
errno_t __cdecl _strnset_s(char *Str, size_t SizeInBytes, int Val, size_t MaxCount);
errno_t __cdecl _strnset_s_l(char *Destination, size_t Destination_size_chars, int Value, size_t Count, _locale_t Locale);
char *__cdecl _strrev(char *Str);
char *__cdecl _strset(char *Dest, int Value);
char *__cdecl _strset_l(char *Dst, int Value, _locale_t Locale);
errno_t __cdecl _strset_s(char *Dst, size_t DstSize, int Value);
errno_t __cdecl _strset_s_l(char *Destination, size_t Destination_size_chars, int Value, _locale_t Locale);
char *__cdecl _strspnp(const char *Cpc1, const char *Cpc2);
char *__cdecl _strtime(char *Buffer);
errno_t __cdecl _strtime_s(char *Buf, size_t SizeInBytes);
double __cdecl _strtod_l(const char *Str, char **EndPtr, _locale_t Locale);
__int64 __cdecl _strtoi64(const char *String, char **EndPtr, int Radix);
__int64 __cdecl _strtoi64_l(const char *String, char **EndPtr, int Radix, _locale_t Locale);
char *_strtok_l(char *String, const char *Delimiters, _locale_t Locale);
char *_strtok_s_l(char *String, const char *Delimiters, char **Current_position, _locale_t Locale);
int __cdecl _strtol_l(const char *Str, char **EndPtr, int Radix, _locale_t Locale);
unsigned __int64 __cdecl _strtoui64(const char *String, char **EndPtr, int Radix);
unsigned __int64 __cdecl _strtoui64_l(const char *String, char **EndPtr, int Radix, _locale_t Locale);
unsigned int __cdecl _strtoul_l(const char *Str, char **EndPtr, int Radix, _locale_t Locale);
char *__cdecl _strupr(char *String);
char *__cdecl _strupr_l(char *String, _locale_t Locale);
errno_t __cdecl _strupr_s(char *Str, size_t Size);
errno_t __cdecl _strupr_s_l(char *Str, size_t Size, _locale_t Locale);
size_t __cdecl _strxfrm_l(char *Dst, const char *Src, size_t MaxCount, _locale_t Locale);
void __cdecl _swab(char *Buf1, char *Buf2, int SizeInBytes);
int _swprintf(wchar_t *Dest, const wchar_t *Format, ...);
int _swprintf_c(wchar_t *DstBuf, size_t SizeInWords, const wchar_t *Format, ...);
int _swprintf_c_l(wchar_t *DstBuf, size_t MaxCount, const wchar_t *Format, _locale_t Locale, ...);
static int _swprintf_l(wchar_t *String, size_t Count, const wchar_t *Format, _locale_t Plocinfo, ...);
int _swprintf_p(wchar_t *DstBuf, size_t MaxCount, const wchar_t *Format, ...);
int _swprintf_p_l(wchar_t *DstBuf, size_t MaxCount, const wchar_t *Format, _locale_t Locale, ...);
int _swprintf_s_l(wchar_t *DstBuf, size_t DstSize, const wchar_t *Format, _locale_t Locale, ...);
int _swscanf_l(const wchar_t *Src, const wchar_t *Format, _locale_t Locale, ...);
int _swscanf_s_l(const wchar_t *Src, const wchar_t *Format, _locale_t Locale, ...);
unsigned int _t1mskc_u32(unsigned int);
int __cdecl _tccmp(const char *cpc1, const char *cpc2);
void __cdecl _tccpy(char *pc1, const char *cpc2);
void __cdecl _tccpy_l(char *Pc1, const char *Cpc2, _locale_t Locale);
size_t __cdecl _tclen(const char *cpc);
int __cdecl _tell(int FileHandle);
__int64 __cdecl _telli64(int FileHandle);
char *__cdecl _tempnam(const char *DirName, const char *FilePrefix);
__time32_t __cdecl _time32(__time32_t *Time);
__time64_t __cdecl _time64(__time64_t *Time);
int __cdecl _tolower(int C);
int __cdecl _tolower_l(int C, _locale_t Locale);
int __cdecl _toupper(int C);
int __cdecl _toupper_l(int C, _locale_t Locale);
wint_t __cdecl _towlower_l(wint_t C, _locale_t Locale);
wint_t __cdecl _towupper_l(wint_t C, _locale_t Locale);
unsigned int _tzcnt_u32(unsigned int);
unsigned int _tzmsk_u32(unsigned int);
void __cdecl _tzset();
char *__cdecl _ui64toa(unsigned __int64 Val, char *DstBuf, int Radix);
errno_t __cdecl _ui64toa_s(unsigned __int64 Val, char *DstBuf, size_t Size, int Radix);
wchar_t *__cdecl _ui64tow(unsigned __int64 Val, wchar_t *DstBuf, int Radix);
errno_t __cdecl _ui64tow_s(unsigned __int64 Val, wchar_t *DstBuf, size_t SizeInWords, int Radix);
char *__cdecl _ultoa(unsigned int Value, char *Dest, int Radix);
errno_t __cdecl _ultoa_s(unsigned int Val, char *DstBuf, size_t Size, int Radix);
wchar_t *__cdecl _ultow(unsigned int Value, wchar_t *Dest, int Radix);
errno_t __cdecl _ultow_s(unsigned int Val, wchar_t *DstBuf, size_t SizeInWords, int Radix);
int __cdecl _umask(int Mode);
errno_t __cdecl _umask_s(int NewMode, int *OldMode);
int __cdecl _ungetc_nolock(int Ch, FILE *File);
int __cdecl _ungetch(int Ch);
int __cdecl _ungetch_nolock(int Ch);
wint_t __cdecl _ungetwc_nolock(wint_t Ch, FILE *File);
wint_t __cdecl _ungetwch(wint_t WCh);
wint_t __cdecl _ungetwch_nolock(wint_t WCh);
int __cdecl _unlink(const char *Filename);
int __cdecl _unloaddll(intptr_t Handle);
void __cdecl _unlock_fhandle(int Filehandle);
void __cdecl _unlock_file(FILE *File);
static int __cdecl _utime(const char *Filename, struct _utimbuf *Utimbuf);
int __cdecl _utime32(const char *Filename, struct __utimbuf32 *Time);
int __cdecl _utime64(const char *Filename, struct __utimbuf64 *Time);
int __cdecl _vcprintf(const char *Format, va_list ArgList);
int __cdecl _vcprintf_l(const char *Format, _locale_t Locale, va_list ArgList);
int __cdecl _vcprintf_p(const char *Format, va_list ArgList);
int __cdecl _vcprintf_p_l(const char *Format, _locale_t Locale, va_list ArgList);
int __cdecl _vcprintf_s(const char *Format, va_list ArgList);
int __cdecl _vcprintf_s_l(const char *Format, _locale_t Locale, va_list ArgList);
int __cdecl _vcwprintf(const wchar_t *Format, va_list ArgList);
int __cdecl _vcwprintf_l(const wchar_t *Format, _locale_t Locale, va_list ArgList);
int __cdecl _vcwprintf_p(const wchar_t *Format, va_list ArgList);
int __cdecl _vcwprintf_p_l(const wchar_t *Format, _locale_t Locale, va_list ArgList);
int __cdecl _vcwprintf_s(const wchar_t *Format, va_list ArgList);
int __cdecl _vcwprintf_s_l(const wchar_t *Format, _locale_t Locale, va_list ArgList);
int __cdecl _vfprintf_l(FILE *File, const char *Format, _locale_t Locale, va_list ArgList);
int __cdecl _vfprintf_p(FILE *File, const char *Format, va_list ArgList);
int __cdecl _vfprintf_p_l(FILE *File, const char *Format, _locale_t Locale, va_list ArgList);
int __cdecl _vfprintf_s_l(FILE *File, const char *Format, _locale_t Locale, va_list ArgList);
int __cdecl _vfwprintf_l(FILE *File, const wchar_t *Format, _locale_t Locale, va_list ArgList);
int __cdecl _vfwprintf_p(FILE *File, const wchar_t *Format, va_list ArgList);
int __cdecl _vfwprintf_p_l(FILE *File, const wchar_t *Format, _locale_t Locale, va_list ArgList);
int __cdecl _vfwprintf_s_l(FILE *File, const wchar_t *Format, _locale_t Locale, va_list ArgList);
int __cdecl _vprintf_l(const char *Format, _locale_t Locale, va_list ArgList);
int __cdecl _vprintf_p(const char *Format, va_list ArgList);
int __cdecl _vprintf_p_l(const char *Format, _locale_t Locale, va_list ArgList);
int __cdecl _vprintf_s_l(const char *Format, _locale_t Locale, va_list ArgList);
int __cdecl _vscprintf(const char *Format, va_list ArgList);
int __cdecl _vscprintf_l(const char *Format, _locale_t Locale, va_list ArgList);
int __cdecl _vscprintf_p(const char *Format, va_list ArgList);
int __cdecl _vscprintf_p_l(const char *Format, _locale_t Locale, va_list ArgList);
int __cdecl _vscwprintf(const wchar_t *Format, va_list ArgList);
int __cdecl _vscwprintf_l(const wchar_t *Format, _locale_t Locale, va_list ArgList);
int __cdecl _vscwprintf_p(const wchar_t *Format, va_list ArgList);
int __cdecl _vscwprintf_p_l(const wchar_t *Format, _locale_t Locale, va_list ArgList);
int __cdecl _vsnprintf(char *Dest, size_t Count, const char *Format, va_list Args);
int __cdecl _vsnprintf_c(char *DstBuf, size_t MaxCount, const char *Format, va_list ArgList);
int __cdecl _vsnprintf_c_l(char *DstBuf, size_t MaxCount, const char *, _locale_t Locale, va_list ArgList);
int __cdecl _vsnprintf_l(char *DstBuf, size_t MaxCount, const char *Format, _locale_t Locale, va_list ArgList);
int __cdecl _vsnprintf_s(char *DstBuf, size_t SizeInBytes, size_t MaxCount, const char *Format, va_list ArgList);
int __cdecl _vsnprintf_s_l(char *DstBuf, size_t DstSize, size_t MaxCount, const char *Format, _locale_t Locale, va_list ArgList);
int __cdecl _vsnwprintf(wchar_t *Dest, size_t Count, const wchar_t *Format, va_list Args);
int __cdecl _vsnwprintf_l(wchar_t *DstBuf, size_t MaxCount, const wchar_t *Format, _locale_t Locale, va_list ArgList);
int __cdecl _vsnwprintf_s(wchar_t *DstBuf, size_t SizeInWords, size_t MaxCount, const wchar_t *Format, va_list ArgList);
int __cdecl _vsnwprintf_s_l(wchar_t *DstBuf, size_t DstSize, size_t MaxCount, const wchar_t *Format, _locale_t Locale, va_list ArgList);
int __cdecl _vsprintf_l(char *DstBuf, const char *Format, _locale_t, va_list ArgList);
int __cdecl _vsprintf_p(char *Dst, size_t MaxCount, const char *Format, va_list ArgList);
int __cdecl _vsprintf_p_l(char *DstBuf, size_t MaxCount, const char *Format, _locale_t Locale, va_list ArgList);
int __cdecl _vsprintf_s_l(char *DstBuf, size_t DstSize, const char *Format, _locale_t Locale, va_list ArgList);
int __cdecl _vswprintf(wchar_t *Dest, const wchar_t *Format, va_list Args);
int __cdecl _vswprintf_c(wchar_t *DstBuf, size_t SizeInWords, const wchar_t *Format, va_list ArgList);
int __cdecl _vswprintf_c_l(wchar_t *DstBuf, size_t MaxCount, const wchar_t *Format, _locale_t Locale, va_list ArgList);
static int __cdecl _vswprintf_l(wchar_t *String, size_t Count, const wchar_t *Format, _locale_t Plocinfo, va_list Ap);
int __cdecl _vswprintf_p(wchar_t *DstBuf, size_t MaxCount, const wchar_t *Format, va_list ArgList);
int __cdecl _vswprintf_p_l(wchar_t *DstBuf, size_t MaxCount, const wchar_t *Format, _locale_t Locale, va_list ArgList);
int __cdecl _vswprintf_s_l(wchar_t *DstBuf, size_t DstSize, const wchar_t *Format, _locale_t Locale, va_list ArgList);
int __cdecl _vwprintf_l(const wchar_t *Format, _locale_t Locale, va_list ArgList);
int __cdecl _vwprintf_p(const wchar_t *Format, va_list ArgList);
int __cdecl _vwprintf_p_l(const wchar_t *Format, _locale_t Locale, va_list ArgList);
int __cdecl _vwprintf_s_l(const wchar_t *Format, _locale_t Locale, va_list ArgList);
int __cdecl _waccess(const wchar_t *Filename, int AccessMode);
errno_t __cdecl _waccess_s(const wchar_t *Filename, int AccessMode);
wchar_t *__cdecl _wasctime(const struct tm *Tm);
errno_t __cdecl _wasctime_s(wchar_t *Buf, size_t SizeInWords, const struct tm *Tm);
void __cdecl _wassert(const wchar_t *Message, const wchar_t *File, unsigned int Line);
int __cdecl _wchdir(const wchar_t *Path);
int __cdecl _wchmod(const wchar_t *Filename, int Mode);
int __cdecl _wcreat(const wchar_t *Filename, int PermissionMode);
_locale_t __cdecl _wcreate_locale(int Category, const wchar_t *Locale);
int __cdecl _wcscoll_l(const wchar_t *Str1, const wchar_t *Str2, _locale_t Locale);
wchar_t *__cdecl _wcsdup(const wchar_t *Str);
wchar_t *__cdecl _wcserror(int ErrNum);
errno_t __cdecl _wcserror_s(wchar_t *Buf, size_t SizeInWords, int ErrNum);
size_t __cdecl _wcsftime_l(wchar_t *Buf, size_t SizeInWords, const wchar_t *Format, const struct tm *Tm, _locale_t Locale);
int __cdecl _wcsicmp(const wchar_t *Str1, const wchar_t *Str2);
int __cdecl _wcsicmp_l(const wchar_t *Str1, const wchar_t *Str2, _locale_t Locale);
int __cdecl _wcsicoll(const wchar_t *Str1, const wchar_t *Str2);
int __cdecl _wcsicoll_l(const wchar_t *Str1, const wchar_t *Str2, _locale_t Locale);
wchar_t *__cdecl _wcslwr(wchar_t *String);
wchar_t *__cdecl _wcslwr_l(wchar_t *String, _locale_t Locale);
errno_t __cdecl _wcslwr_s(wchar_t *Str, size_t SizeInWords);
errno_t __cdecl _wcslwr_s_l(wchar_t *Str, size_t SizeInWords, _locale_t Locale);
int __cdecl _wcsncoll(const wchar_t *Str1, const wchar_t *Str2, size_t MaxCount);
int __cdecl _wcsncoll_l(const wchar_t *Str1, const wchar_t *Str2, size_t MaxCount, _locale_t Locale);
int __cdecl _wcsnicmp(const wchar_t *Str1, const wchar_t *Str2, size_t MaxCount);
int __cdecl _wcsnicmp_l(const wchar_t *Str1, const wchar_t *Str2, size_t MaxCount, _locale_t Locale);
int __cdecl _wcsnicoll(const wchar_t *Str1, const wchar_t *Str2, size_t MaxCount);
int __cdecl _wcsnicoll_l(const wchar_t *Str1, const wchar_t *Str2, size_t MaxCount, _locale_t Locale);
wchar_t *__cdecl _wcsnset(wchar_t *Str, wchar_t Val, size_t MaxCount);
errno_t __cdecl _wcsnset_s(wchar_t *Dst, size_t SizeInWords, wchar_t Val, size_t MaxCount);
wchar_t *__cdecl _wcsrev(wchar_t *Str);
wchar_t *__cdecl _wcsset(wchar_t *Str, wchar_t Val);
errno_t __cdecl _wcsset_s(wchar_t *Dst, size_t SizeInWords, wchar_t Value);
double __cdecl _wcstod_l(const wchar_t *Str, wchar_t **EndPtr, _locale_t Locale);
__int64 __cdecl _wcstoi64(const wchar_t *Str, wchar_t **EndPtr, int Radix);
__int64 __cdecl _wcstoi64_l(const wchar_t *Str, wchar_t **EndPtr, int Radix, _locale_t Locale);
int __cdecl _wcstol_l(const wchar_t *Str, wchar_t **EndPtr, int Radix, _locale_t Locale);
size_t __cdecl _wcstombs_l(char *Dest, const wchar_t *Source, size_t MaxCount, _locale_t Locale);
errno_t __cdecl _wcstombs_s_l(size_t *PtNumOfCharConverted, char *Dst, size_t DstSizeInBytes, const wchar_t *Src, size_t MaxCountInBytes, _locale_t Locale);
unsigned __int64 __cdecl _wcstoui64(const wchar_t *Str, wchar_t **EndPtr, int Radix);
unsigned __int64 __cdecl _wcstoui64_l(const wchar_t *Str, wchar_t **EndPtr, int Radix, _locale_t Locale);
unsigned int __cdecl _wcstoul_l(const wchar_t *Str, wchar_t **EndPtr, int Radix, _locale_t Locale);
wchar_t *__cdecl _wcsupr(wchar_t *String);
wchar_t *__cdecl _wcsupr_l(wchar_t *String, _locale_t Locale);
errno_t __cdecl _wcsupr_s(wchar_t *Str, size_t Size);
errno_t __cdecl _wcsupr_s_l(wchar_t *Str, size_t Size, _locale_t Locale);
size_t __cdecl _wcsxfrm_l(wchar_t *Dst, const wchar_t *Src, size_t MaxCount, _locale_t Locale);
static wchar_t *__cdecl _wctime(const time_t *Time);
wchar_t *__cdecl _wctime32(const __time32_t *Time);
errno_t __cdecl _wctime32_s(wchar_t *Buf, size_t SizeInWords, const __time32_t *Time);
wchar_t *__cdecl _wctime64(const __time64_t *Time);
errno_t __cdecl _wctime64_s(wchar_t *Buf, size_t SizeInWords, const __time64_t *Time);
static errno_t __cdecl _wctime_s(wchar_t *Buffer, size_t SizeInWords, const time_t *Time);
int __cdecl _wctomb_l(char *MbCh, wchar_t WCh, _locale_t Locale);
errno_t __cdecl _wctomb_s_l(int *SizeConverted, char *MbCh, size_t SizeInBytes, wchar_t WCh, _locale_t Locale);
const unsigned __int16 _wctype[];
errno_t __cdecl _wdupenv_s(wchar_t **Buffer, size_t *BufferSizeInWords, const wchar_t *VarName);
wchar_t **_wenviron;
intptr_t _wexecl(const wchar_t *Filename, const wchar_t *ArgList, ...);
intptr_t _wexecle(const wchar_t *Filename, const wchar_t *ArgList, ...);
intptr_t _wexeclp(const wchar_t *Filename, const wchar_t *ArgList, ...);
intptr_t _wexeclpe(const wchar_t *Filename, const wchar_t *ArgList, ...);
intptr_t __cdecl _wexecv(const wchar_t *Filename, const wchar_t *const *ArgList);
intptr_t __cdecl _wexecve(const wchar_t *Filename, const wchar_t *const *ArgList, const wchar_t *const *Env);
intptr_t __cdecl _wexecvp(const wchar_t *Filename, const wchar_t *const *ArgList);
intptr_t __cdecl _wexecvpe(const wchar_t *Filename, const wchar_t *const *ArgList, const wchar_t *const *Env);
FILE *__cdecl _wfdopen(int FileHandle, const wchar_t *Mode);
intptr_t __cdecl _wfindfirst32(const wchar_t *Filename, struct _wfinddata32_t *FindData);
intptr_t __cdecl _wfindfirst32i64(const wchar_t *Filename, struct _wfinddata32i64_t *FindData);
intptr_t __cdecl _wfindfirst64(const wchar_t *Filename, struct _wfinddata64_t *FindData);
intptr_t __cdecl _wfindfirst64i32(const wchar_t *Filename, struct _wfinddata64i32_t *FindData);
int __cdecl _wfindnext32(intptr_t FindHandle, struct _wfinddata32_t *FindData);
int __cdecl _wfindnext32i64(intptr_t FindHandle, struct _wfinddata32i64_t *FindData);
int __cdecl _wfindnext64(intptr_t FindHandle, struct _wfinddata64_t *FindData);
int __cdecl _wfindnext64i32(intptr_t FindHandle, struct _wfinddata64i32_t *FindData);
FILE *__cdecl _wfopen(const wchar_t *Filename, const wchar_t *Mode);
errno_t __cdecl _wfopen_s(FILE **File, const wchar_t *Filename, const wchar_t *Mode);
FILE *__cdecl _wfreopen(const wchar_t *Filename, const wchar_t *Mode, FILE *OldFile);
errno_t __cdecl _wfreopen_s(FILE **File, const wchar_t *Filename, const wchar_t *Mode, FILE *OldFile);
FILE *__cdecl _wfsopen(const wchar_t *Filename, const wchar_t *Mode, int ShFlag);
wchar_t *__cdecl _wfullpath(wchar_t *FullPath, const wchar_t *Path, size_t SizeInWords);
wchar_t *__cdecl _wgetcwd(wchar_t *DstBuf, int SizeInWords);
wchar_t *__cdecl _wgetdcwd(int Drive, wchar_t *DstBuf, int SizeInWords);
wchar_t *__cdecl _wgetenv(const wchar_t *VarName);
errno_t __cdecl _wgetenv_s(size_t *ReturnSize, wchar_t *DstBuf, size_t DstSizeInWords, const wchar_t *VarName);
void __cdecl _wmakepath(wchar_t *ResultPath, const wchar_t *Drive, const wchar_t *Dir, const wchar_t *Filename, const wchar_t *Ext);
errno_t __cdecl _wmakepath_s(wchar_t *PathResult, size_t SIZE, const wchar_t *Drive, const wchar_t *Dir, const wchar_t *Filename, const wchar_t *Ext);
int __cdecl _wmkdir(const wchar_t *Path);
wchar_t *__cdecl _wmktemp(wchar_t *TemplateName);
errno_t __cdecl _wmktemp_s(wchar_t *TemplateName, size_t SizeInWords);
int _wopen(const wchar_t *Filename, int OpenFlag, ...);
void __cdecl _wperror(const wchar_t *ErrMsg);
wchar_t *_wpgmptr;
FILE *__cdecl _wpopen(const wchar_t *Command, const wchar_t *Mode);
int _wprintf_l(const wchar_t *Format, _locale_t Locale, ...);
int _wprintf_p(const wchar_t *Format, ...);
int _wprintf_p_l(const wchar_t *Format, _locale_t Locale, ...);
int _wprintf_s_l(const wchar_t *Format, _locale_t Locale, ...);
int __cdecl _wputenv(const wchar_t *EnvString);
errno_t __cdecl _wputenv_s(const wchar_t *Name, const wchar_t *Value);
int __cdecl _wremove(const wchar_t *Filename);
int __cdecl _wrename(const wchar_t *OldFilename, const wchar_t *NewFilename);
int __cdecl _write(int FileHandle, const void *Buf, unsigned int MaxCharCount);
int __cdecl _wrmdir(const wchar_t *Path);
int _wscanf_l(const wchar_t *Format, _locale_t Locale, ...);
int _wscanf_s_l(const wchar_t *Format, _locale_t Locale, ...);
void __cdecl _wsearchenv(const wchar_t *Filename, const wchar_t *EnvVar, wchar_t *ResultPath);
errno_t __cdecl _wsearchenv_s(const wchar_t *Filename, const wchar_t *EnvVar, wchar_t *ResultPath, size_t SizeInWords);
wchar_t *__cdecl _wsetlocale(int Category, const wchar_t *Locale);
int _wsopen(const wchar_t *Filename, int OpenFlag, int ShareFlag, ...);
errno_t __cdecl _wsopen_s(int *FileHandle, const wchar_t *Filename, int OpenFlag, int ShareFlag, int PermissionFlag);
intptr_t _wspawnl(int Mode, const wchar_t *Filename, const wchar_t *ArgList, ...);
intptr_t _wspawnle(int Mode, const wchar_t *Filename, const wchar_t *ArgList, ...);
intptr_t _wspawnlp(int Mode, const wchar_t *Filename, const wchar_t *ArgList, ...);
intptr_t _wspawnlpe(int Mode, const wchar_t *Filename, const wchar_t *ArgList, ...);
intptr_t __cdecl _wspawnv(int Mode, const wchar_t *Filename, const wchar_t *const *ArgList);
intptr_t __cdecl _wspawnve(int Mode, const wchar_t *Filename, const wchar_t *const *ArgList, const wchar_t *const *Env);
intptr_t __cdecl _wspawnvp(int Mode, const wchar_t *Filename, const wchar_t *const *ArgList);
intptr_t __cdecl _wspawnvpe(int Mode, const wchar_t *Filename, const wchar_t *const *ArgList, const wchar_t *const *Env);
void __cdecl _wsplitpath(const wchar_t *FullPath, wchar_t *Drive, wchar_t *Dir, wchar_t *Filename, wchar_t *Ext);
errno_t __cdecl _wsplitpath_s(const wchar_t *FullPath, wchar_t *Drive, size_t DriveSize, wchar_t *Dir, size_t DirSize, wchar_t *Filename, size_t FilenameSize, wchar_t *Ext, size_t ExtSize);
int __cdecl _wstat32(const wchar_t *Name, struct _stat32 *Stat);
int __cdecl _wstat32i64(const wchar_t *Name, struct _stat32i64 *Stat);
int __cdecl _wstat64(const wchar_t *Name, struct _stat64 *Stat);
int __cdecl _wstat64i32(const wchar_t *Name, struct _stat64i32 *Stat);
wchar_t *__cdecl _wstrdate(wchar_t *Buffer);
errno_t __cdecl _wstrdate_s(wchar_t *Buf, size_t SizeInWords);
wchar_t *__cdecl _wstrtime(wchar_t *Buffer);
errno_t __cdecl _wstrtime_s(wchar_t *Buf, size_t SizeInWords);
int __cdecl _wsystem(const wchar_t *Command);
wchar_t *__cdecl _wtempnam(const wchar_t *Directory, const wchar_t *FilePrefix);
wchar_t *__cdecl _wtmpnam(wchar_t *Buffer);
errno_t __cdecl _wtmpnam_s(wchar_t *DstBuf, size_t SizeInWords);
double __cdecl _wtof(const wchar_t *Str);
double __cdecl _wtof_l(const wchar_t *Str, _locale_t Locale);
int __cdecl _wtoi(const wchar_t *Str);
__int64 __cdecl _wtoi64(const wchar_t *Str);
__int64 __cdecl _wtoi64_l(const wchar_t *Str, _locale_t Locale);
int __cdecl _wtoi_l(const wchar_t *Str, _locale_t Locale);
int __cdecl _wtol(const wchar_t *Str);
int __cdecl _wtol_l(const wchar_t *Str, _locale_t Locale);
int __cdecl _wunlink(const wchar_t *Filename);
static int __cdecl _wutime(const wchar_t *Filename, struct _utimbuf *Utimbuf);
int __cdecl _wutime32(const wchar_t *Filename, struct __utimbuf32 *Time);
int __cdecl _wutime64(const wchar_t *Filename, struct __utimbuf64 *Time);
void _xabort(const unsigned int imm);
unsigned __int32 _xbegin(void);
void _xend(void);
unsigned __int64 __cdecl _xgetbv(unsigned int);
void __cdecl _xrstor(const void *, unsigned __int64);
void __cdecl _xsave(void *, unsigned __int64);
void __cdecl _xsaveopt(void *, unsigned __int64);
void __cdecl _xsetbv(unsigned int, unsigned __int64);
unsigned __int8 _xtest(void);
double __cdecl _y0(double X);
double __cdecl _y1(double X);
double __cdecl _yn(int X, double Y);
void __cdecl __noreturn abort();
int __cdecl abs(int X);
int __cdecl access(const char *Filename, int AccessMode);
double __cdecl acos(double X);
char *__cdecl asctime(const struct tm *Tm);
errno_t __cdecl asctime_s(char *Buf, size_t SizeInBytes, const struct tm *Tm);
double __cdecl asin(double X);
double __cdecl atan(double X);
double __cdecl atan2(double Y, double X);
int __cdecl atexit(void (__cdecl *)());
double __cdecl atof(const char *String);
int __cdecl atoi(const char *Str);
int __cdecl atol(const char *Str);
void *__cdecl bsearch(const void *Key, const void *Base, size_t NumOfElements, size_t SizeOfElements, int (__cdecl *PtFuncCompare)(const void *, const void *));
void *__cdecl bsearch_s(const void *Key, const void *Base, rsize_t NumOfElements, rsize_t SizeOfElements, int (__cdecl *PtFuncCompare)(void *, const void *, const void *), void *Context);
wint_t __cdecl btowc(int);
double __cdecl cabs(struct _complex X);
void *__cdecl calloc(size_t Count, size_t Size);
double __cdecl ceil(double X);
char *__cdecl cgets(char *Buffer);
int __cdecl chdir(const char *Path);
int __cdecl chmod(const char *Filename, int AccessMode);
int __cdecl chsize(int FileHandle, int Size);
void __cdecl clearerr(FILE *File);
errno_t __cdecl clearerr_s(FILE *File);
clock_t __cdecl clock();
int __cdecl close(int FileHandle);
double __cdecl cos(double X);
double __cdecl cosh(double X);
int cprintf(const char *Format, ...);
int __cdecl cputs(const char *Str);
int __cdecl creat(const char *Filename, int PermissionMode);
int cscanf(const char *Format, ...);
static char *__cdecl ctime(const time_t *Time);
static errno_t __cdecl ctime_s(char *Buffer, size_t SizeInBytes, const time_t *Time);
intptr_t __cdecl cwait(int *TermStat, intptr_t ProcHandle, int Action);
int daylight;
static double __cdecl difftime(time_t Time1, time_t Time2);
div_t __cdecl div(int Numerator, int Denominator);
int __cdecl dup(int FileHandle);
int __cdecl dup2(int FileHandleSrc, int FileHandleDst);
char *__cdecl ecvt(double Val, int NumOfDigits, int *PtDec, int *PtSign);
int __cdecl eof(int FileHandle);
intptr_t execl(const char *Filename, const char *ArgList, ...);
intptr_t execle(const char *Filename, const char *ArgList, ...);
intptr_t execlp(const char *Filename, const char *ArgList, ...);
intptr_t execlpe(const char *Filename, const char *ArgList, ...);
intptr_t __cdecl execv(const char *Filename, const char *const *ArgList);
intptr_t __cdecl execve(const char *Filename, const char *const *ArgList, const char *const *Env);
intptr_t __cdecl execvp(const char *Filename, const char *const *ArgList);
intptr_t __cdecl execvpe(const char *Filename, const char *const *ArgList, const char *const *Env);
void __cdecl __noreturn exit(int Code);
double __cdecl exp(double X);
double __cdecl fabs(double X);
int __cdecl fclose(FILE *File);
int __cdecl fcloseall();
char *__cdecl fcvt(double Val, int NumOfDec, int *PtDec, int *PtSign);
FILE *__cdecl fdopen(int FileHandle, const char *Format);
int __cdecl feof(FILE *File);
int __cdecl ferror(FILE *File);
int __cdecl fflush(FILE *File);
int __cdecl fgetc(FILE *File);
int __cdecl fgetchar();
int __cdecl fgetpos(FILE *File, fpos_t *Pos);
char *__cdecl fgets(char *Buf, int MaxCount, FILE *File);
wint_t __cdecl fgetwc(FILE *File);
wchar_t *__cdecl fgetws(wchar_t *Dst, int SizeInWords, FILE *File);
int __cdecl filelength(int FileHandle);
int __cdecl fileno(FILE *File);
double __cdecl floor(double X);
int __cdecl flushall();
double __cdecl fmod(double X, double Y);
FILE *__cdecl fopen(const char *Filename, const char *Mode);
errno_t __cdecl fopen_s(FILE **File, const char *Filename, const char *Mode);
void __cdecl fpreset();
int fprintf(FILE *File, const char *Format, ...);
int fprintf_s(FILE *File, const char *Format, ...);
int __cdecl fputc(int Ch, FILE *File);
int __cdecl fputchar(int Ch);
int __cdecl fputs(const char *Str, FILE *File);
wint_t __cdecl fputwc(wchar_t Ch, FILE *File);
int __cdecl fputws(const wchar_t *Str, FILE *File);
size_t __cdecl fread(void *DstBuf, size_t ElementSize, size_t Count, FILE *File);
size_t __cdecl fread_s(void *DstBuf, size_t DstSize, size_t ElementSize, size_t Count, FILE *File);
void __cdecl free(void *Memory);
FILE *__cdecl freopen(const char *Filename, const char *Mode, FILE *File);
errno_t __cdecl freopen_s(FILE **File, const char *Filename, const char *Mode, FILE *OldFile);
double __cdecl frexp(double X, int *Y);
int fscanf(FILE *File, const char *Format, ...);
int fscanf_s(FILE *File, const char *Format, ...);
int __cdecl fseek(FILE *File, int Offset, int Origin);
int __cdecl fsetpos(FILE *File, const fpos_t *Pos);
static int __cdecl fstat(int Desc, struct stat *Stat);
int __cdecl ftell(FILE *File);
static void __cdecl ftime(struct timeb *Tmb);
int __cdecl fwide(FILE *F, int M);
int fwprintf(FILE *File, const wchar_t *Format, ...);
int fwprintf_s(FILE *File, const wchar_t *Format, ...);
size_t __cdecl fwrite(const void *Str, size_t Size, size_t Count, FILE *File);
int fwscanf(FILE *File, const wchar_t *Format, ...);
int fwscanf_s(FILE *File, const wchar_t *Format, ...);
char *__cdecl gcvt(double Val, int NumOfDigits, char *DstBuf);
int __cdecl getc(FILE *File);
int __cdecl getch();
int __cdecl getchar();
int __cdecl getche();
char *__cdecl getcwd(char *DstBuf, int SizeInBytes);
char *__cdecl getenv(const char *VarName);
errno_t __cdecl getenv_s(size_t *ReturnSize, char *DstBuf, rsize_t DstSize, const char *VarName);
int __cdecl getpid();
char *__cdecl gets(char *Buffer);
char *__cdecl gets_s(char *Buf, rsize_t Size);
int __cdecl getw(FILE *File);
wint_t __cdecl getwc(FILE *File);
wint_t __cdecl getwchar();
static struct tm *__cdecl gmtime(const time_t *Time);
static errno_t __cdecl gmtime_s(struct tm *Tm, const time_t *Time);
static double __cdecl hypot(double X, double Y);
static float __cdecl hypotf(float X, float Y);
int __cdecl inp(unsigned __int16);
unsigned int __cdecl inpd(unsigned __int16);
unsigned __int16 __cdecl inpw(unsigned __int16);
int __cdecl is_wctype(wint_t C, wctype_t Type);
int __cdecl isalnum(int C);
int __cdecl isalpha(int C);
int __cdecl isatty(int FileHandle);
int __cdecl iscntrl(int C);
int __cdecl isdigit(int C);
int __cdecl isgraph(int C);
int __cdecl isleadbyte(int C);
int __cdecl islower(int C);
int __cdecl isprint(int C);
int __cdecl ispunct(int C);
int __cdecl isspace(int C);
int __cdecl isupper(int C);
int __cdecl iswalnum(wint_t C);
int __cdecl iswalpha(wint_t C);
int __cdecl iswascii(wint_t C);
int __cdecl iswcntrl(wint_t C);
int __cdecl iswctype(wint_t C, wctype_t Type);
int __cdecl iswdigit(wint_t C);
int __cdecl iswgraph(wint_t C);
int __cdecl iswlower(wint_t C);
int __cdecl iswprint(wint_t C);
int __cdecl iswpunct(wint_t C);
int __cdecl iswspace(wint_t C);
int __cdecl iswupper(wint_t C);
int __cdecl iswxdigit(wint_t C);
int __cdecl isxdigit(int C);
char *__cdecl itoa(int Val, char *DstBuf, int Radix);
double __cdecl j0(double X);
double __cdecl j1(double X);
double __cdecl jn(int X, double Y);
int __cdecl kbhit();
int __cdecl labs(int X);
double __cdecl ldexp(double X, int Y);
ldiv_t __cdecl ldiv(int Numerator, int Denominator);
void *__cdecl lfind(const void *Key, const void *Base, unsigned int *NumOfElements, unsigned int SizeOfElements, int (__cdecl *PtFuncCompare)(const void *, const void *));
__int64 __cdecl llabs(__int64 X);
lldiv_t __cdecl lldiv(__int64 Numerator, __int64 Denominator);
struct lconv *__cdecl localeconv();
static struct tm *__cdecl localtime(const time_t *Time);
static errno_t __cdecl localtime_s(struct tm *Tm, const time_t *Time);
int __cdecl locking(int FileHandle, int LockMode, int NumOfBytes);
double __cdecl log(double X);
double __cdecl log10(double X);
void __cdecl __noreturn longjmp(jmp_buf Buf, int Value);
void *__cdecl lsearch(const void *Key, void *Base, unsigned int *NumOfElements, unsigned int SizeOfElements, int (__cdecl *PtFuncCompare)(const void *, const void *));
int __cdecl lseek(int FileHandle, int Offset, int Origin);
char *__cdecl ltoa(int Val, char *DstBuf, int Radix);
void *__cdecl malloc(size_t Size);
int __cdecl mblen(const char *Ch, size_t MaxCount);
size_t __cdecl mbrlen(const char *Ch, size_t SizeInBytes, mbstate_t *State);
size_t __cdecl mbrtowc(wchar_t *DstCh, const char *SrcCh, size_t SizeInBytes, mbstate_t *State);
int __cdecl mbsinit(const mbstate_t *P);
size_t __cdecl mbsrtowcs(wchar_t *Dest, const char **PSrc, size_t Count, mbstate_t *State);
errno_t __cdecl mbsrtowcs_s(size_t *Retval, wchar_t *Dst, size_t Size, const char **PSrc, size_t N, mbstate_t *State);
size_t __cdecl mbstowcs(wchar_t *Dest, const char *Source, size_t MaxCount);
errno_t __cdecl mbstowcs_s(size_t *PtNumOfCharConverted, wchar_t *DstBuf, size_t SizeInWords, const char *SrcBuf, size_t MaxCount);
int __cdecl mbtowc(wchar_t *DstCh, const char *SrcCh, size_t SrcSizeInBytes);
void *__cdecl memccpy(void *Dst, const void *Src, int Val, size_t Size);
void *__cdecl memchr(const void *Buf, int Val, size_t MaxCount);
int __cdecl memcmp(const void *Buf1, const void *Buf2, size_t Size);
void *__cdecl memcpy(void *Dst, const void *Src, size_t Size);
errno_t __cdecl memcpy_s(void *Dst, rsize_t DstSize, const void *Src, rsize_t MaxCount);
int __cdecl memicmp(const void *Buf1, const void *Buf2, size_t Size);
void *__cdecl memmove(void *Dst, const void *Src, size_t Size);
errno_t __cdecl memmove_s(void *Dst, rsize_t DstSize, const void *Src, rsize_t MaxCount);
void *__cdecl memset(void *Dst, int Val, size_t Size);
int __cdecl mkdir(const char *Path);
char *__cdecl mktemp(char *TemplateName);
static time_t __cdecl mktime(struct tm *Tm);
double __cdecl modf(double X, double *Y);
void __cdecl omp_destroy_lock(omp_lock_t *Lock);
void __cdecl omp_destroy_nest_lock(omp_nest_lock_t *Lock);
int __cdecl omp_get_dynamic();
int __cdecl omp_get_max_threads();
int __cdecl omp_get_nested();
int __cdecl omp_get_num_procs();
int __cdecl omp_get_num_threads();
int __cdecl omp_get_thread_num();
double __cdecl omp_get_wtick();
double __cdecl omp_get_wtime();
int __cdecl omp_in_parallel();
void __cdecl omp_init_lock(omp_lock_t *Lock);
void __cdecl omp_init_nest_lock(omp_nest_lock_t *Lock);
void __cdecl omp_set_dynamic(int Dynamic_threads);
void __cdecl omp_set_lock(omp_lock_t *Lock);
void __cdecl omp_set_nest_lock(omp_nest_lock_t *Lock);
void __cdecl omp_set_nested(int Nested);
void __cdecl omp_set_num_threads(int Num_threads);
int __cdecl omp_test_lock(omp_lock_t *Lock);
int __cdecl omp_test_nest_lock(omp_nest_lock_t *Lock);
void __cdecl omp_unset_lock(omp_lock_t *Lock);
void __cdecl omp_unset_nest_lock(omp_nest_lock_t *Lock);
_onexit_t __cdecl onexit(_onexit_t Func);
int open(const char *Filename, int OpenFlag, ...);
int __cdecl outp(unsigned __int16, int);
unsigned int __cdecl outpd(unsigned __int16, unsigned int);
unsigned __int16 __cdecl outpw(unsigned __int16, unsigned __int16);
void __cdecl perror(const char *ErrMsg);
double __cdecl pow(double X, double Y);
int printf(const char *Format, ...);
int printf_s(const char *Format, ...);
int __cdecl putc(int Ch, FILE *File);
int __cdecl putch(int Ch);
int __cdecl putchar(int Ch);
int __cdecl putenv(const char *EnvString);
int __cdecl puts(const char *Str);
int __cdecl putw(int Ch, FILE *File);
wint_t __cdecl putwc(wchar_t Ch, FILE *File);
wint_t __cdecl putwchar(wchar_t Ch);
void __cdecl qsort(void *Base, size_t NumOfElements, size_t SizeOfElements, int (__cdecl *PtFuncCompare)(const void *, const void *));
void __cdecl qsort_s(void *Base, rsize_t NumOfElements, rsize_t SizeOfElements, int (__cdecl *PtFuncCompare)(void *, const void *, const void *), void *Context);
int __cdecl raise(int SigNum);
int __cdecl rand();
int __cdecl read(int FileHandle, void *DstBuf, unsigned int MaxCharCount);
void *__cdecl realloc(void *Memory, size_t NewSize);
int __cdecl remove(const char *Filename);
int __cdecl rename(const char *OldFilename, const char *NewFilename);
void __cdecl rewind(FILE *File);
int __cdecl rmdir(const char *Path);
int __cdecl rmtmp();
int scanf(const char *Format, ...);
int scanf_s(const char *Format, ...);
void __cdecl setbuf(FILE *File, char *Buffer);
char *__cdecl setlocale(int Category, const char *Locale);
int __cdecl setmode(int FileHandle, int Mode);
int __cdecl setvbuf(FILE *File, char *Buf, int Mode, size_t Size);
void (__cdecl *__cdecl signal(int SigNum, void (__cdecl *Func)(int)))(int);
double __cdecl sin(double X);
double __cdecl sinh(double X);
int sopen(const char *Filename, int OpenFlag, int ShareFlag, ...);
intptr_t spawnl(int, const char *Filename, const char *ArgList, ...);
intptr_t spawnle(int, const char *Filename, const char *ArgList, ...);
intptr_t spawnlp(int, const char *Filename, const char *ArgList, ...);
intptr_t spawnlpe(int, const char *Filename, const char *ArgList, ...);
intptr_t __cdecl spawnv(int, const char *Filename, const char *const *ArgList);
intptr_t __cdecl spawnve(int, const char *Filename, const char *const *ArgList, const char *const *Env);
intptr_t __cdecl spawnvp(int, const char *Filename, const char *const *ArgList);
intptr_t __cdecl spawnvpe(int, const char *Filename, const char *const *ArgList, const char *const *Env);
int sprintf(char *Dest, const char *Format, ...);
int sprintf_s(char *DstBuf, size_t SizeInBytes, const char *Format, ...);
double __cdecl sqrt(double X);
void __cdecl srand(unsigned int Seed);
int sscanf(const char *Src, const char *Format, ...);
int sscanf_s(const char *Src, const char *Format, ...);
static int __cdecl stat(const char *Filename, struct stat *Stat);
char *__cdecl strcat(char *Dest, const char *Source);
errno_t __cdecl strcat_s(char *Dst, rsize_t SizeInBytes, const char *Src);
char *__cdecl strchr(const char *Str, int Val);
int __cdecl strcmp(const char *Str1, const char *Str2);
int __cdecl strcmpi(const char *Str1, const char *Str2);
int __cdecl strcoll(const char *Str1, const char *Str2);
char *__cdecl strcpy(char *Dest, const char *Source);
errno_t __cdecl strcpy_s(char *Dst, rsize_t SizeInBytes, const char *Src);
size_t __cdecl strcspn(const char *Str, const char *Control);
char *__cdecl strdup(const char *Src);
char *__cdecl strerror(int);
errno_t __cdecl strerror_s(char *Buf, size_t SizeInBytes, int ErrNum);
size_t __cdecl strftime(char *Buf, size_t SizeInBytes, const char *Format, const struct tm *Tm);
int __cdecl stricmp(const char *Str1, const char *Str2);
size_t __cdecl strlen(const char *Str);
char *__cdecl strlwr(char *Str);
char *__cdecl strncat(char *Dest, const char *Source, size_t Count);
errno_t __cdecl strncat_s(char *Dst, rsize_t SizeInBytes, const char *Src, rsize_t MaxCount);
int __cdecl strncmp(const char *Str1, const char *Str2, size_t MaxCount);
char *__cdecl strncpy(char *Dest, const char *Source, size_t Count);
errno_t __cdecl strncpy_s(char *Dst, rsize_t SizeInBytes, const char *Src, rsize_t MaxCount);
int __cdecl strnicmp(const char *Str1, const char *Str, size_t MaxCount);
size_t __cdecl strnlen(const char *Str, size_t MaxCount);
static size_t __cdecl strnlen_s(const char *Str, size_t MaxCount);
char *__cdecl strnset(char *Str, int Val, size_t MaxCount);
char *__cdecl strpbrk(const char *Str, const char *Control);
char *__cdecl strrchr(const char *Str, int Ch);
char *__cdecl strrev(char *Str);
char *__cdecl strset(char *Str, int Val);
size_t __cdecl strspn(const char *Str, const char *Control);
char *__cdecl strstr(const char *Str, const char *SubStr);
double __cdecl strtod(const char *Str, char **EndPtr);
char *__cdecl strtok(char *Str, const char *Delim);
char *__cdecl strtok_s(char *Str, const char *Delim, char **Context);
int __cdecl strtol(const char *Str, char **EndPtr, int Radix);
unsigned int __cdecl strtoul(const char *Str, char **EndPtr, int Radix);
char *__cdecl strupr(char *Str);
size_t __cdecl strxfrm(char *Dst, const char *Src, size_t MaxCount);
void __cdecl swab(char *Buf1, char *Buf2, int SizeInBytes);
static int swprintf(wchar_t *String, size_t Count, const wchar_t *Format, ...);
int swprintf_s(wchar_t *Dst, size_t SizeInWords, const wchar_t *Format, ...);
int swscanf(const wchar_t *Src, const wchar_t *Format, ...);
int swscanf_s(const wchar_t *Src, const wchar_t *Format, ...);
int __cdecl system(const char *Command);
double __cdecl tan(double X);
double __cdecl tanh(double X);
int __cdecl tell(int FileHandle);
char *__cdecl tempnam(const char *Directory, const char *FilePrefix);
static time_t __cdecl time(time_t *Time);
int timezone;
FILE *__cdecl tmpfile();
errno_t __cdecl tmpfile_s(FILE **File);
char *__cdecl tmpnam(char *Buffer);
errno_t __cdecl tmpnam_s(char *Buf, rsize_t Size);
int __cdecl tolower(int C);
int __cdecl toupper(int C);
wint_t __cdecl towctrans(wint_t, wctrans_t);
wint_t __cdecl towlower(wint_t C);
wint_t __cdecl towupper(wint_t C);
char *tzname[2];
void __cdecl tzset();
char *__cdecl ultoa(unsigned int Val, char *Dstbuf, int Radix);
int __cdecl umask(int Mode);
int __cdecl ungetc(int Ch, FILE *File);
int __cdecl ungetch(int Ch);
wint_t __cdecl ungetwc(wint_t Ch, FILE *File);
int __cdecl unlink(const char *Filename);
static int __cdecl utime(const char *Filename, struct utimbuf *Utimbuf);
int __cdecl vfprintf(FILE *File, const char *Format, va_list ArgList);
int __cdecl vfprintf_s(FILE *File, const char *Format, va_list ArgList);
int __cdecl vfwprintf(FILE *File, const wchar_t *Format, va_list ArgList);
int __cdecl vfwprintf_s(FILE *File, const wchar_t *Format, va_list ArgList);
int __cdecl vprintf(const char *Format, va_list ArgList);
int __cdecl vprintf_s(const char *Format, va_list ArgList);
int __cdecl vsnprintf(char *DstBuf, size_t MaxCount, const char *Format, va_list ArgList);
int __cdecl vsnprintf_s(char *DstBuf, size_t DstSize, size_t MaxCount, const char *Format, va_list ArgList);
int __cdecl vsprintf(char *Dest, const char *Format, va_list Args);
int __cdecl vsprintf_s(char *DstBuf, size_t SizeInBytes, const char *Format, va_list ArgList);
static int __cdecl vswprintf(wchar_t *String, size_t Count, const wchar_t *Format, va_list Ap);
int __cdecl vswprintf_s(wchar_t *Dst, size_t SizeInWords, const wchar_t *Format, va_list ArgList);
int __cdecl vwprintf(const wchar_t *Format, va_list ArgList);
int __cdecl vwprintf_s(const wchar_t *Format, va_list ArgList);
size_t __cdecl wcrtomb(char *Dest, wchar_t Source, mbstate_t *State);
errno_t __cdecl wcrtomb_s(size_t *Retval, char *Dst, size_t SizeInBytes, wchar_t Ch, mbstate_t *State);
wchar_t *__cdecl wcscat(wchar_t *Dest, const wchar_t *Source);
errno_t __cdecl wcscat_s(wchar_t *Dst, rsize_t SizeInWords, const wchar_t *Src);
wchar_t *__cdecl wcschr(const wchar_t *Str, wchar_t Ch);
int __cdecl wcscmp(const wchar_t *Str1, const wchar_t *Str2);
int __cdecl wcscoll(const wchar_t *Str1, const wchar_t *Str2);
wchar_t *__cdecl wcscpy(wchar_t *Dest, const wchar_t *Source);
errno_t __cdecl wcscpy_s(wchar_t *Dst, rsize_t SizeInWords, const wchar_t *Src);
size_t __cdecl wcscspn(const wchar_t *Str, const wchar_t *Control);
wchar_t *__cdecl wcsdup(const wchar_t *Str);
size_t __cdecl wcsftime(wchar_t *Buf, size_t SizeInWords, const wchar_t *Format, const struct tm *Tm);
int __cdecl wcsicmp(const wchar_t *Str1, const wchar_t *Str2);
int __cdecl wcsicoll(const wchar_t *Str1, const wchar_t *Str2);
size_t __cdecl wcslen(const wchar_t *Str);
wchar_t *__cdecl wcslwr(wchar_t *Str);
wchar_t *__cdecl wcsncat(wchar_t *Dest, const wchar_t *Source, size_t Count);
errno_t __cdecl wcsncat_s(wchar_t *Dst, rsize_t SizeInWords, const wchar_t *Src, rsize_t MaxCount);
int __cdecl wcsncmp(const wchar_t *Str1, const wchar_t *Str2, size_t MaxCount);
wchar_t *__cdecl wcsncpy(wchar_t *Dest, const wchar_t *Source, size_t Count);
errno_t __cdecl wcsncpy_s(wchar_t *Dst, rsize_t SizeInWords, const wchar_t *Src, rsize_t MaxCount);
int __cdecl wcsnicmp(const wchar_t *Str1, const wchar_t *Str2, size_t MaxCount);
size_t __cdecl wcsnlen(const wchar_t *Src, size_t MaxCount);
static size_t __cdecl wcsnlen_s(const wchar_t *Src, size_t MaxCount);
wchar_t *__cdecl wcsnset(wchar_t *Str, wchar_t Val, size_t MaxCount);
wchar_t *__cdecl wcspbrk(const wchar_t *Str, const wchar_t *Control);
wchar_t *__cdecl wcsrchr(const wchar_t *Str, wchar_t Ch);
wchar_t *__cdecl wcsrev(wchar_t *Str);
size_t __cdecl wcsrtombs(char *Dest, const wchar_t **PSource, size_t Count, mbstate_t *State);
errno_t __cdecl wcsrtombs_s(size_t *Retval, char *Dst, size_t SizeInBytes, const wchar_t **Src, size_t Size, mbstate_t *State);
wchar_t *__cdecl wcsset(wchar_t *Str, wchar_t Val);
size_t __cdecl wcsspn(const wchar_t *Str, const wchar_t *Control);
wchar_t *__cdecl wcsstr(const wchar_t *Str, const wchar_t *SubStr);
double __cdecl wcstod(const wchar_t *Str, wchar_t **EndPtr);
wchar_t *__cdecl wcstok(wchar_t *Str, const wchar_t *Delim);
wchar_t *__cdecl wcstok_s(wchar_t *Str, const wchar_t *Delim, wchar_t **Context);
int __cdecl wcstol(const wchar_t *Str, wchar_t **EndPtr, int Radix);
size_t __cdecl wcstombs(char *Dest, const wchar_t *Source, size_t MaxCount);
errno_t __cdecl wcstombs_s(size_t *PtNumOfCharConverted, char *Dst, size_t DstSizeInBytes, const wchar_t *Src, size_t MaxCountInBytes);
unsigned int __cdecl wcstoul(const wchar_t *Str, wchar_t **EndPtr, int Radix);
wchar_t *__cdecl wcsupr(wchar_t *Str);
size_t __cdecl wcsxfrm(wchar_t *Dst, const wchar_t *Src, size_t MaxCount);
int __cdecl wctob(wint_t WCh);
int __cdecl wctomb(char *MbCh, wchar_t WCh);
errno_t __cdecl wctomb_s(int *SizeConverted, char *MbCh, rsize_t SizeInBytes, wchar_t WCh);
wctrans_t __cdecl wctrans(const char *);
wctype_t __cdecl wctype(const char *);
wchar_t *__cdecl wmemchr(const wchar_t *S, wchar_t C, size_t N);
int __cdecl wmemcmp(const wchar_t *S1, const wchar_t *S2, size_t N);
wchar_t *__cdecl wmemcpy(wchar_t *S1, const wchar_t *S2, size_t N);
errno_t __cdecl wmemcpy_s(wchar_t *S1, rsize_t N1, const wchar_t *S2, rsize_t N);
wchar_t *__cdecl wmemmove(wchar_t *S1, const wchar_t *S2, size_t N);
errno_t __cdecl wmemmove_s(wchar_t *S1, rsize_t N1, const wchar_t *S2, rsize_t N);
wchar_t *__cdecl wmemset(wchar_t *S, wchar_t C, size_t N);
int wprintf(const wchar_t *Format, ...);
int wprintf_s(const wchar_t *Format, ...);
int __cdecl write(int Filehandle, const void *Buf, unsigned int MaxCharCount);
int wscanf(const wchar_t *Format, ...);
int wscanf_s(const wchar_t *Format, ...);
double __cdecl y0(double X);
double __cdecl y1(double X);
double __cdecl yn(int X, double Y);
memory_order memory_order_acq_rel;
memory_order memory_order_acquire;
memory_order memory_order_consume;
memory_order memory_order_relaxed;
memory_order memory_order_release;
memory_order memory_order_seq_cst;
