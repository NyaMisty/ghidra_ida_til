struct $7B3C5D519F2E4A5BE311CA6A6DE1B2A0 {int level;unsigned int flags;char fd;unsigned __int8 hold;int bsize;unsigned __int8 *buffer;unsigned __int8 *curp;unsigned int istemp;int token;};
struct $979FA3DE6ECCF956231BFC297C4278E6 {int quot;int rem;};
struct $B8243ED19B76CA5D55F9F69ED1E7C09F {__int32 quot;__int32 rem;};
enum $C967B4BD5950CD7FE5A55F6326D513E0 {DOMAIN = 0x1,SING = 0x2,OVERFLOW = 0x3,UNDERFLOW = 0x4,TLOSS = 0x5,PLOSS = 0x6,STACKFAULT = 0x7,};
struct $DD2596440A2D8284D7D9C623DB5462ED {char ds_drive;char ds_pattern[13];char ds_reserved[7];char ds_attrib;int ds_time;int ds_date;__int32 ds_size;char ds_nameZ[13];};
struct $F537039E3C3D15C2CDBD1FBA107663C2 {char _d_reserved[30];struct dirent _d_dirent;char *_d_dirname;char _d_first;unsigned __int8 _d_magic;};
struct BYTEREGS {unsigned __int8 al;unsigned __int8 ah;unsigned __int8 bl;unsigned __int8 bh;unsigned __int8 cl;unsigned __int8 ch;unsigned __int8 dl;unsigned __int8 dh;};
enum CGA_COLORS {CGA_LIGHTGREEN = 0x1,CGA_LIGHTRED = 0x2,CGA_YELLOW = 0x3,CGA_LIGHTCYAN = 0x1,CGA_LIGHTMAGENTA = 0x2,CGA_WHITE = 0x3,CGA_GREEN = 0x1,CGA_RED = 0x2,CGA_BROWN = 0x3,CGA_CYAN = 0x1,CGA_MAGENTA = 0x2,CGA_LIGHTGRAY = 0x3,};
enum COLORS {BLACK = 0x0,BLUE = 0x1,GREEN = 0x2,CYAN = 0x3,RED = 0x4,MAGENTA = 0x5,BROWN = 0x6,LIGHTGRAY = 0x7,DARKGRAY = 0x8,LIGHTBLUE = 0x9,LIGHTGREEN = 0xA,LIGHTCYAN = 0xB,LIGHTRED = 0xC,LIGHTMAGENTA = 0xD,YELLOW = 0xE,WHITE = 0xF,};
struct COUNTRY {int co_date;char co_curr[5];char co_thsep[2];char co_desep[2];char co_dtsep[2];char co_tmsep[2];char co_currstyle;char co_digits;char co_time;__int32 co_case;char co_dasep[2];char co_fill[10];};
typedef struct $F537039E3C3D15C2CDBD1FBA107663C2 DIR;
struct DOSERROR {int de_exterror;char de_class;char de_action;char de_locus;};
enum EGA_COLORS {EGA_BLACK = 0x0,EGA_BLUE = 0x1,EGA_GREEN = 0x2,EGA_CYAN = 0x3,EGA_RED = 0x4,EGA_MAGENTA = 0x5,EGA_BROWN = 0x14,EGA_LIGHTGRAY = 0x7,EGA_DARKGRAY = 0x38,EGA_LIGHTBLUE = 0x39,EGA_LIGHTGREEN = 0x3A,EGA_LIGHTCYAN = 0x3B,EGA_LIGHTRED = 0x3C,EGA_LIGHTMAGENTA = 0x3D,EGA_YELLOW = 0x3E,EGA_WHITE = 0x3F,};
typedef struct $7B3C5D519F2E4A5BE311CA6A6DE1B2A0 FILE;
enum MACRO_BITSPERBYTE {BITSPERBYTE = 8,};
enum MACRO_BUFSIZ {BUFSIZ = 512,};
enum MACRO_DEXPLEN {DEXPLEN = 11,};
enum MACRO_DMAXEXP {DMAXEXP = 308,};
enum MACRO_DMAXPOWTWO {DMAXPOWTWO = 0x3FF,};
enum MACRO_DMINEXP {DMINEXP = -307,};
enum MACRO_DSIGNIF {DSIGNIF = 53,};
enum MACRO_EOF {EOF = -1,};
enum MACRO_ERRNO {EZERO = 0,EINVFNC = 1,ENOFILE = 2,ENOPATH = 3,ECONTR = 7,EINVMEM = 9,EINVENV = 10,EINVFMT = 11,EINVACC = 12,EINVDAT = 13,EINVDRV = 15,ECURDIR = 16,ENOTSAM = 17,ENMFILE = 18,ENOENT = 2,EMFILE = 4,EACCES = 5,EBADF = 6,ENOMEM = 8,EFAULT = 14,ENODEV = 15,EINVAL = 19,E2BIG = 20,ENOEXEC = 21,EXDEV = 22,ENFILE = 23,ECHILD = 24,ENOTTY = 25,ETXTBSY = 26,EFBIG = 27,ENOSPC = 28,ESPIPE = 29,EROFS = 30,EMLINK = 31,EPIPE = 32,EDOM = 33,ERANGE = 34,EEXIST = 35,EDEADLOCK = 36,EPERM = 37,ESRCH = 38,EINTR = 39,EIO = 40,ENXIO = 41,EAGAIN = 42,ENOTBLK = 43,EBUSY = 44,ENOTDIR = 45,EISDIR = 46,EUCLEAN = 47,O_RDONLY = 1,O_WRONLY = 2,O_RDWR = 4,O_CREAT = 256,O_TRUNC = 512,O_EXCL = 1024,_O_RUNFLAGS = 1792,_O_WRITABLE = 256,_O_EOF = 512,O_APPEND = 2048,O_CHANGED = 4096,O_DEVICE = 8192,O_TEXT = 16384,O_BINARY = -32768,O_NOINHERIT = 128,O_DENYALL = 16,O_DENYWRITE = 32,O_DENYREAD = 48,O_DENYNONE = 64,FLT_RADIX = 2,FLT_ROUNDS = 1,FLT_GUARD = 1,FLT_NORMALIZE = 1,DBL_DIG = 15,FLT_DIG = 6,LDBL_DIG = 18,DBL_MANT_DIG = 53,FLT_MANT_DIG = 24,LDBL_MANT_DIG = 64,DBL_MAX_EXP = 1024,FLT_MAX_EXP = 128,LDBL_MAX_EXP = 16384,DBL_MAX_10_EXP = 308,FLT_MAX_10_EXP = 38,LDBL_MAX_10_EXP = 4932,DBL_MIN_10_EXP = -307,FLT_MIN_10_EXP = -37,LDBL_MIN_10_EXP = -4931,DBL_MIN_EXP = -1021,FLT_MIN_EXP = -125,LDBL_MIN_EXP = -16381,SW_INVALID = 1,SW_DENORMAL = 2,SW_ZERODIVIDE = 4,SW_OVERFLOW = 8,SW_UNDERFLOW = 16,SW_INEXACT = 32,SW_STACKFAULT = 64,MCW_EM = 63,EM_INVALID = 1,EM_DENORMAL = 2,EM_ZERODIVIDE = 4,EM_OVERFLOW = 8,EM_UNDERFLOW = 16,EM_INEXACT = 32,MCW_IC = 4096,IC_AFFINE = 4096,IC_PROJECTIVE = 0,MCW_RC = 3072,RC_CHOP = 3072,RC_UP = 2048,RC_DOWN = 1024,RC_NEAR = 0,MCW_PC = 768,PC_24 = 0,PC_53 = 512,PC_64 = 768,FPE_INTOVFLOW = 126,FPE_INTDIV0 = 127,FPE_INVALID = 129,FPE_ZERODIVIDE = 131,FPE_OVERFLOW = 132,FPE_UNDERFLOW = 133,FPE_INEXACT = 134,FPE_STACKFAULT = 135,FPE_EXPLICITGEN = 140,SEGV_BOUND = 10,SEGV_EXPLICITGEN = 11,ILL_EXECUTION = 20,ILL_EXPLICITGEN = 21,HORIZ_DIR = 0,VERT_DIR = 1,USER_CHAR_SIZE = 0,MAXCOLORS = 15,_NFILE_ = 50,HANDLE_MAX = 50,CHAR_BIT = 8,MB_LEN_MAX = 2,SCHAR_MIN = -128,SCHAR_MAX = 127,UCHAR_MAX = 255,CHAR_MIN = -128,CHAR_MAX = 127,SHRT_MIN = -32768,SHRT_MAX = 32767,USHRT_MAX = -1,LONG_MIN = 0,LONG_MAX = -1,ULONG_MAX = -1,INT_MIN = -32768,INT_MAX = 32767,UINT_MAX = -1,LC_ALL = 0,LC_COLLATE = 1,LC_CTYPE = 2,LC_MONETARY = 3,LC_NUMERIC = 4,LC_TIME = 5,LC_MESSAGES = 6,LC_userdef = 7,LC_LAST = 7,P_WAIT = 0,P_NOWAIT = 1,P_OVERLAY = 2,P_NOWAITO = 3,P_DETACH = 4,WAIT_CHILD = 0,WAIT_GRANDCHILD = 1,SH_COMPAT = 0,SH_DENYRW = 16,SH_DENYWR = 32,SH_DENYRD = 48,SH_DENYNO = 64,SH_DENYNONE = 64,SIG_DFL = 0,SIG_IGN = 1,SIG_ERR = -1,};
enum MACRO_EXIT {EXIT_SUCCESS = 0,EXIT_FAILURE = 1,};
enum MACRO_EXPBASE {EXPBASE = 2,};
enum MACRO_FA {FA_NORMAL = 0x0,FA_RDONLY = 0x1,FA_HIDDEN = 0x2,FA_SYSTEM = 0x4,FA_LABEL = 0x8,FA_DIREC = 0x10,FA_ARCH = 0x20,};
enum MACRO_FEXPLEN {FEXPLEN = 8,};
enum MACRO_FILENAME {FILENAME_MAX = 80,MB_CUR_MAX = 1,RAND_MAX = 32767,};
enum MACRO_FMAXEXP {FMAXEXP = 38,};
enum MACRO_FMAXPOWTWO {FMAXPOWTWO = 0x7F,};
enum MACRO_FMINEXP {FMINEXP = -37,};
enum MACRO_FSIGNIF {FSIGNIF = 24,};
enum MACRO_HIBITI {HIBITI = 0x8000,};
enum MACRO_HIDDENBIT {HIDDENBIT = 1,};
enum MACRO_IEEE {IEEE = 1,};
enum MACRO_L {L_ctermid = 5,L_tmpnam = 13,};
enum MACRO_LENBASE {LENBASE = 1,};
enum MACRO_LK {LK_UNLCK = 0,LK_LOCK = 1,LK_NBLCK = 2,LK_RLCK = 3,LK_NBRLCK = 4,};
enum MACRO_MAX {TMP_MAX = 0xFFFF,FOPEN_MAX = 0x32,};
enum MACRO_MAXDIR {MAXDIR = 66,};
enum MACRO_MAXDRIVE {MAXDRIVE = 3,MAXPATH = 80,};
enum MACRO_MAXEXT {MAXEXT = 5,};
enum MACRO_MAXFILE {MAXFILE = 9,};
enum MACRO_MAXINT {MAXINT = 0x7FFF,HIBITS = 0x8000,};
enum MACRO_MAXLONG {MAXLONG = 0xFFFF,HIBITL = 0x0,};
enum MACRO_MAXSHORT {MAXSHORT = 0x7FFF,};
enum MACRO_MODE {DOS_MODE = 0,OS2_MODE = 1,};
enum MACRO_NFDS {NFDS = 20,};
enum MACRO_NSIG {NSIG = 23,};
enum MACRO_NULL {NULL = 0,};
enum MACRO_READ {_KEYBRD_READ = 0,_NKEYBRD_READ = 16,};
enum MACRO_READY {_KEYBRD_READY = 1,_NKEYBRD_READY = 17,};
enum MACRO_S {S_IFMT = 0xF000,S_IFDIR = 0x4000,S_IFIFO = 0x1000,S_IFCHR = 0x2000,S_IFBLK = 0x3000,S_IFREG = 0x8000,S_IREAD = 0x100,S_IWRITE = 0x80,S_IEXEC = 0x40,};
enum MACRO_SEEK {SEEK_CUR = 1,SEEK_END = 2,SEEK_SET = 0,};
enum MACRO_SHIFTSTATUS {_KEYBRD_SHIFTSTATUS = 2,_NKEYBRD_SHIFTSTATUS = 18,};
enum MACRO_SIGNAL {SIGABRT = 22,SIGFPE = 8,SIGILL = 4,SIGINT = 2,SIGSEGV = 11,SIGTERM = 15,};
enum MACRO_SYS {SYS_OPEN = 50,};
enum MACRO_WEOF {WEOF = 0xFFFF,};
enum MACRO_WILDCARDS {WILDCARDS = 0x1,EXTENSION = 0x2,FILENAME = 0x4,DIRECTORY = 0x8,DRIVE = 0x10,};
enum MACRO__A {_A_NORMAL = 0x0,_A_RDONLY = 0x1,_A_HIDDEN = 0x2,_A_SYSTEM = 0x4,_A_VOLID = 0x8,_A_SUBDIR = 0x10,_A_ARCH = 0x20,};
enum MACRO__BADNODE {_BADNODE = -2,};
enum MACRO__BADVALUE {_BADVALUE = -3,};
enum MACRO__COM {_COM_INIT = 0,_COM_SEND = 1,_COM_RECEIVE = 2,_COM_STATUS = 3,_COM_CHR7 = 2,_COM_CHR8 = 3,_COM_STOP1 = 0,_COM_STOP2 = 4,_COM_NOPARITY = 0,_COM_EVENPARITY = 24,_COM_ODDPARITY = 8,_COM_110 = 0,_COM_150 = 32,_COM_300 = 64,_COM_600 = 96,_COM_1200 = 128,_COM_2400 = 160,_COM_4800 = 192,_COM_9600 = 224,};
enum MACRO__DISK {_DISK_RESET = 0,_DISK_STATUS = 1,_DISK_READ = 2,_DISK_WRITE = 3,_DISK_VERIFY = 4,_DISK_FORMAT = 5,};
enum MACRO__F {_F_RDWR = 0x3,_F_READ = 0x1,_F_WRIT = 0x2,_F_BUF = 0x4,_F_LBUF = 0x8,_F_ERR = 0x10,_F_EOF = 0x20,_F_BIN = 0x40,_F_IN = 0x80,_F_OUT = 0x100,_F_TERM = 0x200,};
enum MACRO__FREEENTRY {_FREEENTRY = 3,_USEDENTRY = 4,};
enum MACRO__HARDERR {_HARDERR_IGNORE = 0,_HARDERR_RETRY = 1,_HARDERR_ABORT = 2,_HARDERR_FAIL = 3,};
enum MACRO__HEAPCORRUPT {_HEAPCORRUPT = -1,};
enum MACRO__HEAPEMPTY {_HEAPEMPTY = 1,_HEAPOK = 2,};
enum MACRO__HEAPEND {_HEAPEND = 5,};
enum MACRO__IOFBF {_IOFBF = 0,_IOLBF = 1,_IONBF = 2,};
enum MACRO__IS {_IS_SP = 1,_IS_DIG = 2,_IS_UPP = 4,_IS_LOW = 8,_IS_HEX = 16,_IS_CTL = 32,_IS_PUN = 64,_IS_BLK = 128,_IS_ALPHA = 12,_IS_ALNUM = 14,_IS_GRAPH = 94,};
enum MACRO__MAX {_MAX_PATH = 80,_MAX_DRIVE = 3,_MAX_DIR = 66,_MAX_FNAME = 9,_MAX_EXT = 5,};
enum MACRO__NOCURSOR {_NOCURSOR = 0,_SOLIDCURSOR = 1,_NORMALCURSOR = 2,BLINK = 128,};
enum MACRO__PRINTER {_PRINTER_WRITE = 0,_PRINTER_INIT = 1,_PRINTER_STATUS = 2,};
enum MACRO__TIME {_TIME_GETCLOCK = 0,_TIME_SETCLOCK = 1,};
enum MACRO___Seg0000 {__Seg0000 = 0x0,__Seg0040 = 0x40,__SegA000 = 0xA000,};
enum MACRO___SegB000 {__SegB000 = 0xB000,};
enum MACRO___SegB800 {__SegB800 = 0xB800,};
enum MACRO___SegC000 {__SegC000 = 0xC000,};
enum MACRO___SegD000 {__SegD000 = 0xD000,};
enum MACRO___SegE000 {__SegE000 = 0xE000,};
enum MACRO___SegF000 {__SegF000 = 0xF000,};
enum MACRO___SegIncr {__SegIncr = 0x100,};
struct REGPACK {unsigned int r_ax;unsigned int r_bx;unsigned int r_cx;unsigned int r_dx;unsigned int r_bp;unsigned int r_si;unsigned int r_di;unsigned int r_ds;unsigned int r_es;unsigned int r_flags;};
union REGS {struct WORDREGS x;struct BYTEREGS h;};
struct SREGS {unsigned int es;unsigned int cs;unsigned int ss;unsigned int ds;};
struct WORDREGS {unsigned int ax;unsigned int bx;unsigned int cx;unsigned int dx;unsigned int si;unsigned int di;unsigned int cflag;unsigned int flags;};
typedef void (__cdecl *_CatcherPTR)();
typedef struct _heapinfo _HEAPINFO;
typedef char _TCHAR;
typedef int _TINT;
typedef signed __int8 _TSCHAR;
typedef unsigned __int8 _TUCHAR;
typedef char _TXCHAR;
struct __jmp_buf {unsigned int j_sp;unsigned int j_ss;unsigned int j_flag;unsigned int j_cs;unsigned int j_ip;unsigned int j_bp;unsigned int j_di;unsigned int j_es;unsigned int j_si;unsigned int j_ds;unsigned int j_excep;unsigned int j_context;};
struct _complexl {long double x;long double y;};
struct _exceptionl {int type;char *name;long double arg1;long double arg2;long double retval;};
struct _heapinfo {int *_pentry;int *__pentry;size_t _size;int _useflag;};
typedef enum $C967B4BD5950CD7FE5A55F6326D513E0 _mexcep;
struct arccoordstype {int x;int y;int xstart;int ystart;int xend;int yend;};
typedef void (__cdecl *atexit_t)();
typedef __int32 clock_t;
struct complex {double x;double y;};
struct date {int da_year;char da_day;char da_mon;};
struct devhdr {__int32 dh_next;int dh_attr;unsigned int dh_strat;unsigned int dh_inter;char dh_name[8];};
struct dfree {unsigned int df_avail;unsigned int df_total;unsigned int df_bsec;unsigned int df_sclus;};
struct dirent {char d_name[13];};
struct diskfree_t {unsigned int total_clusters;unsigned int avail_clusters;unsigned int sectors_per_cluster;unsigned int bytes_per_sector;};
struct diskinfo_t {unsigned int drive;unsigned int head;unsigned int track;unsigned int sector;unsigned int nsectors;void far *buffer;};
typedef struct $979FA3DE6ECCF956231BFC297C4278E6 div_t;
typedef struct $DD2596440A2D8284D7D9C623DB5462ED dosSearchInfo;
struct dosdate_t {unsigned __int8 day;unsigned __int8 month;unsigned int year;unsigned __int8 dayofweek;};
struct dostime_t {unsigned __int8 hour;unsigned __int8 minute;unsigned __int8 second;unsigned __int8 hsecond;};
struct exception {int type;char *name;double arg1;double arg2;double retval;};
struct farheapinfo {void far *ptr;unsigned __int32 size;int in_use;};
struct fatinfo {char fi_sclus;char fi_fatid;unsigned int fi_nclus;int fi_bysec;};
struct fcb {char fcb_drive;char fcb_name[8];char fcb_ext[3];int fcb_curblk;int fcb_recsize;__int32 fcb_filsize;int fcb_date;char fcb_resv[10];char fcb_currec;__int32 fcb_random;};
struct ffblk {char ff_reserved[21];char ff_attrib;unsigned int ff_ftime;unsigned int ff_fdate;__int32 ff_fsize;char ff_name[13];};
enum fill_patterns {EMPTY_FILL = 0x0,SOLID_FILL = 0x1,LINE_FILL = 0x2,LTSLASH_FILL = 0x3,SLASH_FILL = 0x4,BKSLASH_FILL = 0x5,LTBKSLASH_FILL = 0x6,HATCH_FILL = 0x7,XHATCH_FILL = 0x8,INTERLEAVE_FILL = 0x9,WIDE_DOT_FILL = 0xA,CLOSE_DOT_FILL = 0xB,USER_FILL = 0xC,};
struct fillsettingstype {int pattern;int color;};
struct find_t {char reserved[21];char attrib;unsigned int wr_time;unsigned int wr_date;__int32 size;char name[13];};
enum font_names {DEFAULT_FONT = 0x0,TRIPLEX_FONT = 0x1,SMALL_FONT = 0x2,SANS_SERIF_FONT = 0x3,GOTHIC_FONT = 0x4,SCRIPT_FONT = 0x5,SIMPLEX_FONT = 0x6,TRIPLEX_SCR_FONT = 0x7,COMPLEX_FONT = 0x8,EUROPEAN_FONT = 0x9,BOLD_FONT = 0xA,};
typedef __int32 fpos_t;
struct ftime {unsigned __int16 ft_tsec : 5;unsigned __int16 ft_min : 6;unsigned __int16 ft_hour : 5;unsigned __int16 ft_day : 5;unsigned __int16 ft_month : 4;unsigned __int16 ft_year : 7;};
enum graphics_drivers {DETECT = 0x0,CGA = 0x1,MCGA = 0x2,EGA = 0x3,EGA64 = 0x4,EGAMONO = 0x5,IBM8514 = 0x6,HERCMONO = 0x7,ATT400 = 0x8,VGA = 0x9,PC3270 = 0xA,CURRENT_DRIVER = 0xFFFF,};
enum graphics_errors {grOk = 0x0,grNoInitGraph = 0xFFFF,grNotDetected = 0xFFFE,grFileNotFound = 0xFFFD,grInvalidDriver = 0xFFFC,grNoLoadMem = 0xFFFB,grNoScanMem = 0xFFFA,grNoFloodMem = 0xFFF9,grFontNotFound = 0xFFF8,grNoFontMem = 0xFFF7,grInvalidMode = 0xFFF6,grError = 0xFFF5,grIOerror = 0xFFF4,grInvalidFont = 0xFFF3,grInvalidFontNum = 0xFFF2,grInvalidVersion = 0xFFEE,};
enum graphics_modes {CGAC0 = 0x0,CGAC1 = 0x1,CGAC2 = 0x2,CGAC3 = 0x3,CGAHI = 0x4,MCGAC0 = 0x0,MCGAC1 = 0x1,MCGAC2 = 0x2,MCGAC3 = 0x3,MCGAMED = 0x4,MCGAHI = 0x5,EGALO = 0x0,EGAHI = 0x1,EGA64LO = 0x0,EGA64HI = 0x1,EGAMONOHI = 0x0,HERCMONOHI = 0x0,ATT400C0 = 0x0,ATT400C1 = 0x1,ATT400C2 = 0x2,ATT400C3 = 0x3,ATT400MED = 0x4,ATT400HI = 0x5,VGALO = 0x0,VGAMED = 0x1,VGAHI = 0x2,PC3270HI = 0x0,IBM8514LO = 0x0,IBM8514HI = 0x1,};
typedef signed int int16;
typedef signed __int32 int32;
typedef signed __int8 int8;
typedef struct __jmp_buf jmp_buf[1];
struct lconv {char *decimal_point;char *thousands_sep;char *grouping;char *int_curr_symbol;char *currency_symbol;char *mon_decimal_point;char *mon_thousands_sep;char *mon_grouping;char *positive_sign;char *negative_sign;char int_frac_digits;char frac_digits;char p_cs_precedes;char p_sep_by_space;char n_cs_precedes;char n_sep_by_space;char p_sign_posn;char n_sign_posn;};
typedef struct $B8243ED19B76CA5D55F9F69ED1E7C09F ldiv_t;
enum line_styles {SOLID_LINE = 0x0,DOTTED_LINE = 0x1,CENTER_LINE = 0x2,DASHED_LINE = 0x3,USERBIT_LINE = 0x4,};
enum line_widths {NORM_WIDTH = 0x1,THICK_WIDTH = 0x3,};
struct linesettingstype {int linestyle;unsigned int upattern;int thickness;};
struct palettetype {unsigned __int8 size;signed __int8 colors[16];};
struct pointtype {int x;int y;};
typedef int ptrdiff_t;
enum putimage_ops {COPY_PUT = 0x0,XOR_PUT = 0x1,OR_PUT = 0x2,AND_PUT = 0x3,NOT_PUT = 0x4,};
typedef int sig_atomic_t;
typedef unsigned int size_t;
struct stat {int st_dev;int st_ino;int st_mode;int st_nlink;int st_uid;int st_gid;int st_rdev;__int32 st_size;__int32 st_atime;__int32 st_mtime;__int32 st_ctime;};
struct text_info {unsigned __int8 winleft;unsigned __int8 wintop;unsigned __int8 winright;unsigned __int8 winbottom;unsigned __int8 attribute;unsigned __int8 normattr;unsigned __int8 currmode;unsigned __int8 screenheight;unsigned __int8 screenwidth;unsigned __int8 curx;unsigned __int8 cury;};
enum text_just {LEFT_TEXT = 0x0,CENTER_TEXT = 0x1,RIGHT_TEXT = 0x2,BOTTOM_TEXT = 0x0,TOP_TEXT = 0x2,};
enum text_modes {LASTMODE = 0xFFFF,BW40 = 0x0,C40 = 0x1,BW80 = 0x2,C80 = 0x3,MONO = 0x7,C4350 = 0x40,};
struct textsettingstype {int font;int direction;int charsize;int horiz;int vert;};
struct time {unsigned __int8 ti_min;unsigned __int8 ti_hour;unsigned __int8 ti_hund;unsigned __int8 ti_sec;};
typedef __int32 time_t;
struct timeb {__int32 time;int millitm;int timezone;int dstflag;};
struct tm {int tm_sec;int tm_min;int tm_hour;int tm_mday;int tm_mon;int tm_year;int tm_wday;int tm_yday;int tm_isdst;};
typedef unsigned int uint16;
typedef unsigned __int32 uint32;
typedef unsigned __int8 uint8;
struct utimbuf {time_t actime;time_t modtime;};
typedef void *va_list;
struct viewporttype {int left;int top;int right;int bottom;int clip;};
typedef unsigned int wchar_t;
typedef wchar_t wint_t;
struct xfcb {char xfcb_flag;char xfcb_resv[5];char xfcb_attr;struct fcb xfcb_fcb;};

putimage_ops AND_PUT;
graphics_drivers ATT400;
graphics_modes ATT400C0;
graphics_modes ATT400C1;
graphics_modes ATT400C2;
graphics_modes ATT400C3;
graphics_modes ATT400HI;
graphics_modes ATT400MED;
MACRO_BITSPERBYTE BITSPERBYTE;
fill_patterns BKSLASH_FILL;
COLORS BLACK;
MACRO__NOCURSOR BLINK;
COLORS BLUE;
font_names BOLD_FONT;
text_just BOTTOM_TEXT;
COLORS BROWN;
MACRO_BUFSIZ BUFSIZ;
text_modes BW40;
text_modes BW80;
text_modes C40;
text_modes C4350;
text_modes C80;
line_styles CENTER_LINE;
text_just CENTER_TEXT;
graphics_drivers CGA;
graphics_modes CGAC0;
graphics_modes CGAC1;
graphics_modes CGAC2;
graphics_modes CGAC3;
graphics_modes CGAHI;
CGA_COLORS CGA_BROWN;
CGA_COLORS CGA_CYAN;
CGA_COLORS CGA_GREEN;
CGA_COLORS CGA_LIGHTCYAN;
CGA_COLORS CGA_LIGHTGRAY;
CGA_COLORS CGA_LIGHTGREEN;
CGA_COLORS CGA_LIGHTMAGENTA;
CGA_COLORS CGA_LIGHTRED;
CGA_COLORS CGA_MAGENTA;
CGA_COLORS CGA_RED;
CGA_COLORS CGA_WHITE;
CGA_COLORS CGA_YELLOW;
MACRO_ERRNO CHAR_BIT;
MACRO_ERRNO CHAR_MAX;
MACRO_ERRNO CHAR_MIN;
fill_patterns CLOSE_DOT_FILL;
font_names COMPLEX_FONT;
putimage_ops COPY_PUT;
graphics_drivers CURRENT_DRIVER;
COLORS CYAN;
COLORS DARKGRAY;
line_styles DASHED_LINE;
MACRO_ERRNO DBL_DIG;
MACRO_ERRNO DBL_MANT_DIG;
MACRO_ERRNO DBL_MAX_10_EXP;
MACRO_ERRNO DBL_MAX_EXP;
MACRO_ERRNO DBL_MIN_10_EXP;
MACRO_ERRNO DBL_MIN_EXP;
font_names DEFAULT_FONT;
graphics_drivers DETECT;
MACRO_DEXPLEN DEXPLEN;
MACRO_WILDCARDS DIRECTORY;
MACRO_DMAXEXP DMAXEXP;
MACRO_DMAXPOWTWO DMAXPOWTWO;
MACRO_DMINEXP DMINEXP;
$C967B4BD5950CD7FE5A55F6326D513E0 DOMAIN;
MACRO_MODE DOS_MODE;
line_styles DOTTED_LINE;
MACRO_WILDCARDS DRIVE;
MACRO_DSIGNIF DSIGNIF;
MACRO_ERRNO E2BIG;
MACRO_ERRNO EACCES;
MACRO_ERRNO EAGAIN;
MACRO_ERRNO EBADF;
MACRO_ERRNO EBUSY;
MACRO_ERRNO ECHILD;
MACRO_ERRNO ECONTR;
MACRO_ERRNO ECURDIR;
MACRO_ERRNO EDEADLOCK;
MACRO_ERRNO EDOM;
MACRO_ERRNO EEXIST;
MACRO_ERRNO EFAULT;
MACRO_ERRNO EFBIG;
graphics_drivers EGA;
graphics_drivers EGA64;
graphics_modes EGA64HI;
graphics_modes EGA64LO;
graphics_modes EGAHI;
graphics_modes EGALO;
graphics_drivers EGAMONO;
graphics_modes EGAMONOHI;
EGA_COLORS EGA_BLACK;
EGA_COLORS EGA_BLUE;
EGA_COLORS EGA_BROWN;
EGA_COLORS EGA_CYAN;
EGA_COLORS EGA_DARKGRAY;
EGA_COLORS EGA_GREEN;
EGA_COLORS EGA_LIGHTBLUE;
EGA_COLORS EGA_LIGHTCYAN;
EGA_COLORS EGA_LIGHTGRAY;
EGA_COLORS EGA_LIGHTGREEN;
EGA_COLORS EGA_LIGHTMAGENTA;
EGA_COLORS EGA_LIGHTRED;
EGA_COLORS EGA_MAGENTA;
EGA_COLORS EGA_RED;
EGA_COLORS EGA_WHITE;
EGA_COLORS EGA_YELLOW;
MACRO_ERRNO EINTR;
MACRO_ERRNO EINVACC;
MACRO_ERRNO EINVAL;
MACRO_ERRNO EINVDAT;
MACRO_ERRNO EINVDRV;
MACRO_ERRNO EINVENV;
MACRO_ERRNO EINVFMT;
MACRO_ERRNO EINVFNC;
MACRO_ERRNO EINVMEM;
MACRO_ERRNO EIO;
MACRO_ERRNO EISDIR;
MACRO_ERRNO EMFILE;
MACRO_ERRNO EMLINK;
fill_patterns EMPTY_FILL;
MACRO_ERRNO EM_DENORMAL;
MACRO_ERRNO EM_INEXACT;
MACRO_ERRNO EM_INVALID;
MACRO_ERRNO EM_OVERFLOW;
MACRO_ERRNO EM_UNDERFLOW;
MACRO_ERRNO EM_ZERODIVIDE;
MACRO_ERRNO ENFILE;
MACRO_ERRNO ENMFILE;
MACRO_ERRNO ENODEV;
MACRO_ERRNO ENOENT;
MACRO_ERRNO ENOEXEC;
MACRO_ERRNO ENOFILE;
MACRO_ERRNO ENOMEM;
MACRO_ERRNO ENOPATH;
MACRO_ERRNO ENOSPC;
MACRO_ERRNO ENOTBLK;
MACRO_ERRNO ENOTDIR;
MACRO_ERRNO ENOTSAM;
MACRO_ERRNO ENOTTY;
MACRO_ERRNO ENXIO;
MACRO_EOF EOF;
MACRO_ERRNO EPERM;
MACRO_ERRNO EPIPE;
MACRO_ERRNO ERANGE;
MACRO_ERRNO EROFS;
MACRO_ERRNO ESPIPE;
MACRO_ERRNO ESRCH;
MACRO_ERRNO ETXTBSY;
MACRO_ERRNO EUCLEAN;
font_names EUROPEAN_FONT;
MACRO_ERRNO EXDEV;
MACRO_EXIT EXIT_FAILURE;
MACRO_EXIT EXIT_SUCCESS;
MACRO_EXPBASE EXPBASE;
MACRO_WILDCARDS EXTENSION;
MACRO_ERRNO EZERO;
MACRO_FA FA_ARCH;
MACRO_FA FA_DIREC;
MACRO_FA FA_HIDDEN;
MACRO_FA FA_LABEL;
MACRO_FA FA_NORMAL;
MACRO_FA FA_RDONLY;
MACRO_FA FA_SYSTEM;
MACRO_FEXPLEN FEXPLEN;
MACRO_WILDCARDS FILENAME;
MACRO_FILENAME FILENAME_MAX;
MACRO_ERRNO FLT_DIG;
MACRO_ERRNO FLT_GUARD;
MACRO_ERRNO FLT_MANT_DIG;
MACRO_ERRNO FLT_MAX_10_EXP;
MACRO_ERRNO FLT_MAX_EXP;
MACRO_ERRNO FLT_MIN_10_EXP;
MACRO_ERRNO FLT_MIN_EXP;
MACRO_ERRNO FLT_NORMALIZE;
MACRO_ERRNO FLT_RADIX;
MACRO_ERRNO FLT_ROUNDS;
MACRO_FMAXEXP FMAXEXP;
MACRO_FMAXPOWTWO FMAXPOWTWO;
MACRO_FMINEXP FMINEXP;
MACRO_MAX FOPEN_MAX;
MACRO_ERRNO FPE_EXPLICITGEN;
MACRO_ERRNO FPE_INEXACT;
MACRO_ERRNO FPE_INTDIV0;
MACRO_ERRNO FPE_INTOVFLOW;
MACRO_ERRNO FPE_INVALID;
MACRO_ERRNO FPE_OVERFLOW;
MACRO_ERRNO FPE_STACKFAULT;
MACRO_ERRNO FPE_UNDERFLOW;
MACRO_ERRNO FPE_ZERODIVIDE;
MACRO_FSIGNIF FSIGNIF;
font_names GOTHIC_FONT;
COLORS GREEN;
MACRO_ERRNO HANDLE_MAX;
fill_patterns HATCH_FILL;
graphics_drivers HERCMONO;
graphics_modes HERCMONOHI;
MACRO_HIBITI HIBITI;
MACRO_MAXLONG HIBITL;
MACRO_MAXINT HIBITS;
MACRO_HIDDENBIT HIDDENBIT;
MACRO_ERRNO HORIZ_DIR;
graphics_drivers IBM8514;
graphics_modes IBM8514HI;
graphics_modes IBM8514LO;
MACRO_ERRNO IC_AFFINE;
MACRO_ERRNO IC_PROJECTIVE;
MACRO_IEEE IEEE;
MACRO_ERRNO ILL_EXECUTION;
MACRO_ERRNO ILL_EXPLICITGEN;
fill_patterns INTERLEAVE_FILL;
MACRO_ERRNO INT_MAX;
MACRO_ERRNO INT_MIN;
text_modes LASTMODE;
MACRO_ERRNO LC_ALL;
MACRO_ERRNO LC_COLLATE;
MACRO_ERRNO LC_CTYPE;
MACRO_ERRNO LC_LAST;
MACRO_ERRNO LC_MESSAGES;
MACRO_ERRNO LC_MONETARY;
MACRO_ERRNO LC_NUMERIC;
MACRO_ERRNO LC_TIME;
MACRO_ERRNO LC_userdef;
MACRO_ERRNO LDBL_DIG;
MACRO_ERRNO LDBL_MANT_DIG;
MACRO_ERRNO LDBL_MAX_10_EXP;
MACRO_ERRNO LDBL_MAX_EXP;
MACRO_ERRNO LDBL_MIN_10_EXP;
MACRO_ERRNO LDBL_MIN_EXP;
text_just LEFT_TEXT;
MACRO_LENBASE LENBASE;
COLORS LIGHTBLUE;
COLORS LIGHTCYAN;
COLORS LIGHTGRAY;
COLORS LIGHTGREEN;
COLORS LIGHTMAGENTA;
COLORS LIGHTRED;
fill_patterns LINE_FILL;
MACRO_LK LK_LOCK;
MACRO_LK LK_NBLCK;
MACRO_LK LK_NBRLCK;
MACRO_LK LK_RLCK;
MACRO_LK LK_UNLCK;
MACRO_ERRNO LONG_MAX;
MACRO_ERRNO LONG_MIN;
fill_patterns LTBKSLASH_FILL;
fill_patterns LTSLASH_FILL;
MACRO_L L_ctermid;
MACRO_L L_tmpnam;
COLORS MAGENTA;
MACRO_ERRNO MAXCOLORS;
MACRO_MAXDIR MAXDIR;
MACRO_MAXDRIVE MAXDRIVE;
MACRO_MAXEXT MAXEXT;
MACRO_MAXFILE MAXFILE;
MACRO_MAXINT MAXINT;
MACRO_MAXLONG MAXLONG;
MACRO_MAXDRIVE MAXPATH;
MACRO_MAXSHORT MAXSHORT;
MACRO_FILENAME MB_CUR_MAX;
MACRO_ERRNO MB_LEN_MAX;
graphics_drivers MCGA;
graphics_modes MCGAC0;
graphics_modes MCGAC1;
graphics_modes MCGAC2;
graphics_modes MCGAC3;
graphics_modes MCGAHI;
graphics_modes MCGAMED;
MACRO_ERRNO MCW_EM;
MACRO_ERRNO MCW_IC;
MACRO_ERRNO MCW_PC;
MACRO_ERRNO MCW_RC;
text_modes MONO;
MACRO_NFDS NFDS;
line_widths NORM_WIDTH;
putimage_ops NOT_PUT;
MACRO_NSIG NSIG;
MACRO_NULL NULL;
putimage_ops OR_PUT;
MACRO_MODE OS2_MODE;
$C967B4BD5950CD7FE5A55F6326D513E0 OVERFLOW;
MACRO_ERRNO O_APPEND;
MACRO_ERRNO O_BINARY;
MACRO_ERRNO O_CHANGED;
MACRO_ERRNO O_CREAT;
MACRO_ERRNO O_DENYALL;
MACRO_ERRNO O_DENYNONE;
MACRO_ERRNO O_DENYREAD;
MACRO_ERRNO O_DENYWRITE;
MACRO_ERRNO O_DEVICE;
MACRO_ERRNO O_EXCL;
MACRO_ERRNO O_NOINHERIT;
MACRO_ERRNO O_RDONLY;
MACRO_ERRNO O_RDWR;
MACRO_ERRNO O_TEXT;
MACRO_ERRNO O_TRUNC;
MACRO_ERRNO O_WRONLY;
graphics_drivers PC3270;
graphics_modes PC3270HI;
MACRO_ERRNO PC_24;
MACRO_ERRNO PC_53;
MACRO_ERRNO PC_64;
$C967B4BD5950CD7FE5A55F6326D513E0 PLOSS;
MACRO_ERRNO P_DETACH;
MACRO_ERRNO P_NOWAIT;
MACRO_ERRNO P_NOWAITO;
MACRO_ERRNO P_OVERLAY;
MACRO_ERRNO P_WAIT;
MACRO_FILENAME RAND_MAX;
MACRO_ERRNO RC_CHOP;
MACRO_ERRNO RC_DOWN;
MACRO_ERRNO RC_NEAR;
MACRO_ERRNO RC_UP;
COLORS RED;
text_just RIGHT_TEXT;
font_names SANS_SERIF_FONT;
MACRO_ERRNO SCHAR_MAX;
MACRO_ERRNO SCHAR_MIN;
font_names SCRIPT_FONT;
MACRO_SEEK SEEK_CUR;
MACRO_SEEK SEEK_END;
MACRO_SEEK SEEK_SET;
MACRO_ERRNO SEGV_BOUND;
MACRO_ERRNO SEGV_EXPLICITGEN;
MACRO_ERRNO SHRT_MAX;
MACRO_ERRNO SHRT_MIN;
MACRO_ERRNO SH_COMPAT;
MACRO_ERRNO SH_DENYNO;
MACRO_ERRNO SH_DENYNONE;
MACRO_ERRNO SH_DENYRD;
MACRO_ERRNO SH_DENYRW;
MACRO_ERRNO SH_DENYWR;
MACRO_SIGNAL SIGABRT;
MACRO_SIGNAL SIGFPE;
MACRO_SIGNAL SIGILL;
MACRO_SIGNAL SIGINT;
MACRO_SIGNAL SIGSEGV;
MACRO_SIGNAL SIGTERM;
MACRO_ERRNO SIG_DFL;
MACRO_ERRNO SIG_ERR;
MACRO_ERRNO SIG_IGN;
font_names SIMPLEX_FONT;
$C967B4BD5950CD7FE5A55F6326D513E0 SING;
fill_patterns SLASH_FILL;
font_names SMALL_FONT;
fill_patterns SOLID_FILL;
line_styles SOLID_LINE;
$C967B4BD5950CD7FE5A55F6326D513E0 STACKFAULT;
MACRO_ERRNO SW_DENORMAL;
MACRO_ERRNO SW_INEXACT;
MACRO_ERRNO SW_INVALID;
MACRO_ERRNO SW_OVERFLOW;
MACRO_ERRNO SW_STACKFAULT;
MACRO_ERRNO SW_UNDERFLOW;
MACRO_ERRNO SW_ZERODIVIDE;
MACRO_SYS SYS_OPEN;
MACRO_S S_IEXEC;
MACRO_S S_IFBLK;
MACRO_S S_IFCHR;
MACRO_S S_IFDIR;
MACRO_S S_IFIFO;
MACRO_S S_IFMT;
MACRO_S S_IFREG;
MACRO_S S_IREAD;
MACRO_S S_IWRITE;
line_widths THICK_WIDTH;
$C967B4BD5950CD7FE5A55F6326D513E0 TLOSS;
MACRO_MAX TMP_MAX;
text_just TOP_TEXT;
font_names TRIPLEX_FONT;
font_names TRIPLEX_SCR_FONT;
MACRO_ERRNO UCHAR_MAX;
MACRO_ERRNO UINT_MAX;
MACRO_ERRNO ULONG_MAX;
$C967B4BD5950CD7FE5A55F6326D513E0 UNDERFLOW;
line_styles USERBIT_LINE;
MACRO_ERRNO USER_CHAR_SIZE;
fill_patterns USER_FILL;
MACRO_ERRNO USHRT_MAX;
MACRO_ERRNO VERT_DIR;
graphics_drivers VGA;
graphics_modes VGAHI;
graphics_modes VGALO;
graphics_modes VGAMED;
MACRO_ERRNO WAIT_CHILD;
MACRO_ERRNO WAIT_GRANDCHILD;
MACRO_WEOF WEOF;
COLORS WHITE;
fill_patterns WIDE_DOT_FILL;
MACRO_WILDCARDS WILDCARDS;
fill_patterns XHATCH_FILL;
putimage_ops XOR_PUT;
COLORS YELLOW;
void __cdecl ATT_driver();
int ATT_driver_far[];
MACRO__A _A_ARCH;
MACRO__A _A_HIDDEN;
MACRO__A A_NORMAL;
MACRO__A _A_RDONLY;
MACRO__A _A_SUBDIR;
MACRO__A _A_SYSTEM;
MACRO__A _A_VOLID;
MACRO__BADNODE _BADNODE;
MACRO__BADVALUE _BADVALUE;
void __cdecl CGA_driver();
int CGA_driver_far[];
MACRO__COM COM_110;
MACRO__COM _COM_1200;
MACRO__COM _COM_150;
MACRO__COM _COM_2400;
MACRO__COM _COM_300;
MACRO__COM _COM_4800;
MACRO__COM _COM_600;
MACRO__COM _COM_9600;
MACRO__COM _COM_CHR7;
MACRO__COM _COM_CHR8;
MACRO__COM _COM_EVENPARITY;
MACRO__COM COM_INIT;
MACRO__COM COM_NOPARITY;
MACRO__COM _COM_ODDPARITY;
MACRO__COM _COM_RECEIVE;
MACRO__COM _COM_SEND;
MACRO__COM _COM_STATUS;
MACRO__COM COM_STOP1;
MACRO__COM _COM_STOP2;
MACRO__DISK _DISK_FORMAT;
MACRO__DISK _DISK_READ;
MACRO__DISK DISK_RESET;
MACRO__DISK _DISK_STATUS;
MACRO__DISK _DISK_VERIFY;
MACRO__DISK _DISK_WRITE;
void __cdecl EGAVGA_driver();
int EGAVGA_driver_far[];
MACRO__FREEENTRY _FREEENTRY;
MACRO__F _F_BIN;
MACRO__F _F_BUF;
MACRO__F _F_EOF;
MACRO__F _F_ERR;
MACRO__F _F_IN;
MACRO__F _F_LBUF;
MACRO__F _F_OUT;
MACRO__F _F_RDWR;
MACRO__F _F_READ;
MACRO__F _F_TERM;
MACRO__F _F_WRIT;
MACRO__HARDERR _HARDERR_ABORT;
MACRO__HARDERR _HARDERR_FAIL;
MACRO__HARDERR HARDERR_IGNORE;
MACRO__HARDERR _HARDERR_RETRY;
MACRO__HEAPCORRUPT _HEAPCORRUPT;
MACRO__HEAPEMPTY _HEAPEMPTY;
MACRO__HEAPEND _HEAPEND;
MACRO__HEAPEMPTY _HEAPOK;
void __cdecl Herc_driver();
int Herc_driver_far[];
void __cdecl IBM8514_driver();
int IBM8514_driver_far[];
MACRO__IOFBF IOFBF;
MACRO__IOFBF _IOLBF;
MACRO__IOFBF _IONBF;
MACRO__IS _IS_ALNUM;
MACRO__IS _IS_ALPHA;
MACRO__IS _IS_BLK;
MACRO__IS _IS_CTL;
MACRO__IS _IS_DIG;
MACRO__IS _IS_GRAPH;
MACRO__IS _IS_HEX;
MACRO__IS _IS_LOW;
MACRO__IS _IS_PUN;
MACRO__IS _IS_SP;
MACRO__IS _IS_UPP;
MACRO_READ KEYBRD_READ;
MACRO_READY _KEYBRD_READY;
MACRO_SHIFTSTATUS _KEYBRD_SHIFTSTATUS;
MACRO__MAX _MAX_DIR;
MACRO__MAX _MAX_DRIVE;
MACRO__MAX _MAX_EXT;
MACRO__MAX _MAX_FNAME;
MACRO__MAX _MAX_PATH;
MACRO_ERRNO _NFILE_;
MACRO_READ _NKEYBRD_READ;
MACRO_READY _NKEYBRD_READY;
MACRO_SHIFTSTATUS _NKEYBRD_SHIFTSTATUS;
MACRO__NOCURSOR NOCURSOR;
MACRO__NOCURSOR _NORMALCURSOR;
MACRO_ERRNO _O_EOF;
MACRO_ERRNO _O_RUNFLAGS;
MACRO_ERRNO _O_WRITABLE;
void __cdecl PC3270_driver();
int PC3270_driver_far[];
MACRO__PRINTER _PRINTER_INIT;
MACRO__PRINTER _PRINTER_STATUS;
MACRO__PRINTER PRINTER_WRITE;
MACRO__NOCURSOR _SOLIDCURSOR;
MACRO__TIME TIME_GETCLOCK;
MACRO__TIME _TIME_SETCLOCK;
MACRO__FREEENTRY _USEDENTRY;
const int _8087;
void __cdecl _InitEasyWin();
int __cdecl __far _OvrInitEms(unsigned int emsHandle, unsigned int emsFirst, unsigned int emsPages);
int __cdecl __far _OvrInitExt(unsigned __int32 extStart, unsigned __int32 extLength);
MACRO___Seg0000 _Seg0000;
MACRO___Seg0000 __Seg0040;
MACRO___Seg0000 __SegA000;
MACRO___SegB000 __SegB000;
MACRO___SegB800 __SegB800;
MACRO___SegC000 __SegC000;
MACRO___SegD000 __SegD000;
MACRO___SegE000 __SegE000;
MACRO___SegF000 __SegF000;
MACRO___SegIncr __SegIncr;
int __cdecl __abs__(int);
void *__cdecl __alloca__(size_t size);
void __cdecl __assertfail(char *msg, char *cond, char *file, int line);
void __cdecl __cli__();
void __emit__(unsigned __int8 byte, ...);
double __cdecl __fabs__(double x);
unsigned __int8 __cdecl __inportb__(unsigned int portid);
unsigned int __cdecl __inportw__(unsigned int portid);
void __cdecl __int__(int interruptnum);
void *__cdecl __memchr__(const void *s, int c, size_t n);
int __cdecl __memcmp__(const void *s1, const void *s2, size_t n);
void *__cdecl __memcpy__(void *dest, const void *src, size_t n);
void *__cdecl __memset__(void *s, int c, size_t n);
unsigned __int8 __cdecl __outportb__(unsigned int portid, unsigned __int8 value);
unsigned int __cdecl __outportw__(unsigned int portid, unsigned int value);
unsigned int __cdecl __rotl__(unsigned int value, int count);
unsigned int __cdecl __rotr__(unsigned int value, int count);
void __cdecl __sti__();
char *__cdecl __stpcpy__(char *dest, const char *src);
char *__cdecl __strcat__(char *dest, const char *src);
char *__cdecl __strchr__(const char *s, int c);
int __cdecl __strcmp__(const char *s1, const char *s2);
char *__cdecl __strcpy__(char *dest, const char *src);
size_t __cdecl __strlen__(const char *s);
char *__cdecl __strncat__(char *dest, const char *src, size_t maxlen);
int __cdecl __strncmp__(const char *s1, const char *s2, size_t maxlen);
char *__cdecl __strncpy__(char *dest, const char *src, size_t maxlen);
char *__cdecl __strnset__(char *s, int ch, size_t n);
char *__cdecl __strrchr__(const char *s, int c);
char *__cdecl __strset__(char *s, int ch);
int _argc;
char **_argv;
long double __cdecl _atold(const char *s);
unsigned int __cdecl _bios_disk(unsigned int cmd, struct diskinfo_t *dinfo);
unsigned int __cdecl _bios_equiplist();
unsigned int __cdecl _bios_keybrd(unsigned int cmd);
unsigned int __cdecl _bios_memsize();
unsigned int __cdecl _bios_printer(unsigned int cmd, unsigned int port, unsigned int abyte);
unsigned int __cdecl _bios_serialcom(unsigned int cmd, unsigned int port, unsigned int abyte);
unsigned int __cdecl _bios_timeofday(unsigned int cmd, __int32 *timeval);
void __cdecl _c_exit();
void __cdecl _cexit();
void __cdecl _chain_intr(void (__interrupt far *target)());
int __cdecl _chdrive(int drive);
int _chmod(const char *pathname, int func, ...);
unsigned int __cdecl _clear87();
int __cdecl _close(int handle);
unsigned int __cdecl _control87(unsigned int newcw, unsigned int mask);
int __cdecl _creat(const char *path, int attribute);
unsigned __int8 __cdecl _crotl(unsigned __int8 value, int count);
unsigned __int8 __cdecl _crotr(unsigned __int8 value, int count);
unsigned __int8 _ctype[257];
int _daylight;
unsigned int _default87;
int _directvideo;
unsigned int __cdecl _dos_allocmem(unsigned int size, unsigned int *segp);
unsigned int __cdecl _dos_close(int fd);
unsigned int __cdecl _dos_commit(int fd);
unsigned int __cdecl _dos_creat(const char *pathP, unsigned int attr, int *fd);
unsigned int __cdecl _dos_creatnew(const char *pathP, unsigned int attr, int *fd);
unsigned int __cdecl _dos_findfirst(const char *path, unsigned int attrib, struct find_t *finfo);
unsigned int __cdecl _dos_findnext(struct find_t *finfo);
unsigned int __cdecl _dos_freemem(unsigned int segx);
void __cdecl _dos_getdate(struct dosdate_t *datep);
unsigned int __cdecl _dos_getdiskfree(unsigned int drive, struct diskfree_t *dtable);
void __cdecl _dos_getdrive(unsigned int *drive);
unsigned int __cdecl _dos_getfileattr(const char *filename, unsigned int *attrib);
unsigned int __cdecl _dos_getftime(int fd, unsigned int *date, unsigned int *time);
void __cdecl _dos_gettime(struct dostime_t *timep);
void (__cdecl __interrupt far *__cdecl _dos_getvect(unsigned int interruptno))();
void __cdecl _dos_keep(unsigned __int8 status, unsigned int size);
unsigned int __cdecl _dos_open(const char *pathP, unsigned int oflag, int *fd);
unsigned int __cdecl _dos_read(int fd, void far *buf, unsigned int len, unsigned int *nread);
unsigned int __cdecl _dos_setblock(unsigned int size, unsigned int segx, unsigned int *maxp);
unsigned int __cdecl _dos_setdate(struct dosdate_t *datep);
void __cdecl _dos_setdrive(unsigned int drive, unsigned int *ndrives);
unsigned int __cdecl _dos_setfileattr(const char *filename, unsigned int attrib);
unsigned int __cdecl _dos_setftime(int fd, unsigned int date, unsigned int time);
unsigned int __cdecl _dos_settime(struct dostime_t *timep);
void __cdecl _dos_setvect(unsigned int interruptno, void (__interrupt far *isr)());
unsigned int __cdecl _dos_write(int fd, const void far *buf, unsigned int len, unsigned int *nread);
int _doserrno;
char **_environ;
void __cdecl _exit(int status);
int __cdecl _fgetc(FILE *stream);
int __cdecl _finite(double d);
int __cdecl _finitel(long double ld);
int _floatconvert;
void far *__cdecl __far _fmemccpy(void far *dest, const void far *src, int c, size_t n);
void far *__cdecl __far _fmemchr(const void far *s, int c, size_t n);
int __cdecl __far _fmemcmp(const void far *s1, const void far *s2, size_t n);
void far *__cdecl __far _fmemcpy(void far *dest, const void far *src, size_t n);
int __cdecl __far _fmemicmp(const void far *s1, const void far *s2, size_t n);
void far *__cdecl __far _fmemmove(void far *dest, const void far *src, size_t n);
void far *__cdecl __far _fmemset(void far *s, int c, size_t n);
int _fmode;
void __cdecl __far _fmovmem(const void far *src, void far *dest, unsigned int length);
void __cdecl _fpreset();
unsigned int _fpstklen;
int __cdecl _fputc(char c, FILE *stream);
void __cdecl __far _fsetmem(void far *dest, unsigned int length, char value);
FILE *__cdecl _fsopen(const char *path, const char *mode, int shflag);
char far *__cdecl __far _fstrcat(char far *dest, const char far *src);
char far *__cdecl __far _fstrchr(const char far *s, int c);
int __cdecl __far _fstrcmp(const char far *s1, const char far *s2);
char far *__cdecl __far _fstrcpy(char far *dest, const char far *src);
size_t __cdecl __far _fstrcspn(const char far *s1, const char far *s2);
char far *__cdecl __far _fstrdup(const char far *s);
int __cdecl __far _fstricmp(const char far *s1, const char far *s2);
size_t __cdecl __far _fstrlen(const char far *s);
char far *__cdecl __far _fstrlwr(char far *s);
char far *__cdecl __far _fstrncat(char far *dest, const char far *src, size_t maxlen);
int __cdecl __far _fstrncmp(const char far *s1, const char far *s2, size_t maxlen);
char far *__cdecl __far _fstrncpy(char far *dest, const char far *src, size_t maxlen);
int __cdecl __far _fstrnicmp(const char far *s1, const char far *s2, size_t maxlen);
char far *__cdecl __far _fstrnset(char far *s, int ch, size_t n);
char far *__cdecl __far _fstrpbrk(const char far *s1, const char far *s2);
char far *__cdecl __far _fstrrchr(const char far *s, int c);
char far *__cdecl __far _fstrrev(char far *s);
char far *__cdecl __far _fstrset(char far *s, int ch);
size_t __cdecl __far _fstrspn(const char far *s1, const char far *s2);
char far *__cdecl __far _fstrstr(const char far *s1, const char far *s2);
char far *__cdecl __far _fstrtok(char far *s1, const char far *s2);
char far *__cdecl __far _fstrupr(char far *s);
char *__cdecl _fullpath(char *buf, const char *path, size_t maxlen);
char *__cdecl _getdcwd(int drive, char *buf, int len);
int __cdecl _getdrive();
void __cdecl __far _graphfreemem(void far *ptr, unsigned int size);
void far *__cdecl __far _graphgetmem(unsigned int size);
void __cdecl _harderr(void (__cdecl __far far *fptr)());
void __cdecl _hardresume(int axret);
void __cdecl _hardretn(int retn);
unsigned int _heaplen;
int __cdecl _heapwalk(_HEAPINFO *entry);
double _huge_dble;
long double _huge_ldble;
int __cdecl _isnan(double d);
int __cdecl _isnanl(long double ld);
struct lconv *__cdecl _llocaleconv();
unsigned __int32 __cdecl _lrotl(unsigned __int32 val, int count);
unsigned __int32 __cdecl _lrotr(unsigned __int32 val, int count);
char *__cdecl _lsetlocale(int category, const char *locale);
int __cdecl _lstrcoll(const char *s1, const char *s2);
size_t __cdecl _lstrftim(char *s, size_t maxsize, const char *fmt, const struct tm *t);
char *__cdecl _lstrlwr(char *s);
char *__cdecl _lstrupr(char *s);
size_t __cdecl _lstrxfrm(char *s1, const char *s2, size_t n);
int __cdecl _ltolower(int ch);
int __cdecl _ltoupper(int ch);
wchar_t *__cdecl _lwcslwr(wchar_t *s);
wchar_t *__cdecl _lwcsupr(wchar_t *s);
void __cdecl _makepath(char *path, const char *drive, const char *dir, const char *name, const char *ext);
int __cdecl _matherr(struct exception *e);
int __cdecl _matherrl(struct _exceptionl *e);
double _max_dble;
float _max_flt;
long double _max_ldble;
int __cdecl _mkdir(const char *path);
char *__cdecl _mktemp(char *template);
unsigned int _nfile;
int __cdecl _open(const char *path, int oflags);
unsigned __int8 _osmajor;
unsigned __int8 _osminor;
unsigned int _osversion;
unsigned int _ovrbuffer;
unsigned int _psp;
int __cdecl _read(int handle, void *buf, unsigned int len);
int __cdecl _rmdir(const char *path);
unsigned int __cdecl _rotl(unsigned int value, int count);
unsigned int __cdecl _rotr(unsigned int value, int count);
int _rtl_chmod(const char *pathname, int func, ...);
int __cdecl _rtl_close(int handle);
int __cdecl _rtl_creat(const char *path, int attribute);
int __cdecl _rtl_open(const char *path, int oflags);
int __cdecl _rtl_read(int handle, void *buf, unsigned int len);
int __cdecl _rtl_write(int handle, const void *buf, unsigned int len);
void __cdecl _searchenv(const char *file, const char *varname, char *pathname);
void __cdecl _searchstr(const char *file, const char *ipath, char *pathname);
void __cdecl _setcursortype(int cur_t);
int _sopen(const char *path, int access, int shflag, ...);
void __cdecl _splitpath(const char *path, char *drive, char *dir, char *name, char *ext);
unsigned int __cdecl _status87();
unsigned int _stklen;
char *__cdecl _stpcpy(char *dest, const char *src);
char *__cdecl _strdate(char *datestr);
FILE _streams[];
char *__cdecl _strerror(const char *s);
char *__cdecl _strtime(char *timestr);
long double __cdecl _strtold(const char *s, char **endptr);
char *_sys_errlist[];
int _sys_nerr;
__int32 _timezone;
long double _tiny_ldble;
char *const _tzname[2];
void __cdecl _tzset();
unsigned int _version;
wchar_t *__cdecl _wcsdup(const wchar_t *s);
int __cdecl _wcsicmp(const wchar_t *s1, const wchar_t *s2);
wchar_t *__cdecl _wcslwr(wchar_t *s);
int __cdecl _wcsnicmp(const wchar_t *s1, const wchar_t *s2, size_t maxlen);
wchar_t *__cdecl _wcsnset(wchar_t *s, wchar_t ch, size_t n);
wchar_t *__cdecl _wcspcpy(wchar_t *dest, const wchar_t *src);
wchar_t *__cdecl _wcsrev(wchar_t *s);
wchar_t *__cdecl _wcsset(wchar_t *s, wchar_t ch);
wchar_t *__cdecl _wcsupr(wchar_t *s);
wchar_t **_wenviron;
void *__cdecl _wmemcpy(void *dest, const void *src, size_t n);
void *__cdecl _wmemset(void *s, int c, size_t n);
int __cdecl _write(int handle, const void *buf, unsigned int len);
int _wscroll;
void __cdecl abort();
int __cdecl abs(int x);
int __cdecl absread(int drive, int nsects, __int32 lsect, void *buffer);
int __cdecl abswrite(int drive, int nsects, __int32 lsect, void *buffer);
int __cdecl access(const char *path, int amode);
double __cdecl acos(double x);
long double __cdecl acosl(long double x);
void *__cdecl alloca(size_t size);
int __cdecl allocmem(unsigned int size, unsigned int *segp);
void __cdecl __far arc(int x, int y, int stangle, int endangle, int radius);
char *__cdecl asctime(const struct tm *tblock);
double __cdecl asin(double x);
long double __cdecl asinl(long double x);
double __cdecl atan(double x);
double __cdecl atan2(double y, double x);
long double __cdecl atan2l(long double x, long double y);
long double __cdecl atanl(long double x);
int __cdecl atexit(void (__cdecl *func)());
double __cdecl atof(const char *s);
int __cdecl atoi(const char *s);
__int32 __cdecl atol(const char *s);
void __cdecl __far bar(int left, int top, int right, int bottom);
void __cdecl __far bar3d(int left, int top, int right, int bottom, int depth, int topflag);
int __cdecl bdos(int dosfun, unsigned int dosdx, unsigned int dosal);
int __cdecl bdosptr(int dosfun, void *argument, unsigned int dosal);
int __cdecl bioscom(int cmd, char abyte, int port);
int __cdecl biosdisk(int cmd, int drive, int head, int track, int sector, int nsects, void *buffer);
int __cdecl biosequip();
int __cdecl bioskey(int cmd);
int __cdecl biosmemory();
int __cdecl biosprint(int cmd, int abyte, int port);
__int32 __cdecl biostime(int cmd, __int32 newtime);
int __cdecl brk(void *addr);
void *__cdecl bsearch(const void *key, const void *base, size_t nelem, size_t width, int (__cdecl *fcmp)(const void *, const void *));
void *__cdecl calloc(size_t nitems, size_t size);
double __cdecl ceil(double x);
long double __cdecl ceill(long double x);
char *__cdecl cgets(char *str);
int __cdecl chdir(const char *path);
int __cdecl chmod(const char *path, int amode);
int __cdecl chsize(int handle, __int32 size);
void __cdecl __far circle(int x, int y, int radius);
void __cdecl __far cleardevice();
void __cdecl clearerr(FILE *stream);
void __cdecl __far clearviewport();
clock_t __cdecl clock();
int __cdecl close(int handle);
int __cdecl closedir(DIR *dir);
void __cdecl __far closegraph();
void __cdecl clreol();
void __cdecl clrscr();
unsigned int __cdecl coreleft();
double __cdecl cos(double x);
double __cdecl cosh(double x);
long double __cdecl coshl(long double x);
long double __cdecl cosl(long double x);
struct COUNTRY *__cdecl country(int xcode, struct COUNTRY *cp);
int cprintf(const char *format, ...);
int __cdecl cputs(const char *str);
int __cdecl creat(const char *path, int amode);
int __cdecl creatnew(const char *path, int mode);
int __cdecl creattemp(char *path, int amode);
int cscanf(const char *format, ...);
char *__cdecl ctime(const time_t *time);
void __cdecl ctrlbrk(int (__cdecl *handler)());
void __cdecl delay(unsigned int milliseconds);
void __cdecl delline();
void __cdecl __far detectgraph(int far *graphdriver, int far *graphmode);
double __cdecl difftime(time_t time2, time_t time1);
void __cdecl disable();
div_t __cdecl div(int numer, int denom);
int __cdecl dosexterr(struct DOSERROR *eblkp);
__int32 __cdecl dostounix(struct date *d, struct time *t);
void __cdecl __far drawpoly(int numpoints, const int far *polypoints);
int __cdecl dup(int handle);
int __cdecl dup2(int oldhandle, int newhandle);
char *__cdecl ecvt(double value, int ndig, int *dec, int *sign);
void __cdecl __far ellipse(int x, int y, int stangle, int endangle, int xradius, int yradius);
void __cdecl enable();
int __cdecl eof(int handle);
int errno;
int execl(char *path, char *arg0, ...);
int execle(char *path, char *arg0, ...);
int execlp(char *path, char *arg0, ...);
int execlpe(char *path, char *arg0, ...);
int __cdecl execv(char *path, char *argv[]);
int __cdecl execve(char *path, char *argv[], char **env);
int __cdecl execvp(char *path, char *argv[]);
int __cdecl execvpe(char *path, char *argv[], char **env);
void __cdecl exit(int status);
double __cdecl exp(double x);
long double __cdecl expl(long double x);
double __cdecl fabs(double x);
long double __cdecl fabsl(long double x);
void far *__cdecl farcalloc(unsigned __int32 nunits, unsigned __int32 unitsz);
unsigned __int32 __cdecl farcoreleft();
void __cdecl farfree(void far *block);
int __cdecl farheapcheck();
int __cdecl farheapcheckfree(unsigned int fillvalue);
int __cdecl farheapchecknode(void far *node);
int __cdecl farheapfillfree(unsigned int fillvalue);
int __cdecl farheapwalk(struct farheapinfo *hi);
void far *__cdecl farmalloc(unsigned __int32 nbytes);
void far *__cdecl farrealloc(void far *oldblock, unsigned __int32 nbytes);
int __cdecl fclose(FILE *stream);
int __cdecl fcloseall();
char *__cdecl fcvt(double value, int ndig, int *dec, int *sign);
FILE *__cdecl fdopen(int handle, char *type);
int __cdecl feof(FILE *fp);
int __cdecl ferror(FILE *fp);
int __cdecl fflush(FILE *stream);
int __cdecl fgetc(FILE *stream);
int __cdecl fgetchar();
int __cdecl fgetpos(FILE *stream, fpos_t *pos);
char *__cdecl fgets(char *s, int n, FILE *stream);
__int32 __cdecl filelength(int handle);
int __cdecl fileno(FILE *fp);
void __cdecl __far fillellipse(int x, int y, int xradius, int yradius);
void __cdecl __far fillpoly(int numpoints, const int far *polypoints);
int __cdecl findfirst(const char *path, struct ffblk *ffblk, int attrib);
int __cdecl findnext(struct ffblk *ffblk);
void __cdecl __far floodfill(int x, int y, int border);
double __cdecl floor(double x);
long double __cdecl floorl(long double x);
int __cdecl flushall();
double __cdecl fmod(double x, double y);
long double __cdecl fmodl(long double x, long double y);
void __cdecl fnmerge(char *path, const char *drive, const char *dir, const char *name, const char *ext);
int __cdecl fnsplit(const char *path, char *drive, char *dir, char *name, char *ext);
FILE *__cdecl fopen(const char *path, const char *mode);
int fprintf(FILE *stream, const char *format, ...);
int __cdecl fputc(int c, FILE *stream);
int __cdecl fputchar(int c);
int __cdecl fputs(const char *s, FILE *stream);
size_t __cdecl fread(void *ptr, size_t size, size_t n, FILE *stream);
void __cdecl free(void *block);
int __cdecl freemem(unsigned int segx);
FILE *__cdecl freopen(const char *path, const char *mode, FILE *stream);
double __cdecl frexp(double x, int *exponent);
long double __cdecl frexpl(long double x, int *exponent);
int fscanf(FILE *stream, const char *format, ...);
int __cdecl fseek(FILE *stream, __int32 offset, int whence);
int __cdecl fsetpos(FILE *stream, const fpos_t *pos);
int __cdecl fstat(int handle, struct stat *statbuf);
__int32 __cdecl ftell(FILE *stream);
void __cdecl ftime(struct timeb *);
size_t __cdecl fwrite(const void *ptr, size_t size, size_t n, FILE *stream);
char *__cdecl gcvt(double value, int ndec, char *buf);
void __cdecl __far getarccoords(struct arccoordstype far *arccoords);
void __cdecl __far getaspectratio(int far *xasp, int far *yasp);
int __cdecl __far getbkcolor();
int __cdecl getc(FILE *fp);
int __cdecl getcbrk();
int __cdecl getch();
int __cdecl getchar();
int __cdecl getche();
int __cdecl __far getcolor();
int __cdecl getcurdir(int drive, char *directory);
char *__cdecl getcwd(char *buf, int buflen);
void __cdecl getdate(struct date *datep);
struct palettetype far *__cdecl __far getdefaultpalette();
void __cdecl getdfree(unsigned __int8 drive, struct dfree *dtable);
int __cdecl getdisk();
char *__cdecl __far getdrivername();
char far *__cdecl getdta();
char *__cdecl getenv(const char *name);
void __cdecl getfat(unsigned __int8 drive, struct fatinfo *dtable);
void __cdecl getfatd(struct fatinfo *dtable);
void __cdecl __far getfillpattern(char far *pattern);
void __cdecl __far getfillsettings(struct fillsettingstype far *fillinfo);
int __cdecl getftime(int handle, struct ftime *ftimep);
int __cdecl __far getgraphmode();
void __cdecl __far getimage(int left, int top, int right, int bottom, void far *bitmap);
void __cdecl __far getlinesettings(struct linesettingstype far *lineinfo);
int __cdecl __far getmaxcolor();
int __cdecl __far getmaxmode();
int __cdecl __far getmaxx();
int __cdecl __far getmaxy();
char *__cdecl __far getmodename(int mode_number);
void __cdecl __far getmoderange(int graphdriver, int far *lomode, int far *himode);
void __cdecl __far getpalette(struct palettetype far *palette);
int __cdecl __far getpalettesize();
char *__cdecl getpass(const char *prompt);
unsigned int __cdecl __far getpixel(int x, int y);
unsigned int __cdecl getpsp();
char *__cdecl gets(char *s);
int __cdecl gettext(int left, int top, int right, int bottom, void *destin);
void __cdecl gettextinfo(struct text_info *r);
void __cdecl __far gettextsettings(struct textsettingstype far *texttypeinfo);
void __cdecl gettime(struct time *timep);
void (__cdecl __interrupt far *__cdecl getvect(int interruptno))();
int __cdecl getverify();
void __cdecl __far getviewsettings(struct viewporttype far *viewport);
int __cdecl getw(FILE *stream);
int __cdecl __far getx();
int __cdecl __far gety();
struct tm *__cdecl gmtime(const time_t *timer);
void __cdecl gothic_font();
int gothic_font_far[];
void __cdecl gotoxy(int x, int y);
void __cdecl __far graphdefaults();
char *__cdecl __far grapherrormsg(int errorcode);
int __cdecl __far graphresult();
void __cdecl harderr(int (__cdecl *handler)());
void __cdecl hardresume(int axret);
void __cdecl hardretn(int retn);
int __cdecl heapcheck();
int __cdecl heapcheckfree(unsigned int fillvalue);
int __cdecl heapchecknode(void *node);
int __cdecl heapfillfree(unsigned int fillvalue);
int __cdecl heapwalk(struct farheapinfo *hi);
void __cdecl highvideo();
double __cdecl hypot(double x, double y);
long double __cdecl hypotl(long double x, long double y);
unsigned int __cdecl __far imagesize(int left, int top, int right, int bottom);
void __cdecl __far initgraph(int far *graphdriver, int far *graphmode, const char far *pathtodriver);
int __cdecl inp(unsigned int portid);
unsigned int __cdecl inport(unsigned int portid);
unsigned __int8 __cdecl inportb(unsigned int portid);
unsigned int __cdecl inpw(unsigned int portid);
void __cdecl insline();
int __cdecl __far installuserdriver(const char far *name, int (__far *detect)(void));
int __cdecl __far installuserfont(const char far *name);
int __cdecl int86(int intno, union REGS *inregs, union REGS *outregs);
int __cdecl int86x(int intno, union REGS *inregs, union REGS *outregs, struct SREGS *segregs);
int __cdecl intdos(union REGS *inregs, union REGS *outregs);
int __cdecl intdosx(union REGS *inregs, union REGS *outregs, struct SREGS *segregs);
void __cdecl intr(int intno, struct REGPACK *preg);
int ioctl(int handle, int func, ...);
int __cdecl isalnum(int c);
int __cdecl isalpha(int c);
int __cdecl isascii(int c);
int __cdecl isatty(int handle);
int __cdecl iscntrl(int c);
int __cdecl isdigit(int c);
int __cdecl isgraph(int c);
int __cdecl islower(int c);
int __cdecl isprint(int c);
int __cdecl ispunct(int c);
int __cdecl isspace(int c);
int __cdecl isupper(int c);
int __cdecl isxdigit(int c);
char *__cdecl itoa(int value, char *string, int radix);
int __cdecl kbhit();
void __cdecl keep(unsigned __int8 status, unsigned int size);
__int32 __cdecl labs(__int32 x);
double __cdecl ldexp(double x, int exponent);
long double __cdecl ldexpl(long double x, int exponent);
ldiv_t __cdecl ldiv(__int32 numer, __int32 denom);
void *__cdecl lfind(const void *key, const void *base, size_t *num, size_t width, int (__cdecl *fcmp)(const void *, const void *));
void __cdecl __far line(int x1, int y1, int x2, int y2);
void __cdecl __far linerel(int dx, int dy);
void __cdecl __far lineto(int x, int y);
struct lconv *__cdecl localeconv();
struct tm *__cdecl localtime(const time_t *timer);
int __cdecl lock(int handle, __int32 offset, __int32 length);
int __cdecl locking(int handle, int mode, __int32 length);
double __cdecl log(double x);
double __cdecl log10(double x);
long double __cdecl log10l(long double x);
long double __cdecl logl(long double x);
void __cdecl longjmp(jmp_buf jmpb, int retval);
void __cdecl lowvideo();
void *__cdecl lsearch(const void *key, void *base, size_t *num, size_t width, int (__cdecl *fcmp)(const void *, const void *));
__int32 __cdecl lseek(int handle, __int32 offset, int fromwhere);
char *__cdecl ltoa(__int32 value, char *string, int radix);
void *__cdecl malloc(size_t size);
int __cdecl mblen(const char *s, size_t n);
size_t __cdecl mbstowcs(wchar_t *pwcs, const char *s, size_t n);
int __cdecl mbtowc(wchar_t *pwc, const char *s, size_t n);
void *__cdecl memccpy(void *dest, const void *src, int c, size_t n);
void *__cdecl memchr(const void *s, int c, size_t n);
int __cdecl memcmp(const void *s1, const void *s2, size_t n);
void *__cdecl memcpy(void *dest, const void *src, size_t n);
int __cdecl memicmp(const void *s1, const void *s2, size_t n);
void *__cdecl memmove(void *dest, const void *src, size_t n);
void *__cdecl memset(void *s, int c, size_t n);
int __cdecl mkdir(const char *path);
char *__cdecl mktemp(char *template);
time_t __cdecl mktime(struct tm *timeptr);
double __cdecl modf(double x, double *ipart);
long double __cdecl modfl(long double x, long double *ipart);
void __cdecl movedata(unsigned int srcseg, unsigned int srcoff, unsigned int dstseg, unsigned int dstoff, size_t n);
void __cdecl __far moverel(int dx, int dy);
int __cdecl movetext(int left, int top, int right, int bottom, int destleft, int desttop);
void __cdecl __far moveto(int x, int y);
void __cdecl movmem(const void *src, void *dest, unsigned int length);
void __cdecl normvideo();
void __cdecl nosound();
int open(const char *path, int access, ...);
DIR *__cdecl opendir(const char *dirname);
int __cdecl outp(unsigned int portid, int value);
void __cdecl outport(unsigned int portid, unsigned int value);
void __cdecl outportb(unsigned int portid, unsigned __int8 value);
unsigned int __cdecl outpw(unsigned int portid, unsigned int value);
void __cdecl __far outtext(const char far *textstring);
void __cdecl __far outtextxy(int x, int y, const char far *textstring);
char *__cdecl parsfnm(const char *cmdline, struct fcb *fcb, int opt);
int __cdecl peek(unsigned int segment, unsigned int offset);
char __cdecl peekb(unsigned int segment, unsigned int offset);
void __cdecl perror(const char *s);
void __cdecl __far pieslice(int x, int y, int stangle, int endangle, int radius);
void __cdecl poke(unsigned int segment, unsigned int offset, int value);
void __cdecl pokeb(unsigned int segment, unsigned int offset, char value);
double __cdecl poly(double x, int degree, double *coeffs);
long double __cdecl polyl(long double x, int degree, long double *coeffs);
double __cdecl pow(double x, double y);
double __cdecl pow10(int p);
long double __cdecl pow10l(int p);
long double __cdecl powl(long double x, long double y);
int printf(const char *format, ...);
int __cdecl putc(const int c, FILE *fp);
int __cdecl putch(int c);
int __cdecl putchar(const int c);
int __cdecl putenv(const char *name);
void __cdecl __far putimage(int left, int top, const void far *bitmap, int op);
void __cdecl __far putpixel(int x, int y, int color);
int __cdecl puts(const char *s);
int __cdecl puttext(int left, int top, int right, int bottom, void *source);
int __cdecl putw(int w, FILE *stream);
void __cdecl qsort(void *base, size_t nelem, size_t width, int (__cdecl *fcmp)(const void *, const void *));
int __cdecl raise(int sig);
int __cdecl rand();
int __cdecl randbrd(struct fcb *fcb, int rcnt);
int __cdecl randbwr(struct fcb *fcb, int rcnt);
int __cdecl read(int handle, void *buf, unsigned int len);
struct dirent *__cdecl readdir(DIR *dir);
void *__cdecl realloc(void *block, size_t size);
void __cdecl __far rectangle(int left, int top, int right, int bottom);
int __cdecl registerbgidriver(void (*driver)(void));
int __cdecl registerbgifont(void (*font)(void));
int __cdecl __far registerfarbgidriver(void far *driver);
int __cdecl __far registerfarbgifont(void far *font);
int __cdecl remove(const char *path);
int __cdecl rename(const char *oldname, const char *newname);
void __cdecl __far restorecrtmode();
void __cdecl rewind(FILE *stream);
void __cdecl rewinddir(DIR *dir);
int __cdecl rmdir(const char *path);
int __cdecl rmtmp();
void __cdecl sansserif_font();
int sansserif_font_far[];
void *__cdecl sbrk(int incr);
int scanf(const char *format, ...);
char *__cdecl searchpath(const char *file);
void __cdecl __far sector(int X, int Y, int StAngle, int EndAngle, int XRadius, int YRadius);
void __cdecl segread(struct SREGS *segp);
void __cdecl __far setactivepage(int page);
void __cdecl __far setallpalette(const struct palettetype far *palette);
void __cdecl __far setaspectratio(int xasp, int yasp);
void __cdecl __far setbkcolor(int color);
int __cdecl setblock(unsigned int segx, unsigned int newsize);
void __cdecl setbuf(FILE *stream, char *buf);
int __cdecl setcbrk(int cbrkvalue);
void __cdecl __far setcolor(int color);
void __cdecl setdate(struct date *datep);
int __cdecl setdisk(int drive);
void __cdecl setdta(char far *dta);
void __cdecl __far setfillpattern(const char far *upattern, int color);
void __cdecl __far setfillstyle(int pattern, int color);
int __cdecl setftime(int handle, struct ftime *ftimep);
unsigned int __cdecl __far setgraphbufsize(unsigned int bufsize);
void __cdecl __far setgraphmode(int mode);
int __cdecl setjmp(jmp_buf jmpb);
void __cdecl __far setlinestyle(int linestyle, unsigned int upattern, int thickness);
char *__cdecl setlocale(int category, const char *locale);
void __cdecl setmem(void *dest, unsigned int length, char value);
int __cdecl setmode(int handle, int amode);
void __cdecl __far setpalette(int colornum, int color);
void __cdecl __far setrgbpalette(int colornum, int red, int green, int blue);
void __cdecl __far settextjustify(int horiz, int vert);
void __cdecl __far settextstyle(int font, int direction, int charsize);
void __cdecl settime(struct time *timep);
void __cdecl __far setusercharsize(int multx, int divx, int multy, int divy);
int __cdecl setvbuf(FILE *stream, char *buf, int type, size_t size);
void __cdecl setvect(int interruptno, void (__interrupt far *isr)());
void __cdecl setverify(int value);
void __cdecl __far setviewport(int left, int top, int right, int bottom, int clip);
void __cdecl __far setvisualpage(int page);
void __cdecl __far setwritemode(int mode);
void (__cdecl *__cdecl signal(int sig, void (__cdecl *func)()))(int);
double __cdecl sin(double x);
double __cdecl sinh(double x);
long double __cdecl sinhl(long double x);
long double __cdecl sinl(long double x);
void __cdecl sleep(unsigned int seconds);
void __cdecl small_font();
int small_font_far[];
int sopen(const char *path, int access, int shflag, ...);
void __cdecl sound(unsigned int frequency);
int spawnl(int mode, char *path, char *arg0, ...);
int spawnle(int mode, char *path, char *arg0, ...);
int spawnlp(int mode, char *path, char *arg0, ...);
int spawnlpe(int mode, char *path, char *arg0, ...);
int __cdecl spawnv(int mode, char *path, char *argv[]);
int __cdecl spawnve(int mode, char *path, char *argv[], char **env);
int __cdecl spawnvp(int mode, char *path, char *argv[]);
int __cdecl spawnvpe(int mode, char *path, char *argv[], char **env);
int sprintf(char *buffer, const char *format, ...);
double __cdecl sqrt(double x);
long double __cdecl sqrtl(long double x);
void __cdecl srand(unsigned int seed);
int sscanf(const char *buffer, const char *format, ...);
size_t __cdecl stackavail();
int __cdecl stat(const char *path, struct stat *statbuf);
int __cdecl stime(time_t *tp);
char *__cdecl stpcpy(char *dest, const char *src);
char *__cdecl strcat(char *dest, const char *src);
char *__cdecl strchr(const char *s, int c);
int __cdecl strcmp(const char *s1, const char *s2);
int __cdecl strcoll(const char *s1, const char *s2);
char *__cdecl strcpy(char *dest, const char *src);
size_t __cdecl strcspn(const char *s1, const char *s2);
char *__cdecl strdup(const char *s);
char *__cdecl strerror(int errnum);
size_t __cdecl strftime(char *s, size_t maxsize, const char *fmt, const struct tm *t);
int __cdecl stricmp(const char *s1, const char *s2);
size_t __cdecl strlen(const char *s);
char *__cdecl strlwr(char *s);
char *__cdecl strncat(char *dest, const char *src, size_t maxlen);
int __cdecl strncmp(const char *s1, const char *s2, size_t maxlen);
char *__cdecl strncpy(char *dest, const char *src, size_t maxlen);
int __cdecl strnicmp(const char *s1, const char *s2, size_t maxlen);
char *__cdecl strnset(char *s, int ch, size_t n);
char *__cdecl strpbrk(const char *s1, const char *s2);
char *__cdecl strrchr(const char *s, int c);
char *__cdecl strrev(char *s);
char *__cdecl strset(char *s, int ch);
size_t __cdecl strspn(const char *s1, const char *s2);
char *__cdecl strstr(const char *s1, const char *s2);
double __cdecl strtod(const char *s, char **endptr);
char *__cdecl strtok(char *s1, const char *s2);
__int32 __cdecl strtol(const char *s, char **endptr, int radix);
unsigned __int32 __cdecl strtoul(const char *s, char **endptr, int radix);
char *__cdecl strupr(char *s);
size_t __cdecl strxfrm(char *s1, const char *s2, size_t n);
void __cdecl swab(char *from, char *to, int nbytes);
int __cdecl system(const char *command);
double __cdecl tan(double x);
double __cdecl tanh(double x);
long double __cdecl tanhl(long double x);
long double __cdecl tanl(long double x);
__int32 __cdecl tell(int handle);
char *__cdecl tempnam(char *dir, char *pfx);
void __cdecl textattr(int newattr);
void __cdecl textbackground(int newcolor);
void __cdecl textcolor(int newcolor);
int __cdecl __far textheight(const char far *textstring);
void __cdecl textmode(int newmode);
int __cdecl __far textwidth(const char far *textstring);
time_t __cdecl time(time_t *timer);
FILE *__cdecl tmpfile();
char *__cdecl tmpnam(char *s);
int __cdecl tolower(int ch);
int __cdecl toupper(int ch);
void __cdecl triplex_font();
int triplex_font_far[];
void __cdecl tzset();
char *__cdecl ultoa(unsigned __int32 value, char *string, int radix);
unsigned int __cdecl umask(unsigned int cmask);
int __cdecl ungetc(int c, FILE *stream);
int __cdecl ungetch(int ch);
void __cdecl unixtodos(__int32 time, struct date *d, struct time *t);
int __cdecl unlink(const char *path);
int __cdecl unlock(int handle, __int32 offset, __int32 length);
int __cdecl utime(const char *path, const struct utimbuf *times);
int __cdecl vfprintf(FILE *stream, const char *format, void *arglist);
int __cdecl vfscanf(FILE *stream, const char *format, void *arglist);
int __cdecl vprintf(const char *format, void *arglist);
int __cdecl vscanf(const char *format, void *arglist);
int __cdecl vsprintf(char *buffer, const char *format, void *arglist);
int __cdecl vsscanf(const char *buffer, const char *format, void *arglist);
wchar_t *__cdecl wcscat(wchar_t *dest, const wchar_t *src);
wchar_t *__cdecl wcschr(const wchar_t *s, int c);
int __cdecl wcscmp(const wchar_t *s1, const wchar_t *s2);
int __cdecl wcscoll(const wchar_t *s1, const wchar_t *s2);
wchar_t *__cdecl wcscpy(wchar_t *dst, const wchar_t *src);
size_t __cdecl wcscspn(const wchar_t *s1, const wchar_t *s2);
size_t __cdecl wcslen(const wchar_t *s);
wchar_t *__cdecl wcsncat(wchar_t *dest, const wchar_t *src, size_t maxlen);
int __cdecl wcsncmp(const wchar_t *s1, const wchar_t *s2, size_t maxlen);
wchar_t *__cdecl wcsncpy(wchar_t *dest, const wchar_t *src, size_t maxlen);
wchar_t *__cdecl wcspbrk(const wchar_t *s1, const wchar_t *s2);
wchar_t *__cdecl wcspcpy(wchar_t *dest, const wchar_t *src);
wchar_t *__cdecl wcsrchr(const wchar_t *s, wchar_t c);
size_t __cdecl wcsspn(const wchar_t *s1, const wchar_t *s2);
wchar_t *__cdecl wcsstr(const wchar_t *s1, const wchar_t *s2);
wchar_t *__cdecl wcstok(wchar_t *s1, const wchar_t *s2);
size_t __cdecl wcstombs(char *s, const wchar_t *pwcs, size_t n);
int __cdecl wctomb(char *s, wchar_t wc);
int __cdecl wherex();
int __cdecl wherey();
void __cdecl window(int left, int top, int right, int bottom);
int __cdecl write(int handle, const void *buf, unsigned int len);
graphics_errors grError;
graphics_errors grFileNotFound;
graphics_errors grFontNotFound;
graphics_errors grIOerror;
graphics_errors grInvalidDriver;
graphics_errors grInvalidFont;
graphics_errors grInvalidFontNum;
graphics_errors grInvalidMode;
graphics_errors grInvalidVersion;
graphics_errors grNoFloodMem;
graphics_errors grNoFontMem;
graphics_errors grNoInitGraph;
graphics_errors grNoLoadMem;
graphics_errors grNoScanMem;
graphics_errors grNotDetected;
graphics_errors grOk;
