struct $00AF5B8D22378749F06B80D45FA27023 {unsigned __int16 magic;unsigned __int16 vstamp;unsigned __int32 tsize;unsigned __int32 dsize;unsigned __int32 bsize;unsigned __int32 entry;unsigned __int32 text_start;unsigned __int32 data_start;};
union $010F26E547E20D9A1DC4B355F5175C2E {float value;struct $010F26E547E20D9A1DC4B355F5175C2E::$8B42856514A58AA212FD520E5CADCFD0 number;struct $010F26E547E20D9A1DC4B355F5175C2E::$F281F6C9DB4DEA750606CBC346D4F197 nan;__int32 p1;};
struct $010F26E547E20D9A1DC4B355F5175C2E::$8B42856514A58AA212FD520E5CADCFD0 {unsigned int sign;};
struct $010F26E547E20D9A1DC4B355F5175C2E::$F281F6C9DB4DEA750606CBC346D4F197 {unsigned int sign;};
struct $0537E486A32D586768D898FB6E409606 {unsigned __int16 magic;unsigned __int16 vstamp;unsigned __int32 tsize;unsigned __int32 dsize;unsigned __int32 bsize;unsigned __int32 entry;unsigned __int32 text_start;unsigned __int32 data_start;unsigned __int32 ImageBase;unsigned __int32 SectionAlignment;unsigned __int32 FileAlignment;unsigned __int16 MajorOperatingSystemVersion;unsigned __int16 MinorOperatingSystemVersion;unsigned __int16 MajorImageVersion;unsigned __int16 MinorImageVersion;unsigned __int16 MajorSubsystemVersion;unsigned __int16 MinorSubsystemVersion;char Reserved1[4];unsigned __int32 SizeOfImage;unsigned __int32 SizeOfHeaders;unsigned __int32 CheckSum;unsigned __int16 Subsystem;unsigned __int16 DllCharacteristics;unsigned __int32 SizeOfStackReserve;unsigned __int32 SizeOfStackCommit;unsigned __int32 SizeOfHeapReserve;unsigned __int32 SizeOfHeapCommit;unsigned __int32 LoaderFlags;unsigned __int32 NumberOfRvaAndSizes;char DataDirectory[16][2][4];};
struct $0B94EEFCBD76FB7E6E0B7C6C274F8F05 {int type;unsigned __int32 serial;int send_event;Display *display;Window window;Colormap colormap;int new;int state;};
struct $0F3BCE20E1217B8B60181F2FE2EFC047 {int type;unsigned __int32 serial;int send_event;Display *display;Window parent;Window window;int place;};
struct $10F395C20BEC4113025BB1D0BA3DF492 {int type;unsigned __int32 serial;int send_event;Display *display;Window window;char key_vector[32];};
struct $131D38613E106C9AC3A1755E823A1D2A {int gl_pathc;int gl_matchc;int gl_offs;int gl_flags;char **gl_pathv;int (*gl_errfunc)(const char *, int);void (*gl_closedir)(void *);struct dirent *(*gl_readdir)(void *);void *(*gl_opendir)(const char *);int (*gl_lstat)(const char *, struct stat *);int (*gl_stat)(const char *, struct stat *);};
struct $13C78DD7EDF1CF1C4AE9B0D54E891AA2 {__int16 x;__int16 y;};
struct $29A84F0A94EF9B7976BAF082CF524F09 {int type;unsigned __int32 serial;int send_event;Display *display;Window event;Window window;Window parent;int x;int y;int override_redirect;};
struct $2B6C772F9B0F9D5573534694AD1B578D {int type;unsigned __int32 serial;int send_event;Display *display;Window event;Window window;int place;};
struct $2C3C200F8615C3857493506364E8C173 {int type;unsigned __int32 serial;int send_event;Display *display;Window event;Window window;int x;int y;};
struct $2E0E2C12F04118C9E52BAE749EE378FF {XExtData *ext_data;int depth;int bits_per_pixel;int scanline_pad;};
struct $2FFD57BA50D73951380BC0AC0294DF96 {Pixmap background_pixmap;unsigned __int32 background_pixel;Pixmap border_pixmap;unsigned __int32 border_pixel;int bit_gravity;int win_gravity;int backing_store;unsigned __int32 backing_planes;unsigned __int32 backing_pixel;int save_under;__int32 event_mask;__int32 do_not_propagate_mask;int override_redirect;Colormap colormap;Cursor cursor;};
struct $335EDB02744B103283B800FF919FC940 {__int16 x1;__int16 y1;__int16 x2;__int16 y2;};
struct $3ACF1F82BEC6DEE83FE33E625399BBD7 {__int16 x;__int16 y;unsigned __int16 width;unsigned __int16 height;__int16 angle1;__int16 angle2;};
struct $3AD4CBF69EE89480875180DC2A9357C1 {int type;unsigned __int32 serial;int send_event;Display *display;Window window;int mode;int detail;};
struct $3BCCBA65A7EB0D2F6C33DC1ED4428B78 {int type;unsigned __int32 serial;int send_event;Display *display;Window window;Atom atom;Time time;int state;};
union $3F9D9DCE4570D1C9BB401DE985640105 {double value;struct $3F9D9DCE4570D1C9BB401DE985640105::$92939BA4B101A8BF20FECD8B93BF4DD4 number;struct $3F9D9DCE4570D1C9BB401DE985640105::$F281F6C9DB4DEA750606CBC346D4F197 nan;struct $3F9D9DCE4570D1C9BB401DE985640105::$4AF16434377E8C7F9E7C08D192734F21 parts;__int32 aslong[2];};
struct $3F9D9DCE4570D1C9BB401DE985640105::$4AF16434377E8C7F9E7C08D192734F21 {unsigned __int32 lsw;unsigned __int32 msw;};
struct $3F9D9DCE4570D1C9BB401DE985640105::$92939BA4B101A8BF20FECD8B93BF4DD4 {unsigned int fraction1;unsigned int sign;};
struct $3F9D9DCE4570D1C9BB401DE985640105::$F281F6C9DB4DEA750606CBC346D4F197 {unsigned int function1;unsigned int sign;};
struct $3FCF69940D5137EFCDD98B7A8215A7C6 {unsigned __int32 __d_cookie;struct dirent *__d_dirent;char *__d_dirname;off_t __d_position;unsigned __int32 __d_dirhash;union $3FCF69940D5137EFCDD98B7A8215A7C6::$2CCDFC74E09ADC8AD418FD2D589F010C __d_u;};
union $3FCF69940D5137EFCDD98B7A8215A7C6::$2CCDFC74E09ADC8AD418FD2D589F010C {char __d_filler[16];};
struct $44C0AE5AD18E7CD0D8F56B2EE020CE64 {int type;unsigned __int32 serial;int send_event;Display *display;Window window;int x;int y;int width;int height;int count;};
struct $470449F8043B0E95436C3AE3811CEA11 {int depth;int nvisuals;Visual *visuals;};
struct $47AF4CF9A5C07F5C66C76738371ED04D {int type;unsigned __int32 serial;int send_event;Display *display;Window event;Window root;Window subwindow;Time time;int x;int y;int x_root;int y_root;unsigned int state;Tk_Uid name;int same_screen;};
struct $4811DE8B61D0522D3363266E4D46EA9A {int type;unsigned __int32 serial;int send_event;Display *display;Window event;Window window;};
struct $4928972DC66A9F7C89D199795A4AF315 {Atom name;unsigned __int32 card32;};
struct $4D69B6347F056FE268056727CEA155AA {wchar_t *chars;int nchars;int delta;XFontSet font_set;};
struct $4D918DF5E629F4C28AE5A435B1E47B7A {int type;unsigned __int32 serial;int send_event;Display *display;Window owner;Window requestor;Atom selection;Atom target;Atom property;Time time;};
struct $4FFA9527088137D66D8D180D61C68358 {int family;int length;char *address;};
enum $5252AF58AF7525DA13AA82FD1F51B9F5 {TK_ANCHOR_N = 0x0,TK_ANCHOR_NE = 0x1,TK_ANCHOR_E = 0x2,TK_ANCHOR_SE = 0x3,TK_ANCHOR_S = 0x4,TK_ANCHOR_SW = 0x5,TK_ANCHOR_W = 0x6,TK_ANCHOR_NW = 0x7,TK_ANCHOR_CENTER = 0x8,};
struct $53996C97E395EF20FC508697C3EEF92C {__int16 lbearing;__int16 rbearing;__int16 width;__int16 ascent;__int16 descent;unsigned __int16 attributes;};
struct $58058F4C4926147A1BF935BBE1E04307 {Time time;__int16 x;__int16 y;};
struct $5C140DC956AB8D8D3A2E81F1CC511829 {int type;unsigned __int32 serial;int send_event;Display *display;Window window;Atom message_type;int format;union $5C140DC956AB8D8D3A2E81F1CC511829::$B322D948E3ED25D84ECF3A20AB2BF161 data;};
union $5C140DC956AB8D8D3A2E81F1CC511829::$B322D948E3ED25D84ECF3A20AB2BF161 {char b[20];__int16 s[10];__int32 l[5];};
struct $636E06EF14FC653C9FA755BCE21D4A3F {char *chars;int nchars;int delta;Font font;};
struct $64419251F3172C7227A52AC30EAD3C9D {int max_keypermod;KeyCode *modifiermap;};
struct $648D5B97A5A1D2D2729A4C51B6643734 {XChar2b *chars;int nchars;int delta;Font font;};
struct $65881570D1BE40B63EE4A0C2B392A1BC {char *key;int type;char *src;char *dst;char *help;};
struct $65CB4B56B993AF892F37749A62A14B51 {int type;unsigned __int32 serial;int send_event;Display *display;Window requestor;Atom selection;Atom target;Atom property;Time time;};
struct $67007EC0A0A5FA25533E9B447B17EF1A {int x;int y;int width;int height;int border_width;int depth;Visual *visual;Window root;int class;int bit_gravity;int win_gravity;int backing_store;unsigned __int32 backing_planes;unsigned __int32 backing_pixel;int save_under;Colormap colormap;int map_installed;int map_state;__int32 all_event_masks;__int32 your_event_mask;__int32 do_not_propagate_mask;int override_redirect;Screen *screen;};
struct $691123D744001B8BE68B84780CEE447C {unsigned __int8 byte1;unsigned __int8 byte2;};
struct $6BA9BAD34CD581FCA2A7610248080448 {XRectangle max_ink_extent;XRectangle max_logical_extent;};
struct $6EA1208F05D799B306741A1D21B7D8A7 {int type;unsigned __int32 serial;int send_event;Display *display;Window event;Window window;int from_configure;};
struct $705D0BEDE90FA70168249FE65D21D1D3 {int type;unsigned __int32 serial;int send_event;Display *display;Window parent;Window window;int x;int y;int width;int height;int border_width;Window above;int detail;unsigned __int32 value_mask;};
enum $75C8E7CA27BE1E0F4E6BF64D1993A788 {TCL_INT = 0x0,TCL_DOUBLE = 0x1,TCL_EITHER = 0x2,};
enum $79D62B36508CDCAAC38B030F81566F10 {MOUNT_SYMLINK = 0x1,MOUNT_BINARY = 0x2,MOUNT_SYSTEM = 0x8,MOUNT_EXEC = 0x10,MOUNT_AUTO = 0x20,MOUNT_CYGWIN_EXEC = 0x40,};
enum $7DE6A019FB8D510204474F438D93B845 {TCL_QUEUE_TAIL = 0x0,TCL_QUEUE_HEAD = 0x1,TCL_QUEUE_MARK = 0x2,};
struct $7FAD4DA9375019A5494A191BEF0405E8 {int type;unsigned __int32 serial;int send_event;Display *display;Window parent;Window window;};
struct $841354712BEA89ED461350FE22A001AB {char *name;int (*cmdProc)(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);};
struct $85ADD90E39F3CB0C7E30B8F1E31A0398 {int type;unsigned __int32 serial;int send_event;Display *display;Window parent;Window window;int x;int y;int width;int height;int border_width;int override_redirect;};
struct $86667C1762D2D3E70596A778BAFE84E4 {unsigned __int32 pixel;unsigned __int16 red;unsigned __int16 green;unsigned __int16 blue;char flags;char pad;};
struct $94ACE20E5FEED38F4BC574FBC8AC4DA0 {int type;Display *display;XID resourceid;unsigned __int32 serial;unsigned __int8 error_code;unsigned __int8 request_code;unsigned __int8 minor_code;};
struct $96F7C024A0E76E12CD4B29EEA702F0F5 {int type;unsigned __int32 serial;int send_event;Display *display;Window window;Atom selection;Time time;};
struct $979FA3DE6ECCF956231BFC297C4278E6 {int quot;int rem;};
struct $9C224668B7E64BE6AE9499E6FD772938 {char *chars;int nchars;int delta;XFontSet font_set;};
struct $A06AF73261543B69A785AD9B5C737D11 {int depth;int bits_per_pixel;int scanline_pad;};
struct $AC3C30478DB292C58361350945D68834 {int type;unsigned __int32 serial;int send_event;Display *display;Window window;int request;int first_keycode;int count;};
struct $B00CD904CB46A0C43826F3F9731A78AD {int type;unsigned __int32 serial;int send_event;Display *display;Drawable drawable;int major_code;int minor_code;};
struct $B36C03EE0DB03800CDBEDA1CF8CFFD5F {XExtData *ext_data;Font fid;unsigned int direction;unsigned int min_char_or_byte2;unsigned int max_char_or_byte2;unsigned int min_byte1;unsigned int max_byte1;int all_chars_exist;unsigned int default_char;int n_properties;XFontProp *properties;XCharStruct min_bounds;XCharStruct max_bounds;XCharStruct *per_char;int ascent;int descent;};
enum $B539734676A04848B68060D6D483E0A0 {XIMTextType = 0x0,XIMBitmapType = 0x1,};
struct $B55126CE33CB6542D7325DF23CE7DCCD {int type;unsigned __int32 serial;int send_event;Display *display;Drawable drawable;int x;int y;int width;int height;int count;int major_code;int minor_code;};
enum $B64C39E2ADABB22C50C1D912F1D253CC {XIMIsInvisible = 0x0,XIMIsPrimary = 0x1,XIMIsSecondary = 0x2,};
struct $B6E7D1C43482AAA4EB74B93FC1D2BC12 {int type;unsigned __int32 serial;int send_event;Display *display;Window window;};
struct $B8243ED19B76CA5D55F9F69ED1E7C09F {__int32 quot;__int32 rem;};
struct $BA1C9873524F37DFA28FC6E8B2A0BC7B {int x;int y;int width;int height;int border_width;Window sibling;int stack_mode;};
struct $BEA3E970906BDE5578391186783FC521 {int extension;int major_opcode;int first_event;int first_error;};
struct $BFB970BD49ED9B406D7CBF54A76D57DD {int key_click_percent;int bell_percent;int bell_pitch;int bell_duration;int led;int led_mode;int key;int auto_repeat_mode;};
struct $C04761233C6B6D3917A9FB90584A60A5 {int type;unsigned __int32 serial;int send_event;Display *display;Window window;Window root;Window subwindow;Time time;int x;int y;int x_root;int y_root;int mode;int detail;int same_screen;int focus;unsigned int state;};
struct $C459D5BB7F5319395AB9822D9CBB3596 {int function;unsigned __int32 plane_mask;unsigned __int32 foreground;unsigned __int32 background;int line_width;int line_style;int cap_style;int join_style;int fill_style;int fill_rule;int arc_mode;Pixmap tile;Pixmap stipple;int ts_x_origin;int ts_y_origin;Font font;int subwindow_mode;int graphics_exposures;int clip_x_origin;int clip_y_origin;Pixmap clip_mask;int dash_offset;char dashes;};
struct $C4AEAB15D2203863A55B0BEA2C0AE902 {XExtData *ext_data;struct $C4AEAB15D2203863A55B0BEA2C0AE902::_XDisplay *display;Window root;int width;int height;int mwidth;int mheight;int ndepths;Depth *depths;int root_depth;Visual *root_visual;GC default_gc;Colormap cmap;unsigned __int32 white_pixel;unsigned __int32 black_pixel;int max_maps;int min_maps;int backing_store;int save_unders;__int32 root_input_mask;};
struct $C64C6FF65947C35F73E5DDA7D3ADCCD3 {int type;unsigned __int32 serial;int send_event;Display *display;Window window;int state;};
struct $C8CD1AC7BB16F52EEB6B35007FE94FA3 {int type;unsigned __int32 serial;int send_event;Display *display;Window event;Window window;int override_redirect;};
struct $CA1CD5B08005403884A7641019451813 {__int16 x;__int16 y;unsigned __int16 width;unsigned __int16 height;};
struct $CD460451436B92EA879ADEB542921FD3 {int type;unsigned __int32 serial;int send_event;Display *display;Window event;Window window;int x;int y;int width;int height;int border_width;Window above;int override_redirect;};
enum $D75A9F50BEFC37ED2CAAB9E825B0AC13 {TK_JUSTIFY_LEFT = 0x0,TK_JUSTIFY_RIGHT = 0x1,TK_JUSTIFY_CENTER = 0x2,};
union $D8231012D0728EC3472C30FA3109CEFA {Display *display;GC gc;Visual *visual;Screen *screen;ScreenFormat *pixmap_format;XFontStruct *font;};
struct $DAE3AA21F13D443C5590C7BCADAB13AB {int type;unsigned __int32 serial;int send_event;Display *display;Window window;Window root;Window subwindow;Time time;int x;int y;int x_root;int y_root;unsigned int state;unsigned int button;int same_screen;};
enum $DB4B60BC3E5D47BB5823C48350265A79 {XIMForwardChar = 0x0,XIMBackwardChar = 0x1,XIMForwardWord = 0x2,XIMBackwardWord = 0x3,XIMCaretUp = 0x4,XIMCaretDown = 0x5,XIMNextLine = 0x6,XIMPreviousLine = 0x7,XIMLineStart = 0x8,XIMLineEnd = 0x9,XIMAbsolutePosition = 0xA,XIMDontChange = 0xB,};
struct $DD1A60F664AD301361B26C5800787B5E {unsigned __int16 count_styles;XIMStyle *supported_styles;};
struct $E1655291D14CE59495117F42FECB583D {XPointer client_data;XIMProc callback;};
struct $E9E5673C887B806F32B41DE6D906B7FD {int key_click_percent;int bell_percent;unsigned int bell_pitch;unsigned int bell_duration;unsigned __int32 led_mask;int global_auto_repeat;char auto_repeats[32];};
struct $ECAD306E641EDB2496D7F2C26F74F3C2 {int type;unsigned __int32 serial;int send_event;Display *display;Window window;int width;int height;};
struct $EF6E92C885F7EBA601BD227CAE25DC00 {int type;unsigned __int32 serial;int send_event;Display *display;Window window;Window root;Window subwindow;Time time;int x;int y;int x_root;int y_root;unsigned int state;char is_hint;int same_screen;};
enum $F413FB130807CE2045080C3C00838D77 {TK_DEFER_EVENT = 0x0,TK_PROCESS_EVENT = 0x1,TK_DISCARD_EVENT = 0x2,};
struct $F9A51504D7BB963C3403412F22DA7A8A {int type;unsigned __int32 serial;int send_event;Display *display;Window window;Window root;Window subwindow;Time time;int x;int y;int x_root;int y_root;unsigned int state;unsigned int keycode;int same_screen;char trans_chars[4];int nchars;};
struct $FD02BCD3D36054250A4B3393D3E26B85 {XExtData *ext_data;VisualID visualid;int class;unsigned __int32 red_mask;unsigned __int32 green_mask;unsigned __int32 blue_mask;int bits_per_rgb;int map_entries;};
typedef struct $00AF5B8D22378749F06B80D45FA27023 AOUTHDR;
typedef unsigned __int32 Atom;
typedef unsigned __int8 Byte;
typedef Byte Bytef;
typedef void *ClientData;
typedef XID Colormap;
typedef XID Cursor;
typedef struct $3FCF69940D5137EFCDD98B7A8215A7C6 DIR;
typedef struct $470449F8043B0E95436C3AE3811CEA11 Depth;
typedef struct _XDisplay Display;
typedef XID Drawable;
typedef struct __sFILE FILE;
typedef XID Font;
typedef XGCValues *GC;
typedef XID GContext;
typedef unsigned __int16 KeyCode;
typedef XID KeySym;
enum MACRO_ANSI {ANSI_PROTOTYPES = 1,};
enum MACRO_AOUTHDRSZ {AOUTHDRSZ = 28,OMAGIC = 260,ZMAGIC = 267,};
enum MACRO_AUXESZ {AUXESZ = 18,};
enum MACRO_Above {Above = 0,Below = 1,TopIf = 2,BottomIf = 3,Opposite = 4,};
enum MACRO_AllPlanes {AllPlanes = -1,};
enum MACRO_AllTemporary {AllTemporary = 0,};
enum MACRO_AllocNone {AllocNone = 0,AllocAll = 1,};
enum MACRO_AnyButton {AnyButton = 0,};
enum MACRO_AnyKey {AnyKey = 0,};
enum MACRO_AnyPropertyType {AnyPropertyType = 0,};
enum MACRO_ArcChord {ArcChord = 0,ArcPieSlice = 1,};
enum MACRO_AsyncPointer {AsyncPointer = 0,SyncPointer = 1,ReplayPointer = 2,AsyncKeyboard = 3,SyncKeyboard = 4,ReplayKeyboard = 5,AsyncBoth = 6,SyncBoth = 7,};
enum MACRO_AutoRepeatModeOff {AutoRepeatModeOff = 0,AutoRepeatModeOn = 1,AutoRepeatModeDefault = 2,};
enum MACRO_B0 {B0 = 0x0,B50 = 0x1,B75 = 0x2,B110 = 0x3,B134 = 0x4,B150 = 0x5,B200 = 0x6,B300 = 0x7,B600 = 0x8,B1200 = 0x9,B1800 = 0xA,B2400 = 0xB,B4800 = 0xC,B9600 = 0xD,B19200 = 0xE,B38400 = 0xF,CSIZE = 0x30,};
enum MACRO_B256000 {B256000 = 0x1003,CRTSXOFF = 0x4000,CRTSCTS = 0x8000,};
enum MACRO_B57600 {B57600 = 0x1001,B115200 = 0x1002,B128000 = 0x1003,};
enum MACRO_BFD {BFD_ARCH_SIZE = 32,BFD_HOST_64BIT_LONG = 0,};
enum MACRO_BFD_FORT {BFD_FORT_COMM_DEFAULT_VALUE = 0,BSF_NOT_AT_END = 1024,BSF_CONSTRUCTOR = 2048,BSF_WARNING = 4096,BSF_INDIRECT = 8192,BSF_FILE = 16384,BSF_DYNAMIC = 32768,BSF_OBJECT = 65536,BSF_DEBUGGING_RELOC = 131072,};
enum MACRO_BFD_NO {BFD_NO_FLAGS = 0x0,HAS_RELOC = 0x1,EXEC_P = 0x2,HAS_LINENO = 0x4,HAS_DEBUG = 0x8,HAS_SYMS = 0x10,HAS_LOCALS = 0x20,DYNAMIC = 0x40,WP_TEXT = 0x80,D_PAGED = 0x100,BFD_IS_RELAXABLE = 0x200,BFD_TRADITIONAL_FORMAT = 0x400,BFD_IN_MEMORY = 0x800,BFD_NO_MORE_SYMBOLS = 0xFFFFFFFF,};
enum MACRO_BIG {BIG_ENDIAN = 4321,};
enum MACRO_BS0 {BS0 = 0x0,BS1 = 0x400,TABDLY = 0x1800,};
enum MACRO_BSF {BSF_NO_FLAGS = 0x0,BSF_LOCAL = 0x1,BSF_GLOBAL = 0x2,};
enum MACRO_BSF_EXPORT {BSF_EXPORT = 2,BSF_DEBUGGING = 8,BSF_FUNCTION = 16,BSF_KEEP = 32,BSF_KEEP_G = 64,BSF_WEAK = 128,BSF_SECTION_SYM = 256,BSF_OLD_COMMON = 512,};
enum MACRO_BYTE {BYTE_ORDER = 1234,};
enum MACRO_Button1 {Button1 = 1,Button2 = 2,Button3 = 3,Button4 = 4,Button5 = 5,};
enum MACRO_CBAUD {CBAUD = 0x100F,};
enum MACRO_CDSUSP {CDSUSP = 25,};
enum MACRO_CEOL {CEOL = 0,};
enum MACRO_CEOL2 {CEOL2 = 0,CEOF = 4,CSTART = 17,CSTOP = 19,CSWTCH = 26,};
enum MACRO_CEOT {CEOT = 4,};
enum MACRO_CERASE {CERASE = 8,CKILL = 21,};
enum MACRO_CESC {CESC = 92,};
enum MACRO_CFLUSH {CFLUSH = 15,CWERASE = 23,};
enum MACRO_CHAR {CHAR_BIT = 8,};
enum MACRO_CHAR_MAX {CHAR_MAX = 127,SHRT_MIN = -32768,};
enum MACRO_CINTR {CINTR = 3,CQUIT = 28,};
enum MACRO_CLK {CLK_TCK = 1000,};
enum MACRO_CLNEXT {CLNEXT = 22,};
enum MACRO_CLOCKS {CLOCKS_PER_SEC = 1000,};
enum MACRO_CNUL {CNUL = 0,CDEL = 127,};
enum MACRO_CR0 {CR0 = 0x0,CR1 = 0x80,CR2 = 0x100,CR3 = 0x180,NLDLY = 0x200,};
enum MACRO_CRPRNT {CRPRNT = 18,};
enum MACRO_CS5 {CS5 = 0x0,CS6 = 0x10,CS7 = 0x20,CS8 = 0x30,CSTOPB = 0x40,CREAD = 0x80,PARENB = 0x100,PARODD = 0x200,HUPCL = 0x400,CLOCAL = 0x800,CBAUDEX = 0x100F,};
enum MACRO_CWBackPixmap {CWBackPixmap = 1,CWBackPixel = 2,CWBorderPixmap = 4,CWBorderPixel = 8,CWBitGravity = 16,CWWinGravity = 32,CWBackingStore = 64,CWBackingPlanes = 128,CWBackingPixel = 256,CWOverrideRedirect = 512,CWSaveUnder = 1024,CWEventMask = 2048,CWDontPropagate = 4096,CWColormap = 8192,CWCursor = 16384,};
enum MACRO_CWX {CWX = 1,CWY = 2,CWWidth = 4,CWHeight = 8,CWBorderWidth = 16,CWSibling = 32,CWStackMode = 64,};
enum MACRO_CapNotLast {CapNotLast = 0,CapButt = 1,CapRound = 2,CapProjecting = 3,};
enum MACRO_ClipByChildren {ClipByChildren = 0,IncludeInferiors = 1,};
enum MACRO_ColormapUninstalled {ColormapUninstalled = 0,ColormapInstalled = 1,};
enum MACRO_Complex {Complex = 0,Nonconvex = 1,Convex = 2,};
enum MACRO_CoordModeOrigin {CoordModeOrigin = 0,CoordModePrevious = 1,};
enum MACRO_CopyFromParent {CopyFromParent = 0,};
enum MACRO_CurrentTime {CurrentTime = 0,};
enum MACRO_CursorShape {CursorShape = 0,TileShape = 1,StippleShape = 2,};
enum MACRO_DAYSPERNYEAR {DAYSPERNYEAR = 365,DAYSPERLYEAR = 366,};
enum MACRO_DOMAIN {DOMAIN = 1,SING = 2,OVERFLOW = 3,UNDERFLOW = 4,TLOSS = 5,PLOSS = 6,};
enum MACRO_DT {DT_NON = 0,DT_PTR = 1,DT_FCN = 2,DT_ARY = 3,};
enum MACRO_DestroyAll {DestroyAll = 0,RetainPermanent = 1,RetainTemporary = 2,};
enum MACRO_DisableAccess {DisableAccess = 0,};
enum MACRO_DisableScreenInterval {DisableScreenInterval = 0,};
enum MACRO_DisableScreenSaver {DisableScreenSaver = 0,};
enum MACRO_DoRed {DoRed = 1,DoGreen = 2,DoBlue = 4,};
enum MACRO_DontAllowExposures {DontAllowExposures = 0,AllowExposures = 1,DefaultExposures = 2,};
enum MACRO_DontPreferBlanking {DontPreferBlanking = 0,PreferBlanking = 1,DefaultBlanking = 2,};
enum MACRO_E {E_DIMNUM = 4,N_BTMASK = 15,N_TMASK = 48,};
enum MACRO_EPERM {EPERM = 1,ENOENT = 2,ESRCH = 3,EINTR = 4,EIO = 5,ENXIO = 6,E2BIG = 7,ENOEXEC = 8,EBADF = 9,ECHILD = 10,EAGAIN = 11,ENOMEM = 12,EACCES = 13,EFAULT = 14,ENOTBLK = 15,EBUSY = 16,EEXIST = 17,EXDEV = 18,ENODEV = 19,ENOTDIR = 20,EISDIR = 21,EINVAL = 22,ENFILE = 23,EMFILE = 24,ENOTTY = 25,ETXTBSY = 26,EFBIG = 27,ENOSPC = 28,ESPIPE = 29,EROFS = 30,EMLINK = 31,EPIPE = 32,EDOM = 33,ERANGE = 34,ENOMSG = 35,EIDRM = 36,ECHRNG = 37,EL2NSYNC = 38,EL3HLT = 39,EL3RST = 40,ELNRNG = 41,EUNATCH = 42,ENOCSI = 43,EL2HLT = 44,EDEADLK = 45,ENOLCK = 46,EBADE = 50,EBADR = 51,EXFULL = 52,ENOANO = 53,EBADRQC = 54,EBADSLT = 55,EDEADLOCK = 56,EBFONT = 57,ENOSTR = 60,ENODATA = 61,ETIME = 62,ENOSR = 63,ENONET = 64,ENOPKG = 65,EREMOTE = 66,ENOLINK = 67,EADV = 68,ESRMNT = 69,ECOMM = 70,EPROTO = 71,EMULTIHOP = 74,ELBIN = 75,EDOTDOT = 76,EBADMSG = 77,ENOTUNIQ = 80,EBADFD = 81,EREMCHG = 82,ELIBACC = 83,ELIBBAD = 84,ELIBSCN = 85,ELIBMAX = 86,ELIBEXEC = 87,ENOSYS = 88,ENMFILE = 89,ENOTEMPTY = 90,ENAMETOOLONG = 91,ELOOP = 92,EOPNOTSUPP = 95,EPFNOSUPPORT = 96,ECONNRESET = 104,ENOBUFS = 105,EAFNOSUPPORT = 106,EPROTOTYPE = 107,ENOTSOCK = 108,ENOPROTOOPT = 109,ESHUTDOWN = 110,ECONNREFUSED = 111,EADDRINUSE = 112,ECONNABORTED = 113,ENETUNREACH = 114,ENETDOWN = 115,ETIMEDOUT = 116,EHOSTDOWN = 117,EHOSTUNREACH = 118,EINPROGRESS = 119,EALREADY = 120,EDESTADDRREQ = 121,EMSGSIZE = 122,EPROTONOSUPPORT = 123,ESOCKTNOSUPPORT = 124,EADDRNOTAVAIL = 125,ENETRESET = 126,EISCONN = 127,ENOTCONN = 128,ETOOMANYREFS = 129,EPROCLIM = 130,EUSERS = 131,EDQUOT = 132,ESTALE = 133,ENOTSUP = 134,ENOMEDIUM = 135,ENOSHARE = 136,};
enum MACRO_EWOULDBLOCK {EWOULDBLOCK = 11,__ELASTERROR = 2000,};
enum MACRO_EXIT {EXIT_FAILURE = 1,EXIT_SUCCESS = 0,};
enum MACRO_EnableAccess {EnableAccess = 1,};
enum MACRO_EvenOddRule {EvenOddRule = 0,WindingRule = 1,};
enum MACRO_F {F_RELFLG = 0x1,F_EXEC = 0x2,F_LNNO = 0x4,F_LSYMS = 0x8,I386MAGIC = 0x14C,I386PTXMAGIC = 0x154,I386AIXMAGIC = 0x175,};
enum MACRO_FAPPEND {FAPPEND = 8,FSYNC = 8192,};
enum MACRO_FASYNC {FASYNC = 64,FNBIO = 4096,FNONBIO = 16384,};
enum MACRO_FCREAT {FCREAT = 512,FTRUNC = 1024,FEXCL = 2048,FNOCTTY = 32768,};
enum MACRO_FD {FD_CLOEXEC = 1,F_DUPFD = 0,};
enum MACRO_FF0 {FF0 = 0x0,FF1 = 0x4000,OFDEL = 0x8000,};
enum MACRO_FILHSZ {FILHSZ = 20,AOUTSZ = 28,};
enum MACRO_FILNMLEN {FILNMLEN = 18,};
enum MACRO_FNDELAY {FNDELAY = 4,};
enum MACRO_FOPEN {FOPEN_MAX = 20,FILENAME_MAX = 1024,};
enum MACRO_FORK {FORK_RELOAD = 1,FORK_NO_RELOAD = 0,};
enum MACRO_FP {FP_RN = 0,FP_RM = 1,FP_RP = 2,FP_RZ = 3,FP_X_INV = 16,FP_X_DX = 128,};
enum MACRO_FP_RDI {FP_RDI_RD = 1,__IEEE_DBL_EXPBIAS = 1023,};
enum MACRO_FP_X {FP_X_OFL = 0x4,FP_X_UFL = 0x2,FP_X_IMP = 0x1,FP_RDI_TOZ = 0x0,};
enum MACRO_FREAD {FREAD = 1,FWRITE = 2,FMARK = 16,FDEFER = 32,FSHLOCK = 128,FEXLOCK = 256,FOPEN = -1,};
enum MACRO_F_GETFD {F_GETFD = 1,F_SETFD = 2,F_GETFL = 3,F_SETFL = 4,F_GETOWN = 5,F_SETOWN = 6,F_GETLK = 7,F_SETLK = 8,F_SETLKW = 9,F_RGETLK = 10,F_RSETLK = 11,F_CNVT = 12,F_RSETLKW = 13,};
enum MACRO_F_OK {F_OK = 0,R_OK = 4,};
enum MACRO_F_RDLCK {F_RDLCK = 1,F_WRLCK = 2,F_UNLCK = 3,F_UNLKSYS = 4,};
enum MACRO_False {False = 0,};
enum MACRO_FamilyInternet {FamilyInternet = 0,FamilyDECnet = 1,FamilyChaos = 2,};
enum MACRO_FillSolid {FillSolid = 0,FillTiled = 1,FillStippled = 2,FillOpaqueStippled = 3,};
enum MACRO_FontLeftToRight {FontLeftToRight = 0,FontRightToLeft = 1,FontChange = 255,};
enum MACRO_ForgetGravity {ForgetGravity = 0,NorthWestGravity = 1,NorthGravity = 2,NorthEastGravity = 3,WestGravity = 4,CenterGravity = 5,EastGravity = 6,SouthWestGravity = 7,SouthGravity = 8,SouthEastGravity = 9,StaticGravity = 10,};
enum MACRO_GCFunction {GCFunction = 1,GCPlaneMask = 2,GCForeground = 4,GCBackground = 8,GCLineWidth = 16,GCLineStyle = 32,GCCapStyle = 64,GCJoinStyle = 128,GCFillStyle = 256,GCFillRule = 512,GCTile = 1024,GCStipple = 2048,GCTileStipXOrigin = 4096,GCTileStipYOrigin = 8192,GCFont = 16384,GCSubwindowMode = 32768,GCGraphicsExposures = 65536,GCClipXOrigin = 131072,GCClipYOrigin = 262144,GCClipMask = 524288,GCDashOffset = 1048576,GCDashList = 2097152,GCArcMode = 4194304,};
enum MACRO_GCLastBit {GCLastBit = 22,};
enum MACRO_GLOB {GLOB_APPEND = 0x1,GLOB_DOOFFS = 0x2,GLOB_ERR = 0x4,GLOB_MARK = 0x8,GLOB_NOCHECK = 0x10,GLOB_NOSORT = 0x20,GLOB_ALTDIRFUNC = 0x40,GLOB_BRACE = 0x80,GLOB_MAGCHAR = 0x100,GLOB_NOMAGIC = 0x200,GLOB_QUOTE = 0x400,GLOB_TILDE = 0x800,GLOB_NOSPACE = 0xFFFFFFFF,};
enum MACRO_GLOB_ABEND {GLOB_ABEND = -2,};
enum MACRO_GXclear {GXclear = 0x0,GXand = 0x1,GXandReverse = 0x2,GXcopy = 0x3,GXandInverted = 0x4,GXnoop = 0x5,GXxor = 0x6,GXor = 0x7,GXnor = 0x8,GXequiv = 0x9,GXinvert = 0xA,GXorReverse = 0xB,GXcopyInverted = 0xC,GXorInverted = 0xD,GXnand = 0xE,GXset = 0xF,};
enum MACRO_GrabModeSync {GrabModeSync = 0,GrabModeAsync = 1,};
enum MACRO_GrabSuccess {GrabSuccess = 0,AlreadyGrabbed = 1,GrabInvalidTime = 2,GrabNotViewable = 3,GrabFrozen = 4,};
enum MACRO_HostInsert {HostInsert = 0,HostDelete = 1,};
enum MACRO_IGNBRK {IGNBRK = 0x1,BRKINT = 0x2,IGNPAR = 0x4,IMAXBEL = 0x8,INPCK = 0x10,ISTRIP = 0x20,INLCR = 0x40,IGNCR = 0x80,ICRNL = 0x100,IXON = 0x400,IXOFF = 0x1000,IUCLC = 0x4000,IXANY = 0x8000,PARMRK = 0x10000,};
enum MACRO_IMAGE {IMAGE_FILE_RELOCS_STRIPPED = 0x1,IMAGE_FILE_EXECUTABLE_IMAGE = 0x2,IMAGE_FILE_LINE_NUMS_STRIPPED = 0x4,IMAGE_FILE_LOCAL_SYMS_STRIPPED = 0x8,IMAGE_FILE_BYTES_REVERSED_LO = 0x80,IMAGE_FILE_32BIT_MACHINE = 0x100,IMAGE_FILE_DEBUG_STRIPPED = 0x200,IMAGE_FILE_SYSTEM = 0x1000,IMAGE_FILE_DLL = 0x2000,IMAGE_FILE_BYTES_REVERSED_HI = 0x8000,};
enum MACRO_IMAGE_COMDAT {IMAGE_COMDAT_SELECT_NODUPLICATES = 1,IMAGE_COMDAT_SELECT_ANY = 2,IMAGE_COMDAT_SELECT_SAME_SIZE = 3,IMAGE_COMDAT_SELECT_EXACT_MATCH = 4,IMAGE_COMDAT_SELECT_ASSOCIATIVE = 5,};
enum MACRO_IMAGE_SCN {IMAGE_SCN_MEM_DISCARDABLE = 0x2000000,IMAGE_SCN_MEM_EXECUTE = 0x20000000,IMAGE_SCN_MEM_READ = 0x40000000,IMAGE_SCN_MEM_WRITE = 0x80000000,IMAGE_SCN_TYPE_NO_PAD = 0x8,IMAGE_SCN_CNT_CODE = 0x20,IMAGE_SCN_CNT_INITIALIZED_DATA = 0x40,IMAGE_SCN_CNT_UNINITIALIZED_DATA = 0x80,IMAGE_SCN_LNK_OTHER = 0x100,IMAGE_SCN_LNK_INFO = 0x200,IMAGE_SCN_LNK_REMOVE = 0x800,IMAGE_SCN_LNK_COMDAT = 0x1000,IMAGE_SCN_MEM_FARDATA = 0x8000,IMAGE_SCN_MEM_PURGEABLE = 0x20000,IMAGE_SCN_MEM_16BIT = 0x20000,IMAGE_SCN_MEM_LOCKED = 0x40000,IMAGE_SCN_MEM_PRELOAD = 0x80000,IMAGE_SCN_ALIGN_1BYTES = 0x100000,IMAGE_SCN_ALIGN_2BYTES = 0x200000,IMAGE_SCN_ALIGN_4BYTES = 0x300000,IMAGE_SCN_ALIGN_8BYTES = 0x400000,IMAGE_SCN_ALIGN_16BYTES = 0x500000,IMAGE_SCN_ALIGN_32BYTES = 0x600000,IMAGE_SCN_ALIGN_64BYTES = 0x700000,IMAGE_SCN_LNK_NRELOC_OVFL = 0x1000000,IMAGE_SCN_MEM_NOT_CACHED = 0x4000000,IMAGE_SCN_MEM_NOT_PAGED = 0x8000000,IMAGE_SCN_MEM_SHARED = 0x10000000,};
enum MACRO_INIT {INIT_PROCESS = 5,LOGIN_PROCESS = 6,USER_PROCESS = 7,DEAD_PROCESS = 8,};
enum MACRO_INT {INT_MAX = 2147483647,UINT_MAX = -1,};
enum MACRO_IOV {IOV_MAX = 2147483646,SSIZE_MAX = 2147483647,};
enum MACRO_ISIG {ISIG = 0x1,ICANON = 0x2,ECHO = 0x4,ECHOE = 0x8,ECHOK = 0x10,ECHONL = 0x20,NOFLSH = 0x40,TOSTOP = 0x80,IEXTEN = 0x100,FLUSHO = 0x200,ECHOKE = 0x400,ECHOCTL = 0x800,};
enum MACRO_ITIMER {ITIMER_REAL = 0,ITIMER_VIRTUAL = 1,ITIMER_PROF = 2,};
enum MACRO_InputOutput {InputOutput = 1,InputOnly = 2,};
enum MACRO_IsUnmapped {IsUnmapped = 0,IsUnviewable = 1,IsViewable = 2,};
enum MACRO_JoinMiter {JoinMiter = 0,JoinRound = 1,JoinBevel = 2,};
enum MACRO_KBKeyClickPercent {KBKeyClickPercent = 1,KBBellPercent = 2,KBBellPitch = 4,KBBellDuration = 8,KBLed = 16,KBLedMode = 32,KBKey = 64,KBAutoRepeatMode = 128,};
enum MACRO_KeyPress {KeyPress = 2,KeyRelease = 3,ButtonPress = 4,ButtonRelease = 5,MotionNotify = 6,EnterNotify = 7,LeaveNotify = 8,FocusIn = 9,FocusOut = 10,KeymapNotify = 11,Expose = 12,GraphicsExpose = 13,NoExpose = 14,VisibilityNotify = 15,CreateNotify = 16,DestroyNotify = 17,UnmapNotify = 18,MapNotify = 19,MapRequest = 20,ReparentNotify = 21,ConfigureNotify = 22,ConfigureRequest = 23,GravityNotify = 24,ResizeRequest = 25,CirculateNotify = 26,CirculateRequest = 27,PropertyNotify = 28,SelectionClear = 29,SelectionRequest = 30,SelectionNotify = 31,ColormapNotify = 32,ClientMessage = 33,MappingNotify = 34,LASTEvent = 35,};
enum MACRO_L {L_tmpnam = 1024,};
enum MACRO_LC {LC_ALL = 0,LC_COLLATE = 1,LC_CTYPE = 2,LC_MONETARY = 3,LC_NUMERIC = 4,LC_TIME = 5,};
enum MACRO_LINESZ {LINESZ = 6,E_SYMNMLEN = 8,E_FILNMLEN = 14,};
enum MACRO_LITTLE {LITTLE_ENDIAN = 1234,};
enum MACRO_LOG {LOG_EMERG = 0,LOG_ALERT = 1,LOG_CRIT = 2,LOG_ERR = 3,LOG_WARNING = 4,LOG_NOTICE = 5,LOG_INFO = 6,LOG_DEBUG = 7,};
enum MACRO_LOG_KERN {LOG_KERN = 0,LOG_USER = 8,LOG_MAIL = 16,LOG_DAEMON = 24,LOG_AUTH = 32,LOG_SYSLOG = 40,LOG_LPR = 48,LOG_NEWS = 56,LOG_UUCP = 64,LOG_CRON = 72,LOG_AUTHPRIV = 80,LOG_FTP = 88,LOG_LOCAL0 = 128,LOG_LOCAL1 = 136,LOG_LOCAL2 = 144,LOG_LOCAL3 = 152,LOG_LOCAL4 = 160,LOG_LOCAL5 = 168,LOG_LOCAL6 = 176,LOG_LOCAL7 = 184,};
enum MACRO_LOG_NFACILITIES {LOG_NFACILITIES = 24,LOG_FACMASK = 1016,};
enum MACRO_LOG_PID {LOG_PID = 0x1,LOG_CONS = 0x2,LOG_ODELAY = 0x4,LOG_NDELAY = 0x8,LOG_NOWAIT = 0x10,LOG_PERROR = 0x20,};
enum MACRO_LOG_PRIMASK {LOG_PRIMASK = 0x7,};
enum MACRO_LONG {LONG_MAX = 2147483647,ULONG_MAX = -1,};
enum MACRO_LONG_LONG {LONG_LONG_MAX = -1,};
enum MACRO_LSBFirst {LSBFirst = 0,MSBFirst = 1,};
enum MACRO_LYNXCOFFMAGIC {LYNXCOFFMAGIC = 0x10D,};
enum MACRO_L_INCR {L_INCR = 1,L_XTND = 2,};
enum MACRO_L_SET {L_SET = 0,L_CURR = 1,};
enum MACRO_L_cuserid {L_cuserid = 9,};
enum MACRO_LedModeOff {LedModeOff = 0,LedModeOn = 1,};
enum MACRO_LineSolid {LineSolid = 0,LineOnOffDash = 1,LineDoubleDash = 2,};
enum MACRO_MAP {MAP_FILE = 0,MAP_SHARED = 1,MAP_PRIVATE = 2,MAP_TYPE = 15,MAP_FIXED = 16,MAP_ANONYMOUS = 32,};
enum MACRO_MAP_ANON {MAP_ANON = 32,};
enum MACRO_MAX {MAX_MEM_LEVEL = 9,MAX_WBITS = 15,};
enum MACRO_MAXHOSTNAMELEN {MAXHOSTNAMELEN = 64,};
enum MACRO_MAXPATHLEN {MAXPATHLEN = 1024,};
enum MACRO_MB {MB_LEN_MAX = 1,SCHAR_MIN = -128,};
enum MACRO_MS {MS_ASYNC = 1,MS_SYNC = 2,MS_INVALIDATE = 4,};
enum MACRO_MappingModifier {MappingModifier = 0,MappingKeyboard = 1,MappingPointer = 2,};
enum MACRO_MappingSuccess {MappingSuccess = 0,MappingBusy = 1,MappingFailed = 2,};
enum MACRO_N {N_BTSHFT = 4,N_TSHIFT = 2,};
enum MACRO_NBBY {NBBY = 8,FD_SETSIZE = 64,};
enum MACRO_NGROUPS {NGROUPS_MAX = 16,CHILD_MAX = 63,_POSIX_ARG_MAX = 4096,};
enum MACRO_NGROUPS_0 {NGROUPS = 16,HZ = 1000,};
enum MACRO_NL0 {NL0 = 0x0,NL1 = 0x200,BSDLY = 0x400,};
enum MACRO_NOFILE {NOFILE = 8192,};
enum MACRO_NSUBEXP {NSUBEXP = 10,};
enum MACRO_NSWTCH {NSWTCH = 0,CSUSP = 26,};
enum MACRO_NT {NT_FILE_ALIGNMENT = 0x200,NT_DEF_RESERVE = 0x100000,};
enum MACRO_NT_DEF {NT_DEF_COMMIT = 0x1000,};
enum MACRO_NT_SIGNATURE {DOSMAGIC = 23117,NT_SIGNATURE = 17744,};
enum MACRO_NULL {NULL = 0,};
enum MACRO_NeedFunctionPrototypes {NeedFunctionPrototypes = 1,};
enum MACRO_NeedVarargsPrototypes {NeedVarargsPrototypes = 0,NeedNestedPrototypes = 1,};
enum MACRO_NeedWidePrototypes {NeedWidePrototypes = 1,};
enum MACRO_NoEventMask {NoEventMask = 0,KeyPressMask = 1,KeyReleaseMask = 2,ButtonPressMask = 4,ButtonReleaseMask = 8,EnterWindowMask = 16,LeaveWindowMask = 32,PointerMotionMask = 64,PointerMotionHintMask = 128,Button1MotionMask = 256,Button2MotionMask = 512,Button3MotionMask = 1024,Button4MotionMask = 2048,Button5MotionMask = 4096,ButtonMotionMask = 8192,KeymapStateMask = 16384,ExposureMask = 32768,VisibilityChangeMask = 65536,StructureNotifyMask = 131072,ResizeRedirectMask = 262144,SubstructureNotifyMask = 524288,SubstructureRedirectMask = 1048576,FocusChangeMask = 2097152,PropertyChangeMask = 4194304,ColormapChangeMask = 8388608,OwnerGrabButtonMask = 16777216,};
enum MACRO_NoSymbol {NoSymbol = 0,};
enum MACRO_None {None = 0,ParentRelative = 1,};
enum MACRO_NotUseful {NotUseful = 0,WhenMapped = 1,Always = 2,};
enum MACRO_NotifyAncestor {NotifyAncestor = 0,NotifyVirtual = 1,NotifyInferior = 2,NotifyNonlinear = 3,NotifyNonlinearVirtual = 4,NotifyPointer = 5,NotifyPointerRoot = 6,NotifyDetailNone = 7,};
enum MACRO_NotifyHint {NotifyHint = 1,};
enum MACRO_NotifyNormal {NotifyNormal = 0,NotifyGrab = 1,NotifyUngrab = 2,NotifyWhileGrabbed = 3,};
enum MACRO_O {O_RDONLY = 0,O_WRONLY = 1,O_RDWR = 2,O_APPEND = 8,O_CREAT = 512,O_TRUNC = 1024,O_EXCL = 2048,O_NONBLOCK = 16384,O_NOCTTY = 32768,O_SYNC = 8192,};
enum MACRO_OARMAG1 {OARMAG1 = 0xFF6D,OARMAG2 = 0xFF65,};
enum MACRO_OPOST {OPOST = 0x1,OLCUC = 0x2,OCRNL = 0x4,ONLCR = 0x8,ONOCR = 0x10,ONLRET = 0x20,OFILL = 0x40,CRDLY = 0x180,};
enum MACRO_O_NDELAY {O_NDELAY = 4,};
enum MACRO_PATH {PATH_MAX = 259,};
enum MACRO_PNG {PNG_ZBUF_SIZE = 8192,};
enum MACRO_PNG_BACKGROUND {PNG_BACKGROUND_GAMMA_UNKNOWN = 0,PNG_BACKGROUND_GAMMA_SCREEN = 1,PNG_BACKGROUND_GAMMA_FILE = 2,PNG_BACKGROUND_GAMMA_UNIQUE = 3,};
enum MACRO_PNG_COLOR {PNG_COLOR_MASK_PALETTE = 1,PNG_COLOR_MASK_COLOR = 2,PNG_COLOR_MASK_ALPHA = 4,};
enum MACRO_PNG_COLOR_TYPE {PNG_COLOR_TYPE_GRAY = 0,PNG_COLOR_TYPE_PALETTE = 3,};
enum MACRO_PNG_COLOR_TYPE_GRAY {PNG_COLOR_TYPE_GRAY_ALPHA = 4,PNG_COMPRESSION_TYPE_BASE = 0,PNG_COMPRESSION_TYPE_DEFAULT = 0,PNG_FILTER_TYPE_BASE = 0,PNG_FILTER_TYPE_DEFAULT = 0,PNG_INTERLACE_NONE = 0,};
enum MACRO_PNG_COLOR_TYPE_RGB {PNG_COLOR_TYPE_RGB = 2,PNG_COLOR_TYPE_RGB_ALPHA = 6,};
enum MACRO_PNG_CRC {PNG_CRC_DEFAULT = 0,PNG_CRC_ERROR_QUIT = 1,PNG_CRC_WARN_DISCARD = 2,PNG_CRC_WARN_USE = 3,PNG_CRC_QUIET_USE = 4,PNG_CRC_NO_CHANGE = 5,};
enum MACRO_PNG_EQUATION {PNG_EQUATION_LINEAR = 0,PNG_EQUATION_BASE_E = 1,PNG_EQUATION_ARBITRARY = 2,PNG_EQUATION_HYPERBOLIC = 3,PNG_EQUATION_LAST = 4,};
enum MACRO_PNG_FILLER {PNG_FILLER_BEFORE = 0,PNG_FILLER_AFTER = 1,};
enum MACRO_PNG_FILTER {PNG_FILTER_VALUE_NONE = 0,PNG_FILTER_VALUE_SUB = 1,PNG_FILTER_VALUE_UP = 2,PNG_FILTER_VALUE_AVG = 3,PNG_FILTER_VALUE_PAETH = 4,PNG_FILTER_VALUE_LAST = 5,};
enum MACRO_PNG_FILTER_HEURISTIC {PNG_FILTER_HEURISTIC_DEFAULT = 0,PNG_FILTER_HEURISTIC_UNWEIGHTED = 1,PNG_FILTER_HEURISTIC_WEIGHTED = 2,PNG_FILTER_HEURISTIC_LAST = 3,};
enum MACRO_PNG_FREE {PNG_FREE_PLTE = 0x1,PNG_FREE_TRNS = 0x2,PNG_FREE_TEXT = 0x4,PNG_FREE_HIST = 0x8,PNG_FREE_ICCP = 0x10,PNG_FREE_SPLT = 0x20,PNG_FREE_ROWS = 0x40,PNG_FREE_PCAL = 0x80,PNG_FREE_SCAL = 0x100,PNG_FREE_UNKN = 0x200,PNG_FREE_LIST = 0x400,PNG_FREE_ALL = 0x7FF,};
enum MACRO_PNG_INFO {PNG_INFO_gAMA = 0x1,PNG_INFO_sBIT = 0x2,PNG_INFO_cHRM = 0x4,PNG_INFO_PLTE = 0x8,PNG_INFO_tRNS = 0x10,PNG_INFO_bKGD = 0x20,PNG_INFO_hIST = 0x40,PNG_INFO_pHYs = 0x80,PNG_INFO_oFFs = 0x100,PNG_INFO_tIME = 0x200,PNG_INFO_pCAL = 0x400,PNG_INFO_sRGB = 0x800,PNG_INFO_iCCP = 0x1000,PNG_INFO_sPLT = 0x2000,PNG_INFO_sCAL = 0x4000,PNG_INFO_IDAT = 0x8000,};
enum MACRO_PNG_INTERLACE {PNG_INTERLACE_ADAM7 = 1,PNG_INTERLACE_LAST = 2,};
enum MACRO_PNG_LIBPNG {PNG_LIBPNG_VER = 10006,PNG_TEXT_COMPRESSION_NONE_WR = -3,PNG_TEXT_COMPRESSION_zTXt_WR = -2,PNG_TEXT_COMPRESSION_NONE = -1,};
enum MACRO_PNG_NO {PNG_NO_FILTERS = 0x0,PNG_FILTER_NONE = 0x8,PNG_FILTER_SUB = 0x10,PNG_FILTER_UP = 0x20,PNG_FILTER_AVG = 0x40,PNG_FILTER_PAETH = 0x80,PNG_ALL_FILTERS = 0xF8,};
enum MACRO_PNG_OFFSET {PNG_OFFSET_PIXEL = 0,PNG_OFFSET_MICROMETER = 1,PNG_OFFSET_LAST = 2,};
enum MACRO_PNG_RESOLUTION {PNG_RESOLUTION_UNKNOWN = 0,PNG_RESOLUTION_METER = 1,PNG_RESOLUTION_LAST = 2,};
enum MACRO_PNG_SCALE {PNG_SCALE_UNKNOWN = 0,PNG_SCALE_METER = 1,PNG_SCALE_RADIAN = 2,PNG_SCALE_LAST = 3,};
enum MACRO_PNG_TEXT {PNG_TEXT_COMPRESSION_zTXt = 0,PNG_ITXT_COMPRESSION_NONE = 1,PNG_ITXT_COMPRESSION_zTXt = 2,PNG_TEXT_COMPRESSION_LAST = 3,PNG_MAX_UINT = 2147483647,};
enum MACRO_PNG_TRANSFORM {PNG_TRANSFORM_IDENTITY = 0x0,PNG_TRANSFORM_STRIP_16 = 0x1,PNG_TRANSFORM_STRIP_ALPHA = 0x2,PNG_TRANSFORM_PACKING = 0x4,PNG_TRANSFORM_PACKSWAP = 0x8,PNG_TRANSFORM_EXPAND = 0x10,PNG_TRANSFORM_INVERT_MONO = 0x20,PNG_TRANSFORM_SHIFT = 0x40,PNG_TRANSFORM_BGR = 0x80,PNG_TRANSFORM_SWAP_ALPHA = 0x100,PNG_TRANSFORM_SWAP_ENDIAN = 0x200,};
enum MACRO_PNG_TRANSFORM_INVERT {PNG_TRANSFORM_INVERT_ALPHA = 0x200,PNG_TRANSFORM_STRIP_FILLER = 0x800,};
enum MACRO_PNG_sRGB {PNG_sRGB_INTENT_PERCEPTUAL = 0,PNG_sRGB_INTENT_RELATIVE = 1,PNG_sRGB_INTENT_SATURATION = 2,PNG_sRGB_INTENT_ABSOLUTE = 3,PNG_sRGB_INTENT_LAST = 4,PNG_KEYWORD_MAX_LENGTH = 79,};
enum MACRO_PROT {PROT_NONE = 0,PROT_READ = 1,PROT_WRITE = 2,PROT_EXEC = 4,};
enum MACRO_PlaceOnTop {PlaceOnTop = 0,PlaceOnBottom = 1,};
enum MACRO_PointerRoot {PointerRoot = 1,};
enum MACRO_PointerWindow {PointerWindow = 0,InputFocus = 1,};
enum MACRO_PropModeReplace {PropModeReplace = 0,PropModePrepend = 1,PropModeAppend = 2,};
enum MACRO_PropertyNewValue {PropertyNewValue = 0,PropertyDelete = 1,};
enum MACRO_QueuedAlready {QueuedAlready = 0,QueuedAfterReading = 1,QueuedAfterFlush = 2,};
enum MACRO_RAND {RAND_MAX = 0x7FFFFFFF,};
enum MACRO_RELSZ {RELSZ = 10,};
enum MACRO_RTLD {RTLD_LAZY = 1,RTLD_NOW = 2,RTLD_GLOBAL = 4,};
enum MACRO_RUSAGE {RUSAGE_SELF = 0,RUSAGE_CHILDREN = -1,};
enum MACRO_RaiseLowest {RaiseLowest = 0,LowerHighest = 1,};
enum MACRO_RevertToNone {RevertToNone = 0,RevertToPointerRoot = 1,RevertToParent = 2,};
enum MACRO_S {S_BLKSIZE = 1024,S_ISUID = 2048,};
enum MACRO_SA {SA_NOCLDSTOP = 1,};
enum MACRO_SARMAG {SARMAG = 8,};
enum MACRO_SCHAR {SCHAR_MAX = 127,UCHAR_MAX = 255,CHAR_MIN = -128,};
enum MACRO_SCNHSZ {SCNHSZ = 40,};
enum MACRO_SEC {SEC_NO_FLAGS = 0x0,SEC_ALLOC = 0x1,SEC_LOAD = 0x2,SEC_RELOC = 0x4,SEC_READONLY = 0x10,SEC_CODE = 0x20,SEC_DATA = 0x40,SEC_ROM = 0x80,SEC_CONSTRUCTOR = 0x100,SEC_CONSTRUCTOR_TEXT = 0x1100,SEC_CONSTRUCTOR_DATA = 0x2100,SEC_CONSTRUCTOR_BSS = 0x3100,};
enum MACRO_SECSPERDAY {SECSPERDAY = 86400,};
enum MACRO_SEC_HAS {SEC_HAS_CONTENTS = 0x200,SEC_NEVER_LOAD = 0x400,SEC_COFF_SHARED_LIBRARY = 0x800,SEC_IS_COMMON = 0x8000,SEC_DEBUGGING = 0x10000,SEC_IN_MEMORY = 0x20000,SEC_EXCLUDE = 0x40000,SEC_SORT_ENTRIES = 0x80000,SEC_LINK_ONCE = 0x100000,SEC_LINK_DUPLICATES = 0x600000,SEC_LINK_DUPLICATES_DISCARD = 0x0,SEC_LINK_DUPLICATES_ONE_ONLY = 0x200000,SEC_LINK_DUPLICATES_SAME_SIZE = 0x400000,SEC_LINK_DUPLICATES_SAME_CONTENTS = 0x600000,SEC_LINKER_CREATED = 0x800000,SEC_KEEP = 0x1000000,SEC_SMALL_DATA = 0x2000000,SEC_SHARED = 0x4000000,SEC_BLOCK = 0x8000000,SEC_CLINK = 0x10000000,};
enum MACRO_SEEK {SEEK_SET = 0,SEEK_CUR = 1,SEEK_END = 2,TMP_MAX = 26,};
enum MACRO_SHRT {SHRT_MAX = 32767,USHRT_MAX = 65535,__INT_MAX__ = 2147483647,};
enum MACRO_SIG {SIG_SETMASK = 0,SIG_BLOCK = 1,SIG_UNBLOCK = 2,};
enum MACRO_SIGABRT {SIGABRT = 6,SIGEMT = 7,SIGFPE = 8,SIGKILL = 9,SIGBUS = 10,SIGSEGV = 11,SIGSYS = 12,SIGPIPE = 13,SIGALRM = 14,SIGTERM = 15,SIGURG = 16,SIGSTOP = 17,SIGTSTP = 18,SIGCONT = 19,SIGCHLD = 20,};
enum MACRO_SIGCLD {SIGCLD = 20,SIGTTIN = 21,SIGTTOU = 22,SIGIO = 23,};
enum MACRO_SIGHUP {SIGHUP = 1,SIGINT = 2,SIGQUIT = 3,SIGILL = 4,SIGTRAP = 5,SIGIOT = 6,};
enum MACRO_SIGPOLL {SIGPOLL = 23,SIGXCPU = 24,SIGXFSZ = 25,SIGVTALRM = 26,SIGPROF = 27,SIGWINCH = 28,SIGLOST = 29,SIGUSR1 = 30,SIGUSR2 = 31,NSIG = 32,};
enum MACRO_STDIN {STDIN_FILENO = 0,STDOUT_FILENO = 1,STDERR_FILENO = 2,};
enum MACRO_STMAGIC {STMAGIC = 0x101,SHMAGIC = 0x123,NT_SECTION_ALIGNMENT = 0x1000,};
enum MACRO_SYMESZ {SYMESZ = 18,};
enum MACRO_S_ENFMT {S_ENFMT = 0x400,S_IFMT = 0xF000,};
enum MACRO_S_IFBLK {S_IFBLK = 24576,S_IFREG = 32768,S_IFLNK = 40960,S_IFSOCK = 49152,};
enum MACRO_S_IFDIR {S_IFDIR = 16384,S_IFCHR = 8192,};
enum MACRO_S_IFIFO {S_IFIFO = 4096,S_IRWXU = 448,};
enum MACRO_S_IRGRP {S_IRGRP = 0x20,S_IWGRP = 0x10,S_IXGRP = 0x8,S_IRWXO = 0x7,};
enum MACRO_S_IROTH {S_IROTH = 0x4,S_IWOTH = 0x2,S_IXOTH = 0x1,};
enum MACRO_S_IRUSR {S_IRUSR = 0x100,S_IWUSR = 0x80,S_IXUSR = 0x40,S_IRWXG = 0x38,};
enum MACRO_S_ISGID {S_ISGID = 0x400,S_ISVTX = 0x200,S_IREAD = 0x100,S_IWRITE = 0x80,S_IEXEC = 0x40,};
enum MACRO_ScreenSaverReset {ScreenSaverReset = 0,ScreenSaverActive = 1,};
enum MACRO_SetModeInsert {SetModeInsert = 0,SetModeDelete = 1,};
enum MACRO_ShiftMapIndex {ShiftMapIndex = 0,LockMapIndex = 1,ControlMapIndex = 2,Mod1MapIndex = 3,Mod2MapIndex = 4,Mod3MapIndex = 5,Mod4MapIndex = 6,Mod5MapIndex = 7,Button1Mask = 256,Button2Mask = 512,Button3Mask = 1024,Button4Mask = 2048,Button5Mask = 4096,AnyModifier = 32768,};
enum MACRO_ShiftMask {ShiftMask = 1,LockMask = 2,ControlMask = 4,Mod1Mask = 8,Mod2Mask = 16,Mod3Mask = 32,Mod4Mask = 64,Mod5Mask = 128,};
enum MACRO_StaticGray {StaticGray = 0,GrayScale = 1,StaticColor = 2,PseudoColor = 3,TrueColor = 4,DirectColor = 5,};
enum MACRO_Success {Success = 0,BadRequest = 1,BadValue = 2,BadWindow = 3,BadPixmap = 4,BadAtom = 5,BadCursor = 6,BadFont = 7,BadMatch = 8,BadDrawable = 9,BadAccess = 10,BadAlloc = 11,BadColor = 12,BadGC = 13,BadIDChoice = 14,BadName = 15,BadLength = 16,BadImplementation = 17,FirstExtensionError = 128,LastExtensionError = 255,};
enum MACRO_TAB0 {TAB0 = 0x0,TAB1 = 0x800,TAB2 = 0x1000,TAB3 = 0x1800,};
enum MACRO_TCIFLUSH {TCIFLUSH = 0,TCOFLUSH = 1,TCIOFLUSH = 2,TCFLSH = 3,};
enum MACRO_TCL {TCL_MAJOR_VERSION = 8,TCL_MINOR_VERSION = 0,};
enum MACRO_TCL_DONT {TCL_DONT_USE_BRACES = 1,};
enum MACRO_TCL_DONT_WAIT {TCL_DONT_WAIT = 2,TCL_WINDOW_EVENTS = 4,TCL_FILE_EVENTS = 8,TCL_TIMER_EVENTS = 16,TCL_IDLE_EVENTS = 32,TCL_ALL_EVENTS = -3,};
enum MACRO_TCL_DSTRING {TCL_DSTRING_STATIC_SIZE = 200,};
enum MACRO_TCL_DYNAMIC {TCL_DYNAMIC = 3,};
enum MACRO_TCL_EXACT {TCL_EXACT = 1,TCL_NO_EVAL = 65536,TCL_EVAL_GLOBAL = 131072,};
enum MACRO_TCL_GLOBAL {TCL_GLOBAL_ONLY = 1,TCL_NAMESPACE_ONLY = 2,TCL_APPEND_VALUE = 4,TCL_LIST_ELEMENT = 8,TCL_TRACE_READS = 16,TCL_TRACE_WRITES = 32,TCL_TRACE_UNSETS = 64,TCL_TRACE_DESTROYED = 128,TCL_INTERP_DESTROYED = 256,TCL_LEAVE_ERR_MSG = 512,TCL_PARSE_PART1 = 1024,};
enum MACRO_TCL_LINK {TCL_LINK_INT = 1,TCL_LINK_DOUBLE = 2,TCL_LINK_BOOLEAN = 3,TCL_LINK_STRING = 4,TCL_LINK_READ_ONLY = 128,};
enum MACRO_TCL_MAX {TCL_MAX_PREC = 17,TCL_DOUBLE_SPACE = 27,};
enum MACRO_TCL_MODE {TCL_MODE_BLOCKING = 0,TCL_MODE_NONBLOCKING = 1,};
enum MACRO_TCL_OK {TCL_OK = 0,TCL_ERROR = 1,TCL_RETURN = 2,TCL_BREAK = 3,TCL_CONTINUE = 4,TCL_RESULT_SIZE = 200,};
enum MACRO_TCL_ONE {TCL_ONE_WORD_KEYS = 1,};
enum MACRO_TCL_RELEASE {TCL_RELEASE_LEVEL = 2,TCL_RELEASE_SERIAL = 4,};
enum MACRO_TCL_SERVICE {TCL_SERVICE_NONE = 0,TCL_SERVICE_ALL = 1,TCL_READABLE = 2,TCL_WRITABLE = 4,TCL_EXCEPTION = 8,};
enum MACRO_TCL_SMALL {TCL_SMALL_HASH_TABLE = 4,TCL_STRING_KEYS = 0,};
enum MACRO_TCL_STDIN {TCL_STDIN = 2,TCL_STDOUT = 4,TCL_STDERR = 8,TCL_ENFORCE_MODE = 16,};
enum MACRO_TCL_VOLATILE {TCL_VOLATILE = 1,TCL_STATIC = 0,};
enum MACRO_TCOOFF {TCOOFF = 0,TCOON = 1,TCIOFF = 2,TCION = 3,TCGETA = 5,TCSETA = 6,TCSETAW = 7,TCSETAF = 8,};
enum MACRO_TCSAFLUSH {TCSAFLUSH = 1,TCSANOW = 2,TCSADRAIN = 3,TCSADFLUSH = 4,TIOCPKT = 6,};
enum MACRO_TIOCGWINSZ {TIOCGWINSZ = 21505,TIOCSWINSZ = 21506,};
enum MACRO_TIOCPKT {TIOCPKT_DATA = 0,TIOCPKT_FLUSHREAD = 1,TIOCPKT_FLUSHWRITE = 2,TIOCPKT_STOP = 4,TIOCPKT_START = 8,TIOCPKT_NOSTOP = 16,TIOCPKT_DOSTOP = 32,FIONBIO = -2147195266,};
enum MACRO_TIX {TIX_STDIN_ALWAYS = 0,TIX_STDIN_OPTIONAL = 1,TIX_STDIN_NONE = 2,};
enum MACRO_TIX_DEFAULT {TIX_DEFAULT_LEN = -1,TIX_DEFAULT_SUBCMD = 0,};
enum MACRO_TIX_RELIEF {TIX_RELIEF_RAISED = 1,TIX_RELIEF_FLAT = 2,TIX_RELIEF_SUNKEN = 4,TIX_RELIEF_GROOVE = 8,TIX_RELIEF_RIDGE = 16,TIX_RELIEF_SOLID = 32,};
enum MACRO_TIX_UNIQUE {TIX_UNIQUE = 1,TIX_UNDEFINED = -1,};
enum MACRO_TIX_VAR {TIX_VAR_ARGS = -1,};
enum MACRO_TK {TK_MAJOR_VERSION = 8,TK_MINOR_VERSION = 0,};
enum MACRO_TK_3D {TK_3D_FLAT_GC = 1,TK_3D_LIGHT_GC = 2,TK_3D_DARK_GC = 3,TK_NOTIFY_SHARE = 20,};
enum MACRO_TK_ARGV {TK_ARGV_CONSTANT = 15,TK_ARGV_INT = 16,TK_ARGV_STRING = 17,TK_ARGV_UID = 18,TK_ARGV_REST = 19,TK_ARGV_FLOAT = 20,TK_ARGV_FUNC = 21,TK_ARGV_GENFUNC = 22,TK_ARGV_HELP = 23,TK_ARGV_CONST_OPTION = 24,TK_ARGV_OPTION_VALUE = 25,TK_ARGV_OPTION_NAME_VALUE = 26,TK_ARGV_VERSION = 27,TK_ARGV_END = 28,};
enum MACRO_TK_ARGV_NO {TK_ARGV_NO_DEFAULTS = 0x1,TK_ARGV_NO_LEFTOVERS = 0x2,TK_ARGV_NO_ABBREV = 0x4,TK_ARGV_DONT_SKIP_FIRST_ARG = 0x8,};
enum MACRO_TK_CONFIG {TK_CONFIG_BOOLEAN = 1,TK_CONFIG_INT = 2,TK_CONFIG_DOUBLE = 3,TK_CONFIG_STRING = 4,TK_CONFIG_UID = 5,TK_CONFIG_COLOR = 6,TK_CONFIG_FONT = 7,TK_CONFIG_BITMAP = 8,TK_CONFIG_BORDER = 9,TK_CONFIG_RELIEF = 10,TK_CONFIG_CURSOR = 11,TK_CONFIG_ACTIVE_CURSOR = 12,TK_CONFIG_JUSTIFY = 13,TK_CONFIG_ANCHOR = 14,TK_CONFIG_SYNONYM = 15,TK_CONFIG_CAP_STYLE = 16,TK_CONFIG_JOIN_STYLE = 17,TK_CONFIG_PIXELS = 18,TK_CONFIG_MM = 19,TK_CONFIG_WINDOW = 20,TK_CONFIG_CUSTOM = 21,TK_CONFIG_END = 22,};
enum MACRO_TK_CONFIG_ARGV {TK_CONFIG_ARGV_ONLY = 1,};
enum MACRO_TK_CONFIG_COLOR {TK_CONFIG_COLOR_ONLY = 1,TK_CONFIG_MONO_ONLY = 2,TK_CONFIG_NULL_OK = 4,TK_CONFIG_DONT_SET_DEFAULT = 8,TK_CONFIG_OPTION_SPECIFIED = 16,TK_CONFIG_USER_BIT = 256,};
enum MACRO_TK_DONT {TK_DONT_WAIT = 2,TK_X_EVENTS = 4,};
enum MACRO_TK_MAPPED {TK_MAPPED = 1,TK_TOP_LEVEL = 2,TK_ALREADY_DEAD = 4,TK_NEED_CONFIG_NOTIFY = 8,TK_GRAB_FLAG = 16,TK_CHECKED_IC = 32,TK_DONT_DESTROY_WINDOW = 64,TK_WM_COLORMAP_WINDOW = 128,TK_EMBEDDED = 256,TK_CONTAINER = 512,TK_BOTH_HALVES = 1024,TK_DEFER_MODAL = 2048,TK_WRAPPER = 4096,TK_REPARENTED = 8192,};
enum MACRO_TK_READABLE {TK_READABLE = 2,TK_WRITABLE = 4,TK_EXCEPTION = 8,};
enum MACRO_TK_RELEASE {TK_RELEASE_LEVEL = 2,TK_RELEASE_SERIAL = 4,};
enum MACRO_TK_RELIEF {TK_RELIEF_RAISED = 1,TK_RELIEF_FLAT = 2,TK_RELIEF_SUNKEN = 4,TK_RELIEF_GROOVE = 8,TK_RELIEF_RIDGE = 16,TK_RELIEF_SOLID = 32,};
enum MACRO_TK_SCROLL {TK_SCROLL_MOVETO = 1,TK_SCROLL_PAGES = 2,TK_SCROLL_UNITS = 3,TK_SCROLL_ERROR = 4,VirtualEvent = 35,ActivateNotify = 36,DeactivateNotify = 37,MouseWheelEvent = 38,TK_LASTEVENT = 39,MouseWheelMask = 268435456,ActivateMask = 536870912,VirtualEventMask = 1073741824,};
enum MACRO_TK_TAG {TK_TAG_SPACE = 3,};
enum MACRO_TK_WHOLE {TK_WHOLE_WORDS = 1,TK_AT_LEAST_ONE = 2,TK_PARTIAL_OK = 4,TK_IGNORE_TABS = 8,TK_IGNORE_NEWLINES = 16,};
enum MACRO_TK_WIDGET {TK_WIDGET_DEFAULT_PRIO = 20,TK_STARTUP_FILE_PRIO = 40,TK_USER_DEFAULT_PRIO = 60,TK_INTERACTIVE_PRIO = 80,TK_MAX_PRIO = 100,};
enum MACRO_TK_WINDOW {TK_WINDOW_EVENTS = 4,TK_FILE_EVENTS = 8,TK_TIMER_EVENTS = 16,TK_IDLE_EVENTS = 32,TK_ALL_EVENTS = -3,};
enum MACRO_True {True = 1,};
enum MACRO_ULONG {ULONG_LONG_MAX = -1,};
enum MACRO_UNIX {UNIX_PATH_LEN = 108,};
enum MACRO_USE {USE_TCLALLOC = 1,};
enum MACRO_UT {UT_LINESIZE = 16,};
enum MACRO_UT_NAMESIZE {UT_NAMESIZE = 16,UT_HOSTSIZE = 256,};
enum MACRO_UnmapGravity {UnmapGravity = 0,};
enum MACRO_Unsorted {Unsorted = 0,YSorted = 1,YXSorted = 2,YXBanded = 3,};
enum MACRO_VDISCARD {VDISCARD = 1,VEOL = 2,VEOL2 = 3,VEOF = 4,VERASE = 5,VINTR = 6,VKILL = 7,VLNEXT = 8,VMIN = 9,VQUIT = 10,VREPRINT = 11,VSTART = 12,VSTOP = 13,VSUSP = 14,VSWTC = 15,VTIME = 16,VWERASE = 17,NCCS = 18,};
enum MACRO_VT0 {VT0 = 0x0,VT1 = 0x2000,FFDLY = 0x4000,};
enum MACRO_VisibilityUnobscured {VisibilityUnobscured = 0,VisibilityPartiallyObscured = 1,VisibilityFullyObscured = 2,};
enum MACRO_W {W_OK = 2,};
enum MACRO_WAIT {WAIT_CHILD = 1,};
enum MACRO_WHEEL {WHEEL_DELTA = 120,WHEEL_PAGESCROLL = -1,};
enum MACRO_WINDOWS {WINDOWS_POST = 0,WINDOWS_SEND = 1,WINDOWS_HWND = 2,};
enum MACRO_WNOHANG {WNOHANG = 1,WUNTRACED = 2,};
enum MACRO_X {X_PROTOCOL = 11,X_PROTOCOL_REVISION = 0,};
enum MACRO_XBufferOverflow {XBufferOverflow = -1,};
enum MACRO_XIMPreeditArea {XIMPreeditArea = 0x1,XIMPreeditCallbacks = 0x2,XIMPreeditPosition = 0x4,XIMPreeditNothing = 0x8,XIMPreeditNone = 0x10,XIMStatusArea = 0x100,XIMStatusCallbacks = 0x200,XIMStatusNothing = 0x400,XIMStatusNone = 0x800,};
enum MACRO_XIMReverse {XIMReverse = 1,XIMUnderline = 2,XIMHighlight = 4,XIMPrimary = 32,XIMSecondary = 64,XIMTertiary = 128,};
enum MACRO_XLookupNone {XLookupNone = 1,XLookupChars = 2,XLookupKeySym = 3,XLookupBoth = 4,};
enum MACRO_XMaxTransChars {XMaxTransChars = 4,};
enum MACRO_XTABS {XTABS = 0x1800,VTDLY = 0x2000,};
enum MACRO_XYBitmap {XYBitmap = 0,XYPixmap = 1,ZPixmap = 2,};
enum MACRO_X_OK {X_OK = 1,};
enum MACRO_XlibSpecificationRelease {XlibSpecificationRelease = 5,};
enum MACRO_Z {Z_NO_FLUSH = 0,Z_PARTIAL_FLUSH = 1,Z_SYNC_FLUSH = 2,Z_FULL_FLUSH = 3,Z_FINISH = 4,};
enum MACRO_Z_ASCII {Z_ASCII = 1,Z_UNKNOWN = 2,Z_DEFLATED = 8,};
enum MACRO_Z_BEST {Z_BEST_SPEED = 1,Z_BEST_COMPRESSION = 9,Z_DEFAULT_COMPRESSION = -1,};
enum MACRO_Z_BUF {Z_BUF_ERROR = -5,};
enum MACRO_Z_DATA {Z_DATA_ERROR = -3,};
enum MACRO_Z_DEFAULT {Z_DEFAULT_STRATEGY = 0,Z_BINARY = 0,};
enum MACRO_Z_FILTERED {Z_FILTERED = 1,Z_HUFFMAN_ONLY = 2,};
enum MACRO_Z_MEM {Z_MEM_ERROR = -4,};
enum MACRO_Z_NULL {Z_NULL = 0,};
enum MACRO_Z_OK {Z_OK = 0,Z_STREAM_END = 1,Z_NEED_DICT = 2,Z_ERRNO = -1,};
enum MACRO_Z_STREAM {Z_STREAM_ERROR = -2,};
enum MACRO_Z_VERSION {Z_VERSION_ERROR = -6,Z_NO_COMPRESSION = 0,};
enum MACRO__ {__MINGW32_MAJOR_VERSION = 0,__MINGW32_MINOR_VERSION = 3,};
enum MACRO__ANSIDECL {_ANSIDECL_H = 1,};
enum MACRO__ATEXIT {_ATEXIT_SIZE = 32,};
enum MACRO__CLOCKS {_CLOCKS_PER_SEC_ = 1000,};
enum MACRO__FOPEN {_FOPEN = -1,};
enum MACRO__FREAD {_FREAD = 0x1,_FWRITE = 0x2,_FNDELAY = 0x4,_FAPPEND = 0x8,_FMARK = 0x10,_FDEFER = 0x20,_FASYNC = 0x40,_FSHLOCK = 0x80,_FEXLOCK = 0x100,_FCREAT = 0x200,_FTRUNC = 0x400,_FEXCL = 0x800,_FNBIO = 0x1000,_FSYNC = 0x2000,_FNONBLOCK = 0x4000,_FNOCTTY = 0x8000,};
enum MACRO__G {_G_NAMES_HAVE_UNDERSCORE = 1,};
enum MACRO__G_FOPEN {_G_FOPEN_MAX = 20,_G_FILENAME_MAX = 1024,};
enum MACRO__G_HAVE {_G_HAVE_ST_BLKSIZE = 1,_G_BUFSIZ = 1024,};
enum MACRO__G_HAVE_ATEXIT {_G_HAVE_ATEXIT = 1,};
enum MACRO__G_HAVE_BOOL {_G_HAVE_BOOL = 1,_G_HAVE_PRINTF_FP = 0,_G_HAVE_LONG_DOUBLE_IO = 0,};
enum MACRO__G_HAVE_DIRENT {_G_HAVE_DIRENT = 1,_G_HAVE_CURSES = 0,_G_MATH_H_INLINES = 0,};
enum MACRO__G_HAVE_SYS {_G_HAVE_SYS_RESOURCE = 1,};
enum MACRO__G_HAVE_SYS_CDEFS {_G_HAVE_SYS_CDEFS = 1,};
enum MACRO__G_HAVE_SYS_SOCKET {_G_HAVE_SYS_SOCKET = 1,};
enum MACRO__G_HAVE_SYS_TIMES {_G_HAVE_SYS_TIMES = 1,};
enum MACRO__G_HAVE_SYS_WAIT {_G_HAVE_SYS_WAIT = 1,};
enum MACRO__G_HAVE_UNISTD {_G_HAVE_UNISTD = 1,};
enum MACRO__G_VTABLE {_G_VTABLE_LABEL_HAS_LENGTH = 1,};
enum MACRO__IFMT {_IFMT = 0xF000,_IFDIR = 0x4000,_IFCHR = 0x2000,_IFBLK = 0x6000,_IFREG = 0x8000,_IFLNK = 0xA000,_IFSOCK = 0xC000,_IFIFO = 0x1000,};
enum MACRO__IOFBF {_IOFBF = 0,_IOLBF = 1,_IONBF = 2,BUFSIZ = 1024,EOF = -1,};
enum MACRO__JBLEN {_JBLEN = 36,};
enum MACRO__N {_N_LISTS = 30,};
enum MACRO__P {_P_WAIT = 1,_P_NOWAIT = 2,_P_OVERLAY = 3,_P_NOWAITO = 4,_P_DETACH = 5,};
enum MACRO__PASSWORD {_PASSWORD_LEN = 128,};
enum MACRO__PC {_PC_LINK_MAX = 0,_PC_MAX_CANON = 1,_PC_MAX_INPUT = 2,_PC_NAME_MAX = 3,_PC_PATH_MAX = 4,_PC_PIPE_BUF = 5,_PC_CHOWN_RESTRICTED = 6,_PC_NO_TRUNC = 7,_PC_VDISABLE = 8,_PC_ASYNC_IO = 9,_PC_PRIO_IO = 10,_PC_SYNC_IO = 11,MAXNAMLEN = 1024,};
enum MACRO__POSIX {_POSIX_CHILD_MAX = 6,_POSIX_LINK_MAX = 8,_POSIX_MAX_CANON = 255,};
enum MACRO__POSIX_MAX {_POSIX_MAX_INPUT = 255,};
enum MACRO__POSIX_NAME {_POSIX_NAME_MAX = 14,_POSIX_NGROUPS_MAX = 0,};
enum MACRO__POSIX_OPEN {_POSIX_OPEN_MAX = 16,_POSIX_PATH_MAX = 255,_POSIX_PIPE_BUF = 512,_POSIX_SSIZE_MAX = 32767,};
enum MACRO__POSIX_STREAM {_POSIX_STREAM_MAX = 8,_POSIX_TZNAME_MAX = 3,};
enum MACRO__SC {_SC_ARG_MAX = 0,_SC_CHILD_MAX = 1,_SC_CLK_TCK = 2,_SC_NGROUPS_MAX = 3,_SC_OPEN_MAX = 4,_SC_JOB_CONTROL = 5,_SC_SAVED_IDS = 6,_SC_VERSION = 7,_SC_PAGESIZE = 8,};
enum MACRO__U {_U = 0x1,_L = 0x2,_N = 0x4,_S = 0x8,_P = 0x10,_C = 0x20,_X = 0x40,_B = 0x80,};
enum MACRO__USING {_USING_PROTOTYPES_ = 1,};
enum MACRO___DIRENT {__DIRENT_COOKIE = 0xDEDE4242,};
enum MACRO___IEEE {__IEEE_FLT_EXPBIAS = 127,};
enum MACRO___IEEE_DBL {__IEEE_DBL_EXPLEN = 11,};
enum MACRO___IEEE_DBL_NAN {__IEEE_DBL_NAN_EXP = 0x7FF,};
enum MACRO___IEEE_FLT {__IEEE_FLT_EXPLEN = 8,__IEEE_DBL_FRACLEN = 52,};
enum MACRO___IEEE_FLT_FRACLEN {__IEEE_FLT_FRACLEN = 23,};
enum MACRO___IEEE_FLT_NAN {__IEEE_FLT_NAN_EXP = 0xFF,};
enum MACRO___LONG {__LONG_MAX__ = 2147483647,};
enum MACRO___LONG_LONG {__LONG_LONG_MAX__ = -1,};
enum MACRO___SLBF {__SLBF = 0x1,__SNBF = 0x2,__SRD = 0x4,__SWR = 0x8,__SRW = 0x10,__SEOF = 0x20,__SERR = 0x40,__SMBF = 0x80,__SAPP = 0x100,__SSTR = 0x200,__SOPT = 0x400,__SNPT = 0x800,__SOFF = 0x1000,__SMOD = 0x2000,};
enum MACRO_bfd {bfd_mach_m68000 = 1,bfd_mach_m68008 = 2,bfd_mach_m68010 = 3,bfd_mach_m68020 = 4,bfd_mach_m68030 = 5,bfd_mach_m68040 = 6,bfd_mach_m68060 = 7,bfd_mach_cpu32 = 8,};
enum MACRO_bfd_mach {bfd_mach_i960_core = 1,bfd_mach_i960_ka_sa = 2,bfd_mach_i960_kb_sb = 3,bfd_mach_i960_mc = 4,bfd_mach_i960_xa = 5,bfd_mach_i960_ca = 6,bfd_mach_i960_jx = 7,bfd_mach_i960_hx = 8,};
enum MACRO_bfd_mach_alpha {bfd_mach_alpha_ev4 = 0x10,bfd_mach_alpha_ev5 = 0x20,bfd_mach_alpha_ev6 = 0x30,};
enum MACRO_bfd_mach_arm {bfd_mach_arm_2 = 1,bfd_mach_arm_2a = 2,bfd_mach_arm_3 = 3,bfd_mach_arm_3M = 4,bfd_mach_arm_4 = 5,bfd_mach_arm_4T = 6,bfd_mach_arm_5 = 7,bfd_mach_arm_5T = 8,};
enum MACRO_bfd_mach_avr1 {bfd_mach_avr1 = 1,bfd_mach_avr2 = 2,bfd_mach_avr3 = 3,bfd_mach_avr4 = 4,};
enum MACRO_bfd_mach_d10v {bfd_mach_d10v = 0,bfd_mach_d10v_ts2 = 2,bfd_mach_d10v_ts3 = 3,};
enum MACRO_bfd_mach_h8300 {bfd_mach_h8300 = 1,bfd_mach_h8300h = 2,bfd_mach_h8300s = 3,};
enum MACRO_bfd_mach_i386 {bfd_mach_i386_i8086 = 1,bfd_mach_i386_i386_intel_syntax = 2,};
enum MACRO_bfd_mach_m32rx {bfd_mach_m32rx = 120,bfd_mach_mn10300 = 300,bfd_mach_am33 = 330,bfd_mach_fr30 = 1179792176,};
enum MACRO_bfd_mach_mips16 {bfd_mach_mips16 = 16,bfd_mach_i386_i386 = 0,};
enum MACRO_bfd_mach_mips3000 {bfd_mach_mips3000 = 3000,bfd_mach_mips3900 = 3900,bfd_mach_mips4000 = 4000,bfd_mach_mips4010 = 4010,bfd_mach_mips4100 = 4100,bfd_mach_mips4111 = 4111,bfd_mach_mips4300 = 4300,bfd_mach_mips4400 = 4400,bfd_mach_mips4600 = 4600,bfd_mach_mips4650 = 4650,bfd_mach_mips5000 = 5000,bfd_mach_mips6000 = 6000,bfd_mach_mips8000 = 8000,bfd_mach_mips10000 = 10000,};
enum MACRO_bfd_mach_sh {bfd_mach_sh = 0,bfd_mach_sh2 = 32,bfd_mach_sh_dsp = 45,bfd_mach_sh3 = 48,bfd_mach_sh3_dsp = 61,bfd_mach_sh3e = 62,bfd_mach_sh4 = 64,};
enum MACRO_bfd_mach_sparc {bfd_mach_sparc = 1,bfd_mach_sparc_sparclet = 2,bfd_mach_sparc_sparclite = 3,bfd_mach_sparc_v8plus = 4,bfd_mach_sparc_v8plusa = 5,bfd_mach_sparc_sparclite_le = 6,bfd_mach_sparc_v9 = 7,bfd_mach_sparc_v9a = 8,};
enum MACRO_bfd_mach_v850 {bfd_mach_v850 = 0,bfd_mach_v850e = 69,};
enum MACRO_bfd_mach_v850ea {bfd_mach_v850ea = 65,bfd_mach_arc_base = 0,bfd_mach_m32r = 0,};
enum MACRO_bfd_mach_z8001 {bfd_mach_z8001 = 1,bfd_mach_z8002 = 2,};
enum MACRO_no {no_argument = 0,required_argument = 1,optional_argument = 2,};
typedef unsigned __int32 Mask;
typedef struct $0537E486A32D586768D898FB6E409606 PEAOUTHDR;
typedef XID Pixmap;
typedef struct $C4AEAB15D2203863A55B0BEA2C0AE902 Screen;
typedef struct $2E0E2C12F04118C9E52BAE749EE378FF ScreenFormat;
typedef int Tcl_AppInitProc(Tcl_Interp *interp);
typedef struct Tcl_AsyncHandler_ *Tcl_AsyncHandler;
typedef int Tcl_AsyncProc(ClientData clientData, Tcl_Interp *interp, int code);
struct Tcl_CallFrame {Tcl_Namespace *nsPtr;int dummy1;int dummy2;char *dummy3;char *dummy4;char *dummy5;int dummy6;char *dummy7;char *dummy8;int dummy9;char *dummy10;};
typedef struct Tcl_Channel_ *Tcl_Channel;
typedef void Tcl_ChannelProc(ClientData clientData, int mask);
struct Tcl_ChannelType {char *typeName;Tcl_DriverBlockModeProc *blockModeProc;Tcl_DriverCloseProc *closeProc;Tcl_DriverInputProc *inputProc;Tcl_DriverOutputProc *outputProc;Tcl_DriverSeekProc *seekProc;Tcl_DriverSetOptionProc *setOptionProc;Tcl_DriverGetOptionProc *getOptionProc;Tcl_DriverWatchProc *watchProc;Tcl_DriverGetHandleProc *getHandleProc;void *reserved;};
typedef void Tcl_CloseProc(ClientData data);
typedef void Tcl_CmdDeleteProc(ClientData clientData);
struct Tcl_CmdInfo {int isNativeObjectProc;Tcl_ObjCmdProc *objProc;ClientData objClientData;Tcl_CmdProc *proc;ClientData clientData;Tcl_CmdDeleteProc *deleteProc;ClientData deleteData;Tcl_Namespace *namespacePtr;};
typedef int Tcl_CmdProc(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
typedef void Tcl_CmdTraceProc(ClientData clientData, Tcl_Interp *interp, int level, char *command, Tcl_CmdProc *proc, ClientData cmdClientData, int argc, char **argv);
typedef struct Tcl_Command_ *Tcl_Command;
struct Tcl_DString {char *string;int length;int spaceAvl;char staticSpace[200];};
typedef int Tcl_DriverBlockModeProc(ClientData instanceData, int mode);
typedef int Tcl_DriverCloseProc(ClientData instanceData, Tcl_Interp *interp);
typedef int Tcl_DriverGetHandleProc(ClientData instanceData, int direction, ClientData *handlePtr);
typedef int Tcl_DriverGetOptionProc(ClientData instanceData, Tcl_Interp *interp, char *optionName, Tcl_DString *dsPtr);
typedef int Tcl_DriverInputProc(ClientData instanceData, char *buf, int toRead, int *errorCodePtr);
typedef int Tcl_DriverOutputProc(ClientData instanceData, char *buf, int toWrite, int *errorCodePtr);
typedef int Tcl_DriverSeekProc(ClientData instanceData, __int32 offset, int mode, int *errorCodePtr);
typedef int Tcl_DriverSetOptionProc(ClientData instanceData, Tcl_Interp *interp, char *optionName, char *value);
typedef void Tcl_DriverWatchProc(ClientData instanceData, int mask);
typedef void Tcl_DupInternalRepProc(struct Tcl_Obj *srcPtr, struct Tcl_Obj *dupPtr);
enum Tcl_EolTranslation {TCL_TRANSLATE_AUTO = 0x0,TCL_TRANSLATE_CR = 0x1,TCL_TRANSLATE_LF = 0x2,TCL_TRANSLATE_CRLF = 0x3,};
struct Tcl_Event {Tcl_EventProc *proc;struct Tcl_Event *nextPtr;};
typedef void Tcl_EventCheckProc(ClientData clientData, int flags);
typedef int Tcl_EventDeleteProc(Tcl_Event *evPtr, ClientData clientData);
typedef int Tcl_EventProc(Tcl_Event *evPtr, int flags);
typedef void Tcl_EventSetupProc(ClientData clientData, int flags);
typedef void Tcl_ExitProc(ClientData clientData);
typedef void Tcl_FileFreeProc(ClientData clientData);
typedef void Tcl_FileProc(ClientData clientData, int mask);
typedef void Tcl_FreeInternalRepProc(struct Tcl_Obj *objPtr);
typedef void Tcl_FreeProc(char *blockPtr);
struct Tcl_HashEntry {struct Tcl_HashEntry *nextPtr;struct Tcl_HashEntry::Tcl_HashTable *tablePtr;struct Tcl_HashEntry **bucketPtr;ClientData clientData;union Tcl_HashEntry::$A1DAA63EE9F2E4530E7529E0A1E4E4E3 key;};
union Tcl_HashEntry::$A1DAA63EE9F2E4530E7529E0A1E4E4E3 {char *oneWordValue;int words[1];char string[4];};
struct Tcl_HashSearch {Tcl_HashTable *tablePtr;int nextIndex;Tcl_HashEntry *nextEntryPtr;};
struct Tcl_HashTable {Tcl_HashEntry **buckets;Tcl_HashEntry *staticBuckets[4];int numBuckets;int numEntries;int rebuildSize;int downShift;int mask;int keyType;Tcl_HashEntry *(*findProc)(struct Tcl_HashTable *tablePtr, const char *key);Tcl_HashEntry *(*createProc)(struct Tcl_HashTable *tablePtr, const char *key, int *newPtr);};
typedef void Tcl_IdleProc(ClientData clientData);
struct Tcl_Interp {char *result;void (*freeProc)(char *blockPtr);int errorLine;};
typedef void Tcl_InterpDeleteProc(ClientData clientData, Tcl_Interp *interp);
typedef int Tcl_MathProc(ClientData clientData, Tcl_Interp *interp, Tcl_Value *args, Tcl_Value *resultPtr);
struct Tcl_Namespace {char *name;char *fullName;ClientData clientData;Tcl_NamespaceDeleteProc *deleteProc;struct Tcl_Namespace *parentPtr;};
typedef void Tcl_NamespaceDeleteProc(ClientData clientData);
struct Tcl_Obj {int refCount;char *bytes;int length;Tcl_ObjType *typePtr;union Tcl_Obj::$8B7172FD90B7CDB67AF06E0C3918BAD0 internalRep;};
union Tcl_Obj::$8B7172FD90B7CDB67AF06E0C3918BAD0 {__int32 longValue;double doubleValue;void *otherValuePtr;struct Tcl_Obj::$8B7172FD90B7CDB67AF06E0C3918BAD0::$5F78906DFCD19F4F0601C4695135A9CD twoPtrValue;};
struct Tcl_Obj::$8B7172FD90B7CDB67AF06E0C3918BAD0::$5F78906DFCD19F4F0601C4695135A9CD {void *ptr1;void *ptr2;};
typedef int Tcl_ObjCmdProc(ClientData clientData, Tcl_Interp *interp, int objc, struct Tcl_Obj *const *objv);
struct Tcl_ObjType {char *name;Tcl_FreeInternalRepProc *freeIntRepProc;Tcl_DupInternalRepProc *dupIntRepProc;Tcl_UpdateStringProc *updateStringProc;Tcl_SetFromAnyProc *setFromAnyProc;};
typedef int Tcl_PackageInitProc(Tcl_Interp *interp);
enum Tcl_PathType {TCL_PATH_ABSOLUTE = 0x0,TCL_PATH_RELATIVE = 0x1,TCL_PATH_VOLUME_RELATIVE = 0x2,};
typedef struct Tcl_Pid_ *Tcl_Pid;
typedef enum $7DE6A019FB8D510204474F438D93B845 Tcl_QueuePosition;
typedef struct Tcl_RegExp_ *Tcl_RegExp;
typedef int Tcl_SetFromAnyProc(Tcl_Interp *interp, struct Tcl_Obj *objPtr);
typedef void Tcl_TcpAcceptProc(ClientData callbackData, Tcl_Channel chan, char *address, int port);
struct Tcl_Time {__int32 sec;__int32 usec;};
typedef void Tcl_TimerProc(ClientData clientData);
typedef struct Tcl_TimerToken_ *Tcl_TimerToken;
typedef struct Tcl_Trace_ *Tcl_Trace;
typedef void Tcl_UpdateStringProc(struct Tcl_Obj *objPtr);
struct Tcl_Value {Tcl_ValueType type;__int32 intValue;double doubleValue;};
typedef enum $75C8E7CA27BE1E0F4E6BF64D1993A788 Tcl_ValueType;
typedef struct Tcl_Var_ *Tcl_Var;
typedef char *Tcl_VarTraceProc(ClientData clientData, Tcl_Interp *interp, char *part1, char *part2, int flags);
typedef unsigned __int32 Time;
typedef int (*Tix_CheckArgvProc)(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
typedef struct _Tix_CmdInfo Tix_CmdInfo;
typedef int (*Tix_CmdProc)(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
struct Tix_LinkList {int numItems;char *head;char *tail;};
struct Tix_ListInfo {int nextOffset;int prevOffset;};
struct Tix_ListIterator {char *last;char *curr;unsigned int deleted;};
typedef int Tix_Relief;
typedef struct _Tix_SubCmdInfo Tix_SubCmdInfo;
typedef int (*Tix_SubCmdProc)(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
typedef struct $841354712BEA89ED461350FE22A001AB Tix_TclCmd;
typedef struct Tk_3DBorder_ *Tk_3DBorder;
typedef enum $5252AF58AF7525DA13AA82FD1F51B9F5 Tk_Anchor;
typedef struct $65881570D1BE40B63EE4A0C2B392A1BC Tk_ArgvInfo;
typedef struct Tk_BindingTable_ *Tk_BindingTable;
typedef struct Tk_Canvas_ *Tk_Canvas;
struct Tk_CanvasTextInfo {Tk_3DBorder selBorder;int selBorderWidth;XColor *selFgColorPtr;Tk_Item *selItemPtr;int selectFirst;int selectLast;Tk_Item *anchorItemPtr;int selectAnchor;Tk_3DBorder insertBorder;int insertWidth;int insertBorderWidth;Tk_Item *focusItemPtr;int gotFocus;int cursorOn;};
struct Tk_ConfigSpec {int type;char *argvName;char *dbName;char *dbClass;char *defValue;int offset;int specFlags;Tk_CustomOption *customPtr;};
typedef struct Tk_Cursor_ *Tk_Cursor;
struct Tk_CustomOption {Tk_OptionParseProc *parseProc;Tk_OptionPrintProc *printProc;ClientData clientData;};
typedef struct Tk_ErrorHandler_ *Tk_ErrorHandler;
typedef int Tk_ErrorProc(ClientData clientData, XErrorEvent *errEventPtr);
typedef void Tk_EventProc(ClientData clientData, XEvent *eventPtr);
struct Tk_FakeWin {Display *display;char *dummy1;int screenNum;Visual *visual;int depth;Window window;char *dummy2;char *dummy3;Tk_Window parentPtr;char *dummy4;char *dummy5;char *pathName;Tk_Uid nameUid;Tk_Uid classUid;XWindowChanges changes;unsigned int dummy6;XSetWindowAttributes atts;unsigned __int32 dummy7;unsigned int flags;char *dummy8;ClientData *dummy10;int dummy11;int dummy12;char *dummy13;char *dummy14;ClientData dummy15;int reqWidth;int reqHeight;int internalBorderWidth;char *dummy16;char *dummy17;ClientData dummy18;char *dummy19;};
typedef struct Tk_Font_ *Tk_Font;
struct Tk_FontMetrics {int ascent;int descent;int linespace;};
typedef int Tk_GenericProc(ClientData clientData, XEvent *eventPtr);
typedef void Tk_GeomLostSlaveProc(ClientData clientData, Tk_Window tkwin);
struct Tk_GeomMgr {char *name;Tk_GeomRequestProc *requestProc;Tk_GeomLostSlaveProc *lostSlaveProc;};
typedef void Tk_GeomRequestProc(ClientData clientData, Tk_Window tkwin);
typedef int Tk_GetSelProc(ClientData clientData, Tcl_Interp *interp, char *portion);
typedef struct Tk_Image__ *Tk_Image;
typedef void Tk_ImageChangedProc(ClientData clientData, int x, int y, int width, int height, int imageWidth, int imageHeight);
typedef int Tk_ImageCreateProc(Tcl_Interp *interp, char *name, int objc, Tcl_Obj *const *objv, Tk_ImageType *typePtr, Tk_ImageMaster master, ClientData *masterDataPtr);
typedef void Tk_ImageDeleteProc(ClientData masterData);
typedef void Tk_ImageDisplayProc(ClientData instanceData, Display *display, Drawable drawable, int imageX, int imageY, int width, int height, int drawableX, int drawableY);
typedef int Tk_ImageFileMatchProc(Tcl_Channel chan, char *fileName, char *formatString, int *widthPtr, int *heightPtr);
typedef int Tk_ImageFileReadProc(Tcl_Interp *interp, Tcl_Channel chan, char *fileName, char *formatString, Tk_PhotoHandle imageHandle, int destX, int destY, int width, int height, int srcX, int srcY);
typedef int Tk_ImageFileWriteProc(Tcl_Interp *interp, char *fileName, char *formatString, Tk_PhotoImageBlock *blockPtr);
typedef void Tk_ImageFreeProc(ClientData instanceData, Display *display);
typedef ClientData Tk_ImageGetProc(Tk_Window tkwin, ClientData masterData);
typedef struct Tk_ImageMaster_ *Tk_ImageMaster;
typedef int Tk_ImageStringMatchProc(Tcl_Obj *dataObj, char *formatString, int *widthPtr, int *heightPtr);
typedef int Tk_ImageStringReadProc(Tcl_Interp *interp, Tcl_Obj *dataObj, char *formatString, Tk_PhotoHandle imageHandle, int destX, int destY, int width, int height, int srcX, int srcY);
typedef int Tk_ImageStringWriteProc(Tcl_Interp *interp, Tcl_DString *dataPtr, char *formatString, Tk_PhotoImageBlock *blockPtr);
struct Tk_ImageType {char *name;Tk_ImageCreateProc *createProc;Tk_ImageGetProc *getProc;Tk_ImageDisplayProc *displayProc;Tk_ImageFreeProc *freeProc;Tk_ImageDeleteProc *deleteProc;struct Tk_ImageType *nextPtr;char *reserved;};
struct Tk_Item {int id;struct Tk_Item *nextPtr;Tk_Uid staticTagSpace[3];Tk_Uid *tagPtr;int tagSpace;int numTags;struct Tk_Item::Tk_ItemType *typePtr;int x1;int y1;int x2;int y2;struct Tk_Item *prevPtr;int reserved1;char *reserved2;int reserved3;};
typedef int Tk_ItemAreaProc(Tk_Canvas canvas, Tk_Item *itemPtr, double *rectPtr);
typedef int Tk_ItemConfigureProc(Tcl_Interp *interp, Tk_Canvas canvas, Tk_Item *itemPtr, int argc, char **argv, int flags);
typedef int Tk_ItemCoordProc(Tcl_Interp *interp, Tk_Canvas canvas, Tk_Item *itemPtr, int argc, char **argv);
typedef int Tk_ItemCreateProc(Tcl_Interp *interp, Tk_Canvas canvas, Tk_Item *itemPtr, int argc, char **argv);
typedef void Tk_ItemCursorProc(Tk_Canvas canvas, Tk_Item *itemPtr, int index);
typedef void Tk_ItemDCharsProc(Tk_Canvas canvas, Tk_Item *itemPtr, int first, int last);
typedef void Tk_ItemDeleteProc(Tk_Canvas canvas, Tk_Item *itemPtr, Display *display);
typedef void Tk_ItemDisplayProc(Tk_Canvas canvas, Tk_Item *itemPtr, Display *display, Drawable dst, int x, int y, int width, int height);
typedef int Tk_ItemIndexProc(Tcl_Interp *interp, Tk_Canvas canvas, Tk_Item *itemPtr, char *indexString, int *indexPtr);
typedef void Tk_ItemInsertProc(Tk_Canvas canvas, Tk_Item *itemPtr, int beforeThis, char *string);
typedef double Tk_ItemPointProc(Tk_Canvas canvas, Tk_Item *itemPtr, double *pointPtr);
typedef int Tk_ItemPostscriptProc(Tcl_Interp *interp, Tk_Canvas canvas, Tk_Item *itemPtr, int prepass);
typedef void Tk_ItemScaleProc(Tk_Canvas canvas, Tk_Item *itemPtr, double originX, double originY, double scaleX, double scaleY);
typedef int Tk_ItemSelectionProc(Tk_Canvas canvas, Tk_Item *itemPtr, int offset, char *buffer, int maxBytes);
typedef void Tk_ItemTranslateProc(Tk_Canvas canvas, Tk_Item *itemPtr, double deltaX, double deltaY);
struct Tk_ItemType {char *name;int itemSize;Tk_ItemCreateProc *createProc;Tk_ConfigSpec *configSpecs;Tk_ItemConfigureProc *configProc;Tk_ItemCoordProc *coordProc;Tk_ItemDeleteProc *deleteProc;Tk_ItemDisplayProc *displayProc;int alwaysRedraw;Tk_ItemPointProc *pointProc;Tk_ItemAreaProc *areaProc;Tk_ItemPostscriptProc *postscriptProc;Tk_ItemScaleProc *scaleProc;Tk_ItemTranslateProc *translateProc;Tk_ItemIndexProc *indexProc;Tk_ItemCursorProc *icursorProc;Tk_ItemSelectionProc *selectionProc;Tk_ItemInsertProc *insertProc;Tk_ItemDCharsProc *dCharsProc;struct Tk_ItemType *nextPtr;char *reserved1;int reserved2;char *reserved3;char *reserved4;};
typedef enum $D75A9F50BEFC37ED2CAAB9E825B0AC13 Tk_Justify;
typedef void Tk_LostSelProc(ClientData clientData);
typedef int Tk_OptionParseProc(ClientData clientData, Tcl_Interp *interp, Tk_Window tkwin, char *value, char *widgRec, int offset);
typedef char *Tk_OptionPrintProc(ClientData clientData, Tk_Window tkwin, char *widgRec, int offset, Tcl_FreeProc **freeProcPtr);
typedef void *Tk_PhotoHandle;
struct Tk_PhotoImageBlock {unsigned __int8 *pixelPtr;int width;int height;int pitch;int pixelSize;int offset[3];int reserved;};
struct Tk_PhotoImageFormat {char *name;Tk_ImageFileMatchProc *fileMatchProc;Tk_ImageStringMatchProc *stringMatchProc;Tk_ImageFileReadProc *fileReadProc;Tk_ImageStringReadProc *stringReadProc;Tk_ImageFileWriteProc *fileWriteProc;Tk_ImageStringWriteProc *stringWriteProc;struct Tk_PhotoImageFormat *nextPtr;};
typedef enum $F413FB130807CE2045080C3C00838D77 Tk_RestrictAction;
typedef Tk_RestrictAction Tk_RestrictProc(ClientData clientData, XEvent *eventPtr);
typedef int Tk_SelectionProc(ClientData clientData, int offset, char *buffer, int maxBytes);
typedef struct Tk_TextLayout_ *Tk_TextLayout;
typedef char *Tk_Uid;
typedef struct Tk_Window_ *Tk_Window;
typedef struct $FD02BCD3D36054250A4B3393D3E26B85 Visual;
typedef unsigned __int32 VisualID;
typedef XID Window;
typedef struct $B6E7D1C43482AAA4EB74B93FC1D2BC12 XActivateDeactivateEvent;
typedef XActivateDeactivateEvent XActivateEvent;
typedef struct $B6E7D1C43482AAA4EB74B93FC1D2BC12 XAnyEvent;
typedef struct $3ACF1F82BEC6DEE83FE33E625399BBD7 XArc;
typedef struct $DAE3AA21F13D443C5590C7BCADAB13AB XButtonEvent;
typedef XButtonEvent XButtonPressedEvent;
typedef XButtonEvent XButtonReleasedEvent;
typedef struct $691123D744001B8BE68B84780CEE447C XChar2b;
typedef struct $53996C97E395EF20FC508697C3EEF92C XCharStruct;
typedef struct $2B6C772F9B0F9D5573534694AD1B578D XCirculateEvent;
typedef struct $0F3BCE20E1217B8B60181F2FE2EFC047 XCirculateRequestEvent;
typedef struct $5C140DC956AB8D8D3A2E81F1CC511829 XClientMessageEvent;
typedef struct $86667C1762D2D3E70596A778BAFE84E4 XColor;
typedef struct $0B94EEFCBD76FB7E6E0B7C6C274F8F05 XColormapEvent;
typedef struct $CD460451436B92EA879ADEB542921FD3 XConfigureEvent;
typedef struct $705D0BEDE90FA70168249FE65D21D1D3 XConfigureRequestEvent;
typedef struct $85ADD90E39F3CB0C7E30B8F1E31A0398 XCreateWindowEvent;
typedef struct $C04761233C6B6D3917A9FB90584A60A5 XCrossingEvent;
typedef XActivateDeactivateEvent XDeactivateEvent;
typedef struct $4811DE8B61D0522D3363266E4D46EA9A XDestroyWindowEvent;
typedef union $D8231012D0728EC3472C30FA3109CEFA XEDataObject;
typedef XCrossingEvent XEnterWindowEvent;
typedef struct $94ACE20E5FEED38F4BC574FBC8AC4DA0 XErrorEvent;
typedef int (*XErrorHandler)(Display *, XErrorEvent *);
typedef union _XEvent XEvent;
typedef struct $44C0AE5AD18E7CD0D8F56B2EE020CE64 XExposeEvent;
typedef struct $BEA3E970906BDE5578391186783FC521 XExtCodes;
typedef struct _XExtData XExtData;
typedef struct $3AD4CBF69EE89480875180DC2A9357C1 XFocusChangeEvent;
typedef XFocusChangeEvent XFocusInEvent;
typedef XFocusChangeEvent XFocusOutEvent;
typedef struct $4928972DC66A9F7C89D199795A4AF315 XFontProp;
typedef struct _XFontSet *XFontSet;
typedef struct $6BA9BAD34CD581FCA2A7610248080448 XFontSetExtents;
typedef struct $B36C03EE0DB03800CDBEDA1CF8CFFD5F XFontStruct;
typedef struct $C459D5BB7F5319395AB9822D9CBB3596 XGCValues;
typedef struct $B55126CE33CB6542D7325DF23CE7DCCD XGraphicsExposeEvent;
typedef struct $2C3C200F8615C3857493506364E8C173 XGravityEvent;
typedef struct $4FFA9527088137D66D8D180D61C68358 XHostAddress;
typedef struct _XIC *XIC;
typedef unsigned __int32 XID;
typedef struct _XIM *XIM;
typedef struct $E1655291D14CE59495117F42FECB583D XIMCallback;
typedef enum $DB4B60BC3E5D47BB5823C48350265A79 XIMCaretDirection;
typedef enum $B64C39E2ADABB22C50C1D912F1D253CC XIMCaretStyle;
typedef unsigned __int32 XIMFeedback;
typedef struct _XIMPreeditCaretCallbackStruct XIMPreeditCaretCallbackStruct;
typedef struct _XIMPreeditDrawCallbackStruct XIMPreeditDrawCallbackStruct;
typedef void (*XIMProc)();
typedef enum $B539734676A04848B68060D6D483E0A0 XIMStatusDataType;
typedef struct _XIMStatusDrawCallbackStruct XIMStatusDrawCallbackStruct;
typedef unsigned __int32 XIMStyle;
typedef struct $DD1A60F664AD301361B26C5800787B5E XIMStyles;
typedef struct _XIMText XIMText;
typedef int (*XIOErrorHandler)(Display *);
typedef struct _XImage XImage;
typedef struct $F9A51504D7BB963C3403412F22DA7A8A XKeyEvent;
typedef XKeyEvent XKeyPressedEvent;
typedef XKeyEvent XKeyReleasedEvent;
typedef struct $BFB970BD49ED9B406D7CBF54A76D57DD XKeyboardControl;
typedef struct $E9E5673C887B806F32B41DE6D906B7FD XKeyboardState;
typedef struct $10F395C20BEC4113025BB1D0BA3DF492 XKeymapEvent;
typedef XCrossingEvent XLeaveWindowEvent;
typedef struct $C8CD1AC7BB16F52EEB6B35007FE94FA3 XMapEvent;
typedef struct $7FAD4DA9375019A5494A191BEF0405E8 XMapRequestEvent;
typedef struct $AC3C30478DB292C58361350945D68834 XMappingEvent;
typedef struct $64419251F3172C7227A52AC30EAD3C9D XModifierKeymap;
typedef struct $EF6E92C885F7EBA601BD227CAE25DC00 XMotionEvent;
typedef struct $B00CD904CB46A0C43826F3F9731A78AD XNoExposeEvent;
typedef struct $A06AF73261543B69A785AD9B5C737D11 XPixmapFormatValues;
typedef struct $13C78DD7EDF1CF1C4AE9B0D54E891AA2 XPoint;
typedef char *XPointer;
typedef XMotionEvent XPointerMovedEvent;
typedef struct $3BCCBA65A7EB0D2F6C33DC1ED4428B78 XPropertyEvent;
typedef struct $CA1CD5B08005403884A7641019451813 XRectangle;
typedef struct $29A84F0A94EF9B7976BAF082CF524F09 XReparentEvent;
typedef struct $ECAD306E641EDB2496D7F2C26F74F3C2 XResizeRequestEvent;
typedef struct $335EDB02744B103283B800FF919FC940 XSegment;
typedef struct $96F7C024A0E76E12CD4B29EEA702F0F5 XSelectionClearEvent;
typedef struct $65CB4B56B993AF892F37749A62A14B51 XSelectionEvent;
typedef struct $4D918DF5E629F4C28AE5A435B1E47B7A XSelectionRequestEvent;
typedef struct $2FFD57BA50D73951380BC0AC0294DF96 XSetWindowAttributes;
typedef struct $636E06EF14FC653C9FA755BCE21D4A3F XTextItem;
typedef struct $648D5B97A5A1D2D2729A4C51B6643734 XTextItem16;
typedef struct $58058F4C4926147A1BF935BBE1E04307 XTimeCoord;
typedef struct $6EA1208F05D799B306741A1D21B7D8A7 XUnmapEvent;
typedef void *XVaNestedList;
typedef struct $47AF4CF9A5C07F5C66C76738371ED04D XVirtualEvent;
typedef struct $C64C6FF65947C35F73E5DDA7D3ADCCD3 XVisibilityEvent;
typedef struct $67007EC0A0A5FA25533E9B447B17EF1A XWindowAttributes;
typedef struct $BA1C9873524F37DFA28FC6E8B2A0BC7B XWindowChanges;
typedef struct $9C224668B7E64BE6AE9499E6FD772938 XmbTextItem;
typedef struct $4D69B6347F056FE268056727CEA155AA XwcTextItem;
struct _Bigint {struct _Bigint *_next;int _k;int _maxwds;int _sign;int _wds;__ULong _x[1];};
typedef unsigned __int32 _G_clock_t;
typedef __int16 _G_dev_t;
typedef __int32 _G_fpos_t;
typedef unsigned __int16 _G_gid_t;
typedef unsigned __int32 _G_ino_t;
typedef __int16 _G_int16_t;
typedef int _G_int32_t;
typedef int _G_mode_t;
typedef unsigned __int16 _G_nlink_t;
typedef __int32 _G_off_t;
typedef int _G_pid_t;
typedef __int32 _G_ptrdiff_t;
typedef unsigned __int32 _G_sigset_t;
typedef unsigned __int32 _G_size_t;
typedef __int32 _G_ssize_t;
typedef __int32 _G_time_t;
typedef unsigned __int16 _G_uid_t;
typedef unsigned __int16 _G_uint16_t;
typedef unsigned int _G_uint32_t;
typedef void *_G_va_list;
typedef unsigned __int16 _G_wchar_t;
typedef unsigned int _G_wint_t;
struct _Tix_CmdInfo {int numSubCmds;int minargc;int maxargc;char *info;};
struct _Tix_SubCmdInfo {int namelen;char *name;int minargc;int maxargc;Tix_SubCmdProc proc;char *info;Tix_CheckArgvProc checkArgvProc;};
struct _XDisplay {XExtData *ext_data;struct _XDisplay::_XFreeFuncs *free_funcs;int fd;int conn_checker;int proto_major_version;int proto_minor_version;char *vendor;XID resource_base;XID resource_mask;XID resource_id;int resource_shift;XID (*resource_alloc)();int byte_order;int bitmap_unit;int bitmap_pad;int bitmap_bit_order;int nformats;ScreenFormat *pixmap_format;int vnumber;int release;struct _XDisplay::_XSQEvent *head;struct _XDisplay::_XSQEvent *tail;int qlen;unsigned __int32 request;char *last_req;char *buffer;char *bufptr;char *bufmax;unsigned int max_request_size;struct _XDisplay::_XrmHashBucketRec *db;int (*synchandler)();char *display_name;int default_screen;int nscreens;Screen *screens;unsigned __int32 motion_buffer;unsigned __int32 flags;int min_keycode;int max_keycode;KeySym *keysyms;XModifierKeymap *modifiermap;int keysyms_per_keycode;char *xdefaults;char *scratch_buffer;unsigned __int32 scratch_length;int ext_number;struct _XDisplay::_XExten *ext_procs;int (*event_vec[128])();int (*wire_vec[128])();KeySym lock_meaning;struct _XDisplay::_XLockInfo *lock;struct _XDisplay::_XInternalAsync *async_handlers;unsigned __int32 bigreq_size;struct _XDisplay::_XLockPtrs *lock_fns;struct _XDisplay::_XKeytrans *key_bindings;Font cursor_font;struct _XDisplay::_XDisplayAtoms *atoms;unsigned int mode_switch;struct _XDisplay::_XContextDB *context_db;int (**error_vec)();struct _XDisplay::$40E717ABED307E15FC65B9096F5C7074 cms;struct _XDisplay::_XIMFilter *im_filters;struct _XDisplay::_XSQEvent *qfree;unsigned __int32 next_event_serial_num;int (*savedsynchandler)();};
struct _XDisplay::$40E717ABED307E15FC65B9096F5C7074 {XPointer defaultCCCs;XPointer clientCmaps;XPointer perVisualIntensityMaps;};
union _XEvent {int type;XAnyEvent xany;XKeyEvent xkey;XButtonEvent xbutton;XMotionEvent xmotion;XCrossingEvent xcrossing;XFocusChangeEvent xfocus;XExposeEvent xexpose;XGraphicsExposeEvent xgraphicsexpose;XNoExposeEvent xnoexpose;XVisibilityEvent xvisibility;XCreateWindowEvent xcreatewindow;XDestroyWindowEvent xdestroywindow;XUnmapEvent xunmap;XMapEvent xmap;XMapRequestEvent xmaprequest;XReparentEvent xreparent;XConfigureEvent xconfigure;XGravityEvent xgravity;XResizeRequestEvent xresizerequest;XConfigureRequestEvent xconfigurerequest;XCirculateEvent xcirculate;XCirculateRequestEvent xcirculaterequest;XPropertyEvent xproperty;XSelectionClearEvent xselectionclear;XSelectionRequestEvent xselectionrequest;XSelectionEvent xselection;XColormapEvent xcolormap;XClientMessageEvent xclient;XMappingEvent xmapping;XErrorEvent xerror;XKeymapEvent xkeymap;__int32 pad[24];};
struct _XExtData {int number;struct _XExtData *next;int (*free_private)();XPointer private_data;};
struct _XIMPreeditCaretCallbackStruct {int position;XIMCaretDirection direction;XIMCaretStyle style;};
struct _XIMPreeditDrawCallbackStruct {int caret;int chg_first;int chg_length;XIMText *text;};
struct _XIMStatusDrawCallbackStruct {XIMStatusDataType type;union _XIMStatusDrawCallbackStruct::$D9A2F521BD917AA4B9408853DE8DEFA7 data;};
union _XIMStatusDrawCallbackStruct::$D9A2F521BD917AA4B9408853DE8DEFA7 {XIMText *text;Pixmap bitmap;};
struct _XIMText {unsigned __int16 length;XIMFeedback *feedback;int encoding_is_wchar;union _XIMText::$8281806D2C2C5E9220BA18F83AF5F330 string;};
union _XIMText::$8281806D2C2C5E9220BA18F83AF5F330 {char *multi_byte;wchar_t *wide_char;};
struct _XImage {int width;int height;int xoffset;int format;char *data;int byte_order;int bitmap_unit;int bitmap_bit_order;int bitmap_pad;int depth;int bytes_per_line;int bits_per_pixel;unsigned __int32 red_mask;unsigned __int32 green_mask;unsigned __int32 blue_mask;XPointer obdata;struct _XImage::funcs f;};
struct _XImage::funcs {struct _XImage *(*create_image)();int (*destroy_image)(struct _XImage *);unsigned __int32 (*get_pixel)(struct _XImage *, int, int);int (*put_pixel)(struct _XImage *, int, int, unsigned __int32);struct _XImage *(*sub_image)(struct _XImage *, int, int, unsigned int, unsigned int);int (*add_pixel)(struct _XImage *, __int32);};
typedef __uint32_t __ULong;
union __dmath {__uint32_t i[2];double d;};
enum __fdlibm_version {__fdlibm_ieee = 0xFFFFFFFF,__fdlibm_svid = 0x0,__fdlibm_xopen = 0x1,__fdlibm_posix = 0x2,};
typedef union $3F9D9DCE4570D1C9BB401DE985640105 __ieee_double_shape_type;
typedef union $010F26E547E20D9A1DC4B355F5175C2E __ieee_float_shape_type;
typedef int __int32_t;
struct __oldtermios {otcflag_t c_iflag;otcflag_t c_oflag;otcflag_t c_cflag;otcflag_t c_lflag;char c_line;cc_t c_cc[18];ospeed_t c_ispeed;ospeed_t c_ospeed;};
typedef signed __int16 __s16;
typedef signed int __s32;
typedef signed __int8 __s8;
struct __sFILE {unsigned __int8 *_p;int _r;int _w;__int16 _flags;__int16 _file;struct __sbuf _bf;int _lbfsize;void *_cookie;int (*_read)(void *cookie, char *buf, int n);int (*_write)(void *cookie, const char *buf, int n);_fpos_t (*_seek)(void *cookie, _fpos_t offset, int whence);int (*_close)(void *cookie);struct __sbuf _ub;unsigned __int8 *_up;int _ur;unsigned __int8 _ubuf[3];unsigned __int8 _nbuf[1];struct __sbuf _lb;int _blksize;int _offset;struct __sFILE::_reent *_data;};
struct __sbuf {unsigned __int8 *_base;int _size;};
typedef unsigned __int16 __u16;
typedef unsigned int __u32;
typedef unsigned __int8 __u8;
typedef unsigned int __uint32_t;
struct _atexit {struct _atexit *_next;int _ind;void (*_fns[32])(void);};
struct _bfd {const char *filename;const struct _bfd::bfd_target *xvec;void *iostream;boolean cacheable;boolean target_defaulted;struct _bfd *lru_prev;struct _bfd *lru_next;file_ptr where;boolean opened_once;boolean mtime_set;__int32 mtime;int ifd;bfd_format format;enum _bfd::bfd_direction direction;flagword flags;file_ptr origin;boolean output_has_begun;struct sec *sections;unsigned int section_count;bfd_vma start_address;unsigned int symcount;struct symbol_cache_entry **outsymbols;const struct bfd_arch_info *arch_info;void *arelt_data;struct _bfd *my_archive;struct _bfd *next;struct _bfd *archive_head;boolean has_armap;struct _bfd *link_next;int archive_pass;union _bfd::$EA0286C9E3DE655F29EF612C11797A09 tdata;void *usrdata;void *memory;};
union _bfd::$EA0286C9E3DE655F29EF612C11797A09 {struct _bfd::$EA0286C9E3DE655F29EF612C11797A09::aout_data_struct *aout_data;struct _bfd::$EA0286C9E3DE655F29EF612C11797A09::artdata *aout_ar_data;struct _bfd::$EA0286C9E3DE655F29EF612C11797A09::_oasys_data *oasys_obj_data;struct _bfd::$EA0286C9E3DE655F29EF612C11797A09::_oasys_ar_data *oasys_ar_data;struct _bfd::$EA0286C9E3DE655F29EF612C11797A09::coff_tdata *coff_obj_data;struct _bfd::$EA0286C9E3DE655F29EF612C11797A09::pe_tdata *pe_obj_data;struct _bfd::$EA0286C9E3DE655F29EF612C11797A09::xcoff_tdata *xcoff_obj_data;struct _bfd::$EA0286C9E3DE655F29EF612C11797A09::ecoff_tdata *ecoff_obj_data;struct _bfd::$EA0286C9E3DE655F29EF612C11797A09::ieee_data_struct *ieee_data;struct _bfd::$EA0286C9E3DE655F29EF612C11797A09::ieee_ar_data_struct *ieee_ar_data;struct _bfd::$EA0286C9E3DE655F29EF612C11797A09::srec_data_struct *srec_data;struct _bfd::$EA0286C9E3DE655F29EF612C11797A09::ihex_data_struct *ihex_data;struct _bfd::$EA0286C9E3DE655F29EF612C11797A09::tekhex_data_struct *tekhex_data;struct _bfd::$EA0286C9E3DE655F29EF612C11797A09::elf_obj_tdata *elf_obj_data;struct _bfd::$EA0286C9E3DE655F29EF612C11797A09::nlm_obj_tdata *nlm_obj_data;struct _bfd::$EA0286C9E3DE655F29EF612C11797A09::bout_data_struct *bout_data;struct _bfd::$EA0286C9E3DE655F29EF612C11797A09::sun_core_struct *sun_core_data;struct _bfd::$EA0286C9E3DE655F29EF612C11797A09::sco5_core_struct *sco5_core_data;struct _bfd::$EA0286C9E3DE655F29EF612C11797A09::trad_core_struct *trad_core_data;struct _bfd::$EA0286C9E3DE655F29EF612C11797A09::som_data_struct *som_data;struct _bfd::$EA0286C9E3DE655F29EF612C11797A09::hpux_core_struct *hpux_core_data;struct _bfd::$EA0286C9E3DE655F29EF612C11797A09::hppabsd_core_struct *hppabsd_core_data;struct _bfd::$EA0286C9E3DE655F29EF612C11797A09::sgi_core_struct *sgi_core_data;struct _bfd::$EA0286C9E3DE655F29EF612C11797A09::lynx_core_struct *lynx_core_data;struct _bfd::$EA0286C9E3DE655F29EF612C11797A09::osf_core_struct *osf_core_data;struct _bfd::$EA0286C9E3DE655F29EF612C11797A09::cisco_core_struct *cisco_core_data;struct _bfd::$EA0286C9E3DE655F29EF612C11797A09::versados_data_struct *versados_data;struct _bfd::$EA0286C9E3DE655F29EF612C11797A09::netbsd_core_struct *netbsd_core_data;void *any;};
enum _bfd::bfd_direction {no_direction = 0x0,read_direction = 0x1,write_direction = 0x2,both_direction = 0x3,};
typedef struct bfd_link_info _bfd_link_info;
struct _bfd_window {void *data;bfd_size_type size;struct _bfd_window_internal *i;};
struct _bfd_window_internal;
typedef __int32 _fpos_t;
struct _glue {struct _glue *_next;int _niobs;struct _glue::__sFILE *_iobs;};
typedef __int32 _off_t;
struct _reent {int _errno;struct __sFILE *_stdin;struct __sFILE *_stdout;struct __sFILE *_stderr;int _inc;char _emergency[25];int _current_category;const char *_current_locale;int __sdidinit;void (*__cleanup)(struct _reent *);struct _Bigint *_result;int _result_k;struct _Bigint *_p5s;struct _Bigint **_freelist;int _cvtlen;char *_cvtbuf;union _reent::$86B6AAFCC3A560694C605557E707E6BE _new;struct _atexit *_atexit;struct _atexit _atexit0;void (**_sig_func)(int);struct _glue __sglue;struct __sFILE __sf[3];};
union _reent::$86B6AAFCC3A560694C605557E707E6BE {struct _reent::$86B6AAFCC3A560694C605557E707E6BE::$571F2125BC9AA5087DD4C4D164151B9B _reent;struct _reent::$86B6AAFCC3A560694C605557E707E6BE::$E1F36E786F227034E18EC0BAF8100EE8 _unused;};
struct _reent::$86B6AAFCC3A560694C605557E707E6BE::$571F2125BC9AA5087DD4C4D164151B9B {unsigned int _rand_next;char *_strtok_last;char _asctime_buf[26];struct tm _localtime_buf;int _gamma_signgam;};
struct _reent::$86B6AAFCC3A560694C605557E707E6BE::$E1F36E786F227034E18EC0BAF8100EE8 {unsigned __int8 *_nextf[30];unsigned int _nmalloc[30];};
typedef void (*_sig_func_ptr)(int);
typedef __int32 _ssize_t;
struct _symbol_info {symvalue value;char type;const char *name;unsigned __int8 stab_type;char stab_other;__int16 stab_desc;const char *stab_name;};
struct _types_fd_set {fd_mask fds_bits[2];};
typedef struct lineno_cache_entry alent;
typedef voidpf (*alloc_func)(voidpf opaque, uInt items, uInt size);
struct ar_hdr {char ar_name[16];char ar_date[12];char ar_uid[6];char ar_gid[6];char ar_mode[8];char ar_size[10];char ar_fmag[2];};
typedef struct reloc_cache_entry arelent;
typedef struct relent_chain arelent_chain;
typedef struct sec asection;
typedef struct symbol_cache_entry asymbol;
typedef struct _bfd bfd;
struct bfd_arch_info {int bits_per_word;int bits_per_address;int bits_per_byte;enum bfd_architecture arch;unsigned __int32 mach;const char *arch_name;const char *printable_name;unsigned int section_align_power;boolean the_default;const struct bfd_arch_info *(*compatible)(const struct bfd_arch_info *a, const struct bfd_arch_info *b);boolean (*scan)(const struct bfd_arch_info *, const char *);const struct bfd_arch_info *next;};
typedef struct bfd_arch_info bfd_arch_info_type;
enum bfd_architecture {bfd_arch_unknown = 0x0,bfd_arch_obscure = 0x1,bfd_arch_m68k = 0x2,bfd_arch_vax = 0x3,bfd_arch_i960 = 0x4,bfd_arch_a29k = 0x5,bfd_arch_sparc = 0x6,bfd_arch_mips = 0x7,bfd_arch_i386 = 0x8,bfd_arch_we32k = 0x9,bfd_arch_tahoe = 0xA,bfd_arch_i860 = 0xB,bfd_arch_i370 = 0xC,bfd_arch_romp = 0xD,bfd_arch_alliant = 0xE,bfd_arch_convex = 0xF,bfd_arch_m88k = 0x10,bfd_arch_pyramid = 0x11,bfd_arch_h8300 = 0x12,bfd_arch_powerpc = 0x13,bfd_arch_rs6000 = 0x14,bfd_arch_hppa = 0x15,bfd_arch_d10v = 0x16,bfd_arch_d30v = 0x17,bfd_arch_z8k = 0x18,bfd_arch_h8500 = 0x19,bfd_arch_sh = 0x1A,bfd_arch_alpha = 0x1B,bfd_arch_arm = 0x1C,bfd_arch_ns32k = 0x1D,bfd_arch_w65 = 0x1E,bfd_arch_tic30 = 0x1F,bfd_arch_tic54x = 0x20,bfd_arch_tic80 = 0x21,bfd_arch_v850 = 0x22,bfd_arch_arc = 0x23,bfd_arch_m32r = 0x24,bfd_arch_mn10200 = 0x25,bfd_arch_mn10300 = 0x26,bfd_arch_fr30 = 0x27,bfd_arch_mcore = 0x28,bfd_arch_ia64 = 0x29,bfd_arch_pj = 0x2A,bfd_arch_avr = 0x2B,bfd_arch_last = 0x2C,};
enum bfd_boolean {false = 0x0,true = 0x1,};
typedef unsigned __int8 bfd_byte;
struct bfd_comdat_info {const char *name;__int32 symbol;struct bfd_comdat_info::sec *sec;};
struct bfd_elf_version_deps {struct bfd_elf_version_deps *next;struct bfd_elf_version_tree *version_needed;};
struct bfd_elf_version_expr {struct bfd_elf_version_expr *next;const char *pattern;int (*match)(struct bfd_elf_version_expr *, const char *);};
struct bfd_elf_version_tree {struct bfd_elf_version_tree *next;const char *name;unsigned int vernum;struct bfd_elf_version_expr *globals;struct bfd_elf_version_expr *locals;struct bfd_elf_version_deps *deps;unsigned int name_indx;int used;};
enum bfd_endian {BFD_ENDIAN_BIG = 0x0,BFD_ENDIAN_LITTLE = 0x1,BFD_ENDIAN_UNKNOWN = 0x2,};
enum bfd_error {bfd_error_no_error = 0x0,bfd_error_system_call = 0x1,bfd_error_invalid_target = 0x2,bfd_error_wrong_format = 0x3,bfd_error_invalid_operation = 0x4,bfd_error_no_memory = 0x5,bfd_error_no_symbols = 0x6,bfd_error_no_armap = 0x7,bfd_error_no_more_archived_files = 0x8,bfd_error_malformed_archive = 0x9,bfd_error_file_not_recognized = 0xA,bfd_error_file_ambiguously_recognized = 0xB,bfd_error_no_contents = 0xC,bfd_error_nonrepresentable_section = 0xD,bfd_error_no_debug_section = 0xE,bfd_error_bad_value = 0xF,bfd_error_file_truncated = 0x10,bfd_error_file_too_big = 0x11,bfd_error_invalid_error_code = 0x12,};
typedef void (*bfd_error_handler_type)(const char *, ...);
typedef enum bfd_error bfd_error_type;
enum bfd_flavour {bfd_target_unknown_flavour = 0x0,bfd_target_aout_flavour = 0x1,bfd_target_coff_flavour = 0x2,bfd_target_ecoff_flavour = 0x3,bfd_target_elf_flavour = 0x4,bfd_target_ieee_flavour = 0x5,bfd_target_nlm_flavour = 0x6,bfd_target_oasys_flavour = 0x7,bfd_target_tekhex_flavour = 0x8,bfd_target_srec_flavour = 0x9,bfd_target_ihex_flavour = 0xA,bfd_target_som_flavour = 0xB,bfd_target_os9k_flavour = 0xC,bfd_target_versados_flavour = 0xD,bfd_target_msdos_flavour = 0xE,bfd_target_ovax_flavour = 0xF,bfd_target_evax_flavour = 0x10,};
enum bfd_format {bfd_unknown = 0x0,bfd_object = 0x1,bfd_archive = 0x2,bfd_core = 0x3,bfd_type_end = 0x4,};
struct bfd_hash_entry {struct bfd_hash_entry *next;const char *string;unsigned __int32 hash;};
struct bfd_hash_table {struct bfd_hash_entry **table;unsigned int size;struct bfd_hash_entry *(*newfunc)(struct bfd_hash_entry *, struct bfd_hash_table *, const char *);void *memory;};
struct bfd_link_callbacks {boolean (*add_archive_element)(struct bfd_link_info *, bfd *abfd, const char *name);boolean (*multiple_definition)(struct bfd_link_info *, const char *name, bfd *obfd, asection *osec, bfd_vma oval, bfd *nbfd, asection *nsec, bfd_vma nval);boolean (*multiple_common)(struct bfd_link_info *, const char *name, bfd *obfd, enum bfd_link_hash_type otype, bfd_vma osize, bfd *nbfd, enum bfd_link_hash_type ntype, bfd_vma nsize);boolean (*add_to_set)(struct bfd_link_info *, struct bfd_link_hash_entry *entry, bfd_reloc_code_real_type reloc, bfd *abfd, asection *sec, bfd_vma value);boolean (*constructor)(struct bfd_link_info *, boolean constructor, const char *name, bfd *abfd, asection *sec, bfd_vma value);boolean (*warning)(struct bfd_link_info *, const char *warning, const char *symbol, bfd *abfd, asection *section, bfd_vma address);boolean (*undefined_symbol)(struct bfd_link_info *, const char *name, bfd *abfd, asection *section, bfd_vma address, boolean fatal);boolean (*reloc_overflow)(struct bfd_link_info *, const char *name, const char *reloc_name, bfd_vma addend, bfd *abfd, asection *section, bfd_vma address);boolean (*reloc_dangerous)(struct bfd_link_info *, const char *message, bfd *abfd, asection *section, bfd_vma address);boolean (*unattached_reloc)(struct bfd_link_info *, const char *name, bfd *abfd, asection *section, bfd_vma address);boolean (*notice)(struct bfd_link_info *, const char *name, bfd *abfd, asection *section, bfd_vma address);};
enum bfd_link_discard {discard_none = 0x0,discard_l = 0x1,discard_all = 0x2,};
struct bfd_link_hash_entry {struct bfd_hash_entry root;enum bfd_link_hash_type type;struct bfd_link_hash_entry *next;union bfd_link_hash_entry::$2DE1D8C7A97069AB9B4082F7F3A8555E u;};
union bfd_link_hash_entry::$2DE1D8C7A97069AB9B4082F7F3A8555E {struct bfd_link_hash_entry::$2DE1D8C7A97069AB9B4082F7F3A8555E::$1ADB066DD678F2136218A187EC87FF85 undef;struct bfd_link_hash_entry::$2DE1D8C7A97069AB9B4082F7F3A8555E::$7997A79FD4A56ECEC67DDB1075675E5D def;struct bfd_link_hash_entry::$2DE1D8C7A97069AB9B4082F7F3A8555E::$739778AE401042B4A1D81FDF963C2BF8 i;struct bfd_link_hash_entry::$2DE1D8C7A97069AB9B4082F7F3A8555E::$C1BF8984E6DA1F78690EAB93CC81E9DD c;};
struct bfd_link_hash_entry::$2DE1D8C7A97069AB9B4082F7F3A8555E::$1ADB066DD678F2136218A187EC87FF85 {bfd *abfd;};
struct bfd_link_hash_entry::$2DE1D8C7A97069AB9B4082F7F3A8555E::$739778AE401042B4A1D81FDF963C2BF8 {struct bfd_link_hash_entry *link;const char *warning;};
struct bfd_link_hash_entry::$2DE1D8C7A97069AB9B4082F7F3A8555E::$7997A79FD4A56ECEC67DDB1075675E5D {bfd_vma value;asection *section;};
struct bfd_link_hash_entry::$2DE1D8C7A97069AB9B4082F7F3A8555E::$C1BF8984E6DA1F78690EAB93CC81E9DD {bfd_size_type size;struct bfd_link_hash_entry::$::$C1BF8984E6DA1F78690EAB93CC81E9DD::bfd_link_hash_common_entry *p;};
struct bfd_link_hash_entry::$::$C1BF8984E6DA1F78690EAB93CC81E9DD::bfd_link_hash_common_entry {unsigned int alignment_power;asection *section;};
struct bfd_link_hash_table {struct bfd_hash_table table;const bfd_target *creator;struct bfd_link_hash_entry *undefs;struct bfd_link_hash_entry *undefs_tail;};
enum bfd_link_hash_type {bfd_link_hash_new = 0x0,bfd_link_hash_undefined = 0x1,bfd_link_hash_undefweak = 0x2,bfd_link_hash_defined = 0x3,bfd_link_hash_defweak = 0x4,bfd_link_hash_common = 0x5,bfd_link_hash_indirect = 0x6,bfd_link_hash_warning = 0x7,};
struct bfd_link_info {const struct bfd_link_info::bfd_link_callbacks *callbacks;boolean relocateable;boolean emitrelocations;boolean task_link;boolean shared;boolean symbolic;boolean static_link;boolean traditional_format;boolean optimize;boolean no_undefined;enum bfd_link_strip strip;enum bfd_link_discard discard;boolean keep_memory;bfd *input_bfds;asection *create_object_symbols_section;struct bfd_link_hash_table *hash;struct bfd_hash_table *keep_hash;boolean notice_all;struct bfd_hash_table *notice_hash;struct bfd_hash_table *wrap_hash;void *base_file;int mpc860c0;const char *init_function;const char *fini_function;};
struct bfd_link_needed_list {struct bfd_link_needed_list *next;bfd *by;const char *name;};
struct bfd_link_order {struct bfd_link_order *next;enum bfd_link_order_type type;bfd_vma offset;bfd_size_type size;union bfd_link_order::$2BB010651C45E09C223C5AAB039696D0 u;};
union bfd_link_order::$2BB010651C45E09C223C5AAB039696D0 {struct bfd_link_order::$2BB010651C45E09C223C5AAB039696D0::$20472B6430190B13548BE45EDDAD6B8B indirect;struct bfd_link_order::$2BB010651C45E09C223C5AAB039696D0::$B57F59D398145097F81AD3202A6602D5 fill;struct bfd_link_order::$2BB010651C45E09C223C5AAB039696D0::$4E37357BA75158182C6C9FE7D3AF1690 data;struct bfd_link_order::$2BB010651C45E09C223C5AAB039696D0::$16DCDB45A2AC10EAA5748BD0B35BC485 reloc;};
struct bfd_link_order::$2BB010651C45E09C223C5AAB039696D0::$16DCDB45A2AC10EAA5748BD0B35BC485 {struct bfd_link_order::$::$16DCDB45A2AC10EAA5748BD0B35BC485::bfd_link_order_reloc *p;};
struct bfd_link_order::$2BB010651C45E09C223C5AAB039696D0::$20472B6430190B13548BE45EDDAD6B8B {asection *section;};
struct bfd_link_order::$2BB010651C45E09C223C5AAB039696D0::$4E37357BA75158182C6C9FE7D3AF1690 {bfd_byte *contents;};
struct bfd_link_order::$2BB010651C45E09C223C5AAB039696D0::$B57F59D398145097F81AD3202A6602D5 {unsigned int value;};
struct bfd_link_order_reloc {bfd_reloc_code_real_type reloc;union bfd_link_order_reloc::$B1652E1B2D42B7B6BC287CA32D4604B8 u;bfd_vma addend;};
union bfd_link_order_reloc::$B1652E1B2D42B7B6BC287CA32D4604B8 {asection *section;const char *name;};
enum bfd_link_order_type {bfd_undefined_link_order = 0x0,bfd_indirect_link_order = 0x1,bfd_fill_link_order = 0x2,bfd_data_link_order = 0x3,bfd_section_reloc_link_order = 0x4,bfd_symbol_reloc_link_order = 0x5,};
enum bfd_link_strip {strip_none = 0x0,strip_debugger = 0x1,strip_some = 0x2,strip_all = 0x3,};
enum bfd_print_symbol {bfd_print_symbol_name = 0x0,bfd_print_symbol_more = 0x1,bfd_print_symbol_all = 0x2,};
typedef enum bfd_print_symbol bfd_print_symbol_type;
enum bfd_reloc_code_real {_dummy_first_bfd_reloc_code_real = 0x0,BFD_RELOC_64 = 0x1,BFD_RELOC_32 = 0x2,BFD_RELOC_26 = 0x3,BFD_RELOC_24 = 0x4,BFD_RELOC_16 = 0x5,BFD_RELOC_14 = 0x6,BFD_RELOC_8 = 0x7,BFD_RELOC_64_PCREL = 0x8,BFD_RELOC_32_PCREL = 0x9,BFD_RELOC_24_PCREL = 0xA,BFD_RELOC_16_PCREL = 0xB,BFD_RELOC_12_PCREL = 0xC,BFD_RELOC_8_PCREL = 0xD,BFD_RELOC_32_GOT_PCREL = 0xE,BFD_RELOC_16_GOT_PCREL = 0xF,BFD_RELOC_8_GOT_PCREL = 0x10,BFD_RELOC_32_GOTOFF = 0x11,BFD_RELOC_16_GOTOFF = 0x12,BFD_RELOC_LO16_GOTOFF = 0x13,BFD_RELOC_HI16_GOTOFF = 0x14,BFD_RELOC_HI16_S_GOTOFF = 0x15,BFD_RELOC_8_GOTOFF = 0x16,BFD_RELOC_32_PLT_PCREL = 0x17,BFD_RELOC_24_PLT_PCREL = 0x18,BFD_RELOC_16_PLT_PCREL = 0x19,BFD_RELOC_8_PLT_PCREL = 0x1A,BFD_RELOC_32_PLTOFF = 0x1B,BFD_RELOC_16_PLTOFF = 0x1C,BFD_RELOC_LO16_PLTOFF = 0x1D,BFD_RELOC_HI16_PLTOFF = 0x1E,BFD_RELOC_HI16_S_PLTOFF = 0x1F,BFD_RELOC_8_PLTOFF = 0x20,BFD_RELOC_68K_GLOB_DAT = 0x21,BFD_RELOC_68K_JMP_SLOT = 0x22,BFD_RELOC_68K_RELATIVE = 0x23,BFD_RELOC_32_BASEREL = 0x24,BFD_RELOC_16_BASEREL = 0x25,BFD_RELOC_LO16_BASEREL = 0x26,BFD_RELOC_HI16_BASEREL = 0x27,BFD_RELOC_HI16_S_BASEREL = 0x28,BFD_RELOC_8_BASEREL = 0x29,BFD_RELOC_RVA = 0x2A,BFD_RELOC_8_FFnn = 0x2B,BFD_RELOC_32_PCREL_S2 = 0x2C,BFD_RELOC_16_PCREL_S2 = 0x2D,BFD_RELOC_23_PCREL_S2 = 0x2E,BFD_RELOC_HI22 = 0x2F,BFD_RELOC_LO10 = 0x30,BFD_RELOC_GPREL16 = 0x31,BFD_RELOC_GPREL32 = 0x32,BFD_RELOC_I960_CALLJ = 0x33,BFD_RELOC_NONE = 0x34,BFD_RELOC_SPARC_WDISP22 = 0x35,BFD_RELOC_SPARC22 = 0x36,BFD_RELOC_SPARC13 = 0x37,BFD_RELOC_SPARC_GOT10 = 0x38,BFD_RELOC_SPARC_GOT13 = 0x39,BFD_RELOC_SPARC_GOT22 = 0x3A,BFD_RELOC_SPARC_PC10 = 0x3B,BFD_RELOC_SPARC_PC22 = 0x3C,BFD_RELOC_SPARC_WPLT30 = 0x3D,BFD_RELOC_SPARC_COPY = 0x3E,BFD_RELOC_SPARC_GLOB_DAT = 0x3F,BFD_RELOC_SPARC_JMP_SLOT = 0x40,BFD_RELOC_SPARC_RELATIVE = 0x41,BFD_RELOC_SPARC_UA32 = 0x42,BFD_RELOC_SPARC_BASE13 = 0x43,BFD_RELOC_SPARC_BASE22 = 0x44,BFD_RELOC_SPARC_10 = 0x45,BFD_RELOC_SPARC_11 = 0x46,BFD_RELOC_SPARC_OLO10 = 0x47,BFD_RELOC_SPARC_HH22 = 0x48,BFD_RELOC_SPARC_HM10 = 0x49,BFD_RELOC_SPARC_LM22 = 0x4A,BFD_RELOC_SPARC_PC_HH22 = 0x4B,BFD_RELOC_SPARC_PC_HM10 = 0x4C,BFD_RELOC_SPARC_PC_LM22 = 0x4D,BFD_RELOC_SPARC_WDISP16 = 0x4E,BFD_RELOC_SPARC_WDISP19 = 0x4F,BFD_RELOC_SPARC_7 = 0x50,BFD_RELOC_SPARC_6 = 0x51,BFD_RELOC_SPARC_5 = 0x52,BFD_RELOC_SPARC_PLT64 = 0x53,BFD_RELOC_SPARC_HIX22 = 0x54,BFD_RELOC_SPARC_LOX10 = 0x55,BFD_RELOC_SPARC_H44 = 0x56,BFD_RELOC_SPARC_M44 = 0x57,BFD_RELOC_SPARC_L44 = 0x58,BFD_RELOC_SPARC_REGISTER = 0x59,BFD_RELOC_SPARC_REV32 = 0x5A,BFD_RELOC_ALPHA_GPDISP_HI16 = 0x5B,BFD_RELOC_ALPHA_GPDISP_LO16 = 0x5C,BFD_RELOC_ALPHA_GPDISP = 0x5D,BFD_RELOC_ALPHA_LITERAL = 0x5E,BFD_RELOC_ALPHA_ELF_LITERAL = 0x5F,BFD_RELOC_ALPHA_LITUSE = 0x60,BFD_RELOC_ALPHA_USER_LITERAL = 0x61,BFD_RELOC_ALPHA_USER_LITUSE_BASE = 0x62,BFD_RELOC_ALPHA_USER_LITUSE_BYTOFF = 0x63,BFD_RELOC_ALPHA_USER_LITUSE_JSR = 0x64,BFD_RELOC_ALPHA_USER_GPDISP = 0x65,BFD_RELOC_ALPHA_USER_GPRELHIGH = 0x66,BFD_RELOC_ALPHA_USER_GPRELLOW = 0x67,BFD_RELOC_ALPHA_HINT = 0x68,BFD_RELOC_ALPHA_LINKAGE = 0x69,BFD_RELOC_ALPHA_CODEADDR = 0x6A,BFD_RELOC_MIPS_JMP = 0x6B,BFD_RELOC_MIPS16_JMP = 0x6C,BFD_RELOC_MIPS16_GPREL = 0x6D,BFD_RELOC_HI16 = 0x6E,BFD_RELOC_HI16_S = 0x6F,BFD_RELOC_LO16 = 0x70,BFD_RELOC_PCREL_HI16_S = 0x71,BFD_RELOC_PCREL_LO16 = 0x72,BFD_RELOC_MIPS_LITERAL = 0x73,BFD_RELOC_MIPS_GOT16 = 0x74,BFD_RELOC_MIPS_CALL16 = 0x75,BFD_RELOC_MIPS_GOT_HI16 = 0x76,BFD_RELOC_MIPS_GOT_LO16 = 0x77,BFD_RELOC_MIPS_CALL_HI16 = 0x78,BFD_RELOC_MIPS_CALL_LO16 = 0x79,BFD_RELOC_MIPS_SUB = 0x7A,BFD_RELOC_MIPS_GOT_PAGE = 0x7B,BFD_RELOC_MIPS_GOT_OFST = 0x7C,BFD_RELOC_MIPS_GOT_DISP = 0x7D,BFD_RELOC_386_GOT32 = 0x7E,BFD_RELOC_386_PLT32 = 0x7F,BFD_RELOC_386_COPY = 0x80,BFD_RELOC_386_GLOB_DAT = 0x81,BFD_RELOC_386_JUMP_SLOT = 0x82,BFD_RELOC_386_RELATIVE = 0x83,BFD_RELOC_386_GOTOFF = 0x84,BFD_RELOC_386_GOTPC = 0x85,BFD_RELOC_NS32K_IMM_8 = 0x86,BFD_RELOC_NS32K_IMM_16 = 0x87,BFD_RELOC_NS32K_IMM_32 = 0x88,BFD_RELOC_NS32K_IMM_8_PCREL = 0x89,BFD_RELOC_NS32K_IMM_16_PCREL = 0x8A,BFD_RELOC_NS32K_IMM_32_PCREL = 0x8B,BFD_RELOC_NS32K_DISP_8 = 0x8C,BFD_RELOC_NS32K_DISP_16 = 0x8D,BFD_RELOC_NS32K_DISP_32 = 0x8E,BFD_RELOC_NS32K_DISP_8_PCREL = 0x8F,BFD_RELOC_NS32K_DISP_16_PCREL = 0x90,BFD_RELOC_NS32K_DISP_32_PCREL = 0x91,BFD_RELOC_PJ_CODE_HI16 = 0x92,BFD_RELOC_PJ_CODE_LO16 = 0x93,BFD_RELOC_PJ_CODE_DIR16 = 0x94,BFD_RELOC_PJ_CODE_DIR32 = 0x95,BFD_RELOC_PJ_CODE_REL16 = 0x96,BFD_RELOC_PJ_CODE_REL32 = 0x97,BFD_RELOC_PPC_B26 = 0x98,BFD_RELOC_PPC_BA26 = 0x99,BFD_RELOC_PPC_TOC16 = 0x9A,BFD_RELOC_PPC_B16 = 0x9B,BFD_RELOC_PPC_B16_BRTAKEN = 0x9C,BFD_RELOC_PPC_B16_BRNTAKEN = 0x9D,BFD_RELOC_PPC_BA16 = 0x9E,BFD_RELOC_PPC_BA16_BRTAKEN = 0x9F,BFD_RELOC_PPC_BA16_BRNTAKEN = 0xA0,BFD_RELOC_PPC_COPY = 0xA1,BFD_RELOC_PPC_GLOB_DAT = 0xA2,BFD_RELOC_PPC_JMP_SLOT = 0xA3,BFD_RELOC_PPC_RELATIVE = 0xA4,BFD_RELOC_PPC_LOCAL24PC = 0xA5,BFD_RELOC_PPC_EMB_NADDR32 = 0xA6,BFD_RELOC_PPC_EMB_NADDR16 = 0xA7,BFD_RELOC_PPC_EMB_NADDR16_LO = 0xA8,BFD_RELOC_PPC_EMB_NADDR16_HI = 0xA9,BFD_RELOC_PPC_EMB_NADDR16_HA = 0xAA,BFD_RELOC_PPC_EMB_SDAI16 = 0xAB,BFD_RELOC_PPC_EMB_SDA2I16 = 0xAC,BFD_RELOC_PPC_EMB_SDA2REL = 0xAD,BFD_RELOC_PPC_EMB_SDA21 = 0xAE,BFD_RELOC_PPC_EMB_MRKREF = 0xAF,BFD_RELOC_PPC_EMB_RELSEC16 = 0xB0,BFD_RELOC_PPC_EMB_RELST_LO = 0xB1,BFD_RELOC_PPC_EMB_RELST_HI = 0xB2,BFD_RELOC_PPC_EMB_RELST_HA = 0xB3,BFD_RELOC_PPC_EMB_BIT_FLD = 0xB4,BFD_RELOC_PPC_EMB_RELSDA = 0xB5,BFD_RELOC_I370_D12 = 0xB6,BFD_RELOC_CTOR = 0xB7,BFD_RELOC_ARM_PCREL_BRANCH = 0xB8,BFD_RELOC_ARM_PCREL_BLX = 0xB9,BFD_RELOC_THUMB_PCREL_BLX = 0xBA,BFD_RELOC_ARM_IMMEDIATE = 0xBB,BFD_RELOC_ARM_ADRL_IMMEDIATE = 0xBC,BFD_RELOC_ARM_OFFSET_IMM = 0xBD,BFD_RELOC_ARM_SHIFT_IMM = 0xBE,BFD_RELOC_ARM_SWI = 0xBF,BFD_RELOC_ARM_MULTI = 0xC0,BFD_RELOC_ARM_CP_OFF_IMM = 0xC1,BFD_RELOC_ARM_ADR_IMM = 0xC2,BFD_RELOC_ARM_LDR_IMM = 0xC3,BFD_RELOC_ARM_LITERAL = 0xC4,BFD_RELOC_ARM_IN_POOL = 0xC5,BFD_RELOC_ARM_OFFSET_IMM8 = 0xC6,BFD_RELOC_ARM_HWLITERAL = 0xC7,BFD_RELOC_ARM_THUMB_ADD = 0xC8,BFD_RELOC_ARM_THUMB_IMM = 0xC9,BFD_RELOC_ARM_THUMB_SHIFT = 0xCA,BFD_RELOC_ARM_THUMB_OFFSET = 0xCB,BFD_RELOC_ARM_GOT12 = 0xCC,BFD_RELOC_ARM_GOT32 = 0xCD,BFD_RELOC_ARM_JUMP_SLOT = 0xCE,BFD_RELOC_ARM_COPY = 0xCF,BFD_RELOC_ARM_GLOB_DAT = 0xD0,BFD_RELOC_ARM_PLT32 = 0xD1,BFD_RELOC_ARM_RELATIVE = 0xD2,BFD_RELOC_ARM_GOTOFF = 0xD3,BFD_RELOC_ARM_GOTPC = 0xD4,BFD_RELOC_SH_PCDISP8BY2 = 0xD5,BFD_RELOC_SH_PCDISP12BY2 = 0xD6,BFD_RELOC_SH_IMM4 = 0xD7,BFD_RELOC_SH_IMM4BY2 = 0xD8,BFD_RELOC_SH_IMM4BY4 = 0xD9,BFD_RELOC_SH_IMM8 = 0xDA,BFD_RELOC_SH_IMM8BY2 = 0xDB,BFD_RELOC_SH_IMM8BY4 = 0xDC,BFD_RELOC_SH_PCRELIMM8BY2 = 0xDD,BFD_RELOC_SH_PCRELIMM8BY4 = 0xDE,BFD_RELOC_SH_SWITCH16 = 0xDF,BFD_RELOC_SH_SWITCH32 = 0xE0,BFD_RELOC_SH_USES = 0xE1,BFD_RELOC_SH_COUNT = 0xE2,BFD_RELOC_SH_ALIGN = 0xE3,BFD_RELOC_SH_CODE = 0xE4,BFD_RELOC_SH_DATA = 0xE5,BFD_RELOC_SH_LABEL = 0xE6,BFD_RELOC_SH_LOOP_START = 0xE7,BFD_RELOC_SH_LOOP_END = 0xE8,BFD_RELOC_THUMB_PCREL_BRANCH9 = 0xE9,BFD_RELOC_THUMB_PCREL_BRANCH12 = 0xEA,BFD_RELOC_THUMB_PCREL_BRANCH23 = 0xEB,BFD_RELOC_ARC_B22_PCREL = 0xEC,BFD_RELOC_ARC_B26 = 0xED,BFD_RELOC_D10V_10_PCREL_R = 0xEE,BFD_RELOC_D10V_10_PCREL_L = 0xEF,BFD_RELOC_D10V_18 = 0xF0,BFD_RELOC_D10V_18_PCREL = 0xF1,BFD_RELOC_D30V_6 = 0xF2,BFD_RELOC_D30V_9_PCREL = 0xF3,BFD_RELOC_D30V_9_PCREL_R = 0xF4,BFD_RELOC_D30V_15 = 0xF5,BFD_RELOC_D30V_15_PCREL = 0xF6,BFD_RELOC_D30V_15_PCREL_R = 0xF7,BFD_RELOC_D30V_21 = 0xF8,BFD_RELOC_D30V_21_PCREL = 0xF9,BFD_RELOC_D30V_21_PCREL_R = 0xFA,BFD_RELOC_D30V_32 = 0xFB,BFD_RELOC_D30V_32_PCREL = 0xFC,BFD_RELOC_M32R_24 = 0xFD,BFD_RELOC_M32R_10_PCREL = 0xFE,BFD_RELOC_M32R_18_PCREL = 0xFF,BFD_RELOC_M32R_26_PCREL = 0x100,BFD_RELOC_M32R_HI16_ULO = 0x101,BFD_RELOC_M32R_HI16_SLO = 0x102,BFD_RELOC_M32R_LO16 = 0x103,BFD_RELOC_M32R_SDA16 = 0x104,BFD_RELOC_V850_9_PCREL = 0x105,BFD_RELOC_V850_22_PCREL = 0x106,BFD_RELOC_V850_SDA_16_16_OFFSET = 0x107,BFD_RELOC_V850_SDA_15_16_OFFSET = 0x108,BFD_RELOC_V850_ZDA_16_16_OFFSET = 0x109,BFD_RELOC_V850_ZDA_15_16_OFFSET = 0x10A,BFD_RELOC_V850_TDA_6_8_OFFSET = 0x10B,BFD_RELOC_V850_TDA_7_8_OFFSET = 0x10C,BFD_RELOC_V850_TDA_7_7_OFFSET = 0x10D,BFD_RELOC_V850_TDA_16_16_OFFSET = 0x10E,BFD_RELOC_V850_TDA_4_5_OFFSET = 0x10F,BFD_RELOC_V850_TDA_4_4_OFFSET = 0x110,BFD_RELOC_V850_SDA_16_16_SPLIT_OFFSET = 0x111,BFD_RELOC_V850_ZDA_16_16_SPLIT_OFFSET = 0x112,BFD_RELOC_V850_CALLT_6_7_OFFSET = 0x113,BFD_RELOC_V850_CALLT_16_16_OFFSET = 0x114,BFD_RELOC_MN10300_32_PCREL = 0x115,BFD_RELOC_MN10300_16_PCREL = 0x116,BFD_RELOC_TIC30_LDP = 0x117,BFD_RELOC_TIC54X_PARTLS7 = 0x118,BFD_RELOC_TIC54X_PARTMS9 = 0x119,BFD_RELOC_TIC54X_23 = 0x11A,BFD_RELOC_TIC54X_16_OF_23 = 0x11B,BFD_RELOC_TIC54X_MS7_OF_23 = 0x11C,BFD_RELOC_FR30_48 = 0x11D,BFD_RELOC_FR30_20 = 0x11E,BFD_RELOC_FR30_6_IN_4 = 0x11F,BFD_RELOC_FR30_8_IN_8 = 0x120,BFD_RELOC_FR30_9_IN_8 = 0x121,BFD_RELOC_FR30_10_IN_8 = 0x122,BFD_RELOC_FR30_9_PCREL = 0x123,BFD_RELOC_FR30_12_PCREL = 0x124,BFD_RELOC_MCORE_PCREL_IMM8BY4 = 0x125,BFD_RELOC_MCORE_PCREL_IMM11BY2 = 0x126,BFD_RELOC_MCORE_PCREL_IMM4BY2 = 0x127,BFD_RELOC_MCORE_PCREL_32 = 0x128,BFD_RELOC_MCORE_PCREL_JSR_IMM11BY2 = 0x129,BFD_RELOC_MCORE_RVA = 0x12A,BFD_RELOC_AVR_7_PCREL = 0x12B,BFD_RELOC_AVR_13_PCREL = 0x12C,BFD_RELOC_AVR_16_PM = 0x12D,BFD_RELOC_AVR_LO8_LDI = 0x12E,BFD_RELOC_AVR_HI8_LDI = 0x12F,BFD_RELOC_AVR_HH8_LDI = 0x130,BFD_RELOC_AVR_LO8_LDI_NEG = 0x131,BFD_RELOC_AVR_HI8_LDI_NEG = 0x132,BFD_RELOC_AVR_HH8_LDI_NEG = 0x133,BFD_RELOC_AVR_LO8_LDI_PM = 0x134,BFD_RELOC_AVR_HI8_LDI_PM = 0x135,BFD_RELOC_AVR_HH8_LDI_PM = 0x136,BFD_RELOC_AVR_LO8_LDI_PM_NEG = 0x137,BFD_RELOC_AVR_HI8_LDI_PM_NEG = 0x138,BFD_RELOC_AVR_HH8_LDI_PM_NEG = 0x139,BFD_RELOC_AVR_CALL = 0x13A,BFD_RELOC_VTABLE_INHERIT = 0x13B,BFD_RELOC_VTABLE_ENTRY = 0x13C,BFD_RELOC_IA64_IMM14 = 0x13D,BFD_RELOC_IA64_IMM22 = 0x13E,BFD_RELOC_IA64_IMM64 = 0x13F,BFD_RELOC_IA64_DIR32MSB = 0x140,BFD_RELOC_IA64_DIR32LSB = 0x141,BFD_RELOC_IA64_DIR64MSB = 0x142,BFD_RELOC_IA64_DIR64LSB = 0x143,BFD_RELOC_IA64_GPREL22 = 0x144,BFD_RELOC_IA64_GPREL64I = 0x145,BFD_RELOC_IA64_GPREL32MSB = 0x146,BFD_RELOC_IA64_GPREL32LSB = 0x147,BFD_RELOC_IA64_GPREL64MSB = 0x148,BFD_RELOC_IA64_GPREL64LSB = 0x149,BFD_RELOC_IA64_LTOFF22 = 0x14A,BFD_RELOC_IA64_LTOFF64I = 0x14B,BFD_RELOC_IA64_PLTOFF22 = 0x14C,BFD_RELOC_IA64_PLTOFF64I = 0x14D,BFD_RELOC_IA64_PLTOFF64MSB = 0x14E,BFD_RELOC_IA64_PLTOFF64LSB = 0x14F,BFD_RELOC_IA64_FPTR64I = 0x150,BFD_RELOC_IA64_FPTR32MSB = 0x151,BFD_RELOC_IA64_FPTR32LSB = 0x152,BFD_RELOC_IA64_FPTR64MSB = 0x153,BFD_RELOC_IA64_FPTR64LSB = 0x154,BFD_RELOC_IA64_PCREL21B = 0x155,BFD_RELOC_IA64_PCREL21BI = 0x156,BFD_RELOC_IA64_PCREL21M = 0x157,BFD_RELOC_IA64_PCREL21F = 0x158,BFD_RELOC_IA64_PCREL22 = 0x159,BFD_RELOC_IA64_PCREL60B = 0x15A,BFD_RELOC_IA64_PCREL64I = 0x15B,BFD_RELOC_IA64_PCREL32MSB = 0x15C,BFD_RELOC_IA64_PCREL32LSB = 0x15D,BFD_RELOC_IA64_PCREL64MSB = 0x15E,BFD_RELOC_IA64_PCREL64LSB = 0x15F,BFD_RELOC_IA64_LTOFF_FPTR22 = 0x160,BFD_RELOC_IA64_LTOFF_FPTR64I = 0x161,BFD_RELOC_IA64_LTOFF_FPTR64MSB = 0x162,BFD_RELOC_IA64_LTOFF_FPTR64LSB = 0x163,BFD_RELOC_IA64_SEGBASE = 0x164,BFD_RELOC_IA64_SEGREL32MSB = 0x165,BFD_RELOC_IA64_SEGREL32LSB = 0x166,BFD_RELOC_IA64_SEGREL64MSB = 0x167,BFD_RELOC_IA64_SEGREL64LSB = 0x168,BFD_RELOC_IA64_SECREL32MSB = 0x169,BFD_RELOC_IA64_SECREL32LSB = 0x16A,BFD_RELOC_IA64_SECREL64MSB = 0x16B,BFD_RELOC_IA64_SECREL64LSB = 0x16C,BFD_RELOC_IA64_REL32MSB = 0x16D,BFD_RELOC_IA64_REL32LSB = 0x16E,BFD_RELOC_IA64_REL64MSB = 0x16F,BFD_RELOC_IA64_REL64LSB = 0x170,BFD_RELOC_IA64_LTV32MSB = 0x171,BFD_RELOC_IA64_LTV32LSB = 0x172,BFD_RELOC_IA64_LTV64MSB = 0x173,BFD_RELOC_IA64_LTV64LSB = 0x174,BFD_RELOC_IA64_IPLTMSB = 0x175,BFD_RELOC_IA64_IPLTLSB = 0x176,BFD_RELOC_IA64_EPLTMSB = 0x177,BFD_RELOC_IA64_EPLTLSB = 0x178,BFD_RELOC_IA64_COPY = 0x179,BFD_RELOC_IA64_TPREL22 = 0x17A,BFD_RELOC_IA64_TPREL64MSB = 0x17B,BFD_RELOC_IA64_TPREL64LSB = 0x17C,BFD_RELOC_IA64_LTOFF_TP22 = 0x17D,BFD_RELOC_IA64_LTOFF22X = 0x17E,BFD_RELOC_IA64_LDXMOV = 0x17F,BFD_RELOC_UNUSED = 0x180,};
typedef enum bfd_reloc_code_real bfd_reloc_code_real_type;
enum bfd_reloc_status {bfd_reloc_ok = 0x0,bfd_reloc_overflow = 0x1,bfd_reloc_outofrange = 0x2,bfd_reloc_continue = 0x3,bfd_reloc_notsupported = 0x4,bfd_reloc_other = 0x5,bfd_reloc_undefined = 0x6,bfd_reloc_dangerous = 0x7,};
typedef enum bfd_reloc_status bfd_reloc_status_type;
typedef __int32 bfd_signed_vma;
typedef unsigned __int32 bfd_size_type;
struct bfd_target {char *name;enum bfd_flavour flavour;enum bfd_endian byteorder;enum bfd_endian header_byteorder;flagword object_flags;flagword section_flags;char symbol_leading_char;char ar_pad_char;unsigned __int16 ar_max_namelen;bfd_vma (*bfd_getx64)(const bfd_byte *);bfd_signed_vma (*bfd_getx_signed_64)(const bfd_byte *);void (*bfd_putx64)(bfd_vma, bfd_byte *);bfd_vma (*bfd_getx32)(const bfd_byte *);bfd_signed_vma (*bfd_getx_signed_32)(const bfd_byte *);void (*bfd_putx32)(bfd_vma, bfd_byte *);bfd_vma (*bfd_getx16)(const bfd_byte *);bfd_signed_vma (*bfd_getx_signed_16)(const bfd_byte *);void (*bfd_putx16)(bfd_vma, bfd_byte *);bfd_vma (*bfd_h_getx64)(const bfd_byte *);bfd_signed_vma (*bfd_h_getx_signed_64)(const bfd_byte *);void (*bfd_h_putx64)(bfd_vma, bfd_byte *);bfd_vma (*bfd_h_getx32)(const bfd_byte *);bfd_signed_vma (*bfd_h_getx_signed_32)(const bfd_byte *);void (*bfd_h_putx32)(bfd_vma, bfd_byte *);bfd_vma (*bfd_h_getx16)(const bfd_byte *);bfd_signed_vma (*bfd_h_getx_signed_16)(const bfd_byte *);void (*bfd_h_putx16)(bfd_vma, bfd_byte *);const struct bfd_target *(*_bfd_check_format[4])(bfd *);boolean (*_bfd_set_format[4])(bfd *);boolean (*_bfd_write_contents[4])(bfd *);boolean (*_close_and_cleanup)(bfd *);boolean (*_bfd_free_cached_info)(bfd *);boolean (*_new_section_hook)(bfd *, sec_ptr);boolean (*_bfd_get_section_contents)(bfd *, sec_ptr, void *, file_ptr, bfd_size_type);boolean (*_bfd_get_section_contents_in_window)(bfd *, sec_ptr, bfd_window *, file_ptr, bfd_size_type);boolean (*_bfd_copy_private_bfd_data)(bfd *, bfd *);boolean (*_bfd_merge_private_bfd_data)(bfd *, bfd *);boolean (*_bfd_copy_private_section_data)(bfd *, sec_ptr, bfd *, sec_ptr);boolean (*_bfd_copy_private_symbol_data)(bfd *, asymbol *, bfd *, asymbol *);boolean (*_bfd_set_private_flags)(bfd *, flagword);boolean (*_bfd_print_private_bfd_data)(bfd *, void *);char *(*_core_file_failing_command)(bfd *);int (*_core_file_failing_signal)(bfd *);boolean (*_core_file_matches_executable_p)(bfd *, bfd *);boolean (*_bfd_slurp_armap)(bfd *);boolean (*_bfd_slurp_extended_name_table)(bfd *);boolean (*_bfd_construct_extended_name_table)(bfd *, char **, bfd_size_type *, const char **);void (*_bfd_truncate_arname)(bfd *, const char *, char *);boolean (*write_armap)(bfd *arch, unsigned int elength, struct orl *map, unsigned int orl_count, int stridx);void *(*_bfd_read_ar_hdr_fn)(bfd *);bfd *(*openr_next_archived_file)(bfd *arch, bfd *prev);bfd *(*_bfd_get_elt_at_index)(bfd *, symindex);int (*_bfd_stat_arch_elt)(bfd *, struct stat *);boolean (*_bfd_update_armap_timestamp)(bfd *);__int32 (*_bfd_get_symtab_upper_bound)(bfd *);__int32 (*_bfd_canonicalize_symtab)(bfd *, struct symbol_cache_entry **);struct symbol_cache_entry *(*_bfd_make_empty_symbol)(bfd *);void (*_bfd_print_symbol)(bfd *, void *, struct symbol_cache_entry *, bfd_print_symbol_type);void (*_bfd_get_symbol_info)(bfd *, struct symbol_cache_entry *, symbol_info *);boolean (*_bfd_is_local_label_name)(bfd *, const char *);alent *(*_get_lineno)(bfd *, struct symbol_cache_entry *);boolean (*_bfd_find_nearest_line)(bfd *abfd, struct sec *section, struct symbol_cache_entry **symbols, bfd_vma offset, const char **file, const char **func, unsigned int *line);asymbol *(*_bfd_make_debug_symbol)(bfd *abfd, void *ptr, unsigned __int32 size);__int32 (*_read_minisymbols)(bfd *, boolean, void **, unsigned int *);asymbol *(*_minisymbol_to_symbol)(bfd *, boolean, const void *, asymbol *);__int32 (*_get_reloc_upper_bound)(bfd *, sec_ptr);__int32 (*_bfd_canonicalize_reloc)(bfd *, sec_ptr, arelent **, struct symbol_cache_entry **);reloc_howto_type *(*reloc_type_lookup)(bfd *abfd, bfd_reloc_code_real_type code);boolean (*_bfd_set_arch_mach)(bfd *, enum bfd_architecture, unsigned __int32);boolean (*_bfd_set_section_contents)(bfd *, sec_ptr, void *, file_ptr, bfd_size_type);int (*_bfd_sizeof_headers)(bfd *, boolean);bfd_byte *(*_bfd_get_relocated_section_contents)(bfd *, struct bfd_link_info *, struct bfd_target::bfd_link_order *, bfd_byte *data, boolean relocateable, struct symbol_cache_entry **);boolean (*_bfd_relax_section)(bfd *, struct sec *, struct bfd_link_info *, boolean *again);struct bfd_target::bfd_link_hash_table *(*_bfd_link_hash_table_create)(bfd *);boolean (*_bfd_link_add_symbols)(bfd *, struct bfd_link_info *);boolean (*_bfd_final_link)(bfd *, struct bfd_link_info *);boolean (*_bfd_link_split_section)(bfd *, struct sec *);boolean (*_bfd_gc_sections)(bfd *, struct bfd_link_info *);__int32 (*_bfd_get_dynamic_symtab_upper_bound)(bfd *);__int32 (*_bfd_canonicalize_dynamic_symtab)(bfd *, struct symbol_cache_entry **);__int32 (*_bfd_get_dynamic_reloc_upper_bound)(bfd *);__int32 (*_bfd_canonicalize_dynamic_reloc)(bfd *, arelent **, struct symbol_cache_entry **);const struct bfd_target *alternative_target;void *backend_data;};
typedef unsigned __int32 bfd_vma;
typedef struct _bfd_window bfd_window;
typedef struct _bfd_window_internal bfd_window_internal;
typedef enum bfd_boolean boolean;
typedef char *caddr_t;
struct carsym {char *name;file_ptr file_offset;};
typedef unsigned __int8 cc_t;
typedef char charf;
typedef unsigned __int32 clock_t;
enum complain_overflow {complain_overflow_dont = 0x0,complain_overflow_bitfield = 0x1,complain_overflow_signed = 0x2,complain_overflow_unsigned = 0x3,};
typedef __int32 daddr_t;
typedef __int16 dev_t;
struct dirent {__int32 __d_reserved[4];ino_t d_ino;char d_name[256];};
typedef struct $979FA3DE6ECCF956231BFC297C4278E6 div_t;
struct ecoff_debug_info;
struct ecoff_debug_swap;
struct ecoff_extr;
struct eflock {__int16 l_type;__int16 l_whence;__int32 l_start;__int32 l_len;__int16 l_pid;__int16 l_xxx;__int32 l_rpid;__int32 l_rsys;};
struct exception {int type;char *name;double arg1;double arg2;double retval;int err;};
struct external_PE_filehdr {unsigned __int16 e_magic;unsigned __int16 e_cblp;unsigned __int16 e_cp;unsigned __int16 e_crlc;unsigned __int16 e_cparhdr;unsigned __int16 e_minalloc;unsigned __int16 e_maxalloc;unsigned __int16 e_ss;unsigned __int16 e_sp;unsigned __int16 e_csum;unsigned __int16 e_ip;unsigned __int16 e_cs;unsigned __int16 e_lfarlc;unsigned __int16 e_ovno;char e_res[4][2];unsigned __int16 e_oemid;unsigned __int16 e_oeminfo;char e_res2[10][2];unsigned __int32 e_lfanew;char dos_message[16][4];unsigned int nt_signature;unsigned __int16 f_magic;unsigned __int16 f_nscns;unsigned __int32 f_timdat;unsigned __int32 f_symptr;unsigned __int32 f_nsyms;unsigned __int16 f_opthdr;unsigned __int16 f_flags;};
union external_auxent {struct external_auxent::$0EC2DC1E5BEEE56DE3CA0C3631B57C27 x_sym;union external_auxent::$218D1EF8CDD5DC3457D7F4C589050F96 x_file;struct external_auxent::$EDC675951F483E94E6FD294E9D48C8CC x_scn;struct external_auxent::$592ACE703693045227FB640816C1C126 x_tv;};
struct external_auxent::$0EC2DC1E5BEEE56DE3CA0C3631B57C27 {unsigned __int32 x_tagndx;union external_auxent::$0EC2DC1E5BEEE56DE3CA0C3631B57C27::$87BDFA010CEB01ACC354401785794A14 x_misc;union external_auxent::$0EC2DC1E5BEEE56DE3CA0C3631B57C27::$06B88675A9EB456EB90E8C8C92C74374 x_fcnary;unsigned __int16 x_tvndx;};
union external_auxent::$0EC2DC1E5BEEE56DE3CA0C3631B57C27::$06B88675A9EB456EB90E8C8C92C74374 {struct external_auxent::$::$06B88675A9EB456EB90E8C8C92C74374::$6BE5658F3AC53BBF171B21370DF4F2C8 x_fcn;struct external_auxent::$::$06B88675A9EB456EB90E8C8C92C74374::$AE9B05ABEC1048BE339BB828F6FDD6C6 x_ary;};
union external_auxent::$0EC2DC1E5BEEE56DE3CA0C3631B57C27::$87BDFA010CEB01ACC354401785794A14 {struct external_auxent::$::$87BDFA010CEB01ACC354401785794A14::$6A81AB9DD74A0937A06BA2C0FB9C8664 x_lnsz;unsigned __int32 x_fsize;};
union external_auxent::$218D1EF8CDD5DC3457D7F4C589050F96 {char x_fname[14];struct external_auxent::$218D1EF8CDD5DC3457D7F4C589050F96::$582C8EBC9F634712D800A8EC53B1E0EA x_n;};
struct external_auxent::$218D1EF8CDD5DC3457D7F4C589050F96::$582C8EBC9F634712D800A8EC53B1E0EA {unsigned __int32 x_zeroes;unsigned __int32 x_offset;};
struct external_auxent::$592ACE703693045227FB640816C1C126 {unsigned __int32 x_tvfill;unsigned __int16 x_tvlen;char x_tvran[2][2];};
struct external_auxent::$::$06B88675A9EB456EB90E8C8C92C74374::$6BE5658F3AC53BBF171B21370DF4F2C8 {unsigned __int32 x_lnnoptr;unsigned __int32 x_endndx;};
struct external_auxent::$::$06B88675A9EB456EB90E8C8C92C74374::$AE9B05ABEC1048BE339BB828F6FDD6C6 {char x_dimen[4][2];};
struct external_auxent::$::$87BDFA010CEB01ACC354401785794A14::$6A81AB9DD74A0937A06BA2C0FB9C8664 {unsigned __int16 x_lnno;unsigned __int16 x_size;};
struct external_auxent::$EDC675951F483E94E6FD294E9D48C8CC {unsigned __int32 x_scnlen;unsigned __int16 x_nreloc;unsigned __int16 x_nlinno;unsigned __int32 x_checksum;unsigned __int16 x_associated;char x_comdat[1];};
struct external_filehdr {__int16 f_magic;__int16 f_nscns;unsigned __int32 f_timdat;unsigned __int32 f_symptr;unsigned __int32 f_nsyms;__int16 f_opthdr;__int16 f_flags;};
struct external_lineno {union external_lineno::$D7CB6E8C66A356212467B1896FDD390A l_addr;unsigned __int16 l_lnno;};
union external_lineno::$D7CB6E8C66A356212467B1896FDD390A {unsigned __int32 l_symndx;unsigned __int32 l_paddr;};
struct external_reloc {char r_vaddr[4];char r_symndx[4];char r_type[2];};
struct external_scnhdr {char s_name[8];unsigned __int32 s_paddr;unsigned __int32 s_vaddr;unsigned __int32 s_size;unsigned __int32 s_scnptr;unsigned __int32 s_relptr;unsigned __int32 s_lnnoptr;unsigned __int16 s_nreloc;unsigned __int16 s_nlnno;unsigned __int32 s_flags;};
struct external_syment {union external_syment::$95F5B714D0994531E901AA8A8C444E03 e;unsigned __int32 e_value;unsigned __int16 e_scnum;unsigned __int16 e_type;char e_sclass[1];char e_numaux[1];};
union external_syment::$95F5B714D0994531E901AA8A8C444E03 {char e_name[8];struct external_syment::$95F5B714D0994531E901AA8A8C444E03::$7E2C7DBEAC0FAEB0F78A4DFF1059C9EC e;};
struct external_syment::$95F5B714D0994531E901AA8A8C444E03::$7E2C7DBEAC0FAEB0F78A4DFF1059C9EC {unsigned __int32 e_zeroes;unsigned __int32 e_offset;};
typedef __int32 fd_mask;
typedef __int32 file_ptr;
typedef unsigned int flagword;
struct flock {__int16 l_type;__int16 l_whence;__int32 l_start;__int32 l_len;__int16 l_pid;__int16 l_xxx;};
typedef int fp_except;
typedef int fp_rdi;
typedef int fp_rnd;
typedef _fpos_t fpos_t;
typedef void (*free_func)(voidpf opaque, voidpf address);
typedef unsigned __int16 gid_t;
typedef struct $131D38613E106C9AC3A1755E823A1D2A glob_t;
struct group {char *gr_name;char *gr_passwd;gid_t gr_gid;char **gr_mem;};
typedef voidp gzFile;
typedef unsigned __int16 ino_t;
union internal_auxent;
struct internal_state {int dummy;};
struct internal_syment;
typedef int intf;
struct iovec {caddr_t iov_base;int iov_len;};
struct itimerval {struct timeval it_interval;struct timeval it_value;};
typedef int jmp_buf[36];
typedef __int32 key_t;
struct lastlog {__int32 ll_time;char ll_line[16];char ll_host[256];};
struct lconv {char *decimal_point;char *thousands_sep;char *grouping;char *int_curr_symbol;char *currency_symbol;char *mon_decimal_point;char *mon_thousands_sep;char *mon_grouping;char *positive_sign;char *negative_sign;char int_frac_digits;char frac_digits;char p_cs_precedes;char p_sep_by_space;char n_cs_precedes;char n_sep_by_space;char p_sign_posn;char n_sign_posn;};
typedef struct $B8243ED19B76CA5D55F9F69ED1E7C09F ldiv_t;
struct lineno_cache_entry {unsigned int line_number;union lineno_cache_entry::$026CDB5FE14FF191358A838FC43EE3B7 u;};
union lineno_cache_entry::$026CDB5FE14FF191358A838FC43EE3B7 {struct lineno_cache_entry::$026CDB5FE14FF191358A838FC43EE3B7::symbol_cache_entry *sym;unsigned __int32 offset;};
struct mallinfo {int arena;int ordblks;int smblks;int hblks;int hblkhd;int usmblks;int fsmblks;int uordblks;int fordblks;int keepcost;};
struct mntent {char *mnt_fsname;char *mnt_dir;char *mnt_type;char *mnt_opts;int mnt_freq;int mnt_passno;};
typedef unsigned int mode_t;
typedef unsigned __int16 nlink_t;
typedef __int32 off_t;
struct option {char *name;int has_arg;int *flag;int val;};
struct orl {char **name;file_ptr pos;int namidx;};
typedef unsigned __int8 ospeed_t;
typedef unsigned __int16 otcflag_t;
struct passwd {char *pw_name;char *pw_passwd;int pw_uid;int pw_gid;char *pw_comment;char *pw_gecos;char *pw_dir;char *pw_shell;};
typedef int pid_t;
typedef unsigned __int8 png_byte;
typedef png_byte *png_bytep;
typedef png_byte **png_bytepp;
typedef char *png_charp;
typedef char **png_charpp;
typedef char ***png_charppp;
typedef struct png_color_struct png_color;
typedef struct png_color_16_struct png_color_16;
struct png_color_16_struct {png_byte index;png_uint_16 red;png_uint_16 green;png_uint_16 blue;png_uint_16 gray;};
typedef png_color_16 *png_color_16p;
typedef png_color_16 **png_color_16pp;
typedef struct png_color_8_struct png_color_8;
struct png_color_8_struct {png_byte red;png_byte green;png_byte blue;png_byte gray;png_byte alpha;};
typedef png_color_8 *png_color_8p;
typedef png_color_8 **png_color_8pp;
struct png_color_struct {png_byte red;png_byte green;png_byte blue;};
typedef png_color *png_colorp;
typedef png_color **png_colorpp;
typedef const char *png_const_charp;
typedef const char **png_const_charpp;
typedef double *png_doublep;
typedef double **png_doublepp;
typedef void (*png_error_ptr)(png_structp, png_const_charp);
typedef png_int_32 png_fixed_point;
typedef png_fixed_point *png_fixed_point_p;
typedef png_fixed_point **png_fixed_point_pp;
typedef void (*png_flush_ptr)(png_structp);
typedef void (*png_free_ptr)(png_structp, png_voidp);
typedef struct png_info_struct png_info;
struct png_info_struct {png_uint_32 width;png_uint_32 height;png_uint_32 valid;png_uint_32 rowbytes;png_colorp palette;png_uint_16 num_palette;png_uint_16 num_trans;png_byte bit_depth;png_byte color_type;png_byte compression_type;png_byte filter_type;png_byte interlace_type;png_byte channels;png_byte pixel_depth;png_byte spare_byte;png_byte signature[8];png_uint_32 free_me;float gamma;png_fixed_point int_gamma;png_byte srgb_intent;int num_text;int max_text;png_textp text;int num_text_old;png_textp text_old;png_time mod_time;png_color_8 sig_bit;png_bytep trans;png_color_16 trans_values;png_color_16 background;png_int_32 x_offset;png_int_32 y_offset;png_byte offset_unit_type;png_uint_32 x_pixels_per_unit;png_uint_32 y_pixels_per_unit;png_byte phys_unit_type;png_uint_16p hist;float x_white;float y_white;float x_red;float y_red;float x_green;float y_green;float x_blue;float y_blue;png_fixed_point int_x_white;png_fixed_point int_y_white;png_fixed_point int_x_red;png_fixed_point int_y_red;png_fixed_point int_x_green;png_fixed_point int_y_green;png_fixed_point int_x_blue;png_fixed_point int_y_blue;png_charp pcal_purpose;png_int_32 pcal_X0;png_int_32 pcal_X1;png_charp pcal_units;png_charpp pcal_params;png_byte pcal_type;png_byte pcal_nparams;png_charp iccp_name;png_charp iccp_profile;png_uint_32 iccp_proflen;png_byte iccp_compression;png_sPLT_tp splt_palettes;png_uint_32 splt_palettes_num;png_byte scal_unit;double scal_pixel_width;double scal_pixel_height;png_charp scal_s_width;png_charp scal_s_height;png_unknown_chunkp unknown_chunks;png_size_t unknown_chunks_num;png_bytepp row_pointers;};
typedef png_info *png_infop;
typedef png_info **png_infopp;
typedef __int16 png_int_16;
typedef png_int_16 *png_int_16p;
typedef png_int_16 **png_int_16pp;
typedef __int32 png_int_32;
typedef png_int_32 *png_int_32p;
typedef png_int_32 **png_int_32pp;
typedef png_voidp (*png_malloc_ptr)(png_structp, png_size_t);
typedef void (*png_progressive_end_ptr)(png_structp, png_infop);
typedef void (*png_progressive_info_ptr)(png_structp, png_infop);
typedef void (*png_progressive_row_ptr)(png_structp, png_bytep, png_uint_32, int);
typedef void (*png_read_status_ptr)(png_structp, png_uint_32, int);
typedef struct png_row_info_struct png_row_info;
struct png_row_info_struct {png_uint_32 width;png_uint_32 rowbytes;png_byte color_type;png_byte bit_depth;png_byte channels;png_byte pixel_depth;};
typedef png_row_info *png_row_infop;
typedef png_row_info **png_row_infopp;
typedef void (*png_rw_ptr)(png_structp, png_bytep, png_size_t);
typedef struct png_sPLT_entry_struct png_sPLT_entry;
struct png_sPLT_entry_struct {png_uint_16 red;png_uint_16 green;png_uint_16 blue;png_uint_16 alpha;png_uint_16 frequency;};
typedef png_sPLT_entry *png_sPLT_entryp;
typedef png_sPLT_entry **png_sPLT_entrypp;
struct png_sPLT_struct {png_charp name;png_byte depth;png_sPLT_entryp entries;png_int_32 nentries;};
typedef struct png_sPLT_struct png_sPLT_t;
typedef png_sPLT_t *png_sPLT_tp;
typedef png_sPLT_t **png_sPLT_tpp;
typedef size_t png_size_t;
typedef struct png_struct_def png_struct;
struct png_struct_def {jmp_buf jmpbuf;png_error_ptr error_fn;png_error_ptr warning_fn;png_voidp error_ptr;png_rw_ptr write_data_fn;png_rw_ptr read_data_fn;png_voidp io_ptr;png_user_transform_ptr read_user_transform_fn;png_user_transform_ptr write_user_transform_fn;png_voidp user_transform_ptr;png_byte user_transform_depth;png_byte user_transform_channels;png_voidp user_chunk_ptr;png_user_chunk_ptr read_user_chunk_fn;png_uint_32 mode;png_uint_32 flags;png_uint_32 free_me;png_uint_32 transformations;z_stream zstream;png_bytep zbuf;png_size_t zbuf_size;int zlib_level;int zlib_method;int zlib_window_bits;int zlib_mem_level;int zlib_strategy;png_uint_32 width;png_uint_32 height;png_uint_32 num_rows;png_uint_32 usr_width;png_uint_32 rowbytes;png_uint_32 irowbytes;png_uint_32 iwidth;png_uint_32 row_number;png_bytep prev_row;png_bytep row_buf;png_bytep sub_row;png_bytep up_row;png_bytep avg_row;png_bytep paeth_row;png_row_info row_info;png_uint_32 idat_size;png_uint_32 crc;png_colorp palette;png_uint_16 num_palette;png_uint_16 num_trans;png_byte chunk_name[5];png_byte compression;png_byte filter;png_byte interlaced;png_byte pass;png_byte do_filter;png_byte color_type;png_byte bit_depth;png_byte usr_bit_depth;png_byte pixel_depth;png_byte channels;png_byte usr_channels;png_byte sig_bytes;png_uint_16 filler;png_byte background_gamma_type;float background_gamma;png_color_16 background;png_color_16 background_1;png_flush_ptr output_flush_fn;png_uint_32 flush_dist;png_uint_32 flush_rows;int gamma_shift;float gamma;float screen_gamma;png_fixed_point int_gamma;png_bytep gamma_table;png_bytep gamma_from_1;png_bytep gamma_to_1;png_uint_16pp gamma_16_table;png_uint_16pp gamma_16_from_1;png_uint_16pp gamma_16_to_1;png_color_8 sig_bit;png_color_8 shift;png_bytep trans;png_color_16 trans_values;png_read_status_ptr read_row_fn;png_write_status_ptr write_row_fn;png_progressive_info_ptr info_fn;png_progressive_row_ptr row_fn;png_progressive_end_ptr end_fn;png_bytep save_buffer_ptr;png_bytep save_buffer;png_bytep current_buffer_ptr;png_bytep current_buffer;png_uint_32 push_length;png_uint_32 skip_length;png_size_t save_buffer_size;png_size_t save_buffer_max;png_size_t buffer_size;png_size_t current_buffer_size;int process_mode;int cur_palette;png_size_t current_text_size;png_size_t current_text_left;png_charp current_text;png_charp current_text_ptr;png_bytep palette_lookup;png_bytep dither_index;png_uint_16p hist;png_byte heuristic_method;png_byte num_prev_filters;png_bytep prev_filters;png_uint_16p filter_weights;png_uint_16p inv_filter_weights;png_uint_16p filter_costs;png_uint_16p inv_filter_costs;png_charp time_buffer;png_byte rgb_to_gray_status;png_uint_16 rgb_to_gray_red_coeff;png_uint_16 rgb_to_gray_green_coeff;png_uint_16 rgb_to_gray_blue_coeff;png_byte empty_plte_permitted;int num_chunk_list;png_bytep chunk_list;};
typedef png_struct *png_structp;
typedef png_struct **png_structpp;
typedef struct png_text_struct png_text;
struct png_text_struct {int compression;png_charp key;png_charp text;png_size_t text_length;png_size_t itxt_length;png_charp lang;png_charp lang_key;};
typedef png_text *png_textp;
typedef png_text **png_textpp;
typedef struct png_time_struct png_time;
struct png_time_struct {png_uint_16 year;png_byte month;png_byte day;png_byte hour;png_byte minute;png_byte second;};
typedef png_time *png_timep;
typedef png_time **png_timepp;
typedef unsigned __int16 png_uint_16;
typedef png_uint_16 *png_uint_16p;
typedef png_uint_16 **png_uint_16pp;
typedef unsigned __int32 png_uint_32;
typedef png_uint_32 *png_uint_32p;
typedef png_uint_32 **png_uint_32pp;
typedef struct png_unknown_chunk_t png_unknown_chunk;
typedef void (*png_unknown_chunk_ptr)(png_structp);
struct png_unknown_chunk_t {png_byte name[5];png_byte *data;png_size_t size;png_byte location;};
typedef png_unknown_chunk *png_unknown_chunkp;
typedef png_unknown_chunk **png_unknown_chunkpp;
typedef int (*png_user_chunk_ptr)(png_structp, png_unknown_chunkp);
typedef void (*png_user_transform_ptr)(png_structp, png_row_infop, png_bytep);
typedef void *png_voidp;
typedef void (*png_write_status_ptr)(png_structp, png_uint_32, int);
typedef charf *png_zcharp;
typedef charf **png_zcharpp;
typedef z_stream *png_zstreamp;
struct pthread_attr {size_t stacksize;};
typedef struct pthread_attr pthread_attr_t;
struct pthread_key {char dummy[];};
typedef struct pthread_key pthread_key_t;
typedef int pthread_mutex_t;
struct pthread_mutexattr {char dummy[];};
typedef struct pthread_mutexattr pthread_mutexattr_t;
typedef int pthread_t;
typedef __int32 ptrdiff_t;
struct regexp {char *startp[10];char *endp[10];char regstart;char reganch;char *regmust;int regmlen;char program[1];};
struct relent_chain {arelent relent;struct relent_chain *next;};
struct reloc_cache_entry {struct symbol_cache_entry **sym_ptr_ptr;bfd_size_type address;bfd_vma addend;reloc_howto_type *howto;};
struct reloc_howto_struct {unsigned int type;unsigned int rightshift;int size;unsigned int bitsize;boolean pc_relative;unsigned int bitpos;enum complain_overflow complain_on_overflow;bfd_reloc_status_type (*special_function)(bfd *abfd, arelent *reloc_entry, struct symbol_cache_entry *symbol, void *data, asection *input_section, bfd *output_bfd, char **error_message);char *name;boolean partial_inplace;bfd_vma src_mask;bfd_vma dst_mask;boolean pcrel_offset;};
typedef const struct reloc_howto_struct reloc_howto_type;
struct rusage {struct timeval ru_utime;struct timeval ru_stime;__int32 ru_maxrss;__int32 ru_ixrss;__int32 ru_idrss;__int32 ru_isrss;__int32 ru_minflt;__int32 ru_majflt;__int32 ru_nswap;__int32 ru_inblock;__int32 ru_oublock;__int32 ru_msgsnd;__int32 ru_msgrcv;__int32 ru_nsignals;__int32 ru_nvcsw;__int32 ru_nivcsw;};
struct sec {const char *name;int index;struct sec *next;flagword flags;unsigned int gc_mark;bfd_vma vma;bfd_vma lma;bfd_size_type _cooked_size;bfd_size_type _raw_size;bfd_vma output_offset;struct sec *output_section;unsigned int alignment_power;struct sec::reloc_cache_entry *relocation;struct sec::reloc_cache_entry **orelocation;unsigned int reloc_count;file_ptr filepos;file_ptr rel_filepos;file_ptr line_filepos;void *userdata;unsigned __int8 *contents;alent *lineno;unsigned int lineno_count;struct bfd_comdat_info *comdat;file_ptr moving_line_filepos;int target_index;void *used_by_bfd;struct sec::relent_chain *constructor_chain;bfd *owner;struct symbol_cache_entry *symbol;struct symbol_cache_entry **symbol_ptr_ptr;struct sec::bfd_link_order *link_order_head;struct sec::bfd_link_order *link_order_tail;};
typedef struct sec *sec_ptr;
typedef int sem_t;
typedef int sig_atomic_t;
struct sigaction {void (*sa_handler)(int);sigset_t sa_mask;int sa_flags;};
typedef unsigned __int32 sigset_t;
typedef unsigned __int32 size_t;
struct sockaddr_un {unsigned __int16 sun_family;char sun_path[108];};
typedef unsigned int speed_t;
typedef __int32 ssize_t;
struct stat {dev_t st_dev;ino_t st_ino;mode_t st_mode;nlink_t st_nlink;uid_t st_uid;gid_t st_gid;dev_t st_rdev;off_t st_size;time_t st_atime;__int32 st_spare1;time_t st_mtime;__int32 st_spare2;time_t st_ctime;__int32 st_spare3;__int32 st_blksize;__int32 st_blocks;__int32 st_spare4[2];};
typedef struct stat stat_type;
struct statfs {__int32 f_type;__int32 f_bsize;__int32 f_blocks;__int32 f_bfree;__int32 f_bavail;__int32 f_files;__int32 f_ffree;__int32 f_fsid;__int32 f_namelen;__int32 f_spare[6];};
struct symbol_cache_entry {struct _bfd *the_bfd;const char *name;symvalue value;flagword flags;struct sec *section;union symbol_cache_entry::$B9E77FD0681C1335DBAA9A65240EEB16 udata;};
union symbol_cache_entry::$B9E77FD0681C1335DBAA9A65240EEB16 {void *p;bfd_vma i;};
typedef struct _symbol_info symbol_info;
typedef unsigned __int32 symindex;
typedef unsigned __int32 symvalue;
typedef unsigned int tcflag_t;
struct termios {tcflag_t c_iflag;tcflag_t c_oflag;tcflag_t c_cflag;tcflag_t c_lflag;char c_line;cc_t c_cc[18];speed_t c_ispeed;speed_t c_ospeed;};
typedef __int32 time_t;
struct timeb {time_t time;unsigned __int16 millitm;__int16 timezone;__int16 dstflag;};
struct timeval {__int32 tv_sec;__int32 tv_usec;};
struct timezone {int tz_minuteswest;int tz_dsttime;};
struct tm {int tm_sec;int tm_min;int tm_hour;int tm_mday;int tm_mon;int tm_year;int tm_wday;int tm_yday;int tm_isdst;};
struct tms {clock_t tms_utime;clock_t tms_stime;clock_t tms_cutime;clock_t tms_cstime;};
typedef unsigned int uInt;
typedef uInt uIntf;
typedef unsigned __int32 uLong;
typedef uLong uLongf;
typedef unsigned __int8 u_char;
typedef unsigned int u_int;
typedef unsigned __int32 u_long;
typedef unsigned __int16 u_short;
typedef unsigned __int16 uid_t;
typedef unsigned int uint;
typedef unsigned __int16 ushort;
struct utimbuf {time_t actime;time_t modtime;};
struct utmp {__int16 ut_type;pid_t ut_pid;char ut_line[16];char ut_id[2];time_t ut_time;char ut_user[16];char ut_host[256];__int32 ut_addr;};
struct utsname {char sysname[20];char nodename[20];char release[20];char version[20];char machine[20];};
typedef char *va_list;
typedef png_structp version_1_0_6;
typedef void *voidp;
typedef void *voidpf;
union wait {int w_status;struct wait::$ED1506FEBB6D298A1E4E3673A65C27F8 __wait_terminated;struct wait::$C15E99E37B145616F5C5887501A939DA __wait_stopped;};
struct wait::$C15E99E37B145616F5C5887501A939DA {unsigned int;};
struct wait::$ED1506FEBB6D298A1E4E3673A65C27F8 {unsigned int;};
typedef int wchar_t;
struct winsize {unsigned __int16 ws_row;unsigned __int16 ws_col;unsigned __int16 ws_xpixel;unsigned __int16 ws_ypixel;};
typedef unsigned int wint_t;
typedef struct z_stream_s z_stream;
struct z_stream_s {Bytef *next_in;uInt avail_in;uLong total_in;Bytef *next_out;uInt avail_out;uLong total_out;char *msg;struct internal_state *state;alloc_func zalloc;free_func zfree;voidpf opaque;int data_type;uLong adler;uLong reserved;};
typedef z_stream *z_streamp;

MACRO_ANSI ANSI_PROTOTYPES;
MACRO_AOUTHDRSZ AOUTHDRSZ;
MACRO_FILHSZ AOUTSZ;
MACRO_AUXESZ AUXESZ;
MACRO_Above Above;
MACRO_TK_SCROLL ActivateMask;
MACRO_TK_SCROLL ActivateNotify;
MACRO_AllPlanes AllPlanes;
MACRO_AllTemporary AllTemporary;
MACRO_AllocNone AllocAll;
MACRO_AllocNone AllocNone;
MACRO_DontAllowExposures AllowExposures;
MACRO_GrabSuccess AlreadyGrabbed;
MACRO_NotUseful Always;
MACRO_AnyButton AnyButton;
MACRO_AnyKey AnyKey;
MACRO_ShiftMapIndex AnyModifier;
MACRO_AnyPropertyType AnyPropertyType;
MACRO_ArcChord ArcChord;
MACRO_ArcChord ArcPieSlice;
MACRO_AsyncPointer AsyncBoth;
MACRO_AsyncPointer AsyncKeyboard;
MACRO_AsyncPointer AsyncPointer;
MACRO_AutoRepeatModeOff AutoRepeatModeDefault;
MACRO_AutoRepeatModeOff AutoRepeatModeOff;
MACRO_AutoRepeatModeOff AutoRepeatModeOn;
MACRO_B0 B0;
MACRO_B0 B110;
MACRO_B57600 B115200;
MACRO_B0 B1200;
MACRO_B57600 B128000;
MACRO_B0 B134;
MACRO_B0 B150;
MACRO_B0 B1800;
MACRO_B0 B19200;
MACRO_B0 B200;
MACRO_B0 B2400;
MACRO_B256000 B256000;
MACRO_B0 B300;
MACRO_B0 B38400;
MACRO_B0 B4800;
MACRO_B0 B50;
MACRO_B57600 B57600;
MACRO_B0 B600;
MACRO_B0 B75;
MACRO_B0 B9600;
MACRO_BFD BFD_ARCH_SIZE;
bfd_endian BFD_ENDIAN_BIG;
bfd_endian BFD_ENDIAN_LITTLE;
bfd_endian BFD_ENDIAN_UNKNOWN;
MACRO_BFD_FORT BFD_FORT_COMM_DEFAULT_VALUE;
MACRO_BFD BFD_HOST_64BIT_LONG;
MACRO_BFD_NO BFD_IN_MEMORY;
MACRO_BFD_NO BFD_IS_RELAXABLE;
MACRO_BFD_NO BFD_NO_FLAGS;
MACRO_BFD_NO BFD_NO_MORE_SYMBOLS;
bfd_reloc_code_real BFD_RELOC_12_PCREL;
bfd_reloc_code_real BFD_RELOC_14;
bfd_reloc_code_real BFD_RELOC_16;
bfd_reloc_code_real BFD_RELOC_16_BASEREL;
bfd_reloc_code_real BFD_RELOC_16_GOTOFF;
bfd_reloc_code_real BFD_RELOC_16_GOT_PCREL;
bfd_reloc_code_real BFD_RELOC_16_PCREL;
bfd_reloc_code_real BFD_RELOC_16_PCREL_S2;
bfd_reloc_code_real BFD_RELOC_16_PLTOFF;
bfd_reloc_code_real BFD_RELOC_16_PLT_PCREL;
bfd_reloc_code_real BFD_RELOC_23_PCREL_S2;
bfd_reloc_code_real BFD_RELOC_24;
bfd_reloc_code_real BFD_RELOC_24_PCREL;
bfd_reloc_code_real BFD_RELOC_24_PLT_PCREL;
bfd_reloc_code_real BFD_RELOC_26;
bfd_reloc_code_real BFD_RELOC_32;
bfd_reloc_code_real BFD_RELOC_32_BASEREL;
bfd_reloc_code_real BFD_RELOC_32_GOTOFF;
bfd_reloc_code_real BFD_RELOC_32_GOT_PCREL;
bfd_reloc_code_real BFD_RELOC_32_PCREL;
bfd_reloc_code_real BFD_RELOC_32_PCREL_S2;
bfd_reloc_code_real BFD_RELOC_32_PLTOFF;
bfd_reloc_code_real BFD_RELOC_32_PLT_PCREL;
bfd_reloc_code_real BFD_RELOC_386_COPY;
bfd_reloc_code_real BFD_RELOC_386_GLOB_DAT;
bfd_reloc_code_real BFD_RELOC_386_GOT32;
bfd_reloc_code_real BFD_RELOC_386_GOTOFF;
bfd_reloc_code_real BFD_RELOC_386_GOTPC;
bfd_reloc_code_real BFD_RELOC_386_JUMP_SLOT;
bfd_reloc_code_real BFD_RELOC_386_PLT32;
bfd_reloc_code_real BFD_RELOC_386_RELATIVE;
bfd_reloc_code_real BFD_RELOC_64;
bfd_reloc_code_real BFD_RELOC_64_PCREL;
bfd_reloc_code_real BFD_RELOC_68K_GLOB_DAT;
bfd_reloc_code_real BFD_RELOC_68K_JMP_SLOT;
bfd_reloc_code_real BFD_RELOC_68K_RELATIVE;
bfd_reloc_code_real BFD_RELOC_8;
bfd_reloc_code_real BFD_RELOC_8_BASEREL;
bfd_reloc_code_real BFD_RELOC_8_FFnn;
bfd_reloc_code_real BFD_RELOC_8_GOTOFF;
bfd_reloc_code_real BFD_RELOC_8_GOT_PCREL;
bfd_reloc_code_real BFD_RELOC_8_PCREL;
bfd_reloc_code_real BFD_RELOC_8_PLTOFF;
bfd_reloc_code_real BFD_RELOC_8_PLT_PCREL;
bfd_reloc_code_real BFD_RELOC_ALPHA_CODEADDR;
bfd_reloc_code_real BFD_RELOC_ALPHA_ELF_LITERAL;
bfd_reloc_code_real BFD_RELOC_ALPHA_GPDISP;
bfd_reloc_code_real BFD_RELOC_ALPHA_GPDISP_HI16;
bfd_reloc_code_real BFD_RELOC_ALPHA_GPDISP_LO16;
bfd_reloc_code_real BFD_RELOC_ALPHA_HINT;
bfd_reloc_code_real BFD_RELOC_ALPHA_LINKAGE;
bfd_reloc_code_real BFD_RELOC_ALPHA_LITERAL;
bfd_reloc_code_real BFD_RELOC_ALPHA_LITUSE;
bfd_reloc_code_real BFD_RELOC_ALPHA_USER_GPDISP;
bfd_reloc_code_real BFD_RELOC_ALPHA_USER_GPRELHIGH;
bfd_reloc_code_real BFD_RELOC_ALPHA_USER_GPRELLOW;
bfd_reloc_code_real BFD_RELOC_ALPHA_USER_LITERAL;
bfd_reloc_code_real BFD_RELOC_ALPHA_USER_LITUSE_BASE;
bfd_reloc_code_real BFD_RELOC_ALPHA_USER_LITUSE_BYTOFF;
bfd_reloc_code_real BFD_RELOC_ALPHA_USER_LITUSE_JSR;
bfd_reloc_code_real BFD_RELOC_ARC_B22_PCREL;
bfd_reloc_code_real BFD_RELOC_ARC_B26;
bfd_reloc_code_real BFD_RELOC_ARM_ADRL_IMMEDIATE;
bfd_reloc_code_real BFD_RELOC_ARM_ADR_IMM;
bfd_reloc_code_real BFD_RELOC_ARM_COPY;
bfd_reloc_code_real BFD_RELOC_ARM_CP_OFF_IMM;
bfd_reloc_code_real BFD_RELOC_ARM_GLOB_DAT;
bfd_reloc_code_real BFD_RELOC_ARM_GOT12;
bfd_reloc_code_real BFD_RELOC_ARM_GOT32;
bfd_reloc_code_real BFD_RELOC_ARM_GOTOFF;
bfd_reloc_code_real BFD_RELOC_ARM_GOTPC;
bfd_reloc_code_real BFD_RELOC_ARM_HWLITERAL;
bfd_reloc_code_real BFD_RELOC_ARM_IMMEDIATE;
bfd_reloc_code_real BFD_RELOC_ARM_IN_POOL;
bfd_reloc_code_real BFD_RELOC_ARM_JUMP_SLOT;
bfd_reloc_code_real BFD_RELOC_ARM_LDR_IMM;
bfd_reloc_code_real BFD_RELOC_ARM_LITERAL;
bfd_reloc_code_real BFD_RELOC_ARM_MULTI;
bfd_reloc_code_real BFD_RELOC_ARM_OFFSET_IMM;
bfd_reloc_code_real BFD_RELOC_ARM_OFFSET_IMM8;
bfd_reloc_code_real BFD_RELOC_ARM_PCREL_BLX;
bfd_reloc_code_real BFD_RELOC_ARM_PCREL_BRANCH;
bfd_reloc_code_real BFD_RELOC_ARM_PLT32;
bfd_reloc_code_real BFD_RELOC_ARM_RELATIVE;
bfd_reloc_code_real BFD_RELOC_ARM_SHIFT_IMM;
bfd_reloc_code_real BFD_RELOC_ARM_SWI;
bfd_reloc_code_real BFD_RELOC_ARM_THUMB_ADD;
bfd_reloc_code_real BFD_RELOC_ARM_THUMB_IMM;
bfd_reloc_code_real BFD_RELOC_ARM_THUMB_OFFSET;
bfd_reloc_code_real BFD_RELOC_ARM_THUMB_SHIFT;
bfd_reloc_code_real BFD_RELOC_AVR_13_PCREL;
bfd_reloc_code_real BFD_RELOC_AVR_16_PM;
bfd_reloc_code_real BFD_RELOC_AVR_7_PCREL;
bfd_reloc_code_real BFD_RELOC_AVR_CALL;
bfd_reloc_code_real BFD_RELOC_AVR_HH8_LDI;
bfd_reloc_code_real BFD_RELOC_AVR_HH8_LDI_NEG;
bfd_reloc_code_real BFD_RELOC_AVR_HH8_LDI_PM;
bfd_reloc_code_real BFD_RELOC_AVR_HH8_LDI_PM_NEG;
bfd_reloc_code_real BFD_RELOC_AVR_HI8_LDI;
bfd_reloc_code_real BFD_RELOC_AVR_HI8_LDI_NEG;
bfd_reloc_code_real BFD_RELOC_AVR_HI8_LDI_PM;
bfd_reloc_code_real BFD_RELOC_AVR_HI8_LDI_PM_NEG;
bfd_reloc_code_real BFD_RELOC_AVR_LO8_LDI;
bfd_reloc_code_real BFD_RELOC_AVR_LO8_LDI_NEG;
bfd_reloc_code_real BFD_RELOC_AVR_LO8_LDI_PM;
bfd_reloc_code_real BFD_RELOC_AVR_LO8_LDI_PM_NEG;
bfd_reloc_code_real BFD_RELOC_CTOR;
bfd_reloc_code_real BFD_RELOC_D10V_10_PCREL_L;
bfd_reloc_code_real BFD_RELOC_D10V_10_PCREL_R;
bfd_reloc_code_real BFD_RELOC_D10V_18;
bfd_reloc_code_real BFD_RELOC_D10V_18_PCREL;
bfd_reloc_code_real BFD_RELOC_D30V_15;
bfd_reloc_code_real BFD_RELOC_D30V_15_PCREL;
bfd_reloc_code_real BFD_RELOC_D30V_15_PCREL_R;
bfd_reloc_code_real BFD_RELOC_D30V_21;
bfd_reloc_code_real BFD_RELOC_D30V_21_PCREL;
bfd_reloc_code_real BFD_RELOC_D30V_21_PCREL_R;
bfd_reloc_code_real BFD_RELOC_D30V_32;
bfd_reloc_code_real BFD_RELOC_D30V_32_PCREL;
bfd_reloc_code_real BFD_RELOC_D30V_6;
bfd_reloc_code_real BFD_RELOC_D30V_9_PCREL;
bfd_reloc_code_real BFD_RELOC_D30V_9_PCREL_R;
bfd_reloc_code_real BFD_RELOC_FR30_10_IN_8;
bfd_reloc_code_real BFD_RELOC_FR30_12_PCREL;
bfd_reloc_code_real BFD_RELOC_FR30_20;
bfd_reloc_code_real BFD_RELOC_FR30_48;
bfd_reloc_code_real BFD_RELOC_FR30_6_IN_4;
bfd_reloc_code_real BFD_RELOC_FR30_8_IN_8;
bfd_reloc_code_real BFD_RELOC_FR30_9_IN_8;
bfd_reloc_code_real BFD_RELOC_FR30_9_PCREL;
bfd_reloc_code_real BFD_RELOC_GPREL16;
bfd_reloc_code_real BFD_RELOC_GPREL32;
bfd_reloc_code_real BFD_RELOC_HI16;
bfd_reloc_code_real BFD_RELOC_HI16_BASEREL;
bfd_reloc_code_real BFD_RELOC_HI16_GOTOFF;
bfd_reloc_code_real BFD_RELOC_HI16_PLTOFF;
bfd_reloc_code_real BFD_RELOC_HI16_S;
bfd_reloc_code_real BFD_RELOC_HI16_S_BASEREL;
bfd_reloc_code_real BFD_RELOC_HI16_S_GOTOFF;
bfd_reloc_code_real BFD_RELOC_HI16_S_PLTOFF;
bfd_reloc_code_real BFD_RELOC_HI22;
bfd_reloc_code_real BFD_RELOC_I370_D12;
bfd_reloc_code_real BFD_RELOC_I960_CALLJ;
bfd_reloc_code_real BFD_RELOC_IA64_COPY;
bfd_reloc_code_real BFD_RELOC_IA64_DIR32LSB;
bfd_reloc_code_real BFD_RELOC_IA64_DIR32MSB;
bfd_reloc_code_real BFD_RELOC_IA64_DIR64LSB;
bfd_reloc_code_real BFD_RELOC_IA64_DIR64MSB;
bfd_reloc_code_real BFD_RELOC_IA64_EPLTLSB;
bfd_reloc_code_real BFD_RELOC_IA64_EPLTMSB;
bfd_reloc_code_real BFD_RELOC_IA64_FPTR32LSB;
bfd_reloc_code_real BFD_RELOC_IA64_FPTR32MSB;
bfd_reloc_code_real BFD_RELOC_IA64_FPTR64I;
bfd_reloc_code_real BFD_RELOC_IA64_FPTR64LSB;
bfd_reloc_code_real BFD_RELOC_IA64_FPTR64MSB;
bfd_reloc_code_real BFD_RELOC_IA64_GPREL22;
bfd_reloc_code_real BFD_RELOC_IA64_GPREL32LSB;
bfd_reloc_code_real BFD_RELOC_IA64_GPREL32MSB;
bfd_reloc_code_real BFD_RELOC_IA64_GPREL64I;
bfd_reloc_code_real BFD_RELOC_IA64_GPREL64LSB;
bfd_reloc_code_real BFD_RELOC_IA64_GPREL64MSB;
bfd_reloc_code_real BFD_RELOC_IA64_IMM14;
bfd_reloc_code_real BFD_RELOC_IA64_IMM22;
bfd_reloc_code_real BFD_RELOC_IA64_IMM64;
bfd_reloc_code_real BFD_RELOC_IA64_IPLTLSB;
bfd_reloc_code_real BFD_RELOC_IA64_IPLTMSB;
bfd_reloc_code_real BFD_RELOC_IA64_LDXMOV;
bfd_reloc_code_real BFD_RELOC_IA64_LTOFF22;
bfd_reloc_code_real BFD_RELOC_IA64_LTOFF22X;
bfd_reloc_code_real BFD_RELOC_IA64_LTOFF64I;
bfd_reloc_code_real BFD_RELOC_IA64_LTOFF_FPTR22;
bfd_reloc_code_real BFD_RELOC_IA64_LTOFF_FPTR64I;
bfd_reloc_code_real BFD_RELOC_IA64_LTOFF_FPTR64LSB;
bfd_reloc_code_real BFD_RELOC_IA64_LTOFF_FPTR64MSB;
bfd_reloc_code_real BFD_RELOC_IA64_LTOFF_TP22;
bfd_reloc_code_real BFD_RELOC_IA64_LTV32LSB;
bfd_reloc_code_real BFD_RELOC_IA64_LTV32MSB;
bfd_reloc_code_real BFD_RELOC_IA64_LTV64LSB;
bfd_reloc_code_real BFD_RELOC_IA64_LTV64MSB;
bfd_reloc_code_real BFD_RELOC_IA64_PCREL21B;
bfd_reloc_code_real BFD_RELOC_IA64_PCREL21BI;
bfd_reloc_code_real BFD_RELOC_IA64_PCREL21F;
bfd_reloc_code_real BFD_RELOC_IA64_PCREL21M;
bfd_reloc_code_real BFD_RELOC_IA64_PCREL22;
bfd_reloc_code_real BFD_RELOC_IA64_PCREL32LSB;
bfd_reloc_code_real BFD_RELOC_IA64_PCREL32MSB;
bfd_reloc_code_real BFD_RELOC_IA64_PCREL60B;
bfd_reloc_code_real BFD_RELOC_IA64_PCREL64I;
bfd_reloc_code_real BFD_RELOC_IA64_PCREL64LSB;
bfd_reloc_code_real BFD_RELOC_IA64_PCREL64MSB;
bfd_reloc_code_real BFD_RELOC_IA64_PLTOFF22;
bfd_reloc_code_real BFD_RELOC_IA64_PLTOFF64I;
bfd_reloc_code_real BFD_RELOC_IA64_PLTOFF64LSB;
bfd_reloc_code_real BFD_RELOC_IA64_PLTOFF64MSB;
bfd_reloc_code_real BFD_RELOC_IA64_REL32LSB;
bfd_reloc_code_real BFD_RELOC_IA64_REL32MSB;
bfd_reloc_code_real BFD_RELOC_IA64_REL64LSB;
bfd_reloc_code_real BFD_RELOC_IA64_REL64MSB;
bfd_reloc_code_real BFD_RELOC_IA64_SECREL32LSB;
bfd_reloc_code_real BFD_RELOC_IA64_SECREL32MSB;
bfd_reloc_code_real BFD_RELOC_IA64_SECREL64LSB;
bfd_reloc_code_real BFD_RELOC_IA64_SECREL64MSB;
bfd_reloc_code_real BFD_RELOC_IA64_SEGBASE;
bfd_reloc_code_real BFD_RELOC_IA64_SEGREL32LSB;
bfd_reloc_code_real BFD_RELOC_IA64_SEGREL32MSB;
bfd_reloc_code_real BFD_RELOC_IA64_SEGREL64LSB;
bfd_reloc_code_real BFD_RELOC_IA64_SEGREL64MSB;
bfd_reloc_code_real BFD_RELOC_IA64_TPREL22;
bfd_reloc_code_real BFD_RELOC_IA64_TPREL64LSB;
bfd_reloc_code_real BFD_RELOC_IA64_TPREL64MSB;
bfd_reloc_code_real BFD_RELOC_LO10;
bfd_reloc_code_real BFD_RELOC_LO16;
bfd_reloc_code_real BFD_RELOC_LO16_BASEREL;
bfd_reloc_code_real BFD_RELOC_LO16_GOTOFF;
bfd_reloc_code_real BFD_RELOC_LO16_PLTOFF;
bfd_reloc_code_real BFD_RELOC_M32R_10_PCREL;
bfd_reloc_code_real BFD_RELOC_M32R_18_PCREL;
bfd_reloc_code_real BFD_RELOC_M32R_24;
bfd_reloc_code_real BFD_RELOC_M32R_26_PCREL;
bfd_reloc_code_real BFD_RELOC_M32R_HI16_SLO;
bfd_reloc_code_real BFD_RELOC_M32R_HI16_ULO;
bfd_reloc_code_real BFD_RELOC_M32R_LO16;
bfd_reloc_code_real BFD_RELOC_M32R_SDA16;
bfd_reloc_code_real BFD_RELOC_MCORE_PCREL_32;
bfd_reloc_code_real BFD_RELOC_MCORE_PCREL_IMM11BY2;
bfd_reloc_code_real BFD_RELOC_MCORE_PCREL_IMM4BY2;
bfd_reloc_code_real BFD_RELOC_MCORE_PCREL_IMM8BY4;
bfd_reloc_code_real BFD_RELOC_MCORE_PCREL_JSR_IMM11BY2;
bfd_reloc_code_real BFD_RELOC_MCORE_RVA;
bfd_reloc_code_real BFD_RELOC_MIPS16_GPREL;
bfd_reloc_code_real BFD_RELOC_MIPS16_JMP;
bfd_reloc_code_real BFD_RELOC_MIPS_CALL16;
bfd_reloc_code_real BFD_RELOC_MIPS_CALL_HI16;
bfd_reloc_code_real BFD_RELOC_MIPS_CALL_LO16;
bfd_reloc_code_real BFD_RELOC_MIPS_GOT16;
bfd_reloc_code_real BFD_RELOC_MIPS_GOT_DISP;
bfd_reloc_code_real BFD_RELOC_MIPS_GOT_HI16;
bfd_reloc_code_real BFD_RELOC_MIPS_GOT_LO16;
bfd_reloc_code_real BFD_RELOC_MIPS_GOT_OFST;
bfd_reloc_code_real BFD_RELOC_MIPS_GOT_PAGE;
bfd_reloc_code_real BFD_RELOC_MIPS_JMP;
bfd_reloc_code_real BFD_RELOC_MIPS_LITERAL;
bfd_reloc_code_real BFD_RELOC_MIPS_SUB;
bfd_reloc_code_real BFD_RELOC_MN10300_16_PCREL;
bfd_reloc_code_real BFD_RELOC_MN10300_32_PCREL;
bfd_reloc_code_real BFD_RELOC_NONE;
bfd_reloc_code_real BFD_RELOC_NS32K_DISP_16;
bfd_reloc_code_real BFD_RELOC_NS32K_DISP_16_PCREL;
bfd_reloc_code_real BFD_RELOC_NS32K_DISP_32;
bfd_reloc_code_real BFD_RELOC_NS32K_DISP_32_PCREL;
bfd_reloc_code_real BFD_RELOC_NS32K_DISP_8;
bfd_reloc_code_real BFD_RELOC_NS32K_DISP_8_PCREL;
bfd_reloc_code_real BFD_RELOC_NS32K_IMM_16;
bfd_reloc_code_real BFD_RELOC_NS32K_IMM_16_PCREL;
bfd_reloc_code_real BFD_RELOC_NS32K_IMM_32;
bfd_reloc_code_real BFD_RELOC_NS32K_IMM_32_PCREL;
bfd_reloc_code_real BFD_RELOC_NS32K_IMM_8;
bfd_reloc_code_real BFD_RELOC_NS32K_IMM_8_PCREL;
bfd_reloc_code_real BFD_RELOC_PCREL_HI16_S;
bfd_reloc_code_real BFD_RELOC_PCREL_LO16;
bfd_reloc_code_real BFD_RELOC_PJ_CODE_DIR16;
bfd_reloc_code_real BFD_RELOC_PJ_CODE_DIR32;
bfd_reloc_code_real BFD_RELOC_PJ_CODE_HI16;
bfd_reloc_code_real BFD_RELOC_PJ_CODE_LO16;
bfd_reloc_code_real BFD_RELOC_PJ_CODE_REL16;
bfd_reloc_code_real BFD_RELOC_PJ_CODE_REL32;
bfd_reloc_code_real BFD_RELOC_PPC_B16;
bfd_reloc_code_real BFD_RELOC_PPC_B16_BRNTAKEN;
bfd_reloc_code_real BFD_RELOC_PPC_B16_BRTAKEN;
bfd_reloc_code_real BFD_RELOC_PPC_B26;
bfd_reloc_code_real BFD_RELOC_PPC_BA16;
bfd_reloc_code_real BFD_RELOC_PPC_BA16_BRNTAKEN;
bfd_reloc_code_real BFD_RELOC_PPC_BA16_BRTAKEN;
bfd_reloc_code_real BFD_RELOC_PPC_BA26;
bfd_reloc_code_real BFD_RELOC_PPC_COPY;
bfd_reloc_code_real BFD_RELOC_PPC_EMB_BIT_FLD;
bfd_reloc_code_real BFD_RELOC_PPC_EMB_MRKREF;
bfd_reloc_code_real BFD_RELOC_PPC_EMB_NADDR16;
bfd_reloc_code_real BFD_RELOC_PPC_EMB_NADDR16_HA;
bfd_reloc_code_real BFD_RELOC_PPC_EMB_NADDR16_HI;
bfd_reloc_code_real BFD_RELOC_PPC_EMB_NADDR16_LO;
bfd_reloc_code_real BFD_RELOC_PPC_EMB_NADDR32;
bfd_reloc_code_real BFD_RELOC_PPC_EMB_RELSDA;
bfd_reloc_code_real BFD_RELOC_PPC_EMB_RELSEC16;
bfd_reloc_code_real BFD_RELOC_PPC_EMB_RELST_HA;
bfd_reloc_code_real BFD_RELOC_PPC_EMB_RELST_HI;
bfd_reloc_code_real BFD_RELOC_PPC_EMB_RELST_LO;
bfd_reloc_code_real BFD_RELOC_PPC_EMB_SDA21;
bfd_reloc_code_real BFD_RELOC_PPC_EMB_SDA2I16;
bfd_reloc_code_real BFD_RELOC_PPC_EMB_SDA2REL;
bfd_reloc_code_real BFD_RELOC_PPC_EMB_SDAI16;
bfd_reloc_code_real BFD_RELOC_PPC_GLOB_DAT;
bfd_reloc_code_real BFD_RELOC_PPC_JMP_SLOT;
bfd_reloc_code_real BFD_RELOC_PPC_LOCAL24PC;
bfd_reloc_code_real BFD_RELOC_PPC_RELATIVE;
bfd_reloc_code_real BFD_RELOC_PPC_TOC16;
bfd_reloc_code_real BFD_RELOC_RVA;
bfd_reloc_code_real BFD_RELOC_SH_ALIGN;
bfd_reloc_code_real BFD_RELOC_SH_CODE;
bfd_reloc_code_real BFD_RELOC_SH_COUNT;
bfd_reloc_code_real BFD_RELOC_SH_DATA;
bfd_reloc_code_real BFD_RELOC_SH_IMM4;
bfd_reloc_code_real BFD_RELOC_SH_IMM4BY2;
bfd_reloc_code_real BFD_RELOC_SH_IMM4BY4;
bfd_reloc_code_real BFD_RELOC_SH_IMM8;
bfd_reloc_code_real BFD_RELOC_SH_IMM8BY2;
bfd_reloc_code_real BFD_RELOC_SH_IMM8BY4;
bfd_reloc_code_real BFD_RELOC_SH_LABEL;
bfd_reloc_code_real BFD_RELOC_SH_LOOP_END;
bfd_reloc_code_real BFD_RELOC_SH_LOOP_START;
bfd_reloc_code_real BFD_RELOC_SH_PCDISP12BY2;
bfd_reloc_code_real BFD_RELOC_SH_PCDISP8BY2;
bfd_reloc_code_real BFD_RELOC_SH_PCRELIMM8BY2;
bfd_reloc_code_real BFD_RELOC_SH_PCRELIMM8BY4;
bfd_reloc_code_real BFD_RELOC_SH_SWITCH16;
bfd_reloc_code_real BFD_RELOC_SH_SWITCH32;
bfd_reloc_code_real BFD_RELOC_SH_USES;
bfd_reloc_code_real BFD_RELOC_SPARC13;
bfd_reloc_code_real BFD_RELOC_SPARC22;
bfd_reloc_code_real BFD_RELOC_SPARC_10;
bfd_reloc_code_real BFD_RELOC_SPARC_11;
bfd_reloc_code_real BFD_RELOC_SPARC_5;
bfd_reloc_code_real BFD_RELOC_SPARC_6;
bfd_reloc_code_real BFD_RELOC_SPARC_7;
bfd_reloc_code_real BFD_RELOC_SPARC_BASE13;
bfd_reloc_code_real BFD_RELOC_SPARC_BASE22;
bfd_reloc_code_real BFD_RELOC_SPARC_COPY;
bfd_reloc_code_real BFD_RELOC_SPARC_GLOB_DAT;
bfd_reloc_code_real BFD_RELOC_SPARC_GOT10;
bfd_reloc_code_real BFD_RELOC_SPARC_GOT13;
bfd_reloc_code_real BFD_RELOC_SPARC_GOT22;
bfd_reloc_code_real BFD_RELOC_SPARC_H44;
bfd_reloc_code_real BFD_RELOC_SPARC_HH22;
bfd_reloc_code_real BFD_RELOC_SPARC_HIX22;
bfd_reloc_code_real BFD_RELOC_SPARC_HM10;
bfd_reloc_code_real BFD_RELOC_SPARC_JMP_SLOT;
bfd_reloc_code_real BFD_RELOC_SPARC_L44;
bfd_reloc_code_real BFD_RELOC_SPARC_LM22;
bfd_reloc_code_real BFD_RELOC_SPARC_LOX10;
bfd_reloc_code_real BFD_RELOC_SPARC_M44;
bfd_reloc_code_real BFD_RELOC_SPARC_OLO10;
bfd_reloc_code_real BFD_RELOC_SPARC_PC10;
bfd_reloc_code_real BFD_RELOC_SPARC_PC22;
bfd_reloc_code_real BFD_RELOC_SPARC_PC_HH22;
bfd_reloc_code_real BFD_RELOC_SPARC_PC_HM10;
bfd_reloc_code_real BFD_RELOC_SPARC_PC_LM22;
bfd_reloc_code_real BFD_RELOC_SPARC_PLT64;
bfd_reloc_code_real BFD_RELOC_SPARC_REGISTER;
bfd_reloc_code_real BFD_RELOC_SPARC_RELATIVE;
bfd_reloc_code_real BFD_RELOC_SPARC_REV32;
bfd_reloc_code_real BFD_RELOC_SPARC_UA32;
bfd_reloc_code_real BFD_RELOC_SPARC_WDISP16;
bfd_reloc_code_real BFD_RELOC_SPARC_WDISP19;
bfd_reloc_code_real BFD_RELOC_SPARC_WDISP22;
bfd_reloc_code_real BFD_RELOC_SPARC_WPLT30;
bfd_reloc_code_real BFD_RELOC_THUMB_PCREL_BLX;
bfd_reloc_code_real BFD_RELOC_THUMB_PCREL_BRANCH12;
bfd_reloc_code_real BFD_RELOC_THUMB_PCREL_BRANCH23;
bfd_reloc_code_real BFD_RELOC_THUMB_PCREL_BRANCH9;
bfd_reloc_code_real BFD_RELOC_TIC30_LDP;
bfd_reloc_code_real BFD_RELOC_TIC54X_16_OF_23;
bfd_reloc_code_real BFD_RELOC_TIC54X_23;
bfd_reloc_code_real BFD_RELOC_TIC54X_MS7_OF_23;
bfd_reloc_code_real BFD_RELOC_TIC54X_PARTLS7;
bfd_reloc_code_real BFD_RELOC_TIC54X_PARTMS9;
bfd_reloc_code_real BFD_RELOC_UNUSED;
bfd_reloc_code_real BFD_RELOC_V850_22_PCREL;
bfd_reloc_code_real BFD_RELOC_V850_9_PCREL;
bfd_reloc_code_real BFD_RELOC_V850_CALLT_16_16_OFFSET;
bfd_reloc_code_real BFD_RELOC_V850_CALLT_6_7_OFFSET;
bfd_reloc_code_real BFD_RELOC_V850_SDA_15_16_OFFSET;
bfd_reloc_code_real BFD_RELOC_V850_SDA_16_16_OFFSET;
bfd_reloc_code_real BFD_RELOC_V850_SDA_16_16_SPLIT_OFFSET;
bfd_reloc_code_real BFD_RELOC_V850_TDA_16_16_OFFSET;
bfd_reloc_code_real BFD_RELOC_V850_TDA_4_4_OFFSET;
bfd_reloc_code_real BFD_RELOC_V850_TDA_4_5_OFFSET;
bfd_reloc_code_real BFD_RELOC_V850_TDA_6_8_OFFSET;
bfd_reloc_code_real BFD_RELOC_V850_TDA_7_7_OFFSET;
bfd_reloc_code_real BFD_RELOC_V850_TDA_7_8_OFFSET;
bfd_reloc_code_real BFD_RELOC_V850_ZDA_15_16_OFFSET;
bfd_reloc_code_real BFD_RELOC_V850_ZDA_16_16_OFFSET;
bfd_reloc_code_real BFD_RELOC_V850_ZDA_16_16_SPLIT_OFFSET;
bfd_reloc_code_real BFD_RELOC_VTABLE_ENTRY;
bfd_reloc_code_real BFD_RELOC_VTABLE_INHERIT;
MACRO_BFD_NO BFD_TRADITIONAL_FORMAT;
MACRO_BIG BIG_ENDIAN;
MACRO_IGNBRK BRKINT;
MACRO_BS0 BS0;
MACRO_BS0 BS1;
MACRO_NL0 BSDLY;
MACRO_BFD_FORT BSF_CONSTRUCTOR;
MACRO_BSF_EXPORT BSF_DEBUGGING;
MACRO_BFD_FORT BSF_DEBUGGING_RELOC;
MACRO_BFD_FORT BSF_DYNAMIC;
MACRO_BSF_EXPORT BSF_EXPORT;
MACRO_BFD_FORT BSF_FILE;
MACRO_BSF_EXPORT BSF_FUNCTION;
MACRO_BSF BSF_GLOBAL;
MACRO_BFD_FORT BSF_INDIRECT;
MACRO_BSF_EXPORT BSF_KEEP;
MACRO_BSF_EXPORT BSF_KEEP_G;
MACRO_BSF BSF_LOCAL;
MACRO_BFD_FORT BSF_NOT_AT_END;
MACRO_BSF BSF_NO_FLAGS;
MACRO_BFD_FORT BSF_OBJECT;
MACRO_BSF_EXPORT BSF_OLD_COMMON;
MACRO_BSF_EXPORT BSF_SECTION_SYM;
MACRO_BFD_FORT BSF_WARNING;
MACRO_BSF_EXPORT BSF_WEAK;
MACRO__IOFBF BUFSIZ;
MACRO_BYTE BYTE_ORDER;
MACRO_Success BadAccess;
MACRO_Success BadAlloc;
MACRO_Success BadAtom;
MACRO_Success BadColor;
MACRO_Success BadCursor;
MACRO_Success BadDrawable;
MACRO_Success BadFont;
MACRO_Success BadGC;
MACRO_Success BadIDChoice;
MACRO_Success BadImplementation;
MACRO_Success BadLength;
MACRO_Success BadMatch;
MACRO_Success BadName;
MACRO_Success BadPixmap;
MACRO_Success BadRequest;
MACRO_Success BadValue;
MACRO_Success BadWindow;
MACRO_Above Below;
MACRO_Above BottomIf;
MACRO_Button1 Button1;
MACRO_ShiftMapIndex Button1Mask;
MACRO_NoEventMask Button1MotionMask;
MACRO_Button1 Button2;
MACRO_ShiftMapIndex Button2Mask;
MACRO_NoEventMask Button2MotionMask;
MACRO_Button1 Button3;
MACRO_ShiftMapIndex Button3Mask;
MACRO_NoEventMask Button3MotionMask;
MACRO_Button1 Button4;
MACRO_ShiftMapIndex Button4Mask;
MACRO_NoEventMask Button4MotionMask;
MACRO_Button1 Button5;
MACRO_ShiftMapIndex Button5Mask;
MACRO_NoEventMask Button5MotionMask;
MACRO_NoEventMask ButtonMotionMask;
MACRO_KeyPress ButtonPress;
MACRO_NoEventMask ButtonPressMask;
MACRO_KeyPress ButtonRelease;
MACRO_NoEventMask ButtonReleaseMask;
MACRO_CBAUD CBAUD;
MACRO_CS5 CBAUDEX;
MACRO_CNUL CDEL;
MACRO_CDSUSP CDSUSP;
MACRO_CEOL2 CEOF;
MACRO_CEOL CEOL;
MACRO_CEOL2 CEOL2;
MACRO_CEOT CEOT;
MACRO_CERASE CERASE;
MACRO_CESC CESC;
MACRO_CFLUSH CFLUSH;
MACRO_CHAR CHAR_BIT;
MACRO_CHAR_MAX CHAR_MAX;
MACRO_SCHAR CHAR_MIN;
MACRO_NGROUPS CHILD_MAX;
MACRO_CINTR CINTR;
MACRO_CERASE CKILL;
MACRO_CLK CLK_TCK;
MACRO_CLNEXT CLNEXT;
MACRO_CS5 CLOCAL;
MACRO_CLOCKS CLOCKS_PER_SEC;
MACRO_CNUL CNUL;
MACRO_CINTR CQUIT;
MACRO_CR0 CR0;
MACRO_CR0 CR1;
MACRO_CR0 CR2;
MACRO_CR0 CR3;
MACRO_OPOST CRDLY;
MACRO_CS5 CREAD;
MACRO_CRPRNT CRPRNT;
MACRO_B256000 CRTSCTS;
MACRO_B256000 CRTSXOFF;
MACRO_CS5 CS5;
MACRO_CS5 CS6;
MACRO_CS5 CS7;
MACRO_CS5 CS8;
MACRO_B0 CSIZE;
MACRO_CEOL2 CSTART;
MACRO_CEOL2 CSTOP;
MACRO_CS5 CSTOPB;
MACRO_NSWTCH CSUSP;
MACRO_CEOL2 CSWTCH;
MACRO_CWBackPixmap CWBackPixel;
MACRO_CWBackPixmap CWBackPixmap;
MACRO_CWBackPixmap CWBackingPixel;
MACRO_CWBackPixmap CWBackingPlanes;
MACRO_CWBackPixmap CWBackingStore;
MACRO_CWBackPixmap CWBitGravity;
MACRO_CWBackPixmap CWBorderPixel;
MACRO_CWBackPixmap CWBorderPixmap;
MACRO_CWX CWBorderWidth;
MACRO_CWBackPixmap CWColormap;
MACRO_CWBackPixmap CWCursor;
MACRO_CWBackPixmap CWDontPropagate;
MACRO_CFLUSH CWERASE;
MACRO_CWBackPixmap CWEventMask;
MACRO_CWX CWHeight;
MACRO_CWBackPixmap CWOverrideRedirect;
MACRO_CWBackPixmap CWSaveUnder;
MACRO_CWX CWSibling;
MACRO_CWX CWStackMode;
MACRO_CWX CWWidth;
MACRO_CWBackPixmap CWWinGravity;
MACRO_CWX CWX;
MACRO_CWX CWY;
MACRO_CapNotLast CapButt;
MACRO_CapNotLast CapNotLast;
MACRO_CapNotLast CapProjecting;
MACRO_CapNotLast CapRound;
MACRO_ForgetGravity CenterGravity;
MACRO_KeyPress CirculateNotify;
MACRO_KeyPress CirculateRequest;
MACRO_KeyPress ClientMessage;
MACRO_ClipByChildren ClipByChildren;
MACRO_NoEventMask ColormapChangeMask;
MACRO_ColormapUninstalled ColormapInstalled;
MACRO_KeyPress ColormapNotify;
MACRO_ColormapUninstalled ColormapUninstalled;
MACRO_Complex Complex;
MACRO_KeyPress ConfigureNotify;
MACRO_KeyPress ConfigureRequest;
MACRO_ShiftMapIndex ControlMapIndex;
MACRO_ShiftMask ControlMask;
MACRO_Complex Convex;
MACRO_CoordModeOrigin CoordModeOrigin;
MACRO_CoordModeOrigin CoordModePrevious;
MACRO_CopyFromParent CopyFromParent;
MACRO_KeyPress CreateNotify;
MACRO_CurrentTime CurrentTime;
MACRO_CursorShape CursorShape;
MACRO_DAYSPERNYEAR DAYSPERLYEAR;
MACRO_DAYSPERNYEAR DAYSPERNYEAR;
MACRO_INIT DEAD_PROCESS;
MACRO_DOMAIN DOMAIN;
MACRO_NT_SIGNATURE DOSMAGIC;
MACRO_DT DT_ARY;
MACRO_DT DT_FCN;
MACRO_DT DT_NON;
MACRO_DT DT_PTR;
MACRO_BFD_NO DYNAMIC;
MACRO_BFD_NO D_PAGED;
MACRO_TK_SCROLL DeactivateNotify;
MACRO_DontPreferBlanking DefaultBlanking;
MACRO_DontAllowExposures DefaultExposures;
MACRO_DestroyAll DestroyAll;
MACRO_KeyPress DestroyNotify;
MACRO_StaticGray DirectColor;
MACRO_DisableAccess DisableAccess;
MACRO_DisableScreenInterval DisableScreenInterval;
MACRO_DisableScreenSaver DisableScreenSaver;
MACRO_DoRed DoBlue;
MACRO_DoRed DoGreen;
MACRO_DoRed DoRed;
MACRO_DontAllowExposures DontAllowExposures;
MACRO_DontPreferBlanking DontPreferBlanking;
MACRO_EPERM E2BIG;
MACRO_EPERM EACCES;
MACRO_EPERM EADDRINUSE;
MACRO_EPERM EADDRNOTAVAIL;
MACRO_EPERM EADV;
MACRO_EPERM EAFNOSUPPORT;
MACRO_EPERM EAGAIN;
MACRO_EPERM EALREADY;
MACRO_EPERM EBADE;
MACRO_EPERM EBADF;
MACRO_EPERM EBADFD;
MACRO_EPERM EBADMSG;
MACRO_EPERM EBADR;
MACRO_EPERM EBADRQC;
MACRO_EPERM EBADSLT;
MACRO_EPERM EBFONT;
MACRO_EPERM EBUSY;
MACRO_EPERM ECHILD;
MACRO_ISIG ECHO;
MACRO_ISIG ECHOCTL;
MACRO_ISIG ECHOE;
MACRO_ISIG ECHOK;
MACRO_ISIG ECHOKE;
MACRO_ISIG ECHONL;
MACRO_EPERM ECHRNG;
MACRO_EPERM ECOMM;
MACRO_EPERM ECONNABORTED;
MACRO_EPERM ECONNREFUSED;
MACRO_EPERM ECONNRESET;
MACRO_EPERM EDEADLK;
MACRO_EPERM EDEADLOCK;
MACRO_EPERM EDESTADDRREQ;
MACRO_EPERM EDOM;
MACRO_EPERM EDOTDOT;
MACRO_EPERM EDQUOT;
MACRO_EPERM EEXIST;
MACRO_EPERM EFAULT;
MACRO_EPERM EFBIG;
MACRO_EPERM EHOSTDOWN;
MACRO_EPERM EHOSTUNREACH;
MACRO_EPERM EIDRM;
MACRO_EPERM EINPROGRESS;
MACRO_EPERM EINTR;
MACRO_EPERM EINVAL;
MACRO_EPERM EIO;
MACRO_EPERM EISCONN;
MACRO_EPERM EISDIR;
MACRO_EPERM EL2HLT;
MACRO_EPERM EL2NSYNC;
MACRO_EPERM EL3HLT;
MACRO_EPERM EL3RST;
MACRO_EPERM ELBIN;
MACRO_EPERM ELIBACC;
MACRO_EPERM ELIBBAD;
MACRO_EPERM ELIBEXEC;
MACRO_EPERM ELIBMAX;
MACRO_EPERM ELIBSCN;
MACRO_EPERM ELNRNG;
MACRO_EPERM ELOOP;
MACRO_EPERM EMFILE;
MACRO_EPERM EMLINK;
MACRO_EPERM EMSGSIZE;
MACRO_EPERM EMULTIHOP;
MACRO_EPERM ENAMETOOLONG;
MACRO_EPERM ENETDOWN;
MACRO_EPERM ENETRESET;
MACRO_EPERM ENETUNREACH;
MACRO_EPERM ENFILE;
MACRO_EPERM ENMFILE;
MACRO_EPERM ENOANO;
MACRO_EPERM ENOBUFS;
MACRO_EPERM ENOCSI;
MACRO_EPERM ENODATA;
MACRO_EPERM ENODEV;
MACRO_EPERM ENOENT;
MACRO_EPERM ENOEXEC;
MACRO_EPERM ENOLCK;
MACRO_EPERM ENOLINK;
MACRO_EPERM ENOMEDIUM;
MACRO_EPERM ENOMEM;
MACRO_EPERM ENOMSG;
MACRO_EPERM ENONET;
MACRO_EPERM ENOPKG;
MACRO_EPERM ENOPROTOOPT;
MACRO_EPERM ENOSHARE;
MACRO_EPERM ENOSPC;
MACRO_EPERM ENOSR;
MACRO_EPERM ENOSTR;
MACRO_EPERM ENOSYS;
MACRO_EPERM ENOTBLK;
MACRO_EPERM ENOTCONN;
MACRO_EPERM ENOTDIR;
MACRO_EPERM ENOTEMPTY;
MACRO_EPERM ENOTSOCK;
MACRO_EPERM ENOTSUP;
MACRO_EPERM ENOTTY;
MACRO_EPERM ENOTUNIQ;
MACRO_EPERM ENXIO;
MACRO__IOFBF EOF;
MACRO_EPERM EOPNOTSUPP;
MACRO_EPERM EPERM;
MACRO_EPERM EPFNOSUPPORT;
MACRO_EPERM EPIPE;
MACRO_EPERM EPROCLIM;
MACRO_EPERM EPROTO;
MACRO_EPERM EPROTONOSUPPORT;
MACRO_EPERM EPROTOTYPE;
MACRO_EPERM ERANGE;
MACRO_EPERM EREMCHG;
MACRO_EPERM EREMOTE;
MACRO_EPERM EROFS;
MACRO_EPERM ESHUTDOWN;
MACRO_EPERM ESOCKTNOSUPPORT;
MACRO_EPERM ESPIPE;
MACRO_EPERM ESRCH;
MACRO_EPERM ESRMNT;
MACRO_EPERM ESTALE;
MACRO_EPERM ETIME;
MACRO_EPERM ETIMEDOUT;
MACRO_EPERM ETOOMANYREFS;
MACRO_EPERM ETXTBSY;
MACRO_EPERM EUNATCH;
MACRO_EPERM EUSERS;
MACRO_EWOULDBLOCK EWOULDBLOCK;
MACRO_EPERM EXDEV;
MACRO_BFD_NO EXEC_P;
MACRO_EPERM EXFULL;
MACRO_EXIT EXIT_FAILURE;
MACRO_EXIT EXIT_SUCCESS;
MACRO_E E_DIMNUM;
MACRO_LINESZ E_FILNMLEN;
MACRO_LINESZ E_SYMNMLEN;
MACRO_ForgetGravity EastGravity;
MACRO_EnableAccess EnableAccess;
MACRO_KeyPress EnterNotify;
MACRO_NoEventMask EnterWindowMask;
MACRO_EvenOddRule EvenOddRule;
MACRO_KeyPress Expose;
MACRO_NoEventMask ExposureMask;
MACRO_FAPPEND FAPPEND;
MACRO_FASYNC FASYNC;
MACRO_FCREAT FCREAT;
MACRO_FREAD FDEFER;
MACRO_FD FD_CLOEXEC;
MACRO_NBBY FD_SETSIZE;
MACRO_FCREAT FEXCL;
MACRO_FREAD FEXLOCK;
MACRO_FF0 FF0;
MACRO_FF0 FF1;
MACRO_VT0 FFDLY;
MACRO_FOPEN FILENAME_MAX;
MACRO_FILHSZ FILHSZ;
MACRO_FILNMLEN FILNMLEN;
MACRO_TIOCPKT FIONBIO;
MACRO_ISIG FLUSHO;
MACRO_FREAD FMARK;
MACRO_FASYNC FNBIO;
MACRO_FNDELAY FNDELAY;
MACRO_FCREAT FNOCTTY;
MACRO_FASYNC FNONBIO;
MACRO_FREAD FOPEN;
MACRO_FOPEN FOPEN_MAX;
MACRO_FORK FORK_NO_RELOAD;
MACRO_FORK FORK_RELOAD;
MACRO_FP_RDI FP_RDI_RD;
MACRO_FP_X FP_RDI_TOZ;
MACRO_FP FP_RM;
MACRO_FP FP_RN;
MACRO_FP FP_RP;
MACRO_FP FP_RZ;
MACRO_FP FP_X_DX;
MACRO_FP_X FP_X_IMP;
MACRO_FP FP_X_INV;
MACRO_FP_X FP_X_OFL;
MACRO_FP_X FP_X_UFL;
MACRO_FREAD FREAD;
MACRO_FREAD FSHLOCK;
MACRO_FAPPEND FSYNC;
MACRO_FCREAT FTRUNC;
MACRO_FREAD FWRITE;
MACRO_F_GETFD F_CNVT;
MACRO_FD F_DUPFD;
MACRO_F F_EXEC;
MACRO_F_GETFD F_GETFD;
MACRO_F_GETFD F_GETFL;
MACRO_F_GETFD F_GETLK;
MACRO_F_GETFD F_GETOWN;
MACRO_F F_LNNO;
MACRO_F F_LSYMS;
MACRO_F_OK F_OK;
MACRO_F_RDLCK F_RDLCK;
MACRO_F F_RELFLG;
MACRO_F_GETFD F_RGETLK;
MACRO_F_GETFD F_RSETLK;
MACRO_F_GETFD F_RSETLKW;
MACRO_F_GETFD F_SETFD;
MACRO_F_GETFD F_SETFL;
MACRO_F_GETFD F_SETLK;
MACRO_F_GETFD F_SETLKW;
MACRO_F_GETFD F_SETOWN;
MACRO_F_RDLCK F_UNLCK;
MACRO_F_RDLCK F_UNLKSYS;
MACRO_F_RDLCK F_WRLCK;
MACRO_False False;
MACRO_FamilyInternet FamilyChaos;
MACRO_FamilyInternet FamilyDECnet;
MACRO_FamilyInternet FamilyInternet;
MACRO_FillSolid FillOpaqueStippled;
MACRO_FillSolid FillSolid;
MACRO_FillSolid FillStippled;
MACRO_FillSolid FillTiled;
MACRO_Success FirstExtensionError;
MACRO_NoEventMask FocusChangeMask;
MACRO_KeyPress FocusIn;
MACRO_KeyPress FocusOut;
MACRO_FontLeftToRight FontChange;
MACRO_FontLeftToRight FontLeftToRight;
MACRO_FontLeftToRight FontRightToLeft;
MACRO_ForgetGravity ForgetGravity;
MACRO_GCFunction GCArcMode;
MACRO_GCFunction GCBackground;
MACRO_GCFunction GCCapStyle;
MACRO_GCFunction GCClipMask;
MACRO_GCFunction GCClipXOrigin;
MACRO_GCFunction GCClipYOrigin;
MACRO_GCFunction GCDashList;
MACRO_GCFunction GCDashOffset;
MACRO_GCFunction GCFillRule;
MACRO_GCFunction GCFillStyle;
MACRO_GCFunction GCFont;
MACRO_GCFunction GCForeground;
MACRO_GCFunction GCFunction;
MACRO_GCFunction GCGraphicsExposures;
MACRO_GCFunction GCJoinStyle;
MACRO_GCLastBit GCLastBit;
MACRO_GCFunction GCLineStyle;
MACRO_GCFunction GCLineWidth;
MACRO_GCFunction GCPlaneMask;
MACRO_GCFunction GCStipple;
MACRO_GCFunction GCSubwindowMode;
MACRO_GCFunction GCTile;
MACRO_GCFunction GCTileStipXOrigin;
MACRO_GCFunction GCTileStipYOrigin;
MACRO_GLOB_ABEND GLOB_ABEND;
MACRO_GLOB GLOB_ALTDIRFUNC;
MACRO_GLOB GLOB_APPEND;
MACRO_GLOB GLOB_BRACE;
MACRO_GLOB GLOB_DOOFFS;
MACRO_GLOB GLOB_ERR;
MACRO_GLOB GLOB_MAGCHAR;
MACRO_GLOB GLOB_MARK;
MACRO_GLOB GLOB_NOCHECK;
MACRO_GLOB GLOB_NOMAGIC;
MACRO_GLOB GLOB_NOSORT;
MACRO_GLOB GLOB_NOSPACE;
MACRO_GLOB GLOB_QUOTE;
MACRO_GLOB GLOB_TILDE;
MACRO_GXclear GXand;
MACRO_GXclear GXandInverted;
MACRO_GXclear GXandReverse;
MACRO_GXclear GXclear;
MACRO_GXclear GXcopy;
MACRO_GXclear GXcopyInverted;
MACRO_GXclear GXequiv;
MACRO_GXclear GXinvert;
MACRO_GXclear GXnand;
MACRO_GXclear GXnoop;
MACRO_GXclear GXnor;
MACRO_GXclear GXor;
MACRO_GXclear GXorInverted;
MACRO_GXclear GXorReverse;
MACRO_GXclear GXset;
MACRO_GXclear GXxor;
MACRO_GrabSuccess GrabFrozen;
MACRO_GrabSuccess GrabInvalidTime;
MACRO_GrabModeSync GrabModeAsync;
MACRO_GrabModeSync GrabModeSync;
MACRO_GrabSuccess GrabNotViewable;
MACRO_GrabSuccess GrabSuccess;
MACRO_KeyPress GraphicsExpose;
MACRO_KeyPress GravityNotify;
MACRO_StaticGray GrayScale;
MACRO_BFD_NO HAS_DEBUG;
MACRO_BFD_NO HAS_LINENO;
MACRO_BFD_NO HAS_LOCALS;
MACRO_BFD_NO HAS_RELOC;
MACRO_BFD_NO HAS_SYMS;
MACRO_CS5 HUPCL;
MACRO_NGROUPS_0 HZ;
MACRO_HostInsert HostDelete;
MACRO_HostInsert HostInsert;
MACRO_F I386AIXMAGIC;
MACRO_F I386MAGIC;
MACRO_F I386PTXMAGIC;
MACRO_ISIG ICANON;
MACRO_IGNBRK ICRNL;
MACRO_ISIG IEXTEN;
MACRO_IGNBRK IGNBRK;
MACRO_IGNBRK IGNCR;
MACRO_IGNBRK IGNPAR;
MACRO_IMAGE_COMDAT IMAGE_COMDAT_SELECT_ANY;
MACRO_IMAGE_COMDAT IMAGE_COMDAT_SELECT_ASSOCIATIVE;
MACRO_IMAGE_COMDAT IMAGE_COMDAT_SELECT_EXACT_MATCH;
MACRO_IMAGE_COMDAT IMAGE_COMDAT_SELECT_NODUPLICATES;
MACRO_IMAGE_COMDAT IMAGE_COMDAT_SELECT_SAME_SIZE;
MACRO_IMAGE IMAGE_FILE_32BIT_MACHINE;
MACRO_IMAGE IMAGE_FILE_BYTES_REVERSED_HI;
MACRO_IMAGE IMAGE_FILE_BYTES_REVERSED_LO;
MACRO_IMAGE IMAGE_FILE_DEBUG_STRIPPED;
MACRO_IMAGE IMAGE_FILE_DLL;
MACRO_IMAGE IMAGE_FILE_EXECUTABLE_IMAGE;
MACRO_IMAGE IMAGE_FILE_LINE_NUMS_STRIPPED;
MACRO_IMAGE IMAGE_FILE_LOCAL_SYMS_STRIPPED;
MACRO_IMAGE IMAGE_FILE_RELOCS_STRIPPED;
MACRO_IMAGE IMAGE_FILE_SYSTEM;
MACRO_IMAGE_SCN IMAGE_SCN_ALIGN_16BYTES;
MACRO_IMAGE_SCN IMAGE_SCN_ALIGN_1BYTES;
MACRO_IMAGE_SCN IMAGE_SCN_ALIGN_2BYTES;
MACRO_IMAGE_SCN IMAGE_SCN_ALIGN_32BYTES;
MACRO_IMAGE_SCN IMAGE_SCN_ALIGN_4BYTES;
MACRO_IMAGE_SCN IMAGE_SCN_ALIGN_64BYTES;
MACRO_IMAGE_SCN IMAGE_SCN_ALIGN_8BYTES;
MACRO_IMAGE_SCN IMAGE_SCN_CNT_CODE;
MACRO_IMAGE_SCN IMAGE_SCN_CNT_INITIALIZED_DATA;
MACRO_IMAGE_SCN IMAGE_SCN_CNT_UNINITIALIZED_DATA;
MACRO_IMAGE_SCN IMAGE_SCN_LNK_COMDAT;
MACRO_IMAGE_SCN IMAGE_SCN_LNK_INFO;
MACRO_IMAGE_SCN IMAGE_SCN_LNK_NRELOC_OVFL;
MACRO_IMAGE_SCN IMAGE_SCN_LNK_OTHER;
MACRO_IMAGE_SCN IMAGE_SCN_LNK_REMOVE;
MACRO_IMAGE_SCN IMAGE_SCN_MEM_16BIT;
MACRO_IMAGE_SCN IMAGE_SCN_MEM_DISCARDABLE;
MACRO_IMAGE_SCN IMAGE_SCN_MEM_EXECUTE;
MACRO_IMAGE_SCN IMAGE_SCN_MEM_FARDATA;
MACRO_IMAGE_SCN IMAGE_SCN_MEM_LOCKED;
MACRO_IMAGE_SCN IMAGE_SCN_MEM_NOT_CACHED;
MACRO_IMAGE_SCN IMAGE_SCN_MEM_NOT_PAGED;
MACRO_IMAGE_SCN IMAGE_SCN_MEM_PRELOAD;
MACRO_IMAGE_SCN IMAGE_SCN_MEM_PURGEABLE;
MACRO_IMAGE_SCN IMAGE_SCN_MEM_READ;
MACRO_IMAGE_SCN IMAGE_SCN_MEM_SHARED;
MACRO_IMAGE_SCN IMAGE_SCN_MEM_WRITE;
MACRO_IMAGE_SCN IMAGE_SCN_TYPE_NO_PAD;
MACRO_IGNBRK IMAXBEL;
MACRO_INIT INIT_PROCESS;
MACRO_IGNBRK INLCR;
MACRO_IGNBRK INPCK;
MACRO_INT INT_MAX;
MACRO_IOV IOV_MAX;
MACRO_ISIG ISIG;
MACRO_IGNBRK ISTRIP;
MACRO_ITIMER ITIMER_PROF;
MACRO_ITIMER ITIMER_REAL;
MACRO_ITIMER ITIMER_VIRTUAL;
MACRO_IGNBRK IUCLC;
MACRO_IGNBRK IXANY;
MACRO_IGNBRK IXOFF;
MACRO_IGNBRK IXON;
MACRO_ClipByChildren IncludeInferiors;
MACRO_PointerWindow InputFocus;
MACRO_InputOutput InputOnly;
MACRO_InputOutput InputOutput;
MACRO_IsUnmapped IsUnmapped;
MACRO_IsUnmapped IsUnviewable;
MACRO_IsUnmapped IsViewable;
MACRO_JoinMiter JoinBevel;
MACRO_JoinMiter JoinMiter;
MACRO_JoinMiter JoinRound;
MACRO_KBKeyClickPercent KBAutoRepeatMode;
MACRO_KBKeyClickPercent KBBellDuration;
MACRO_KBKeyClickPercent KBBellPercent;
MACRO_KBKeyClickPercent KBBellPitch;
MACRO_KBKeyClickPercent KBKey;
MACRO_KBKeyClickPercent KBKeyClickPercent;
MACRO_KBKeyClickPercent KBLed;
MACRO_KBKeyClickPercent KBLedMode;
MACRO_KeyPress KeyPress;
MACRO_NoEventMask KeyPressMask;
MACRO_KeyPress KeyRelease;
MACRO_NoEventMask KeyReleaseMask;
MACRO_KeyPress KeymapNotify;
MACRO_NoEventMask KeymapStateMask;
MACRO_KeyPress LASTEvent;
MACRO_LC LC_ALL;
MACRO_LC LC_COLLATE;
MACRO_LC LC_CTYPE;
MACRO_LC LC_MONETARY;
MACRO_LC LC_NUMERIC;
MACRO_LC LC_TIME;
MACRO_LINESZ LINESZ;
MACRO_LITTLE LITTLE_ENDIAN;
MACRO_INIT LOGIN_PROCESS;
MACRO_LOG LOG_ALERT;
MACRO_LOG_KERN LOG_AUTH;
MACRO_LOG_KERN LOG_AUTHPRIV;
MACRO_LOG_PID LOG_CONS;
MACRO_LOG LOG_CRIT;
MACRO_LOG_KERN LOG_CRON;
MACRO_LOG_KERN LOG_DAEMON;
MACRO_LOG LOG_DEBUG;
MACRO_LOG LOG_EMERG;
MACRO_LOG LOG_ERR;
MACRO_LOG_NFACILITIES LOG_FACMASK;
MACRO_LOG_KERN LOG_FTP;
MACRO_LOG LOG_INFO;
MACRO_LOG_KERN LOG_KERN;
MACRO_LOG_KERN LOG_LOCAL0;
MACRO_LOG_KERN LOG_LOCAL1;
MACRO_LOG_KERN LOG_LOCAL2;
MACRO_LOG_KERN LOG_LOCAL3;
MACRO_LOG_KERN LOG_LOCAL4;
MACRO_LOG_KERN LOG_LOCAL5;
MACRO_LOG_KERN LOG_LOCAL6;
MACRO_LOG_KERN LOG_LOCAL7;
MACRO_LOG_KERN LOG_LPR;
MACRO_LOG_KERN LOG_MAIL;
MACRO_LOG_PID LOG_NDELAY;
MACRO_LOG_KERN LOG_NEWS;
MACRO_LOG_NFACILITIES LOG_NFACILITIES;
MACRO_LOG LOG_NOTICE;
MACRO_LOG_PID LOG_NOWAIT;
MACRO_LOG_PID LOG_ODELAY;
MACRO_LOG_PID LOG_PERROR;
MACRO_LOG_PID LOG_PID;
MACRO_LOG_PRIMASK LOG_PRIMASK;
MACRO_LOG_KERN LOG_SYSLOG;
MACRO_LOG_KERN LOG_USER;
MACRO_LOG_KERN LOG_UUCP;
MACRO_LOG LOG_WARNING;
MACRO_LONG_LONG LONG_LONG_MAX;
MACRO_LONG LONG_MAX;
MACRO_LSBFirst LSBFirst;
MACRO_LYNXCOFFMAGIC LYNXCOFFMAGIC;
MACRO_L_SET L_CURR;
MACRO_L_INCR L_INCR;
MACRO_L_SET L_SET;
MACRO_L_INCR L_XTND;
MACRO_L_cuserid L_cuserid;
MACRO_L L_tmpnam;
MACRO_Success LastExtensionError;
MACRO_KeyPress LeaveNotify;
MACRO_NoEventMask LeaveWindowMask;
MACRO_LedModeOff LedModeOff;
MACRO_LedModeOff LedModeOn;
MACRO_LineSolid LineDoubleDash;
MACRO_LineSolid LineOnOffDash;
MACRO_LineSolid LineSolid;
MACRO_ShiftMapIndex LockMapIndex;
MACRO_ShiftMask LockMask;
MACRO_RaiseLowest LowerHighest;
MACRO_MAP_ANON MAP_ANON;
MACRO_MAP MAP_ANONYMOUS;
MACRO_MAP MAP_FILE;
MACRO_MAP MAP_FIXED;
MACRO_MAP MAP_PRIVATE;
MACRO_MAP MAP_SHARED;
MACRO_MAP MAP_TYPE;
MACRO_MAXHOSTNAMELEN MAXHOSTNAMELEN;
MACRO__PC MAXNAMLEN;
MACRO_MAXPATHLEN MAXPATHLEN;
MACRO_MAX MAX_MEM_LEVEL;
MACRO_MAX MAX_WBITS;
MACRO_MB MB_LEN_MAX;
$79D62B36508CDCAAC38B030F81566F10 MOUNT_AUTO;
$79D62B36508CDCAAC38B030F81566F10 MOUNT_BINARY;
$79D62B36508CDCAAC38B030F81566F10 MOUNT_CYGWIN_EXEC;
$79D62B36508CDCAAC38B030F81566F10 MOUNT_EXEC;
$79D62B36508CDCAAC38B030F81566F10 MOUNT_SYMLINK;
$79D62B36508CDCAAC38B030F81566F10 MOUNT_SYSTEM;
MACRO_LSBFirst MSBFirst;
MACRO_MS MS_ASYNC;
MACRO_MS MS_INVALIDATE;
MACRO_MS MS_SYNC;
MACRO_KeyPress MapNotify;
MACRO_KeyPress MapRequest;
MACRO_MappingSuccess MappingBusy;
MACRO_MappingSuccess MappingFailed;
MACRO_MappingModifier MappingKeyboard;
MACRO_MappingModifier MappingModifier;
MACRO_KeyPress MappingNotify;
MACRO_MappingModifier MappingPointer;
MACRO_MappingSuccess MappingSuccess;
MACRO_ShiftMapIndex Mod1MapIndex;
MACRO_ShiftMask Mod1Mask;
MACRO_ShiftMapIndex Mod2MapIndex;
MACRO_ShiftMask Mod2Mask;
MACRO_ShiftMapIndex Mod3MapIndex;
MACRO_ShiftMask Mod3Mask;
MACRO_ShiftMapIndex Mod4MapIndex;
MACRO_ShiftMask Mod4Mask;
MACRO_ShiftMapIndex Mod5MapIndex;
MACRO_ShiftMask Mod5Mask;
MACRO_KeyPress MotionNotify;
MACRO_TK_SCROLL MouseWheelEvent;
MACRO_TK_SCROLL MouseWheelMask;
MACRO_NBBY NBBY;
MACRO_VDISCARD NCCS;
MACRO_NGROUPS_0 NGROUPS;
MACRO_NGROUPS NGROUPS_MAX;
MACRO_NL0 NL0;
MACRO_NL0 NL1;
MACRO_CR0 NLDLY;
MACRO_NOFILE NOFILE;
MACRO_ISIG NOFLSH;
MACRO_SIGPOLL NSIG;
MACRO_NSUBEXP NSUBEXP;
MACRO_NSWTCH NSWTCH;
MACRO_NT_DEF NT_DEF_COMMIT;
MACRO_NT NT_DEF_RESERVE;
MACRO_NT NT_FILE_ALIGNMENT;
MACRO_STMAGIC NT_SECTION_ALIGNMENT;
MACRO_NT_SIGNATURE NT_SIGNATURE;
MACRO_NULL NULL;
MACRO_E N_BTMASK;
MACRO_N N_BTSHFT;
MACRO_E N_TMASK;
MACRO_N N_TSHIFT;
MACRO_NeedFunctionPrototypes NeedFunctionPrototypes;
MACRO_NeedVarargsPrototypes NeedNestedPrototypes;
MACRO_NeedVarargsPrototypes NeedVarargsPrototypes;
MACRO_NeedWidePrototypes NeedWidePrototypes;
MACRO_NoEventMask NoEventMask;
MACRO_KeyPress NoExpose;
MACRO_NoSymbol NoSymbol;
MACRO_Complex Nonconvex;
MACRO_None None;
MACRO_ForgetGravity NorthEastGravity;
MACRO_ForgetGravity NorthGravity;
MACRO_ForgetGravity NorthWestGravity;
MACRO_NotUseful NotUseful;
MACRO_NotifyAncestor NotifyAncestor;
MACRO_NotifyAncestor NotifyDetailNone;
MACRO_NotifyNormal NotifyGrab;
MACRO_NotifyHint NotifyHint;
MACRO_NotifyAncestor NotifyInferior;
MACRO_NotifyAncestor NotifyNonlinear;
MACRO_NotifyAncestor NotifyNonlinearVirtual;
MACRO_NotifyNormal NotifyNormal;
MACRO_NotifyAncestor NotifyPointer;
MACRO_NotifyAncestor NotifyPointerRoot;
MACRO_NotifyNormal NotifyUngrab;
MACRO_NotifyAncestor NotifyVirtual;
MACRO_NotifyNormal NotifyWhileGrabbed;
MACRO_OARMAG1 OARMAG1;
MACRO_OARMAG1 OARMAG2;
MACRO_OPOST OCRNL;
MACRO_FF0 OFDEL;
MACRO_OPOST OFILL;
MACRO_OPOST OLCUC;
MACRO_AOUTHDRSZ OMAGIC;
MACRO_OPOST ONLCR;
MACRO_OPOST ONLRET;
MACRO_OPOST ONOCR;
MACRO_OPOST OPOST;
MACRO_DOMAIN OVERFLOW;
MACRO_O O_APPEND;
MACRO_O O_CREAT;
MACRO_O O_EXCL;
MACRO_O_NDELAY O_NDELAY;
MACRO_O O_NOCTTY;
MACRO_O O_NONBLOCK;
MACRO_O O_RDONLY;
MACRO_O O_RDWR;
MACRO_O O_SYNC;
MACRO_O O_TRUNC;
MACRO_O O_WRONLY;
MACRO_Above Opposite;
MACRO_NoEventMask OwnerGrabButtonMask;
MACRO_CS5 PARENB;
MACRO_IGNBRK PARMRK;
MACRO_CS5 PARODD;
MACRO_PATH PATH_MAX;
MACRO_DOMAIN PLOSS;
MACRO_PNG_NO PNG_ALL_FILTERS;
MACRO_PNG_BACKGROUND PNG_BACKGROUND_GAMMA_FILE;
MACRO_PNG_BACKGROUND PNG_BACKGROUND_GAMMA_SCREEN;
MACRO_PNG_BACKGROUND PNG_BACKGROUND_GAMMA_UNIQUE;
MACRO_PNG_BACKGROUND PNG_BACKGROUND_GAMMA_UNKNOWN;
MACRO_PNG_COLOR PNG_COLOR_MASK_ALPHA;
MACRO_PNG_COLOR PNG_COLOR_MASK_COLOR;
MACRO_PNG_COLOR PNG_COLOR_MASK_PALETTE;
MACRO_PNG_COLOR_TYPE PNG_COLOR_TYPE_GRAY;
MACRO_PNG_COLOR_TYPE_GRAY PNG_COLOR_TYPE_GRAY_ALPHA;
MACRO_PNG_COLOR_TYPE PNG_COLOR_TYPE_PALETTE;
MACRO_PNG_COLOR_TYPE_RGB PNG_COLOR_TYPE_RGB;
MACRO_PNG_COLOR_TYPE_RGB PNG_COLOR_TYPE_RGB_ALPHA;
MACRO_PNG_COLOR_TYPE_GRAY PNG_COMPRESSION_TYPE_BASE;
MACRO_PNG_COLOR_TYPE_GRAY PNG_COMPRESSION_TYPE_DEFAULT;
MACRO_PNG_CRC PNG_CRC_DEFAULT;
MACRO_PNG_CRC PNG_CRC_ERROR_QUIT;
MACRO_PNG_CRC PNG_CRC_NO_CHANGE;
MACRO_PNG_CRC PNG_CRC_QUIET_USE;
MACRO_PNG_CRC PNG_CRC_WARN_DISCARD;
MACRO_PNG_CRC PNG_CRC_WARN_USE;
MACRO_PNG_EQUATION PNG_EQUATION_ARBITRARY;
MACRO_PNG_EQUATION PNG_EQUATION_BASE_E;
MACRO_PNG_EQUATION PNG_EQUATION_HYPERBOLIC;
MACRO_PNG_EQUATION PNG_EQUATION_LAST;
MACRO_PNG_EQUATION PNG_EQUATION_LINEAR;
MACRO_PNG_FILLER PNG_FILLER_AFTER;
MACRO_PNG_FILLER PNG_FILLER_BEFORE;
MACRO_PNG_NO PNG_FILTER_AVG;
MACRO_PNG_FILTER_HEURISTIC PNG_FILTER_HEURISTIC_DEFAULT;
MACRO_PNG_FILTER_HEURISTIC PNG_FILTER_HEURISTIC_LAST;
MACRO_PNG_FILTER_HEURISTIC PNG_FILTER_HEURISTIC_UNWEIGHTED;
MACRO_PNG_FILTER_HEURISTIC PNG_FILTER_HEURISTIC_WEIGHTED;
MACRO_PNG_NO PNG_FILTER_NONE;
MACRO_PNG_NO PNG_FILTER_PAETH;
MACRO_PNG_NO PNG_FILTER_SUB;
MACRO_PNG_COLOR_TYPE_GRAY PNG_FILTER_TYPE_BASE;
MACRO_PNG_COLOR_TYPE_GRAY PNG_FILTER_TYPE_DEFAULT;
MACRO_PNG_NO PNG_FILTER_UP;
MACRO_PNG_FILTER PNG_FILTER_VALUE_AVG;
MACRO_PNG_FILTER PNG_FILTER_VALUE_LAST;
MACRO_PNG_FILTER PNG_FILTER_VALUE_NONE;
MACRO_PNG_FILTER PNG_FILTER_VALUE_PAETH;
MACRO_PNG_FILTER PNG_FILTER_VALUE_SUB;
MACRO_PNG_FILTER PNG_FILTER_VALUE_UP;
MACRO_PNG_FREE PNG_FREE_ALL;
MACRO_PNG_FREE PNG_FREE_HIST;
MACRO_PNG_FREE PNG_FREE_ICCP;
MACRO_PNG_FREE PNG_FREE_LIST;
MACRO_PNG_FREE PNG_FREE_PCAL;
MACRO_PNG_FREE PNG_FREE_PLTE;
MACRO_PNG_FREE PNG_FREE_ROWS;
MACRO_PNG_FREE PNG_FREE_SCAL;
MACRO_PNG_FREE PNG_FREE_SPLT;
MACRO_PNG_FREE PNG_FREE_TEXT;
MACRO_PNG_FREE PNG_FREE_TRNS;
MACRO_PNG_FREE PNG_FREE_UNKN;
MACRO_PNG_INFO PNG_INFO_IDAT;
MACRO_PNG_INFO PNG_INFO_PLTE;
MACRO_PNG_INFO PNG_INFO_bKGD;
MACRO_PNG_INFO PNG_INFO_cHRM;
MACRO_PNG_INFO PNG_INFO_gAMA;
MACRO_PNG_INFO PNG_INFO_hIST;
MACRO_PNG_INFO PNG_INFO_iCCP;
MACRO_PNG_INFO PNG_INFO_oFFs;
MACRO_PNG_INFO PNG_INFO_pCAL;
MACRO_PNG_INFO PNG_INFO_pHYs;
MACRO_PNG_INFO PNG_INFO_sBIT;
MACRO_PNG_INFO PNG_INFO_sCAL;
MACRO_PNG_INFO PNG_INFO_sPLT;
MACRO_PNG_INFO PNG_INFO_sRGB;
MACRO_PNG_INFO PNG_INFO_tIME;
MACRO_PNG_INFO PNG_INFO_tRNS;
MACRO_PNG_INTERLACE PNG_INTERLACE_ADAM7;
MACRO_PNG_INTERLACE PNG_INTERLACE_LAST;
MACRO_PNG_COLOR_TYPE_GRAY PNG_INTERLACE_NONE;
MACRO_PNG_TEXT PNG_ITXT_COMPRESSION_NONE;
MACRO_PNG_TEXT PNG_ITXT_COMPRESSION_zTXt;
MACRO_PNG_sRGB PNG_KEYWORD_MAX_LENGTH;
MACRO_PNG_LIBPNG PNG_LIBPNG_VER;
MACRO_PNG_TEXT PNG_MAX_UINT;
MACRO_PNG_NO PNG_NO_FILTERS;
MACRO_PNG_OFFSET PNG_OFFSET_LAST;
MACRO_PNG_OFFSET PNG_OFFSET_MICROMETER;
MACRO_PNG_OFFSET PNG_OFFSET_PIXEL;
MACRO_PNG_RESOLUTION PNG_RESOLUTION_LAST;
MACRO_PNG_RESOLUTION PNG_RESOLUTION_METER;
MACRO_PNG_RESOLUTION PNG_RESOLUTION_UNKNOWN;
MACRO_PNG_SCALE PNG_SCALE_LAST;
MACRO_PNG_SCALE PNG_SCALE_METER;
MACRO_PNG_SCALE PNG_SCALE_RADIAN;
MACRO_PNG_SCALE PNG_SCALE_UNKNOWN;
MACRO_PNG_TEXT PNG_TEXT_COMPRESSION_LAST;
MACRO_PNG_LIBPNG PNG_TEXT_COMPRESSION_NONE;
MACRO_PNG_LIBPNG PNG_TEXT_COMPRESSION_NONE_WR;
MACRO_PNG_TEXT PNG_TEXT_COMPRESSION_zTXt;
MACRO_PNG_LIBPNG PNG_TEXT_COMPRESSION_zTXt_WR;
MACRO_PNG_TRANSFORM PNG_TRANSFORM_BGR;
MACRO_PNG_TRANSFORM PNG_TRANSFORM_EXPAND;
MACRO_PNG_TRANSFORM PNG_TRANSFORM_IDENTITY;
MACRO_PNG_TRANSFORM_INVERT PNG_TRANSFORM_INVERT_ALPHA;
MACRO_PNG_TRANSFORM PNG_TRANSFORM_INVERT_MONO;
MACRO_PNG_TRANSFORM PNG_TRANSFORM_PACKING;
MACRO_PNG_TRANSFORM PNG_TRANSFORM_PACKSWAP;
MACRO_PNG_TRANSFORM PNG_TRANSFORM_SHIFT;
MACRO_PNG_TRANSFORM PNG_TRANSFORM_STRIP_16;
MACRO_PNG_TRANSFORM PNG_TRANSFORM_STRIP_ALPHA;
MACRO_PNG_TRANSFORM_INVERT PNG_TRANSFORM_STRIP_FILLER;
MACRO_PNG_TRANSFORM PNG_TRANSFORM_SWAP_ALPHA;
MACRO_PNG_TRANSFORM PNG_TRANSFORM_SWAP_ENDIAN;
MACRO_PNG PNG_ZBUF_SIZE;
MACRO_PNG_sRGB PNG_sRGB_INTENT_ABSOLUTE;
MACRO_PNG_sRGB PNG_sRGB_INTENT_LAST;
MACRO_PNG_sRGB PNG_sRGB_INTENT_PERCEPTUAL;
MACRO_PNG_sRGB PNG_sRGB_INTENT_RELATIVE;
MACRO_PNG_sRGB PNG_sRGB_INTENT_SATURATION;
MACRO_PROT PROT_EXEC;
MACRO_PROT PROT_NONE;
MACRO_PROT PROT_READ;
MACRO_PROT PROT_WRITE;
MACRO_None ParentRelative;
MACRO_PlaceOnTop PlaceOnBottom;
MACRO_PlaceOnTop PlaceOnTop;
MACRO_NoEventMask PointerMotionHintMask;
MACRO_NoEventMask PointerMotionMask;
MACRO_PointerRoot PointerRoot;
MACRO_PointerWindow PointerWindow;
MACRO_DontPreferBlanking PreferBlanking;
MACRO_PropModeReplace PropModeAppend;
MACRO_PropModeReplace PropModePrepend;
MACRO_PropModeReplace PropModeReplace;
MACRO_NoEventMask PropertyChangeMask;
MACRO_PropertyNewValue PropertyDelete;
MACRO_PropertyNewValue PropertyNewValue;
MACRO_KeyPress PropertyNotify;
MACRO_StaticGray PseudoColor;
MACRO_QueuedAlready QueuedAfterFlush;
MACRO_QueuedAlready QueuedAfterReading;
MACRO_QueuedAlready QueuedAlready;
MACRO_RAND RAND_MAX;
MACRO_RELSZ RELSZ;
MACRO_RTLD RTLD_GLOBAL;
MACRO_RTLD RTLD_LAZY;
MACRO_RTLD RTLD_NOW;
MACRO_RUSAGE RUSAGE_CHILDREN;
MACRO_RUSAGE RUSAGE_SELF;
MACRO_F_OK R_OK;
MACRO_RaiseLowest RaiseLowest;
MACRO_KeyPress ReparentNotify;
MACRO_AsyncPointer ReplayKeyboard;
MACRO_AsyncPointer ReplayPointer;
MACRO_NoEventMask ResizeRedirectMask;
MACRO_KeyPress ResizeRequest;
MACRO_DestroyAll RetainPermanent;
MACRO_DestroyAll RetainTemporary;
MACRO_RevertToNone RevertToNone;
MACRO_RevertToNone RevertToParent;
MACRO_RevertToNone RevertToPointerRoot;
MACRO_SARMAG SARMAG;
MACRO_SA SA_NOCLDSTOP;
MACRO_SCHAR SCHAR_MAX;
MACRO_MB SCHAR_MIN;
MACRO_SCNHSZ SCNHSZ;
MACRO_SECSPERDAY SECSPERDAY;
MACRO_SEC SEC_ALLOC;
MACRO_SEC_HAS SEC_BLOCK;
MACRO_SEC_HAS SEC_CLINK;
MACRO_SEC SEC_CODE;
MACRO_SEC_HAS SEC_COFF_SHARED_LIBRARY;
MACRO_SEC SEC_CONSTRUCTOR;
MACRO_SEC SEC_CONSTRUCTOR_BSS;
MACRO_SEC SEC_CONSTRUCTOR_DATA;
MACRO_SEC SEC_CONSTRUCTOR_TEXT;
MACRO_SEC SEC_DATA;
MACRO_SEC_HAS SEC_DEBUGGING;
MACRO_SEC_HAS SEC_EXCLUDE;
MACRO_SEC_HAS SEC_HAS_CONTENTS;
MACRO_SEC_HAS SEC_IN_MEMORY;
MACRO_SEC_HAS SEC_IS_COMMON;
MACRO_SEC_HAS SEC_KEEP;
MACRO_SEC_HAS SEC_LINKER_CREATED;
MACRO_SEC_HAS SEC_LINK_DUPLICATES;
MACRO_SEC_HAS SEC_LINK_DUPLICATES_DISCARD;
MACRO_SEC_HAS SEC_LINK_DUPLICATES_ONE_ONLY;
MACRO_SEC_HAS SEC_LINK_DUPLICATES_SAME_CONTENTS;
MACRO_SEC_HAS SEC_LINK_DUPLICATES_SAME_SIZE;
MACRO_SEC_HAS SEC_LINK_ONCE;
MACRO_SEC SEC_LOAD;
MACRO_SEC_HAS SEC_NEVER_LOAD;
MACRO_SEC SEC_NO_FLAGS;
MACRO_SEC SEC_READONLY;
MACRO_SEC SEC_RELOC;
MACRO_SEC SEC_ROM;
MACRO_SEC_HAS SEC_SHARED;
MACRO_SEC_HAS SEC_SMALL_DATA;
MACRO_SEC_HAS SEC_SORT_ENTRIES;
MACRO_SEEK SEEK_CUR;
MACRO_SEEK SEEK_END;
MACRO_SEEK SEEK_SET;
MACRO_STMAGIC SHMAGIC;
MACRO_SHRT SHRT_MAX;
MACRO_CHAR_MAX SHRT_MIN;
MACRO_SIGABRT SIGABRT;
MACRO_SIGABRT SIGALRM;
MACRO_SIGABRT SIGBUS;
MACRO_SIGABRT SIGCHLD;
MACRO_SIGCLD SIGCLD;
MACRO_SIGABRT SIGCONT;
MACRO_SIGABRT SIGEMT;
MACRO_SIGABRT SIGFPE;
MACRO_SIGHUP SIGHUP;
MACRO_SIGHUP SIGILL;
MACRO_SIGHUP SIGINT;
MACRO_SIGCLD SIGIO;
MACRO_SIGHUP SIGIOT;
MACRO_SIGABRT SIGKILL;
MACRO_SIGPOLL SIGLOST;
MACRO_SIGABRT SIGPIPE;
MACRO_SIGPOLL SIGPOLL;
MACRO_SIGPOLL SIGPROF;
MACRO_SIGHUP SIGQUIT;
MACRO_SIGABRT SIGSEGV;
MACRO_SIGABRT SIGSTOP;
MACRO_SIGABRT SIGSYS;
MACRO_SIGABRT SIGTERM;
MACRO_SIGHUP SIGTRAP;
MACRO_SIGABRT SIGTSTP;
MACRO_SIGCLD SIGTTIN;
MACRO_SIGCLD SIGTTOU;
MACRO_SIGABRT SIGURG;
MACRO_SIGPOLL SIGUSR1;
MACRO_SIGPOLL SIGUSR2;
MACRO_SIGPOLL SIGVTALRM;
MACRO_SIGPOLL SIGWINCH;
MACRO_SIGPOLL SIGXCPU;
MACRO_SIGPOLL SIGXFSZ;
MACRO_SIG SIG_BLOCK;
MACRO_SIG SIG_SETMASK;
MACRO_SIG SIG_UNBLOCK;
MACRO_DOMAIN SING;
MACRO_IOV SSIZE_MAX;
MACRO_STDIN STDERR_FILENO;
MACRO_STDIN STDIN_FILENO;
MACRO_STDIN STDOUT_FILENO;
MACRO_STMAGIC STMAGIC;
MACRO_SYMESZ SYMESZ;
MACRO_S S_BLKSIZE;
MACRO_S_ENFMT S_ENFMT;
MACRO_S_ISGID S_IEXEC;
MACRO_S_IFBLK S_IFBLK;
MACRO_S_IFDIR S_IFCHR;
MACRO_S_IFDIR S_IFDIR;
MACRO_S_IFIFO S_IFIFO;
MACRO_S_IFBLK S_IFLNK;
MACRO_S_ENFMT S_IFMT;
MACRO_S_IFBLK S_IFREG;
MACRO_S_IFBLK S_IFSOCK;
MACRO_S_ISGID S_IREAD;
MACRO_S_IRGRP S_IRGRP;
MACRO_S_IROTH S_IROTH;
MACRO_S_IRUSR S_IRUSR;
MACRO_S_IRUSR S_IRWXG;
MACRO_S_IRGRP S_IRWXO;
MACRO_S_IFIFO S_IRWXU;
MACRO_S_ISGID S_ISGID;
MACRO_S S_ISUID;
MACRO_S_ISGID S_ISVTX;
MACRO_S_IRGRP S_IWGRP;
MACRO_S_IROTH S_IWOTH;
MACRO_S_ISGID S_IWRITE;
MACRO_S_IRUSR S_IWUSR;
MACRO_S_IRGRP S_IXGRP;
MACRO_S_IROTH S_IXOTH;
MACRO_S_IRUSR S_IXUSR;
MACRO_ScreenSaverReset ScreenSaverActive;
MACRO_ScreenSaverReset ScreenSaverReset;
MACRO_KeyPress SelectionClear;
MACRO_KeyPress SelectionNotify;
MACRO_KeyPress SelectionRequest;
MACRO_SetModeInsert SetModeDelete;
MACRO_SetModeInsert SetModeInsert;
MACRO_ShiftMapIndex ShiftMapIndex;
MACRO_ShiftMask ShiftMask;
MACRO_ForgetGravity SouthEastGravity;
MACRO_ForgetGravity SouthGravity;
MACRO_ForgetGravity SouthWestGravity;
MACRO_StaticGray StaticColor;
MACRO_ForgetGravity StaticGravity;
MACRO_StaticGray StaticGray;
MACRO_CursorShape StippleShape;
MACRO_NoEventMask StructureNotifyMask;
MACRO_NoEventMask SubstructureNotifyMask;
MACRO_NoEventMask SubstructureRedirectMask;
MACRO_Success Success;
MACRO_AsyncPointer SyncBoth;
MACRO_AsyncPointer SyncKeyboard;
MACRO_AsyncPointer SyncPointer;
MACRO_TAB0 TAB0;
MACRO_TAB0 TAB1;
MACRO_TAB0 TAB2;
MACRO_TAB0 TAB3;
MACRO_BS0 TABDLY;
MACRO_TCIFLUSH TCFLSH;
MACRO_TCOOFF TCGETA;
MACRO_TCIFLUSH TCIFLUSH;
MACRO_TCOOFF TCIOFF;
MACRO_TCIFLUSH TCIOFLUSH;
MACRO_TCOOFF TCION;
MACRO_TCL_DONT_WAIT TCL_ALL_EVENTS;
MACRO_TCL_GLOBAL TCL_APPEND_VALUE;
MACRO_TCL_OK TCL_BREAK;
MACRO_TCL_OK TCL_CONTINUE;
MACRO_TCL_DONT TCL_DONT_USE_BRACES;
MACRO_TCL_DONT_WAIT TCL_DONT_WAIT;
$75C8E7CA27BE1E0F4E6BF64D1993A788 TCL_DOUBLE;
MACRO_TCL_MAX TCL_DOUBLE_SPACE;
MACRO_TCL_DSTRING TCL_DSTRING_STATIC_SIZE;
MACRO_TCL_DYNAMIC TCL_DYNAMIC;
$75C8E7CA27BE1E0F4E6BF64D1993A788 TCL_EITHER;
MACRO_TCL_STDIN TCL_ENFORCE_MODE;
MACRO_TCL_OK TCL_ERROR;
MACRO_TCL_EXACT TCL_EVAL_GLOBAL;
MACRO_TCL_EXACT TCL_EXACT;
MACRO_TCL_SERVICE TCL_EXCEPTION;
MACRO_TCL_DONT_WAIT TCL_FILE_EVENTS;
MACRO_TCL_GLOBAL TCL_GLOBAL_ONLY;
MACRO_TCL_DONT_WAIT TCL_IDLE_EVENTS;
$75C8E7CA27BE1E0F4E6BF64D1993A788 TCL_INT;
MACRO_TCL_GLOBAL TCL_INTERP_DESTROYED;
MACRO_TCL_GLOBAL TCL_LEAVE_ERR_MSG;
MACRO_TCL_LINK TCL_LINK_BOOLEAN;
MACRO_TCL_LINK TCL_LINK_DOUBLE;
MACRO_TCL_LINK TCL_LINK_INT;
MACRO_TCL_LINK TCL_LINK_READ_ONLY;
MACRO_TCL_LINK TCL_LINK_STRING;
MACRO_TCL_GLOBAL TCL_LIST_ELEMENT;
MACRO_TCL TCL_MAJOR_VERSION;
MACRO_TCL_MAX TCL_MAX_PREC;
MACRO_TCL TCL_MINOR_VERSION;
MACRO_TCL_MODE TCL_MODE_BLOCKING;
MACRO_TCL_MODE TCL_MODE_NONBLOCKING;
MACRO_TCL_GLOBAL TCL_NAMESPACE_ONLY;
MACRO_TCL_EXACT TCL_NO_EVAL;
MACRO_TCL_OK TCL_OK;
MACRO_TCL_ONE TCL_ONE_WORD_KEYS;
MACRO_TCL_GLOBAL TCL_PARSE_PART1;
Tcl_PathType TCL_PATH_ABSOLUTE;
Tcl_PathType TCL_PATH_RELATIVE;
Tcl_PathType TCL_PATH_VOLUME_RELATIVE;
$7DE6A019FB8D510204474F438D93B845 TCL_QUEUE_HEAD;
$7DE6A019FB8D510204474F438D93B845 TCL_QUEUE_MARK;
$7DE6A019FB8D510204474F438D93B845 TCL_QUEUE_TAIL;
MACRO_TCL_SERVICE TCL_READABLE;
MACRO_TCL_RELEASE TCL_RELEASE_LEVEL;
MACRO_TCL_RELEASE TCL_RELEASE_SERIAL;
MACRO_TCL_OK TCL_RESULT_SIZE;
MACRO_TCL_OK TCL_RETURN;
MACRO_TCL_SERVICE TCL_SERVICE_ALL;
MACRO_TCL_SERVICE TCL_SERVICE_NONE;
MACRO_TCL_SMALL TCL_SMALL_HASH_TABLE;
MACRO_TCL_VOLATILE TCL_STATIC;
MACRO_TCL_STDIN TCL_STDERR;
MACRO_TCL_STDIN TCL_STDIN;
MACRO_TCL_STDIN TCL_STDOUT;
MACRO_TCL_SMALL TCL_STRING_KEYS;
MACRO_TCL_DONT_WAIT TCL_TIMER_EVENTS;
MACRO_TCL_GLOBAL TCL_TRACE_DESTROYED;
MACRO_TCL_GLOBAL TCL_TRACE_READS;
MACRO_TCL_GLOBAL TCL_TRACE_UNSETS;
MACRO_TCL_GLOBAL TCL_TRACE_WRITES;
Tcl_EolTranslation TCL_TRANSLATE_AUTO;
Tcl_EolTranslation TCL_TRANSLATE_CR;
Tcl_EolTranslation TCL_TRANSLATE_CRLF;
Tcl_EolTranslation TCL_TRANSLATE_LF;
MACRO_TCL_VOLATILE TCL_VOLATILE;
MACRO_TCL_DONT_WAIT TCL_WINDOW_EVENTS;
MACRO_TCL_SERVICE TCL_WRITABLE;
MACRO_TCIFLUSH TCOFLUSH;
MACRO_TCOOFF TCOOFF;
MACRO_TCOOFF TCOON;
MACRO_TCSAFLUSH TCSADFLUSH;
MACRO_TCSAFLUSH TCSADRAIN;
MACRO_TCSAFLUSH TCSAFLUSH;
MACRO_TCSAFLUSH TCSANOW;
MACRO_TCOOFF TCSETA;
MACRO_TCOOFF TCSETAF;
MACRO_TCOOFF TCSETAW;
MACRO_TIOCGWINSZ TIOCGWINSZ;
MACRO_TCSAFLUSH TIOCPKT;
MACRO_TIOCPKT TIOCPKT_DATA;
MACRO_TIOCPKT TIOCPKT_DOSTOP;
MACRO_TIOCPKT TIOCPKT_FLUSHREAD;
MACRO_TIOCPKT TIOCPKT_FLUSHWRITE;
MACRO_TIOCPKT TIOCPKT_NOSTOP;
MACRO_TIOCPKT TIOCPKT_START;
MACRO_TIOCPKT TIOCPKT_STOP;
MACRO_TIOCGWINSZ TIOCSWINSZ;
MACRO_TIX_DEFAULT TIX_DEFAULT_LEN;
MACRO_TIX_DEFAULT TIX_DEFAULT_SUBCMD;
MACRO_TIX_RELIEF TIX_RELIEF_FLAT;
MACRO_TIX_RELIEF TIX_RELIEF_GROOVE;
MACRO_TIX_RELIEF TIX_RELIEF_RAISED;
MACRO_TIX_RELIEF TIX_RELIEF_RIDGE;
MACRO_TIX_RELIEF TIX_RELIEF_SOLID;
MACRO_TIX_RELIEF TIX_RELIEF_SUNKEN;
MACRO_TIX TIX_STDIN_ALWAYS;
MACRO_TIX TIX_STDIN_NONE;
MACRO_TIX TIX_STDIN_OPTIONAL;
MACRO_TIX_UNIQUE TIX_UNDEFINED;
MACRO_TIX_UNIQUE TIX_UNIQUE;
MACRO_TIX_VAR TIX_VAR_ARGS;
MACRO_TK_3D TK_3D_DARK_GC;
MACRO_TK_3D TK_3D_FLAT_GC;
MACRO_TK_3D TK_3D_LIGHT_GC;
MACRO_TK_WINDOW TK_ALL_EVENTS;
MACRO_TK_MAPPED TK_ALREADY_DEAD;
$5252AF58AF7525DA13AA82FD1F51B9F5 TK_ANCHOR_CENTER;
$5252AF58AF7525DA13AA82FD1F51B9F5 TK_ANCHOR_E;
$5252AF58AF7525DA13AA82FD1F51B9F5 TK_ANCHOR_N;
$5252AF58AF7525DA13AA82FD1F51B9F5 TK_ANCHOR_NE;
$5252AF58AF7525DA13AA82FD1F51B9F5 TK_ANCHOR_NW;
$5252AF58AF7525DA13AA82FD1F51B9F5 TK_ANCHOR_S;
$5252AF58AF7525DA13AA82FD1F51B9F5 TK_ANCHOR_SE;
$5252AF58AF7525DA13AA82FD1F51B9F5 TK_ANCHOR_SW;
$5252AF58AF7525DA13AA82FD1F51B9F5 TK_ANCHOR_W;
MACRO_TK_ARGV TK_ARGV_CONSTANT;
MACRO_TK_ARGV TK_ARGV_CONST_OPTION;
MACRO_TK_ARGV_NO TK_ARGV_DONT_SKIP_FIRST_ARG;
MACRO_TK_ARGV TK_ARGV_END;
MACRO_TK_ARGV TK_ARGV_FLOAT;
MACRO_TK_ARGV TK_ARGV_FUNC;
MACRO_TK_ARGV TK_ARGV_GENFUNC;
MACRO_TK_ARGV TK_ARGV_HELP;
MACRO_TK_ARGV TK_ARGV_INT;
MACRO_TK_ARGV_NO TK_ARGV_NO_ABBREV;
MACRO_TK_ARGV_NO TK_ARGV_NO_DEFAULTS;
MACRO_TK_ARGV_NO TK_ARGV_NO_LEFTOVERS;
MACRO_TK_ARGV TK_ARGV_OPTION_NAME_VALUE;
MACRO_TK_ARGV TK_ARGV_OPTION_VALUE;
MACRO_TK_ARGV TK_ARGV_REST;
MACRO_TK_ARGV TK_ARGV_STRING;
MACRO_TK_ARGV TK_ARGV_UID;
MACRO_TK_ARGV TK_ARGV_VERSION;
MACRO_TK_WHOLE TK_AT_LEAST_ONE;
MACRO_TK_MAPPED TK_BOTH_HALVES;
MACRO_TK_MAPPED TK_CHECKED_IC;
MACRO_TK_CONFIG TK_CONFIG_ACTIVE_CURSOR;
MACRO_TK_CONFIG TK_CONFIG_ANCHOR;
MACRO_TK_CONFIG_ARGV TK_CONFIG_ARGV_ONLY;
MACRO_TK_CONFIG TK_CONFIG_BITMAP;
MACRO_TK_CONFIG TK_CONFIG_BOOLEAN;
MACRO_TK_CONFIG TK_CONFIG_BORDER;
MACRO_TK_CONFIG TK_CONFIG_CAP_STYLE;
MACRO_TK_CONFIG TK_CONFIG_COLOR;
MACRO_TK_CONFIG_COLOR TK_CONFIG_COLOR_ONLY;
MACRO_TK_CONFIG TK_CONFIG_CURSOR;
MACRO_TK_CONFIG TK_CONFIG_CUSTOM;
MACRO_TK_CONFIG_COLOR TK_CONFIG_DONT_SET_DEFAULT;
MACRO_TK_CONFIG TK_CONFIG_DOUBLE;
MACRO_TK_CONFIG TK_CONFIG_END;
MACRO_TK_CONFIG TK_CONFIG_FONT;
MACRO_TK_CONFIG TK_CONFIG_INT;
MACRO_TK_CONFIG TK_CONFIG_JOIN_STYLE;
MACRO_TK_CONFIG TK_CONFIG_JUSTIFY;
MACRO_TK_CONFIG TK_CONFIG_MM;
MACRO_TK_CONFIG_COLOR TK_CONFIG_MONO_ONLY;
MACRO_TK_CONFIG_COLOR TK_CONFIG_NULL_OK;
MACRO_TK_CONFIG_COLOR TK_CONFIG_OPTION_SPECIFIED;
MACRO_TK_CONFIG TK_CONFIG_PIXELS;
MACRO_TK_CONFIG TK_CONFIG_RELIEF;
MACRO_TK_CONFIG TK_CONFIG_STRING;
MACRO_TK_CONFIG TK_CONFIG_SYNONYM;
MACRO_TK_CONFIG TK_CONFIG_UID;
MACRO_TK_CONFIG_COLOR TK_CONFIG_USER_BIT;
MACRO_TK_CONFIG TK_CONFIG_WINDOW;
MACRO_TK_MAPPED TK_CONTAINER;
$F413FB130807CE2045080C3C00838D77 TK_DEFER_EVENT;
MACRO_TK_MAPPED TK_DEFER_MODAL;
$F413FB130807CE2045080C3C00838D77 TK_DISCARD_EVENT;
MACRO_TK_MAPPED TK_DONT_DESTROY_WINDOW;
MACRO_TK_DONT TK_DONT_WAIT;
MACRO_TK_MAPPED TK_EMBEDDED;
MACRO_TK_READABLE TK_EXCEPTION;
MACRO_TK_WINDOW TK_FILE_EVENTS;
MACRO_TK_MAPPED TK_GRAB_FLAG;
MACRO_TK_WINDOW TK_IDLE_EVENTS;
MACRO_TK_WHOLE TK_IGNORE_NEWLINES;
MACRO_TK_WHOLE TK_IGNORE_TABS;
MACRO_TK_WIDGET TK_INTERACTIVE_PRIO;
$D75A9F50BEFC37ED2CAAB9E825B0AC13 TK_JUSTIFY_CENTER;
$D75A9F50BEFC37ED2CAAB9E825B0AC13 TK_JUSTIFY_LEFT;
$D75A9F50BEFC37ED2CAAB9E825B0AC13 TK_JUSTIFY_RIGHT;
MACRO_TK_SCROLL TK_LASTEVENT;
MACRO_TK TK_MAJOR_VERSION;
MACRO_TK_MAPPED TK_MAPPED;
MACRO_TK_WIDGET TK_MAX_PRIO;
MACRO_TK TK_MINOR_VERSION;
MACRO_TK_MAPPED TK_NEED_CONFIG_NOTIFY;
MACRO_TK_3D TK_NOTIFY_SHARE;
MACRO_TK_WHOLE TK_PARTIAL_OK;
$F413FB130807CE2045080C3C00838D77 TK_PROCESS_EVENT;
MACRO_TK_READABLE TK_READABLE;
MACRO_TK_RELEASE TK_RELEASE_LEVEL;
MACRO_TK_RELEASE TK_RELEASE_SERIAL;
MACRO_TK_RELIEF TK_RELIEF_FLAT;
MACRO_TK_RELIEF TK_RELIEF_GROOVE;
MACRO_TK_RELIEF TK_RELIEF_RAISED;
MACRO_TK_RELIEF TK_RELIEF_RIDGE;
MACRO_TK_RELIEF TK_RELIEF_SOLID;
MACRO_TK_RELIEF TK_RELIEF_SUNKEN;
MACRO_TK_MAPPED TK_REPARENTED;
MACRO_TK_SCROLL TK_SCROLL_ERROR;
MACRO_TK_SCROLL TK_SCROLL_MOVETO;
MACRO_TK_SCROLL TK_SCROLL_PAGES;
MACRO_TK_SCROLL TK_SCROLL_UNITS;
MACRO_TK_WIDGET TK_STARTUP_FILE_PRIO;
MACRO_TK_TAG TK_TAG_SPACE;
MACRO_TK_WINDOW TK_TIMER_EVENTS;
MACRO_TK_MAPPED TK_TOP_LEVEL;
MACRO_TK_WIDGET TK_USER_DEFAULT_PRIO;
MACRO_TK_WHOLE TK_WHOLE_WORDS;
MACRO_TK_WIDGET TK_WIDGET_DEFAULT_PRIO;
MACRO_TK_WINDOW TK_WINDOW_EVENTS;
MACRO_TK_MAPPED TK_WM_COLORMAP_WINDOW;
MACRO_TK_MAPPED TK_WRAPPER;
MACRO_TK_READABLE TK_WRITABLE;
MACRO_TK_DONT TK_X_EVENTS;
MACRO_DOMAIN TLOSS;
MACRO_SEEK TMP_MAX;
MACRO_ISIG TOSTOP;
MACRO_CursorShape TileShape;
MACRO_Above TopIf;
MACRO_True True;
MACRO_StaticGray TrueColor;
MACRO_SCHAR UCHAR_MAX;
MACRO_INT UINT_MAX;
MACRO_ULONG ULONG_LONG_MAX;
MACRO_LONG ULONG_MAX;
MACRO_DOMAIN UNDERFLOW;
MACRO_UNIX UNIX_PATH_LEN;
MACRO_INIT USER_PROCESS;
MACRO_USE USE_TCLALLOC;
MACRO_SHRT USHRT_MAX;
MACRO_UT_NAMESIZE UT_HOSTSIZE;
MACRO_UT UT_LINESIZE;
MACRO_UT_NAMESIZE UT_NAMESIZE;
MACRO_UnmapGravity UnmapGravity;
MACRO_KeyPress UnmapNotify;
MACRO_Unsorted Unsorted;
MACRO_VDISCARD VDISCARD;
MACRO_VDISCARD VEOF;
MACRO_VDISCARD VEOL;
MACRO_VDISCARD VEOL2;
MACRO_VDISCARD VERASE;
MACRO_VDISCARD VINTR;
MACRO_VDISCARD VKILL;
MACRO_VDISCARD VLNEXT;
MACRO_VDISCARD VMIN;
MACRO_VDISCARD VQUIT;
MACRO_VDISCARD VREPRINT;
MACRO_VDISCARD VSTART;
MACRO_VDISCARD VSTOP;
MACRO_VDISCARD VSUSP;
MACRO_VDISCARD VSWTC;
MACRO_VT0 VT0;
MACRO_VT0 VT1;
MACRO_XTABS VTDLY;
MACRO_VDISCARD VTIME;
MACRO_VDISCARD VWERASE;
MACRO_TK_SCROLL VirtualEvent;
MACRO_TK_SCROLL VirtualEventMask;
MACRO_NoEventMask VisibilityChangeMask;
MACRO_VisibilityUnobscured VisibilityFullyObscured;
MACRO_KeyPress VisibilityNotify;
MACRO_VisibilityUnobscured VisibilityPartiallyObscured;
MACRO_VisibilityUnobscured VisibilityUnobscured;
MACRO_WAIT WAIT_CHILD;
MACRO_WHEEL WHEEL_DELTA;
MACRO_WHEEL WHEEL_PAGESCROLL;
MACRO_WINDOWS WINDOWS_HWND;
MACRO_WINDOWS WINDOWS_POST;
MACRO_WINDOWS WINDOWS_SEND;
MACRO_WNOHANG WNOHANG;
MACRO_BFD_NO WP_TEXT;
MACRO_WNOHANG WUNTRACED;
MACRO_W W_OK;
MACRO_ForgetGravity WestGravity;
MACRO_NotUseful WhenMapped;
MACRO_EvenOddRule WindingRule;
MACRO_XBufferOverflow XBufferOverflow;
$DB4B60BC3E5D47BB5823C48350265A79 XIMAbsolutePosition;
$DB4B60BC3E5D47BB5823C48350265A79 XIMBackwardChar;
$DB4B60BC3E5D47BB5823C48350265A79 XIMBackwardWord;
$B539734676A04848B68060D6D483E0A0 XIMBitmapType;
$DB4B60BC3E5D47BB5823C48350265A79 XIMCaretDown;
$DB4B60BC3E5D47BB5823C48350265A79 XIMCaretUp;
$DB4B60BC3E5D47BB5823C48350265A79 XIMDontChange;
$DB4B60BC3E5D47BB5823C48350265A79 XIMForwardChar;
$DB4B60BC3E5D47BB5823C48350265A79 XIMForwardWord;
MACRO_XIMReverse XIMHighlight;
$B64C39E2ADABB22C50C1D912F1D253CC XIMIsInvisible;
$B64C39E2ADABB22C50C1D912F1D253CC XIMIsPrimary;
$B64C39E2ADABB22C50C1D912F1D253CC XIMIsSecondary;
$DB4B60BC3E5D47BB5823C48350265A79 XIMLineEnd;
$DB4B60BC3E5D47BB5823C48350265A79 XIMLineStart;
$DB4B60BC3E5D47BB5823C48350265A79 XIMNextLine;
MACRO_XIMPreeditArea XIMPreeditArea;
MACRO_XIMPreeditArea XIMPreeditCallbacks;
MACRO_XIMPreeditArea XIMPreeditNone;
MACRO_XIMPreeditArea XIMPreeditNothing;
MACRO_XIMPreeditArea XIMPreeditPosition;
$DB4B60BC3E5D47BB5823C48350265A79 XIMPreviousLine;
MACRO_XIMReverse XIMPrimary;
MACRO_XIMReverse XIMReverse;
MACRO_XIMReverse XIMSecondary;
MACRO_XIMPreeditArea XIMStatusArea;
MACRO_XIMPreeditArea XIMStatusCallbacks;
MACRO_XIMPreeditArea XIMStatusNone;
MACRO_XIMPreeditArea XIMStatusNothing;
MACRO_XIMReverse XIMTertiary;
$B539734676A04848B68060D6D483E0A0 XIMTextType;
MACRO_XIMReverse XIMUnderline;
MACRO_XLookupNone XLookupBoth;
MACRO_XLookupNone XLookupChars;
MACRO_XLookupNone XLookupKeySym;
MACRO_XLookupNone XLookupNone;
MACRO_XMaxTransChars XMaxTransChars;
MACRO_XTABS XTABS;
MACRO_XYBitmap XYBitmap;
MACRO_XYBitmap XYPixmap;
MACRO_X_OK X_OK;
MACRO_X X_PROTOCOL;
MACRO_X X_PROTOCOL_REVISION;
MACRO_XlibSpecificationRelease XlibSpecificationRelease;
MACRO_Unsorted YSorted;
MACRO_Unsorted YXBanded;
MACRO_Unsorted YXSorted;
MACRO_AOUTHDRSZ ZMAGIC;
MACRO_XYBitmap ZPixmap;
MACRO_Z_ASCII Z_ASCII;
MACRO_Z_BEST Z_BEST_COMPRESSION;
MACRO_Z_BEST Z_BEST_SPEED;
MACRO_Z_DEFAULT Z_BINARY;
MACRO_Z_BUF Z_BUF_ERROR;
MACRO_Z_DATA Z_DATA_ERROR;
MACRO_Z_BEST Z_DEFAULT_COMPRESSION;
MACRO_Z_DEFAULT Z_DEFAULT_STRATEGY;
MACRO_Z_ASCII Z_DEFLATED;
MACRO_Z_OK Z_ERRNO;
MACRO_Z_FILTERED Z_FILTERED;
MACRO_Z Z_FINISH;
MACRO_Z Z_FULL_FLUSH;
MACRO_Z_FILTERED Z_HUFFMAN_ONLY;
MACRO_Z_MEM Z_MEM_ERROR;
MACRO_Z_OK Z_NEED_DICT;
MACRO_Z_VERSION Z_NO_COMPRESSION;
MACRO_Z Z_NO_FLUSH;
MACRO_Z_NULL Z_NULL;
MACRO_Z_OK Z_OK;
MACRO_Z Z_PARTIAL_FLUSH;
MACRO_Z_OK Z_STREAM_END;
MACRO_Z_STREAM Z_STREAM_ERROR;
MACRO_Z Z_SYNC_FLUSH;
MACRO_Z_ASCII Z_UNKNOWN;
MACRO_Z_VERSION Z_VERSION_ERROR;
MACRO__ANSIDECL _ANSIDECL_H;
MACRO__ATEXIT _ATEXIT_SIZE;
MACRO__U _B;
char *BC;
MACRO__U _C;
MACRO__CLOCKS _CLOCKS_PER_SEC_;
MACRO__FREAD _FAPPEND;
MACRO__FREAD _FASYNC;
MACRO__FREAD _FCREAT;
MACRO__FREAD _FDEFER;
MACRO__FREAD _FEXCL;
MACRO__FREAD _FEXLOCK;
MACRO__FREAD _FMARK;
MACRO__FREAD _FNBIO;
MACRO__FREAD _FNDELAY;
MACRO__FREAD _FNOCTTY;
MACRO__FREAD _FNONBLOCK;
MACRO__FOPEN _FOPEN;
MACRO__FREAD _FREAD;
MACRO__FREAD _FSHLOCK;
MACRO__FREAD _FSYNC;
MACRO__FREAD _FTRUNC;
MACRO__FREAD _FWRITE;
MACRO__G_HAVE _G_BUFSIZ;
MACRO__G_FOPEN _G_FILENAME_MAX;
MACRO__G_FOPEN _G_FOPEN_MAX;
MACRO__G_HAVE_ATEXIT _G_HAVE_ATEXIT;
MACRO__G_HAVE_BOOL _G_HAVE_BOOL;
MACRO__G_HAVE_DIRENT G_HAVE_CURSES;
MACRO__G_HAVE_DIRENT _G_HAVE_DIRENT;
MACRO__G_HAVE_BOOL G_HAVE_LONG_DOUBLE_IO;
MACRO__G_HAVE_BOOL G_HAVE_PRINTF_FP;
MACRO__G_HAVE _G_HAVE_ST_BLKSIZE;
MACRO__G_HAVE_SYS_CDEFS _G_HAVE_SYS_CDEFS;
MACRO__G_HAVE_SYS _G_HAVE_SYS_RESOURCE;
MACRO__G_HAVE_SYS_SOCKET _G_HAVE_SYS_SOCKET;
MACRO__G_HAVE_SYS_TIMES _G_HAVE_SYS_TIMES;
MACRO__G_HAVE_SYS_WAIT _G_HAVE_SYS_WAIT;
MACRO__G_HAVE_UNISTD _G_HAVE_UNISTD;
MACRO__G_HAVE_DIRENT G_MATH_H_INLINES;
MACRO__G _G_NAMES_HAVE_UNDERSCORE;
MACRO__G_VTABLE _G_VTABLE_LABEL_HAS_LENGTH;
MACRO__IFMT _IFBLK;
MACRO__IFMT _IFCHR;
MACRO__IFMT _IFDIR;
MACRO__IFMT _IFIFO;
MACRO__IFMT _IFLNK;
MACRO__IFMT _IFMT;
MACRO__IFMT _IFREG;
MACRO__IFMT _IFSOCK;
MACRO__IOFBF IOFBF;
MACRO__IOFBF _IOLBF;
MACRO__IOFBF _IONBF;
MACRO__JBLEN _JBLEN;
MACRO__U _L;
MACRO__U _N;
MACRO__N _N_LISTS;
MACRO__U _P;
MACRO__PASSWORD _PASSWORD_LEN;
char PC;
MACRO__PC _PC_ASYNC_IO;
MACRO__PC _PC_CHOWN_RESTRICTED;
MACRO__PC PC_LINK_MAX;
MACRO__PC _PC_MAX_CANON;
MACRO__PC _PC_MAX_INPUT;
MACRO__PC _PC_NAME_MAX;
MACRO__PC _PC_NO_TRUNC;
MACRO__PC _PC_PATH_MAX;
MACRO__PC _PC_PIPE_BUF;
MACRO__PC _PC_PRIO_IO;
MACRO__PC _PC_SYNC_IO;
MACRO__PC _PC_VDISABLE;
MACRO_NGROUPS _POSIX_ARG_MAX;
MACRO__POSIX _POSIX_CHILD_MAX;
MACRO__POSIX _POSIX_LINK_MAX;
MACRO__POSIX _POSIX_MAX_CANON;
MACRO__POSIX_MAX _POSIX_MAX_INPUT;
MACRO__POSIX_NAME _POSIX_NAME_MAX;
MACRO__POSIX_NAME POSIX_NGROUPS_MAX;
MACRO__POSIX_OPEN _POSIX_OPEN_MAX;
MACRO__POSIX_OPEN _POSIX_PATH_MAX;
MACRO__POSIX_OPEN _POSIX_PIPE_BUF;
MACRO__POSIX_OPEN _POSIX_SSIZE_MAX;
MACRO__POSIX_STREAM _POSIX_STREAM_MAX;
MACRO__POSIX_STREAM _POSIX_TZNAME_MAX;
MACRO__P _P_DETACH;
MACRO__P _P_NOWAIT;
MACRO__P _P_NOWAITO;
MACRO__P _P_OVERLAY;
MACRO__P _P_WAIT;
MACRO__U _S;
MACRO__SC SC_ARG_MAX;
MACRO__SC _SC_CHILD_MAX;
MACRO__SC _SC_CLK_TCK;
MACRO__SC _SC_JOB_CONTROL;
MACRO__SC _SC_NGROUPS_MAX;
MACRO__SC _SC_OPEN_MAX;
MACRO__SC _SC_PAGESIZE;
MACRO__SC _SC_SAVED_IDS;
MACRO__SC _SC_VERSION;
void TclFreeObj(Tcl_Obj *objPtr);
void Tcl_AddErrorInfo(Tcl_Interp *interp, char *message);
void Tcl_AddObjErrorInfo(Tcl_Interp *interp, char *message, int length);
char *Tcl_Alloc(unsigned int size);
void Tcl_AllowExceptions(Tcl_Interp *interp);
int Tcl_AppInit(Tcl_Interp *interp);
int Tcl_AppendAllObjTypes(Tcl_Interp *interp, Tcl_Obj *objPtr);
void Tcl_AppendElement(Tcl_Interp *interp, char *string);
void Tcl_AppendResult(Tcl_Interp *interp, ...);
void Tcl_AppendStringsToObj(Tcl_Obj *interp, ...);
void Tcl_AppendToObj(Tcl_Obj *objPtr, char *bytes, int length);
Tcl_AsyncHandler Tcl_AsyncCreate(Tcl_AsyncProc *proc, ClientData clientData);
void Tcl_AsyncDelete(Tcl_AsyncHandler async);
int Tcl_AsyncInvoke(Tcl_Interp *interp, int code);
void Tcl_AsyncMark(Tcl_AsyncHandler async);
int Tcl_AsyncReady(void);
void Tcl_BackgroundError(Tcl_Interp *interp);
char Tcl_Backslash(const char *src, int *readPtr);
int Tcl_BadChannelOption(Tcl_Interp *interp, char *optionName, char *optionList);
void Tcl_CallWhenDeleted(Tcl_Interp *interp, Tcl_InterpDeleteProc *proc, ClientData clientData);
void Tcl_CancelIdleCall(Tcl_IdleProc *idleProc, ClientData clientData);
int Tcl_Close(Tcl_Interp *interp, Tcl_Channel chan);
int Tcl_CommandComplete(char *cmd);
char *Tcl_Concat(int argc, char **argv);
Tcl_Obj *Tcl_ConcatObj(int objc, Tcl_Obj *const *objv);
int Tcl_ConvertCountedElement(const char *src, int length, char *dst, int flags);
int Tcl_ConvertElement(const char *src, char *dst, int flags);
int Tcl_ConvertToType(Tcl_Interp *interp, Tcl_Obj *objPtr, Tcl_ObjType *typePtr);
int Tcl_CreateAlias(Tcl_Interp *slave, char *slaveCmd, Tcl_Interp *target, char *targetCmd, int argc, char **argv);
int Tcl_CreateAliasObj(Tcl_Interp *slave, char *slaveCmd, Tcl_Interp *target, char *targetCmd, int objc, Tcl_Obj *const *objv);
Tcl_Channel Tcl_CreateChannel(Tcl_ChannelType *typePtr, char *chanName, ClientData instanceData, int mask);
void Tcl_CreateChannelHandler(Tcl_Channel chan, int mask, Tcl_ChannelProc *proc, ClientData clientData);
void Tcl_CreateCloseHandler(Tcl_Channel chan, Tcl_CloseProc *proc, ClientData clientData);
Tcl_Command Tcl_CreateCommand(Tcl_Interp *interp, char *cmdName, Tcl_CmdProc *proc, ClientData clientData, Tcl_CmdDeleteProc *deleteProc);
void Tcl_CreateEventSource(Tcl_EventSetupProc *setupProc, Tcl_EventCheckProc *checkProc, ClientData clientData);
void Tcl_CreateExitHandler(Tcl_ExitProc *proc, ClientData clientData);
void Tcl_CreateFileHandler(int fd, int mask, Tcl_FileProc *proc, ClientData clientData);
Tcl_Interp *Tcl_CreateInterp(void);
void Tcl_CreateMathFunc(Tcl_Interp *interp, char *name, int numArgs, Tcl_ValueType *argTypes, Tcl_MathProc *proc, ClientData clientData);
Tcl_Command Tcl_CreateObjCommand(Tcl_Interp *interp, char *cmdName, Tcl_ObjCmdProc *proc, ClientData clientData, Tcl_CmdDeleteProc *deleteProc);
Tcl_Interp *Tcl_CreateSlave(Tcl_Interp *interp, char *slaveName, int isSafe);
Tcl_TimerToken Tcl_CreateTimerHandler(int milliseconds, Tcl_TimerProc *proc, ClientData clientData);
Tcl_Trace Tcl_CreateTrace(Tcl_Interp *interp, int level, Tcl_CmdTraceProc *proc, ClientData clientData);
char *Tcl_DStringAppend(Tcl_DString *dsPtr, const char *string, int length);
char *Tcl_DStringAppendElement(Tcl_DString *dsPtr, const char *string);
void Tcl_DStringEndSublist(Tcl_DString *dsPtr);
void Tcl_DStringFree(Tcl_DString *dsPtr);
void Tcl_DStringGetResult(Tcl_Interp *interp, Tcl_DString *dsPtr);
void Tcl_DStringInit(Tcl_DString *dsPtr);
void Tcl_DStringResult(Tcl_Interp *interp, Tcl_DString *dsPtr);
void Tcl_DStringSetLength(Tcl_DString *dsPtr, int length);
void Tcl_DStringStartSublist(Tcl_DString *dsPtr);
char *Tcl_DbCkalloc(unsigned int size, char *file, int line);
int Tcl_DbCkfree(char *ptr, char *file, int line);
char *Tcl_DbCkrealloc(char *ptr, unsigned int size, char *file, int line);
void Tcl_DbDecrRefCount(Tcl_Obj *objPtr, char *file, int line);
void Tcl_DbIncrRefCount(Tcl_Obj *objPtr, char *file, int line);
int Tcl_DbIsShared(Tcl_Obj *objPtr, char *file, int line);
Tcl_Obj *Tcl_DbNewBooleanObj(int boolValue, char *file, int line);
Tcl_Obj *Tcl_DbNewDoubleObj(double doubleValue, char *file, int line);
Tcl_Obj *Tcl_DbNewListObj(int objc, Tcl_Obj *const *objv, char *file, int line);
Tcl_Obj *Tcl_DbNewLongObj(__int32 longValue, char *file, int line);
Tcl_Obj *Tcl_DbNewObj(char *file, int line);
Tcl_Obj *Tcl_DbNewStringObj(char *bytes, int length, char *file, int line);
void Tcl_DecrRefCount(Tcl_Obj *objPtr);
void Tcl_DeleteAssocData(Tcl_Interp *interp, char *name);
void Tcl_DeleteChannelHandler(Tcl_Channel chan, Tcl_ChannelProc *proc, ClientData clientData);
void Tcl_DeleteCloseHandler(Tcl_Channel chan, Tcl_CloseProc *proc, ClientData clientData);
int Tcl_DeleteCommand(Tcl_Interp *interp, char *cmdName);
int Tcl_DeleteCommandFromToken(Tcl_Interp *interp, Tcl_Command command);
void Tcl_DeleteEventSource(Tcl_EventSetupProc *setupProc, Tcl_EventCheckProc *checkProc, ClientData clientData);
void Tcl_DeleteEvents(Tcl_EventDeleteProc *proc, ClientData clientData);
void Tcl_DeleteExitHandler(Tcl_ExitProc *proc, ClientData clientData);
void Tcl_DeleteFileHandler(int fd);
void Tcl_DeleteHashEntry(Tcl_HashEntry *entryPtr);
void Tcl_DeleteHashTable(Tcl_HashTable *tablePtr);
void Tcl_DeleteInterp(Tcl_Interp *interp);
void Tcl_DeleteTimerHandler(Tcl_TimerToken token);
void Tcl_DeleteTrace(Tcl_Interp *interp, Tcl_Trace trace);
void Tcl_DetachPids(int numPids, Tcl_Pid *pidPtr);
int Tcl_DoOneEvent(int flags);
void Tcl_DoWhenIdle(Tcl_IdleProc *proc, ClientData clientData);
void Tcl_DontCallWhenDeleted(Tcl_Interp *interp, Tcl_InterpDeleteProc *proc, ClientData clientData);
Tcl_Obj *Tcl_DuplicateObj(Tcl_Obj *objPtr);
int Tcl_Eof(Tcl_Channel chan);
char *Tcl_ErrnoId(void);
char *Tcl_ErrnoMsg(int err);
int Tcl_Eval(Tcl_Interp *interp, char *string);
int Tcl_EvalFile(Tcl_Interp *interp, char *fileName);
int Tcl_EvalObj(Tcl_Interp *interp, Tcl_Obj *objPtr);
void Tcl_EventuallyFree(ClientData clientData, Tcl_FreeProc *freeProc);
void Tcl_Exit(int status);
int Tcl_ExposeCommand(Tcl_Interp *interp, char *hiddenCmdToken, char *cmdName);
int Tcl_ExprBoolean(Tcl_Interp *interp, char *string, int *ptr);
int Tcl_ExprBooleanObj(Tcl_Interp *interp, Tcl_Obj *objPtr, int *ptr);
int Tcl_ExprDouble(Tcl_Interp *interp, char *string, double *ptr);
int Tcl_ExprDoubleObj(Tcl_Interp *interp, Tcl_Obj *objPtr, double *ptr);
int Tcl_ExprLong(Tcl_Interp *interp, char *string, __int32 *ptr);
int Tcl_ExprLongObj(Tcl_Interp *interp, Tcl_Obj *objPtr, __int32 *ptr);
int Tcl_ExprObj(Tcl_Interp *interp, Tcl_Obj *objPtr, Tcl_Obj **resultPtrPtr);
int Tcl_ExprString(Tcl_Interp *interp, char *string);
void Tcl_Finalize(void);
void Tcl_FindExecutable(char *argv0);
Tcl_HashEntry *Tcl_FirstHashEntry(Tcl_HashTable *tablePtr, Tcl_HashSearch *searchPtr);
int Tcl_Flush(Tcl_Channel chan);
void Tcl_Free(char *ptr);
void Tcl_FreeResult(Tcl_Interp *interp);
int Tcl_GetAlias(Tcl_Interp *interp, char *slaveCmd, Tcl_Interp **targetInterpPtr, char **targetCmdPtr, int *argcPtr, char ***argvPtr);
int Tcl_GetAliasObj(Tcl_Interp *interp, char *slaveCmd, Tcl_Interp **targetInterpPtr, char **targetCmdPtr, int *objcPtr, Tcl_Obj ***objv);
ClientData Tcl_GetAssocData(Tcl_Interp *interp, char *name, Tcl_InterpDeleteProc **procPtr);
int Tcl_GetBoolean(Tcl_Interp *interp, char *string, int *boolPtr);
int Tcl_GetBooleanFromObj(Tcl_Interp *interp, Tcl_Obj *objPtr, int *boolPtr);
Tcl_Channel Tcl_GetChannel(Tcl_Interp *interp, char *chanName, int *modePtr);
int Tcl_GetChannelBufferSize(Tcl_Channel chan);
int Tcl_GetChannelHandle(Tcl_Channel chan, int direction, ClientData *handlePtr);
ClientData Tcl_GetChannelInstanceData(Tcl_Channel chan);
int Tcl_GetChannelMode(Tcl_Channel chan);
char *Tcl_GetChannelName(Tcl_Channel chan);
int Tcl_GetChannelOption(Tcl_Interp *interp, Tcl_Channel chan, char *optionName, Tcl_DString *dsPtr);
Tcl_ChannelType *Tcl_GetChannelType(Tcl_Channel chan);
int Tcl_GetCommandInfo(Tcl_Interp *interp, char *cmdName, Tcl_CmdInfo *infoPtr);
char *Tcl_GetCommandName(Tcl_Interp *interp, Tcl_Command command);
int Tcl_GetDouble(Tcl_Interp *interp, char *string, double *doublePtr);
int Tcl_GetDoubleFromObj(Tcl_Interp *interp, Tcl_Obj *objPtr, double *doublePtr);
int Tcl_GetErrno(void);
char *Tcl_GetHostName(void);
int Tcl_GetIndexFromObj(Tcl_Interp *interp, Tcl_Obj *objPtr, char **tablePtr, char *msg, int flags, int *indexPtr);
int Tcl_GetInt(Tcl_Interp *interp, char *string, int *intPtr);
int Tcl_GetIntFromObj(Tcl_Interp *interp, Tcl_Obj *objPtr, int *intPtr);
int Tcl_GetInterpPath(Tcl_Interp *askInterp, Tcl_Interp *slaveInterp);
int Tcl_GetLongFromObj(Tcl_Interp *interp, Tcl_Obj *objPtr, __int32 *longPtr);
Tcl_Interp *Tcl_GetMaster(Tcl_Interp *interp);
const char *Tcl_GetNameOfExecutable(void);
Tcl_Obj *Tcl_GetObjResult(Tcl_Interp *interp);
Tcl_ObjType *Tcl_GetObjType(char *typeName);
int Tcl_GetOpenFile(Tcl_Interp *interp, char *string, int write, int checkUsage, ClientData *filePtr);
Tcl_PathType Tcl_GetPathType(char *path);
int Tcl_GetServiceMode(void);
Tcl_Interp *Tcl_GetSlave(Tcl_Interp *interp, char *slaveName);
Tcl_Channel Tcl_GetStdChannel(int type);
char *Tcl_GetStringFromObj(Tcl_Obj *objPtr, int *lengthPtr);
char *Tcl_GetStringResult(Tcl_Interp *interp);
char *Tcl_GetVar(Tcl_Interp *interp, char *varName, int flags);
char *Tcl_GetVar2(Tcl_Interp *interp, char *part1, char *part2, int flags);
int Tcl_Gets(Tcl_Channel chan, Tcl_DString *dsPtr);
int Tcl_GetsObj(Tcl_Channel chan, Tcl_Obj *objPtr);
int Tcl_GlobalEval(Tcl_Interp *interp, char *command);
int Tcl_GlobalEvalObj(Tcl_Interp *interp, Tcl_Obj *objPtr);
char *Tcl_HashStats(Tcl_HashTable *tablePtr);
int Tcl_HideCommand(Tcl_Interp *interp, char *cmdName, char *hiddenCmdToken);
void Tcl_IncrRefCount(Tcl_Obj *objPtr);
int Tcl_Init(Tcl_Interp *interp);
void Tcl_InitHashTable(Tcl_HashTable *tablePtr, int keyType);
void Tcl_InitMemory(Tcl_Interp *interp);
int Tcl_InputBlocked(Tcl_Channel chan);
int Tcl_InputBuffered(Tcl_Channel chan);
int Tcl_InterpDeleted(Tcl_Interp *interp);
void Tcl_InvalidateStringRep(Tcl_Obj *objPtr);
int Tcl_IsSafe(Tcl_Interp *interp);
int Tcl_IsShared(Tcl_Obj *objPtr);
char *Tcl_JoinPath(int argc, char **argv, Tcl_DString *resultPtr);
int Tcl_LinkVar(Tcl_Interp *interp, char *varName, char *addr, int type);
int Tcl_ListObjAppendElement(Tcl_Interp *interp, Tcl_Obj *listPtr, Tcl_Obj *objPtr);
int Tcl_ListObjAppendList(Tcl_Interp *interp, Tcl_Obj *listPtr, Tcl_Obj *elemListPtr);
int Tcl_ListObjGetElements(Tcl_Interp *interp, Tcl_Obj *listPtr, int *objcPtr, Tcl_Obj ***objvPtr);
int Tcl_ListObjIndex(Tcl_Interp *interp, Tcl_Obj *listPtr, int index, Tcl_Obj **objPtrPtr);
int Tcl_ListObjLength(Tcl_Interp *interp, Tcl_Obj *listPtr, int *intPtr);
int Tcl_ListObjReplace(Tcl_Interp *interp, Tcl_Obj *listPtr, int first, int count, int objc, Tcl_Obj *const *objv);
void Tcl_Main(int argc, char **argv, Tcl_AppInitProc *appInitProc);
Tcl_Channel Tcl_MakeFileChannel(ClientData handle, int mode);
int Tcl_MakeSafe(Tcl_Interp *interp);
Tcl_Channel Tcl_MakeTcpClientChannel(ClientData tcpSocket);
char *Tcl_Merge(int argc, char **argv);
Tcl_Obj *Tcl_NewBooleanObj(int boolValue);
Tcl_Obj *Tcl_NewDoubleObj(double doubleValue);
Tcl_Obj *Tcl_NewIntObj(int intValue);
Tcl_Obj *Tcl_NewListObj(int objc, Tcl_Obj *const *objv);
Tcl_Obj *Tcl_NewLongObj(__int32 longValue);
Tcl_Obj *Tcl_NewObj(void);
Tcl_Obj *Tcl_NewStringObj(char *bytes, int length);
Tcl_HashEntry *Tcl_NextHashEntry(Tcl_HashSearch *searchPtr);
void Tcl_NotifyChannel(Tcl_Channel channel, int mask);
Tcl_Obj *Tcl_ObjGetVar2(Tcl_Interp *interp, Tcl_Obj *part1Ptr, Tcl_Obj *part2Ptr, int flags);
Tcl_Obj *Tcl_ObjSetVar2(Tcl_Interp *interp, Tcl_Obj *part1Ptr, Tcl_Obj *part2Ptr, Tcl_Obj *newValuePtr, int flags);
Tcl_Channel Tcl_OpenCommandChannel(Tcl_Interp *interp, int argc, char **argv, int flags);
Tcl_Channel Tcl_OpenFileChannel(Tcl_Interp *interp, char *fileName, char *modeString, int permissions);
Tcl_Channel Tcl_OpenTcpClient(Tcl_Interp *interp, int port, char *address, char *myaddr, int myport, int async);
Tcl_Channel Tcl_OpenTcpServer(Tcl_Interp *interp, int port, char *host, Tcl_TcpAcceptProc *acceptProc, ClientData callbackData);
char *Tcl_ParseVar(Tcl_Interp *interp, char *string, char **termPtr);
int Tcl_PkgProvide(Tcl_Interp *interp, char *name, char *version);
char *Tcl_PkgRequire(Tcl_Interp *interp, char *name, char *version, int exact);
char *Tcl_PosixError(Tcl_Interp *interp);
void Tcl_Preserve(ClientData data);
void Tcl_PrintDouble(Tcl_Interp *interp, double value, char *dst);
int Tcl_PutEnv(const char *string);
void Tcl_QueueEvent(Tcl_Event *evPtr, Tcl_QueuePosition position);
int Tcl_Read(Tcl_Channel chan, char *bufPtr, int toRead);
char *Tcl_Realloc(char *ptr, unsigned int size);
void Tcl_ReapDetachedProcs(void);
int Tcl_RecordAndEval(Tcl_Interp *interp, char *cmd, int flags);
int Tcl_RecordAndEvalObj(Tcl_Interp *interp, Tcl_Obj *cmdPtr, int flags);
Tcl_RegExp Tcl_RegExpCompile(Tcl_Interp *interp, char *string);
int Tcl_RegExpExec(Tcl_Interp *interp, Tcl_RegExp regexp, char *string, char *start);
int Tcl_RegExpMatch(Tcl_Interp *interp, char *string, char *pattern);
void Tcl_RegExpRange(Tcl_RegExp regexp, int index, char **startPtr, char **endPtr);
void Tcl_RegisterChannel(Tcl_Interp *interp, Tcl_Channel chan);
void Tcl_RegisterObjType(Tcl_ObjType *typePtr);
void Tcl_Release(ClientData clientData);
void Tcl_ResetResult(Tcl_Interp *interp);
int Tcl_ScanCountedElement(const char *string, int length, int *flagPtr);
int Tcl_ScanElement(const char *string, int *flagPtr);
int Tcl_Seek(Tcl_Channel chan, int offset, int mode);
int Tcl_ServiceAll(void);
int Tcl_ServiceEvent(int flags);
void Tcl_SetAssocData(Tcl_Interp *interp, char *name, Tcl_InterpDeleteProc *proc, ClientData clientData);
void Tcl_SetBooleanObj(Tcl_Obj *objPtr, int boolValue);
void Tcl_SetChannelBufferSize(Tcl_Channel chan, int sz);
int Tcl_SetChannelOption(Tcl_Interp *interp, Tcl_Channel chan, char *optionName, char *newValue);
int Tcl_SetCommandInfo(Tcl_Interp *interp, char *cmdName, Tcl_CmdInfo *infoPtr);
void Tcl_SetDoubleObj(Tcl_Obj *objPtr, double doubleValue);
void Tcl_SetErrno(int err);
void Tcl_SetErrorCode(Tcl_Interp *arg1, ...);
void Tcl_SetIntObj(Tcl_Obj *objPtr, int intValue);
void Tcl_SetListObj(Tcl_Obj *objPtr, int objc, Tcl_Obj *const *objv);
void Tcl_SetLongObj(Tcl_Obj *objPtr, __int32 longValue);
void Tcl_SetMaxBlockTime(Tcl_Time *timePtr);
void Tcl_SetObjErrorCode(Tcl_Interp *interp, Tcl_Obj *errorObjPtr);
void Tcl_SetObjLength(Tcl_Obj *objPtr, int length);
void Tcl_SetObjResult(Tcl_Interp *interp, Tcl_Obj *resultObjPtr);
void Tcl_SetPanicProc(void (*proc)(char *format, ...));
int Tcl_SetRecursionLimit(Tcl_Interp *interp, int depth);
void Tcl_SetResult(Tcl_Interp *interp, char *string, Tcl_FreeProc *freeProc);
int Tcl_SetServiceMode(int mode);
void Tcl_SetStdChannel(Tcl_Channel channel, int type);
void Tcl_SetStringObj(Tcl_Obj *objPtr, char *bytes, int length);
void Tcl_SetTimer(Tcl_Time *timePtr);
char *Tcl_SetVar(Tcl_Interp *interp, char *varName, char *newValue, int flags);
char *Tcl_SetVar2(Tcl_Interp *interp, char *part1, char *part2, char *newValue, int flags);
char *Tcl_SignalId(int sig);
char *Tcl_SignalMsg(int sig);
void Tcl_Sleep(int ms);
void Tcl_SourceRCFile(Tcl_Interp *interp);
int Tcl_SplitList(Tcl_Interp *interp, char *list, int *argcPtr, char ***argvPtr);
void Tcl_SplitPath(char *path, int *argcPtr, char ***argvPtr);
void Tcl_StaticPackage(Tcl_Interp *interp, char *pkgName, Tcl_PackageInitProc *initProc, Tcl_PackageInitProc *safeInitProc);
int Tcl_StringMatch(char *string, char *pattern);
int Tcl_Tell(Tcl_Channel chan);
int Tcl_TraceVar(Tcl_Interp *interp, char *varName, int flags, Tcl_VarTraceProc *proc, ClientData clientData);
int Tcl_TraceVar2(Tcl_Interp *interp, char *part1, char *part2, int flags, Tcl_VarTraceProc *proc, ClientData clientData);
char *Tcl_TranslateFileName(Tcl_Interp *interp, char *name, Tcl_DString *bufferPtr);
int Tcl_Ungets(Tcl_Channel chan, char *str, int len, int atHead);
void Tcl_UnlinkVar(Tcl_Interp *interp, char *varName);
int Tcl_UnregisterChannel(Tcl_Interp *interp, Tcl_Channel chan);
int Tcl_UnsetVar(Tcl_Interp *interp, char *varName, int flags);
int Tcl_UnsetVar2(Tcl_Interp *interp, char *part1, char *part2, int flags);
void Tcl_UntraceVar(Tcl_Interp *interp, char *varName, int flags, Tcl_VarTraceProc *proc, ClientData clientData);
void Tcl_UntraceVar2(Tcl_Interp *interp, char *part1, char *part2, int flags, Tcl_VarTraceProc *proc, ClientData clientData);
int Tcl_UpVar(Tcl_Interp *interp, char *frameName, char *varName, char *localName, int flags);
int Tcl_UpVar2(Tcl_Interp *interp, char *frameName, char *part1, char *part2, char *localName, int flags);
void Tcl_UpdateLinkedVar(Tcl_Interp *interp, char *varName);
int Tcl_VarEval(Tcl_Interp *interp, ...);
ClientData Tcl_VarTraceInfo(Tcl_Interp *interp, char *varName, int flags, Tcl_VarTraceProc *procPtr, ClientData prevClientData);
ClientData Tcl_VarTraceInfo2(Tcl_Interp *interp, char *part1, char *part2, int flags, Tcl_VarTraceProc *procPtr, ClientData prevClientData);
int Tcl_WaitForEvent(Tcl_Time *timePtr);
Tcl_Pid Tcl_WaitPid(Tcl_Pid pid, int *statPtr, int options);
int Tcl_Write(Tcl_Channel chan, char *s, int slen);
void Tcl_WrongNumArgs(Tcl_Interp *interp, int objc, Tcl_Obj *const *objv, char *message);
int Tix_ArgcError(Tcl_Interp *interp, int argc, char **argv, int prefixCount, char *message);
int Tix_CallMethodCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tix_ChainMethodCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tix_ClassCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
void Tix_CreateCommands(Tcl_Interp *interp, Tix_TclCmd *commands, ClientData clientData, Tcl_CmdDeleteProc *deleteProc);
Tk_Window Tix_CreateSubWindow(Tcl_Interp *interp, Tk_Window tkwin, char *subPath);
int Tix_CreateWidgetCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tix_DefinePixmap(Tcl_Interp *interp, Tk_Uid name, char **data);
int Tix_DoWhenIdleCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tix_DoWhenMappedCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
void Tix_DrawAnchorLines(Display *display, Drawable drawable, GC gc, int x, int y, int w, int h);
int Tix_EvalArgv(Tcl_Interp *interp, int argc, char **argv);
int Tix_ExistMethod(Tcl_Interp *interp, char *context, char *method);
void Tix_Exit(Tcl_Interp *interp, int code);
int Tix_FalseCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tix_FileCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tix_FlushXCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tix_FormCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tix_GeometryRequestCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tix_Get3DBorderCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tix_GetBooleanCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tix_GetIntCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tix_GetMethodCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
Pixmap Tix_GetRenderBuffer(Display *display, Drawable d, int width, int height, int depth);
int Tix_GlobalVarEval(Tcl_Interp *interp, ...);
int Tix_GridCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tix_HListCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tix_HandleOptionsCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tix_HandleSubCmds(Tix_CmdInfo *cmdInfo, Tix_SubCmdInfo *subCmdInfo, ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tix_Init(Tcl_Interp *interp);
int Tix_InputOnlyCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tix_ItemStyleCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
void Tix_LinkListAppend(Tix_ListInfo *infoPtr, Tix_LinkList *lPtr, char *itemPtr, int flags);
void Tix_LinkListDelete(Tix_ListInfo *infoPtr, Tix_LinkList *lPtr, Tix_ListIterator *liPtr);
int Tix_LinkListDeleteRange(Tix_ListInfo *infoPtr, Tix_LinkList *lPtr, char *fromPtr, char *toPtr, Tix_ListIterator *liPtr);
int Tix_LinkListFind(Tix_ListInfo *infoPtr, Tix_LinkList *lPtr, char *itemPtr, Tix_ListIterator *liPtr);
int Tix_LinkListFindAndDelete(Tix_ListInfo *infoPtr, Tix_LinkList *lPtr, char *itemPtr, Tix_ListIterator *liPtr);
void Tix_LinkListInit(Tix_LinkList *lPtr);
void Tix_LinkListInsert(Tix_ListInfo *infoPtr, Tix_LinkList *lPtr, char *itemPtr, Tix_ListIterator *liPtr);
void Tix_LinkListIteratorInit(Tix_ListIterator *liPtr);
void Tix_LinkListNext(Tix_ListInfo *infoPtr, Tix_LinkList *lPtr, Tix_ListIterator *liPtr);
void Tix_LinkListStart(Tix_ListInfo *infoPtr, Tix_LinkList *lPtr, Tix_ListIterator *liPtr);
int Tix_LoadTclLibrary(Tcl_Interp *interp, char *envName, char *tclName, char *initFile, char *defDir, char *appName);
int Tix_ManageGeometryCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tix_MapWindowCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tix_MoveResizeWindowCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tix_MwmCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tix_NoteBookFrameCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
void Tix_OpenStdin(Tcl_Interp *interp);
int Tix_RaiseWindowCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
void Tix_SetArgv(Tcl_Interp *interp, int argc, char **argv);
void Tix_SetRcFileName(Tcl_Interp *interp, char *rcFileName);
int Tix_ShellInputCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
void Tix_SimpleListAppend(Tix_LinkList *lPtr, char *itemPtr, int flags);
void Tix_SimpleListDelete(Tix_LinkList *lPtr, Tix_ListIterator *liPtr);
int Tix_SimpleListDeleteRange(Tix_LinkList *lPtr, char *fromPtr, char *toPtr, Tix_ListIterator *liPtr);
int Tix_SimpleListFind(Tix_LinkList *lPtr, char *itemPtr, Tix_ListIterator *liPtr);
int Tix_SimpleListFindAndDelete(Tix_LinkList *lPtr, char *itemPtr, Tix_ListIterator *liPtr);
void Tix_SimpleListInit(Tix_LinkList *lPtr);
void Tix_SimpleListInsert(Tix_LinkList *lPtr, char *itemPtr, Tix_ListIterator *liPtr);
void Tix_SimpleListIteratorInit(Tix_ListIterator *liPtr);
void Tix_SimpleListNext(Tix_LinkList *lPtr, Tix_ListIterator *liPtr);
void Tix_SimpleListStart(Tix_LinkList *lPtr, Tix_ListIterator *liPtr);
int Tix_StrEqCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tix_StringSubCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tix_TListCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tix_TmpLineCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tix_TrueCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tix_UnmapWindowCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
XColor *Tk_3DBorderColor(Tk_3DBorder border);
GC Tk_3DBorderGC(Tk_Window tkwin, Tk_3DBorder border, int which);
void Tk_3DHorizontalBevel(Tk_Window tkwin, Drawable drawable, Tk_3DBorder border, int x, int y, int width, int height, int leftIn, int rightIn, int topBevel, int relief);
void Tk_3DVerticalBevel(Tk_Window tkwin, Drawable drawable, Tk_3DBorder border, int x, int y, int width, int height, int leftBevel, int relief);
void Tk_AddOption(Tk_Window tkwin, char *name, char *value, int priority);
int Tk_BellObjCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *const *objv);
int Tk_BindCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
void Tk_BindEvent(Tk_BindingTable bindingTable, XEvent *eventPtr, Tk_Window tkwin, int numObjects, ClientData *objectPtr);
int Tk_BindtagsCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tk_ButtonCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tk_CanvasCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
void Tk_CanvasDrawableCoords(Tk_Canvas canvas, double x, double y, __int16 *drawableXPtr, __int16 *drawableYPtr);
void Tk_CanvasEventuallyRedraw(Tk_Canvas canvas, int x1, int y1, int x2, int y2);
int Tk_CanvasGetCoord(Tcl_Interp *interp, Tk_Canvas canvas, char *string, double *doublePtr);
Tk_CanvasTextInfo *Tk_CanvasGetTextInfo(Tk_Canvas canvas);
int Tk_CanvasPsBitmap(Tcl_Interp *interp, Tk_Canvas canvas, Pixmap bitmap, int x, int y, int width, int height);
int Tk_CanvasPsColor(Tcl_Interp *interp, Tk_Canvas canvas, XColor *colorPtr);
int Tk_CanvasPsFont(Tcl_Interp *interp, Tk_Canvas canvas, Tk_Font font);
void Tk_CanvasPsPath(Tcl_Interp *interp, Tk_Canvas canvas, double *coordPtr, int numPoints);
int Tk_CanvasPsStipple(Tcl_Interp *interp, Tk_Canvas canvas, Pixmap bitmap);
double Tk_CanvasPsY(Tk_Canvas canvas, double y);
void Tk_CanvasSetStippleOrigin(Tk_Canvas canvas, GC gc);
int Tk_CanvasTagsParseProc(ClientData clientData, Tcl_Interp *interp, Tk_Window tkwin, char *value, char *widgRec, int offset);
char *Tk_CanvasTagsPrintProc(ClientData clientData, Tk_Window tkwin, char *widgRec, int offset, Tcl_FreeProc **freeProcPtr);
Tk_Window Tk_CanvasTkwin(Tk_Canvas canvas);
void Tk_CanvasWindowCoords(Tk_Canvas canvas, double x, double y, __int16 *screenXPtr, __int16 *screenYPtr);
void Tk_ChangeWindowAttributes(Tk_Window tkwin, unsigned __int32 valueMask, XSetWindowAttributes *attsPtr);
int Tk_CharBbox(Tk_TextLayout layout, int index, int *xPtr, int *yPtr, int *widthPtr, int *heightPtr);
int Tk_CheckbuttonCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tk_ChooseColorCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
void Tk_ClearSelection(Tk_Window tkwin, Atom selection);
int Tk_ClipboardAppend(Tcl_Interp *interp, Tk_Window tkwin, Atom target, Atom format, char *buffer);
int Tk_ClipboardClear(Tcl_Interp *interp, Tk_Window tkwin);
int Tk_ClipboardCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
Tk_TextLayout Tk_ComputeTextLayout(Tk_Font font, const char *string, int numChars, int wrapLength, Tk_Justify justify, int flags, int *widthPtr, int *heightPtr);
int Tk_ConfigureInfo(Tcl_Interp *interp, Tk_Window tkwin, Tk_ConfigSpec *specs, char *widgRec, char *argvName, int flags);
int Tk_ConfigureValue(Tcl_Interp *interp, Tk_Window tkwin, Tk_ConfigSpec *specs, char *widgRec, char *argvName, int flags);
int Tk_ConfigureWidget(Tcl_Interp *interp, Tk_Window tkwin, Tk_ConfigSpec *specs, int argc, char **argv, char *widgRec, int flags);
void Tk_ConfigureWindow(Tk_Window tkwin, unsigned int valueMask, XWindowChanges *valuePtr);
Tk_Window Tk_CoordsToWindow(int rootX, int rootY, Tk_Window tkwin);
unsigned __int32 Tk_CreateBinding(Tcl_Interp *interp, Tk_BindingTable bindingTable, ClientData object, char *eventString, char *command, int append);
Tk_BindingTable Tk_CreateBindingTable(Tcl_Interp *interp);
Tk_ErrorHandler Tk_CreateErrorHandler(Display *display, int errNum, int request, int minorCode, Tk_ErrorProc *errorProc, ClientData clientData);
void Tk_CreateEventHandler(Tk_Window token, unsigned __int32 mask, Tk_EventProc *proc, ClientData clientData);
void Tk_CreateGenericHandler(Tk_GenericProc *proc, ClientData clientData);
void Tk_CreateImageType(Tk_ImageType *typePtr);
void Tk_CreateItemType(Tk_ItemType *typePtr);
void Tk_CreatePhotoImageFormat(Tk_PhotoImageFormat *formatPtr);
void Tk_CreateSelHandler(Tk_Window tkwin, Atom selection, Atom target, Tk_SelectionProc *proc, ClientData clientData, Atom format);
Tk_Window Tk_CreateWindow(Tcl_Interp *interp, Tk_Window parent, char *name, char *screenName);
Tk_Window Tk_CreateWindowFromPath(Tcl_Interp *interp, Tk_Window tkwin, char *pathName, char *screenName);
int Tk_DefineBitmap(Tcl_Interp *interp, Tk_Uid name, char *source, int width, int height);
void Tk_DefineCursor(Tk_Window window, Tk_Cursor cursor);
void Tk_DeleteAllBindings(Tk_BindingTable bindingTable, ClientData object);
int Tk_DeleteBinding(Tcl_Interp *interp, Tk_BindingTable bindingTable, ClientData object, char *eventString);
void Tk_DeleteBindingTable(Tk_BindingTable bindingTable);
void Tk_DeleteErrorHandler(Tk_ErrorHandler handler);
void Tk_DeleteEventHandler(Tk_Window token, unsigned __int32 mask, Tk_EventProc *proc, ClientData clientData);
void Tk_DeleteGenericHandler(Tk_GenericProc *proc, ClientData clientData);
void Tk_DeleteImage(Tcl_Interp *interp, char *name);
void Tk_DeleteSelHandler(Tk_Window tkwin, Atom selection, Atom target);
int Tk_DestroyCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
void Tk_DestroyWindow(Tk_Window tkwin);
char *Tk_DisplayName(Tk_Window tkwin);
int Tk_DistanceToTextLayout(Tk_TextLayout layout, int x, int y);
void Tk_Draw3DPolygon(Tk_Window tkwin, Drawable drawable, Tk_3DBorder border, XPoint *pointPtr, int numPoints, int borderWidth, int leftRelief);
void Tk_Draw3DRectangle(Tk_Window tkwin, Drawable drawable, Tk_3DBorder border, int x, int y, int width, int height, int borderWidth, int relief);
void Tk_DrawChars(Display *display, Drawable drawable, GC gc, Tk_Font tkfont, const char *source, int numChars, int x, int y);
void Tk_DrawFocusHighlight(Tk_Window tkwin, GC gc, int width, Drawable drawable);
void Tk_DrawTextLayout(Display *display, Drawable drawable, GC gc, Tk_TextLayout layout, int x, int y, int firstChar, int lastChar);
int Tk_EntryCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tk_EventCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
void Tk_Fill3DPolygon(Tk_Window tkwin, Drawable drawable, Tk_3DBorder border, XPoint *pointPtr, int numPoints, int borderWidth, int leftRelief);
void Tk_Fill3DRectangle(Tk_Window tkwin, Drawable drawable, Tk_3DBorder border, int x, int y, int width, int height, int borderWidth, int relief);
Tk_PhotoHandle Tk_FindPhoto(Tcl_Interp *interp, char *imageName);
int Tk_FocusCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
Font Tk_FontId(Tk_Font font);
int Tk_FontObjCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *const *objv);
int Tk_FrameCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
void Tk_Free3DBorder(Tk_3DBorder border);
void Tk_FreeBitmap(Display *display, Pixmap bitmap);
void Tk_FreeColor(XColor *colorPtr);
void Tk_FreeColormap(Display *display, Colormap colormap);
void Tk_FreeCursor(Display *display, Tk_Cursor cursor);
void Tk_FreeFont(Tk_Font);
void Tk_FreeGC(Display *display, GC gc);
void Tk_FreeImage(Tk_Image image);
void Tk_FreeOptions(Tk_ConfigSpec *specs, char *widgRec, Display *display, int needFlags);
void Tk_FreePixmap(Display *display, Pixmap pixmap);
void Tk_FreeTextLayout(Tk_TextLayout textLayout);
void Tk_FreeXId(Display *display, XID xid);
GC Tk_GCForColor(XColor *colorPtr, Drawable drawable);
void Tk_GeometryRequest(Tk_Window tkwin, int reqWidth, int reqHeight);
Tk_3DBorder Tk_Get3DBorder(Tcl_Interp *interp, Tk_Window tkwin, Tk_Uid colorName);
void Tk_GetAllBindings(Tcl_Interp *interp, Tk_BindingTable bindingTable, ClientData object);
int Tk_GetAnchor(Tcl_Interp *interp, char *string, Tk_Anchor *anchorPtr);
char *Tk_GetAtomName(Tk_Window tkwin, Atom atom);
char *Tk_GetBinding(Tcl_Interp *interp, Tk_BindingTable bindingTable, ClientData object, char *eventString);
Pixmap Tk_GetBitmap(Tcl_Interp *interp, Tk_Window tkwin, Tk_Uid string);
Pixmap Tk_GetBitmapFromData(Tcl_Interp *interp, Tk_Window tkwin, char *source, int width, int height);
int Tk_GetCapStyle(Tcl_Interp *interp, char *string, int *capPtr);
XColor *Tk_GetColor(Tcl_Interp *interp, Tk_Window tkwin, Tk_Uid name);
XColor *Tk_GetColorByValue(Tk_Window tkwin, XColor *colorPtr);
Colormap Tk_GetColormap(Tcl_Interp *interp, Tk_Window tkwin, char *string);
Tk_Cursor Tk_GetCursor(Tcl_Interp *interp, Tk_Window tkwin, Tk_Uid string);
Tk_Cursor Tk_GetCursorFromData(Tcl_Interp *interp, Tk_Window tkwin, char *source, char *mask, int width, int height, int xHot, int yHot, Tk_Uid fg, Tk_Uid bg);
Tk_Font Tk_GetFont(Tcl_Interp *interp, Tk_Window tkwin, const char *string);
Tk_Font Tk_GetFontFromObj(Tcl_Interp *interp, Tk_Window tkwin, Tcl_Obj *objPtr);
void Tk_GetFontMetrics(Tk_Font font, Tk_FontMetrics *fmPtr);
GC Tk_GetGC(Tk_Window tkwin, unsigned __int32 valueMask, XGCValues *valuePtr);
GC Tk_GetGCColor(Tk_Window tkwin, unsigned __int32 valueMask, XGCValues *valuePtr, XColor *foreground, XColor *background);
Tk_Image Tk_GetImage(Tcl_Interp *interp, Tk_Window tkwin, char *name, Tk_ImageChangedProc *changeProc, ClientData clientData);
ClientData Tk_GetImageMasterData(Tcl_Interp *interp, char *name, Tk_ImageType **typePtrPtr);
Tk_ItemType *Tk_GetItemTypes(void);
int Tk_GetJoinStyle(Tcl_Interp *interp, char *string, int *joinPtr);
int Tk_GetJustify(Tcl_Interp *interp, char *string, Tk_Justify *justifyPtr);
int Tk_GetNumMainWindows(void);
int Tk_GetOpenFileCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
Tk_Uid Tk_GetOption(Tk_Window tkwin, char *name, char *className);
int Tk_GetPixels(Tcl_Interp *interp, Tk_Window tkwin, char *string, int *intPtr);
Pixmap Tk_GetPixmap(Display *display, Drawable d, int width, int height, int depth);
int Tk_GetRelief(Tcl_Interp *interp, char *name, int *reliefPtr);
void Tk_GetRootCoords(Tk_Window tkwin, int *xPtr, int *yPtr);
int Tk_GetSaveFileCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tk_GetScreenMM(Tcl_Interp *interp, Tk_Window tkwin, char *string, double *doublePtr);
int Tk_GetScrollInfo(Tcl_Interp *interp, int argc, char **argv, double *dblPtr, int *intPtr);
int Tk_GetSelection(Tcl_Interp *interp, Tk_Window tkwin, Atom selection, Atom target, Tk_GetSelProc *proc, ClientData clientData);
Tk_Uid Tk_GetUid(const char *string);
void Tk_GetVRootGeometry(Tk_Window tkwin, int *xPtr, int *yPtr, int *widthPtr, int *heightPtr);
Visual *Tk_GetVisual(Tcl_Interp *interp, Tk_Window tkwin, char *string, int *depthPtr, Colormap *colormapPtr);
int Tk_Grab(Tcl_Interp *interp, Tk_Window tkwin, int grabGlobal);
int Tk_GrabCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tk_GridCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
void Tk_HandleEvent(XEvent *eventPtr);
Tk_Window Tk_IdToWindow(Display *display, Window window);
void Tk_ImageChanged(Tk_ImageMaster master, int x, int y, int width, int height, int imageWidth, int imageHeight);
int Tk_ImageCmd(ClientData clientData, Tcl_Interp *interp, int argc, Tcl_Obj *const *objv);
int Tk_Init(Tcl_Interp *interp);
Atom Tk_InternAtom(Tk_Window tkwin, char *name);
int Tk_IntersectTextLayout(Tk_TextLayout layout, int x, int y, int width, int height);
int Tk_LabelCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tk_ListboxCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tk_LowerCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
void Tk_Main(int argc, char **argv, Tcl_AppInitProc *appInitProc);
void Tk_MainLoop(void);
Tk_Window Tk_MainWindow(Tcl_Interp *interp);
void Tk_MaintainGeometry(Tk_Window slave, Tk_Window master, int x, int y, int width, int height);
void Tk_MakeWindowExist(Tk_Window tkwin);
void Tk_ManageGeometry(Tk_Window tkwin, Tk_GeomMgr *mgrPtr, ClientData clientData);
void Tk_MapWindow(Tk_Window tkwin);
int Tk_MeasureChars(Tk_Font tkfont, const char *source, int maxChars, int maxPixels, int flags, int *lengthPtr);
int Tk_MenuCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tk_MenubuttonCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tk_MessageBoxCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tk_MessageCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
void Tk_MoveResizeWindow(Tk_Window tkwin, int x, int y, int width, int height);
void Tk_MoveToplevelWindow(Tk_Window tkwin, int x, int y);
void Tk_MoveWindow(Tk_Window tkwin, int x, int y);
char *Tk_NameOf3DBorder(Tk_3DBorder border);
char *Tk_NameOfAnchor(Tk_Anchor anchor);
char *Tk_NameOfBitmap(Display *display, Pixmap bitmap);
char *Tk_NameOfCapStyle(int cap);
char *Tk_NameOfColor(XColor *colorPtr);
char *Tk_NameOfCursor(Display *display, Tk_Cursor cursor);
char *Tk_NameOfFont(Tk_Font font);
char *Tk_NameOfImage(Tk_ImageMaster imageMaster);
char *Tk_NameOfJoinStyle(int join);
char *Tk_NameOfJustify(Tk_Justify justify);
char *Tk_NameOfRelief(int relief);
Tk_Window Tk_NameToWindow(Tcl_Interp *interp, char *pathName, Tk_Window tkwin);
int Tk_OptionCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
void Tk_OwnSelection(Tk_Window tkwin, Atom selection, Tk_LostSelProc *proc, ClientData clientData);
int Tk_PackCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tk_ParseArgv(Tcl_Interp *interp, Tk_Window tkwin, int *argcPtr, char **argv, Tk_ArgvInfo *argTable, int flags);
void Tk_PhotoBlank(Tk_PhotoHandle handle);
void Tk_PhotoExpand(Tk_PhotoHandle handle, int width, int height);
int Tk_PhotoGetImage(Tk_PhotoHandle handle, Tk_PhotoImageBlock *blockPtr);
void Tk_PhotoGetSize(Tk_PhotoHandle handle, int *widthPtr, int *heightPtr);
void Tk_PhotoPutBlock(Tk_PhotoHandle handle, Tk_PhotoImageBlock *blockPtr, int x, int y, int width, int height);
void Tk_PhotoPutZoomedBlock(Tk_PhotoHandle handle, Tk_PhotoImageBlock *blockPtr, int x, int y, int width, int height, int zoomX, int zoomY, int subsampleX, int subsampleY);
void Tk_PhotoSetSize(Tk_PhotoHandle handle, int width, int height);
int Tk_PlaceCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tk_PointToChar(Tk_TextLayout layout, int x, int y);
int Tk_PostscriptFontName(Tk_Font tkfont, Tcl_DString *dsPtr);
void Tk_PreserveColormap(Display *display, Colormap colormap);
void Tk_QueueWindowEvent(XEvent *eventPtr, Tcl_QueuePosition position);
int Tk_RadiobuttonCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tk_RaiseCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
void Tk_RedrawImage(Tk_Image image, int imageX, int imageY, int width, int height, Drawable drawable, int drawableX, int drawableY);
void Tk_ResizeWindow(Tk_Window tkwin, int width, int height);
int Tk_RestackWindow(Tk_Window tkwin, int aboveBelow, Tk_Window other);
Tk_RestrictProc *Tk_RestrictEvents(Tk_RestrictProc *proc, ClientData arg, ClientData *prevArgPtr);
int Tk_SafeInit(Tcl_Interp *interp);
int Tk_ScaleCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tk_ScrollbarCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tk_SelectionCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tk_SendCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
char *Tk_SetAppName(Tk_Window tkwin, char *name);
void Tk_SetBackgroundFromBorder(Tk_Window tkwin, Tk_3DBorder border);
void Tk_SetClass(Tk_Window tkwin, char *className);
void Tk_SetGrid(Tk_Window tkwin, int reqWidth, int reqHeight, int gridWidth, int gridHeight);
void Tk_SetInternalBorder(Tk_Window tkwin, int width);
void Tk_SetWindowBackground(Tk_Window tkwin, unsigned __int32 pixel);
void Tk_SetWindowBackgroundPixmap(Tk_Window tkwin, Pixmap pixmap);
void Tk_SetWindowBorder(Tk_Window tkwin, unsigned __int32 pixel);
void Tk_SetWindowBorderPixmap(Tk_Window tkwin, Pixmap pixmap);
void Tk_SetWindowBorderWidth(Tk_Window tkwin, int width);
void Tk_SetWindowColormap(Tk_Window tkwin, Colormap colormap);
int Tk_SetWindowVisual(Tk_Window tkwin, Visual *visual, int depth, Colormap colormap);
void Tk_SizeOfBitmap(Display *display, Pixmap bitmap, int *widthPtr, int *heightPtr);
void Tk_SizeOfImage(Tk_Image image, int *widthPtr, int *heightPtr);
int Tk_StrictMotif(Tk_Window tkwin);
int Tk_TextCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
void Tk_TextLayoutToPostscript(Tcl_Interp *interp, Tk_TextLayout layout);
int Tk_TextWidth(Tk_Font font, const char *string, int numChars);
int Tk_TkObjCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *const *objv);
int Tk_TkwaitCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
int Tk_ToplevelCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
void Tk_UndefineCursor(Tk_Window window);
void Tk_UnderlineChars(Display *display, Drawable drawable, GC gc, Tk_Font tkfont, const char *source, int x, int y, int firstChar, int lastChar);
void Tk_UnderlineTextLayout(Display *display, Drawable drawable, GC gc, Tk_TextLayout layout, int x, int y, int underline);
void Tk_Ungrab(Tk_Window tkwin);
void Tk_UnmaintainGeometry(Tk_Window slave, Tk_Window master);
void Tk_UnmapWindow(Tk_Window tkwin);
void Tk_UnsetGrid(Tk_Window tkwin);
int Tk_UpdateCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
void Tk_UpdatePointer(Tk_Window tkwin, int x, int y, int state);
int Tk_WinfoObjCmd(ClientData clientData, Tcl_Interp *interp, int objc, Tcl_Obj *const *objv);
int Tk_WmCmd(ClientData clientData, Tcl_Interp *interp, int argc, char **argv);
MACRO__U _U;
char *UP;
MACRO__USING _USING_PROTOTYPES_;
MACRO__U _X;
void XActivateScreenSaver(Display *);
XExtCodes *XAddExtension(Display *);
void XAddHost(Display *, XHostAddress *);
void XAddHosts(Display *, XHostAddress *, int);
void XAddToExtensionList(struct _XExtData **, XExtData *);
void XAddToSaveSet(Display *, Window);
unsigned __int32 XAllPlanes(void);
int XAllocColor(Display *, Colormap, XColor *);
int XAllocColorCells(Display *, Colormap, int, unsigned __int32 *, unsigned int, unsigned __int32 *, unsigned int);
int XAllocColorPlanes(Display *, Colormap, int, unsigned __int32 *, int, int, int, int, unsigned __int32 *, unsigned __int32 *, unsigned __int32 *);
int XAllocNamedColor(Display *, Colormap, const char *, XColor *, XColor *);
void XAllowEvents(Display *, int, Time);
void XAutoRepeatOff(Display *);
void XAutoRepeatOn(Display *);
char *XBaseFontNameListOfFontSet(XFontSet);
void XBell(Display *, int);
int XBitmapBitOrder(Display *);
int XBitmapPad(Display *);
int XBitmapUnit(Display *);
unsigned __int32 XBlackPixel(Display *, int);
unsigned __int32 XBlackPixelOfScreen(Screen *);
int XCellsOfScreen(Screen *);
void XChangeActivePointerGrab(Display *, unsigned int, Cursor, Time);
void XChangeGC(Display *, GC, unsigned __int32, XGCValues *);
void XChangeKeyboardControl(Display *, unsigned __int32, XKeyboardControl *);
void XChangeKeyboardMapping(Display *, int, int, KeySym *, int);
void XChangePointerControl(Display *, int, int, int, int, int);
void XChangeProperty(Display *, Window, Atom, Atom, int, int, const unsigned __int8 *, int);
void XChangeSaveSet(Display *, Window, int);
void XChangeWindowAttributes(Display *, Window, unsigned __int32, XSetWindowAttributes *);
int XCheckIfEvent(Display *, XEvent *, int (*)(Display *, XEvent *, XPointer), XPointer);
int XCheckMaskEvent(Display *, __int32, XEvent *);
int XCheckTypedEvent(Display *, int, XEvent *);
int XCheckTypedWindowEvent(Display *, Window, int, XEvent *);
int XCheckWindowEvent(Display *, Window, __int32, XEvent *);
void XCirculateSubwindows(Display *, Window, int);
void XCirculateSubwindowsDown(Display *, Window);
void XCirculateSubwindowsUp(Display *, Window);
void XClearArea(Display *, Window, int, int, unsigned int, unsigned int, int);
void XClearWindow(Display *, Window);
void XCloseDisplay(Display *);
int XCloseIM(XIM);
void XConfigureWindow(Display *, Window, unsigned int, XWindowChanges *);
int XConnectionNumber(Display *);
int XContextDependentDrawing(XFontSet);
void XConvertSelection(Display *, Atom, Atom, Atom, Window, Time);
void XCopyArea(Display *, Drawable, Drawable, GC, int, int, unsigned int, unsigned int, int, int);
Colormap XCopyColormapAndFree(Display *, Colormap);
void XCopyGC(Display *, GC, unsigned __int32, GC);
void XCopyPlane(Display *, Drawable, Drawable, GC, int, int, unsigned int, unsigned int, int, int, unsigned __int32);
Pixmap XCreateBitmapFromData(Display *, Drawable, const char *, unsigned int, unsigned int);
Colormap XCreateColormap(Display *, Window, Visual *, int);
Cursor XCreateFontCursor(Display *, unsigned int);
XFontSet XCreateFontSet(Display *, const char *, char ***, int *, char **);
GC XCreateGC(Display *, Drawable, unsigned __int32, XGCValues *);
Cursor XCreateGlyphCursor(Display *, Font, Font, unsigned int, unsigned int, XColor *, XColor *);
XIC XCreateIC();
XImage *XCreateImage(Display *, Visual *, unsigned int, int, int, char *, unsigned int, unsigned int, int, int);
Pixmap XCreatePixmap(Display *, Drawable, unsigned int, unsigned int, unsigned int);
Cursor XCreatePixmapCursor(Display *, Pixmap, Pixmap, XColor *, XColor *, unsigned int, unsigned int);
Pixmap XCreatePixmapFromBitmapData(Display *, Drawable, char *, unsigned int, unsigned int, unsigned __int32, unsigned __int32, unsigned int);
Window XCreateSimpleWindow(Display *, Window, int, int, unsigned int, unsigned int, unsigned int, unsigned __int32, unsigned __int32);
Window XCreateWindow(Display *, Window, int, int, unsigned int, unsigned int, unsigned int, int, unsigned int, Visual *, unsigned __int32, XSetWindowAttributes *);
Colormap XDefaultColormap(Display *, int);
Colormap XDefaultColormapOfScreen(Screen *);
int XDefaultDepth(Display *, int);
int XDefaultDepthOfScreen(Screen *);
GC XDefaultGC(Display *, int);
GC XDefaultGCOfScreen(Screen *);
Window XDefaultRootWindow(Display *);
int XDefaultScreen(Display *);
Screen *XDefaultScreenOfDisplay(Display *);
Visual *XDefaultVisual(Display *, int);
Visual *XDefaultVisualOfScreen(Screen *);
void XDefineCursor(Display *, Window, Cursor);
XModifierKeymap *XDeleteModifiermapEntry(XModifierKeymap *, unsigned int, int);
void XDeleteProperty(Display *, Window, Atom);
void XDestroyIC(XIC);
void XDestroySubwindows(Display *, Window);
void XDestroyWindow(Display *, Window);
void XDisableAccessControl(Display *);
int XDisplayCells(Display *, int);
int XDisplayHeight(Display *, int);
int XDisplayHeightMM(Display *, int);
void XDisplayKeycodes(Display *, int *, int *);
unsigned __int32 XDisplayMotionBufferSize(Display *);
char *XDisplayName(const char *);
Display *XDisplayOfIM(XIM);
Display *XDisplayOfScreen(Screen *);
int XDisplayPlanes(Display *, int);
char *XDisplayString(Display *);
int XDisplayWidth(Display *, int);
int XDisplayWidthMM(Display *, int);
int XDoesBackingStore(Screen *);
int XDoesSaveUnders(Screen *);
void XDrawArc(Display *, Drawable, GC, int, int, unsigned int, unsigned int, int, int);
void XDrawArcs(Display *, Drawable, GC, XArc *, int);
void XDrawImageString(Display *, Drawable, GC, int, int, const char *, int);
void XDrawImageString16(Display *, Drawable, GC, int, int, const XChar2b *, int);
void XDrawLine(Display *, Drawable, GC, int, int, int, int);
void XDrawLines(Display *, Drawable, GC, XPoint *, int, int);
void XDrawPoint(Display *, Drawable, GC, int, int);
void XDrawPoints(Display *, Drawable, GC, XPoint *, int, int);
void XDrawRectangle(Display *, Drawable, GC, int, int, unsigned int, unsigned int);
void XDrawRectangles(Display *, Drawable, GC, XRectangle *, int);
void XDrawSegments(Display *, Drawable, GC, XSegment *, int);
void XDrawString(Display *, Drawable, GC, int, int, const char *, int);
void XDrawString16(Display *, Drawable, GC, int, int, const XChar2b *, int);
void XDrawText(Display *, Drawable, GC, int, int, XTextItem *, int);
void XDrawText16(Display *, Drawable, GC, int, int, XTextItem16 *, int);
XExtData **XEHeadOfExtensionList(XEDataObject);
void XEnableAccessControl(Display *);
__int32 XEventMaskOfScreen(Screen *);
int XEventsQueued(Display *, int);
__int32 XExtendedMaxRequestSize(Display *);
XFontSetExtents *XExtentsOfFontSet(XFontSet);
char *XFetchBuffer(Display *, int *, int);
char *XFetchBytes(Display *, int *);
int XFetchName(Display *, Window, char **);
void XFillArc(Display *, Drawable, GC, int, int, unsigned int, unsigned int, int, int);
void XFillArcs(Display *, Drawable, GC, XArc *, int);
void XFillPolygon(Display *, Drawable, GC, XPoint *, int, int, int);
void XFillRectangle(Display *, Drawable, GC, int, int, unsigned int, unsigned int);
void XFillRectangles(Display *, Drawable, GC, XRectangle *, int);
int XFilterEvent(XEvent *, Window);
XExtData *XFindOnExtensionList(XExtData **, int);
void XFlush(Display *);
void XFlushGC(Display *, GC);
int XFontsOfFontSet(XFontSet, XFontStruct ***, char ***);
void XForceScreenSaver(Display *, int);
void XFree(void *);
void XFreeColormap(Display *, Colormap);
void XFreeColors(Display *, Colormap, unsigned __int32 *, int, unsigned __int32);
void XFreeCursor(Display *, Cursor);
void XFreeExtensionList(char **);
void XFreeFont(Display *, XFontStruct *);
void XFreeFontInfo(char **, XFontStruct *, int);
void XFreeFontNames(char **);
void XFreeFontPath(char **);
void XFreeFontSet(Display *, XFontSet);
void XFreeGC(Display *, GC);
void XFreeModifiermap(XModifierKeymap *);
void XFreePixmap(Display *, Pixmap);
void XFreeStringList(char **);
GContext XGContextFromGC(GC);
int XGeometry(Display *, int, const char *, const char *, unsigned int, unsigned int, unsigned int, int, int, int *, int *, int *, int *);
char *XGetAtomName(Display *, Atom);
int XGetCommand(Display *, Window, char ***, int *);
char *XGetDefault(Display *, const char *, const char *);
void XGetErrorDatabaseText(Display *, const char *, const char *, const char *, char *, int);
void XGetErrorText(Display *, int, char *, int);
char **XGetFontPath(Display *, int *);
int XGetFontProperty(XFontStruct *, Atom, unsigned __int32 *);
int XGetGCValues(Display *, GC, unsigned __int32, XGCValues *);
int XGetGeometry(Display *, Drawable, Window *, int *, int *, unsigned int *, unsigned int *, unsigned int *, unsigned int *);
char *XGetICValues();
char *XGetIMValues();
int XGetIconName(Display *, Window, char **);
XImage *XGetImage(Display *, Drawable, int, int, unsigned int, unsigned int, unsigned __int32, int);
void XGetInputFocus(Display *, Window *, int *);
void XGetKeyboardControl(Display *, XKeyboardState *);
KeySym *XGetKeyboardMapping(Display *, unsigned int, int, int *);
XModifierKeymap *XGetModifierMapping(Display *);
XTimeCoord *XGetMotionEvents(Display *, Window, Time, Time, int *);
void XGetPointerControl(Display *, int *, int *, int *);
int XGetPointerMapping(Display *, unsigned __int8 *, int);
void XGetScreenSaver(Display *, int *, int *, int *, int *);
Window XGetSelectionOwner(Display *, Atom);
XImage *XGetSubImage(Display *, Drawable, int, int, unsigned int, unsigned int, unsigned __int32, int, XImage *, int, int);
int XGetTransientForHint(Display *, Window, Window *);
int XGetWMColormapWindows(Display *, Window, Window **, int *);
int XGetWMProtocols(Display *, Window, Atom **, int *);
int XGetWindowAttributes(Display *, Window, XWindowAttributes *);
int XGetWindowProperty(Display *, Window, Atom, __int32, __int32, int, Atom, Atom *, int *, unsigned __int32 *, unsigned __int32 *, unsigned __int8 **);
void XGrabButton(Display *, unsigned int, unsigned int, Window, int, unsigned int, int, int, Window, Cursor);
void XGrabKey(Display *, int, unsigned int, Window, int, int, int);
int XGrabKeyboard(Display *, Window, int, int, int, Time);
int XGrabPointer(Display *, Window, int, unsigned int, int, int, Window, Cursor, Time);
void XGrabServer(Display *);
int XHeightMMOfScreen(Screen *);
int XHeightOfScreen(Screen *);
XIM XIMOfIC(XIC);
int XIconifyWindow(Display *, Window, int);
void XIfEvent(Display *, XEvent *, int (*)(Display *, XEvent *, XPointer), XPointer);
int XImageByteOrder(Display *);
XExtCodes *XInitExtension(Display *, const char *);
XModifierKeymap *XInsertModifiermapEntry(XModifierKeymap *, unsigned int, int);
void XInstallColormap(Display *, Colormap);
Atom XInternAtom(Display *, const char *, int);
KeySym XKeycodeToKeysym(Display *, unsigned int, int);
KeyCode XKeysymToKeycode(Display *, KeySym);
char *XKeysymToString(KeySym);
void XKillClient(Display *, XID);
unsigned __int32 XLastKnownRequestProcessed(Display *);
int *XListDepths(Display *, int, int *);
char **XListExtensions(Display *, int *);
char **XListFonts(Display *, const char *, int, int *);
char **XListFontsWithInfo(Display *, const char *, int, int *, XFontStruct **);
XHostAddress *XListHosts(Display *, int *, int *);
Colormap *XListInstalledColormaps(Display *, Window, int *);
XPixmapFormatValues *XListPixmapFormats(Display *, int *);
Atom *XListProperties(Display *, Window, int *);
Font XLoadFont(Display *, const char *);
XFontStruct *XLoadQueryFont(Display *, const char *);
char *XLocaleOfFontSet(XFontSet);
char *XLocaleOfIM(XIM);
int XLookupColor(Display *, Colormap, const char *, XColor *, XColor *);
KeySym XLookupKeysym(XKeyEvent *, int);
void XLowerWindow(Display *, Window);
void XMapRaised(Display *, Window);
void XMapSubwindows(Display *, Window);
void XMapWindow(Display *, Window);
void XMaskEvent(Display *, __int32, XEvent *);
int XMaxCmapsOfScreen(Screen *);
__int32 XMaxRequestSize(Display *);
int XMinCmapsOfScreen(Screen *);
void XMoveResizeWindow(Display *, Window, int, int, unsigned int, unsigned int);
void XMoveWindow(Display *, Window, int, int);
XModifierKeymap *XNewModifiermap(int);
void XNextEvent(Display *, XEvent *);
unsigned __int32 XNextRequest(Display *);
void XNoOp(Display *);
Display *XOpenDisplay(const char *);
XIM XOpenIM(Display *, struct _XrmHashBucketRec *, char *, char *);
int XParseColor(Display *, Colormap, const char *, XColor *);
int XParseGeometry(const char *, int *, int *, unsigned int *, unsigned int *);
void XPeekEvent(Display *, XEvent *);
void XPeekIfEvent(Display *, XEvent *, int (*)(Display *, XEvent *, XPointer), XPointer);
int XPending(Display *);
int XPlanesOfScreen(Screen *);
int XProtocolRevision(Display *);
int XProtocolVersion(Display *);
void XPutBackEvent(Display *, XEvent *);
void XPutImage(Display *, Drawable, GC, XImage *, int, int, int, int, unsigned int, unsigned int);
int XQLength(Display *);
int XQueryBestCursor(Display *, Drawable, unsigned int, unsigned int, unsigned int *, unsigned int *);
int XQueryBestSize(Display *, int, Drawable, unsigned int, unsigned int, unsigned int *, unsigned int *);
int XQueryBestStipple(Display *, Drawable, unsigned int, unsigned int, unsigned int *, unsigned int *);
int XQueryBestTile(Display *, Drawable, unsigned int, unsigned int, unsigned int *, unsigned int *);
void XQueryColor(Display *, Colormap, XColor *);
void XQueryColors(Display *, Colormap, XColor *, int);
int XQueryExtension(Display *, const char *, int *, int *, int *);
XFontStruct *XQueryFont(Display *, XID);
void XQueryKeymap(Display *, char *);
int XQueryPointer(Display *, Window, Window *, Window *, int *, int *, int *, int *, unsigned int *);
void XQueryTextExtents(Display *, XID, const char *, int, int *, int *, int *, XCharStruct *);
void XQueryTextExtents16(Display *, XID, const XChar2b *, int, int *, int *, int *, XCharStruct *);
int XQueryTree(Display *, Window, Window *, Window *, Window **, unsigned int *);
void XRaiseWindow(Display *, Window);
int XReadBitmapFile(Display *, Drawable, const char *, unsigned int *, unsigned int *, Pixmap *, int *, int *);
void XRebindKeysym(Display *, KeySym, KeySym *, int, const unsigned __int8 *, int);
void XRecolorCursor(Display *, Cursor, XColor *, XColor *);
int XReconfigureWMWindow(Display *, Window, int, unsigned int, XWindowChanges *);
void XRefreshKeyboardMapping(XMappingEvent *);
void XRemoveFromSaveSet(Display *, Window);
void XRemoveHost(Display *, XHostAddress *);
void XRemoveHosts(Display *, XHostAddress *, int);
void XReparentWindow(Display *, Window, Window, int, int);
void XResetScreenSaver(Display *);
void XResizeWindow(Display *, Window, unsigned int, unsigned int);
char *XResourceManagerString(Display *);
void XRestackWindows(Display *, Window *, int);
Window XRootWindow(Display *, int);
Window XRootWindowOfScreen(Screen *);
void XRotateBuffers(Display *, int);
void XRotateWindowProperties(Display *, Window, Atom *, int, int);
int XScreenCount(Display *);
int XScreenNumberOfScreen(Screen *);
Screen *XScreenOfDisplay(Display *, int);
char *XScreenResourceString(Screen *);
void XSelectInput(Display *, Window, __int32);
int XSendEvent(Display *, Window, int, __int32, XEvent *);
char *XServerVendor(Display *);
void XSetAccessControl(Display *, int);
int (*XSetAfterFunction(Display *, int (*)(Display *)))();
void XSetArcMode(Display *, GC, int);
void XSetBackground(Display *, GC, unsigned __int32);
void XSetClipMask(Display *, GC, Pixmap);
void XSetClipOrigin(Display *, GC, int, int);
void XSetClipRectangles(Display *, GC, int, int, XRectangle *, int, int);
void XSetCloseDownMode(Display *, int);
void XSetCommand(Display *, Window, char **, int);
void XSetDashes(Display *, GC, int, const char *, int);
XErrorHandler XSetErrorHandler(XErrorHandler);
void XSetFillRule(Display *, GC, int);
void XSetFillStyle(Display *, GC, int);
void XSetFont(Display *, GC, Font);
void XSetFontPath(Display *, char **, int);
void XSetForeground(Display *, GC, unsigned __int32);
void XSetFunction(Display *, GC, int);
void XSetGraphicsExposures(Display *, GC, int);
void XSetICFocus(XIC);
char *XSetICValues();
XIOErrorHandler XSetIOErrorHandler(XIOErrorHandler);
void XSetIconName(Display *, Window, const char *);
void XSetInputFocus(Display *, Window, int, Time);
void XSetLineAttributes(Display *, GC, unsigned int, int, int, int);
char *XSetLocaleModifiers(const char *);
int XSetModifierMapping(Display *, XModifierKeymap *);
void XSetPlaneMask(Display *, GC, unsigned __int32);
int XSetPointerMapping(Display *, const unsigned __int8 *, int);
void XSetScreenSaver(Display *, int, int, int, int);
void XSetSelectionOwner(Display *, Atom, Window, Time);
void XSetState(Display *, GC, unsigned __int32, unsigned __int32, int, unsigned __int32);
void XSetStipple(Display *, GC, Pixmap);
void XSetSubwindowMode(Display *, GC, int);
void XSetTSOrigin(Display *, GC, int, int);
void XSetTile(Display *, GC, Pixmap);
void XSetTransientForHint(Display *, Window, Window);
int XSetWMColormapWindows(Display *, Window, Window *, int);
int XSetWMProtocols(Display *, Window, Atom *, int);
void XSetWindowBackground(Display *, Window, unsigned __int32);
void XSetWindowBackgroundPixmap(Display *, Window, Pixmap);
void XSetWindowBorder(Display *, Window, unsigned __int32);
void XSetWindowBorderPixmap(Display *, Window, Pixmap);
void XSetWindowBorderWidth(Display *, Window, unsigned int);
void XSetWindowColormap(Display *, Window, Colormap);
void XStoreBuffer(Display *, const char *, int, int);
void XStoreBytes(Display *, const char *, int);
void XStoreColor(Display *, Colormap, XColor *);
void XStoreColors(Display *, Colormap, XColor *, int);
void XStoreName(Display *, Window, const char *);
void XStoreNamedColor(Display *, Colormap, const char *, unsigned __int32, int);
KeySym XStringToKeysym(const char *);
int XSupportsLocale(void);
void XSync(Display *, int);
int (*XSynchronize(Display *, int))();
void XTextExtents(XFontStruct *, const char *, int, int *, int *, int *, XCharStruct *);
void XTextExtents16(XFontStruct *, const XChar2b *, int, int *, int *, int *, XCharStruct *);
int XTextWidth(XFontStruct *, const char *, int);
int XTextWidth16(XFontStruct *, const XChar2b *, int);
int XTranslateCoordinates(Display *, Window, Window, int, int, int *, int *, Window *);
void XUndefineCursor(Display *, Window);
void XUngrabButton(Display *, unsigned int, unsigned int, Window);
void XUngrabKey(Display *, int, unsigned int, Window);
void XUngrabKeyboard(Display *, Time);
void XUngrabPointer(Display *, Time);
void XUngrabServer(Display *);
void XUninstallColormap(Display *, Colormap);
void XUnloadFont(Display *, Font);
void XUnmapSubwindows(Display *, Window);
void XUnmapWindow(Display *, Window);
void XUnsetICFocus(XIC);
XVaNestedList XVaCreateNestedList();
int XVendorRelease(Display *);
VisualID XVisualIDFromVisual(Visual *);
void XWarpPointer(Display *, Window, Window, int, int, unsigned int, unsigned int, int, int);
unsigned __int32 XWhitePixel(Display *, int);
unsigned __int32 XWhitePixelOfScreen(Screen *);
int XWidthMMOfScreen(Screen *);
int XWidthOfScreen(Screen *);
void XWindowEvent(Display *, Window, __int32, XEvent *);
int XWithdrawWindow(Display *, Window, int);
int XWriteBitmapFile(Display *, const char *, Pixmap, unsigned int, unsigned int, int, int);
void XmbDrawImageString(Display *, Drawable, XFontSet, GC, int, int, const char *, int);
void XmbDrawString(Display *, Drawable, XFontSet, GC, int, int, const char *, int);
void XmbDrawText(Display *, Drawable, GC, int, int, XmbTextItem *, int);
int XmbLookupString(XIC, XKeyPressedEvent *, char *, int, KeySym *, int *);
char *XmbResetIC(XIC);
int XmbTextEscapement(XFontSet, const char *, int);
int XmbTextExtents(XFontSet, const char *, int, XRectangle *, XRectangle *);
int XmbTextPerCharExtents(XFontSet, const char *, int, XRectangle *, XRectangle *, int, int *, XRectangle *, XRectangle *);
void XrmInitialize(void);
void XwcDrawImageString(Display *, Drawable, XFontSet, GC, int, int, wchar_t *, int);
void XwcDrawString(Display *, Drawable, XFontSet, GC, int, int, wchar_t *, int);
void XwcDrawText(Display *, Drawable, GC, int, int, XwcTextItem *, int);
int XwcLookupString(XIC, XKeyPressedEvent *, wchar_t *, int, KeySym *, int *);
wchar_t *XwcResetIC(XIC);
int XwcTextEscapement(XFontSet, wchar_t *, int);
int XwcTextExtents(XFontSet, wchar_t *, int, XRectangle *, XRectangle *);
int XwcTextPerCharExtents(XFontSet, wchar_t *, int, XRectangle *, XRectangle *, int, int *, XRectangle *, XRectangle *);
MACRO___DIRENT __DIRENT_COOKIE;
MACRO_EWOULDBLOCK __ELASTERROR;
MACRO_FP_RDI __IEEE_DBL_EXPBIAS;
MACRO___IEEE_DBL __IEEE_DBL_EXPLEN;
MACRO___IEEE_FLT __IEEE_DBL_FRACLEN;
MACRO___IEEE_DBL_NAN __IEEE_DBL_NAN_EXP;
MACRO___IEEE __IEEE_FLT_EXPBIAS;
MACRO___IEEE_FLT __IEEE_FLT_EXPLEN;
MACRO___IEEE_FLT_FRACLEN __IEEE_FLT_FRACLEN;
MACRO___IEEE_FLT_NAN __IEEE_FLT_NAN_EXP;
MACRO_SHRT __INT_MAX__;
MACRO___LONG_LONG __LONG_LONG_MAX__;
MACRO___LONG __LONG_MAX__;
MACRO__ _MINGW32_MAJOR_VERSION;
MACRO__ __MINGW32_MINOR_VERSION;
MACRO___SLBF __SAPP;
MACRO___SLBF __SEOF;
MACRO___SLBF __SERR;
MACRO___SLBF __SLBF;
MACRO___SLBF __SMBF;
MACRO___SLBF __SMOD;
MACRO___SLBF __SNBF;
MACRO___SLBF __SNPT;
MACRO___SLBF __SOFF;
MACRO___SLBF __SOPT;
MACRO___SLBF __SRD;
MACRO___SLBF __SRW;
MACRO___SLBF __SSTR;
MACRO___SLBF __SWR;
void __assert(const char *, int, const char *);
void __eprintf(const char *, const char *, unsigned int, const char *);
int *__errno(void);
const enum __fdlibm_version __fdlib_version;
const union __dmath __infinity;
int __mb_cur_max;
void __set_ospeed(speed_t speed);
int __small_sprintf(char *dst, const char *fmt, ...);
int __small_vsprintf(char *dst, const char *fmt, va_list ap);
int __srget(FILE *);
int __swbuf(int, FILE *);
const char *const __unctrl[256];
const char __unctrllen[256];
void _bfd_strip_section_from_output(struct bfd_link_info *info, asection *section);
void *_calloc_r(struct _reent *, size_t, size_t);
int _close(int fildes);
int _close_r(struct _reent *, int);
const char _ctype_[];
char *_dtoa_r(struct _reent *, double, int, int, int *, int *, char **);
int _execve_r(struct _reent *, char *, char **, char **);
void _exit(int status);
int _fcntl(int, int, ...);
int _fcntl_r(struct _reent *, int, int, int);
__fdlibm_version __fdlibm_ieee;
__fdlibm_version __fdlibm_posix;
__fdlibm_version _fdlibm_svid;
__fdlibm_version __fdlibm_xopen;
FILE *_fdopen_r(struct _reent *, int, const char *);
char *_findenv(const char *, int *);
char *_findenv_r(struct _reent *, const char *, int *);
FILE *_fopen_r(struct _reent *, const char *, const char *);
pid_t _fork(void);
int _fork_r(struct _reent *);
void _free_r(struct _reent *, void *);
int _fstat(int fd, struct stat *sbuf);
int _fstat_r(struct _reent *, int, struct stat *);
int _getchar_r(struct _reent *);
char *_getenv_r(struct _reent *, const char *string);
pid_t _getpid(void);
int _getpid_r(struct _reent *);
char *_gets_r(struct _reent *, char *);
int _gettimeofday_r(struct _reent *, struct timeval *tp, struct timezone *tzp);
struct utmp *_getutline(struct utmp *);
struct _reent *_impure_ptr;
int _iprintf_r(struct _reent *, const char *, ...);
int _kill_r(struct _reent *, int, int);
int _link(const char *path1, const char *path2);
int _link_r(struct _reent *, const char *, const char *);
struct lconv *_localeconv_r(struct _reent *);
off_t _lseek(int fildes, off_t offset, int whence);
_off_t _lseek_r(struct _reent *, int, _off_t, int);
struct mallinfo *_mallinfo_r(struct mallinfo *__return_ptr __struct_ptr retstr, struct _reent *);
void *_malloc_r(struct _reent *, size_t);
void _malloc_stats_r(struct _reent *);
int _malloc_trim_r(struct _reent *, size_t);
size_t _malloc_usable_size_r(struct _reent *, void *);
int _mallopt_r(struct _reent *, int, int);
int _mblen_r(struct _reent *, const char *, size_t, int *);
size_t _mbstowcs_r(struct _reent *, wchar_t *, const char *, size_t, int *);
int _mbtowc_r(struct _reent *, wchar_t *, const char *, size_t, int *);
void *_memalign_r(struct _reent *, size_t, size_t);
int _mkstemp_r(struct _reent *, char *);
char *_mktemp_r(struct _reent *, char *);
void _mstats_r(struct _reent *, char *);
int _open(const char *, int, ...);
int _open_r(struct _reent *, const char *, int, int);
void _perror_r(struct _reent *, const char *);
int _printf_r(struct _reent *, const char *, ...);
int _putchar_r(struct _reent *, int);
int _putenv_r(struct _reent *, const char *string);
int _puts_r(struct _reent *, const char *);
void *_pvalloc_r(struct _reent *, size_t);
int _raise_r(struct _reent *, int);
int _read(int fildes, void *buf, size_t nbyte);
_ssize_t _read_r(struct _reent *, int, void *, size_t);
void *_realloc_r(struct _reent *, void *, size_t);
void _reclaim_reent(struct _reent *);
int _remove_r(struct _reent *, const char *);
int _rename_r(struct _reent *, const char *old, const char *new);
void *_sbrk(size_t incr);
void *_sbrk_r(struct _reent *, size_t);
int _scanf_r(struct _reent *, const char *, ...);
int _setenv_r(struct _reent *, const char *string, const char *value, int overwrite);
char *_setlocale_r(struct _reent *, int category, const char *locale);
_sig_func_ptr _signal_r(struct _reent *, int, _sig_func_ptr);
int _snprintf_r(struct _reent *, char *, size_t, const char *, ...);
int _sprintf_r(struct _reent *, char *, const char *, ...);
int _stat(const char *path, struct stat *sbuf);
int _stat_r(struct _reent *, const char *, struct stat *);
char *_strdup_r(struct _reent *, const char *);
unsigned __int32 _strtoul_r(struct _reent *, const char *n_PTR, char **end_PTR, int base);
const char *const _sys_errlist[];
int _sys_nerr;
int _system_r(struct _reent *, const char *);
char *_tempnam_r(struct _reent *, const char *, const char *);
unsigned __int32 _times_r(struct _reent *, struct tms *);
FILE *_tmpfile_r(struct _reent *);
char *_tmpnam_r(struct _reent *, char *);
int _tolower(int c);
int _toupper(int c);
int _unlink(const char *path);
int _unlink_r(struct _reent *, const char *);
void *_valloc_r(struct _reent *, size_t);
int _vfprintf_r(struct _reent *, FILE *, const char *, char *);
int _vprintf_r(struct _reent *, const char *, char *);
int _vsnprintf_r(struct _reent *, char *, size_t, const char *, char *);
int _vsprintf_r(struct _reent *, char *, const char *, char *);
int _wait_r(struct _reent *, int *);
size_t _wcstombs_r(struct _reent *, char *, const wchar_t *, size_t, int *);
int _wctomb_r(struct _reent *, char *, wchar_t, int *);
int _write(int fildes, const void *buf, size_t nbyte);
_ssize_t _write_r(struct _reent *, int, const void *, size_t);
void abort(void);
int abs(int);
int access(const char *path, int amode);
double acos(double);
float acosf(float);
double acosh(double);
float acoshf(float);
int addmntent(FILE *filep, const struct mntent *mnt);
uLong adler32(uLong adler, const Bytef *buf, uInt len);
unsigned int alarm(unsigned int secs);
int alphasort(const struct dirent **a, const struct dirent **b);
char *asctime(const struct tm *tblock);
char *asctime_r(const struct tm *, char *);
double asin(double);
float asinf(float);
double asinh(double);
float asinhf(float);
double atan(double);
double atan2(double, double);
float atan2f(float, float);
float atanf(float);
double atanh(double);
float atanhf(float);
int atexit(void (*func)(void));
double atof(const char *nptr);
float atoff(const char *nptr);
int atoi(const char *nptr);
__int32 atol(const char *nptr);
int bcmp(const char *, const char *, size_t);
void bcopy(const char *, char *, size_t);
const asection bfd_abs_section;
const struct symbol_cache_entry *const bfd_abs_symbol;
unsigned int bfd_arch_bits_per_address(bfd *abfd);
unsigned int bfd_arch_bits_per_byte(bfd *abfd);
const bfd_arch_info_type *bfd_arch_get_compatible(const bfd *abfd, const bfd *bbfd);
const char **bfd_arch_list(void);
unsigned int bfd_arch_mach_octets_per_byte(enum bfd_architecture arch, unsigned __int32 machine);
boolean bfd_arm_allocate_interworking_sections(struct bfd_link_info *);
boolean bfd_arm_get_bfd_for_interworking(bfd *, struct bfd_link_info *);
boolean bfd_arm_pe_allocate_interworking_sections(struct bfd_link_info *);
boolean bfd_arm_pe_get_bfd_for_interworking(bfd *, struct bfd_link_info *);
boolean bfd_arm_pe_process_before_allocation(bfd *, struct bfd_link_info *, int);
boolean bfd_arm_process_before_allocation(bfd *, struct bfd_link_info *, int);
__int32 bfd_canonicalize_reloc(bfd *abfd, asection *sec, arelent **loc, asymbol **syms);
boolean bfd_check_format(bfd *abfd, bfd_format format);
boolean bfd_check_format_matches(bfd *abfd, bfd_format format, char ***matching);
bfd_reloc_status_type bfd_check_overflow(enum complain_overflow how, unsigned int bitsize, unsigned int rightshift, unsigned int addrsize, bfd_vma relocation);
boolean bfd_close(bfd *abfd);
boolean bfd_close_all_done(bfd *);
boolean bfd_coff_get_auxent(bfd *, struct symbol_cache_entry *, int, union internal_auxent *);
boolean bfd_coff_get_syment(bfd *, struct symbol_cache_entry *, struct internal_syment *);
boolean bfd_coff_set_symbol_class(bfd *, struct symbol_cache_entry *, unsigned int);
const asection bfd_com_section;
const struct symbol_cache_entry *const bfd_com_symbol;
boolean bfd_copy_private_bfd_data(bfd *ibfd, bfd *obfd);
boolean bfd_copy_private_section_data(bfd *ibfd, asection *isec, bfd *obfd, asection *osec);
boolean bfd_copy_private_symbol_data(bfd *ibfd, asymbol *isym, bfd *obfd, asymbol *osym);
const char *bfd_core_file_failing_command(bfd *abfd);
int bfd_core_file_failing_signal(bfd *abfd);
bfd *bfd_create(const char *filename, bfd *templ);
int bfd_decode_symclass(asymbol *symbol);
boolean bfd_ecoff_debug_accumulate(void *handle, bfd *output_bfd, struct ecoff_debug_info *output_debug, const struct ecoff_debug_swap *output_swap, bfd *input_bfd, struct ecoff_debug_info *input_debug, const struct ecoff_debug_swap *input_swap, struct bfd_link_info *);
boolean bfd_ecoff_debug_accumulate_other(void *handle, bfd *output_bfd, struct ecoff_debug_info *output_debug, const struct ecoff_debug_swap *output_swap, bfd *input_bfd, struct bfd_link_info *);
boolean bfd_ecoff_debug_externals(bfd *abfd, struct ecoff_debug_info *debug, const struct ecoff_debug_swap *swap, boolean relocateable, boolean (*get_extr)(struct symbol_cache_entry *, struct ecoff_extr *), void (*set_index)(struct symbol_cache_entry *, bfd_size_type));
void bfd_ecoff_debug_free(void *handle, bfd *output_bfd, struct ecoff_debug_info *output_debug, const struct ecoff_debug_swap *output_swap, struct bfd_link_info *);
void *bfd_ecoff_debug_init(bfd *output_bfd, struct ecoff_debug_info *output_debug, const struct ecoff_debug_swap *output_swap, struct bfd_link_info *);
boolean bfd_ecoff_debug_one_external(bfd *abfd, struct ecoff_debug_info *debug, const struct ecoff_debug_swap *swap, const char *name, struct ecoff_extr *esym);
bfd_size_type bfd_ecoff_debug_size(bfd *abfd, struct ecoff_debug_info *debug, const struct ecoff_debug_swap *swap);
bfd_vma bfd_ecoff_get_gp_value(bfd *abfd);
boolean bfd_ecoff_set_gp_value(bfd *abfd, bfd_vma gp_value);
boolean bfd_ecoff_set_regmasks(bfd *abfd, unsigned __int32 gprmask, unsigned __int32 fprmask, unsigned __int32 *cprmask);
boolean bfd_ecoff_write_accumulated_debug(void *handle, bfd *abfd, struct ecoff_debug_info *debug, const struct ecoff_debug_swap *swap, struct bfd_link_info *info, file_ptr where);
boolean bfd_ecoff_write_debug(bfd *abfd, struct ecoff_debug_info *debug, const struct ecoff_debug_swap *swap, file_ptr where);
boolean bfd_elf32_arm_allocate_interworking_sections(struct bfd_link_info *);
boolean bfd_elf32_arm_get_bfd_for_interworking(bfd *, struct bfd_link_info *);
boolean bfd_elf32_arm_process_before_allocation(bfd *, struct bfd_link_info *, int);
boolean bfd_elf32_record_link_assignment(bfd *, struct bfd_link_info *, const char *, boolean);
boolean bfd_elf32_size_dynamic_sections(bfd *, const char *, const char *, boolean, const char *, const char *const *, struct bfd_link_info *, struct sec **, struct bfd_elf_version_tree *);
boolean bfd_elf64_record_link_assignment(bfd *, struct bfd_link_info *, const char *, boolean);
boolean bfd_elf64_size_dynamic_sections(bfd *, const char *, const char *, boolean, const char *, const char *const *, struct bfd_link_info *, struct sec **, struct bfd_elf_version_tree *);
int bfd_elf_get_arch_size(bfd *);
boolean bfd_elf_get_bfd_needed_list(bfd *, struct bfd_link_needed_list **);
const char *bfd_elf_get_dt_soname(bfd *);
struct bfd_link_needed_list *bfd_elf_get_needed_list(bfd *, struct bfd_link_info *);
void bfd_elf_set_dt_needed_name(bfd *, const char *);
const char *bfd_errmsg(bfd_error_type error_tag);
bfd *bfd_fdopenr(const char *filename, const char *target, int fd);
const bfd_target *bfd_find_target(const char *target_name, bfd *abfd);
int bfd_flush(bfd *abfd);
const char *bfd_format_string(bfd_format format);
void bfd_free_window(bfd_window *);
enum bfd_architecture bfd_get_arch(bfd *abfd);
const bfd_arch_info_type *bfd_get_arch_info(bfd *abfd);
__int32 bfd_get_elf_phdr_upper_bound(bfd *abfd);
int bfd_get_elf_phdrs(bfd *abfd, void *phdrs);
bfd_error_type bfd_get_error(void);
bfd_error_handler_type bfd_get_error_handler(void);
boolean bfd_get_file_window(bfd *, file_ptr, bfd_size_type, bfd_window *, boolean);
int bfd_get_gp_size(bfd *abfd);
unsigned __int32 bfd_get_mach(bfd *abfd);
__int32 bfd_get_mtime(bfd *abfd);
symindex bfd_get_next_mapent(bfd *abfd, symindex previous, carsym **sym);
const char *bfd_get_reloc_code_name(bfd_reloc_code_real_type code);
unsigned int bfd_get_reloc_size(reloc_howto_type *);
__int32 bfd_get_reloc_upper_bound(bfd *abfd, asection *sect);
bfd_byte *bfd_get_relocated_section_contents(bfd *, struct bfd_link_info *, struct bfd_link_order *, bfd_byte *, boolean, asymbol **);
asection *bfd_get_section_by_name(bfd *abfd, const char *name);
boolean bfd_get_section_contents(bfd *abfd, asection *section, void *location, file_ptr offset, bfd_size_type count);
__int32 bfd_get_size(bfd *abfd);
const char *bfd_get_stab_name(int);
bfd_vma bfd_getb16(const unsigned __int8 *);
bfd_vma bfd_getb32(const unsigned __int8 *);
bfd_vma bfd_getb64(const unsigned __int8 *);
bfd_signed_vma bfd_getb_signed_16(const unsigned __int8 *);
bfd_signed_vma bfd_getb_signed_32(const unsigned __int8 *);
bfd_signed_vma bfd_getb_signed_64(const unsigned __int8 *);
bfd_vma bfd_getl16(const unsigned __int8 *);
bfd_vma bfd_getl32(const unsigned __int8 *);
bfd_vma bfd_getl64(const unsigned __int8 *);
bfd_signed_vma bfd_getl_signed_16(const unsigned __int8 *);
bfd_signed_vma bfd_getl_signed_32(const unsigned __int8 *);
bfd_signed_vma bfd_getl_signed_64(const unsigned __int8 *);
void *bfd_hash_allocate(struct bfd_hash_table *, unsigned int);
struct bfd_hash_entry *bfd_hash_lookup(struct bfd_hash_table *, const char *, boolean create, boolean copy);
struct bfd_hash_entry *bfd_hash_newfunc(struct bfd_hash_entry *, struct bfd_hash_table *, const char *);
void bfd_hash_replace(struct bfd_hash_table *, struct bfd_hash_entry *old, struct bfd_hash_entry *nw);
void bfd_hash_table_free(struct bfd_hash_table *);
boolean bfd_hash_table_init(struct bfd_hash_table *, struct bfd_hash_entry *(*)(struct bfd_hash_entry *, struct bfd_hash_table *, const char *));
boolean bfd_hash_table_init_n(struct bfd_hash_table *, struct bfd_hash_entry *(*)(struct bfd_hash_entry *, struct bfd_hash_table *, const char *), unsigned int size);
void bfd_hash_traverse(struct bfd_hash_table *, boolean (*)(struct bfd_hash_entry *, void *), void *info);
boolean bfd_i386linux_size_dynamic_sections(bfd *, struct bfd_link_info *);
const asection bfd_ind_section;
const struct symbol_cache_entry *const bfd_ind_symbol;
void bfd_init(void);
void bfd_init_window(bfd_window *);
bfd_reloc_status_type bfd_install_relocation(bfd *abfd, arelent *reloc_entry, void *data, bfd_vma data_start, asection *input_section, char **error_message);
boolean bfd_is_local_label(bfd *abfd, asymbol *sym);
boolean bfd_is_local_label_name(bfd *abfd, const char *name);
boolean bfd_is_undefined_symclass(int symclass);
void bfd_link_add_undef(struct bfd_link_hash_table *, struct bfd_link_hash_entry *);
struct bfd_link_hash_entry *bfd_link_hash_lookup(struct bfd_link_hash_table *, const char *, boolean create, boolean copy, boolean follow);
void bfd_link_hash_traverse(struct bfd_link_hash_table *, boolean (*)(struct bfd_link_hash_entry *, void *), void *);
const bfd_arch_info_type *bfd_lookup_arch(enum bfd_architecture arch, unsigned __int32 machine);
boolean bfd_m68klinux_size_dynamic_sections(bfd *, struct bfd_link_info *);
boolean bfd_make_readable(bfd *abfd);
asection *bfd_make_section(bfd *, const char *name);
asection *bfd_make_section_anyway(bfd *abfd, const char *name);
asection *bfd_make_section_old_way(bfd *abfd, const char *name);
boolean bfd_make_writable(bfd *abfd);
void bfd_map_over_sections(bfd *abfd, void (*func)(bfd *abfd, asection *sect, void *obj), void *obj);
boolean bfd_merge_private_bfd_data(bfd *ibfd, bfd *obfd);
boolean bfd_mips_ecoff_create_embedded_relocs(bfd *, struct bfd_link_info *, struct sec *, struct sec *, char **);
struct bfd_link_order *bfd_new_link_order(bfd *, asection *);
unsigned int bfd_octets_per_byte(bfd *abfd);
bfd *bfd_openr(const char *filename, const char *target);
bfd *bfd_openr_next_archived_file(bfd *archive, bfd *previous);
bfd *bfd_openstreamr(const char *, const char *, void *);
bfd *bfd_openw(const char *filename, const char *target);
bfd_reloc_status_type bfd_perform_relocation(bfd *abfd, arelent *reloc_entry, void *data, asection *input_section, bfd *output_bfd, char **error_message);
void bfd_perror(const char *message);
void bfd_print_symbol_vandf(void *file, asymbol *symbol);
const char *bfd_printable_arch_mach(enum bfd_architecture arch, unsigned __int32 machine);
const char *bfd_printable_name(bfd *abfd);
void bfd_putb16(bfd_vma, unsigned __int8 *);
void bfd_putb32(bfd_vma, unsigned __int8 *);
void bfd_putb64(bfd_vma, unsigned __int8 *);
void bfd_putl16(bfd_vma, unsigned __int8 *);
void bfd_putl32(bfd_vma, unsigned __int8 *);
void bfd_putl64(bfd_vma, unsigned __int8 *);
bfd_size_type bfd_read(void *, bfd_size_type size, bfd_size_type nitems, bfd *abfd);
boolean bfd_record_phdr(bfd *, unsigned __int32, boolean, flagword, boolean, bfd_vma, boolean, boolean, unsigned int, struct sec **);
reloc_howto_type *bfd_reloc_type_lookup(bfd *abfd, bfd_reloc_code_real_type code);
const bfd_arch_info_type *bfd_scan_arch(const char *string);
bfd_vma bfd_scan_vma(const char *string, const char **end, int base);
const bfd_target *bfd_search_for_target(int (*search_func)(const bfd_target *, void *), void *);
int bfd_seek(bfd *abfd, file_ptr fp, int direction);
void bfd_set_arch_info(bfd *abfd, const bfd_arch_info_type *arg);
boolean bfd_set_archive_head(bfd *output, bfd *new_head);
boolean bfd_set_default_target(const char *name);
void bfd_set_error(bfd_error_type error_tag);
bfd_error_handler_type bfd_set_error_handler(bfd_error_handler_type);
void bfd_set_error_program_name(const char *);
boolean bfd_set_file_flags(bfd *abfd, flagword flags);
boolean bfd_set_format(bfd *abfd, bfd_format format);
void bfd_set_gp_size(bfd *abfd, int i);
boolean bfd_set_private_flags(bfd *abfd, flagword flags);
void bfd_set_reloc(bfd *abfd, asection *sec, arelent **rel, unsigned int count);
boolean bfd_set_section_contents(bfd *abfd, asection *section, void *data, file_ptr offset, bfd_size_type count);
boolean bfd_set_section_flags(bfd *abfd, asection *sec, flagword flags);
boolean bfd_set_section_size(bfd *abfd, asection *sec, bfd_size_type val);
boolean bfd_set_start_address(bfd *abfd, bfd_vma vma);
boolean bfd_set_symtab(bfd *abfd, asymbol **location, unsigned int count);
boolean bfd_sparclinux_size_dynamic_sections(bfd *, struct bfd_link_info *);
int bfd_stat(bfd *abfd, struct stat *);
struct bfd_link_needed_list *bfd_sunos_get_needed_list(bfd *, struct bfd_link_info *);
boolean bfd_sunos_record_link_assignment(bfd *, struct bfd_link_info *, const char *);
boolean bfd_sunos_size_dynamic_sections(bfd *, struct bfd_link_info *, struct sec **, struct sec **, struct sec **);
void bfd_symbol_info(asymbol *symbol, symbol_info *ret);
const char **bfd_target_list(void);
__int32 bfd_tell(bfd *abfd);
int bfd_ticoff_get_section_load_page(struct sec *);
void bfd_ticoff_set_section_load_page(struct sec *, int);
const asection bfd_und_section;
const struct symbol_cache_entry *const bfd_und_symbol;
struct bfd_link_hash_entry *bfd_wrapped_link_hash_lookup(bfd *, struct bfd_link_info *, const char *, boolean, boolean, boolean);
bfd_size_type bfd_write(const void *, bfd_size_type size, bfd_size_type nitems, bfd *abfd);
boolean bfd_xcoff_export_symbol(bfd *, struct bfd_link_info *, struct bfd_link_hash_entry *, boolean);
boolean bfd_xcoff_import_symbol(bfd *, struct bfd_link_info *, struct bfd_link_hash_entry *, bfd_vma, const char *, const char *, const char *);
boolean bfd_xcoff_link_count_reloc(bfd *, struct bfd_link_info *, const char *);
boolean bfd_xcoff_link_record_set(bfd *, struct bfd_link_info *, struct bfd_link_hash_entry *, bfd_size_type);
boolean bfd_xcoff_record_link_assignment(bfd *, struct bfd_link_info *, const char *);
boolean bfd_xcoff_size_dynamic_sections(bfd *, struct bfd_link_info *, const char *, const char *, unsigned __int32, unsigned __int32, unsigned __int32, boolean, int, boolean, boolean, struct sec **);
void *bsearch(const void *key, const void *base, size_t nmemb, size_t size, int (*compar)(const void *, const void *));
void bzero(char *, size_t);
double cabs();
float cabsf();
void *calloc(size_t nmemb, size_t size);
double cbrt(double);
float cbrtf(float);
double ceil(double);
float ceilf(float);
void cfree(void *);
int chdir(const char *path);
int chmod(const char *path, mode_t mode);
int chown(const char *path, uid_t owner, gid_t group);
void clearerr(FILE *);
clock_t clock(void);
int close(int fildes);
int closedir(DIR *);
void closelog(void);
int compress(Bytef *dest, uLongf *destLen, const Bytef *source, uLong sourceLen);
int compress2(Bytef *dest, uLongf *destLen, const Bytef *source, uLong sourceLen, int level);
double copysign(double, double);
float copysignf(float, float);
boolean core_file_matches_executable_p(bfd *core_bfd, bfd *exec_bfd);
double cos(double);
float cosf(float);
double cosh(double);
float coshf(float);
uLong crc32(uLong crc, const Bytef *buf, uInt len);
int creat(const char *, mode_t);
char *crypt(const char *key, const char *salt);
char *ctermid(char *s);
char *ctime(const time_t *time);
char *ctime_r(const time_t *, char *);
char *cuserid(char *s);
int cwait(int *, int, int);
int cygwin_umount(const char *path, unsigned int flags);
int deflate(z_streamp strm, int flush);
int deflateCopy(z_streamp dest, z_streamp source);
int deflateEnd(z_streamp strm);
int deflateInit2_(z_streamp strm, int level, int method, int windowBits, int memLevel, int strategy, const char *version, int stream_size);
int deflateInit_(z_streamp strm, int level, const char *version, int stream_size);
int deflateParams(z_streamp strm, int level, int strategy);
int deflateReset(z_streamp strm);
int deflateSetDictionary(z_streamp strm, const Bytef *dictionary, uInt dictLength);
double difftime(time_t time2, time_t time1);
div_t div(int numer, int denom);
int dlclose(void *);
char *dlerror(void);
void dlfork(int);
void *dlopen(const char *, int);
void *dlsym(void *, const char *);
double drem(double, double);
float dremf(float, float);
char *dtoa(double, int, int, int *, int *, char **);
bfd_reloc_code_real dummy_first_bfd_reloc_code_real;
int dup(int fildes);
int dup2(int fildes, int fildes2);
char *ecvt(double, int, int *, int *);
char *ecvtbuf(double, int, int *, int *, char *);
char *ecvtf(float, int, int *, int *);
void encrypt(char *block, int edflag);
void endgrent(void);
int endmntent(FILE *filep);
void endpwent(void);
void endutent(void);
char **environ;
double erf(double);
double erfc(double);
float erfcf(float);
float erff(float);
int execl(const char *path, const char *argv0, ...);
int execle(const char *path, const char *argv0, ...);
int execlp(const char *path, const char *argv0, ...);
int execlpe(const char *path, const char *argv0, ...);
int execv(const char *path, char *const *argv);
int execve(const char *path, char *const *argv, char *const *envp);
int execvp(const char *path, char *const *argv);
int execvpe(const char *path, char *const *argv, char *const *envp);
void exit(int status);
double exp(double);
float expf(float);
double expm1(double);
float expm1f(float);
double fabs(double);
float fabsf(float);
int fchmod(int fd, mode_t mode);
int fchown(int fildes, uid_t owner, gid_t group);
int fclose(FILE *);
int fcntl(int, int, ...);
char *fcvt(double, int, int *, int *);
char *fcvtbuf(double, int, int *, int *, char *);
char *fcvtf(float, int, int *, int *);
FILE *fdopen(int, const char *);
int feof(FILE *);
int ferror(FILE *);
int fflush(FILE *);
int ffs(int);
int fgetc(FILE *);
int fgetpos(FILE *, fpos_t *);
char *fgets(char *, int, FILE *);
int fileno(FILE *);
int finite(double);
int finitef(float);
int fiprintf(FILE *, const char *, ...);
double floor(double);
float floorf(float);
double fmod(double, double);
float fmodf(float, float);
FILE *fopen(const char *name, const char *type);
pid_t fork(void);
__int32 fpathconf(int fd, int name);
fp_except fpgetmask(void);
fp_rnd fpgetround(void);
fp_rdi fpgetroundtoi(void);
fp_except fpgetsticky(void);
int fprintf(FILE *, const char *, ...);
fp_except fpsetmask(fp_except);
fp_rnd fpsetround(fp_rnd);
fp_rdi fpsetroundtoi(fp_rdi);
fp_except fpsetsticky(fp_except);
int fputc(int, FILE *);
int fputs(const char *, FILE *);
size_t fread(void *, size_t size, size_t n, FILE *);
void free(void *);
FILE *freopen(const char *, const char *, FILE *);
double frexp(double, int *);
float frexpf(float, int *);
int fscanf(FILE *, const char *, ...);
int fseek(FILE *, __int32, int);
int fsetpos(FILE *, const fpos_t *);
int fstat(int fd, struct stat *sbuf);
int fstatfs(int fd, struct statfs *buf);
int fsync(int fd);
__int32 ftell(FILE *);
int ftime(struct timeb *);
FILE *funopen(const void *cookie, int (*readfn)(void *cookie, char *buf, int n), int (*writefn)(void *cookie, const char *buf, int n), fpos_t (*seekfn)(void *cookie, fpos_t off, int whence), int (*closefn)(void *cookie));
size_t fwrite(const void *, size_t size, size_t n, FILE *);
double gamma(double);
double gamma_r(double, int *);
float gammaf(float);
float gammaf_r(float, int *);
char *gcvt(double, int, char *);
char *gcvtf(float, int, char *);
const uLongf *get_crc_table(void);
__int32 get_osfhandle(int);
int getc(FILE *);
int getchar(void);
char *getcwd(char *buf, size_t size);
gid_t getegid(void);
char *getenv(const char *string);
uid_t geteuid(void);
gid_t getgid(void);
struct group *getgrent(void);
struct group *getgrgid(gid_t);
int getgrgid_r(gid_t, struct group *, char *, size_t, struct group **);
struct group *getgrnam(const char *);
int getgrnam_r(const char *, struct group *, char *, size_t, struct group **);
int getgroups(int gidsetsize, gid_t *grouplist);
int getitimer(int which, struct itimerval *value);
char *getlogin(void);
struct mntent *getmntent(FILE *filep);
int getopt(int, char *const *, const char *);
int getopt_long(int, char **, char *, struct option *, int *);
size_t getpagesize(void);
char *getpass(const char *prompt);
pid_t getpgrp(void);
pid_t getpid(void);
pid_t getppid(void);
struct passwd *getpwent(void);
struct passwd *getpwnam(const char *);
int getpwnam_r(const char *, struct passwd *, char *, size_t, struct passwd **);
struct passwd *getpwuid(uid_t);
int getpwuid_r(uid_t, struct passwd *, char *, size_t, struct passwd **);
int getrusage(int who, struct rusage *rusage);
char *gets(char *);
int gettimeofday(struct timeval *p, struct timezone *z);
uid_t getuid(void);
struct utmp *getutent(void);
struct utmp *getutid(struct utmp *);
struct utmp *getutline(struct utmp *);
int getw(FILE *);
int glob(const char *, int, int (*)(const char *, int), glob_t *);
void globfree(glob_t *);
struct tm *gmtime(const time_t *timer);
struct tm *gmtime_r(const time_t *, struct tm *);
char *group_from_gid(gid_t, int);
int gzclose(gzFile file);
gzFile gzdopen(int fd, const char *mode);
int gzeof(gzFile file);
const char *gzerror(gzFile file, int *errnum);
int gzflush(gzFile file, int flush);
int gzgetc(gzFile file);
char *gzgets(gzFile file, char *buf, int len);
gzFile gzopen(const char *path, const char *mode);
int gzprintf(gzFile file, const char *format, ...);
int gzputc(gzFile file, int c);
int gzputs(gzFile file, const char *s);
int gzread(gzFile file, voidp buf, unsigned int len);
int gzrewind(gzFile file);
__int32 gzseek(gzFile file, __int32 offset, int whence);
int gzsetparams(gzFile file, int level, int strategy);
__int32 gztell(gzFile file);
int gzwrite(gzFile file, const voidp buf, unsigned int len);
char *hasmntopt(const struct mntent *mnt, const char *opt);
double hypot(double, double);
float hypotf(float, float);
int ilogb(double);
int ilogbf(float);
char *index(const char *, int);
double infinity(void);
float infinityf(void);
int inflate(z_streamp strm, int flush);
int inflateEnd(z_streamp strm);
int inflateInit2_(z_streamp strm, int windowBits, const char *version, int stream_size);
int inflateInit_(z_streamp strm, const char *version, int stream_size);
int inflateReset(z_streamp strm);
int inflateSetDictionary(z_streamp strm, const Bytef *dictionary, uInt dictLength);
int inflateSync(z_streamp strm);
int inflateSyncPoint(z_streamp z);
int ioctl(int fd, int cmd, void *);
int iprintf(const char *, ...);
int isalnum(int c);
int isalpha(int c);
int isascii(int c);
int isatty(int fildes);
int iscntrl(int c);
int isdigit(int c);
int isgraph(int c);
int isinf(double);
int isinff(float);
int islower(int c);
int isnan(double);
int isnanf(float);
int isprint(int c);
int ispunct(int c);
int isspace(int c);
int isupper(int c);
int isxdigit(int c);
double j0(double);
float j0f(float);
double j1(double);
float j1f(float);
double jn(int, double);
float jnf(int, float);
__int32 labs(__int32);
int lchown(const char *path, uid_t owner, gid_t group);
double ldexp(double, int);
float ldexpf(float, int);
ldiv_t ldiv(__int32 numer, __int32 denom);
double lgamma(double);
double lgamma_r(double, int *);
float lgammaf(float);
float lgammaf_r(float, int *);
int link(const char *path1, const char *path2);
struct lconv *localeconv(void);
struct tm *localtime(const time_t *timer);
struct tm *localtime_r(const time_t *, struct tm *);
double log(double);
double log10(double);
float log10f(float);
double log1p(double);
float log1pf(float);
float logf(float);
void login(struct utmp *);
int logout(char *);
void longjmp(jmp_buf jmpb, int retval);
off_t lseek(int fildes, off_t offset, int whence);
struct mallinfo *mallinfo(struct mallinfo *__return_ptr __struct_ptr retstr);
void *malloc(size_t size);
void malloc_stats(void);
int malloc_trim(size_t);
size_t malloc_usable_size(void *);
int mallopt(int, int);
int matherr(struct exception *e);
int mblen(const char *, size_t);
size_t mbstowcs(wchar_t *, const char *, size_t);
int mbtowc(wchar_t *, const char *, size_t);
void *memalign(size_t, size_t);
void *memccpy(void *, const void *, int, size_t);
void *memchr(const void *, int, size_t);
int memcmp(const void *, const void *, size_t);
void *memcpy(void *, const void *, size_t);
void *memmove(void *, const void *, size_t);
void *memset(void *, int, size_t);
int mkdir(const char *path, mode_t mode);
int mkfifo(const char *path, mode_t mode);
time_t mktime(struct tm *timeptr);
caddr_t mmap(caddr_t addr, size_t len, int prot, int flags, int fd, off_t off);
double modf(double, double *);
float modff(float, float *);
int mount(const char *, const char *, unsigned int flags);
int mprotect(caddr_t addr, size_t len, int prot);
void mstats(char *);
int msync(caddr_t addr, size_t len, int flags);
int munmap(caddr_t addr, size_t len);
double nan(void);
float nanf(void);
double nextafter(double, double);
float nextafterf(float, float);
int nice(int nice_value);
int open(const char *, int, ...);
DIR *opendir(const char *);
void openlog(const char *, int, int);
char *optarg;
int opterr;
int optind;
int optopt;
int optreset;
__int16 ospeed;
__int32 pathconf(const char *path, int name);
int pause(void);
int pclose(FILE *);
void perror(const char *);
int pipe(int *fildes);
void png_build_grayscale_palette(int bit_depth, png_colorp palette);
int png_check_sig(png_bytep sig, int num);
void png_chunk_error(png_structp png_ptr, png_const_charp error);
void png_chunk_warning(png_structp png_ptr, png_const_charp message);
void png_convert_from_struct_tm(png_timep ptime, struct tm *ttime);
void png_convert_from_time_t(png_timep ptime, time_t ttime);
png_charp png_convert_to_rfc1123(png_structp png_ptr, png_timep ptime);
png_infop png_create_info_struct(png_structp png_ptr);
png_structp png_create_read_struct(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn);
png_structp png_create_write_struct(png_const_charp user_png_ver, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warn_fn);
void png_destroy_info_struct(png_structp png_ptr, png_infopp info_ptr_ptr);
void png_destroy_read_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr, png_infopp end_info_ptr_ptr);
void png_destroy_write_struct(png_structpp png_ptr_ptr, png_infopp info_ptr_ptr);
void png_error(png_structp png_ptr, png_const_charp error);
void png_free(png_structp png_ptr, png_voidp ptr);
void png_free_data(png_structp png_ptr, png_infop info_ptr, png_uint_32 free_me, int num);
png_uint_32 png_get_IHDR(png_structp png_ptr, png_infop info_ptr, png_uint_32 *width, png_uint_32 *height, int *bit_depth, int *color_type, int *interlace_type, int *compression_type, int *filter_type);
png_uint_32 png_get_PLTE(png_structp png_ptr, png_infop info_ptr, png_colorp *palette, int *num_palette);
png_uint_32 png_get_bKGD(png_structp png_ptr, png_infop info_ptr, png_color_16p *background);
png_byte png_get_bit_depth(png_structp png_ptr, png_infop info_ptr);
png_uint_32 png_get_cHRM(png_structp png_ptr, png_infop info_ptr, double *white_x, double *white_y, double *red_x, double *red_y, double *green_x, double *green_y, double *blue_x, double *blue_y);
png_uint_32 png_get_cHRM_fixed(png_structp png_ptr, png_infop info_ptr, png_fixed_point *int_white_x, png_fixed_point *int_white_y, png_fixed_point *int_red_x, png_fixed_point *int_red_y, png_fixed_point *int_green_x, png_fixed_point *int_green_y, png_fixed_point *int_blue_x, png_fixed_point *int_blue_y);
png_byte png_get_channels(png_structp png_ptr, png_infop info_ptr);
png_byte png_get_color_type(png_structp png_ptr, png_infop info_ptr);
png_byte png_get_compression_type(png_structp png_ptr, png_infop info_ptr);
png_charp png_get_copyright(png_structp png_ptr);
png_voidp png_get_error_ptr(png_structp png_ptr);
png_byte png_get_filter_type(png_structp png_ptr, png_infop info_ptr);
png_uint_32 png_get_gAMA(png_structp png_ptr, png_infop info_ptr, double *file_gamma);
png_uint_32 png_get_gAMA_fixed(png_structp png_ptr, png_infop info_ptr, png_fixed_point *int_file_gamma);
png_uint_32 png_get_hIST(png_structp png_ptr, png_infop info_ptr, png_uint_16p *hist);
png_charp png_get_header_ver(png_structp png_ptr);
png_charp png_get_header_version(png_structp png_ptr);
png_uint_32 png_get_iCCP(png_structp png_ptr, png_infop info_ptr, png_charpp name, int *compression_type, png_charpp profile, png_uint_32 *proflen);
png_uint_32 png_get_image_height(png_structp png_ptr, png_infop info_ptr);
png_uint_32 png_get_image_width(png_structp png_ptr, png_infop info_ptr);
png_byte png_get_interlace_type(png_structp png_ptr, png_infop info_ptr);
png_voidp png_get_io_ptr(png_structp png_ptr);
png_charp png_get_libpng_ver(png_structp png_ptr);
png_uint_32 png_get_oFFs(png_structp png_ptr, png_infop info_ptr, png_int_32 *offset_x, png_int_32 *offset_y, int *unit_type);
png_uint_32 png_get_pCAL(png_structp png_ptr, png_infop info_ptr, png_charp *purpose, png_int_32 *X0, png_int_32 *X1, int *type, int *nparams, png_charp *units, png_charpp *params);
png_uint_32 png_get_pHYs(png_structp png_ptr, png_infop info_ptr, png_uint_32 *res_x, png_uint_32 *res_y, int *unit_type);
float png_get_pixel_aspect_ratio(png_structp png_ptr, png_infop info_ptr);
png_uint_32 png_get_pixels_per_meter(png_structp png_ptr, png_infop info_ptr);
png_voidp png_get_progressive_ptr(png_structp png_ptr);
png_byte png_get_rgb_to_gray_status(png_structp png_ptr);
png_uint_32 png_get_rowbytes(png_structp png_ptr, png_infop info_ptr);
png_bytepp png_get_rows(png_structp png_ptr, png_infop info_ptr);
png_uint_32 png_get_sBIT(png_structp png_ptr, png_infop info_ptr, png_color_8p *sig_bit);
png_uint_32 png_get_sCAL(png_structp png_ptr, png_infop info_ptr, int *unit, double *width, double *height);
png_uint_32 png_get_sPLT(png_structp png_ptr, png_infop info_ptr, png_sPLT_tpp entries);
png_uint_32 png_get_sRGB(png_structp png_ptr, png_infop info_ptr, int *intent);
png_bytep png_get_signature(png_structp png_ptr, png_infop info_ptr);
png_uint_32 png_get_tIME(png_structp png_ptr, png_infop info_ptr, png_timep *mod_time);
png_uint_32 png_get_tRNS(png_structp png_ptr, png_infop info_ptr, png_bytep *trans, int *num_trans, png_color_16p *trans_values);
png_uint_32 png_get_text(png_structp png_ptr, png_infop info_ptr, png_textp *text_ptr, int *num_text);
png_uint_32 png_get_unknown_chunks(png_structp png_ptr, png_infop info_ptr, png_unknown_chunkpp entries);
png_voidp png_get_user_chunk_ptr(png_structp png_ptr);
png_voidp png_get_user_transform_ptr(png_structp png_ptr);
png_uint_32 png_get_valid(png_structp png_ptr, png_infop info_ptr, png_uint_32 flag);
png_uint_32 png_get_x_offset_microns(png_structp png_ptr, png_infop info_ptr);
png_uint_32 png_get_x_offset_pixels(png_structp png_ptr, png_infop info_ptr);
png_uint_32 png_get_x_pixels_per_meter(png_structp png_ptr, png_infop info_ptr);
png_uint_32 png_get_y_offset_microns(png_structp png_ptr, png_infop info_ptr);
png_uint_32 png_get_y_offset_pixels(png_structp png_ptr, png_infop info_ptr);
png_uint_32 png_get_y_pixels_per_meter(png_structp png_ptr, png_infop info_ptr);
void png_info_init(png_infop info_ptr);
void png_init_io(png_structp png_ptr, FILE *fp);
char png_libpng_ver[12];
png_voidp png_malloc(png_structp png_ptr, png_uint_32 size);
png_voidp png_memcpy_check(png_structp png_ptr, png_voidp s1, png_voidp s2, png_uint_32 size);
png_voidp png_memset_check(png_structp png_ptr, png_voidp s1, int value, png_uint_32 size);
int png_pass_dsp_mask[7];
int png_pass_inc[7];
int png_pass_mask[7];
int png_pass_start[7];
int png_pass_yinc[7];
int png_pass_ystart[7];
void png_permit_empty_plte(png_structp png_ptr, int empty_plte_permitted);
void png_process_data(png_structp png_ptr, png_infop info_ptr, png_bytep buffer, png_size_t buffer_size);
void png_progressive_combine_row(png_structp png_ptr, png_bytep old_row, png_bytep new_row);
void png_read_destroy(png_structp png_ptr, png_infop info_ptr, png_infop end_info_ptr);
void png_read_end(png_structp png_ptr, png_infop info_ptr);
void png_read_image(png_structp png_ptr, png_bytepp image);
void png_read_info(png_structp png_ptr, png_infop info_ptr);
void png_read_png(png_structp png_ptr, png_infop info_ptr, int transforms, voidp params);
void png_read_row(png_structp png_ptr, png_bytep row, png_bytep display_row);
void png_read_rows(png_structp png_ptr, png_bytepp row, png_bytepp display_row, png_uint_32 num_rows);
void png_read_update_info(png_structp png_ptr, png_infop info_ptr);
void png_set_IHDR(png_structp png_ptr, png_infop info_ptr, png_uint_32 width, png_uint_32 height, int bit_depth, int color_type, int interlace_type, int compression_type, int filter_type);
void png_set_PLTE(png_structp png_ptr, png_infop info_ptr, png_colorp palette, int num_palette);
void png_set_bKGD(png_structp png_ptr, png_infop info_ptr, png_color_16p background);
void png_set_background(png_structp png_ptr, png_color_16p background_color, int background_gamma_code, int need_expand, double background_gamma);
void png_set_bgr(png_structp png_ptr);
void png_set_cHRM(png_structp png_ptr, png_infop info_ptr, double white_x, double white_y, double red_x, double red_y, double green_x, double green_y, double blue_x, double blue_y);
void png_set_cHRM_fixed(png_structp png_ptr, png_infop info_ptr, png_fixed_point int_white_x, png_fixed_point int_white_y, png_fixed_point int_red_x, png_fixed_point int_red_y, png_fixed_point int_green_x, png_fixed_point int_green_y, png_fixed_point int_blue_x, png_fixed_point int_blue_y);
void png_set_compression_level(png_structp png_ptr, int level);
void png_set_compression_mem_level(png_structp png_ptr, int mem_level);
void png_set_compression_method(png_structp png_ptr, int method);
void png_set_compression_strategy(png_structp png_ptr, int strategy);
void png_set_compression_window_bits(png_structp png_ptr, int window_bits);
void png_set_crc_action(png_structp png_ptr, int crit_action, int ancil_action);
void png_set_dither(png_structp png_ptr, png_colorp palette, int num_palette, int maximum_colors, png_uint_16p histogram, int full_dither);
void png_set_error_fn(png_structp png_ptr, png_voidp error_ptr, png_error_ptr error_fn, png_error_ptr warning_fn);
void png_set_expand(png_structp png_ptr);
void png_set_filler(png_structp png_ptr, png_uint_32 filler, int flags);
void png_set_filter(png_structp png_ptr, int method, int filters);
void png_set_filter_heuristics(png_structp png_ptr, int heuristic_method, int num_weights, png_doublep filter_weights, png_doublep filter_costs);
void png_set_flush(png_structp png_ptr, int nrows);
void png_set_gAMA(png_structp png_ptr, png_infop info_ptr, double file_gamma);
void png_set_gAMA_fixed(png_structp png_ptr, png_infop info_ptr, png_fixed_point int_file_gamma);
void png_set_gamma(png_structp png_ptr, double screen_gamma, double default_file_gamma);
void png_set_gray_1_2_4_to_8(png_structp png_ptr);
void png_set_gray_to_rgb(png_structp png_ptr);
void png_set_hIST(png_structp png_ptr, png_infop info_ptr, png_uint_16p hist);
void png_set_iCCP(png_structp png_ptr, png_infop info_ptr, png_charp name, int compression_type, png_charp profile, png_uint_32 proflen);
int png_set_interlace_handling(png_structp png_ptr);
void png_set_invert_alpha(png_structp png_ptr);
void png_set_invert_mono(png_structp png_ptr);
void png_set_itxt(png_structp png_ptr, png_infop info_ptr, png_textp text_ptr, int num_text);
void png_set_keep_unknown_chunks(png_structp png_ptr, int keep, png_bytep chunk_list, int num_chunks);
void png_set_oFFs(png_structp png_ptr, png_infop info_ptr, png_int_32 offset_x, png_int_32 offset_y, int unit_type);
void png_set_pCAL(png_structp png_ptr, png_infop info_ptr, png_charp purpose, png_int_32 X0, png_int_32 X1, int type, int nparams, png_charp units, png_charpp params);
void png_set_pHYs(png_structp png_ptr, png_infop info_ptr, png_uint_32 res_x, png_uint_32 res_y, int unit_type);
void png_set_packing(png_structp png_ptr);
void png_set_packswap(png_structp png_ptr);
void png_set_palette_to_rgb(png_structp png_ptr);
void png_set_progressive_read_fn(png_structp png_ptr, png_voidp progressive_ptr, png_progressive_info_ptr info_fn, png_progressive_row_ptr row_fn, png_progressive_end_ptr end_fn);
void png_set_read_fn(png_structp png_ptr, png_voidp io_ptr, png_rw_ptr read_data_fn);
void png_set_read_status_fn(png_structp png_ptr, png_read_status_ptr read_row_fn);
void png_set_read_user_chunk_fn(png_structp png_ptr, png_voidp user_chunk_ptr, png_user_chunk_ptr read_user_chunk_fn);
void png_set_read_user_transform_fn(png_structp png_ptr, png_user_transform_ptr read_user_transform_fn);
void png_set_rgb_to_gray(png_structp png_ptr, int error_action, double red, double green);
void png_set_rgb_to_gray_fixed(png_structp png_ptr, int error_action, png_fixed_point red, png_fixed_point green);
void png_set_rows(png_structp png_ptr, png_infop info_ptr, png_bytepp row_pointers);
void png_set_sBIT(png_structp png_ptr, png_infop info_ptr, png_color_8p sig_bit);
void png_set_sCAL(png_structp png_ptr, png_infop info_ptr, int unit, double width, double height);
void png_set_sCAL_s(png_structp png_ptr, png_infop info_ptr, int unit, png_charp swidth, png_charp sheight);
void png_set_sPLT(png_structp png_ptr, png_infop info_ptr, png_sPLT_tp entries, int nentries);
void png_set_sRGB(png_structp png_ptr, png_infop info_ptr, int intent);
void png_set_sRGB_gAMA_and_cHRM(png_structp png_ptr, png_infop info_ptr, int intent);
void png_set_shift(png_structp png_ptr, png_color_8p true_bits);
void png_set_sig_bytes(png_structp png_ptr, int num_bytes);
void png_set_strip_16(png_structp png_ptr);
void png_set_strip_alpha(png_structp png_ptr);
void png_set_swap(png_structp png_ptr);
void png_set_swap_alpha(png_structp png_ptr);
void png_set_tIME(png_structp png_ptr, png_infop info_ptr, png_timep mod_time);
void png_set_tRNS(png_structp png_ptr, png_infop info_ptr, png_bytep trans, int num_trans, png_color_16p trans_values);
void png_set_tRNS_to_alpha(png_structp png_ptr);
void png_set_text(png_structp png_ptr, png_infop info_ptr, png_textp text_ptr, int num_text);
void png_set_unknown_chunks(png_structp png_ptr, png_infop info_ptr, png_unknown_chunkp unknowns, int num_unknowns);
void png_set_user_transform_info(png_structp png_ptr, png_voidp user_transform_ptr, int user_transform_depth, int user_transform_channels);
void png_set_write_fn(png_structp png_ptr, png_voidp io_ptr, png_rw_ptr write_data_fn, png_flush_ptr output_flush_fn);
void png_set_write_status_fn(png_structp png_ptr, png_write_status_ptr write_row_fn);
void png_set_write_user_transform_fn(png_structp png_ptr, png_user_transform_ptr write_user_transform_fn);
png_bytep png_sig_bytes(void);
int png_sig_cmp(png_bytep sig, png_size_t start, png_size_t num_to_check);
void png_start_read_image(png_structp png_ptr);
void png_warning(png_structp png_ptr, png_const_charp message);
void png_write_chunk(png_structp png_ptr, png_bytep chunk_name, png_bytep data, png_size_t length);
void png_write_chunk_data(png_structp png_ptr, png_bytep data, png_size_t length);
void png_write_chunk_end(png_structp png_ptr);
void png_write_chunk_start(png_structp png_ptr, png_bytep chunk_name, png_uint_32 length);
void png_write_destroy(png_structp png_ptr);
void png_write_destroy_info(png_infop info_ptr);
void png_write_end(png_structp png_ptr, png_infop info_ptr);
void png_write_flush(png_structp png_ptr);
void png_write_image(png_structp png_ptr, png_bytepp image);
void png_write_info(png_structp png_ptr, png_infop info_ptr);
void png_write_info_before_PLTE(png_structp png_ptr, png_infop info_ptr);
void png_write_png(png_structp png_ptr, png_infop info_ptr, int transforms, voidp params);
void png_write_row(png_structp png_ptr, png_bytep row);
void png_write_rows(png_structp png_ptr, png_bytepp row, png_uint_32 num_rows);
FILE *popen(const char *, const char *);
double pow(double, double);
float powf(float, float);
int printf(const char *, ...);
int pthread_attr_destroy(pthread_attr_t *attr);
int pthread_attr_getstacksize(pthread_attr_t *attr, size_t *size);
int pthread_attr_init(pthread_attr_t *attr);
int pthread_attr_setstacksize(pthread_attr_t *attr, size_t size);
int pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*function)(void *), void *arg);
int pthread_detach(pthread_t thread);
int pthread_equal(pthread_t t1, pthread_t t2);
int pthread_exit(void *value_ptr);
void *pthread_getspecific(pthread_key_t *key);
int pthread_join(pthread_t thread, void **value_ptr);
int pthread_key_create(pthread_key_t *key);
int pthread_key_delete(pthread_key_t *key);
int pthread_kill(pthread_t *thread, int sig);
int pthread_mutex_destroy(pthread_mutex_t *mutext);
int pthread_mutex_init(pthread_mutex_t *mutex, const pthread_mutexattr_t *);
int pthread_mutex_lock(pthread_mutex_t *mutext);
int pthread_mutex_trylock(pthread_mutex_t *mutext);
int pthread_mutex_unlock(pthread_mutex_t *mutext);
pthread_t pthread_self();
int pthread_setspecific(pthread_key_t *key, const void *value);
int pthread_sigmask(int operation, const sigset_t *set, sigset_t *old_set);
int putc(int, FILE *);
int putchar(int);
int putenv(const char *string);
int puts(const char *);
void pututline(struct utmp *);
int putw(int, FILE *);
void *pvalloc(size_t);
void qsort(void *base, size_t nmemb, size_t size, int (*compar)(const void *, const void *));
int raise(int);
int rand(void);
int rand_r(unsigned int *seed);
int read(int fildes, void *buf, size_t nbyte);
struct dirent *readdir(DIR *);
void *realloc(void *r, size_t size);
regexp *regcomp();
void regerror();
int regexec();
void regsub();
double remainder(double, double);
float remainderf(float, float);
int remove(const char *);
int rename(const char *, const char *);
void rewind(FILE *);
void rewinddir(DIR *);
char *rindex(const char *, int);
double rint(double);
float rintf(float);
int rmdir(const char *path);
void *sbrk(size_t incr);
double scalbn(double, int);
float scalbnf(float, int);
int scandir(const char *dir, struct dirent ***namelist, int (*select)(const struct dirent *), int (*compar)(const struct dirent **, const struct dirent **));
int scanf(const char *, ...);
void seekdir(DIR *, off_t loc);
int select(int n, _types_fd_set *readfds, _types_fd_set *writefds, _types_fd_set *exceptfds, struct timeval *timeout);
int sem_destroy(sem_t *sem);
int sem_init(sem_t *sem, int pshared, unsigned int value);
int sem_post(sem_t *sem);
int sem_trywait(sem_t *sem);
int sem_wait(sem_t *sem);
void setbuf(FILE *, char *);
void setbuffer(FILE *, char *, int);
int setenv(const char *string, const char *value, int overwrite);
int setgid(gid_t gid);
void setgrent(void);
void setgrfile(const char *);
int setgroupent(int);
int setitimer(int which, const struct itimerval *value, struct itimerval *ovalue);
int setjmp(jmp_buf jmpb);
void setkey(char *key);
int setlinebuf(FILE *);
char *setlocale(int category, const char *locale);
int setlogmask(int);
FILE *setmntent(const char *filep, const char *type);
int setmode(int fd, int mode);
int setpgid(pid_t pid, pid_t pgid);
void setpwent(void);
pid_t setsid(void);
int settimeofday(const struct timeval *, const struct timezone *);
int setuid(uid_t uid);
void setutent(void);
int setvbuf(FILE *, char *, int, size_t);
_sig_func_ptr signal(int, _sig_func_ptr);
int signgam;
int sigprocmask(int how, const sigset_t *a, sigset_t *b);
double sin(double);
float sinf(float);
double sinh(double);
float sinhf(float);
int siprintf(char *, const char *, ...);
unsigned int sleep(unsigned int seconds);
int snprintf(char *, size_t, const char *, ...);
int spawnl(int mode, const char *path, const char *argv0, ...);
int spawnle(int mode, const char *path, const char *argv0, ...);
int spawnlp(int mode, const char *path, const char *argv0, ...);
int spawnlpe(int mode, const char *path, const char *argv0, ...);
int spawnv(int mode, const char *path, const char *const *argv);
int spawnve(int mode, const char *path, char *const *argv, const char *const *envp);
int spawnvp(int mode, const char *path, const char *const *argv);
int spawnvpe(int mode, const char *path, const char *const *argv, const char *const *envp);
int sprintf(char *, const char *, ...);
double sqrt(double);
float sqrtf(float);
void srand(unsigned int seed);
int sscanf(const char *, const char *, ...);
int stat(const char *path, struct stat *sbuf);
int statfs(const char *path, struct statfs *buf);
int strcasecmp(const char *, const char *);
char *strcat(char *, const char *);
char *strchr(const char *, int);
int strcmp(const char *, const char *);
int strcoll(const char *, const char *);
char *strcpy(char *, const char *);
size_t strcspn(const char *, const char *);
char *strdup(const char *);
char *strerror(int);
size_t strftime(char *s, size_t maxsize, const char *fmt, const struct tm *t);
size_t strlen(const char *);
char *strlwr(char *);
int strncasecmp(const char *, const char *, size_t);
char *strncat(char *, const char *, size_t);
int strncmp(const char *, const char *, size_t);
char *strncpy(char *, const char *, size_t);
char *strpbrk(const char *, const char *);
char *strrchr(const char *, int);
char *strsep(char **, const char *);
size_t strspn(const char *, const char *);
char *strstr(const char *, const char *);
double strtod(const char *n, char **end_PTR);
float strtodf(const char *n, char **end_PTR);
char *strtok(char *, const char *);
char *strtok_r(char *, const char *, char **);
__int32 strtol(const char *n, char **end_PTR, int base);
unsigned __int32 strtoul(const char *n_PTR, char **end_PTR, int base);
char *strupr(char *);
size_t strxfrm(char *, const char *, size_t);
void swab(const void *, void *, ssize_t);
__int32 sysconf(int name);
void syslog(int, const char *, ...);
int system(const char *string);
double tan(double);
float tanf(float);
double tanh(double);
float tanhf(float);
int tcdrain(int);
int tcflow(int, int);
int tcflush(int, int);
int tcgetattr(int, struct termios *);
pid_t tcgetpgrp(int fildes);
int tcsendbreak(int, int);
int tcsetattr(int, int, const struct termios *);
int tcsetpgrp(int fildes, pid_t pgrp_id);
off_t telldir(DIR *);
char *tempnam(const char *, const char *);
int tgetent(char *, const char *);
int tgetflag(const char *);
int tgetnum(const char *);
char *tgetstr(const char *, char **);
char *tgoto(const char *, int, int);
time_t time(time_t *timer);
clock_t times(struct tms *);
Tk_CustomOption tixConfigItemStyle;
Tk_CustomOption tixConfigItemType;
Tk_CustomOption tixConfigRelief;
char *tixStrDup(const char *s);
FILE *tmpfile(void);
char *tmpnam(char *);
int toascii(int c);
int tolower(int c);
int toupper(int c);
char *tparm(const char *, ...);
int tputs(const char *, int, int (*)(int));
char *ttyname(int fildes);
mode_t umask(mode_t mask);
int umount(const char *);
int uname(struct utsname *);
int uncompress(Bytef *dest, uLongf *destLen, const Bytef *source, uLong sourceLen);
int ungetc(int, FILE *);
int unlink(const char *path);
int utime(const char *path, struct utimbuf *buf);
int utimes(const char *path, struct timeval *tvp);
void utmpname(const char *);
void *valloc(size_t);
int vfiprintf(FILE *, const char *, char *);
int vfprintf(FILE *, const char *, char *);
int vprintf(const char *, char *);
int vsnprintf(char *, size_t, const char *, char *);
int vsprintf(char *, const char *, char *);
pid_t wait(int *);
pid_t wait3(int *status, int options, struct rusage *rusage);
pid_t wait4(pid_t pid, int *status, int options, struct rusage *rusage);
pid_t waitpid(pid_t, int *, int);
size_t wcstombs(char *, const wchar_t *, size_t);
int wctomb(char *, wchar_t);
int write(int fildes, const void *buf, size_t nbyte);
double y0(double);
float y0f(float);
double y1(double);
float y1f(float);
double yn(int, double);
float ynf(int, float);
const char *zError(int err);
const char *zlibVersion(void);
bfd_architecture bfd_arch_a29k;
bfd_architecture bfd_arch_alliant;
bfd_architecture bfd_arch_alpha;
bfd_architecture bfd_arch_arc;
bfd_architecture bfd_arch_arm;
bfd_architecture bfd_arch_avr;
bfd_architecture bfd_arch_convex;
bfd_architecture bfd_arch_d10v;
bfd_architecture bfd_arch_d30v;
bfd_architecture bfd_arch_fr30;
bfd_architecture bfd_arch_h8300;
bfd_architecture bfd_arch_h8500;
bfd_architecture bfd_arch_hppa;
bfd_architecture bfd_arch_i370;
bfd_architecture bfd_arch_i386;
bfd_architecture bfd_arch_i860;
bfd_architecture bfd_arch_i960;
bfd_architecture bfd_arch_ia64;
bfd_architecture bfd_arch_last;
bfd_architecture bfd_arch_m32r;
bfd_architecture bfd_arch_m68k;
bfd_architecture bfd_arch_m88k;
bfd_architecture bfd_arch_mcore;
bfd_architecture bfd_arch_mips;
bfd_architecture bfd_arch_mn10200;
bfd_architecture bfd_arch_mn10300;
bfd_architecture bfd_arch_ns32k;
bfd_architecture bfd_arch_obscure;
bfd_architecture bfd_arch_pj;
bfd_architecture bfd_arch_powerpc;
bfd_architecture bfd_arch_pyramid;
bfd_architecture bfd_arch_romp;
bfd_architecture bfd_arch_rs6000;
bfd_architecture bfd_arch_sh;
bfd_architecture bfd_arch_sparc;
bfd_architecture bfd_arch_tahoe;
bfd_architecture bfd_arch_tic30;
bfd_architecture bfd_arch_tic54x;
bfd_architecture bfd_arch_tic80;
bfd_architecture bfd_arch_unknown;
bfd_architecture bfd_arch_v850;
bfd_architecture bfd_arch_vax;
bfd_architecture bfd_arch_w65;
bfd_architecture bfd_arch_we32k;
bfd_architecture bfd_arch_z8k;
bfd_format bfd_archive;
bfd_format bfd_core;
bfd_link_order_type bfd_data_link_order;
bfd_error bfd_error_bad_value;
bfd_error bfd_error_file_ambiguously_recognized;
bfd_error bfd_error_file_not_recognized;
bfd_error bfd_error_file_too_big;
bfd_error bfd_error_file_truncated;
bfd_error bfd_error_invalid_error_code;
bfd_error bfd_error_invalid_operation;
bfd_error bfd_error_invalid_target;
bfd_error bfd_error_malformed_archive;
bfd_error bfd_error_no_armap;
bfd_error bfd_error_no_contents;
bfd_error bfd_error_no_debug_section;
bfd_error bfd_error_no_error;
bfd_error bfd_error_no_memory;
bfd_error bfd_error_no_more_archived_files;
bfd_error bfd_error_no_symbols;
bfd_error bfd_error_nonrepresentable_section;
bfd_error bfd_error_system_call;
bfd_error bfd_error_wrong_format;
bfd_link_order_type bfd_fill_link_order;
bfd_link_order_type bfd_indirect_link_order;
bfd_link_hash_type bfd_link_hash_common;
bfd_link_hash_type bfd_link_hash_defined;
bfd_link_hash_type bfd_link_hash_defweak;
bfd_link_hash_type bfd_link_hash_indirect;
bfd_link_hash_type bfd_link_hash_new;
bfd_link_hash_type bfd_link_hash_undefined;
bfd_link_hash_type bfd_link_hash_undefweak;
bfd_link_hash_type bfd_link_hash_warning;
MACRO_bfd_mach_alpha bfd_mach_alpha_ev4;
MACRO_bfd_mach_alpha bfd_mach_alpha_ev5;
MACRO_bfd_mach_alpha bfd_mach_alpha_ev6;
MACRO_bfd_mach_m32rx bfd_mach_am33;
MACRO_bfd_mach_v850ea bfd_mach_arc_base;
MACRO_bfd_mach_arm bfd_mach_arm_2;
MACRO_bfd_mach_arm bfd_mach_arm_2a;
MACRO_bfd_mach_arm bfd_mach_arm_3;
MACRO_bfd_mach_arm bfd_mach_arm_3M;
MACRO_bfd_mach_arm bfd_mach_arm_4;
MACRO_bfd_mach_arm bfd_mach_arm_4T;
MACRO_bfd_mach_arm bfd_mach_arm_5;
MACRO_bfd_mach_arm bfd_mach_arm_5T;
MACRO_bfd_mach_avr1 bfd_mach_avr1;
MACRO_bfd_mach_avr1 bfd_mach_avr2;
MACRO_bfd_mach_avr1 bfd_mach_avr3;
MACRO_bfd_mach_avr1 bfd_mach_avr4;
MACRO_bfd bfd_mach_cpu32;
MACRO_bfd_mach_d10v bfd_mach_d10v;
MACRO_bfd_mach_d10v bfd_mach_d10v_ts2;
MACRO_bfd_mach_d10v bfd_mach_d10v_ts3;
MACRO_bfd_mach_m32rx bfd_mach_fr30;
MACRO_bfd_mach_h8300 bfd_mach_h8300;
MACRO_bfd_mach_h8300 bfd_mach_h8300h;
MACRO_bfd_mach_h8300 bfd_mach_h8300s;
MACRO_bfd_mach_mips16 bfd_mach_i386_i386;
MACRO_bfd_mach_i386 bfd_mach_i386_i386_intel_syntax;
MACRO_bfd_mach_i386 bfd_mach_i386_i8086;
MACRO_bfd_mach bfd_mach_i960_ca;
MACRO_bfd_mach bfd_mach_i960_core;
MACRO_bfd_mach bfd_mach_i960_hx;
MACRO_bfd_mach bfd_mach_i960_jx;
MACRO_bfd_mach bfd_mach_i960_ka_sa;
MACRO_bfd_mach bfd_mach_i960_kb_sb;
MACRO_bfd_mach bfd_mach_i960_mc;
MACRO_bfd_mach bfd_mach_i960_xa;
MACRO_bfd_mach_v850ea bfd_mach_m32r;
MACRO_bfd_mach_m32rx bfd_mach_m32rx;
MACRO_bfd bfd_mach_m68000;
MACRO_bfd bfd_mach_m68008;
MACRO_bfd bfd_mach_m68010;
MACRO_bfd bfd_mach_m68020;
MACRO_bfd bfd_mach_m68030;
MACRO_bfd bfd_mach_m68040;
MACRO_bfd bfd_mach_m68060;
MACRO_bfd_mach_mips3000 bfd_mach_mips10000;
MACRO_bfd_mach_mips16 bfd_mach_mips16;
MACRO_bfd_mach_mips3000 bfd_mach_mips3000;
MACRO_bfd_mach_mips3000 bfd_mach_mips3900;
MACRO_bfd_mach_mips3000 bfd_mach_mips4000;
MACRO_bfd_mach_mips3000 bfd_mach_mips4010;
MACRO_bfd_mach_mips3000 bfd_mach_mips4100;
MACRO_bfd_mach_mips3000 bfd_mach_mips4111;
MACRO_bfd_mach_mips3000 bfd_mach_mips4300;
MACRO_bfd_mach_mips3000 bfd_mach_mips4400;
MACRO_bfd_mach_mips3000 bfd_mach_mips4600;
MACRO_bfd_mach_mips3000 bfd_mach_mips4650;
MACRO_bfd_mach_mips3000 bfd_mach_mips5000;
MACRO_bfd_mach_mips3000 bfd_mach_mips6000;
MACRO_bfd_mach_mips3000 bfd_mach_mips8000;
MACRO_bfd_mach_m32rx bfd_mach_mn10300;
MACRO_bfd_mach_sh bfd_mach_sh;
MACRO_bfd_mach_sh bfd_mach_sh2;
MACRO_bfd_mach_sh bfd_mach_sh3;
MACRO_bfd_mach_sh bfd_mach_sh3_dsp;
MACRO_bfd_mach_sh bfd_mach_sh3e;
MACRO_bfd_mach_sh bfd_mach_sh4;
MACRO_bfd_mach_sh bfd_mach_sh_dsp;
MACRO_bfd_mach_sparc bfd_mach_sparc;
MACRO_bfd_mach_sparc bfd_mach_sparc_sparclet;
MACRO_bfd_mach_sparc bfd_mach_sparc_sparclite;
MACRO_bfd_mach_sparc bfd_mach_sparc_sparclite_le;
MACRO_bfd_mach_sparc bfd_mach_sparc_v8plus;
MACRO_bfd_mach_sparc bfd_mach_sparc_v8plusa;
MACRO_bfd_mach_sparc bfd_mach_sparc_v9;
MACRO_bfd_mach_sparc bfd_mach_sparc_v9a;
MACRO_bfd_mach_v850 bfd_mach_v850;
MACRO_bfd_mach_v850 bfd_mach_v850e;
MACRO_bfd_mach_v850ea bfd_mach_v850ea;
MACRO_bfd_mach_z8001 bfd_mach_z8001;
MACRO_bfd_mach_z8001 bfd_mach_z8002;
bfd_format bfd_object;
bfd_print_symbol bfd_print_symbol_all;
bfd_print_symbol bfd_print_symbol_more;
bfd_print_symbol bfd_print_symbol_name;
bfd_reloc_status bfd_reloc_continue;
bfd_reloc_status bfd_reloc_dangerous;
bfd_reloc_status bfd_reloc_notsupported;
bfd_reloc_status bfd_reloc_ok;
bfd_reloc_status bfd_reloc_other;
bfd_reloc_status bfd_reloc_outofrange;
bfd_reloc_status bfd_reloc_overflow;
bfd_reloc_status bfd_reloc_undefined;
bfd_link_order_type bfd_section_reloc_link_order;
bfd_link_order_type bfd_symbol_reloc_link_order;
bfd_flavour bfd_target_aout_flavour;
bfd_flavour bfd_target_coff_flavour;
bfd_flavour bfd_target_ecoff_flavour;
bfd_flavour bfd_target_elf_flavour;
bfd_flavour bfd_target_evax_flavour;
bfd_flavour bfd_target_ieee_flavour;
bfd_flavour bfd_target_ihex_flavour;
bfd_flavour bfd_target_msdos_flavour;
bfd_flavour bfd_target_nlm_flavour;
bfd_flavour bfd_target_oasys_flavour;
bfd_flavour bfd_target_os9k_flavour;
bfd_flavour bfd_target_ovax_flavour;
bfd_flavour bfd_target_som_flavour;
bfd_flavour bfd_target_srec_flavour;
bfd_flavour bfd_target_tekhex_flavour;
bfd_flavour bfd_target_unknown_flavour;
bfd_flavour bfd_target_versados_flavour;
bfd_format bfd_type_end;
bfd_link_order_type bfd_undefined_link_order;
bfd_format bfd_unknown;
_bfd::bfd_direction both_direction;
complain_overflow complain_overflow_bitfield;
complain_overflow complain_overflow_dont;
complain_overflow complain_overflow_signed;
complain_overflow complain_overflow_unsigned;
bfd_link_discard discard_all;
bfd_link_discard discard_l;
bfd_link_discard discard_none;
bfd_boolean false;
MACRO_no no_argument;
_bfd::bfd_direction no_direction;
MACRO_no optional_argument;
_bfd::bfd_direction read_direction;
MACRO_no required_argument;
bfd_link_strip strip_all;
bfd_link_strip strip_debugger;
bfd_link_strip strip_none;
bfd_link_strip strip_some;
bfd_boolean true;
_bfd::bfd_direction write_direction;
