#define GHIDRA
#ifndef INCLUDE_GUARD_bcb5win_til
#define INCLUDE_GUARD_bcb5win_til
#include "../__idatilcommon.h"



struct __MIDL___MIDL_itf_wtypes_0003_0001____MIDL___MIDL_itf_wtypes_0003_0005___6B5846D67F7DD81E1807E9F45EE9219E;
struct __MIDL___MIDL_itf_wtypes_0003_0001____MIDL___MIDL_itf_wtypes_0003_0005___7C8E1366D020F294DF98B2AA96DD5064;
struct _IMAGE_RESOURCE_DIRECTORY_ENTRY___4D142E9F5D1D48D13A38B419BC687841___6E35CCFC02D81E31BD4C6BEDD77CB20A;
struct _IMAGE_RESOURCE_DIRECTORY_ENTRY___A1259A08F2B533F259DA4993E2C51E29___B2E03ED94C06E2E681F8D03FF7FF5CB3;
struct _PRINTER_NOTIFY_INFO_DATA___13C44C2CB620BE9B3AF26887E9FDBAC1___C17A22870036CE08069A6AE8C5637EC1;
struct _DEVICE_MEDIA_INFO_________4F7870307D68C2FCA7F129B9E5696535___445D6B15ACF5C822E8B4A555F1AF8785;
struct _DISK_CACHE_INFORMATION___0AD8AF95EFD10BD5272FB6EC04FE066D___99025D9F8BC16C326FB237046D6F6F6F;
struct _DISK_CACHE_INFORMATION___0AD8AF95EFD10BD5272FB6EC04FE066D___B2B02F0A7FAA2EF9E06FFE2893D08AB3;
union _DEVICE_MEDIA_INFO______723F4108713078BC94E60AB72DA19CAC___4F7870307D68C2FCA7F129B9E5696535;
struct _FILE_OBJECTID_BUFFER___77FE4681D295052E0E2CCB42A3EC532A___C0DBABB4D3C7F7567DEFF10AA714B1D5;
struct _IMAGE_AUX_SYMBOL______16A1A8FB0340C07B06C110366CF85D46___A6589E1685AD051AED20409BF2544643;
struct _IMAGE_AUX_SYMBOL______16A1A8FB0340C07B06C110366CF85D46___D7CED02C5EE110FFB81CA02005CB2264;
struct _IMAGE_AUX_SYMBOL______7BA673E1ED5771089D188D89EB9BDF46___3C0209E125597A11F89742EEA0270158;
struct _PROCESS_HEAP_ENTRY___7560F888646F7FDA504B9D72BE9EBD07___6F5D3132B0673F7F54FA2B910BE5C5E0;
struct _PROCESS_HEAP_ENTRY___7560F888646F7FDA504B9D72BE9EBD07___E5DDA9A585AE137D0E5F8881F3AC492F;
struct _DEVICE_MEDIA_INFO___2DD95E35CD64FCF2582B874AE4A78983___723F4108713078BC94E60AB72DA19CAC;
struct _DEVICE_MEDIA_INFO___2DD95E35CD64FCF2582B874AE4A78983___B282398C81B6FF20F165753A3DA70A52;
union _IMAGE_AUX_SYMBOL___23DFC5686F0E6924815C955A999B653C___16A1A8FB0340C07B06C110366CF85D46;
union _IMAGE_AUX_SYMBOL___23DFC5686F0E6924815C955A999B653C___7BA673E1ED5771089D188D89EB9BDF46;
union tagPROPVARIANT______1A0FF913CB6A2700FBDFFDCC16233417___C55E7FD68DDBD4820BEEA04B5D0E46A7;
struct _RPC_ASYNC_STATE___C850AED24DDA9EA1FCF494DA424838E3___5843F6C8FAC72B709E58873D9E66E99B;
struct _RPC_ASYNC_STATE___C850AED24DDA9EA1FCF494DA424838E3___A18A6C82CF5B218D68E8003A992A5456;
struct _RPC_ASYNC_STATE___C850AED24DDA9EA1FCF494DA424838E3___FE55FC766DFEC649A23F3D16D006B7DF;
struct tagMIXERCONTROLA___86CBF7128C7FD2AC13C8612745AD13D8___A8262751543F154F80C41ED2519FD13B;
struct tagMIXERCONTROLA___86CBF7128C7FD2AC13C8612745AD13D8___A9226EEFE738F03A3F7D52221D0941CC;
struct tagMIXERCONTROLW___3D7A05C52ED08258D8A0343834E0D122___A8262751543F154F80C41ED2519FD13B;
struct tagMIXERCONTROLW___3D7A05C52ED08258D8A0343834E0D122___A9226EEFE738F03A3F7D52221D0941CC;
struct tagPROPVARIANT___B01A803922ACEB71FC353E1ACAA1539E___1A0FF913CB6A2700FBDFFDCC16233417;
struct _IMAGE_SYMBOL___9F494F861147FDD11568E2137C7AB2D3___DE8E098676ACAC74F2956A2D7B83DF3B;
struct _SYSTEM_INFO___A707B71C060B6D10F73A71917EA8473F___AA04DEB0C6383F89F13D312A174572A9;
struct _devicemodeA___1DE029518E5B112A14BB6E76DECCA4C4___5ACE225D4D14CE0550A9F5A217E306C5;
struct _devicemodeW___8704E1B782D57C585145E63F7510EBEA___5ACE225D4D14CE0550A9F5A217E306C5;
struct _LDT_ENTRY___95C81B8F3DD6C8D0A2F7AF8EEE24F097___81408237330B83BB46845513C42A27AE;
struct _LDT_ENTRY___95C81B8F3DD6C8D0A2F7AF8EEE24F097___A3BAC9569453E46653D4C53B8339026E;
struct mmtime_tag___532DCF0E9B9A2B0A020BD11490F25514___2498AB4F57B5A5935D3AAA9956C218FB;
struct mmtime_tag___532DCF0E9B9A2B0A020BD11490F25514___B7A2B1CE967584EBB3840978181CF21D;
struct in_addr___C13EC994467D6E67044F092615EC7EA9___01C175C1F0716DCA00314EDD79DBC0A0;
struct in_addr___C13EC994467D6E67044F092615EC7EA9___4DE764E669F663DACA3CBFDE73714CB5;
struct tagDEC___64EC678C49E7BE49873AFBFB7A849D34___7F8459940C2B08BD5D82B0F27239141B;
struct tagDEC___D28E26DEC3EC762C06C2AA9D0F7AC301___674876891A86A76F12C10005982BCA56;
struct tagVARIANT_______tagVARIANT___0FF4B879107F0495843F4FD419461AB7____tagBRECORD;
union _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO___41B0BD1292C22C89BE2FD7DE56713FE8;
union _CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO___76A3B0E8FFB5FF4FE868B027B0FA21D8;
union __MIDL___MIDL_itf_wtypes_0003_0001____MIDL___MIDL_itf_wtypes_0003_0005;
union _D26D25374C75FEF3AD181CCFA77BD37F___ED8EF83DA0F103C0F6663A08F1BCC04F;
union _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA___76A3B0E8FFB5FF4FE868B027B0FA21D8;
union _CERT_SYSTEM_STORE_RELOCATE_PARA___1F74DEB47E7608C03F5763A4862C6217;
union _CERT_SYSTEM_STORE_RELOCATE_PARA___F6B54AA619DA848AA2A21334D34667B4;
union _IMAGE_RESOURCE_DIRECTORY_ENTRY___4D142E9F5D1D48D13A38B419BC687841;
union _IMAGE_RESOURCE_DIRECTORY_ENTRY___A1259A08F2B533F259DA4993E2C51E29;
union _CMSG_KEY_AGREE_RECIPIENT_INFO___74691898E1CF581306BA249AD6F73FE1;
union _MEMORY_BASIC_INFORMATION_VLM___023421F2A53415AC5289F1A60128413B;
union _MEMORY_BASIC_INFORMATION_VLM___1C048A2196DAD501277AB2AA6FBC3D43;
union _CMSG_KEY_AGREE_ENCRYPT_INFO___74691898E1CF581306BA249AD6F73FE1;
union _CMSG_RECIPIENT_ENCODE_INFO___30055397BBF277E66F5B4ACE1878FAEA;
union tagVARIANT_______tagVARIANT___0FF4B879107F0495843F4FD419461AB7;
struct RETRIEVAL_POINTERS_BUFFER___1BE95960A89AEFDDC7C143B6A7C3CEB0;
union _PRINTER_NOTIFY_INFO_DATA___13C44C2CB620BE9B3AF26887E9FDBAC1;
struct _REPARSE_GUID_DATA_BUFFER___7E560C326EB38963D80E6D6A0DCA12F5;
union _CMSG_CMS_RECIPIENT_INFO___341F1DACD4668580119084EDA262D7AC;
union _HTTPSPolicyCallbackData___F4C9A18A61EDC422290C9C9CC9138C86;
union _IMAGE_IMPORT_DESCRIPTOR___6AD513163D7E1ED317197F815B889A38;
struct tagVARIANT___F060C15D409704AFCEB2B499364615C4____tagVARIANT;
union _DISK_CACHE_INFORMATION___0AD8AF95EFD10BD5272FB6EC04FE066D;
union _IMAGE_FUNCTION_ENTRY64___20B872DD2F1538A436CF92B8294FA12B;
union _NDR_USER_MARSHAL_INFO___2E50A3D60C3ABC8A29A927969B630A6D;
union _userSTGMEDIUM___STGMEDIUM_UNION____MIDL_IAdviseSink_0003;
union _FILE_OBJECTID_BUFFER___77FE4681D295052E0E2CCB42A3EC532A;
struct _FULL_PTR_XLAT_TABLES___5B5EF811252786EBFBAAA3889BB4C68D;
struct _FULL_PTR_XLAT_TABLES___CFFA09E862963CB530A7E2871127FDA7;
union _IMAGE_SECTION_HEADER___39DFBA39B6D121CDFC1ACE66C995549C;
union tagMIXERLINECONTROLSA___DC43C2837E8C20184C3137B308FBE3E1;
union tagMIXERLINECONTROLSW___DC43C2837E8C20184C3137B308FBE3E1;
union IMPORT_OBJECT_HEADER___14069DE518AE1D4889EE822155F222E0;
union _CERT_ALT_NAME_ENTRY___373478565C662A7CF028A7B1C57EC676;
union _CRL_DIST_POINT_NAME___3757901DA347ED4D4ADA336F060E6178;
union tMIXERCONTROLDETAILS___6A354DB64043DD4C59D209C2C03EE69F;
union _IMAGE_THUNK_DATA32___A667AA66621C320A48F8EE5C4EA8143D;
union _IMAGE_THUNK_DATA64___F155400DC8E777EDFF51409B49416578;
union _PROCESS_HEAP_ENTRY___7560F888646F7FDA504B9D72BE9EBD07;
union _DEVICE_MEDIA_INFO___2DD95E35CD64FCF2582B874AE4A78983;
union _SHELLEXECUTEINFOA___D915D6B2B775D926C11EEA321E8940B4;
union _SHELLEXECUTEINFOW___D915D6B2B775D926C11EEA321E8940B4;
union _wireSAFEARRAY_UNION____MIDL_IOleAutomationTypes_0001;
struct _IMAGE_AUX_SYMBOL___0ECF6FFE4CB91F7643C274EBA09FDD11;
struct _IMAGE_AUX_SYMBOL___23DFC5686F0E6924815C955A999B653C;
struct _IMAGE_AUX_SYMBOL___C84595816809DB9D1AC5ADB82092AE34;
union _IMAGE_LINENUMBER___323A99206959B5083BD9C46482D6FCE5;
union _IMAGE_RELOCATION___1E7C1E46FA531EE3105A5918E7864FED;
union _KEY_EVENT_RECORD___0E79EC4DAC98A4AB202537FA8C3F69FC;
union _PROPSHEETHEADERA___5F49E4A18E3DDA5E827B03567227027C;
union _PROPSHEETHEADERA___B1482D20F8877C2A38A76E0C7234BF42;
union _PROPSHEETHEADERA___B2BC7FD01B1A93973E79FDE746C43987;
union _PROPSHEETHEADERA___E1AF9326B92748E8DAFEF2F13D81386D;
union _PROPSHEETHEADERA___FF46AEFBA3346A074103206F902E6DF5;
union _PROPSHEETHEADERW___0FB566F30614F599529D00140F4CD87D;
union _PROPSHEETHEADERW___6475730AE6DAD1B8D6E46E57DCE1E457;
union _PROPSHEETHEADERW___9C028D56AB90D7CB2840D31BA61B8779;
union _PROPSHEETHEADERW___C62D413765EFFC4667F5A15937CA2710;
union _PROPSHEETHEADERW___C635E94935336589E496FC759198B86F;
struct _NTFS_STATISTICS___924DF363F27C338739465173127CFC6B;
struct _NTFS_STATISTICS___9C998E5FD8046F0A1F0382B50F145156;
struct _NTFS_STATISTICS___B3DB85740C1E2CFE5BD1821639ECE250;
union _RPC_ASYNC_STATE___C850AED24DDA9EA1FCF494DA424838E3;
union tagMIXERCONTROLA___86CBF7128C7FD2AC13C8612745AD13D8;
union tagMIXERCONTROLA___AFA1D3B62FF5E28583F9FD43B125895E;
union tagMIXERCONTROLW___3D7A05C52ED08258D8A0343834E0D122;
union tagMIXERCONTROLW___AFA1D3B62FF5E28583F9FD43B125895E;
union _CRYPT_OID_INFO___A9F8A7DC8FBE56841F6E4489F1528E50;
union _MIDL_STUB_DESC___5BCB627D3738D8B5DEACC268C24AE672;
union _PROPSHEETPAGEA___55841DA2EA6EA673F6C61AA531495E56;
union _PROPSHEETPAGEA___E1AF9326B92748E8DAFEF2F13D81386D;
union _PROPSHEETPAGEW___0FB566F30614F599529D00140F4CD87D;
union _PROPSHEETPAGEW___516F7AC5631E67C03EDCA9BDA4E87AED;
struct _ULARGE_INTEGER___0354AA9C204208F00D0965D07BBE7FAC;
struct _LARGE_INTEGER___837407842DC9087486FDFA5FEB63B74E;
union tagPROPVARIANT___B01A803922ACEB71FC353E1ACAA1539E;
union _IMAGE_SYMBOL___9F494F861147FDD11568E2137C7AB2D3;
union _INPUT_RECORD___56C9F45CD5AB058B1B4FD5A9AB9216C4;
struct tagMIXERLINEA___3F59E0B102B49F482C4A8B1440A7891E;
struct tagMIXERLINEW___9A19AF7771B1B870F9962D397CED60DA;
union _DEBUG_EVENT___1CA59A7E570F154F98F56770E4FE79B4;
union _SYSTEM_INFO___A707B71C060B6D10F73A71917EA8473F;
union _devicemodeA___1DE029518E5B112A14BB6E76DECCA4C4;
union _devicemodeA___4FBEBCCE69364E072421C9DF045BB77C;
union _devicemodeW___4FBEBCCE69364E072421C9DF045BB77C;
union _devicemodeW___8704E1B782D57C585145E63F7510EBEA;
union _wireVARIANT___212E7A64C013056588B5F2DD09C0E9C5;
union tagSTGMEDIUM___7B772CC839E5463FC51219F893F364BB;
struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION;
union tagELEMDESC___7C8F4CED1424251743D09680A1A0B07D;
union tagPROPSPEC___401F44F296029ABDCCA300255B1FD5D2;
union tagTYPEDESC___AC700B6542D8071E244CADABF8A32897;
struct _AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA;
union _CHAR_INFO___0E79EC4DAC98A4AB202537FA8C3F69FC;
union _LDT_ENTRY___95C81B8F3DD6C8D0A2F7AF8EEE24F097;
union mmtime_tag___532DCF0E9B9A2B0A020BD11490F25514;
union tagVARDESC___E6274BD6A7149C9CC2413444FF769F0B;
union tagVARIANT___F060C15D409704AFCEB2B499364615C4;
struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS;
union _CERT_ID___CC94CEC94C6A7710EFE3CDB32686A77C;
union tagINPUT___72687D791E298366090936F57062F9D6;
struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA;
union _NT_TIB___0349ADB4452EC09BEC08E2292695FBBA;
union in_addr___C13EC994467D6E67044F092615EC7EA9;
struct _CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO;
union _userHMETAFILEPICT____MIDL_IWinTypes_0005;
union tagDEC___64EC678C49E7BE49873AFBFB7A849D34;
union tagDEC___D28E26DEC3EC762C06C2AA9D0F7AC301;
union _userHENHMETAFILE____MIDL_IWinTypes_0006;
struct tagCY___983F061E0B702DD8AE0B4B955735A6A3;
struct _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE;
struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION;
union _RemotableHandle____MIDL_IWinTypes_0009;
struct _CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA;
struct _CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA;
struct _CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO;
struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION;
union _userCLIPFORMAT____MIDL_IWinTypes_0001;
struct _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO;
struct _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO;
struct _CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO;
struct _CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA;
union _GDI_NONREMOTE____MIDL_IWinTypes_0002;
struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;
struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION;
struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION;
union _userHMETAFILE____MIDL_IWinTypes_0004;
struct _CERT_REGISTRY_STORE_CLIENT_GPT_PARA;
struct _CHANGER_SEND_VOLUME_TAG_INFORMATION;
union _GDI_OBJECT____MIDL_IAdviseSink_0002;
struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT;
union _userHPALETTE____MIDL_IWinTypes_0008;
struct _CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA;
struct _CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY;
struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;
union _userHBITMAP____MIDL_IWinTypes_0007;
union _userHGLOBAL____MIDL_IWinTypes_0003;
struct IInternetProtocolSinkStackableVtbl;
struct _CERT_POLICY_QUALIFIER_USER_NOTICE;
struct _CHANGER_INITIALIZE_ELEMENT_STATUS;
struct _CMSG_RECIPIENT_ENCRYPTED_KEY_INFO;
struct _IMAGE_IA64_RUNTIME_FUNCTION_ENTRY;
struct _JOBOBJECT_BASIC_LIMIT_INFORMATION;
struct __MIDL___MIDL_itf_wtypes_0003_0001;
struct _060D6FD956D3EBF205D64C3CA4764571;
struct _12220BD7577024BDCE09342FCD2824E0;
struct _13B347001B2B96C65D01839EEA37C971;
struct _1C9ED8E2FE494C714F8336D090291E50;
struct _1DF2F441892C3D46584606B89F66007B;
struct _1FC20381981E06D3B4F68D6006129906;
struct _22BDD2D628B0B561C5A9CA42290FE551;
struct _284877062F9D14F112F3A0D6BC9583DD;
struct _2B6042393D1A02E0AE9B16B44F784AC7;
struct _30CDF2DE7DC7B55457111E3E79D8AE18;
struct _3D26434F5A7D20980B51C6D4C88FA6DE;
struct _3EC5757393EE7828D79CED73ACE876F0;
struct _3FA64165D15A4602C29B2D9B0DA4A5E9;
struct _46B8CD9DF897759D0306203A2121EA8B;
struct _49CD7323AA35D3C00204BB7AA8563FFA;
struct _4B26251D75C0D59F22113E7121B4AA5F;
struct _50092E5B8D5585E25A36D2D7AA7D11CF;
struct _506E48B857830EE8DF6E8E27DF4CF86F;
struct _527907CF0A9F354C3629E138FE8A5CE6;
struct _5C0C72291B37B22FE700A61795928759;
struct _5C484BA576E4B3479DA7CECC9170D175;
struct _61B889227CECAFED4E8A477D21B34BC9;
struct _62EC1DAD6DB92F8723AD0A50B2259449;
struct _6D2254E53597AC8CE26BF57895A6DFF7;
struct _7545F1A067A9FBB43FDF50E78E6B08BD;
struct _7ADE47B00230EF5EBD78FEDFCEB95499;
struct _7F42DEB2BB5D0DE64733A8884285C23D;
struct _7FAA4336E151361F9CD171DE989684F0;
struct _80E50DFA284ED4BC838B08AAD8EA99BA;
struct _8363E2736332812C7A22E557719FD114;
struct _8B9777916333A4B8A3A60FA8F93F002E;
struct _923DA7BE11DCB482D02B0566D8DB27AB;
struct _947C6FA139885FA2B0DE7F2A3FDD942C;
struct _976F82B52AD5D008419379398D47AE46;
struct _979FA3DE6ECCF956231BFC297C4278E6;
struct _9B80566C9ECE6A73A5F898405A50FFFF;
struct _9FEC9D2A03C37051BDB5508CF5CADF1F;
struct _A0026B003AB75CC8BFC049DB25C2779D;
struct _A2F74AF90EE3AACE3322F4FF0CBF4977;
struct _A45289B030366F6A209F1D22B819A49A;
struct _A63D84EB732F4E602FF2E049D2D99B44;
struct _AD47B7B6770F26FF00FF8EF46A9765CE;
struct _B3953398288F55B3E699D33E254AB360;
struct _B80B7D01E79FADDB4AAC58DE22BC823F;
struct _C3795B4C40F1F780E52EE60833F04917;
struct _C811A85A3CBAF233E045382DA27E29BF;
struct _CBE416C4EAAA19179E77E4054907ADFF;
struct _CC81E267BD8B32E89ADB7AE662C05BFA;
struct _CCEDB0757BDFC2DD5AC112970835DC93;
struct _D26D25374C75FEF3AD181CCFA77BD37F;
struct _D890D4C8B96B04D8C981ECF31CD55F01;
struct _DC79A6464562D2DC48FEEE8D5793116D;
struct _DCD76CF5A248684E95EEC87F56AA655C;
struct _E1FC672EFA0154DDDEED24E20FAA5FC7;
struct _EA831C4C2E16EF6F2B7E490157D80D27;
struct _EC8EE2E9AF7D4EC32726A7FD632A186D;
struct _F1B55BC800274E3ABC9BA0A46288924E;
struct _F5C2DC46D71DC4D756FD7B589ADCFB9C;
struct _FC03820C0C9B455049C143518E71A23B;
struct _CERT_REGISTRY_STORE_ROAMING_PARA;
struct _CMSG_CTRL_KEY_AGREE_DECRYPT_PARA;
struct _CMSG_CTRL_KEY_TRANS_DECRYPT_PARA;
struct _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA;
struct _CRYPT_ASYNC_RETRIEVAL_COMPLETION;
struct _CRYPT_ENCRYPTED_PRIVATE_KEY_INFO;
struct _CRYPT_ENROLLMENT_NAME_VALUE_PAIR;
struct _ENCRYPTION_CERTIFICATE_HASH_LIST;
struct IInternetHostSecurityManagerVtbl;
struct IXMLDOMProcessingInstructionVtbl;
struct _CERT_KEY_USAGE_RESTRICTION_INFO;
struct _CERT_SYSTEM_STORE_RELOCATE_PARA;
struct _CMSG_KEY_AGREE_KEY_ENCRYPT_INFO;
struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY;
struct _IMAGE_RESOURCE_DIRECTORY_STRING;
struct _JOBOBJECT_BASIC_PROCESS_ID_LIST;
struct _JOBOBJECT_BASIC_UI_RESTRICTIONS;
struct _userSTGMEDIUM___STGMEDIUM_UNION;
struct tagMIXERCONTROLDETAILS_LISTTEXTA;
struct tagMIXERCONTROLDETAILS_LISTTEXTW;
struct _CERT_CHAIN_FIND_BY_ISSUER_PARA;
struct _CERT_X942_DH_VALIDATION_PARAMS;
struct _IMAGE_RESOURCE_DIRECTORY_ENTRY;
struct _USER_MARSHAL_ROUTINE_QUADRUPLE;
struct IInternetProtocolSinkStackable;
struct _CMSG_KEY_AGREE_RECIPIENT_INFO;
struct _CMSG_KEY_TRANS_RECIPIENT_INFO;
struct _CMSG_MAIL_LIST_RECIPIENT_INFO;
struct _CRYPT_KEY_VERIFY_MESSAGE_PARA;
struct _CRYPT_TIME_STAMP_REQUEST_INFO;
struct _IMAGE_BOUND_IMPORT_DESCRIPTOR;
struct tagSOLE_AUTHENTICATION_SERVICE;
struct _CERT_BASIC_CONSTRAINTS2_INFO;
struct _CMSG_SP3_COMPATIBLE_AUX_INFO;
struct _ENUM_SERVICE_STATUS_PROCESSA;
struct _ENUM_SERVICE_STATUS_PROCESSW;
struct _GENERIC_BINDING_ROUTINE_PAIR;
struct _MEMORY_BASIC_INFORMATION_VLM;
struct _NDR_USER_MARSHAL_INFO_LEVEL1;
struct _SECURITY_DESCRIPTOR_RELATIVE;
struct tMIXERCONTROLDETAILS_UNSIGNED;
struct tagEMRCREATEDIBPATTERNBRUSHPT;
struct IInternetHostSecurityManager;
struct IInternetSecurityManagerVtbl;
struct IInternetSecurityMgrSiteVtbl;
struct IXMLDOMProcessingInstruction;
struct _CERT_AUTHORITY_KEY_ID2_INFO;
struct _CERT_BASIC_CONSTRAINTS_INFO;
struct _CHANGER_READ_ELEMENT_STATUS;
struct _CMSG_KEY_AGREE_ENCRYPT_INFO;
struct _CMSG_KEY_TRANS_ENCRYPT_INFO;
struct _CMSG_MAIL_LIST_ENCRYPT_INFO;
struct _CRYPT_KEY_SIGN_MESSAGE_PARA;
struct _CRYPT_PASSWORD_CREDENTIALSA;
struct _CRYPT_PASSWORD_CREDENTIALSW;
struct _ENCRYPTION_CERTIFICATE_HASH;
struct _ENCRYPTION_CERTIFICATE_LIST;
struct _FILE_ALLOCATED_RANGE_BUFFER;
struct _IMAGE_ARCHIVE_MEMBER_HEADER;
struct _IMAGE_RESOURCE_DIR_STRING_U;
struct _IMAGE_SEPARATE_DEBUG_HEADER;
struct _PRINTER_NOTIFY_OPTIONS_TYPE;
struct _SECURITY_QUALITY_OF_SERVICE;
struct tMIXERCONTROLDETAILS_BOOLEAN;
struct tagEMREXTCREATEFONTINDIRECTW;
struct IOleInPlaceActiveObjectVtbl;
struct IXMLDOMDocumentFragmentVtbl;
struct _BY_HANDLE_FILE_INFORMATION;
struct _CERT_AUTHORITY_INFO_ACCESS;
struct _CERT_AUTHORITY_KEY_ID_INFO;
struct _CERT_POLICY_QUALIFIER_INFO;
struct _CMSG_ENCRYPTED_ENCODE_INFO;
struct _CMSG_ENVELOPED_ENCODE_INFO;
struct _CMSG_RECIPIENT_ENCODE_INFO;
struct _CONSOLE_SCREEN_BUFFER_INFO;
struct _CRYPT_ALGORITHM_IDENTIFIER;
struct _CRYPT_ATTRIBUTE_TYPE_VALUE;
struct _CRYPT_DECRYPT_MESSAGE_PARA;
struct _CRYPT_ENCRYPT_MESSAGE_PARA;
struct _FILE_ZERO_DATA_INFORMATION;
struct _FSCTL_QUERY_FAT_BPB_BUFFER;
struct _QUERY_SERVICE_LOCK_STATUSA;
struct _QUERY_SERVICE_LOCK_STATUSW;
struct _REQUEST_RAW_ENCRYPTED_DATA;
struct _RTL_CRITICAL_SECTION_DEBUG;
struct tMIXERCONTROLDETAILS_SIGNED;
struct tagSOLE_AUTHENTICATION_INFO;
struct tagSOLE_AUTHENTICATION_LIST;
struct IAsyncRpcChannelBufferVtbl;
struct IEncodingFilterFactoryVtbl;
struct IReleaseMarshalBuffersVtbl;
struct IXMLDOMEntityReferenceVtbl;
struct _ACCESS_ALLOWED_OBJECT_ACE;
struct _CERT_ISSUER_SERIAL_NUMBER;
struct _CERT_PRIVATE_KEY_VALIDITY;
struct _CERT_STORE_PROV_FIND_INFO;
struct _CMSG_CONTENT_ENCRYPT_INFO;
struct _CREATE_PROCESS_DEBUG_INFO;
struct _CRYPTPROTECT_PROMPTSTRUCT;
struct _CRYPT_PKCS8_EXPORT_PARAMS;
struct _CRYPT_PKCS8_IMPORT_PARAMS;
struct _CRYPT_VERIFY_MESSAGE_PARA;
struct _EVENTLOG_FULL_INFORMATION;
struct _FULL_PTR_TO_REFID_ELEMENT;
struct _IMAGE_BOUND_FORWARDER_REF;
struct _IMAGE_COFF_SYMBOLS_HEADER;
struct _IMAGE_RESOURCE_DATA_ENTRY;
struct _IMAGE_ROM_OPTIONAL_HEADER;
struct _READ_ELEMENT_ADDRESS_INFO;
struct _SEC_WINNT_AUTH_IDENTITY_A;
struct _SEC_WINNT_AUTH_IDENTITY_W;
struct _SET_PARTITION_INFORMATION;
struct _STORAGE_BUS_RESET_REQUEST;
struct _TAPE_GET_DRIVE_PARAMETERS;
struct _TAPE_GET_MEDIA_PARAMETERS;
struct _TAPE_SET_DRIVE_PARAMETERS;
struct _TAPE_SET_MEDIA_PARAMETERS;
struct _WIN32_FILE_ATTRIBUTE_DATA;
struct _WINDOW_BUFFER_SIZE_RECORD;
struct tagEMRMODIFYWORLDTRANSFORM;
struct IGlobalInterfaceTableVtbl;
struct IInternetProtocolInfoVtbl;
struct IInternetProtocolRootVtbl;
struct IInternetProtocolSinkVtbl;
struct IInternetThreadSwitchVtbl;
struct ISynchronizeContainerVtbl;
struct ITimeAndNoticeControlVtbl;
struct IXMLDOMImplementationVtbl;
struct IXMLElementCollectionVtbl;
struct RETRIEVAL_POINTERS_BUFFER;
struct _ACCESS_DENIED_OBJECT_ACE;
struct _ACL_REVISION_INFORMATION;
struct _CERT_CHAIN_ENGINE_CONFIG;
struct _CERT_CHAIN_POLICY_STATUS;
struct _CERT_CREATE_CONTEXT_PARA;
struct _CERT_KEYGEN_REQUEST_INFO;
struct _CERT_KEY_ATTRIBUTES_INFO;
struct _CERT_PHYSICAL_STORE_INFO;
struct _CERT_POLICY95_QUALIFIER1;
struct _CERT_SIGNED_CONTENT_INFO;
struct _CREATE_THREAD_DEBUG_INFO;
struct _CRYPT_RC2_CBC_PARAMETERS;
struct _CRYPT_SMIME_CAPABILITIES;
struct _DECRYPTION_STATUS_BUFFER;
struct _DRIVE_LAYOUT_INFORMATION;
struct _IMAGE_RESOURCE_DIRECTORY;
struct _MEMORY_BASIC_INFORMATION;
struct _MIDL_STUBLESS_PROXY_INFO;
struct _OUTPUT_DEBUG_STRING_INFO;
struct _PERF_INSTANCE_DEFINITION;
struct _PRINTER_NOTIFY_INFO_DATA;
struct _REPARSE_GUID_DATA_BUFFER;
struct _SERVICE_FAILURE_ACTIONSA;
struct _SERVICE_FAILURE_ACTIONSW;
struct _SID_IDENTIFIER_AUTHORITY;
struct tagEMRCREATEBRUSHINDIRECT;
struct tagMCI_ANIM_WINDOW_PARMSA;
struct tagMCI_ANIM_WINDOW_PARMSW;
struct tagMCI_OVLY_WINDOW_PARMSA;
struct tagMCI_OVLY_WINDOW_PARMSW;
struct IInternetSecurityManager;
struct IInternetSecurityMgrSite;
struct IInternetZoneManagerVtbl;
struct IPrintDialogCallbackVtbl;
struct IPrintDialogServicesVtbl;
struct IXMLDOMCharacterDataVtbl;
struct XMLDOMDocumentEventsVtbl;
struct _CERT_ACCESS_DESCRIPTION;
struct _CERT_FORTEZZA_DATA_PROP;
struct _CERT_X942_DH_PARAMETERS;
struct _CHANGER_EXCHANGE_MEDIUM;
struct _CMSG_CMS_RECIPIENT_INFO;
struct _CMSG_HASHED_ENCODE_INFO;
struct _CMSG_SIGNED_ENCODE_INFO;
struct _CMSG_SIGNER_ENCODE_INFO;
struct _CRYPT_HASH_MESSAGE_PARA;
struct _CRYPT_SIGN_MESSAGE_PARA;
struct _CTL_VERIFY_USAGE_STATUS;
struct _EXIT_PROCESS_DEBUG_INFO;
struct _FILE_NOTIFY_INFORMATION;
struct _HTTPSPolicyCallbackData;
struct _IMAGE_IMPORT_DESCRIPTOR;
struct _IMAGE_OPTIONAL_HEADER64;
struct _ImageArchitectureHeader;
struct _PERF_COUNTER_DEFINITION;
struct _STORAGE_PREDICT_FAILURE;
struct _SYSTEM_ALARM_OBJECT_ACE;
struct _SYSTEM_AUDIT_OBJECT_ACE;
struct tagEMRSCALEVIEWPORTEXTEX;
struct tagEMRSETCOLORADJUSTMENT;
struct tagMCI_ANIM_UPDATE_PARMS;
struct tagMCI_WAVE_DELETE_PARMS;
struct tagPIXELFORMATDESCRIPTOR;
struct DOMFreeThreadedDocument;
struct IBindStatusCallbackVtbl;
struct IDummyHICONIncluderVtbl;
struct IEnumSTATPROPSETSTGVtbl;
struct IExternalConnectionVtbl;
struct IForegroundTransferVtbl;
struct IOleInPlaceActiveObject;
struct IOleInPlaceUIWindowVtbl;
struct IPropertySetStorageVtbl;
struct IRunningObjectTableVtbl;
struct IThumbnailExtractorVtbl;
struct IWindowForBindingUIVtbl;
struct IXMLDOMCDATASectionVtbl;
struct IXMLDOMDocumentFragment;
struct IXMLDOMDocumentTypeVtbl;
struct IXMLDOMNamedNodeMapVtbl;
struct SERVICE_STATUS_HANDLE__;
struct _CERT_CHAIN_POLICY_PARA;
struct _CERT_REVOCATION_STATUS;
struct _CERT_SYSTEM_STORE_INFO;
struct _CHANGER_ELEMENT_STATUS;
struct _CMSG_CTRL_DECRYPT_PARA;
struct _CRYPT_PRIVATE_KEY_INFO;
struct _CRYPT_SMIME_CAPABILITY;
struct _DISK_CACHE_INFORMATION;
struct _DISK_CONTROLLER_NUMBER;
struct _ENCRYPTION_CERTIFICATE;
struct _EXIT_THREAD_DEBUG_INFO;
struct _FILE_SET_SPARSE_BUFFER;
struct _GET_CHANGER_PARAMETERS;
struct _IMAGE_EXPORT_DIRECTORY;
struct _IMAGE_FUNCTION_ENTRY64;
struct _ImageArchitectureEntry;
struct _MESSAGE_RESOURCE_BLOCK;
struct _MESSAGE_RESOURCE_ENTRY;
struct _PRINTER_NOTIFY_OPTIONS;
struct _PRINTPROCESSOR_INFO_1A;
struct _PRINTPROCESSOR_INFO_1W;
struct _REMSECURITY_ATTRIBUTES;
struct _SERVICE_STATUS_PROCESS;
struct _SE_IMPERSONATION_STATE;
struct _XMIT_ROUTINE_QUINTUPLE;
struct _thread_adoption_data_s;
struct tagEMRCREATECOLORSPACEW;
struct tagEMRSETDIBITSTODEVICE;
struct tagEMRSETPALETTEENTRIES;
struct tagEMRSETWORLDTRANSFORM;
struct tagLAYERPLANEDESCRIPTOR;
struct tagMCI_ANIM_OPEN_PARMSA;
struct tagMCI_ANIM_OPEN_PARMSW;
struct tagMCI_GETDEVCAPS_PARMS;
struct tagMCI_OVLY_LOAD_PARMSA;
struct tagMCI_OVLY_LOAD_PARMSW;
struct tagMCI_OVLY_OPEN_PARMSA;
struct tagMCI_OVLY_OPEN_PARMSW;
struct tagMCI_OVLY_SAVE_PARMSA;
struct tagMCI_OVLY_SAVE_PARMSW;
struct tagMCI_VD_ESCAPE_PARMSA;
struct tagMCI_VD_ESCAPE_PARMSW;
struct tagMCI_WAVE_OPEN_PARMSA;
struct tagMCI_WAVE_OPEN_PARMSW;
struct IAsyncRpcChannelBuffer;
struct ICancelMethodCallsVtbl;
struct IEncodingFilterFactory;
struct IReleaseMarshalBuffers;
struct IRpcChannelBuffer2Vtbl;
struct IRpcChannelBuffer3Vtbl;
struct ISynchronizeHandleVtbl;
struct IXMLDOMEntityReference;
struct _CRYPT_SEQUENCE_OF_ANY;
struct _CRYPT_X942_OTHER_INFO;
struct _CTL_FIND_SUBJECT_PARA;
struct _CTL_VERIFY_USAGE_PARA;
struct _FILESYSTEM_STATISTICS;
struct _IMAGE_BASE_RELOCATION;
struct _IMAGE_DEBUG_DIRECTORY;
struct _IMAGE_OPTIONAL_HEADER;
struct _IMAGE_TLS_DIRECTORY32;
struct _IMAGE_TLS_DIRECTORY64;
struct _MESSAGE_RESOURCE_DATA;
struct _NDR_USER_MARSHAL_INFO;
struct _PARTITION_INFORMATION;
struct _PREVENT_MEDIA_REMOVAL;
struct _QUERY_SERVICE_CONFIGA;
struct _QUERY_SERVICE_CONFIGW;
struct _RPC_SYNTAX_IDENTIFIER;
struct _STORAGE_DEVICE_NUMBER;
struct _TAPE_CREATE_PARTITION;
struct _TIME_ZONE_INFORMATION;
struct _UNLOAD_DLL_DEBUG_INFO;
struct __GENERIC_BINDING_INFO;
struct _tagPROTOCOLFILTERDATA;
struct tagCOLORCORRECTPALETTE;
struct tagDDEML_MSG_HOOK_DATA;
struct tagEMRCREATECOLORSPACE;
struct tagEMREXTSELECTCLIPRGN;
struct tagEMRGLSBOUNDEDRECORD;
struct tagEMRSETVIEWPORTEXTEX;
struct tagEMRSETVIEWPORTORGEX;
struct tagMCI_ANIM_PLAY_PARMS;
struct tagMCI_ANIM_RECT_PARMS;
struct tagMCI_ANIM_STEP_PARMS;
struct tagMCI_OVLY_RECT_PARMS;
struct AsyncIAdviseSink2Vtbl;
struct IDataAdviseHolderVtbl;
struct IDirectWriterLockVtbl;
struct IGlobalInterfaceTable;
struct IInternetBindInfoVtbl;
struct IInternetPriorityVtbl;
struct IInternetProtocolInfo;
struct IInternetProtocolRoot;
struct IInternetProtocolSink;
struct IInternetProtocolVtbl;
struct IInternetThreadSwitch;
struct IOleInPlaceObjectVtbl;
struct IOleItemContainerVtbl;
struct IParseDisplayNameVtbl;
struct IRpcChannelBufferVtbl;
struct ISequentialStreamVtbl;
struct ISupportErrorInfoVtbl;
struct ISynchronizeContainer;
struct ISynchronizeEventVtbl;
struct ISynchronizeMutexVtbl;
struct ITimeAndNoticeControl;
struct ITypeChangeEventsVtbl;
struct IXMLDOMImplementation;
struct IXMLDOMParseErrorVtbl;
struct IXMLElementCollection;
struct _ACL_SIZE_INFORMATION;
struct _CERT_PUBLIC_KEY_INFO;
struct _CERT_REVOCATION_INFO;
struct _CERT_REVOCATION_PARA;
struct _CERT_STORE_PROV_INFO;
struct _CERT_TRUST_LIST_INFO;
struct _CHANGER_ELEMENT_LIST;
struct _CHANGER_PRODUCT_DATA;
struct _CHANGER_SET_POSITION;
struct _CMSG_CMS_SIGNER_INFO;
struct _CRL_DIST_POINTS_INFO;
struct _CRYPT_KEY_PROV_PARAM;
struct _CRYPT_OID_FUNC_ENTRY;
struct _CTL_ANY_SUBJECT_INFO;
struct _ENUM_SERVICE_STATUSA;
struct _ENUM_SERVICE_STATUSW;
struct _EXCEPTION_DEBUG_INFO;
struct _FILE_OBJECTID_BUFFER;
union _FILE_SEGMENT_ELEMENT;
struct _FORMAT_EX_PARAMETERS;
struct _FULL_PTR_XLAT_TABLES;
struct _IMAGE_DATA_DIRECTORY;
struct _IMAGE_FUNCTION_ENTRY;
struct _IMAGE_IMPORT_BY_NAME;
struct _IMAGE_SECTION_HEADER;
struct _NETCONNECTINFOSTRUCT;
struct _PRINTER_ENUM_VALUESA;
struct _PRINTER_ENUM_VALUESW;
struct _RPC_CLIENT_INTERFACE;
struct _RPC_PROTSEQ_ENDPOINT;
struct _RPC_SERVER_INTERFACE;
struct _RTL_CRITICAL_SECTION;
struct _SERVICE_DESCRIPTIONA;
struct _SERVICE_DESCRIPTIONW;
struct _SERVICE_TABLE_ENTRYA;
struct _SERVICE_TABLE_ENTRYW;
struct _SHCREATEPROCESSINFOW;
struct _UNIVERSAL_NAME_INFOA;
struct _UNIVERSAL_NAME_INFOW;
struct _WSAServiceClassInfoA;
struct _WSAServiceClassInfoW;
struct _wireSAFEARR_DISPATCH;
struct tagCLIENTCREATESTRUCT;
struct tagCOLORMATCHTOTARGET;
struct tagEMRCREATEMONOBRUSH;
struct tagEMREXCLUDECLIPRECT;
struct tagEMRSETARCDIRECTION;
struct tagHARDWAREHOOKSTRUCT;
struct tagMCI_SYSINFO_PARMSA;
struct tagMCI_SYSINFO_PARMSW;
struct tagMCI_WAVE_SET_PARMS;
struct tagMIXERLINECONTROLSA;
struct tagMIXERLINECONTROLSW;
struct tagOleMenuGroupWidths;
struct AsyncIAdviseSinkVtbl;
struct AsyncIPipeDoubleVtbl;
struct ICatalogFileInfoVtbl;
struct ICreateErrorInfoVtbl;
struct ICreateTypeInfo2Vtbl;
struct IEnumSTATPROPSTGVtbl;
struct IInternalUnknownVtbl;
struct IInternetSessionVtbl;
struct IInternetZoneManager;
struct IMPORT_OBJECT_HEADER;
struct IOleAdviseHolderVtbl;
struct IOleCacheControlVtbl;
struct IOleInPlaceFrameVtbl;
struct IPSFactoryBufferVtbl;
struct IPrintDialogCallback;
struct IPrintDialogServices;
struct IPropertyStorageVtbl;
struct IServiceProviderVtbl;
struct IWinInetHttpInfoVtbl;
struct IXMLDOMAttributeVtbl;
struct IXMLDOMCharacterData;
struct SChannelHookCallInfo;
struct XMLDOMDocumentEvents;
struct _CERT_ALT_NAME_ENTRY;
struct _CERT_DSS_PARAMETERS;
struct _CHANGER_MOVE_MEDIUM;
struct _CONSOLE_CURSOR_INFO;
struct _CRL_DIST_POINT_NAME;
struct _CRL_REVOCATION_INFO;
struct _CRYPT_KEY_PROV_INFO;
struct _CTL_FIND_USAGE_PARA;
struct _DISK_GROW_PARTITION;
struct _ENCRYPTED_DATA_INFO;
struct _LOAD_DLL_DEBUG_INFO;
struct _LUID_AND_ATTRIBUTES;
struct _PRINTER_NOTIFY_INFO;
struct _PROCESS_INFORMATION;
struct _PSFEATURE_CUSTPAPER;
struct _RPC_PROTSEQ_VECTORA;
struct _RPC_PROTSEQ_VECTORW;
struct _RPC_TRANSFER_SYNTAX;
struct _SECURITY_ATTRIBUTES;
struct _SECURITY_DESCRIPTOR;
struct _SOCKET_ADDRESS_LIST;
struct _SYSTEM_POWER_STATUS;
struct _TAPE_GET_STATISTICS;
struct _TOKEN_PRIMARY_GROUP;
struct _VOLUME_DISK_EXTENTS;
struct _tagHIT_LOGGING_INFO;
struct _wireSAFEARRAY_UNION;
struct _wireSAFEARR_BRECORD;
struct _wireSAFEARR_HAVEIID;
struct _wireSAFEARR_UNKNOWN;
struct _wireSAFEARR_VARIANT;
struct tMIXERCONTROLDETAILS;
struct tagCBTACTIVATESTRUCT;
struct tagCLEANLOCALSTORAGE;
struct tagCOMPAREITEMSTRUCT;
struct tagEMRPOLYPOLYLINE16;
struct tagEMRSELECTCLIPPATH;
struct tagEMRSETMAPPERFLAGS;
struct tagEMRTRANSPARENTBLT;
struct tagMCI_GENERIC_PARMS;
struct tagMCI_SEQ_SET_PARMS;
struct tagMCI_VD_PLAY_PARMS;
struct tagMCI_VD_STEP_PARMS;
struct tagMEASUREITEMSTRUCT;
struct tagMENUGETOBJECTINFO;
struct tagMOUSEHOOKSTRUCTEX;
struct tagNCCALCSIZE_PARAMS;
struct tagNONCLIENTMETRICSA;
struct tagNONCLIENTMETRICSW;
struct IBindStatusCallback;
struct IClassActivatorVtbl;
struct IClientSecurityVtbl;
struct ICreateTypeInfoVtbl;
struct ICreateTypeLib2Vtbl;
struct IDummyHICONIncluder;
struct IEnumSTATPROPSETSTG;
struct IExternalConnection;
struct IForegroundTransfer;
struct IOleInPlaceSiteVtbl;
struct IOleInPlaceUIWindow;
struct IPersistMonikerVtbl;
struct IPersistStorageVtbl;
struct IProgressNotifyVtbl;
struct IPropertySetStorage;
struct IRpcProxyBufferVtbl;
struct IRunnableObjectVtbl;
struct IRunningObjectTable;
struct IServerSecurityVtbl;
struct IStdMarshalInfoVtbl;
struct IThumbnailExtractor;
struct IWindowForBindingUI;
struct IXMLDOMCDATASection;
struct IXMLDOMDocumentType;
struct IXMLDOMDocumentVtbl;
struct IXMLDOMNamedNodeMap;
struct IXMLDOMNodeListVtbl;
struct IXMLDOMNotationVtbl;
struct IXMLHttpRequestVtbl;
struct _ACCESS_ALLOWED_ACE;
struct _CERT_ALT_NAME_INFO;
struct _CERT_CHAIN_CONTEXT;
struct _CERT_CHAIN_ELEMENT;
struct _CERT_DH_PARAMETERS;
struct _CERT_POLICIES_INFO;
struct _CHANGER_SET_ACCESS;
union _CLIENT_CALL_RETURN;
struct _COMM_FAULT_OFFSETS;
struct _CRYPT_CONTENT_INFO;
struct _CRYPT_CSP_PROVIDER;
struct _EXCEPTION_POINTERS;
struct _EXCEPTION_RECORD32;
struct _EXCEPTION_RECORD64;
struct _FLOATING_SAVE_AREA;
struct _FOCUS_EVENT_RECORD;
struct _GETVERSIONINPARAMS;
struct _IMAGE_NT_HEADERS64;
struct _IMAGE_THUNK_DATA32;
struct _IMAGE_THUNK_DATA64;
struct _MALLOC_FREE_STRUCT;
struct _MIDL_FORMAT_STRING;
struct _MOUSE_EVENT_RECORD;
struct _OUTLINETEXTMETRICA;
struct _OUTLINETEXTMETRICW;
struct _PERF_COUNTER_BLOCK;
struct _PROCESS_HEAP_ENTRY;
struct _RPC_BINDING_VECTOR;
struct _SID_AND_ATTRIBUTES;
struct _TOKEN_DEFAULT_DACL;
struct _VERIFY_INFORMATION;
struct _WSANAMESPACE_INFOA;
struct _WSANAMESPACE_INFOW;
struct _remoteMETAFILEPICT;
struct _userFLAG_STGMEDIUM;
struct midiproptimediv_tag;
struct midistrmbuffver_tag;
struct tagBITMAPCOREHEADER;
struct tagBITMAPFILEHEADER;
struct tagBITMAPINFOHEADER;
struct tagDELETEITEMSTRUCT;
struct tagEMRCREATEPALETTE;
struct tagEMROFFSETCLIPRGN;
struct tagEMRRESIZEPALETTE;
struct tagEMRSELECTPALETTE;
struct tagEMRSETCOLORSPACE;
struct tagEMRSETICMPROFILE;
struct tagEMRSETMITERLIMIT;
struct tagEMRSTRETCHDIBITS;
struct tagENUMLOGFONTEXDVA;
struct tagENUMLOGFONTEXDVW;
struct tagHW_PROFILE_INFOA;
struct tagHW_PROFILE_INFOW;
struct tagIMEMENUITEMINFOA;
struct tagIMEMENUITEMINFOW;
struct tagMCI_RECORD_PARMS;
struct tagMCI_STATUS_PARMS;
struct tagMDICREATESTRUCTA;
struct tagMDICREATESTRUCTW;
struct tagMINIMIZEDMETRICS;
struct tagNEWTEXTMETRICEXA;
struct tagNEWTEXTMETRICEXW;
struct tagOBJECTDESCRIPTOR;
struct tagRemHMETAFILEPICT;
struct tagVS_FIXEDFILEINFO;
struct ANON_OBJECT_HEADER;
struct AsyncIPipeByteVtbl;
struct AsyncIPipeLongVtbl;
struct ICancelMethodCalls;
struct ICreateTypeLibVtbl;
struct IEnumFORMATETCVtbl;
struct IFillLockBytesVtbl;
struct IHttpNegotiateVtbl;
struct ILayoutStorageVtbl;
struct IMessageFilterVtbl;
struct IOleClientSiteVtbl;
struct IOplockStorageVtbl;
struct IPersistStreamVtbl;
struct IRpcChannelBuffer2;
struct IRpcChannelBuffer3;
struct IRpcStubBufferVtbl;
struct ISynchronizeHandle;
struct IXMLDOMCommentVtbl;
struct IXMLDOMElementVtbl;
struct IXMLDSOControlVtbl;
struct _ACCESS_DENIED_ACE;
struct _CERT_REQUEST_INFO;
struct _CERT_SIMPLE_CHAIN;
struct _CERT_TRUST_STATUS;
struct _CMSG_RC2_AUX_INFO;
struct _CMSG_RC4_AUX_INFO;
struct _CONNECTDLGSTRUCTA;
struct _CONNECTDLGSTRUCTW;
struct _CRYPT_CREDENTIALS;
struct _CRYPT_DECODE_PARA;
struct _CRYPT_ENCODE_PARA;
struct _CRYPT_OBJID_TABLE;
struct _DATATYPES_INFO_1A;
struct _DATATYPES_INFO_1W;
struct _DEVICE_MEDIA_INFO;
struct _ENCRYPTION_BUFFER;
struct _FLAGGED_BYTE_BLOB;
struct _FLAGGED_WORD_BLOB;
struct _FORMAT_PARAMETERS;
struct _GLYPHMETRICSFLOAT;
struct _GRADIENT_TRIANGLE;
struct _IMAGE_FILE_HEADER;
struct _IMAGE_ROM_HEADERS;
struct _MENU_EVENT_RECORD;
struct _MIDL_SERVER_INFO_;
struct _MIDL_STUB_MESSAGE;
struct _PRINTER_DEFAULTSA;
struct _PRINTER_DEFAULTSW;
struct _RASTERIZER_STATUS;
struct _REMOTE_NAME_INFOA;
struct _REMOTE_NAME_INFOW;
struct _SHELLEXECUTEINFOA;
struct _SHELLEXECUTEINFOW;
struct _SINGLE_LIST_ENTRY;
struct _TAPE_GET_POSITION;
struct _TAPE_SET_POSITION;
struct _WSAPROTOCOL_INFOA;
struct _WSAPROTOCOL_INFOW;
struct _userHMETAFILEPICT;
struct tagCOLORADJUSTMENT;
struct tagCOMPOSITIONFORM;
struct tagEMREXTCREATEPEN;
struct tagEMREXTFLOODFILL;
struct tagEMRGRADIENTFILL;
struct tagEMRPOLYPOLYLINE;
struct tagEMRPOLYTEXTOUTA;
struct tagEMRSELECTOBJECT;
struct tagEMRSETTEXTCOLOR;
struct tagENUMTEXTMETRICA;
struct tagENUMTEXTMETRICW;
struct tagIMECHARPOSITION;
struct tagKBDLLHOOKSTRUCT;
struct tagLOCALESIGNATURE;
struct tagMCI_BREAK_PARMS;
struct tagMCI_INFO_PARMSA;
struct tagMCI_INFO_PARMSW;
struct tagMCI_LOAD_PARMSA;
struct tagMCI_LOAD_PARMSW;
struct tagMCI_OPEN_PARMSA;
struct tagMCI_OPEN_PARMSW;
struct tagMCI_SAVE_PARMSA;
struct tagMCI_SAVE_PARMSW;
struct tagMOUSEHOOKSTRUCT;
struct tagRECONVERTSTRING;
struct tagRemHENHMETAFILE;
struct tagTRACKMOUSEEVENT;
struct tagTTPOLYGONHEADER;
struct tagUSEROBJECTFLAGS;
struct tagVersionedStream;
struct tagWINDOWPLACEMENT;
struct AsyncIAdviseSink2;
struct AsyncIMultiQIVtbl;
struct AsyncIUnknownVtbl;
struct IAsyncManagerVtbl;
struct IAuthenticateVtbl;
struct IBindProtocolVtbl;
struct IBlockingLockVtbl;
struct IClassFactoryVtbl;
struct IDataAdviseHolder;
struct IDirectWriterLock;
struct IEnumSTATDATAVtbl;
struct IHttpSecurityVtbl;
struct IInternetBindInfo;
struct IInternetPriority;
struct IInternetProtocol;
struct IOleContainerVtbl;
struct IOleInPlaceObject;
struct IOleItemContainer;
struct IParseDisplayName;
struct IRpcChannelBuffer;
struct ISequentialStream;
struct ISupportErrorInfo;
struct ISynchronizeEvent;
struct ISynchronizeMutex;
struct ITypeChangeEvents;
struct IWaitMultipleVtbl;
struct IXMLAttributeVtbl;
struct IXMLDOMEntityVtbl;
struct IXMLDOMParseError;
struct IXMLDocument2Vtbl;
struct _CERTIFICATE_BLOB;
struct _CERT_KEY_CONTEXT;
struct _CERT_POLICY_INFO;
struct _CERT_USAGE_MATCH;
struct _CMSG_SIGNER_INFO;
struct _CMSG_STREAM_INFO;
struct _CRYPT_ATTRIBUTES;
struct _CRYPT_BLOB_ARRAY;
struct _DISK_PERFORMANCE;
struct _EVENTSFORLOGFILE;
struct _EXCEPTION_RECORD;
struct _FIND_NAME_BUFFER;
struct _FIND_NAME_HEADER;
struct _HISTOGRAM_BUCKET;
union _IMAGE_AUX_SYMBOL;
struct _IMAGE_DEBUG_MISC;
struct _IMAGE_DOS_HEADER;
struct _IMAGE_LINENUMBER;
struct _IMAGE_NT_HEADERS;
struct _IMAGE_OS2_HEADER;
struct _IMAGE_RELOCATION;
struct _IMAGE_VXD_HEADER;
struct _KEY_EVENT_RECORD;
struct _KEY_TYPE_SUBTYPE;
struct _OBJECT_TYPE_LIST;
struct _OSVERSIONINFOEXA;
struct _OSVERSIONINFOEXW;
struct _PERF_OBJECT_TYPE;
struct _PROPSHEETHEADERA;
struct _PROPSHEETHEADERW;
struct _PROVIDOR_INFO_1A;
struct _PROVIDOR_INFO_1W;
struct _PROVIDOR_INFO_2A;
struct _PROVIDOR_INFO_2W;
struct _PROV_ENUMALGS_EX;
struct _PSFEATURE_OUTPUT;
struct _QOS_SHAPING_RATE;
struct _QualityOfService;
struct _RPC_SECURITY_QOS;
struct _SCARD_IO_REQUEST;
struct _SENDCMDOUTPARAMS;
struct _SYSTEM_ALARM_ACE;
struct _SYSTEM_AUDIT_ACE;
struct _TAPE_WRITE_MARKS;
struct _TOKEN_PRIVILEGES;
struct _TOKEN_STATISTICS;
struct _WIN32_FIND_DATAA;
struct _WIN32_FIND_DATAW;
struct _WSANETWORKEVENTS;
struct _WSAPROTOCOLCHAIN;
struct _userHENHMETAFILE;
struct _wireSAFEARR_BSTR;
struct midiproptempo_tag;
struct pcmwaveformat_tag;
struct tagBITMAPCOREINFO;
struct tagCBT_CREATEWNDA;
struct tagCBT_CREATEWNDW;
struct tagCOPYDATASTRUCT;
struct tagDRAWITEMSTRUCT;
struct tagDRAWTEXTPARAMS;
struct tagDVTARGETDEVICE;
struct tagEMREXTTEXTOUTA;
struct tagEMRNAMEDESCAPE;
struct tagEMRPIXELFORMAT;
struct tagENUMLOGFONTEXA;
struct tagENUMLOGFONTEXW;
struct tagLOGCOLORSPACEA;
struct tagLOGCOLORSPACEW;
struct tagMCI_PLAY_PARMS;
struct tagMCI_SEEK_PARMS;
struct tagMONITORINFOEXA;
struct tagMONITORINFOEXW;
struct tagMOUSEMOVEPOINT;
struct tagMSLLHOOKSTRUCT;
struct tagNEWTEXTMETRICA;
struct tagNEWTEXTMETRICW;
struct tagPRINTPAGERANGE;
struct tagSAFEARRAYBOUND;
struct tagSTATPROPSETSTG;
struct AsyncIAdviseSink;
struct AsyncIPipeDouble;
struct IAdviseSink2Vtbl;
struct ICallFactoryVtbl;
struct ICatalogFileInfo;
struct IChannelHookVtbl;
struct ICodeInstallVtbl;
struct ICreateErrorInfo;
struct ICreateTypeInfo2;
struct IEnumMonikerVtbl;
struct IEnumOLEVERBVtbl;
struct IEnumSTATPROPSTG;
struct IEnumSTATSTGVtbl;
struct IEnumUnknownVtbl;
struct IEnumVARIANTVtbl;
struct IInternalUnknown;
struct IInternetSession;
struct IOleAdviseHolder;
struct IOleCacheControl;
struct IOleInPlaceFrame;
struct IPSFactoryBuffer;
struct IPersistFileVtbl;
struct IPropertyBagVtbl;
struct IPropertyStorage;
struct IRootStorageVtbl;
struct IServiceProvider;
struct ISoftDistExtVtbl;
struct ISynchronizeVtbl;
struct ITypeFactoryVtbl;
struct ITypeMarshalVtbl;
struct IViewObject2Vtbl;
struct IWinInetHttpInfo;
struct IWinInetInfoVtbl;
struct IXMLDOMAttribute;
struct IXMLDocumentVtbl;
struct IXMLElement2Vtbl;
struct _CERT_CHAIN_PARA;
struct _CERT_EXTENSIONS;
struct _CERT_NAME_VALUE;
struct _CERT_OTHER_NAME;
struct _CHANGER_ELEMENT;
struct _CMS_DH_KEY_INFO;
struct _CRYPT_ATTRIBUTE;
struct _CRYPT_HASH_INFO;
struct _CRYPT_URL_ARRAY;
struct _CTL_USAGE_MATCH;
struct _DISPLAY_DEVICEA;
struct _DISPLAY_DEVICEW;
struct _GENERIC_MAPPING;
struct _GET_MEDIA_TYPES;
struct _MONITOR_INFO_1A;
struct _MONITOR_INFO_1W;
struct _MONITOR_INFO_2A;
struct _MONITOR_INFO_2W;
struct _NOTIFYICONDATAA;
struct _NOTIFYICONDATAW;
struct _NTFS_STATISTICS;
struct _PACKEDEVENTINFO;
struct _PATHNAME_BUFFER;
struct _PERF_DATA_BLOCK;
struct _PRINTER_INFO_1A;
struct _PRINTER_INFO_1W;
struct _PRINTER_INFO_2A;
struct _PRINTER_INFO_2W;
struct _PRINTER_INFO_4A;
struct _PRINTER_INFO_4W;
struct _PRINTER_INFO_5A;
struct _PRINTER_INFO_5W;
struct _PRINTER_INFO_7A;
struct _PRINTER_INFO_7W;
struct _PRINTER_INFO_8A;
struct _PRINTER_INFO_8W;
struct _PRINTER_INFO_9A;
struct _PRINTER_INFO_9W;
struct _REASSIGN_BLOCKS;
struct _RPC_ASYNC_STATE;
struct _RemotableHandle;
struct _SENDCMDINPARAMS;
struct _SHFILEOPSTRUCTA;
struct _SHFILEOPSTRUCTW;
struct _TAPE_STATISTICS;
struct _USER_MARSHAL_CB;
struct _VIDEOPARAMETERS;
struct _VTableProvStruc;
struct _WIN32_STREAM_ID;
struct _WSANSClassInfoA;
struct _WSANSClassInfoW;
struct _tagCODEBASEHOLD;
struct _tagPROTOCOLDATA;
struct _tagSOFTDISTINFO;
struct tagACCESSTIMEOUT;
struct tagANIMATIONINFO;
struct tagCANDIDATEFORM;
struct tagCANDIDATELIST;
struct tagCAPROPVARIANT;
struct tagCREATESTRUCTA;
struct tagCREATESTRUCTW;
struct tagDEBUGHOOKINFO;
struct tagDRVCONFIGINFO;
struct tagEMRALPHABLEND;
struct tagEMRGDICOMMENT;
struct tagEMRPOLYDRAW16;
struct tagEMRPOLYLINE16;
struct tagEMRSTRETCHBLT;
struct tagENHMETAHEADER;
struct tagENHMETARECORD;
struct tagFONTSIGNATURE;
struct tagGUITHREADINFO;
struct tagHARDWAREINPUT;
struct tagHIGHCONTRASTA;
struct tagHIGHCONTRASTW;
struct tagINTERFACEDATA;
struct tagINTERFACEINFO;
struct tagLASTINPUTINFO;
struct tagMCI_SET_PARMS;
struct tagMENUITEMINFOA;
struct tagMENUITEMINFOW;
struct tagMIXERCONTROLA;
struct tagMIXERCONTROLW;
struct tagMONCONVSTRUCT;
struct tagMONHSZSTRUCTA;
struct tagMONHSZSTRUCTW;
struct tagMONLINKSTRUCT;
struct tagMSGBOXPARAMSA;
struct tagMSGBOXPARAMSW;
struct tagMULTIKEYHELPA;
struct tagMULTIKEYHELPW;
struct tagREGISTERWORDA;
struct tagREGISTERWORDW;
struct tagRPCOLEMESSAGE;
struct tagSCROLLBARINFO;
struct tagStorageLayout;
struct DRVCONFIGINFOEX;
struct HWINEVENTHOOK__;
struct IAdviseSinkVtbl;
struct IClassActivator;
struct IClientSecurity;
struct ICreateTypeInfo;
struct ICreateTypeLib2;
struct IDataFilterVtbl;
struct IDataObjectVtbl;
struct IDropSourceVtbl;
struct IDropTargetVtbl;
struct IEnumStringVtbl;
struct IOleInPlaceSite;
struct IPersistMoniker;
struct IPersistStorage;
struct IPipeDoubleVtbl;
struct IProgressNotify;
struct IRecordInfoVtbl;
struct IRpcOptionsVtbl;
struct IRpcProxyBuffer;
struct IRunnableObject;
struct IServerSecurity;
struct IStdMarshalInfo;
struct IViewObjectVtbl;
struct IXMLDOMDocument;
struct IXMLDOMNodeList;
struct IXMLDOMNodeVtbl;
struct IXMLDOMNotation;
struct IXMLDOMTextVtbl;
struct IXMLElementVtbl;
struct IXMLHttpRequest;
struct IXTLRuntimeVtbl;
struct _ADAPTER_STATUS;
struct _ADDJOB_INFO_1A;
struct _ADDJOB_INFO_1W;
struct _CERT_EXTENSION;
struct _CERT_NAME_INFO;
struct _CERT_POLICY_ID;
struct _COAUTHIDENTITY;
struct _CRL_DIST_POINT;
struct _CRYPTOAPI_BLOB;
struct _CRYPT_BIT_BLOB;
struct _CRYPT_OID_INFO;
struct _CRYPT_URL_INFO;
struct _DISCDLGSTRUCTA;
struct _DISCDLGSTRUCTW;
struct _DISK_HISTOGRAM;
struct _DRIVER_INFO_1A;
struct _DRIVER_INFO_1W;
struct _DRIVER_INFO_2A;
struct _DRIVER_INFO_2W;
struct _DRIVER_INFO_3A;
struct _DRIVER_INFO_3W;
struct _DRIVER_INFO_4A;
struct _DRIVER_INFO_4W;
struct _DRIVER_INFO_5A;
struct _DRIVER_INFO_5W;
struct _DRIVER_INFO_6A;
struct _DRIVER_INFO_6W;
struct _EVENTLOGRECORD;
struct _FAT_STATISTICS;
struct _FLAG_STGMEDIUM;
struct _HYPER_SIZEDARR;
struct _MEMORYSTATUSEX;
struct _MIDL_STUB_DESC;
struct _OSVERSIONINFOA;
struct _OSVERSIONINFOW;
struct _PRINTER_INFO_3;
struct _PRINTER_INFO_6;
struct _PROPSHEETPAGEA;
struct _PROPSHEETPAGEW;
struct _PUBLICKEYSTRUC;
struct _SCONTEXT_QUEUE;
struct _SERVICE_STATUS;
struct _SESSION_BUFFER;
struct _SESSION_HEADER;
struct _SHNAMEMAPPINGA;
struct _SHNAMEMAPPINGW;
struct _SHORT_SIZEDARR;
struct _SOCKET_ADDRESS;
union _ULARGE_INTEGER;
struct _ZONEATTRIBUTES;
struct _tagRemBINDINFO;
struct _userCLIPFORMAT;
struct _wfinddatai64_t;
struct tagCHOOSECOLORA;
struct tagCHOOSECOLORW;
struct tagCOMBOBOXINFO;
struct tagCUSTDATAITEM;
struct tagCWPRETSTRUCT;
struct tagDESIGNVECTOR;
struct tagEMRCREATEPEN;
struct tagEMREXTESCAPE;
struct tagEMRGLSRECORD;
struct tagEMRINVERTRGN;
struct tagEMRRESTOREDC;
struct tagEMRROUNDRECT;
struct tagEMRSETPIXELV;
struct tagENUMLOGFONTA;
struct tagENUMLOGFONTW;
struct tagFINDREPLACEA;
struct tagFINDREPLACEW;
struct tagGCP_RESULTSA;
struct tagGCP_RESULTSW;
struct tagHELPWININFOA;
struct tagHELPWININFOW;
struct tagICEXYZTRIPLE;
struct tagICONMETRICSA;
struct tagICONMETRICSW;
struct tagMETAFILEPICT;
struct tagMIDIOUTCAPSA;
struct tagMIDIOUTCAPSW;
struct tagMONERRSTRUCT;
struct tagMONMSGSTRUCT;
struct tagPALETTEENTRY;
struct tagQUERYCONTEXT;
struct tagRemFORMATETC;
struct tagRemSTGMEDIUM;
struct tagSOUNDSENTRYA;
struct tagSOUNDSENTRYW;
struct tagTITLEBARINFO;
struct tagWAVEOUTCAPSA;
struct tagWAVEOUTCAPSW;
struct AsyncIPipeByte;
struct AsyncIPipeLong;
struct HENHMETAFILE__;
struct ICreateTypeLib;
struct IEnumFORMATETC;
struct IErrorInfoVtbl;
struct IFillLockBytes;
struct IHttpNegotiate;
struct ILayoutStorage;
struct ILockBytesVtbl;
struct IMallocSpyVtbl;
struct IMessageFilter;
struct IOleCache2Vtbl;
struct IOleClientSite;
struct IOleObjectVtbl;
struct IOleWindowVtbl;
struct IOplockStorage;
struct IPersistStream;
struct IRpcHelperVtbl;
struct IRpcStubBuffer;
struct ISurrogateVtbl;
struct ITypeInfo2Vtbl;
struct IXMLDOMComment;
struct IXMLDOMElement;
struct IXMLDSOControl;
struct XMLHTTPRequest;
struct _ACTION_HEADER;
struct _BLENDFUNCTION;
struct _BYTE_SIZEDARR;
struct _CERT_RDN_ATTR;
struct _DISK_GEOMETRY;
struct _EFS_HASH_BLOB;
struct _GDI_NONREMOTE;
struct _GRADIENT_RECT;
union _LARGE_INTEGER;
struct _LONG_SIZEDARR;
struct _MODEMSETTINGS;
struct _NETINFOSTRUCT;
struct _OLESTREAMVTBL;
struct _PRIVILEGE_SET;
struct _PROV_ENUMALGS;
struct _RGNDATAHEADER;
struct _SHQUERYRBINFO;
struct _TOKEN_CONTROL;
struct _WSAOVERLAPPED;
struct _finddatai64_t;
struct _tagStartParam;
struct _userHMETAFILE;
struct _userSTGMEDIUM;
struct _wireSAFEARRAY;
struct tagCHARSETINFO;
struct tagCHOOSEFONTA;
struct tagCHOOSEFONTW;
struct tagCONVCONTEXT;
struct tagCURSORSHAPE;
struct tagEMRANGLEARC;
struct tagEMRFILLPATH;
struct tagEMRFRAMERGN;
struct tagEMRPOLYDRAW;
struct tagEMRPOLYLINE;
struct tagEXTLOGFONTA;
struct tagEXTLOGFONTW;
struct tagHANDLETABLE;
struct tagKERNINGPAIR;
struct tagMDINEXTMENU;
struct tagMENUBARINFO;
struct tagMIDIINCAPSA;
struct tagMIDIINCAPSW;
struct tagMONCBSTRUCT;
struct tagMONITORINFO;
struct tagPAINTSTRUCT;
struct tagPARAMDESCEX;
struct tagPROPVARIANT;
struct tagRemHPALETTE;
struct tagSERIALKEYSA;
struct tagSERIALKEYSW;
struct tagSTATPROPSTG;
struct tagSTYLESTRUCT;
struct tagTEXTMETRICA;
struct tagTEXTMETRICW;
struct tagTTPOLYCURVE;
struct tagWAVEINCAPSA;
struct tagWAVEINCAPSW;
struct tagWNDCLASSEXA;
struct tagWNDCLASSEXW;
struct waveformat_tag;
struct AsyncIMultiQI;
struct AsyncIUnknown;
struct CONFIRMSAFETY;
struct HCOLORSPACE__;
struct IAsyncManager;
struct IAuthenticate;
struct IBindHostVtbl;
struct IBindProtocol;
struct IBlockingLock;
struct IClassFactory;
struct IContinueVtbl;
struct IDispatchVtbl;
struct IEnumSTATDATA;
struct IErrorLogVtbl;
struct IHttpSecurity;
struct IInternetVtbl;
struct IMarshal2Vtbl;
struct IOleCacheVtbl;
struct IOleContainer;
struct IPipeByteVtbl;
struct IPipeLongVtbl;
struct ITypeCompVtbl;
struct ITypeInfoVtbl;
struct ITypeLib2Vtbl;
struct IWaitMultiple;
struct IXMLAttribute;
struct IXMLDOMEntity;
struct IXMLDocument2;
struct IXMLErrorVtbl;
struct XMLDSOControl;
struct _CERT_CONTEXT;
struct _CMS_KEY_INFO;
struct _COMMTIMEOUTS;
struct _COSERVERINFO;
struct _DISK_LOGGING;
struct _DRIVERSTATUS;
struct _FORM_INFO_1A;
struct _FORM_INFO_1W;
struct _GLYPHMETRICS;
struct _IMAGE_SYMBOL;
struct _INPUT_RECORD;
struct _MEMORYSTATUS;
struct _MODEMDEVCAPS;
struct _NETRESOURCEA;
struct _NETRESOURCEW;
struct _PORT_INFO_1A;
struct _PORT_INFO_1W;
struct _PORT_INFO_2A;
struct _PORT_INFO_2W;
struct _PORT_INFO_3A;
struct _PORT_INFO_3W;
struct _PSINJECTDATA;
struct _QUOTA_LIMITS;
struct _SCHANNEL_ALG;
struct _STARTUPINFOA;
struct _STARTUPINFOW;
struct _TAPE_PREPARE;
struct _TOKEN_GROUPS;
struct _TOKEN_SOURCE;
struct _WSAQuerySetA;
struct _WSAQuerySetW;
struct _currencyfmtA;
struct _currencyfmtW;
struct _userHPALETTE;
struct joyinfoex_tag;
struct midievent_tag;
struct provider_info;
struct tWAVEFORMATEX;
struct tagALTTABINFO;
struct tagBIND_OPTS2;
struct tagBITMAPINFO;
struct tagCABSTRBLOB;
struct tagCACLIPDATA;
struct tagCAFILETIME;
struct tagCSPLATFORM;
struct tagCURSORINFO;
struct tagDIBSECTION;
struct tagDISPPARAMS;
struct tagDROPSTRUCT;
struct tagEMRELLIPSE;
struct tagEMRFILLRGN;
struct tagEMRMASKBLT;
struct tagFILTERKEYS;
struct tagKEYBDINPUT;
struct tagLOGBRUSH32;
struct tagLOGPALETTE;
struct tagMETAHEADER;
struct tagMETARECORD;
struct tagMETHODDATA;
struct tagMINMAXINFO;
struct tagMIXERCAPSA;
struct tagMIXERCAPSW;
struct tagMIXERLINEA;
struct tagMIXERLINEW;
struct tagMOUSEINPUT;
struct tagRemHBITMAP;
struct tagRemHGLOBAL;
struct tagSCROLLINFO;
struct tagSTGOPTIONS;
struct tagSTICKYKEYS;
struct tagTOGGLEKEYS;
struct tagWINDOWINFO;
struct IAdviseSink2;
struct IBindCtxVtbl;
struct IBindingVtbl;
struct ICallFactory;
struct IChannelHook;
struct ICodeInstall;
struct IEnumMoniker;
struct IEnumOLEVERB;
struct IEnumSTATSTG;
struct IEnumUnknown;
struct IEnumVARIANT;
struct IMarshalVtbl;
struct IMonikerVtbl;
struct IMultiQIVtbl;
struct IOleLinkVtbl;
struct IPersistFile;
struct IPersistVtbl;
struct IPropertyBag;
struct IROTDataVtbl;
struct IRootStorage;
struct ISoftDistExt;
struct IStorageVtbl;
struct ISynchronize;
struct ITypeFactory;
struct ITypeLibVtbl;
struct ITypeMarshal;
struct IUnknownVtbl;
struct IViewObject2;
struct IWinInetInfo;
struct IXMLDocument;
struct IXMLElement2;
struct LIST_ENTRY32;
struct LIST_ENTRY64;
struct _AFPROTOCOLS;
struct _BIN_RESULTS;
struct _CRL_CONTEXT;
struct _CSADDR_INFO;
struct _CTL_CONTEXT;
struct _DEBUG_EVENT;
struct _DISK_EXTENT;
struct _DISK_RECORD;
struct _DOC_INFO_1A;
struct _DOC_INFO_1W;
struct _DOC_INFO_2A;
struct _DOC_INFO_2W;
struct _DOC_INFO_3A;
struct _DOC_INFO_3W;
struct _DRAWPATRECT;
struct _IO_COUNTERS;
struct _JOB_INFO_1A;
struct _JOB_INFO_1W;
struct _JOB_INFO_2A;
struct _JOB_INFO_2W;
struct _NAME_BUFFER;
struct _NSS_CONTROL;
struct _OFNOTIFYEXA;
struct _OFNOTIFYEXW;
struct _PRIVKEYVER3;
struct _QOS_SD_MODE;
struct _RPC_MESSAGE;
struct _RPC_VERSION;
struct _SHFILEINFOA;
struct _SHFILEINFOW;
struct _SI_COPYFILE;
struct _SYSTEM_INFO;
struct _TOKEN_OWNER;
struct _UUID_VECTOR;
struct _devicemodeA;
struct _devicemodeW;
struct _tagBINDINFO;
struct _tagDATAINFO;
struct _userHBITMAP;
struct _userHGLOBAL;
struct _wfinddata_t;
struct _wireBRECORD;
struct _wireVARIANT;
struct tagABORTPATH;
struct tagARRAYDESC;
struct tagAXESLISTA;
struct tagAXESLISTW;
struct tagAXISINFOA;
struct tagAXISINFOW;
struct tagBIND_OPTS;
struct tagCWPSTRUCT;
struct tagEMRBITBLT;
struct tagEMRFORMAT;
struct tagEMRLINETO;
struct tagEMRPLGBLT;
struct tagEXCEPINFO;
struct tagEXTLOGPEN;
struct tagFORMATETC;
struct tagMOUSEKEYS;
struct tagPARAMDATA;
struct tagPARAMDESC;
struct tagPOLYTEXTA;
struct tagPOLYTEXTW;
struct tagRGBTRIPLE;
struct tagSAFEARRAY;
struct tagSTGMEDIUM;
struct tagSTYLEBUFA;
struct tagSTYLEBUFW;
struct tagTPMPARAMS;
struct tagWINDOWPOS;
struct tagWNDCLASSA;
struct tagWNDCLASSW;
struct timecaps_tag;
struct DOMDocument;
struct HCONVLIST__;
struct HINSTANCE__;
struct HMETAFILE__;
struct HMIDISTRM__;
struct HMIXEROBJ__;
struct IAdviseSink;
struct IDataFilter;
struct IDataObject;
struct IDropSource;
struct IDropTarget;
struct IEnumString;
struct IMallocVtbl;
struct IPipeDouble;
struct IRecordInfo;
struct IRpcOptions;
struct IStreamVtbl;
struct IUrlMonVtbl;
struct IViewObject;
struct IXMLDOMNode;
struct IXMLDOMText;
struct IXMLElement;
struct IXTLRuntime;
struct SC_HANDLE__;
struct XMLDocument;
struct _ACE_HEADER;
struct _AppBarData;
struct _CERT_CHAIN;
struct _COAUTHINFO;
struct _COMMCONFIG;
struct _DWORD_BLOB;
struct _GDI_OBJECT;
struct _JOB_INFO_3;
struct _LIST_ENTRY;
struct _OVERLAPPED;
struct _POINTFLOAT;
struct _PUBKEYVER3;
struct _RPC_POLICY;
struct _SMALL_RECT;
struct _SYSTEMTIME;
struct _TAPE_ERASE;
struct _TOKEN_USER;
struct _WSAVersion;
struct _exceptionl;
struct _finddata_t;
struct _numberfmtA;
struct _numberfmtW;
struct _userBITMAP;
struct joyinfo_tag;
struct midihdr_tag;
struct sockaddr_in;
struct tagAUXCAPSA;
struct tagAUXCAPSW;
struct tagBSTRBLOB;
struct tagCALPWSTR;
struct tagCLIPDATA;
struct tagCONVINFO;
struct tagCUSTDATA;
struct tagDEVNAMES;
struct tagELEMDESC;
struct tagEVENTMSG;
struct tagFUNCDESC;
struct tagGLYPHSET;
struct tagHELPINFO;
struct tagJOYCAPSA;
struct tagJOYCAPSW;
struct tagLOGBRUSH;
struct tagLOGFONTA;
struct tagLOGFONTW;
struct tagMENUINFO;
struct tagMULTI_QI;
struct tagPELARRAY;
struct tagPROPSPEC;
struct tagRemBRUSH;
struct tagSTATDATA;
struct tagTLIBATTR;
struct tagTYPEATTR;
struct tagTYPEDESC;
struct val_context;
struct wavehdr_tag;
struct HDDEDATA__;
struct HMIDIOUT__;
struct HMONITOR__;
struct HPALETTE__;
struct HWAVEOUT__;
struct IErrorInfo;
struct ILockBytes;
struct IMallocSpy;
struct IOleCache2;
struct IOleObject;
struct IOleWindow;
struct IRpcHelper;
struct ISurrogate;
struct ITypeInfo2;
struct _BIN_COUNT;
struct _BIN_RANGE;
struct _BYTE_BLOB;
struct _CERT_INFO;
struct _CHAR_INFO;
struct _CRL_ENTRY;
struct _CTL_ENTRY;
struct _CTL_USAGE;
struct _DRAGINFOA;
struct _DRAGINFOW;
struct _HMAC_Info;
struct _LANA_ENUM;
struct _LDT_ENTRY;
struct _OFNOTIFYA;
struct _OFNOTIFYW;
struct _OLESTREAM;
struct _PSHNOTIFY;
struct _RPC_IF_ID;
struct _RSAPUBKEY;
struct _SC_ACTION;
struct _TRIVERTEX;
struct _WORD_BLOB;
struct _cpinfoexA;
struct _cpinfoexW;
struct _xml_error;
struct mmtime_tag;
union tagBINDPTR;
struct tagCACLSID;
struct tagCALPSTR;
struct tagCASCODE;
struct tagEMRTEXT;
struct tagHSZPAIR;
struct tagIDLDESC;
struct tagOLEVERB;
struct tagPOINTFX;
struct tagRGBQUAD;
struct tagSTATSTG;
struct tagVARDESC;
struct tagVARIANT;
struct tagWCRANGE;
struct value_entA;
struct value_entW;
struct HBITMAP__;
struct HMIDIIN__;
struct HWAVEIN__;
struct HWINSTA__;
struct IBindHost;
struct IContinue;
struct IDispatch;
struct IErrorLog;
struct IInternet;
struct IMarshal2;
struct IOleCache;
struct IPipeByte;
struct IPipeLong;
struct ITypeComp;
struct ITypeInfo;
struct ITypeLib2;
struct IXMLError;
struct _ABCFLOAT;
struct _CERT_RDN;
struct _COMMPROP;
struct _CPS_URLS;
struct _CRL_INFO;
struct _CTL_INFO;
struct _DOCINFOA;
struct _DOCINFOW;
struct _FILETIME;
struct _FLOAT128;
struct _FPO_DATA;
struct _ICONINFO;
struct _MMCKINFO;
struct _MMIOINFO;
struct _OBJECTID;
struct _OFSTRUCT;
struct _PERF_BIN;
struct _RIP_INFO;
struct __jmp_buf;
struct _complexl;
struct _flowspec;
struct _heapinfo;
struct exception;
struct sockproto;
struct tagBITMAP;
struct tagCABOOL;
struct tagCABSTR;
struct tagCADATE;
struct tagCIEXYZ;
struct tagEMRARC;
struct tagEMREOF;
struct tagLOGPEN;
struct tagPANOSE;
struct tagPOINTS;
struct tagRemSNB;
struct text_info;
struct HACCEL__;
struct HBRUSH__;
struct HMIXER__;
struct IBindCtx;
struct IBinding;
struct IMarshal;
struct IMoniker;
struct IMultiQI;
struct IOleLink;
struct IPersist;
struct IROTData;
struct IStorage;
struct ITypeLib;
struct IUnknown;
struct _CERT_ID;
struct _COMSTAT;
struct _CONTEXT;
struct _DSSSEED;
struct _IDEREGS;
struct _RGNDATA;
struct _WGLSWAP;
struct heapinfo;
struct protoent;
struct sockaddr;
struct tagACCEL;
struct tagCADBL;
struct tagCAFLT;
struct tagINPUT;
struct tagNMHDR;
struct tagPDEXA;
struct tagPDEXW;
struct tagPOINT;
struct tagXFORM;
struct HCONV__;
struct HDESK__;
struct HDROP__;
struct HDRVR__;
struct HFONT__;
struct HGLRC__;
struct HHOOK__;
struct HICON__;
struct HIMCC__;
struct HMENU__;
struct HMIDI__;
struct HMMIO__;
struct HRSRC__;
struct HTASK__;
struct HWAVE__;
struct IMalloc;
struct IStream;
struct IUrlMon;
struct WSAData;
struct _NT_TIB;
struct _POINTL;
struct _PUBKEY;
struct _WSABUF;
struct _cpinfo;
struct _wffblk;
struct complex;
struct hostent;
struct in_addr;
struct pvalueA;
struct pvalueW;
struct servent;
struct tagCACY;
struct tagCAUB;
struct tagCAUH;
struct tagCAUI;
struct tagCAUL;
struct tagCRGB;
struct tagOFNA;
struct tagOFNW;
struct tagOIFI;
struct tagPSDA;
struct tagPSDW;
struct tagRECT;
struct tagSIZE;
struct timeval;
struct utimbuf;
struct wdirent;
struct HIMC__;
struct HKEY__;
struct HPEN__;
struct HRGN__;
struct HSTR__;
struct HWND__;
struct _COORD;
struct _FIXED;
struct _RECTL;
struct dirent;
struct fd_set;
struct linger;
struct netent;
struct tagCAC;
struct tagCAH;
struct tagCAI;
struct tagCAL;
struct tagDEC;
struct tagEMR;
struct tagMSG;
struct tagPDA;
struct tagPDW;
struct HDC__;
struct HKL__;
struct HSZ__;
struct _BLOB;
struct _GUID;
struct _LUID;
struct _MAT2;
struct _stat;
struct ffblk;
struct ftime;
struct lconv;
union tagCY;
struct timeb;
struct _ABC;
struct _ACL;
struct _DCB;
struct _NCB;
struct _PSP;
struct _SID;
struct stat;
struct tm;

struct _IMAGE_RESOURCE_DIRECTORY_ENTRY___4D142E9F5D1D48D13A38B419BC687841___6E35CCFC02D81E31BD4C6BEDD77CB20A {unsigned __int32 NameOffset : 31;unsigned __int32 NameIsString : 1;};
struct _IMAGE_RESOURCE_DIRECTORY_ENTRY___A1259A08F2B533F259DA4993E2C51E29___B2E03ED94C06E2E681F8D03FF7FF5CB3 {unsigned __int32 OffsetToDirectory : 31;unsigned __int32 DataIsDirectory : 1;};
struct _devicemodeA___1DE029518E5B112A14BB6E76DECCA4C4___5ACE225D4D14CE0550A9F5A217E306C5 {__int16 dmOrientation;__int16 dmPaperSize;__int16 dmPaperLength;__int16 dmPaperWidth;};
struct _devicemodeW___8704E1B782D57C585145E63F7510EBEA___5ACE225D4D14CE0550A9F5A217E306C5 {__int16 dmOrientation;__int16 dmPaperSize;__int16 dmPaperLength;__int16 dmPaperWidth;};
struct _LDT_ENTRY___95C81B8F3DD6C8D0A2F7AF8EEE24F097___A3BAC9569453E46653D4C53B8339026E {unsigned __int32 BaseMid : 8;unsigned __int32 Type : 5;unsigned __int32 Dpl : 2;unsigned __int32 Pres : 1;unsigned __int32 LimitHi : 4;unsigned __int32 Sys : 1;unsigned __int32 Reserved_0 : 1;unsigned __int32 Default_Big : 1;unsigned __int32 Granularity : 1;unsigned __int32 BaseHi : 8;};
struct _FULL_PTR_XLAT_TABLES___CFFA09E862963CB530A7E2871127FDA7 {void **XlatTable;unsigned __int8 *StateTable;unsigned int NumberOfEntries;};
typedef struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION *PJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION;
typedef struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION;
typedef struct _AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA *PAUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA;
typedef struct _AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA;
typedef struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS *PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS;
typedef struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS;
typedef struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA *PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA;
typedef struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA;
typedef struct _CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO *PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO;
typedef struct _CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO;
struct tagCY___983F061E0B702DD8AE0B4B955735A6A3 {unsigned int Lo;int Hi;};
typedef struct _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE *PCERT_POLICY_QUALIFIER_NOTICE_REFERENCE;
typedef struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION *PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION;
union _RemotableHandle____MIDL_IWinTypes_0009 {int hInproc;int hRemote;};
typedef struct _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE CERT_POLICY_QUALIFIER_NOTICE_REFERENCE;
typedef struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION JOBOBJECT_BASIC_ACCOUNTING_INFORMATION;
typedef struct _CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA *PCMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA;
typedef struct _CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA *PCMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA;
typedef struct _CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO *PCMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO;
typedef struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION *PJOBOBJECT_END_OF_JOB_TIME_INFORMATION;
typedef struct _CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA;
typedef struct _CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA;
typedef struct _CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO;
typedef struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION JOBOBJECT_END_OF_JOB_TIME_INFORMATION;
typedef struct _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO *PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO;
typedef struct _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO *PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO;
typedef struct _CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO *PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO;
typedef struct _CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA *PCRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA;
typedef struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY *PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;
typedef struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION *PJOBOBJECT_EXTENDED_LIMIT_INFORMATION;
typedef struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION *PJOBOBJECT_SECURITY_LIMIT_INFORMATION;
typedef struct _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO;
typedef struct _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO;
typedef struct _CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO;
typedef struct _CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA;
typedef struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;
typedef struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION JOBOBJECT_EXTENDED_LIMIT_INFORMATION;
typedef struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION JOBOBJECT_SECURITY_LIMIT_INFORMATION;
typedef struct _CERT_REGISTRY_STORE_CLIENT_GPT_PARA *PCERT_REGISTRY_STORE_CLIENT_GPT_PARA;
typedef struct _CHANGER_SEND_VOLUME_TAG_INFORMATION *PCHANGER_SEND_VOLUME_TAG_INFORMATION;
typedef struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT *PJOBOBJECT_ASSOCIATE_COMPLETION_PORT;
enum __MIDL_IInternetSecurityManager_0001 {PUAF_DEFAULT = 0x0,PUAF_NOUI = 0x1,PUAF_ISFILE = 0x2,PUAF_WARN_IF_DENIED = 0x4,PUAF_FORCEUI_FOREGROUND = 0x8,PUAF_CHECK_TIFS = 0x10,PUAF_DONTCHECKBOXINDIALOG = 0x20,PUAF_TRUSTED = 0x40,PUAF_ACCEPT_WILDCARD_SCHEME = 0x80,};
enum __MIDL_IInternetSecurityManager_0002 {SZM_CREATE = 0x0,SZM_DELETE = 0x1,};
typedef struct _CERT_REGISTRY_STORE_CLIENT_GPT_PARA CERT_REGISTRY_STORE_CLIENT_GPT_PARA;
typedef struct _CHANGER_SEND_VOLUME_TAG_INFORMATION CHANGER_SEND_VOLUME_TAG_INFORMATION;
typedef struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT JOBOBJECT_ASSOCIATE_COMPLETION_PORT;
typedef struct _CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA *PCMSG_CTRL_VERIFY_SIGNATURE_EX_PARA;
typedef struct _CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY *PCRYPT_CONTENT_INFO_SEQUENCE_OF_ANY;
typedef struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY *PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;
enum tagEOLE_AUTHENTICATION_CAPABILITIES {EOAC_NONE = 0x0,EOAC_MUTUAL_AUTH = 0x1,EOAC_STATIC_CLOAKING = 0x20,EOAC_DYNAMIC_CLOAKING = 0x40,EOAC_ANY_AUTHORITY = 0x80,EOAC_MAKE_FULLSIC = 0x100,EOAC_DEFAULT = 0x800,EOAC_SECURE_REFS = 0x2,EOAC_ACCESS_CONTROL = 0x4,EOAC_APPID = 0x8,EOAC_DYNAMIC = 0x10,EOAC_REQUIRE_FULLSIC = 0x200,EOAC_AUTO_IMPERSONATE = 0x400,EOAC_NO_CUSTOM_MARSHAL = 0x2000,EOAC_DISABLE_AAA = 0x1000,};
typedef struct _CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA;
typedef struct _CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY;
typedef struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;
typedef struct _CERT_POLICY_QUALIFIER_USER_NOTICE *PCERT_POLICY_QUALIFIER_USER_NOTICE;
typedef struct _CHANGER_INITIALIZE_ELEMENT_STATUS *PCHANGER_INITIALIZE_ELEMENT_STATUS;
typedef struct _CMSG_RECIPIENT_ENCRYPTED_KEY_INFO *PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO;
typedef struct _CRYPT_PKCS8_IMPORT_PARAMS *PCRYPT_PRIVATE_KEY_BLOB_AND_PARAMS;
typedef struct _IMAGE_IA64_RUNTIME_FUNCTION_ENTRY *PIMAGE_IA64_RUNTIME_FUNCTION_ENTRY;
typedef struct _JOBOBJECT_BASIC_LIMIT_INFORMATION *PJOBOBJECT_BASIC_LIMIT_INFORMATION;
typedef unsigned __int8 *(__stdcall *USER_MARSHAL_UNMARSHALLING_ROUTINE)(unsigned int *, unsigned __int8 *, void *);
enum __MIDL___MIDL_itf_objidl_0054_0001 {COMBND_RPCTIMEOUT = 0x1,};
enum _0AEECC1A63E1B2F73D11FBA74082B60B {PROXY_CALCSIZE = 0x0,PROXY_GETBUFFER = 0x1,PROXY_MARSHAL = 0x2,PROXY_SENDRECEIVE = 0x3,PROXY_UNMARSHAL = 0x4,};
enum _2A6324B8E10DEE2666A6A5498DFC667B {XLAT_SERVER = 0x1,XLAT_CLIENT = 0x2,};
struct _3FA64165D15A4602C29B2D9B0DA4A5E9 {void *pad[2];void *userContext;};
struct _506E48B857830EE8DF6E8E27DF4CF86F {struct _EXCEPTION_RECORD *_pexecptionrecord;struct _CONTEXT *_pcontext;unsigned int _result;};
struct _61B889227CECAFED4E8A477D21B34BC9 {unsigned __int16 reserved : 14;unsigned __int16 fDeferUpd : 1;unsigned __int16 fAckReq : 1;__int16 cfFormat;};
struct _62EC1DAD6DB92F8723AD0A50B2259449 {unsigned __int8 *UserName;unsigned __int8 *ComputerName;unsigned __int16 Privilege;unsigned int AuthFlags;};
struct _7ADE47B00230EF5EBD78FEDFCEB95499 {unsigned __int16 unused : 13;unsigned __int16 fRelease : 1;unsigned __int16 fDeferUpd : 1;unsigned __int16 fAckReq : 1;__int16 cfFormat;};
struct _923DA7BE11DCB482D02B0566D8DB27AB {unsigned __int16 bAppReturnCode : 8;unsigned __int16 reserved : 6;unsigned __int16 fBusy : 1;unsigned __int16 fAck : 1;};
struct _979FA3DE6ECCF956231BFC297C4278E6 {int quot;int rem;};
enum _A98B79572840FDA381AA9CDCE69D1BC8 {EqualPriority = 0x0,KeepPrefetchedData = 0x1,KeepReadData = 0x2,};
struct _AD47B7B6770F26FF00FF8EF46A9765CE {unsigned int Count;unsigned int Stats[1];};
enum _B2CD58BB5E151C37D855099D3E2FDD5A {STUB_UNMARSHAL = 0x0,STUB_CALL_SERVER = 0x1,STUB_MARSHAL = 0x2,STUB_CALL_SERVER_NO_HRESULT = 0x3,};
enum _C967B4BD5950CD7FE5A55F6326D513E0 {DOMAIN = 0x1,SING = 0x2,OVERFLOW = 0x3,UNDERFLOW = 0x4,TLOSS = 0x5,PLOSS = 0x6,STACKFAULT = 0x7,};
enum _C9C41CE7F7AB140BE1C872069B92FC11 {LT_DONT_CARE = 0x0,LT_LOWEST_LATENCY = 0x1,};
struct _CC81E267BD8B32E89ADB7AE662C05BFA {int Dimension;unsigned int *BufferConformanceMark;unsigned int *BufferVarianceMark;unsigned int *MaxCountArray;unsigned int *OffsetArray;unsigned int *ActualCountArray;};
struct _F5C2DC46D71DC4D756FD7B589ADCFB9C {unsigned int _d_hdir;char *_d_dirname;unsigned int _d_magic;unsigned int _d_nfiles;char _d_buf[320];};
typedef struct _CERT_POLICY_QUALIFIER_USER_NOTICE CERT_POLICY_QUALIFIER_USER_NOTICE;
typedef struct _CHANGER_INITIALIZE_ELEMENT_STATUS CHANGER_INITIALIZE_ELEMENT_STATUS;
typedef struct _CMSG_RECIPIENT_ENCRYPTED_KEY_INFO CMSG_RECIPIENT_ENCRYPTED_KEY_INFO;
typedef struct _CRYPT_PKCS8_IMPORT_PARAMS CRYPT_PRIVATE_KEY_BLOB_AND_PARAMS;
typedef struct _IMAGE_IA64_RUNTIME_FUNCTION_ENTRY IMAGE_IA64_RUNTIME_FUNCTION_ENTRY;
typedef struct _JOBOBJECT_BASIC_LIMIT_INFORMATION JOBOBJECT_BASIC_LIMIT_INFORMATION;
typedef struct _CERT_REGISTRY_STORE_ROAMING_PARA *PCERT_REGISTRY_STORE_ROAMING_PARA;
typedef struct _CMSG_CTRL_KEY_AGREE_DECRYPT_PARA *PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA;
typedef struct _CMSG_CTRL_KEY_TRANS_DECRYPT_PARA *PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA;
typedef struct _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA *PCMSG_CTRL_MAIL_LIST_DECRYPT_PARA;
typedef struct _CRYPT_ASYNC_RETRIEVAL_COMPLETION *PCRYPT_ASYNC_RETRIEVAL_COMPLETION;
typedef struct _CRYPT_ENCRYPTED_PRIVATE_KEY_INFO *PCRYPT_ENCRYPTED_PRIVATE_KEY_INFO;
typedef struct _CRYPT_ENROLLMENT_NAME_VALUE_PAIR *PCRYPT_ENROLLMENT_NAME_VALUE_PAIR;
typedef struct _ENCRYPTION_CERTIFICATE_HASH_LIST *PENCRYPTION_CERTIFICATE_HASH_LIST;
typedef struct _HTTPSPolicyCallbackData *PSSL_EXTRA_CERT_CHAIN_POLICY_PARA;
typedef struct _CERT_REGISTRY_STORE_ROAMING_PARA CERT_REGISTRY_STORE_ROAMING_PARA;
typedef struct _CMSG_CTRL_KEY_AGREE_DECRYPT_PARA CMSG_CTRL_KEY_AGREE_DECRYPT_PARA;
typedef struct _CMSG_CTRL_KEY_TRANS_DECRYPT_PARA CMSG_CTRL_KEY_TRANS_DECRYPT_PARA;
typedef struct _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA CMSG_CTRL_MAIL_LIST_DECRYPT_PARA;
typedef struct _CRYPT_ASYNC_RETRIEVAL_COMPLETION CRYPT_ASYNC_RETRIEVAL_COMPLETION;
typedef struct _CRYPT_ENCRYPTED_PRIVATE_KEY_INFO CRYPT_ENCRYPTED_PRIVATE_KEY_INFO;
typedef struct _CRYPT_ENROLLMENT_NAME_VALUE_PAIR CRYPT_ENROLLMENT_NAME_VALUE_PAIR;
typedef struct _ENCRYPTION_CERTIFICATE_HASH_LIST ENCRYPTION_CERTIFICATE_HASH_LIST;
typedef IInternetProtocolSinkStackable *LPIINTERNETPROTOCOLSINKStackable;
typedef struct _CERT_KEY_USAGE_RESTRICTION_INFO *PCERT_KEY_USAGE_RESTRICTION_INFO;
typedef struct _CERT_SYSTEM_STORE_RELOCATE_PARA *PCERT_SYSTEM_STORE_RELOCATE_PARA;
typedef struct _CMSG_KEY_AGREE_KEY_ENCRYPT_INFO *PCMSG_KEY_AGREE_KEY_ENCRYPT_INFO;
typedef struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY *PIMAGE_CE_RUNTIME_FUNCTION_ENTRY;
typedef struct _IMAGE_RESOURCE_DIRECTORY_STRING *PIMAGE_RESOURCE_DIRECTORY_STRING;
typedef struct _JOBOBJECT_BASIC_PROCESS_ID_LIST *PJOBOBJECT_BASIC_PROCESS_ID_LIST;
typedef struct _JOBOBJECT_BASIC_UI_RESTRICTIONS *PJOBOBJECT_BASIC_UI_RESTRICTIONS;
typedef struct _HTTPSPolicyCallbackData SSL_EXTRA_CERT_CHAIN_POLICY_PARA;
typedef unsigned __int8 *(__stdcall *USER_MARSHAL_MARSHALLING_ROUTINE)(unsigned int *, unsigned __int8 *, void *);
enum __MIDL_IInternetZoneManager_0001 {MAX_ZONE_PATH = 0x104,MAX_ZONE_DESCRIPTION = 0xC8,};
enum __MIDL_IInternetZoneManager_0002 {ZAFLAGS_CUSTOM_EDIT = 0x1,ZAFLAGS_ADD_SITES = 0x2,ZAFLAGS_REQUIRE_VERIFICATION = 0x4,ZAFLAGS_INCLUDE_PROXY_OVERRIDE = 0x8,ZAFLAGS_INCLUDE_INTRANET_SITES = 0x10,ZAFLAGS_NO_UI = 0x20,ZAFLAGS_SUPPORTS_VERIFICATION = 0x40,ZAFLAGS_UNC_AS_INTRANET = 0x80,};
typedef struct _CERT_KEY_USAGE_RESTRICTION_INFO CERT_KEY_USAGE_RESTRICTION_INFO;
typedef struct _CERT_SYSTEM_STORE_RELOCATE_PARA CERT_SYSTEM_STORE_RELOCATE_PARA;
typedef struct _CMSG_KEY_AGREE_KEY_ENCRYPT_INFO CMSG_KEY_AGREE_KEY_ENCRYPT_INFO;
typedef struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY IMAGE_CE_RUNTIME_FUNCTION_ENTRY;
typedef struct _IMAGE_RESOURCE_DIRECTORY_STRING IMAGE_RESOURCE_DIRECTORY_STRING;
typedef struct _JOBOBJECT_BASIC_PROCESS_ID_LIST JOBOBJECT_BASIC_PROCESS_ID_LIST;
typedef struct _JOBOBJECT_BASIC_UI_RESTRICTIONS JOBOBJECT_BASIC_UI_RESTRICTIONS;
typedef struct tagMIXERCONTROLDETAILS_LISTTEXTA *LPMIXERCONTROLDETAILS_LISTTEXTA;
typedef struct tagMIXERCONTROLDETAILS_LISTTEXTW *LPMIXERCONTROLDETAILS_LISTTEXTW;
typedef struct _CERT_X942_DH_VALIDATION_PARAMS *PCERT_X942_DH_VALIDATION_PARAMS;
typedef struct _IMAGE_RESOURCE_DIRECTORY_ENTRY *PIMAGE_RESOURCE_DIRECTORY_ENTRY;
typedef struct _A45289B030366F6A209F1D22B819A49A *PNTFS_FILE_RECORD_OUTPUT_BUFFER;
enum __MIDL_IBindStatusCallback_0001 {BINDVERB_GET = 0x0,BINDVERB_POST = 0x1,BINDVERB_PUT = 0x2,BINDVERB_CUSTOM = 0x3,};
enum __MIDL_IBindStatusCallback_0002 {BINDINFOF_URLENCODESTGMEDDATA = 0x1,BINDINFOF_URLENCODEDEXTRAINFO = 0x2,};
enum __MIDL_IBindStatusCallback_0003 {BINDF_ASYNCHRONOUS = 0x1,BINDF_ASYNCSTORAGE = 0x2,BINDF_NOPROGRESSIVERENDERING = 0x4,BINDF_OFFLINEOPERATION = 0x8,BINDF_GETNEWESTVERSION = 0x10,BINDF_NOWRITECACHE = 0x20,BINDF_NEEDFILE = 0x40,BINDF_PULLDATA = 0x80,BINDF_IGNORESECURITYPROBLEM = 0x100,BINDF_RESYNCHRONIZE = 0x200,BINDF_HYPERLINK = 0x400,BINDF_NO_UI = 0x800,BINDF_SILENTOPERATION = 0x1000,BINDF_PRAGMA_NO_CACHE = 0x2000,BINDF_GETCLASSOBJECT = 0x4000,BINDF_RESERVED_1 = 0x8000,BINDF_FREE_THREADED = 0x10000,BINDF_DIRECT_READ = 0x20000,BINDF_FORMS_SUBMIT = 0x40000,BINDF_GETFROMCACHE_IF_NET_FAIL = 0x80000,BINDF_FROMURLMON = 0x100000,BINDF_FWD_BACK = 0x200000,BINDF_RESERVED_2 = 0x400000,BINDF_RESERVED_3 = 0x800000,};
enum __MIDL_IBindStatusCallback_0004 {URL_ENCODING_NONE = 0x0,URL_ENCODING_ENABLE_UTF8 = 0x10000000,URL_ENCODING_DISABLE_UTF8 = 0x20000000,};
enum __MIDL_IBindStatusCallback_0005 {BINDINFO_OPTIONS_WININETFLAG = 0x10000,BINDINFO_OPTIONS_ENABLE_UTF8 = 0x20000,BINDINFO_OPTIONS_DISABLE_UTF8 = 0x40000,BINDINFO_OPTIONS_USE_IE_ENCODING = 0x80000,BINDINFO_OPTIONS_BINDTOOBJECT = 0x100000,};
enum __MIDL_IBindStatusCallback_0006 {BSCF_FIRSTDATANOTIFICATION = 0x1,BSCF_INTERMEDIATEDATANOTIFICATION = 0x2,BSCF_LASTDATANOTIFICATION = 0x4,BSCF_DATAFULLYAVAILABLE = 0x8,BSCF_AVAILABLEDATASIZEUNKNOWN = 0x10,};
typedef struct _CERT_CHAIN_FIND_BY_ISSUER_PARA CERT_CHAIN_FIND_BY_ISSUER_PARA;
typedef struct _CERT_X942_DH_VALIDATION_PARAMS CERT_X942_DH_VALIDATION_PARAMS;
struct IInternetProtocolSinkStackable {struct IInternetProtocolSinkStackableVtbl *lpVtbl;};
typedef struct _IMAGE_RESOURCE_DIRECTORY_ENTRY IMAGE_RESOURCE_DIRECTORY_ENTRY;
typedef struct _ENUM_SERVICE_STATUS_PROCESSA *LPENUM_SERVICE_STATUS_PROCESSA;
typedef struct _ENUM_SERVICE_STATUS_PROCESSW *LPENUM_SERVICE_STATUS_PROCESSW;
typedef struct tMIXERCONTROLDETAILS_UNSIGNED *LPMIXERCONTROLDETAILS_UNSIGNED;
typedef struct _A45289B030366F6A209F1D22B819A49A NTFS_FILE_RECORD_OUTPUT_BUFFER;
typedef struct _CMSG_KEY_AGREE_RECIPIENT_INFO *PCMSG_KEY_AGREE_RECIPIENT_INFO;
typedef struct _CMSG_KEY_TRANS_RECIPIENT_INFO *PCMSG_KEY_TRANS_RECIPIENT_INFO;
typedef struct _CMSG_MAIL_LIST_RECIPIENT_INFO *PCMSG_MAIL_LIST_RECIPIENT_INFO;
typedef struct _CRYPT_KEY_VERIFY_MESSAGE_PARA *PCRYPT_KEY_VERIFY_MESSAGE_PARA;
typedef struct _CRYPT_TIME_STAMP_REQUEST_INFO *PCRYPT_TIME_STAMP_REQUEST_INFO;
typedef struct _IMAGE_BOUND_IMPORT_DESCRIPTOR *PIMAGE_BOUND_IMPORT_DESCRIPTOR;
typedef struct _C3795B4C40F1F780E52EE60833F04917 *PIMAGE_LOAD_CONFIG_DIRECTORY32;
typedef struct _CCEDB0757BDFC2DD5AC112970835DC93 *PIMAGE_LOAD_CONFIG_DIRECTORY64;
typedef struct _SECURITY_DESCRIPTOR_RELATIVE *PISECURITY_DESCRIPTOR_RELATIVE;
typedef struct tagMIXERCONTROLDETAILS_LISTTEXTA *PMIXERCONTROLDETAILS_LISTTEXTA;
typedef struct tagMIXERCONTROLDETAILS_LISTTEXTW *PMIXERCONTROLDETAILS_LISTTEXTW;
typedef struct _50092E5B8D5585E25A36D2D7AA7D11CF *PNTFS_FILE_RECORD_INPUT_BUFFER;
typedef struct _USER_MARSHAL_ROUTINE_QUADRUPLE USER_MARSHAL_ROUTINE_QUADRUPLE;
typedef struct _CMSG_KEY_AGREE_RECIPIENT_INFO CMSG_KEY_AGREE_RECIPIENT_INFO;
typedef struct _CMSG_KEY_TRANS_RECIPIENT_INFO CMSG_KEY_TRANS_RECIPIENT_INFO;
typedef struct _CMSG_MAIL_LIST_RECIPIENT_INFO CMSG_MAIL_LIST_RECIPIENT_INFO;
typedef struct _CRYPT_KEY_VERIFY_MESSAGE_PARA CRYPT_KEY_VERIFY_MESSAGE_PARA;
typedef struct _CRYPT_TIME_STAMP_REQUEST_INFO CRYPT_TIME_STAMP_REQUEST_INFO;
typedef struct _IMAGE_BOUND_IMPORT_DESCRIPTOR IMAGE_BOUND_IMPORT_DESCRIPTOR;
typedef struct _C3795B4C40F1F780E52EE60833F04917 IMAGE_LOAD_CONFIG_DIRECTORY32;
typedef struct _CCEDB0757BDFC2DD5AC112970835DC93 IMAGE_LOAD_CONFIG_DIRECTORY64;
typedef struct tMIXERCONTROLDETAILS_BOOLEAN *LPMIXERCONTROLDETAILS_BOOLEAN;
typedef struct _PRINTER_NOTIFY_OPTIONS_TYPE *LPPRINTER_NOTIFY_OPTIONS_TYPE;
enum MACRO_TIME_NOMINUTESORSECONDS {TIME_NOMINUTESORSECONDS = 0x1,TIME_NOSECONDS = 0x2,TIME_NOTIMEMARKER = 0x4,TIME_FORCE24HOURFORMAT = 0x8,};
typedef struct tagMIXERCONTROLDETAILS_LISTTEXTA MIXERCONTROLDETAILS_LISTTEXTA;
typedef struct tagMIXERCONTROLDETAILS_LISTTEXTW MIXERCONTROLDETAILS_LISTTEXTW;
typedef struct _50092E5B8D5585E25A36D2D7AA7D11CF NTFS_FILE_RECORD_INPUT_BUFFER;
typedef struct _CERT_BASIC_CONSTRAINTS2_INFO *PCERT_BASIC_CONSTRAINTS2_INFO;
typedef struct _CMSG_SP3_COMPATIBLE_AUX_INFO *PCMSG_SP3_COMPATIBLE_AUX_INFO;
typedef struct _GENERIC_BINDING_ROUTINE_PAIR *PGENERIC_BINDING_ROUTINE_PAIR;
typedef struct _MEMORY_BASIC_INFORMATION_VLM *PMEMORY_BASIC_INFORMATION_VLM;
typedef struct tMIXERCONTROLDETAILS_UNSIGNED *PMIXERCONTROLDETAILS_UNSIGNED;
enum _SECURITY_IMPERSONATION_LEVEL {SecurityAnonymous = 0x0,SecurityIdentification = 0x1,SecurityImpersonation = 0x2,SecurityDelegation = 0x3,};
typedef struct _CERT_BASIC_CONSTRAINTS2_INFO CERT_BASIC_CONSTRAINTS2_INFO;
typedef struct _CMSG_SP3_COMPATIBLE_AUX_INFO CMSG_SP3_COMPATIBLE_AUX_INFO;
typedef struct _ENUM_SERVICE_STATUS_PROCESSA ENUM_SERVICE_STATUS_PROCESSA;
typedef struct _ENUM_SERVICE_STATUS_PROCESSW ENUM_SERVICE_STATUS_PROCESSW;
typedef struct _GENERIC_BINDING_ROUTINE_PAIR GENERIC_BINDING_ROUTINE_PAIR;
struct IInternetHostSecurityManager {struct IInternetHostSecurityManagerVtbl *lpVtbl;};
struct IXMLDOMProcessingInstruction {struct IXMLDOMProcessingInstructionVtbl *lpVtbl;};
typedef struct _BY_HANDLE_FILE_INFORMATION *LPBY_HANDLE_FILE_INFORMATION;
typedef struct tMIXERCONTROLDETAILS_SIGNED *LPMIXERCONTROLDETAILS_SIGNED;
typedef struct _QUERY_SERVICE_LOCK_STATUSA *LPQUERY_SERVICE_LOCK_STATUSA;
typedef struct _QUERY_SERVICE_LOCK_STATUSW *LPQUERY_SERVICE_LOCK_STATUSW;
enum MACRO_MAX_JOYSTICKOEMVXDNAME {MAX_JOYSTICKOEMVXDNAME = 260,};
enum MACRO_MIXER_GETLINECONTROLSF {MIXER_GETLINECONTROLSF_ALL = 0x0,MIXER_GETLINECONTROLSF_ONEBYID = 0x1,MIXER_GETLINECONTROLSF_ONEBYTYPE = 0x2,MIXER_GETLINECONTROLSF_QUERYMASK = 0xF,MIXER_GETCONTROLDETAILSF_VALUE = 0x0,MIXER_GETCONTROLDETAILSF_LISTTEXT = 0x1,MIXER_GETCONTROLDETAILSF_QUERYMASK = 0xF,MIXER_SETCONTROLDETAILSF_VALUE = 0x0,MIXER_SETCONTROLDETAILSF_CUSTOM = 0x1,MIXER_SETCONTROLDETAILSF_QUERYMASK = 0xF,};
enum MACRO_POSTSCRIPT_PASSTHROUGH {POSTSCRIPT_PASSTHROUGH = 4115,};
enum MACRO_PRINTER_NOTIFY_OPTIONS {PRINTER_NOTIFY_OPTIONS_REFRESH = 0x1,PRINTER_NOTIFY_INFO_DISCARDED = 0x1,PRINTER_CHANGE_ADD_PRINTER = 0x1,PRINTER_CHANGE_SET_PRINTER = 0x2,PRINTER_CHANGE_DELETE_PRINTER = 0x4,PRINTER_CHANGE_FAILED_CONNECTION_PRINTER = 0x8,PRINTER_CHANGE_PRINTER = 0xFF,PRINTER_CHANGE_ADD_JOB = 0x100,PRINTER_CHANGE_SET_JOB = 0x200,PRINTER_CHANGE_DELETE_JOB = 0x400,PRINTER_CHANGE_WRITE_JOB = 0x800,PRINTER_CHANGE_JOB = 0xFF00,PRINTER_CHANGE_ADD_FORM = 0x10000,PRINTER_CHANGE_SET_FORM = 0x20000,PRINTER_CHANGE_DELETE_FORM = 0x40000,PRINTER_CHANGE_FORM = 0x70000,PRINTER_CHANGE_ADD_PORT = 0x100000,PRINTER_CHANGE_CONFIGURE_PORT = 0x200000,PRINTER_CHANGE_DELETE_PORT = 0x400000,PRINTER_CHANGE_PORT = 0x700000,PRINTER_CHANGE_ADD_PRINT_PROCESSOR = 0x1000000,PRINTER_CHANGE_DELETE_PRINT_PROCESSOR = 0x4000000,PRINTER_CHANGE_PRINT_PROCESSOR = 0x7000000,PRINTER_CHANGE_ADD_PRINTER_DRIVER = 0x10000000,PRINTER_CHANGE_SET_PRINTER_DRIVER = 0x20000000,PRINTER_CHANGE_DELETE_PRINTER_DRIVER = 0x40000000,PRINTER_CHANGE_PRINTER_DRIVER = 0x70000000,PRINTER_CHANGE_TIMEOUT = 0x80000000,PRINTER_CHANGE_ALL = 0x7777FFFF,PRINTER_ERROR_INFORMATION = 0x80000000,PRINTER_ERROR_WARNING = 0x40000000,PRINTER_ERROR_SEVERE = 0x20000000,PRINTER_ERROR_OUTOFPAPER = 0x1,PRINTER_ERROR_JAM = 0x2,PRINTER_ERROR_OUTOFTONER = 0x4,};
enum MACRO_URLACTION_AUTHENTICATE {URLACTION_AUTHENTICATE_CLIENT = 0x1A01,};
enum MACRO_URLPOLICY_AUTHENTICATE {URLPOLICY_AUTHENTICATE_CLEARTEXT_OK = 0x0,URLPOLICY_AUTHENTICATE_CHALLENGE_RESPONSE = 0x10000,URLPOLICY_AUTHENTICATE_MUTUAL_ONLY = 0x30000,};
typedef struct _MEMORY_BASIC_INFORMATION_VLM MEMORY_BASIC_INFORMATION_VLM;
typedef struct tMIXERCONTROLDETAILS_UNSIGNED MIXERCONTROLDETAILS_UNSIGNED;
typedef struct _NDR_USER_MARSHAL_INFO_LEVEL1 NDR_USER_MARSHAL_INFO_LEVEL1;
typedef struct _CERT_AUTHORITY_KEY_ID2_INFO *PCERT_AUTHORITY_KEY_ID2_INFO;
typedef struct _CERT_BASIC_CONSTRAINTS_INFO *PCERT_BASIC_CONSTRAINTS_INFO;
typedef struct _CERT_CHAIN_FIND_BY_ISSUER_PARA *PCERT_CHAIN_FIND_ISSUER_PARA;
typedef struct _CHANGER_READ_ELEMENT_STATUS *PCHANGER_READ_ELEMENT_STATUS;
typedef struct _CMSG_KEY_AGREE_ENCRYPT_INFO *PCMSG_KEY_AGREE_ENCRYPT_INFO;
typedef struct _CMSG_KEY_TRANS_ENCRYPT_INFO *PCMSG_KEY_TRANS_ENCRYPT_INFO;
typedef struct _CMSG_MAIL_LIST_ENCRYPT_INFO *PCMSG_MAIL_LIST_ENCRYPT_INFO;
typedef struct _CRYPT_KEY_SIGN_MESSAGE_PARA *PCRYPT_KEY_SIGN_MESSAGE_PARA;
typedef struct _CRYPT_PASSWORD_CREDENTIALSA *PCRYPT_PASSWORD_CREDENTIALSA;
typedef struct _CRYPT_PASSWORD_CREDENTIALSW *PCRYPT_PASSWORD_CREDENTIALSW;
typedef struct _ENCRYPTION_CERTIFICATE_HASH *PENCRYPTION_CERTIFICATE_HASH;
typedef struct _ENCRYPTION_CERTIFICATE_LIST *PENCRYPTION_CERTIFICATE_LIST;
typedef struct _FILE_ALLOCATED_RANGE_BUFFER *PFILE_ALLOCATED_RANGE_BUFFER;
typedef struct _IMAGE_ARCHIVE_MEMBER_HEADER *PIMAGE_ARCHIVE_MEMBER_HEADER;
typedef struct _IMAGE_RESOURCE_DIR_STRING_U *PIMAGE_RESOURCE_DIR_STRING_U;
typedef struct _IMAGE_SEPARATE_DEBUG_HEADER *PIMAGE_SEPARATE_DEBUG_HEADER;
typedef struct tMIXERCONTROLDETAILS_BOOLEAN *PMIXERCONTROLDETAILS_BOOLEAN;
typedef struct _PRINTER_NOTIFY_OPTIONS_TYPE *PPRINTER_NOTIFY_OPTIONS_TYPE;
typedef struct _SECURITY_QUALITY_OF_SERVICE *PSECURITY_QUALITY_OF_SERVICE;
typedef struct _SECURITY_DESCRIPTOR_RELATIVE SECURITY_DESCRIPTOR_RELATIVE;
typedef void (__stdcall *USER_MARSHAL_FREEING_ROUTINE)(unsigned int *, void *);
typedef struct _CERT_AUTHORITY_KEY_ID2_INFO CERT_AUTHORITY_KEY_ID2_INFO;
typedef struct _CERT_BASIC_CONSTRAINTS_INFO CERT_BASIC_CONSTRAINTS_INFO;
typedef struct _CHANGER_READ_ELEMENT_STATUS CHANGER_READ_ELEMENT_STATUS;
typedef struct _CMSG_KEY_AGREE_ENCRYPT_INFO CMSG_KEY_AGREE_ENCRYPT_INFO;
typedef struct _CMSG_KEY_TRANS_ENCRYPT_INFO CMSG_KEY_TRANS_ENCRYPT_INFO;
typedef struct _CMSG_MAIL_LIST_ENCRYPT_INFO CMSG_MAIL_LIST_ENCRYPT_INFO;
typedef struct _CRYPT_KEY_SIGN_MESSAGE_PARA CRYPT_KEY_SIGN_MESSAGE_PARA;
typedef struct _CRYPT_PASSWORD_CREDENTIALSA CRYPT_PASSWORD_CREDENTIALSA;
typedef struct _CRYPT_PASSWORD_CREDENTIALSW CRYPT_PASSWORD_CREDENTIALSW;
typedef struct _ENCRYPTION_CERTIFICATE_HASH ENCRYPTION_CERTIFICATE_HASH;
typedef struct _ENCRYPTION_CERTIFICATE_LIST ENCRYPTION_CERTIFICATE_LIST;
typedef struct _FILE_ALLOCATED_RANGE_BUFFER FILE_ALLOCATED_RANGE_BUFFER;
typedef struct _IMAGE_ARCHIVE_MEMBER_HEADER IMAGE_ARCHIVE_MEMBER_HEADER;
typedef struct _IMAGE_RESOURCE_DIR_STRING_U IMAGE_RESOURCE_DIR_STRING_U;
typedef struct _IMAGE_SEPARATE_DEBUG_HEADER IMAGE_SEPARATE_DEBUG_HEADER;
typedef struct _CREATE_PROCESS_DEBUG_INFO *LPCREATE_PROCESS_DEBUG_INFO;
typedef struct _EVENTLOG_FULL_INFORMATION *LPEVENTLOG_FULL_INFORMATION;
typedef struct _1DF2F441892C3D46584606B89F66007B *LPOPENCARD_SEARCH_CRITERIAA;
typedef struct _4B26251D75C0D59F22113E7121B4AA5F *LPOPENCARD_SEARCH_CRITERIAW;
typedef struct _WIN32_FILE_ATTRIBUTE_DATA *LPWIN32_FILE_ATTRIBUTE_DATA;
enum MACRO_CERT_CHAIN_REVOCATION {CERT_CHAIN_REVOCATION_CHECK_END_CERT = 0x10000000,CERT_CHAIN_REVOCATION_CHECK_CHAIN = 0x20000000,CERT_CHAIN_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT = 0x40000000,CERT_CHAIN_REVOCATION_CHECK_CACHE_ONLY = 0x80000000,};
enum MACRO_LOCALE_NOUSEROVERRIDE {LOCALE_NOUSEROVERRIDE = 0x80000000,LOCALE_USE_CP_ACP = 0x40000000,LOCALE_RETURN_NUMBER = 0x20000000,LOCALE_ILANGUAGE = 0x1,LOCALE_SLANGUAGE = 0x2,LOCALE_SENGLANGUAGE = 0x1001,LOCALE_SABBREVLANGNAME = 0x3,LOCALE_SNATIVELANGNAME = 0x4,LOCALE_ICOUNTRY = 0x5,LOCALE_SCOUNTRY = 0x6,LOCALE_SENGCOUNTRY = 0x1002,LOCALE_SABBREVCTRYNAME = 0x7,LOCALE_SNATIVECTRYNAME = 0x8,LOCALE_IDEFAULTLANGUAGE = 0x9,LOCALE_IDEFAULTCOUNTRY = 0xA,LOCALE_IDEFAULTCODEPAGE = 0xB,LOCALE_IDEFAULTANSICODEPAGE = 0x1004,LOCALE_IDEFAULTMACCODEPAGE = 0x1011,LOCALE_SLIST = 0xC,LOCALE_IMEASURE = 0xD,LOCALE_SDECIMAL = 0xE,LOCALE_STHOUSAND = 0xF,LOCALE_SGROUPING = 0x10,LOCALE_IDIGITS = 0x11,LOCALE_ILZERO = 0x12,LOCALE_INEGNUMBER = 0x1010,LOCALE_SNATIVEDIGITS = 0x13,LOCALE_SCURRENCY = 0x14,LOCALE_SINTLSYMBOL = 0x15,LOCALE_SMONDECIMALSEP = 0x16,LOCALE_SMONTHOUSANDSEP = 0x17,LOCALE_SMONGROUPING = 0x18,LOCALE_ICURRDIGITS = 0x19,LOCALE_IINTLCURRDIGITS = 0x1A,LOCALE_ICURRENCY = 0x1B,LOCALE_INEGCURR = 0x1C,LOCALE_SDATE = 0x1D,LOCALE_STIME = 0x1E,LOCALE_SSHORTDATE = 0x1F,LOCALE_SLONGDATE = 0x20,LOCALE_STIMEFORMAT = 0x1003,LOCALE_IDATE = 0x21,LOCALE_ILDATE = 0x22,LOCALE_ITIME = 0x23,LOCALE_ITIMEMARKPOSN = 0x1005,LOCALE_ICENTURY = 0x24,LOCALE_ITLZERO = 0x25,LOCALE_IDAYLZERO = 0x26,LOCALE_IMONLZERO = 0x27,LOCALE_S1159 = 0x28,LOCALE_S2359 = 0x29,LOCALE_ICALENDARTYPE = 0x1009,LOCALE_IOPTIONALCALENDAR = 0x100B,LOCALE_IFIRSTDAYOFWEEK = 0x100C,LOCALE_IFIRSTWEEKOFYEAR = 0x100D,LOCALE_SDAYNAME1 = 0x2A,LOCALE_SDAYNAME2 = 0x2B,LOCALE_SDAYNAME3 = 0x2C,LOCALE_SDAYNAME4 = 0x2D,LOCALE_SDAYNAME5 = 0x2E,LOCALE_SDAYNAME6 = 0x2F,LOCALE_SDAYNAME7 = 0x30,LOCALE_SABBREVDAYNAME1 = 0x31,LOCALE_SABBREVDAYNAME2 = 0x32,LOCALE_SABBREVDAYNAME3 = 0x33,LOCALE_SABBREVDAYNAME4 = 0x34,LOCALE_SABBREVDAYNAME5 = 0x35,LOCALE_SABBREVDAYNAME6 = 0x36,LOCALE_SABBREVDAYNAME7 = 0x37,LOCALE_SMONTHNAME1 = 0x38,LOCALE_SMONTHNAME2 = 0x39,LOCALE_SMONTHNAME3 = 0x3A,LOCALE_SMONTHNAME4 = 0x3B,LOCALE_SMONTHNAME5 = 0x3C,LOCALE_SMONTHNAME6 = 0x3D,LOCALE_SMONTHNAME7 = 0x3E,LOCALE_SMONTHNAME8 = 0x3F,LOCALE_SMONTHNAME9 = 0x40,LOCALE_SMONTHNAME10 = 0x41,LOCALE_SMONTHNAME11 = 0x42,LOCALE_SMONTHNAME12 = 0x43,LOCALE_SMONTHNAME13 = 0x100E,LOCALE_SABBREVMONTHNAME1 = 0x44,LOCALE_SABBREVMONTHNAME2 = 0x45,LOCALE_SABBREVMONTHNAME3 = 0x46,LOCALE_SABBREVMONTHNAME4 = 0x47,LOCALE_SABBREVMONTHNAME5 = 0x48,LOCALE_SABBREVMONTHNAME6 = 0x49,LOCALE_SABBREVMONTHNAME7 = 0x4A,LOCALE_SABBREVMONTHNAME8 = 0x4B,LOCALE_SABBREVMONTHNAME9 = 0x4C,LOCALE_SABBREVMONTHNAME10 = 0x4D,LOCALE_SABBREVMONTHNAME11 = 0x4E,LOCALE_SABBREVMONTHNAME12 = 0x4F,LOCALE_SABBREVMONTHNAME13 = 0x100F,LOCALE_SPOSITIVESIGN = 0x50,LOCALE_SNEGATIVESIGN = 0x51,LOCALE_IPOSSIGNPOSN = 0x52,LOCALE_INEGSIGNPOSN = 0x53,LOCALE_IPOSSYMPRECEDES = 0x54,LOCALE_IPOSSEPBYSPACE = 0x55,LOCALE_INEGSYMPRECEDES = 0x56,LOCALE_INEGSEPBYSPACE = 0x57,LOCALE_FONTSIGNATURE = 0x58,LOCALE_SISO639LANGNAME = 0x59,LOCALE_SISO3166CTRYNAME = 0x5A,LOCALE_IDEFAULTEBCDICCODEPAGE = 0x1012,LOCALE_IPAPERSIZE = 0x100A,LOCALE_SENGCURRNAME = 0x1007,LOCALE_SNATIVECURRNAME = 0x1008,LOCALE_SYEARMONTH = 0x1006,LOCALE_SSORTNAME = 0x1013,LOCALE_IDIGITSUBSTITUTION = 0x1014,};
enum MACRO_MAXLOGICALLOGNAMESIZE {MAXLOGICALLOGNAMESIZE = 256,};
enum MACRO_NORMAL_PRIORITY_CLASS {BELOW_NORMAL_PRIORITY_CLASS = 0x4000,ABOVE_NORMAL_PRIORITY_CLASS = 0x8000,};
enum MACRO_URLPOLICY_CREDENTIALS {URLPOLICY_CREDENTIALS_SILENT_LOGON_OK = 0x0,URLPOLICY_CREDENTIALS_MUST_PROMPT_USER = 0x10000,URLPOLICY_CREDENTIALS_CONDITIONAL_PROMPT = 0x20000,URLPOLICY_CREDENTIALS_ANONYMOUS_ONLY = 0x30000,};
typedef struct tMIXERCONTROLDETAILS_BOOLEAN MIXERCONTROLDETAILS_BOOLEAN;
typedef struct _BY_HANDLE_FILE_INFORMATION *PBY_HANDLE_FILE_INFORMATION;
typedef struct _CERT_AUTHORITY_INFO_ACCESS *PCERT_AUTHORITY_INFO_ACCESS;
typedef struct _CERT_AUTHORITY_KEY_ID_INFO *PCERT_AUTHORITY_KEY_ID_INFO;
typedef struct _CERT_POLICY_QUALIFIER_INFO *PCERT_POLICY_QUALIFIER_INFO;
typedef struct _CMSG_ENCRYPTED_ENCODE_INFO *PCMSG_ENCRYPTED_ENCODE_INFO;
typedef struct _CMSG_ENVELOPED_ENCODE_INFO *PCMSG_ENVELOPED_ENCODE_INFO;
typedef struct _CMSG_RECIPIENT_ENCODE_INFO *PCMSG_RECIPIENT_ENCODE_INFO;
typedef struct _CONSOLE_SCREEN_BUFFER_INFO *PCONSOLE_SCREEN_BUFFER_INFO;
typedef struct _CRYPT_ALGORITHM_IDENTIFIER *PCRYPT_ALGORITHM_IDENTIFIER;
typedef struct _CRYPT_ATTRIBUTE_TYPE_VALUE *PCRYPT_ATTRIBUTE_TYPE_VALUE;
typedef struct _CRYPT_DECRYPT_MESSAGE_PARA *PCRYPT_DECRYPT_MESSAGE_PARA;
typedef struct _CRYPT_ENCRYPT_MESSAGE_PARA *PCRYPT_ENCRYPT_MESSAGE_PARA;
typedef struct tagEMRCREATEDIBPATTERNBRUSHPT *PEMRCREATEDIBPATTERNBRUSHPT;
typedef struct _FILE_ZERO_DATA_INFORMATION *PFILE_ZERO_DATA_INFORMATION;
typedef struct _FSCTL_QUERY_FAT_BPB_BUFFER *PFSCTL_QUERY_FAT_BPB_BUFFER;
typedef struct tMIXERCONTROLDETAILS_SIGNED *PMIXERCONTROLDETAILS_SIGNED;
typedef struct _REQUEST_RAW_ENCRYPTED_DATA *PREQUEST_RAW_ENCRYPTED_DATA;
typedef struct _PRINTER_NOTIFY_OPTIONS_TYPE PRINTER_NOTIFY_OPTIONS_TYPE;
typedef struct _RTL_CRITICAL_SECTION_DEBUG *PRTL_CRITICAL_SECTION_DEBUG;
typedef struct _SECURITY_QUALITY_OF_SERVICE SECURITY_QUALITY_OF_SERVICE;
typedef struct tagSOLE_AUTHENTICATION_SERVICE SOLE_AUTHENTICATION_SERVICE;
typedef unsigned int (__stdcall *USER_MARSHAL_SIZING_ROUTINE)(unsigned int *, unsigned int, void *);
typedef struct _BY_HANDLE_FILE_INFORMATION BY_HANDLE_FILE_INFORMATION;
typedef struct _CERT_AUTHORITY_INFO_ACCESS CERT_AUTHORITY_INFO_ACCESS;
typedef struct _CERT_AUTHORITY_KEY_ID_INFO CERT_AUTHORITY_KEY_ID_INFO;
typedef struct _CERT_POLICY_QUALIFIER_INFO CERT_POLICY_QUALIFIER_INFO;
typedef struct _CMSG_ENCRYPTED_ENCODE_INFO CMSG_ENCRYPTED_ENCODE_INFO;
typedef struct _CMSG_ENVELOPED_ENCODE_INFO CMSG_ENVELOPED_ENCODE_INFO;
typedef struct _CMSG_RECIPIENT_ENCODE_INFO CMSG_RECIPIENT_ENCODE_INFO;
typedef struct _CONSOLE_SCREEN_BUFFER_INFO CONSOLE_SCREEN_BUFFER_INFO;
typedef struct _CRYPT_ALGORITHM_IDENTIFIER CRYPT_ALGORITHM_IDENTIFIER;
typedef struct _CRYPT_ATTRIBUTE_TYPE_VALUE CRYPT_ATTRIBUTE_TYPE_VALUE;
typedef struct _CRYPT_DECRYPT_MESSAGE_PARA CRYPT_DECRYPT_MESSAGE_PARA;
typedef struct _CRYPT_ENCRYPT_MESSAGE_PARA CRYPT_ENCRYPT_MESSAGE_PARA;
typedef struct tagEMRCREATEDIBPATTERNBRUSHPT EMRCREATEDIBPATTERNBRUSHPT;
typedef struct _FILE_ZERO_DATA_INFORMATION FILE_ZERO_DATA_INFORMATION;
typedef struct _FSCTL_QUERY_FAT_BPB_BUFFER FSCTL_QUERY_FAT_BPB_BUFFER;
typedef struct _CREATE_THREAD_DEBUG_INFO *LPCREATE_THREAD_DEBUG_INFO;
typedef struct _OUTPUT_DEBUG_STRING_INFO *LPOUTPUT_DEBUG_STRING_INFO;
typedef struct _PRINTER_NOTIFY_INFO_DATA *LPPRINTER_NOTIFY_INFO_DATA;
typedef struct _SERVICE_FAILURE_ACTIONSA *LPSERVICE_FAILURE_ACTIONSA;
typedef struct _SERVICE_FAILURE_ACTIONSW *LPSERVICE_FAILURE_ACTIONSW;
enum MACRO_ENABLERELATIVEWIDTHS {ENABLERELATIVEWIDTHS = 768,};
enum MACRO_PAGESETUPDLGORDMOTIF {PAGESETUPDLGORDMOTIF = 1550,};
enum MACRO_SECURITY_INFORMATION {OWNER_SECURITY_INFORMATION = 0x1,GROUP_SECURITY_INFORMATION = 0x2,DACL_SECURITY_INFORMATION = 0x4,SACL_SECURITY_INFORMATION = 0x8,PROTECTED_DACL_SECURITY_INFORMATION = 0x80000000,PROTECTED_SACL_SECURITY_INFORMATION = 0x40000000,UNPROTECTED_DACL_SECURITY_INFORMATION = 0x20000000,UNPROTECTED_SACL_SECURITY_INFORMATION = 0x10000000,};
enum MACRO_SYMMETRICWRAPKEYBLOB {SYMMETRICWRAPKEYBLOB = 0xB,};
typedef struct tMIXERCONTROLDETAILS_SIGNED MIXERCONTROLDETAILS_SIGNED;
typedef struct _ACCESS_ALLOWED_OBJECT_ACE *PACCESS_ALLOWED_OBJECT_ACE;
typedef struct _CERT_ISSUER_SERIAL_NUMBER *PCERT_ISSUER_SERIAL_NUMBER;
typedef struct _CERT_PRIVATE_KEY_VALIDITY *PCERT_PRIVATE_KEY_VALIDITY;
typedef struct _CERT_STORE_PROV_FIND_INFO *PCERT_STORE_PROV_FIND_INFO;
typedef struct _CMSG_CONTENT_ENCRYPT_INFO *PCMSG_CONTENT_ENCRYPT_INFO;
typedef struct _CRYPTPROTECT_PROMPTSTRUCT *PCRYPTPROTECT_PROMPTSTRUCT;
typedef struct _CRYPT_PKCS8_EXPORT_PARAMS *PCRYPT_PKCS8_EXPORT_PARAMS;
typedef struct _CRYPT_PKCS8_IMPORT_PARAMS *PCRYPT_PKCS8_IMPORT_PARAMS;
typedef struct _CRYPT_VERIFY_MESSAGE_PARA *PCRYPT_VERIFY_MESSAGE_PARA;
typedef struct tagEMREXTCREATEFONTINDIRECTW *PEMREXTCREATEFONTINDIRECTW;
typedef struct _FULL_PTR_TO_REFID_ELEMENT *PFULL_PTR_TO_REFID_ELEMENT;
typedef struct _ImageArchitectureHeader *PIMAGE_ARCHITECTURE_HEADER;
typedef struct _IMAGE_BOUND_FORWARDER_REF *PIMAGE_BOUND_FORWARDER_REF;
typedef struct _IMAGE_COFF_SYMBOLS_HEADER *PIMAGE_COFF_SYMBOLS_HEADER;
typedef struct _IMAGE_RESOURCE_DATA_ENTRY *PIMAGE_RESOURCE_DATA_ENTRY;
typedef struct _IMAGE_ROM_OPTIONAL_HEADER *PIMAGE_ROM_OPTIONAL_HEADER;
typedef struct _7FAA4336E151361F9CD171DE989684F0 *PNTFS_EXTENDED_VOLUME_DATA;
typedef struct _1DF2F441892C3D46584606B89F66007B *POPENCARD_SEARCH_CRITERIAA;
typedef struct _4B26251D75C0D59F22113E7121B4AA5F *POPENCARD_SEARCH_CRITERIAW;
typedef struct _READ_ELEMENT_ADDRESS_INFO *PREAD_ELEMENT_ADDRESS_INFO;
typedef struct RETRIEVAL_POINTERS_BUFFER *PRETRIEVAL_POINTERS_BUFFER;
typedef struct _SEC_WINNT_AUTH_IDENTITY_A *PSEC_WINNT_AUTH_IDENTITY_A;
typedef struct _SEC_WINNT_AUTH_IDENTITY_W *PSEC_WINNT_AUTH_IDENTITY_W;
typedef struct _SET_PARTITION_INFORMATION *PSET_PARTITION_INFORMATION;
typedef struct _060D6FD956D3EBF205D64C3CA4764571 *PSTARTING_LCN_INPUT_BUFFER;
typedef struct _80E50DFA284ED4BC838B08AAD8EA99BA *PSTARTING_VCN_INPUT_BUFFER;
typedef struct _STORAGE_BUS_RESET_REQUEST *PSTORAGE_BUS_RESET_REQUEST;
typedef struct _TAPE_GET_DRIVE_PARAMETERS *PTAPE_GET_DRIVE_PARAMETERS;
typedef struct _TAPE_GET_MEDIA_PARAMETERS *PTAPE_GET_MEDIA_PARAMETERS;
typedef struct _TAPE_SET_DRIVE_PARAMETERS *PTAPE_SET_DRIVE_PARAMETERS;
typedef struct _TAPE_SET_MEDIA_PARAMETERS *PTAPE_SET_MEDIA_PARAMETERS;
typedef struct _WINDOW_BUFFER_SIZE_RECORD *PWINDOW_BUFFER_SIZE_RECORD;
typedef struct _QUERY_SERVICE_LOCK_STATUSA QUERY_SERVICE_LOCK_STATUSA;
typedef struct _QUERY_SERVICE_LOCK_STATUSW QUERY_SERVICE_LOCK_STATUSW;
typedef struct _REQUEST_RAW_ENCRYPTED_DATA REQUEST_RAW_ENCRYPTED_DATA;
typedef struct _RTL_CRITICAL_SECTION_DEBUG RTL_CRITICAL_SECTION_DEBUG;
struct _FULL_PTR_TO_REFID_ELEMENT {struct _FULL_PTR_TO_REFID_ELEMENT *Next;void *Pointer;unsigned int RefId;unsigned __int8 State;};
struct _SEC_WINNT_AUTH_IDENTITY_A {unsigned __int8 *User;unsigned int UserLength;unsigned __int8 *Domain;unsigned int DomainLength;unsigned __int8 *Password;unsigned int PasswordLength;unsigned int Flags;};
struct _SEC_WINNT_AUTH_IDENTITY_W {unsigned __int16 *User;unsigned int UserLength;unsigned __int16 *Domain;unsigned int DomainLength;unsigned __int16 *Password;unsigned int PasswordLength;unsigned int Flags;};
typedef struct _ACCESS_ALLOWED_OBJECT_ACE ACCESS_ALLOWED_OBJECT_ACE;
typedef struct _CERT_ISSUER_SERIAL_NUMBER CERT_ISSUER_SERIAL_NUMBER;
typedef struct _CERT_PRIVATE_KEY_VALIDITY CERT_PRIVATE_KEY_VALIDITY;
typedef struct _CERT_STORE_PROV_FIND_INFO CERT_STORE_PROV_FIND_INFO;
typedef struct _CMSG_CONTENT_ENCRYPT_INFO CMSG_CONTENT_ENCRYPT_INFO;
typedef struct _CREATE_PROCESS_DEBUG_INFO CREATE_PROCESS_DEBUG_INFO;
typedef struct _CRYPTPROTECT_PROMPTSTRUCT CRYPTPROTECT_PROMPTSTRUCT;
typedef struct _CRYPT_PKCS8_EXPORT_PARAMS CRYPT_PKCS8_EXPORT_PARAMS;
typedef struct _CRYPT_PKCS8_IMPORT_PARAMS CRYPT_PKCS8_IMPORT_PARAMS;
typedef struct _CRYPT_VERIFY_MESSAGE_PARA CRYPT_VERIFY_MESSAGE_PARA;
typedef struct tagEMREXTCREATEFONTINDIRECTW EMREXTCREATEFONTINDIRECTW;
typedef struct _EVENTLOG_FULL_INFORMATION EVENTLOG_FULL_INFORMATION;
typedef struct _FULL_PTR_TO_REFID_ELEMENT FULL_PTR_TO_REFID_ELEMENT;
typedef struct _ImageArchitectureHeader IMAGE_ARCHITECTURE_HEADER;
typedef struct _IMAGE_BOUND_FORWARDER_REF IMAGE_BOUND_FORWARDER_REF;
typedef struct _IMAGE_COFF_SYMBOLS_HEADER IMAGE_COFF_SYMBOLS_HEADER;
typedef struct _IMAGE_RESOURCE_DATA_ENTRY IMAGE_RESOURCE_DATA_ENTRY;
typedef struct _IMAGE_ROM_OPTIONAL_HEADER IMAGE_ROM_OPTIONAL_HEADER;
typedef struct _EXIT_PROCESS_DEBUG_INFO *LPEXIT_PROCESS_DEBUG_INFO;
enum MACRO_CONFIRMSAFETYACTION {CONFIRMSAFETYACTION_LOADOBJECT = 0x1,};
enum MACRO_CRYPT_VERIFYCONTEXT {CRYPT_VERIFYCONTEXT = 0xF0000000,CRYPT_NEWKEYSET = 0x8,CRYPT_DELETEKEYSET = 0x10,CRYPT_MACHINE_KEYSET = 0x20,CRYPT_SILENT = 0x40,CRYPT_EXPORTABLE = 0x1,CRYPT_USER_PROTECTED = 0x2,CRYPT_CREATE_SALT = 0x4,CRYPT_UPDATE_KEY = 0x8,CRYPT_NO_SALT = 0x10,CRYPT_PREGEN = 0x40,CRYPT_RECIPIENT = 0x10,CRYPT_INITIATOR = 0x40,CRYPT_ONLINE = 0x80,CRYPT_SF = 0x100,CRYPT_CREATE_IV = 0x200,CRYPT_KEK = 0x400,CRYPT_DATA_KEY = 0x800,CRYPT_VOLATILE = 0x1000,CRYPT_SGCKEY = 0x2000,};
enum MACRO_ENABLE_DISABLE_AUTO {ENABLE_DISABLE_AUTO_OFFLINE = 0xDB,};
enum MACRO_POSTSCRIPT_IDENTIFY {POSTSCRIPT_IDENTIFY = 4117,POSTSCRIPT_INJECTION = 4118,};
enum MACRO_RESOURCEDISPLAYTYPE {RESOURCEDISPLAYTYPE_GENERIC = 0x0,RESOURCEDISPLAYTYPE_DOMAIN = 0x1,RESOURCEDISPLAYTYPE_SERVER = 0x2,RESOURCEDISPLAYTYPE_SHARE = 0x3,RESOURCEDISPLAYTYPE_FILE = 0x4,RESOURCEDISPLAYTYPE_GROUP = 0x5,RESOURCEDISPLAYTYPE_NETWORK = 0x6,RESOURCEDISPLAYTYPE_ROOT = 0x7,RESOURCEDISPLAYTYPE_SHAREADMIN = 0x8,RESOURCEDISPLAYTYPE_DIRECTORY = 0x9,RESOURCEDISPLAYTYPE_TREE = 0xA,RESOURCEDISPLAYTYPE_NDSCONTAINER = 0xB,};
enum MACRO_SECURITY_DESCRIPTOR {SECURITY_DESCRIPTOR_REVISION = 1,SECURITY_DESCRIPTOR_REVISION1 = 1,};
enum MACRO_VARIANT_NOVALUEPROP {VARIANT_NOVALUEPROP = 0x1,VARIANT_ALPHABOOL = 0x2,VARIANT_NOUSEROVERRIDE = 0x4,VARIANT_CALENDAR_HIJRI = 0x8,VARIANT_LOCALBOOL = 0x10,};
typedef struct _7FAA4336E151361F9CD171DE989684F0 NTFS_EXTENDED_VOLUME_DATA;
typedef struct _1DF2F441892C3D46584606B89F66007B OPENCARD_SEARCH_CRITERIAA;
typedef struct _4B26251D75C0D59F22113E7121B4AA5F OPENCARD_SEARCH_CRITERIAW;
typedef struct _ACCESS_DENIED_OBJECT_ACE *PACCESS_DENIED_OBJECT_ACE;
typedef struct _CERT_CHAIN_ENGINE_CONFIG *PCERT_CHAIN_ENGINE_CONFIG;
typedef struct _CERT_CHAIN_POLICY_STATUS *PCERT_CHAIN_POLICY_STATUS;
typedef struct _CERT_CREATE_CONTEXT_PARA *PCERT_CREATE_CONTEXT_PARA;
typedef struct _CERT_KEYGEN_REQUEST_INFO *PCERT_KEYGEN_REQUEST_INFO;
typedef struct _CERT_KEY_ATTRIBUTES_INFO *PCERT_KEY_ATTRIBUTES_INFO;
typedef struct _CERT_PHYSICAL_STORE_INFO *PCERT_PHYSICAL_STORE_INFO;
typedef struct _CERT_POLICY95_QUALIFIER1 *PCERT_POLICY95_QUALIFIER1;
typedef struct _CERT_SIGNED_CONTENT_INFO *PCERT_SIGNED_CONTENT_INFO;
typedef struct _CRYPT_RC2_CBC_PARAMETERS *PCRYPT_RC2_CBC_PARAMETERS;
typedef struct _CRYPT_SMIME_CAPABILITIES *PCRYPT_SMIME_CAPABILITIES;
typedef struct _DECRYPTION_STATUS_BUFFER *PDECRYPTION_STATUS_BUFFER;
typedef struct _DRIVE_LAYOUT_INFORMATION *PDRIVE_LAYOUT_INFORMATION;
typedef struct _ImageArchitectureEntry *PIMAGE_ARCHITECTURE_ENTRY;
typedef struct _IMAGE_RESOURCE_DIRECTORY *PIMAGE_RESOURCE_DIRECTORY;
typedef struct _MEMORY_BASIC_INFORMATION *PMEMORY_BASIC_INFORMATION;
typedef struct _PERF_INSTANCE_DEFINITION *PPERF_INSTANCE_DEFINITION;
typedef struct _PRINTER_NOTIFY_INFO_DATA *PPRINTER_NOTIFY_INFO_DATA;
typedef struct _REPARSE_GUID_DATA_BUFFER *PREPARSE_GUID_DATA_BUFFER;
typedef struct _SID_IDENTIFIER_AUTHORITY *PSID_IDENTIFIER_AUTHORITY;
typedef struct tagSOLE_AUTHENTICATION_INFO *PSOLE_AUTHENTICATION_INFO;
typedef struct tagSOLE_AUTHENTICATION_LIST *PSOLE_AUTHENTICATION_LIST;
typedef struct _READ_ELEMENT_ADDRESS_INFO READ_ELEMENT_ADDRESS_INFO;
typedef struct _SEC_WINNT_AUTH_IDENTITY_A SEC_WINNT_AUTH_IDENTITY_A;
typedef struct _SEC_WINNT_AUTH_IDENTITY_W SEC_WINNT_AUTH_IDENTITY_W;
typedef struct _SET_PARTITION_INFORMATION SET_PARTITION_INFORMATION;
typedef struct _060D6FD956D3EBF205D64C3CA4764571 STARTING_LCN_INPUT_BUFFER;
typedef struct _80E50DFA284ED4BC838B08AAD8EA99BA STARTING_VCN_INPUT_BUFFER;
typedef struct _STORAGE_BUS_RESET_REQUEST STORAGE_BUS_RESET_REQUEST;
typedef struct _TAPE_GET_DRIVE_PARAMETERS TAPE_GET_DRIVE_PARAMETERS;
typedef struct _TAPE_GET_MEDIA_PARAMETERS TAPE_GET_MEDIA_PARAMETERS;
typedef struct _TAPE_SET_DRIVE_PARAMETERS TAPE_SET_DRIVE_PARAMETERS;
typedef struct _TAPE_SET_MEDIA_PARAMETERS TAPE_SET_MEDIA_PARAMETERS;
typedef struct _WIN32_FILE_ATTRIBUTE_DATA WIN32_FILE_ATTRIBUTE_DATA;
typedef struct _WINDOW_BUFFER_SIZE_RECORD WINDOW_BUFFER_SIZE_RECORD;
typedef struct _ACCESS_DENIED_OBJECT_ACE ACCESS_DENIED_OBJECT_ACE;
typedef struct _ACL_REVISION_INFORMATION ACL_REVISION_INFORMATION;
typedef struct _CERT_CHAIN_ENGINE_CONFIG CERT_CHAIN_ENGINE_CONFIG;
typedef struct _CERT_CHAIN_POLICY_STATUS CERT_CHAIN_POLICY_STATUS;
typedef struct _CERT_CREATE_CONTEXT_PARA CERT_CREATE_CONTEXT_PARA;
typedef struct _CERT_KEYGEN_REQUEST_INFO CERT_KEYGEN_REQUEST_INFO;
typedef struct _CERT_KEY_ATTRIBUTES_INFO CERT_KEY_ATTRIBUTES_INFO;
typedef struct _CERT_PHYSICAL_STORE_INFO CERT_PHYSICAL_STORE_INFO;
typedef struct _CERT_POLICY95_QUALIFIER1 CERT_POLICY95_QUALIFIER1;
typedef struct _CERT_SIGNED_CONTENT_INFO CERT_SIGNED_CONTENT_INFO;
typedef struct _CREATE_THREAD_DEBUG_INFO CREATE_THREAD_DEBUG_INFO;
typedef struct _CRYPT_RC2_CBC_PARAMETERS CRYPT_RC2_CBC_PARAMETERS;
typedef struct _CRYPT_SMIME_CAPABILITIES CRYPT_SMIME_CAPABILITIES;
typedef struct _DECRYPTION_STATUS_BUFFER DECRYPTION_STATUS_BUFFER;
typedef struct _DRIVE_LAYOUT_INFORMATION DRIVE_LAYOUT_INFORMATION;
struct IInternetSecurityManager {struct IInternetSecurityManagerVtbl *lpVtbl;};
struct IInternetSecurityMgrSite {struct IInternetSecurityMgrSiteVtbl *lpVtbl;};
typedef struct _ImageArchitectureEntry IMAGE_ARCHITECTURE_ENTRY;
typedef struct _IMAGE_RESOURCE_DIRECTORY IMAGE_RESOURCE_DIRECTORY;
typedef struct _EXIT_THREAD_DEBUG_INFO *LPEXIT_THREAD_DEBUG_INFO;
typedef struct tagMCI_ANIM_WINDOW_PARMSA *LPMCI_ANIM_WINDOW_PARMSA;
typedef struct tagMCI_ANIM_WINDOW_PARMSW *LPMCI_ANIM_WINDOW_PARMSW;
typedef struct tagMCI_OVLY_WINDOW_PARMSA *LPMCI_OVLY_WINDOW_PARMSA;
typedef struct tagMCI_OVLY_WINDOW_PARMSW *LPMCI_OVLY_WINDOW_PARMSW;
typedef IOleInPlaceActiveObject *LPOLEINPLACEACTIVEOBJECT;
typedef struct _PRINTER_NOTIFY_OPTIONS *LPPRINTER_NOTIFY_OPTIONS;
typedef struct _PRINTPROCESSOR_INFO_1A *LPPRINTPROCESSOR_INFO_1A;
typedef struct _PRINTPROCESSOR_INFO_1W *LPPRINTPROCESSOR_INFO_1W;
typedef struct _REMSECURITY_ATTRIBUTES *LPREMSECURITY_ATTRIBUTES;
typedef struct _SERVICE_STATUS_PROCESS *LPSERVICE_STATUS_PROCESS;
enum MACRO_COMPRESSION_FORMAT {COMPRESSION_FORMAT_SPARSE = 0x4000,};
enum MACRO_CREATE_NEW_PROCESS {CREATE_NEW_PROCESS_GROUP = 0x200,CREATE_UNICODE_ENVIRONMENT = 0x400,CREATE_SEPARATE_WOW_VDM = 0x800,CREATE_SHARED_WOW_VDM = 0x1000,CREATE_FORCEDOS = 0x2000,};
enum MACRO_ENCODING_TYPE_MASK {CERT_ENCODING_TYPE_MASK = 0xFFFF,CMSG_ENCODING_TYPE_MASK = 0xFFFF0000,};
enum MACRO_GDICOMMENT_UNICODE {GDICOMMENT_UNICODE_STRING = 0x40,GDICOMMENT_UNICODE_END = 0x80,};
enum MACRO_GETSETPAPERMETRICS {GETSETPAPERMETRICS = 35,};
enum MACRO_GETSETSCREENPARAMS {GETSETSCREENPARAMS = 3072,};
enum MACRO_GETVECTORBRUSHSIZE {GETVECTORBRUSHSIZE = 27,};
enum MACRO_MAXIMUM_ENCRYPTION {MAXIMUM_ENCRYPTION_VALUE = 0x4,};
enum MACRO_MAXIMUM_PROCESSORS {MAXIMUM_PROCESSORS = 32,};
enum MACRO_MIXER_GETLINEINFOF {MIXER_GETLINEINFOF_DESTINATION = 0x0,MIXER_GETLINEINFOF_SOURCE = 0x1,MIXER_GETLINEINFOF_LINEID = 0x2,MIXER_GETLINEINFOF_COMPONENTTYPE = 0x3,MIXER_GETLINEINFOF_TARGETTYPE = 0x4,MIXER_GETLINEINFOF_QUERYMASK = 0xF,};
enum MACRO_MMIO_DEFAULTBUFFER {MMIO_DEFAULTBUFFER = 8192,};
enum MACRO_SERVICE_BESTEFFORT {SERVICE_BESTEFFORT = 0x80010000,SERVICE_CONTROLLEDLOAD = 0x80020000,SERVICE_GUARANTEED = 0x80040000,SERVICE_QUALITATIVE = 0x80200000,SERVICE_NO_TRAFFIC_CONTROL = 0x81000000,SERVICE_NO_QOS_SIGNALING = 0x40000000,};
enum MACRO_WAVE_INVALIDFORMAT {WAVE_INVALIDFORMAT = 0x0,WAVE_FORMAT_1M08 = 0x1,WAVE_FORMAT_1S08 = 0x2,WAVE_FORMAT_1M16 = 0x4,WAVE_FORMAT_1S16 = 0x8,WAVE_FORMAT_2M08 = 0x10,WAVE_FORMAT_2S08 = 0x20,WAVE_FORMAT_2M16 = 0x40,WAVE_FORMAT_2S16 = 0x80,WAVE_FORMAT_4M08 = 0x100,WAVE_FORMAT_4S08 = 0x200,WAVE_FORMAT_4M16 = 0x400,WAVE_FORMAT_4S16 = 0x800,WAVE_FORMAT_PCM = 0x1,};
typedef struct _MEMORY_BASIC_INFORMATION MEMORY_BASIC_INFORMATION;
typedef struct _MIDL_STUBLESS_PROXY_INFO MIDL_STUBLESS_PROXY_INFO;
typedef struct _OUTPUT_DEBUG_STRING_INFO OUTPUT_DEBUG_STRING_INFO;
typedef struct _5C0C72291B37B22FE700A61795928759 *PBULK_SECURITY_TEST_DATA;
typedef struct _CERT_ACCESS_DESCRIPTION *PCERT_ACCESS_DESCRIPTION;
typedef struct _CERT_X942_DH_PARAMETERS *PCERT_X942_DH_PARAMETERS;
typedef struct _CHANGER_EXCHANGE_MEDIUM *PCHANGER_EXCHANGE_MEDIUM;
typedef struct _CMSG_CMS_RECIPIENT_INFO *PCMSG_CMS_RECIPIENT_INFO;
typedef struct _CMSG_HASHED_ENCODE_INFO *PCMSG_HASHED_ENCODE_INFO;
typedef struct _CMSG_SIGNED_ENCODE_INFO *PCMSG_SIGNED_ENCODE_INFO;
typedef struct _CMSG_SIGNER_ENCODE_INFO *PCMSG_SIGNER_ENCODE_INFO;
typedef struct _284877062F9D14F112F3A0D6BC9583DD *PCREATE_USN_JOURNAL_DATA;
typedef struct _CRYPT_HASH_MESSAGE_PARA *PCRYPT_HASH_MESSAGE_PARA;
typedef struct _CRYPT_SIGN_MESSAGE_PARA *PCRYPT_SIGN_MESSAGE_PARA;
typedef struct _CTL_VERIFY_USAGE_STATUS *PCTL_VERIFY_USAGE_STATUS;
typedef struct _9FEC9D2A03C37051BDB5508CF5CADF1F *PDELETE_USN_JOURNAL_DATA;
typedef struct tagEMRMODIFYWORLDTRANSFORM *PEMRMODIFYWORLDTRANSFORM;
typedef struct _PERF_INSTANCE_DEFINITION PERF_INSTANCE_DEFINITION;
typedef struct _FILE_NOTIFY_INFORMATION *PFILE_NOTIFY_INFORMATION;
typedef struct _HTTPSPolicyCallbackData *PHTTPSPolicyCallbackData;
typedef struct _IMAGE_OPTIONAL_HEADER *PIMAGE_OPTIONAL_HEADER32;
typedef struct _IMAGE_OPTIONAL_HEADER64 *PIMAGE_OPTIONAL_HEADER64;
typedef struct _DCD76CF5A248684E95EEC87F56AA655C *PNTFS_VOLUME_DATA_BUFFER;
typedef struct _PERF_COUNTER_DEFINITION *PPERF_COUNTER_DEFINITION;
typedef struct _PRINTER_NOTIFY_INFO_DATA PRINTER_NOTIFY_INFO_DATA;
typedef struct _62EC1DAD6DB92F8723AD0A50B2259449 *PRPC_CLIENT_INFORMATION1;
typedef struct _STORAGE_PREDICT_FAILURE *PSTORAGE_PREDICT_FAILURE;
typedef struct _SYSTEM_ALARM_OBJECT_ACE *PSYSTEM_ALARM_OBJECT_ACE;
typedef struct _SYSTEM_AUDIT_OBJECT_ACE *PSYSTEM_AUDIT_OBJECT_ACE;
typedef struct _REPARSE_GUID_DATA_BUFFER REPARSE_GUID_DATA_BUFFER;
typedef void *RPC_AUTH_IDENTITY_HANDLE;
typedef void __stdcall RPC_SECURITY_CALLBACK_FN(void *Context);
typedef struct _SERVICE_FAILURE_ACTIONSA SERVICE_FAILURE_ACTIONSA;
typedef struct _SERVICE_FAILURE_ACTIONSW SERVICE_FAILURE_ACTIONSW;
typedef struct _SID_IDENTIFIER_AUTHORITY SID_IDENTIFIER_AUTHORITY;
typedef struct tagSOLE_AUTHENTICATION_INFO SOLE_AUTHENTICATION_INFO;
typedef struct tagSOLE_AUTHENTICATION_LIST SOLE_AUTHENTICATION_LIST;
struct _CERT_FORTEZZA_DATA_PROP {unsigned __int8 SerialNumber[8];int CertIndex;unsigned __int8 CertLabel[36];};
struct _ImageArchitectureHeader {unsigned __int32 AmaskValue : 1;__int32 : 7;unsigned __int32 AmaskShift : 8;__int32 : 16;unsigned int FirstEntryRVA;};
enum _TOKEN_INFORMATION_CLASS {TokenUser = 0x1,TokenGroups = 0x2,TokenPrivileges = 0x3,TokenOwner = 0x4,TokenPrimaryGroup = 0x5,TokenDefaultDacl = 0x6,TokenSource = 0x7,TokenType = 0x8,TokenImpersonationLevel = 0x9,TokenStatistics = 0xA,TokenRestrictedSids = 0xB,TokenSessionId = 0xC,};
enum __MIDL_ICodeInstall_0001 {CIP_DISK_FULL = 0x0,CIP_ACCESS_DENIED = 0x1,CIP_NEWER_VERSION_EXISTS = 0x2,CIP_OLDER_VERSION_EXISTS = 0x3,CIP_NAME_CONFLICT = 0x4,CIP_TRUST_VERIFICATION_COMPONENT_MISSING = 0x5,CIP_EXE_SELF_REGISTERATION_TIMEOUT = 0x6,CIP_UNSAFE_TO_ABORT = 0x7,CIP_NEED_REBOOT = 0x8,};
typedef struct _5C0C72291B37B22FE700A61795928759 BULK_SECURITY_TEST_DATA;
typedef struct _CERT_ACCESS_DESCRIPTION CERT_ACCESS_DESCRIPTION;
typedef struct _CERT_FORTEZZA_DATA_PROP CERT_FORTEZZA_DATA_PROP;
typedef struct _CERT_X942_DH_PARAMETERS CERT_X942_DH_PARAMETERS;
typedef struct _CHANGER_EXCHANGE_MEDIUM CHANGER_EXCHANGE_MEDIUM;
typedef struct _CMSG_CMS_RECIPIENT_INFO CMSG_CMS_RECIPIENT_INFO;
typedef struct _CMSG_HASHED_ENCODE_INFO CMSG_HASHED_ENCODE_INFO;
typedef struct _CMSG_SIGNED_ENCODE_INFO CMSG_SIGNED_ENCODE_INFO;
typedef struct _CMSG_SIGNER_ENCODE_INFO CMSG_SIGNER_ENCODE_INFO;
typedef struct _284877062F9D14F112F3A0D6BC9583DD CREATE_USN_JOURNAL_DATA;
typedef struct _CRYPT_HASH_MESSAGE_PARA CRYPT_HASH_MESSAGE_PARA;
typedef struct _CRYPT_SIGN_MESSAGE_PARA CRYPT_SIGN_MESSAGE_PARA;
typedef struct _CTL_VERIFY_USAGE_STATUS CTL_VERIFY_USAGE_STATUS;
typedef struct _9FEC9D2A03C37051BDB5508CF5CADF1F DELETE_USN_JOURNAL_DATA;
struct DOMFreeThreadedDocument;
typedef struct tagEMRMODIFYWORLDTRANSFORM EMRMODIFYWORLDTRANSFORM;
typedef struct _EXIT_PROCESS_DEBUG_INFO EXIT_PROCESS_DEBUG_INFO;
typedef struct _FILE_NOTIFY_INFORMATION FILE_NOTIFY_INFORMATION;
typedef void *(__stdcall *GENERIC_BINDING_ROUTINE)(void *);
typedef struct _HTTPSPolicyCallbackData HTTPSPolicyCallbackData;
typedef struct _IMAGE_IMPORT_DESCRIPTOR IMAGE_IMPORT_DESCRIPTOR;
typedef struct _IMAGE_OPTIONAL_HEADER IMAGE_OPTIONAL_HEADER32;
typedef struct _IMAGE_OPTIONAL_HEADER64 IMAGE_OPTIONAL_HEADER64;
enum IMPORT_OBJECT_NAME_TYPE {IMPORT_OBJECT_ORDINAL = 0x0,IMPORT_OBJECT_NAME = 0x1,IMPORT_OBJECT_NAME_NO_PREFIX = 0x2,IMPORT_OBJECT_NAME_UNDECORATE = 0x3,};
struct IOleInPlaceActiveObject {struct IOleInPlaceActiveObjectVtbl *lpVtbl;};
struct IXMLDOMDocumentFragment {struct IXMLDOMDocumentFragmentVtbl *lpVtbl;};
typedef IEncodingFilterFactory *LPENCODINGFILTERFACTORY;
typedef IInternetProtocolInfo *LPIINTERNETPROTOCOLINFO;
typedef IInternetProtocolRoot *LPIINTERNETPROTOCOLROOT;
typedef IInternetProtocolSink *LPIINTERNETPROTOCOLSINK;
typedef IInternetThreadSwitch *LPIINTERNETTHREADSWITCH;
typedef struct tagMCI_ANIM_UPDATE_PARMS *LPMCI_ANIM_UPDATE_PARMS;
typedef struct tagMCI_WAVE_DELETE_PARMS *LPMCI_WAVE_DELETE_PARMS;
typedef struct tagPIXELFORMATDESCRIPTOR *LPPIXELFORMATDESCRIPTOR;
typedef struct _QUERY_SERVICE_CONFIGA *LPQUERY_SERVICE_CONFIGA;
typedef struct _QUERY_SERVICE_CONFIGW *LPQUERY_SERVICE_CONFIGW;
typedef struct _TIME_ZONE_INFORMATION *LPTIME_ZONE_INFORMATION;
typedef struct _UNLOAD_DLL_DEBUG_INFO *LPUNLOAD_DLL_DEBUG_INFO;
enum MACRO_ACCESS_STICKYKEYS {ACCESS_STICKYKEYS = 0x1,ACCESS_FILTERKEYS = 0x2,ACCESS_MOUSEKEYS = 0x3,};
enum MACRO_CALLBACK_TYPEMASK {CALLBACK_TYPEMASK = 0x70000,CALLBACK_NULL = 0x0,CALLBACK_WINDOW = 0x10000,CALLBACK_TASK = 0x20000,CALLBACK_FUNCTION = 0x30000,CALLBACK_THREAD = 0x20000,CALLBACK_EVENT = 0x50000,};
enum MACRO_ENABLEPAIRKERNING {ENABLEPAIRKERNING = 769,};
enum MACRO_GETPRINTINGOFFSET {GETPRINTINGOFFSET = 13,};
enum MACRO_GETSETPRINTORIENT {GETSETPRINTORIENT = 30,};
enum MACRO_GETTRACKKERNTABLE {GETTRACKKERNTABLE = 259,EXTTEXTOUT = 512,};
enum MACRO_IOCTL_DISK_UPDATE {IOCTL_DISK_UPDATE_DRIVE_SIZE = 0x7C0C8,IOCTL_DISK_GROW_PARTITION = 0x7C0D0,IOCTL_DISK_GET_CACHE_INFORMATION = 0x740D4,IOCTL_DISK_SET_CACHE_INFORMATION = 0x7C0D8,IOCTL_DISK_DELETE_DRIVE_LAYOUT = 0x7C100,IOCTL_DISK_FORMAT_DRIVE = 0x7C3CC,IOCTL_DISK_SENSE_DEVICE = 0x703E0,IOCTL_DISK_CHECK_VERIFY = 0x74800,IOCTL_DISK_MEDIA_REMOVAL = 0x74804,IOCTL_DISK_EJECT_MEDIA = 0x74808,IOCTL_DISK_LOAD_MEDIA = 0x7480C,IOCTL_DISK_RESERVE = 0x74810,IOCTL_DISK_RELEASE = 0x74814,IOCTL_DISK_FIND_NEW_DEVICES = 0x74818,IOCTL_DISK_GET_MEDIA_TYPES = 0x70C00,};
enum MACRO_MAXIMUM_SUPPORTED {MAXIMUM_SUPPORTED_EXTENSION = 512,};
enum MACRO_MAXSTRETCHBLTMODE {MAXSTRETCHBLTMODE = 4,};
enum MACRO_PBT_APMBATTERYLOW {PBT_APMBATTERYLOW = 0x9,PBT_APMPOWERSTATUSCHANGE = 0xA,PBT_APMOEMEVENT = 0xB,PBT_APMRESUMEAUTOMATIC = 0x12,};
enum MACRO_PSM_SETFINISHTEXT {PSM_SETFINISHTEXT = 1139,PSM_SETHEADERTITLE = 1149,PSM_SETHEADERSUBTITLE = 1151,};
enum MACRO_SECURITY_PROTOCOL {SECURITY_PROTOCOL_NONE = 0x0,};
enum MACRO_SELECTPAPERSOURCE {SELECTPAPERSOURCE = 18,};
enum MACRO_SW_SCROLLCHILDREN {SW_SCROLLCHILDREN = 0x1,SW_INVALIDATE = 0x2,SW_ERASE = 0x4,SW_SMOOTHSCROLL = 0x10,};
enum MACRO_URLACTION_ACTIVEX {URLACTION_ACTIVEX_OVERRIDE_OBJECT_SAFETY = 0x1201,URLACTION_ACTIVEX_OVERRIDE_DATA_SAFETY = 0x1202,URLACTION_ACTIVEX_OVERRIDE_SCRIPT_SAFETY = 0x1203,URLACTION_SCRIPT_OVERRIDE_SAFETY = 0x1401,URLACTION_ACTIVEX_CONFIRM_NOOBJECTSAFETY = 0x1204,URLACTION_ACTIVEX_TREATASUNTRUSTED = 0x1205,URLACTION_ACTIVEX_CURR_MAX = 0x1205,URLACTION_ACTIVEX_MAX = 0x13FF,URLACTION_SCRIPT_MIN = 0x1400,URLACTION_SCRIPT_RUN = 0x1400,URLACTION_SCRIPT_JAVA_USE = 0x1402,URLACTION_SCRIPT_SAFE_ACTIVEX = 0x1405,URLACTION_CROSS_DOMAIN_DATA = 0x1406,URLACTION_SCRIPT_PASTE = 0x1407,URLACTION_SCRIPT_CURR_MAX = 0x1407,URLACTION_SCRIPT_MAX = 0x15FF,URLACTION_HTML_MIN = 0x1600,URLACTION_HTML_SUBMIT_FORMS = 0x1601,URLACTION_HTML_SUBMIT_FORMS_FROM = 0x1602,URLACTION_HTML_SUBMIT_FORMS_TO = 0x1603,URLACTION_HTML_FONT_DOWNLOAD = 0x1604,URLACTION_HTML_JAVA_RUN = 0x1605,URLACTION_HTML_USERDATA_SAVE = 0x1606,URLACTION_HTML_SUBFRAME_NAVIGATE = 0x1607,URLACTION_HTML_CURR_MAX = 0x1607,URLACTION_HTML_MAX = 0x17FF,URLACTION_SHELL_MIN = 0x1800,URLACTION_SHELL_INSTALL_DTITEMS = 0x1800,URLACTION_SHELL_MOVE_OR_COPY = 0x1802,URLACTION_SHELL_FILE_DOWNLOAD = 0x1803,URLACTION_SHELL_VERB = 0x1804,URLACTION_SHELL_WEBVIEW_VERB = 0x1805,URLACTION_SHELL_CURR_MAX = 0x1805,URLACTION_SHELL_MAX = 0x19FF,URLACTION_NETWORK_MIN = 0x1A00,URLACTION_CREDENTIALS_USE = 0x1A00,};
enum MACRO_URLACTION_CHANNEL {URLACTION_CHANNEL_SOFTDIST_MAX = 0x1EFF,};
enum MACRO_URLACTION_COOKIES {URLACTION_COOKIES = 0x1A02,URLACTION_COOKIES_SESSION = 0x1A03,URLACTION_NETWORK_CURR_MAX = 0x1A03,URLACTION_NETWORK_MAX = 0x1BFF,URLACTION_JAVA_MIN = 0x1C00,URLACTION_JAVA_PERMISSIONS = 0x1C00,};
enum MACRO_URLPOLICY_CHANNEL {URLPOLICY_CHANNEL_SOFTDIST_PROHIBIT = 0x10000,URLPOLICY_CHANNEL_SOFTDIST_PRECACHE = 0x20000,URLPOLICY_CHANNEL_SOFTDIST_AUTOINSTALL = 0x30000,};
enum MACRO_WC_COMPOSITECHECK {WC_COMPOSITECHECK = 0x200,WC_DISCARDNS = 0x10,WC_SEPCHARS = 0x20,WC_DEFAULTCHAR = 0x40,WC_NO_BEST_FIT_CHARS = 0x400,};
enum MACRO_X509_UNICODE_NAME {X509_UNICODE_NAME_VALUE = 24,X509_ANY_STRING = 6,X509_UNICODE_ANY_STRING = 24,X509_OCTET_STRING = 25,X509_BITS = 26,X509_INTEGER = 27,X509_MULTI_BYTE_INTEGER = 28,X509_ENUMERATED = 29,X509_CHOICE_OF_TIME = 30,X509_AUTHORITY_KEY_ID2 = 31,X509_AUTHORITY_INFO_ACCESS = 32,X509_CRL_REASON_CODE = 29,};
typedef struct _DCD76CF5A248684E95EEC87F56AA655C NTFS_VOLUME_DATA_BUFFER;
typedef struct _CERT_CHAIN_POLICY_PARA *PCERT_CHAIN_POLICY_PARA;
typedef struct _CERT_REVOCATION_STATUS *PCERT_REVOCATION_STATUS;
typedef struct _CERT_SYSTEM_STORE_INFO *PCERT_SYSTEM_STORE_INFO;
typedef struct _CHANGER_ELEMENT_STATUS *PCHANGER_ELEMENT_STATUS;
typedef struct _CMSG_CTRL_DECRYPT_PARA *PCMSG_CTRL_DECRYPT_PARA;
typedef struct _CRYPT_PRIVATE_KEY_INFO *PCRYPT_PRIVATE_KEY_INFO;
typedef struct _CRYPT_SMIME_CAPABILITY *PCRYPT_SMIME_CAPABILITY;
typedef struct _DISK_CACHE_INFORMATION *PDISK_CACHE_INFORMATION;
typedef struct _DISK_CONTROLLER_NUMBER *PDISK_CONTROLLER_NUMBER;
typedef struct tagCOLORCORRECTPALETTE *PEMRCOLORCORRECTPALETTE;
typedef struct tagEMRCREATEBRUSHINDIRECT *PEMRCREATEBRUSHINDIRECT;
typedef struct _ENCRYPTION_CERTIFICATE *PENCRYPTION_CERTIFICATE;
typedef struct _PERF_COUNTER_DEFINITION PERF_COUNTER_DEFINITION;
typedef struct _FILE_SET_SPARSE_BUFFER *PFILE_SET_SPARSE_BUFFER;
typedef struct _GET_CHANGER_PARAMETERS *PGET_CHANGER_PARAMETERS;
typedef struct _5C484BA576E4B3479DA7CECC9170D175 *PHFS_INFORMATION_BUFFER;
typedef struct _IMAGE_EXPORT_DIRECTORY *PIMAGE_EXPORT_DIRECTORY;
typedef struct _IMAGE_FUNCTION_ENTRY64 *PIMAGE_FUNCTION_ENTRY64;
typedef struct tagMCI_ANIM_WINDOW_PARMSA *PMCI_ANIM_WINDOW_PARMSA;
typedef struct tagMCI_ANIM_WINDOW_PARMSW *PMCI_ANIM_WINDOW_PARMSW;
typedef struct tagMCI_OVLY_WINDOW_PARMSA *PMCI_OVLY_WINDOW_PARMSA;
typedef struct tagMCI_OVLY_WINDOW_PARMSW *PMCI_OVLY_WINDOW_PARMSW;
typedef struct _E1FC672EFA0154DDDEED24E20FAA5FC7 *PMENUITEMTEMPLATEHEADER;
typedef struct _MESSAGE_RESOURCE_BLOCK *PMESSAGE_RESOURCE_BLOCK;
typedef struct _MESSAGE_RESOURCE_ENTRY *PMESSAGE_RESOURCE_ENTRY;
typedef struct _PRINTER_NOTIFY_OPTIONS *PPRINTER_NOTIFY_OPTIONS;
typedef struct _PRINTPROCESSOR_INFO_1A *PPRINTPROCESSOR_INFO_1A;
typedef struct _PRINTPROCESSOR_INFO_1W *PPRINTPROCESSOR_INFO_1W;
typedef struct _REMSECURITY_ATTRIBUTES *PREMSECURITY_ATTRIBUTES;
typedef struct _SE_IMPERSONATION_STATE *PSE_IMPERSONATION_STATE;
typedef struct _XMIT_ROUTINE_QUINTUPLE *PXMIT_ROUTINE_QUINTUPLE;
enum RPC_ADDRESS_CHANGE_TYPE {PROTOCOL_NOT_LOADED = 0x1,PROTOCOL_LOADED = 0x2,PROTOCOL_ADDRESS_CHANGE = 0x3,};
typedef struct _62EC1DAD6DB92F8723AD0A50B2259449 RPC_CLIENT_INFORMATION1;
struct SERVICE_STATUS_HANDLE__ {int unused;};
typedef struct _STORAGE_PREDICT_FAILURE STORAGE_PREDICT_FAILURE;
typedef struct _SYSTEM_ALARM_OBJECT_ACE SYSTEM_ALARM_OBJECT_ACE;
typedef struct _SYSTEM_AUDIT_OBJECT_ACE SYSTEM_AUDIT_OBJECT_ACE;
enum _GET_FILEEX_INFO_LEVELS {GetFileExInfoStandard = 0x0,GetFileExMaxInfoLevel = 0x1,};
enum _RPC_NOTIFICATION_TYPES {RpcNotificationTypeNone = 0x0,RpcNotificationTypeEvent = 0x1,RpcNotificationTypeApc = 0x2,RpcNotificationTypeIoc = 0x3,RpcNotificationTypeHwnd = 0x4,RpcNotificationTypeCallback = 0x5,};
struct _thread_adoption_data_s {char __dummy;};
typedef struct _CERT_CHAIN_POLICY_PARA CERT_CHAIN_POLICY_PARA;
typedef struct _CERT_REVOCATION_STATUS CERT_REVOCATION_STATUS;
typedef struct _CERT_SYSTEM_STORE_INFO CERT_SYSTEM_STORE_INFO;
typedef struct _CHANGER_ELEMENT_STATUS CHANGER_ELEMENT_STATUS;
typedef struct _CMSG_CTRL_DECRYPT_PARA CMSG_CTRL_DECRYPT_PARA;
typedef struct _CRYPT_PRIVATE_KEY_INFO CRYPT_PRIVATE_KEY_INFO;
typedef struct _CRYPT_SMIME_CAPABILITY CRYPT_SMIME_CAPABILITY;
typedef struct _DISK_CACHE_INFORMATION DISK_CACHE_INFORMATION;
typedef struct _DISK_CONTROLLER_NUMBER DISK_CONTROLLER_NUMBER;
typedef struct tagCOLORCORRECTPALETTE EMRCOLORCORRECTPALETTE;
typedef struct tagEMRCREATEBRUSHINDIRECT EMRCREATEBRUSHINDIRECT;
typedef struct _ENCRYPTION_CERTIFICATE ENCRYPTION_CERTIFICATE;
typedef struct _EXIT_THREAD_DEBUG_INFO EXIT_THREAD_DEBUG_INFO;
typedef struct _FILE_SET_SPARSE_BUFFER FILE_SET_SPARSE_BUFFER;
typedef void (__stdcall *GENERIC_UNBIND_ROUTINE)(void *, unsigned __int8 *);
typedef struct _GET_CHANGER_PARAMETERS GET_CHANGER_PARAMETERS;
typedef struct _5C484BA576E4B3479DA7CECC9170D175 HFS_INFORMATION_BUFFER;
struct IAsyncRpcChannelBuffer {struct IAsyncRpcChannelBufferVtbl *lpVtbl;};
struct IEncodingFilterFactory {struct IEncodingFilterFactoryVtbl *lpVtbl;};
typedef struct _IMAGE_EXPORT_DIRECTORY IMAGE_EXPORT_DIRECTORY;
typedef struct _IMAGE_FUNCTION_ENTRY64 IMAGE_FUNCTION_ENTRY64;
struct IReleaseMarshalBuffers {struct IReleaseMarshalBuffersVtbl *lpVtbl;};
struct IXMLDOMEntityReference {struct IXMLDOMEntityReferenceVtbl *lpVtbl;};
typedef struct _ENUM_SERVICE_STATUSA *LPENUM_SERVICE_STATUSA;
typedef struct _ENUM_SERVICE_STATUSW *LPENUM_SERVICE_STATUSW;
typedef struct _EXCEPTION_DEBUG_INFO *LPEXCEPTION_DEBUG_INFO;
typedef IGlobalInterfaceTable *LPGLOBALINTERFACETABLE;
typedef struct tagLAYERPLANEDESCRIPTOR *LPLAYERPLANEDESCRIPTOR;
typedef struct tagMCI_ANIM_OPEN_PARMSA *LPMCI_ANIM_OPEN_PARMSA;
typedef struct tagMCI_ANIM_OPEN_PARMSW *LPMCI_ANIM_OPEN_PARMSW;
typedef struct tagMCI_GETDEVCAPS_PARMS *LPMCI_GETDEVCAPS_PARMS;
typedef struct tagMCI_OVLY_LOAD_PARMSA *LPMCI_OVLY_LOAD_PARMSA;
typedef struct tagMCI_OVLY_LOAD_PARMSW *LPMCI_OVLY_LOAD_PARMSW;
typedef struct tagMCI_OVLY_OPEN_PARMSA *LPMCI_OVLY_OPEN_PARMSA;
typedef struct tagMCI_OVLY_OPEN_PARMSW *LPMCI_OVLY_OPEN_PARMSW;
typedef struct tagMCI_OVLY_SAVE_PARMSA *LPMCI_OVLY_SAVE_PARMSA;
typedef struct tagMCI_OVLY_SAVE_PARMSW *LPMCI_OVLY_SAVE_PARMSW;
typedef struct tagMCI_VD_ESCAPE_PARMSA *LPMCI_VD_ESCAPE_PARMSA;
typedef struct tagMCI_VD_ESCAPE_PARMSW *LPMCI_VD_ESCAPE_PARMSW;
typedef struct tagMCI_WAVE_OPEN_PARMSA *LPMCI_WAVE_OPEN_PARMSA;
typedef struct tagMCI_WAVE_OPEN_PARMSW *LPMCI_WAVE_OPEN_PARMSW;
typedef struct _NETCONNECTINFOSTRUCT *LPNETCONNECTINFOSTRUCT;
typedef struct _PRINTER_ENUM_VALUESA *LPPRINTER_ENUM_VALUESA;
typedef struct _PRINTER_ENUM_VALUESW *LPPRINTER_ENUM_VALUESW;
typedef struct _SERVICE_DESCRIPTIONA *LPSERVICE_DESCRIPTIONA;
typedef struct _SERVICE_DESCRIPTIONW *LPSERVICE_DESCRIPTIONW;
typedef struct _SERVICE_TABLE_ENTRYA *LPSERVICE_TABLE_ENTRYA;
typedef struct _SERVICE_TABLE_ENTRYW *LPSERVICE_TABLE_ENTRYW;
typedef struct _UNIVERSAL_NAME_INFOA *LPUNIVERSAL_NAME_INFOA;
typedef struct _UNIVERSAL_NAME_INFOW *LPUNIVERSAL_NAME_INFOW;
typedef struct _WSAServiceClassInfoA *LPWSASERVICECLASSINFOA;
typedef struct _WSAServiceClassInfoW *LPWSASERVICECLASSINFOW;
enum MACRO_APPCLASS_MONITOR {APPCLASS_MONITOR = 0x1,XTYP_MONITOR = 0x80F2,};
enum MACRO_CREATE_BREAKAWAY {CREATE_BREAKAWAY_FROM_JOB = 0x1000000,CREATE_WITH_USERPROFILE = 0x2000000,CREATE_DEFAULT_ERROR_MODE = 0x4000000,CREATE_NO_WINDOW = 0x8000000,};
enum MACRO_CREATE_SUSPENDED {CREATE_SUSPENDED = 0x4,};
enum MACRO_ENUMPAPERMETRICS {ENUMPAPERMETRICS = 34,};
enum MACRO_EXCEPTION_ACCESS {EXCEPTION_ACCESS_VIOLATION = 3221225477,EXCEPTION_DATATYPE_MISALIGNMENT = 2147483650,EXCEPTION_BREAKPOINT = 2147483651,EXCEPTION_SINGLE_STEP = 2147483652,EXCEPTION_ARRAY_BOUNDS_EXCEEDED = 3221225612,EXCEPTION_FLT_DENORMAL_OPERAND = 3221225613,EXCEPTION_FLT_DIVIDE_BY_ZERO = 3221225614,EXCEPTION_FLT_INEXACT_RESULT = 3221225615,EXCEPTION_FLT_INVALID_OPERATION = 3221225616,EXCEPTION_FLT_OVERFLOW = 3221225617,EXCEPTION_FLT_STACK_CHECK = 3221225618,EXCEPTION_FLT_UNDERFLOW = 3221225619,EXCEPTION_INT_DIVIDE_BY_ZERO = 3221225620,EXCEPTION_INT_OVERFLOW = 3221225621,EXCEPTION_PRIV_INSTRUCTION = 3221225622,EXCEPTION_IN_PAGE_ERROR = 3221225478,EXCEPTION_ILLEGAL_INSTRUCTION = 3221225501,EXCEPTION_NONCONTINUABLE_EXCEPTION = 3221225509,EXCEPTION_STACK_OVERFLOW = 3221225725,EXCEPTION_INVALID_DISPOSITION = 3221225510,EXCEPTION_GUARD_PAGE = 2147483649,EXCEPTION_INVALID_HANDLE = 3221225480,};
enum MACRO_FILE_ENCRYPTABLE {FILE_ENCRYPTABLE = 0,FILE_IS_ENCRYPTED = 1,FILE_SYSTEM_ATTR = 2,FILE_ROOT_DIR = 3,FILE_SYSTEM_DIR = 4,FILE_UNKNOWN = 5,FILE_SYSTEM_NOT_SUPPORT = 6,FILE_USER_DISALLOWED = 7,FILE_READ_ONLY = 8,FILE_DIR_DISALLOWED = 9,};
enum MACRO_GETPAIRKERNTABLE {GETPAIRKERNTABLE = 258,};
enum MACRO_GETSCALINGFACTOR {GETSCALINGFACTOR = 14,};
enum MACRO_GETVECTORPENSIZE {GETVECTORPENSIZE = 26,};
enum MACRO_MARSHALINTERFACE {MARSHALINTERFACE_MIN = 500,};
enum MACRO_MAXGETHOSTSTRUCT {MAXGETHOSTSTRUCT = 1024,};
enum MACRO_MAX_COMPUTERNAME {MAX_COMPUTERNAME_LENGTH = 15,};
enum MACRO_MULTIFILEOPENORD {MULTIFILEOPENORD = 1537,};
enum MACRO_NEWFILEOPENV2ORD {NEWFILEOPENV2ORD = 1552,};
enum MACRO_SECURITY_CONTEXT {SECURITY_CONTEXT_TRACKING = 0x40000,SECURITY_EFFECTIVE_ONLY = 0x80000,SECURITY_SQOS_PRESENT = 0x100000,SECURITY_VALID_SQOS_FLAGS = 0x1F0000,};
enum MACRO_SECURITY_DYNAMIC {SECURITY_DYNAMIC_TRACKING = 1,SECURITY_STATIC_TRACKING = 0,};
enum MACRO_SERVICE_MULTIPLE {SERVICE_MULTIPLE = 0x1,};
enum MACRO_SETALLJUSTVALUES {SETALLJUSTVALUES = 771,};
enum MACRO_SPCLPASSTHROUGH2 {SPCLPASSTHROUGH2 = 4568,};
enum MACRO_SW_PARENTCLOSING {SW_PARENTCLOSING = 1,SW_OTHERZOOM = 2,SW_PARENTOPENING = 3,SW_OTHERUNZOOM = 4,};
enum MACRO_WS_ACTIVECAPTION {WS_ACTIVECAPTION = 0x1,};
typedef struct tagMCI_ANIM_WINDOW_PARMSA MCI_ANIM_WINDOW_PARMSA;
typedef struct tagMCI_ANIM_WINDOW_PARMSW MCI_ANIM_WINDOW_PARMSW;
typedef struct tagMCI_OVLY_WINDOW_PARMSA MCI_OVLY_WINDOW_PARMSA;
typedef struct tagMCI_OVLY_WINDOW_PARMSW MCI_OVLY_WINDOW_PARMSW;
typedef struct _E1FC672EFA0154DDDEED24E20FAA5FC7 MENUITEMTEMPLATEHEADER;
typedef struct _MESSAGE_RESOURCE_BLOCK MESSAGE_RESOURCE_BLOCK;
typedef struct _MESSAGE_RESOURCE_ENTRY MESSAGE_RESOURCE_ENTRY;
typedef struct _CRYPT_SEQUENCE_OF_ANY *PCRYPT_SEQUENCE_OF_ANY;
typedef struct _CRYPT_X942_OTHER_INFO *PCRYPT_X942_OTHER_INFO;
typedef struct _CTL_FIND_SUBJECT_PARA *PCTL_FIND_SUBJECT_PARA;
typedef struct _CTL_VERIFY_USAGE_PARA *PCTL_VERIFY_USAGE_PARA;
typedef struct tagCOLORMATCHTOTARGET *PEMRCOLORMATCHTOTARGET;
typedef struct tagEMRSCALEVIEWPORTEXTEX *PEMRSCALEVIEWPORTEXTEX;
typedef struct tagEMRSETCOLORADJUSTMENT *PEMRSETCOLORADJUSTMENT;
typedef struct _FILESYSTEM_STATISTICS *PFILESYSTEM_STATISTICS;
typedef struct _IMAGE_DEBUG_DIRECTORY *PIMAGE_DEBUG_DIRECTORY;
typedef struct tagMCI_ANIM_UPDATE_PARMS *PMCI_ANIM_UPDATE_PARMS;
typedef struct tagMCI_WAVE_DELETE_PARMS *PMCI_WAVE_DELETE_PARMS;
typedef struct _MESSAGE_RESOURCE_DATA *PMESSAGE_RESOURCE_DATA;
typedef struct _PARTITION_INFORMATION *PPARTITION_INFORMATION;
typedef struct tagPIXELFORMATDESCRIPTOR *PPIXELFORMATDESCRIPTOR;
typedef struct _PREVENT_MEDIA_REMOVAL *PPREVENT_MEDIA_REMOVAL;
typedef struct _CBE416C4EAAA19179E77E4054907ADFF *PREAD_USN_JOURNAL_DATA;
typedef struct _PRINTER_NOTIFY_OPTIONS PRINTER_NOTIFY_OPTIONS;
typedef struct _PRINTPROCESSOR_INFO_1A PRINTPROCESSOR_INFO_1A;
typedef struct _PRINTPROCESSOR_INFO_1W PRINTPROCESSOR_INFO_1W;
typedef struct _RPC_SYNTAX_IDENTIFIER *PRPC_SYNTAX_IDENTIFIER;
typedef struct _STORAGE_DEVICE_NUMBER *PSTORAGE_DEVICE_NUMBER;
typedef struct _TAPE_CREATE_PARTITION *PTAPE_CREATE_PARTITION;
typedef struct _TIME_ZONE_INFORMATION *PTIME_ZONE_INFORMATION;
typedef struct _REMSECURITY_ATTRIBUTES REMSECURITY_ATTRIBUTES;
typedef struct _SERVICE_STATUS_PROCESS SERVICE_STATUS_PROCESS;
typedef struct _SE_IMPERSONATION_STATE SE_IMPERSONATION_STATE;
typedef struct _XMIT_ROUTINE_QUINTUPLE XMIT_ROUTINE_QUINTUPLE;
enum _ACL_INFORMATION_CLASS {AclRevisionInformation = 0x1,AclSizeInformation = 0x2,};
enum _CM_ERROR_CONTROL_TYPE {IgnoreError = 0x0,NormalError = 0x1,SevereError = 0x2,CriticalError = 0x3,};
enum _EXCEPTION_DISPOSITION {ExceptionContinueExecution = 0x0,ExceptionContinueSearch = 0x1,ExceptionNestedException = 0x2,ExceptionCollidedUnwind = 0x3,};
typedef struct _thread_adoption_data_s *_PTHREAD_ADOPTION_DATA;
typedef struct _CRYPT_SEQUENCE_OF_ANY CRYPT_SEQUENCE_OF_ANY;
typedef struct _CRYPT_X942_OTHER_INFO CRYPT_X942_OTHER_INFO;
typedef struct _CTL_FIND_SUBJECT_PARA CTL_FIND_SUBJECT_PARA;
typedef struct _CTL_VERIFY_USAGE_PARA CTL_VERIFY_USAGE_PARA;
typedef struct tagCOLORMATCHTOTARGET EMRCOLORMATCHTOTARGET;
typedef struct tagEMRSCALEVIEWPORTEXTEX EMRSCALEVIEWPORTEXTEX;
typedef struct tagEMRSETCOLORADJUSTMENT EMRSETCOLORADJUSTMENT;
typedef struct _FILESYSTEM_STATISTICS FILESYSTEM_STATISTICS;
struct IGlobalInterfaceTable {struct IGlobalInterfaceTableVtbl *lpVtbl;};
struct IInternetProtocolInfo {struct IInternetProtocolInfoVtbl *lpVtbl;};
struct IInternetProtocolRoot {struct IInternetProtocolRootVtbl *lpVtbl;};
struct IInternetProtocolSink {struct IInternetProtocolSinkVtbl *lpVtbl;};
struct IInternetThreadSwitch {struct IInternetThreadSwitchVtbl *lpVtbl;};
typedef struct _IMAGE_BASE_RELOCATION IMAGE_BASE_RELOCATION;
typedef struct _IMAGE_DEBUG_DIRECTORY IMAGE_DEBUG_DIRECTORY;
typedef struct _IMAGE_TLS_DIRECTORY32 IMAGE_TLS_DIRECTORY32;
typedef struct _IMAGE_TLS_DIRECTORY64 IMAGE_TLS_DIRECTORY64;
struct ISynchronizeContainer {struct ISynchronizeContainerVtbl *lpVtbl;};
struct ITimeAndNoticeControl {struct ITimeAndNoticeControlVtbl *lpVtbl;};
struct IXMLDOMImplementation {struct IXMLDOMImplementationVtbl *lpVtbl;};
struct IXMLElementCollection {struct IXMLElementCollectionVtbl *lpVtbl;};
typedef struct _LOAD_DLL_DEBUG_INFO *LPLOAD_DLL_DEBUG_INFO;
typedef struct tagMCI_ANIM_PLAY_PARMS *LPMCI_ANIM_PLAY_PARMS;
typedef struct tagMCI_ANIM_STEP_PARMS *LPMCI_ANIM_STEP_PARMS;
typedef struct tagMCI_OVLY_RECT_PARMS *LPMCI_OVLY_RECT_PARMS;
typedef struct tMIXERCONTROLDETAILS *LPMIXERCONTROLDETAILS;
typedef struct tagOIFI *LPOLEINPLACEFRAMEINFO;
typedef struct _PRINTER_NOTIFY_INFO *LPPRINTER_NOTIFY_INFO;
typedef struct _PROCESS_INFORMATION *LPPROCESS_INFORMATION;
typedef struct _SECURITY_ATTRIBUTES *LPSECURITY_ATTRIBUTES;
typedef struct _SOCKET_ADDRESS_LIST *LPSOCKET_ADDRESS_LIST;
typedef struct _SYSTEM_POWER_STATUS *LPSYSTEM_POWER_STATUS;
enum MACRO_ACCESS_ACE_FLAG {SUCCESSFUL_ACCESS_ACE_FLAG = 0x40,FAILED_ACCESS_ACE_FLAG = 0x80,};
enum MACRO_CERT_CHAIN_FIND {CERT_CHAIN_FIND_BY_ISSUER = 1,CERT_CHAIN_FIND_BY_ISSUER_COMPARE_KEY_FLAG = 1,CERT_CHAIN_FIND_BY_ISSUER_COMPLEX_CHAIN_FLAG = 2,CERT_CHAIN_FIND_BY_ISSUER_CACHE_ONLY_URL_FLAG = 4,CERT_CHAIN_FIND_BY_ISSUER_LOCAL_MACHINE_FLAG = 8,CERT_CHAIN_FIND_BY_ISSUER_NO_KEY_FLAG = 16384,CERT_CHAIN_FIND_BY_ISSUER_CACHE_ONLY_FLAG = 32768,CERT_CHAIN_POLICY_IGNORE_NOT_TIME_VALID_FLAG = 1,CERT_CHAIN_POLICY_IGNORE_CTL_NOT_TIME_VALID_FLAG = 2,CERT_CHAIN_POLICY_IGNORE_NOT_TIME_NESTED_FLAG = 4,CERT_CHAIN_POLICY_IGNORE_ALL_NOT_TIME_VALID_FLAGS = 7,CERT_CHAIN_POLICY_ALLOW_UNKNOWN_CA_FLAG = 16,CERT_CHAIN_POLICY_IGNORE_WRONG_USAGE_FLAG = 32,CERT_CHAIN_POLICY_IGNORE_END_REV_UNKNOWN_FLAG = 256,CERT_CHAIN_POLICY_IGNORE_CTL_SIGNER_REV_UNKNOWN_FLAG = 512,CERT_CHAIN_POLICY_IGNORE_CA_REV_UNKNOWN_FLAG = 1024,CERT_CHAIN_POLICY_IGNORE_ROOT_REV_UNKNOWN_FLAG = 2048,CERT_CHAIN_POLICY_IGNORE_ALL_REV_UNKNOWN_FLAGS = 3840,CERT_CHAIN_POLICY_ALLOW_TESTROOT_FLAG = 32768,CERT_CHAIN_POLICY_TRUST_TESTROOT_FLAG = 16384,CERT_CHAIN_POLICY_BASE = 1,CERT_CHAIN_POLICY_AUTHENTICODE = 2,CERT_CHAIN_POLICY_AUTHENTICODE_TS = 3,CERT_CHAIN_POLICY_SSL = 4,CERT_CHAIN_POLICY_BASIC_CONSTRAINTS = 5,CERT_CHAIN_POLICY_NT_AUTH = 6,};
enum MACRO_CERT_STORE_CTRL {CERT_STORE_CTRL_RESYNC = 1,CERT_STORE_CTRL_NOTIFY_CHANGE = 2,CERT_STORE_CTRL_COMMIT = 3,CERT_STORE_CTRL_AUTO_RESYNC = 4,CERT_STORE_CTRL_COMMIT_FORCE_FLAG = 1,CERT_STORE_CTRL_COMMIT_CLEAR_FLAG = 2,CERT_STORE_LOCALIZED_NAME_PROP_ID = 4096,CERT_CREATE_CONTEXT_NOCOPY_FLAG = 1,CERT_CREATE_CONTEXT_SORTED_FLAG = 2,CERT_CREATE_CONTEXT_NO_HCRYPTMSG_FLAG = 4,CERT_CREATE_CONTEXT_NO_ENTRY_FLAG = 8,CERT_PHYSICAL_STORE_ADD_ENABLE_FLAG = 1,CERT_PHYSICAL_STORE_OPEN_DISABLE_FLAG = 2,CERT_PHYSICAL_STORE_REMOTE_OPEN_DISABLE_FLAG = 4,CERT_PHYSICAL_STORE_INSERT_COMPUTER_NAME_ENABLE_FLAG = 8,CERT_PHYSICAL_STORE_PREDEFINED_ENUM_FLAG = 1,};
enum MACRO_CHECKJPEGFORMAT {CHECKJPEGFORMAT = 4119,};
enum MACRO_COLORMGMTDLGORD {COLORMGMTDLGORD = 1551,};
enum MACRO_COLOR_SCROLLBAR {COLOR_SCROLLBAR = 0,COLOR_BACKGROUND = 1,COLOR_ACTIVECAPTION = 2,COLOR_INACTIVECAPTION = 3,COLOR_MENU = 4,COLOR_WINDOW = 5,COLOR_WINDOWFRAME = 6,COLOR_MENUTEXT = 7,COLOR_WINDOWTEXT = 8,COLOR_CAPTIONTEXT = 9,COLOR_ACTIVEBORDER = 10,COLOR_INACTIVEBORDER = 11,COLOR_APPWORKSPACE = 12,COLOR_HIGHLIGHT = 13,COLOR_HIGHLIGHTTEXT = 14,COLOR_BTNFACE = 15,COLOR_BTNSHADOW = 16,COLOR_GRAYTEXT = 17,COLOR_BTNTEXT = 18,COLOR_INACTIVECAPTIONTEXT = 19,COLOR_BTNHIGHLIGHT = 20,COLOR_3DDKSHADOW = 21,COLOR_3DLIGHT = 22,COLOR_INFOTEXT = 23,COLOR_INFOBK = 24,COLOR_HOTLIGHT = 26,COLOR_GRADIENTACTIVECAPTION = 27,COLOR_GRADIENTINACTIVECAPTION = 28,COLOR_DESKTOP = 1,COLOR_3DFACE = 15,COLOR_3DSHADOW = 16,COLOR_3DHIGHLIGHT = 20,COLOR_3DHILIGHT = 20,COLOR_BTNHILIGHT = 20,};
enum MACRO_DRAWPATTERNRECT {DRAWPATTERNRECT = 25,};
enum MACRO_DUPLICATE_DEREG {DUPLICATE_DEREG = 0x7,};
enum MACRO_FLOODFILLBORDER {FLOODFILLBORDER = 0,FLOODFILLSURFACE = 1,CCHDEVICENAME = 32,};
enum MACRO_GETPHYSPAGESIZE {GETPHYSPAGESIZE = 12,};
enum MACRO_GETSETPAPERBINS {GETSETPAPERBINS = 29,};
enum MACRO_INPUTLANGCHANGE {INPUTLANGCHANGE_SYSCHARSET = 0x1,INPUTLANGCHANGE_FORWARD = 0x2,INPUTLANGCHANGE_BACKWARD = 0x4,};
enum MACRO_IOCTL_SMARTCARD {IOCTL_SMARTCARD_POWER = 3211268,IOCTL_SMARTCARD_GET_ATTRIBUTE = 3211272,IOCTL_SMARTCARD_SET_ATTRIBUTE = 3211276,IOCTL_SMARTCARD_CONFISCATE = 3211280,IOCTL_SMARTCARD_TRANSMIT = 3211284,IOCTL_SMARTCARD_EJECT = 3211288,IOCTL_SMARTCARD_SWALLOW = 3211292,IOCTL_SMARTCARD_IS_PRESENT = 3211304,IOCTL_SMARTCARD_IS_ABSENT = 3211308,IOCTL_SMARTCARD_SET_PROTOCOL = 3211312,IOCTL_SMARTCARD_GET_STATE = 3211320,IOCTL_SMARTCARD_GET_LAST_ERROR = 3211324,IOCTL_SMARTCARD_GET_PERF_CNTR = 3211328,};
enum MACRO_MAXIMUM_ALLOWED {MAXIMUM_ALLOWED = 0x2000000,};
enum MACRO_MAXIMUM_REPARSE {MAXIMUM_REPARSE_DATA_BUFFER_SIZE = 16384,};
enum MACRO_NAME_INFO_LEVEL {UNIVERSAL_NAME_INFO_LEVEL = 0x1,REMOTE_NAME_INFO_LEVEL = 0x2,};
enum MACRO_PAGESETUPDLGORD {PAGESETUPDLGORD = 1546,};
enum MACRO_PHYSICALOFFSETX {PHYSICALOFFSETX = 112,};
enum MACRO_PHYSICALOFFSETY {PHYSICALOFFSETY = 113,};
enum MACRO_PKCS_ATTRIBUTES {PKCS_ATTRIBUTES = 48,PKCS_SORTED_CTL = 49,};
enum MACRO_PUBLICKEYBLOBEX {PUBLICKEYBLOBEX = 0xA,};
enum MACRO_QUERYDIBSUPPORT {QUERYDIBSUPPORT = 3073,};
enum MACRO_READ_ATTRIBUTES {READ_ATTRIBUTES = 0xD0,READ_THRESHOLDS = 0xD1,};
enum MACRO_SESSION_ABORTED {SESSION_ABORTED = 0x6,};
enum MACRO_SORT_STRINGSORT {SORT_STRINGSORT = 0x1000,};
enum MACRO_THREAD_PRIORITY {THREAD_PRIORITY_LOWEST = -2,THREAD_PRIORITY_BELOW_NORMAL = -1,THREAD_PRIORITY_NORMAL = 0,THREAD_PRIORITY_HIGHEST = 2,THREAD_PRIORITY_ABOVE_NORMAL = 1,THREAD_PRIORITY_ERROR_RETURN = 2147483647,THREAD_PRIORITY_TIME_CRITICAL = 15,THREAD_PRIORITY_IDLE = -15,};
enum MACRO_URLPOLICY_ALLOW {URLPOLICY_ALLOW = 0x0,URLPOLICY_QUERY = 0x1,URLPOLICY_DISALLOW = 0x3,URLPOLICY_NOTIFY_ON_ALLOW = 0x10,URLPOLICY_NOTIFY_ON_DISALLOW = 0x20,URLPOLICY_LOG_ON_ALLOW = 0x40,URLPOLICY_LOG_ON_DISALLOW = 0x80,URLPOLICY_MASK_PERMISSIONS = 0xF,URLPOLICY_DONTCHECKDLGBOX = 0x100,};
typedef struct tagMCI_ANIM_UPDATE_PARMS MCI_ANIM_UPDATE_PARMS;
typedef struct tagMCI_WAVE_DELETE_PARMS MCI_WAVE_DELETE_PARMS;
typedef struct _MESSAGE_RESOURCE_DATA MESSAGE_RESOURCE_DATA;
typedef struct _NDR_USER_MARSHAL_INFO NDR_USER_MARSHAL_INFO;
typedef struct _PARTITION_INFORMATION PARTITION_INFORMATION;
typedef struct _CERT_PUBLIC_KEY_INFO *PCERT_PUBLIC_KEY_INFO;
typedef struct _CERT_REVOCATION_INFO *PCERT_REVOCATION_INFO;
typedef struct _CERT_REVOCATION_PARA *PCERT_REVOCATION_PARA;
typedef struct _CERT_STORE_PROV_INFO *PCERT_STORE_PROV_INFO;
typedef struct _CERT_TRUST_LIST_INFO *PCERT_TRUST_LIST_INFO;
typedef struct _CHANGER_ELEMENT_LIST *PCHANGER_ELEMENT_LIST;
typedef struct _CHANGER_PRODUCT_DATA *PCHANGER_PRODUCT_DATA;
typedef struct _CHANGER_SET_POSITION *PCHANGER_SET_POSITION;
typedef struct _CMSG_CMS_SIGNER_INFO *PCMSG_CMS_SIGNER_INFO;
typedef struct _CRL_DIST_POINTS_INFO *PCRL_DIST_POINTS_INFO;
typedef struct _CRYPT_KEY_PROV_PARAM *PCRYPT_KEY_PROV_PARAM;
typedef struct _CRYPT_OID_FUNC_ENTRY *PCRYPT_OID_FUNC_ENTRY;
typedef struct _CTL_ANY_SUBJECT_INFO *PCTL_ANY_SUBJECT_INFO;
typedef struct _CERTIFICATE_BLOB *PEFS_CERTIFICATE_BLOB;
typedef struct tagEMRCREATECOLORSPACEW *PEMRCREATECOLORSPACEW;
typedef struct tagEMREXCLUDECLIPRECT *PEMRINTERSECTCLIPRECT;
typedef struct tagEMRSETDIBITSTODEVICE *PEMRSETDIBITSTODEVICE;
typedef struct tagEMRSETPALETTEENTRIES *PEMRSETPALETTEENTRIES;
typedef struct tagEMRSELECTCLIPPATH *PEMRSETSTRETCHBLTMODE;
typedef struct tagEMRSETWORLDTRANSFORM *PEMRSETWORLDTRANSFORM;
typedef struct tagEMRFILLPATH *PEMRSTROKEANDFILLPATH;
typedef struct _FILE_OBJECTID_BUFFER *PFILE_OBJECTID_BUFFER;
typedef union _FILE_SEGMENT_ELEMENT *PFILE_SEGMENT_ELEMENT;
typedef struct _FORMAT_EX_PARAMETERS *PFORMAT_EX_PARAMETERS;
typedef struct _FULL_PTR_XLAT_TABLES *PFULL_PTR_XLAT_TABLES;
typedef struct __GENERIC_BINDING_INFO *PGENERIC_BINDING_INFO;
typedef struct _IMAGE_DATA_DIRECTORY *PIMAGE_DATA_DIRECTORY;
typedef struct _IMAGE_FUNCTION_ENTRY *PIMAGE_FUNCTION_ENTRY;
typedef struct _IMAGE_IMPORT_BY_NAME *PIMAGE_IMPORT_BY_NAME;
typedef struct _IMAGE_SECTION_HEADER *PIMAGE_SECTION_HEADER;
typedef struct _SECURITY_DESCRIPTOR *PISECURITY_DESCRIPTOR;
typedef struct tagPIXELFORMATDESCRIPTOR PIXELFORMATDESCRIPTOR;
typedef struct tagLAYERPLANEDESCRIPTOR *PLAYERPLANEDESCRIPTOR;
typedef struct tagMCI_ANIM_OPEN_PARMSA *PMCI_ANIM_OPEN_PARMSA;
typedef struct tagMCI_ANIM_OPEN_PARMSW *PMCI_ANIM_OPEN_PARMSW;
typedef struct tagMCI_GETDEVCAPS_PARMS *PMCI_GETDEVCAPS_PARMS;
typedef struct tagMCI_OVLY_LOAD_PARMSA *PMCI_OVLY_LOAD_PARMSA;
typedef struct tagMCI_OVLY_LOAD_PARMSW *PMCI_OVLY_LOAD_PARMSW;
typedef struct tagMCI_OVLY_OPEN_PARMSA *PMCI_OVLY_OPEN_PARMSA;
typedef struct tagMCI_OVLY_OPEN_PARMSW *PMCI_OVLY_OPEN_PARMSW;
typedef struct tagMCI_OVLY_SAVE_PARMSA *PMCI_OVLY_SAVE_PARMSA;
typedef struct tagMCI_OVLY_SAVE_PARMSW *PMCI_OVLY_SAVE_PARMSW;
typedef struct tagMCI_VD_ESCAPE_PARMSA *PMCI_VD_ESCAPE_PARMSA;
typedef struct tagMCI_VD_ESCAPE_PARMSW *PMCI_VD_ESCAPE_PARMSW;
typedef struct tagMCI_WAVE_OPEN_PARMSA *PMCI_WAVE_OPEN_PARMSA;
typedef struct tagMCI_WAVE_OPEN_PARMSW *PMCI_WAVE_OPEN_PARMSW;
typedef struct _NDR_CORRELATION_INFO *PNDR_CORRELATION_INFO;
typedef struct _PRINTER_ENUM_VALUESA *PPRINTER_ENUM_VALUESA;
typedef struct _PRINTER_ENUM_VALUESW *PPRINTER_ENUM_VALUESW;
typedef struct _PREVENT_MEDIA_REMOVAL PREVENT_MEDIA_REMOVAL;
typedef struct _RPC_CLIENT_INTERFACE *PRPC_CLIENT_INTERFACE;
typedef struct _7F42DEB2BB5D0DE64733A8884285C23D *PRPC_IMPORT_CONTEXT_P;
typedef struct _RPC_PROTSEQ_ENDPOINT *PRPC_PROTSEQ_ENDPOINT;
typedef struct _RPC_SERVER_INTERFACE *PRPC_SERVER_INTERFACE;
typedef struct _RTL_CRITICAL_SECTION *PRTL_CRITICAL_SECTION;
typedef struct _OSVERSIONINFOEXW *PRTL_OSVERSIONINFOEXW;
typedef struct _SHCREATEPROCESSINFOW *PSHCREATEPROCESSINFOW;
typedef struct _D890D4C8B96B04D8C981ECF31CD55F01 *PVOLUME_BITMAP_BUFFER;
typedef struct _WSAServiceClassInfoA *PWSASERVICECLASSINFOA;
typedef struct _WSAServiceClassInfoW *PWSASERVICECLASSINFOW;
typedef struct _QUERY_SERVICE_CONFIGA QUERY_SERVICE_CONFIGA;
typedef struct _QUERY_SERVICE_CONFIGW QUERY_SERVICE_CONFIGW;
typedef struct _CBE416C4EAAA19179E77E4054907ADFF READ_USN_JOURNAL_DATA;
typedef void (*RPCLT_PDU_FILTER_FUNC)(void *Buffer, unsigned int BufferLength, int fDatagram);
typedef void __stdcall RPC_ADDRESS_CHANGE_FN(void *arg);
typedef struct _RPC_SYNTAX_IDENTIFIER RPC_SYNTAX_IDENTIFIER;
typedef struct SERVICE_STATUS_HANDLE__ *SERVICE_STATUS_HANDLE;
typedef struct _STORAGE_DEVICE_NUMBER STORAGE_DEVICE_NUMBER;
typedef struct _TAPE_CREATE_PARTITION TAPE_CREATE_PARTITION;
typedef struct _TIME_ZONE_INFORMATION TIME_ZONE_INFORMATION;
typedef struct _UNLOAD_DLL_DEBUG_INFO UNLOAD_DLL_DEBUG_INFO;
enum _CM_SERVICE_LOAD_TYPE {BootLoad = 0x0,SystemLoad = 0x1,AutoLoad = 0x2,DemandLoad = 0x3,DisableLoad = 0x4,};
enum _CM_SERVICE_NODE_TYPE {DriverType = 0x1,FileSystemType = 0x2,Win32ServiceOwnProcess = 0x10,Win32ServiceShareProcess = 0x20,AdapterType = 0x4,RecognizerType = 0x8,};
enum _COMPUTER_NAME_FORMAT {ComputerNameNetBIOS = 0x0,ComputerNameDnsHostname = 0x1,ComputerNameDnsDomain = 0x2,ComputerNameDnsFullyQualified = 0x3,ComputerNamePhysicalNetBIOS = 0x4,ComputerNamePhysicalDnsHostname = 0x5,ComputerNamePhysicalDnsDomain = 0x6,ComputerNamePhysicalDnsFullyQualified = 0x7,ComputerNameMax = 0x8,};
struct _RPC_PROTSEQ_ENDPOINT {unsigned __int8 *RpcProtocolSequence;unsigned __int8 *Endpoint;};
enum _USER_MARSHAL_CB_TYPE {USER_MARSHAL_CB_BUFFER_SIZE = 0x0,USER_MARSHAL_CB_MARSHALL = 0x1,USER_MARSHAL_CB_UNMARSHALL = 0x2,USER_MARSHAL_CB_FREE = 0x3,};
typedef struct _ACL_SIZE_INFORMATION ACL_SIZE_INFORMATION;
typedef struct _CERT_PUBLIC_KEY_INFO CERT_PUBLIC_KEY_INFO;
typedef struct _CERT_REVOCATION_INFO CERT_REVOCATION_INFO;
typedef struct _CERT_REVOCATION_PARA CERT_REVOCATION_PARA;
typedef struct _CERT_STORE_PROV_INFO CERT_STORE_PROV_INFO;
typedef struct _CERT_TRUST_LIST_INFO CERT_TRUST_LIST_INFO;
typedef struct _CHANGER_ELEMENT_LIST CHANGER_ELEMENT_LIST;
typedef struct _CHANGER_PRODUCT_DATA CHANGER_PRODUCT_DATA;
typedef struct _CHANGER_SET_POSITION CHANGER_SET_POSITION;
typedef struct _CMSG_CMS_SIGNER_INFO CMSG_CMS_SIGNER_INFO;
typedef struct _CRL_DIST_POINTS_INFO CRL_DIST_POINTS_INFO;
typedef struct _CRYPT_KEY_PROV_PARAM CRYPT_KEY_PROV_PARAM;
typedef struct _CRYPT_OID_FUNC_ENTRY CRYPT_OID_FUNC_ENTRY;
typedef struct _CTL_ANY_SUBJECT_INFO CTL_ANY_SUBJECT_INFO;
typedef struct _CERTIFICATE_BLOB EFS_CERTIFICATE_BLOB;
typedef struct tagEMRCREATECOLORSPACEW EMRCREATECOLORSPACEW;
typedef struct tagEMREXCLUDECLIPRECT EMRINTERSECTCLIPRECT;
typedef struct tagEMRSETDIBITSTODEVICE EMRSETDIBITSTODEVICE;
typedef struct tagEMRSETPALETTEENTRIES EMRSETPALETTEENTRIES;
typedef struct tagEMRSELECTCLIPPATH EMRSETSTRETCHBLTMODE;
typedef struct tagEMRSETWORLDTRANSFORM EMRSETWORLDTRANSFORM;
typedef struct tagEMRFILLPATH EMRSTROKEANDFILLPATH;
typedef struct _ENUM_SERVICE_STATUSA ENUM_SERVICE_STATUSA;
typedef struct _ENUM_SERVICE_STATUSW ENUM_SERVICE_STATUSW;
typedef struct _EXCEPTION_DEBUG_INFO EXCEPTION_DEBUG_INFO;
typedef struct _FILE_OBJECTID_BUFFER FILE_OBJECTID_BUFFER;
typedef union _FILE_SEGMENT_ELEMENT FILE_SEGMENT_ELEMENT;
typedef struct _FORMAT_EX_PARAMETERS FORMAT_EX_PARAMETERS;
typedef struct _FULL_PTR_XLAT_TABLES FULL_PTR_XLAT_TABLES;
typedef struct __GENERIC_BINDING_INFO GENERIC_BINDING_INFO;
typedef void *HCRYPTDEFAULTCONTEXT;
struct IInternetZoneManager {struct IInternetZoneManagerVtbl *lpVtbl;};
typedef struct _IMAGE_DATA_DIRECTORY IMAGE_DATA_DIRECTORY;
typedef struct _IMAGE_FUNCTION_ENTRY IMAGE_FUNCTION_ENTRY;
typedef struct _IMAGE_IMPORT_BY_NAME IMAGE_IMPORT_BY_NAME;
typedef struct _IMAGE_SECTION_HEADER IMAGE_SECTION_HEADER;
struct IPrintDialogCallback {struct IPrintDialogCallbackVtbl *lpVtbl;};
struct IPrintDialogServices {struct IPrintDialogServicesVtbl *lpVtbl;};
struct IXMLDOMCharacterData {struct IXMLDOMCharacterDataVtbl *lpVtbl;};
typedef struct tagLAYERPLANEDESCRIPTOR LAYERPLANEDESCRIPTOR;
typedef IBindStatusCallback *LPBINDSTATUSCALLBACK;
typedef struct tagCLIENTCREATESTRUCT *LPCLIENTCREATESTRUCT;
typedef IEnumSTATPROPSETSTG *LPENUMSTATPROPSETSTG;
typedef IExternalConnection *LPEXTERNALCONNECTION;
typedef struct _GETVERSIONINPARAMS *LPGETVERSIONINPARAMS;
typedef struct tagHARDWAREHOOKSTRUCT *LPHARDWAREHOOKSTRUCT;
typedef struct tagMCI_SYSINFO_PARMSA *LPMCI_SYSINFO_PARMSA;
typedef struct tagMCI_SYSINFO_PARMSW *LPMCI_SYSINFO_PARMSW;
typedef struct tagMCI_WAVE_SET_PARMS *LPMCI_WAVE_SET_PARMS;
typedef struct tagMIXERLINECONTROLSA *LPMIXERLINECONTROLSA;
typedef struct tagMIXERLINECONTROLSW *LPMIXERLINECONTROLSW;
typedef IOleInPlaceUIWindow *LPOLEINPLACEUIWINDOW;
typedef struct tagOleMenuGroupWidths *LPOLEMENUGROUPWIDTHS;
typedef struct _OUTLINETEXTMETRICA *LPOUTLINETEXTMETRICA;
typedef struct _OUTLINETEXTMETRICW *LPOUTLINETEXTMETRICW;
typedef struct _PROCESS_HEAP_ENTRY *LPPROCESS_HEAP_ENTRY;
typedef IPropertySetStorage *LPPROPERTYSETSTORAGE;
typedef IRunningObjectTable *LPRUNNINGOBJECTTABLE;
typedef struct _DC79A6464562D2DC48FEEE8D5793116D *LPSCARD_READERSTATEA;
typedef struct _B80B7D01E79FADDB4AAC58DE22BC823F *LPSCARD_READERSTATEW;
typedef IWindowForBindingUI *LPWINDOWFORBINDINGUI;
typedef struct _WSANAMESPACE_INFOA *LPWSANAMESPACE_INFOA;
typedef struct _WSANAMESPACE_INFOW *LPWSANAMESPACE_INFOW;
enum MACRO_BUTTON_PRESSED {FROM_LEFT_1ST_BUTTON_PRESSED = 0x1,RIGHTMOST_BUTTON_PRESSED = 0x2,FROM_LEFT_2ND_BUTTON_PRESSED = 0x4,FROM_LEFT_3RD_BUTTON_PRESSED = 0x8,FROM_LEFT_4TH_BUTTON_PRESSED = 0x10,};
enum MACRO_CF_SCREENFONTS {CF_SCREENFONTS = 0x1,CF_PRINTERFONTS = 0x2,CF_BOTH = 0x3,CF_SHOWHELP = 0x4,CF_ENABLEHOOK = 0x8,CF_ENABLETEMPLATE = 0x10,CF_ENABLETEMPLATEHANDLE = 0x20,CF_INITTOLOGFONTSTRUCT = 0x40,CF_USESTYLE = 0x80,CF_EFFECTS = 0x100,CF_APPLY = 0x200,CF_ANSIONLY = 0x400,CF_SCRIPTSONLY = 0x400,CF_NOVECTORFONTS = 0x800,CF_NOOEMFONTS = 0x800,CF_NOSIMULATIONS = 0x1000,CF_LIMITSIZE = 0x2000,CF_FIXEDPITCHONLY = 0x4000,CF_WYSIWYG = 0x8000,CF_FORCEFONTEXIST = 0x10000,CF_SCALABLEONLY = 0x20000,CF_TTONLY = 0x40000,CF_NOFACESEL = 0x80000,CF_NOSTYLESEL = 0x100000,CF_NOSIZESEL = 0x200000,CF_SELECTSCRIPT = 0x400000,CF_NOSCRIPTSEL = 0x800000,CF_NOVERTFONTS = 0x1000000,};
enum MACRO_CHECKPNGFORMAT {CHECKPNGFORMAT = 4120,};
enum MACRO_CRYPT_RETRIEVE {CRYPT_RETRIEVE_MULTIPLE_OBJECTS = 0x1,CRYPT_CACHE_ONLY_RETRIEVAL = 0x2,CRYPT_WIRE_ONLY_RETRIEVAL = 0x4,CRYPT_DONT_CACHE_RESULT = 0x8,CRYPT_ASYNC_RETRIEVAL = 0x10,CRYPT_VERIFY_CONTEXT_SIGNATURE = 0x20,CRYPT_VERIFY_DATA_HASH = 0x40,CRYPT_KEEP_TIME_VALID = 0x80,CRYPT_DONT_VERIFY_SIGNATURE = 0x100,CRYPT_DONT_CHECK_TIME_VALIDITY = 0x200,CRYPT_PARAM_ASYNC_RETRIEVAL_COMPLETION = 0x1,CRYPT_PARAM_CANCEL_ASYNC_RETRIEVAL = 0x2,CRYPT_GET_URL_FROM_PROPERTY = 0x1,CRYPT_GET_URL_FROM_EXTENSION = 0x2,CRYPT_GET_URL_FROM_UNAUTH_ATTRIBUTE = 0x4,CRYPT_GET_URL_FROM_AUTH_ATTRIBUTE = 0x8,};
enum MACRO_CRYPT_USERDATA {CRYPT_USERDATA = 1,};
enum MACRO_CWCSTORAGENAME {CWCSTORAGENAME = 32,};
enum MACRO_DESKTOPHORZRES {DESKTOPHORZRES = 118,};
enum MACRO_DESKTOPVERTRES {DESKTOPVERTRES = 117,};
enum MACRO_DLGWINDOWEXTRA {DLGWINDOWEXTRA = 30,};
enum MACRO_DMDISPLAYFLAGS {DMDISPLAYFLAGS_TEXTMODE = 0x4,};
enum MACRO_DM_SPECVERSION {DM_SPECVERSION = 0x401,DM_ORIENTATION = 0x1,DM_PAPERSIZE = 0x2,DM_PAPERLENGTH = 0x4,DM_PAPERWIDTH = 0x8,DM_SCALE = 0x10,DM_POSITION = 0x20,DM_NUP = 0x40,DM_COPIES = 0x100,DM_DEFAULTSOURCE = 0x200,DM_PRINTQUALITY = 0x400,DM_COLOR = 0x800,DM_DUPLEX = 0x1000,DM_YRESOLUTION = 0x2000,DM_TTOPTION = 0x4000,DM_COLLATE = 0x8000,DM_FORMNAME = 0x10000,DM_LOGPIXELS = 0x20000,DM_BITSPERPEL = 0x40000,DM_PELSWIDTH = 0x80000,DM_PELSHEIGHT = 0x100000,DM_DISPLAYFLAGS = 0x200000,DM_DISPLAYFREQUENCY = 0x400000,DM_ICMMETHOD = 0x800000,DM_ICMINTENT = 0x1000000,DM_MEDIATYPE = 0x2000000,DM_DITHERTYPE = 0x4000000,DM_PANNINGWIDTH = 0x8000000,DM_PANNINGHEIGHT = 0x10000000,};
enum MACRO_DOWNLOADHEADER {DOWNLOADHEADER = 4111,};
enum MACRO_ENABLE_DISABLE {ENABLE_DISABLE_AUTOSAVE = 0xD2,};
enum MACRO_FEATURESETTING {FEATURESETTING_NUP = 0,FEATURESETTING_OUTPUT = 1,FEATURESETTING_PSLEVEL = 2,FEATURESETTING_CUSTPAPER = 3,FEATURESETTING_MIRROR = 4,FEATURESETTING_NEGATIVE = 5,FEATURESETTING_PROTOCOL = 6,};
enum MACRO_FORMATDLGORD30 {FORMATDLGORD30 = 1544,};
enum MACRO_FORMATDLGORD31 {FORMATDLGORD31 = 1543,};
enum MACRO_GCL_CONVERSION {GCL_CONVERSION = 0x1,GCL_REVERSECONVERSION = 0x2,GCL_REVERSE_LENGTH = 0x3,};
enum MACRO_GETDEVICEUNITS {GETDEVICEUNITS = 42,GETEXTENDEDTEXTMETRICS = 256,};
enum MACRO_GETEXTENTTABLE {GETEXTENTTABLE = 257,};
enum MACRO_GMEM_DISCARDED {GMEM_DISCARDED = 0x4000,GMEM_LOCKCOUNT = 0xFF,};
enum MACRO_ID_DEFAULTINST {ID_DEFAULTINST = -2,};
enum MACRO_INVALID_SOCKET {INVALID_SOCKET = 4294967295,};
enum MACRO_LGRPID_WESTERN {LGRPID_WESTERN_EUROPE = 0x1,LGRPID_CENTRAL_EUROPE = 0x2,LGRPID_BALTIC = 0x3,LGRPID_GREEK = 0x4,LGRPID_CYRILLIC = 0x5,LGRPID_TURKISH = 0x6,LGRPID_JAPANESE = 0x7,LGRPID_KOREAN = 0x8,LGRPID_TRADITIONAL_CHINESE = 0x9,LGRPID_SIMPLIFIED_CHINESE = 0xA,LGRPID_THAI = 0xB,LGRPID_HEBREW = 0xC,LGRPID_ARABIC = 0xD,LGRPID_VIETNAMESE = 0xE,LGRPID_INDIC = 0xF,LGRPID_GEORGIAN = 0x10,LGRPID_ARMENIAN = 0x11,};
enum MACRO_LMEM_DISCARDED {LMEM_DISCARDED = 0x4000,LMEM_LOCKCOUNT = 0xFF,};
enum MACRO_MB_PRECOMPOSED {MB_PRECOMPOSED = 0x1,MB_COMPOSITE = 0x2,MB_USEGLYPHCHARS = 0x4,MB_ERR_INVALID_CHARS = 0x8,};
enum MACRO_MOM_POSITIONCB {MOM_POSITIONCB = 970,};
enum MACRO_NCBCHAINSENDNA {NCBCHAINSENDNA = 0x72,};
enum MACRO_NEWFILEOPENORD {NEWFILEOPENORD = 1547,};
enum MACRO_NEWTRANSPARENT {NEWTRANSPARENT = 3,QUERYROPSUPPORT = 40,};
enum MACRO_PHYSICALHEIGHT {PHYSICALHEIGHT = 111,};
enum MACRO_PKCS_ATTRIBUTE {PKCS_ATTRIBUTE = 22,PKCS_CONTENT_INFO_SEQUENCE_OF_ANY = 23,};
enum MACRO_PRINTER_ACCESS {PRINTER_ACCESS_ADMINISTER = 0x4,PRINTER_ACCESS_USE = 0x8,};
enum MACRO_PRINTER_NOTIFY {PRINTER_NOTIFY_FIELD_SERVER_NAME = 0x0,PRINTER_NOTIFY_FIELD_PRINTER_NAME = 0x1,PRINTER_NOTIFY_FIELD_SHARE_NAME = 0x2,PRINTER_NOTIFY_FIELD_PORT_NAME = 0x3,PRINTER_NOTIFY_FIELD_DRIVER_NAME = 0x4,PRINTER_NOTIFY_FIELD_COMMENT = 0x5,PRINTER_NOTIFY_FIELD_LOCATION = 0x6,PRINTER_NOTIFY_FIELD_DEVMODE = 0x7,PRINTER_NOTIFY_FIELD_SEPFILE = 0x8,PRINTER_NOTIFY_FIELD_PRINT_PROCESSOR = 0x9,PRINTER_NOTIFY_FIELD_PARAMETERS = 0xA,PRINTER_NOTIFY_FIELD_DATATYPE = 0xB,PRINTER_NOTIFY_FIELD_SECURITY_DESCRIPTOR = 0xC,PRINTER_NOTIFY_FIELD_ATTRIBUTES = 0xD,PRINTER_NOTIFY_FIELD_PRIORITY = 0xE,PRINTER_NOTIFY_FIELD_DEFAULT_PRIORITY = 0xF,PRINTER_NOTIFY_FIELD_START_TIME = 0x10,PRINTER_NOTIFY_FIELD_UNTIL_TIME = 0x11,PRINTER_NOTIFY_FIELD_STATUS = 0x12,PRINTER_NOTIFY_FIELD_STATUS_STRING = 0x13,PRINTER_NOTIFY_FIELD_CJOBS = 0x14,PRINTER_NOTIFY_FIELD_AVERAGE_PPM = 0x15,PRINTER_NOTIFY_FIELD_TOTAL_PAGES = 0x16,PRINTER_NOTIFY_FIELD_PAGES_PRINTED = 0x17,PRINTER_NOTIFY_FIELD_TOTAL_BYTES = 0x18,PRINTER_NOTIFY_FIELD_BYTES_PRINTED = 0x19,PRINTER_NOTIFY_FIELD_OBJECT_GUID = 0x1A,};
enum MACRO_PRIORITY_CLASS {NORMAL_PRIORITY_CLASS = 0x20,IDLE_PRIORITY_CLASS = 0x40,HIGH_PRIORITY_CLASS = 0x80,REALTIME_PRIORITY_CLASS = 0x100,};
enum MACRO_PRIVATEKEYBLOB {PRIVATEKEYBLOB = 0x7,PLAINTEXTKEYBLOB = 0x8,};
enum MACRO_PRNSETUPDLGORD {PRNSETUPDLGORD = 1539,};
enum MACRO_PROFILE_LINKED {PROFILE_LINKED = 1279872587,PROFILE_EMBEDDED = 1296188740,};
enum MACRO_SCALINGFACTORX {SCALINGFACTORX = 114,};
enum MACRO_SCALINGFACTORY {SCALINGFACTORY = 115,};
enum MACRO_SHADEBLENDCAPS {SHADEBLENDCAPS = 120,};
enum MACRO_SO_CONDITIONAL {SO_CONDITIONAL_ACCEPT = 0x3002,};
enum MACRO_SP_NOTREPORTED {SP_NOTREPORTED = 0x4000,SP_ERROR = 0xFFFFFFFF,SP_APPABORT = 0xFFFFFFFE,SP_USERABORT = 0xFFFFFFFD,SP_OUTOFDISK = 0xFFFFFFFC,SP_OUTOFMEMORY = 0xFFFFFFFB,};
enum MACRO_STATUS_SEGMENT {STATUS_SEGMENT_NOTIFICATION = 0x40000005,};
enum MACRO_S_ASYNCHRONOUS {S_ASYNCHRONOUS = 262632,};
enum MACRO_URLACTION_JAVA {URLACTION_JAVA_CURR_MAX = 0x1C00,URLACTION_JAVA_MAX = 0x1CFF,URLACTION_INFODELIVERY_MIN = 0x1D00,URLACTION_INFODELIVERY_NO_ADDING_CHANNELS = 0x1D00,URLACTION_INFODELIVERY_NO_EDITING_CHANNELS = 0x1D01,URLACTION_INFODELIVERY_NO_REMOVING_CHANNELS = 0x1D02,URLACTION_INFODELIVERY_NO_ADDING_SUBSCRIPTIONS = 0x1D03,URLACTION_INFODELIVERY_NO_EDITING_SUBSCRIPTIONS = 0x1D04,URLACTION_INFODELIVERY_NO_REMOVING_SUBSCRIPTIONS = 0x1D05,URLACTION_INFODELIVERY_NO_CHANNEL_LOGGING = 0x1D06,URLACTION_INFODELIVERY_CURR_MAX = 0x1D06,URLACTION_INFODELIVERY_MAX = 0x1DFF,URLACTION_CHANNEL_SOFTDIST_MIN = 0x1E00,URLACTION_CHANNEL_SOFTDIST_PERMISSIONS = 0x1E05,};
enum MACRO_URLPOLICY_JAVA {URLPOLICY_JAVA_PROHIBIT = 0x0,URLPOLICY_JAVA_HIGH = 0x10000,URLPOLICY_JAVA_MEDIUM = 0x20000,URLPOLICY_JAVA_LOW = 0x30000,URLPOLICY_JAVA_CUSTOM = 0x800000,};
typedef struct tagMCI_ANIM_OPEN_PARMSA MCI_ANIM_OPEN_PARMSA;
typedef struct tagMCI_ANIM_OPEN_PARMSW MCI_ANIM_OPEN_PARMSW;
typedef struct tagMCI_GETDEVCAPS_PARMS MCI_GETDEVCAPS_PARMS;
typedef struct tagMCI_OVLY_LOAD_PARMSA MCI_OVLY_LOAD_PARMSA;
typedef struct tagMCI_OVLY_LOAD_PARMSW MCI_OVLY_LOAD_PARMSW;
typedef struct tagMCI_OVLY_OPEN_PARMSA MCI_OVLY_OPEN_PARMSA;
typedef struct tagMCI_OVLY_OPEN_PARMSW MCI_OVLY_OPEN_PARMSW;
typedef struct tagMCI_OVLY_SAVE_PARMSA MCI_OVLY_SAVE_PARMSA;
typedef struct tagMCI_OVLY_SAVE_PARMSW MCI_OVLY_SAVE_PARMSW;
typedef struct tagMCI_VD_ESCAPE_PARMSA MCI_VD_ESCAPE_PARMSA;
typedef struct tagMCI_VD_ESCAPE_PARMSW MCI_VD_ESCAPE_PARMSW;
typedef struct tagMCI_WAVE_OPEN_PARMSA MCI_WAVE_OPEN_PARMSA;
typedef struct tagMCI_WAVE_OPEN_PARMSW MCI_WAVE_OPEN_PARMSW;
typedef struct _NETCONNECTINFOSTRUCT NETCONNECTINFOSTRUCT;
typedef struct _OUTLINETEXTMETRICA *NPOUTLINETEXTMETRICA;
typedef struct _OUTLINETEXTMETRICW *NPOUTLINETEXTMETRICW;
typedef struct _CERT_ALT_NAME_ENTRY *PCERT_ALT_NAME_ENTRY;
typedef struct _CERT_DSS_PARAMETERS *PCERT_DSS_PARAMETERS;
typedef struct _CRYPTOAPI_BLOB *PCERT_RDN_VALUE_BLOB;
typedef struct _CHANGER_MOVE_MEDIUM *PCHANGER_MOVE_MEDIUM;
typedef struct _CONSOLE_CURSOR_INFO *PCONSOLE_CURSOR_INFO;
typedef struct _CRL_DIST_POINT_NAME *PCRL_DIST_POINT_NAME;
typedef struct _CRL_REVOCATION_INFO *PCRL_REVOCATION_INFO;
typedef struct _CRYPT_KEY_PROV_INFO *PCRYPT_KEY_PROV_INFO;
typedef struct _CTL_FIND_USAGE_PARA *PCTL_FIND_USAGE_PARA;
typedef struct tagDDEML_MSG_HOOK_DATA *PDDEML_MSG_HOOK_DATA;
typedef struct _DISK_GROW_PARTITION *PDISK_GROW_PARTITION;
typedef struct tagEMRCREATECOLORSPACE *PEMRCREATECOLORSPACE;
typedef struct tagEMRSETCOLORSPACE *PEMRDELETECOLORSPACE;
typedef struct tagEMREXTSELECTCLIPRGN *PEMREXTSELECTCLIPRGN;
typedef struct tagEMRGLSBOUNDEDRECORD *PEMRGLSBOUNDEDRECORD;
typedef struct tagEMRSCALEVIEWPORTEXTEX *PEMRSCALEWINDOWEXTEX;
typedef struct tagEMRSETCOLORSPACE *PEMRSELECTCOLORSPACE;
typedef struct tagEMRSETVIEWPORTEXTEX *PEMRSETVIEWPORTEXTEX;
typedef struct tagEMRSETVIEWPORTORGEX *PEMRSETVIEWPORTORGEX;
typedef struct _LUID_AND_ATTRIBUTES *PLUID_AND_ATTRIBUTES;
typedef struct tagMCI_ANIM_PLAY_PARMS *PMCI_ANIM_PLAY_PARMS;
typedef struct tagMCI_ANIM_STEP_PARMS *PMCI_ANIM_STEP_PARMS;
typedef struct tagMCI_OVLY_RECT_PARMS *PMCI_OVLY_RECT_PARMS;
typedef struct tMIXERCONTROLDETAILS *PMIXERCONTROLDETAILS;
typedef struct _PRINTER_NOTIFY_INFO *PPRINTER_NOTIFY_INFO;
typedef struct _PROCESS_INFORMATION *PPROCESS_INFORMATION;
typedef struct _PSFEATURE_CUSTPAPER *PPSFEATURE_CUSTPAPER;
typedef struct _PRINTER_ENUM_VALUESA PRINTER_ENUM_VALUESA;
typedef struct _PRINTER_ENUM_VALUESW PRINTER_ENUM_VALUESW;
typedef struct _SECURITY_ATTRIBUTES *PSECURITY_ATTRIBUTES;
typedef struct _TAPE_GET_STATISTICS *PTAPE_GET_STATISTICS;
typedef struct _TOKEN_PRIMARY_GROUP *PTOKEN_PRIMARY_GROUP;
typedef struct _VOLUME_DISK_EXTENTS *PVOLUME_DISK_EXTENTS;
typedef struct _RPC_CLIENT_INTERFACE RPC_CLIENT_INTERFACE;
typedef struct _7F42DEB2BB5D0DE64733A8884285C23D RPC_IMPORT_CONTEXT_P;
typedef struct _RPC_PROTSEQ_ENDPOINT RPC_PROTSEQ_ENDPOINT;
typedef struct _RPC_SERVER_INTERFACE RPC_SERVER_INTERFACE;
typedef void *RPC_SS_THREAD_HANDLE;
typedef struct _RTL_CRITICAL_SECTION RTL_CRITICAL_SECTION;
typedef struct _OSVERSIONINFOEXW RTL_OSVERSIONINFOEXW;
typedef struct _SERVICE_DESCRIPTIONA SERVICE_DESCRIPTIONA;
typedef struct _SERVICE_DESCRIPTIONW SERVICE_DESCRIPTIONW;
typedef struct _SERVICE_TABLE_ENTRYA SERVICE_TABLE_ENTRYA;
typedef struct _SERVICE_TABLE_ENTRYW SERVICE_TABLE_ENTRYW;
typedef struct _SHCREATEPROCESSINFOW SHCREATEPROCESSINFOW;
typedef struct _UNIVERSAL_NAME_INFOA UNIVERSAL_NAME_INFOA;
typedef struct _UNIVERSAL_NAME_INFOW UNIVERSAL_NAME_INFOW;
typedef struct _D890D4C8B96B04D8C981ECF31CD55F01 VOLUME_BITMAP_BUFFER;
typedef struct _WSAServiceClassInfoA WSASERVICECLASSINFOA;
typedef struct _WSAServiceClassInfoW WSASERVICECLASSINFOW;
struct XMLDOMDocumentEvents {struct XMLDOMDocumentEventsVtbl *lpVtbl;};
struct _RPC_PROTSEQ_VECTORA {unsigned int Count;unsigned __int8 *Protseq[1];};
struct _RPC_PROTSEQ_VECTORW {unsigned int Count;unsigned __int16 *Protseq[1];};
typedef struct _CERT_ALT_NAME_ENTRY CERT_ALT_NAME_ENTRY;
typedef struct _CERT_DSS_PARAMETERS CERT_DSS_PARAMETERS;
typedef struct _CRYPTOAPI_BLOB CERT_RDN_VALUE_BLOB;
typedef struct _CHANGER_MOVE_MEDIUM CHANGER_MOVE_MEDIUM;
typedef struct _CONSOLE_CURSOR_INFO CONSOLE_CURSOR_INFO;
typedef struct _CRL_DIST_POINT_NAME CRL_DIST_POINT_NAME;
typedef struct _CRL_REVOCATION_INFO CRL_REVOCATION_INFO;
typedef struct _CRYPT_KEY_PROV_INFO CRYPT_KEY_PROV_INFO;
typedef struct _CTL_FIND_USAGE_PARA CTL_FIND_USAGE_PARA;
typedef struct tagDDEML_MSG_HOOK_DATA DDEML_MSG_HOOK_DATA;
typedef struct _DISK_GROW_PARTITION DISK_GROW_PARTITION;
typedef struct tagEMRCREATECOLORSPACE EMRCREATECOLORSPACE;
typedef struct tagEMRSETCOLORSPACE EMRDELETECOLORSPACE;
typedef struct tagEMREXTSELECTCLIPRGN EMREXTSELECTCLIPRGN;
typedef struct tagEMRGLSBOUNDEDRECORD EMRGLSBOUNDEDRECORD;
typedef struct tagEMRSCALEVIEWPORTEXTEX EMRSCALEWINDOWEXTEX;
typedef struct tagEMRSETCOLORSPACE EMRSELECTCOLORSPACE;
typedef struct tagEMRSETVIEWPORTEXTEX EMRSETVIEWPORTEXTEX;
typedef struct tagEMRSETVIEWPORTORGEX EMRSETVIEWPORTORGEX;
typedef struct _ENCRYPTED_DATA_INFO ENCRYPTED_DATA_INFO;
struct IBindStatusCallback {struct IBindStatusCallbackVtbl *lpVtbl;};
struct IDummyHICONIncluder {struct IDummyHICONIncluderVtbl *lpVtbl;};
struct IEnumSTATPROPSETSTG {struct IEnumSTATPROPSETSTGVtbl *lpVtbl;};
struct IExternalConnection {struct IExternalConnectionVtbl *lpVtbl;};
struct IForegroundTransfer {struct IForegroundTransferVtbl *lpVtbl;};
struct IOleInPlaceUIWindow {struct IOleInPlaceUIWindowVtbl *lpVtbl;};
struct IPropertySetStorage {struct IPropertySetStorageVtbl *lpVtbl;};
struct IRunningObjectTable {struct IRunningObjectTableVtbl *lpVtbl;};
struct IThumbnailExtractor {struct IThumbnailExtractorVtbl *lpVtbl;};
struct IWindowForBindingUI {struct IWindowForBindingUIVtbl *lpVtbl;};
struct IXMLDOMCDATASection {struct IXMLDOMCDATASectionVtbl *lpVtbl;};
struct IXMLDOMDocumentType {struct IXMLDOMDocumentTypeVtbl *lpVtbl;};
struct IXMLDOMNamedNodeMap {struct IXMLDOMNamedNodeMapVtbl *lpVtbl;};
typedef struct _LOAD_DLL_DEBUG_INFO LOAD_DLL_DEBUG_INFO;
typedef ICancelMethodCalls *LPCANCELMETHODCALLS;
typedef struct tagCBTACTIVATESTRUCT *LPCBTACTIVATESTRUCT;
typedef struct tagCOMPAREITEMSTRUCT *LPCOMPAREITEMSTRUCT;
typedef struct _CONNECTDLGSTRUCTA *LPCONNECTDLGSTRUCTA;
typedef struct _CONNECTDLGSTRUCTW *LPCONNECTDLGSTRUCTW;
typedef struct _DATATYPES_INFO_1A *LPDATATYPES_INFO_1A;
typedef struct _DATATYPES_INFO_1W *LPDATATYPES_INFO_1W;
typedef struct _GLYPHMETRICSFLOAT *LPGLYPHMETRICSFLOAT;
typedef struct _GRADIENT_TRIANGLE *LPGRADIENT_TRIANGLE;
typedef IInternetBindInfo *LPIINTERNETBINDINFO;
typedef IInternetPriority *LPIINTERNETPRIORITY;
typedef IInternetProtocol *LPIINTERNETPROTOCOL;
typedef struct tagOBJECTDESCRIPTOR *LPLINKSRCDESCRIPTOR;
typedef struct tagMCI_GENERIC_PARMS *LPMCI_GENERIC_PARMS;
typedef struct tagMCI_SEQ_SET_PARMS *LPMCI_SEQ_SET_PARMS;
typedef struct tagMCI_VD_PLAY_PARMS *LPMCI_VD_PLAY_PARMS;
typedef struct tagMCI_VD_STEP_PARMS *LPMCI_VD_STEP_PARMS;
typedef struct tagMEASUREITEMSTRUCT *LPMEASUREITEMSTRUCT;
typedef struct tagMOUSEHOOKSTRUCTEX *LPMOUSEHOOKSTRUCTEX;
typedef struct tagNCCALCSIZE_PARAMS *LPNCCALCSIZE_PARAMS;
typedef struct tagNONCLIENTMETRICSA *LPNONCLIENTMETRICSA;
typedef struct tagNONCLIENTMETRICSW *LPNONCLIENTMETRICSW;
typedef struct _PRINTER_DEFAULTSA *LPPRINTER_DEFAULTSA;
typedef struct _PRINTER_DEFAULTSW *LPPRINTER_DEFAULTSW;
typedef struct _RASTERIZER_STATUS *LPRASTERIZER_STATUS;
typedef struct _REMOTE_NAME_INFOA *LPREMOTE_NAME_INFOA;
typedef struct _REMOTE_NAME_INFOW *LPREMOTE_NAME_INFOW;
typedef struct _SHELLEXECUTEINFOA *LPSHELLEXECUTEINFOA;
typedef struct _SHELLEXECUTEINFOW *LPSHELLEXECUTEINFOW;
typedef struct _WSAPROTOCOL_INFOA *LPWSAPROTOCOL_INFOA;
typedef struct _WSAPROTOCOL_INFOW *LPWSAPROTOCOL_INFOW;
typedef struct _LUID_AND_ATTRIBUTES LUID_AND_ATTRIBUTES;
enum MACRO_ACCESS_MAX_MS {ACCESS_MAX_MS_OBJECT_ACE_TYPE = 0x8,ACCESS_MAX_MS_V4_ACE_TYPE = 0x8,ACCESS_MAX_MS_ACE_TYPE = 0x8,};
enum MACRO_ACCESS_OBJECT {ACCESS_OBJECT_GUID = 0,ACCESS_PROPERTY_SET_GUID = 1,ACCESS_PROPERTY_GUID = 2,ACCESS_MAX_LEVEL = 4,};
enum MACRO_BS_PUSHBUTTON {BS_PUSHBUTTON = 0x0,BS_DEFPUSHBUTTON = 0x1,BS_CHECKBOX = 0x2,BS_AUTOCHECKBOX = 0x3,BS_RADIOBUTTON = 0x4,BS_3STATE = 0x5,BS_AUTO3STATE = 0x6,BS_GROUPBOX = 0x7,BS_USERBUTTON = 0x8,BS_AUTORADIOBUTTON = 0x9,BS_OWNERDRAW = 0xB,BS_LEFTTEXT = 0x20,BS_TEXT = 0x0,BS_ICON = 0x40,BS_BITMAP = 0x80,BS_LEFT = 0x100,BS_RIGHT = 0x200,BS_CENTER = 0x300,BS_TOP = 0x400,BS_BOTTOM = 0x800,BS_VCENTER = 0xC00,BS_PUSHLIKE = 0x1000,BS_MULTILINE = 0x2000,BS_NOTIFY = 0x4000,BS_FLAT = 0x8000,BS_RIGHTBUTTON = 0x20,};
enum MACRO_CAL_GREGORIAN {CAL_GREGORIAN = 1,CAL_GREGORIAN_US = 2,CAL_JAPAN = 3,CAL_TAIWAN = 4,CAL_KOREA = 5,CAL_HIJRI = 6,CAL_THAI = 7,CAL_HEBREW = 8,CAL_GREGORIAN_ME_FRENCH = 9,CAL_GREGORIAN_ARABIC = 10,CAL_GREGORIAN_XLIT_ENGLISH = 11,CAL_GREGORIAN_XLIT_FRENCH = 12,};
enum MACRO_COLORMGMTCAPS {COLORMGMTCAPS = 121,};
enum MACRO_COMPLEXREGION {COMPLEXREGION = 3,};
enum MACRO_CRYPT_INSTALL {CRYPT_INSTALL_OID_FUNC_BEFORE_FLAG = 1,CRYPT_GET_INSTALLED_OID_FUNC_FLAG = 1,CRYPT_REGISTER_FIRST_INDEX = 0,CRYPT_REGISTER_LAST_INDEX = -1,CRYPT_MATCH_ANY_ENCODING_TYPE = -1,CRYPT_HASH_ALG_OID_GROUP_ID = 1,CRYPT_ENCRYPT_ALG_OID_GROUP_ID = 2,CRYPT_PUBKEY_ALG_OID_GROUP_ID = 3,CRYPT_SIGN_ALG_OID_GROUP_ID = 4,CRYPT_RDN_ATTR_OID_GROUP_ID = 5,CRYPT_EXT_OR_ATTR_OID_GROUP_ID = 6,CRYPT_ENHKEY_USAGE_OID_GROUP_ID = 7,CRYPT_POLICY_OID_GROUP_ID = 8,CRYPT_LAST_OID_GROUP_ID = 8,CRYPT_FIRST_ALG_OID_GROUP_ID = 1,CRYPT_LAST_ALG_OID_GROUP_ID = 4,CRYPT_OID_INHIBIT_SIGNATURE_FORMAT_FLAG = 1,CRYPT_OID_USE_PUBKEY_PARA_FOR_PKCS7_FLAG = 2,CRYPT_OID_NO_NULL_ALGORITHM_PARA_FLAG = 4,CRYPT_OID_INFO_OID_KEY = 1,CRYPT_OID_INFO_NAME_KEY = 2,CRYPT_OID_INFO_ALGID_KEY = 3,CRYPT_OID_INFO_SIGN_KEY = 4,CRYPT_INSTALL_OID_INFO_BEFORE_FLAG = 1,CRYPT_LOCALIZED_NAME_ENCODING_TYPE = 0,};
enum MACRO_CRYPT_MESSAGE {CRYPT_MESSAGE_BARE_CONTENT_OUT_FLAG = 0x1,CRYPT_MESSAGE_ENCAPSULATED_CONTENT_OUT_FLAG = 0x2,CRYPT_MESSAGE_KEYID_SIGNER_FLAG = 0x4,CRYPT_MESSAGE_KEYID_RECIPIENT_FLAG = 0x4,};
enum MACRO_CS_INSERTCHAR {CS_INSERTCHAR = 0x2000,CS_NOMOVECARET = 0x4000,};
enum MACRO_DBG_EXCEPTION {DBG_EXCEPTION_NOT_HANDLED = 0x80010001,};
enum MACRO_DBG_TERMINATE {DBG_TERMINATE_THREAD = 0x40010003,DBG_TERMINATE_PROCESS = 0x40010004,DBG_CONTROL_C = 0x40010005,DBG_CONTROL_BREAK = 0x40010008,};
enum MACRO_DC_PRINTERMEM {DC_PRINTERMEM = 28,DC_MEDIAREADY = 29,DC_STAPLE = 30,DC_PRINTRATEPPM = 31,DC_COLORDEVICE = 32,DC_NUP = 33,};
enum MACRO_DRIVERVERSION {DRIVERVERSION = 0,TECHNOLOGY = 2,HORZSIZE = 4,};
enum MACRO_ENUMPAPERBINS {ENUMPAPERBINS = 31,SETDIBSCALING = 32,};
enum MACRO_EVENTLOG_FULL {EVENTLOG_FULL_INFO = 0,};
enum MACRO_GETCOLORTABLE {GETCOLORTABLE = 5,};
enum MACRO_GETTECHNOLOGY {GETTECHNOLOGY = 20,};
enum MACRO_HTBOTTOMRIGHT {HTBOTTOMRIGHT = 17,};
enum MACRO_HTTRANSPARENT {HTTRANSPARENT = -1,};
enum MACRO_INTERNATIONAL {INTERNATIONAL_USAGE = 0x1,};
enum MACRO_IOCTL_CHANGER {IOCTL_CHANGER_BASE = 48,IOCTL_CHANGER_GET_PARAMETERS = 3162112,IOCTL_CHANGER_GET_STATUS = 3162116,IOCTL_CHANGER_GET_PRODUCT_DATA = 3162120,IOCTL_CHANGER_SET_ACCESS = 3194896,IOCTL_CHANGER_GET_ELEMENT_STATUS = 3194900,IOCTL_CHANGER_INITIALIZE_ELEMENT_STATUS = 3162136,IOCTL_CHANGER_SET_POSITION = 3162140,IOCTL_CHANGER_EXCHANGE_MEDIUM = 3162144,IOCTL_CHANGER_MOVE_MEDIUM = 3162148,IOCTL_CHANGER_REINITIALIZE_TRANSPORT = 3162152,IOCTL_CHANGER_QUERY_VOLUME_TAGS = 3194924,};
enum MACRO_MAX_LEADBYTES {MAX_LEADBYTES = 12,MAX_DEFAULTCHAR = 2,};
enum MACRO_MIDIPATCHSIZE {MIDIPATCHSIZE = 128,};
enum MACRO_MIXER_OBJECTF {MIXER_OBJECTF_HANDLE = 0x80000000,MIXER_OBJECTF_MIXER = 0x0,MIXER_OBJECTF_HMIXER = 0x80000000,MIXER_OBJECTF_WAVEOUT = 0x10000000,MIXER_OBJECTF_HWAVEOUT = 0x90000000,MIXER_OBJECTF_WAVEIN = 0x20000000,MIXER_OBJECTF_HWAVEIN = 0xA0000000,MIXER_OBJECTF_MIDIOUT = 0x30000000,MIXER_OBJECTF_HMIDIOUT = 0xB0000000,MIXER_OBJECTF_MIDIIN = 0x40000000,MIXER_OBJECTF_HMIDIIN = 0xC0000000,MIXER_OBJECTF_AUX = 0x50000000,};
enum MACRO_MOUSE_WHEELED {MOUSE_WHEELED = 0x4,};
enum MACRO_NCBLANSTALERT {NCBLANSTALERT = 0x73,};
enum MACRO_OPAQUEKEYBLOB {OPAQUEKEYBLOB = 0x9,};
enum MACRO_PHYSICALWIDTH {PHYSICALWIDTH = 110,};
enum MACRO_PRINTDLGEXORD {PRINTDLGEXORD = 1549,};
enum MACRO_PRINTRATEUNIT {PRINTRATEUNIT_PPM = 1,PRINTRATEUNIT_CPS = 2,PRINTRATEUNIT_LPM = 3,PRINTRATEUNIT_IPM = 4,};
enum MACRO_REPLACEDLGORD {REPLACEDLGORD = 1541,};
enum MACRO_RESOURCEUSAGE {RESOURCEUSAGE_CONNECTABLE = 0x1,RESOURCEUSAGE_CONTAINER = 0x2,RESOURCEUSAGE_NOLOCALDEVICE = 0x4,RESOURCEUSAGE_SIBLING = 0x8,RESOURCEUSAGE_ATTACHED = 0x10,RESOURCEUSAGE_ALL = 0x13,RESOURCEUSAGE_RESERVED = 0x80000000,};
enum MACRO_RPC_INTERFACE {RPC_INTERFACE_HAS_PIPES = 0x1,};
enum MACRO_SERVICE_QUERY {SERVICE_QUERY_CONFIG = 0x1,SERVICE_CHANGE_CONFIG = 0x2,SERVICE_QUERY_STATUS = 0x4,SERVICE_ENUMERATE_DEPENDENTS = 0x8,SERVICE_START = 0x10,SERVICE_STOP = 0x20,SERVICE_PAUSE_CONTINUE = 0x40,SERVICE_INTERROGATE = 0x80,SERVICE_USER_DEFINED_CONTROL = 0x100,SERVICE_ALL_ACCESS = 0xF01FF,SERVICE_RUNS_IN_SYSTEM_PROCESS = 0x1,SERVICE_CONFIG_DESCRIPTION = 0x1,SERVICE_CONFIG_FAILURE_ACTIONS = 0x2,};
enum MACRO_SETMITERLIMIT {SETMITERLIMIT = 23,};
enum MACRO_SIZE_RESTORED {SIZE_RESTORED = 0,SIZE_MINIMIZED = 1,SIZE_MAXIMIZED = 2,SIZE_MAXSHOW = 3,SIZE_MAXHIDE = 4,};
enum MACRO_STATUS_ACCESS {STATUS_ACCESS_VIOLATION = 0xC0000005,STATUS_IN_PAGE_ERROR = 0xC0000006,STATUS_INVALID_HANDLE = 0xC0000008,STATUS_NO_MEMORY = 0xC0000017,STATUS_ILLEGAL_INSTRUCTION = 0xC000001D,STATUS_NONCONTINUABLE_EXCEPTION = 0xC0000025,STATUS_INVALID_DISPOSITION = 0xC0000026,STATUS_ARRAY_BOUNDS_EXCEEDED = 0xC000008C,STATUS_FLOAT_DENORMAL_OPERAND = 0xC000008D,STATUS_FLOAT_DIVIDE_BY_ZERO = 0xC000008E,STATUS_FLOAT_INEXACT_RESULT = 0xC000008F,STATUS_FLOAT_INVALID_OPERATION = 0xC0000090,STATUS_FLOAT_OVERFLOW = 0xC0000091,STATUS_FLOAT_STACK_CHECK = 0xC0000092,STATUS_FLOAT_UNDERFLOW = 0xC0000093,STATUS_INTEGER_DIVIDE_BY_ZERO = 0xC0000094,STATUS_INTEGER_OVERFLOW = 0xC0000095,STATUS_PRIVILEGED_INSTRUCTION = 0xC0000096,STATUS_STACK_OVERFLOW = 0xC00000FD,STATUS_CONTROL_C_EXIT = 0xC000013A,STATUS_FLOAT_MULTIPLE_FAULTS = 0xC00002B4,STATUS_FLOAT_MULTIPLE_TRAPS = 0xC00002B5,STATUS_ILLEGAL_VLM_REFERENCE = 0xC00002C0,STATUS_REG_NAT_CONSUMPTION = 0xC00002C9,};
enum MACRO_X509_SEQUENCE {X509_SEQUENCE_OF_ANY = 34,X509_CRL_DIST_POINTS = 35,X509_ENHANCED_KEY_USAGE = 36,};
enum MACRO__HEAPBADBEGIN {_HEAPBADBEGIN = -4,};
typedef struct tagMCI_ANIM_PLAY_PARMS MCI_ANIM_PLAY_PARMS;
typedef struct tagMCI_ANIM_RECT_PARMS MCI_ANIM_RECT_PARMS;
typedef struct tagMCI_ANIM_STEP_PARMS MCI_ANIM_STEP_PARMS;
typedef struct tagMCI_OVLY_RECT_PARMS MCI_OVLY_RECT_PARMS;
typedef struct tMIXERCONTROLDETAILS MIXERCONTROLDETAILS;
typedef struct tagOIFI OLEINPLACEFRAMEINFO;
typedef struct _CERT_ALT_NAME_INFO *PCERT_ALT_NAME_INFO;
typedef struct _CERT_CHAIN_CONTEXT *PCERT_CHAIN_CONTEXT;
typedef struct _CERT_CHAIN_ELEMENT *PCERT_CHAIN_ELEMENT;
typedef struct _CERT_DH_PARAMETERS *PCERT_DH_PARAMETERS;
typedef struct _CERT_POLICIES_INFO *PCERT_POLICIES_INFO;
typedef struct _CHANGER_SET_ACCESS *PCHANGER_SET_ACCESS;
typedef struct _CRYPT_CONTENT_INFO *PCRYPT_CONTENT_INFO;
typedef struct _CRYPT_CSP_PROVIDER *PCRYPT_CSP_PROVIDER;
typedef struct _CRYPTOAPI_BLOB *PCRYPT_INTEGER_BLOB;
typedef struct tagEMRCREATEMONOBRUSH *PEMRCREATEMONOBRUSH;
typedef struct tagEMREXCLUDECLIPRECT *PEMREXCLUDECLIPRECT;
typedef struct tagEMRSETARCDIRECTION *PEMRSETARCDIRECTION;
typedef struct tagEMRSELECTCLIPPATH *PEMRSETPOLYFILLMODE;
typedef struct _EXCEPTION_POINTERS *PEXCEPTION_POINTERS;
typedef struct _EXCEPTION_RECORD32 *PEXCEPTION_RECORD32;
typedef struct _EXCEPTION_RECORD64 *PEXCEPTION_RECORD64;
typedef struct _FOCUS_EVENT_RECORD *PFOCUS_EVENT_RECORD;
typedef struct _GETVERSIONINPARAMS *PGETVERSIONINPARAMS;
typedef struct tagHARDWAREHOOKSTRUCT *PHARDWAREHOOKSTRUCT;
enum PIDMSI_STATUS_VALUE {PIDMSI_STATUS_NORMAL = 0x0,PIDMSI_STATUS_NEW = 0x1,PIDMSI_STATUS_PRELIM = 0x2,PIDMSI_STATUS_DRAFT = 0x3,PIDMSI_STATUS_INPROGRESS = 0x4,PIDMSI_STATUS_EDIT = 0x5,PIDMSI_STATUS_REVIEW = 0x6,PIDMSI_STATUS_PROOF = 0x7,PIDMSI_STATUS_FINAL = 0x8,PIDMSI_STATUS_OTHER = 0x7FFF,};
typedef struct _IMAGE_NT_HEADERS *PIMAGE_NT_HEADERS32;
typedef struct _IMAGE_NT_HEADERS64 *PIMAGE_NT_HEADERS64;
typedef struct tagMCI_SYSINFO_PARMSA *PMCI_SYSINFO_PARMSA;
typedef struct tagMCI_SYSINFO_PARMSW *PMCI_SYSINFO_PARMSW;
typedef struct tagMCI_WAVE_SET_PARMS *PMCI_WAVE_SET_PARMS;
typedef struct tagMIXERLINECONTROLSA *PMIXERLINECONTROLSA;
typedef struct tagMIXERLINECONTROLSW *PMIXERLINECONTROLSW;
typedef struct _MOUSE_EVENT_RECORD *PMOUSE_EVENT_RECORD;
typedef struct _OUTLINETEXTMETRICA *POUTLINETEXTMETRICA;
typedef struct _OUTLINETEXTMETRICW *POUTLINETEXTMETRICW;
typedef struct _PERF_COUNTER_BLOCK *PPERF_COUNTER_BLOCK;
typedef struct _PROCESS_HEAP_ENTRY *PPROCESS_HEAP_ENTRY;
typedef struct _PRINTER_NOTIFY_INFO PRINTER_NOTIFY_INFO;
typedef struct _PROCESS_INFORMATION PROCESS_INFORMATION;
typedef struct _A0026B003AB75CC8BFC049DB25C2779D *PRPC_DISPATCH_TABLE;
typedef struct _OSVERSIONINFOW *PRTL_OSVERSIONINFOW;
typedef struct _RTL_CRITICAL_SECTION_DEBUG *PRTL_RESOURCE_DEBUG;
typedef struct _DC79A6464562D2DC48FEEE8D5793116D *PSCARD_READERSTATEA;
typedef struct _B80B7D01E79FADDB4AAC58DE22BC823F *PSCARD_READERSTATEW;
typedef struct _PSFEATURE_CUSTPAPER PSFEATURE_CUSTPAPER;
typedef struct _SID_AND_ATTRIBUTES *PSID_AND_ATTRIBUTES;
typedef struct _TOKEN_DEFAULT_DACL *PTOKEN_DEFAULT_DACL;
typedef struct _VERIFY_INFORMATION *PVERIFY_INFORMATION;
typedef struct _WSANAMESPACE_INFOA *PWSANAMESPACE_INFOA;
typedef struct _WSANAMESPACE_INFOW *PWSANAMESPACE_INFOW;
typedef struct _RPC_PROTSEQ_VECTORA RPC_PROTSEQ_VECTORA;
typedef struct _RPC_PROTSEQ_VECTORW RPC_PROTSEQ_VECTORW;
typedef struct _RPC_TRANSFER_SYNTAX RPC_TRANSFER_SYNTAX;
typedef struct _SECURITY_ATTRIBUTES SECURITY_ATTRIBUTES;
typedef struct _SECURITY_DESCRIPTOR SECURITY_DESCRIPTOR;
typedef struct _SOCKET_ADDRESS_LIST SOCKET_ADDRESS_LIST;
typedef struct _SYSTEM_POWER_STATUS SYSTEM_POWER_STATUS;
typedef struct _TAPE_GET_STATISTICS TAPE_GET_STATISTICS;
typedef struct _TOKEN_PRIMARY_GROUP TOKEN_PRIMARY_GROUP;
typedef struct _VOLUME_DISK_EXTENTS VOLUME_DISK_EXTENTS;
struct _COMM_FAULT_OFFSETS {__int16 CommOffset;__int16 FaultOffset;};
enum _FINDEX_INFO_LEVELS {FindExInfoStandard = 0x0,FindExInfoMaxInfoLevel = 0x1,};
enum _JOBOBJECTINFOCLASS {JobObjectBasicAccountingInformation = 0x1,JobObjectBasicLimitInformation = 0x2,JobObjectBasicProcessIdList = 0x3,JobObjectBasicUIRestrictions = 0x4,JobObjectSecurityLimitInformation = 0x5,JobObjectEndOfJobTimeInformation = 0x6,JobObjectAssociateCompletionPortInformation = 0x7,JobObjectBasicAndIoAccountingInformation = 0x8,JobObjectExtendedLimitInformation = 0x9,MaxJobObjectInfoClass = 0xA,};
struct _MIDL_FORMAT_STRING {__int16 Pad;unsigned __int8 Format[];};
enum _STORAGE_MEDIA_TYPE {DDS_4mm = 0x20,MiniQic = 0x21,Travan = 0x22,QIC = 0x23,MP_8mm = 0x24,AME_8mm = 0x25,AIT1_8mm = 0x26,DLT = 0x27,NCTP = 0x28,IBM_3480 = 0x29,IBM_3490E = 0x2A,IBM_Magstar_3590 = 0x2B,IBM_Magstar_MP = 0x2C,STK_DATA_D3 = 0x2D,SONY_DTF = 0x2E,DV_6mm = 0x2F,DMI = 0x30,SONY_D2 = 0x31,CLEANER_CARTRIDGE = 0x32,CD_ROM = 0x33,CD_R = 0x34,CD_RW = 0x35,DVD_ROM = 0x36,DVD_R = 0x37,DVD_RW = 0x38,MO_3_RW = 0x39,MO_5_WO = 0x3A,MO_5_RW = 0x3B,MO_5_LIMDOW = 0x3C,PC_5_WO = 0x3D,PC_5_RW = 0x3E,PD_5_RW = 0x3F,ABL_5_WO = 0x40,PINNACLE_APEX_5_RW = 0x41,SONY_12_WO = 0x42,PHILIPS_12_WO = 0x43,HITACHI_12_WO = 0x44,CYGNET_12_WO = 0x45,KODAK_14_WO = 0x46,MO_NFR_525 = 0x47,NIKON_12_RW = 0x48,IOMEGA_ZIP = 0x49,IOMEGA_JAZ = 0x4A,SYQUEST_EZ135 = 0x4B,SYQUEST_EZFLYER = 0x4C,SYQUEST_SYJET = 0x4D,AVATAR_F2 = 0x4E,MP2_8mm = 0x4F,DST_S = 0x50,DST_M = 0x51,DST_L = 0x52,VXATape_1 = 0x53,VXATape_2 = 0x54,STK_EAGLE = 0x55,LTO_Ultrium = 0x56,LTO_Accelis = 0x57,};
typedef struct _ACCESS_ALLOWED_ACE ACCESS_ALLOWED_ACE;
typedef struct _CERT_ALT_NAME_INFO CERT_ALT_NAME_INFO;
typedef struct _CERT_CHAIN_CONTEXT CERT_CHAIN_CONTEXT;
typedef struct _CERT_CHAIN_ELEMENT CERT_CHAIN_ELEMENT;
typedef struct _CERT_DH_PARAMETERS CERT_DH_PARAMETERS;
typedef struct _CERT_POLICIES_INFO CERT_POLICIES_INFO;
typedef struct _CHANGER_SET_ACCESS CHANGER_SET_ACCESS;
typedef struct tagCLIENTCREATESTRUCT CLIENTCREATESTRUCT;
typedef union _CLIENT_CALL_RETURN CLIENT_CALL_RETURN;
typedef struct _COMM_FAULT_OFFSETS COMM_FAULT_OFFSETS;
typedef struct _CRYPT_CONTENT_INFO CRYPT_CONTENT_INFO;
typedef struct _CRYPT_CSP_PROVIDER CRYPT_CSP_PROVIDER;
typedef struct _CRYPTOAPI_BLOB CRYPT_INTEGER_BLOB;
typedef struct tagEMRCREATEMONOBRUSH EMRCREATEMONOBRUSH;
typedef struct tagEMREXCLUDECLIPRECT EMREXCLUDECLIPRECT;
typedef struct tagEMRSETARCDIRECTION EMRSETARCDIRECTION;
typedef struct tagEMRSELECTCLIPPATH EMRSETPOLYFILLMODE;
typedef struct _EXCEPTION_POINTERS EXCEPTION_POINTERS;
typedef struct _EXCEPTION_RECORD32 EXCEPTION_RECORD32;
typedef struct _EXCEPTION_RECORD64 EXCEPTION_RECORD64;
typedef struct _FLOATING_SAVE_AREA FLOATING_SAVE_AREA;
typedef struct _FOCUS_EVENT_RECORD FOCUS_EVENT_RECORD;
typedef struct _GETVERSIONINPARAMS GETVERSIONINPARAMS;
typedef struct tagHARDWAREHOOKSTRUCT HARDWAREHOOKSTRUCT;
struct ICancelMethodCalls {struct ICancelMethodCallsVtbl *lpVtbl;};
typedef struct _IMAGE_NT_HEADERS IMAGE_NT_HEADERS32;
typedef struct _IMAGE_NT_HEADERS64 IMAGE_NT_HEADERS64;
typedef struct _IMAGE_THUNK_DATA32 IMAGE_THUNK_DATA32;
typedef struct _IMAGE_THUNK_DATA64 IMAGE_THUNK_DATA64;
enum IMPORT_OBJECT_TYPE {IMPORT_OBJECT_CODE = 0x0,IMPORT_OBJECT_DATA = 0x1,IMPORT_OBJECT_CONST = 0x2,};
struct IRpcChannelBuffer2 {struct IRpcChannelBuffer2Vtbl *lpVtbl;};
struct IRpcChannelBuffer3 {struct IRpcChannelBuffer3Vtbl *lpVtbl;};
struct ISynchronizeHandle {struct ISynchronizeHandleVtbl *lpVtbl;};
typedef struct tagBITMAPCOREHEADER *LPBITMAPCOREHEADER;
typedef struct tagBITMAPFILEHEADER *LPBITMAPFILEHEADER;
typedef struct tagBITMAPINFOHEADER *LPBITMAPINFOHEADER;
typedef IDataAdviseHolder *LPDATAADVISEHOLDER;
typedef struct tagDELETEITEMSTRUCT *LPDELETEITEMSTRUCT;
typedef struct tagENUMLOGFONTEXDVA *LPENUMLOGFONTEXDVA;
typedef struct tagENUMLOGFONTEXDVW *LPENUMLOGFONTEXDVW;
typedef struct _tagHIT_LOGGING_INFO *LPHIT_LOGGING_INFO;
typedef struct tagHW_PROFILE_INFOA *LPHW_PROFILE_INFOA;
typedef struct tagHW_PROFILE_INFOW *LPHW_PROFILE_INFOW;
typedef IInternetSession *LPIINTERNETSESSION;
typedef struct tagIMEMENUITEMINFOA *LPIMEMENUITEMINFOA;
typedef struct tagIMEMENUITEMINFOW *LPIMEMENUITEMINFOW;
typedef struct tagMCI_RECORD_PARMS *LPMCI_RECORD_PARMS;
typedef struct tagMCI_STATUS_PARMS *LPMCI_STATUS_PARMS;
typedef struct tagMDICREATESTRUCTA *LPMDICREATESTRUCTA;
typedef struct tagMDICREATESTRUCTW *LPMDICREATESTRUCTW;
typedef struct tagMINIMIZEDMETRICS *LPMINIMIZEDMETRICS;
typedef struct tagOBJECTDESCRIPTOR *LPOBJECTDESCRIPTOR;
typedef IOleInPlaceObject *LPOLEINPLACEOBJECT;
typedef IOleItemContainer *LPOLEITEMCONTAINER;
typedef struct _9B80566C9ECE6A73A5F898405A50FFFF *LPOPENCARDNAME_EXA;
typedef struct _A63D84EB732F4E602FF2E049D2D99B44 *LPOPENCARDNAME_EXW;
typedef struct _OSVERSIONINFOEXA *LPOSVERSIONINFOEXA;
typedef struct _OSVERSIONINFOEXW *LPOSVERSIONINFOEXW;
typedef IParseDisplayName *LPPARSEDISPLAYNAME;
typedef struct _PROPSHEETHEADERA *LPPROPSHEETHEADERA;
typedef struct _PROPSHEETHEADERW *LPPROPSHEETHEADERW;
typedef struct _PROVIDOR_INFO_1A *LPPROVIDOR_INFO_1A;
typedef struct _PROVIDOR_INFO_1W *LPPROVIDOR_INFO_1W;
typedef struct _PROVIDOR_INFO_2A *LPPROVIDOR_INFO_2A;
typedef struct _PROVIDOR_INFO_2W *LPPROVIDOR_INFO_2W;
typedef struct _QOS_SHAPING_RATE *LPQOS_SHAPING_RATE;
typedef struct _SCARD_IO_REQUEST *LPSCARD_IO_REQUEST;
typedef struct _6D2254E53597AC8CE26BF57895A6DFF7 *LPSCARD_T0_COMMAND;
typedef struct _SENDCMDOUTPARAMS *LPSENDCMDOUTPARAMS;
typedef ISupportErrorInfo *LPSUPPORTERRORINFO;
typedef ITypeChangeEvents *LPTYPECHANGEEVENTS;
typedef struct _WIN32_FIND_DATAA *LPWIN32_FIND_DATAA;
typedef struct _WIN32_FIND_DATAW *LPWIN32_FIND_DATAW;
typedef struct _WSANETWORKEVENTS *LPWSANETWORKEVENTS;
typedef struct _WSAPROTOCOLCHAIN *LPWSAPROTOCOLCHAIN;
enum MACRO_ACTIVEOBJECT {ACTIVEOBJECT_STRONG = 0x0,ACTIVEOBJECT_WEAK = 0x1,};
enum MACRO_BLACKONWHITE {BLACKONWHITE = 1,WHITEONBLACK = 2,};
enum MACRO_BLTALIGNMENT {BLTALIGNMENT = 119,};
enum MACRO_CERT_REQUEST {CERT_REQUEST_V1 = 0,CERT_KEYGEN_REQUEST_V1 = 0,};
enum MACRO_CERT_UNICODE {CERT_UNICODE_RDN_ERR_INDEX_MASK = 0x3FF,CERT_UNICODE_RDN_ERR_INDEX_SHIFT = 0x16,CERT_UNICODE_ATTR_ERR_INDEX_MASK = 0x3F,CERT_UNICODE_ATTR_ERR_INDEX_SHIFT = 0x10,CERT_UNICODE_VALUE_ERR_INDEX_MASK = 0xFFFF,CERT_UNICODE_VALUE_ERR_INDEX_SHIFT = 0x0,CERT_DIGITAL_SIGNATURE_KEY_USAGE = 0x80,CERT_NON_REPUDIATION_KEY_USAGE = 0x40,CERT_KEY_ENCIPHERMENT_KEY_USAGE = 0x20,CERT_DATA_ENCIPHERMENT_KEY_USAGE = 0x10,CERT_KEY_AGREEMENT_KEY_USAGE = 0x8,CERT_KEY_CERT_SIGN_KEY_USAGE = 0x4,CERT_OFFLINE_CRL_SIGN_KEY_USAGE = 0x2,CERT_CRL_SIGN_KEY_USAGE = 0x2,CERT_ENCIPHER_ONLY_KEY_USAGE = 0x1,CERT_DECIPHER_ONLY_KEY_USAGE = 0x80,CERT_ALT_NAME_OTHER_NAME = 0x1,CERT_ALT_NAME_RFC822_NAME = 0x2,CERT_ALT_NAME_DNS_NAME = 0x3,CERT_ALT_NAME_X400_ADDRESS = 0x4,CERT_ALT_NAME_DIRECTORY_NAME = 0x5,CERT_ALT_NAME_EDI_PARTY_NAME = 0x6,CERT_ALT_NAME_URL = 0x7,CERT_ALT_NAME_IP_ADDRESS = 0x8,CERT_ALT_NAME_REGISTERED_ID = 0x9,CERT_ALT_NAME_ENTRY_ERR_INDEX_MASK = 0xFF,CERT_ALT_NAME_ENTRY_ERR_INDEX_SHIFT = 0x10,CERT_ALT_NAME_VALUE_ERR_INDEX_MASK = 0xFFFF,CERT_ALT_NAME_VALUE_ERR_INDEX_SHIFT = 0x0,CERT_CA_SUBJECT_FLAG = 0x80,CERT_END_ENTITY_SUBJECT_FLAG = 0x40,};
enum MACRO_CLASSFACTORY {CLASSFACTORY_E_FIRST = 0x80040110,CLASSFACTORY_E_LAST = 0x8004011F,CLASSFACTORY_S_FIRST = 0x40110,CLASSFACTORY_S_LAST = 0x4011F,};
enum MACRO_CLOSECHANNEL {CLOSECHANNEL = 4112,};
enum MACRO_CMSG_TRUSTED {CMSG_TRUSTED_SIGNER_FLAG = 0x1,CMSG_SIGNER_ONLY_FLAG = 0x2,CMSG_USE_SIGNER_INDEX_FLAG = 0x4,CMSG_CMS_ENCAPSULATED_CTL_FLAG = 0x8000,CMSG_ENCODE_SORTED_CTL_FLAG = 0x1,CMSG_ENCODE_HASHED_SUBJECT_IDENTIFIER_FLAG = 0x2,};
enum MACRO_COLORONCOLOR {COLORONCOLOR = 3,HALFTONE = 4,};
enum MACRO_CP_INSTALLED {CP_INSTALLED = 0x1,CP_SUPPORTED = 0x2,};
enum MACRO_CRYPTPROTECT {CRYPTPROTECT_PROMPT_ON_UNPROTECT = 0x1,CRYPTPROTECT_PROMPT_ON_PROTECT = 0x2,CRYPTPROTECT_PROMPT_RESERVED = 0x4,CRYPTPROTECT_PROMPT_STRONG = 0x8,CRYPTPROTECT_UI_FORBIDDEN = 0x1,CRYPTPROTECT_LOCAL_MACHINE = 0x4,CRYPTPROTECT_CRED_SYNC = 0x8,CRYPTPROTECT_FIRST_RESERVED_FLAGVAL = 0xFFFFFFF,CRYPTPROTECT_LAST_RESERVED_FLAGVAL = 0xFFFFFFFF,};
enum MACRO_CRYPT_FAILED {CRYPT_FAILED = 0,CRYPT_SUCCEED = 1,};
enum MACRO_CRYPT_FORMAT {CRYPT_FORMAT_STR_MULTI_LINE = 0x1,CRYPT_FORMAT_STR_NO_HEX = 0x10,CRYPT_FORMAT_SIMPLE = 0x1,CRYPT_FORMAT_X509 = 0x2,CRYPT_FORMAT_OID = 0x4,CRYPT_FORMAT_RDN_SEMICOLON = 0x100,CRYPT_FORMAT_RDN_CRLF = 0x200,CRYPT_FORMAT_RDN_UNQUOTE = 0x400,CRYPT_FORMAT_RDN_REVERSE = 0x800,CRYPT_FORMAT_COMMA = 0x1000,CRYPT_FORMAT_SEMICOLON = 0x100,CRYPT_FORMAT_CRLF = 0x200,CRYPT_ENCODE_NO_SIGNATURE_BYTE_REVERSAL_FLAG = 0x8,CRYPT_ENCODE_ALLOC_FLAG = 0x8000,CRYPT_UNICODE_NAME_ENCODE_ENABLE_T61_UNICODE_FLAG = 0x80000000,CRYPT_UNICODE_NAME_ENCODE_ENABLE_UTF8_UNICODE_FLAG = 0x20000000,CRYPT_UNICODE_NAME_ENCODE_DISABLE_CHECK_TYPE_FLAG = 0x40000000,CRYPT_SORTED_CTL_ENCODE_HASHED_SUBJECT_IDENTIFIER_FLAG = 0x10000,CRYPT_DECODE_NOCOPY_FLAG = 0x1,CRYPT_DECODE_TO_BE_SIGNED_FLAG = 0x2,CRYPT_DECODE_SHARE_OID_STRING_FLAG = 0x4,CRYPT_DECODE_NO_SIGNATURE_BYTE_REVERSAL_FLAG = 0x8,CRYPT_DECODE_ALLOC_FLAG = 0x8000,CRYPT_UNICODE_NAME_DECODE_DISABLE_IE4_UTF8_FLAG = 0x1000000,CRYPT_ENCODE_DECODE_NONE = 0x0,};
enum MACRO_CRYPT_SERVER {CRYPT_SERVER = 0x400,};
enum MACRO_CRYPT_VERIFY {CRYPT_VERIFY_CERT_SIGN_SUBJECT_BLOB = 1,CRYPT_VERIFY_CERT_SIGN_SUBJECT_CERT = 2,CRYPT_VERIFY_CERT_SIGN_SUBJECT_CRL = 3,CRYPT_VERIFY_CERT_SIGN_ISSUER_PUBKEY = 1,CRYPT_VERIFY_CERT_SIGN_ISSUER_CERT = 2,CRYPT_VERIFY_CERT_SIGN_ISSUER_CHAIN = 3,CRYPT_DEFAULT_CONTEXT_AUTO_RELEASE_FLAG = 1,CRYPT_DEFAULT_CONTEXT_PROCESS_FLAG = 2,CRYPT_DEFAULT_CONTEXT_CERT_SIGN_OID = 1,CRYPT_DEFAULT_CONTEXT_MULTI_CERT_SIGN_OID = 2,CRYPT_ACQUIRE_CACHE_FLAG = 1,CRYPT_ACQUIRE_USE_PROV_INFO_FLAG = 2,CRYPT_ACQUIRE_COMPARE_KEY_FLAG = 4,CRYPT_FIND_USER_KEYSET_FLAG = 1,CRYPT_FIND_MACHINE_KEYSET_FLAG = 2,CRYPT_DELETE_KEYSET = 1,};
enum MACRO_DC_BINADJUST {DC_BINADJUST = 19,DC_EMF_COMPLIANT = 20,DC_DATATYPE_PRODUCED = 21,DC_COLLATE = 22,DC_MANUFACTURER = 23,DC_MODEL = 24,DC_PERSONALITY = 25,DC_PRINTRATE = 26,DC_PRINTRATEUNIT = 27,};
enum MACRO_DEREGISTERED {DEREGISTERED = 0x5,};
enum MACRO_DOWNLOADFACE {DOWNLOADFACE = 514,};
enum MACRO_EC_ENABLEALL {EC_ENABLEALL = 0,EC_ENABLEONE = 128,EC_DISABLE = 8,EC_QUERYWAITING = 2,};
enum MACRO_ENABLEDUPLEX {ENABLEDUPLEX = 28,};
enum MACRO_ENABLE_SMART {ENABLE_SMART = 0xD8,DISABLE_SMART = 0xD9,};
enum MACRO_ENCAPSULATED {ENCAPSULATED_POSTSCRIPT = 4116,};
enum MACRO_ENUM_CURRENT {ENUM_CURRENT_SETTINGS = 4294967295,ENUM_REGISTRY_SETTINGS = 4294967294,};
enum MACRO_GETTECHNOLGY {GETTECHNOLGY = 20,};
enum MACRO_HWND_DESKTOP {HWND_DESKTOP = 0,};
enum MACRO_IMAGE_BITMAP {IMAGE_BITMAP = 0,IMAGE_ICON = 1,IMAGE_CURSOR = 2,IMAGE_ENHMETAFILE = 3,};
enum MACRO_IMAGE_SIZEOF {IMAGE_SIZEOF_AUX_SYMBOL = 18,IMAGE_COMDAT_SELECT_NODUPLICATES = 1,IMAGE_COMDAT_SELECT_ANY = 2,IMAGE_COMDAT_SELECT_SAME_SIZE = 3,IMAGE_COMDAT_SELECT_EXACT_MATCH = 4,IMAGE_COMDAT_SELECT_ASSOCIATIVE = 5,IMAGE_COMDAT_SELECT_LARGEST = 6,IMAGE_COMDAT_SELECT_NEWEST = 7,IMAGE_WEAK_EXTERN_SEARCH_NOLIBRARY = 1,IMAGE_WEAK_EXTERN_SEARCH_LIBRARY = 2,IMAGE_WEAK_EXTERN_SEARCH_ALIAS = 3,IMAGE_SIZEOF_RELOCATION = 10,IMAGE_REL_I386_ABSOLUTE = 0,IMAGE_REL_I386_DIR16 = 1,IMAGE_REL_I386_REL16 = 2,IMAGE_REL_I386_DIR32 = 6,IMAGE_REL_I386_DIR32NB = 7,IMAGE_REL_I386_SEG12 = 9,IMAGE_REL_I386_SECTION = 10,IMAGE_REL_I386_SECREL = 11,IMAGE_REL_I386_REL32 = 20,IMAGE_REL_MIPS_ABSOLUTE = 0,IMAGE_REL_MIPS_REFHALF = 1,IMAGE_REL_MIPS_REFWORD = 2,IMAGE_REL_MIPS_JMPADDR = 3,IMAGE_REL_MIPS_REFHI = 4,IMAGE_REL_MIPS_REFLO = 5,IMAGE_REL_MIPS_GPREL = 6,IMAGE_REL_MIPS_LITERAL = 7,IMAGE_REL_MIPS_SECTION = 10,IMAGE_REL_MIPS_SECREL = 11,IMAGE_REL_MIPS_SECRELLO = 12,IMAGE_REL_MIPS_SECRELHI = 13,IMAGE_REL_MIPS_JMPADDR16 = 16,IMAGE_REL_MIPS_REFWORDNB = 34,IMAGE_REL_MIPS_PAIR = 37,IMAGE_REL_ALPHA_ABSOLUTE = 0,IMAGE_REL_ALPHA_REFLONG = 1,IMAGE_REL_ALPHA_REFQUAD = 2,IMAGE_REL_ALPHA_GPREL32 = 3,IMAGE_REL_ALPHA_LITERAL = 4,IMAGE_REL_ALPHA_LITUSE = 5,IMAGE_REL_ALPHA_GPDISP = 6,IMAGE_REL_ALPHA_BRADDR = 7,IMAGE_REL_ALPHA_HINT = 8,IMAGE_REL_ALPHA_INLINE_REFLONG = 9,IMAGE_REL_ALPHA_REFHI = 10,IMAGE_REL_ALPHA_REFLO = 11,IMAGE_REL_ALPHA_PAIR = 12,IMAGE_REL_ALPHA_MATCH = 13,IMAGE_REL_ALPHA_SECTION = 14,IMAGE_REL_ALPHA_SECREL = 15,IMAGE_REL_ALPHA_REFLONGNB = 16,IMAGE_REL_ALPHA_SECRELLO = 17,IMAGE_REL_ALPHA_SECRELHI = 18,IMAGE_REL_ALPHA_REFQ3 = 19,IMAGE_REL_ALPHA_REFQ2 = 20,IMAGE_REL_ALPHA_REFQ1 = 21,IMAGE_REL_ALPHA_GPRELLO = 22,IMAGE_REL_ALPHA_GPRELHI = 23,IMAGE_REL_PPC_ABSOLUTE = 0,IMAGE_REL_PPC_ADDR64 = 1,IMAGE_REL_PPC_ADDR32 = 2,IMAGE_REL_PPC_ADDR24 = 3,IMAGE_REL_PPC_ADDR16 = 4,IMAGE_REL_PPC_ADDR14 = 5,IMAGE_REL_PPC_REL24 = 6,IMAGE_REL_PPC_REL14 = 7,IMAGE_REL_PPC_TOCREL16 = 8,IMAGE_REL_PPC_TOCREL14 = 9,IMAGE_REL_PPC_ADDR32NB = 10,IMAGE_REL_PPC_SECREL = 11,IMAGE_REL_PPC_SECTION = 12,IMAGE_REL_PPC_IFGLUE = 13,IMAGE_REL_PPC_IMGLUE = 14,IMAGE_REL_PPC_SECREL16 = 15,IMAGE_REL_PPC_REFHI = 16,IMAGE_REL_PPC_REFLO = 17,IMAGE_REL_PPC_PAIR = 18,IMAGE_REL_PPC_SECRELLO = 19,IMAGE_REL_PPC_SECRELHI = 20,IMAGE_REL_PPC_GPREL = 21,IMAGE_REL_PPC_TYPEMASK = 255,IMAGE_REL_PPC_NEG = 256,IMAGE_REL_PPC_BRTAKEN = 512,IMAGE_REL_PPC_BRNTAKEN = 1024,IMAGE_REL_PPC_TOCDEFN = 2048,IMAGE_REL_SH3_ABSOLUTE = 0,IMAGE_REL_SH3_DIRECT16 = 1,IMAGE_REL_SH3_DIRECT32 = 2,IMAGE_REL_SH3_DIRECT8 = 3,IMAGE_REL_SH3_DIRECT8_WORD = 4,IMAGE_REL_SH3_DIRECT8_LONG = 5,IMAGE_REL_SH3_DIRECT4 = 6,IMAGE_REL_SH3_DIRECT4_WORD = 7,IMAGE_REL_SH3_DIRECT4_LONG = 8,IMAGE_REL_SH3_PCREL8_WORD = 9,IMAGE_REL_SH3_PCREL8_LONG = 10,IMAGE_REL_SH3_PCREL12_WORD = 11,IMAGE_REL_SH3_STARTOF_SECTION = 12,IMAGE_REL_SH3_SIZEOF_SECTION = 13,IMAGE_REL_SH3_SECTION = 14,IMAGE_REL_SH3_SECREL = 15,IMAGE_REL_SH3_DIRECT32_NB = 16,IMAGE_REL_ARM_ABSOLUTE = 0,IMAGE_REL_ARM_ADDR32 = 1,IMAGE_REL_ARM_ADDR32NB = 2,IMAGE_REL_ARM_BRANCH24 = 3,IMAGE_REL_ARM_BRANCH11 = 4,IMAGE_REL_ARM_GPREL12 = 6,IMAGE_REL_ARM_GPREL7 = 7,IMAGE_REL_ARM_SECTION = 14,IMAGE_REL_ARM_SECREL = 15,IMAGE_REL_IA64_ABSOLUTE = 0,IMAGE_REL_IA64_IMM14 = 1,IMAGE_REL_IA64_IMM22 = 2,IMAGE_REL_IA64_IMM64 = 3,IMAGE_REL_IA64_DIR32 = 4,IMAGE_REL_IA64_DIR64 = 5,IMAGE_REL_IA64_PCREL21B = 6,IMAGE_REL_IA64_PCREL21M = 7,IMAGE_REL_IA64_PCREL21F = 8,IMAGE_REL_IA64_GPREL22 = 9,IMAGE_REL_IA64_LTOFF22 = 10,IMAGE_REL_IA64_SECTION = 11,IMAGE_REL_IA64_SECREL22 = 12,IMAGE_REL_IA64_SECREL64I = 13,IMAGE_REL_IA64_SECREL32 = 14,IMAGE_REL_IA64_LTOFF64 = 15,IMAGE_REL_IA64_DIR32NB = 16,IMAGE_REL_IA64_ADDEND = 31,IMAGE_SIZEOF_LINENUMBER = 6,IMAGE_SIZEOF_BASE_RELOCATION = 8,IMAGE_REL_BASED_ABSOLUTE = 0,IMAGE_REL_BASED_HIGH = 1,IMAGE_REL_BASED_LOW = 2,IMAGE_REL_BASED_HIGHLOW = 3,IMAGE_REL_BASED_HIGHADJ = 4,IMAGE_REL_BASED_MIPS_JMPADDR = 5,IMAGE_REL_BASED_SECTION = 6,IMAGE_REL_BASED_REL32 = 7,IMAGE_REL_BASED_MIPS_JMPADDR16 = 9,IMAGE_REL_BASED_IA64_IMM64 = 9,IMAGE_REL_BASED_DIR64 = 10,IMAGE_REL_BASED_HIGH3ADJ = 11,IMAGE_ARCHIVE_START_SIZE = 8,IMAGE_SIZEOF_ARCHIVE_MEMBER_HDR = 60,IMAGE_ORDINAL_FLAG64 = -9223372036854775808,IMAGE_ORDINAL_FLAG32 = -2147483648,IMAGE_ORDINAL_FLAG = -2147483648,IMAGE_RESOURCE_NAME_IS_STRING = -2147483648,IMAGE_RESOURCE_DATA_IS_DIRECTORY = -2147483648,IMAGE_DEBUG_TYPE_UNKNOWN = 0,IMAGE_DEBUG_TYPE_COFF = 1,IMAGE_DEBUG_TYPE_CODEVIEW = 2,IMAGE_DEBUG_TYPE_FPO = 3,IMAGE_DEBUG_TYPE_MISC = 4,IMAGE_DEBUG_TYPE_EXCEPTION = 5,IMAGE_DEBUG_TYPE_FIXUP = 6,IMAGE_DEBUG_TYPE_OMAP_TO_SRC = 7,IMAGE_DEBUG_TYPE_OMAP_FROM_SRC = 8,IMAGE_DEBUG_TYPE_BORLAND = 9,IMAGE_DEBUG_TYPE_RESERVED10 = 10,};
enum MACRO_IMPLTYPEFLAG {IMPLTYPEFLAG_FDEFAULT = 0x1,IMPLTYPEFLAG_FSOURCE = 0x2,IMPLTYPEFLAG_FRESTRICTED = 0x4,IMPLTYPEFLAG_FDEFAULTVTABLE = 0x8,};
enum MACRO_INVALID_ATOM {INVALID_ATOM = 0,};
enum MACRO_IOCTL_SERIAL {IOCTL_SERIAL_LSRMST_INSERT = 1769596,IOCTL_SERENUM_EXPOSE_HARDWARE = 3604992,IOCTL_SERENUM_REMOVE_HARDWARE = 3604996,IOCTL_SERENUM_PORT_DESC = 3605000,IOCTL_SERENUM_GET_PORT_NAME = 3605004,};
enum MACRO_IOCTL_VOLUME {IOCTL_VOLUME_BASE = 86,IOCTL_VOLUME_GET_VOLUME_DISK_EXTENTS = 5636096,};
enum MACRO_MAXIMUM_ATTR {MAXIMUM_ATTR_STRING_LENGTH = 32,MAXIMUM_SMARTCARD_READERS = 10,};
enum MACRO_MAXPROPPAGES {MAXPROPPAGES = 100,};
enum MACRO_MAX_MONITORS {MAX_MONITORS = 4,};
enum MACRO_MAX_PROTOCOL {MAX_PROTOCOL_CHAIN = 7,};
enum MACRO_MIM_MOREDATA {MIM_MOREDATA = 972,};
enum MACRO_MIXERCONTROL {MIXERCONTROL_CONTROLF_UNIFORM = 0x1,MIXERCONTROL_CONTROLF_MULTIPLE = 0x2,MIXERCONTROL_CONTROLF_DISABLED = 0x80000000,MIXERCONTROL_CT_CLASS_MASK = 0xF0000000,MIXERCONTROL_CT_CLASS_CUSTOM = 0x0,MIXERCONTROL_CT_CLASS_METER = 0x10000000,MIXERCONTROL_CT_CLASS_SWITCH = 0x20000000,MIXERCONTROL_CT_CLASS_NUMBER = 0x30000000,MIXERCONTROL_CT_CLASS_SLIDER = 0x40000000,MIXERCONTROL_CT_CLASS_FADER = 0x50000000,MIXERCONTROL_CT_CLASS_TIME = 0x60000000,MIXERCONTROL_CT_CLASS_LIST = 0x70000000,MIXERCONTROL_CT_SUBCLASS_MASK = 0xF000000,MIXERCONTROL_CT_SC_SWITCH_BOOLEAN = 0x0,MIXERCONTROL_CT_SC_SWITCH_BUTTON = 0x1000000,MIXERCONTROL_CT_SC_METER_POLLED = 0x0,MIXERCONTROL_CT_SC_TIME_MICROSECS = 0x0,MIXERCONTROL_CT_SC_TIME_MILLISECS = 0x1000000,MIXERCONTROL_CT_SC_LIST_SINGLE = 0x0,MIXERCONTROL_CT_SC_LIST_MULTIPLE = 0x1000000,MIXERCONTROL_CT_UNITS_MASK = 0xFF0000,MIXERCONTROL_CT_UNITS_CUSTOM = 0x0,MIXERCONTROL_CT_UNITS_BOOLEAN = 0x10000,MIXERCONTROL_CT_UNITS_SIGNED = 0x20000,MIXERCONTROL_CT_UNITS_UNSIGNED = 0x30000,MIXERCONTROL_CT_UNITS_DECIBELS = 0x40000,MIXERCONTROL_CT_UNITS_PERCENT = 0x50000,MIXERCONTROL_CONTROLTYPE_CUSTOM = 0x0,MIXERCONTROL_CONTROLTYPE_BOOLEANMETER = 0x10010000,MIXERCONTROL_CONTROLTYPE_SIGNEDMETER = 0x10020000,MIXERCONTROL_CONTROLTYPE_PEAKMETER = 0x10020001,MIXERCONTROL_CONTROLTYPE_UNSIGNEDMETER = 0x10030000,MIXERCONTROL_CONTROLTYPE_BOOLEAN = 0x20010000,MIXERCONTROL_CONTROLTYPE_ONOFF = 0x20010001,MIXERCONTROL_CONTROLTYPE_MUTE = 0x20010002,MIXERCONTROL_CONTROLTYPE_MONO = 0x20010003,MIXERCONTROL_CONTROLTYPE_LOUDNESS = 0x20010004,MIXERCONTROL_CONTROLTYPE_STEREOENH = 0x20010005,MIXERCONTROL_CONTROLTYPE_BUTTON = 0x21010000,MIXERCONTROL_CONTROLTYPE_DECIBELS = 0x30040000,MIXERCONTROL_CONTROLTYPE_SIGNED = 0x30020000,MIXERCONTROL_CONTROLTYPE_UNSIGNED = 0x30030000,MIXERCONTROL_CONTROLTYPE_PERCENT = 0x30050000,MIXERCONTROL_CONTROLTYPE_SLIDER = 0x40020000,MIXERCONTROL_CONTROLTYPE_PAN = 0x40020001,MIXERCONTROL_CONTROLTYPE_QSOUNDPAN = 0x40020002,MIXERCONTROL_CONTROLTYPE_FADER = 0x50030000,MIXERCONTROL_CONTROLTYPE_VOLUME = 0x50030001,MIXERCONTROL_CONTROLTYPE_BASS = 0x50030002,MIXERCONTROL_CONTROLTYPE_TREBLE = 0x50030003,MIXERCONTROL_CONTROLTYPE_EQUALIZER = 0x50030004,MIXERCONTROL_CONTROLTYPE_SINGLESELECT = 0x70010000,MIXERCONTROL_CONTROLTYPE_MUX = 0x70010001,MIXERCONTROL_CONTROLTYPE_MULTIPLESELECT = 0x71010000,MIXERCONTROL_CONTROLTYPE_MIXER = 0x71010001,MIXERCONTROL_CONTROLTYPE_MICROTIME = 0x60030000,MIXERCONTROL_CONTROLTYPE_MILLITIME = 0x61030000,};
enum MACRO_MOD_MIDIPORT {MOD_MIDIPORT = 1,MOD_SYNTH = 2,MOD_SQSYNTH = 3,MOD_FMSYNTH = 4,MOD_MAPPER = 5,};
enum MACRO_MONITORINFOF {MONITORINFOF_PRIMARY = 0x1,};
enum MACRO_NCBADDGRNAME {NCBADDGRNAME = 0x36,};
enum MACRO_NCBCHAINSEND {NCBCHAINSEND = 0x17,NCBDGSEND = 0x20,};
enum MACRO_NLS_DBCSCHAR {NLS_DBCSCHAR = 0x10000,NLS_ALPHANUMERIC = 0x0,NLS_KATAKANA = 0x20000,NLS_HIRAGANA = 0x40000,NLS_ROMAN = 0x400000,NLS_IME_CONVERSION = 0x800000,NLS_IME_DISABLE = 0x20000000,};
enum MACRO_PKCS_CONTENT {PKCS_CONTENT_INFO = 33,};
enum MACRO_PRINTER_ENUM {PRINTER_ENUM_DEFAULT = 0x1,PRINTER_ENUM_LOCAL = 0x2,PRINTER_ENUM_CONNECTIONS = 0x4,PRINTER_ENUM_FAVORITE = 0x4,PRINTER_ENUM_NAME = 0x8,PRINTER_ENUM_REMOTE = 0x10,PRINTER_ENUM_SHARED = 0x20,PRINTER_ENUM_NETWORK = 0x40,PRINTER_ENUM_EXPAND = 0x4000,PRINTER_ENUM_CONTAINER = 0x8000,PRINTER_ENUM_ICONMASK = 0xFF0000,PRINTER_ENUM_ICON1 = 0x10000,PRINTER_ENUM_ICON2 = 0x20000,PRINTER_ENUM_ICON3 = 0x40000,PRINTER_ENUM_ICON4 = 0x80000,PRINTER_ENUM_ICON5 = 0x100000,PRINTER_ENUM_ICON6 = 0x200000,PRINTER_ENUM_ICON7 = 0x400000,PRINTER_ENUM_ICON8 = 0x800000,PRINTER_ENUM_HIDE = 0x1000000,};
enum MACRO_PROCESS_HEAP {PROCESS_HEAP_REGION = 0x1,PROCESS_HEAP_UNCOMMITTED_RANGE = 0x2,PROCESS_HEAP_ENTRY_BUSY = 0x4,PROCESS_HEAP_ENTRY_MOVEABLE = 0x10,PROCESS_HEAP_ENTRY_DDESHARE = 0x20,};
enum MACRO_PROTOCOLFLAG {PROTOCOLFLAG_NO_PICS_CHECK = 0x1,};
enum MACRO_RESOURCETYPE {RESOURCETYPE_ANY = 0x0,RESOURCETYPE_DISK = 0x1,RESOURCETYPE_PRINT = 0x2,RESOURCETYPE_RESERVED = 0x8,RESOURCETYPE_UNKNOWN = 0xFFFFFFFF,};
enum MACRO_SETABORTPROC {SETABORTPROC = 9,};
enum MACRO_SETCOPYCOUNT {SETCOPYCOUNT = 17,};
enum MACRO_SETKERNTRACK {SETKERNTRACK = 770,};
enum MACRO_SETWALLPAPER {SETWALLPAPER_DEFAULT = -1,};
enum MACRO_SE_PRIVILEGE {SE_PRIVILEGE_ENABLED_BY_DEFAULT = 0x1,SE_PRIVILEGE_ENABLED = 0x2,SE_PRIVILEGE_USED_FOR_ACCESS = 0x80000000,};
enum MACRO_SIZEZOOMSHOW {SIZEZOOMSHOW = 3,SIZEZOOMHIDE = 4,};
enum MACRO_SOFTKEYBOARD {SOFTKEYBOARD_TYPE_T1 = 0x1,SOFTKEYBOARD_TYPE_C1 = 0x2,};
enum MACRO_STATUS_GUARD {STATUS_GUARD_PAGE_VIOLATION = 0x80000001,STATUS_DATATYPE_MISALIGNMENT = 0x80000002,STATUS_BREAKPOINT = 0x80000003,STATUS_SINGLE_STEP = 0x80000004,};
enum MACRO_SYSTEM_AUDIT {SYSTEM_AUDIT_OBJECT_ACE_TYPE = 0x7,SYSTEM_ALARM_OBJECT_ACE_TYPE = 0x8,};
enum MACRO_SYSTEM_FIXED {SYSTEM_FIXED_FONT = 16,DEFAULT_GUI_FONT = 17,};
enum MACRO_S_QUEUEEMPTY {S_QUEUEEMPTY = 0,S_THRESHOLD = 1,S_ALLTHRESHOLD = 2,S_NORMAL = 0,S_LEGATO = 1,S_STACCATO = 2,S_PERIOD512 = 0,S_PERIOD1024 = 1,S_PERIOD2048 = 2,S_PERIODVOICE = 3,S_WHITE512 = 4,S_WHITE1024 = 5,S_WHITE2048 = 6,S_WHITEVOICE = 7,S_SERDVNA = -1,S_SEROFM = -2,S_SERMACT = -3,S_SERQFUL = -4,S_SERBDNT = -5,S_SERDLN = -6,S_SERDCC = -7,S_SERDTP = -8,S_SERDVL = -9,S_SERDMD = -10,S_SERDSH = -11,S_SERDPT = -12,S_SERDFQ = -13,S_SERDDR = -14,S_SERDSR = -15,S_SERDST = -16,};
enum MACRO_TIME_ONESHOT {TIME_ONESHOT = 0x0,TIME_PERIODIC = 0x1,TIME_CALLBACK_FUNCTION = 0x0,TIME_CALLBACK_EVENT_SET = 0x10,TIME_CALLBACK_EVENT_PULSE = 0x20,};
enum MACRO_TT_AVAILABLE {TT_AVAILABLE = 0x1,TT_ENABLED = 0x2,};
enum MACRO_WRITES_VALID {RECOVERED_WRITES_VALID = 0x1,UNRECOVERED_WRITES_VALID = 0x2,RECOVERED_READS_VALID = 0x4,UNRECOVERED_READS_VALID = 0x8,WRITE_COMPRESSION_INFO_VALID = 0x10,READ_COMPRESSION_INFO_VALID = 0x20,};
enum MACRO_X509_UNICODE {X509_UNICODE_NAME = 20,X509_KEYGEN_REQUEST_TO_BE_SIGNED = 21,};
enum MACRO__HEAPBADNODE {_HEAPBADNODE = -5,};
enum MACRO__HEAPCORRUPT {_HEAPCORRUPT = -1,};
enum MACRO_cbNDRContext {cbNDRContext = 20,};
typedef struct _MALLOC_FREE_STRUCT MALLOC_FREE_STRUCT;
typedef struct tagMCI_SYSINFO_PARMSA MCI_SYSINFO_PARMSA;
typedef struct tagMCI_SYSINFO_PARMSW MCI_SYSINFO_PARMSW;
typedef struct tagMCI_WAVE_SET_PARMS MCI_WAVE_SET_PARMS;
typedef struct _MIDL_FORMAT_STRING MIDL_FORMAT_STRING;
typedef struct tagMIXERLINECONTROLSA MIXERLINECONTROLSA;
typedef struct tagMIXERLINECONTROLSW MIXERLINECONTROLSW;
typedef struct _MOUSE_EVENT_RECORD MOUSE_EVENT_RECORD;
typedef void (__stdcall *NDR_NOTIFY_ROUTINE)();
typedef struct tagIMEMENUITEMINFOA *NPIMEMENUITEMINFOA;
typedef struct tagIMEMENUITEMINFOW *NPIMEMENUITEMINFOW;
typedef struct tagOleMenuGroupWidths OLEMENUGROUPWIDTHS;
typedef struct _OUTLINETEXTMETRICA OUTLINETEXTMETRICA;
typedef struct _OUTLINETEXTMETRICW OUTLINETEXTMETRICW;
typedef struct _CTL_USAGE *PCERT_ENHKEY_USAGE;
typedef struct _CERT_REQUEST_INFO *PCERT_REQUEST_INFO;
typedef struct _CERT_SIMPLE_CHAIN *PCERT_SIMPLE_CHAIN;
typedef struct _CERT_TRUST_STATUS *PCERT_TRUST_STATUS;
typedef struct _CMSG_RC2_AUX_INFO *PCMSG_RC2_AUX_INFO;
typedef struct _CMSG_RC4_AUX_INFO *PCMSG_RC4_AUX_INFO;
typedef struct tagCOMPAREITEMSTRUCT *PCOMPAREITEMSTRUCT;
typedef struct _CRYPT_CREDENTIALS *PCRYPT_CREDENTIALS;
typedef struct _CRYPT_DECODE_PARA *PCRYPT_DECODE_PARA;
typedef struct _CRYPTOAPI_BLOB *PCRYPT_DIGEST_BLOB;
typedef struct _CRYPT_ENCODE_PARA *PCRYPT_ENCODE_PARA;
typedef struct _CRYPT_OBJID_TABLE *PCRYPT_OBJID_TABLE;
typedef struct _DATATYPES_INFO_1A *PDATATYPES_INFO_1A;
typedef struct _DATATYPES_INFO_1W *PDATATYPES_INFO_1W;
typedef struct _DEVICE_MEDIA_INFO *PDEVICE_MEDIA_INFO;
typedef struct tagEMRPOLYLINE16 *PEMRPOLYBEZIERTO16;
typedef struct tagEMRPOLYPOLYLINE16 *PEMRPOLYPOLYLINE16;
typedef struct tagABORTPATH *PEMRREALIZEPALETTE;
typedef struct tagEMRSELECTCLIPPATH *PEMRSELECTCLIPPATH;
typedef struct tagEMRSETICMPROFILE *PEMRSETICMPROFILEA;
typedef struct tagEMRSETICMPROFILE *PEMRSETICMPROFILEW;
typedef struct tagEMRSETMAPPERFLAGS *PEMRSETMAPPERFLAGS;
typedef struct tagEMRSETVIEWPORTEXTEX *PEMRSETWINDOWEXTEX;
typedef struct tagEMRSETVIEWPORTORGEX *PEMRSETWINDOWORGEX;
typedef struct tagEMRTRANSPARENTBLT *PEMRTRANSPARENTBLT;
typedef struct _ENCRYPTION_BUFFER *PENCRYPTION_BUFFER;
typedef struct _PERF_COUNTER_BLOCK PERF_COUNTER_BLOCK;
typedef struct _FORMAT_PARAMETERS *PFORMAT_PARAMETERS;
typedef struct _GLYPHMETRICSFLOAT *PGLYPHMETRICSFLOAT;
typedef struct _GRADIENT_TRIANGLE *PGRADIENT_TRIANGLE;
typedef struct _IMAGE_FILE_HEADER *PIMAGE_FILE_HEADER;
typedef struct _IMAGE_ROM_HEADERS *PIMAGE_ROM_HEADERS;
typedef struct tagOBJECTDESCRIPTOR *PLINKSRCDESCRIPTOR;
typedef struct tagMCI_GENERIC_PARMS *PMCI_GENERIC_PARMS;
typedef struct tagMCI_SEQ_SET_PARMS *PMCI_SEQ_SET_PARMS;
typedef struct tagMCI_VD_PLAY_PARMS *PMCI_VD_PLAY_PARMS;
typedef struct tagMCI_VD_STEP_PARMS *PMCI_VD_STEP_PARMS;
typedef struct tagMEASUREITEMSTRUCT *PMEASUREITEMSTRUCT;
typedef struct tagMENUGETOBJECTINFO *PMENUGETOBJECTINFO;
typedef struct _MENU_EVENT_RECORD *PMENU_EVENT_RECORD;
typedef struct _MIDL_STUB_MESSAGE *PMIDL_STUB_MESSAGE;
typedef struct tagMOUSEHOOKSTRUCTEX *PMOUSEHOOKSTRUCTEX;
typedef struct _NDR_ASYNC_MESSAGE *PNDR_ASYNC_MESSAGE;
typedef struct tagNONCLIENTMETRICSA *PNONCLIENTMETRICSA;
typedef struct tagNONCLIENTMETRICSW *PNONCLIENTMETRICSW;
typedef struct _PRINTER_DEFAULTSA *PPRINTER_DEFAULTSA;
typedef struct _PRINTER_DEFAULTSW *PPRINTER_DEFAULTSW;
typedef struct _PROCESS_HEAP_ENTRY PROCESS_HEAP_ENTRY;
typedef struct _tagPROTOCOLFILTERDATA PROTOCOLFILTERDATA;
typedef struct _SINGLE_LIST_ENTRY *PSINGLE_LIST_ENTRY;
typedef struct _TAPE_GET_POSITION *PTAPE_GET_POSITION;
typedef struct _TAPE_SET_POSITION *PTAPE_SET_POSITION;
typedef struct _RPC_BINDING_VECTOR RPC_BINDING_VECTOR;
typedef struct _A0026B003AB75CC8BFC049DB25C2779D RPC_DISPATCH_TABLE;
typedef struct _OSVERSIONINFOW RTL_OSVERSIONINFOW;
typedef struct _RTL_CRITICAL_SECTION_DEBUG RTL_RESOURCE_DEBUG;
typedef struct _DC79A6464562D2DC48FEEE8D5793116D SCARD_READERSTATEA;
typedef struct _B80B7D01E79FADDB4AAC58DE22BC823F SCARD_READERSTATEW;
typedef struct _SID_AND_ATTRIBUTES SID_AND_ATTRIBUTES;
typedef struct _TOKEN_DEFAULT_DACL TOKEN_DEFAULT_DACL;
typedef struct _VERIFY_INFORMATION VERIFY_INFORMATION;
typedef struct _WSANAMESPACE_INFOA WSANAMESPACE_INFOA;
typedef struct _WSANAMESPACE_INFOW WSANAMESPACE_INFOW;
enum _FINDEX_SEARCH_OPS {FindExSearchNameMatch = 0x0,FindExSearchLimitToDirectories = 0x1,FindExSearchLimitToDevices = 0x2,FindExSearchMaxSearchOp = 0x3,};
struct _FLAGGED_WORD_BLOB {unsigned int fFlags;unsigned int clSize;unsigned __int16 asData[1];};
struct _RASTERIZER_STATUS {__int16 nSize;__int16 wFlags;__int16 nLanguageID;};
struct _SINGLE_LIST_ENTRY {struct _SINGLE_LIST_ENTRY *Next;};
typedef struct _remoteMETAFILEPICT remoteMETAFILEPICT;
enum tagDCOM_CALL_STATE {DCOM_NONE = 0x0,DCOM_CALL_COMPLETE = 0x1,DCOM_CALL_CANCELED = 0x2,};
typedef struct _userFLAG_STGMEDIUM userFLAG_STGMEDIUM;
typedef struct _ACCESS_DENIED_ACE ACCESS_DENIED_ACE;
struct AsyncIAdviseSink2 {struct AsyncIAdviseSink2Vtbl *lpVtbl;};
typedef struct tagCBTACTIVATESTRUCT CBTACTIVATESTRUCT;
typedef struct _CTL_USAGE CERT_ENHKEY_USAGE;
typedef struct _CERT_REQUEST_INFO CERT_REQUEST_INFO;
typedef struct _CERT_SIMPLE_CHAIN CERT_SIMPLE_CHAIN;
typedef struct _CERT_TRUST_STATUS CERT_TRUST_STATUS;
typedef struct tagCLEANLOCALSTORAGE CLEANLOCALSTORAGE;
typedef struct _CMSG_RC2_AUX_INFO CMSG_RC2_AUX_INFO;
typedef struct _CMSG_RC4_AUX_INFO CMSG_RC4_AUX_INFO;
typedef struct tagCOMPAREITEMSTRUCT COMPAREITEMSTRUCT;
typedef struct _CONNECTDLGSTRUCTA CONNECTDLGSTRUCTA;
typedef struct _CONNECTDLGSTRUCTW CONNECTDLGSTRUCTW;
typedef struct _CRYPT_CREDENTIALS CRYPT_CREDENTIALS;
typedef struct _CRYPT_DECODE_PARA CRYPT_DECODE_PARA;
typedef struct _CRYPTOAPI_BLOB CRYPT_DIGEST_BLOB;
typedef struct _CRYPT_ENCODE_PARA CRYPT_ENCODE_PARA;
typedef struct _CRYPT_OBJID_TABLE CRYPT_OBJID_TABLE;
typedef struct _DATATYPES_INFO_1A DATATYPES_INFO_1A;
typedef struct _DATATYPES_INFO_1W DATATYPES_INFO_1W;
typedef struct _DEVICE_MEDIA_INFO DEVICE_MEDIA_INFO;
typedef struct tagEMRPOLYLINE16 EMRPOLYBEZIERTO16;
typedef struct tagEMRPOLYPOLYLINE16 EMRPOLYPOLYLINE16;
typedef struct tagABORTPATH EMRREALIZEPALETTE;
typedef struct tagEMRSELECTCLIPPATH EMRSELECTCLIPPATH;
typedef struct tagEMRSETICMPROFILE EMRSETICMPROFILEA;
typedef struct tagEMRSETICMPROFILE EMRSETICMPROFILEW;
typedef struct tagEMRSETMAPPERFLAGS EMRSETMAPPERFLAGS;
typedef struct tagEMRSETVIEWPORTEXTEX EMRSETWINDOWEXTEX;
typedef struct tagEMRSETVIEWPORTORGEX EMRSETWINDOWORGEX;
typedef struct tagEMRTRANSPARENTBLT EMRTRANSPARENTBLT;
typedef struct _ENCRYPTION_BUFFER ENCRYPTION_BUFFER;
typedef struct _FLAGGED_BYTE_BLOB FLAGGED_BYTE_BLOB;
typedef struct _FLAGGED_WORD_BLOB FLAGGED_WORD_BLOB;
typedef struct _FORMAT_PARAMETERS FORMAT_PARAMETERS;
typedef struct _GLYPHMETRICSFLOAT GLYPHMETRICSFLOAT;
typedef struct _GRADIENT_TRIANGLE GRADIENT_TRIANGLE;
typedef void *HCRYPTOIDFUNCADDR;
struct IDataAdviseHolder {struct IDataAdviseHolderVtbl *lpVtbl;};
struct IDirectWriterLock {struct IDirectWriterLockVtbl *lpVtbl;};
struct IInternetBindInfo {struct IInternetBindInfoVtbl *lpVtbl;};
struct IInternetPriority {struct IInternetPriorityVtbl *lpVtbl;};
struct IInternetProtocol {struct IInternetProtocolVtbl *lpVtbl;};
typedef struct _IMAGE_FILE_HEADER IMAGE_FILE_HEADER;
typedef struct _IMAGE_ROM_HEADERS IMAGE_ROM_HEADERS;
struct IOleInPlaceObject {struct IOleInPlaceObjectVtbl *lpVtbl;};
struct IOleItemContainer {struct IOleItemContainerVtbl *lpVtbl;};
struct IParseDisplayName {struct IParseDisplayNameVtbl *lpVtbl;};
struct IRpcChannelBuffer {struct IRpcChannelBufferVtbl *lpVtbl;};
struct ISequentialStream {struct ISequentialStreamVtbl *lpVtbl;};
struct ISupportErrorInfo {struct ISupportErrorInfoVtbl *lpVtbl;};
struct ISynchronizeEvent {struct ISynchronizeEventVtbl *lpVtbl;};
struct ISynchronizeMutex {struct ISynchronizeMutexVtbl *lpVtbl;};
struct ITypeChangeEvents {struct ITypeChangeEventsVtbl *lpVtbl;};
struct IXMLDOMParseError {struct IXMLDOMParseErrorVtbl *lpVtbl;};
typedef struct tagOBJECTDESCRIPTOR LINKSRCDESCRIPTOR;
typedef ICatalogFileInfo *LPCATALOGFILEINFO;
typedef struct tagCOLORADJUSTMENT *LPCOLORADJUSTMENT;
typedef struct tagCOMPOSITIONFORM *LPCOMPOSITIONFORM;
typedef ICreateErrorInfo *LPCREATEERRORINFO;
typedef ICreateTypeInfo2 *LPCREATETYPEINFO2;
typedef struct _DISPLAY_DEVICEA *LPDISPLAY_DEVICEA;
typedef struct _DISPLAY_DEVICEW *LPDISPLAY_DEVICEW;
typedef struct DRVCONFIGINFOEX *LPDRVCONFIGINFOEX;
typedef IEnumSTATPROPSTG *LPENUMSTATPROPSTG;
typedef struct tagENUMTEXTMETRICA *LPENUMTEXTMETRICA;
typedef struct tagENUMTEXTMETRICW *LPENUMTEXTMETRICW;
typedef struct tagIMECHARPOSITION *LPIMECHARPOSITION;
typedef struct tagKBDLLHOOKSTRUCT *LPKBDLLHOOKSTRUCT;
typedef struct tagLOCALESIGNATURE *LPLOCALESIGNATURE;
typedef struct tagMCI_BREAK_PARMS *LPMCI_BREAK_PARMS;
typedef struct tagMCI_INFO_PARMSA *LPMCI_INFO_PARMSA;
typedef struct tagMCI_INFO_PARMSW *LPMCI_INFO_PARMSW;
typedef struct tagMCI_LOAD_PARMSA *LPMCI_LOAD_PARMSA;
typedef struct tagMCI_LOAD_PARMSW *LPMCI_LOAD_PARMSW;
typedef struct tagMCI_OPEN_PARMSA *LPMCI_OPEN_PARMSA;
typedef struct tagMCI_OPEN_PARMSW *LPMCI_OPEN_PARMSW;
typedef struct tagMCI_SAVE_PARMSA *LPMCI_SAVE_PARMSA;
typedef struct tagMCI_SAVE_PARMSW *LPMCI_SAVE_PARMSW;
typedef struct midiproptimediv_tag *LPMIDIPROPTIMEDIV;
typedef struct _MONITOR_INFO_1A *LPMONITOR_INFO_1A;
typedef struct _MONITOR_INFO_1W *LPMONITOR_INFO_1W;
typedef struct _MONITOR_INFO_2A *LPMONITOR_INFO_2A;
typedef struct _MONITOR_INFO_2W *LPMONITOR_INFO_2W;
typedef struct tagMOUSEHOOKSTRUCT *LPMOUSEHOOKSTRUCT;
typedef IOleAdviseHolder *LPOLEADVISEHOLDER;
typedef IOleCacheControl *LPOLECACHECONTROL;
typedef IOleInPlaceFrame *LPOLEINPLACEFRAME;
typedef struct _PRINTER_INFO_1A *LPPRINTER_INFO_1A;
typedef struct _PRINTER_INFO_1W *LPPRINTER_INFO_1W;
typedef struct _PRINTER_INFO_2A *LPPRINTER_INFO_2A;
typedef struct _PRINTER_INFO_2W *LPPRINTER_INFO_2W;
typedef struct _PRINTER_INFO_4A *LPPRINTER_INFO_4A;
typedef struct _PRINTER_INFO_4W *LPPRINTER_INFO_4W;
typedef struct _PRINTER_INFO_5A *LPPRINTER_INFO_5A;
typedef struct _PRINTER_INFO_5W *LPPRINTER_INFO_5W;
typedef struct _PRINTER_INFO_7A *LPPRINTER_INFO_7A;
typedef struct _PRINTER_INFO_7W *LPPRINTER_INFO_7W;
typedef struct _PRINTER_INFO_8A *LPPRINTER_INFO_8A;
typedef struct _PRINTER_INFO_8W *LPPRINTER_INFO_8W;
typedef struct _PRINTER_INFO_9A *LPPRINTER_INFO_9A;
typedef struct _PRINTER_INFO_9W *LPPRINTER_INFO_9W;
typedef IPropertyStorage *LPPROPERTYSTORAGE;
typedef struct tagRECONVERTSTRING *LPRECONVERTSTRING;
typedef struct _SENDCMDINPARAMS *LPSENDCMDINPARAMS;
typedef IServiceProvider *LPSERVICEPROVIDER;
typedef struct _SHFILEOPSTRUCTA *LPSHFILEOPSTRUCTA;
typedef struct _SHFILEOPSTRUCTW *LPSHFILEOPSTRUCTW;
typedef struct tagTRACKMOUSEEVENT *LPTRACKMOUSEEVENT;
typedef struct tagTTPOLYGONHEADER *LPTTPOLYGONHEADER;
typedef struct tagVersionedStream *LPVERSIONEDSTREAM;
typedef struct _VIDEOPARAMETERS *LPVIDEOPARAMETERS;
typedef struct _WIN32_STREAM_ID *LPWIN32_STREAM_ID;
typedef IWinInetHttpInfo *LPWININETHTTPINFO;
typedef struct _WSANSClassInfoA *LPWSANSCLASSINFOA;
typedef struct _WSANSClassInfoW *LPWSANSCLASSINFOW;
enum MACRO_APPLICATION {APPLICATION_ERROR_MASK = 0x20000000,};
enum MACRO_BITSPERBYTE {BITSPERBYTE = 8,};
enum MACRO_BUFFER_SIZE {READ_ATTRIBUTE_BUFFER_SIZE = 512,IDENTIFY_BUFFER_SIZE = 512,READ_THRESHOLD_BUFFER_SIZE = 512,};
enum MACRO_CCHFORMNAME {CCHFORMNAME = 32,};
enum MACRO_CERT_CREATE {CERT_CREATE_SELFSIGN_NO_SIGN = 1,CERT_CREATE_SELFSIGN_NO_KEY_INFO = 2,};
enum MACRO_CERT_SIMPLE {CERT_SIMPLE_NAME_STR = 1,CERT_OID_NAME_STR = 2,CERT_X500_NAME_STR = 3,CERT_NAME_STR_SEMICOLON_FLAG = 1073741824,CERT_NAME_STR_NO_PLUS_FLAG = 536870912,CERT_NAME_STR_NO_QUOTING_FLAG = 268435456,CERT_NAME_STR_CRLF_FLAG = 134217728,CERT_NAME_STR_COMMA_FLAG = 67108864,CERT_NAME_STR_REVERSE_FLAG = 33554432,CERT_NAME_STR_DISABLE_IE4_UTF8_FLAG = 65536,CERT_NAME_STR_ENABLE_T61_UNICODE_FLAG = 131072,CERT_NAME_STR_ENABLE_UTF8_UNICODE_FLAG = 262144,CERT_NAME_EMAIL_TYPE = 1,CERT_NAME_RDN_TYPE = 2,CERT_NAME_ATTR_TYPE = 3,CERT_NAME_SIMPLE_DISPLAY_TYPE = 4,CERT_NAME_FRIENDLY_DISPLAY_TYPE = 5,CERT_NAME_ISSUER_FLAG = 1,CERT_NAME_DISABLE_IE4_UTF8_FLAG = 65536,};
enum MACRO_CERT_VERIFY {CERT_VERIFY_INHIBIT_CTL_UPDATE_FLAG = 0x1,CERT_VERIFY_TRUSTED_SIGNERS_FLAG = 0x2,CERT_VERIFY_NO_TIME_CHECK_FLAG = 0x4,CERT_VERIFY_ALLOW_MORE_USAGE_FLAG = 0x8,CERT_VERIFY_UPDATED_CTL_FLAG = 0x1,CERT_CONTEXT_REVOCATION_TYPE = 0x1,CERT_VERIFY_REV_CHAIN_FLAG = 0x1,CERT_VERIFY_CACHE_ONLY_BASED_REVOCATION = 0x2,CERT_UNICODE_IS_RDN_ATTRS_FLAG = 0x1,CERT_CASE_INSENSITIVE_IS_RDN_ATTRS_FLAG = 0x2,};
enum MACRO_COMPRESSION {COMPRESSION_FORMAT_NONE = 0x0,COMPRESSION_FORMAT_DEFAULT = 0x1,COMPRESSION_FORMAT_LZNT1 = 0x2,COMPRESSION_ENGINE_STANDARD = 0x0,COMPRESSION_ENGINE_MAXIMUM = 0x100,COMPRESSION_ENGINE_HIBER = 0x200,};
enum MACRO_CONTEXT_OID {CONTEXT_OID_CERTIFICATE = 1,CONTEXT_OID_CRL = 2,CONTEXT_OID_CTL = 3,CONTEXT_OID_PKCS7 = 4,CONTEXT_OID_CAPI2_ANY = 5,};
enum MACRO_CRYPT_FIRST {CRYPT_FIRST = 1,CRYPT_NEXT = 2,CRYPT_SGC_ENUM = 4,CRYPT_IMPL_HARDWARE = 1,CRYPT_IMPL_SOFTWARE = 2,CRYPT_IMPL_MIXED = 3,CRYPT_IMPL_UNKNOWN = 4,CRYPT_IMPL_REMOVABLE = 8,CRYPT_SEC_DESCR = 1,CRYPT_PSTORE = 2,CRYPT_UI_PROMPT = 4,CRYPT_FLAG_PCT1 = 1,CRYPT_FLAG_SSL2 = 2,CRYPT_FLAG_SSL3 = 4,CRYPT_FLAG_TLS1 = 8,CRYPT_FLAG_IPSEC = 16,CRYPT_FLAG_SIGNING = 32,CRYPT_SGC = 1,CRYPT_FASTSGC = 2,};
enum MACRO_CRYPT_KEYID {CRYPT_KEYID_MACHINE_FLAG = 0x20,CRYPT_KEYID_ALLOC_FLAG = 0x8000,CRYPT_KEYID_DELETE_FLAG = 0x10,CRYPT_KEYID_SET_NEW_FLAG = 0x2000,};
enum MACRO_DC_HASDEFID {DC_HASDEFID = 0x534B,};
enum MACRO_DEBUG_EVENT {EXCEPTION_DEBUG_EVENT = 1,CREATE_THREAD_DEBUG_EVENT = 2,CREATE_PROCESS_DEBUG_EVENT = 3,EXIT_THREAD_DEBUG_EVENT = 4,EXIT_PROCESS_DEBUG_EVENT = 5,LOAD_DLL_DEBUG_EVENT = 6,UNLOAD_DLL_DEBUG_EVENT = 7,OUTPUT_DEBUG_STRING_EVENT = 8,RIP_EVENT = 9,};
enum MACRO_DMICMMETHOD {DMICMMETHOD_NONE = 1,DMICMMETHOD_SYSTEM = 2,DMICMMETHOD_DRIVER = 3,DMICMMETHOD_DEVICE = 4,DMICMMETHOD_USER = 256,};
enum MACRO_DUPLICATE_0 {DUPLICATE = 0x6,};
enum MACRO_EPSPRINTING {EPSPRINTING = 33,};
enum MACRO_ERROR_LABEL {ERROR_LABEL_UNREADABLE = 0x1,ERROR_LABEL_QUESTIONABLE = 0x2,ERROR_SLOT_NOT_PRESENT = 0x4,ERROR_DRIVE_NOT_INSTALLED = 0x8,ERROR_TRAY_MALFUNCTION = 0x10,ERROR_INIT_STATUS_NEEDED = 0x11,ERROR_UNHANDLED_ERROR = 0xFFFFFFFF,};
enum MACRO_FACILITY_NT {FACILITY_NT_BIT = 0x10000000,};
enum MACRO_FAPPCOMMAND {FAPPCOMMAND_MOUSE = 0x8000,FAPPCOMMAND_KEY = 0x0,FAPPCOMMAND_OEM = 0x1000,FAPPCOMMAND_MASK = 0xF000,};
enum MACRO_FILEOPENORD {FILEOPENORD = 1536,};
enum MACRO_FILE_DEVICE {FILE_DEVICE_BEEP = 0x1,FILE_DEVICE_CD_ROM = 0x2,FILE_DEVICE_CD_ROM_FILE_SYSTEM = 0x3,FILE_DEVICE_CONTROLLER = 0x4,FILE_DEVICE_DATALINK = 0x5,FILE_DEVICE_DFS = 0x6,FILE_DEVICE_DISK = 0x7,FILE_DEVICE_DISK_FILE_SYSTEM = 0x8,FILE_DEVICE_FILE_SYSTEM = 0x9,FILE_DEVICE_INPORT_PORT = 0xA,FILE_DEVICE_KEYBOARD = 0xB,FILE_DEVICE_MAILSLOT = 0xC,FILE_DEVICE_MIDI_IN = 0xD,FILE_DEVICE_MIDI_OUT = 0xE,FILE_DEVICE_MOUSE = 0xF,FILE_DEVICE_MULTI_UNC_PROVIDER = 0x10,FILE_DEVICE_NAMED_PIPE = 0x11,FILE_DEVICE_NETWORK = 0x12,FILE_DEVICE_NETWORK_BROWSER = 0x13,FILE_DEVICE_NETWORK_FILE_SYSTEM = 0x14,FILE_DEVICE_NULL = 0x15,FILE_DEVICE_PARALLEL_PORT = 0x16,FILE_DEVICE_PHYSICAL_NETCARD = 0x17,FILE_DEVICE_PRINTER = 0x18,FILE_DEVICE_SCANNER = 0x19,FILE_DEVICE_SERIAL_MOUSE_PORT = 0x1A,FILE_DEVICE_SERIAL_PORT = 0x1B,FILE_DEVICE_SCREEN = 0x1C,FILE_DEVICE_SOUND = 0x1D,FILE_DEVICE_STREAMS = 0x1E,FILE_DEVICE_TAPE = 0x1F,FILE_DEVICE_TAPE_FILE_SYSTEM = 0x20,FILE_DEVICE_TRANSPORT = 0x21,FILE_DEVICE_UNKNOWN = 0x22,FILE_DEVICE_VIDEO = 0x23,FILE_DEVICE_VIRTUAL_DISK = 0x24,FILE_DEVICE_WAVE_IN = 0x25,FILE_DEVICE_WAVE_OUT = 0x26,FILE_DEVICE_8042_PORT = 0x27,FILE_DEVICE_NETWORK_REDIRECTOR = 0x28,FILE_DEVICE_BATTERY = 0x29,FILE_DEVICE_BUS_EXTENDER = 0x2A,FILE_DEVICE_MODEM = 0x2B,FILE_DEVICE_VDM = 0x2C,FILE_DEVICE_MASS_STORAGE = 0x2D,FILE_DEVICE_SMB = 0x2E,FILE_DEVICE_KS = 0x2F,FILE_DEVICE_CHANGER = 0x30,FILE_DEVICE_SMARTCARD = 0x31,FILE_DEVICE_ACPI = 0x32,FILE_DEVICE_DVD = 0x33,FILE_DEVICE_FULLSCREEN_VIDEO = 0x34,FILE_DEVICE_DFS_FILE_SYSTEM = 0x35,FILE_DEVICE_DFS_VOLUME = 0x36,FILE_DEVICE_SERENUM = 0x37,FILE_DEVICE_TERMSRV = 0x38,FILE_DEVICE_KSEC = 0x39,};
enum MACRO_FLUSHOUTPUT {FLUSHOUTPUT = 6,};
enum MACRO_GCL_HICONSM {GCL_HICONSM = -34,};
enum MACRO_GCP_CLASSIN {GCP_CLASSIN = 0x80000,GCP_MAXEXTENT = 0x100000,GCP_JUSTIFYIN = 0x200000,GCP_DISPLAYZWG = 0x400000,GCP_SYMSWAPOFF = 0x800000,GCP_NUMERICOVERRIDE = 0x1000000,GCP_NEUTRALOVERRIDE = 0x2000000,GCP_NUMERICSLATIN = 0x4000000,GCP_NUMERICSLOCAL = 0x8000000,};
enum MACRO_GCP_JUSTIFY {GCP_JUSTIFY = 0x10000,};
enum MACRO_GETFACENAME {GETFACENAME = 513,};
enum MACRO_HANDLE_FLAG {HANDLE_FLAG_INHERIT = 0x1,HANDLE_FLAG_PROTECT_FROM_CLOSE = 0x2,};
enum MACRO_HTMAXBUTTON {HTMAXBUTTON = 9,};
enum MACRO_HTSIZEFIRST {HTSIZEFIRST = 10,HTSIZELAST = 17,};
enum MACRO_IMAGE_DEBUG {IMAGE_DEBUG_MISC_EXENAME = 1,IMAGE_SEPARATE_DEBUG_SIGNATURE = 18756,IMAGE_SEPARATE_DEBUG_FLAGS_MASK = 32768,IMAGE_SEPARATE_DEBUG_MISMATCH = 32768,};
enum MACRO_JOB_CONTROL {JOB_CONTROL_PAUSE = 1,JOB_CONTROL_RESUME = 2,JOB_CONTROL_CANCEL = 3,JOB_CONTROL_RESTART = 4,JOB_CONTROL_DELETE = 5,JOB_CONTROL_SENT_TO_PRINTER = 6,JOB_CONTROL_LAST_PAGE_EJECTED = 7,JOB_STATUS_PAUSED = 1,JOB_STATUS_ERROR = 2,JOB_STATUS_DELETING = 4,JOB_STATUS_SPOOLING = 8,JOB_STATUS_PRINTING = 16,JOB_STATUS_OFFLINE = 32,JOB_STATUS_PAPEROUT = 64,JOB_STATUS_PRINTED = 128,JOB_STATUS_DELETED = 256,JOB_STATUS_BLOCKED_DEVQ = 512,JOB_STATUS_USER_INTERVENTION = 1024,JOB_STATUS_RESTART = 2048,JOB_POSITION_UNSPECIFIED = 0,};
enum MACRO_JOYSTICKID1 {JOYSTICKID1 = 0,JOYSTICKID2 = 1,};
enum MACRO_LANG_SYSTEM {LANG_SYSTEM_DEFAULT = 2048,LANG_USER_DEFAULT = 1024,};
enum MACRO_MAXLONGLONG {MAXLONGLONG = 0x7FFFFFFFFFFFFFFF,};
enum MACRO_MAXPNAMELEN {MAXPNAMELEN = 32,MAXERRORLENGTH = 256,};
enum MACRO_MAX_MANGLED {MAX_MANGLED_SITE = 27,};
enum MACRO_MAX_PROFILE {MAX_PROFILE_LEN = 80,};
enum MACRO_MDMSPKRFLAG {MDMSPKRFLAG_OFF = 0x1,MDMSPKRFLAG_DIAL = 0x2,MDMSPKRFLAG_ON = 0x4,MDMSPKRFLAG_CALLSETUP = 0x8,};
enum MACRO_MM_JOY1MOVE {MM_JOY1MOVE = 0x3A0,MM_JOY2MOVE = 0x3A1,MM_JOY1ZMOVE = 0x3A2,MM_JOY2ZMOVE = 0x3A3,MM_JOY1BUTTONDOWN = 0x3B5,MM_JOY2BUTTONDOWN = 0x3B6,MM_JOY1BUTTONUP = 0x3B7,MM_JOY2BUTTONUP = 0x3B8,MM_MCINOTIFY = 0x3B9,MM_WOM_OPEN = 0x3BB,MM_WOM_CLOSE = 0x3BC,MM_WOM_DONE = 0x3BD,MM_WIM_OPEN = 0x3BE,MM_WIM_CLOSE = 0x3BF,MM_WIM_DATA = 0x3C0,MM_MIM_OPEN = 0x3C1,MM_MIM_CLOSE = 0x3C2,MM_MIM_DATA = 0x3C3,MM_MIM_LONGDATA = 0x3C4,MM_MIM_ERROR = 0x3C5,MM_MIM_LONGERROR = 0x3C6,MM_MOM_OPEN = 0x3C7,MM_MOM_CLOSE = 0x3C8,MM_MOM_DONE = 0x3C9,MM_DRVM_OPEN = 0x3D0,MM_DRVM_CLOSE = 0x3D1,MM_DRVM_DATA = 0x3D2,MM_DRVM_ERROR = 0x3D3,MM_STREAM_OPEN = 0x3D4,MM_STREAM_CLOSE = 0x3D5,MM_STREAM_DONE = 0x3D6,MM_STREAM_ERROR = 0x3D7,MM_MOM_POSITIONCB = 0x3CA,MM_MCISIGNAL = 0x3CB,MM_MIM_MOREDATA = 0x3CC,MM_MIXM_LINE_CHANGE = 0x3D0,MM_MIXM_CONTROL_CHANGE = 0x3D1,};
enum MACRO_MM_MAX_AXES {MM_MAX_AXES_NAMELEN = 16,};
enum MACRO_MOUSEEVENTF {MOUSEEVENTF_MOVE = 0x1,MOUSEEVENTF_LEFTDOWN = 0x2,MOUSEEVENTF_LEFTUP = 0x4,MOUSEEVENTF_RIGHTDOWN = 0x8,MOUSEEVENTF_RIGHTUP = 0x10,MOUSEEVENTF_MIDDLEDOWN = 0x20,MOUSEEVENTF_MIDDLEUP = 0x40,MOUSEEVENTF_XDOWN = 0x80,MOUSEEVENTF_XUP = 0x100,MOUSEEVENTF_WHEEL = 0x800,MOUSEEVENTF_VIRTUALDESK = 0x4000,MOUSEEVENTF_ABSOLUTE = 0x8000,};
enum MACRO_MOUSETRAILS {MOUSETRAILS = 39,};
enum MACRO_MSGF_DDEMGR {MSGF_DDEMGR = 0x8001,};
enum MACRO_NCBDGRECVBC {NCBDGRECVBC = 0x23,};
enum MACRO_NCBDGSENDBC {NCBDGSENDBC = 0x22,};
enum MACRO_NCBFINDNAME {NCBFINDNAME = 0x78,};
enum MACRO_NETPROPERTY {NETPROPERTY_PERSISTENT = 1,};
enum MACRO_NONZEROLHND {NONZEROLHND = 2,};
enum MACRO_NONZEROLPTR {NONZEROLPTR = 0,};
enum MACRO_NOTIFY_TYPE {PRINTER_NOTIFY_TYPE = 0x0,JOB_NOTIFY_TYPE = 0x1,};
enum MACRO_NOTSRCERASE {NOTSRCERASE = 0x1100A6,};
enum MACRO_NUMRESERVED {NUMRESERVED = 106,};
enum MACRO_OPENCHANNEL {OPENCHANNEL = 4110,};
enum MACRO_PASSTHROUGH {PASSTHROUGH = 19,};
enum MACRO_PC_RESERVED {PC_RESERVED = 0x1,PC_EXPLICIT = 0x2,PC_NOCOLLAPSE = 0x4,};
enum MACRO_PDEVICESIZE {PDEVICESIZE = 26,};
enum MACRO_PP_ENUMALGS {PP_ENUMALGS = 1,PP_ENUMCONTAINERS = 2,PP_IMPTYPE = 3,PP_NAME = 4,PP_VERSION = 5,PP_CONTAINER = 6,PP_CHANGE_PASSWORD = 7,PP_KEYSET_SEC_DESCR = 8,PP_CERTCHAIN = 9,PP_KEY_TYPE_SUBTYPE = 10,PP_PROVTYPE = 16,PP_KEYSTORAGE = 17,PP_APPLI_CERT = 18,PP_SYM_KEYSIZE = 19,PP_SESSION_KEYSIZE = 20,PP_UI_PROMPT = 21,PP_ENUMALGS_EX = 22,PP_ENUMMANDROOTS = 25,PP_ENUMELECTROOTS = 26,PP_KEYSET_TYPE = 27,PP_ADMIN_PIN = 31,PP_KEYEXCHANGE_PIN = 32,PP_SIGNATURE_PIN = 33,PP_SIG_KEYSIZE_INC = 34,PP_KEYX_KEYSIZE_INC = 35,PP_UNIQUE_CONTAINER = 36,PP_SGC_INFO = 37,PP_USE_HARDWARE_RNG = 38,PP_KEYSPEC = 39,PP_ENUMEX_SIGNING_PROT = 40,};
enum MACRO_PRINTACTION {PRINTACTION_OPEN = 0,PRINTACTION_PROPERTIES = 1,PRINTACTION_NETINSTALL = 2,PRINTACTION_NETINSTALLLINK = 3,PRINTACTION_TESTPAGE = 4,PRINTACTION_OPENNETPRN = 5,};
enum MACRO_PRINTDLGORD {PRINTDLGORD = 1538,};
enum MACRO_PRINTER_ALL {PRINTER_ALL_ACCESS = 983052,PRINTER_READ = 131080,PRINTER_WRITE = 131080,PRINTER_EXECUTE = 131080,};
enum MACRO_PROPSETFLAG {PROPSETFLAG_DEFAULT = 0,PROPSETFLAG_NONSIMPLE = 1,PROPSETFLAG_ANSI = 2,PROPSETFLAG_UNBUFFERED = 4,PROPSETFLAG_CASE_SENSITIVE = 8,};
enum MACRO_QOS_GENERAL {QOS_GENERAL_ID_BASE = 2000,QOS_OBJECT_END_OF_LIST = 2001,QOS_OBJECT_SD_MODE = 2002,QOS_OBJECT_SHAPING_RATE = 2003,QOS_OBJECT_DESTADDR = 2004,};
enum MACRO_REGISTERING {REGISTERING = 0x0,REGISTERED = 0x4,};
enum MACRO_REPLACEFILE {REPLACEFILE_WRITE_THROUGH = 0x1,REPLACEFILE_IGNORE_MERGE_ERRORS = 0x2,};
enum MACRO_SCARD_CLASS {SCARD_CLASS_VENDOR_INFO = 1,SCARD_CLASS_COMMUNICATIONS = 2,SCARD_CLASS_PROTOCOL = 3,SCARD_CLASS_POWER_MGMT = 4,SCARD_CLASS_SECURITY = 5,SCARD_CLASS_MECHANICAL = 6,SCARD_CLASS_VENDOR_DEFINED = 7,SCARD_CLASS_IFD_PROTOCOL = 8,SCARD_CLASS_ICC_STATE = 9,SCARD_CLASS_PERF = 32766,SCARD_CLASS_SYSTEM = 32767,SCARD_ATTR_VENDOR_NAME = 65792,SCARD_ATTR_VENDOR_IFD_TYPE = 65793,SCARD_ATTR_VENDOR_IFD_VERSION = 65794,SCARD_ATTR_VENDOR_IFD_SERIAL_NO = 65795,SCARD_ATTR_CHANNEL_ID = 131344,SCARD_ATTR_PROTOCOL_TYPES = 196896,SCARD_ATTR_DEFAULT_CLK = 196897,SCARD_ATTR_MAX_CLK = 196898,SCARD_ATTR_DEFAULT_DATA_RATE = 196899,SCARD_ATTR_MAX_DATA_RATE = 196900,SCARD_ATTR_MAX_IFSD = 196901,SCARD_ATTR_POWER_MGMT_SUPPORT = 262449,SCARD_ATTR_USER_TO_CARD_AUTH_DEVICE = 328000,SCARD_ATTR_USER_AUTH_INPUT_DEVICE = 328002,SCARD_ATTR_CHARACTERISTICS = 393552,SCARD_ATTR_CURRENT_PROTOCOL_TYPE = 524801,SCARD_ATTR_CURRENT_CLK = 524802,SCARD_ATTR_CURRENT_F = 524803,SCARD_ATTR_CURRENT_D = 524804,SCARD_ATTR_CURRENT_N = 524805,SCARD_ATTR_CURRENT_W = 524806,SCARD_ATTR_CURRENT_IFSC = 524807,SCARD_ATTR_CURRENT_IFSD = 524808,SCARD_ATTR_CURRENT_BWT = 524809,SCARD_ATTR_CURRENT_CWT = 524810,SCARD_ATTR_CURRENT_EBC_ENCODING = 524811,SCARD_ATTR_EXTENDED_BWT = 524812,SCARD_ATTR_ICC_PRESENCE = 590592,SCARD_ATTR_ICC_INTERFACE_STATUS = 590593,SCARD_ATTR_CURRENT_IO_STATE = 590594,SCARD_ATTR_ATR_STRING = 590595,SCARD_ATTR_ICC_TYPE_PER_ATR = 590596,SCARD_ATTR_ESC_RESET = 499712,SCARD_ATTR_ESC_CANCEL = 499715,SCARD_ATTR_ESC_AUTHREQUEST = 499717,SCARD_ATTR_MAXINPUT = 499719,SCARD_ATTR_DEVICE_UNIT = 2147418113,SCARD_ATTR_DEVICE_IN_USE = 2147418114,SCARD_ATTR_DEVICE_FRIENDLY_NAME_A = 2147418115,SCARD_ATTR_DEVICE_SYSTEM_NAME_A = 2147418116,SCARD_ATTR_DEVICE_FRIENDLY_NAME_W = 2147418117,SCARD_ATTR_DEVICE_SYSTEM_NAME_W = 2147418118,SCARD_ATTR_SUPRESS_T1_IFS_REQUEST = 2147418119,SCARD_PERF_NUM_TRANSMISSIONS = 2147352577,SCARD_PERF_BYTES_TRANSMITTED = 2147352578,SCARD_PERF_TRANSMISSION_TIME = 2147352579,SCARD_ATTR_DEVICE_FRIENDLY_NAME = 2147418115,SCARD_ATTR_DEVICE_SYSTEM_NAME = 2147418116,SCARD_T0_HEADER_LENGTH = 7,SCARD_T0_CMD_LENGTH = 5,SCARD_T1_PROLOGUE_LENGTH = 3,SCARD_T1_EPILOGUE_LENGTH = 2,SCARD_T1_MAX_IFS = 254,SCARD_UNKNOWN = 0,SCARD_ABSENT = 1,SCARD_PRESENT = 2,SCARD_SWALLOWED = 3,SCARD_POWERED = 4,SCARD_NEGOTIABLE = 5,SCARD_SPECIFIC = 6,SCARD_READER_SWALLOWS = 1,SCARD_READER_EJECTS = 2,SCARD_READER_CONFISCATES = 4,SCARD_READER_TYPE_SERIAL = 1,SCARD_READER_TYPE_PARALELL = 2,SCARD_READER_TYPE_KEYBOARD = 4,SCARD_READER_TYPE_SCSI = 8,SCARD_READER_TYPE_IDE = 16,SCARD_READER_TYPE_USB = 32,SCARD_READER_TYPE_PCMCIA = 64,SCARD_READER_TYPE_VENDOR = 240,SCARD_AUTOALLOCATE = 4294967295,SCARD_SCOPE_USER = 0,SCARD_SCOPE_TERMINAL = 1,SCARD_SCOPE_SYSTEM = 2,SCARD_PROVIDER_PRIMARY = 1,SCARD_PROVIDER_CSP = 2,SCARD_STATE_UNAWARE = 0,SCARD_STATE_IGNORE = 1,SCARD_STATE_CHANGED = 2,SCARD_STATE_UNKNOWN = 4,SCARD_STATE_UNAVAILABLE = 8,SCARD_STATE_EMPTY = 16,SCARD_STATE_PRESENT = 32,SCARD_STATE_ATRMATCH = 64,SCARD_STATE_EXCLUSIVE = 128,SCARD_STATE_INUSE = 256,SCARD_STATE_MUTE = 512,SCARD_STATE_UNPOWERED = 1024,SCARD_SHARE_EXCLUSIVE = 1,SCARD_SHARE_SHARED = 2,SCARD_SHARE_DIRECT = 3,SCARD_LEAVE_CARD = 0,SCARD_RESET_CARD = 1,SCARD_UNPOWER_CARD = 2,SCARD_EJECT_CARD = 3,};
enum MACRO_SERVICETYPE {SERVICETYPE_NOTRAFFIC = 0x0,SERVICETYPE_BESTEFFORT = 0x1,SERVICETYPE_CONTROLLEDLOAD = 0x2,SERVICETYPE_GUARANTEED = 0x3,SERVICETYPE_NETWORK_UNAVAILABLE = 0x4,SERVICETYPE_GENERAL_INFORMATION = 0x5,SERVICETYPE_NOCHANGE = 0x6,SERVICETYPE_NONCONFORMING = 0x9,SERVICETYPE_NETWORK_CONTROL = 0xA,SERVICETYPE_QUALITATIVE = 0xD,};
enum MACRO_SETLINEJOIN {SETLINEJOIN = 22,};
enum MACRO_SIZEPALETTE {SIZEPALETTE = 104,};
enum MACRO_SYNCHRONIZE {SYNCHRONIZE = 0x100000,};
enum MACRO_TAPE_RETURN {TAPE_RETURN_STATISTICS = 0,TAPE_RETURN_ENV_INFO = 1,TAPE_RESET_STATISTICS = 2,};
enum MACRO_THREAD_BASE {THREAD_BASE_PRIORITY_LOWRT = 15,THREAD_BASE_PRIORITY_MAX = 2,THREAD_BASE_PRIORITY_MIN = -2,THREAD_BASE_PRIORITY_IDLE = -15,};
enum MACRO_TRANSPARENT {TRANSPARENT = 1,OPAQUE = 2,};
enum MACRO_WAIT_FAILED {WAIT_FAILED = 0xFFFFFFFF,WAIT_OBJECT_0 = 0x0,WAIT_ABANDONED = 0x80,WAIT_ABANDONED_0 = 0x80,WAIT_IO_COMPLETION = 0xC0,};
enum MACRO_WININETINFO {WININETINFO_OPTION_LOCK_HANDLE = 65534,};
enum MACRO_WRITE_WATCH {WRITE_WATCH_FLAG_RESET = 0x1,};
enum MACRO_WSAPROTOCOL {WSAPROTOCOL_LEN = 255,};
enum MACRO__HEAPBADPTR {_HEAPBADPTR = -6,};
typedef struct tagMCI_GENERIC_PARMS MCI_GENERIC_PARMS;
typedef struct tagMCI_SEQ_SET_PARMS MCI_SEQ_SET_PARMS;
typedef struct tagMCI_VD_PLAY_PARMS MCI_VD_PLAY_PARMS;
typedef struct tagMCI_VD_STEP_PARMS MCI_VD_STEP_PARMS;
typedef struct tagMEASUREITEMSTRUCT MEASUREITEMSTRUCT;
typedef struct tagMENUGETOBJECTINFO MENUGETOBJECTINFO;
typedef struct _MENU_EVENT_RECORD MENU_EVENT_RECORD;
typedef struct _MIDL_STUB_MESSAGE MIDL_STUB_MESSAGE;
typedef struct tagMOUSEHOOKSTRUCTEX MOUSEHOOKSTRUCTEX;
typedef struct tagNCCALCSIZE_PARAMS NCCALCSIZE_PARAMS;
typedef struct tagNONCLIENTMETRICSA NONCLIENTMETRICSA;
typedef struct tagNONCLIENTMETRICSW NONCLIENTMETRICSW;
typedef struct tagCOMPOSITIONFORM *NPCOMPOSITIONFORM;
typedef struct DRVCONFIGINFOEX *NPDRVCONFIGINFOEX;
typedef struct tagIMECHARPOSITION *NPIMECHARPOSITION;
typedef struct tagRECONVERTSTRING *NPRECONVERTSTRING;
typedef struct tagBITMAPCOREHEADER *PBITMAPCOREHEADER;
typedef struct tagBITMAPFILEHEADER *PBITMAPFILEHEADER;
typedef struct tagBITMAPINFOHEADER *PBITMAPINFOHEADER;
typedef struct _CERT_KEY_CONTEXT *PCERT_KEY_CONTEXT;
typedef struct _CERT_POLICY_INFO *PCERT_POLICY_INFO;
typedef struct _CERT_USAGE_MATCH *PCERT_USAGE_MATCH;
typedef struct _CMSG_SIGNER_INFO *PCMSG_SIGNER_INFO;
typedef struct _CMSG_STREAM_INFO *PCMSG_STREAM_INFO;
typedef struct _CRYPT_ATTRIBUTES *PCRYPT_ATTRIBUTES;
typedef struct _CRYPT_BLOB_ARRAY *PCRYPT_BLOB_ARRAY;
typedef struct _CRYPTOAPI_BLOB *PCRYPT_OBJID_BLOB;
typedef struct tagDELETEITEMSTRUCT *PDELETEITEMSTRUCT;
typedef struct _DISK_PERFORMANCE *PDISK_PERFORMANCE;
typedef struct tagEMRCREATEPALETTE *PEMRCREATEPALETTE;
typedef struct tagEMROFFSETCLIPRGN *PEMROFFSETCLIPRGN;
typedef struct tagEMRPOLYPOLYLINE16 *PEMRPOLYPOLYGON16;
typedef struct tagEMRRESIZEPALETTE *PEMRRESIZEPALETTE;
typedef struct tagEMRSELECTPALETTE *PEMRSELECTPALETTE;
typedef struct tagEMRSETVIEWPORTORGEX *PEMRSETBRUSHORGEX;
typedef struct tagEMRSETCOLORSPACE *PEMRSETCOLORSPACE;
typedef struct tagEMRSETICMPROFILE *PEMRSETICMPROFILE;
typedef struct tagEMRSETMITERLIMIT *PEMRSETMITERLIMIT;
typedef struct tagEMRSTRETCHDIBITS *PEMRSTRETCHDIBITS;
typedef struct tagENUMLOGFONTEXDVA *PENUMLOGFONTEXDVA;
typedef struct tagENUMLOGFONTEXDVW *PENUMLOGFONTEXDVW;
typedef struct _EVENTSFORLOGFILE *PEVENTSFORLOGFILE;
typedef struct _EA831C4C2E16EF6F2B7E490157D80D27 *PFIND_BY_SID_DATA;
typedef struct _FIND_NAME_BUFFER *PFIND_NAME_BUFFER;
typedef struct _FIND_NAME_HEADER *PFIND_NAME_HEADER;
typedef struct _HISTOGRAM_BUCKET *PHISTOGRAM_BUCKET;
typedef struct _IMAGE_DEBUG_MISC *PIMAGE_DEBUG_MISC;
typedef struct _IMAGE_DOS_HEADER *PIMAGE_DOS_HEADER;
typedef struct _IMAGE_OS2_HEADER *PIMAGE_OS2_HEADER;
typedef struct _IMAGE_VXD_HEADER *PIMAGE_VXD_HEADER;
typedef struct tagIMEMENUITEMINFOA *PIMEMENUITEMINFOA;
typedef struct tagIMEMENUITEMINFOW *PIMEMENUITEMINFOW;
typedef struct _KEY_EVENT_RECORD *PKEY_EVENT_RECORD;
typedef struct _KEY_TYPE_SUBTYPE *PKEY_TYPE_SUBTYPE;
typedef struct _976F82B52AD5D008419379398D47AE46 *PMARK_HANDLE_INFO;
typedef struct tagMCI_STATUS_PARMS *PMCI_STATUS_PARMS;
typedef struct _46B8CD9DF897759D0306203A2121EA8B *PMENUITEMTEMPLATE;
typedef struct _MIDL_SERVER_INFO_ *PMIDL_SERVER_INFO;
typedef struct tagMINIMIZEDMETRICS *PMINIMIZEDMETRICS;
typedef struct _NDR_PIPE_MESSAGE *PNDR_PIPE_MESSAGE;
typedef struct tagOBJECTDESCRIPTOR *POBJECTDESCRIPTOR;
typedef struct _OBJECT_TYPE_LIST *POBJECT_TYPE_LIST;
typedef struct _9B80566C9ECE6A73A5F898405A50FFFF *POPENCARDNAME_EXA;
typedef struct _A63D84EB732F4E602FF2E049D2D99B44 *POPENCARDNAME_EXW;
typedef struct _OSVERSIONINFOEXA *POSVERSIONINFOEXA;
typedef struct _OSVERSIONINFOEXW *POSVERSIONINFOEXW;
typedef struct _PERF_OBJECT_TYPE *PPERF_OBJECT_TYPE;
typedef struct _PROVIDOR_INFO_1A *PPROVIDOR_INFO_1A;
typedef struct _PROVIDOR_INFO_1W *PPROVIDOR_INFO_1W;
typedef struct _PROVIDOR_INFO_2A *PPROVIDOR_INFO_2A;
typedef struct _PROVIDOR_INFO_2W *PPROVIDOR_INFO_2W;
typedef struct _PSFEATURE_OUTPUT *PPSFEATURE_OUTPUT;
typedef struct _PRINTER_DEFAULTSA PRINTER_DEFAULTSA;
typedef struct _PRINTER_DEFAULTSW PRINTER_DEFAULTSW;
typedef struct _RPC_SECURITY_QOS *PRPC_SECURITY_QOS;
typedef struct _SCARD_IO_REQUEST *PSCARD_IO_REQUEST;
typedef struct _SENDCMDOUTPARAMS *PSENDCMDOUTPARAMS;
typedef struct _TAPE_WRITE_MARKS *PTAPE_WRITE_MARKS;
typedef struct _TOKEN_PRIVILEGES *PTOKEN_PRIVILEGES;
typedef struct _TOKEN_STATISTICS *PTOKEN_STATISTICS;
typedef struct _8363E2736332812C7A22E557719FD114 *PUSN_JOURNAL_DATA;
typedef struct _WIN32_FIND_DATAA *PWIN32_FIND_DATAA;
typedef struct _WIN32_FIND_DATAW *PWIN32_FIND_DATAW;
typedef struct _RASTERIZER_STATUS RASTERIZER_STATUS;
typedef struct _REMOTE_NAME_INFOA REMOTE_NAME_INFOA;
typedef struct _REMOTE_NAME_INFOW REMOTE_NAME_INFOW;
typedef struct _SHELLEXECUTEINFOA SHELLEXECUTEINFOA;
typedef struct _SHELLEXECUTEINFOW SHELLEXECUTEINFOW;
typedef struct _SINGLE_LIST_ENTRY SINGLE_LIST_ENTRY;
typedef struct _TAPE_GET_POSITION TAPE_GET_POSITION;
typedef struct _TAPE_SET_POSITION TAPE_SET_POSITION;
typedef struct _WSAPROTOCOL_INFOA WSAPROTOCOL_INFOA;
typedef struct _WSAPROTOCOL_INFOW WSAPROTOCOL_INFOW;
enum _AUDIT_EVENT_TYPE {AuditEventObjectAccess = 0x0,AuditEventDirectoryServiceAccess = 0x1,};
struct _RPC_SECURITY_QOS {unsigned int Version;unsigned int Capabilities;unsigned int IdentityTracking;unsigned int ImpersonationType;};
enum _STORAGE_BUS_TYPE {BusTypeUnknown = 0x0,BusTypeScsi = 0x1,BusTypeAtapi = 0x2,BusTypeAta = 0x3,BusType1394 = 0x4,BusTypeSsa = 0x5,BusTypeFibre = 0x6,BusTypeUsb = 0x7,BusTypeRAID = 0x8,BusTypeMaxReserved = 0x7F,};
enum _WSAESETSERVICEOP {RNRSERVICE_REGISTER = 0x0,RNRSERVICE_DEREGISTER = 0x1,RNRSERVICE_DELETE = 0x2,};
struct _WSANETWORKEVENTS {int lNetworkEvents;int iErrorCode[10];};
typedef struct _userHMETAFILEPICT userHMETAFILEPICT;
struct AsyncIAdviseSink {struct AsyncIAdviseSinkVtbl *lpVtbl;};
struct AsyncIPipeDouble {struct AsyncIPipeDoubleVtbl *lpVtbl;};
typedef struct tagBITMAPCOREHEADER BITMAPCOREHEADER;
typedef struct tagBITMAPFILEHEADER BITMAPFILEHEADER;
typedef struct tagBITMAPINFOHEADER BITMAPINFOHEADER;
typedef struct _CERT_KEY_CONTEXT CERT_KEY_CONTEXT;
typedef struct _CERT_POLICY_INFO CERT_POLICY_INFO;
typedef struct _CERT_USAGE_MATCH CERT_USAGE_MATCH;
typedef struct _CMSG_SIGNER_INFO CMSG_SIGNER_INFO;
typedef struct _CMSG_STREAM_INFO CMSG_STREAM_INFO;
typedef struct _CRYPT_ATTRIBUTES CRYPT_ATTRIBUTES;
typedef struct _CRYPT_BLOB_ARRAY CRYPT_BLOB_ARRAY;
typedef struct _CRYPTOAPI_BLOB CRYPT_OBJID_BLOB;
typedef struct tagDELETEITEMSTRUCT DELETEITEMSTRUCT;
typedef struct _DISK_PERFORMANCE DISK_PERFORMANCE;
typedef struct tagEMRCREATEPALETTE EMRCREATEPALETTE;
typedef struct tagEMROFFSETCLIPRGN EMROFFSETCLIPRGN;
typedef struct tagEMRPOLYPOLYLINE16 EMRPOLYPOLYGON16;
typedef struct tagEMRRESIZEPALETTE EMRRESIZEPALETTE;
typedef struct tagEMRSELECTPALETTE EMRSELECTPALETTE;
typedef struct tagEMRSETVIEWPORTORGEX EMRSETBRUSHORGEX;
typedef struct tagEMRSETCOLORSPACE EMRSETCOLORSPACE;
typedef struct tagEMRSETICMPROFILE EMRSETICMPROFILE;
typedef struct tagEMRSETMITERLIMIT EMRSETMITERLIMIT;
typedef struct tagEMRSTRETCHDIBITS EMRSTRETCHDIBITS;
typedef struct tagENUMLOGFONTEXDVA ENUMLOGFONTEXDVA;
typedef struct tagENUMLOGFONTEXDVW ENUMLOGFONTEXDVW;
typedef struct _EVENTSFORLOGFILE EVENTSFORLOGFILE;
typedef struct _EXCEPTION_RECORD EXCEPTION_RECORD;
typedef struct _EA831C4C2E16EF6F2B7E490157D80D27 FIND_BY_SID_DATA;
typedef struct _FIND_NAME_BUFFER FIND_NAME_BUFFER;
typedef struct _FIND_NAME_HEADER FIND_NAME_HEADER;
typedef void *HCRYPTOIDFUNCSET;
typedef struct _HISTOGRAM_BUCKET HISTOGRAM_BUCKET;
typedef struct _tagHIT_LOGGING_INFO HIT_LOGGING_INFO;
typedef struct tagHW_PROFILE_INFOA HW_PROFILE_INFOA;
typedef struct tagHW_PROFILE_INFOW HW_PROFILE_INFOW;
struct ICatalogFileInfo {struct ICatalogFileInfoVtbl *lpVtbl;};
struct ICreateErrorInfo {struct ICreateErrorInfoVtbl *lpVtbl;};
struct ICreateTypeInfo2 {struct ICreateTypeInfo2Vtbl *lpVtbl;};
struct IEnumSTATPROPSTG {struct IEnumSTATPROPSTGVtbl *lpVtbl;};
struct IInternalUnknown {struct IInternalUnknownVtbl *lpVtbl;};
struct IInternetSession {struct IInternetSessionVtbl *lpVtbl;};
typedef union _IMAGE_AUX_SYMBOL IMAGE_AUX_SYMBOL;
typedef struct _IMAGE_DEBUG_MISC IMAGE_DEBUG_MISC;
typedef struct _IMAGE_DOS_HEADER IMAGE_DOS_HEADER;
typedef struct _IMAGE_LINENUMBER IMAGE_LINENUMBER;
typedef struct _IMAGE_OS2_HEADER IMAGE_OS2_HEADER;
typedef struct _IMAGE_RELOCATION IMAGE_RELOCATION;
typedef struct _IMAGE_VXD_HEADER IMAGE_VXD_HEADER;
typedef struct tagIMEMENUITEMINFOA IMEMENUITEMINFOA;
typedef struct tagIMEMENUITEMINFOW IMEMENUITEMINFOW;
struct IOleAdviseHolder {struct IOleAdviseHolderVtbl *lpVtbl;};
struct IOleCacheControl {struct IOleCacheControlVtbl *lpVtbl;};
struct IOleInPlaceFrame {struct IOleInPlaceFrameVtbl *lpVtbl;};
struct IPSFactoryBuffer {struct IPSFactoryBufferVtbl *lpVtbl;};
struct IPropertyStorage {struct IPropertyStorageVtbl *lpVtbl;};
struct IServiceProvider {struct IServiceProviderVtbl *lpVtbl;};
struct IWinInetHttpInfo {struct IWinInetHttpInfoVtbl *lpVtbl;};
struct IXMLDOMAttribute {struct IXMLDOMAttributeVtbl *lpVtbl;};
typedef struct _KEY_EVENT_RECORD KEY_EVENT_RECORD;
typedef struct _KEY_TYPE_SUBTYPE KEY_TYPE_SUBTYPE;
typedef struct _ADDJOB_INFO_1A *LPADDJOB_INFO_1A;
typedef struct _ADDJOB_INFO_1W *LPADDJOB_INFO_1W;
typedef IAuthenticate *LPAUTHENTICATION;
typedef struct tagBITMAPCOREINFO *LPBITMAPCOREINFO;
typedef struct _22BDD2D628B0B561C5A9CA42290FE551 *LPBITMAPV4HEADER;
typedef struct _2B6042393D1A02E0AE9B16B44F784AC7 *LPBITMAPV5HEADER;
typedef struct tagCBT_CREATEWNDA *LPCBT_CREATEWNDA;
typedef struct tagCBT_CREATEWNDW *LPCBT_CREATEWNDW;
typedef ICreateTypeInfo *LPCREATETYPEINFO;
typedef ICreateTypeLib2 *LPCREATETYPELIB2;
typedef struct _DISCDLGSTRUCTA *LPDISCDLGSTRUCTA;
typedef struct _DISCDLGSTRUCTW *LPDISCDLGSTRUCTW;
typedef struct tagDRAWITEMSTRUCT *LPDRAWITEMSTRUCT;
typedef struct tagDRAWTEXTPARAMS *LPDRAWTEXTPARAMS;
typedef struct _DRIVER_INFO_1A *LPDRIVER_INFO_1A;
typedef struct _DRIVER_INFO_1W *LPDRIVER_INFO_1W;
typedef struct _DRIVER_INFO_2A *LPDRIVER_INFO_2A;
typedef struct _DRIVER_INFO_2W *LPDRIVER_INFO_2W;
typedef struct _DRIVER_INFO_3A *LPDRIVER_INFO_3A;
typedef struct _DRIVER_INFO_3W *LPDRIVER_INFO_3W;
typedef struct _DRIVER_INFO_4A *LPDRIVER_INFO_4A;
typedef struct _DRIVER_INFO_4W *LPDRIVER_INFO_4W;
typedef struct _DRIVER_INFO_5A *LPDRIVER_INFO_5A;
typedef struct _DRIVER_INFO_5W *LPDRIVER_INFO_5W;
typedef struct _DRIVER_INFO_6A *LPDRIVER_INFO_6A;
typedef struct _DRIVER_INFO_6W *LPDRIVER_INFO_6W;
typedef struct tagENUMLOGFONTEXA *LPENUMLOGFONTEXA;
typedef struct tagENUMLOGFONTEXW *LPENUMLOGFONTEXW;
typedef struct tagLOGCOLORSPACEA *LPLOGCOLORSPACEA;
typedef struct tagLOGCOLORSPACEW *LPLOGCOLORSPACEW;
typedef struct tagMCI_PLAY_PARMS *LPMCI_PLAY_PARMS;
typedef struct tagMCI_SEEK_PARMS *LPMCI_SEEK_PARMS;
typedef struct _MEMORYSTATUSEX *LPMEMORYSTATUSEX;
typedef struct tagMONITORINFOEXA *LPMONITORINFOEXA;
typedef struct tagMONITORINFOEXW *LPMONITORINFOEXW;
typedef struct tagMOUSEMOVEPOINT *LPMOUSEMOVEPOINT;
typedef struct tagMSLLHOOKSTRUCT *LPMSLLHOOKSTRUCT;
typedef struct tagNEWTEXTMETRICA *LPNEWTEXTMETRICA;
typedef struct tagNEWTEXTMETRICW *LPNEWTEXTMETRICW;
typedef IOleInPlaceSite *LPOLEINPLACESITE;
typedef struct _OSVERSIONINFOA *LPOSVERSIONINFOA;
typedef struct _OSVERSIONINFOW *LPOSVERSIONINFOW;
typedef IPersistMoniker *LPPERSISTMONIKER;
typedef IPersistStorage *LPPERSISTSTORAGE;
typedef struct _PRINTER_INFO_3 *LPPRINTER_INFO_3;
typedef struct _PRINTER_INFO_6 *LPPRINTER_INFO_6;
typedef struct tagPRINTPAGERANGE *LPPRINTPAGERANGE;
typedef struct _PROPSHEETPAGEA *LPPROPSHEETPAGEA;
typedef struct _PROPSHEETPAGEW *LPPROPSHEETPAGEW;
typedef struct _EC8EE2E9AF7D4EC32726A7FD632A186D *LPQOS_OBJECT_HDR;
typedef IRunnableObject *LPRUNNABLEOBJECT;
typedef struct tagSAFEARRAYBOUND *LPSAFEARRAYBOUND;
typedef struct _SERVICE_STATUS *LPSERVICE_STATUS;
typedef struct _SHNAMEMAPPINGA *LPSHNAMEMAPPINGA;
typedef struct _SHNAMEMAPPINGW *LPSHNAMEMAPPINGW;
typedef struct _SOCKET_ADDRESS *LPSOCKET_ADDRESS;
typedef IStdMarshalInfo *LPSTDMARSHALINFO;
typedef IInternetZoneManager *LPURLZONEMANAGER;
typedef struct _ZONEATTRIBUTES *LPZONEATTRIBUTES;
enum MACRO_ACCESS_MAX {ACCESS_MAX_MS_V2_ACE_TYPE = 0x3,ACCESS_ALLOWED_COMPOUND_ACE_TYPE = 0x4,ACCESS_MAX_MS_V3_ACE_TYPE = 0x4,ACCESS_MIN_MS_OBJECT_ACE_TYPE = 0x5,ACCESS_ALLOWED_OBJECT_ACE_TYPE = 0x5,ACCESS_DENIED_OBJECT_ACE_TYPE = 0x6,};
enum MACRO_ACCESS_MIN {ACCESS_MIN_MS_ACE_TYPE = 0x0,ACCESS_ALLOWED_ACE_TYPE = 0x0,ACCESS_DENIED_ACE_TYPE = 0x1,};
enum MACRO_ACE_OBJECT {ACE_OBJECT_TYPE_PRESENT = 0x1,ACE_INHERITED_OBJECT_TYPE_PRESENT = 0x2,};
enum MACRO_APPCOMMAND {APPCOMMAND_BROWSER_BACKWARD = 1,APPCOMMAND_BROWSER_FORWARD = 2,APPCOMMAND_BROWSER_REFRESH = 3,APPCOMMAND_BROWSER_STOP = 4,APPCOMMAND_BROWSER_SEARCH = 5,APPCOMMAND_BROWSER_FAVORITES = 6,APPCOMMAND_BROWSER_HOME = 7,APPCOMMAND_VOLUME_MUTE = 8,APPCOMMAND_VOLUME_DOWN = 9,APPCOMMAND_VOLUME_UP = 10,APPCOMMAND_MEDIA_NEXTTRACK = 11,APPCOMMAND_MEDIA_PREVIOUSTRACK = 12,APPCOMMAND_MEDIA_STOP = 13,APPCOMMAND_MEDIA_PLAY_PAUSE = 14,APPCOMMAND_LAUNCH_MAIL = 15,APPCOMMAND_LAUNCH_MEDIA_SELECT = 16,APPCOMMAND_LAUNCH_APP1 = 17,APPCOMMAND_LAUNCH_APP2 = 18,APPCOMMAND_BASS_DOWN = 19,APPCOMMAND_BASS_BOOST = 20,APPCOMMAND_BASS_UP = 21,APPCOMMAND_TREBLE_DOWN = 22,APPCOMMAND_TREBLE_UP = 23,};
enum MACRO_BACKGROUND {BACKGROUND_BLUE = 0x10,BACKGROUND_GREEN = 0x20,BACKGROUND_RED = 0x40,BACKGROUND_INTENSITY = 0x80,};
enum MACRO_CAPTUREBLT {CAPTUREBLT = 0x40000000,};
enum MACRO_CC_RGBINIT {CC_RGBINIT = 0x1,CC_FULLOPEN = 0x2,CC_PREVENTFULLOPEN = 0x4,CC_SHOWHELP = 0x8,CC_ENABLEHOOK = 0x10,CC_ENABLETEMPLATE = 0x20,CC_ENABLETEMPLATEHANDLE = 0x40,CC_SOLIDCOLOR = 0x80,CC_ANYCOLOR = 0x100,};
enum MACRO_CERT_CHAIN {CERT_CHAIN_CACHE_END_CERT = 0x1,CERT_CHAIN_THREAD_STORE_SYNC = 0x2,CERT_CHAIN_CACHE_ONLY_URL_RETRIEVAL = 0x4,CERT_CHAIN_USE_LOCAL_MACHINE_STORE = 0x8,CERT_CHAIN_ENABLE_CACHE_AUTO_UPDATE = 0x10,CERT_TRUST_NO_ERROR = 0x0,CERT_TRUST_IS_NOT_TIME_VALID = 0x1,CERT_TRUST_IS_NOT_TIME_NESTED = 0x2,CERT_TRUST_IS_REVOKED = 0x4,CERT_TRUST_IS_NOT_SIGNATURE_VALID = 0x8,CERT_TRUST_IS_NOT_VALID_FOR_USAGE = 0x10,CERT_TRUST_IS_UNTRUSTED_ROOT = 0x20,CERT_TRUST_REVOCATION_STATUS_UNKNOWN = 0x40,CERT_TRUST_IS_CYCLIC = 0x80,CERT_TRUST_IS_PARTIAL_CHAIN = 0x10000,CERT_TRUST_CTL_IS_NOT_TIME_VALID = 0x20000,CERT_TRUST_CTL_IS_NOT_SIGNATURE_VALID = 0x40000,CERT_TRUST_CTL_IS_NOT_VALID_FOR_USAGE = 0x80000,CERT_TRUST_HAS_EXACT_MATCH_ISSUER = 0x1,CERT_TRUST_HAS_KEY_MATCH_ISSUER = 0x2,CERT_TRUST_HAS_NAME_MATCH_ISSUER = 0x4,CERT_TRUST_IS_SELF_SIGNED = 0x8,CERT_TRUST_IS_COMPLEX_CHAIN = 0x10000,};
enum MACRO_CERT_QUERY {CERT_QUERY_OBJECT_FILE = 0x1,CERT_QUERY_OBJECT_BLOB = 0x2,CERT_QUERY_CONTENT_CERT = 0x1,CERT_QUERY_CONTENT_CTL = 0x2,CERT_QUERY_CONTENT_CRL = 0x3,CERT_QUERY_CONTENT_SERIALIZED_STORE = 0x4,CERT_QUERY_CONTENT_SERIALIZED_CERT = 0x5,CERT_QUERY_CONTENT_SERIALIZED_CTL = 0x6,CERT_QUERY_CONTENT_SERIALIZED_CRL = 0x7,CERT_QUERY_CONTENT_PKCS7_SIGNED = 0x8,CERT_QUERY_CONTENT_PKCS7_UNSIGNED = 0x9,CERT_QUERY_CONTENT_PKCS7_SIGNED_EMBED = 0xA,CERT_QUERY_CONTENT_PKCS10 = 0xB,CERT_QUERY_CONTENT_PFX = 0xC,CERT_QUERY_CONTENT_FLAG_CERT = 0x2,CERT_QUERY_CONTENT_FLAG_CTL = 0x4,CERT_QUERY_CONTENT_FLAG_CRL = 0x8,CERT_QUERY_CONTENT_FLAG_SERIALIZED_STORE = 0x10,CERT_QUERY_CONTENT_FLAG_SERIALIZED_CERT = 0x20,CERT_QUERY_CONTENT_FLAG_SERIALIZED_CTL = 0x40,CERT_QUERY_CONTENT_FLAG_SERIALIZED_CRL = 0x80,CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED = 0x100,CERT_QUERY_CONTENT_FLAG_PKCS7_UNSIGNED = 0x200,CERT_QUERY_CONTENT_FLAG_PKCS7_SIGNED_EMBED = 0x400,CERT_QUERY_CONTENT_FLAG_PKCS10 = 0x800,CERT_QUERY_CONTENT_FLAG_PFX = 0x1000,CERT_QUERY_CONTENT_FLAG_ALL = 0x1FFE,CERT_QUERY_FORMAT_BINARY = 0x1,CERT_QUERY_FORMAT_BASE64_ENCODED = 0x2,CERT_QUERY_FORMAT_FLAG_BINARY = 0x2,CERT_QUERY_FORMAT_FLAG_BASE64_ENCODED = 0x4,CERT_QUERY_FORMAT_FLAG_ALL = 0x6,};
enum MACRO_CERT_STORE {CERT_STORE_ADD_NEW = 1,CERT_STORE_ADD_USE_EXISTING = 2,CERT_STORE_ADD_REPLACE_EXISTING = 3,CERT_STORE_ADD_ALWAYS = 4,CERT_STORE_ADD_REPLACE_EXISTING_INHERIT_PROPERTIES = 5,CERT_STORE_ADD_NEWER = 6,CERT_STORE_ADD_NEWER_INHERIT_PROPERTIES = 7,CERT_STORE_CERTIFICATE_CONTEXT = 1,CERT_STORE_CRL_CONTEXT = 2,CERT_STORE_CTL_CONTEXT = 3,CERT_STORE_ALL_CONTEXT_FLAG = -1,CERT_STORE_CERTIFICATE_CONTEXT_FLAG = 2,CERT_STORE_CRL_CONTEXT_FLAG = 4,CERT_STORE_CTL_CONTEXT_FLAG = 8,};
enum MACRO_CLIENTSITE {CLIENTSITE_E_FIRST = 0x80040190,CLIENTSITE_E_LAST = 0x8004019F,CLIENTSITE_S_FIRST = 0x40190,CLIENTSITE_S_LAST = 0x4019F,};
enum MACRO_CP_WINANSI {CP_WINANSI = 1004,CP_WINUNICODE = 1200,CP_WINNEUTRAL = 1004,};
enum MACRO_CREATE_FOR {CREATE_FOR_IMPORT = 1,CREATE_FOR_DIR = 2,};
enum MACRO_CREATE_NEW {CREATE_NEW_CONSOLE = 0x10,};
enum MACRO_CREDENTIAL {CREDENTIAL_OID_PASSWORD_CREDENTIALS_A = 1,CREDENTIAL_OID_PASSWORD_CREDENTIALS_W = 2,CREDENTIAL_OID_PASSWORD_CREDENTIALS = 1,};
enum MACRO_CRL_REASON {CRL_REASON_UNSPECIFIED = 0,CRL_REASON_KEY_COMPROMISE = 1,CRL_REASON_CA_COMPROMISE = 2,CRL_REASON_AFFILIATION_CHANGED = 3,CRL_REASON_SUPERSEDED = 4,CRL_REASON_CESSATION_OF_OPERATION = 5,CRL_REASON_CERTIFICATE_HOLD = 6,CRL_REASON_REMOVE_FROM_CRL = 8,CRL_DIST_POINT_NO_NAME = 0,CRL_DIST_POINT_FULL_NAME = 1,CRL_DIST_POINT_ISSUER_RDN_NAME = 2,CRL_REASON_UNUSED_FLAG = 128,CRL_REASON_KEY_COMPROMISE_FLAG = 64,CRL_REASON_CA_COMPROMISE_FLAG = 32,CRL_REASON_AFFILIATION_CHANGED_FLAG = 16,CRL_REASON_SUPERSEDED_FLAG = 8,CRL_REASON_CESSATION_OF_OPERATION_FLAG = 4,CRL_REASON_CERTIFICATE_HOLD_FLAG = 2,CRL_DIST_POINT_ERR_INDEX_MASK = 127,CRL_DIST_POINT_ERR_INDEX_SHIFT = 24,CRL_DIST_POINT_ERR_CRL_ISSUER_BIT = -2147483648,};
enum MACRO_CRYPT_MODE {CRYPT_MODE_CBC = 1,CRYPT_MODE_ECB = 2,CRYPT_MODE_OFB = 3,CRYPT_MODE_CFB = 4,CRYPT_MODE_CTS = 5,CRYPT_ENCRYPT = 1,CRYPT_DECRYPT = 2,CRYPT_EXPORT = 4,CRYPT_READ = 8,CRYPT_WRITE = 16,CRYPT_MAC = 32,CRYPT_EXPORT_KEY = 64,CRYPT_IMPORT_KEY = 128,};
enum MACRO_CRYPT_X942 {CRYPT_X942_COUNTER_BYTE_LENGTH = 4,CRYPT_X942_KEY_LENGTH_BYTE_LENGTH = 4,CRYPT_X942_PUB_INFO_BYTE_LENGTH = 64,CRYPT_RC2_40BIT_VERSION = 160,CRYPT_RC2_56BIT_VERSION = 52,CRYPT_RC2_64BIT_VERSION = 120,CRYPT_RC2_128BIT_VERSION = 58,};
enum MACRO_CS_VREDRAW {CS_VREDRAW = 0x1,CS_HREDRAW = 0x2,CS_DBLCLKS = 0x8,CS_OWNDC = 0x20,CS_CLASSDC = 0x40,CS_PARENTDC = 0x80,CS_NOCLOSE = 0x200,CS_SAVEBITS = 0x800,CS_BYTEALIGNCLIENT = 0x1000,CS_BYTEALIGNWINDOW = 0x2000,CS_GLOBALCLASS = 0x4000,CS_IME = 0x10000,};
enum MACRO_DEVICEDATA {DEVICEDATA = 19,};
enum MACRO_DIALOPTION {DIALOPTION_BILLING = 0x40,DIALOPTION_QUIET = 0x80,DIALOPTION_DIALTONE = 0x100,};
enum MACRO_DIFFERENCE {DIFFERENCE = 11,};
enum MACRO_DI_CHANNEL {DI_CHANNEL = 1,DI_READ_SPOOL_JOB = 3,DI_MEMORYMAP_WRITE = 1,};
enum MACRO_DMAXPOWTWO {DMAXPOWTWO = 0x3FF,};
enum MACRO_DROPEFFECT {DROPEFFECT_NONE = 0,DROPEFFECT_COPY = 1,DROPEFFECT_MOVE = 2,DROPEFFECT_LINK = 4,DROPEFFECT_SCROLL = -2147483648,};
enum MACRO_DRV_CANCEL {DRV_CANCEL = 0,DRV_OK = 1,DRV_RESTART = 2,DRV_MCI_FIRST = 2048,DRV_MCI_LAST = 6143,};
enum MACRO_ENCRYPTION {ENCRYPTION_FORMAT_DEFAULT = 0x1,};
enum MACRO_FILESYSTEM {FILESYSTEM_STATISTICS_TYPE_NTFS = 1,FILESYSTEM_STATISTICS_TYPE_FAT = 2,};
enum MACRO_FILE_BEGIN {FILE_BEGIN = 0,FILE_CURRENT = 1,FILE_END = 2,};
enum MACRO_FINDDLGORD {FINDDLGORD = 1540,};
enum MACRO_FLI_GLYPHS {FLI_GLYPHS = 0x40000,};
enum MACRO_FMAXPOWTWO {FMAXPOWTWO = 0x7F,};
enum MACRO_FONTDLGORD {FONTDLGORD = 1542,};
enum MACRO_FONTMAPPER {FONTMAPPER_MAX = 10,};
enum MACRO_FOREGROUND {FOREGROUND_BLUE = 0x1,FOREGROUND_GREEN = 0x2,FOREGROUND_RED = 0x4,FOREGROUND_INTENSITY = 0x8,};
enum MACRO_GDICOMMENT {GDICOMMENT_IDENTIFIER = 0x43494447,GDICOMMENT_WINDOWS_METAFILE = 0x80000001,GDICOMMENT_BEGINGROUP = 0x2,GDICOMMENT_ENDGROUP = 0x3,GDICOMMENT_MULTIFORMATS = 0x40000004,};
enum MACRO_HTTOPRIGHT {HTTOPRIGHT = 14,};
enum MACRO_IDCONTINUE {IDCONTINUE = 11,};
enum MACRO_IDTRYAGAIN {IDTRYAGAIN = 10,};
enum MACRO_ILLUMINANT {ILLUMINANT_DEVICE_DEFAULT = 0,ILLUMINANT_A = 1,ILLUMINANT_B = 2,ILLUMINANT_C = 3,ILLUMINANT_D50 = 4,ILLUMINANT_D55 = 5,ILLUMINANT_D65 = 6,ILLUMINANT_D75 = 7,ILLUMINANT_F2 = 8,ILLUMINANT_MAX_INDEX = 8,ILLUMINANT_TUNGSTEN = 1,ILLUMINANT_DAYLIGHT = 3,ILLUMINANT_FLUORESCENT = 8,ILLUMINANT_NTSC = 3,};
enum MACRO_IME_CONFIG {IME_CONFIG_GENERAL = 1,IME_CONFIG_REGISTERWORD = 2,IME_CONFIG_SELECTDICTIONARY = 3,IME_ESC_QUERY_SUPPORT = 3,IME_ESC_RESERVED_FIRST = 4,IME_ESC_RESERVED_LAST = 2047,IME_ESC_PRIVATE_FIRST = 2048,IME_ESC_PRIVATE_LAST = 4095,IME_ESC_SEQUENCE_TO_INTERNAL = 4097,IME_ESC_GET_EUDC_DICTIONARY = 4099,IME_ESC_SET_EUDC_DICTIONARY = 4100,IME_ESC_MAX_KEY = 4101,IME_ESC_IME_NAME = 4102,IME_ESC_SYNC_HOTKEY = 4103,IME_ESC_HANJA_MODE = 4104,IME_ESC_AUTOMATA = 4105,IME_ESC_PRIVATE_HOTKEY = 4106,IME_ESC_GETHELPFILENAME = 4107,IME_REGWORD_STYLE_EUDC = 1,IME_REGWORD_STYLE_USER_FIRST = -2147483648,IME_REGWORD_STYLE_USER_LAST = -1,};
enum MACRO_IOCTL_DISK {IOCTL_DISK_BASE = 7,IOCTL_DISK_GET_DRIVE_GEOMETRY = 458752,IOCTL_DISK_GET_PARTITION_INFO = 475140,IOCTL_DISK_SET_PARTITION_INFO = 507912,IOCTL_DISK_GET_DRIVE_LAYOUT = 475148,IOCTL_DISK_SET_DRIVE_LAYOUT = 507920,IOCTL_DISK_VERIFY = 458772,IOCTL_DISK_FORMAT_TRACKS = 507928,IOCTL_DISK_REASSIGN_BLOCKS = 507932,IOCTL_DISK_PERFORMANCE = 458784,IOCTL_DISK_IS_WRITABLE = 458788,IOCTL_DISK_LOGGING = 458792,IOCTL_DISK_FORMAT_TRACKS_EX = 507948,IOCTL_DISK_HISTOGRAM_STRUCTURE = 458800,IOCTL_DISK_HISTOGRAM_DATA = 458804,IOCTL_DISK_HISTOGRAM_RESET = 458808,IOCTL_DISK_REQUEST_STRUCTURE = 458812,IOCTL_DISK_REQUEST_DATA = 458816,IOCTL_DISK_CONTROLLER_NUMBER = 458820,};
enum MACRO_JOB_ACCESS {JOB_ACCESS_ADMINISTER = 0x10,};
enum MACRO_JOB_NOTIFY {JOB_NOTIFY_FIELD_PRINTER_NAME = 0x0,JOB_NOTIFY_FIELD_MACHINE_NAME = 0x1,JOB_NOTIFY_FIELD_PORT_NAME = 0x2,JOB_NOTIFY_FIELD_USER_NAME = 0x3,JOB_NOTIFY_FIELD_NOTIFY_NAME = 0x4,JOB_NOTIFY_FIELD_DATATYPE = 0x5,JOB_NOTIFY_FIELD_PRINT_PROCESSOR = 0x6,JOB_NOTIFY_FIELD_PARAMETERS = 0x7,JOB_NOTIFY_FIELD_DRIVER_NAME = 0x8,JOB_NOTIFY_FIELD_DEVMODE = 0x9,JOB_NOTIFY_FIELD_STATUS = 0xA,JOB_NOTIFY_FIELD_STATUS_STRING = 0xB,JOB_NOTIFY_FIELD_SECURITY_DESCRIPTOR = 0xC,JOB_NOTIFY_FIELD_DOCUMENT = 0xD,JOB_NOTIFY_FIELD_PRIORITY = 0xE,JOB_NOTIFY_FIELD_POSITION = 0xF,JOB_NOTIFY_FIELD_SUBMITTED = 0x10,JOB_NOTIFY_FIELD_START_TIME = 0x11,JOB_NOTIFY_FIELD_UNTIL_TIME = 0x12,JOB_NOTIFY_FIELD_TIME = 0x13,JOB_NOTIFY_FIELD_TOTAL_PAGES = 0x14,JOB_NOTIFY_FIELD_PAGES_PRINTED = 0x15,JOB_NOTIFY_FIELD_TOTAL_BYTES = 0x16,JOB_NOTIFY_FIELD_BYTES_PRINTED = 0x17,};
enum MACRO_JOB_OBJECT {JOB_OBJECT_TERMINATE_AT_END_OF_JOB = 0,JOB_OBJECT_POST_AT_END_OF_JOB = 1,JOB_OBJECT_MSG_END_OF_JOB_TIME = 1,JOB_OBJECT_MSG_END_OF_PROCESS_TIME = 2,JOB_OBJECT_MSG_ACTIVE_PROCESS_LIMIT = 3,JOB_OBJECT_MSG_ACTIVE_PROCESS_ZERO = 4,JOB_OBJECT_MSG_NEW_PROCESS = 6,JOB_OBJECT_MSG_EXIT_PROCESS = 7,JOB_OBJECT_MSG_ABNORMAL_EXIT_PROCESS = 8,JOB_OBJECT_MSG_PROCESS_MEMORY_LIMIT = 9,JOB_OBJECT_MSG_JOB_MEMORY_LIMIT = 10,JOB_OBJECT_LIMIT_WORKINGSET = 1,JOB_OBJECT_LIMIT_PROCESS_TIME = 2,JOB_OBJECT_LIMIT_JOB_TIME = 4,JOB_OBJECT_LIMIT_ACTIVE_PROCESS = 8,JOB_OBJECT_LIMIT_AFFINITY = 16,JOB_OBJECT_LIMIT_PRIORITY_CLASS = 32,JOB_OBJECT_LIMIT_PRESERVE_JOB_TIME = 64,JOB_OBJECT_LIMIT_SCHEDULING_CLASS = 128,JOB_OBJECT_LIMIT_PROCESS_MEMORY = 256,JOB_OBJECT_LIMIT_JOB_MEMORY = 512,JOB_OBJECT_LIMIT_DIE_ON_UNHANDLED_EXCEPTION = 1024,JOB_OBJECT_LIMIT_BREAKAWAY_OK = 2048,JOB_OBJECT_LIMIT_SILENT_BREAKAWAY_OK = 4096,JOB_OBJECT_LIMIT_RESERVED1 = 8192,JOB_OBJECT_LIMIT_RESERVED2 = 16384,JOB_OBJECT_LIMIT_RESERVED3 = 32768,JOB_OBJECT_LIMIT_RESERVED4 = 65536,JOB_OBJECT_LIMIT_RESERVED5 = 131072,JOB_OBJECT_LIMIT_RESERVED6 = 262144,JOB_OBJECT_LIMIT_VALID_FLAGS = 524287,JOB_OBJECT_BASIC_LIMIT_VALID_FLAGS = 255,JOB_OBJECT_EXTENDED_LIMIT_VALID_FLAGS = 8191,JOB_OBJECT_RESERVED_LIMIT_VALID_FLAGS = 524287,JOB_OBJECT_UILIMIT_NONE = 0,JOB_OBJECT_UILIMIT_HANDLES = 1,JOB_OBJECT_UILIMIT_READCLIPBOARD = 2,JOB_OBJECT_UILIMIT_WRITECLIPBOARD = 4,JOB_OBJECT_UILIMIT_SYSTEMPARAMETERS = 8,JOB_OBJECT_UILIMIT_DISPLAYSETTINGS = 16,JOB_OBJECT_UILIMIT_GLOBALATOMS = 32,JOB_OBJECT_UILIMIT_DESKTOP = 64,JOB_OBJECT_UILIMIT_EXITWINDOWS = 128,JOB_OBJECT_UILIMIT_ALL = 255,JOB_OBJECT_UI_VALID_FLAGS = 255,JOB_OBJECT_SECURITY_NO_ADMIN = 1,JOB_OBJECT_SECURITY_RESTRICTED_TOKEN = 2,JOB_OBJECT_SECURITY_ONLY_TOKEN = 4,JOB_OBJECT_SECURITY_FILTER_TOKENS = 8,JOB_OBJECT_SECURITY_VALID_FLAGS = 15,};
enum MACRO_KEY_LENGTH {KEY_LENGTH_MASK = 0xFFFF0000,};
enum MACRO_LOGPIXELSX {LOGPIXELSX = 88,};
enum MACRO_LOGPIXELSY {LOGPIXELSY = 90,};
enum MACRO_MARKPARITY {MARKPARITY = 3,SPACEPARITY = 4,};
enum MACRO_MAXINTATOM {MAXINTATOM = 0xC000,};
enum MACRO_MAX_VOLUME {MAX_VOLUME_ID_SIZE = 36,MAX_VOLUME_TEMPLATE_SIZE = 40,};
enum MACRO_MDMVOLFLAG {MDMVOLFLAG_LOW = 0x1,MDMVOLFLAG_MEDIUM = 0x2,MDMVOLFLAG_HIGH = 0x4,};
enum MACRO_MERGEPAINT {MERGEPAINT = 0xBB0226,};
enum MACRO_MIDIMAPPER {MIDIMAPPER = 4294967295,};
enum MACRO_MK_LBUTTON {MK_LBUTTON = 0x1,MK_RBUTTON = 0x2,MK_SHIFT = 0x4,MK_CONTROL = 0x8,MK_MBUTTON = 0x10,MK_XBUTTON1 = 0x20,MK_XBUTTON2 = 0x40,};
enum MACRO_NCBADDNAME {NCBADDNAME = 0x30,};
enum MACRO_NCBDELNAME {NCBDELNAME = 0x31,};
enum MACRO_NCBRECVANY {NCBRECVANY = 0x16,};
enum MACRO_NOTSRCCOPY {NOTSRCCOPY = 0x330008,};
enum MACRO_NUMMARKERS {NUMMARKERS = 20,};
enum MACRO_ONESTOPBIT {ONESTOPBIT = 0,ONE5STOPBITS = 1,TWOSTOPBITS = 2,};
enum MACRO_POSTSCRIPT {POSTSCRIPT_DATA = 37,POSTSCRIPT_IGNORE = 38,};
enum MACRO_PROPSETHDR {PROPSETHDR_OSVERSION_UNKNOWN = 0xFFFFFFFF,};
enum MACRO_PSPROTOCOL {PSPROTOCOL_ASCII = 0,PSPROTOCOL_BCP = 1,PSPROTOCOL_TBCP = 2,PSPROTOCOL_BINARY = 3,};
enum MACRO_RASTERCAPS {RASTERCAPS = 38,};
enum MACRO_RES_UNUSED {RES_UNUSED_1 = 0x1,RES_FLUSH_CACHE = 0x2,RES_SERVICE = 0x4,};
enum MACRO_REVOCATION {REVOCATION_OID_CRL_REVOCATION = 1,};
enum MACRO_RSA1024BIT {RSA1024BIT_KEY = 0x4000000,};
enum MACRO_RT_VERSION {RT_VERSION = 16,RT_DLGINCLUDE = 17,RT_PLUGPLAY = 19,RT_VXD = 20,RT_ANICURSOR = 21,RT_ANIICON = 22,RT_HTML = 23,};
enum MACRO_SCS_SETSTR {SCS_SETSTR = 9,SCS_CHANGEATTR = 18,SCS_CHANGECLAUSE = 36,SCS_SETRECONVERTSTRING = 65536,SCS_QUERYRECONVERTSTRING = 131072,};
enum MACRO_SC_MANAGER {SC_MANAGER_CONNECT = 0x1,SC_MANAGER_CREATE_SERVICE = 0x2,SC_MANAGER_ENUMERATE_SERVICE = 0x4,SC_MANAGER_LOCK = 0x8,SC_MANAGER_QUERY_LOCK_STATUS = 0x10,SC_MANAGER_MODIFY_BOOT_CONFIG = 0x20,SC_MANAGER_ALL_ACCESS = 0xF003F,};
enum MACRO_SERVER_ALL {SERVER_ALL_ACCESS = 983043,SERVER_READ = 131074,SERVER_WRITE = 131075,SERVER_EXECUTE = 131074,};
enum MACRO_SERVICE_NO {SERVICE_NO_CHANGE = 0xFFFFFFFF,SERVICE_ACTIVE = 0x1,SERVICE_INACTIVE = 0x2,SERVICE_STATE_ALL = 0x3,SERVICE_CONTROL_STOP = 0x1,SERVICE_CONTROL_PAUSE = 0x2,SERVICE_CONTROL_CONTINUE = 0x3,SERVICE_CONTROL_INTERROGATE = 0x4,SERVICE_CONTROL_SHUTDOWN = 0x5,SERVICE_CONTROL_PARAMCHANGE = 0x6,SERVICE_CONTROL_NETBINDADD = 0x7,SERVICE_CONTROL_NETBINDREMOVE = 0x8,SERVICE_CONTROL_NETBINDENABLE = 0x9,SERVICE_CONTROL_NETBINDDISABLE = 0xA,SERVICE_CONTROL_DEVICEEVENT = 0xB,SERVICE_CONTROL_HARDWAREPROFILECHANGE = 0xC,SERVICE_CONTROL_POWEREVENT = 0xD,SERVICE_STOPPED = 0x1,SERVICE_START_PENDING = 0x2,SERVICE_STOP_PENDING = 0x3,SERVICE_RUNNING = 0x4,SERVICE_CONTINUE_PENDING = 0x5,SERVICE_PAUSE_PENDING = 0x6,SERVICE_PAUSED = 0x7,SERVICE_ACCEPT_STOP = 0x1,SERVICE_ACCEPT_PAUSE_CONTINUE = 0x2,SERVICE_ACCEPT_SHUTDOWN = 0x4,SERVICE_ACCEPT_PARAMCHANGE = 0x8,SERVICE_ACCEPT_NETBINDCHANGE = 0x10,SERVICE_ACCEPT_HARDWAREPROFILECHANGE = 0x20,SERVICE_ACCEPT_POWEREVENT = 0x40,};
enum MACRO_SETCHARSET {SETCHARSET = 772,STRETCHBLT = 2048,};
enum MACRO_SETLINECAP {SETLINECAP = 21,};
enum MACRO_SIMPLEBLOB {SIMPLEBLOB = 0x1,PUBLICKEYBLOB = 0x6,};
enum MACRO_SIZENORMAL {SIZENORMAL = 0,SIZEICONIC = 1,SIZEFULLSCREEN = 2,};
enum MACRO_STGOPTIONS {STGOPTIONS_VERSION = 1,};
enum MACRO_STREAM_SET {STREAM_SET_ENCRYPTION = 0x3,STREAM_CLEAR_ENCRYPTION = 0x4,};
enum MACRO_TC_NONCONF {TC_NONCONF_BORROW = 0,TC_NONCONF_SHAPE = 1,TC_NONCONF_DISCARD = 2,TC_NONCONF_BORROW_PLUS = 3,};
enum MACRO_TIME_VALID {TIME_VALID_OID_GET_CTL = 1,TIME_VALID_OID_GET_CRL = 2,TIME_VALID_OID_GET_CRL_FROM_CERT = 3,TIME_VALID_OID_FLUSH_CTL = 1,TIME_VALID_OID_FLUSH_CRL = 2,TIME_VALID_OID_FLUSH_CRL_FROM_CERT = 3,};
enum MACRO_X509_MULTI {X509_MULTI_BYTE_UINT = 38,X509_DSS_PUBLICKEY = 38,X509_DSS_PARAMETERS = 39,X509_DSS_SIGNATURE = 40,};
enum MACRO__FREEENTRY {_FREEENTRY = 3,_USEDENTRY = 4,};
enum MACRO__HEAPEMPTY {_HEAPEMPTY = 1,_HEAPOK = 2,};
enum MACRO___REQUIRED {__REQUIRED_RPCNDR_H_VERSION__ = 475,};
typedef struct _976F82B52AD5D008419379398D47AE46 MARK_HANDLE_INFO;
typedef struct tagMCI_RECORD_PARMS MCI_RECORD_PARMS;
typedef struct tagMCI_STATUS_PARMS MCI_STATUS_PARMS;
typedef struct tagMDICREATESTRUCTA MDICREATESTRUCTA;
typedef struct tagMDICREATESTRUCTW MDICREATESTRUCTW;
typedef struct _46B8CD9DF897759D0306203A2121EA8B MENUITEMTEMPLATE;
typedef struct _MIDL_SERVER_INFO_ MIDL_SERVER_INFO;
typedef struct tagMINIMIZEDMETRICS MINIMIZEDMETRICS;
typedef struct tagNEWTEXTMETRICEXA NEWTEXTMETRICEXA;
typedef struct tagNEWTEXTMETRICEXW NEWTEXTMETRICEXW;
typedef struct tagNEWTEXTMETRICA *NPNEWTEXTMETRICA;
typedef struct tagNEWTEXTMETRICW *NPNEWTEXTMETRICW;
typedef struct tagOBJECTDESCRIPTOR OBJECTDESCRIPTOR;
typedef struct _OBJECT_TYPE_LIST OBJECT_TYPE_LIST;
typedef struct _9B80566C9ECE6A73A5F898405A50FFFF OPENCARDNAME_EXA;
typedef struct _A63D84EB732F4E602FF2E049D2D99B44 OPENCARDNAME_EXW;
typedef struct _OSVERSIONINFOEXA OSVERSIONINFOEXA;
typedef struct _OSVERSIONINFOEXW OSVERSIONINFOEXW;
typedef struct _CERT_CHAIN_PARA *PCERT_CHAIN_PARA;
typedef struct _CERT_EXTENSIONS *PCERT_EXTENSIONS;
typedef struct _CERT_NAME_VALUE *PCERT_NAME_VALUE;
typedef struct _CERT_OTHER_NAME *PCERT_OTHER_NAME;
typedef struct _CHANGER_ELEMENT *PCHANGER_ELEMENT;
typedef struct _CMS_DH_KEY_INFO *PCMS_DH_KEY_INFO;
typedef struct tagCOLORADJUSTMENT *PCOLORADJUSTMENT;
typedef struct tagCOMPOSITIONFORM *PCOMPOSITIONFORM;
typedef struct _CRYPT_ATTRIBUTE *PCRYPT_ATTRIBUTE;
typedef struct _CRYPTOAPI_BLOB *PCRYPT_ATTR_BLOB;
typedef struct _CRYPTOAPI_BLOB *PCRYPT_DATA_BLOB;
typedef struct _CRYPTOAPI_BLOB *PCRYPT_HASH_BLOB;
typedef struct _CRYPT_HASH_INFO *PCRYPT_HASH_INFO;
typedef struct _CRYPTOAPI_BLOB *PCRYPT_UINT_BLOB;
typedef struct _CRYPT_URL_ARRAY *PCRYPT_URL_ARRAY;
typedef struct _CTL_USAGE_MATCH *PCTL_USAGE_MATCH;
typedef struct _DISPLAY_DEVICEA *PDISPLAY_DEVICEA;
typedef struct _DISPLAY_DEVICEW *PDISPLAY_DEVICEW;
typedef struct DRVCONFIGINFOEX *PDRVCONFIGINFOEX;
typedef struct tagEMRSELECTOBJECT *PEMRDELETEOBJECT;
typedef struct tagEMREXTCREATEPEN *PEMREXTCREATEPEN;
typedef struct tagEMREXTFLOODFILL *PEMREXTFLOODFILL;
typedef struct tagEMRGRADIENTFILL *PEMRGRADIENTFILL;
typedef struct tagEMRPOLYLINE16 *PEMRPOLYBEZIER16;
typedef struct tagEMRPOLYLINE *PEMRPOLYBEZIERTO;
typedef struct tagEMRPOLYLINE16 *PEMRPOLYLINETO16;
typedef struct tagEMRPOLYPOLYLINE *PEMRPOLYPOLYLINE;
typedef struct tagEMRPOLYTEXTOUTA *PEMRPOLYTEXTOUTA;
typedef struct tagEMRPOLYTEXTOUTA *PEMRPOLYTEXTOUTW;
typedef struct tagEMRSELECTOBJECT *PEMRSELECTOBJECT;
typedef struct tagEMRSELECTCLIPPATH *PEMRSETTEXTALIGN;
typedef struct tagEMRSETTEXTCOLOR *PEMRSETTEXTCOLOR;
typedef struct tagENUMTEXTMETRICA *PENUMTEXTMETRICA;
typedef struct tagENUMTEXTMETRICW *PENUMTEXTMETRICW;
typedef struct _PERF_OBJECT_TYPE PERF_OBJECT_TYPE;
typedef struct _GET_MEDIA_TYPES *PGET_MEDIA_TYPES;
typedef struct tagIMECHARPOSITION *PIMECHARPOSITION;
typedef struct tagKBDLLHOOKSTRUCT *PKBDLLHOOKSTRUCT;
typedef struct tagLOCALESIGNATURE *PLOCALESIGNATURE;
typedef struct tagMCI_BREAK_PARMS *PMCI_BREAK_PARMS;
typedef struct tagMCI_LOAD_PARMSA *PMCI_LOAD_PARMSA;
typedef struct tagMCI_LOAD_PARMSW *PMCI_LOAD_PARMSW;
typedef struct tagMCI_OPEN_PARMSA *PMCI_OPEN_PARMSA;
typedef struct tagMCI_OPEN_PARMSW *PMCI_OPEN_PARMSW;
typedef struct tagMCI_SAVE_PARMSA *PMCI_SAVE_PARMSA;
typedef struct tagMCI_SAVE_PARMSW *PMCI_SAVE_PARMSW;
typedef struct _MONITOR_INFO_1A *PMONITOR_INFO_1A;
typedef struct _MONITOR_INFO_1W *PMONITOR_INFO_1W;
typedef struct _MONITOR_INFO_2A *PMONITOR_INFO_2A;
typedef struct _MONITOR_INFO_2W *PMONITOR_INFO_2W;
typedef struct tagMOUSEHOOKSTRUCT *PMOUSEHOOKSTRUCT;
typedef struct _NOTIFYICONDATAA *PNOTIFYICONDATAA;
typedef struct _NOTIFYICONDATAW *PNOTIFYICONDATAW;
typedef struct _NTFS_STATISTICS *PNTFS_STATISTICS;
typedef struct _PACKEDEVENTINFO *PPACKEDEVENTINFO;
typedef struct _PATHNAME_BUFFER *PPATHNAME_BUFFER;
typedef struct _PERF_DATA_BLOCK *PPERF_DATA_BLOCK;
typedef struct _PRINTER_INFO_1A *PPRINTER_INFO_1A;
typedef struct _PRINTER_INFO_1W *PPRINTER_INFO_1W;
typedef struct _PRINTER_INFO_2A *PPRINTER_INFO_2A;
typedef struct _PRINTER_INFO_2W *PPRINTER_INFO_2W;
typedef struct _PRINTER_INFO_4A *PPRINTER_INFO_4A;
typedef struct _PRINTER_INFO_4W *PPRINTER_INFO_4W;
typedef struct _PRINTER_INFO_5A *PPRINTER_INFO_5A;
typedef struct _PRINTER_INFO_5W *PPRINTER_INFO_5W;
typedef struct _PRINTER_INFO_7A *PPRINTER_INFO_7A;
typedef struct _PRINTER_INFO_7W *PPRINTER_INFO_7W;
typedef struct _PRINTER_INFO_8A *PPRINTER_INFO_8A;
typedef struct _PRINTER_INFO_8W *PPRINTER_INFO_8W;
typedef struct _PRINTER_INFO_9A *PPRINTER_INFO_9A;
typedef struct _PRINTER_INFO_9W *PPRINTER_INFO_9W;
typedef struct _REASSIGN_BLOCKS *PREASSIGN_BLOCKS;
typedef struct tagRECONVERTSTRING *PRECONVERTSTRING;
typedef struct _PROPSHEETHEADERA PROPSHEETHEADERA;
typedef struct _PROPSHEETHEADERW PROPSHEETHEADERW;
typedef struct _PROVIDOR_INFO_1A PROVIDOR_INFO_1A;
typedef struct _PROVIDOR_INFO_1W PROVIDOR_INFO_1W;
typedef struct _PROVIDOR_INFO_2A PROVIDOR_INFO_2A;
typedef struct _PROVIDOR_INFO_2W PROVIDOR_INFO_2W;
typedef struct _PROV_ENUMALGS_EX PROV_ENUMALGS_EX;
typedef struct _RPC_ASYNC_STATE *PRPC_ASYNC_STATE;
typedef struct _SENDCMDINPARAMS *PSENDCMDINPARAMS;
typedef struct _PSFEATURE_OUTPUT PSFEATURE_OUTPUT;
typedef struct _TAPE_STATISTICS *PTAPE_STATISTICS;
typedef struct tagUSEROBJECTFLAGS *PUSEROBJECTFLAGS;
typedef struct _VIDEOPARAMETERS *PVIDEOPARAMETERS;
typedef struct _VTableProvStruc *PVTableProvStruc;
typedef struct _WSANSClassInfoA *PWSANSCLASSINFOA;
typedef struct _WSANSClassInfoW *PWSANSCLASSINFOW;
typedef struct _QOS_SHAPING_RATE QOS_SHAPING_RATE;
typedef void *RPC_AUTHZ_HANDLE;
typedef struct _3EC5757393EE7828D79CED73ACE876F0 RPC_IF_ID_VECTOR;
typedef struct _RPC_SECURITY_QOS RPC_SECURITY_QOS;
typedef struct _AD47B7B6770F26FF00FF8EF46A9765CE RPC_STATS_VECTOR;
typedef struct tagRemHMETAFILEPICT RemHMETAFILEPICT;
typedef struct _wireSAFEARR_DISPATCH SAFEARR_DISPATCH;
typedef struct _SCARD_IO_REQUEST SCARD_IO_REQUEST;
typedef struct _6D2254E53597AC8CE26BF57895A6DFF7 SCARD_T0_COMMAND;
typedef struct _D26D25374C75FEF3AD181CCFA77BD37F SCARD_T0_REQUEST;
typedef struct _8B9777916333A4B8A3A60FA8F93F002E SCARD_T1_REQUEST;
typedef struct _SENDCMDOUTPARAMS SENDCMDOUTPARAMS;
typedef struct _SYSTEM_ALARM_ACE SYSTEM_ALARM_ACE;
typedef struct _SYSTEM_AUDIT_ACE SYSTEM_AUDIT_ACE;
typedef struct _TAPE_WRITE_MARKS TAPE_WRITE_MARKS;
typedef struct _TOKEN_PRIVILEGES TOKEN_PRIVILEGES;
typedef struct _TOKEN_STATISTICS TOKEN_STATISTICS;
typedef struct _8363E2736332812C7A22E557719FD114 USN_JOURNAL_DATA;
typedef struct tagVS_FIXEDFILEINFO VS_FIXEDFILEINFO;
typedef struct _WIN32_FIND_DATAA WIN32_FIND_DATAA;
typedef struct _WIN32_FIND_DATAW WIN32_FIND_DATAW;
typedef struct _WSANETWORKEVENTS WSANETWORKEVENTS;
typedef struct _WSAPROTOCOLCHAIN WSAPROTOCOLCHAIN;
enum _RPC_ASYNC_EVENT {RpcCallComplete = 0x0,RpcSendComplete = 0x1,RpcReceiveComplete = 0x2,};
enum tagOLEGETMONIKER {OLEGETMONIKER_ONLYIFTHERE = 0x1,OLEGETMONIKER_FORCEASSIGN = 0x2,OLEGETMONIKER_UNASSIGN = 0x3,OLEGETMONIKER_TEMPFORUSER = 0x4,};
enum tagOLEVERBATTRIB {OLEVERBATTRIB_NEVERDIRTIES = 0x1,OLEVERBATTRIB_ONCONTAINERMENU = 0x2,};
enum tagUSERCLASSTYPE {USERCLASSTYPE_FULL = 0x1,USERCLASSTYPE_SHORT = 0x2,USERCLASSTYPE_APPNAME = 0x3,};
typedef struct _userHENHMETAFILE userHENHMETAFILE;
typedef struct _CERT_CHAIN_PARA CERT_CHAIN_PARA;
typedef struct _CERT_EXTENSIONS CERT_EXTENSIONS;
typedef struct _CERT_NAME_VALUE CERT_NAME_VALUE;
typedef struct _CERT_OTHER_NAME CERT_OTHER_NAME;
typedef struct _CHANGER_ELEMENT CHANGER_ELEMENT;
typedef struct _CMS_DH_KEY_INFO CMS_DH_KEY_INFO;
typedef struct tagCOLORADJUSTMENT COLORADJUSTMENT;
typedef struct tagCOMPOSITIONFORM COMPOSITIONFORM;
typedef struct _CRYPT_ATTRIBUTE CRYPT_ATTRIBUTE;
typedef struct _CRYPTOAPI_BLOB CRYPT_ATTR_BLOB;
typedef struct _CRYPTOAPI_BLOB CRYPT_DATA_BLOB;
typedef struct _CRYPTOAPI_BLOB CRYPT_HASH_BLOB;
typedef struct _CRYPT_HASH_INFO CRYPT_HASH_INFO;
typedef struct _CRYPTOAPI_BLOB CRYPT_UINT_BLOB;
typedef struct _CRYPT_URL_ARRAY CRYPT_URL_ARRAY;
typedef struct _CTL_USAGE_MATCH CTL_USAGE_MATCH;
typedef struct _DISPLAY_DEVICEA DISPLAY_DEVICEA;
typedef struct _DISPLAY_DEVICEW DISPLAY_DEVICEW;
typedef struct _947C6FA139885FA2B0DE7F2A3FDD942C DLGITEMTEMPLATE;
typedef struct _PRIVKEYVER3 DSSPRIVKEY_VER3;
typedef struct tagEMRSELECTOBJECT EMRDELETEOBJECT;
typedef struct tagEMREXTCREATEPEN EMREXTCREATEPEN;
typedef struct tagEMREXTFLOODFILL EMREXTFLOODFILL;
typedef struct tagEMRGRADIENTFILL EMRGRADIENTFILL;
typedef struct tagEMRPOLYLINE16 EMRPOLYBEZIER16;
typedef struct tagEMRPOLYLINE EMRPOLYBEZIERTO;
typedef struct tagEMRPOLYLINE16 EMRPOLYLINETO16;
typedef struct tagEMRPOLYPOLYLINE EMRPOLYPOLYLINE;
typedef struct tagEMRPOLYTEXTOUTA EMRPOLYTEXTOUTA;
typedef struct tagEMRPOLYTEXTOUTA EMRPOLYTEXTOUTW;
typedef struct tagEMRSELECTOBJECT EMRSELECTOBJECT;
typedef struct tagEMRSELECTCLIPPATH EMRSETTEXTALIGN;
typedef struct tagEMRSETTEXTCOLOR EMRSETTEXTCOLOR;
typedef struct tagENUMTEXTMETRICA ENUMTEXTMETRICA;
typedef struct tagENUMTEXTMETRICW ENUMTEXTMETRICW;
typedef struct _GENERIC_MAPPING GENERIC_MAPPING;
typedef struct _GET_MEDIA_TYPES GET_MEDIA_TYPES;
struct HWINEVENTHOOK__ {int unused;};
struct IClassActivator {struct IClassActivatorVtbl *lpVtbl;};
struct IClientSecurity {struct IClientSecurityVtbl *lpVtbl;};
struct ICreateTypeInfo {struct ICreateTypeInfoVtbl *lpVtbl;};
struct ICreateTypeLib2 {struct ICreateTypeLib2Vtbl *lpVtbl;};
typedef struct tagIMECHARPOSITION IMECHARPOSITION;
struct IOleInPlaceSite {struct IOleInPlaceSiteVtbl *lpVtbl;};
struct IPersistMoniker {struct IPersistMonikerVtbl *lpVtbl;};
struct IPersistStorage {struct IPersistStorageVtbl *lpVtbl;};
struct IProgressNotify {struct IProgressNotifyVtbl *lpVtbl;};
struct IRpcProxyBuffer {struct IRpcProxyBufferVtbl *lpVtbl;};
struct IRunnableObject {struct IRunnableObjectVtbl *lpVtbl;};
struct IServerSecurity {struct IServerSecurityVtbl *lpVtbl;};
struct IStdMarshalInfo {struct IStdMarshalInfoVtbl *lpVtbl;};
struct IXMLDOMDocument {struct IXMLDOMDocumentVtbl *lpVtbl;};
struct IXMLDOMNodeList {struct IXMLDOMNodeListVtbl *lpVtbl;};
struct IXMLDOMNotation {struct IXMLDOMNotationVtbl *lpVtbl;};
struct IXMLHttpRequest {struct IXMLHttpRequestVtbl *lpVtbl;};
typedef struct tagKBDLLHOOKSTRUCT KBDLLHOOKSTRUCT;
typedef struct tagLOCALESIGNATURE LOCALESIGNATURE;
typedef struct tagACCESSTIMEOUT *LPACCESSTIMEOUT;
typedef struct tagANIMATIONINFO *LPANIMATIONINFO;
typedef struct tagCANDIDATEFORM *LPCANDIDATEFORM;
typedef struct tagCANDIDATELIST *LPCANDIDATELIST;
typedef struct tagCREATESTRUCTA *LPCREATESTRUCTA;
typedef struct tagCREATESTRUCTW *LPCREATESTRUCTW;
typedef ICreateTypeLib *LPCREATETYPELIB;
typedef struct tagDEBUGHOOKINFO *LPDEBUGHOOKINFO;
typedef struct tagDRVCONFIGINFO *LPDRVCONFIGINFO;
typedef struct tagENHMETAHEADER *LPENHMETAHEADER;
typedef struct tagENHMETARECORD *LPENHMETARECORD;
typedef IEnumFORMATETC *LPENUMFORMATETC;
typedef struct tagFONTSIGNATURE *LPFONTSIGNATURE;
typedef struct _GRADIENT_RECT *LPGRADIENT_RECT;
typedef struct tagGUITHREADINFO *LPGUITHREADINFO;
typedef struct tagHARDWAREINPUT *LPHARDWAREINPUT;
typedef struct tagHIGHCONTRASTA *LPHIGHCONTRASTA;
typedef struct tagHIGHCONTRASTW *LPHIGHCONTRASTW;
typedef IHttpNegotiate *LPHTTPNEGOTIATE;
typedef struct tagINTERFACEDATA *LPINTERFACEDATA;
typedef struct tagINTERFACEINFO *LPINTERFACEINFO;
typedef struct tagMCI_SET_PARMS *LPMCI_SET_PARMS;
typedef struct tagMENUITEMINFOA *LPMENUITEMINFOA;
typedef struct tagMENUITEMINFOW *LPMENUITEMINFOW;
typedef IMessageFilter *LPMESSAGEFILTER;
typedef struct midiproptempo_tag *LPMIDIPROPTEMPO;
typedef struct tagMIXERCONTROLA *LPMIXERCONTROLA;
typedef struct tagMIXERCONTROLW *LPMIXERCONTROLW;
typedef struct _MODEMSETTINGS *LPMODEMSETTINGS;
typedef struct tagMSGBOXPARAMSA *LPMSGBOXPARAMSA;
typedef struct tagMSGBOXPARAMSW *LPMSGBOXPARAMSW;
typedef struct tagMULTIKEYHELPA *LPMULTIKEYHELPA;
typedef struct tagMULTIKEYHELPW *LPMULTIKEYHELPW;
typedef struct _NETINFOSTRUCT *LPNETINFOSTRUCT;
typedef IOleClientSite *LPOLECLIENTSITE;
typedef struct _FC03820C0C9B455049C143518E71A23B *LPOPENCARDNAMEA;
typedef struct _1FC20381981E06D3B4F68D6006129906 *LPOPENCARDNAMEW;
typedef struct tagOFNA *LPOPENFILENAMEA;
typedef struct tagOFNW *LPOPENFILENAMEW;
typedef struct tagPSDA *LPPAGESETUPDLGA;
typedef struct tagPSDW *LPPAGESETUPDLGW;
typedef struct pcmwaveformat_tag *LPPCMWAVEFORMAT;
typedef IPersistStream *LPPERSISTSTREAM;
typedef struct tagREGISTERWORDA *LPREGISTERWORDA;
typedef struct tagREGISTERWORDW *LPREGISTERWORDW;
typedef struct tagSCROLLBARINFO *LPSCROLLBARINFO;
typedef struct _SHQUERYRBINFO *LPSHQUERYRBINFO;
typedef struct _WSAOVERLAPPED *LPWSAOVERLAPPED;
enum MACRO_ALTERNATE {ALTERNATE = 1,WINDING = 2,};
enum MACRO_BIGENDIAN {BIGENDIAN = 0x0,LITTLEENDIAN = 0x1,};
enum MACRO_BITSPIXEL {BITSPIXEL = 12,};
enum MACRO_BLACKNESS {BLACKNESS = 0x42,};
enum MACRO_BROADCAST {BROADCAST_QUERY_DENY = 0x424D5144,};
enum MACRO_CBR_BLOCK {CBR_BLOCK = 0xFFFFFFFF,};
enum MACRO_CB_MSGMAX {CB_MSGMAX = 0x162,};
enum MACRO_CCHILDREN {CCHILDREN_TITLEBAR = 5,CCHILDREN_SCROLLBAR = 5,};
enum MACRO_CFSEPCHAR {CFSEPCHAR = 43,};
enum MACRO_CF_ACCEPT {CF_ACCEPT = 0x0,CF_REJECT = 0x1,CF_DEFER = 0x2,};
enum MACRO_CONTEXT_E {CONTEXT_E_FIRST = 0x8004E000,CONTEXT_E_LAST = 0x8004E02F,CONTEXT_S_FIRST = 0x4E000,CONTEXT_S_LAST = 0x4E02F,};
enum MACRO_CONVERT10 {CONVERT10_E_FIRST = 0x800401C0,CONVERT10_E_LAST = 0x800401CF,CONVERT10_S_FIRST = 0x401C0,CONVERT10_S_LAST = 0x401CF,};
enum MACRO_CRYPT_ASN {CRYPT_ASN_ENCODING = 0x1,CRYPT_NDR_ENCODING = 0x2,};
enum MACRO_CS_ENABLE {CS_ENABLE = 0x1,CS_DISABLE = 0x2,CS_DELETE_TRANSFORM = 0x3,};
enum MACRO_CURVECAPS {CURVECAPS = 28,};
enum MACRO_DC_ACTIVE {DC_ACTIVE = 0x1,DC_SMALLCAP = 0x2,DC_ICON = 0x4,DC_TEXT = 0x8,DC_INBUTTON = 0x10,DC_GRADIENT = 0x20,};
enum MACRO_DMCOLLATE {DMCOLLATE_FALSE = 0,DMCOLLATE_TRUE = 1,};
enum MACRO_DRAFTMODE {DRAFTMODE = 7,QUERYESCSUPPORT = 8,};
enum MACRO_DSTINVERT {DSTINVERT = 0x550009,};
enum MACRO_DUPLICATE {DUPLICATE_CLOSE_SOURCE = 0x1,DUPLICATE_SAME_ACCESS = 0x2,};
enum MACRO_EVENT_MIN {EVENT_MIN = 0x1,EVENT_MAX = 0x7FFFFFFF,EVENT_SYSTEM_SOUND = 0x1,EVENT_SYSTEM_ALERT = 0x2,EVENT_SYSTEM_FOREGROUND = 0x3,EVENT_SYSTEM_MENUSTART = 0x4,EVENT_SYSTEM_MENUEND = 0x5,EVENT_SYSTEM_MENUPOPUPSTART = 0x6,EVENT_SYSTEM_MENUPOPUPEND = 0x7,EVENT_SYSTEM_CAPTURESTART = 0x8,EVENT_SYSTEM_CAPTUREEND = 0x9,EVENT_SYSTEM_MOVESIZESTART = 0xA,EVENT_SYSTEM_MOVESIZEEND = 0xB,EVENT_SYSTEM_CONTEXTHELPSTART = 0xC,EVENT_SYSTEM_CONTEXTHELPEND = 0xD,EVENT_SYSTEM_DRAGDROPSTART = 0xE,EVENT_SYSTEM_DRAGDROPEND = 0xF,EVENT_SYSTEM_DIALOGSTART = 0x10,EVENT_SYSTEM_DIALOGEND = 0x11,EVENT_SYSTEM_SCROLLINGSTART = 0x12,EVENT_SYSTEM_SCROLLINGEND = 0x13,EVENT_SYSTEM_SWITCHSTART = 0x14,EVENT_SYSTEM_SWITCHEND = 0x15,EVENT_SYSTEM_MINIMIZESTART = 0x16,EVENT_SYSTEM_MINIMIZEEND = 0x17,EVENT_OBJECT_CREATE = 0x8000,EVENT_OBJECT_DESTROY = 0x8001,EVENT_OBJECT_SHOW = 0x8002,EVENT_OBJECT_HIDE = 0x8003,EVENT_OBJECT_REORDER = 0x8004,EVENT_OBJECT_FOCUS = 0x8005,EVENT_OBJECT_SELECTION = 0x8006,EVENT_OBJECT_SELECTIONADD = 0x8007,EVENT_OBJECT_SELECTIONREMOVE = 0x8008,EVENT_OBJECT_SELECTIONWITHIN = 0x8009,EVENT_OBJECT_STATECHANGE = 0x800A,EVENT_OBJECT_LOCATIONCHANGE = 0x800B,EVENT_OBJECT_NAMECHANGE = 0x800C,EVENT_OBJECT_DESCRIPTIONCHANGE = 0x800D,EVENT_OBJECT_VALUECHANGE = 0x800E,EVENT_OBJECT_PARENTCHANGE = 0x800F,EVENT_OBJECT_HELPCHANGE = 0x8010,EVENT_OBJECT_DEFACTIONCHANGE = 0x8011,EVENT_OBJECT_ACCELERATORCHANGE = 0x8012,};
enum MACRO_EXCEPTION {EXCEPTION_CONTINUABLE = 0,EXCEPTION_NONCONTINUABLE = 1,EXCEPTION_MAXIMUM_PARAMETERS = 15,EXCEPTION_EXECUTE_HANDLER = 1,EXCEPTION_CONTINUE_SEARCH = 0,EXCEPTION_CONTINUE_EXECUTION = -1,};
enum MACRO_FILE_CASE {FILE_CASE_SENSITIVE_SEARCH = 0x1,FILE_CASE_PRESERVED_NAMES = 0x2,FILE_UNICODE_ON_DISK = 0x4,FILE_PERSISTENT_ACLS = 0x8,FILE_FILE_COMPRESSION = 0x10,FILE_VOLUME_QUOTAS = 0x20,FILE_SUPPORTS_SPARSE_FILES = 0x40,FILE_SUPPORTS_REPARSE_POINTS = 0x80,FILE_SUPPORTS_REMOTE_STORAGE = 0x100,FILE_VOLUME_IS_COMPRESSED = 0x8000,FILE_SUPPORTS_OBJECT_IDS = 0x10000,FILE_SUPPORTS_ENCRYPTION = 0x20000,FILE_NAMED_STREAMS = 0x40000,};
enum MACRO_FILE_FLAG {FILE_FLAG_WRITE_THROUGH = 0x80000000,FILE_FLAG_OVERLAPPED = 0x40000000,FILE_FLAG_NO_BUFFERING = 0x20000000,FILE_FLAG_RANDOM_ACCESS = 0x10000000,FILE_FLAG_SEQUENTIAL_SCAN = 0x8000000,FILE_FLAG_DELETE_ON_CLOSE = 0x4000000,FILE_FLAG_BACKUP_SEMANTICS = 0x2000000,FILE_FLAG_POSIX_SEMANTICS = 0x1000000,FILE_FLAG_OPEN_REPARSE_POINT = 0x200000,FILE_FLAG_OPEN_NO_RECALL = 0x100000,};
enum MACRO_FILE_TYPE {FILE_TYPE_UNKNOWN = 0x0,FILE_TYPE_DISK = 0x1,FILE_TYPE_CHAR = 0x2,FILE_TYPE_PIPE = 0x3,FILE_TYPE_REMOTE = 0x8000,};
enum MACRO_FS_LATIN1 {FS_LATIN1 = 0x1,FS_LATIN2 = 0x2,FS_CYRILLIC = 0x4,FS_GREEK = 0x8,FS_TURKISH = 0x10,FS_HEBREW = 0x20,FS_ARABIC = 0x40,FS_BALTIC = 0x80,FS_VIETNAMESE = 0x100,FS_THAI = 0x10000,FS_JISJAPAN = 0x20000,FS_CHINESESIMP = 0x40000,FS_WANSUNG = 0x80000,FS_CHINESETRAD = 0x100000,FS_JOHAB = 0x200000,FS_SYMBOL = 0x80000000,};
enum MACRO_HIDDENBIT {HIDDENBIT = 1,};
enum MACRO_HINSTANCE {HINSTANCE_ERROR = 32,};
enum MACRO_HTHSCROLL {HTHSCROLL = 6,};
enum MACRO_HTNOWHERE {HTNOWHERE = 0,HTCLIENT = 1,HTCAPTION = 2,};
enum MACRO_HTSYSMENU {HTSYSMENU = 3,HTGROWBOX = 4,};
enum MACRO_HTTOPLEFT {HTTOPLEFT = 13,};
enum MACRO_HTVSCROLL {HTVSCROLL = 7,HTMINBUTTON = 8,};
enum MACRO_IME_CMODE {IME_CMODE_ALPHANUMERIC = 0x0,IME_CMODE_NATIVE = 0x1,IME_CMODE_CHINESE = 0x1,IME_CMODE_HANGEUL = 0x1,IME_CMODE_HANGUL = 0x1,IME_CMODE_JAPANESE = 0x1,IME_CMODE_KATAKANA = 0x2,IME_CMODE_LANGUAGE = 0x3,IME_CMODE_FULLSHAPE = 0x8,IME_CMODE_ROMAN = 0x10,IME_CMODE_CHARCODE = 0x20,IME_CMODE_HANJACONVERT = 0x40,IME_CMODE_SOFTKBD = 0x80,IME_CMODE_NOCONVERSION = 0x100,IME_CMODE_EUDC = 0x200,IME_CMODE_SYMBOL = 0x400,IME_CMODE_FIXED = 0x800,IME_SMODE_NONE = 0x0,IME_SMODE_PLAURALCLAUSE = 0x1,IME_SMODE_SINGLECONVERT = 0x2,IME_SMODE_AUTOMATIC = 0x4,IME_SMODE_PHRASEPREDICT = 0x8,IME_SMODE_CONVERSATION = 0x10,IME_CAND_UNKNOWN = 0x0,IME_CAND_READ = 0x1,IME_CAND_CODE = 0x2,IME_CAND_MEANING = 0x3,IME_CAND_RADICAL = 0x4,IME_CAND_STROKE = 0x5,};
enum MACRO_KEYEVENTF {KEYEVENTF_EXTENDEDKEY = 0x1,KEYEVENTF_KEYUP = 0x2,KEYEVENTF_UNICODE = 0x4,KEYEVENTF_SCANCODE = 0x8,};
enum MACRO_KEY_EVENT {KEY_EVENT = 0x1,MOUSE_EVENT = 0x2,WINDOW_BUFFER_SIZE_EVENT = 0x4,MENU_EVENT = 0x8,FOCUS_EVENT = 0x10,};
enum MACRO_LB_MSGMAX {LB_MSGMAX = 0x1B0,};
enum MACRO_MAXUIDLEN {MAXUIDLEN = 64,};
enum MACRO_MCI_FIRST {MCI_FIRST = 2048,MCI_OPEN = 2051,MCI_CLOSE = 2052,MCI_ESCAPE = 2053,MCI_PLAY = 2054,MCI_SEEK = 2055,MCI_STOP = 2056,MCI_PAUSE = 2057,MCI_INFO = 2058,MCI_GETDEVCAPS = 2059,MCI_SPIN = 2060,MCI_SET = 2061,MCI_STEP = 2062,MCI_RECORD = 2063,MCI_SYSINFO = 2064,MCI_BREAK = 2065,MCI_SAVE = 2067,MCI_STATUS = 2068,MCI_CUE = 2096,MCI_REALIZE = 2112,MCI_WINDOW = 2113,MCI_PUT = 2114,MCI_WHERE = 2115,MCI_FREEZE = 2116,MCI_UNFREEZE = 2117,MCI_LOAD = 2128,MCI_CUT = 2129,MCI_COPY = 2130,MCI_PASTE = 2131,MCI_UPDATE = 2132,MCI_RESUME = 2133,MCI_DELETE = 2134,MCI_USER_MESSAGES = 3072,MCI_LAST = 4095,MCI_ALL_DEVICE_ID = 4294967295,MCI_DEVTYPE_VCR = 513,MCI_DEVTYPE_VIDEODISC = 514,MCI_DEVTYPE_OVERLAY = 515,MCI_DEVTYPE_CD_AUDIO = 516,MCI_DEVTYPE_DAT = 517,MCI_DEVTYPE_SCANNER = 518,MCI_DEVTYPE_ANIMATION = 519,MCI_DEVTYPE_DIGITAL_VIDEO = 520,MCI_DEVTYPE_OTHER = 521,MCI_DEVTYPE_WAVEFORM_AUDIO = 522,MCI_DEVTYPE_SEQUENCER = 523,MCI_DEVTYPE_FIRST = 513,MCI_DEVTYPE_LAST = 523,MCI_DEVTYPE_FIRST_USER = 4096,MCI_MODE_NOT_READY = 524,MCI_MODE_STOP = 525,MCI_MODE_PLAY = 526,MCI_MODE_RECORD = 527,MCI_MODE_SEEK = 528,MCI_MODE_PAUSE = 529,MCI_MODE_OPEN = 530,MCI_FORMAT_MILLISECONDS = 0,MCI_FORMAT_HMS = 1,MCI_FORMAT_MSF = 2,MCI_FORMAT_FRAMES = 3,MCI_FORMAT_SMPTE_24 = 4,MCI_FORMAT_SMPTE_25 = 5,MCI_FORMAT_SMPTE_30 = 6,MCI_FORMAT_SMPTE_30DROP = 7,MCI_FORMAT_BYTES = 8,MCI_FORMAT_SAMPLES = 9,MCI_FORMAT_TMSF = 10,MCI_NOTIFY_SUCCESSFUL = 1,MCI_NOTIFY_SUPERSEDED = 2,MCI_NOTIFY_ABORTED = 4,MCI_NOTIFY_FAILURE = 8,MCI_NOTIFY = 1,MCI_WAIT = 2,MCI_FROM = 4,MCI_TO = 8,MCI_TRACK = 16,MCI_OPEN_SHAREABLE = 256,MCI_OPEN_ELEMENT = 512,MCI_OPEN_ALIAS = 1024,MCI_OPEN_ELEMENT_ID = 2048,MCI_OPEN_TYPE_ID = 4096,MCI_OPEN_TYPE = 8192,MCI_SEEK_TO_START = 256,MCI_SEEK_TO_END = 512,MCI_STATUS_ITEM = 256,MCI_STATUS_START = 512,MCI_STATUS_LENGTH = 1,MCI_STATUS_POSITION = 2,MCI_STATUS_NUMBER_OF_TRACKS = 3,MCI_STATUS_MODE = 4,MCI_STATUS_MEDIA_PRESENT = 5,MCI_STATUS_TIME_FORMAT = 6,MCI_STATUS_READY = 7,MCI_STATUS_CURRENT_TRACK = 8,MCI_INFO_PRODUCT = 256,MCI_INFO_FILE = 512,MCI_INFO_MEDIA_UPC = 1024,MCI_INFO_MEDIA_IDENTITY = 2048,MCI_INFO_NAME = 4096,MCI_INFO_COPYRIGHT = 8192,MCI_GETDEVCAPS_ITEM = 256,MCI_GETDEVCAPS_CAN_RECORD = 1,MCI_GETDEVCAPS_HAS_AUDIO = 2,MCI_GETDEVCAPS_HAS_VIDEO = 3,MCI_GETDEVCAPS_DEVICE_TYPE = 4,MCI_GETDEVCAPS_USES_FILES = 5,MCI_GETDEVCAPS_COMPOUND_DEVICE = 6,MCI_GETDEVCAPS_CAN_EJECT = 7,MCI_GETDEVCAPS_CAN_PLAY = 8,MCI_GETDEVCAPS_CAN_SAVE = 9,MCI_SYSINFO_QUANTITY = 256,MCI_SYSINFO_OPEN = 512,MCI_SYSINFO_NAME = 1024,MCI_SYSINFO_INSTALLNAME = 2048,MCI_SET_DOOR_OPEN = 256,MCI_SET_DOOR_CLOSED = 512,MCI_SET_TIME_FORMAT = 1024,MCI_SET_AUDIO = 2048,MCI_SET_VIDEO = 4096,MCI_SET_ON = 8192,MCI_SET_OFF = 16384,MCI_SET_AUDIO_ALL = 0,MCI_SET_AUDIO_LEFT = 1,MCI_SET_AUDIO_RIGHT = 2,MCI_BREAK_KEY = 256,MCI_BREAK_HWND = 512,MCI_BREAK_OFF = 1024,MCI_RECORD_INSERT = 256,MCI_RECORD_OVERWRITE = 512,MCI_SAVE_FILE = 256,MCI_LOAD_FILE = 256,MCI_VD_MODE_PARK = 1025,MCI_VD_MEDIA_CLV = 1026,MCI_VD_MEDIA_CAV = 1027,MCI_VD_MEDIA_OTHER = 1028,MCI_VD_FORMAT_TRACK = 16385,MCI_VD_PLAY_REVERSE = 65536,MCI_VD_PLAY_FAST = 131072,MCI_VD_PLAY_SPEED = 262144,MCI_VD_PLAY_SCAN = 524288,MCI_VD_PLAY_SLOW = 1048576,MCI_VD_SEEK_REVERSE = 65536,MCI_VD_STATUS_SPEED = 16386,MCI_VD_STATUS_FORWARD = 16387,MCI_VD_STATUS_MEDIA_TYPE = 16388,MCI_VD_STATUS_SIDE = 16389,MCI_VD_STATUS_DISC_SIZE = 16390,MCI_VD_GETDEVCAPS_CLV = 65536,MCI_VD_GETDEVCAPS_CAV = 131072,MCI_VD_SPIN_UP = 65536,MCI_VD_SPIN_DOWN = 131072,MCI_VD_GETDEVCAPS_CAN_REVERSE = 16386,MCI_VD_GETDEVCAPS_FAST_RATE = 16387,MCI_VD_GETDEVCAPS_SLOW_RATE = 16388,MCI_VD_GETDEVCAPS_NORMAL_RATE = 16389,MCI_VD_STEP_FRAMES = 65536,MCI_VD_STEP_REVERSE = 131072,MCI_VD_ESCAPE_STRING = 256,MCI_CDA_STATUS_TYPE_TRACK = 16385,MCI_CDA_TRACK_AUDIO = 1088,MCI_CDA_TRACK_OTHER = 1089,MCI_WAVE_PCM = 1152,MCI_WAVE_MAPPER = 1153,MCI_WAVE_OPEN_BUFFER = 65536,MCI_WAVE_SET_FORMATTAG = 65536,MCI_WAVE_SET_CHANNELS = 131072,MCI_WAVE_SET_SAMPLESPERSEC = 262144,MCI_WAVE_SET_AVGBYTESPERSEC = 524288,MCI_WAVE_SET_BLOCKALIGN = 1048576,MCI_WAVE_SET_BITSPERSAMPLE = 2097152,MCI_WAVE_INPUT = 4194304,MCI_WAVE_OUTPUT = 8388608,MCI_WAVE_STATUS_FORMATTAG = 16385,MCI_WAVE_STATUS_CHANNELS = 16386,MCI_WAVE_STATUS_SAMPLESPERSEC = 16387,MCI_WAVE_STATUS_AVGBYTESPERSEC = 16388,MCI_WAVE_STATUS_BLOCKALIGN = 16389,MCI_WAVE_STATUS_BITSPERSAMPLE = 16390,MCI_WAVE_STATUS_LEVEL = 16391,MCI_WAVE_SET_ANYINPUT = 67108864,MCI_WAVE_SET_ANYOUTPUT = 134217728,MCI_WAVE_GETDEVCAPS_INPUTS = 16385,MCI_WAVE_GETDEVCAPS_OUTPUTS = 16386,MCI_SEQ_DIV_PPQN = 1216,MCI_SEQ_DIV_SMPTE_24 = 1217,MCI_SEQ_DIV_SMPTE_25 = 1218,MCI_SEQ_DIV_SMPTE_30DROP = 1219,MCI_SEQ_DIV_SMPTE_30 = 1220,MCI_SEQ_FORMAT_SONGPTR = 16385,MCI_SEQ_FILE = 16386,MCI_SEQ_MIDI = 16387,MCI_SEQ_SMPTE = 16388,MCI_SEQ_NONE = 65533,MCI_SEQ_MAPPER = 65535,MCI_SEQ_STATUS_TEMPO = 16386,MCI_SEQ_STATUS_PORT = 16387,MCI_SEQ_STATUS_SLAVE = 16391,MCI_SEQ_STATUS_MASTER = 16392,MCI_SEQ_STATUS_OFFSET = 16393,MCI_SEQ_STATUS_DIVTYPE = 16394,MCI_SEQ_STATUS_NAME = 16395,MCI_SEQ_STATUS_COPYRIGHT = 16396,MCI_SEQ_SET_TEMPO = 65536,MCI_SEQ_SET_PORT = 131072,MCI_SEQ_SET_SLAVE = 262144,MCI_SEQ_SET_MASTER = 524288,MCI_SEQ_SET_OFFSET = 16777216,MCI_ANIM_OPEN_WS = 65536,MCI_ANIM_OPEN_PARENT = 131072,MCI_ANIM_OPEN_NOSTATIC = 262144,MCI_ANIM_PLAY_SPEED = 65536,MCI_ANIM_PLAY_REVERSE = 131072,MCI_ANIM_PLAY_FAST = 262144,MCI_ANIM_PLAY_SLOW = 524288,MCI_ANIM_PLAY_SCAN = 1048576,MCI_ANIM_STEP_REVERSE = 65536,MCI_ANIM_STEP_FRAMES = 131072,MCI_ANIM_STATUS_SPEED = 16385,MCI_ANIM_STATUS_FORWARD = 16386,MCI_ANIM_STATUS_HWND = 16387,MCI_ANIM_STATUS_HPAL = 16388,MCI_ANIM_STATUS_STRETCH = 16389,MCI_ANIM_INFO_TEXT = 65536,MCI_ANIM_GETDEVCAPS_CAN_REVERSE = 16385,MCI_ANIM_GETDEVCAPS_FAST_RATE = 16386,MCI_ANIM_GETDEVCAPS_SLOW_RATE = 16387,MCI_ANIM_GETDEVCAPS_NORMAL_RATE = 16388,MCI_ANIM_GETDEVCAPS_PALETTES = 16390,MCI_ANIM_GETDEVCAPS_CAN_STRETCH = 16391,MCI_ANIM_GETDEVCAPS_MAX_WINDOWS = 16392,MCI_ANIM_REALIZE_NORM = 65536,MCI_ANIM_REALIZE_BKGD = 131072,MCI_ANIM_WINDOW_HWND = 65536,MCI_ANIM_WINDOW_STATE = 262144,MCI_ANIM_WINDOW_TEXT = 524288,MCI_ANIM_WINDOW_ENABLE_STRETCH = 1048576,MCI_ANIM_WINDOW_DISABLE_STRETCH = 2097152,MCI_ANIM_WINDOW_DEFAULT = 0,MCI_ANIM_RECT = 65536,MCI_ANIM_PUT_SOURCE = 131072,MCI_ANIM_PUT_DESTINATION = 262144,MCI_ANIM_WHERE_SOURCE = 131072,MCI_ANIM_WHERE_DESTINATION = 262144,MCI_ANIM_UPDATE_HDC = 131072,MCI_OVLY_OPEN_WS = 65536,MCI_OVLY_OPEN_PARENT = 131072,MCI_OVLY_STATUS_HWND = 16385,MCI_OVLY_STATUS_STRETCH = 16386,MCI_OVLY_INFO_TEXT = 65536,MCI_OVLY_GETDEVCAPS_CAN_STRETCH = 16385,MCI_OVLY_GETDEVCAPS_CAN_FREEZE = 16386,MCI_OVLY_GETDEVCAPS_MAX_WINDOWS = 16387,MCI_OVLY_WINDOW_HWND = 65536,MCI_OVLY_WINDOW_STATE = 262144,MCI_OVLY_WINDOW_TEXT = 524288,MCI_OVLY_WINDOW_ENABLE_STRETCH = 1048576,MCI_OVLY_WINDOW_DISABLE_STRETCH = 2097152,MCI_OVLY_WINDOW_DEFAULT = 0,MCI_OVLY_RECT = 65536,MCI_OVLY_PUT_SOURCE = 131072,MCI_OVLY_PUT_DESTINATION = 262144,MCI_OVLY_PUT_FRAME = 524288,MCI_OVLY_PUT_VIDEO = 1048576,MCI_OVLY_WHERE_SOURCE = 131072,MCI_OVLY_WHERE_DESTINATION = 262144,MCI_OVLY_WHERE_FRAME = 524288,MCI_OVLY_WHERE_VIDEO = 1048576,};
enum MACRO_MEM_IMAGE {MEM_IMAGE = 16777216,};
enum MACRO_MERGECOPY {MERGECOPY = 0xC000CA,};
enum MACRO_MFCOMMENT {MFCOMMENT = 15,GETPENWIDTH = 16,};
enum MACRO_MIXERLINE {MIXERLINE_LINEF_ACTIVE = 0x1,MIXERLINE_LINEF_DISCONNECTED = 0x8000,MIXERLINE_LINEF_SOURCE = 0x80000000,MIXERLINE_COMPONENTTYPE_DST_FIRST = 0x0,MIXERLINE_COMPONENTTYPE_DST_UNDEFINED = 0x0,MIXERLINE_COMPONENTTYPE_DST_DIGITAL = 0x1,MIXERLINE_COMPONENTTYPE_DST_LINE = 0x2,MIXERLINE_COMPONENTTYPE_DST_MONITOR = 0x3,MIXERLINE_COMPONENTTYPE_DST_SPEAKERS = 0x4,MIXERLINE_COMPONENTTYPE_DST_HEADPHONES = 0x5,MIXERLINE_COMPONENTTYPE_DST_TELEPHONE = 0x6,MIXERLINE_COMPONENTTYPE_DST_WAVEIN = 0x7,MIXERLINE_COMPONENTTYPE_DST_VOICEIN = 0x8,MIXERLINE_COMPONENTTYPE_DST_LAST = 0x8,MIXERLINE_COMPONENTTYPE_SRC_FIRST = 0x1000,MIXERLINE_COMPONENTTYPE_SRC_UNDEFINED = 0x1000,MIXERLINE_COMPONENTTYPE_SRC_DIGITAL = 0x1001,MIXERLINE_COMPONENTTYPE_SRC_LINE = 0x1002,MIXERLINE_COMPONENTTYPE_SRC_MICROPHONE = 0x1003,MIXERLINE_COMPONENTTYPE_SRC_SYNTHESIZER = 0x1004,MIXERLINE_COMPONENTTYPE_SRC_COMPACTDISC = 0x1005,MIXERLINE_COMPONENTTYPE_SRC_TELEPHONE = 0x1006,MIXERLINE_COMPONENTTYPE_SRC_PCSPEAKER = 0x1007,MIXERLINE_COMPONENTTYPE_SRC_WAVEOUT = 0x1008,MIXERLINE_COMPONENTTYPE_SRC_AUXILIARY = 0x1009,MIXERLINE_COMPONENTTYPE_SRC_ANALOG = 0x100A,MIXERLINE_COMPONENTTYPE_SRC_LAST = 0x100A,MIXERLINE_TARGETTYPE_UNDEFINED = 0x0,MIXERLINE_TARGETTYPE_WAVEOUT = 0x1,MIXERLINE_TARGETTYPE_WAVEIN = 0x2,MIXERLINE_TARGETTYPE_MIDIOUT = 0x3,MIXERLINE_TARGETTYPE_MIDIIN = 0x4,MIXERLINE_TARGETTYPE_AUX = 0x5,};
enum MACRO_NCBACTION {NCBACTION = 0x77,};
enum MACRO_NCBCANCEL {NCBCANCEL = 0x35,};
enum MACRO_NCBDGRECV {NCBDGRECV = 0x21,};
enum MACRO_NCBHANGUP {NCBHANGUP = 0x12,};
enum MACRO_NCBLISTEN {NCBLISTEN = 0x11,};
enum MACRO_NCBSENDNA {NCBSENDNA = 0x71,};
enum MACRO_NCBUNLINK {NCBUNLINK = 0x70,};
enum MACRO_NUMCOLORS {NUMCOLORS = 24,};
enum MACRO_OLECREATE {OLECREATE_LEAVERUNNING = 0x1,};
enum MACRO_PARAMFLAG {PARAMFLAG_NONE = 0,PARAMFLAG_FIN = 1,PARAMFLAG_FOUT = 2,PARAMFLAG_FLCID = 4,PARAMFLAG_FRETVAL = 8,PARAMFLAG_FOPT = 16,PARAMFLAG_FHASDEFAULT = 32,PARAMFLAG_FHASCUSTDATA = 64,};
enum MACRO_PARTITION {PARTITION_ENTRY_UNUSED = 0x0,PARTITION_FAT_12 = 0x1,PARTITION_XENIX_1 = 0x2,PARTITION_XENIX_2 = 0x3,PARTITION_FAT_16 = 0x4,PARTITION_EXTENDED = 0x5,PARTITION_HUGE = 0x6,PARTITION_IFS = 0x7,PARTITION_FAT32 = 0xB,PARTITION_FAT32_XINT13 = 0xC,PARTITION_XINT13 = 0xE,PARTITION_XINT13_EXTENDED = 0xF,PARTITION_PREP = 0x41,PARTITION_LDM = 0x42,PARTITION_UNIX = 0x63,};
enum MACRO_PATINVERT {PATINVERT = 0x5A0049,};
enum MACRO_PD_RESULT {PD_RESULT_CANCEL = 0,PD_RESULT_PRINT = 1,PD_RESULT_APPLY = 2,};
enum MACRO_PF_UNSPEC {PF_UNSPEC = 0,PF_UNIX = 1,PF_INET = 2,PF_IMPLINK = 3,PF_PUP = 4,PF_CHAOS = 5,PF_NS = 6,PF_IPX = 6,PF_ISO = 7,PF_OSI = 7,PF_ECMA = 8,PF_DATAKIT = 9,PF_CCITT = 10,PF_SNA = 11,PF_DECnet = 12,PF_DLI = 13,PF_LAT = 14,PF_HYLINK = 15,PF_APPLETALK = 16,PF_VOICEVIEW = 18,PF_FIREFOX = 19,PF_UNKNOWN1 = 20,PF_BAN = 21,PF_ATM = 22,PF_INET6 = 23,PF_MAX = 29,};
enum MACRO_PP_CLIENT {PP_CLIENT_HWND = 1,PP_CONTEXT_INFO = 11,PP_KEYEXCHANGE_KEYSIZE = 12,PP_SIGNATURE_KEYSIZE = 13,PP_KEYEXCHANGE_ALG = 14,PP_SIGNATURE_ALG = 15,PP_DELETEKEY = 24,};
enum MACRO_PRIVILEGE {PRIVILEGE_SET_ALL_NECESSARY = 1,};
enum MACRO_PROCESSOR {PROCESSOR_INTEL_386 = 386,PROCESSOR_INTEL_486 = 486,PROCESSOR_INTEL_PENTIUM = 586,PROCESSOR_INTEL_IA64 = 2200,PROCESSOR_MIPS_R4000 = 4000,PROCESSOR_ALPHA_21064 = 21064,PROCESSOR_PPC_601 = 601,PROCESSOR_PPC_603 = 603,PROCESSOR_PPC_604 = 604,PROCESSOR_PPC_620 = 620,PROCESSOR_HITACHI_SH3 = 10003,PROCESSOR_HITACHI_SH3E = 10004,PROCESSOR_HITACHI_SH4 = 10005,PROCESSOR_MOTOROLA_821 = 821,PROCESSOR_SHx_SH3 = 103,PROCESSOR_SHx_SH4 = 104,PROCESSOR_STRONGARM = 2577,PROCESSOR_ARM720 = 1824,PROCESSOR_ARM820 = 2080,PROCESSOR_ARM920 = 2336,PROCESSOR_ARM_7TDMI = 70001,PROCESSOR_OPTIL = 18767,PROCESSOR_ARCHITECTURE_INTEL = 0,PROCESSOR_ARCHITECTURE_MIPS = 1,PROCESSOR_ARCHITECTURE_ALPHA = 2,PROCESSOR_ARCHITECTURE_PPC = 3,PROCESSOR_ARCHITECTURE_SHX = 4,PROCESSOR_ARCHITECTURE_ARM = 5,PROCESSOR_ARCHITECTURE_IA64 = 6,PROCESSOR_ARCHITECTURE_ALPHA64 = 7,PROCESSOR_ARCHITECTURE_MSIL = 8,PROCESSOR_ARCHITECTURE_UNKNOWN = 65535,};
enum MACRO_RC_BITBLT {RC_BITBLT = 1,RC_BANDING = 2,RC_SCALING = 4,RC_BITMAP64 = 8,RC_GDI20_OUTPUT = 16,RC_GDI20_STATE = 32,RC_SAVEBITMAP = 64,RC_DI_BITMAP = 128,RC_PALETTE = 256,RC_DIBTODEV = 512,RC_BIGFONT = 1024,RC_STRETCHBLT = 2048,RC_FLOODFILL = 4096,RC_STRETCHDIB = 8192,RC_OP_DX_OUTPUT = 16384,RC_DEVBITS = 32768,};
enum MACRO_REFERENCE {REFERENCE_WHITE_MIN = 6000,REFERENCE_WHITE_MAX = 10000,REFERENCE_BLACK_MIN = 0,REFERENCE_BLACK_MAX = 4000,};
enum MACRO_RPC_FLAGS {RPC_FLAGS_VALID_BIT = 0x8000,};
enum MACRO_RUNDLGORD {RUNDLGORD = 1545,};
enum MACRO_SCARD_ATR {SCARD_ATR_LENGTH = 33,SCARD_PROTOCOL_UNDEFINED = 0,SCARD_PROTOCOL_T0 = 1,SCARD_PROTOCOL_T1 = 2,SCARD_PROTOCOL_RAW = 65536,SCARD_PROTOCOL_Tx = 3,SCARD_PROTOCOL_DEFAULT = -2147483648,SCARD_PROTOCOL_OPTIMAL = 0,SCARD_POWER_DOWN = 0,SCARD_COLD_RESET = 1,SCARD_WARM_RESET = 2,};
enum MACRO_SEC_WINNT {SEC_WINNT_AUTH_IDENTITY_ANSI = 0x1,SEC_WINNT_AUTH_IDENTITY_UNICODE = 0x2,};
enum MACRO_SELECTDIB {SELECTDIB = 41,};
enum MACRO_SEMAPHORE {SEMAPHORE_MODIFY_STATE = 0x2,SEMAPHORE_ALL_ACCESS = 0x1F0003,};
enum MACRO_SIGNATURE {SIGNATURE_RESOURCE_NUMBER = 0x29A,};
enum MACRO_SIMULATED {SIMULATED_FONTTYPE = 0x8000,PRINTER_FONTTYPE = 0x4000,SCREEN_FONTTYPE = 0x2000,BOLD_FONTTYPE = 0x100,ITALIC_FONTTYPE = 0x200,REGULAR_FONTTYPE = 0x400,};
enum MACRO_SMART_CYL {SMART_CYL_LOW = 0x4F,SMART_CYL_HI = 0xC2,SMART_NO_ERROR = 0x0,SMART_IDE_ERROR = 0x1,SMART_INVALID_FLAG = 0x2,SMART_INVALID_COMMAND = 0x3,SMART_INVALID_BUFFER = 0x4,SMART_INVALID_DRIVE = 0x5,SMART_INVALID_IOCTL = 0x6,SMART_ERROR_NO_MEM = 0x7,SMART_INVALID_REGISTER = 0x8,SMART_NOT_SUPPORTED = 0x9,SMART_NO_IDE_DEVICE = 0xA,};
enum MACRO_SOMAXCONN {SOMAXCONN = 0x7FFFFFFF,};
enum MACRO_SP_PARITY {SP_PARITY = 0x1,SP_BAUD = 0x2,SP_DATABITS = 0x4,SP_STOPBITS = 0x8,SP_HANDSHAKING = 0x10,SP_PARITY_CHECK = 0x20,SP_RLSD = 0x40,};
enum MACRO_SRCINVERT {SRCINVERT = 0x660046,};
enum MACRO_TIME_ZONE {TIME_ZONE_ID_INVALID = 0xFFFFFFFF,};
enum MACRO_TRANSFORM {TRANSFORM_CTM = 4107,};
enum MACRO_TRANSPORT {TRANSPORT_TYPE_CN = 0x1,TRANSPORT_TYPE_DG = 0x2,TRANSPORT_TYPE_LPC = 0x4,TRANSPORT_TYPE_WMSG = 0x8,};
enum MACRO_UPDFCACHE {UPDFCACHE_NODATACACHE = 0x1,UPDFCACHE_ONSAVECACHE = 0x2,UPDFCACHE_ONSTOPCACHE = 0x4,UPDFCACHE_NORMALCACHE = 0x8,UPDFCACHE_IFBLANK = 0x10,UPDFCACHE_ONLYIFBLANK = 0x80000000,UPDFCACHE_IFBLANKORONSAVECACHE = 0x12,UPDFCACHE_ALL = 0x7FFFFFFF,UPDFCACHE_ALLBUTNODATACACHE = 0x7FFFFFFE,};
enum MACRO_URLACTION {URLACTION_MIN = 0x1000,URLACTION_DOWNLOAD_MIN = 0x1000,URLACTION_DOWNLOAD_SIGNED_ACTIVEX = 0x1001,URLACTION_DOWNLOAD_UNSIGNED_ACTIVEX = 0x1004,URLACTION_DOWNLOAD_CURR_MAX = 0x1004,URLACTION_DOWNLOAD_MAX = 0x11FF,URLACTION_ACTIVEX_MIN = 0x1200,URLACTION_ACTIVEX_RUN = 0x1200,};
enum MACRO_URLPOLICY {URLPOLICY_ACTIVEX_CHECK_LIST = 0x10000,};
enum MACRO_VER_EQUAL {VER_EQUAL = 1,VER_GREATER = 2,VER_GREATER_EQUAL = 3,VER_LESS = 4,VER_LESS_EQUAL = 5,VER_AND = 6,VER_OR = 7,VER_CONDITION_MASK = 7,VER_NUM_BITS_PER_CONDITION_MASK = 3,VER_MINORVERSION = 1,VER_MAJORVERSION = 2,VER_BUILDNUMBER = 4,VER_PLATFORMID = 8,VER_SERVICEPACKMINOR = 16,VER_SERVICEPACKMAJOR = 32,VER_SUITENAME = 64,VER_PRODUCT_TYPE = 128,VER_NT_WORKSTATION = 1,VER_NT_DOMAIN_CONTROLLER = 2,VER_NT_SERVER = 3,VER_PLATFORM_WIN32s = 0,VER_PLATFORM_WIN32_WINDOWS = 1,VER_PLATFORM_WIN32_NT = 2,};
enum MACRO_WHITENESS {WHITENESS = 0xFF0062,NOMIRRORBITMAP = 0x80000000,};
enum MACRO_WILDCARDS {WILDCARDS = 0x1,EXTENSION = 0x2,FILENAME = 0x4,DIRECTORY = 0x8,DRIVE = 0x10,MAXPATH = 0x104,};
enum MACRO_X509_BITS {X509_BITS_WITHOUT_TRAILING_ZEROES = 51,};
enum MACRO_X509_CERT {X509_CERT = 1,X509_CERT_TO_BE_SIGNED = 2,X509_CERT_CRL_TO_BE_SIGNED = 3,X509_CERT_REQUEST_TO_BE_SIGNED = 4,X509_EXTENSIONS = 5,X509_NAME_VALUE = 6,X509_NAME = 7,X509_PUBLIC_KEY_INFO = 8,X509_AUTHORITY_KEY_ID = 9,X509_KEY_ATTRIBUTES = 10,X509_KEY_USAGE_RESTRICTION = 11,X509_ALTERNATE_NAME = 12,X509_BASIC_CONSTRAINTS = 13,X509_KEY_USAGE = 14,X509_BASIC_CONSTRAINTS2 = 15,X509_CERT_POLICIES = 16,};
enum MACRO_X509_PKIX {X509_PKIX_POLICY_QUALIFIER_USERNOTICE = 46,X509_DH_PUBLICKEY = 38,X509_DH_PARAMETERS = 47,};
enum MACRO__BADVALUE {_BADVALUE = -3,};
enum MACRO__NOCURSOR {_NOCURSOR = 0,_SOLIDCURSOR = 1,_NORMALCURSOR = 2,BLINK = 128,};
enum MACRO__O_APPEND {_O_APPEND = 2048,_O_BINARY = 32768,_O_CREAT = 256,_O_EXCL = 1024,_O_NOINHERIT = 128,_O_RAW = 32768,_O_RDONLY = 0,_O_RDWR = 2,_O_TEXT = 16384,_O_TRUNC = 512,_O_WRONLY = 1,};
typedef struct tagMCI_BREAK_PARMS MCI_BREAK_PARMS;
typedef struct tagMCI_INFO_PARMSA MCI_INFO_PARMSA;
typedef struct tagMCI_INFO_PARMSW MCI_INFO_PARMSW;
typedef struct tagMCI_LOAD_PARMSA MCI_LOAD_PARMSA;
typedef struct tagMCI_LOAD_PARMSW MCI_LOAD_PARMSW;
typedef struct tagMCI_OPEN_PARMSA MCI_OPEN_PARMSA;
typedef struct tagMCI_OPEN_PARMSW MCI_OPEN_PARMSW;
typedef struct tagMCI_SAVE_PARMSA MCI_SAVE_PARMSA;
typedef struct tagMCI_SAVE_PARMSW MCI_SAVE_PARMSW;
typedef struct midiproptimediv_tag MIDIPROPTIMEDIV;
typedef struct midistrmbuffver_tag MIDISTRMBUFFVER;
typedef struct _MONITOR_INFO_1A MONITOR_INFO_1A;
typedef struct _MONITOR_INFO_1W MONITOR_INFO_1W;
typedef struct _MONITOR_INFO_2A MONITOR_INFO_2A;
typedef struct _MONITOR_INFO_2W MONITOR_INFO_2W;
typedef struct tagMOUSEHOOKSTRUCT MOUSEHOOKSTRUCT;
typedef struct _NOTIFYICONDATAA NOTIFYICONDATAA;
typedef struct _NOTIFYICONDATAW NOTIFYICONDATAW;
typedef struct tagCANDIDATEFORM *NPCANDIDATEFORM;
typedef struct tagCANDIDATELIST *NPCANDIDATELIST;
typedef struct tagDEBUGHOOKINFO *NPDEBUGHOOKINFO;
typedef struct tagDRVCONFIGINFO *NPDRVCONFIGINFO;
typedef struct pcmwaveformat_tag *NPPCMWAVEFORMAT;
typedef struct tagREGISTERWORDA *NPREGISTERWORDA;
typedef struct tagREGISTERWORDW *NPREGISTERWORDW;
typedef struct _NTFS_STATISTICS NTFS_STATISTICS;
typedef struct _PACKEDEVENTINFO PACKEDEVENTINFO;
typedef struct _ADAPTER_STATUS *PADAPTER_STATUS;
typedef struct _ADDJOB_INFO_1A *PADDJOB_INFO_1A;
typedef struct _ADDJOB_INFO_1W *PADDJOB_INFO_1W;
typedef struct _PATHNAME_BUFFER PATHNAME_BUFFER;
typedef struct tagBITMAPCOREINFO *PBITMAPCOREINFO;
typedef struct _22BDD2D628B0B561C5A9CA42290FE551 *PBITMAPV4HEADER;
typedef struct _2B6042393D1A02E0AE9B16B44F784AC7 *PBITMAPV5HEADER;
typedef struct _CERT_EXTENSION *PCERT_EXTENSION;
typedef struct _CRYPTOAPI_BLOB *PCERT_NAME_BLOB;
typedef struct _CERT_NAME_INFO *PCERT_NAME_INFO;
typedef struct _CERT_POLICY_ID *PCERT_POLICY_ID;
typedef struct tagCOPYDATASTRUCT *PCOPYDATASTRUCT;
typedef struct _CRL_DIST_POINT *PCRL_DIST_POINT;
typedef struct _CRYPT_BIT_BLOB *PCRYPT_BIT_BLOB;
typedef struct _CRYPTOAPI_BLOB *PCRYPT_DER_BLOB;
typedef struct _CRYPT_OID_INFO *PCRYPT_OID_INFO;
typedef struct _CRYPT_URL_INFO *PCRYPT_URL_INFO;
typedef struct _DISK_HISTOGRAM *PDISK_HISTOGRAM;
typedef struct tagDRAWITEMSTRUCT *PDRAWITEMSTRUCT;
typedef struct _DRIVER_INFO_1A *PDRIVER_INFO_1A;
typedef struct _DRIVER_INFO_1W *PDRIVER_INFO_1W;
typedef struct _DRIVER_INFO_2A *PDRIVER_INFO_2A;
typedef struct _DRIVER_INFO_2W *PDRIVER_INFO_2W;
typedef struct _DRIVER_INFO_3A *PDRIVER_INFO_3A;
typedef struct _DRIVER_INFO_3W *PDRIVER_INFO_3W;
typedef struct _DRIVER_INFO_4A *PDRIVER_INFO_4A;
typedef struct _DRIVER_INFO_4W *PDRIVER_INFO_4W;
typedef struct _DRIVER_INFO_5A *PDRIVER_INFO_5A;
typedef struct _DRIVER_INFO_5W *PDRIVER_INFO_5W;
typedef struct _DRIVER_INFO_6A *PDRIVER_INFO_6A;
typedef struct _DRIVER_INFO_6W *PDRIVER_INFO_6W;
typedef struct tagABORTPATH *PEMRCLOSEFIGURE;
typedef struct tagEMREXTTEXTOUTA *PEMREXTTEXTOUTA;
typedef struct tagEMREXTTEXTOUTA *PEMREXTTEXTOUTW;
typedef struct tagABORTPATH *PEMRFLATTENPATH;
typedef struct tagEMRNAMEDESCAPE *PEMRNAMEDESCAPE;
typedef struct tagEMRPIXELFORMAT *PEMRPIXELFORMAT;
typedef struct tagEMRPOLYPOLYLINE *PEMRPOLYPOLYGON;
typedef struct _PERF_DATA_BLOCK PERF_DATA_BLOCK;
typedef struct _EVENTLOGRECORD *PEVENTLOGRECORD;
typedef struct _FAT_STATISTICS *PFAT_STATISTICS;
typedef struct tagMCI_PLAY_PARMS *PMCI_PLAY_PARMS;
typedef struct tagMCI_SEEK_PARMS *PMCI_SEEK_PARMS;
typedef void *PMIDL_XMIT_TYPE;
typedef struct tagMOUSEMOVEPOINT *PMOUSEMOVEPOINT;
typedef struct _49CD7323AA35D3C00204BB7AA8563FFA *PMOVE_FILE_DATA;
typedef struct tagMSLLHOOKSTRUCT *PMSLLHOOKSTRUCT;
typedef struct tagNEWTEXTMETRICA *PNEWTEXTMETRICA;
typedef struct tagNEWTEXTMETRICW *PNEWTEXTMETRICW;
typedef struct _OSVERSIONINFOA *POSVERSIONINFOA;
typedef struct _OSVERSIONINFOW *POSVERSIONINFOW;
typedef struct _PRINTER_INFO_3 *PPRINTER_INFO_3;
typedef struct _PRINTER_INFO_6 *PPRINTER_INFO_6;
typedef struct _PRINTER_INFO_1A PRINTER_INFO_1A;
typedef struct _PRINTER_INFO_1W PRINTER_INFO_1W;
typedef struct _PRINTER_INFO_2A PRINTER_INFO_2A;
typedef struct _PRINTER_INFO_2W PRINTER_INFO_2W;
typedef struct _PRINTER_INFO_4A PRINTER_INFO_4A;
typedef struct _PRINTER_INFO_4W PRINTER_INFO_4W;
typedef struct _PRINTER_INFO_5A PRINTER_INFO_5A;
typedef struct _PRINTER_INFO_5W PRINTER_INFO_5W;
typedef struct _PRINTER_INFO_7A PRINTER_INFO_7A;
typedef struct _PRINTER_INFO_7W PRINTER_INFO_7W;
typedef struct _PRINTER_INFO_8A PRINTER_INFO_8A;
typedef struct _PRINTER_INFO_8W PRINTER_INFO_8W;
typedef struct _PRINTER_INFO_9A PRINTER_INFO_9A;
typedef struct _PRINTER_INFO_9W PRINTER_INFO_9W;
typedef struct _SCONTEXT_QUEUE *PSCONTEXT_QUEUE;
typedef struct _SESSION_BUFFER *PSESSION_BUFFER;
typedef struct _SESSION_HEADER *PSESSION_HEADER;
typedef struct _SOCKET_ADDRESS *PSOCKET_ADDRESS;
typedef struct _REASSIGN_BLOCKS REASSIGN_BLOCKS;
typedef struct tagRECONVERTSTRING RECONVERTSTRING;
typedef struct _RPC_ASYNC_STATE RPC_ASYNC_STATE;
typedef void __stdcall RPC_CLIENT_FREE(void *Ptr);
typedef struct tagRemHENHMETAFILE RemHENHMETAFILE;
typedef struct _RemotableHandle RemotableHandle;
typedef struct _wireSAFEARR_BRECORD SAFEARR_BRECORD;
typedef struct _wireSAFEARR_HAVEIID SAFEARR_HAVEIID;
typedef struct _wireSAFEARR_UNKNOWN SAFEARR_UNKNOWN;
typedef struct _wireSAFEARR_VARIANT SAFEARR_VARIANT;
typedef struct _SENDCMDINPARAMS SENDCMDINPARAMS;
typedef struct _SHFILEOPSTRUCTA SHFILEOPSTRUCTA;
typedef struct _SHFILEOPSTRUCTW SHFILEOPSTRUCTW;
typedef struct _TAPE_STATISTICS TAPE_STATISTICS;
typedef struct tagTRACKMOUSEEVENT TRACKMOUSEEVENT;
typedef struct tagTTPOLYGONHEADER TTPOLYGONHEADER;
typedef struct tagUSEROBJECTFLAGS USEROBJECTFLAGS;
typedef struct _USER_MARSHAL_CB USER_MARSHAL_CB;
typedef struct tagVersionedStream VERSIONEDSTREAM;
typedef struct _VIDEOPARAMETERS VIDEOPARAMETERS;
typedef struct _VTableProvStruc VTableProvStruc;
typedef struct _WIN32_STREAM_ID WIN32_STREAM_ID;
typedef struct tagWINDOWPLACEMENT WINDOWPLACEMENT;
typedef struct _WSANSClassInfoA WSANSCLASSINFOA;
typedef struct _WSANSClassInfoW WSANSCLASSINFOW;
struct _HYPER_SIZEDARR {unsigned int clSize;__int64 *pData;};
enum _SC_ACTION_TYPE {SC_ACTION_NONE = 0x0,SC_ACTION_RESTART = 0x1,SC_ACTION_REBOOT = 0x2,SC_ACTION_RUN_COMMAND = 0x3,};
enum _SC_STATUS_TYPE {SC_STATUS_PROCESS_INFO = 0x0,};
struct _SHORT_SIZEDARR {unsigned int clSize;unsigned __int16 *pData;};
enum _WSAEcomparator {COMP_EQUAL = 0x0,COMP_NOTLESS = 0x1,};
enum _tagOIBDG_FLAGS {OIBDG_APARTMENTTHREADED = 0x100,OIBDG_DATAONLY = 0x1000,};
enum _tagPARSEACTION {PARSE_CANONICALIZE = 0x1,PARSE_FRIENDLY = 0x2,PARSE_SECURITY_URL = 0x3,PARSE_ROOTDOCUMENT = 0x4,PARSE_DOCUMENT = 0x5,PARSE_ANCHOR = 0x6,PARSE_ENCODE = 0x7,PARSE_DECODE = 0x8,PARSE_PATH_FROM_URL = 0x9,PARSE_URL_FROM_PATH = 0xA,PARSE_MIME = 0xB,PARSE_SERVER = 0xC,PARSE_SCHEMA = 0xD,PARSE_SITE = 0xE,PARSE_DOMAIN = 0xF,PARSE_LOCATION = 0x10,PARSE_SECURITY_DOMAIN = 0x11,PARSE_ESCAPE = 0x12,PARSE_UNESCAPE = 0x13,};
enum _tagQUERYOPTION {QUERY_EXPIRATION_DATE = 0x1,QUERY_TIME_OF_LAST_CHANGE = 0x2,QUERY_CONTENT_ENCODING = 0x3,QUERY_CONTENT_TYPE = 0x4,QUERY_REFRESH = 0x5,QUERY_RECOMBINE = 0x6,QUERY_CAN_NAVIGATE = 0x7,QUERY_USES_NETWORK = 0x8,QUERY_IS_CACHED = 0x9,QUERY_IS_INSTALLEDENTRY = 0xA,QUERY_IS_CACHED_OR_MAPPED = 0xB,QUERY_USES_CACHE = 0xC,QUERY_IS_SECURE = 0xD,QUERY_IS_SAFE = 0xE,};
enum tagCOWAIT_FLAGS {COWAIT_WAITALL = 0x1,COWAIT_ALERTABLE = 0x2,};
enum tagDISCARDCACHE {DISCARDCACHE_SAVEIFDIRTY = 0x0,DISCARDCACHE_NOSAVE = 0x1,};
enum tagSTDMSHLFLAGS {SMEXF_SERVER = 0x1,SMEXF_HANDLER = 0x2,};
enum tagXMLEMEM_TYPE {XMLELEMTYPE_ELEMENT = 0x0,XMLELEMTYPE_TEXT = 0x1,XMLELEMTYPE_COMMENT = 0x2,XMLELEMTYPE_DOCUMENT = 0x3,XMLELEMTYPE_DTD = 0x4,XMLELEMTYPE_PI = 0x5,XMLELEMTYPE_OTHER = 0x6,};
typedef struct _ADAPTER_STATUS ADAPTER_STATUS;
typedef struct _ADDJOB_INFO_1A ADDJOB_INFO_1A;
typedef struct _ADDJOB_INFO_1W ADDJOB_INFO_1W;
struct AsyncIPipeByte {struct AsyncIPipeByteVtbl *lpVtbl;};
struct AsyncIPipeLong {struct AsyncIPipeLongVtbl *lpVtbl;};
typedef struct tagBITMAPCOREINFO BITMAPCOREINFO;
typedef struct _22BDD2D628B0B561C5A9CA42290FE551 BITMAPV4HEADER;
typedef struct _2B6042393D1A02E0AE9B16B44F784AC7 BITMAPV5HEADER;
typedef struct tagCBT_CREATEWNDA CBT_CREATEWNDA;
typedef struct tagCBT_CREATEWNDW CBT_CREATEWNDW;
typedef struct _CERT_EXTENSION CERT_EXTENSION;
typedef struct _CRYPTOAPI_BLOB CERT_NAME_BLOB;
typedef struct _CERT_NAME_INFO CERT_NAME_INFO;
typedef struct _CERT_POLICY_ID CERT_POLICY_ID;
typedef struct _COAUTHIDENTITY COAUTHIDENTITY;
typedef struct tagCOPYDATASTRUCT COPYDATASTRUCT;
typedef struct _CRL_DIST_POINT CRL_DIST_POINT;
typedef struct _CRYPT_BIT_BLOB CRYPT_BIT_BLOB;
typedef struct _CRYPTOAPI_BLOB CRYPT_DER_BLOB;
typedef struct _CRYPT_OID_INFO CRYPT_OID_INFO;
typedef struct _CRYPT_URL_INFO CRYPT_URL_INFO;
typedef struct _PRIVKEYVER3 DHPRIVKEY_VER3;
typedef struct _DISCDLGSTRUCTA DISCDLGSTRUCTA;
typedef struct _DISCDLGSTRUCTW DISCDLGSTRUCTW;
typedef struct _DISK_HISTOGRAM DISK_HISTOGRAM;
typedef struct tagDRAWITEMSTRUCT DRAWITEMSTRUCT;
typedef struct tagDRAWTEXTPARAMS DRAWTEXTPARAMS;
typedef struct _DRIVER_INFO_1A DRIVER_INFO_1A;
typedef struct _DRIVER_INFO_1W DRIVER_INFO_1W;
typedef struct _DRIVER_INFO_2A DRIVER_INFO_2A;
typedef struct _DRIVER_INFO_2W DRIVER_INFO_2W;
typedef struct _DRIVER_INFO_3A DRIVER_INFO_3A;
typedef struct _DRIVER_INFO_3W DRIVER_INFO_3W;
typedef struct _DRIVER_INFO_4A DRIVER_INFO_4A;
typedef struct _DRIVER_INFO_4W DRIVER_INFO_4W;
typedef struct _DRIVER_INFO_5A DRIVER_INFO_5A;
typedef struct _DRIVER_INFO_5W DRIVER_INFO_5W;
typedef struct _DRIVER_INFO_6A DRIVER_INFO_6A;
typedef struct _DRIVER_INFO_6W DRIVER_INFO_6W;
typedef struct _PUBKEYVER3 DSSPUBKEY_VER3;
typedef struct tagDVTARGETDEVICE DVTARGETDEVICE;
typedef struct _LONG_SIZEDARR DWORD_SIZEDARR;
typedef struct tagABORTPATH EMRCLOSEFIGURE;
typedef struct tagEMREXTTEXTOUTA EMREXTTEXTOUTA;
typedef struct tagEMREXTTEXTOUTA EMREXTTEXTOUTW;
typedef struct tagABORTPATH EMRFLATTENPATH;
typedef struct tagEMRNAMEDESCAPE EMRNAMEDESCAPE;
typedef struct tagEMRPIXELFORMAT EMRPIXELFORMAT;
typedef struct tagEMRPOLYPOLYLINE EMRPOLYPOLYGON;
typedef struct tagENUMLOGFONTEXA ENUMLOGFONTEXA;
typedef struct tagENUMLOGFONTEXW ENUMLOGFONTEXW;
typedef struct _EVENTLOGRECORD EVENTLOGRECORD;
typedef struct _FAT_STATISTICS FAT_STATISTICS;
typedef struct _FLAG_STGMEDIUM FLAG_STGMEDIUM;
typedef void *HCERTSTOREPROV;
struct HENHMETAFILE__ {int unused;};
typedef struct _PSP *HPROPSHEETPAGE;
typedef struct _HYPER_SIZEDARR HYPER_SIZEDARR;
struct ICreateTypeLib {struct ICreateTypeLibVtbl *lpVtbl;};
struct IEnumFORMATETC {struct IEnumFORMATETCVtbl *lpVtbl;};
struct IFillLockBytes {struct IFillLockBytesVtbl *lpVtbl;};
struct IHttpNegotiate {struct IHttpNegotiateVtbl *lpVtbl;};
struct ILayoutStorage {struct ILayoutStorageVtbl *lpVtbl;};
struct IMessageFilter {struct IMessageFilterVtbl *lpVtbl;};
struct IOleClientSite {struct IOleClientSiteVtbl *lpVtbl;};
struct IOplockStorage {struct IOplockStorageVtbl *lpVtbl;};
struct IPersistStream {struct IPersistStreamVtbl *lpVtbl;};
struct IRpcStubBuffer {struct IRpcStubBufferVtbl *lpVtbl;};
struct IXMLDOMComment {struct IXMLDOMCommentVtbl *lpVtbl;};
struct IXMLDOMElement {struct IXMLDOMElementVtbl *lpVtbl;};
struct IXMLDSOControl {struct IXMLDSOControlVtbl *lpVtbl;};
typedef struct tagLOGCOLORSPACEA LOGCOLORSPACEA;
typedef struct tagLOGCOLORSPACEW LOGCOLORSPACEW;
typedef IBindProtocol *LPBINDPROTOCOL;
typedef struct tagCHOOSECOLORA *LPCHOOSECOLORA;
typedef struct tagCHOOSECOLORW *LPCHOOSECOLORW;
typedef IClassFactory *LPCLASSFACTORY;
typedef struct _tagCODEBASEHOLD *LPCODEBASEHOLD;
typedef struct tagCOMBOBOXINFO *LPCOMBOBOXINFO;
typedef struct _COMMTIMEOUTS *LPCOMMTIMEOUTS;
typedef struct _currencyfmtA *LPCURRENCYFMTA;
typedef struct _currencyfmtW *LPCURRENCYFMTW;
typedef struct tagCUSTDATAITEM *LPCUSTDATAITEM;
typedef struct tagCWPRETSTRUCT *LPCWPRETSTRUCT;
typedef struct tagDESIGNVECTOR *LPDESIGNVECTOR;
typedef struct _DRIVERSTATUS *LPDRIVERSTATUS;
typedef struct tagENUMLOGFONTA *LPENUMLOGFONTA;
typedef struct tagENUMLOGFONTW *LPENUMLOGFONTW;
typedef IEnumSTATDATA *LPENUMSTATDATA;
typedef struct tagFINDREPLACEA *LPFINDREPLACEA;
typedef struct tagFINDREPLACEW *LPFINDREPLACEW;
typedef struct _FORM_INFO_1A *LPFORM_INFO_1A;
typedef struct _FORM_INFO_1W *LPFORM_INFO_1W;
typedef struct tagGCP_RESULTSA *LPGCP_RESULTSA;
typedef struct tagGCP_RESULTSW *LPGCP_RESULTSW;
typedef struct _GLYPHMETRICS *LPGLYPHMETRICS;
typedef struct tagHELPWININFOA *LPHELPWININFOA;
typedef struct tagHELPWININFOW *LPHELPWININFOW;
typedef IHttpSecurity *LPHTTPSECURITY;
typedef struct tagICONMETRICSA *LPICONMETRICSA;
typedef struct tagICONMETRICSW *LPICONMETRICSW;
typedef struct _MEMORYSTATUS *LPMEMORYSTATUS;
typedef struct tagMETAFILEPICT *LPMETAFILEPICT;
typedef struct tagMIDIOUTCAPSA *LPMIDIOUTCAPSA;
typedef struct tagMIDIOUTCAPSW *LPMIDIOUTCAPSW;
typedef struct _MODEMDEVCAPS *LPMODEMDEVCAPS;
typedef struct _NETRESOURCEA *LPNETRESOURCEA;
typedef struct _NETRESOURCEW *LPNETRESOURCEW;
typedef IOleContainer *LPOLECONTAINER;
typedef struct tagPALETTEENTRY *LPPALETTEENTRY;
typedef struct _PORT_INFO_1A *LPPORT_INFO_1A;
typedef struct _PORT_INFO_1W *LPPORT_INFO_1W;
typedef struct _PORT_INFO_2A *LPPORT_INFO_2A;
typedef struct _PORT_INFO_2W *LPPORT_INFO_2W;
typedef struct _PORT_INFO_3A *LPPORT_INFO_3A;
typedef struct _PORT_INFO_3W *LPPORT_INFO_3W;
typedef struct tagRemFORMATETC *LPREMFORMATETC;
typedef struct _tagSOFTDISTINFO *LPSOFTDISTINFO;
typedef struct tagSOUNDSENTRYA *LPSOUNDSENTRYA;
typedef struct tagSOUNDSENTRYW *LPSOUNDSENTRYW;
typedef struct _STARTUPINFOA *LPSTARTUPINFOA;
typedef struct _STARTUPINFOW *LPSTARTUPINFOW;
typedef struct tagTITLEBARINFO *LPTITLEBARINFO;
typedef struct tWAVEFORMATEX *LPWAVEFORMATEX;
typedef struct tagWAVEOUTCAPSA *LPWAVEOUTCAPSA;
typedef struct tagWAVEOUTCAPSW *LPWAVEOUTCAPSW;
typedef struct _WSAQuerySetA *LPWSAQUERYSETA;
typedef struct _WSAQuerySetW *LPWSAQUERYSETW;
enum MACRO_ABSOLUTE {ABSOLUTE = 1,RELATIVE = 2,};
enum MACRO_APPCLASS {APPCLASS_STANDARD = 0x0,APPCLASS_MASK = 0xF,};
enum MACRO_ASPECTXY {ASPECTXY = 44,};
enum MACRO_AUTHTYPE {AUTHTYPE_CLIENT = 1,AUTHTYPE_SERVER = 2,};
enum MACRO_BANDINFO {BANDINFO = 24,};
enum MACRO_CALLBACK {CALLBACK_CHUNK_FINISHED = 0x0,CALLBACK_STREAM_SWITCH = 0x1,};
enum MACRO_CERT_DSS {CERT_DSS_R_LEN = 20,CERT_DSS_S_LEN = 20,CERT_DSS_SIGNATURE_LEN = 40,CERT_MAX_ASN_ENCODED_DSS_SIGNATURE_LEN = 48,};
enum MACRO_CERT_KEY {CERT_KEY_PROV_HANDLE_PROP_ID = 1,CERT_KEY_PROV_INFO_PROP_ID = 2,CERT_SHA1_HASH_PROP_ID = 3,CERT_MD5_HASH_PROP_ID = 4,CERT_HASH_PROP_ID = 3,CERT_KEY_CONTEXT_PROP_ID = 5,CERT_KEY_SPEC_PROP_ID = 6,CERT_IE30_RESERVED_PROP_ID = 7,CERT_PUBKEY_HASH_RESERVED_PROP_ID = 8,CERT_ENHKEY_USAGE_PROP_ID = 9,CERT_CTL_USAGE_PROP_ID = 9,CERT_NEXT_UPDATE_LOCATION_PROP_ID = 10,CERT_FRIENDLY_NAME_PROP_ID = 11,CERT_PVK_FILE_PROP_ID = 12,CERT_DESCRIPTION_PROP_ID = 13,CERT_ACCESS_STATE_PROP_ID = 14,CERT_SIGNATURE_HASH_PROP_ID = 15,CERT_SMART_CARD_DATA_PROP_ID = 16,CERT_EFS_PROP_ID = 17,CERT_FORTEZZA_DATA_PROP_ID = 18,CERT_ARCHIVED_PROP_ID = 19,CERT_KEY_IDENTIFIER_PROP_ID = 20,CERT_AUTO_ENROLL_PROP_ID = 21,CERT_PUBKEY_ALG_PARA_PROP_ID = 22,CERT_FIRST_RESERVED_PROP_ID = 23,CERT_LAST_RESERVED_PROP_ID = 32767,CERT_FIRST_USER_PROP_ID = 32768,CERT_LAST_USER_PROP_ID = 65535,CERT_ACCESS_STATE_WRITE_PERSIST_FLAG = 1,CERT_ACCESS_STATE_SYSTEM_STORE_FLAG = 2,CERT_SET_KEY_PROV_HANDLE_PROP_ID = 1,CERT_SET_KEY_CONTEXT_PROP_ID = 1,CERT_STORE_PROV_MSG = 1,CERT_STORE_PROV_MEMORY = 2,CERT_STORE_PROV_FILE = 3,CERT_STORE_PROV_REG = 4,CERT_STORE_PROV_PKCS7 = 5,CERT_STORE_PROV_SERIALIZED = 6,CERT_STORE_PROV_FILENAME_A = 7,CERT_STORE_PROV_FILENAME_W = 8,CERT_STORE_PROV_FILENAME = 8,CERT_STORE_PROV_SYSTEM_A = 9,CERT_STORE_PROV_SYSTEM_W = 10,CERT_STORE_PROV_SYSTEM = 10,CERT_STORE_PROV_COLLECTION = 11,CERT_STORE_PROV_SYSTEM_REGISTRY_A = 12,CERT_STORE_PROV_SYSTEM_REGISTRY_W = 13,CERT_STORE_PROV_SYSTEM_REGISTRY = 13,CERT_STORE_PROV_PHYSICAL_W = 14,CERT_STORE_PROV_PHYSICAL = 14,CERT_STORE_PROV_SMART_CARD_W = 15,CERT_STORE_PROV_SMART_CARD = 15,CERT_STORE_PROV_LDAP_W = 16,CERT_STORE_PROV_LDAP = 16,CERT_STORE_SIGNATURE_FLAG = 1,CERT_STORE_TIME_VALIDITY_FLAG = 2,CERT_STORE_REVOCATION_FLAG = 4,CERT_STORE_NO_CRL_FLAG = 65536,CERT_STORE_NO_ISSUER_FLAG = 131072,CERT_STORE_NO_CRYPT_RELEASE_FLAG = 1,CERT_STORE_SET_LOCALIZED_NAME_FLAG = 2,CERT_STORE_DEFER_CLOSE_UNTIL_LAST_FREE_FLAG = 4,CERT_STORE_DELETE_FLAG = 16,CERT_STORE_MANIFOLD_FLAG = 256,CERT_STORE_ENUM_ARCHIVED_FLAG = 512,CERT_STORE_UPDATE_KEYID_FLAG = 1024,CERT_STORE_READONLY_FLAG = 32768,CERT_STORE_OPEN_EXISTING_FLAG = 16384,CERT_STORE_CREATE_NEW_FLAG = 8192,CERT_STORE_MAXIMUM_ALLOWED_FLAG = 4096,CERT_SYSTEM_STORE_MASK = -65536,CERT_SYSTEM_STORE_RELOCATE_FLAG = -2147483648,CERT_SYSTEM_STORE_UNPROTECTED_FLAG = 1073741824,CERT_SYSTEM_STORE_LOCATION_MASK = 16711680,CERT_SYSTEM_STORE_LOCATION_SHIFT = 16,CERT_SYSTEM_STORE_CURRENT_USER_ID = 1,CERT_SYSTEM_STORE_LOCAL_MACHINE_ID = 2,CERT_SYSTEM_STORE_CURRENT_SERVICE_ID = 4,CERT_SYSTEM_STORE_SERVICES_ID = 5,CERT_SYSTEM_STORE_USERS_ID = 6,CERT_SYSTEM_STORE_CURRENT_USER_GROUP_POLICY_ID = 7,CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY_ID = 8,CERT_SYSTEM_STORE_LOCAL_MACHINE_ENTERPRISE_ID = 9,CERT_SYSTEM_STORE_CURRENT_USER = 65536,CERT_SYSTEM_STORE_LOCAL_MACHINE = 131072,CERT_SYSTEM_STORE_CURRENT_SERVICE = 262144,CERT_SYSTEM_STORE_SERVICES = 327680,CERT_SYSTEM_STORE_USERS = 393216,CERT_SYSTEM_STORE_CURRENT_USER_GROUP_POLICY = 458752,CERT_SYSTEM_STORE_LOCAL_MACHINE_GROUP_POLICY = 524288,CERT_SYSTEM_STORE_LOCAL_MACHINE_ENTERPRISE = 589824,CERT_PROT_ROOT_DISABLE_CURRENT_USER_FLAG = 1,CERT_PROT_ROOT_INHIBIT_ADD_AT_INIT_FLAG = 2,CERT_PROT_ROOT_INHIBIT_PURGE_LM_FLAG = 4,CERT_PROT_ROOT_ONLY_LM_GPT_FLAG = 8,CERT_REGISTRY_STORE_REMOTE_FLAG = 65536,CERT_REGISTRY_STORE_SERIALIZED_FLAG = 131072,CERT_REGISTRY_STORE_CLIENT_GPT_FLAG = -2147483648,CERT_REGISTRY_STORE_LM_GPT_FLAG = 16777216,CERT_REGISTRY_STORE_ROAMING_FLAG = 262144,CERT_REGISTRY_STORE_MY_IE_DIRTY_FLAG = 524288,CERT_FILE_STORE_COMMIT_ENABLE_FLAG = 65536,CERT_STORE_PROV_EXTERNAL_FLAG = 1,CERT_STORE_PROV_DELETED_FLAG = 2,CERT_STORE_PROV_NO_PERSIST_FLAG = 4,CERT_STORE_PROV_SYSTEM_STORE_FLAG = 8,CERT_STORE_PROV_CLOSE_FUNC = 0,CERT_STORE_PROV_READ_CERT_FUNC = 1,CERT_STORE_PROV_WRITE_CERT_FUNC = 2,CERT_STORE_PROV_DELETE_CERT_FUNC = 3,CERT_STORE_PROV_SET_CERT_PROPERTY_FUNC = 4,CERT_STORE_PROV_READ_CRL_FUNC = 5,CERT_STORE_PROV_WRITE_CRL_FUNC = 6,CERT_STORE_PROV_DELETE_CRL_FUNC = 7,CERT_STORE_PROV_SET_CRL_PROPERTY_FUNC = 8,CERT_STORE_PROV_READ_CTL_FUNC = 9,CERT_STORE_PROV_WRITE_CTL_FUNC = 10,CERT_STORE_PROV_DELETE_CTL_FUNC = 11,CERT_STORE_PROV_SET_CTL_PROPERTY_FUNC = 12,CERT_STORE_PROV_CONTROL_FUNC = 13,CERT_STORE_PROV_FIND_CERT_FUNC = 14,CERT_STORE_PROV_FREE_FIND_CERT_FUNC = 15,CERT_STORE_PROV_GET_CERT_PROPERTY_FUNC = 16,CERT_STORE_PROV_FIND_CRL_FUNC = 17,CERT_STORE_PROV_FREE_FIND_CRL_FUNC = 18,CERT_STORE_PROV_GET_CRL_PROPERTY_FUNC = 19,CERT_STORE_PROV_FIND_CTL_FUNC = 20,CERT_STORE_PROV_FREE_FIND_CTL_FUNC = 21,CERT_STORE_PROV_GET_CTL_PROPERTY_FUNC = 22,CERT_STORE_PROV_WRITE_ADD_FLAG = 1,CERT_STORE_SAVE_AS_STORE = 1,CERT_STORE_SAVE_AS_PKCS7 = 2,CERT_STORE_SAVE_TO_FILE = 1,CERT_STORE_SAVE_TO_MEMORY = 2,CERT_STORE_SAVE_TO_FILENAME_A = 3,CERT_STORE_SAVE_TO_FILENAME_W = 4,CERT_STORE_SAVE_TO_FILENAME = 4,CERT_CLOSE_STORE_FORCE_FLAG = 1,CERT_CLOSE_STORE_CHECK_FLAG = 2,CERT_COMPARE_MASK = 65535,CERT_COMPARE_SHIFT = 16,CERT_COMPARE_ANY = 0,CERT_COMPARE_SHA1_HASH = 1,CERT_COMPARE_NAME = 2,CERT_COMPARE_ATTR = 3,CERT_COMPARE_MD5_HASH = 4,CERT_COMPARE_PROPERTY = 5,CERT_COMPARE_PUBLIC_KEY = 6,CERT_COMPARE_HASH = 1,CERT_COMPARE_NAME_STR_A = 7,CERT_COMPARE_NAME_STR_W = 8,CERT_COMPARE_KEY_SPEC = 9,CERT_COMPARE_ENHKEY_USAGE = 10,CERT_COMPARE_CTL_USAGE = 10,CERT_COMPARE_SUBJECT_CERT = 11,CERT_COMPARE_ISSUER_OF = 12,CERT_COMPARE_EXISTING = 13,CERT_COMPARE_SIGNATURE_HASH = 14,CERT_COMPARE_KEY_IDENTIFIER = 15,CERT_COMPARE_CERT_ID = 16,CERT_FIND_ANY = 0,CERT_FIND_SHA1_HASH = 65536,CERT_FIND_MD5_HASH = 262144,CERT_FIND_SIGNATURE_HASH = 917504,CERT_FIND_KEY_IDENTIFIER = 983040,CERT_FIND_HASH = 65536,CERT_FIND_PROPERTY = 327680,CERT_FIND_PUBLIC_KEY = 393216,CERT_FIND_SUBJECT_NAME = 131079,CERT_FIND_SUBJECT_ATTR = 196615,CERT_FIND_ISSUER_NAME = 131076,CERT_FIND_ISSUER_ATTR = 196612,CERT_FIND_SUBJECT_STR_A = 458759,CERT_FIND_SUBJECT_STR_W = 524295,CERT_FIND_SUBJECT_STR = 524295,CERT_FIND_ISSUER_STR_A = 458756,CERT_FIND_ISSUER_STR_W = 524292,CERT_FIND_ISSUER_STR = 524292,CERT_FIND_KEY_SPEC = 589824,CERT_FIND_ENHKEY_USAGE = 655360,CERT_FIND_CTL_USAGE = 655360,CERT_FIND_SUBJECT_CERT = 720896,CERT_FIND_ISSUER_OF = 786432,CERT_FIND_EXISTING = 851968,CERT_FIND_CERT_ID = 1048576,CERT_FIND_OPTIONAL_ENHKEY_USAGE_FLAG = 1,CERT_FIND_EXT_ONLY_ENHKEY_USAGE_FLAG = 2,CERT_FIND_PROP_ONLY_ENHKEY_USAGE_FLAG = 4,CERT_FIND_NO_ENHKEY_USAGE_FLAG = 8,CERT_FIND_OR_ENHKEY_USAGE_FLAG = 16,CERT_FIND_VALID_ENHKEY_USAGE_FLAG = 32,CERT_FIND_OPTIONAL_CTL_USAGE_FLAG = 1,CERT_FIND_EXT_ONLY_CTL_USAGE_FLAG = 2,CERT_FIND_PROP_ONLY_CTL_USAGE_FLAG = 4,CERT_FIND_NO_CTL_USAGE_FLAG = 8,CERT_FIND_OR_CTL_USAGE_FLAG = 16,CERT_FIND_VALID_CTL_USAGE_FLAG = 32,CERT_SET_PROPERTY_IGNORE_PERSIST_ERROR_FLAG = -2147483648,};
enum MACRO_CHAR_MIN {CHAR_MIN = -128,CHAR_MAX = 127,};
enum MACRO_CLIPCAPS {CLIPCAPS = 36,};
enum MACRO_CLRBREAK {CLRBREAK = 9,};
enum MACRO_CMSG_KEY {CMSG_KEY_AGREE_EPHEMERAL_KEY_CHOICE = 1,CMSG_KEY_AGREE_STATIC_KEY_CHOICE = 2,CMSG_MAIL_LIST_HANDLE_KEY_CHOICE = 1,CMSG_KEY_TRANS_RECIPIENT = 1,CMSG_KEY_AGREE_RECIPIENT = 2,CMSG_MAIL_LIST_RECIPIENT = 3,CMSG_SP3_COMPATIBLE_ENCRYPT_FLAG = -2147483648,CMSG_RC4_NO_SALT_FLAG = 1073741824,CMSG_INDEFINITE_LENGTH = -1,CMSG_BARE_CONTENT_FLAG = 1,CMSG_LENGTH_ONLY_FLAG = 2,CMSG_DETACHED_FLAG = 4,CMSG_AUTHENTICATED_ATTRIBUTES_FLAG = 8,CMSG_CONTENTS_OCTETS_FLAG = 16,CMSG_MAX_LENGTH_FLAG = 32,CMSG_CMS_ENCAPSULATED_CONTENT_FLAG = 64,CMSG_CRYPT_RELEASE_CONTEXT_FLAG = 32768,CMSG_TYPE_PARAM = 1,CMSG_CONTENT_PARAM = 2,CMSG_BARE_CONTENT_PARAM = 3,CMSG_INNER_CONTENT_TYPE_PARAM = 4,CMSG_SIGNER_COUNT_PARAM = 5,CMSG_SIGNER_INFO_PARAM = 6,CMSG_SIGNER_CERT_INFO_PARAM = 7,CMSG_SIGNER_HASH_ALGORITHM_PARAM = 8,CMSG_SIGNER_AUTH_ATTR_PARAM = 9,CMSG_SIGNER_UNAUTH_ATTR_PARAM = 10,CMSG_CERT_COUNT_PARAM = 11,CMSG_CERT_PARAM = 12,CMSG_CRL_COUNT_PARAM = 13,CMSG_CRL_PARAM = 14,CMSG_ENVELOPE_ALGORITHM_PARAM = 15,CMSG_RECIPIENT_COUNT_PARAM = 17,CMSG_RECIPIENT_INDEX_PARAM = 18,CMSG_RECIPIENT_INFO_PARAM = 19,CMSG_HASH_ALGORITHM_PARAM = 20,CMSG_HASH_DATA_PARAM = 21,CMSG_COMPUTED_HASH_PARAM = 22,CMSG_ENCRYPT_PARAM = 26,CMSG_ENCRYPTED_DIGEST = 27,CMSG_ENCODED_SIGNER = 28,CMSG_ENCODED_MESSAGE = 29,CMSG_VERSION_PARAM = 30,CMSG_ATTR_CERT_COUNT_PARAM = 31,CMSG_ATTR_CERT_PARAM = 32,CMSG_CMS_RECIPIENT_COUNT_PARAM = 33,CMSG_CMS_RECIPIENT_INDEX_PARAM = 34,CMSG_CMS_RECIPIENT_ENCRYPTED_KEY_INDEX_PARAM = 35,CMSG_CMS_RECIPIENT_INFO_PARAM = 36,CMSG_UNPROTECTED_ATTR_PARAM = 37,CMSG_SIGNER_CERT_ID_PARAM = 38,CMSG_CMS_SIGNER_INFO_PARAM = 39,CMSG_SIGNED_DATA_V1 = 1,CMSG_SIGNED_DATA_V3 = 3,CMSG_SIGNED_DATA_PKCS_1_5_VERSION = 1,CMSG_SIGNED_DATA_CMS_VERSION = 3,CMSG_SIGNER_INFO_V1 = 1,CMSG_SIGNER_INFO_V3 = 3,CMSG_SIGNER_INFO_PKCS_1_5_VERSION = 1,CMSG_SIGNER_INFO_CMS_VERSION = 3,CMSG_HASHED_DATA_V0 = 0,CMSG_HASHED_DATA_V2 = 2,CMSG_HASHED_DATA_PKCS_1_5_VERSION = 0,CMSG_HASHED_DATA_CMS_VERSION = 2,CMSG_ENVELOPED_DATA_V0 = 0,CMSG_ENVELOPED_DATA_V2 = 2,CMSG_ENVELOPED_DATA_PKCS_1_5_VERSION = 0,CMSG_ENVELOPED_DATA_CMS_VERSION = 2,CMSG_KEY_AGREE_ORIGINATOR_CERT = 1,CMSG_KEY_AGREE_ORIGINATOR_PUBLIC_KEY = 2,CMSG_ENVELOPED_RECIPIENT_V0 = 0,CMSG_ENVELOPED_RECIPIENT_V2 = 2,CMSG_ENVELOPED_RECIPIENT_V3 = 3,CMSG_ENVELOPED_RECIPIENT_V4 = 4,CMSG_KEY_TRANS_PKCS_1_5_VERSION = 0,CMSG_KEY_TRANS_CMS_VERSION = 2,CMSG_KEY_AGREE_VERSION = 3,CMSG_MAIL_LIST_VERSION = 4,CMSG_CTRL_VERIFY_SIGNATURE = 1,CMSG_CTRL_DECRYPT = 2,CMSG_CTRL_VERIFY_HASH = 5,CMSG_CTRL_ADD_SIGNER = 6,CMSG_CTRL_DEL_SIGNER = 7,CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR = 8,CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR = 9,CMSG_CTRL_ADD_CERT = 10,CMSG_CTRL_DEL_CERT = 11,CMSG_CTRL_ADD_CRL = 12,CMSG_CTRL_DEL_CRL = 13,CMSG_CTRL_ADD_ATTR_CERT = 14,CMSG_CTRL_DEL_ATTR_CERT = 15,CMSG_CTRL_KEY_TRANS_DECRYPT = 16,CMSG_CTRL_KEY_AGREE_DECRYPT = 17,CMSG_CTRL_MAIL_LIST_DECRYPT = 18,CMSG_CTRL_VERIFY_SIGNATURE_EX = 19,CMSG_CTRL_ADD_CMS_SIGNER_INFO = 20,CMSG_VERIFY_SIGNER_PUBKEY = 1,CMSG_VERIFY_SIGNER_CERT = 2,CMSG_VERIFY_SIGNER_CHAIN = 3,CMSG_DEFAULT_INSTALLABLE_FUNC_OID = 1,CMSG_CONTENT_ENCRYPT_PAD_ENCODED_LEN_FLAG = 1,CMSG_CONTENT_ENCRYPT_FREE_PARA_FLAG = 1,CMSG_CONTENT_ENCRYPT_RELEASE_CONTEXT_FLAG = 32768,CMSG_KEY_TRANS_ENCRYPT_FREE_PARA_FLAG = 1,CMSG_KEY_AGREE_ENCRYPT_FREE_PARA_FLAG = 1,CMSG_KEY_AGREE_ENCRYPT_FREE_MATERIAL_FLAG = 2,CMSG_KEY_AGREE_ENCRYPT_FREE_PUBKEY_ALG_FLAG = 4,CMSG_KEY_AGREE_ENCRYPT_FREE_PUBKEY_PARA_FLAG = 8,CMSG_KEY_AGREE_ENCRYPT_FREE_PUBKEY_BITS_FLAG = 16,CMSG_MAIL_LIST_ENCRYPT_FREE_PARA_FLAG = 1,};
enum MACRO_COLORRES {COLORRES = 108,};
enum MACRO_COMMPROP {COMMPROP_INITIALIZED = 0xE73CF52E,};
enum MACRO_COPYFILE {COPYFILE_SIS_LINK = 0x1,COPYFILE_SIS_REPLACE = 0x2,COPYFILE_SIS_FLAGS = 0x3,};
enum MACRO_CRL_FIND {CRL_FIND_ANY = 0,CRL_FIND_ISSUED_BY = 1,CRL_FIND_EXISTING = 2,CRL_FIND_ISSUED_BY_AKI_FLAG = 1,CRL_FIND_ISSUED_BY_SIGNATURE_FLAG = 2,};
enum MACRO_CTLCOLOR {CTLCOLOR_MSGBOX = 0,CTLCOLOR_EDIT = 1,CTLCOLOR_LISTBOX = 2,CTLCOLOR_BTN = 3,CTLCOLOR_DLG = 4,CTLCOLOR_SCROLLBAR = 5,CTLCOLOR_STATIC = 6,CTLCOLOR_MAX = 7,};
enum MACRO_DATABITS {DATABITS_5 = 0x1,DATABITS_6 = 0x2,DATABITS_7 = 0x4,DATABITS_8 = 0x8,DATABITS_16 = 0x10,DATABITS_16X = 0x20,};
enum MACRO_DC_BRUSH {DC_BRUSH = 18,DC_PEN = 19,};
enum MACRO_DETACHED {DETACHED_PROCESS = 0x8,};
enum MACRO_DISPATCH {DISPATCH_METHOD = 0x1,DISPATCH_PROPERTYGET = 0x2,DISPATCH_PROPERTYPUT = 0x4,DISPATCH_PROPERTYPUTREF = 0x8,};
enum MACRO_DMDITHER {DMDITHER_NONE = 1,DMDITHER_COARSE = 2,DMDITHER_FINE = 3,DMDITHER_LINEART = 4,DMDITHER_ERRORDIFFUSION = 5,DMDITHER_RESERVED6 = 6,DMDITHER_RESERVED7 = 7,DMDITHER_RESERVED8 = 8,DMDITHER_RESERVED9 = 9,DMDITHER_GRAYSCALE = 10,DMDITHER_USER = 256,};
enum MACRO_DMORIENT {DMORIENT_PORTRAIT = 1,DMORIENT_LANDSCAPE = 2,};
enum MACRO_DOCKINFO {DOCKINFO_UNDOCKED = 0x1,DOCKINFO_DOCKED = 0x2,DOCKINFO_USER_SUPPLIED = 0x4,DOCKINFO_USER_UNDOCKED = 0x5,DOCKINFO_USER_DOCKED = 0x6,};
enum MACRO_DRAGDROP {DRAGDROP_E_FIRST = 0x80040100,DRAGDROP_E_LAST = 0x8004010F,DRAGDROP_S_FIRST = 0x40100,DRAGDROP_S_LAST = 0x4010F,};
enum MACRO_ENHANCED {ENHANCED_KEY = 0x100,};
enum MACRO_ENUM_ALL {ENUM_ALL_CALENDARS = 0xFFFFFFFF,};
enum MACRO_EVENTLOG {EVENTLOG_SEQUENTIAL_READ = 0x1,EVENTLOG_SEEK_READ = 0x2,EVENTLOG_FORWARDS_READ = 0x4,EVENTLOG_BACKWARDS_READ = 0x8,EVENTLOG_SUCCESS = 0x0,EVENTLOG_ERROR_TYPE = 0x1,EVENTLOG_WARNING_TYPE = 0x2,EVENTLOG_INFORMATION_TYPE = 0x4,EVENTLOG_AUDIT_SUCCESS = 0x8,EVENTLOG_AUDIT_FAILURE = 0x10,EVENTLOG_START_PAIRED_EVENT = 0x1,EVENTLOG_END_PAIRED_EVENT = 0x2,EVENTLOG_END_ALL_PAIRED_EVENTS = 0x4,EVENTLOG_PAIRED_EVENT_ACTIVE = 0x8,EVENTLOG_PAIRED_EVENT_INACTIVE = 0x10,};
enum MACRO_FACILITY {FACILITY_WINDOWS = 8,FACILITY_URT = 19,FACILITY_STORAGE = 3,FACILITY_SSPI = 9,FACILITY_SCARD = 16,FACILITY_SETUPAPI = 15,FACILITY_SECURITY = 9,FACILITY_RPC = 1,FACILITY_WIN32 = 7,FACILITY_CONTROL = 10,FACILITY_NULL = 0,FACILITY_MSMQ = 14,FACILITY_MEDIASERVER = 13,FACILITY_INTERNET = 12,FACILITY_ITF = 4,FACILITY_DISPATCH = 2,FACILITY_COMPLUS = 17,FACILITY_CERT = 11,FACILITY_AAF = 18,};
enum MACRO_FILENAME {FILENAME_MAX = 260,RAND_MAX = 32767,LRAND_MAX = 2147483647,};
enum MACRO_FILE_ANY {FILE_ANY_ACCESS = 0,FILE_SPECIAL_ACCESS = 0,FILE_READ_ACCESS = 1,FILE_WRITE_ACCESS = 2,};
enum MACRO_FILE_MAP {FILE_MAP_COPY = 1,FILE_MAP_WRITE = 2,FILE_MAP_READ = 4,FILE_MAP_ALL_ACCESS = 983071,};
enum MACRO_FILE_SET {FILE_SET_ENCRYPTION = 0x1,FILE_CLEAR_ENCRYPTION = 0x2,};
enum MACRO_FONTTYPE {RASTER_FONTTYPE = 0x1,DEVICE_FONTTYPE = 0x2,TRUETYPE_FONTTYPE = 0x4,};
enum MACRO_FVIRTKEY {FVIRTKEY = 1,FNOINVERT = 2,FSHIFT = 4,FCONTROL = 8,FALT = 16,};
enum MACRO_GCPCLASS {GCPCLASS_LATIN = 1,GCPCLASS_HEBREW = 2,GCPCLASS_ARABIC = 2,GCPCLASS_NEUTRAL = 3,GCPCLASS_LOCALNUMBER = 4,GCPCLASS_LATINNUMBER = 5,GCPCLASS_LATINNUMERICTERMINATOR = 6,GCPCLASS_LATINNUMERICSEPARATOR = 7,GCPCLASS_NUMERICSEPARATOR = 8,GCPCLASS_PREBOUNDLTR = 128,GCPCLASS_PREBOUNDRTL = 64,GCPCLASS_POSTBOUNDLTR = 32,GCPCLASS_POSTBOUNDRTL = 16,};
enum MACRO_GCPGLYPH {GCPGLYPH_LINKBEFORE = 0x8000,GCPGLYPH_LINKAFTER = 0x4000,};
enum MACRO_GRADIENT {GRADIENT_FILL_RECT_H = 0x0,GRADIENT_FILL_RECT_V = 0x1,GRADIENT_FILL_TRIANGLE = 0x2,GRADIENT_FILL_OP_FLAG = 0xFF,};
enum MACRO_HELPINFO {HELPINFO_WINDOW = 0x1,HELPINFO_MENUITEM = 0x2,};
enum MACRO_HTBORDER {HTBORDER = 18,};
enum MACRO_HTBOTTOM {HTBOTTOM = 15,HTBOTTOMLEFT = 16,};
enum MACRO_HTOBJECT {HTOBJECT = 19,};
enum MACRO_HTREDUCE {HTREDUCE = 8,};
enum MACRO_HWND_TOP {HWND_TOP = 0,HWND_BOTTOM = 1,HWND_TOPMOST = -1,HWND_NOTOPMOST = -2,};
enum MACRO_IDIGNORE {IDIGNORE = 5,};
enum MACRO_IME_PROP {IME_PROP_AT_CARET = 0x10000,IME_PROP_SPECIAL_UI = 0x20000,IME_PROP_CANDLIST_START_FROM_1 = 0x40000,IME_PROP_UNICODE = 0x80000,IME_PROP_COMPLETE_ON_UNSELECT = 0x100000,};
enum MACRO_IOC_UNIX {IOC_UNIX = 0x0,IOC_WS2 = 0x8000000,IOC_PROTOCOL = 0x10000000,IOC_VENDOR = 0x18000000,};
enum MACRO_LINECAPS {LINECAPS = 30,POLYGONALCAPS = 32,};
enum MACRO_LOCKFILE {LOCKFILE_FAIL_IMMEDIATELY = 0x1,LOCKFILE_EXCLUSIVE_LOCK = 0x2,};
enum MACRO_MAILSLOT {MAILSLOT_NO_MESSAGE = 4294967295,MAILSLOT_WAIT_FOREVER = 4294967295,};
enum MACRO_MAXDRIVE {MAXDRIVE = 3,};
enum MACRO_MAXDWORD {MAXDWORD = 0xFFFFFFFF,};
enum MACRO_MAXSHORT {MAXSHORT = 0x7FFF,};
enum MACRO_MAX_LANA {MAX_LANA = 254,};
enum MACRO_MAX_PATH {MAX_PATH = 260,};
enum MACRO_MAX_PERF {MAX_PERF_OBJECTS_IN_QUERY_FUNCTION = 8,};
enum MACRO_MAX_SIZE {MAX_SIZE_SECURITY_ID = 512,};
enum MACRO_MEMBERID {MEMBERID_NIL = -1,};
enum MACRO_METAFILE {METAFILE_DRIVER = 2049,};
enum MACRO_MIDICAPS {MIDICAPS_VOLUME = 0x1,MIDICAPS_LRVOLUME = 0x2,MIDICAPS_CACHE = 0x4,MIDICAPS_STREAM = 0x8,};
enum MACRO_MIDIPROP {MIDIPROP_SET = 0x80000000,MIDIPROP_GET = 0x40000000,MIDIPROP_TIMEDIV = 0x1,MIDIPROP_TEMPO = 0x2,};
enum MACRO_MIDISTRM {MIDISTRM_ERROR = -2,};
enum MACRO_MIM_OPEN {MIM_OPEN = 961,MIM_CLOSE = 962,MIM_DATA = 963,MIM_LONGDATA = 964,MIM_ERROR = 965,MIM_LONGERROR = 966,};
enum MACRO_MMSYSERR {MMSYSERR_NOERROR = 0,MMSYSERR_ERROR = 1,MMSYSERR_BADDEVICEID = 2,MMSYSERR_NOTENABLED = 3,MMSYSERR_ALLOCATED = 4,MMSYSERR_INVALHANDLE = 5,MMSYSERR_NODRIVER = 6,MMSYSERR_NOMEM = 7,MMSYSERR_NOTSUPPORTED = 8,MMSYSERR_BADERRNUM = 9,MMSYSERR_INVALFLAG = 10,MMSYSERR_INVALPARAM = 11,MMSYSERR_HANDLEBUSY = 12,MMSYSERR_INVALIDALIAS = 13,MMSYSERR_BADDB = 14,MMSYSERR_KEYNOTFOUND = 15,MMSYSERR_READERROR = 16,MMSYSERR_WRITEERROR = 17,MMSYSERR_DELETEERROR = 18,MMSYSERR_VALNOTFOUND = 19,MMSYSERR_NODRIVERCB = 20,MMSYSERR_LASTERROR = 20,};
enum MACRO_MOD_LEFT {MOD_LEFT = 0x8000,MOD_RIGHT = 0x4000,MOD_ON_KEYUP = 0x800,MOD_IGNORE_ALL_MODIFIER = 0x400,};
enum MACRO_MOVEFILE {MOVEFILE_REPLACE_EXISTING = 0x1,MOVEFILE_COPY_ALLOWED = 0x2,MOVEFILE_DELAY_UNTIL_REBOOT = 0x4,MOVEFILE_WRITE_THROUGH = 0x8,MOVEFILE_CREATE_HARDLINK = 0x10,MOVEFILE_FAIL_IF_NOT_TRACKABLE = 0x20,};
enum MACRO_NCBASTAT {NCBASTAT = 0x33,};
enum MACRO_NCBNAMSZ {NCBNAMSZ = 16,};
enum MACRO_NCBRESET {NCBRESET = 0x32,};
enum MACRO_NCBSSTAT {NCBSSTAT = 0x34,};
enum MACRO_NCBTRACE {NCBTRACE = 0x79,ASYNCH = 0x80,};
enum MACRO_NETSCAPE {NETSCAPE_SSL_CLIENT_AUTH_CERT_TYPE = 0x80,NETSCAPE_SSL_SERVER_AUTH_CERT_TYPE = 0x40,NETSCAPE_SMIME_CERT_TYPE = 0x20,NETSCAPE_SIGN_CERT_TYPE = 0x10,NETSCAPE_SSL_CA_CERT_TYPE = 0x4,NETSCAPE_SMIME_CA_CERT_TYPE = 0x2,NETSCAPE_SIGN_CA_CERT_TYPE = 0x1,};
enum MACRO_NEWFRAME {NEWFRAME = 1,ABORTDOC = 2,};
enum MACRO_NEXTBAND {NEXTBAND = 3,SETCOLORTABLE = 4,};
enum MACRO_NOPARITY {NOPARITY = 0,ODDPARITY = 1,EVENPARITY = 2,};
enum MACRO_NUMFONTS {NUMFONTS = 22,};
enum MACRO_OBSOLETE {OBSOLETE_IOCTL_STORAGE_RESET_BUS = 0x2DD000,OBSOLETE_IOCTL_STORAGE_RESET_DEVICE = 0x2DD004,};
enum MACRO_OLEIVERB {OLEIVERB_PRIMARY = 0,OLEIVERB_SHOW = -1,OLEIVERB_OPEN = -2,OLEIVERB_HIDE = -3,OLEIVERB_UIACTIVATE = -4,OLEIVERB_INPLACEACTIVATE = -5,OLEIVERB_DISCARDUNDOSTATE = -6,};
enum MACRO_O_APPEND {O_APPEND = 0x800,O_CHANGED = 0x1000,O_DEVICE = 0x2000,O_TEXT = 0x4000,O_BINARY = 0x8000,O_NOINHERIT = 0x80,O_DENYALL = 0x10,O_DENYWRITE = 0x20,O_DENYREAD = 0x30,O_DENYNONE = 0x40,};
enum MACRO_PATPAINT {PATPAINT = 0xFB0A09,};
enum MACRO_PKCS_CTL {PKCS_CTL = 37,};
enum MACRO_PKCS_RC2 {PKCS_RC2_CBC_PARAMETERS = 41,PKCS_SMIME_CAPABILITIES = 42,PKCS_RSA_PRIVATE_KEY = 43,PKCS_PRIVATE_KEY_INFO = 44,PKCS_ENCRYPTED_PRIVATE_KEY_INFO = 45,};
enum MACRO_PKCS_UTC {PKCS_UTC_TIME = 17,PKCS_TIME_REQUEST = 18,};
enum MACRO_POLYFILL {POLYFILL_LAST = 2,};
enum MACRO_POSITIVE {POSITIVE_INFINITY_RATE = 0xFFFFFFFE,};
enum MACRO_PRIORITY {NO_PRIORITY = 0,MAX_PRIORITY = 99,MIN_PRIORITY = 1,DEF_PRIORITY = 1,};
enum MACRO_PROGRESS {PROGRESS_CONTINUE = 0,PROGRESS_CANCEL = 1,PROGRESS_STOP = 2,PROGRESS_QUIET = 3,};
enum MACRO_PROTOCOL {BASE_PROTOCOL = 1,LAYERED_PROTOCOL = 0,};
enum MACRO_PROVIDER {PROVIDER_KEEPS_VALUE_LENGTH = 0x1,};
enum MACRO_PSINJECT {PSINJECT_BEGINSTREAM = 1,PSINJECT_PSADOBE = 2,PSINJECT_PAGESATEND = 3,PSINJECT_PAGES = 4,PSINJECT_DOCNEEDEDRES = 5,PSINJECT_DOCSUPPLIEDRES = 6,PSINJECT_PAGEORDER = 7,PSINJECT_ORIENTATION = 8,PSINJECT_BOUNDINGBOX = 9,PSINJECT_DOCUMENTPROCESSCOLORS = 10,PSINJECT_COMMENTS = 11,PSINJECT_BEGINDEFAULTS = 12,PSINJECT_ENDDEFAULTS = 13,PSINJECT_BEGINPROLOG = 14,PSINJECT_ENDPROLOG = 15,PSINJECT_BEGINSETUP = 16,PSINJECT_ENDSETUP = 17,PSINJECT_TRAILER = 18,PSINJECT_EOF = 19,PSINJECT_ENDSTREAM = 20,PSINJECT_DOCUMENTPROCESSCOLORSATEND = 21,PSINJECT_PAGENUMBER = 100,PSINJECT_BEGINPAGESETUP = 101,PSINJECT_ENDPAGESETUP = 102,PSINJECT_PAGETRAILER = 103,PSINJECT_PLATECOLOR = 104,PSINJECT_SHOWPAGE = 105,PSINJECT_PAGEBBOX = 106,PSINJECT_ENDPAGECOMMENTS = 107,PSINJECT_VMSAVE = 200,PSINJECT_VMRESTORE = 201,};
enum MACRO_RESETDEV {RESETDEV = 7,SETBREAK = 8,};
enum MACRO_RESOURCE {RESOURCE_CONNECTED = 0x1,RESOURCE_GLOBALNET = 0x2,RESOURCE_REMEMBERED = 0x3,RESOURCE_RECENT = 0x4,RESOURCE_CONTEXT = 0x5,};
enum MACRO_ROTFLAGS {ROTFLAGS_REGISTRATIONKEEPSALIVE = 0x1,ROTFLAGS_ALLOWANYCLIENT = 0x2,};
enum MACRO_RPC_C_EP {RPC_C_EP_ALL_ELTS = 0,RPC_C_EP_MATCH_BY_IF = 1,RPC_C_EP_MATCH_BY_OBJ = 2,RPC_C_EP_MATCH_BY_BOTH = 3,RPC_C_VERS_ALL = 1,RPC_C_VERS_COMPATIBLE = 2,RPC_C_VERS_EXACT = 3,RPC_C_VERS_MAJOR_ONLY = 4,RPC_C_VERS_UPTO = 5,RPC_C_MGMT_INQ_IF_IDS = 0,RPC_C_MGMT_INQ_PRINC_NAME = 1,RPC_C_MGMT_INQ_STATS = 2,RPC_C_MGMT_IS_SERVER_LISTEN = 3,RPC_C_MGMT_STOP_SERVER_LISTEN = 4,RPC_C_PARM_MAX_PACKET_LENGTH = 1,RPC_C_PARM_BUFFER_LENGTH = 2,RPC_IF_AUTOLISTEN = 1,RPC_IF_OLE = 2,RPC_IF_ALLOW_UNKNOWN_AUTHORITY = 4,RPC_IF_ALLOW_SECURE_ONLY = 8,RPC_CONTEXT_HANDLE_DEFAULT_GUARD = -4083,RPC_CONTEXT_HANDLE_DEFAULT_FLAGS = 0,RPC_CONTEXT_HANDLE_FLAGS = 805306368,RPC_CONTEXT_HANDLE_SERIALIZE = 268435456,RPC_CONTEXT_HANDLE_DONT_SERIALIZE = 536870912,RPC_NCA_FLAGS_DEFAULT = 0,RPC_NCA_FLAGS_IDEMPOTENT = 1,RPC_NCA_FLAGS_BROADCAST = 2,RPC_NCA_FLAGS_MAYBE = 4,RPC_BUFFER_COMPLETE = 4096,RPC_BUFFER_PARTIAL = 8192,RPC_BUFFER_EXTRA = 16384,RPC_BUFFER_ASYNC = 32768,RPC_BUFFER_NONOTIFY = 65536,};
enum MACRO_RPC_C_NS {RPC_C_NS_SYNTAX_DEFAULT = 0,RPC_C_NS_SYNTAX_DCE = 3,RPC_C_PROFILE_DEFAULT_ELT = 0,RPC_C_PROFILE_ALL_ELT = 1,RPC_C_PROFILE_ALL_ELTS = 1,RPC_C_PROFILE_MATCH_BY_IF = 2,RPC_C_PROFILE_MATCH_BY_MBR = 3,RPC_C_PROFILE_MATCH_BY_BOTH = 4,RPC_C_NS_DEFAULT_EXP_AGE = -1,RPC_S_OK = 0,RPC_S_INVALID_ARG = 87,RPC_S_OUT_OF_MEMORY = 14,RPC_S_OUT_OF_THREADS = 164,RPC_S_INVALID_LEVEL = 87,RPC_S_BUFFER_TOO_SMALL = 122,RPC_S_INVALID_SECURITY_DESC = 1338,RPC_S_ACCESS_DENIED = 5,RPC_S_SERVER_OUT_OF_MEMORY = 1130,RPC_S_ASYNC_CALL_PENDING = 997,RPC_S_UNKNOWN_PRINCIPAL = 1332,RPC_S_TIMEOUT = 1460,RPC_X_NO_MEMORY = 14,RPC_X_INVALID_BOUND = 1734,RPC_X_INVALID_TAG = 1733,RPC_X_ENUM_VALUE_TOO_LARGE = 1781,RPC_X_SS_CONTEXT_MISMATCH = 6,RPC_X_INVALID_BUFFER = 1784,RPC_X_PIPE_APP_MEMORY = 14,RPC_X_INVALID_PIPE_OPERATION = 1831,RPC_C_NOTIFY_ON_SEND_COMPLETE = 1,RPC_C_INFINITE_TIMEOUT = -1,};
enum MACRO_SCHANNEL {SCHANNEL_MAC_KEY = 0x0,SCHANNEL_ENC_KEY = 0x1,};
enum MACRO_SC_GROUP {SC_GROUP_IDENTIFIERW = 43,SC_GROUP_IDENTIFIERA = 43,SC_GROUP_IDENTIFIER = 43,};
enum MACRO_SECURITY {SECURITY_NULL_RID = 0x0,SECURITY_WORLD_RID = 0x0,SECURITY_LOCAL_RID = 0x0,SECURITY_CREATOR_OWNER_RID = 0x0,SECURITY_CREATOR_GROUP_RID = 0x1,SECURITY_CREATOR_OWNER_SERVER_RID = 0x2,SECURITY_CREATOR_GROUP_SERVER_RID = 0x3,SECURITY_DIALUP_RID = 0x1,SECURITY_NETWORK_RID = 0x2,SECURITY_BATCH_RID = 0x3,SECURITY_INTERACTIVE_RID = 0x4,SECURITY_SERVICE_RID = 0x6,SECURITY_ANONYMOUS_LOGON_RID = 0x7,SECURITY_PROXY_RID = 0x8,SECURITY_ENTERPRISE_CONTROLLERS_RID = 0x9,SECURITY_SERVER_LOGON_RID = 0x9,SECURITY_PRINCIPAL_SELF_RID = 0xA,SECURITY_AUTHENTICATED_USER_RID = 0xB,SECURITY_RESTRICTED_CODE_RID = 0xC,SECURITY_TERMINAL_SERVER_RID = 0xD,SECURITY_LOGON_IDS_RID = 0x5,SECURITY_LOGON_IDS_RID_COUNT = 0x3,SECURITY_LOCAL_SYSTEM_RID = 0x12,SECURITY_NT_NON_UNIQUE = 0x15,SECURITY_BUILTIN_DOMAIN_RID = 0x20,};
enum MACRO_SET_CLIP {SET_CLIP_BOX = 4108,SET_BOUNDS = 4109,SET_MIRROR_MODE = 4110,};
enum MACRO_SEVERITY {SEVERITY_SUCCESS = 0,SEVERITY_ERROR = 1,};
enum MACRO_SE_OWNER {SE_OWNER_DEFAULTED = 0x1,SE_GROUP_DEFAULTED = 0x2,SE_DACL_PRESENT = 0x4,SE_DACL_DEFAULTED = 0x8,SE_SACL_PRESENT = 0x10,SE_SACL_DEFAULTED = 0x20,SE_DACL_AUTO_INHERIT_REQ = 0x100,SE_SACL_AUTO_INHERIT_REQ = 0x200,SE_DACL_AUTO_INHERITED = 0x400,SE_SACL_AUTO_INHERITED = 0x800,SE_DACL_PROTECTED = 0x1000,SE_SACL_PROTECTED = 0x2000,SE_RM_CONTROL_VALID = 0x4000,SE_SELF_RELATIVE = 0x8000,};
enum MACRO_SHUTDOWN {SHUTDOWN_NORETRY = 0x1,};
enum MACRO_SOFTDIST {SOFTDIST_FLAG_USAGE_EMAIL = 0x1,SOFTDIST_FLAG_USAGE_PRECACHE = 0x2,SOFTDIST_FLAG_USAGE_AUTOINSTALL = 0x4,SOFTDIST_FLAG_DELETE_SUBSCRIPTION = 0x8,SOFTDIST_ADSTATE_NONE = 0x0,SOFTDIST_ADSTATE_AVAILABLE = 0x1,SOFTDIST_ADSTATE_DOWNLOADED = 0x2,SOFTDIST_ADSTATE_INSTALLED = 0x3,};
enum MACRO_SPECIFIC {SPECIFIC_RIGHTS_ALL = 0xFFFF,};
enum MACRO_SRCERASE {SRCERASE = 0x440328,};
enum MACRO_SRCPAINT {SRCPAINT = 0xEE0086,};
enum MACRO_STANDARD {STANDARD_RIGHTS_REQUIRED = 0xF0000,STANDARD_RIGHTS_READ = 0x20000,STANDARD_RIGHTS_WRITE = 0x20000,STANDARD_RIGHTS_EXECUTE = 0x20000,STANDARD_RIGHTS_ALL = 0x1F0000,};
enum MACRO_STARTDOC {STARTDOC = 10,};
enum MACRO_STOPBITS {STOPBITS_10 = 0x1,STOPBITS_15 = 0x2,STOPBITS_20 = 0x4,};
enum MACRO_TEXTCAPS {TEXTCAPS = 34,};
enum MACRO_TRUNCATE {TRUNCATE_EXISTING = 5,};
enum MACRO_UNDEFINE {UNDEFINE_PRIMARY = 0xC,UNDEFINE_ALTERNATE = 0xD,};
enum MACRO_URLOSTRM {URLOSTRM_USECACHEDCOPY_ONLY = 0x1,URLOSTRM_USECACHEDCOPY = 0x2,URLOSTRM_GETNEWESTVERSION = 0x3,};
enum MACRO_VERTSIZE {VERTSIZE = 6,HORZRES = 8,};
enum MACRO_VREFRESH {VREFRESH = 116,};
enum MACRO_WAVECAPS {WAVECAPS_PITCH = 0x1,WAVECAPS_PLAYBACKRATE = 0x2,WAVECAPS_VOLUME = 0x4,WAVECAPS_LRVOLUME = 0x8,WAVECAPS_SYNC = 0x10,WAVECAPS_SAMPLEACCURATE = 0x20,WAVECAPS_DIRECTSOUND = 0x40,};
enum MACRO_WGL_SWAP {WGL_SWAP_MAIN_PLANE = 0x1,WGL_SWAP_OVERLAY1 = 0x2,WGL_SWAP_OVERLAY2 = 0x4,WGL_SWAP_OVERLAY3 = 0x8,WGL_SWAP_OVERLAY4 = 0x10,WGL_SWAP_OVERLAY5 = 0x20,WGL_SWAP_OVERLAY6 = 0x40,WGL_SWAP_OVERLAY7 = 0x80,WGL_SWAP_OVERLAY8 = 0x100,WGL_SWAP_OVERLAY9 = 0x200,WGL_SWAP_OVERLAY10 = 0x400,WGL_SWAP_OVERLAY11 = 0x800,WGL_SWAP_OVERLAY12 = 0x1000,WGL_SWAP_OVERLAY13 = 0x2000,WGL_SWAP_OVERLAY14 = 0x4000,WGL_SWAP_OVERLAY15 = 0x8000,WGL_SWAP_UNDERLAY1 = 0x10000,WGL_SWAP_UNDERLAY2 = 0x20000,WGL_SWAP_UNDERLAY3 = 0x40000,WGL_SWAP_UNDERLAY4 = 0x80000,WGL_SWAP_UNDERLAY5 = 0x100000,WGL_SWAP_UNDERLAY6 = 0x200000,WGL_SWAP_UNDERLAY7 = 0x400000,WGL_SWAP_UNDERLAY8 = 0x800000,WGL_SWAP_UNDERLAY9 = 0x1000000,WGL_SWAP_UNDERLAY10 = 0x2000000,WGL_SWAP_UNDERLAY11 = 0x4000000,WGL_SWAP_UNDERLAY12 = 0x8000000,WGL_SWAP_UNDERLAY13 = 0x10000000,WGL_SWAP_UNDERLAY14 = 0x20000000,WGL_SWAP_UNDERLAY15 = 0x40000000,WGL_SWAPMULTIPLE_MAX = 0x10,};
enum MACRO_WINEVENT {WINEVENT_OUTOFCONTEXT = 0x0,WINEVENT_SKIPOWNTHREAD = 0x1,WINEVENT_SKIPOWNPROCESS = 0x2,WINEVENT_INCONTEXT = 0x4,};
enum MACRO_WSA_FLAG {WSA_FLAG_OVERLAPPED = 0x1,WSA_FLAG_MULTIPOINT_C_ROOT = 0x2,WSA_FLAG_MULTIPOINT_C_LEAF = 0x4,WSA_FLAG_MULTIPOINT_D_ROOT = 0x8,WSA_FLAG_MULTIPOINT_D_LEAF = 0x10,};
enum MACRO_XBUTTON1 {XBUTTON1 = 0x1,XBUTTON2 = 0x2,};
enum MACRO__BADNODE {_BADNODE = -2,};
enum MACRO__FPCLASS {_FPCLASS_UNSUP = 0x0,_FPCLASS_SNAN = 0x1,_FPCLASS_QNAN = 0x2,_FPCLASS_NINF = 0x4,_FPCLASS_NN = 0x8,_FPCLASS_ND = 0x10,_FPCLASS_NZ = 0x20,_FPCLASS_PZ = 0x40,_FPCLASS_PD = 0x80,_FPCLASS_PN = 0x100,_FPCLASS_PINF = 0x200,};
enum MACRO__HEAPEND {_HEAPEND = 5,};
enum MACRO___RPCNDR {__RPCNDR_H_VERSION__ = 475,};
enum MACRO_ctlFirst {ctlFirst = 0x400,};
typedef struct tagMCI_PLAY_PARMS MCI_PLAY_PARMS;
typedef struct tagMCI_SEEK_PARMS MCI_SEEK_PARMS;
typedef struct _MEMORYSTATUSEX MEMORYSTATUSEX;
typedef struct _MIDL_STUB_DESC MIDL_STUB_DESC;
typedef struct tagMONITORINFOEXA MONITORINFOEXA;
typedef struct tagMONITORINFOEXW MONITORINFOEXW;
typedef struct tagMOUSEMOVEPOINT MOUSEMOVEPOINT;
typedef struct _49CD7323AA35D3C00204BB7AA8563FFA MOVE_FILE_DATA;
typedef struct tagMSLLHOOKSTRUCT MSLLHOOKSTRUCT;
typedef struct tagNEWTEXTMETRICA NEWTEXTMETRICA;
typedef struct tagNEWTEXTMETRICW NEWTEXTMETRICW;
typedef struct tagCWPRETSTRUCT *NPCWPRETSTRUCT;
typedef struct tagMIDIOUTCAPSA *NPMIDIOUTCAPSA;
typedef struct tagMIDIOUTCAPSW *NPMIDIOUTCAPSW;
typedef struct tWAVEFORMATEX *NPWAVEFORMATEX;
typedef struct tagWAVEOUTCAPSA *NPWAVEOUTCAPSA;
typedef struct tagWAVEOUTCAPSW *NPWAVEOUTCAPSW;
typedef struct _OSVERSIONINFOA OSVERSIONINFOA;
typedef struct _OSVERSIONINFOW OSVERSIONINFOW;
typedef struct _ACTION_HEADER *PACTION_HEADER;
typedef struct _BLENDFUNCTION *PBLENDFUNCTION;
typedef struct tagCANDIDATEFORM *PCANDIDATEFORM;
typedef struct tagCANDIDATELIST *PCANDIDATELIST;
typedef struct _CERT_RDN_ATTR *PCERT_RDN_ATTR;
typedef struct tagDEBUGHOOKINFO *PDEBUGHOOKINFO;
typedef struct _DISK_GEOMETRY *PDISK_GEOMETRY;
typedef struct tagDRVCONFIGINFO *PDRVCONFIGINFO;
typedef struct _EFS_HASH_BLOB *PEFS_HASH_BLOB;
typedef struct tagEMRALPHABLEND *PEMRALPHABLEND;
typedef struct tagEMREXTESCAPE *PEMRDRAWESCAPE;
typedef struct tagEMRGDICOMMENT *PEMRGDICOMMENT;
typedef struct tagEMRPOLYLINE *PEMRPOLYBEZIER;
typedef struct tagEMRPOLYDRAW16 *PEMRPOLYDRAW16;
typedef struct tagEMRPOLYLINE16 *PEMRPOLYLINE16;
typedef struct tagEMRPOLYLINE *PEMRPOLYLINETO;
typedef struct tagEMRSETTEXTCOLOR *PEMRSETBKCOLOR;
typedef struct tagEMRSELECTCLIPPATH *PEMRSETICMMODE;
typedef struct tagEMRSELECTCLIPPATH *PEMRSETMAPMODE;
typedef struct tagABORTPATH *PEMRSETMETARGN;
typedef struct tagEMRSTRETCHBLT *PEMRSTRETCHBLT;
typedef struct tagEMRFILLPATH *PEMRSTROKEPATH;
typedef struct tagENHMETAHEADER *PENHMETAHEADER;
typedef struct tagENHMETARECORD *PENHMETARECORD;
typedef struct tagFONTSIGNATURE *PFONTSIGNATURE;
typedef const unsigned __int8 *PFORMAT_STRING;
typedef struct _GRADIENT_RECT *PGRADIENT_RECT;
typedef struct tagGUITHREADINFO *PGUITHREADINFO;
typedef struct tagHARDWAREINPUT *PHARDWAREINPUT;
typedef struct tagLASTINPUTINFO *PLASTINPUTINFO;
typedef struct tagMCI_SET_PARMS *PMCI_SET_PARMS;
typedef struct _3D26434F5A7D20980B51C6D4C88FA6DE *PMFT_ENUM_DATA;
typedef struct tagMIXERCONTROLA *PMIXERCONTROLA;
typedef struct tagMIXERCONTROLW *PMIXERCONTROLW;
typedef struct _MODEMSETTINGS *PMODEMSETTINGS;
typedef struct tagMONCONVSTRUCT *PMONCONVSTRUCT;
typedef struct tagMONHSZSTRUCTA *PMONHSZSTRUCTA;
typedef struct tagMONHSZSTRUCTW *PMONHSZSTRUCTW;
typedef struct tagMONLINKSTRUCT *PMONLINKSTRUCT;
typedef struct tagMSGBOXPARAMSA *PMSGBOXPARAMSA;
typedef struct tagMSGBOXPARAMSW *PMSGBOXPARAMSW;
typedef struct tagMULTIKEYHELPA *PMULTIKEYHELPA;
typedef struct tagMULTIKEYHELPW *PMULTIKEYHELPW;
typedef struct _NDR_PIPE_DESC *PNDR_PIPE_DESC;
typedef unsigned int POINTER_64_INT;
typedef struct _FC03820C0C9B455049C143518E71A23B *POPENCARDNAMEA;
typedef struct _1FC20381981E06D3B4F68D6006129906 *POPENCARDNAMEW;
typedef struct pcmwaveformat_tag *PPCMWAVEFORMAT;
typedef struct _PRIVILEGE_SET *PPRIVILEGE_SET;
typedef struct tagREGISTERWORDA *PREGISTERWORDA;
typedef struct tagREGISTERWORDW *PREGISTERWORDW;
typedef struct _RGNDATAHEADER *PRGNDATAHEADER;
typedef struct _PRINTER_INFO_3 PRINTER_INFO_3;
typedef struct _PRINTER_INFO_6 PRINTER_INFO_6;
typedef struct tagPRINTPAGERANGE PRINTPAGERANGE;
typedef struct _PROPSHEETPAGEA PROPSHEETPAGEA;
typedef struct _PROPSHEETPAGEW PROPSHEETPAGEW;
typedef struct tagSCROLLBARINFO *PSCROLLBARINFO;
typedef struct _TOKEN_CONTROL *PTOKEN_CONTROL;
typedef struct _PUBLICKEYSTRUC PUBLICKEYSTRUC;
typedef struct _EC8EE2E9AF7D4EC32726A7FD632A186D QOS_OBJECT_HDR;
typedef struct tagSAFEARRAYBOUND SAFEARRAYBOUND;
typedef struct _wireSAFEARRAY_UNION SAFEARRAYUNION;
typedef struct _SCONTEXT_QUEUE SCONTEXT_QUEUE;
typedef int (__stdcall *SERVER_ROUTINE)();
typedef struct _SERVICE_STATUS SERVICE_STATUS;
typedef struct _SESSION_BUFFER SESSION_BUFFER;
typedef struct _SESSION_HEADER SESSION_HEADER;
typedef struct _SHNAMEMAPPINGA SHNAMEMAPPINGA;
typedef struct _SHNAMEMAPPINGW SHNAMEMAPPINGW;
typedef struct _SOCKET_ADDRESS SOCKET_ADDRESS;
typedef struct tagSTATPROPSETSTG STATPROPSETSTG;
typedef union _ULARGE_INTEGER ULARGE_INTEGER;
struct XMLHTTPRequest;
typedef struct _ZONEATTRIBUTES ZONEATTRIBUTES;
struct _LONG_SIZEDARR {unsigned int clSize;unsigned int *pData;};
struct _userSTGMEDIUM {IUnknown *pUnkForRelease;};
typedef unsigned int error_status_t;
enum tagDOMNodeType {NODE_INVALID = 0x0,NODE_ELEMENT = 0x1,NODE_ATTRIBUTE = 0x2,NODE_TEXT = 0x3,NODE_CDATA_SECTION = 0x4,NODE_ENTITY_REFERENCE = 0x5,NODE_ENTITY = 0x6,NODE_PROCESSING_INSTRUCTION = 0x7,NODE_COMMENT = 0x8,NODE_DOCUMENT = 0x9,NODE_DOCUMENT_TYPE = 0xA,NODE_DOCUMENT_FRAGMENT = 0xB,NODE_NOTATION = 0xC,};
enum tagOLELINKBIND {OLELINKBIND_EVENIFCLASSDIFF = 0x1,};
enum tagPENDINGTYPE {PENDINGTYPE_TOPLEVEL = 0x1,PENDINGTYPE_NESTED = 0x2,};
enum tagSTREAM_SEEK {STREAM_SEEK_SET = 0x0,STREAM_SEEK_CUR = 0x1,STREAM_SEEK_END = 0x2,};
enum tagURLTEMPLATE {URLTEMPLATE_CUSTOM = 0x0,URLTEMPLATE_PREDEFINED_MIN = 0x10000,URLTEMPLATE_LOW = 0x10000,URLTEMPLATE_MEDLOW = 0x10500,URLTEMPLATE_MEDIUM = 0x11000,URLTEMPLATE_HIGH = 0x12000,URLTEMPLATE_PREDEFINED_MAX = 0x20000,};
typedef struct _userCLIPFORMAT userCLIPFORMAT;
typedef struct tagACCESSTIMEOUT ACCESSTIMEOUT;
typedef struct _ACTION_HEADER ACTION_HEADER;
typedef struct tagANIMATIONINFO ANIMATIONINFO;
struct AsyncIMultiQI {struct AsyncIMultiQIVtbl *lpVtbl;};
struct AsyncIUnknown {struct AsyncIUnknownVtbl *lpVtbl;};
typedef struct _BLENDFUNCTION BLENDFUNCTION;
typedef struct _BYTE_SIZEDARR BYTE_SIZEDARR;
typedef struct tagCANDIDATEFORM CANDIDATEFORM;
typedef struct tagCANDIDATELIST CANDIDATELIST;
typedef struct tagCAPROPVARIANT CAPROPVARIANT;
typedef struct _CERT_RDN_ATTR CERT_RDN_ATTR;
typedef struct tagCREATESTRUCTA CREATESTRUCTA;
typedef struct tagCREATESTRUCTW CREATESTRUCTW;
typedef struct tagDEBUGHOOKINFO DEBUGHOOKINFO;
typedef struct _PUBKEYVER3 DHPUBKEY_VER3;
typedef struct _DISK_GEOMETRY DISK_GEOMETRY;
typedef struct tagDRVCONFIGINFO DRVCONFIGINFO;
typedef struct _EFS_HASH_BLOB EFS_HASH_BLOB;
typedef struct tagEMRALPHABLEND EMRALPHABLEND;
typedef struct tagEMREXTESCAPE EMRDRAWESCAPE;
typedef struct tagEMRGDICOMMENT EMRGDICOMMENT;
typedef struct tagEMRPOLYLINE EMRPOLYBEZIER;
typedef struct tagEMRPOLYDRAW16 EMRPOLYDRAW16;
typedef struct tagEMRPOLYLINE16 EMRPOLYLINE16;
typedef struct tagEMRPOLYLINE EMRPOLYLINETO;
typedef struct tagEMRSETTEXTCOLOR EMRSETBKCOLOR;
typedef struct tagEMRSELECTCLIPPATH EMRSETICMMODE;
typedef struct tagEMRSELECTCLIPPATH EMRSETMAPMODE;
typedef struct tagABORTPATH EMRSETMETARGN;
typedef struct tagEMRSTRETCHBLT EMRSTRETCHBLT;
typedef struct tagEMRFILLPATH EMRSTROKEPATH;
typedef struct tagENHMETAHEADER ENHMETAHEADER;
typedef struct tagENHMETARECORD ENHMETARECORD;
typedef struct tagFONTSIGNATURE FONTSIGNATURE;
typedef struct _GDI_NONREMOTE GDI_NONREMOTE;
typedef struct _GRADIENT_RECT GRADIENT_RECT;
typedef struct tagGUITHREADINFO GUITHREADINFO;
typedef struct tagHARDWAREINPUT HARDWAREINPUT;
struct HCOLORSPACE__ {int unused;};
typedef struct tagHIGHCONTRASTA HIGHCONTRASTA;
typedef struct tagHIGHCONTRASTW HIGHCONTRASTW;
typedef void *HMETAFILEPICT;
typedef struct HWINEVENTHOOK__ *HWINEVENTHOOK;
struct IAsyncManager {struct IAsyncManagerVtbl *lpVtbl;};
struct IAuthenticate {struct IAuthenticateVtbl *lpVtbl;};
struct IBindProtocol {struct IBindProtocolVtbl *lpVtbl;};
struct IBlockingLock {struct IBlockingLockVtbl *lpVtbl;};
struct IClassFactory {struct IClassFactoryVtbl *lpVtbl;};
struct IEnumSTATDATA {struct IEnumSTATDATAVtbl *lpVtbl;};
struct IHttpSecurity {struct IHttpSecurityVtbl *lpVtbl;};
typedef struct tagINTERFACEDATA INTERFACEDATA;
typedef struct tagINTERFACEINFO INTERFACEINFO;
struct IOleContainer {struct IOleContainerVtbl *lpVtbl;};
struct IWaitMultiple {struct IWaitMultipleVtbl *lpVtbl;};
struct IXMLAttribute {struct IXMLAttributeVtbl *lpVtbl;};
struct IXMLDOMEntity {struct IXMLDOMEntityVtbl *lpVtbl;};
struct IXMLDocument2 {struct IXMLDocument2Vtbl *lpVtbl;};
typedef union _LARGE_INTEGER LARGE_INTEGER;
typedef struct tagLASTINPUTINFO LASTINPUTINFO;
typedef IAdviseSink2 *LPADVISESINK2;
typedef struct _AFPROTOCOLS *LPAFPROTOCOLS;
typedef struct tagCHARSETINFO *LPCHARSETINFO;
typedef struct tagCHOOSEFONTA *LPCHOOSEFONTA;
typedef struct tagCHOOSEFONTW *LPCHOOSEFONTW;
typedef ICodeInstall *LPCODEINSTALL;
typedef struct _CSADDR_INFO *LPCSADDR_INFO;
typedef struct tagCURSORSHAPE *LPCURSORSHAPE;
typedef struct _DEBUG_EVENT *LPDEBUG_EVENT;
typedef struct _DOC_INFO_1A *LPDOC_INFO_1A;
typedef struct _DOC_INFO_1W *LPDOC_INFO_1W;
typedef struct _DOC_INFO_2A *LPDOC_INFO_2A;
typedef struct _DOC_INFO_2W *LPDOC_INFO_2W;
typedef struct _DOC_INFO_3A *LPDOC_INFO_3A;
typedef struct _DOC_INFO_3W *LPDOC_INFO_3W;
typedef IEnumMoniker *LPENUMMONIKER;
typedef IEnumOLEVERB *LPENUMOLEVERB;
typedef IEnumSTATSTG *LPENUMSTATSTG;
typedef IEnumUnknown *LPENUMUNKNOWN;
typedef IEnumVARIANT *LPENUMVARIANT;
typedef struct tagEVENTMSG *LPEVENTMSGMSG;
typedef struct tagEXTLOGFONTA *LPEXTLOGFONTA;
typedef struct tagEXTLOGFONTW *LPEXTLOGFONTW;
typedef int *LPFXPT16DOT16;
typedef struct tagHANDLETABLE *LPHANDLETABLE;
typedef struct _JOB_INFO_1A *LPJOB_INFO_1A;
typedef struct _JOB_INFO_1W *LPJOB_INFO_1W;
typedef struct _JOB_INFO_2A *LPJOB_INFO_2A;
typedef struct _JOB_INFO_2W *LPJOB_INFO_2W;
typedef struct tagKERNINGPAIR *LPKERNINGPAIR;
typedef struct tagMDINEXTMENU *LPMDINEXTMENU;
typedef struct tagMENUBARINFO *LPMENUBARINFO;
typedef struct tagMIDIINCAPSA *LPMIDIINCAPSA;
typedef struct tagMIDIINCAPSW *LPMIDIINCAPSW;
typedef struct tagMONITORINFO *LPMONITORINFO;
typedef struct _OFNOTIFYEXA *LPOFNOTIFYEXA;
typedef struct _OFNOTIFYEXW *LPOFNOTIFYEXW;
typedef struct tagPAINTSTRUCT *LPPAINTSTRUCT;
typedef struct tagPARAMDESCEX *LPPARAMDESCEX;
typedef IPersistFile *LPPERSISTFILE;
typedef struct tagPDEXA *LPPRINTDLGEXA;
typedef struct tagPDEXW *LPPRINTDLGEXW;
typedef IPropertyBag *LPPROPERTYBAG;
typedef struct tagPROPVARIANT *LPPROPVARIANT;
typedef struct _QOS_SD_MODE *LPQOS_SD_MODE;
typedef IRootStorage *LPROOTSTORAGE;
typedef struct tagSERIALKEYSA *LPSERIALKEYSA;
typedef struct tagSERIALKEYSW *LPSERIALKEYSW;
typedef struct sockaddr_in *LPSOCKADDR_IN;
typedef struct tagSTYLESTRUCT *LPSTYLESTRUCT;
typedef struct _SYSTEM_INFO *LPSYSTEM_INFO;
typedef struct tagTEXTMETRICA *LPTEXTMETRICA;
typedef struct tagTEXTMETRICW *LPTEXTMETRICW;
typedef struct tagTTPOLYCURVE *LPTTPOLYCURVE;
typedef IViewObject2 *LPVIEWOBJECT2;
typedef struct tagWAVEINCAPSA *LPWAVEINCAPSA;
typedef struct tagWAVEINCAPSW *LPWAVEINCAPSW;
typedef IWinInetInfo *LPWININETINFO;
typedef struct tagWNDCLASSEXA *LPWNDCLASSEXA;
typedef struct tagWNDCLASSEXW *LPWNDCLASSEXW;
enum MACRO_ADDRESS {ADDRESS_TAG_BIT = 0x80000000,};
enum MACRO_ALG_SID {ALG_SID_RC2 = 2,ALG_SID_RC4 = 1,ALG_SID_SEAL = 2,ALG_SID_DH_SANDF = 1,ALG_SID_DH_EPHEM = 2,ALG_SID_AGREED_KEY_ANY = 3,ALG_SID_KEA = 4,ALG_SID_MD2 = 1,ALG_SID_MD4 = 2,ALG_SID_MD5 = 3,ALG_SID_SHA = 4,ALG_SID_SHA1 = 4,ALG_SID_MAC = 5,ALG_SID_RIPEMD = 6,ALG_SID_RIPEMD160 = 7,ALG_SID_SSL3SHAMD5 = 8,ALG_SID_HMAC = 9,ALG_SID_TLS1PRF = 10,ALG_SID_SSL3_MASTER = 1,ALG_SID_SCHANNEL_MASTER_HASH = 2,ALG_SID_SCHANNEL_MAC_KEY = 3,ALG_SID_PCT1_MASTER = 4,ALG_SID_SSL2_MASTER = 5,ALG_SID_TLS1_MASTER = 6,ALG_SID_SCHANNEL_ENC_KEY = 7,ALG_SID_EXAMPLE = 80,};
enum MACRO_ANYSIZE {ANYSIZE_ARRAY = 1,};
enum MACRO_ASPECTX {ASPECTX = 40,};
enum MACRO_ASPECTY {ASPECTY = 42,};
enum MACRO_AUXCAPS {AUXCAPS_CDAUDIO = 1,AUXCAPS_AUXIN = 2,AUXCAPS_VOLUME = 1,AUXCAPS_LRVOLUME = 2,};
enum MACRO_BATTERY {BATTERY_FLAG_HIGH = 0x1,BATTERY_FLAG_LOW = 0x2,BATTERY_FLAG_CRITICAL = 0x4,BATTERY_FLAG_CHARGING = 0x8,BATTERY_FLAG_NO_BATTERY = 0x80,BATTERY_FLAG_UNKNOWN = 0xFF,BATTERY_PERCENTAGE_UNKNOWN = 0xFF,BATTERY_LIFE_UNKNOWN = 0xFFFFFFFF,};
enum MACRO_CERT_ID {CERT_ID_ISSUER_SERIAL_NUMBER = 1,CERT_ID_KEY_IDENTIFIER = 2,CERT_ID_SHA1_HASH = 3,};
enum MACRO_CF_NULL {CF_NULL = 0,CFSTR_MIME_NULL = 0,};
enum MACRO_CHANGER {CHANGER_BAR_CODE_SCANNER_INSTALLED = 0x1,CHANGER_INIT_ELEM_STAT_WITH_RANGE = 0x2,CHANGER_CLOSE_IEPORT = 0x4,CHANGER_OPEN_IEPORT = 0x8,CHANGER_STATUS_NON_VOLATILE = 0x10,CHANGER_EXCHANGE_MEDIA = 0x20,CHANGER_CLEANER_SLOT = 0x40,CHANGER_LOCK_UNLOCK = 0x80,CHANGER_CARTRIDGE_MAGAZINE = 0x100,CHANGER_MEDIUM_FLIP = 0x200,CHANGER_POSITION_TO_ELEMENT = 0x400,CHANGER_REPORT_IEPORT_STATE = 0x800,CHANGER_STORAGE_DRIVE = 0x1000,CHANGER_STORAGE_IEPORT = 0x2000,CHANGER_STORAGE_SLOT = 0x4000,CHANGER_STORAGE_TRANSPORT = 0x8000,CHANGER_DRIVE_CLEANING_REQUIRED = 0x10000,CHANGER_PREDISMOUNT_EJECT_REQUIRED = 0x20000,CHANGER_CLEANER_ACCESS_NOT_VALID = 0x40000,CHANGER_PREMOUNT_EJECT_REQUIRED = 0x80000,CHANGER_VOLUME_IDENTIFICATION = 0x100000,CHANGER_VOLUME_SEARCH = 0x200000,CHANGER_VOLUME_ASSERT = 0x400000,CHANGER_VOLUME_REPLACE = 0x800000,CHANGER_VOLUME_UNDEFINE = 0x1000000,CHANGER_SERIAL_NUMBER_VALID = 0x4000000,CHANGER_DEVICE_REINITIALIZE_CAPABLE = 0x8000000,CHANGER_KEYPAD_ENABLE_DISABLE = 0x10000000,CHANGER_DRIVE_EMPTY_ON_DOOR_ACCESS = 0x20000000,CHANGER_RESERVED_BIT = 0x80000000,CHANGER_PREDISMOUNT_ALIGN_TO_SLOT = 0x80000001,CHANGER_PREDISMOUNT_ALIGN_TO_DRIVE = 0x80000002,CHANGER_CLEANER_AUTODISMOUNT = 0x80000004,CHANGER_TRUE_EXCHANGE_CAPABLE = 0x80000008,CHANGER_SLOTS_USE_TRAYS = 0x80000010,CHANGER_RTN_MEDIA_TO_ORIGINAL_ADDR = 0x80000020,CHANGER_CLEANER_OPS_NOT_SUPPORTED = 0x80000040,CHANGER_IEPORT_USER_CONTROL_OPEN = 0x80000080,CHANGER_IEPORT_USER_CONTROL_CLOSE = 0x80000100,CHANGER_MOVE_EXTENDS_IEPORT = 0x80000200,CHANGER_MOVE_RETRACTS_IEPORT = 0x80000400,CHANGER_TO_TRANSPORT = 0x1,CHANGER_TO_SLOT = 0x2,CHANGER_TO_IEPORT = 0x4,CHANGER_TO_DRIVE = 0x8,};
enum MACRO_CHARSET {ANSI_CHARSET = 0,DEFAULT_CHARSET = 1,SYMBOL_CHARSET = 2,SHIFTJIS_CHARSET = 128,HANGEUL_CHARSET = 129,HANGUL_CHARSET = 129,GB2312_CHARSET = 134,CHINESEBIG5_CHARSET = 136,OEM_CHARSET = 255,JOHAB_CHARSET = 130,HEBREW_CHARSET = 177,ARABIC_CHARSET = 178,GREEK_CHARSET = 161,TURKISH_CHARSET = 162,VIETNAMESE_CHARSET = 163,THAI_CHARSET = 222,EASTEUROPE_CHARSET = 238,RUSSIAN_CHARSET = 204,MAC_CHARSET = 77,BALTIC_CHARSET = 186,};
enum MACRO_CHILDID {CHILDID_SELF = 0,};
enum MACRO_CLIPBRD {CLIPBRD_E_FIRST = 0x800401D0,CLIPBRD_E_LAST = 0x800401DF,CLIPBRD_S_FIRST = 0x401D0,CLIPBRD_S_LAST = 0x401DF,};
enum MACRO_CM_NONE {CM_NONE = 0x0,CM_DEVICE_ICM = 0x1,CM_GAMMA_RAMP = 0x2,CM_CMYK_COLOR = 0x4,};
enum MACRO_CONNDLG {CONNDLG_RO_PATH = 0x1,CONNDLG_CONN_POINT = 0x2,CONNDLG_USE_MRU = 0x4,CONNDLG_HIDE_BOX = 0x8,CONNDLG_PERSIST = 0x10,CONNDLG_NOT_PERSIST = 0x20,};
enum MACRO_CONNECT {CONNECT_UPDATE_PROFILE = 0x1,CONNECT_UPDATE_RECENT = 0x2,CONNECT_TEMPORARY = 0x4,CONNECT_INTERACTIVE = 0x8,CONNECT_PROMPT = 0x10,CONNECT_NEED_DRIVE = 0x20,CONNECT_REFCOUNT = 0x40,CONNECT_REDIRECT = 0x80,CONNECT_LOCALDRIVE = 0x100,CONNECT_CURRENT_MEDIA = 0x200,CONNECT_DEFERRED = 0x400,CONNECT_RESERVED = 0xFF000000,};
enum MACRO_CONSOLE {CONSOLE_TEXTMODE_BUFFER = 1,};
enum MACRO_CONTEXT {CONTEXT_i386 = 0x10000,CONTEXT_i486 = 0x10000,CONTEXT_CONTROL = 0x10001,CONTEXT_INTEGER = 0x10002,CONTEXT_SEGMENTS = 0x10004,CONTEXT_FLOATING_POINT = 0x10008,CONTEXT_DEBUG_REGISTERS = 0x10010,CONTEXT_EXTENDED_REGISTERS = 0x10020,CONTEXT_FULL = 0x10007,};
enum MACRO_CONTROL {CONTROL_C_EXIT = 3221225786,};
enum MACRO_CRYPT_Y {CRYPT_Y_ONLY = 0x1,CRYPT_SSL2_FALLBACK = 0x2,CRYPT_DESTROYKEY = 0x4,CRYPT_OAEP = 0x40,CRYPT_BLOB_VER3 = 0x80,CRYPT_SECRETDIGEST = 0x1,CRYPT_LITTLE_ENDIAN = 0x1,CRYPT_NOHASHOID = 0x1,CRYPT_TYPE2_FORMAT = 0x2,CRYPT_X931_FORMAT = 0x4,CRYPT_MACHINE_DEFAULT = 0x1,CRYPT_USER_DEFAULT = 0x2,CRYPT_DELETE_DEFAULT = 0x4,};
enum MACRO_CTL_ANY {CTL_ANY_SUBJECT_TYPE = 1,CTL_CERT_SUBJECT_TYPE = 2,CTL_FIND_ANY = 0,CTL_FIND_SHA1_HASH = 1,CTL_FIND_MD5_HASH = 2,CTL_FIND_USAGE = 3,CTL_FIND_SUBJECT = 4,CTL_FIND_EXISTING = 5,CTL_FIND_NO_LIST_ID_CBDATA = -1,CTL_FIND_NO_SIGNER_PTR = -1,CTL_FIND_SAME_USAGE_FLAG = 1,};
enum MACRO_DECIMAL {DECIMAL_NEG = 0x80,};
enum MACRO_DEFAULT {DEFAULT_PALETTE = 15,};
enum MACRO_DESKTOP {DESKTOP_READOBJECTS = 0x1,DESKTOP_CREATEWINDOW = 0x2,DESKTOP_CREATEMENU = 0x4,DESKTOP_HOOKCONTROL = 0x8,DESKTOP_JOURNALRECORD = 0x10,DESKTOP_JOURNALPLAYBACK = 0x20,DESKTOP_ENUMERATE = 0x40,DESKTOP_WRITEOBJECTS = 0x80,DESKTOP_SWITCHDESKTOP = 0x100,};
enum MACRO_DEXPLEN {DEXPLEN = 11,};
enum MACRO_DISABLE {DISABLE_MAX_PRIVILEGE = 0x1,};
enum MACRO_DISPLAY {DISPLAY_DEVICE_ATTACHED_TO_DESKTOP = 0x1,DISPLAY_DEVICE_MULTI_DRIVER = 0x2,DISPLAY_DEVICE_PRIMARY_DEVICE = 0x4,DISPLAY_DEVICE_MIRRORING_DRIVER = 0x8,DISPLAY_DEVICE_VGA_COMPATIBLE = 0x10,DISPLAY_DEVICE_MODESPRUNED = 0x8000000,};
enum MACRO_DI_MASK {DI_MASK = 0x1,DI_IMAGE = 0x2,DI_NORMAL = 0x3,DI_COMPAT = 0x4,DI_DEFAULTSIZE = 0x8,};
enum MACRO_DMAXEXP {DMAXEXP = 308,};
enum MACRO_DMCOLOR {DMCOLOR_MONOCHROME = 1,DMCOLOR_COLOR = 2,};
enum MACRO_DMINEXP {DMINEXP = -307,};
enum MACRO_DMMEDIA {DMMEDIA_STANDARD = 1,DMMEDIA_TRANSPARENCY = 2,DMMEDIA_GLOSSY = 3,DMMEDIA_USER = 256,};
enum MACRO_DMPAPER {DMPAPER_LETTER = 1,DMPAPER_LETTERSMALL = 2,DMPAPER_TABLOID = 3,DMPAPER_LEDGER = 4,DMPAPER_LEGAL = 5,DMPAPER_STATEMENT = 6,DMPAPER_EXECUTIVE = 7,DMPAPER_A3 = 8,DMPAPER_A4 = 9,DMPAPER_A4SMALL = 10,DMPAPER_A5 = 11,DMPAPER_B4 = 12,DMPAPER_B5 = 13,DMPAPER_FOLIO = 14,DMPAPER_QUARTO = 15,DMPAPER_10X14 = 16,DMPAPER_11X17 = 17,DMPAPER_NOTE = 18,DMPAPER_ENV_9 = 19,DMPAPER_ENV_10 = 20,DMPAPER_ENV_11 = 21,DMPAPER_ENV_12 = 22,DMPAPER_ENV_14 = 23,DMPAPER_CSHEET = 24,DMPAPER_DSHEET = 25,DMPAPER_ESHEET = 26,DMPAPER_ENV_DL = 27,DMPAPER_ENV_C5 = 28,DMPAPER_ENV_C3 = 29,DMPAPER_ENV_C4 = 30,DMPAPER_ENV_C6 = 31,DMPAPER_ENV_C65 = 32,DMPAPER_ENV_B4 = 33,DMPAPER_ENV_B5 = 34,DMPAPER_ENV_B6 = 35,DMPAPER_ENV_ITALY = 36,DMPAPER_ENV_MONARCH = 37,DMPAPER_ENV_PERSONAL = 38,DMPAPER_FANFOLD_US = 39,DMPAPER_FANFOLD_STD_GERMAN = 40,DMPAPER_FANFOLD_LGL_GERMAN = 41,DMPAPER_ISO_B4 = 42,DMPAPER_JAPANESE_POSTCARD = 43,DMPAPER_9X11 = 44,DMPAPER_10X11 = 45,DMPAPER_15X11 = 46,DMPAPER_ENV_INVITE = 47,DMPAPER_RESERVED_48 = 48,DMPAPER_RESERVED_49 = 49,DMPAPER_LETTER_EXTRA = 50,DMPAPER_LEGAL_EXTRA = 51,DMPAPER_TABLOID_EXTRA = 52,DMPAPER_A4_EXTRA = 53,DMPAPER_LETTER_TRANSVERSE = 54,DMPAPER_A4_TRANSVERSE = 55,DMPAPER_LETTER_EXTRA_TRANSVERSE = 56,DMPAPER_A_PLUS = 57,DMPAPER_B_PLUS = 58,DMPAPER_LETTER_PLUS = 59,DMPAPER_A4_PLUS = 60,DMPAPER_A5_TRANSVERSE = 61,DMPAPER_B5_TRANSVERSE = 62,DMPAPER_A3_EXTRA = 63,DMPAPER_A5_EXTRA = 64,DMPAPER_B5_EXTRA = 65,DMPAPER_A2 = 66,DMPAPER_A3_TRANSVERSE = 67,DMPAPER_A3_EXTRA_TRANSVERSE = 68,DMPAPER_DBL_JAPANESE_POSTCARD = 69,DMPAPER_A6 = 70,DMPAPER_JENV_KAKU2 = 71,DMPAPER_JENV_KAKU3 = 72,DMPAPER_JENV_CHOU3 = 73,DMPAPER_JENV_CHOU4 = 74,DMPAPER_LETTER_ROTATED = 75,DMPAPER_A3_ROTATED = 76,DMPAPER_A4_ROTATED = 77,DMPAPER_A5_ROTATED = 78,DMPAPER_B4_JIS_ROTATED = 79,DMPAPER_B5_JIS_ROTATED = 80,DMPAPER_JAPANESE_POSTCARD_ROTATED = 81,DMPAPER_DBL_JAPANESE_POSTCARD_ROTATED = 82,DMPAPER_A6_ROTATED = 83,DMPAPER_JENV_KAKU2_ROTATED = 84,DMPAPER_JENV_KAKU3_ROTATED = 85,DMPAPER_JENV_CHOU3_ROTATED = 86,DMPAPER_JENV_CHOU4_ROTATED = 87,DMPAPER_B6_JIS = 88,DMPAPER_B6_JIS_ROTATED = 89,DMPAPER_12X11 = 90,DMPAPER_JENV_YOU4 = 91,DMPAPER_JENV_YOU4_ROTATED = 92,DMPAPER_P16K = 93,DMPAPER_P32K = 94,DMPAPER_P32KBIG = 95,DMPAPER_PENV_1 = 96,DMPAPER_PENV_2 = 97,DMPAPER_PENV_3 = 98,DMPAPER_PENV_4 = 99,DMPAPER_PENV_5 = 100,DMPAPER_PENV_6 = 101,DMPAPER_PENV_7 = 102,DMPAPER_PENV_8 = 103,DMPAPER_PENV_9 = 104,DMPAPER_PENV_10 = 105,DMPAPER_P16K_ROTATED = 106,DMPAPER_P32K_ROTATED = 107,DMPAPER_P32KBIG_ROTATED = 108,DMPAPER_PENV_1_ROTATED = 109,DMPAPER_PENV_2_ROTATED = 110,DMPAPER_PENV_3_ROTATED = 111,DMPAPER_PENV_4_ROTATED = 112,DMPAPER_PENV_5_ROTATED = 113,DMPAPER_PENV_6_ROTATED = 114,DMPAPER_PENV_7_ROTATED = 115,DMPAPER_PENV_8_ROTATED = 116,DMPAPER_PENV_9_ROTATED = 117,DMPAPER_PENV_10_ROTATED = 118,DMPAPER_LAST = 118,DMPAPER_USER = 256,};
enum MACRO_DSIGNIF {DSIGNIF = 53,};
enum MACRO_DSPRINT {DSPRINT_PUBLISH = 0x1,DSPRINT_UPDATE = 0x2,DSPRINT_UNPUBLISH = 0x4,DSPRINT_REPUBLISH = 0x8,DSPRINT_PENDING = 0x80000000,};
enum MACRO_ELEMENT {ELEMENT_STATUS_FULL = 0x1,ELEMENT_STATUS_IMPEXP = 0x2,ELEMENT_STATUS_EXCEPT = 0x4,ELEMENT_STATUS_ACCESS = 0x8,ELEMENT_STATUS_EXENAB = 0x10,ELEMENT_STATUS_INENAB = 0x20,ELEMENT_STATUS_LUN_VALID = 0x1000,ELEMENT_STATUS_ID_VALID = 0x2000,ELEMENT_STATUS_NOT_BUS = 0x8000,ELEMENT_STATUS_INVERT = 0x400000,ELEMENT_STATUS_SVALID = 0x800000,ELEMENT_STATUS_PVOLTAG = 0x10000000,ELEMENT_STATUS_AVOLTAG = 0x20000000,};
enum MACRO_EMBDHLP {EMBDHLP_INPROC_HANDLER = 0x0,EMBDHLP_INPROC_SERVER = 0x1,EMBDHLP_CREATENOW = 0x0,EMBDHLP_DELAYCREATE = 0x10000,};
enum MACRO_EMBEDED {SETICMPROFILE_EMBEDED = 0x1,CREATECOLORSPACE_EMBEDED = 0x1,COLORMATCHTOTARGET_EMBEDED = 0x1,};
enum MACRO_ENHMETA {ENHMETA_SIGNATURE = 0x464D4520,ENHMETA_STOCK_OBJECT = 0x80000000,};
enum MACRO_ERROR_0 {ERROR = 0,NULLREGION = 1,SIMPLEREGION = 2,};
enum MACRO_ES_LEFT {ES_LEFT = 0x0,ES_CENTER = 0x1,ES_RIGHT = 0x2,ES_MULTILINE = 0x4,ES_UPPERCASE = 0x8,ES_LOWERCASE = 0x10,ES_PASSWORD = 0x20,ES_AUTOVSCROLL = 0x40,ES_AUTOHSCROLL = 0x80,ES_NOHIDESEL = 0x100,ES_OEMCONVERT = 0x400,ES_READONLY = 0x800,ES_WANTRETURN = 0x1000,ES_NUMBER = 0x2000,};
enum MACRO_EVENT_E {EVENT_E_FIRST = 0x80040200,EVENT_E_LAST = 0x8004021F,EVENT_S_FIRST = 0x40200,EVENT_S_LAST = 0x4021F,};
enum MACRO_EXECUTE {EXECUTE_OFFLINE_DIAGS = 0xD4,};
enum MACRO_EXPBASE {EXPBASE = 2,};
enum MACRO_FD_READ {FD_READ_BIT = 0,FD_READ = 1,FD_WRITE_BIT = 1,FD_WRITE = 2,FD_OOB_BIT = 2,FD_OOB = 4,FD_ACCEPT_BIT = 3,FD_ACCEPT = 8,FD_CONNECT_BIT = 4,FD_CONNECT = 16,FD_CLOSE_BIT = 5,FD_CLOSE = 32,FD_QOS_BIT = 6,FD_QOS = 64,FD_GROUP_QOS_BIT = 7,FD_GROUP_QOS = 128,FD_ROUTING_INTERFACE_CHANGE_BIT = 8,FD_ROUTING_INTERFACE_CHANGE = 256,FD_ADDRESS_LIST_CHANGE_BIT = 9,FD_ADDRESS_LIST_CHANGE = 512,FD_MAX_EVENTS = 10,FD_ALL_EVENTS = 1023,};
enum MACRO_FEXPLEN {FEXPLEN = 8,};
enum MACRO_FMAXEXP {FMAXEXP = 38,};
enum MACRO_FMINEXP {FMINEXP = -37,};
enum MACRO_FR_DOWN {FR_DOWN = 0x1,FR_WHOLEWORD = 0x2,FR_MATCHCASE = 0x4,FR_FINDNEXT = 0x8,FR_REPLACE = 0x10,FR_REPLACEALL = 0x20,FR_DIALOGTERM = 0x40,FR_SHOWHELP = 0x80,FR_ENABLEHOOK = 0x100,FR_ENABLETEMPLATE = 0x200,FR_NOUPDOWN = 0x400,FR_NOMATCHCASE = 0x800,FR_NOWHOLEWORD = 0x1000,FR_ENABLETEMPLATEHANDLE = 0x2000,FR_HIDEUPDOWN = 0x4000,FR_HIDEMATCHCASE = 0x8000,FR_HIDEWHOLEWORD = 0x10000,FR_RAW = 0x20000,FR_MATCHDIAC = 0x20000000,FR_MATCHKASHIDA = 0x40000000,FR_MATCHALEFHAMZA = 0x80000000,};
enum MACRO_FSIGNIF {FSIGNIF = 24,};
enum MACRO_GENERIC {GENERIC_READ = 0x80000000,GENERIC_WRITE = 0x40000000,GENERIC_EXECUTE = 0x20000000,GENERIC_ALL = 0x10000000,};
enum MACRO_HBMMENU {HBMMENU_CALLBACK = -1,HBMMENU_SYSTEM = 1,HBMMENU_MBAR_RESTORE = 2,HBMMENU_MBAR_MINIMIZE = 3,HBMMENU_MBAR_CLOSE = 5,HBMMENU_MBAR_CLOSE_D = 6,HBMMENU_MBAR_MINIMIZE_D = 7,HBMMENU_POPUP_CLOSE = 8,HBMMENU_POPUP_RESTORE = 9,HBMMENU_POPUP_MAXIMIZE = 10,HBMMENU_POPUP_MINIMIZE = 11,};
enum MACRO_HRESULT {E_UNEXPECTED = 0x8000FFFF,E_NOTIMPL = 0x80004001,E_OUTOFMEMORY = 0x8007000E,E_INVALIDARG = 0x80070057,E_NOINTERFACE = 0x80004002,E_POINTER = 0x80004003,E_HANDLE = 0x80070006,E_ABORT = 0x80004004,E_FAIL = 0x80004005,E_ACCESSDENIED = 0x80070005,E_PENDING = 0x8000000A,CO_E_INIT_TLS = 0x80004006,CO_E_INIT_SHARED_ALLOCATOR = 0x80004007,CO_E_INIT_MEMORY_ALLOCATOR = 0x80004008,CO_E_INIT_CLASS_CACHE = 0x80004009,CO_E_INIT_RPC_CHANNEL = 0x8000400A,CO_E_INIT_TLS_SET_CHANNEL_CONTROL = 0x8000400B,CO_E_INIT_TLS_CHANNEL_CONTROL = 0x8000400C,CO_E_INIT_UNACCEPTED_USER_ALLOCATOR = 0x8000400D,CO_E_INIT_SCM_MUTEX_EXISTS = 0x8000400E,CO_E_INIT_SCM_FILE_MAPPING_EXISTS = 0x8000400F,CO_E_INIT_SCM_MAP_VIEW_OF_FILE = 0x80004010,CO_E_INIT_SCM_EXEC_FAILURE = 0x80004011,CO_E_INIT_ONLY_SINGLE_THREADED = 0x80004012,CO_E_CANT_REMOTE = 0x80004013,CO_E_BAD_SERVER_NAME = 0x80004014,CO_E_WRONG_SERVER_IDENTITY = 0x80004015,CO_E_OLE1DDE_DISABLED = 0x80004016,CO_E_RUNAS_SYNTAX = 0x80004017,CO_E_CREATEPROCESS_FAILURE = 0x80004018,CO_E_RUNAS_CREATEPROCESS_FAILURE = 0x80004019,CO_E_RUNAS_LOGON_FAILURE = 0x8000401A,CO_E_LAUNCH_PERMSSION_DENIED = 0x8000401B,CO_E_START_SERVICE_FAILURE = 0x8000401C,CO_E_REMOTE_COMMUNICATION_FAILURE = 0x8000401D,CO_E_SERVER_START_TIMEOUT = 0x8000401E,CO_E_CLSREG_INCONSISTENT = 0x8000401F,CO_E_IIDREG_INCONSISTENT = 0x80004020,CO_E_NOT_SUPPORTED = 0x80004021,CO_E_RELOAD_DLL = 0x80004022,CO_E_MSI_ERROR = 0x80004023,CO_E_ATTEMPT_TO_CREATE_OUTSIDE_CLIENT_CONTEXT = 0x80004024,OLE_E_OLEVERB = 0x80040000,OLE_E_ADVF = 0x80040001,OLE_E_ENUM_NOMORE = 0x80040002,OLE_E_ADVISENOTSUPPORTED = 0x80040003,OLE_E_NOCONNECTION = 0x80040004,OLE_E_NOTRUNNING = 0x80040005,OLE_E_NOCACHE = 0x80040006,OLE_E_BLANK = 0x80040007,OLE_E_CLASSDIFF = 0x80040008,OLE_E_CANT_GETMONIKER = 0x80040009,OLE_E_CANT_BINDTOSOURCE = 0x8004000A,OLE_E_STATIC = 0x8004000B,OLE_E_PROMPTSAVECANCELLED = 0x8004000C,OLE_E_INVALIDRECT = 0x8004000D,OLE_E_WRONGCOMPOBJ = 0x8004000E,OLE_E_INVALIDHWND = 0x8004000F,OLE_E_NOT_INPLACEACTIVE = 0x80040010,OLE_E_CANTCONVERT = 0x80040011,OLE_E_NOSTORAGE = 0x80040012,DV_E_FORMATETC = 0x80040064,DV_E_DVTARGETDEVICE = 0x80040065,DV_E_STGMEDIUM = 0x80040066,DV_E_STATDATA = 0x80040067,DV_E_LINDEX = 0x80040068,DV_E_TYMED = 0x80040069,DV_E_CLIPFORMAT = 0x8004006A,DV_E_DVASPECT = 0x8004006B,DV_E_DVTARGETDEVICE_SIZE = 0x8004006C,DV_E_NOIVIEWOBJECT = 0x8004006D,DRAGDROP_E_NOTREGISTERED = 0x80040100,DRAGDROP_E_ALREADYREGISTERED = 0x80040101,DRAGDROP_E_INVALIDHWND = 0x80040102,CLASS_E_NOAGGREGATION = 0x80040110,CLASS_E_CLASSNOTAVAILABLE = 0x80040111,CLASS_E_NOTLICENSED = 0x80040112,VIEW_E_DRAW = 0x80040140,REGDB_E_READREGDB = 0x80040150,REGDB_E_WRITEREGDB = 0x80040151,REGDB_E_KEYMISSING = 0x80040152,REGDB_E_INVALIDVALUE = 0x80040153,REGDB_E_CLASSNOTREG = 0x80040154,REGDB_E_IIDNOTREG = 0x80040155,REGDB_E_BADTHREADINGMODEL = 0x80040156,CAT_E_CATIDNOEXIST = 0x80040160,CAT_E_NODESCRIPTION = 0x80040161,CS_E_PACKAGE_NOTFOUND = 0x80040164,CS_E_NOT_DELETABLE = 0x80040165,CS_E_CLASS_NOTFOUND = 0x80040166,CS_E_INVALID_VERSION = 0x80040167,CS_E_NO_CLASSSTORE = 0x80040168,CS_E_OBJECT_NOTFOUND = 0x80040169,CS_E_OBJECT_ALREADY_EXISTS = 0x8004016A,CS_E_INVALID_PATH = 0x8004016B,CS_E_NETWORK_ERROR = 0x8004016C,CS_E_ADMIN_LIMIT_EXCEEDED = 0x8004016D,CS_E_SCHEMA_MISMATCH = 0x8004016E,CS_E_INTERNAL_ERROR = 0x8004016F,CACHE_E_NOCACHE_UPDATED = 0x80040170,OLEOBJ_E_NOVERBS = 0x80040180,OLEOBJ_E_INVALIDVERB = 0x80040181,INPLACE_E_NOTUNDOABLE = 0x800401A0,INPLACE_E_NOTOOLSPACE = 0x800401A1,CONVERT10_E_OLESTREAM_GET = 0x800401C0,CONVERT10_E_OLESTREAM_PUT = 0x800401C1,CONVERT10_E_OLESTREAM_FMT = 0x800401C2,CONVERT10_E_OLESTREAM_BITMAP_TO_DIB = 0x800401C3,CONVERT10_E_STG_FMT = 0x800401C4,CONVERT10_E_STG_NO_STD_STREAM = 0x800401C5,CONVERT10_E_STG_DIB_TO_BITMAP = 0x800401C6,CLIPBRD_E_CANT_OPEN = 0x800401D0,CLIPBRD_E_CANT_EMPTY = 0x800401D1,CLIPBRD_E_CANT_SET = 0x800401D2,CLIPBRD_E_BAD_DATA = 0x800401D3,CLIPBRD_E_CANT_CLOSE = 0x800401D4,MK_E_CONNECTMANUALLY = 0x800401E0,MK_E_EXCEEDEDDEADLINE = 0x800401E1,MK_E_NEEDGENERIC = 0x800401E2,MK_E_UNAVAILABLE = 0x800401E3,MK_E_SYNTAX = 0x800401E4,MK_E_NOOBJECT = 0x800401E5,MK_E_INVALIDEXTENSION = 0x800401E6,MK_E_INTERMEDIATEINTERFACENOTSUPPORTED = 0x800401E7,MK_E_NOTBINDABLE = 0x800401E8,MK_E_NOTBOUND = 0x800401E9,MK_E_CANTOPENFILE = 0x800401EA,MK_E_MUSTBOTHERUSER = 0x800401EB,MK_E_NOINVERSE = 0x800401EC,MK_E_NOSTORAGE = 0x800401ED,MK_E_NOPREFIX = 0x800401EE,MK_E_ENUMERATION_FAILED = 0x800401EF,CO_E_NOTINITIALIZED = 0x800401F0,CO_E_ALREADYINITIALIZED = 0x800401F1,CO_E_CANTDETERMINECLASS = 0x800401F2,CO_E_CLASSSTRING = 0x800401F3,CO_E_IIDSTRING = 0x800401F4,CO_E_APPNOTFOUND = 0x800401F5,CO_E_APPSINGLEUSE = 0x800401F6,CO_E_ERRORINAPP = 0x800401F7,CO_E_DLLNOTFOUND = 0x800401F8,CO_E_ERRORINDLL = 0x800401F9,CO_E_WRONGOSFORAPP = 0x800401FA,CO_E_OBJNOTREG = 0x800401FB,CO_E_OBJISREG = 0x800401FC,CO_E_OBJNOTCONNECTED = 0x800401FD,CO_E_APPDIDNTREG = 0x800401FE,CO_E_RELEASED = 0x800401FF,EVENT_S_SOME_SUBSCRIBERS_FAILED = 0x40200,EVENT_E_ALL_SUBSCRIBERS_FAILED = 0x80040201,EVENT_S_NOSUBSCRIBERS = 0x40202,EVENT_E_QUERYSYNTAX = 0x80040203,EVENT_E_QUERYFIELD = 0x80040204,EVENT_E_INTERNALEXCEPTION = 0x80040205,EVENT_E_INTERNALERROR = 0x80040206,EVENT_E_INVALID_PER_USER_SID = 0x80040207,EVENT_E_USER_EXCEPTION = 0x80040208,EVENT_E_TOO_MANY_METHODS = 0x80040209,EVENT_E_MISSING_EVENTCLASS = 0x8004020A,EVENT_E_NOT_ALL_REMOVED = 0x8004020B,EVENT_E_COMPLUS_NOT_INSTALLED = 0x8004020C,CONTEXT_E_ABORTED = 0x8004E002,CONTEXT_E_ABORTING = 0x8004E003,CONTEXT_E_NOCONTEXT = 0x8004E004,CONTEXT_E_SYNCH_TIMEOUT = 0x8004E006,CONTEXT_E_OLDREF = 0x8004E007,CONTEXT_E_ROLENOTFOUND = 0x8004E00C,CONTEXT_E_TMNOTAVAILABLE = 0x8004E00F,CO_E_ACTIVATIONFAILED = 0x8004E021,CO_E_ACTIVATIONFAILED_EVENTLOGGED = 0x8004E022,CO_E_ACTIVATIONFAILED_CATALOGERROR = 0x8004E023,CO_E_ACTIVATIONFAILED_TIMEOUT = 0x8004E024,CO_E_INITIALIZATIONFAILED = 0x8004E025,CONTEXT_E_NOJIT = 0x8004E026,CONTEXT_E_NOTRANSACTION = 0x8004E027,CO_E_THREADINGMODEL_CHANGED = 0x8004E028,OLE_S_USEREG = 0x40000,OLE_S_STATIC = 0x40001,OLE_S_MAC_CLIPFORMAT = 0x40002,DRAGDROP_S_DROP = 0x40100,DRAGDROP_S_CANCEL = 0x40101,DRAGDROP_S_USEDEFAULTCURSORS = 0x40102,DATA_S_SAMEFORMATETC = 0x40130,VIEW_S_ALREADY_FROZEN = 0x40140,CACHE_S_FORMATETC_NOTSUPPORTED = 0x40170,CACHE_S_SAMECACHE = 0x40171,CACHE_S_SOMECACHES_NOTUPDATED = 0x40172,OLEOBJ_S_INVALIDVERB = 0x40180,OLEOBJ_S_CANNOT_DOVERB_NOW = 0x40181,OLEOBJ_S_INVALIDHWND = 0x40182,INPLACE_S_TRUNCATED = 0x401A0,CONVERT10_S_NO_PRESENTATION = 0x401C0,MK_S_REDUCED_TO_SELF = 0x401E2,MK_S_ME = 0x401E4,MK_S_HIM = 0x401E5,MK_S_US = 0x401E6,MK_S_MONIKERALREADYREGISTERED = 0x401E7,SCHED_S_TASK_READY = 0x41300,SCHED_S_TASK_RUNNING = 0x41301,SCHED_S_TASK_DISABLED = 0x41302,SCHED_S_TASK_HAS_NOT_RUN = 0x41303,SCHED_S_TASK_NO_MORE_RUNS = 0x41304,SCHED_S_TASK_NOT_SCHEDULED = 0x41305,SCHED_S_TASK_TERMINATED = 0x41306,SCHED_S_TASK_NO_VALID_TRIGGERS = 0x41307,SCHED_S_EVENT_TRIGGER = 0x41308,SCHED_E_TRIGGER_NOT_FOUND = 0x80041309,SCHED_E_TASK_NOT_READY = 0x8004130A,SCHED_E_TASK_NOT_RUNNING = 0x8004130B,SCHED_E_SERVICE_NOT_INSTALLED = 0x8004130C,SCHED_E_CANNOT_OPEN_TASK = 0x8004130D,SCHED_E_INVALID_TASK = 0x8004130E,SCHED_E_ACCOUNT_INFORMATION_NOT_SET = 0x8004130F,SCHED_E_ACCOUNT_NAME_NOT_FOUND = 0x80041310,SCHED_E_ACCOUNT_DBASE_CORRUPT = 0x80041311,SCHED_E_NO_SECURITY_SERVICES = 0x80041312,SCHED_E_UNKNOWN_OBJECT_VERSION = 0x80041313,SCHED_E_UNSUPPORTED_ACCOUNT_OPTION = 0x80041314,SCHED_E_SERVICE_NOT_RUNNING = 0x80041315,CO_E_CLASS_CREATE_FAILED = 0x80080001,CO_E_SCM_ERROR = 0x80080002,CO_E_SCM_RPC_FAILURE = 0x80080003,CO_E_BAD_PATH = 0x80080004,CO_E_SERVER_EXEC_FAILURE = 0x80080005,CO_E_OBJSRV_RPC_FAILURE = 0x80080006,MK_E_NO_NORMALIZED = 0x80080007,CO_E_SERVER_STOPPING = 0x80080008,MEM_E_INVALID_ROOT = 0x80080009,MEM_E_INVALID_LINK = 0x80080010,MEM_E_INVALID_SIZE = 0x80080011,CO_S_NOTALLINTERFACES = 0x80012,DISP_E_UNKNOWNINTERFACE = 0x80020001,DISP_E_MEMBERNOTFOUND = 0x80020003,DISP_E_PARAMNOTFOUND = 0x80020004,DISP_E_TYPEMISMATCH = 0x80020005,DISP_E_UNKNOWNNAME = 0x80020006,DISP_E_NONAMEDARGS = 0x80020007,DISP_E_BADVARTYPE = 0x80020008,DISP_E_EXCEPTION = 0x80020009,DISP_E_OVERFLOW = 0x8002000A,DISP_E_BADINDEX = 0x8002000B,DISP_E_UNKNOWNLCID = 0x8002000C,DISP_E_ARRAYISLOCKED = 0x8002000D,DISP_E_BADPARAMCOUNT = 0x8002000E,DISP_E_PARAMNOTOPTIONAL = 0x8002000F,DISP_E_BADCALLEE = 0x80020010,DISP_E_NOTACOLLECTION = 0x80020011,DISP_E_DIVBYZERO = 0x80020012,DISP_E_BUFFERTOOSMALL = 0x80020013,TYPE_E_BUFFERTOOSMALL = 0x80028016,TYPE_E_FIELDNOTFOUND = 0x80028017,TYPE_E_INVDATAREAD = 0x80028018,TYPE_E_UNSUPFORMAT = 0x80028019,TYPE_E_REGISTRYACCESS = 0x8002801C,TYPE_E_LIBNOTREGISTERED = 0x8002801D,TYPE_E_UNDEFINEDTYPE = 0x80028027,TYPE_E_QUALIFIEDNAMEDISALLOWED = 0x80028028,TYPE_E_INVALIDSTATE = 0x80028029,TYPE_E_WRONGTYPEKIND = 0x8002802A,TYPE_E_ELEMENTNOTFOUND = 0x8002802B,TYPE_E_AMBIGUOUSNAME = 0x8002802C,TYPE_E_NAMECONFLICT = 0x8002802D,TYPE_E_UNKNOWNLCID = 0x8002802E,TYPE_E_DLLFUNCTIONNOTFOUND = 0x8002802F,TYPE_E_BADMODULEKIND = 0x800288BD,TYPE_E_SIZETOOBIG = 0x800288C5,TYPE_E_DUPLICATEID = 0x800288C6,TYPE_E_INVALIDID = 0x800288CF,TYPE_E_TYPEMISMATCH = 0x80028CA0,TYPE_E_OUTOFBOUNDS = 0x80028CA1,TYPE_E_IOERROR = 0x80028CA2,TYPE_E_CANTCREATETMPFILE = 0x80028CA3,TYPE_E_CANTLOADLIBRARY = 0x80029C4A,TYPE_E_INCONSISTENTPROPFUNCS = 0x80029C83,TYPE_E_CIRCULARTYPE = 0x80029C84,STG_E_INVALIDFUNCTION = 0x80030001,STG_E_FILENOTFOUND = 0x80030002,STG_E_PATHNOTFOUND = 0x80030003,STG_E_TOOMANYOPENFILES = 0x80030004,STG_E_ACCESSDENIED = 0x80030005,STG_E_INVALIDHANDLE = 0x80030006,STG_E_INSUFFICIENTMEMORY = 0x80030008,STG_E_INVALIDPOINTER = 0x80030009,STG_E_NOMOREFILES = 0x80030012,STG_E_DISKISWRITEPROTECTED = 0x80030013,STG_E_SEEKERROR = 0x80030019,STG_E_WRITEFAULT = 0x8003001D,STG_E_READFAULT = 0x8003001E,STG_E_SHAREVIOLATION = 0x80030020,STG_E_LOCKVIOLATION = 0x80030021,STG_E_FILEALREADYEXISTS = 0x80030050,STG_E_INVALIDPARAMETER = 0x80030057,STG_E_MEDIUMFULL = 0x80030070,STG_E_PROPSETMISMATCHED = 0x800300F0,STG_E_ABNORMALAPIEXIT = 0x800300FA,STG_E_INVALIDHEADER = 0x800300FB,STG_E_INVALIDNAME = 0x800300FC,STG_E_UNKNOWN = 0x800300FD,STG_E_UNIMPLEMENTEDFUNCTION = 0x800300FE,STG_E_INVALIDFLAG = 0x800300FF,STG_E_INUSE = 0x80030100,STG_E_NOTCURRENT = 0x80030101,STG_E_REVERTED = 0x80030102,STG_E_CANTSAVE = 0x80030103,STG_E_OLDFORMAT = 0x80030104,STG_E_OLDDLL = 0x80030105,STG_E_SHAREREQUIRED = 0x80030106,STG_E_NOTFILEBASEDSTORAGE = 0x80030107,STG_E_EXTANTMARSHALLINGS = 0x80030108,STG_E_DOCFILECORRUPT = 0x80030109,STG_E_BADBASEADDRESS = 0x80030110,STG_E_DOCFILETOOLARGE = 0x80030111,STG_E_NOTSIMPLEFORMAT = 0x80030112,STG_E_INCOMPLETE = 0x80030201,STG_E_TERMINATED = 0x80030202,STG_S_CONVERTED = 0x30200,STG_S_BLOCK = 0x30201,STG_S_RETRYNOW = 0x30202,STG_S_MONITORING = 0x30203,STG_S_MULTIPLEOPENS = 0x30204,STG_S_CONSOLIDATIONFAILED = 0x30205,STG_S_CANNOTCONSOLIDATE = 0x30206,RPC_E_CALL_REJECTED = 0x80010001,RPC_E_CALL_CANCELED = 0x80010002,RPC_E_CANTPOST_INSENDCALL = 0x80010003,RPC_E_CANTCALLOUT_INASYNCCALL = 0x80010004,RPC_E_CANTCALLOUT_INEXTERNALCALL = 0x80010005,RPC_E_CONNECTION_TERMINATED = 0x80010006,RPC_E_SERVER_DIED = 0x80010007,RPC_E_CLIENT_DIED = 0x80010008,RPC_E_INVALID_DATAPACKET = 0x80010009,RPC_E_CANTTRANSMIT_CALL = 0x8001000A,RPC_E_CLIENT_CANTMARSHAL_DATA = 0x8001000B,RPC_E_CLIENT_CANTUNMARSHAL_DATA = 0x8001000C,RPC_E_SERVER_CANTMARSHAL_DATA = 0x8001000D,RPC_E_SERVER_CANTUNMARSHAL_DATA = 0x8001000E,RPC_E_INVALID_DATA = 0x8001000F,RPC_E_INVALID_PARAMETER = 0x80010010,RPC_E_CANTCALLOUT_AGAIN = 0x80010011,RPC_E_SERVER_DIED_DNE = 0x80010012,RPC_E_SYS_CALL_FAILED = 0x80010100,RPC_E_OUT_OF_RESOURCES = 0x80010101,RPC_E_ATTEMPTED_MULTITHREAD = 0x80010102,RPC_E_NOT_REGISTERED = 0x80010103,RPC_E_FAULT = 0x80010104,RPC_E_SERVERFAULT = 0x80010105,RPC_E_CHANGED_MODE = 0x80010106,RPC_E_INVALIDMETHOD = 0x80010107,RPC_E_DISCONNECTED = 0x80010108,RPC_E_RETRY = 0x80010109,RPC_E_SERVERCALL_RETRYLATER = 0x8001010A,RPC_E_SERVERCALL_REJECTED = 0x8001010B,RPC_E_INVALID_CALLDATA = 0x8001010C,RPC_E_CANTCALLOUT_ININPUTSYNCCALL = 0x8001010D,RPC_E_WRONG_THREAD = 0x8001010E,RPC_E_THREAD_NOT_INIT = 0x8001010F,RPC_E_VERSION_MISMATCH = 0x80010110,RPC_E_INVALID_HEADER = 0x80010111,RPC_E_INVALID_EXTENSION = 0x80010112,RPC_E_INVALID_IPID = 0x80010113,RPC_E_INVALID_OBJECT = 0x80010114,RPC_S_CALLPENDING = 0x80010115,RPC_S_WAITONTIMER = 0x80010116,RPC_E_CALL_COMPLETE = 0x80010117,RPC_E_UNSECURE_CALL = 0x80010118,RPC_E_TOO_LATE = 0x80010119,RPC_E_NO_GOOD_SECURITY_PACKAGES = 0x8001011A,RPC_E_ACCESS_DENIED = 0x8001011B,RPC_E_REMOTE_DISABLED = 0x8001011C,RPC_E_INVALID_OBJREF = 0x8001011D,RPC_E_NO_CONTEXT = 0x8001011E,RPC_E_TIMEOUT = 0x8001011F,RPC_E_NO_SYNC = 0x80010120,RPC_E_FULLSIC_REQUIRED = 0x80010121,RPC_E_INVALID_STD_NAME = 0x80010122,CO_E_FAILEDTOIMPERSONATE = 0x80010123,CO_E_FAILEDTOGETSECCTX = 0x80010124,CO_E_FAILEDTOOPENTHREADTOKEN = 0x80010125,CO_E_FAILEDTOGETTOKENINFO = 0x80010126,CO_E_TRUSTEEDOESNTMATCHCLIENT = 0x80010127,CO_E_FAILEDTOQUERYCLIENTBLANKET = 0x80010128,CO_E_FAILEDTOSETDACL = 0x80010129,CO_E_ACCESSCHECKFAILED = 0x8001012A,CO_E_NETACCESSAPIFAILED = 0x8001012B,CO_E_WRONGTRUSTEENAMESYNTAX = 0x8001012C,CO_E_INVALIDSID = 0x8001012D,CO_E_CONVERSIONFAILED = 0x8001012E,CO_E_NOMATCHINGSIDFOUND = 0x8001012F,CO_E_LOOKUPACCSIDFAILED = 0x80010130,CO_E_NOMATCHINGNAMEFOUND = 0x80010131,CO_E_LOOKUPACCNAMEFAILED = 0x80010132,CO_E_SETSERLHNDLFAILED = 0x80010133,CO_E_FAILEDTOGETWINDIR = 0x80010134,CO_E_PATHTOOLONG = 0x80010135,CO_E_FAILEDTOGENUUID = 0x80010136,CO_E_FAILEDTOCREATEFILE = 0x80010137,CO_E_FAILEDTOCLOSEHANDLE = 0x80010138,CO_E_EXCEEDSYSACLLIMIT = 0x80010139,CO_E_ACESINWRONGORDER = 0x8001013A,CO_E_INCOMPATIBLESTREAMVERSION = 0x8001013B,CO_E_FAILEDTOOPENPROCESSTOKEN = 0x8001013C,CO_E_DECODEFAILED = 0x8001013D,CO_E_ACNOTINITIALIZED = 0x8001013F,CO_E_CANCEL_DISABLED = 0x80010140,RPC_E_UNEXPECTED = 0x8001FFFF,NTE_BAD_UID = 0x80090001,NTE_BAD_HASH = 0x80090002,NTE_BAD_KEY = 0x80090003,NTE_BAD_LEN = 0x80090004,NTE_BAD_DATA = 0x80090005,NTE_BAD_SIGNATURE = 0x80090006,NTE_BAD_VER = 0x80090007,NTE_BAD_ALGID = 0x80090008,NTE_BAD_FLAGS = 0x80090009,NTE_BAD_TYPE = 0x8009000A,NTE_BAD_KEY_STATE = 0x8009000B,NTE_BAD_HASH_STATE = 0x8009000C,NTE_NO_KEY = 0x8009000D,NTE_NO_MEMORY = 0x8009000E,NTE_EXISTS = 0x8009000F,NTE_PERM = 0x80090010,NTE_NOT_FOUND = 0x80090011,NTE_DOUBLE_ENCRYPT = 0x80090012,NTE_BAD_PROVIDER = 0x80090013,NTE_BAD_PROV_TYPE = 0x80090014,NTE_BAD_PUBLIC_KEY = 0x80090015,NTE_BAD_KEYSET = 0x80090016,NTE_PROV_TYPE_NOT_DEF = 0x80090017,NTE_PROV_TYPE_ENTRY_BAD = 0x80090018,NTE_KEYSET_NOT_DEF = 0x80090019,NTE_KEYSET_ENTRY_BAD = 0x8009001A,NTE_PROV_TYPE_NO_MATCH = 0x8009001B,NTE_SIGNATURE_FILE_BAD = 0x8009001C,NTE_PROVIDER_DLL_FAIL = 0x8009001D,NTE_PROV_DLL_NOT_FOUND = 0x8009001E,NTE_BAD_KEYSET_PARAM = 0x8009001F,NTE_FAIL = 0x80090020,NTE_SYS_ERR = 0x80090021,NTE_SILENT_CONTEXT = 0x80090022,NTE_TOKEN_KEYSET_STORAGE_FULL = 0x80090023,NTE_TEMPORARY_PROFILE = 0x80090024,NTE_FIXEDPARAMETER = 0x80090025,SEC_E_INSUFFICIENT_MEMORY = 0x80090300,SEC_E_INVALID_HANDLE = 0x80090301,SEC_E_UNSUPPORTED_FUNCTION = 0x80090302,SEC_E_TARGET_UNKNOWN = 0x80090303,SEC_E_INTERNAL_ERROR = 0x80090304,SEC_E_SECPKG_NOT_FOUND = 0x80090305,SEC_E_NOT_OWNER = 0x80090306,SEC_E_CANNOT_INSTALL = 0x80090307,SEC_E_INVALID_TOKEN = 0x80090308,SEC_E_CANNOT_PACK = 0x80090309,SEC_E_QOP_NOT_SUPPORTED = 0x8009030A,SEC_E_NO_IMPERSONATION = 0x8009030B,SEC_E_LOGON_DENIED = 0x8009030C,SEC_E_UNKNOWN_CREDENTIALS = 0x8009030D,SEC_E_NO_CREDENTIALS = 0x8009030E,SEC_E_MESSAGE_ALTERED = 0x8009030F,SEC_E_OUT_OF_SEQUENCE = 0x80090310,SEC_E_NO_AUTHENTICATING_AUTHORITY = 0x80090311,SEC_I_CONTINUE_NEEDED = 0x90312,SEC_I_COMPLETE_NEEDED = 0x90313,SEC_I_COMPLETE_AND_CONTINUE = 0x90314,SEC_I_LOCAL_LOGON = 0x90315,SEC_E_BAD_PKGID = 0x80090316,SEC_E_CONTEXT_EXPIRED = 0x80090317,SEC_E_INCOMPLETE_MESSAGE = 0x80090318,SEC_E_INCOMPLETE_CREDENTIALS = 0x80090320,SEC_E_BUFFER_TOO_SMALL = 0x80090321,SEC_I_INCOMPLETE_CREDENTIALS = 0x90320,SEC_I_RENEGOTIATE = 0x90321,SEC_E_WRONG_PRINCIPAL = 0x80090322,SEC_I_NO_LSA_CONTEXT = 0x90323,SEC_E_TIME_SKEW = 0x80090324,SEC_E_UNTRUSTED_ROOT = 0x80090325,SEC_E_ILLEGAL_MESSAGE = 0x80090326,SEC_E_CERT_UNKNOWN = 0x80090327,SEC_E_CERT_EXPIRED = 0x80090328,SEC_E_ENCRYPT_FAILURE = 0x80090329,SEC_E_DECRYPT_FAILURE = 0x80090330,SEC_E_ALGORITHM_MISMATCH = 0x80090331,SEC_E_SECURITY_QOS_FAILED = 0x80090332,CRYPT_E_MSG_ERROR = 0x80091001,CRYPT_E_UNKNOWN_ALGO = 0x80091002,CRYPT_E_OID_FORMAT = 0x80091003,CRYPT_E_INVALID_MSG_TYPE = 0x80091004,CRYPT_E_UNEXPECTED_ENCODING = 0x80091005,CRYPT_E_AUTH_ATTR_MISSING = 0x80091006,CRYPT_E_HASH_VALUE = 0x80091007,CRYPT_E_INVALID_INDEX = 0x80091008,CRYPT_E_ALREADY_DECRYPTED = 0x80091009,CRYPT_E_NOT_DECRYPTED = 0x8009100A,CRYPT_E_RECIPIENT_NOT_FOUND = 0x8009100B,CRYPT_E_CONTROL_TYPE = 0x8009100C,CRYPT_E_ISSUER_SERIALNUMBER = 0x8009100D,CRYPT_E_SIGNER_NOT_FOUND = 0x8009100E,CRYPT_E_ATTRIBUTES_MISSING = 0x8009100F,CRYPT_E_STREAM_MSG_NOT_READY = 0x80091010,CRYPT_E_STREAM_INSUFFICIENT_DATA = 0x80091011,CRYPT_E_BAD_LEN = 0x80092001,CRYPT_E_BAD_ENCODE = 0x80092002,CRYPT_E_FILE_ERROR = 0x80092003,CRYPT_E_NOT_FOUND = 0x80092004,CRYPT_E_EXISTS = 0x80092005,CRYPT_E_NO_PROVIDER = 0x80092006,CRYPT_E_SELF_SIGNED = 0x80092007,CRYPT_E_DELETED_PREV = 0x80092008,CRYPT_E_NO_MATCH = 0x80092009,CRYPT_E_UNEXPECTED_MSG_TYPE = 0x8009200A,CRYPT_E_NO_KEY_PROPERTY = 0x8009200B,CRYPT_E_NO_DECRYPT_CERT = 0x8009200C,CRYPT_E_BAD_MSG = 0x8009200D,CRYPT_E_NO_SIGNER = 0x8009200E,CRYPT_E_PENDING_CLOSE = 0x8009200F,CRYPT_E_REVOKED = 0x80092010,CRYPT_E_NO_REVOCATION_DLL = 0x80092011,CRYPT_E_NO_REVOCATION_CHECK = 0x80092012,CRYPT_E_REVOCATION_OFFLINE = 0x80092013,CRYPT_E_NOT_IN_REVOCATION_DATABASE = 0x80092014,CRYPT_E_INVALID_NUMERIC_STRING = 0x80092020,CRYPT_E_INVALID_PRINTABLE_STRING = 0x80092021,CRYPT_E_INVALID_IA5_STRING = 0x80092022,CRYPT_E_INVALID_X500_STRING = 0x80092023,CRYPT_E_NOT_CHAR_STRING = 0x80092024,CRYPT_E_FILERESIZED = 0x80092025,CRYPT_E_SECURITY_SETTINGS = 0x80092026,CRYPT_E_NO_VERIFY_USAGE_DLL = 0x80092027,CRYPT_E_NO_VERIFY_USAGE_CHECK = 0x80092028,CRYPT_E_VERIFY_USAGE_OFFLINE = 0x80092029,CRYPT_E_NOT_IN_CTL = 0x8009202A,CRYPT_E_NO_TRUSTED_SIGNER = 0x8009202B,CRYPT_E_MISSING_PUBKEY_PARA = 0x8009202C,CRYPT_E_OSS_ERROR = 0x80093000,OSS_MORE_BUF = 0x80093001,OSS_NEGATIVE_UINTEGER = 0x80093002,OSS_PDU_RANGE = 0x80093003,OSS_MORE_INPUT = 0x80093004,OSS_DATA_ERROR = 0x80093005,OSS_BAD_ARG = 0x80093006,OSS_BAD_VERSION = 0x80093007,OSS_OUT_MEMORY = 0x80093008,OSS_PDU_MISMATCH = 0x80093009,OSS_LIMITED = 0x8009300A,OSS_BAD_PTR = 0x8009300B,OSS_BAD_TIME = 0x8009300C,OSS_INDEFINITE_NOT_SUPPORTED = 0x8009300D,OSS_MEM_ERROR = 0x8009300E,OSS_BAD_TABLE = 0x8009300F,OSS_TOO_LONG = 0x80093010,OSS_CONSTRAINT_VIOLATED = 0x80093011,OSS_FATAL_ERROR = 0x80093012,OSS_ACCESS_SERIALIZATION_ERROR = 0x80093013,OSS_NULL_TBL = 0x80093014,OSS_NULL_FCN = 0x80093015,OSS_BAD_ENCRULES = 0x80093016,OSS_UNAVAIL_ENCRULES = 0x80093017,OSS_CANT_OPEN_TRACE_WINDOW = 0x80093018,OSS_UNIMPLEMENTED = 0x80093019,OSS_OID_DLL_NOT_LINKED = 0x8009301A,OSS_CANT_OPEN_TRACE_FILE = 0x8009301B,OSS_TRACE_FILE_ALREADY_OPEN = 0x8009301C,OSS_TABLE_MISMATCH = 0x8009301D,OSS_TYPE_NOT_SUPPORTED = 0x8009301E,OSS_REAL_DLL_NOT_LINKED = 0x8009301F,OSS_REAL_CODE_NOT_LINKED = 0x80093020,OSS_OUT_OF_RANGE = 0x80093021,OSS_COPIER_DLL_NOT_LINKED = 0x80093022,OSS_CONSTRAINT_DLL_NOT_LINKED = 0x80093023,OSS_COMPARATOR_DLL_NOT_LINKED = 0x80093024,OSS_COMPARATOR_CODE_NOT_LINKED = 0x80093025,OSS_MEM_MGR_DLL_NOT_LINKED = 0x80093026,OSS_PDV_DLL_NOT_LINKED = 0x80093027,OSS_PDV_CODE_NOT_LINKED = 0x80093028,OSS_API_DLL_NOT_LINKED = 0x80093029,OSS_BERDER_DLL_NOT_LINKED = 0x8009302A,OSS_PER_DLL_NOT_LINKED = 0x8009302B,OSS_OPEN_TYPE_ERROR = 0x8009302C,OSS_MUTEX_NOT_CREATED = 0x8009302D,OSS_CANT_CLOSE_TRACE_FILE = 0x8009302E,CRYPT_E_ASN1_ERROR = 0x80093100,CRYPT_E_ASN1_INTERNAL = 0x80093101,CRYPT_E_ASN1_EOD = 0x80093102,CRYPT_E_ASN1_CORRUPT = 0x80093103,CRYPT_E_ASN1_LARGE = 0x80093104,CRYPT_E_ASN1_CONSTRAINT = 0x80093105,CRYPT_E_ASN1_MEMORY = 0x80093106,CRYPT_E_ASN1_OVERFLOW = 0x80093107,CRYPT_E_ASN1_BADPDU = 0x80093108,CRYPT_E_ASN1_BADARGS = 0x80093109,CRYPT_E_ASN1_BADREAL = 0x8009310A,CRYPT_E_ASN1_BADTAG = 0x8009310B,CRYPT_E_ASN1_CHOICE = 0x8009310C,CRYPT_E_ASN1_RULE = 0x8009310D,CRYPT_E_ASN1_UTF8 = 0x8009310E,CRYPT_E_ASN1_PDU_TYPE = 0x80093133,CRYPT_E_ASN1_NYI = 0x80093134,CRYPT_E_ASN1_EXTENDED = 0x80093201,CRYPT_E_ASN1_NOEOD = 0x80093202,CERTSRV_E_BAD_REQUESTSUBJECT = 0x80094001,CERTSRV_E_NO_REQUEST = 0x80094002,CERTSRV_E_BAD_REQUESTSTATUS = 0x80094003,CERTSRV_E_PROPERTY_EMPTY = 0x80094004,CERTSRV_E_INVALID_CA_CERTIFICATE = 0x80094005,CERTSRV_E_SERVER_SUSPENDED = 0x80094006,CERTSRV_E_ENCODING_LENGTH = 0x80094007,CERTSRV_E_UNSUPPORTED_CERT_TYPE = 0x80094800,CERTSRV_E_NO_CERT_TYPE = 0x80094801,TRUST_E_SYSTEM_ERROR = 0x80096001,TRUST_E_NO_SIGNER_CERT = 0x80096002,TRUST_E_COUNTER_SIGNER = 0x80096003,TRUST_E_CERT_SIGNATURE = 0x80096004,TRUST_E_TIME_STAMP = 0x80096005,TRUST_E_BAD_DIGEST = 0x80096010,TRUST_E_BASIC_CONSTRAINTS = 0x80096019,TRUST_E_FINANCIAL_CRITERIA = 0x8009601E,MSSIPOTF_E_OUTOFMEMRANGE = 0x80097001,MSSIPOTF_E_CANTGETOBJECT = 0x80097002,MSSIPOTF_E_NOHEADTABLE = 0x80097003,MSSIPOTF_E_BAD_MAGICNUMBER = 0x80097004,MSSIPOTF_E_BAD_OFFSET_TABLE = 0x80097005,MSSIPOTF_E_TABLE_TAGORDER = 0x80097006,MSSIPOTF_E_TABLE_LONGWORD = 0x80097007,MSSIPOTF_E_BAD_FIRST_TABLE_PLACEMENT = 0x80097008,MSSIPOTF_E_TABLES_OVERLAP = 0x80097009,MSSIPOTF_E_TABLE_PADBYTES = 0x8009700A,MSSIPOTF_E_FILETOOSMALL = 0x8009700B,MSSIPOTF_E_TABLE_CHECKSUM = 0x8009700C,MSSIPOTF_E_FILE_CHECKSUM = 0x8009700D,MSSIPOTF_E_FAILED_POLICY = 0x80097010,MSSIPOTF_E_FAILED_HINTS_CHECK = 0x80097011,MSSIPOTF_E_NOT_OPENTYPE = 0x80097012,MSSIPOTF_E_FILE = 0x80097013,MSSIPOTF_E_CRYPT = 0x80097014,MSSIPOTF_E_BADVERSION = 0x80097015,MSSIPOTF_E_DSIG_STRUCTURE = 0x80097016,MSSIPOTF_E_PCONST_CHECK = 0x80097017,MSSIPOTF_E_STRUCTURE = 0x80097018,TRUST_E_PROVIDER_UNKNOWN = 0x800B0001,TRUST_E_ACTION_UNKNOWN = 0x800B0002,TRUST_E_SUBJECT_FORM_UNKNOWN = 0x800B0003,TRUST_E_SUBJECT_NOT_TRUSTED = 0x800B0004,DIGSIG_E_ENCODE = 0x800B0005,DIGSIG_E_DECODE = 0x800B0006,DIGSIG_E_EXTENSIBILITY = 0x800B0007,DIGSIG_E_CRYPTO = 0x800B0008,PERSIST_E_SIZEDEFINITE = 0x800B0009,PERSIST_E_SIZEINDEFINITE = 0x800B000A,PERSIST_E_NOTSELFSIZING = 0x800B000B,TRUST_E_NOSIGNATURE = 0x800B0100,CERT_E_EXPIRED = 0x800B0101,CERT_E_VALIDITYPERIODNESTING = 0x800B0102,CERT_E_ROLE = 0x800B0103,CERT_E_PATHLENCONST = 0x800B0104,CERT_E_CRITICAL = 0x800B0105,CERT_E_PURPOSE = 0x800B0106,CERT_E_ISSUERCHAINING = 0x800B0107,CERT_E_MALFORMED = 0x800B0108,CERT_E_UNTRUSTEDROOT = 0x800B0109,CERT_E_CHAINING = 0x800B010A,TRUST_E_FAIL = 0x800B010B,CERT_E_REVOKED = 0x800B010C,CERT_E_UNTRUSTEDTESTROOT = 0x800B010D,CERT_E_REVOCATION_FAILURE = 0x800B010E,CERT_E_CN_NO_MATCH = 0x800B010F,CERT_E_WRONG_USAGE = 0x800B0110,TRUST_E_EXPLICIT_DISTRUST = 0x800B0111,CERT_E_UNTRUSTEDCA = 0x800B0112,SPAPI_E_EXPECTED_SECTION_NAME = 0x800F0000,SPAPI_E_BAD_SECTION_NAME_LINE = 0x800F0001,SPAPI_E_SECTION_NAME_TOO_LONG = 0x800F0002,SPAPI_E_GENERAL_SYNTAX = 0x800F0003,SPAPI_E_WRONG_INF_STYLE = 0x800F0100,SPAPI_E_SECTION_NOT_FOUND = 0x800F0101,SPAPI_E_LINE_NOT_FOUND = 0x800F0102,SPAPI_E_NO_BACKUP = 0x800F0103,SPAPI_E_NO_ASSOCIATED_CLASS = 0x800F0200,SPAPI_E_CLASS_MISMATCH = 0x800F0201,SPAPI_E_DUPLICATE_FOUND = 0x800F0202,SPAPI_E_NO_DRIVER_SELECTED = 0x800F0203,SPAPI_E_KEY_DOES_NOT_EXIST = 0x800F0204,SPAPI_E_INVALID_DEVINST_NAME = 0x800F0205,SPAPI_E_INVALID_CLASS = 0x800F0206,SPAPI_E_DEVINST_ALREADY_EXISTS = 0x800F0207,SPAPI_E_DEVINFO_NOT_REGISTERED = 0x800F0208,SPAPI_E_INVALID_REG_PROPERTY = 0x800F0209,SPAPI_E_NO_INF = 0x800F020A,SPAPI_E_NO_SUCH_DEVINST = 0x800F020B,SPAPI_E_CANT_LOAD_CLASS_ICON = 0x800F020C,SPAPI_E_INVALID_CLASS_INSTALLER = 0x800F020D,SPAPI_E_DI_DO_DEFAULT = 0x800F020E,SPAPI_E_DI_NOFILECOPY = 0x800F020F,SPAPI_E_INVALID_HWPROFILE = 0x800F0210,SPAPI_E_NO_DEVICE_SELECTED = 0x800F0211,SPAPI_E_DEVINFO_LIST_LOCKED = 0x800F0212,SPAPI_E_DEVINFO_DATA_LOCKED = 0x800F0213,SPAPI_E_DI_BAD_PATH = 0x800F0214,SPAPI_E_NO_CLASSINSTALL_PARAMS = 0x800F0215,SPAPI_E_FILEQUEUE_LOCKED = 0x800F0216,SPAPI_E_BAD_SERVICE_INSTALLSECT = 0x800F0217,SPAPI_E_NO_CLASS_DRIVER_LIST = 0x800F0218,SPAPI_E_NO_ASSOCIATED_SERVICE = 0x800F0219,SPAPI_E_NO_DEFAULT_DEVICE_INTERFACE = 0x800F021A,SPAPI_E_DEVICE_INTERFACE_ACTIVE = 0x800F021B,SPAPI_E_DEVICE_INTERFACE_REMOVED = 0x800F021C,SPAPI_E_BAD_INTERFACE_INSTALLSECT = 0x800F021D,SPAPI_E_NO_SUCH_INTERFACE_CLASS = 0x800F021E,SPAPI_E_INVALID_REFERENCE_STRING = 0x800F021F,SPAPI_E_INVALID_MACHINENAME = 0x800F0220,SPAPI_E_REMOTE_COMM_FAILURE = 0x800F0221,SPAPI_E_MACHINE_UNAVAILABLE = 0x800F0222,SPAPI_E_NO_CONFIGMGR_SERVICES = 0x800F0223,SPAPI_E_INVALID_PROPPAGE_PROVIDER = 0x800F0224,SPAPI_E_NO_SUCH_DEVICE_INTERFACE = 0x800F0225,SPAPI_E_DI_POSTPROCESSING_REQUIRED = 0x800F0226,SPAPI_E_INVALID_COINSTALLER = 0x800F0227,SPAPI_E_NO_COMPAT_DRIVERS = 0x800F0228,SPAPI_E_NO_DEVICE_ICON = 0x800F0229,SPAPI_E_INVALID_INF_LOGCONFIG = 0x800F022A,SPAPI_E_DI_DONT_INSTALL = 0x800F022B,SPAPI_E_INVALID_FILTER_DRIVER = 0x800F022C,SPAPI_E_NON_WINDOWS_NT_DRIVER = 0x800F022D,SPAPI_E_NON_WINDOWS_DRIVER = 0x800F022E,SPAPI_E_NO_CATALOG_FOR_OEM_INF = 0x800F022F,SPAPI_E_DEVINSTALL_QUEUE_NONNATIVE = 0x800F0230,SPAPI_E_NOT_DISABLEABLE = 0x800F0231,SPAPI_E_CANT_REMOVE_DEVINST = 0x800F0232,SPAPI_E_ERROR_NOT_INSTALLED = 0x800F1000,SCARD_F_INTERNAL_ERROR = 0x80100001,SCARD_E_CANCELLED = 0x80100002,SCARD_E_INVALID_HANDLE = 0x80100003,SCARD_E_INVALID_PARAMETER = 0x80100004,SCARD_E_INVALID_TARGET = 0x80100005,SCARD_E_NO_MEMORY = 0x80100006,SCARD_F_WAITED_TOO_LONG = 0x80100007,SCARD_E_INSUFFICIENT_BUFFER = 0x80100008,SCARD_E_UNKNOWN_READER = 0x80100009,SCARD_E_TIMEOUT = 0x8010000A,SCARD_E_SHARING_VIOLATION = 0x8010000B,SCARD_E_NO_SMARTCARD = 0x8010000C,SCARD_E_UNKNOWN_CARD = 0x8010000D,SCARD_E_CANT_DISPOSE = 0x8010000E,SCARD_E_PROTO_MISMATCH = 0x8010000F,SCARD_E_NOT_READY = 0x80100010,SCARD_E_INVALID_VALUE = 0x80100011,SCARD_E_SYSTEM_CANCELLED = 0x80100012,SCARD_F_COMM_ERROR = 0x80100013,SCARD_F_UNKNOWN_ERROR = 0x80100014,SCARD_E_INVALID_ATR = 0x80100015,SCARD_E_NOT_TRANSACTED = 0x80100016,SCARD_E_READER_UNAVAILABLE = 0x80100017,SCARD_P_SHUTDOWN = 0x80100018,SCARD_E_PCI_TOO_SMALL = 0x80100019,SCARD_E_READER_UNSUPPORTED = 0x8010001A,SCARD_E_DUPLICATE_READER = 0x8010001B,SCARD_E_CARD_UNSUPPORTED = 0x8010001C,SCARD_E_NO_SERVICE = 0x8010001D,SCARD_E_SERVICE_STOPPED = 0x8010001E,SCARD_E_UNEXPECTED = 0x8010001F,SCARD_E_ICC_INSTALLATION = 0x80100020,SCARD_E_ICC_CREATEORDER = 0x80100021,SCARD_E_UNSUPPORTED_FEATURE = 0x80100022,SCARD_E_DIR_NOT_FOUND = 0x80100023,SCARD_E_FILE_NOT_FOUND = 0x80100024,SCARD_E_NO_DIR = 0x80100025,SCARD_E_NO_FILE = 0x80100026,SCARD_E_NO_ACCESS = 0x80100027,SCARD_E_WRITE_TOO_MANY = 0x80100028,SCARD_E_BAD_SEEK = 0x80100029,SCARD_E_INVALID_CHV = 0x8010002A,SCARD_E_UNKNOWN_RES_MNG = 0x8010002B,SCARD_E_NO_SUCH_CERTIFICATE = 0x8010002C,SCARD_E_CERTIFICATE_UNAVAILABLE = 0x8010002D,SCARD_E_NO_READERS_AVAILABLE = 0x8010002E,SCARD_E_COMM_DATA_LOST = 0x8010002F,SCARD_W_UNSUPPORTED_CARD = 0x80100065,SCARD_W_UNRESPONSIVE_CARD = 0x80100066,SCARD_W_UNPOWERED_CARD = 0x80100067,SCARD_W_RESET_CARD = 0x80100068,SCARD_W_REMOVED_CARD = 0x80100069,SCARD_W_SECURITY_VIOLATION = 0x8010006A,SCARD_W_WRONG_CHV = 0x8010006B,SCARD_W_CHV_BLOCKED = 0x8010006C,SCARD_W_EOF = 0x8010006D,SCARD_W_CANCELLED_BY_USER = 0x8010006E,COMADMIN_E_OBJECTERRORS = 0x80110401,COMADMIN_E_OBJECTINVALID = 0x80110402,COMADMIN_E_KEYMISSING = 0x80110403,COMADMIN_E_ALREADYINSTALLED = 0x80110404,COMADMIN_E_APP_FILE_WRITEFAIL = 0x80110407,COMADMIN_E_APP_FILE_READFAIL = 0x80110408,COMADMIN_E_APP_FILE_VERSION = 0x80110409,COMADMIN_E_BADPATH = 0x8011040A,COMADMIN_E_APPLICATIONEXISTS = 0x8011040B,COMADMIN_E_ROLEEXISTS = 0x8011040C,COMADMIN_E_CANTCOPYFILE = 0x8011040D,COMADMIN_E_NOUSER = 0x8011040F,COMADMIN_E_INVALIDUSERIDS = 0x80110410,COMADMIN_E_NOREGISTRYCLSID = 0x80110411,COMADMIN_E_BADREGISTRYPROGID = 0x80110412,COMADMIN_E_AUTHENTICATIONLEVEL = 0x80110413,COMADMIN_E_USERPASSWDNOTVALID = 0x80110414,COMADMIN_E_CLSIDORIIDMISMATCH = 0x80110418,COMADMIN_E_REMOTEINTERFACE = 0x80110419,COMADMIN_E_DLLREGISTERSERVER = 0x8011041A,COMADMIN_E_NOSERVERSHARE = 0x8011041B,COMADMIN_E_DLLLOADFAILED = 0x8011041D,COMADMIN_E_BADREGISTRYLIBID = 0x8011041E,COMADMIN_E_APPDIRNOTFOUND = 0x8011041F,COMADMIN_E_REGISTRARFAILED = 0x80110423,COMADMIN_E_COMPFILE_DOESNOTEXIST = 0x80110424,COMADMIN_E_COMPFILE_LOADDLLFAIL = 0x80110425,COMADMIN_E_COMPFILE_GETCLASSOBJ = 0x80110426,COMADMIN_E_COMPFILE_CLASSNOTAVAIL = 0x80110427,COMADMIN_E_COMPFILE_BADTLB = 0x80110428,COMADMIN_E_COMPFILE_NOTINSTALLABLE = 0x80110429,COMADMIN_E_NOTCHANGEABLE = 0x8011042A,COMADMIN_E_NOTDELETEABLE = 0x8011042B,COMADMIN_E_SESSION = 0x8011042C,COMADMIN_E_COMP_MOVE_LOCKED = 0x8011042D,COMADMIN_E_COMP_MOVE_BAD_DEST = 0x8011042E,COMADMIN_E_REGISTERTLB = 0x80110430,COMADMIN_E_SYSTEMAPP = 0x80110433,COMADMIN_E_COMPFILE_NOREGISTRAR = 0x80110434,COMADMIN_E_COREQCOMPINSTALLED = 0x80110435,COMADMIN_E_SERVICENOTINSTALLED = 0x80110436,COMADMIN_E_PROPERTYSAVEFAILED = 0x80110437,COMADMIN_E_OBJECTEXISTS = 0x80110438,COMADMIN_E_REGFILE_CORRUPT = 0x8011043B,COMADMIN_E_PROPERTY_OVERFLOW = 0x8011043C,COMADMIN_E_NOTINREGISTRY = 0x8011043E,COMADMIN_E_OBJECTNOTPOOLABLE = 0x8011043F,COMADMIN_E_APPLID_MATCHES_CLSID = 0x80110446,COMADMIN_E_ROLE_DOES_NOT_EXIST = 0x80110447,COMADMIN_E_START_APP_NEEDS_COMPONENTS = 0x80110448,COMADMIN_E_REQUIRES_DIFFERENT_PLATFORM = 0x80110449,COMADMIN_E_CAN_NOT_EXPORT_APP_PROXY = 0x8011044A,COMADMIN_E_CAN_NOT_START_APP = 0x8011044B,COMADMIN_E_CAN_NOT_EXPORT_SYS_APP = 0x8011044C,COMADMIN_E_CANT_SUBSCRIBE_TO_COMPONENT = 0x8011044D,COMADMIN_E_OBJECT_PARENT_MISSING = 0x80110808,COMADMIN_E_OBJECT_DOES_NOT_EXIST = 0x80110809,COMQC_E_APPLICATION_NOT_QUEUED = 0x80110600,COMQC_E_NO_QUEUEABLE_INTERFACES = 0x80110601,COMQC_E_QUEUING_SERVICE_NOT_AVAILABLE = 0x80110602,MK_S_ASYNCHRONOUS = 0x401E8,INET_E_INVALID_URL = 0x800C0002,INET_E_NO_SESSION = 0x800C0003,INET_E_CANNOT_CONNECT = 0x800C0004,INET_E_RESOURCE_NOT_FOUND = 0x800C0005,INET_E_OBJECT_NOT_FOUND = 0x800C0006,INET_E_DATA_NOT_AVAILABLE = 0x800C0007,INET_E_DOWNLOAD_FAILURE = 0x800C0008,INET_E_AUTHENTICATION_REQUIRED = 0x800C0009,INET_E_NO_VALID_MEDIA = 0x800C000A,INET_E_CONNECTION_TIMEOUT = 0x800C000B,INET_E_INVALID_REQUEST = 0x800C000C,INET_E_UNKNOWN_PROTOCOL = 0x800C000D,INET_E_SECURITY_PROBLEM = 0x800C000E,INET_E_CANNOT_LOAD_DATA = 0x800C000F,INET_E_CANNOT_INSTANTIATE_OBJECT = 0x800C0010,INET_E_REDIRECT_FAILED = 0x800C0014,INET_E_REDIRECT_TO_DIR = 0x800C0015,INET_E_CANNOT_LOCK_REQUEST = 0x800C0016,INET_E_USE_EXTEND_BINDING = 0x800C0017,INET_E_ERROR_FIRST = 0x800C0002,INET_E_CODE_DOWNLOAD_DECLINED = 0x800C0100,INET_E_RESULT_DISPATCHED = 0x800C0200,INET_E_CANNOT_REPLACE_SFP_FILE = 0x800C0300,INET_E_USE_DEFAULT_PROTOCOLHANDLER = 0x800C0011,INET_E_USE_DEFAULT_SETTING = 0x800C0012,INET_E_QUERYOPTION_UNKNOWN = 0x800C0013,INET_E_REDIRECTING = 0x800C0014,};
enum MACRO_HTCLOSE {HTCLOSE = 20,};
enum MACRO_HTERROR {HTERROR = -2,};
enum MACRO_HTRIGHT {HTRIGHT = 11,};
enum MACRO_ICM_OFF {ICM_OFF = 1,ICM_ON = 2,ICM_QUERY = 3,ICM_DONE_OUTSIDEDC = 4,};
enum MACRO_IDABORT {IDABORT = 3,IDRETRY = 4,};
enum MACRO_IDLFLAG {IDLFLAG_NONE = 0,IDLFLAG_FIN = 1,IDLFLAG_FOUT = 2,IDLFLAG_FLCID = 4,IDLFLAG_FRETVAL = 8,};
enum MACRO_IMPLINK {IMPLINK_IP = 155,IMPLINK_LOWEXPER = 156,IMPLINK_HIGHEXPER = 158,};
enum MACRO_INDEXID {INDEXID_OBJECT = 0,INDEXID_CONTAINER = 0,};
enum MACRO_INPLACE {INPLACE_E_FIRST = 0x800401A0,INPLACE_E_LAST = 0x800401AF,INPLACE_S_FIRST = 0x401A0,INPLACE_S_LAST = 0x401AF,};
enum MACRO_INVALID {INVALID_HANDLE_VALUE = -1,INVALID_FILE_SIZE = 4294967295,INVALID_SET_FILE_POINTER = 4294967295,};
enum MACRO_IOCPARM {IOCPARM_MASK = 0x7F,};
enum MACRO_IPPROTO {IPPROTO_IP = 0,IPPROTO_ICMP = 1,IPPROTO_IGMP = 2,IPPROTO_GGP = 3,IPPROTO_TCP = 6,IPPROTO_PUP = 12,IPPROTO_UDP = 17,IPPROTO_IDP = 22,IPPROTO_ND = 77,IPPROTO_RAW = 255,IPPROTO_MAX = 256,};
enum MACRO_JOB_ALL {JOB_ALL_ACCESS = 983056,JOB_READ = 131088,JOB_WRITE = 131088,JOB_EXECUTE = 131088,};
enum MACRO_JOYCAPS {JOYCAPS_HASZ = 0x1,JOYCAPS_HASR = 0x2,JOYCAPS_HASU = 0x4,JOYCAPS_HASV = 0x8,JOYCAPS_HASPOV = 0x10,JOYCAPS_POV4DIR = 0x20,JOYCAPS_POVCTS = 0x40,};
enum MACRO_LC_NONE {LC_NONE = 0,LC_POLYLINE = 2,LC_MARKER = 4,LC_POLYMARKER = 8,LC_WIDE = 16,LC_STYLED = 32,LC_WIDESTYLED = 64,LC_INTERIORS = 128,};
enum MACRO_LENBASE {LENBASE = 1,};
enum MACRO_LOGON32 {LOGON32_LOGON_INTERACTIVE = 2,LOGON32_LOGON_NETWORK = 3,LOGON32_LOGON_BATCH = 4,LOGON32_LOGON_SERVICE = 5,LOGON32_LOGON_UNLOCK = 7,LOGON32_LOGON_NETWORK_CLEARTEXT = 8,LOGON32_LOGON_NEW_CREDENTIALS = 9,LOGON32_PROVIDER_DEFAULT = 0,LOGON32_PROVIDER_WINNT35 = 1,LOGON32_PROVIDER_WINNT40 = 2,LOGON32_PROVIDER_WINNT50 = 3,};
enum MACRO_LZERROR {LZERROR_BADINHANDLE = -1,LZERROR_BADOUTHANDLE = -2,LZERROR_READ = -3,LZERROR_WRITE = -4,LZERROR_GLOBALLOC = -5,LZERROR_GLOBLOCK = -6,LZERROR_BADVALUE = -7,LZERROR_UNKNOWNALG = -8,};
enum MACRO_MARSHAL {MARSHAL_E_FIRST = 0x80040120,MARSHAL_E_LAST = 0x8004012F,MARSHAL_S_FIRST = 0x40120,MARSHAL_S_LAST = 0x4012F,};
enum MACRO_MAXBYTE {MAXBYTE = 0xFF,};
enum MACRO_MAXCHAR {MAXCHAR = 0x7F,MINSHORT = 0x8000,MINLONG = 0x80000000,};
enum MACRO_MAXFILE {MAXFILE = 256,};
enum MACRO_MAXIMUM {MAXIMUM_WAIT_OBJECTS = 64,MAXIMUM_SUSPEND_COUNT = 127,};
enum MACRO_MAXLONG {MAXLONG = 0x7FFFFFFF,HIBITL = 0x80000000,};
enum MACRO_MAXWORD {MAXWORD = 0xFFFF,};
enum MACRO_MAX_ACL {MAX_ACL_REVISION = 4,};
enum MACRO_MAX_SID {MAX_SID_SIZE = 256,};
enum MACRO_MDITILE {MDITILE_VERTICAL = 0x0,MDITILE_HORIZONTAL = 0x1,MDITILE_SKIPDISABLED = 0x2,MDITILE_ZORDER = 0x4,};
enum MACRO_MDMSPKR {MDMSPKR_OFF = 0x0,MDMSPKR_DIAL = 0x1,MDMSPKR_ON = 0x2,MDMSPKR_CALLSETUP = 0x3,};
enum MACRO_MESSAGE {MESSAGE_RESOURCE_UNICODE = 0x1,};
enum MACRO_METRICS {METRICS_USEDEFAULT = -1,};
enum MACRO_MIDIERR {MIDIERR_UNPREPARED = 64,MIDIERR_STILLPLAYING = 65,MIDIERR_NOMAP = 66,MIDIERR_NOTREADY = 67,MIDIERR_NODEVICE = 68,MIDIERR_INVALIDSETUP = 69,MIDIERR_BADOPENMODE = 70,MIDIERR_DONT_CONTINUE = 71,MIDIERR_LASTERROR = 71,};
enum MACRO_MINCHAR {MINCHAR = 0x80,};
enum MACRO_MMIOERR {MMIOERR_BASE = 256,MMIOERR_FILENOTFOUND = 257,MMIOERR_OUTOFMEMORY = 258,MMIOERR_CANNOTOPEN = 259,MMIOERR_CANNOTCLOSE = 260,MMIOERR_CANNOTREAD = 261,MMIOERR_CANNOTWRITE = 262,MMIOERR_CANNOTSEEK = 263,MMIOERR_CANNOTEXPAND = 264,MMIOERR_CHUNKNOTFOUND = 265,MMIOERR_UNBUFFERED = 266,MMIOERR_PATHNOTFOUND = 267,MMIOERR_ACCESSDENIED = 268,MMIOERR_SHARINGVIOLATION = 269,MMIOERR_NETWORKERROR = 270,MMIOERR_TOOMANYOPENFILES = 271,MMIOERR_INVALIDFILE = 272,};
enum MACRO_MONITOR {MONITOR_DEFAULTTONULL = 0x0,MONITOR_DEFAULTTOPRIMARY = 0x1,MONITOR_DEFAULTTONEAREST = 0x2,};
enum MACRO_NCBCALL {NCBCALL = 0x10,};
enum MACRO_NCBENUM {NCBENUM = 0x37,};
enum MACRO_NCBRECV {NCBRECV = 0x15,};
enum MACRO_NCBSEND {NCBSEND = 0x14,};
enum MACRO_NETINFO {NETINFO_DLL16 = 0x1,NETINFO_DISKRED = 0x4,NETINFO_PRINTERRED = 0x8,};
enum MACRO_NMPWAIT {NMPWAIT_WAIT_FOREVER = 0xFFFFFFFF,NMPWAIT_NOWAIT = 0x1,NMPWAIT_USE_DEFAULT_WAIT = 0x0,};
enum MACRO_NOERROR {NOERROR = 0,};
enum MACRO_NUMPENS {NUMPENS = 18,};
enum MACRO_PADDING {PKCS5_PADDING = 1,RANDOM_PADDING = 2,ZERO_PADDING = 3,};
enum MACRO_PATCOPY {PATCOPY = 0xF00021,};
enum MACRO_PC_NONE {PC_NONE = 0,PC_POLYGON = 1,PC_RECTANGLE = 2,PC_WINDPOLYGON = 4,PC_TRAPEZOID = 4,PC_SCANLINE = 8,PC_WIDE = 16,PC_STYLED = 32,PC_WIDESTYLED = 64,PC_INTERIORS = 128,PC_POLYPOLYGON = 256,PC_PATHS = 512,};
enum MACRO_PRESSED {RIGHT_ALT_PRESSED = 0x1,LEFT_ALT_PRESSED = 0x2,RIGHT_CTRL_PRESSED = 0x4,LEFT_CTRL_PRESSED = 0x8,SHIFT_PRESSED = 0x10,};
enum MACRO_PRINTER {PRINTER_CONTROL_PAUSE = 1,PRINTER_CONTROL_RESUME = 2,PRINTER_CONTROL_PURGE = 3,PRINTER_CONTROL_SET_STATUS = 4,PRINTER_STATUS_PAUSED = 1,PRINTER_STATUS_ERROR = 2,PRINTER_STATUS_PENDING_DELETION = 4,PRINTER_STATUS_PAPER_JAM = 8,PRINTER_STATUS_PAPER_OUT = 16,PRINTER_STATUS_MANUAL_FEED = 32,PRINTER_STATUS_PAPER_PROBLEM = 64,PRINTER_STATUS_OFFLINE = 128,PRINTER_STATUS_IO_ACTIVE = 256,PRINTER_STATUS_BUSY = 512,PRINTER_STATUS_PRINTING = 1024,PRINTER_STATUS_OUTPUT_BIN_FULL = 2048,PRINTER_STATUS_NOT_AVAILABLE = 4096,PRINTER_STATUS_WAITING = 8192,PRINTER_STATUS_PROCESSING = 16384,PRINTER_STATUS_INITIALIZING = 32768,PRINTER_STATUS_WARMING_UP = 65536,PRINTER_STATUS_TONER_LOW = 131072,PRINTER_STATUS_NO_TONER = 262144,PRINTER_STATUS_PAGE_PUNT = 524288,PRINTER_STATUS_USER_INTERVENTION = 1048576,PRINTER_STATUS_OUT_OF_MEMORY = 2097152,PRINTER_STATUS_DOOR_OPEN = 4194304,PRINTER_STATUS_SERVER_UNKNOWN = 8388608,PRINTER_STATUS_POWER_SAVE = 16777216,PRINTER_ATTRIBUTE_QUEUED = 1,PRINTER_ATTRIBUTE_DIRECT = 2,PRINTER_ATTRIBUTE_DEFAULT = 4,PRINTER_ATTRIBUTE_SHARED = 8,PRINTER_ATTRIBUTE_NETWORK = 16,PRINTER_ATTRIBUTE_HIDDEN = 32,PRINTER_ATTRIBUTE_LOCAL = 64,PRINTER_ATTRIBUTE_ENABLE_DEVQ = 128,PRINTER_ATTRIBUTE_KEEPPRINTEDJOBS = 256,PRINTER_ATTRIBUTE_DO_COMPLETE_FIRST = 512,PRINTER_ATTRIBUTE_WORK_OFFLINE = 1024,PRINTER_ATTRIBUTE_ENABLE_BIDI = 2048,PRINTER_ATTRIBUTE_RAW_ONLY = 4096,PRINTER_ATTRIBUTE_PUBLISHED = 8192,};
enum MACRO_PROCESS {PROCESS_TERMINATE = 0x1,PROCESS_CREATE_THREAD = 0x2,PROCESS_SET_SESSIONID = 0x4,PROCESS_VM_OPERATION = 0x8,PROCESS_VM_READ = 0x10,PROCESS_VM_WRITE = 0x20,PROCESS_DUP_HANDLE = 0x40,PROCESS_CREATE_PROCESS = 0x80,PROCESS_SET_QUOTA = 0x100,PROCESS_SET_INFORMATION = 0x200,PROCESS_QUERY_INFORMATION = 0x400,PROCESS_ALL_ACCESS = 0x1F0FFF,};
enum MACRO_PROFILE {PROFILE_USER = 0x10000000,PROFILE_KERNEL = 0x20000000,PROFILE_SERVER = 0x40000000,};
enum MACRO_PROPSET {PROPSET_BEHAVIOR_CASE_SENSITIVE = 1,};
enum MACRO_PSIDENT {PSIDENT_GDICENTRIC = 0,PSIDENT_PSCENTRIC = 1,};
enum MACRO_QUALITY {DEFAULT_QUALITY = 0,DRAFT_QUALITY = 1,PROOF_QUALITY = 2,NONANTIALIASED_QUALITY = 3,ANTIALIASED_QUALITY = 4,};
enum MACRO_REPLACE {REPLACE_PRIMARY = 0xA,REPLACE_ALTERNATE = 0xB,};
enum MACRO_SB_HORZ {SB_HORZ = 0,SB_VERT = 1,SB_CTL = 2,SB_BOTH = 3,SB_LINEUP = 0,SB_LINELEFT = 0,SB_LINEDOWN = 1,SB_LINERIGHT = 1,SB_PAGEUP = 2,SB_PAGELEFT = 2,SB_PAGEDOWN = 3,SB_PAGERIGHT = 3,SB_THUMBPOSITION = 4,SB_THUMBTRACK = 5,SB_TOP = 6,SB_LEFT = 6,SB_BOTTOM = 7,SB_RIGHT = 7,SB_ENDSCROLL = 8,};
enum MACRO_SCS_CAP {SCS_CAP_COMPSTR = 0x1,SCS_CAP_MAKEREAD = 0x2,SCS_CAP_SETRECONVERTSTRING = 0x4,};
enum MACRO_SECTION {SECTION_QUERY = 0x1,SECTION_MAP_WRITE = 0x2,SECTION_MAP_READ = 0x4,SECTION_MAP_EXECUTE = 0x8,SECTION_EXTEND_SIZE = 0x10,SECTION_ALL_ACCESS = 0xF001F,};
enum MACRO_SERVICE {SERVICE_KERNEL_DRIVER = 0x1,SERVICE_FILE_SYSTEM_DRIVER = 0x2,SERVICE_ADAPTER = 0x4,SERVICE_RECOGNIZER_DRIVER = 0x8,SERVICE_DRIVER = 0xB,SERVICE_WIN32_OWN_PROCESS = 0x10,SERVICE_WIN32_SHARE_PROCESS = 0x20,SERVICE_WIN32 = 0x30,SERVICE_INTERACTIVE_PROCESS = 0x100,SERVICE_TYPE_ALL = 0x13F,SERVICE_BOOT_START = 0x0,SERVICE_SYSTEM_START = 0x1,SERVICE_AUTO_START = 0x2,SERVICE_DEMAND_START = 0x3,SERVICE_DISABLED = 0x4,SERVICE_ERROR_IGNORE = 0x0,SERVICE_ERROR_NORMAL = 0x1,SERVICE_ERROR_SEVERE = 0x2,SERVICE_ERROR_CRITICAL = 0x3,};
enum MACRO_SESSION {SESSION_ESTABLISHED = 0x3,};
enum MACRO_SETXOFF {SETXOFF = 1,SETXON = 2,};
enum MACRO_SET_ARC {SET_ARC_DIRECTION = 4102,SET_BACKGROUND_COLOR = 4103,SET_POLY_MODE = 4104,SET_SCREEN_ANGLE = 4105,SET_SPREAD = 4106,};
enum MACRO_SRCCOPY {SRCCOPY = 0xCC0020,};
enum MACRO_STDOLE2 {STDOLE2_MAJORVERNUM = 0x2,STDOLE2_MINORVERNUM = 0x0,STDOLE2_LCID = 0x0,};
enum MACRO_STRETCH {STRETCH_ANDSCANS = 1,STRETCH_ORSCANS = 2,STRETCH_DELETESCANS = 3,STRETCH_HALFTONE = 4,};
enum MACRO_SUBLANG {SUBLANG_NEUTRAL = 0x0,SUBLANG_DEFAULT = 0x1,SUBLANG_SYS_DEFAULT = 0x2,SUBLANG_ARABIC_SAUDI_ARABIA = 0x1,SUBLANG_ARABIC_IRAQ = 0x2,SUBLANG_ARABIC_EGYPT = 0x3,SUBLANG_ARABIC_LIBYA = 0x4,SUBLANG_ARABIC_ALGERIA = 0x5,SUBLANG_ARABIC_MOROCCO = 0x6,SUBLANG_ARABIC_TUNISIA = 0x7,SUBLANG_ARABIC_OMAN = 0x8,SUBLANG_ARABIC_YEMEN = 0x9,SUBLANG_ARABIC_SYRIA = 0xA,SUBLANG_ARABIC_JORDAN = 0xB,SUBLANG_ARABIC_LEBANON = 0xC,SUBLANG_ARABIC_KUWAIT = 0xD,SUBLANG_ARABIC_UAE = 0xE,SUBLANG_ARABIC_BAHRAIN = 0xF,SUBLANG_ARABIC_QATAR = 0x10,SUBLANG_AZERI_LATIN = 0x1,SUBLANG_AZERI_CYRILLIC = 0x2,SUBLANG_CHINESE_TRADITIONAL = 0x1,SUBLANG_CHINESE_SIMPLIFIED = 0x2,SUBLANG_CHINESE_HONGKONG = 0x3,SUBLANG_CHINESE_SINGAPORE = 0x4,SUBLANG_CHINESE_MACAU = 0x5,SUBLANG_DUTCH = 0x1,SUBLANG_DUTCH_BELGIAN = 0x2,SUBLANG_ENGLISH_US = 0x1,SUBLANG_ENGLISH_UK = 0x2,SUBLANG_ENGLISH_AUS = 0x3,SUBLANG_ENGLISH_CAN = 0x4,SUBLANG_ENGLISH_NZ = 0x5,SUBLANG_ENGLISH_EIRE = 0x6,SUBLANG_ENGLISH_SOUTH_AFRICA = 0x7,SUBLANG_ENGLISH_JAMAICA = 0x8,SUBLANG_ENGLISH_CARIBBEAN = 0x9,SUBLANG_ENGLISH_BELIZE = 0xA,SUBLANG_ENGLISH_TRINIDAD = 0xB,SUBLANG_ENGLISH_ZIMBABWE = 0xC,SUBLANG_ENGLISH_PHILIPPINES = 0xD,SUBLANG_FRENCH = 0x1,SUBLANG_FRENCH_BELGIAN = 0x2,SUBLANG_FRENCH_CANADIAN = 0x3,SUBLANG_FRENCH_SWISS = 0x4,SUBLANG_FRENCH_LUXEMBOURG = 0x5,SUBLANG_FRENCH_MONACO = 0x6,SUBLANG_GERMAN = 0x1,SUBLANG_GERMAN_SWISS = 0x2,SUBLANG_GERMAN_AUSTRIAN = 0x3,SUBLANG_GERMAN_LUXEMBOURG = 0x4,SUBLANG_GERMAN_LIECHTENSTEIN = 0x5,SUBLANG_ITALIAN = 0x1,SUBLANG_ITALIAN_SWISS = 0x2,SUBLANG_KASHMIRI_INDIA = 0x2,SUBLANG_KOREAN = 0x1,SUBLANG_LITHUANIAN = 0x1,SUBLANG_MALAY_MALAYSIA = 0x1,SUBLANG_MALAY_BRUNEI_DARUSSALAM = 0x2,SUBLANG_NEPALI_INDIA = 0x2,SUBLANG_NORWEGIAN_BOKMAL = 0x1,SUBLANG_NORWEGIAN_NYNORSK = 0x2,SUBLANG_PORTUGUESE = 0x2,SUBLANG_PORTUGUESE_BRAZILIAN = 0x1,SUBLANG_SERBIAN_LATIN = 0x2,SUBLANG_SERBIAN_CYRILLIC = 0x3,SUBLANG_SPANISH = 0x1,SUBLANG_SPANISH_MEXICAN = 0x2,SUBLANG_SPANISH_MODERN = 0x3,SUBLANG_SPANISH_GUATEMALA = 0x4,SUBLANG_SPANISH_COSTA_RICA = 0x5,SUBLANG_SPANISH_PANAMA = 0x6,SUBLANG_SPANISH_DOMINICAN_REPUBLIC = 0x7,SUBLANG_SPANISH_VENEZUELA = 0x8,SUBLANG_SPANISH_COLOMBIA = 0x9,SUBLANG_SPANISH_PERU = 0xA,SUBLANG_SPANISH_ARGENTINA = 0xB,SUBLANG_SPANISH_ECUADOR = 0xC,SUBLANG_SPANISH_CHILE = 0xD,SUBLANG_SPANISH_URUGUAY = 0xE,SUBLANG_SPANISH_PARAGUAY = 0xF,SUBLANG_SPANISH_BOLIVIA = 0x10,SUBLANG_SPANISH_EL_SALVADOR = 0x11,SUBLANG_SPANISH_HONDURAS = 0x12,SUBLANG_SPANISH_NICARAGUA = 0x13,SUBLANG_SPANISH_PUERTO_RICO = 0x14,SUBLANG_SWEDISH = 0x1,SUBLANG_SWEDISH_FINLAND = 0x2,SUBLANG_URDU_PAKISTAN = 0x1,SUBLANG_URDU_INDIA = 0x2,SUBLANG_UZBEK_LATIN = 0x1,SUBLANG_UZBEK_CYRILLIC = 0x2,};
enum MACRO_SW_HIDE {SW_HIDE = 0,SW_SHOWNORMAL = 1,SW_NORMAL = 1,SW_SHOWMINIMIZED = 2,SW_SHOWMAXIMIZED = 3,SW_MAXIMIZE = 3,SW_SHOWNOACTIVATE = 4,SW_SHOW = 5,SW_MINIMIZE = 6,SW_SHOWMINNOACTIVE = 7,SW_SHOWNA = 8,SW_RESTORE = 9,SW_SHOWDEFAULT = 10,SW_FORCEMINIMIZE = 11,SW_MAX = 11,};
enum MACRO_TIMEOUT {TIMEOUT_ASYNC = 0xFFFFFFFF,};
enum MACRO_TIME_MS {TIME_MS = 0x1,TIME_SAMPLES = 0x2,TIME_BYTES = 0x4,TIME_SMPTE = 0x8,TIME_MIDI = 0x10,TIME_TICKS = 0x20,};
enum MACRO_TLS_OUT {TLS_OUT_OF_INDEXES = 0xFFFFFFFF,};
enum MACRO_VARIANT {VARIANT_TRUE = -1,VARIANT_FALSE = 0,};
enum MACRO_VERTRES {VERTRES = 10,};
enum MACRO_WINSOCK {WINSOCK_VERSION = 514,};
enum MACRO_ctlLast {ctlLast = 0x4FF,};
enum MACRO_pshHelp {pshHelp = 1038,};
typedef struct tagMCI_SET_PARMS MCI_SET_PARMS;
typedef struct tagMENUITEMINFOA MENUITEMINFOA;
typedef struct tagMENUITEMINFOW MENUITEMINFOW;
typedef void MENUTEMPLATEA;
typedef void MENUTEMPLATEW;
typedef struct _3D26434F5A7D20980B51C6D4C88FA6DE MFT_ENUM_DATA;
typedef struct midiproptempo_tag MIDIPROPTEMPO;
typedef struct tagMIXERCONTROLA MIXERCONTROLA;
typedef struct tagMIXERCONTROLW MIXERCONTROLW;
typedef struct _MODEMSETTINGS MODEMSETTINGS;
typedef struct tagMONCONVSTRUCT MONCONVSTRUCT;
typedef struct tagMONHSZSTRUCTA MONHSZSTRUCTA;
typedef struct tagMONHSZSTRUCTW MONHSZSTRUCTW;
typedef struct tagMONLINKSTRUCT MONLINKSTRUCT;
typedef struct tagMSGBOXPARAMSA MSGBOXPARAMSA;
typedef struct tagMSGBOXPARAMSW MSGBOXPARAMSW;
typedef struct tagMULTIKEYHELPA MULTIKEYHELPA;
typedef struct tagMULTIKEYHELPW MULTIKEYHELPW;
typedef struct _NETINFOSTRUCT NETINFOSTRUCT;
typedef struct tagCHARSETINFO *NPCHARSETINFO;
typedef struct tagEVENTMSG *NPEVENTMSGMSG;
typedef struct tagEXTLOGFONTA *NPEXTLOGFONTA;
typedef struct tagEXTLOGFONTW *NPEXTLOGFONTW;
typedef struct tagMIDIINCAPSA *NPMIDIINCAPSA;
typedef struct tagMIDIINCAPSW *NPMIDIINCAPSW;
typedef struct tagPAINTSTRUCT *NPPAINTSTRUCT;
typedef struct tagTEXTMETRICA *NPTEXTMETRICA;
typedef struct tagTEXTMETRICW *NPTEXTMETRICW;
typedef struct tagWAVEINCAPSA *NPWAVEINCAPSA;
typedef struct tagWAVEINCAPSW *NPWAVEINCAPSW;
typedef struct tagWNDCLASSEXA *NPWNDCLASSEXA;
typedef struct tagWNDCLASSEXW *NPWNDCLASSEXW;
typedef struct _OLESTREAMVTBL OLESTREAMVTBL;
typedef struct _FC03820C0C9B455049C143518E71A23B OPENCARDNAMEA;
typedef struct _1FC20381981E06D3B4F68D6006129906 OPENCARDNAMEW;
typedef struct tagOFNA OPENFILENAMEA;
typedef struct tagOFNW OPENFILENAMEW;
typedef struct tagPSDA PAGESETUPDLGA;
typedef struct tagPSDW PAGESETUPDLGW;
typedef struct _CERT_CONTEXT *PCERT_CONTEXT;
typedef struct _CMS_KEY_INFO *PCMS_KEY_INFO;
typedef struct pcmwaveformat_tag PCMWAVEFORMAT;
typedef struct tagCOMBOBOXINFO *PCOMBOBOXINFO;
typedef struct tagCWPRETSTRUCT *PCWPRETSTRUCT;
typedef struct tagDESIGNVECTOR *PDESIGNVECTOR;
typedef struct _DISK_LOGGING *PDISK_LOGGING;
typedef struct _DRIVERSTATUS *PDRIVERSTATUS;
typedef struct tagABORTPATH *PEMRABORTPATH;
typedef struct tagABORTPATH *PEMRBEGINPATH;
typedef struct tagEMRCREATEPEN *PEMRCREATEPEN;
typedef struct tagEMREXTESCAPE *PEMREXTESCAPE;
typedef struct tagEMRGLSRECORD *PEMRGLSRECORD;
typedef struct tagEMRINVERTRGN *PEMRINVERTRGN;
typedef struct tagEMRPOLYLINE16 *PEMRPOLYGON16;
typedef struct tagEMRELLIPSE *PEMRRECTANGLE;
typedef struct tagEMRRESTOREDC *PEMRRESTOREDC;
typedef struct tagEMRROUNDRECT *PEMRROUNDRECT;
typedef struct tagEMRSELECTCLIPPATH *PEMRSETBKMODE;
typedef struct tagEMRSELECTCLIPPATH *PEMRSETLAYOUT;
typedef struct tagEMRSETPIXELV *PEMRSETPIXELV;
typedef struct tagABORTPATH *PEMRWIDENPATH;
typedef void (__stdcall *PFN_CMSG_FREE)(void *pv);
typedef struct _FORM_INFO_1A *PFORM_INFO_1A;
typedef struct _FORM_INFO_1W *PFORM_INFO_1W;
typedef struct tagHELPWININFOA *PHELPWININFOA;
typedef struct tagHELPWININFOW *PHELPWININFOW;
typedef struct tagICONMETRICSA *PICONMETRICSA;
typedef struct tagICONMETRICSW *PICONMETRICSW;
typedef struct _INPUT_RECORD *PINPUT_RECORD;
typedef LIST_ENTRY32 *PLIST_ENTRY32;
typedef LIST_ENTRY64 *PLIST_ENTRY64;
typedef struct tagMIDIOUTCAPSA *PMIDIOUTCAPSA;
typedef struct tagMIDIOUTCAPSW *PMIDIOUTCAPSW;
typedef struct _MODEMDEVCAPS *PMODEMDEVCAPS;
typedef struct tagMONERRSTRUCT *PMONERRSTRUCT;
typedef struct tagMONMSGSTRUCT *PMONMSGSTRUCT;
typedef struct tagPALETTEENTRY *PPALETTEENTRY;
typedef struct _PORT_INFO_1A *PPORT_INFO_1A;
typedef struct _PORT_INFO_1W *PPORT_INFO_1W;
typedef struct _PORT_INFO_2A *PPORT_INFO_2A;
typedef struct _PORT_INFO_2W *PPORT_INFO_2W;
typedef struct _PORT_INFO_3A *PPORT_INFO_3A;
typedef struct _PORT_INFO_3W *PPORT_INFO_3W;
typedef struct _PSINJECTDATA *PPSINJECTDATA;
typedef struct _PRIVILEGE_SET PRIVILEGE_SET;
typedef struct _PROV_ENUMALGS PROV_ENUMALGS;
typedef struct _SCHANNEL_ALG *PSCHANNEL_ALG;
typedef struct _TAPE_PREPARE *PTAPE_PREPARE;
typedef struct tagTITLEBARINFO *PTITLEBARINFO;
typedef struct _TOKEN_GROUPS *PTOKEN_GROUPS;
typedef struct _TOKEN_SOURCE *PTOKEN_SOURCE;
typedef struct tWAVEFORMATEX *PWAVEFORMATEX;
typedef struct tagWAVEOUTCAPSA *PWAVEOUTCAPSA;
typedef struct tagWAVEOUTCAPSW *PWAVEOUTCAPSW;
typedef struct _WSAQuerySetA *PWSAQUERYSETA;
typedef struct _WSAQuerySetW *PWSAQUERYSETW;
typedef struct tagREGISTERWORDA REGISTERWORDA;
typedef struct tagREGISTERWORDW REGISTERWORDW;
typedef struct _RGNDATAHEADER RGNDATAHEADER;
typedef unsigned int RPCOLEDATAREP;
typedef struct tagRPCOLEMESSAGE RPCOLEMESSAGE;
typedef void *RPC_IF_HANDLE;
typedef void *RPC_NS_HANDLE;
typedef struct tagSCROLLBARINFO SCROLLBARINFO;
typedef struct _SHQUERYRBINFO SHQUERYRBINFO;
typedef struct tagStorageLayout StorageLayout;
typedef struct _TOKEN_CONTROL TOKEN_CONTROL;
typedef struct _SHORT_SIZEDARR WORD_SIZEDARR;
typedef struct _WSAOVERLAPPED WSAOVERLAPPED;
struct XMLDSOControl;
enum _ELEMENT_TYPE {AllElements = 0x0,ChangerTransport = 0x1,ChangerSlot = 0x2,ChangerIEPort = 0x3,ChangerDrive = 0x4,ChangerDoor = 0x5,ChangerKeypad = 0x6,ChangerMaxElement = 0x7,};
enum _SC_ENUM_TYPE {SC_ENUM_PROCESS_INFO = 0x0,};
enum _SID_NAME_USE {SidTypeUser = 0x1,SidTypeGroup = 0x2,SidTypeDomain = 0x3,SidTypeAlias = 0x4,SidTypeWellKnownGroup = 0x5,SidTypeDeletedAccount = 0x6,SidTypeInvalid = 0x7,SidTypeUnknown = 0x8,SidTypeComputer = 0x9,};
enum _tagPSUACTION {PSU_DEFAULT = 0x1,PSU_SECURITY_URL_ONLY = 0x2,};
enum tagBINDSTATUS {BINDSTATUS_FINDINGRESOURCE = 0x1,BINDSTATUS_CONNECTING = 0x2,BINDSTATUS_REDIRECTING = 0x3,BINDSTATUS_BEGINDOWNLOADDATA = 0x4,BINDSTATUS_DOWNLOADINGDATA = 0x5,BINDSTATUS_ENDDOWNLOADDATA = 0x6,BINDSTATUS_BEGINDOWNLOADCOMPONENTS = 0x7,BINDSTATUS_INSTALLINGCOMPONENTS = 0x8,BINDSTATUS_ENDDOWNLOADCOMPONENTS = 0x9,BINDSTATUS_USINGCACHEDCOPY = 0xA,BINDSTATUS_SENDINGREQUEST = 0xB,BINDSTATUS_CLASSIDAVAILABLE = 0xC,BINDSTATUS_MIMETYPEAVAILABLE = 0xD,BINDSTATUS_CACHEFILENAMEAVAILABLE = 0xE,BINDSTATUS_BEGINSYNCOPERATION = 0xF,BINDSTATUS_ENDSYNCOPERATION = 0x10,BINDSTATUS_BEGINUPLOADDATA = 0x11,BINDSTATUS_UPLOADINGDATA = 0x12,BINDSTATUS_ENDUPLOADDATA = 0x13,BINDSTATUS_PROTOCOLCLASSID = 0x14,BINDSTATUS_ENCODING = 0x15,BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE = 0x16,BINDSTATUS_CLASSINSTALLLOCATION = 0x17,BINDSTATUS_DECODING = 0x18,BINDSTATUS_LOADINGMIMEHANDLER = 0x19,BINDSTATUS_CONTENTDISPOSITIONATTACH = 0x1A,BINDSTATUS_FILTERREPORTMIMETYPE = 0x1B,BINDSTATUS_CLSIDCANINSTANTIATE = 0x1C,BINDSTATUS_IUNKNOWNAVAILABLE = 0x1D,BINDSTATUS_DIRECTBIND = 0x1E,BINDSTATUS_RAWMIMETYPE = 0x1F,BINDSTATUS_PROXYDETECTING = 0x20,BINDSTATUS_ACCEPTRANGES = 0x21,};
enum tagBINDSTRING {BINDSTRING_HEADERS = 0x1,BINDSTRING_ACCEPT_MIMES = 0x2,BINDSTRING_EXTRA_URL = 0x3,BINDSTRING_LANGUAGE = 0x4,BINDSTRING_USERNAME = 0x5,BINDSTRING_PASSWORD = 0x6,BINDSTRING_UA_PIXELS = 0x7,BINDSTRING_UA_COLOR = 0x8,BINDSTRING_OS = 0x9,BINDSTRING_USER_AGENT = 0xA,BINDSTRING_ACCEPT_ENCODINGS = 0xB,BINDSTRING_POST_COOKIE = 0xC,BINDSTRING_POST_DATA_MIME = 0xD,BINDSTRING_URL = 0xE,BINDSTRING_IID = 0xF,BINDSTRING_FLAG_BIND_TO_OBJECT = 0x10,BINDSTRING_PTR_BIND_CONTEXT = 0x11,};
enum tagBIND_FLAGS {BIND_MAYBOTHERUSER = 0x1,BIND_JUSTTESTEXISTENCE = 0x2,};
enum tagCHANGEKIND {CHANGEKIND_ADDMEMBER = 0x0,CHANGEKIND_DELETEMEMBER = 0x1,CHANGEKIND_SETNAMES = 0x2,CHANGEKIND_SETDOCUMENTATION = 0x3,CHANGEKIND_GENERAL = 0x4,CHANGEKIND_INVALIDATE = 0x5,CHANGEKIND_CHANGEFAILED = 0x6,CHANGEKIND_MAX = 0x7,};
enum tagINVOKEKIND {INVOKE_FUNC = 0x1,INVOKE_PROPERTYGET = 0x2,INVOKE_PROPERTYPUT = 0x4,INVOKE_PROPERTYPUTREF = 0x8,};
enum tagOLEWHICHMK {OLEWHICHMK_CONTAINER = 0x1,OLEWHICHMK_OBJREL = 0x2,OLEWHICHMK_OBJFULL = 0x3,};
enum tagPENDINGMSG {PENDINGMSG_CANCELCALL = 0x0,PENDINGMSG_WAITNOPROCESS = 0x1,PENDINGMSG_WAITDEFPROCESS = 0x2,};
enum tagSERVERCALL {SERVERCALL_ISHANDLED = 0x0,SERVERCALL_REJECTED = 0x1,SERVERCALL_RETRYLATER = 0x2,};
typedef struct _userHMETAFILE userHMETAFILE;
typedef struct _userSTGMEDIUM userSTGMEDIUM;
typedef struct _wireSAFEARRAY *wireSAFEARRAY;
typedef struct _CERT_CONTEXT CERT_CONTEXT;
typedef struct tagCHOOSECOLORA CHOOSECOLORA;
typedef struct tagCHOOSECOLORW CHOOSECOLORW;
typedef struct tagICEXYZTRIPLE CIEXYZTRIPLE;
typedef struct _CMS_KEY_INFO CMS_KEY_INFO;
typedef struct _tagCODEBASEHOLD CODEBASEHOLD;
typedef struct tagCOMBOBOXINFO COMBOBOXINFO;
typedef struct _COMMTIMEOUTS COMMTIMEOUTS;
typedef struct _COSERVERINFO COSERVERINFO;
typedef struct _currencyfmtA CURRENCYFMTA;
typedef struct _currencyfmtW CURRENCYFMTW;
typedef struct tagCUSTDATAITEM CUSTDATAITEM;
typedef struct tagCWPRETSTRUCT CWPRETSTRUCT;
typedef struct tagDESIGNVECTOR DESIGNVECTOR;
typedef struct _DISK_LOGGING DISK_LOGGING;
typedef struct _DRIVERSTATUS DRIVERSTATUS;
typedef struct tagABORTPATH EMRABORTPATH;
typedef struct tagABORTPATH EMRBEGINPATH;
typedef struct tagEMRCREATEPEN EMRCREATEPEN;
typedef struct tagEMREXTESCAPE EMREXTESCAPE;
typedef struct tagEMRGLSRECORD EMRGLSRECORD;
typedef struct tagEMRINVERTRGN EMRINVERTRGN;
typedef struct tagEMRPOLYLINE16 EMRPOLYGON16;
typedef struct tagEMRELLIPSE EMRRECTANGLE;
typedef struct tagEMRRESTOREDC EMRRESTOREDC;
typedef struct tagEMRROUNDRECT EMRROUNDRECT;
typedef struct tagEMRSELECTCLIPPATH EMRSETBKMODE;
typedef struct tagEMRSELECTCLIPPATH EMRSETLAYOUT;
typedef struct tagEMRSETPIXELV EMRSETPIXELV;
typedef struct tagABORTPATH EMRWIDENPATH;
typedef struct tagENUMLOGFONTA ENUMLOGFONTA;
typedef struct tagENUMLOGFONTW ENUMLOGFONTW;
typedef struct tagFINDREPLACEA FINDREPLACEA;
typedef struct tagFINDREPLACEW FINDREPLACEW;
typedef struct _FORM_INFO_1A FORM_INFO_1A;
typedef struct _FORM_INFO_1W FORM_INFO_1W;
typedef struct tagGCP_RESULTSA GCP_RESULTSA;
typedef struct tagGCP_RESULTSW GCP_RESULTSW;
typedef struct _GLYPHMETRICS GLYPHMETRICS;
typedef struct tagHELPWININFOA HELPWININFOA;
typedef struct tagHELPWININFOW HELPWININFOW;
typedef struct HENHMETAFILE__ *HENHMETAFILE;
struct IAdviseSink2 {struct IAdviseSink2Vtbl *lpVtbl;};
typedef struct tagICONMETRICSA ICONMETRICSA;
typedef struct tagICONMETRICSW ICONMETRICSW;
struct ICallFactory {struct ICallFactoryVtbl *lpVtbl;};
struct IChannelHook {struct IChannelHookVtbl *lpVtbl;};
struct ICodeInstall {struct ICodeInstallVtbl *lpVtbl;};
struct IEnumMoniker {struct IEnumMonikerVtbl *lpVtbl;};
struct IEnumOLEVERB {struct IEnumOLEVERBVtbl *lpVtbl;};
struct IEnumSTATSTG {struct IEnumSTATSTGVtbl *lpVtbl;};
struct IEnumUnknown {struct IEnumUnknownVtbl *lpVtbl;};
struct IEnumVARIANT {struct IEnumVARIANTVtbl *lpVtbl;};
typedef struct _IMAGE_SYMBOL IMAGE_SYMBOL;
typedef struct _INPUT_RECORD INPUT_RECORD;
struct IPersistFile {struct IPersistFileVtbl *lpVtbl;};
struct IPropertyBag {struct IPropertyBagVtbl *lpVtbl;};
struct IRootStorage {struct IRootStorageVtbl *lpVtbl;};
struct ISoftDistExt {struct ISoftDistExtVtbl *lpVtbl;};
struct ISynchronize {struct ISynchronizeVtbl *lpVtbl;};
struct ITypeFactory {struct ITypeFactoryVtbl *lpVtbl;};
struct ITypeMarshal {struct ITypeMarshalVtbl *lpVtbl;};
struct IViewObject2 {struct IViewObject2Vtbl *lpVtbl;};
struct IWinInetInfo {struct IWinInetInfoVtbl *lpVtbl;};
struct IXMLDocument {struct IXMLDocumentVtbl *lpVtbl;};
struct IXMLElement2 {struct IXMLElement2Vtbl *lpVtbl;};
typedef void *I_RPC_HANDLE;
typedef IAdviseSink *LPADVISESINK;
typedef struct tagALTTABINFO *LPALTTABINFO;
typedef struct tagBIND_OPTS2 *LPBIND_OPTS2;
typedef struct tagBITMAPINFO *LPBITMAPINFO;
typedef struct _COMMCONFIG *LPCOMMCONFIG;
typedef struct tagCURSORINFO *LPCURSORINFO;
typedef IDataFilter *LPDATAFILTER;
typedef IDataObject *LPDATAOBJECT;
typedef struct tagDIBSECTION *LPDIBSECTION;
typedef IDropSource *LPDROPSOURCE;
typedef struct tagDROPSTRUCT *LPDROPSTRUCT;
typedef IDropTarget *LPDROPTARGET;
typedef IEnumString *LPENUMSTRING;
typedef struct tagFILTERKEYS *LPFILTERKEYS;
typedef int *LPFXPT2DOT30;
typedef struct _JOB_INFO_3 *LPJOB_INFO_3;
typedef struct tagKEYBDINPUT *LPKEYBDINPUT;
typedef struct tagLOGBRUSH32 *LPLOGBRUSH32;
typedef struct tagLOGPALETTE *LPLOGPALETTE;
typedef struct tagMETAHEADER *LPMETAHEADER;
typedef struct tagMETARECORD *LPMETARECORD;
typedef struct tagMETHODDATA *LPMETHODDATA;
typedef struct tagMINMAXINFO *LPMINMAXINFO;
typedef struct tagMIXERCAPSA *LPMIXERCAPSA;
typedef struct tagMIXERCAPSW *LPMIXERCAPSW;
typedef struct tagMIXERLINEA *LPMIXERLINEA;
typedef struct tagMIXERLINEW *LPMIXERLINEW;
typedef struct tagMOUSEINPUT *LPMOUSEINPUT;
typedef struct _numberfmtA *LPNUMBERFMTA;
typedef struct _numberfmtW *LPNUMBERFMTW;
typedef struct _OVERLAPPED *LPOVERLAPPED;
typedef IRecordInfo *LPRECORDINFO;
typedef struct tagSCROLLINFO *LPSCROLLINFO;
typedef struct tagSTICKYKEYS *LPSTICKYKEYS;
typedef struct _SYSTEMTIME *LPSYSTEMTIME;
typedef struct tagTOGGLEKEYS *LPTOGGLEKEYS;
typedef IViewObject *LPVIEWOBJECT;
typedef struct waveformat_tag *LPWAVEFORMAT;
typedef struct tagWINDOWINFO *LPWINDOWINFO;
typedef struct _WSAVersion *LPWSAVERSION;
enum MACRO_ACCESS {ACCESS_SYSTEM_SECURITY = 0x1000000,};
enum MACRO_AC_SRC {AC_SRC_OVER = 0x0,AC_SRC_ALPHA = 0x1,};
enum MACRO_APPCMD {APPCMD_CLIENTONLY = 0x10,APPCMD_FILTERINITS = 0x20,APPCMD_MASK = 0xFF0,};
enum MACRO_ASPECT {ASPECT_FILTERING = 0x1,};
enum MACRO_ASSERT {ASSERT_PRIMARY = 0x8,ASSERT_ALTERNATE = 0x9,};
enum MACRO_BACKUP {BACKUP_INVALID = 0x0,BACKUP_DATA = 0x1,BACKUP_EA_DATA = 0x2,BACKUP_SECURITY_DATA = 0x3,BACKUP_ALTERNATE_DATA = 0x4,BACKUP_LINK = 0x5,BACKUP_PROPERTY_DATA = 0x6,BACKUP_OBJECT_ID = 0x7,BACKUP_REPARSE_DATA = 0x8,BACKUP_SPARSE_BLOCK = 0x9,};
enum MACRO_BKMODE {BKMODE_LAST = 2,};
enum MACRO_BUFSIZ {BUFSIZ = 512,};
enum MACRO_CALERT {CALERT_SYSTEM = 6,};
enum MACRO_CLRDTR {CLRDTR = 6,};
enum MACRO_COMMON {COMMON_LVB_LEADING_BYTE = 0x100,COMMON_LVB_TRAILING_BYTE = 0x200,COMMON_LVB_GRID_HORIZONTAL = 0x400,COMMON_LVB_GRID_LVERTICAL = 0x800,COMMON_LVB_GRID_RVERTICAL = 0x1000,COMMON_LVB_REVERSE_VIDEO = 0x4000,COMMON_LVB_UNDERSCORE = 0x8000,COMMON_LVB_SBCSDBCS = 0x300,};
enum MACRO_CP_ACP {CP_ACP = 0,CP_OEMCP = 1,CP_MACCP = 2,CP_THREAD_ACP = 3,CP_SYMBOL = 42,CP_UTF7 = 65000,CP_UTF8 = 65001,};
enum MACRO_CREATE {CREATE_NEW = 1,CREATE_ALWAYS = 2,};
enum MACRO_CSOUND {CSOUND_SYSTEM = 16,};
enum MACRO_CURSOR {CURSOR_SHOWING = 0x1,};
enum MACRO_DATA_E {DATA_E_FORMATETC = -2147221404,};
enum MACRO_DELETE {DELETE = 0x10000,};
enum MACRO_DEVICE {DEVICE_NOTIFY_WINDOW_HANDLE = 0x0,DEVICE_NOTIFY_SERVICE_HANDLE = 0x1,};
enum MACRO_DISPID {DISPID_UNKNOWN = -1,DISPID_VALUE = 0,DISPID_PROPERTYPUT = -3,DISPID_NEWENUM = -4,DISPID_EVALUATE = -5,DISPID_CONSTRUCTOR = -6,DISPID_DESTRUCTOR = -7,DISPID_COLLECT = -8,};
enum MACRO_DMLERR {DMLERR_NO_ERROR = 0,DMLERR_FIRST = 16384,DMLERR_ADVACKTIMEOUT = 16384,DMLERR_BUSY = 16385,DMLERR_DATAACKTIMEOUT = 16386,DMLERR_DLL_NOT_INITIALIZED = 16387,DMLERR_DLL_USAGE = 16388,DMLERR_EXECACKTIMEOUT = 16389,DMLERR_INVALIDPARAMETER = 16390,DMLERR_LOW_MEMORY = 16391,DMLERR_MEMORY_ERROR = 16392,DMLERR_NOTPROCESSED = 16393,DMLERR_NO_CONV_ESTABLISHED = 16394,DMLERR_POKEACKTIMEOUT = 16395,DMLERR_POSTMSG_FAILED = 16396,DMLERR_REENTRANCY = 16397,DMLERR_SERVER_DIED = 16398,DMLERR_SYS_ERROR = 16399,DMLERR_UNADVACKTIMEOUT = 16400,DMLERR_UNFOUND_QUEUE_ID = 16401,DMLERR_LAST = 16401,};
enum MACRO_DOMAIN {DOMAIN_USER_RID_ADMIN = 0x1F4,DOMAIN_USER_RID_GUEST = 0x1F5,DOMAIN_USER_RID_KRBTGT = 0x1F6,DOMAIN_GROUP_RID_ADMINS = 0x200,DOMAIN_GROUP_RID_USERS = 0x201,DOMAIN_GROUP_RID_GUESTS = 0x202,DOMAIN_GROUP_RID_COMPUTERS = 0x203,DOMAIN_GROUP_RID_CONTROLLERS = 0x204,DOMAIN_GROUP_RID_CERT_ADMINS = 0x205,DOMAIN_GROUP_RID_SCHEMA_ADMINS = 0x206,DOMAIN_GROUP_RID_ENTERPRISE_ADMINS = 0x207,DOMAIN_GROUP_RID_POLICY_ADMINS = 0x208,DOMAIN_ALIAS_RID_ADMINS = 0x220,DOMAIN_ALIAS_RID_USERS = 0x221,DOMAIN_ALIAS_RID_GUESTS = 0x222,DOMAIN_ALIAS_RID_POWER_USERS = 0x223,DOMAIN_ALIAS_RID_ACCOUNT_OPS = 0x224,DOMAIN_ALIAS_RID_SYSTEM_OPS = 0x225,DOMAIN_ALIAS_RID_PRINT_OPS = 0x226,DOMAIN_ALIAS_RID_BACKUP_OPS = 0x227,DOMAIN_ALIAS_RID_REPLICATOR = 0x228,DOMAIN_ALIAS_RID_RAS_SERVERS = 0x229,DOMAIN_ALIAS_RID_PREW2KCOMPACCESS = 0x22A,};
enum MACRO_DOUBLE {DOUBLE_CLICK = 0x2,};
enum MACRO_DRIVER {DRIVER_KERNELMODE = 0x1,DRIVER_USERMODE = 0x2,};
enum MACRO_DRVCNF {DRVCNF_CANCEL = 0x0,DRVCNF_OK = 0x1,DRVCNF_RESTART = 0x2,};
enum MACRO_DT_TOP {DT_TOP = 0x0,DT_LEFT = 0x0,DT_CENTER = 0x1,DT_RIGHT = 0x2,DT_VCENTER = 0x4,DT_BOTTOM = 0x8,DT_WORDBREAK = 0x10,DT_SINGLELINE = 0x20,DT_EXPANDTABS = 0x40,DT_TABSTOP = 0x80,DT_NOCLIP = 0x100,DT_EXTERNALLEADING = 0x200,DT_CALCRECT = 0x400,DT_NOPREFIX = 0x800,DT_INTERNAL = 0x1000,DT_EDITCONTROL = 0x2000,DT_PATH_ELLIPSIS = 0x4000,DT_END_ELLIPSIS = 0x8000,DT_MODIFYSTRING = 0x10000,DT_RTLREADING = 0x20000,DT_WORD_ELLIPSIS = 0x40000,DT_NOFULLWIDTHCHARBREAK = 0x80000,DT_HIDEPREFIX = 0x100000,DT_PREFIXONLY = 0x200000,};
enum MACRO_ENABLE {ENABLE_PROCESSED_INPUT = 0x1,ENABLE_LINE_INPUT = 0x2,ENABLE_ECHO_INPUT = 0x4,ENABLE_WINDOW_INPUT = 0x8,ENABLE_MOUSE_INPUT = 0x10,ENABLE_PROCESSED_OUTPUT = 0x1,ENABLE_WRAP_AT_EOL_OUTPUT = 0x2,};
enum MACRO_ENDDOC {ENDDOC = 11,};
enum MACRO_FLASHW {FLASHW_STOP = 0,FLASHW_CAPTION = 1,FLASHW_TRAY = 2,FLASHW_ALL = 3,FLASHW_TIMER = 4,FLASHW_TIMERNOFG = 12,};
enum MACRO_FORMAT {FORMAT_MESSAGE_ALLOCATE_BUFFER = 0x100,FORMAT_MESSAGE_IGNORE_INSERTS = 0x200,FORMAT_MESSAGE_FROM_STRING = 0x400,FORMAT_MESSAGE_FROM_HMODULE = 0x800,FORMAT_MESSAGE_FROM_SYSTEM = 0x1000,FORMAT_MESSAGE_ARGUMENT_ARRAY = 0x2000,FORMAT_MESSAGE_MAX_WIDTH_MASK = 0xFF,};
enum MACRO_GET_PS {GET_PS_FEATURESETTING = 4121,};
enum MACRO_HANDLE {HANDLE_MAX = 50,};
enum MACRO_HANGUP {HANGUP_PENDING = 0x4,HANGUP_COMPLETE = 0x5,};
enum MACRO_HIBITI {HIBITI = 0x80000000,};
enum MACRO_HSHELL {HSHELL_WINDOWCREATED = 1,HSHELL_WINDOWDESTROYED = 2,HSHELL_ACTIVATESHELLWINDOW = 3,HSHELL_WINDOWACTIVATED = 4,HSHELL_GETMINRECT = 5,HSHELL_REDRAW = 6,HSHELL_TASKMAN = 7,HSHELL_LANGUAGE = 8,HSHELL_ACCESSIBILITYSTATE = 11,HSHELL_APPCOMMAND = 12,};
enum MACRO_HTHELP {HTHELP = 21,};
enum MACRO_HTLEFT {HTLEFT = 10,};
enum MACRO_HTMENU {HTMENU = 5,};
enum MACRO_HTSIZE {HTSIZE = 4,};
enum MACRO_HTZOOM {HTZOOM = 9,};
enum MACRO_IDHELP {IDHELP = 9,};
enum MACRO_IEPORT {EXTEND_IEPORT = 2,RETRACT_IEPORT = 3,};
enum MACRO_IGIMIF {IGIMIF_RIGHTMENU = 0x1,};
enum MACRO_IGIMII {IGIMII_CMODE = 0x1,IGIMII_SMODE = 0x2,IGIMII_CONFIGURE = 0x4,IGIMII_TOOLS = 0x8,IGIMII_HELP = 0x10,IGIMII_OTHER = 0x20,IGIMII_INPUTTOOLS = 0x40,};
enum MACRO_IGNORE {IGNORE = 0,INFINITE = -1,};
enum MACRO_IMEVER {IMEVER_0310 = 0x3000A,IMEVER_0400 = 0x40000,};
enum MACRO_IMPORT {IMPORT_OBJECT_HDR_SIG2 = 0xFFFF,};
enum MACRO_INADDR {INADDR_ANY = 0x0,INADDR_LOOPBACK = 0x7F000001,INADDR_BROADCAST = 0xFFFFFFFF,INADDR_NONE = 0xFFFFFFFFFFFFFFFF,};
enum MACRO_INET_E {INET_E_DEFAULT_ACTION = -2146697199,};
enum MACRO_IPPORT {IPPORT_ECHO = 7,IPPORT_DISCARD = 9,IPPORT_SYSTAT = 11,IPPORT_DAYTIME = 13,IPPORT_NETSTAT = 15,IPPORT_FTP = 21,IPPORT_TELNET = 23,IPPORT_SMTP = 25,IPPORT_TIMESERVER = 37,IPPORT_NAMESERVER = 42,IPPORT_WHOIS = 43,IPPORT_MTP = 57,IPPORT_TFTP = 69,IPPORT_RJE = 77,IPPORT_FINGER = 79,IPPORT_TTYLINK = 87,IPPORT_SUPDUP = 95,IPPORT_EXECSERVER = 512,IPPORT_LOGINSERVER = 513,IPPORT_CMDSERVER = 514,IPPORT_EFSSERVER = 520,IPPORT_BIFFUDP = 512,IPPORT_WHOSERVER = 513,IPPORT_ROUTESERVER = 520,IPPORT_RESERVED = 1024,};
enum MACRO_JOYERR {JOYERR_NOERROR = 0,JOYERR_PARMS = 165,JOYERR_NOCANDO = 166,JOYERR_UNPLUGGED = 167,};
enum MACRO_LAYOUT {LAYOUT_RTL = 0x1,LAYOUT_BTT = 0x2,LAYOUT_VBH = 0x4,LAYOUT_ORIENTATIONMASK = 0x7,LAYOUT_BITMAPORIENTATIONPRESERVED = 0x8,};
enum MACRO_LENGTH {VENDOR_ID_LENGTH = 8,PRODUCT_ID_LENGTH = 16,REVISION_LENGTH = 4,SERIAL_NUMBER_LENGTH = 32,};
enum MACRO_LGRPID {LGRPID_INSTALLED = 0x1,LGRPID_SUPPORTED = 0x2,};
enum MACRO_LISTEN {LISTEN_OUTSTANDING = 0x1,};
enum MACRO_LOCALE {LOCALE_SYSTEM_DEFAULT = 2048,LOCALE_USER_DEFAULT = 1024,LOCALE_NEUTRAL = 0,};
enum MACRO_LOGOFF {ENDSESSION_LOGOFF = 0x80000000,EWX_LOGOFF = 0x0,};
enum MACRO_MAXDIR {MAXDIR = 256,};
enum MACRO_MAXEXT {MAXEXT = 256,};
enum MACRO_MAXINT {MAXINT = 0x7FFFFFFF,HIBITS = 0x80000000,};
enum MACRO_MCIERR {MCIERR_INVALID_DEVICE_ID = 257,MCIERR_UNRECOGNIZED_KEYWORD = 259,MCIERR_UNRECOGNIZED_COMMAND = 261,MCIERR_HARDWARE = 262,MCIERR_INVALID_DEVICE_NAME = 263,MCIERR_OUT_OF_MEMORY = 264,MCIERR_DEVICE_OPEN = 265,MCIERR_CANNOT_LOAD_DRIVER = 266,MCIERR_MISSING_COMMAND_STRING = 267,MCIERR_PARAM_OVERFLOW = 268,MCIERR_MISSING_STRING_ARGUMENT = 269,MCIERR_BAD_INTEGER = 270,MCIERR_PARSER_INTERNAL = 271,MCIERR_DRIVER_INTERNAL = 272,MCIERR_MISSING_PARAMETER = 273,MCIERR_UNSUPPORTED_FUNCTION = 274,MCIERR_FILE_NOT_FOUND = 275,MCIERR_DEVICE_NOT_READY = 276,MCIERR_INTERNAL = 277,MCIERR_DRIVER = 278,MCIERR_CANNOT_USE_ALL = 279,MCIERR_MULTIPLE = 280,MCIERR_EXTENSION_NOT_FOUND = 281,MCIERR_OUTOFRANGE = 282,MCIERR_FLAGS_NOT_COMPATIBLE = 284,MCIERR_FILE_NOT_SAVED = 286,MCIERR_DEVICE_TYPE_REQUIRED = 287,MCIERR_DEVICE_LOCKED = 288,MCIERR_DUPLICATE_ALIAS = 289,MCIERR_BAD_CONSTANT = 290,MCIERR_MUST_USE_SHAREABLE = 291,MCIERR_MISSING_DEVICE_NAME = 292,MCIERR_BAD_TIME_FORMAT = 293,MCIERR_NO_CLOSING_QUOTE = 294,MCIERR_DUPLICATE_FLAGS = 295,MCIERR_INVALID_FILE = 296,MCIERR_NULL_PARAMETER_BLOCK = 297,MCIERR_UNNAMED_RESOURCE = 298,MCIERR_NEW_REQUIRES_ALIAS = 299,MCIERR_NOTIFY_ON_AUTO_OPEN = 300,MCIERR_NO_ELEMENT_ALLOWED = 301,MCIERR_NONAPPLICABLE_FUNCTION = 302,MCIERR_ILLEGAL_FOR_AUTO_OPEN = 303,MCIERR_FILENAME_REQUIRED = 304,MCIERR_EXTRA_CHARACTERS = 305,MCIERR_DEVICE_NOT_INSTALLED = 306,MCIERR_GET_CD = 307,MCIERR_SET_CD = 308,MCIERR_SET_DRIVE = 309,MCIERR_DEVICE_LENGTH = 310,MCIERR_DEVICE_ORD_LENGTH = 311,MCIERR_NO_INTEGER = 312,MCIERR_WAVE_OUTPUTSINUSE = 320,MCIERR_WAVE_SETOUTPUTINUSE = 321,MCIERR_WAVE_INPUTSINUSE = 322,MCIERR_WAVE_SETINPUTINUSE = 323,MCIERR_WAVE_OUTPUTUNSPECIFIED = 324,MCIERR_WAVE_INPUTUNSPECIFIED = 325,MCIERR_WAVE_OUTPUTSUNSUITABLE = 326,MCIERR_WAVE_SETOUTPUTUNSUITABLE = 327,MCIERR_WAVE_INPUTSUNSUITABLE = 328,MCIERR_WAVE_SETINPUTUNSUITABLE = 329,MCIERR_SEQ_DIV_INCOMPATIBLE = 336,MCIERR_SEQ_PORT_INUSE = 337,MCIERR_SEQ_PORT_NONEXISTENT = 338,MCIERR_SEQ_PORT_MAPNODEVICE = 339,MCIERR_SEQ_PORT_MISCERROR = 340,MCIERR_SEQ_TIMER = 341,MCIERR_SEQ_PORTUNSPECIFIED = 342,MCIERR_SEQ_NOMIDIPRESENT = 343,MCIERR_NO_WINDOW = 346,MCIERR_CREATEWINDOW = 347,MCIERR_FILE_READ = 348,MCIERR_FILE_WRITE = 349,MCIERR_NO_IDENTITY = 350,MCIERR_CUSTOM_DRIVER_BASE = 512,};
enum MACRO_MCW_IC {MCW_IC = 0x1000,};
enum MACRO_MCW_PC {MCW_PC = 0x300,};
enum MACRO_MCW_RC {MCW_RC = 0xC00,};
enum MACRO_MDMVOL {MDMVOL_LOW = 0x0,MDMVOL_MEDIUM = 0x1,MDMVOL_HIGH = 0x2,};
enum MACRO_METHOD {METHOD_BUFFERED = 0,METHOD_IN_DIRECT = 1,METHOD_OUT_DIRECT = 2,METHOD_NEITHER = 3,};
enum MACRO_MF_HSZ {MF_HSZ_INFO = 0x1000000,MF_SENDMSGS = 0x2000000,MF_POSTMSGS = 0x4000000,MF_CALLBACKS = 0x8000000,MF_ERRORS = 0x10000000,MF_LINKS = 0x20000000,MF_CONV = 0x40000000,MF_MASK = 0xFF000000,};
enum MACRO_MIXERR {MIXERR_INVALLINE = 1024,MIXERR_INVALCONTROL = 1025,MIXERR_INVALVALUE = 1026,MIXERR_LASTERROR = 1026,};
enum MACRO_MK_ALT {MK_ALT = 0x20,};
enum MACRO_MM_MAX {MM_MAX_NUMAXES = 16,};
enum MACRO_MUTANT {MUTANT_QUERY_STATE = 0x1,MUTANT_ALL_ACCESS = 0x1F0001,};
enum MACRO_NUMPRS {NUMPRS_LEADING_WHITE = 0x1,NUMPRS_TRAILING_WHITE = 0x2,NUMPRS_LEADING_PLUS = 0x4,NUMPRS_TRAILING_PLUS = 0x8,NUMPRS_LEADING_MINUS = 0x10,NUMPRS_TRAILING_MINUS = 0x20,NUMPRS_HEX_OCT = 0x40,NUMPRS_PARENS = 0x80,NUMPRS_DECIMAL = 0x100,NUMPRS_THOUSANDS = 0x200,NUMPRS_CURRENCY = 0x400,NUMPRS_EXPONENT = 0x800,NUMPRS_USE_ALL = 0x1000,NUMPRS_STD = 0x1FFF,NUMPRS_NEG = 0x10000,NUMPRS_INEXACT = 0x20000,};
enum MACRO_OLEOBJ {OLEOBJ_E_FIRST = 0x80040180,OLEOBJ_E_LAST = 0x8004018F,OLEOBJ_S_FIRST = 0x40180,OLEOBJ_S_LAST = 0x4018F,};
enum MACRO_PANOSE {PANOSE_COUNT = 10,};
enum MACRO_PARITY {PARITY_NONE = 0x100,PARITY_ODD = 0x200,PARITY_EVEN = 0x400,PARITY_MARK = 0x800,PARITY_SPACE = 0x1000,};
enum MACRO_PIDDSI {PIDDSI_CATEGORY = 0x2,PIDDSI_PRESFORMAT = 0x3,PIDDSI_BYTECOUNT = 0x4,PIDDSI_LINECOUNT = 0x5,PIDDSI_PARCOUNT = 0x6,PIDDSI_SLIDECOUNT = 0x7,PIDDSI_NOTECOUNT = 0x8,PIDDSI_HIDDENCOUNT = 0x9,PIDDSI_MMCLIPCOUNT = 0xA,PIDDSI_SCALE = 0xB,PIDDSI_HEADINGPAIR = 0xC,PIDDSI_DOCPARTS = 0xD,PIDDSI_MANAGER = 0xE,PIDDSI_COMPANY = 0xF,PIDDSI_LINKSDIRTY = 0x10,};
enum MACRO_PIDMSI {PIDMSI_EDITOR = 0x2,PIDMSI_SUPPLIER = 0x3,PIDMSI_SOURCE = 0x4,PIDMSI_SEQUENCE_NO = 0x5,PIDMSI_PROJECT = 0x6,PIDMSI_STATUS = 0x7,PIDMSI_OWNER = 0x8,PIDMSI_RATING = 0x9,PIDMSI_PRODUCTION = 0xA,PIDMSI_COPYRIGHT = 0xB,};
enum MACRO_PLANES {PLANES = 14,NUMBRUSHES = 16,};
enum MACRO_PRSPEC {PRSPEC_INVALID = 0xFFFFFFFF,PRSPEC_LPWSTR = 0x0,PRSPEC_PROPID = 0x1,};
enum MACRO_PSNRET {PSNRET_NOERROR = 0,PSNRET_INVALID = 1,PSNRET_INVALID_NOCHANGEPAGE = 2,PSNRET_MESSAGEHANDLED = 3,};
enum MACRO_PSWIZB {PSWIZB_BACK = 0x1,PSWIZB_NEXT = 0x2,PSWIZB_FINISH = 0x4,PSWIZB_DISABLEDFINISH = 0x8,};
enum MACRO_REASON {REASON_SWINSTALL = 0,REASON_HWINSTALL = 1,REASON_SERVICEHANG = 2,REASON_UNSTABLE = 3,REASON_SWHWRECONF = 4,REASON_OTHER = 5,REASON_UNKNOWN = 255,REASON_PLANNED_FLAG = -2147483648,};
enum MACRO_RESULT {RESULT_IS_ALIAS = 0x1,};
enum MACRO_RETURN {RETURN_SMART_STATUS = 0xDA,};
enum MACRO_RPCFLG {RPCFLG_MESSAGE = 0x1000000,RPCFLG_AUTO_COMPLETE = 0x8000000,RPCFLG_LOCAL_CALL = 0x10000000,RPCFLG_INPUT_SYNCHRONOUS = 0x20000000,RPCFLG_ASYNCHRONOUS = 0x40000000,RPCFLG_NON_NDR = 0x80000000,};
enum MACRO_SC_DLG {SC_DLG_MINIMAL_UI = 0x1,SC_DLG_NO_UI = 0x2,SC_DLG_FORCE_UI = 0x4,};
enum MACRO_SEARCH {SEARCH_ALL = 0x0,SEARCH_PRIMARY = 0x1,SEARCH_ALTERNATE = 0x2,SEARCH_ALL_NO_SEQ = 0x4,SEARCH_PRI_NO_SEQ = 0x5,SEARCH_ALT_NO_SEQ = 0x6,};
enum MACRO_SELECT {SELECT_CAP_CONVERSION = 0x1,SELECT_CAP_SENTENCE = 0x2,};
enum MACRO_SERIAL {SERIAL_LSRMST_ESCAPE = 0x0,SERIAL_LSRMST_LSR_DATA = 0x1,SERIAL_LSRMST_LSR_NODATA = 0x2,SERIAL_LSRMST_MST = 0x3,SERIAL_IOC_FCR_FIFO_ENABLE = 0x1,SERIAL_IOC_FCR_RCVR_RESET = 0x2,SERIAL_IOC_FCR_XMIT_RESET = 0x4,SERIAL_IOC_FCR_DMA_MODE = 0x8,SERIAL_IOC_FCR_RES1 = 0x10,SERIAL_IOC_FCR_RES2 = 0x20,SERIAL_IOC_FCR_RCVR_TRIGGER_LSB = 0x40,SERIAL_IOC_FCR_RCVR_TRIGGER_MSB = 0x80,SERIAL_IOC_MCR_DTR = 0x1,SERIAL_IOC_MCR_RTS = 0x2,SERIAL_IOC_MCR_OUT1 = 0x4,SERIAL_IOC_MCR_OUT2 = 0x8,SERIAL_IOC_MCR_LOOP = 0x10,};
enum MACRO_SERVER {SERVER_ACCESS_ADMINISTER = 0x1,SERVER_ACCESS_ENUMERATE = 0x2,};
enum MACRO_SETDTR {SETDTR = 5,};
enum MACRO_SETRTS {SETRTS = 3,CLRRTS = 4,};
enum MACRO_SE_ERR {SE_ERR_FNF = 2,SE_ERR_PNF = 3,SE_ERR_ACCESSDENIED = 5,SE_ERR_OOM = 8,SE_ERR_DLLNOTFOUND = 32,SE_ERR_SHARE = 26,SE_ERR_ASSOCINCOMPLETE = 27,SE_ERR_DDETIMEOUT = 28,SE_ERR_DDEFAIL = 29,SE_ERR_DDEBUSY = 30,SE_ERR_NOASSOC = 31,};
enum MACRO_SHGNLI {SHGNLI_PIDL = 0x1,SHGNLI_PREFIXNAME = 0x2,SHGNLI_NOUNIQUE = 0x4,};
enum MACRO_SIGNAL {SIGABRT = 22,SIGFPE = 8,SIGILL = 4,SIGINT = 2,SIGSEGV = 11,SIGTERM = 15,SIGUSR1 = 16,SIGUSR2 = 17,SIGUSR3 = 20,SIGBREAK = 21,};
enum MACRO_SIZEOF {SIZEOF_RFPO_DATA = 16,};
enum MACRO_SOCKET {SOCKET_ERROR = -1,};
enum MACRO_SORTED {SORTED_CTL_EXT_FLAGS_OFFSET = 0,SORTED_CTL_EXT_COUNT_OFFSET = 4,SORTED_CTL_EXT_MAX_COLLISION_OFFSET = 8,SORTED_CTL_EXT_HASH_BUCKET_OFFSET = 12,SORTED_CTL_EXT_HASHED_SUBJECT_IDENTIFIER_FLAG = 1,};
enum MACRO_SRCAND {SRCAND = 0x8800C6,};
enum MACRO_STARTF {STARTF_USESHOWWINDOW = 0x1,STARTF_USESIZE = 0x2,STARTF_USEPOSITION = 0x4,STARTF_USECOUNTCHARS = 0x8,STARTF_USEFILLATTRIBUTE = 0x10,STARTF_RUNFULLSCREEN = 0x20,STARTF_FORCEONFEEDBACK = 0x40,STARTF_FORCEOFFFEEDBACK = 0x80,STARTF_USESTDHANDLES = 0x100,STARTF_USEHOTKEY = 0x200,};
enum MACRO_STATUS {STATUS_WAIT_0 = 0x0,STATUS_ABANDONED_WAIT_0 = 0x80,STATUS_USER_APC = 0xC0,STATUS_TIMEOUT = 0x102,STATUS_PENDING = 0x103,};
enum MACRO_STDOLE {STDOLE_MAJORVERNUM = 0x1,STDOLE_MINORVERNUM = 0x0,STDOLE_LCID = 0x0,};
enum MACRO_STGFMT {STGFMT_STORAGE = 0,STGFMT_NATIVE = 1,STGFMT_FILE = 3,STGFMT_ANY = 4,STGFMT_DOCFILE = 5,STGFMT_DOCUMENT = 0,};
enum MACRO_STREAM {STREAM_NORMAL_ATTRIBUTE = 0x0,STREAM_MODIFIED_WHEN_READ = 0x1,STREAM_CONTAINS_SECURITY = 0x2,STREAM_CONTAINS_PROPERTIES = 0x4,STREAM_SPARSE_ATTRIBUTE = 0x8,};
enum MACRO_STRICT {STRICT = 1,};
enum MACRO_SYSPAL {SYSPAL_ERROR = 0,SYSPAL_STATIC = 1,SYSPAL_NOSTATIC = 2,SYSPAL_NOSTATIC256 = 3,};
enum MACRO_SYSRGN {SYSRGN = 4,};
enum MACRO_SYSTEM {SYSTEM_AUDIT_ACE_TYPE = 0x2,SYSTEM_ALARM_ACE_TYPE = 0x3,};
enum MACRO_TARGET {TARGET_IS_NT50_OR_LATER = 1,TARGET_IS_NT40_OR_LATER = 1,TARGET_IS_NT351_OR_WIN95_OR_LATER = 1,};
enum MACRO_THREAD {THREAD_TERMINATE = 0x1,THREAD_SUSPEND_RESUME = 0x2,THREAD_GET_CONTEXT = 0x8,THREAD_SET_CONTEXT = 0x10,THREAD_SET_INFORMATION = 0x20,THREAD_QUERY_INFORMATION = 0x40,THREAD_SET_THREAD_TOKEN = 0x80,THREAD_IMPERSONATE = 0x100,THREAD_DIRECT_IMPERSONATION = 0x200,THREAD_ALL_ACCESS = 0x1F03FF,};
enum MACRO_TIMERR {TIMERR_NOERROR = 0,TIMERR_NOCANDO = 97,TIMERR_STRUCT = 129,};
enum MACRO_UNLOCK {UNLOCK_ELEMENT = 1,};
enum MACRO_URLMON {URLMON_OPTION_USERAGENT = 0x10000001,URLMON_OPTION_USERAGENT_REFRESH = 0x10000002,URLMON_OPTION_URL_ENCODING = 0x10000004,};
enum MACRO_VARCMP {VARCMP_LT = 0,VARCMP_EQ = 1,VARCMP_GT = 2,VARCMP_NULL = 3,};
enum MACRO_VOLUME {VOLUME_IS_DIRTY = 0x1,VOLUME_UPGRADE_SCHEDULED = 0x2,};
enum MACRO_WAVERR {WAVERR_BADFORMAT = 32,WAVERR_STILLPLAYING = 33,WAVERR_UNPREPARED = 34,WAVERR_SYNC = 35,WAVERR_LASTERROR = 35,};
enum MACRO_WINSTA {WINSTA_ENUMDESKTOPS = 0x1,WINSTA_READATTRIBUTES = 0x2,WINSTA_ACCESSCLIPBOARD = 0x4,WINSTA_CREATEDESKTOP = 0x8,WINSTA_WRITEATTRIBUTES = 0x10,WINSTA_ACCESSGLOBALATOMS = 0x20,WINSTA_EXITWINDOWS = 0x40,WINSTA_ENUMERATE = 0x100,WINSTA_READSCREEN = 0x200,};
enum MACRO_XCLASS {XCLASS_MASK = 0xFC00,XCLASS_BOOL = 0x1000,XCLASS_DATA = 0x2000,XCLASS_FLAGS = 0x4000,XCLASS_NOTIFICATION = 0x8000,};
enum MACRO__IOFBF {_IOFBF = 0,_IOLBF = 1,_IONBF = 2,};
enum MACRO__KANJI {_KANJI_CP = 932,};
enum MACRO__NFILE {_NFILE_ = 50,};
enum MACRO__WIN32 {_WIN32_IE = 0x501,};
enum MACRO___MBBS {__MBBS = 0x1,__MBBP = 0x2,__MBB1 = 0x4,__MBB2 = 0x8,};
typedef struct _MEMORYSTATUS MEMORYSTATUS;
typedef struct tagMETAFILEPICT METAFILEPICT;
typedef struct tagMIDIOUTCAPSA MIDIOUTCAPSA;
typedef struct tagMIDIOUTCAPSW MIDIOUTCAPSW;
typedef struct _MODEMDEVCAPS MODEMDEVCAPS;
typedef struct tagMONERRSTRUCT MONERRSTRUCT;
typedef struct tagMONMSGSTRUCT MONMSGSTRUCT;
typedef void *NDR_CCONTEXT;
typedef struct _3FA64165D15A4602C29B2D9B0DA4A5E9 *NDR_SCONTEXT;
typedef struct _NETRESOURCEA NETRESOURCEA;
typedef struct _NETRESOURCEW NETRESOURCEW;
typedef struct tagLOGBRUSH32 *NPLOGBRUSH32;
typedef struct tagLOGPALETTE *NPLOGPALETTE;
typedef struct waveformat_tag *NPWAVEFORMAT;
typedef struct _AFPROTOCOLS *PAFPROTOCOLS;
typedef struct tagPALETTEENTRY PALETTEENTRY;
typedef struct _BIN_RESULTS *PBIN_RESULTS;
typedef struct tagCHARSETINFO *PCHARSETINFO;
typedef struct _CRL_CONTEXT *PCRL_CONTEXT;
typedef struct _CSADDR_INFO *PCSADDR_INFO;
typedef struct _CTL_CONTEXT *PCTL_CONTEXT;
typedef struct _DISK_EXTENT *PDISK_EXTENT;
typedef struct _DISK_RECORD *PDISK_RECORD;
typedef struct _DOC_INFO_1A *PDOC_INFO_1A;
typedef struct _DOC_INFO_1W *PDOC_INFO_1W;
typedef struct _DOC_INFO_2A *PDOC_INFO_2A;
typedef struct _DOC_INFO_2W *PDOC_INFO_2W;
typedef struct _DOC_INFO_3A *PDOC_INFO_3A;
typedef struct _DOC_INFO_3W *PDOC_INFO_3W;
typedef struct _DRAWPATRECT *PDRAWPATRECT;
typedef struct tagEMRANGLEARC *PEMRANGLEARC;
typedef struct tagEMRFILLPATH *PEMRFILLPATH;
typedef struct tagEMRFRAMERGN *PEMRFRAMERGN;
typedef struct tagEMRLINETO *PEMRMOVETOEX;
typedef struct tagEMRINVERTRGN *PEMRPAINTRGN;
typedef struct tagEMRPOLYDRAW *PEMRPOLYDRAW;
typedef struct tagEMRPOLYLINE *PEMRPOLYLINE;
typedef struct tagEVENTMSG *PEVENTMSGMSG;
typedef struct tagEXTLOGFONTA *PEXTLOGFONTA;
typedef struct tagEXTLOGFONTW *PEXTLOGFONTW;
typedef struct tagHANDLETABLE *PHANDLETABLE;
typedef struct _JOB_INFO_1A *PJOB_INFO_1A;
typedef struct _JOB_INFO_1W *PJOB_INFO_1W;
typedef struct _JOB_INFO_2A *PJOB_INFO_2A;
typedef struct _JOB_INFO_2W *PJOB_INFO_2W;
typedef struct tagMDINEXTMENU *PMDINEXTMENU;
typedef struct tagMENUBARINFO *PMENUBARINFO;
typedef struct tagMIDIINCAPSA *PMIDIINCAPSA;
typedef struct tagMIDIINCAPSW *PMIDIINCAPSW;
typedef struct tagMONCBSTRUCT *PMONCBSTRUCT;
typedef struct _NAME_BUFFER *PNAME_BUFFER;
typedef struct _NSS_CONTROL *PNSS_CONTROL;
typedef struct _PORT_INFO_1A PORT_INFO_1A;
typedef struct _PORT_INFO_1W PORT_INFO_1W;
typedef struct _PORT_INFO_2A PORT_INFO_2A;
typedef struct _PORT_INFO_2W PORT_INFO_2W;
typedef struct _PORT_INFO_3A PORT_INFO_3A;
typedef struct _PORT_INFO_3W PORT_INFO_3W;
typedef struct tagPAINTSTRUCT *PPAINTSTRUCT;
typedef struct _LIST_ENTRY *PRLIST_ENTRY;
typedef struct _tagPROTOCOLDATA PROTOCOLDATA;
typedef struct _RPC_MESSAGE *PRPC_MESSAGE;
typedef void (__stdcall *PRPC_RUNDOWN)(void *AssociationContext);
typedef struct _PSINJECTDATA PSINJECTDATA;
typedef struct _SI_COPYFILE *PSI_COPYFILE;
typedef struct sockaddr_in *PSOCKADDR_IN;
typedef struct tagTEXTMETRICA *PTEXTMETRICA;
typedef struct tagTEXTMETRICW *PTEXTMETRICW;
typedef struct _TOKEN_OWNER *PTOKEN_OWNER;
typedef struct tagWAVEINCAPSA *PWAVEINCAPSA;
typedef struct tagWAVEINCAPSW *PWAVEINCAPSW;
typedef struct tagWNDCLASSEXA *PWNDCLASSEXA;
typedef struct tagWNDCLASSEXW *PWNDCLASSEXW;
typedef struct tagQUERYCONTEXT QUERYCONTEXT;
typedef struct _QUOTA_LIMITS QUOTA_LIMITS;
typedef struct provider_info REG_PROVIDER;
typedef struct tagRemFORMATETC RemFORMATETC;
typedef struct tagRemSTGMEDIUM RemSTGMEDIUM;
typedef struct _wireSAFEARR_BSTR SAFEARR_BSTR;
typedef struct _SCHANNEL_ALG SCHANNEL_ALG;
typedef struct _tagSOFTDISTINFO SOFTDISTINFO;
typedef struct tagSOUNDSENTRYA SOUNDSENTRYA;
typedef struct tagSOUNDSENTRYW SOUNDSENTRYW;
typedef struct _STARTUPINFOA STARTUPINFOA;
typedef struct _STARTUPINFOW STARTUPINFOW;
typedef struct _TAPE_PREPARE TAPE_PREPARE;
typedef struct tagTITLEBARINFO TITLEBARINFO;
typedef struct _TOKEN_GROUPS TOKEN_GROUPS;
typedef struct _TOKEN_SOURCE TOKEN_SOURCE;
typedef __int16 VARIANT_BOOL;
typedef struct tWAVEFORMATEX WAVEFORMATEX;
typedef struct tagWAVEOUTCAPSA WAVEOUTCAPSA;
typedef struct tagWAVEOUTCAPSW WAVEOUTCAPSW;
typedef struct _WSAQuerySetA WSAQUERYSETA;
typedef struct _WSAQuerySetW WSAQUERYSETW;
typedef struct _506E48B857830EE8DF6E8E27DF4CF86F *_PSIGCONTEXT;
struct _RPC_VERSION {unsigned __int16 MajorVersion;unsigned __int16 MinorVersion;};
enum _tagPI_FLAGS {PI_PARSE_URL = 0x1,PI_FILTER_MODE = 0x2,PI_FORCE_ASYNC = 0x4,PI_USE_WORKERTHREAD = 0x8,PI_MIMEVERIFICATION = 0x10,PI_CLSIDLOOKUP = 0x20,PI_DATAPROGRESS = 0x40,PI_SYNCHRONOUS = 0x80,PI_APARTMENTTHREADED = 0x100,PI_CLASSINSTALL = 0x200,PI_PASSONBINDCTX = 0x2000,PI_NOMIMEHANDLER = 0x8000,PI_LOADAPPDIRECT = 0x4000,PD_FORCE_SWITCH = 0x10000,};
typedef int sig_atomic_t;
enum tagBINDSPEED {BINDSPEED_INDEFINITE = 0x1,BINDSPEED_MODERATE = 0x2,BINDSPEED_IMMEDIATE = 0x3,};
enum tagFUNCFLAGS {FUNCFLAG_FRESTRICTED = 0x1,FUNCFLAG_FSOURCE = 0x2,FUNCFLAG_FBINDABLE = 0x4,FUNCFLAG_FREQUESTEDIT = 0x8,FUNCFLAG_FDISPLAYBIND = 0x10,FUNCFLAG_FDEFAULTBIND = 0x20,FUNCFLAG_FHIDDEN = 0x40,FUNCFLAG_FUSESGETLASTERROR = 0x80,FUNCFLAG_FDEFAULTCOLLELEM = 0x100,FUNCFLAG_FUIDEFAULT = 0x200,FUNCFLAG_FNONBROWSABLE = 0x400,FUNCFLAG_FREPLACEABLE = 0x800,FUNCFLAG_FIMMEDIATEBIND = 0x1000,};
enum tagMSHLFLAGS {MSHLFLAGS_NORMAL = 0x0,MSHLFLAGS_TABLESTRONG = 0x1,MSHLFLAGS_TABLEWEAK = 0x2,MSHLFLAGS_NOPING = 0x4,MSHLFLAGS_RESERVED1 = 0x8,MSHLFLAGS_RESERVED2 = 0x10,MSHLFLAGS_RESERVED3 = 0x20,MSHLFLAGS_RESERVED4 = 0x40,};
enum tagOLERENDER {OLERENDER_NONE = 0x0,OLERENDER_DRAW = 0x1,OLERENDER_FORMAT = 0x2,OLERENDER_ASIS = 0x3,};
enum tagOLEUPDATE {OLEUPDATE_ALWAYS = 0x1,OLEUPDATE_ONCALL = 0x3,};
enum tagTYPEFLAGS {TYPEFLAG_FAPPOBJECT = 0x1,TYPEFLAG_FCANCREATE = 0x2,TYPEFLAG_FLICENSED = 0x4,TYPEFLAG_FPREDECLID = 0x8,TYPEFLAG_FHIDDEN = 0x10,TYPEFLAG_FCONTROL = 0x20,TYPEFLAG_FDUAL = 0x40,TYPEFLAG_FNONEXTENSIBLE = 0x80,TYPEFLAG_FOLEAUTOMATION = 0x100,TYPEFLAG_FRESTRICTED = 0x200,TYPEFLAG_FAGGREGATABLE = 0x400,TYPEFLAG_FREPLACEABLE = 0x800,TYPEFLAG_FDISPATCHABLE = 0x1000,TYPEFLAG_FREVERSEBIND = 0x2000,TYPEFLAG_FPROXY = 0x4000,};
typedef struct _userHPALETTE userHPALETTE;
typedef struct _AFPROTOCOLS AFPROTOCOLS;
typedef struct _BIN_RESULTS BIN_RESULTS;
typedef struct tagCHARSETINFO CHARSETINFO;
typedef struct tagCHOOSEFONTA CHOOSEFONTA;
typedef struct tagCHOOSEFONTW CHOOSEFONTW;
typedef struct tagCONVCONTEXT CONVCONTEXT;
typedef struct _CRL_CONTEXT CRL_CONTEXT;
typedef struct _CSADDR_INFO CSADDR_INFO;
typedef struct _CTL_CONTEXT CTL_CONTEXT;
typedef struct tagCURSORSHAPE CURSORSHAPE;
typedef struct _DEBUG_EVENT DEBUG_EVENT;
typedef struct _DISK_EXTENT DISK_EXTENT;
typedef struct _DISK_RECORD DISK_RECORD;
typedef struct _1C9ED8E2FE494C714F8336D090291E50 DLGTEMPLATE;
typedef struct _DOC_INFO_1A DOC_INFO_1A;
typedef struct _DOC_INFO_1W DOC_INFO_1W;
typedef struct _DOC_INFO_2A DOC_INFO_2A;
typedef struct _DOC_INFO_2W DOC_INFO_2W;
typedef struct _DOC_INFO_3A DOC_INFO_3A;
typedef struct _DOC_INFO_3W DOC_INFO_3W;
struct DOMDocument;
typedef struct _DRAWPATRECT DRAWPATRECT;
typedef struct tagEMRANGLEARC EMRANGLEARC;
typedef struct tagEMRFILLPATH EMRFILLPATH;
typedef struct tagEMRFRAMERGN EMRFRAMERGN;
typedef struct tagEMRLINETO EMRMOVETOEX;
typedef struct tagEMRINVERTRGN EMRPAINTRGN;
typedef struct tagEMRPOLYDRAW EMRPOLYDRAW;
typedef struct tagEMRPOLYLINE EMRPOLYLINE;
typedef struct tagEXTLOGFONTA EXTLOGFONTA;
typedef struct tagEXTLOGFONTW EXTLOGFONTW;
typedef int FXPT16DOT16;
typedef struct tagHANDLETABLE HANDLETABLE;
typedef struct HCOLORSPACE__ *HCOLORSPACE;
struct HCONVLIST__ {int unused;};
struct HINSTANCE__ {int unused;};
struct HMETAFILE__ {int unused;};
struct HMIDISTRM__ {int unused;};
struct HMIXEROBJ__ {int unused;};
struct IAdviseSink {struct IAdviseSinkVtbl *lpVtbl;};
struct IDataFilter {struct IDataFilterVtbl *lpVtbl;};
struct IDataObject {struct IDataObjectVtbl *lpVtbl;};
struct IDropSource {struct IDropSourceVtbl *lpVtbl;};
struct IDropTarget {struct IDropTargetVtbl *lpVtbl;};
struct IEnumString {struct IEnumStringVtbl *lpVtbl;};
typedef struct _IO_COUNTERS IO_COUNTERS;
struct IPipeDouble {struct IPipeDoubleVtbl *lpVtbl;};
struct IRecordInfo {struct IRecordInfoVtbl *lpVtbl;};
struct IRpcOptions {struct IRpcOptionsVtbl *lpVtbl;};
struct IViewObject {struct IViewObjectVtbl *lpVtbl;};
struct IXMLDOMNode {struct IXMLDOMNodeVtbl *lpVtbl;};
struct IXMLDOMText {struct IXMLDOMTextVtbl *lpVtbl;};
struct IXMLElement {struct IXMLElementVtbl *lpVtbl;};
struct IXTLRuntime {struct IXTLRuntimeVtbl *lpVtbl;};
typedef void *I_RPC_MUTEX;
typedef struct _JOB_INFO_1A JOB_INFO_1A;
typedef struct _JOB_INFO_1W JOB_INFO_1W;
typedef struct _JOB_INFO_2A JOB_INFO_2A;
typedef struct _JOB_INFO_2W JOB_INFO_2W;
typedef struct tagKERNINGPAIR KERNINGPAIR;
typedef struct tagAXESLISTA *LPAXESLISTA;
typedef struct tagAXESLISTW *LPAXESLISTW;
typedef struct tagAXISINFOA *LPAXISINFOA;
typedef struct tagAXISINFOW *LPAXISINFOW;
typedef struct tagBIND_OPTS *LPBIND_OPTS;
typedef struct _cpinfoexA *LPCPINFOEXA;
typedef struct _cpinfoexW *LPCPINFOEXW;
typedef struct tagCWPSTRUCT *LPCWPSTRUCT;
typedef struct _DRAGINFOA *LPDRAGINFOA;
typedef struct _DRAGINFOW *LPDRAGINFOW;
typedef IErrorInfo *LPERRORINFO;
typedef struct tagEXCEPINFO *LPEXCEPINFO;
typedef struct tagEXTLOGPEN *LPEXTLOGPEN;
typedef struct tagFORMATETC *LPFORMATETC;
typedef IInternet *LPIINTERNET;
typedef struct joyinfoex_tag *LPJOYINFOEX;
typedef ILockBytes *LPLOCKBYTES;
typedef IMallocSpy *LPMALLOCSPY;
typedef struct tagMOUSEKEYS *LPMOUSEKEYS;
typedef struct _OFNOTIFYA *LPOFNOTIFYA;
typedef struct _OFNOTIFYW *LPOFNOTIFYW;
typedef IOleCache2 *LPOLECACHE2;
typedef IOleObject *LPOLEOBJECT;
typedef struct _OLESTREAM *LPOLESTREAM;
typedef IOleWindow *LPOLEWINDOW;
typedef struct tagPARAMDATA *LPPARAMDATA;
typedef struct tagPARAMDESC *LPPARAMDESC;
typedef struct tagPOLYTEXTA *LPPOLYTEXTA;
typedef struct tagPOLYTEXTW *LPPOLYTEXTW;
typedef struct tagPDA *LPPRINTDLGA;
typedef struct tagPDW *LPPRINTDLGW;
typedef struct _PSHNOTIFY *LPPSHNOTIFY;
typedef struct _SC_ACTION *LPSC_ACTION;
typedef struct tagSTYLEBUFA *LPSTYLEBUFA;
typedef struct tagSTYLEBUFW *LPSTYLEBUFW;
typedef ISurrogate *LPSURROGATE;
typedef struct _TRIVERTEX *LPTRIVERTEX;
typedef ITypeInfo2 *LPTYPEINFO2;
typedef struct tagWINDOWPOS *LPWINDOWPOS;
typedef struct tagWNDCLASSA *LPWNDCLASSA;
typedef struct tagWNDCLASSW *LPWNDCLASSW;
enum MACRO_ALERT {ALERT_SYSTEM_INFORMATIONAL = 1,ALERT_SYSTEM_WARNING = 2,ALERT_SYSTEM_ERROR = 3,ALERT_SYSTEM_QUERY = 4,ALERT_SYSTEM_CRITICAL = 5,};
enum MACRO_ASYNC {ASYNC_MODE_COMPATIBILITY = 0x1,ASYNC_MODE_DEFAULT = 0x0,};
enum MACRO_AUDIT {AUDIT_ALLOW_NO_PRIVILEGE = 0x1,};
enum MACRO_BASIC {BASIC_CONSTRAINTS_CERT_CHAIN_POLICY_CA_FLAG = 0x80000000,BASIC_CONSTRAINTS_CERT_CHAIN_POLICY_END_ENTITY_FLAG = 0x40000000,};
enum MACRO_BRUSH {WHITE_BRUSH = 0,LTGRAY_BRUSH = 1,GRAY_BRUSH = 2,DKGRAY_BRUSH = 3,BLACK_BRUSH = 4,NULL_BRUSH = 5,HOLLOW_BRUSH = 5,};
enum MACRO_CACHE {CACHE_E_FIRST = 0x80040170,CACHE_E_LAST = 0x8004017F,CACHE_S_FIRST = 0x40170,CACHE_S_LAST = 0x4017F,};
enum MACRO_CCERR {CCERR_CHOOSECOLORCODES = 0x5000,};
enum MACRO_CDERR {CDERR_DIALOGFAILURE = 0xFFFF,CDERR_GENERALCODES = 0x0,CDERR_STRUCTSIZE = 0x1,CDERR_INITIALIZATION = 0x2,CDERR_NOTEMPLATE = 0x3,CDERR_NOHINSTANCE = 0x4,CDERR_LOADSTRFAILURE = 0x5,CDERR_FINDRESFAILURE = 0x6,CDERR_LOADRESFAILURE = 0x7,CDERR_LOCKRESFAILURE = 0x8,CDERR_MEMALLOCFAILURE = 0x9,CDERR_MEMLOCKFAILURE = 0xA,CDERR_NOHOOK = 0xB,CDERR_REGISTERMSGFAIL = 0xC,};
enum MACRO_CFERR {CFERR_CHOOSEFONTCODES = 0x2000,CFERR_NOFONTS = 0x2001,CFERR_MAXLESSTHANMIN = 0x2002,};
enum MACRO_COLOR {COLOR_ADJ_MIN = -100,COLOR_ADJ_MAX = 100,};
enum MACRO_CRYPT {CRYPT_MODE_CBCI = 6,CRYPT_MODE_CFBP = 7,CRYPT_MODE_OFBP = 8,CRYPT_MODE_CBCOFM = 9,CRYPT_MODE_CBCOFMI = 10,};
enum MACRO_DEBUG {DEBUG_PROCESS = 0x1,DEBUG_ONLY_THIS_PROCESS = 0x2,};
enum MACRO_DMBIN {DMBIN_UPPER = 1,DMBIN_ONLYONE = 1,DMBIN_LOWER = 2,DMBIN_MIDDLE = 3,DMBIN_MANUAL = 4,DMBIN_ENVELOPE = 5,DMBIN_ENVMANUAL = 6,DMBIN_AUTO = 7,DMBIN_TRACTOR = 8,DMBIN_SMALLFMT = 9,DMBIN_LARGEFMT = 10,DMBIN_LARGECAPACITY = 11,DMBIN_CASSETTE = 14,DMBIN_FORMSOURCE = 15,DMBIN_LAST = 15,DMBIN_USER = 256,};
enum MACRO_DMDUP {DMDUP_SIMPLEX = 1,DMDUP_VERTICAL = 2,DMDUP_HORIZONTAL = 3,};
enum MACRO_DMICM {DMICM_SATURATE = 1,DMICM_CONTRAST = 2,DMICM_COLORIMETRIC = 3,DMICM_ABS_COLORIMETRIC = 4,DMICM_USER = 256,};
enum MACRO_DMNUP {DMNUP_SYSTEM = 1,DMNUP_ONEUP = 2,};
enum MACRO_DMRES {DMRES_DRAFT = -1,DMRES_LOW = -2,DMRES_MEDIUM = -3,DMRES_HIGH = -4,};
enum MACRO_DRIVE {DRIVE_UNKNOWN = 0,DRIVE_NO_ROOT_DIR = 1,DRIVE_REMOVABLE = 2,DRIVE_FIXED = 3,DRIVE_REMOTE = 4,DRIVE_CDROM = 5,DRIVE_RAMDISK = 6,};
enum MACRO_EIMES {EIMES_GETCOMPSTRATONCE = 0x1,EIMES_CANCELCOMPSTRINFOCUS = 0x2,EIMES_COMPLETECOMPSTRKILLFOCUS = 0x4,};
enum MACRO_EMSIS {EMSIS_COMPOSITIONSTRING = 0x1,};
enum MACRO_ERRNO {EZERO = 0,EINVFNC = 1,ENOFILE = 2,ENOPATH = 3,ECONTR = 7,EINVMEM = 9,EINVENV = 10,EINVFMT = 11,EINVACC = 12,EINVDAT = 13,EINVDRV = 15,ECURDIR = 16,ENOTSAM = 17,ENMFILE = 18,ENOENT = 2,EMFILE = 4,EACCES = 5,EBADF = 6,ENOMEM = 8,EFAULT = 14,ENODEV = 15,EINVAL = 19,E2BIG = 20,ENOEXEC = 21,EXDEV = 22,ENFILE = 23,ECHILD = 24,ENOTTY = 25,ETXTBSY = 26,EFBIG = 27,ENOSPC = 28,ESPIPE = 29,EROFS = 30,EMLINK = 31,EPIPE = 32,EDOM = 33,ERANGE = 34,EEXIST = 35,EDEADLOCK = 36,EPERM = 37,ESRCH = 38,EINTR = 39,EIO = 40,ENXIO = 41,EAGAIN = 42,ENOTBLK = 43,EBUSY = 44,ENOTDIR = 45,EISDIR = 46,EUCLEAN = 47,ENAMETOOLONG = 48,ENOTEMPTY = 49,};
enum MACRO_ERROR {ERROR_SEVERITY_SUCCESS = 0x0,ERROR_SEVERITY_INFORMATIONAL = 0x40000000,ERROR_SEVERITY_WARNING = 0x80000000,ERROR_SEVERITY_ERROR = 0xC0000000,ERROR_SUCCESS = 0x0,NO_ERROR = 0x0,SEC_E_OK = 0x0,ERROR_INVALID_FUNCTION = 0x1,ERROR_FILE_NOT_FOUND = 0x2,ERROR_PATH_NOT_FOUND = 0x3,ERROR_TOO_MANY_OPEN_FILES = 0x4,ERROR_ACCESS_DENIED = 0x5,ERROR_INVALID_HANDLE = 0x6,ERROR_ARENA_TRASHED = 0x7,ERROR_NOT_ENOUGH_MEMORY = 0x8,ERROR_INVALID_BLOCK = 0x9,ERROR_BAD_ENVIRONMENT = 0xA,ERROR_BAD_FORMAT = 0xB,ERROR_INVALID_ACCESS = 0xC,ERROR_INVALID_DATA = 0xD,ERROR_OUTOFMEMORY = 0xE,ERROR_INVALID_DRIVE = 0xF,ERROR_CURRENT_DIRECTORY = 0x10,ERROR_NOT_SAME_DEVICE = 0x11,ERROR_NO_MORE_FILES = 0x12,ERROR_WRITE_PROTECT = 0x13,ERROR_BAD_UNIT = 0x14,ERROR_NOT_READY = 0x15,ERROR_BAD_COMMAND = 0x16,ERROR_CRC = 0x17,ERROR_BAD_LENGTH = 0x18,ERROR_SEEK = 0x19,ERROR_NOT_DOS_DISK = 0x1A,ERROR_SECTOR_NOT_FOUND = 0x1B,ERROR_OUT_OF_PAPER = 0x1C,ERROR_WRITE_FAULT = 0x1D,ERROR_READ_FAULT = 0x1E,ERROR_GEN_FAILURE = 0x1F,ERROR_SHARING_VIOLATION = 0x20,ERROR_LOCK_VIOLATION = 0x21,ERROR_WRONG_DISK = 0x22,ERROR_SHARING_BUFFER_EXCEEDED = 0x24,ERROR_HANDLE_EOF = 0x26,ERROR_HANDLE_DISK_FULL = 0x27,ERROR_NOT_SUPPORTED = 0x32,ERROR_REM_NOT_LIST = 0x33,ERROR_DUP_NAME = 0x34,ERROR_BAD_NETPATH = 0x35,ERROR_NETWORK_BUSY = 0x36,ERROR_DEV_NOT_EXIST = 0x37,ERROR_TOO_MANY_CMDS = 0x38,ERROR_ADAP_HDW_ERR = 0x39,ERROR_BAD_NET_RESP = 0x3A,ERROR_UNEXP_NET_ERR = 0x3B,ERROR_BAD_REM_ADAP = 0x3C,ERROR_PRINTQ_FULL = 0x3D,ERROR_NO_SPOOL_SPACE = 0x3E,ERROR_PRINT_CANCELLED = 0x3F,ERROR_NETNAME_DELETED = 0x40,ERROR_NETWORK_ACCESS_DENIED = 0x41,ERROR_BAD_DEV_TYPE = 0x42,ERROR_BAD_NET_NAME = 0x43,ERROR_TOO_MANY_NAMES = 0x44,ERROR_TOO_MANY_SESS = 0x45,ERROR_SHARING_PAUSED = 0x46,ERROR_REQ_NOT_ACCEP = 0x47,ERROR_REDIR_PAUSED = 0x48,ERROR_FILE_EXISTS = 0x50,ERROR_CANNOT_MAKE = 0x52,ERROR_FAIL_I24 = 0x53,ERROR_OUT_OF_STRUCTURES = 0x54,ERROR_ALREADY_ASSIGNED = 0x55,ERROR_INVALID_PASSWORD = 0x56,ERROR_INVALID_PARAMETER = 0x57,ERROR_NET_WRITE_FAULT = 0x58,ERROR_NO_PROC_SLOTS = 0x59,ERROR_TOO_MANY_SEMAPHORES = 0x64,ERROR_EXCL_SEM_ALREADY_OWNED = 0x65,ERROR_SEM_IS_SET = 0x66,ERROR_TOO_MANY_SEM_REQUESTS = 0x67,ERROR_INVALID_AT_INTERRUPT_TIME = 0x68,ERROR_SEM_OWNER_DIED = 0x69,ERROR_SEM_USER_LIMIT = 0x6A,ERROR_DISK_CHANGE = 0x6B,ERROR_DRIVE_LOCKED = 0x6C,ERROR_BROKEN_PIPE = 0x6D,ERROR_OPEN_FAILED = 0x6E,ERROR_BUFFER_OVERFLOW = 0x6F,ERROR_DISK_FULL = 0x70,ERROR_NO_MORE_SEARCH_HANDLES = 0x71,ERROR_INVALID_TARGET_HANDLE = 0x72,ERROR_INVALID_CATEGORY = 0x75,ERROR_INVALID_VERIFY_SWITCH = 0x76,ERROR_BAD_DRIVER_LEVEL = 0x77,ERROR_CALL_NOT_IMPLEMENTED = 0x78,ERROR_SEM_TIMEOUT = 0x79,ERROR_INSUFFICIENT_BUFFER = 0x7A,ERROR_INVALID_NAME = 0x7B,ERROR_INVALID_LEVEL = 0x7C,ERROR_NO_VOLUME_LABEL = 0x7D,ERROR_MOD_NOT_FOUND = 0x7E,ERROR_PROC_NOT_FOUND = 0x7F,ERROR_WAIT_NO_CHILDREN = 0x80,ERROR_CHILD_NOT_COMPLETE = 0x81,ERROR_DIRECT_ACCESS_HANDLE = 0x82,ERROR_NEGATIVE_SEEK = 0x83,ERROR_SEEK_ON_DEVICE = 0x84,ERROR_IS_JOIN_TARGET = 0x85,ERROR_IS_JOINED = 0x86,ERROR_IS_SUBSTED = 0x87,ERROR_NOT_JOINED = 0x88,ERROR_NOT_SUBSTED = 0x89,ERROR_JOIN_TO_JOIN = 0x8A,ERROR_SUBST_TO_SUBST = 0x8B,ERROR_JOIN_TO_SUBST = 0x8C,ERROR_SUBST_TO_JOIN = 0x8D,ERROR_BUSY_DRIVE = 0x8E,ERROR_SAME_DRIVE = 0x8F,ERROR_DIR_NOT_ROOT = 0x90,ERROR_DIR_NOT_EMPTY = 0x91,ERROR_IS_SUBST_PATH = 0x92,ERROR_IS_JOIN_PATH = 0x93,ERROR_PATH_BUSY = 0x94,ERROR_IS_SUBST_TARGET = 0x95,ERROR_SYSTEM_TRACE = 0x96,ERROR_INVALID_EVENT_COUNT = 0x97,ERROR_TOO_MANY_MUXWAITERS = 0x98,ERROR_INVALID_LIST_FORMAT = 0x99,ERROR_LABEL_TOO_LONG = 0x9A,ERROR_TOO_MANY_TCBS = 0x9B,ERROR_SIGNAL_REFUSED = 0x9C,ERROR_DISCARDED = 0x9D,ERROR_NOT_LOCKED = 0x9E,ERROR_BAD_THREADID_ADDR = 0x9F,ERROR_BAD_ARGUMENTS = 0xA0,ERROR_BAD_PATHNAME = 0xA1,ERROR_SIGNAL_PENDING = 0xA2,ERROR_MAX_THRDS_REACHED = 0xA4,ERROR_LOCK_FAILED = 0xA7,ERROR_BUSY = 0xAA,ERROR_CANCEL_VIOLATION = 0xAD,ERROR_ATOMIC_LOCKS_NOT_SUPPORTED = 0xAE,ERROR_INVALID_SEGMENT_NUMBER = 0xB4,ERROR_INVALID_ORDINAL = 0xB6,ERROR_ALREADY_EXISTS = 0xB7,ERROR_INVALID_FLAG_NUMBER = 0xBA,ERROR_SEM_NOT_FOUND = 0xBB,ERROR_INVALID_STARTING_CODESEG = 0xBC,ERROR_INVALID_STACKSEG = 0xBD,ERROR_INVALID_MODULETYPE = 0xBE,ERROR_INVALID_EXE_SIGNATURE = 0xBF,ERROR_EXE_MARKED_INVALID = 0xC0,ERROR_BAD_EXE_FORMAT = 0xC1,ERROR_ITERATED_DATA_EXCEEDS_64k = 0xC2,ERROR_INVALID_MINALLOCSIZE = 0xC3,ERROR_DYNLINK_FROM_INVALID_RING = 0xC4,ERROR_IOPL_NOT_ENABLED = 0xC5,ERROR_INVALID_SEGDPL = 0xC6,ERROR_AUTODATASEG_EXCEEDS_64k = 0xC7,ERROR_RING2SEG_MUST_BE_MOVABLE = 0xC8,ERROR_RELOC_CHAIN_XEEDS_SEGLIM = 0xC9,ERROR_INFLOOP_IN_RELOC_CHAIN = 0xCA,ERROR_ENVVAR_NOT_FOUND = 0xCB,ERROR_NO_SIGNAL_SENT = 0xCD,ERROR_FILENAME_EXCED_RANGE = 0xCE,ERROR_RING2_STACK_IN_USE = 0xCF,ERROR_META_EXPANSION_TOO_LONG = 0xD0,ERROR_INVALID_SIGNAL_NUMBER = 0xD1,ERROR_THREAD_1_INACTIVE = 0xD2,ERROR_LOCKED = 0xD4,ERROR_TOO_MANY_MODULES = 0xD6,ERROR_NESTING_NOT_ALLOWED = 0xD7,ERROR_EXE_MACHINE_TYPE_MISMATCH = 0xD8,ERROR_BAD_PIPE = 0xE6,ERROR_PIPE_BUSY = 0xE7,ERROR_NO_DATA = 0xE8,ERROR_PIPE_NOT_CONNECTED = 0xE9,ERROR_MORE_DATA = 0xEA,ERROR_VC_DISCONNECTED = 0xF0,ERROR_INVALID_EA_NAME = 0xFE,ERROR_EA_LIST_INCONSISTENT = 0xFF,WAIT_TIMEOUT = 0x102,ERROR_NO_MORE_ITEMS = 0x103,ERROR_CANNOT_COPY = 0x10A,ERROR_DIRECTORY = 0x10B,ERROR_EAS_DIDNT_FIT = 0x113,ERROR_EA_FILE_CORRUPT = 0x114,ERROR_EA_TABLE_FULL = 0x115,ERROR_INVALID_EA_HANDLE = 0x116,ERROR_EAS_NOT_SUPPORTED = 0x11A,ERROR_NOT_OWNER = 0x120,ERROR_TOO_MANY_POSTS = 0x12A,ERROR_PARTIAL_COPY = 0x12B,ERROR_OPLOCK_NOT_GRANTED = 0x12C,ERROR_INVALID_OPLOCK_PROTOCOL = 0x12D,ERROR_MR_MID_NOT_FOUND = 0x13D,ERROR_INVALID_ADDRESS = 0x1E7,ERROR_ARITHMETIC_OVERFLOW = 0x216,ERROR_PIPE_CONNECTED = 0x217,ERROR_PIPE_LISTENING = 0x218,ERROR_EA_ACCESS_DENIED = 0x3E2,ERROR_OPERATION_ABORTED = 0x3E3,ERROR_IO_INCOMPLETE = 0x3E4,ERROR_IO_PENDING = 0x3E5,ERROR_NOACCESS = 0x3E6,ERROR_SWAPERROR = 0x3E7,ERROR_STACK_OVERFLOW = 0x3E9,ERROR_INVALID_MESSAGE = 0x3EA,ERROR_CAN_NOT_COMPLETE = 0x3EB,ERROR_INVALID_FLAGS = 0x3EC,ERROR_UNRECOGNIZED_VOLUME = 0x3ED,ERROR_FILE_INVALID = 0x3EE,ERROR_FULLSCREEN_MODE = 0x3EF,ERROR_NO_TOKEN = 0x3F0,ERROR_BADDB = 0x3F1,ERROR_BADKEY = 0x3F2,ERROR_CANTOPEN = 0x3F3,ERROR_CANTREAD = 0x3F4,ERROR_CANTWRITE = 0x3F5,ERROR_REGISTRY_RECOVERED = 0x3F6,ERROR_REGISTRY_CORRUPT = 0x3F7,ERROR_REGISTRY_IO_FAILED = 0x3F8,ERROR_NOT_REGISTRY_FILE = 0x3F9,ERROR_KEY_DELETED = 0x3FA,ERROR_NO_LOG_SPACE = 0x3FB,ERROR_KEY_HAS_CHILDREN = 0x3FC,ERROR_CHILD_MUST_BE_VOLATILE = 0x3FD,ERROR_NOTIFY_ENUM_DIR = 0x3FE,ERROR_DEPENDENT_SERVICES_RUNNING = 0x41B,ERROR_INVALID_SERVICE_CONTROL = 0x41C,ERROR_SERVICE_REQUEST_TIMEOUT = 0x41D,ERROR_SERVICE_NO_THREAD = 0x41E,ERROR_SERVICE_DATABASE_LOCKED = 0x41F,ERROR_SERVICE_ALREADY_RUNNING = 0x420,ERROR_INVALID_SERVICE_ACCOUNT = 0x421,ERROR_SERVICE_DISABLED = 0x422,ERROR_CIRCULAR_DEPENDENCY = 0x423,ERROR_SERVICE_DOES_NOT_EXIST = 0x424,ERROR_SERVICE_CANNOT_ACCEPT_CTRL = 0x425,ERROR_SERVICE_NOT_ACTIVE = 0x426,ERROR_FAILED_SERVICE_CONTROLLER_CONNECT = 0x427,ERROR_EXCEPTION_IN_SERVICE = 0x428,ERROR_DATABASE_DOES_NOT_EXIST = 0x429,ERROR_SERVICE_SPECIFIC_ERROR = 0x42A,ERROR_PROCESS_ABORTED = 0x42B,ERROR_SERVICE_DEPENDENCY_FAIL = 0x42C,ERROR_SERVICE_LOGON_FAILED = 0x42D,ERROR_SERVICE_START_HANG = 0x42E,ERROR_INVALID_SERVICE_LOCK = 0x42F,ERROR_SERVICE_MARKED_FOR_DELETE = 0x430,ERROR_SERVICE_EXISTS = 0x431,ERROR_ALREADY_RUNNING_LKG = 0x432,ERROR_SERVICE_DEPENDENCY_DELETED = 0x433,ERROR_BOOT_ALREADY_ACCEPTED = 0x434,ERROR_SERVICE_NEVER_STARTED = 0x435,ERROR_DUPLICATE_SERVICE_NAME = 0x436,ERROR_DIFFERENT_SERVICE_ACCOUNT = 0x437,ERROR_CANNOT_DETECT_DRIVER_FAILURE = 0x438,ERROR_CANNOT_DETECT_PROCESS_ABORT = 0x439,ERROR_NO_RECOVERY_PROGRAM = 0x43A,ERROR_SERVICE_NOT_IN_EXE = 0x43B,ERROR_END_OF_MEDIA = 0x44C,ERROR_FILEMARK_DETECTED = 0x44D,ERROR_BEGINNING_OF_MEDIA = 0x44E,ERROR_SETMARK_DETECTED = 0x44F,ERROR_NO_DATA_DETECTED = 0x450,ERROR_PARTITION_FAILURE = 0x451,ERROR_INVALID_BLOCK_LENGTH = 0x452,ERROR_DEVICE_NOT_PARTITIONED = 0x453,ERROR_UNABLE_TO_LOCK_MEDIA = 0x454,ERROR_UNABLE_TO_UNLOAD_MEDIA = 0x455,ERROR_MEDIA_CHANGED = 0x456,ERROR_BUS_RESET = 0x457,ERROR_NO_MEDIA_IN_DRIVE = 0x458,ERROR_NO_UNICODE_TRANSLATION = 0x459,ERROR_DLL_INIT_FAILED = 0x45A,ERROR_SHUTDOWN_IN_PROGRESS = 0x45B,ERROR_NO_SHUTDOWN_IN_PROGRESS = 0x45C,ERROR_IO_DEVICE = 0x45D,ERROR_SERIAL_NO_DEVICE = 0x45E,ERROR_IRQ_BUSY = 0x45F,ERROR_MORE_WRITES = 0x460,ERROR_COUNTER_TIMEOUT = 0x461,ERROR_FLOPPY_ID_MARK_NOT_FOUND = 0x462,ERROR_FLOPPY_WRONG_CYLINDER = 0x463,ERROR_FLOPPY_UNKNOWN_ERROR = 0x464,ERROR_FLOPPY_BAD_REGISTERS = 0x465,ERROR_DISK_RECALIBRATE_FAILED = 0x466,ERROR_DISK_OPERATION_FAILED = 0x467,ERROR_DISK_RESET_FAILED = 0x468,ERROR_EOM_OVERFLOW = 0x469,ERROR_NOT_ENOUGH_SERVER_MEMORY = 0x46A,ERROR_POSSIBLE_DEADLOCK = 0x46B,ERROR_MAPPED_ALIGNMENT = 0x46C,ERROR_SET_POWER_STATE_VETOED = 0x474,ERROR_SET_POWER_STATE_FAILED = 0x475,ERROR_TOO_MANY_LINKS = 0x476,ERROR_OLD_WIN_VERSION = 0x47E,ERROR_APP_WRONG_OS = 0x47F,ERROR_SINGLE_INSTANCE_APP = 0x480,ERROR_RMODE_APP = 0x481,ERROR_INVALID_DLL = 0x482,ERROR_NO_ASSOCIATION = 0x483,ERROR_DDE_FAIL = 0x484,ERROR_DLL_NOT_FOUND = 0x485,ERROR_NO_MORE_USER_HANDLES = 0x486,ERROR_MESSAGE_SYNC_ONLY = 0x487,ERROR_SOURCE_ELEMENT_EMPTY = 0x488,ERROR_DESTINATION_ELEMENT_FULL = 0x489,ERROR_ILLEGAL_ELEMENT_ADDRESS = 0x48A,ERROR_MAGAZINE_NOT_PRESENT = 0x48B,ERROR_DEVICE_REINITIALIZATION_NEEDED = 0x48C,ERROR_DEVICE_REQUIRES_CLEANING = 0x48D,ERROR_DEVICE_DOOR_OPEN = 0x48E,ERROR_DEVICE_NOT_CONNECTED = 0x48F,ERROR_NOT_FOUND = 0x490,ERROR_NO_MATCH = 0x491,ERROR_SET_NOT_FOUND = 0x492,ERROR_POINT_NOT_FOUND = 0x493,ERROR_NO_TRACKING_SERVICE = 0x494,ERROR_NO_VOLUME_ID = 0x495,ERROR_INVALID_VLM_OPERATION = 0x496,ERROR_UNABLE_TO_REMOVE_REPLACED = 0x497,ERROR_UNABLE_TO_MOVE_REPLACEMENT = 0x498,ERROR_UNABLE_TO_MOVE_REPLACEMENT_2 = 0x499,ERROR_JOURNAL_DELETE_IN_PROGRESS = 0x49A,ERROR_JOURNAL_NOT_ACTIVE = 0x49B,ERROR_POTENTIAL_FILE_FOUND = 0x49C,ERROR_JOURNAL_ENTRY_DELETED = 0x49D,ERROR_BAD_DEVICE = 0x4B0,ERROR_CONNECTION_UNAVAIL = 0x4B1,ERROR_DEVICE_ALREADY_REMEMBERED = 0x4B2,ERROR_NO_NET_OR_BAD_PATH = 0x4B3,ERROR_BAD_PROVIDER = 0x4B4,ERROR_CANNOT_OPEN_PROFILE = 0x4B5,ERROR_BAD_PROFILE = 0x4B6,ERROR_NOT_CONTAINER = 0x4B7,ERROR_EXTENDED_ERROR = 0x4B8,ERROR_INVALID_GROUPNAME = 0x4B9,ERROR_INVALID_COMPUTERNAME = 0x4BA,ERROR_INVALID_EVENTNAME = 0x4BB,ERROR_INVALID_DOMAINNAME = 0x4BC,ERROR_INVALID_SERVICENAME = 0x4BD,ERROR_INVALID_NETNAME = 0x4BE,ERROR_INVALID_SHARENAME = 0x4BF,ERROR_INVALID_PASSWORDNAME = 0x4C0,ERROR_INVALID_MESSAGENAME = 0x4C1,ERROR_INVALID_MESSAGEDEST = 0x4C2,ERROR_SESSION_CREDENTIAL_CONFLICT = 0x4C3,ERROR_REMOTE_SESSION_LIMIT_EXCEEDED = 0x4C4,ERROR_DUP_DOMAINNAME = 0x4C5,ERROR_NO_NETWORK = 0x4C6,ERROR_CANCELLED = 0x4C7,ERROR_USER_MAPPED_FILE = 0x4C8,ERROR_CONNECTION_REFUSED = 0x4C9,ERROR_GRACEFUL_DISCONNECT = 0x4CA,ERROR_ADDRESS_ALREADY_ASSOCIATED = 0x4CB,ERROR_ADDRESS_NOT_ASSOCIATED = 0x4CC,ERROR_CONNECTION_INVALID = 0x4CD,ERROR_CONNECTION_ACTIVE = 0x4CE,ERROR_NETWORK_UNREACHABLE = 0x4CF,ERROR_HOST_UNREACHABLE = 0x4D0,ERROR_PROTOCOL_UNREACHABLE = 0x4D1,ERROR_PORT_UNREACHABLE = 0x4D2,ERROR_REQUEST_ABORTED = 0x4D3,ERROR_CONNECTION_ABORTED = 0x4D4,ERROR_RETRY = 0x4D5,ERROR_CONNECTION_COUNT_LIMIT = 0x4D6,ERROR_LOGIN_TIME_RESTRICTION = 0x4D7,ERROR_LOGIN_WKSTA_RESTRICTION = 0x4D8,ERROR_INCORRECT_ADDRESS = 0x4D9,ERROR_ALREADY_REGISTERED = 0x4DA,ERROR_SERVICE_NOT_FOUND = 0x4DB,ERROR_NOT_AUTHENTICATED = 0x4DC,ERROR_NOT_LOGGED_ON = 0x4DD,ERROR_CONTINUE = 0x4DE,ERROR_ALREADY_INITIALIZED = 0x4DF,ERROR_NO_MORE_DEVICES = 0x4E0,ERROR_NO_SUCH_SITE = 0x4E1,ERROR_DOMAIN_CONTROLLER_EXISTS = 0x4E2,ERROR_ONLY_IF_CONNECTED = 0x4E3,ERROR_OVERRIDE_NOCHANGES = 0x4E4,ERROR_BAD_USER_PROFILE = 0x4E5,ERROR_NOT_SUPPORTED_ON_SBS = 0x4E6,ERROR_NOT_ALL_ASSIGNED = 0x514,ERROR_SOME_NOT_MAPPED = 0x515,ERROR_NO_QUOTAS_FOR_ACCOUNT = 0x516,ERROR_LOCAL_USER_SESSION_KEY = 0x517,ERROR_NULL_LM_PASSWORD = 0x518,ERROR_UNKNOWN_REVISION = 0x519,ERROR_REVISION_MISMATCH = 0x51A,ERROR_INVALID_OWNER = 0x51B,ERROR_INVALID_PRIMARY_GROUP = 0x51C,ERROR_NO_IMPERSONATION_TOKEN = 0x51D,ERROR_CANT_DISABLE_MANDATORY = 0x51E,ERROR_NO_LOGON_SERVERS = 0x51F,ERROR_NO_SUCH_LOGON_SESSION = 0x520,ERROR_NO_SUCH_PRIVILEGE = 0x521,ERROR_PRIVILEGE_NOT_HELD = 0x522,ERROR_INVALID_ACCOUNT_NAME = 0x523,ERROR_USER_EXISTS = 0x524,ERROR_NO_SUCH_USER = 0x525,ERROR_GROUP_EXISTS = 0x526,ERROR_NO_SUCH_GROUP = 0x527,ERROR_MEMBER_IN_GROUP = 0x528,ERROR_MEMBER_NOT_IN_GROUP = 0x529,ERROR_LAST_ADMIN = 0x52A,ERROR_WRONG_PASSWORD = 0x52B,ERROR_ILL_FORMED_PASSWORD = 0x52C,ERROR_PASSWORD_RESTRICTION = 0x52D,ERROR_LOGON_FAILURE = 0x52E,ERROR_ACCOUNT_RESTRICTION = 0x52F,ERROR_INVALID_LOGON_HOURS = 0x530,ERROR_INVALID_WORKSTATION = 0x531,ERROR_PASSWORD_EXPIRED = 0x532,ERROR_ACCOUNT_DISABLED = 0x533,ERROR_NONE_MAPPED = 0x534,ERROR_TOO_MANY_LUIDS_REQUESTED = 0x535,ERROR_LUIDS_EXHAUSTED = 0x536,ERROR_INVALID_SUB_AUTHORITY = 0x537,ERROR_INVALID_ACL = 0x538,ERROR_INVALID_SID = 0x539,ERROR_INVALID_SECURITY_DESCR = 0x53A,ERROR_BAD_INHERITANCE_ACL = 0x53C,ERROR_SERVER_DISABLED = 0x53D,ERROR_SERVER_NOT_DISABLED = 0x53E,ERROR_INVALID_ID_AUTHORITY = 0x53F,ERROR_ALLOTTED_SPACE_EXCEEDED = 0x540,ERROR_INVALID_GROUP_ATTRIBUTES = 0x541,ERROR_BAD_IMPERSONATION_LEVEL = 0x542,ERROR_CANT_OPEN_ANONYMOUS = 0x543,ERROR_BAD_VALIDATION_CLASS = 0x544,ERROR_BAD_TOKEN_TYPE = 0x545,ERROR_NO_SECURITY_ON_OBJECT = 0x546,ERROR_CANT_ACCESS_DOMAIN_INFO = 0x547,ERROR_INVALID_SERVER_STATE = 0x548,ERROR_INVALID_DOMAIN_STATE = 0x549,ERROR_INVALID_DOMAIN_ROLE = 0x54A,ERROR_NO_SUCH_DOMAIN = 0x54B,ERROR_DOMAIN_EXISTS = 0x54C,ERROR_DOMAIN_LIMIT_EXCEEDED = 0x54D,ERROR_INTERNAL_DB_CORRUPTION = 0x54E,ERROR_INTERNAL_ERROR = 0x54F,ERROR_GENERIC_NOT_MAPPED = 0x550,ERROR_BAD_DESCRIPTOR_FORMAT = 0x551,ERROR_NOT_LOGON_PROCESS = 0x552,ERROR_LOGON_SESSION_EXISTS = 0x553,ERROR_NO_SUCH_PACKAGE = 0x554,ERROR_BAD_LOGON_SESSION_STATE = 0x555,ERROR_LOGON_SESSION_COLLISION = 0x556,ERROR_INVALID_LOGON_TYPE = 0x557,ERROR_CANNOT_IMPERSONATE = 0x558,ERROR_RXACT_INVALID_STATE = 0x559,ERROR_RXACT_COMMIT_FAILURE = 0x55A,ERROR_SPECIAL_ACCOUNT = 0x55B,ERROR_SPECIAL_GROUP = 0x55C,ERROR_SPECIAL_USER = 0x55D,ERROR_MEMBERS_PRIMARY_GROUP = 0x55E,ERROR_TOKEN_ALREADY_IN_USE = 0x55F,ERROR_NO_SUCH_ALIAS = 0x560,ERROR_MEMBER_NOT_IN_ALIAS = 0x561,ERROR_MEMBER_IN_ALIAS = 0x562,ERROR_ALIAS_EXISTS = 0x563,ERROR_LOGON_NOT_GRANTED = 0x564,ERROR_TOO_MANY_SECRETS = 0x565,ERROR_SECRET_TOO_LONG = 0x566,ERROR_INTERNAL_DB_ERROR = 0x567,ERROR_TOO_MANY_CONTEXT_IDS = 0x568,ERROR_LOGON_TYPE_NOT_GRANTED = 0x569,ERROR_NT_CROSS_ENCRYPTION_REQUIRED = 0x56A,ERROR_NO_SUCH_MEMBER = 0x56B,ERROR_INVALID_MEMBER = 0x56C,ERROR_TOO_MANY_SIDS = 0x56D,ERROR_LM_CROSS_ENCRYPTION_REQUIRED = 0x56E,ERROR_NO_INHERITANCE = 0x56F,ERROR_FILE_CORRUPT = 0x570,ERROR_DISK_CORRUPT = 0x571,ERROR_NO_USER_SESSION_KEY = 0x572,ERROR_LICENSE_QUOTA_EXCEEDED = 0x573,ERROR_WRONG_TARGET_NAME = 0x574,ERROR_MUTUAL_AUTH_FAILED = 0x575,ERROR_TIME_SKEW = 0x576,ERROR_INVALID_WINDOW_HANDLE = 0x578,ERROR_INVALID_MENU_HANDLE = 0x579,ERROR_INVALID_CURSOR_HANDLE = 0x57A,ERROR_INVALID_ACCEL_HANDLE = 0x57B,ERROR_INVALID_HOOK_HANDLE = 0x57C,ERROR_INVALID_DWP_HANDLE = 0x57D,ERROR_TLW_WITH_WSCHILD = 0x57E,ERROR_CANNOT_FIND_WND_CLASS = 0x57F,ERROR_WINDOW_OF_OTHER_THREAD = 0x580,ERROR_HOTKEY_ALREADY_REGISTERED = 0x581,ERROR_CLASS_ALREADY_EXISTS = 0x582,ERROR_CLASS_DOES_NOT_EXIST = 0x583,ERROR_CLASS_HAS_WINDOWS = 0x584,ERROR_INVALID_INDEX = 0x585,ERROR_INVALID_ICON_HANDLE = 0x586,ERROR_PRIVATE_DIALOG_INDEX = 0x587,ERROR_LISTBOX_ID_NOT_FOUND = 0x588,ERROR_NO_WILDCARD_CHARACTERS = 0x589,ERROR_CLIPBOARD_NOT_OPEN = 0x58A,ERROR_HOTKEY_NOT_REGISTERED = 0x58B,ERROR_WINDOW_NOT_DIALOG = 0x58C,ERROR_CONTROL_ID_NOT_FOUND = 0x58D,ERROR_INVALID_COMBOBOX_MESSAGE = 0x58E,ERROR_WINDOW_NOT_COMBOBOX = 0x58F,ERROR_INVALID_EDIT_HEIGHT = 0x590,ERROR_DC_NOT_FOUND = 0x591,ERROR_INVALID_HOOK_FILTER = 0x592,ERROR_INVALID_FILTER_PROC = 0x593,ERROR_HOOK_NEEDS_HMOD = 0x594,ERROR_GLOBAL_ONLY_HOOK = 0x595,ERROR_JOURNAL_HOOK_SET = 0x596,ERROR_HOOK_NOT_INSTALLED = 0x597,ERROR_INVALID_LB_MESSAGE = 0x598,ERROR_SETCOUNT_ON_BAD_LB = 0x599,ERROR_LB_WITHOUT_TABSTOPS = 0x59A,ERROR_DESTROY_OBJECT_OF_OTHER_THREAD = 0x59B,ERROR_CHILD_WINDOW_MENU = 0x59C,ERROR_NO_SYSTEM_MENU = 0x59D,ERROR_INVALID_MSGBOX_STYLE = 0x59E,ERROR_INVALID_SPI_VALUE = 0x59F,ERROR_SCREEN_ALREADY_LOCKED = 0x5A0,ERROR_HWNDS_HAVE_DIFF_PARENT = 0x5A1,ERROR_NOT_CHILD_WINDOW = 0x5A2,ERROR_INVALID_GW_COMMAND = 0x5A3,ERROR_INVALID_THREAD_ID = 0x5A4,ERROR_NON_MDICHILD_WINDOW = 0x5A5,ERROR_POPUP_ALREADY_ACTIVE = 0x5A6,ERROR_NO_SCROLLBARS = 0x5A7,ERROR_INVALID_SCROLLBAR_RANGE = 0x5A8,ERROR_INVALID_SHOWWIN_COMMAND = 0x5A9,ERROR_NO_SYSTEM_RESOURCES = 0x5AA,ERROR_NONPAGED_SYSTEM_RESOURCES = 0x5AB,ERROR_PAGED_SYSTEM_RESOURCES = 0x5AC,ERROR_WORKING_SET_QUOTA = 0x5AD,ERROR_PAGEFILE_QUOTA = 0x5AE,ERROR_COMMITMENT_LIMIT = 0x5AF,ERROR_MENU_ITEM_NOT_FOUND = 0x5B0,ERROR_INVALID_KEYBOARD_HANDLE = 0x5B1,ERROR_HOOK_TYPE_NOT_ALLOWED = 0x5B2,ERROR_REQUIRES_INTERACTIVE_WINDOWSTATION = 0x5B3,ERROR_TIMEOUT = 0x5B4,ERROR_INVALID_MONITOR_HANDLE = 0x5B5,ERROR_EVENTLOG_FILE_CORRUPT = 0x5DC,ERROR_EVENTLOG_CANT_START = 0x5DD,ERROR_LOG_FILE_FULL = 0x5DE,ERROR_EVENTLOG_FILE_CHANGED = 0x5DF,ERROR_INSTALL_SERVICE_FAILURE = 0x641,ERROR_INSTALL_USEREXIT = 0x642,ERROR_INSTALL_FAILURE = 0x643,ERROR_INSTALL_SUSPEND = 0x644,ERROR_UNKNOWN_PRODUCT = 0x645,ERROR_UNKNOWN_FEATURE = 0x646,ERROR_UNKNOWN_COMPONENT = 0x647,ERROR_UNKNOWN_PROPERTY = 0x648,ERROR_INVALID_HANDLE_STATE = 0x649,ERROR_BAD_CONFIGURATION = 0x64A,ERROR_INDEX_ABSENT = 0x64B,ERROR_INSTALL_SOURCE_ABSENT = 0x64C,ERROR_INSTALL_PACKAGE_VERSION = 0x64D,ERROR_PRODUCT_UNINSTALLED = 0x64E,ERROR_BAD_QUERY_SYNTAX = 0x64F,ERROR_INVALID_FIELD = 0x650,ERROR_DEVICE_REMOVED = 0x651,ERROR_INSTALL_ALREADY_RUNNING = 0x652,ERROR_INSTALL_PACKAGE_OPEN_FAILED = 0x653,ERROR_INSTALL_PACKAGE_INVALID = 0x654,ERROR_INSTALL_UI_FAILURE = 0x655,ERROR_INSTALL_LOG_FAILURE = 0x656,ERROR_INSTALL_LANGUAGE_UNSUPPORTED = 0x657,ERROR_INSTALL_TRANSFORM_FAILURE = 0x658,ERROR_INSTALL_PACKAGE_REJECTED = 0x659,ERROR_FUNCTION_NOT_CALLED = 0x65A,ERROR_FUNCTION_FAILED = 0x65B,ERROR_INVALID_TABLE = 0x65C,ERROR_DATATYPE_MISMATCH = 0x65D,ERROR_UNSUPPORTED_TYPE = 0x65E,ERROR_CREATE_FAILED = 0x65F,ERROR_INSTALL_TEMP_UNWRITABLE = 0x660,ERROR_INSTALL_PLATFORM_UNSUPPORTED = 0x661,ERROR_INSTALL_NOTUSED = 0x662,ERROR_PATCH_PACKAGE_OPEN_FAILED = 0x663,ERROR_PATCH_PACKAGE_INVALID = 0x664,ERROR_PATCH_PACKAGE_UNSUPPORTED = 0x665,ERROR_PRODUCT_VERSION = 0x666,ERROR_INVALID_COMMAND_LINE = 0x667,ERROR_INSTALL_REMOTE_DISALLOWED = 0x668,ERROR_SUCCESS_REBOOT_INITIATED = 0x669,ERROR_PATCH_TARGET_NOT_FOUND = 0x66A,RPC_S_INVALID_STRING_BINDING = 0x6A4,RPC_S_WRONG_KIND_OF_BINDING = 0x6A5,RPC_S_INVALID_BINDING = 0x6A6,RPC_S_PROTSEQ_NOT_SUPPORTED = 0x6A7,RPC_S_INVALID_RPC_PROTSEQ = 0x6A8,RPC_S_INVALID_STRING_UUID = 0x6A9,RPC_S_INVALID_ENDPOINT_FORMAT = 0x6AA,RPC_S_INVALID_NET_ADDR = 0x6AB,RPC_S_NO_ENDPOINT_FOUND = 0x6AC,RPC_S_INVALID_TIMEOUT = 0x6AD,RPC_S_OBJECT_NOT_FOUND = 0x6AE,RPC_S_ALREADY_REGISTERED = 0x6AF,RPC_S_TYPE_ALREADY_REGISTERED = 0x6B0,RPC_S_ALREADY_LISTENING = 0x6B1,RPC_S_NO_PROTSEQS_REGISTERED = 0x6B2,RPC_S_NOT_LISTENING = 0x6B3,RPC_S_UNKNOWN_MGR_TYPE = 0x6B4,RPC_S_UNKNOWN_IF = 0x6B5,RPC_S_NO_BINDINGS = 0x6B6,RPC_S_NO_PROTSEQS = 0x6B7,RPC_S_CANT_CREATE_ENDPOINT = 0x6B8,RPC_S_OUT_OF_RESOURCES = 0x6B9,RPC_S_SERVER_UNAVAILABLE = 0x6BA,RPC_S_SERVER_TOO_BUSY = 0x6BB,RPC_S_INVALID_NETWORK_OPTIONS = 0x6BC,RPC_S_NO_CALL_ACTIVE = 0x6BD,RPC_S_CALL_FAILED = 0x6BE,RPC_S_CALL_FAILED_DNE = 0x6BF,RPC_S_PROTOCOL_ERROR = 0x6C0,RPC_S_UNSUPPORTED_TRANS_SYN = 0x6C2,RPC_S_UNSUPPORTED_TYPE = 0x6C4,RPC_S_INVALID_TAG = 0x6C5,RPC_S_INVALID_BOUND = 0x6C6,RPC_S_NO_ENTRY_NAME = 0x6C7,RPC_S_INVALID_NAME_SYNTAX = 0x6C8,RPC_S_UNSUPPORTED_NAME_SYNTAX = 0x6C9,RPC_S_UUID_NO_ADDRESS = 0x6CB,RPC_S_DUPLICATE_ENDPOINT = 0x6CC,RPC_S_UNKNOWN_AUTHN_TYPE = 0x6CD,RPC_S_MAX_CALLS_TOO_SMALL = 0x6CE,RPC_S_STRING_TOO_LONG = 0x6CF,RPC_S_PROTSEQ_NOT_FOUND = 0x6D0,RPC_S_PROCNUM_OUT_OF_RANGE = 0x6D1,RPC_S_BINDING_HAS_NO_AUTH = 0x6D2,RPC_S_UNKNOWN_AUTHN_SERVICE = 0x6D3,RPC_S_UNKNOWN_AUTHN_LEVEL = 0x6D4,RPC_S_INVALID_AUTH_IDENTITY = 0x6D5,RPC_S_UNKNOWN_AUTHZ_SERVICE = 0x6D6,EPT_S_INVALID_ENTRY = 0x6D7,EPT_S_CANT_PERFORM_OP = 0x6D8,EPT_S_NOT_REGISTERED = 0x6D9,RPC_S_NOTHING_TO_EXPORT = 0x6DA,RPC_S_INCOMPLETE_NAME = 0x6DB,RPC_S_INVALID_VERS_OPTION = 0x6DC,RPC_S_NO_MORE_MEMBERS = 0x6DD,RPC_S_NOT_ALL_OBJS_UNEXPORTED = 0x6DE,RPC_S_INTERFACE_NOT_FOUND = 0x6DF,RPC_S_ENTRY_ALREADY_EXISTS = 0x6E0,RPC_S_ENTRY_NOT_FOUND = 0x6E1,RPC_S_NAME_SERVICE_UNAVAILABLE = 0x6E2,RPC_S_INVALID_NAF_ID = 0x6E3,RPC_S_CANNOT_SUPPORT = 0x6E4,RPC_S_NO_CONTEXT_AVAILABLE = 0x6E5,RPC_S_INTERNAL_ERROR = 0x6E6,RPC_S_ZERO_DIVIDE = 0x6E7,RPC_S_ADDRESS_ERROR = 0x6E8,RPC_S_FP_DIV_ZERO = 0x6E9,RPC_S_FP_UNDERFLOW = 0x6EA,RPC_S_FP_OVERFLOW = 0x6EB,RPC_X_NO_MORE_ENTRIES = 0x6EC,RPC_X_SS_CHAR_TRANS_OPEN_FAIL = 0x6ED,RPC_X_SS_CHAR_TRANS_SHORT_FILE = 0x6EE,RPC_X_SS_IN_NULL_CONTEXT = 0x6EF,RPC_X_SS_CONTEXT_DAMAGED = 0x6F1,RPC_X_SS_HANDLES_MISMATCH = 0x6F2,RPC_X_SS_CANNOT_GET_CALL_HANDLE = 0x6F3,RPC_X_NULL_REF_POINTER = 0x6F4,RPC_X_ENUM_VALUE_OUT_OF_RANGE = 0x6F5,RPC_X_BYTE_COUNT_TOO_SMALL = 0x6F6,RPC_X_BAD_STUB_DATA = 0x6F7,ERROR_INVALID_USER_BUFFER = 0x6F8,ERROR_UNRECOGNIZED_MEDIA = 0x6F9,ERROR_NO_TRUST_LSA_SECRET = 0x6FA,ERROR_NO_TRUST_SAM_ACCOUNT = 0x6FB,ERROR_TRUSTED_DOMAIN_FAILURE = 0x6FC,ERROR_TRUSTED_RELATIONSHIP_FAILURE = 0x6FD,ERROR_TRUST_FAILURE = 0x6FE,RPC_S_CALL_IN_PROGRESS = 0x6FF,ERROR_NETLOGON_NOT_STARTED = 0x700,ERROR_ACCOUNT_EXPIRED = 0x701,ERROR_REDIRECTOR_HAS_OPEN_HANDLES = 0x702,ERROR_PRINTER_DRIVER_ALREADY_INSTALLED = 0x703,ERROR_UNKNOWN_PORT = 0x704,ERROR_UNKNOWN_PRINTER_DRIVER = 0x705,ERROR_UNKNOWN_PRINTPROCESSOR = 0x706,ERROR_INVALID_SEPARATOR_FILE = 0x707,ERROR_INVALID_PRIORITY = 0x708,ERROR_INVALID_PRINTER_NAME = 0x709,ERROR_PRINTER_ALREADY_EXISTS = 0x70A,ERROR_INVALID_PRINTER_COMMAND = 0x70B,ERROR_INVALID_DATATYPE = 0x70C,ERROR_INVALID_ENVIRONMENT = 0x70D,RPC_S_NO_MORE_BINDINGS = 0x70E,ERROR_NOLOGON_INTERDOMAIN_TRUST_ACCOUNT = 0x70F,ERROR_NOLOGON_WORKSTATION_TRUST_ACCOUNT = 0x710,ERROR_NOLOGON_SERVER_TRUST_ACCOUNT = 0x711,ERROR_DOMAIN_TRUST_INCONSISTENT = 0x712,ERROR_SERVER_HAS_OPEN_HANDLES = 0x713,ERROR_RESOURCE_DATA_NOT_FOUND = 0x714,ERROR_RESOURCE_TYPE_NOT_FOUND = 0x715,ERROR_RESOURCE_NAME_NOT_FOUND = 0x716,ERROR_RESOURCE_LANG_NOT_FOUND = 0x717,ERROR_NOT_ENOUGH_QUOTA = 0x718,RPC_S_NO_INTERFACES = 0x719,RPC_S_CALL_CANCELLED = 0x71A,RPC_S_BINDING_INCOMPLETE = 0x71B,RPC_S_COMM_FAILURE = 0x71C,RPC_S_UNSUPPORTED_AUTHN_LEVEL = 0x71D,RPC_S_NO_PRINC_NAME = 0x71E,RPC_S_NOT_RPC_ERROR = 0x71F,RPC_S_UUID_LOCAL_ONLY = 0x720,RPC_S_SEC_PKG_ERROR = 0x721,RPC_S_NOT_CANCELLED = 0x722,RPC_X_INVALID_ES_ACTION = 0x723,RPC_X_WRONG_ES_VERSION = 0x724,RPC_X_WRONG_STUB_VERSION = 0x725,RPC_X_INVALID_PIPE_OBJECT = 0x726,RPC_X_WRONG_PIPE_ORDER = 0x727,RPC_X_WRONG_PIPE_VERSION = 0x728,RPC_S_GROUP_MEMBER_NOT_FOUND = 0x76A,EPT_S_CANT_CREATE = 0x76B,RPC_S_INVALID_OBJECT = 0x76C,ERROR_INVALID_TIME = 0x76D,ERROR_INVALID_FORM_NAME = 0x76E,ERROR_INVALID_FORM_SIZE = 0x76F,ERROR_ALREADY_WAITING = 0x770,ERROR_PRINTER_DELETED = 0x771,ERROR_INVALID_PRINTER_STATE = 0x772,ERROR_PASSWORD_MUST_CHANGE = 0x773,ERROR_DOMAIN_CONTROLLER_NOT_FOUND = 0x774,ERROR_ACCOUNT_LOCKED_OUT = 0x775,OR_INVALID_OXID = 0x776,OR_INVALID_OID = 0x777,OR_INVALID_SET = 0x778,RPC_S_SEND_INCOMPLETE = 0x779,RPC_S_INVALID_ASYNC_HANDLE = 0x77A,RPC_S_INVALID_ASYNC_CALL = 0x77B,RPC_X_PIPE_CLOSED = 0x77C,RPC_X_PIPE_DISCIPLINE_ERROR = 0x77D,RPC_X_PIPE_EMPTY = 0x77E,ERROR_NO_SITENAME = 0x77F,ERROR_CANT_ACCESS_FILE = 0x780,ERROR_CANT_RESOLVE_FILENAME = 0x781,RPC_S_ENTRY_TYPE_MISMATCH = 0x782,RPC_S_NOT_ALL_OBJS_EXPORTED = 0x783,RPC_S_INTERFACE_NOT_EXPORTED = 0x784,RPC_S_PROFILE_NOT_ADDED = 0x785,RPC_S_PRF_ELT_NOT_ADDED = 0x786,RPC_S_PRF_ELT_NOT_REMOVED = 0x787,RPC_S_GRP_ELT_NOT_ADDED = 0x788,RPC_S_GRP_ELT_NOT_REMOVED = 0x789,ERROR_NO_BROWSER_SERVERS_FOUND = 0x17E6,ERROR_INVALID_PIXEL_FORMAT = 0x7D0,ERROR_BAD_DRIVER = 0x7D1,ERROR_INVALID_WINDOW_STYLE = 0x7D2,ERROR_METAFILE_NOT_SUPPORTED = 0x7D3,ERROR_TRANSFORM_NOT_SUPPORTED = 0x7D4,ERROR_CLIPPING_NOT_SUPPORTED = 0x7D5,ERROR_INVALID_CMM = 0x7DA,ERROR_INVALID_PROFILE = 0x7DB,ERROR_TAG_NOT_FOUND = 0x7DC,ERROR_TAG_NOT_PRESENT = 0x7DD,ERROR_DUPLICATE_TAG = 0x7DE,ERROR_PROFILE_NOT_ASSOCIATED_WITH_DEVICE = 0x7DF,ERROR_PROFILE_NOT_FOUND = 0x7E0,ERROR_INVALID_COLORSPACE = 0x7E1,ERROR_ICM_NOT_ENABLED = 0x7E2,ERROR_DELETING_ICM_XFORM = 0x7E3,ERROR_INVALID_TRANSFORM = 0x7E4,ERROR_COLORSPACE_MISMATCH = 0x7E5,ERROR_INVALID_COLORINDEX = 0x7E6,ERROR_CONNECTED_OTHER_PASSWORD = 0x83C,ERROR_BAD_USERNAME = 0x89A,ERROR_NOT_CONNECTED = 0x8CA,ERROR_OPEN_FILES = 0x961,ERROR_ACTIVE_CONNECTIONS = 0x962,ERROR_DEVICE_IN_USE = 0x964,ERROR_UNKNOWN_PRINT_MONITOR = 0xBB8,ERROR_PRINTER_DRIVER_IN_USE = 0xBB9,ERROR_SPOOL_FILE_NOT_FOUND = 0xBBA,ERROR_SPL_NO_STARTDOC = 0xBBB,ERROR_SPL_NO_ADDJOB = 0xBBC,ERROR_PRINT_PROCESSOR_ALREADY_INSTALLED = 0xBBD,ERROR_PRINT_MONITOR_ALREADY_INSTALLED = 0xBBE,ERROR_INVALID_PRINT_MONITOR = 0xBBF,ERROR_PRINT_MONITOR_IN_USE = 0xBC0,ERROR_PRINTER_HAS_JOBS_QUEUED = 0xBC1,ERROR_SUCCESS_REBOOT_REQUIRED = 0xBC2,ERROR_SUCCESS_RESTART_REQUIRED = 0xBC3,ERROR_PRINTER_NOT_FOUND = 0xBC4,ERROR_WINS_INTERNAL = 0xFA0,ERROR_CAN_NOT_DEL_LOCAL_WINS = 0xFA1,ERROR_STATIC_INIT = 0xFA2,ERROR_INC_BACKUP = 0xFA3,ERROR_FULL_BACKUP = 0xFA4,ERROR_REC_NON_EXISTENT = 0xFA5,ERROR_RPL_NOT_ALLOWED = 0xFA6,ERROR_DHCP_ADDRESS_CONFLICT = 0x1004,ERROR_WMI_GUID_NOT_FOUND = 0x1068,ERROR_WMI_INSTANCE_NOT_FOUND = 0x1069,ERROR_WMI_ITEMID_NOT_FOUND = 0x106A,ERROR_WMI_TRY_AGAIN = 0x106B,ERROR_WMI_DP_NOT_FOUND = 0x106C,ERROR_WMI_UNRESOLVED_INSTANCE_REF = 0x106D,ERROR_WMI_ALREADY_ENABLED = 0x106E,ERROR_WMI_GUID_DISCONNECTED = 0x106F,ERROR_WMI_SERVER_UNAVAILABLE = 0x1070,ERROR_WMI_DP_FAILED = 0x1071,ERROR_WMI_INVALID_MOF = 0x1072,ERROR_WMI_INVALID_REGINFO = 0x1073,ERROR_WMI_ALREADY_DISABLED = 0x1074,ERROR_WMI_READ_ONLY = 0x1075,ERROR_WMI_SET_FAILURE = 0x1076,ERROR_INVALID_MEDIA = 0x10CC,ERROR_INVALID_LIBRARY = 0x10CD,ERROR_INVALID_MEDIA_POOL = 0x10CE,ERROR_DRIVE_MEDIA_MISMATCH = 0x10CF,ERROR_MEDIA_OFFLINE = 0x10D0,ERROR_LIBRARY_OFFLINE = 0x10D1,ERROR_EMPTY = 0x10D2,ERROR_NOT_EMPTY = 0x10D3,ERROR_MEDIA_UNAVAILABLE = 0x10D4,ERROR_RESOURCE_DISABLED = 0x10D5,ERROR_INVALID_CLEANER = 0x10D6,ERROR_UNABLE_TO_CLEAN = 0x10D7,ERROR_OBJECT_NOT_FOUND = 0x10D8,ERROR_DATABASE_FAILURE = 0x10D9,ERROR_DATABASE_FULL = 0x10DA,ERROR_MEDIA_INCOMPATIBLE = 0x10DB,ERROR_RESOURCE_NOT_PRESENT = 0x10DC,ERROR_INVALID_OPERATION = 0x10DD,ERROR_MEDIA_NOT_AVAILABLE = 0x10DE,ERROR_DEVICE_NOT_AVAILABLE = 0x10DF,ERROR_REQUEST_REFUSED = 0x10E0,ERROR_INVALID_DRIVE_OBJECT = 0x10E1,ERROR_LIBRARY_FULL = 0x10E2,ERROR_MEDIUM_NOT_ACCESSIBLE = 0x10E3,ERROR_UNABLE_TO_LOAD_MEDIUM = 0x10E4,ERROR_UNABLE_TO_INVENTORY_DRIVE = 0x10E5,ERROR_UNABLE_TO_INVENTORY_SLOT = 0x10E6,ERROR_UNABLE_TO_INVENTORY_TRANSPORT = 0x10E7,ERROR_TRANSPORT_FULL = 0x10E8,ERROR_CONTROLLING_IEPORT = 0x10E9,ERROR_UNABLE_TO_EJECT_MOUNTED_MEDIA = 0x10EA,ERROR_CLEANER_SLOT_SET = 0x10EB,ERROR_CLEANER_SLOT_NOT_SET = 0x10EC,ERROR_CLEANER_CARTRIDGE_SPENT = 0x10ED,ERROR_UNEXPECTED_OMID = 0x10EE,ERROR_CANT_DELETE_LAST_ITEM = 0x10EF,ERROR_MESSAGE_EXCEEDS_MAX_SIZE = 0x10F0,ERROR_VOLUME_CONTAINS_SYS_FILES = 0x10F1,ERROR_INDIGENOUS_TYPE = 0x10F2,ERROR_NO_SUPPORTING_DRIVES = 0x10F3,ERROR_FILE_OFFLINE = 0x10FE,ERROR_REMOTE_STORAGE_NOT_ACTIVE = 0x10FF,ERROR_REMOTE_STORAGE_MEDIA_ERROR = 0x1100,ERROR_NOT_A_REPARSE_POINT = 0x1126,ERROR_REPARSE_ATTRIBUTE_CONFLICT = 0x1127,ERROR_INVALID_REPARSE_DATA = 0x1128,ERROR_REPARSE_TAG_INVALID = 0x1129,ERROR_REPARSE_TAG_MISMATCH = 0x112A,ERROR_VOLUME_NOT_SIS_ENABLED = 0x1194,ERROR_DEPENDENT_RESOURCE_EXISTS = 0x1389,ERROR_DEPENDENCY_NOT_FOUND = 0x138A,ERROR_DEPENDENCY_ALREADY_EXISTS = 0x138B,ERROR_RESOURCE_NOT_ONLINE = 0x138C,ERROR_HOST_NODE_NOT_AVAILABLE = 0x138D,ERROR_RESOURCE_NOT_AVAILABLE = 0x138E,ERROR_RESOURCE_NOT_FOUND = 0x138F,ERROR_SHUTDOWN_CLUSTER = 0x1390,ERROR_CANT_EVICT_ACTIVE_NODE = 0x1391,ERROR_OBJECT_ALREADY_EXISTS = 0x1392,ERROR_OBJECT_IN_LIST = 0x1393,ERROR_GROUP_NOT_AVAILABLE = 0x1394,ERROR_GROUP_NOT_FOUND = 0x1395,ERROR_GROUP_NOT_ONLINE = 0x1396,ERROR_HOST_NODE_NOT_RESOURCE_OWNER = 0x1397,ERROR_HOST_NODE_NOT_GROUP_OWNER = 0x1398,ERROR_RESMON_CREATE_FAILED = 0x1399,ERROR_RESMON_ONLINE_FAILED = 0x139A,ERROR_RESOURCE_ONLINE = 0x139B,ERROR_QUORUM_RESOURCE = 0x139C,ERROR_NOT_QUORUM_CAPABLE = 0x139D,ERROR_CLUSTER_SHUTTING_DOWN = 0x139E,ERROR_INVALID_STATE = 0x139F,ERROR_RESOURCE_PROPERTIES_STORED = 0x13A0,ERROR_NOT_QUORUM_CLASS = 0x13A1,ERROR_CORE_RESOURCE = 0x13A2,ERROR_QUORUM_RESOURCE_ONLINE_FAILED = 0x13A3,ERROR_QUORUMLOG_OPEN_FAILED = 0x13A4,ERROR_CLUSTERLOG_CORRUPT = 0x13A5,ERROR_CLUSTERLOG_RECORD_EXCEEDS_MAXSIZE = 0x13A6,ERROR_CLUSTERLOG_EXCEEDS_MAXSIZE = 0x13A7,ERROR_CLUSTERLOG_CHKPOINT_NOT_FOUND = 0x13A8,ERROR_CLUSTERLOG_NOT_ENOUGH_SPACE = 0x13A9,ERROR_QUORUM_OWNER_ALIVE = 0x13AA,ERROR_NETWORK_NOT_AVAILABLE = 0x13AB,ERROR_NODE_NOT_AVAILABLE = 0x13AC,ERROR_ALL_NODES_NOT_AVAILABLE = 0x13AD,ERROR_RESOURCE_FAILED = 0x13AE,ERROR_CLUSTER_INVALID_NODE = 0x13AF,ERROR_CLUSTER_NODE_EXISTS = 0x13B0,ERROR_CLUSTER_JOIN_IN_PROGRESS = 0x13B1,ERROR_CLUSTER_NODE_NOT_FOUND = 0x13B2,ERROR_CLUSTER_LOCAL_NODE_NOT_FOUND = 0x13B3,ERROR_CLUSTER_NETWORK_EXISTS = 0x13B4,ERROR_CLUSTER_NETWORK_NOT_FOUND = 0x13B5,ERROR_CLUSTER_NETINTERFACE_EXISTS = 0x13B6,ERROR_CLUSTER_NETINTERFACE_NOT_FOUND = 0x13B7,ERROR_CLUSTER_INVALID_REQUEST = 0x13B8,ERROR_CLUSTER_INVALID_NETWORK_PROVIDER = 0x13B9,ERROR_CLUSTER_NODE_DOWN = 0x13BA,ERROR_CLUSTER_NODE_UNREACHABLE = 0x13BB,ERROR_CLUSTER_NODE_NOT_MEMBER = 0x13BC,ERROR_CLUSTER_JOIN_NOT_IN_PROGRESS = 0x13BD,ERROR_CLUSTER_INVALID_NETWORK = 0x13BE,ERROR_CLUSTER_NODE_UP = 0x13C0,ERROR_CLUSTER_IPADDR_IN_USE = 0x13C1,ERROR_CLUSTER_NODE_NOT_PAUSED = 0x13C2,ERROR_CLUSTER_NO_SECURITY_CONTEXT = 0x13C3,ERROR_CLUSTER_NETWORK_NOT_INTERNAL = 0x13C4,ERROR_CLUSTER_NODE_ALREADY_UP = 0x13C5,ERROR_CLUSTER_NODE_ALREADY_DOWN = 0x13C6,ERROR_CLUSTER_NETWORK_ALREADY_ONLINE = 0x13C7,ERROR_CLUSTER_NETWORK_ALREADY_OFFLINE = 0x13C8,ERROR_CLUSTER_NODE_ALREADY_MEMBER = 0x13C9,ERROR_CLUSTER_LAST_INTERNAL_NETWORK = 0x13CA,ERROR_CLUSTER_NETWORK_HAS_DEPENDENTS = 0x13CB,ERROR_INVALID_OPERATION_ON_QUORUM = 0x13CC,ERROR_DEPENDENCY_NOT_ALLOWED = 0x13CD,ERROR_CLUSTER_NODE_PAUSED = 0x13CE,ERROR_NODE_CANT_HOST_RESOURCE = 0x13CF,ERROR_CLUSTER_NODE_NOT_READY = 0x13D0,ERROR_CLUSTER_NODE_SHUTTING_DOWN = 0x13D1,ERROR_CLUSTER_JOIN_ABORTED = 0x13D2,ERROR_CLUSTER_INCOMPATIBLE_VERSIONS = 0x13D3,ERROR_CLUSTER_MAXNUM_OF_RESOURCES_EXCEEDED = 0x13D4,ERROR_CLUSTER_SYSTEM_CONFIG_CHANGED = 0x13D5,ERROR_CLUSTER_RESOURCE_TYPE_NOT_FOUND = 0x13D6,ERROR_CLUSTER_RESTYPE_NOT_SUPPORTED = 0x13D7,ERROR_CLUSTER_RESNAME_NOT_FOUND = 0x13D8,ERROR_CLUSTER_NO_RPC_PACKAGES_REGISTERED = 0x13D9,ERROR_CLUSTER_OWNER_NOT_IN_PREFLIST = 0x13DA,ERROR_CLUSTER_DATABASE_SEQMISMATCH = 0x13DB,ERROR_RESMON_INVALID_STATE = 0x13DC,ERROR_CLUSTER_GUM_NOT_LOCKER = 0x13DD,ERROR_QUORUM_DISK_NOT_FOUND = 0x13DE,ERROR_DATABASE_BACKUP_CORRUPT = 0x13DF,ERROR_CLUSTER_NODE_ALREADY_HAS_DFS_ROOT = 0x13E0,ERROR_RESOURCE_PROPERTY_UNCHANGEABLE = 0x13E1,ERROR_ENCRYPTION_FAILED = 0x1770,ERROR_DECRYPTION_FAILED = 0x1771,ERROR_FILE_ENCRYPTED = 0x1772,ERROR_NO_RECOVERY_POLICY = 0x1773,ERROR_NO_EFS = 0x1774,ERROR_WRONG_EFS = 0x1775,ERROR_NO_USER_KEYS = 0x1776,ERROR_FILE_NOT_ENCRYPTED = 0x1777,ERROR_NOT_EXPORT_FORMAT = 0x1778,ERROR_FILE_READ_ONLY = 0x1779,ERROR_DIR_EFS_DISALLOWED = 0x177A,ERROR_EFS_SERVER_NOT_TRUSTED = 0x177B,SCHED_E_SERVICE_NOT_LOCALSYSTEM = 0x1838,ERROR_CTX_WINSTATION_NAME_INVALID = 0x1B59,ERROR_CTX_INVALID_PD = 0x1B5A,ERROR_CTX_PD_NOT_FOUND = 0x1B5B,ERROR_CTX_WD_NOT_FOUND = 0x1B5C,ERROR_CTX_CANNOT_MAKE_EVENTLOG_ENTRY = 0x1B5D,ERROR_CTX_SERVICE_NAME_COLLISION = 0x1B5E,ERROR_CTX_CLOSE_PENDING = 0x1B5F,ERROR_CTX_NO_OUTBUF = 0x1B60,ERROR_CTX_MODEM_INF_NOT_FOUND = 0x1B61,ERROR_CTX_INVALID_MODEMNAME = 0x1B62,ERROR_CTX_MODEM_RESPONSE_ERROR = 0x1B63,ERROR_CTX_MODEM_RESPONSE_TIMEOUT = 0x1B64,ERROR_CTX_MODEM_RESPONSE_NO_CARRIER = 0x1B65,ERROR_CTX_MODEM_RESPONSE_NO_DIALTONE = 0x1B66,ERROR_CTX_MODEM_RESPONSE_BUSY = 0x1B67,ERROR_CTX_MODEM_RESPONSE_VOICE = 0x1B68,ERROR_CTX_TD_ERROR = 0x1B69,ERROR_CTX_WINSTATION_NOT_FOUND = 0x1B6E,ERROR_CTX_WINSTATION_ALREADY_EXISTS = 0x1B6F,ERROR_CTX_WINSTATION_BUSY = 0x1B70,ERROR_CTX_BAD_VIDEO_MODE = 0x1B71,ERROR_CTX_GRAPHICS_INVALID = 0x1B7B,ERROR_CTX_LOGON_DISABLED = 0x1B7D,ERROR_CTX_NOT_CONSOLE = 0x1B7E,ERROR_CTX_CLIENT_QUERY_TIMEOUT = 0x1B80,ERROR_CTX_CONSOLE_DISCONNECT = 0x1B81,ERROR_CTX_CONSOLE_CONNECT = 0x1B82,ERROR_CTX_SHADOW_DENIED = 0x1B84,ERROR_CTX_WINSTATION_ACCESS_DENIED = 0x1B85,ERROR_CTX_INVALID_WD = 0x1B89,ERROR_CTX_SHADOW_INVALID = 0x1B8A,ERROR_CTX_SHADOW_DISABLED = 0x1B8B,ERROR_CTX_CLIENT_LICENSE_IN_USE = 0x1B8C,ERROR_CTX_CLIENT_LICENSE_NOT_SET = 0x1B8D,ERROR_CTX_LICENSE_NOT_AVAILABLE = 0x1B8E,ERROR_CTX_LICENSE_CLIENT_INVALID = 0x1B8F,ERROR_CTX_LICENSE_EXPIRED = 0x1B90,FRS_ERR_INVALID_API_SEQUENCE = 0x1F41,FRS_ERR_STARTING_SERVICE = 0x1F42,FRS_ERR_STOPPING_SERVICE = 0x1F43,FRS_ERR_INTERNAL_API = 0x1F44,FRS_ERR_INTERNAL = 0x1F45,FRS_ERR_SERVICE_COMM = 0x1F46,FRS_ERR_INSUFFICIENT_PRIV = 0x1F47,FRS_ERR_AUTHENTICATION = 0x1F48,FRS_ERR_PARENT_INSUFFICIENT_PRIV = 0x1F49,FRS_ERR_PARENT_AUTHENTICATION = 0x1F4A,FRS_ERR_CHILD_TO_PARENT_COMM = 0x1F4B,FRS_ERR_PARENT_TO_CHILD_COMM = 0x1F4C,FRS_ERR_SYSVOL_POPULATE = 0x1F4D,FRS_ERR_SYSVOL_POPULATE_TIMEOUT = 0x1F4E,FRS_ERR_SYSVOL_IS_BUSY = 0x1F4F,FRS_ERR_SYSVOL_DEMOTE = 0x1F50,FRS_ERR_INVALID_SERVICE_PARAMETER = 0x1F51,DS_S_SUCCESS = 0x0,ERROR_DS_NOT_INSTALLED = 0x2008,ERROR_DS_MEMBERSHIP_EVALUATED_LOCALLY = 0x2009,ERROR_DS_NO_ATTRIBUTE_OR_VALUE = 0x200A,ERROR_DS_INVALID_ATTRIBUTE_SYNTAX = 0x200B,ERROR_DS_ATTRIBUTE_TYPE_UNDEFINED = 0x200C,ERROR_DS_ATTRIBUTE_OR_VALUE_EXISTS = 0x200D,ERROR_DS_BUSY = 0x200E,ERROR_DS_UNAVAILABLE = 0x200F,ERROR_DS_NO_RIDS_ALLOCATED = 0x2010,ERROR_DS_NO_MORE_RIDS = 0x2011,ERROR_DS_INCORRECT_ROLE_OWNER = 0x2012,ERROR_DS_RIDMGR_INIT_ERROR = 0x2013,ERROR_DS_OBJ_CLASS_VIOLATION = 0x2014,ERROR_DS_CANT_ON_NON_LEAF = 0x2015,ERROR_DS_CANT_ON_RDN = 0x2016,ERROR_DS_CANT_MOD_OBJ_CLASS = 0x2017,ERROR_DS_CROSS_DOM_MOVE_ERROR = 0x2018,ERROR_DS_GC_NOT_AVAILABLE = 0x2019,ERROR_SHARED_POLICY = 0x201A,ERROR_POLICY_OBJECT_NOT_FOUND = 0x201B,ERROR_POLICY_ONLY_IN_DS = 0x201C,ERROR_PROMOTION_ACTIVE = 0x201D,ERROR_NO_PROMOTION_ACTIVE = 0x201E,ERROR_DS_OPERATIONS_ERROR = 0x2020,ERROR_DS_PROTOCOL_ERROR = 0x2021,ERROR_DS_TIMELIMIT_EXCEEDED = 0x2022,ERROR_DS_SIZELIMIT_EXCEEDED = 0x2023,ERROR_DS_ADMIN_LIMIT_EXCEEDED = 0x2024,ERROR_DS_COMPARE_FALSE = 0x2025,ERROR_DS_COMPARE_TRUE = 0x2026,ERROR_DS_AUTH_METHOD_NOT_SUPPORTED = 0x2027,ERROR_DS_STRONG_AUTH_REQUIRED = 0x2028,ERROR_DS_INAPPROPRIATE_AUTH = 0x2029,ERROR_DS_AUTH_UNKNOWN = 0x202A,ERROR_DS_REFERRAL = 0x202B,ERROR_DS_UNAVAILABLE_CRIT_EXTENSION = 0x202C,ERROR_DS_CONFIDENTIALITY_REQUIRED = 0x202D,ERROR_DS_INAPPROPRIATE_MATCHING = 0x202E,ERROR_DS_CONSTRAINT_VIOLATION = 0x202F,ERROR_DS_NO_SUCH_OBJECT = 0x2030,ERROR_DS_ALIAS_PROBLEM = 0x2031,ERROR_DS_INVALID_DN_SYNTAX = 0x2032,ERROR_DS_IS_LEAF = 0x2033,ERROR_DS_ALIAS_DEREF_PROBLEM = 0x2034,ERROR_DS_UNWILLING_TO_PERFORM = 0x2035,ERROR_DS_LOOP_DETECT = 0x2036,ERROR_DS_NAMING_VIOLATION = 0x2037,ERROR_DS_OBJECT_RESULTS_TOO_LARGE = 0x2038,ERROR_DS_AFFECTS_MULTIPLE_DSAS = 0x2039,ERROR_DS_SERVER_DOWN = 0x203A,ERROR_DS_LOCAL_ERROR = 0x203B,ERROR_DS_ENCODING_ERROR = 0x203C,ERROR_DS_DECODING_ERROR = 0x203D,ERROR_DS_FILTER_UNKNOWN = 0x203E,ERROR_DS_PARAM_ERROR = 0x203F,ERROR_DS_NOT_SUPPORTED = 0x2040,ERROR_DS_NO_RESULTS_RETURNED = 0x2041,ERROR_DS_CONTROL_NOT_FOUND = 0x2042,ERROR_DS_CLIENT_LOOP = 0x2043,ERROR_DS_REFERRAL_LIMIT_EXCEEDED = 0x2044,ERROR_DS_ROOT_MUST_BE_NC = 0x206D,ERROR_DS_ADD_REPLICA_INHIBITED = 0x206E,ERROR_DS_ATT_NOT_DEF_IN_SCHEMA = 0x206F,ERROR_DS_MAX_OBJ_SIZE_EXCEEDED = 0x2070,ERROR_DS_OBJ_STRING_NAME_EXISTS = 0x2071,ERROR_DS_NO_RDN_DEFINED_IN_SCHEMA = 0x2072,ERROR_DS_RDN_DOESNT_MATCH_SCHEMA = 0x2073,ERROR_DS_NO_REQUESTED_ATTS_FOUND = 0x2074,ERROR_DS_USER_BUFFER_TO_SMALL = 0x2075,ERROR_DS_ATT_IS_NOT_ON_OBJ = 0x2076,ERROR_DS_ILLEGAL_MOD_OPERATION = 0x2077,ERROR_DS_OBJ_TOO_LARGE = 0x2078,ERROR_DS_BAD_INSTANCE_TYPE = 0x2079,ERROR_DS_MASTERDSA_REQUIRED = 0x207A,ERROR_DS_OBJECT_CLASS_REQUIRED = 0x207B,ERROR_DS_MISSING_REQUIRED_ATT = 0x207C,ERROR_DS_ATT_NOT_DEF_FOR_CLASS = 0x207D,ERROR_DS_ATT_ALREADY_EXISTS = 0x207E,ERROR_DS_CANT_ADD_ATT_VALUES = 0x2080,ERROR_DS_SINGLE_VALUE_CONSTRAINT = 0x2081,ERROR_DS_RANGE_CONSTRAINT = 0x2082,ERROR_DS_ATT_VAL_ALREADY_EXISTS = 0x2083,ERROR_DS_CANT_REM_MISSING_ATT = 0x2084,ERROR_DS_CANT_REM_MISSING_ATT_VAL = 0x2085,ERROR_DS_ROOT_CANT_BE_SUBREF = 0x2086,ERROR_DS_NO_CHAINING = 0x2087,ERROR_DS_NO_CHAINED_EVAL = 0x2088,ERROR_DS_NO_PARENT_OBJECT = 0x2089,ERROR_DS_PARENT_IS_AN_ALIAS = 0x208A,ERROR_DS_CANT_MIX_MASTER_AND_REPS = 0x208B,ERROR_DS_CHILDREN_EXIST = 0x208C,ERROR_DS_OBJ_NOT_FOUND = 0x208D,ERROR_DS_ALIASED_OBJ_MISSING = 0x208E,ERROR_DS_BAD_NAME_SYNTAX = 0x208F,ERROR_DS_ALIAS_POINTS_TO_ALIAS = 0x2090,ERROR_DS_CANT_DEREF_ALIAS = 0x2091,ERROR_DS_OUT_OF_SCOPE = 0x2092,ERROR_DS_CANT_DELETE_DSA_OBJ = 0x2094,ERROR_DS_GENERIC_ERROR = 0x2095,ERROR_DS_DSA_MUST_BE_INT_MASTER = 0x2096,ERROR_DS_CLASS_NOT_DSA = 0x2097,ERROR_DS_INSUFF_ACCESS_RIGHTS = 0x2098,ERROR_DS_ILLEGAL_SUPERIOR = 0x2099,ERROR_DS_ATTRIBUTE_OWNED_BY_SAM = 0x209A,ERROR_DS_NAME_TOO_MANY_PARTS = 0x209B,ERROR_DS_NAME_TOO_LONG = 0x209C,ERROR_DS_NAME_VALUE_TOO_LONG = 0x209D,ERROR_DS_NAME_UNPARSEABLE = 0x209E,ERROR_DS_NAME_TYPE_UNKNOWN = 0x209F,ERROR_DS_NOT_AN_OBJECT = 0x20A0,ERROR_DS_SEC_DESC_TOO_SHORT = 0x20A1,ERROR_DS_SEC_DESC_INVALID = 0x20A2,ERROR_DS_NO_DELETED_NAME = 0x20A3,ERROR_DS_SUBREF_MUST_HAVE_PARENT = 0x20A4,ERROR_DS_NCNAME_MUST_BE_NC = 0x20A5,ERROR_DS_CANT_ADD_SYSTEM_ONLY = 0x20A6,ERROR_DS_CLASS_MUST_BE_CONCRETE = 0x20A7,ERROR_DS_INVALID_DMD = 0x20A8,ERROR_DS_OBJ_GUID_EXISTS = 0x20A9,ERROR_DS_NOT_ON_BACKLINK = 0x20AA,ERROR_DS_NO_CROSSREF_FOR_NC = 0x20AB,ERROR_DS_SHUTTING_DOWN = 0x20AC,ERROR_DS_UNKNOWN_OPERATION = 0x20AD,ERROR_DS_INVALID_ROLE_OWNER = 0x20AE,ERROR_DS_COULDNT_CONTACT_FSMO = 0x20AF,ERROR_DS_CROSS_NC_DN_RENAME = 0x20B0,ERROR_DS_CANT_MOD_SYSTEM_ONLY = 0x20B1,ERROR_DS_REPLICATOR_ONLY = 0x20B2,ERROR_DS_OBJ_CLASS_NOT_DEFINED = 0x20B3,ERROR_DS_OBJ_CLASS_NOT_SUBCLASS = 0x20B4,ERROR_DS_NAME_REFERENCE_INVALID = 0x20B5,ERROR_DS_CROSS_REF_EXISTS = 0x20B6,ERROR_DS_CANT_DEL_MASTER_CROSSREF = 0x20B7,ERROR_DS_SUBTREE_NOTIFY_NOT_NC_HEAD = 0x20B8,ERROR_DS_NOTIFY_FILTER_TOO_COMPLEX = 0x20B9,ERROR_DS_DUP_RDN = 0x20BA,ERROR_DS_DUP_OID = 0x20BB,ERROR_DS_DUP_MAPI_ID = 0x20BC,ERROR_DS_DUP_SCHEMA_ID_GUID = 0x20BD,ERROR_DS_DUP_LDAP_DISPLAY_NAME = 0x20BE,ERROR_DS_SEMANTIC_ATT_TEST = 0x20BF,ERROR_DS_SYNTAX_MISMATCH = 0x20C0,ERROR_DS_EXISTS_IN_MUST_HAVE = 0x20C1,ERROR_DS_EXISTS_IN_MAY_HAVE = 0x20C2,ERROR_DS_NONEXISTENT_MAY_HAVE = 0x20C3,ERROR_DS_NONEXISTENT_MUST_HAVE = 0x20C4,ERROR_DS_AUX_CLS_TEST_FAIL = 0x20C5,ERROR_DS_NONEXISTENT_POSS_SUP = 0x20C6,ERROR_DS_SUB_CLS_TEST_FAIL = 0x20C7,ERROR_DS_BAD_RDN_ATT_ID_SYNTAX = 0x20C8,ERROR_DS_EXISTS_IN_AUX_CLS = 0x20C9,ERROR_DS_EXISTS_IN_SUB_CLS = 0x20CA,ERROR_DS_EXISTS_IN_POSS_SUP = 0x20CB,ERROR_DS_RECALCSCHEMA_FAILED = 0x20CC,ERROR_DS_TREE_DELETE_NOT_FINISHED = 0x20CD,ERROR_DS_CANT_DELETE = 0x20CE,ERROR_DS_ATT_SCHEMA_REQ_ID = 0x20CF,ERROR_DS_BAD_ATT_SCHEMA_SYNTAX = 0x20D0,ERROR_DS_CANT_CACHE_ATT = 0x20D1,ERROR_DS_CANT_CACHE_CLASS = 0x20D2,ERROR_DS_CANT_REMOVE_ATT_CACHE = 0x20D3,ERROR_DS_CANT_REMOVE_CLASS_CACHE = 0x20D4,ERROR_DS_CANT_RETRIEVE_DN = 0x20D5,ERROR_DS_MISSING_SUPREF = 0x20D6,ERROR_DS_CANT_RETRIEVE_INSTANCE = 0x20D7,ERROR_DS_CODE_INCONSISTENCY = 0x20D8,ERROR_DS_DATABASE_ERROR = 0x20D9,ERROR_DS_GOVERNSID_MISSING = 0x20DA,ERROR_DS_MISSING_EXPECTED_ATT = 0x20DB,ERROR_DS_NCNAME_MISSING_CR_REF = 0x20DC,ERROR_DS_SECURITY_CHECKING_ERROR = 0x20DD,ERROR_DS_SCHEMA_NOT_LOADED = 0x20DE,ERROR_DS_SCHEMA_ALLOC_FAILED = 0x20DF,ERROR_DS_ATT_SCHEMA_REQ_SYNTAX = 0x20E0,ERROR_DS_GCVERIFY_ERROR = 0x20E1,ERROR_DS_DRA_SCHEMA_MISMATCH = 0x20E2,ERROR_DS_CANT_FIND_DSA_OBJ = 0x20E3,ERROR_DS_CANT_FIND_EXPECTED_NC = 0x20E4,ERROR_DS_CANT_FIND_NC_IN_CACHE = 0x20E5,ERROR_DS_CANT_RETRIEVE_CHILD = 0x20E6,ERROR_DS_SECURITY_ILLEGAL_MODIFY = 0x20E7,ERROR_DS_CANT_REPLACE_HIDDEN_REC = 0x20E8,ERROR_DS_BAD_HIERARCHY_FILE = 0x20E9,ERROR_DS_BUILD_HIERARCHY_TABLE_FAILED = 0x20EA,ERROR_DS_CONFIG_PARAM_MISSING = 0x20EB,ERROR_DS_COUNTING_AB_INDICES_FAILED = 0x20EC,ERROR_DS_HIERARCHY_TABLE_MALLOC_FAILED = 0x20ED,ERROR_DS_INTERNAL_FAILURE = 0x20EE,ERROR_DS_UNKNOWN_ERROR = 0x20EF,ERROR_DS_ROOT_REQUIRES_CLASS_TOP = 0x20F0,ERROR_DS_REFUSING_FSMO_ROLES = 0x20F1,ERROR_DS_MISSING_FSMO_SETTINGS = 0x20F2,ERROR_DS_UNABLE_TO_SURRENDER_ROLES = 0x20F3,ERROR_DS_DRA_GENERIC = 0x20F4,ERROR_DS_DRA_INVALID_PARAMETER = 0x20F5,ERROR_DS_DRA_BUSY = 0x20F6,ERROR_DS_DRA_BAD_DN = 0x20F7,ERROR_DS_DRA_BAD_NC = 0x20F8,ERROR_DS_DRA_DN_EXISTS = 0x20F9,ERROR_DS_DRA_INTERNAL_ERROR = 0x20FA,ERROR_DS_DRA_INCONSISTENT_DIT = 0x20FB,ERROR_DS_DRA_CONNECTION_FAILED = 0x20FC,ERROR_DS_DRA_BAD_INSTANCE_TYPE = 0x20FD,ERROR_DS_DRA_OUT_OF_MEM = 0x20FE,ERROR_DS_DRA_MAIL_PROBLEM = 0x20FF,ERROR_DS_DRA_REF_ALREADY_EXISTS = 0x2100,ERROR_DS_DRA_REF_NOT_FOUND = 0x2101,ERROR_DS_DRA_OBJ_IS_REP_SOURCE = 0x2102,ERROR_DS_DRA_DB_ERROR = 0x2103,ERROR_DS_DRA_NO_REPLICA = 0x2104,ERROR_DS_DRA_ACCESS_DENIED = 0x2105,ERROR_DS_DRA_NOT_SUPPORTED = 0x2106,ERROR_DS_DRA_RPC_CANCELLED = 0x2107,ERROR_DS_DRA_SOURCE_DISABLED = 0x2108,ERROR_DS_DRA_SINK_DISABLED = 0x2109,ERROR_DS_DRA_NAME_COLLISION = 0x210A,ERROR_DS_DRA_SOURCE_REINSTALLED = 0x210B,ERROR_DS_DRA_MISSING_PARENT = 0x210C,ERROR_DS_DRA_PREEMPTED = 0x210D,ERROR_DS_DRA_ABANDON_SYNC = 0x210E,ERROR_DS_DRA_SHUTDOWN = 0x210F,ERROR_DS_DRA_INCOMPATIBLE_PARTIAL_SET = 0x2110,ERROR_DS_DRA_SOURCE_IS_PARTIAL_REPLICA = 0x2111,ERROR_DS_DRA_EXTN_CONNECTION_FAILED = 0x2112,ERROR_DS_INSTALL_SCHEMA_MISMATCH = 0x2113,ERROR_DS_DUP_LINK_ID = 0x2114,ERROR_DS_NAME_ERROR_RESOLVING = 0x2115,ERROR_DS_NAME_ERROR_NOT_FOUND = 0x2116,ERROR_DS_NAME_ERROR_NOT_UNIQUE = 0x2117,ERROR_DS_NAME_ERROR_NO_MAPPING = 0x2118,ERROR_DS_NAME_ERROR_DOMAIN_ONLY = 0x2119,ERROR_DS_NAME_ERROR_NO_SYNTACTICAL_MAPPING = 0x211A,ERROR_DS_CONSTRUCTED_ATT_MOD = 0x211B,ERROR_DS_WRONG_OM_OBJ_CLASS = 0x211C,ERROR_DS_DRA_REPL_PENDING = 0x211D,ERROR_DS_DS_REQUIRED = 0x211E,ERROR_DS_INVALID_LDAP_DISPLAY_NAME = 0x211F,ERROR_DS_NON_BASE_SEARCH = 0x2120,ERROR_DS_CANT_RETRIEVE_ATTS = 0x2121,ERROR_DS_BACKLINK_WITHOUT_LINK = 0x2122,ERROR_DS_EPOCH_MISMATCH = 0x2123,ERROR_DS_SRC_NAME_MISMATCH = 0x2124,ERROR_DS_SRC_AND_DST_NC_IDENTICAL = 0x2125,ERROR_DS_DST_NC_MISMATCH = 0x2126,ERROR_DS_NOT_AUTHORITIVE_FOR_DST_NC = 0x2127,ERROR_DS_SRC_GUID_MISMATCH = 0x2128,ERROR_DS_CANT_MOVE_DELETED_OBJECT = 0x2129,ERROR_DS_PDC_OPERATION_IN_PROGRESS = 0x212A,ERROR_DS_CROSS_DOMAIN_CLEANUP_REQD = 0x212B,ERROR_DS_ILLEGAL_XDOM_MOVE_OPERATION = 0x212C,ERROR_DS_CANT_WITH_ACCT_GROUP_MEMBERSHPS = 0x212D,ERROR_DS_NC_MUST_HAVE_NC_PARENT = 0x212E,ERROR_DS_CR_IMPOSSIBLE_TO_VALIDATE = 0x212F,ERROR_DS_DST_DOMAIN_NOT_NATIVE = 0x2130,ERROR_DS_MISSING_INFRASTRUCTURE_CONTAINER = 0x2131,ERROR_DS_CANT_MOVE_ACCOUNT_GROUP = 0x2132,ERROR_DS_CANT_MOVE_RESOURCE_GROUP = 0x2133,ERROR_DS_INVALID_SEARCH_FLAG = 0x2134,ERROR_DS_NO_TREE_DELETE_ABOVE_NC = 0x2135,ERROR_DS_COULDNT_LOCK_TREE_FOR_DELETE = 0x2136,ERROR_DS_COULDNT_IDENTIFY_OBJECTS_FOR_TREE_DELETE = 0x2137,ERROR_DS_SAM_INIT_FAILURE = 0x2138,ERROR_DS_SENSITIVE_GROUP_VIOLATION = 0x2139,ERROR_DS_CANT_MOD_PRIMARYGROUPID = 0x213A,ERROR_DS_ILLEGAL_BASE_SCHEMA_MOD = 0x213B,ERROR_DS_NONSAFE_SCHEMA_CHANGE = 0x213C,ERROR_DS_SCHEMA_UPDATE_DISALLOWED = 0x213D,ERROR_DS_CANT_CREATE_UNDER_SCHEMA = 0x213E,ERROR_DS_INSTALL_NO_SRC_SCH_VERSION = 0x213F,ERROR_DS_INSTALL_NO_SCH_VERSION_IN_INIFILE = 0x2140,ERROR_DS_INVALID_GROUP_TYPE = 0x2141,ERROR_DS_NO_NEST_GLOBALGROUP_IN_MIXEDDOMAIN = 0x2142,ERROR_DS_NO_NEST_LOCALGROUP_IN_MIXEDDOMAIN = 0x2143,ERROR_DS_GLOBAL_CANT_HAVE_LOCAL_MEMBER = 0x2144,ERROR_DS_GLOBAL_CANT_HAVE_UNIVERSAL_MEMBER = 0x2145,ERROR_DS_UNIVERSAL_CANT_HAVE_LOCAL_MEMBER = 0x2146,ERROR_DS_GLOBAL_CANT_HAVE_CROSSDOMAIN_MEMBER = 0x2147,ERROR_DS_LOCAL_CANT_HAVE_CROSSDOMAIN_LOCAL_MEMBER = 0x2148,ERROR_DS_HAVE_PRIMARY_MEMBERS = 0x2149,ERROR_DS_STRING_SD_CONVERSION_FAILED = 0x214A,ERROR_DS_NAMING_MASTER_GC = 0x214B,ERROR_DS_DNS_LOOKUP_FAILURE = 0x214C,ERROR_DS_COULDNT_UPDATE_SPNS = 0x214D,ERROR_DS_CANT_RETRIEVE_SD = 0x214E,ERROR_DS_KEY_NOT_UNIQUE = 0x214F,ERROR_DS_WRONG_LINKED_ATT_SYNTAX = 0x2150,ERROR_DS_SAM_NEED_BOOTKEY_PASSWORD = 0x2151,ERROR_DS_SAM_NEED_BOOTKEY_FLOPPY = 0x2152,ERROR_DS_CANT_START = 0x2153,ERROR_DS_INIT_FAILURE = 0x2154,ERROR_DS_NO_PKT_PRIVACY_ON_CONNECTION = 0x2155,ERROR_DS_SOURCE_DOMAIN_IN_FOREST = 0x2156,ERROR_DS_DESTINATION_DOMAIN_NOT_IN_FOREST = 0x2157,ERROR_DS_DESTINATION_AUDITING_NOT_ENABLED = 0x2158,ERROR_DS_CANT_FIND_DC_FOR_SRC_DOMAIN = 0x2159,ERROR_DS_SRC_OBJ_NOT_GROUP_OR_USER = 0x215A,ERROR_DS_SRC_SID_EXISTS_IN_FOREST = 0x215B,ERROR_DS_SRC_AND_DST_OBJECT_CLASS_MISMATCH = 0x215C,ERROR_SAM_INIT_FAILURE = 0x215D,ERROR_DS_DRA_SCHEMA_INFO_SHIP = 0x215E,ERROR_DS_DRA_SCHEMA_CONFLICT = 0x215F,ERROR_DS_DRA_EARLIER_SCHEMA_CONFLICT = 0x2160,ERROR_DS_DRA_OBJ_NC_MISMATCH = 0x2161,ERROR_DS_NC_STILL_HAS_DSAS = 0x2162,ERROR_DS_GC_REQUIRED = 0x2163,ERROR_DS_LOCAL_MEMBER_OF_LOCAL_ONLY = 0x2164,ERROR_DS_NO_FPO_IN_UNIVERSAL_GROUPS = 0x2165,ERROR_DS_CANT_ADD_TO_GC = 0x2166,ERROR_DS_NO_CHECKPOINT_WITH_PDC = 0x2167,ERROR_DS_SOURCE_AUDITING_NOT_ENABLED = 0x2168,ERROR_DS_CANT_CREATE_IN_NONDOMAIN_NC = 0x2169,ERROR_DS_INVALID_NAME_FOR_SPN = 0x216A,ERROR_DS_FILTER_USES_CONTRUCTED_ATTRS = 0x216B,ERROR_DS_UNICODEPWD_NOT_IN_QUOTES = 0x216C,ERROR_DS_MACHINE_ACCOUNT_QUOTA_EXCEEDED = 0x216D,ERROR_DS_MUST_BE_RUN_ON_DST_DC = 0x216E,ERROR_DS_SRC_DC_MUST_BE_SP4_OR_GREATER = 0x216F,ERROR_DS_CANT_TREE_DELETE_CRITICAL_OBJ = 0x2170,DNS_ERROR_RESPONSE_CODES_BASE = 0x2328,DNS_ERROR_RCODE_NO_ERROR = 0x0,DNS_ERROR_MASK = 0x2328,DNS_ERROR_RCODE_FORMAT_ERROR = 0x2329,DNS_ERROR_RCODE_SERVER_FAILURE = 0x232A,DNS_ERROR_RCODE_NAME_ERROR = 0x232B,DNS_ERROR_RCODE_NOT_IMPLEMENTED = 0x232C,DNS_ERROR_RCODE_REFUSED = 0x232D,DNS_ERROR_RCODE_YXDOMAIN = 0x232E,DNS_ERROR_RCODE_YXRRSET = 0x232F,DNS_ERROR_RCODE_NXRRSET = 0x2330,DNS_ERROR_RCODE_NOTAUTH = 0x2331,DNS_ERROR_RCODE_NOTZONE = 0x2332,DNS_ERROR_RCODE_BADSIG = 0x2338,DNS_ERROR_RCODE_BADKEY = 0x2339,DNS_ERROR_RCODE_BADTIME = 0x233A,DNS_ERROR_RCODE_LAST = 0x233A,DNS_ERROR_PACKET_FMT_BASE = 0x251C,DNS_INFO_NO_RECORDS = 0x251D,DNS_ERROR_BAD_PACKET = 0x251E,DNS_ERROR_NO_PACKET = 0x251F,DNS_ERROR_RCODE = 0x2520,DNS_ERROR_UNSECURE_PACKET = 0x2521,DNS_STATUS_PACKET_UNSECURE = 0x2521,DNS_ERROR_NO_MEMORY = 0xE,DNS_ERROR_INVALID_NAME = 0x7B,DNS_ERROR_INVALID_DATA = 0xD,DNS_ERROR_GENERAL_API_BASE = 0x254E,DNS_ERROR_INVALID_TYPE = 0x254F,DNS_ERROR_INVALID_IP_ADDRESS = 0x2550,DNS_ERROR_INVALID_PROPERTY = 0x2551,DNS_ERROR_TRY_AGAIN_LATER = 0x2552,DNS_ERROR_NOT_UNIQUE = 0x2553,DNS_ERROR_NON_RFC_NAME = 0x2554,DNS_STATUS_FQDN = 0x2555,DNS_STATUS_DOTTED_NAME = 0x2556,DNS_STATUS_SINGLE_PART_NAME = 0x2557,DNS_ERROR_INVALID_NAME_CHAR = 0x2558,DNS_ERROR_NUMERIC_NAME = 0x2559,DNS_ERROR_ZONE_BASE = 0x2580,DNS_ERROR_ZONE_DOES_NOT_EXIST = 0x2581,DNS_ERROR_NO_ZONE_INFO = 0x2582,DNS_ERROR_INVALID_ZONE_OPERATION = 0x2583,DNS_ERROR_ZONE_CONFIGURATION_ERROR = 0x2584,DNS_ERROR_ZONE_HAS_NO_SOA_RECORD = 0x2585,DNS_ERROR_ZONE_HAS_NO_NS_RECORDS = 0x2586,DNS_ERROR_ZONE_LOCKED = 0x2587,DNS_ERROR_ZONE_CREATION_FAILED = 0x2588,DNS_ERROR_ZONE_ALREADY_EXISTS = 0x2589,DNS_ERROR_AUTOZONE_ALREADY_EXISTS = 0x258A,DNS_ERROR_INVALID_ZONE_TYPE = 0x258B,DNS_ERROR_SECONDARY_REQUIRES_MASTER_IP = 0x258C,DNS_ERROR_ZONE_NOT_SECONDARY = 0x258D,DNS_ERROR_NEED_SECONDARY_ADDRESSES = 0x258E,DNS_ERROR_WINS_INIT_FAILED = 0x258F,DNS_ERROR_NEED_WINS_SERVERS = 0x2590,DNS_ERROR_NBSTAT_INIT_FAILED = 0x2591,DNS_ERROR_SOA_DELETE_INVALID = 0x2592,DNS_ERROR_DATAFILE_BASE = 0x25B2,DNS_ERROR_PRIMARY_REQUIRES_DATAFILE = 0x25B3,DNS_ERROR_INVALID_DATAFILE_NAME = 0x25B4,DNS_ERROR_DATAFILE_OPEN_FAILURE = 0x25B5,DNS_ERROR_FILE_WRITEBACK_FAILED = 0x25B6,DNS_ERROR_DATAFILE_PARSING = 0x25B7,DNS_ERROR_DATABASE_BASE = 0x25E4,DNS_ERROR_RECORD_DOES_NOT_EXIST = 0x25E5,DNS_ERROR_RECORD_FORMAT = 0x25E6,DNS_ERROR_NODE_CREATION_FAILED = 0x25E7,DNS_ERROR_UNKNOWN_RECORD_TYPE = 0x25E8,DNS_ERROR_RECORD_TIMED_OUT = 0x25E9,DNS_ERROR_NAME_NOT_IN_ZONE = 0x25EA,DNS_ERROR_CNAME_LOOP = 0x25EB,DNS_ERROR_NODE_IS_CNAME = 0x25EC,DNS_ERROR_CNAME_COLLISION = 0x25ED,DNS_ERROR_RECORD_ONLY_AT_ZONE_ROOT = 0x25EE,DNS_ERROR_RECORD_ALREADY_EXISTS = 0x25EF,DNS_ERROR_SECONDARY_DATA = 0x25F0,DNS_ERROR_NO_CREATE_CACHE_DATA = 0x25F1,DNS_ERROR_NAME_DOES_NOT_EXIST = 0x25F2,DNS_WARNING_PTR_CREATE_FAILED = 0x25F3,DNS_WARNING_DOMAIN_UNDELETED = 0x25F4,DNS_ERROR_DS_UNAVAILABLE = 0x25F5,DNS_ERROR_DS_ZONE_ALREADY_EXISTS = 0x25F6,DNS_ERROR_NO_BOOTFILE_IF_DS_ZONE = 0x25F7,DNS_ERROR_OPERATION_BASE = 0x2616,DNS_INFO_AXFR_COMPLETE = 0x2617,DNS_ERROR_AXFR = 0x2618,DNS_INFO_ADDED_LOCAL_WINS = 0x2619,DNS_ERROR_SECURE_BASE = 0x2648,DNS_STATUS_CONTINUE_NEEDED = 0x2649,DNS_ERROR_SETUP_BASE = 0x267A,DNS_ERROR_NO_TCPIP = 0x267B,DNS_ERROR_NO_DNS_SERVERS = 0x267C,WSABASEERR = 0x2710,WSAEINTR = 0x2714,WSAEBADF = 0x2719,WSAEACCES = 0x271D,WSAEFAULT = 0x271E,WSAEINVAL = 0x2726,WSAEMFILE = 0x2728,WSAEWOULDBLOCK = 0x2733,WSAEINPROGRESS = 0x2734,WSAEALREADY = 0x2735,WSAENOTSOCK = 0x2736,WSAEDESTADDRREQ = 0x2737,WSAEMSGSIZE = 0x2738,WSAEPROTOTYPE = 0x2739,WSAENOPROTOOPT = 0x273A,WSAEPROTONOSUPPORT = 0x273B,WSAESOCKTNOSUPPORT = 0x273C,WSAEOPNOTSUPP = 0x273D,WSAEPFNOSUPPORT = 0x273E,WSAEAFNOSUPPORT = 0x273F,WSAEADDRINUSE = 0x2740,WSAEADDRNOTAVAIL = 0x2741,WSAENETDOWN = 0x2742,WSAENETUNREACH = 0x2743,WSAENETRESET = 0x2744,WSAECONNABORTED = 0x2745,WSAECONNRESET = 0x2746,WSAENOBUFS = 0x2747,WSAEISCONN = 0x2748,WSAENOTCONN = 0x2749,WSAESHUTDOWN = 0x274A,WSAETOOMANYREFS = 0x274B,WSAETIMEDOUT = 0x274C,WSAECONNREFUSED = 0x274D,WSAELOOP = 0x274E,WSAENAMETOOLONG = 0x274F,WSAEHOSTDOWN = 0x2750,WSAEHOSTUNREACH = 0x2751,WSAENOTEMPTY = 0x2752,WSAEPROCLIM = 0x2753,WSAEUSERS = 0x2754,WSAEDQUOT = 0x2755,WSAESTALE = 0x2756,WSAEREMOTE = 0x2757,WSASYSNOTREADY = 0x276B,WSAVERNOTSUPPORTED = 0x276C,WSANOTINITIALISED = 0x276D,WSAEDISCON = 0x2775,WSAENOMORE = 0x2776,WSAECANCELLED = 0x2777,WSAEINVALIDPROCTABLE = 0x2778,WSAEINVALIDPROVIDER = 0x2779,WSAEPROVIDERFAILEDINIT = 0x277A,WSASYSCALLFAILURE = 0x277B,WSASERVICE_NOT_FOUND = 0x277C,WSATYPE_NOT_FOUND = 0x277D,WSA_E_NO_MORE = 0x277E,WSA_E_CANCELLED = 0x277F,WSAEREFUSED = 0x2780,WSAHOST_NOT_FOUND = 0x2AF9,WSATRY_AGAIN = 0x2AFA,WSANO_RECOVERY = 0x2AFB,WSANO_DATA = 0x2AFC,WSA_QOS_RECEIVERS = 0x2AFD,WSA_QOS_SENDERS = 0x2AFE,WSA_QOS_NO_SENDERS = 0x2AFF,WSA_QOS_NO_RECEIVERS = 0x2B00,WSA_QOS_REQUEST_CONFIRMED = 0x2B01,WSA_QOS_ADMISSION_FAILURE = 0x2B02,WSA_QOS_POLICY_FAILURE = 0x2B03,WSA_QOS_BAD_STYLE = 0x2B04,WSA_QOS_BAD_OBJECT = 0x2B05,WSA_QOS_TRAFFIC_CTRL_ERROR = 0x2B06,WSA_QOS_GENERIC_ERROR = 0x2B07,WSA_QOS_ESERVICETYPE = 0x2B08,WSA_QOS_EFLOWSPEC = 0x2B09,WSA_QOS_EPROVSPECBUF = 0x2B0A,WSA_QOS_EFILTERSTYLE = 0x2B0B,WSA_QOS_EFILTERTYPE = 0x2B0C,WSA_QOS_EFILTERCOUNT = 0x2B0D,WSA_QOS_EOBJLENGTH = 0x2B0E,WSA_QOS_EFLOWCOUNT = 0x2B0F,WSA_QOS_EUNKOWNPSOBJ = 0x2B10,WSA_QOS_EPOLICYOBJ = 0x2B11,WSA_QOS_EFLOWDESC = 0x2B12,WSA_QOS_EPSFLOWSPEC = 0x2B13,WSA_QOS_EPSFILTERSPEC = 0x2B14,WSA_QOS_ESDMODEOBJ = 0x2B15,WSA_QOS_ESHAPERATEOBJ = 0x2B16,WSA_QOS_RESERVED_PETYPE = 0x2B17,};
enum MACRO_EVENT {EVENT_MODIFY_STATE = 0x2,EVENT_ALL_ACCESS = 0x1F0003,};
enum MACRO_FNERR {FNERR_FILENAMECODES = 0x3000,FNERR_SUBCLASSFAILURE = 0x3001,FNERR_INVALIDFILENAME = 0x3002,FNERR_BUFFERTOOSMALL = 0x3003,};
enum MACRO_FRAME {FRAME_FPO = 0,FRAME_TRAP = 1,FRAME_TSS = 2,FRAME_NONFPO = 3,};
enum MACRO_FRERR {FRERR_FINDREPLACECODES = 0x4000,FRERR_BUFFERLENGTHZERO = 0x4001,};
enum MACRO_FSCTL {FSCTL_REQUEST_OPLOCK_LEVEL_1 = 589824,FSCTL_REQUEST_OPLOCK_LEVEL_2 = 589828,FSCTL_REQUEST_BATCH_OPLOCK = 589832,FSCTL_OPLOCK_BREAK_ACKNOWLEDGE = 589836,FSCTL_OPBATCH_ACK_CLOSE_PENDING = 589840,FSCTL_OPLOCK_BREAK_NOTIFY = 589844,FSCTL_LOCK_VOLUME = 589848,FSCTL_UNLOCK_VOLUME = 589852,FSCTL_DISMOUNT_VOLUME = 589856,FSCTL_IS_VOLUME_MOUNTED = 589864,FSCTL_IS_PATHNAME_VALID = 589868,FSCTL_MARK_VOLUME_DIRTY = 589872,FSCTL_QUERY_RETRIEVAL_POINTERS = 589883,FSCTL_GET_COMPRESSION = 589884,FSCTL_SET_COMPRESSION = 639040,FSCTL_MARK_AS_SYSTEM_HIVE = 589903,FSCTL_OPLOCK_BREAK_ACK_NO_2 = 589904,FSCTL_INVALIDATE_VOLUMES = 589908,FSCTL_QUERY_FAT_BPB = 589912,FSCTL_REQUEST_FILTER_OPLOCK = 589916,FSCTL_FILESYSTEM_GET_STATISTICS = 589920,FSCTL_GET_NTFS_VOLUME_DATA = 589924,FSCTL_GET_NTFS_FILE_RECORD = 589928,FSCTL_GET_VOLUME_BITMAP = 589935,FSCTL_GET_RETRIEVAL_POINTERS = 589939,FSCTL_MOVE_FILE = 589940,FSCTL_IS_VOLUME_DIRTY = 589944,FSCTL_GET_HFS_INFORMATION = 589948,FSCTL_ALLOW_EXTENDED_DASD_IO = 589955,FSCTL_READ_PROPERTY_DATA = 589959,FSCTL_WRITE_PROPERTY_DATA = 589963,FSCTL_FIND_FILES_BY_SID = 589967,FSCTL_DUMP_PROPERTY_DATA = 589975,FSCTL_SET_OBJECT_ID = 589976,FSCTL_GET_OBJECT_ID = 589980,FSCTL_DELETE_OBJECT_ID = 589984,FSCTL_SET_REPARSE_POINT = 589988,FSCTL_GET_REPARSE_POINT = 589992,FSCTL_DELETE_REPARSE_POINT = 589996,FSCTL_ENUM_USN_DATA = 590003,FSCTL_SECURITY_ID_CHECK = 606391,FSCTL_READ_USN_JOURNAL = 590011,FSCTL_SET_OBJECT_ID_EXTENDED = 590012,FSCTL_CREATE_OR_GET_OBJECT_ID = 590016,FSCTL_SET_SPARSE = 590020,FSCTL_SET_ZERO_DATA = 622792,FSCTL_QUERY_ALLOCATED_RANGES = 606415,FSCTL_ENABLE_UPGRADE = 622800,FSCTL_SET_ENCRYPTION = 590039,FSCTL_ENCRYPTION_FSCTL_IO = 590043,FSCTL_WRITE_RAW_ENCRYPTED = 590047,FSCTL_READ_RAW_ENCRYPTED = 590051,FSCTL_CREATE_USN_JOURNAL = 590055,FSCTL_READ_FILE_USN_DATA = 590059,FSCTL_WRITE_USN_CLOSE_RECORD = 590063,FSCTL_EXTEND_VOLUME = 590064,FSCTL_QUERY_USN_JOURNAL = 590068,FSCTL_DELETE_USN_JOURNAL = 590072,FSCTL_MARK_HANDLE = 590076,FSCTL_SIS_COPYFILE = 590080,FSCTL_SIS_LINK_FILES = 639236,FSCTL_HSM_MSG = 639240,FSCTL_NSS_CONTROL = 622860,FSCTL_HSM_DATA = 639251,FSCTL_RECALL_FILE = 590103,FSCTL_NSS_RCONTROL = 606488,};
enum MACRO_GROUP {GROUP_NAME = 0x80,UNIQUE_NAME = 0x0,};
enum MACRO_HDATA {HDATA_APPOWNED = 0x1,};
enum MACRO_HFILE {HFILE_ERROR = -1,};
enum MACRO_HOVER {HOVER_DEFAULT = 0xFFFFFFFF,};
enum MACRO_HTTOP {HTTOP = 12,};
enum MACRO_IDANI {IDANI_OPEN = 1,};
enum MACRO_IDHOT {IDHOT_SNAPWINDOW = -1,IDHOT_SNAPDESKTOP = -2,};
enum MACRO_IDYES {IDYES = 6,};
enum MACRO_IMAGE {IMAGE_DOS_SIGNATURE = 0x5A4D,IMAGE_OS2_SIGNATURE = 0x454E,IMAGE_OS2_SIGNATURE_LE = 0x454C,IMAGE_VXD_SIGNATURE = 0x454C,IMAGE_NT_SIGNATURE = 0x4550,IMAGE_SIZEOF_FILE_HEADER = 0x14,IMAGE_FILE_RELOCS_STRIPPED = 0x1,IMAGE_FILE_EXECUTABLE_IMAGE = 0x2,IMAGE_FILE_LINE_NUMS_STRIPPED = 0x4,IMAGE_FILE_LOCAL_SYMS_STRIPPED = 0x8,IMAGE_FILE_AGGRESIVE_WS_TRIM = 0x10,IMAGE_FILE_LARGE_ADDRESS_AWARE = 0x20,IMAGE_FILE_BYTES_REVERSED_LO = 0x80,IMAGE_FILE_32BIT_MACHINE = 0x100,IMAGE_FILE_DEBUG_STRIPPED = 0x200,IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP = 0x400,IMAGE_FILE_NET_RUN_FROM_SWAP = 0x800,IMAGE_FILE_SYSTEM = 0x1000,IMAGE_FILE_DLL = 0x2000,IMAGE_FILE_UP_SYSTEM_ONLY = 0x4000,IMAGE_FILE_BYTES_REVERSED_HI = 0x8000,IMAGE_FILE_MACHINE_UNKNOWN = 0x0,IMAGE_FILE_MACHINE_I386 = 0x14C,IMAGE_FILE_MACHINE_R3000 = 0x162,IMAGE_FILE_MACHINE_R4000 = 0x166,IMAGE_FILE_MACHINE_R10000 = 0x168,IMAGE_FILE_MACHINE_WCEMIPSV2 = 0x169,IMAGE_FILE_MACHINE_ALPHA = 0x184,IMAGE_FILE_MACHINE_POWERPC = 0x1F0,IMAGE_FILE_MACHINE_SH3 = 0x1A2,IMAGE_FILE_MACHINE_SH3E = 0x1A4,IMAGE_FILE_MACHINE_SH4 = 0x1A6,IMAGE_FILE_MACHINE_ARM = 0x1C0,IMAGE_FILE_MACHINE_THUMB = 0x1C2,IMAGE_FILE_MACHINE_IA64 = 0x200,IMAGE_FILE_MACHINE_MIPS16 = 0x266,IMAGE_FILE_MACHINE_MIPSFPU = 0x366,IMAGE_FILE_MACHINE_MIPSFPU16 = 0x466,IMAGE_FILE_MACHINE_ALPHA64 = 0x284,IMAGE_FILE_MACHINE_AXP64 = 0x284,IMAGE_NUMBEROF_DIRECTORY_ENTRIES = 0x10,IMAGE_SIZEOF_ROM_OPTIONAL_HEADER = 0x38,IMAGE_SIZEOF_STD_OPTIONAL_HEADER = 0x1C,IMAGE_SIZEOF_NT_OPTIONAL32_HEADER = 0xE0,IMAGE_SIZEOF_NT_OPTIONAL64_HEADER = 0xF0,IMAGE_NT_OPTIONAL_HDR32_MAGIC = 0x10B,IMAGE_NT_OPTIONAL_HDR64_MAGIC = 0x20B,IMAGE_ROM_OPTIONAL_HDR_MAGIC = 0x107,IMAGE_SIZEOF_NT_OPTIONAL_HEADER = 0xE0,IMAGE_NT_OPTIONAL_HDR_MAGIC = 0x10B,IMAGE_SUBSYSTEM_UNKNOWN = 0x0,IMAGE_SUBSYSTEM_NATIVE = 0x1,IMAGE_SUBSYSTEM_WINDOWS_GUI = 0x2,IMAGE_SUBSYSTEM_WINDOWS_CUI = 0x3,IMAGE_SUBSYSTEM_OS2_CUI = 0x5,IMAGE_SUBSYSTEM_POSIX_CUI = 0x7,IMAGE_SUBSYSTEM_NATIVE_WINDOWS = 0x8,IMAGE_SUBSYSTEM_WINDOWS_CE_GUI = 0x9,IMAGE_SUBSYSTEM_EFI_APPLICATION = 0xA,IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER = 0xB,IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER = 0xC,IMAGE_DLLCHARACTERISTICS_NO_BIND = 0x800,IMAGE_DLLCHARACTERISTICS_WDM_DRIVER = 0x2000,IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE = 0x8000,IMAGE_DIRECTORY_ENTRY_EXPORT = 0x0,IMAGE_DIRECTORY_ENTRY_IMPORT = 0x1,IMAGE_DIRECTORY_ENTRY_RESOURCE = 0x2,IMAGE_DIRECTORY_ENTRY_EXCEPTION = 0x3,IMAGE_DIRECTORY_ENTRY_SECURITY = 0x4,IMAGE_DIRECTORY_ENTRY_BASERELOC = 0x5,IMAGE_DIRECTORY_ENTRY_DEBUG = 0x6,IMAGE_DIRECTORY_ENTRY_ARCHITECTURE = 0x7,IMAGE_DIRECTORY_ENTRY_GLOBALPTR = 0x8,IMAGE_DIRECTORY_ENTRY_TLS = 0x9,IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG = 0xA,IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT = 0xB,IMAGE_DIRECTORY_ENTRY_IAT = 0xC,IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT = 0xD,IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR = 0xE,IMAGE_SIZEOF_SHORT_NAME = 0x8,IMAGE_SIZEOF_SECTION_HEADER = 0x28,IMAGE_SCN_TYPE_NO_PAD = 0x8,IMAGE_SCN_CNT_CODE = 0x20,IMAGE_SCN_CNT_INITIALIZED_DATA = 0x40,IMAGE_SCN_CNT_UNINITIALIZED_DATA = 0x80,IMAGE_SCN_LNK_OTHER = 0x100,IMAGE_SCN_LNK_INFO = 0x200,IMAGE_SCN_LNK_REMOVE = 0x800,IMAGE_SCN_LNK_COMDAT = 0x1000,IMAGE_SCN_NO_DEFER_SPEC_EXC = 0x4000,IMAGE_SCN_GPREL = 0x8000,IMAGE_SCN_MEM_FARDATA = 0x8000,IMAGE_SCN_MEM_PURGEABLE = 0x20000,IMAGE_SCN_MEM_16BIT = 0x20000,IMAGE_SCN_MEM_LOCKED = 0x40000,IMAGE_SCN_MEM_PRELOAD = 0x80000,IMAGE_SCN_ALIGN_1BYTES = 0x100000,IMAGE_SCN_ALIGN_2BYTES = 0x200000,IMAGE_SCN_ALIGN_4BYTES = 0x300000,IMAGE_SCN_ALIGN_8BYTES = 0x400000,IMAGE_SCN_ALIGN_16BYTES = 0x500000,IMAGE_SCN_ALIGN_32BYTES = 0x600000,IMAGE_SCN_ALIGN_64BYTES = 0x700000,IMAGE_SCN_ALIGN_128BYTES = 0x800000,IMAGE_SCN_ALIGN_256BYTES = 0x900000,IMAGE_SCN_ALIGN_512BYTES = 0xA00000,IMAGE_SCN_ALIGN_1024BYTES = 0xB00000,IMAGE_SCN_ALIGN_2048BYTES = 0xC00000,IMAGE_SCN_ALIGN_4096BYTES = 0xD00000,IMAGE_SCN_ALIGN_8192BYTES = 0xE00000,IMAGE_SCN_ALIGN_MASK = 0xF00000,IMAGE_SCN_LNK_NRELOC_OVFL = 0x1000000,IMAGE_SCN_MEM_DISCARDABLE = 0x2000000,IMAGE_SCN_MEM_NOT_CACHED = 0x4000000,IMAGE_SCN_MEM_NOT_PAGED = 0x8000000,IMAGE_SCN_MEM_SHARED = 0x10000000,IMAGE_SCN_MEM_EXECUTE = 0x20000000,IMAGE_SCN_MEM_READ = 0x40000000,IMAGE_SCN_MEM_WRITE = 0x80000000,IMAGE_SCN_SCALE_INDEX = 0x1,IMAGE_SIZEOF_SYMBOL = 0x12,IMAGE_SYM_UNDEFINED = 0x0,IMAGE_SYM_ABSOLUTE = 0xFFFFFFFF,IMAGE_SYM_DEBUG = 0xFFFFFFFE,IMAGE_SYM_TYPE_NULL = 0x0,IMAGE_SYM_TYPE_VOID = 0x1,IMAGE_SYM_TYPE_CHAR = 0x2,IMAGE_SYM_TYPE_SHORT = 0x3,IMAGE_SYM_TYPE_INT = 0x4,IMAGE_SYM_TYPE_LONG = 0x5,IMAGE_SYM_TYPE_FLOAT = 0x6,IMAGE_SYM_TYPE_DOUBLE = 0x7,IMAGE_SYM_TYPE_STRUCT = 0x8,IMAGE_SYM_TYPE_UNION = 0x9,IMAGE_SYM_TYPE_ENUM = 0xA,IMAGE_SYM_TYPE_MOE = 0xB,IMAGE_SYM_TYPE_BYTE = 0xC,IMAGE_SYM_TYPE_WORD = 0xD,IMAGE_SYM_TYPE_UINT = 0xE,IMAGE_SYM_TYPE_DWORD = 0xF,IMAGE_SYM_TYPE_PCODE = 0x8000,IMAGE_SYM_DTYPE_NULL = 0x0,IMAGE_SYM_DTYPE_POINTER = 0x1,IMAGE_SYM_DTYPE_FUNCTION = 0x2,IMAGE_SYM_DTYPE_ARRAY = 0x3,IMAGE_SYM_CLASS_END_OF_FUNCTION = 0xFF,IMAGE_SYM_CLASS_NULL = 0x0,IMAGE_SYM_CLASS_AUTOMATIC = 0x1,IMAGE_SYM_CLASS_EXTERNAL = 0x2,IMAGE_SYM_CLASS_STATIC = 0x3,IMAGE_SYM_CLASS_REGISTER = 0x4,IMAGE_SYM_CLASS_EXTERNAL_DEF = 0x5,IMAGE_SYM_CLASS_LABEL = 0x6,IMAGE_SYM_CLASS_UNDEFINED_LABEL = 0x7,IMAGE_SYM_CLASS_MEMBER_OF_STRUCT = 0x8,IMAGE_SYM_CLASS_ARGUMENT = 0x9,IMAGE_SYM_CLASS_STRUCT_TAG = 0xA,IMAGE_SYM_CLASS_MEMBER_OF_UNION = 0xB,IMAGE_SYM_CLASS_UNION_TAG = 0xC,IMAGE_SYM_CLASS_TYPE_DEFINITION = 0xD,IMAGE_SYM_CLASS_UNDEFINED_STATIC = 0xE,IMAGE_SYM_CLASS_ENUM_TAG = 0xF,IMAGE_SYM_CLASS_MEMBER_OF_ENUM = 0x10,IMAGE_SYM_CLASS_REGISTER_PARAM = 0x11,IMAGE_SYM_CLASS_BIT_FIELD = 0x12,IMAGE_SYM_CLASS_FAR_EXTERNAL = 0x44,IMAGE_SYM_CLASS_BLOCK = 0x64,IMAGE_SYM_CLASS_FUNCTION = 0x65,IMAGE_SYM_CLASS_END_OF_STRUCT = 0x66,IMAGE_SYM_CLASS_FILE = 0x67,IMAGE_SYM_CLASS_SECTION = 0x68,IMAGE_SYM_CLASS_WEAK_EXTERNAL = 0x69,};
enum MACRO_INPUT {INPUT_MOUSE = 0,INPUT_KEYBOARD = 1,INPUT_HARDWARE = 2,};
enum MACRO_IOCTL {IOCTL_STORAGE_BASE = 45,IOCTL_STORAGE_CHECK_VERIFY = 2967552,IOCTL_STORAGE_CHECK_VERIFY2 = 2951168,IOCTL_STORAGE_MEDIA_REMOVAL = 2967556,IOCTL_STORAGE_EJECT_MEDIA = 2967560,IOCTL_STORAGE_LOAD_MEDIA = 2967564,IOCTL_STORAGE_LOAD_MEDIA2 = 2951180,IOCTL_STORAGE_RESERVE = 2967568,IOCTL_STORAGE_RELEASE = 2967572,IOCTL_STORAGE_FIND_NEW_DEVICES = 2967576,IOCTL_STORAGE_EJECTION_CONTROL = 2951488,IOCTL_STORAGE_MCN_CONTROL = 2951492,IOCTL_STORAGE_GET_MEDIA_TYPES = 2952192,IOCTL_STORAGE_GET_MEDIA_TYPES_EX = 2952196,IOCTL_STORAGE_RESET_BUS = 2969600,IOCTL_STORAGE_RESET_DEVICE = 2969604,IOCTL_STORAGE_GET_DEVICE_NUMBER = 2953344,IOCTL_STORAGE_PREDICT_FAILURE = 2953472,};
enum MACRO_ISMEX {ISMEX_NOSEND = 0x0,ISMEX_SEND = 0x1,ISMEX_NOTIFY = 0x2,ISMEX_CALLBACK = 0x4,ISMEX_REPLIED = 0x8,};
enum MACRO_LCMAP {LCMAP_LOWERCASE = 0x100,LCMAP_UPPERCASE = 0x200,LCMAP_SORTKEY = 0x400,LCMAP_BYTEREV = 0x800,LCMAP_HIRAGANA = 0x100000,LCMAP_KATAKANA = 0x200000,LCMAP_HALFWIDTH = 0x400000,LCMAP_FULLWIDTH = 0x800000,LCMAP_LINGUISTIC_CASING = 0x1000000,LCMAP_SIMPLIFIED_CHINESE = 0x2000000,LCMAP_TRADITIONAL_CHINESE = 0x4000000,};
enum MACRO_LLKHF {LLKHF_EXTENDED = 1,LLKHF_INJECTED = 16,LLKHF_ALTDOWN = 32,LLKHF_UP = 128,};
enum MACRO_LLMHF {LLMHF_INJECTED = 0x1,};
enum MACRO_LOGON {LOGON_WITH_PROFILE = 0x1,LOGON_NETCREDENTIALS_ONLY = 0x2,};
enum MACRO_MB_OK {MB_OK = 0x0,MB_OKCANCEL = 0x1,MB_ABORTRETRYIGNORE = 0x2,MB_YESNOCANCEL = 0x3,MB_YESNO = 0x4,MB_RETRYCANCEL = 0x5,MB_CANCELTRYCONTINUE = 0x6,MB_ICONHAND = 0x10,MB_ICONQUESTION = 0x20,MB_ICONEXCLAMATION = 0x30,MB_ICONASTERISK = 0x40,MB_USERICON = 0x80,MB_ICONWARNING = 0x30,MB_ICONERROR = 0x10,MB_ICONINFORMATION = 0x40,MB_ICONSTOP = 0x10,MB_DEFBUTTON1 = 0x0,MB_DEFBUTTON2 = 0x100,MB_DEFBUTTON3 = 0x200,MB_DEFBUTTON4 = 0x300,MB_APPLMODAL = 0x0,MB_SYSTEMMODAL = 0x1000,MB_TASKMODAL = 0x2000,MB_HELP = 0x4000,MB_NOFOCUS = 0x8000,MB_SETFOREGROUND = 0x10000,MB_DEFAULT_DESKTOP_ONLY = 0x20000,MB_TOPMOST = 0x40000,MB_RIGHT = 0x80000,MB_RTLREADING = 0x100000,MB_SERVICE_NOTIFICATION = 0x200000,MB_SERVICE_NOTIFICATION_NT3X = 0x40000,MB_TYPEMASK = 0xF,MB_ICONMASK = 0xF0,MB_DEFMASK = 0xF00,MB_MODEMASK = 0x3000,MB_MISCMASK = 0xC000,};
enum MACRO_MEDIA {MEDIA_ERASEABLE = 0x1,MEDIA_WRITE_ONCE = 0x2,MEDIA_READ_ONLY = 0x4,MEDIA_READ_WRITE = 0x8,MEDIA_WRITE_PROTECTED = 0x100,MEDIA_CURRENTLY_MOUNTED = 0x80000000,};
enum MACRO_MIXER {MIXER_SHORT_NAME_CHARS = 16,MIXER_LONG_NAME_CHARS = 64,};
enum MACRO_MKSYS {MKSYS_URLMONIKER = 6,};
enum MACRO_MMIOM {MMIOM_READ = 0,MMIOM_WRITE = 1,MMIOM_SEEK = 2,MMIOM_OPEN = 3,MMIOM_CLOSE = 4,MMIOM_WRITEFLUSH = 5,MMIOM_RENAME = 6,MMIOM_USER = 32768,};
enum MACRO_MNGOF {MNGOF_TOPGAP = 0x1,MNGOF_BOTTOMGAP = 0x2,};
enum MACRO_MOUSE {MOUSE_MOVED = 0x1,};
enum MACRO_MUTEX {MUTEX_MODIFY_STATE = 1,MUTEX_ALL_ACCESS = 2031617,};
enum MACRO_NT351 {NT351_INTERFACE_SIZE = 0x40,};
enum MACRO_OBJID {OBJID_WINDOW = 0x0,OBJID_SYSMENU = 0xFFFFFFFF,OBJID_TITLEBAR = 0xFFFFFFFE,OBJID_MENU = 0xFFFFFFFD,OBJID_CLIENT = 0xFFFFFFFC,OBJID_VSCROLL = 0xFFFFFFFB,OBJID_HSCROLL = 0xFFFFFFFA,OBJID_SIZEGRIP = 0xFFFFFFF9,OBJID_CARET = 0xFFFFFFF8,OBJID_CURSOR = 0xFFFFFFF7,OBJID_ALERT = 0xFFFFFFF6,OBJID_SOUND = 0xFFFFFFF5,OBJID_QUERYCLASSNAMEIDX = 0xFFFFFFF4,OBJID_NATIVEOM = 0xFFFFFFF0,};
enum MACRO_PDERR {PDERR_PRINTERCODES = 0x1000,PDERR_SETUPFAILURE = 0x1001,PDERR_PARSEFAILURE = 0x1002,PDERR_RETDEFFAILURE = 0x1003,PDERR_LOADDRVFAILURE = 0x1004,PDERR_GETDEVMODEFAIL = 0x1005,PDERR_INITFAILURE = 0x1006,PDERR_NODEVICES = 0x1007,PDERR_NODEFAULTPRN = 0x1008,PDERR_DNDMMISMATCH = 0x1009,PDERR_CREATEICFAILURE = 0x100A,PDERR_PRINTERNOTFOUND = 0x100B,PDERR_DEFAULTDIFFERENT = 0x100C,};
enum MACRO_PIDDI {PIDDI_THUMBNAIL = 0x2,};
enum MACRO_PIDSI {PIDSI_TITLE = 0x2,PIDSI_SUBJECT = 0x3,PIDSI_AUTHOR = 0x4,PIDSI_KEYWORDS = 0x5,PIDSI_COMMENTS = 0x6,PIDSI_TEMPLATE = 0x7,PIDSI_LASTAUTHOR = 0x8,PIDSI_REVNUMBER = 0x9,PIDSI_EDITTIME = 0xA,PIDSI_LASTPRINTED = 0xB,PIDSI_CREATE_DTM = 0xC,PIDSI_LASTSAVE_DTM = 0xD,PIDSI_PAGECOUNT = 0xE,PIDSI_WORDCOUNT = 0xF,PIDSI_CHARCOUNT = 0x10,PIDSI_THUMBNAIL = 0x11,PIDSI_APPNAME = 0x12,PIDSI_DOC_SECURITY = 0x13,};
enum MACRO_PITCH {DEFAULT_PITCH = 0,FIXED_PITCH = 1,VARIABLE_PITCH = 2,};
enum MACRO_PSBTN {PSBTN_BACK = 0,PSBTN_NEXT = 1,PSBTN_FINISH = 2,PSBTN_OK = 3,PSBTN_APPLYNOW = 4,PSBTN_CANCEL = 5,PSBTN_HELP = 6,PSBTN_MAX = 6,};
enum MACRO_PSPCB {PSPCB_ADDREF = 0,PSPCB_RELEASE = 1,PSPCB_CREATE = 2,};
enum MACRO_PURGE {PURGE_TXABORT = 0x1,PURGE_RXABORT = 0x2,PURGE_TXCLEAR = 0x4,PURGE_RXCLEAR = 0x8,};
enum MACRO_REGDB {REGDB_E_FIRST = 0x80040150,REGDB_E_LAST = 0x8004015F,REGDB_S_FIRST = 0x40150,REGDB_S_LAST = 0x4015F,};
enum MACRO_RPC_C {RPC_C_AUTHZ_NONE = 0,RPC_C_AUTHZ_NAME = 1,RPC_C_AUTHZ_DCE = 2,RPC_C_AUTHZ_DEFAULT = -1,};
enum MACRO_SCARD {SCARD_S_SUCCESS = 0,};
enum MACRO_SCERR {SCERR_NOCARDNAME = 0x4000,SCERR_NOGUIDS = 0x8000,};
enum MACRO_SCHAR {SCHAR_MIN = -128,SCHAR_MAX = 127,};
enum MACRO_SEC_E {SEC_E_NO_SPM = -2146893052,SEC_E_NOT_SUPPORTED = -2146893054,};
enum MACRO_SERKF {SERKF_SERIALKEYSON = 0x1,SERKF_AVAILABLE = 0x2,SERKF_INDICATOR = 0x4,};
enum MACRO_SHERB {SHERB_NOCONFIRMATION = 0x1,SHERB_NOPROGRESSUI = 0x2,SHERB_NOSOUND = 0x4,};
enum MACRO_SHGFI {SHGFI_ICON = 0x100,SHGFI_DISPLAYNAME = 0x200,SHGFI_TYPENAME = 0x400,SHGFI_ATTRIBUTES = 0x800,SHGFI_ICONLOCATION = 0x1000,SHGFI_EXETYPE = 0x2000,SHGFI_SYSICONINDEX = 0x4000,SHGFI_LINKOVERLAY = 0x8000,SHGFI_SELECTED = 0x10000,SHGFI_ATTR_SPECIFIED = 0x20000,SHGFI_LARGEICON = 0x0,SHGFI_SMALLICON = 0x1,SHGFI_OPENICON = 0x2,SHGFI_SHELLICONSIZE = 0x4,SHGFI_PIDL = 0x8,SHGFI_USEFILEATTRIBUTES = 0x10,};
enum MACRO_SMART {SMART_GET_VERSION = 0x74080,SMART_SEND_DRIVE_COMMAND = 0x7C084,SMART_RCV_DRIVE_DATA = 0x7C088,};
enum MACRO_SOUND {SOUND_SYSTEM_STARTUP = 1,SOUND_SYSTEM_SHUTDOWN = 2,SOUND_SYSTEM_BEEP = 3,SOUND_SYSTEM_ERROR = 4,SOUND_SYSTEM_QUESTION = 5,SOUND_SYSTEM_WARNING = 6,SOUND_SYSTEM_INFORMATION = 7,SOUND_SYSTEM_MAXIMIZE = 8,SOUND_SYSTEM_MINIMIZE = 9,SOUND_SYSTEM_RESTOREUP = 10,SOUND_SYSTEM_RESTOREDOWN = 11,SOUND_SYSTEM_APPSTART = 12,SOUND_SYSTEM_FAULT = 13,SOUND_SYSTEM_APPEND = 14,SOUND_SYSTEM_MENUCOMMAND = 15,SOUND_SYSTEM_MENUPOPUP = 16,};
enum MACRO_SPOOL {SPOOL_FILE_PERSISTENT = 0x1,SPOOL_FILE_TEMPORARY = 0x2,};
enum MACRO_STAMP {STAMP_DESIGNVECTOR = 0x8007664,STAMP_AXESLIST = 0x8006C61,};
enum MACRO_START {START_PAGE_GENERAL = 0xFFFFFFFF,};
enum MACRO_STATE {STATE_SYSTEM_UNAVAILABLE = 0x1,STATE_SYSTEM_SELECTED = 0x2,STATE_SYSTEM_FOCUSED = 0x4,STATE_SYSTEM_PRESSED = 0x8,STATE_SYSTEM_CHECKED = 0x10,STATE_SYSTEM_MIXED = 0x20,STATE_SYSTEM_INDETERMINATE = 0x20,STATE_SYSTEM_READONLY = 0x40,STATE_SYSTEM_HOTTRACKED = 0x80,STATE_SYSTEM_DEFAULT = 0x100,STATE_SYSTEM_EXPANDED = 0x200,STATE_SYSTEM_COLLAPSED = 0x400,STATE_SYSTEM_BUSY = 0x800,STATE_SYSTEM_FLOATING = 0x1000,STATE_SYSTEM_MARQUEED = 0x2000,STATE_SYSTEM_ANIMATED = 0x4000,STATE_SYSTEM_INVISIBLE = 0x8000,STATE_SYSTEM_OFFSCREEN = 0x10000,STATE_SYSTEM_SIZEABLE = 0x20000,STATE_SYSTEM_MOVEABLE = 0x40000,STATE_SYSTEM_SELFVOICING = 0x80000,STATE_SYSTEM_FOCUSABLE = 0x100000,STATE_SYSTEM_SELECTABLE = 0x200000,STATE_SYSTEM_LINKED = 0x400000,STATE_SYSTEM_TRAVERSED = 0x800000,STATE_SYSTEM_MULTISELECTABLE = 0x1000000,STATE_SYSTEM_EXTSELECTABLE = 0x2000000,STATE_SYSTEM_ALERT_LOW = 0x4000000,STATE_SYSTEM_ALERT_MEDIUM = 0x8000000,STATE_SYSTEM_ALERT_HIGH = 0x10000000,STATE_SYSTEM_PROTECTED = 0x20000000,STATE_SYSTEM_VALID = 0x3FFFFFFF,};
enum MACRO_STGTY {STGTY_REPEAT = 0x100,};
enum MACRO_STILL {STILL_ACTIVE = 259,};
enum MACRO_STOCK {STOCK_LAST = 19,};
enum MACRO_STYLE {STYLE_DESCRIPTION_SIZE = 32,IMEMENUITEM_STRING_SIZE = 80,};
enum MACRO_TC_OP {TC_OP_CHARACTER = 0x1,TC_OP_STROKE = 0x2,TC_CP_STROKE = 0x4,TC_CR_90 = 0x8,TC_CR_ANY = 0x10,TC_SF_X_YINDEP = 0x20,TC_SA_DOUBLE = 0x40,TC_SA_INTEGER = 0x80,TC_SA_CONTIN = 0x100,TC_EA_DOUBLE = 0x200,TC_IA_ABLE = 0x400,TC_UA_ABLE = 0x800,TC_SO_ABLE = 0x1000,TC_RA_ABLE = 0x2000,TC_VA_ABLE = 0x4000,TC_RESERVED = 0x8000,TC_SCROLLBLT = 0x10000,};
enum MACRO_TIMER {TIMER_QUERY_STATE = 0x1,TIMER_MODIFY_STATE = 0x2,TIMER_ALL_ACCESS = 0x1F0003,};
enum MACRO_TOKEN {TOKEN_ASSIGN_PRIMARY = 0x1,TOKEN_DUPLICATE = 0x2,TOKEN_IMPERSONATE = 0x4,TOKEN_QUERY = 0x8,TOKEN_QUERY_SOURCE = 0x10,TOKEN_ADJUST_PRIVILEGES = 0x20,TOKEN_ADJUST_GROUPS = 0x40,TOKEN_ADJUST_DEFAULT = 0x80,TOKEN_ADJUST_SESSIONID = 0x100,TOKEN_ALL_ACCESS = 0xF01FF,TOKEN_READ = 0x20008,TOKEN_WRITE = 0x200E0,TOKEN_EXECUTE = 0x20000,TOKEN_SOURCE_LENGTH = 0x8,};
enum MACRO_UCHAR {UCHAR_MAX = 255,};
enum MACRO_ULONG {ULONG_MAX = -1,};
enum MACRO_USAGE {USAGE_MATCH_TYPE_AND = 0x0,USAGE_MATCH_TYPE_OR = 0x1,};
enum MACRO_USHRT {USHRT_MAX = 65535,};
enum MACRO_VALID {VALID_INHERIT_FLAGS = 0x1F,};
enum MACRO_WHEEL {WHEEL_DELTA = 120,WHEEL_PAGESCROLL = -1,};
enum MACRO_WIN31 {WIN31_CLASS = 0,};
enum MACRO_WIN32 {WIN32 = 100,};
enum MACRO_WNCON {WNCON_FORNETCARD = 0x1,WNCON_NOTROUTED = 0x2,WNCON_SLOWLINK = 0x4,WNCON_DYNAMIC = 0x8,};
enum MACRO_WNFMT {WNFMT_MULTILINE = 0x1,WNFMT_ABBREVIATED = 0x2,WNFMT_INENUM = 0x10,WNFMT_CONNECTION = 0x20,};
enum MACRO_WRITE {WRITE_DAC = 0x40000,WRITE_OWNER = 0x80000,};
enum MACRO_WSANO {WSANO_ADDRESS = 11004,NO_ADDRESS = 11004,};
enum MACRO_XTYPF {XTYPF_NOBLOCK = 0x2,XTYPF_NODATA = 0x4,XTYPF_ACKREQ = 0x8,};
enum MACRO__UI64 {_UI64_MAX = -1,};
enum MACRO_chx10 {chx10 = 0x419,};
enum MACRO_chx11 {chx11 = 0x41A,};
enum MACRO_chx12 {chx12 = 0x41B,};
enum MACRO_chx13 {chx13 = 0x41C,};
enum MACRO_chx14 {chx14 = 0x41D,};
enum MACRO_chx15 {chx15 = 0x41E,};
enum MACRO_chx16 {chx16 = 0x41F,};
enum MACRO_cmb10 {cmb10 = 0x479,};
enum MACRO_cmb11 {cmb11 = 0x47A,};
enum MACRO_cmb12 {cmb12 = 0x47B,};
enum MACRO_cmb13 {cmb13 = 0x47C,};
enum MACRO_cmb14 {cmb14 = 0x47D,};
enum MACRO_cmb15 {cmb15 = 0x47E,};
enum MACRO_cmb16 {cmb16 = 0x47F,};
enum MACRO_edt10 {edt10 = 0x489,};
enum MACRO_edt11 {edt11 = 0x48A,};
enum MACRO_edt12 {edt12 = 0x48B,};
enum MACRO_edt13 {edt13 = 0x48C,};
enum MACRO_edt14 {edt14 = 0x48D,};
enum MACRO_edt15 {edt15 = 0x48E,};
enum MACRO_edt16 {edt16 = 0x48F,};
enum MACRO_lst10 {lst10 = 0x469,};
enum MACRO_lst11 {lst11 = 0x46A,};
enum MACRO_lst12 {lst12 = 0x46B,};
enum MACRO_lst13 {lst13 = 0x46C,};
enum MACRO_lst14 {lst14 = 0x46D,};
enum MACRO_lst15 {lst15 = 0x46E,};
enum MACRO_lst16 {lst16 = 0x46F,};
enum MACRO_psh10 {psh10 = 0x409,};
enum MACRO_psh11 {psh11 = 0x40A,};
enum MACRO_psh12 {psh12 = 0x40B,};
enum MACRO_psh13 {psh13 = 0x40C,};
enum MACRO_psh14 {psh14 = 0x40D,};
enum MACRO_psh15 {psh15 = 0x40E,};
enum MACRO_psh16 {psh16 = 0x40F,};
enum MACRO_rad10 {rad10 = 0x429,};
enum MACRO_rad11 {rad11 = 0x42A,};
enum MACRO_rad12 {rad12 = 0x42B,};
enum MACRO_rad13 {rad13 = 0x42C,};
enum MACRO_rad14 {rad14 = 0x42D,};
enum MACRO_rad15 {rad15 = 0x42E,};
enum MACRO_rad16 {rad16 = 0x42F,};
enum MACRO_stc10 {stc10 = 0x449,};
enum MACRO_stc11 {stc11 = 0x44A,};
enum MACRO_stc12 {stc12 = 0x44B,};
enum MACRO_stc13 {stc13 = 0x44C,};
enum MACRO_stc14 {stc14 = 0x44D,};
enum MACRO_stc15 {stc15 = 0x44E,};
enum MACRO_stc16 {stc16 = 0x44F,};
enum MACRO_stc17 {stc17 = 0x450,};
enum MACRO_stc18 {stc18 = 0x451,};
enum MACRO_stc19 {stc19 = 0x452,};
enum MACRO_stc20 {stc20 = 0x453,};
enum MACRO_stc21 {stc21 = 0x454,};
enum MACRO_stc22 {stc22 = 0x455,};
enum MACRO_stc23 {stc23 = 0x456,};
enum MACRO_stc24 {stc24 = 0x457,};
enum MACRO_stc25 {stc25 = 0x458,};
enum MACRO_stc26 {stc26 = 0x459,};
enum MACRO_stc27 {stc27 = 0x45A,};
enum MACRO_stc28 {stc28 = 0x45B,};
enum MACRO_stc29 {stc29 = 0x45C,};
enum MACRO_stc30 {stc30 = 0x45D,};
enum MACRO_stc31 {stc31 = 0x45E,};
enum MACRO_stc32 {stc32 = 0x45F,};
typedef struct tagMDINEXTMENU MDINEXTMENU;
typedef struct tagMENUBARINFO MENUBARINFO;
typedef struct tagMIDIINCAPSA MIDIINCAPSA;
typedef struct tagMIDIINCAPSW MIDIINCAPSW;
typedef struct tagMONCBSTRUCT MONCBSTRUCT;
typedef struct tagMONITORINFO MONITORINFO;
typedef struct _NAME_BUFFER NAME_BUFFER;
typedef void (__stdcall *NDR_RUNDOWN)(void *context);
typedef struct tagCWPSTRUCT *NPCWPSTRUCT;
typedef struct tagEXTLOGPEN *NPEXTLOGPEN;
typedef struct joyinfoex_tag *NPJOYINFOEX;
typedef struct tagPOLYTEXTA *NPPOLYTEXTA;
typedef struct tagPOLYTEXTW *NPPOLYTEXTW;
typedef struct tagSTYLEBUFA *NPSTYLEBUFA;
typedef struct tagSTYLEBUFW *NPSTYLEBUFW;
typedef struct tagWNDCLASSA *NPWNDCLASSA;
typedef struct tagWNDCLASSW *NPWNDCLASSW;
typedef struct _NSS_CONTROL NSS_CONTROL;
typedef struct _OFNOTIFYEXA OFNOTIFYEXA;
typedef struct _OFNOTIFYEXW OFNOTIFYEXW;
typedef struct tagPAINTSTRUCT PAINTSTRUCT;
typedef struct tagALTTABINFO *PALTTABINFO;
typedef struct _AppBarData *PAPPBARDATA;
typedef struct tagPARAMDESCEX PARAMDESCEX;
typedef struct _CC81E267BD8B32E89ADB7AE662C05BFA *PARRAY_INFO;
typedef struct tagBITMAPINFO *PBITMAPINFO;
typedef struct _CERT_CHAIN *PCERT_CHAIN;
typedef struct tagCURSORINFO *PCURSORINFO;
typedef struct tagDIBSECTION *PDIBSECTION;
typedef struct tagDROPSTRUCT *PDROPSTRUCT;
typedef struct tagEMRELLIPSE *PEMRELLIPSE;
typedef struct tagABORTPATH *PEMRENDPATH;
typedef struct tagEMRFILLRGN *PEMRFILLRGN;
typedef struct tagEMRMASKBLT *PEMRMASKBLT;
typedef struct tagEMRPOLYLINE *PEMRPOLYGON;
typedef struct tagEMRSELECTCLIPPATH *PEMRSETROP2;
typedef struct _C811A85A3CBAF233E045382DA27E29BF *PFLASHWINFO;
typedef struct _JOB_INFO_3 *PJOB_INFO_3;
typedef struct tagKEYBDINPUT *PKEYBDINPUT;
typedef struct _LIST_ENTRY *PLIST_ENTRY;
typedef struct tagLOGBRUSH32 *PLOGBRUSH32;
typedef struct tagLOGPALETTE *PLOGPALETTE;
typedef struct tagMETAHEADER *PMETAHEADER;
typedef struct tagMETARECORD *PMETARECORD;
typedef struct tagMINMAXINFO *PMINMAXINFO;
typedef struct tagMIXERCAPSA *PMIXERCAPSA;
typedef struct tagMIXERCAPSW *PMIXERCAPSW;
typedef struct tagMIXERLINEA *PMIXERLINEA;
typedef struct tagMIXERLINEW *PMIXERLINEW;
typedef struct tagMOUSEINPUT *PMOUSEINPUT;
typedef struct _POINTFLOAT *PPOINTFLOAT;
typedef struct tagPDEXA PRINTDLGEXA;
typedef struct tagPDEXW PRINTDLGEXW;
typedef struct tagPROPVARIANT PROPVARIANT;
typedef struct _RPC_POLICY *PRPC_POLICY;
typedef struct _SMALL_RECT *PSMALL_RECT;
typedef struct _SYSTEMTIME *PSYSTEMTIME;
typedef struct _TAPE_ERASE *PTAPE_ERASE;
typedef struct _TOKEN_USER *PTOKEN_USER;
typedef struct _F1B55BC800274E3ABC9BA0A46288924E *PUSN_RECORD;
typedef struct val_context *PVALCONTEXT;
typedef struct waveformat_tag *PWAVEFORMAT;
typedef struct tagWINDOWINFO *PWINDOWINFO;
typedef struct _WSAVersion *PWSAVERSION;
typedef struct _QOS_SD_MODE QOS_SD_MODE;
typedef struct _RPC_MESSAGE RPC_MESSAGE;
typedef struct _RPC_VERSION RPC_VERSION;
typedef struct _tagRemBINDINFO RemBINDINFO;
typedef struct tagRemHPALETTE RemHPALETTE;
struct SC_HANDLE__ {int unused;};
typedef struct tagSERIALKEYSA SERIALKEYSA;
typedef struct tagSERIALKEYSW SERIALKEYSW;
typedef struct _SHFILEINFOA SHFILEINFOA;
typedef struct _SHFILEINFOW SHFILEINFOW;
typedef struct _SI_COPYFILE SI_COPYFILE;
typedef struct sockaddr_in SOCKADDR_IN;
typedef struct tagSTATPROPSTG STATPROPSTG;
typedef struct tagSTYLESTRUCT STYLESTRUCT;
typedef struct _SYSTEM_INFO SYSTEM_INFO;
typedef struct tagTEXTMETRICA TEXTMETRICA;
typedef struct tagTEXTMETRICW TEXTMETRICW;
typedef struct _TOKEN_OWNER TOKEN_OWNER;
typedef struct tagTTPOLYCURVE TTPOLYCURVE;
typedef struct _UUID_VECTOR UUID_VECTOR;
typedef struct tagWAVEINCAPSA WAVEINCAPSA;
typedef struct tagWAVEINCAPSW WAVEINCAPSW;
typedef struct tagWNDCLASSEXA WNDCLASSEXA;
typedef struct tagWNDCLASSEXW WNDCLASSEXW;
struct XMLDocument;
typedef void (*_CatcherPTR)();
struct _DWORD_BLOB {unsigned int clSize;unsigned int alData[1];};
struct _LIST_ENTRY {struct _LIST_ENTRY *Flink;struct _LIST_ENTRY *Blink;};
enum _MEDIA_TYPE {Unknown = 0x0,F5_1Pt2_512 = 0x1,F3_1Pt44_512 = 0x2,F3_2Pt88_512 = 0x3,F3_20Pt8_512 = 0x4,F3_720_512 = 0x5,F5_360_512 = 0x6,F5_320_512 = 0x7,F5_320_1024 = 0x8,F5_180_512 = 0x9,F5_160_512 = 0xA,RemovableMedia = 0xB,FixedMedia = 0xC,F3_120M_512 = 0xD,F3_640_512 = 0xE,F5_640_512 = 0xF,F5_720_512 = 0x10,F3_1Pt2_512 = 0x11,F3_1Pt23_1024 = 0x12,F5_1Pt23_1024 = 0x13,F3_128Mb_512 = 0x14,F3_230Mb_512 = 0x15,F8_256_128 = 0x16,};
struct _RPC_POLICY {unsigned int Length;unsigned int EndpointFlags;unsigned int NICFlags;};
typedef struct _506E48B857830EE8DF6E8E27DF4CF86F _SIGCONTEXT;
enum _TOKEN_TYPE {TokenPrimary = 0x1,TokenImpersonation = 0x2,};
enum _URLZONEREG {URLZONEREG_DEFAULT = 0x0,URLZONEREG_HKLM = 0x1,URLZONEREG_HKCU = 0x2,};
struct _exceptionl {int type;char *name;long double arg1;long double arg2;long double retval;};
enum tagCALLCONV {CC_FASTCALL = 0x0,CC_CDECL = 0x1,CC_MSCPASCAL = 0x2,CC_PASCAL = 0x2,CC_MACPASCAL = 0x3,CC_STDCALL = 0x4,CC_FPFASTCALL = 0x5,CC_SYSCALL = 0x6,CC_MPWCDECL = 0x7,CC_MPWPASCAL = 0x8,CC_MAX = 0x9,};
enum tagCALLTYPE {CALLTYPE_TOPLEVEL = 0x1,CALLTYPE_NESTED = 0x2,CALLTYPE_ASYNC = 0x3,CALLTYPE_TOPLEVEL_CALLPENDING = 0x4,CALLTYPE_ASYNC_CALLPENDING = 0x5,};
enum tagDESCKIND {DESCKIND_NONE = 0x0,DESCKIND_FUNCDESC = 0x1,DESCKIND_VARDESC = 0x2,DESCKIND_TYPECOMP = 0x3,DESCKIND_IMPLICITAPPOBJ = 0x4,DESCKIND_MAX = 0x5,};
enum tagDVASPECT {DVASPECT_CONTENT = 0x1,DVASPECT_THUMBNAIL = 0x2,DVASPECT_ICON = 0x4,DVASPECT_DOCPRINT = 0x8,};
enum tagFUNCKIND {FUNC_VIRTUAL = 0x0,FUNC_PUREVIRTUAL = 0x1,FUNC_NONVIRTUAL = 0x2,FUNC_STATIC = 0x3,FUNC_DISPATCH = 0x4,};
enum tagLIBFLAGS {LIBFLAG_FRESTRICTED = 0x1,LIBFLAG_FCONTROL = 0x2,LIBFLAG_FHIDDEN = 0x4,LIBFLAG_FHASDISKIMAGE = 0x8,};
enum tagLOCKTYPE {LOCK_WRITE = 0x1,LOCK_EXCLUSIVE = 0x2,LOCK_ONLYONCE = 0x4,};
enum tagMKREDUCE {MKRREDUCE_ONE = 0x30000,MKRREDUCE_TOUSER = 0x20000,MKRREDUCE_THROUGHUSER = 0x10000,MKRREDUCE_ALL = 0x0,};
enum tagOLECLOSE {OLECLOSE_SAVEIFDIRTY = 0x0,OLECLOSE_NOSAVE = 0x1,OLECLOSE_PROMPTSAVE = 0x2,};
enum tagOLECONTF {OLECONTF_EMBEDDINGS = 0x1,OLECONTF_LINKS = 0x2,OLECONTF_OTHERS = 0x4,OLECONTF_ONLYUSER = 0x8,OLECONTF_ONLYIFRUNNING = 0x10,};
enum tagSTATFLAG {STATFLAG_DEFAULT = 0x0,STATFLAG_NONAME = 0x1,STATFLAG_NOOPEN = 0x2,};
enum tagTYPEKIND {TKIND_ENUM = 0x0,TKIND_RECORD = 0x1,TKIND_MODULE = 0x2,TKIND_INTERFACE = 0x3,TKIND_DISPATCH = 0x4,TKIND_COCLASS = 0x5,TKIND_ALIAS = 0x6,TKIND_UNION = 0x7,TKIND_MAX = 0x8,};
enum tagVARFLAGS {VARFLAG_FREADONLY = 0x1,VARFLAG_FSOURCE = 0x2,VARFLAG_FBINDABLE = 0x4,VARFLAG_FREQUESTEDIT = 0x8,VARFLAG_FDISPLAYBIND = 0x10,VARFLAG_FDEFAULTBIND = 0x20,VARFLAG_FHIDDEN = 0x40,VARFLAG_FRESTRICTED = 0x80,VARFLAG_FDEFAULTCOLLELEM = 0x100,VARFLAG_FUIDEFAULT = 0x200,VARFLAG_FNONBROWSABLE = 0x400,VARFLAG_FREPLACEABLE = 0x800,VARFLAG_FIMMEDIATEBIND = 0x1000,};
typedef struct _userHBITMAP userHBITMAP;
typedef struct _userHGLOBAL userHGLOBAL;
typedef struct _wireBRECORD *wireBRECORD;
typedef struct _wireVARIANT *wireVARIANT;
typedef struct _ACE_HEADER ACE_HEADER;
typedef struct tagALTTABINFO ALTTABINFO;
typedef struct _AppBarData APPBARDATA;
typedef struct _CC81E267BD8B32E89ADB7AE662C05BFA ARRAY_INFO;
typedef struct tagBIND_OPTS2 BIND_OPTS2;
typedef struct tagBITMAPINFO BITMAPINFO;
typedef struct _PUBLICKEYSTRUC BLOBHEADER;
typedef struct tagCABSTRBLOB CABSTRBLOB;
typedef struct tagCACLIPDATA CACLIPDATA;
typedef struct tagCAFILETIME CAFILETIME;
typedef struct _CERT_CHAIN CERT_CHAIN;
typedef struct _COAUTHINFO COAUTHINFO;
typedef struct _COMMCONFIG COMMCONFIG;
typedef struct tagCSPLATFORM CSPLATFORM;
typedef struct tagCURSORINFO CURSORINFO;
typedef struct tagDIBSECTION DIBSECTION;
typedef struct tagDISPPARAMS DISPPARAMS;
typedef struct tagDROPSTRUCT DROPSTRUCT;
typedef struct _DWORD_BLOB DWORD_BLOB;
typedef struct tagEMRELLIPSE EMRELLIPSE;
typedef struct tagABORTPATH EMRENDPATH;
typedef struct tagEMRFILLRGN EMRFILLRGN;
typedef struct tagEMRMASKBLT EMRMASKBLT;
typedef struct tagEMRPOLYLINE EMRPOLYGON;
typedef struct tagEMRSELECTCLIPPATH EMRSETROP2;
typedef struct tagFILTERKEYS FILTERKEYS;
typedef struct _C811A85A3CBAF233E045382DA27E29BF FLASHWINFO;
typedef int FXPT2DOT30;
typedef struct _GDI_OBJECT GDI_OBJECT;
typedef unsigned int HANDLE_PTR;
typedef void *HCERTSTORE;
struct HDDEDATA__ {int unused;};
struct HMIDIOUT__ {int unused;};
struct HMONITOR__ {int unused;};
struct HPALETTE__ {int unused;};
struct HWAVEOUT__ {int unused;};
struct IErrorInfo {struct IErrorInfoVtbl *lpVtbl;};
struct ILockBytes {struct ILockBytesVtbl *lpVtbl;};
struct IMallocSpy {struct IMallocSpyVtbl *lpVtbl;};
struct IOleCache2 {struct IOleCache2Vtbl *lpVtbl;};
struct IOleObject {struct IOleObjectVtbl *lpVtbl;};
struct IOleWindow {struct IOleWindowVtbl *lpVtbl;};
struct IRpcHelper {struct IRpcHelperVtbl *lpVtbl;};
struct ISurrogate {struct ISurrogateVtbl *lpVtbl;};
struct ITypeInfo2 {struct ITypeInfo2Vtbl *lpVtbl;};
typedef struct _JOB_INFO_3 JOB_INFO_3;
typedef struct tagKEYBDINPUT KEYBDINPUT;
typedef struct _LIST_ENTRY LIST_ENTRY;
typedef struct tagLOGBRUSH32 LOGBRUSH32;
typedef struct tagLOGPALETTE LOGPALETTE;
typedef struct _ABCFLOAT *LPABCFLOAT;
typedef struct tagAUXCAPSA *LPAUXCAPSA;
typedef struct tagAUXCAPSW *LPAUXCAPSW;
typedef IBindHost *LPBINDHOST;
typedef struct tagBSTRBLOB *LPBSTRBLOB;
typedef struct _COMMPROP *LPCOMMPROP;
typedef struct tagCUSTDATA *LPCUSTDATA;
typedef struct _devicemodeA *LPDEVMODEA;
typedef struct _devicemodeW *LPDEVMODEW;
typedef struct tagDEVNAMES *LPDEVNAMES;
typedef IDispatch *LPDISPATCH;
typedef struct _DOCINFOA *LPDOCINFOA;
typedef struct _DOCINFOW *LPDOCINFOW;
typedef struct tagELEMDESC *LPELEMDESC;
typedef IErrorLog *LPERRORLOG;
typedef struct tagEVENTMSG *LPEVENTMSG;
typedef struct _FILETIME *LPFILETIME;
typedef struct _flowspec *LPFLOWSPEC;
typedef struct tagFUNCDESC *LPFUNCDESC;
typedef struct tagGLYPHSET *LPGLYPHSET;
typedef struct tagHELPINFO *LPHELPINFO;
typedef struct tagJOYCAPSA *LPJOYCAPSA;
typedef struct tagJOYCAPSW *LPJOYCAPSW;
typedef struct tagLOGBRUSH *LPLOGBRUSH;
typedef struct tagLOGFONTA *LPLOGFONTA;
typedef struct tagLOGFONTW *LPLOGFONTW;
typedef IMarshal2 *LPMARSHAL2;
typedef struct tagMENUINFO *LPMENUINFO;
typedef struct _MMCKINFO *LPMMCKINFO;
typedef struct _MMIOINFO *LPMMIOINFO;
typedef struct _OFSTRUCT *LPOFSTRUCT;
typedef IOleCache *LPOLECACHE;
typedef struct tagPELARRAY *LPPELARRAY;
typedef struct protoent *LPPROTOENT;
typedef struct _RIP_INFO *LPRIP_INFO;
typedef struct sockaddr *LPSOCKADDR;
typedef struct timecaps_tag *LPTIMECAPS;
typedef struct tagTLIBATTR *LPTLIBATTR;
typedef struct tagTYPEATTR *LPTYPEATTR;
typedef ITypeComp *LPTYPECOMP;
typedef ITypeInfo *LPTYPEINFO;
typedef ITypeLib2 *LPTYPELIB2;
enum MACRO_ADDR {ADDR_ANY = 0,};
enum MACRO_ANSI {ANSI_NULL = 0,UNICODE_NULL = 0,};
enum MACRO_ASFW {ASFW_ANY = 4294967295,};
enum MACRO_ATTR {ATTR_INPUT = 0x0,ATTR_TARGET_CONVERTED = 0x1,ATTR_CONVERTED = 0x2,ATTR_TARGET_NOTCONVERTED = 0x3,ATTR_INPUT_ERROR = 0x4,ATTR_FIXEDCONVERTED = 0x5,};
enum MACRO_BASE {MMSYSERR_BASE = 0,WAVERR_BASE = 32,MIDIERR_BASE = 64,TIMERR_BASE = 96,JOYERR_BASE = 160,MCIERR_BASE = 256,MIXERR_BASE = 1024,};
enum MACRO_BAUD {BAUD_075 = 0x1,BAUD_110 = 0x2,BAUD_134_5 = 0x4,BAUD_150 = 0x8,BAUD_300 = 0x10,BAUD_600 = 0x20,BAUD_1200 = 0x40,BAUD_1800 = 0x80,BAUD_2400 = 0x100,BAUD_4800 = 0x200,BAUD_7200 = 0x400,BAUD_9600 = 0x800,BAUD_14400 = 0x1000,BAUD_19200 = 0x2000,BAUD_38400 = 0x4000,BAUD_56K = 0x8000,BAUD_128K = 0x10000,BAUD_115200 = 0x20000,BAUD_57600 = 0x40000,BAUD_USER = 0x10000000,};
enum MACRO_BOOL {FALSE = 0,TRUE = 1,};
enum MACRO_CADV {CADV_LATEACK = 0xFFFF,};
enum MACRO_CALG {CALG_MD2 = 32769,CALG_MD4 = 32770,CALG_MD5 = 32771,CALG_SHA = 32772,CALG_SHA1 = 32772,CALG_MAC = 32773,CALG_RSA_SIGN = 9216,CALG_DSS_SIGN = 8704,CALG_RSA_KEYX = 41984,CALG_DES = 26113,CALG_3DES_112 = 26121,CALG_3DES = 26115,CALG_DESX = 26116,CALG_RC2 = 26114,CALG_RC4 = 26625,CALG_SEAL = 26626,CALG_DH_SF = 43521,CALG_DH_EPHEM = 43522,CALG_AGREEDKEY_ANY = 43523,CALG_KEA_KEYX = 43524,CALG_HUGHES_MD5 = 40963,CALG_SKIPJACK = 26122,CALG_TEK = 26123,CALG_CYLINK_MEK = 26124,CALG_SSL3_SHAMD5 = 32776,CALG_SSL3_MASTER = 19457,CALG_SCHANNEL_MASTER_HASH = 19458,CALG_SCHANNEL_MAC_KEY = 19459,CALG_SCHANNEL_ENC_KEY = 19463,CALG_PCT1_MASTER = 19460,CALG_SSL2_MASTER = 19461,CALG_TLS1_MASTER = 19462,CALG_RC5 = 26125,CALG_HMAC = 32777,CALG_TLS1PRF = 32778,};
enum MACRO_CALL {CALL_PENDING = 0x2,};
enum MACRO_CERT {CERT_RDN_ANY_TYPE = 0,CERT_RDN_ENCODED_BLOB = 1,CERT_RDN_OCTET_STRING = 2,CERT_RDN_NUMERIC_STRING = 3,CERT_RDN_PRINTABLE_STRING = 4,CERT_RDN_TELETEX_STRING = 5,CERT_RDN_T61_STRING = 5,CERT_RDN_VIDEOTEX_STRING = 6,CERT_RDN_IA5_STRING = 7,CERT_RDN_GRAPHIC_STRING = 8,CERT_RDN_VISIBLE_STRING = 9,CERT_RDN_ISO646_STRING = 9,CERT_RDN_GENERAL_STRING = 10,CERT_RDN_UNIVERSAL_STRING = 11,CERT_RDN_INT4_STRING = 11,CERT_RDN_BMP_STRING = 12,CERT_RDN_UNICODE_STRING = 12,CERT_RDN_UTF8_STRING = 13,CERT_RDN_TYPE_MASK = 255,CERT_RDN_FLAGS_MASK = -16777216,CERT_RDN_ENABLE_T61_UNICODE_FLAG = -2147483648,CERT_RDN_ENABLE_UTF8_UNICODE_FLAG = 536870912,CERT_RDN_DISABLE_CHECK_TYPE_FLAG = 1073741824,CERT_RDN_DISABLE_IE4_UTF8_FLAG = 16777216,CERT_V1 = 0,CERT_V2 = 1,CERT_V3 = 2,CERT_INFO_VERSION_FLAG = 1,CERT_INFO_SERIAL_NUMBER_FLAG = 2,CERT_INFO_SIGNATURE_ALGORITHM_FLAG = 3,CERT_INFO_ISSUER_FLAG = 4,CERT_INFO_NOT_BEFORE_FLAG = 5,CERT_INFO_NOT_AFTER_FLAG = 6,CERT_INFO_SUBJECT_FLAG = 7,CERT_INFO_SUBJECT_PUBLIC_KEY_INFO_FLAG = 8,CERT_INFO_ISSUER_UNIQUE_ID_FLAG = 9,CERT_INFO_SUBJECT_UNIQUE_ID_FLAG = 10,CERT_INFO_EXTENSION_FLAG = 11,};
enum MACRO_CHAR {CHAR_BIT = 8,};
enum MACRO_CLIP {CLIP_DEFAULT_PRECIS = 0,CLIP_CHARACTER_PRECIS = 1,CLIP_STROKE_PRECIS = 2,CLIP_MASK = 15,CLIP_LH_ANGLES = 16,CLIP_TT_ALWAYS = 32,CLIP_EMBEDDED = 128,};
enum MACRO_CMSG {CMSG_DATA = 1,CMSG_SIGNED = 2,CMSG_ENVELOPED = 3,CMSG_SIGNED_AND_ENVELOPED = 4,CMSG_HASHED = 5,CMSG_ENCRYPTED = 6,CMSG_ALL_FLAGS = -1,CMSG_DATA_FLAG = 2,CMSG_SIGNED_FLAG = 4,CMSG_ENVELOPED_FLAG = 8,CMSG_SIGNED_AND_ENVELOPED_FLAG = 16,CMSG_HASHED_FLAG = 32,CMSG_ENCRYPTED_FLAG = 64,};
enum MACRO_COLE {COLE_DEFAULT_PRINCIPAL = 4294967295,COLE_DEFAULT_AUTHINFO = -1,};
enum MACRO_COPY {COPY_FILE_FAIL_IF_EXISTS = 0x1,COPY_FILE_RESTARTABLE = 0x2,COPY_FILE_OPEN_SOURCE_FOR_WRITE = 0x4,};
enum MACRO_CSTR {CSTR_LESS_THAN = 1,CSTR_EQUAL = 2,CSTR_GREATER_THAN = 3,};
enum MACRO_CTRL {CTRL_C_EVENT = 0,CTRL_BREAK_EVENT = 1,CTRL_CLOSE_EVENT = 2,CTRL_LOGOFF_EVENT = 5,CTRL_SHUTDOWN_EVENT = 6,};
enum MACRO_CTRY {CTRY_DEFAULT = 0,CTRY_ALBANIA = 355,CTRY_ALGERIA = 213,CTRY_ARGENTINA = 54,CTRY_ARMENIA = 374,CTRY_AUSTRALIA = 61,CTRY_AUSTRIA = 43,CTRY_AZERBAIJAN = 994,CTRY_BAHRAIN = 973,CTRY_BELARUS = 375,CTRY_BELGIUM = 32,CTRY_BELIZE = 501,CTRY_BOLIVIA = 591,CTRY_BRAZIL = 55,CTRY_BRUNEI_DARUSSALAM = 673,CTRY_BULGARIA = 359,CTRY_CANADA = 2,CTRY_CARIBBEAN = 1,CTRY_CHILE = 56,CTRY_COLOMBIA = 57,CTRY_COSTA_RICA = 506,CTRY_CROATIA = 385,CTRY_CZECH = 420,CTRY_DENMARK = 45,CTRY_DOMINICAN_REPUBLIC = 1,CTRY_ECUADOR = 593,CTRY_EGYPT = 20,CTRY_EL_SALVADOR = 503,CTRY_ESTONIA = 372,CTRY_FAEROE_ISLANDS = 298,CTRY_FINLAND = 358,CTRY_FRANCE = 33,CTRY_GEORGIA = 995,CTRY_GERMANY = 49,CTRY_GREECE = 30,CTRY_GUATEMALA = 502,CTRY_HONDURAS = 504,CTRY_HONG_KONG = 852,CTRY_HUNGARY = 36,CTRY_ICELAND = 354,CTRY_INDIA = 91,CTRY_INDONESIA = 62,CTRY_IRAN = 981,CTRY_IRAQ = 964,CTRY_IRELAND = 353,CTRY_ISRAEL = 972,CTRY_ITALY = 39,CTRY_JAMAICA = 1,CTRY_JAPAN = 81,CTRY_JORDAN = 962,CTRY_KAZAKSTAN = 7,CTRY_KENYA = 254,CTRY_KUWAIT = 965,CTRY_LATVIA = 371,CTRY_LEBANON = 961,CTRY_LIBYA = 218,CTRY_LIECHTENSTEIN = 41,CTRY_LITHUANIA = 370,CTRY_LUXEMBOURG = 352,CTRY_MACAU = 853,CTRY_MACEDONIA = 389,CTRY_MALAYSIA = 60,CTRY_MEXICO = 52,CTRY_MONACO = 33,CTRY_MOROCCO = 212,CTRY_NETHERLANDS = 31,CTRY_NEW_ZEALAND = 64,CTRY_NICARAGUA = 505,CTRY_NORWAY = 47,CTRY_OMAN = 968,CTRY_PAKISTAN = 92,CTRY_PANAMA = 507,CTRY_PARAGUAY = 595,CTRY_PERU = 51,CTRY_PHILIPPINES = 63,CTRY_POLAND = 48,CTRY_PORTUGAL = 351,CTRY_PRCHINA = 86,CTRY_PUERTO_RICO = 1,CTRY_QATAR = 974,CTRY_ROMANIA = 40,CTRY_RUSSIA = 7,CTRY_SAUDI_ARABIA = 966,CTRY_SERBIA = 381,CTRY_SINGAPORE = 65,CTRY_SLOVAK = 421,CTRY_SLOVENIA = 386,CTRY_SOUTH_AFRICA = 27,CTRY_SOUTH_KOREA = 82,CTRY_SPAIN = 34,CTRY_SWEDEN = 46,CTRY_SWITZERLAND = 41,CTRY_SYRIA = 963,CTRY_TAIWAN = 886,CTRY_TATARSTAN = 7,CTRY_THAILAND = 66,CTRY_TRINIDAD_Y_TOBAGO = 1,CTRY_TUNISIA = 216,CTRY_TURKEY = 90,CTRY_UAE = 971,CTRY_UKRAINE = 380,CTRY_UNITED_KINGDOM = 44,CTRY_UNITED_STATES = 1,CTRY_URUGUAY = 598,CTRY_UZBEKISTAN = 7,CTRY_VENEZUELA = 58,CTRY_VIET_NAM = 84,CTRY_YEMEN = 967,CTRY_ZIMBABWE = 263,};
enum MACRO_DATA {DATA_E_FIRST = 0x80040130,DATA_E_LAST = 0x8004013F,DATA_S_FIRST = 0x40130,DATA_S_LAST = 0x4013F,};
enum MACRO_DATE {DATE_SHORTDATE = 0x1,DATE_LONGDATE = 0x2,DATE_USE_ALT_CALENDAR = 0x4,DATE_YEARMONTH = 0x8,DATE_LTRREADING = 0x10,DATE_RTLREADING = 0x20,};
enum MACRO_DCBA {DCBA_FACEUPNONE = 0x0,DCBA_FACEUPCENTER = 0x1,DCBA_FACEUPLEFT = 0x2,DCBA_FACEUPRIGHT = 0x3,DCBA_FACEDOWNNONE = 0x100,DCBA_FACEDOWNCENTER = 0x101,DCBA_FACEDOWNLEFT = 0x102,DCBA_FACEDOWNRIGHT = 0x103,};
enum MACRO_DCTT {DCTT_BITMAP = 0x1,DCTT_DOWNLOAD = 0x2,DCTT_SUBDEV = 0x4,DCTT_DOWNLOAD_OUTLINE = 0x8,};
enum MACRO_DFCS {DFCS_CAPTIONCLOSE = 0x0,DFCS_CAPTIONMIN = 0x1,DFCS_CAPTIONMAX = 0x2,DFCS_CAPTIONRESTORE = 0x3,DFCS_CAPTIONHELP = 0x4,DFCS_MENUARROW = 0x0,DFCS_MENUCHECK = 0x1,DFCS_MENUBULLET = 0x2,DFCS_MENUARROWRIGHT = 0x4,DFCS_SCROLLUP = 0x0,DFCS_SCROLLDOWN = 0x1,DFCS_SCROLLLEFT = 0x2,DFCS_SCROLLRIGHT = 0x3,DFCS_SCROLLCOMBOBOX = 0x5,DFCS_SCROLLSIZEGRIP = 0x8,DFCS_SCROLLSIZEGRIPRIGHT = 0x10,DFCS_BUTTONCHECK = 0x0,DFCS_BUTTONRADIOIMAGE = 0x1,DFCS_BUTTONRADIOMASK = 0x2,DFCS_BUTTONRADIO = 0x4,DFCS_BUTTON3STATE = 0x8,DFCS_BUTTONPUSH = 0x10,DFCS_INACTIVE = 0x100,DFCS_PUSHED = 0x200,DFCS_CHECKED = 0x400,DFCS_TRANSPARENT = 0x800,DFCS_HOT = 0x1000,DFCS_ADJUSTRECT = 0x2000,DFCS_FLAT = 0x4000,DFCS_MONO = 0x8000,};
enum MACRO_DISC {DISC_UPDATE_PROFILE = 0x1,DISC_NO_FORCE = 0x40,};
enum MACRO_DISK {DISK_LOGGING_START = 0,DISK_LOGGING_STOP = 1,DISK_LOGGING_DUMP = 2,DISK_BINNING = 3,};
enum MACRO_DISP {DISP_CHANGE_SUCCESSFUL = 0,DISP_CHANGE_RESTART = 1,DISP_CHANGE_FAILED = -1,DISP_CHANGE_BADMODE = -2,DISP_CHANGE_NOTUPDATED = -3,DISP_CHANGE_BADFLAGS = -4,DISP_CHANGE_BADPARAM = -5,};
enum MACRO_DLGC {DLGC_WANTARROWS = 0x1,DLGC_WANTTAB = 0x2,DLGC_WANTALLKEYS = 0x4,DLGC_WANTMESSAGE = 0x4,DLGC_HASSETSEL = 0x8,DLGC_DEFPUSHBUTTON = 0x10,DLGC_UNDEFPUSHBUTTON = 0x20,DLGC_RADIOBUTTON = 0x40,DLGC_WANTCHARS = 0x80,DLGC_STATIC = 0x100,DLGC_BUTTON = 0x2000,};
enum MACRO_DMTT {DMTT_BITMAP = 1,DMTT_DOWNLOAD = 2,DMTT_SUBDEV = 3,DMTT_DOWNLOAD_OUTLINE = 4,};
enum MACRO_DONT {DONT_RESOLVE_DLL_REFERENCES = 0x1,};
enum MACRO_DWLP {DWLP_MSGRESULT = 0,};
enum MACRO_EDGE {EDGE_RAISED = 5,EDGE_SUNKEN = 10,EDGE_ETCHED = 6,EDGE_BUMP = 9,};
enum MACRO_ENUM {ENUM_E_FIRST = 0x800401B0,ENUM_E_LAST = 0x800401BF,ENUM_S_FIRST = 0x401B0,ENUM_S_LAST = 0x401BF,};
enum MACRO_EXIT {EXIT_SUCCESS = 0,EXIT_FAILURE = 1,};
enum MACRO_FADF {FADF_AUTO = 0x1,FADF_STATIC = 0x2,FADF_EMBEDDED = 0x4,FADF_FIXEDSIZE = 0x10,FADF_RECORD = 0x20,FADF_HAVEIID = 0x40,FADF_HAVEVARTYPE = 0x80,FADF_BSTR = 0x100,FADF_UNKNOWN = 0x200,FADF_DISPATCH = 0x400,FADF_VARIANT = 0x800,FADF_RESERVED = 0xF008,};
enum MACRO_FIEF {FIEF_FLAG_FORCE_JITUI = 0x1,FIEF_FLAG_PEEK = 0x2,FIEF_FLAG_SKIP_INSTALLED_VERSION_CHECK = 0x4,};
enum MACRO_FILE {FILE_READ_DATA = 0x1,FILE_LIST_DIRECTORY = 0x1,FILE_WRITE_DATA = 0x2,FILE_ADD_FILE = 0x2,FILE_APPEND_DATA = 0x4,FILE_ADD_SUBDIRECTORY = 0x4,FILE_CREATE_PIPE_INSTANCE = 0x4,FILE_READ_EA = 0x8,FILE_WRITE_EA = 0x10,FILE_EXECUTE = 0x20,FILE_TRAVERSE = 0x20,FILE_DELETE_CHILD = 0x40,FILE_READ_ATTRIBUTES = 0x80,FILE_WRITE_ATTRIBUTES = 0x100,FILE_ALL_ACCESS = 0x1F01FF,FILE_GENERIC_READ = 0x120089,FILE_GENERIC_WRITE = 0x120116,FILE_GENERIC_EXECUTE = 0x1200A0,FILE_SHARE_READ = 0x1,FILE_SHARE_WRITE = 0x2,FILE_SHARE_DELETE = 0x4,FILE_ATTRIBUTE_READONLY = 0x1,FILE_ATTRIBUTE_HIDDEN = 0x2,FILE_ATTRIBUTE_SYSTEM = 0x4,FILE_ATTRIBUTE_DIRECTORY = 0x10,FILE_ATTRIBUTE_ARCHIVE = 0x20,FILE_ATTRIBUTE_DEVICE = 0x40,FILE_ATTRIBUTE_NORMAL = 0x80,FILE_ATTRIBUTE_TEMPORARY = 0x100,FILE_ATTRIBUTE_SPARSE_FILE = 0x200,FILE_ATTRIBUTE_REPARSE_POINT = 0x400,FILE_ATTRIBUTE_COMPRESSED = 0x800,FILE_ATTRIBUTE_OFFLINE = 0x1000,FILE_ATTRIBUTE_NOT_CONTENT_INDEXED = 0x2000,FILE_ATTRIBUTE_ENCRYPTED = 0x4000,FILE_NOTIFY_CHANGE_FILE_NAME = 0x1,FILE_NOTIFY_CHANGE_DIR_NAME = 0x2,FILE_NOTIFY_CHANGE_ATTRIBUTES = 0x4,FILE_NOTIFY_CHANGE_SIZE = 0x8,FILE_NOTIFY_CHANGE_LAST_WRITE = 0x10,FILE_NOTIFY_CHANGE_LAST_ACCESS = 0x20,FILE_NOTIFY_CHANGE_CREATION = 0x40,FILE_NOTIFY_CHANGE_SECURITY = 0x100,FILE_ACTION_ADDED = 0x1,FILE_ACTION_REMOVED = 0x2,FILE_ACTION_MODIFIED = 0x3,FILE_ACTION_RENAMED_OLD_NAME = 0x4,FILE_ACTION_RENAMED_NEW_NAME = 0x5,};
enum MACRO_FIND {FIND_FIRST_EX_CASE_SENSITIVE = 0x1,};
enum MACRO_FMFD {FMFD_DEFAULT = 0x0,FMFD_URLASFILENAME = 0x1,};
enum MACRO_FONT {OEM_FIXED_FONT = 10,ANSI_FIXED_FONT = 11,ANSI_VAR_FONT = 12,SYSTEM_FONT = 13,DEVICE_DEFAULT_FONT = 14,};
enum MACRO_FORM {FORM_USER = 0x0,FORM_BUILTIN = 0x1,FORM_PRINTER = 0x2,};
enum MACRO_FROM {FROM_PROTOCOL_INFO = -1,};
enum MACRO_GCLP {GCLP_MENUNAME = -8,GCLP_HBRBACKGROUND = -10,GCLP_HCURSOR = -12,GCLP_HICON = -14,GCLP_HMODULE = -16,GCLP_WNDPROC = -24,GCLP_HICONSM = -34,};
enum MACRO_GHND {GHND = 66,};
enum MACRO_GMDI {GMDI_USEDISABLED = 0x1,GMDI_GOINTOPOPUPS = 0x2,};
enum MACRO_GMEM {GMEM_FIXED = 0x0,GMEM_MOVEABLE = 0x2,GMEM_NOCOMPACT = 0x10,GMEM_NODISCARD = 0x20,GMEM_ZEROINIT = 0x40,GMEM_MODIFY = 0x80,GMEM_DISCARDABLE = 0x100,GMEM_NOT_BANKED = 0x1000,GMEM_SHARE = 0x2000,GMEM_DDESHARE = 0x2000,GMEM_NOTIFY = 0x4000,GMEM_LOWER = 0x1000,GMEM_VALID_FLAGS = 0x7F72,GMEM_INVALID_HANDLE = 0x8000,};
enum MACRO_GMMP {GMMP_USE_DISPLAY_POINTS = 1,GMMP_USE_HIGH_RESOLUTION_POINTS = 2,};
enum MACRO_GPTR {GPTR = 64,};
enum MACRO_GWLP {GWLP_WNDPROC = -4,GWLP_HINSTANCE = -6,GWLP_HWNDPARENT = -8,GWLP_USERDATA = -21,GWLP_ID = -12,};
enum MACRO_HCBT {HCBT_MOVESIZE = 0,HCBT_MINMAX = 1,HCBT_QS = 2,HCBT_CREATEWND = 3,HCBT_DESTROYWND = 4,HCBT_ACTIVATE = 5,HCBT_CLICKSKIPPED = 6,HCBT_KEYSKIPPED = 7,HCBT_SYSCOMMAND = 8,HCBT_SETFOCUS = 9,};
enum MACRO_HCCE {HCCE_CURRENT_USER = 0,HCCE_LOCAL_MACHINE = 1,};
enum MACRO_HEAP {HEAP_NO_SERIALIZE = 0x1,HEAP_GROWABLE = 0x2,HEAP_GENERATE_EXCEPTIONS = 0x4,HEAP_ZERO_MEMORY = 0x8,HEAP_REALLOC_IN_PLACE_ONLY = 0x10,HEAP_TAIL_CHECKING_ENABLED = 0x20,HEAP_FREE_CHECKING_ENABLED = 0x40,HEAP_DISABLE_COALESCE_ON_FREE = 0x80,HEAP_CREATE_ALIGN_16 = 0x10000,HEAP_CREATE_ENABLE_TRACING = 0x20000,HEAP_MAXIMUM_TAG = 0xFFF,HEAP_PSEUDO_TAG_FLAG = 0x8000,HEAP_TAG_SHIFT = 0x12,};
enum MACRO_HELP {HELP_CONTEXT = 0x1,HELP_QUIT = 0x2,HELP_INDEX = 0x3,HELP_CONTENTS = 0x3,HELP_HELPONHELP = 0x4,HELP_SETINDEX = 0x5,HELP_SETCONTENTS = 0x5,HELP_CONTEXTPOPUP = 0x8,HELP_FORCEFILE = 0x9,HELP_KEY = 0x101,HELP_COMMAND = 0x102,HELP_PARTIALKEY = 0x105,HELP_MULTIKEY = 0x201,HELP_SETWINPOS = 0x203,HELP_CONTEXTMENU = 0xA,HELP_FINDER = 0xB,HELP_WM_HELP = 0xC,HELP_SETPOPUP_POS = 0xD,HELP_TCARD = 0x8000,HELP_TCARD_DATA = 0x10,HELP_TCARD_OTHER_CALLER = 0x11,};
enum MACRO_HIDE {HIDE_WINDOW = 0,};
enum MACRO_HIST {HIST_NO_OF_BUCKETS = 24,};
enum MACRO_HKEY {HKEY_CLASSES_ROOT = 0x80000000,HKEY_CURRENT_USER = 0x80000001,HKEY_LOCAL_MACHINE = 0x80000002,HKEY_USERS = 0x80000003,HKEY_PERFORMANCE_DATA = 0x80000004,HKEY_CURRENT_CONFIG = 0x80000005,HKEY_DYN_DATA = 0x80000006,};
enum MACRO_HOST {HOST_NOT_FOUND = 11001,};
enum MACRO_HWND {HWND_BROADCAST = 0xFFFF,HWND_MESSAGE = 0xFFFFFFFD,};
enum MACRO_IACE {IACE_CHILDREN = 0x1,IACE_DEFAULT = 0x10,IACE_IGNORENOCONTEXT = 0x20,};
enum MACRO_ICON {ICON_SMALL = 0,ICON_BIG = 1,};
enum MACRO_IDNO {IDNO = 7,IDCLOSE = 8,};
enum MACRO_IDOK {IDOK = 1,IDCANCEL = 2,};
enum MACRO_IEEE {IEEE = 1,};
enum MACRO_IMFS {IMFS_GRAYED = 3,IMFS_DISABLED = 3,IMFS_CHECKED = 8,IMFS_HILITE = 128,IMFS_ENABLED = 0,IMFS_UNCHECKED = 0,IMFS_UNHILITE = 0,IMFS_DEFAULT = 4096,};
enum MACRO_IMFT {IMFT_RADIOCHECK = 0x1,IMFT_SEPARATOR = 0x2,IMFT_SUBMENU = 0x4,};
enum MACRO_INCL {INCL_WINSOCK_API_PROTOTYPES = 1,INCL_WINSOCK_API_TYPEDEFS = 0,};
enum MACRO_INET {INET_E_ERROR_LAST = -2146697193,};
enum MACRO_INFO {X942_OTHER_INFO = 52,PKCS7_SIGNER_INFO = 500,CMS_SIGNER_INFO = 501,};
enum MACRO_LANG {LANG_NEUTRAL = 0x0,LANG_AFRIKAANS = 0x36,LANG_ALBANIAN = 0x1C,LANG_ARABIC = 0x1,LANG_ARMENIAN = 0x2B,LANG_ASSAMESE = 0x4D,LANG_AZERI = 0x2C,LANG_BASQUE = 0x2D,LANG_BELARUSIAN = 0x23,LANG_BENGALI = 0x45,LANG_BULGARIAN = 0x2,LANG_CATALAN = 0x3,LANG_CHINESE = 0x4,LANG_CROATIAN = 0x1A,LANG_CZECH = 0x5,LANG_DANISH = 0x6,LANG_DUTCH = 0x13,LANG_ENGLISH = 0x9,LANG_ESTONIAN = 0x25,LANG_FAEROESE = 0x38,LANG_FARSI = 0x29,LANG_FINNISH = 0xB,LANG_FRENCH = 0xC,LANG_GEORGIAN = 0x37,LANG_GERMAN = 0x7,LANG_GREEK = 0x8,LANG_GUJARATI = 0x47,LANG_HEBREW = 0xD,LANG_HINDI = 0x39,LANG_HUNGARIAN = 0xE,LANG_ICELANDIC = 0xF,LANG_INDONESIAN = 0x21,LANG_ITALIAN = 0x10,LANG_JAPANESE = 0x11,LANG_KANNADA = 0x4B,LANG_KASHMIRI = 0x60,LANG_KAZAK = 0x3F,LANG_KONKANI = 0x57,LANG_KOREAN = 0x12,LANG_LATVIAN = 0x26,LANG_LITHUANIAN = 0x27,LANG_MACEDONIAN = 0x2F,LANG_MALAY = 0x3E,LANG_MALAYALAM = 0x4C,LANG_MANIPURI = 0x58,LANG_MARATHI = 0x4E,LANG_NEPALI = 0x61,LANG_NORWEGIAN = 0x14,LANG_ORIYA = 0x48,LANG_POLISH = 0x15,LANG_PORTUGUESE = 0x16,LANG_PUNJABI = 0x46,LANG_ROMANIAN = 0x18,LANG_RUSSIAN = 0x19,LANG_SANSKRIT = 0x4F,LANG_SERBIAN = 0x1A,LANG_SINDHI = 0x59,LANG_SLOVAK = 0x1B,LANG_SLOVENIAN = 0x24,LANG_SPANISH = 0xA,LANG_SWAHILI = 0x41,LANG_SWEDISH = 0x1D,LANG_TAMIL = 0x49,LANG_TATAR = 0x44,LANG_TELUGU = 0x4A,LANG_THAI = 0x1E,LANG_TURKISH = 0x1F,LANG_UKRAINIAN = 0x22,LANG_URDU = 0x20,LANG_UZBEK = 0x43,LANG_VIETNAMESE = 0x2A,};
enum MACRO_LCID {LCID_INSTALLED = 0x1,LCID_SUPPORTED = 0x2,LCID_ALTERNATE_SORTS = 0x4,};
enum MACRO_LHND {LHND = 66,};
enum MACRO_LMEM {LMEM_FIXED = 0x0,LMEM_MOVEABLE = 0x2,LMEM_NOCOMPACT = 0x10,LMEM_NODISCARD = 0x20,LMEM_ZEROINIT = 0x40,LMEM_MODIFY = 0x80,LMEM_DISCARDABLE = 0xF00,LMEM_VALID_FLAGS = 0xF72,LMEM_INVALID_HANDLE = 0x8000,};
enum MACRO_LOAD {LOAD_LIBRARY_AS_DATAFILE = 0x2,LOAD_WITH_ALTERED_SEARCH_PATH = 0x8,};
enum MACRO_LOCK {LOCK_UNLOCK_IEPORT = 0x1,LOCK_UNLOCK_DOOR = 0x2,LOCK_UNLOCK_KEYPAD = 0x4,LOCK_ELEMENT = 0x0,};
enum MACRO_LONG {LONG_MIN = -2147483648,LONG_MAX = 2147483647,};
enum MACRO_LPTR {LPTR = 64,};
enum MACRO_LPTx {LPTx = 0x80,};
enum MACRO_LSFW {LSFW_LOCK = 1,LSFW_UNLOCK = 2,};
enum MACRO_MDIS {MDIS_ALLCHILDSTYLES = 0x1,};
enum MACRO_META {META_SETBKCOLOR = 0x201,META_SETBKMODE = 0x102,META_SETMAPMODE = 0x103,META_SETROP2 = 0x104,META_SETRELABS = 0x105,META_SETPOLYFILLMODE = 0x106,META_SETSTRETCHBLTMODE = 0x107,META_SETTEXTCHAREXTRA = 0x108,META_SETTEXTCOLOR = 0x209,META_SETTEXTJUSTIFICATION = 0x20A,META_SETWINDOWORG = 0x20B,META_SETWINDOWEXT = 0x20C,META_SETVIEWPORTORG = 0x20D,META_SETVIEWPORTEXT = 0x20E,META_OFFSETWINDOWORG = 0x20F,META_SCALEWINDOWEXT = 0x410,META_OFFSETVIEWPORTORG = 0x211,META_SCALEVIEWPORTEXT = 0x412,META_LINETO = 0x213,META_MOVETO = 0x214,META_EXCLUDECLIPRECT = 0x415,META_INTERSECTCLIPRECT = 0x416,META_ARC = 0x817,META_ELLIPSE = 0x418,META_FLOODFILL = 0x419,META_PIE = 0x81A,META_RECTANGLE = 0x41B,META_ROUNDRECT = 0x61C,META_PATBLT = 0x61D,META_SAVEDC = 0x1E,META_SETPIXEL = 0x41F,META_OFFSETCLIPRGN = 0x220,META_TEXTOUT = 0x521,META_BITBLT = 0x922,META_STRETCHBLT = 0xB23,META_POLYGON = 0x324,META_POLYLINE = 0x325,META_ESCAPE = 0x626,META_RESTOREDC = 0x127,META_FILLREGION = 0x228,META_FRAMEREGION = 0x429,META_INVERTREGION = 0x12A,META_PAINTREGION = 0x12B,META_SELECTCLIPREGION = 0x12C,META_SELECTOBJECT = 0x12D,META_SETTEXTALIGN = 0x12E,META_CHORD = 0x830,META_SETMAPPERFLAGS = 0x231,META_EXTTEXTOUT = 0xA32,META_SETDIBTODEV = 0xD33,META_SELECTPALETTE = 0x234,META_REALIZEPALETTE = 0x35,META_ANIMATEPALETTE = 0x436,META_SETPALENTRIES = 0x37,META_POLYPOLYGON = 0x538,META_RESIZEPALETTE = 0x139,META_DIBBITBLT = 0x940,META_DIBSTRETCHBLT = 0xB41,META_DIBCREATEPATTERNBRUSH = 0x142,META_STRETCHDIB = 0xF43,META_EXTFLOODFILL = 0x548,META_SETLAYOUT = 0x149,META_DELETEOBJECT = 0x1F0,META_CREATEPALETTE = 0xF7,META_CREATEPATTERNBRUSH = 0x1F9,META_CREATEPENINDIRECT = 0x2FA,META_CREATEFONTINDIRECT = 0x2FB,META_CREATEBRUSHINDIRECT = 0x2FC,META_CREATEREGION = 0x6FF,};
enum MACRO_MEVT {MEVT_F_SHORT = 0x0,MEVT_F_LONG = 0x80000000,MEVT_F_CALLBACK = 0x40000000,MEVT_SHORTMSG = 0x0,MEVT_TEMPO = 0x1,MEVT_NOP = 0x2,MEVT_LONGMSG = 0x80,MEVT_COMMENT = 0x82,MEVT_VERSION = 0x84,};
enum MACRO_MHDR {MHDR_DONE = 0x1,MHDR_PREPARED = 0x2,MHDR_INQUEUE = 0x4,MHDR_ISSTRM = 0x8,};
enum MACRO_MIDI {MIDI_MAPPER = 4294967295,MIDI_IO_STATUS = 32,MIDI_CACHE_ALL = 1,MIDI_CACHE_BESTFIT = 2,MIDI_CACHE_QUERY = 3,MIDI_UNCACHE = 4,};
enum MACRO_MIIM {MIIM_STATE = 0x1,MIIM_ID = 0x2,MIIM_SUBMENU = 0x4,MIIM_CHECKMARKS = 0x8,MIIM_TYPE = 0x10,MIIM_DATA = 0x20,MIIM_STRING = 0x40,MIIM_BITMAP = 0x80,MIIM_FTYPE = 0x100,};
enum MACRO_MMIO {MMIO_RWMODE = 0x3,MMIO_SHAREMODE = 0x70,MMIO_CREATE = 0x1000,MMIO_PARSE = 0x100,MMIO_DELETE = 0x200,MMIO_EXIST = 0x4000,MMIO_ALLOCBUF = 0x10000,MMIO_GETTEMP = 0x20000,MMIO_DIRTY = 0x10000000,MMIO_READ = 0x0,MMIO_WRITE = 0x1,MMIO_READWRITE = 0x2,MMIO_COMPAT = 0x0,MMIO_EXCLUSIVE = 0x10,MMIO_DENYWRITE = 0x20,MMIO_DENYREAD = 0x30,MMIO_DENYNONE = 0x40,MMIO_FHOPEN = 0x10,MMIO_EMPTYBUF = 0x10,MMIO_TOUPPER = 0x10,MMIO_INSTALLPROC = 0x10000,MMIO_GLOBALPROC = 0x10000000,MMIO_REMOVEPROC = 0x20000,MMIO_UNICODEPROC = 0x1000000,MMIO_FINDPROC = 0x40000,MMIO_FINDCHUNK = 0x10,MMIO_FINDRIFF = 0x20,MMIO_FINDLIST = 0x40,MMIO_CREATERIFF = 0x20,MMIO_CREATELIST = 0x40,};
enum MACRO_MNGO {MNGO_NOINTERFACE = 0x0,MNGO_NOERROR = 0x1,};
enum MACRO_MODE {DOS_MODE = 0,OS2_MODE = 1,_WIN_MODE = 2,_OS2_20_MODE = 3,_DOSX32_MODE = 4,};
enum MACRO_MONO {MONO_FONT = 8,};
enum MACRO_MSGF {MSGF_DIALOGBOX = 0,MSGF_MESSAGEBOX = 1,MSGF_MENU = 2,MSGF_SCROLLBAR = 5,MSGF_NEXTWINDOW = 6,MSGF_MAX = 8,MSGF_USER = 4096,};
enum MACRO_MUTZ {MUTZ_NOSAVEDFILECHECK = 0x1,};
enum MACRO_MWMO {MWMO_WAITALL = 0x1,MWMO_ALERTABLE = 0x2,MWMO_INPUTAVAILABLE = 0x4,};
enum MACRO_NAME {NAME_FLAGS_MASK = 0x87,};
enum MACRO_NORM {NORM_IGNORECASE = 0x1,NORM_IGNORENONSPACE = 0x2,NORM_IGNORESYMBOLS = 0x4,NORM_IGNOREKANATYPE = 0x10000,NORM_IGNOREWIDTH = 0x20000,};
enum MACRO_NSIG {NSIG = 23,};
enum MACRO_NTFT {VALID_NTFT = 0xC0,PARTITION_NTFT = 0x80,};
enum MACRO_NULL {NULL = 0,};
enum MACRO_OPEN {OPEN_EXISTING = 3,OPEN_ALWAYS = 4,};
enum MACRO_PAGE {PAGE_NOACCESS = 0x1,PAGE_READONLY = 0x2,PAGE_READWRITE = 0x4,PAGE_WRITECOPY = 0x8,PAGE_EXECUTE = 0x10,PAGE_EXECUTE_READ = 0x20,PAGE_EXECUTE_READWRITE = 0x40,PAGE_EXECUTE_WRITECOPY = 0x80,PAGE_GUARD = 0x100,PAGE_NOCACHE = 0x200,PAGE_WRITECOMBINE = 0x400,};
enum MACRO_PASS {PASS_MAX = 8,};
enum MACRO_PATH {BEGIN_PATH = 4096,CLIP_TO_PATH = 4097,END_PATH = 4098,};
enum MACRO_PBTF {PBTF_APMRESUMEFROMFAILURE = 0x1,};
enum MACRO_PERF {PERF_DATA_VERSION = 1,PERF_DATA_REVISION = 1,PERF_NO_INSTANCES = -1,PERF_SIZE_DWORD = 0,PERF_SIZE_LARGE = 256,PERF_SIZE_ZERO = 512,PERF_SIZE_VARIABLE_LEN = 768,PERF_TYPE_NUMBER = 0,PERF_TYPE_COUNTER = 1024,PERF_TYPE_TEXT = 2048,PERF_TYPE_ZERO = 3072,PERF_NUMBER_HEX = 0,PERF_NUMBER_DECIMAL = 65536,PERF_NUMBER_DEC_1000 = 131072,PERF_COUNTER_VALUE = 0,PERF_COUNTER_RATE = 65536,PERF_COUNTER_FRACTION = 131072,PERF_COUNTER_BASE = 196608,PERF_COUNTER_ELAPSED = 262144,PERF_COUNTER_QUEUELEN = 327680,PERF_COUNTER_HISTOGRAM = 393216,PERF_COUNTER_PRECISION = 458752,PERF_TEXT_UNICODE = 0,PERF_TEXT_ASCII = 65536,PERF_TIMER_TICK = 0,PERF_TIMER_100NS = 1048576,PERF_OBJECT_TIMER = 2097152,PERF_DELTA_COUNTER = 4194304,PERF_DELTA_BASE = 8388608,PERF_INVERSE_COUNTER = 16777216,PERF_MULTI_COUNTER = 33554432,PERF_DISPLAY_NO_SUFFIX = 0,PERF_DISPLAY_PER_SEC = 268435456,PERF_DISPLAY_PERCENT = 536870912,PERF_DISPLAY_SECONDS = 805306368,PERF_DISPLAY_NOSHOW = 1073741824,PERF_COUNTER_COUNTER = 272696320,PERF_COUNTER_TIMER = 541132032,PERF_COUNTER_QUEUELEN_TYPE = 4523008,PERF_COUNTER_LARGE_QUEUELEN_TYPE = 4523264,PERF_COUNTER_100NS_QUEUELEN_TYPE = 5571840,PERF_COUNTER_OBJ_TIME_QUEUELEN_TYPE = 6620416,PERF_COUNTER_BULK_COUNT = 272696576,PERF_COUNTER_TEXT = 2816,PERF_COUNTER_RAWCOUNT = 65536,PERF_COUNTER_LARGE_RAWCOUNT = 65792,PERF_COUNTER_RAWCOUNT_HEX = 0,PERF_COUNTER_LARGE_RAWCOUNT_HEX = 256,PERF_SAMPLE_FRACTION = 549585920,PERF_SAMPLE_COUNTER = 4260864,PERF_COUNTER_NODATA = 1073742336,PERF_COUNTER_TIMER_INV = 557909248,PERF_SAMPLE_BASE = 1073939457,PERF_AVERAGE_TIMER = 805438464,PERF_AVERAGE_BASE = 1073939458,PERF_AVERAGE_BULK = 1073874176,PERF_OBJ_TIME_TIMER = 543229184,PERF_100NSEC_TIMER = 542180608,PERF_100NSEC_TIMER_INV = 558957824,PERF_COUNTER_MULTI_TIMER = 574686464,PERF_COUNTER_MULTI_TIMER_INV = 591463680,PERF_COUNTER_MULTI_BASE = 1107494144,PERF_100NSEC_MULTI_TIMER = 575735040,PERF_100NSEC_MULTI_TIMER_INV = 592512256,PERF_RAW_FRACTION = 537003008,PERF_LARGE_RAW_FRACTION = 537003264,PERF_RAW_BASE = 1073939459,PERF_LARGE_RAW_BASE = 1073939712,PERF_ELAPSED_TIME = 807666944,PERF_COUNTER_HISTOGRAM_TYPE = -2147483648,PERF_COUNTER_DELTA = 4195328,PERF_COUNTER_LARGE_DELTA = 4195584,PERF_PRECISION_SYSTEM_TIMER = 541525248,PERF_PRECISION_100NS_TIMER = 542573824,PERF_PRECISION_OBJECT_TIMER = 543622400,PERF_PRECISION_TIMESTAMP = 1073939712,PERF_DETAIL_NOVICE = 100,PERF_DETAIL_ADVANCED = 200,PERF_DETAIL_EXPERT = 300,PERF_DETAIL_WIZARD = 400,PERF_NO_UNIQUE_ID = -1,PERF_QUERY_OBJECTS = -2147483648,PERF_QUERY_GLOBAL = -2147483647,PERF_QUERY_COSTLY = -2147483646,};
enum MACRO_PIPE {PIPE_ACCESS_INBOUND = 0x1,PIPE_ACCESS_OUTBOUND = 0x2,PIPE_ACCESS_DUPLEX = 0x3,PIPE_CLIENT_END = 0x0,PIPE_SERVER_END = 0x1,PIPE_WAIT = 0x0,PIPE_NOWAIT = 0x1,PIPE_READMODE_BYTE = 0x0,PIPE_READMODE_MESSAGE = 0x2,PIPE_TYPE_BYTE = 0x0,PIPE_TYPE_MESSAGE = 0x4,PIPE_UNLIMITED_INSTANCES = 0xFF,};
enum MACRO_PKCS {PKCS_7_ASN_ENCODING = 0x10000,PKCS_7_NDR_ENCODING = 0x20000,};
enum MACRO_PORT {PORT_TYPE_WRITE = 0x1,PORT_TYPE_READ = 0x2,PORT_TYPE_REDIRECTED = 0x4,PORT_TYPE_NET_ATTACHED = 0x8,PORT_STATUS_TYPE_ERROR = 0x1,PORT_STATUS_TYPE_WARNING = 0x2,PORT_STATUS_TYPE_INFO = 0x3,PORT_STATUS_OFFLINE = 0x1,PORT_STATUS_PAPER_JAM = 0x2,PORT_STATUS_PAPER_OUT = 0x3,PORT_STATUS_OUTPUT_BIN_FULL = 0x4,PORT_STATUS_PAPER_PROBLEM = 0x5,PORT_STATUS_NO_TONER = 0x6,PORT_STATUS_DOOR_OPEN = 0x7,PORT_STATUS_USER_INTERVENTION = 0x8,PORT_STATUS_OUT_OF_MEMORY = 0x9,PORT_STATUS_TONER_LOW = 0xA,PORT_STATUS_WARMING_UP = 0xB,PORT_STATUS_POWER_SAVE = 0xC,};
enum MACRO_PROP {PROP_SM_CXDLG = 212,PROP_SM_CYDLG = 188,PROP_MED_CXDLG = 227,PROP_MED_CYDLG = 215,PROP_LG_CXDLG = 252,PROP_LG_CYDLG = 218,};
enum MACRO_PROV {PROV_RSA_FULL = 1,PROV_RSA_SIG = 2,PROV_DSS = 3,PROV_FORTEZZA = 4,PROV_MS_EXCHANGE = 5,PROV_SSL = 6,PROV_RSA_SCHANNEL = 12,PROV_DSS_DH = 13,PROV_EC_ECDSA_SIG = 14,PROV_EC_ECNRA_SIG = 15,PROV_EC_ECDSA_FULL = 16,PROV_EC_ECNRA_FULL = 17,PROV_DH_SCHANNEL = 18,PROV_SPYRUS_LYNKS = 20,PROV_RNG = 21,PROV_INTEL_SEC = 22,PROV_STT_MER = 7,PROV_STT_ACQ = 8,PROV_STT_BRND = 9,PROV_STT_ROOT = 10,PROV_STT_ISS = 11,};
enum MACRO_PSCB {PSCB_INITIALIZED = 1,PSCB_PRECREATE = 2,};
enum MACRO_READ {READ_CONTROL = 0x20000,};
enum MACRO_SAVE {SAVE_ATTRIBUTE_VALUES = 0xD3,};
enum MACRO_SEEK {SEEK_CUR = 1,SEEK_END = 2,SEEK_SET = 0,};
enum MACRO_SEGV {SEGV_BOUND = 10,SEGV_EXPLICITGEN = 11,SEGV_ACCESS = 12,SEGV_STACK = 13,};
enum MACRO_SHOW {SHOW_OPENWINDOW = 1,SHOW_ICONWINDOW = 2,SHOW_FULLSCREEN = 3,SHOW_OPENNOACTIVATE = 4,};
enum MACRO_SHRT {SHRT_MIN = -32768,SHRT_MAX = 32767,};
enum MACRO_SIZE {SIZE_OF_80387_REGISTERS = 80,};
enum MACRO_SMTO {SMTO_NORMAL = 0x0,SMTO_BLOCK = 0x1,SMTO_ABORTIFHUNG = 0x2,SMTO_NOTIMEOUTIFNOTHUNG = 0x8,};
enum MACRO_SOCK {SOCK_STREAM = 1,SOCK_DGRAM = 2,SOCK_RAW = 3,SOCK_RDM = 4,SOCK_SEQPACKET = 5,};
enum MACRO_SORT {SORT_DEFAULT = 0x0,SORT_JAPANESE_XJIS = 0x0,SORT_JAPANESE_UNICODE = 0x1,SORT_CHINESE_BIG5 = 0x0,SORT_CHINESE_PRCP = 0x0,SORT_CHINESE_UNICODE = 0x1,SORT_CHINESE_PRC = 0x2,SORT_CHINESE_BOPOMOFO = 0x3,SORT_KOREAN_KSC = 0x0,SORT_KOREAN_UNICODE = 0x1,SORT_GERMAN_PHONE_BOOK = 0x1,SORT_HUNGARIAN_DEFAULT = 0x0,SORT_HUNGARIAN_TECHNICAL = 0x1,SORT_GEORGIAN_TRADITIONAL = 0x0,SORT_GEORGIAN_MODERN = 0x1,};
enum MACRO_SPIF {SPIF_UPDATEINIFILE = 0x1,SPIF_SENDWININICHANGE = 0x2,SPIF_SENDCHANGE = 0x2,};
enum MACRO_SSGF {SSGF_NONE = 0,SSGF_DISPLAY = 3,};
enum MACRO_SSTF {SSTF_NONE = 0,SSTF_CHARS = 1,SSTF_BORDER = 2,SSTF_DISPLAY = 3,};
enum MACRO_SSWF {SSWF_NONE = 0,SSWF_TITLE = 1,SSWF_WINDOW = 2,SSWF_DISPLAY = 3,SSWF_CUSTOM = 4,};
enum MACRO_STGM {STGM_DIRECT = 0x0,STGM_TRANSACTED = 0x10000,STGM_SIMPLE = 0x8000000,STGM_READ = 0x0,STGM_WRITE = 0x1,STGM_READWRITE = 0x2,STGM_SHARE_DENY_NONE = 0x40,STGM_SHARE_DENY_READ = 0x30,STGM_SHARE_DENY_WRITE = 0x20,STGM_SHARE_EXCLUSIVE = 0x10,STGM_PRIORITY = 0x40000,STGM_DELETEONRELEASE = 0x4000000,STGM_NOSCRATCH = 0x100000,STGM_CREATE = 0x1000,STGM_CONVERT = 0x20000,STGM_FAILIFTHERE = 0x0,STGM_NOSNAPSHOT = 0x200000,STGM_DIRECT_SWMR = 0x400000,};
enum MACRO_S_OK {S_OK = 0x0,S_FALSE = 0x1,};
enum MACRO_TAPE {TAPE_ERASE_SHORT = 0,TAPE_ERASE_LONG = 1,TAPE_LOAD = 0,TAPE_UNLOAD = 1,TAPE_TENSION = 2,TAPE_LOCK = 3,TAPE_UNLOCK = 4,TAPE_FORMAT = 5,TAPE_SETMARKS = 0,TAPE_FILEMARKS = 1,TAPE_SHORT_FILEMARKS = 2,TAPE_LONG_FILEMARKS = 3,TAPE_ABSOLUTE_POSITION = 0,TAPE_LOGICAL_POSITION = 1,TAPE_PSEUDO_LOGICAL_POSITION = 2,TAPE_REWIND = 0,TAPE_ABSOLUTE_BLOCK = 1,TAPE_LOGICAL_BLOCK = 2,TAPE_PSEUDO_LOGICAL_BLOCK = 3,TAPE_SPACE_END_OF_DATA = 4,TAPE_SPACE_RELATIVE_BLOCKS = 5,TAPE_SPACE_FILEMARKS = 6,TAPE_SPACE_SEQUENTIAL_FMKS = 7,TAPE_SPACE_SETMARKS = 8,TAPE_SPACE_SEQUENTIAL_SMKS = 9,TAPE_DRIVE_FIXED = 1,TAPE_DRIVE_SELECT = 2,TAPE_DRIVE_INITIATOR = 4,TAPE_DRIVE_ERASE_SHORT = 16,TAPE_DRIVE_ERASE_LONG = 32,TAPE_DRIVE_ERASE_BOP_ONLY = 64,TAPE_DRIVE_ERASE_IMMEDIATE = 128,TAPE_DRIVE_TAPE_CAPACITY = 256,TAPE_DRIVE_TAPE_REMAINING = 512,TAPE_DRIVE_FIXED_BLOCK = 1024,TAPE_DRIVE_VARIABLE_BLOCK = 2048,TAPE_DRIVE_WRITE_PROTECT = 4096,TAPE_DRIVE_EOT_WZ_SIZE = 8192,TAPE_DRIVE_ECC = 65536,TAPE_DRIVE_COMPRESSION = 131072,TAPE_DRIVE_PADDING = 262144,TAPE_DRIVE_REPORT_SMKS = 524288,TAPE_DRIVE_GET_ABSOLUTE_BLK = 1048576,TAPE_DRIVE_GET_LOGICAL_BLK = 2097152,TAPE_DRIVE_SET_EOT_WZ_SIZE = 4194304,TAPE_DRIVE_EJECT_MEDIA = 16777216,TAPE_DRIVE_CLEAN_REQUESTS = 33554432,TAPE_DRIVE_SET_CMP_BOP_ONLY = 67108864,TAPE_DRIVE_RESERVED_BIT = -2147483648,TAPE_DRIVE_LOAD_UNLOAD = -2147483647,TAPE_DRIVE_TENSION = -2147483646,TAPE_DRIVE_LOCK_UNLOCK = -2147483644,TAPE_DRIVE_REWIND_IMMEDIATE = -2147483640,TAPE_DRIVE_SET_BLOCK_SIZE = -2147483632,TAPE_DRIVE_LOAD_UNLD_IMMED = -2147483616,TAPE_DRIVE_TENSION_IMMED = -2147483584,TAPE_DRIVE_LOCK_UNLK_IMMED = -2147483520,TAPE_DRIVE_SET_ECC = -2147483392,TAPE_DRIVE_SET_COMPRESSION = -2147483136,TAPE_DRIVE_SET_PADDING = -2147482624,TAPE_DRIVE_SET_REPORT_SMKS = -2147481600,TAPE_DRIVE_ABSOLUTE_BLK = -2147479552,TAPE_DRIVE_ABS_BLK_IMMED = -2147475456,TAPE_DRIVE_LOGICAL_BLK = -2147467264,TAPE_DRIVE_LOG_BLK_IMMED = -2147450880,TAPE_DRIVE_END_OF_DATA = -2147418112,TAPE_DRIVE_RELATIVE_BLKS = -2147352576,TAPE_DRIVE_FILEMARKS = -2147221504,TAPE_DRIVE_SEQUENTIAL_FMKS = -2146959360,TAPE_DRIVE_SETMARKS = -2146435072,TAPE_DRIVE_SEQUENTIAL_SMKS = -2145386496,TAPE_DRIVE_REVERSE_POSITION = -2143289344,TAPE_DRIVE_SPACE_IMMEDIATE = -2139095040,TAPE_DRIVE_WRITE_SETMARKS = -2130706432,TAPE_DRIVE_WRITE_FILEMARKS = -2113929216,TAPE_DRIVE_WRITE_SHORT_FMKS = -2080374784,TAPE_DRIVE_WRITE_LONG_FMKS = -2013265920,TAPE_DRIVE_WRITE_MARK_IMMED = -1879048192,TAPE_DRIVE_FORMAT = -1610612736,TAPE_DRIVE_FORMAT_IMMEDIATE = -1073741824,TAPE_DRIVE_HIGH_FEATURES = -2147483648,TAPE_FIXED_PARTITIONS = 0,TAPE_SELECT_PARTITIONS = 1,TAPE_INITIATOR_PARTITIONS = 2,};
enum MACRO_TIME {TIME_ZONE_ID_UNKNOWN = 0,TIME_ZONE_ID_STANDARD = 1,TIME_ZONE_ID_DAYLIGHT = 2,};
enum MACRO_TMPF {TMPF_FIXED_PITCH = 0x1,TMPF_VECTOR = 0x2,TMPF_DEVICE = 0x8,TMPF_TRUETYPE = 0x4,};
enum MACRO_UINT {UINT_MAX = -1,};
enum MACRO_UISF {UISF_HIDEFOCUS = 0x1,UISF_HIDEACCEL = 0x2,};
enum MACRO_USER {USER_MARSHAL_CB_SIGNATURE = 1431523907,USER_CALL_IS_ASYNC = 256,USER_CALL_NEW_CORRELATION_DESC = 512,USER_MARSHAL_FC_BYTE = 1,USER_MARSHAL_FC_CHAR = 2,USER_MARSHAL_FC_SMALL = 3,USER_MARSHAL_FC_USMALL = 4,USER_MARSHAL_FC_WCHAR = 5,USER_MARSHAL_FC_SHORT = 6,USER_MARSHAL_FC_USHORT = 7,USER_MARSHAL_FC_LONG = 8,USER_MARSHAL_FC_ULONG = 9,USER_MARSHAL_FC_FLOAT = 10,USER_MARSHAL_FC_HYPER = 11,USER_MARSHAL_FC_DOUBLE = 12,};
enum MACRO_VFFF {VFFF_ISSHAREDFILE = 0x1,};
enum MACRO_VFT2 {VFT2_UNKNOWN = 0x0,VFT2_DRV_PRINTER = 0x1,VFT2_DRV_KEYBOARD = 0x2,VFT2_DRV_LANGUAGE = 0x3,VFT2_DRV_DISPLAY = 0x4,VFT2_DRV_MOUSE = 0x5,VFT2_DRV_NETWORK = 0x6,VFT2_DRV_SYSTEM = 0x7,VFT2_DRV_INSTALLABLE = 0x8,VFT2_DRV_SOUND = 0x9,VFT2_DRV_COMM = 0xA,VFT2_DRV_INPUTMETHOD = 0xB,VFT2_FONT_RASTER = 0x1,VFT2_FONT_VECTOR = 0x2,VFT2_FONT_TRUETYPE = 0x3,};
enum MACRO_VIEW {VIEW_E_FIRST = 0x80040140,VIEW_E_LAST = 0x8004014F,VIEW_S_FIRST = 0x40140,VIEW_S_LAST = 0x4014F,};
enum MACRO_VIFF {VIFF_FORCEINSTALL = 0x1,VIFF_DONTDELETEOLD = 0x2,};
enum MACRO_WAIT {WAIT_CHILD = 0,WAIT_GRANDCHILD = 1,};
enum MACRO_WAVE {WAVE_MAPPER = 4294967295,WAVE_FORMAT_QUERY = 1,WAVE_ALLOWSYNC = 2,WAVE_MAPPED = 4,WAVE_FORMAT_DIRECT = 8,WAVE_FORMAT_DIRECT_QUERY = 9,};
enum MACRO_WEOF {WEOF = 0xFFFF,};
enum MACRO_WHDR {WHDR_DONE = 0x1,WHDR_PREPARED = 0x2,WHDR_BEGINLOOP = 0x4,WHDR_ENDLOOP = 0x8,WHDR_INQUEUE = 0x10,};
enum MACRO_WMSZ {WMSZ_LEFT = 1,WMSZ_RIGHT = 2,WMSZ_TOP = 3,WMSZ_TOPLEFT = 4,WMSZ_TOPRIGHT = 5,WMSZ_BOTTOM = 6,WMSZ_BOTTOMLEFT = 7,WMSZ_BOTTOMRIGHT = 8,};
enum MACRO_WNNC {WNNC_NET_MSNET = 0x10000,WNNC_NET_LANMAN = 0x20000,WNNC_NET_NETWARE = 0x30000,WNNC_NET_VINES = 0x40000,WNNC_NET_10NET = 0x50000,WNNC_NET_LOCUS = 0x60000,WNNC_NET_SUN_PC_NFS = 0x70000,WNNC_NET_LANSTEP = 0x80000,WNNC_NET_9TILES = 0x90000,WNNC_NET_LANTASTIC = 0xA0000,WNNC_NET_AS400 = 0xB0000,WNNC_NET_FTP_NFS = 0xC0000,WNNC_NET_PATHWORKS = 0xD0000,WNNC_NET_LIFENET = 0xE0000,WNNC_NET_POWERLAN = 0xF0000,WNNC_NET_BWNFS = 0x100000,WNNC_NET_COGENT = 0x110000,WNNC_NET_FARALLON = 0x120000,WNNC_NET_APPLETALK = 0x130000,WNNC_NET_INTERGRAPH = 0x140000,WNNC_NET_SYMFONET = 0x150000,WNNC_NET_CLEARCASE = 0x160000,WNNC_NET_FRONTIER = 0x170000,WNNC_NET_BMC = 0x180000,WNNC_NET_DCE = 0x190000,WNNC_NET_AVID = 0x1A0000,WNNC_NET_DOCUSPACE = 0x1B0000,WNNC_NET_DECORB = 0x200000,WNNC_NET_PROTSTOR = 0x210000,WNNC_NET_FJ_REDIR = 0x220000,WNNC_NET_DISTINCT = 0x230000,WNNC_NET_TWINS = 0x240000,WNNC_NET_RDR2SAMPLE = 0x250000,WNNC_NET_CSC = 0x260000,WNNC_NET_3IN1 = 0x270000,WNNC_NET_EXTENDNET = 0x290000,WNNC_NET_OBJECT_DIRE = 0x300000,WNNC_NET_MASFAX = 0x310000,WNNC_NET_HOB_NFS = 0x320000,WNNC_NET_SHIVA = 0x330000,WNNC_NET_IBMAL = 0x340000,WNNC_CRED_MANAGER = 0xFFFF0000,};
enum MACRO_X509 {X509_ASN_ENCODING = 0x1,X509_NDR_ENCODING = 0x2,};
enum MACRO_X942 {X942_DH_PARAMETERS = 50,};
enum MACRO_XTYP {XTYP_ERROR = 0x8002,XTYP_ADVDATA = 0x4010,XTYP_ADVREQ = 0x2022,XTYP_ADVSTART = 0x1030,XTYP_ADVSTOP = 0x8040,XTYP_EXECUTE = 0x4050,XTYP_CONNECT = 0x1062,XTYP_CONNECT_CONFIRM = 0x8072,XTYP_XACT_COMPLETE = 0x8080,XTYP_POKE = 0x4090,XTYP_REGISTER = 0x80A2,XTYP_REQUEST = 0x20B0,XTYP_DISCONNECT = 0x80C2,XTYP_UNREGISTER = 0x80D2,XTYP_WILDCONNECT = 0x20E2,XTYP_MASK = 0xF0,XTYP_SHIFT = 0x4,};
enum MACRO__I64 {_I64_MIN = -9223372036854775808,_I64_MAX = 9223372036854775807,};
enum MACRO__MAX {_MAX_PATH = 260,_MAX_DRIVE = 3,_MAX_DIR = 256,_MAX_FNAME = 256,_MAX_EXT = 256,};
enum MACRO__MBC {_MBC_SINGLE = 0,_MBC_LEAD = 1,_MBC_TRAIL = 2,_MBC_ILLEGAL = -1,};
enum MACRO_chx1 {chx1 = 0x410,};
enum MACRO_chx2 {chx2 = 0x411,};
enum MACRO_chx3 {chx3 = 0x412,};
enum MACRO_chx4 {chx4 = 0x413,};
enum MACRO_chx5 {chx5 = 0x414,};
enum MACRO_chx6 {chx6 = 0x415,};
enum MACRO_chx7 {chx7 = 0x416,};
enum MACRO_chx8 {chx8 = 0x417,};
enum MACRO_chx9 {chx9 = 0x418,};
enum MACRO_cmb1 {cmb1 = 0x470,};
enum MACRO_cmb2 {cmb2 = 0x471,};
enum MACRO_cmb3 {cmb3 = 0x472,};
enum MACRO_cmb4 {cmb4 = 0x473,};
enum MACRO_cmb5 {cmb5 = 0x474,};
enum MACRO_cmb6 {cmb6 = 0x475,};
enum MACRO_cmb7 {cmb7 = 0x476,};
enum MACRO_cmb8 {cmb8 = 0x477,};
enum MACRO_cmb9 {cmb9 = 0x478,};
enum MACRO_ctl1 {ctl1 = 0x4A0,};
enum MACRO_edt1 {edt1 = 0x480,};
enum MACRO_edt2 {edt2 = 0x481,};
enum MACRO_edt3 {edt3 = 0x482,};
enum MACRO_edt4 {edt4 = 0x483,};
enum MACRO_edt5 {edt5 = 0x484,};
enum MACRO_edt6 {edt6 = 0x485,};
enum MACRO_edt7 {edt7 = 0x486,};
enum MACRO_edt8 {edt8 = 0x487,};
enum MACRO_edt9 {edt9 = 0x488,};
enum MACRO_frm1 {frm1 = 0x434,};
enum MACRO_frm2 {frm2 = 0x435,};
enum MACRO_frm3 {frm3 = 0x436,};
enum MACRO_frm4 {frm4 = 0x437,};
enum MACRO_grp1 {grp1 = 0x430,};
enum MACRO_grp2 {grp2 = 0x431,};
enum MACRO_grp3 {grp3 = 0x432,};
enum MACRO_grp4 {grp4 = 0x433,};
enum MACRO_ico1 {ico1 = 0x43C,};
enum MACRO_ico2 {ico2 = 0x43D,};
enum MACRO_ico3 {ico3 = 0x43E,};
enum MACRO_ico4 {ico4 = 0x43F,};
enum MACRO_lst1 {lst1 = 0x460,};
enum MACRO_lst2 {lst2 = 0x461,};
enum MACRO_lst3 {lst3 = 0x462,};
enum MACRO_lst4 {lst4 = 0x463,};
enum MACRO_lst5 {lst5 = 0x464,};
enum MACRO_lst6 {lst6 = 0x465,};
enum MACRO_lst7 {lst7 = 0x466,};
enum MACRO_lst8 {lst8 = 0x467,};
enum MACRO_lst9 {lst9 = 0x468,};
enum MACRO_psh1 {psh1 = 0x400,};
enum MACRO_psh2 {psh2 = 0x401,};
enum MACRO_psh3 {psh3 = 0x402,};
enum MACRO_psh4 {psh4 = 0x403,};
enum MACRO_psh5 {psh5 = 0x404,};
enum MACRO_psh6 {psh6 = 0x405,};
enum MACRO_psh7 {psh7 = 0x406,};
enum MACRO_psh8 {psh8 = 0x407,};
enum MACRO_psh9 {psh9 = 0x408,};
enum MACRO_rad1 {rad1 = 0x420,};
enum MACRO_rad2 {rad2 = 0x421,};
enum MACRO_rad3 {rad3 = 0x422,};
enum MACRO_rad4 {rad4 = 0x423,};
enum MACRO_rad5 {rad5 = 0x424,};
enum MACRO_rad6 {rad6 = 0x425,};
enum MACRO_rad7 {rad7 = 0x426,};
enum MACRO_rad8 {rad8 = 0x427,};
enum MACRO_rad9 {rad9 = 0x428,};
enum MACRO_rct1 {rct1 = 0x438,};
enum MACRO_rct2 {rct2 = 0x439,};
enum MACRO_rct3 {rct3 = 0x43A,};
enum MACRO_rct4 {rct4 = 0x43B,};
enum MACRO_scr1 {scr1 = 0x490,};
enum MACRO_scr2 {scr2 = 0x491,};
enum MACRO_scr3 {scr3 = 0x492,};
enum MACRO_scr4 {scr4 = 0x493,};
enum MACRO_scr5 {scr5 = 0x494,};
enum MACRO_scr6 {scr6 = 0x495,};
enum MACRO_scr7 {scr7 = 0x496,};
enum MACRO_scr8 {scr8 = 0x497,};
enum MACRO_stc1 {stc1 = 0x440,};
enum MACRO_stc2 {stc2 = 0x441,};
enum MACRO_stc3 {stc3 = 0x442,};
enum MACRO_stc4 {stc4 = 0x443,};
enum MACRO_stc5 {stc5 = 0x444,};
enum MACRO_stc6 {stc6 = 0x445,};
enum MACRO_stc7 {stc7 = 0x446,};
enum MACRO_stc8 {stc8 = 0x447,};
enum MACRO_stc9 {stc9 = 0x448,};
typedef struct tagMETAHEADER METAHEADER;
typedef struct tagMETARECORD METARECORD;
typedef struct tagMETHODDATA METHODDATA;
typedef struct tagMINMAXINFO MINMAXINFO;
typedef struct tagMIXERCAPSA MIXERCAPSA;
typedef struct tagMIXERCAPSW MIXERCAPSW;
typedef struct tagMIXERLINEA MIXERLINEA;
typedef struct tagMIXERLINEW MIXERLINEW;
typedef struct tagMOUSEINPUT MOUSEINPUT;
typedef struct _ABCFLOAT *NPABCFLOAT;
typedef struct tagAUXCAPSA *NPAUXCAPSA;
typedef struct tagAUXCAPSW *NPAUXCAPSW;
typedef struct _devicemodeA *NPDEVMODEA;
typedef struct _devicemodeW *NPDEVMODEW;
typedef struct tagEVENTMSG *NPEVENTMSG;
typedef struct tagJOYCAPSA *NPJOYCAPSA;
typedef struct tagJOYCAPSW *NPJOYCAPSW;
typedef struct tagLOGBRUSH *NPLOGBRUSH;
typedef struct tagLOGFONTA *NPLOGFONTA;
typedef struct tagLOGFONTW *NPLOGFONTW;
typedef struct _MMCKINFO *NPMMCKINFO;
typedef struct _MMIOINFO *NPMMIOINFO;
typedef struct tagPELARRAY *NPPELARRAY;
typedef struct timecaps_tag *NPTIMECAPS;
typedef struct _numberfmtA NUMBERFMTA;
typedef struct _numberfmtW NUMBERFMTW;
typedef struct _OVERLAPPED OVERLAPPED;
typedef struct tagAXESLISTA *PAXESLISTA;
typedef struct tagAXESLISTW *PAXESLISTW;
typedef struct tagAXISINFOA *PAXISINFOA;
typedef struct tagAXISINFOW *PAXISINFOW;
typedef struct _BIN_COUNT *PBIN_COUNT;
typedef struct _BIN_RANGE *PBIN_RANGE;
typedef struct _CRYPTOAPI_BLOB *PCERT_BLOB;
typedef struct _CERT_INFO *PCERT_INFO;
typedef struct _CHAR_INFO *PCHAR_INFO;
typedef struct _CRL_ENTRY *PCRL_ENTRY;
typedef struct _CTL_ENTRY *PCTL_ENTRY;
typedef struct _CTL_USAGE *PCTL_USAGE;
typedef struct tagCWPSTRUCT *PCWPSTRUCT;
typedef struct _CRYPTOAPI_BLOB *PDATA_BLOB;
typedef struct tagEMRBITBLT *PEMRBITBLT;
typedef struct tagEMRFORMAT *PEMRFORMAT;
typedef struct tagEMRLINETO *PEMRLINETO;
typedef struct tagEMRPLGBLT *PEMRPLGBLT;
typedef struct tagABORTPATH *PEMRSAVEDC;
typedef struct tagEXTLOGPEN *PEXTLOGPEN;
typedef struct _HMAC_Info *PHMAC_INFO;
typedef struct joyinfoex_tag *PJOYINFOEX;
typedef struct _LANA_ENUM *PLANA_ENUM;
typedef struct _LDT_ENTRY *PLDT_ENTRY;
typedef struct _POINTFLOAT POINTFLOAT;
typedef struct tagPOLYTEXTA *PPOLYTEXTA;
typedef struct tagPOLYTEXTW *PPOLYTEXTW;
typedef struct tagSTYLEBUFA *PSTYLEBUFA;
typedef struct tagSTYLEBUFW *PSTYLEBUFW;
typedef struct _TRIVERTEX *PTRIVERTEX;
typedef unsigned __int16 *PUHALF_PTR;
typedef unsigned int *PULONG_PTR;
typedef struct tagWINDOWPOS *PWINDOWPOS;
typedef struct tagWNDCLASSA *PWNDCLASSA;
typedef struct tagWNDCLASSW *PWNDCLASSW;
typedef unsigned __int8 *RPC_BUFPTR;
typedef unsigned int RPC_LENGTH;
typedef struct _RPC_POLICY RPC_POLICY;
typedef int RPC_STATUS;
typedef struct tagRemHBITMAP RemHBITMAP;
typedef struct tagRemHGLOBAL RemHGLOBAL;
typedef struct tagSCROLLINFO SCROLLINFO;
typedef struct _SMALL_RECT SMALL_RECT;
typedef struct tagSTGOPTIONS STGOPTIONS;
typedef struct tagSTICKYKEYS STICKYKEYS;
typedef struct _SYSTEMTIME SYSTEMTIME;
typedef struct _tagStartParam StartParam;
typedef struct _TAPE_ERASE TAPE_ERASE;
typedef struct tagTOGGLEKEYS TOGGLEKEYS;
typedef struct _TOKEN_USER TOKEN_USER;
typedef struct _F1B55BC800274E3ABC9BA0A46288924E USN_RECORD;
typedef struct waveformat_tag WAVEFORMAT;
typedef struct tagWINDOWINFO WINDOWINFO;
typedef struct _WSAVersion WSAVERSION;
enum _BIN_TYPES {RequestSize = 0x0,RequestLocation = 0x1,};
struct _WORD_BLOB {unsigned int clSize;unsigned __int16 asData[1];};
enum tagDATADIR {DATADIR_GET = 0x1,DATADIR_SET = 0x2,};
enum tagEXTCONN {EXTCONN_STRONG = 0x1,EXTCONN_WEAK = 0x2,EXTCONN_CALLABLE = 0x4,};
enum tagOLEMISC {OLEMISC_RECOMPOSEONRESIZE = 0x1,OLEMISC_ONLYICONIC = 0x2,OLEMISC_INSERTNOTREPLACE = 0x4,OLEMISC_STATIC = 0x8,OLEMISC_CANTLINKINSIDE = 0x10,OLEMISC_CANLINKBYOLE1 = 0x20,OLEMISC_ISLINKOBJECT = 0x40,OLEMISC_INSIDEOUT = 0x80,OLEMISC_ACTIVATEWHENVISIBLE = 0x100,OLEMISC_RENDERINGISDEVICEINDEPENDENT = 0x200,OLEMISC_INVISIBLEATRUNTIME = 0x400,OLEMISC_ALWAYSRUN = 0x800,OLEMISC_ACTSLIKEBUTTON = 0x1000,OLEMISC_ACTSLIKELABEL = 0x2000,OLEMISC_NOUIACTIVATE = 0x4000,OLEMISC_ALIGNABLE = 0x8000,OLEMISC_SIMPLEFRAME = 0x10000,OLEMISC_SETCLIENTSITEFIRST = 0x20000,OLEMISC_IMEMODE = 0x40000,OLEMISC_IGNOREACTIVATEWHENVISIBLE = 0x80000,OLEMISC_WANTSTOMENUMERGE = 0x100000,OLEMISC_SUPPORTSMULTILEVELUNDO = 0x200000,};
enum tagREGKIND {REGKIND_DEFAULT = 0x0,REGKIND_REGISTER = 0x1,REGKIND_NONE = 0x2,};
enum tagSF_TYPE {SF_ERROR = 0xA,SF_I1 = 0x10,SF_I2 = 0x2,SF_I4 = 0x3,SF_I8 = 0x14,SF_BSTR = 0x8,SF_UNKNOWN = 0xD,SF_DISPATCH = 0x9,SF_VARIANT = 0xC,SF_RECORD = 0x24,SF_HAVEIID = 0x800D,};
enum tagSTGMOVE {STGMOVE_MOVE = 0x0,STGMOVE_COPY = 0x1,STGMOVE_SHALLOWCOPY = 0x2,};
enum tagSYSKIND {SYS_WIN16 = 0x0,SYS_WIN32 = 0x1,SYS_MAC = 0x2,SYS_WIN64 = 0x1,};
enum tagURLZONE {URLZONE_PREDEFINED_MIN = 0x0,URLZONE_LOCAL_MACHINE = 0x0,URLZONE_INTRANET = 0x1,URLZONE_TRUSTED = 0x2,URLZONE_INTERNET = 0x3,URLZONE_UNTRUSTED = 0x4,URLZONE_PREDEFINED_MAX = 0x3E7,URLZONE_USER_MIN = 0x3E8,URLZONE_USER_MAX = 0x2710,};
enum tagVARKIND {VAR_PERINSTANCE = 0x0,VAR_STATIC = 0x1,VAR_CONST = 0x2,VAR_DISPATCH = 0x3,};
enum text_modes {LASTMODE = 0xFFFFFFFF,BW40 = 0x0,C40 = 0x1,BW80 = 0x2,C80 = 0x3,MONO = 0x7,C4350 = 0x40,C40X14 = 0x8,C40X21 = 0x9,C40X28 = 0xA,C40X43 = 0xB,C40X50 = 0xC,C40X60 = 0xD,C80X14 = 0xE,C80X21 = 0xF,C80X28 = 0x10,C80X43 = 0x11,C80X50 = 0x12,C80X60 = 0x13,BW40X14 = 0x14,BW40X21 = 0x15,BW40X28 = 0x16,BW40X43 = 0x17,BW40X50 = 0x18,BW40X60 = 0x19,BW80X14 = 0x1A,BW80X21 = 0x1B,BW80X28 = 0x1C,BW80X43 = 0x1D,BW80X50 = 0x1E,BW80X60 = 0x1F,MONO14 = 0x20,MONO21 = 0x21,MONO28 = 0x22,MONO43 = 0x23,MONO50 = 0x24,MONO60 = 0x25,_ORIGMODE = 0x41,};
typedef struct tagSTGMEDIUM uSTGMEDIUM;
typedef struct _userBITMAP userBITMAP;
typedef struct tagARRAYDESC ARRAYDESC;
typedef struct tagAXESLISTA AXESLISTA;
typedef struct tagAXESLISTW AXESLISTW;
typedef struct tagAXISINFOA AXISINFOA;
typedef struct tagAXISINFOW AXISINFOW;
typedef struct tagBIND_OPTS BIND_OPTS;
typedef struct _BIN_COUNT BIN_COUNT;
typedef struct _BIN_RANGE BIN_RANGE;
typedef struct _BYTE_BLOB BYTE_BLOB;
typedef struct _CRYPTOAPI_BLOB CERT_BLOB;
typedef struct _CERT_INFO CERT_INFO;
typedef struct _CHAR_INFO CHAR_INFO;
typedef struct _cpinfoexA CPINFOEXA;
typedef struct _cpinfoexW CPINFOEXW;
typedef struct _CRL_ENTRY CRL_ENTRY;
typedef struct _CTL_ENTRY CTL_ENTRY;
typedef struct _CTL_USAGE CTL_USAGE;
typedef struct tagCWPSTRUCT CWPSTRUCT;
typedef struct _CRYPTOAPI_BLOB DATA_BLOB;
typedef struct _61B889227CECAFED4E8A477D21B34BC9 DDEADVISE;
typedef struct _DRAGINFOA DRAGINFOA;
typedef struct _DRAGINFOW DRAGINFOW;
typedef struct _PUBKEY DSSPUBKEY;
typedef struct tagEMRBITBLT EMRBITBLT;
typedef struct tagEMRFORMAT EMRFORMAT;
typedef struct tagEMRLINETO EMRLINETO;
typedef struct tagEMRPLGBLT EMRPLGBLT;
typedef struct tagABORTPATH EMRSAVEDC;
typedef struct tagEXCEPINFO EXCEPINFO;
typedef void (__stdcall *EXPR_EVAL)(struct _MIDL_STUB_MESSAGE *);
typedef struct tagEXTLOGPEN EXTLOGPEN;
typedef struct tagFORMATETC FORMATETC;
struct HBITMAP__ {int unused;};
typedef struct HCONVLIST__ *HCONVLIST;
typedef void *HCRYPTMSG;
typedef struct HINSTANCE__ *HINSTANCE;
typedef struct _HMAC_Info HMAC_INFO;
typedef struct HMETAFILE__ *HMETAFILE;
struct HMIDIIN__ {int unused;};
typedef struct HMIDISTRM__ *HMIDISTRM;
typedef struct HMIXEROBJ__ *HMIXEROBJ;
struct HWAVEIN__ {int unused;};
struct HWINSTA__ {int unused;};
struct IBindHost {struct IBindHostVtbl *lpVtbl;};
struct IContinue {struct IContinueVtbl *lpVtbl;};
struct IDispatch {struct IDispatchVtbl *lpVtbl;};
struct IErrorLog {struct IErrorLogVtbl *lpVtbl;};
struct IInternet {struct IInternetVtbl *lpVtbl;};
struct IMarshal2 {struct IMarshal2Vtbl *lpVtbl;};
struct IOleCache {struct IOleCacheVtbl *lpVtbl;};
struct IPipeByte {struct IPipeByteVtbl *lpVtbl;};
struct IPipeLong {struct IPipeLongVtbl *lpVtbl;};
struct ITypeComp {struct ITypeCompVtbl *lpVtbl;};
struct ITypeInfo {struct ITypeInfoVtbl *lpVtbl;};
struct ITypeLib2 {struct ITypeLib2Vtbl *lpVtbl;};
struct IXMLError {struct IXMLErrorVtbl *lpVtbl;};
typedef struct joyinfoex_tag JOYINFOEX;
typedef struct _PUBKEY KEAPUBKEY;
typedef struct _LANA_ENUM LANA_ENUM;
typedef struct _LDT_ENTRY LDT_ENTRY;
typedef IBindCtx *LPBINDCTX;
typedef IBinding *LPBINDING;
typedef union tagBINDPTR *LPBINDPTR;
typedef struct _COMSTAT *LPCOMSTAT;
typedef struct hostent *LPHOSTENT;
typedef struct _IDEREGS *LPIDEREGS;
typedef struct tagIDLDESC *LPIDLDESC;
typedef struct in_addr *LPIN_ADDR;
typedef struct joyinfo_tag *LPJOYINFO;
typedef IMarshal *LPMARSHAL;
typedef struct midihdr_tag *LPMIDIHDR;
typedef IMoniker *LPMONIKER;
typedef IMultiQI *LPMULTIQI;
typedef IOleLink *LPOLELINK;
typedef struct tagOLEVERB *LPOLEVERB;
typedef IPersist *LPPERSIST;
typedef struct tagPOINTFX *LPPOINTFX;
typedef struct _RGNDATA *LPRGNDATA;
typedef struct servent *LPSERVENT;
typedef IStorage *LPSTORAGE;
typedef struct timeval *LPTIMEVAL;
typedef ITypeLib *LPTYPELIB;
typedef IUnknown *LPUNKNOWN;
typedef struct tagVARDESC *LPVARDESC;
typedef struct wavehdr_tag *LPWAVEHDR;
typedef struct tagWCRANGE *LPWCRANGE;
typedef struct _WGLSWAP *LPWGLSWAP;
typedef struct WSAData *LPWSADATA;
enum MACRO_ABE {ABE_LEFT = 0,ABE_TOP = 1,ABE_RIGHT = 2,ABE_BOTTOM = 3,};
enum MACRO_ABM {ABM_NEW = 0x0,ABM_REMOVE = 0x1,ABM_QUERYPOS = 0x2,ABM_SETPOS = 0x3,ABM_GETSTATE = 0x4,ABM_GETTASKBARPOS = 0x5,ABM_ACTIVATE = 0x6,ABM_GETAUTOHIDEBAR = 0x7,ABM_SETAUTOHIDEBAR = 0x8,ABM_WINDOWPOSCHANGED = 0x9,};
enum MACRO_ABN {ABN_STATECHANGE = 0x0,ABN_POSCHANGED = 0x1,ABN_FULLSCREENAPP = 0x2,ABN_WINDOWARRANGE = 0x3,};
enum MACRO_ABS {ABS_AUTOHIDE = 0x1,ABS_ALWAYSONTOP = 0x2,};
enum MACRO_ACE {OBJECT_INHERIT_ACE = 0x1,CONTAINER_INHERIT_ACE = 0x2,NO_PROPAGATE_INHERIT_ACE = 0x4,INHERIT_ONLY_ACE = 0x8,INHERITED_ACE = 0x10,};
enum MACRO_ACL {ACL_REVISION = 2,ACL_REVISION_DS = 4,ACL_REVISION1 = 1,ACL_REVISION2 = 2,ACL_REVISION3 = 3,ACL_REVISION4 = 4,};
enum MACRO_ALG {ALG_CLASS_ANY = 0,ALG_CLASS_SIGNATURE = 8192,ALG_CLASS_MSG_ENCRYPT = 16384,ALG_CLASS_DATA_ENCRYPT = 24576,ALG_CLASS_HASH = 32768,ALG_CLASS_KEY_EXCHANGE = 40960,ALG_CLASS_ALL = 57344,ALG_TYPE_ANY = 0,ALG_TYPE_DSS = 512,ALG_TYPE_RSA = 1024,ALG_TYPE_BLOCK = 1536,ALG_TYPE_STREAM = 2048,ALG_TYPE_DH = 2560,ALG_TYPE_SECURECHANNEL = 3072,ALG_SID_ANY = 0,ALG_SID_RSA_ANY = 0,ALG_SID_RSA_PKCS = 1,ALG_SID_RSA_MSATWORK = 2,ALG_SID_RSA_ENTRUST = 3,ALG_SID_RSA_PGP = 4,ALG_SID_DSS_ANY = 0,ALG_SID_DSS_PKCS = 1,ALG_SID_DSS_DMS = 2,ALG_SID_DES = 1,ALG_SID_3DES = 3,ALG_SID_DESX = 4,ALG_SID_IDEA = 5,ALG_SID_CAST = 6,ALG_SID_SAFERSK64 = 7,ALG_SID_SAFERSK128 = 8,ALG_SID_3DES_112 = 9,ALG_SID_CYLINK_MEK = 12,ALG_SID_RC5 = 13,ALG_SID_SKIPJACK = 10,ALG_SID_TEK = 11,};
enum MACRO_APD {APD_STRICT_UPGRADE = 0x1,APD_STRICT_DOWNGRADE = 0x2,APD_COPY_ALL_FILES = 0x4,APD_COPY_NEW_FILES = 0x8,};
enum MACRO_ARW {ARW_BOTTOMLEFT = 0x0,ARW_BOTTOMRIGHT = 0x1,ARW_TOPLEFT = 0x2,ARW_TOPRIGHT = 0x3,ARW_STARTMASK = 0x3,ARW_STARTRIGHT = 0x1,ARW_STARTTOP = 0x2,ARW_LEFT = 0x0,ARW_RIGHT = 0x0,ARW_UP = 0x4,ARW_DOWN = 0x4,ARW_HIDE = 0x8,};
enum MACRO_ATF {ATF_TIMEOUTON = 0x1,ATF_ONOFFFEEDBACK = 0x2,};
enum MACRO_AUX {AUX_MAPPER = 4294967295,};
enum MACRO_BDR {BDR_RAISEDOUTER = 0x1,BDR_SUNKENOUTER = 0x2,BDR_RAISEDINNER = 0x4,BDR_SUNKENINNER = 0x8,BDR_OUTER = 0x3,BDR_INNER = 0xC,BDR_RAISED = 0x5,BDR_SUNKEN = 0xA,};
enum MACRO_BSF {BSF_QUERY = 0x1,BSF_IGNORECURRENTTASK = 0x2,BSF_FLUSHDISK = 0x4,BSF_NOHANG = 0x8,BSF_POSTMESSAGE = 0x10,BSF_FORCEIFHUNG = 0x20,BSF_NOTIMEOUTIFNOTHUNG = 0x40,BSF_ALLOWSFW = 0x80,BSF_SENDNOTIFYMESSAGE = 0x100,};
enum MACRO_BSM {BSM_ALLCOMPONENTS = 0x0,BSM_VXDS = 0x1,BSM_NETDRIVER = 0x2,BSM_INSTALLABLEDRIVERS = 0x4,BSM_APPLICATIONS = 0x8,BSM_ALLDESKTOPS = 0x10,};
enum MACRO_BST {BST_UNCHECKED = 0x0,BST_CHECKED = 0x1,BST_INDETERMINATE = 0x2,BST_PUSHED = 0x4,BST_FOCUS = 0x8,};
enum MACRO_CAL {CAL_NOUSEROVERRIDE = -2147483648,CAL_USE_CP_ACP = 1073741824,CAL_RETURN_NUMBER = 536870912,CAL_ICALINTVALUE = 1,CAL_SCALNAME = 2,CAL_IYEAROFFSETRANGE = 3,CAL_SERASTRING = 4,CAL_SSHORTDATE = 5,CAL_SLONGDATE = 6,CAL_SDAYNAME1 = 7,CAL_SDAYNAME2 = 8,CAL_SDAYNAME3 = 9,CAL_SDAYNAME4 = 10,CAL_SDAYNAME5 = 11,CAL_SDAYNAME6 = 12,CAL_SDAYNAME7 = 13,CAL_SABBREVDAYNAME1 = 14,CAL_SABBREVDAYNAME2 = 15,CAL_SABBREVDAYNAME3 = 16,CAL_SABBREVDAYNAME4 = 17,CAL_SABBREVDAYNAME5 = 18,CAL_SABBREVDAYNAME6 = 19,CAL_SABBREVDAYNAME7 = 20,CAL_SMONTHNAME1 = 21,CAL_SMONTHNAME2 = 22,CAL_SMONTHNAME3 = 23,CAL_SMONTHNAME4 = 24,CAL_SMONTHNAME5 = 25,CAL_SMONTHNAME6 = 26,CAL_SMONTHNAME7 = 27,CAL_SMONTHNAME8 = 28,CAL_SMONTHNAME9 = 29,CAL_SMONTHNAME10 = 30,CAL_SMONTHNAME11 = 31,CAL_SMONTHNAME12 = 32,CAL_SMONTHNAME13 = 33,CAL_SABBREVMONTHNAME1 = 34,CAL_SABBREVMONTHNAME2 = 35,CAL_SABBREVMONTHNAME3 = 36,CAL_SABBREVMONTHNAME4 = 37,CAL_SABBREVMONTHNAME5 = 38,CAL_SABBREVMONTHNAME6 = 39,CAL_SABBREVMONTHNAME7 = 40,CAL_SABBREVMONTHNAME8 = 41,CAL_SABBREVMONTHNAME9 = 42,CAL_SABBREVMONTHNAME10 = 43,CAL_SABBREVMONTHNAME11 = 44,CAL_SABBREVMONTHNAME12 = 45,CAL_SABBREVMONTHNAME13 = 46,CAL_SYEARMONTH = 47,CAL_ITWODIGITYEARMAX = 48,};
enum MACRO_CAP {CAP_ATA_ID_CMD = 1,CAP_ATAPI_ID_CMD = 2,CAP_SMART_CMD = 4,};
enum MACRO_CAT {CAT_E_FIRST = 0x80040160,CAT_E_LAST = 0x80040161,};
enum MACRO_CBF {CBF_FAIL_SELFCONNECTIONS = 0x1000,CBF_FAIL_CONNECTIONS = 0x2000,CBF_FAIL_ADVISES = 0x4000,CBF_FAIL_EXECUTES = 0x8000,CBF_FAIL_POKES = 0x10000,CBF_FAIL_REQUESTS = 0x20000,CBF_FAIL_ALLSVRXACTIONS = 0x3F000,CBF_SKIP_CONNECT_CONFIRMS = 0x40000,CBF_SKIP_REGISTRATIONS = 0x80000,CBF_SKIP_UNREGISTRATIONS = 0x100000,CBF_SKIP_DISCONNECTS = 0x200000,CBF_SKIP_ALLNOTIFICATIONS = 0x3C0000,};
enum MACRO_CBM {CBM_INIT = 0x4,};
enum MACRO_CBN {CBN_ERRSPACE = -1,CBN_SELCHANGE = 1,CBN_DBLCLK = 2,CBN_SETFOCUS = 3,CBN_KILLFOCUS = 4,CBN_EDITCHANGE = 5,CBN_EDITUPDATE = 6,CBN_DROPDOWN = 7,CBN_CLOSEUP = 8,CBN_SELENDOK = 9,CBN_SELENDCANCEL = 10,};
enum MACRO_CBR {CBR_110 = 110,CBR_300 = 300,CBR_600 = 600,CBR_1200 = 1200,CBR_2400 = 2400,CBR_4800 = 4800,CBR_9600 = 9600,CBR_14400 = 14400,CBR_19200 = 19200,CBR_38400 = 38400,CBR_56000 = 56000,CBR_57600 = 57600,CBR_115200 = 115200,CBR_128000 = 128000,CBR_256000 = 256000,};
enum MACRO_CBS {CBS_SIMPLE = 0x1,CBS_DROPDOWN = 0x2,CBS_DROPDOWNLIST = 0x3,CBS_OWNERDRAWFIXED = 0x10,CBS_OWNERDRAWVARIABLE = 0x20,CBS_AUTOHSCROLL = 0x40,CBS_OEMCONVERT = 0x80,CBS_SORT = 0x100,CBS_HASSTRINGS = 0x200,CBS_NOINTEGRALHEIGHT = 0x400,CBS_DISABLENOSCROLL = 0x800,CBS_UPPERCASE = 0x2000,CBS_LOWERCASE = 0x4000,};
enum MACRO_CCH {CCH_MAX_PROPSTG_NAME = 31,};
enum MACRO_CDN {CDN_FIRST = -601,CDN_LAST = -699,CDN_INITDONE = -601,CDN_SELCHANGE = -602,CDN_FOLDERCHANGE = -603,CDN_SHAREVIOLATION = -604,CDN_HELP = -605,CDN_FILEOK = -606,CDN_TYPECHANGE = -607,CDN_INCLUDEITEM = -608,};
enum MACRO_CDS {CDS_UPDATEREGISTRY = 0x1,CDS_TEST = 0x2,CDS_FULLSCREEN = 0x4,CDS_GLOBAL = 0x8,CDS_SET_PRIMARY = 0x10,CDS_VIDEOPARAMETERS = 0x20,CDS_RESET = 0x40000000,CDS_NORESET = 0x10000000,};
enum MACRO_CFS {CFS_DEFAULT = 0x0,CFS_RECT = 0x1,CFS_POINT = 0x2,CFS_FORCE_POSITION = 0x20,CFS_CANDIDATEPOS = 0x40,CFS_EXCLUDE = 0x80,};
enum MACRO_CLR {CLR_INVALID = 0xFFFFFFFF,};
enum MACRO_CMD {ATAPI_ID_CMD = 0xA1,ID_CMD = 0xEC,SMART_CMD = 0xB0,};
enum MACRO_COM {COM_RIGHTS_EXECUTE = 1,COM_RIGHTS_SAFE_FOR_SCRIPTING = 2,};
enum MACRO_CPS {CPS_COMPLETE = 0x1,CPS_CONVERT = 0x2,CPS_REVERT = 0x3,CPS_CANCEL = 0x4,};
enum MACRO_CRL {CRL_V1 = 0,CRL_V2 = 1,};
enum MACRO_CTL {CTL_V1 = 0,};
enum MACRO_CTM {RESTORE_CTM = 4100,SAVE_CTM = 4101,};
enum MACRO_CUR {CUR_BLOB_VERSION = 2,};
enum MACRO_CWP {CWP_ALL = 0x0,CWP_SKIPINVISIBLE = 0x1,CWP_SKIPDISABLED = 0x2,CWP_SKIPTRANSPARENT = 0x4,};
enum MACRO_DBG {DBG_CONTINUE = 0x10002,};
enum MACRO_DCB {DCB_RESET = 0x1,DCB_ACCUMULATE = 0x2,DCB_DIRTY = 0x2,DCB_SET = 0x3,DCB_ENABLE = 0x4,DCB_DISABLE = 0x8,};
enum MACRO_DCE {DCE_C_ERROR_STRING_LEN = 256,};
enum MACRO_DCX {DCX_WINDOW = 0x1,DCX_CACHE = 0x2,DCX_NORESETATTRS = 0x4,DCX_CLIPCHILDREN = 0x8,DCX_CLIPSIBLINGS = 0x10,DCX_PARENTCLIP = 0x20,DCX_EXCLUDERGN = 0x40,DCX_INTERSECTRGN = 0x80,DCX_EXCLUDEUPDATE = 0x100,DCX_INTERSECTUPDATE = 0x200,DCX_LOCKWINDOWUPDATE = 0x400,DCX_VALIDATE = 0x200000,};
enum MACRO_DDD {DDD_RAW_TARGET_PATH = 0x1,DDD_REMOVE_DEFINITION = 0x2,DDD_EXACT_MATCH_ON_REMOVE = 0x4,DDD_NO_BROADCAST_SYSTEM = 0x8,};
enum MACRO_DDE {DDE_FACK = 0x8000,DDE_FBUSY = 0x4000,DDE_FDEFERUPD = 0x4000,DDE_FACKREQ = 0x8000,DDE_FRELEASE = 0x2000,DDE_FREQUESTED = 0x1000,DDE_FAPPSTATUS = 0xFF,DDE_FNOTPROCESSED = 0x0,DDE_FACKRESERVED = 0xFFFF3F00,DDE_FADVRESERVED = 0xFFFF3FFF,DDE_FDATRESERVED = 0xFFFF4FFF,DDE_FPOKRESERVED = 0xFFFFDFFF,};
enum MACRO_DDL {DDL_READWRITE = 0x0,DDL_READONLY = 0x1,DDL_HIDDEN = 0x2,DDL_SYSTEM = 0x4,DDL_DIRECTORY = 0x10,DDL_ARCHIVE = 0x20,DDL_POSTMSGS = 0x2000,DDL_DRIVES = 0x4000,DDL_EXCLUSIVE = 0x8000,};
enum MACRO_DFC {DFC_CAPTION = 1,DFC_MENU = 2,DFC_SCROLL = 3,DFC_BUTTON = 4,DFC_POPUPMENU = 5,};
enum MACRO_DIB {DIB_RGB_COLORS = 0,DIB_PAL_COLORS = 1,};
enum MACRO_DIG {DBL_DIG = 15,FLT_DIG = 6,LDBL_DIG = 18,DBL_MANT_DIG = 53,FLT_MANT_DIG = 24,LDBL_MANT_DIG = 64,};
enum MACRO_DLL {DLL_PROCESS_ATTACH = 1,DLL_THREAD_ATTACH = 2,DLL_THREAD_DETACH = 3,DLL_PROCESS_DETACH = 0,};
enum MACRO_DNS {DNS_REGISTER = 0x1,DNS_UNREGISTER = 0x2,DNS_FILTERON = 0x4,DNS_FILTEROFF = 0x8,};
enum MACRO_DOF {DOF_EXECUTABLE = 0x8001,DOF_DOCUMENT = 0x8002,DOF_DIRECTORY = 0x8003,DOF_MULTIPLE = 0x8004,DOF_PROGMAN = 0x1,DOF_SHELLDATA = 0x2,};
enum MACRO_DPD {DPD_DELETE_UNUSED_FILES = 0x1,DPD_DELETE_SPECIFIC_VERSION = 0x2,DPD_DELETE_ALL_FILES = 0x4,};
enum MACRO_DRV {DRV_LOAD = 0x1,DRV_ENABLE = 0x2,DRV_OPEN = 0x3,DRV_CLOSE = 0x4,DRV_DISABLE = 0x5,DRV_FREE = 0x6,DRV_CONFIGURE = 0x7,DRV_QUERYCONFIGURE = 0x8,DRV_INSTALL = 0x9,DRV_REMOVE = 0xA,DRV_EXITSESSION = 0xB,DRV_POWER = 0xF,DRV_RESERVED = 0x800,DRV_USER = 0x4000,};
enum MACRO_DSS {DSS_NORMAL = 0x0,DSS_UNION = 0x10,DSS_DISABLED = 0x20,DSS_MONO = 0x80,DSS_HIDEPREFIX = 0x200,DSS_PREFIXONLY = 0x400,DSS_RIGHT = 0x8000,};
enum MACRO_DST {DST_COMPLEX = 0x0,DST_TEXT = 0x1,DST_PREFIXTEXT = 0x2,DST_ICON = 0x3,DST_BITMAP = 0x4,};
enum MACRO_DTR {DTR_CONTROL_DISABLE = 0x0,DTR_CONTROL_ENABLE = 0x1,DTR_CONTROL_HANDSHAKE = 0x2,};
enum MACRO_DWL {DWL_MSGRESULT = 0,DWL_DLGPROC = 4,DWL_USER = 8,};
enum MACRO_EDS {EDS_RAWMODE = 0x2,};
enum MACRO_EFS {EFS_USE_RECOVERY_KEYS = 0x1,};
enum MACRO_ELF {ELF_VENDOR_SIZE = 4,ELF_VERSION = 0,ELF_CULTURE_LATIN = 0,};
enum MACRO_EMR {EMR_HEADER = 1,EMR_POLYBEZIER = 2,EMR_POLYGON = 3,EMR_POLYLINE = 4,EMR_POLYBEZIERTO = 5,EMR_POLYLINETO = 6,EMR_POLYPOLYLINE = 7,EMR_POLYPOLYGON = 8,EMR_SETWINDOWEXTEX = 9,EMR_SETWINDOWORGEX = 10,EMR_SETVIEWPORTEXTEX = 11,EMR_SETVIEWPORTORGEX = 12,EMR_SETBRUSHORGEX = 13,EMR_EOF = 14,EMR_SETPIXELV = 15,EMR_SETMAPPERFLAGS = 16,EMR_SETMAPMODE = 17,EMR_SETBKMODE = 18,EMR_SETPOLYFILLMODE = 19,EMR_SETROP2 = 20,EMR_SETSTRETCHBLTMODE = 21,EMR_SETTEXTALIGN = 22,EMR_SETCOLORADJUSTMENT = 23,EMR_SETTEXTCOLOR = 24,EMR_SETBKCOLOR = 25,EMR_OFFSETCLIPRGN = 26,EMR_MOVETOEX = 27,EMR_SETMETARGN = 28,EMR_EXCLUDECLIPRECT = 29,EMR_INTERSECTCLIPRECT = 30,EMR_SCALEVIEWPORTEXTEX = 31,EMR_SCALEWINDOWEXTEX = 32,EMR_SAVEDC = 33,EMR_RESTOREDC = 34,EMR_SETWORLDTRANSFORM = 35,EMR_MODIFYWORLDTRANSFORM = 36,EMR_SELECTOBJECT = 37,EMR_CREATEPEN = 38,EMR_CREATEBRUSHINDIRECT = 39,EMR_DELETEOBJECT = 40,EMR_ANGLEARC = 41,EMR_ELLIPSE = 42,EMR_RECTANGLE = 43,EMR_ROUNDRECT = 44,EMR_ARC = 45,EMR_CHORD = 46,EMR_PIE = 47,EMR_SELECTPALETTE = 48,EMR_CREATEPALETTE = 49,EMR_SETPALETTEENTRIES = 50,EMR_RESIZEPALETTE = 51,EMR_REALIZEPALETTE = 52,EMR_EXTFLOODFILL = 53,EMR_LINETO = 54,EMR_ARCTO = 55,EMR_POLYDRAW = 56,EMR_SETARCDIRECTION = 57,EMR_SETMITERLIMIT = 58,EMR_BEGINPATH = 59,EMR_ENDPATH = 60,EMR_CLOSEFIGURE = 61,EMR_FILLPATH = 62,EMR_STROKEANDFILLPATH = 63,EMR_STROKEPATH = 64,EMR_FLATTENPATH = 65,EMR_WIDENPATH = 66,EMR_SELECTCLIPPATH = 67,EMR_ABORTPATH = 68,EMR_GDICOMMENT = 70,EMR_FILLRGN = 71,EMR_FRAMERGN = 72,EMR_INVERTRGN = 73,EMR_PAINTRGN = 74,EMR_EXTSELECTCLIPRGN = 75,EMR_BITBLT = 76,EMR_STRETCHBLT = 77,EMR_MASKBLT = 78,EMR_PLGBLT = 79,EMR_SETDIBITSTODEVICE = 80,EMR_STRETCHDIBITS = 81,EMR_EXTCREATEFONTINDIRECTW = 82,EMR_EXTTEXTOUTA = 83,EMR_EXTTEXTOUTW = 84,EMR_POLYBEZIER16 = 85,EMR_POLYGON16 = 86,EMR_POLYLINE16 = 87,EMR_POLYBEZIERTO16 = 88,EMR_POLYLINETO16 = 89,EMR_POLYPOLYLINE16 = 90,EMR_POLYPOLYGON16 = 91,EMR_POLYDRAW16 = 92,EMR_CREATEMONOBRUSH = 93,EMR_CREATEDIBPATTERNBRUSHPT = 94,EMR_EXTCREATEPEN = 95,EMR_POLYTEXTOUTA = 96,EMR_POLYTEXTOUTW = 97,EMR_SETICMMODE = 98,EMR_CREATECOLORSPACE = 99,EMR_SETCOLORSPACE = 100,EMR_DELETECOLORSPACE = 101,EMR_GLSRECORD = 102,EMR_GLSBOUNDEDRECORD = 103,EMR_PIXELFORMAT = 104,EMR_RESERVED_105 = 105,EMR_RESERVED_106 = 106,EMR_RESERVED_107 = 107,EMR_RESERVED_108 = 108,EMR_RESERVED_109 = 109,EMR_RESERVED_110 = 110,EMR_COLORCORRECTPALETTE = 111,EMR_SETICMPROFILEA = 112,EMR_SETICMPROFILEW = 113,EMR_ALPHABLEND = 114,EMR_SETLAYOUT = 115,EMR_TRANSPARENTBLT = 116,EMR_GRADIENTFILL = 118,EMR_RESERVED_119 = 119,EMR_RESERVED_120 = 120,EMR_COLORMATCHTOTARGETW = 121,EMR_CREATECOLORSPACEW = 122,EMR_MIN = 1,EMR_MAX = 122,};
enum MACRO_EOF {EOF = -1,};
enum MACRO_EPS {EPS_SIGNATURE = 0x46535045,};
enum MACRO_ESB {ESB_ENABLE_BOTH = 0x0,ESB_DISABLE_BOTH = 0x3,ESB_DISABLE_LEFT = 0x1,ESB_DISABLE_RIGHT = 0x2,ESB_DISABLE_UP = 0x1,ESB_DISABLE_DOWN = 0x2,ESB_DISABLE_LTUP = 0x1,ESB_DISABLE_RTDN = 0x2,};
enum MACRO_ETO {ETO_OPAQUE = 0x2,ETO_CLIPPED = 0x4,ETO_GLYPH_INDEX = 0x10,ETO_RTLREADING = 0x80,ETO_NUMERICSLOCAL = 0x400,ETO_NUMERICSLATIN = 0x800,ETO_IGNORELANGUAGE = 0x1000,ETO_PDY = 0x2000,};
enum MACRO_EWX {EWX_SHUTDOWN = 0x1,EWX_REBOOT = 0x2,EWX_FORCE = 0x4,EWX_POWEROFF = 0x8,EWX_FORCEIFHUNG = 0x10,};
enum MACRO_EXP {DBL_MAX_EXP = 1024,FLT_MAX_EXP = 128,LDBL_MAX_EXP = 16384,DBL_MAX_10_EXP = 308,FLT_MAX_10_EXP = 38,LDBL_MAX_10_EXP = 4932,DBL_MIN_10_EXP = -307,FLT_MIN_10_EXP = -37,LDBL_MIN_10_EXP = -4931,DBL_MIN_EXP = -1021,FLT_MIN_EXP = -125,LDBL_MIN_EXP = -16381,};
enum MACRO_EXT {EXT_DEVICE_CAPS = 4099,};
enum MACRO_FKF {FKF_FILTERKEYSON = 0x1,FKF_AVAILABLE = 0x2,FKF_HOTKEYACTIVE = 0x4,FKF_CONFIRMHOTKEY = 0x8,FKF_HOTKEYSOUND = 0x10,FKF_INDICATOR = 0x20,FKF_CLICKON = 0x40,};
enum MACRO_FLI {FLI_MASK = 0x103B,};
enum MACRO_FLT {FLT_RADIX = 2,FLT_ROUNDS = 1,FLT_GUARD = 1,FLT_NORMALIZE = 1,};
enum MACRO_FOF {FOF_MULTIDESTFILES = 0x1,FOF_CONFIRMMOUSE = 0x2,FOF_SILENT = 0x4,FOF_RENAMEONCOLLISION = 0x8,FOF_NOCONFIRMATION = 0x10,FOF_WANTMAPPINGHANDLE = 0x20,FOF_ALLOWUNDO = 0x40,FOF_FILESONLY = 0x80,FOF_SIMPLEPROGRESS = 0x100,FOF_NOCONFIRMMKDIR = 0x200,FOF_NOERRORUI = 0x400,FOF_NOCOPYSECURITYATTRIBS = 0x800,FOF_NORECURSION = 0x1000,};
enum MACRO_FPE {FPE_INTOVFLOW = 126,FPE_INTDIV0 = 127,FPE_INVALID = 129,FPE_ZERODIVIDE = 131,FPE_OVERFLOW = 132,FPE_UNDERFLOW = 133,FPE_INEXACT = 134,FPE_STACKFAULT = 135,FPE_EXPLICITGEN = 140,};
enum MACRO_GCL {GCL_MENUNAME = -8,GCL_HBRBACKGROUND = -10,GCL_HCURSOR = -12,GCL_HICON = -14,GCL_HMODULE = -16,GCL_CBWNDEXTRA = -18,GCL_CBCLSEXTRA = -20,GCL_WNDPROC = -24,GCL_STYLE = -26,};
enum MACRO_GCP {GCP_DBCS = 0x1,GCP_REORDER = 0x2,GCP_USEKERNING = 0x8,GCP_GLYPHSHAPE = 0x10,GCP_LIGATE = 0x20,GCP_DIACRITIC = 0x100,GCP_KASHIDA = 0x400,GCP_ERROR = 0x8000,};
enum MACRO_GCS {GCS_COMPREADSTR = 0x1,GCS_COMPREADATTR = 0x2,GCS_COMPREADCLAUSE = 0x4,GCS_COMPSTR = 0x8,GCS_COMPATTR = 0x10,GCS_COMPCLAUSE = 0x20,GCS_CURSORPOS = 0x80,GCS_DELTASTART = 0x100,GCS_RESULTREADSTR = 0x200,GCS_RESULTREADCLAUSE = 0x400,GCS_RESULTSTR = 0x800,GCS_RESULTCLAUSE = 0x1000,};
enum MACRO_GCW {GCW_ATOM = -32,};
enum MACRO_GDI {GDI_ERROR = 0xFFFFFFFF,HGDI_ERROR = 0xFFFFFFFF,};
enum MACRO_GET {GET_TAPE_MEDIA_INFORMATION = 0,GET_TAPE_DRIVE_INFORMATION = 1,};
enum MACRO_GGI {GGI_MARK_NONEXISTING_GLYPHS = 0x1,};
enum MACRO_GGL {GGL_LEVEL = 0x1,GGL_INDEX = 0x2,GGL_STRING = 0x3,GGL_PRIVATE = 0x4,};
enum MACRO_GGO {GGO_METRICS = 0,GGO_BITMAP = 1,GGO_NATIVE = 2,GGO_BEZIER = 3,GGO_GRAY2_BITMAP = 4,GGO_GRAY4_BITMAP = 5,GGO_GRAY8_BITMAP = 6,GGO_GLYPH_INDEX = 128,GGO_UNHINTED = 256,};
enum MACRO_GUI {GUI_CARETBLINKING = 0x1,GUI_INMOVESIZE = 0x2,GUI_INMENUMODE = 0x4,GUI_SYSTEMMENUMODE = 0x8,GUI_POPUPMENUMODE = 0x10,};
enum MACRO_GWL {GWL_WNDPROC = -4,GWL_HINSTANCE = -6,GWL_HWNDPARENT = -8,GWL_STYLE = -16,GWL_EXSTYLE = -20,GWL_USERDATA = -21,GWL_ID = -12,};
enum MACRO_HCF {HCF_HIGHCONTRASTON = 0x1,HCF_AVAILABLE = 0x2,HCF_HOTKEYACTIVE = 0x4,HCF_CONFIRMHOTKEY = 0x8,HCF_HOTKEYSOUND = 0x10,HCF_INDICATOR = 0x20,HCF_HOTKEYAVAILABLE = 0x40,};
enum MACRO_HKL {HKL_PREV = 0,HKL_NEXT = 1,};
enum MACRO_ICM {ICM_ADDPROFILE = 1,ICM_DELETEPROFILE = 2,ICM_QUERYPROFILE = 3,ICM_SETDEFAULTPROFILE = 4,ICM_REGISTERICMATCHER = 5,ICM_UNREGISTERICMATCHER = 6,ICM_QUERYMATCH = 7,};
enum MACRO_IDC {IDC_ARROW = 32512,IDC_IBEAM = 32513,IDC_WAIT = 32514,IDC_CROSS = 32515,IDC_UPARROW = 32516,IDC_SIZE = 32640,IDC_ICON = 32641,IDC_SIZENWSE = 32642,IDC_SIZENESW = 32643,IDC_SIZEWE = 32644,IDC_SIZENS = 32645,IDC_SIZEALL = 32646,IDC_NO = 32648,IDC_HAND = 32649,IDC_APPSTARTING = 32650,IDC_HELP = 32651,};
enum MACRO_IDH {IDH_NO_HELP = 28440,IDH_MISSING_CONTEXT = 28441,IDH_GENERIC_HELP_BUTTON = 28442,IDH_OK = 28443,IDH_CANCEL = 28444,IDH_HELP = 28445,};
enum MACRO_IDI {IDI_APPLICATION = 32512,IDI_HAND = 32513,IDI_QUESTION = 32514,IDI_EXCLAMATION = 32515,IDI_ASTERISK = 32516,IDI_WINLOGO = 32517,IDI_WARNING = 32515,IDI_ERROR = 32513,IDI_INFORMATION = 32516,};
enum MACRO_IGP {IGP_GETIMEVERSION = 4294967292,IGP_PROPERTY = 4,IGP_CONVERSION = 8,IGP_SENTENCE = 12,IGP_UI = 16,IGP_SETCOMPSTR = 20,IGP_SELECT = 24,};
enum MACRO_ILL {ILL_EXECUTION = 20,ILL_EXPLICITGEN = 21,ILL_PRIVILEGED = 22,ILL_BREAKPOINT = 23,ILL_SINGLE_STEP = 24,};
enum MACRO_IMC {IMC_GETCANDIDATEPOS = 0x7,IMC_SETCANDIDATEPOS = 0x8,IMC_GETCOMPOSITIONFONT = 0x9,IMC_SETCOMPOSITIONFONT = 0xA,IMC_GETCOMPOSITIONWINDOW = 0xB,IMC_SETCOMPOSITIONWINDOW = 0xC,IMC_GETSTATUSWINDOWPOS = 0xF,IMC_SETSTATUSWINDOWPOS = 0x10,IMC_CLOSESTATUSWINDOW = 0x21,IMC_OPENSTATUSWINDOW = 0x22,};
enum MACRO_IME {IME_CHOTKEY_IME_NONIME_TOGGLE = 0x10,IME_CHOTKEY_SHAPE_TOGGLE = 0x11,IME_CHOTKEY_SYMBOL_TOGGLE = 0x12,IME_JHOTKEY_CLOSE_OPEN = 0x30,IME_KHOTKEY_SHAPE_TOGGLE = 0x50,IME_KHOTKEY_HANJACONVERT = 0x51,IME_KHOTKEY_ENGLISH = 0x52,IME_THOTKEY_IME_NONIME_TOGGLE = 0x70,IME_THOTKEY_SHAPE_TOGGLE = 0x71,IME_THOTKEY_SYMBOL_TOGGLE = 0x72,IME_HOTKEY_DSWITCH_FIRST = 0x100,IME_HOTKEY_DSWITCH_LAST = 0x11F,IME_HOTKEY_PRIVATE_FIRST = 0x200,IME_ITHOTKEY_RESEND_RESULTSTR = 0x200,IME_ITHOTKEY_PREVIOUS_COMPOSITION = 0x201,IME_ITHOTKEY_UISTYLE_TOGGLE = 0x202,IME_ITHOTKEY_RECONVERTSTRING = 0x203,IME_HOTKEY_PRIVATE_LAST = 0x21F,};
enum MACRO_IMM {IMM_ERROR_NODATA = -1,IMM_ERROR_GENERAL = -2,};
enum MACRO_IMN {IMN_CLOSESTATUSWINDOW = 0x1,IMN_OPENSTATUSWINDOW = 0x2,IMN_CHANGECANDIDATE = 0x3,IMN_CLOSECANDIDATE = 0x4,IMN_OPENCANDIDATE = 0x5,IMN_SETCONVERSIONMODE = 0x6,IMN_SETSENTENCEMODE = 0x7,IMN_SETOPENSTATUS = 0x8,IMN_SETCANDIDATEPOS = 0x9,IMN_SETCOMPOSITIONFONT = 0xA,IMN_SETCOMPOSITIONWINDOW = 0xB,IMN_SETSTATUSWINDOWPOS = 0xC,IMN_GUIDELINE = 0xD,IMN_PRIVATE = 0xE,};
enum MACRO_IMR {IMR_COMPOSITIONWINDOW = 0x1,IMR_CANDIDATEWINDOW = 0x2,IMR_COMPOSITIONFONT = 0x3,IMR_RECONVERTSTRING = 0x4,IMR_CONFIRMRECONVERTSTRING = 0x5,IMR_QUERYCHARPOSITION = 0x6,IMR_DOCUMENTFEED = 0x7,};
enum MACRO_INT {INT_MIN = -2147483648,INT_MAX = 2147483647,};
enum MACRO_IOC {IOC_VOID = 0x20000000,IOC_OUT = 0x40000000,IOC_IN = 0x80000000,IOC_INOUT = 0xC0000000,};
enum MACRO_ISC {ISC_SHOWUICANDIDATEWINDOW = 0x1,ISC_SHOWUICOMPOSITIONWINDOW = 0x80000000,ISC_SHOWUIGUIDELINE = 0x40000000,ISC_SHOWUIALLCANDIDATEWINDOW = 0xF,ISC_SHOWUIALL = 0xC000000F,};
enum MACRO_JOB {JOB_OBJECT_ASSIGN_PROCESS = 0x1,JOB_OBJECT_SET_ATTRIBUTES = 0x2,JOB_OBJECT_QUERY = 0x4,JOB_OBJECT_TERMINATE = 0x8,JOB_OBJECT_SET_SECURITY_ATTRIBUTES = 0x10,JOB_OBJECT_ALL_ACCESS = 0x1F001F,};
enum MACRO_JOY {JOY_BUTTON1 = 0x1,JOY_BUTTON2 = 0x2,JOY_BUTTON3 = 0x4,JOY_BUTTON4 = 0x8,JOY_BUTTON1CHG = 0x100,JOY_BUTTON2CHG = 0x200,JOY_BUTTON3CHG = 0x400,JOY_BUTTON4CHG = 0x800,JOY_BUTTON5 = 0x10,JOY_BUTTON6 = 0x20,JOY_BUTTON7 = 0x40,JOY_BUTTON8 = 0x80,JOY_BUTTON9 = 0x100,JOY_BUTTON10 = 0x200,JOY_BUTTON11 = 0x400,JOY_BUTTON12 = 0x800,JOY_BUTTON13 = 0x1000,JOY_BUTTON14 = 0x2000,JOY_BUTTON15 = 0x4000,JOY_BUTTON16 = 0x8000,JOY_BUTTON17 = 0x10000,JOY_BUTTON18 = 0x20000,JOY_BUTTON19 = 0x40000,JOY_BUTTON20 = 0x80000,JOY_BUTTON21 = 0x100000,JOY_BUTTON22 = 0x200000,JOY_BUTTON23 = 0x400000,JOY_BUTTON24 = 0x800000,JOY_BUTTON25 = 0x1000000,JOY_BUTTON26 = 0x2000000,JOY_BUTTON27 = 0x4000000,JOY_BUTTON28 = 0x8000000,JOY_BUTTON29 = 0x10000000,JOY_BUTTON30 = 0x20000000,JOY_BUTTON31 = 0x40000000,JOY_BUTTON32 = 0x80000000,JOY_POVCENTERED = 0xFFFF,JOY_POVFORWARD = 0x0,JOY_POVRIGHT = 0x2328,JOY_POVBACKWARD = 0x4650,JOY_POVLEFT = 0x6978,JOY_RETURNX = 0x1,JOY_RETURNY = 0x2,JOY_RETURNZ = 0x4,JOY_RETURNR = 0x8,JOY_RETURNU = 0x10,JOY_RETURNV = 0x20,JOY_RETURNPOV = 0x40,JOY_RETURNBUTTONS = 0x80,JOY_RETURNRAWDATA = 0x100,JOY_RETURNPOVCTS = 0x200,JOY_RETURNCENTERED = 0x400,JOY_USEDEADZONE = 0x800,JOY_RETURNALL = 0xFF,JOY_CAL_READALWAYS = 0x10000,JOY_CAL_READXYONLY = 0x20000,JOY_CAL_READ3 = 0x40000,JOY_CAL_READ4 = 0x80000,JOY_CAL_READXONLY = 0x100000,JOY_CAL_READYONLY = 0x200000,JOY_CAL_READ5 = 0x400000,JOY_CAL_READ6 = 0x800000,JOY_CAL_READZONLY = 0x1000000,JOY_CAL_READRONLY = 0x2000000,JOY_CAL_READUONLY = 0x4000000,JOY_CAL_READVONLY = 0x8000000,};
enum MACRO_KEY {KEY_QUERY_VALUE = 0x1,KEY_SET_VALUE = 0x2,KEY_CREATE_SUB_KEY = 0x4,KEY_ENUMERATE_SUB_KEYS = 0x8,KEY_NOTIFY = 0x10,KEY_CREATE_LINK = 0x20,KEY_READ = 0x20019,KEY_WRITE = 0x20006,KEY_EXECUTE = 0x20019,KEY_ALL_ACCESS = 0xF003F,};
enum MACRO_KLF {KLF_ACTIVATE = 0x1,KLF_SUBSTITUTE_OK = 0x2,KLF_REORDER = 0x8,KLF_REPLACELANG = 0x10,KLF_NOTELLSHELL = 0x80,KLF_SETFORPROCESS = 0x100,KLF_SHIFTLOCK = 0x10000,KLF_RESET = 0x40000000,};
enum MACRO_LBN {LBN_ERRSPACE = -2,LBN_SELCHANGE = 1,LBN_DBLCLK = 2,LBN_SELCANCEL = 3,LBN_SETFOCUS = 4,LBN_KILLFOCUS = 5,};
enum MACRO_LBS {LBS_NOTIFY = 0x1,LBS_SORT = 0x2,LBS_NOREDRAW = 0x4,LBS_MULTIPLESEL = 0x8,LBS_OWNERDRAWFIXED = 0x10,LBS_OWNERDRAWVARIABLE = 0x20,LBS_HASSTRINGS = 0x40,LBS_USETABSTOPS = 0x80,LBS_NOINTEGRALHEIGHT = 0x100,LBS_MULTICOLUMN = 0x200,LBS_WANTKEYBOARDINPUT = 0x400,LBS_EXTENDEDSEL = 0x800,LBS_DISABLENOSCROLL = 0x1000,LBS_NODATA = 0x2000,LBS_NOSEL = 0x4000,LBS_STANDARD = 0xA00003,};
enum MACRO_LCS {LCS_SIGNATURE = 1347637059,LCS_sRGB = 1934772034,LCS_WINDOWS_COLOR_SPACE = 1466527264,LCS_CALIBRATED_RGB = 0,LCS_GM_BUSINESS = 1,LCS_GM_GRAPHICS = 2,LCS_GM_IMAGES = 4,LCS_GM_ABS_COLORIMETRIC = 8,};
enum MACRO_LEN {WSADESCRIPTION_LEN = 256,WSASYS_STATUS_LEN = 128,};
enum MACRO_LPD {LPD_DOUBLEBUFFER = 0x1,LPD_STEREO = 0x2,LPD_SUPPORT_GDI = 0x10,LPD_SUPPORT_OPENGL = 0x20,LPD_SHARE_DEPTH = 0x40,LPD_SHARE_STENCIL = 0x80,LPD_SHARE_ACCUM = 0x100,LPD_SWAP_EXCHANGE = 0x200,LPD_SWAP_COPY = 0x400,LPD_TRANSPARENT = 0x1000,LPD_TYPE_RGBA = 0x0,LPD_TYPE_COLORINDEX = 0x1,};
enum MACRO_LUP {LUP_DEEP = 0x1,LUP_CONTAINERS = 0x2,LUP_NOCONTAINERS = 0x4,LUP_NEAREST = 0x8,LUP_RETURN_NAME = 0x10,LUP_RETURN_TYPE = 0x20,LUP_RETURN_VERSION = 0x40,LUP_RETURN_COMMENT = 0x80,LUP_RETURN_ADDR = 0x100,LUP_RETURN_BLOB = 0x200,LUP_RETURN_ALIASES = 0x400,LUP_RETURN_QUERY_STRING = 0x800,LUP_RETURN_ALL = 0xFF0,LUP_RES_SERVICE = 0x8000,LUP_FLUSHCACHE = 0x1000,LUP_FLUSHPREVIOUS = 0x2000,};
enum MACRO_LWA {LWA_COLORKEY = 0x1,LWA_ALPHA = 0x2,};
enum MACRO_MAP {MAP_FOLDCZONE = 0x10,MAP_PRECOMPOSED = 0x20,MAP_COMPOSITE = 0x40,MAP_FOLDDIGITS = 0x80,MAP_EXPAND_LIGATURES = 0x2000,};
enum MACRO_MAX {TMP_MAX = 0xFFFF,FOPEN_MAX = 0x32,};
enum MACRO_MCI {MCI_STRING_OFFSET = 512,MCI_VD_OFFSET = 1024,MCI_CD_OFFSET = 1088,MCI_WAVE_OFFSET = 1152,MCI_SEQ_OFFSET = 1216,};
enum MACRO_MCW {MCW_EM = 0x3F,};
enum MACRO_MDM {MDM_COMPRESSION = 0x1,MDM_ERROR_CONTROL = 0x2,MDM_FORCED_EC = 0x4,MDM_CELLULAR = 0x8,MDM_FLOWCONTROL_HARD = 0x10,MDM_FLOWCONTROL_SOFT = 0x20,MDM_CCITT_OVERRIDE = 0x40,MDM_SPEED_ADJUST = 0x80,MDM_TONE_DIAL = 0x100,MDM_BLIND_DIAL = 0x200,MDM_V23_OVERRIDE = 0x400,MDM_DIAGNOSTICS = 0x800,MDM_MASK_BEARERMODE = 0xF000,MDM_SHIFT_BEARERMODE = 0xC,MDM_MASK_PROTOCOLID = 0xF0000,MDM_SHIFT_PROTOCOLID = 0x10,MDM_MASK_PROTOCOLDATA = 0xFF00000,MDM_SHIFT_PROTOCOLDATA = 0x14,MDM_MASK_PROTOCOLINFO = 0xFFF0000,MDM_SHIFT_PROTOCOLINFO = 0x10,MDM_MASK_EXTENDEDINFO = 0xFFFF000,MDM_SHIFT_EXTENDEDINFO = 0xC,MDM_BEARERMODE_ANALOG = 0x0,MDM_BEARERMODE_ISDN = 0x1,MDM_BEARERMODE_GSM = 0x2,MDM_PROTOCOLID_DEFAULT = 0x0,MDM_PROTOCOLID_HDLCPPP = 0x1,MDM_PROTOCOLID_V128 = 0x2,MDM_PROTOCOLID_X75 = 0x3,MDM_PROTOCOLID_V110 = 0x4,MDM_PROTOCOLID_V120 = 0x5,MDM_PROTOCOLID_AUTO = 0x6,MDM_PROTOCOLID_ANALOG = 0x7,MDM_PROTOCOLID_GPRS = 0x8,MDM_PROTOCOLID_PIAFS = 0x9,MDM_SHIFT_HDLCPPP_SPEED = 0x0,MDM_MASK_HDLCPPP_SPEED = 0x7,MDM_HDLCPPP_SPEED_DEFAULT = 0x0,MDM_HDLCPPP_SPEED_64K = 0x1,MDM_HDLCPPP_SPEED_56K = 0x2,MDM_SHIFT_HDLCPPP_AUTH = 0x3,MDM_MASK_HDLCPPP_AUTH = 0x38,MDM_HDLCPPP_AUTH_DEFAULT = 0x0,MDM_HDLCPPP_AUTH_NONE = 0x1,MDM_HDLCPPP_AUTH_PAP = 0x2,MDM_HDLCPPP_AUTH_CHAP = 0x3,MDM_HDLCPPP_AUTH_MSCHAP = 0x4,MDM_SHIFT_HDLCPPP_ML = 0x6,MDM_MASK_HDLCPPP_ML = 0xC0,MDM_HDLCPPP_ML_DEFAULT = 0x0,MDM_HDLCPPP_ML_NONE = 0x1,MDM_HDLCPPP_ML_2 = 0x2,MDM_PROTOCOL_HDLCPPP_64K = 0x110000,MDM_PROTOCOL_HDLCPPP_56K = 0x210000,MDM_PROTOCOL_HDLCPPP_112K = 0x8210000,MDM_PROTOCOL_HDLCPPP_112K_PAP = 0x9210000,MDM_PROTOCOL_HDLCPPP_112K_CHAP = 0x9A10000,MDM_PROTOCOL_HDLCPPP_112K_MSCHAP = 0xA210000,MDM_PROTOCOL_HDLCPPP_128K = 0x8110000,MDM_PROTOCOL_HDLCPPP_128K_PAP = 0x9110000,MDM_PROTOCOL_HDLCPPP_128K_CHAP = 0x9910000,MDM_PROTOCOL_HDLCPPP_128K_MSCHAP = 0xA110000,MDM_SHIFT_V120_SPEED = 0x0,MDM_MASK_V120_SPEED = 0x7,MDM_V120_SPEED_DEFAULT = 0x0,MDM_V120_SPEED_64K = 0x1,MDM_V120_SPEED_56K = 0x2,MDM_SHIFT_V120_ML = 0x6,MDM_MASK_V120_ML = 0xC0,MDM_V120_ML_DEFAULT = 0x0,MDM_V120_ML_NONE = 0x1,MDM_V120_ML_2 = 0x2,MDM_PROTOCOL_V120_64K = 0x4150000,MDM_PROTOCOL_V120_56K = 0x4250000,MDM_PROTOCOL_V120_112K = 0x8250000,MDM_PROTOCOL_V120_128K = 0x8150000,MDM_SHIFT_X75_DATA = 0x0,MDM_MASK_X75_DATA = 0x7,MDM_X75_DATA_DEFAULT = 0x0,MDM_X75_DATA_64K = 0x1,MDM_X75_DATA_128K = 0x2,MDM_X75_DATA_T_70 = 0x3,MDM_X75_DATA_BTX = 0x4,MDM_PROTOCOL_X75_64K = 0x130000,MDM_PROTOCOL_X75_128K = 0x230000,MDM_PROTOCOL_X75_T_70 = 0x330000,MDM_PROTOCOL_X75_BTX = 0x430000,MDM_SHIFT_V110_SPEED = 0x0,MDM_MASK_V110_SPEED = 0xF,MDM_V110_SPEED_DEFAULT = 0x0,MDM_V110_SPEED_1DOT2K = 0x1,MDM_V110_SPEED_2DOT4K = 0x2,MDM_V110_SPEED_4DOT8K = 0x3,MDM_V110_SPEED_9DOT6K = 0x4,MDM_V110_SPEED_12DOT0K = 0x5,MDM_V110_SPEED_14DOT4K = 0x6,MDM_V110_SPEED_19DOT2K = 0x7,MDM_V110_SPEED_28DOT8K = 0x8,MDM_V110_SPEED_38DOT4K = 0x9,MDM_V110_SPEED_57DOT6K = 0xA,MDM_PROTOCOL_V110_1DOT2K = 0x140000,MDM_PROTOCOL_V110_2DOT4K = 0x240000,MDM_PROTOCOL_V110_4DOT8K = 0x340000,MDM_PROTOCOL_V110_9DOT6K = 0x440000,MDM_PROTOCOL_V110_12DOT0K = 0x540000,MDM_PROTOCOL_V110_14DOT4K = 0x640000,MDM_PROTOCOL_V110_19DOT2K = 0x740000,MDM_PROTOCOL_V110_28DOT8K = 0x840000,MDM_PROTOCOL_V110_38DOT4K = 0x940000,MDM_PROTOCOL_V110_57DOT6K = 0xA40000,MDM_SHIFT_AUTO_SPEED = 0x0,MDM_MASK_AUTO_SPEED = 0x7,MDM_AUTO_SPEED_DEFAULT = 0x0,MDM_SHIFT_AUTO_ML = 0x6,MDM_MASK_AUTO_ML = 0xC0,MDM_AUTO_ML_DEFAULT = 0x0,MDM_AUTO_ML_NONE = 0x1,MDM_AUTO_ML_2 = 0x2,MDM_PROTOCOL_AUTO_1CH = 0x4060000,MDM_PROTOCOL_AUTO_2CH = 0x8060000,MDM_ANALOG_RLP_ON = 0x0,MDM_ANALOG_RLP_OFF = 0x1,MDM_ANALOG_V34 = 0x2,MDM_PROTOCOL_ANALOG_RLP = 0x70000,MDM_PROTOCOL_ANALOG_NRLP = 0x170000,MDM_PROTOCOL_ANALOG_V34 = 0x270000,MDM_PROTOCOL_GPRS = 0x80000,MDM_PIAFS_INCOMING = 0x0,MDM_PIAFS_OUTGOING = 0x1,MDM_PROTOCOL_PIAFS_INCOMING = 0x90000,MDM_PROTOCOL_PIAFS_OUTGOING = 0x190000,};
enum MACRO_MEM {MEM_COMMIT = 0x1000,MEM_RESERVE = 0x2000,MEM_DECOMMIT = 0x4000,MEM_RELEASE = 0x8000,MEM_FREE = 0x10000,MEM_PRIVATE = 0x20000,MEM_MAPPED = 0x40000,MEM_RESET = 0x80000,MEM_TOP_DOWN = 0x100000,MEM_WRITE_WATCH = 0x200000,MEM_PHYSICAL = 0x400000,MEM_4MB_PAGES = 0x80000000,};
enum MACRO_MFS {MFS_GRAYED = 0x3,MFS_DISABLED = 0x3,MFS_CHECKED = 0x8,MFS_HILITE = 0x80,MFS_ENABLED = 0x0,MFS_UNCHECKED = 0x0,MFS_UNHILITE = 0x0,MFS_DEFAULT = 0x1000,};
enum MACRO_MFT {MFT_STRING = 0,MFT_BITMAP = 4,MFT_MENUBARBREAK = 32,MFT_MENUBREAK = 64,MFT_OWNERDRAW = 256,MFT_RADIOCHECK = 512,MFT_SEPARATOR = 2048,MFT_RIGHTORDER = 8192,MFT_RIGHTJUSTIFY = 16384,};
enum MACRO_MIM {MIM_MAXHEIGHT = 0x1,MIM_BACKGROUND = 0x2,MIM_HELPID = 0x4,MIM_MENUDATA = 0x8,MIM_STYLE = 0x10,MIM_APPLYTOSUBMENUS = 0x80000000,};
enum MACRO_MKF {MKF_MOUSEKEYSON = 0x1,MKF_AVAILABLE = 0x2,MKF_HOTKEYACTIVE = 0x4,MKF_CONFIRMHOTKEY = 0x8,MKF_HOTKEYSOUND = 0x10,MKF_INDICATOR = 0x20,MKF_MODIFIERS = 0x40,MKF_REPLACENUMBERS = 0x80,MKF_LEFTBUTTONSEL = 0x10000000,MKF_RIGHTBUTTONSEL = 0x20000000,MKF_LEFTBUTTONDOWN = 0x1000000,MKF_RIGHTBUTTONDOWN = 0x2000000,MKF_MOUSEMODE = 0x80000000,};
enum MACRO_MNC {MNC_IGNORE = 0,MNC_CLOSE = 1,MNC_EXECUTE = 2,MNC_SELECT = 3,};
enum MACRO_MND {MND_CONTINUE = 0,MND_ENDMENU = 1,};
enum MACRO_MNS {MNS_NOCHECK = 0x80000000,MNS_MODELESS = 0x40000000,MNS_DRAGDROP = 0x20000000,MNS_AUTODISMISS = 0x10000000,MNS_NOTIFYBYPOS = 0x8000000,MNS_CHECKORBMP = 0x4000000,};
enum MACRO_MOD {MOD_ALT = 0x1,MOD_CONTROL = 0x2,MOD_SHIFT = 0x4,MOD_WIN = 0x8,};
enum MACRO_MOM {MOM_OPEN = 967,MOM_CLOSE = 968,MOM_DONE = 969,};
enum MACRO_MSG {MSG_OOB = 0x1,MSG_PEEK = 0x2,MSG_DONTROUTE = 0x4,MSG_PARTIAL = 0x8000,MSG_INTERRUPT = 0x10,MSG_MAXIOVLEN = 0x10,};
enum MACRO_MWT {MWT_IDENTITY = 1,MWT_LEFTMULTIPLY = 2,MWT_RIGHTMULTIPLY = 3,MWT_MIN = 1,MWT_MAX = 3,};
enum MACRO_NDR {NDR_CHAR_REP_MASK = 0xF,NDR_INT_REP_MASK = 0xF0,NDR_FLOAT_REP_MASK = 0xFF00,NDR_LITTLE_ENDIAN = 0x10,NDR_BIG_ENDIAN = 0x0,NDR_IEEE_FLOAT = 0x0,NDR_VAX_FLOAT = 0x100,NDR_IBM_FLOAT = 0x300,NDR_ASCII_CHAR = 0x0,NDR_EBCDIC_CHAR = 0x1,NDR_LOCAL_DATA_REPRESENTATION = 0x10,NDR_LOCAL_ENDIAN = 0x10,};
enum MACRO_NFR {NFR_ANSI = 1,NFR_UNICODE = 2,};
enum MACRO_NIF {NIF_MESSAGE = 0x1,NIF_ICON = 0x2,NIF_TIP = 0x4,};
enum MACRO_NIM {NIM_ADD = 0x0,NIM_MODIFY = 0x1,NIM_DELETE = 0x2,};
enum MACRO_NLS {NLS_VALID_LOCALE_MASK = 0xFFFFF,};
enum MACRO_NOP {NOP_FUNCTION = 0,};
enum MACRO_NRC {NRC_GOODRET = 0x0,NRC_BUFLEN = 0x1,NRC_ILLCMD = 0x3,NRC_CMDTMO = 0x5,NRC_INCOMP = 0x6,NRC_BADDR = 0x7,NRC_SNUMOUT = 0x8,NRC_NORES = 0x9,NRC_SCLOSED = 0xA,NRC_CMDCAN = 0xB,NRC_DUPNAME = 0xD,NRC_NAMTFUL = 0xE,NRC_ACTSES = 0xF,NRC_LOCTFUL = 0x11,NRC_REMTFUL = 0x12,NRC_ILLNN = 0x13,NRC_NOCALL = 0x14,NRC_NOWILD = 0x15,NRC_INUSE = 0x16,NRC_NAMERR = 0x17,NRC_SABORT = 0x18,NRC_NAMCONF = 0x19,NRC_IFBUSY = 0x21,NRC_TOOMANY = 0x22,NRC_BRIDGE = 0x23,NRC_CANOCCR = 0x24,NRC_CANCEL = 0x26,NRC_DUPENV = 0x30,NRC_ENVNOTDEF = 0x34,NRC_OSRESNOTAV = 0x35,NRC_MAXAPPS = 0x36,NRC_NOSAPS = 0x37,NRC_NORESOURCES = 0x38,NRC_INVADDRESS = 0x39,NRC_INVDDID = 0x3B,NRC_LOCKFAIL = 0x3C,NRC_OPENERR = 0x3F,NRC_SYSTEM = 0x40,NRC_PENDING = 0xFF,};
enum MACRO_NSS {NSS_CONTROL_MARK = 1,NSS_CONTROL_UNMARK = 2,NSS_CONTROL_ISNSSFILE = 4,};
enum MACRO_NTE {NTE_OP_OK = 0,};
enum MACRO_NTM {NTM_REGULAR = 0x40,NTM_BOLD = 0x20,NTM_ITALIC = 0x1,NTM_NONNEGATIVE_AC = 0x10000,NTM_PS_OPENTYPE = 0x20000,NTM_TT_OPENTYPE = 0x40000,NTM_MULTIPLEMASTER = 0x80000,NTM_TYPE1 = 0x100000,NTM_DSIG = 0x200000,};
enum MACRO_OBJ {OBJ_PEN = 1,OBJ_BRUSH = 2,OBJ_DC = 3,OBJ_METADC = 4,OBJ_PAL = 5,OBJ_FONT = 6,OBJ_BITMAP = 7,OBJ_REGION = 8,OBJ_METAFILE = 9,OBJ_MEMDC = 10,OBJ_EXTPEN = 11,OBJ_ENHMETADC = 12,OBJ_ENHMETAFILE = 13,OBJ_COLORSPACE = 14,};
enum MACRO_ODA {ODA_DRAWENTIRE = 0x1,ODA_SELECT = 0x2,ODA_FOCUS = 0x4,};
enum MACRO_ODS {ODS_SELECTED = 0x1,ODS_GRAYED = 0x2,ODS_DISABLED = 0x4,ODS_CHECKED = 0x8,ODS_FOCUS = 0x10,ODS_DEFAULT = 0x20,ODS_COMBOBOXEDIT = 0x1000,ODS_HOTLIGHT = 0x40,ODS_INACTIVE = 0x80,ODS_NOACCEL = 0x100,ODS_NOFOCUSRECT = 0x200,};
enum MACRO_ODT {ODT_MENU = 1,ODT_LISTBOX = 2,ODT_COMBOBOX = 3,ODT_BUTTON = 4,ODT_STATIC = 5,};
enum MACRO_OFN {OFN_READONLY = 0x1,OFN_OVERWRITEPROMPT = 0x2,OFN_HIDEREADONLY = 0x4,OFN_NOCHANGEDIR = 0x8,OFN_SHOWHELP = 0x10,OFN_ENABLEHOOK = 0x20,OFN_ENABLETEMPLATE = 0x40,OFN_ENABLETEMPLATEHANDLE = 0x80,OFN_NOVALIDATE = 0x100,OFN_ALLOWMULTISELECT = 0x200,OFN_EXTENSIONDIFFERENT = 0x400,OFN_PATHMUSTEXIST = 0x800,OFN_FILEMUSTEXIST = 0x1000,OFN_CREATEPROMPT = 0x2000,OFN_SHAREAWARE = 0x4000,OFN_NOREADONLYRETURN = 0x8000,OFN_NOTESTFILECREATE = 0x10000,OFN_NONETWORKBUTTON = 0x20000,OFN_NOLONGNAMES = 0x40000,OFN_EXPLORER = 0x80000,OFN_NODEREFERENCELINKS = 0x100000,OFN_LONGNAMES = 0x200000,OFN_ENABLEINCLUDENOTIFY = 0x400000,OFN_ENABLESIZING = 0x800000,OFN_DONTADDTORECENT = 0x2000000,OFN_FORCESHOWHIDDEN = 0x10000000,OFN_EX_NOPLACESBAR = 0x1,OFN_SHAREFALLTHROUGH = 0x2,OFN_SHARENOWARN = 0x1,OFN_SHAREWARN = 0x0,};
enum MACRO_OFS {OFS_MAXPATHNAME = 128,};
enum MACRO_OLE {OLE_E_FIRST = 0x80040000,OLE_E_LAST = 0x800400FF,OLE_S_FIRST = 0x40000,OLE_S_LAST = 0x400FF,};
enum MACRO_ORD {ORD_LANGDRIVER = 1,};
enum MACRO_OUT {OUT_DEFAULT_PRECIS = 0,OUT_STRING_PRECIS = 1,OUT_CHARACTER_PRECIS = 2,OUT_STROKE_PRECIS = 3,OUT_TT_PRECIS = 4,OUT_DEVICE_PRECIS = 5,OUT_RASTER_PRECIS = 6,OUT_TT_ONLY_PRECIS = 7,OUT_OUTLINE_PRECIS = 8,OUT_SCREEN_OUTLINE_PRECIS = 9,OUT_PS_ONLY_PRECIS = 10,};
enum MACRO_PAN {PAN_FAMILYTYPE_INDEX = 0,PAN_SERIFSTYLE_INDEX = 1,PAN_WEIGHT_INDEX = 2,PAN_PROPORTION_INDEX = 3,PAN_CONTRAST_INDEX = 4,PAN_STROKEVARIATION_INDEX = 5,PAN_ARMSTYLE_INDEX = 6,PAN_LETTERFORM_INDEX = 7,PAN_MIDLINE_INDEX = 8,PAN_XHEIGHT_INDEX = 9,PAN_CULTURE_LATIN = 0,PAN_ANY = 0,PAN_NO_FIT = 1,PAN_FAMILY_TEXT_DISPLAY = 2,PAN_FAMILY_SCRIPT = 3,PAN_FAMILY_DECORATIVE = 4,PAN_FAMILY_PICTORIAL = 5,PAN_SERIF_COVE = 2,PAN_SERIF_OBTUSE_COVE = 3,PAN_SERIF_SQUARE_COVE = 4,PAN_SERIF_OBTUSE_SQUARE_COVE = 5,PAN_SERIF_SQUARE = 6,PAN_SERIF_THIN = 7,PAN_SERIF_BONE = 8,PAN_SERIF_EXAGGERATED = 9,PAN_SERIF_TRIANGLE = 10,PAN_SERIF_NORMAL_SANS = 11,PAN_SERIF_OBTUSE_SANS = 12,PAN_SERIF_PERP_SANS = 13,PAN_SERIF_FLARED = 14,PAN_SERIF_ROUNDED = 15,PAN_WEIGHT_VERY_LIGHT = 2,PAN_WEIGHT_LIGHT = 3,PAN_WEIGHT_THIN = 4,PAN_WEIGHT_BOOK = 5,PAN_WEIGHT_MEDIUM = 6,PAN_WEIGHT_DEMI = 7,PAN_WEIGHT_BOLD = 8,PAN_WEIGHT_HEAVY = 9,PAN_WEIGHT_BLACK = 10,PAN_WEIGHT_NORD = 11,PAN_PROP_OLD_STYLE = 2,PAN_PROP_MODERN = 3,PAN_PROP_EVEN_WIDTH = 4,PAN_PROP_EXPANDED = 5,PAN_PROP_CONDENSED = 6,PAN_PROP_VERY_EXPANDED = 7,PAN_PROP_VERY_CONDENSED = 8,PAN_PROP_MONOSPACED = 9,PAN_CONTRAST_NONE = 2,PAN_CONTRAST_VERY_LOW = 3,PAN_CONTRAST_LOW = 4,PAN_CONTRAST_MEDIUM_LOW = 5,PAN_CONTRAST_MEDIUM = 6,PAN_CONTRAST_MEDIUM_HIGH = 7,PAN_CONTRAST_HIGH = 8,PAN_CONTRAST_VERY_HIGH = 9,PAN_STROKE_GRADUAL_DIAG = 2,PAN_STROKE_GRADUAL_TRAN = 3,PAN_STROKE_GRADUAL_VERT = 4,PAN_STROKE_GRADUAL_HORZ = 5,PAN_STROKE_RAPID_VERT = 6,PAN_STROKE_RAPID_HORZ = 7,PAN_STROKE_INSTANT_VERT = 8,PAN_STRAIGHT_ARMS_HORZ = 2,PAN_STRAIGHT_ARMS_WEDGE = 3,PAN_STRAIGHT_ARMS_VERT = 4,PAN_STRAIGHT_ARMS_SINGLE_SERIF = 5,PAN_STRAIGHT_ARMS_DOUBLE_SERIF = 6,PAN_BENT_ARMS_HORZ = 7,PAN_BENT_ARMS_WEDGE = 8,PAN_BENT_ARMS_VERT = 9,PAN_BENT_ARMS_SINGLE_SERIF = 10,PAN_BENT_ARMS_DOUBLE_SERIF = 11,PAN_LETT_NORMAL_CONTACT = 2,PAN_LETT_NORMAL_WEIGHTED = 3,PAN_LETT_NORMAL_BOXED = 4,PAN_LETT_NORMAL_FLATTENED = 5,PAN_LETT_NORMAL_ROUNDED = 6,PAN_LETT_NORMAL_OFF_CENTER = 7,PAN_LETT_NORMAL_SQUARE = 8,PAN_LETT_OBLIQUE_CONTACT = 9,PAN_LETT_OBLIQUE_WEIGHTED = 10,PAN_LETT_OBLIQUE_BOXED = 11,PAN_LETT_OBLIQUE_FLATTENED = 12,PAN_LETT_OBLIQUE_ROUNDED = 13,PAN_LETT_OBLIQUE_OFF_CENTER = 14,PAN_LETT_OBLIQUE_SQUARE = 15,PAN_MIDLINE_STANDARD_TRIMMED = 2,PAN_MIDLINE_STANDARD_POINTED = 3,PAN_MIDLINE_STANDARD_SERIFED = 4,PAN_MIDLINE_HIGH_TRIMMED = 5,PAN_MIDLINE_HIGH_POINTED = 6,PAN_MIDLINE_HIGH_SERIFED = 7,PAN_MIDLINE_CONSTANT_TRIMMED = 8,PAN_MIDLINE_CONSTANT_POINTED = 9,PAN_MIDLINE_CONSTANT_SERIFED = 10,PAN_MIDLINE_LOW_TRIMMED = 11,PAN_MIDLINE_LOW_POINTED = 12,PAN_MIDLINE_LOW_SERIFED = 13,PAN_XHEIGHT_CONSTANT_SMALL = 2,PAN_XHEIGHT_CONSTANT_STD = 3,PAN_XHEIGHT_CONSTANT_LARGE = 4,PAN_XHEIGHT_DUCKING_SMALL = 5,PAN_XHEIGHT_DUCKING_STD = 6,PAN_XHEIGHT_DUCKING_LARGE = 7,};
enum MACRO_PBT {PBT_APMQUERYSUSPEND = 0x0,PBT_APMQUERYSTANDBY = 0x1,PBT_APMQUERYSUSPENDFAILED = 0x2,PBT_APMQUERYSTANDBYFAILED = 0x3,PBT_APMSUSPEND = 0x4,PBT_APMSTANDBY = 0x5,PBT_APMRESUMECRITICAL = 0x6,PBT_APMRESUMESUSPEND = 0x7,PBT_APMRESUMESTANDBY = 0x8,};
enum MACRO_PCF {PCF_DTRDSR = 0x1,PCF_RTSCTS = 0x2,PCF_RLSD = 0x4,PCF_PARITY_CHECK = 0x8,PCF_XONXOFF = 0x10,PCF_SETXCHAR = 0x20,PCF_TOTALTIMEOUTS = 0x40,PCF_INTTIMEOUTS = 0x80,PCF_SPECIALCHARS = 0x100,PCF_16BITMODE = 0x200,};
enum MACRO_PEN {WHITE_PEN = 6,BLACK_PEN = 7,NULL_PEN = 8,};
enum MACRO_PFD {PFD_TYPE_RGBA = 0,PFD_TYPE_COLORINDEX = 1,PFD_MAIN_PLANE = 0,PFD_OVERLAY_PLANE = 1,PFD_UNDERLAY_PLANE = -1,PFD_DOUBLEBUFFER = 1,PFD_STEREO = 2,PFD_DRAW_TO_WINDOW = 4,PFD_DRAW_TO_BITMAP = 8,PFD_SUPPORT_GDI = 16,PFD_SUPPORT_OPENGL = 32,PFD_GENERIC_FORMAT = 64,PFD_NEED_PALETTE = 128,PFD_NEED_SYSTEM_PALETTE = 256,PFD_SWAP_EXCHANGE = 512,PFD_SWAP_COPY = 1024,PFD_SWAP_LAYER_BUFFERS = 2048,PFD_GENERIC_ACCELERATED = 4096,PFD_SUPPORT_DIRECTDRAW = 8192,PFD_DEPTH_DONTCARE = 536870912,PFD_DOUBLEBUFFER_DONTCARE = 1073741824,PFD_STEREO_DONTCARE = -2147483648,};
enum MACRO_PFL {PFL_MULTIPLE_PROTO_ENTRIES = 0x1,PFL_RECOMMENDED_PROTO_ENTRY = 0x2,PFL_HIDDEN = 0x4,PFL_MATCHES_PROTOCOL_ZERO = 0x8,};
enum MACRO_PID {PID_DICTIONARY = 0,PID_CODEPAGE = 1,PID_FIRST_USABLE = 2,PID_FIRST_NAME_DEFAULT = 4095,PID_LOCALE = -2147483648,PID_MODIFY_TIME = -2147483647,PID_SECURITY = -2147483646,PID_BEHAVIOR = -2147483645,PID_ILLEGAL = -1,PID_MIN_READONLY = -2147483648,PID_MAX_READONLY = -1073741825,};
enum MACRO_PRF {PRF_CHECKVISIBLE = 0x1,PRF_NONCLIENT = 0x2,PRF_CLIENT = 0x4,PRF_ERASEBKGND = 0x8,PRF_CHILDREN = 0x10,PRF_OWNED = 0x20,};
enum MACRO_PSD {PSD_DEFAULTMINMARGINS = 0x0,PSD_INWININIINTLMEASURE = 0x0,PSD_MINMARGINS = 0x1,PSD_MARGINS = 0x2,PSD_INTHOUSANDTHSOFINCHES = 0x4,PSD_INHUNDREDTHSOFMILLIMETERS = 0x8,PSD_DISABLEMARGINS = 0x10,PSD_DISABLEPRINTER = 0x20,PSD_NOWARNING = 0x80,PSD_DISABLEORIENTATION = 0x100,PSD_RETURNDEFAULT = 0x400,PSD_DISABLEPAPER = 0x200,PSD_SHOWHELP = 0x800,PSD_ENABLEPAGESETUPHOOK = 0x2000,PSD_ENABLEPAGESETUPTEMPLATE = 0x8000,PSD_ENABLEPAGESETUPTEMPLATEHANDLE = 0x20000,PSD_ENABLEPAGEPAINTHOOK = 0x40000,PSD_DISABLEPAGEPAINTING = 0x80000,PSD_NONETWORKBUTTON = 0x200000,};
enum MACRO_PSH {PSH_DEFAULT = 0x0,PSH_PROPTITLE = 0x1,PSH_USEHICON = 0x2,PSH_USEICONID = 0x4,PSH_PROPSHEETPAGE = 0x8,PSH_WIZARDHASFINISH = 0x10,PSH_WIZARD = 0x20,PSH_USEPSTARTPAGE = 0x40,PSH_NOAPPLYNOW = 0x80,PSH_USECALLBACK = 0x100,PSH_HASHELP = 0x200,PSH_MODELESS = 0x400,PSH_RTLREADING = 0x800,PSH_WIZARDCONTEXTHELP = 0x1000,PSH_WIZARD97 = 0x1000000,PSH_WATERMARK = 0x8000,PSH_USEHBMWATERMARK = 0x10000,PSH_USEHPLWATERMARK = 0x20000,PSH_STRETCHWATERMARK = 0x40000,PSH_HEADER = 0x80000,PSH_USEHBMHEADER = 0x100000,PSH_USEPAGELANG = 0x200000,PSH_WIZARD_LITE = 0x400000,PSH_NOCONTEXTHELP = 0x2000000,};
enum MACRO_PSM {PSM_SETTITLE = 1135,};
enum MACRO_PSN {PSN_FIRST = -200,PSN_LAST = -299,PSN_SETACTIVE = -200,PSN_KILLACTIVE = -201,PSN_APPLY = -202,PSN_RESET = -203,PSN_HELP = -205,PSN_WIZBACK = -206,PSN_WIZNEXT = -207,PSN_WIZFINISH = -208,PSN_QUERYCANCEL = -209,PSN_GETOBJECT = -210,PSN_TRANSLATEACCELERATOR = -212,PSN_QUERYINITIALFOCUS = -213,};
enum MACRO_PSP {PSP_DEFAULT = 0x0,PSP_DLGINDIRECT = 0x1,PSP_USEHICON = 0x2,PSP_USEICONID = 0x4,PSP_USETITLE = 0x8,PSP_RTLREADING = 0x10,PSP_HASHELP = 0x20,PSP_USEREFPARENT = 0x40,PSP_USECALLBACK = 0x80,PSP_PREMATURE = 0x400,PSP_HIDEHEADER = 0x800,PSP_USEHEADERTITLE = 0x1000,PSP_USEHEADERSUBTITLE = 0x2000,};
enum MACRO_PST {PST_UNSPECIFIED = 0x0,PST_RS232 = 0x1,PST_PARALLELPORT = 0x2,PST_RS422 = 0x3,PST_RS423 = 0x4,PST_RS449 = 0x5,PST_MODEM = 0x6,PST_FAX = 0x21,PST_SCANNER = 0x22,PST_NETWORK_BRIDGE = 0x100,PST_LAT = 0x101,PST_TCPIP_TELNET = 0x102,PST_X25 = 0x103,};
enum MACRO_PTR {MAXUINT_PTR = -1,MAXINT_PTR = -1,MININT_PTR = 0,MAXULONG_PTR = -1,MAXLONG_PTR = -1,MINLONG_PTR = 0,MAXUHALF_PTR = 65535,MAXHALF_PTR = 32767,MINHALF_PTR = -32768,};
enum MACRO_PVD {PVD_CONFIG = 0x3001,};
enum MACRO_PWR {PWR_OK = 1,PWR_FAIL = -1,PWR_SUSPENDREQUEST = 1,PWR_SUSPENDRESUME = 2,PWR_CRITICALRESUME = 3,};
enum MACRO_QDI {QDI_SETDIBITS = 1,QDI_GETDIBITS = 2,QDI_DIBTOSCREEN = 4,QDI_STRETCHDIB = 8,};
enum MACRO_QID {QID_SYNC = 0xFFFFFFFF,};
enum MACRO_QOS {QOS_NOT_SPECIFIED = 0xFFFFFFFF,};
enum MACRO_RDH {RDH_RECTANGLES = 1,};
enum MACRO_RDW {RDW_INVALIDATE = 0x1,RDW_INTERNALPAINT = 0x2,RDW_ERASE = 0x4,RDW_VALIDATE = 0x8,RDW_NOINTERNALPAINT = 0x10,RDW_NOERASE = 0x20,RDW_NOCHILDREN = 0x40,RDW_ALLCHILDREN = 0x80,RDW_UPDATENOW = 0x100,RDW_ERASENOW = 0x200,RDW_FRAME = 0x400,RDW_NOFRAME = 0x800,};
enum MACRO_REG {REG_OPTION_RESERVED = 0x0,REG_OPTION_NON_VOLATILE = 0x0,REG_OPTION_VOLATILE = 0x1,REG_OPTION_CREATE_LINK = 0x2,REG_OPTION_BACKUP_RESTORE = 0x4,REG_OPTION_OPEN_LINK = 0x8,REG_LEGAL_OPTION = 0xF,REG_CREATED_NEW_KEY = 0x1,REG_OPENED_EXISTING_KEY = 0x2,REG_WHOLE_HIVE_VOLATILE = 0x1,REG_REFRESH_HIVE = 0x2,REG_NO_LAZY_FLUSH = 0x4,REG_FORCE_RESTORE = 0x8,REG_NOTIFY_CHANGE_NAME = 0x1,REG_NOTIFY_CHANGE_ATTRIBUTES = 0x2,REG_NOTIFY_CHANGE_LAST_SET = 0x4,REG_NOTIFY_CHANGE_SECURITY = 0x8,REG_LEGAL_CHANGE_FILTER = 0xF,REG_NONE = 0x0,REG_SZ = 0x1,REG_EXPAND_SZ = 0x2,REG_BINARY = 0x3,REG_DWORD = 0x4,REG_DWORD_LITTLE_ENDIAN = 0x4,REG_DWORD_BIG_ENDIAN = 0x5,REG_LINK = 0x6,REG_MULTI_SZ = 0x7,REG_RESOURCE_LIST = 0x8,REG_FULL_RESOURCE_DESCRIPTOR = 0x9,REG_RESOURCE_REQUIREMENTS_LIST = 0xA,REG_QWORD = 0xB,REG_QWORD_LITTLE_ENDIAN = 0xB,};
enum MACRO_RES {RES_ICON = 1,RES_CURSOR = 2,};
enum MACRO_RGB {RGB_GAMMA_MIN = 0x540,RGB_GAMMA_MAX = 0xFDE8,};
enum MACRO_RGN {RGN_ERROR = 0,RGN_AND = 1,RGN_OR = 2,RGN_XOR = 3,RGN_DIFF = 4,RGN_COPY = 5,RGN_MIN = 1,RGN_MAX = 5,};
enum MACRO_ROT {ROT_COMPARE_MAX = 2048,};
enum MACRO_RPC {RPC_C_BINDING_INFINITE_TIMEOUT = 10,RPC_C_BINDING_MIN_TIMEOUT = 0,RPC_C_BINDING_DEFAULT_TIMEOUT = 5,RPC_C_BINDING_MAX_TIMEOUT = 9,RPC_C_CANCEL_INFINITE_TIMEOUT = -1,RPC_C_LISTEN_MAX_CALLS_DEFAULT = 1234,RPC_C_PROTSEQ_MAX_REQS_DEFAULT = 10,RPC_C_BIND_TO_ALL_NICS = 1,RPC_C_USE_INTERNET_PORT = 1,RPC_C_USE_INTRANET_PORT = 2,RPC_C_DONT_FAIL = 4,RPC_C_MQ_TEMPORARY = 0,RPC_C_MQ_PERMANENT = 1,RPC_C_MQ_CLEAR_ON_OPEN = 2,RPC_C_MQ_USE_EXISTING_SECURITY = 4,RPC_C_MQ_AUTHN_LEVEL_NONE = 0,RPC_C_MQ_AUTHN_LEVEL_PKT_INTEGRITY = 8,RPC_C_MQ_AUTHN_LEVEL_PKT_PRIVACY = 16,RPC_C_OPT_MQ_DELIVERY = 1,RPC_C_OPT_MQ_PRIORITY = 2,RPC_C_OPT_MQ_JOURNAL = 3,RPC_C_OPT_MQ_ACKNOWLEDGE = 4,RPC_C_OPT_MQ_AUTHN_SERVICE = 5,RPC_C_OPT_MQ_AUTHN_LEVEL = 6,RPC_C_OPT_MQ_TIME_TO_REACH_QUEUE = 7,RPC_C_OPT_MQ_TIME_TO_BE_RECEIVED = 8,RPC_C_OPT_BINDING_NONCAUSAL = 9,RPC_C_OPT_SECURITY_CALLBACK = 10,RPC_C_OPT_UNIQUE_BINDING = 11,RPC_C_OPT_MAX_OPTIONS = 12,RPC_C_MQ_EXPRESS = 0,RPC_C_MQ_RECOVERABLE = 1,RPC_C_MQ_JOURNAL_NONE = 0,RPC_C_MQ_JOURNAL_DEADLETTER = 1,RPC_C_MQ_JOURNAL_ALWAYS = 2,RPC_C_FULL_CERT_CHAIN = 1,RPC_C_STATS_CALLS_IN = 0,RPC_C_STATS_CALLS_OUT = 1,RPC_C_STATS_PKTS_IN = 2,RPC_C_STATS_PKTS_OUT = 3,RPC_C_AUTHN_LEVEL_DEFAULT = 0,RPC_C_AUTHN_LEVEL_NONE = 1,RPC_C_AUTHN_LEVEL_CONNECT = 2,RPC_C_AUTHN_LEVEL_CALL = 3,RPC_C_AUTHN_LEVEL_PKT = 4,RPC_C_AUTHN_LEVEL_PKT_INTEGRITY = 5,RPC_C_AUTHN_LEVEL_PKT_PRIVACY = 6,RPC_C_IMP_LEVEL_DEFAULT = 0,RPC_C_IMP_LEVEL_ANONYMOUS = 1,RPC_C_IMP_LEVEL_IDENTIFY = 2,RPC_C_IMP_LEVEL_IMPERSONATE = 3,RPC_C_IMP_LEVEL_DELEGATE = 4,RPC_C_QOS_IDENTITY_STATIC = 0,RPC_C_QOS_IDENTITY_DYNAMIC = 1,RPC_C_QOS_CAPABILITIES_DEFAULT = 0,RPC_C_QOS_CAPABILITIES_MUTUAL_AUTH = 1,RPC_C_QOS_CAPABILITIES_MAKE_FULLSIC = 2,RPC_C_QOS_CAPABILITIES_ANY_AUTHORITY = 4,RPC_C_PROTECT_LEVEL_DEFAULT = 0,RPC_C_PROTECT_LEVEL_NONE = 1,RPC_C_PROTECT_LEVEL_CONNECT = 2,RPC_C_PROTECT_LEVEL_CALL = 3,RPC_C_PROTECT_LEVEL_PKT = 4,RPC_C_PROTECT_LEVEL_PKT_INTEGRITY = 5,RPC_C_PROTECT_LEVEL_PKT_PRIVACY = 6,RPC_C_AUTHN_NONE = 0,RPC_C_AUTHN_DCE_PRIVATE = 1,RPC_C_AUTHN_DCE_PUBLIC = 2,RPC_C_AUTHN_DEC_PUBLIC = 4,RPC_C_AUTHN_GSS_NEGOTIATE = 9,RPC_C_AUTHN_WINNT = 10,RPC_C_AUTHN_GSS_SCHANNEL = 14,RPC_C_AUTHN_GSS_KERBEROS = 16,RPC_C_AUTHN_MSN = 17,RPC_C_AUTHN_DPA = 18,RPC_C_AUTHN_MQ = 100,RPC_C_AUTHN_DEFAULT = -1,RPC_C_NO_CREDENTIALS = -1,RPC_C_SECURITY_QOS_VERSION = 1,};
enum MACRO_RSA {RSA_CSP_PUBLICKEYBLOB = 19,};
enum MACRO_RTL {RTL_CRITSECT_TYPE = 0,RTL_RESOURCE_TYPE = 1,};
enum MACRO_RTS {RTS_CONTROL_DISABLE = 0x0,RTS_CONTROL_ENABLE = 0x1,RTS_CONTROL_HANDSHAKE = 0x2,RTS_CONTROL_TOGGLE = 0x3,};
enum MACRO_SBS {SBS_HORZ = 0x0,SBS_VERT = 0x1,SBS_TOPALIGN = 0x2,SBS_LEFTALIGN = 0x2,SBS_BOTTOMALIGN = 0x4,SBS_RIGHTALIGN = 0x4,SBS_SIZEBOXTOPLEFTALIGN = 0x2,SBS_SIZEBOXBOTTOMRIGHTALIGN = 0x4,SBS_SIZEBOX = 0x8,SBS_SIZEGRIP = 0x10,};
enum MACRO_SCS {SCS_32BIT_BINARY = 0,SCS_DOS_BINARY = 1,SCS_WOW_BINARY = 2,SCS_PIF_BINARY = 3,SCS_POSIX_BINARY = 4,SCS_OS216_BINARY = 5,};
enum MACRO_SEC {SEC_FILE = 0x800000,SEC_IMAGE = 0x1000000,SEC_VLM = 0x2000000,SEC_RESERVE = 0x4000000,SEC_COMMIT = 0x8000000,SEC_NOCACHE = 0x10000000,};
enum MACRO_SEE {SEE_MASK_CLASSNAME = 0x1,SEE_MASK_CLASSKEY = 0x3,SEE_MASK_IDLIST = 0x4,SEE_MASK_INVOKEIDLIST = 0xC,SEE_MASK_ICON = 0x10,SEE_MASK_HOTKEY = 0x20,SEE_MASK_NOCLOSEPROCESS = 0x40,SEE_MASK_CONNECTNETDRV = 0x80,SEE_MASK_FLAG_DDEWAIT = 0x100,SEE_MASK_DOENVSUBST = 0x200,SEE_MASK_FLAG_NO_UI = 0x400,SEE_MASK_UNICODE = 0x4000,SEE_MASK_NO_CONSOLE = 0x8000,SEE_MASK_ASYNCOK = 0x100000,SEE_MASK_HMONITOR = 0x200000,};
enum MACRO_SEF {SEF_DACL_AUTO_INHERIT = 0x1,SEF_SACL_AUTO_INHERIT = 0x2,SEF_DEFAULT_DESCRIPTOR_FOR_OBJECT = 0x4,SEF_AVOID_PRIVILEGE_CHECK = 0x8,SEF_AVOID_OWNER_CHECK = 0x10,SEF_DEFAULT_OWNER_FROM_PARENT = 0x20,SEF_DEFAULT_GROUP_FROM_PARENT = 0x40,};
enum MACRO_SEM {SEM_FAILCRITICALERRORS = 0x1,SEM_NOGPFAULTERRORBOX = 0x2,SEM_NOALIGNMENTFAULTEXCEPT = 0x4,SEM_NOOPENFILEERRORBOX = 0x8000,};
enum MACRO_SET {SET_TAPE_MEDIA_INFORMATION = 0,SET_TAPE_DRIVE_INFORMATION = 1,};
enum MACRO_SID {SID_REVISION = 1,SID_MAX_SUB_AUTHORITIES = 15,SID_RECOMMENDED_SUB_AUTHORITIES = 1,};
enum MACRO_SIF {SIF_RANGE = 0x1,SIF_PAGE = 0x2,SIF_POS = 0x4,SIF_DISABLENOSCROLL = 0x8,SIF_TRACKPOS = 0x10,SIF_ALL = 0x17,};
enum MACRO_SIG {SIG_DFL = 0,SIG_IGN = 1,SIG_ERR = -1,};
enum MACRO_SIO {SIO_ASSOCIATE_HANDLE = -2013265919,SIO_ENABLE_CIRCULAR_QUEUEING = 671088642,SIO_FIND_ROUTE = 1207959555,SIO_FLUSH = 671088644,SIO_GET_BROADCAST_ADDRESS = 1207959557,SIO_GET_EXTENSION_FUNCTION_POINTER = -939524090,SIO_GET_QOS = -939524089,SIO_GET_GROUP_QOS = -939524088,SIO_MULTIPOINT_LOOPBACK = -2013265911,SIO_MULTICAST_SCOPE = -2013265910,SIO_SET_QOS = -2013265909,SIO_SET_GROUP_QOS = -2013265908,SIO_TRANSLATE_HANDLE = -939524083,SIO_ROUTING_INTERFACE_QUERY = -939524076,SIO_ROUTING_INTERFACE_CHANGE = -2013265899,SIO_ADDRESS_LIST_QUERY = 1207959574,SIO_ADDRESS_LIST_CHANGE = 671088663,SIO_QUERY_TARGET_PNP_HANDLE = 1207959576,};
enum MACRO_SKF {SKF_STICKYKEYSON = 0x1,SKF_AVAILABLE = 0x2,SKF_HOTKEYACTIVE = 0x4,SKF_CONFIRMHOTKEY = 0x8,SKF_HOTKEYSOUND = 0x10,SKF_INDICATOR = 0x20,SKF_AUDIBLEFEEDBACK = 0x40,SKF_TRISTATE = 0x80,SKF_TWOKEYSOFF = 0x100,SKF_LALTLATCHED = 0x10000000,SKF_LCTLLATCHED = 0x4000000,SKF_LSHIFTLATCHED = 0x1000000,SKF_RALTLATCHED = 0x20000000,SKF_RCTLLATCHED = 0x8000000,SKF_RSHIFTLATCHED = 0x2000000,SKF_LWINLATCHED = 0x40000000,SKF_RWINLATCHED = 0x80000000,SKF_LALTLOCKED = 0x100000,SKF_LCTLLOCKED = 0x40000,SKF_LSHIFTLOCKED = 0x10000,SKF_RALTLOCKED = 0x200000,SKF_RCTLLOCKED = 0x80000,SKF_RSHIFTLOCKED = 0x20000,SKF_LWINLOCKED = 0x400000,SKF_RWINLOCKED = 0x800000,};
enum MACRO_SLE {SLE_ERROR = 0x1,SLE_MINORERROR = 0x2,SLE_WARNING = 0x3,};
enum MACRO_SND {SND_SYNC = 0x0,SND_ASYNC = 0x1,SND_NODEFAULT = 0x2,SND_MEMORY = 0x4,SND_LOOP = 0x8,SND_NOSTOP = 0x10,SND_NOWAIT = 0x2000,SND_ALIAS = 0x10000,SND_ALIAS_ID = 0x110000,SND_FILENAME = 0x20000,SND_RESOURCE = 0x40004,SND_PURGE = 0x40,SND_APPLICATION = 0x80,SND_ALIAS_START = 0x0,SND_ALIAS_SYSTEMASTERISK = 0x2A53,SND_ALIAS_SYSTEMQUESTION = 0x3F53,SND_ALIAS_SYSTEMHAND = 0x4853,SND_ALIAS_SYSTEMEXIT = 0x4553,SND_ALIAS_SYSTEMSTART = 0x5353,SND_ALIAS_SYSTEMWELCOME = 0x5753,SND_ALIAS_SYSTEMEXCLAMATION = 0x2153,SND_ALIAS_SYSTEMDEFAULT = 0x4453,};
enum MACRO_SOL {SOL_SOCKET = 0xFFFF,};
enum MACRO_SPI {SPI_GETBEEP = 1,SPI_SETBEEP = 2,SPI_GETMOUSE = 3,SPI_SETMOUSE = 4,SPI_GETBORDER = 5,SPI_SETBORDER = 6,SPI_GETKEYBOARDSPEED = 10,SPI_SETKEYBOARDSPEED = 11,SPI_LANGDRIVER = 12,SPI_ICONHORIZONTALSPACING = 13,SPI_GETSCREENSAVETIMEOUT = 14,SPI_SETSCREENSAVETIMEOUT = 15,SPI_GETSCREENSAVEACTIVE = 16,SPI_SETSCREENSAVEACTIVE = 17,SPI_GETGRIDGRANULARITY = 18,SPI_SETGRIDGRANULARITY = 19,SPI_SETDESKWALLPAPER = 20,SPI_SETDESKPATTERN = 21,SPI_GETKEYBOARDDELAY = 22,SPI_SETKEYBOARDDELAY = 23,SPI_ICONVERTICALSPACING = 24,SPI_GETICONTITLEWRAP = 25,SPI_SETICONTITLEWRAP = 26,SPI_GETMENUDROPALIGNMENT = 27,SPI_SETMENUDROPALIGNMENT = 28,SPI_SETDOUBLECLKWIDTH = 29,SPI_SETDOUBLECLKHEIGHT = 30,SPI_GETICONTITLELOGFONT = 31,SPI_SETDOUBLECLICKTIME = 32,SPI_SETMOUSEBUTTONSWAP = 33,SPI_SETICONTITLELOGFONT = 34,SPI_GETFASTTASKSWITCH = 35,SPI_SETFASTTASKSWITCH = 36,SPI_SETDRAGFULLWINDOWS = 37,SPI_GETDRAGFULLWINDOWS = 38,SPI_GETNONCLIENTMETRICS = 41,SPI_SETNONCLIENTMETRICS = 42,SPI_GETMINIMIZEDMETRICS = 43,SPI_SETMINIMIZEDMETRICS = 44,SPI_GETICONMETRICS = 45,SPI_SETICONMETRICS = 46,SPI_SETWORKAREA = 47,SPI_GETWORKAREA = 48,SPI_SETPENWINDOWS = 49,SPI_GETHIGHCONTRAST = 66,SPI_SETHIGHCONTRAST = 67,SPI_GETKEYBOARDPREF = 68,SPI_SETKEYBOARDPREF = 69,SPI_GETSCREENREADER = 70,SPI_SETSCREENREADER = 71,SPI_GETANIMATION = 72,SPI_SETANIMATION = 73,SPI_GETFONTSMOOTHING = 74,SPI_SETFONTSMOOTHING = 75,SPI_SETDRAGWIDTH = 76,SPI_SETDRAGHEIGHT = 77,SPI_SETHANDHELD = 78,SPI_GETLOWPOWERTIMEOUT = 79,SPI_GETPOWEROFFTIMEOUT = 80,SPI_SETLOWPOWERTIMEOUT = 81,SPI_SETPOWEROFFTIMEOUT = 82,SPI_GETLOWPOWERACTIVE = 83,SPI_GETPOWEROFFACTIVE = 84,SPI_SETLOWPOWERACTIVE = 85,SPI_SETPOWEROFFACTIVE = 86,SPI_SETCURSORS = 87,SPI_SETICONS = 88,SPI_GETDEFAULTINPUTLANG = 89,SPI_SETDEFAULTINPUTLANG = 90,SPI_SETLANGTOGGLE = 91,SPI_GETWINDOWSEXTENSION = 92,SPI_SETMOUSETRAILS = 93,SPI_GETMOUSETRAILS = 94,SPI_SETSCREENSAVERRUNNING = 97,SPI_SCREENSAVERRUNNING = 97,SPI_GETFILTERKEYS = 50,SPI_SETFILTERKEYS = 51,SPI_GETTOGGLEKEYS = 52,SPI_SETTOGGLEKEYS = 53,SPI_GETMOUSEKEYS = 54,SPI_SETMOUSEKEYS = 55,SPI_GETSHOWSOUNDS = 56,SPI_SETSHOWSOUNDS = 57,SPI_GETSTICKYKEYS = 58,SPI_SETSTICKYKEYS = 59,SPI_GETACCESSTIMEOUT = 60,SPI_SETACCESSTIMEOUT = 61,SPI_GETSERIALKEYS = 62,SPI_SETSERIALKEYS = 63,SPI_GETSOUNDSENTRY = 64,SPI_SETSOUNDSENTRY = 65,SPI_GETSNAPTODEFBUTTON = 95,SPI_SETSNAPTODEFBUTTON = 96,SPI_GETMOUSEHOVERWIDTH = 98,SPI_SETMOUSEHOVERWIDTH = 99,SPI_GETMOUSEHOVERHEIGHT = 100,SPI_SETMOUSEHOVERHEIGHT = 101,SPI_GETMOUSEHOVERTIME = 102,SPI_SETMOUSEHOVERTIME = 103,SPI_GETWHEELSCROLLLINES = 104,SPI_SETWHEELSCROLLLINES = 105,SPI_GETMENUSHOWDELAY = 106,SPI_SETMENUSHOWDELAY = 107,SPI_GETSHOWIMEUI = 110,SPI_SETSHOWIMEUI = 111,SPI_GETMOUSESPEED = 112,SPI_SETMOUSESPEED = 113,SPI_GETSCREENSAVERRUNNING = 114,SPI_GETDESKWALLPAPER = 115,SPI_GETACTIVEWINDOWTRACKING = 4096,SPI_SETACTIVEWINDOWTRACKING = 4097,SPI_GETMENUANIMATION = 4098,SPI_SETMENUANIMATION = 4099,SPI_GETCOMBOBOXANIMATION = 4100,SPI_SETCOMBOBOXANIMATION = 4101,SPI_GETLISTBOXSMOOTHSCROLLING = 4102,SPI_SETLISTBOXSMOOTHSCROLLING = 4103,SPI_GETGRADIENTCAPTIONS = 4104,SPI_SETGRADIENTCAPTIONS = 4105,SPI_GETKEYBOARDCUES = 4106,SPI_SETKEYBOARDCUES = 4107,SPI_GETMENUUNDERLINES = 4106,SPI_SETMENUUNDERLINES = 4107,SPI_GETACTIVEWNDTRKZORDER = 4108,SPI_SETACTIVEWNDTRKZORDER = 4109,SPI_GETHOTTRACKING = 4110,SPI_SETHOTTRACKING = 4111,SPI_GETMENUFADE = 4114,SPI_SETMENUFADE = 4115,SPI_GETSELECTIONFADE = 4116,SPI_SETSELECTIONFADE = 4117,SPI_GETTOOLTIPANIMATION = 4118,SPI_SETTOOLTIPANIMATION = 4119,SPI_GETTOOLTIPFADE = 4120,SPI_SETTOOLTIPFADE = 4121,SPI_GETCURSORSHADOW = 4122,SPI_SETCURSORSHADOW = 4123,SPI_GETUIEFFECTS = 4158,SPI_SETUIEFFECTS = 4159,SPI_GETFOREGROUNDLOCKTIMEOUT = 8192,SPI_SETFOREGROUNDLOCKTIMEOUT = 8193,SPI_GETACTIVEWNDTRKTIMEOUT = 8194,SPI_SETACTIVEWNDTRKTIMEOUT = 8195,SPI_GETFOREGROUNDFLASHCOUNT = 8196,SPI_SETFOREGROUNDFLASHCOUNT = 8197,SPI_GETCARETWIDTH = 8198,SPI_SETCARETWIDTH = 8199,};
enum MACRO_SSF {SSF_SOUNDSENTRYON = 0x1,SSF_AVAILABLE = 0x2,SSF_INDICATOR = 0x4,};
enum MACRO_STD {STD_INPUT_HANDLE = 4294967286,STD_OUTPUT_HANDLE = 4294967285,STD_ERROR_HANDLE = 4294967284,};
enum MACRO_STG {STG_TOEND = 0xFFFFFFFF,STG_LAYOUT_SEQUENTIAL = 0x0,STG_LAYOUT_INTERLEAVED = 0x1,};
enum MACRO_STN {STN_CLICKED = 0,STN_DBLCLK = 1,STN_ENABLE = 2,STN_DISABLE = 3,};
enum MACRO_SWP {SWP_NOSIZE = 0x1,SWP_NOMOVE = 0x2,SWP_NOZORDER = 0x4,SWP_NOREDRAW = 0x8,SWP_NOACTIVATE = 0x10,SWP_FRAMECHANGED = 0x20,SWP_SHOWWINDOW = 0x40,SWP_HIDEWINDOW = 0x80,SWP_NOCOPYBITS = 0x100,SWP_NOOWNERZORDER = 0x200,SWP_NOSENDCHANGING = 0x400,SWP_DRAWFRAME = 0x20,SWP_NOREPOSITION = 0x200,SWP_DEFERERASE = 0x2000,SWP_ASYNCWINDOWPOS = 0x4000,};
enum MACRO_SYS {SYS_OPEN = 50,};
enum MACRO_TCI {TCI_SRCCHARSET = 1,TCI_SRCCODEPAGE = 2,TCI_SRCFONTSIG = 3,};
enum MACRO_TCP {TCP_NODELAY = 0x1,};
enum MACRO_TKF {TKF_TOGGLEKEYSON = 0x1,TKF_AVAILABLE = 0x2,TKF_HOTKEYACTIVE = 0x4,TKF_CONFIRMHOTKEY = 0x8,TKF_HOTKEYSOUND = 0x10,TKF_INDICATOR = 0x20,};
enum MACRO_TLS {TLS_MINIMUM_AVAILABLE = 64,};
enum MACRO_TME {TME_HOVER = 0x1,TME_LEAVE = 0x2,TME_NONCLIENT = 0x10,TME_QUERY = 0x40000000,TME_CANCEL = 0x80000000,};
enum MACRO_TPM {TPM_LEFTBUTTON = 0x0,TPM_RIGHTBUTTON = 0x2,TPM_LEFTALIGN = 0x0,TPM_CENTERALIGN = 0x4,TPM_RIGHTALIGN = 0x8,TPM_TOPALIGN = 0x0,TPM_VCENTERALIGN = 0x10,TPM_BOTTOMALIGN = 0x20,TPM_HORIZONTAL = 0x0,TPM_VERTICAL = 0x40,TPM_NONOTIFY = 0x80,TPM_RETURNCMD = 0x100,TPM_RECURSE = 0x1,TPM_HORPOSANIMATION = 0x400,TPM_HORNEGANIMATION = 0x800,TPM_VERPOSANIMATION = 0x1000,TPM_VERNEGANIMATION = 0x2000,TPM_NOANIMATION = 0x4000,};
enum MACRO_TRY {TRY_AGAIN = 11002,};
enum MACRO_UIS {UIS_SET = 1,UIS_CLEAR = 2,UIS_INITIALIZE = 3,};
enum MACRO_ULW {ULW_COLORKEY = 0x1,ULW_ALPHA = 0x2,ULW_OPAQUE = 0x4,};
enum MACRO_UOI {UOI_FLAGS = 1,UOI_NAME = 2,UOI_TYPE = 3,UOI_USER_SID = 4,};
enum MACRO_URL {URL_OID_CERTIFICATE_ISSUER = 1,URL_OID_CERTIFICATE_CRL_DIST_POINT = 2,URL_OID_CTL_ISSUER = 3,URL_OID_CTL_NEXT_UPDATE = 4,URL_OID_CRL_ISSUER = 5,};
enum MACRO_USN {USN_PAGE_SIZE = 0x1000,USN_REASON_DATA_OVERWRITE = 0x1,USN_REASON_DATA_EXTEND = 0x2,USN_REASON_DATA_TRUNCATION = 0x4,USN_REASON_NAMED_DATA_OVERWRITE = 0x10,USN_REASON_NAMED_DATA_EXTEND = 0x20,USN_REASON_NAMED_DATA_TRUNCATION = 0x40,USN_REASON_FILE_CREATE = 0x100,USN_REASON_FILE_DELETE = 0x200,USN_REASON_EA_CHANGE = 0x400,USN_REASON_SECURITY_CHANGE = 0x800,USN_REASON_RENAME_OLD_NAME = 0x1000,USN_REASON_RENAME_NEW_NAME = 0x2000,USN_REASON_INDEXABLE_CHANGE = 0x4000,USN_REASON_BASIC_INFO_CHANGE = 0x8000,USN_REASON_HARD_LINK_CHANGE = 0x10000,USN_REASON_COMPRESSION_CHANGE = 0x20000,USN_REASON_ENCRYPTION_CHANGE = 0x40000,USN_REASON_OBJECT_ID_CHANGE = 0x80000,USN_REASON_REPARSE_POINT_CHANGE = 0x100000,USN_REASON_STREAM_CHANGE = 0x200000,USN_REASON_CLOSE = 0x80000000,USN_DELETE_FLAG_DELETE = 0x1,USN_DELETE_FLAG_NOTIFY = 0x2,USN_DELETE_VALID_FLAGS = 0x3,USN_SOURCE_DATA_MANAGEMENT = 0x1,USN_SOURCE_AUXILIARY_DATA = 0x2,USN_SOURCE_REPLICATION_MANAGEMENT = 0x4,};
enum MACRO_VAR {VAR_TIMEVALUEONLY = 0x1,VAR_DATEVALUEONLY = 0x2,VAR_VALIDDATE = 0x4,VAR_CALENDAR_HIJRI = 0x8,VAR_LOCALBOOL = 0x10,VAR_FORMAT_NOSUBSTITUTE = 0x20,};
enum MACRO_VER {VER_SERVER_NT = 0x80000000,VER_WORKSTATION_NT = 0x40000000,VER_SUITE_SMALLBUSINESS = 0x1,VER_SUITE_ENTERPRISE = 0x2,VER_SUITE_BACKOFFICE = 0x4,VER_SUITE_COMMUNICATIONS = 0x8,VER_SUITE_TERMINAL = 0x10,VER_SUITE_SMALLBUSINESS_RESTRICTED = 0x20,VER_SUITE_EMBEDDEDNT = 0x40,VER_SUITE_DATACENTER = 0x80,VER_SUITE_SINGLEUSERTS = 0x100,};
enum MACRO_VFF {VFF_CURNEDEST = 0x1,VFF_FILEINUSE = 0x2,VFF_BUFFTOOSMALL = 0x4,};
enum MACRO_VFT {VFT_UNKNOWN = 0x0,VFT_APP = 0x1,VFT_DLL = 0x2,VFT_DRV = 0x3,VFT_FONT = 0x4,VFT_VXD = 0x5,VFT_STATIC_LIB = 0x7,};
enum MACRO_VIF {VIF_TEMPFILE = 0x1,VIF_MISMATCH = 0x2,VIF_SRCOLD = 0x4,VIF_DIFFLANG = 0x8,VIF_DIFFCODEPG = 0x10,VIF_DIFFTYPE = 0x20,VIF_WRITEPROT = 0x40,VIF_FILEINUSE = 0x80,VIF_OUTOFSPACE = 0x100,VIF_ACCESSVIOLATION = 0x200,VIF_SHARINGVIOLATION = 0x400,VIF_CANNOTCREATE = 0x800,VIF_CANNOTDELETE = 0x1000,VIF_CANNOTRENAME = 0x2000,VIF_CANNOTDELETECUR = 0x4000,VIF_OUTOFMEMORY = 0x8000,VIF_CANNOTREADSRC = 0x10000,VIF_CANNOTREADDST = 0x20000,VIF_BUFFTOOSMALL = 0x40000,VIF_CANNOTLOADLZ32 = 0x80000,VIF_CANNOTLOADCABINET = 0x100000,};
enum MACRO_VOS {VOS_UNKNOWN = 0x0,VOS_DOS = 0x10000,VOS_OS216 = 0x20000,VOS_OS232 = 0x30000,VOS_NT = 0x40000,VOS__BASE = 0x0,VOS__WINDOWS16 = 0x1,VOS__PM16 = 0x2,VOS__PM32 = 0x3,VOS__WINDOWS32 = 0x4,VOS_DOS_WINDOWS16 = 0x10001,VOS_DOS_WINDOWS32 = 0x10004,VOS_OS216_PM16 = 0x20002,VOS_OS232_PM32 = 0x30003,VOS_NT_WINDOWS32 = 0x40004,};
enum MACRO_VTA {VTA_BASELINE = 24,VTA_LEFT = 8,VTA_RIGHT = 0,VTA_CENTER = 6,VTA_BOTTOM = 2,VTA_TOP = 0,};
enum MACRO_WDT {WDT_INPROC_CALL = 0x48746457,WDT_REMOTE_CALL = 0x52746457,WDT_INPROC64_CALL = 0x50746457,};
enum MACRO_WGL {WGL_FONT_LINES = 0,WGL_FONT_POLYGONS = 1,};
enum MACRO_WIM {WIM_OPEN = 958,WIM_CLOSE = 959,WIM_DATA = 960,};
enum MACRO_WIZ {WIZ_CXDLG = 276,WIZ_CYDLG = 140,WIZ_CXBMP = 80,WIZ_BODYX = 92,WIZ_BODYCX = 184,};
enum MACRO_WOM {WOM_OPEN = 955,WOM_CLOSE = 956,WOM_DONE = 957,};
enum MACRO_WPF {WPF_SETMINPOSITION = 0x1,WPF_RESTORETOMAXIMIZED = 0x2,WPF_ASYNCWINDOWPLACEMENT = 0x4,};
enum MACRO_WSA {WSA_IO_PENDING = 10035,WSA_IO_INCOMPLETE = 10035,WSA_INVALID_HANDLE = 10038,WSA_INVALID_PARAMETER = 10022,WSA_NOT_ENOUGH_MEMORY = 10055,WSA_OPERATION_ABORTED = 10004,WSA_INVALID_EVENT = 0,WSA_MAXIMUM_WAIT_EVENTS = 64,WSA_WAIT_FAILED = 4294967295,WSA_WAIT_EVENT_0 = 0,WSA_WAIT_TIMEOUT = 258,WSA_INFINITE = 4294967295,};
enum MACRO_WSF {WSF_VISIBLE = 0x1,};
enum MACRO_WVR {WVR_ALIGNTOP = 0x10,WVR_ALIGNLEFT = 0x20,WVR_ALIGNBOTTOM = 0x40,WVR_ALIGNRIGHT = 0x80,WVR_HREDRAW = 0x100,WVR_VREDRAW = 0x200,WVR_REDRAW = 0x300,WVR_VALIDRECTS = 0x400,};
enum MACRO_XP1 {XP1_CONNECTIONLESS = 0x1,XP1_GUARANTEED_DELIVERY = 0x2,XP1_GUARANTEED_ORDER = 0x4,XP1_MESSAGE_ORIENTED = 0x8,XP1_PSEUDO_STREAM = 0x10,XP1_GRACEFUL_CLOSE = 0x20,XP1_EXPEDITED_DATA = 0x40,XP1_CONNECT_DATA = 0x80,XP1_DISCONNECT_DATA = 0x100,XP1_SUPPORT_BROADCAST = 0x200,XP1_SUPPORT_MULTIPOINT = 0x400,XP1_MULTIPOINT_CONTROL_PLANE = 0x800,XP1_MULTIPOINT_DATA_PLANE = 0x1000,XP1_QOS_SUPPORTED = 0x2000,XP1_INTERRUPT = 0x4000,XP1_UNI_SEND = 0x8000,XP1_UNI_RECV = 0x10000,XP1_IFS_HANDLES = 0x20000,XP1_PARTIAL_MESSAGE = 0x40000,};
enum MACRO_XST {XST_NULL = 0,XST_INCOMPLETE = 1,XST_CONNECTED = 2,XST_INIT1 = 3,XST_INIT2 = 4,XST_REQSENT = 5,XST_DATARCVD = 6,XST_POKESENT = 7,XST_POKEACKRCVD = 8,XST_EXECSENT = 9,XST_EXECACKRCVD = 10,XST_ADVSENT = 11,XST_UNADVSENT = 12,XST_ADVACKRCVD = 13,XST_UNADVACKRCVD = 14,XST_ADVDATASENT = 15,XST_ADVDATAACKRCVD = 16,};
enum MACRO__IS {_IS_UPP = 0x1,_IS_LOW = 0x2,_IS_DIG = 0x4,_IS_SP = 0x8,_IS_PUN = 0x10,_IS_CTL = 0x20,_IS_BLK = 0x40,_IS_HEX = 0x80,_IS_ALPHA = 0x100,_IS_ALNUM = 0x104,_IS_GRAPH = 0x194,};
enum MACRO__MB {_MB_CP_SBCS = 0,_MB_CP_OEM = -2,_MB_CP_ANSI = -3,_MB_CP_LOCALE = -4,};
typedef struct midievent_tag MIDIEVENT;
typedef struct tagMOUSEKEYS MOUSEKEYS;
typedef struct joyinfo_tag *NPJOYINFO;
typedef struct midihdr_tag *NPMIDIHDR;
typedef struct _RGNDATA *NPRGNDATA;
typedef struct wavehdr_tag *NPWAVEHDR;
typedef struct _OFNOTIFYA OFNOTIFYA;
typedef struct _OFNOTIFYW OFNOTIFYW;
typedef struct _OLESTREAM OLESTREAM;
typedef struct _ABCFLOAT *PABCFLOAT;
typedef struct tagPARAMDATA PARAMDATA;
typedef struct tagPARAMDESC PARAMDESC;
typedef struct tagAUXCAPSA *PAUXCAPSA;
typedef struct tagAUXCAPSW *PAUXCAPSW;
typedef struct _CERT_RDN *PCERT_RDN;
typedef struct _CPS_URLS *PCPS_URLS;
typedef struct _CRYPTOAPI_BLOB *PCRL_BLOB;
typedef struct _CRL_INFO *PCRL_INFO;
typedef struct _CTL_INFO *PCTL_INFO;
typedef struct _devicemodeA *PDEVMODEA;
typedef struct _devicemodeW *PDEVMODEW;
typedef struct tagEMRARC *PEMRARCTO;
typedef struct tagEMRARC *PEMRCHORD;
typedef struct tagEVENTMSG *PEVENTMSG;
typedef struct _FILETIME *PFILETIME;
typedef struct _flowspec *PFLOWSPEC;
typedef struct _FPO_DATA *PFPO_DATA;
typedef struct tagGLYPHSET *PGLYPHSET;
typedef __int16 *PHALF_PTR;
typedef struct tagJOYCAPSA *PJOYCAPSA;
typedef struct tagJOYCAPSW *PJOYCAPSW;
typedef struct tagLOGBRUSH *PLOGBRUSH;
typedef struct tagLOGFONTA *PLOGFONTA;
typedef struct tagLOGFONTW *PLOGFONTW;
typedef int *PLONG_PTR;
typedef struct _MMCKINFO *PMMCKINFO;
typedef struct _MMIOINFO *PMMIOINFO;
typedef struct _OFSTRUCT *POFSTRUCT;
typedef struct tagPOLYTEXTA POLYTEXTA;
typedef struct tagPOLYTEXTW POLYTEXTW;
typedef struct tagPELARRAY *PPELARRAY;
typedef struct _PERF_BIN *PPERF_BIN;
typedef struct protoent *PPROTOENT;
typedef struct provider_info *PPROVIDER;
typedef struct tagPDA PRINTDLGA;
typedef struct tagPDW PRINTDLGW;
typedef struct _PSHNOTIFY PSHNOTIFY;
typedef struct sockaddr *PSOCKADDR;
typedef struct timecaps_tag *PTIMECAPS;
typedef unsigned int *PUINT_PTR;
typedef struct tagRGBTRIPLE RGBTRIPLE;
typedef struct _RPC_IF_ID RPC_IF_ID;
typedef struct _RSAPUBKEY RSAPUBKEY;
typedef struct tagRemBRUSH RemHBRUSH;
typedef struct tagSAFEARRAY SAFEARRAY;
typedef struct _SC_ACTION SC_ACTION;
typedef struct SC_HANDLE__ *SC_HANDLE;
typedef struct tagSTYLEBUFA STYLEBUFA;
typedef struct tagSTYLEBUFW STYLEBUFW;
typedef struct _PUBKEY TEKPUBKEY;
typedef struct tagTPMPARAMS TPMPARAMS;
typedef struct _TRIVERTEX TRIVERTEX;
typedef unsigned __int16 UHALF_PTR;
typedef unsigned __int64 ULONGLONG;
typedef unsigned int ULONG_PTR;
typedef struct tagWINDOWPOS WINDOWPOS;
typedef struct tagWNDCLASSA WNDCLASSA;
typedef struct tagWNDCLASSW WNDCLASSW;
typedef struct _WORD_BLOB WORD_BLOB;
typedef struct _xml_error XML_ERROR;
struct _FLOAT128 {__int64 LowPart;__int64 HighPart;};
typedef struct _heapinfo _HEAPINFO;
struct __jmp_buf {unsigned int j_ebp;unsigned int j_ebx;unsigned int j_edi;unsigned int j_esi;unsigned int j_esp;unsigned int j_ret;unsigned int j_excep;unsigned int j_context;};
struct _complexl {long double x;long double y;};
struct exception {int type;char *name;double arg1;double arg2;double retval;};
typedef int ptrdiff_t;
enum tagCLSCTX {CLSCTX_INPROC_SERVER = 0x1,CLSCTX_INPROC_HANDLER = 0x2,CLSCTX_LOCAL_SERVER = 0x4,CLSCTX_INPROC_SERVER16 = 0x8,CLSCTX_REMOTE_SERVER = 0x10,CLSCTX_INPROC_HANDLER16 = 0x20,CLSCTX_INPROC_SERVERX86 = 0x40,CLSCTX_INPROC_HANDLERX86 = 0x80,CLSCTX_ESERVER_HANDLER = 0x100,CLSCTX_RESERVED = 0x200,CLSCTX_NO_CODE_DOWNLOAD = 0x400,CLSCTX_NO_WX86_TRANSLATION = 0x800,CLSCTX_NO_CUSTOM_MARSHAL = 0x1000,CLSCTX_ENABLE_CODE_DOWNLOAD = 0x2000,CLSCTX_NO_FAILURE_LOG = 0x4000,};
enum tagCOINIT {COINIT_APARTMENTTHREADED = 0x2,COINIT_MULTITHREADED = 0x0,COINIT_DISABLE_OLE1DDE = 0x4,COINIT_SPEED_OVER_MEMORY = 0x8,};
enum tagMEMCTX {MEMCTX_TASK = 0x1,MEMCTX_SHARED = 0x2,MEMCTX_MACSYSTEM = 0x3,MEMCTX_UNKNOWN = 0xFFFFFFFF,MEMCTX_SAME = 0xFFFFFFFE,};
enum tagMSHCTX {MSHCTX_LOCAL = 0x0,MSHCTX_NOSHAREDMEM = 0x1,MSHCTX_DIFFERENTMACHINE = 0x2,MSHCTX_INPROC = 0x3,MSHCTX_CROSSCTX = 0x4,};
enum tagREGCLS {REGCLS_SINGLEUSE = 0x0,REGCLS_MULTIPLEUSE = 0x1,REGCLS_MULTI_SEPARATE = 0x2,REGCLS_SUSPENDED = 0x4,REGCLS_SURROGATE = 0x8,};
enum tagTYSPEC {TYSPEC_CLSID = 0x0,TYSPEC_FILEEXT = 0x1,TYSPEC_MIMETYPE = 0x2,TYSPEC_FILENAME = 0x3,TYSPEC_PROGID = 0x4,TYSPEC_PACKAGENAME = 0x5,TYSPEC_OBJECTID = 0x6,};
struct text_info {unsigned __int8 winleft;unsigned __int8 wintop;unsigned __int8 winright;unsigned __int8 winbottom;unsigned __int8 attribute;unsigned __int8 normattr;unsigned __int8 currmode;unsigned __int8 screenheight;unsigned __int8 screenwidth;unsigned __int8 curx;unsigned __int8 cury;};
typedef struct _ABCFLOAT ABCFLOAT;
typedef struct tagAUXCAPSA AUXCAPSA;
typedef struct tagAUXCAPSW AUXCAPSW;
typedef struct _tagBINDINFO BINDINFO;
typedef struct tagBSTRBLOB BSTRBLOB;
typedef struct tagCALPWSTR CALPWSTR;
typedef struct _CERT_RDN CERT_RDN;
typedef struct tagCLIPDATA CLIPDATA;
typedef struct _COMMPROP COMMPROP;
typedef struct tagCONVINFO CONVINFO;
typedef struct _CPS_URLS CPS_URLS;
typedef struct _CRYPTOAPI_BLOB CRL_BLOB;
typedef struct _CRL_INFO CRL_INFO;
typedef struct _CTL_INFO CTL_INFO;
typedef struct tagCUSTDATA CUSTDATA;
typedef struct _tagDATAINFO DATAINFO;
typedef struct _devicemodeA DEVMODEA;
typedef struct _devicemodeW DEVMODEW;
typedef struct tagDEVNAMES DEVNAMES;
typedef struct _PUBKEY DHPUBKEY;
typedef struct _DOCINFOA DOCINFOA;
typedef struct _DOCINFOW DOCINFOW;
typedef struct tagELEMDESC ELEMDESC;
typedef struct tagEMRARC EMRARCTO;
typedef struct tagEMRARC EMRCHORD;
typedef struct tagEVENTMSG EVENTMSG;
typedef struct _FILETIME FILETIME;
typedef struct _FLOAT128 FLOAT128;
typedef struct _flowspec FLOWSPEC;
typedef struct _FPO_DATA FPO_DATA;
typedef struct tagFUNCDESC FUNCDESC;
typedef struct tagGLYPHSET GLYPHSET;
struct HACCEL__ {int unused;};
typedef __int16 HALF_PTR;
struct HBRUSH__ {int unused;};
typedef void *HCONTEXT;
typedef struct HDDEDATA__ *HDDEDATA;
typedef struct tagHELPINFO HELPINFO;
typedef struct HMIDIOUT__ *HMIDIOUT;
struct HMIXER__ {int unused;};
typedef struct HMONITOR__ *HMONITOR;
typedef struct HPALETTE__ *HPALETTE;
typedef struct HWAVEOUT__ *HWAVEOUT;
struct IBindCtx {struct IBindCtxVtbl *lpVtbl;};
struct IBinding {struct IBindingVtbl *lpVtbl;};
typedef struct _ICONINFO ICONINFO;
struct IMarshal {struct IMarshalVtbl *lpVtbl;};
struct IMoniker {struct IMonikerVtbl *lpVtbl;};
struct IMultiQI {struct IMultiQIVtbl *lpVtbl;};
struct IOleLink {struct IOleLinkVtbl *lpVtbl;};
struct IPersist {struct IPersistVtbl *lpVtbl;};
struct IROTData {struct IROTDataVtbl *lpVtbl;};
struct IStorage {struct IStorageVtbl *lpVtbl;};
struct ITypeLib {struct ITypeLibVtbl *lpVtbl;};
struct IUnknown {struct IUnknownVtbl *lpVtbl;};
typedef struct tagJOYCAPSA JOYCAPSA;
typedef struct tagJOYCAPSW JOYCAPSW;
typedef struct tagLOGBRUSH LOGBRUSH;
typedef struct tagLOGFONTA LOGFONTA;
typedef struct tagLOGFONTW LOGFONTW;
typedef __int64 LONGLONG;
typedef int LONG_PTR;
typedef struct tagBITMAP *LPBITMAP;
typedef struct _cpinfo *LPCPINFO;
typedef struct fd_set *LPFD_SET;
typedef struct linger *LPLINGER;
typedef struct tagLOGPEN *LPLOGPEN;
typedef IMalloc *LPMALLOC;
typedef struct mmtime_tag *LPMMTIME;
typedef struct tagPANOSE *LPPANOSE;
typedef struct tagPOINTS *LPPOINTS;
typedef IStream *LPSTREAM;
typedef struct _WSABUF *LPWSABUF;
enum MACRO_AC {AC_LINE_OFFLINE = 0x0,AC_LINE_ONLINE = 0x1,AC_LINE_BACKUP_POWER = 0x2,AC_LINE_UNKNOWN = 0xFF,};
enum MACRO_AD {AD_COUNTERCLOCKWISE = 1,AD_CLOCKWISE = 2,};
enum MACRO_AF {AF_UNSPEC = 0,AF_UNIX = 1,AF_INET = 2,AF_IMPLINK = 3,AF_PUP = 4,AF_CHAOS = 5,AF_NS = 6,AF_IPX = 6,AF_ISO = 7,AF_OSI = 7,AF_ECMA = 8,AF_DATAKIT = 9,AF_CCITT = 10,AF_SNA = 11,AF_DECnet = 12,AF_DLI = 13,AF_LAT = 14,AF_HYLINK = 15,AF_APPLETALK = 16,AF_NETBIOS = 17,AF_VOICEVIEW = 18,AF_FIREFOX = 19,AF_UNKNOWN1 = 20,AF_BAN = 21,AF_ATM = 22,AF_INET6 = 23,AF_CLUSTER = 24,AF_12844 = 25,AF_IRDA = 26,AF_NETDES = 28,AF_MAX = 29,};
enum MACRO_AT {AT_KEYEXCHANGE = 1,AT_SIGNATURE = 2,};
enum MACRO_AW {AW_HOR_POSITIVE = 0x1,AW_HOR_NEGATIVE = 0x2,AW_VER_POSITIVE = 0x4,AW_VER_NEGATIVE = 0x8,AW_CENTER = 0x10,AW_HIDE = 0x10000,AW_ACTIVATE = 0x20000,AW_SLIDE = 0x40000,AW_BLEND = 0x80000,};
enum MACRO_BF {BF_LEFT = 0x1,BF_TOP = 0x2,BF_RIGHT = 0x4,BF_BOTTOM = 0x8,BF_TOPLEFT = 0x3,BF_TOPRIGHT = 0x6,BF_BOTTOMLEFT = 0x9,BF_BOTTOMRIGHT = 0xC,BF_RECT = 0xF,BF_DIAGONAL = 0x10,BF_DIAGONAL_ENDTOPRIGHT = 0x16,BF_DIAGONAL_ENDTOPLEFT = 0x13,BF_DIAGONAL_ENDBOTTOMLEFT = 0x19,BF_DIAGONAL_ENDBOTTOMRIGHT = 0x1C,BF_MIDDLE = 0x800,BF_SOFT = 0x1000,BF_ADJUST = 0x2000,BF_FLAT = 0x4000,BF_MONO = 0x8000,};
enum MACRO_BI {BI_RGB = 0,BI_RLE8 = 1,BI_RLE4 = 2,BI_BITFIELDS = 3,BI_JPEG = 4,BI_PNG = 5,};
enum MACRO_BN {BN_CLICKED = 0,BN_PAINT = 1,BN_HILITE = 2,BN_UNHILITE = 3,BN_DISABLE = 4,BN_DOUBLECLICKED = 5,BN_PUSHED = 2,BN_UNPUSHED = 3,BN_DBLCLK = 5,BN_SETFOCUS = 6,BN_KILLFOCUS = 7,};
enum MACRO_BS {BS_SOLID = 0,BS_NULL = 1,BS_HOLLOW = 1,BS_HATCHED = 2,BS_PATTERN = 3,BS_INDEXED = 4,BS_DIBPATTERN = 5,BS_DIBPATTERNPT = 6,BS_PATTERN8X8 = 7,BS_DIBPATTERN8X8 = 8,BS_MONOPATTERN = 9,};
enum MACRO_C1 {C1_UPPER = 0x1,C1_LOWER = 0x2,C1_DIGIT = 0x4,C1_SPACE = 0x8,C1_PUNCT = 0x10,C1_CNTRL = 0x20,C1_BLANK = 0x40,C1_XDIGIT = 0x80,C1_ALPHA = 0x100,};
enum MACRO_C2 {C2_LEFTTORIGHT = 0x1,C2_RIGHTTOLEFT = 0x2,C2_EUROPENUMBER = 0x3,C2_EUROPESEPARATOR = 0x4,C2_EUROPETERMINATOR = 0x5,C2_ARABICNUMBER = 0x6,C2_COMMONSEPARATOR = 0x7,C2_BLOCKSEPARATOR = 0x8,C2_SEGMENTSEPARATOR = 0x9,C2_WHITESPACE = 0xA,C2_OTHERNEUTRAL = 0xB,C2_NOTAPPLICABLE = 0x0,};
enum MACRO_C3 {C3_NONSPACING = 0x1,C3_DIACRITIC = 0x2,C3_VOWELMARK = 0x4,C3_SYMBOL = 0x8,C3_KATAKANA = 0x10,C3_HIRAGANA = 0x20,C3_HALFWIDTH = 0x40,C3_FULLWIDTH = 0x80,C3_IDEOGRAPH = 0x100,C3_KASHIDA = 0x200,C3_LEXICAL = 0x400,C3_ALPHA = 0x8000,C3_NOTAPPLICABLE = 0x0,};
enum MACRO_CA {CA_NEGATIVE = 0x1,CA_LOG_FILTER = 0x2,};
enum MACRO_CB {CB_OKAY = 0,CB_ERR = -1,CB_ERRSPACE = -2,};
enum MACRO_CC {CC_NONE = 0,CC_CIRCLES = 1,CC_PIE = 2,CC_CHORD = 4,CC_ELLIPSES = 8,CC_WIDE = 16,CC_STYLED = 32,CC_WIDESTYLED = 64,CC_INTERIORS = 128,CC_ROUNDRECT = 256,};
enum MACRO_CD {CD_LBSELNOITEMS = -1,CD_LBSELCHANGE = 0,CD_LBSELSUB = 1,CD_LBSELADD = 2,};
enum MACRO_CE {CE_RXOVER = 0x1,CE_OVERRUN = 0x2,CE_RXPARITY = 0x4,CE_FRAME = 0x8,CE_BREAK = 0x10,CE_TXFULL = 0x100,CE_PTO = 0x200,CE_IOE = 0x400,CE_DNS = 0x800,CE_OOP = 0x1000,CE_MODE = 0x8000,};
enum MACRO_CF {CF_TEXT = 1,CF_BITMAP = 2,CF_METAFILEPICT = 3,CF_SYLK = 4,CF_DIF = 5,CF_TIFF = 6,CF_OEMTEXT = 7,CF_DIB = 8,CF_PALETTE = 9,CF_PENDATA = 10,CF_RIFF = 11,CF_WAVE = 12,CF_UNICODETEXT = 13,CF_ENHMETAFILE = 14,CF_HDROP = 15,CF_LOCALE = 16,CF_DIBV5 = 17,CF_MAX = 18,CF_OWNERDISPLAY = 128,CF_DSPTEXT = 129,CF_DSPBITMAP = 130,CF_DSPMETAFILEPICT = 131,CF_DSPENHMETAFILE = 142,CF_PRIVATEFIRST = 512,CF_PRIVATELAST = 767,CF_GDIOBJFIRST = 768,CF_GDIOBJLAST = 1023,};
enum MACRO_CM {CM_OUT_OF_GAMUT = 255,CM_IN_GAMUT = 0,};
enum MACRO_CO {CO_E_FIRST = 0x800401F0,CO_E_LAST = 0x800401FF,CO_S_FIRST = 0x401F0,CO_S_LAST = 0x401FF,};
enum MACRO_CP {CP_NONE = 0,CP_RECTANGLE = 1,CP_REGION = 2,};
enum MACRO_CS {CS_E_FIRST = 0x80040164,CS_E_LAST = 0x8004016F,};
enum MACRO_CT {CT_CTYPE1 = 0x1,CT_CTYPE2 = 0x2,CT_CTYPE3 = 0x4,};
enum MACRO_CW {CW_USEDEFAULT = 0x80000000,};
enum MACRO_DC {DC_FIELDS = 1,DC_PAPERS = 2,DC_PAPERSIZE = 3,DC_MINEXTENT = 4,DC_MAXEXTENT = 5,DC_BINS = 6,DC_DUPLEX = 7,DC_SIZE = 8,DC_EXTRA = 9,DC_VERSION = 10,DC_DRIVER = 11,DC_BINNAMES = 12,DC_ENUMRESOLUTIONS = 13,DC_FILEDEPENDENCIES = 14,DC_TRUETYPE = 15,DC_PAPERNAMES = 16,DC_ORIENTATION = 17,DC_COPIES = 18,};
enum MACRO_DD {DD_DEFSCROLLINSET = 11,DD_DEFSCROLLDELAY = 50,DD_DEFSCROLLINTERVAL = 50,DD_DEFDRAGDELAY = 200,DD_DEFDRAGMINDIST = 2,};
enum MACRO_DF {DF_ALLOWOTHERACCOUNTHOOK = 0x1,};
enum MACRO_DI {DI_APPBANDING = 0x1,DI_ROPS_READ_DESTINATION = 0x2,};
enum MACRO_DM {DM_UPDATE = 1,DM_COPY = 2,DM_PROMPT = 4,DM_MODIFY = 8,DM_IN_BUFFER = 8,DM_IN_PROMPT = 4,DM_OUT_BUFFER = 2,DM_OUT_DEFAULT = 1,};
enum MACRO_DN {DN_DEFAULTPRN = 0x1,};
enum MACRO_DO {DO_DROPFILE = 0x454C4946,DO_PRINTFILE = 0x544E5250,};
enum MACRO_DS {DS_ABSALIGN = 0x1,DS_SYSMODAL = 0x2,DS_LOCALEDIT = 0x20,DS_SETFONT = 0x40,DS_MODALFRAME = 0x80,DS_NOIDLEMSG = 0x100,DS_SETFOREGROUND = 0x200,DS_3DLOOK = 0x4,DS_FIXEDSYS = 0x8,DS_NOFAILCREATE = 0x10,DS_CONTROL = 0x400,DS_CENTER = 0x800,DS_CENTERMOUSE = 0x1000,DS_CONTEXTHELP = 0x2000,DS_SHELLFONT = 0x48,};
enum MACRO_DT {DT_PLOTTER = 0,DT_RASDISPLAY = 1,DT_RASPRINTER = 2,DT_RASCAMERA = 3,DT_CHARSTREAM = 4,DT_METAFILE = 5,DT_DISPFILE = 6,};
enum MACRO_EC {EC_LEFTMARGIN = 0x1,EC_RIGHTMARGIN = 0x2,EC_USEFONTINFO = 0xFFFF,};
enum MACRO_EM {EM_INVALID = 0x1,EM_DENORMAL = 0x2,EM_ZERODIVIDE = 0x4,EM_OVERFLOW = 0x8,EM_UNDERFLOW = 0x10,EM_INEXACT = 0x20,};
enum MACRO_EN {EN_SETFOCUS = 0x100,EN_KILLFOCUS = 0x200,EN_CHANGE = 0x300,EN_UPDATE = 0x400,EN_ERRSPACE = 0x500,EN_MAXTEXT = 0x501,EN_HSCROLL = 0x601,EN_VSCROLL = 0x602,EN_ALIGN_LTR_EC = 0x700,EN_ALIGN_RTL_EC = 0x701,};
enum MACRO_ES {ES_SYSTEM_REQUIRED = 0x1,ES_DISPLAY_REQUIRED = 0x2,ES_USER_PRESENT = 0x4,ES_CONTINUOUS = 0x80000000,};
enum MACRO_EV {EV_RXCHAR = 0x1,EV_RXFLAG = 0x2,EV_TXEMPTY = 0x4,EV_CTS = 0x8,EV_DSR = 0x10,EV_RLSD = 0x20,EV_BREAK = 0x40,EV_ERR = 0x80,EV_RING = 0x100,EV_PERR = 0x200,EV_RX80FULL = 0x400,EV_EVENT1 = 0x800,EV_EVENT2 = 0x1000,};
enum MACRO_FA {FA_NORMAL = 0x0,FA_RDONLY = 0x1,FA_HIDDEN = 0x2,FA_SYSTEM = 0x4,FA_LABEL = 0x8,FA_DIREC = 0x10,FA_ARCH = 0x20,};
enum MACRO_FD {FD_SETSIZE = 64,};
enum MACRO_FF {FF_DONTCARE = 0,FF_ROMAN = 16,FF_SWISS = 32,FF_MODERN = 48,FF_SCRIPT = 64,FF_DECORATIVE = 80,};
enum MACRO_FO {FO_MOVE = 0x1,FO_COPY = 0x2,FO_DELETE = 0x3,FO_RENAME = 0x4,};
enum MACRO_FR {FR_PRIVATE = 0x10,FR_NOT_ENUM = 0x20,};
enum MACRO_FS {FS_CASE_IS_PRESERVED = 2,FS_CASE_SENSITIVE = 1,FS_UNICODE_STORED_ON_DISK = 4,FS_PERSISTENT_ACLS = 8,FS_VOL_IS_COMPRESSED = 32768,FS_FILE_COMPRESSION = 16,FS_FILE_ENCRYPTION = 131072,};
enum MACRO_FW {FW_DONTCARE = 0,FW_THIN = 100,FW_EXTRALIGHT = 200,FW_LIGHT = 300,FW_NORMAL = 400,FW_MEDIUM = 500,FW_SEMIBOLD = 600,FW_BOLD = 700,FW_EXTRABOLD = 800,FW_HEAVY = 900,FW_ULTRALIGHT = 200,FW_REGULAR = 400,FW_DEMIBOLD = 600,FW_ULTRABOLD = 800,FW_BLACK = 900,};
enum MACRO_GA {GA_PARENT = 1,GA_ROOT = 2,GA_ROOTOWNER = 3,};
enum MACRO_GL {GL_LEVEL_NOGUIDELINE = 0x0,GL_LEVEL_FATAL = 0x1,GL_LEVEL_ERROR = 0x2,GL_LEVEL_WARNING = 0x3,GL_LEVEL_INFORMATION = 0x4,GL_ID_UNKNOWN = 0x0,GL_ID_NOMODULE = 0x1,GL_ID_NODICTIONARY = 0x10,GL_ID_CANNOTSAVE = 0x11,GL_ID_NOCONVERT = 0x20,GL_ID_TYPINGERROR = 0x21,GL_ID_TOOMANYSTROKE = 0x22,GL_ID_READINGCONFLICT = 0x23,GL_ID_INPUTREADING = 0x24,GL_ID_INPUTRADICAL = 0x25,GL_ID_INPUTCODE = 0x26,GL_ID_INPUTSYMBOL = 0x27,GL_ID_CHOOSECANDIDATE = 0x28,GL_ID_REVERSECONVERSION = 0x29,GL_ID_PRIVATE_FIRST = 0x8000,GL_ID_PRIVATE_LAST = 0xFFFF,};
enum MACRO_GM {GM_COMPATIBLE = 1,GM_ADVANCED = 2,GM_LAST = 2,};
enum MACRO_GR {GR_GDIOBJECTS = 0,GR_USEROBJECTS = 1,};
enum MACRO_GS {GS_8BIT_INDICES = 0x1,};
enum MACRO_GW {GW_HWNDFIRST = 0,GW_HWNDLAST = 1,GW_HWNDNEXT = 2,GW_HWNDPREV = 3,GW_OWNER = 4,GW_CHILD = 5,GW_ENABLEDPOPUP = 6,GW_MAX = 6,};
enum MACRO_HC {HC_ACTION = 0,HC_GETNEXT = 1,HC_SKIP = 2,HC_NOREMOVE = 3,HC_NOREM = 3,HC_SYSMODALON = 4,HC_SYSMODALOFF = 5,};
enum MACRO_HP {HP_ALGID = 0x1,HP_HASHVAL = 0x2,HP_HASHSIZE = 0x4,HP_HMAC_INFO = 0x5,HP_TLS1PRF_LABEL = 0x6,HP_TLS1PRF_SEED = 0x7,};
enum MACRO_HS {HS_HORIZONTAL = 0,HS_VERTICAL = 1,HS_FDIAGONAL = 2,HS_BDIAGONAL = 3,HS_CROSS = 4,HS_DIAGCROSS = 5,};
enum MACRO_HW {HW_PROFILE_GUIDLEN = 39,};
enum MACRO_IC {IC_AFFINE = 0x1000,IC_PROJECTIVE = 0x0,};
enum MACRO_ID {ID_PSRESTARTWINDOWS = 0x2,ID_PSREBOOTSYSTEM = 0x3,};
enum MACRO_IE {IE_BADID = -1,IE_OPEN = -2,IE_NOPEN = -3,IE_MEMORY = -4,IE_DEFAULT = -5,IE_HARDWARE = -10,IE_BYTESIZE = -11,IE_BAUDRATE = -12,};
enum MACRO_IN {IN_CLASSA_NET = 0xFF000000,IN_CLASSA_NSHIFT = 0x18,IN_CLASSA_HOST = 0xFFFFFF,IN_CLASSA_MAX = 0x80,IN_CLASSB_NET = 0xFFFF0000,IN_CLASSB_NSHIFT = 0x10,IN_CLASSB_HOST = 0xFFFF,IN_CLASSB_MAX = 0x10000,IN_CLASSC_NET = 0xFFFFFF00,IN_CLASSC_NSHIFT = 0x8,IN_CLASSC_HOST = 0xFF,IN_CLASSD_NET = 0xF0000000,IN_CLASSD_NSHIFT = 0x1C,IN_CLASSD_HOST = 0xFFFFFFF,};
enum MACRO_IO {IO_REPARSE_TAG_RESERVED_ZERO = 0,IO_REPARSE_TAG_RESERVED_ONE = 1,IO_REPARSE_TAG_RESERVED_RANGE = 1,IO_REPARSE_TAG_MOUNT_POINT = -1610612733,IO_REPARSE_TAG_HSM = -1073741820,IO_REPARSE_TAG_SIS = -2147483641,IO_COMPLETION_MODIFY_STATE = 2,IO_COMPLETION_ALL_ACCESS = 2031619,};
enum MACRO_IS {IS_TEXT_UNICODE_ASCII16 = 0x1,IS_TEXT_UNICODE_REVERSE_ASCII16 = 0x10,IS_TEXT_UNICODE_STATISTICS = 0x2,IS_TEXT_UNICODE_REVERSE_STATISTICS = 0x20,IS_TEXT_UNICODE_CONTROLS = 0x4,IS_TEXT_UNICODE_REVERSE_CONTROLS = 0x40,IS_TEXT_UNICODE_SIGNATURE = 0x8,IS_TEXT_UNICODE_REVERSE_SIGNATURE = 0x80,IS_TEXT_UNICODE_ILLEGAL_CHARS = 0x100,IS_TEXT_UNICODE_ODD_LENGTH = 0x200,IS_TEXT_UNICODE_DBCS_LEADBYTE = 0x400,IS_TEXT_UNICODE_NULL_BYTES = 0x1000,IS_TEXT_UNICODE_UNICODE_MASK = 0xF,IS_TEXT_UNICODE_REVERSE_MASK = 0xF0,IS_TEXT_UNICODE_NOT_UNICODE_MASK = 0xF00,IS_TEXT_UNICODE_NOT_ASCII_MASK = 0xF000,};
enum MACRO_JL {JL_SENDER_ONLY = 0x1,JL_RECEIVER_ONLY = 0x2,JL_BOTH = 0x4,};
enum MACRO_KF {KF_EXTENDED = 0x100,KF_DLGMODE = 0x800,KF_MENUMODE = 0x1000,KF_ALTDOWN = 0x2000,KF_REPEAT = 0x4000,KF_UP = 0x8000,};
enum MACRO_KL {KL_NAMELENGTH = 9,};
enum MACRO_KP {KP_IV = 1,KP_SALT = 2,KP_PADDING = 3,KP_MODE = 4,KP_MODE_BITS = 5,KP_PERMISSIONS = 6,KP_ALGID = 7,KP_BLOCKLEN = 8,KP_KEYLEN = 9,KP_SALT_EX = 10,KP_P = 11,KP_G = 12,KP_Q = 13,KP_X = 14,KP_Y = 15,KP_RA = 16,KP_RB = 17,KP_INFO = 18,KP_EFFECTIVE_KEYLEN = 19,KP_SCHANNEL_ALG = 20,KP_CLIENT_RANDOM = 21,KP_SERVER_RANDOM = 22,KP_RP = 23,KP_PRECOMP_MD5 = 24,KP_PRECOMP_SHA = 25,KP_CERTIFICATE = 26,KP_CLEAR_KEY = 27,KP_PUB_EX_LEN = 28,KP_PUB_EX_VAL = 29,KP_KEYVAL = 30,KP_ADMIN_PIN = 31,KP_KEYEXCHANGE_PIN = 32,KP_SIGNATURE_PIN = 33,KP_PREHASH = 34,KP_OAEP_PARAMS = 36,KP_CMS_KEY_INFO = 37,KP_CMS_DH_KEY_INFO = 38,KP_PUB_PARAMS = 39,KP_VERIFY_PARAMS = 40,KP_HIGHEST_VERSION = 41,};
enum MACRO_LB {LB_CTLCODE = 0,LB_OKAY = 0,LB_ERR = -1,LB_ERRSPACE = -2,};
enum MACRO_LC {LC_COLLATE = 0x1,LC_CTYPE = 0x2,LC_MONETARY = 0x4,LC_NUMERIC = 0x10,LC_TIME = 0x20,LC_ALL = 0xFF,LC_MIN = 0x1,LC_MAX = 0xFF,LC_LAST = 0xFF,};
enum MACRO_LF {LF_FACESIZE = 32,LF_FULLFACESIZE = 64,};
enum MACRO_LK {LK_UNLCK = 0,LK_LOCK = 1,LK_NBLCK = 2,LK_RLCK = 3,LK_NBRLCK = 4,};
enum MACRO_LR {LR_DEFAULTCOLOR = 0x0,LR_MONOCHROME = 0x1,LR_COLOR = 0x2,LR_COPYRETURNORG = 0x4,LR_COPYDELETEORG = 0x8,LR_LOADFROMFILE = 0x10,LR_LOADTRANSPARENT = 0x20,LR_DEFAULTSIZE = 0x40,LR_VGACOLOR = 0x80,LR_LOADMAP3DCOLORS = 0x1000,LR_CREATEDIBSECTION = 0x2000,LR_COPYFROMRESOURCE = 0x4000,LR_SHARED = 0x8000,};
enum MACRO_MA {MA_ACTIVATE = 1,MA_ACTIVATEANDEAT = 2,MA_NOACTIVATE = 3,MA_NOACTIVATEANDEAT = 4,};
enum MACRO_MB {MB_LEN_MAX = 2,};
enum MACRO_MF {MF_INSERT = 0x0,MF_CHANGE = 0x80,MF_APPEND = 0x100,MF_DELETE = 0x200,MF_REMOVE = 0x1000,MF_BYCOMMAND = 0x0,MF_BYPOSITION = 0x400,MF_SEPARATOR = 0x800,MF_ENABLED = 0x0,MF_GRAYED = 0x1,MF_DISABLED = 0x2,MF_UNCHECKED = 0x0,MF_CHECKED = 0x8,MF_USECHECKBITMAPS = 0x200,MF_STRING = 0x0,MF_BITMAP = 0x4,MF_OWNERDRAW = 0x100,MF_POPUP = 0x10,MF_MENUBARBREAK = 0x20,MF_MENUBREAK = 0x40,MF_UNHILITE = 0x0,MF_HILITE = 0x80,MF_DEFAULT = 0x1000,MF_SYSMENU = 0x2000,MF_HELP = 0x4000,MF_RIGHTJUSTIFY = 0x4000,MF_MOUSESELECT = 0x8000,MF_END = 0x80,};
enum MACRO_MH {MH_CREATE = 1,MH_KEEP = 2,MH_DELETE = 3,MH_CLEANUP = 4,};
enum MACRO_MK {MK_E_FIRST = 0x800401E0,MK_E_LAST = 0x800401EF,MK_S_FIRST = 0x401E0,MK_S_LAST = 0x401EF,};
enum MACRO_MM {MM_TEXT = 1,MM_LOMETRIC = 2,MM_HIMETRIC = 3,MM_LOENGLISH = 4,MM_HIENGLISH = 5,MM_TWIPS = 6,MM_ISOTROPIC = 7,MM_ANISOTROPIC = 8,MM_MIN = 1,MM_MAX = 8,MM_MAX_FIXEDSCALE = 6,};
enum MACRO_MS {MS_CTS_ON = 0x10,MS_DSR_ON = 0x20,MS_RING_ON = 0x40,MS_RLSD_ON = 0x80,};
enum MACRO_NF {NF_QUERY = 3,NF_REQUERY = 4,};
enum MACRO_NI {NI_OPENCANDIDATE = 0x10,NI_CLOSECANDIDATE = 0x11,NI_SELECTCANDIDATESTR = 0x12,NI_CHANGECANDIDATELIST = 0x13,NI_FINALIZECONVERSIONRESULT = 0x14,NI_COMPOSITIONSTR = 0x15,NI_SETCANDIDATE_PAGESTART = 0x16,NI_SETCANDIDATE_PAGESIZE = 0x17,NI_IMEMENUSELECTED = 0x18,};
enum MACRO_NO {NO_RECOVERY = 11003,NO_DATA = 11004,};
enum MACRO_NS {NS_ALL = 0,NS_SAP = 1,NS_NDS = 2,NS_PEER_BROWSE = 3,NS_SLP = 5,NS_DHCP = 6,NS_TCPIP_LOCAL = 10,NS_TCPIP_HOSTS = 11,NS_DNS = 12,NS_NETBT = 13,NS_WINS = 14,NS_NBP = 20,NS_MS = 30,NS_STDA = 31,NS_NTDS = 32,NS_X500 = 40,NS_NIS = 41,NS_NISPLUS = 42,NS_WRQ = 50,NS_NETDES = 60,};
enum MACRO_OF {OF_READ = 0x0,OF_WRITE = 0x1,OF_READWRITE = 0x2,OF_SHARE_COMPAT = 0x0,OF_SHARE_EXCLUSIVE = 0x10,OF_SHARE_DENY_WRITE = 0x20,OF_SHARE_DENY_READ = 0x30,OF_SHARE_DENY_NONE = 0x40,OF_PARSE = 0x100,OF_DELETE = 0x200,OF_VERIFY = 0x400,OF_CANCEL = 0x800,OF_CREATE = 0x1000,OF_PROMPT = 0x2000,OF_EXIST = 0x4000,OF_REOPEN = 0x8000,};
enum MACRO_ON {NUMLOCK_ON = 0x20,SCROLLLOCK_ON = 0x40,CAPSLOCK_ON = 0x80,};
enum MACRO_PC {PC_24 = 0x0,PC_53 = 0x200,PC_64 = 0x300,};
enum MACRO_PD {PD_ALLPAGES = 0x0,PD_SELECTION = 0x1,PD_PAGENUMS = 0x2,PD_NOSELECTION = 0x4,PD_NOPAGENUMS = 0x8,PD_COLLATE = 0x10,PD_PRINTTOFILE = 0x20,PD_PRINTSETUP = 0x40,PD_NOWARNING = 0x80,PD_RETURNDC = 0x100,PD_RETURNIC = 0x200,PD_RETURNDEFAULT = 0x400,PD_SHOWHELP = 0x800,PD_ENABLEPRINTHOOK = 0x1000,PD_ENABLESETUPHOOK = 0x2000,PD_ENABLEPRINTTEMPLATE = 0x4000,PD_ENABLESETUPTEMPLATE = 0x8000,PD_ENABLEPRINTTEMPLATEHANDLE = 0x10000,PD_ENABLESETUPTEMPLATEHANDLE = 0x20000,PD_USEDEVMODECOPIES = 0x40000,PD_USEDEVMODECOPIESANDCOLLATE = 0x40000,PD_DISABLEPRINTTOFILE = 0x80000,PD_HIDEPRINTTOFILE = 0x100000,PD_NONETWORKBUTTON = 0x200000,PD_CURRENTPAGE = 0x400000,PD_NOCURRENTPAGE = 0x800000,PD_EXCLUSIONFLAGS = 0x1000000,PD_USELARGETEMPLATE = 0x10000000,PD_EXCL_COPIESANDCOLLATE = 0x8100,};
enum MACRO_PF {PF_FLOATING_POINT_PRECISION_ERRATA = 0,PF_FLOATING_POINT_EMULATED = 1,PF_COMPARE_EXCHANGE_DOUBLE = 2,PF_MMX_INSTRUCTIONS_AVAILABLE = 3,PF_PPC_MOVEMEM_64BIT_OK = 4,PF_ALPHA_BYTE_INSTRUCTIONS = 5,PF_XMMI_INSTRUCTIONS_AVAILABLE = 6,PF_3DNOW_INSTRUCTIONS_AVAILABLE = 7,PF_RDTSC_INSTRUCTION_AVAILABLE = 8,PF_PAE_ENABLED = 9,};
enum MACRO_PM {PM_NOREMOVE = 0x0,PM_REMOVE = 0x1,PM_NOYIELD = 0x2,};
enum MACRO_PO {PO_DELETE = 0x13,PO_RENAME = 0x14,PO_PORTCHANGE = 0x20,PO_REN_PORT = 0x34,};
enum MACRO_PP {PP_DISPLAYERRORS = 0x1,};
enum MACRO_PR {PR_JOBSTATUS = 0x0,};
enum MACRO_PS {PS_SOLID = 0,PS_DASH = 1,PS_DOT = 2,PS_DASHDOT = 3,PS_DASHDOTDOT = 4,PS_NULL = 5,PS_INSIDEFRAME = 6,PS_USERSTYLE = 7,PS_ALTERNATE = 8,PS_STYLE_MASK = 15,PS_ENDCAP_ROUND = 0,PS_ENDCAP_SQUARE = 256,PS_ENDCAP_FLAT = 512,PS_ENDCAP_MASK = 3840,PS_JOIN_ROUND = 0,PS_JOIN_BEVEL = 4096,PS_JOIN_MITER = 8192,PS_JOIN_MASK = 61440,PS_COSMETIC = 0,PS_GEOMETRIC = 65536,PS_TYPE_MASK = 983040,};
enum MACRO_PT {PT_CLOSEFIGURE = 0x1,PT_LINETO = 0x2,PT_BEZIERTO = 0x4,PT_MOVETO = 0x6,};
enum MACRO_QS {QS_KEY = 0x1,QS_MOUSEMOVE = 0x2,QS_MOUSEBUTTON = 0x4,QS_POSTMESSAGE = 0x8,QS_TIMER = 0x10,QS_PAINT = 0x20,QS_SENDMESSAGE = 0x40,QS_HOTKEY = 0x80,QS_ALLPOSTMESSAGE = 0x100,QS_MOUSE = 0x6,QS_INPUT = 0x7,QS_ALLEVENTS = 0xBF,QS_ALLINPUT = 0xFF,};
enum MACRO_R2 {R2_BLACK = 1,R2_NOTMERGEPEN = 2,R2_MASKNOTPEN = 3,R2_NOTCOPYPEN = 4,R2_MASKPENNOT = 5,R2_NOT = 6,R2_XORPEN = 7,R2_NOTMASKPEN = 8,R2_MASKPEN = 9,R2_NOTXORPEN = 10,R2_NOP = 11,R2_MERGENOTPEN = 12,R2_COPYPEN = 13,R2_MERGEPENNOT = 14,R2_MERGEPEN = 15,R2_WHITE = 16,R2_LAST = 16,};
enum MACRO_RC {RC_CHOP = 0xC00,RC_UP = 0x800,RC_DOWN = 0x400,RC_NEAR = 0x0,};
enum MACRO_RP {RP_LOGON = 0x1,RP_INIFILE = 0x2,};
enum MACRO_RT {RT_CURSOR = 1,RT_BITMAP = 2,RT_ICON = 3,RT_MENU = 4,RT_DIALOG = 5,RT_STRING = 6,RT_FONTDIR = 7,RT_FONT = 8,RT_ACCELERATOR = 9,RT_RCDATA = 10,RT_MESSAGETABLE = 11,};
enum MACRO_SB {SB_NONE = 0x0,SB_CONST_ALPHA = 0x1,SB_PIXEL_ALPHA = 0x2,SB_PREMULT_ALPHA = 0x4,SB_GRAD_RECT = 0x10,SB_GRAD_TRI = 0x20,};
enum MACRO_SC {SC_SIZE = 0xF000,SC_MOVE = 0xF010,SC_MINIMIZE = 0xF020,SC_MAXIMIZE = 0xF030,SC_NEXTWINDOW = 0xF040,SC_PREVWINDOW = 0xF050,SC_CLOSE = 0xF060,SC_VSCROLL = 0xF070,SC_HSCROLL = 0xF080,SC_MOUSEMENU = 0xF090,SC_KEYMENU = 0xF100,SC_ARRANGE = 0xF110,SC_RESTORE = 0xF120,SC_TASKLIST = 0xF130,SC_SCREENSAVE = 0xF140,SC_HOTKEY = 0xF150,SC_DEFAULT = 0xF160,SC_MONITORPOWER = 0xF170,SC_CONTEXTHELP = 0xF180,SC_SEPARATOR = 0xF00F,SC_ICON = 0xF020,SC_ZOOM = 0xF030,};
enum MACRO_SD {SD_RECEIVE = 0x0,SD_SEND = 0x1,SD_BOTH = 0x2,};
enum MACRO_SE {SE_GROUP_MANDATORY = 0x1,SE_GROUP_ENABLED_BY_DEFAULT = 0x2,SE_GROUP_ENABLED = 0x4,SE_GROUP_OWNER = 0x8,SE_GROUP_USE_FOR_DENY_ONLY = 0x10,SE_GROUP_LOGON_ID = 0xC0000000,SE_GROUP_RESOURCE = 0x20000000,};
enum MACRO_SG {SG_UNCONSTRAINED_GROUP = 0x1,SG_CONSTRAINED_GROUP = 0x2,};
enum MACRO_SH {SH_COMPAT = 0x0,SH_DENYRW = 0x10,SH_DENYWR = 0x20,SH_DENYRD = 0x30,SH_DENYNO = 0x40,SH_DENYNONE = 0x40,};
enum MACRO_SM {SM_CXSCREEN = 0,SM_CYSCREEN = 1,SM_CXVSCROLL = 2,SM_CYHSCROLL = 3,SM_CYCAPTION = 4,SM_CXBORDER = 5,SM_CYBORDER = 6,SM_CXDLGFRAME = 7,SM_CYDLGFRAME = 8,SM_CYVTHUMB = 9,SM_CXHTHUMB = 10,SM_CXICON = 11,SM_CYICON = 12,SM_CXCURSOR = 13,SM_CYCURSOR = 14,SM_CYMENU = 15,SM_CXFULLSCREEN = 16,SM_CYFULLSCREEN = 17,SM_CYKANJIWINDOW = 18,SM_MOUSEPRESENT = 19,SM_CYVSCROLL = 20,SM_CXHSCROLL = 21,SM_DEBUG = 22,SM_SWAPBUTTON = 23,SM_RESERVED1 = 24,SM_RESERVED2 = 25,SM_RESERVED3 = 26,SM_RESERVED4 = 27,SM_CXMIN = 28,SM_CYMIN = 29,SM_CXSIZE = 30,SM_CYSIZE = 31,SM_CXFRAME = 32,SM_CYFRAME = 33,SM_CXMINTRACK = 34,SM_CYMINTRACK = 35,SM_CXDOUBLECLK = 36,SM_CYDOUBLECLK = 37,SM_CXICONSPACING = 38,SM_CYICONSPACING = 39,SM_MENUDROPALIGNMENT = 40,SM_PENWINDOWS = 41,SM_DBCSENABLED = 42,SM_CMOUSEBUTTONS = 43,SM_CXFIXEDFRAME = 7,SM_CYFIXEDFRAME = 8,SM_CXSIZEFRAME = 32,SM_CYSIZEFRAME = 33,SM_SECURE = 44,SM_CXEDGE = 45,SM_CYEDGE = 46,SM_CXMINSPACING = 47,SM_CYMINSPACING = 48,SM_CXSMICON = 49,SM_CYSMICON = 50,SM_CYSMCAPTION = 51,SM_CXSMSIZE = 52,SM_CYSMSIZE = 53,SM_CXMENUSIZE = 54,SM_CYMENUSIZE = 55,SM_ARRANGE = 56,SM_CXMINIMIZED = 57,SM_CYMINIMIZED = 58,SM_CXMAXTRACK = 59,SM_CYMAXTRACK = 60,SM_CXMAXIMIZED = 61,SM_CYMAXIMIZED = 62,SM_NETWORK = 63,SM_CLEANBOOT = 67,SM_CXDRAG = 68,SM_CYDRAG = 69,SM_SHOWSOUNDS = 70,SM_CXMENUCHECK = 71,SM_CYMENUCHECK = 72,SM_SLOWMACHINE = 73,SM_MIDEASTENABLED = 74,SM_MOUSEWHEELPRESENT = 75,SM_XVIRTUALSCREEN = 76,SM_YVIRTUALSCREEN = 77,SM_CXVIRTUALSCREEN = 78,SM_CYVIRTUALSCREEN = 79,SM_CMONITORS = 80,SM_SAMEDISPLAYFORMAT = 81,SM_IMMENABLED = 82,SM_CMETRICS = 83,SM_REMOTESESSION = 4096,};
enum MACRO_SO {SO_DEBUG = 0x1,SO_ACCEPTCONN = 0x2,SO_REUSEADDR = 0x4,SO_KEEPALIVE = 0x8,SO_DONTROUTE = 0x10,SO_BROADCAST = 0x20,SO_USELOOPBACK = 0x40,SO_LINGER = 0x80,SO_OOBINLINE = 0x100,SO_DONTLINGER = 0xFFFFFF7F,SO_EXCLUSIVEADDRUSE = 0xFFFFFFFB,SO_SNDBUF = 0x1001,SO_RCVBUF = 0x1002,SO_SNDLOWAT = 0x1003,SO_RCVLOWAT = 0x1004,SO_SNDTIMEO = 0x1005,SO_RCVTIMEO = 0x1006,SO_ERROR = 0x1007,SO_TYPE = 0x1008,SO_GROUP_ID = 0x2001,SO_GROUP_PRIORITY = 0x2002,SO_MAX_MSG_SIZE = 0x2003,SO_PROTOCOL_INFOA = 0x2004,SO_PROTOCOL_INFOW = 0x2005,SO_PROTOCOL_INFO = 0x2004,};
enum MACRO_SP {SP_SERIALCOMM = 0x1,};
enum MACRO_SS {SS_LEFT = 0x0,SS_CENTER = 0x1,SS_RIGHT = 0x2,SS_ICON = 0x3,SS_BLACKRECT = 0x4,SS_GRAYRECT = 0x5,SS_WHITERECT = 0x6,SS_BLACKFRAME = 0x7,SS_GRAYFRAME = 0x8,SS_WHITEFRAME = 0x9,SS_USERITEM = 0xA,SS_SIMPLE = 0xB,SS_LEFTNOWORDWRAP = 0xC,SS_OWNERDRAW = 0xD,SS_BITMAP = 0xE,SS_ENHMETAFILE = 0xF,SS_ETCHEDHORZ = 0x10,SS_ETCHEDVERT = 0x11,SS_ETCHEDFRAME = 0x12,SS_TYPEMASK = 0x1F,SS_NOPREFIX = 0x80,SS_NOTIFY = 0x100,SS_CENTERIMAGE = 0x200,SS_RIGHTJUST = 0x400,SS_REALSIZEIMAGE = 0x800,SS_SUNKEN = 0x1000,SS_ENDELLIPSIS = 0x4000,SS_PATHELLIPSIS = 0x8000,SS_WORDELLIPSIS = 0xC000,SS_ELLIPSISMASK = 0xC000,};
enum MACRO_ST {ST_CONNECTED = 0x1,ST_ADVISE = 0x2,ST_ISLOCAL = 0x4,ST_BLOCKED = 0x8,ST_CLIENT = 0x10,ST_TERMINATED = 0x20,ST_INLIST = 0x40,ST_BLOCKNEXT = 0x80,ST_ISSELF = 0x100,};
enum MACRO_SW {SW_INVALID = 0x1,SW_DENORMAL = 0x2,SW_ZERODIVIDE = 0x4,SW_OVERFLOW = 0x8,SW_UNDERFLOW = 0x10,SW_INEXACT = 0x20,SW_STACKFAULT = 0x40,};
enum MACRO_TA {TA_NOUPDATECP = 0,TA_UPDATECP = 1,TA_LEFT = 0,TA_RIGHT = 2,TA_CENTER = 6,TA_TOP = 0,TA_BOTTOM = 8,TA_BASELINE = 24,TA_RTLREADING = 256,TA_MASK = 287,};
enum MACRO_TC {TC_NORMAL = 0,TC_HARDERR = 1,TC_GP_TRAP = 2,TC_SIGNAL = 3,};
enum MACRO_TH {TH_NETDEV = 0x1,TH_TAPI = 0x2,};
enum MACRO_TT {TT_POLYGON_TYPE = 24,TT_PRIM_LINE = 1,TT_PRIM_QSPLINE = 2,TT_PRIM_CSPLINE = 3,};
enum MACRO_UI {UI_CAP_2700 = 0x1,UI_CAP_ROT90 = 0x2,UI_CAP_ROTANY = 0x4,};
enum MACRO_VK {VK_LBUTTON = 0x1,VK_RBUTTON = 0x2,VK_CANCEL = 0x3,VK_MBUTTON = 0x4,VK_XBUTTON1 = 0x5,VK_XBUTTON2 = 0x6,VK_BACK = 0x8,VK_TAB = 0x9,VK_CLEAR = 0xC,VK_RETURN = 0xD,VK_SHIFT = 0x10,VK_CONTROL = 0x11,VK_MENU = 0x12,VK_PAUSE = 0x13,VK_CAPITAL = 0x14,VK_KANA = 0x15,VK_HANGEUL = 0x15,VK_HANGUL = 0x15,VK_JUNJA = 0x17,VK_FINAL = 0x18,VK_HANJA = 0x19,VK_KANJI = 0x19,VK_ESCAPE = 0x1B,VK_CONVERT = 0x1C,VK_NONCONVERT = 0x1D,VK_ACCEPT = 0x1E,VK_MODECHANGE = 0x1F,VK_SPACE = 0x20,VK_PRIOR = 0x21,VK_NEXT = 0x22,VK_END = 0x23,VK_HOME = 0x24,VK_LEFT = 0x25,VK_UP = 0x26,VK_RIGHT = 0x27,VK_DOWN = 0x28,VK_SELECT = 0x29,VK_PRINT = 0x2A,VK_EXECUTE = 0x2B,VK_SNAPSHOT = 0x2C,VK_INSERT = 0x2D,VK_DELETE = 0x2E,VK_HELP = 0x2F,VK_LWIN = 0x5B,VK_RWIN = 0x5C,VK_APPS = 0x5D,VK_SLEEP = 0x5F,VK_NUMPAD0 = 0x60,VK_NUMPAD1 = 0x61,VK_NUMPAD2 = 0x62,VK_NUMPAD3 = 0x63,VK_NUMPAD4 = 0x64,VK_NUMPAD5 = 0x65,VK_NUMPAD6 = 0x66,VK_NUMPAD7 = 0x67,VK_NUMPAD8 = 0x68,VK_NUMPAD9 = 0x69,VK_MULTIPLY = 0x6A,VK_ADD = 0x6B,VK_SEPARATOR = 0x6C,VK_SUBTRACT = 0x6D,VK_DECIMAL = 0x6E,VK_DIVIDE = 0x6F,VK_F1 = 0x70,VK_F2 = 0x71,VK_F3 = 0x72,VK_F4 = 0x73,VK_F5 = 0x74,VK_F6 = 0x75,VK_F7 = 0x76,VK_F8 = 0x77,VK_F9 = 0x78,VK_F10 = 0x79,VK_F11 = 0x7A,VK_F12 = 0x7B,VK_F13 = 0x7C,VK_F14 = 0x7D,VK_F15 = 0x7E,VK_F16 = 0x7F,VK_F17 = 0x80,VK_F18 = 0x81,VK_F19 = 0x82,VK_F20 = 0x83,VK_F21 = 0x84,VK_F22 = 0x85,VK_F23 = 0x86,VK_F24 = 0x87,VK_NUMLOCK = 0x90,VK_SCROLL = 0x91,VK_OEM_NEC_EQUAL = 0x92,VK_OEM_FJ_JISHO = 0x92,VK_OEM_FJ_MASSHOU = 0x93,VK_OEM_FJ_TOUROKU = 0x94,VK_OEM_FJ_LOYA = 0x95,VK_OEM_FJ_ROYA = 0x96,VK_LSHIFT = 0xA0,VK_RSHIFT = 0xA1,VK_LCONTROL = 0xA2,VK_RCONTROL = 0xA3,VK_LMENU = 0xA4,VK_RMENU = 0xA5,VK_BROWSER_BACK = 0xA6,VK_BROWSER_FORWARD = 0xA7,VK_BROWSER_REFRESH = 0xA8,VK_BROWSER_STOP = 0xA9,VK_BROWSER_SEARCH = 0xAA,VK_BROWSER_FAVORITES = 0xAB,VK_BROWSER_HOME = 0xAC,VK_VOLUME_MUTE = 0xAD,VK_VOLUME_DOWN = 0xAE,VK_VOLUME_UP = 0xAF,VK_MEDIA_NEXT_TRACK = 0xB0,VK_MEDIA_PREV_TRACK = 0xB1,VK_MEDIA_STOP = 0xB2,VK_MEDIA_PLAY_PAUSE = 0xB3,VK_LAUNCH_MAIL = 0xB4,VK_LAUNCH_MEDIA_SELECT = 0xB5,VK_LAUNCH_APP1 = 0xB6,VK_LAUNCH_APP2 = 0xB7,VK_OEM_1 = 0xBA,VK_OEM_PLUS = 0xBB,VK_OEM_COMMA = 0xBC,VK_OEM_MINUS = 0xBD,VK_OEM_PERIOD = 0xBE,VK_OEM_2 = 0xBF,VK_OEM_3 = 0xC0,VK_OEM_4 = 0xDB,VK_OEM_5 = 0xDC,VK_OEM_6 = 0xDD,VK_OEM_7 = 0xDE,VK_OEM_8 = 0xDF,VK_OEM_AX = 0xE1,VK_OEM_102 = 0xE2,VK_ICO_HELP = 0xE3,VK_ICO_00 = 0xE4,VK_PROCESSKEY = 0xE5,VK_ICO_CLEAR = 0xE6,VK_PACKET = 0xE7,VK_OEM_RESET = 0xE9,VK_OEM_JUMP = 0xEA,VK_OEM_PA1 = 0xEB,VK_OEM_PA2 = 0xEC,VK_OEM_PA3 = 0xED,VK_OEM_WSCTRL = 0xEE,VK_OEM_CUSEL = 0xEF,VK_OEM_ATTN = 0xF0,VK_OEM_FINISH = 0xF1,VK_OEM_COPY = 0xF2,VK_OEM_AUTO = 0xF3,VK_OEM_ENLW = 0xF4,VK_OEM_BACKTAB = 0xF5,VK_ATTN = 0xF6,VK_CRSEL = 0xF7,VK_EXSEL = 0xF8,VK_EREOF = 0xF9,VK_PLAY = 0xFA,VK_ZOOM = 0xFB,VK_NONAME = 0xFC,VK_PA1 = 0xFD,VK_OEM_CLEAR = 0xFE,};
enum MACRO_VP {VP_COMMAND_GET = 0x1,VP_COMMAND_SET = 0x2,VP_FLAGS_TV_MODE = 0x1,VP_FLAGS_TV_STANDARD = 0x2,VP_FLAGS_FLICKER = 0x4,VP_FLAGS_OVERSCAN = 0x8,VP_FLAGS_MAX_UNSCALED = 0x10,VP_FLAGS_POSITION = 0x20,VP_FLAGS_BRIGHTNESS = 0x40,VP_FLAGS_CONTRAST = 0x80,VP_FLAGS_COPYPROTECT = 0x100,VP_MODE_WIN_GRAPHICS = 0x1,VP_MODE_TV_PLAYBACK = 0x2,VP_TV_STANDARD_NTSC_M = 0x1,VP_TV_STANDARD_NTSC_M_J = 0x2,VP_TV_STANDARD_PAL_B = 0x4,VP_TV_STANDARD_PAL_D = 0x8,VP_TV_STANDARD_PAL_H = 0x10,VP_TV_STANDARD_PAL_I = 0x20,VP_TV_STANDARD_PAL_M = 0x40,VP_TV_STANDARD_PAL_N = 0x80,VP_TV_STANDARD_SECAM_B = 0x100,VP_TV_STANDARD_SECAM_D = 0x200,VP_TV_STANDARD_SECAM_G = 0x400,VP_TV_STANDARD_SECAM_H = 0x800,VP_TV_STANDARD_SECAM_K = 0x1000,VP_TV_STANDARD_SECAM_K1 = 0x2000,VP_TV_STANDARD_SECAM_L = 0x4000,VP_TV_STANDARD_WIN_VGA = 0x8000,VP_TV_STANDARD_NTSC_433 = 0x10000,VP_TV_STANDARD_PAL_G = 0x20000,VP_TV_STANDARD_PAL_60 = 0x40000,VP_TV_STANDARD_SECAM_L1 = 0x80000,VP_CP_TYPE_APS_TRIGGER = 0x1,VP_CP_TYPE_MACROVISION = 0x2,VP_CP_CMD_ACTIVATE = 0x1,VP_CP_CMD_DEACTIVATE = 0x2,VP_CP_CMD_CHANGE = 0x4,};
enum MACRO_VS {VS_FILE_INFO = 16,VS_VERSION_INFO = 1,VS_USER_DEFINED = 100,VS_FFI_SIGNATURE = -17890115,VS_FFI_STRUCVERSION = 65536,VS_FFI_FILEFLAGSMASK = 63,VS_FF_DEBUG = 1,VS_FF_PRERELEASE = 2,VS_FF_PATCHED = 4,VS_FF_PRIVATEBUILD = 8,VS_FF_INFOINFERRED = 16,VS_FF_SPECIALBUILD = 32,};
enum MACRO_WA {WA_INACTIVE = 0,WA_ACTIVE = 1,WA_CLICKACTIVE = 2,};
enum MACRO_WB {WB_LEFT = 0,WB_RIGHT = 1,WB_ISDELIMITER = 2,};
enum MACRO_WC {WC_DIALOG = 0x8002,};
enum MACRO_WH {WH_MIN = -1,WH_MSGFILTER = -1,WH_JOURNALRECORD = 0,WH_JOURNALPLAYBACK = 1,WH_KEYBOARD = 2,WH_GETMESSAGE = 3,WH_CALLWNDPROC = 4,WH_CBT = 5,WH_SYSMSGFILTER = 6,WH_MOUSE = 7,WH_DEBUG = 9,WH_SHELL = 10,WH_FOREGROUNDIDLE = 11,WH_CALLWNDPROCRET = 12,WH_KEYBOARD_LL = 13,WH_MOUSE_LL = 14,WH_MAX = 14,WH_MINHOOK = -1,WH_MAXHOOK = 14,};
enum MACRO_WM {WM_NULL = 0x0,WM_CREATE = 0x1,WM_DESTROY = 0x2,WM_MOVE = 0x3,WM_SIZEWAIT = 0x4,WM_SIZE = 0x5,WM_ACTIVATE = 0x6,WM_SETFOCUS = 0x7,WM_KILLFOCUS = 0x8,WM_SETVISIBLE = 0x9,WM_ENABLE = 0xA,WM_SETREDRAW = 0xB,WM_SETTEXT = 0xC,WM_GETTEXT = 0xD,WM_GETTEXTLENGTH = 0xE,WM_PAINT = 0xF,WM_CLOSE = 0x10,WM_QUERYENDSESSION = 0x11,WM_QUIT = 0x12,WM_QUERYOPEN = 0x13,WM_ERASEBKGND = 0x14,WM_SYSCOLORCHANGE = 0x15,WM_ENDSESSION = 0x16,WM_SYSTEMERROR = 0x17,WM_SHOWWINDOW = 0x18,WM_CTLCOLOR = 0x19,WM_SETTINGCHANGE = 0x1A,WM_WININICHANGE = 0x1A,WM_DEVMODECHANGE = 0x1B,WM_ACTIVATEAPP = 0x1C,WM_FONTCHANGE = 0x1D,WM_TIMECHANGE = 0x1E,WM_CANCELMODE = 0x1F,WM_SETCURSOR = 0x20,WM_MOUSEACTIVATE = 0x21,WM_CHILDACTIVATE = 0x22,WM_QUEUESYNC = 0x23,WM_GETMINMAXINFO = 0x24,WM_LOGOFF = 0x25,WM_PAINTICON = 0x26,WM_ICONERASEBKGND = 0x27,WM_NEXTDLGCTL = 0x28,WM_ALTTABACTIVE = 0x29,WM_SPOOLERSTATUS = 0x2A,WM_DRAWITEM = 0x2B,WM_MEASUREITEM = 0x2C,WM_DELETEITEM = 0x2D,WM_VKEYTOITEM = 0x2E,WM_CHARTOITEM = 0x2F,WM_SETFONT = 0x30,WM_GETFONT = 0x31,WM_SETHOTKEY = 0x32,WM_GETHOTKEY = 0x33,WM_FILESYSCHANGE = 0x34,WM_ISACTIVEICON = 0x35,WM_QUERYPARKICON = 0x36,WM_QUERYDRAGICON = 0x37,WM_WINHELP = 0x38,WM_COMPAREITEM = 0x39,WM_FULLSCREEN = 0x3A,WM_CLIENTSHUTDOWN = 0x3B,WM_DDEMLEVENT = 0x3C,WM_GETOBJECT = 0x3D,MM_CALCSCROLL = 0x3F,WM_TESTING = 0x40,WM_COMPACTING = 0x41,WM_OTHERWINDOWCREATED = 0x42,WM_OTHERWINDOWDESTROYED = 0x43,WM_COMMNOTIFY = 0x44,WM_MEDIASTATUSCHANGE = 0x45,WM_WINDOWPOSCHANGING = 0x46,WM_WINDOWPOSCHANGED = 0x47,WM_POWER = 0x48,WM_COPYGLOBALDATA = 0x49,WM_COPYDATA = 0x4A,WM_CANCELJOURNAL = 0x4B,WM_LOGONNOTIFY = 0x4C,WM_KEYF1 = 0x4D,WM_NOTIFY = 0x4E,WM_ACCESS_WINDOW = 0x4F,WM_INPUTLANGCHANGEREQUEST = 0x50,WM_INPUTLANGCHANGE = 0x51,WM_TCARD = 0x52,WM_HELP = 0x53,WM_USERCHANGED = 0x54,WM_NOTIFYFORMAT = 0x55,WM_QM_ACTIVATE = 0x60,WM_HOOK_DO_CALLBACK = 0x61,WM_SYSCOPYDATA = 0x62,WM_FINALDESTROY = 0x70,WM_MEASUREITEM_CLIENTDATA = 0x71,WM_CONTEXTMENU = 0x7B,WM_STYLECHANGING = 0x7C,WM_STYLECHANGED = 0x7D,WM_DISPLAYCHANGE = 0x7E,WM_GETICON = 0x7F,WM_SETICON = 0x80,WM_NCCREATE = 0x81,WM_NCDESTROY = 0x82,WM_NCCALCSIZE = 0x83,WM_NCHITTEST = 0x84,WM_NCPAINT = 0x85,WM_NCACTIVATE = 0x86,WM_GETDLGCODE = 0x87,WM_SYNCPAINT = 0x88,WM_SYNCTASK = 0x89,WM_NCMOUSEMOVE = 0xA0,WM_NCLBUTTONDOWN = 0xA1,WM_NCLBUTTONUP = 0xA2,WM_NCLBUTTONDBLCLK = 0xA3,WM_NCRBUTTONDOWN = 0xA4,WM_NCRBUTTONUP = 0xA5,WM_NCRBUTTONDBLCLK = 0xA6,WM_NCMBUTTONDOWN = 0xA7,WM_NCMBUTTONUP = 0xA8,WM_NCMBUTTONDBLCLK = 0xA9,WM_NCXBUTTONDOWN = 0xAB,WM_NCXBUTTONUP = 0xAC,WM_NCXBUTTONDBLCLK = 0xAD,EM_GETSEL = 0xB0,EM_SETSEL = 0xB1,EM_GETRECT = 0xB2,EM_SETRECT = 0xB3,EM_SETRECTNP = 0xB4,EM_SCROLL = 0xB5,EM_LINESCROLL = 0xB6,EM_SCROLLCARET = 0xB7,EM_GETMODIFY = 0xB8,EM_SETMODIFY = 0xB9,EM_GETLINECOUNT = 0xBA,EM_LINEINDEX = 0xBB,EM_SETHANDLE = 0xBC,EM_GETHANDLE = 0xBD,EM_GETTHUMB = 0xBE,EM_LINELENGTH = 0xC1,EM_REPLACESEL = 0xC2,EM_SETFONT = 0xC3,EM_GETLINE = 0xC4,EM_LIMITTEXT = 0xC5,EM_SETLIMITTEXT = 0xC5,EM_CANUNDO = 0xC6,EM_UNDO = 0xC7,EM_FMTLINES = 0xC8,EM_LINEFROMCHAR = 0xC9,EM_SETWORDBREAK = 0xCA,EM_SETTABSTOPS = 0xCB,EM_SETPASSWORDCHAR = 0xCC,EM_EMPTYUNDOBUFFER = 0xCD,EM_GETFIRSTVISIBLELINE = 0xCE,EM_SETREADONLY = 0xCF,EM_SETWORDBREAKPROC = 0xD0,EM_GETWORDBREAKPROC = 0xD1,EM_GETPASSWORDCHAR = 0xD2,EM_SETMARGINS = 0xD3,EM_GETMARGINS = 0xD4,EM_GETLIMITTEXT = 0xD5,EM_POSFROMCHAR = 0xD6,EM_CHARFROMPOS = 0xD7,EM_SETIMESTATUS = 0xD8,EM_GETIMESTATUS = 0xD9,SBM_SETPOS = 0xE0,SBM_GETPOS = 0xE1,SBM_SETRANGE = 0xE2,SBM_GETRANGE = 0xE3,SBM_ENABLE_ARROWS = 0xE4,SBM_SETRANGEREDRAW = 0xE6,SBM_SETSCROLLINFO = 0xE9,SBM_GETSCROLLINFO = 0xEA,SBM_GETSCROLLBARINFO = 0xEB,BM_GETCHECK = 0xF0,BM_SETCHECK = 0xF1,BM_GETSTATE = 0xF2,BM_SETSTATE = 0xF3,BM_SETSTYLE = 0xF4,BM_CLICK = 0xF5,BM_GETIMAGE = 0xF6,BM_SETIMAGE = 0xF7,BM_SETDONTCLICK = 0xF8,WM_INPUT = 0xFF,WM_KEYDOWN = 0x100,WM_KEYFIRST = 0x100,WM_KEYUP = 0x101,WM_CHAR = 0x102,WM_DEADCHAR = 0x103,WM_SYSKEYDOWN = 0x104,WM_SYSKEYUP = 0x105,WM_SYSCHAR = 0x106,WM_SYSDEADCHAR = 0x107,WM_KEYLAST = 0x108,WM_YOMICHAR = 0x108,WM_UNICHAR = 0x109,WM_WNT_CONVERTREQUESTEX = 0x109,WM_CONVERTREQUEST = 0x10A,WM_CONVERTRESULT = 0x10B,WM_INTERIM = 0x10C,WM_IM_INFO = 0x10C,WM_IME_STARTCOMPOSITION = 0x10D,WM_IME_ENDCOMPOSITION = 0x10E,WM_IME_COMPOSITION = 0x10F,WM_IME_KEYLAST = 0x10F,WM_INITDIALOG = 0x110,WM_COMMAND = 0x111,WM_SYSCOMMAND = 0x112,WM_TIMER = 0x113,WM_HSCROLL = 0x114,WM_VSCROLL = 0x115,WM_INITMENU = 0x116,WM_INITMENUPOPUP = 0x117,WM_SYSTIMER = 0x118,WM_MENUSELECT = 0x11F,WM_MENUCHAR = 0x120,WM_ENTERIDLE = 0x121,WM_MENURBUTTONUP = 0x122,WM_MENUDRAG = 0x123,WM_MENUGETOBJECT = 0x124,WM_UNINITMENUPOPUP = 0x125,WM_MENUCOMMAND = 0x126,WM_CHANGEUISTATE = 0x127,WM_UPDATEUISTATE = 0x128,WM_QUERYUISTATE = 0x129,WM_LBTRACKPOINT = 0x131,WM_CTLCOLORMSGBOX = 0x132,WM_CTLCOLOREDIT = 0x133,WM_CTLCOLORLISTBOX = 0x134,WM_CTLCOLORBTN = 0x135,WM_CTLCOLORDLG = 0x136,WM_CTLCOLORSCROLLBAR = 0x137,WM_CTLCOLORSTATIC = 0x138,CB_GETEDITSEL = 0x140,CB_LIMITTEXT = 0x141,CB_SETEDITSEL = 0x142,CB_ADDSTRING = 0x143,CB_DELETESTRING = 0x144,CB_DIR = 0x145,CB_GETCOUNT = 0x146,CB_GETCURSEL = 0x147,CB_GETLBTEXT = 0x148,CB_GETLBTEXTLEN = 0x149,CB_INSERTSTRING = 0x14A,CB_RESETCONTENT = 0x14B,CB_FINDSTRING = 0x14C,CB_SELECTSTRING = 0x14D,CB_SETCURSEL = 0x14E,CB_SHOWDROPDOWN = 0x14F,CB_GETITEMDATA = 0x150,CB_SETITEMDATA = 0x151,CB_GETDROPPEDCONTROLRECT = 0x152,CB_SETITEMHEIGHT = 0x153,CB_GETITEMHEIGHT = 0x154,CB_SETEXTENDEDUI = 0x155,CB_GETEXTENDEDUI = 0x156,CB_GETDROPPEDSTATE = 0x157,CB_FINDSTRINGEXACT = 0x158,CB_SETLOCALE = 0x159,CB_GETLOCALE = 0x15A,CB_GETTOPINDEX = 0x15B,CB_SETTOPINDEX = 0x15C,CB_GETHORIZONTALEXTENT = 0x15D,CB_SETHORIZONTALEXTENT = 0x15E,CB_GETDROPPEDWIDTH = 0x15F,CB_SETDROPPEDWIDTH = 0x160,CB_INITSTORAGE = 0x161,CB_MULTIPLEADDSTRING = 0x163,CB_GETCOMBOBOXINFO = 0x164,CB_SETMINVISIBLE = 0x1701,CB_GETMINVISIBLE = 0x1702,CB_SETCUEBANNER = 0x1703,CB_GETCUEBANNER = 0x1704,STM_SETICON = 0x170,STM_GETICON = 0x171,STM_SETIMAGE = 0x172,STM_GETIMAGE = 0x173,LB_ADDSTRING = 0x180,LB_INSERTSTRING = 0x181,LB_DELETESTRING = 0x182,LB_SELITEMRANGEEX = 0x183,LB_RESETCONTENT = 0x184,LB_SETSEL = 0x185,LB_SETCURSEL = 0x186,LB_GETSEL = 0x187,LB_GETCURSEL = 0x188,LB_GETTEXT = 0x189,LB_GETTEXTLEN = 0x18A,LB_GETCOUNT = 0x18B,LB_SELECTSTRING = 0x18C,LB_DIR = 0x18D,LB_GETTOPINDEX = 0x18E,LB_FINDSTRING = 0x18F,LB_GETSELCOUNT = 0x190,LB_GETSELITEMS = 0x191,LB_SETTABSTOPS = 0x192,LB_GETHORIZONTALEXTENT = 0x193,LB_SETHORIZONTALEXTENT = 0x194,LB_SETCOLUMNWIDTH = 0x195,LB_ADDFILE = 0x196,LB_SETTOPINDEX = 0x197,LB_GETITEMRECT = 0x198,LB_GETITEMDATA = 0x199,LB_SETITEMDATA = 0x19A,LB_SELITEMRANGE = 0x19B,LB_SETANCHORINDEX = 0x19C,LB_GETANCHORINDEX = 0x19D,LB_SETCARETINDEX = 0x19E,LB_GETCARETINDEX = 0x19F,LB_SETITEMHEIGHT = 0x1A0,LB_GETITEMHEIGHT = 0x1A1,LB_FINDSTRINGEXACT = 0x1A2,LBCB_CARETON = 0x1A3,LBCB_CARETOFF = 0x1A4,LB_SETLOCALE = 0x1A5,LB_GETLOCALE = 0x1A6,LB_SETCOUNT = 0x1A7,LB_INITSTORAGE = 0x1A8,LB_ITEMFROMPOINT = 0x1A9,LB_INSERTSTRINGUPPER = 0x1AA,LB_INSERTSTRINGLOWER = 0x1AB,LB_ADDSTRINGUPPER = 0x1AC,LB_ADDSTRINGLOWER = 0x1AD,LB_MULTIPLEADDSTRING = 0x1B1,LB_GETLISTBOXINFO = 0x1B2,MN_SETHMENU = 0x1E0,MN_GETHMENU = 0x1E1,MN_SIZEWINDOW = 0x1E2,MN_OPENHIERARCHY = 0x1E3,MN_CLOSEHIERARCHY = 0x1E4,MN_SELECTITEM = 0x1E5,MN_CANCELMENUS = 0x1E6,MN_SELECTFIRSTVALIDITEM = 0x1E7,MN_GETPPOPUPMENU = 0x1EA,MN_FINDMENUWINDOWFROMPOINT = 0x1EB,MN_SHOWPOPUPWINDOW = 0x1EC,MN_BUTTONDOWN = 0x1ED,MN_MOUSEMOVE = 0x1EE,MN_BUTTONUP = 0x1EF,MN_SETTIMERTOOPENHIERARCHY = 0x1F0,MN_DBLCLK = 0x1F1,WM_MOUSEFIRST = 0x200,WM_MOUSEMOVE = 0x200,WM_LBUTTONDOWN = 0x201,WM_LBUTTONUP = 0x202,WM_LBUTTONDBLCLK = 0x203,WM_RBUTTONDOWN = 0x204,WM_RBUTTONUP = 0x205,WM_RBUTTONDBLCLK = 0x206,WM_MBUTTONDOWN = 0x207,WM_MBUTTONUP = 0x208,WM_MBUTTONDBLCLK = 0x209,WM_MOUSELAST = 0x20D,WM_MOUSEWHEEL = 0x20A,WM_XBUTTONDOWN = 0x20B,WM_XBUTTONUP = 0x20C,WM_XBUTTONDBLCLK = 0x20D,WM_PARENTNOTIFY = 0x210,WM_ENTERMENULOOP = 0x211,WM_EXITMENULOOP = 0x212,WM_NEXTMENU = 0x213,WM_SIZING = 0x214,WM_CAPTURECHANGED = 0x215,WM_MOVING = 0x216,WM_POWERBROADCAST = 0x218,WM_DEVICECHANGE = 0x219,WM_MDICREATE = 0x220,WM_MDIDESTROY = 0x221,WM_MDIACTIVATE = 0x222,WM_MDIRESTORE = 0x223,WM_MDINEXT = 0x224,WM_MDIMAXIMIZE = 0x225,WM_MDITILE = 0x226,WM_MDICASCADE = 0x227,WM_MDIICONARRANGE = 0x228,WM_MDIGETACTIVE = 0x229,WM_DROPOBJECT = 0x22A,WM_QUERYDROPOBJECT = 0x22B,WM_BEGINDRAG = 0x22C,WM_DRAGLOOP = 0x22D,WM_DRAGSELECT = 0x22E,WM_DRAGMOVE = 0x22F,WM_MDISETMENU = 0x230,WM_ENTERSIZEMOVE = 0x231,WM_EXITSIZEMOVE = 0x232,WM_DROPFILES = 0x233,WM_MDIREFRESHMENU = 0x234,WM_IME_REPORT = 0x280,WM_HANGEULFIRST = 0x280,WM_KANJIFIRST = 0x280,WM_IME_SETCONTEXT = 0x281,WM_IME_NOTIFY = 0x282,WM_IME_CONTROL = 0x283,WM_IME_COMPOSITIONFULL = 0x284,WM_IME_SELECT = 0x285,WM_IME_CHAR = 0x286,WM_IME_SYSTEM = 0x287,WM_IME_REQUEST = 0x288,WM_IMEKEYDOWN = 0x290,WM_IME_KEYDOWN = 0x290,WM_IMEKEYUP = 0x291,WM_IME_KEYUP = 0x291,WM_HANGEULLAST = 0x29F,WM_KANJILAST = 0x29F,WM_NCMOUSEHOVER = 0x2A0,WM_MOUSEHOVER = 0x2A1,WM_NCMOUSELEAVE = 0x2A2,WM_MOUSELEAVE = 0x2A3,WM_TRACKMOUSEEVENT_LAST = 0x2AF,WM_WTSSESSION_CHANGE = 0x2B1,WM_TABLET_FIRST = 0x2C0,WM_TABLET_LAST = 0x2DF,WM_CUT = 0x300,WM_COPY = 0x301,WM_PASTE = 0x302,WM_CLEAR = 0x303,WM_UNDO = 0x304,WM_RENDERFORMAT = 0x305,WM_RENDERALLFORMATS = 0x306,WM_DESTROYCLIPBOARD = 0x307,WM_DRAWCLIPBOARD = 0x308,WM_PAINTCLIPBOARD = 0x309,WM_VSCROLLCLIPBOARD = 0x30A,WM_SIZECLIPBOARD = 0x30B,WM_ASKCBFORMATNAME = 0x30C,WM_CHANGECBCHAIN = 0x30D,WM_HSCROLLCLIPBOARD = 0x30E,WM_QUERYNEWPALETTE = 0x30F,WM_PALETTEISCHANGING = 0x310,WM_PALETTECHANGED = 0x311,WM_HOTKEY = 0x312,WM_SYSMENU = 0x313,WM_HOOKMSG = 0x314,WM_EXITPROCESS = 0x315,WM_WAKETHREAD = 0x316,WM_PRINT = 0x317,WM_PRINTCLIENT = 0x318,WM_APPCOMMAND = 0x319,WM_THEMECHANGED = 0x31A,WM_HANDHELDFIRST = 0x358,WM_HANDHELDLAST = 0x35F,WM_AFXFIRST = 0x360,WM_AFXLAST = 0x37F,WM_PENWINFIRST = 0x380,WM_RCRESULT = 0x381,WM_HOOKRCRESULT = 0x382,WM_GLOBALRCCHANGE = 0x383,WM_PENMISCINFO = 0x383,WM_SKB = 0x384,WM_HEDITCTL = 0x385,WM_PENCTL = 0x385,WM_PENMISC = 0x386,WM_CTLINIT = 0x387,WM_PENEVENT = 0x388,WM_PENWINLAST = 0x38F,WM_INTERNAL_COALESCE_FIRST = 0x390,WM_COALESCE_FIRST = 0x390,WM_COALESCE_LAST = 0x39F,WM_MM_RESERVED_FIRST = 0x3A0,WM_INTERNAL_COALESCE_LAST = 0x3B0,WM_MM_RESERVED_LAST = 0x3DF,WM_DDE_INITIATE = 0x3E0,WM_DDE_TERMINATE = 0x3E1,WM_DDE_ADVISE = 0x3E2,WM_DDE_UNADVISE = 0x3E3,WM_DDE_ACK = 0x3E4,WM_DDE_DATA = 0x3E5,WM_DDE_REQUEST = 0x3E6,WM_DDE_POKE = 0x3E7,WM_DDE_EXECUTE = 0x3E8,WM_DBNOTIFICATION = 0x3FD,WM_NETCONNECT = 0x3FE,WM_HIBERNATE = 0x3FF,WM_USER = 0x400,DDM_SETFMT = 0x400,DDM_DRAW = 0x401,DDM_CLOSE = 0x402,DDM_BEGIN = 0x403,DDM_END = 0x404,DM_GETDEFID = 0x400,DM_SETDEFID = 0x401,DM_REPOSITION = 0x402,NIN_SELECT = 0x400,NIN_KEYSELECT = 0x401,NIN_BALLOONSHOW = 0x402,NIN_BALLOONHIDE = 0x403,NIN_BALLOONTIMEOUT = 0x404,NIN_BALLOONUSERCLICK = 0x405,NIN_POPUPOPEN = 0x406,NIN_POPUPCLOSE = 0x407,TBM_GETPOS = 0x400,TBM_GETRANGEMIN = 0x401,TBM_GETRANGEMAX = 0x402,TBM_GETTIC = 0x403,TBM_SETTIC = 0x404,TBM_SETPOS = 0x405,TBM_SETRANGE = 0x406,TBM_SETRANGEMIN = 0x407,TBM_SETRANGEMAX = 0x408,TBM_CLEARTICS = 0x409,TBM_SETSEL = 0x40A,TBM_SETSELSTART = 0x40B,TBM_SETSELEND = 0x40C,TBM_GETPTICS = 0x40E,TBM_GETTICPOS = 0x40F,TBM_GETNUMTICS = 0x410,TBM_GETSELSTART = 0x411,TBM_GETSELEND = 0x412,TBM_CLEARSEL = 0x413,TBM_SETTICFREQ = 0x414,TBM_SETPAGESIZE = 0x415,TBM_GETPAGESIZE = 0x416,TBM_SETLINESIZE = 0x417,TBM_GETLINESIZE = 0x418,TBM_GETTHUMBRECT = 0x419,TBM_GETCHANNELRECT = 0x41A,TBM_SETTHUMBLENGTH = 0x41B,TBM_GETTHUMBLENGTH = 0x41C,TBM_SETTOOLTIPS = 0x41D,TBM_GETTOOLTIPS = 0x41E,TBM_SETTIPSIDE = 0x41F,TBM_SETBUDDY = 0x420,TBM_GETBUDDY = 0x421,TBM_SETPOSNOTIFY = 0x422,WM_PSD_PAGESETUPDLG = 0x400,WM_PSD_FULLPAGERECT = 0x401,WM_PSD_MINMARGINRECT = 0x402,WM_PSD_MARGINRECT = 0x403,WM_PSD_GREEKTEXTRECT = 0x404,WM_PSD_ENVSTAMPRECT = 0x405,WM_PSD_YAFULLPAGERECT = 0x406,WM_CHOOSEFONT_GETLOGFONT = 0x401,WM_CHOOSEFONT_SETLOGFONT = 0x465,WM_CHOOSEFONT_SETFLAGS = 0x466,HKM_SETHOTKEY = 0x401,HKM_GETHOTKEY = 0x402,HKM_SETRULES = 0x403,PBM_SETRANGE = 0x401,PBM_SETPOS = 0x402,PBM_DELTAPOS = 0x403,PBM_SETSTEP = 0x404,PBM_STEPIT = 0x405,PBM_SETRANGE32 = 0x406,PBM_GETRANGE = 0x407,PBM_GETPOS = 0x408,PBM_SETBARCOLOR = 0x409,PBM_SETMARQUEE = 0x40A,PBM_GETSTEP = 0x40D,PBM_GETBKCOLOR = 0x40E,PBM_GETBARCOLOR = 0x40F,PBM_SETSTATE = 0x410,PBM_GETSTATE = 0x411,RB_INSERTBANDA = 0x401,RB_DELETEBAND = 0x402,RB_GETBARINFO = 0x403,RB_SETBARINFO = 0x404,RB_SETBANDINFOA = 0x406,RB_SETPARENT = 0x407,RB_HITTEST = 0x408,RB_GETRECT = 0x409,RB_INSERTBANDW = 0x40A,RB_SETBANDINFOW = 0x40B,RB_GETBANDCOUNT = 0x40C,RB_GETROWCOUNT = 0x40D,RB_GETROWHEIGHT = 0x40E,RB_IDTOINDEX = 0x410,RB_GETTOOLTIPS = 0x411,RB_SETTOOLTIPS = 0x412,RB_SETBKCOLOR = 0x413,RB_GETBKCOLOR = 0x414,RB_SETTEXTCOLOR = 0x415,RB_GETTEXTCOLOR = 0x416,RB_SIZETORECT = 0x417,RB_BEGINDRAG = 0x418,RB_ENDDRAG = 0x419,RB_DRAGMOVE = 0x41A,RB_GETBARHEIGHT = 0x41B,RB_GETBANDINFOW = 0x41C,RB_GETBANDINFOA = 0x41D,RB_MINIMIZEBAND = 0x41E,RB_MAXIMIZEBAND = 0x41F,RB_GETBANDBORDERS = 0x422,RB_SHOWBAND = 0x423,RB_SETPALETTE = 0x425,RB_GETPALETTE = 0x426,RB_MOVEBAND = 0x427,RB_PUSHCHEVRON = 0x42B,RB_GETBANDMARGINS = 0x428,RB_SETEXTENDEDSTYLE = 0x429,RB_GETEXTENDEDSTYLE = 0x42A,RB_SETBANDWIDTH = 0x42C,RB_SETWINDOWTHEME = 0x200B,CBEM_INSERTITEMA = 0x401,CBEM_SETIMAGELIST = 0x402,CBEM_GETIMAGELIST = 0x403,CBEM_GETITEMA = 0x404,CBEM_SETITEMA = 0x405,CBEM_GETCOMBOCONTROL = 0x406,CBEM_GETEDITCONTROL = 0x407,CBEM_SETEXSTYLE = 0x408,CBEM_GETEXSTYLE = 0x409,CBEM_GETEXTENDEDSTYLE = 0x409,CBEM_HASEDITCHANGED = 0x40A,CBEM_INSERTITEMW = 0x40B,CBEM_SETITEMW = 0x40C,CBEM_GETITEMW = 0x40D,CBEM_SETEXTENDEDSTYLE = 0x40E,SB_SETTEXTA = 0x401,SB_GETTEXTA = 0x402,SB_GETTEXTLENGTHA = 0x403,SB_SETPARTS = 0x404,SB_GETPARTS = 0x406,SB_GETBORDERS = 0x407,SB_SETMINHEIGHT = 0x408,SB_SIMPLE = 0x409,SB_GETRECT = 0x40A,SB_SETTEXTW = 0x40B,SB_GETTEXTLENGTHW = 0x40C,SB_GETTEXTW = 0x40D,SB_ISSIMPLE = 0x40E,SB_SETICON = 0x40F,SB_SETTIPTEXTA = 0x410,SB_SETTIPTEXTW = 0x411,SB_GETTIPTEXTA = 0x412,SB_GETTIPTEXTW = 0x413,SB_GETICON = 0x414,TTM_ACTIVATE = 0x401,TTM_SETDELAYTIME = 0x403,TTM_ADDTOOLA = 0x404,TTM_DELTOOLA = 0x405,TTM_NEWTOOLRECTA = 0x406,TTM_RELAYEVENT = 0x407,TTM_GETTOOLINFOA = 0x408,TTM_SETTOOLINFOA = 0x409,TTM_HITTESTA = 0x40A,TTM_GETTEXTA = 0x40B,TTM_UPDATETIPTEXTA = 0x40C,TTM_GETTOOLCOUNT = 0x40D,TTM_ENUMTOOLSA = 0x40E,TTM_GETCURRENTTOOLA = 0x40F,TTM_WINDOWFROMPOINT = 0x410,TTM_TRACKACTIVATE = 0x411,TTM_TRACKPOSITION = 0x412,TTM_SETTIPBKCOLOR = 0x413,TTM_SETTIPTEXTCOLOR = 0x414,TTM_GETDELAYTIME = 0x415,TTM_GETTIPBKCOLOR = 0x416,TTM_GETTIPTEXTCOLOR = 0x417,TTM_SETMAXTIPWIDTH = 0x418,TTM_GETMAXTIPWIDTH = 0x419,TTM_SETMARGIN = 0x41A,TTM_GETMARGIN = 0x41B,TTM_POP = 0x41C,TTM_UPDATE = 0x41D,TTM_GETBUBBLESIZE = 0x41E,TTM_ADJUSTRECT = 0x41F,TTM_SETTITLEA = 0x420,TTM_SETTITLEW = 0x421,TTM_ADDTOOLW = 0x432,TTM_DELTOOLW = 0x433,TTM_NEWTOOLRECTW = 0x434,TTM_GETTOOLINFOW = 0x435,TTM_SETTOOLINFOW = 0x436,TTM_HITTESTW = 0x437,TTM_GETTEXTW = 0x438,TTM_UPDATETIPTEXTW = 0x439,TTM_ENUMTOOLSW = 0x43A,TTM_GETCURRENTTOOLW = 0x43B,WIZ_QUERYNUMPAGES = 0x40A,WIZ_NEXT = 0x40B,WIZ_PREV = 0x40C,MSG_FTS_JUMP_VA = 0x421,MSG_FTS_JUMP_QWORD = 0x423,MSG_REINDEX_REQUEST = 0x424,MSG_FTS_WHERE_IS_IT = 0x425,MSG_GET_DEFFONT = 0x42D,TB_ENABLEBUTTON = 0x401,TB_CHECKBUTTON = 0x402,TB_PRESSBUTTON = 0x403,TB_HIDEBUTTON = 0x404,TB_INDETERMINATE = 0x405,TB_MARKBUTTON = 0x406,TB_ISBUTTONENABLED = 0x409,TB_ISBUTTONCHECKED = 0x40A,TB_ISBUTTONPRESSED = 0x40B,TB_ISBUTTONHIDDEN = 0x40C,TB_ISBUTTONINDETERMINATE = 0x40D,TB_ISBUTTONHIGHLIGHTED = 0x40E,TB_SETSTATE = 0x411,TB_GETSTATE = 0x412,TB_ADDBITMAP = 0x413,TB_ADDBUTTONSA = 0x414,TB_INSERTBUTTONA = 0x415,TB_DELETEBUTTON = 0x416,TB_GETBUTTON = 0x417,TB_BUTTONCOUNT = 0x418,TB_COMMANDTOINDEX = 0x419,TB_SAVERESTOREA = 0x41A,TB_CUSTOMIZE = 0x41B,TB_ADDSTRINGA = 0x41C,TB_GETITEMRECT = 0x41D,TB_BUTTONSTRUCTSIZE = 0x41E,TB_SETBUTTONSIZE = 0x41F,TB_SETBITMAPSIZE = 0x420,TB_AUTOSIZE = 0x421,TB_GETTOOLTIPS = 0x423,TB_SETTOOLTIPS = 0x424,TB_SETPARENT = 0x425,TB_SETROWS = 0x427,TB_GETROWS = 0x428,TB_GETBITMAPFLAGS = 0x429,TB_SETCMDID = 0x42A,TB_CHANGEBITMAP = 0x42B,TB_GETBITMAP = 0x42C,TB_GETBUTTONTEXTA = 0x42D,TB_REPLACEBITMAP = 0x42E,TB_SETINDENT = 0x42F,TB_SETIMAGELIST = 0x430,TB_GETIMAGELIST = 0x431,TB_LOADIMAGES = 0x432,TB_GETRECT = 0x433,TB_SETHOTIMAGELIST = 0x434,TB_GETHOTIMAGELIST = 0x435,TB_SETDISABLEDIMAGELIST = 0x436,TB_GETDISABLEDIMAGELIST = 0x437,TB_SETSTYLE = 0x438,TB_GETSTYLE = 0x439,TB_GETBUTTONSIZE = 0x43A,TB_SETBUTTONWIDTH = 0x43B,TB_SETMAXTEXTROWS = 0x43C,TB_GETTEXTROWS = 0x43D,TB_GETOBJECT = 0x43E,TB_GETBUTTONINFOW = 0x43F,TB_SETBUTTONINFOW = 0x440,TB_GETBUTTONINFOA = 0x441,TB_SETBUTTONINFOA = 0x442,TB_INSERTBUTTONW = 0x443,TB_ADDBUTTONSW = 0x444,TB_HITTEST = 0x445,TB_SETDRAWTEXTFLAGS = 0x446,TB_GETHOTITEM = 0x447,TB_SETHOTITEM = 0x448,TB_SETANCHORHIGHLIGHT = 0x449,TB_GETANCHORHIGHLIGHT = 0x44A,TB_GETBUTTONTEXTW = 0x44B,TB_SAVERESTOREW = 0x44C,TB_ADDSTRINGW = 0x44D,TB_MAPACCELERATORA = 0x44E,TB_GETINSERTMARK = 0x44F,TB_SETINSERTMARK = 0x450,TB_INSERTMARKHITTEST = 0x451,TB_MOVEBUTTON = 0x452,TB_GETMAXSIZE = 0x453,TB_SETEXTENDEDSTYLE = 0x454,TB_GETEXTENDEDSTYLE = 0x455,TB_GETPADDING = 0x456,TB_SETPADDING = 0x457,TB_SETINSERTMARKCOLOR = 0x458,TB_GETINSERTMARKCOLOR = 0x459,TB_MAPACCELERATORW = 0x45A,TB_GETSTRINGW = 0x45B,TB_GETSTRINGA = 0x45C,TB_SETBOUNDINGSIZE = 0x45D,TB_SETHOTITEM2 = 0x45E,TB_HASACCELERATOR = 0x45F,TB_SETLISTGAP = 0x460,TB_GETIMAGELISTCOUNT = 0x462,TB_GETIDEALSIZE = 0x463,TB_GETMETRICS = 0x465,TB_SETMETRICS = 0x466,TB_GETITEMDROPDOWNRECT = 0x467,TB_SETPRESSEDIMAGELIST = 0x468,TB_GETPRESSEDIMAGELIST = 0x469,TB_SETWINDOWTHEME = 0x200B,EM_CANPASTE = 0x432,EM_DISPLAYBAND = 0x433,EM_EXGETSEL = 0x434,EM_EXLIMITTEXT = 0x435,EM_EXLINEFROMCHAR = 0x436,EM_EXSETSEL = 0x437,EM_FINDTEXT = 0x438,EM_FORMATRANGE = 0x439,EM_GETCHARFORMAT = 0x43A,EM_GETEVENTMASK = 0x43B,EM_GETOLEINTERFACE = 0x43C,EM_GETPARAFORMAT = 0x43D,EM_GETSELTEXT = 0x43E,EM_HIDESELECTION = 0x43F,EM_PASTESPECIAL = 0x440,EM_REQUESTRESIZE = 0x441,EM_SELECTIONTYPE = 0x442,EM_SETBKGNDCOLOR = 0x443,EM_SETCHARFORMAT = 0x444,EM_SETEVENTMASK = 0x445,EM_SETOLECALLBACK = 0x446,EM_SETPARAFORMAT = 0x447,EM_SETTARGETDEVICE = 0x448,EM_STREAMIN = 0x449,EM_STREAMOUT = 0x44A,EM_GETTEXTRANGE = 0x44B,EM_FINDWORDBREAK = 0x44C,EM_SETOPTIONS = 0x44D,EM_GETOPTIONS = 0x44E,EM_FINDTEXTEX = 0x44F,EM_GETWORDBREAKPROCEX = 0x450,EM_SETWORDBREAKPROCEX = 0x451,EM_SETUNDOLIMIT = 0x452,EM_REDO = 0x454,EM_CANREDO = 0x455,EM_GETUNDONAME = 0x456,EM_GETREDONAME = 0x457,EM_STOPGROUPTYPING = 0x458,EM_SETTEXTMODE = 0x459,EM_GETTEXTMODE = 0x45A,EM_AUTOURLDETECT = 0x45B,EM_GETAUTOURLDETECT = 0x45C,EM_SETPALETTE = 0x45D,EM_GETTEXTEX = 0x45E,EM_GETTEXTLENGTHEX = 0x45F,EM_SHOWSCROLLBAR = 0x460,EM_SETTEXTEX = 0x461,EM_SETPUNCTUATION = 0x464,EM_GETPUNCTUATION = 0x465,EM_SETWORDWRAPMODE = 0x466,EM_GETWORDWRAPMODE = 0x467,EM_SETIMECOLOR = 0x468,EM_GETIMECOLOR = 0x469,EM_SETIMEOPTIONS = 0x46A,EM_GETIMEOPTIONS = 0x46B,EM_CONVPOSITION = 0x46C,EM_SETLANGOPTIONS = 0x478,EM_GETLANGOPTIONS = 0x479,EM_GETIMECOMPMODE = 0x47A,EM_FINDTEXTW = 0x47B,EM_FINDTEXTEXW = 0x47C,EM_RECONVERSION = 0x47D,EM_SETIMEMODEBIAS = 0x47E,EM_GETIMEMODEBIAS = 0x47F,EM_SETBIDIOPTIONS = 0x4C8,EM_GETBIDIOPTIONS = 0x4C9,EM_SETTYPOGRAPHYOPTIONS = 0x4CA,EM_GETTYPOGRAPHYOPTIONS = 0x4CB,EM_SETEDITSTYLE = 0x4CC,EM_GETEDITSTYLE = 0x4CD,EM_OUTLINE = 0x4DC,EM_GETSCROLLPOS = 0x4DD,EM_SETSCROLLPOS = 0x4DE,EM_SETFONTSIZE = 0x4DF,EM_GETZOOM = 0x4E0,EM_SETZOOM = 0x4E1,EM_GETVIEWKIND = 0x4E2,EM_SETVIEWKIND = 0x4E3,EM_GETPAGE = 0x4E4,EM_SETPAGE = 0x4E5,EM_GETHYPHENATEINFO = 0x4E6,EM_SETHYPHENATEINFO = 0x4E7,EM_INSERTTABLE = 0x4E8,EM_GETAUTOCORRECTPROC = 0x4E9,EM_SETAUTOCORRECTPROC = 0x4EA,EM_GETPAGEROTATE = 0x4EB,EM_SETPAGEROTATE = 0x4EC,EM_GETCTFMODEBIAS = 0x4ED,EM_SETCTFMODEBIAS = 0x4EE,EM_GETCTFOPENSTATUS = 0x4F0,EM_SETCTFOPENSTATUS = 0x4F1,EM_GETIMECOMPTEXT = 0x4F2,EM_ISIME = 0x4F3,EM_GETIMEPROPERTY = 0x4F4,EM_CALLAUTOCORRECTPROC = 0x4FF,EM_GETTABLEPARMS = 0x509,EM_GETQUERYRTFOBJ = 0x50D,EM_SETQUERYRTFOBJ = 0x50E,EM_SETEDITSTYLEEX = 0x513,EM_GETEDITSTYLEEX = 0x514,EM_GETSTORYTYPE = 0x522,EM_SETSTORYTYPE = 0x523,EM_GETELLIPSISMODE = 0x531,EM_SETELLIPSISMODE = 0x532,EM_SETTABLEPARMS = 0x533,EM_GETTOUCHOPTIONS = 0x536,EM_SETTOUCHOPTIONS = 0x537,EM_INSERTIMAGE = 0x53A,EM_SETUIANAME = 0x540,EM_GETELLIPSISSTATE = 0x542,TAPI_REPLY = 0x463,IPM_CLEARADDRESS = 0x464,IPM_SETADDRESS = 0x465,IPM_GETADDRESS = 0x466,IPM_SETRANGE = 0x467,IPM_SETFOCUS = 0x468,IPM_ISBLANK = 0x469,CDM_FIRST = 0x464,CDM_GETSPEC = 0x464,CDM_GETFILEPATH = 0x465,CDM_GETFOLDERPATH = 0x466,CDM_GETFOLDERIDLIST = 0x467,CDM_SETCONTROLTEXT = 0x468,CDM_HIDECONTROL = 0x469,CDM_SETDEFEXT = 0x46A,CDM_LAST = 0x4C8,BFFM_SETSTATUSTEXTA = 0x464,BFFM_ENABLEOK = 0x465,BFFM_SETSELECTIONA = 0x466,BFFM_SETSELECTIONW = 0x467,BFFM_SETSTATUSTEXTW = 0x468,BFFM_SETOKTEXT = 0x469,BFFM_SETEXPANDED = 0x46A,ACM_OPENA = 0x464,ACM_PLAY = 0x465,ACM_STOP = 0x466,ACM_OPENW = 0x467,ACM_ISPLAYING = 0x468,WM_CAP_UNICODE_START = 0x464,WM_CAP_SET_CALLBACK_ERRORW = 0x466,WM_CAP_SET_CALLBACK_STATUSW = 0x467,WM_CAP_DRIVER_GET_NAMEW = 0x470,WM_CAP_DRIVER_GET_VERSIONW = 0x471,WM_CAP_FILE_SET_CAPTURE_FILEW = 0x478,WM_CAP_FILE_GET_CAPTURE_FILEW = 0x479,WM_CAP_FILE_SAVEASW = 0x47B,WM_CAP_FILE_SAVEDIBW = 0x47D,WM_CAP_SET_MCI_DEVICEW = 0x4A6,WM_CAP_GET_MCI_DEVICEW = 0x4A7,WM_CAP_PAL_OPENW = 0x4B4,WM_CAP_PAL_SAVEW = 0x4B5,PSM_SETCURSEL = 0x465,PSM_REMOVEPAGE = 0x466,PSM_ADDPAGE = 0x467,PSM_CHANGED = 0x468,PSM_RESTARTWINDOWS = 0x469,PSM_REBOOTSYSTEM = 0x46A,PSM_CANCELTOCLOSE = 0x46B,PSM_QUERYSIBLINGS = 0x46C,PSM_UNCHANGED = 0x46D,PSM_APPLY = 0x46E,PSM_SETTITLEA = 0x46F,PSM_SETWIZBUTTONS = 0x470,PSM_PRESSBUTTON = 0x471,PSM_SETCURSELID = 0x472,PSM_SETFINISHTEXTA = 0x473,PSM_GETTABCONTROL = 0x474,PSM_ISDIALOGMESSAGE = 0x475,PSM_GETCURRENTPAGEHWND = 0x476,PSM_INSERTPAGE = 0x477,PSM_SETTITLEW = 0x478,PSM_SETFINISHTEXTW = 0x479,PSM_SETHEADERTITLEA = 0x47D,PSM_SETHEADERTITLEW = 0x47E,PSM_SETHEADERSUBTITLEA = 0x47F,PSM_SETHEADERSUBTITLEW = 0x480,PSM_HWNDTOINDEX = 0x481,PSM_INDEXTOHWND = 0x482,PSM_PAGETOINDEX = 0x483,PSM_INDEXTOPAGE = 0x484,PSM_IDTOINDEX = 0x485,PSM_INDEXTOID = 0x486,PSM_GETRESULT = 0x487,PSM_RECALCPAGESIZES = 0x488,PSM_SETNEXTTEXTW = 0x489,PSM_SHOWWIZBUTTONS = 0x48A,PSM_ENABLEWIZBUTTONS = 0x48B,PSM_SETBUTTONTEXTW = 0x48C,UDM_SETRANGE = 0x465,UDM_GETRANGE = 0x466,UDM_SETPOS = 0x467,UDM_GETPOS = 0x468,UDM_SETBUDDY = 0x469,UDM_GETBUDDY = 0x46A,UDM_SETACCEL = 0x46B,UDM_GETACCEL = 0x46C,UDM_SETBASE = 0x46D,UDM_GETBASE = 0x46E,UDM_SETRANGE32 = 0x46F,UDM_GETRANGE32 = 0x470,UDM_SETPOS32 = 0x471,UDM_GETPOS32 = 0x472,MCIWNDM_GETZOOM = 0x46D,MCIWNDM_REALIZE = 0x476,MCIWNDM_SETTIMEFORMATA = 0x477,MCIWNDM_GETTIMEFORMATA = 0x478,MCIWNDM_VALIDATEMEDIA = 0x479,MCIWNDM_PLAYTO = 0x47B,MCIWNDM_GETFILENAMEA = 0x47C,MCIWNDM_GETDEVICEA = 0x47D,MCIWNDM_GETPALETTE = 0x47E,MCIWNDM_SETPALETTE = 0x47F,MCIWNDM_GETERRORA = 0x480,MCIWNDM_SETINACTIVETIMER = 0x483,MCIWNDM_GETINACTIVETIMER = 0x485,MCIWNDM_GET_SOURCE = 0x48C,MCIWNDM_PUT_SOURCE = 0x48D,MCIWNDM_GET_DEST = 0x48E,MCIWNDM_PUT_DEST = 0x48F,MCIWNDM_CAN_PLAY = 0x490,MCIWNDM_CAN_WINDOW = 0x491,MCIWNDM_CAN_RECORD = 0x492,MCIWNDM_CAN_SAVE = 0x493,MCIWNDM_CAN_EJECT = 0x494,MCIWNDM_CAN_CONFIG = 0x495,MCIWNDM_PALETTEKICK = 0x496,MCIWNDM_NOTIFYMODE = 0x4C8,MCIWNDM_NOTIFYMEDIA = 0x4CB,MCIWNDM_NOTIFYERROR = 0x4CD,MCIWNDM_SETTIMEFORMATW = 0x4DB,MCIWNDM_GETTIMEFORMATW = 0x4DC,MCIWNDM_GETFILENAMEW = 0x4E0,MCIWNDM_GETDEVICEW = 0x4E1,MCIWNDM_GETERRORW = 0x4E4,DL_BEGINDRAG = 0x485,DL_DRAGGING = 0x486,DL_DROPPED = 0x487,DL_CANCELDRAG = 0x488,IE_GETINK = 0x496,IE_MSGFIRST = 0x496,IE_SETINK = 0x497,IE_GETPENTIP = 0x498,IE_SETPENTIP = 0x499,IE_GETERASERTIP = 0x49A,IE_SETERASERTIP = 0x49B,IE_GETBKGND = 0x49C,IE_SETBKGND = 0x49D,IE_GETGRIDORIGIN = 0x49E,IE_SETGRIDORIGIN = 0x49F,IE_GETGRIDPEN = 0x4A0,IE_SETGRIDPEN = 0x4A1,IE_GETGRIDSIZE = 0x4A2,IE_SETGRIDSIZE = 0x4A3,IE_GETMODE = 0x4A4,IE_SETMODE = 0x4A5,IE_GETINKRECT = 0x4A6,IE_GETAPPDATA = 0x4B8,IE_SETAPPDATA = 0x4B9,IE_GETDRAWOPTS = 0x4BA,IE_SETDRAWOPTS = 0x4BB,IE_GETFORMAT = 0x4BC,IE_SETFORMAT = 0x4BD,IE_GETINKINPUT = 0x4BE,IE_SETINKINPUT = 0x4BF,IE_GETNOTIFY = 0x4C0,IE_SETNOTIFY = 0x4C1,IE_GETRECOG = 0x4C2,IE_SETRECOG = 0x4C3,IE_GETSECURITY = 0x4C4,IE_SETSECURITY = 0x4C5,IE_GETSEL = 0x4C6,IE_SETSEL = 0x4C7,IE_DOCOMMAND = 0x4C8,IE_GETCOMMAND = 0x4C9,IE_GETCOUNT = 0x4CA,IE_GETGESTURE = 0x4CB,IE_GETMENU = 0x4CC,IE_GETPAINTDC = 0x4CD,IE_GETPDEVENT = 0x4CE,IE_GETSELCOUNT = 0x4CF,IE_GETSELITEMS = 0x4D0,IE_GETSTYLE = 0x4D1,FM_GETFOCUS = 0x600,FM_GETDRIVEINFOA = 0x601,FM_GETSELCOUNT = 0x602,FM_GETSELCOUNTLFN = 0x603,FM_GETFILESELA = 0x604,FM_GETFILESELLFNA = 0x605,FM_REFRESH_WINDOWS = 0x606,FM_RELOAD_EXTENSIONS = 0x607,FM_GETDRIVEINFOW = 0x611,FM_GETFILESELW = 0x614,FM_GETFILESELLFNW = 0x615,WLX_WM_SAS = 0x659,SM_GETSELCOUNT = 0x7E8,SM_GETSERVERSELA = 0x7E9,SM_GETSERVERSELW = 0x7EA,SM_GETCURFOCUSA = 0x7EB,SM_GETCURFOCUSW = 0x7EC,SM_GETOPTIONS = 0x7ED,WM_CPL_LAUNCH = 0x7E8,WM_CPL_LAUNCHED = 0x7E9,UM_GETSELCOUNT = 0x7E8,UM_GETUSERSELA = 0x7E9,UM_GETUSERSELW = 0x7EA,UM_GETGROUPSELA = 0x7EB,UM_GETGROUPSELW = 0x7EC,UM_GETCURFOCUSA = 0x7ED,UM_GETCURFOCUSW = 0x7EE,UM_GETOPTIONS = 0x7EF,UM_GETOPTIONS2 = 0x7F0,LVM_FIRST = 0x1000,LVM_GETBKCOLOR = 0x1000,LVM_SETBKCOLOR = 0x1001,LVM_GETIMAGELIST = 0x1002,LVM_SETIMAGELIST = 0x1003,LVM_GETITEMCOUNT = 0x1004,LVM_GETITEMA = 0x1005,LVM_SETITEMA = 0x1006,LVM_INSERTITEMA = 0x1007,LVM_DELETEITEM = 0x1008,LVM_DELETEALLITEMS = 0x1009,LVM_GETCALLBACKMASK = 0x100A,LVM_SETCALLBACKMASK = 0x100B,LVM_GETNEXTITEM = 0x100C,LVM_FINDITEMA = 0x100D,LVM_GETITEMRECT = 0x100E,LVM_SETITEMPOSITION = 0x100F,LVM_GETITEMPOSITION = 0x1010,LVM_GETSTRINGWIDTHA = 0x1011,LVM_HITTEST = 0x1012,LVM_ENSUREVISIBLE = 0x1013,LVM_SCROLL = 0x1014,LVM_REDRAWITEMS = 0x1015,LVM_ARRANGE = 0x1016,LVM_EDITLABELA = 0x1017,LVM_GETEDITCONTROL = 0x1018,LVM_GETCOLUMNA = 0x1019,LVM_SETCOLUMNA = 0x101A,LVM_INSERTCOLUMNA = 0x101B,LVM_DELETECOLUMN = 0x101C,LVM_GETCOLUMNWIDTH = 0x101D,LVM_SETCOLUMNWIDTH = 0x101E,LVM_GETHEADER = 0x101F,LVM_CREATEDRAGIMAGE = 0x1021,LVM_GETVIEWRECT = 0x1022,LVM_GETTEXTCOLOR = 0x1023,LVM_SETTEXTCOLOR = 0x1024,LVM_GETTEXTBKCOLOR = 0x1025,LVM_SETTEXTBKCOLOR = 0x1026,LVM_GETTOPINDEX = 0x1027,LVM_GETCOUNTPERPAGE = 0x1028,LVM_GETORIGIN = 0x1029,LVM_UPDATE = 0x102A,LVM_SETITEMSTATE = 0x102B,LVM_GETITEMSTATE = 0x102C,LVM_GETITEMTEXTA = 0x102D,LVM_SETITEMTEXTA = 0x102E,LVM_SETITEMCOUNT = 0x102F,LVM_SORTITEMS = 0x1030,LVM_SETITEMPOSITION32 = 0x1031,LVM_GETSELECTEDCOUNT = 0x1032,LVM_GETITEMSPACING = 0x1033,LVM_GETISEARCHSTRINGA = 0x1034,LVM_SETICONSPACING = 0x1035,LVM_SETEXTENDEDLISTVIEWSTYLE = 0x1036,LVM_GETEXTENDEDLISTVIEWSTYLE = 0x1037,LVM_GETSUBITEMRECT = 0x1038,LVM_SUBITEMHITTEST = 0x1039,LVM_SETCOLUMNORDERARRAY = 0x103A,LVM_GETCOLUMNORDERARRAY = 0x103B,LVM_SETHOTITEM = 0x103C,LVM_GETHOTITEM = 0x103D,LVM_SETHOTCURSOR = 0x103E,LVM_GETHOTCURSOR = 0x103F,LVM_APPROXIMATEVIEWRECT = 0x1040,LVM_SETWORKAREAS = 0x1041,LVM_GETSELECTIONMARK = 0x1042,LVM_SETSELECTIONMARK = 0x1043,LVM_SETBKIMAGEA = 0x1044,LVM_GETBKIMAGEA = 0x1045,LVM_GETWORKAREAS = 0x1046,LVM_SETHOVERTIME = 0x1047,LVM_GETHOVERTIME = 0x1048,LVM_GETNUMBEROFWORKAREAS = 0x1049,LVM_SETTOOLTIPS = 0x104A,LVM_GETITEMW = 0x104B,LVM_SETITEMW = 0x104C,LVM_INSERTITEMW = 0x104D,LVM_GETTOOLTIPS = 0x104E,LVM_SORTITEMSEX = 0x1051,LVM_FINDITEMW = 0x1053,LVM_GETSTRINGWIDTHW = 0x1057,LVM_GETGROUPSTATE = 0x105C,LVM_GETFOCUSEDGROUP = 0x105D,LVM_GETCOLUMNW = 0x105F,LVM_SETCOLUMNW = 0x1060,LVM_INSERTCOLUMNW = 0x1061,LVM_GETGROUPRECT = 0x1062,LVM_GETITEMTEXTW = 0x1073,LVM_SETITEMTEXTW = 0x1074,LVM_GETISEARCHSTRINGW = 0x1075,LVM_EDITLABELW = 0x1076,LVM_GETBKIMAGEW = 0x108B,LVM_SETSELECTEDCOLUMN = 0x108C,LVM_SETTILEWIDTH = 0x108D,LVM_SETVIEW = 0x108E,LVM_GETVIEW = 0x108F,LVM_INSERTGROUP = 0x1091,LVM_SETGROUPINFO = 0x1093,LVM_GETGROUPINFO = 0x1095,LVM_REMOVEGROUP = 0x1096,LVM_MOVEGROUP = 0x1097,LVM_GETGROUPCOUNT = 0x1098,LVM_GETGROUPINFOBYINDEX = 0x1099,LVM_MOVEITEMTOGROUP = 0x109A,LVM_SETGROUPMETRICS = 0x109B,LVM_GETGROUPMETRICS = 0x109C,LVM_ENABLEGROUPVIEW = 0x109D,LVM_SORTGROUPS = 0x109E,LVM_INSERTGROUPSORTED = 0x109F,LVM_REMOVEALLGROUPS = 0x10A0,LVM_HASGROUP = 0x10A1,LVM_SETTILEVIEWINFO = 0x10A2,LVM_GETTILEVIEWINFO = 0x10A3,LVM_SETTILEINFO = 0x10A4,LVM_GETTILEINFO = 0x10A5,LVM_SETINSERTMARK = 0x10A6,LVM_GETINSERTMARK = 0x10A7,LVM_INSERTMARKHITTEST = 0x10A8,LVM_GETINSERTMARKRECT = 0x10A9,LVM_SETINSERTMARKCOLOR = 0x10AA,LVM_GETINSERTMARKCOLOR = 0x10AB,LVM_SETINFOTIP = 0x10AD,LVM_GETSELECTEDCOLUMN = 0x10AE,LVM_ISGROUPVIEWENABLED = 0x10AF,LVM_GETOUTLINECOLOR = 0x10B0,LVM_SETOUTLINECOLOR = 0x10B1,LVM_CANCELEDITLABEL = 0x10B3,LVM_MAPINDEXTOID = 0x10B4,LVM_MAPIDTOINDEX = 0x10B5,LVM_ISITEMVISIBLE = 0x10B6,LVM_GETEMPTYTEXT = 0x10CC,LVM_GETFOOTERRECT = 0x10CD,LVM_GETFOOTERINFO = 0x10CE,LVM_GETFOOTERITEMRECT = 0x10CF,LVM_GETFOOTERITEM = 0x10D0,LVM_GETITEMINDEXRECT = 0x10D1,LVM_SETITEMINDEXSTATE = 0x10D2,LVM_GETNEXTITEMINDEX = 0x10D3,LVM_SETUNICODEFORMAT = 0x2005,LVM_GETUNICODEFORMAT = 0x2006,OCM__BASE = 0x2000,OCM_CTLCOLOR = 0x2019,OCM_DRAWITEM = 0x202B,OCM_MEASUREITEM = 0x202C,OCM_DELETEITEM = 0x202D,OCM_VKEYTOITEM = 0x202E,OCM_CHARTOITEM = 0x202F,OCM_COMPAREITEM = 0x2039,OCM_NOTIFY = 0x204E,OCM_COMMAND = 0x2111,OCM_HSCROLL = 0x2114,OCM_VSCROLL = 0x2115,OCM_CTLCOLORMSGBOX = 0x2132,OCM_CTLCOLOREDIT = 0x2133,OCM_CTLCOLORLISTBOX = 0x2134,OCM_CTLCOLORBTN = 0x2135,OCM_CTLCOLORDLG = 0x2136,OCM_CTLCOLORSCROLLBAR = 0x2137,OCM_CTLCOLORSTATIC = 0x2138,OCM_PARENTNOTIFY = 0x2210,WM_APP = 0x8000,WM_RASDIALEVENT = 0xCCCD,CBEM_DELETEITEM = 0x144,CBEM_SETUNICODEFORMAT = 0x2005,CBEM_GETUNICODEFORMAT = 0x2006,IE_GETMODIFY = 0xB8,IE_SETMODIFY = 0xB9,IE_CANUNDO = 0xC6,IE_UNDO = 0xC7,IE_EMPTYUNDOBUFFER = 0xCD,LVM_SETBKIMAGEW = 0x108A,MCIWNDM_GETDEVICEID = 0x464,MCIWNDM_GETSTART = 0x467,MCIWNDM_GETLENGTH = 0x468,MCIWNDM_GETEND = 0x469,MCIWNDM_EJECT = 0x46B,MCIWNDM_SETZOOM = 0x46C,MCIWNDM_SETVOLUME = 0x46E,MCIWNDM_GETVOLUME = 0x46F,MCIWNDM_SETSPEED = 0x470,MCIWNDM_GETSPEED = 0x471,MCIWNDM_SETREPEAT = 0x472,MCIWNDM_GETREPEAT = 0x473,MCIWNDM_PLAYFROM = 0x47A,MCIWNDM_SETTIMERS = 0x481,MCIWNDM_SETACTIVETIMER = 0x482,MCIWNDM_GETACTIVETIMER = 0x484,MCIWNDM_CHANGESTYLES = 0x487,MCIWNDM_GETSTYLES = 0x488,MCIWNDM_GETALIAS = 0x489,MCIWNDM_PLAYREVERSE = 0x48B,MCIWNDM_OPENINTERFACE = 0x497,MCIWNDM_SETOWNER = 0x498,MCIWNDM_SENDSTRINGA = 0x465,MCIWNDM_GETPOSITIONA = 0x466,MCIWNDM_GETMODEA = 0x46A,MCIWNDM_NEWA = 0x486,MCIWNDM_RETURNSTRINGA = 0x48A,MCIWNDM_OPENA = 0x499,MCIWNDM_SENDSTRINGW = 0x4C9,MCIWNDM_GETPOSITIONW = 0x4CA,MCIWNDM_GETMODEW = 0x4CE,MCIWNDM_NEWW = 0x4EA,MCIWNDM_RETURNSTRINGW = 0x4EE,MCIWNDM_OPENW = 0x4FC,MCIWNDM_NOTIFYPOS = 0x4C9,MCIWNDM_NOTIFYSIZE = 0x4CA,MSG_FTS_JUMP_HASH = 0x420,MSG_FTS_GET_TITLE = 0x422,PBM_SETBKCOLOR = 0x2001,RB_SETCOLORSCHEME = 0x2002,RB_GETCOLORSCHEME = 0x2003,RB_GETDROPTARGET = 0x2004,RB_SETUNICODEFORMAT = 0x2005,RB_GETUNICODEFORMAT = 0x2006,SB_SETUNICODEFORMAT = 0x2005,SB_GETUNICODEFORMAT = 0x2006,SB_SETBKCOLOR = 0x2001,STM_MSGMAX = 0x174,TBM_SETUNICODEFORMAT = 0x2005,TBM_GETUNICODEFORMAT = 0x2006,TB_SETCOLORSCHEME = 0x2002,TB_GETCOLORSCHEME = 0x2003,TB_SETUNICODEFORMAT = 0x2005,TB_GETUNICODEFORMAT = 0x2006,UDM_SETUNICODEFORMAT = 0x2005,UDM_GETUNICODEFORMAT = 0x2006,WM_CAP_START = 0x400,WM_CAP_GET_CAPSTREAMPTR = 0x401,WM_CAP_SET_CALLBACK_ERRORA = 0x402,WM_CAP_SET_CALLBACK_STATUSA = 0x403,WM_CAP_SET_CALLBACK_YIELD = 0x404,WM_CAP_SET_CALLBACK_FRAME = 0x405,WM_CAP_SET_CALLBACK_VIDEOSTREAM = 0x406,WM_CAP_SET_CALLBACK_WAVESTREAM = 0x407,WM_CAP_GET_USER_DATA = 0x408,WM_CAP_SET_USER_DATA = 0x409,WM_CAP_DRIVER_CONNECT = 0x40A,WM_CAP_DRIVER_DISCONNECT = 0x40B,WM_CAP_DRIVER_GET_NAMEA = 0x40C,WM_CAP_DRIVER_GET_VERSIONA = 0x40D,WM_CAP_DRIVER_GET_CAPS = 0x40E,WM_CAP_FILE_SET_CAPTURE_FILEA = 0x414,WM_CAP_FILE_GET_CAPTURE_FILEA = 0x415,WM_CAP_FILE_SAVEASA = 0x417,WM_CAP_FILE_SAVEDIBA = 0x419,WM_CAP_FILE_ALLOCATE = 0x416,WM_CAP_FILE_SET_INFOCHUNK = 0x418,WM_CAP_EDIT_COPY = 0x41E,WM_CAP_SET_AUDIOFORMAT = 0x423,WM_CAP_GET_AUDIOFORMAT = 0x424,WM_CAP_DLG_VIDEOFORMAT = 0x429,WM_CAP_DLG_VIDEOSOURCE = 0x42A,WM_CAP_DLG_VIDEODISPLAY = 0x42B,WM_CAP_GET_VIDEOFORMAT = 0x42C,WM_CAP_SET_VIDEOFORMAT = 0x42D,WM_CAP_DLG_VIDEOCOMPRESSION = 0x42E,WM_CAP_SET_PREVIEW = 0x432,WM_CAP_SET_OVERLAY = 0x433,WM_CAP_SET_PREVIEWRATE = 0x434,WM_CAP_SET_SCALE = 0x435,WM_CAP_GET_STATUS = 0x436,WM_CAP_SET_SCROLL = 0x437,WM_CAP_GRAB_FRAME = 0x43C,WM_CAP_GRAB_FRAME_NOSTOP = 0x43D,WM_CAP_SEQUENCE = 0x43E,WM_CAP_SEQUENCE_NOFILE = 0x43F,WM_CAP_SET_SEQUENCE_SETUP = 0x440,WM_CAP_GET_SEQUENCE_SETUP = 0x441,WM_CAP_SET_MCI_DEVICEA = 0x442,WM_CAP_GET_MCI_DEVICEA = 0x443,WM_CAP_STOP = 0x444,WM_CAP_ABORT = 0x445,WM_CAP_SINGLE_FRAME_OPEN = 0x446,WM_CAP_SINGLE_FRAME_CLOSE = 0x447,WM_CAP_SINGLE_FRAME = 0x448,WM_CAP_PAL_OPENA = 0x450,WM_CAP_PAL_SAVEA = 0x451,WM_CAP_PAL_PASTE = 0x452,WM_CAP_PAL_AUTOCREATE = 0x453,WM_CAP_PAL_MANUALCREATE = 0x454,WM_CAP_SET_CALLBACK_CAPCONTROL = 0x455,WM_CAP_UNICODE_END = 0x4B5,WM_CAP_END = 0x4B5,WM_DDE_FIRST = 0x3E0,WM_DDE_LAST = 0x3E8,WM_DLGBORDER = 0x11EF,WM_DLGSUBCLASS = 0x11F0,WM_ADSPROP_NOTIFY_PAGEINIT = 0x84D,WM_ADSPROP_NOTIFY_PAGEHWND = 0x84E,WM_ADSPROP_NOTIFY_CHANGE = 0x84F,WM_ADSPROP_NOTIFY_APPLY = 0x850,WM_ADSPROP_NOTIFY_SETFOCUS = 0x851,WM_ADSPROP_NOTIFY_FOREGROUND = 0x852,WM_ADSPROP_NOTIFY_EXIT = 0x853,WM_ADSPROP_NOTIFY_ERROR = 0x856,WM_TOUCH = 0x240,WM_TOUCHHITTESTING = 0x24D,WM_DPICHANGED = 0x2E0,WM_DPICHANGED_BEFOREPARENT = 0x2E2,WM_DPICHANGED_AFTERPARENT = 0x2E3,WM_CLIPBOARDUPDATE = 0x31D,WM_DWMCOMPOSITIONCHANGED = 0x31E,WM_DWMNCRENDERINGCHANGED = 0x31F,WM_DWMCOLORIZATIONCOLORCHANGED = 0x320,WM_DWMWINDOWMAXIMIZEDCHANGE = 0x321,WM_DWMSENDICONICTHUMBNAIL = 0x323,WM_DWMSENDICONICLIVEPREVIEWBITMAP = 0x326,WM_INPUT_DEVICE_CHANGE = 0xFE,WM_GESTURE = 0x119,WM_GESTURENOTIFY = 0x11A,WM_MOUSEHWHEEL = 0x20E,WM_POINTERDEVICECHANGE = 0x238,WM_POINTERDEVICEINRANGE = 0x239,WM_POINTERDEVICEOUTOFRANGE = 0x23A,WM_NCPOINTERUPDATE = 0x241,WM_NCPOINTERDOWN = 0x242,WM_NCPOINTERUP = 0x243,WM_POINTERUPDATE = 0x245,WM_POINTERDOWN = 0x246,WM_POINTERUP = 0x247,WM_POINTERENTER = 0x249,WM_POINTERLEAVE = 0x24A,WM_POINTERACTIVATE = 0x24B,WM_POINTERCAPTURECHANGED = 0x24C,WM_POINTERWHEEL = 0x24E,WM_POINTERHWHEEL = 0x24F,WM_POINTERROUTEDTO = 0x251,WM_POINTERROUTEDAWAY = 0x252,WM_POINTERROUTEDRELEASED = 0x253,WM_TABLET_ADDED = 0x2C8,WM_TABLET_DELETED = 0x2C9,WM_TABLET_FLICK = 0x2CB,WM_TABLET_QUERYSYSTEMGESTURESTATUS = 0x2CC,WM_GETDPISCALEDSIZE = 0x2E4,WM_GETTITLEBARINFOEX = 0x33F,};
enum MACRO_WN {WN_SUCCESS = 0,WN_NO_ERROR = 0,WN_NOT_SUPPORTED = 50,WN_CANCEL = 1223,WN_RETRY = 1237,WN_NET_ERROR = 59,WN_MORE_DATA = 234,WN_BAD_POINTER = 487,WN_BAD_VALUE = 87,WN_BAD_USER = 2202,WN_BAD_PASSWORD = 86,WN_ACCESS_DENIED = 5,WN_FUNCTION_BUSY = 170,WN_WINDOWS_ERROR = 59,WN_OUT_OF_MEMORY = 8,WN_NO_NETWORK = 1222,WN_EXTENDED_ERROR = 1208,WN_BAD_LEVEL = 124,WN_BAD_HANDLE = 6,WN_NOT_INITIALIZING = 1247,WN_NO_MORE_DEVICES = 1248,WN_NOT_CONNECTED = 2250,WN_OPEN_FILES = 2401,WN_DEVICE_IN_USE = 2404,WN_BAD_NETNAME = 67,WN_BAD_LOCALNAME = 1200,WN_ALREADY_CONNECTED = 85,WN_DEVICE_ERROR = 31,WN_CONNECTION_CLOSED = 1201,WN_NO_NET_OR_BAD_PATH = 1203,WN_BAD_PROVIDER = 1204,WN_CANNOT_OPEN_PROFILE = 1205,WN_BAD_PROFILE = 1206,WN_BAD_DEV_TYPE = 66,WN_DEVICE_ALREADY_REMEMBERED = 1202,WN_CONNECTED_OTHER_PASSWORD = 2108,WN_NO_MORE_ENTRIES = 259,WN_NOT_CONTAINER = 1207,WN_NOT_AUTHENTICATED = 1244,WN_NOT_LOGGED_ON = 1245,WN_NOT_VALIDATED = 1311,};
enum MACRO_WS {WS_OVERLAPPED = 0x0,WS_POPUP = 0x80000000,WS_CHILD = 0x40000000,WS_MINIMIZE = 0x20000000,WS_VISIBLE = 0x10000000,WS_DISABLED = 0x8000000,WS_CLIPSIBLINGS = 0x4000000,WS_CLIPCHILDREN = 0x2000000,WS_MAXIMIZE = 0x1000000,WS_CAPTION = 0xC00000,WS_BORDER = 0x800000,WS_DLGFRAME = 0x400000,WS_VSCROLL = 0x200000,WS_HSCROLL = 0x100000,WS_SYSMENU = 0x80000,WS_THICKFRAME = 0x40000,WS_GROUP = 0x20000,WS_TABSTOP = 0x10000,WS_MINIMIZEBOX = 0x20000,WS_MAXIMIZEBOX = 0x10000,WS_TILED = 0x0,WS_ICONIC = 0x20000000,WS_SIZEBOX = 0x40000,WS_OVERLAPPEDWINDOW = 0xCF0000,WS_POPUPWINDOW = 0x80880000,WS_CHILDWINDOW = 0x40000000,WS_EX_DLGMODALFRAME = 0x1,WS_EX_NOPARENTNOTIFY = 0x4,WS_EX_TOPMOST = 0x8,WS_EX_ACCEPTFILES = 0x10,WS_EX_TRANSPARENT = 0x20,WS_EX_MDICHILD = 0x40,WS_EX_TOOLWINDOW = 0x80,WS_EX_WINDOWEDGE = 0x100,WS_EX_CLIENTEDGE = 0x200,WS_EX_CONTEXTHELP = 0x400,WS_EX_RIGHT = 0x1000,WS_EX_LEFT = 0x0,WS_EX_RTLREADING = 0x2000,WS_EX_LTRREADING = 0x0,WS_EX_LEFTSCROLLBAR = 0x4000,WS_EX_RIGHTSCROLLBAR = 0x0,WS_EX_CONTROLPARENT = 0x10000,WS_EX_STATICEDGE = 0x20000,WS_EX_APPWINDOW = 0x40000,WS_EX_OVERLAPPEDWINDOW = 0x300,WS_EX_PALETTEWINDOW = 0x188,WS_EX_LAYERED = 0x80000,WS_EX_NOINHERITLAYOUT = 0x100000,WS_EX_LAYOUTRTL = 0x400000,WS_EX_NOACTIVATE = 0x8000000,};
enum MACRO_WT {WT_EXECUTEDEFAULT = 0x0,WT_EXECUTEINIOTHREAD = 0x1,WT_EXECUTEINUITHREAD = 0x2,WT_EXECUTEINWAITTHREAD = 0x4,WT_EXECUTEONLYONCE = 0x8,WT_EXECUTEINTIMERTHREAD = 0x20,WT_EXECUTELONGFUNCTION = 0x10,WT_EXECUTEINPERSISTENTIOTHREAD = 0x40,WT_EXECUTEINPERSISTENTTHREAD = 0x80,WT_EXECUTEINLONGTHREAD = 0x10,WT_EXECUTEDELETEWAIT = 0x8,};
enum MACRO__A {_A_NORMAL = 0x0,_A_RDONLY = 0x1,_A_HIDDEN = 0x2,_A_SYSTEM = 0x4,_A_VOLID = 0x8,_A_SUBDIR = 0x10,_A_ARCH = 0x20,};
enum MACRO__F {_F_RDWR = 0x3,_F_READ = 0x1,_F_WRIT = 0x2,_F_BUF = 0x4,_F_LBUF = 0x8,_F_ERR = 0x10,_F_EOF = 0x20,_F_BIN = 0x40,_F_IN = 0x80,_F_OUT = 0x100,_F_TERM = 0x200,};
enum MACRO__O {_O_RUNFLAGS = 0x700,_O_WRITABLE = 0x100,_O_EOF = 0x200,};
enum MACRO__P {_P_WAIT = 0,_P_NOWAIT = 1,_P_OVERLAY = 2,_P_NOWAITO = 3,_P_MASK = 7,_P_DETACH = 16,_P_NEWCONSOLE = 32,_P_NEWPROCGROUP = 64,_P_SUSPENDED = 128,_P_NOCLOSE = 256,_P_NEWWIN16 = 512,_P_SHAREDWIN16 = 1024,_P_DEFERRORMODE = 2048,_P_PRIO_IDLE = 4096,_P_PRIO_NORM = 8192,_P_PRIO_HIGH = 16384,_P_PRIO_REAL = 32768,};
enum MACRO__S {_S_IFMT = 61440,_S_IFDIR = 16384,_S_IFIFO = 4096,_S_IFCHR = 8192,_S_IFBLK = 12288,_S_IFREG = 32768,_S_IREAD = 256,_S_IWRITE = 128,_S_IEXEC = 64,};
typedef struct tagMENUINFO MENUINFO;
typedef struct _MMCKINFO MMCKINFO;
typedef struct _MMIOINFO MMIOINFO;
typedef struct tagMULTI_QI MULTI_QI;
typedef int (__stdcall *NEARPROC)();
typedef struct tagBITMAP *NPBITMAP;
typedef struct tagLOGPEN *NPLOGPEN;
typedef struct mmtime_tag *NPMMTIME;
typedef struct _13B347001B2B96C65D01839EEA37C971 NUMPARSE;
typedef struct _OBJECTID OBJECTID;
typedef struct _OFSTRUCT OFSTRUCT;
typedef struct _CERT_ID *PCERT_ID;
typedef unsigned int *PDWORD32;
typedef unsigned __int64 *PDWORD64;
typedef struct tagPELARRAY PELARRAY;
typedef struct tagEMRTEXT *PEMRTEXT;
typedef struct _PERF_BIN PERF_BIN;
typedef struct hostent *PHOSTENT;
typedef struct _IDEREGS *PIDEREGS;
typedef int *PINT_PTR;
typedef struct in_addr *PIN_ADDR;
typedef struct joyinfo_tag *PJOYINFO;
typedef struct midihdr_tag *PMIDIHDR;
typedef struct pvalueA *PPVALUEA;
typedef struct pvalueW *PPVALUEW;
typedef struct _RGNDATA *PRGNDATA;
typedef struct tagPROPSPEC PROPSPEC;
typedef struct protoent PROTOENT;
typedef struct servent *PSERVENT;
typedef struct timeval *PTIMEVAL;
typedef unsigned int *PULONG32;
typedef unsigned __int64 *PULONG64;
typedef struct value_entA *PVALENTA;
typedef struct value_entW *PVALENTW;
typedef struct wavehdr_tag *PWAVEHDR;
typedef struct tagWCRANGE *PWCRANGE;
typedef struct _WGLSWAP *PWGLSWAP;
typedef struct _RIP_INFO RIP_INFO;
typedef struct sockaddr SOCKADDR;
typedef struct tagSTATDATA STATDATA;
typedef struct timecaps_tag TIMECAPS;
typedef struct tagTLIBATTR TLIBATTR;
typedef struct tagTYPEATTR TYPEATTR;
typedef struct tagTYPEDESC TYPEDESC;
typedef unsigned int UINT_PTR;
typedef void (*atexit_t)();
struct heapinfo {void *ptr;void *ptr2;unsigned int size;int in_use;};
struct protoent {char *p_name;char **p_aliases;__int16 p_proto;};
enum tagMKSYS {MKSYS_NONE = 0x0,MKSYS_GENERICCOMPOSITE = 0x1,MKSYS_FILEMONIKER = 0x2,MKSYS_ANTIMONIKER = 0x3,MKSYS_ITEMMONIKER = 0x4,MKSYS_POINTERMONIKER = 0x5,MKSYS_CLASSMONIKER = 0x7,MKSYS_OBJREFMONIKER = 0x8,MKSYS_SESSIONMONIKER = 0x9,};
enum tagSTGTY {STGTY_STORAGE = 0x1,STGTY_STREAM = 0x2,STGTY_LOCKBYTES = 0x3,STGTY_PROPERTY = 0x4,};
enum tagTYMED {TYMED_HGLOBAL = 0x1,TYMED_FILE = 0x2,TYMED_ISTREAM = 0x4,TYMED_ISTORAGE = 0x8,TYMED_GDI = 0x10,TYMED_MFPICT = 0x20,TYMED_ENHMF = 0x40,TYMED_NULL = 0x0,};
typedef struct __MIDL___MIDL_itf_wtypes_0003_0001 uCLSSPEC;
typedef union tagBINDPTR BINDPTR;
typedef struct tagCACLSID CACLSID;
typedef struct tagCALPSTR CALPSTR;
typedef struct tagCASCODE CASCODE;
typedef struct _CERT_ID CERT_ID;
typedef struct _COMSTAT COMSTAT;
typedef struct _CONTEXT CONTEXT;
typedef struct _30CDF2DE7DC7B55457111E3E79D8AE18 DDEDATA;
typedef struct _A2F74AF90EE3AACE3322F4FF0CBF4977 DDEPOKE;
typedef struct tagDEC DECIMAL;
typedef struct _DSSSEED DSSSEED;
typedef unsigned int DWORD32;
typedef unsigned __int64 DWORD64;
typedef struct tagEMRTEXT EMRTEXT;
typedef int (__stdcall *FARPROC)();
typedef struct HBITMAP__ *HBITMAP;
struct HCONV__ {int unused;};
struct HDESK__ {int unused;};
struct HDROP__ {int unused;};
struct HDRVR__ {int unused;};
struct HFONT__ {int unused;};
typedef void *HGDIOBJ;
struct HGLRC__ {int unused;};
struct HHOOK__ {int unused;};
struct HICON__ {int unused;};
struct HIMCC__ {int unused;};
struct HMENU__ {int unused;};
typedef struct HMIDIIN__ *HMIDIIN;
struct HMIDI__ {int unused;};
struct HMMIO__ {int unused;};
typedef struct hostent HOSTENT;
struct HRSRC__ {int unused;};
typedef struct tagHSZPAIR HSZPAIR;
struct HTASK__ {int unused;};
typedef struct HWAVEIN__ *HWAVEIN;
struct HWAVE__ {int unused;};
typedef struct HWINSTA__ *HWINSTA;
typedef struct _IDEREGS IDEREGS;
typedef struct tagIDLDESC IDLDESC;
struct IMalloc {struct IMallocVtbl *lpVtbl;};
typedef int INT_PTR;
typedef struct in_addr IN_ADDR;
struct IStream {struct IStreamVtbl *lpVtbl;};
struct IUrlMon {struct IUrlMonVtbl *lpVtbl;};
typedef struct joyinfo_tag JOYINFO;
typedef struct tagACCEL *LPACCEL;
typedef const void *LPCVOID;
typedef struct tagINPUT *LPINPUT;
typedef struct tagPOINT *LPPOINT;
typedef struct _RECTL *LPRECTL;
typedef struct tagXFORM *LPXFORM;
enum MACRO_E {E_DRAW = -2147221184,};
enum MACRO_L {L_ctermid = 5,L_tmpnam = 13,};
enum MACRO_N {N_BTMASK = 0xF,N_TMASK = 0x30,N_TMASK1 = 0xC0,N_TMASK2 = 0xF0,N_BTSHFT = 0x4,N_TSHIFT = 0x2,};
enum MACRO_O {O_RDONLY = 0,O_WRONLY = 1,O_RDWR = 2,O_ACCMODE = 3,O_CREAT = 256,O_TRUNC = 512,O_EXCL = 1024,};
enum MACRO_P {P_WAIT = 0,P_NOWAIT = 1,P_OVERLAY = 2,P_NOWAITO = 3,P_DETACH = 4,};
enum MACRO_S {S_IFMT = 0xF000,S_IFDIR = 0x4000,S_IFIFO = 0x1000,S_IFCHR = 0x2000,S_IFBLK = 0x3000,S_IFREG = 0x8000,S_IREAD = 0x100,S_IWRITE = 0x80,S_IEXEC = 0x40,S_IRWXU = 0x1C0,S_IRUSR = 0x100,S_IWUSR = 0x80,S_IXUSR = 0x40,};
typedef struct midihdr_tag MIDIHDR;
typedef struct tagPOINT *NPPOINT;
typedef struct tagOLEVERB OLEVERB;
typedef struct tagBITMAP *PBITMAP;
typedef struct tagEMRARC *PEMRARC;
typedef struct tagEMREOF *PEMREOF;
typedef struct tagEMRARC *PEMRPIE;
typedef struct fd_set *PFD_SET;
typedef struct linger *PLINGER;
typedef struct tagLOGPEN *PLOGPEN;
typedef int *PLONG32;
typedef __int64 *PLONG64;
typedef struct mmtime_tag *PMMTIME;
typedef struct tagPOINTFX POINTFX;
typedef struct _POINTL *PPOINTL;
typedef struct tagPOINTS *PPOINTS;
typedef unsigned int *PUINT32;
typedef unsigned __int64 *PUINT64;
typedef struct pvalueA PVALUEA;
typedef struct pvalueW PVALUEW;
typedef void *PVOID64;
typedef struct tagRGBQUAD RGBQUAD;
typedef struct _RGNDATA RGNDATA;
typedef struct servent SERVENT;
typedef struct tagSTATSTG STATSTG;
typedef struct timeval TIMEVAL;
typedef unsigned int ULONG32;
typedef unsigned __int64 ULONG64;
typedef struct value_entA VALENTA;
typedef struct value_entW VALENTW;
typedef struct tagVARDESC VARDESC;
enum VARENUM {VT_EMPTY = 0x0,VT_NULL = 0x1,VT_I2 = 0x2,VT_I4 = 0x3,VT_R4 = 0x4,VT_R8 = 0x5,VT_CY = 0x6,VT_DATE = 0x7,VT_BSTR = 0x8,VT_DISPATCH = 0x9,VT_ERROR = 0xA,VT_BOOL = 0xB,VT_VARIANT = 0xC,VT_UNKNOWN = 0xD,VT_DECIMAL = 0xE,VT_I1 = 0x10,VT_UI1 = 0x11,VT_UI2 = 0x12,VT_UI4 = 0x13,VT_I8 = 0x14,VT_UI8 = 0x15,VT_INT = 0x16,VT_UINT = 0x17,VT_VOID = 0x18,VT_HRESULT = 0x19,VT_PTR = 0x1A,VT_SAFEARRAY = 0x1B,VT_CARRAY = 0x1C,VT_USERDEFINED = 0x1D,VT_LPSTR = 0x1E,VT_LPWSTR = 0x1F,VT_RECORD = 0x24,VT_FILETIME = 0x40,VT_BLOB = 0x41,VT_STREAM = 0x42,VT_STORAGE = 0x43,VT_STREAMED_OBJECT = 0x44,VT_STORED_OBJECT = 0x45,VT_BLOB_OBJECT = 0x46,VT_CF = 0x47,VT_CLSID = 0x48,VT_VERSIONED_STREAM = 0x49,VT_BSTR_BLOB = 0xFFF,VT_VECTOR = 0x1000,VT_ARRAY = 0x2000,VT_BYREF = 0x4000,VT_RESERVED = 0x8000,VT_ILLEGAL = 0xFFFF,VT_ILLEGALMASKED = 0xFFF,VT_TYPEMASK = 0xFFF,};
typedef struct tagVARIANT VARIANT;
typedef unsigned __int16 VARTYPE;
typedef struct wavehdr_tag WAVEHDR;
typedef struct tagWCRANGE WCRANGE;
typedef struct _WGLSWAP WGLSWAP;
typedef struct WSAData WSADATA;
typedef signed __int8 _TSCHAR;
typedef unsigned __int8 _TUCHAR;
typedef char _TXCHAR;
typedef unsigned __int8 boolean;
typedef int clock_t;
struct complex {double x;double y;};
struct hostent {char *h_name;char **h_aliases;__int16 h_addrtype;__int16 h_length;char **h_addr_list;};
typedef struct __jmp_buf jmp_buf[1];
typedef __int16 nlink_t;
struct servent {char *s_name;char **s_aliases;__int16 s_port;char *s_proto;};
enum tagADVF {ADVF_NODATA = 0x1,ADVF_PRIMEFIRST = 0x2,ADVF_ONLYONCE = 0x4,ADVF_DATAONSTOP = 0x40,ADVFCACHE_NOHANDLER = 0x8,ADVFCACHE_FORCEBUILTIN = 0x10,ADVFCACHE_ONSAVE = 0x20,};
enum tagSTGC {STGC_DEFAULT = 0x0,STGC_OVERWRITE = 0x1,STGC_ONLYIFCURRENT = 0x2,STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE = 0x4,STGC_CONSOLIDATE = 0x8,};
struct timeval {int tv_sec;int tv_usec;};
typedef unsigned __int16 u_short;
#define wchar_t unsigned __int16
typedef unsigned int ALG_ID;
typedef struct tagBITMAP BITMAP;
typedef struct tagCABOOL CABOOL;
typedef struct tagCABSTR CABSTR;
typedef struct tagCADATE CADATE;
typedef struct tagCIEXYZ CIEXYZ;
enum COLORS {BLACK = 0x0,BLUE = 0x1,GREEN = 0x2,CYAN = 0x3,RED = 0x4,MAGENTA = 0x5,BROWN = 0x6,LIGHTGRAY = 0x7,DARKGRAY = 0x8,LIGHTBLUE = 0x9,LIGHTGREEN = 0xA,LIGHTCYAN = 0xB,LIGHTRED = 0xC,LIGHTMAGENTA = 0xD,YELLOW = 0xE,WHITE = 0xF,};
typedef struct _cpinfo CPINFO;
typedef struct _923DA7BE11DCB482D02B0566D8DB27AB DDEACK;
typedef double DOUBLE;
typedef struct tagEMRARC EMRARC;
typedef struct tagEMREOF EMREOF;
typedef struct tagEMRARC EMRPIE;
typedef struct fd_set FD_SET;
typedef struct HACCEL__ *HACCEL;
typedef void *HANDLE;
typedef struct HBRUSH__ *HBRUSH;
struct HIMC__ {int unused;};
struct HKEY__ {int unused;};
typedef struct HMIXER__ *HMIXER;
struct HPEN__ {int unused;};
struct HRGN__ {int unused;};
struct HSTR__ {int unused;};
struct HWND__ {int unused;};
typedef struct linger LINGER;
typedef struct tagLOGPEN LOGPEN;
typedef int LONG32;
typedef __int64 LONG64;
typedef struct _BLOB *LPBLOB;
typedef int *LPLONG;
typedef struct _MAT2 *LPMAT2;
typedef struct tagRECT *LPRECT;
typedef struct tagSIZE *LPSIZE;
typedef void *LPVOID;
typedef struct mmtime_tag MMTIME;
typedef struct tagRECT *NPRECT;
typedef struct _NT_TIB NT_TIB;
typedef struct tagPANOSE PANOSE;
typedef struct _COORD *PCOORD;
typedef struct tagINPUT *PINPUT;
typedef int *PINT32;
typedef __int64 *PINT64;
typedef struct _POINTL POINTL;
typedef struct tagPOINTS POINTS;
typedef struct tagPOINT *PPOINT;
typedef struct _RECTL *PRECTL;
typedef unsigned __int8 *PTBYTE;
typedef char *PTCHAR;
typedef struct tagXFORM *PXFORM;
typedef struct tagRemSNB RemSNB;
typedef unsigned int UINT32;
typedef unsigned __int64 UINT64;
typedef unsigned __int16 USHORT;
typedef struct _WSABUF WSABUF;
typedef char _TCHAR;
struct dirent {char d_name[260];};
typedef int fpos_t;
typedef struct _979FA3DE6ECCF956231BFC297C4278E6 ldiv_t;
typedef __int16 mode_t;
typedef unsigned int size_t;
typedef int time_t;
typedef unsigned __int8 u_char;
typedef unsigned int u_long;
typedef unsigned __int16 uint16;
typedef unsigned int uint32;
typedef struct tagACCEL ACCEL;
typedef struct tagCADBL CADBL;
typedef struct tagCAFLT CAFLT;
typedef char CCHAR;
typedef struct _COORD COORD;
typedef struct _7ADE47B00230EF5EBD78FEDFCEB95499 DDELN;
typedef struct _12220BD7577024BDCE09342FCD2824E0 DDEUP;
typedef unsigned int DWORD;
typedef struct _FIXED FIXED;
typedef float FLOAT;
typedef unsigned int GROUP;
typedef struct HCONV__ *HCONV;
struct HDC__ {int unused;};
typedef struct HDESK__ *HDESK;
typedef struct HDROP__ *HDROP;
typedef struct HDRVR__ *HDRVR;
typedef int HFILE;
typedef struct HFONT__ *HFONT;
typedef struct HGLRC__ *HGLRC;
typedef struct HHOOK__ *HHOOK;
typedef struct HICON__ *HICON;
typedef struct HIMCC__ *HIMCC;
struct HKL__ {int unused;};
typedef struct HMENU__ *HMENU;
typedef struct HMIDI__ *HMIDI;
typedef struct HMMIO__ *HMMIO;
typedef char *HPSTR;
typedef struct HRSRC__ *HRSRC;
struct HSZ__ {int unused;};
typedef struct HTASK__ *HTASK;
typedef struct HWAVE__ *HWAVE;
typedef struct tagINPUT INPUT;
typedef int INT32;
typedef __int64 INT64;
typedef struct _ABC *LPABC;
typedef struct _DCB *LPDCB;
typedef int *LPINT;
typedef struct tagMSG *LPMSG;
typedef struct _QualityOfService *LPQOS;
typedef struct tagNMHDR NMHDR;
typedef struct _ABC *NPABC;
typedef struct tagMSG *NPMSG;
typedef struct _SID *PISID;
typedef struct _LUID *PLUID;
typedef struct tagPOINT POINT;
typedef struct tagRECT *PRECT;
typedef struct tagSIZE *PSIZE;
typedef unsigned int *PUINT;
typedef void *PVOID;
typedef struct _RECTL RECTL;
typedef __int16 SHORT;
typedef unsigned __int8 TBYTE;
typedef char TCHAR;
typedef unsigned __int8 UCHAR;
typedef struct _7545F1A067A9FBB43FDF50E78E6B08BD UDATE;
typedef unsigned int ULONG;
typedef struct tagXFORM XFORM;
struct _GUID {unsigned int Data1;unsigned __int16 Data2;unsigned __int16 Data3;unsigned __int8 Data4[8];};
typedef int _TINT;
struct _stat {__int16 st_dev;__int16 st_ino;__int16 st_mode;__int16 st_nlink;int st_uid;int st_gid;__int16 st_rdev;int st_size;int st_atime;int st_mtime;int st_ctime;};
typedef __int16 dev_t;
typedef struct _979FA3DE6ECCF956231BFC297C4278E6 div_t;
struct ffblk {int ff_reserved;int ff_fsize;unsigned int ff_attrib;unsigned __int16 ff_ftime;unsigned __int16 ff_fdate;char ff_name[260];};
struct ftime {unsigned __int32 ft_tsec : 5;unsigned __int32 ft_min : 6;unsigned __int32 ft_hour : 5;unsigned __int32 ft_day : 5;unsigned __int32 ft_month : 4;unsigned __int32 ft_year : 7;};
typedef int gid_t;
typedef __int16 ino_t;
typedef signed __int16 int16;
typedef signed int int32;
struct lconv {char *decimal_point;char *thousands_sep;char *grouping;char *int_curr_symbol;char *currency_symbol;char *mon_decimal_point;char *mon_thousands_sep;char *mon_grouping;char *positive_sign;char *negative_sign;char int_frac_digits;char frac_digits;char p_cs_precedes;char p_sep_by_space;char n_cs_precedes;char n_sep_by_space;char p_sign_posn;char n_sign_posn;};
typedef int off_t;
struct timeb {int time;__int16 millitm;__int16 timezone;__int16 dstflag;};
typedef unsigned int u_int;
typedef int uid_t;
typedef unsigned __int8 uint8;
typedef struct _BLOB BLOB;
typedef int BOOL;
typedef unsigned __int8 BYTE;
typedef struct tagCACY CACY;
typedef struct tagCAUB CAUB;
typedef struct tagCAUH CAUH;
typedef struct tagCAUI CAUI;
typedef struct tagCAUL CAUL;
typedef char CHAR;
typedef struct tagCRGB CRGB;
typedef double DATE;
typedef struct _B3953398288F55B3E699D33E254AB360 FILE;
typedef struct _GUID GUID;
typedef struct HIMC__ *HIMC;
typedef struct HKEY__ *HKEY;
typedef struct HPEN__ *HPEN;
typedef struct HRGN__ *HRGN;
typedef struct HSTR__ *HSTR;
typedef struct HWND__ *HWND;
typedef int LONG;
typedef IBindCtx *LPBC;
typedef struct _LUID LUID;
typedef struct _MAT2 MAT2;
typedef struct _ABC *PABC;
typedef struct tagEMR *PEMR;
typedef int *PINT;
typedef struct tagMSG *PMSG;
typedef struct _NCB *PNCB;
typedef int (__stdcall *PROC)();
typedef struct tagRECT RECT;
typedef struct tagSIZE SIZE;
typedef unsigned int UINT;
typedef unsigned __int16 WORD;
struct _PSP;
typedef unsigned __int8 byte;
typedef signed __int8 int8;
typedef struct _527907CF0A9F354C3629E138FE8A5CE6 wDIR;
typedef struct _ABC ABC;
typedef struct _ACL ACL;
typedef struct tagCAC CAC;
typedef struct tagCAH CAH;
typedef struct tagCAI CAI;
typedef struct tagCAL CAL;
typedef struct _DCB DCB;
typedef struct _F5C2DC46D71DC4D756FD7B589ADCFB9C DIR;
typedef struct tagEMR EMR;
typedef struct HDC__ *HDC;
typedef struct HKL__ *HKL;
typedef struct HSZ__ *HSZ;
typedef int INT;
typedef struct tagMSG MSG;
typedef struct _NCB NCB;
typedef char *PSZ;
typedef struct _QualityOfService QOS;
typedef struct _SID SID;
typedef union tagCY CY;
struct tm {int tm_sec;int tm_min;int tm_hour;int tm_mday;int tm_mon;int tm_year;int tm_wday;int tm_yday;int tm_isdst;};
struct __MIDL___MIDL_itf_wtypes_0003_0001____MIDL___MIDL_itf_wtypes_0003_0005___7C8E1366D020F294DF98B2AA96DD5064 {GUID ObjectId;GUID PolicyId;};
struct _DEVICE_MEDIA_INFO_________4F7870307D68C2FCA7F129B9E5696535___445D6B15ACF5C822E8B4A555F1AF8785 {BYTE MediumType;BYTE DensityCode;};
struct _DISK_CACHE_INFORMATION___0AD8AF95EFD10BD5272FB6EC04FE066D___99025D9F8BC16C326FB237046D6F6F6F {WORD Minimum;WORD Maximum;};
struct _DISK_CACHE_INFORMATION___0AD8AF95EFD10BD5272FB6EC04FE066D___B2B02F0A7FAA2EF9E06FFE2893D08AB3 {WORD Minimum;WORD Maximum;WORD MaximumBlocks;};
union _DEVICE_MEDIA_INFO______723F4108713078BC94E60AB72DA19CAC___4F7870307D68C2FCA7F129B9E5696535 {struct _DEVICE_MEDIA_INFO_________4F7870307D68C2FCA7F129B9E5696535___445D6B15ACF5C822E8B4A555F1AF8785 ScsiInformation;};
struct _FILE_OBJECTID_BUFFER___77FE4681D295052E0E2CCB42A3EC532A___C0DBABB4D3C7F7567DEFF10AA714B1D5 {BYTE BirthVolumeId[16];BYTE BirthObjectId[16];BYTE DomainId[16];};
struct _IMAGE_AUX_SYMBOL______16A1A8FB0340C07B06C110366CF85D46___A6589E1685AD051AED20409BF2544643 {WORD Dimension[4];};
struct _IMAGE_AUX_SYMBOL______16A1A8FB0340C07B06C110366CF85D46___D7CED02C5EE110FFB81CA02005CB2264 {DWORD PointerToLinenumber;DWORD PointerToNextFunction;};
struct _IMAGE_AUX_SYMBOL______7BA673E1ED5771089D188D89EB9BDF46___3C0209E125597A11F89742EEA0270158 {WORD Linenumber;WORD Size;};
struct tagMIXERCONTROLA___86CBF7128C7FD2AC13C8612745AD13D8___A8262751543F154F80C41ED2519FD13B {DWORD dwMinimum;DWORD dwMaximum;};
struct tagMIXERCONTROLA___86CBF7128C7FD2AC13C8612745AD13D8___A9226EEFE738F03A3F7D52221D0941CC {LONG lMinimum;LONG lMaximum;};
struct tagMIXERCONTROLW___3D7A05C52ED08258D8A0343834E0D122___A8262751543F154F80C41ED2519FD13B {DWORD dwMinimum;DWORD dwMaximum;};
struct tagMIXERCONTROLW___3D7A05C52ED08258D8A0343834E0D122___A9226EEFE738F03A3F7D52221D0941CC {LONG lMinimum;LONG lMaximum;};
struct _IMAGE_SYMBOL___9F494F861147FDD11568E2137C7AB2D3___DE8E098676ACAC74F2956A2D7B83DF3B {DWORD Short;DWORD Long;};
struct _SYSTEM_INFO___A707B71C060B6D10F73A71917EA8473F___AA04DEB0C6383F89F13D312A174572A9 {WORD wProcessorArchitecture;WORD wReserved;};
struct _LDT_ENTRY___95C81B8F3DD6C8D0A2F7AF8EEE24F097___81408237330B83BB46845513C42A27AE {BYTE BaseMid;BYTE Flags1;BYTE Flags2;BYTE BaseHi;};
struct mmtime_tag___532DCF0E9B9A2B0A020BD11490F25514___2498AB4F57B5A5935D3AAA9956C218FB {BYTE hour;BYTE min;BYTE sec;BYTE frame;BYTE fps;BYTE dummy;BYTE pad[2];};
struct mmtime_tag___532DCF0E9B9A2B0A020BD11490F25514___B7A2B1CE967584EBB3840978181CF21D {DWORD songptrpos;};
struct in_addr___C13EC994467D6E67044F092615EC7EA9___01C175C1F0716DCA00314EDD79DBC0A0 {u_char s_b1;u_char s_b2;u_char s_b3;u_char s_b4;};
struct in_addr___C13EC994467D6E67044F092615EC7EA9___4DE764E669F663DACA3CBFDE73714CB5 {u_short s_w1;u_short s_w2;};
struct tagDEC___64EC678C49E7BE49873AFBFB7A849D34___7F8459940C2B08BD5D82B0F27239141B {BYTE scale;BYTE sign;};
struct tagDEC___D28E26DEC3EC762C06C2AA9D0F7AC301___674876891A86A76F12C10005982BCA56 {ULONG Lo32;ULONG Mid32;};
struct tagVARIANT_______tagVARIANT___0FF4B879107F0495843F4FD419461AB7____tagBRECORD {PVOID pvRecord;IRecordInfo *pRecInfo;};
union _CERT_SYSTEM_STORE_RELOCATE_PARA___F6B54AA619DA848AA2A21334D34667B4 {HKEY hKeyBase;void *pvBase;};
struct RETRIEVAL_POINTERS_BUFFER___1BE95960A89AEFDDC7C143B6A7C3CEB0 {LARGE_INTEGER NextVcn;LARGE_INTEGER Lcn;};
struct _REPARSE_GUID_DATA_BUFFER___7E560C326EB38963D80E6D6A0DCA12F5 {BYTE DataBuffer[1];};
union _HTTPSPolicyCallbackData___F4C9A18A61EDC422290C9C9CC9138C86 {DWORD cbStruct;DWORD cbSize;};
union _IMAGE_IMPORT_DESCRIPTOR___6AD513163D7E1ED317197F815B889A38 {DWORD Characteristics;DWORD OriginalFirstThunk;};
union _IMAGE_FUNCTION_ENTRY64___20B872DD2F1538A436CF92B8294FA12B {ULONGLONG EndOfPrologue;ULONGLONG UnwindInfoAddress;};
union _NDR_USER_MARSHAL_INFO___2E50A3D60C3ABC8A29A927969B630A6D {NDR_USER_MARSHAL_INFO_LEVEL1 Level1;};
struct _FULL_PTR_XLAT_TABLES___5B5EF811252786EBFBAAA3889BB4C68D {PFULL_PTR_TO_REFID_ELEMENT *XlatTable;unsigned int NumberOfBuckets;unsigned int HashMask;};
union _IMAGE_SECTION_HEADER___39DFBA39B6D121CDFC1ACE66C995549C {DWORD PhysicalAddress;DWORD VirtualSize;};
union tagMIXERLINECONTROLSA___DC43C2837E8C20184C3137B308FBE3E1 {DWORD dwControlID;DWORD dwControlType;};
union tagMIXERLINECONTROLSW___DC43C2837E8C20184C3137B308FBE3E1 {DWORD dwControlID;DWORD dwControlType;};
union IMPORT_OBJECT_HEADER___14069DE518AE1D4889EE822155F222E0 {WORD Ordinal;WORD Hint;};
union _CRL_DIST_POINT_NAME___3757901DA347ED4D4ADA336F060E6178 {CERT_ALT_NAME_INFO FullName;};
union _IMAGE_THUNK_DATA32___A667AA66621C320A48F8EE5C4EA8143D {DWORD ForwarderString;DWORD Function;DWORD Ordinal;DWORD AddressOfData;};
union _IMAGE_THUNK_DATA64___F155400DC8E777EDFF51409B49416578 {ULONGLONG ForwarderString;ULONGLONG Function;ULONGLONG Ordinal;ULONGLONG AddressOfData;};
union _SHELLEXECUTEINFOA___D915D6B2B775D926C11EEA321E8940B4 {HANDLE hIcon;HANDLE hMonitor;};
union _SHELLEXECUTEINFOW___D915D6B2B775D926C11EEA321E8940B4 {HANDLE hIcon;HANDLE hMonitor;};
struct _IMAGE_AUX_SYMBOL___C84595816809DB9D1AC5ADB82092AE34 {BYTE Name[18];};
union _IMAGE_LINENUMBER___323A99206959B5083BD9C46482D6FCE5 {DWORD SymbolTableIndex;DWORD VirtualAddress;};
union _IMAGE_RELOCATION___1E7C1E46FA531EE3105A5918E7864FED {DWORD VirtualAddress;DWORD RelocCount;};
struct _NTFS_STATISTICS___924DF363F27C338739465173127CFC6B {WORD Write;WORD Create;WORD SetInfo;WORD Flush;};
struct _NTFS_STATISTICS___9C998E5FD8046F0A1F0382B50F145156 {DWORD Calls;DWORD Clusters;DWORD Hints;DWORD RunsReturned;DWORD HintsHonored;DWORD HintsClusters;DWORD Cache;DWORD CacheClusters;DWORD CacheMiss;DWORD CacheMissClusters;};
struct _NTFS_STATISTICS___B3DB85740C1E2CFE5BD1821639ECE250 {WORD Write;WORD Create;WORD SetInfo;};
union tagMIXERCONTROLA___AFA1D3B62FF5E28583F9FD43B125895E {DWORD cSteps;DWORD cbCustomData;DWORD dwReserved[6];};
union tagMIXERCONTROLW___AFA1D3B62FF5E28583F9FD43B125895E {DWORD cSteps;DWORD cbCustomData;DWORD dwReserved[6];};
struct _ULARGE_INTEGER___0354AA9C204208F00D0965D07BBE7FAC {DWORD LowPart;DWORD HighPart;};
union _devicemodeA___4FBEBCCE69364E072421C9DF045BB77C {DWORD dmDisplayFlags;DWORD dmNup;};
union _devicemodeW___4FBEBCCE69364E072421C9DF045BB77C {DWORD dmDisplayFlags;DWORD dmNup;};
union _userHMETAFILEPICT____MIDL_IWinTypes_0005 {int hInproc;remoteMETAFILEPICT *hRemote;};
union _userHENHMETAFILE____MIDL_IWinTypes_0006 {int hInproc;BYTE_BLOB *hRemote;};
struct _CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA {DWORD cbSize;DWORD dwSignerIndex;DWORD dwUnauthAttrIndex;};
struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION {DWORD EndOfJobTimeAction;};
union _GDI_NONREMOTE____MIDL_IWinTypes_0002 {int hInproc;DWORD_BLOB *hRemote;};
struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY {ULONGLONG BeginAddress;ULONGLONG EndAddress;ULONGLONG ExceptionHandler;ULONGLONG HandlerData;ULONGLONG PrologEndAddress;};
union _userHMETAFILE____MIDL_IWinTypes_0004 {int hInproc;BYTE_BLOB *hRemote;};
union _userHPALETTE____MIDL_IWinTypes_0008 {int hInproc;LOGPALETTE *hRemote;};
typedef PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY PIMAGE_AXP64_RUNTIME_FUNCTION_ENTRY;
struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY {DWORD BeginAddress;DWORD EndAddress;DWORD ExceptionHandler;DWORD HandlerData;DWORD PrologEndAddress;};
union _userHBITMAP____MIDL_IWinTypes_0007 {int hInproc;userBITMAP *hRemote;};
union _userHGLOBAL____MIDL_IWinTypes_0003 {int hInproc;FLAGGED_BYTE_BLOB *hRemote;__int64 hInproc64;};
typedef IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY IMAGE_AXP64_RUNTIME_FUNCTION_ENTRY;
struct _IMAGE_IA64_RUNTIME_FUNCTION_ENTRY {DWORD BeginAddress;DWORD EndAddress;DWORD UnwindInfoAddress;};
struct _060D6FD956D3EBF205D64C3CA4764571 {LARGE_INTEGER StartingLcn;};
struct _12220BD7577024BDCE09342FCD2824E0 {unsigned __int16 unused : 12;unsigned __int16 fAck : 1;unsigned __int16 fRelease : 1;unsigned __int16 fReserved : 1;unsigned __int16 fAckReq : 1;__int16 cfFormat;BYTE rgb[1];};
struct _30CDF2DE7DC7B55457111E3E79D8AE18 {unsigned __int16 unused : 12;unsigned __int16 fResponse : 1;unsigned __int16 fRelease : 1;unsigned __int16 reserved : 1;unsigned __int16 fAckReq : 1;__int16 cfFormat;BYTE Value[1];};
struct _3EC5757393EE7828D79CED73ACE876F0 {unsigned int Count;RPC_IF_ID *IfId[1];};
struct _50092E5B8D5585E25A36D2D7AA7D11CF {LARGE_INTEGER FileReferenceNumber;};
struct _527907CF0A9F354C3629E138FE8A5CE6 {unsigned int _d_hdir;wchar_t *_d_dirname;unsigned int _d_magic;unsigned int _d_nfiles;char _d_buf[320];};
struct _5C484BA576E4B3479DA7CECC9170D175 {BYTE FinderInfo[32];};
struct _6D2254E53597AC8CE26BF57895A6DFF7 {BYTE bCla;BYTE bIns;BYTE bP1;BYTE bP2;BYTE bP3;};
struct _80E50DFA284ED4BC838B08AAD8EA99BA {LARGE_INTEGER StartingVcn;};
struct _8B9777916333A4B8A3A60FA8F93F002E {SCARD_IO_REQUEST ioRequest;};
struct _A2F74AF90EE3AACE3322F4FF0CBF4977 {unsigned __int16 unused : 13;unsigned __int16 fRelease : 1;unsigned __int16 fReserved : 2;__int16 cfFormat;BYTE Value[1];};
struct _B3953398288F55B3E699D33E254AB360 {unsigned __int8 *curp;unsigned __int8 *buffer;int level;int bsize;unsigned __int16 istemp;unsigned __int16 flags;wchar_t hold;char fd;unsigned __int8 token;};
struct _E1FC672EFA0154DDDEED24E20FAA5FC7 {WORD versionNumber;WORD offset;};
struct _EC8EE2E9AF7D4EC32726A7FD632A186D {ULONG ObjectType;ULONG ObjectLength;};
typedef enum tagEOLE_AUTHENTICATION_CAPABILITIES EOLE_AUTHENTICATION_CAPABILITIES;
struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY {DWORD FuncStart;unsigned __int32 PrologLen : 8;unsigned __int32 FuncLen : 22;unsigned __int32 ThirtyTwoBit : 1;unsigned __int32 ExceptionFlag : 1;};
struct _JOBOBJECT_BASIC_UI_RESTRICTIONS {DWORD UIRestrictionsClass;};
typedef LPMIXERCONTROLDETAILS_LISTTEXTA LPMIXERCONTROLDETAILS_LISTTEXT;
typedef enum _A98B79572840FDA381AA9CDCE69D1BC8 DISK_CACHE_RETENTION_PRIORITY;
typedef LPENUM_SERVICE_STATUS_PROCESSA LPENUM_SERVICE_STATUS_PROCESS;
typedef PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY PIMAGE_RUNTIME_FUNCTION_ENTRY;
typedef PMIXERCONTROLDETAILS_LISTTEXTA PMIXERCONTROLDETAILS_LISTTEXT;
typedef enum _SECURITY_IMPERSONATION_LEVEL *PSECURITY_IMPERSONATION_LEVEL;
struct _CMSG_SP3_COMPATIBLE_AUX_INFO {DWORD cbSize;DWORD dwFlags;};
struct tMIXERCONTROLDETAILS_UNSIGNED {DWORD dwValue;};
typedef IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY IMAGE_RUNTIME_FUNCTION_ENTRY;
typedef MIXERCONTROLDETAILS_LISTTEXTA MIXERCONTROLDETAILS_LISTTEXT;
typedef PIMAGE_LOAD_CONFIG_DIRECTORY32 PIMAGE_LOAD_CONFIG_DIRECTORY;
typedef WORD *PSECURITY_DESCRIPTOR_CONTROL;
typedef SOLE_AUTHENTICATION_SERVICE *PSOLE_AUTHENTICATION_SERVICE;
typedef enum _SECURITY_IMPERSONATION_LEVEL SECURITY_IMPERSONATION_LEVEL;
struct _FILE_ALLOCATED_RANGE_BUFFER {LARGE_INTEGER FileOffset;LARGE_INTEGER Length;};
struct _IMAGE_ARCHIVE_MEMBER_HEADER {BYTE Name[16];BYTE Date[12];BYTE UserID[6];BYTE GroupID[6];BYTE Mode[8];BYTE Size[10];BYTE EndHeader[2];};
struct tMIXERCONTROLDETAILS_BOOLEAN {LONG fValue;};
typedef ENUM_SERVICE_STATUS_PROCESSA ENUM_SERVICE_STATUS_PROCESS;
typedef IMAGE_LOAD_CONFIG_DIRECTORY32 IMAGE_LOAD_CONFIG_DIRECTORY;
typedef LPQUERY_SERVICE_LOCK_STATUSA LPQUERY_SERVICE_LOCK_STATUS;
typedef const CERT_STORE_PROV_FIND_INFO *PCCERT_STORE_PROV_FIND_INFO;
typedef PCRYPT_PASSWORD_CREDENTIALSA PCRYPT_PASSWORD_CREDENTIALS;
typedef LONG (__stdcall *PTOP_LEVEL_EXCEPTION_FILTER)(struct _EXCEPTION_POINTERS *ExceptionInfo);
typedef WORD SECURITY_DESCRIPTOR_CONTROL;
struct _FILE_ZERO_DATA_INFORMATION {LARGE_INTEGER FileOffset;LARGE_INTEGER BeyondFinalZero;};
struct _FSCTL_QUERY_FAT_BPB_BUFFER {BYTE First0x24BytesOfBootSector[36];};
struct tMIXERCONTROLDETAILS_SIGNED {LONG lValue;};
struct tagSOLE_AUTHENTICATION_INFO {DWORD dwAuthnSvc;DWORD dwAuthzSvc;void *pAuthInfo;};
typedef const CERT_STORE_PROV_FIND_INFO CCERT_STORE_PROV_FIND_INFO;
typedef CRYPT_PASSWORD_CREDENTIALSA CRYPT_PASSWORD_CREDENTIALS;
typedef LPOPENCARD_SEARCH_CRITERIAA LPOPENCARD_SEARCH_CRITERIA;
struct _CERT_PRIVATE_KEY_VALIDITY {FILETIME NotBefore;FILETIME NotAfter;};
struct _CERT_STORE_PROV_FIND_INFO {DWORD cbSize;DWORD dwMsgAndCertEncodingType;DWORD dwFindFlags;DWORD dwFindType;const void *pvFindPara;};
struct _EVENTLOG_FULL_INFORMATION {DWORD dwFull;};
struct _IMAGE_COFF_SYMBOLS_HEADER {DWORD NumberOfSymbols;DWORD LvaToFirstSymbol;DWORD NumberOfLinenumbers;DWORD LvaToFirstLinenumber;DWORD RvaToFirstByteOfCode;DWORD RvaToLastByteOfCode;DWORD RvaToFirstByteOfData;DWORD RvaToLastByteOfData;};
struct _IMAGE_RESOURCE_DATA_ENTRY {DWORD OffsetToData;DWORD Size;DWORD CodePage;DWORD Reserved;};
struct _SET_PARTITION_INFORMATION {BYTE PartitionType;};
struct _STORAGE_BUS_RESET_REQUEST {BYTE PathId;};
struct _TAPE_SET_MEDIA_PARAMETERS {DWORD BlockSize;};
struct _WINDOW_BUFFER_SIZE_RECORD {COORD dwSize;};
typedef LPSERVICE_FAILURE_ACTIONSA LPSERVICE_FAILURE_ACTIONS;
typedef LUID_AND_ATTRIBUTES LUID_AND_ATTRIBUTES_ARRAY[1];
typedef ACL_REVISION_INFORMATION *PACL_REVISION_INFORMATION;
typedef MIDL_STUBLESS_PROXY_INFO *PMIDL_STUBLESS_PROXY_INFO;
typedef POPENCARD_SEARCH_CRITERIAA POPENCARD_SEARCH_CRITERIA;
typedef QUERY_SERVICE_LOCK_STATUSA QUERY_SERVICE_LOCK_STATUS;
typedef void (__stdcall *RPC_AUTH_KEY_RETRIEVAL_FN)(void *Arg, unsigned __int16 *ServerPrincName, unsigned int KeyVer, void **Key, RPC_STATUS *Status);
struct _ACL_REVISION_INFORMATION {DWORD AclRevision;};
struct _SID_IDENTIFIER_AUTHORITY {BYTE Value[6];};
typedef PRTL_CRITICAL_SECTION_DEBUG LPCRITICAL_SECTION_DEBUG;
typedef OPENCARD_SEARCH_CRITERIAA OPENCARD_SEARCH_CRITERIA;
typedef IMAGE_IMPORT_DESCRIPTOR *PIMAGE_IMPORT_DESCRIPTOR;
typedef enum _TOKEN_INFORMATION_CLASS *PTOKEN_INFORMATION_CLASS;
typedef SID_AND_ATTRIBUTES SID_AND_ATTRIBUTES_ARRAY[1];
struct _EXIT_PROCESS_DEBUG_INFO {DWORD dwExitCode;};
struct tagMCI_WAVE_DELETE_PARMS {DWORD dwCallback;DWORD dwFrom;DWORD dwTo;};
typedef LPMCI_ANIM_WINDOW_PARMSA LPMCI_ANIM_WINDOW_PARMS;
typedef LPMCI_OVLY_WINDOW_PARMSA LPMCI_OVLY_WINDOW_PARMS;
typedef LPPRINTPROCESSOR_INFO_1A LPPRINTPROCESSOR_INFO_1;
typedef PRTL_CRITICAL_SECTION_DEBUG PCRITICAL_SECTION_DEBUG;
typedef SERVICE_FAILURE_ACTIONSA SERVICE_FAILURE_ACTIONS;
typedef enum _TOKEN_INFORMATION_CLASS TOKEN_INFORMATION_CLASS;
struct _CERT_CHAIN_POLICY_PARA {DWORD cbSize;DWORD dwFlags;void *pvExtraPolicyPara;};
struct _CERT_REVOCATION_STATUS {DWORD cbSize;DWORD dwIndex;DWORD dwError;DWORD dwReason;};
struct _CERT_SYSTEM_STORE_INFO {DWORD cbSize;};
struct _DISK_CONTROLLER_NUMBER {DWORD ControllerNumber;DWORD DiskNumber;};
struct _EXIT_THREAD_DEBUG_INFO {DWORD dwExitCode;};
struct _ImageArchitectureEntry {DWORD FixupInstRVA;DWORD NewInst;};
struct _MESSAGE_RESOURCE_BLOCK {DWORD LowId;DWORD HighId;DWORD OffsetToEntries;};
struct _SERVICE_STATUS_PROCESS {DWORD dwServiceType;DWORD dwCurrentState;DWORD dwControlsAccepted;DWORD dwWin32ExitCode;DWORD dwServiceSpecificExitCode;DWORD dwCheckPoint;DWORD dwWaitHint;DWORD dwProcessId;DWORD dwServiceFlags;};
struct tagMCI_GETDEVCAPS_PARMS {DWORD dwCallback;DWORD dwReturn;DWORD dwItem;};
typedef RTL_CRITICAL_SECTION_DEBUG CRITICAL_SECTION_DEBUG;
typedef enum _GET_FILEEX_INFO_LEVELS GET_FILEEX_INFO_LEVELS;
typedef LPQUERY_SERVICE_CONFIGA LPQUERY_SERVICE_CONFIG;
typedef IMAGE_BASE_RELOCATION *PIMAGE_BASE_RELOCATION;
typedef PIMAGE_OPTIONAL_HEADER32 PIMAGE_OPTIONAL_HEADER;
typedef IMAGE_TLS_DIRECTORY32 *PIMAGE_TLS_DIRECTORY32;
typedef IMAGE_TLS_DIRECTORY64 *PIMAGE_TLS_DIRECTORY64;
typedef PMCI_ANIM_WINDOW_PARMSA PMCI_ANIM_WINDOW_PARMS;
typedef PMCI_OVLY_WINDOW_PARMSA PMCI_OVLY_WINDOW_PARMS;
typedef PPRINTPROCESSOR_INFO_1A PPRINTPROCESSOR_INFO_1;
typedef enum _RPC_NOTIFICATION_TYPES RPC_NOTIFICATION_TYPES;
struct _IMAGE_BASE_RELOCATION {DWORD VirtualAddress;DWORD SizeOfBlock;};
struct _IMAGE_TLS_DIRECTORY32 {DWORD StartAddressOfRawData;DWORD EndAddressOfRawData;DWORD AddressOfIndex;DWORD AddressOfCallBacks;DWORD SizeOfZeroFill;DWORD Characteristics;};
struct _NDR_USER_MARSHAL_INFO {unsigned int InformationLevel;_NDR_USER_MARSHAL_INFO___2E50A3D60C3ABC8A29A927969B630A6D __anonymous0;};
struct _STORAGE_DEVICE_NUMBER {DWORD DeviceType;DWORD DeviceNumber;DWORD PartitionNumber;};
struct _TAPE_CREATE_PARTITION {DWORD Method;DWORD Count;DWORD Size;};
struct _UNLOAD_DLL_DEBUG_INFO {LPVOID lpBaseOfDll;};
struct _tagPROTOCOLFILTERDATA {DWORD cbSize;IInternetProtocolSink *pProtocolSink;IInternetProtocol *pProtocol;IUnknown *pUnk;DWORD dwFilterFlags;};
struct tagMCI_ANIM_PLAY_PARMS {DWORD dwCallback;DWORD dwFrom;DWORD dwTo;DWORD dwSpeed;};
struct tagMCI_ANIM_STEP_PARMS {DWORD dwCallback;DWORD dwFrames;};
typedef enum _ACL_INFORMATION_CLASS ACL_INFORMATION_CLASS;
typedef enum _EXCEPTION_DISPOSITION EXCEPTION_DISPOSITION;
typedef IMAGE_OPTIONAL_HEADER32 IMAGE_OPTIONAL_HEADER;
typedef LPENUM_SERVICE_STATUSA LPENUM_SERVICE_STATUS;
typedef LPMCI_ANIM_OPEN_PARMSA LPMCI_ANIM_OPEN_PARMS;
typedef MCI_ANIM_RECT_PARMS *LPMCI_ANIM_RECT_PARMS;
typedef LPMCI_OVLY_LOAD_PARMSA LPMCI_OVLY_LOAD_PARMS;
typedef LPMCI_OVLY_OPEN_PARMSA LPMCI_OVLY_OPEN_PARMS;
typedef LPMCI_OVLY_SAVE_PARMSA LPMCI_OVLY_SAVE_PARMS;
typedef LPMCI_VD_ESCAPE_PARMSA LPMCI_VD_ESCAPE_PARMS;
typedef LPMCI_WAVE_OPEN_PARMSA LPMCI_WAVE_OPEN_PARMS;
typedef LPPRINTER_ENUM_VALUESA LPPRINTER_ENUM_VALUES;
typedef LPSERVICE_DESCRIPTIONA LPSERVICE_DESCRIPTION;
typedef LPSERVICE_TABLE_ENTRYA LPSERVICE_TABLE_ENTRY;
typedef LPUNIVERSAL_NAME_INFOA LPUNIVERSAL_NAME_INFO;
typedef LPWSASERVICECLASSINFOA LPWSASERVICECLASSINFO;
typedef MCI_ANIM_WINDOW_PARMSA MCI_ANIM_WINDOW_PARMS;
typedef MCI_OVLY_WINDOW_PARMSA MCI_OVLY_WINDOW_PARMS;
typedef ACL_SIZE_INFORMATION *PACL_SIZE_INFORMATION;
typedef PRINTPROCESSOR_INFO_1A PRINTPROCESSOR_INFO_1;
typedef DWORD *PSECURITY_INFORMATION;
typedef void (__stdcall *RPC_DISPATCH_FUNCTION)(PRPC_MESSAGE Message);
struct _ACL_SIZE_INFORMATION {DWORD AceCount;DWORD AclBytesInUse;DWORD AclBytesFree;};
struct _CHANGER_PRODUCT_DATA {BYTE VendorId[8];BYTE ProductId[16];BYTE Revision[4];BYTE SerialNumber[32];BYTE DeviceType;};
struct _IMAGE_DATA_DIRECTORY {DWORD VirtualAddress;DWORD Size;};
struct _IMAGE_FUNCTION_ENTRY {DWORD StartingAddress;DWORD EndingAddress;DWORD EndOfPrologue;};
struct _NETCONNECTINFOSTRUCT {DWORD cbStructure;DWORD dwFlags;DWORD dwSpeed;DWORD dwDelay;DWORD dwOptDataSize;};
struct _wireSAFEARR_DISPATCH {ULONG Size;IDispatch **apDispatch;};
struct tagOleMenuGroupWidths {LONG width[6];};
typedef enum _COMPUTER_NAME_FORMAT COMPUTER_NAME_FORMAT;
typedef PEXCEPTION_POINTERS LPEXCEPTION_POINTERS;
typedef const CERT_CHAIN_CONTEXT *PCCERT_CHAIN_CONTEXT;
typedef ENCRYPTED_DATA_INFO *PENCRYPTED_DATA_INFO;
typedef void (__stdcall *PFIBER_START_ROUTINE)(LPVOID lpFiberParameter);
typedef PIMAGE_TLS_DIRECTORY32 PIMAGE_TLS_DIRECTORY;
typedef PMCI_ANIM_OPEN_PARMSA PMCI_ANIM_OPEN_PARMS;
typedef MCI_ANIM_RECT_PARMS *PMCI_ANIM_RECT_PARMS;
typedef PMCI_OVLY_LOAD_PARMSA PMCI_OVLY_LOAD_PARMS;
typedef PMCI_OVLY_OPEN_PARMSA PMCI_OVLY_OPEN_PARMS;
typedef PMCI_OVLY_SAVE_PARMSA PMCI_OVLY_SAVE_PARMS;
typedef PMCI_VD_ESCAPE_PARMSA PMCI_VD_ESCAPE_PARMS;
typedef PMCI_WAVE_OPEN_PARMSA PMCI_WAVE_OPEN_PARMS;
typedef PPRINTER_ENUM_VALUESA PPRINTER_ENUM_VALUES;
typedef PVOID PSECURITY_DESCRIPTOR;
typedef PWSASERVICECLASSINFOA PWSASERVICECLASSINFO;
typedef QUERY_SERVICE_CONFIGA QUERY_SERVICE_CONFIG;
typedef DWORD SECURITY_INFORMATION;
typedef FLAGGED_BYTE_BLOB *UP_FLAGGED_BYTE_BLOB;
typedef FLAGGED_WORD_BLOB *UP_FLAGGED_WORD_BLOB;
typedef enum _USER_MARSHAL_CB_TYPE USER_MARSHAL_CB_TYPE;
struct _CERT_DSS_PARAMETERS {CRYPT_UINT_BLOB p;CRYPT_UINT_BLOB q;CRYPT_UINT_BLOB g;};
struct _PSFEATURE_CUSTPAPER {LONG lOrientation;LONG lWidth;LONG lHeight;LONG lWidthOffset;LONG lHeightOffset;};
struct _TAPE_GET_STATISTICS {DWORD Operation;};
struct _wireSAFEARR_UNKNOWN {ULONG Size;IUnknown **apUnknown;};
struct tagMCI_GENERIC_PARMS {DWORD dwCallback;};
struct tagMCI_SEQ_SET_PARMS {DWORD dwCallback;DWORD dwTimeFormat;DWORD dwAudio;DWORD dwTempo;DWORD dwPort;DWORD dwSlave;DWORD dwMaster;DWORD dwOffset;};
struct tagMCI_VD_PLAY_PARMS {DWORD dwCallback;DWORD dwFrom;DWORD dwTo;DWORD dwSpeed;};
struct tagMCI_VD_STEP_PARMS {DWORD dwCallback;DWORD dwFrames;};
typedef ENUM_SERVICE_STATUSA ENUM_SERVICE_STATUS;
typedef IMAGE_TLS_DIRECTORY32 IMAGE_TLS_DIRECTORY;
typedef const PROPSHEETHEADERA *LPCPROPSHEETHEADERA;
typedef const PROPSHEETHEADERW *LPCPROPSHEETHEADERW;
typedef const SCARD_IO_REQUEST *LPCSCARD_IO_REQUEST;
typedef LPMCI_SYSINFO_PARMSA LPMCI_SYSINFO_PARMS;
typedef LPMIXERLINECONTROLSA LPMIXERLINECONTROLS;
typedef LPOUTLINETEXTMETRICA LPOUTLINETEXTMETRIC;
typedef LPSCARD_READERSTATEA LPSCARD_READERSTATE;
typedef LPWSANAMESPACE_INFOA LPWSANAMESPACE_INFO;
typedef MCI_ANIM_OPEN_PARMSA MCI_ANIM_OPEN_PARMS;
typedef MCI_OVLY_LOAD_PARMSA MCI_OVLY_LOAD_PARMS;
typedef MCI_OVLY_OPEN_PARMSA MCI_OVLY_OPEN_PARMS;
typedef MCI_OVLY_SAVE_PARMSA MCI_OVLY_SAVE_PARMS;
typedef MCI_VD_ESCAPE_PARMSA MCI_VD_ESCAPE_PARMS;
typedef MCI_WAVE_OPEN_PARMSA MCI_WAVE_OPEN_PARMS;
typedef void (__stdcall *NDR_NOTIFY2_ROUTINE)(boolean flag);
typedef NPOUTLINETEXTMETRICA NPOUTLINETEXTMETRIC;
typedef ACCESS_ALLOWED_ACE *PACCESS_ALLOWED_ACE;
typedef FLOATING_SAVE_AREA *PFLOATING_SAVE_AREA;
typedef IMAGE_THUNK_DATA32 *PIMAGE_THUNK_DATA32;
typedef IMAGE_THUNK_DATA64 *PIMAGE_THUNK_DATA64;
typedef PRINTER_ENUM_VALUESA PRINTER_ENUM_VALUES;
typedef enum _STORAGE_MEDIA_TYPE *PSTORAGE_MEDIA_TYPE;
typedef SERVICE_DESCRIPTIONA SERVICE_DESCRIPTION;
typedef SERVICE_TABLE_ENTRYA SERVICE_TABLE_ENTRY;
typedef UNIVERSAL_NAME_INFOA UNIVERSAL_NAME_INFO;
typedef WSASERVICECLASSINFOA WSASERVICECLASSINFO;
typedef void (__stdcall *XMIT_HELPER_ROUTINE)(PMIDL_STUB_MESSAGE);
struct _CERT_DH_PARAMETERS {CRYPT_UINT_BLOB p;CRYPT_UINT_BLOB g;};
union _CLIENT_CALL_RETURN {void *Pointer;LONG_PTR Simple;};
struct _EXCEPTION_RECORD32 {DWORD ExceptionCode;DWORD ExceptionFlags;DWORD ExceptionRecord;DWORD ExceptionAddress;DWORD NumberParameters;DWORD ExceptionInformation[15];};
struct _FOCUS_EVENT_RECORD {BOOL bSetFocus;};
struct _IMAGE_THUNK_DATA32 {union _IMAGE_THUNK_DATA32___A667AA66621C320A48F8EE5C4EA8143D u1;};
struct _IMAGE_THUNK_DATA64 {union _IMAGE_THUNK_DATA64___F155400DC8E777EDFF51409B49416578 u1;};
struct _MALLOC_FREE_STRUCT {void *(__stdcall *pfnAllocate)(size_t);void (__stdcall *pfnFree)(void *);};
struct _PERF_COUNTER_BLOCK {DWORD ByteLength;};
struct _remoteMETAFILEPICT {int mm;int xExt;int yExt;userHMETAFILE *hMF;};
struct _userFLAG_STGMEDIUM {int ContextFlags;int fPassOwnership;userSTGMEDIUM Stgmed;};
struct midiproptimediv_tag {DWORD cbStruct;DWORD dwTimeDiv;};
struct midistrmbuffver_tag {DWORD dwVersion;DWORD dwMid;DWORD dwOEMVersion;};
struct tagMCI_RECORD_PARMS {DWORD dwCallback;DWORD dwFrom;DWORD dwTo;};
struct tagMCI_STATUS_PARMS {DWORD dwCallback;DWORD dwReturn;DWORD dwItem;DWORD dwTrack;};
struct tagMINIMIZEDMETRICS {UINT cbSize;int iWidth;int iHorzGap;int iVertGap;int iArrange;};
struct tagRemHMETAFILEPICT {int mm;int xExt;int yExt;unsigned int cbData;byte data[1];};
struct tagVS_FIXEDFILEINFO {DWORD dwSignature;DWORD dwStrucVersion;DWORD dwFileVersionMS;DWORD dwFileVersionLS;DWORD dwProductVersionMS;DWORD dwProductVersionLS;DWORD dwFileFlagsMask;DWORD dwFileFlags;DWORD dwFileOS;DWORD dwFileType;DWORD dwFileSubtype;DWORD dwFileDateMS;DWORD dwFileDateLS;};
typedef userSTGMEDIUM *wireASYNC_STGMEDIUM;
typedef enum _FINDEX_INFO_LEVELS FINDEX_INFO_LEVELS;
typedef enum _JOBOBJECTINFOCLASS JOBOBJECTINFOCLASS;
typedef LPCONNECTDLGSTRUCTA LPCONNECTDLGSTRUCT;
typedef PRTL_CRITICAL_SECTION LPCRITICAL_SECTION;
typedef LPDATATYPES_INFO_1A LPDATATYPES_INFO_1;
typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEA;
typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEW;
typedef void (__stdcall *LPHANDLER_FUNCTION)(DWORD dwControl);
typedef LPNONCLIENTMETRICSA LPNONCLIENTMETRICS;
typedef LPPRINTER_DEFAULTSA LPPRINTER_DEFAULTS;
typedef LPREMOTE_NAME_INFOA LPREMOTE_NAME_INFO;
typedef SCARD_T0_REQUEST *LPSCARD_T0_REQUEST;
typedef SCARD_T1_REQUEST *LPSCARD_T1_REQUEST;
typedef LPSHELLEXECUTEINFOA LPSHELLEXECUTEINFO;
typedef enum _WSAESETSERVICEOP *LPWSAESETSERVICEOP;
typedef LPWSAPROTOCOL_INFOA LPWSAPROTOCOL_INFO;
typedef ACCESS_DENIED_ACE *PACCESS_DENIED_ACE;
typedef PMCI_SYSINFO_PARMSA PMCI_SYSINFO_PARMS;
typedef PMIXERLINECONTROLSA PMIXERLINECONTROLS;
typedef POUTLINETEXTMETRICA POUTLINETEXTMETRIC;
typedef PSCARD_READERSTATEA PSCARD_READERSTATE;
typedef PWSANAMESPACE_INFOA PWSANAMESPACE_INFO;
typedef I_RPC_HANDLE RPC_BINDING_HANDLE;
typedef void (*RPC_SETFILTER_FUNC)(RPCLT_PDU_FILTER_FUNC pfnFilter);
typedef enum _CM_ERROR_CONTROL_TYPE SERVICE_ERROR_TYPE;
typedef enum _STORAGE_MEDIA_TYPE STORAGE_MEDIA_TYPE;
typedef void (__stdcall *WORKERCALLBACKFUNC)(PVOID);
struct _CERT_TRUST_STATUS {DWORD dwErrorStatus;DWORD dwInfoStatus;};
struct _CMSG_RC2_AUX_INFO {DWORD cbSize;DWORD dwBitLen;};
struct _CMSG_RC4_AUX_INFO {DWORD cbSize;DWORD dwBitLen;};
struct _FLAGGED_BYTE_BLOB {unsigned int fFlags;unsigned int clSize;byte abData[1];};
struct _GRADIENT_TRIANGLE {ULONG Vertex1;ULONG Vertex2;ULONG Vertex3;};
struct _MENU_EVENT_RECORD {UINT dwCommandId;};
struct _userHMETAFILEPICT {int fContext;union _userHMETAFILEPICT____MIDL_IWinTypes_0005 u;};
struct tagLOCALESIGNATURE {DWORD lsUsb[4];DWORD lsCsbDefault[2];DWORD lsCsbSupported[2];};
struct tagRECONVERTSTRING {DWORD dwSize;DWORD dwVersion;DWORD dwStrLen;DWORD dwStrOffset;DWORD dwCompStrLen;DWORD dwCompStrOffset;DWORD dwTargetStrLen;DWORD dwTargetStrOffset;};
struct tagRemHENHMETAFILE {unsigned int cbData;byte data[1];};
struct tagVersionedStream {GUID guidVersion;IStream *pStream;};
typedef userFLAG_STGMEDIUM *wireFLAG_STGMEDIUM;
typedef enum _FINDEX_SEARCH_OPS FINDEX_SEARCH_OPS;
typedef const PROPSHEETPAGEA *LPCPROPSHEETPAGEA;
typedef const PROPSHEETPAGEW *LPCPROPSHEETPAGEW;
typedef LPDLGITEMTEMPLATEA LPDLGITEMTEMPLATE;
typedef LPENUMLOGFONTEXDVA LPENUMLOGFONTEXDV;
typedef LPHW_PROFILE_INFOA LPHW_PROFILE_INFO;
typedef LPIMEMENUITEMINFOA LPIMEMENUITEMINFO;
typedef LPMDICREATESTRUCTA LPMDICREATESTRUCT;
typedef LPOPENCARDNAME_EXA LPOPENCARDNAME_EX;
typedef LPOSVERSIONINFOEXA LPOSVERSIONINFOEX;
typedef LPPROVIDOR_INFO_1A LPPROVIDOR_INFO_1;
typedef LPPROVIDOR_INFO_2A LPPROVIDOR_INFO_2;
typedef LPWIN32_FIND_DATAA LPWIN32_FIND_DATA;
typedef WINDOWPLACEMENT *LPWINDOWPLACEMENT;
typedef MCI_SYSINFO_PARMSA MCI_SYSINFO_PARMS;
typedef MIXERLINECONTROLSA MIXERLINECONTROLS;
typedef NPIMEMENUITEMINFOA NPIMEMENUITEMINFO;
typedef OUTLINETEXTMETRICA OUTLINETEXTMETRIC;
typedef enum _AUDIT_EVENT_TYPE *PAUDIT_EVENT_TYPE;
typedef WORD *PBAD_TRACK_NUMBER;
typedef PRTL_CRITICAL_SECTION PCRITICAL_SECTION;
typedef PDATATYPES_INFO_1A PDATATYPES_INFO_1;
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEA;
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEW;
typedef EXCEPTION_RECORD *PEXCEPTION_RECORD;
typedef IMAGE_AUX_SYMBOL *PIMAGE_AUX_SYMBOL;
typedef IMAGE_LINENUMBER *PIMAGE_LINENUMBER;
typedef PIMAGE_NT_HEADERS32 PIMAGE_NT_HEADERS;
typedef IMAGE_RELOCATION *PIMAGE_RELOCATION;
typedef PIMAGE_THUNK_DATA32 PIMAGE_THUNK_DATA;
typedef PNONCLIENTMETRICSA PNONCLIENTMETRICS;
typedef PPRINTER_DEFAULTSA PPRINTER_DEFAULTS;
typedef SCARD_T0_REQUEST *PSCARD_T0_REQUEST;
typedef SCARD_T1_REQUEST *PSCARD_T1_REQUEST;
typedef enum _STORAGE_BUS_TYPE *PSTORAGE_BUS_TYPE;
typedef SYSTEM_ALARM_ACE *PSYSTEM_ALARM_ACE;
typedef SYSTEM_AUDIT_ACE *PSYSTEM_AUDIT_ACE;
typedef enum _WSAESETSERVICEOP *PWSAESETSERVICEOP;
typedef I_RPC_HANDLE *RPC_EP_INQ_HANDLE;
typedef SCARD_READERSTATEA SCARD_READERSTATE;
typedef enum _CM_SERVICE_LOAD_TYPE SERVICE_LOAD_TYPE;
typedef enum _CM_SERVICE_NODE_TYPE SERVICE_NODE_TYPE;
typedef WSANAMESPACE_INFOA WSANAMESPACE_INFO;
struct _FIND_NAME_BUFFER {UCHAR length;UCHAR access_control;UCHAR frame_control;UCHAR destination_addr[6];UCHAR source_addr[6];UCHAR routing_info[18];};
struct _HISTOGRAM_BUCKET {DWORD Reads;DWORD Writes;};
struct _PSFEATURE_OUTPUT {BOOL bPageIndependent;BOOL bSetPageDevice;};
struct _SCARD_IO_REQUEST {DWORD dwProtocol;DWORD cbPciLength;};
struct _WSAPROTOCOLCHAIN {int ChainLen;DWORD ChainEntries[7];};
struct _userHENHMETAFILE {int fContext;union _userHENHMETAFILE____MIDL_IWinTypes_0006 u;};
struct midiproptempo_tag {DWORD cbStruct;DWORD dwTempo;};
struct tagCBT_CREATEWNDA {struct tagCREATESTRUCTA *lpcs;HWND hwndInsertAfter;};
struct tagCBT_CREATEWNDW {struct tagCREATESTRUCTW *lpcs;HWND hwndInsertAfter;};
struct tagDRAWTEXTPARAMS {UINT cbSize;int iTabLength;int iLeftMargin;int iRightMargin;UINT uiLengthDrawn;};
struct tagMCI_PLAY_PARMS {DWORD dwCallback;DWORD dwFrom;DWORD dwTo;};
struct tagMCI_SEEK_PARMS {DWORD dwCallback;DWORD dwTo;};
struct tagPRINTPAGERANGE {DWORD nFromPage;DWORD nToPage;};
typedef userHMETAFILEPICT *wireHMETAFILEPICT;
typedef enum _AUDIT_EVENT_TYPE AUDIT_EVENT_TYPE;
typedef WORD BAD_TRACK_NUMBER;
typedef enum __MIDL_IBindStatusCallback_0005 BINDINFO_OPTIONS;
typedef CONNECTDLGSTRUCTA CONNECTDLGSTRUCT;
typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;
typedef DATATYPES_INFO_1A DATATYPES_INFO_1;
typedef HANDLE HCERTCHAINENGINE;
typedef IMAGE_NT_HEADERS32 IMAGE_NT_HEADERS;
typedef IMAGE_THUNK_DATA32 IMAGE_THUNK_DATA;
typedef const MENUITEMINFOA *LPCMENUITEMINFOA;
typedef const MENUITEMINFOW *LPCMENUITEMINFOW;
typedef LPDISPLAY_DEVICEA LPDISPLAY_DEVICE;
typedef LPENUMTEXTMETRICA LPENUMTEXTMETRIC;
typedef LPMCI_INFO_PARMSA LPMCI_INFO_PARMS;
typedef LPMCI_LOAD_PARMSA LPMCI_LOAD_PARMS;
typedef LPMCI_OPEN_PARMSA LPMCI_OPEN_PARMS;
typedef LPMCI_SAVE_PARMSA LPMCI_SAVE_PARMS;
typedef LPMONITOR_INFO_1A LPMONITOR_INFO_1;
typedef LPMONITOR_INFO_2A LPMONITOR_INFO_2;
typedef LPPRINTER_INFO_1A LPPRINTER_INFO_1;
typedef LPPRINTER_INFO_2A LPPRINTER_INFO_2;
typedef LPPRINTER_INFO_4A LPPRINTER_INFO_4;
typedef LPPRINTER_INFO_5A LPPRINTER_INFO_5;
typedef LPPRINTER_INFO_7A LPPRINTER_INFO_7;
typedef LPPRINTER_INFO_8A LPPRINTER_INFO_8;
typedef LPPRINTER_INFO_9A LPPRINTER_INFO_9;
typedef LPSHFILEOPSTRUCTA LPSHFILEOPSTRUCT;
typedef enum _WSAEcomparator *LPWSAECOMPARATOR;
typedef LPWSANSCLASSINFOA LPWSANSCLASSINFO;
typedef NONCLIENTMETRICSA NONCLIENTMETRICS;
typedef const CRYPT_OID_INFO *PCCRYPT_OID_INFO;
typedef PDLGITEMTEMPLATEA PDLGITEMTEMPLATE;
typedef PENUMLOGFONTEXDVA PENUMLOGFONTEXDV;
typedef GENERIC_MAPPING *PGENERIC_MAPPING;
typedef PIMEMENUITEMINFOA PIMEMENUITEMINFO;
typedef POPENCARDNAME_EXA POPENCARDNAME_EX;
typedef POSVERSIONINFOEXA POSVERSIONINFOEX;
typedef PPROVIDOR_INFO_1A PPROVIDOR_INFO_1;
typedef PPROVIDOR_INFO_2A PPROVIDOR_INFO_2;
typedef PRINTER_DEFAULTSA PRINTER_DEFAULTS;
typedef PWIN32_FIND_DATAA PWIN32_FIND_DATA;
typedef WINDOWPLACEMENT *PWINDOWPLACEMENT;
typedef REMOTE_NAME_INFOA REMOTE_NAME_INFO;
typedef void *__stdcall RPC_CLIENT_ALLOC(size_t Size);
typedef SHELLEXECUTEINFOA SHELLEXECUTEINFO;
typedef enum _STORAGE_BUS_TYPE STORAGE_BUS_TYPE;
typedef enum _WSAESETSERVICEOP WSAESETSERVICEOP;
typedef WSAPROTOCOL_INFOA WSAPROTOCOL_INFO;
struct _PACKEDEVENTINFO {DWORD ulSize;DWORD ulNumEventsForLogFile;DWORD ulOffsets[];};
struct _PRINTER_INFO_8A {LPDEVMODEA pDevMode;};
struct _PRINTER_INFO_8W {LPDEVMODEW pDevMode;};
struct _PRINTER_INFO_9A {LPDEVMODEA pDevMode;};
struct _PRINTER_INFO_9W {LPDEVMODEW pDevMode;};
struct _RemotableHandle {int fContext;union _RemotableHandle____MIDL_IWinTypes_0009 u;};
struct tagANIMATIONINFO {UINT cbSize;int iMinAnimate;};
struct tagCANDIDATELIST {DWORD dwSize;DWORD dwStyle;DWORD dwCount;DWORD dwSelection;DWORD dwPageStart;DWORD dwPageSize;DWORD dwOffset[1];};
struct tagENHMETARECORD {DWORD iType;DWORD nSize;DWORD dParm[1];};
struct tagFONTSIGNATURE {DWORD fsUsb[4];DWORD fsCsb[2];};
struct tagMCI_SET_PARMS {DWORD dwCallback;DWORD dwTimeFormat;DWORD dwAudio;};
typedef userHENHMETAFILE *wireHENHMETAFILE;
typedef const CRYPT_OID_INFO CCRYPT_OID_INFO;
typedef enum tagDCOM_CALL_STATE DCOM_CALL_STATE;
typedef ENUMLOGFONTEXDVA ENUMLOGFONTEXDV;
typedef DWORD EXECUTION_STATE;
typedef HW_PROFILE_INFOA HW_PROFILE_INFO;
typedef IMEMENUITEMINFOA IMEMENUITEMINFO;
typedef LPADDJOB_INFO_1A LPADDJOB_INFO_1;
typedef LPCBT_CREATEWNDA LPCBT_CREATEWND;
typedef const DLGTEMPLATE *LPCDLGTEMPLATEA;
typedef const DLGTEMPLATE *LPCDLGTEMPLATEW;
typedef LPCMENUITEMINFOA LPCMENUITEMINFO;
typedef const WAVEFORMATEX *LPCWAVEFORMATEX;
typedef LPDISCDLGSTRUCTA LPDISCDLGSTRUCT;
typedef LPDRIVER_INFO_1A LPDRIVER_INFO_1;
typedef LPDRIVER_INFO_2A LPDRIVER_INFO_2;
typedef LPDRIVER_INFO_3A LPDRIVER_INFO_3;
typedef LPDRIVER_INFO_4A LPDRIVER_INFO_4;
typedef LPDRIVER_INFO_5A LPDRIVER_INFO_5;
typedef LPDRIVER_INFO_6A LPDRIVER_INFO_6;
typedef LPENUMLOGFONTEXA LPENUMLOGFONTEX;
typedef LPLOGCOLORSPACEA LPLOGCOLORSPACE;
typedef PVOID LPMENUTEMPLATEA;
typedef PVOID LPMENUTEMPLATEW;
typedef LPMONITORINFOEXA LPMONITORINFOEX;
typedef LPNEWTEXTMETRICA LPNEWTEXTMETRIC;
typedef OLESTREAMVTBL *LPOLESTREAMVTBL;
typedef LPOSVERSIONINFOA LPOSVERSIONINFO;
typedef LPSHNAMEMAPPINGA LPSHNAMEMAPPING;
typedef MDICREATESTRUCTA MDICREATESTRUCT;
typedef NEWTEXTMETRICEXA NEWTEXTMETRICEX;
typedef NPNEWTEXTMETRICA NPNEWTEXTMETRIC;
typedef OPENCARDNAME_EXA OPENCARDNAME_EX;
typedef OSVERSIONINFOEXA OSVERSIONINFOEX;
typedef PDISPLAY_DEVICEA PDISPLAY_DEVICE;
typedef PENUMTEXTMETRICA PENUMTEXTMETRIC;
typedef PMCI_LOAD_PARMSA PMCI_LOAD_PARMS;
typedef PMCI_OPEN_PARMSA PMCI_OPEN_PARMS;
typedef PMCI_SAVE_PARMSA PMCI_SAVE_PARMS;
typedef const MIDL_STUB_DESC *PMIDL_STUB_DESC;
typedef PMONITOR_INFO_1A PMONITOR_INFO_1;
typedef PMONITOR_INFO_2A PMONITOR_INFO_2;
typedef PNOTIFYICONDATAA PNOTIFYICONDATA;
typedef PPRINTER_INFO_1A PPRINTER_INFO_1;
typedef PPRINTER_INFO_2A PPRINTER_INFO_2;
typedef PPRINTER_INFO_4A PPRINTER_INFO_4;
typedef PPRINTER_INFO_5A PPRINTER_INFO_5;
typedef PPRINTER_INFO_7A PPRINTER_INFO_7;
typedef PPRINTER_INFO_8A PPRINTER_INFO_8;
typedef PPRINTER_INFO_9A PPRINTER_INFO_9;
typedef WORD PRINTEROP_FLAGS;
typedef PROVIDOR_INFO_1A PROVIDOR_INFO_1;
typedef PROVIDOR_INFO_2A PROVIDOR_INFO_2;
typedef ULARGE_INTEGER *PULARGE_INTEGER;
typedef enum _WSAEcomparator *PWSAECOMPARATOR;
typedef PWSANSCLASSINFOA PWSANSCLASSINFO;
typedef enum _RPC_ASYNC_EVENT RPC_ASYNC_EVENT;
typedef RPC_STATUS (*RPC_BLOCKING_FN)(void *hWnd, void *Context, void *hSyncEvent);
typedef WIN32_FIND_DATAA WIN32_FIND_DATA;
struct _CRYPT_URL_INFO {DWORD cbSize;};
struct _FAT_STATISTICS {DWORD CreateHits;DWORD SuccessfulCreates;DWORD FailedCreates;DWORD NonCachedReads;DWORD NonCachedReadBytes;DWORD NonCachedWrites;DWORD NonCachedWriteBytes;DWORD NonCachedDiskReads;DWORD NonCachedDiskWrites;};
struct _PRINTER_INFO_3 {PSECURITY_DESCRIPTOR pSecurityDescriptor;};
struct _PRINTER_INFO_6 {DWORD dwStatus;};
struct _SCONTEXT_QUEUE {unsigned int NumberOfObjects;NDR_SCONTEXT *ArrayOfObjects;};
struct _SERVICE_STATUS {DWORD dwServiceType;DWORD dwCurrentState;DWORD dwControlsAccepted;DWORD dwWin32ExitCode;DWORD dwServiceSpecificExitCode;DWORD dwCheckPoint;DWORD dwWaitHint;};
struct _SESSION_BUFFER {UCHAR lsn;UCHAR state;UCHAR local_name[16];UCHAR remote_name[16];UCHAR rcvs_outstanding;UCHAR sends_outstanding;};
struct _SESSION_HEADER {UCHAR sess_name;UCHAR num_sess;UCHAR rcv_dg_outstanding;UCHAR rcv_any_outstanding;};
struct tagHELPWININFOA {int wStructSize;int x;int y;int dx;int dy;int wMax;CHAR rgchMember[2];};
struct tagICEXYZTRIPLE {CIEXYZ ciexyzRed;CIEXYZ ciexyzGreen;CIEXYZ ciexyzBlue;};
struct tagPALETTEENTRY {BYTE peRed;BYTE peGreen;BYTE peBlue;BYTE peFlags;};
typedef DISPLAY_DEVICEA DISPLAY_DEVICE;
typedef ENUMTEXTMETRICA ENUMTEXTMETRIC;
typedef LPRECT LPBORDERWIDTHS;
typedef LPCDLGTEMPLATEA LPCDLGTEMPLATE;
typedef CIEXYZTRIPLE *LPCIEXYZTRIPLE;
typedef LPCREATESTRUCTA LPCREATESTRUCT;
typedef DLGTEMPLATE *LPDLGTEMPLATEA;
typedef DLGTEMPLATE *LPDLGTEMPLATEW;
typedef LPHIGHCONTRASTA LPHIGHCONTRAST;
typedef LPMENUITEMINFOA LPMENUITEMINFO;
typedef LPMENUTEMPLATEA LPMENUTEMPLATE;
typedef LPMIXERCONTROLA LPMIXERCONTROL;
typedef LPMSGBOXPARAMSA LPMSGBOXPARAMS;
typedef LPMULTIKEYHELPA LPMULTIKEYHELP;
typedef LPOPENCARDNAMEA LPOPENCARDNAME;
typedef LPOPENFILENAMEA LPOPENFILENAME;
typedef LPPAGESETUPDLGA LPPAGESETUPDLG;
typedef LPREGISTERWORDA LPREGISTERWORD;
typedef MCI_INFO_PARMSA MCI_INFO_PARMS;
typedef MCI_LOAD_PARMSA MCI_LOAD_PARMS;
typedef MCI_OPEN_PARMSA MCI_OPEN_PARMS;
typedef MCI_SAVE_PARMSA MCI_SAVE_PARMS;
typedef MONITOR_INFO_1A MONITOR_INFO_1;
typedef MONITOR_INFO_2A MONITOR_INFO_2;
typedef void (__stdcall *MSGBOXCALLBACK)(LPHELPINFO lpHelpInfo);
typedef NOTIFYICONDATAA NOTIFYICONDATA;
typedef NPREGISTERWORDA NPREGISTERWORD;
typedef PADDJOB_INFO_1A PADDJOB_INFO_1;
typedef const CERT_CONTEXT *PCCERT_CONTEXT;
typedef PDRIVER_INFO_1A PDRIVER_INFO_1;
typedef PDRIVER_INFO_2A PDRIVER_INFO_2;
typedef PDRIVER_INFO_3A PDRIVER_INFO_3;
typedef PDRIVER_INFO_4A PDRIVER_INFO_4;
typedef PDRIVER_INFO_5A PDRIVER_INFO_5;
typedef PDRIVER_INFO_6A PDRIVER_INFO_6;
typedef void *(__stdcall *PFN_CMSG_ALLOC)(size_t cb);
typedef void (__stdcall *PFN_CRYPT_FREE)(LPVOID pv);
typedef LARGE_INTEGER *PLARGE_INTEGER;
typedef PNEWTEXTMETRICA PNEWTEXTMETRIC;
typedef POSVERSIONINFOA POSVERSIONINFO;
typedef PRINTER_INFO_1A PRINTER_INFO_1;
typedef PRINTER_INFO_2A PRINTER_INFO_2;
typedef PRINTER_INFO_4A PRINTER_INFO_4;
typedef PRINTER_INFO_5A PRINTER_INFO_5;
typedef PRINTER_INFO_7A PRINTER_INFO_7;
typedef PRINTER_INFO_8A PRINTER_INFO_8;
typedef PRINTER_INFO_9A PRINTER_INFO_9;
typedef RPCOLEMESSAGE *PRPCOLEMESSAGE;
typedef enum _SC_ACTION_TYPE SC_ACTION_TYPE;
typedef enum _SC_STATUS_TYPE SC_STATUS_TYPE;
typedef SHFILEOPSTRUCTA SHFILEOPSTRUCT;
typedef enum _WSAEcomparator WSAECOMPARATOR;
typedef WSANSCLASSINFOA WSANSCLASSINFO;
struct _BLENDFUNCTION {BYTE BlendOp;BYTE BlendFlags;BYTE SourceConstantAlpha;BYTE AlphaFormat;};
struct _BYTE_SIZEDARR {unsigned int clSize;byte *pData;};
struct _GDI_NONREMOTE {int fContext;union _GDI_NONREMOTE____MIDL_IWinTypes_0002 u;};
struct _GRADIENT_RECT {ULONG UpperLeft;ULONG LowerRight;};
struct _SHQUERYRBINFO {DWORD cbSize;__int64 i64Size;__int64 i64NumItems;};
struct _finddatai64_t {unsigned int attrib;time_t time_create;time_t time_access;time_t time_write;__int64 size;char name[260];};
struct _userHMETAFILE {int fContext;union _userHMETAFILE____MIDL_IWinTypes_0004 u;};
struct tagCURSORSHAPE {int xHotSpot;int yHotSpot;int cx;int cy;int cbWidth;BYTE Planes;BYTE BitsPixel;};
struct tagHANDLETABLE {HGDIOBJ objectHandle[1];};
struct tagKERNINGPAIR {WORD wFirst;WORD wSecond;int iKernAmount;};
struct tagRemHPALETTE {unsigned int cbData;byte data[1];};
struct tagSTYLESTRUCT {DWORD styleOld;DWORD styleNew;};
typedef userCLIPFORMAT *wireCLIPFORMAT;
typedef wireSAFEARRAY *wirePSAFEARRAY;
typedef ADDJOB_INFO_1A ADDJOB_INFO_1;
typedef CBT_CREATEWNDA CBT_CREATEWND;
typedef DISCDLGSTRUCTA DISCDLGSTRUCT;
typedef DRIVER_INFO_1A DRIVER_INFO_1;
typedef DRIVER_INFO_2A DRIVER_INFO_2;
typedef DRIVER_INFO_3A DRIVER_INFO_3;
typedef DRIVER_INFO_4A DRIVER_INFO_4;
typedef DRIVER_INFO_5A DRIVER_INFO_5;
typedef DRIVER_INFO_6A DRIVER_INFO_6;
typedef ENUMLOGFONTEXA ENUMLOGFONTEX;
typedef LONG LCSGAMUTMATCH;
typedef LOGCOLORSPACEA LOGCOLORSPACE;
typedef LPCHOOSECOLORA LPCHOOSECOLOR;
typedef const SCROLLINFO *LPCSCROLLINFO;
typedef LPCURRENCYFMTA LPCURRENCYFMT;
typedef LPDLGTEMPLATEA LPDLGTEMPLATE;
typedef LPENUMLOGFONTA LPENUMLOGFONT;
typedef LPFINDREPLACEA LPFINDREPLACE;
typedef LPFORM_INFO_1A LPFORM_INFO_1;
typedef LPGCP_RESULTSA LPGCP_RESULTS;
typedef LPHELPWININFOA LPHELPWININFO;
typedef LPICONMETRICSA LPICONMETRICS;
typedef LPMIDIOUTCAPSA LPMIDIOUTCAPS;
typedef LPNETRESOURCEA LPNETRESOURCE;
typedef LPPORT_INFO_1A LPPORT_INFO_1;
typedef LPPORT_INFO_2A LPPORT_INFO_2;
typedef LPPORT_INFO_3A LPPORT_INFO_3;
typedef LPSOUNDSENTRYA LPSOUNDSENTRY;
typedef LPSTARTUPINFOA LPSTARTUPINFO;
typedef LPWAVEOUTCAPSA LPWAVEOUTCAPS;
typedef LPWSAQUERYSETA LPWSAQUERYSET;
typedef MONITORINFOEXA MONITORINFOEX;
typedef NEWTEXTMETRICA NEWTEXTMETRIC;
typedef NPMIDIOUTCAPSA NPMIDIOUTCAPS;
typedef NPWAVEOUTCAPSA NPWAVEOUTCAPS;
typedef enum tagOLEGETMONIKER OLEGETMONIKER;
typedef enum tagOLEVERBATTRIB OLEVERBATTRIB;
typedef OSVERSIONINFOA OSVERSIONINFO;
typedef PVOID PACCESS_TOKEN;
typedef const CRL_CONTEXT *PCCRL_CONTEXT;
typedef const CTL_CONTEXT *PCCTL_CONTEXT;
typedef enum _ELEMENT_TYPE *PELEMENT_TYPE;
typedef IMAGE_SYMBOL *PIMAGE_SYMBOL;
typedef PMIXERCONTROLA PMIXERCONTROL;
typedef PMONHSZSTRUCTA PMONHSZSTRUCT;
typedef PMSGBOXPARAMSA PMSGBOXPARAMS;
typedef PMULTIKEYHELPA PMULTIKEYHELP;
typedef DWORD __stdcall PM_CLOSE_PROC();
typedef POPENCARDNAMEA POPENCARDNAME;
typedef QUOTA_LIMITS *PQUOTA_LIMITS;
typedef PREGISTERWORDA PREGISTERWORD;
typedef enum _SID_NAME_USE *PSID_NAME_USE;
typedef SHNAMEMAPPINGA SHNAMEMAPPING;
typedef DWORD_BLOB *UP_DWORD_BLOB;
typedef enum tagUSERCLASSTYPE USERCLASSTYPE;
struct _COMMTIMEOUTS {DWORD ReadIntervalTimeout;DWORD ReadTotalTimeoutMultiplier;DWORD ReadTotalTimeoutConstant;DWORD WriteTotalTimeoutMultiplier;DWORD WriteTotalTimeoutConstant;};
struct _userHPALETTE {int fContext;union _userHPALETTE____MIDL_IWinTypes_0008 u;};
struct joyinfoex_tag {DWORD dwSize;DWORD dwFlags;DWORD dwXpos;DWORD dwYpos;DWORD dwZpos;DWORD dwRpos;DWORD dwUpos;DWORD dwVpos;DWORD dwButtons;DWORD dwButtonNumber;DWORD dwPOV;DWORD dwReserved1;DWORD dwReserved2;};
struct midievent_tag {DWORD dwDeltaTime;DWORD dwStreamID;DWORD dwEvent;DWORD dwParms[1];};
struct tagCSPLATFORM {DWORD dwPlatformId;DWORD dwVersionHi;DWORD dwVersionLo;DWORD dwProcessorArch;};
struct tagMINMAXINFO {POINT ptReserved;POINT ptMaxSize;POINT ptMaxPosition;POINT ptMinTrackSize;POINT ptMaxTrackSize;};
struct tagRemHBITMAP {unsigned int cbData;byte data[1];};
struct tagRemHGLOBAL {int fNullHGlobal;unsigned int cbData;byte data[1];};
struct tagSCROLLINFO {UINT cbSize;UINT fMask;int nMin;int nMax;UINT nPage;int nPos;int nTrackPos;};
typedef userHMETAFILE *wireHMETAFILE;
typedef userSTGMEDIUM *wireSTGMEDIUM;
typedef RECT BORDERWIDTHS;
typedef enum tagCOWAIT_FLAGS COWAIT_FLAGS;
typedef CREATESTRUCTA CREATESTRUCT;
typedef enum tagDISCARDCACHE DISCARDCACHE;
typedef enum _ELEMENT_TYPE ELEMENT_TYPE;
typedef WORD FILEOP_FLAGS;
typedef HANDLE GLOBALHANDLE;
typedef HIGHCONTRASTA HIGHCONTRAST;
typedef enum _C9C41CE7F7AB140BE1C872069B92FC11 LATENCY_TIME;
struct LIST_ENTRY32 {DWORD Flink;DWORD Blink;};
struct LIST_ENTRY64 {ULONGLONG Flink;ULONGLONG Blink;};
typedef LPCHOOSEFONTA LPCHOOSEFONT;
typedef LPDOC_INFO_1A LPDOC_INFO_1;
typedef LPDOC_INFO_2A LPDOC_INFO_2;
typedef LPDOC_INFO_3A LPDOC_INFO_3;
typedef LPEXTLOGFONTA LPEXTLOGFONT;
typedef LPJOB_INFO_1A LPJOB_INFO_1;
typedef LPJOB_INFO_2A LPJOB_INFO_2;
typedef LPMIDIINCAPSA LPMIDIINCAPS;
typedef LPOFNOTIFYEXA LPOFNOTIFYEX;
typedef WORD *LPPATCHARRAY;
typedef LPPRINTDLGEXA LPPRINTDLGEX;
typedef LPSERIALKEYSA LPSERIALKEYS;
typedef LPTEXTMETRICA LPTEXTMETRIC;
typedef VARIANT *LPVARIANTARG;
typedef LPWAVEINCAPSA LPWAVEINCAPS;
typedef LPWNDCLASSEXA LPWNDCLASSEX;
typedef MENUITEMINFOA MENUITEMINFO;
typedef MENUTEMPLATEA MENUTEMPLATE;
typedef MIXERCONTROLA MIXERCONTROL;
typedef MONHSZSTRUCTA MONHSZSTRUCT;
typedef MSGBOXPARAMSA MSGBOXPARAMS;
typedef MULTIKEYHELPA MULTIKEYHELP;
typedef NPEXTLOGFONTA NPEXTLOGFONT;
typedef NPMIDIINCAPSA NPMIDIINCAPS;
typedef NPTEXTMETRICA NPTEXTMETRIC;
typedef NPWAVEINCAPSA NPWAVEINCAPS;
typedef NPWNDCLASSEXA NPWNDCLASSEX;
typedef OPENCARDNAMEA OPENCARDNAME;
typedef OPENFILENAMEA OPENFILENAME;
typedef PAGESETUPDLGA PAGESETUPDLG;
typedef CONVCONTEXT *PCONVCONTEXT;
typedef PFORM_INFO_1A PFORM_INFO_1;
typedef HANDLE *PHCRYPTASYNC;
typedef PHELPWININFOA PHELPWININFO;
typedef PICONMETRICSA PICONMETRICS;
typedef IO_COUNTERS *PIO_COUNTERS;
typedef PMIDIOUTCAPSA PMIDIOUTCAPS;
typedef PPORT_INFO_1A PPORT_INFO_1;
typedef PPORT_INFO_2A PPORT_INFO_2;
typedef PPORT_INFO_3A PPORT_INFO_3;
typedef WORD PROPVAR_PAD1;
typedef WORD PROPVAR_PAD2;
typedef WORD PROPVAR_PAD3;
typedef PWAVEOUTCAPSA PWAVEOUTCAPS;
typedef PWSAQUERYSETA PWSAQUERYSET;
typedef REGISTERWORDA REGISTERWORD;
typedef ULONG_PTR SCARDCONTEXT;
typedef enum _SC_ENUM_TYPE SC_ENUM_TYPE;
typedef enum _SID_NAME_USE SID_NAME_USE;
typedef enum tagSTDMSHLFLAGS STDMSHLFLAGS;
typedef BYTE_BLOB *UP_BYTE_BLOB;
typedef WORD_BLOB *UP_WORD_BLOB;
typedef enum __MIDL_IBindStatusCallback_0004 URL_ENCODING;
typedef enum tagXMLEMEM_TYPE XMLELEM_TYPE;
struct _AFPROTOCOLS {INT iAddressFamily;INT iProtocol;};
struct _IO_COUNTERS {ULONGLONG ReadOperationCount;ULONGLONG WriteOperationCount;ULONGLONG OtherOperationCount;ULONGLONG ReadTransferCount;ULONGLONG WriteTransferCount;ULONGLONG OtherTransferCount;};
struct _NAME_BUFFER {UCHAR name[16];UCHAR name_num;UCHAR name_flags;};
struct _NSS_CONTROL {DWORD code;DWORD param;};
struct _tagDATAINFO {ULONG ulTotalSize;ULONG ulavrPacketSize;ULONG ulConnectSpeed;ULONG ulProcessorSpeed;};
struct _userHBITMAP {int fContext;union _userHBITMAP____MIDL_IWinTypes_0007 u;};
struct _userHGLOBAL {int fContext;union _userHGLOBAL____MIDL_IWinTypes_0003 u;};
struct tagABORTPATH {EMR emr;};
struct tagBIND_OPTS {DWORD cbStruct;DWORD grfFlags;DWORD grfMode;DWORD dwTickCountDeadline;};
struct tagEMRFORMAT {DWORD dSignature;DWORD nVersion;DWORD cbData;DWORD offData;};
struct tagRGBTRIPLE {BYTE rgbtBlue;BYTE rgbtGreen;BYTE rgbtRed;};
struct timecaps_tag {UINT wPeriodMin;UINT wPeriodMax;};
typedef userHPALETTE *wireHPALETTE;
typedef DWORD ACCESS_MASK;
typedef CHOOSECOLORA CHOOSECOLOR;
typedef CURRENCYFMTA CURRENCYFMT;
typedef enum tagDOMNodeType DOMNodeType;
typedef ENUMLOGFONTA ENUMLOGFONT;
typedef FINDREPLACEA FINDREPLACE;
typedef FORM_INFO_1A FORM_INFO_1;
typedef GCP_RESULTSA GCP_RESULTS;
typedef HANDLE HCRYPTASYNC;
typedef HELPWININFOA HELPWININFO;
typedef ICONMETRICSA ICONMETRICS;
typedef HANDLE LOCALHANDLE;
typedef const MENUINFO *LPCMENUINFO;
typedef const MMCKINFO *LPCMMCKINFO;
typedef const MMIOINFO *LPCMMIOINFO;
typedef HMIDISTRM *LPHMIDISTRM;
typedef HMIXEROBJ *LPHMIXEROBJ;
typedef PLDT_ENTRY LPLDT_ENTRY;
typedef LPMIXERCAPSA LPMIXERCAPS;
typedef LPMIXERLINEA LPMIXERLINE;
typedef LPNUMBERFMTA LPNUMBERFMT;
typedef SAFEARRAY *LPSAFEARRAY;
typedef SC_HANDLE *LPSC_HANDLE;
typedef TPMPARAMS *LPTPMPARAMS;
typedef UINT MCIDEVICEID;
typedef MIDIOUTCAPSA MIDIOUTCAPS;
typedef NETRESOURCEA NETRESOURCE;
typedef enum _tagOIBDG_FLAGS OIBDG_FLAGS;
typedef enum tagOLELINKBIND OLELINKBIND;
typedef ACE_HEADER *PACE_HEADER;
typedef enum _tagPARSEACTION PARSEACTION;
typedef PDOC_INFO_1A PDOC_INFO_1;
typedef PDOC_INFO_2A PDOC_INFO_2;
typedef PDOC_INFO_3A PDOC_INFO_3;
typedef enum tagPENDINGTYPE PENDINGTYPE;
typedef PEXTLOGFONTA PEXTLOGFONT;
typedef PJOB_INFO_1A PJOB_INFO_1;
typedef PJOB_INFO_2A PJOB_INFO_2;
typedef enum _MEDIA_TYPE *PMEDIA_TYPE;
typedef PMIDIINCAPSA PMIDIINCAPS;
typedef PORT_INFO_1A PORT_INFO_1;
typedef PORT_INFO_2A PORT_INFO_2;
typedef PORT_INFO_3A PORT_INFO_3;
typedef enum _0AEECC1A63E1B2F73D11FBA74082B60B PROXY_PHASE;
typedef PTEXTMETRICA PTEXTMETRIC;
typedef PWAVEINCAPSA PWAVEINCAPS;
typedef PWNDCLASSEXA PWNDCLASSEX;
typedef enum _tagQUERYOPTION QUERYOPTION;
typedef ULONG_PTR SCARDHANDLE;
typedef ULONG SERVICETYPE;
typedef SOUNDSENTRYA SOUNDSENTRY;
typedef STARTUPINFOA STARTUPINFO;
typedef enum tagSTREAM_SEEK STREAM_SEEK;
typedef enum tagURLTEMPLATE URLTEMPLATE;
typedef WAVEOUTCAPSA WAVEOUTCAPS;
typedef WSAQUERYSETA WSAQUERYSET;
struct _JOB_INFO_3 {DWORD JobId;DWORD NextJobId;DWORD Reserved;};
struct _POINTFLOAT {FLOAT x;FLOAT y;};
struct _SMALL_RECT {SHORT Left;SHORT Top;SHORT Right;SHORT Bottom;};
struct _SYSTEMTIME {WORD wYear;WORD wMonth;WORD wDayOfWeek;WORD wDay;WORD wHour;WORD wMinute;WORD wSecond;WORD wMilliseconds;};
struct _TOKEN_USER {SID_AND_ATTRIBUTES User;};
struct _finddata_t {unsigned int attrib;time_t time_create;time_t time_access;time_t time_write;int size;char name[260];};
struct joyinfo_tag {UINT wXpos;UINT wYpos;UINT wZpos;UINT wButtons;};
struct tagDEVNAMES {WORD wDriverOffset;WORD wDeviceOffset;WORD wOutputOffset;WORD wDefault;};
struct tagRemBRUSH {unsigned int cbData;byte data[1];};
struct val_context {int valuelen;LPVOID value_context;LPVOID val_buff_ptr;};
typedef userHBITMAP *wireHBITMAP;
typedef userHGLOBAL *wireHGLOBAL;
typedef enum tagBINDSTATUS BINDSTATUS;
typedef enum tagBINDSTRING BINDSTRING;
typedef enum tagBIND_FLAGS BIND_FLAGS;
typedef enum tagCHANGEKIND CHANGEKIND;
typedef CHOOSEFONTA CHOOSEFONT;
typedef enum __MIDL_ICodeInstall_0001 CIP_STATUS;
typedef WORD CLIPFORMAT;
typedef DOC_INFO_1A DOC_INFO_1;
typedef DOC_INFO_2A DOC_INFO_2;
typedef DOC_INFO_3A DOC_INFO_3;
typedef EXTLOGFONTA EXTLOGFONT;
typedef ULONG_PTR HCRYPTHASH;
typedef ULONG_PTR HCRYPTPROV;
typedef PVOID HDEVNOTIFY;
typedef enum tagINVOKEKIND INVOKEKIND;
typedef JOB_INFO_1A JOB_INFO_1;
typedef JOB_INFO_2A JOB_INFO_2;
typedef ULONG_PTR KSPIN_LOCK;
typedef LPAXESLISTA LPAXESLIST;
typedef LPAXISINFOA LPAXISINFO;
typedef DWORD *LPCOLORREF;
typedef LPCPINFOEXA LPCPINFOEX;
typedef LPDRAGINFOA LPDRAGINFO;
typedef HMIDIOUT *LPHMIDIOUT;
typedef HWAVEOUT *LPHWAVEOUT;
typedef WORD *LPKEYARRAY;
typedef LPOFNOTIFYA LPOFNOTIFY;
typedef LPPOLYTEXTA LPPOLYTEXT;
typedef LPPRINTDLGA LPPRINTDLG;
typedef STATDATA *LPSTATDATA;
typedef LPSTYLEBUFA LPSTYLEBUF;
typedef LPWNDCLASSA LPWNDCLASS;
typedef DWORD *LPWSAEVENT;
typedef enum _MEDIA_TYPE MEDIA_TYPE;
typedef MIDIINCAPSA MIDIINCAPS;
typedef NPPOLYTEXTA NPPOLYTEXT;
typedef NPSTYLEBUFA NPSTYLEBUF;
typedef NPWNDCLASSA NPWNDCLASS;
typedef OFNOTIFYEXA OFNOTIFYEX;
typedef enum tagOLEWHICHMK OLEWHICHMK;
typedef WORD PATCHARRAY[128];
typedef CRYPT_ATTRIBUTES *PCMSG_ATTR;
typedef ULONG_PTR *PDWORD_PTR;
typedef enum tagPENDINGMSG PENDINGMSG;
typedef PMIXERCAPSA PMIXERCAPS;
typedef PMIXERLINEA PMIXERLINE;
typedef PRINTDLGEXA PRINTDLGEX;
typedef ULONGLONG *PULONGLONG;
typedef SERIALKEYSA SERIALKEYS;
typedef enum tagSERVERCALL SERVERCALL;
typedef SHFILEINFOA SHFILEINFO;
typedef enum _B2CD58BB5E151C37D855099D3E2FDD5A STUB_PHASE;
typedef void (__stdcall *STUB_THUNK)(PMIDL_STUB_MESSAGE);
typedef TEXTMETRICA TEXTMETRIC;
typedef enum _TOKEN_TYPE TOKEN_TYPE;
typedef enum _URLZONEREG URLZONEREG;
typedef VARIANT VARIANTARG;
typedef WAVEINCAPSA WAVEINCAPS;
typedef WNDCLASSEXA WNDCLASSEX;
struct _BIN_RANGE {LARGE_INTEGER StartValue;LARGE_INTEGER Length;};
struct _BYTE_BLOB {unsigned int clSize;byte abData[1];};
struct _LANA_ENUM {UCHAR length;UCHAR lana[255];};
struct _OLESTREAM {LPOLESTREAMVTBL lpstbl;};
struct _RSAPUBKEY {DWORD magic;DWORD bitlen;DWORD pubexp;};
struct tagHSZPAIR {HSZ hszSvc;HSZ hszTopic;};
struct tagPOINTFX {FIXED x;FIXED y;};
struct tagRGBQUAD {BYTE rgbBlue;BYTE rgbGreen;BYTE rgbRed;BYTE rgbReserved;};
typedef RemotableHandle *wireHACCEL;
typedef RemotableHandle *wireHBRUSH;
typedef enum __MIDL_IBindStatusCallback_0002 BINDINFOF;
typedef enum tagBINDSPEED BINDSPEED;
typedef enum _BIN_TYPES BIN_TYPES;
typedef CRYPT_ATTRIBUTES CMSG_ATTR;
typedef ULONGLONG DWORDLONG;
typedef ULONG_PTR DWORD_PTR;
typedef enum tagFUNCFLAGS FUNCFLAGS;
typedef ULONG_PTR HCRYPTKEY;
typedef LONG LCSCSTYPE;
typedef LPAUXCAPSA LPAUXCAPS;
typedef DECIMAL *LPDECIMAL;
typedef LPDEVMODEA LPDEVMODE;
typedef LPDOCINFOA LPDOCINFO;
typedef HMIDIIN *LPHMIDIIN;
typedef HWAVEIN *LPHWAVEIN;
typedef LPJOYCAPSA LPJOYCAPS;
typedef LPLOGFONTA LPLOGFONT;
typedef RGBQUAD *LPRGBQUAD;
typedef VARIANT *LPVARIANT;
typedef MIXERCAPSA MIXERCAPS;
typedef MIXERLINEA MIXERLINE;
typedef enum tagMKREDUCE MKRREDUCE;
typedef UINT MMVERSION;
typedef enum tagMSHLFLAGS MSHLFLAGS;
typedef NPAUXCAPSA NPAUXCAPS;
typedef NPDEVMODEA NPDEVMODE;
typedef NPJOYCAPSA NPJOYCAPS;
typedef NPLOGFONTA NPLOGFONT;
typedef NUMBERFMTA NUMBERFMT;
typedef enum tagOLERENDER OLERENDER;
typedef enum tagOLEUPDATE OLEUPDATE;
typedef PAXESLISTA PAXESLIST;
typedef PAXISINFOA PAXISINFO;
typedef CONVINFO *PCONVINFO;
typedef FLOAT128 *PFLOAT128;
typedef ICONINFO *PICONINFO;
typedef LONGLONG *PLONGLONG;
typedef PPOLYTEXTA PPOLYTEXT;
typedef PSTYLEBUFA PSTYLEBUF;
typedef enum _tagPSUACTION PSUACTION;
typedef PWNDCLASSA PWNDCLASS;
typedef uSTGMEDIUM STGMEDIUM;
typedef enum __MIDL_IInternetSecurityManager_0002 SZM_FLAGS;
typedef enum tagTYPEFLAGS TYPEFLAGS;
typedef enum _2A6324B8E10DEE2666A6A5498DFC667B XLAT_SIDE;
struct _ABCFLOAT {FLOAT abcfA;FLOAT abcfB;FLOAT abcfC;};
struct _FILETIME {DWORD dwLowDateTime;DWORD dwHighDateTime;};
struct _RIP_INFO {DWORD dwError;DWORD dwType;};
struct _heapinfo {int *_pentry;int *__pentry;size_t _size;int _useflag;};
struct sockproto {u_short sp_family;u_short sp_protocol;};
struct tagCIEXYZ {FXPT2DOT30 ciexyzX;FXPT2DOT30 ciexyzY;FXPT2DOT30 ciexyzZ;};
struct tagPANOSE {BYTE bFamilyType;BYTE bSerifStyle;BYTE bWeight;BYTE bProportion;BYTE bContrast;BYTE bStrokeVariation;BYTE bArmStyle;BYTE bLetterform;BYTE bMidline;BYTE bXHeight;};
struct tagPOINTS {SHORT x;SHORT y;};
typedef RemotableHandle *wireHFONT;
typedef RemotableHandle *wireHICON;
typedef RemotableHandle *wireHMENU;
typedef AXESLISTA AXESLIST;
typedef AXISINFOA AXISINFO;
typedef enum __MIDL_IBindStatusCallback_0001 BINDVERB;
typedef enum tagCALLCONV CALLCONV;
typedef enum tagCALLTYPE CALLTYPE;
typedef DWORD COLORREF;
typedef CPINFOEXA CPINFOEX;
typedef CY CURRENCY;
typedef enum tagDESCKIND DESCKIND;
typedef DRAGINFOA DRAGINFO;
typedef enum tagDVASPECT DVASPECT;
typedef enum tagFUNCKIND FUNCKIND;
typedef DWORD HELPPOLY;
typedef DWORD HREFTYPE;
typedef WORD KEYARRAY[128];
typedef enum tagLIBFLAGS LIBFLAGS;
typedef enum tagLOCKTYPE LOCKTYPE;
typedef CIEXYZ *LPCIEXYZ;
typedef const RECTL *LPCRECTL;
typedef HANDLE *LPHANDLE;
typedef HMIXER *LPHMIXER;
typedef DWORD MCIERROR;
typedef UINT MMRESULT;
typedef OFNOTIFYA OFNOTIFY;
typedef enum tagOLECLOSE OLECLOSE;
typedef enum tagOLECONTF OLECONTF;
typedef void (__stdcall *PAPCFUNC)(ULONG_PTR dwParam);
typedef PAUXCAPSA PAUXCAPS;
typedef CONTEXT *PCONTEXT;
typedef PDEVMODEA PDEVMODE;
typedef HSZPAIR *PHSZPAIR;
typedef enum _tagPI_FLAGS PI_FLAGS;
typedef PJOYCAPSA PJOYCAPS;
typedef PLOGFONTA PLOGFONT;
typedef POLYTEXTA POLYTEXT;
typedef PRINTDLGA PRINTDLG;
typedef LONG_PTR *PSSIZE_T;
typedef HANDLE *SPHANDLE;
typedef enum tagSTATFLAG STATFLAG;
typedef STYLEBUFA STYLEBUF;
typedef enum tagTYPEKIND TYPEKIND;
typedef enum tagVARFLAGS VARFLAGS;
typedef WNDCLASSA WNDCLASS;
typedef DWORD WSAEVENT;
struct _COMSTAT {unsigned __int32 fCtsHold : 1;unsigned __int32 fDsrHold : 1;unsigned __int32 fRlsdHold : 1;unsigned __int32 fXoffHold : 1;unsigned __int32 fXoffSent : 1;unsigned __int32 fEof : 1;unsigned __int32 fTxim : 1;unsigned __int32 fReserved : 25;DWORD cbInQue;DWORD cbOutQue;};
struct _IDEREGS {BYTE bFeaturesReg;BYTE bSectorCountReg;BYTE bSectorNumberReg;BYTE bCylLowReg;BYTE bCylHighReg;BYTE bDriveHeadReg;BYTE bCommandReg;BYTE bReserved;};
struct _RGNDATA {RGNDATAHEADER rdh;char Buffer[1];};
typedef RPC_BINDING_HANDLE handle_t;
struct sockaddr {u_short sa_family;char sa_data[14];};
struct tagPOINT {LONG x;LONG y;};
struct tagXFORM {FLOAT eM11;FLOAT eM12;FLOAT eM21;FLOAT eM22;FLOAT eDx;FLOAT eDy;};
typedef wchar_t wctype_t;
typedef FLAGGED_WORD_BLOB *wireBSTR;
typedef RemotableHandle *wireHWND;
typedef AUXCAPSA AUXCAPS;
typedef BYTE BOOLEAN;
typedef DWORD CALTYPE;
typedef USHORT COLOR16;
typedef enum tagDATADIR DATADIR;
typedef DEVMODEA DEVMODE;
typedef DOCINFOA DOCINFO;
typedef enum tagEXTCONN EXTCONN;
typedef HICON HCURSOR;
typedef HANDLE HGLOBAL;
typedef HINSTANCE HMODULE;
typedef LONG HRESULT;
typedef JOYCAPSA JOYCAPS;
typedef LOGFONTA LOGFONT;
typedef const BYTE *LPCBYTE;
typedef const GUID *LPCGUID;
typedef const RECT *LPCRECT;
typedef DWORD *LPDWORD;
typedef HMIDI *LPHMIDI;
typedef NMHDR *LPNMHDR;
typedef SIZE *LPSIZEL;
typedef LONG_PTR LRESULT;
typedef enum tagOLEMISC OLEMISC;
typedef LOGBRUSH PATTERN;
typedef HANDLE *PHANDLE;
typedef NT_TIB *PNT_TIB;
typedef PPVALUEA PPVALUE;
typedef ULONG_PTR *PSIZE_T;
typedef USHORT *PUSHORT;
typedef PVALENTA PVALENT;
typedef enum tagREGKIND REGKIND;
typedef LPVOID SC_LOCK;
typedef enum tagSF_TYPE SF_TYPE;
typedef LONG_PTR SSIZE_T;
typedef enum tagSTGMOVE STGMOVE;
typedef enum tagSYSKIND SYSKIND;
typedef enum tagURLZONE URLZONE;
typedef enum tagVARKIND VARKIND;
struct WSAData {WORD wVersion;WORD wHighVersion;char szDescription[257];char szSystemStatus[129];unsigned __int16 iMaxSockets;unsigned __int16 iMaxUdpDg;char *lpVendorInfo;};
typedef enum __MIDL_IInternetZoneManager_0002 ZAFLAGS;
struct _POINTL {LONG x;LONG y;};
struct _PUBKEY {DWORD magic;DWORD bitlen;};
struct _WSABUF {u_long len;char *buf;};
typedef enum _C967B4BD5950CD7FE5A55F6326D513E0 _mexcep;
struct _wffblk {int ff_reserved;int ff_fsize;unsigned int ff_attrib;unsigned __int16 ff_ftime;unsigned __int16 ff_fdate;wchar_t ff_name[260];};
struct tagCAUL {ULONG cElems;ULONG *pElems;};
struct tagCRGB {BYTE bRed;BYTE bGreen;BYTE bBlue;BYTE bExtra;};
struct tagRECT {LONG left;LONG top;LONG right;LONG bottom;};
struct tagSIZE {LONG cx;LONG cy;};
struct utimbuf {time_t actime;time_t modtime;};
struct wdirent {wchar_t d_name[260];};
typedef RemotableHandle *wireHDC;
typedef RemSNB *wireSNB;
typedef enum tagCLSCTX CLSCTX;
typedef enum tagCOINIT COINIT;
typedef LONG DISPID;
typedef DWORD FOURCC;
typedef WORD FSHORT;
typedef HANDLE HLOCAL;
typedef WORD LANGID;
typedef DWORD LCTYPE;
typedef DWORD LGRPID;
typedef LONG_PTR LPARAM;
typedef BOOL *LPBOOL;
typedef BYTE *LPBYTE;
typedef const CHAR *LPCSTR;
typedef GUID *LPGUID;
typedef UINT *LPUINT;
typedef WORD *LPWORD;
typedef enum tagMEMCTX MEMCTX;
typedef enum tagMSHCTX MSHCTX;
typedef LPCSTR PCTSTR;
typedef DWORD *PDWORD;
typedef FLOAT *PFLOAT;
typedef ULONG PROPID;
typedef SHORT *PSHORT;
typedef SIZE *PSIZEL;
typedef UCHAR *PUCHAR;
typedef ULONG *PULONG;
typedef PVALUEA PVALUE;
typedef enum tagREGCLS REGCLS;
typedef ACCESS_MASK REGSAM;
typedef ULONG_PTR SIZE_T;
typedef UINT_PTR SOCKET;
typedef enum tagTYSPEC TYSPEC;
typedef VALENTA VALENT;
typedef UINT_PTR WPARAM;
struct _COORD {SHORT X;SHORT Y;};
struct _FIXED {WORD fract;__int16 value;};
struct _RECTL {LONG left;LONG top;LONG right;LONG bottom;};
struct linger {u_short l_onoff;u_short l_linger;};
struct netent {char *n_name;char **n_aliases;__int16 n_addrtype;u_long n_net;};
struct tagEMR {DWORD iType;DWORD nSize;};
typedef wchar_t wint_t;
typedef BYTE BCHAR;
typedef enum __MIDL_IBindStatusCallback_0003 BINDF;
typedef DWORD CALID;
typedef GUID CLSID;
typedef BYTE FCHAR;
typedef DWORD FLONG;
typedef GUID FMTID;
typedef const CHAR *LPCCH;
typedef HKL *LPHKL;
typedef CHAR *LPSTR;
typedef LPSTR LPTCH;
typedef enum tagMKSYS MKSYS;
typedef CHAR *NPSTR;
typedef BOOL *PBOOL;
typedef BYTE *PBYTE;
typedef CHAR *PCHAR;
typedef const CHAR *PCSTR;
typedef HKEY *PHKEY;
typedef PDWORD PLCID;
typedef LONG *PLONG;
typedef LPSTR PTSTR;
typedef WORD *PWORD;
typedef LONG SCODE;
typedef SIZE SIZEL;
typedef enum tagSTGTY STGTY;
typedef enum tagTYMED TYMED;
typedef WORD UWORD;
typedef wchar_t WCHAR;
struct _MAT2 {FIXED eM11;FIXED eM12;FIXED eM21;FIXED eM22;};
typedef enum tagADVF ADVF;
typedef WORD ATOM;
typedef enum __MIDL_IBindStatusCallback_0006 BSCF;
typedef HANDLE HDWP;
typedef DWORD LCID;
typedef CHAR *LPCH;
typedef CY *LPCY;
typedef ACL *PACL;
typedef const CHAR *PCCH;
typedef PVOID PSID;
typedef CHAR *PSTR;
typedef LPSTR PTCH;
typedef enum __MIDL_IInternetSecurityManager_0001 PUAF;
typedef WCHAR *PWCH;
typedef enum tagSTGC STGC;
typedef GUID UUID;
struct _ABC {int abcA;UINT abcB;int abcC;};
typedef GUID IID;
typedef CHAR *PCH;
typedef LONGLONG USN;
struct _PRINTER_NOTIFY_INFO_DATA___13C44C2CB620BE9B3AF26887E9FDBAC1___C17A22870036CE08069A6AE8C5637EC1 {DWORD cbBuf;LPVOID pBuf;};
struct _PROCESS_HEAP_ENTRY___7560F888646F7FDA504B9D72BE9EBD07___6F5D3132B0673F7F54FA2B910BE5C5E0 {HANDLE hMem;DWORD dwReserved[3];};
struct _PROCESS_HEAP_ENTRY___7560F888646F7FDA504B9D72BE9EBD07___E5DDA9A585AE137D0E5F8881F3AC492F {DWORD dwCommittedSize;DWORD dwUnCommittedSize;LPVOID lpFirstBlock;LPVOID lpLastBlock;};
union _IMAGE_AUX_SYMBOL___23DFC5686F0E6924815C955A999B653C___16A1A8FB0340C07B06C110366CF85D46 {struct _IMAGE_AUX_SYMBOL______16A1A8FB0340C07B06C110366CF85D46___D7CED02C5EE110FFB81CA02005CB2264 Function;struct _IMAGE_AUX_SYMBOL______16A1A8FB0340C07B06C110366CF85D46___A6589E1685AD051AED20409BF2544643 Array;};
union _IMAGE_AUX_SYMBOL___23DFC5686F0E6924815C955A999B653C___7BA673E1ED5771089D188D89EB9BDF46 {struct _IMAGE_AUX_SYMBOL______7BA673E1ED5771089D188D89EB9BDF46___3C0209E125597A11F89742EEA0270158 LnSz;DWORD TotalSize;};
struct _RPC_ASYNC_STATE___C850AED24DDA9EA1FCF494DA424838E3___A18A6C82CF5B218D68E8003A992A5456 {HWND hWnd;UINT Msg;};
union _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO___41B0BD1292C22C89BE2FD7DE56713FE8 {PCRYPT_ALGORITHM_IDENTIFIER pEphemeralAlgorithm;PCERT_ID pSenderId;};
union _D26D25374C75FEF3AD181CCFA77BD37F___ED8EF83DA0F103C0F6663A08F1BCC04F {SCARD_T0_COMMAND CmdBytes;BYTE rgbHeader[5];};
union _IMAGE_RESOURCE_DIRECTORY_ENTRY___A1259A08F2B533F259DA4993E2C51E29 {DWORD OffsetToData;_IMAGE_RESOURCE_DIRECTORY_ENTRY___A1259A08F2B533F259DA4993E2C51E29___B2E03ED94C06E2E681F8D03FF7FF5CB3 __anonymous0;};
union _CMSG_KEY_AGREE_RECIPIENT_INFO___74691898E1CF581306BA249AD6F73FE1 {CERT_ID OriginatorCertId;CERT_PUBLIC_KEY_INFO OriginatorPublicKeyInfo;};
union _MEMORY_BASIC_INFORMATION_VLM___023421F2A53415AC5289F1A60128413B {PVOID64 AllocationBase;ULONGLONG AllocationBaseAsUlongLong;};
union _MEMORY_BASIC_INFORMATION_VLM___1C048A2196DAD501277AB2AA6FBC3D43 {PVOID64 BaseAddress;ULONGLONG BaseAddressAsUlongLong;};
union _CMSG_KEY_AGREE_ENCRYPT_INFO___74691898E1CF581306BA249AD6F73FE1 {CERT_ID OriginatorCertId;CERT_PUBLIC_KEY_INFO OriginatorPublicKeyInfo;};
union _PRINTER_NOTIFY_INFO_DATA___13C44C2CB620BE9B3AF26887E9FDBAC1 {DWORD adwData[2];struct _PRINTER_NOTIFY_INFO_DATA___13C44C2CB620BE9B3AF26887E9FDBAC1___C17A22870036CE08069A6AE8C5637EC1 Data;};
union _DISK_CACHE_INFORMATION___0AD8AF95EFD10BD5272FB6EC04FE066D {struct _DISK_CACHE_INFORMATION___0AD8AF95EFD10BD5272FB6EC04FE066D___B2B02F0A7FAA2EF9E06FFE2893D08AB3 ScalarPrefetch;struct _DISK_CACHE_INFORMATION___0AD8AF95EFD10BD5272FB6EC04FE066D___99025D9F8BC16C326FB237046D6F6F6F BlockPrefetch;};
union _FILE_OBJECTID_BUFFER___77FE4681D295052E0E2CCB42A3EC532A {_FILE_OBJECTID_BUFFER___77FE4681D295052E0E2CCB42A3EC532A___C0DBABB4D3C7F7567DEFF10AA714B1D5 __anonymous0;BYTE ExtendedInfo[48];};
union tMIXERCONTROLDETAILS___6A354DB64043DD4C59D209C2C03EE69F {HWND hwndOwner;DWORD cMultipleItems;};
union _PROCESS_HEAP_ENTRY___7560F888646F7FDA504B9D72BE9EBD07 {struct _PROCESS_HEAP_ENTRY___7560F888646F7FDA504B9D72BE9EBD07___6F5D3132B0673F7F54FA2B910BE5C5E0 Block;struct _PROCESS_HEAP_ENTRY___7560F888646F7FDA504B9D72BE9EBD07___E5DDA9A585AE137D0E5F8881F3AC492F Region;};
union _KEY_EVENT_RECORD___0E79EC4DAC98A4AB202537FA8C3F69FC {WCHAR UnicodeChar;CHAR AsciiChar;};
union _PROPSHEETHEADERA___5F49E4A18E3DDA5E827B03567227027C {HBITMAP hbmWatermark;LPCSTR pszbmWatermark;};
union _PROPSHEETHEADERA___B1482D20F8877C2A38A76E0C7234BF42 {HBITMAP hbmHeader;LPCSTR pszbmHeader;};
union _PROPSHEETHEADERA___B2BC7FD01B1A93973E79FDE746C43987 {UINT nStartPage;LPCSTR pStartPage;};
union _PROPSHEETHEADERA___E1AF9326B92748E8DAFEF2F13D81386D {HICON hIcon;LPCSTR pszIcon;};
union _PROPSHEETHEADERA___FF46AEFBA3346A074103206F902E6DF5 {LPCPROPSHEETPAGEA ppsp;HPROPSHEETPAGE *phpage;};
union _PROPSHEETHEADERW___C62D413765EFFC4667F5A15937CA2710 {LPCPROPSHEETPAGEW ppsp;HPROPSHEETPAGE *phpage;};
union _CRYPT_OID_INFO___A9F8A7DC8FBE56841F6E4489F1528E50 {DWORD dwValue;ALG_ID Algid;DWORD dwLength;};
union _MIDL_STUB_DESC___5BCB627D3738D8B5DEACC268C24AE672 {handle_t *pAutoHandle;handle_t *pPrimitiveHandle;PGENERIC_BINDING_INFO pGenericBindingInfo;};
union _PROPSHEETPAGEA___55841DA2EA6EA673F6C61AA531495E56 {LPCSTR pszTemplate;LPCDLGTEMPLATE pResource;};
union _PROPSHEETPAGEA___E1AF9326B92748E8DAFEF2F13D81386D {HICON hIcon;LPCSTR pszIcon;};
struct _LARGE_INTEGER___837407842DC9087486FDFA5FEB63B74E {DWORD LowPart;LONG HighPart;};
union _SYSTEM_INFO___A707B71C060B6D10F73A71917EA8473F {DWORD dwOemId;_SYSTEM_INFO___A707B71C060B6D10F73A71917EA8473F___AA04DEB0C6383F89F13D312A174572A9 __anonymous0;};
union _devicemodeA___1DE029518E5B112A14BB6E76DECCA4C4 {_devicemodeA___1DE029518E5B112A14BB6E76DECCA4C4___5ACE225D4D14CE0550A9F5A217E306C5 __anonymous0;POINTL dmPosition;};
union _devicemodeW___8704E1B782D57C585145E63F7510EBEA {_devicemodeA___1DE029518E5B112A14BB6E76DECCA4C4___5ACE225D4D14CE0550A9F5A217E306C5 __anonymous0;POINTL dmPosition;};
struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION {JOBOBJECT_BASIC_ACCOUNTING_INFORMATION BasicInfo;IO_COUNTERS IoInfo;};
union tagELEMDESC___7C8F4CED1424251743D09680A1A0B07D {IDLDESC idldesc;PARAMDESC paramdesc;};
struct _AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA {DWORD cbSize;DWORD dwRegPolicySettings;BOOL fCommercial;};
union _CHAR_INFO___0E79EC4DAC98A4AB202537FA8C3F69FC {WCHAR UnicodeChar;CHAR AsciiChar;};
union _LDT_ENTRY___95C81B8F3DD6C8D0A2F7AF8EEE24F097 {struct _LDT_ENTRY___95C81B8F3DD6C8D0A2F7AF8EEE24F097___81408237330B83BB46845513C42A27AE Bytes;struct _LDT_ENTRY___95C81B8F3DD6C8D0A2F7AF8EEE24F097___A3BAC9569453E46653D4C53B8339026E Bits;};
union tagVARDESC___E6274BD6A7149C9CC2413444FF769F0B {ULONG oInst;VARIANT *lpvarValue;};
struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS {DWORD cbSize;BOOL fCommercial;};
union _CERT_ID___CC94CEC94C6A7710EFE3CDB32686A77C {CERT_ISSUER_SERIAL_NUMBER IssuerSerialNumber;CRYPT_HASH_BLOB KeyId;CRYPT_HASH_BLOB HashId;};
struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA {DWORD cbSize;DWORD dwRegPolicySettings;PCMSG_SIGNER_INFO pSignerInfo;};
union _NT_TIB___0349ADB4452EC09BEC08E2292695FBBA {PVOID FiberData;DWORD Version;};
union tagDEC___64EC678C49E7BE49873AFBFB7A849D34 {tagDEC___64EC678C49E7BE49873AFBFB7A849D34___7F8459940C2B08BD5D82B0F27239141B __anonymous0;USHORT signscale;};
union tagDEC___D28E26DEC3EC762C06C2AA9D0F7AC301 {tagDEC___D28E26DEC3EC762C06C2AA9D0F7AC301___674876891A86A76F12C10005982BCA56 __anonymous0;ULONGLONG Lo64;};
struct _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE {LPSTR pszOrganization;DWORD cNoticeNumbers;int *rgNoticeNumbers;};
struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION {LARGE_INTEGER TotalUserTime;LARGE_INTEGER TotalKernelTime;LARGE_INTEGER ThisPeriodTotalUserTime;LARGE_INTEGER ThisPeriodTotalKernelTime;DWORD TotalPageFaultCount;DWORD TotalProcesses;DWORD ActiveProcesses;DWORD TotalTerminatedProcesses;};
typedef BOOL (__stdcall *PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK)(PCCERT_CONTEXT pCert, void *pvFindArg);
struct _CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA {DWORD cbSize;DWORD dwSignerIndex;CRYPT_DATA_BLOB blob;};
union _userCLIPFORMAT____MIDL_IWinTypes_0001 {DWORD dwValue;wchar_t *pwszName;};
struct _CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA {DWORD cOID;LPSTR *rgpszOID;};
struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT {PVOID CompletionKey;HANDLE CompletionPort;};
struct _CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA {DWORD cbSize;HCRYPTPROV hCryptProv;DWORD dwSignerIndex;DWORD dwSignerType;void *pvSigner;};
typedef void (__stdcall *LPWSAOVERLAPPED_COMPLETION_ROUTINE)(DWORD dwError, DWORD cbTransferred, LPWSAOVERLAPPED lpOverlapped, DWORD dwFlags);
struct _CHANGER_INITIALIZE_ELEMENT_STATUS {CHANGER_ELEMENT_LIST ElementList;BOOLEAN BarCodeScan;};
struct _13B347001B2B96C65D01839EEA37C971 {INT cDig;ULONG dwInFlags;ULONG dwOutFlags;INT cchUsed;INT nBaseShift;INT nPwr10;};
struct _1C9ED8E2FE494C714F8336D090291E50 {DWORD style;DWORD dwExtendedStyle;WORD cdit;__int16 x;__int16 y;__int16 cx;__int16 cy;};
struct _3D26434F5A7D20980B51C6D4C88FA6DE {DWORDLONG StartFileReferenceNumber;USN LowUsn;USN HighUsn;};
struct _46B8CD9DF897759D0306203A2121EA8B {WORD mtOption;WORD mtID;WCHAR mtString[1];};
struct _5C0C72291B37B22FE700A61795928759 {ACCESS_MASK DesiredAccess;DWORD SecurityIds[1];};
struct _7545F1A067A9FBB43FDF50E78E6B08BD {SYSTEMTIME st;USHORT wDayOfYear;};
struct _7FAA4336E151361F9CD171DE989684F0 {DWORD ByteCount;WORD MajorVersion;WORD MinorVersion;};
struct _8363E2736332812C7A22E557719FD114 {DWORDLONG UsnJournalID;USN FirstUsn;USN NextUsn;USN LowestValidUsn;USN MaxUsn;DWORDLONG MaximumSize;DWORDLONG AllocationDelta;};
struct _947C6FA139885FA2B0DE7F2A3FDD942C {DWORD style;DWORD dwExtendedStyle;__int16 x;__int16 y;__int16 cx;__int16 cy;WORD id;};
struct _976F82B52AD5D008419379398D47AE46 {DWORD UsnSourceInfo;HANDLE VolumeHandle;DWORD HandleInfo;};
struct _9FEC9D2A03C37051BDB5508CF5CADF1F {DWORDLONG UsnJournalID;DWORD DeleteFlags;};
struct _A0026B003AB75CC8BFC049DB25C2779D {unsigned int DispatchTableCount;RPC_DISPATCH_FUNCTION *DispatchTable;LONG_PTR Reserved;};
struct _C3795B4C40F1F780E52EE60833F04917 {DWORD Characteristics;DWORD TimeDateStamp;WORD MajorVersion;WORD MinorVersion;DWORD GlobalFlagsClear;DWORD GlobalFlagsSet;DWORD CriticalSectionDefaultTimeout;DWORD DeCommitFreeBlockThreshold;DWORD DeCommitTotalFreeThreshold;DWORD LockPrefixTable;DWORD MaximumAllocationSize;DWORD VirtualMemoryThreshold;DWORD ProcessHeapFlags;DWORD ProcessAffinityMask;WORD CSDVersion;WORD Reserved1;DWORD EditList;DWORD Reserved[1];};
struct _D890D4C8B96B04D8C981ECF31CD55F01 {LARGE_INTEGER StartingLcn;LARGE_INTEGER BitmapSize;BYTE Buffer[1];};
struct _DCD76CF5A248684E95EEC87F56AA655C {LARGE_INTEGER VolumeSerialNumber;LARGE_INTEGER NumberSectors;LARGE_INTEGER TotalClusters;LARGE_INTEGER FreeClusters;LARGE_INTEGER TotalReserved;DWORD BytesPerSector;DWORD BytesPerCluster;DWORD BytesPerFileRecordSegment;DWORD ClustersPerFileRecordSegment;LARGE_INTEGER MftValidDataLength;LARGE_INTEGER MftStartLcn;LARGE_INTEGER Mft2StartLcn;LARGE_INTEGER MftZoneStart;LARGE_INTEGER MftZoneEnd;};
struct _EA831C4C2E16EF6F2B7E490157D80D27 {DWORD Restart;SID Sid;};
struct _CRYPT_ENCRYPTED_PRIVATE_KEY_INFO {CRYPT_ALGORITHM_IDENTIFIER EncryptionAlgorithm;CRYPT_DATA_BLOB EncryptedPrivateKey;};
struct _ENCRYPTION_CERTIFICATE_HASH_LIST {DWORD nCert_Hash;PENCRYPTION_CERTIFICATE_HASH *pUsers;};
struct _CMSG_KEY_AGREE_KEY_ENCRYPT_INFO {DWORD cbSize;CRYPT_DATA_BLOB EncryptedKey;};
struct _IMAGE_RESOURCE_DIRECTORY_STRING {WORD Length;CHAR NameString[1];};
struct _JOBOBJECT_BASIC_PROCESS_ID_LIST {DWORD NumberOfAssignedProcesses;DWORD NumberOfProcessIdsInList;ULONG_PTR ProcessIdList[1];};
struct tagMIXERCONTROLDETAILS_LISTTEXTA {DWORD dwParam1;DWORD dwParam2;CHAR szName[64];};
struct tagMIXERCONTROLDETAILS_LISTTEXTW {DWORD dwParam1;DWORD dwParam2;WCHAR szName[64];};
typedef void (__stdcall *LPOVERLAPPED_COMPLETION_ROUTINE)(DWORD dwErrorCode, DWORD dwNumberOfBytesTransfered, LPOVERLAPPED lpOverlapped);
typedef BOOL (__stdcall *PFN_CANCEL_ASYNC_RETRIEVAL_FUNC)(HCRYPTASYNC hAsyncRetrieve);
typedef void (__stdcall *PFN_CRYPT_ASYNC_PARAM_FREE_FUNC)(LPSTR pszParamOid, LPVOID pvParam);
struct _CERT_X942_DH_VALIDATION_PARAMS {CRYPT_BIT_BLOB seed;DWORD pgenCounter;};
struct _CRYPT_KEY_VERIFY_MESSAGE_PARA {DWORD cbSize;DWORD dwMsgEncodingType;HCRYPTPROV hCryptProv;};
struct _IMAGE_BOUND_IMPORT_DESCRIPTOR {DWORD TimeDateStamp;WORD OffsetModuleName;WORD NumberOfModuleForwarderRefs;};
struct _CERT_BASIC_CONSTRAINTS2_INFO {BOOL fCA;BOOL fPathLenConstraint;DWORD dwPathLenConstraint;};
struct _ENUM_SERVICE_STATUS_PROCESSA {LPSTR lpServiceName;LPSTR lpDisplayName;SERVICE_STATUS_PROCESS ServiceStatusProcess;};
struct _GENERIC_BINDING_ROUTINE_PAIR {GENERIC_BINDING_ROUTINE pfnBind;GENERIC_UNBIND_ROUTINE pfnUnbind;};
struct _NDR_USER_MARSHAL_INFO_LEVEL1 {void *Buffer;unsigned int BufferSize;void *(__stdcall *pfnAllocate)(size_t);void (__stdcall *pfnFree)(void *);struct IRpcChannelBuffer *pRpcChannelBuffer;ULONG_PTR Reserved[5];};
struct tagEMRCREATEDIBPATTERNBRUSHPT {EMR emr;DWORD ihBrush;DWORD iUsage;DWORD offBmi;DWORD cbBmi;DWORD offBits;DWORD cbBits;};
struct _CHANGER_READ_ELEMENT_STATUS {CHANGER_ELEMENT_LIST ElementList;BOOLEAN VolumeTagInfo;};
struct _CRYPT_PASSWORD_CREDENTIALSA {DWORD cbSize;LPSTR pszUsername;LPSTR pszPassword;};
struct _ENCRYPTION_CERTIFICATE_LIST {DWORD nUsers;PENCRYPTION_CERTIFICATE *pUsers;};
struct _IMAGE_RESOURCE_DIR_STRING_U {WORD Length;WCHAR NameString[1];};
struct _IMAGE_SEPARATE_DEBUG_HEADER {WORD Signature;WORD Flags;WORD Machine;WORD Characteristics;DWORD TimeDateStamp;DWORD CheckSum;DWORD ImageBase;DWORD SizeOfImage;DWORD NumberOfSections;DWORD ExportedNamesSize;DWORD DebugDirectorySize;DWORD SectionAlignment;DWORD Reserved[2];};
struct _BY_HANDLE_FILE_INFORMATION {DWORD dwFileAttributes;FILETIME ftCreationTime;FILETIME ftLastAccessTime;FILETIME ftLastWriteTime;DWORD dwVolumeSerialNumber;DWORD nFileSizeHigh;DWORD nFileSizeLow;DWORD nNumberOfLinks;DWORD nFileIndexHigh;DWORD nFileIndexLow;};
struct _CERT_AUTHORITY_INFO_ACCESS {DWORD cAccDescr;PCERT_ACCESS_DESCRIPTION rgAccDescr;};
struct _CERT_POLICY_QUALIFIER_INFO {LPSTR pszPolicyQualifierId;CRYPT_OBJID_BLOB Qualifier;};
struct _CMSG_ENCRYPTED_ENCODE_INFO {DWORD cbSize;CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;void *pvEncryptionAuxInfo;};
struct _CRYPT_ALGORITHM_IDENTIFIER {LPSTR pszObjId;CRYPT_OBJID_BLOB Parameters;};
struct _CRYPT_ATTRIBUTE_TYPE_VALUE {LPSTR pszObjId;CRYPT_OBJID_BLOB Value;};
struct _CRYPT_DECRYPT_MESSAGE_PARA {DWORD cbSize;DWORD dwMsgAndCertEncodingType;DWORD cCertStore;HCERTSTORE *rghCertStore;};
struct _QUERY_SERVICE_LOCK_STATUSA {DWORD fIsLocked;LPSTR lpLockOwner;DWORD dwLockDuration;};
struct _REQUEST_RAW_ENCRYPTED_DATA {LONGLONG FileOffset;DWORD Length;};
struct tagSOLE_AUTHENTICATION_LIST {DWORD cAuthInfo;SOLE_AUTHENTICATION_INFO *aAuthInfo;};
typedef BOOL (__stdcall *PFN_CRYPT_CANCEL_RETRIEVAL)(DWORD dwFlags, void *pvArg);
struct _CERT_ISSUER_SERIAL_NUMBER {CERT_NAME_BLOB Issuer;CRYPT_INTEGER_BLOB SerialNumber;};
struct _IMAGE_BOUND_FORWARDER_REF {DWORD TimeDateStamp;WORD OffsetModuleName;WORD Reserved;};
struct _READ_ELEMENT_ADDRESS_INFO {DWORD NumberOfElements;CHANGER_ELEMENT_STATUS ElementStatus[1];};
struct _TAPE_GET_DRIVE_PARAMETERS {BOOLEAN ECC;BOOLEAN Compression;BOOLEAN DataPadding;BOOLEAN ReportSetmarks;DWORD DefaultBlockSize;DWORD MaximumBlockSize;DWORD MinimumBlockSize;DWORD MaximumPartitionCount;DWORD FeaturesLow;DWORD FeaturesHigh;DWORD EOTWarningZoneSize;};
struct _TAPE_SET_DRIVE_PARAMETERS {BOOLEAN ECC;BOOLEAN Compression;BOOLEAN DataPadding;BOOLEAN ReportSetmarks;DWORD EOTWarningZoneSize;};
struct _WIN32_FILE_ATTRIBUTE_DATA {DWORD dwFileAttributes;FILETIME ftCreationTime;FILETIME ftLastAccessTime;FILETIME ftLastWriteTime;DWORD nFileSizeHigh;DWORD nFileSizeLow;};
typedef void (__stdcall *PFN_CERT_STORE_PROV_CLOSE)(HCERTSTOREPROV hStoreProv, DWORD dwFlags);
typedef int (__stdcall *RPC_MGMT_AUTHORIZATION_FN)(RPC_BINDING_HANDLE ClientBinding, unsigned int RequestedMgmtOperation, RPC_STATUS *Status);
struct _CERT_CHAIN_ENGINE_CONFIG {DWORD cbSize;HCERTSTORE hRestrictedRoot;HCERTSTORE hRestrictedTrust;HCERTSTORE hRestrictedOther;DWORD cAdditionalStore;HCERTSTORE *rghAdditionalStore;DWORD dwFlags;DWORD dwUrlRetrievalTimeout;DWORD MaximumCachedCertificates;DWORD CycleDetectionModulus;};
struct _CERT_CHAIN_POLICY_STATUS {DWORD cbSize;DWORD dwError;LONG lChainIndex;LONG lElementIndex;void *pvExtraPolicyStatus;};
struct _CERT_CREATE_CONTEXT_PARA {DWORD cbSize;PFN_CRYPT_FREE pfnFree;void *pvFree;};
struct _CRYPT_SMIME_CAPABILITIES {DWORD cCapability;PCRYPT_SMIME_CAPABILITY rgCapability;};
struct _DRIVE_LAYOUT_INFORMATION {DWORD PartitionCount;DWORD Signature;PARTITION_INFORMATION PartitionEntry[1];};
struct _IMAGE_RESOURCE_DIRECTORY {DWORD Characteristics;DWORD TimeDateStamp;WORD MajorVersion;WORD MinorVersion;WORD NumberOfNamedEntries;WORD NumberOfIdEntries;};
struct _MIDL_STUBLESS_PROXY_INFO {PMIDL_STUB_DESC pStubDesc;PFORMAT_STRING ProcFormatString;const unsigned __int16 *FormatStringOffset;PFORMAT_STRING LocalFormatTypes;PFORMAT_STRING LocalProcString;const unsigned __int16 *LocalFmtStringOffset;};
struct _OUTPUT_DEBUG_STRING_INFO {LPSTR lpDebugStringData;WORD fUnicode;WORD nDebugStringLength;};
struct _PERF_INSTANCE_DEFINITION {DWORD ByteLength;DWORD ParentObjectTitleIndex;DWORD ParentObjectInstance;LONG UniqueID;DWORD NameOffset;DWORD NameLength;};
typedef void (__stdcall *LPSERVICE_MAIN_FUNCTIONA)(DWORD dwNumServicesArgs, LPSTR *lpServiceArgVectors);
struct _CERT_ACCESS_DESCRIPTION {LPSTR pszAccessMethod;CERT_ALT_NAME_ENTRY AccessLocation;};
struct _CERT_X942_DH_PARAMETERS {CRYPT_UINT_BLOB p;CRYPT_UINT_BLOB g;CRYPT_UINT_BLOB q;CRYPT_UINT_BLOB j;PCERT_X942_DH_VALIDATION_PARAMS pValidationParams;};
struct _CHANGER_EXCHANGE_MEDIUM {CHANGER_ELEMENT Transport;CHANGER_ELEMENT Source;CHANGER_ELEMENT Destination1;CHANGER_ELEMENT Destination2;BOOLEAN Flip1;BOOLEAN Flip2;};
struct _FILE_NOTIFY_INFORMATION {DWORD NextEntryOffset;DWORD Action;DWORD FileNameLength;WCHAR FileName[1];};
struct _IMAGE_IMPORT_DESCRIPTOR {_IMAGE_IMPORT_DESCRIPTOR___6AD513163D7E1ED317197F815B889A38 __anonymous0;DWORD TimeDateStamp;DWORD ForwarderChain;DWORD Name;DWORD FirstThunk;};
struct _STORAGE_PREDICT_FAILURE {DWORD PredictFailure;BYTE VendorSpecific[512];};
struct tagEMRSCALEVIEWPORTEXTEX {EMR emr;LONG xNum;LONG xDenom;LONG yNum;LONG yDenom;};
struct tagEMRSETCOLORADJUSTMENT {EMR emr;COLORADJUSTMENT ColorAdjustment;};
typedef BOOL (__stdcall *PFN_CRYPT_ENUM_OID_INFO)(PCCRYPT_OID_INFO pInfo, void *pvArg);
typedef void (__stdcall *WAITORTIMERCALLBACKFUNC)(PVOID, BOOLEAN);
struct _CMSG_CTRL_DECRYPT_PARA {DWORD cbSize;HCRYPTPROV hCryptProv;DWORD dwKeySpec;DWORD dwRecipientIndex;};
struct _CRYPT_SMIME_CAPABILITY {LPSTR pszObjId;CRYPT_OBJID_BLOB Parameters;};
struct _IMAGE_EXPORT_DIRECTORY {DWORD Characteristics;DWORD TimeDateStamp;WORD MajorVersion;WORD MinorVersion;DWORD Name;DWORD Base;DWORD NumberOfFunctions;DWORD NumberOfNames;DWORD AddressOfFunctions;DWORD AddressOfNames;DWORD AddressOfNameOrdinals;};
struct _IMAGE_FUNCTION_ENTRY64 {ULONGLONG StartingAddress;ULONGLONG EndingAddress;_IMAGE_FUNCTION_ENTRY64___20B872DD2F1538A436CF92B8294FA12B __anonymous0;};
struct _MESSAGE_RESOURCE_ENTRY {WORD Length;WORD Flags;BYTE Text[1];};
struct _PRINTER_NOTIFY_OPTIONS {DWORD Version;DWORD Flags;DWORD Count;PPRINTER_NOTIFY_OPTIONS_TYPE pTypes;};
struct _REMSECURITY_ATTRIBUTES {DWORD nLength;DWORD lpSecurityDescriptor;BOOL bInheritHandle;};
struct tagEMRSETWORLDTRANSFORM {EMR emr;XFORM xform;};
struct tagMCI_VD_ESCAPE_PARMSA {DWORD dwCallback;LPCSTR lpstrCommand;};
struct _CRYPT_SEQUENCE_OF_ANY {DWORD cValue;PCRYPT_DER_BLOB rgValue;};
struct _CTL_FIND_SUBJECT_PARA {DWORD cbSize;PCTL_FIND_USAGE_PARA pUsagePara;DWORD dwSubjectType;void *pvSubject;};
struct _FILESYSTEM_STATISTICS {WORD FileSystemType;WORD Version;DWORD SizeOfCompleteStructure;DWORD UserFileReads;DWORD UserFileReadBytes;DWORD UserDiskReads;DWORD UserFileWrites;DWORD UserFileWriteBytes;DWORD UserDiskWrites;DWORD MetaDataReads;DWORD MetaDataReadBytes;DWORD MetaDataDiskReads;DWORD MetaDataWrites;DWORD MetaDataWriteBytes;DWORD MetaDataDiskWrites;};
struct _IMAGE_DEBUG_DIRECTORY {DWORD Characteristics;DWORD TimeDateStamp;WORD MajorVersion;WORD MinorVersion;DWORD Type;DWORD SizeOfData;DWORD AddressOfRawData;DWORD PointerToRawData;};
struct _IMAGE_TLS_DIRECTORY64 {ULONGLONG StartAddressOfRawData;ULONGLONG EndAddressOfRawData;ULONGLONG AddressOfIndex;ULONGLONG AddressOfCallBacks;DWORD SizeOfZeroFill;DWORD Characteristics;};
struct _MESSAGE_RESOURCE_DATA {DWORD NumberOfBlocks;MESSAGE_RESOURCE_BLOCK Blocks[1];};
struct _QUERY_SERVICE_CONFIGA {DWORD dwServiceType;DWORD dwStartType;DWORD dwErrorControl;LPSTR lpBinaryPathName;LPSTR lpLoadOrderGroup;DWORD dwTagId;LPSTR lpDependencies;LPSTR lpServiceStartName;LPSTR lpDisplayName;};
struct _RPC_SYNTAX_IDENTIFIER {GUID SyntaxGUID;RPC_VERSION SyntaxVersion;};
struct __GENERIC_BINDING_INFO {void *pObj;unsigned int Size;GENERIC_BINDING_ROUTINE pfnBind;GENERIC_UNBIND_ROUTINE pfnUnbind;};
struct tagCOLORCORRECTPALETTE {EMR emr;DWORD ihPalette;DWORD nFirstEntry;DWORD nPalEntries;DWORD nReserved;};
struct tagDDEML_MSG_HOOK_DATA {UINT_PTR uiLo;UINT_PTR uiHi;DWORD cbData;DWORD Data[8];};
struct tagEMRSETVIEWPORTEXTEX {EMR emr;SIZEL szlExtent;};
struct tagEMRSETVIEWPORTORGEX {EMR emr;POINTL ptlOrigin;};
struct tagMCI_ANIM_RECT_PARMS {DWORD dwCallback;RECT rc;};
struct tagMCI_OVLY_RECT_PARMS {DWORD dwCallback;RECT rc;};
typedef void (__stdcall *APC_CALLBACK_FUNCTION)(DWORD, PVOID, PVOID);
typedef DWORD (__stdcall *LPHANDLER_FUNCTION_EX)(DWORD dwControl, DWORD dwEventType, LPVOID lpEventData, LPVOID lpContext);
typedef DWORD (__stdcall *PTHREAD_START_ROUTINE)(LPVOID lpThreadParameter);
struct _CERT_PUBLIC_KEY_INFO {CRYPT_ALGORITHM_IDENTIFIER Algorithm;CRYPT_BIT_BLOB PublicKey;};
struct _CHANGER_ELEMENT_LIST {CHANGER_ELEMENT Element;DWORD NumberOfElements;};
struct _CHANGER_SET_POSITION {CHANGER_ELEMENT Transport;CHANGER_ELEMENT Destination;BOOLEAN Flip;};
struct _CRL_DIST_POINTS_INFO {DWORD cDistPoint;PCRL_DIST_POINT rgDistPoint;};
struct _CRYPT_KEY_PROV_PARAM {DWORD dwParam;BYTE *pbData;DWORD cbData;DWORD dwFlags;};
struct _CTL_ANY_SUBJECT_INFO {CRYPT_ALGORITHM_IDENTIFIER SubjectAlgorithm;CRYPT_DATA_BLOB SubjectIdentifier;};
struct _ENUM_SERVICE_STATUSA {LPSTR lpServiceName;LPSTR lpDisplayName;SERVICE_STATUS ServiceStatus;};
struct _EXCEPTION_DEBUG_INFO {EXCEPTION_RECORD ExceptionRecord;DWORD dwFirstChance;};
struct _FILE_OBJECTID_BUFFER {BYTE ObjectId[16];_FILE_OBJECTID_BUFFER___77FE4681D295052E0E2CCB42A3EC532A __anonymous0;};
union _FILE_SEGMENT_ELEMENT {PVOID64 Buffer;ULONGLONG Alignment;};
struct _IMAGE_IMPORT_BY_NAME {WORD Hint;BYTE Name[1];};
struct _SERVICE_TABLE_ENTRYA {LPSTR lpServiceName;LPSERVICE_MAIN_FUNCTIONA lpServiceProc;};
struct tagCLIENTCREATESTRUCT {HANDLE hWindowMenu;UINT idFirstChild;};
struct tagEMRCREATEMONOBRUSH {EMR emr;DWORD ihBrush;DWORD iUsage;DWORD offBmi;DWORD cbBmi;DWORD offBits;DWORD cbBits;};
struct tagEMREXCLUDECLIPRECT {EMR emr;RECTL rclClip;};
struct tagEMRSETARCDIRECTION {EMR emr;DWORD iArcDirection;};
struct _CHANGER_MOVE_MEDIUM {CHANGER_ELEMENT Transport;CHANGER_ELEMENT Source;CHANGER_ELEMENT Destination;BOOLEAN Flip;};
struct _CONSOLE_CURSOR_INFO {DWORD dwSize;BOOL bVisible;};
struct _CRL_DIST_POINT_NAME {DWORD dwDistPointNameChoice;_CRL_DIST_POINT_NAME___3757901DA347ED4D4ADA336F060E6178 __anonymous0;};
struct _DISK_GROW_PARTITION {DWORD PartitionNumber;LARGE_INTEGER BytesToGrow;};
struct _LUID_AND_ATTRIBUTES {LUID Luid;DWORD Attributes;};
struct _PRINTER_NOTIFY_INFO {DWORD Version;DWORD Flags;DWORD Count;PRINTER_NOTIFY_INFO_DATA aData[1];};
struct _PROCESS_INFORMATION {HANDLE hProcess;HANDLE hThread;DWORD dwProcessId;DWORD dwThreadId;};
struct _SOCKET_ADDRESS_LIST {INT iAddressCount;SOCKET_ADDRESS Address[1];};
struct _SYSTEM_POWER_STATUS {BYTE ACLineStatus;BYTE BatteryFlag;BYTE BatteryLifePercent;BYTE Reserved1;DWORD BatteryLifeTime;DWORD BatteryFullLifeTime;};
struct _VOLUME_DISK_EXTENTS {DWORD NumberOfDiskExtents;DISK_EXTENT Extents[1];};
struct _wireSAFEARR_BRECORD {ULONG Size;wireBRECORD *aRecord;};
struct _wireSAFEARR_HAVEIID {ULONG Size;IUnknown **apUnknown;IID iid;};
struct _wireSAFEARR_VARIANT {ULONG Size;wireVARIANT *aVariant;};
struct tagCBTACTIVATESTRUCT {BOOL fMouse;HWND hWndActive;};
struct tagCLEANLOCALSTORAGE {IUnknown *pInterface;PVOID pStorage;DWORD flags;};
struct tagEMRSELECTCLIPPATH {EMR emr;DWORD iMode;};
struct tagEMRSETMAPPERFLAGS {EMR emr;DWORD dwFlags;};
struct tagMEASUREITEMSTRUCT {UINT CtlType;UINT CtlID;UINT itemID;UINT itemWidth;UINT itemHeight;ULONG_PTR itemData;};
struct tagNCCALCSIZE_PARAMS {RECT rgrc[3];PWINDOWPOS lppos;};
struct tagNONCLIENTMETRICSA {UINT cbSize;int iBorderWidth;int iScrollWidth;int iScrollHeight;int iCaptionWidth;int iCaptionHeight;LOGFONTA lfCaptionFont;int iSmCaptionWidth;int iSmCaptionHeight;LOGFONTA lfSmCaptionFont;int iMenuWidth;int iMenuHeight;LOGFONTA lfMenuFont;LOGFONTA lfStatusFont;LOGFONTA lfMessageFont;};
struct tagNONCLIENTMETRICSW {UINT cbSize;int iBorderWidth;int iScrollWidth;int iScrollHeight;int iCaptionWidth;int iCaptionHeight;LOGFONTW lfCaptionFont;int iSmCaptionWidth;int iSmCaptionHeight;LOGFONTW lfSmCaptionFont;int iMenuWidth;int iMenuHeight;LOGFONTW lfMenuFont;LOGFONTW lfStatusFont;LOGFONTW lfMessageFont;};
typedef void (__stdcall *PIMAGE_TLS_CALLBACK)(PVOID DllHandle, DWORD Reason, PVOID Reserved);
struct _CERT_ALT_NAME_INFO {DWORD cAltEntry;PCERT_ALT_NAME_ENTRY rgAltEntry;};
struct _CERT_POLICIES_INFO {DWORD cPolicyInfo;CERT_POLICY_INFO *rgPolicyInfo;};
struct _CHANGER_SET_ACCESS {CHANGER_ELEMENT Element;DWORD Control;};
struct _CRYPT_CONTENT_INFO {LPSTR pszObjId;CRYPT_DER_BLOB Content;};
struct _EXCEPTION_POINTERS {PEXCEPTION_RECORD ExceptionRecord;PCONTEXT ContextRecord;};
struct _EXCEPTION_RECORD64 {DWORD ExceptionCode;DWORD ExceptionFlags;DWORD64 ExceptionRecord;DWORD64 ExceptionAddress;DWORD NumberParameters;DWORD __unusedAlignment;DWORD64 ExceptionInformation[15];};
struct _FLOATING_SAVE_AREA {DWORD ControlWord;DWORD StatusWord;DWORD TagWord;DWORD ErrorOffset;DWORD ErrorSelector;DWORD DataOffset;DWORD DataSelector;BYTE RegisterArea[80];DWORD Cr0NpxState;};
struct _GETVERSIONINPARAMS {BYTE bVersion;BYTE bRevision;BYTE bReserved;BYTE bIDEDeviceMap;DWORD fCapabilities;DWORD dwReserved[4];};
struct _MOUSE_EVENT_RECORD {COORD dwMousePosition;DWORD dwButtonState;DWORD dwControlKeyState;DWORD dwEventFlags;};
struct _SID_AND_ATTRIBUTES {PSID Sid;DWORD Attributes;};
struct _VERIFY_INFORMATION {LARGE_INTEGER StartingOffset;DWORD Length;};
struct tagBITMAPCOREHEADER {DWORD bcSize;WORD bcWidth;WORD bcHeight;WORD bcPlanes;WORD bcBitCount;};
struct tagBITMAPFILEHEADER {WORD bfType;DWORD bfSize;WORD bfReserved1;WORD bfReserved2;DWORD bfOffBits;};
struct tagEMROFFSETCLIPRGN {EMR emr;POINTL ptlOffset;};
struct tagEMRRESIZEPALETTE {EMR emr;DWORD ihPal;DWORD cEntries;};
struct tagEMRSELECTPALETTE {EMR emr;DWORD ihPal;};
struct tagEMRSETCOLORSPACE {EMR emr;DWORD ihCS;};
struct tagEMRSETMITERLIMIT {EMR emr;FLOAT eMiterLimit;};
struct tagENUMLOGFONTEXDVA {ENUMLOGFONTEXA elfEnumLogfontEx;DESIGNVECTOR elfDesignVector;};
struct tagENUMLOGFONTEXDVW {ENUMLOGFONTEXW elfEnumLogfontEx;DESIGNVECTOR elfDesignVector;};
struct tagHW_PROFILE_INFOA {DWORD dwDockInfo;CHAR szHwProfileGuid[39];CHAR szHwProfileName[80];};
struct tagHW_PROFILE_INFOW {DWORD dwDockInfo;WCHAR szHwProfileGuid[39];WCHAR szHwProfileName[80];};
struct tagNEWTEXTMETRICEXA {NEWTEXTMETRICA ntmTm;FONTSIGNATURE ntmFontSig;};
struct tagNEWTEXTMETRICEXW {NEWTEXTMETRICW ntmTm;FONTSIGNATURE ntmFontSig;};
typedef BOOL (__stdcall *CODEPAGE_ENUMPROCA)(LPSTR);
typedef RPC_STATUS __stdcall RPC_IF_CALLBACK_FN(RPC_IF_HANDLE InterfaceUuid, void *Context);
struct _CRYPT_OBJID_TABLE {DWORD dwAlgId;LPCSTR pszObjId;};
struct _ENCRYPTION_BUFFER {DWORD EncryptionOperation;BYTE Private[1];};
struct _FORMAT_PARAMETERS {MEDIA_TYPE MediaType;DWORD StartCylinderNumber;DWORD EndCylinderNumber;DWORD StartHeadNumber;DWORD EndHeadNumber;};
struct _GLYPHMETRICSFLOAT {FLOAT gmfBlackBoxX;FLOAT gmfBlackBoxY;POINTFLOAT gmfptGlyphOrigin;FLOAT gmfCellIncX;FLOAT gmfCellIncY;};
struct _IMAGE_FILE_HEADER {WORD Machine;WORD NumberOfSections;DWORD TimeDateStamp;DWORD PointerToSymbolTable;DWORD NumberOfSymbols;WORD SizeOfOptionalHeader;WORD Characteristics;};
struct _IMAGE_ROM_HEADERS {IMAGE_FILE_HEADER FileHeader;IMAGE_ROM_OPTIONAL_HEADER OptionalHeader;};
struct _TAPE_GET_POSITION {DWORD Type;DWORD Partition;LARGE_INTEGER Offset;};
struct tagCOLORADJUSTMENT {WORD caSize;WORD caFlags;WORD caIlluminantIndex;WORD caRedGamma;WORD caGreenGamma;WORD caBlueGamma;WORD caReferenceBlack;WORD caReferenceWhite;SHORT caContrast;SHORT caBrightness;SHORT caColorfulness;SHORT caRedGreenTint;};
struct tagEMRSELECTOBJECT {EMR emr;DWORD ihObject;};
struct tagEMRSETTEXTCOLOR {EMR emr;COLORREF crColor;};
struct tagENUMTEXTMETRICA {NEWTEXTMETRICEXA etmNewTextMetricEx;AXESLISTA etmAxesList;};
struct tagENUMTEXTMETRICW {NEWTEXTMETRICEXW etmNewTextMetricEx;AXESLISTW etmAxesList;};
struct tagKBDLLHOOKSTRUCT {DWORD vkCode;DWORD scanCode;DWORD flags;DWORD time;ULONG_PTR dwExtraInfo;};
struct tagMCI_BREAK_PARMS {DWORD dwCallback;int nVirtKey;HWND hwndBreak;};
struct tagMCI_INFO_PARMSA {DWORD dwCallback;LPSTR lpstrReturn;DWORD dwRetSize;};
struct tagMCI_LOAD_PARMSA {DWORD dwCallback;LPCSTR lpfilename;};
struct tagMCI_SAVE_PARMSA {DWORD dwCallback;LPCSTR lpfilename;};
struct tagTRACKMOUSEEVENT {DWORD cbSize;DWORD dwFlags;HWND hwndTrack;DWORD dwHoverTime;};
struct tagTTPOLYGONHEADER {DWORD cb;DWORD dwType;POINTFX pfxStart;};
struct tagUSEROBJECTFLAGS {BOOL fInherit;BOOL fReserved;DWORD dwFlags;};
typedef BOOL (__stdcall *CALINFO_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall *DATEFMT_ENUMPROCA)(LPSTR);
typedef void __stdcall RPC_OBJECT_INQ_FN(UUID *ObjectUuid, UUID *TypeUuid, RPC_STATUS *Status);
typedef BOOL (__stdcall *TIMEFMT_ENUMPROCA)(LPSTR);
struct _CERTIFICATE_BLOB {DWORD dwCertEncodingType;DWORD cbData;PBYTE pbData;};
struct _CERT_KEY_CONTEXT {DWORD cbSize;HCRYPTPROV hCryptProv;DWORD dwKeySpec;};
struct _CERT_USAGE_MATCH {DWORD dwType;CERT_ENHKEY_USAGE Usage;};
struct _CRYPT_ATTRIBUTES {DWORD cAttr;PCRYPT_ATTRIBUTE rgAttr;};
struct _CRYPT_BLOB_ARRAY {DWORD cBlob;PCRYPT_DATA_BLOB rgBlob;};
struct _FIND_NAME_HEADER {WORD node_count;UCHAR reserved;UCHAR unique_group;};
struct _IMAGE_DOS_HEADER {WORD e_magic;WORD e_cblp;WORD e_cp;WORD e_crlc;WORD e_cparhdr;WORD e_minalloc;WORD e_maxalloc;WORD e_ss;WORD e_sp;WORD e_csum;WORD e_ip;WORD e_cs;WORD e_lfarlc;WORD e_ovno;WORD e_res[4];WORD e_oemid;WORD e_oeminfo;WORD e_res2[10];LONG e_lfanew;};
struct _IMAGE_LINENUMBER {union _IMAGE_LINENUMBER___323A99206959B5083BD9C46482D6FCE5 Type;WORD Linenumber;};
struct _KEY_TYPE_SUBTYPE {DWORD dwKeySpec;GUID Type;GUID Subtype;};
struct _OBJECT_TYPE_LIST {WORD Level;WORD Sbz;GUID *ObjectType;};
struct _QOS_SHAPING_RATE {QOS_OBJECT_HDR ObjectHdr;ULONG ShapingRate;};
struct _QualityOfService {FLOWSPEC SendingFlowspec;FLOWSPEC ReceivingFlowspec;WSABUF ProviderSpecific;};
struct _TAPE_WRITE_MARKS {DWORD Type;DWORD Count;BOOLEAN Immediate;};
struct _TOKEN_PRIVILEGES {DWORD PrivilegeCount;LUID_AND_ATTRIBUTES Privileges[1];};
struct _wireSAFEARR_BSTR {ULONG Size;wireBSTR *aBstr;};
struct pcmwaveformat_tag {WAVEFORMAT wf;WORD wBitsPerSample;};
struct tagBITMAPCOREINFO {BITMAPCOREHEADER bmciHeader;RGBTRIPLE bmciColors[1];};
struct tagEMRPIXELFORMAT {EMR emr;PIXELFORMATDESCRIPTOR pfd;};
struct tagENUMLOGFONTEXA {LOGFONTA elfLogFont;BYTE elfFullName[64];BYTE elfStyle[32];BYTE elfScript[32];};
struct tagENUMLOGFONTEXW {LOGFONTW elfLogFont;WCHAR elfFullName[64];WCHAR elfStyle[32];WCHAR elfScript[32];};
struct tagMOUSEMOVEPOINT {int x;int y;DWORD time;ULONG_PTR dwExtraInfo;};
struct tagSAFEARRAYBOUND {ULONG cElements;LONG lLbound;};
typedef BOOL (__stdcall *LOCALE_ENUMPROCA)(LPSTR);
typedef UINT (__stdcall *LPFNPSPCALLBACKA)(HWND hwnd, UINT uMsg, struct _PROPSHEETPAGEA *ppsp);
typedef UINT (__stdcall *LPFNPSPCALLBACKW)(HWND hwnd, UINT uMsg, struct _PROPSHEETPAGEW *ppsp);
typedef BOOL (__stdcall *PHANDLER_ROUTINE)(DWORD CtrlType);
typedef void (__stdcall *PTIMERAPCROUTINE)(LPVOID lpArgToCompletionRoutine, DWORD dwTimerLowValue, DWORD dwTimerHighValue);
struct _CERT_CHAIN_PARA {DWORD cbSize;CERT_USAGE_MATCH RequestedUsage;};
struct _CERT_EXTENSIONS {DWORD cExtension;PCERT_EXTENSION rgExtension;};
struct _CERT_NAME_VALUE {DWORD dwValueType;CERT_RDN_VALUE_BLOB Value;};
struct _CERT_OTHER_NAME {LPSTR pszObjId;CRYPT_OBJID_BLOB Value;};
struct _CHANGER_ELEMENT {ELEMENT_TYPE ElementType;DWORD ElementAddress;};
struct _CRYPT_HASH_INFO {CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;CRYPT_HASH_BLOB Hash;};
struct _CTL_USAGE_MATCH {DWORD dwType;CTL_USAGE Usage;};
struct _DISPLAY_DEVICEA {DWORD cb;CHAR DeviceName[32];CHAR DeviceString[128];DWORD StateFlags;CHAR DeviceID[128];CHAR DeviceKey[128];};
struct _DISPLAY_DEVICEW {DWORD cb;WCHAR DeviceName[32];WCHAR DeviceString[128];DWORD StateFlags;WCHAR DeviceID[128];WCHAR DeviceKey[128];};
struct _GET_MEDIA_TYPES {DWORD DeviceType;DWORD MediaInfoCount;DEVICE_MEDIA_INFO MediaInfo[1];};
struct _PATHNAME_BUFFER {DWORD PathNameLength;WCHAR Name[1];};
struct _PRINTER_INFO_1A {DWORD Flags;LPSTR pDescription;LPSTR pName;LPSTR pComment;};
struct _PRINTER_INFO_4A {LPSTR pPrinterName;LPSTR pServerName;DWORD Attributes;};
struct _PRINTER_INFO_5A {LPSTR pPrinterName;LPSTR pPortName;DWORD Attributes;DWORD DeviceNotSelectedTimeout;DWORD TransmissionRetryTimeout;};
struct _PRINTER_INFO_7A {LPSTR pszObjectGUID;DWORD dwAction;};
struct _REASSIGN_BLOCKS {WORD Reserved;WORD Count;DWORD BlockNumber[1];};
struct tagACCESSTIMEOUT {UINT cbSize;DWORD dwFlags;DWORD iTimeOutMSec;};
struct tagCAPROPVARIANT {ULONG cElems;PROPVARIANT *pElems;};
struct tagHARDWAREINPUT {DWORD uMsg;WORD wParamL;WORD wParamH;};
struct tagINTERFACEDATA {METHODDATA *pmethdata;UINT cMembers;};
struct tagINTERFACEINFO {IUnknown *pUnk;IID iid;WORD wMethod;};
struct tagLASTINPUTINFO {UINT cbSize;DWORD dwTime;};
struct tagMULTIKEYHELPA {DWORD mkSize;CHAR mkKeylist;CHAR szKeyphrase[1];};
struct tagMULTIKEYHELPW {DWORD mkSize;WCHAR mkKeylist;WCHAR szKeyphrase[1];};
struct tagRPCOLEMESSAGE {void *reserved1;RPCOLEDATAREP dataRepresentation;void *Buffer;ULONG cbBuffer;ULONG iMethod;void *reserved2[5];ULONG rpcFlags;};
struct tagSCROLLBARINFO {DWORD cbSize;RECT rcScrollBar;int dxyLineButton;int xyThumbTop;int xyThumbBottom;int reserved;DWORD rgstate[6];};
typedef LPVOID (__stdcall *PFN_CRYPT_ALLOC)(size_t cbSize);
struct _ADDJOB_INFO_1A {LPSTR Path;DWORD JobId;};
struct _CERT_NAME_INFO {DWORD cRDN;PCERT_RDN rgRDN;};
struct _CERT_POLICY_ID {DWORD cCertPolicyElementId;LPSTR *rgpszCertPolicyElementId;};
struct _COAUTHIDENTITY {USHORT *User;ULONG UserLength;USHORT *Domain;ULONG DomainLength;USHORT *Password;ULONG PasswordLength;ULONG Flags;};
struct _CRYPTOAPI_BLOB {DWORD cbData;BYTE *pbData;};
struct _CRYPT_BIT_BLOB {DWORD cbData;BYTE *pbData;DWORD cUnusedBits;};
struct _DRIVER_INFO_2A {DWORD cVersion;LPSTR pName;LPSTR pEnvironment;LPSTR pDriverPath;LPSTR pDataFile;LPSTR pConfigFile;};
struct _DRIVER_INFO_3A {DWORD cVersion;LPSTR pName;LPSTR pEnvironment;LPSTR pDriverPath;LPSTR pDataFile;LPSTR pConfigFile;LPSTR pHelpFile;LPSTR pDependentFiles;LPSTR pMonitorName;LPSTR pDefaultDataType;};
struct _DRIVER_INFO_4A {DWORD cVersion;LPSTR pName;LPSTR pEnvironment;LPSTR pDriverPath;LPSTR pDataFile;LPSTR pConfigFile;LPSTR pHelpFile;LPSTR pDependentFiles;LPSTR pMonitorName;LPSTR pDefaultDataType;LPSTR pszzPreviousNames;};
struct _DRIVER_INFO_5A {DWORD cVersion;LPSTR pName;LPSTR pEnvironment;LPSTR pDriverPath;LPSTR pDataFile;LPSTR pConfigFile;DWORD dwDriverAttributes;DWORD dwConfigVersion;DWORD dwDriverVersion;};
struct _EVENTLOGRECORD {DWORD Length;DWORD Reserved;DWORD RecordNumber;DWORD TimeGenerated;DWORD TimeWritten;DWORD EventID;WORD EventType;WORD NumStrings;WORD EventCategory;WORD ReservedFlags;DWORD ClosingRecordNumber;DWORD StringOffset;DWORD UserSidLength;DWORD UserSidOffset;DWORD DataLength;DWORD DataOffset;};
struct _MEMORYSTATUSEX {DWORD dwLength;DWORD dwMemoryLoad;DWORDLONG ullTotalPhys;DWORDLONG ullAvailPhys;DWORDLONG ullTotalPageFile;DWORDLONG ullAvailPageFile;DWORDLONG ullTotalVirtual;DWORDLONG ullAvailVirtual;DWORDLONG ullAvailExtendedVirtual;};
struct _OSVERSIONINFOA {DWORD dwOSVersionInfoSize;DWORD dwMajorVersion;DWORD dwMinorVersion;DWORD dwBuildNumber;DWORD dwPlatformId;CHAR szCSDVersion[128];};
struct _OSVERSIONINFOW {DWORD dwOSVersionInfoSize;DWORD dwMajorVersion;DWORD dwMinorVersion;DWORD dwBuildNumber;DWORD dwPlatformId;WCHAR szCSDVersion[128];};
struct _SOCKET_ADDRESS {LPSOCKADDR lpSockaddr;INT iSockaddrLength;};
union _ULARGE_INTEGER {_ULARGE_INTEGER___0354AA9C204208F00D0965D07BBE7FAC __anonymous0;struct _ULARGE_INTEGER___0354AA9C204208F00D0965D07BBE7FAC u;ULONGLONG QuadPart;};
struct _wfinddatai64_t {unsigned int attrib;time_t time_create;time_t time_access;time_t time_write;__int64 size;wchar_t name[260];};
struct tagCUSTDATAITEM {GUID guid;VARIANTARG varValue;};
struct tagDESIGNVECTOR {DWORD dvReserved;DWORD dvNumAxes;LONG dvValues[16];};
struct tagEMRRESTOREDC {EMR emr;LONG iRelative;};
struct tagENUMLOGFONTA {LOGFONTA elfLogFont;BYTE elfFullName[64];BYTE elfStyle[32];};
struct tagENUMLOGFONTW {LOGFONTW elfLogFont;WCHAR elfFullName[64];WCHAR elfStyle[32];};
struct tagICONMETRICSA {UINT cbSize;int iHorzSpacing;int iVertSpacing;int iTitleWrap;LOGFONTA lfFont;};
struct tagICONMETRICSW {UINT cbSize;int iHorzSpacing;int iVertSpacing;int iTitleWrap;LOGFONTW lfFont;};
struct tagMETAFILEPICT {LONG mm;LONG xExt;LONG yExt;HMETAFILE hMF;};
struct tagRemFORMATETC {DWORD cfFormat;DWORD ptd;DWORD dwAspect;LONG lindex;DWORD tymed;};
struct tagRemSTGMEDIUM {DWORD tymed;DWORD dwHandleType;unsigned int pData;unsigned int pUnkForRelease;unsigned int cbData;byte data[1];};
struct tagTITLEBARINFO {DWORD cbSize;RECT rcTitleBar;DWORD rgstate[6];};
struct _ACTION_HEADER {ULONG transport_id;USHORT action_code;USHORT reserved;};
struct _EFS_HASH_BLOB {DWORD cbData;PBYTE pbData;};
union _LARGE_INTEGER {_LARGE_INTEGER___837407842DC9087486FDFA5FEB63B74E __anonymous0;struct _LARGE_INTEGER___837407842DC9087486FDFA5FEB63B74E u;LONGLONG QuadPart;};
struct _MODEMSETTINGS {DWORD dwActualSize;DWORD dwRequiredSize;DWORD dwDevSpecificOffset;DWORD dwDevSpecificSize;DWORD dwCallSetupFailTimer;DWORD dwInactivityTimeout;DWORD dwSpeakerVolume;DWORD dwSpeakerMode;DWORD dwPreferredModemOptions;DWORD dwNegotiatedModemOptions;DWORD dwNegotiatedDCERate;BYTE abVariablePortion[1];};
struct _OLESTREAMVTBL {DWORD (__stdcall *Get)(LPOLESTREAM, void *, DWORD);DWORD (__stdcall *Put)(LPOLESTREAM, const void *, DWORD);};
struct _PRIVILEGE_SET {DWORD PrivilegeCount;DWORD Control;LUID_AND_ATTRIBUTES Privilege[1];};
struct _RGNDATAHEADER {DWORD dwSize;DWORD iType;DWORD nCount;DWORD nRgnSize;RECT rcBound;};
struct _TOKEN_CONTROL {LUID TokenId;LUID AuthenticationId;LUID ModifiedId;TOKEN_SOURCE TokenSource;};
struct _WSAOVERLAPPED {DWORD Internal;DWORD InternalHigh;DWORD Offset;DWORD OffsetHigh;WSAEVENT hEvent;};
struct tagCHARSETINFO {UINT ciCharset;UINT ciACP;FONTSIGNATURE fs;};
struct tagEMRFILLPATH {EMR emr;RECTL rclBounds;};
struct tagMDINEXTMENU {HMENU hmenuIn;HMENU hmenuNext;HWND hwndNext;};
struct tagMONITORINFO {DWORD cbSize;RECT rcMonitor;RECT rcWork;DWORD dwFlags;};
struct tagPARAMDESCEX {ULONG cBytes;VARIANTARG varDefaultValue;};
struct tagTEXTMETRICA {LONG tmHeight;LONG tmAscent;LONG tmDescent;LONG tmInternalLeading;LONG tmExternalLeading;LONG tmAveCharWidth;LONG tmMaxCharWidth;LONG tmWeight;LONG tmOverhang;LONG tmDigitizedAspectX;LONG tmDigitizedAspectY;BYTE tmFirstChar;BYTE tmLastChar;BYTE tmDefaultChar;BYTE tmBreakChar;BYTE tmItalic;BYTE tmUnderlined;BYTE tmStruckOut;BYTE tmPitchAndFamily;BYTE tmCharSet;};
struct tagTTPOLYCURVE {WORD wType;WORD cpfx;POINTFX apfx[1];};
struct waveformat_tag {WORD wFormatTag;WORD nChannels;DWORD nSamplesPerSec;DWORD nAvgBytesPerSec;WORD nBlockAlign;};
struct CONFIRMSAFETY {CLSID clsid;IUnknown *pUnk;DWORD dwFlags;};
struct _DRIVERSTATUS {BYTE bDriverError;BYTE bIDEError;BYTE bReserved[2];DWORD dwReserved[2];};
struct _GLYPHMETRICS {UINT gmBlackBoxX;UINT gmBlackBoxY;POINT gmptGlyphOrigin;__int16 gmCellIncX;__int16 gmCellIncY;};
struct _MEMORYSTATUS {DWORD dwLength;DWORD dwMemoryLoad;SIZE_T dwTotalPhys;SIZE_T dwAvailPhys;SIZE_T dwTotalPageFile;SIZE_T dwAvailPageFile;SIZE_T dwTotalVirtual;SIZE_T dwAvailVirtual;};
struct _MODEMDEVCAPS {DWORD dwActualSize;DWORD dwRequiredSize;DWORD dwDevSpecificOffset;DWORD dwDevSpecificSize;DWORD dwModemProviderVersion;DWORD dwModemManufacturerOffset;DWORD dwModemManufacturerSize;DWORD dwModemModelOffset;DWORD dwModemModelSize;DWORD dwModemVersionOffset;DWORD dwModemVersionSize;DWORD dwDialOptions;DWORD dwCallSetupFailTimer;DWORD dwInactivityTimeout;DWORD dwSpeakerVolume;DWORD dwSpeakerMode;DWORD dwModemOptions;DWORD dwMaxDTERate;DWORD dwMaxDCERate;BYTE abVariablePortion[1];};
struct _NETRESOURCEA {DWORD dwScope;DWORD dwType;DWORD dwDisplayType;DWORD dwUsage;LPSTR lpLocalName;LPSTR lpRemoteName;LPSTR lpComment;LPSTR lpProvider;};
struct _PORT_INFO_2A {LPSTR pPortName;LPSTR pMonitorName;LPSTR pDescription;DWORD fPortType;DWORD Reserved;};
struct _PORT_INFO_3A {DWORD dwStatus;LPSTR pszStatus;DWORD dwSeverity;};
struct _PSINJECTDATA {DWORD DataBytes;WORD InjectionPoint;WORD PageNumber;};
struct _QUOTA_LIMITS {SIZE_T PagedPoolLimit;SIZE_T NonPagedPoolLimit;SIZE_T MinimumWorkingSetSize;SIZE_T MaximumWorkingSetSize;SIZE_T PagefileLimit;LARGE_INTEGER TimeLimit;};
struct _SCHANNEL_ALG {DWORD dwUse;ALG_ID Algid;DWORD cBits;DWORD dwFlags;DWORD dwReserved;};
struct _TAPE_PREPARE {DWORD Operation;BOOLEAN Immediate;};
struct _TOKEN_GROUPS {DWORD GroupCount;SID_AND_ATTRIBUTES Groups[1];};
struct _TOKEN_SOURCE {CHAR SourceName[8];LUID SourceIdentifier;};
struct _currencyfmtA {UINT NumDigits;UINT LeadingZero;UINT Grouping;LPSTR lpDecimalSep;LPSTR lpThousandSep;UINT NegativeOrder;UINT PositiveOrder;LPSTR lpCurrencySymbol;};
struct tWAVEFORMATEX {WORD wFormatTag;WORD nChannels;DWORD nSamplesPerSec;DWORD nAvgBytesPerSec;WORD nBlockAlign;WORD wBitsPerSample;WORD cbSize;};
struct tagALTTABINFO {DWORD cbSize;int cItems;int cColumns;int cRows;int iColFocus;int iRowFocus;int cxItem;int cyItem;POINT ptStart;};
struct tagBITMAPINFO {BITMAPINFOHEADER bmiHeader;RGBQUAD bmiColors[1];};
struct tagCABSTRBLOB {ULONG cElems;BSTRBLOB *pElems;};
struct tagCACLIPDATA {ULONG cElems;CLIPDATA *pElems;};
struct tagCAFILETIME {ULONG cElems;FILETIME *pElems;};
struct tagEMRELLIPSE {EMR emr;RECTL rclBox;};
struct tagFILTERKEYS {UINT cbSize;DWORD dwFlags;DWORD iWaitMSec;DWORD iDelayMSec;DWORD iRepeatMSec;DWORD iBounceMSec;};
struct tagLOGPALETTE {WORD palVersion;WORD palNumEntries;PALETTEENTRY palPalEntry[1];};
struct tagMETAHEADER {WORD mtType;WORD mtHeaderSize;WORD mtVersion;DWORD mtSize;WORD mtNoObjects;DWORD mtMaxRecord;WORD mtNoParameters;};
struct tagMETARECORD {DWORD rdSize;WORD rdFunction;WORD rdParm[1];};
struct tagSTGOPTIONS {USHORT usVersion;USHORT reserved;ULONG ulSectorSize;};
struct tagSTICKYKEYS {UINT cbSize;DWORD dwFlags;};
struct tagTOGGLEKEYS {UINT cbSize;DWORD dwFlags;};
typedef int (__stdcall *GOBJENUMPROC)(LPVOID, LPARAM);
typedef int (__stdcall *ICMENUMPROCA)(LPSTR, LPARAM);
typedef void __stdcall TIMECALLBACK(UINT uTimerID, UINT uMsg, DWORD dwUser, DWORD dw1, DWORD dw2);
struct _BIN_RESULTS {DWORD NumberOfBins;BIN_COUNT BinCounts[1];};
struct _CSADDR_INFO {SOCKET_ADDRESS LocalAddr;SOCKET_ADDRESS RemoteAddr;INT iSocketType;INT iProtocol;};
struct _DISK_EXTENT {DWORD DiskNumber;LARGE_INTEGER StartingOffset;LARGE_INTEGER ExtentLength;};
struct _DOC_INFO_2A {LPSTR pDocName;LPSTR pOutputFile;LPSTR pDatatype;DWORD dwMode;DWORD JobId;};
struct _DOC_INFO_3A {LPSTR pDocName;LPSTR pOutputFile;LPSTR pDatatype;DWORD dwFlags;};
struct _DRAWPATRECT {POINT ptPosition;POINT ptSize;WORD wStyle;WORD wPattern;};
struct _PRIVKEYVER3 {DWORD magic;DWORD bitlenP;DWORD bitlenQ;DWORD bitlenJ;DWORD bitlenX;DSSSEED DSSSeed;};
struct _QOS_SD_MODE {QOS_OBJECT_HDR ObjectHdr;ULONG ShapeDiscardMode;};
struct _RPC_MESSAGE {RPC_BINDING_HANDLE Handle;unsigned int DataRepresentation;void *Buffer;unsigned int BufferLength;unsigned int ProcNum;PRPC_SYNTAX_IDENTIFIER TransferSyntax;void *RpcInterfaceInformation;void *ReservedForRuntime;void *ManagerEpv;void *ImportContext;unsigned int RpcFlags;};
struct _SI_COPYFILE {DWORD SourceFileNameLength;DWORD DestinationFileNameLength;DWORD Flags;WCHAR FileNameBuffer[1];};
struct _wfinddata_t {unsigned int attrib;time_t time_create;time_t time_access;time_t time_write;int size;wchar_t name[260];};
struct _wireBRECORD {ULONG fFlags;ULONG clSize;IRecordInfo *pRecInfo;byte *pRecord;};
struct tagAXESLISTA {DWORD axlReserved;DWORD axlNumAxes;AXISINFOA axlAxisInfo[16];};
struct tagAXESLISTW {DWORD axlReserved;DWORD axlNumAxes;AXISINFOW axlAxisInfo[16];};
struct tagAXISINFOA {LONG axMinValue;LONG axMaxValue;BYTE axAxisName[16];};
struct tagAXISINFOW {LONG axMinValue;LONG axMaxValue;WCHAR axAxisName[16];};
struct tagEMRLINETO {EMR emr;POINTL ptl;};
struct tagMOUSEKEYS {UINT cbSize;DWORD dwFlags;DWORD iMaxSpeed;DWORD iTimeToMaxSpeed;DWORD iCtrlSpeed;DWORD dwReserved1;DWORD dwReserved2;};
struct tagPARAMDESC {LPPARAMDESCEX pparamdescex;USHORT wParamFlags;};
struct tagSTYLEBUFA {DWORD dwStyle;CHAR szDescription[32];};
struct tagSTYLEBUFW {DWORD dwStyle;WCHAR szDescription[32];};
struct tagTPMPARAMS {UINT cbSize;RECT rcExclude;};
struct tagWINDOWPOS {HWND hwnd;HWND hwndInsertAfter;int x;int y;int cx;int cy;UINT flags;};
struct _ACE_HEADER {BYTE AceType;BYTE AceFlags;WORD AceSize;};
struct _PUBKEYVER3 {DWORD magic;DWORD bitlenP;DWORD bitlenQ;DWORD bitlenJ;DSSSEED DSSSeed;};
struct _TAPE_ERASE {DWORD Type;BOOLEAN Immediate;};
struct _WSAVersion {DWORD dwVersion;WSAECOMPARATOR ecHow;};
struct _numberfmtA {UINT NumDigits;UINT LeadingZero;UINT Grouping;LPSTR lpDecimalSep;LPSTR lpThousandSep;UINT NegativeOrder;};
struct midihdr_tag {LPSTR lpData;DWORD dwBufferLength;DWORD dwBytesRecorded;DWORD dwUser;DWORD dwFlags;struct midihdr_tag *lpNext;DWORD reserved;DWORD dwOffset;DWORD dwReserved[8];};
struct tagBSTRBLOB {ULONG cbSize;BYTE *pData;};
struct tagCLIPDATA {ULONG cbSize;int ulClipFmt;BYTE *pClipData;};
struct tagCUSTDATA {DWORD cCustData;LPCUSTDATAITEM prgCustData;};
struct tagELEMDESC {TYPEDESC tdesc;tagELEMDESC___7C8F4CED1424251743D09680A1A0B07D __anonymous0;};
struct tagGLYPHSET {DWORD cbThis;DWORD flAccel;DWORD cGlyphsSupported;DWORD cRanges;WCRANGE ranges[1];};
struct tagMULTI_QI {const IID *pIID;IUnknown *pItf;HRESULT hr;};
struct tagPELARRAY {LONG paXCount;LONG paYCount;LONG paXExt;LONG paYExt;BYTE paRGBs;};
struct tagSTATDATA {FORMATETC formatetc;DWORD advf;IAdviseSink *pAdvSink;DWORD dwConnection;};
struct wavehdr_tag {LPSTR lpData;DWORD dwBufferLength;DWORD dwBytesRecorded;DWORD dwUser;DWORD dwFlags;DWORD dwLoops;struct wavehdr_tag *lpNext;DWORD reserved;};
struct _BIN_COUNT {BIN_RANGE BinRange;DWORD BinCount;};
struct _CHAR_INFO {union _CHAR_INFO___0E79EC4DAC98A4AB202537FA8C3F69FC Char;WORD Attributes;};
struct _CTL_USAGE {DWORD cUsageIdentifier;LPSTR *rgpszUsageIdentifier;};
struct _LDT_ENTRY {WORD LimitLow;WORD BaseLow;union _LDT_ENTRY___95C81B8F3DD6C8D0A2F7AF8EEE24F097 HighWord;};
struct _PSHNOTIFY {NMHDR hdr;LPARAM lParam;};
struct _SC_ACTION {SC_ACTION_TYPE Type;DWORD Delay;};
struct _TRIVERTEX {LONG x;LONG y;COLOR16 Red;COLOR16 Green;COLOR16 Blue;COLOR16 Alpha;};
union tagBINDPTR {FUNCDESC *lpfuncdesc;VARDESC *lpvardesc;ITypeComp *lptcomp;};
struct tagCACLSID {ULONG cElems;CLSID *pElems;};
struct tagCALPSTR {ULONG cElems;LPSTR *pElems;};
struct tagCASCODE {ULONG cElems;SCODE *pElems;};
struct tagIDLDESC {ULONG_PTR dwReserved;USHORT wIDLFlags;};
struct tagWCRANGE {WCHAR wcLow;USHORT cGlyphs;};
typedef BOOL (__stdcall *ABORTPROC)(HDC, int);
struct _CERT_RDN {DWORD cRDNAttr;PCERT_RDN_ATTR rgRDNAttr;};
struct _DOCINFOA {int cbSize;LPCSTR lpszDocName;LPCSTR lpszOutput;LPCSTR lpszDatatype;DWORD fwType;};
struct _FPO_DATA {DWORD ulOffStart;DWORD cbProcSize;DWORD cdwLocals;WORD cdwParams;unsigned __int16 cbProlog : 8;unsigned __int16 cbRegs : 3;unsigned __int16 fHasSEH : 1;unsigned __int16 fUseBP : 1;unsigned __int16 reserved : 1;unsigned __int16 cbFrame : 2;};
struct _MMCKINFO {FOURCC ckid;DWORD cksize;FOURCC fccType;DWORD dwDataOffset;DWORD dwFlags;};
struct _OBJECTID {GUID Lineage;DWORD Uniquifier;};
struct _PERF_BIN {DWORD NumberOfBins;DWORD TypeOfBin;BIN_RANGE BinsRanges[1];};
struct _flowspec {ULONG TokenRate;ULONG TokenBucketSize;ULONG PeakBandwidth;ULONG Latency;ULONG DelayVariation;SERVICETYPE ServiceType;ULONG MaxSduSize;ULONG MinimumPolicedSize;};
struct tagCABOOL {ULONG cElems;VARIANT_BOOL *pElems;};
struct tagCADATE {ULONG cElems;DATE *pElems;};
struct tagEMREOF {EMR emr;DWORD nPalEntries;DWORD offPalEntries;DWORD nSizeLast;};
struct _CERT_ID {DWORD dwIdChoice;_CERT_ID___CC94CEC94C6A7710EFE3CDB32686A77C __anonymous0;};
struct _DSSSEED {DWORD counter;BYTE seed[20];};
struct _WGLSWAP {HDC hdc;UINT uiFlags;};
struct tagACCEL {BYTE fVirt;WORD key;WORD cmd;};
struct tagCADBL {ULONG cElems;DOUBLE *pElems;};
struct tagCAFLT {ULONG cElems;FLOAT *pElems;};
struct _NT_TIB {struct _EXCEPTION_REGISTRATION_RECORD *ExceptionList;PVOID StackBase;PVOID StackLimit;PVOID SubSystemTib;_NT_TIB___0349ADB4452EC09BEC08E2292695FBBA __anonymous0;PVOID ArbitraryUserPointer;struct _NT_TIB *Self;};
struct _cpinfo {UINT MaxCharSize;BYTE DefaultChar[2];BYTE LeadByte[12];};
struct tagCACY {ULONG cElems;CY *pElems;};
struct tagCAUB {ULONG cElems;UCHAR *pElems;};
struct tagCAUH {ULONG cElems;ULARGE_INTEGER *pElems;};
struct tagCAUI {ULONG cElems;USHORT *pElems;};
struct fd_set {u_int fd_count;SOCKET fd_array[64];};
struct tagCAC {ULONG cElems;CHAR *pElems;};
struct tagCAH {ULONG cElems;LARGE_INTEGER *pElems;};
struct tagCAI {ULONG cElems;SHORT *pElems;};
struct tagCAL {ULONG cElems;LONG *pElems;};
struct _BLOB {ULONG cbSize;BYTE *pBlobData;};
struct _LUID {DWORD LowPart;LONG HighPart;};
union tagCY {tagCY___983F061E0B702DD8AE0B4B955735A6A3 __anonymous0;LONGLONG int64;};
struct _ACL {BYTE AclRevision;BYTE Sbz1;WORD AclSize;WORD AceCount;WORD Sbz2;};
struct _DEVICE_MEDIA_INFO___2DD95E35CD64FCF2582B874AE4A78983___B282398C81B6FF20F165753A3DA70A52 {LARGE_INTEGER Cylinders;STORAGE_MEDIA_TYPE MediaType;DWORD TracksPerCylinder;DWORD SectorsPerTrack;DWORD BytesPerSector;DWORD NumberMediaSides;DWORD MediaCharacteristics;};
union _IMAGE_RESOURCE_DIRECTORY_ENTRY___4D142E9F5D1D48D13A38B419BC687841 {_IMAGE_RESOURCE_DIRECTORY_ENTRY___4D142E9F5D1D48D13A38B419BC687841___6E35CCFC02D81E31BD4C6BEDD77CB20A __anonymous0;DWORD Name;WORD Id;};
union _CMSG_RECIPIENT_ENCODE_INFO___30055397BBF277E66F5B4ACE1878FAEA {PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO pKeyTrans;PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO pKeyAgree;PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO pMailList;};
union _CMSG_CMS_RECIPIENT_INFO___341F1DACD4668580119084EDA262D7AC {PCMSG_KEY_TRANS_RECIPIENT_INFO pKeyTrans;PCMSG_KEY_AGREE_RECIPIENT_INFO pKeyAgree;PCMSG_MAIL_LIST_RECIPIENT_INFO pMailList;};
union tagMIXERCONTROLA___86CBF7128C7FD2AC13C8612745AD13D8 {tagMIXERCONTROLA___86CBF7128C7FD2AC13C8612745AD13D8___A9226EEFE738F03A3F7D52221D0941CC __anonymous0;tagMIXERCONTROLA___86CBF7128C7FD2AC13C8612745AD13D8___A8262751543F154F80C41ED2519FD13B __anonymous2;DWORD dwReserved[6];};
union tagMIXERCONTROLW___3D7A05C52ED08258D8A0343834E0D122 {tagMIXERCONTROLA___86CBF7128C7FD2AC13C8612745AD13D8___A9226EEFE738F03A3F7D52221D0941CC __anonymous0;tagMIXERCONTROLA___86CBF7128C7FD2AC13C8612745AD13D8___A8262751543F154F80C41ED2519FD13B __anonymous2;DWORD dwReserved[6];};
union _IMAGE_SYMBOL___9F494F861147FDD11568E2137C7AB2D3 {BYTE ShortName[8];struct _IMAGE_SYMBOL___9F494F861147FDD11568E2137C7AB2D3___DE8E098676ACAC74F2956A2D7B83DF3B Name;DWORD LongName[2];};
union mmtime_tag___532DCF0E9B9A2B0A020BD11490F25514 {DWORD ms;DWORD sample;DWORD cb;DWORD ticks;struct mmtime_tag___532DCF0E9B9A2B0A020BD11490F25514___2498AB4F57B5A5935D3AAA9956C218FB smpte;struct mmtime_tag___532DCF0E9B9A2B0A020BD11490F25514___B7A2B1CE967584EBB3840978181CF21D midi;};
union tagINPUT___72687D791E298366090936F57062F9D6 {MOUSEINPUT mi;KEYBDINPUT ki;HARDWAREINPUT hi;};
union in_addr___C13EC994467D6E67044F092615EC7EA9 {struct in_addr___C13EC994467D6E67044F092615EC7EA9___01C175C1F0716DCA00314EDD79DBC0A0 S_un_b;struct in_addr___C13EC994467D6E67044F092615EC7EA9___4DE764E669F663DACA3CBFDE73714CB5 S_un_w;u_long S_addr;};
struct _CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO {DWORD cbSize;CMSG_SIGNED_ENCODE_INFO SignedInfo;CMSG_ENVELOPED_ENCODE_INFO EnvelopedInfo;};
struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION {JOBOBJECT_BASIC_LIMIT_INFORMATION BasicLimitInformation;IO_COUNTERS IoInfo;SIZE_T ProcessMemoryLimit;SIZE_T JobMemoryLimit;SIZE_T PeakProcessMemoryUsed;SIZE_T PeakJobMemoryUsed;};
struct _CHANGER_SEND_VOLUME_TAG_INFORMATION {CHANGER_ELEMENT StartingElement;DWORD ActionCode;BYTE VolumeIDTemplate[40];};
union _GDI_OBJECT____MIDL_IAdviseSink_0002 {wireHBITMAP hBitmap;wireHPALETTE hPalette;wireHGLOBAL hGeneric;};
struct _CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY {LPSTR pszObjId;DWORD cValue;PCRYPT_DER_BLOB rgValue;};
struct IInternetProtocolSinkStackableVtbl {HRESULT (__stdcall *QueryInterface)(IInternetProtocolSinkStackable *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IInternetProtocolSinkStackable *This);ULONG (__stdcall *Release)(IInternetProtocolSinkStackable *This);HRESULT (__stdcall *SwitchSink)(IInternetProtocolSinkStackable *This, IInternetProtocolSink *pOIProtSink);HRESULT (__stdcall *CommitSwitch)(IInternetProtocolSinkStackable *This);HRESULT (__stdcall *RollbackSwitch)(IInternetProtocolSinkStackable *This);};
struct _49CD7323AA35D3C00204BB7AA8563FFA {HANDLE FileHandle;LARGE_INTEGER StartingVcn;LARGE_INTEGER StartingLcn;DWORD ClusterCount;};
struct _7F42DEB2BB5D0DE64733A8884285C23D {RPC_NS_HANDLE LookupContext;RPC_BINDING_HANDLE ProposedHandle;RPC_BINDING_VECTOR *Bindings;};
struct _A45289B030366F6A209F1D22B819A49A {LARGE_INTEGER FileReferenceNumber;DWORD FileRecordLength;BYTE FileRecordBuffer[1];};
struct _C811A85A3CBAF233E045382DA27E29BF {UINT cbSize;HWND hwnd;DWORD dwFlags;UINT uCount;DWORD dwTimeout;};
struct _CBE416C4EAAA19179E77E4054907ADFF {USN StartUsn;DWORD ReasonMask;DWORD ReturnOnlyOnClose;DWORDLONG Timeout;DWORDLONG BytesToWaitFor;DWORDLONG UsnJournalID;};
struct _CCEDB0757BDFC2DD5AC112970835DC93 {DWORD Characteristics;DWORD TimeDateStamp;WORD MajorVersion;WORD MinorVersion;DWORD GlobalFlagsClear;DWORD GlobalFlagsSet;DWORD CriticalSectionDefaultTimeout;DWORD DeCommitFreeBlockThreshold;DWORD DeCommitTotalFreeThreshold;ULONGLONG LockPrefixTable;DWORD MaximumAllocationSize;DWORD VirtualMemoryThreshold;DWORD ProcessHeapFlags;DWORD ProcessAffinityMask;WORD CSDVersion;WORD Reserved1;ULONGLONG EditList;DWORD Reserved[1];};
struct _D26D25374C75FEF3AD181CCFA77BD37F {SCARD_IO_REQUEST ioRequest;BYTE bSw1;BYTE bSw2;_D26D25374C75FEF3AD181CCFA77BD37F___ED8EF83DA0F103C0F6663A08F1BCC04F __anonymous0;};
struct _CMSG_CTRL_KEY_TRANS_DECRYPT_PARA {DWORD cbSize;HCRYPTPROV hCryptProv;DWORD dwKeySpec;PCMSG_KEY_TRANS_RECIPIENT_INFO pKeyTrans;DWORD dwRecipientIndex;};
typedef BOOL (__stdcall *PFN_CMSG_GEN_CONTENT_ENCRYPT_KEY)(PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo, DWORD dwFlags, void *pvReserved);
struct _CERT_KEY_USAGE_RESTRICTION_INFO {DWORD cCertPolicyId;PCERT_POLICY_ID rgCertPolicyId;CRYPT_BIT_BLOB RestrictedKeyUsage;};
struct _IMAGE_RESOURCE_DIRECTORY_ENTRY {_IMAGE_RESOURCE_DIRECTORY_ENTRY___4D142E9F5D1D48D13A38B419BC687841 __anonymous0;union {DWORD OffsetToData;_IMAGE_RESOURCE_DIRECTORY_ENTRY___A1259A08F2B533F259DA4993E2C51E29___B2E03ED94C06E2E681F8D03FF7FF5CB3 __anonymous1;};};
struct _SECURITY_DESCRIPTOR_RELATIVE {BYTE Revision;BYTE Sbz1;SECURITY_DESCRIPTOR_CONTROL Control;DWORD Owner;DWORD Group;DWORD Sacl;DWORD Dacl;};
typedef void (__stdcall *PFN_FREE_ENCODED_OBJECT_FUNC)(LPCSTR pszObjectOid, PCRYPT_BLOB_ARRAY pObject, LPVOID pvFreeContext);
struct _CERT_AUTHORITY_KEY_ID2_INFO {CRYPT_DATA_BLOB KeyId;CERT_ALT_NAME_INFO AuthorityCertIssuer;CRYPT_INTEGER_BLOB AuthorityCertSerialNumber;};
struct _CMSG_KEY_TRANS_ENCRYPT_INFO {DWORD cbSize;DWORD dwRecipientIndex;CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;CRYPT_DATA_BLOB EncryptedKey;DWORD dwFlags;};
struct _CMSG_MAIL_LIST_ENCRYPT_INFO {DWORD cbSize;DWORD dwRecipientIndex;CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;CRYPT_DATA_BLOB EncryptedKey;DWORD dwFlags;};
struct _CRYPT_KEY_SIGN_MESSAGE_PARA {DWORD cbSize;DWORD dwMsgAndCertEncodingType;HCRYPTPROV hCryptProv;DWORD dwKeySpec;CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;void *pvHashAuxInfo;CRYPT_ALGORITHM_IDENTIFIER PubKeyAlgorithm;};
struct _PRINTER_NOTIFY_OPTIONS_TYPE {WORD Type;WORD Reserved0;DWORD Reserved1;DWORD Reserved2;DWORD Count;PWORD pFields;};
struct tagEMREXTCREATEFONTINDIRECTW {EMR emr;DWORD ihFont;EXTLOGFONTW elfw;};
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_CONTROL)(HCERTSTOREPROV hStoreProv, DWORD dwFlags, DWORD dwCtrlType, const void *pvCtrlPara);
struct _CERT_AUTHORITY_KEY_ID_INFO {CRYPT_DATA_BLOB KeyId;CERT_NAME_BLOB CertIssuer;CRYPT_INTEGER_BLOB CertSerialNumber;};
struct _CONSOLE_SCREEN_BUFFER_INFO {COORD dwSize;COORD dwCursorPosition;WORD wAttributes;SMALL_RECT srWindow;COORD dwMaximumWindowSize;};
struct _CRYPT_ENCRYPT_MESSAGE_PARA {DWORD cbSize;DWORD dwMsgEncodingType;HCRYPTPROV hCryptProv;CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;void *pvEncryptionAuxInfo;DWORD dwFlags;DWORD dwInnerContentType;};
struct _RTL_CRITICAL_SECTION_DEBUG {WORD Type;WORD CreatorBackTraceIndex;struct _RTL_CRITICAL_SECTION *CriticalSection;LIST_ENTRY ProcessLocksList;DWORD EntryCount;DWORD ContentionCount;DWORD Spare[2];};
typedef BOOL (__stdcall *PFN_CERT_ENUM_SYSTEM_STORE)(const void *pvSystemStore, DWORD dwFlags, PCERT_SYSTEM_STORE_INFO pStoreInfo, void *pvReserved, void *pvArg);
struct _IMAGE_ROM_OPTIONAL_HEADER {WORD Magic;BYTE MajorLinkerVersion;BYTE MinorLinkerVersion;DWORD SizeOfCode;DWORD SizeOfInitializedData;DWORD SizeOfUninitializedData;DWORD AddressOfEntryPoint;DWORD BaseOfCode;DWORD BaseOfData;DWORD BaseOfBss;DWORD GprMask;DWORD CprMask[4];DWORD GpValue;};
struct _TAPE_GET_MEDIA_PARAMETERS {LARGE_INTEGER Capacity;LARGE_INTEGER Remaining;DWORD BlockSize;DWORD PartitionCount;BOOLEAN WriteProtected;};
struct tagEMRMODIFYWORLDTRANSFORM {EMR emr;XFORM xform;DWORD iMode;};
struct IInternetThreadSwitchVtbl {HRESULT (__stdcall *QueryInterface)(IInternetThreadSwitch *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IInternetThreadSwitch *This);ULONG (__stdcall *Release)(IInternetThreadSwitch *This);HRESULT (__stdcall *Prepare)(IInternetThreadSwitch *This);HRESULT (__stdcall *Continue)(IInternetThreadSwitch *This);};
typedef BOOL (__stdcall *PFN_CRYPT_ENUM_KEYID_PROP)(const CRYPT_HASH_BLOB *pKeyIdentifier, DWORD dwFlags, void *pvReserved, void *pvArg, DWORD cProp, DWORD *rgdwPropId, void **rgpvData, DWORD *rgcbData);
struct RETRIEVAL_POINTERS_BUFFER {DWORD ExtentCount;LARGE_INTEGER StartingVcn;struct RETRIEVAL_POINTERS_BUFFER___1BE95960A89AEFDDC7C143B6A7C3CEB0 Extents[1];};
struct _CERT_KEY_ATTRIBUTES_INFO {CRYPT_DATA_BLOB KeyId;CRYPT_BIT_BLOB IntendedKeyUsage;PCERT_PRIVATE_KEY_VALIDITY pPrivateKeyUsagePeriod;};
struct _CERT_PHYSICAL_STORE_INFO {DWORD cbSize;LPSTR pszOpenStoreProvider;DWORD dwOpenEncodingType;DWORD dwOpenFlags;CRYPT_DATA_BLOB OpenParameters;DWORD dwFlags;DWORD dwPriority;};
struct _CERT_SIGNED_CONTENT_INFO {CRYPT_DER_BLOB ToBeSigned;CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;CRYPT_BIT_BLOB Signature;};
struct _CRYPT_RC2_CBC_PARAMETERS {DWORD dwVersion;BOOL fIV;BYTE rgbIV[8];};
struct _MEMORY_BASIC_INFORMATION {PVOID BaseAddress;PVOID AllocationBase;DWORD AllocationProtect;SIZE_T RegionSize;DWORD State;DWORD Protect;DWORD Type;};
struct _PRINTER_NOTIFY_INFO_DATA {WORD Type;WORD Field;DWORD Reserved;DWORD Id;union _PRINTER_NOTIFY_INFO_DATA___13C44C2CB620BE9B3AF26887E9FDBAC1 NotifyData;};
struct _SERVICE_FAILURE_ACTIONSA {DWORD dwResetPeriod;LPSTR lpRebootMsg;LPSTR lpCommand;DWORD cActions;SC_ACTION *lpsaActions;};
struct tagEMRCREATEBRUSHINDIRECT {EMR emr;DWORD ihBrush;LOGBRUSH32 lb;};
struct _CMSG_HASHED_ENCODE_INFO {DWORD cbSize;HCRYPTPROV hCryptProv;CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;void *pvHashAuxInfo;};
struct _CRYPT_HASH_MESSAGE_PARA {DWORD cbSize;DWORD dwMsgEncodingType;HCRYPTPROV hCryptProv;CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;void *pvHashAuxInfo;};
struct _CTL_VERIFY_USAGE_STATUS {DWORD cbSize;DWORD dwError;DWORD dwFlags;PCCTL_CONTEXT *ppCtl;DWORD dwCtlEntryIndex;PCCERT_CONTEXT *ppSigner;DWORD dwSignerIndex;};
struct _HTTPSPolicyCallbackData {_HTTPSPolicyCallbackData___F4C9A18A61EDC422290C9C9CC9138C86 __anonymous0;DWORD dwAuthType;DWORD fdwChecks;WCHAR *pwszServerName;};
struct tagMCI_ANIM_UPDATE_PARMS {DWORD dwCallback;RECT rc;HDC hDC;};
struct tagPIXELFORMATDESCRIPTOR {WORD nSize;WORD nVersion;DWORD dwFlags;BYTE iPixelType;BYTE cColorBits;BYTE cRedBits;BYTE cRedShift;BYTE cGreenBits;BYTE cGreenShift;BYTE cBlueBits;BYTE cBlueShift;BYTE cAlphaBits;BYTE cAlphaShift;BYTE cAccumBits;BYTE cAccumRedBits;BYTE cAccumGreenBits;BYTE cAccumBlueBits;BYTE cAccumAlphaBits;BYTE cDepthBits;BYTE cStencilBits;BYTE cAuxBuffers;BYTE iLayerType;BYTE bReserved;DWORD dwLayerMask;DWORD dwVisibleMask;DWORD dwDamageMask;};
struct IForegroundTransferVtbl {HRESULT (__stdcall *QueryInterface)(IForegroundTransfer *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IForegroundTransfer *This);ULONG (__stdcall *Release)(IForegroundTransfer *This);HRESULT (__stdcall *AllowForegroundTransfer)(IForegroundTransfer *This, void *lpvReserved);};
struct _ENCRYPTION_CERTIFICATE {DWORD cbTotalLength;SID *pUserSid;PEFS_CERTIFICATE_BLOB pCertBlob;};
struct _GET_CHANGER_PARAMETERS {DWORD Size;WORD NumberTransportElements;WORD NumberStorageElements;WORD NumberCleanerSlots;WORD NumberIEElements;WORD NumberDataTransferElements;WORD NumberOfDoors;WORD FirstSlotNumber;WORD FirstDriveNumber;WORD FirstTransportNumber;WORD FirstIEPortNumber;WORD FirstCleanerSlotAddress;WORD MagazineSize;DWORD DriveCleanTimeout;DWORD Features0;DWORD Features1;BYTE MoveFromTransport;BYTE MoveFromSlot;BYTE MoveFromIePort;BYTE MoveFromDrive;BYTE ExchangeFromTransport;BYTE ExchangeFromSlot;BYTE ExchangeFromIePort;BYTE ExchangeFromDrive;BYTE LockUnlockCapabilities;BYTE PositionCapabilities;BYTE Reserved1[2];DWORD Reserved2[2];};
struct _SE_IMPERSONATION_STATE {PACCESS_TOKEN Token;BOOLEAN CopyOnOpen;BOOLEAN EffectiveOnly;SECURITY_IMPERSONATION_LEVEL Level;};
struct tagEMRSETPALETTEENTRIES {EMR emr;DWORD ihPal;DWORD iStart;DWORD cEntries;PALETTEENTRY aPalEntries[1];};
struct tagMCI_OVLY_LOAD_PARMSA {DWORD dwCallback;LPCSTR lpfilename;RECT rc;};
struct tagMCI_OVLY_SAVE_PARMSA {DWORD dwCallback;LPCSTR lpfilename;RECT rc;};
struct tagMCI_WAVE_OPEN_PARMSA {DWORD dwCallback;MCIDEVICEID wDeviceID;LPCSTR lpstrDeviceType;LPCSTR lpstrElementName;LPCSTR lpstrAlias;DWORD dwBufferSeconds;};
struct ICancelMethodCallsVtbl {HRESULT (__stdcall *QueryInterface)(ICancelMethodCalls *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(ICancelMethodCalls *This);ULONG (__stdcall *Release)(ICancelMethodCalls *This);HRESULT (__stdcall *Cancel)(ICancelMethodCalls *This, ULONG ulSeconds);HRESULT (__stdcall *TestCancel)(ICancelMethodCalls *This);};
typedef BOOL (__stdcall *PFN_CMSG_STREAM_OUTPUT)(const void *pvArg, BYTE *pbData, DWORD cbData, BOOL fFinal);
struct _CRYPT_X942_OTHER_INFO {LPSTR pszContentEncryptionObjId;BYTE rgbCounter[4];BYTE rgbKeyLength[4];CRYPT_DATA_BLOB PubInfo;};
struct _CTL_VERIFY_USAGE_PARA {DWORD cbSize;CRYPT_DATA_BLOB ListIdentifier;DWORD cCtlStore;HCERTSTORE *rghCtlStore;DWORD cSignerStore;HCERTSTORE *rghSignerStore;};
struct _TIME_ZONE_INFORMATION {LONG Bias;WCHAR StandardName[32];SYSTEMTIME StandardDate;LONG StandardBias;WCHAR DaylightName[32];SYSTEMTIME DaylightDate;LONG DaylightBias;};
struct tagEMRCREATECOLORSPACE {EMR emr;DWORD ihCS;LOGCOLORSPACEA lcs;};
struct tagEMREXTSELECTCLIPRGN {EMR emr;DWORD cbRgnData;DWORD iMode;BYTE RgnData[1];};
struct ISequentialStreamVtbl {HRESULT (__stdcall *QueryInterface)(ISequentialStream *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(ISequentialStream *This);ULONG (__stdcall *Release)(ISequentialStream *This);HRESULT (__stdcall *Read)(ISequentialStream *This, void *pv, ULONG cb, ULONG *pcbRead);HRESULT (__stdcall *Write)(ISequentialStream *This, const void *pv, ULONG cb, ULONG *pcbWritten);};
struct ISupportErrorInfoVtbl {HRESULT (__stdcall *QueryInterface)(ISupportErrorInfo *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(ISupportErrorInfo *This);ULONG (__stdcall *Release)(ISupportErrorInfo *This);HRESULT (__stdcall *InterfaceSupportsErrorInfo)(ISupportErrorInfo *This, const IID *const riid);};
typedef int (__stdcall *REGISTERWORDENUMPROCA)(LPCSTR, DWORD, LPCSTR, LPVOID);
struct _CERT_REVOCATION_INFO {DWORD cbSize;DWORD dwRevocationResult;LPCSTR pszRevocationOid;LPVOID pvOidSpecificInfo;};
struct _CERT_STORE_PROV_INFO {DWORD cbSize;DWORD cStoreProvFunc;void **rgpvStoreProvFunc;HCERTSTOREPROV hStoreProv;DWORD dwStoreProvFlags;HCRYPTOIDFUNCADDR hStoreProvFuncAddr2;};
struct _CERT_TRUST_LIST_INFO {DWORD cbSize;PCTL_ENTRY pCtlEntry;PCCTL_CONTEXT pCtlContext;};
struct _FORMAT_EX_PARAMETERS {MEDIA_TYPE MediaType;DWORD StartCylinderNumber;DWORD EndCylinderNumber;DWORD StartHeadNumber;DWORD EndHeadNumber;WORD FormatGapLength;WORD SectorsPerTrack;WORD SectorNumber[1];};
struct _FULL_PTR_XLAT_TABLES {struct _FULL_PTR_XLAT_TABLES___CFFA09E862963CB530A7E2871127FDA7 RefIdToPointer;struct _FULL_PTR_XLAT_TABLES___5B5EF811252786EBFBAAA3889BB4C68D PointerToRefId;unsigned int NextRefId;XLAT_SIDE XlatSide;};
struct _PRINTER_ENUM_VALUESA {LPSTR pValueName;DWORD cbValueName;DWORD dwType;LPBYTE pData;DWORD cbData;};
struct _RPC_SERVER_INTERFACE {unsigned int Length;RPC_SYNTAX_IDENTIFIER InterfaceId;RPC_SYNTAX_IDENTIFIER TransferSyntax;PRPC_DISPATCH_TABLE DispatchTable;unsigned int RpcProtseqEndpointCount;PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint;void *DefaultManagerEpv;const void *InterpreterInfo;unsigned int Flags;};
struct tagCOLORMATCHTOTARGET {EMR emr;DWORD dwAction;DWORD dwFlags;DWORD cbName;DWORD cbData;BYTE Data[1];};
struct tagMCI_SYSINFO_PARMSA {DWORD dwCallback;LPSTR lpstrReturn;DWORD dwRetSize;DWORD dwNumber;UINT wDeviceType;};
struct tagMCI_WAVE_SET_PARMS {DWORD dwCallback;DWORD dwTimeFormat;DWORD dwAudio;UINT wInput;UINT wOutput;WORD wFormatTag;WORD wReserved2;WORD nChannels;WORD wReserved3;DWORD nSamplesPerSec;DWORD nAvgBytesPerSec;WORD nBlockAlign;WORD wReserved4;WORD wBitsPerSample;WORD wReserved5;};
struct tagMIXERLINECONTROLSA {DWORD cbStruct;DWORD dwLineID;tagMIXERLINECONTROLSA___DC43C2837E8C20184C3137B308FBE3E1 __anonymous0;DWORD cControls;DWORD cbmxctrl;LPMIXERCONTROLA pamxctrl;};
struct tagMIXERLINECONTROLSW {DWORD cbStruct;DWORD dwLineID;tagMIXERLINECONTROLSA___DC43C2837E8C20184C3137B308FBE3E1 __anonymous0;DWORD cControls;DWORD cbmxctrl;LPMIXERCONTROLW pamxctrl;};
struct IInternalUnknownVtbl {HRESULT (__stdcall *QueryInterface)(IInternalUnknown *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IInternalUnknown *This);ULONG (__stdcall *Release)(IInternalUnknown *This);HRESULT (__stdcall *QueryInternalInterface)(IInternalUnknown *This, const IID *const riid, void **ppv);};
struct IMPORT_OBJECT_HEADER {WORD Sig1;WORD Sig2;WORD Version;WORD Machine;DWORD TimeDateStamp;DWORD SizeOfData;IMPORT_OBJECT_HEADER___14069DE518AE1D4889EE822155F222E0 __anonymous0;unsigned __int16 Type : 2;unsigned __int16 NameType : 3;unsigned __int16 Reserved : 11;};
struct IPSFactoryBufferVtbl {HRESULT (__stdcall *QueryInterface)(IPSFactoryBuffer *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IPSFactoryBuffer *This);ULONG (__stdcall *Release)(IPSFactoryBuffer *This);HRESULT (__stdcall *CreateProxy)(IPSFactoryBuffer *This, IUnknown *pUnkOuter, const IID *const riid, IRpcProxyBuffer **ppProxy, void **ppv);HRESULT (__stdcall *CreateStub)(IPSFactoryBuffer *This, const IID *const riid, IUnknown *pUnkServer, IRpcStubBuffer **ppStub);};
typedef BOOL (__stdcall *LPFNADDPROPSHEETPAGE)(HPROPSHEETPAGE, LPARAM);
typedef int (__stdcall *PFNPROPSHEETCALLBACK)(HWND, UINT, LPARAM);
typedef UINT (__stdcall *PFNRECONCILEPROFILEA)(LPCSTR pszCentralFile, LPCSTR pszLocalFile, DWORD dwFlags);
typedef RPC_STATUS __stdcall RPC_FORWARD_FUNCTION(UUID *InterfaceId, RPC_VERSION *InterfaceVersion, UUID *ObjectId, unsigned __int8 *Rpcpro, void **ppDestEndpoint);
struct SChannelHookCallInfo {IID iid;DWORD cbSize;GUID uCausality;DWORD dwServerPid;DWORD iMethod;void *pObject;};
typedef BOOL (__stdcall *UILANGUAGE_ENUMPROCA)(LPSTR, LONG_PTR);
struct _CRL_REVOCATION_INFO {PCRL_ENTRY pCrlEntry;PCCRL_CONTEXT pCrlContext;PCCERT_CHAIN_CONTEXT pCrlIssuerChain;};
struct _SECURITY_ATTRIBUTES {DWORD nLength;LPVOID lpSecurityDescriptor;BOOL bInheritHandle;};
struct _tagHIT_LOGGING_INFO {DWORD dwStructSize;LPSTR lpszLoggedUrlName;SYSTEMTIME StartTime;SYSTEMTIME EndTime;LPSTR lpszExtendedInfo;};
struct tMIXERCONTROLDETAILS {DWORD cbStruct;DWORD dwControlID;DWORD cChannels;tMIXERCONTROLDETAILS___6A354DB64043DD4C59D209C2C03EE69F __anonymous0;DWORD cbDetails;LPVOID paDetails;};
typedef BOOL (__stdcall *CALINFO_ENUMPROCEXA)(LPSTR, CALID);
typedef BOOL (__stdcall *DATEFMT_ENUMPROCEXA)(LPSTR, CALID);
struct IRpcProxyBufferVtbl {HRESULT (__stdcall *QueryInterface)(IRpcProxyBuffer *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IRpcProxyBuffer *This);ULONG (__stdcall *Release)(IRpcProxyBuffer *This);HRESULT (__stdcall *Connect)(IRpcProxyBuffer *This, IRpcChannelBuffer *pRpcChannelBuffer);void (__stdcall *Disconnect)(IRpcProxyBuffer *This);};
struct _ACCESS_ALLOWED_ACE {ACE_HEADER Header;ACCESS_MASK Mask;DWORD SidStart;};
struct _CERT_CHAIN_CONTEXT {DWORD cbSize;CERT_TRUST_STATUS TrustStatus;DWORD cChain;PCERT_SIMPLE_CHAIN *rgpChain;};
struct _IMAGE_NT_HEADERS64 {DWORD Signature;IMAGE_FILE_HEADER FileHeader;IMAGE_OPTIONAL_HEADER64 OptionalHeader;};
struct tagBITMAPINFOHEADER {DWORD biSize;LONG biWidth;LONG biHeight;WORD biPlanes;WORD biBitCount;DWORD biCompression;DWORD biSizeImage;LONG biXPelsPerMeter;LONG biYPelsPerMeter;DWORD biClrUsed;DWORD biClrImportant;};
struct tagDELETEITEMSTRUCT {UINT CtlType;UINT CtlID;UINT itemID;HWND hwndItem;ULONG_PTR itemData;};
struct tagEMRCREATEPALETTE {EMR emr;DWORD ihPal;LOGPALETTE lgpl;};
struct tagEMRSETICMPROFILE {EMR emr;DWORD dwFlags;DWORD cbName;DWORD cbData;BYTE Data[1];};
struct ANON_OBJECT_HEADER {WORD Sig1;WORD Sig2;WORD Version;WORD Machine;DWORD TimeDateStamp;CLSID ClassID;DWORD SizeOfData;};
typedef HRESULT (__stdcall *LPFNGETCLASSOBJECT)(const IID *const, const IID *const, LPVOID *);
typedef UINT (__stdcall *PFNGETPROFILEPATHA)(LPCSTR pszUsername, LPSTR pszBuffer, UINT cbBuffer);
struct _ACCESS_DENIED_ACE {ACE_HEADER Header;ACCESS_MASK Mask;DWORD SidStart;};
struct _CONNECTDLGSTRUCTA {DWORD cbStructure;HWND hwndOwner;LPNETRESOURCEA lpConnRes;DWORD dwFlags;DWORD dwDevNum;};
struct _CONNECTDLGSTRUCTW {DWORD cbStructure;HWND hwndOwner;LPNETRESOURCEW lpConnRes;DWORD dwFlags;DWORD dwDevNum;};
struct _CRYPT_CREDENTIALS {DWORD cbSize;LPCSTR pszCredentialsOid;LPVOID pvCredentials;};
struct _CRYPT_DECODE_PARA {DWORD cbSize;PFN_CRYPT_ALLOC pfnAlloc;PFN_CRYPT_FREE pfnFree;};
struct _CRYPT_ENCODE_PARA {DWORD cbSize;PFN_CRYPT_ALLOC pfnAlloc;PFN_CRYPT_FREE pfnFree;};
struct _PRINTER_DEFAULTSA {LPSTR pDatatype;LPDEVMODEA pDevMode;ACCESS_MASK DesiredAccess;};
struct _TAPE_SET_POSITION {DWORD Method;DWORD Partition;LARGE_INTEGER Offset;BOOLEAN Immediate;};
struct tagCOMPOSITIONFORM {DWORD dwStyle;POINT ptCurrentPos;RECT rcArea;};
struct tagEMREXTCREATEPEN {EMR emr;DWORD ihPen;DWORD offBmi;DWORD cbBmi;DWORD offBits;DWORD cbBits;EXTLOGPEN elp;};
struct tagMCI_OPEN_PARMSA {DWORD dwCallback;MCIDEVICEID wDeviceID;LPCSTR lpstrDeviceType;LPCSTR lpstrElementName;LPCSTR lpstrAlias;};
struct tagWINDOWPLACEMENT {UINT length;UINT flags;UINT showCmd;POINT ptMinPosition;POINT ptMaxPosition;RECT rcNormalPosition;};
struct AsyncIUnknownVtbl {HRESULT (__stdcall *QueryInterface)(AsyncIUnknown *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(AsyncIUnknown *This);ULONG (__stdcall *Release)(AsyncIUnknown *This);HRESULT (__stdcall *Begin_QueryInterface)(AsyncIUnknown *This, const IID *const riid);HRESULT (__stdcall *Finish_QueryInterface)(AsyncIUnknown *This, void **ppvObject);HRESULT (__stdcall *Begin_AddRef)(AsyncIUnknown *This);ULONG (__stdcall *Finish_AddRef)(AsyncIUnknown *This);HRESULT (__stdcall *Begin_Release)(AsyncIUnknown *This);ULONG (__stdcall *Finish_Release)(AsyncIUnknown *This);};
struct IAsyncManagerVtbl {HRESULT (__stdcall *QueryInterface)(IAsyncManager *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IAsyncManager *This);ULONG (__stdcall *Release)(IAsyncManager *This);HRESULT (__stdcall *CompleteCall)(IAsyncManager *This, HRESULT Result);HRESULT (__stdcall *GetCallContext)(IAsyncManager *This, const IID *const riid, void **pInterface);HRESULT (__stdcall *GetState)(IAsyncManager *This, ULONG *pulStateFlags);};
struct _CERT_POLICY_INFO {LPSTR pszPolicyIdentifier;DWORD cPolicyQualifier;CERT_POLICY_QUALIFIER_INFO *rgPolicyQualifier;};
struct _DISK_PERFORMANCE {LARGE_INTEGER BytesRead;LARGE_INTEGER BytesWritten;LARGE_INTEGER ReadTime;LARGE_INTEGER WriteTime;LARGE_INTEGER IdleTime;DWORD ReadCount;DWORD WriteCount;DWORD QueueDepth;DWORD SplitCount;LARGE_INTEGER QueryTime;DWORD StorageDeviceNumber;WCHAR StorageManagerName[8];};
struct _EVENTSFORLOGFILE {DWORD ulSize;WCHAR szLogicalLogFile[256];DWORD ulNumRecords;EVENTLOGRECORD pEventLogRecords[];};
struct _EXCEPTION_RECORD {DWORD ExceptionCode;DWORD ExceptionFlags;struct _EXCEPTION_RECORD *ExceptionRecord;PVOID ExceptionAddress;DWORD NumberParameters;ULONG_PTR ExceptionInformation[15];};
struct _IMAGE_DEBUG_MISC {DWORD DataType;DWORD Length;BOOLEAN Unicode;BYTE Reserved[3];BYTE Data[1];};
struct _IMAGE_NT_HEADERS {DWORD Signature;IMAGE_FILE_HEADER FileHeader;IMAGE_OPTIONAL_HEADER32 OptionalHeader;};
struct _IMAGE_RELOCATION {_IMAGE_RELOCATION___1E7C1E46FA531EE3105A5918E7864FED __anonymous0;DWORD SymbolTableIndex;WORD Type;};
struct _IMAGE_VXD_HEADER {WORD e32_magic;BYTE e32_border;BYTE e32_worder;DWORD e32_level;WORD e32_cpu;WORD e32_os;DWORD e32_ver;DWORD e32_mflags;DWORD e32_mpages;DWORD e32_startobj;DWORD e32_eip;DWORD e32_stackobj;DWORD e32_esp;DWORD e32_pagesize;DWORD e32_lastpagesize;DWORD e32_fixupsize;DWORD e32_fixupsum;DWORD e32_ldrsize;DWORD e32_ldrsum;DWORD e32_objtab;DWORD e32_objcnt;DWORD e32_objmap;DWORD e32_itermap;DWORD e32_rsrctab;DWORD e32_rsrccnt;DWORD e32_restab;DWORD e32_enttab;DWORD e32_dirtab;DWORD e32_dircnt;DWORD e32_fpagetab;DWORD e32_frectab;DWORD e32_impmod;DWORD e32_impmodcnt;DWORD e32_impproc;DWORD e32_pagesum;DWORD e32_datapage;DWORD e32_preload;DWORD e32_nrestab;DWORD e32_cbnrestab;DWORD e32_nressum;DWORD e32_autodata;DWORD e32_debuginfo;DWORD e32_debuglen;DWORD e32_instpreload;DWORD e32_instdemand;DWORD e32_heapsize;BYTE e32_res3[12];DWORD e32_winresoff;DWORD e32_winreslen;WORD e32_devid;WORD e32_ddkver;};
struct _PROV_ENUMALGS_EX {ALG_ID aiAlgid;DWORD dwDefaultLen;DWORD dwMinLen;DWORD dwMaxLen;DWORD dwProtocols;DWORD dwNameLen;CHAR szName[20];DWORD dwLongNameLen;CHAR szLongName[40];};
struct _SENDCMDOUTPARAMS {DWORD cBufferSize;DRIVERSTATUS DriverStatus;BYTE bBuffer[1];};
struct _SYSTEM_ALARM_ACE {ACE_HEADER Header;ACCESS_MASK Mask;DWORD SidStart;};
struct _SYSTEM_AUDIT_ACE {ACE_HEADER Header;ACCESS_MASK Mask;DWORD SidStart;};
struct _WIN32_FIND_DATAA {DWORD dwFileAttributes;FILETIME ftCreationTime;FILETIME ftLastAccessTime;FILETIME ftLastWriteTime;DWORD nFileSizeHigh;DWORD nFileSizeLow;DWORD dwReserved0;DWORD dwReserved1;CHAR cFileName[260];CHAR cAlternateFileName[14];};
struct _WIN32_FIND_DATAW {DWORD dwFileAttributes;FILETIME ftCreationTime;FILETIME ftLastAccessTime;FILETIME ftLastWriteTime;DWORD nFileSizeHigh;DWORD nFileSizeLow;DWORD dwReserved0;DWORD dwReserved1;WCHAR cFileName[260];WCHAR cAlternateFileName[14];};
struct tagCOPYDATASTRUCT {ULONG_PTR dwData;DWORD cbData;PVOID lpData;};
struct tagDVTARGETDEVICE {DWORD tdSize;WORD tdDriverNameOffset;WORD tdDeviceNameOffset;WORD tdPortNameOffset;WORD tdExtDevmodeOffset;BYTE tdData[1];};
struct tagEMRNAMEDESCAPE {EMR emr;INT iEscape;INT cbDriver;INT cbEscData;BYTE EscData[1];};
struct tagMSLLHOOKSTRUCT {POINT pt;DWORD mouseData;DWORD flags;DWORD time;ULONG_PTR dwExtraInfo;};
struct ICallFactoryVtbl {HRESULT (__stdcall *QueryInterface)(ICallFactory *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(ICallFactory *This);ULONG (__stdcall *Release)(ICallFactory *This);HRESULT (__stdcall *CreateCall)(ICallFactory *This, const IID *const riid, IUnknown *pCtrlUnk, const IID *const riid2, IUnknown **ppv);};
struct IEnumMonikerVtbl {HRESULT (__stdcall *QueryInterface)(IEnumMoniker *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IEnumMoniker *This);ULONG (__stdcall *Release)(IEnumMoniker *This);HRESULT (__stdcall *Next)(IEnumMoniker *This, ULONG celt, IMoniker **rgelt, ULONG *pceltFetched);HRESULT (__stdcall *Skip)(IEnumMoniker *This, ULONG celt);HRESULT (__stdcall *Reset)(IEnumMoniker *This);HRESULT (__stdcall *Clone)(IEnumMoniker *This, IEnumMoniker **ppenum);};
struct IEnumUnknownVtbl {HRESULT (__stdcall *QueryInterface)(IEnumUnknown *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IEnumUnknown *This);ULONG (__stdcall *Release)(IEnumUnknown *This);HRESULT (__stdcall *Next)(IEnumUnknown *This, ULONG celt, IUnknown **rgelt, ULONG *pceltFetched);HRESULT (__stdcall *Skip)(IEnumUnknown *This, ULONG celt);HRESULT (__stdcall *Reset)(IEnumUnknown *This);HRESULT (__stdcall *Clone)(IEnumUnknown *This, IEnumUnknown **ppenum);};
struct ITypeFactoryVtbl {HRESULT (__stdcall *QueryInterface)(ITypeFactory *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(ITypeFactory *This);ULONG (__stdcall *Release)(ITypeFactory *This);HRESULT (__stdcall *CreateFromTypeInfo)(ITypeFactory *This, ITypeInfo *pTypeInfo, const IID *const riid, IUnknown **ppv);};
struct _CRYPT_ATTRIBUTE {LPSTR pszObjId;DWORD cValue;PCRYPT_ATTR_BLOB rgValue;};
struct _SENDCMDINPARAMS {DWORD cBufferSize;IDEREGS irDriveRegs;BYTE bDriveNumber;BYTE bReserved[3];DWORD dwReserved[4];BYTE bBuffer[1];};
struct _TAPE_STATISTICS {DWORD Version;DWORD Flags;LARGE_INTEGER RecoveredWrites;LARGE_INTEGER UnrecoveredWrites;LARGE_INTEGER RecoveredReads;LARGE_INTEGER UnrecoveredReads;BYTE CompressionRatioReads;BYTE CompressionRatioWrites;};
struct _USER_MARSHAL_CB {unsigned int Flags;PMIDL_STUB_MESSAGE pStubMsg;PFORMAT_STRING pReserve;unsigned int Signature;USER_MARSHAL_CB_TYPE CBType;PFORMAT_STRING pFormat;PFORMAT_STRING pTypeFormat;};
struct _VIDEOPARAMETERS {GUID Guid;ULONG dwOffset;ULONG dwCommand;ULONG dwFlags;ULONG dwMode;ULONG dwTVStandard;ULONG dwAvailableModes;ULONG dwAvailableTVStandard;ULONG dwFlickerFilter;ULONG dwOverScanX;ULONG dwOverScanY;ULONG dwMaxUnscaledX;ULONG dwMaxUnscaledY;ULONG dwPositionX;ULONG dwPositionY;ULONG dwBrightness;ULONG dwContrast;ULONG dwCPType;ULONG dwCPCommand;ULONG dwCPStandard;ULONG dwCPKey;ULONG bCP_APSTriggerBits;UCHAR bOEMCopyProtection[256];};
struct _WIN32_STREAM_ID {DWORD dwStreamId;DWORD dwStreamAttributes;LARGE_INTEGER Size;DWORD dwStreamNameSize;WCHAR cStreamName[1];};
struct _WSANSClassInfoA {LPSTR lpszName;DWORD dwNameSpace;DWORD dwValueType;DWORD dwValueSize;LPVOID lpValue;};
struct _tagPROTOCOLDATA {DWORD grfFlags;DWORD dwState;LPVOID pData;ULONG cbData;};
struct tagCANDIDATEFORM {DWORD dwIndex;DWORD dwStyle;POINT ptCurrentPos;RECT rcArea;};
struct tagDEBUGHOOKINFO {DWORD idThread;DWORD idThreadInstaller;LPARAM lParam;WPARAM wParam;int code;};
struct tagEMRGDICOMMENT {EMR emr;DWORD cbData;BYTE Data[1];};
struct tagGUITHREADINFO {DWORD cbSize;DWORD flags;HWND hwndActive;HWND hwndFocus;HWND hwndCapture;HWND hwndMenuOwner;HWND hwndMoveSize;HWND hwndCaret;RECT rcCaret;};
struct tagHIGHCONTRASTA {UINT cbSize;DWORD dwFlags;LPSTR lpszDefaultScheme;};
struct _ADAPTER_STATUS {UCHAR adapter_address[6];UCHAR rev_major;UCHAR reserved0;UCHAR adapter_type;UCHAR rev_minor;WORD duration;WORD frmr_recv;WORD frmr_xmit;WORD iframe_recv_err;WORD xmit_aborts;DWORD xmit_success;DWORD recv_success;WORD iframe_xmit_err;WORD recv_buff_unavail;WORD t1_timeouts;WORD ti_timeouts;DWORD reserved1;WORD free_ncbs;WORD max_cfg_ncbs;WORD max_ncbs;WORD xmit_buf_unavail;WORD max_dgram_size;WORD pending_sess;WORD max_cfg_sess;WORD max_sess;WORD max_sess_pkt_size;WORD name_count;};
struct _CERT_EXTENSION {LPSTR pszObjId;BOOL fCritical;CRYPT_OBJID_BLOB Value;};
struct _CRL_DIST_POINT {CRL_DIST_POINT_NAME DistPointName;CRYPT_BIT_BLOB ReasonFlags;CERT_ALT_NAME_INFO CRLIssuer;};
struct _DISCDLGSTRUCTA {DWORD cbStructure;HWND hwndOwner;LPSTR lpLocalName;LPSTR lpRemoteName;DWORD dwFlags;};
struct _DISK_HISTOGRAM {LARGE_INTEGER DiskSize;LARGE_INTEGER Start;LARGE_INTEGER End;LARGE_INTEGER Average;LARGE_INTEGER AverageRead;LARGE_INTEGER AverageWrite;DWORD Granularity;DWORD Size;DWORD ReadCount;DWORD WriteCount;PHISTOGRAM_BUCKET Histogram;};
struct _PUBLICKEYSTRUC {BYTE bType;BYTE bVersion;WORD reserved;ALG_ID aiKeyAlg;};
struct _ZONEATTRIBUTES {ULONG cbSize;WCHAR szDisplayName[260];WCHAR szDescription[200];WCHAR szIconPath[260];DWORD dwTemplateMinLevel;DWORD dwTemplateRecommended;DWORD dwTemplateCurrentLevel;DWORD dwFlags;};
struct tagCOMBOBOXINFO {DWORD cbSize;RECT rcItem;RECT rcButton;DWORD stateButton;HWND hwndCombo;HWND hwndItem;HWND hwndList;};
struct tagEMRCREATEPEN {EMR emr;DWORD ihPen;LOGPEN lopn;};
struct tagEMREXTESCAPE {EMR emr;INT iEscape;INT cbEscData;BYTE EscData[1];};
struct tagEMRGLSRECORD {EMR emr;DWORD cbData;BYTE Data[1];};
struct tagEMRROUNDRECT {EMR emr;RECTL rclBox;SIZEL szlCorner;};
struct tagEMRSETPIXELV {EMR emr;POINTL ptlPixel;COLORREF crColor;};
struct tagMONERRSTRUCT {UINT cb;UINT wLastError;DWORD dwTime;HANDLE hTask;};
struct tagQUERYCONTEXT {DWORD dwContext;CSPLATFORM Platform;LCID Locale;DWORD dwVersionHi;DWORD dwVersionLo;};
struct tagSOUNDSENTRYA {UINT cbSize;DWORD dwFlags;DWORD iFSTextEffect;DWORD iFSTextEffectMSec;DWORD iFSTextEffectColorBits;DWORD iFSGrafEffect;DWORD iFSGrafEffectMSec;DWORD iFSGrafEffectColor;DWORD iWindowsEffect;DWORD iWindowsEffectMSec;LPSTR lpszWindowsEffectDLL;DWORD iWindowsEffectOrdinal;};
typedef BOOL (__stdcall *GRAYSTRINGPROC)(HDC, LPARAM, int);
struct ISurrogateVtbl {HRESULT (__stdcall *QueryInterface)(ISurrogate *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(ISurrogate *This);ULONG (__stdcall *Release)(ISurrogate *This);HRESULT (__stdcall *LoadDllServer)(ISurrogate *This, const IID *const Clsid);HRESULT (__stdcall *FreeSurrogate)(ISurrogate *This);};
struct _CERT_RDN_ATTR {LPSTR pszObjId;DWORD dwValueType;CERT_RDN_VALUE_BLOB Value;};
struct _DISK_GEOMETRY {LARGE_INTEGER Cylinders;MEDIA_TYPE MediaType;DWORD TracksPerCylinder;DWORD SectorsPerTrack;DWORD BytesPerSector;};
struct _NETINFOSTRUCT {DWORD cbStructure;DWORD dwProviderVersion;DWORD dwStatus;DWORD dwCharacteristics;ULONG_PTR dwHandle;WORD wNetType;DWORD dwPrinters;DWORD dwDrives;};
struct _PROV_ENUMALGS {ALG_ID aiAlgid;DWORD dwBitLen;DWORD dwNameLen;CHAR szName[20];};
struct tagCONVCONTEXT {UINT cb;UINT wFlags;UINT wCountryID;int iCodePage;DWORD dwLangID;DWORD dwSecurity;SECURITY_QUALITY_OF_SERVICE qos;};
struct tagSERIALKEYSA {UINT cbSize;DWORD dwFlags;LPSTR lpszActivePort;LPSTR lpszPort;UINT iBaudRate;UINT iPortState;UINT iActive;};
struct tagTEXTMETRICW {LONG tmHeight;LONG tmAscent;LONG tmDescent;LONG tmInternalLeading;LONG tmExternalLeading;LONG tmAveCharWidth;LONG tmMaxCharWidth;LONG tmWeight;LONG tmOverhang;LONG tmDigitizedAspectX;LONG tmDigitizedAspectY;WCHAR tmFirstChar;WCHAR tmLastChar;WCHAR tmDefaultChar;WCHAR tmBreakChar;BYTE tmItalic;BYTE tmUnderlined;BYTE tmStruckOut;BYTE tmPitchAndFamily;BYTE tmCharSet;};
struct IContinueVtbl {HRESULT (__stdcall *QueryInterface)(IContinue *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IContinue *This);ULONG (__stdcall *Release)(IContinue *This);HRESULT (__stdcall *FContinue)(IContinue *This);};
struct IInternetVtbl {HRESULT (__stdcall *QueryInterface)(IInternet *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IInternet *This);ULONG (__stdcall *Release)(IInternet *This);};
typedef BOOL (__stdcall *NAMEENUMPROCA)(LPSTR, LPARAM);
typedef DWORD __stdcall PM_QUERY_PROC(LPDWORD, LPVOID *, LPDWORD, LPDWORD);
struct _CMS_KEY_INFO {DWORD dwVersion;ALG_ID Algid;BYTE *pbOID;DWORD cbOID;};
struct _DISK_LOGGING {BYTE Function;PVOID BufferAddress;DWORD BufferSize;};
struct tagBIND_OPTS2 {DWORD cbStruct;DWORD grfFlags;DWORD grfMode;DWORD dwTickCountDeadline;DWORD dwTrackFlags;DWORD dwClassContext;LCID locale;COSERVERINFO *pServerInfo;};
struct tagCURSORINFO {DWORD cbSize;DWORD flags;HCURSOR hCursor;POINT ptScreenPos;};
struct tagDISPPARAMS {VARIANTARG *rgvarg;DISPID *rgdispidNamedArgs;UINT cArgs;UINT cNamedArgs;};
struct tagKEYBDINPUT {WORD wVk;WORD wScan;DWORD dwFlags;DWORD time;ULONG_PTR dwExtraInfo;};
struct tagLOGBRUSH32 {UINT lbStyle;COLORREF lbColor;ULONG lbHatch;};
struct tagMOUSEINPUT {LONG dx;LONG dy;DWORD mouseData;DWORD dwFlags;DWORD time;ULONG_PTR dwExtraInfo;};
struct IUnknownVtbl {HRESULT (__stdcall *QueryInterface)(IUnknown *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IUnknown *This);ULONG (__stdcall *Release)(IUnknown *This);};
typedef void (__stdcall *LPOCNDSCPROC)(SCARDCONTEXT, SCARDHANDLE, PVOID);
typedef DWORD QUERYHANDLER(LPVOID keycontext, PVALCONTEXT val_list, DWORD num_vals, LPVOID outputbuffer, DWORD *total_outlen, DWORD input_blen);
struct _JOB_INFO_1A {DWORD JobId;LPSTR pPrinterName;LPSTR pMachineName;LPSTR pUserName;LPSTR pDocument;LPSTR pDatatype;LPSTR pStatus;DWORD Status;DWORD Priority;DWORD Position;DWORD TotalPages;DWORD PagesPrinted;SYSTEMTIME Submitted;};
struct _OFNOTIFYEXA {NMHDR hdr;LPOPENFILENAMEA lpOFN;LPVOID psf;LPVOID pidl;};
struct _OFNOTIFYEXW {NMHDR hdr;LPOPENFILENAMEW lpOFN;LPVOID psf;LPVOID pidl;};
struct _SHFILEINFOA {HICON hIcon;int iIcon;DWORD dwAttributes;CHAR szDisplayName[260];CHAR szTypeName[80];};
struct _SHFILEINFOW {HICON hIcon;int iIcon;DWORD dwAttributes;WCHAR szDisplayName[260];WCHAR szTypeName[80];};
struct tagARRAYDESC {TYPEDESC tdescElem;USHORT cDims;SAFEARRAYBOUND rgbounds[1];};
struct tagPOLYTEXTA {int x;int y;UINT n;LPCSTR lpstr;UINT uiFlags;RECT rcl;int *pdx;};
typedef void __stdcall DRVCALLBACK(HDRVR hdrvr, UINT uMsg, DWORD dwUser, DWORD dw1, DWORD dw2);
typedef BOOL (__stdcall *IMCENUMPROC)(HIMC, LPARAM);
typedef BOOL (__stdcall *WNDENUMPROC)(HWND, LPARAM);
struct _CERT_CHAIN {DWORD cCerts;PCERT_BLOB certs;CRYPT_KEY_PROV_INFO keyLocatorInfo;};
struct _OVERLAPPED {ULONG_PTR Internal;ULONG_PTR InternalHigh;DWORD Offset;DWORD OffsetHigh;HANDLE hEvent;};
struct tagEVENTMSG {UINT message;UINT paramL;UINT paramH;DWORD time;HWND hwnd;};
struct tagJOYCAPSA {WORD wMid;WORD wPid;CHAR szPname[32];UINT wXmin;UINT wXmax;UINT wYmin;UINT wYmax;UINT wZmin;UINT wZmax;UINT wNumButtons;UINT wPeriodMin;UINT wPeriodMax;UINT wRmin;UINT wRmax;UINT wUmin;UINT wUmax;UINT wVmin;UINT wVmax;UINT wCaps;UINT wMaxAxes;UINT wNumAxes;UINT wMaxButtons;CHAR szRegKey[32];CHAR szOEMVxD[260];};
struct tagJOYCAPSW {WORD wMid;WORD wPid;WCHAR szPname[32];UINT wXmin;UINT wXmax;UINT wYmin;UINT wYmax;UINT wZmin;UINT wZmax;UINT wNumButtons;UINT wPeriodMin;UINT wPeriodMax;UINT wRmin;UINT wRmax;UINT wUmin;UINT wUmax;UINT wVmin;UINT wVmax;UINT wCaps;UINT wMaxAxes;UINT wNumAxes;UINT wMaxButtons;WCHAR szRegKey[32];WCHAR szOEMVxD[260];};
struct tagLOGBRUSH {UINT lbStyle;COLORREF lbColor;ULONG_PTR lbHatch;};
struct tagLOGFONTA {LONG lfHeight;LONG lfWidth;LONG lfEscapement;LONG lfOrientation;LONG lfWeight;BYTE lfItalic;BYTE lfUnderline;BYTE lfStrikeOut;BYTE lfCharSet;BYTE lfOutPrecision;BYTE lfClipPrecision;BYTE lfQuality;BYTE lfPitchAndFamily;CHAR lfFaceName[32];};
struct tagLOGFONTW {LONG lfHeight;LONG lfWidth;LONG lfEscapement;LONG lfOrientation;LONG lfWeight;BYTE lfItalic;BYTE lfUnderline;BYTE lfStrikeOut;BYTE lfCharSet;BYTE lfOutPrecision;BYTE lfClipPrecision;BYTE lfQuality;BYTE lfPitchAndFamily;WCHAR lfFaceName[32];};
struct _CTL_ENTRY {CRYPT_DATA_BLOB SubjectIdentifier;DWORD cAttribute;PCRYPT_ATTRIBUTE rgAttribute;};
struct _HMAC_Info {ALG_ID HashAlgid;BYTE *pbInnerString;DWORD cbInnerString;BYTE *pbOuterString;DWORD cbOuterString;};
struct _OFNOTIFYA {NMHDR hdr;LPOPENFILENAMEA lpOFN;LPSTR pszFile;};
struct _cpinfoexW {UINT MaxCharSize;BYTE DefaultChar[2];BYTE LeadByte[12];WCHAR UnicodeDefaultChar;UINT CodePage;WCHAR CodePageName[260];};
struct tagEMRTEXT {POINTL ptlReference;DWORD nChars;DWORD offString;DWORD fOptions;RECTL rcl;DWORD offDx;};
struct value_entA {LPSTR ve_valuename;DWORD ve_valuelen;DWORD_PTR ve_valueptr;DWORD ve_type;};
typedef UINT (__stdcall *YIELDPROC)(MCIDEVICEID mciId, DWORD dwYieldData);
struct _COMMPROP {WORD wPacketLength;WORD wPacketVersion;DWORD dwServiceMask;DWORD dwReserved1;DWORD dwMaxTxQueue;DWORD dwMaxRxQueue;DWORD dwMaxBaud;DWORD dwProvSubType;DWORD dwProvCapabilities;DWORD dwSettableParams;DWORD dwSettableBaud;WORD wSettableData;WORD wSettableStopParity;DWORD dwCurrentTxQueue;DWORD dwCurrentRxQueue;DWORD dwProvSpec1;DWORD dwProvSpec2;WCHAR wcProvChar[1];};
struct _ICONINFO {BOOL fIcon;DWORD xHotspot;DWORD yHotspot;HBITMAP hbmMask;HBITMAP hbmColor;};
struct _OFSTRUCT {BYTE cBytes;BYTE fFixedDisk;WORD nErrCode;WORD Reserved1;WORD Reserved2;CHAR szPathName[128];};
struct tagBITMAP {LONG bmType;LONG bmWidth;LONG bmHeight;LONG bmWidthBytes;WORD bmPlanes;WORD bmBitsPixel;LPVOID bmBits;};
struct tagEMRARC {EMR emr;RECTL rclBox;POINTL ptlStart;POINTL ptlEnd;};
struct tagLOGPEN {UINT lopnStyle;POINT lopnWidth;COLORREF lopnColor;};
typedef LRESULT (__stdcall *HOOKPROC)(int code, WPARAM wParam, LPARAM lParam);
struct _CONTEXT {DWORD ContextFlags;DWORD Dr0;DWORD Dr1;DWORD Dr2;DWORD Dr3;DWORD Dr6;DWORD Dr7;FLOATING_SAVE_AREA FloatSave;DWORD SegGs;DWORD SegFs;DWORD SegEs;DWORD SegDs;DWORD Edi;DWORD Esi;DWORD Ebx;DWORD Edx;DWORD Ecx;DWORD Eax;DWORD Ebp;DWORD Eip;DWORD SegCs;DWORD EFlags;DWORD Esp;DWORD SegSs;BYTE ExtendedRegisters[512];};
struct tagNMHDR {HWND hwndFrom;UINT_PTR idFrom;UINT code;};
struct pvalueA {LPSTR pv_valuename;int pv_valuelen;LPVOID pv_value_context;DWORD pv_type;};
struct _DCB {DWORD DCBlength;DWORD BaudRate;unsigned __int32 fBinary : 1;unsigned __int32 fParity : 1;unsigned __int32 fOutxCtsFlow : 1;unsigned __int32 fOutxDsrFlow : 1;unsigned __int32 fDtrControl : 2;unsigned __int32 fDsrSensitivity : 1;unsigned __int32 fTXContinueOnXoff : 1;unsigned __int32 fOutX : 1;unsigned __int32 fInX : 1;unsigned __int32 fErrorChar : 1;unsigned __int32 fNull : 1;unsigned __int32 fRtsControl : 2;unsigned __int32 fAbortOnError : 1;unsigned __int32 fDummy2 : 17;WORD wReserved;WORD XonLim;WORD XoffLim;BYTE ByteSize;BYTE Parity;BYTE StopBits;char XonChar;char XoffChar;char ErrorChar;char EofChar;char EvtChar;WORD wReserved1;};
struct _SID {BYTE Revision;BYTE SubAuthorityCount;SID_IDENTIFIER_AUTHORITY IdentifierAuthority;DWORD SubAuthority[1];};
struct _DEVICE_MEDIA_INFO___2DD95E35CD64FCF2582B874AE4A78983___723F4108713078BC94E60AB72DA19CAC {STORAGE_MEDIA_TYPE MediaType;DWORD MediaCharacteristics;DWORD CurrentBlockSize;STORAGE_BUS_TYPE BusType;union _DEVICE_MEDIA_INFO______723F4108713078BC94E60AB72DA19CAC___4F7870307D68C2FCA7F129B9E5696535 BusSpecificData;};
struct _RPC_ASYNC_STATE___C850AED24DDA9EA1FCF494DA424838E3___5843F6C8FAC72B709E58873D9E66E99B {HANDLE hIOPort;DWORD dwNumberOfBytesTransferred;DWORD_PTR dwCompletionKey;LPOVERLAPPED lpOverlapped;};
struct _IMAGE_AUX_SYMBOL___0ECF6FFE4CB91F7643C274EBA09FDD11 {DWORD Length;WORD NumberOfRelocations;WORD NumberOfLinenumbers;DWORD CheckSum;SHORT Number;BYTE Selection;};
struct _IMAGE_AUX_SYMBOL___23DFC5686F0E6924815C955A999B653C {DWORD TagIndex;union _IMAGE_AUX_SYMBOL___23DFC5686F0E6924815C955A999B653C___7BA673E1ED5771089D188D89EB9BDF46 Misc;union _IMAGE_AUX_SYMBOL___23DFC5686F0E6924815C955A999B653C___16A1A8FB0340C07B06C110366CF85D46 FcnAry;WORD TvIndex;};
struct tagMIXERLINEA___3F59E0B102B49F482C4A8B1440A7891E {DWORD dwType;DWORD dwDeviceID;WORD wMid;WORD wPid;MMVERSION vDriverVersion;CHAR szPname[32];};
struct tagMIXERLINEW___9A19AF7771B1B870F9962D397CED60DA {DWORD dwType;DWORD dwDeviceID;WORD wMid;WORD wPid;MMVERSION vDriverVersion;WCHAR szPname[32];};
typedef void (__stdcall *PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC)(LPVOID pvCompletion, DWORD dwCompletionCode, LPCSTR pszUrl, LPSTR pszObjectOid, LPVOID pvObject);
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_GET_CERT_PROPERTY)(HCERTSTOREPROV hStoreProv, PCCERT_CONTEXT pCertContext, DWORD dwPropId, DWORD dwFlags, void *pvData, DWORD *pcbData);
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_SET_CERT_PROPERTY)(HCERTSTOREPROV hStoreProv, PCCERT_CONTEXT pCertContext, DWORD dwPropId, DWORD dwFlags, const void *pvData);
struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION {DWORD SecurityLimitFlags;HANDLE JobToken;PTOKEN_GROUPS SidsToDisable;PTOKEN_PRIVILEGES PrivilegesToDelete;PTOKEN_GROUPS RestrictedSids;};
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_GET_CRL_PROPERTY)(HCERTSTOREPROV hStoreProv, PCCRL_CONTEXT pCrlContext, DWORD dwPropId, DWORD dwFlags, void *pvData, DWORD *pcbData);
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_GET_CTL_PROPERTY)(HCERTSTOREPROV hStoreProv, PCCTL_CONTEXT pCtlContext, DWORD dwPropId, DWORD dwFlags, void *pvData, DWORD *pcbData);
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_SET_CRL_PROPERTY)(HCERTSTOREPROV hStoreProv, PCCRL_CONTEXT pCrlContext, DWORD dwPropId, DWORD dwFlags, const void *pvData);
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_SET_CTL_PROPERTY)(HCERTSTOREPROV hStoreProv, PCCTL_CONTEXT pCtlContext, DWORD dwPropId, DWORD dwFlags, const void *pvData);
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_FREE_FIND_CERT)(HCERTSTOREPROV hStoreProv, PCCERT_CONTEXT pCertContext, void *pvStoreProvFindInfo, DWORD dwFlags);
struct _CMSG_RECIPIENT_ENCRYPTED_KEY_INFO {CERT_ID RecipientId;CRYPT_DATA_BLOB EncryptedKey;FILETIME Date;PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;};
struct _JOBOBJECT_BASIC_LIMIT_INFORMATION {LARGE_INTEGER PerProcessUserTimeLimit;LARGE_INTEGER PerJobUserTimeLimit;DWORD LimitFlags;SIZE_T MinimumWorkingSetSize;SIZE_T MaximumWorkingSetSize;DWORD ActiveProcessLimit;ULONG_PTR Affinity;DWORD PriorityClass;DWORD SchedulingClass;};
struct _22BDD2D628B0B561C5A9CA42290FE551 {DWORD bV4Size;LONG bV4Width;LONG bV4Height;WORD bV4Planes;WORD bV4BitCount;DWORD bV4V4Compression;DWORD bV4SizeImage;LONG bV4XPelsPerMeter;LONG bV4YPelsPerMeter;DWORD bV4ClrUsed;DWORD bV4ClrImportant;DWORD bV4RedMask;DWORD bV4GreenMask;DWORD bV4BlueMask;DWORD bV4AlphaMask;DWORD bV4CSType;CIEXYZTRIPLE bV4Endpoints;DWORD bV4GammaRed;DWORD bV4GammaGreen;DWORD bV4GammaBlue;};
struct _2B6042393D1A02E0AE9B16B44F784AC7 {DWORD bV5Size;LONG bV5Width;LONG bV5Height;WORD bV5Planes;WORD bV5BitCount;DWORD bV5Compression;DWORD bV5SizeImage;LONG bV5XPelsPerMeter;LONG bV5YPelsPerMeter;DWORD bV5ClrUsed;DWORD bV5ClrImportant;DWORD bV5RedMask;DWORD bV5GreenMask;DWORD bV5BlueMask;DWORD bV5AlphaMask;DWORD bV5CSType;CIEXYZTRIPLE bV5Endpoints;DWORD bV5GammaRed;DWORD bV5GammaGreen;DWORD bV5GammaBlue;DWORD bV5Intent;DWORD bV5ProfileData;DWORD bV5ProfileSize;DWORD bV5Reserved;};
struct _DC79A6464562D2DC48FEEE8D5793116D {LPCSTR szReader;LPVOID pvUserData;DWORD dwCurrentState;DWORD dwEventState;DWORD cbAtr;BYTE rgbAtr[36];};
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_FREE_FIND_CRL)(HCERTSTOREPROV hStoreProv, PCCRL_CONTEXT pCrlContext, void *pvStoreProvFindInfo, DWORD dwFlags);
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_FREE_FIND_CTL)(HCERTSTOREPROV hStoreProv, PCCTL_CONTEXT pCtlContext, void *pvStoreProvFindInfo, DWORD dwFlags);
struct _CMSG_CTRL_KEY_AGREE_DECRYPT_PARA {DWORD cbSize;HCRYPTPROV hCryptProv;DWORD dwKeySpec;PCMSG_KEY_AGREE_RECIPIENT_INFO pKeyAgree;DWORD dwRecipientIndex;DWORD dwRecipientEncryptedKeyIndex;CRYPT_BIT_BLOB OriginatorPublicKey;};
typedef PCCERT_CONTEXT (__stdcall *PFN_CRYPT_GET_SIGNER_CERTIFICATE)(void *pvGetArg, DWORD dwCertEncodingType, PCERT_INFO pSignerId, HCERTSTORE hMsgCertStore);
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_DELETE_CERT)(HCERTSTOREPROV hStoreProv, PCCERT_CONTEXT pCertContext, DWORD dwFlags);
struct _CERT_CHAIN_FIND_BY_ISSUER_PARA {DWORD cbSize;LPCSTR pszUsageIdentifier;DWORD dwKeySpec;DWORD dwAcquirePrivateKeyFlags;DWORD cIssuer;CERT_NAME_BLOB *rgIssuer;PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK pfnFindCallback;void *pvFindArg;};
struct _USER_MARSHAL_ROUTINE_QUADRUPLE {USER_MARSHAL_SIZING_ROUTINE pfnBufferSize;USER_MARSHAL_MARSHALLING_ROUTINE pfnMarshall;USER_MARSHAL_UNMARSHALLING_ROUTINE pfnUnmarshall;USER_MARSHAL_FREEING_ROUTINE pfnFree;};
typedef BOOL (__stdcall *PCRYPT_RESOLVE_HCRYPTPROV_FUNC)(CRYPT_PRIVATE_KEY_INFO *pPrivateKeyInfo, HCRYPTPROV *phCryptProv, LPVOID pVoidResolveFunc);
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_DELETE_CRL)(HCERTSTOREPROV hStoreProv, PCCRL_CONTEXT pCrlContext, DWORD dwFlags);
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_DELETE_CTL)(HCERTSTOREPROV hStoreProv, PCCTL_CONTEXT pCtlContext, DWORD dwFlags);
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_WRITE_CERT)(HCERTSTOREPROV hStoreProv, PCCERT_CONTEXT pCertContext, DWORD dwFlags);
struct _CMSG_KEY_TRANS_RECIPIENT_INFO {DWORD dwVersion;CERT_ID RecipientId;CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;CRYPT_DATA_BLOB EncryptedKey;};
struct _CRYPT_TIME_STAMP_REQUEST_INFO {LPSTR pszTimeStampAlgorithm;LPSTR pszContentType;CRYPT_OBJID_BLOB Content;DWORD cAttribute;PCRYPT_ATTRIBUTE rgAttribute;};
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_READ_CERT)(HCERTSTOREPROV hStoreProv, PCCERT_CONTEXT pStoreCertContext, DWORD dwFlags, PCCERT_CONTEXT *ppProvCertContext);
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_WRITE_CRL)(HCERTSTOREPROV hStoreProv, PCCRL_CONTEXT pCrlContext, DWORD dwFlags);
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_WRITE_CTL)(HCERTSTOREPROV hStoreProv, PCCTL_CONTEXT pCtlContext, DWORD dwFlags);
struct _MEMORY_BASIC_INFORMATION_VLM {_MEMORY_BASIC_INFORMATION_VLM___1C048A2196DAD501277AB2AA6FBC3D43 __anonymous0;_MEMORY_BASIC_INFORMATION_VLM___023421F2A53415AC5289F1A60128413B __anonymous1;ULONGLONG RegionSize;DWORD AllocationProtect;DWORD State;DWORD Protect;DWORD Type;};
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_READ_CRL)(HCERTSTOREPROV hStoreProv, PCCRL_CONTEXT pStoreCrlContext, DWORD dwFlags, PCCRL_CONTEXT *ppProvCrlContext);
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_READ_CTL)(HCERTSTOREPROV hStoreProv, PCCTL_CONTEXT pStoreCtlContext, DWORD dwFlags, PCCTL_CONTEXT *ppProvCtlContext);
struct _CERT_BASIC_CONSTRAINTS_INFO {CRYPT_BIT_BLOB SubjectType;BOOL fPathLenConstraint;DWORD dwPathLenConstraint;DWORD cSubtreesConstraint;CERT_NAME_BLOB *rgSubtreesConstraint;};
struct _CMSG_ENVELOPED_ENCODE_INFO {DWORD cbSize;HCRYPTPROV hCryptProv;CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;void *pvEncryptionAuxInfo;DWORD cRecipients;PCERT_INFO *rgpRecipients;};
struct _ACCESS_ALLOWED_OBJECT_ACE {ACE_HEADER Header;ACCESS_MASK Mask;DWORD Flags;GUID ObjectType;GUID InheritedObjectType;DWORD SidStart;};
struct IGlobalInterfaceTableVtbl {HRESULT (__stdcall *QueryInterface)(IGlobalInterfaceTable *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IGlobalInterfaceTable *This);ULONG (__stdcall *Release)(IGlobalInterfaceTable *This);HRESULT (__stdcall *RegisterInterfaceInGlobal)(IGlobalInterfaceTable *This, IUnknown *pUnk, const IID *const riid, DWORD *pdwCookie);HRESULT (__stdcall *RevokeInterfaceFromGlobal)(IGlobalInterfaceTable *This, DWORD dwCookie);HRESULT (__stdcall *GetInterfaceFromGlobal)(IGlobalInterfaceTable *This, DWORD dwCookie, const IID *const riid, void **ppv);};
struct ISynchronizeContainerVtbl {HRESULT (__stdcall *QueryInterface)(ISynchronizeContainer *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(ISynchronizeContainer *This);ULONG (__stdcall *Release)(ISynchronizeContainer *This);HRESULT (__stdcall *AddSynchronize)(ISynchronizeContainer *This, ISynchronize *pSync);HRESULT (__stdcall *WaitMultiple)(ISynchronizeContainer *This, DWORD dwFlags, DWORD dwTimeOut, ISynchronize **ppSync);};
struct ITimeAndNoticeControlVtbl {HRESULT (__stdcall *QueryInterface)(ITimeAndNoticeControl *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(ITimeAndNoticeControl *This);ULONG (__stdcall *Release)(ITimeAndNoticeControl *This);HRESULT (__stdcall *SuppressChanges)(ITimeAndNoticeControl *This, DWORD res1, DWORD res2);};
struct _ACCESS_DENIED_OBJECT_ACE {ACE_HEADER Header;ACCESS_MASK Mask;DWORD Flags;GUID ObjectType;GUID InheritedObjectType;DWORD SidStart;};
struct _REPARSE_GUID_DATA_BUFFER {DWORD ReparseTag;WORD ReparseDataLength;WORD Reserved;GUID ReparseGuid;struct _REPARSE_GUID_DATA_BUFFER___7E560C326EB38963D80E6D6A0DCA12F5 GenericReparseBuffer;};
struct tagMCI_ANIM_WINDOW_PARMSA {DWORD dwCallback;HWND hWnd;UINT nCmdShow;LPCSTR lpstrText;};
struct tagMCI_OVLY_WINDOW_PARMSA {DWORD dwCallback;HWND hWnd;UINT nCmdShow;LPCSTR lpstrText;};
typedef BOOL (__stdcall *PFN_IMPORT_PRIV_KEY_FUNC)(HCRYPTPROV hCryptProv, CRYPT_PRIVATE_KEY_INFO *pPrivateKeyInfo, DWORD dwFlags, void *pvAuxInfo);
struct _CMSG_SIGNED_ENCODE_INFO {DWORD cbSize;DWORD cSigners;PCMSG_SIGNER_ENCODE_INFO rgSigners;DWORD cCertEncoded;PCERT_BLOB rgCertEncoded;DWORD cCrlEncoded;PCRL_BLOB rgCrlEncoded;};
struct _SYSTEM_ALARM_OBJECT_ACE {ACE_HEADER Header;ACCESS_MASK Mask;DWORD Flags;GUID ObjectType;GUID InheritedObjectType;DWORD SidStart;};
struct _SYSTEM_AUDIT_OBJECT_ACE {ACE_HEADER Header;ACCESS_MASK Mask;DWORD Flags;GUID ObjectType;GUID InheritedObjectType;DWORD SidStart;};
struct IEnumSTATPROPSETSTGVtbl {HRESULT (__stdcall *QueryInterface)(IEnumSTATPROPSETSTG *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IEnumSTATPROPSETSTG *This);ULONG (__stdcall *Release)(IEnumSTATPROPSETSTG *This);HRESULT (__stdcall *Next)(IEnumSTATPROPSETSTG *This, ULONG celt, STATPROPSETSTG *rgelt, ULONG *pceltFetched);HRESULT (__stdcall *Skip)(IEnumSTATPROPSETSTG *This, ULONG celt);HRESULT (__stdcall *Reset)(IEnumSTATPROPSETSTG *This);HRESULT (__stdcall *Clone)(IEnumSTATPROPSETSTG *This, IEnumSTATPROPSETSTG **ppenum);};
struct IThumbnailExtractorVtbl {HRESULT (__stdcall *QueryInterface)(IThumbnailExtractor *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IThumbnailExtractor *This);ULONG (__stdcall *Release)(IThumbnailExtractor *This);HRESULT (__stdcall *ExtractThumbnail)(IThumbnailExtractor *This, IStorage *pStg, ULONG ulLength, ULONG ulHeight, ULONG *pulOutputLength, ULONG *pulOutputHeight, HBITMAP *phOutputBitmap);HRESULT (__stdcall *OnFileUpdated)(IThumbnailExtractor *This, IStorage *pStg);};
struct _CHANGER_ELEMENT_STATUS {CHANGER_ELEMENT Element;CHANGER_ELEMENT SrcElementAddress;DWORD Flags;DWORD ExceptionCode;BYTE TargetId;BYTE Lun;WORD Reserved;BYTE PrimaryVolumeID[36];BYTE AlternateVolumeID[36];};
struct _CRYPT_PRIVATE_KEY_INFO {DWORD Version;CRYPT_ALGORITHM_IDENTIFIER Algorithm;CRYPT_DER_BLOB PrivateKey;PCRYPT_ATTRIBUTES pAttributes;};
struct _DISK_CACHE_INFORMATION {BOOLEAN ParametersSavable;BOOLEAN ReadCacheEnabled;BOOLEAN WriteCacheEnabled;DISK_CACHE_RETENTION_PRIORITY ReadRetentionPriority;DISK_CACHE_RETENTION_PRIORITY WriteRetentionPriority;WORD DisablePrefetchTransferLength;BOOLEAN PrefetchScalar;_DISK_CACHE_INFORMATION___0AD8AF95EFD10BD5272FB6EC04FE066D __anonymous0;};
struct tagEMRCREATECOLORSPACEW {EMR emr;DWORD ihCS;LOGCOLORSPACEW lcs;DWORD dwFlags;DWORD cbData;BYTE Data[1];};
struct tagEMRSETDIBITSTODEVICE {EMR emr;RECTL rclBounds;LONG xDest;LONG yDest;LONG xSrc;LONG ySrc;LONG cxSrc;LONG cySrc;DWORD offBmiSrc;DWORD cbBmiSrc;DWORD offBitsSrc;DWORD cbBitsSrc;DWORD iUsageSrc;DWORD iStartScan;DWORD cScans;};
struct tagLAYERPLANEDESCRIPTOR {WORD nSize;WORD nVersion;DWORD dwFlags;BYTE iPixelType;BYTE cColorBits;BYTE cRedBits;BYTE cRedShift;BYTE cGreenBits;BYTE cGreenShift;BYTE cBlueBits;BYTE cBlueShift;BYTE cAlphaBits;BYTE cAlphaShift;BYTE cAccumBits;BYTE cAccumRedBits;BYTE cAccumGreenBits;BYTE cAccumBlueBits;BYTE cAccumAlphaBits;BYTE cDepthBits;BYTE cStencilBits;BYTE cAuxBuffers;BYTE iLayerPlane;BYTE bReserved;COLORREF crTransparent;};
struct tagMCI_ANIM_OPEN_PARMSA {DWORD dwCallback;MCIDEVICEID wDeviceID;LPCSTR lpstrDeviceType;LPCSTR lpstrElementName;LPCSTR lpstrAlias;DWORD dwStyle;HWND hWndParent;};
struct tagMCI_OVLY_OPEN_PARMSA {DWORD dwCallback;MCIDEVICEID wDeviceID;LPCSTR lpstrDeviceType;LPCSTR lpstrElementName;LPCSTR lpstrAlias;DWORD dwStyle;HWND hWndParent;};
struct ISynchronizeHandleVtbl {HRESULT (__stdcall *QueryInterface)(ISynchronizeHandle *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(ISynchronizeHandle *This);ULONG (__stdcall *Release)(ISynchronizeHandle *This);HRESULT (__stdcall *GetHandle)(ISynchronizeHandle *This, HANDLE *ph);};
struct _IMAGE_OPTIONAL_HEADER {WORD Magic;BYTE MajorLinkerVersion;BYTE MinorLinkerVersion;DWORD SizeOfCode;DWORD SizeOfInitializedData;DWORD SizeOfUninitializedData;DWORD AddressOfEntryPoint;DWORD BaseOfCode;DWORD BaseOfData;DWORD ImageBase;DWORD SectionAlignment;DWORD FileAlignment;WORD MajorOperatingSystemVersion;WORD MinorOperatingSystemVersion;WORD MajorImageVersion;WORD MinorImageVersion;WORD MajorSubsystemVersion;WORD MinorSubsystemVersion;DWORD Win32VersionValue;DWORD SizeOfImage;DWORD SizeOfHeaders;DWORD CheckSum;WORD Subsystem;WORD DllCharacteristics;DWORD SizeOfStackReserve;DWORD SizeOfStackCommit;DWORD SizeOfHeapReserve;DWORD SizeOfHeapCommit;DWORD LoaderFlags;DWORD NumberOfRvaAndSizes;IMAGE_DATA_DIRECTORY DataDirectory[16];};
struct _PARTITION_INFORMATION {LARGE_INTEGER StartingOffset;LARGE_INTEGER PartitionLength;DWORD HiddenSectors;DWORD PartitionNumber;BYTE PartitionType;BOOLEAN BootIndicator;BOOLEAN RecognizedPartition;BOOLEAN RewritePartition;};
struct tagEMRGLSBOUNDEDRECORD {EMR emr;RECTL rclBounds;DWORD cbData;BYTE Data[1];};
struct IDirectWriterLockVtbl {HRESULT (__stdcall *QueryInterface)(IDirectWriterLock *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IDirectWriterLock *This);ULONG (__stdcall *Release)(IDirectWriterLock *This);HRESULT (__stdcall *WaitForWriteAccess)(IDirectWriterLock *This, DWORD dwTimeout);HRESULT (__stdcall *ReleaseWriteAccess)(IDirectWriterLock *This);HRESULT (__stdcall *HaveWriteAccess)(IDirectWriterLock *This);};
struct IInternetPriorityVtbl {HRESULT (__stdcall *QueryInterface)(IInternetPriority *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IInternetPriority *This);ULONG (__stdcall *Release)(IInternetPriority *This);HRESULT (__stdcall *SetPriority)(IInternetPriority *This, LONG nPriority);HRESULT (__stdcall *GetPriority)(IInternetPriority *This, LONG *pnPriority);};
struct ISynchronizeEventVtbl {HRESULT (__stdcall *QueryInterface)(ISynchronizeEvent *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(ISynchronizeEvent *This);ULONG (__stdcall *Release)(ISynchronizeEvent *This);HRESULT (__stdcall *GetHandle)(ISynchronizeEvent *This, HANDLE *ph);HRESULT (__stdcall *SetEventHandle)(ISynchronizeEvent *This, HANDLE *ph);};
struct ISynchronizeMutexVtbl {HRESULT (__stdcall *QueryInterface)(ISynchronizeMutex *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(ISynchronizeMutex *This);ULONG (__stdcall *Release)(ISynchronizeMutex *This);HRESULT (__stdcall *Wait)(ISynchronizeMutex *This, DWORD dwFlags, DWORD dwMilliseconds);HRESULT (__stdcall *Signal)(ISynchronizeMutex *This);HRESULT (__stdcall *Reset)(ISynchronizeMutex *This);HRESULT (__stdcall *ReleaseMutex)(ISynchronizeMutex *This);};
typedef BOOL (__stdcall *LPFNADDPROPSHEETPAGES)(LPVOID, LPFNADDPROPSHEETPAGE, LPARAM);
struct _CERT_REVOCATION_PARA {DWORD cbSize;PCCERT_CONTEXT pIssuerCert;DWORD cCertStore;HCERTSTORE *rgCertStore;HCERTSTORE hCrlStore;LPFILETIME pftTimeToUse;};
struct _IMAGE_SECTION_HEADER {BYTE Name[8];union _IMAGE_SECTION_HEADER___39DFBA39B6D121CDFC1ACE66C995549C Misc;DWORD VirtualAddress;DWORD SizeOfRawData;DWORD PointerToRawData;DWORD PointerToRelocations;DWORD PointerToLinenumbers;WORD NumberOfRelocations;WORD NumberOfLinenumbers;DWORD Characteristics;};
struct _RPC_CLIENT_INTERFACE {unsigned int Length;RPC_SYNTAX_IDENTIFIER InterfaceId;RPC_SYNTAX_IDENTIFIER TransferSyntax;PRPC_DISPATCH_TABLE DispatchTable;unsigned int RpcProtseqEndpointCount;PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint;ULONG_PTR Reserved;const void *InterpreterInfo;unsigned int Flags;};
struct _RTL_CRITICAL_SECTION {PRTL_CRITICAL_SECTION_DEBUG DebugInfo;LONG LockCount;LONG RecursionCount;HANDLE OwningThread;HANDLE LockSemaphore;ULONG_PTR SpinCount;};
struct _WSAServiceClassInfoA {LPGUID lpServiceClassId;LPSTR lpszServiceClassName;DWORD dwCount;LPWSANSCLASSINFOA lpClassInfos;};
struct tagHARDWAREHOOKSTRUCT {HWND hwnd;UINT message;WPARAM wParam;LPARAM lParam;};
struct AsyncIPipeDoubleVtbl {HRESULT (__stdcall *QueryInterface)(AsyncIPipeDouble *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(AsyncIPipeDouble *This);ULONG (__stdcall *Release)(AsyncIPipeDouble *This);HRESULT (__stdcall *Begin_Pull)(AsyncIPipeDouble *This, ULONG cRequest);HRESULT (__stdcall *Finish_Pull)(AsyncIPipeDouble *This, DOUBLE *buf, ULONG *pcReturned);HRESULT (__stdcall *Begin_Push)(AsyncIPipeDouble *This, DOUBLE *buf, ULONG cSent);HRESULT (__stdcall *Finish_Push)(AsyncIPipeDouble *This);};
struct ICatalogFileInfoVtbl {HRESULT (__stdcall *QueryInterface)(ICatalogFileInfo *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(ICatalogFileInfo *This);ULONG (__stdcall *Release)(ICatalogFileInfo *This);HRESULT (__stdcall *GetCatalogFile)(ICatalogFileInfo *This, LPSTR *ppszCatalogFile);HRESULT (__stdcall *GetJavaTrust)(ICatalogFileInfo *This, void **ppJavaTrust);};
struct IEnumSTATPROPSTGVtbl {HRESULT (__stdcall *QueryInterface)(IEnumSTATPROPSTG *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IEnumSTATPROPSTG *This);ULONG (__stdcall *Release)(IEnumSTATPROPSTG *This);HRESULT (__stdcall *Next)(IEnumSTATPROPSTG *This, ULONG celt, STATPROPSTG *rgelt, ULONG *pceltFetched);HRESULT (__stdcall *Skip)(IEnumSTATPROPSTG *This, ULONG celt);HRESULT (__stdcall *Reset)(IEnumSTATPROPSTG *This);HRESULT (__stdcall *Clone)(IEnumSTATPROPSTG *This, IEnumSTATPROPSTG **ppenum);};
struct IOleAdviseHolderVtbl {HRESULT (__stdcall *QueryInterface)(IOleAdviseHolder *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IOleAdviseHolder *This);ULONG (__stdcall *Release)(IOleAdviseHolder *This);HRESULT (__stdcall *Advise)(IOleAdviseHolder *This, IAdviseSink *pAdvise, DWORD *pdwConnection);HRESULT (__stdcall *Unadvise)(IOleAdviseHolder *This, DWORD dwConnection);HRESULT (__stdcall *EnumAdvise)(IOleAdviseHolder *This, IEnumSTATDATA **ppenumAdvise);HRESULT (__stdcall *SendOnRename)(IOleAdviseHolder *This, IMoniker *pmk);HRESULT (__stdcall *SendOnSave)(IOleAdviseHolder *This);HRESULT (__stdcall *SendOnClose)(IOleAdviseHolder *This);};
struct IOleCacheControlVtbl {HRESULT (__stdcall *QueryInterface)(IOleCacheControl *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IOleCacheControl *This);ULONG (__stdcall *Release)(IOleCacheControl *This);HRESULT (__stdcall *OnRun)(IOleCacheControl *This, LPDATAOBJECT pDataObject);HRESULT (__stdcall *OnStop)(IOleCacheControl *This);};
struct IServiceProviderVtbl {HRESULT (__stdcall *QueryInterface)(IServiceProvider *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IServiceProvider *This);ULONG (__stdcall *Release)(IServiceProvider *This);HRESULT (__stdcall *QueryService)(IServiceProvider *This, const GUID *const guidService, const IID *const riid, void **ppvObject);};
struct _CTL_FIND_USAGE_PARA {DWORD cbSize;CTL_USAGE SubjectUsage;CRYPT_DATA_BLOB ListIdentifier;PCERT_INFO pSigner;};
struct _ENCRYPTED_DATA_INFO {DWORDLONG StartingFileOffset;DWORD OutputBufferOffset;DWORD BytesWithinFileSize;DWORD BytesWithinValidDataLength;WORD CompressionFormat;BYTE DataUnitShift;BYTE ChunkShift;BYTE ClusterShift;BYTE EncryptionFormat;WORD NumberOfDataBlocks;DWORD DataBlockSize[1];};
struct _LOAD_DLL_DEBUG_INFO {HANDLE hFile;LPVOID lpBaseOfDll;DWORD dwDebugInfoFileOffset;DWORD nDebugInfoSize;LPVOID lpImageName;WORD fUnicode;};
struct _SECURITY_DESCRIPTOR {BYTE Revision;BYTE Sbz1;SECURITY_DESCRIPTOR_CONTROL Control;PSID Owner;PSID Group;PACL Sacl;PACL Dacl;};
struct tagCOMPAREITEMSTRUCT {UINT CtlType;UINT CtlID;HWND hwndItem;UINT itemID1;ULONG_PTR itemData1;UINT itemID2;ULONG_PTR itemData2;DWORD dwLocaleId;};
struct tagEMRPOLYPOLYLINE16 {EMR emr;RECTL rclBounds;DWORD nPolys;DWORD cpts;DWORD aPolyCounts[1];POINTS apts[1];};
struct tagMENUGETOBJECTINFO {DWORD dwFlags;UINT uPos;HMENU hmenu;PVOID riid;PVOID pvObj;};
typedef BOOL (__stdcall *PFNPROCESSPOLICIESA)(HWND hwnd, LPCSTR pszPath, LPCSTR pszUsername, LPCSTR pszComputerName, DWORD dwFlags);
struct _CERT_CHAIN_ELEMENT {DWORD cbSize;PCCERT_CONTEXT pCertContext;CERT_TRUST_STATUS TrustStatus;PCERT_REVOCATION_INFO pRevocationInfo;};
struct _WSANAMESPACE_INFOA {GUID NSProviderId;DWORD dwNameSpace;BOOL fActive;DWORD dwVersion;LPSTR lpszIdentifier;};
struct tagEMRSTRETCHDIBITS {EMR emr;RECTL rclBounds;LONG xDest;LONG yDest;LONG xSrc;LONG ySrc;LONG cxSrc;LONG cySrc;DWORD offBmiSrc;DWORD cbBmiSrc;DWORD offBitsSrc;DWORD cbBitsSrc;DWORD iUsageSrc;DWORD dwRop;LONG cxDest;LONG cyDest;};
struct tagIMEMENUITEMINFOA {UINT cbSize;UINT fType;UINT fState;UINT wID;HBITMAP hbmpChecked;HBITMAP hbmpUnchecked;DWORD dwItemData;CHAR szString[80];HBITMAP hbmpItem;};
struct tagIMEMENUITEMINFOW {UINT cbSize;UINT fType;UINT fState;UINT wID;HBITMAP hbmpChecked;HBITMAP hbmpUnchecked;DWORD dwItemData;WCHAR szString[80];HBITMAP hbmpItem;};
struct tagMDICREATESTRUCTA {LPCSTR szClass;LPCSTR szTitle;HANDLE hOwner;int x;int y;int cx;int cy;DWORD style;LPARAM lParam;};
struct AsyncIPipeByteVtbl {HRESULT (__stdcall *QueryInterface)(AsyncIPipeByte *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(AsyncIPipeByte *This);ULONG (__stdcall *Release)(AsyncIPipeByte *This);HRESULT (__stdcall *Begin_Pull)(AsyncIPipeByte *This, ULONG cRequest);HRESULT (__stdcall *Finish_Pull)(AsyncIPipeByte *This, BYTE *buf, ULONG *pcReturned);HRESULT (__stdcall *Begin_Push)(AsyncIPipeByte *This, BYTE *buf, ULONG cSent);HRESULT (__stdcall *Finish_Push)(AsyncIPipeByte *This);};
struct AsyncIPipeLongVtbl {HRESULT (__stdcall *QueryInterface)(AsyncIPipeLong *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(AsyncIPipeLong *This);ULONG (__stdcall *Release)(AsyncIPipeLong *This);HRESULT (__stdcall *Begin_Pull)(AsyncIPipeLong *This, ULONG cRequest);HRESULT (__stdcall *Finish_Pull)(AsyncIPipeLong *This, LONG *buf, ULONG *pcReturned);HRESULT (__stdcall *Begin_Push)(AsyncIPipeLong *This, LONG *buf, ULONG cSent);HRESULT (__stdcall *Finish_Push)(AsyncIPipeLong *This);};
struct IEnumFORMATETCVtbl {HRESULT (__stdcall *QueryInterface)(IEnumFORMATETC *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IEnumFORMATETC *This);ULONG (__stdcall *Release)(IEnumFORMATETC *This);HRESULT (__stdcall *Next)(IEnumFORMATETC *This, ULONG celt, FORMATETC *rgelt, ULONG *pceltFetched);HRESULT (__stdcall *Skip)(IEnumFORMATETC *This, ULONG celt);HRESULT (__stdcall *Reset)(IEnumFORMATETC *This);HRESULT (__stdcall *Clone)(IEnumFORMATETC *This, IEnumFORMATETC **ppenum);};
struct IRpcStubBufferVtbl {HRESULT (__stdcall *QueryInterface)(IRpcStubBuffer *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IRpcStubBuffer *This);ULONG (__stdcall *Release)(IRpcStubBuffer *This);HRESULT (__stdcall *Connect)(IRpcStubBuffer *This, IUnknown *pUnkServer);void (__stdcall *Disconnect)(IRpcStubBuffer *This);HRESULT (__stdcall *Invoke)(IRpcStubBuffer *This, RPCOLEMESSAGE *prpcmsg, IRpcChannelBuffer *pRpcChannelBuffer);IRpcStubBuffer *(__stdcall *IsIIDSupported)(IRpcStubBuffer *This, const IID *const riid);ULONG (__stdcall *CountRefs)(IRpcStubBuffer *This);HRESULT (__stdcall *DebugServerQueryInterface)(IRpcStubBuffer *This, void **ppv);void (__stdcall *DebugServerRelease)(IRpcStubBuffer *This, void *pv);};
typedef DWORD (__stdcall *LPPROGRESS_ROUTINE)(LARGE_INTEGER TotalFileSize, LARGE_INTEGER TotalBytesTransferred, LARGE_INTEGER StreamSize, LARGE_INTEGER StreamBytesTransferred, DWORD dwStreamNumber, DWORD dwCallbackReason, HANDLE hSourceFile, HANDLE hDestinationFile, LPVOID lpData);
struct _CERT_REQUEST_INFO {DWORD dwVersion;CERT_NAME_BLOB Subject;CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;DWORD cAttribute;PCRYPT_ATTRIBUTE rgAttribute;};
struct _CERT_SIMPLE_CHAIN {DWORD cbSize;CERT_TRUST_STATUS TrustStatus;DWORD cElement;PCERT_CHAIN_ELEMENT *rgpElement;PCERT_TRUST_LIST_INFO pTrustListInfo;};
struct _MIDL_SERVER_INFO_ {PMIDL_STUB_DESC pStubDesc;const SERVER_ROUTINE *DispatchTable;PFORMAT_STRING ProcString;const unsigned __int16 *FmtStringOffset;const STUB_THUNK *ThunkTable;PFORMAT_STRING LocalFormatTypes;PFORMAT_STRING LocalProcString;const unsigned __int16 *LocalFmtStringOffset;};
struct _WSAPROTOCOL_INFOA {DWORD dwServiceFlags1;DWORD dwServiceFlags2;DWORD dwServiceFlags3;DWORD dwServiceFlags4;DWORD dwProviderFlags;GUID ProviderId;DWORD dwCatalogEntryId;WSAPROTOCOLCHAIN ProtocolChain;int iVersion;int iAddressFamily;int iMaxSockAddr;int iMinSockAddr;int iSocketType;int iProtocol;int iProtocolMaxOffset;int iNetworkByteOrder;int iSecurityScheme;DWORD dwMessageSize;DWORD dwProviderReserved;CHAR szProtocol[256];};
struct _WSAPROTOCOL_INFOW {DWORD dwServiceFlags1;DWORD dwServiceFlags2;DWORD dwServiceFlags3;DWORD dwServiceFlags4;DWORD dwProviderFlags;GUID ProviderId;DWORD dwCatalogEntryId;WSAPROTOCOLCHAIN ProtocolChain;int iVersion;int iAddressFamily;int iMaxSockAddr;int iMinSockAddr;int iSocketType;int iProtocol;int iProtocolMaxOffset;int iNetworkByteOrder;int iSecurityScheme;DWORD dwMessageSize;DWORD dwProviderReserved;WCHAR szProtocol[256];};
struct tagEMREXTFLOODFILL {EMR emr;POINTL ptlStart;COLORREF crColor;DWORD iMode;};
struct tagEMRPOLYPOLYLINE {EMR emr;RECTL rclBounds;DWORD nPolys;DWORD cptl;DWORD aPolyCounts[1];POINTL aptl[1];};
struct tagIMECHARPOSITION {DWORD dwSize;DWORD dwCharPos;POINT pt;UINT cLineHeight;RECT rcDocument;};
struct tagMOUSEHOOKSTRUCT {POINT pt;HWND hwnd;UINT wHitTestCode;ULONG_PTR dwExtraInfo;};
struct AsyncIMultiQIVtbl {HRESULT (__stdcall *QueryInterface)(AsyncIMultiQI *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(AsyncIMultiQI *This);ULONG (__stdcall *Release)(AsyncIMultiQI *This);HRESULT (__stdcall *Begin_QueryMultipleInterfaces)(AsyncIMultiQI *This, ULONG cMQIs, MULTI_QI *pMQIs);HRESULT (__stdcall *Finish_QueryMultipleInterfaces)(AsyncIMultiQI *This, MULTI_QI *pMQIs);};
struct IBlockingLockVtbl {HRESULT (__stdcall *QueryInterface)(IBlockingLock *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IBlockingLock *This);ULONG (__stdcall *Release)(IBlockingLock *This);HRESULT (__stdcall *Lock)(IBlockingLock *This, DWORD dwTimeout);HRESULT (__stdcall *Unlock)(IBlockingLock *This);};
struct IClassFactoryVtbl {HRESULT (__stdcall *QueryInterface)(IClassFactory *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IClassFactory *This);ULONG (__stdcall *Release)(IClassFactory *This);HRESULT (__stdcall *CreateInstance)(IClassFactory *This, IUnknown *pUnkOuter, const IID *const riid, void **ppvObject);HRESULT (__stdcall *LockServer)(IClassFactory *This, BOOL fLock);};
struct IEnumSTATDATAVtbl {HRESULT (__stdcall *QueryInterface)(IEnumSTATDATA *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IEnumSTATDATA *This);ULONG (__stdcall *Release)(IEnumSTATDATA *This);HRESULT (__stdcall *Next)(IEnumSTATDATA *This, ULONG celt, STATDATA *rgelt, ULONG *pceltFetched);HRESULT (__stdcall *Skip)(IEnumSTATDATA *This, ULONG celt);HRESULT (__stdcall *Reset)(IEnumSTATDATA *This);HRESULT (__stdcall *Clone)(IEnumSTATDATA *This, IEnumSTATDATA **ppenum);};
struct IWaitMultipleVtbl {HRESULT (__stdcall *QueryInterface)(IWaitMultiple *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IWaitMultiple *This);ULONG (__stdcall *Release)(IWaitMultiple *This);HRESULT (__stdcall *WaitMultiple)(IWaitMultiple *This, DWORD timeout, ISynchronize **pSync);HRESULT (__stdcall *AddSynchronize)(IWaitMultiple *This, ISynchronize *pSync);};
struct _IMAGE_OS2_HEADER {WORD ne_magic;CHAR ne_ver;CHAR ne_rev;WORD ne_enttab;WORD ne_cbenttab;LONG ne_crc;WORD ne_flags;WORD ne_autodata;WORD ne_heap;WORD ne_stack;LONG ne_csip;LONG ne_sssp;WORD ne_cseg;WORD ne_cmod;WORD ne_cbnrestab;WORD ne_segtab;WORD ne_rsrctab;WORD ne_restab;WORD ne_modtab;WORD ne_imptab;LONG ne_nrestab;WORD ne_cmovent;WORD ne_align;WORD ne_cres;BYTE ne_exetyp;BYTE ne_flagsothers;WORD ne_pretthunks;WORD ne_psegrefbytes;WORD ne_swaparea;WORD ne_expver;};
struct _KEY_EVENT_RECORD {BOOL bKeyDown;WORD wRepeatCount;WORD wVirtualKeyCode;WORD wVirtualScanCode;union _KEY_EVENT_RECORD___0E79EC4DAC98A4AB202537FA8C3F69FC uChar;DWORD dwControlKeyState;};
struct _OSVERSIONINFOEXA {DWORD dwOSVersionInfoSize;DWORD dwMajorVersion;DWORD dwMinorVersion;DWORD dwBuildNumber;DWORD dwPlatformId;CHAR szCSDVersion[128];WORD wServicePackMajor;WORD wServicePackMinor;WORD wSuiteMask;BYTE wProductType;BYTE wReserved;};
struct _OSVERSIONINFOEXW {DWORD dwOSVersionInfoSize;DWORD dwMajorVersion;DWORD dwMinorVersion;DWORD dwBuildNumber;DWORD dwPlatformId;WCHAR szCSDVersion[128];WORD wServicePackMajor;WORD wServicePackMinor;WORD wSuiteMask;BYTE wProductType;BYTE wReserved;};
struct tagNEWTEXTMETRICA {LONG tmHeight;LONG tmAscent;LONG tmDescent;LONG tmInternalLeading;LONG tmExternalLeading;LONG tmAveCharWidth;LONG tmMaxCharWidth;LONG tmWeight;LONG tmOverhang;LONG tmDigitizedAspectX;LONG tmDigitizedAspectY;BYTE tmFirstChar;BYTE tmLastChar;BYTE tmDefaultChar;BYTE tmBreakChar;BYTE tmItalic;BYTE tmUnderlined;BYTE tmStruckOut;BYTE tmPitchAndFamily;BYTE tmCharSet;DWORD ntmFlags;UINT ntmSizeEM;UINT ntmCellHeight;UINT ntmAvgWidth;};
struct tagSTATPROPSETSTG {FMTID fmtid;CLSID clsid;DWORD grfFlags;FILETIME mtime;FILETIME ctime;FILETIME atime;DWORD dwOSVersion;};
typedef BOOL (__stdcall *ENUMRESTYPEPROCA)(HMODULE hModule, LPSTR lpType, LONG_PTR lParam);
struct IEnumOLEVERBVtbl {HRESULT (__stdcall *QueryInterface)(IEnumOLEVERB *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IEnumOLEVERB *This);ULONG (__stdcall *Release)(IEnumOLEVERB *This);HRESULT (__stdcall *Next)(IEnumOLEVERB *This, ULONG celt, LPOLEVERB rgelt, ULONG *pceltFetched);HRESULT (__stdcall *Skip)(IEnumOLEVERB *This, ULONG celt);HRESULT (__stdcall *Reset)(IEnumOLEVERB *This);HRESULT (__stdcall *Clone)(IEnumOLEVERB *This, IEnumOLEVERB **ppenum);};
struct IEnumSTATSTGVtbl {HRESULT (__stdcall *QueryInterface)(IEnumSTATSTG *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IEnumSTATSTG *This);ULONG (__stdcall *Release)(IEnumSTATSTG *This);HRESULT (__stdcall *Next)(IEnumSTATSTG *This, ULONG celt, STATSTG *rgelt, ULONG *pceltFetched);HRESULT (__stdcall *Skip)(IEnumSTATSTG *This, ULONG celt);HRESULT (__stdcall *Reset)(IEnumSTATSTG *This);HRESULT (__stdcall *Clone)(IEnumSTATSTG *This, IEnumSTATSTG **ppenum);};
struct IEnumVARIANTVtbl {HRESULT (__stdcall *QueryInterface)(IEnumVARIANT *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IEnumVARIANT *This);ULONG (__stdcall *Release)(IEnumVARIANT *This);HRESULT (__stdcall *Next)(IEnumVARIANT *This, ULONG celt, VARIANT *rgVar, ULONG *pCeltFetched);HRESULT (__stdcall *Skip)(IEnumVARIANT *This, ULONG celt);HRESULT (__stdcall *Reset)(IEnumVARIANT *This);HRESULT (__stdcall *Clone)(IEnumVARIANT *This, IEnumVARIANT **ppEnum);};
struct ISynchronizeVtbl {HRESULT (__stdcall *QueryInterface)(ISynchronize *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(ISynchronize *This);ULONG (__stdcall *Release)(ISynchronize *This);HRESULT (__stdcall *Wait)(ISynchronize *This, DWORD dwFlags, DWORD dwMilliseconds);HRESULT (__stdcall *Signal)(ISynchronize *This);HRESULT (__stdcall *Reset)(ISynchronize *This);};
typedef int (__stdcall *OLDFONTENUMPROCA)(const LOGFONTA *, const TEXTMETRICA *, DWORD, LPARAM);
typedef int (__stdcall *OLDFONTENUMPROCW)(const LOGFONTW *, const TEXTMETRICW *, DWORD, LPARAM);
struct _CMS_DH_KEY_INFO {DWORD dwVersion;ALG_ID Algid;LPSTR pszContentEncObjId;CRYPT_DATA_BLOB PubInfo;void *pReserved;};
struct _PRINTER_INFO_2A {LPSTR pServerName;LPSTR pPrinterName;LPSTR pShareName;LPSTR pPortName;LPSTR pDriverName;LPSTR pComment;LPSTR pLocation;LPDEVMODEA pDevMode;LPSTR pSepFile;LPSTR pPrintProcessor;LPSTR pDatatype;LPSTR pParameters;PSECURITY_DESCRIPTOR pSecurityDescriptor;DWORD Attributes;DWORD Priority;DWORD DefaultPriority;DWORD StartTime;DWORD UntilTime;DWORD Status;DWORD cJobs;DWORD AveragePPM;};
struct _VTableProvStruc {DWORD Version;FARPROC FuncVerifyImage;FARPROC FuncReturnhWnd;DWORD dwProvType;BYTE *pbContextInfo;DWORD cbContextInfo;LPSTR pszProvName;};
struct tagEMRPOLYLINE16 {EMR emr;RECTL rclBounds;DWORD cpts;POINTS apts[1];};
struct tagENHMETAHEADER {DWORD iType;DWORD nSize;RECTL rclBounds;RECTL rclFrame;DWORD dSignature;DWORD nVersion;DWORD nBytes;DWORD nRecords;WORD nHandles;WORD sReserved;DWORD nDescription;DWORD offDescription;DWORD nPalEntries;SIZEL szlDevice;SIZEL szlMillimeters;DWORD cbPixelFormat;DWORD offPixelFormat;DWORD bOpenGL;SIZEL szlMicrometers;};
struct tagMIXERCONTROLA {DWORD cbStruct;DWORD dwControlID;DWORD dwControlType;DWORD fdwControl;DWORD cMultipleItems;CHAR szShortName[16];CHAR szName[64];union tagMIXERCONTROLA___86CBF7128C7FD2AC13C8612745AD13D8 Bounds;union tagMIXERCONTROLA___AFA1D3B62FF5E28583F9FD43B125895E Metrics;};
struct tagMIXERCONTROLW {DWORD cbStruct;DWORD dwControlID;DWORD dwControlType;DWORD fdwControl;DWORD cMultipleItems;WCHAR szShortName[16];WCHAR szName[64];union tagMIXERCONTROLW___3D7A05C52ED08258D8A0343834E0D122 Bounds;union tagMIXERCONTROLW___AFA1D3B62FF5E28583F9FD43B125895E Metrics;};
struct IPipeDoubleVtbl {HRESULT (__stdcall *QueryInterface)(IPipeDouble *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IPipeDouble *This);ULONG (__stdcall *Release)(IPipeDouble *This);HRESULT (__stdcall *Pull)(IPipeDouble *This, DOUBLE *buf, ULONG cRequest, ULONG *pcReturned);HRESULT (__stdcall *Push)(IPipeDouble *This, DOUBLE *buf, ULONG cSent);};
typedef int (__stdcall *LPCONDITIONPROC)(LPWSABUF lpCallerId, LPWSABUF lpCallerData, LPQOS lpSQOS, LPQOS lpGQOS, LPWSABUF lpCalleeId, LPWSABUF lpCalleeData, GROUP *g, DWORD_PTR dwCallbackData);
typedef DWORD (*PFE_EXPORT_FUNC)(PBYTE pbData, PVOID pvCallbackContext, ULONG ulLength);
typedef DWORD (*PFE_IMPORT_FUNC)(PBYTE pbData, PVOID pvCallbackContext, PULONG ulLength);
struct _DRIVER_INFO_6A {DWORD cVersion;LPSTR pName;LPSTR pEnvironment;LPSTR pDriverPath;LPSTR pDataFile;LPSTR pConfigFile;LPSTR pHelpFile;LPSTR pDependentFiles;LPSTR pMonitorName;LPSTR pDefaultDataType;LPSTR pszzPreviousNames;FILETIME ftDriverDate;DWORDLONG dwlDriverVersion;LPSTR pszMfgName;LPSTR pszOEMUrl;LPSTR pszHardwareID;LPSTR pszProvider;};
struct tagEMRINVERTRGN {EMR emr;RECTL rclBounds;DWORD cbRgnData;BYTE RgnData[1];};
struct tagMIDIOUTCAPSA {WORD wMid;WORD wPid;MMVERSION vDriverVersion;CHAR szPname[32];WORD wTechnology;WORD wVoices;WORD wNotes;WORD wChannelMask;DWORD dwSupport;};
struct tagMIDIOUTCAPSW {WORD wMid;WORD wPid;MMVERSION vDriverVersion;WCHAR szPname[32];WORD wTechnology;WORD wVoices;WORD wNotes;WORD wChannelMask;DWORD dwSupport;};
struct tagWAVEOUTCAPSA {WORD wMid;WORD wPid;MMVERSION vDriverVersion;CHAR szPname[32];DWORD dwFormats;WORD wChannels;WORD wReserved1;DWORD dwSupport;};
struct tagWAVEOUTCAPSW {WORD wMid;WORD wPid;MMVERSION vDriverVersion;WCHAR szPname[32];DWORD dwFormats;WORD wChannels;WORD wReserved1;DWORD dwSupport;};
struct IRpcHelperVtbl {HRESULT (__stdcall *QueryInterface)(IRpcHelper *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IRpcHelper *This);ULONG (__stdcall *Release)(IRpcHelper *This);HRESULT (__stdcall *GetDCOMProtocolVersion)(IRpcHelper *This, DWORD *pComVersion);HRESULT (__stdcall *GetIIDFromOBJREF)(IRpcHelper *This, void *pObjRef, IID **piid);};
typedef SCARDHANDLE (__stdcall *LPOCNCONNPROCA)(SCARDCONTEXT, LPSTR, LPSTR, PVOID);
struct _wireSAFEARRAY {USHORT cDims;USHORT fFeatures;ULONG cbElements;ULONG cLocks;SAFEARRAYUNION uArrayStructs;SAFEARRAYBOUND rgsabound[1];};
struct tagEMRANGLEARC {EMR emr;POINTL ptlCenter;DWORD nRadius;FLOAT eStartAngle;FLOAT eSweepAngle;};
struct tagEMRPOLYLINE {EMR emr;RECTL rclBounds;DWORD cptl;POINTL aptl[1];};
struct tagEXTLOGFONTA {LOGFONTA elfLogFont;BYTE elfFullName[64];BYTE elfStyle[32];DWORD elfVersion;DWORD elfStyleSize;DWORD elfMatch;DWORD elfReserved;BYTE elfVendorId[4];DWORD elfCulture;PANOSE elfPanose;};
struct tagMENUBARINFO {DWORD cbSize;RECT rcBar;HMENU hMenu;HWND hwndMenu;__int32 fBarFocused : 1;__int32 fFocused : 1;};
struct tagMIDIINCAPSA {WORD wMid;WORD wPid;MMVERSION vDriverVersion;CHAR szPname[32];DWORD dwSupport;};
struct tagMIDIINCAPSW {WORD wMid;WORD wPid;MMVERSION vDriverVersion;WCHAR szPname[32];DWORD dwSupport;};
struct tagPAINTSTRUCT {HDC hdc;BOOL fErase;RECT rcPaint;BOOL fRestore;BOOL fIncUpdate;BYTE rgbReserved[32];};
struct tagWAVEINCAPSA {WORD wMid;WORD wPid;MMVERSION vDriverVersion;CHAR szPname[32];DWORD dwFormats;WORD wChannels;WORD wReserved1;};
struct tagWAVEINCAPSW {WORD wMid;WORD wPid;MMVERSION vDriverVersion;WCHAR szPname[32];DWORD dwFormats;WORD wChannels;WORD wReserved1;};
typedef BOOL (__stdcall *DRAWSTATEPROC)(HDC hdc, LPARAM lData, WPARAM wData, int cx, int cy);
typedef int (__stdcall *ENHMFENUMPROC)(HDC, HANDLETABLE *, const ENHMETARECORD *, int, LPARAM);
struct IPipeByteVtbl {HRESULT (__stdcall *QueryInterface)(IPipeByte *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IPipeByte *This);ULONG (__stdcall *Release)(IPipeByte *This);HRESULT (__stdcall *Pull)(IPipeByte *This, BYTE *buf, ULONG cRequest, ULONG *pcReturned);HRESULT (__stdcall *Push)(IPipeByte *This, BYTE *buf, ULONG cSent);};
struct IPipeLongVtbl {HRESULT (__stdcall *QueryInterface)(IPipeLong *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IPipeLong *This);ULONG (__stdcall *Release)(IPipeLong *This);HRESULT (__stdcall *Pull)(IPipeLong *This, LONG *buf, ULONG cRequest, ULONG *pcReturned);HRESULT (__stdcall *Push)(IPipeLong *This, LONG *buf, ULONG cSent);};
struct IXMLErrorVtbl {HRESULT (__stdcall *QueryInterface)(IXMLError *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IXMLError *This);ULONG (__stdcall *Release)(IXMLError *This);HRESULT (__stdcall *GetErrorInfo)(IXMLError *This, XML_ERROR *pErrorReturn);};
typedef BOOL (__stdcall *PROPENUMPROCA)(HWND, LPCSTR, HANDLE);
typedef void (__stdcall *SENDASYNCPROC)(HWND, UINT, ULONG_PTR, LRESULT);
struct _CERT_CONTEXT {DWORD dwCertEncodingType;BYTE *pbCertEncoded;DWORD cbCertEncoded;PCERT_INFO pCertInfo;HCERTSTORE hCertStore;};
struct _FORM_INFO_1A {DWORD Flags;LPSTR pName;SIZEL Size;RECTL ImageableArea;};
struct tagDIBSECTION {BITMAP dsBm;BITMAPINFOHEADER dsBmih;DWORD dsBitfields[3];HANDLE dshSection;DWORD dsOffset;};
struct tagDROPSTRUCT {HWND hwndSource;HWND hwndSink;DWORD wFmt;ULONG_PTR dwData;POINT ptDrop;DWORD dwControlData;};
struct tagEMRFILLRGN {EMR emr;RECTL rclBounds;DWORD cbRgnData;DWORD ihBrush;BYTE RgnData[1];};
struct tagMIXERCAPSA {WORD wMid;WORD wPid;MMVERSION vDriverVersion;CHAR szPname[32];DWORD fdwSupport;DWORD cDestinations;};
struct tagMIXERCAPSW {WORD wMid;WORD wPid;MMVERSION vDriverVersion;WCHAR szPname[32];DWORD fdwSupport;DWORD cDestinations;};
struct IMultiQIVtbl {HRESULT (__stdcall *QueryInterface)(IMultiQI *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IMultiQI *This);ULONG (__stdcall *Release)(IMultiQI *This);HRESULT (__stdcall *QueryMultipleInterfaces)(IMultiQI *This, ULONG cMQIs, MULTI_QI *pMQIs);};
struct IPersistVtbl {HRESULT (__stdcall *QueryInterface)(IPersist *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IPersist *This);ULONG (__stdcall *Release)(IPersist *This);HRESULT (__stdcall *GetClassID)(IPersist *This, CLSID *pClassID);};
struct IROTDataVtbl {HRESULT (__stdcall *QueryInterface)(IROTData *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IROTData *This);ULONG (__stdcall *Release)(IROTData *This);HRESULT (__stdcall *GetComparisonData)(IROTData *This, byte *pbData, ULONG cbMax, ULONG *pcbData);};
typedef BOOL (__stdcall *LPOCNCHKPROC)(SCARDCONTEXT, SCARDHANDLE, PVOID);
typedef void (__stdcall *WINEVENTPROC)(HWINEVENTHOOK hWinEventHook, DWORD event, HWND hwnd, LONG idObject, LONG idChild, DWORD idEventThread, DWORD dwmsEventTime);
struct _CRL_CONTEXT {DWORD dwCertEncodingType;BYTE *pbCrlEncoded;DWORD cbCrlEncoded;PCRL_INFO pCrlInfo;HCERTSTORE hCertStore;};
struct tagCWPSTRUCT {LPARAM lParam;WPARAM wParam;UINT message;HWND hwnd;};
struct tagEXTLOGPEN {DWORD elpPenStyle;DWORD elpWidth;UINT elpBrushStyle;COLORREF elpColor;ULONG_PTR elpHatch;DWORD elpNumEntries;DWORD elpStyleEntry[1];};
struct tagFORMATETC {CLIPFORMAT cfFormat;DVTARGETDEVICE *ptd;DWORD dwAspect;LONG lindex;DWORD tymed;};
struct tagSAFEARRAY {USHORT cDims;USHORT fFeatures;ULONG cbElements;ULONG cLocks;PVOID pvData;SAFEARRAYBOUND rgsabound[1];};
struct IMallocVtbl {HRESULT (__stdcall *QueryInterface)(IMalloc *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IMalloc *This);ULONG (__stdcall *Release)(IMalloc *This);void *(__stdcall *Alloc)(IMalloc *This, SIZE_T cb);void *(__stdcall *Realloc)(IMalloc *This, void *pv, SIZE_T cb);void (__stdcall *Free)(IMalloc *This, void *pv);SIZE_T (__stdcall *GetSize)(IMalloc *This, void *pv);int (__stdcall *DidAlloc)(IMalloc *This, void *pv);void (__stdcall *HeapMinimize)(IMalloc *This);};
typedef DWORD (__stdcall *LPFNDEVCAPS)(LPSTR, LPSTR, UINT, LPSTR, LPDEVMODE);
struct _COMMCONFIG {DWORD dwSize;WORD wVersion;WORD wReserved;DCB dcb;DWORD dwProviderSubType;DWORD dwProviderOffset;DWORD dwProviderSize;WCHAR wcProviderData[1];};
struct _userBITMAP {LONG bmType;LONG bmWidth;LONG bmHeight;LONG bmWidthBytes;WORD bmPlanes;WORD bmBitsPixel;ULONG cbSize;byte pBuffer[1];};
struct tagAUXCAPSA {WORD wMid;WORD wPid;MMVERSION vDriverVersion;CHAR szPname[32];WORD wTechnology;WORD wReserved1;DWORD dwSupport;};
struct tagAUXCAPSW {WORD wMid;WORD wPid;MMVERSION vDriverVersion;WCHAR szPname[32];WORD wTechnology;WORD wReserved1;DWORD dwSupport;};
struct tagHELPINFO {UINT cbSize;int iContextType;int iCtrlId;HANDLE hItemHandle;DWORD_PTR dwContextId;POINT MousePos;};
struct tagMENUINFO {DWORD cbSize;DWORD fMask;DWORD dwStyle;UINT cyMax;HBRUSH hbrBack;DWORD dwContextHelpID;ULONG_PTR dwMenuData;};
struct tagTLIBATTR {GUID guid;LCID lcid;SYSKIND syskind;WORD wMajorVerNum;WORD wMinorVerNum;WORD wLibFlags;};
typedef int (__stdcall *MFENUMPROC)(HDC, HANDLETABLE *, METARECORD *, int, LPARAM);
struct _CRL_ENTRY {CRYPT_INTEGER_BLOB SerialNumber;FILETIME RevocationDate;DWORD cExtension;PCERT_EXTENSION rgExtension;};
struct _cpinfoexA {UINT MaxCharSize;BYTE DefaultChar[2];BYTE LeadByte[12];WCHAR UnicodeDefaultChar;UINT CodePage;CHAR CodePageName[260];};
typedef void (__stdcall *TIMERPROC)(HWND, UINT, UINT_PTR, DWORD);
typedef LRESULT __stdcall MMIOPROC(LPSTR lpmmioinfo, UINT uMsg, LPARAM lParam1, LPARAM lParam2);
struct tagOIFI {UINT cb;BOOL fMDIApp;HWND hwndFrame;HACCEL haccel;UINT cAccelEntries;};
struct _NCB {UCHAR ncb_command;UCHAR ncb_retcode;UCHAR ncb_lsn;UCHAR ncb_num;PUCHAR ncb_buffer;WORD ncb_length;UCHAR ncb_callname[16];UCHAR ncb_name[16];UCHAR ncb_rto;UCHAR ncb_sto;void (__stdcall *ncb_post)(struct _NCB *);UCHAR ncb_lana_num;UCHAR ncb_cmd_cplt;UCHAR ncb_reserve[10];HANDLE ncb_event;};
union _INPUT_RECORD___56C9F45CD5AB058B1B4FD5A9AB9216C4 {KEY_EVENT_RECORD KeyEvent;MOUSE_EVENT_RECORD MouseEvent;WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent;MENU_EVENT_RECORD MenuEvent;FOCUS_EVENT_RECORD FocusEvent;};
struct _CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO {DWORD cbSize;CRYPT_BIT_BLOB RecipientPublicKey;CERT_ID RecipientId;FILETIME Date;PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;};
struct _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO {DWORD cbSize;CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;void *pvKeyEncryptionAuxInfo;HCRYPTPROV hCryptProv;CRYPT_BIT_BLOB RecipientPublicKey;CERT_ID RecipientId;};
struct _CMSG_KEY_AGREE_RECIPIENT_INFO {DWORD dwVersion;DWORD dwOriginatorChoice;_CMSG_KEY_AGREE_ENCRYPT_INFO___74691898E1CF581306BA249AD6F73FE1 __anonymous0;CRYPT_DATA_BLOB UserKeyingMaterial;CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;DWORD cRecipientEncryptedKeys;PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO *rgpRecipientEncryptedKeys;};
struct _CMSG_MAIL_LIST_RECIPIENT_INFO {DWORD dwVersion;CRYPT_DATA_BLOB KeyId;CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;CRYPT_DATA_BLOB EncryptedKey;FILETIME Date;PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;};
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_FIND_CERT)(HCERTSTOREPROV hStoreProv, PCCERT_STORE_PROV_FIND_INFO pFindInfo, PCCERT_CONTEXT pPrevCertContext, DWORD dwFlags, void **ppvStoreProvFindInfo, PCCERT_CONTEXT *ppProvCertContext);
struct IInternetSecurityMgrSiteVtbl {HRESULT (__stdcall *QueryInterface)(IInternetSecurityMgrSite *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IInternetSecurityMgrSite *This);ULONG (__stdcall *Release)(IInternetSecurityMgrSite *This);HRESULT (__stdcall *GetWindow)(IInternetSecurityMgrSite *This, HWND *phwnd);HRESULT (__stdcall *EnableModeless)(IInternetSecurityMgrSite *This, BOOL fEnable);};
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_FIND_CRL)(HCERTSTOREPROV hStoreProv, PCCERT_STORE_PROV_FIND_INFO pFindInfo, PCCRL_CONTEXT pPrevCrlContext, DWORD dwFlags, void **ppvStoreProvFindInfo, PCCRL_CONTEXT *ppProvCrlContext);
typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_FIND_CTL)(HCERTSTOREPROV hStoreProv, PCCERT_STORE_PROV_FIND_INFO pFindInfo, PCCTL_CONTEXT pPrevCtlContext, DWORD dwFlags, void **ppvStoreProvFindInfo, PCCTL_CONTEXT *ppProvCtlContext);
struct _CMSG_KEY_AGREE_ENCRYPT_INFO {DWORD cbSize;DWORD dwRecipientIndex;CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;CRYPT_DATA_BLOB UserKeyingMaterial;DWORD dwOriginatorChoice;_CMSG_KEY_AGREE_ENCRYPT_INFO___74691898E1CF581306BA249AD6F73FE1 __anonymous0;DWORD cKeyAgreeKeyEncryptInfo;PCMSG_KEY_AGREE_KEY_ENCRYPT_INFO *rgpKeyAgreeKeyEncryptInfo;DWORD dwFlags;};
struct IAsyncRpcChannelBufferVtbl {HRESULT (__stdcall *QueryInterface)(IAsyncRpcChannelBuffer *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IAsyncRpcChannelBuffer *This);ULONG (__stdcall *Release)(IAsyncRpcChannelBuffer *This);HRESULT (__stdcall *GetBuffer)(IAsyncRpcChannelBuffer *This, RPCOLEMESSAGE *pMessage, const IID *const riid);HRESULT (__stdcall *SendReceive)(IAsyncRpcChannelBuffer *This, RPCOLEMESSAGE *pMessage, ULONG *pStatus);HRESULT (__stdcall *FreeBuffer)(IAsyncRpcChannelBuffer *This, RPCOLEMESSAGE *pMessage);HRESULT (__stdcall *GetDestCtx)(IAsyncRpcChannelBuffer *This, DWORD *pdwDestContext, void **ppvDestContext);HRESULT (__stdcall *IsConnected)(IAsyncRpcChannelBuffer *This);HRESULT (__stdcall *GetProtocolVersion)(IAsyncRpcChannelBuffer *This, DWORD *pdwVersion);HRESULT (__stdcall *Send)(IAsyncRpcChannelBuffer *This, RPCOLEMESSAGE *pMsg, ISynchronize *pSync, ULONG *pulStatus);HRESULT (__stdcall *Receive)(IAsyncRpcChannelBuffer *This, RPCOLEMESSAGE *pMsg, ULONG *pulStatus);HRESULT (__stdcall *GetDestCtxEx)(IAsyncRpcChannelBuffer *This, RPCOLEMESSAGE *pMsg, DWORD *pdwDestContext, void **ppvDestContext);};
struct IReleaseMarshalBuffersVtbl {HRESULT (__stdcall *QueryInterface)(IReleaseMarshalBuffers *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IReleaseMarshalBuffers *This);ULONG (__stdcall *Release)(IReleaseMarshalBuffers *This);HRESULT (__stdcall *ReleaseMarshalBuffer)(IReleaseMarshalBuffers *This, RPCOLEMESSAGE *pMsg, DWORD dwFlags, IUnknown *pChnl);};
typedef BOOL (__stdcall *LANGGROUPLOCALE_ENUMPROCA)(LGRPID, LCID, LPSTR, LONG_PTR);
typedef BOOL (__stdcall *PFN_CMSG_EXPORT_KEY_AGREE)(PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo, PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO pKeyAgreeEncodeInfo, PCMSG_KEY_AGREE_ENCRYPT_INFO pKeyAgreeEncryptInfo, DWORD dwFlags, void *pvReserved);
typedef BOOL (__stdcall *PFN_CMSG_EXPORT_KEY_TRANS)(PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo, PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO pKeyTransEncodeInfo, PCMSG_KEY_TRANS_ENCRYPT_INFO pKeyTransEncryptInfo, DWORD dwFlags, void *pvReserved);
typedef BOOL (__stdcall *PFN_CMSG_EXPORT_MAIL_LIST)(PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo, PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO pMailListEncodeInfo, PCMSG_MAIL_LIST_ENCRYPT_INFO pMailListEncryptInfo, DWORD dwFlags, void *pvReserved);
typedef BOOL (__stdcall *PFN_CMSG_IMPORT_KEY_AGREE)(PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm, PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA pKeyAgreeDecryptPara, DWORD dwFlags, void *pvReserved, HCRYPTKEY *phContentEncryptKey);
typedef BOOL (__stdcall *PFN_CMSG_IMPORT_KEY_TRANS)(PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm, PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA pKeyTransDecryptPara, DWORD dwFlags, void *pvReserved, HCRYPTKEY *phContentEncryptKey);
typedef BOOL (__stdcall *PFN_CMSG_IMPORT_MAIL_LIST)(PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm, PCMSG_CTRL_MAIL_LIST_DECRYPT_PARA pMailListDecryptPara, DWORD dwFlags, void *pvReserved, HCRYPTKEY *phContentEncryptKey);
typedef BOOL (__stdcall *PFN_EXPORT_PRIV_KEY_FUNC)(HCRYPTPROV hCryptProv, DWORD dwKeySpec, LPSTR pszPrivateKeyObjId, DWORD dwFlags, void *pvAuxInfo, CRYPT_PRIVATE_KEY_INFO *pPrivateKeyInfo, DWORD *pcbPrivateKeyBlob);
struct _CMSG_SIGNER_ENCODE_INFO {DWORD cbSize;PCERT_INFO pCertInfo;HCRYPTPROV hCryptProv;DWORD dwKeySpec;CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;void *pvHashAuxInfo;DWORD cAuthAttr;PCRYPT_ATTRIBUTE rgAuthAttr;DWORD cUnauthAttr;PCRYPT_ATTRIBUTE rgUnauthAttr;};
struct _CRYPT_SIGN_MESSAGE_PARA {DWORD cbSize;DWORD dwMsgEncodingType;PCCERT_CONTEXT pSigningCert;CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;void *pvHashAuxInfo;DWORD cMsgCert;PCCERT_CONTEXT *rgpMsgCert;DWORD cMsgCrl;PCCRL_CONTEXT *rgpMsgCrl;DWORD cAuthAttr;PCRYPT_ATTRIBUTE rgAuthAttr;DWORD cUnauthAttr;PCRYPT_ATTRIBUTE rgUnauthAttr;DWORD dwFlags;DWORD dwInnerContentType;};
struct _IMAGE_OPTIONAL_HEADER64 {WORD Magic;BYTE MajorLinkerVersion;BYTE MinorLinkerVersion;DWORD SizeOfCode;DWORD SizeOfInitializedData;DWORD SizeOfUninitializedData;DWORD AddressOfEntryPoint;DWORD BaseOfCode;ULONGLONG ImageBase;DWORD SectionAlignment;DWORD FileAlignment;WORD MajorOperatingSystemVersion;WORD MinorOperatingSystemVersion;WORD MajorImageVersion;WORD MinorImageVersion;WORD MajorSubsystemVersion;WORD MinorSubsystemVersion;DWORD Win32VersionValue;DWORD SizeOfImage;DWORD SizeOfHeaders;DWORD CheckSum;WORD Subsystem;WORD DllCharacteristics;ULONGLONG SizeOfStackReserve;ULONGLONG SizeOfStackCommit;ULONGLONG SizeOfHeapReserve;ULONGLONG SizeOfHeapCommit;DWORD LoaderFlags;DWORD NumberOfRvaAndSizes;IMAGE_DATA_DIRECTORY DataDirectory[16];};
struct IDummyHICONIncluderVtbl {HRESULT (__stdcall *QueryInterface)(IDummyHICONIncluder *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IDummyHICONIncluder *This);ULONG (__stdcall *Release)(IDummyHICONIncluder *This);HRESULT (__stdcall *Dummy)(IDummyHICONIncluder *This, HICON h1, HDC h2);};
struct IExternalConnectionVtbl {HRESULT (__stdcall *QueryInterface)(IExternalConnection *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IExternalConnection *This);ULONG (__stdcall *Release)(IExternalConnection *This);DWORD (__stdcall *AddConnection)(IExternalConnection *This, DWORD extconn, DWORD reserved);DWORD (__stdcall *ReleaseConnection)(IExternalConnection *This, DWORD extconn, DWORD reserved, BOOL fLastReleaseCloses);};
struct IPropertySetStorageVtbl {HRESULT (__stdcall *QueryInterface)(IPropertySetStorage *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IPropertySetStorage *This);ULONG (__stdcall *Release)(IPropertySetStorage *This);HRESULT (__stdcall *Create)(IPropertySetStorage *This, const IID *const rfmtid, const CLSID *pclsid, DWORD grfFlags, DWORD grfMode, IPropertyStorage **ppprstg);HRESULT (__stdcall *Open)(IPropertySetStorage *This, const IID *const rfmtid, DWORD grfMode, IPropertyStorage **ppprstg);HRESULT (__stdcall *Delete)(IPropertySetStorage *This, const IID *const rfmtid);HRESULT (__stdcall *Enum)(IPropertySetStorage *This, IEnumSTATPROPSETSTG **ppenum);};
struct IRunningObjectTableVtbl {HRESULT (__stdcall *QueryInterface)(IRunningObjectTable *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IRunningObjectTable *This);ULONG (__stdcall *Release)(IRunningObjectTable *This);HRESULT (__stdcall *Register)(IRunningObjectTable *This, DWORD grfFlags, IUnknown *punkObject, IMoniker *pmkObjectName, DWORD *pdwRegister);HRESULT (__stdcall *Revoke)(IRunningObjectTable *This, DWORD dwRegister);HRESULT (__stdcall *IsRunning)(IRunningObjectTable *This, IMoniker *pmkObjectName);HRESULT (__stdcall *GetObjectA)(IRunningObjectTable *This, IMoniker *pmkObjectName, IUnknown **ppunkObject);HRESULT (__stdcall *NoteChangeTime)(IRunningObjectTable *This, DWORD dwRegister, FILETIME *pfiletime);HRESULT (__stdcall *GetTimeOfLastChange)(IRunningObjectTable *This, IMoniker *pmkObjectName, FILETIME *pfiletime);HRESULT (__stdcall *EnumRunning)(IRunningObjectTable *This, IEnumMoniker **ppenumMoniker);};
struct IWindowForBindingUIVtbl {HRESULT (__stdcall *QueryInterface)(IWindowForBindingUI *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IWindowForBindingUI *This);ULONG (__stdcall *Release)(IWindowForBindingUI *This);HRESULT (__stdcall *GetWindow)(IWindowForBindingUI *This, const GUID *const rguidReason, HWND *phwnd);};
typedef BOOL (__stdcall *LANGUAGEGROUP_ENUMPROCA)(LGRPID, LPSTR, LPSTR, DWORD, LONG_PTR);
struct IRpcChannelBuffer2Vtbl {HRESULT (__stdcall *QueryInterface)(IRpcChannelBuffer2 *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IRpcChannelBuffer2 *This);ULONG (__stdcall *Release)(IRpcChannelBuffer2 *This);HRESULT (__stdcall *GetBuffer)(IRpcChannelBuffer2 *This, RPCOLEMESSAGE *pMessage, const IID *const riid);HRESULT (__stdcall *SendReceive)(IRpcChannelBuffer2 *This, RPCOLEMESSAGE *pMessage, ULONG *pStatus);HRESULT (__stdcall *FreeBuffer)(IRpcChannelBuffer2 *This, RPCOLEMESSAGE *pMessage);HRESULT (__stdcall *GetDestCtx)(IRpcChannelBuffer2 *This, DWORD *pdwDestContext, void **ppvDestContext);HRESULT (__stdcall *IsConnected)(IRpcChannelBuffer2 *This);HRESULT (__stdcall *GetProtocolVersion)(IRpcChannelBuffer2 *This, DWORD *pdwVersion);};
struct IRpcChannelBuffer3Vtbl {HRESULT (__stdcall *QueryInterface)(IRpcChannelBuffer3 *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IRpcChannelBuffer3 *This);ULONG (__stdcall *Release)(IRpcChannelBuffer3 *This);HRESULT (__stdcall *GetBuffer)(IRpcChannelBuffer3 *This, RPCOLEMESSAGE *pMessage, const IID *const riid);HRESULT (__stdcall *SendReceive)(IRpcChannelBuffer3 *This, RPCOLEMESSAGE *pMessage, ULONG *pStatus);HRESULT (__stdcall *FreeBuffer)(IRpcChannelBuffer3 *This, RPCOLEMESSAGE *pMessage);HRESULT (__stdcall *GetDestCtx)(IRpcChannelBuffer3 *This, DWORD *pdwDestContext, void **ppvDestContext);HRESULT (__stdcall *IsConnected)(IRpcChannelBuffer3 *This);HRESULT (__stdcall *GetProtocolVersion)(IRpcChannelBuffer3 *This, DWORD *pdwVersion);HRESULT (__stdcall *Send)(IRpcChannelBuffer3 *This, RPCOLEMESSAGE *pMsg, ULONG *pulStatus);HRESULT (__stdcall *Receive)(IRpcChannelBuffer3 *This, RPCOLEMESSAGE *pMsg, ULONG ulSize, ULONG *pulStatus);HRESULT (__stdcall *Cancel)(IRpcChannelBuffer3 *This, RPCOLEMESSAGE *pMsg);HRESULT (__stdcall *GetCallContext)(IRpcChannelBuffer3 *This, RPCOLEMESSAGE *pMsg, const IID *const riid, void **pInterface);HRESULT (__stdcall *GetDestCtxEx)(IRpcChannelBuffer3 *This, RPCOLEMESSAGE *pMsg, DWORD *pdwDestContext, void **ppvDestContext);HRESULT (__stdcall *GetState)(IRpcChannelBuffer3 *This, RPCOLEMESSAGE *pMsg, DWORD *pState);HRESULT (__stdcall *RegisterAsync)(IRpcChannelBuffer3 *This, RPCOLEMESSAGE *pMsg, IAsyncManager *pAsyncMgr);};
struct IDataAdviseHolderVtbl {HRESULT (__stdcall *QueryInterface)(IDataAdviseHolder *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IDataAdviseHolder *This);ULONG (__stdcall *Release)(IDataAdviseHolder *This);HRESULT (__stdcall *Advise)(IDataAdviseHolder *This, IDataObject *pDataObject, FORMATETC *pFetc, DWORD advf, IAdviseSink *pAdvise, DWORD *pdwConnection);HRESULT (__stdcall *Unadvise)(IDataAdviseHolder *This, DWORD dwConnection);HRESULT (__stdcall *EnumAdvise)(IDataAdviseHolder *This, IEnumSTATDATA **ppenumAdvise);HRESULT (__stdcall *SendOnDataChange)(IDataAdviseHolder *This, IDataObject *pDataObject, DWORD dwReserved, DWORD advf);};
struct IRpcChannelBufferVtbl {HRESULT (__stdcall *QueryInterface)(IRpcChannelBuffer *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IRpcChannelBuffer *This);ULONG (__stdcall *Release)(IRpcChannelBuffer *This);HRESULT (__stdcall *GetBuffer)(IRpcChannelBuffer *This, RPCOLEMESSAGE *pMessage, const IID *const riid);HRESULT (__stdcall *SendReceive)(IRpcChannelBuffer *This, RPCOLEMESSAGE *pMessage, ULONG *pStatus);HRESULT (__stdcall *FreeBuffer)(IRpcChannelBuffer *This, RPCOLEMESSAGE *pMessage);HRESULT (__stdcall *GetDestCtx)(IRpcChannelBuffer *This, DWORD *pdwDestContext, void **ppvDestContext);HRESULT (__stdcall *IsConnected)(IRpcChannelBuffer *This);};
struct _CMSG_CMS_SIGNER_INFO {DWORD dwVersion;CERT_ID SignerId;CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;CRYPT_ALGORITHM_IDENTIFIER HashEncryptionAlgorithm;CRYPT_DATA_BLOB EncryptedHash;CRYPT_ATTRIBUTES AuthAttrs;CRYPT_ATTRIBUTES UnauthAttrs;};
struct IWinInetHttpInfoVtbl {HRESULT (__stdcall *QueryInterface)(IWinInetHttpInfo *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IWinInetHttpInfo *This);ULONG (__stdcall *Release)(IWinInetHttpInfo *This);HRESULT (__stdcall *QueryOption)(IWinInetHttpInfo *This, DWORD dwOption, LPVOID pBuffer, DWORD *pcbBuf);HRESULT (__stdcall *QueryInfo)(IWinInetHttpInfo *This, DWORD dwOption, LPVOID pBuffer, DWORD *pcbBuf, DWORD *pdwFlags, DWORD *pdwReserved);};
struct IClassActivatorVtbl {HRESULT (__stdcall *QueryInterface)(IClassActivator *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IClassActivator *This);ULONG (__stdcall *Release)(IClassActivator *This);HRESULT (__stdcall *GetClassObject)(IClassActivator *This, const IID *const rclsid, DWORD dwClassContext, LCID locale, const IID *const riid, void **ppv);};
struct IPersistStorageVtbl {HRESULT (__stdcall *QueryInterface)(IPersistStorage *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IPersistStorage *This);ULONG (__stdcall *Release)(IPersistStorage *This);HRESULT (__stdcall *GetClassID)(IPersistStorage *This, CLSID *pClassID);HRESULT (__stdcall *IsDirty)(IPersistStorage *This);HRESULT (__stdcall *InitNew)(IPersistStorage *This, IStorage *pStg);HRESULT (__stdcall *Load)(IPersistStorage *This, IStorage *pStg);HRESULT (__stdcall *Save)(IPersistStorage *This, IStorage *pStgSave, BOOL fSameAsLoad);HRESULT (__stdcall *SaveCompleted)(IPersistStorage *This, IStorage *pStgNew);HRESULT (__stdcall *HandsOffStorage)(IPersistStorage *This);};
struct IProgressNotifyVtbl {HRESULT (__stdcall *QueryInterface)(IProgressNotify *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IProgressNotify *This);ULONG (__stdcall *Release)(IProgressNotify *This);HRESULT (__stdcall *OnProgress)(IProgressNotify *This, DWORD dwProgressCurrent, DWORD dwProgressMaximum, BOOL fAccurate, BOOL fOwner);};
struct IStdMarshalInfoVtbl {HRESULT (__stdcall *QueryInterface)(IStdMarshalInfo *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IStdMarshalInfo *This);ULONG (__stdcall *Release)(IStdMarshalInfo *This);HRESULT (__stdcall *GetClassForHandler)(IStdMarshalInfo *This, DWORD dwDestContext, void *pvDestContext, CLSID *pClsid);};
struct _PROCESS_HEAP_ENTRY {PVOID lpData;DWORD cbData;BYTE cbOverhead;BYTE iRegionIndex;WORD wFlags;_PROCESS_HEAP_ENTRY___7560F888646F7FDA504B9D72BE9EBD07 __anonymous0;};
struct tagOBJECTDESCRIPTOR {ULONG cbSize;CLSID clsid;DWORD dwDrawAspect;SIZEL sizel;POINTL pointl;DWORD dwStatus;DWORD dwFullUserTypeName;DWORD dwSrcOfCopy;};
struct IFillLockBytesVtbl {HRESULT (__stdcall *QueryInterface)(IFillLockBytes *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IFillLockBytes *This);ULONG (__stdcall *Release)(IFillLockBytes *This);HRESULT (__stdcall *FillAppend)(IFillLockBytes *This, const void *pv, ULONG cb, ULONG *pcbWritten);HRESULT (__stdcall *FillAt)(IFillLockBytes *This, ULARGE_INTEGER ulOffset, const void *pv, ULONG cb, ULONG *pcbWritten);HRESULT (__stdcall *SetFillSize)(IFillLockBytes *This, ULARGE_INTEGER ulSize);HRESULT (__stdcall *Terminate)(IFillLockBytes *This, BOOL bCanceled);};
struct IOleClientSiteVtbl {HRESULT (__stdcall *QueryInterface)(IOleClientSite *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IOleClientSite *This);ULONG (__stdcall *Release)(IOleClientSite *This);HRESULT (__stdcall *SaveObject)(IOleClientSite *This);HRESULT (__stdcall *GetMoniker)(IOleClientSite *This, DWORD dwAssign, DWORD dwWhichMoniker, IMoniker **ppmk);HRESULT (__stdcall *GetContainer)(IOleClientSite *This, IOleContainer **ppContainer);HRESULT (__stdcall *ShowObject)(IOleClientSite *This);HRESULT (__stdcall *OnShowWindow)(IOleClientSite *This, BOOL fShow);HRESULT (__stdcall *RequestNewObjectLayout)(IOleClientSite *This);};
struct tagEMRGRADIENTFILL {EMR emr;RECTL rclBounds;DWORD nVer;DWORD nTri;ULONG ulMode;TRIVERTEX Ver[1];};
struct _TOKEN_STATISTICS {LUID TokenId;LUID AuthenticationId;LARGE_INTEGER ExpirationTime;TOKEN_TYPE TokenType;SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;DWORD DynamicCharged;DWORD DynamicAvailable;DWORD GroupCount;DWORD PrivilegeCount;LUID ModifiedId;};
struct tagDRAWITEMSTRUCT {UINT CtlType;UINT CtlID;UINT itemID;UINT itemAction;UINT itemState;HWND hwndItem;HDC hDC;RECT rcItem;ULONG_PTR itemData;};
struct tagEMREXTTEXTOUTA {EMR emr;RECTL rclBounds;DWORD iGraphicsMode;FLOAT exScale;FLOAT eyScale;EMRTEXT emrtext;};
struct tagLOGCOLORSPACEA {DWORD lcsSignature;DWORD lcsVersion;DWORD lcsSize;LCSCSTYPE lcsCSType;LCSGAMUTMATCH lcsIntent;CIEXYZTRIPLE lcsEndpoints;DWORD lcsGammaRed;DWORD lcsGammaGreen;DWORD lcsGammaBlue;CHAR lcsFilename[260];};
struct tagLOGCOLORSPACEW {DWORD lcsSignature;DWORD lcsVersion;DWORD lcsSize;LCSCSTYPE lcsCSType;LCSGAMUTMATCH lcsIntent;CIEXYZTRIPLE lcsEndpoints;DWORD lcsGammaRed;DWORD lcsGammaGreen;DWORD lcsGammaBlue;WCHAR lcsFilename[260];};
struct tagNEWTEXTMETRICW {LONG tmHeight;LONG tmAscent;LONG tmDescent;LONG tmInternalLeading;LONG tmExternalLeading;LONG tmAveCharWidth;LONG tmMaxCharWidth;LONG tmWeight;LONG tmOverhang;LONG tmDigitizedAspectX;LONG tmDigitizedAspectY;WCHAR tmFirstChar;WCHAR tmLastChar;WCHAR tmDefaultChar;WCHAR tmBreakChar;BYTE tmItalic;BYTE tmUnderlined;BYTE tmStruckOut;BYTE tmPitchAndFamily;BYTE tmCharSet;DWORD ntmFlags;UINT ntmSizeEM;UINT ntmCellHeight;UINT ntmAvgWidth;};
typedef BOOL (__stdcall *ENUMRESLANGPROCA)(HMODULE hModule, LPCSTR lpType, LPCSTR lpName, WORD wLanguage, LONG_PTR lParam);
typedef BOOL (__stdcall *ENUMRESNAMEPROCA)(HMODULE hModule, LPCSTR lpType, LPSTR lpName, LONG_PTR lParam);
struct IChannelHookVtbl {HRESULT (__stdcall *QueryInterface)(IChannelHook *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IChannelHook *This);ULONG (__stdcall *Release)(IChannelHook *This);void (__stdcall *ClientGetSize)(IChannelHook *This, const GUID *const uExtent, const IID *const riid, ULONG *pDataSize);void (__stdcall *ClientFillBuffer)(IChannelHook *This, const GUID *const uExtent, const IID *const riid, ULONG *pDataSize, void *pDataBuffer);void (__stdcall *ClientNotify)(IChannelHook *This, const GUID *const uExtent, const IID *const riid, ULONG cbDataSize, void *pDataBuffer, DWORD lDataRep, HRESULT hrFault);void (__stdcall *ServerNotify)(IChannelHook *This, const GUID *const uExtent, const IID *const riid, ULONG cbDataSize, void *pDataBuffer, DWORD lDataRep);void (__stdcall *ServerGetSize)(IChannelHook *This, const GUID *const uExtent, const IID *const riid, HRESULT hrFault, ULONG *pDataSize);void (__stdcall *ServerFillBuffer)(IChannelHook *This, const GUID *const uExtent, const IID *const riid, ULONG *pDataSize, void *pDataBuffer, HRESULT hrFault);};
struct IWinInetInfoVtbl {HRESULT (__stdcall *QueryInterface)(IWinInetInfo *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IWinInetInfo *This);ULONG (__stdcall *Release)(IWinInetInfo *This);HRESULT (__stdcall *QueryOption)(IWinInetInfo *This, DWORD dwOption, LPVOID pBuffer, DWORD *pcbBuf);};
struct _NOTIFYICONDATAA {DWORD cbSize;HWND hWnd;UINT uID;UINT uFlags;UINT uCallbackMessage;HICON hIcon;CHAR szTip[64];};
struct _NOTIFYICONDATAW {DWORD cbSize;HWND hWnd;UINT uID;UINT uFlags;UINT uCallbackMessage;HICON hIcon;WCHAR szTip[64];};
struct _NTFS_STATISTICS {DWORD LogFileFullExceptions;DWORD OtherExceptions;DWORD MftReads;DWORD MftReadBytes;DWORD MftWrites;DWORD MftWriteBytes;struct _NTFS_STATISTICS___924DF363F27C338739465173127CFC6B MftWritesUserLevel;WORD MftWritesFlushForLogFileFull;WORD MftWritesLazyWriter;WORD MftWritesUserRequest;DWORD Mft2Writes;DWORD Mft2WriteBytes;struct _NTFS_STATISTICS___924DF363F27C338739465173127CFC6B Mft2WritesUserLevel;WORD Mft2WritesFlushForLogFileFull;WORD Mft2WritesLazyWriter;WORD Mft2WritesUserRequest;DWORD RootIndexReads;DWORD RootIndexReadBytes;DWORD RootIndexWrites;DWORD RootIndexWriteBytes;DWORD BitmapReads;DWORD BitmapReadBytes;DWORD BitmapWrites;DWORD BitmapWriteBytes;WORD BitmapWritesFlushForLogFileFull;WORD BitmapWritesLazyWriter;WORD BitmapWritesUserRequest;struct _NTFS_STATISTICS___B3DB85740C1E2CFE5BD1821639ECE250 BitmapWritesUserLevel;DWORD MftBitmapReads;DWORD MftBitmapReadBytes;DWORD MftBitmapWrites;DWORD MftBitmapWriteBytes;WORD MftBitmapWritesFlushForLogFileFull;WORD MftBitmapWritesLazyWriter;WORD MftBitmapWritesUserRequest;struct _NTFS_STATISTICS___924DF363F27C338739465173127CFC6B MftBitmapWritesUserLevel;DWORD UserIndexReads;DWORD UserIndexReadBytes;DWORD UserIndexWrites;DWORD UserIndexWriteBytes;DWORD LogFileReads;DWORD LogFileReadBytes;DWORD LogFileWrites;DWORD LogFileWriteBytes;struct _NTFS_STATISTICS___9C998E5FD8046F0A1F0382B50F145156 Allocate;};
struct _PERF_DATA_BLOCK {WCHAR Signature[4];DWORD LittleEndian;DWORD Version;DWORD Revision;DWORD TotalByteLength;DWORD HeaderLength;DWORD NumObjectTypes;LONG DefaultObject;SYSTEMTIME SystemTime;LARGE_INTEGER PerfTime;LARGE_INTEGER PerfFreq;LARGE_INTEGER PerfTime100nSec;DWORD SystemNameLength;DWORD SystemNameOffset;};
struct tagEMRPOLYDRAW16 {EMR emr;RECTL rclBounds;DWORD cpts;POINTS apts[1];BYTE abTypes[1];};
struct tagMENUITEMINFOA {UINT cbSize;UINT fMask;UINT fType;UINT fState;UINT wID;HMENU hSubMenu;HBITMAP hbmpChecked;HBITMAP hbmpUnchecked;ULONG_PTR dwItemData;LPSTR dwTypeData;UINT cch;HBITMAP hbmpItem;};
struct IDropSourceVtbl {HRESULT (__stdcall *QueryInterface)(IDropSource *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IDropSource *This);ULONG (__stdcall *Release)(IDropSource *This);HRESULT (__stdcall *QueryContinueDrag)(IDropSource *This, BOOL fEscapePressed, DWORD grfKeyState);HRESULT (__stdcall *GiveFeedback)(IDropSource *This, DWORD dwEffect);};
struct IDropTargetVtbl {HRESULT (__stdcall *QueryInterface)(IDropTarget *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IDropTarget *This);ULONG (__stdcall *Release)(IDropTarget *This);HRESULT (__stdcall *DragEnter)(IDropTarget *This, IDataObject *pDataObj, DWORD grfKeyState, POINTL pt, DWORD *pdwEffect);HRESULT (__stdcall *DragOver)(IDropTarget *This, DWORD grfKeyState, POINTL pt, DWORD *pdwEffect);HRESULT (__stdcall *DragLeave)(IDropTarget *This);HRESULT (__stdcall *Drop)(IDropTarget *This, IDataObject *pDataObj, DWORD grfKeyState, POINTL pt, DWORD *pdwEffect);};
struct IRpcOptionsVtbl {HRESULT (__stdcall *QueryInterface)(IRpcOptions *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IRpcOptions *This);ULONG (__stdcall *Release)(IRpcOptions *This);HRESULT (__stdcall *Set)(IRpcOptions *This, IUnknown *pPrx, DWORD dwProperty, ULONG_PTR dwValue);HRESULT (__stdcall *Query)(IRpcOptions *This, IUnknown *pPrx, DWORD dwProperty, ULONG_PTR *pdwValue);};
typedef UINT_PTR (__stdcall *LPPAGEPAINTHOOK)(HWND, UINT, WPARAM, LPARAM);
typedef UINT_PTR (__stdcall *LPPAGESETUPHOOK)(HWND, UINT, WPARAM, LPARAM);
typedef UINT_PTR (__stdcall *LPPRINTHOOKPROC)(HWND, UINT, WPARAM, LPARAM);
typedef UINT_PTR (__stdcall *LPSETUPHOOKPROC)(HWND, UINT, WPARAM, LPARAM);
typedef BOOL (__stdcall *MONITORENUMPROC)(HMONITOR, HDC, LPRECT, LPARAM);
typedef BOOL (__stdcall *PROPENUMPROCEXA)(HWND, LPSTR, HANDLE, ULONG_PTR);
struct tagCWPRETSTRUCT {LRESULT lResult;LPARAM lParam;WPARAM wParam;UINT message;HWND hwnd;};
struct IMallocSpyVtbl {HRESULT (__stdcall *QueryInterface)(IMallocSpy *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IMallocSpy *This);ULONG (__stdcall *Release)(IMallocSpy *This);SIZE_T (__stdcall *PreAlloc)(IMallocSpy *This, SIZE_T cbRequest);void *(__stdcall *PostAlloc)(IMallocSpy *This, void *pActual);void *(__stdcall *PreFree)(IMallocSpy *This, void *pRequest, BOOL fSpyed);void (__stdcall *PostFree)(IMallocSpy *This, BOOL fSpyed);SIZE_T (__stdcall *PreRealloc)(IMallocSpy *This, void *pRequest, SIZE_T cbRequest, void **ppNewRequest, BOOL fSpyed);void *(__stdcall *PostRealloc)(IMallocSpy *This, void *pActual, BOOL fSpyed);void *(__stdcall *PreGetSize)(IMallocSpy *This, void *pRequest, BOOL fSpyed);SIZE_T (__stdcall *PostGetSize)(IMallocSpy *This, SIZE_T cbActual, BOOL fSpyed);void *(__stdcall *PreDidAlloc)(IMallocSpy *This, void *pRequest, BOOL fSpyed);int (__stdcall *PostDidAlloc)(IMallocSpy *This, void *pRequest, BOOL fSpyed, int fActual);void (__stdcall *PreHeapMinimize)(IMallocSpy *This);void (__stdcall *PostHeapMinimize)(IMallocSpy *This);};
struct IOleWindowVtbl {HRESULT (__stdcall *QueryInterface)(IOleWindow *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IOleWindow *This);ULONG (__stdcall *Release)(IOleWindow *This);HRESULT (__stdcall *GetWindow)(IOleWindow *This, HWND *phwnd);HRESULT (__stdcall *ContextSensitiveHelp)(IOleWindow *This, BOOL fEnterMode);};
struct tagEMRFRAMERGN {EMR emr;RECTL rclBounds;DWORD cbRgnData;DWORD ihBrush;SIZEL szlStroke;BYTE RgnData[1];};
struct tagEMRPOLYDRAW {EMR emr;RECTL rclBounds;DWORD cptl;POINTL aptl[1];BYTE abTypes[1];};
struct tagEXTLOGFONTW {LOGFONTW elfLogFont;WCHAR elfFullName[64];WCHAR elfStyle[32];DWORD elfVersion;DWORD elfStyleSize;DWORD elfMatch;DWORD elfReserved;BYTE elfVendorId[4];DWORD elfCulture;PANOSE elfPanose;};
struct IMarshal2Vtbl {HRESULT (__stdcall *QueryInterface)(IMarshal2 *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IMarshal2 *This);ULONG (__stdcall *Release)(IMarshal2 *This);HRESULT (__stdcall *GetUnmarshalClass)(IMarshal2 *This, const IID *const riid, void *pv, DWORD dwDestContext, void *pvDestContext, DWORD mshlflags, CLSID *pCid);HRESULT (__stdcall *GetMarshalSizeMax)(IMarshal2 *This, const IID *const riid, void *pv, DWORD dwDestContext, void *pvDestContext, DWORD mshlflags, DWORD *pSize);HRESULT (__stdcall *MarshalInterface)(IMarshal2 *This, IStream *pStm, const IID *const riid, void *pv, DWORD dwDestContext, void *pvDestContext, DWORD mshlflags);HRESULT (__stdcall *UnmarshalInterface)(IMarshal2 *This, IStream *pStm, const IID *const riid, void **ppv);HRESULT (__stdcall *ReleaseMarshalData)(IMarshal2 *This, IStream *pStm);HRESULT (__stdcall *DisconnectObject)(IMarshal2 *This, DWORD dwReserved);};
typedef UINT_PTR (__stdcall *LPOFNHOOKPROC)(HWND, UINT, WPARAM, LPARAM);
struct _IMAGE_SYMBOL {union _IMAGE_SYMBOL___9F494F861147FDD11568E2137C7AB2D3 N;DWORD Value;SHORT SectionNumber;WORD Type;BYTE StorageClass;BYTE NumberOfAuxSymbols;};
struct _STARTUPINFOA {DWORD cb;LPSTR lpReserved;LPSTR lpDesktop;LPSTR lpTitle;DWORD dwX;DWORD dwY;DWORD dwXSize;DWORD dwYSize;DWORD dwXCountChars;DWORD dwYCountChars;DWORD dwFillAttribute;DWORD dwFlags;WORD wShowWindow;WORD cbReserved2;LPBYTE lpReserved2;HANDLE hStdInput;HANDLE hStdOutput;HANDLE hStdError;};
struct tagWINDOWINFO {DWORD cbSize;RECT rcWindow;RECT rcClient;DWORD dwStyle;DWORD dwExStyle;DWORD dwWindowStatus;UINT cxWindowBorders;UINT cyWindowBorders;ATOM atomWindowType;WORD wCreatorVersion;};
struct IMarshalVtbl {HRESULT (__stdcall *QueryInterface)(IMarshal *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IMarshal *This);ULONG (__stdcall *Release)(IMarshal *This);HRESULT (__stdcall *GetUnmarshalClass)(IMarshal *This, const IID *const riid, void *pv, DWORD dwDestContext, void *pvDestContext, DWORD mshlflags, CLSID *pCid);HRESULT (__stdcall *GetMarshalSizeMax)(IMarshal *This, const IID *const riid, void *pv, DWORD dwDestContext, void *pvDestContext, DWORD mshlflags, DWORD *pSize);HRESULT (__stdcall *MarshalInterface)(IMarshal *This, IStream *pStm, const IID *const riid, void *pv, DWORD dwDestContext, void *pvDestContext, DWORD mshlflags);HRESULT (__stdcall *UnmarshalInterface)(IMarshal *This, IStream *pStm, const IID *const riid, void **ppv);HRESULT (__stdcall *ReleaseMarshalData)(IMarshal *This, IStream *pStm);HRESULT (__stdcall *DisconnectObject)(IMarshal *This, DWORD dwReserved);};
typedef UINT_PTR (__stdcall *LPCCHOOKPROC)(HWND, UINT, WPARAM, LPARAM);
typedef UINT_PTR (__stdcall *LPCFHOOKPROC)(HWND, UINT, WPARAM, LPARAM);
typedef UINT_PTR (__stdcall *LPFRHOOKPROC)(HWND, UINT, WPARAM, LPARAM);
struct _CTL_CONTEXT {DWORD dwMsgAndCertEncodingType;BYTE *pbCtlEncoded;DWORD cbCtlEncoded;PCTL_INFO pCtlInfo;HCERTSTORE hCertStore;HCRYPTMSG hCryptMsg;BYTE *pbCtlContent;DWORD cbCtlContent;};
struct _DISK_RECORD {LARGE_INTEGER ByteOffset;LARGE_INTEGER StartTime;LARGE_INTEGER EndTime;PVOID VirtualAddress;DWORD NumberOfBytes;BYTE DeviceNumber;BOOLEAN ReadRequest;};
struct _JOB_INFO_2A {DWORD JobId;LPSTR pPrinterName;LPSTR pMachineName;LPSTR pUserName;LPSTR pDocument;LPSTR pNotifyName;LPSTR pDatatype;LPSTR pPrintProcessor;LPSTR pParameters;LPSTR pDriverName;LPDEVMODEA pDevMode;LPSTR pStatus;PSECURITY_DESCRIPTOR pSecurityDescriptor;DWORD Status;DWORD Priority;DWORD Position;DWORD StartTime;DWORD UntilTime;DWORD TotalPages;DWORD Size;SYSTEMTIME Submitted;DWORD Time;DWORD PagesPrinted;};
struct _SYSTEM_INFO {_SYSTEM_INFO___A707B71C060B6D10F73A71917EA8473F __anonymous0;DWORD dwPageSize;LPVOID lpMinimumApplicationAddress;LPVOID lpMaximumApplicationAddress;DWORD_PTR dwActiveProcessorMask;DWORD dwNumberOfProcessors;DWORD dwProcessorType;DWORD dwAllocationGranularity;WORD wProcessorLevel;WORD wProcessorRevision;};
struct _devicemodeA {BYTE dmDeviceName[32];WORD dmSpecVersion;WORD dmDriverVersion;WORD dmSize;WORD dmDriverExtra;DWORD dmFields;_devicemodeA___1DE029518E5B112A14BB6E76DECCA4C4 __anonymous0;__int16 dmScale;__int16 dmCopies;__int16 dmDefaultSource;__int16 dmPrintQuality;__int16 dmColor;__int16 dmDuplex;__int16 dmYResolution;__int16 dmTTOption;__int16 dmCollate;BYTE dmFormName[32];WORD dmLogPixels;DWORD dmBitsPerPel;DWORD dmPelsWidth;DWORD dmPelsHeight;_devicemodeA___4FBEBCCE69364E072421C9DF045BB77C __anonymous3;DWORD dmDisplayFrequency;DWORD dmICMMethod;DWORD dmICMIntent;DWORD dmMediaType;DWORD dmDitherType;DWORD dmReserved1;DWORD dmReserved2;DWORD dmPanningWidth;DWORD dmPanningHeight;};
struct _devicemodeW {WCHAR dmDeviceName[32];WORD dmSpecVersion;WORD dmDriverVersion;WORD dmSize;WORD dmDriverExtra;DWORD dmFields;_devicemodeA___1DE029518E5B112A14BB6E76DECCA4C4 __anonymous0;__int16 dmScale;__int16 dmCopies;__int16 dmDefaultSource;__int16 dmPrintQuality;__int16 dmColor;__int16 dmDuplex;__int16 dmYResolution;__int16 dmTTOption;__int16 dmCollate;WCHAR dmFormName[32];WORD dmLogPixels;DWORD dmBitsPerPel;DWORD dmPelsWidth;DWORD dmPelsHeight;_devicemodeA___4FBEBCCE69364E072421C9DF045BB77C __anonymous2;DWORD dmDisplayFrequency;DWORD dmICMMethod;DWORD dmICMIntent;DWORD dmMediaType;DWORD dmDitherType;DWORD dmReserved1;DWORD dmReserved2;DWORD dmPanningWidth;DWORD dmPanningHeight;};
typedef UINT (__stdcall *LPFNDEVMODE)(HWND, HMODULE, LPDEVMODE, LPSTR, LPSTR, LPDEVMODE, LPSTR, UINT);
typedef HDDEDATA (__stdcall *PFNCALLBACK)(UINT wType, UINT wFmt, HCONV hConv, HSZ hsz1, HSZ hsz2, HDDEDATA hData, ULONG_PTR dwData1, ULONG_PTR dwData2);
struct _AppBarData {DWORD cbSize;HWND hWnd;UINT uCallbackMessage;UINT uEdge;RECT rc;LPARAM lParam;};
typedef LRESULT (__stdcall *DRIVERPROC)(DWORD, HDRVR, UINT, LPARAM, LPARAM);
typedef HDDEDATA __stdcall FNCALLBACK(UINT wType, UINT wFmt, HCONV hConv, HSZ hsz1, HSZ hsz2, HDDEDATA hData, ULONG_PTR dwData1, ULONG_PTR dwData2);
struct _DRAGINFOA {UINT uSize;POINT pt;BOOL fNC;LPSTR lpFileList;DWORD grfKeyState;};
typedef INT_PTR (__stdcall *DLGPROC)(HWND, UINT, WPARAM, LPARAM);
typedef LRESULT (__stdcall *WNDPROC)(HWND, UINT, WPARAM, LPARAM);
struct tagDEC {USHORT wReserved;tagDEC___64EC678C49E7BE49873AFBFB7A849D34 __anonymous0;ULONG Hi32;union {tagDEC___D28E26DEC3EC762C06C2AA9D0F7AC301___674876891A86A76F12C10005982BCA56 __anonymous1;ULONGLONG Lo64;};};
struct _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO {DWORD cbSize;CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;void *pvKeyEncryptionAuxInfo;CRYPT_ALGORITHM_IDENTIFIER KeyWrapAlgorithm;void *pvKeyWrapAuxInfo;HCRYPTPROV hCryptProv;DWORD dwKeySpec;DWORD dwKeyChoice;_CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO___41B0BD1292C22C89BE2FD7DE56713FE8 __anonymous0;CRYPT_DATA_BLOB UserKeyingMaterial;DWORD cRecipientEncryptedKeys;PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO *rgpRecipientEncryptedKeys;};
struct _F1B55BC800274E3ABC9BA0A46288924E {DWORD RecordLength;WORD MajorVersion;WORD MinorVersion;DWORDLONG FileReferenceNumber;DWORDLONG ParentFileReferenceNumber;USN Usn;LARGE_INTEGER TimeStamp;DWORD Reason;DWORD SourceInfo;DWORD SecurityId;DWORD FileAttributes;WORD FileNameLength;WORD FileNameOffset;WCHAR FileName[1];};
typedef BOOL (__stdcall *PFN_CERT_DLL_OPEN_STORE_PROV_FUNC)(LPCSTR lpszStoreProvider, DWORD dwEncodingType, HCRYPTPROV hCryptProv, DWORD dwFlags, const void *pvPara, HCERTSTORE hCertStore, PCERT_STORE_PROV_INFO pStoreProvInfo);
typedef BOOL (__stdcall *PCRYPT_DECRYPT_PRIVATE_KEY_FUNC)(CRYPT_ALGORITHM_IDENTIFIER Algorithm, CRYPT_DATA_BLOB EncryptedPrivateKey, BYTE *pbClearTextKey, DWORD *pcbClearTextKey, LPVOID pVoidDecryptFunc);
typedef BOOL (__stdcall *PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC)(CRYPT_ALGORITHM_IDENTIFIER *pAlgorithm, CRYPT_DATA_BLOB *pClearTextPrivateKey, BYTE *pbEncryptedKey, DWORD *pcbEncryptedKey, LPVOID pVoidEncryptFunc);
typedef BOOL (__stdcall *PFN_CMSG_EXPORT_ENCRYPT_KEY)(HCRYPTPROV hCryptProv, HCRYPTKEY hEncryptKey, PCERT_PUBLIC_KEY_INFO pPublicKeyInfo, PBYTE pbData, PDWORD pcbData);
typedef BOOL (__stdcall *PFN_CMSG_IMPORT_ENCRYPT_KEY)(HCRYPTPROV hCryptProv, DWORD dwKeySpec, PCRYPT_ALGORITHM_IDENTIFIER paiEncrypt, PCRYPT_ALGORITHM_IDENTIFIER paiPubKey, PBYTE pbEncodedKey, DWORD cbEncodedKey, HCRYPTKEY *phEncryptKey);
struct IOleInPlaceObjectVtbl {HRESULT (__stdcall *QueryInterface)(IOleInPlaceObject *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IOleInPlaceObject *This);ULONG (__stdcall *Release)(IOleInPlaceObject *This);HRESULT (__stdcall *GetWindow)(IOleInPlaceObject *This, HWND *phwnd);HRESULT (__stdcall *ContextSensitiveHelp)(IOleInPlaceObject *This, BOOL fEnterMode);HRESULT (__stdcall *InPlaceDeactivate)(IOleInPlaceObject *This);HRESULT (__stdcall *UIDeactivate)(IOleInPlaceObject *This);HRESULT (__stdcall *SetObjectRects)(IOleInPlaceObject *This, LPCRECT lprcPosRect, LPCRECT lprcClipRect);HRESULT (__stdcall *ReactivateAndUndo)(IOleInPlaceObject *This);};
struct tagEMRTRANSPARENTBLT {EMR emr;RECTL rclBounds;LONG xDest;LONG yDest;LONG cxDest;LONG cyDest;DWORD dwRop;LONG xSrc;LONG ySrc;XFORM xformSrc;COLORREF crBkColorSrc;DWORD iUsageSrc;DWORD offBmiSrc;DWORD cbBmiSrc;DWORD offBitsSrc;DWORD cbBitsSrc;LONG cxSrc;LONG cySrc;};
struct IMessageFilterVtbl {HRESULT (__stdcall *QueryInterface)(IMessageFilter *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IMessageFilter *This);ULONG (__stdcall *Release)(IMessageFilter *This);DWORD (__stdcall *HandleInComingCall)(IMessageFilter *This, DWORD dwCallType, HTASK htaskCaller, DWORD dwTickCount, LPINTERFACEINFO lpInterfaceInfo);DWORD (__stdcall *RetryRejectedCall)(IMessageFilter *This, HTASK htaskCallee, DWORD dwTickCount, DWORD dwRejectType);DWORD (__stdcall *MessagePending)(IMessageFilter *This, HTASK htaskCallee, DWORD dwTickCount, DWORD dwPendingType);};
struct IPersistStreamVtbl {HRESULT (__stdcall *QueryInterface)(IPersistStream *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IPersistStream *This);ULONG (__stdcall *Release)(IPersistStream *This);HRESULT (__stdcall *GetClassID)(IPersistStream *This, CLSID *pClassID);HRESULT (__stdcall *IsDirty)(IPersistStream *This);HRESULT (__stdcall *Load)(IPersistStream *This, IStream *pStm);HRESULT (__stdcall *Save)(IPersistStream *This, IStream *pStm, BOOL fClearDirty);HRESULT (__stdcall *GetSizeMax)(IPersistStream *This, ULARGE_INTEGER *pcbSize);};
struct tagEMRPOLYTEXTOUTA {EMR emr;RECTL rclBounds;DWORD iGraphicsMode;FLOAT exScale;FLOAT eyScale;LONG cStrings;EMRTEXT aemrtext[1];};
struct IHttpSecurityVtbl {HRESULT (__stdcall *QueryInterface)(IHttpSecurity *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IHttpSecurity *This);ULONG (__stdcall *Release)(IHttpSecurity *This);HRESULT (__stdcall *GetWindow)(IHttpSecurity *This, const GUID *const rguidReason, HWND *phwnd);HRESULT (__stdcall *OnSecurityProblem)(IHttpSecurity *This, DWORD dwProblem);};
struct _CMSG_SIGNER_INFO {DWORD dwVersion;CERT_NAME_BLOB Issuer;CRYPT_INTEGER_BLOB SerialNumber;CRYPT_ALGORITHM_IDENTIFIER HashAlgorithm;CRYPT_ALGORITHM_IDENTIFIER HashEncryptionAlgorithm;CRYPT_DATA_BLOB EncryptedHash;CRYPT_ATTRIBUTES AuthAttrs;CRYPT_ATTRIBUTES UnauthAttrs;};
struct ITypeMarshalVtbl {HRESULT (__stdcall *QueryInterface)(ITypeMarshal *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(ITypeMarshal *This);ULONG (__stdcall *Release)(ITypeMarshal *This);HRESULT (__stdcall *Size)(ITypeMarshal *This, PVOID pvType, DWORD dwDestContext, PVOID pvDestContext, ULONG *pSize);HRESULT (__stdcall *Marshal)(ITypeMarshal *This, PVOID pvType, DWORD dwDestContext, PVOID pvDestContext, ULONG cbBufferLength, BYTE *pBuffer, ULONG *pcbWritten);HRESULT (__stdcall *Unmarshal)(ITypeMarshal *This, PVOID pvType, DWORD dwFlags, ULONG cbBufferLength, BYTE *pBuffer, ULONG *pcbRead);HRESULT (__stdcall *Free)(ITypeMarshal *This, PVOID pvType);};
struct _SHFILEOPSTRUCTA {HWND hwnd;UINT wFunc;LPCSTR pFrom;LPCSTR pTo;FILEOP_FLAGS fFlags;BOOL fAnyOperationsAborted;LPVOID hNameMappings;LPCSTR lpszProgressTitle;};
struct tagEMRALPHABLEND {EMR emr;RECTL rclBounds;LONG xDest;LONG yDest;LONG cxDest;LONG cyDest;DWORD dwRop;LONG xSrc;LONG ySrc;XFORM xformSrc;COLORREF crBkColorSrc;DWORD iUsageSrc;DWORD offBmiSrc;DWORD cbBmiSrc;DWORD offBitsSrc;DWORD cbBitsSrc;LONG cxSrc;LONG cySrc;};
struct tagEMRSTRETCHBLT {EMR emr;RECTL rclBounds;LONG xDest;LONG yDest;LONG cxDest;LONG cyDest;DWORD dwRop;LONG xSrc;LONG ySrc;XFORM xformSrc;COLORREF crBkColorSrc;DWORD iUsageSrc;DWORD offBmiSrc;DWORD cbBmiSrc;DWORD offBitsSrc;DWORD cbBitsSrc;LONG cxSrc;LONG cySrc;};
struct tagMONCONVSTRUCT {UINT cb;BOOL fConnect;DWORD dwTime;HANDLE hTask;HSZ hszSvc;HSZ hszTopic;HCONV hConvClient;HCONV hConvServer;};
struct tagMONHSZSTRUCTA {UINT cb;BOOL fsAction;DWORD dwTime;HSZ hsz;HANDLE hTask;CHAR str[1];};
struct tagMONHSZSTRUCTW {UINT cb;BOOL fsAction;DWORD dwTime;HSZ hsz;HANDLE hTask;WCHAR str[1];};
struct tagMONLINKSTRUCT {UINT cb;DWORD dwTime;HANDLE hTask;BOOL fEstablished;BOOL fNoData;HSZ hszSvc;HSZ hszTopic;HSZ hszItem;UINT wFmt;BOOL fServer;HCONV hConvServer;HCONV hConvClient;};
struct IDataFilterVtbl {HRESULT (__stdcall *QueryInterface)(IDataFilter *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IDataFilter *This);ULONG (__stdcall *Release)(IDataFilter *This);HRESULT (__stdcall *DoEncode)(IDataFilter *This, DWORD dwFlags, LONG lInBufferSize, BYTE *pbInBuffer, LONG lOutBufferSize, BYTE *pbOutBuffer, LONG lInBytesAvailable, LONG *plInBytesRead, LONG *plOutBytesWritten, DWORD dwReserved);HRESULT (__stdcall *DoDecode)(IDataFilter *This, DWORD dwFlags, LONG lInBufferSize, BYTE *pbInBuffer, LONG lOutBufferSize, BYTE *pbOutBuffer, LONG lInBytesAvailable, LONG *plInBytesRead, LONG *plOutBytesWritten, DWORD dwReserved);HRESULT (__stdcall *SetEncodingLevel)(IDataFilter *This, DWORD dwEncLevel);};
struct tagCHOOSECOLORA {DWORD lStructSize;HWND hwndOwner;HWND hInstance;COLORREF rgbResult;COLORREF *lpCustColors;DWORD Flags;LPARAM lCustData;LPCCHOOKPROC lpfnHook;LPCSTR lpTemplateName;};
struct ILockBytesVtbl {HRESULT (__stdcall *QueryInterface)(ILockBytes *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(ILockBytes *This);ULONG (__stdcall *Release)(ILockBytes *This);HRESULT (__stdcall *ReadAt)(ILockBytes *This, ULARGE_INTEGER ulOffset, void *pv, ULONG cb, ULONG *pcbRead);HRESULT (__stdcall *WriteAt)(ILockBytes *This, ULARGE_INTEGER ulOffset, const void *pv, ULONG cb, ULONG *pcbWritten);HRESULT (__stdcall *Flush)(ILockBytes *This);HRESULT (__stdcall *SetSize)(ILockBytes *This, ULARGE_INTEGER cb);HRESULT (__stdcall *LockRegion)(ILockBytes *This, ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, DWORD dwLockType);HRESULT (__stdcall *UnlockRegion)(ILockBytes *This, ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, DWORD dwLockType);HRESULT (__stdcall *Stat)(ILockBytes *This, STATSTG *pstatstg, DWORD grfStatFlag);};
struct tagEMRMASKBLT {EMR emr;RECTL rclBounds;LONG xDest;LONG yDest;LONG cxDest;LONG cyDest;DWORD dwRop;LONG xSrc;LONG ySrc;XFORM xformSrc;COLORREF crBkColorSrc;DWORD iUsageSrc;DWORD offBmiSrc;DWORD cbBmiSrc;DWORD offBitsSrc;DWORD cbBitsSrc;LONG xMask;LONG yMask;DWORD iUsageMask;DWORD offBmiMask;DWORD cbBmiMask;DWORD offBitsMask;DWORD cbBitsMask;};
struct tagEMRBITBLT {EMR emr;RECTL rclBounds;LONG xDest;LONG yDest;LONG cxDest;LONG cyDest;DWORD dwRop;LONG xSrc;LONG ySrc;XFORM xformSrc;COLORREF crBkColorSrc;DWORD iUsageSrc;DWORD offBmiSrc;DWORD cbBmiSrc;DWORD offBitsSrc;DWORD cbBitsSrc;};
struct _CRL_INFO {DWORD dwVersion;CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;CERT_NAME_BLOB Issuer;FILETIME ThisUpdate;FILETIME NextUpdate;DWORD cCRLEntry;PCRL_ENTRY rgCRLEntry;DWORD cExtension;PCERT_EXTENSION rgExtension;};
struct tagMSG {HWND hwnd;UINT message;WPARAM wParam;LPARAM lParam;DWORD time;POINT pt;};
struct _1DF2F441892C3D46584606B89F66007B {DWORD dwStructSize;LPSTR lpstrGroupNames;DWORD nMaxGroupNames;LPCGUID rgguidInterfaces;DWORD cguidInterfaces;LPSTR lpstrCardNames;DWORD nMaxCardNames;LPOCNCHKPROC lpfnCheck;LPOCNCONNPROCA lpfnConnect;LPOCNDSCPROC lpfnDisconnect;LPVOID pvUserData;DWORD dwShareMode;DWORD dwPreferredProtocols;};
struct IInternetHostSecurityManagerVtbl {HRESULT (__stdcall *QueryInterface)(IInternetHostSecurityManager *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IInternetHostSecurityManager *This);ULONG (__stdcall *Release)(IInternetHostSecurityManager *This);HRESULT (__stdcall *GetSecurityId)(IInternetHostSecurityManager *This, BYTE *pbSecurityId, DWORD *pcbSecurityId, DWORD_PTR dwReserved);HRESULT (__stdcall *ProcessUrlAction)(IInternetHostSecurityManager *This, DWORD dwAction, BYTE *pPolicy, DWORD cbPolicy, BYTE *pContext, DWORD cbContext, DWORD dwFlags, DWORD dwReserved);HRESULT (__stdcall *QueryCustomPolicy)(IInternetHostSecurityManager *This, const GUID *const guidKey, BYTE **ppPolicy, DWORD *pcbPolicy, BYTE *pContext, DWORD cbContext, DWORD dwReserved);};
struct IOleInPlaceActiveObjectVtbl {HRESULT (__stdcall *QueryInterface)(IOleInPlaceActiveObject *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IOleInPlaceActiveObject *This);ULONG (__stdcall *Release)(IOleInPlaceActiveObject *This);HRESULT (__stdcall *GetWindow)(IOleInPlaceActiveObject *This, HWND *phwnd);HRESULT (__stdcall *ContextSensitiveHelp)(IOleInPlaceActiveObject *This, BOOL fEnterMode);HRESULT (__stdcall *TranslateAcceleratorA)(IOleInPlaceActiveObject *This, LPMSG lpmsg);HRESULT (__stdcall *OnFrameWindowActivate)(IOleInPlaceActiveObject *This, BOOL fActivate);HRESULT (__stdcall *OnDocWindowActivate)(IOleInPlaceActiveObject *This, BOOL fActivate);HRESULT (__stdcall *ResizeBorder)(IOleInPlaceActiveObject *This, LPCRECT prcBorder, IOleInPlaceUIWindow *pUIWindow, BOOL fFrameWindow);HRESULT (__stdcall *EnableModeless)(IOleInPlaceActiveObject *This, BOOL fEnable);};
struct _CMSG_CONTENT_ENCRYPT_INFO {DWORD cbSize;HCRYPTPROV hCryptProv;CRYPT_ALGORITHM_IDENTIFIER ContentEncryptionAlgorithm;void *pvEncryptionAuxInfo;DWORD cRecipients;PCMSG_RECIPIENT_ENCODE_INFO rgCmsRecipients;PFN_CMSG_ALLOC pfnAlloc;PFN_CMSG_FREE pfnFree;DWORD dwEncryptFlags;HCRYPTKEY hContentEncryptKey;DWORD dwFlags;};
struct AsyncIAdviseSink2Vtbl {HRESULT (__stdcall *QueryInterface)(AsyncIAdviseSink2 *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(AsyncIAdviseSink2 *This);ULONG (__stdcall *Release)(AsyncIAdviseSink2 *This);void (__stdcall *Begin_OnDataChange)(AsyncIAdviseSink2 *This, FORMATETC *pFormatetc, STGMEDIUM *pStgmed);void (__stdcall *Finish_OnDataChange)(AsyncIAdviseSink2 *This);void (__stdcall *Begin_OnViewChange)(AsyncIAdviseSink2 *This, DWORD dwAspect, LONG lindex);void (__stdcall *Finish_OnViewChange)(AsyncIAdviseSink2 *This);void (__stdcall *Begin_OnRename)(AsyncIAdviseSink2 *This, IMoniker *pmk);void (__stdcall *Finish_OnRename)(AsyncIAdviseSink2 *This);void (__stdcall *Begin_OnSave)(AsyncIAdviseSink2 *This);void (__stdcall *Finish_OnSave)(AsyncIAdviseSink2 *This);void (__stdcall *Begin_OnClose)(AsyncIAdviseSink2 *This);void (__stdcall *Finish_OnClose)(AsyncIAdviseSink2 *This);void (__stdcall *Begin_OnLinkSrcChange)(AsyncIAdviseSink2 *This, IMoniker *pmk);void (__stdcall *Finish_OnLinkSrcChange)(AsyncIAdviseSink2 *This);};
struct AsyncIAdviseSinkVtbl {HRESULT (__stdcall *QueryInterface)(AsyncIAdviseSink *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(AsyncIAdviseSink *This);ULONG (__stdcall *Release)(AsyncIAdviseSink *This);void (__stdcall *Begin_OnDataChange)(AsyncIAdviseSink *This, FORMATETC *pFormatetc, STGMEDIUM *pStgmed);void (__stdcall *Finish_OnDataChange)(AsyncIAdviseSink *This);void (__stdcall *Begin_OnViewChange)(AsyncIAdviseSink *This, DWORD dwAspect, LONG lindex);void (__stdcall *Finish_OnViewChange)(AsyncIAdviseSink *This);void (__stdcall *Begin_OnRename)(AsyncIAdviseSink *This, IMoniker *pmk);void (__stdcall *Finish_OnRename)(AsyncIAdviseSink *This);void (__stdcall *Begin_OnSave)(AsyncIAdviseSink *This);void (__stdcall *Finish_OnSave)(AsyncIAdviseSink *This);void (__stdcall *Begin_OnClose)(AsyncIAdviseSink *This);void (__stdcall *Finish_OnClose)(AsyncIAdviseSink *This);};
struct IPersistMonikerVtbl {HRESULT (__stdcall *QueryInterface)(IPersistMoniker *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IPersistMoniker *This);ULONG (__stdcall *Release)(IPersistMoniker *This);HRESULT (__stdcall *GetClassID)(IPersistMoniker *This, CLSID *pClassID);HRESULT (__stdcall *IsDirty)(IPersistMoniker *This);HRESULT (__stdcall *Load)(IPersistMoniker *This, BOOL fFullyAvailable, IMoniker *pimkName, LPBC pibc, DWORD grfMode);HRESULT (__stdcall *Save)(IPersistMoniker *This, IMoniker *pimkName, LPBC pbc, BOOL fRemember);HRESULT (__stdcall *SaveCompleted)(IPersistMoniker *This, IMoniker *pimkName, LPBC pibc);HRESULT (__stdcall *GetCurMoniker)(IPersistMoniker *This, IMoniker **ppimkName);};
struct _OUTLINETEXTMETRICA {UINT otmSize;TEXTMETRICA otmTextMetrics;BYTE otmFiller;PANOSE otmPanoseNumber;UINT otmfsSelection;UINT otmfsType;int otmsCharSlopeRise;int otmsCharSlopeRun;int otmItalicAngle;UINT otmEMSquare;int otmAscent;int otmDescent;UINT otmLineGap;UINT otmsCapEmHeight;UINT otmsXHeight;RECT otmrcFontBox;int otmMacAscent;int otmMacDescent;UINT otmMacLineGap;UINT otmusMinimumPPEM;POINT otmptSubscriptSize;POINT otmptSubscriptOffset;POINT otmptSuperscriptSize;POINT otmptSuperscriptOffset;UINT otmsStrikeoutSize;int otmsStrikeoutPosition;int otmsUnderscoreSize;int otmsUnderscorePosition;PSTR otmpFamilyName;PSTR otmpFaceName;PSTR otmpStyleName;PSTR otmpFullName;};
struct _OUTLINETEXTMETRICW {UINT otmSize;TEXTMETRICW otmTextMetrics;BYTE otmFiller;PANOSE otmPanoseNumber;UINT otmfsSelection;UINT otmfsType;int otmsCharSlopeRise;int otmsCharSlopeRun;int otmItalicAngle;UINT otmEMSquare;int otmAscent;int otmDescent;UINT otmLineGap;UINT otmsCapEmHeight;UINT otmsXHeight;RECT otmrcFontBox;int otmMacAscent;int otmMacDescent;UINT otmMacLineGap;UINT otmusMinimumPPEM;POINT otmptSubscriptSize;POINT otmptSubscriptOffset;POINT otmptSuperscriptSize;POINT otmptSuperscriptOffset;UINT otmsStrikeoutSize;int otmsStrikeoutPosition;int otmsUnderscoreSize;int otmsUnderscorePosition;PSTR otmpFamilyName;PSTR otmpFaceName;PSTR otmpStyleName;PSTR otmpFullName;};
struct IAdviseSink2Vtbl {HRESULT (__stdcall *QueryInterface)(IAdviseSink2 *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IAdviseSink2 *This);ULONG (__stdcall *Release)(IAdviseSink2 *This);void (__stdcall *OnDataChange)(IAdviseSink2 *This, FORMATETC *pFormatetc, STGMEDIUM *pStgmed);void (__stdcall *OnViewChange)(IAdviseSink2 *This, DWORD dwAspect, LONG lindex);void (__stdcall *OnRename)(IAdviseSink2 *This, IMoniker *pmk);void (__stdcall *OnSave)(IAdviseSink2 *This);void (__stdcall *OnClose)(IAdviseSink2 *This);void (__stdcall *OnLinkSrcChange)(IAdviseSink2 *This, IMoniker *pmk);};
struct tagCREATESTRUCTA {LPVOID lpCreateParams;HINSTANCE hInstance;HMENU hMenu;HWND hwndParent;int cy;int cx;int y;int x;LONG style;LPCSTR lpszName;LPCSTR lpszClass;DWORD dwExStyle;};
struct tagMSGBOXPARAMSA {UINT cbSize;HWND hwndOwner;HINSTANCE hInstance;LPCSTR lpszText;LPCSTR lpszCaption;DWORD dwStyle;LPCSTR lpszIcon;DWORD_PTR dwContextHelpId;MSGBOXCALLBACK lpfnMsgBoxCallback;DWORD dwLanguageId;};
struct IAdviseSinkVtbl {HRESULT (__stdcall *QueryInterface)(IAdviseSink *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IAdviseSink *This);ULONG (__stdcall *Release)(IAdviseSink *This);void (__stdcall *OnDataChange)(IAdviseSink *This, FORMATETC *pFormatetc, STGMEDIUM *pStgmed);void (__stdcall *OnViewChange)(IAdviseSink *This, DWORD dwAspect, LONG lindex);void (__stdcall *OnRename)(IAdviseSink *This, IMoniker *pmk);void (__stdcall *OnSave)(IAdviseSink *This);void (__stdcall *OnClose)(IAdviseSink *This);};
struct IDataObjectVtbl {HRESULT (__stdcall *QueryInterface)(IDataObject *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IDataObject *This);ULONG (__stdcall *Release)(IDataObject *This);HRESULT (__stdcall *GetData)(IDataObject *This, FORMATETC *pformatetcIn, STGMEDIUM *pmedium);HRESULT (__stdcall *GetDataHere)(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pmedium);HRESULT (__stdcall *QueryGetData)(IDataObject *This, FORMATETC *pformatetc);HRESULT (__stdcall *GetCanonicalFormatEtc)(IDataObject *This, FORMATETC *pformatectIn, FORMATETC *pformatetcOut);HRESULT (__stdcall *SetData)(IDataObject *This, FORMATETC *pformatetc, STGMEDIUM *pmedium, BOOL fRelease);HRESULT (__stdcall *EnumFormatEtc)(IDataObject *This, DWORD dwDirection, IEnumFORMATETC **ppenumFormatEtc);HRESULT (__stdcall *DAdvise)(IDataObject *This, FORMATETC *pformatetc, DWORD advf, IAdviseSink *pAdvSink, DWORD *pdwConnection);HRESULT (__stdcall *DUnadvise)(IDataObject *This, DWORD dwConnection);HRESULT (__stdcall *EnumDAdvise)(IDataObject *This, IEnumSTATDATA **ppenumAdvise);};
struct tagMONMSGSTRUCT {UINT cb;HWND hwndTo;DWORD dwTime;HANDLE hTask;UINT wMsg;WPARAM wParam;LPARAM lParam;DDEML_MSG_HOOK_DATA dmhd;};
struct tagWNDCLASSEXA {UINT cbSize;UINT style;WNDPROC lpfnWndProc;int cbClsExtra;int cbWndExtra;HINSTANCE hInstance;HICON hIcon;HCURSOR hCursor;HBRUSH hbrBackground;LPCSTR lpszMenuName;LPCSTR lpszClassName;HICON hIconSm;};
struct IOleCacheVtbl {HRESULT (__stdcall *QueryInterface)(IOleCache *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IOleCache *This);ULONG (__stdcall *Release)(IOleCache *This);HRESULT (__stdcall *Cache)(IOleCache *This, FORMATETC *pformatetc, DWORD advf, DWORD *pdwConnection);HRESULT (__stdcall *Uncache)(IOleCache *This, DWORD dwConnection);HRESULT (__stdcall *EnumCache)(IOleCache *This, IEnumSTATDATA **ppenumSTATDATA);HRESULT (__stdcall *InitCache)(IOleCache *This, IDataObject *pDataObject);HRESULT (__stdcall *SetData)(IOleCache *This, FORMATETC *pformatetc, STGMEDIUM *pmedium, BOOL fRelease);};
struct _WSAQuerySetA {DWORD dwSize;LPSTR lpszServiceInstanceName;LPGUID lpServiceClassId;LPWSAVERSION lpVersion;LPSTR lpszComment;DWORD dwNameSpace;LPGUID lpNSProviderId;LPSTR lpszContext;DWORD dwNumberOfProtocols;LPAFPROTOCOLS lpafpProtocols;LPSTR lpszQueryString;DWORD dwNumberOfCsAddrs;LPCSADDR_INFO lpcsaBuffer;DWORD dwOutputFlags;LPBLOB lpBlob;};
struct tagEMRPLGBLT {EMR emr;RECTL rclBounds;POINTL aptlDest[3];LONG xSrc;LONG ySrc;LONG cxSrc;LONG cySrc;XFORM xformSrc;COLORREF crBkColorSrc;DWORD iUsageSrc;DWORD offBmiSrc;DWORD cbBmiSrc;DWORD offBitsSrc;DWORD cbBitsSrc;LONG xMask;LONG yMask;DWORD iUsageMask;DWORD offBmiMask;DWORD cbBmiMask;DWORD offBitsMask;DWORD cbBitsMask;};
struct tagWNDCLASSA {UINT style;WNDPROC lpfnWndProc;int cbClsExtra;int cbWndExtra;HINSTANCE hInstance;HICON hIcon;HCURSOR hCursor;HBRUSH hbrBackground;LPCSTR lpszMenuName;LPCSTR lpszClassName;};
struct IStreamVtbl {HRESULT (__stdcall *QueryInterface)(IStream *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IStream *This);ULONG (__stdcall *Release)(IStream *This);HRESULT (__stdcall *Read)(IStream *This, void *pv, ULONG cb, ULONG *pcbRead);HRESULT (__stdcall *Write)(IStream *This, const void *pv, ULONG cb, ULONG *pcbWritten);HRESULT (__stdcall *Seek)(IStream *This, LARGE_INTEGER dlibMove, DWORD dwOrigin, ULARGE_INTEGER *plibNewPosition);HRESULT (__stdcall *SetSize)(IStream *This, ULARGE_INTEGER libNewSize);HRESULT (__stdcall *CopyTo)(IStream *This, IStream *pstm, ULARGE_INTEGER cb, ULARGE_INTEGER *pcbRead, ULARGE_INTEGER *pcbWritten);HRESULT (__stdcall *Commit)(IStream *This, DWORD grfCommitFlags);HRESULT (__stdcall *Revert)(IStream *This);HRESULT (__stdcall *LockRegion)(IStream *This, ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, DWORD dwLockType);HRESULT (__stdcall *UnlockRegion)(IStream *This, ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, DWORD dwLockType);HRESULT (__stdcall *Stat)(IStream *This, STATSTG *pstatstg, DWORD grfStatFlag);HRESULT (__stdcall *Clone)(IStream *This, IStream **ppstm);};
struct tagCONVINFO {DWORD cb;DWORD hUser;HCONV hConvPartner;HSZ hszSvcPartner;HSZ hszServiceReq;HSZ hszTopic;HSZ hszItem;UINT wFmt;UINT wType;UINT wStatus;UINT wConvst;UINT wLastError;HCONVLIST hConvList;CONVCONTEXT ConvCtxt;HWND hwnd;HWND hwndPartner;};
struct tagFINDREPLACEA {DWORD lStructSize;HWND hwndOwner;HINSTANCE hInstance;DWORD Flags;LPSTR lpstrFindWhat;LPSTR lpstrReplaceWith;WORD wFindWhatLen;WORD wReplaceWithLen;LPARAM lCustData;LPFRHOOKPROC lpfnHook;LPCSTR lpTemplateName;};
struct tagMONCBSTRUCT {UINT cb;DWORD dwTime;HANDLE hTask;DWORD dwRet;UINT wType;UINT wFmt;HCONV hConv;HSZ hsz1;HSZ hsz2;HDDEDATA hData;ULONG_PTR dwData1;ULONG_PTR dwData2;CONVCONTEXT cc;DWORD cbData;DWORD Data[8];};
struct _CERT_INFO {DWORD dwVersion;CRYPT_INTEGER_BLOB SerialNumber;CRYPT_ALGORITHM_IDENTIFIER SignatureAlgorithm;CERT_NAME_BLOB Issuer;FILETIME NotBefore;FILETIME NotAfter;CERT_NAME_BLOB Subject;CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;CRYPT_BIT_BLOB IssuerUniqueId;CRYPT_BIT_BLOB SubjectUniqueId;DWORD cExtension;PCERT_EXTENSION rgExtension;};
struct _CTL_INFO {DWORD dwVersion;CTL_USAGE SubjectUsage;CRYPT_DATA_BLOB ListIdentifier;CRYPT_INTEGER_BLOB SequenceNumber;FILETIME ThisUpdate;FILETIME NextUpdate;CRYPT_ALGORITHM_IDENTIFIER SubjectAlgorithm;DWORD cCTLEntry;PCTL_ENTRY rgCTLEntry;DWORD cExtension;PCERT_EXTENSION rgExtension;};
struct tagOFNA {DWORD lStructSize;HWND hwndOwner;HINSTANCE hInstance;LPCSTR lpstrFilter;LPSTR lpstrCustomFilter;DWORD nMaxCustFilter;DWORD nFilterIndex;LPSTR lpstrFile;DWORD nMaxFile;LPSTR lpstrFileTitle;DWORD nMaxFileTitle;LPCSTR lpstrInitialDir;LPCSTR lpstrTitle;DWORD Flags;WORD nFileOffset;WORD nFileExtension;LPCSTR lpstrDefExt;LPARAM lCustData;LPOFNHOOKPROC lpfnHook;LPCSTR lpTemplateName;void *pvReserved;DWORD dwReserved;DWORD FlagsEx;};
struct stat {dev_t st_dev;ino_t st_ino;mode_t st_mode;nlink_t st_nlink;uid_t st_uid;gid_t st_gid;dev_t st_rdev;off_t st_size;time_t st_atime;time_t st_mtime;time_t st_ctime;};
union _DEBUG_EVENT___1CA59A7E570F154F98F56770E4FE79B4 {EXCEPTION_DEBUG_INFO Exception;CREATE_THREAD_DEBUG_INFO CreateThread;CREATE_PROCESS_DEBUG_INFO CreateProcessInfo;EXIT_THREAD_DEBUG_INFO ExitThread;EXIT_PROCESS_DEBUG_INFO ExitProcess;LOAD_DLL_DEBUG_INFO LoadDll;UNLOAD_DLL_DEBUG_INFO UnloadDll;OUTPUT_DEBUG_STRING_INFO DebugString;RIP_INFO RipInfo;};
struct IPrintDialogCallbackVtbl {HRESULT (__stdcall *QueryInterface)(IPrintDialogCallback *This, const IID *const riid, LPVOID *ppvObj);ULONG (__stdcall *AddRef)(IPrintDialogCallback *This);ULONG (__stdcall *Release)(IPrintDialogCallback *This);HRESULT (__stdcall *InitDone)(IPrintDialogCallback *This);HRESULT (__stdcall *SelectionChange)(IPrintDialogCallback *This);HRESULT (__stdcall *HandleMessage)(IPrintDialogCallback *This, HWND hDlg, UINT uMsg, WPARAM wParam, LPARAM lParam, LRESULT *pResult);};
typedef BOOL (__stdcall *PFN_CMSG_GEN_ENCRYPT_KEY)(HCRYPTPROV *phCryptProv, PCRYPT_ALGORITHM_IDENTIFIER paiEncrypt, PVOID pvEncryptAuxInfo, PCERT_PUBLIC_KEY_INFO pPublicKeyInfo, PFN_CMSG_ALLOC pfnAlloc, HCRYPTKEY *phEncryptKey, PBYTE *ppbEncryptParameters, PDWORD pcbEncryptParameters);
struct IOleInPlaceSiteVtbl {HRESULT (__stdcall *QueryInterface)(IOleInPlaceSite *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IOleInPlaceSite *This);ULONG (__stdcall *Release)(IOleInPlaceSite *This);HRESULT (__stdcall *GetWindow)(IOleInPlaceSite *This, HWND *phwnd);HRESULT (__stdcall *ContextSensitiveHelp)(IOleInPlaceSite *This, BOOL fEnterMode);HRESULT (__stdcall *CanInPlaceActivate)(IOleInPlaceSite *This);HRESULT (__stdcall *OnInPlaceActivate)(IOleInPlaceSite *This);HRESULT (__stdcall *OnUIActivate)(IOleInPlaceSite *This);HRESULT (__stdcall *GetWindowContext)(IOleInPlaceSite *This, IOleInPlaceFrame **ppFrame, IOleInPlaceUIWindow **ppDoc, LPRECT lprcPosRect, LPRECT lprcClipRect, LPOLEINPLACEFRAMEINFO lpFrameInfo);HRESULT (__stdcall *Scroll)(IOleInPlaceSite *This, SIZE scrollExtant);HRESULT (__stdcall *OnUIDeactivate)(IOleInPlaceSite *This, BOOL fUndoable);HRESULT (__stdcall *OnInPlaceDeactivate)(IOleInPlaceSite *This);HRESULT (__stdcall *DiscardUndoState)(IOleInPlaceSite *This);HRESULT (__stdcall *DeactivateAndUndo)(IOleInPlaceSite *This);HRESULT (__stdcall *OnPosRectChange)(IOleInPlaceSite *This, LPCRECT lprcPosRect);};
struct _MIDL_STUB_MESSAGE {PRPC_MESSAGE RpcMsg;unsigned __int8 *Buffer;unsigned __int8 *BufferStart;unsigned __int8 *BufferEnd;unsigned __int8 *BufferMark;unsigned int BufferLength;unsigned int MemorySize;unsigned __int8 *Memory;int IsClient;int ReuseBuffer;unsigned __int8 *AllocAllNodesMemory;unsigned __int8 *AllocAllNodesMemoryEnd;int IgnoreEmbeddedPointers;unsigned __int8 *PointerBufferMark;unsigned __int8 fBufferValid;unsigned __int8 uFlags;ULONG_PTR MaxCount;unsigned int Offset;unsigned int ActualCount;void *(__stdcall *pfnAllocate)(size_t);void (__stdcall *pfnFree)(void *);unsigned __int8 *StackTop;unsigned __int8 *pPresentedType;unsigned __int8 *pTransmitType;handle_t SavedHandle;const struct _MIDL_STUB_DESC *StubDesc;struct _FULL_PTR_XLAT_TABLES *FullPtrXlatTables;unsigned int FullPtrRefId;unsigned int ulUnused1;__int32 fInDontFree : 1;__int32 fDontCallFreeInst : 1;__int32 fInOnlyParam : 1;__int32 fHasReturn : 1;__int32 fHasExtensions : 1;__int32 fHasNewCorrDesc : 1;__int32 fUnused : 10;unsigned int dwDestContext;void *pvDestContext;NDR_SCONTEXT *SavedContextHandles;int ParamNumber;struct IRpcChannelBuffer *pRpcChannelBuffer;PARRAY_INFO pArrayInfo;unsigned int *SizePtrCountArray;unsigned int *SizePtrOffsetArray;unsigned int *SizePtrLengthArray;void *pArgQueue;unsigned int dwStubPhase;PNDR_PIPE_DESC pPipeDesc;PNDR_ASYNC_MESSAGE pAsyncMsg;PNDR_CORRELATION_INFO pCorrInfo;unsigned __int8 *pCorrMemory;void *pMemoryList;ULONG_PTR w2kReserved[5];};
struct _SHELLEXECUTEINFOA {DWORD cbSize;ULONG fMask;HWND hwnd;LPCSTR lpVerb;LPCSTR lpFile;LPCSTR lpParameters;LPCSTR lpDirectory;int nShow;HINSTANCE hInstApp;LPVOID lpIDList;LPCSTR lpClass;HKEY hkeyClass;DWORD dwHotKey;union _SHELLEXECUTEINFOA___D915D6B2B775D926C11EEA321E8940B4 u;HANDLE hProcess;};
struct _PROPSHEETPAGEA {DWORD dwSize;DWORD dwFlags;HINSTANCE hInstance;union _PROPSHEETPAGEA___55841DA2EA6EA673F6C61AA531495E56 u;union _PROPSHEETPAGEA___E1AF9326B92748E8DAFEF2F13D81386D u2;LPCSTR pszTitle;DLGPROC pfnDlgProc;LPARAM lParam;LPFNPSPCALLBACKA pfnCallback;UINT *pcRefParent;LPCSTR pszHeaderTitle;LPCSTR pszHeaderSubTitle;};
struct IOleCache2Vtbl {HRESULT (__stdcall *QueryInterface)(IOleCache2 *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IOleCache2 *This);ULONG (__stdcall *Release)(IOleCache2 *This);HRESULT (__stdcall *Cache)(IOleCache2 *This, FORMATETC *pformatetc, DWORD advf, DWORD *pdwConnection);HRESULT (__stdcall *Uncache)(IOleCache2 *This, DWORD dwConnection);HRESULT (__stdcall *EnumCache)(IOleCache2 *This, IEnumSTATDATA **ppenumSTATDATA);HRESULT (__stdcall *InitCache)(IOleCache2 *This, IDataObject *pDataObject);HRESULT (__stdcall *SetData)(IOleCache2 *This, FORMATETC *pformatetc, STGMEDIUM *pmedium, BOOL fRelease);HRESULT (__stdcall *UpdateCache)(IOleCache2 *This, LPDATAOBJECT pDataObject, DWORD grfUpdf, LPVOID pReserved);HRESULT (__stdcall *DiscardCache)(IOleCache2 *This, DWORD dwDiscardOptions);};
struct tagPDEXA {DWORD lStructSize;HWND hwndOwner;HGLOBAL hDevMode;HGLOBAL hDevNames;HDC hDC;DWORD Flags;DWORD Flags2;DWORD ExclusionFlags;DWORD nPageRanges;DWORD nMaxPageRanges;LPPRINTPAGERANGE lpPageRanges;DWORD nMinPage;DWORD nMaxPage;DWORD nCopies;HINSTANCE hInstance;LPCSTR lpPrintTemplateName;LPUNKNOWN lpCallback;DWORD nPropertyPages;HPROPSHEETPAGE *lphPropertyPages;DWORD nStartPage;DWORD dwResultAction;};
union _wireSAFEARRAY_UNION____MIDL_IOleAutomationTypes_0001 {SAFEARR_BSTR BstrStr;SAFEARR_UNKNOWN UnknownStr;SAFEARR_DISPATCH DispatchStr;SAFEARR_VARIANT VariantStr;SAFEARR_BRECORD RecordStr;SAFEARR_HAVEIID HaveIidStr;BYTE_SIZEDARR ByteStr;WORD_SIZEDARR WordStr;DWORD_SIZEDARR LongStr;HYPER_SIZEDARR HyperStr;};
struct _9B80566C9ECE6A73A5F898405A50FFFF {DWORD dwStructSize;SCARDCONTEXT hSCardContext;HWND hwndOwner;DWORD dwFlags;LPCSTR lpstrTitle;LPCSTR lpstrSearchDesc;HICON hIcon;POPENCARD_SEARCH_CRITERIAA pOpenCardSearchCriteria;LPOCNCONNPROCA lpfnConnect;LPVOID pvUserData;DWORD dwShareMode;DWORD dwPreferredProtocols;LPSTR lpstrRdr;DWORD nMaxRdr;LPSTR lpstrCard;DWORD nMaxCard;DWORD dwActiveProtocol;SCARDHANDLE hCardHandle;};
struct tagPSDA {DWORD lStructSize;HWND hwndOwner;HGLOBAL hDevMode;HGLOBAL hDevNames;DWORD Flags;POINT ptPaperSize;RECT rtMinMargin;RECT rtMargin;HINSTANCE hInstance;LPARAM lCustData;LPPAGESETUPHOOK lpfnPageSetupHook;LPPAGEPAINTHOOK lpfnPagePaintHook;LPCSTR lpPageSetupTemplateName;HGLOBAL hPageSetupTemplate;};
struct tagPDA {DWORD lStructSize;HWND hwndOwner;HGLOBAL hDevMode;HGLOBAL hDevNames;HDC hDC;DWORD Flags;WORD nFromPage;WORD nToPage;WORD nMinPage;WORD nMaxPage;WORD nCopies;HINSTANCE hInstance;LPARAM lCustData;LPPRINTHOOKPROC lpfnPrintHook;LPSETUPHOOKPROC lpfnSetupHook;LPCSTR lpPrintTemplateName;LPCSTR lpSetupTemplateName;HGLOBAL hPrintTemplate;HGLOBAL hSetupTemplate;};
struct _FC03820C0C9B455049C143518E71A23B {DWORD dwStructSize;HWND hwndOwner;SCARDCONTEXT hSCardContext;LPSTR lpstrGroupNames;DWORD nMaxGroupNames;LPSTR lpstrCardNames;DWORD nMaxCardNames;LPCGUID rgguidInterfaces;DWORD cguidInterfaces;LPSTR lpstrRdr;DWORD nMaxRdr;LPSTR lpstrCard;DWORD nMaxCard;LPCSTR lpstrTitle;DWORD dwFlags;LPVOID pvUserData;DWORD dwShareMode;DWORD dwPreferredProtocols;DWORD dwActiveProtocol;LPOCNCONNPROCA lpfnConnect;LPOCNCHKPROC lpfnCheck;LPOCNDSCPROC lpfnDisconnect;SCARDHANDLE hCardHandle;};
struct IViewObjectVtbl {HRESULT (__stdcall *QueryInterface)(IViewObject *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IViewObject *This);ULONG (__stdcall *Release)(IViewObject *This);HRESULT (__stdcall *Draw)(IViewObject *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DVTARGETDEVICE *ptd, HDC hdcTargetDev, HDC hdcDraw, LPCRECTL lprcBounds, LPCRECTL lprcWBounds, BOOL (__stdcall *pfnContinue)(ULONG_PTR dwContinue), ULONG_PTR dwContinue);HRESULT (__stdcall *GetColorSet)(IViewObject *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DVTARGETDEVICE *ptd, HDC hicTargetDev, LOGPALETTE **ppColorSet);HRESULT (__stdcall *Freeze)(IViewObject *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DWORD *pdwFreeze);HRESULT (__stdcall *Unfreeze)(IViewObject *This, DWORD dwFreeze);HRESULT (__stdcall *SetAdvise)(IViewObject *This, DWORD aspects, DWORD advf, IAdviseSink *pAdvSink);HRESULT (__stdcall *GetAdvise)(IViewObject *This, DWORD *pAspects, DWORD *pAdvf, IAdviseSink **ppAdvSink);};
struct _MIDL_STUB_DESC {void *RpcInterfaceInformation;void *(__stdcall *pfnAllocate)(size_t);void (__stdcall *pfnFree)(void *);union _MIDL_STUB_DESC___5BCB627D3738D8B5DEACC268C24AE672 IMPLICIT_HANDLE_INFO;const NDR_RUNDOWN *apfnNdrRundownRoutines;const GENERIC_BINDING_ROUTINE_PAIR *aGenericBindingRoutinePairs;const EXPR_EVAL *apfnExprEval;const XMIT_ROUTINE_QUINTUPLE *aXmitQuintuple;const unsigned __int8 *pFormatTypes;int fCheckBounds;unsigned int Version;MALLOC_FREE_STRUCT *pMallocFreeStruct;int MIDLVersion;const COMM_FAULT_OFFSETS *CommFaultOffsets;const USER_MARSHAL_ROUTINE_QUADRUPLE *aUserMarshalQuadruple;const NDR_NOTIFY_ROUTINE *NotifyRoutineTable;ULONG_PTR mFlags;ULONG_PTR Reserved3;ULONG_PTR Reserved4;ULONG_PTR Reserved5;};
struct _PROPSHEETHEADERA {DWORD dwSize;DWORD dwFlags;HWND hwndParent;HINSTANCE hInstance;union _PROPSHEETHEADERA___E1AF9326B92748E8DAFEF2F13D81386D u;LPCSTR pszCaption;UINT nPages;union _PROPSHEETHEADERA___B2BC7FD01B1A93973E79FDE746C43987 u2;union _PROPSHEETHEADERA___FF46AEFBA3346A074103206F902E6DF5 u3;PFNPROPSHEETCALLBACK pfnCallback;union _PROPSHEETHEADERA___5F49E4A18E3DDA5E827B03567227027C u4;HPALETTE hplWatermark;union _PROPSHEETHEADERA___B1482D20F8877C2A38A76E0C7234BF42 u5;};
struct IViewObject2Vtbl {HRESULT (__stdcall *QueryInterface)(IViewObject2 *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IViewObject2 *This);ULONG (__stdcall *Release)(IViewObject2 *This);HRESULT (__stdcall *Draw)(IViewObject2 *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DVTARGETDEVICE *ptd, HDC hdcTargetDev, HDC hdcDraw, LPCRECTL lprcBounds, LPCRECTL lprcWBounds, BOOL (__stdcall *pfnContinue)(ULONG_PTR dwContinue), ULONG_PTR dwContinue);HRESULT (__stdcall *GetColorSet)(IViewObject2 *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DVTARGETDEVICE *ptd, HDC hicTargetDev, LOGPALETTE **ppColorSet);HRESULT (__stdcall *Freeze)(IViewObject2 *This, DWORD dwDrawAspect, LONG lindex, void *pvAspect, DWORD *pdwFreeze);HRESULT (__stdcall *Unfreeze)(IViewObject2 *This, DWORD dwFreeze);HRESULT (__stdcall *SetAdvise)(IViewObject2 *This, DWORD aspects, DWORD advf, IAdviseSink *pAdvSink);HRESULT (__stdcall *GetAdvise)(IViewObject2 *This, DWORD *pAspects, DWORD *pAdvf, IAdviseSink **ppAdvSink);HRESULT (__stdcall *GetExtent)(IViewObject2 *This, DWORD dwDrawAspect, LONG lindex, DVTARGETDEVICE *ptd, LPSIZEL lpsizel);};
struct tagCHOOSEFONTA {DWORD lStructSize;HWND hwndOwner;HDC hDC;LPLOGFONTA lpLogFont;INT iPointSize;DWORD Flags;COLORREF rgbColors;LPARAM lCustData;LPCFHOOKPROC lpfnHook;LPCSTR lpTemplateName;HINSTANCE hInstance;LPSTR lpszStyle;WORD nFontType;WORD ___MISSING_ALIGNMENT__;INT nSizeMin;INT nSizeMax;};
union _wireVARIANT___212E7A64C013056588B5F2DD09C0E9C5 {LONG lVal;BYTE bVal;SHORT iVal;FLOAT fltVal;DOUBLE dblVal;VARIANT_BOOL boolVal;SCODE scode;CY cyVal;DATE date;wireBSTR bstrVal;IUnknown *punkVal;IDispatch *pdispVal;wirePSAFEARRAY parray;wireBRECORD brecVal;BYTE *pbVal;SHORT *piVal;LONG *plVal;FLOAT *pfltVal;DOUBLE *pdblVal;VARIANT_BOOL *pboolVal;SCODE *pscode;CY *pcyVal;DATE *pdate;wireBSTR *pbstrVal;IUnknown **ppunkVal;IDispatch **ppdispVal;wirePSAFEARRAY *pparray;wireVARIANT *pvarVal;CHAR cVal;USHORT uiVal;ULONG ulVal;INT intVal;UINT uintVal;DECIMAL decVal;DECIMAL *pdecVal;CHAR *pcVal;USHORT *puiVal;ULONG *pulVal;INT *pintVal;UINT *puintVal;};
union _CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO___76A3B0E8FFB5FF4FE868B027B0FA21D8 {HCRYPTKEY hKeyEncryptionKey;void *pvKeyEncryptionKey;};
union _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA___76A3B0E8FFB5FF4FE868B027B0FA21D8 {HCRYPTKEY hKeyEncryptionKey;void *pvKeyEncryptionKey;};
union tagTYPEDESC___AC700B6542D8071E244CADABF8A32897 {struct tagTYPEDESC *lptdesc;struct tagARRAYDESC *lpadesc;HREFTYPE hreftype;};
struct _284877062F9D14F112F3A0D6BC9583DD {DWORDLONG MaximumSize;DWORDLONG AllocationDelta;};
typedef BOOLEAN *PSECURITY_CONTEXT_TRACKING_MODE;
typedef BOOLEAN SECURITY_CONTEXT_TRACKING_MODE;
typedef PTOP_LEVEL_EXCEPTION_FILTER LPTOP_LEVEL_EXCEPTION_FILTER;
typedef LUID_AND_ATTRIBUTES_ARRAY *PLUID_AND_ATTRIBUTES_ARRAY;
typedef SID_AND_ATTRIBUTES_ARRAY *PSID_AND_ATTRIBUTES_ARRAY;
struct _DECRYPTION_STATUS_BUFFER {BOOLEAN NoEncryptedStreams;};
typedef void __stdcall RPCNOTIFICATION_ROUTINE(struct _RPC_ASYNC_STATE *pAsync, void *Context, RPC_ASYNC_EVENT Event);
struct _FILE_SET_SPARSE_BUFFER {BOOLEAN SetSparse;};
struct _PRINTPROCESSOR_INFO_1A {LPSTR pName;};
struct _XMIT_ROUTINE_QUINTUPLE {XMIT_HELPER_ROUTINE pfnTranslateToXmit;XMIT_HELPER_ROUTINE pfnTranslateFromXmit;XMIT_HELPER_ROUTINE pfnFreeXmit;XMIT_HELPER_ROUTINE pfnFreeInst;};
typedef PTHREAD_START_ROUTINE LPTHREAD_START_ROUTINE;
struct _PREVENT_MEDIA_REMOVAL {BOOLEAN PreventMediaRemoval;};
typedef PFIBER_START_ROUTINE LPFIBER_START_ROUTINE;
struct _CRYPT_OID_FUNC_ENTRY {LPCSTR pszOID;void *pvFuncAddr;};
struct _SERVICE_DESCRIPTIONA {LPSTR lpDescription;};
struct _UNIVERSAL_NAME_INFOA {LPSTR lpUniversalName;};
struct _RPC_TRANSFER_SYNTAX {UUID Uuid;unsigned __int16 VersMajor;unsigned __int16 VersMinor;};
struct _TOKEN_PRIMARY_GROUP {PSID PrimaryGroup;};
typedef WAITORTIMERCALLBACKFUNC WAITORTIMERCALLBACK;
struct _RPC_BINDING_VECTOR {unsigned int Count;RPC_BINDING_HANDLE BindingH[1];};
struct _TOKEN_DEFAULT_DACL {PACL DefaultDacl;};
typedef int (__stdcall *EDITWORDBREAKPROCA)(LPSTR lpch, int ichCurrent, int cch, int code);
typedef PEXCEPTION_RECORD LPEXCEPTION_RECORD;
struct _DATATYPES_INFO_1A {LPSTR pName;};
struct _REMOTE_NAME_INFOA {LPSTR lpUniversalName;LPSTR lpConnectionName;LPSTR lpRemainingPath;};
typedef EDITWORDBREAKPROCA EDITWORDBREAKPROC;
struct _PROVIDOR_INFO_1A {LPSTR pName;LPSTR pEnvironment;LPSTR pDLLName;};
struct _PROVIDOR_INFO_2A {LPSTR pOrder;};
typedef NAMEENUMPROCA DESKTOPENUMPROCA;
typedef HRESULT (__stdcall *LPFNCANUNLOADNOW)();
struct _GENERIC_MAPPING {ACCESS_MASK GenericRead;ACCESS_MASK GenericWrite;ACCESS_MASK GenericExecute;ACCESS_MASK GenericAll;};
struct _MONITOR_INFO_1A {LPSTR pName;};
struct _MONITOR_INFO_2A {LPSTR pName;LPSTR pEnvironment;LPSTR pDLLName;};
struct tagREGISTERWORDA {LPSTR lpReading;LPSTR lpWord;};
typedef STGMEDIUM ASYNC_STGMEDIUM;
typedef DESKTOPENUMPROCA DESKTOPENUMPROC;
typedef LPCRECT LPCBORDERWIDTHS;
typedef NAMEENUMPROCA WINSTAENUMPROCA;
struct _DRIVER_INFO_1A {LPSTR pName;};
struct _FLAG_STGMEDIUM {int ContextFlags;int fPassOwnership;STGMEDIUM Stgmed;};
struct _SHNAMEMAPPINGA {LPSTR pszOldPath;LPSTR pszNewPath;int cchOldPath;int cchNewPath;};
struct _userCLIPFORMAT {int fContext;union _userCLIPFORMAT____MIDL_IWinTypes_0001 u;};
struct tagHELPWININFOW {int wStructSize;int x;int y;int dx;int dy;int wMax;WCHAR rgchMember[2];};
typedef SCARDCONTEXT *LPSCARDCONTEXT;
typedef TIMECALLBACK *LPTIMECALLBACK;
typedef PROPENUMPROCEXA PROPENUMPROCEX;
typedef WINSTAENUMPROCA WINSTAENUMPROC;
struct _tagStartParam {IID iid;IBindCtx *pIBindCtx;IUnknown *pItf;};
typedef OLDFONTENUMPROCA FONTENUMPROCA;
typedef OLDFONTENUMPROCW FONTENUMPROCW;
typedef DRVCALLBACK *LPDRVCALLBACK;
typedef SCARDHANDLE *LPSCARDHANDLE;
typedef QUERYHANDLER *PQUERYHANDLER;
typedef SCARDCONTEXT *PSCARDCONTEXT;
struct _PORT_INFO_1A {LPSTR pName;};
typedef FONTENUMPROCA FONTENUMPROC;
typedef CLIPFORMAT *LPCLIPFORMAT;
typedef DRVCALLBACK MIDICALLBACK;
typedef ACCESS_MASK *PACCESS_MASK;
typedef DRVCALLBACK *PDRVCALLBACK;
typedef PROPENUMPROCA PROPENUMPROC;
typedef SCARDHANDLE *PSCARDHANDLE;
typedef DRVCALLBACK WAVECALLBACK;
struct _DOC_INFO_1A {LPSTR pDocName;LPSTR pOutputFile;LPSTR pDatatype;};
struct _TOKEN_OWNER {PSID Owner;};
struct _UUID_VECTOR {unsigned int Count;UUID *Uuid[1];};
typedef void (__stdcall *LINEDDAPROC)(int, int, LPARAM);
typedef OLERENDER *LPOLERENDER;
typedef OLEUPDATE *LPOLEUPDATE;
typedef STGMEDIUM *LPSTGMEDIUM;
typedef HDEVNOTIFY *PHDEVNOTIFY;
typedef KSPIN_LOCK *PKSPIN_LOCK;
typedef TOKEN_TYPE *PTOKEN_TYPE;
typedef MMIOPROC *LPMMIOPROC;
typedef DWORDLONG *PDWORDLONG;
typedef OLEUPDATE *POLEUPDATE;
struct _RPC_IF_ID {UUID Uuid;unsigned __int16 VersMajor;unsigned __int16 VersMinor;};
typedef PCONTEXT LPCONTEXT;
typedef PATTERN *LPPATTERN;
typedef PATTERN *NPPATTERN;
typedef HGLOBAL HOLEMENU;
typedef DISPID MEMBERID;
typedef BOOLEAN *PBOOLEAN;
typedef PATTERN *PPATTERN;
typedef CLSID *LPCLSID;
typedef LPCSTR LPCTSTR;
typedef const WCHAR *LPCWSTR;
typedef FMTID *LPFMTID;
typedef WCHAR OLECHAR;
struct in_addr {union in_addr___C13EC994467D6E67044F092615EC7EA9 S_un;};
typedef const WCHAR *LPCWCH;
typedef LPSTR LPTSTR;
typedef WCHAR *LPWSTR;
typedef WCHAR *NWPSTR;
typedef const WCHAR *PCWSTR;
typedef SCODE *PSCODE;
typedef WCHAR *PWCHAR;
typedef IID *LPIID;
typedef WCHAR *LPWCH;
typedef const WCHAR *PCWCH;
typedef WCHAR *PWSTR;
typedef OLECHAR *BSTR;
typedef OLECHAR **SNB;
union _CERT_SYSTEM_STORE_RELOCATE_PARA___1F74DEB47E7608C03F5763A4862C6217 {void *pvSystemStore;LPCSTR pszSystemStore;LPCWSTR pwszSystemStore;};
union _DEVICE_MEDIA_INFO___2DD95E35CD64FCF2582B874AE4A78983 {struct _DEVICE_MEDIA_INFO___2DD95E35CD64FCF2582B874AE4A78983___B282398C81B6FF20F165753A3DA70A52 DiskInfo;struct _DEVICE_MEDIA_INFO___2DD95E35CD64FCF2582B874AE4A78983___B282398C81B6FF20F165753A3DA70A52 RemovableDiskInfo;struct _DEVICE_MEDIA_INFO___2DD95E35CD64FCF2582B874AE4A78983___723F4108713078BC94E60AB72DA19CAC TapeInfo;};
union _PROPSHEETHEADERW___0FB566F30614F599529D00140F4CD87D {HICON hIcon;LPCWSTR pszIcon;};
union _PROPSHEETHEADERW___6475730AE6DAD1B8D6E46E57DCE1E457 {UINT nStartPage;LPCWSTR pStartPage;};
union _PROPSHEETHEADERW___9C028D56AB90D7CB2840D31BA61B8779 {HBITMAP hbmHeader;LPCWSTR pszbmHeader;};
union _PROPSHEETHEADERW___C635E94935336589E496FC759198B86F {HBITMAP hbmWatermark;LPCWSTR pszbmWatermark;};
union _PROPSHEETPAGEW___0FB566F30614F599529D00140F4CD87D {HICON hIcon;LPCWSTR pszIcon;};
union _PROPSHEETPAGEW___516F7AC5631E67C03EDCA9BDA4E87AED {LPCWSTR pszTemplate;LPCDLGTEMPLATE pResource;};
struct _CERT_REGISTRY_STORE_CLIENT_GPT_PARA {HKEY hKeyBase;LPWSTR pwszRegPath;};
struct _CERT_POLICY_QUALIFIER_USER_NOTICE {CERT_POLICY_QUALIFIER_NOTICE_REFERENCE *pNoticeReference;LPWSTR pszDisplayText;};
struct _CERT_REGISTRY_STORE_ROAMING_PARA {HKEY hKey;LPWSTR pwszStoreDirectory;};
struct _CRYPT_ASYNC_RETRIEVAL_COMPLETION {PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC pfnCompletion;LPVOID pvCompletion;};
struct _CERT_SYSTEM_STORE_RELOCATE_PARA {_CERT_SYSTEM_STORE_RELOCATE_PARA___F6B54AA619DA848AA2A21334D34667B4 __anonymous0;_CERT_SYSTEM_STORE_RELOCATE_PARA___1F74DEB47E7608C03F5763A4862C6217 __anonymous1;};
struct _ENUM_SERVICE_STATUS_PROCESSW {LPWSTR lpServiceName;LPWSTR lpDisplayName;SERVICE_STATUS_PROCESS ServiceStatusProcess;};
struct _CRYPT_PASSWORD_CREDENTIALSW {DWORD cbSize;LPWSTR pszUsername;LPWSTR pszPassword;};
struct _CMSG_RECIPIENT_ENCODE_INFO {DWORD dwRecipientChoice;_CMSG_RECIPIENT_ENCODE_INFO___30055397BBF277E66F5B4ACE1878FAEA __anonymous0;};
struct _QUERY_SERVICE_LOCK_STATUSW {DWORD fIsLocked;LPWSTR lpLockOwner;DWORD dwLockDuration;};
typedef void (__stdcall *LPSERVICE_MAIN_FUNCTIONW)(DWORD dwNumServicesArgs, LPWSTR *lpServiceArgVectors);
struct _CMSG_CMS_RECIPIENT_INFO {DWORD dwRecipientChoice;_CMSG_CMS_RECIPIENT_INFO___341F1DACD4668580119084EDA262D7AC __anonymous0;};
struct tagMCI_VD_ESCAPE_PARMSW {DWORD dwCallback;LPCWSTR lpstrCommand;};
struct _QUERY_SERVICE_CONFIGW {DWORD dwServiceType;DWORD dwStartType;DWORD dwErrorControl;LPWSTR lpBinaryPathName;LPWSTR lpLoadOrderGroup;DWORD dwTagId;LPWSTR lpDependencies;LPWSTR lpServiceStartName;LPWSTR lpDisplayName;};
struct _ENUM_SERVICE_STATUSW {LPWSTR lpServiceName;LPWSTR lpDisplayName;SERVICE_STATUS ServiceStatus;};
struct _SERVICE_TABLE_ENTRYW {LPWSTR lpServiceName;LPSERVICE_MAIN_FUNCTIONW lpServiceProc;};
struct _wireSAFEARRAY_UNION {ULONG sfType;union _wireSAFEARRAY_UNION____MIDL_IOleAutomationTypes_0001 u;};
struct tagMOUSEHOOKSTRUCTEX {tagMOUSEHOOKSTRUCT __anonymous0;DWORD mouseData;};
typedef BOOL (__stdcall *CODEPAGE_ENUMPROCW)(LPWSTR);
struct tagMCI_INFO_PARMSW {DWORD dwCallback;LPWSTR lpstrReturn;DWORD dwRetSize;};
struct tagMCI_LOAD_PARMSW {DWORD dwCallback;LPCWSTR lpfilename;};
struct tagMCI_SAVE_PARMSW {DWORD dwCallback;LPCWSTR lpfilename;};
typedef BOOL (__stdcall *CALINFO_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall *DATEFMT_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall *TIMEFMT_ENUMPROCW)(LPWSTR);
struct _CMSG_STREAM_INFO {DWORD cbContent;PFN_CMSG_STREAM_OUTPUT pfnStreamOutput;void *pvArg;};
struct tagMONITORINFOEXA {tagMONITORINFO __anonymous0;CHAR szDevice[32];};
struct tagMONITORINFOEXW {tagMONITORINFO __anonymous0;WCHAR szDevice[32];};
typedef BOOL (__stdcall *LOCALE_ENUMPROCW)(LPWSTR);
struct _CRYPT_URL_ARRAY {DWORD cUrl;LPWSTR *rgwszUrl;};
struct _PRINTER_INFO_1W {DWORD Flags;LPWSTR pDescription;LPWSTR pName;LPWSTR pComment;};
struct _PRINTER_INFO_4W {LPWSTR pPrinterName;LPWSTR pServerName;DWORD Attributes;};
struct _PRINTER_INFO_5W {LPWSTR pPrinterName;LPWSTR pPortName;DWORD Attributes;DWORD DeviceNotSelectedTimeout;DWORD TransmissionRetryTimeout;};
struct _PRINTER_INFO_7W {LPWSTR pszObjectGUID;DWORD dwAction;};
struct tagDRVCONFIGINFO {DWORD dwDCISize;LPCWSTR lpszDCISectionName;LPCWSTR lpszDCIAliasName;};
struct DRVCONFIGINFOEX {DWORD dwDCISize;LPCWSTR lpszDCISectionName;LPCWSTR lpszDCIAliasName;DWORD dnDevNode;};
struct _ADDJOB_INFO_1W {LPWSTR Path;DWORD JobId;};
struct _DRIVER_INFO_2W {DWORD cVersion;LPWSTR pName;LPWSTR pEnvironment;LPWSTR pDriverPath;LPWSTR pDataFile;LPWSTR pConfigFile;};
struct _DRIVER_INFO_3W {DWORD cVersion;LPWSTR pName;LPWSTR pEnvironment;LPWSTR pDriverPath;LPWSTR pDataFile;LPWSTR pConfigFile;LPWSTR pHelpFile;LPWSTR pDependentFiles;LPWSTR pMonitorName;LPWSTR pDefaultDataType;};
struct _DRIVER_INFO_4W {DWORD cVersion;LPWSTR pName;LPWSTR pEnvironment;LPWSTR pDriverPath;LPWSTR pDataFile;LPWSTR pConfigFile;LPWSTR pHelpFile;LPWSTR pDependentFiles;LPWSTR pMonitorName;LPWSTR pDefaultDataType;LPWSTR pszzPreviousNames;};
struct _DRIVER_INFO_5W {DWORD cVersion;LPWSTR pName;LPWSTR pEnvironment;LPWSTR pDriverPath;LPWSTR pDataFile;LPWSTR pConfigFile;DWORD dwDriverAttributes;DWORD dwConfigVersion;DWORD dwDriverVersion;};
struct _INPUT_RECORD {WORD EventType;union _INPUT_RECORD___56C9F45CD5AB058B1B4FD5A9AB9216C4 Event;};
struct _NETRESOURCEW {DWORD dwScope;DWORD dwType;DWORD dwDisplayType;DWORD dwUsage;LPWSTR lpLocalName;LPWSTR lpRemoteName;LPWSTR lpComment;LPWSTR lpProvider;};
struct _PORT_INFO_2W {LPWSTR pPortName;LPWSTR pMonitorName;LPWSTR pDescription;DWORD fPortType;DWORD Reserved;};
struct _PORT_INFO_3W {DWORD dwStatus;LPWSTR pszStatus;DWORD dwSeverity;};
struct _currencyfmtW {UINT NumDigits;UINT LeadingZero;UINT Grouping;LPWSTR lpDecimalSep;LPWSTR lpThousandSep;UINT NegativeOrder;UINT PositiveOrder;LPWSTR lpCurrencySymbol;};
typedef int (__stdcall *ICMENUMPROCW)(LPWSTR, LPARAM);
typedef DWORD __stdcall PM_OPEN_PROC(LPWSTR);
struct _DEBUG_EVENT {DWORD dwDebugEventCode;DWORD dwProcessId;DWORD dwThreadId;union _DEBUG_EVENT___1CA59A7E570F154F98F56770E4FE79B4 u;};
struct _DOC_INFO_2W {LPWSTR pDocName;LPWSTR pOutputFile;LPWSTR pDatatype;DWORD dwMode;DWORD JobId;};
struct _DOC_INFO_3W {LPWSTR pDocName;LPWSTR pOutputFile;LPWSTR pDatatype;DWORD dwFlags;};
struct tagPARAMDATA {OLECHAR *szName;VARTYPE vt;};
struct _GDI_OBJECT {DWORD ObjectType;union _GDI_OBJECT____MIDL_IAdviseSink_0002 u;};
struct _numberfmtW {UINT NumDigits;UINT LeadingZero;UINT Grouping;LPWSTR lpDecimalSep;LPWSTR lpThousandSep;UINT NegativeOrder;};
struct sockaddr_in {__int16 sin_family;u_short sin_port;struct in_addr sin_addr;char sin_zero[8];};
struct tagCALPWSTR {ULONG cElems;LPWSTR *pElems;};
struct tagTYPEDESC {tagTYPEDESC___AC700B6542D8071E244CADABF8A32897 __anonymous0;VARTYPE vt;};
struct _xml_error {unsigned int _nLine;BSTR _pchBuf;unsigned int _cchBuf;unsigned int _ich;BSTR _pszFound;BSTR _pszExpected;DWORD _reserved1;DWORD _reserved2;};
struct mmtime_tag {UINT wType;union mmtime_tag___532DCF0E9B9A2B0A020BD11490F25514 u;};
struct _DOCINFOW {int cbSize;LPCWSTR lpszDocName;LPCWSTR lpszOutput;LPCWSTR lpszDatatype;DWORD fwType;};
struct tagCABSTR {ULONG cElems;BSTR *pElems;};
struct tagINPUT {DWORD type;tagINPUT___72687D791E298366090936F57062F9D6 __anonymous0;};
typedef BOOL (__stdcall *PFN_CERT_ENUM_SYSTEM_STORE_LOCATION)(LPCWSTR pwszStoreLocation, DWORD dwFlags, void *pvReserved, void *pvArg);
struct tagSOLE_AUTHENTICATION_SERVICE {DWORD dwAuthnSvc;DWORD dwAuthzSvc;OLECHAR *pPrincipalName;HRESULT hr;};
struct _CRYPTPROTECT_PROMPTSTRUCT {DWORD cbSize;DWORD dwPromptFlags;HWND hwndApp;LPCWSTR szPrompt;};
struct _CRYPT_VERIFY_MESSAGE_PARA {DWORD cbSize;DWORD dwMsgAndCertEncodingType;HCRYPTPROV hCryptProv;PFN_CRYPT_GET_SIGNER_CERTIFICATE pfnGetSignerCertificate;void *pvGetArg;};
struct _CERT_KEYGEN_REQUEST_INFO {DWORD dwVersion;CERT_PUBLIC_KEY_INFO SubjectPublicKeyInfo;LPWSTR pwszChallengeString;};
struct _CREATE_THREAD_DEBUG_INFO {HANDLE hThread;LPVOID lpThreadLocalBase;LPTHREAD_START_ROUTINE lpStartAddress;};
struct _SERVICE_FAILURE_ACTIONSW {DWORD dwResetPeriod;LPWSTR lpRebootMsg;LPWSTR lpCommand;DWORD cActions;SC_ACTION *lpsaActions;};
struct _PERF_COUNTER_DEFINITION {DWORD ByteLength;DWORD CounterNameTitleIndex;LPWSTR CounterNameTitle;DWORD CounterHelpTitleIndex;LPWSTR CounterHelpTitle;LONG DefaultScale;DWORD DetailLevel;DWORD CounterType;DWORD CounterSize;DWORD CounterOffset;};
struct tagMCI_OVLY_LOAD_PARMSW {DWORD dwCallback;LPCWSTR lpfilename;RECT rc;};
struct tagMCI_OVLY_SAVE_PARMSW {DWORD dwCallback;LPCWSTR lpfilename;RECT rc;};
struct tagMCI_WAVE_OPEN_PARMSW {DWORD dwCallback;MCIDEVICEID wDeviceID;LPCWSTR lpstrDeviceType;LPCWSTR lpstrElementName;LPCWSTR lpstrAlias;DWORD dwBufferSeconds;};
typedef int (__stdcall *REGISTERWORDENUMPROCW)(LPCWSTR, DWORD, LPCWSTR, LPVOID);
struct _PRINTER_ENUM_VALUESW {LPWSTR pValueName;DWORD cbValueName;DWORD dwType;LPBYTE pData;DWORD cbData;};
struct tagMCI_SYSINFO_PARMSW {DWORD dwCallback;LPWSTR lpstrReturn;DWORD dwRetSize;DWORD dwNumber;UINT wDeviceType;};
typedef UINT (__stdcall *PFNRECONCILEPROFILEW)(LPCWSTR pszCentralFile, LPCWSTR pszLocalFile, DWORD dwFlags);
typedef BOOL (__stdcall *UILANGUAGE_ENUMPROCW)(LPWSTR, LONG_PTR);
struct _CRYPT_KEY_PROV_INFO {LPWSTR pwszContainerName;LPWSTR pwszProvName;DWORD dwProvType;DWORD dwFlags;DWORD cProvParam;PCRYPT_KEY_PROV_PARAM rgProvParam;DWORD dwKeySpec;};
typedef BOOL (__stdcall *CALINFO_ENUMPROCEXW)(LPWSTR, CALID);
typedef BOOL (__stdcall *DATEFMT_ENUMPROCEXW)(LPWSTR, CALID);
struct _CRYPT_CSP_PROVIDER {DWORD dwKeySpec;LPWSTR pwszProviderName;CRYPT_BIT_BLOB Signature;};
typedef UINT (__stdcall *PFNGETPROFILEPATHW)(LPCWSTR pszUsername, LPWSTR pszBuffer, UINT cbBuffer);
struct _PRINTER_DEFAULTSW {LPWSTR pDatatype;LPDEVMODEW pDevMode;ACCESS_MASK DesiredAccess;};
struct tagMCI_OPEN_PARMSW {DWORD dwCallback;MCIDEVICEID wDeviceID;LPCWSTR lpstrDeviceType;LPCWSTR lpstrElementName;LPCWSTR lpstrAlias;};
union _IMAGE_AUX_SYMBOL {struct _IMAGE_AUX_SYMBOL___23DFC5686F0E6924815C955A999B653C Sym;struct _IMAGE_AUX_SYMBOL___C84595816809DB9D1AC5ADB82092AE34 File;struct _IMAGE_AUX_SYMBOL___0ECF6FFE4CB91F7643C274EBA09FDD11 Section;};
struct _WSANSClassInfoW {LPWSTR lpszName;DWORD dwNameSpace;DWORD dwValueType;DWORD dwValueSize;LPVOID lpValue;};
struct _tagCODEBASEHOLD {ULONG cbSize;LPWSTR szDistUnit;LPWSTR szCodeBase;DWORD dwVersionMS;DWORD dwVersionLS;DWORD dwStyle;};
struct _tagSOFTDISTINFO {ULONG cbSize;DWORD dwFlags;DWORD dwAdState;LPWSTR szTitle;LPWSTR szAbstract;LPWSTR szHREF;DWORD dwInstalledVersionMS;DWORD dwInstalledVersionLS;DWORD dwUpdateVersionMS;DWORD dwUpdateVersionLS;DWORD dwAdvertisedVersionMS;DWORD dwAdvertisedVersionLS;DWORD dwReserved;};
struct tagHIGHCONTRASTW {UINT cbSize;DWORD dwFlags;LPWSTR lpszDefaultScheme;};
struct tagStorageLayout {DWORD LayoutType;OLECHAR *pwcsElementName;LARGE_INTEGER cOffset;LARGE_INTEGER cBytes;};
struct _DISCDLGSTRUCTW {DWORD cbStructure;HWND hwndOwner;LPWSTR lpLocalName;LPWSTR lpRemoteName;DWORD dwFlags;};
struct tagSOUNDSENTRYW {UINT cbSize;DWORD dwFlags;DWORD iFSTextEffect;DWORD iFSTextEffectMSec;DWORD iFSTextEffectColorBits;DWORD iFSGrafEffect;DWORD iFSGrafEffectMSec;DWORD iFSGrafEffectColor;DWORD iWindowsEffect;DWORD iWindowsEffectMSec;LPWSTR lpszWindowsEffectDLL;DWORD iWindowsEffectOrdinal;};
struct tagSERIALKEYSW {UINT cbSize;DWORD dwFlags;LPWSTR lpszActivePort;LPWSTR lpszPort;UINT iBaudRate;UINT iPortState;UINT iActive;};
typedef BOOL (__stdcall *NAMEENUMPROCW)(LPWSTR, LPARAM);
struct _COSERVERINFO {DWORD dwReserved1;LPWSTR pwszName;COAUTHINFO *pAuthInfo;DWORD dwReserved2;};
struct provider_info {PQUERYHANDLER pi_R0_1val;PQUERYHANDLER pi_R0_allvals;PQUERYHANDLER pi_R3_1val;PQUERYHANDLER pi_R3_allvals;DWORD pi_flags;LPVOID pi_key_context;};
struct tagMIXERLINEA {DWORD cbStruct;DWORD dwDestination;DWORD dwSource;DWORD dwLineID;DWORD fdwLine;DWORD dwUser;DWORD dwComponentType;DWORD cChannels;DWORD cConnections;DWORD cControls;CHAR szShortName[16];CHAR szName[64];struct tagMIXERLINEA___3F59E0B102B49F482C4A8B1440A7891E Target;};
struct tagMIXERLINEW {DWORD cbStruct;DWORD dwDestination;DWORD dwSource;DWORD dwLineID;DWORD fdwLine;DWORD dwUser;DWORD dwComponentType;DWORD cChannels;DWORD cConnections;DWORD cControls;WCHAR szShortName[16];WCHAR szName[64];struct tagMIXERLINEW___9A19AF7771B1B870F9962D397CED60DA Target;};
struct _JOB_INFO_1W {DWORD JobId;LPWSTR pPrinterName;LPWSTR pMachineName;LPWSTR pUserName;LPWSTR pDocument;LPWSTR pDatatype;LPWSTR pStatus;DWORD Status;DWORD Priority;DWORD Position;DWORD TotalPages;DWORD PagesPrinted;SYSTEMTIME Submitted;};
struct _wireVARIANT {DWORD clSize;DWORD rpcReserved;USHORT vt;USHORT wReserved1;USHORT wReserved2;USHORT wReserved3;_wireVARIANT___212E7A64C013056588B5F2DD09C0E9C5 __anonymous0;};
struct tagPOLYTEXTW {int x;int y;UINT n;LPCWSTR lpstr;UINT uiFlags;RECT rcl;int *pdx;};
struct _COAUTHINFO {DWORD dwAuthnSvc;DWORD dwAuthzSvc;LPWSTR pwszServerPrincName;DWORD dwAuthnLevel;DWORD dwImpersonationLevel;COAUTHIDENTITY *pAuthIdentityData;DWORD dwCapabilities;};
struct _OFNOTIFYW {NMHDR hdr;LPOPENFILENAMEW lpOFN;LPWSTR pszFile;};
struct value_entW {LPWSTR ve_valuename;DWORD ve_valuelen;DWORD_PTR ve_valueptr;DWORD ve_type;};
struct _CPS_URLS {LPWSTR pszURL;CRYPT_ALGORITHM_IDENTIFIER *pAlgorithm;CRYPT_DATA_BLOB *pDigest;};
struct pvalueW {LPWSTR pv_valuename;int pv_valuelen;LPVOID pv_value_context;DWORD pv_type;};
struct _B80B7D01E79FADDB4AAC58DE22BC823F {LPCWSTR szReader;LPVOID pvUserData;DWORD dwCurrentState;DWORD dwEventState;DWORD cbAtr;BYTE rgbAtr[36];};
struct _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA {DWORD cbSize;HCRYPTPROV hCryptProv;PCMSG_MAIL_LIST_RECIPIENT_INFO pMailList;DWORD dwRecipientIndex;DWORD dwKeyChoice;_CMSG_CTRL_MAIL_LIST_DECRYPT_PARA___76A3B0E8FFB5FF4FE868B027B0FA21D8 __anonymous0;};
typedef BOOL (__stdcall *PFN_CERT_ENUM_PHYSICAL_STORE)(const void *pvSystemStore, DWORD dwFlags, LPCWSTR pwszStoreName, PCERT_PHYSICAL_STORE_INFO pStoreInfo, void *pvReserved, void *pvArg);
struct _ENCRYPTION_CERTIFICATE_HASH {DWORD cbTotalLength;SID *pUserSid;PEFS_HASH_BLOB pHash;LPWSTR lpDisplayInformation;};
struct _SECURITY_QUALITY_OF_SERVICE {DWORD Length;SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;SECURITY_CONTEXT_TRACKING_MODE ContextTrackingMode;BOOLEAN EffectiveOnly;};
struct _CRYPT_PKCS8_IMPORT_PARAMS {CRYPT_DIGEST_BLOB PrivateKey;PCRYPT_RESOLVE_HCRYPTPROV_FUNC pResolvehCryptProvFunc;LPVOID pVoidResolveFunc;PCRYPT_DECRYPT_PRIVATE_KEY_FUNC pDecryptPrivateKeyFunc;LPVOID pVoidDecryptFunc;};
struct _CERT_POLICY95_QUALIFIER1 {LPWSTR pszPracticesReference;LPSTR pszNoticeIdentifier;LPSTR pszNSINoticeIdentifier;DWORD cCPSURLs;CPS_URLS *rgCPSURLs;};
struct tagMCI_ANIM_WINDOW_PARMSW {DWORD dwCallback;HWND hWnd;UINT nCmdShow;LPCWSTR lpstrText;};
struct tagMCI_OVLY_WINDOW_PARMSW {DWORD dwCallback;HWND hWnd;UINT nCmdShow;LPCWSTR lpstrText;};
struct tagMCI_ANIM_OPEN_PARMSW {DWORD dwCallback;MCIDEVICEID wDeviceID;LPCWSTR lpstrDeviceType;LPCWSTR lpstrElementName;LPCWSTR lpstrAlias;DWORD dwStyle;HWND hWndParent;};
struct tagMCI_OVLY_OPEN_PARMSW {DWORD dwCallback;MCIDEVICEID wDeviceID;LPCWSTR lpstrDeviceType;LPCWSTR lpstrElementName;LPCWSTR lpstrAlias;DWORD dwStyle;HWND hWndParent;};
struct _WSAServiceClassInfoW {LPGUID lpServiceClassId;LPWSTR lpszServiceClassName;DWORD dwCount;LPWSANSCLASSINFOW lpClassInfos;};
typedef BOOL (__stdcall *PFNPROCESSPOLICIESW)(HWND hwnd, LPCWSTR pszPath, LPCWSTR pszUsername, LPCWSTR pszComputerName, DWORD dwFlags);
struct _WSANAMESPACE_INFOW {GUID NSProviderId;DWORD dwNameSpace;BOOL fActive;DWORD dwVersion;LPWSTR lpszIdentifier;};
struct tagMDICREATESTRUCTW {LPCWSTR szClass;LPCWSTR szTitle;HANDLE hOwner;int x;int y;int cx;int cy;DWORD style;LPARAM lParam;};
struct IBindProtocolVtbl {HRESULT (__stdcall *QueryInterface)(IBindProtocol *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IBindProtocol *This);ULONG (__stdcall *Release)(IBindProtocol *This);HRESULT (__stdcall *CreateBinding)(IBindProtocol *This, LPCWSTR szUrl, IBindCtx *pbc, IBinding **ppb);};
struct _PERF_OBJECT_TYPE {DWORD TotalByteLength;DWORD DefinitionLength;DWORD HeaderLength;DWORD ObjectNameTitleIndex;LPWSTR ObjectNameTitle;DWORD ObjectHelpTitleIndex;LPWSTR ObjectHelpTitle;DWORD DetailLevel;DWORD NumCounters;LONG DefaultCounter;LONG NumInstances;DWORD CodePage;LARGE_INTEGER PerfTime;LARGE_INTEGER PerfFreq;};
typedef BOOL (__stdcall *ENUMRESTYPEPROCW)(HMODULE hModule, LPWSTR lpType, LONG_PTR lParam);
struct _PRINTER_INFO_2W {LPWSTR pServerName;LPWSTR pPrinterName;LPWSTR pShareName;LPWSTR pPortName;LPWSTR pDriverName;LPWSTR pComment;LPWSTR pLocation;LPDEVMODEW pDevMode;LPWSTR pSepFile;LPWSTR pPrintProcessor;LPWSTR pDatatype;LPWSTR pParameters;PSECURITY_DESCRIPTOR pSecurityDescriptor;DWORD Attributes;DWORD Priority;DWORD DefaultPriority;DWORD StartTime;DWORD UntilTime;DWORD Status;DWORD cJobs;DWORD AveragePPM;};
typedef DWORD __stdcall PM_COLLECT_PROC(LPWSTR, LPVOID *, LPDWORD, LPDWORD);
struct _DRIVER_INFO_6W {DWORD cVersion;LPWSTR pName;LPWSTR pEnvironment;LPWSTR pDriverPath;LPWSTR pDataFile;LPWSTR pConfigFile;LPWSTR pHelpFile;LPWSTR pDependentFiles;LPWSTR pMonitorName;LPWSTR pDefaultDataType;LPWSTR pszzPreviousNames;FILETIME ftDriverDate;DWORDLONG dwlDriverVersion;LPWSTR pszMfgName;LPWSTR pszOEMUrl;LPWSTR pszHardwareID;LPWSTR pszProvider;};
struct tagGCP_RESULTSA {DWORD lStructSize;LPSTR lpOutString;UINT *lpOrder;int *lpDx;int *lpCaretPos;LPSTR lpClass;LPWSTR lpGlyphs;UINT nGlyphs;int nMaxFit;};
struct tagGCP_RESULTSW {DWORD lStructSize;LPWSTR lpOutString;UINT *lpOrder;int *lpDx;int *lpCaretPos;LPSTR lpClass;LPWSTR lpGlyphs;UINT nGlyphs;int nMaxFit;};
typedef SCARDHANDLE (__stdcall *LPOCNCONNPROCW)(SCARDCONTEXT, LPWSTR, LPWSTR, PVOID);
typedef BOOL (__stdcall *PROPENUMPROCW)(HWND, LPCWSTR, HANDLE);
struct _FORM_INFO_1W {DWORD Flags;LPWSTR pName;SIZEL Size;RECTL ImageableArea;};
union _CERT_ALT_NAME_ENTRY___373478565C662A7CF028A7B1C57EC676 {PCERT_OTHER_NAME pOtherName;LPWSTR pwszRfc822Name;LPWSTR pwszDNSName;CERT_NAME_BLOB DirectoryName;LPWSTR pwszURL;CRYPT_DATA_BLOB IPAddress;LPSTR pszRegisteredID;};
struct IEncodingFilterFactoryVtbl {HRESULT (__stdcall *QueryInterface)(IEncodingFilterFactory *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IEncodingFilterFactory *This);ULONG (__stdcall *Release)(IEncodingFilterFactory *This);HRESULT (__stdcall *FindBestFilter)(IEncodingFilterFactory *This, LPCWSTR pwzCodeIn, LPCWSTR pwzCodeOut, DATAINFO info, IDataFilter **ppDF);HRESULT (__stdcall *GetDefaultFilter)(IEncodingFilterFactory *This, LPCWSTR pwzCodeIn, LPCWSTR pwzCodeOut, IDataFilter **ppDF);};
struct _CREATE_PROCESS_DEBUG_INFO {HANDLE hFile;HANDLE hProcess;HANDLE hThread;LPVOID lpBaseOfImage;DWORD dwDebugInfoFileOffset;DWORD nDebugInfoSize;LPVOID lpThreadLocalBase;LPTHREAD_START_ROUTINE lpStartAddress;LPVOID lpImageName;WORD fUnicode;};
struct _CRYPT_PKCS8_EXPORT_PARAMS {HCRYPTPROV hCryptProv;DWORD dwKeySpec;LPSTR pszPrivateKeyObjId;PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC pEncryptPrivateKeyFunc;LPVOID pVoidEncryptFunc;};
typedef BOOL (__stdcall *LANGGROUPLOCALE_ENUMPROCW)(LGRPID, LCID, LPWSTR, LONG_PTR);
typedef BOOL (__stdcall *LANGUAGEGROUP_ENUMPROCW)(LGRPID, LPWSTR, LPWSTR, DWORD, LONG_PTR);
typedef BOOL (__stdcall *PFN_CRYPT_ENUM_OID_FUNC)(DWORD dwEncodingType, LPCSTR pszFuncName, LPCSTR pszOID, DWORD cValue,const DWORD  *    rgdwValueType, const LPCWSTR rgpwszValueName[], const BYTE *const rgpbValueData[],const DWORD  *    rgcbValueData, void *pvArg);
struct IClientSecurityVtbl {HRESULT (__stdcall *QueryInterface)(IClientSecurity *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IClientSecurity *This);ULONG (__stdcall *Release)(IClientSecurity *This);HRESULT (__stdcall *QueryBlanket)(IClientSecurity *This, IUnknown *pProxy, DWORD *pAuthnSvc, DWORD *pAuthzSvc, OLECHAR **pServerPrincName, DWORD *pAuthnLevel, DWORD *pImpLevel, void **pAuthInfo, DWORD *pCapabilites);HRESULT (__stdcall *SetBlanket)(IClientSecurity *This, IUnknown *pProxy, DWORD dwAuthnSvc, DWORD dwAuthzSvc, OLECHAR *pServerPrincName, DWORD dwAuthnLevel, DWORD dwImpLevel, void *pAuthInfo, DWORD dwCapabilities);HRESULT (__stdcall *CopyProxy)(IClientSecurity *This, IUnknown *pProxy, IUnknown **ppCopy);};
struct IOplockStorageVtbl {HRESULT (__stdcall *QueryInterface)(IOplockStorage *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IOplockStorage *This);ULONG (__stdcall *Release)(IOplockStorage *This);HRESULT (__stdcall *CreateStorageEx)(IOplockStorage *This, LPCWSTR pwcsName, DWORD grfMode, DWORD stgfmt, DWORD grfAttrs, const IID *const riid, void **ppstgOpen);HRESULT (__stdcall *OpenStorageEx)(IOplockStorage *This, LPCWSTR pwcsName, DWORD grfMode, DWORD stgfmt, DWORD grfAttrs, const IID *const riid, void **ppstgOpen);};
struct IAuthenticateVtbl {HRESULT (__stdcall *QueryInterface)(IAuthenticate *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IAuthenticate *This);ULONG (__stdcall *Release)(IAuthenticate *This);HRESULT (__stdcall *Authenticate)(IAuthenticate *This, HWND *phwnd, LPWSTR *pszUsername, LPWSTR *pszPassword);};
typedef BOOL (__stdcall *ENUMRESLANGPROCW)(HMODULE hModule, LPCWSTR lpType, LPCWSTR lpName, WORD wLanguage, LONG_PTR lParam);
typedef BOOL (__stdcall *ENUMRESNAMEPROCW)(HMODULE hModule, LPCWSTR lpType, LPWSTR lpName, LONG_PTR lParam);
struct tagMENUITEMINFOW {UINT cbSize;UINT fMask;UINT fType;UINT fState;UINT wID;HMENU hSubMenu;HBITMAP hbmpChecked;HBITMAP hbmpUnchecked;ULONG_PTR dwItemData;LPWSTR dwTypeData;UINT cch;HBITMAP hbmpItem;};
typedef BOOL (__stdcall *PROPENUMPROCEXW)(HWND, LPWSTR, HANDLE, ULONG_PTR);
struct _CRYPT_OID_INFO {DWORD cbSize;LPCSTR pszOID;LPCWSTR pwszName;DWORD dwGroupId;_CRYPT_OID_INFO___A9F8A7DC8FBE56841F6E4489F1528E50 __anonymous0;CRYPT_DATA_BLOB ExtraInfo;};
struct _tagRemBINDINFO {ULONG cbSize;LPWSTR szExtraInfo;DWORD grfBindInfoF;DWORD dwBindVerb;LPWSTR szCustomVerb;DWORD cbstgmedData;DWORD dwOptions;DWORD dwOptionsFlags;DWORD dwCodePage;REMSECURITY_ATTRIBUTES securityAttributes;IID iid;IUnknown *pUnk;DWORD dwReserved;};
struct _STARTUPINFOW {DWORD cb;LPWSTR lpReserved;LPWSTR lpDesktop;LPWSTR lpTitle;DWORD dwX;DWORD dwY;DWORD dwXSize;DWORD dwYSize;DWORD dwXCountChars;DWORD dwYCountChars;DWORD dwFillAttribute;DWORD dwFlags;WORD wShowWindow;WORD cbReserved2;LPBYTE lpReserved2;HANDLE hStdInput;HANDLE hStdOutput;HANDLE hStdError;};
struct _JOB_INFO_2W {DWORD JobId;LPWSTR pPrinterName;LPWSTR pMachineName;LPWSTR pUserName;LPWSTR pDocument;LPWSTR pNotifyName;LPWSTR pDatatype;LPWSTR pPrintProcessor;LPWSTR pParameters;LPWSTR pDriverName;LPDEVMODEW pDevMode;LPWSTR pStatus;PSECURITY_DESCRIPTOR pSecurityDescriptor;DWORD Status;DWORD Priority;DWORD Position;DWORD StartTime;DWORD UntilTime;DWORD TotalPages;DWORD Size;SYSTEMTIME Submitted;DWORD Time;DWORD PagesPrinted;};
struct IUrlMonVtbl {HRESULT (__stdcall *QueryInterface)(IUrlMon *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IUrlMon *This);ULONG (__stdcall *Release)(IUrlMon *This);HRESULT (__stdcall *AsyncGetClassBits)(IUrlMon *This, const IID *const rclsid, LPCWSTR pszTYPE, LPCWSTR pszExt, DWORD dwFileVersionMS, DWORD dwFileVersionLS, LPCWSTR pszCodeBase, IBindCtx *pbc, DWORD dwClassContext, const IID *const riid, DWORD flags);};
struct _DRAGINFOW {UINT uSize;POINT pt;BOOL fNC;LPWSTR lpFileList;DWORD grfKeyState;};
struct IInternetProtocolSinkVtbl {HRESULT (__stdcall *QueryInterface)(IInternetProtocolSink *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IInternetProtocolSink *This);ULONG (__stdcall *Release)(IInternetProtocolSink *This);HRESULT (__stdcall *Switch)(IInternetProtocolSink *This, PROTOCOLDATA *pProtocolData);HRESULT (__stdcall *ReportProgress)(IInternetProtocolSink *This, ULONG ulStatusCode, LPCWSTR szStatusText);HRESULT (__stdcall *ReportData)(IInternetProtocolSink *This, DWORD grfBSCF, ULONG ulProgress, ULONG ulProgressMax);HRESULT (__stdcall *ReportResult)(IInternetProtocolSink *This, HRESULT hrResult, DWORD dwError, LPCWSTR szResult);};
struct IRunnableObjectVtbl {HRESULT (__stdcall *QueryInterface)(IRunnableObject *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IRunnableObject *This);ULONG (__stdcall *Release)(IRunnableObject *This);HRESULT (__stdcall *GetRunningClass)(IRunnableObject *This, LPCLSID lpClsid);HRESULT (__stdcall *Run)(IRunnableObject *This, LPBINDCTX pbc);BOOL (__stdcall *IsRunning)(IRunnableObject *This);HRESULT (__stdcall *LockRunning)(IRunnableObject *This, BOOL fLock, BOOL fLastUnlockCloses);HRESULT (__stdcall *SetContainedObject)(IRunnableObject *This, BOOL fContained);};
struct IServerSecurityVtbl {HRESULT (__stdcall *QueryInterface)(IServerSecurity *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IServerSecurity *This);ULONG (__stdcall *Release)(IServerSecurity *This);HRESULT (__stdcall *QueryBlanket)(IServerSecurity *This, DWORD *pAuthnSvc, DWORD *pAuthzSvc, OLECHAR **pServerPrincName, DWORD *pAuthnLevel, DWORD *pImpLevel, void **pPrivs, DWORD *pCapabilities);HRESULT (__stdcall *ImpersonateClient)(IServerSecurity *This);HRESULT (__stdcall *RevertToSelf)(IServerSecurity *This);BOOL (__stdcall *IsImpersonating)(IServerSecurity *This);};
struct IHttpNegotiateVtbl {HRESULT (__stdcall *QueryInterface)(IHttpNegotiate *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IHttpNegotiate *This);ULONG (__stdcall *Release)(IHttpNegotiate *This);HRESULT (__stdcall *BeginningTransaction)(IHttpNegotiate *This, LPCWSTR szURL, LPCWSTR szHeaders, DWORD dwReserved, LPWSTR *pszAdditionalHeaders);HRESULT (__stdcall *OnResponse)(IHttpNegotiate *This, DWORD dwResponseCode, LPCWSTR szResponseHeaders, LPCWSTR szRequestHeaders, LPWSTR *pszAdditionalRequestHeaders);};
struct ILayoutStorageVtbl {HRESULT (__stdcall *QueryInterface)(ILayoutStorage *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(ILayoutStorage *This);ULONG (__stdcall *Release)(ILayoutStorage *This);HRESULT (__stdcall *LayoutScript)(ILayoutStorage *This, StorageLayout *pStorageLayout, DWORD nEntries, DWORD glfInterleavedFlag);HRESULT (__stdcall *BeginMonitor)(ILayoutStorage *This);HRESULT (__stdcall *EndMonitor)(ILayoutStorage *This);HRESULT (__stdcall *ReLayoutDocfile)(ILayoutStorage *This, OLECHAR *pwcsNewDfName);HRESULT (__stdcall *ReLayoutDocfileOnILockBytes)(ILayoutStorage *This, ILockBytes *pILockBytes);};
struct _SHFILEOPSTRUCTW {HWND hwnd;UINT wFunc;LPCWSTR pFrom;LPCWSTR pTo;FILEOP_FLAGS fFlags;BOOL fAnyOperationsAborted;LPVOID hNameMappings;LPCWSTR lpszProgressTitle;};
struct tagCHOOSECOLORW {DWORD lStructSize;HWND hwndOwner;HWND hInstance;COLORREF rgbResult;COLORREF *lpCustColors;DWORD Flags;LPARAM lCustData;LPCCHOOKPROC lpfnHook;LPCWSTR lpTemplateName;};
struct IErrorInfoVtbl {HRESULT (__stdcall *QueryInterface)(IErrorInfo *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IErrorInfo *This);ULONG (__stdcall *Release)(IErrorInfo *This);HRESULT (__stdcall *GetGUID)(IErrorInfo *This, GUID *pGUID);HRESULT (__stdcall *GetSource)(IErrorInfo *This, BSTR *pBstrSource);HRESULT (__stdcall *GetDescription)(IErrorInfo *This, BSTR *pBstrDescription);HRESULT (__stdcall *GetHelpFile)(IErrorInfo *This, BSTR *pBstrHelpFile);HRESULT (__stdcall *GetHelpContext)(IErrorInfo *This, DWORD *pdwHelpContext);};
struct _tagBINDINFO {ULONG cbSize;LPWSTR szExtraInfo;STGMEDIUM stgmedData;DWORD grfBindInfoF;DWORD dwBindVerb;LPWSTR szCustomVerb;DWORD cbstgmedData;DWORD dwOptions;DWORD dwOptionsFlags;DWORD dwCodePage;SECURITY_ATTRIBUTES securityAttributes;IID iid;IUnknown *pUnk;DWORD dwReserved;};
struct tagEXCEPINFO {WORD wCode;WORD wReserved;BSTR bstrSource;BSTR bstrDescription;BSTR bstrHelpFile;DWORD dwHelpContext;PVOID pvReserved;HRESULT (__stdcall *pfnDeferredFillIn)(struct tagEXCEPINFO *);SCODE scode;};
struct _CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO {DWORD cbSize;CRYPT_ALGORITHM_IDENTIFIER KeyEncryptionAlgorithm;void *pvKeyEncryptionAuxInfo;HCRYPTPROV hCryptProv;DWORD dwKeyChoice;_CMSG_CTRL_MAIL_LIST_DECRYPT_PARA___76A3B0E8FFB5FF4FE868B027B0FA21D8 __anonymous0;CRYPT_DATA_BLOB KeyId;FILETIME Date;PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;};
struct _4B26251D75C0D59F22113E7121B4AA5F {DWORD dwStructSize;LPWSTR lpstrGroupNames;DWORD nMaxGroupNames;LPCGUID rgguidInterfaces;DWORD cguidInterfaces;LPWSTR lpstrCardNames;DWORD nMaxCardNames;LPOCNCHKPROC lpfnCheck;LPOCNCONNPROCW lpfnConnect;LPOCNDSCPROC lpfnDisconnect;LPVOID pvUserData;DWORD dwShareMode;DWORD dwPreferredProtocols;};
struct IInternetProtocolRootVtbl {HRESULT (__stdcall *QueryInterface)(IInternetProtocolRoot *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IInternetProtocolRoot *This);ULONG (__stdcall *Release)(IInternetProtocolRoot *This);HRESULT (__stdcall *Start)(IInternetProtocolRoot *This, LPCWSTR szUrl, IInternetProtocolSink *pOIProtSink, IInternetBindInfo *pOIBindInfo, DWORD grfPI, HANDLE_PTR dwReserved);HRESULT (__stdcall *Continue)(IInternetProtocolRoot *This, PROTOCOLDATA *pProtocolData);HRESULT (__stdcall *Abort)(IInternetProtocolRoot *This, HRESULT hrReason, DWORD dwOptions);HRESULT (__stdcall *Terminate)(IInternetProtocolRoot *This, DWORD dwOptions);HRESULT (__stdcall *Suspend)(IInternetProtocolRoot *This);HRESULT (__stdcall *Resume)(IInternetProtocolRoot *This);};
struct IPrintDialogServicesVtbl {HRESULT (__stdcall *QueryInterface)(IPrintDialogServices *This, const IID *const riid, LPVOID *ppvObj);ULONG (__stdcall *AddRef)(IPrintDialogServices *This);ULONG (__stdcall *Release)(IPrintDialogServices *This);HRESULT (__stdcall *GetCurrentDevMode)(IPrintDialogServices *This, LPDEVMODE pDevMode, UINT *pcbSize);HRESULT (__stdcall *GetCurrentPrinterName)(IPrintDialogServices *This, LPTSTR pPrinterName, UINT *pcchSize);HRESULT (__stdcall *GetCurrentPortName)(IPrintDialogServices *This, LPTSTR pPortName, UINT *pcchSize);};
struct IInternetSessionVtbl {HRESULT (__stdcall *QueryInterface)(IInternetSession *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IInternetSession *This);ULONG (__stdcall *Release)(IInternetSession *This);HRESULT (__stdcall *RegisterNameSpace)(IInternetSession *This, IClassFactory *pCF, const IID *const rclsid, LPCWSTR pwzProtocol, ULONG cPatterns, const LPCWSTR *ppwzPatterns, DWORD dwReserved);HRESULT (__stdcall *UnregisterNameSpace)(IInternetSession *This, IClassFactory *pCF, LPCWSTR pszProtocol);HRESULT (__stdcall *RegisterMimeFilter)(IInternetSession *This, IClassFactory *pCF, const IID *const rclsid, LPCWSTR pwzType);HRESULT (__stdcall *UnregisterMimeFilter)(IInternetSession *This, IClassFactory *pCF, LPCWSTR pwzType);HRESULT (__stdcall *CreateBinding)(IInternetSession *This, LPBC pBC, LPCWSTR szUrl, IUnknown *pUnkOuter, IUnknown **ppUnk, IInternetProtocol **ppOInetProt, DWORD dwOption);HRESULT (__stdcall *SetSessionOption)(IInternetSession *This, DWORD dwOption, LPVOID pBuffer, DWORD dwBufferLength, DWORD dwReserved);HRESULT (__stdcall *GetSessionOption)(IInternetSession *This, DWORD dwOption, LPVOID pBuffer, DWORD *pdwBufferLength, DWORD dwReserved);};
struct ICodeInstallVtbl {HRESULT (__stdcall *QueryInterface)(ICodeInstall *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(ICodeInstall *This);ULONG (__stdcall *Release)(ICodeInstall *This);HRESULT (__stdcall *GetWindow)(ICodeInstall *This, const GUID *const rguidReason, HWND *phwnd);HRESULT (__stdcall *OnCodeInstallProblem)(ICodeInstall *This, ULONG ulStatusCode, LPCWSTR szDestination, LPCWSTR szSource, DWORD dwReserved);};
struct tagCREATESTRUCTW {LPVOID lpCreateParams;HINSTANCE hInstance;HMENU hMenu;HWND hwndParent;int cy;int cx;int y;int x;LONG style;LPCWSTR lpszName;LPCWSTR lpszClass;DWORD dwExStyle;};
struct tagMSGBOXPARAMSW {UINT cbSize;HWND hwndOwner;HINSTANCE hInstance;LPCWSTR lpszText;LPCWSTR lpszCaption;DWORD dwStyle;LPCWSTR lpszIcon;DWORD_PTR dwContextHelpId;MSGBOXCALLBACK lpfnMsgBoxCallback;DWORD dwLanguageId;};
struct tagWNDCLASSEXW {UINT cbSize;UINT style;WNDPROC lpfnWndProc;int cbClsExtra;int cbWndExtra;HINSTANCE hInstance;HICON hIcon;HCURSOR hCursor;HBRUSH hbrBackground;LPCWSTR lpszMenuName;LPCWSTR lpszClassName;HICON hIconSm;};
struct _WSAQuerySetW {DWORD dwSize;LPWSTR lpszServiceInstanceName;LPGUID lpServiceClassId;LPWSAVERSION lpVersion;LPWSTR lpszComment;DWORD dwNameSpace;LPGUID lpNSProviderId;LPWSTR lpszContext;DWORD dwNumberOfProtocols;LPAFPROTOCOLS lpafpProtocols;LPWSTR lpszQueryString;DWORD dwNumberOfCsAddrs;LPCSADDR_INFO lpcsaBuffer;DWORD dwOutputFlags;LPBLOB lpBlob;};
struct tagMETHODDATA {OLECHAR *szName;PARAMDATA *ppdata;DISPID dispid;UINT iMeth;CALLCONV cc;UINT cArgs;WORD wFlags;VARTYPE vtReturn;};
struct tagWNDCLASSW {UINT style;WNDPROC lpfnWndProc;int cbClsExtra;int cbWndExtra;HINSTANCE hInstance;HICON hIcon;HCURSOR hCursor;HBRUSH hbrBackground;LPCWSTR lpszMenuName;LPCWSTR lpszClassName;};
struct IInternetSecurityManagerVtbl {HRESULT (__stdcall *QueryInterface)(IInternetSecurityManager *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IInternetSecurityManager *This);ULONG (__stdcall *Release)(IInternetSecurityManager *This);HRESULT (__stdcall *SetSecuritySite)(IInternetSecurityManager *This, IInternetSecurityMgrSite *pSite);HRESULT (__stdcall *GetSecuritySite)(IInternetSecurityManager *This, IInternetSecurityMgrSite **ppSite);HRESULT (__stdcall *MapUrlToZone)(IInternetSecurityManager *This, LPCWSTR pwszUrl, DWORD *pdwZone, DWORD dwFlags);HRESULT (__stdcall *GetSecurityId)(IInternetSecurityManager *This, LPCWSTR pwszUrl, BYTE *pbSecurityId, DWORD *pcbSecurityId, DWORD_PTR dwReserved);HRESULT (__stdcall *ProcessUrlAction)(IInternetSecurityManager *This, LPCWSTR pwszUrl, DWORD dwAction, BYTE *pPolicy, DWORD cbPolicy, BYTE *pContext, DWORD cbContext, DWORD dwFlags, DWORD dwReserved);HRESULT (__stdcall *QueryCustomPolicy)(IInternetSecurityManager *This, LPCWSTR pwszUrl, const GUID *const guidKey, BYTE **ppPolicy, DWORD *pcbPolicy, BYTE *pContext, DWORD cbContext, DWORD dwReserved);HRESULT (__stdcall *SetZoneMapping)(IInternetSecurityManager *This, DWORD dwZone, LPCWSTR lpszPattern, DWORD dwFlags);HRESULT (__stdcall *GetZoneMappings)(IInternetSecurityManager *This, DWORD dwZone, IEnumString **ppenumString, DWORD dwFlags);};
struct tagFINDREPLACEW {DWORD lStructSize;HWND hwndOwner;HINSTANCE hInstance;DWORD Flags;LPWSTR lpstrFindWhat;LPWSTR lpstrReplaceWith;WORD wFindWhatLen;WORD wReplaceWithLen;LPARAM lCustData;LPFRHOOKPROC lpfnHook;LPCWSTR lpTemplateName;};
struct IStorageVtbl {HRESULT (__stdcall *QueryInterface)(IStorage *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IStorage *This);ULONG (__stdcall *Release)(IStorage *This);HRESULT (__stdcall *CreateStream)(IStorage *This, const OLECHAR *pwcsName, DWORD grfMode, DWORD reserved1, DWORD reserved2, IStream **ppstm);HRESULT (__stdcall *OpenStream)(IStorage *This, const OLECHAR *pwcsName, void *reserved1, DWORD grfMode, DWORD reserved2, IStream **ppstm);HRESULT (__stdcall *CreateStorage)(IStorage *This, const OLECHAR *pwcsName, DWORD grfMode, DWORD reserved1, DWORD reserved2, IStorage **ppstg);HRESULT (__stdcall *OpenStorage)(IStorage *This, const OLECHAR *pwcsName, IStorage *pstgPriority, DWORD grfMode, SNB snbExclude, DWORD reserved, IStorage **ppstg);HRESULT (__stdcall *CopyTo)(IStorage *This, DWORD ciidExclude, const IID *rgiidExclude, SNB snbExclude, IStorage *pstgDest);HRESULT (__stdcall *MoveElementTo)(IStorage *This, const OLECHAR *pwcsName, IStorage *pstgDest, const OLECHAR *pwcsNewName, DWORD grfFlags);HRESULT (__stdcall *Commit)(IStorage *This, DWORD grfCommitFlags);HRESULT (__stdcall *Revert)(IStorage *This);HRESULT (__stdcall *EnumElements)(IStorage *This, DWORD reserved1, void *reserved2, DWORD reserved3, IEnumSTATSTG **ppenum);HRESULT (__stdcall *DestroyElement)(IStorage *This, const OLECHAR *pwcsName);HRESULT (__stdcall *RenameElement)(IStorage *This, const OLECHAR *pwcsOldName, const OLECHAR *pwcsNewName);HRESULT (__stdcall *SetElementTimes)(IStorage *This, const OLECHAR *pwcsName, const FILETIME *pctime, const FILETIME *patime, const FILETIME *pmtime);HRESULT (__stdcall *SetClass)(IStorage *This, const IID *const clsid);HRESULT (__stdcall *SetStateBits)(IStorage *This, DWORD grfStateBits, DWORD grfMask);HRESULT (__stdcall *Stat)(IStorage *This, STATSTG *pstatstg, DWORD grfStatFlag);};
struct tagFUNCDESC {MEMBERID memid;SCODE *lprgscode;ELEMDESC *lprgelemdescParam;FUNCKIND funckind;INVOKEKIND invkind;CALLCONV callconv;SHORT cParams;SHORT cParamsOpt;SHORT oVft;SHORT cScodes;ELEMDESC elemdescFunc;WORD wFuncFlags;};
struct _MMIOINFO {DWORD dwFlags;FOURCC fccIOProc;LPMMIOPROC pIOProc;UINT wErrorRet;HTASK htask;LONG cchBuffer;HPSTR pchBuffer;HPSTR pchNext;HPSTR pchEndRead;HPSTR pchEndWrite;LONG lBufOffset;LONG lDiskOffset;DWORD adwInfo[3];DWORD dwReserved1;DWORD dwReserved2;HMMIO hmmio;};
struct tagOFNW {DWORD lStructSize;HWND hwndOwner;HINSTANCE hInstance;LPCWSTR lpstrFilter;LPWSTR lpstrCustomFilter;DWORD nMaxCustFilter;DWORD nFilterIndex;LPWSTR lpstrFile;DWORD nMaxFile;LPWSTR lpstrFileTitle;DWORD nMaxFileTitle;LPCWSTR lpstrInitialDir;LPCWSTR lpstrTitle;DWORD Flags;WORD nFileOffset;WORD nFileExtension;LPCWSTR lpstrDefExt;LPARAM lCustData;LPOFNHOOKPROC lpfnHook;LPCWSTR lpTemplateName;void *pvReserved;DWORD dwReserved;DWORD FlagsEx;};
struct IInternetProtocolInfoVtbl {HRESULT (__stdcall *QueryInterface)(IInternetProtocolInfo *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IInternetProtocolInfo *This);ULONG (__stdcall *Release)(IInternetProtocolInfo *This);HRESULT (__stdcall *ParseUrl)(IInternetProtocolInfo *This, LPCWSTR pwzUrl, PARSEACTION ParseAction, DWORD dwParseFlags, LPWSTR pwzResult, DWORD cchResult, DWORD *pcchResult, DWORD dwReserved);HRESULT (__stdcall *CombineUrl)(IInternetProtocolInfo *This, LPCWSTR pwzBaseUrl, LPCWSTR pwzRelativeUrl, DWORD dwCombineFlags, LPWSTR pwzResult, DWORD cchResult, DWORD *pcchResult, DWORD dwReserved);HRESULT (__stdcall *CompareUrl)(IInternetProtocolInfo *This, LPCWSTR pwzUrl1, LPCWSTR pwzUrl2, DWORD dwCompareFlags);HRESULT (__stdcall *QueryInfo)(IInternetProtocolInfo *This, LPCWSTR pwzUrl, QUERYOPTION OueryOption, DWORD dwQueryFlags, LPVOID pBuffer, DWORD cbBuffer, DWORD *pcbBuf, DWORD dwReserved);};
struct IBindStatusCallbackVtbl {HRESULT (__stdcall *QueryInterface)(IBindStatusCallback *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IBindStatusCallback *This);ULONG (__stdcall *Release)(IBindStatusCallback *This);HRESULT (__stdcall *OnStartBinding)(IBindStatusCallback *This, DWORD dwReserved, IBinding *pib);HRESULT (__stdcall *GetPriority)(IBindStatusCallback *This, LONG *pnPriority);HRESULT (__stdcall *OnLowResource)(IBindStatusCallback *This, DWORD reserved);HRESULT (__stdcall *OnProgress)(IBindStatusCallback *This, ULONG ulProgress, ULONG ulProgressMax, ULONG ulStatusCode, LPCWSTR szStatusText);HRESULT (__stdcall *OnStopBinding)(IBindStatusCallback *This, HRESULT hresult, LPCWSTR szError);HRESULT (__stdcall *GetBindInfo)(IBindStatusCallback *This, DWORD *grfBINDF, BINDINFO *pbindinfo);HRESULT (__stdcall *OnDataAvailable)(IBindStatusCallback *This, DWORD grfBSCF, DWORD dwSize, FORMATETC *pformatetc, STGMEDIUM *pstgmed);HRESULT (__stdcall *OnObjectAvailable)(IBindStatusCallback *This, const IID *const riid, IUnknown *punk);};
struct IInternetProtocolVtbl {HRESULT (__stdcall *QueryInterface)(IInternetProtocol *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IInternetProtocol *This);ULONG (__stdcall *Release)(IInternetProtocol *This);HRESULT (__stdcall *Start)(IInternetProtocol *This, LPCWSTR szUrl, IInternetProtocolSink *pOIProtSink, IInternetBindInfo *pOIBindInfo, DWORD grfPI, HANDLE_PTR dwReserved);HRESULT (__stdcall *Continue)(IInternetProtocol *This, PROTOCOLDATA *pProtocolData);HRESULT (__stdcall *Abort)(IInternetProtocol *This, HRESULT hrReason, DWORD dwOptions);HRESULT (__stdcall *Terminate)(IInternetProtocol *This, DWORD dwOptions);HRESULT (__stdcall *Suspend)(IInternetProtocol *This);HRESULT (__stdcall *Resume)(IInternetProtocol *This);HRESULT (__stdcall *Read)(IInternetProtocol *This, void *pv, ULONG cb, ULONG *pcbRead);HRESULT (__stdcall *Seek)(IInternetProtocol *This, LARGE_INTEGER dlibMove, DWORD dwOrigin, ULARGE_INTEGER *plibNewPosition);HRESULT (__stdcall *LockRequest)(IInternetProtocol *This, DWORD dwOptions);HRESULT (__stdcall *UnlockRequest)(IInternetProtocol *This);};
struct _SHCREATEPROCESSINFOW {DWORD cbSize;ULONG fMask;HWND hwnd;LPCWSTR pszFile;LPCWSTR pszParameters;LPCWSTR pszCurrentDirectory;HANDLE hUserToken;LPSECURITY_ATTRIBUTES lpProcessAttributes;LPSECURITY_ATTRIBUTES lpThreadAttributes;BOOL bInheritHandles;DWORD dwCreationFlags;LPSTARTUPINFOW lpStartupInfo;LPPROCESS_INFORMATION lpProcessInformation;};
struct _SHELLEXECUTEINFOW {DWORD cbSize;ULONG fMask;HWND hwnd;LPCWSTR lpVerb;LPCWSTR lpFile;LPCWSTR lpParameters;LPCWSTR lpDirectory;int nShow;HINSTANCE hInstApp;LPVOID lpIDList;LPCWSTR lpClass;HKEY hkeyClass;DWORD dwHotKey;union _SHELLEXECUTEINFOW___D915D6B2B775D926C11EEA321E8940B4 u;HANDLE hProcess;};
struct _PROPSHEETPAGEW {DWORD dwSize;DWORD dwFlags;HINSTANCE hInstance;union _PROPSHEETPAGEW___516F7AC5631E67C03EDCA9BDA4E87AED u;union _PROPSHEETPAGEW___0FB566F30614F599529D00140F4CD87D u2;LPCWSTR pszTitle;DLGPROC pfnDlgProc;LPARAM lParam;LPFNPSPCALLBACKW pfnCallback;UINT *pcRefParent;LPCWSTR pszHeaderTitle;LPCWSTR pszHeaderSubTitle;};
struct tagPDEXW {DWORD lStructSize;HWND hwndOwner;HGLOBAL hDevMode;HGLOBAL hDevNames;HDC hDC;DWORD Flags;DWORD Flags2;DWORD ExclusionFlags;DWORD nPageRanges;DWORD nMaxPageRanges;LPPRINTPAGERANGE lpPageRanges;DWORD nMinPage;DWORD nMaxPage;DWORD nCopies;HINSTANCE hInstance;LPCWSTR lpPrintTemplateName;LPUNKNOWN lpCallback;DWORD nPropertyPages;HPROPSHEETPAGE *lphPropertyPages;DWORD nStartPage;DWORD dwResultAction;};
struct _A63D84EB732F4E602FF2E049D2D99B44 {DWORD dwStructSize;SCARDCONTEXT hSCardContext;HWND hwndOwner;DWORD dwFlags;LPCWSTR lpstrTitle;LPCWSTR lpstrSearchDesc;HICON hIcon;POPENCARD_SEARCH_CRITERIAW pOpenCardSearchCriteria;LPOCNCONNPROCW lpfnConnect;LPVOID pvUserData;DWORD dwShareMode;DWORD dwPreferredProtocols;LPWSTR lpstrRdr;DWORD nMaxRdr;LPWSTR lpstrCard;DWORD nMaxCard;DWORD dwActiveProtocol;SCARDHANDLE hCardHandle;};
struct IInternetZoneManagerVtbl {HRESULT (__stdcall *QueryInterface)(IInternetZoneManager *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IInternetZoneManager *This);ULONG (__stdcall *Release)(IInternetZoneManager *This);HRESULT (__stdcall *GetZoneAttributes)(IInternetZoneManager *This, DWORD dwZone, ZONEATTRIBUTES *pZoneAttributes);HRESULT (__stdcall *SetZoneAttributes)(IInternetZoneManager *This, DWORD dwZone, ZONEATTRIBUTES *pZoneAttributes);HRESULT (__stdcall *GetZoneCustomPolicy)(IInternetZoneManager *This, DWORD dwZone, const GUID *const guidKey, BYTE **ppPolicy, DWORD *pcbPolicy, URLZONEREG urlZoneReg);HRESULT (__stdcall *SetZoneCustomPolicy)(IInternetZoneManager *This, DWORD dwZone, const GUID *const guidKey, BYTE *pPolicy, DWORD cbPolicy, URLZONEREG urlZoneReg);HRESULT (__stdcall *GetZoneActionPolicy)(IInternetZoneManager *This, DWORD dwZone, DWORD dwAction, BYTE *pPolicy, DWORD cbPolicy, URLZONEREG urlZoneReg);HRESULT (__stdcall *SetZoneActionPolicy)(IInternetZoneManager *This, DWORD dwZone, DWORD dwAction, BYTE *pPolicy, DWORD cbPolicy, URLZONEREG urlZoneReg);HRESULT (__stdcall *PromptAction)(IInternetZoneManager *This, DWORD dwAction, HWND hwndParent, LPCWSTR pwszUrl, LPCWSTR pwszText, DWORD dwPromptFlags);HRESULT (__stdcall *LogAction)(IInternetZoneManager *This, DWORD dwAction, LPCWSTR pwszUrl, LPCWSTR pwszText, DWORD dwLogFlags);HRESULT (__stdcall *CreateZoneEnumerator)(IInternetZoneManager *This, DWORD *pdwEnum, DWORD *pdwCount, DWORD dwFlags);HRESULT (__stdcall *GetZoneAt)(IInternetZoneManager *This, DWORD dwEnum, DWORD dwIndex, DWORD *pdwZone);HRESULT (__stdcall *DestroyZoneEnumerator)(IInternetZoneManager *This, DWORD dwEnum);HRESULT (__stdcall *CopyTemplatePoliciesToZone)(IInternetZoneManager *This, DWORD dwTemplate, DWORD dwZone, DWORD dwReserved);};
struct ISoftDistExtVtbl {HRESULT (__stdcall *QueryInterface)(ISoftDistExt *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(ISoftDistExt *This);ULONG (__stdcall *Release)(ISoftDistExt *This);HRESULT (__stdcall *ProcessSoftDist)(ISoftDistExt *This, LPCWSTR szCDFURL, IXMLElement *pSoftDistElement, LPSOFTDISTINFO lpsdi);HRESULT (__stdcall *GetFirstCodeBase)(ISoftDistExt *This, LPWSTR *szCodeBase, LPDWORD dwMaxSize);HRESULT (__stdcall *GetNextCodeBase)(ISoftDistExt *This, LPWSTR *szCodeBase, LPDWORD dwMaxSize);HRESULT (__stdcall *AsyncInstallDistributionUnit)(ISoftDistExt *This, IBindCtx *pbc, LPVOID pvReserved, DWORD flags, LPCODEBASEHOLD lpcbh);};
struct tagPSDW {DWORD lStructSize;HWND hwndOwner;HGLOBAL hDevMode;HGLOBAL hDevNames;DWORD Flags;POINT ptPaperSize;RECT rtMinMargin;RECT rtMargin;HINSTANCE hInstance;LPARAM lCustData;LPPAGESETUPHOOK lpfnPageSetupHook;LPPAGEPAINTHOOK lpfnPagePaintHook;LPCWSTR lpPageSetupTemplateName;HGLOBAL hPageSetupTemplate;};
struct tagPDW {DWORD lStructSize;HWND hwndOwner;HGLOBAL hDevMode;HGLOBAL hDevNames;HDC hDC;DWORD Flags;WORD nFromPage;WORD nToPage;WORD nMinPage;WORD nMaxPage;WORD nCopies;HINSTANCE hInstance;LPARAM lCustData;LPPRINTHOOKPROC lpfnPrintHook;LPSETUPHOOKPROC lpfnSetupHook;LPCWSTR lpPrintTemplateName;LPCWSTR lpSetupTemplateName;HGLOBAL hPrintTemplate;HGLOBAL hSetupTemplate;};
struct _1FC20381981E06D3B4F68D6006129906 {DWORD dwStructSize;HWND hwndOwner;SCARDCONTEXT hSCardContext;LPWSTR lpstrGroupNames;DWORD nMaxGroupNames;LPWSTR lpstrCardNames;DWORD nMaxCardNames;LPCGUID rgguidInterfaces;DWORD cguidInterfaces;LPWSTR lpstrRdr;DWORD nMaxRdr;LPWSTR lpstrCard;DWORD nMaxCard;LPCWSTR lpstrTitle;DWORD dwFlags;LPVOID pvUserData;DWORD dwShareMode;DWORD dwPreferredProtocols;DWORD dwActiveProtocol;LPOCNCONNPROCW lpfnConnect;LPOCNCHKPROC lpfnCheck;LPOCNDSCPROC lpfnDisconnect;SCARDHANDLE hCardHandle;};
struct _PROPSHEETHEADERW {DWORD dwSize;DWORD dwFlags;HWND hwndParent;HINSTANCE hInstance;union _PROPSHEETHEADERW___0FB566F30614F599529D00140F4CD87D u;LPCWSTR pszCaption;UINT nPages;union _PROPSHEETHEADERW___6475730AE6DAD1B8D6E46E57DCE1E457 u2;union _PROPSHEETHEADERW___C62D413765EFFC4667F5A15937CA2710 u3;PFNPROPSHEETCALLBACK pfnCallback;union _PROPSHEETHEADERW___C635E94935336589E496FC759198B86F u4;HPALETTE hplWatermark;union _PROPSHEETHEADERW___9C028D56AB90D7CB2840D31BA61B8779 u5;};
struct tagCHOOSEFONTW {DWORD lStructSize;HWND hwndOwner;HDC hDC;LPLOGFONTW lpLogFont;INT iPointSize;DWORD Flags;COLORREF rgbColors;LPARAM lCustData;LPCFHOOKPROC lpfnHook;LPCWSTR lpTemplateName;HINSTANCE hInstance;LPWSTR lpszStyle;WORD nFontType;WORD ___MISSING_ALIGNMENT__;INT nSizeMin;INT nSizeMax;};
union tagVARIANT_______tagVARIANT___0FF4B879107F0495843F4FD419461AB7 {ULONGLONG ullVal;LONGLONG llVal;LONG lVal;BYTE bVal;SHORT iVal;FLOAT fltVal;DOUBLE dblVal;VARIANT_BOOL boolVal;SCODE scode;CY cyVal;DATE date;BSTR bstrVal;IUnknown *punkVal;IDispatch *pdispVal;SAFEARRAY *parray;BYTE *pbVal;SHORT *piVal;LONG *plVal;LONGLONG *pllVal;FLOAT *pfltVal;DOUBLE *pdblVal;VARIANT_BOOL *pboolVal;SCODE *pscode;CY *pcyVal;DATE *pdate;BSTR *pbstrVal;IUnknown **ppunkVal;IDispatch **ppdispVal;SAFEARRAY **pparray;VARIANT *pvarVal;PVOID byref;CHAR cVal;USHORT uiVal;ULONG ulVal;INT intVal;UINT uintVal;DECIMAL *pdecVal;CHAR *pcVal;USHORT *puiVal;ULONG *pulVal;ULONGLONG *pullVal;INT *pintVal;UINT *puintVal;struct tagVARIANT_______tagVARIANT___0FF4B879107F0495843F4FD419461AB7____tagBRECORD brecVal;};
union tagPROPVARIANT______1A0FF913CB6A2700FBDFFDCC16233417___C55E7FD68DDBD4820BEEA04B5D0E46A7 {CHAR cVal;UCHAR bVal;SHORT iVal;USHORT uiVal;LONG lVal;ULONG ulVal;INT intVal;UINT uintVal;LARGE_INTEGER hVal;ULARGE_INTEGER uhVal;FLOAT fltVal;DOUBLE dblVal;VARIANT_BOOL boolVal;SCODE scode;CY cyVal;DATE date;FILETIME filetime;CLSID *puuid;CLIPDATA *pclipdata;BSTR bstrVal;BSTRBLOB bstrblobVal;BLOB blob;LPSTR pszVal;LPWSTR pwszVal;IUnknown *punkVal;IDispatch *pdispVal;IStream *pStream;IStorage *pStorage;LPVERSIONEDSTREAM pVersionedStream;LPSAFEARRAY parray;CAC cac;CAUB caub;CAI cai;CAUI caui;CAL cal;CAUL caul;CAH cah;CAUH cauh;CAFLT caflt;CADBL cadbl;CABOOL cabool;CASCODE cascode;CACY cacy;CADATE cadate;CAFILETIME cafiletime;CACLSID cauuid;CACLIPDATA caclipdata;CABSTR cabstr;CABSTRBLOB cabstrblob;CALPSTR calpstr;CALPWSTR calpwstr;CAPROPVARIANT capropvar;CHAR *pcVal;UCHAR *pbVal;SHORT *piVal;USHORT *puiVal;LONG *plVal;ULONG *pulVal;INT *pintVal;UINT *puintVal;FLOAT *pfltVal;DOUBLE *pdblVal;VARIANT_BOOL *pboolVal;DECIMAL *pdecVal;SCODE *pscode;CY *pcyVal;DATE *pdate;BSTR *pbstrVal;IUnknown **ppunkVal;IDispatch **ppdispVal;LPSAFEARRAY *pparray;PROPVARIANT *pvarVal;};
struct _CRYPT_ENROLLMENT_NAME_VALUE_PAIR {LPWSTR pwszName;LPWSTR pwszValue;};
typedef RPCNOTIFICATION_ROUTINE *PFN_RPCNOTIFICATION_ROUTINE;
struct _PRINTPROCESSOR_INFO_1W {LPWSTR pName;};
struct _SERVICE_DESCRIPTIONW {LPWSTR lpDescription;};
struct _UNIVERSAL_NAME_INFOW {LPWSTR lpUniversalName;};
typedef int (__stdcall *EDITWORDBREAKPROCW)(LPWSTR lpch, int ichCurrent, int cch, int code);
struct _DATATYPES_INFO_1W {LPWSTR pName;};
struct _DEVICE_MEDIA_INFO {union _DEVICE_MEDIA_INFO___2DD95E35CD64FCF2582B874AE4A78983 DeviceSpecific;};
struct _REMOTE_NAME_INFOW {LPWSTR lpUniversalName;LPWSTR lpConnectionName;LPWSTR lpRemainingPath;};
struct _PROVIDOR_INFO_1W {LPWSTR pName;LPWSTR pEnvironment;LPWSTR pDLLName;};
struct _PROVIDOR_INFO_2W {LPWSTR pOrder;};
typedef NAMEENUMPROCW DESKTOPENUMPROCW;
struct _MONITOR_INFO_1W {LPWSTR pName;};
struct _MONITOR_INFO_2W {LPWSTR pName;LPWSTR pEnvironment;LPWSTR pDLLName;};
struct tagREGISTERWORDW {LPWSTR lpReading;LPWSTR lpWord;};
typedef NAMEENUMPROCW WINSTAENUMPROCW;
struct _DRIVER_INFO_1W {LPWSTR pName;};
struct _SHNAMEMAPPINGW {LPWSTR pszOldPath;LPWSTR pszNewPath;int cchOldPath;int cchNewPath;};
typedef MIDICALLBACK *LPMIDICALLBACK;
typedef WAVECALLBACK *LPWAVECALLBACK;
struct _PORT_INFO_1W {LPWSTR pName;};
struct _DOC_INFO_1W {LPWSTR pDocName;LPWSTR pOutputFile;LPWSTR pDatatype;};
typedef const OLECHAR *LPCOLESTR;
struct tagRemSNB {unsigned int ulCntStr;unsigned int ulCntChar;OLECHAR rgString[1];};
typedef OLECHAR *LPOLESTR;
typedef BSTR *LPBSTR;
struct __MIDL___MIDL_itf_wtypes_0003_0001____MIDL___MIDL_itf_wtypes_0003_0005___6B5846D67F7DD81E1807E9F45EE9219E {LPOLESTR pPackageName;GUID PolicyId;};
struct _RPC_ASYNC_STATE___C850AED24DDA9EA1FCF494DA424838E3___FE55FC766DFEC649A23F3D16D006B7DF {PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;HANDLE hThread;};
union tagPROPSPEC___401F44F296029ABDCCA300255B1FD5D2 {PROPID propid;LPOLESTR lpwstr;};
struct _CERT_ALT_NAME_ENTRY {DWORD dwAltNameChoice;_CERT_ALT_NAME_ENTRY___373478565C662A7CF028A7B1C57EC676 __anonymous0;};
struct tagPROPSPEC {ULONG ulKind;tagPROPSPEC___401F44F296029ABDCCA300255B1FD5D2 __anonymous0;};
struct tagVARIANT___F060C15D409704AFCEB2B499364615C4____tagVARIANT {VARTYPE vt;WORD wReserved1;WORD wReserved2;WORD wReserved3;union tagVARIANT_______tagVARIANT___0FF4B879107F0495843F4FD419461AB7 n3;};
struct tagSTATPROPSTG {LPOLESTR lpwstrName;PROPID propid;VARTYPE vt;};
struct tagOLEVERB {LONG lVerb;LPOLESTR lpszVerbName;DWORD fuFlags;DWORD grfAttribs;};
union __MIDL___MIDL_itf_wtypes_0003_0001____MIDL___MIDL_itf_wtypes_0003_0005 {CLSID clsid;LPOLESTR pFileExt;LPOLESTR pMimeType;LPOLESTR pProgId;LPOLESTR pFileName;struct __MIDL___MIDL_itf_wtypes_0003_0001____MIDL___MIDL_itf_wtypes_0003_0005___6B5846D67F7DD81E1807E9F45EE9219E ByName;struct __MIDL___MIDL_itf_wtypes_0003_0001____MIDL___MIDL_itf_wtypes_0003_0005___7C8E1366D020F294DF98B2AA96DD5064 ByObjectId;};
struct IParseDisplayNameVtbl {HRESULT (__stdcall *QueryInterface)(IParseDisplayName *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IParseDisplayName *This);ULONG (__stdcall *Release)(IParseDisplayName *This);HRESULT (__stdcall *ParseDisplayName)(IParseDisplayName *This, IBindCtx *pbc, LPOLESTR pszDisplayName, ULONG *pchEaten, IMoniker **ppmkOut);};
struct IRootStorageVtbl {HRESULT (__stdcall *QueryInterface)(IRootStorage *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IRootStorage *This);ULONG (__stdcall *Release)(IRootStorage *This);HRESULT (__stdcall *SwitchToFile)(IRootStorage *This, LPOLESTR pszFile);};
struct IEnumStringVtbl {HRESULT (__stdcall *QueryInterface)(IEnumString *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IEnumString *This);ULONG (__stdcall *Release)(IEnumString *This);HRESULT (__stdcall *Next)(IEnumString *This, ULONG celt, LPOLESTR *rgelt, ULONG *pceltFetched);HRESULT (__stdcall *Skip)(IEnumString *This, ULONG celt);HRESULT (__stdcall *Reset)(IEnumString *This);HRESULT (__stdcall *Clone)(IEnumString *This, IEnumString **ppenum);};
struct tagPROPVARIANT___B01A803922ACEB71FC353E1ACAA1539E___1A0FF913CB6A2700FBDFFDCC16233417 {VARTYPE vt;PROPVAR_PAD1 wReserved1;PROPVAR_PAD2 wReserved2;PROPVAR_PAD3 wReserved3;tagPROPVARIANT______1A0FF913CB6A2700FBDFFDCC16233417___C55E7FD68DDBD4820BEEA04B5D0E46A7 __anonymous0;};
union _RPC_ASYNC_STATE___C850AED24DDA9EA1FCF494DA424838E3 {struct _RPC_ASYNC_STATE___C850AED24DDA9EA1FCF494DA424838E3___FE55FC766DFEC649A23F3D16D006B7DF APC;struct _RPC_ASYNC_STATE___C850AED24DDA9EA1FCF494DA424838E3___5843F6C8FAC72B709E58873D9E66E99B IOC;struct _RPC_ASYNC_STATE___C850AED24DDA9EA1FCF494DA424838E3___A18A6C82CF5B218D68E8003A992A5456 HWND;HANDLE hEvent;PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;};
union tagSTGMEDIUM___7B772CC839E5463FC51219F893F364BB {HBITMAP hBitmap;HMETAFILEPICT hMetaFilePict;HENHMETAFILE hEnhMetaFile;HGLOBAL hGlobal;LPOLESTR lpszFileName;IStream *pstm;IStorage *pstg;};
struct IPropertyBagVtbl {HRESULT (__stdcall *QueryInterface)(IPropertyBag *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IPropertyBag *This);ULONG (__stdcall *Release)(IPropertyBag *This);HRESULT (__stdcall *Read)(IPropertyBag *This, LPCOLESTR pszPropName, VARIANT *pVar, IErrorLog *pErrorLog);HRESULT (__stdcall *Write)(IPropertyBag *This, LPCOLESTR pszPropName, VARIANT *pVar);};
struct IBindHostVtbl {HRESULT (__stdcall *QueryInterface)(IBindHost *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IBindHost *This);ULONG (__stdcall *Release)(IBindHost *This);HRESULT (__stdcall *CreateMoniker)(IBindHost *This, LPOLESTR szName, IBindCtx *pBC, IMoniker **ppmk, DWORD dwReserved);HRESULT (__stdcall *MonikerBindToStorage)(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, void **ppvObj);HRESULT (__stdcall *MonikerBindToObject)(IBindHost *This, IMoniker *pMk, IBindCtx *pBC, IBindStatusCallback *pBSC, const IID *const riid, void **ppvObj);};
struct IErrorLogVtbl {HRESULT (__stdcall *QueryInterface)(IErrorLog *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IErrorLog *This);ULONG (__stdcall *Release)(IErrorLog *This);HRESULT (__stdcall *AddError)(IErrorLog *This, LPCOLESTR pszPropName, EXCEPINFO *pExcepInfo);};
struct IBindCtxVtbl {HRESULT (__stdcall *QueryInterface)(IBindCtx *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IBindCtx *This);ULONG (__stdcall *Release)(IBindCtx *This);HRESULT (__stdcall *RegisterObjectBound)(IBindCtx *This, IUnknown *punk);HRESULT (__stdcall *RevokeObjectBound)(IBindCtx *This, IUnknown *punk);HRESULT (__stdcall *ReleaseBoundObjects)(IBindCtx *This);HRESULT (__stdcall *SetBindOptions)(IBindCtx *This, BIND_OPTS *pbindopts);HRESULT (__stdcall *GetBindOptions)(IBindCtx *This, BIND_OPTS *pbindopts);HRESULT (__stdcall *GetRunningObjectTable)(IBindCtx *This, IRunningObjectTable **pprot);HRESULT (__stdcall *RegisterObjectParam)(IBindCtx *This, LPOLESTR pszKey, IUnknown *punk);HRESULT (__stdcall *GetObjectParam)(IBindCtx *This, LPOLESTR pszKey, IUnknown **ppunk);HRESULT (__stdcall *EnumObjectParam)(IBindCtx *This, IEnumString **ppenum);HRESULT (__stdcall *RevokeObjectParam)(IBindCtx *This, LPOLESTR pszKey);};
struct tagSTATSTG {LPOLESTR pwcsName;DWORD type;ULARGE_INTEGER cbSize;FILETIME mtime;FILETIME ctime;FILETIME atime;DWORD grfMode;DWORD grfLocksSupported;CLSID clsid;DWORD grfStateBits;DWORD reserved;};
union _userSTGMEDIUM___STGMEDIUM_UNION____MIDL_IAdviseSink_0003 {wireHMETAFILEPICT hMetaFilePict;wireHENHMETAFILE hHEnhMetaFile;GDI_OBJECT *hGdiHandle;wireHGLOBAL hGlobal;LPOLESTR lpszFileName;BYTE_BLOB *pstm;BYTE_BLOB *pstg;};
struct IInternetBindInfoVtbl {HRESULT (__stdcall *QueryInterface)(IInternetBindInfo *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IInternetBindInfo *This);ULONG (__stdcall *Release)(IInternetBindInfo *This);HRESULT (__stdcall *GetBindInfo)(IInternetBindInfo *This, DWORD *grfBINDF, BINDINFO *pbindinfo);HRESULT (__stdcall *GetBindString)(IInternetBindInfo *This, ULONG ulStringType, LPOLESTR *ppwzStr, ULONG cEl, ULONG *pcElFetched);};
struct IOleItemContainerVtbl {HRESULT (__stdcall *QueryInterface)(IOleItemContainer *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IOleItemContainer *This);ULONG (__stdcall *Release)(IOleItemContainer *This);HRESULT (__stdcall *ParseDisplayName)(IOleItemContainer *This, IBindCtx *pbc, LPOLESTR pszDisplayName, ULONG *pchEaten, IMoniker **ppmkOut);HRESULT (__stdcall *EnumObjects)(IOleItemContainer *This, DWORD grfFlags, IEnumUnknown **ppenum);HRESULT (__stdcall *LockContainer)(IOleItemContainer *This, BOOL fLock);HRESULT (__stdcall *GetObjectA)(IOleItemContainer *This, LPOLESTR pszItem, DWORD dwSpeedNeeded, IBindCtx *pbc, const IID *const riid, void **ppvObject);HRESULT (__stdcall *GetObjectStorage)(IOleItemContainer *This, LPOLESTR pszItem, IBindCtx *pbc, const IID *const riid, void **ppvStorage);HRESULT (__stdcall *IsRunning)(IOleItemContainer *This, LPOLESTR pszItem);};
struct ITypeChangeEventsVtbl {HRESULT (__stdcall *QueryInterface)(ITypeChangeEvents *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(ITypeChangeEvents *This);ULONG (__stdcall *Release)(ITypeChangeEvents *This);HRESULT (__stdcall *RequestTypeChange)(ITypeChangeEvents *This, CHANGEKIND changeKind, ITypeInfo *pTInfoBefore, LPOLESTR pStrName, INT *pfCancel);HRESULT (__stdcall *AfterTypeChange)(ITypeChangeEvents *This, CHANGEKIND changeKind, ITypeInfo *pTInfoAfter, LPOLESTR pStrName);};
struct ICreateErrorInfoVtbl {HRESULT (__stdcall *QueryInterface)(ICreateErrorInfo *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(ICreateErrorInfo *This);ULONG (__stdcall *Release)(ICreateErrorInfo *This);HRESULT (__stdcall *SetGUID)(ICreateErrorInfo *This, const GUID *const rguid);HRESULT (__stdcall *SetSource)(ICreateErrorInfo *This, LPOLESTR szSource);HRESULT (__stdcall *SetDescription)(ICreateErrorInfo *This, LPOLESTR szDescription);HRESULT (__stdcall *SetHelpFile)(ICreateErrorInfo *This, LPOLESTR szHelpFile);HRESULT (__stdcall *SetHelpContext)(ICreateErrorInfo *This, DWORD dwHelpContext);};
struct IOleContainerVtbl {HRESULT (__stdcall *QueryInterface)(IOleContainer *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IOleContainer *This);ULONG (__stdcall *Release)(IOleContainer *This);HRESULT (__stdcall *ParseDisplayName)(IOleContainer *This, IBindCtx *pbc, LPOLESTR pszDisplayName, ULONG *pchEaten, IMoniker **ppmkOut);HRESULT (__stdcall *EnumObjects)(IOleContainer *This, DWORD grfFlags, IEnumUnknown **ppenum);HRESULT (__stdcall *LockContainer)(IOleContainer *This, BOOL fLock);};
struct IOleLinkVtbl {HRESULT (__stdcall *QueryInterface)(IOleLink *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IOleLink *This);ULONG (__stdcall *Release)(IOleLink *This);HRESULT (__stdcall *SetUpdateOptions)(IOleLink *This, DWORD dwUpdateOpt);HRESULT (__stdcall *GetUpdateOptions)(IOleLink *This, DWORD *pdwUpdateOpt);HRESULT (__stdcall *SetSourceMoniker)(IOleLink *This, IMoniker *pmk, const IID *const rclsid);HRESULT (__stdcall *GetSourceMoniker)(IOleLink *This, IMoniker **ppmk);HRESULT (__stdcall *SetSourceDisplayName)(IOleLink *This, LPCOLESTR pszStatusText);HRESULT (__stdcall *GetSourceDisplayName)(IOleLink *This, LPOLESTR *ppszDisplayName);HRESULT (__stdcall *BindToSource)(IOleLink *This, DWORD bindflags, IBindCtx *pbc);HRESULT (__stdcall *BindIfRunning)(IOleLink *This);HRESULT (__stdcall *GetBoundSource)(IOleLink *This, IUnknown **ppunk);HRESULT (__stdcall *UnbindSource)(IOleLink *This);HRESULT (__stdcall *Update)(IOleLink *This, IBindCtx *pbc);};
struct tagVARDESC {MEMBERID memid;LPOLESTR lpstrSchema;tagVARDESC___E6274BD6A7149C9CC2413444FF769F0B __anonymous0;ELEMDESC elemdescVar;WORD wVarFlags;VARKIND varkind;};
struct ITypeCompVtbl {HRESULT (__stdcall *QueryInterface)(ITypeComp *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(ITypeComp *This);ULONG (__stdcall *Release)(ITypeComp *This);HRESULT (__stdcall *Bind)(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, WORD wFlags, ITypeInfo **ppTInfo, DESCKIND *pDescKind, BINDPTR *pBindPtr);HRESULT (__stdcall *BindType)(ITypeComp *This, LPOLESTR szName, ULONG lHashVal, ITypeInfo **ppTInfo, ITypeComp **ppTComp);};
struct IBindingVtbl {HRESULT (__stdcall *QueryInterface)(IBinding *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IBinding *This);ULONG (__stdcall *Release)(IBinding *This);HRESULT (__stdcall *Abort)(IBinding *This);HRESULT (__stdcall *Suspend)(IBinding *This);HRESULT (__stdcall *Resume)(IBinding *This);HRESULT (__stdcall *SetPriority)(IBinding *This, LONG nPriority);HRESULT (__stdcall *GetPriority)(IBinding *This, LONG *pnPriority);HRESULT (__stdcall *GetBindResult)(IBinding *This, CLSID *pclsidProtocol, DWORD *pdwResult, LPOLESTR *pszResult, DWORD *pdwReserved);};
struct IOleInPlaceUIWindowVtbl {HRESULT (__stdcall *QueryInterface)(IOleInPlaceUIWindow *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IOleInPlaceUIWindow *This);ULONG (__stdcall *Release)(IOleInPlaceUIWindow *This);HRESULT (__stdcall *GetWindow)(IOleInPlaceUIWindow *This, HWND *phwnd);HRESULT (__stdcall *ContextSensitiveHelp)(IOleInPlaceUIWindow *This, BOOL fEnterMode);HRESULT (__stdcall *GetBorder)(IOleInPlaceUIWindow *This, LPRECT lprectBorder);HRESULT (__stdcall *RequestBorderSpace)(IOleInPlaceUIWindow *This, LPCBORDERWIDTHS pborderwidths);HRESULT (__stdcall *SetBorderSpace)(IOleInPlaceUIWindow *This, LPCBORDERWIDTHS pborderwidths);HRESULT (__stdcall *SetActiveObject)(IOleInPlaceUIWindow *This, IOleInPlaceActiveObject *pActiveObject, LPCOLESTR pszObjName);};
struct IPersistFileVtbl {HRESULT (__stdcall *QueryInterface)(IPersistFile *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IPersistFile *This);ULONG (__stdcall *Release)(IPersistFile *This);HRESULT (__stdcall *GetClassID)(IPersistFile *This, CLSID *pClassID);HRESULT (__stdcall *IsDirty)(IPersistFile *This);HRESULT (__stdcall *Load)(IPersistFile *This, LPCOLESTR pszFileName, DWORD dwMode);HRESULT (__stdcall *Save)(IPersistFile *This, LPCOLESTR pszFileName, BOOL fRemember);HRESULT (__stdcall *SaveCompleted)(IPersistFile *This, LPCOLESTR pszFileName);HRESULT (__stdcall *GetCurFile)(IPersistFile *This, LPOLESTR *ppszFileName);};
struct IRecordInfoVtbl {HRESULT (__stdcall *QueryInterface)(IRecordInfo *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IRecordInfo *This);ULONG (__stdcall *Release)(IRecordInfo *This);HRESULT (__stdcall *RecordInit)(IRecordInfo *This, PVOID pvNew);HRESULT (__stdcall *RecordClear)(IRecordInfo *This, PVOID pvExisting);HRESULT (__stdcall *RecordCopy)(IRecordInfo *This, PVOID pvExisting, PVOID pvNew);HRESULT (__stdcall *GetGuid)(IRecordInfo *This, GUID *pguid);HRESULT (__stdcall *GetName)(IRecordInfo *This, BSTR *pbstrName);HRESULT (__stdcall *GetSize)(IRecordInfo *This, ULONG *pcbSize);HRESULT (__stdcall *GetTypeInfo)(IRecordInfo *This, ITypeInfo **ppTypeInfo);HRESULT (__stdcall *GetField)(IRecordInfo *This, PVOID pvData, LPCOLESTR szFieldName, VARIANT *pvarField);HRESULT (__stdcall *GetFieldNoCopy)(IRecordInfo *This, PVOID pvData, LPCOLESTR szFieldName, VARIANT *pvarField, PVOID *ppvDataCArray);HRESULT (__stdcall *PutField)(IRecordInfo *This, ULONG wFlags, PVOID pvData, LPCOLESTR szFieldName, VARIANT *pvarField);HRESULT (__stdcall *PutFieldNoCopy)(IRecordInfo *This, ULONG wFlags, PVOID pvData, LPCOLESTR szFieldName, VARIANT *pvarField);HRESULT (__stdcall *GetFieldNames)(IRecordInfo *This, ULONG *pcNames, BSTR *rgBstrNames);BOOL (__stdcall *IsMatchingType)(IRecordInfo *This, IRecordInfo *pRecordInfo);PVOID (__stdcall *RecordCreate)(IRecordInfo *This);HRESULT (__stdcall *RecordCreateCopy)(IRecordInfo *This, PVOID pvSource, PVOID *ppvDest);HRESULT (__stdcall *RecordDestroy)(IRecordInfo *This, PVOID pvRecord);};
struct IMonikerVtbl {HRESULT (__stdcall *QueryInterface)(IMoniker *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IMoniker *This);ULONG (__stdcall *Release)(IMoniker *This);HRESULT (__stdcall *GetClassID)(IMoniker *This, CLSID *pClassID);HRESULT (__stdcall *IsDirty)(IMoniker *This);HRESULT (__stdcall *Load)(IMoniker *This, IStream *pStm);HRESULT (__stdcall *Save)(IMoniker *This, IStream *pStm, BOOL fClearDirty);HRESULT (__stdcall *GetSizeMax)(IMoniker *This, ULARGE_INTEGER *pcbSize);HRESULT (__stdcall *BindToObject)(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riidResult, void **ppvResult);HRESULT (__stdcall *BindToStorage)(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, const IID *const riid, void **ppvObj);HRESULT (__stdcall *Reduce)(IMoniker *This, IBindCtx *pbc, DWORD dwReduceHowFar, IMoniker **ppmkToLeft, IMoniker **ppmkReduced);HRESULT (__stdcall *ComposeWith)(IMoniker *This, IMoniker *pmkRight, BOOL fOnlyIfNotGeneric, IMoniker **ppmkComposite);HRESULT (__stdcall *Enum)(IMoniker *This, BOOL fForward, IEnumMoniker **ppenumMoniker);HRESULT (__stdcall *IsEqual)(IMoniker *This, IMoniker *pmkOtherMoniker);HRESULT (__stdcall *Hash)(IMoniker *This, DWORD *pdwHash);HRESULT (__stdcall *IsRunning)(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, IMoniker *pmkNewlyRunning);HRESULT (__stdcall *GetTimeOfLastChange)(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, FILETIME *pFileTime);HRESULT (__stdcall *Inverse)(IMoniker *This, IMoniker **ppmk);HRESULT (__stdcall *CommonPrefixWith)(IMoniker *This, IMoniker *pmkOther, IMoniker **ppmkPrefix);HRESULT (__stdcall *RelativePathTo)(IMoniker *This, IMoniker *pmkOther, IMoniker **ppmkRelPath);HRESULT (__stdcall *GetDisplayName)(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, LPOLESTR *ppszDisplayName);HRESULT (__stdcall *ParseDisplayName)(IMoniker *This, IBindCtx *pbc, IMoniker *pmkToLeft, LPOLESTR pszDisplayName, ULONG *pchEaten, IMoniker **ppmkOut);HRESULT (__stdcall *IsSystemMoniker)(IMoniker *This, DWORD *pdwMksys);};
struct IPropertyStorageVtbl {HRESULT (__stdcall *QueryInterface)(IPropertyStorage *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IPropertyStorage *This);ULONG (__stdcall *Release)(IPropertyStorage *This);HRESULT (__stdcall *ReadMultiple)(IPropertyStorage *This, ULONG cpspec,const PROPSPEC  *    rgpspec, PROPVARIANT rgpropvar[]);HRESULT (__stdcall *WriteMultiple)(IPropertyStorage *This, ULONG cpspec,const PROPSPEC  *    rgpspec, const PROPVARIANT rgpropvar[], PROPID propidNameFirst);HRESULT (__stdcall *DeleteMultiple)(IPropertyStorage *This, ULONG cpspec,const PROPSPEC  *    rgpspec);HRESULT (__stdcall *ReadPropertyNames)(IPropertyStorage *This, ULONG cpropid,const PROPID  *    rgpropid, LPOLESTR rglpwstrName[]);HRESULT (__stdcall *WritePropertyNames)(IPropertyStorage *This, ULONG cpropid,const PROPID  *    rgpropid, const LPOLESTR rglpwstrName[]);HRESULT (__stdcall *DeletePropertyNames)(IPropertyStorage *This, ULONG cpropid,const PROPID  *    rgpropid);HRESULT (__stdcall *Commit)(IPropertyStorage *This, DWORD grfCommitFlags);HRESULT (__stdcall *Revert)(IPropertyStorage *This);HRESULT (__stdcall *Enum)(IPropertyStorage *This, IEnumSTATPROPSTG **ppenum);HRESULT (__stdcall *SetTimes)(IPropertyStorage *This, const FILETIME *pctime, const FILETIME *patime, const FILETIME *pmtime);HRESULT (__stdcall *SetClass)(IPropertyStorage *This, const IID *const clsid);HRESULT (__stdcall *Stat)(IPropertyStorage *This, STATPROPSETSTG *pstatpsstg);};
struct ICreateTypeLibVtbl {HRESULT (__stdcall *QueryInterface)(ICreateTypeLib *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(ICreateTypeLib *This);ULONG (__stdcall *Release)(ICreateTypeLib *This);HRESULT (__stdcall *CreateTypeInfo)(ICreateTypeLib *This, LPOLESTR szName, TYPEKIND tkind, ICreateTypeInfo **ppCTInfo);HRESULT (__stdcall *SetName)(ICreateTypeLib *This, LPOLESTR szName);HRESULT (__stdcall *SetVersion)(ICreateTypeLib *This, WORD wMajorVerNum, WORD wMinorVerNum);HRESULT (__stdcall *SetGuid)(ICreateTypeLib *This, const GUID *const guid);HRESULT (__stdcall *SetDocString)(ICreateTypeLib *This, LPOLESTR szDoc);HRESULT (__stdcall *SetHelpFileName)(ICreateTypeLib *This, LPOLESTR szHelpFileName);HRESULT (__stdcall *SetHelpContext)(ICreateTypeLib *This, DWORD dwHelpContext);HRESULT (__stdcall *SetLcid)(ICreateTypeLib *This, LCID lcid);HRESULT (__stdcall *SetLibFlags)(ICreateTypeLib *This, UINT uLibFlags);HRESULT (__stdcall *SaveAllChanges)(ICreateTypeLib *This);};
struct tagTYPEATTR {GUID guid;LCID lcid;DWORD dwReserved;MEMBERID memidConstructor;MEMBERID memidDestructor;LPOLESTR lpstrSchema;ULONG cbSizeInstance;TYPEKIND typekind;WORD cFuncs;WORD cVars;WORD cImplTypes;WORD cbSizeVft;WORD cbAlignment;WORD wTypeFlags;WORD wMajorVerNum;WORD wMinorVerNum;TYPEDESC tdescAlias;IDLDESC idldescType;};
struct IXMLElementCollectionVtbl {HRESULT (__stdcall *QueryInterface)(IXMLElementCollection *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IXMLElementCollection *This);ULONG (__stdcall *Release)(IXMLElementCollection *This);HRESULT (__stdcall *GetTypeInfoCount)(IXMLElementCollection *This, UINT *pctinfo);HRESULT (__stdcall *GetTypeInfo)(IXMLElementCollection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT (__stdcall *GetIDsOfNames)(IXMLElementCollection *This, const IID *const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT (__stdcall *Invoke)(IXMLElementCollection *This, DISPID dispIdMember, const IID *const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT (__stdcall *put_length)(IXMLElementCollection *This, int v);HRESULT (__stdcall *get_length)(IXMLElementCollection *This, int *p);HRESULT (__stdcall *get__newEnum)(IXMLElementCollection *This, IUnknown **ppUnk);HRESULT (__stdcall *item)(IXMLElementCollection *This, VARIANT var1, VARIANT var2, IDispatch **ppDisp);};
struct XMLDOMDocumentEventsVtbl {HRESULT (__stdcall *QueryInterface)(XMLDOMDocumentEvents *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(XMLDOMDocumentEvents *This);ULONG (__stdcall *Release)(XMLDOMDocumentEvents *This);HRESULT (__stdcall *GetTypeInfoCount)(XMLDOMDocumentEvents *This, UINT *pctinfo);HRESULT (__stdcall *GetTypeInfo)(XMLDOMDocumentEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT (__stdcall *GetIDsOfNames)(XMLDOMDocumentEvents *This, const IID *const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT (__stdcall *Invoke)(XMLDOMDocumentEvents *This, DISPID dispIdMember, const IID *const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct ICreateTypeLib2Vtbl {HRESULT (__stdcall *QueryInterface)(ICreateTypeLib2 *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(ICreateTypeLib2 *This);ULONG (__stdcall *Release)(ICreateTypeLib2 *This);HRESULT (__stdcall *CreateTypeInfo)(ICreateTypeLib2 *This, LPOLESTR szName, TYPEKIND tkind, ICreateTypeInfo **ppCTInfo);HRESULT (__stdcall *SetName)(ICreateTypeLib2 *This, LPOLESTR szName);HRESULT (__stdcall *SetVersion)(ICreateTypeLib2 *This, WORD wMajorVerNum, WORD wMinorVerNum);HRESULT (__stdcall *SetGuid)(ICreateTypeLib2 *This, const GUID *const guid);HRESULT (__stdcall *SetDocString)(ICreateTypeLib2 *This, LPOLESTR szDoc);HRESULT (__stdcall *SetHelpFileName)(ICreateTypeLib2 *This, LPOLESTR szHelpFileName);HRESULT (__stdcall *SetHelpContext)(ICreateTypeLib2 *This, DWORD dwHelpContext);HRESULT (__stdcall *SetLcid)(ICreateTypeLib2 *This, LCID lcid);HRESULT (__stdcall *SetLibFlags)(ICreateTypeLib2 *This, UINT uLibFlags);HRESULT (__stdcall *SaveAllChanges)(ICreateTypeLib2 *This);HRESULT (__stdcall *DeleteTypeInfo)(ICreateTypeLib2 *This, LPOLESTR szName);HRESULT (__stdcall *SetCustData)(ICreateTypeLib2 *This, const GUID *const guid, VARIANT *pVarVal);HRESULT (__stdcall *SetHelpStringContext)(ICreateTypeLib2 *This, ULONG dwHelpStringContext);HRESULT (__stdcall *SetHelpStringDll)(ICreateTypeLib2 *This, LPOLESTR szFileName);};
struct IXMLDOMNodeListVtbl {HRESULT (__stdcall *QueryInterface)(IXMLDOMNodeList *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IXMLDOMNodeList *This);ULONG (__stdcall *Release)(IXMLDOMNodeList *This);HRESULT (__stdcall *GetTypeInfoCount)(IXMLDOMNodeList *This, UINT *pctinfo);HRESULT (__stdcall *GetTypeInfo)(IXMLDOMNodeList *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT (__stdcall *GetIDsOfNames)(IXMLDOMNodeList *This, const IID *const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT (__stdcall *Invoke)(IXMLDOMNodeList *This, DISPID dispIdMember, const IID *const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT (__stdcall *get_item)(IXMLDOMNodeList *This, int index, IXMLDOMNode **listItem);HRESULT (__stdcall *get_length)(IXMLDOMNodeList *This, int *listLength);HRESULT (__stdcall *nextNode)(IXMLDOMNodeList *This, IXMLDOMNode **nextItem);HRESULT (__stdcall *reset)(IXMLDOMNodeList *This);HRESULT (__stdcall *get__newEnum)(IXMLDOMNodeList *This, IUnknown **ppUnk);};
struct IDispatchVtbl {HRESULT (__stdcall *QueryInterface)(IDispatch *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IDispatch *This);ULONG (__stdcall *Release)(IDispatch *This);HRESULT (__stdcall *GetTypeInfoCount)(IDispatch *This, UINT *pctinfo);HRESULT (__stdcall *GetTypeInfo)(IDispatch *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT (__stdcall *GetIDsOfNames)(IDispatch *This, const IID *const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT (__stdcall *Invoke)(IDispatch *This, DISPID dispIdMember, const IID *const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);};
struct IXMLDOMNamedNodeMapVtbl {HRESULT (__stdcall *QueryInterface)(IXMLDOMNamedNodeMap *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IXMLDOMNamedNodeMap *This);ULONG (__stdcall *Release)(IXMLDOMNamedNodeMap *This);HRESULT (__stdcall *GetTypeInfoCount)(IXMLDOMNamedNodeMap *This, UINT *pctinfo);HRESULT (__stdcall *GetTypeInfo)(IXMLDOMNamedNodeMap *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT (__stdcall *GetIDsOfNames)(IXMLDOMNamedNodeMap *This, const IID *const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT (__stdcall *Invoke)(IXMLDOMNamedNodeMap *This, DISPID dispIdMember, const IID *const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT (__stdcall *getNamedItem)(IXMLDOMNamedNodeMap *This, BSTR name, IXMLDOMNode **namedItem);HRESULT (__stdcall *setNamedItem)(IXMLDOMNamedNodeMap *This, IXMLDOMNode *newItem, IXMLDOMNode **nameItem);HRESULT (__stdcall *removeNamedItem)(IXMLDOMNamedNodeMap *This, BSTR name, IXMLDOMNode **namedItem);HRESULT (__stdcall *get_item)(IXMLDOMNamedNodeMap *This, int index, IXMLDOMNode **listItem);HRESULT (__stdcall *get_length)(IXMLDOMNamedNodeMap *This, int *listLength);HRESULT (__stdcall *getQualifiedItem)(IXMLDOMNamedNodeMap *This, BSTR baseName, BSTR namespaceURI, IXMLDOMNode **qualifiedItem);HRESULT (__stdcall *removeQualifiedItem)(IXMLDOMNamedNodeMap *This, BSTR baseName, BSTR namespaceURI, IXMLDOMNode **qualifiedItem);HRESULT (__stdcall *nextNode)(IXMLDOMNamedNodeMap *This, IXMLDOMNode **nextItem);HRESULT (__stdcall *reset)(IXMLDOMNamedNodeMap *This);HRESULT (__stdcall *get__newEnum)(IXMLDOMNamedNodeMap *This, IUnknown **ppUnk);};
struct IXMLDOMParseErrorVtbl {HRESULT (__stdcall *QueryInterface)(IXMLDOMParseError *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IXMLDOMParseError *This);ULONG (__stdcall *Release)(IXMLDOMParseError *This);HRESULT (__stdcall *GetTypeInfoCount)(IXMLDOMParseError *This, UINT *pctinfo);HRESULT (__stdcall *GetTypeInfo)(IXMLDOMParseError *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT (__stdcall *GetIDsOfNames)(IXMLDOMParseError *This, const IID *const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT (__stdcall *Invoke)(IXMLDOMParseError *This, DISPID dispIdMember, const IID *const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT (__stdcall *get_errorCode)(IXMLDOMParseError *This, int *errorCode);HRESULT (__stdcall *get_url)(IXMLDOMParseError *This, BSTR *urlString);HRESULT (__stdcall *get_reason)(IXMLDOMParseError *This, BSTR *reasonString);HRESULT (__stdcall *get_srcText)(IXMLDOMParseError *This, BSTR *sourceString);HRESULT (__stdcall *get_line)(IXMLDOMParseError *This, int *lineNumber);HRESULT (__stdcall *get_linepos)(IXMLDOMParseError *This, int *linePosition);HRESULT (__stdcall *get_filepos)(IXMLDOMParseError *This, int *filePosition);};
struct IXMLHttpRequestVtbl {HRESULT (__stdcall *QueryInterface)(IXMLHttpRequest *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IXMLHttpRequest *This);ULONG (__stdcall *Release)(IXMLHttpRequest *This);HRESULT (__stdcall *GetTypeInfoCount)(IXMLHttpRequest *This, UINT *pctinfo);HRESULT (__stdcall *GetTypeInfo)(IXMLHttpRequest *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT (__stdcall *GetIDsOfNames)(IXMLHttpRequest *This, const IID *const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT (__stdcall *Invoke)(IXMLHttpRequest *This, DISPID dispIdMember, const IID *const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT (__stdcall *open)(IXMLHttpRequest *This, BSTR bstrMethod, BSTR bstrUrl, VARIANT varAsync, VARIANT bstrUser, VARIANT bstrPassword);HRESULT (__stdcall *setRequestHeader)(IXMLHttpRequest *This, BSTR bstrHeader, BSTR bstrValue);HRESULT (__stdcall *getResponseHeader)(IXMLHttpRequest *This, BSTR bstrHeader, BSTR *pbstrValue);HRESULT (__stdcall *getAllResponseHeaders)(IXMLHttpRequest *This, BSTR *pbstrHeaders);HRESULT (__stdcall *send)(IXMLHttpRequest *This, VARIANT varBody);HRESULT (__stdcall *abort)(IXMLHttpRequest *This);HRESULT (__stdcall *get_status)(IXMLHttpRequest *This, int *plStatus);HRESULT (__stdcall *get_statusText)(IXMLHttpRequest *This, BSTR *pbstrStatus);HRESULT (__stdcall *get_responseXML)(IXMLHttpRequest *This, IDispatch **ppBody);HRESULT (__stdcall *get_responseText)(IXMLHttpRequest *This, BSTR *pbstrBody);HRESULT (__stdcall *get_responseBody)(IXMLHttpRequest *This, VARIANT *pvarBody);HRESULT (__stdcall *get_responseStream)(IXMLHttpRequest *This, VARIANT *pvarBody);HRESULT (__stdcall *get_readyState)(IXMLHttpRequest *This, int *plState);HRESULT (__stdcall *put_onreadystatechange)(IXMLHttpRequest *This, IDispatch *pReadyStateSink);};
struct IXMLDSOControlVtbl {HRESULT (__stdcall *QueryInterface)(IXMLDSOControl *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IXMLDSOControl *This);ULONG (__stdcall *Release)(IXMLDSOControl *This);HRESULT (__stdcall *GetTypeInfoCount)(IXMLDSOControl *This, UINT *pctinfo);HRESULT (__stdcall *GetTypeInfo)(IXMLDSOControl *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT (__stdcall *GetIDsOfNames)(IXMLDSOControl *This, const IID *const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT (__stdcall *Invoke)(IXMLDSOControl *This, DISPID dispIdMember, const IID *const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT (__stdcall *get_XMLDocument)(IXMLDSOControl *This, IXMLDOMDocument **ppDoc);HRESULT (__stdcall *put_XMLDocument)(IXMLDSOControl *This, IXMLDOMDocument *ppDoc);HRESULT (__stdcall *get_JavaDSOCompatible)(IXMLDSOControl *This, BOOL *fJavaDSOCompatible);HRESULT (__stdcall *put_JavaDSOCompatible)(IXMLDSOControl *This, BOOL fJavaDSOCompatible);HRESULT (__stdcall *get_readyState)(IXMLDSOControl *This, int *state);};
struct IXMLAttributeVtbl {HRESULT (__stdcall *QueryInterface)(IXMLAttribute *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IXMLAttribute *This);ULONG (__stdcall *Release)(IXMLAttribute *This);HRESULT (__stdcall *GetTypeInfoCount)(IXMLAttribute *This, UINT *pctinfo);HRESULT (__stdcall *GetTypeInfo)(IXMLAttribute *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT (__stdcall *GetIDsOfNames)(IXMLAttribute *This, const IID *const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT (__stdcall *Invoke)(IXMLAttribute *This, DISPID dispIdMember, const IID *const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT (__stdcall *get_name)(IXMLAttribute *This, BSTR *n);HRESULT (__stdcall *get_value)(IXMLAttribute *This, BSTR *v);};
struct IXMLDocumentVtbl {HRESULT (__stdcall *QueryInterface)(IXMLDocument *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IXMLDocument *This);ULONG (__stdcall *Release)(IXMLDocument *This);HRESULT (__stdcall *GetTypeInfoCount)(IXMLDocument *This, UINT *pctinfo);HRESULT (__stdcall *GetTypeInfo)(IXMLDocument *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT (__stdcall *GetIDsOfNames)(IXMLDocument *This, const IID *const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT (__stdcall *Invoke)(IXMLDocument *This, DISPID dispIdMember, const IID *const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT (__stdcall *get_root)(IXMLDocument *This, IXMLElement **p);HRESULT (__stdcall *get_fileSize)(IXMLDocument *This, BSTR *p);HRESULT (__stdcall *get_fileModifiedDate)(IXMLDocument *This, BSTR *p);HRESULT (__stdcall *get_fileUpdatedDate)(IXMLDocument *This, BSTR *p);HRESULT (__stdcall *get_URL)(IXMLDocument *This, BSTR *p);HRESULT (__stdcall *put_URL)(IXMLDocument *This, BSTR p);HRESULT (__stdcall *get_mimeType)(IXMLDocument *This, BSTR *p);HRESULT (__stdcall *get_readyState)(IXMLDocument *This, int *pl);HRESULT (__stdcall *get_charset)(IXMLDocument *This, BSTR *p);HRESULT (__stdcall *put_charset)(IXMLDocument *This, BSTR p);HRESULT (__stdcall *get_version)(IXMLDocument *This, BSTR *p);HRESULT (__stdcall *get_doctype)(IXMLDocument *This, BSTR *p);HRESULT (__stdcall *get_dtdURL)(IXMLDocument *This, BSTR *p);HRESULT (__stdcall *createElement)(IXMLDocument *This, VARIANT vType, VARIANT var1, IXMLElement **ppElem);};
struct IXMLElement2Vtbl {HRESULT (__stdcall *QueryInterface)(IXMLElement2 *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IXMLElement2 *This);ULONG (__stdcall *Release)(IXMLElement2 *This);HRESULT (__stdcall *GetTypeInfoCount)(IXMLElement2 *This, UINT *pctinfo);HRESULT (__stdcall *GetTypeInfo)(IXMLElement2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT (__stdcall *GetIDsOfNames)(IXMLElement2 *This, const IID *const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT (__stdcall *Invoke)(IXMLElement2 *This, DISPID dispIdMember, const IID *const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT (__stdcall *get_tagName)(IXMLElement2 *This, BSTR *p);HRESULT (__stdcall *put_tagName)(IXMLElement2 *This, BSTR p);HRESULT (__stdcall *get_parent)(IXMLElement2 *This, IXMLElement2 **ppParent);HRESULT (__stdcall *setAttribute)(IXMLElement2 *This, BSTR strPropertyName, VARIANT PropertyValue);HRESULT (__stdcall *getAttribute)(IXMLElement2 *This, BSTR strPropertyName, VARIANT *PropertyValue);HRESULT (__stdcall *removeAttribute)(IXMLElement2 *This, BSTR strPropertyName);HRESULT (__stdcall *get_children)(IXMLElement2 *This, IXMLElementCollection **pp);HRESULT (__stdcall *get_type)(IXMLElement2 *This, int *plType);HRESULT (__stdcall *get_text)(IXMLElement2 *This, BSTR *p);HRESULT (__stdcall *put_text)(IXMLElement2 *This, BSTR p);HRESULT (__stdcall *addChild)(IXMLElement2 *This, IXMLElement2 *pChildElem, int lIndex, int lReserved);HRESULT (__stdcall *removeChild)(IXMLElement2 *This, IXMLElement2 *pChildElem);HRESULT (__stdcall *get_attributes)(IXMLElement2 *This, IXMLElementCollection **pp);};
struct IXMLElementVtbl {HRESULT (__stdcall *QueryInterface)(IXMLElement *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IXMLElement *This);ULONG (__stdcall *Release)(IXMLElement *This);HRESULT (__stdcall *GetTypeInfoCount)(IXMLElement *This, UINT *pctinfo);HRESULT (__stdcall *GetTypeInfo)(IXMLElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT (__stdcall *GetIDsOfNames)(IXMLElement *This, const IID *const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT (__stdcall *Invoke)(IXMLElement *This, DISPID dispIdMember, const IID *const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT (__stdcall *get_tagName)(IXMLElement *This, BSTR *p);HRESULT (__stdcall *put_tagName)(IXMLElement *This, BSTR p);HRESULT (__stdcall *get_parent)(IXMLElement *This, IXMLElement **ppParent);HRESULT (__stdcall *setAttribute)(IXMLElement *This, BSTR strPropertyName, VARIANT PropertyValue);HRESULT (__stdcall *getAttribute)(IXMLElement *This, BSTR strPropertyName, VARIANT *PropertyValue);HRESULT (__stdcall *removeAttribute)(IXMLElement *This, BSTR strPropertyName);HRESULT (__stdcall *get_children)(IXMLElement *This, IXMLElementCollection **pp);HRESULT (__stdcall *get_type)(IXMLElement *This, int *plType);HRESULT (__stdcall *get_text)(IXMLElement *This, BSTR *p);HRESULT (__stdcall *put_text)(IXMLElement *This, BSTR p);HRESULT (__stdcall *addChild)(IXMLElement *This, IXMLElement *pChildElem, int lIndex, int lReserved);HRESULT (__stdcall *removeChild)(IXMLElement *This, IXMLElement *pChildElem);};
struct IXMLDOMImplementationVtbl {HRESULT (__stdcall *QueryInterface)(IXMLDOMImplementation *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IXMLDOMImplementation *This);ULONG (__stdcall *Release)(IXMLDOMImplementation *This);HRESULT (__stdcall *GetTypeInfoCount)(IXMLDOMImplementation *This, UINT *pctinfo);HRESULT (__stdcall *GetTypeInfo)(IXMLDOMImplementation *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT (__stdcall *GetIDsOfNames)(IXMLDOMImplementation *This, const IID *const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT (__stdcall *Invoke)(IXMLDOMImplementation *This, DISPID dispIdMember, const IID *const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT (__stdcall *hasFeature)(IXMLDOMImplementation *This, BSTR feature, BSTR version, VARIANT_BOOL *hasFeature);};
struct IOleInPlaceFrameVtbl {HRESULT (__stdcall *QueryInterface)(IOleInPlaceFrame *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IOleInPlaceFrame *This);ULONG (__stdcall *Release)(IOleInPlaceFrame *This);HRESULT (__stdcall *GetWindow)(IOleInPlaceFrame *This, HWND *phwnd);HRESULT (__stdcall *ContextSensitiveHelp)(IOleInPlaceFrame *This, BOOL fEnterMode);HRESULT (__stdcall *GetBorder)(IOleInPlaceFrame *This, LPRECT lprectBorder);HRESULT (__stdcall *RequestBorderSpace)(IOleInPlaceFrame *This, LPCBORDERWIDTHS pborderwidths);HRESULT (__stdcall *SetBorderSpace)(IOleInPlaceFrame *This, LPCBORDERWIDTHS pborderwidths);HRESULT (__stdcall *SetActiveObject)(IOleInPlaceFrame *This, IOleInPlaceActiveObject *pActiveObject, LPCOLESTR pszObjName);HRESULT (__stdcall *InsertMenus)(IOleInPlaceFrame *This, HMENU hmenuShared, LPOLEMENUGROUPWIDTHS lpMenuWidths);HRESULT (__stdcall *SetMenu)(IOleInPlaceFrame *This, HMENU hmenuShared, HOLEMENU holemenu, HWND hwndActiveObject);HRESULT (__stdcall *RemoveMenus)(IOleInPlaceFrame *This, HMENU hmenuShared);HRESULT (__stdcall *SetStatusText)(IOleInPlaceFrame *This, LPCOLESTR pszStatusText);HRESULT (__stdcall *EnableModeless)(IOleInPlaceFrame *This, BOOL fEnable);HRESULT (__stdcall *TranslateAcceleratorA)(IOleInPlaceFrame *This, LPMSG lpmsg, WORD wID);};
struct IXMLDocument2Vtbl {HRESULT (__stdcall *QueryInterface)(IXMLDocument2 *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IXMLDocument2 *This);ULONG (__stdcall *Release)(IXMLDocument2 *This);HRESULT (__stdcall *GetTypeInfoCount)(IXMLDocument2 *This, UINT *pctinfo);HRESULT (__stdcall *GetTypeInfo)(IXMLDocument2 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT (__stdcall *GetIDsOfNames)(IXMLDocument2 *This, const IID *const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT (__stdcall *Invoke)(IXMLDocument2 *This, DISPID dispIdMember, const IID *const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT (__stdcall *get_root)(IXMLDocument2 *This, IXMLElement2 **p);HRESULT (__stdcall *get_fileSize)(IXMLDocument2 *This, BSTR *p);HRESULT (__stdcall *get_fileModifiedDate)(IXMLDocument2 *This, BSTR *p);HRESULT (__stdcall *get_fileUpdatedDate)(IXMLDocument2 *This, BSTR *p);HRESULT (__stdcall *get_URL)(IXMLDocument2 *This, BSTR *p);HRESULT (__stdcall *put_URL)(IXMLDocument2 *This, BSTR p);HRESULT (__stdcall *get_mimeType)(IXMLDocument2 *This, BSTR *p);HRESULT (__stdcall *get_readyState)(IXMLDocument2 *This, int *pl);HRESULT (__stdcall *get_charset)(IXMLDocument2 *This, BSTR *p);HRESULT (__stdcall *put_charset)(IXMLDocument2 *This, BSTR p);HRESULT (__stdcall *get_version)(IXMLDocument2 *This, BSTR *p);HRESULT (__stdcall *get_doctype)(IXMLDocument2 *This, BSTR *p);HRESULT (__stdcall *get_dtdURL)(IXMLDocument2 *This, BSTR *p);HRESULT (__stdcall *createElement)(IXMLDocument2 *This, VARIANT vType, VARIANT var1, IXMLElement2 **ppElem);HRESULT (__stdcall *get_async)(IXMLDocument2 *This, VARIANT_BOOL *pf);HRESULT (__stdcall *put_async)(IXMLDocument2 *This, VARIANT_BOOL f);};
struct IOleObjectVtbl {HRESULT (__stdcall *QueryInterface)(IOleObject *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IOleObject *This);ULONG (__stdcall *Release)(IOleObject *This);HRESULT (__stdcall *SetClientSite)(IOleObject *This, IOleClientSite *pClientSite);HRESULT (__stdcall *GetClientSite)(IOleObject *This, IOleClientSite **ppClientSite);HRESULT (__stdcall *SetHostNames)(IOleObject *This, LPCOLESTR szContainerApp, LPCOLESTR szContainerObj);HRESULT (__stdcall *Close)(IOleObject *This, DWORD dwSaveOption);HRESULT (__stdcall *SetMoniker)(IOleObject *This, DWORD dwWhichMoniker, IMoniker *pmk);HRESULT (__stdcall *GetMoniker)(IOleObject *This, DWORD dwAssign, DWORD dwWhichMoniker, IMoniker **ppmk);HRESULT (__stdcall *InitFromData)(IOleObject *This, IDataObject *pDataObject, BOOL fCreation, DWORD dwReserved);HRESULT (__stdcall *GetClipboardData)(IOleObject *This, DWORD dwReserved, IDataObject **ppDataObject);HRESULT (__stdcall *DoVerb)(IOleObject *This, LONG iVerb, LPMSG lpmsg, IOleClientSite *pActiveSite, LONG lindex, HWND hwndParent, LPCRECT lprcPosRect);HRESULT (__stdcall *EnumVerbs)(IOleObject *This, IEnumOLEVERB **ppEnumOleVerb);HRESULT (__stdcall *Update)(IOleObject *This);HRESULT (__stdcall *IsUpToDate)(IOleObject *This);HRESULT (__stdcall *GetUserClassID)(IOleObject *This, CLSID *pClsid);HRESULT (__stdcall *GetUserType)(IOleObject *This, DWORD dwFormOfType, LPOLESTR *pszUserType);HRESULT (__stdcall *SetExtent)(IOleObject *This, DWORD dwDrawAspect, SIZEL *psizel);HRESULT (__stdcall *GetExtent)(IOleObject *This, DWORD dwDrawAspect, SIZEL *psizel);HRESULT (__stdcall *Advise)(IOleObject *This, IAdviseSink *pAdvSink, DWORD *pdwConnection);HRESULT (__stdcall *Unadvise)(IOleObject *This, DWORD dwConnection);HRESULT (__stdcall *EnumAdvise)(IOleObject *This, IEnumSTATDATA **ppenumAdvise);HRESULT (__stdcall *GetMiscStatus)(IOleObject *This, DWORD dwAspect, DWORD *pdwStatus);HRESULT (__stdcall *SetColorScheme)(IOleObject *This, LOGPALETTE *pLogpal);};
struct ITypeLibVtbl {HRESULT (__stdcall *QueryInterface)(ITypeLib *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(ITypeLib *This);ULONG (__stdcall *Release)(ITypeLib *This);UINT (__stdcall *GetTypeInfoCount)(ITypeLib *This);HRESULT (__stdcall *GetTypeInfo)(ITypeLib *This, UINT index, ITypeInfo **ppTInfo);HRESULT (__stdcall *GetTypeInfoType)(ITypeLib *This, UINT index, TYPEKIND *pTKind);HRESULT (__stdcall *GetTypeInfoOfGuid)(ITypeLib *This, const GUID *const guid, ITypeInfo **ppTinfo);HRESULT (__stdcall *GetLibAttr)(ITypeLib *This, TLIBATTR **ppTLibAttr);HRESULT (__stdcall *GetTypeComp)(ITypeLib *This, ITypeComp **ppTComp);HRESULT (__stdcall *GetDocumentation)(ITypeLib *This, INT index, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile);HRESULT (__stdcall *IsName)(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, BOOL *pfName);HRESULT (__stdcall *FindName)(ITypeLib *This, LPOLESTR szNameBuf, ULONG lHashVal, ITypeInfo **ppTInfo, MEMBERID *rgMemId, USHORT *pcFound);void (__stdcall *ReleaseTLibAttr)(ITypeLib *This, TLIBATTR *pTLibAttr);};
struct IXMLDOMProcessingInstructionVtbl {HRESULT (__stdcall *QueryInterface)(IXMLDOMProcessingInstruction *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IXMLDOMProcessingInstruction *This);ULONG (__stdcall *Release)(IXMLDOMProcessingInstruction *This);HRESULT (__stdcall *GetTypeInfoCount)(IXMLDOMProcessingInstruction *This, UINT *pctinfo);HRESULT (__stdcall *GetTypeInfo)(IXMLDOMProcessingInstruction *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT (__stdcall *GetIDsOfNames)(IXMLDOMProcessingInstruction *This, const IID *const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT (__stdcall *Invoke)(IXMLDOMProcessingInstruction *This, DISPID dispIdMember, const IID *const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT (__stdcall *get_nodeName)(IXMLDOMProcessingInstruction *This, BSTR *name);HRESULT (__stdcall *get_nodeValue)(IXMLDOMProcessingInstruction *This, VARIANT *value);HRESULT (__stdcall *put_nodeValue)(IXMLDOMProcessingInstruction *This, VARIANT value);HRESULT (__stdcall *get_nodeType)(IXMLDOMProcessingInstruction *This, DOMNodeType *type);HRESULT (__stdcall *get_parentNode)(IXMLDOMProcessingInstruction *This, IXMLDOMNode **parent);HRESULT (__stdcall *get_childNodes)(IXMLDOMProcessingInstruction *This, IXMLDOMNodeList **childList);HRESULT (__stdcall *get_firstChild)(IXMLDOMProcessingInstruction *This, IXMLDOMNode **firstChild);HRESULT (__stdcall *get_lastChild)(IXMLDOMProcessingInstruction *This, IXMLDOMNode **lastChild);HRESULT (__stdcall *get_previousSibling)(IXMLDOMProcessingInstruction *This, IXMLDOMNode **previousSibling);HRESULT (__stdcall *get_nextSibling)(IXMLDOMProcessingInstruction *This, IXMLDOMNode **nextSibling);HRESULT (__stdcall *get_attributes)(IXMLDOMProcessingInstruction *This, IXMLDOMNamedNodeMap **attributeMap);HRESULT (__stdcall *insertBefore)(IXMLDOMProcessingInstruction *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);HRESULT (__stdcall *replaceChild)(IXMLDOMProcessingInstruction *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);HRESULT (__stdcall *removeChild)(IXMLDOMProcessingInstruction *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);HRESULT (__stdcall *appendChild)(IXMLDOMProcessingInstruction *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);HRESULT (__stdcall *hasChildNodes)(IXMLDOMProcessingInstruction *This, VARIANT_BOOL *hasChild);HRESULT (__stdcall *get_ownerDocument)(IXMLDOMProcessingInstruction *This, IXMLDOMDocument **DOMDocument);HRESULT (__stdcall *cloneNode)(IXMLDOMProcessingInstruction *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);HRESULT (__stdcall *get_nodeTypeString)(IXMLDOMProcessingInstruction *This, BSTR *nodeType);HRESULT (__stdcall *get_text)(IXMLDOMProcessingInstruction *This, BSTR *text);HRESULT (__stdcall *put_text)(IXMLDOMProcessingInstruction *This, BSTR text);HRESULT (__stdcall *get_specified)(IXMLDOMProcessingInstruction *This, VARIANT_BOOL *isSpecified);HRESULT (__stdcall *get_definition)(IXMLDOMProcessingInstruction *This, IXMLDOMNode **definitionNode);HRESULT (__stdcall *get_nodeTypedValue)(IXMLDOMProcessingInstruction *This, VARIANT *typedValue);HRESULT (__stdcall *put_nodeTypedValue)(IXMLDOMProcessingInstruction *This, VARIANT typedValue);HRESULT (__stdcall *get_dataType)(IXMLDOMProcessingInstruction *This, VARIANT *dataTypeName);HRESULT (__stdcall *put_dataType)(IXMLDOMProcessingInstruction *This, BSTR dataTypeName);HRESULT (__stdcall *get_xml)(IXMLDOMProcessingInstruction *This, BSTR *xmlString);HRESULT (__stdcall *transformNode)(IXMLDOMProcessingInstruction *This, IXMLDOMNode *stylesheet, BSTR *xmlString);HRESULT (__stdcall *selectNodes)(IXMLDOMProcessingInstruction *This, BSTR queryString, IXMLDOMNodeList **resultList);HRESULT (__stdcall *selectSingleNode)(IXMLDOMProcessingInstruction *This, BSTR queryString, IXMLDOMNode **resultNode);HRESULT (__stdcall *get_parsed)(IXMLDOMProcessingInstruction *This, VARIANT_BOOL *isParsed);HRESULT (__stdcall *get_namespaceURI)(IXMLDOMProcessingInstruction *This, BSTR *namespaceURI);HRESULT (__stdcall *get_prefix)(IXMLDOMProcessingInstruction *This, BSTR *prefixString);HRESULT (__stdcall *get_baseName)(IXMLDOMProcessingInstruction *This, BSTR *nameString);HRESULT (__stdcall *transformNodeToObject)(IXMLDOMProcessingInstruction *This, IXMLDOMNode *stylesheet, VARIANT outputObject);HRESULT (__stdcall *get_target)(IXMLDOMProcessingInstruction *This, BSTR *name);HRESULT (__stdcall *get_data)(IXMLDOMProcessingInstruction *This, BSTR *value);HRESULT (__stdcall *put_data)(IXMLDOMProcessingInstruction *This, BSTR value);};
struct IXMLDOMDocumentFragmentVtbl {HRESULT (__stdcall *QueryInterface)(IXMLDOMDocumentFragment *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IXMLDOMDocumentFragment *This);ULONG (__stdcall *Release)(IXMLDOMDocumentFragment *This);HRESULT (__stdcall *GetTypeInfoCount)(IXMLDOMDocumentFragment *This, UINT *pctinfo);HRESULT (__stdcall *GetTypeInfo)(IXMLDOMDocumentFragment *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT (__stdcall *GetIDsOfNames)(IXMLDOMDocumentFragment *This, const IID *const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT (__stdcall *Invoke)(IXMLDOMDocumentFragment *This, DISPID dispIdMember, const IID *const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT (__stdcall *get_nodeName)(IXMLDOMDocumentFragment *This, BSTR *name);HRESULT (__stdcall *get_nodeValue)(IXMLDOMDocumentFragment *This, VARIANT *value);HRESULT (__stdcall *put_nodeValue)(IXMLDOMDocumentFragment *This, VARIANT value);HRESULT (__stdcall *get_nodeType)(IXMLDOMDocumentFragment *This, DOMNodeType *type);HRESULT (__stdcall *get_parentNode)(IXMLDOMDocumentFragment *This, IXMLDOMNode **parent);HRESULT (__stdcall *get_childNodes)(IXMLDOMDocumentFragment *This, IXMLDOMNodeList **childList);HRESULT (__stdcall *get_firstChild)(IXMLDOMDocumentFragment *This, IXMLDOMNode **firstChild);HRESULT (__stdcall *get_lastChild)(IXMLDOMDocumentFragment *This, IXMLDOMNode **lastChild);HRESULT (__stdcall *get_previousSibling)(IXMLDOMDocumentFragment *This, IXMLDOMNode **previousSibling);HRESULT (__stdcall *get_nextSibling)(IXMLDOMDocumentFragment *This, IXMLDOMNode **nextSibling);HRESULT (__stdcall *get_attributes)(IXMLDOMDocumentFragment *This, IXMLDOMNamedNodeMap **attributeMap);HRESULT (__stdcall *insertBefore)(IXMLDOMDocumentFragment *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);HRESULT (__stdcall *replaceChild)(IXMLDOMDocumentFragment *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);HRESULT (__stdcall *removeChild)(IXMLDOMDocumentFragment *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);HRESULT (__stdcall *appendChild)(IXMLDOMDocumentFragment *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);HRESULT (__stdcall *hasChildNodes)(IXMLDOMDocumentFragment *This, VARIANT_BOOL *hasChild);HRESULT (__stdcall *get_ownerDocument)(IXMLDOMDocumentFragment *This, IXMLDOMDocument **DOMDocument);HRESULT (__stdcall *cloneNode)(IXMLDOMDocumentFragment *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);HRESULT (__stdcall *get_nodeTypeString)(IXMLDOMDocumentFragment *This, BSTR *nodeType);HRESULT (__stdcall *get_text)(IXMLDOMDocumentFragment *This, BSTR *text);HRESULT (__stdcall *put_text)(IXMLDOMDocumentFragment *This, BSTR text);HRESULT (__stdcall *get_specified)(IXMLDOMDocumentFragment *This, VARIANT_BOOL *isSpecified);HRESULT (__stdcall *get_definition)(IXMLDOMDocumentFragment *This, IXMLDOMNode **definitionNode);HRESULT (__stdcall *get_nodeTypedValue)(IXMLDOMDocumentFragment *This, VARIANT *typedValue);HRESULT (__stdcall *put_nodeTypedValue)(IXMLDOMDocumentFragment *This, VARIANT typedValue);HRESULT (__stdcall *get_dataType)(IXMLDOMDocumentFragment *This, VARIANT *dataTypeName);HRESULT (__stdcall *put_dataType)(IXMLDOMDocumentFragment *This, BSTR dataTypeName);HRESULT (__stdcall *get_xml)(IXMLDOMDocumentFragment *This, BSTR *xmlString);HRESULT (__stdcall *transformNode)(IXMLDOMDocumentFragment *This, IXMLDOMNode *stylesheet, BSTR *xmlString);HRESULT (__stdcall *selectNodes)(IXMLDOMDocumentFragment *This, BSTR queryString, IXMLDOMNodeList **resultList);HRESULT (__stdcall *selectSingleNode)(IXMLDOMDocumentFragment *This, BSTR queryString, IXMLDOMNode **resultNode);HRESULT (__stdcall *get_parsed)(IXMLDOMDocumentFragment *This, VARIANT_BOOL *isParsed);HRESULT (__stdcall *get_namespaceURI)(IXMLDOMDocumentFragment *This, BSTR *namespaceURI);HRESULT (__stdcall *get_prefix)(IXMLDOMDocumentFragment *This, BSTR *prefixString);HRESULT (__stdcall *get_baseName)(IXMLDOMDocumentFragment *This, BSTR *nameString);HRESULT (__stdcall *transformNodeToObject)(IXMLDOMDocumentFragment *This, IXMLDOMNode *stylesheet, VARIANT outputObject);};
struct IXMLDOMEntityReferenceVtbl {HRESULT (__stdcall *QueryInterface)(IXMLDOMEntityReference *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IXMLDOMEntityReference *This);ULONG (__stdcall *Release)(IXMLDOMEntityReference *This);HRESULT (__stdcall *GetTypeInfoCount)(IXMLDOMEntityReference *This, UINT *pctinfo);HRESULT (__stdcall *GetTypeInfo)(IXMLDOMEntityReference *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT (__stdcall *GetIDsOfNames)(IXMLDOMEntityReference *This, const IID *const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT (__stdcall *Invoke)(IXMLDOMEntityReference *This, DISPID dispIdMember, const IID *const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT (__stdcall *get_nodeName)(IXMLDOMEntityReference *This, BSTR *name);HRESULT (__stdcall *get_nodeValue)(IXMLDOMEntityReference *This, VARIANT *value);HRESULT (__stdcall *put_nodeValue)(IXMLDOMEntityReference *This, VARIANT value);HRESULT (__stdcall *get_nodeType)(IXMLDOMEntityReference *This, DOMNodeType *type);HRESULT (__stdcall *get_parentNode)(IXMLDOMEntityReference *This, IXMLDOMNode **parent);HRESULT (__stdcall *get_childNodes)(IXMLDOMEntityReference *This, IXMLDOMNodeList **childList);HRESULT (__stdcall *get_firstChild)(IXMLDOMEntityReference *This, IXMLDOMNode **firstChild);HRESULT (__stdcall *get_lastChild)(IXMLDOMEntityReference *This, IXMLDOMNode **lastChild);HRESULT (__stdcall *get_previousSibling)(IXMLDOMEntityReference *This, IXMLDOMNode **previousSibling);HRESULT (__stdcall *get_nextSibling)(IXMLDOMEntityReference *This, IXMLDOMNode **nextSibling);HRESULT (__stdcall *get_attributes)(IXMLDOMEntityReference *This, IXMLDOMNamedNodeMap **attributeMap);HRESULT (__stdcall *insertBefore)(IXMLDOMEntityReference *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);HRESULT (__stdcall *replaceChild)(IXMLDOMEntityReference *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);HRESULT (__stdcall *removeChild)(IXMLDOMEntityReference *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);HRESULT (__stdcall *appendChild)(IXMLDOMEntityReference *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);HRESULT (__stdcall *hasChildNodes)(IXMLDOMEntityReference *This, VARIANT_BOOL *hasChild);HRESULT (__stdcall *get_ownerDocument)(IXMLDOMEntityReference *This, IXMLDOMDocument **DOMDocument);HRESULT (__stdcall *cloneNode)(IXMLDOMEntityReference *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);HRESULT (__stdcall *get_nodeTypeString)(IXMLDOMEntityReference *This, BSTR *nodeType);HRESULT (__stdcall *get_text)(IXMLDOMEntityReference *This, BSTR *text);HRESULT (__stdcall *put_text)(IXMLDOMEntityReference *This, BSTR text);HRESULT (__stdcall *get_specified)(IXMLDOMEntityReference *This, VARIANT_BOOL *isSpecified);HRESULT (__stdcall *get_definition)(IXMLDOMEntityReference *This, IXMLDOMNode **definitionNode);HRESULT (__stdcall *get_nodeTypedValue)(IXMLDOMEntityReference *This, VARIANT *typedValue);HRESULT (__stdcall *put_nodeTypedValue)(IXMLDOMEntityReference *This, VARIANT typedValue);HRESULT (__stdcall *get_dataType)(IXMLDOMEntityReference *This, VARIANT *dataTypeName);HRESULT (__stdcall *put_dataType)(IXMLDOMEntityReference *This, BSTR dataTypeName);HRESULT (__stdcall *get_xml)(IXMLDOMEntityReference *This, BSTR *xmlString);HRESULT (__stdcall *transformNode)(IXMLDOMEntityReference *This, IXMLDOMNode *stylesheet, BSTR *xmlString);HRESULT (__stdcall *selectNodes)(IXMLDOMEntityReference *This, BSTR queryString, IXMLDOMNodeList **resultList);HRESULT (__stdcall *selectSingleNode)(IXMLDOMEntityReference *This, BSTR queryString, IXMLDOMNode **resultNode);HRESULT (__stdcall *get_parsed)(IXMLDOMEntityReference *This, VARIANT_BOOL *isParsed);HRESULT (__stdcall *get_namespaceURI)(IXMLDOMEntityReference *This, BSTR *namespaceURI);HRESULT (__stdcall *get_prefix)(IXMLDOMEntityReference *This, BSTR *prefixString);HRESULT (__stdcall *get_baseName)(IXMLDOMEntityReference *This, BSTR *nameString);HRESULT (__stdcall *transformNodeToObject)(IXMLDOMEntityReference *This, IXMLDOMNode *stylesheet, VARIANT outputObject);};
struct IXMLDOMCharacterDataVtbl {HRESULT (__stdcall *QueryInterface)(IXMLDOMCharacterData *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IXMLDOMCharacterData *This);ULONG (__stdcall *Release)(IXMLDOMCharacterData *This);HRESULT (__stdcall *GetTypeInfoCount)(IXMLDOMCharacterData *This, UINT *pctinfo);HRESULT (__stdcall *GetTypeInfo)(IXMLDOMCharacterData *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT (__stdcall *GetIDsOfNames)(IXMLDOMCharacterData *This, const IID *const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT (__stdcall *Invoke)(IXMLDOMCharacterData *This, DISPID dispIdMember, const IID *const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT (__stdcall *get_nodeName)(IXMLDOMCharacterData *This, BSTR *name);HRESULT (__stdcall *get_nodeValue)(IXMLDOMCharacterData *This, VARIANT *value);HRESULT (__stdcall *put_nodeValue)(IXMLDOMCharacterData *This, VARIANT value);HRESULT (__stdcall *get_nodeType)(IXMLDOMCharacterData *This, DOMNodeType *type);HRESULT (__stdcall *get_parentNode)(IXMLDOMCharacterData *This, IXMLDOMNode **parent);HRESULT (__stdcall *get_childNodes)(IXMLDOMCharacterData *This, IXMLDOMNodeList **childList);HRESULT (__stdcall *get_firstChild)(IXMLDOMCharacterData *This, IXMLDOMNode **firstChild);HRESULT (__stdcall *get_lastChild)(IXMLDOMCharacterData *This, IXMLDOMNode **lastChild);HRESULT (__stdcall *get_previousSibling)(IXMLDOMCharacterData *This, IXMLDOMNode **previousSibling);HRESULT (__stdcall *get_nextSibling)(IXMLDOMCharacterData *This, IXMLDOMNode **nextSibling);HRESULT (__stdcall *get_attributes)(IXMLDOMCharacterData *This, IXMLDOMNamedNodeMap **attributeMap);HRESULT (__stdcall *insertBefore)(IXMLDOMCharacterData *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);HRESULT (__stdcall *replaceChild)(IXMLDOMCharacterData *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);HRESULT (__stdcall *removeChild)(IXMLDOMCharacterData *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);HRESULT (__stdcall *appendChild)(IXMLDOMCharacterData *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);HRESULT (__stdcall *hasChildNodes)(IXMLDOMCharacterData *This, VARIANT_BOOL *hasChild);HRESULT (__stdcall *get_ownerDocument)(IXMLDOMCharacterData *This, IXMLDOMDocument **DOMDocument);HRESULT (__stdcall *cloneNode)(IXMLDOMCharacterData *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);HRESULT (__stdcall *get_nodeTypeString)(IXMLDOMCharacterData *This, BSTR *nodeType);HRESULT (__stdcall *get_text)(IXMLDOMCharacterData *This, BSTR *text);HRESULT (__stdcall *put_text)(IXMLDOMCharacterData *This, BSTR text);HRESULT (__stdcall *get_specified)(IXMLDOMCharacterData *This, VARIANT_BOOL *isSpecified);HRESULT (__stdcall *get_definition)(IXMLDOMCharacterData *This, IXMLDOMNode **definitionNode);HRESULT (__stdcall *get_nodeTypedValue)(IXMLDOMCharacterData *This, VARIANT *typedValue);HRESULT (__stdcall *put_nodeTypedValue)(IXMLDOMCharacterData *This, VARIANT typedValue);HRESULT (__stdcall *get_dataType)(IXMLDOMCharacterData *This, VARIANT *dataTypeName);HRESULT (__stdcall *put_dataType)(IXMLDOMCharacterData *This, BSTR dataTypeName);HRESULT (__stdcall *get_xml)(IXMLDOMCharacterData *This, BSTR *xmlString);HRESULT (__stdcall *transformNode)(IXMLDOMCharacterData *This, IXMLDOMNode *stylesheet, BSTR *xmlString);HRESULT (__stdcall *selectNodes)(IXMLDOMCharacterData *This, BSTR queryString, IXMLDOMNodeList **resultList);HRESULT (__stdcall *selectSingleNode)(IXMLDOMCharacterData *This, BSTR queryString, IXMLDOMNode **resultNode);HRESULT (__stdcall *get_parsed)(IXMLDOMCharacterData *This, VARIANT_BOOL *isParsed);HRESULT (__stdcall *get_namespaceURI)(IXMLDOMCharacterData *This, BSTR *namespaceURI);HRESULT (__stdcall *get_prefix)(IXMLDOMCharacterData *This, BSTR *prefixString);HRESULT (__stdcall *get_baseName)(IXMLDOMCharacterData *This, BSTR *nameString);HRESULT (__stdcall *transformNodeToObject)(IXMLDOMCharacterData *This, IXMLDOMNode *stylesheet, VARIANT outputObject);HRESULT (__stdcall *get_data)(IXMLDOMCharacterData *This, BSTR *data);HRESULT (__stdcall *put_data)(IXMLDOMCharacterData *This, BSTR data);HRESULT (__stdcall *get_length)(IXMLDOMCharacterData *This, int *dataLength);HRESULT (__stdcall *substringData)(IXMLDOMCharacterData *This, int offset, int count, BSTR *data);HRESULT (__stdcall *appendData)(IXMLDOMCharacterData *This, BSTR data);HRESULT (__stdcall *insertData)(IXMLDOMCharacterData *This, int offset, BSTR data);HRESULT (__stdcall *deleteData)(IXMLDOMCharacterData *This, int offset, int count);HRESULT (__stdcall *replaceData)(IXMLDOMCharacterData *This, int offset, int count, BSTR data);};
struct IXMLDOMCDATASectionVtbl {HRESULT (__stdcall *QueryInterface)(IXMLDOMCDATASection *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IXMLDOMCDATASection *This);ULONG (__stdcall *Release)(IXMLDOMCDATASection *This);HRESULT (__stdcall *GetTypeInfoCount)(IXMLDOMCDATASection *This, UINT *pctinfo);HRESULT (__stdcall *GetTypeInfo)(IXMLDOMCDATASection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT (__stdcall *GetIDsOfNames)(IXMLDOMCDATASection *This, const IID *const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT (__stdcall *Invoke)(IXMLDOMCDATASection *This, DISPID dispIdMember, const IID *const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT (__stdcall *get_nodeName)(IXMLDOMCDATASection *This, BSTR *name);HRESULT (__stdcall *get_nodeValue)(IXMLDOMCDATASection *This, VARIANT *value);HRESULT (__stdcall *put_nodeValue)(IXMLDOMCDATASection *This, VARIANT value);HRESULT (__stdcall *get_nodeType)(IXMLDOMCDATASection *This, DOMNodeType *type);HRESULT (__stdcall *get_parentNode)(IXMLDOMCDATASection *This, IXMLDOMNode **parent);HRESULT (__stdcall *get_childNodes)(IXMLDOMCDATASection *This, IXMLDOMNodeList **childList);HRESULT (__stdcall *get_firstChild)(IXMLDOMCDATASection *This, IXMLDOMNode **firstChild);HRESULT (__stdcall *get_lastChild)(IXMLDOMCDATASection *This, IXMLDOMNode **lastChild);HRESULT (__stdcall *get_previousSibling)(IXMLDOMCDATASection *This, IXMLDOMNode **previousSibling);HRESULT (__stdcall *get_nextSibling)(IXMLDOMCDATASection *This, IXMLDOMNode **nextSibling);HRESULT (__stdcall *get_attributes)(IXMLDOMCDATASection *This, IXMLDOMNamedNodeMap **attributeMap);HRESULT (__stdcall *insertBefore)(IXMLDOMCDATASection *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);HRESULT (__stdcall *replaceChild)(IXMLDOMCDATASection *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);HRESULT (__stdcall *removeChild)(IXMLDOMCDATASection *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);HRESULT (__stdcall *appendChild)(IXMLDOMCDATASection *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);HRESULT (__stdcall *hasChildNodes)(IXMLDOMCDATASection *This, VARIANT_BOOL *hasChild);HRESULT (__stdcall *get_ownerDocument)(IXMLDOMCDATASection *This, IXMLDOMDocument **DOMDocument);HRESULT (__stdcall *cloneNode)(IXMLDOMCDATASection *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);HRESULT (__stdcall *get_nodeTypeString)(IXMLDOMCDATASection *This, BSTR *nodeType);HRESULT (__stdcall *get_text)(IXMLDOMCDATASection *This, BSTR *text);HRESULT (__stdcall *put_text)(IXMLDOMCDATASection *This, BSTR text);HRESULT (__stdcall *get_specified)(IXMLDOMCDATASection *This, VARIANT_BOOL *isSpecified);HRESULT (__stdcall *get_definition)(IXMLDOMCDATASection *This, IXMLDOMNode **definitionNode);HRESULT (__stdcall *get_nodeTypedValue)(IXMLDOMCDATASection *This, VARIANT *typedValue);HRESULT (__stdcall *put_nodeTypedValue)(IXMLDOMCDATASection *This, VARIANT typedValue);HRESULT (__stdcall *get_dataType)(IXMLDOMCDATASection *This, VARIANT *dataTypeName);HRESULT (__stdcall *put_dataType)(IXMLDOMCDATASection *This, BSTR dataTypeName);HRESULT (__stdcall *get_xml)(IXMLDOMCDATASection *This, BSTR *xmlString);HRESULT (__stdcall *transformNode)(IXMLDOMCDATASection *This, IXMLDOMNode *stylesheet, BSTR *xmlString);HRESULT (__stdcall *selectNodes)(IXMLDOMCDATASection *This, BSTR queryString, IXMLDOMNodeList **resultList);HRESULT (__stdcall *selectSingleNode)(IXMLDOMCDATASection *This, BSTR queryString, IXMLDOMNode **resultNode);HRESULT (__stdcall *get_parsed)(IXMLDOMCDATASection *This, VARIANT_BOOL *isParsed);HRESULT (__stdcall *get_namespaceURI)(IXMLDOMCDATASection *This, BSTR *namespaceURI);HRESULT (__stdcall *get_prefix)(IXMLDOMCDATASection *This, BSTR *prefixString);HRESULT (__stdcall *get_baseName)(IXMLDOMCDATASection *This, BSTR *nameString);HRESULT (__stdcall *transformNodeToObject)(IXMLDOMCDATASection *This, IXMLDOMNode *stylesheet, VARIANT outputObject);HRESULT (__stdcall *get_data)(IXMLDOMCDATASection *This, BSTR *data);HRESULT (__stdcall *put_data)(IXMLDOMCDATASection *This, BSTR data);HRESULT (__stdcall *get_length)(IXMLDOMCDATASection *This, int *dataLength);HRESULT (__stdcall *substringData)(IXMLDOMCDATASection *This, int offset, int count, BSTR *data);HRESULT (__stdcall *appendData)(IXMLDOMCDATASection *This, BSTR data);HRESULT (__stdcall *insertData)(IXMLDOMCDATASection *This, int offset, BSTR data);HRESULT (__stdcall *deleteData)(IXMLDOMCDATASection *This, int offset, int count);HRESULT (__stdcall *replaceData)(IXMLDOMCDATASection *This, int offset, int count, BSTR data);HRESULT (__stdcall *splitText)(IXMLDOMCDATASection *This, int offset, IXMLDOMText **rightHandTextNode);};
struct IXMLDOMDocumentTypeVtbl {HRESULT (__stdcall *QueryInterface)(IXMLDOMDocumentType *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IXMLDOMDocumentType *This);ULONG (__stdcall *Release)(IXMLDOMDocumentType *This);HRESULT (__stdcall *GetTypeInfoCount)(IXMLDOMDocumentType *This, UINT *pctinfo);HRESULT (__stdcall *GetTypeInfo)(IXMLDOMDocumentType *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT (__stdcall *GetIDsOfNames)(IXMLDOMDocumentType *This, const IID *const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT (__stdcall *Invoke)(IXMLDOMDocumentType *This, DISPID dispIdMember, const IID *const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT (__stdcall *get_nodeName)(IXMLDOMDocumentType *This, BSTR *name);HRESULT (__stdcall *get_nodeValue)(IXMLDOMDocumentType *This, VARIANT *value);HRESULT (__stdcall *put_nodeValue)(IXMLDOMDocumentType *This, VARIANT value);HRESULT (__stdcall *get_nodeType)(IXMLDOMDocumentType *This, DOMNodeType *type);HRESULT (__stdcall *get_parentNode)(IXMLDOMDocumentType *This, IXMLDOMNode **parent);HRESULT (__stdcall *get_childNodes)(IXMLDOMDocumentType *This, IXMLDOMNodeList **childList);HRESULT (__stdcall *get_firstChild)(IXMLDOMDocumentType *This, IXMLDOMNode **firstChild);HRESULT (__stdcall *get_lastChild)(IXMLDOMDocumentType *This, IXMLDOMNode **lastChild);HRESULT (__stdcall *get_previousSibling)(IXMLDOMDocumentType *This, IXMLDOMNode **previousSibling);HRESULT (__stdcall *get_nextSibling)(IXMLDOMDocumentType *This, IXMLDOMNode **nextSibling);HRESULT (__stdcall *get_attributes)(IXMLDOMDocumentType *This, IXMLDOMNamedNodeMap **attributeMap);HRESULT (__stdcall *insertBefore)(IXMLDOMDocumentType *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);HRESULT (__stdcall *replaceChild)(IXMLDOMDocumentType *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);HRESULT (__stdcall *removeChild)(IXMLDOMDocumentType *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);HRESULT (__stdcall *appendChild)(IXMLDOMDocumentType *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);HRESULT (__stdcall *hasChildNodes)(IXMLDOMDocumentType *This, VARIANT_BOOL *hasChild);HRESULT (__stdcall *get_ownerDocument)(IXMLDOMDocumentType *This, IXMLDOMDocument **DOMDocument);HRESULT (__stdcall *cloneNode)(IXMLDOMDocumentType *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);HRESULT (__stdcall *get_nodeTypeString)(IXMLDOMDocumentType *This, BSTR *nodeType);HRESULT (__stdcall *get_text)(IXMLDOMDocumentType *This, BSTR *text);HRESULT (__stdcall *put_text)(IXMLDOMDocumentType *This, BSTR text);HRESULT (__stdcall *get_specified)(IXMLDOMDocumentType *This, VARIANT_BOOL *isSpecified);HRESULT (__stdcall *get_definition)(IXMLDOMDocumentType *This, IXMLDOMNode **definitionNode);HRESULT (__stdcall *get_nodeTypedValue)(IXMLDOMDocumentType *This, VARIANT *typedValue);HRESULT (__stdcall *put_nodeTypedValue)(IXMLDOMDocumentType *This, VARIANT typedValue);HRESULT (__stdcall *get_dataType)(IXMLDOMDocumentType *This, VARIANT *dataTypeName);HRESULT (__stdcall *put_dataType)(IXMLDOMDocumentType *This, BSTR dataTypeName);HRESULT (__stdcall *get_xml)(IXMLDOMDocumentType *This, BSTR *xmlString);HRESULT (__stdcall *transformNode)(IXMLDOMDocumentType *This, IXMLDOMNode *stylesheet, BSTR *xmlString);HRESULT (__stdcall *selectNodes)(IXMLDOMDocumentType *This, BSTR queryString, IXMLDOMNodeList **resultList);HRESULT (__stdcall *selectSingleNode)(IXMLDOMDocumentType *This, BSTR queryString, IXMLDOMNode **resultNode);HRESULT (__stdcall *get_parsed)(IXMLDOMDocumentType *This, VARIANT_BOOL *isParsed);HRESULT (__stdcall *get_namespaceURI)(IXMLDOMDocumentType *This, BSTR *namespaceURI);HRESULT (__stdcall *get_prefix)(IXMLDOMDocumentType *This, BSTR *prefixString);HRESULT (__stdcall *get_baseName)(IXMLDOMDocumentType *This, BSTR *nameString);HRESULT (__stdcall *transformNodeToObject)(IXMLDOMDocumentType *This, IXMLDOMNode *stylesheet, VARIANT outputObject);HRESULT (__stdcall *get_name)(IXMLDOMDocumentType *This, BSTR *rootName);HRESULT (__stdcall *get_entities)(IXMLDOMDocumentType *This, IXMLDOMNamedNodeMap **entityMap);HRESULT (__stdcall *get_notations)(IXMLDOMDocumentType *This, IXMLDOMNamedNodeMap **notationMap);};
struct IXMLDOMAttributeVtbl {HRESULT (__stdcall *QueryInterface)(IXMLDOMAttribute *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IXMLDOMAttribute *This);ULONG (__stdcall *Release)(IXMLDOMAttribute *This);HRESULT (__stdcall *GetTypeInfoCount)(IXMLDOMAttribute *This, UINT *pctinfo);HRESULT (__stdcall *GetTypeInfo)(IXMLDOMAttribute *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT (__stdcall *GetIDsOfNames)(IXMLDOMAttribute *This, const IID *const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT (__stdcall *Invoke)(IXMLDOMAttribute *This, DISPID dispIdMember, const IID *const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT (__stdcall *get_nodeName)(IXMLDOMAttribute *This, BSTR *name);HRESULT (__stdcall *get_nodeValue)(IXMLDOMAttribute *This, VARIANT *value);HRESULT (__stdcall *put_nodeValue)(IXMLDOMAttribute *This, VARIANT value);HRESULT (__stdcall *get_nodeType)(IXMLDOMAttribute *This, DOMNodeType *type);HRESULT (__stdcall *get_parentNode)(IXMLDOMAttribute *This, IXMLDOMNode **parent);HRESULT (__stdcall *get_childNodes)(IXMLDOMAttribute *This, IXMLDOMNodeList **childList);HRESULT (__stdcall *get_firstChild)(IXMLDOMAttribute *This, IXMLDOMNode **firstChild);HRESULT (__stdcall *get_lastChild)(IXMLDOMAttribute *This, IXMLDOMNode **lastChild);HRESULT (__stdcall *get_previousSibling)(IXMLDOMAttribute *This, IXMLDOMNode **previousSibling);HRESULT (__stdcall *get_nextSibling)(IXMLDOMAttribute *This, IXMLDOMNode **nextSibling);HRESULT (__stdcall *get_attributes)(IXMLDOMAttribute *This, IXMLDOMNamedNodeMap **attributeMap);HRESULT (__stdcall *insertBefore)(IXMLDOMAttribute *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);HRESULT (__stdcall *replaceChild)(IXMLDOMAttribute *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);HRESULT (__stdcall *removeChild)(IXMLDOMAttribute *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);HRESULT (__stdcall *appendChild)(IXMLDOMAttribute *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);HRESULT (__stdcall *hasChildNodes)(IXMLDOMAttribute *This, VARIANT_BOOL *hasChild);HRESULT (__stdcall *get_ownerDocument)(IXMLDOMAttribute *This, IXMLDOMDocument **DOMDocument);HRESULT (__stdcall *cloneNode)(IXMLDOMAttribute *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);HRESULT (__stdcall *get_nodeTypeString)(IXMLDOMAttribute *This, BSTR *nodeType);HRESULT (__stdcall *get_text)(IXMLDOMAttribute *This, BSTR *text);HRESULT (__stdcall *put_text)(IXMLDOMAttribute *This, BSTR text);HRESULT (__stdcall *get_specified)(IXMLDOMAttribute *This, VARIANT_BOOL *isSpecified);HRESULT (__stdcall *get_definition)(IXMLDOMAttribute *This, IXMLDOMNode **definitionNode);HRESULT (__stdcall *get_nodeTypedValue)(IXMLDOMAttribute *This, VARIANT *typedValue);HRESULT (__stdcall *put_nodeTypedValue)(IXMLDOMAttribute *This, VARIANT typedValue);HRESULT (__stdcall *get_dataType)(IXMLDOMAttribute *This, VARIANT *dataTypeName);HRESULT (__stdcall *put_dataType)(IXMLDOMAttribute *This, BSTR dataTypeName);HRESULT (__stdcall *get_xml)(IXMLDOMAttribute *This, BSTR *xmlString);HRESULT (__stdcall *transformNode)(IXMLDOMAttribute *This, IXMLDOMNode *stylesheet, BSTR *xmlString);HRESULT (__stdcall *selectNodes)(IXMLDOMAttribute *This, BSTR queryString, IXMLDOMNodeList **resultList);HRESULT (__stdcall *selectSingleNode)(IXMLDOMAttribute *This, BSTR queryString, IXMLDOMNode **resultNode);HRESULT (__stdcall *get_parsed)(IXMLDOMAttribute *This, VARIANT_BOOL *isParsed);HRESULT (__stdcall *get_namespaceURI)(IXMLDOMAttribute *This, BSTR *namespaceURI);HRESULT (__stdcall *get_prefix)(IXMLDOMAttribute *This, BSTR *prefixString);HRESULT (__stdcall *get_baseName)(IXMLDOMAttribute *This, BSTR *nameString);HRESULT (__stdcall *transformNodeToObject)(IXMLDOMAttribute *This, IXMLDOMNode *stylesheet, VARIANT outputObject);HRESULT (__stdcall *get_name)(IXMLDOMAttribute *This, BSTR *attributeName);HRESULT (__stdcall *get_value)(IXMLDOMAttribute *This, VARIANT *attributeValue);HRESULT (__stdcall *put_value)(IXMLDOMAttribute *This, VARIANT attributeValue);};
struct ICreateTypeInfoVtbl {HRESULT (__stdcall *QueryInterface)(ICreateTypeInfo *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(ICreateTypeInfo *This);ULONG (__stdcall *Release)(ICreateTypeInfo *This);HRESULT (__stdcall *SetGuid)(ICreateTypeInfo *This, const GUID *const guid);HRESULT (__stdcall *SetTypeFlags)(ICreateTypeInfo *This, UINT uTypeFlags);HRESULT (__stdcall *SetDocString)(ICreateTypeInfo *This, LPOLESTR pStrDoc);HRESULT (__stdcall *SetHelpContext)(ICreateTypeInfo *This, DWORD dwHelpContext);HRESULT (__stdcall *SetVersion)(ICreateTypeInfo *This, WORD wMajorVerNum, WORD wMinorVerNum);HRESULT (__stdcall *AddRefTypeInfo)(ICreateTypeInfo *This, ITypeInfo *pTInfo, HREFTYPE *phRefType);HRESULT (__stdcall *AddFuncDesc)(ICreateTypeInfo *This, UINT index, FUNCDESC *pFuncDesc);HRESULT (__stdcall *AddImplType)(ICreateTypeInfo *This, UINT index, HREFTYPE hRefType);HRESULT (__stdcall *SetImplTypeFlags)(ICreateTypeInfo *This, UINT index, INT implTypeFlags);HRESULT (__stdcall *SetAlignment)(ICreateTypeInfo *This, WORD cbAlignment);HRESULT (__stdcall *SetSchema)(ICreateTypeInfo *This, LPOLESTR pStrSchema);HRESULT (__stdcall *AddVarDesc)(ICreateTypeInfo *This, UINT index, VARDESC *pVarDesc);HRESULT (__stdcall *SetFuncAndParamNames)(ICreateTypeInfo *This, UINT index, LPOLESTR *rgszNames, UINT cNames);HRESULT (__stdcall *SetVarName)(ICreateTypeInfo *This, UINT index, LPOLESTR szName);HRESULT (__stdcall *SetTypeDescAlias)(ICreateTypeInfo *This, TYPEDESC *pTDescAlias);HRESULT (__stdcall *DefineFuncAsDllEntry)(ICreateTypeInfo *This, UINT index, LPOLESTR szDllName, LPOLESTR szProcName);HRESULT (__stdcall *SetFuncDocString)(ICreateTypeInfo *This, UINT index, LPOLESTR szDocString);HRESULT (__stdcall *SetVarDocString)(ICreateTypeInfo *This, UINT index, LPOLESTR szDocString);HRESULT (__stdcall *SetFuncHelpContext)(ICreateTypeInfo *This, UINT index, DWORD dwHelpContext);HRESULT (__stdcall *SetVarHelpContext)(ICreateTypeInfo *This, UINT index, DWORD dwHelpContext);HRESULT (__stdcall *SetMops)(ICreateTypeInfo *This, UINT index, BSTR bstrMops);HRESULT (__stdcall *SetTypeIdldesc)(ICreateTypeInfo *This, IDLDESC *pIdlDesc);HRESULT (__stdcall *LayOut)(ICreateTypeInfo *This);};
struct IXMLDOMDocumentVtbl {HRESULT (__stdcall *QueryInterface)(IXMLDOMDocument *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IXMLDOMDocument *This);ULONG (__stdcall *Release)(IXMLDOMDocument *This);HRESULT (__stdcall *GetTypeInfoCount)(IXMLDOMDocument *This, UINT *pctinfo);HRESULT (__stdcall *GetTypeInfo)(IXMLDOMDocument *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT (__stdcall *GetIDsOfNames)(IXMLDOMDocument *This, const IID *const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT (__stdcall *Invoke)(IXMLDOMDocument *This, DISPID dispIdMember, const IID *const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT (__stdcall *get_nodeName)(IXMLDOMDocument *This, BSTR *name);HRESULT (__stdcall *get_nodeValue)(IXMLDOMDocument *This, VARIANT *value);HRESULT (__stdcall *put_nodeValue)(IXMLDOMDocument *This, VARIANT value);HRESULT (__stdcall *get_nodeType)(IXMLDOMDocument *This, DOMNodeType *type);HRESULT (__stdcall *get_parentNode)(IXMLDOMDocument *This, IXMLDOMNode **parent);HRESULT (__stdcall *get_childNodes)(IXMLDOMDocument *This, IXMLDOMNodeList **childList);HRESULT (__stdcall *get_firstChild)(IXMLDOMDocument *This, IXMLDOMNode **firstChild);HRESULT (__stdcall *get_lastChild)(IXMLDOMDocument *This, IXMLDOMNode **lastChild);HRESULT (__stdcall *get_previousSibling)(IXMLDOMDocument *This, IXMLDOMNode **previousSibling);HRESULT (__stdcall *get_nextSibling)(IXMLDOMDocument *This, IXMLDOMNode **nextSibling);HRESULT (__stdcall *get_attributes)(IXMLDOMDocument *This, IXMLDOMNamedNodeMap **attributeMap);HRESULT (__stdcall *insertBefore)(IXMLDOMDocument *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);HRESULT (__stdcall *replaceChild)(IXMLDOMDocument *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);HRESULT (__stdcall *removeChild)(IXMLDOMDocument *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);HRESULT (__stdcall *appendChild)(IXMLDOMDocument *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);HRESULT (__stdcall *hasChildNodes)(IXMLDOMDocument *This, VARIANT_BOOL *hasChild);HRESULT (__stdcall *get_ownerDocument)(IXMLDOMDocument *This, IXMLDOMDocument **DOMDocument);HRESULT (__stdcall *cloneNode)(IXMLDOMDocument *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);HRESULT (__stdcall *get_nodeTypeString)(IXMLDOMDocument *This, BSTR *nodeType);HRESULT (__stdcall *get_text)(IXMLDOMDocument *This, BSTR *text);HRESULT (__stdcall *put_text)(IXMLDOMDocument *This, BSTR text);HRESULT (__stdcall *get_specified)(IXMLDOMDocument *This, VARIANT_BOOL *isSpecified);HRESULT (__stdcall *get_definition)(IXMLDOMDocument *This, IXMLDOMNode **definitionNode);HRESULT (__stdcall *get_nodeTypedValue)(IXMLDOMDocument *This, VARIANT *typedValue);HRESULT (__stdcall *put_nodeTypedValue)(IXMLDOMDocument *This, VARIANT typedValue);HRESULT (__stdcall *get_dataType)(IXMLDOMDocument *This, VARIANT *dataTypeName);HRESULT (__stdcall *put_dataType)(IXMLDOMDocument *This, BSTR dataTypeName);HRESULT (__stdcall *get_xml)(IXMLDOMDocument *This, BSTR *xmlString);HRESULT (__stdcall *transformNode)(IXMLDOMDocument *This, IXMLDOMNode *stylesheet, BSTR *xmlString);HRESULT (__stdcall *selectNodes)(IXMLDOMDocument *This, BSTR queryString, IXMLDOMNodeList **resultList);HRESULT (__stdcall *selectSingleNode)(IXMLDOMDocument *This, BSTR queryString, IXMLDOMNode **resultNode);HRESULT (__stdcall *get_parsed)(IXMLDOMDocument *This, VARIANT_BOOL *isParsed);HRESULT (__stdcall *get_namespaceURI)(IXMLDOMDocument *This, BSTR *namespaceURI);HRESULT (__stdcall *get_prefix)(IXMLDOMDocument *This, BSTR *prefixString);HRESULT (__stdcall *get_baseName)(IXMLDOMDocument *This, BSTR *nameString);HRESULT (__stdcall *transformNodeToObject)(IXMLDOMDocument *This, IXMLDOMNode *stylesheet, VARIANT outputObject);HRESULT (__stdcall *get_doctype)(IXMLDOMDocument *This, IXMLDOMDocumentType **documentType);HRESULT (__stdcall *get_implementation)(IXMLDOMDocument *This, IXMLDOMImplementation **impl);HRESULT (__stdcall *get_documentElement)(IXMLDOMDocument *This, IXMLDOMElement **DOMElement);HRESULT (__stdcall *putref_documentElement)(IXMLDOMDocument *This, IXMLDOMElement *DOMElement);HRESULT (__stdcall *createElement)(IXMLDOMDocument *This, BSTR tagName, IXMLDOMElement **element);HRESULT (__stdcall *createDocumentFragment)(IXMLDOMDocument *This, IXMLDOMDocumentFragment **docFrag);HRESULT (__stdcall *createTextNode)(IXMLDOMDocument *This, BSTR data, IXMLDOMText **text);HRESULT (__stdcall *createComment)(IXMLDOMDocument *This, BSTR data, IXMLDOMComment **comment);HRESULT (__stdcall *createCDATASection)(IXMLDOMDocument *This, BSTR data, IXMLDOMCDATASection **cdata);HRESULT (__stdcall *createProcessingInstruction)(IXMLDOMDocument *This, BSTR target, BSTR data, IXMLDOMProcessingInstruction **pi);HRESULT (__stdcall *createAttribute)(IXMLDOMDocument *This, BSTR name, IXMLDOMAttribute **attribute);HRESULT (__stdcall *createEntityReference)(IXMLDOMDocument *This, BSTR name, IXMLDOMEntityReference **entityRef);HRESULT (__stdcall *getElementsByTagName)(IXMLDOMDocument *This, BSTR tagName, IXMLDOMNodeList **resultList);HRESULT (__stdcall *createNode)(IXMLDOMDocument *This, VARIANT Type, BSTR name, BSTR namespaceURI, IXMLDOMNode **node);HRESULT (__stdcall *nodeFromID)(IXMLDOMDocument *This, BSTR idString, IXMLDOMNode **node);HRESULT (__stdcall *load)(IXMLDOMDocument *This, VARIANT xmlSource, VARIANT_BOOL *isSuccessful);HRESULT (__stdcall *get_readyState)(IXMLDOMDocument *This, int *value);HRESULT (__stdcall *get_parseError)(IXMLDOMDocument *This, IXMLDOMParseError **errorObj);HRESULT (__stdcall *get_url)(IXMLDOMDocument *This, BSTR *urlString);HRESULT (__stdcall *get_async)(IXMLDOMDocument *This, VARIANT_BOOL *isAsync);HRESULT (__stdcall *put_async)(IXMLDOMDocument *This, VARIANT_BOOL isAsync);HRESULT (__stdcall *abort)(IXMLDOMDocument *This);HRESULT (__stdcall *loadXML)(IXMLDOMDocument *This, BSTR bstrXML, VARIANT_BOOL *isSuccessful);HRESULT (__stdcall *save)(IXMLDOMDocument *This, VARIANT desination);HRESULT (__stdcall *get_validateOnParse)(IXMLDOMDocument *This, VARIANT_BOOL *isValidating);HRESULT (__stdcall *put_validateOnParse)(IXMLDOMDocument *This, VARIANT_BOOL isValidating);HRESULT (__stdcall *get_resolveExternals)(IXMLDOMDocument *This, VARIANT_BOOL *isResolving);HRESULT (__stdcall *put_resolveExternals)(IXMLDOMDocument *This, VARIANT_BOOL isResolving);HRESULT (__stdcall *get_preserveWhiteSpace)(IXMLDOMDocument *This, VARIANT_BOOL *isPreserving);HRESULT (__stdcall *put_preserveWhiteSpace)(IXMLDOMDocument *This, VARIANT_BOOL isPreserving);HRESULT (__stdcall *put_onreadystatechange)(IXMLDOMDocument *This, VARIANT readystatechangeSink);HRESULT (__stdcall *put_ondataavailable)(IXMLDOMDocument *This, VARIANT ondataavailableSink);HRESULT (__stdcall *put_ontransformnode)(IXMLDOMDocument *This, VARIANT ontransformnodeSink);};
struct IXMLDOMNotationVtbl {HRESULT (__stdcall *QueryInterface)(IXMLDOMNotation *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IXMLDOMNotation *This);ULONG (__stdcall *Release)(IXMLDOMNotation *This);HRESULT (__stdcall *GetTypeInfoCount)(IXMLDOMNotation *This, UINT *pctinfo);HRESULT (__stdcall *GetTypeInfo)(IXMLDOMNotation *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT (__stdcall *GetIDsOfNames)(IXMLDOMNotation *This, const IID *const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT (__stdcall *Invoke)(IXMLDOMNotation *This, DISPID dispIdMember, const IID *const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT (__stdcall *get_nodeName)(IXMLDOMNotation *This, BSTR *name);HRESULT (__stdcall *get_nodeValue)(IXMLDOMNotation *This, VARIANT *value);HRESULT (__stdcall *put_nodeValue)(IXMLDOMNotation *This, VARIANT value);HRESULT (__stdcall *get_nodeType)(IXMLDOMNotation *This, DOMNodeType *type);HRESULT (__stdcall *get_parentNode)(IXMLDOMNotation *This, IXMLDOMNode **parent);HRESULT (__stdcall *get_childNodes)(IXMLDOMNotation *This, IXMLDOMNodeList **childList);HRESULT (__stdcall *get_firstChild)(IXMLDOMNotation *This, IXMLDOMNode **firstChild);HRESULT (__stdcall *get_lastChild)(IXMLDOMNotation *This, IXMLDOMNode **lastChild);HRESULT (__stdcall *get_previousSibling)(IXMLDOMNotation *This, IXMLDOMNode **previousSibling);HRESULT (__stdcall *get_nextSibling)(IXMLDOMNotation *This, IXMLDOMNode **nextSibling);HRESULT (__stdcall *get_attributes)(IXMLDOMNotation *This, IXMLDOMNamedNodeMap **attributeMap);HRESULT (__stdcall *insertBefore)(IXMLDOMNotation *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);HRESULT (__stdcall *replaceChild)(IXMLDOMNotation *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);HRESULT (__stdcall *removeChild)(IXMLDOMNotation *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);HRESULT (__stdcall *appendChild)(IXMLDOMNotation *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);HRESULT (__stdcall *hasChildNodes)(IXMLDOMNotation *This, VARIANT_BOOL *hasChild);HRESULT (__stdcall *get_ownerDocument)(IXMLDOMNotation *This, IXMLDOMDocument **DOMDocument);HRESULT (__stdcall *cloneNode)(IXMLDOMNotation *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);HRESULT (__stdcall *get_nodeTypeString)(IXMLDOMNotation *This, BSTR *nodeType);HRESULT (__stdcall *get_text)(IXMLDOMNotation *This, BSTR *text);HRESULT (__stdcall *put_text)(IXMLDOMNotation *This, BSTR text);HRESULT (__stdcall *get_specified)(IXMLDOMNotation *This, VARIANT_BOOL *isSpecified);HRESULT (__stdcall *get_definition)(IXMLDOMNotation *This, IXMLDOMNode **definitionNode);HRESULT (__stdcall *get_nodeTypedValue)(IXMLDOMNotation *This, VARIANT *typedValue);HRESULT (__stdcall *put_nodeTypedValue)(IXMLDOMNotation *This, VARIANT typedValue);HRESULT (__stdcall *get_dataType)(IXMLDOMNotation *This, VARIANT *dataTypeName);HRESULT (__stdcall *put_dataType)(IXMLDOMNotation *This, BSTR dataTypeName);HRESULT (__stdcall *get_xml)(IXMLDOMNotation *This, BSTR *xmlString);HRESULT (__stdcall *transformNode)(IXMLDOMNotation *This, IXMLDOMNode *stylesheet, BSTR *xmlString);HRESULT (__stdcall *selectNodes)(IXMLDOMNotation *This, BSTR queryString, IXMLDOMNodeList **resultList);HRESULT (__stdcall *selectSingleNode)(IXMLDOMNotation *This, BSTR queryString, IXMLDOMNode **resultNode);HRESULT (__stdcall *get_parsed)(IXMLDOMNotation *This, VARIANT_BOOL *isParsed);HRESULT (__stdcall *get_namespaceURI)(IXMLDOMNotation *This, BSTR *namespaceURI);HRESULT (__stdcall *get_prefix)(IXMLDOMNotation *This, BSTR *prefixString);HRESULT (__stdcall *get_baseName)(IXMLDOMNotation *This, BSTR *nameString);HRESULT (__stdcall *transformNodeToObject)(IXMLDOMNotation *This, IXMLDOMNode *stylesheet, VARIANT outputObject);HRESULT (__stdcall *get_publicId)(IXMLDOMNotation *This, VARIANT *publicID);HRESULT (__stdcall *get_systemId)(IXMLDOMNotation *This, VARIANT *systemID);};
struct IXMLDOMCommentVtbl {HRESULT (__stdcall *QueryInterface)(IXMLDOMComment *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IXMLDOMComment *This);ULONG (__stdcall *Release)(IXMLDOMComment *This);HRESULT (__stdcall *GetTypeInfoCount)(IXMLDOMComment *This, UINT *pctinfo);HRESULT (__stdcall *GetTypeInfo)(IXMLDOMComment *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT (__stdcall *GetIDsOfNames)(IXMLDOMComment *This, const IID *const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT (__stdcall *Invoke)(IXMLDOMComment *This, DISPID dispIdMember, const IID *const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT (__stdcall *get_nodeName)(IXMLDOMComment *This, BSTR *name);HRESULT (__stdcall *get_nodeValue)(IXMLDOMComment *This, VARIANT *value);HRESULT (__stdcall *put_nodeValue)(IXMLDOMComment *This, VARIANT value);HRESULT (__stdcall *get_nodeType)(IXMLDOMComment *This, DOMNodeType *type);HRESULT (__stdcall *get_parentNode)(IXMLDOMComment *This, IXMLDOMNode **parent);HRESULT (__stdcall *get_childNodes)(IXMLDOMComment *This, IXMLDOMNodeList **childList);HRESULT (__stdcall *get_firstChild)(IXMLDOMComment *This, IXMLDOMNode **firstChild);HRESULT (__stdcall *get_lastChild)(IXMLDOMComment *This, IXMLDOMNode **lastChild);HRESULT (__stdcall *get_previousSibling)(IXMLDOMComment *This, IXMLDOMNode **previousSibling);HRESULT (__stdcall *get_nextSibling)(IXMLDOMComment *This, IXMLDOMNode **nextSibling);HRESULT (__stdcall *get_attributes)(IXMLDOMComment *This, IXMLDOMNamedNodeMap **attributeMap);HRESULT (__stdcall *insertBefore)(IXMLDOMComment *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);HRESULT (__stdcall *replaceChild)(IXMLDOMComment *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);HRESULT (__stdcall *removeChild)(IXMLDOMComment *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);HRESULT (__stdcall *appendChild)(IXMLDOMComment *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);HRESULT (__stdcall *hasChildNodes)(IXMLDOMComment *This, VARIANT_BOOL *hasChild);HRESULT (__stdcall *get_ownerDocument)(IXMLDOMComment *This, IXMLDOMDocument **DOMDocument);HRESULT (__stdcall *cloneNode)(IXMLDOMComment *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);HRESULT (__stdcall *get_nodeTypeString)(IXMLDOMComment *This, BSTR *nodeType);HRESULT (__stdcall *get_text)(IXMLDOMComment *This, BSTR *text);HRESULT (__stdcall *put_text)(IXMLDOMComment *This, BSTR text);HRESULT (__stdcall *get_specified)(IXMLDOMComment *This, VARIANT_BOOL *isSpecified);HRESULT (__stdcall *get_definition)(IXMLDOMComment *This, IXMLDOMNode **definitionNode);HRESULT (__stdcall *get_nodeTypedValue)(IXMLDOMComment *This, VARIANT *typedValue);HRESULT (__stdcall *put_nodeTypedValue)(IXMLDOMComment *This, VARIANT typedValue);HRESULT (__stdcall *get_dataType)(IXMLDOMComment *This, VARIANT *dataTypeName);HRESULT (__stdcall *put_dataType)(IXMLDOMComment *This, BSTR dataTypeName);HRESULT (__stdcall *get_xml)(IXMLDOMComment *This, BSTR *xmlString);HRESULT (__stdcall *transformNode)(IXMLDOMComment *This, IXMLDOMNode *stylesheet, BSTR *xmlString);HRESULT (__stdcall *selectNodes)(IXMLDOMComment *This, BSTR queryString, IXMLDOMNodeList **resultList);HRESULT (__stdcall *selectSingleNode)(IXMLDOMComment *This, BSTR queryString, IXMLDOMNode **resultNode);HRESULT (__stdcall *get_parsed)(IXMLDOMComment *This, VARIANT_BOOL *isParsed);HRESULT (__stdcall *get_namespaceURI)(IXMLDOMComment *This, BSTR *namespaceURI);HRESULT (__stdcall *get_prefix)(IXMLDOMComment *This, BSTR *prefixString);HRESULT (__stdcall *get_baseName)(IXMLDOMComment *This, BSTR *nameString);HRESULT (__stdcall *transformNodeToObject)(IXMLDOMComment *This, IXMLDOMNode *stylesheet, VARIANT outputObject);HRESULT (__stdcall *get_data)(IXMLDOMComment *This, BSTR *data);HRESULT (__stdcall *put_data)(IXMLDOMComment *This, BSTR data);HRESULT (__stdcall *get_length)(IXMLDOMComment *This, int *dataLength);HRESULT (__stdcall *substringData)(IXMLDOMComment *This, int offset, int count, BSTR *data);HRESULT (__stdcall *appendData)(IXMLDOMComment *This, BSTR data);HRESULT (__stdcall *insertData)(IXMLDOMComment *This, int offset, BSTR data);HRESULT (__stdcall *deleteData)(IXMLDOMComment *This, int offset, int count);HRESULT (__stdcall *replaceData)(IXMLDOMComment *This, int offset, int count, BSTR data);};
struct IXMLDOMElementVtbl {HRESULT (__stdcall *QueryInterface)(IXMLDOMElement *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IXMLDOMElement *This);ULONG (__stdcall *Release)(IXMLDOMElement *This);HRESULT (__stdcall *GetTypeInfoCount)(IXMLDOMElement *This, UINT *pctinfo);HRESULT (__stdcall *GetTypeInfo)(IXMLDOMElement *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT (__stdcall *GetIDsOfNames)(IXMLDOMElement *This, const IID *const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT (__stdcall *Invoke)(IXMLDOMElement *This, DISPID dispIdMember, const IID *const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT (__stdcall *get_nodeName)(IXMLDOMElement *This, BSTR *name);HRESULT (__stdcall *get_nodeValue)(IXMLDOMElement *This, VARIANT *value);HRESULT (__stdcall *put_nodeValue)(IXMLDOMElement *This, VARIANT value);HRESULT (__stdcall *get_nodeType)(IXMLDOMElement *This, DOMNodeType *type);HRESULT (__stdcall *get_parentNode)(IXMLDOMElement *This, IXMLDOMNode **parent);HRESULT (__stdcall *get_childNodes)(IXMLDOMElement *This, IXMLDOMNodeList **childList);HRESULT (__stdcall *get_firstChild)(IXMLDOMElement *This, IXMLDOMNode **firstChild);HRESULT (__stdcall *get_lastChild)(IXMLDOMElement *This, IXMLDOMNode **lastChild);HRESULT (__stdcall *get_previousSibling)(IXMLDOMElement *This, IXMLDOMNode **previousSibling);HRESULT (__stdcall *get_nextSibling)(IXMLDOMElement *This, IXMLDOMNode **nextSibling);HRESULT (__stdcall *get_attributes)(IXMLDOMElement *This, IXMLDOMNamedNodeMap **attributeMap);HRESULT (__stdcall *insertBefore)(IXMLDOMElement *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);HRESULT (__stdcall *replaceChild)(IXMLDOMElement *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);HRESULT (__stdcall *removeChild)(IXMLDOMElement *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);HRESULT (__stdcall *appendChild)(IXMLDOMElement *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);HRESULT (__stdcall *hasChildNodes)(IXMLDOMElement *This, VARIANT_BOOL *hasChild);HRESULT (__stdcall *get_ownerDocument)(IXMLDOMElement *This, IXMLDOMDocument **DOMDocument);HRESULT (__stdcall *cloneNode)(IXMLDOMElement *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);HRESULT (__stdcall *get_nodeTypeString)(IXMLDOMElement *This, BSTR *nodeType);HRESULT (__stdcall *get_text)(IXMLDOMElement *This, BSTR *text);HRESULT (__stdcall *put_text)(IXMLDOMElement *This, BSTR text);HRESULT (__stdcall *get_specified)(IXMLDOMElement *This, VARIANT_BOOL *isSpecified);HRESULT (__stdcall *get_definition)(IXMLDOMElement *This, IXMLDOMNode **definitionNode);HRESULT (__stdcall *get_nodeTypedValue)(IXMLDOMElement *This, VARIANT *typedValue);HRESULT (__stdcall *put_nodeTypedValue)(IXMLDOMElement *This, VARIANT typedValue);HRESULT (__stdcall *get_dataType)(IXMLDOMElement *This, VARIANT *dataTypeName);HRESULT (__stdcall *put_dataType)(IXMLDOMElement *This, BSTR dataTypeName);HRESULT (__stdcall *get_xml)(IXMLDOMElement *This, BSTR *xmlString);HRESULT (__stdcall *transformNode)(IXMLDOMElement *This, IXMLDOMNode *stylesheet, BSTR *xmlString);HRESULT (__stdcall *selectNodes)(IXMLDOMElement *This, BSTR queryString, IXMLDOMNodeList **resultList);HRESULT (__stdcall *selectSingleNode)(IXMLDOMElement *This, BSTR queryString, IXMLDOMNode **resultNode);HRESULT (__stdcall *get_parsed)(IXMLDOMElement *This, VARIANT_BOOL *isParsed);HRESULT (__stdcall *get_namespaceURI)(IXMLDOMElement *This, BSTR *namespaceURI);HRESULT (__stdcall *get_prefix)(IXMLDOMElement *This, BSTR *prefixString);HRESULT (__stdcall *get_baseName)(IXMLDOMElement *This, BSTR *nameString);HRESULT (__stdcall *transformNodeToObject)(IXMLDOMElement *This, IXMLDOMNode *stylesheet, VARIANT outputObject);HRESULT (__stdcall *get_tagName)(IXMLDOMElement *This, BSTR *tagName);HRESULT (__stdcall *getAttribute)(IXMLDOMElement *This, BSTR name, VARIANT *value);HRESULT (__stdcall *setAttribute)(IXMLDOMElement *This, BSTR name, VARIANT value);HRESULT (__stdcall *removeAttribute)(IXMLDOMElement *This, BSTR name);HRESULT (__stdcall *getAttributeNode)(IXMLDOMElement *This, BSTR name, IXMLDOMAttribute **attributeNode);HRESULT (__stdcall *setAttributeNode)(IXMLDOMElement *This, IXMLDOMAttribute *DOMAttribute, IXMLDOMAttribute **attributeNode);HRESULT (__stdcall *removeAttributeNode)(IXMLDOMElement *This, IXMLDOMAttribute *DOMAttribute, IXMLDOMAttribute **attributeNode);HRESULT (__stdcall *getElementsByTagName)(IXMLDOMElement *This, BSTR tagName, IXMLDOMNodeList **resultList);HRESULT (__stdcall *normalize)(IXMLDOMElement *This);};
struct IXMLDOMEntityVtbl {HRESULT (__stdcall *QueryInterface)(IXMLDOMEntity *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IXMLDOMEntity *This);ULONG (__stdcall *Release)(IXMLDOMEntity *This);HRESULT (__stdcall *GetTypeInfoCount)(IXMLDOMEntity *This, UINT *pctinfo);HRESULT (__stdcall *GetTypeInfo)(IXMLDOMEntity *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT (__stdcall *GetIDsOfNames)(IXMLDOMEntity *This, const IID *const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT (__stdcall *Invoke)(IXMLDOMEntity *This, DISPID dispIdMember, const IID *const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT (__stdcall *get_nodeName)(IXMLDOMEntity *This, BSTR *name);HRESULT (__stdcall *get_nodeValue)(IXMLDOMEntity *This, VARIANT *value);HRESULT (__stdcall *put_nodeValue)(IXMLDOMEntity *This, VARIANT value);HRESULT (__stdcall *get_nodeType)(IXMLDOMEntity *This, DOMNodeType *type);HRESULT (__stdcall *get_parentNode)(IXMLDOMEntity *This, IXMLDOMNode **parent);HRESULT (__stdcall *get_childNodes)(IXMLDOMEntity *This, IXMLDOMNodeList **childList);HRESULT (__stdcall *get_firstChild)(IXMLDOMEntity *This, IXMLDOMNode **firstChild);HRESULT (__stdcall *get_lastChild)(IXMLDOMEntity *This, IXMLDOMNode **lastChild);HRESULT (__stdcall *get_previousSibling)(IXMLDOMEntity *This, IXMLDOMNode **previousSibling);HRESULT (__stdcall *get_nextSibling)(IXMLDOMEntity *This, IXMLDOMNode **nextSibling);HRESULT (__stdcall *get_attributes)(IXMLDOMEntity *This, IXMLDOMNamedNodeMap **attributeMap);HRESULT (__stdcall *insertBefore)(IXMLDOMEntity *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);HRESULT (__stdcall *replaceChild)(IXMLDOMEntity *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);HRESULT (__stdcall *removeChild)(IXMLDOMEntity *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);HRESULT (__stdcall *appendChild)(IXMLDOMEntity *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);HRESULT (__stdcall *hasChildNodes)(IXMLDOMEntity *This, VARIANT_BOOL *hasChild);HRESULT (__stdcall *get_ownerDocument)(IXMLDOMEntity *This, IXMLDOMDocument **DOMDocument);HRESULT (__stdcall *cloneNode)(IXMLDOMEntity *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);HRESULT (__stdcall *get_nodeTypeString)(IXMLDOMEntity *This, BSTR *nodeType);HRESULT (__stdcall *get_text)(IXMLDOMEntity *This, BSTR *text);HRESULT (__stdcall *put_text)(IXMLDOMEntity *This, BSTR text);HRESULT (__stdcall *get_specified)(IXMLDOMEntity *This, VARIANT_BOOL *isSpecified);HRESULT (__stdcall *get_definition)(IXMLDOMEntity *This, IXMLDOMNode **definitionNode);HRESULT (__stdcall *get_nodeTypedValue)(IXMLDOMEntity *This, VARIANT *typedValue);HRESULT (__stdcall *put_nodeTypedValue)(IXMLDOMEntity *This, VARIANT typedValue);HRESULT (__stdcall *get_dataType)(IXMLDOMEntity *This, VARIANT *dataTypeName);HRESULT (__stdcall *put_dataType)(IXMLDOMEntity *This, BSTR dataTypeName);HRESULT (__stdcall *get_xml)(IXMLDOMEntity *This, BSTR *xmlString);HRESULT (__stdcall *transformNode)(IXMLDOMEntity *This, IXMLDOMNode *stylesheet, BSTR *xmlString);HRESULT (__stdcall *selectNodes)(IXMLDOMEntity *This, BSTR queryString, IXMLDOMNodeList **resultList);HRESULT (__stdcall *selectSingleNode)(IXMLDOMEntity *This, BSTR queryString, IXMLDOMNode **resultNode);HRESULT (__stdcall *get_parsed)(IXMLDOMEntity *This, VARIANT_BOOL *isParsed);HRESULT (__stdcall *get_namespaceURI)(IXMLDOMEntity *This, BSTR *namespaceURI);HRESULT (__stdcall *get_prefix)(IXMLDOMEntity *This, BSTR *prefixString);HRESULT (__stdcall *get_baseName)(IXMLDOMEntity *This, BSTR *nameString);HRESULT (__stdcall *transformNodeToObject)(IXMLDOMEntity *This, IXMLDOMNode *stylesheet, VARIANT outputObject);HRESULT (__stdcall *get_publicId)(IXMLDOMEntity *This, VARIANT *publicID);HRESULT (__stdcall *get_systemId)(IXMLDOMEntity *This, VARIANT *systemID);HRESULT (__stdcall *get_notationName)(IXMLDOMEntity *This, BSTR *name);};
struct IXMLDOMNodeVtbl {HRESULT (__stdcall *QueryInterface)(IXMLDOMNode *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IXMLDOMNode *This);ULONG (__stdcall *Release)(IXMLDOMNode *This);HRESULT (__stdcall *GetTypeInfoCount)(IXMLDOMNode *This, UINT *pctinfo);HRESULT (__stdcall *GetTypeInfo)(IXMLDOMNode *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT (__stdcall *GetIDsOfNames)(IXMLDOMNode *This, const IID *const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT (__stdcall *Invoke)(IXMLDOMNode *This, DISPID dispIdMember, const IID *const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT (__stdcall *get_nodeName)(IXMLDOMNode *This, BSTR *name);HRESULT (__stdcall *get_nodeValue)(IXMLDOMNode *This, VARIANT *value);HRESULT (__stdcall *put_nodeValue)(IXMLDOMNode *This, VARIANT value);HRESULT (__stdcall *get_nodeType)(IXMLDOMNode *This, DOMNodeType *type);HRESULT (__stdcall *get_parentNode)(IXMLDOMNode *This, IXMLDOMNode **parent);HRESULT (__stdcall *get_childNodes)(IXMLDOMNode *This, IXMLDOMNodeList **childList);HRESULT (__stdcall *get_firstChild)(IXMLDOMNode *This, IXMLDOMNode **firstChild);HRESULT (__stdcall *get_lastChild)(IXMLDOMNode *This, IXMLDOMNode **lastChild);HRESULT (__stdcall *get_previousSibling)(IXMLDOMNode *This, IXMLDOMNode **previousSibling);HRESULT (__stdcall *get_nextSibling)(IXMLDOMNode *This, IXMLDOMNode **nextSibling);HRESULT (__stdcall *get_attributes)(IXMLDOMNode *This, IXMLDOMNamedNodeMap **attributeMap);HRESULT (__stdcall *insertBefore)(IXMLDOMNode *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);HRESULT (__stdcall *replaceChild)(IXMLDOMNode *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);HRESULT (__stdcall *removeChild)(IXMLDOMNode *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);HRESULT (__stdcall *appendChild)(IXMLDOMNode *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);HRESULT (__stdcall *hasChildNodes)(IXMLDOMNode *This, VARIANT_BOOL *hasChild);HRESULT (__stdcall *get_ownerDocument)(IXMLDOMNode *This, IXMLDOMDocument **DOMDocument);HRESULT (__stdcall *cloneNode)(IXMLDOMNode *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);HRESULT (__stdcall *get_nodeTypeString)(IXMLDOMNode *This, BSTR *nodeType);HRESULT (__stdcall *get_text)(IXMLDOMNode *This, BSTR *text);HRESULT (__stdcall *put_text)(IXMLDOMNode *This, BSTR text);HRESULT (__stdcall *get_specified)(IXMLDOMNode *This, VARIANT_BOOL *isSpecified);HRESULT (__stdcall *get_definition)(IXMLDOMNode *This, IXMLDOMNode **definitionNode);HRESULT (__stdcall *get_nodeTypedValue)(IXMLDOMNode *This, VARIANT *typedValue);HRESULT (__stdcall *put_nodeTypedValue)(IXMLDOMNode *This, VARIANT typedValue);HRESULT (__stdcall *get_dataType)(IXMLDOMNode *This, VARIANT *dataTypeName);HRESULT (__stdcall *put_dataType)(IXMLDOMNode *This, BSTR dataTypeName);HRESULT (__stdcall *get_xml)(IXMLDOMNode *This, BSTR *xmlString);HRESULT (__stdcall *transformNode)(IXMLDOMNode *This, IXMLDOMNode *stylesheet, BSTR *xmlString);HRESULT (__stdcall *selectNodes)(IXMLDOMNode *This, BSTR queryString, IXMLDOMNodeList **resultList);HRESULT (__stdcall *selectSingleNode)(IXMLDOMNode *This, BSTR queryString, IXMLDOMNode **resultNode);HRESULT (__stdcall *get_parsed)(IXMLDOMNode *This, VARIANT_BOOL *isParsed);HRESULT (__stdcall *get_namespaceURI)(IXMLDOMNode *This, BSTR *namespaceURI);HRESULT (__stdcall *get_prefix)(IXMLDOMNode *This, BSTR *prefixString);HRESULT (__stdcall *get_baseName)(IXMLDOMNode *This, BSTR *nameString);HRESULT (__stdcall *transformNodeToObject)(IXMLDOMNode *This, IXMLDOMNode *stylesheet, VARIANT outputObject);};
struct IXMLDOMTextVtbl {HRESULT (__stdcall *QueryInterface)(IXMLDOMText *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IXMLDOMText *This);ULONG (__stdcall *Release)(IXMLDOMText *This);HRESULT (__stdcall *GetTypeInfoCount)(IXMLDOMText *This, UINT *pctinfo);HRESULT (__stdcall *GetTypeInfo)(IXMLDOMText *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT (__stdcall *GetIDsOfNames)(IXMLDOMText *This, const IID *const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT (__stdcall *Invoke)(IXMLDOMText *This, DISPID dispIdMember, const IID *const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT (__stdcall *get_nodeName)(IXMLDOMText *This, BSTR *name);HRESULT (__stdcall *get_nodeValue)(IXMLDOMText *This, VARIANT *value);HRESULT (__stdcall *put_nodeValue)(IXMLDOMText *This, VARIANT value);HRESULT (__stdcall *get_nodeType)(IXMLDOMText *This, DOMNodeType *type);HRESULT (__stdcall *get_parentNode)(IXMLDOMText *This, IXMLDOMNode **parent);HRESULT (__stdcall *get_childNodes)(IXMLDOMText *This, IXMLDOMNodeList **childList);HRESULT (__stdcall *get_firstChild)(IXMLDOMText *This, IXMLDOMNode **firstChild);HRESULT (__stdcall *get_lastChild)(IXMLDOMText *This, IXMLDOMNode **lastChild);HRESULT (__stdcall *get_previousSibling)(IXMLDOMText *This, IXMLDOMNode **previousSibling);HRESULT (__stdcall *get_nextSibling)(IXMLDOMText *This, IXMLDOMNode **nextSibling);HRESULT (__stdcall *get_attributes)(IXMLDOMText *This, IXMLDOMNamedNodeMap **attributeMap);HRESULT (__stdcall *insertBefore)(IXMLDOMText *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);HRESULT (__stdcall *replaceChild)(IXMLDOMText *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);HRESULT (__stdcall *removeChild)(IXMLDOMText *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);HRESULT (__stdcall *appendChild)(IXMLDOMText *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);HRESULT (__stdcall *hasChildNodes)(IXMLDOMText *This, VARIANT_BOOL *hasChild);HRESULT (__stdcall *get_ownerDocument)(IXMLDOMText *This, IXMLDOMDocument **DOMDocument);HRESULT (__stdcall *cloneNode)(IXMLDOMText *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);HRESULT (__stdcall *get_nodeTypeString)(IXMLDOMText *This, BSTR *nodeType);HRESULT (__stdcall *get_text)(IXMLDOMText *This, BSTR *text);HRESULT (__stdcall *put_text)(IXMLDOMText *This, BSTR text);HRESULT (__stdcall *get_specified)(IXMLDOMText *This, VARIANT_BOOL *isSpecified);HRESULT (__stdcall *get_definition)(IXMLDOMText *This, IXMLDOMNode **definitionNode);HRESULT (__stdcall *get_nodeTypedValue)(IXMLDOMText *This, VARIANT *typedValue);HRESULT (__stdcall *put_nodeTypedValue)(IXMLDOMText *This, VARIANT typedValue);HRESULT (__stdcall *get_dataType)(IXMLDOMText *This, VARIANT *dataTypeName);HRESULT (__stdcall *put_dataType)(IXMLDOMText *This, BSTR dataTypeName);HRESULT (__stdcall *get_xml)(IXMLDOMText *This, BSTR *xmlString);HRESULT (__stdcall *transformNode)(IXMLDOMText *This, IXMLDOMNode *stylesheet, BSTR *xmlString);HRESULT (__stdcall *selectNodes)(IXMLDOMText *This, BSTR queryString, IXMLDOMNodeList **resultList);HRESULT (__stdcall *selectSingleNode)(IXMLDOMText *This, BSTR queryString, IXMLDOMNode **resultNode);HRESULT (__stdcall *get_parsed)(IXMLDOMText *This, VARIANT_BOOL *isParsed);HRESULT (__stdcall *get_namespaceURI)(IXMLDOMText *This, BSTR *namespaceURI);HRESULT (__stdcall *get_prefix)(IXMLDOMText *This, BSTR *prefixString);HRESULT (__stdcall *get_baseName)(IXMLDOMText *This, BSTR *nameString);HRESULT (__stdcall *transformNodeToObject)(IXMLDOMText *This, IXMLDOMNode *stylesheet, VARIANT outputObject);HRESULT (__stdcall *get_data)(IXMLDOMText *This, BSTR *data);HRESULT (__stdcall *put_data)(IXMLDOMText *This, BSTR data);HRESULT (__stdcall *get_length)(IXMLDOMText *This, int *dataLength);HRESULT (__stdcall *substringData)(IXMLDOMText *This, int offset, int count, BSTR *data);HRESULT (__stdcall *appendData)(IXMLDOMText *This, BSTR data);HRESULT (__stdcall *insertData)(IXMLDOMText *This, int offset, BSTR data);HRESULT (__stdcall *deleteData)(IXMLDOMText *This, int offset, int count);HRESULT (__stdcall *replaceData)(IXMLDOMText *This, int offset, int count, BSTR data);HRESULT (__stdcall *splitText)(IXMLDOMText *This, int offset, IXMLDOMText **rightHandTextNode);};
struct IXTLRuntimeVtbl {HRESULT (__stdcall *QueryInterface)(IXTLRuntime *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(IXTLRuntime *This);ULONG (__stdcall *Release)(IXTLRuntime *This);HRESULT (__stdcall *GetTypeInfoCount)(IXTLRuntime *This, UINT *pctinfo);HRESULT (__stdcall *GetTypeInfo)(IXTLRuntime *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);HRESULT (__stdcall *GetIDsOfNames)(IXTLRuntime *This, const IID *const riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);HRESULT (__stdcall *Invoke)(IXTLRuntime *This, DISPID dispIdMember, const IID *const riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT (__stdcall *get_nodeName)(IXTLRuntime *This, BSTR *name);HRESULT (__stdcall *get_nodeValue)(IXTLRuntime *This, VARIANT *value);HRESULT (__stdcall *put_nodeValue)(IXTLRuntime *This, VARIANT value);HRESULT (__stdcall *get_nodeType)(IXTLRuntime *This, DOMNodeType *type);HRESULT (__stdcall *get_parentNode)(IXTLRuntime *This, IXMLDOMNode **parent);HRESULT (__stdcall *get_childNodes)(IXTLRuntime *This, IXMLDOMNodeList **childList);HRESULT (__stdcall *get_firstChild)(IXTLRuntime *This, IXMLDOMNode **firstChild);HRESULT (__stdcall *get_lastChild)(IXTLRuntime *This, IXMLDOMNode **lastChild);HRESULT (__stdcall *get_previousSibling)(IXTLRuntime *This, IXMLDOMNode **previousSibling);HRESULT (__stdcall *get_nextSibling)(IXTLRuntime *This, IXMLDOMNode **nextSibling);HRESULT (__stdcall *get_attributes)(IXTLRuntime *This, IXMLDOMNamedNodeMap **attributeMap);HRESULT (__stdcall *insertBefore)(IXTLRuntime *This, IXMLDOMNode *newChild, VARIANT refChild, IXMLDOMNode **outNewChild);HRESULT (__stdcall *replaceChild)(IXTLRuntime *This, IXMLDOMNode *newChild, IXMLDOMNode *oldChild, IXMLDOMNode **outOldChild);HRESULT (__stdcall *removeChild)(IXTLRuntime *This, IXMLDOMNode *childNode, IXMLDOMNode **oldChild);HRESULT (__stdcall *appendChild)(IXTLRuntime *This, IXMLDOMNode *newChild, IXMLDOMNode **outNewChild);HRESULT (__stdcall *hasChildNodes)(IXTLRuntime *This, VARIANT_BOOL *hasChild);HRESULT (__stdcall *get_ownerDocument)(IXTLRuntime *This, IXMLDOMDocument **DOMDocument);HRESULT (__stdcall *cloneNode)(IXTLRuntime *This, VARIANT_BOOL deep, IXMLDOMNode **cloneRoot);HRESULT (__stdcall *get_nodeTypeString)(IXTLRuntime *This, BSTR *nodeType);HRESULT (__stdcall *get_text)(IXTLRuntime *This, BSTR *text);HRESULT (__stdcall *put_text)(IXTLRuntime *This, BSTR text);HRESULT (__stdcall *get_specified)(IXTLRuntime *This, VARIANT_BOOL *isSpecified);HRESULT (__stdcall *get_definition)(IXTLRuntime *This, IXMLDOMNode **definitionNode);HRESULT (__stdcall *get_nodeTypedValue)(IXTLRuntime *This, VARIANT *typedValue);HRESULT (__stdcall *put_nodeTypedValue)(IXTLRuntime *This, VARIANT typedValue);HRESULT (__stdcall *get_dataType)(IXTLRuntime *This, VARIANT *dataTypeName);HRESULT (__stdcall *put_dataType)(IXTLRuntime *This, BSTR dataTypeName);HRESULT (__stdcall *get_xml)(IXTLRuntime *This, BSTR *xmlString);HRESULT (__stdcall *transformNode)(IXTLRuntime *This, IXMLDOMNode *stylesheet, BSTR *xmlString);HRESULT (__stdcall *selectNodes)(IXTLRuntime *This, BSTR queryString, IXMLDOMNodeList **resultList);HRESULT (__stdcall *selectSingleNode)(IXTLRuntime *This, BSTR queryString, IXMLDOMNode **resultNode);HRESULT (__stdcall *get_parsed)(IXTLRuntime *This, VARIANT_BOOL *isParsed);HRESULT (__stdcall *get_namespaceURI)(IXTLRuntime *This, BSTR *namespaceURI);HRESULT (__stdcall *get_prefix)(IXTLRuntime *This, BSTR *prefixString);HRESULT (__stdcall *get_baseName)(IXTLRuntime *This, BSTR *nameString);HRESULT (__stdcall *transformNodeToObject)(IXTLRuntime *This, IXMLDOMNode *stylesheet, VARIANT outputObject);HRESULT (__stdcall *uniqueID)(IXTLRuntime *This, IXMLDOMNode *pNode, int *pID);HRESULT (__stdcall *depth)(IXTLRuntime *This, IXMLDOMNode *pNode, int *pDepth);HRESULT (__stdcall *childNumber)(IXTLRuntime *This, IXMLDOMNode *pNode, int *pNumber);HRESULT (__stdcall *ancestorChildNumber)(IXTLRuntime *This, BSTR bstrNodeName, IXMLDOMNode *pNode, int *pNumber);HRESULT (__stdcall *absoluteChildNumber)(IXTLRuntime *This, IXMLDOMNode *pNode, int *pNumber);HRESULT (__stdcall *formatIndex)(IXTLRuntime *This, int lIndex, BSTR bstrFormat, BSTR *pbstrFormattedString);HRESULT (__stdcall *formatNumber)(IXTLRuntime *This, double dblNumber, BSTR bstrFormat, BSTR *pbstrFormattedString);HRESULT (__stdcall *formatDate)(IXTLRuntime *This, VARIANT varDate, BSTR bstrFormat, VARIANT varDestLocale, BSTR *pbstrFormattedString);HRESULT (__stdcall *formatTime)(IXTLRuntime *This, VARIANT varTime, BSTR bstrFormat, VARIANT varDestLocale, BSTR *pbstrFormattedString);};
struct ITypeLib2Vtbl {HRESULT (__stdcall *QueryInterface)(ITypeLib2 *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(ITypeLib2 *This);ULONG (__stdcall *Release)(ITypeLib2 *This);UINT (__stdcall *GetTypeInfoCount)(ITypeLib2 *This);HRESULT (__stdcall *GetTypeInfo)(ITypeLib2 *This, UINT index, ITypeInfo **ppTInfo);HRESULT (__stdcall *GetTypeInfoType)(ITypeLib2 *This, UINT index, TYPEKIND *pTKind);HRESULT (__stdcall *GetTypeInfoOfGuid)(ITypeLib2 *This, const GUID *const guid, ITypeInfo **ppTinfo);HRESULT (__stdcall *GetLibAttr)(ITypeLib2 *This, TLIBATTR **ppTLibAttr);HRESULT (__stdcall *GetTypeComp)(ITypeLib2 *This, ITypeComp **ppTComp);HRESULT (__stdcall *GetDocumentation)(ITypeLib2 *This, INT index, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile);HRESULT (__stdcall *IsName)(ITypeLib2 *This, LPOLESTR szNameBuf, ULONG lHashVal, BOOL *pfName);HRESULT (__stdcall *FindName)(ITypeLib2 *This, LPOLESTR szNameBuf, ULONG lHashVal, ITypeInfo **ppTInfo, MEMBERID *rgMemId, USHORT *pcFound);void (__stdcall *ReleaseTLibAttr)(ITypeLib2 *This, TLIBATTR *pTLibAttr);HRESULT (__stdcall *GetCustData)(ITypeLib2 *This, const GUID *const guid, VARIANT *pVarVal);HRESULT (__stdcall *GetLibStatistics)(ITypeLib2 *This, ULONG *pcUniqueNames, ULONG *pcchUniqueNames);HRESULT (__stdcall *GetDocumentation2)(ITypeLib2 *This, INT index, LCID lcid, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll);HRESULT (__stdcall *GetAllCustData)(ITypeLib2 *This, CUSTDATA *pCustData);};
struct ICreateTypeInfo2Vtbl {HRESULT (__stdcall *QueryInterface)(ICreateTypeInfo2 *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(ICreateTypeInfo2 *This);ULONG (__stdcall *Release)(ICreateTypeInfo2 *This);HRESULT (__stdcall *SetGuid)(ICreateTypeInfo2 *This, const GUID *const guid);HRESULT (__stdcall *SetTypeFlags)(ICreateTypeInfo2 *This, UINT uTypeFlags);HRESULT (__stdcall *SetDocString)(ICreateTypeInfo2 *This, LPOLESTR pStrDoc);HRESULT (__stdcall *SetHelpContext)(ICreateTypeInfo2 *This, DWORD dwHelpContext);HRESULT (__stdcall *SetVersion)(ICreateTypeInfo2 *This, WORD wMajorVerNum, WORD wMinorVerNum);HRESULT (__stdcall *AddRefTypeInfo)(ICreateTypeInfo2 *This, ITypeInfo *pTInfo, HREFTYPE *phRefType);HRESULT (__stdcall *AddFuncDesc)(ICreateTypeInfo2 *This, UINT index, FUNCDESC *pFuncDesc);HRESULT (__stdcall *AddImplType)(ICreateTypeInfo2 *This, UINT index, HREFTYPE hRefType);HRESULT (__stdcall *SetImplTypeFlags)(ICreateTypeInfo2 *This, UINT index, INT implTypeFlags);HRESULT (__stdcall *SetAlignment)(ICreateTypeInfo2 *This, WORD cbAlignment);HRESULT (__stdcall *SetSchema)(ICreateTypeInfo2 *This, LPOLESTR pStrSchema);HRESULT (__stdcall *AddVarDesc)(ICreateTypeInfo2 *This, UINT index, VARDESC *pVarDesc);HRESULT (__stdcall *SetFuncAndParamNames)(ICreateTypeInfo2 *This, UINT index, LPOLESTR *rgszNames, UINT cNames);HRESULT (__stdcall *SetVarName)(ICreateTypeInfo2 *This, UINT index, LPOLESTR szName);HRESULT (__stdcall *SetTypeDescAlias)(ICreateTypeInfo2 *This, TYPEDESC *pTDescAlias);HRESULT (__stdcall *DefineFuncAsDllEntry)(ICreateTypeInfo2 *This, UINT index, LPOLESTR szDllName, LPOLESTR szProcName);HRESULT (__stdcall *SetFuncDocString)(ICreateTypeInfo2 *This, UINT index, LPOLESTR szDocString);HRESULT (__stdcall *SetVarDocString)(ICreateTypeInfo2 *This, UINT index, LPOLESTR szDocString);HRESULT (__stdcall *SetFuncHelpContext)(ICreateTypeInfo2 *This, UINT index, DWORD dwHelpContext);HRESULT (__stdcall *SetVarHelpContext)(ICreateTypeInfo2 *This, UINT index, DWORD dwHelpContext);HRESULT (__stdcall *SetMops)(ICreateTypeInfo2 *This, UINT index, BSTR bstrMops);HRESULT (__stdcall *SetTypeIdldesc)(ICreateTypeInfo2 *This, IDLDESC *pIdlDesc);HRESULT (__stdcall *LayOut)(ICreateTypeInfo2 *This);HRESULT (__stdcall *DeleteFuncDesc)(ICreateTypeInfo2 *This, UINT index);HRESULT (__stdcall *DeleteFuncDescByMemId)(ICreateTypeInfo2 *This, MEMBERID memid, INVOKEKIND invKind);HRESULT (__stdcall *DeleteVarDesc)(ICreateTypeInfo2 *This, UINT index);HRESULT (__stdcall *DeleteVarDescByMemId)(ICreateTypeInfo2 *This, MEMBERID memid);HRESULT (__stdcall *DeleteImplType)(ICreateTypeInfo2 *This, UINT index);HRESULT (__stdcall *SetCustData)(ICreateTypeInfo2 *This, const GUID *const guid, VARIANT *pVarVal);HRESULT (__stdcall *SetFuncCustData)(ICreateTypeInfo2 *This, UINT index, const GUID *const guid, VARIANT *pVarVal);HRESULT (__stdcall *SetParamCustData)(ICreateTypeInfo2 *This, UINT indexFunc, UINT indexParam, const GUID *const guid, VARIANT *pVarVal);HRESULT (__stdcall *SetVarCustData)(ICreateTypeInfo2 *This, UINT index, const GUID *const guid, VARIANT *pVarVal);HRESULT (__stdcall *SetImplTypeCustData)(ICreateTypeInfo2 *This, UINT index, const GUID *const guid, VARIANT *pVarVal);HRESULT (__stdcall *SetHelpStringContext)(ICreateTypeInfo2 *This, ULONG dwHelpStringContext);HRESULT (__stdcall *SetFuncHelpStringContext)(ICreateTypeInfo2 *This, UINT index, ULONG dwHelpStringContext);HRESULT (__stdcall *SetVarHelpStringContext)(ICreateTypeInfo2 *This, UINT index, ULONG dwHelpStringContext);HRESULT (__stdcall *Invalidate)(ICreateTypeInfo2 *This);HRESULT (__stdcall *SetName)(ICreateTypeInfo2 *This, LPOLESTR szName);};
struct ITypeInfoVtbl {HRESULT (__stdcall *QueryInterface)(ITypeInfo *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(ITypeInfo *This);ULONG (__stdcall *Release)(ITypeInfo *This);HRESULT (__stdcall *GetTypeAttr)(ITypeInfo *This, TYPEATTR **ppTypeAttr);HRESULT (__stdcall *GetTypeComp)(ITypeInfo *This, ITypeComp **ppTComp);HRESULT (__stdcall *GetFuncDesc)(ITypeInfo *This, UINT index, FUNCDESC **ppFuncDesc);HRESULT (__stdcall *GetVarDesc)(ITypeInfo *This, UINT index, VARDESC **ppVarDesc);HRESULT (__stdcall *GetNames)(ITypeInfo *This, MEMBERID memid, BSTR *rgBstrNames, UINT cMaxNames, UINT *pcNames);HRESULT (__stdcall *GetRefTypeOfImplType)(ITypeInfo *This, UINT index, HREFTYPE *pRefType);HRESULT (__stdcall *GetImplTypeFlags)(ITypeInfo *This, UINT index, INT *pImplTypeFlags);HRESULT (__stdcall *GetIDsOfNames)(ITypeInfo *This, LPOLESTR *rgszNames, UINT cNames, MEMBERID *pMemId);HRESULT (__stdcall *Invoke)(ITypeInfo *This, PVOID pvInstance, MEMBERID memid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT (__stdcall *GetDocumentation)(ITypeInfo *This, MEMBERID memid, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile);HRESULT (__stdcall *GetDllEntry)(ITypeInfo *This, MEMBERID memid, INVOKEKIND invKind, BSTR *pBstrDllName, BSTR *pBstrName, WORD *pwOrdinal);HRESULT (__stdcall *GetRefTypeInfo)(ITypeInfo *This, HREFTYPE hRefType, ITypeInfo **ppTInfo);HRESULT (__stdcall *AddressOfMember)(ITypeInfo *This, MEMBERID memid, INVOKEKIND invKind, PVOID *ppv);HRESULT (__stdcall *CreateInstance)(ITypeInfo *This, IUnknown *pUnkOuter, const IID *const riid, PVOID *ppvObj);HRESULT (__stdcall *GetMops)(ITypeInfo *This, MEMBERID memid, BSTR *pBstrMops);HRESULT (__stdcall *GetContainingTypeLib)(ITypeInfo *This, ITypeLib **ppTLib, UINT *pIndex);void (__stdcall *ReleaseTypeAttr)(ITypeInfo *This, TYPEATTR *pTypeAttr);void (__stdcall *ReleaseFuncDesc)(ITypeInfo *This, FUNCDESC *pFuncDesc);void (__stdcall *ReleaseVarDesc)(ITypeInfo *This, VARDESC *pVarDesc);};
struct ITypeInfo2Vtbl {HRESULT (__stdcall *QueryInterface)(ITypeInfo2 *This, const IID *const riid, void **ppvObject);ULONG (__stdcall *AddRef)(ITypeInfo2 *This);ULONG (__stdcall *Release)(ITypeInfo2 *This);HRESULT (__stdcall *GetTypeAttr)(ITypeInfo2 *This, TYPEATTR **ppTypeAttr);HRESULT (__stdcall *GetTypeComp)(ITypeInfo2 *This, ITypeComp **ppTComp);HRESULT (__stdcall *GetFuncDesc)(ITypeInfo2 *This, UINT index, FUNCDESC **ppFuncDesc);HRESULT (__stdcall *GetVarDesc)(ITypeInfo2 *This, UINT index, VARDESC **ppVarDesc);HRESULT (__stdcall *GetNames)(ITypeInfo2 *This, MEMBERID memid, BSTR *rgBstrNames, UINT cMaxNames, UINT *pcNames);HRESULT (__stdcall *GetRefTypeOfImplType)(ITypeInfo2 *This, UINT index, HREFTYPE *pRefType);HRESULT (__stdcall *GetImplTypeFlags)(ITypeInfo2 *This, UINT index, INT *pImplTypeFlags);HRESULT (__stdcall *GetIDsOfNames)(ITypeInfo2 *This, LPOLESTR *rgszNames, UINT cNames, MEMBERID *pMemId);HRESULT (__stdcall *Invoke)(ITypeInfo2 *This, PVOID pvInstance, MEMBERID memid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);HRESULT (__stdcall *GetDocumentation)(ITypeInfo2 *This, MEMBERID memid, BSTR *pBstrName, BSTR *pBstrDocString, DWORD *pdwHelpContext, BSTR *pBstrHelpFile);HRESULT (__stdcall *GetDllEntry)(ITypeInfo2 *This, MEMBERID memid, INVOKEKIND invKind, BSTR *pBstrDllName, BSTR *pBstrName, WORD *pwOrdinal);HRESULT (__stdcall *GetRefTypeInfo)(ITypeInfo2 *This, HREFTYPE hRefType, ITypeInfo **ppTInfo);HRESULT (__stdcall *AddressOfMember)(ITypeInfo2 *This, MEMBERID memid, INVOKEKIND invKind, PVOID *ppv);HRESULT (__stdcall *CreateInstance)(ITypeInfo2 *This, IUnknown *pUnkOuter, const IID *const riid, PVOID *ppvObj);HRESULT (__stdcall *GetMops)(ITypeInfo2 *This, MEMBERID memid, BSTR *pBstrMops);HRESULT (__stdcall *GetContainingTypeLib)(ITypeInfo2 *This, ITypeLib **ppTLib, UINT *pIndex);void (__stdcall *ReleaseTypeAttr)(ITypeInfo2 *This, TYPEATTR *pTypeAttr);void (__stdcall *ReleaseFuncDesc)(ITypeInfo2 *This, FUNCDESC *pFuncDesc);void (__stdcall *ReleaseVarDesc)(ITypeInfo2 *This, VARDESC *pVarDesc);HRESULT (__stdcall *GetTypeKind)(ITypeInfo2 *This, TYPEKIND *pTypeKind);HRESULT (__stdcall *GetTypeFlags)(ITypeInfo2 *This, ULONG *pTypeFlags);HRESULT (__stdcall *GetFuncIndexOfMemId)(ITypeInfo2 *This, MEMBERID memid, INVOKEKIND invKind, UINT *pFuncIndex);HRESULT (__stdcall *GetVarIndexOfMemId)(ITypeInfo2 *This, MEMBERID memid, UINT *pVarIndex);HRESULT (__stdcall *GetCustData)(ITypeInfo2 *This, const GUID *const guid, VARIANT *pVarVal);HRESULT (__stdcall *GetFuncCustData)(ITypeInfo2 *This, UINT index, const GUID *const guid, VARIANT *pVarVal);HRESULT (__stdcall *GetParamCustData)(ITypeInfo2 *This, UINT indexFunc, UINT indexParam, const GUID *const guid, VARIANT *pVarVal);HRESULT (__stdcall *GetVarCustData)(ITypeInfo2 *This, UINT index, const GUID *const guid, VARIANT *pVarVal);HRESULT (__stdcall *GetImplTypeCustData)(ITypeInfo2 *This, UINT index, const GUID *const guid, VARIANT *pVarVal);HRESULT (__stdcall *GetDocumentation2)(ITypeInfo2 *This, MEMBERID memid, LCID lcid, BSTR *pbstrHelpString, DWORD *pdwHelpStringContext, BSTR *pbstrHelpStringDll);HRESULT (__stdcall *GetAllCustData)(ITypeInfo2 *This, CUSTDATA *pCustData);HRESULT (__stdcall *GetAllFuncCustData)(ITypeInfo2 *This, UINT index, CUSTDATA *pCustData);HRESULT (__stdcall *GetAllParamCustData)(ITypeInfo2 *This, UINT indexFunc, UINT indexParam, CUSTDATA *pCustData);HRESULT (__stdcall *GetAllVarCustData)(ITypeInfo2 *This, UINT index, CUSTDATA *pCustData);HRESULT (__stdcall *GetAllImplTypeCustData)(ITypeInfo2 *This, UINT index, CUSTDATA *pCustData);};
union tagPROPVARIANT___B01A803922ACEB71FC353E1ACAA1539E {tagPROPVARIANT___B01A803922ACEB71FC353E1ACAA1539E___1A0FF913CB6A2700FBDFFDCC16233417 __anonymous0;DECIMAL decVal;};
union tagVARIANT___F060C15D409704AFCEB2B499364615C4 {struct tagVARIANT___F060C15D409704AFCEB2B499364615C4____tagVARIANT n2;DECIMAL decVal;};
struct __MIDL___MIDL_itf_wtypes_0003_0001 {DWORD tyspec;union __MIDL___MIDL_itf_wtypes_0003_0001____MIDL___MIDL_itf_wtypes_0003_0005 tagged_union;};
struct _userSTGMEDIUM___STGMEDIUM_UNION {DWORD tymed;union _userSTGMEDIUM___STGMEDIUM_UNION____MIDL_IAdviseSink_0003 u;};
struct tagSTGMEDIUM {DWORD tymed;union tagSTGMEDIUM___7B772CC839E5463FC51219F893F364BB u;IUnknown *pUnkForRelease;};
struct _RPC_ASYNC_STATE {unsigned int Size;unsigned int Signature;int Lock;unsigned int Flags;void *StubInfo;void *UserInfo;void *RuntimeInfo;RPC_ASYNC_EVENT Event;RPC_NOTIFICATION_TYPES NotificationType;union _RPC_ASYNC_STATE___C850AED24DDA9EA1FCF494DA424838E3 u;LONG_PTR Reserved[4];};
struct tagPROPVARIANT {tagPROPVARIANT___B01A803922ACEB71FC353E1ACAA1539E __anonymous0;};
struct tagVARIANT {union tagVARIANT___F060C15D409704AFCEB2B499364615C4 n1;};



#endif
